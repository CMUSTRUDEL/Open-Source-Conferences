Title: LAS2019 - Maintaining a flatpak repository
Publication date: 2019-12-23
Playlist: LINUX APP SUMMIT 2019 TALKS
Description: 
	Maintaining a flatpak repository

Alexander Larsson
Captions: 
	00:00:00,170 --> 00:00:04,850
[Applause]

00:00:02,149 --> 00:00:14,400
going to present at maintaining a

00:00:04,850 --> 00:00:17,580
flat-pack repository so I'm Alex I work

00:00:14,400 --> 00:00:20,010
at Red Hat's I've been doing no stop for

00:00:17,580 --> 00:00:22,529
the last 20 years or so last I think

00:00:20,010 --> 00:00:25,560
maybe now four or so I've been working

00:00:22,529 --> 00:00:28,619
on flat pack and flat table and all the

00:00:25,560 --> 00:00:31,560
ecosystems around that and this is gonna

00:00:28,619 --> 00:00:34,770
be a talk about how to maintain a flat

00:00:31,560 --> 00:00:36,480
pack repository one of the core parts of

00:00:34,770 --> 00:00:38,969
how that might work is that it's

00:00:36,480 --> 00:00:41,420
distributed anyone we're decentralized

00:00:38,969 --> 00:00:46,289
or like anyone can run their own

00:00:41,420 --> 00:00:48,960
repository this is not maybe what you

00:00:46,289 --> 00:00:50,969
always want if you just want to publish

00:00:48,960 --> 00:00:53,309
your thing it's much easy to use put it

00:00:50,969 --> 00:00:55,559
on flat top or you know if you

00:00:53,309 --> 00:00:57,420
eventually have an elementary story's

00:00:55,559 --> 00:00:59,100
put it there but it's also possible that

00:00:57,420 --> 00:01:02,070
you might want to do your own thing for

00:00:59,100 --> 00:01:03,989
a CI system or or friendless or

00:01:02,070 --> 00:01:06,090
something so this is about that so it's

00:01:03,989 --> 00:01:07,740
gonna be sort of technical I mean I

00:01:06,090 --> 00:01:10,950
guess I should first say well it's flat

00:01:07,740 --> 00:01:16,470
pack but I assume most people know what

00:01:10,950 --> 00:01:21,020
s it is for you to install apps gonna do

00:01:16,470 --> 00:01:24,840
that right does that follow the rules

00:01:21,020 --> 00:01:27,479
anyway it does all sorts of stuff like

00:01:24,840 --> 00:01:31,110
sandbox and portals I'm not but in this

00:01:27,479 --> 00:01:33,600
talk we're just gonna assume that apps

00:01:31,110 --> 00:01:37,140
are files that we ship from A to B and

00:01:33,600 --> 00:01:39,960
you see in DNA so we have one place

00:01:37,140 --> 00:01:42,329
where we want to ship to many places to

00:01:39,960 --> 00:01:44,670
many users and and this talk is gonna be

00:01:42,329 --> 00:01:46,979
about how flatbacks stores files how

00:01:44,670 --> 00:01:49,790
flatbacks transfers files and it's gotta

00:01:46,979 --> 00:01:54,390
be a lot of backing technical stuff

00:01:49,790 --> 00:01:56,130
which is not necessarily super important

00:01:54,390 --> 00:01:57,600
to know all the details about but having

00:01:56,130 --> 00:02:00,119
a feeling for how it works and how the

00:01:57,600 --> 00:02:03,360
repository looks helps a lot when you

00:02:00,119 --> 00:02:06,299
run it so it's gonna be how it how it

00:02:03,360 --> 00:02:08,879
works but also how you as a sysadmin

00:02:06,299 --> 00:02:10,819
like physically like type commands to

00:02:08,879 --> 00:02:13,579
make things happen

00:02:10,819 --> 00:02:16,819
so the basic of everything flat-pack is

00:02:13,579 --> 00:02:19,790
Ola Street Oh Street is often described

00:02:16,819 --> 00:02:21,739
as get for operating system which if you

00:02:19,790 --> 00:02:24,590
happen to know the details of the get

00:02:21,739 --> 00:02:26,689
internals is a very good explanation but

00:02:24,590 --> 00:02:29,620
most people don't actually know they get

00:02:26,689 --> 00:02:32,480
data model so I'm gonna talk to you to

00:02:29,620 --> 00:02:37,189
the details of how a reporter actually

00:02:32,480 --> 00:02:40,219
works so typically a repository is a

00:02:37,189 --> 00:02:43,849
storage of directors of files in

00:02:40,219 --> 00:02:45,230
something called branches so we start

00:02:43,849 --> 00:02:48,650
with an app which is just a bunch of

00:02:45,230 --> 00:02:51,919
files and they're regular files and we

00:02:48,650 --> 00:02:54,079
make a repository using the Roasterie

00:02:51,919 --> 00:02:56,030
ripple init command and if we come in it

00:02:54,079 --> 00:03:00,470
and we give it a name

00:02:56,030 --> 00:03:03,019
the name is called branch here you don't

00:03:00,470 --> 00:03:05,359
talk typically cool things master in

00:03:03,019 --> 00:03:08,530
poetry that's more of a good thing but

00:03:05,359 --> 00:03:11,150
you could and it will spit out this

00:03:08,530 --> 00:03:13,430
identifier for the commit that is

00:03:11,150 --> 00:03:15,680
currently the one that is on the tip of

00:03:13,430 --> 00:03:17,840
the master branch and you can use

00:03:15,680 --> 00:03:20,510
commands very similar to get to get

00:03:17,840 --> 00:03:24,430
information about the branch this here

00:03:20,510 --> 00:03:26,930
is the object identifier for the commit

00:03:24,430 --> 00:03:30,379
and if you look at the result of this

00:03:26,930 --> 00:03:33,169
and if you ever looked into the dot yet

00:03:30,379 --> 00:03:37,389
directory in a get check out you will

00:03:33,169 --> 00:03:37,389
recognize this it's very very similar

00:03:39,400 --> 00:03:44,979
everything starts in this directory

00:03:41,449 --> 00:03:49,069
called ref ref is actually also get name

00:03:44,979 --> 00:03:51,979
and get a ref is kind of an abstraction

00:03:49,069 --> 00:03:54,739
of branches like a branch is a ref but a

00:03:51,979 --> 00:03:58,310
tag is also reference you know a github

00:03:54,739 --> 00:04:00,579
pull request is also ref so but all the

00:03:58,310 --> 00:04:04,400
stuff in red heads are the branches and

00:04:00,579 --> 00:04:06,979
this is just a file that contains some

00:04:04,400 --> 00:04:09,439
text which happens to be the object

00:04:06,979 --> 00:04:12,949
identifier which is just this it's a

00:04:09,439 --> 00:04:15,379
checksum so it's so it's a hex number in

00:04:12,949 --> 00:04:19,279
reality they're a lot longer but that

00:04:15,379 --> 00:04:21,320
doesn't work well for slides but if you

00:04:19,279 --> 00:04:24,860
look at that

00:04:21,320 --> 00:04:27,020
you can then find this object of this

00:04:24,860 --> 00:04:28,820
type commit in the obvious directory and

00:04:27,020 --> 00:04:30,770
you can follow that this thing is just a

00:04:28,820 --> 00:04:32,750
small file that has all the metadata

00:04:30,770 --> 00:04:35,540
about the commit but it also has a

00:04:32,750 --> 00:04:37,490
pointer or rather the value of the root

00:04:35,540 --> 00:04:38,840
directory which is the thread thing I

00:04:37,490 --> 00:04:42,620
kind of collar them so you can follow

00:04:38,840 --> 00:04:46,430
them as they move from the directory to

00:04:42,620 --> 00:04:47,720
the commit so the commit will have the

00:04:46,430 --> 00:04:49,090
pointer to the root directory and the

00:04:47,720 --> 00:04:52,280
root directory will have pointer to this

00:04:49,090 --> 00:04:54,830
stuff in it and then like cursive Lee

00:04:52,280 --> 00:04:59,780
you can find anything by starting at

00:04:54,830 --> 00:05:01,820
this ref file and that leaf nodes are

00:04:59,780 --> 00:05:03,500
the files and they're actually just

00:05:01,820 --> 00:05:06,740
regular files so you can go into the

00:05:03,500 --> 00:05:10,610
repository and there is the same as the

00:05:06,740 --> 00:05:13,340
actual app this is one place where get

00:05:10,610 --> 00:05:15,560
an OS tree is different in those tree

00:05:13,340 --> 00:05:17,240
there get their whole dispatch source

00:05:15,560 --> 00:05:19,160
and all this complicated way of storing

00:05:17,240 --> 00:05:23,870
stuff but for reasons we'll come to

00:05:19,160 --> 00:05:26,300
later various files and these names look

00:05:23,870 --> 00:05:28,100
really random but actually there are

00:05:26,300 --> 00:05:29,390
Scheck Psalms like for the for the files

00:05:28,100 --> 00:05:33,620
themselves it's basically just a

00:05:29,390 --> 00:05:34,940
checksum of the file itself and then

00:05:33,620 --> 00:05:37,670
same for these it's just a checksum of

00:05:34,940 --> 00:05:41,300
the metadata so the interesting thing is

00:05:37,670 --> 00:05:44,840
here that the checksum of the commit

00:05:41,300 --> 00:05:47,150
contains the name of the root directory

00:05:44,840 --> 00:05:49,730
which recursively contains everything so

00:05:47,150 --> 00:05:50,990
the checksum of this top-level thing is

00:05:49,730 --> 00:05:55,490
just basically a reference for the

00:05:50,990 --> 00:05:58,640
entire thing and if you were to commit

00:05:55,490 --> 00:06:00,080
the same thing again look if you have if

00:05:58,640 --> 00:06:01,460
you had a real if you had a copy of this

00:06:00,080 --> 00:06:03,710
you got them somewhere else and checked

00:06:01,460 --> 00:06:05,960
it in you will end up with exactly the

00:06:03,710 --> 00:06:09,260
same thing here because the check sums

00:06:05,960 --> 00:06:11,360
would do the same well the commit has

00:06:09,260 --> 00:06:13,010
some like the timestamp is so something

00:06:11,360 --> 00:06:20,840
that all the other things would be

00:06:13,010 --> 00:06:22,640
exactly the same so if you modify this

00:06:20,840 --> 00:06:25,670
here like we change the thing and we

00:06:22,640 --> 00:06:27,380
commit again or as it would be more

00:06:25,670 --> 00:06:30,140
common and flatback you rebuild it and

00:06:27,380 --> 00:06:34,620
commit a new version but most files are

00:06:30,140 --> 00:06:38,849
the same even end up with a new a new

00:06:34,620 --> 00:06:42,879
commit object and a bunch of new files

00:06:38,849 --> 00:06:46,060
but since the checksums are the same

00:06:42,879 --> 00:06:48,219
most of these files are still the same

00:06:46,060 --> 00:06:49,780
in the in the object directory some

00:06:48,219 --> 00:06:53,020
thing that's changed is we got a new

00:06:49,780 --> 00:06:54,849
commit object the points to parent so

00:06:53,020 --> 00:06:56,379
there's a history here plus it points to

00:06:54,849 --> 00:07:00,490
the new route and the new route points

00:06:56,379 --> 00:07:02,099
to the new file plus the older tree like

00:07:00,490 --> 00:07:06,610
the bin directory here

00:07:02,099 --> 00:07:08,560
so when you commit a new version of

00:07:06,610 --> 00:07:12,520
something we're not a lot of things

00:07:08,560 --> 00:07:15,580
changed then you only add the changed

00:07:12,520 --> 00:07:19,539
files basically so it's a very efficient

00:07:15,580 --> 00:07:21,610
way to store things that changed or even

00:07:19,539 --> 00:07:25,000
things that are unrelated but happened

00:07:21,610 --> 00:07:27,969
to have the same files in it like it's

00:07:25,000 --> 00:07:30,490
likely that two apps happen to have the

00:07:27,969 --> 00:07:31,960
same peyten version or at least similar

00:07:30,490 --> 00:07:33,669
versions so a bunch of the peyten

00:07:31,960 --> 00:07:37,840
libraries are the same and they will use

00:07:33,669 --> 00:07:40,300
automatically be shared in this next

00:07:37,840 --> 00:07:42,069
thing is the reverse operation of the

00:07:40,300 --> 00:07:44,080
check out you have this you got it from

00:07:42,069 --> 00:07:46,599
somewhere doesn't really matter

00:07:44,080 --> 00:07:48,789
you run the check out command we

00:07:46,599 --> 00:07:51,610
generates we get back whatever we

00:07:48,789 --> 00:07:53,169
checked in basically looks the same but

00:07:51,610 --> 00:07:55,270
if you look in detail it's actually

00:07:53,169 --> 00:07:58,300
slightly different all these files

00:07:55,270 --> 00:08:00,610
happen to have a link count of two that

00:07:58,300 --> 00:08:03,279
means they're hard links somewhere that

00:08:00,610 --> 00:08:06,250
points to them and in fact they're hard

00:08:03,279 --> 00:08:08,919
links back into the office tour this has

00:08:06,250 --> 00:08:11,620
two advantages it's very cheap to do a

00:08:08,919 --> 00:08:14,319
check out you never write a lot of files

00:08:11,620 --> 00:08:16,150
we use construct new I notes and new

00:08:14,319 --> 00:08:18,729
directors we don't write all the data

00:08:16,150 --> 00:08:22,779
there but also it's very cheap in terms

00:08:18,729 --> 00:08:24,819
of disk like we can do 50 checkouts of

00:08:22,779 --> 00:08:27,550
the same thing and it wouldn't use more

00:08:24,819 --> 00:08:30,250
space than the original repository and

00:08:27,550 --> 00:08:32,919
if you check out two different thing and

00:08:30,250 --> 00:08:35,919
they happen to share some files those

00:08:32,919 --> 00:08:39,640
files we automatically shared and the

00:08:35,919 --> 00:08:42,819
sharing is being on disk but also in the

00:08:39,640 --> 00:08:46,149
Linux kernel because page cache sharing

00:08:42,819 --> 00:08:46,940
is done by inode like if you have

00:08:46,149 --> 00:08:49,670
happened

00:08:46,940 --> 00:08:51,440
have the same gypsy in like all your

00:08:49,670 --> 00:08:54,770
apps that's running it's only gonna be

00:08:51,440 --> 00:08:57,110
cached once in the kernel so automatic

00:08:54,770 --> 00:08:58,280
the deduplication on disk and ended in

00:08:57,110 --> 00:09:02,420
the cache

00:08:58,280 --> 00:09:06,530
and based on this we create a flat-pack

00:09:02,420 --> 00:09:08,750
installation this is the typical system

00:09:06,530 --> 00:09:11,360
installation there's also one for each

00:09:08,750 --> 00:09:14,300
user or you can do like per user

00:09:11,360 --> 00:09:15,830
installs but this is the default one it

00:09:14,300 --> 00:09:19,760
has a repository and I was tree

00:09:15,830 --> 00:09:23,870
repository and in that we have apps and

00:09:19,760 --> 00:09:25,880
runtimes stored as branches this is very

00:09:23,870 --> 00:09:30,680
different from how get work and get you

00:09:25,880 --> 00:09:32,720
typically half a check out paired with a

00:09:30,680 --> 00:09:35,420
repository so you have the dot git and

00:09:32,720 --> 00:09:37,490
then they have the check out and you

00:09:35,420 --> 00:09:39,650
modify the check out but what it

00:09:37,490 --> 00:09:41,000
currently points to whereas a no three

00:09:39,650 --> 00:09:42,380
you typically have one repository with

00:09:41,000 --> 00:09:45,740
many branches and you check out the

00:09:42,380 --> 00:09:47,390
branches on the side and there so we

00:09:45,740 --> 00:09:51,050
have the repository and all the stuff

00:09:47,390 --> 00:09:53,330
that are in there is also checked out an

00:09:51,050 --> 00:09:56,180
operation we call deploy in a flat-pack

00:09:53,330 --> 00:09:57,890
and they're actually deployed you can

00:09:56,180 --> 00:10:01,190
see here if you look at this that are

00:09:57,890 --> 00:10:04,280
deployed in a directory by the name of

00:10:01,190 --> 00:10:07,850
the ref but also by the name of the

00:10:04,280 --> 00:10:09,250
commit in there so every time you shake

00:10:07,850 --> 00:10:11,870
out a new one

00:10:09,250 --> 00:10:13,940
this act of similar still points to the

00:10:11,870 --> 00:10:16,340
old meaning that this is the the new one

00:10:13,940 --> 00:10:17,630
and until you do a full check out of

00:10:16,340 --> 00:10:19,250
everything and ensure that it's

00:10:17,630 --> 00:10:21,470
synchronized on disk and everything is

00:10:19,250 --> 00:10:23,930
fine then you atomically switch the

00:10:21,470 --> 00:10:26,290
active thing and at that point the new

00:10:23,930 --> 00:10:28,220
version is the one that's running and

00:10:26,290 --> 00:10:29,870
you know by then you can eventually

00:10:28,220 --> 00:10:32,980
remove the old one and what what have

00:10:29,870 --> 00:10:35,089
you and the files inside are just like

00:10:32,980 --> 00:10:37,160
it's a bunch of metadata is the

00:10:35,089 --> 00:10:40,339
directory called files that just just

00:10:37,160 --> 00:10:42,890
has the files like it's just it's a

00:10:40,339 --> 00:10:46,940
prefix basically that gets mounted into

00:10:42,890 --> 00:10:51,020
your app but when you're distributing

00:10:46,940 --> 00:10:51,410
this this local format is not what you

00:10:51,020 --> 00:10:53,410
want

00:10:51,410 --> 00:10:55,820
so there's a different form of

00:10:53,410 --> 00:10:57,740
repository called archive repositories

00:10:55,820 --> 00:11:00,680
that are slightly different it looks

00:10:57,740 --> 00:11:04,070
mostly the same the red things are

00:11:00,680 --> 00:11:07,070
what's different files are compressed

00:11:04,070 --> 00:11:12,080
because that's just smarter but not only

00:11:07,070 --> 00:11:14,270
that the files contain the metadata that

00:11:12,080 --> 00:11:17,360
we otherwise store on the file so

00:11:14,270 --> 00:11:18,980
permission ownership type stamps these

00:11:17,360 --> 00:11:21,800
sorts of thing you cannot get from a web

00:11:18,980 --> 00:11:29,089
server so we store them inside the file

00:11:21,800 --> 00:11:32,690
instead oh there's a commitment file

00:11:29,089 --> 00:11:35,390
that is contain extra information about

00:11:32,690 --> 00:11:37,970
the commit outside of it mostly used for

00:11:35,390 --> 00:11:41,240
restoring the GPG signature of the

00:11:37,970 --> 00:11:43,670
commit GPG is used all over the place to

00:11:41,240 --> 00:11:47,420
verify that things are not tampered with

00:11:43,670 --> 00:11:50,089
in any way on the server we still have

00:11:47,420 --> 00:11:52,220
this refs directory but directories are

00:11:50,089 --> 00:11:54,350
not great for web servers like there's

00:11:52,220 --> 00:11:56,270
no standard way to enumerate them or

00:11:54,350 --> 00:11:59,180
anything so there's this additional

00:11:56,270 --> 00:12:00,830
thing called a summary file that we

00:11:59,180 --> 00:12:04,250
regenerate every time we modify the

00:12:00,830 --> 00:12:08,300
repository basically by rolling this ref

00:12:04,250 --> 00:12:10,070
directly and making it one big file so

00:12:08,300 --> 00:12:13,910
summary file has a list of all the refs

00:12:10,070 --> 00:12:16,910
and their current values and it's very

00:12:13,910 --> 00:12:18,770
useful but as a replacement for we're

00:12:16,910 --> 00:12:23,000
trying to enumerate directory over HTTP

00:12:18,770 --> 00:12:26,120
but it's also an a single file that you

00:12:23,000 --> 00:12:29,450
can get atomically and it represents the

00:12:26,120 --> 00:12:33,610
entire state of the of the repository at

00:12:29,450 --> 00:12:37,130
that point in time so it's like a any

00:12:33,610 --> 00:12:38,870
any changes that happen after this in

00:12:37,130 --> 00:12:40,760
the post or you can ignore like you have

00:12:38,870 --> 00:12:45,200
a snapshot of this point where you can

00:12:40,760 --> 00:12:48,020
get all the refs at the same time and as

00:12:45,200 --> 00:12:49,670
long as you never delete old object

00:12:48,020 --> 00:12:52,670
files in your repository you can forever

00:12:49,670 --> 00:12:55,190
know exactly all the things that were at

00:12:52,670 --> 00:12:57,529
this point although the file tends to be

00:12:55,190 --> 00:13:01,240
large we have like a local cache of it

00:12:57,529 --> 00:13:03,529
kind of like the app store John metadata

00:13:01,240 --> 00:13:05,089
like whenever we do an operation we

00:13:03,529 --> 00:13:07,910
start by getting the latest summary and

00:13:05,089 --> 00:13:11,560
then we work from that locally it also

00:13:07,910 --> 00:13:14,180
has space for random metadata that

00:13:11,560 --> 00:13:16,550
flatback uses to encode so

00:13:14,180 --> 00:13:21,520
stuff from all the apps such as

00:13:16,550 --> 00:13:24,380
permissions dependencies so that we can

00:13:21,520 --> 00:13:26,300
for example ask whether you want to

00:13:24,380 --> 00:13:29,029
accept these permissions before you

00:13:26,300 --> 00:13:31,310
install the app and we can download the

00:13:29,029 --> 00:13:33,440
right runtime it depends on before we

00:13:31,310 --> 00:13:35,240
install the app but these are used

00:13:33,440 --> 00:13:38,959
extracted from the apps themselves and

00:13:35,240 --> 00:13:43,190
stored in the summary file so the basic

00:13:38,959 --> 00:13:45,560
way you then install an app is you look

00:13:43,190 --> 00:13:48,800
at the summary file find the object the

00:13:45,560 --> 00:13:50,209
commit recursively spiders do all the

00:13:48,800 --> 00:13:53,180
obvious files that you don't already

00:13:50,209 --> 00:13:54,709
have locally available most of the time

00:13:53,180 --> 00:13:56,600
you would eventually reach the director

00:13:54,709 --> 00:13:59,510
that was already existing in the

00:13:56,600 --> 00:14:02,540
previous version and then we used prune

00:13:59,510 --> 00:14:03,800
that entire directory and skip it and

00:14:02,540 --> 00:14:06,320
then we download all this into a

00:14:03,800 --> 00:14:09,399
temporary directory and when everything

00:14:06,320 --> 00:14:12,440
is verified we have to verify that this

00:14:09,399 --> 00:14:15,589
each individual object actually check

00:14:12,440 --> 00:14:19,370
sums to the name it has and then at the

00:14:15,589 --> 00:14:20,810
end we can just take the GPU signature

00:14:19,370 --> 00:14:23,000
of the top-level thing which is to

00:14:20,810 --> 00:14:27,529
commit object and if that's valid then

00:14:23,000 --> 00:14:29,570
the entire thing is valid there's also a

00:14:27,529 --> 00:14:32,750
feature called static Delta's or we can

00:14:29,570 --> 00:14:35,600
have pre generated binary diffs between

00:14:32,750 --> 00:14:39,589
versions of an app so it's a useful

00:14:35,600 --> 00:14:43,070
optimization the the generic of triple

00:14:39,589 --> 00:14:45,830
operation does skip downloading things

00:14:43,070 --> 00:14:47,930
that are the same but if if like if just

00:14:45,830 --> 00:14:50,959
a single byte changed of some file it's

00:14:47,930 --> 00:14:56,770
bounded the entire new file so this is a

00:14:50,959 --> 00:14:59,029
way to do a more more optimized like

00:14:56,770 --> 00:15:02,000
yeah it's basically an exodus of the

00:14:59,029 --> 00:15:03,470
files and we are we can only use it if

00:15:02,000 --> 00:15:04,910
we know we have all the data in the

00:15:03,470 --> 00:15:09,170
previous version because then we can use

00:15:04,910 --> 00:15:11,690
the old data to apply the dev there's

00:15:09,170 --> 00:15:13,520
also a way to do a diff from nothing

00:15:11,690 --> 00:15:17,540
which is useful because then we create

00:15:13,520 --> 00:15:20,029
like a sing a large file which is useful

00:15:17,540 --> 00:15:21,640
for minimizing the number of run chips

00:15:20,029 --> 00:15:23,990
if you download large things like

00:15:21,640 --> 00:15:26,300
something like a runtime has a lot of

00:15:23,990 --> 00:15:27,320
small files and it's more efficient to

00:15:26,300 --> 00:15:29,390
do it once

00:15:27,320 --> 00:15:31,640
but these are all optional and it's up

00:15:29,390 --> 00:15:35,440
to you as a system like an admin over of

00:15:31,640 --> 00:15:38,420
a repo to decide how many how many

00:15:35,440 --> 00:15:39,680
deltas you want to keep around never get

00:15:38,420 --> 00:15:42,920
there's a cost of generating them

00:15:39,680 --> 00:15:47,540
there's cost of storing them versus you

00:15:42,920 --> 00:15:48,710
know the gains you have from them we

00:15:47,540 --> 00:15:51,890
also have something called app stream

00:15:48,710 --> 00:15:53,270
branches I don't know if most people

00:15:51,890 --> 00:15:57,520
know what app stream is but it's like a

00:15:53,270 --> 00:16:01,670
metadata format for describe the apps

00:15:57,520 --> 00:16:04,280
like descriptions versions screenshots

00:16:01,670 --> 00:16:06,890
all that kind of stuff and each app has

00:16:04,280 --> 00:16:09,140
one and then while we're updating the

00:16:06,890 --> 00:16:11,950
repository we extract all of them from

00:16:09,140 --> 00:16:14,000
all the apps and put them into one super

00:16:11,950 --> 00:16:16,100
like XML file

00:16:14,000 --> 00:16:18,140
so each individual one is called an app

00:16:16,100 --> 00:16:21,290
data and then we combine them into

00:16:18,140 --> 00:16:24,650
what's called an app stream which is XML

00:16:21,290 --> 00:16:27,320
for all the things and also the icons

00:16:24,650 --> 00:16:29,690
about not and this is what app stores

00:16:27,320 --> 00:16:32,870
use for showing information like that

00:16:29,690 --> 00:16:35,300
web app uses this Katy discovered no

00:16:32,870 --> 00:16:37,940
software uses this and it's actually

00:16:35,300 --> 00:16:41,510
already used by most things because it's

00:16:37,940 --> 00:16:44,210
used for packages like Deb and rpms so

00:16:41,510 --> 00:16:45,740
it's something new but it's important to

00:16:44,210 --> 00:16:50,600
be aware that we have to regenerate this

00:16:45,740 --> 00:16:53,750
branch whenever something changes so in

00:16:50,600 --> 00:16:58,490
practice then how would you do maintain

00:16:53,750 --> 00:17:00,380
a such a system first of all you have to

00:16:58,490 --> 00:17:02,750
have some kind of master repository so

00:17:00,380 --> 00:17:05,410
there's one machine somewhere that has

00:17:02,750 --> 00:17:10,940
the master copy of the repository and

00:17:05,410 --> 00:17:13,070
then you ship to users from that it's

00:17:10,940 --> 00:17:15,170
not a great idea to ship that directly

00:17:13,070 --> 00:17:18,170
to users because that machine should not

00:17:15,170 --> 00:17:20,920
be loaded by a random user load so the

00:17:18,170 --> 00:17:23,300
either you sync the contents to your

00:17:20,920 --> 00:17:24,860
system where you deploy things maybe

00:17:23,300 --> 00:17:28,820
it's a different machine maybe some

00:17:24,860 --> 00:17:31,430
Alice on s3 or maybe actually most

00:17:28,820 --> 00:17:33,920
common is just put up caching web

00:17:31,430 --> 00:17:37,670
servers in front of it like a proxy

00:17:33,920 --> 00:17:39,350
nginx proxy or something so that that

00:17:37,670 --> 00:17:41,230
makes it very easy to use distribute it

00:17:39,350 --> 00:17:43,429
to people

00:17:41,230 --> 00:17:45,559
some things you have to be careful about

00:17:43,429 --> 00:17:48,920
here is if you do some kind of

00:17:45,559 --> 00:17:52,490
synchronization this the summary file

00:17:48,920 --> 00:17:54,230
refers to all the objects in repo so you

00:17:52,490 --> 00:17:56,390
have to make sure you copy all the

00:17:54,230 --> 00:17:58,220
objects you know what move all the new

00:17:56,390 --> 00:18:00,950
object in place before you replace the

00:17:58,220 --> 00:18:03,020
summary file otherwise some client might

00:18:00,950 --> 00:18:06,530
be pulling something expecting all the

00:18:03,020 --> 00:18:07,960
objects to be there but they're not you

00:18:06,530 --> 00:18:09,850
also have to be careful about

00:18:07,960 --> 00:18:12,320
synchronizing the signatures

00:18:09,850 --> 00:18:15,200
particularly the summary signature it's

00:18:12,320 --> 00:18:18,440
a separate file so if they're if they're

00:18:15,200 --> 00:18:21,890
not in sync you will get a GG warning

00:18:18,440 --> 00:18:24,140
and generally like if you copy those two

00:18:21,890 --> 00:18:27,890
files at the same time it's really a

00:18:24,140 --> 00:18:30,980
very very marginal risk for races but if

00:18:27,890 --> 00:18:33,200
by accident you happen to cache for a

00:18:30,980 --> 00:18:37,100
long time different version of them then

00:18:33,200 --> 00:18:39,260
you run into really bad issues also you

00:18:37,100 --> 00:18:41,660
shouldn't be building your staff on this

00:18:39,260 --> 00:18:45,530
master machine I mean it's just bad form

00:18:41,660 --> 00:18:47,270
but also it's you probably want to build

00:18:45,530 --> 00:18:48,429
on multiple architecture so it's not

00:18:47,270 --> 00:18:51,020
possible

00:18:48,429 --> 00:18:55,610
instead you build on some kind of build

00:18:51,020 --> 00:18:58,130
machines you have setup and then you use

00:18:55,610 --> 00:19:01,490
this other command called build commit

00:18:58,130 --> 00:19:06,919
from which is is a way to import builds

00:19:01,490 --> 00:19:08,480
into a repository so it's not a it's not

00:19:06,919 --> 00:19:10,880
a commit operation because you already

00:19:08,480 --> 00:19:13,130
have a commit but it's also not a pool

00:19:10,880 --> 00:19:15,740
where we just move the commit into the

00:19:13,130 --> 00:19:19,220
repository instead it recreates a new

00:19:15,740 --> 00:19:22,160
commit that like takes information from

00:19:19,220 --> 00:19:25,280
both sites so we have the old parent

00:19:22,160 --> 00:19:27,230
from the from the master repository but

00:19:25,280 --> 00:19:31,549
the data from the new commit so we have

00:19:27,230 --> 00:19:35,870
things like the like the actual file

00:19:31,549 --> 00:19:38,660
come from the new commit but the GPG

00:19:35,870 --> 00:19:40,400
signature may be the timestamp may be

00:19:38,660 --> 00:19:43,790
the comment you can add that at the

00:19:40,400 --> 00:19:45,530
point where you import it and you

00:19:43,790 --> 00:19:48,770
generally do that then multiple times

00:19:45,530 --> 00:19:53,000
one like one for each build or maybe you

00:19:48,770 --> 00:19:54,020
want to bunch imports in general to

00:19:53,000 --> 00:19:56,360
avoid returning the

00:19:54,020 --> 00:19:58,040
summary falls a lot and then when you're

00:19:56,360 --> 00:20:02,150
done you run this bill update report

00:19:58,040 --> 00:20:07,670
thing which will regenerate app stream

00:20:02,150 --> 00:20:10,730
data we generate the summary and it can

00:20:07,670 --> 00:20:15,440
also generates deltas or remove all

00:20:10,730 --> 00:20:17,870
deltas things like that and and in these

00:20:15,440 --> 00:20:20,210
commands anything actually that changes

00:20:17,870 --> 00:20:22,870
the summary file or creates a new commit

00:20:20,210 --> 00:20:26,000
object you have to specify GPG signature

00:20:22,870 --> 00:20:27,850
that that's your that you want to use

00:20:26,000 --> 00:20:29,900
for that monster otherwise you will

00:20:27,850 --> 00:20:32,450
accidentally end up with an unsigned

00:20:29,900 --> 00:20:35,180
thing and your users will get complaints

00:20:32,450 --> 00:20:38,900
from flat-pack about GPG not matching it

00:20:35,180 --> 00:20:40,430
or not and in general there are some

00:20:38,900 --> 00:20:42,560
rules about your biggies you shouldn't

00:20:40,430 --> 00:20:44,930
use your own like a lot of people have

00:20:42,560 --> 00:20:46,580
personal GPT keys don't use those

00:20:44,930 --> 00:20:48,410
generate new ones for each repository

00:20:46,580 --> 00:20:50,780
that way you can like hand it over to

00:20:48,410 --> 00:20:54,260
someone else or have different level of

00:20:50,780 --> 00:20:57,680
security like ideally the private key

00:20:54,260 --> 00:21:00,110
should never ever get off the master

00:20:57,680 --> 00:21:02,330
report and and in flat-pack we even have

00:21:00,110 --> 00:21:05,200
like a hardware dongle so the private

00:21:02,330 --> 00:21:07,880
key never leaves this USB stick thing

00:21:05,200 --> 00:21:13,010
it's pretty cheap these days to get one

00:21:07,880 --> 00:21:15,940
of those and we do have a way to migrate

00:21:13,010 --> 00:21:19,940
to a new GP key it's not perfect but

00:21:15,940 --> 00:21:23,510
basically we can load the new key key

00:21:19,940 --> 00:21:25,490
and then as clients update they get the

00:21:23,510 --> 00:21:29,000
new one and eventually you just move

00:21:25,490 --> 00:21:30,560
over and assume what you left it there

00:21:29,000 --> 00:21:37,520
long enough for everyone to have the new

00:21:30,560 --> 00:21:39,230
one to really do well well what you

00:21:37,520 --> 00:21:39,770
really want to use the CDN or something

00:21:39,230 --> 00:21:43,370
like that

00:21:39,770 --> 00:21:46,700
and the way the old stripper works is

00:21:43,370 --> 00:21:50,420
very it matches very well our CDM word

00:21:46,700 --> 00:21:52,460
because all all the files are static you

00:21:50,420 --> 00:21:53,990
can use cash them forever the only thing

00:21:52,460 --> 00:21:58,370
you have to be careful with this is

00:21:53,990 --> 00:22:01,370
summary file so the setup on flat table

00:21:58,370 --> 00:22:03,820
is that we have some nginx proxies that

00:22:01,370 --> 00:22:06,980
the host that proxies the main

00:22:03,820 --> 00:22:08,300
repository and then everything is cached

00:22:06,980 --> 00:22:12,860
in fastly from the

00:22:08,300 --> 00:22:16,340
and we whenever we update the summary

00:22:12,860 --> 00:22:18,500
file we have this pass this REST API

00:22:16,340 --> 00:22:21,140
where we can trigger purging of certain

00:22:18,500 --> 00:22:22,610
things from the cache so we catch the

00:22:21,140 --> 00:22:27,140
summary files but then we purge it

00:22:22,610 --> 00:22:30,170
automatically whenever it needs to that

00:22:27,140 --> 00:22:31,670
was about how you manually do things but

00:22:30,170 --> 00:22:34,070
probably you want to use this other

00:22:31,670 --> 00:22:39,350
thing I wrote called flat manager which

00:22:34,070 --> 00:22:41,540
does all this for you so it's written in

00:22:39,350 --> 00:22:43,340
rust is basically a shared or a

00:22:41,540 --> 00:22:46,910
statically linked thing you can use drop

00:22:43,340 --> 00:22:48,620
in place and run does use Postgres so

00:22:46,910 --> 00:22:51,080
you have to have a postscript some kind

00:22:48,620 --> 00:22:54,170
of post install and like a small JSON

00:22:51,080 --> 00:22:58,820
config file that define things so it

00:22:54,170 --> 00:23:00,260
does xserve the repository you can't

00:22:58,820 --> 00:23:01,970
install directly from there but what you

00:23:00,260 --> 00:23:03,650
typically do is stand up some kind of

00:23:01,970 --> 00:23:08,090
nginx in front of it for load balancing

00:23:03,650 --> 00:23:10,490
and ideally also CDN or something but it

00:23:08,090 --> 00:23:15,890
also has the REST API that lets you add

00:23:10,490 --> 00:23:17,300
stuff to to the repository so there's a

00:23:15,890 --> 00:23:19,970
token based system where you can

00:23:17,300 --> 00:23:23,210
generate tokens that have permissions to

00:23:19,970 --> 00:23:25,520
upload you know that can be subset you

00:23:23,210 --> 00:23:28,370
can only it you can hand out permissions

00:23:25,520 --> 00:23:32,930
to only upload in your namespace or only

00:23:28,370 --> 00:23:36,860
modify a certain build or whatnot and if

00:23:32,930 --> 00:23:40,190
you use these you can create like test

00:23:36,860 --> 00:23:41,780
builds so it maintains the set of test

00:23:40,190 --> 00:23:44,200
bills and you can upload to the test

00:23:41,780 --> 00:23:46,430
bills I mean everything is uploaded you

00:23:44,200 --> 00:23:49,280
trigger basically a commit of the test

00:23:46,430 --> 00:23:51,230
build and then it will run there are

00:23:49,280 --> 00:23:52,910
updates and create a summary file so you

00:23:51,230 --> 00:23:56,390
basically end up with this mini

00:23:52,910 --> 00:23:58,520
repository with just your app that you

00:23:56,390 --> 00:24:00,980
can like try to install from and verify

00:23:58,520 --> 00:24:02,990
that the app build some whatnot and if

00:24:00,980 --> 00:24:05,720
everything looks good that you can do a

00:24:02,990 --> 00:24:09,320
publish of that which imports it into

00:24:05,720 --> 00:24:12,350
the actual master repository in that

00:24:09,320 --> 00:24:15,070
triggers all this like stuff we have to

00:24:12,350 --> 00:24:19,010
do like updating the summary file

00:24:15,070 --> 00:24:20,810
generating app stream deltas and this is

00:24:19,010 --> 00:24:21,620
actually a bit more flexible like you

00:24:20,810 --> 00:24:23,630
can

00:24:21,620 --> 00:24:27,160
have work machines to generate deltas

00:24:23,630 --> 00:24:29,240
and there's more more expressive way to

00:24:27,160 --> 00:24:32,420
declare which deltas you want to

00:24:29,240 --> 00:24:36,620
generate and we can hook into various

00:24:32,420 --> 00:24:38,480
places like this call out whenever the

00:24:36,620 --> 00:24:42,309
summary changes that you can easily add

00:24:38,480 --> 00:24:45,740
some curl code curl call or something to

00:24:42,309 --> 00:24:48,740
trigger a CDN invalidation or something

00:24:45,740 --> 00:24:52,490
it does generate flatback ref files for

00:24:48,740 --> 00:24:55,100
all new builds in mirror screenshots for

00:24:52,490 --> 00:24:57,800
from the app stream data so you can have

00:24:55,100 --> 00:25:01,940
your own copy of that and a bunch of

00:24:57,800 --> 00:25:03,559
other stuff and there's a REST API it's

00:25:01,940 --> 00:25:05,929
not complicated you can implement it

00:25:03,559 --> 00:25:08,620
yourself but this also comes with a

00:25:05,929 --> 00:25:11,450
patent client that you could use to just

00:25:08,620 --> 00:25:13,970
if you just want to upload your builds

00:25:11,450 --> 00:25:16,780
from your build machines it's actually

00:25:13,970 --> 00:25:20,570
pretty cool the way there so you create

00:25:16,780 --> 00:25:24,380
like a build which creates in your URL

00:25:20,570 --> 00:25:26,390
and then you can push to this so you

00:25:24,380 --> 00:25:29,840
built builder a poster on your machine

00:25:26,390 --> 00:25:36,679
and you push it but the way we use it on

00:25:29,840 --> 00:25:39,290
flat hub is that the master system

00:25:36,679 --> 00:25:41,780
creates the build and then all the build

00:25:39,290 --> 00:25:43,160
machines thus the pushing so we never

00:25:41,780 --> 00:25:44,600
have to copy anything to the massive

00:25:43,160 --> 00:25:47,780
machine copies directly into the

00:25:44,600 --> 00:25:49,429
repository but each build machine gets a

00:25:47,780 --> 00:25:52,010
token that only allows it to upload to

00:25:49,429 --> 00:25:53,330
this particular build so like the build

00:25:52,010 --> 00:25:56,960
machines are separated from everything

00:25:53,330 --> 00:25:58,670
else and then at the end every build

00:25:56,960 --> 00:26:01,520
machine reported that there that it's

00:25:58,670 --> 00:26:03,710
correct and then we can commit and then

00:26:01,520 --> 00:26:07,040
we create like a pull request comment

00:26:03,710 --> 00:26:08,870
here so link to the to the repulsor you

00:26:07,040 --> 00:26:10,820
can fire this thing out and when it's

00:26:08,870 --> 00:26:18,020
done you just click on some thing in the

00:26:10,820 --> 00:26:20,480
UI and it publishes it I think that's

00:26:18,020 --> 00:26:25,070
yeah I'm gonna talk a bit about this too

00:26:20,480 --> 00:26:28,790
there's this more recent work that's a

00:26:25,070 --> 00:26:30,830
bit a lot of talk about the buying staff

00:26:28,790 --> 00:26:32,840
and monitor monetizing staff and I've

00:26:30,830 --> 00:26:36,010
been working on the very very

00:26:32,840 --> 00:26:39,640
fundamental part of buying stuff

00:26:36,010 --> 00:26:43,120
which is allowing you to not download

00:26:39,640 --> 00:26:47,530
stuff basically so there is this setup

00:26:43,120 --> 00:26:51,270
where the repository requires an HTTP

00:26:47,530 --> 00:26:54,040
bit bearer token for certain reps and

00:26:51,270 --> 00:26:57,419
the way the repository works it's

00:26:54,040 --> 00:27:01,360
complicated to know what sort of stuff

00:26:57,419 --> 00:27:03,429
ends up in what app because due to the

00:27:01,360 --> 00:27:06,400
sharing like any random object could be

00:27:03,429 --> 00:27:08,169
in any random app but there are some

00:27:06,400 --> 00:27:10,270
objects that you always have to download

00:27:08,169 --> 00:27:12,730
and you never never use for anything

00:27:10,270 --> 00:27:16,150
else which is the commit object itself

00:27:12,730 --> 00:27:19,870
and the Delta super block which are two

00:27:16,150 --> 00:27:21,460
small files with you know specific path

00:27:19,870 --> 00:27:26,320
names that we can easily filter those

00:27:21,460 --> 00:27:29,559
and only require a token for them so

00:27:26,320 --> 00:27:32,620
what would happen happen is on your

00:27:29,559 --> 00:27:34,140
machine your local client of something

00:27:32,620 --> 00:27:39,299
called Doug at an Authenticator

00:27:34,140 --> 00:27:41,470
configured for the remote and whenever

00:27:39,299 --> 00:27:44,010
flatback knows that you need to buy this

00:27:41,470 --> 00:27:46,419
thing it will ask the configured

00:27:44,010 --> 00:27:49,090
Authenticator for that remote for a

00:27:46,419 --> 00:27:51,610
token and then it would use that token

00:27:49,090 --> 00:27:55,750
when it does all the HTTP requests for

00:27:51,610 --> 00:27:57,730
the refs so this is very generic and the

00:27:55,750 --> 00:28:02,429
Authenticator could be whatever and it

00:27:57,730 --> 00:28:05,320
could be doing it could be showing you a

00:28:02,429 --> 00:28:07,840
like a user interface using gtk or

00:28:05,320 --> 00:28:11,980
whatever it could be doing web calls it

00:28:07,840 --> 00:28:15,730
could be using pre-existing things like

00:28:11,980 --> 00:28:17,620
the rel entitlement system has like a

00:28:15,730 --> 00:28:19,059
local key that you can use to sign

00:28:17,620 --> 00:28:21,280
things or whatever I don't know exactly

00:28:19,059 --> 00:28:24,400
how it works but we can hook in to

00:28:21,280 --> 00:28:26,860
whatever system you already have or we

00:28:24,400 --> 00:28:33,610
can create new ones since it's a very

00:28:26,860 --> 00:28:34,690
generic system and but yeah typically

00:28:33,610 --> 00:28:36,940
it's paired with some sort of

00:28:34,690 --> 00:28:41,500
pre-existing system that records

00:28:36,940 --> 00:28:43,059
purchases the Barl system or some kind

00:28:41,500 --> 00:28:46,450
of web server that handles like

00:28:43,059 --> 00:28:49,270
purchases at that hop or something and

00:28:46,450 --> 00:28:50,250
and the way we know that something

00:28:49,270 --> 00:28:52,679
requires

00:28:50,250 --> 00:28:55,330
purchases is that we have added this

00:28:52,679 --> 00:28:57,340
metadata called the token type and if

00:28:55,330 --> 00:28:59,230
the token type is unset or if it's 0

00:28:57,340 --> 00:29:01,690
then we don't have to head to anything

00:28:59,230 --> 00:29:04,539
special we can use do it as before so we

00:29:01,690 --> 00:29:07,630
can mix free download and purchase stuff

00:29:04,539 --> 00:29:11,710
in the same repository but if it's sent

00:29:07,630 --> 00:29:14,140
we pass it to the Authenticator to do

00:29:11,710 --> 00:29:16,720
whatever it wants with it's it's

00:29:14,140 --> 00:29:20,860
possible then that we set the token time

00:29:16,720 --> 00:29:22,600
for something and then ask the aisle to

00:29:20,860 --> 00:29:23,980
aisle 10 to cater and it decided you

00:29:22,600 --> 00:29:26,950
don't actually need a token because

00:29:23,980 --> 00:29:29,409
maybe we can do a client-side donation

00:29:26,950 --> 00:29:31,419
thing so it's not actually protected on

00:29:29,409 --> 00:29:33,190
the server but we can still round-trip

00:29:31,419 --> 00:29:35,380
on our local things we can ask for

00:29:33,190 --> 00:29:37,059
donations or something but it's also

00:29:35,380 --> 00:29:40,120
possible it does a web call of doing

00:29:37,059 --> 00:29:43,870
something and the Authenticator can also

00:29:40,120 --> 00:29:46,149
use web callbacks that so we have a

00:29:43,870 --> 00:29:49,440
callback system in the end the flat-pack

00:29:46,149 --> 00:29:53,950
library so apps like gnome software or

00:29:49,440 --> 00:29:56,799
Kitty discover can allow that the

00:29:53,950 --> 00:29:59,350
Authenticator to show web flows which

00:29:56,799 --> 00:30:01,840
are somewhat integrated with the UI I

00:29:59,350 --> 00:30:06,220
mean their web stuff so this is also not

00:30:01,840 --> 00:30:10,360
native but still like controlled by the

00:30:06,220 --> 00:30:12,309
apps a little bit the window and whatnot

00:30:10,360 --> 00:30:16,500
that we store let me show the web stuff

00:30:12,309 --> 00:30:16,500
is is controlled by the client at least

00:30:16,559 --> 00:30:22,690
this is all work in progress but I hope

00:30:19,690 --> 00:30:24,820
to land it in the next version just like

00:30:22,690 --> 00:30:26,770
end of the year something and then we

00:30:24,820 --> 00:30:32,049
can use that to eventually do something

00:30:26,770 --> 00:30:32,280
from flat hub yeah I guess no questions

00:30:32,049 --> 00:30:35,980
that

00:30:32,280 --> 00:30:35,980

YouTube URL: https://www.youtube.com/watch?v=rtNqqTJAMKk


