Title: AppImage packaging using appimage-builder - Alexis Lopez Zubieta
Publication date: 2020-11-15
Playlist: Linux App Summit 2020 Talks
Description: 
	This is a short non-technical introduction to flatpak. It will talk about what Flatpak is and what problems it tries to solve. The focus is on application developers that want to distribute their application (rather than end users).
Captions: 
	00:00:00,880 --> 00:00:05,520
okay let's start

00:00:03,360 --> 00:00:06,799
uh hello everyone my name is alexis

00:00:05,520 --> 00:00:09,760
lopez vieta

00:00:06,799 --> 00:00:10,320
i work as developer of the happy match

00:00:09,760 --> 00:00:14,160
project

00:00:10,320 --> 00:00:17,600
i've been a contributor for about like

00:00:14,160 --> 00:00:20,160
three years uh and i will be talking

00:00:17,600 --> 00:00:21,119
about app images in general and how to

00:00:20,160 --> 00:00:24,720
make

00:00:21,119 --> 00:00:28,720
them using app image build

00:00:24,720 --> 00:00:32,160
uh let's proceed

00:00:28,720 --> 00:00:35,200
up design

00:00:32,160 --> 00:00:38,879
premises from the user point of view

00:00:35,200 --> 00:00:42,320
they have to be easy to that to acquire

00:00:38,879 --> 00:00:45,200
and to run just like we do with a

00:00:42,320 --> 00:00:45,760
windows or a mac application and from

00:00:45,200 --> 00:00:49,680
the

00:00:45,760 --> 00:00:54,000
developer point of view the application

00:00:49,680 --> 00:00:57,440
should be able to run in almost every

00:00:54,000 --> 00:00:58,160
no linux distribution not i'm not having

00:00:57,440 --> 00:01:01,440
to

00:00:58,160 --> 00:01:03,840
make a package for every single linux

00:01:01,440 --> 00:01:07,920
distribution

00:01:03,840 --> 00:01:11,200
now an app image has this structure

00:01:07,920 --> 00:01:14,080
it's a a main executable

00:01:11,200 --> 00:01:14,080
and a compressed

00:01:14,240 --> 00:01:21,119
directory this executable will

00:01:17,520 --> 00:01:25,119
mount the directory is infused

00:01:21,119 --> 00:01:28,640
and will run the app inside this

00:01:25,119 --> 00:01:31,920
the the payload as we call it

00:01:28,640 --> 00:01:35,119
is a red only image containing

00:01:31,920 --> 00:01:38,079
the binaries that are and

00:01:35,119 --> 00:01:38,640
all the other resources that it might

00:01:38,079 --> 00:01:41,840
require

00:01:38,640 --> 00:01:41,840
to run

00:01:43,040 --> 00:01:48,240
another image it's all batteries in

00:01:45,840 --> 00:01:51,119
includes all the batteries and all that

00:01:48,240 --> 00:01:52,000
stuff that an application might require

00:01:51,119 --> 00:01:55,520
to run

00:01:52,000 --> 00:01:56,640
it it's has very few external

00:01:55,520 --> 00:02:00,399
dependencies

00:01:56,640 --> 00:02:04,159
only a few graphical libraries ssl

00:02:00,399 --> 00:02:08,000
and other libraries that are

00:02:04,159 --> 00:02:10,720
that might come in almost every

00:02:08,000 --> 00:02:12,480
linux distribution some kind of app

00:02:10,720 --> 00:02:16,239
images

00:02:12,480 --> 00:02:19,599
includes more dependencies than others

00:02:16,239 --> 00:02:22,879
a app image builder is one of

00:02:19,599 --> 00:02:26,080
is one of the tools that include most

00:02:22,879 --> 00:02:28,080
things why we got because we are looking

00:02:26,080 --> 00:02:30,400
for a maximum portability

00:02:28,080 --> 00:02:33,040
and of course no installation would be

00:02:30,400 --> 00:02:33,040
required

00:02:34,840 --> 00:02:40,160
okay excellent okay

00:02:37,840 --> 00:02:42,319
app image builder image builder is a new

00:02:40,160 --> 00:02:45,920
tool for creating app images

00:02:42,319 --> 00:02:49,440
it is re recipient basic and

00:02:45,920 --> 00:02:52,480
has as assisted recipe generation

00:02:49,440 --> 00:02:55,840
is the resulting of images will be

00:02:52,480 --> 00:02:59,920
backward and forward compatible and

00:02:55,840 --> 00:03:03,120
also can be created in modern systems

00:02:59,920 --> 00:03:06,239
unlike other existing tools for creating

00:03:03,120 --> 00:03:10,319
app images also it has the ability

00:03:06,239 --> 00:03:13,200
of patching fixes fixed path at runtime

00:03:10,319 --> 00:03:14,159
which means as a developer you have

00:03:13,200 --> 00:03:16,720
control

00:03:14,159 --> 00:03:17,519
over your application but you don't have

00:03:16,720 --> 00:03:20,319
control

00:03:17,519 --> 00:03:21,280
over your application dependencies if a

00:03:20,319 --> 00:03:24,319
dependency

00:03:21,280 --> 00:03:28,000
has a fixed path that cannot

00:03:24,319 --> 00:03:30,959
be changed at wrong time your

00:03:28,000 --> 00:03:31,440
you will have a hard time like creating

00:03:30,959 --> 00:03:34,159
an

00:03:31,440 --> 00:03:34,799
app image of it now with the image

00:03:34,159 --> 00:03:37,920
builder

00:03:34,799 --> 00:03:37,920
this is solved

00:03:40,400 --> 00:03:46,560
next slide okay the

00:03:44,000 --> 00:03:47,519
app image builder has a new payload

00:03:46,560 --> 00:03:50,560
structure

00:03:47,519 --> 00:03:53,760
with it provides a custom entry point

00:03:50,560 --> 00:03:56,879
named abram it embeds lip set

00:03:53,760 --> 00:04:00,560
g lipsy ld linux

00:03:56,879 --> 00:04:03,599
and also at run time

00:04:00,560 --> 00:04:06,799
it compares the

00:04:03,599 --> 00:04:07,439
version of the glibc embed in your app

00:04:06,799 --> 00:04:09,760
image

00:04:07,439 --> 00:04:11,519
and the one running in your system and

00:04:09,760 --> 00:04:16,079
picks the newer one

00:04:11,519 --> 00:04:19,519
to run the whole application also it has

00:04:16,079 --> 00:04:22,880
run time hacks this hux provides

00:04:19,519 --> 00:04:26,320
the path intersection ability and

00:04:22,880 --> 00:04:28,880
also allows to keep the

00:04:26,320 --> 00:04:30,240
runtime environment of your bundle

00:04:28,880 --> 00:04:33,199
confine it

00:04:30,240 --> 00:04:34,320
this is not sandboxing this is just uh

00:04:33,199 --> 00:04:37,360
for

00:04:34,320 --> 00:04:39,680
a avoiding that the runtime

00:04:37,360 --> 00:04:40,560
of your bundles get mixed with your

00:04:39,680 --> 00:04:43,680
system or

00:04:40,560 --> 00:04:48,880
another application from

00:04:43,680 --> 00:04:52,639
wrong times and libraries okay

00:04:48,880 --> 00:04:55,840
now let's i would like to show you more

00:04:52,639 --> 00:04:59,199
how to do it with a

00:04:55,840 --> 00:05:02,880
example in this case i'm going to be

00:04:59,199 --> 00:05:07,360
packaging gnome calculator

00:05:02,880 --> 00:05:07,360
and share my screen right now

00:05:08,840 --> 00:05:13,120
okay

00:05:10,080 --> 00:05:16,560
and you see it okay the first thing

00:05:13,120 --> 00:05:17,360
is to of course get the sources um we'll

00:05:16,560 --> 00:05:22,560
be

00:05:17,360 --> 00:05:25,840
building non-calculator 3.30.0

00:05:22,560 --> 00:05:25,840
and so

00:05:26,080 --> 00:05:29,840
once you you have the sources you have

00:05:28,960 --> 00:05:33,919
to build it

00:05:29,840 --> 00:05:36,000
and install it to adapter

00:05:33,919 --> 00:05:38,080
the up there will be the starting point

00:05:36,000 --> 00:05:41,120
for creating or app image

00:05:38,080 --> 00:05:44,960
and will be what the the

00:05:41,120 --> 00:05:48,880
content of the final bundle first we're

00:05:44,960 --> 00:05:52,080
deploying our application

00:05:48,880 --> 00:05:53,520
binaries and resources notice that it's

00:05:52,080 --> 00:05:57,199
important

00:05:53,520 --> 00:06:00,800
that things like the desktop file

00:05:57,199 --> 00:06:07,440
and icons gets deployed

00:06:00,800 --> 00:06:10,639
into the appear

00:06:07,440 --> 00:06:12,639
like this this desktop file will be used

00:06:10,639 --> 00:06:16,400
by the app image builder

00:06:12,639 --> 00:06:20,080
to properly generate the recipe

00:06:16,400 --> 00:06:23,600
now the second step is to make sure that

00:06:20,080 --> 00:06:26,800
our application runs in the case of

00:06:23,600 --> 00:06:30,880
non calculator it required it has a

00:06:26,800 --> 00:06:33,280
and a geoloads scan schemas that need to

00:06:30,880 --> 00:06:36,800
be compiled we're going to do that

00:06:33,280 --> 00:06:40,319
and we are going to try our

00:06:36,800 --> 00:06:43,280
application okay

00:06:40,319 --> 00:06:43,280
now it's running

00:06:44,160 --> 00:06:52,240
let me share it again

00:06:48,080 --> 00:06:52,240
okay okay we have the

00:06:52,560 --> 00:06:59,039
the calculator application running

00:06:55,919 --> 00:07:00,560
once we have the application running in

00:06:59,039 --> 00:07:03,840
our development system

00:07:00,560 --> 00:07:06,639
we proceeded to

00:07:03,840 --> 00:07:07,840
generate the recipe using app image

00:07:06,639 --> 00:07:11,039
builder

00:07:07,840 --> 00:07:12,880
if we use some environment variable like

00:07:11,039 --> 00:07:13,759
to run our application we will have to

00:07:12,880 --> 00:07:16,960
use it

00:07:13,759 --> 00:07:21,120
also with app image builder as it

00:07:16,960 --> 00:07:24,639
runs the application in order to resolve

00:07:21,120 --> 00:07:27,199
dependencies we use the

00:07:24,639 --> 00:07:27,199
generate

00:07:29,759 --> 00:07:37,520
a feature of an image builder it bro

00:07:33,680 --> 00:07:39,599
this will look for a desktop entry and

00:07:37,520 --> 00:07:43,120
will read the application information

00:07:39,599 --> 00:07:46,800
from it like the id application id

00:07:43,120 --> 00:07:50,319
name icon version the main

00:07:46,800 --> 00:07:53,759
executable and arguments that will

00:07:50,319 --> 00:07:56,840
require also it will ask us for

00:07:53,759 --> 00:08:00,000
the architecture of the final bundle

00:07:56,840 --> 00:08:03,120
binary the

00:08:00,000 --> 00:08:04,319
application is now running it is

00:08:03,120 --> 00:08:08,720
important that

00:08:04,319 --> 00:08:08,720
when the application is running you

00:08:09,520 --> 00:08:15,520
use almost and try almost every

00:08:12,960 --> 00:08:16,960
feature of the application why this

00:08:15,520 --> 00:08:20,560
application is being

00:08:16,960 --> 00:08:24,840
run with s trays

00:08:20,560 --> 00:08:27,520
and ld debug libs in order to

00:08:24,840 --> 00:08:30,240
a discover which

00:08:27,520 --> 00:08:31,120
binaries and libraries and resources are

00:08:30,240 --> 00:08:34,800
being loaded

00:08:31,120 --> 00:08:38,880
at prom time so if you use you should

00:08:34,800 --> 00:08:41,519
like try almost every plugin

00:08:38,880 --> 00:08:42,880
and feature in order for them to be

00:08:41,519 --> 00:08:46,000
loaded in memory and

00:08:42,880 --> 00:08:49,120
to be discovered by the generate

00:08:46,000 --> 00:08:52,320
tool in this case

00:08:49,120 --> 00:08:55,519
uh the calculator application is

00:08:52,320 --> 00:08:59,920
quite simple so it's fine

00:08:55,519 --> 00:09:03,360
to do it so far okay

00:08:59,920 --> 00:09:07,680
now let's go back to the terminal

00:09:03,360 --> 00:09:11,279
and add a recipe

00:09:07,680 --> 00:09:15,519
and abby mesh builder file was

00:09:11,279 --> 00:09:15,519
created let's take a look at it

00:09:16,000 --> 00:09:21,360
in this file we will find all the

00:09:19,040 --> 00:09:22,399
application information that we were

00:09:21,360 --> 00:09:25,920
prompted for

00:09:22,399 --> 00:09:28,399
the runtime configuration this is

00:09:25,920 --> 00:09:30,800
these are the library paths that will be

00:09:28,399 --> 00:09:33,839
used by our application

00:09:30,800 --> 00:09:37,200
and will be also

00:09:33,839 --> 00:09:40,880
information about the apt

00:09:37,200 --> 00:09:44,160
sources configured in our system

00:09:40,880 --> 00:09:47,760
in this case for the final recipe

00:09:44,160 --> 00:09:51,040
i will not need nor docker

00:09:47,760 --> 00:09:55,040
no yes code also

00:09:51,040 --> 00:09:58,720
i will not need steam nor note

00:09:55,040 --> 00:10:02,079
it is important that for the final a

00:09:58,720 --> 00:10:05,839
recipe you remove the

00:10:02,079 --> 00:10:06,399
allo unauthenticated sources as this

00:10:05,839 --> 00:10:10,240
might be

00:10:06,399 --> 00:10:14,800
like a source of or but

00:10:10,240 --> 00:10:19,040
software get into your final bundle

00:10:14,800 --> 00:10:22,560
i'm leaving you instead you should

00:10:19,040 --> 00:10:26,800
like add something like

00:10:22,560 --> 00:10:30,839
key url and i put there the

00:10:26,800 --> 00:10:34,560
the your the urls of the different

00:10:30,839 --> 00:10:36,880
repositories so let's

00:10:34,560 --> 00:10:38,240
below you will find a list of the

00:10:36,880 --> 00:10:41,519
dependencies that

00:10:38,240 --> 00:10:44,800
image filter generate found

00:10:41,519 --> 00:10:48,560
basically is the conf the as i'm running

00:10:44,800 --> 00:10:51,519
kde neon it says that kde conflict

00:10:48,560 --> 00:10:52,560
gtk style is a dependency if you build

00:10:51,519 --> 00:10:55,440
this package

00:10:52,560 --> 00:10:56,240
in uh normally probably this will not be

00:10:55,440 --> 00:10:59,839
part

00:10:56,240 --> 00:11:00,640
of your recipe and you can like safely

00:10:59,839 --> 00:11:04,079
remove it

00:11:00,640 --> 00:11:07,120
in this case i'm leaving it as it pulls

00:11:04,079 --> 00:11:10,959
other dependencies like the

00:11:07,120 --> 00:11:14,720
gtk 3 and everything gets pulled

00:11:10,959 --> 00:11:17,920
from there so i'm leaving it there

00:11:14,720 --> 00:11:21,200
for the moment the exclude list

00:11:17,920 --> 00:11:23,279
can be used like to opt out in some

00:11:21,200 --> 00:11:27,120
packages that you might not want

00:11:23,279 --> 00:11:30,079
in your final bundle are also the files

00:11:27,120 --> 00:11:31,600
and this part is one of the most

00:11:30,079 --> 00:11:34,720
interesting

00:11:31,600 --> 00:11:38,320
app image builder will run the

00:11:34,720 --> 00:11:41,600
final bundle in different environments

00:11:38,320 --> 00:11:44,959
in this case it will run it on fedora

00:11:41,600 --> 00:11:48,959
deviant arch centers and ubuntu

00:11:44,959 --> 00:11:52,240
this will give you like a certainty that

00:11:48,959 --> 00:11:55,839
our final bundle will run in those

00:11:52,240 --> 00:11:56,800
target systems it is super important

00:11:55,839 --> 00:12:00,240
like to

00:11:56,800 --> 00:12:03,279
try as much as you possible as

00:12:00,240 --> 00:12:04,240
because no linux distribution change a

00:12:03,279 --> 00:12:07,040
lot

00:12:04,240 --> 00:12:08,240
library names might change a lot of

00:12:07,040 --> 00:12:10,560
things might change

00:12:08,240 --> 00:12:12,480
from one distribution to another so

00:12:10,560 --> 00:12:15,519
always test

00:12:12,480 --> 00:12:18,880
okay so far this recipe

00:12:15,519 --> 00:12:25,040
should be good too to build so i'm

00:12:18,880 --> 00:12:27,839
saving it and running up image build

00:12:25,040 --> 00:12:29,040
okay the first thing that image builder

00:12:27,839 --> 00:12:34,000
will do is like

00:12:29,040 --> 00:12:37,920
update the the apd sources

00:12:34,000 --> 00:12:40,079
and then it will download all the

00:12:37,920 --> 00:12:43,120
required packages

00:12:40,079 --> 00:12:47,440
and we'll deploy them into the

00:12:43,120 --> 00:12:47,440
after extreme i see

00:12:48,480 --> 00:12:55,279
okay let's give it some time

00:12:52,240 --> 00:12:56,240
after the all the binaries are on are

00:12:55,279 --> 00:12:59,279
deployed

00:12:56,240 --> 00:13:02,399
it configures the application runtime

00:12:59,279 --> 00:13:06,079
this is basically it sets

00:13:02,399 --> 00:13:10,320
a custom a

00:13:06,079 --> 00:13:14,160
interpreter path for every

00:13:10,320 --> 00:13:17,200
binary in the in the bundle

00:13:14,160 --> 00:13:20,800
this path will be used to be able to

00:13:17,200 --> 00:13:25,440
switch at runtime which glibc

00:13:20,800 --> 00:13:25,440
and ld linux will be used

00:13:26,160 --> 00:13:33,440
also it sets configuration for qt

00:13:29,279 --> 00:13:36,639
as as we are building in a

00:13:33,440 --> 00:13:37,680
kde based environment some qd might have

00:13:36,639 --> 00:13:40,800
slid

00:13:37,680 --> 00:13:44,240
into the bundle sets the

00:13:40,800 --> 00:13:47,680
jdk configuration on

00:13:44,240 --> 00:13:50,880
other things now it is running

00:13:47,680 --> 00:13:54,959
the the obligation in

00:13:50,880 --> 00:13:54,959
fedora i will show you

00:13:57,839 --> 00:14:00,160
okay

00:14:01,760 --> 00:14:06,160
this is the application running on a

00:14:04,000 --> 00:14:09,839
docker container

00:14:06,160 --> 00:14:12,480
of fedora i'm going now

00:14:09,839 --> 00:14:13,199
it's it will run it on the next one this

00:14:12,480 --> 00:14:15,920
is

00:14:13,199 --> 00:14:16,959
deviant you might see that the icons and

00:14:15,920 --> 00:14:19,839
the fonts

00:14:16,959 --> 00:14:20,160
may change from one system to other as

00:14:19,839 --> 00:14:23,680
it

00:14:20,160 --> 00:14:26,000
adapts to the system a

00:14:23,680 --> 00:14:26,000
team

00:14:27,360 --> 00:14:34,800
now it's arch now we converge

00:14:31,440 --> 00:14:38,720
maybe arch doesn't have that icon in the

00:14:34,800 --> 00:14:44,079
team and

00:14:38,720 --> 00:14:47,920
sent us okay

00:14:44,079 --> 00:14:52,079
next and finally event

00:14:47,920 --> 00:14:56,480
okay now we're sure that our application

00:14:52,079 --> 00:15:00,480
runs on all our target systems

00:14:56,480 --> 00:15:04,480
and the the proceeds to create

00:15:00,480 --> 00:15:07,519
the final bundle

00:15:04,480 --> 00:15:07,519
which would be named

00:15:08,959 --> 00:15:15,839
this bundle is ready to be shipped

00:15:12,160 --> 00:15:18,639
as it is as you may see

00:15:15,839 --> 00:15:20,880
i well you should not see it too much

00:15:18,639 --> 00:15:24,079
there

00:15:20,880 --> 00:15:28,560
okay now you know now you do

00:15:24,079 --> 00:15:31,040
so this is the our final bundle

00:15:28,560 --> 00:15:31,040
it is

00:15:32,399 --> 00:15:40,560
it is quite big and

00:15:35,519 --> 00:15:43,759
now we will see why

00:15:40,560 --> 00:15:47,519
if we go into the adapter and

00:15:43,759 --> 00:15:50,800
check the font gml file we can see

00:15:47,519 --> 00:15:53,680
which packages ended inside

00:15:50,800 --> 00:15:54,320
the bundle in this case we are bundling

00:15:53,680 --> 00:15:57,600
a whole

00:15:54,320 --> 00:16:00,560
icon theme out with that with a

00:15:57,600 --> 00:16:02,240
white chat well how do you say that

00:16:00,560 --> 00:16:05,440
probably can be

00:16:02,240 --> 00:16:09,040
opt out we are also

00:16:05,440 --> 00:16:12,320
oh actually we are bundling three icons

00:16:09,040 --> 00:16:14,880
teams this happened because of the

00:16:12,320 --> 00:16:16,959
apg dependencies all of them are being

00:16:14,880 --> 00:16:20,000
followed inside the bundle now

00:16:16,959 --> 00:16:21,519
you have to like to manually opt out the

00:16:20,000 --> 00:16:24,800
things that you consider that

00:16:21,519 --> 00:16:29,120
can be excluded

00:16:24,800 --> 00:16:29,120
to do so we are going to

00:16:33,920 --> 00:16:39,279
we are going to use the exclude section

00:16:43,120 --> 00:16:45,519
okay

00:16:49,040 --> 00:16:52,959
we're going also to remove

00:16:54,160 --> 00:16:57,279
i contour

00:16:58,240 --> 00:17:07,439
and quantity i can jam

00:17:04,240 --> 00:17:07,439
okay okay okay

00:17:07,760 --> 00:17:16,000
i probably can't remove the whole

00:17:11,679 --> 00:17:16,000
gf5 stuff on

00:17:16,319 --> 00:17:19,839
on a lot of cutie

00:17:19,919 --> 00:17:25,839
but if i remove this one

00:17:23,520 --> 00:17:27,919
probably if i remove this one from the

00:17:25,839 --> 00:17:31,600
include list

00:17:27,919 --> 00:17:35,520
i will not get the dependencies

00:17:31,600 --> 00:17:40,080
included so i might need to

00:17:35,520 --> 00:17:40,080
do something like this so

00:17:40,400 --> 00:17:47,919
uh okay okay i can't i contend

00:17:44,880 --> 00:17:51,360
on instead of

00:17:47,919 --> 00:17:54,480
like this depends on a lot of stuff

00:17:51,360 --> 00:17:58,880
that's why our bundle is so

00:17:54,480 --> 00:18:02,559
big would probably

00:17:58,880 --> 00:18:05,600
only probably need this section

00:18:02,559 --> 00:18:15,679
of the dependencies and not the whole

00:18:05,600 --> 00:18:18,720
kf5 stuff let's give it a try

00:18:15,679 --> 00:18:20,720
notice that you can like do this in

00:18:18,720 --> 00:18:24,400
order to

00:18:20,720 --> 00:18:28,730
force a given package version so

00:18:24,400 --> 00:18:30,559
those entries are fully passed

00:18:28,730 --> 00:18:34,320
[Music]

00:18:30,559 --> 00:18:34,320
installed you can also do this

00:18:34,799 --> 00:18:39,600
in order to enforce attackers from a

00:18:37,679 --> 00:18:42,160
different

00:18:39,600 --> 00:18:43,039
architecture to be bundled just make

00:18:42,160 --> 00:18:46,559
sure that you

00:18:43,039 --> 00:18:50,400
allow you add this

00:18:46,559 --> 00:18:50,400
architecture in your source lines

00:18:50,480 --> 00:18:53,840
but in order to make your your recipe

00:18:52,799 --> 00:18:56,960
like more

00:18:53,840 --> 00:19:00,880
versatile or more compatible

00:18:56,960 --> 00:19:00,880
we will not enforcing any

00:19:01,120 --> 00:19:08,000
dependencies okay

00:19:04,160 --> 00:19:11,120
let's sorry let's give it another try

00:19:08,000 --> 00:19:15,039
it is always a good idea to

00:19:11,120 --> 00:19:18,559
start fresh when

00:19:15,039 --> 00:19:22,320
making an app damage because

00:19:18,559 --> 00:19:25,120
it may affect the execution

00:19:22,320 --> 00:19:26,559
the one previous execution of the image

00:19:25,120 --> 00:19:30,720
builder can affect

00:19:26,559 --> 00:19:33,919
the next one so always it's a good idea

00:19:30,720 --> 00:19:36,960
like to start fresh and to be sure that

00:19:33,919 --> 00:19:41,200
no but no

00:19:36,960 --> 00:19:41,200
thanks for the previous

00:19:41,440 --> 00:19:52,400
iteration gets into

00:19:44,880 --> 00:19:56,640
no okay my recipe is probably

00:19:52,400 --> 00:19:56,640
it's probably wrong

00:19:57,520 --> 00:19:59,760
okay

00:20:00,960 --> 00:20:08,720
yeah let's see

00:20:06,400 --> 00:20:08,720
okay

00:20:09,600 --> 00:20:12,080
there we go

00:20:12,720 --> 00:20:15,919
now we'll run everything again and it

00:20:15,360 --> 00:20:19,039
should

00:20:15,919 --> 00:20:23,360
opt out the packages with

00:20:19,039 --> 00:20:27,600
file and

00:20:23,360 --> 00:20:27,600
the final bundle should be

00:20:32,840 --> 00:20:38,159
smaller

00:20:34,400 --> 00:20:41,440
okay it's against generating

00:20:38,159 --> 00:20:42,799
everything sorry for the time it takes a

00:20:41,440 --> 00:20:45,520
bit of time to build

00:20:42,799 --> 00:20:46,840
even a simple application now it's

00:20:45,520 --> 00:20:49,840
ruining

00:20:46,840 --> 00:20:49,840
fedora

00:20:51,120 --> 00:20:58,400
all the test cases

00:20:54,480 --> 00:21:03,840
are being run

00:20:58,400 --> 00:21:03,840
i'm getting the it

00:21:08,880 --> 00:21:13,039
now the application is being built

00:21:14,320 --> 00:21:20,480
and we remove a few megabytes if

00:21:17,440 --> 00:21:24,799
we get keep doing this process we can

00:21:20,480 --> 00:21:24,799
like remove a lot of more

00:21:28,400 --> 00:21:36,000
a lot more like pocket and

00:21:32,720 --> 00:21:37,280
we are still someone is still pulling

00:21:36,000 --> 00:21:40,559
the kf5

00:21:37,280 --> 00:21:41,600
so we will need like to do this a few

00:21:40,559 --> 00:21:44,799
times or

00:21:41,600 --> 00:21:48,000
more or use like a pure

00:21:44,799 --> 00:21:50,960
like virtual machine machine to to get

00:21:48,000 --> 00:21:53,440
like less dependencies pull it by

00:21:50,960 --> 00:21:56,880
default

00:21:53,440 --> 00:21:59,280
but so far this is a

00:21:56,880 --> 00:21:59,919
how up image builder creates an epic app

00:21:59,280 --> 00:22:01,919
image

00:21:59,919 --> 00:22:03,039
as you can see there is also the sources

00:22:01,919 --> 00:22:05,919
that were

00:22:03,039 --> 00:22:08,320
used to create the bundle so you might

00:22:05,919 --> 00:22:12,240
like try to reproduce

00:22:08,320 --> 00:22:15,520
uh define the final bundle

00:22:12,240 --> 00:22:17,760
and this is also important dependencies

00:22:15,520 --> 00:22:19,440
what are those dependencies those are

00:22:17,760 --> 00:22:22,000
the libraries that

00:22:19,440 --> 00:22:23,120
are required to be installed in a system

00:22:22,000 --> 00:22:26,159
for the

00:22:23,120 --> 00:22:27,120
bundle to run basically you will find

00:22:26,159 --> 00:22:30,240
that

00:22:27,120 --> 00:22:34,320
things like x lead xcv

00:22:30,240 --> 00:22:37,600
and with gl

00:22:34,320 --> 00:22:40,720
the dl font config

00:22:37,600 --> 00:22:43,600
and all those liquid and others

00:22:40,720 --> 00:22:45,200
are required those are usually in every

00:22:43,600 --> 00:22:48,240
system so

00:22:45,200 --> 00:22:51,520
er expected to to run

00:22:48,240 --> 00:22:54,880
this kind of bundle those

00:22:51,520 --> 00:22:58,320
include much more stuff that

00:22:54,880 --> 00:23:00,559
traditional bundles

00:22:58,320 --> 00:23:00,559
so

00:23:07,039 --> 00:23:10,320
a um

00:23:08,170 --> 00:23:14,559
[Music]

00:23:10,320 --> 00:23:19,520
sorry but what means that some critical

00:23:14,559 --> 00:23:23,120
uh software might slip in to the

00:23:19,520 --> 00:23:24,240
to the application so it's recommended

00:23:23,120 --> 00:23:27,600
for you to

00:23:24,240 --> 00:23:30,480
recreate the the packages and the bundle

00:23:27,600 --> 00:23:31,440
every time like a security patch it's

00:23:30,480 --> 00:23:34,080
release it

00:23:31,440 --> 00:23:35,120
so you would you should publish your

00:23:34,080 --> 00:23:38,400
application

00:23:35,120 --> 00:23:41,440
well the first place to go is your web

00:23:38,400 --> 00:23:45,760
or repository at github gitlab

00:23:41,440 --> 00:23:48,400
there's where app image file should live

00:23:45,760 --> 00:23:49,520
also you can like add them to to the

00:23:48,400 --> 00:23:54,360
existing list

00:23:49,520 --> 00:23:56,720
listings which are app image hub and

00:23:54,360 --> 00:23:59,360
image.github.io you can

00:23:56,720 --> 00:24:00,480
like add your software to those listings

00:23:59,360 --> 00:24:05,120
so they can be

00:24:00,480 --> 00:24:08,480
reached and found by users

00:24:05,120 --> 00:24:12,080
okay some reference projects that

00:24:08,480 --> 00:24:15,120
keep get can be useful like to check

00:24:12,080 --> 00:24:18,240
how others are using this tool

00:24:15,120 --> 00:24:21,120
and what are they doing um this

00:24:18,240 --> 00:24:21,919
the first reference is the maui builds

00:24:21,120 --> 00:24:24,720
project

00:24:21,919 --> 00:24:25,840
this is super interesting it's made on

00:24:24,720 --> 00:24:30,000
jeep black

00:24:25,840 --> 00:24:32,640
it produces native emd 64 builds

00:24:30,000 --> 00:24:33,840
and it also cross cross-compiled for erm

00:24:32,640 --> 00:24:38,159
00:24:33,840 --> 00:24:41,520
and builds an android ap android apks

00:24:38,159 --> 00:24:43,200
so this is one of the most like complex

00:24:41,520 --> 00:24:46,960
but also powerful

00:24:43,200 --> 00:24:50,159
configuration for like if you're having

00:24:46,960 --> 00:24:53,520
a project to ship it and build it for

00:24:50,159 --> 00:24:57,360
many different platforms also

00:24:53,520 --> 00:25:01,039
there is this mystic video converter

00:24:57,360 --> 00:25:04,080
tool seal is also using

00:25:01,039 --> 00:25:07,200
uh up image builder cut there's a

00:25:04,080 --> 00:25:09,120
k stars for requests for using or

00:25:07,200 --> 00:25:09,679
building up image using up image builder

00:25:09,120 --> 00:25:12,880
and

00:25:09,679 --> 00:25:15,840
a g concrete or

00:25:12,880 --> 00:25:15,840
recipe also

00:25:16,320 --> 00:25:21,279
so about the easy issues i was talking

00:25:19,760 --> 00:25:24,799
about

00:25:21,279 --> 00:25:28,240
bundle everything as i said has

00:25:24,799 --> 00:25:30,960
an important security issue

00:25:28,240 --> 00:25:32,559
critical software is frozen inside the

00:25:30,960 --> 00:25:36,400
bundle that's why

00:25:32,559 --> 00:25:37,840
you should like set up a continuous

00:25:36,400 --> 00:25:41,679
build environment

00:25:37,840 --> 00:25:42,000
and recreate bundles every certain time

00:25:41,679 --> 00:25:45,679
or

00:25:42,000 --> 00:25:46,400
every time that a library that is

00:25:45,679 --> 00:25:49,679
bundling

00:25:46,400 --> 00:25:52,799
in your in your package

00:25:49,679 --> 00:25:55,840
gets a security update a

00:25:52,799 --> 00:25:56,159
it is isn't up image already support

00:25:55,840 --> 00:25:59,440
like

00:25:56,159 --> 00:25:59,760
delta update so your user will not have

00:25:59,440 --> 00:26:02,799
to

00:25:59,760 --> 00:26:03,440
download the whole bundle only the parts

00:26:02,799 --> 00:26:07,120
that

00:26:03,440 --> 00:26:11,200
it that change it if it's done

00:26:07,120 --> 00:26:12,159
well extra size uh yes your bundle will

00:26:11,200 --> 00:26:15,679
be a bit

00:26:12,159 --> 00:26:16,480
bigger than it's about 30 megabytes

00:26:15,679 --> 00:26:20,080
bigger

00:26:16,480 --> 00:26:23,760
because of geolipsey is being bundled

00:26:20,080 --> 00:26:26,799
which is this isn't doesn't happens with

00:26:23,760 --> 00:26:30,240
other tools like linux diploid

00:26:26,799 --> 00:26:33,520
uh why are we bundled into let's see

00:26:30,240 --> 00:26:36,960
basically because we are looking for

00:26:33,520 --> 00:26:40,480
all this allows two things first

00:26:36,960 --> 00:26:44,240
uh portability our

00:26:40,480 --> 00:26:47,440
system solution will be able to be used

00:26:44,240 --> 00:26:47,760
in system with another lipsy than the

00:26:47,440 --> 00:26:50,799
one

00:26:47,760 --> 00:26:53,760
we built the application and

00:26:50,799 --> 00:26:56,240
on system with newer let's see thanks to

00:26:53,760 --> 00:26:59,919
the backward compatibility of gltc

00:26:56,240 --> 00:26:59,919
on also because

00:27:00,000 --> 00:27:06,720
it allows us to build the bundles

00:27:03,520 --> 00:27:09,840
in newer system this is not possible for

00:27:06,720 --> 00:27:12,559
a with tools like linux deploy

00:27:09,840 --> 00:27:15,200
where you have to focus on the latest

00:27:12,559 --> 00:27:18,480
stable release by example of ubuntu or

00:27:15,200 --> 00:27:20,960
santos uh and this light

00:27:18,480 --> 00:27:22,399
can become like a nightmare if you have

00:27:20,960 --> 00:27:25,440
like

00:27:22,399 --> 00:27:27,760
if dependencies that are too new or or

00:27:25,440 --> 00:27:29,760
are not compatible or require tools for

00:27:27,760 --> 00:27:33,360
building that are not available

00:27:29,760 --> 00:27:37,039
in those system and the final

00:27:33,360 --> 00:27:40,640
issue is never use

00:27:37,039 --> 00:27:43,360
untrusted sources for your bundle

00:27:40,640 --> 00:27:43,760
always go with the official repositories

00:27:43,360 --> 00:27:48,720
to

00:27:43,760 --> 00:27:51,840
create your bundles

00:27:48,720 --> 00:27:52,880
okay where you can learn a bit more up

00:27:51,840 --> 00:27:56,080
image builder we'll

00:27:52,880 --> 00:27:57,120
check the dots of image and the app

00:27:56,080 --> 00:27:59,600
image builder

00:27:57,120 --> 00:28:00,159
documentation you can also check for

00:27:59,600 --> 00:28:03,200
other

00:28:00,159 --> 00:28:04,880
image image project on awesome happy

00:28:03,200 --> 00:28:08,080
mesh

00:28:04,880 --> 00:28:09,520
and if you have questions uh go to our

00:28:08,080 --> 00:28:14,480
irc channel or

00:28:09,520 --> 00:28:18,159
ask in stack overflow we will gladly

00:28:14,480 --> 00:28:21,200
answer and be deaf to support you

00:28:18,159 --> 00:28:25,200
finally this is my wish list for

00:28:21,200 --> 00:28:27,360
those people that make desktops and

00:28:25,200 --> 00:28:29,039
basically if we would love from their

00:28:27,360 --> 00:28:32,240
image

00:28:29,039 --> 00:28:34,960
project to see thumbnails for up image

00:28:32,240 --> 00:28:35,679
like in every file manager we would like

00:28:34,960 --> 00:28:38,240
to

00:28:35,679 --> 00:28:39,760
be able to double click an app image and

00:28:38,240 --> 00:28:42,080
it get executed

00:28:39,760 --> 00:28:43,279
and you get the execution permission of

00:28:42,080 --> 00:28:46,240
course you can

00:28:43,279 --> 00:28:46,720
oh you will always like warn the user

00:28:46,240 --> 00:28:51,120
about

00:28:46,720 --> 00:28:54,159
the implications and you will like

00:28:51,120 --> 00:28:56,320
not warn them that don't run software

00:28:54,159 --> 00:28:57,840
that they don't get from a trusted

00:28:56,320 --> 00:29:01,440
source

00:28:57,840 --> 00:29:05,200
also the crash reporting

00:29:01,440 --> 00:29:07,679
if the application fails to to start

00:29:05,200 --> 00:29:08,559
to notify the user what work when run

00:29:07,679 --> 00:29:12,559
not just

00:29:08,559 --> 00:29:13,600
keep do nothing also we would like to

00:29:12,559 --> 00:29:16,640
see

00:29:13,600 --> 00:29:18,480
integration with the system menus like

00:29:16,640 --> 00:29:20,320
something like maybe in the file manager

00:29:18,480 --> 00:29:24,320
you do right click actually

00:29:20,320 --> 00:29:27,279
menu and that's it for doing this

00:29:24,320 --> 00:29:28,159
we have leave an image that is already

00:29:27,279 --> 00:29:30,559
capable of

00:29:28,159 --> 00:29:31,600
doing all this it just needs to be

00:29:30,559 --> 00:29:35,279
integrated

00:29:31,600 --> 00:29:37,039
so as if the file managers and the

00:29:35,279 --> 00:29:40,159
the system menus and the desktop

00:29:37,039 --> 00:29:43,200
environments are not our domain as a

00:29:40,159 --> 00:29:46,640
project we are not capable of

00:29:43,200 --> 00:29:47,120
like pushing those changes a the kde

00:29:46,640 --> 00:29:50,159
project

00:29:47,120 --> 00:29:53,279
has already done a lot of on this

00:29:50,159 --> 00:29:56,960
and that's really great that we

00:29:53,279 --> 00:29:58,080
you can right now you can in kde neon by

00:29:56,960 --> 00:30:01,200
example you will have

00:29:58,080 --> 00:30:02,000
like icons for some thumbnails for your

00:30:01,200 --> 00:30:04,480
application

00:30:02,000 --> 00:30:05,760
app images and you will be able to like

00:30:04,480 --> 00:30:10,240
to double click and

00:30:05,760 --> 00:30:15,120
just run it so

00:30:10,240 --> 00:30:18,559
that was my presentation thank you for

00:30:15,120 --> 00:30:23,200
for listening and please if you have

00:30:18,559 --> 00:30:24,960
any questions feel free

00:30:23,200 --> 00:30:27,279
thank you so much for your presentation

00:30:24,960 --> 00:30:29,840
yes there are a few questions

00:30:27,279 --> 00:30:31,520
in the shared notes um let's read them

00:30:29,840 --> 00:30:34,960
out together

00:30:31,520 --> 00:30:37,440
the first question is what does backward

00:30:34,960 --> 00:30:40,159
and forward compatibility mean

00:30:37,440 --> 00:30:41,760
can i build on open source tumbleweed

00:30:40,159 --> 00:30:46,559
and run on centos

00:30:41,760 --> 00:30:49,440
7. okay

00:30:46,559 --> 00:30:50,000
right now app image builder is only

00:30:49,440 --> 00:30:53,679
capable

00:30:50,000 --> 00:30:54,480
of using apt as package manager so you

00:30:53,679 --> 00:30:57,840
will have to

00:30:54,480 --> 00:31:01,600
run it on on a

00:30:57,840 --> 00:31:05,679
ubuntu or debian basic or another system

00:31:01,600 --> 00:31:08,640
which also use apt so

00:31:05,679 --> 00:31:09,360
you right now you cannot build the app

00:31:08,640 --> 00:31:12,559
image

00:31:09,360 --> 00:31:14,480
on opensuse tumbleweed but you can build

00:31:12,559 --> 00:31:17,679
it on ubuntu

00:31:14,480 --> 00:31:20,640
or forecast what's the lastest

00:31:17,679 --> 00:31:22,159
bionic i forgot the code name for ubuntu

00:31:20,640 --> 00:31:25,360
00:31:22,159 --> 00:31:28,880
2004 but you can build it on

00:31:25,360 --> 00:31:32,240
ubuntu 2004 and it will run on

00:31:28,880 --> 00:31:35,440
previous on on oldest

00:31:32,240 --> 00:31:38,640
system without issue at all and also

00:31:35,440 --> 00:31:39,519
my run in newer system that came thanks

00:31:38,640 --> 00:31:42,559
that

00:31:39,519 --> 00:31:46,000
glibc is being bundled

00:31:42,559 --> 00:31:49,039
yep great

00:31:46,000 --> 00:31:49,519
okay the next question is can source

00:31:49,039 --> 00:31:52,799
code

00:31:49,519 --> 00:31:56,320
or rpms also be used as an ingredient

00:31:52,799 --> 00:31:59,120
instead of deb uh

00:31:56,320 --> 00:32:00,159
right now in the example i'm building

00:31:59,120 --> 00:32:02,960
from source code

00:32:00,159 --> 00:32:03,360
so so you will have like manually built

00:32:02,960 --> 00:32:06,960
like

00:32:03,360 --> 00:32:10,240
every ingredient

00:32:06,960 --> 00:32:11,120
and deployed into the app here as i did

00:32:10,240 --> 00:32:14,399
with the main

00:32:11,120 --> 00:32:17,600
application um

00:32:14,399 --> 00:32:21,200
main application binaries so yes

00:32:17,600 --> 00:32:23,440
but it's not uh in the way that you will

00:32:21,200 --> 00:32:24,399
do it with flat pack that is part of the

00:32:23,440 --> 00:32:28,480
recipe

00:32:24,399 --> 00:32:33,440
you can also like add the dirt let me

00:32:28,480 --> 00:32:33,440
show you you can

00:32:33,760 --> 00:32:37,200
do something like

00:32:37,919 --> 00:32:46,080
them image filter

00:32:41,519 --> 00:32:50,559
okay i already already have it over here

00:32:46,080 --> 00:32:50,559
you can like create something

00:32:51,600 --> 00:32:58,240
you can add scripts to their recipes so

00:32:54,720 --> 00:33:03,279
you will like uh

00:32:58,240 --> 00:33:07,200
make install all

00:33:03,279 --> 00:33:09,200
all for all the dependencies are

00:33:07,200 --> 00:33:11,919
ingredients that are built from source

00:33:09,200 --> 00:33:15,679
code make them

00:33:11,919 --> 00:33:15,679
install them to the

00:33:16,159 --> 00:33:19,519
after something like this you can use

00:33:18,399 --> 00:33:21,679
something like this and

00:33:19,519 --> 00:33:22,559
get everything installed before like

00:33:21,679 --> 00:33:26,159
creating

00:33:22,559 --> 00:33:28,640
your final bundle so

00:33:26,159 --> 00:33:28,640
next one

00:33:29,600 --> 00:33:34,080
okay the last question that we have here

00:33:32,559 --> 00:33:37,679
says

00:33:34,080 --> 00:33:40,399
instead of excluding the whole icon set

00:33:37,679 --> 00:33:40,880
could one trace the application to see

00:33:40,399 --> 00:33:46,720
which

00:33:40,880 --> 00:33:46,720
icon fla files are actually needed

00:33:46,880 --> 00:33:49,279
okay

00:33:50,000 --> 00:33:57,360
this is partially due done sorry

00:33:53,679 --> 00:34:00,720
uh not but it's not like complete

00:33:57,360 --> 00:34:04,080
yet uh the outputs or

00:34:00,720 --> 00:34:07,279
s trace can be like check yes

00:34:04,080 --> 00:34:10,480
so you can like use something like that

00:34:07,279 --> 00:34:15,839
and i guess that that's a good issue

00:34:10,480 --> 00:34:15,839

YouTube URL: https://www.youtube.com/watch?v=0uq9M1e1U5s


