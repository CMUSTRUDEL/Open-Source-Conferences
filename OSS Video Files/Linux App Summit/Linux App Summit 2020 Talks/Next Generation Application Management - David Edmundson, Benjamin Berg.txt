Title: Next Generation Application Management - David Edmundson, Benjamin Berg
Publication date: 2020-11-15
Playlist: Linux App Summit 2020 Talks
Description: 
	A Linux desktop's sole job is to connect users to their applications.

There used to be a time where one application was a process. 'ps' would show one easy to manage entry. Now Discord in a flatpak is 13(!) procesess. Have two electron instances and a system-monitor is useless. We have backgrounds services that linger with indecipherable names. It doesn't scale anymore on the desktop. We need metadata.

This is a solved problem with new kernel features. CGroups are used commonly for your system services. Any sysadmin won't deal with an Apache process, but the whole webserver as one cgroup. By embracing this not only do we have metadata providing a single-truth of the launched context, but also expose all of the kernel features reserved for cgroups. Separate network namespaces, hard CPU quotas, Out-of-memory protection that works, we can expose this either as transient modifiers or as sysadmin overrides.

We've been tackling this on both the GNOME and KDE side. In this talk we come together to talk about what we have each done on our respective sides. Where we've found common ground to common problems, as well as our plans for where we take the linux application ecosystem in the future.
Captions: 
	00:00:00,240 --> 00:00:04,560
okay so the title of our talk next

00:00:02,639 --> 00:00:07,759
generation application management

00:00:04,560 --> 00:00:09,440
subtitle system d for your win and

00:00:07,759 --> 00:00:10,880
you might have seen similar talks

00:00:09,440 --> 00:00:12,799
presented at academy

00:00:10,880 --> 00:00:15,040
and guard deck but now we're presenting

00:00:12,799 --> 00:00:17,920
them together so we're joined by

00:00:15,040 --> 00:00:20,080
me david emerson from the kde side and

00:00:17,920 --> 00:00:23,519
benjamin berg

00:00:20,080 --> 00:00:25,119
from the gnome side um yeah yeah so i

00:00:23,519 --> 00:00:28,000
work for blue systems

00:00:25,119 --> 00:00:28,800
ben's working for red hat so opposing

00:00:28,000 --> 00:00:31,599
desktops

00:00:28,800 --> 00:00:33,200
opposing colors affordability to have an

00:00:31,599 --> 00:00:35,520
eu flag in the background

00:00:33,200 --> 00:00:38,320
we've got a lot of applications but we

00:00:35,520 --> 00:00:41,680
also have the same problems

00:00:38,320 --> 00:00:45,360
so as a desktop what we want to do

00:00:41,680 --> 00:00:46,719
is get a user able to control your

00:00:45,360 --> 00:00:47,360
system it's our job as a desktop

00:00:46,719 --> 00:00:49,360
environment

00:00:47,360 --> 00:00:50,640
to put a user to your application so you

00:00:49,360 --> 00:00:53,039
can run your applications

00:00:50,640 --> 00:00:55,920
user applications and most importantly

00:00:53,039 --> 00:00:58,399
manage your applications

00:00:55,920 --> 00:00:59,920
so in terms of managing what's going on

00:00:58,399 --> 00:01:02,719
on your own system

00:00:59,920 --> 00:01:03,680
it used to be a case several years ago

00:01:02,719 --> 00:01:05,840
you'd have your

00:01:03,680 --> 00:01:07,040
browser you'd have your instant

00:01:05,840 --> 00:01:09,439
messenger

00:01:07,040 --> 00:01:11,200
and you'd run ps and you would see your

00:01:09,439 --> 00:01:12,000
browser and you would see your instant

00:01:11,200 --> 00:01:14,080
messenger

00:01:12,000 --> 00:01:16,560
and that would be pretty straightforward

00:01:14,080 --> 00:01:16,960
and when i started using limits 10 years

00:01:16,560 --> 00:01:20,159
ago

00:01:16,960 --> 00:01:23,520
as an idiot i could understand it

00:01:20,159 --> 00:01:25,680
now the situation is very different

00:01:23,520 --> 00:01:27,600
i won my brother my instant messaging

00:01:25,680 --> 00:01:29,840
client and this list is truncated

00:01:27,600 --> 00:01:32,320
because it doesn't all fit on one slide

00:01:29,840 --> 00:01:33,520
it's ridiculous and even as i've grown

00:01:32,320 --> 00:01:36,079
as a linux user

00:01:33,520 --> 00:01:37,439
i now no longer know what's going on on

00:01:36,079 --> 00:01:39,280
my own system

00:01:37,439 --> 00:01:40,479
so my instant messaging client here

00:01:39,280 --> 00:01:43,439
discord is

00:01:40,479 --> 00:01:45,680
13 processes and they all have

00:01:43,439 --> 00:01:46,960
ridiculous names that don't make any

00:01:45,680 --> 00:01:48,799
sense to anyone

00:01:46,960 --> 00:01:52,079
even if you have like a phd you still

00:01:48,799 --> 00:01:53,920
wouldn't know what any of this is

00:01:52,079 --> 00:01:55,119
so understanding what's going on is

00:01:53,920 --> 00:01:57,920
difficult just

00:01:55,119 --> 00:01:59,280
to see everything but it also means any

00:01:57,920 --> 00:02:02,000
aggregated resources

00:01:59,280 --> 00:02:02,560
are effectively meaningless if i look at

00:02:02,000 --> 00:02:05,280
in

00:02:02,560 --> 00:02:06,880
our power top and see which process is

00:02:05,280 --> 00:02:09,440
draining your cpu

00:02:06,880 --> 00:02:10,160
oh it's not chromium it's a web renderer

00:02:09,440 --> 00:02:12,959
like a

00:02:10,160 --> 00:02:14,239
sneaky disguise for chromium so we can't

00:02:12,959 --> 00:02:16,720
see what it is

00:02:14,239 --> 00:02:18,239
and the problem is it does fool people

00:02:16,720 --> 00:02:19,040
you can't be in control of your own

00:02:18,239 --> 00:02:21,440
system

00:02:19,040 --> 00:02:23,840
anymore and these stats are effectively

00:02:21,440 --> 00:02:23,840
meaningless

00:02:25,280 --> 00:02:28,800
the other problem we have i mentioned

00:02:27,120 --> 00:02:32,319
previously that instant messaging client

00:02:28,800 --> 00:02:35,360
was 13 different processes whereas

00:02:32,319 --> 00:02:36,879
creta just one process so

00:02:35,360 --> 00:02:39,200
you've got some intense graphical

00:02:36,879 --> 00:02:42,080
application and

00:02:39,200 --> 00:02:43,599
all a scheduler is going to see is 14

00:02:42,080 --> 00:02:47,280
processes

00:02:43,599 --> 00:02:49,519
so if it's 14 processes the scheduler

00:02:47,280 --> 00:02:51,840
trying to be fair is going to give each

00:02:49,519 --> 00:02:52,640
of them as much resources as they ask

00:02:51,840 --> 00:02:55,280
for

00:02:52,640 --> 00:02:56,319
evenly but evenly without the context of

00:02:55,280 --> 00:02:59,920
any metadata

00:02:56,319 --> 00:02:59,920
is in this case wrong

00:03:00,560 --> 00:03:04,640
there's also a situation of being fair

00:03:02,879 --> 00:03:06,080
between users because you've given

00:03:04,640 --> 00:03:07,440
between enterprise settings and a

00:03:06,080 --> 00:03:09,120
multi-seat environment where you have

00:03:07,440 --> 00:03:10,319
one physical machine and there's several

00:03:09,120 --> 00:03:12,000
users attached

00:03:10,319 --> 00:03:13,760
it doesn't make sense that one person's

00:03:12,000 --> 00:03:15,760
browser experience gets hampered

00:03:13,760 --> 00:03:17,840
because somebody else is running some

00:03:15,760 --> 00:03:20,000
intense matlab operation

00:03:17,840 --> 00:03:21,519
sucking all your cpu away it should be

00:03:20,000 --> 00:03:23,599
fair each user

00:03:21,519 --> 00:03:26,000
gets the same amount if they both try

00:03:23,599 --> 00:03:28,720
and request all of it

00:03:26,000 --> 00:03:29,360
or a similar situation your desktop's

00:03:28,720 --> 00:03:31,760
locking up

00:03:29,360 --> 00:03:32,799
you know something's going wrong ussh in

00:03:31,760 --> 00:03:35,120
to try and fix it

00:03:32,799 --> 00:03:36,159
your ssh terminal is hanging because all

00:03:35,120 --> 00:03:37,599
your cpu is

00:03:36,159 --> 00:03:39,200
sucked up by a thing you're trying to

00:03:37,599 --> 00:03:41,280
fix that's not

00:03:39,200 --> 00:03:42,319
it's trying to there's no concept of

00:03:41,280 --> 00:03:44,319
fairness

00:03:42,319 --> 00:03:45,360
with a new session that started it

00:03:44,319 --> 00:03:48,000
should have as much as

00:03:45,360 --> 00:03:51,120
resources as this session that's running

00:03:48,000 --> 00:03:51,120
if it tries to get them

00:03:51,920 --> 00:03:57,040
and as well as being fair it's difficult

00:03:55,200 --> 00:03:59,439
to try and

00:03:57,040 --> 00:04:00,560
discriminate things to be unfair to go

00:03:59,439 --> 00:04:03,280
the other way

00:04:00,560 --> 00:04:03,920
so currently we've got background

00:04:03,280 --> 00:04:05,040
services

00:04:03,920 --> 00:04:07,200
hanging in your background like with

00:04:05,040 --> 00:04:09,519
file indexes or backup solutions

00:04:07,200 --> 00:04:10,560
and you can run nice you can kind of

00:04:09,519 --> 00:04:12,720
suppress them down

00:04:10,560 --> 00:04:14,720
to an extent but only if that

00:04:12,720 --> 00:04:15,519
application itself has really opted in

00:04:14,720 --> 00:04:17,840
to do it

00:04:15,519 --> 00:04:19,440
or you go out with manually figuring all

00:04:17,840 --> 00:04:21,359
of the extra steps by hand which doesn't

00:04:19,440 --> 00:04:23,919
really work

00:04:21,359 --> 00:04:24,400
but it's impossible to elevate a process

00:04:23,919 --> 00:04:25,680
and you

00:04:24,400 --> 00:04:28,000
generally especially now with our

00:04:25,680 --> 00:04:29,520
compositors and weyland we want to keep

00:04:28,000 --> 00:04:31,919
your desktop responsive

00:04:29,520 --> 00:04:33,360
it's super important to keep your mouse

00:04:31,919 --> 00:04:35,120
moving smoothly

00:04:33,360 --> 00:04:37,120
and everything even if something else is

00:04:35,120 --> 00:04:39,680
happening on your system

00:04:37,120 --> 00:04:41,759
do you want to boost that but because

00:04:39,680 --> 00:04:45,280
nice is system wide

00:04:41,759 --> 00:04:47,440
you can't you can only drop niceness

00:04:45,280 --> 00:04:48,800
you can't raise it without additional

00:04:47,440 --> 00:04:50,720
permissions

00:04:48,800 --> 00:04:52,000
um because everything is relative to

00:04:50,720 --> 00:04:53,520
your whole system at once

00:04:52,000 --> 00:04:55,440
and you need to have elevated

00:04:53,520 --> 00:04:56,080
permissions which means it's not usable

00:04:55,440 --> 00:05:01,520
for us

00:04:56,080 --> 00:05:01,520
as a desktop so we need a solution

00:05:01,840 --> 00:05:06,639
and the solution is to use cgrips which

00:05:04,639 --> 00:05:09,039
is the kernel level feature to

00:05:06,639 --> 00:05:10,800
group processes together with systemd to

00:05:09,039 --> 00:05:15,280
configure all this stuff

00:05:10,800 --> 00:05:15,759
so c groups allows us to hierarchically

00:05:15,280 --> 00:05:18,639
order

00:05:15,759 --> 00:05:19,520
processes and allows us to put them into

00:05:18,639 --> 00:05:21,280
groups

00:05:19,520 --> 00:05:23,199
control groups that's where the name

00:05:21,280 --> 00:05:26,800
comes from cgroup

00:05:23,199 --> 00:05:28,320
and then we can all nicely hierarchy

00:05:26,800 --> 00:05:29,600
them and we know what's going on and we

00:05:28,320 --> 00:05:31,360
can actually figure out

00:05:29,600 --> 00:05:33,520
how how to configure it and we can

00:05:31,360 --> 00:05:34,720
configure it so we have lots of control

00:05:33,520 --> 00:05:37,759
controls available

00:05:34,720 --> 00:05:38,639
the most important for us are cpu io and

00:05:37,759 --> 00:05:40,880
memory

00:05:38,639 --> 00:05:42,800
but you could also imagine like a

00:05:40,880 --> 00:05:44,479
graphics memory controller later on

00:05:42,800 --> 00:05:45,759
which doesn't exist yet which would be

00:05:44,479 --> 00:05:48,479
very interesting

00:05:45,759 --> 00:05:49,680
to have um and then we have systemd

00:05:48,479 --> 00:05:51,840
which hides the details

00:05:49,680 --> 00:05:53,759
and configures it for us so if you look

00:05:51,840 --> 00:05:56,479
at like a hierarchy this is a hierarchy

00:05:53,759 --> 00:05:59,600
from a running gnome session basically

00:05:56,479 --> 00:06:01,759
um so what we have is that

00:05:59,600 --> 00:06:02,960
the system on on the system level things

00:06:01,759 --> 00:06:05,039
are

00:06:02,960 --> 00:06:07,199
split up as like user slice that all the

00:06:05,039 --> 00:06:07,759
user processes in it and user 1000 slice

00:06:07,199 --> 00:06:10,319
that's my

00:06:07,759 --> 00:06:11,199
the process of my user and user 1000

00:06:10,319 --> 00:06:14,319
service

00:06:11,199 --> 00:06:16,319
is the actually systemd service that

00:06:14,319 --> 00:06:18,080
manages all my processes and then

00:06:16,319 --> 00:06:21,039
underneath there

00:06:18,080 --> 00:06:22,639
the session slice um contains the

00:06:21,039 --> 00:06:24,560
important session processes and app

00:06:22,639 --> 00:06:26,720
slice will contain the applications

00:06:24,560 --> 00:06:28,319
in this case it's a terminal with a few

00:06:26,720 --> 00:06:30,000
sub processes and everything

00:06:28,319 --> 00:06:31,360
so you notice for example that gnome

00:06:30,000 --> 00:06:32,400
share whale and service is actually

00:06:31,360 --> 00:06:35,680
gnome shell

00:06:32,400 --> 00:06:37,280
it's and then it's also ibis like input

00:06:35,680 --> 00:06:38,319
method stuff all grouped together in one

00:06:37,280 --> 00:06:42,160
group

00:06:38,319 --> 00:06:44,560
um and then the c group controllers

00:06:42,160 --> 00:06:47,120
allows us to get more information and to

00:06:44,560 --> 00:06:49,680
set things up so the cpu controller is

00:06:47,120 --> 00:06:51,120
for cpu resources and it for example

00:06:49,680 --> 00:06:53,759
give you statistics for each c

00:06:51,120 --> 00:06:55,199
group it'll give you pressure

00:06:53,759 --> 00:06:56,240
information pressure stall information

00:06:55,199 --> 00:06:58,400
that means that

00:06:56,240 --> 00:06:59,919
the process is not actually doing

00:06:58,400 --> 00:07:02,000
anything because it's waiting for this

00:06:59,919 --> 00:07:05,520
resource to become available

00:07:02,000 --> 00:07:06,560
so if you have 16 processors running and

00:07:05,520 --> 00:07:09,120
for

00:07:06,560 --> 00:07:10,800
cores only then each one will only run

00:07:09,120 --> 00:07:11,759
25 percent of the time at maximum

00:07:10,800 --> 00:07:13,199
basically

00:07:11,759 --> 00:07:15,520
and you'll see that here that the

00:07:13,199 --> 00:07:16,560
processes are waiting and cpu weight

00:07:15,520 --> 00:07:18,319
allows you to

00:07:16,560 --> 00:07:20,080
configure the weight and prioritize

00:07:18,319 --> 00:07:22,479
parts of the process

00:07:20,080 --> 00:07:23,840
these processes configure to other or

00:07:22,479 --> 00:07:26,080
their cpu max

00:07:23,840 --> 00:07:28,160
configuring maximum and a lot more

00:07:26,080 --> 00:07:28,560
things if you want to know the details

00:07:28,160 --> 00:07:30,960
you

00:07:28,560 --> 00:07:33,120
can look into the secret v2

00:07:30,960 --> 00:07:36,800
documentation in the kernel

00:07:33,120 --> 00:07:38,319
um another important controller is io

00:07:36,800 --> 00:07:39,919
same thing there you get the statistics

00:07:38,319 --> 00:07:42,160
you get the pressure you get the weight

00:07:39,919 --> 00:07:43,599
you also have like a latency flag so the

00:07:42,160 --> 00:07:45,680
corner tries to guarantee

00:07:43,599 --> 00:07:49,120
low latencies but that's actually not

00:07:45,680 --> 00:07:51,360
non-trivial to use unfortunately

00:07:49,120 --> 00:07:52,960
also the i o controller while really

00:07:51,360 --> 00:07:53,520
important to keep the desktop smooth

00:07:52,960 --> 00:07:56,800
because

00:07:53,520 --> 00:07:59,520
quite often when the desktop is hanging

00:07:56,800 --> 00:08:00,879
it's waiting on on things to be loaded

00:07:59,520 --> 00:08:04,000
from disk

00:08:00,879 --> 00:08:06,080
so uh it would be very

00:08:04,000 --> 00:08:08,479
useful to have the i o controller fully

00:08:06,080 --> 00:08:11,440
working unfortunately

00:08:08,479 --> 00:08:12,720
as c groups are primarily developed for

00:08:11,440 --> 00:08:15,120
the

00:08:12,720 --> 00:08:15,840
data center and on top of battery fs

00:08:15,120 --> 00:08:17,919
right now

00:08:15,840 --> 00:08:19,599
to actually use these features you need

00:08:17,919 --> 00:08:21,360
to have a battery fs

00:08:19,599 --> 00:08:22,879
right on a partition on your disk you

00:08:21,360 --> 00:08:26,080
can't have like a looks volume in

00:08:22,879 --> 00:08:28,000
between or something like that um

00:08:26,080 --> 00:08:30,240
but if this works then you should get

00:08:28,000 --> 00:08:31,599
very good process separation process

00:08:30,240 --> 00:08:34,320
isolation

00:08:31,599 --> 00:08:36,240
uh between things and then you have also

00:08:34,320 --> 00:08:38,240
the memory controller memory is slightly

00:08:36,240 --> 00:08:40,959
different to others because

00:08:38,240 --> 00:08:42,159
you have one huge chunk of memory but

00:08:40,959 --> 00:08:44,800
you can't

00:08:42,159 --> 00:08:46,240
fairly like one process might use a lot

00:08:44,800 --> 00:08:48,320
another process might use little and

00:08:46,240 --> 00:08:50,000
things will change over time so it's a

00:08:48,320 --> 00:08:53,360
different thing to to

00:08:50,000 --> 00:08:54,640
distribute fairly um but you also get

00:08:53,360 --> 00:08:55,440
all the same information like the

00:08:54,640 --> 00:08:57,440
current

00:08:55,440 --> 00:08:58,880
memory consumption the statistics and

00:08:57,440 --> 00:09:00,720
the pressure information how often are

00:08:58,880 --> 00:09:02,880
you waiting for memory

00:09:00,720 --> 00:09:04,959
uh to be swapped in and direct back from

00:09:02,880 --> 00:09:06,519
disk the interesting part and something

00:09:04,959 --> 00:09:07,680
that i would like to point out is that

00:09:06,519 --> 00:09:10,240
memory.current

00:09:07,680 --> 00:09:11,120
so the current memory consumption of a c

00:09:10,240 --> 00:09:14,480
group

00:09:11,120 --> 00:09:17,760
actually contains all the

00:09:14,480 --> 00:09:19,440
uh caches so file caches are part of

00:09:17,760 --> 00:09:21,440
what a process needs to run

00:09:19,440 --> 00:09:23,120
so if you have like a process that i

00:09:21,440 --> 00:09:23,680
don't know reads a two gigabyte file at

00:09:23,120 --> 00:09:25,120
startup

00:09:23,680 --> 00:09:27,200
and that does nothing and just sits

00:09:25,120 --> 00:09:27,839
there and no other process needs the

00:09:27,200 --> 00:09:29,680
memory

00:09:27,839 --> 00:09:31,760
you will actually see memory current for

00:09:29,680 --> 00:09:33,040
this process to be above two gigabytes

00:09:31,760 --> 00:09:35,360
of memory because

00:09:33,040 --> 00:09:37,120
these memory is being used for the

00:09:35,360 --> 00:09:38,160
process right now even though it's not

00:09:37,120 --> 00:09:41,279
needed currently

00:09:38,160 --> 00:09:43,760
it's still there sitting in case the

00:09:41,279 --> 00:09:46,720
process needs it again

00:09:43,760 --> 00:09:48,480
um this is i'm pointing this out

00:09:46,720 --> 00:09:50,080
primarily because people are getting

00:09:48,480 --> 00:09:52,160
confused because memory is not

00:09:50,080 --> 00:09:53,680
just the heap the the allocations that

00:09:52,160 --> 00:09:56,959
you do but memory is

00:09:53,680 --> 00:10:00,399
everything from allocations to

00:09:56,959 --> 00:10:02,560
executables and libraries and also like

00:10:00,399 --> 00:10:04,000
shared stuff in between applications and

00:10:02,560 --> 00:10:05,760
then some of it will be swapped

00:10:04,000 --> 00:10:08,079
out some of what will be read back from

00:10:05,760 --> 00:10:10,399
disk when needed

00:10:08,079 --> 00:10:11,440
um so i was going to like show this a

00:10:10,399 --> 00:10:15,519
little bit

00:10:11,440 --> 00:10:15,519
just with the cpu with the

00:10:15,920 --> 00:10:21,120
entire screen hello what's going on now

00:10:21,680 --> 00:10:26,720
this worked before there

00:10:35,440 --> 00:10:40,079
there we go so what i have here is

00:10:38,160 --> 00:10:42,720
terminal tabs so

00:10:40,079 --> 00:10:43,839
gnome terminals already smart enough to

00:10:42,720 --> 00:10:46,800
place each tab

00:10:43,839 --> 00:10:48,000
into into a c group so what i i'm doing

00:10:46,800 --> 00:10:51,040
now is i'm running

00:10:48,000 --> 00:10:54,399
test which is stress energy

00:10:51,040 --> 00:10:58,399
burning cpu um and

00:10:54,399 --> 00:10:59,680
oops apparently i had it already enabled

00:10:58,399 --> 00:11:01,680
so

00:10:59,680 --> 00:11:03,519
if i do don't do anything what you'll

00:11:01,680 --> 00:11:06,160
see is that i have

00:11:03,519 --> 00:11:08,640
one process running in in one tab and

00:11:06,160 --> 00:11:11,839
two processes running in another tab

00:11:08,640 --> 00:11:13,519
so this is type one uh type test one is

00:11:11,839 --> 00:11:15,200
the first step the dash two is the

00:11:13,519 --> 00:11:17,600
second and you'll see that all of them

00:11:15,200 --> 00:11:19,519
get one third of a cpu core

00:11:17,600 --> 00:11:21,839
they are all pinned to the same score so

00:11:19,519 --> 00:11:24,640
it's 100 overall

00:11:21,839 --> 00:11:26,320
um so even though they are in different

00:11:24,640 --> 00:11:26,720
c groups they are still treated the same

00:11:26,320 --> 00:11:30,160
way

00:11:26,720 --> 00:11:31,680
between applications and now if i enable

00:11:30,160 --> 00:11:34,880
the cpu controller

00:11:31,680 --> 00:11:37,760
so i just enable the cpu controller for

00:11:34,880 --> 00:11:40,640
the subtree of the terminal

00:11:37,760 --> 00:11:42,480
what happens is that each tab will

00:11:40,640 --> 00:11:43,839
receive the same cpu amount as one tab

00:11:42,480 --> 00:11:46,800
is running one process

00:11:43,839 --> 00:11:48,720
this process will receive 50 and as the

00:11:46,800 --> 00:11:51,760
other one is running two processes

00:11:48,720 --> 00:11:53,519
it will each one will get about 25 and

00:11:51,760 --> 00:11:54,639
you can see this here very nicely test

00:11:53,519 --> 00:11:57,760
one

00:11:54,639 --> 00:11:59,200
is getting fifty percent test two is

00:11:57,760 --> 00:12:02,240
getting twenty five percent

00:11:59,200 --> 00:12:04,720
of cpu time and then we could

00:12:02,240 --> 00:12:06,959
even go further so if i look at the c

00:12:04,720 --> 00:12:06,959
group

00:12:08,839 --> 00:12:12,880
drop

00:12:10,240 --> 00:12:14,720
c group so i can i can read the cpu

00:12:12,880 --> 00:12:15,120
information for the for the process so i

00:12:14,720 --> 00:12:18,160
know

00:12:15,120 --> 00:12:19,760
in which person in which c group it is

00:12:18,160 --> 00:12:22,279
in which is the scope

00:12:19,760 --> 00:12:24,720
so now what i could do is i could even

00:12:22,279 --> 00:12:27,600
further uh prefer

00:12:24,720 --> 00:12:28,240
the test one process the c group in

00:12:27,600 --> 00:12:30,880
there so

00:12:28,240 --> 00:12:32,800
what i do is i echo 500 to cpu weight

00:12:30,880 --> 00:12:35,040
the default is 100 so this

00:12:32,800 --> 00:12:35,839
will now receive five times more cpu

00:12:35,040 --> 00:12:38,160
time than

00:12:35,839 --> 00:12:39,760
the test two processes together and

00:12:38,160 --> 00:12:43,040
you'll see that now it's

00:12:39,760 --> 00:12:44,399
eighty percent for test one and

00:12:43,040 --> 00:12:47,519
around like yeah eight point three

00:12:44,399 --> 00:12:49,200
percent okay this is stop being weird

00:12:47,519 --> 00:12:53,839
so you can see that we can change a lot

00:12:49,200 --> 00:12:53,839
of things and this way

00:12:54,000 --> 00:12:57,600
configure what's going on and actually

00:12:56,399 --> 00:13:01,120
distribute

00:12:57,600 --> 00:13:01,120
things in a more fairly manner

00:13:04,399 --> 00:13:08,320
okay so another thing that i wanted to

00:13:06,399 --> 00:13:08,720
mention is that facebook is doing a lot

00:13:08,320 --> 00:13:10,399
of

00:13:08,720 --> 00:13:12,800
development for their servers on on the

00:13:10,399 --> 00:13:16,480
c group stuff and they have now released

00:13:12,800 --> 00:13:17,360
a um demons demo demo tool like to test

00:13:16,480 --> 00:13:19,040
all the different features and

00:13:17,360 --> 00:13:22,079
everything and it will make sure that

00:13:19,040 --> 00:13:24,560
your system is configured correctly and

00:13:22,079 --> 00:13:26,639
to try it

00:13:24,560 --> 00:13:28,320
so as they are developing all the kernel

00:13:26,639 --> 00:13:30,079
features they

00:13:28,320 --> 00:13:32,480
also test obviously that it's working

00:13:30,079 --> 00:13:34,480
well and then they use it to separate

00:13:32,480 --> 00:13:38,160
the different services running on

00:13:34,480 --> 00:13:39,680
on the same server and this demo like

00:13:38,160 --> 00:13:40,880
check out the demo if you're really

00:13:39,680 --> 00:13:42,959
interested there's a lot of

00:13:40,880 --> 00:13:43,600
documentation there on how it all works

00:13:42,959 --> 00:13:46,800
and

00:13:43,600 --> 00:13:48,880
why it works so

00:13:46,800 --> 00:13:49,920
if you're interested this is a great way

00:13:48,880 --> 00:13:52,959
to learn more about c

00:13:49,920 --> 00:13:52,959
grips and how they are working

00:13:53,440 --> 00:13:58,000
um and then on the systemd side what we

00:13:56,720 --> 00:14:00,160
need is

00:13:58,000 --> 00:14:01,680
it to manage the c groups for us and it

00:14:00,160 --> 00:14:04,399
will sets all the attributes

00:14:01,680 --> 00:14:06,399
out so basically what we do is we simply

00:14:04,399 --> 00:14:09,199
use systemd

00:14:06,399 --> 00:14:11,279
and because it makes sense to do it the

00:14:09,199 --> 00:14:12,000
same way between cost desktop we

00:14:11,279 --> 00:14:14,959
actually

00:14:12,000 --> 00:14:16,000
created this graph specification uh it's

00:14:14,959 --> 00:14:17,760
still a draft there

00:14:16,000 --> 00:14:20,959
is probably going to be a few changes

00:14:17,760 --> 00:14:23,120
but the major things are scoped out so

00:14:20,959 --> 00:14:24,639
the idea is that we split the session

00:14:23,120 --> 00:14:25,519
into three parts which is the session

00:14:24,639 --> 00:14:26,959
slice

00:14:25,519 --> 00:14:29,760
the with all the very important

00:14:26,959 --> 00:14:32,000
processes that are critical for

00:14:29,760 --> 00:14:32,880
responsiveness and and can't easily be

00:14:32,000 --> 00:14:34,320
restarted

00:14:32,880 --> 00:14:36,480
app slice which is the bucket where

00:14:34,320 --> 00:14:38,800
everything else will go in by default

00:14:36,480 --> 00:14:41,440
and systemd actually just changed so it

00:14:38,800 --> 00:14:44,639
will actually go in there by default

00:14:41,440 --> 00:14:47,519
and then you have background slice where

00:14:44,639 --> 00:14:48,399
we want all the tasks to go that we can

00:14:47,519 --> 00:14:51,360
slow down

00:14:48,399 --> 00:14:53,519
to like crawling holes if in case this

00:14:51,360 --> 00:14:56,480
rest of the system needs resources

00:14:53,519 --> 00:14:58,240
and an important aspect here is that

00:14:56,480 --> 00:14:59,120
we're using systemd and what we are

00:14:58,240 --> 00:15:01,199
doing is

00:14:59,120 --> 00:15:02,959
encoding the application id into the

00:15:01,199 --> 00:15:05,920
system the unit name

00:15:02,959 --> 00:15:06,560
so we can from from the process grab

00:15:05,920 --> 00:15:08,880
wrap the c

00:15:06,560 --> 00:15:10,880
group name and then from that just

00:15:08,880 --> 00:15:13,920
extract the application id and now

00:15:10,880 --> 00:15:17,199
we know which application

00:15:13,920 --> 00:15:21,040
as something is belonging to

00:15:17,199 --> 00:15:22,720
the process so in terms of the current

00:15:21,040 --> 00:15:24,959
state and the role that we have

00:15:22,720 --> 00:15:27,360
within the desktops within gnome and

00:15:24,959 --> 00:15:29,759
within in plasma

00:15:27,360 --> 00:15:30,880
a situation where every time you launch

00:15:29,759 --> 00:15:32,320
an application now

00:15:30,880 --> 00:15:33,759
it gets put in its own c group and

00:15:32,320 --> 00:15:35,360
that's something we've had in plasma

00:15:33,759 --> 00:15:37,519
since 5.18

00:15:35,360 --> 00:15:39,360
uh no one's had it for a while as well

00:15:37,519 --> 00:15:40,240
and then the next step is surfacing this

00:15:39,360 --> 00:15:43,040
to your users

00:15:40,240 --> 00:15:43,600
so right now we're attaching putting

00:15:43,040 --> 00:15:45,759
things into c

00:15:43,600 --> 00:15:47,600
groups your kernel can make use of this

00:15:45,759 --> 00:15:49,120
information and that's already happening

00:15:47,600 --> 00:15:52,480
on your system right now if you're up to

00:15:49,120 --> 00:15:54,639
date and you should always be up to date

00:15:52,480 --> 00:15:56,320
but we're not really exposing everything

00:15:54,639 --> 00:15:59,759
that we can be exposing

00:15:56,320 --> 00:16:01,519
so far so in terms of exposing us

00:15:59,759 --> 00:16:03,199
one this classic example is system

00:16:01,519 --> 00:16:06,560
monitor so in

00:16:03,199 --> 00:16:08,160
kde plasma we had just a big list and we

00:16:06,560 --> 00:16:09,519
could turn it into a tree view but it's

00:16:08,160 --> 00:16:11,279
still just retrieve your

00:16:09,519 --> 00:16:12,800
processes which loses a bit of

00:16:11,279 --> 00:16:15,040
information

00:16:12,800 --> 00:16:16,000
and this is what we had before and this

00:16:15,040 --> 00:16:18,160
is what we're going to see

00:16:16,000 --> 00:16:19,040
coming up in the future where we see an

00:16:18,160 --> 00:16:21,120
application

00:16:19,040 --> 00:16:23,519
as one thing we can see aggregated

00:16:21,120 --> 00:16:26,560
resources that aggregate memory and cpu

00:16:23,519 --> 00:16:28,639
and disk usage and memory as well um

00:16:26,560 --> 00:16:29,839
but then we can drill down if we find we

00:16:28,639 --> 00:16:32,399
want to further

00:16:29,839 --> 00:16:34,079
so we talk is all this information and

00:16:32,399 --> 00:16:37,440
we can present this in a way that's

00:16:34,079 --> 00:16:40,880
really easy to consume no

00:16:37,440 --> 00:16:41,279
tried then yeah we tried so gnome

00:16:40,880 --> 00:16:43,040
actually

00:16:41,279 --> 00:16:44,639
had some heuristics like looking at the

00:16:43,040 --> 00:16:46,000
binary name figuring out

00:16:44,639 --> 00:16:48,560
trying to figure out which application

00:16:46,000 --> 00:16:50,240
it belongs to and and stuff like that

00:16:48,560 --> 00:16:51,839
uh but that wasn't really quite working

00:16:50,240 --> 00:16:52,880
if you look at this screenshot from

00:16:51,839 --> 00:16:55,199
before which is like

00:16:52,880 --> 00:16:56,560
system is like the catch all where if it

00:16:55,199 --> 00:16:57,440
can't tell where it belongs to it just

00:16:56,560 --> 00:16:59,920
drops it in there

00:16:57,440 --> 00:17:00,639
you see 3.4 gigabytes and then notice

00:16:59,920 --> 00:17:02,800
web the

00:17:00,639 --> 00:17:04,079
the you know web browser is using 560

00:17:02,800 --> 00:17:06,720
megabytes here

00:17:04,079 --> 00:17:08,160
um and then if we look at the next slide

00:17:06,720 --> 00:17:11,439
uh

00:17:08,160 --> 00:17:13,280
david thank you um

00:17:11,439 --> 00:17:14,480
what you'll see is that suddenly system

00:17:13,280 --> 00:17:17,439
is only using

00:17:14,480 --> 00:17:19,039
the 1.8 gigabytes and web is using 2.1

00:17:17,439 --> 00:17:19,520
gigabytes these are the same processes i

00:17:19,039 --> 00:17:21,280
just

00:17:19,520 --> 00:17:23,679
patched like the unpatched version and

00:17:21,280 --> 00:17:27,919
the non the patched version

00:17:23,679 --> 00:17:28,799
and so suddenly gnome is actually able

00:17:27,919 --> 00:17:31,919
to

00:17:28,799 --> 00:17:32,720
to act to better tell which memory what

00:17:31,919 --> 00:17:34,960
what process

00:17:32,720 --> 00:17:35,760
what application is using the memory and

00:17:34,960 --> 00:17:38,000
all it needs

00:17:35,760 --> 00:17:39,200
is looking at the bit figuring out which

00:17:38,000 --> 00:17:40,880
c group it belongs to and then

00:17:39,200 --> 00:17:42,480
extracting the name from that and using

00:17:40,880 --> 00:17:44,240
that instead

00:17:42,480 --> 00:17:45,600
yeah so it generally it's much more

00:17:44,240 --> 00:17:46,080
reliable because of sending all your

00:17:45,600 --> 00:17:47,600
data

00:17:46,080 --> 00:17:50,559
through your core and then we can read

00:17:47,600 --> 00:17:53,200
it so we are now lying you to you

00:17:50,559 --> 00:17:56,240
differently but the lies are better

00:17:53,200 --> 00:17:58,320
yeah so

00:17:56,240 --> 00:18:00,240
the next part of this as well as

00:17:58,320 --> 00:18:02,080
surfacing us in terms of

00:18:00,240 --> 00:18:04,640
viewing a stat we can also control

00:18:02,080 --> 00:18:06,640
things so one thing we want to land

00:18:04,640 --> 00:18:07,919
in plasma that's a very universal idea

00:18:06,640 --> 00:18:10,000
that i'm sure we're going to see

00:18:07,919 --> 00:18:11,360
known very soon as well it is concept of

00:18:10,000 --> 00:18:14,160
a foreground booster

00:18:11,360 --> 00:18:15,120
so typically if you are stressed for

00:18:14,160 --> 00:18:17,360
resources

00:18:15,120 --> 00:18:19,200
and your computer has to make a decision

00:18:17,360 --> 00:18:22,240
of what to prioritize

00:18:19,200 --> 00:18:24,080
your best thing is to prioritize the

00:18:22,240 --> 00:18:24,960
active application because that's where

00:18:24,080 --> 00:18:26,480
the user's

00:18:24,960 --> 00:18:28,480
looking that's where you're going to

00:18:26,480 --> 00:18:29,200
notice any slowdowns or glitches or

00:18:28,480 --> 00:18:31,280
anything

00:18:29,200 --> 00:18:32,960
and it's clearly where they're trying to

00:18:31,280 --> 00:18:36,240
divert their attention

00:18:32,960 --> 00:18:37,520
so it's become an incredibly tiny simple

00:18:36,240 --> 00:18:41,120
task now we have the c

00:18:37,520 --> 00:18:42,880
groups a tiny demon is literally just 50

00:18:41,120 --> 00:18:44,720
lines just watching for

00:18:42,880 --> 00:18:45,919
waters active window and when this

00:18:44,720 --> 00:18:48,720
happens we just

00:18:45,919 --> 00:18:49,280
adjust your weights and i said what we

00:18:48,720 --> 00:18:50,960
can do with c

00:18:49,280 --> 00:18:52,400
groups compared to what we could do of

00:18:50,960 --> 00:18:54,880
nice if we can move things

00:18:52,400 --> 00:18:56,240
up as well as down it now allows us to

00:18:54,880 --> 00:18:58,160
just boost things

00:18:56,240 --> 00:19:01,039
instead of just suppressing these

00:18:58,160 --> 00:19:01,039
background services

00:19:01,919 --> 00:19:05,600
so we can do a similar thing on on the

00:19:04,000 --> 00:19:06,080
system level for the user we already

00:19:05,600 --> 00:19:10,320
mentioned

00:19:06,080 --> 00:19:12,000
that we want to do uh uh discrete

00:19:10,320 --> 00:19:13,520
shared between users fairly and stuff

00:19:12,000 --> 00:19:15,840
like that um

00:19:13,520 --> 00:19:18,080
so so i looked into your resource d

00:19:15,840 --> 00:19:20,000
which was also the idea of

00:19:18,080 --> 00:19:21,120
uh keeping your desktop responsive so

00:19:20,000 --> 00:19:22,799
the idea is that we

00:19:21,120 --> 00:19:25,280
first of all enable all the resource

00:19:22,799 --> 00:19:26,880
control features because right now gnome

00:19:25,280 --> 00:19:28,640
currently just

00:19:26,880 --> 00:19:31,520
uses the hierarchy uses c groups but

00:19:28,640 --> 00:19:34,080
doesn't actually enable all the features

00:19:31,520 --> 00:19:35,840
but then furthermore it makes sense to

00:19:34,080 --> 00:19:36,400
prefer the currently active user who has

00:19:35,840 --> 00:19:38,400
a great

00:19:36,400 --> 00:19:39,919
graphical session so if you have a mouse

00:19:38,400 --> 00:19:41,440
moving around it should be smooth all

00:19:39,919 --> 00:19:44,240
the time

00:19:41,440 --> 00:19:45,200
and to that and the idea is that we also

00:19:44,240 --> 00:19:47,200
give

00:19:45,200 --> 00:19:48,400
memory guarantees to this user and

00:19:47,200 --> 00:19:52,240
reduce the important

00:19:48,400 --> 00:19:55,360
session processes so what your

00:19:52,240 --> 00:19:57,039
users d just by simply installing it

00:19:55,360 --> 00:19:58,640
effectively does is that all your

00:19:57,039 --> 00:20:01,440
applications are going to be treated

00:19:58,640 --> 00:20:02,720
as equals because it will just enable

00:20:01,440 --> 00:20:04,640
the

00:20:02,720 --> 00:20:06,240
the c group controller by setting the

00:20:04,640 --> 00:20:08,640
appropriate systemd

00:20:06,240 --> 00:20:10,080
configuration option just using a

00:20:08,640 --> 00:20:11,840
drop-in configuration

00:20:10,080 --> 00:20:14,000
so if you have like a parallel compile

00:20:11,840 --> 00:20:16,000
job in one terminal window and then a

00:20:14,000 --> 00:20:18,799
single browser tab like the

00:20:16,000 --> 00:20:21,440
videos call here the video call will

00:20:18,799 --> 00:20:24,480
still get a lot of cpu time and

00:20:21,440 --> 00:20:27,360
can basically use a full uh

00:20:24,480 --> 00:20:29,039
full cpu core for its purpose and you

00:20:27,360 --> 00:20:32,880
also get like for

00:20:29,039 --> 00:20:35,039
protection effectively and

00:20:32,880 --> 00:20:36,799
so so what we do what your research d

00:20:35,039 --> 00:20:38,400
does is a tiny daemon that

00:20:36,799 --> 00:20:40,799
sits in the background and all it does

00:20:38,400 --> 00:20:42,240
is look at which user is currently

00:20:40,799 --> 00:20:45,280
active on a graphical

00:20:42,240 --> 00:20:49,360
login and this user

00:20:45,280 --> 00:20:51,520
will then will then receive a share of

00:20:49,360 --> 00:20:52,960
of memory that is guaranteed for it so

00:20:51,520 --> 00:20:54,640
it can actually

00:20:52,960 --> 00:20:56,559
right now it's like 250 megabytes by

00:20:54,640 --> 00:20:56,799
default so 250 megabytes share of memory

00:20:56,559 --> 00:20:58,559
is

00:20:56,799 --> 00:21:00,559
passed to the user and this is then

00:20:58,559 --> 00:21:04,480
passed to the important

00:21:00,559 --> 00:21:06,880
session processes and so if an ssh

00:21:04,480 --> 00:21:08,480
user comes in and runs their simulation

00:21:06,880 --> 00:21:09,520
obviously not using matlab but using

00:21:08,480 --> 00:21:12,720
numpy and

00:21:09,520 --> 00:21:14,640
scipy then it will not slow down the

00:21:12,720 --> 00:21:17,679
rest of the system

00:21:14,640 --> 00:21:20,320
and the graphical user

00:21:17,679 --> 00:21:21,039
uh so effectively what we can achieve is

00:21:20,320 --> 00:21:22,880
there's some

00:21:21,039 --> 00:21:25,039
protection of the session from threshing

00:21:22,880 --> 00:21:26,679
because with digital memory guarantees

00:21:25,039 --> 00:21:29,600
it should at least have some

00:21:26,679 --> 00:21:32,400
responsiveness left

00:21:29,600 --> 00:21:34,559
and this compensator receives also a

00:21:32,400 --> 00:21:36,880
greater cpu share and

00:21:34,559 --> 00:21:38,480
and this way all the important services

00:21:36,880 --> 00:21:40,240
or everything should

00:21:38,480 --> 00:21:42,159
stay reasonably responsive and most

00:21:40,240 --> 00:21:44,400
times

00:21:42,159 --> 00:21:46,400
so it's a very simple piece of code

00:21:44,400 --> 00:21:48,559
really that's it's the most policy demon

00:21:46,400 --> 00:21:50,640
and system the unit configurations

00:21:48,559 --> 00:21:51,840
we have rolled it out in fedora 33 by

00:21:50,640 --> 00:21:55,039
default now

00:21:51,840 --> 00:21:56,960
so you get it there out of the box and

00:21:55,039 --> 00:21:58,080
elsewhere i'm not sure if anyone else

00:21:56,960 --> 00:22:00,000
has picked it up but

00:21:58,080 --> 00:22:02,640
you can also just check it out on gitlab

00:22:00,000 --> 00:22:05,520
um your resource d if you look for it

00:22:02,640 --> 00:22:05,520
under my username

00:22:08,960 --> 00:22:13,760
again so what does this mean for you as

00:22:11,840 --> 00:22:15,440
an application developer we're here at

00:22:13,760 --> 00:22:18,240
laz

00:22:15,440 --> 00:22:19,840
so most of you hopefully are application

00:22:18,240 --> 00:22:21,440
developers

00:22:19,840 --> 00:22:23,520
trying to make all applications work

00:22:21,440 --> 00:22:25,360
excellently on linux

00:22:23,520 --> 00:22:28,000
so we're talking from a desktop point of

00:22:25,360 --> 00:22:29,360
view and

00:22:28,000 --> 00:22:31,520
generally if you're an application

00:22:29,360 --> 00:22:33,919
developer you don't need to do

00:22:31,520 --> 00:22:34,720
anything because it's the application

00:22:33,919 --> 00:22:38,000
it's a desktop

00:22:34,720 --> 00:22:40,000
itself that when you open

00:22:38,000 --> 00:22:42,960
your um an application from the start

00:22:40,000 --> 00:22:45,039
menu or whatever your name equivalent is

00:22:42,960 --> 00:22:47,200
it should have a job of putting it in a

00:22:45,039 --> 00:22:48,240
c group adding in metadata typing

00:22:47,200 --> 00:22:49,760
everything

00:22:48,240 --> 00:22:52,400
so you generally don't need to do

00:22:49,760 --> 00:22:54,240
anything but there is a case where

00:22:52,400 --> 00:22:55,919
applications then launch other

00:22:54,240 --> 00:22:59,120
applications so

00:22:55,919 --> 00:23:00,720
if you open a link in your application

00:22:59,120 --> 00:23:02,720
you're opening a link

00:23:00,720 --> 00:23:04,400
or if you're creating your own file

00:23:02,720 --> 00:23:07,280
browser from scratch because you don't

00:23:04,400 --> 00:23:09,280
like the ones we provide

00:23:07,280 --> 00:23:10,400
then obviously when you click on a file

00:23:09,280 --> 00:23:11,919
it's going to open a whole new

00:23:10,400 --> 00:23:13,919
application

00:23:11,919 --> 00:23:15,039
so from your point of view as an

00:23:13,919 --> 00:23:16,240
application developer

00:23:15,039 --> 00:23:18,720
the important part is to use the

00:23:16,240 --> 00:23:22,000
relevant high-level api that we get

00:23:18,720 --> 00:23:24,640
from the form

00:23:22,000 --> 00:23:26,880
so from kde that's open url job or

00:23:24,640 --> 00:23:29,600
application launch job and this takes

00:23:26,880 --> 00:23:30,240
care of all of these details under hood

00:23:29,600 --> 00:23:33,200
for no

00:23:30,240 --> 00:23:35,840
that's g app info launch your eyes or

00:23:33,200 --> 00:23:37,120
this other one

00:23:35,840 --> 00:23:39,360
that will take care of all of the

00:23:37,120 --> 00:23:39,840
details if you're running inside a flat

00:23:39,360 --> 00:23:41,440
pack

00:23:39,840 --> 00:23:43,600
you're going to need to use a relevant

00:23:41,440 --> 00:23:44,960
portal api anyway because otherwise

00:23:43,600 --> 00:23:47,200
nothing's going to work

00:23:44,960 --> 00:23:49,360
and if you use a relevant portal api

00:23:47,200 --> 00:23:50,960
again all of this will be taken care of

00:23:49,360 --> 00:23:52,799
under your hood and you won't need to

00:23:50,960 --> 00:23:55,919
worry about it

00:23:52,799 --> 00:23:57,120
it's a dream but you still have all the

00:23:55,919 --> 00:23:58,960
options available

00:23:57,120 --> 00:24:04,159
so we can capitalize on everything as a

00:23:58,960 --> 00:24:07,919
desktop but you as a service can as well

00:24:04,159 --> 00:24:08,880
so um let's just give give a few simple

00:24:07,919 --> 00:24:11,520
examples

00:24:08,880 --> 00:24:13,200
and and some views so usually right now

00:24:11,520 --> 00:24:16,320
if you if you have a service that

00:24:13,200 --> 00:24:17,600
starts at login you might uh ship in xdg

00:24:16,320 --> 00:24:19,919
out to start file and that's

00:24:17,600 --> 00:24:21,440
actually still fine to do in general but

00:24:19,919 --> 00:24:22,159
if you want to get more control over

00:24:21,440 --> 00:24:24,559
this

00:24:22,159 --> 00:24:25,840
the way to go is to use dbus activation

00:24:24,559 --> 00:24:27,760
probably so

00:24:25,840 --> 00:24:29,440
the best way what you can do is you ship

00:24:27,760 --> 00:24:30,640
a debuff service instead you activate

00:24:29,440 --> 00:24:34,240
that debuff service

00:24:30,640 --> 00:24:37,279
and then dbus uh you can configure it to

00:24:34,240 --> 00:24:39,120
start a systemd service unit uh in order

00:24:37,279 --> 00:24:40,799
to run the debug service

00:24:39,120 --> 00:24:42,240
so at that point you have a system the

00:24:40,799 --> 00:24:43,120
unit file that you can write and that

00:24:42,240 --> 00:24:44,400
you can provide

00:24:43,120 --> 00:24:46,480
so you can simply dump in all the

00:24:44,400 --> 00:24:48,640
information and you can configure it as

00:24:46,480 --> 00:24:50,640
much as you like

00:24:48,640 --> 00:24:52,559
while getting all the different features

00:24:50,640 --> 00:24:53,600
that systemd has that the resource

00:24:52,559 --> 00:24:55,600
configuration has

00:24:53,600 --> 00:24:57,440
and improving your integration into the

00:24:55,600 --> 00:25:00,720
desktop

00:24:57,440 --> 00:25:03,039
so this is like a very good way of

00:25:00,720 --> 00:25:04,640
of being able to leverage the features

00:25:03,039 --> 00:25:05,760
just run everything inside the systemd

00:25:04,640 --> 00:25:08,080
service

00:25:05,760 --> 00:25:10,000
as much as possible and then there you

00:25:08,080 --> 00:25:11,039
can set the for example the systemd

00:25:10,000 --> 00:25:13,840
slice

00:25:11,039 --> 00:25:14,400
the set custom resource limit or also

00:25:13,840 --> 00:25:16,559
restrict

00:25:14,400 --> 00:25:18,159
access to system resources and other

00:25:16,559 --> 00:25:20,000
things like you could prevent

00:25:18,159 --> 00:25:21,279
your application from running fork for

00:25:20,000 --> 00:25:24,799
example

00:25:21,279 --> 00:25:26,480
so um a simple example might be like a

00:25:24,799 --> 00:25:28,000
backup application which should run in

00:25:26,480 --> 00:25:29,919
the background it should never slow

00:25:28,000 --> 00:25:31,120
down other applications that are running

00:25:29,919 --> 00:25:34,159
on the system so

00:25:31,120 --> 00:25:36,480
you want to make the the desktop aware

00:25:34,159 --> 00:25:38,000
of this background service running so

00:25:36,480 --> 00:25:40,400
this is why we want to place it into

00:25:38,000 --> 00:25:42,000
background slice

00:25:40,400 --> 00:25:43,840
and you also want to make sure that it's

00:25:42,000 --> 00:25:46,720
not hitting the disk too much

00:25:43,840 --> 00:25:48,000
or preventing other applications from

00:25:46,720 --> 00:25:49,360
from

00:25:48,000 --> 00:25:51,840
having the files and memory that they

00:25:49,360 --> 00:25:54,159
need so the way to do is

00:25:51,840 --> 00:25:56,080
as i said before you just put create a

00:25:54,159 --> 00:25:57,279
debug service just only for the backup

00:25:56,080 --> 00:25:59,440
job itself

00:25:57,279 --> 00:26:01,200
and you put it into or you could also

00:25:59,440 --> 00:26:02,000
put it into transient scope which is a

00:26:01,200 --> 00:26:03,840
different way

00:26:02,000 --> 00:26:06,000
which is probably more complicated to do

00:26:03,840 --> 00:26:08,080
really and

00:26:06,000 --> 00:26:10,799
then you configure this service by

00:26:08,080 --> 00:26:14,320
setting the slice to background slice so

00:26:10,799 --> 00:26:17,440
we tell that it's running in the system

00:26:14,320 --> 00:26:18,880
in the background so the norm the the

00:26:17,440 --> 00:26:20,960
shell knows what's going on

00:26:18,880 --> 00:26:22,880
the desktop and then what you would also

00:26:20,960 --> 00:26:24,880
do is set memory high to

00:26:22,880 --> 00:26:26,960
a relatively low value and memory high

00:26:24,880 --> 00:26:30,000
as i explained earlier

00:26:26,960 --> 00:26:33,600
also contains file caches so

00:26:30,000 --> 00:26:35,279
that means you effectively engage the

00:26:33,600 --> 00:26:36,559
process to a pretty small amount of

00:26:35,279 --> 00:26:38,240
memory on the system

00:26:36,559 --> 00:26:40,480
but you also make sure that all the file

00:26:38,240 --> 00:26:44,559
caches that anything else might need

00:26:40,480 --> 00:26:46,159
will remain cached and

00:26:44,559 --> 00:26:47,840
and all the other processes won't be

00:26:46,159 --> 00:26:49,760
inhibited and

00:26:47,840 --> 00:26:51,200
another scenario would be the terminal

00:26:49,760 --> 00:26:54,080
application or also like

00:26:51,200 --> 00:26:56,240
a browser might be similar kind of thing

00:26:54,080 --> 00:26:58,240
where you want each terminal window each

00:26:56,240 --> 00:27:00,159
tab to be treated equally

00:26:58,240 --> 00:27:01,279
and this is this is the demonstration

00:27:00,159 --> 00:27:03,039
that i did where

00:27:01,279 --> 00:27:05,039
in gram terminal it's already possible

00:27:03,039 --> 00:27:09,039
to do by doing a very

00:27:05,039 --> 00:27:11,520
simple drop-in configuration uh

00:27:09,039 --> 00:27:12,799
so so in that case what you would do is

00:27:11,520 --> 00:27:14,640
you would spawn your

00:27:12,799 --> 00:27:16,799
sub process and you would create a

00:27:14,640 --> 00:27:18,720
transient scope for

00:27:16,799 --> 00:27:21,039
on systemd so you tell systemd all right

00:27:18,720 --> 00:27:24,000
this this new process is actually

00:27:21,039 --> 00:27:25,279
its own group and you move it over and

00:27:24,000 --> 00:27:28,480
then

00:27:25,279 --> 00:27:30,399
by doing this uh you can also configure

00:27:28,480 --> 00:27:32,240
it using a drop in so the user can say

00:27:30,399 --> 00:27:34,480
tell systemd to configure it if they

00:27:32,240 --> 00:27:37,840
wanted to just by using

00:27:34,480 --> 00:27:41,200
by matching on the name basically so vte

00:27:37,840 --> 00:27:43,440
gnome terminal calls it vte-spawn dash

00:27:41,200 --> 00:27:45,600
something and then we can configure

00:27:43,440 --> 00:27:46,480
everything that starts with vte-spawn

00:27:45,600 --> 00:27:49,600
dash

00:27:46,480 --> 00:27:51,200
to uh to change its attributes so an

00:27:49,600 --> 00:27:54,159
example might be that you

00:27:51,200 --> 00:27:55,279
put it into slice app dash org my

00:27:54,159 --> 00:27:58,240
terminal so

00:27:55,279 --> 00:27:59,520
app is the prefix so we order it

00:27:58,240 --> 00:28:02,399
hierarchically underneath

00:27:59,520 --> 00:28:04,480
app.slice this is how systemd does it so

00:28:02,399 --> 00:28:07,440
the dash is actually like the hierarchy

00:28:04,480 --> 00:28:09,080
so you get app and then app app.slice

00:28:07,440 --> 00:28:12,000
and then underneath

00:28:09,080 --> 00:28:14,399
app.org my terminal slice

00:28:12,000 --> 00:28:15,679
so we have a hierarchy there and we are

00:28:14,399 --> 00:28:17,600
telling the

00:28:15,679 --> 00:28:19,760
desktop that this is actually belonging

00:28:17,600 --> 00:28:22,080
to my terminal

00:28:19,760 --> 00:28:23,600
and then kill mode in this case would

00:28:22,080 --> 00:28:25,840
set process because

00:28:23,600 --> 00:28:27,200
if you close a tab you could you have

00:28:25,840 --> 00:28:28,559
now have the choice do you want to kill

00:28:27,200 --> 00:28:29,279
all the processes that are inside the

00:28:28,559 --> 00:28:32,000
tab

00:28:29,279 --> 00:28:32,880
or do you want to leave the process

00:28:32,000 --> 00:28:34,640
running and just

00:28:32,880 --> 00:28:36,960
kill the main person that you initially

00:28:34,640 --> 00:28:38,480
started and this is what we show issues

00:28:36,960 --> 00:28:39,679
here is that we only call the main

00:28:38,480 --> 00:28:41,679
process because

00:28:39,679 --> 00:28:43,200
people usually expects that expect

00:28:41,679 --> 00:28:44,000
things like screen to keep continue

00:28:43,200 --> 00:28:46,159
running

00:28:44,000 --> 00:28:47,919
and then if you just enable cpu weight

00:28:46,159 --> 00:28:50,159
and ao weight to 100

00:28:47,919 --> 00:28:52,320
which is the default value you get the

00:28:50,159 --> 00:28:54,080
effect that i showed earlier that

00:28:52,320 --> 00:28:58,720
the resources are distributed evenly

00:28:54,080 --> 00:29:00,640
between the tabs

00:28:58,720 --> 00:29:02,080
it's quite a lot of extra content i can

00:29:00,640 --> 00:29:02,799
see already seen the questions people

00:29:02,080 --> 00:29:04,480
are going

00:29:02,799 --> 00:29:06,559
oh what are the specific things i need

00:29:04,480 --> 00:29:08,399
to learn um

00:29:06,559 --> 00:29:11,120
obviously there's quite a lot to say but

00:29:08,399 --> 00:29:13,360
we can just give you links instead for

00:29:11,120 --> 00:29:14,880
either this so it is a specification

00:29:13,360 --> 00:29:16,399
this is a cross desktop standard that

00:29:14,880 --> 00:29:19,440
we're working on because

00:29:16,399 --> 00:29:21,679
it is important now we all use the same

00:29:19,440 --> 00:29:22,559
naming scheme for our slices and all

00:29:21,679 --> 00:29:25,600
naming scheme

00:29:22,559 --> 00:29:27,039
for how we refer to different fmc groups

00:29:25,600 --> 00:29:28,399
particularly if we're trying to retrieve

00:29:27,039 --> 00:29:30,799
information from that

00:29:28,399 --> 00:29:31,679
so upstream specification is still a

00:29:30,799 --> 00:29:33,600
draft but

00:29:31,679 --> 00:29:35,279
it's mostly what you should be working

00:29:33,600 --> 00:29:37,279
against

00:29:35,279 --> 00:29:39,440
i've also put a comprehensive list of

00:29:37,279 --> 00:29:41,600
code examples of how to

00:29:39,440 --> 00:29:43,279
use this application i mentioned a high

00:29:41,600 --> 00:29:44,720
level api earlier which

00:29:43,279 --> 00:29:47,279
you're probably going to want to use

00:29:44,720 --> 00:29:50,000
anyway but i've also put in low level

00:29:47,279 --> 00:29:51,440
examples that work with straight up c

00:29:50,000 --> 00:29:53,919
straight up g live

00:29:51,440 --> 00:29:54,480
even just a bash version as well or

00:29:53,919 --> 00:29:56,960
basically

00:29:54,480 --> 00:29:57,919
how to approach all the different stats

00:29:56,960 --> 00:30:00,480
layers of your stack

00:29:57,919 --> 00:30:02,000
and how you can do this obviously this

00:30:00,480 --> 00:30:03,840
isn't the best place for it just being

00:30:02,000 --> 00:30:05,679
on a random

00:30:03,840 --> 00:30:09,360
just but we need to come up with a way

00:30:05,679 --> 00:30:11,440
of coordinating our documentation also

00:30:09,360 --> 00:30:13,360
as mentioned it's something we've both

00:30:11,440 --> 00:30:15,279
been doing on our different sides

00:30:13,360 --> 00:30:17,279
uh ben did a talk at guadalajara i did

00:30:15,279 --> 00:30:19,200
talk at academy ben also did a talk at

00:30:17,279 --> 00:30:20,000
linux plumbers talking to kernel people

00:30:19,200 --> 00:30:22,720
about

00:30:20,000 --> 00:30:23,200
how actually using the features they did

00:30:22,720 --> 00:30:26,000
um

00:30:23,200 --> 00:30:27,440
so if you want to see the same talk

00:30:26,000 --> 00:30:30,399
again but with more of a

00:30:27,440 --> 00:30:32,880
twist towards a specific part um there's

00:30:30,399 --> 00:30:34,559
some relevant links here

00:30:32,880 --> 00:30:36,399
so thanks for listening if anyone's got

00:30:34,559 --> 00:30:37,200
any questions and i can see what people

00:30:36,399 --> 00:30:40,480
do

00:30:37,200 --> 00:30:42,080
and we're happy to go through them

00:30:40,480 --> 00:30:44,080
so the first question is if an

00:30:42,080 --> 00:30:46,640
application starts another application

00:30:44,080 --> 00:30:48,240
it should have its own slice properly i

00:30:46,640 --> 00:30:49,360
guess this needs additional work by the

00:30:48,240 --> 00:30:52,159
first application

00:30:49,360 --> 00:30:52,960
so yes this was what we were going into

00:30:52,159 --> 00:30:55,600
earlier

00:30:52,960 --> 00:30:56,960
you in the usual case you just use the

00:30:55,600 --> 00:30:58,799
high-level apis and

00:30:56,960 --> 00:31:00,000
the desktop will do the same the right

00:30:58,799 --> 00:31:02,799
thing for you

00:31:00,000 --> 00:31:04,640
with with g-lib and gnome right now the

00:31:02,799 --> 00:31:06,880
patches are currently still pending

00:31:04,640 --> 00:31:08,880
review but it's going to happen so if

00:31:06,880 --> 00:31:10,960
you use the high level application

00:31:08,880 --> 00:31:13,279
apis to launch application or to launch

00:31:10,960 --> 00:31:16,720
urls the right thing will happen

00:31:13,279 --> 00:31:17,200
if you spawn like use the low level apis

00:31:16,720 --> 00:31:20,960
to

00:31:17,200 --> 00:31:22,399
to launch something uh a larger process

00:31:20,960 --> 00:31:23,600
that you want to encapsulate then you

00:31:22,399 --> 00:31:25,200
will need to do extra work

00:31:23,600 --> 00:31:28,080
and you'll need to do some stuff

00:31:25,200 --> 00:31:30,000
yourself but like one of the tricks that

00:31:28,080 --> 00:31:32,720
to work around this is you use dbs

00:31:30,000 --> 00:31:34,480
activation for this part um

00:31:32,720 --> 00:31:37,919
so that's a good way of avoiding having

00:31:34,480 --> 00:31:39,760
to deal with uh the lower level stuff

00:31:37,919 --> 00:31:41,120
and the second question what indicates

00:31:39,760 --> 00:31:43,200
accountants application developers

00:31:41,120 --> 00:31:44,720
basically the same thing again it's

00:31:43,200 --> 00:31:46,399
you want to be using a high level apis

00:31:44,720 --> 00:31:48,640
anyway because it's important details

00:31:46,399 --> 00:31:49,600
like startup ids for window management

00:31:48,640 --> 00:31:52,640
purposes that

00:31:49,600 --> 00:31:54,399
it's best to use regardless um is there

00:31:52,640 --> 00:31:55,360
a timeline for just being enabled in

00:31:54,399 --> 00:31:56,960
norman kde

00:31:55,360 --> 00:31:58,799
as i mentioned before in terms of

00:31:56,960 --> 00:32:00,960
actually

00:31:58,799 --> 00:32:02,159
applying the c groups we've both have

00:32:00,960 --> 00:32:04,559
this enabled already

00:32:02,159 --> 00:32:06,799
and it's from the outside okay decide it

00:32:04,559 --> 00:32:09,519
just ideally do a silent roll out

00:32:06,799 --> 00:32:10,480
that won't break anything it just tags

00:32:09,519 --> 00:32:12,640
things and

00:32:10,480 --> 00:32:14,000
we've left all your weights the same so

00:32:12,640 --> 00:32:16,799
it'll be some subtle

00:32:14,000 --> 00:32:18,080
uh changes to resource management at a

00:32:16,799 --> 00:32:19,679
kernel level but

00:32:18,080 --> 00:32:21,279
there's nothing that should break a user

00:32:19,679 --> 00:32:23,120
experience and it'll just

00:32:21,279 --> 00:32:26,080
slowly keep adding a different parts on

00:32:23,120 --> 00:32:30,080
top as we can make more reliance on

00:32:26,080 --> 00:32:31,919
fixing these tiny edge cases from is

00:32:30,080 --> 00:32:33,360
from the fact that uh not everything is

00:32:31,919 --> 00:32:36,399
being spawned correctly

00:32:33,360 --> 00:32:38,720
with the part above so exactly so

00:32:36,399 --> 00:32:40,640
like for example in gnome right now uh

00:32:38,720 --> 00:32:42,000
the fire browser because the g-loop apis

00:32:40,640 --> 00:32:44,480
aren't merged yet the file

00:32:42,000 --> 00:32:45,760
browser will actually not if you if you

00:32:44,480 --> 00:32:48,880
launch a like

00:32:45,760 --> 00:32:50,559
a pdf viewer in using naturals

00:32:48,880 --> 00:32:53,039
in gnome then it will be accounted to

00:32:50,559 --> 00:32:55,679
nautilus right now

00:32:53,039 --> 00:32:56,399
so these kind of things kind of makes it

00:32:55,679 --> 00:32:58,240
not

00:32:56,399 --> 00:32:59,679
sub optimal to enable all the features

00:32:58,240 --> 00:33:01,279
right now we actually

00:32:59,679 --> 00:33:03,679
some sometimes it's enabled like on

00:33:01,279 --> 00:33:06,480
fedora 33 it will be enabled

00:33:03,679 --> 00:33:08,240
um for gnome for kde not yet because the

00:33:06,480 --> 00:33:11,440
systemd work hasn't been

00:33:08,240 --> 00:33:14,559
there is not there yet in in fedora uh

00:33:11,440 --> 00:33:15,440
but and on other distributions it will

00:33:14,559 --> 00:33:17,120
not be enabled

00:33:15,440 --> 00:33:19,200
and also there's a lot of ongoing

00:33:17,120 --> 00:33:19,760
development with regard to om killing

00:33:19,200 --> 00:33:21,519
and

00:33:19,760 --> 00:33:23,919
other parts of the resource control

00:33:21,519 --> 00:33:24,640
problem so you'll see a lot of changes

00:33:23,919 --> 00:33:26,880
coming up

00:33:24,640 --> 00:33:28,320
in the next one or two years i would say

00:33:26,880 --> 00:33:28,640
yeah but i i don't think it's going to

00:33:28,320 --> 00:33:31,279
be a

00:33:28,640 --> 00:33:32,399
definitive it's on or it's off it'll be

00:33:31,279 --> 00:33:34,080
as gradual

00:33:32,399 --> 00:33:35,760
or we're going to rely on this for this

00:33:34,080 --> 00:33:36,880
feature or it's going to be a fallback

00:33:35,760 --> 00:33:38,559
heuristic for this

00:33:36,880 --> 00:33:40,720
or it's going to be used here and we'll

00:33:38,559 --> 00:33:43,440
just see these tiny little parts come

00:33:40,720 --> 00:33:43,760
over time there might also be changes

00:33:43,440 --> 00:33:45,440
for

00:33:43,760 --> 00:33:47,519
for application developers with like

00:33:45,440 --> 00:33:50,559
systemdo md where you can say

00:33:47,519 --> 00:33:52,000
then say uh if my application is waiting

00:33:50,559 --> 00:33:55,679
a lot for io please kill

00:33:52,000 --> 00:33:58,799
it um yeah

00:33:55,679 --> 00:34:00,559
in terms of phone devices the resources

00:33:58,799 --> 00:34:03,679
are even more strained there so

00:34:00,559 --> 00:34:06,880
this absolutely applies basically it's

00:34:03,679 --> 00:34:09,040
almost more important another thing that

00:34:06,880 --> 00:34:09,919
secrets provide which we've not

00:34:09,040 --> 00:34:12,240
mentioned yet

00:34:09,919 --> 00:34:14,079
is is another controller called the

00:34:12,240 --> 00:34:17,200
freezer controller

00:34:14,079 --> 00:34:18,480
um which allows you to just stop an

00:34:17,200 --> 00:34:21,280
entire application

00:34:18,480 --> 00:34:21,839
at once and compared with six stop it

00:34:21,280 --> 00:34:24,320
what

00:34:21,839 --> 00:34:25,919
it fixes a couple of bugs that um you

00:34:24,320 --> 00:34:28,159
just can't

00:34:25,919 --> 00:34:29,040
your application is unable to prevent

00:34:28,159 --> 00:34:31,040
being frozen

00:34:29,040 --> 00:34:32,320
the control group can just freeze it so

00:34:31,040 --> 00:34:34,480
it's not something we can use

00:34:32,320 --> 00:34:36,159
right now but it's something that in the

00:34:34,480 --> 00:34:37,599
future could be really really cool and

00:34:36,159 --> 00:34:40,800
really useful for

00:34:37,599 --> 00:34:43,200
for your phone yeah or like

00:34:40,800 --> 00:34:44,639
completely suspending backup tasks while

00:34:43,200 --> 00:34:46,560
background tasks why

00:34:44,639 --> 00:34:48,480
a game is running or something like that

00:34:46,560 --> 00:34:49,919
which also makes sense

00:34:48,480 --> 00:34:52,000
um ask your comment about existing

00:34:49,919 --> 00:34:53,520
launches as a general point

00:34:52,000 --> 00:34:56,879
yes existing launches will need to be

00:34:53,520 --> 00:34:59,520
changed on a specific point of steam

00:34:56,879 --> 00:35:02,400
um we've been speaking to steam people

00:34:59,520 --> 00:35:04,480
um i can say that they were one of the

00:35:02,400 --> 00:35:06,720
people that pushed towards this because

00:35:04,480 --> 00:35:07,599
having a high frame rate of a focused

00:35:06,720 --> 00:35:09,280
application

00:35:07,599 --> 00:35:10,880
if that's a game it's something they

00:35:09,280 --> 00:35:11,920
care about and it they've actually

00:35:10,880 --> 00:35:15,119
reached out

00:35:11,920 --> 00:35:17,680
um ahead of time to say this is

00:35:15,119 --> 00:35:18,960
a goal that we want and it's something

00:35:17,680 --> 00:35:22,720
that they're going to be out

00:35:18,960 --> 00:35:22,720
adding at all completely

00:35:23,920 --> 00:35:27,359
and in terms of how can you help make

00:35:25,440 --> 00:35:30,480
this possible uh one of the

00:35:27,359 --> 00:35:34,320
important points is if you run systemd

00:35:30,480 --> 00:35:37,440
cgls which is equivalent like

00:35:34,320 --> 00:35:39,200
of ps but it shows our high hierarchy uh

00:35:37,440 --> 00:35:42,000
thank you whoever put that in your notes

00:35:39,200 --> 00:35:42,560
um and you can see a slices and you can

00:35:42,000 --> 00:35:45,200
see

00:35:42,560 --> 00:35:46,880
the hierarchy building up and just run

00:35:45,200 --> 00:35:50,560
that look for anything that seems

00:35:46,880 --> 00:35:54,000
out of place and report it

00:35:50,560 --> 00:35:56,720
fix it yeah that would be a good thing

00:35:54,000 --> 00:35:58,000
um then the other thing is uh that for

00:35:56,720 --> 00:36:00,480
example systemd is getting

00:35:58,000 --> 00:36:02,320
systemvo md right now and the idea

00:36:00,480 --> 00:36:05,520
generally would be that

00:36:02,320 --> 00:36:06,800
rather than uh that we start using that

00:36:05,520 --> 00:36:09,280
to kill processes so the

00:36:06,800 --> 00:36:10,839
kernel oem cooler will only kill process

00:36:09,280 --> 00:36:12,960
when the system is already frozen

00:36:10,839 --> 00:36:13,760
basically and then in fedora we are

00:36:12,960 --> 00:36:16,800
using earlier

00:36:13,760 --> 00:36:19,040
m now which kills processes when

00:36:16,800 --> 00:36:21,839
let's say when there is not enough

00:36:19,040 --> 00:36:23,960
memory available for caches anymore

00:36:21,839 --> 00:36:26,160
but the general idea would be that with

00:36:23,960 --> 00:36:27,440
systemdomd what we do is we kill

00:36:26,160 --> 00:36:29,520
processors when

00:36:27,440 --> 00:36:31,359
we actually are hitting the disk too

00:36:29,520 --> 00:36:32,000
much and the system is grinding to a

00:36:31,359 --> 00:36:34,480
halt

00:36:32,000 --> 00:36:36,079
so if some people are interested it

00:36:34,480 --> 00:36:38,079
would be really cool if they could

00:36:36,079 --> 00:36:39,200
grab the latest systemd which contains

00:36:38,079 --> 00:36:40,720
systemdomd

00:36:39,200 --> 00:36:42,880
and start playing with the different

00:36:40,720 --> 00:36:45,440
settings and start coming up with

00:36:42,880 --> 00:36:46,400
scenarios on how to test whether the

00:36:45,440 --> 00:36:50,320
desktop

00:36:46,400 --> 00:36:52,560
is remaining responsive um under load

00:36:50,320 --> 00:36:54,880
and one other thing if you really want

00:36:52,560 --> 00:36:55,920
to help one part we've got in plasma at

00:36:54,880 --> 00:36:57,920
the moment is

00:36:55,920 --> 00:36:59,280
using systemd to manage all of our

00:36:57,920 --> 00:37:01,599
background

00:36:59,280 --> 00:37:03,119
dungeons and whatnot which is somewhat

00:37:01,599 --> 00:37:04,079
separate from the concept of managing

00:37:03,119 --> 00:37:06,560
applications

00:37:04,079 --> 00:37:07,280
and right now this is off by default on

00:37:06,560 --> 00:37:09,599
plasma

00:37:07,280 --> 00:37:10,880
but hidden behind a config option that

00:37:09,599 --> 00:37:13,839
we can turn on

00:37:10,880 --> 00:37:14,320
and i have a blog post that says where

00:37:13,839 --> 00:37:16,000
that

00:37:14,320 --> 00:37:17,359
config option is if you google for it

00:37:16,000 --> 00:37:19,280
i'm sure it will come up

00:37:17,359 --> 00:37:23,839
or just reach out and ping me if you

00:37:19,280 --> 00:37:23,839
want to enable it and have any questions

00:37:24,960 --> 00:37:28,000
i think we're probably out of time yeah

00:37:27,440 --> 00:37:30,000
yeah

00:37:28,000 --> 00:37:31,839
um actually we technically have five

00:37:30,000 --> 00:37:34,960
more minutes if there are

00:37:31,839 --> 00:37:37,680
questions please answer them

00:37:34,960 --> 00:37:38,480
no i'm not gonna watch anywhere yeah

00:37:37,680 --> 00:37:41,920
that's fine

00:37:38,480 --> 00:37:44,000
one's coming in right now okay

00:37:41,920 --> 00:37:45,680
ben you should read it out in real time

00:37:44,000 --> 00:37:47,680
you mentioned the diva starting for

00:37:45,680 --> 00:37:50,880
getting into management is that

00:37:47,680 --> 00:37:53,119
only required when you

00:37:50,880 --> 00:37:55,040
okay is that only required when you

00:37:53,119 --> 00:37:57,920
provide arguments or also

00:37:55,040 --> 00:37:59,920
for background processes that use config

00:37:57,920 --> 00:38:03,680
files

00:37:59,920 --> 00:38:05,119
um not sure what config files means here

00:38:03,680 --> 00:38:06,960
uh

00:38:05,119 --> 00:38:10,160
so i assume if you have your own

00:38:06,960 --> 00:38:10,160
specific uh

00:38:10,720 --> 00:38:18,079
sorry yeah you finished okay

00:38:14,480 --> 00:38:20,560
so um in by default

00:38:18,079 --> 00:38:22,480
d bus will already start each

00:38:20,560 --> 00:38:24,640
application if you use d bus activation

00:38:22,480 --> 00:38:27,520
or something like that then it will

00:38:24,640 --> 00:38:28,240
uh will start everything in a c group

00:38:27,520 --> 00:38:33,200
already so

00:38:28,240 --> 00:38:37,119
you get all the features or um

00:38:33,200 --> 00:38:40,320
all right arguments it

00:38:37,119 --> 00:38:40,320
i'm not quite sure what

00:38:41,040 --> 00:38:44,800
it makes sense when you actually have

00:38:43,440 --> 00:38:45,440
something that should be an entity of

00:38:44,800 --> 00:38:48,640
its own

00:38:45,440 --> 00:38:49,440
own and and starting using dbus is just

00:38:48,640 --> 00:38:52,480
one method

00:38:49,440 --> 00:38:55,440
of placing the process into a

00:38:52,480 --> 00:38:55,760
its own c group and also being able to

00:38:55,440 --> 00:38:58,800
ship

00:38:55,760 --> 00:39:00,560
a system deconfiguration files uh

00:38:58,800 --> 00:39:02,000
so that you can configure it more so you

00:39:00,560 --> 00:39:03,760
get both out of this right

00:39:02,000 --> 00:39:06,079
at the first step if you just use dbl's

00:39:03,760 --> 00:39:07,119
activation it's one method of starting a

00:39:06,079 --> 00:39:09,520
process

00:39:07,119 --> 00:39:11,760
that so it will end up in a system d

00:39:09,520 --> 00:39:13,599
unit and then as the second step

00:39:11,760 --> 00:39:15,119
you can provide a system d your own

00:39:13,599 --> 00:39:16,880
system d service file

00:39:15,119 --> 00:39:19,200
to provide your own configuration

00:39:16,880 --> 00:39:19,200
options

00:39:20,720 --> 00:39:25,280
i've placed that um paste bin of all the

00:39:23,920 --> 00:39:26,480
different implementations and

00:39:25,280 --> 00:39:29,040
all the different ways you can launch

00:39:26,480 --> 00:39:30,720
the groups um into your shared notes

00:39:29,040 --> 00:39:33,760
chats because it's easy to click on

00:39:30,720 --> 00:39:36,079
on a presentation and

00:39:33,760 --> 00:39:37,599
that mentions the buzz we also mentioned

00:39:36,079 --> 00:39:38,560
all the other different possible ways we

00:39:37,599 --> 00:39:43,839
can

00:39:38,560 --> 00:39:43,839

YouTube URL: https://www.youtube.com/watch?v=JGOTe0cisxA


