Title: GTK4 is (almost) here! - Matthias Clasen, Emmanuele Bassi
Publication date: 2020-11-15
Playlist: Linux App Summit 2020 Talks
Description: 
	GTK 4 is a major new version of GTK, that is scheduled to be released before
the end of this year. It contains many improvements that will make it easier
to develop polished applications with modern features.

This talk will present an overview of the major changes and new features,
with a focus on what matters for application developers, whether you are
writing a new application or thinking about porting an existing one.
Captions: 
	00:00:00,799 --> 00:00:04,640
yeah hello good morning uh it's actually

00:00:02,399 --> 00:00:06,399
just going to be me emanuele's instead

00:00:04,640 --> 00:00:09,519
giving a talk at gnomasia so

00:00:06,399 --> 00:00:12,719
um today it's just me

00:00:09,519 --> 00:00:15,679
and i'll be talking about uh gtk4

00:00:12,719 --> 00:00:17,199
before i start i want to say that i've

00:00:15,679 --> 00:00:18,880
given a similar talk at guadac a few

00:00:17,199 --> 00:00:21,039
months ago and

00:00:18,880 --> 00:00:22,880
if you've been at that talk uh the first

00:00:21,039 --> 00:00:25,039
half of my presentation will be

00:00:22,880 --> 00:00:27,039
fairly familiar to you but um if you

00:00:25,039 --> 00:00:28,400
hang on uh the demo section will be on

00:00:27,039 --> 00:00:31,760
you in front

00:00:28,400 --> 00:00:34,079
so uh stay tuned for that um

00:00:31,760 --> 00:00:35,600
yes we've been working on gtk4 for quite

00:00:34,079 --> 00:00:37,280
a while now um

00:00:35,600 --> 00:00:40,879
looking back uh when preparing for this

00:00:37,280 --> 00:00:42,640
talk um i noticed that we did the 3.89.1

00:00:40,879 --> 00:00:47,440
release which was the first

00:00:42,640 --> 00:00:49,600
um in our 4.0 development

00:00:47,440 --> 00:00:51,600
uh that happened in november 2016 so it

00:00:49,600 --> 00:00:53,680
was actually four years ago

00:00:51,600 --> 00:00:55,760
and since then we've racked up almost uh

00:00:53,680 --> 00:00:58,800
18 000 commits

00:00:55,760 --> 00:01:00,359
but now gtk force is basically almost

00:00:58,800 --> 00:01:02,960
here we are up to

00:01:00,359 --> 00:01:05,119
3.99.4 and

00:01:02,960 --> 00:01:06,080
we will do the 4.0 release within the

00:01:05,119 --> 00:01:09,520
next i guess

00:01:06,080 --> 00:01:12,640
two or three weeks and it's time to

00:01:09,520 --> 00:01:14,880
take a look at what we have to offer

00:01:12,640 --> 00:01:15,759
there have been a few um brave early

00:01:14,880 --> 00:01:18,320
adopters

00:01:15,759 --> 00:01:19,439
during our four years of unstable

00:01:18,320 --> 00:01:21,600
development

00:01:19,439 --> 00:01:22,799
who have done test ports of various

00:01:21,600 --> 00:01:24,720
applications

00:01:22,799 --> 00:01:27,520
for example there was a nautilus port

00:01:24,720 --> 00:01:29,840
around our 396 release

00:01:27,520 --> 00:01:31,040
and later on george's supported gnome to

00:01:29,840 --> 00:01:34,479
do to

00:01:31,040 --> 00:01:36,720
3.98 and we were very lucky to

00:01:34,479 --> 00:01:37,680
observe him trying to use our new drag

00:01:36,720 --> 00:01:41,360
and drop api

00:01:37,680 --> 00:01:42,960
and thanks to that uh our drag and drop

00:01:41,360 --> 00:01:43,920
api ended up looking a bit different

00:01:42,960 --> 00:01:48,240
than we thought

00:01:43,920 --> 00:01:51,600
initially and um it's much better

00:01:48,240 --> 00:01:53,680
and since we've started doing our 3.99

00:01:51,600 --> 00:01:55,680
releases more people have taken a look

00:01:53,680 --> 00:01:58,880
and giving us valuable feedback

00:01:55,680 --> 00:02:01,040
and gtk 4 will be much better due to all

00:01:58,880 --> 00:02:04,079
of you everybody who um

00:02:01,040 --> 00:02:07,200
took a look at what we had what it was

00:02:04,079 --> 00:02:10,479
still unstable deserves a big thank you

00:02:07,200 --> 00:02:12,800
and um yeah what i will do in this

00:02:10,479 --> 00:02:15,040
uh presentation is to highlight uh some

00:02:12,800 --> 00:02:15,680
of the things that i knew in gtk for and

00:02:15,040 --> 00:02:18,879
that maybe

00:02:15,680 --> 00:02:19,840
were not possible to do in gtk3 but uh

00:02:18,879 --> 00:02:23,599
before i do that

00:02:19,840 --> 00:02:25,520
um i wanted to um uh

00:02:23,599 --> 00:02:27,440
take a moment and look at the principles

00:02:25,520 --> 00:02:29,040
that have been uh guiding

00:02:27,440 --> 00:02:32,720
our development and the changes we've

00:02:29,040 --> 00:02:34,319
done so you have some idea of

00:02:32,720 --> 00:02:38,080
why things have changed in the way that

00:02:34,319 --> 00:02:38,080
they have and

00:02:38,319 --> 00:02:46,080
see if this works um yes so um

00:02:42,879 --> 00:02:47,920
one of the general principles uh

00:02:46,080 --> 00:02:49,120
general direction of our api changes has

00:02:47,920 --> 00:02:52,400
been to emphasize

00:02:49,120 --> 00:02:54,400
delegation over subclassing if you want

00:02:52,400 --> 00:02:56,319
you could call this lessons learned from

00:02:54,400 --> 00:02:57,840
clutter

00:02:56,319 --> 00:02:59,920
one of the motivations for this is to

00:02:57,840 --> 00:03:02,319
make writing your own custom widgets

00:02:59,920 --> 00:03:04,879
easier and less error prone

00:03:02,319 --> 00:03:06,319
and as a consequence of this direction

00:03:04,879 --> 00:03:09,440
we will see a lot more

00:03:06,319 --> 00:03:10,959
auxiliary objects in our apis that take

00:03:09,440 --> 00:03:12,480
over certain aspects of

00:03:10,959 --> 00:03:14,319
functionality from the core widget

00:03:12,480 --> 00:03:16,159
classes

00:03:14,319 --> 00:03:18,000
another consequence is that many of our

00:03:16,159 --> 00:03:20,560
widgets are now final so you cannot

00:03:18,000 --> 00:03:21,519
derive from them anymore instead we

00:03:20,560 --> 00:03:24,560
expect that you will

00:03:21,519 --> 00:03:26,080
derive directly from widget which has

00:03:24,560 --> 00:03:29,680
become a lot easier

00:03:26,080 --> 00:03:30,959
than it was in gdk3 another general

00:03:29,680 --> 00:03:34,080
trend is that

00:03:30,959 --> 00:03:36,239
everything is a widget that has already

00:03:34,080 --> 00:03:38,959
started in gtk3 many years ago

00:03:36,239 --> 00:03:40,000
we first started with introducing css

00:03:38,959 --> 00:03:42,319
nodes

00:03:40,000 --> 00:03:44,720
and then we introduced gadgets as

00:03:42,319 --> 00:03:48,000
another way of breaking up widgets into

00:03:44,720 --> 00:03:50,319
their components and now in gtk 4

00:03:48,000 --> 00:03:52,400
we have completed this transition and

00:03:50,319 --> 00:03:55,360
for example if you look at the gdk scale

00:03:52,400 --> 00:03:56,080
the trough and the slider of a scale are

00:03:55,360 --> 00:03:57,840
fully formed

00:03:56,080 --> 00:03:59,599
sub-widgets which maintain their own

00:03:57,840 --> 00:04:01,360
style and down state

00:03:59,599 --> 00:04:03,920
and they can receive input like any

00:04:01,360 --> 00:04:03,920
other widget

00:04:08,080 --> 00:04:11,280
a big loser in the gtk 4 transition is

00:04:10,959 --> 00:04:14,959
the

00:04:11,280 --> 00:04:17,919
gtk container base class it has become

00:04:14,959 --> 00:04:19,040
much less important any widget can have

00:04:17,919 --> 00:04:21,359
child widgets now

00:04:19,040 --> 00:04:23,840
and child properties which is something

00:04:21,359 --> 00:04:25,919
that gtk container used to provide

00:04:23,840 --> 00:04:28,479
have been replaced by layout children

00:04:25,919 --> 00:04:30,160
and their properties and

00:04:28,479 --> 00:04:32,000
all the focus handling has been moved

00:04:30,160 --> 00:04:34,880
from gtk containers to

00:04:32,000 --> 00:04:37,280
gtk widget so when we were done with all

00:04:34,880 --> 00:04:39,280
of these changes uh sdk container

00:04:37,280 --> 00:04:40,880
didn't really have no functionality left

00:04:39,280 --> 00:04:44,720
so in fact we just

00:04:40,880 --> 00:04:44,720
removed the class altogether

00:04:50,880 --> 00:04:54,800
yeah another big loser in in these

00:04:53,199 --> 00:04:57,919
changes is gtk window

00:04:54,800 --> 00:05:00,800
in gtk gtk3 all the pop-ups such as

00:04:57,919 --> 00:05:02,000
entry completions menus tooltips and

00:05:00,800 --> 00:05:04,000
things like that

00:05:02,000 --> 00:05:05,600
they're all using a gtk window

00:05:04,000 --> 00:05:08,240
underneath

00:05:05,600 --> 00:05:11,280
and in gtk4 most of them have been

00:05:08,240 --> 00:05:14,479
converted to use popovers or at least a

00:05:11,280 --> 00:05:16,320
pop-up surface and the pop-over

00:05:14,479 --> 00:05:16,800
implementation itself has been untangled

00:05:16,320 --> 00:05:20,479
from

00:05:16,800 --> 00:05:24,000
gtk window and made its own freestanding

00:05:20,479 --> 00:05:26,240
widget and in addition many pieces

00:05:24,000 --> 00:05:28,660
of functionality that are specific to

00:05:26,240 --> 00:05:29,840
top level windows such as

00:05:28,660 --> 00:05:32,320
[Music]

00:05:29,840 --> 00:05:34,160
handling of sizes and handling of window

00:05:32,320 --> 00:05:36,240
decorations have been moved out into

00:05:34,160 --> 00:05:39,520
separate interfaces such as

00:05:36,240 --> 00:05:40,400
gtk root or gtk native or into their own

00:05:39,520 --> 00:05:42,479
widgets

00:05:40,400 --> 00:05:44,960
like gtk window handle or gtk window

00:05:42,479 --> 00:05:44,960
controls

00:05:47,440 --> 00:05:52,639
on the gdk level we've moved from

00:05:50,960 --> 00:05:55,759
modeling our abstractions on

00:05:52,639 --> 00:05:58,319
x11 concepts to following wayland

00:05:55,759 --> 00:05:59,840
as a consequence we now have surfaces

00:05:58,319 --> 00:06:02,479
instead of windows

00:05:59,840 --> 00:06:03,680
and things like screens or visuals or

00:06:02,479 --> 00:06:06,560
explicit graphs

00:06:03,680 --> 00:06:07,280
are all gone from the api and we're also

00:06:06,560 --> 00:06:10,160
moving away

00:06:07,280 --> 00:06:11,440
from the complex hierarchy of input

00:06:10,160 --> 00:06:14,080
devices that

00:06:11,440 --> 00:06:16,240
x input has and have a much simpler

00:06:14,080 --> 00:06:18,639
setup for devices

00:06:16,240 --> 00:06:19,440
this should not affect applications too

00:06:18,639 --> 00:06:22,000
much

00:06:19,440 --> 00:06:23,440
but it does affect gdk back-ends and it

00:06:22,000 --> 00:06:25,120
in fact should make it a lot more

00:06:23,440 --> 00:06:28,880
straightforward to write

00:06:25,120 --> 00:06:30,639
gdk back-ends and

00:06:28,880 --> 00:06:33,680
as a sign of things to come in that area

00:06:30,639 --> 00:06:35,520
we do have a new backend for osx

00:06:33,680 --> 00:06:36,720
which still needs some love and

00:06:35,520 --> 00:06:40,240
nurturing but it

00:06:36,720 --> 00:06:40,240
does look like a promising start

00:06:42,160 --> 00:06:46,000
right um moving on from from the

00:06:44,319 --> 00:06:49,440
principles

00:06:46,000 --> 00:06:51,280
to surprises with every big change and

00:06:49,440 --> 00:06:52,479
the change from gtk 3 to gta 4 is

00:06:51,280 --> 00:06:55,120
certainly very big

00:06:52,479 --> 00:06:56,960
there are some surprises and unexpected

00:06:55,120 --> 00:06:57,919
changes that you did not anticipate and

00:06:56,960 --> 00:07:00,000
that

00:06:57,919 --> 00:07:01,199
might hold you up much longer than they

00:07:00,000 --> 00:07:03,120
should when you

00:07:01,199 --> 00:07:04,720
brought in an application from gtk3 to

00:07:03,120 --> 00:07:06,960
gtk4 so i

00:07:04,720 --> 00:07:08,639
i figured it would be a good idea to um

00:07:06,960 --> 00:07:08,960
point some of these out up front so you

00:07:08,639 --> 00:07:12,400
have

00:07:08,960 --> 00:07:12,960
you are prepared and the first surprise

00:07:12,400 --> 00:07:16,160
is

00:07:12,960 --> 00:07:18,400
that widgets are visible by default now

00:07:16,160 --> 00:07:20,639
that's this is one of a number of api

00:07:18,400 --> 00:07:22,560
changes uh where we've

00:07:20,639 --> 00:07:23,919
made uh where we just changed defaults

00:07:22,560 --> 00:07:26,160
that were wrong before

00:07:23,919 --> 00:07:27,599
to the expected value if you create a

00:07:26,160 --> 00:07:29,680
new widget

00:07:27,599 --> 00:07:32,160
uh you typically want it to be visible

00:07:29,680 --> 00:07:35,599
so it makes a lot of sense to have um

00:07:32,160 --> 00:07:37,680
the visible property defaulting to true

00:07:35,599 --> 00:07:40,080
but if if one of your ui files

00:07:37,680 --> 00:07:40,639
inexplicably looks different in gtk4

00:07:40,080 --> 00:07:42,960
than it

00:07:40,639 --> 00:07:43,759
used to be in gdk3 then you may want to

00:07:42,960 --> 00:07:46,240
check

00:07:43,759 --> 00:07:48,319
if it contains any widgets that were

00:07:46,240 --> 00:07:50,000
never visible in gdk3

00:07:48,319 --> 00:07:51,680
because you just forgot to set visible

00:07:50,000 --> 00:07:55,520
to true and gtk4

00:07:51,680 --> 00:07:57,599
all of those will just show up

00:07:55,520 --> 00:07:58,639
surprise number two is that jdk

00:07:57,599 --> 00:08:01,680
container has gone

00:07:58,639 --> 00:08:03,440
and already mentioned that this can

00:08:01,680 --> 00:08:05,199
require some work if you are creating

00:08:03,440 --> 00:08:06,319
your uis manually there's a certain

00:08:05,199 --> 00:08:08,639
style of

00:08:06,319 --> 00:08:10,240
ui creation code where you always call

00:08:08,639 --> 00:08:13,520
gdk container ad

00:08:10,240 --> 00:08:15,520
on boxes windows and similar containers

00:08:13,520 --> 00:08:17,360
and all these calls have to be replaced

00:08:15,520 --> 00:08:20,639
by their respective

00:08:17,360 --> 00:08:22,160
non-generic counterparts for example gdk

00:08:20,639 --> 00:08:25,120
box now has a

00:08:22,160 --> 00:08:26,319
gtk box append function and all the

00:08:25,120 --> 00:08:28,720
widgets which just

00:08:26,319 --> 00:08:30,560
have a single child which is like gtk

00:08:28,720 --> 00:08:34,240
window or gtk frame they

00:08:30,560 --> 00:08:36,080
have a set site api that replaces the

00:08:34,240 --> 00:08:39,839
generic

00:08:36,080 --> 00:08:41,440
container at function that's admittedly

00:08:39,839 --> 00:08:42,159
a change that can be a little annoying

00:08:41,440 --> 00:08:45,279
to deal with

00:08:42,159 --> 00:08:47,360
um but the good news is uh if you're

00:08:45,279 --> 00:08:48,880
using gtk builder for your ui

00:08:47,360 --> 00:08:51,760
you are not affected by that at all

00:08:48,880 --> 00:08:52,320
because um the child element in ui files

00:08:51,760 --> 00:08:55,920
works

00:08:52,320 --> 00:08:58,000
just the same as before ptk builder ui

00:08:55,920 --> 00:08:59,279
files are affected by some other changes

00:08:58,000 --> 00:09:01,040
for example that

00:08:59,279 --> 00:09:02,560
child properties are being replaced by

00:09:01,040 --> 00:09:05,360
layout properties

00:09:02,560 --> 00:09:06,320
but we have a tool called gtk4 builder

00:09:05,360 --> 00:09:09,920
tool that

00:09:06,320 --> 00:09:13,279
can help you adapt to that

00:09:09,920 --> 00:09:15,839
if you um if you

00:09:13,279 --> 00:09:16,800
run the use the simplify command of gtk4

00:09:15,839 --> 00:09:20,720
builder tool and you

00:09:16,800 --> 00:09:23,680
pass the dash 324 option

00:09:20,720 --> 00:09:26,480
to this command it'll try to rewrite a

00:09:23,680 --> 00:09:27,250
gdk3 ui file to the syntax expected in

00:09:26,480 --> 00:09:28,640
gtk4

00:09:27,250 --> 00:09:30,640
[Music]

00:09:28,640 --> 00:09:32,959
the tool is not perfect and you should

00:09:30,640 --> 00:09:34,480
always verify what it produces and

00:09:32,959 --> 00:09:36,640
pay attention to the warnings that it

00:09:34,480 --> 00:09:39,040
spits out but

00:09:36,640 --> 00:09:40,640
during gtk 4 development we've run run

00:09:39,040 --> 00:09:43,839
this over all the ui files

00:09:40,640 --> 00:09:45,200
in jdk several times and it works

00:09:43,839 --> 00:09:47,519
reasonably well

00:09:45,200 --> 00:09:49,200
so that's definitely something you

00:09:47,519 --> 00:09:50,959
should keep in mind if you haven't

00:09:49,200 --> 00:09:53,360
have a gdk3 application that needs

00:09:50,959 --> 00:09:53,360
porting

00:09:54,000 --> 00:09:57,760
all right um with that i'll change gears

00:09:56,320 --> 00:09:59,760
a little bit and

00:09:57,760 --> 00:10:00,800
try to share my screen how that works

00:09:59,760 --> 00:10:03,680
and i will show

00:10:00,800 --> 00:10:04,640
some demos before i do that i wanted to

00:10:03,680 --> 00:10:06,800
say that um

00:10:04,640 --> 00:10:09,120
in my garage version of this talk i i

00:10:06,800 --> 00:10:12,079
showed minimal test cases as demos

00:10:09,120 --> 00:10:13,200
that were showing how you do layout

00:10:12,079 --> 00:10:15,920
rendering and input

00:10:13,200 --> 00:10:17,360
in gtk4 and i worked brought you through

00:10:15,920 --> 00:10:18,959
the code

00:10:17,360 --> 00:10:21,920
if you're interested in that thing you

00:10:18,959 --> 00:10:23,839
can find those demos on on gitlab or you

00:10:21,920 --> 00:10:26,959
can just watch the recording of that

00:10:23,839 --> 00:10:28,240
that talk i gave but i'm since then

00:10:26,959 --> 00:10:30,320
since i gave that talk we've worked

00:10:28,240 --> 00:10:33,680
pretty hard on adding

00:10:30,320 --> 00:10:34,480
nice examples to gdk demo uh so today i

00:10:33,680 --> 00:10:36,800
want to just

00:10:34,480 --> 00:10:38,000
show some of those those demos to give

00:10:36,800 --> 00:10:41,680
you an impression of

00:10:38,000 --> 00:10:44,640
what gtk4 can do that was not possible

00:10:41,680 --> 00:10:48,399
in gdk3 and with that uh

00:10:44,640 --> 00:10:48,399
to share my screen i hope this works

00:10:59,360 --> 00:11:03,440
okay sorry for that uh strobe effect i

00:11:01,839 --> 00:11:05,600
have no idea how to avoid that with

00:11:03,440 --> 00:11:06,720
big blue button but i hope you can see

00:11:05,600 --> 00:11:10,000
um

00:11:06,720 --> 00:11:11,839
uh the gdk demo window now um there's a

00:11:10,000 --> 00:11:12,640
lot of demos in this and a lot of new

00:11:11,839 --> 00:11:13,920
demos so

00:11:12,640 --> 00:11:15,680
if you think you know what's in here

00:11:13,920 --> 00:11:18,000
it's worth taking another look

00:11:15,680 --> 00:11:20,160
as i said we've worked pretty hard on

00:11:18,000 --> 00:11:21,519
producing some demos that are

00:11:20,160 --> 00:11:25,040
maybe a little more interesting i want

00:11:21,519 --> 00:11:28,240
to start off by showing a few demos

00:11:25,040 --> 00:11:30,000
about layout managers layout managers

00:11:28,240 --> 00:11:31,519
are one of those auxiliary objects that

00:11:30,000 --> 00:11:33,040
i mentioned earlier that we've kind of

00:11:31,519 --> 00:11:36,160
inherited

00:11:33,040 --> 00:11:37,279
from clutter and every widget has a

00:11:36,160 --> 00:11:39,519
layout manager that

00:11:37,279 --> 00:11:40,720
basically is responsible for controlling

00:11:39,519 --> 00:11:44,560
how the child digits

00:11:40,720 --> 00:11:48,399
are placed on screen and

00:11:44,560 --> 00:11:50,079
here's a simple uh layout manager demo

00:11:48,399 --> 00:11:52,560
it's basically a

00:11:50,079 --> 00:11:53,360
widget that has child widgets that are

00:11:52,560 --> 00:11:56,079
placed in a

00:11:53,360 --> 00:11:57,040
in a grid the layout manager determines

00:11:56,079 --> 00:11:59,440
the positions

00:11:57,040 --> 00:12:01,519
of the child widgets and they look just

00:11:59,440 --> 00:12:04,160
like color blobs but they are actually

00:12:01,519 --> 00:12:05,600
widgets which have toolkit tooltips um

00:12:04,160 --> 00:12:08,639
as you can see here

00:12:05,600 --> 00:12:10,720
and if i if i click my mouse button here

00:12:08,639 --> 00:12:12,480
you can see that the layout changes and

00:12:10,720 --> 00:12:14,720
the child switches get rearranged in a

00:12:12,480 --> 00:12:16,560
soccer now and i can

00:12:14,720 --> 00:12:19,360
actually undo that and do it again so

00:12:16,560 --> 00:12:21,360
that's fun to play with

00:12:19,360 --> 00:12:23,680
we don't have the full-grown animation

00:12:21,360 --> 00:12:26,480
framework in gtk4 yet but

00:12:23,680 --> 00:12:28,320
simple transitions between layouts like

00:12:26,480 --> 00:12:29,600
this are very doable with just a tick

00:12:28,320 --> 00:12:32,240
callback

00:12:29,600 --> 00:12:34,000
as this demo shows so basically what the

00:12:32,240 --> 00:12:36,639
layout manager here does is

00:12:34,000 --> 00:12:38,480
it computes the position of the children

00:12:36,639 --> 00:12:41,120
in both these layouts both for the grid

00:12:38,480 --> 00:12:43,360
and for the circle and then we have a

00:12:41,120 --> 00:12:47,760
tick callback that interpolates between

00:12:43,360 --> 00:12:50,079
those two positions for each child and

00:12:47,760 --> 00:12:52,079
if you have ever played with the clutter

00:12:50,079 --> 00:12:54,480
demos this may look familiar to you this

00:12:52,079 --> 00:12:57,360
is a pretty direct translation of

00:12:54,480 --> 00:12:58,160
the clutter layout manager demo that i

00:12:57,360 --> 00:12:59,440
did

00:12:58,160 --> 00:13:01,120
and i think it does a good job of

00:12:59,440 --> 00:13:03,120
showing that it's pretty easy to

00:13:01,120 --> 00:13:06,480
position child widgets in a

00:13:03,120 --> 00:13:08,240
on a 2d canvas but um

00:13:06,480 --> 00:13:10,320
one of the things that uh that i knew in

00:13:08,240 --> 00:13:13,839
gtk 4 is that we actually have a fullest

00:13:10,320 --> 00:13:16,959
3d scene graph and 3d transformations

00:13:13,839 --> 00:13:18,000
between children so after i did this the

00:13:16,959 --> 00:13:20,240
translation of this

00:13:18,000 --> 00:13:21,680
clutter demo i thought i wanted to show

00:13:20,240 --> 00:13:23,120
off uh

00:13:21,680 --> 00:13:24,959
transformations that are a little less

00:13:23,120 --> 00:13:28,000
trivial than uh just

00:13:24,959 --> 00:13:29,600
uh what this demo showed so i i spent a

00:13:28,000 --> 00:13:31,519
weekend writing another

00:13:29,600 --> 00:13:32,880
uh layout manager demo with

00:13:31,519 --> 00:13:35,839
transformations

00:13:32,880 --> 00:13:35,839
it's this one

00:13:35,920 --> 00:13:40,160
again the ingredients are the same here

00:13:37,920 --> 00:13:42,480
this is just a container which

00:13:40,160 --> 00:13:44,399
has a bunch of child widgets in this

00:13:42,480 --> 00:13:46,480
case they are icons

00:13:44,399 --> 00:13:48,399
and all the magic is in the layout

00:13:46,480 --> 00:13:50,720
manager that computes

00:13:48,399 --> 00:13:53,279
how to place these stride widgets into

00:13:50,720 --> 00:13:55,279
our theme graph and in this case it

00:13:53,279 --> 00:13:56,480
places them on the surface office here

00:13:55,279 --> 00:13:57,760
and

00:13:56,480 --> 00:13:59,360
i thought i'd make this demo a little

00:13:57,760 --> 00:14:00,079
more interesting by also adding key nav

00:13:59,360 --> 00:14:03,199
so if i

00:14:00,079 --> 00:14:04,639
click the arrow keys here um you can

00:14:03,199 --> 00:14:07,680
move things around and

00:14:04,639 --> 00:14:11,199
see that actually reacts

00:14:07,680 --> 00:14:11,199
so that is uh fun to play with

00:14:11,519 --> 00:14:16,160
and yeah maybe i can do a little

00:14:14,079 --> 00:14:21,360
interaction here i'll bring up

00:14:16,160 --> 00:14:21,360
the um ptk inspector

00:14:21,920 --> 00:14:25,519
because i wanted to quickly show you

00:14:23,600 --> 00:14:28,079
that um

00:14:25,519 --> 00:14:30,399
these are actually uh widgets that are

00:14:28,079 --> 00:14:34,399
responsive to input and um

00:14:30,399 --> 00:14:37,040
it's not just uh the movie

00:14:34,399 --> 00:14:38,320
and to show that i can turn on a hover

00:14:37,040 --> 00:14:40,399
effect and you can see that

00:14:38,320 --> 00:14:42,240
that all of these widgets actually

00:14:40,399 --> 00:14:44,800
receive input as i move my mouse over

00:14:42,240 --> 00:14:47,519
the window

00:14:44,800 --> 00:14:47,519
they get hovered

00:14:52,800 --> 00:14:57,519
but um maybe that's enough for layout

00:14:56,000 --> 00:15:00,240
managers and i'll move on to the next

00:14:57,519 --> 00:15:03,120
big topic which is um

00:15:00,240 --> 00:15:03,680
another big thing that we added to gdk

00:15:03,120 --> 00:15:07,440
for is

00:15:03,680 --> 00:15:10,320
uh support for model based list widgets

00:15:07,440 --> 00:15:12,079
we eventually want these to replace gtk

00:15:10,320 --> 00:15:15,279
treeview and

00:15:12,079 --> 00:15:17,040
and gtk combo box and and select

00:15:15,279 --> 00:15:19,519
we're not quite there yet but um this is

00:15:17,040 --> 00:15:22,480
what we have this is a column view

00:15:19,519 --> 00:15:24,000
um that that shows uh what our list our

00:15:22,480 --> 00:15:25,199
model based list widgets can do the

00:15:24,000 --> 00:15:28,399
model in this case

00:15:25,199 --> 00:15:31,839
contains the content of the unicode

00:15:28,399 --> 00:15:32,160
character database so that's roughly 33

00:15:31,839 --> 00:15:35,440
00:15:32,160 --> 00:15:36,880
items and you can you can scroll around

00:15:35,440 --> 00:15:40,160
here and you can

00:15:36,880 --> 00:15:41,759
select things and you can explore um

00:15:40,160 --> 00:15:43,440
explore this and find characters you

00:15:41,759 --> 00:15:45,040
never knew existed so that's that's a

00:15:43,440 --> 00:15:47,680
fun thing to do

00:15:45,040 --> 00:15:48,720
and uh as far as the widget is concerned

00:15:47,680 --> 00:15:50,079
you can see that um

00:15:48,720 --> 00:15:52,399
it does have functionality that you

00:15:50,079 --> 00:15:54,639
expect from a from a columned list you

00:15:52,399 --> 00:15:56,720
can like resize the columns and you can

00:15:54,639 --> 00:15:57,759
reorder any columns we also have support

00:15:56,720 --> 00:16:00,000
for

00:15:57,759 --> 00:16:02,079
uh for sorting by column and for

00:16:00,000 --> 00:16:05,360
filtering that this demo

00:16:02,079 --> 00:16:07,759
does not show yet so

00:16:05,360 --> 00:16:09,920
you could obviously do exactly the same

00:16:07,759 --> 00:16:11,360
demo with the tree view

00:16:09,920 --> 00:16:13,519
the difference here is that we actually

00:16:11,360 --> 00:16:16,079
use widgets for all the content so

00:16:13,519 --> 00:16:16,639
every cell in this in this grid is a

00:16:16,079 --> 00:16:18,639
label

00:16:16,639 --> 00:16:19,759
and you can use the full power of gtk

00:16:18,639 --> 00:16:22,800
widgets

00:16:19,759 --> 00:16:25,040
to display your data we don't

00:16:22,800 --> 00:16:27,120
create widgets for the whole model we

00:16:25,040 --> 00:16:28,240
only create widgets for the visible

00:16:27,120 --> 00:16:30,399
range

00:16:28,240 --> 00:16:31,680
and if you scroll around we'll recycle

00:16:30,399 --> 00:16:36,079
the widgets

00:16:31,680 --> 00:16:39,040
so that is all as you would expect

00:16:36,079 --> 00:16:40,000
and you might say well 33 000 items that

00:16:39,040 --> 00:16:42,240
is not

00:16:40,000 --> 00:16:43,920
very impressive in terms of model size

00:16:42,240 --> 00:16:47,360
and you would be correct

00:16:43,920 --> 00:16:49,279
um so if you want to like see a bit more

00:16:47,360 --> 00:16:50,639
impressive model sizes we can switch to

00:16:49,279 --> 00:16:53,519
this

00:16:50,639 --> 00:16:54,079
example for for grid widget which is

00:16:53,519 --> 00:16:56,399
also

00:16:54,079 --> 00:16:57,600
using a model the same kind of model

00:16:56,399 --> 00:17:01,600
that

00:16:57,600 --> 00:17:03,519
the column list used and we can

00:17:01,600 --> 00:17:04,959
switch the model size to 2 million items

00:17:03,519 --> 00:17:06,559
so now we have a

00:17:04,959 --> 00:17:10,079
data model that contains 2 million

00:17:06,559 --> 00:17:13,039
colors and we can still

00:17:10,079 --> 00:17:13,439
use this ui fairly comfortably and one

00:17:13,039 --> 00:17:15,919
thing

00:17:13,439 --> 00:17:17,360
we can do here is we can actually sort

00:17:15,919 --> 00:17:18,959
this and as you can see the sorting

00:17:17,360 --> 00:17:21,520
happens in the background and

00:17:18,959 --> 00:17:22,880
and while it's going on the ui stays

00:17:21,520 --> 00:17:24,319
responsive

00:17:22,880 --> 00:17:26,000
and that's something that we worked

00:17:24,319 --> 00:17:28,960
pretty hard on and that we are

00:17:26,000 --> 00:17:32,400
kind of proud of the same is true for

00:17:28,960 --> 00:17:32,400
filtering you can also filter

00:17:32,720 --> 00:17:36,080
list base widget in the background and

00:17:34,400 --> 00:17:38,080
the ui will stay responsive as the

00:17:36,080 --> 00:17:40,640
filtering is happening

00:17:38,080 --> 00:17:42,320
although this this demo doesn't show it

00:17:40,640 --> 00:17:43,760
one other thing that this demo shows is

00:17:42,320 --> 00:17:45,760
that we have

00:17:43,760 --> 00:17:47,919
we have selection as well so you can

00:17:45,760 --> 00:17:51,360
make a relevant selection here

00:17:47,919 --> 00:17:53,280
and then you can get the data that's

00:17:51,360 --> 00:17:55,679
behind the selection and to

00:17:53,280 --> 00:17:56,880
do things with it like compute the

00:17:55,679 --> 00:17:58,720
average color

00:17:56,880 --> 00:18:00,160
usually if you if you make a big

00:17:58,720 --> 00:18:03,520
selection you just end up with something

00:18:00,160 --> 00:18:03,520
that is either gray or brown

00:18:04,640 --> 00:18:09,679
so maybe that's um that's enough for

00:18:08,080 --> 00:18:11,600
for list fidgets there's more to explore

00:18:09,679 --> 00:18:14,320
here if you if you want to click around

00:18:11,600 --> 00:18:16,320
yourself there's more demos

00:18:14,320 --> 00:18:17,520
highlighting various aspects but i want

00:18:16,320 --> 00:18:20,640
to move on

00:18:17,520 --> 00:18:23,840
and talk a bit about painting

00:18:20,640 --> 00:18:25,039
and there it is yes traditionally in gtk

00:18:23,840 --> 00:18:28,080
whenever we need it

00:18:25,039 --> 00:18:30,160
we need content that can be drawn

00:18:28,080 --> 00:18:31,280
be that an image loaded from a file or

00:18:30,160 --> 00:18:35,520
something drawn

00:18:31,280 --> 00:18:37,840
uh by code we end up using jdk pixbuff

00:18:35,520 --> 00:18:40,240
in gtk4 we've kind of moved away from

00:18:37,840 --> 00:18:42,559
gdk pixma we de-emphasized that

00:18:40,240 --> 00:18:44,720
and introduced a new interface called uh

00:18:42,559 --> 00:18:47,679
gdk paintable

00:18:44,720 --> 00:18:49,440
when you uh load an image file in gk4

00:18:47,679 --> 00:18:52,240
you end up with a

00:18:49,440 --> 00:18:53,760
gdk texture object which implements the

00:18:52,240 --> 00:18:55,760
paintable interface

00:18:53,760 --> 00:18:58,559
and likewise when you load a themed icon

00:18:55,760 --> 00:19:00,480
you also end up with a paintable

00:18:58,559 --> 00:19:01,760
printables can produce different images

00:19:00,480 --> 00:19:03,600
at different times

00:19:01,760 --> 00:19:06,400
so we can also present animations and

00:19:03,600 --> 00:19:09,200
videos using this interface

00:19:06,400 --> 00:19:10,559
one of the best things about gdk

00:19:09,200 --> 00:19:12,080
printable is that it's a very simple

00:19:10,559 --> 00:19:13,919
interface so it's it's very easy to

00:19:12,080 --> 00:19:16,559
implement yourself it's really just

00:19:13,919 --> 00:19:18,000
two or three functions and so the first

00:19:16,559 --> 00:19:21,919
example i want to show here

00:19:18,000 --> 00:19:25,120
is actually a custom implementation of

00:19:21,919 --> 00:19:26,960
gdk paintable that overlays an emblem on

00:19:25,120 --> 00:19:29,840
top of an existing paintable

00:19:26,960 --> 00:19:31,760
and and then you get something like this

00:19:29,840 --> 00:19:33,840
in gtk3 we used to have um

00:19:31,760 --> 00:19:35,440
support for what we called emblamed

00:19:33,840 --> 00:19:37,360
icons in

00:19:35,440 --> 00:19:39,600
gtk and theme but that was a fairly

00:19:37,360 --> 00:19:41,760
limited thing and we've got rid of it

00:19:39,600 --> 00:19:43,120
and instead we can now can now use

00:19:41,760 --> 00:19:46,000
paintedness for this

00:19:43,120 --> 00:19:47,280
and as you can see um since paintables

00:19:46,000 --> 00:19:49,600
can be animated and

00:19:47,280 --> 00:19:51,200
we overlay an arbitrary printable here

00:19:49,600 --> 00:19:53,760
you can now have

00:19:51,200 --> 00:19:57,600
animated emblems which is not something

00:19:53,760 --> 00:19:57,600
that would be easy to do in gtk3

00:19:58,880 --> 00:20:04,159
the next example of a paintable is

00:20:02,360 --> 00:20:07,919
[Music]

00:20:04,159 --> 00:20:11,039
loading an svg and you might say

00:20:07,919 --> 00:20:12,960
well gdk pixel could load svg since

00:20:11,039 --> 00:20:15,440
forever so why do we need this um

00:20:12,960 --> 00:20:17,679
the thing is if you load an svg file

00:20:15,440 --> 00:20:20,960
with gtk pixburgh you end up

00:20:17,679 --> 00:20:23,200
with a pixbuff which is just a

00:20:20,960 --> 00:20:24,000
fixed number of pixels and if you then

00:20:23,200 --> 00:20:25,919
change your

00:20:24,000 --> 00:20:27,679
your window size you end up with

00:20:25,919 --> 00:20:31,280
pixelated content because we just

00:20:27,679 --> 00:20:33,520
scale up those pixels which is a bit of

00:20:31,280 --> 00:20:34,000
a bummer considering that the s in svg

00:20:33,520 --> 00:20:37,360
stands for

00:20:34,000 --> 00:20:38,159
scalable so with a paintable wrapper

00:20:37,360 --> 00:20:40,559
around

00:20:38,159 --> 00:20:41,840
the rsvg handle object we can finally do

00:20:40,559 --> 00:20:43,840
better and as you can see

00:20:41,840 --> 00:20:46,799
as i make this window bigger we actually

00:20:43,840 --> 00:20:50,080
re-render the svg at the right size and

00:20:46,799 --> 00:20:53,360
we get sharp rendering at any size here

00:20:50,080 --> 00:20:55,440
and all of this uh requires just a

00:20:53,360 --> 00:20:59,440
100 lines of code for for a fairly

00:20:55,440 --> 00:21:01,120
trivial implementation of gdk paintable

00:20:59,440 --> 00:21:02,720
but i already mentioned that paintables

00:21:01,120 --> 00:21:05,039
can be animated and

00:21:02,720 --> 00:21:06,880
that that is very nice as we saw in this

00:21:05,039 --> 00:21:10,400
emblem example but if you

00:21:06,880 --> 00:21:13,200
if you want to um show uh

00:21:10,400 --> 00:21:14,400
actual media content such as a webm file

00:21:13,200 --> 00:21:16,559
you typically want

00:21:14,400 --> 00:21:18,640
some more control over things like the

00:21:16,559 --> 00:21:20,320
duration or the volume

00:21:18,640 --> 00:21:22,480
and for that we have a separate

00:21:20,320 --> 00:21:23,760
interface called gtk media stream that

00:21:22,480 --> 00:21:27,520
fills that role

00:21:23,760 --> 00:21:30,240
and we have a gtk video widget

00:21:27,520 --> 00:21:31,039
which at some of the expected controls

00:21:30,240 --> 00:21:34,080
in the ui

00:21:31,039 --> 00:21:36,159
and i'll show this demo here

00:21:34,080 --> 00:21:37,760
which is uh basically just the window

00:21:36,159 --> 00:21:40,320
wrapped around the gtk video

00:21:37,760 --> 00:21:42,000
which as you can see there's um typical

00:21:40,320 --> 00:21:43,520
media controls down here a volume

00:21:42,000 --> 00:21:46,720
control and a

00:21:43,520 --> 00:21:48,320
scale that shows you the position

00:21:46,720 --> 00:21:51,360
and that can render simple animations

00:21:48,320 --> 00:21:51,360
but it can also render

00:21:51,760 --> 00:21:55,840
movies that you might want to show

00:21:55,919 --> 00:22:00,640
and at the core of this um gtk video

00:21:58,960 --> 00:22:02,640
which it is just the same machinery that

00:22:00,640 --> 00:22:04,720
we saw earlier it's a gtk picture which

00:22:02,640 --> 00:22:08,080
is displaying a paintable

00:22:04,720 --> 00:22:08,080
that is changing over time

00:22:09,679 --> 00:22:12,799
right um so maybe that's enough for

00:22:11,919 --> 00:22:15,039
paintables

00:22:12,799 --> 00:22:16,720
and if you are still around you're

00:22:15,039 --> 00:22:18,000
probably here because you want to see

00:22:16,720 --> 00:22:22,159
wobbling widgets

00:22:18,000 --> 00:22:25,520
so um that's that's finally go there

00:22:22,159 --> 00:22:26,000
and yeah i'll give a brief introduction

00:22:25,520 --> 00:22:29,360
here

00:22:26,000 --> 00:22:32,240
so in gta 4 we use opengl for rendering

00:22:29,360 --> 00:22:33,520
our ui and in practice that means we are

00:22:32,240 --> 00:22:35,679
using

00:22:33,520 --> 00:22:38,400
shaders for rendering the elements of

00:22:35,679 --> 00:22:41,679
our ui like shadows or gradients or

00:22:38,400 --> 00:22:44,000
whatever we need to put together widgets

00:22:41,679 --> 00:22:46,159
and since not everybody may be familiar

00:22:44,000 --> 00:22:47,919
with opengl i'll quickly say what uh

00:22:46,159 --> 00:22:50,080
what shaders are

00:22:47,919 --> 00:22:51,200
so status are small programs written in

00:22:50,080 --> 00:22:54,240
a language

00:22:51,200 --> 00:22:55,520
called glsl that get compiled and

00:22:54,240 --> 00:22:57,679
uploaded to the

00:22:55,520 --> 00:22:59,039
gpu they run on the gpu and basically

00:22:57,679 --> 00:23:01,280
they get run in parallel

00:22:59,039 --> 00:23:03,120
for every pixel that you want to render

00:23:01,280 --> 00:23:06,559
and they can do

00:23:03,120 --> 00:23:08,000
simple things like just uh interpolating

00:23:06,559 --> 00:23:10,799
between different colors or

00:23:08,000 --> 00:23:14,559
they can do more complicated things and

00:23:10,799 --> 00:23:16,960
since we're using shaders for all our ui

00:23:14,559 --> 00:23:18,400
elements for gdk itself we figured it's

00:23:16,960 --> 00:23:20,159
also fairly easy for us to allow

00:23:18,400 --> 00:23:21,840
applications to use

00:23:20,159 --> 00:23:23,520
custom shaders and so that's something

00:23:21,840 --> 00:23:27,280
we did within the last

00:23:23,520 --> 00:23:29,120
half year or so and this demo

00:23:27,280 --> 00:23:30,799
uh shows that it's a little ridiculous

00:23:29,120 --> 00:23:33,440
and overcrowded because

00:23:30,799 --> 00:23:34,480
we try to squeeze uh every possible way

00:23:33,440 --> 00:23:37,840
to use system

00:23:34,480 --> 00:23:39,760
shaders in the ui into this one window

00:23:37,840 --> 00:23:41,039
but let's let's walk through that one by

00:23:39,760 --> 00:23:42,640
one

00:23:41,039 --> 00:23:44,240
and see what we have here the those

00:23:42,640 --> 00:23:44,880
colored blobs that you see in the

00:23:44,240 --> 00:23:47,520
background

00:23:44,880 --> 00:23:48,799
are rendered with a shader so you can

00:23:47,520 --> 00:23:51,520
just use the shaders and

00:23:48,799 --> 00:23:52,240
as an animated background if you want

00:23:51,520 --> 00:23:55,600
and then

00:23:52,240 --> 00:23:58,640
the content of the window is four stacks

00:23:55,600 --> 00:24:00,799
which are using shaders for their custom

00:23:58,640 --> 00:24:03,679
shaders for their transition between the

00:24:00,799 --> 00:24:05,840
different pages in the stack

00:24:03,679 --> 00:24:07,279
uh i'll walk through those in a bit but

00:24:05,840 --> 00:24:09,760
i first wanted to say that

00:24:07,279 --> 00:24:11,120
um the two uh two stacks here on the

00:24:09,760 --> 00:24:12,559
right uh show actually

00:24:11,120 --> 00:24:14,320
the widget they show currently the

00:24:12,559 --> 00:24:15,840
current page is um

00:24:14,320 --> 00:24:18,880
astonished with the shader as well

00:24:15,840 --> 00:24:21,840
that's a gtk gl area

00:24:18,880 --> 00:24:24,240
showing an example taken from the shader

00:24:21,840 --> 00:24:27,120
toy website

00:24:24,240 --> 00:24:28,559
and as you can see as i as i move the

00:24:27,120 --> 00:24:30,799
mouse over these

00:24:28,559 --> 00:24:33,039
widgets there's a there's another

00:24:30,799 --> 00:24:34,640
there's a wobbly widget effect that is

00:24:33,039 --> 00:24:37,840
also done with the shader

00:24:34,640 --> 00:24:39,760
on hover but now i'll click um

00:24:37,840 --> 00:24:42,000
i click here to actually change the page

00:24:39,760 --> 00:24:44,960
and you can see that there's a

00:24:42,000 --> 00:24:46,400
swipe transition or this is called a

00:24:44,960 --> 00:24:49,200
wind

00:24:46,400 --> 00:24:49,840
this deck has something called radio

00:24:49,200 --> 00:24:52,159
this one

00:24:49,840 --> 00:24:53,360
is doing a crosswalk and uh this is the

00:24:52,159 --> 00:24:54,960
kaleidoscope

00:24:53,360 --> 00:24:56,720
and all of these effects are not

00:24:54,960 --> 00:24:57,120
something that we invented ourselves to

00:24:56,720 --> 00:24:59,279
this

00:24:57,120 --> 00:25:00,880
side we found that has has a bunch of

00:24:59,279 --> 00:25:03,440
these effects ready made and

00:25:00,880 --> 00:25:04,640
we just copied the shader code from

00:25:03,440 --> 00:25:07,679
there and

00:25:04,640 --> 00:25:10,000
it basically just works

00:25:07,679 --> 00:25:11,039
and all these four stacks contain the

00:25:10,000 --> 00:25:13,279
same

00:25:11,039 --> 00:25:16,159
child widgets and the last one in each

00:25:13,279 --> 00:25:18,559
stack is the source code for the shader

00:25:16,159 --> 00:25:19,520
which you can see here and you can

00:25:18,559 --> 00:25:22,240
actually

00:25:19,520 --> 00:25:24,240
make a change here and you can

00:25:22,240 --> 00:25:26,480
re-compile the shader

00:25:24,240 --> 00:25:28,240
and then use it again and you can see

00:25:26,480 --> 00:25:29,919
the effect has actually changed maybe i

00:25:28,240 --> 00:25:30,880
need to make this a little slower so you

00:25:29,919 --> 00:25:34,080
can

00:25:30,880 --> 00:25:34,080
you can see what's going on

00:25:36,880 --> 00:25:42,000
so um yeah that's uh fun and

00:25:40,400 --> 00:25:44,559
i'm sure people will come up with maybe

00:25:42,000 --> 00:25:47,039
some useful uses for this and a lot of

00:25:44,559 --> 00:25:48,559
silly uses but um the capability is

00:25:47,039 --> 00:25:52,480
there and um

00:25:48,559 --> 00:25:52,480
i'm sure you'll have fun exploring that

00:25:52,799 --> 00:25:56,480
yeah i think that's maybe enough demos

00:25:54,559 --> 00:25:57,279
for now um yes there's of course a lot

00:25:56,480 --> 00:25:59,760
more here in

00:25:57,279 --> 00:26:00,640
ngk demo you can see we have quite a few

00:25:59,760 --> 00:26:02,720
demos

00:26:00,640 --> 00:26:11,840
and you can explore that yourself if you

00:26:02,720 --> 00:26:11,840
if you have a build of gtk for

00:27:07,440 --> 00:27:11,440
did my web browser crash while i was

00:27:08,960 --> 00:27:11,440
demoing

00:27:13,120 --> 00:27:21,840
did you guys miss all the demos or did

00:27:14,720 --> 00:27:25,039
you see see a little bit of it

00:27:21,840 --> 00:27:26,640
okay i'm sorry for that i i hope you got

00:27:25,039 --> 00:27:28,960
a little bit out of it

00:27:26,640 --> 00:27:30,399
and i'll um pretend that nothing happens

00:27:28,960 --> 00:27:35,679
and um

00:27:30,399 --> 00:27:37,120
i'll um let me see if i can actually

00:27:35,679 --> 00:27:39,840
yeah of course i'm not presented now

00:27:37,120 --> 00:27:41,919
anymore so i guess i'll have to be

00:27:39,840 --> 00:27:44,399
made presenter again so i can change the

00:27:41,919 --> 00:27:44,399
slides

00:27:47,120 --> 00:27:54,240
thank you so i

00:27:51,039 --> 00:27:54,240
showed you all of this um

00:27:55,840 --> 00:28:01,760
and most of this and

00:27:58,880 --> 00:28:03,200
before i wrap it up i wanted to take a

00:28:01,760 --> 00:28:05,039
brief moment

00:28:03,200 --> 00:28:07,440
to talk a bit about what our plans and

00:28:05,039 --> 00:28:12,080
ideas are for what we'll work on

00:28:07,440 --> 00:28:12,080
once we release gtk 4.0 next month

00:28:14,000 --> 00:28:17,840
so i haven't mentioned accessibility yet

00:28:16,240 --> 00:28:20,480
in this presentation but

00:28:17,840 --> 00:28:22,799
this has been a focus of the gtk team in

00:28:20,480 --> 00:28:25,600
particular a focus of emmanuel for the

00:28:22,799 --> 00:28:26,960
for the past year we had a hackfest with

00:28:25,600 --> 00:28:28,399
the members of the

00:28:26,960 --> 00:28:30,240
some members of the accessibility

00:28:28,399 --> 00:28:32,559
community in february

00:28:30,240 --> 00:28:34,720
in brussels that was back when

00:28:32,559 --> 00:28:38,080
conferences involved german

00:28:34,720 --> 00:28:40,880
and since then we've replaced the aging

00:28:38,080 --> 00:28:42,880
accessibility code in gtk with a new

00:28:40,880 --> 00:28:44,000
implementation that cuts out several

00:28:42,880 --> 00:28:47,440
layers of intermediate

00:28:44,000 --> 00:28:50,000
code and brings us much closer to what

00:28:47,440 --> 00:28:51,039
web browsers and qt do in this area

00:28:50,000 --> 00:28:54,240
nowadays

00:28:51,039 --> 00:28:57,360
so that that was a good step up

00:28:54,240 --> 00:28:58,960
for gtk 4.0 the aim in this area is to

00:28:57,360 --> 00:29:02,000
just have a functional

00:28:58,960 --> 00:29:04,480
atsbi backend that can support using

00:29:02,000 --> 00:29:05,919
gtk4 applications with orca the screen

00:29:04,480 --> 00:29:09,520
reader

00:29:05,919 --> 00:29:12,880
but the plans for after 4.0 include

00:29:09,520 --> 00:29:14,320
um writing back ends for other platforms

00:29:12,880 --> 00:29:17,039
which is something that we've never had

00:29:14,320 --> 00:29:20,159
in gdk our accessibility was always

00:29:17,039 --> 00:29:22,640
linux only and with our new um with the

00:29:20,159 --> 00:29:24,640
new code that we have in gtk for now

00:29:22,640 --> 00:29:26,080
uh it should be a lot easier to write

00:29:24,640 --> 00:29:29,440
back ends for say

00:29:26,080 --> 00:29:31,919
os x and maybe also on windows so that

00:29:29,440 --> 00:29:34,000
is something that

00:29:31,919 --> 00:29:37,039
will be a first for us and we're also

00:29:34,000 --> 00:29:40,320
looking at modernizing the at spi

00:29:37,039 --> 00:29:41,520
layer on linux so far we are using it as

00:29:40,320 --> 00:29:44,159
is but it really uh

00:29:41,520 --> 00:29:45,520
still smells of corba and it would be

00:29:44,159 --> 00:29:48,320
nice to

00:29:45,520 --> 00:29:48,320
improve on that

00:29:50,880 --> 00:29:55,600
yeah another item uh that's one item

00:29:54,240 --> 00:29:56,880
actually that we had to drop from our

00:29:55,600 --> 00:30:00,080
gtk4 roadmap

00:29:56,880 --> 00:30:01,440
because um accessibility was considered

00:30:00,080 --> 00:30:03,600
more important than

00:30:01,440 --> 00:30:05,760
an animation framework but we have not

00:30:03,600 --> 00:30:06,559
given up on on it and we will get back

00:30:05,760 --> 00:30:10,640
to it

00:30:06,559 --> 00:30:10,640
once we have 4.0 done

00:30:11,600 --> 00:30:15,600
yes ui designer everybody loves glade of

00:30:14,000 --> 00:30:17,520
course but

00:30:15,600 --> 00:30:19,919
it is not quite up to par with what

00:30:17,520 --> 00:30:23,120
other platforms offer in terms of

00:30:19,919 --> 00:30:25,279
ui design tools and what's worse glade

00:30:23,120 --> 00:30:27,440
does not currently work with gtk4

00:30:25,279 --> 00:30:30,240
because there were a number of changes

00:30:27,440 --> 00:30:33,600
in the ui file format and

00:30:30,240 --> 00:30:35,039
glade has not kept up with that we did

00:30:33,600 --> 00:30:37,760
introduce a

00:30:35,039 --> 00:30:38,320
constraint based layout manager in gtk4

00:30:37,760 --> 00:30:41,440
which

00:30:38,320 --> 00:30:43,360
is meant to facilitate writing a more

00:30:41,440 --> 00:30:45,840
modern ui designer but we have not

00:30:43,360 --> 00:30:46,880
actually gotten their own tool to doing

00:30:45,840 --> 00:30:48,640
that yet

00:30:46,880 --> 00:30:51,679
maybe somebody out there wants to beat

00:30:48,640 --> 00:30:56,320
us to it and show up with a with a new

00:30:51,679 --> 00:30:56,320
ui designer we'd love for that to happen

00:30:56,480 --> 00:31:01,200
yes this next item replacing gtk review

00:30:59,279 --> 00:31:04,399
is a bit of a placeholder

00:31:01,200 --> 00:31:06,320
for the incomplete cleanups and api

00:31:04,399 --> 00:31:07,279
modernization tasks that are left inside

00:31:06,320 --> 00:31:10,480
the

00:31:07,279 --> 00:31:11,919
gtk code base we did add the new list

00:31:10,480 --> 00:31:14,320
and grid widgets that i

00:31:11,919 --> 00:31:16,799
demonstrated a while ago and they are

00:31:14,320 --> 00:31:18,880
meant to eventually replace all the

00:31:16,799 --> 00:31:20,799
cell renderer based widgets like the

00:31:18,880 --> 00:31:22,240
tree view and the combo box and the icon

00:31:20,799 --> 00:31:24,399
view

00:31:22,240 --> 00:31:25,679
but we have not actually removed those

00:31:24,399 --> 00:31:27,279
widgets yet

00:31:25,679 --> 00:31:28,720
one of the reasons for that is that we

00:31:27,279 --> 00:31:31,519
did not want to make

00:31:28,720 --> 00:31:34,159
porting from gtk3 harder than it already

00:31:31,519 --> 00:31:35,919
is dealing with all the other changes is

00:31:34,159 --> 00:31:38,640
is enough work and it's much better if

00:31:35,919 --> 00:31:43,440
you can first do a gtk4 port and then

00:31:38,640 --> 00:31:43,440
as a second step replace your main

00:31:44,000 --> 00:31:49,919
widget be that a list or a grid

00:31:47,279 --> 00:31:51,600
and replace that with a model based

00:31:49,919 --> 00:31:53,279
widget

00:31:51,600 --> 00:31:56,000
another reason is that it's it's just a

00:31:53,279 --> 00:31:58,480
lot of work um to replace all these

00:31:56,000 --> 00:32:00,000
gtk combo box itself is a beast air gtk

00:31:58,480 --> 00:32:02,480
trigger itself is a beast but

00:32:00,000 --> 00:32:04,320
the others like i can view and combo box

00:32:02,480 --> 00:32:06,159
also have a lot of features that

00:32:04,320 --> 00:32:08,640
we kind of need to replace before we can

00:32:06,159 --> 00:32:08,640
drop them

00:32:11,200 --> 00:32:17,279
yeah the last item i have put on this on

00:32:14,159 --> 00:32:17,279
this list of ideas is

00:32:18,080 --> 00:32:21,200
that it's not just gtk itself that needs

00:32:20,559 --> 00:32:23,440
to

00:32:21,200 --> 00:32:24,960
take advantage of new things that we

00:32:23,440 --> 00:32:27,840
have to offer internally

00:32:24,960 --> 00:32:30,240
there's also a list of other libraries

00:32:27,840 --> 00:32:33,919
that provide more specialized widgets

00:32:30,240 --> 00:32:36,720
such as webkit vta or libg weather

00:32:33,919 --> 00:32:37,360
to name just a few and all those can

00:32:36,720 --> 00:32:40,159
only

00:32:37,360 --> 00:32:41,039
ported need to be ported to gtk4

00:32:40,159 --> 00:32:43,519
thankfully

00:32:41,039 --> 00:32:46,640
a lot of that parting is either done

00:32:43,519 --> 00:32:48,000
already or it's at least underway

00:32:46,640 --> 00:32:51,360
and one of the libraries i wanted to

00:32:48,000 --> 00:32:53,760
mention here specifically is lip handy

00:32:51,360 --> 00:32:54,399
which in recent years has served as a

00:32:53,760 --> 00:32:57,039
useful

00:32:54,399 --> 00:32:57,679
breeding ground for adaptive modern

00:32:57,039 --> 00:33:02,080
widgets

00:32:57,679 --> 00:33:04,320
on top of gtk3 while the gtk team was uh

00:33:02,080 --> 00:33:05,600
busy working on gtk4 so we are very

00:33:04,320 --> 00:33:07,440
thankful for the

00:33:05,600 --> 00:33:10,240
people working on le pendy that they've

00:33:07,440 --> 00:33:12,559
kept gdk3 alive and and modern

00:33:10,240 --> 00:33:13,760
in that way but now that that we have

00:33:12,559 --> 00:33:16,240
gtk4

00:33:13,760 --> 00:33:18,159
we kind of need to take a look at what

00:33:16,240 --> 00:33:20,640
the future holds for lip handy and

00:33:18,159 --> 00:33:24,000
similar libraries such as elementaries

00:33:20,640 --> 00:33:27,519
granite and um

00:33:24,000 --> 00:33:29,919
yes so currently this list is not really

00:33:27,519 --> 00:33:31,600
a road map it's it's just a grab bag of

00:33:29,919 --> 00:33:34,159
ideas really but we'll have a

00:33:31,600 --> 00:33:35,519
and it's not not exactly clear yet which

00:33:34,159 --> 00:33:38,000
of these we can do in

00:33:35,519 --> 00:33:38,559
gtk 4.x and which of these will have to

00:33:38,000 --> 00:33:41,760
wait for

00:33:38,559 --> 00:33:42,640
gtk five um in fact we'll have a

00:33:41,760 --> 00:33:45,919
planning meeting

00:33:42,640 --> 00:33:48,799
um to discuss this topic uh very soon

00:33:45,919 --> 00:33:49,279
probably next week or the week after and

00:33:48,799 --> 00:33:51,279
uh

00:33:49,279 --> 00:33:52,399
i'm sure we'll write a rewrite a blog

00:33:51,279 --> 00:33:55,840
post

00:33:52,399 --> 00:33:55,840
with any updates on that

00:33:56,080 --> 00:34:02,000
and that is really what i had to

00:33:59,440 --> 00:34:03,120
present here today i hope the demos i

00:34:02,000 --> 00:34:05,760
showed

00:34:03,120 --> 00:34:07,679
give you some idea of what's possible to

00:34:05,760 --> 00:34:09,919
do with gtk4 and make you

00:34:07,679 --> 00:34:10,800
maybe want to try it out and maybe look

00:34:09,919 --> 00:34:13,520
at parting

00:34:10,800 --> 00:34:14,399
some of your applications and with that

00:34:13,520 --> 00:34:21,839
i'll

00:34:14,399 --> 00:34:21,839
probably open it up for questions

00:34:25,409 --> 00:34:28,459
[Music]

00:34:29,440 --> 00:34:34,399
yeah okay so um let me let me go there

00:34:32,720 --> 00:34:35,280
i'll just read the questions as i see

00:34:34,399 --> 00:34:37,679
them

00:34:35,280 --> 00:34:38,639
and we'll try to give you answers all

00:34:37,679 --> 00:34:42,040
right

00:34:38,639 --> 00:34:46,560
first question will gtk4 work on mac os

00:34:42,040 --> 00:34:46,560
11.0.1 that got released today

00:34:47,119 --> 00:34:51,359
good question um i don't have a mac

00:34:48,879 --> 00:34:52,480
myself and as i mentioned earlier in the

00:34:51,359 --> 00:34:54,240
presentation

00:34:52,480 --> 00:34:56,800
we're having a new mac os backend that

00:34:54,240 --> 00:34:58,960
is being worked on which is um

00:34:56,800 --> 00:35:00,480
not quite complete yet but uh it's

00:34:58,960 --> 00:35:02,880
getting there christian herget is doing

00:35:00,480 --> 00:35:05,040
that work because he

00:35:02,880 --> 00:35:06,880
has a mac at home and uh was interested

00:35:05,040 --> 00:35:11,040
in taking this up

00:35:06,880 --> 00:35:14,320
i assume that uh once the back end uh

00:35:11,040 --> 00:35:15,200
is functional it'll work on mac os 11.1

00:35:14,320 --> 00:35:17,520
but i

00:35:15,200 --> 00:35:19,040
i can't tell you that anybody has had an

00:35:17,520 --> 00:35:22,560
opportunity to

00:35:19,040 --> 00:35:26,400
to verify that in practice yet

00:35:22,560 --> 00:35:28,240
next question um what conclusions from

00:35:26,400 --> 00:35:30,640
greg's keynote talk would you bring to

00:35:28,240 --> 00:35:32,560
gdk um

00:35:30,640 --> 00:35:33,920
yeah i'm sorry to say i missed black's

00:35:32,560 --> 00:35:35,359
keynote i'm really

00:35:33,920 --> 00:35:37,599
would have loved to see it but i was

00:35:35,359 --> 00:35:39,920
preparing for my talk so i can't

00:35:37,599 --> 00:35:41,760
can't really answer that i'm sorry i'll

00:35:39,920 --> 00:35:42,320
have to go back and and watch the video

00:35:41,760 --> 00:35:45,520
of that

00:35:42,320 --> 00:35:47,119
before i can say something um

00:35:45,520 --> 00:35:49,520
next question is android finally

00:35:47,119 --> 00:35:53,280
supported for gtk4

00:35:49,520 --> 00:35:56,000
um no not as of today

00:35:53,280 --> 00:35:57,040
and what i said in one of the slides is

00:35:56,000 --> 00:35:59,040
that

00:35:57,040 --> 00:36:01,359
we've simplified our gdk backend

00:35:59,040 --> 00:36:03,200
interface quite a bit so in theory

00:36:01,359 --> 00:36:04,560
it should be easier now to write an

00:36:03,200 --> 00:36:07,119
android backend

00:36:04,560 --> 00:36:08,480
than it was for gtk3 but so far nobody

00:36:07,119 --> 00:36:12,480
has

00:36:08,480 --> 00:36:14,160
started to look at that seriously and

00:36:12,480 --> 00:36:15,839
um if anybody's interested in that i

00:36:14,160 --> 00:36:16,960
don't think the gdk team itself has the

00:36:15,839 --> 00:36:18,960
bandwidth

00:36:16,960 --> 00:36:20,720
to take that on we are lucky that we

00:36:18,960 --> 00:36:23,599
have christian herget

00:36:20,720 --> 00:36:25,760
working on a new osx back-end but we

00:36:23,599 --> 00:36:27,920
don't really have um

00:36:25,760 --> 00:36:30,240
enough people to to produce more

00:36:27,920 --> 00:36:31,839
back-ends

00:36:30,240 --> 00:36:34,000
by ourselves i mean if anybody else

00:36:31,839 --> 00:36:37,920
wants to show up we'd be very happy to

00:36:34,000 --> 00:36:37,920
to help out and guide any efforts

00:36:38,000 --> 00:36:42,240
next question will theming change any in

00:36:40,240 --> 00:36:45,760
jdk4

00:36:42,240 --> 00:36:48,720
um not significantly i think our css

00:36:45,760 --> 00:36:51,839
support in gtk3 was already

00:36:48,720 --> 00:36:53,440
more or less at the same level than it

00:36:51,839 --> 00:36:55,920
is now ngk4

00:36:53,440 --> 00:36:57,680
if anything we've probably removed a few

00:36:55,920 --> 00:36:59,440
custom things that um

00:36:57,680 --> 00:37:01,599
were not necessary anymore because we

00:36:59,440 --> 00:37:05,440
now support more of the standard

00:37:01,599 --> 00:37:06,960
the css mechanisms for doing things but

00:37:05,440 --> 00:37:09,440
basically the theming is all the same

00:37:06,960 --> 00:37:11,200
you have a css style sheet

00:37:09,440 --> 00:37:12,720
and widgets have element names and can

00:37:11,200 --> 00:37:17,839
have style classes

00:37:12,720 --> 00:37:17,839
and all that is unchanged from gtk3

00:37:20,400 --> 00:37:24,480
next question who are gtk developers

00:37:22,720 --> 00:37:27,520
keen hobbyists paid by red hat

00:37:24,480 --> 00:37:29,440
something else um we have both

00:37:27,520 --> 00:37:31,839
we have people who are paid by red hat

00:37:29,440 --> 00:37:32,240
and are paid to work on gtk and we have

00:37:31,839 --> 00:37:34,720
some

00:37:32,240 --> 00:37:36,480
people who also work at red hat but work

00:37:34,720 --> 00:37:37,599
on gtk is their hobby and we have people

00:37:36,480 --> 00:37:40,400
who do not work at

00:37:37,599 --> 00:37:42,640
red hat for instance in monorail is uh

00:37:40,400 --> 00:37:44,800
employed by the globe foundation

00:37:42,640 --> 00:37:46,640
as a developer to work on gdk and other

00:37:44,800 --> 00:37:49,680
things

00:37:46,640 --> 00:37:50,160
and yes um so it's a it's a small team

00:37:49,680 --> 00:37:52,400
of

00:37:50,160 --> 00:37:54,400
i would say between five and ten people

00:37:52,400 --> 00:37:57,599
who regularly contribute to

00:37:54,400 --> 00:37:59,040
uh to gtk and a larger group of people

00:37:57,599 --> 00:38:01,520
who are

00:37:59,040 --> 00:38:04,560
filing issues and sometimes provide

00:38:01,520 --> 00:38:07,920
fixes as well

00:38:04,560 --> 00:38:11,920
next question is there a vulcan back end

00:38:07,920 --> 00:38:13,440
so um yes um maybe i'll

00:38:11,920 --> 00:38:14,640
step back a little bit here to say um

00:38:13,440 --> 00:38:15,920
there's two different things here we

00:38:14,640 --> 00:38:17,760
have um

00:38:15,920 --> 00:38:19,599
gdk has back ends for different

00:38:17,760 --> 00:38:21,280
platforms as i said earlier we have an

00:38:19,599 --> 00:38:23,040
osx back-end for

00:38:21,280 --> 00:38:24,560
that's essentially the windowing system

00:38:23,040 --> 00:38:26,960
part of of gtk that

00:38:24,560 --> 00:38:28,480
um where we have one back-end for each

00:38:26,960 --> 00:38:30,400
platform there's a windows backend

00:38:28,480 --> 00:38:32,160
there's a

00:38:30,400 --> 00:38:34,480
in x11 back-end there's a wayland

00:38:32,160 --> 00:38:38,480
back-end and we have a back-end for

00:38:34,480 --> 00:38:39,040
called broadway for rendering um gtk uis

00:38:38,480 --> 00:38:42,079
um

00:38:39,040 --> 00:38:44,160
in a web browser and that's the that's

00:38:42,079 --> 00:38:46,320
the windowing part and then there's a

00:38:44,160 --> 00:38:47,839
renderer which is uh basically um

00:38:46,320 --> 00:38:50,800
determines how we render

00:38:47,839 --> 00:38:52,320
and as i said we are using opengl now so

00:38:50,800 --> 00:38:55,200
that's done by the

00:38:52,320 --> 00:38:56,640
gl renderer and we do have a vulcan

00:38:55,200 --> 00:39:00,079
renderer as well

00:38:56,640 --> 00:39:02,640
which is um somewhat less complete so

00:39:00,079 --> 00:39:03,200
for 4.0 i think the gl renderer will be

00:39:02,640 --> 00:39:06,400
our

00:39:03,200 --> 00:39:06,800
primary best supported renderer we do

00:39:06,400 --> 00:39:09,040
have

00:39:06,800 --> 00:39:09,920
a cairo renderer as well which is the

00:39:09,040 --> 00:39:11,680
the

00:39:09,920 --> 00:39:13,599
renderer that gets used as fallback when

00:39:11,680 --> 00:39:15,040
we don't have uh hardware acceleration

00:39:13,599 --> 00:39:17,599
available

00:39:15,040 --> 00:39:18,240
um yes but the vulcan will convert a

00:39:17,599 --> 00:39:22,079
little less

00:39:18,240 --> 00:39:22,079
mature maybe than the gl one and

00:39:22,160 --> 00:39:25,839
part of the problem here is that we as

00:39:23,680 --> 00:39:28,079
gdk developers are not really expert

00:39:25,839 --> 00:39:29,680
experts in using any of these apis so we

00:39:28,079 --> 00:39:32,000
are not game developers who

00:39:29,680 --> 00:39:32,800
who have extensive knowledge in how gl

00:39:32,000 --> 00:39:35,280
works or how

00:39:32,800 --> 00:39:35,920
vulcan works so we are kind of feeling

00:39:35,280 --> 00:39:38,320
our way

00:39:35,920 --> 00:39:39,440
into these apis and and do as best as we

00:39:38,320 --> 00:39:42,800
can

00:39:39,440 --> 00:39:45,920
but vulcan is is not an easy api to

00:39:42,800 --> 00:39:46,400
to handle in this version so if anybody

00:39:45,920 --> 00:39:48,800
uh

00:39:46,400 --> 00:39:49,839
pass experience using vulcan and doing

00:39:48,800 --> 00:39:51,760
vulcan development

00:39:49,839 --> 00:39:54,640
and helping out with the vulcan backend

00:39:51,760 --> 00:39:57,520
would be very much appreciated

00:39:54,640 --> 00:39:59,839
all right next question could gtk4 demo

00:39:57,520 --> 00:40:02,079
be added to flatter as a flat pick

00:39:59,839 --> 00:40:04,160
i feel that would build hype and let's

00:40:02,079 --> 00:40:06,720
let the developers get hands on it

00:40:04,160 --> 00:40:07,680
even easier i think that's a great idea

00:40:06,720 --> 00:40:10,880
we do actually ship

00:40:07,680 --> 00:40:12,079
um we do have flat pack builds of of our

00:40:10,880 --> 00:40:15,520
demo apps both of

00:40:12,079 --> 00:40:18,119
jdk demo and of widget factory

00:40:15,520 --> 00:40:20,160
they are uh available from from

00:40:18,119 --> 00:40:22,880
gitlab.nom

00:40:20,160 --> 00:40:24,240
but uh putting them on on flat up sounds

00:40:22,880 --> 00:40:26,400
like a great idea we should look into

00:40:24,240 --> 00:40:26,400
that

00:40:26,480 --> 00:40:30,160
next question what is the gtk for mm

00:40:29,440 --> 00:40:33,040
status

00:40:30,160 --> 00:40:33,839
um i'll take that question a little more

00:40:33,040 --> 00:40:36,400
generally

00:40:33,839 --> 00:40:38,079
and talk about bindings in general so um

00:40:36,400 --> 00:40:39,359
there's a lot of bindings for gtk that

00:40:38,079 --> 00:40:42,560
has always been

00:40:39,359 --> 00:40:44,079
one of our strengths um and the gdk team

00:40:42,560 --> 00:40:44,560
does not have the bandwidth to work on

00:40:44,079 --> 00:40:47,359
them

00:40:44,560 --> 00:40:48,960
ourselves um we can provide the

00:40:47,359 --> 00:40:52,160
introspection data like the

00:40:48,960 --> 00:40:54,000
girl file that all the g object

00:40:52,160 --> 00:40:55,839
introspection based bindings are using

00:40:54,000 --> 00:40:56,560
and and we try to keep those up to date

00:40:55,839 --> 00:40:59,680
and

00:40:56,560 --> 00:41:01,280
um fix any uh any binding api issues

00:40:59,680 --> 00:41:02,400
that people point out to us

00:41:01,280 --> 00:41:04,640
but we we don't really have the

00:41:02,400 --> 00:41:06,880
bandwidth to work on on

00:41:04,640 --> 00:41:08,800
bindings ourselves so i don't actually

00:41:06,880 --> 00:41:12,400
know if anybody is working on

00:41:08,800 --> 00:41:16,640
on porting gtk mmm to gtk4

00:41:12,400 --> 00:41:19,280
um so i can't can't really answer that

00:41:16,640 --> 00:41:20,480
i do know that people are um fixing up

00:41:19,280 --> 00:41:22,800
the um

00:41:20,480 --> 00:41:24,480
pi g object bindings um there's some

00:41:22,800 --> 00:41:26,000
overrides in there that need adjustments

00:41:24,480 --> 00:41:27,680
for gtk4 and

00:41:26,000 --> 00:41:30,240
i think that's actively being worked on

00:41:27,680 --> 00:41:34,400
and i think you hope to have working

00:41:30,240 --> 00:41:37,440
python bindings at least for 4.0

00:41:34,400 --> 00:41:40,560
next question gtk5 how long is gtk4

00:41:37,440 --> 00:41:43,200
meant to last so um as i

00:41:40,560 --> 00:41:44,079
as i alluded to in my presentation we

00:41:43,200 --> 00:41:46,079
will have a

00:41:44,079 --> 00:41:47,119
planning meeting with the core gtk team

00:41:46,079 --> 00:41:49,040
um

00:41:47,119 --> 00:41:51,440
in the next week or two where i guess

00:41:49,040 --> 00:41:53,520
this topic will be discussed

00:41:51,440 --> 00:41:54,800
um so i don't really have a firm answer

00:41:53,520 --> 00:41:56,400
on this yet my own

00:41:54,800 --> 00:41:57,920
my own opinion on this is that we should

00:41:56,400 --> 00:41:59,760
probably aim

00:41:57,920 --> 00:42:02,319
for um what we said when we when we

00:41:59,760 --> 00:42:05,040
started gtk for work we said

00:42:02,319 --> 00:42:06,319
we'll have gtk4 in two years and it

00:42:05,040 --> 00:42:08,720
turned out

00:42:06,319 --> 00:42:09,839
that that estimate was wrong to nobody's

00:42:08,720 --> 00:42:12,240
surprise we took

00:42:09,839 --> 00:42:13,200
twice as long it has taken us four years

00:42:12,240 --> 00:42:15,119
now i think that was

00:42:13,200 --> 00:42:16,319
probably a little bit too long in

00:42:15,119 --> 00:42:19,040
retrospect

00:42:16,319 --> 00:42:20,640
and i would hope that we can do a gtk5 a

00:42:19,040 --> 00:42:22,400
little sooner but

00:42:20,640 --> 00:42:24,240
it's an estimate so you know how to take

00:42:22,400 --> 00:42:28,960
it

00:42:24,240 --> 00:42:30,960
next question what's the future of cairo

00:42:28,960 --> 00:42:32,160
uh good question maybe some of you saw

00:42:30,960 --> 00:42:34,160
uh saw um

00:42:32,160 --> 00:42:37,040
that pop up on hacker news this morning

00:42:34,160 --> 00:42:38,800
i i'm struggling um to find somebody to

00:42:37,040 --> 00:42:40,560
do a camera release that we

00:42:38,800 --> 00:42:43,280
we kind of need because we want some of

00:42:40,560 --> 00:42:45,280
the bug fixes in the front rendering

00:42:43,280 --> 00:42:47,200
that are in cairo master but

00:42:45,280 --> 00:42:48,319
have not seen a release even though they

00:42:47,200 --> 00:42:51,520
have been merged more than

00:42:48,319 --> 00:42:53,119
way more than a year ago and um

00:42:51,520 --> 00:42:54,960
currently still struggling to figure out

00:42:53,119 --> 00:42:55,839
who i can convince to upload a cairo

00:42:54,960 --> 00:42:58,240
table

00:42:55,839 --> 00:42:59,520
so um chiro development is not entirely

00:42:58,240 --> 00:43:00,560
dead there's people who are committing

00:42:59,520 --> 00:43:02,000
things but i

00:43:00,560 --> 00:43:03,599
i'm strongly struggling to find a

00:43:02,000 --> 00:43:05,760
maintainer who who can

00:43:03,599 --> 00:43:07,520
do an actual release because as things

00:43:05,760 --> 00:43:09,599
stand most linux distributions still

00:43:07,520 --> 00:43:12,560
ship cairo 116

00:43:09,599 --> 00:43:13,440
which is almost three years older now i

00:43:12,560 --> 00:43:15,319
think

00:43:13,440 --> 00:43:17,119
and the latest development snapshot

00:43:15,319 --> 00:43:19,280
117.2

00:43:17,119 --> 00:43:20,240
is also one and a half years old now so

00:43:19,280 --> 00:43:21,599
um

00:43:20,240 --> 00:43:24,240
things aren't looking too bright in

00:43:21,599 --> 00:43:24,240
cairo and

00:43:25,040 --> 00:43:28,720
we'll have to figure out um what we can

00:43:27,280 --> 00:43:31,200
do there um

00:43:28,720 --> 00:43:32,560
we certainly it's more palatable now

00:43:31,200 --> 00:43:34,160
than than it was in the past to use

00:43:32,560 --> 00:43:37,599
other rendering apis with

00:43:34,160 --> 00:43:40,400
with gtk um we don't

00:43:37,599 --> 00:43:41,040
our draw callback that we had in gdk3

00:43:40,400 --> 00:43:42,960
was

00:43:41,040 --> 00:43:44,800
taking a cairo context so basically you

00:43:42,960 --> 00:43:46,800
were forced to use cairo

00:43:44,800 --> 00:43:48,880
and that is no longer the case in gtk4

00:43:46,800 --> 00:43:52,400
we have a

00:43:48,880 --> 00:43:54,880
snapshot refund that replaces the draw

00:43:52,400 --> 00:43:57,200
defunct in gtk3 and that does not take a

00:43:54,880 --> 00:43:59,599
chiral context it takes a

00:43:57,200 --> 00:44:00,400
thing called a gtk snapshot object to

00:43:59,599 --> 00:44:02,000
which you add

00:44:00,400 --> 00:44:04,560
the render nodes that make up your scene

00:44:02,000 --> 00:44:06,240
graph and if you want you can

00:44:04,560 --> 00:44:08,319
you can create a chiral render node

00:44:06,240 --> 00:44:10,240
which will then give you a cairo context

00:44:08,319 --> 00:44:13,520
to do chiro drawing

00:44:10,240 --> 00:44:16,160
but it's no longer a

00:44:13,520 --> 00:44:17,440
expected part of the of the snapshot api

00:44:16,160 --> 00:44:20,720
so in

00:44:17,440 --> 00:44:20,720
principle we are slowly

00:44:21,119 --> 00:44:25,520
reducing our dependency on cairo but um

00:44:24,240 --> 00:44:27,359
it's certainly still very common to

00:44:25,520 --> 00:44:30,400
render things using cairo

00:44:27,359 --> 00:44:33,280
in gtk applications so we still need

00:44:30,400 --> 00:44:33,280
that kind of release

00:44:33,440 --> 00:44:37,200
next question is it possible to develop

00:44:35,280 --> 00:44:40,400
gtk using other lengths

00:44:37,200 --> 00:44:41,920
like rust or go i think there's

00:44:40,400 --> 00:44:44,079
just two answers to that the first one

00:44:41,920 --> 00:44:45,920
the the first question here is is it

00:44:44,079 --> 00:44:48,560
possible to write applications uh

00:44:45,920 --> 00:44:49,760
http applications in other languages and

00:44:48,560 --> 00:44:52,400
for that the answer is

00:44:49,760 --> 00:44:54,240
a very definitive yes we have as i said

00:44:52,400 --> 00:44:55,839
a lot of bindings and

00:44:54,240 --> 00:44:58,480
in particular there's rust bindings

00:44:55,839 --> 00:44:59,839
being actively developed currently

00:44:58,480 --> 00:45:02,960
and there's bindings for many other

00:44:59,839 --> 00:45:06,720
languages on the gtk website

00:45:02,960 --> 00:45:08,720
and as those bindings um

00:45:06,720 --> 00:45:10,400
get adapted to gtk4 you'll be able to

00:45:08,720 --> 00:45:11,920
write gtk for applications in any of

00:45:10,400 --> 00:45:14,560
those languages

00:45:11,920 --> 00:45:15,760
as to whether you can develop gtk itself

00:45:14,560 --> 00:45:17,440
using other languages

00:45:15,760 --> 00:45:20,000
for that the answer currently is we

00:45:17,440 --> 00:45:20,800
stick to we stick to c because that's

00:45:20,000 --> 00:45:24,400
the

00:45:20,800 --> 00:45:26,319
the universal universal uh language that

00:45:24,400 --> 00:45:29,040
makes binding to any other language

00:45:26,319 --> 00:45:30,640
relatively easy now whether we in the

00:45:29,040 --> 00:45:32,960
future want to consider

00:45:30,640 --> 00:45:35,119
allowing rust code in the gtk code base

00:45:32,960 --> 00:45:38,480
as long as it has a

00:45:35,119 --> 00:45:41,440
c api exported that

00:45:38,480 --> 00:45:46,079
is to be seen i'm sure that people would

00:45:41,440 --> 00:45:46,079

YouTube URL: https://www.youtube.com/watch?v=qjF-VotgfeY


