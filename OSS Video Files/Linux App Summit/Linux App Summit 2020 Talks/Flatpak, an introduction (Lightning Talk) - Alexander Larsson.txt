Title: Flatpak, an introduction (Lightning Talk) - Alexander Larsson
Publication date: 2020-11-15
Playlist: Linux App Summit 2020 Talks
Description: 
	This is a short non-technical introduction to flatpak. It will talk about what Flatpak is and what problems it tries to solve. The focus is on application developers that want to distribute their application (rather than end users).
Captions: 
	00:00:00,719 --> 00:00:04,480
all right i guess we'll start this is

00:00:02,480 --> 00:00:08,400
where

00:00:04,480 --> 00:00:08,800
um so that's gonna be a pretty short

00:00:08,400 --> 00:00:12,000
talk

00:00:08,800 --> 00:00:14,880
uh focusing on like non-technical stuff

00:00:12,000 --> 00:00:15,839
for flat packs seen from the perspective

00:00:14,880 --> 00:00:18,320
of

00:00:15,839 --> 00:00:20,880
like an application developer and not

00:00:18,320 --> 00:00:24,160
necessarily an end user

00:00:20,880 --> 00:00:24,480
i think most people know what flatback

00:00:24,160 --> 00:00:26,960
is

00:00:24,480 --> 00:00:27,519
it's kind of an app store system so i'm

00:00:26,960 --> 00:00:30,320
not going to

00:00:27,519 --> 00:00:31,359
talk too much about that because most

00:00:30,320 --> 00:00:35,040
much more interesting

00:00:31,359 --> 00:00:37,840
than what it is is why it is uh

00:00:35,040 --> 00:00:40,320
i i had like a bunch of high level goals

00:00:37,840 --> 00:00:44,160
that are not really technical

00:00:40,320 --> 00:00:46,320
then are more of

00:00:44,160 --> 00:00:48,399
a solution to how things work in the

00:00:46,320 --> 00:00:51,920
community and how we develop on the on

00:00:48,399 --> 00:00:54,160
the linux desktop that i wanted to fix

00:00:51,920 --> 00:00:55,760
and the first the first goal i had was

00:00:54,160 --> 00:00:57,120
to improve the user developer

00:00:55,760 --> 00:00:58,879
interaction

00:00:57,120 --> 00:01:00,399
in the traditional model and whenever i

00:00:58,879 --> 00:01:02,719
say traditional here i kind of mean the

00:01:00,399 --> 00:01:05,119
distro model

00:01:02,719 --> 00:01:06,080
if you are an app developer and you want

00:01:05,119 --> 00:01:07,840
to do a release

00:01:06,080 --> 00:01:09,360
you put a toggle somewhere and you send

00:01:07,840 --> 00:01:11,200
a bunch of mails and tell a bunch of

00:01:09,360 --> 00:01:14,320
people about it

00:01:11,200 --> 00:01:16,320
and then use it back and wait for distro

00:01:14,320 --> 00:01:18,880
to find your tarball package it up and

00:01:16,320 --> 00:01:20,960
release it to user

00:01:18,880 --> 00:01:22,159
this sometimes happens directly

00:01:20,960 --> 00:01:25,040
sometimes

00:01:22,159 --> 00:01:26,960
like you have to wait a long time and

00:01:25,040 --> 00:01:28,000
then your users get it they notice it

00:01:26,960 --> 00:01:29,920
crashes i mean

00:01:28,000 --> 00:01:32,479
there's a software it happens you report

00:01:29,920 --> 00:01:34,320
it upstream or you you report it to your

00:01:32,479 --> 00:01:35,840
distro typically

00:01:34,320 --> 00:01:37,439
and and there you have like some

00:01:35,840 --> 00:01:39,280
overloaded uh

00:01:37,439 --> 00:01:41,360
distro maintainer that eventually sees

00:01:39,280 --> 00:01:42,159
your bug notice that it's like an

00:01:41,360 --> 00:01:45,119
upstream issue

00:01:42,159 --> 00:01:47,040
so you follow the bug upstream and then

00:01:45,119 --> 00:01:49,280
you can see it and then you can fix it

00:01:47,040 --> 00:01:50,640
hopefully

00:01:49,280 --> 00:01:53,360
and there are a bunch of issues with

00:01:50,640 --> 00:01:54,960
this uh the most obvious one is that you

00:01:53,360 --> 00:01:58,960
might not get your app

00:01:54,960 --> 00:02:02,479
packaged like maybe it's just

00:01:58,960 --> 00:02:04,399
too french for for most that's just to

00:02:02,479 --> 00:02:07,439
care

00:02:04,399 --> 00:02:10,479
or maybe just you know takes forever

00:02:07,439 --> 00:02:12,720
for it to get packaged maybe your users

00:02:10,479 --> 00:02:15,599
are on w stable and they're being stable

00:02:12,720 --> 00:02:17,200
don't get updates until like

00:02:15,599 --> 00:02:19,520
a stable release which is every four

00:02:17,200 --> 00:02:23,200
years or whatever

00:02:19,520 --> 00:02:26,000
and and if you do get packaged

00:02:23,200 --> 00:02:26,879
and and have feedback it gets delayed

00:02:26,000 --> 00:02:30,000
because this

00:02:26,879 --> 00:02:32,480
there's this intermediate but the

00:02:30,000 --> 00:02:35,040
maintainer of the distro that has to

00:02:32,480 --> 00:02:36,720
handle all the input and once you get it

00:02:35,040 --> 00:02:38,480
it's delayed

00:02:36,720 --> 00:02:40,720
it might be hard to reach the individual

00:02:38,480 --> 00:02:43,680
or the the the user that

00:02:40,720 --> 00:02:44,800
filed the bug or or maybe he filed a bug

00:02:43,680 --> 00:02:46,400
against the current

00:02:44,800 --> 00:02:48,319
package version which is something you

00:02:46,400 --> 00:02:50,800
fixed a bunch

00:02:48,319 --> 00:02:54,239
bunch of fixes a long time ago but you

00:02:50,800 --> 00:02:56,080
know the users don't see that

00:02:54,239 --> 00:02:58,239
so so the goal with the flat pack model

00:02:56,080 --> 00:02:59,440
is that you are in control of releasing

00:02:58,239 --> 00:03:00,959
to users

00:02:59,440 --> 00:03:02,879
so when you release something because

00:03:00,959 --> 00:03:04,000
you fix the bug it goes directly to the

00:03:02,879 --> 00:03:06,319
user

00:03:04,000 --> 00:03:08,080
and the users report things directly to

00:03:06,319 --> 00:03:11,440
you and

00:03:08,080 --> 00:03:14,239
you get like non-stale

00:03:11,440 --> 00:03:16,000
information directly from the user and

00:03:14,239 --> 00:03:19,040
if you fix something you can push a fix

00:03:16,000 --> 00:03:21,200
the same day and you have the user just

00:03:19,040 --> 00:03:22,080
run update and verify that it's got

00:03:21,200 --> 00:03:27,280
fixed so

00:03:22,080 --> 00:03:27,280
so there's a lot more advantages here

00:03:27,360 --> 00:03:31,040
not only the obvious one that you can

00:03:28,959 --> 00:03:33,280
reach all the users but it's also like

00:03:31,040 --> 00:03:35,040
a much saner way to interact with users

00:03:33,280 --> 00:03:38,640
that that that

00:03:35,040 --> 00:03:40,640
can improve the community and and the

00:03:38,640 --> 00:03:44,319
the way we develop software

00:03:40,640 --> 00:03:46,000
uh you know we can basically make better

00:03:44,319 --> 00:03:49,120
software if we have a better interaction

00:03:46,000 --> 00:03:52,080
model so

00:03:49,120 --> 00:03:54,319
the second goal is to separate the apps

00:03:52,080 --> 00:03:58,000
from the operating system

00:03:54,319 --> 00:04:01,760
on no other system does like the app

00:03:58,000 --> 00:04:03,840
come with a system but in the district

00:04:01,760 --> 00:04:04,400
model everything is a package the os is

00:04:03,840 --> 00:04:05,920
a package

00:04:04,400 --> 00:04:07,680
the apps are a package and everything

00:04:05,920 --> 00:04:08,879
comes with the operated system

00:04:07,680 --> 00:04:10,720
and if it doesn't come with the

00:04:08,879 --> 00:04:14,400
operating system it's just not there

00:04:10,720 --> 00:04:15,360
it's just not possible so there are some

00:04:14,400 --> 00:04:17,120
some obvious

00:04:15,360 --> 00:04:19,199
uh problems with this you you can only

00:04:17,120 --> 00:04:21,600
use the things that are packaged

00:04:19,199 --> 00:04:22,960
uh and that's what people notice but

00:04:21,600 --> 00:04:27,280
there's also other issues

00:04:22,960 --> 00:04:30,479
that that affect how the community works

00:04:27,280 --> 00:04:32,240
like you can only like you're you're not

00:04:30,479 --> 00:04:34,639
just limited to using the apps that are

00:04:32,240 --> 00:04:38,560
packaged you're also limited

00:04:34,639 --> 00:04:41,360
to using the distros that have the apps

00:04:38,560 --> 00:04:42,000
like you can't pick a random new distro

00:04:41,360 --> 00:04:44,400
if it doesn't have

00:04:42,000 --> 00:04:47,919
all the apps you need and that means all

00:04:44,400 --> 00:04:49,600
the distros have to package all the apps

00:04:47,919 --> 00:04:51,600
and there's a lot of there's a lot of

00:04:49,600 --> 00:04:53,360
work in in making a distro there's a lot

00:04:51,600 --> 00:04:54,800
of interesting stuff happening in the

00:04:53,360 --> 00:04:58,000
overspace

00:04:54,800 --> 00:05:00,479
but it gets drowned by this

00:04:58,000 --> 00:05:01,680
requirement for everyone to package

00:05:00,479 --> 00:05:04,400
everything

00:05:01,680 --> 00:05:05,759
that just makes it hard to innovate or

00:05:04,400 --> 00:05:10,080
work on the interesting part of

00:05:05,759 --> 00:05:11,280
operating system development

00:05:10,080 --> 00:05:13,520
if if you were to use something like

00:05:11,280 --> 00:05:15,840
flatback instead

00:05:13,520 --> 00:05:18,400
you could share the work of maintaining

00:05:15,840 --> 00:05:21,600
and and the apps so like

00:05:18,400 --> 00:05:22,639
the upstream of the apps do the work of

00:05:21,600 --> 00:05:24,960
packaging

00:05:22,639 --> 00:05:26,560
and the distribution can focus on what's

00:05:24,960 --> 00:05:31,440
actually interested

00:05:26,560 --> 00:05:35,120
in the distribution world i think that's

00:05:31,440 --> 00:05:36,479
you know much more important actually

00:05:35,120 --> 00:05:39,360
than

00:05:36,479 --> 00:05:40,720
the availability of all the apps and all

00:05:39,360 --> 00:05:42,160
the distros

00:05:40,720 --> 00:05:44,160
but we can separate these things and

00:05:42,160 --> 00:05:45,280
make them to they are not the same we

00:05:44,160 --> 00:05:47,600
should they should be two different

00:05:45,280 --> 00:05:47,600
things

00:05:48,000 --> 00:05:53,120
so the other thing is that we want to

00:05:49,600 --> 00:05:56,800
protect users and linux is a unix

00:05:53,120 --> 00:05:58,800
and uh unix is historically considered a

00:05:56,800 --> 00:06:00,960
secure operating system and then i mean

00:05:58,800 --> 00:06:03,840
that's not wrong

00:06:00,960 --> 00:06:04,639
it has a bunch of security features it's

00:06:03,840 --> 00:06:06,639
just that those

00:06:04,639 --> 00:06:07,840
features are not necessarily what you

00:06:06,639 --> 00:06:10,880
want

00:06:07,840 --> 00:06:13,280
um their goal is to make you not be able

00:06:10,880 --> 00:06:15,199
to install printer drivers

00:06:13,280 --> 00:06:16,800
like if we're talking about the modern

00:06:15,199 --> 00:06:17,680
laptop where you run in your personal

00:06:16,800 --> 00:06:20,880
system

00:06:17,680 --> 00:06:24,000
the only like thing that

00:06:20,880 --> 00:06:26,960
that the unix multi-user

00:06:24,000 --> 00:06:27,680
system like permission system brings you

00:06:26,960 --> 00:06:30,080
so you can't do

00:06:27,680 --> 00:06:31,520
stuff that you would like to it doesn't

00:06:30,080 --> 00:06:34,160
actually protect you

00:06:31,520 --> 00:06:35,840
in the way you'd expect it to do right

00:06:34,160 --> 00:06:37,840
if you run a game that you just

00:06:35,840 --> 00:06:39,600
downloaded you don't want it to be able

00:06:37,840 --> 00:06:41,840
to read your mail

00:06:39,600 --> 00:06:43,280
or you know see your bitcoin or what

00:06:41,840 --> 00:06:45,360
have you i mean it's just

00:06:43,280 --> 00:06:46,800
there's no isolation whatsoever to

00:06:45,360 --> 00:06:49,360
protect you

00:06:46,800 --> 00:06:49,840
from or your data which is what you have

00:06:49,360 --> 00:06:52,639
on your

00:06:49,840 --> 00:06:54,160
uh in your home directory basically from

00:06:52,639 --> 00:06:56,240
the app or for

00:06:54,160 --> 00:06:57,599
or protect the data of one app from

00:06:56,240 --> 00:06:59,520
another

00:06:57,599 --> 00:07:01,280
there just isn't any in the traditional

00:06:59,520 --> 00:07:03,440
unix environment

00:07:01,280 --> 00:07:05,840
so what we want is the way to isolate an

00:07:03,440 --> 00:07:08,240
app so that it cannot

00:07:05,840 --> 00:07:09,360
affect things that we don't want it to

00:07:08,240 --> 00:07:12,560
but also

00:07:09,360 --> 00:07:16,479
we can control what it does

00:07:12,560 --> 00:07:18,720
and and you know ensure it it doesn't

00:07:16,479 --> 00:07:21,680
you know send spam on the network or

00:07:18,720 --> 00:07:24,720
whatever if we don't want it to

00:07:21,680 --> 00:07:27,840
uh obviously we have a

00:07:24,720 --> 00:07:30,960
you know 30 year old history of software

00:07:27,840 --> 00:07:33,599
and it's not meant to be sandboxed so

00:07:30,960 --> 00:07:35,120
all software that we have is not going

00:07:33,599 --> 00:07:36,160
to work in a sandbox environment so

00:07:35,120 --> 00:07:38,319
we've

00:07:36,160 --> 00:07:39,840
flatback has a very pragmatic approach

00:07:38,319 --> 00:07:42,160
to this where you can punch hold in the

00:07:39,840 --> 00:07:44,080
sandbox

00:07:42,160 --> 00:07:45,919
and you know a lot of people get us give

00:07:44,080 --> 00:07:49,120
us a lot of flack about that but

00:07:45,919 --> 00:07:49,759
in practice it's more interesting to be

00:07:49,120 --> 00:07:53,520
able to use

00:07:49,759 --> 00:07:55,680
apps than not uh

00:07:53,520 --> 00:07:58,639
but you know long term we want to make

00:07:55,680 --> 00:08:00,960
the sandboxing solution work

00:07:58,639 --> 00:08:01,840
you know as well as possible so that

00:08:00,960 --> 00:08:05,520
apps can

00:08:01,840 --> 00:08:06,960
migrate to that model

00:08:05,520 --> 00:08:08,800
so those are like kind of like the high

00:08:06,960 --> 00:08:12,240
level goals and

00:08:08,800 --> 00:08:16,000
i want to continue with some you know

00:08:12,240 --> 00:08:16,000
concepts and ideas that you get

00:08:16,400 --> 00:08:20,720
that you will see a lot when you start

00:08:18,160 --> 00:08:24,879
developing on flat pack

00:08:20,720 --> 00:08:26,400
so the first concept is that of runtimes

00:08:24,879 --> 00:08:28,000
applications depend on something called

00:08:26,400 --> 00:08:31,919
a runtime which is really

00:08:28,000 --> 00:08:34,159
just a word for shared dependencies

00:08:31,919 --> 00:08:35,919
and dependencies are things like files

00:08:34,159 --> 00:08:36,800
like you have a library file that you

00:08:35,919 --> 00:08:38,640
share

00:08:36,800 --> 00:08:40,640
and sharing it means you know we only

00:08:38,640 --> 00:08:44,320
store it once

00:08:40,640 --> 00:08:45,839
uh both in disk and in the disk cache

00:08:44,320 --> 00:08:47,360
but it also means that you can share the

00:08:45,839 --> 00:08:50,080
maintenance of

00:08:47,360 --> 00:08:50,959
the core dependencies like you app

00:08:50,080 --> 00:08:53,360
developer

00:08:50,959 --> 00:08:54,240
aren't necessarily super interested in

00:08:53,360 --> 00:08:56,959
in

00:08:54,240 --> 00:08:58,240
you know glibc versioning or hardcore

00:08:56,959 --> 00:09:02,560
low level features like

00:08:58,240 --> 00:09:06,000
how you make the gl drivers work

00:09:02,560 --> 00:09:07,680
so forcing those on apps at developers

00:09:06,000 --> 00:09:08,160
would be a bad thing so runtimes is a

00:09:07,680 --> 00:09:11,760
way

00:09:08,160 --> 00:09:13,519
we can avoid that and shared maintenance

00:09:11,760 --> 00:09:14,160
and they're parallel installable their

00:09:13,519 --> 00:09:16,160
version

00:09:14,160 --> 00:09:17,600
you can have money of them each

00:09:16,160 --> 00:09:20,480
individual app

00:09:17,600 --> 00:09:22,880
can test against one and choose when

00:09:20,480 --> 00:09:24,800
they want to update to the new version

00:09:22,880 --> 00:09:26,560
not there's no flag day where everyone

00:09:24,800 --> 00:09:29,920
has to move or anything like that it's

00:09:26,560 --> 00:09:32,480
up to each individual maintainer

00:09:29,920 --> 00:09:33,760
and if you do get updates there

00:09:32,480 --> 00:09:36,480
separately so like

00:09:33,760 --> 00:09:39,200
even an app that doesn't get updates

00:09:36,480 --> 00:09:41,920
gets update for the runtime which is

00:09:39,200 --> 00:09:45,120
where most of the core security problems

00:09:41,920 --> 00:09:45,120
might show up so that's good

00:09:45,519 --> 00:09:49,519
another concept that we see a lot is

00:09:47,040 --> 00:09:52,320
sandboxes and

00:09:49,519 --> 00:09:53,680
the the flat pack sandboxes are built on

00:09:52,320 --> 00:09:56,080
something called bubble wrap

00:09:53,680 --> 00:09:57,920
which is really just a command line

00:09:56,080 --> 00:09:59,680
interface to the kernel apis that we

00:09:57,920 --> 00:10:03,440
have for these

00:09:59,680 --> 00:10:05,600
c groups namespaces setcomp that kind of

00:10:03,440 --> 00:10:08,880
stuff

00:10:05,600 --> 00:10:10,720
it's similar to what docker uses the the

00:10:08,880 --> 00:10:12,560
main difference is that we have

00:10:10,720 --> 00:10:13,760
automatic integration with all this kind

00:10:12,560 --> 00:10:16,880
of stuff that

00:10:13,760 --> 00:10:19,360
the that the desktop requires it's you

00:10:16,880 --> 00:10:22,240
sets up all these sockets and

00:10:19,360 --> 00:10:23,519
it has filter debuss access and and you

00:10:22,240 --> 00:10:27,040
know

00:10:23,519 --> 00:10:29,360
it sets up dnri drivers in the right way

00:10:27,040 --> 00:10:32,399
and all the kind of low level things

00:10:29,360 --> 00:10:35,120
that apps eventually will need and then

00:10:32,399 --> 00:10:37,680
we have the concept of permissions which

00:10:35,120 --> 00:10:39,600
really is just about punching holes in

00:10:37,680 --> 00:10:41,920
the sandbox right so

00:10:39,600 --> 00:10:43,360
we show you during installation this app

00:10:41,920 --> 00:10:45,920
will require these holes

00:10:43,360 --> 00:10:48,079
if that's okay you can install it you

00:10:45,920 --> 00:10:49,839
can actually then override it even

00:10:48,079 --> 00:10:51,839
even though you your app required

00:10:49,839 --> 00:10:53,040
network access you can then override it

00:10:51,839 --> 00:10:56,320
to not let it have it

00:10:53,040 --> 00:10:57,040
i mean practices probably just breaks

00:10:56,320 --> 00:11:00,880
the app

00:10:57,040 --> 00:11:03,920
but you know it is possible

00:11:00,880 --> 00:11:05,600
but those are kind of static permissions

00:11:03,920 --> 00:11:07,839
that are set on

00:11:05,600 --> 00:11:09,839
on launching of the sandbox we also have

00:11:07,839 --> 00:11:12,959
something called portals

00:11:09,839 --> 00:11:17,440
and portals is more like a name for

00:11:12,959 --> 00:11:18,880
a concept of dynamic permissions

00:11:17,440 --> 00:11:20,720
where you have something running outside

00:11:18,880 --> 00:11:23,279
the app that

00:11:20,720 --> 00:11:24,880
does interaction with the user and

00:11:23,279 --> 00:11:28,399
controls the access

00:11:24,880 --> 00:11:30,480
to things like uh you know

00:11:28,399 --> 00:11:32,160
do you want do you want the app to have

00:11:30,480 --> 00:11:33,920
access to a camera

00:11:32,160 --> 00:11:36,880
the camera portal would be something

00:11:33,920 --> 00:11:40,399
that asks the user to pick a camera

00:11:36,880 --> 00:11:43,040
and and then the this

00:11:40,399 --> 00:11:45,120
interaction grants permissions to the

00:11:43,040 --> 00:11:47,519
calling app

00:11:45,120 --> 00:11:49,760
um you know the most commonly used

00:11:47,519 --> 00:11:51,920
example is the file chooser where

00:11:49,760 --> 00:11:54,480
the entire file user would run outside

00:11:51,920 --> 00:11:58,399
of the app and only the final

00:11:54,480 --> 00:11:58,399
selection will be passed back to the app

00:12:01,760 --> 00:12:05,519
flatback builder is a tool we have which

00:12:04,079 --> 00:12:08,160
is how most

00:12:05,519 --> 00:12:10,480
flatback apps are built it's not really

00:12:08,160 --> 00:12:13,920
a core part of flap pack

00:12:10,480 --> 00:12:16,800
uh you can and and some

00:12:13,920 --> 00:12:17,360
do build flatbacks in other ways like

00:12:16,800 --> 00:12:19,200
basically

00:12:17,360 --> 00:12:21,120
since it's just a file you can a bunch

00:12:19,200 --> 00:12:24,000
of files you can basically

00:12:21,120 --> 00:12:25,040
you know create a bunch of binaries in

00:12:24,000 --> 00:12:27,680
the right directory

00:12:25,040 --> 00:12:29,839
and choose a flat pack but most banks

00:12:27,680 --> 00:12:33,839
use flatback builder

00:12:29,839 --> 00:12:35,680
it has a json or jaml manifest

00:12:33,839 --> 00:12:37,600
they build stuff using flat packs so

00:12:35,680 --> 00:12:39,120
it's very reproducible it runs on any

00:12:37,600 --> 00:12:41,519
distro

00:12:39,120 --> 00:12:42,160
it uses runtimes again to build although

00:12:41,519 --> 00:12:45,680
they

00:12:42,160 --> 00:12:47,600
they are a custom style of of runtimes

00:12:45,680 --> 00:12:50,839
called sdk which is

00:12:47,600 --> 00:12:55,279
you know full of development

00:12:50,839 --> 00:12:57,839
tools so here's a typical

00:12:55,279 --> 00:12:58,800
typical uh more typical this is a very

00:12:57,839 --> 00:13:01,920
small

00:12:58,800 --> 00:13:03,279
manifest for building an app and then we

00:13:01,920 --> 00:13:07,360
have flat tab

00:13:03,279 --> 00:13:10,560
if you want to well

00:13:07,360 --> 00:13:11,920
basically anyone can create a flatback

00:13:10,560 --> 00:13:13,760
ripple

00:13:11,920 --> 00:13:15,040
we think that's very important however

00:13:13,760 --> 00:13:17,200
in practice everyone

00:13:15,040 --> 00:13:19,760
basically use user's laptop it's good

00:13:17,200 --> 00:13:23,519
better for everyone

00:13:19,760 --> 00:13:25,279
both developers and users

00:13:23,519 --> 00:13:27,279
pick i guess my time is up i don't know

00:13:25,279 --> 00:13:28,959
if there's anyone after this or

00:13:27,279 --> 00:13:30,880
if we have time to do questions or

00:13:28,959 --> 00:13:34,560
something

00:13:30,880 --> 00:13:34,560
we absolutely have to do

00:13:59,600 --> 00:14:03,839
like a gap in comparison to snap and

00:14:02,320 --> 00:14:08,800
traditional method

00:14:03,839 --> 00:14:08,800
methods such as deb rpm etc

00:14:09,040 --> 00:14:14,720
um yeah so obviously there is

00:14:12,399 --> 00:14:16,560
you know completely non-desktop things

00:14:14,720 --> 00:14:19,279
like running a

00:14:16,560 --> 00:14:19,920
a web server or something and and and in

00:14:19,279 --> 00:14:22,959
that case

00:14:19,920 --> 00:14:25,600
i think we're just not interested

00:14:22,959 --> 00:14:26,880
in in competing with that because the

00:14:25,600 --> 00:14:28,959
things that

00:14:26,880 --> 00:14:30,720
flatback does well which is integration

00:14:28,959 --> 00:14:32,560
with a desktop

00:14:30,720 --> 00:14:33,760
is it's not interesting for that those

00:14:32,560 --> 00:14:35,279
kinds of apps and

00:14:33,760 --> 00:14:37,600
and on the other hand if you look at the

00:14:35,279 --> 00:14:40,160
tools that that are available for

00:14:37,600 --> 00:14:42,560
for that kind of thing which is you know

00:14:40,160 --> 00:14:43,279
docker kubernetes all these clustering

00:14:42,560 --> 00:14:45,600
things

00:14:43,279 --> 00:14:46,480
the things they do is not something that

00:14:45,600 --> 00:14:49,360
flat pack does

00:14:46,480 --> 00:14:51,519
like port forwarding or complicated

00:14:49,360 --> 00:14:52,399
network setups and automatic scaling and

00:14:51,519 --> 00:14:55,120
all that

00:14:52,399 --> 00:14:55,440
we are not interested in doing that so

00:14:55,120 --> 00:14:58,000
we

00:14:55,440 --> 00:14:58,880
we don't have we don't want to compete

00:14:58,000 --> 00:15:00,720
with that

00:14:58,880 --> 00:15:04,959
i mean i guess there is an overlap where

00:15:00,720 --> 00:15:04,959
you have a a desktop thing

00:15:05,120 --> 00:15:09,279
that kind of runs as a server that

00:15:06,800 --> 00:15:11,600
serves in the background and

00:15:09,279 --> 00:15:12,639
and there's also the command line thing

00:15:11,600 --> 00:15:16,160
where

00:15:12,639 --> 00:15:17,760
some command lines are just server style

00:15:16,160 --> 00:15:20,079
things

00:15:17,760 --> 00:15:21,760
and some are more like midnight

00:15:20,079 --> 00:15:22,399
commander which is more like an app but

00:15:21,760 --> 00:15:26,079
it runs

00:15:22,399 --> 00:15:29,600
in in the command line so

00:15:26,079 --> 00:15:31,519
there is this these corner cases where

00:15:29,600 --> 00:15:32,639
it is possible to run command line apps

00:15:31,519 --> 00:15:35,759
in flat pack

00:15:32,639 --> 00:15:37,680
we have some interaction

00:15:35,759 --> 00:15:41,440
uh with them to try to make them more

00:15:37,680 --> 00:15:43,199
better work better uh

00:15:41,440 --> 00:15:45,120
we create wrapper file that you can

00:15:43,199 --> 00:15:48,480
easily alias into your

00:15:45,120 --> 00:15:51,440
as a command line uh or like alias so

00:15:48,480 --> 00:15:53,600
you can easily run them but

00:15:51,440 --> 00:15:56,720
we do have some we have things like a

00:15:53,600 --> 00:15:59,839
portal to automatically add

00:15:56,720 --> 00:16:01,440
a like a start on logging

00:15:59,839 --> 00:16:02,959
to the desktop you can start up a

00:16:01,440 --> 00:16:06,480
background thing

00:16:02,959 --> 00:16:08,240
i think we have portal that lets you

00:16:06,480 --> 00:16:09,519
add that but you still have to kind of

00:16:08,240 --> 00:16:12,560
launch your app

00:16:09,519 --> 00:16:15,040
once and then you can it can

00:16:12,560 --> 00:16:16,160
ask the desktop to have an autostart

00:16:15,040 --> 00:16:19,600
file

00:16:16,160 --> 00:16:23,680
could we do better than that possibly

00:16:19,600 --> 00:16:25,040
is it interesting it's certainly not in

00:16:23,680 --> 00:16:29,040
the

00:16:25,040 --> 00:16:31,120
focus of what we're working on but

00:16:29,040 --> 00:16:37,759
it might be there might be things we

00:16:31,120 --> 00:16:40,800
could do better

00:16:37,759 --> 00:16:43,759
all right well it looks like

00:16:40,800 --> 00:16:44,800
that oh we do have a second question

00:16:43,759 --> 00:16:47,519
great okay

00:16:44,800 --> 00:16:48,639
second question now that flat pack 1.0

00:16:47,519 --> 00:16:50,959
is out

00:16:48,639 --> 00:16:52,480
and is becoming more stable what's the

00:16:50,959 --> 00:16:55,759
next big feature

00:16:52,480 --> 00:16:58,880
or is it more around tools around around

00:16:55,759 --> 00:16:58,880
it such as portals

00:16:59,360 --> 00:17:03,279
yeah i mean so actually the next version

00:17:01,920 --> 00:17:06,400
is going to be kind of a large change

00:17:03,279 --> 00:17:09,919
but it's mostly an internals

00:17:06,400 --> 00:17:11,919
for scaling better on the network

00:17:09,919 --> 00:17:15,120
because flat tab is reaching like a

00:17:11,919 --> 00:17:17,839
thousand apps and it's gonna be

00:17:15,120 --> 00:17:20,319
gonna be important to to keep be able to

00:17:17,839 --> 00:17:23,280
keep going as the size goes up

00:17:20,319 --> 00:17:23,839
so so the next release will have kind of

00:17:23,280 --> 00:17:25,520
a large

00:17:23,839 --> 00:17:27,760
internal changes but it might not

00:17:25,520 --> 00:17:32,000
necessarily be a very

00:17:27,760 --> 00:17:35,039
visible change

00:17:32,000 --> 00:17:36,480
that being said i guess we have some

00:17:35,039 --> 00:17:38,640
new features that are interesting to

00:17:36,480 --> 00:17:41,280
look at uh

00:17:38,640 --> 00:17:41,840
more better support for different types

00:17:41,280 --> 00:17:47,039
of of

00:17:41,840 --> 00:17:48,720
uh network name spacing like right now

00:17:47,039 --> 00:17:50,080
network access is an old or nothing

00:17:48,720 --> 00:17:53,280
thing we're looking at maybe

00:17:50,080 --> 00:17:54,720
using some kind of uh nat like filtering

00:17:53,280 --> 00:17:57,520
or something and

00:17:54,720 --> 00:17:57,919
and there there certainly is a lot more

00:17:57,520 --> 00:18:01,440
work

00:17:57,919 --> 00:18:04,559
in the portals side of things

00:18:01,440 --> 00:18:06,559
and even like pipe wire

00:18:04,559 --> 00:18:07,919
and things in the in the in the larger

00:18:06,559 --> 00:18:11,600
ecosystem

00:18:07,919 --> 00:18:11,600
rather than flat pack itself i think

00:18:12,480 --> 00:18:17,200
as you know we get most features and and

00:18:15,520 --> 00:18:20,240
and things

00:18:17,200 --> 00:18:22,640
basically just work i i expect the

00:18:20,240 --> 00:18:25,600
development speed of flat pack itself

00:18:22,640 --> 00:18:25,600
kind of slows down

00:18:25,840 --> 00:18:33,120
and you know the things around it

00:18:30,000 --> 00:18:35,200
such as you know actually working on the

00:18:33,120 --> 00:18:42,799
runtimes

00:18:35,200 --> 00:18:45,840
and the portals and all that stuff

00:18:42,799 --> 00:18:47,600
one one thing that that i think kind of

00:18:45,840 --> 00:18:50,559
ties back to the previous one is

00:18:47,600 --> 00:18:52,240
the previous talk is that we have some

00:18:50,559 --> 00:18:55,360
initial work

00:18:52,240 --> 00:18:58,320
on the technology for for

00:18:55,360 --> 00:18:59,440
authentication and payments of flat

00:18:58,320 --> 00:19:00,720
packs and i think it would be

00:18:59,440 --> 00:19:04,640
interesting

00:19:00,720 --> 00:19:05,520
to have you know way to pay for flat

00:19:04,640 --> 00:19:08,320
packs

00:19:05,520 --> 00:19:10,080
but that's a mostly done on the

00:19:08,320 --> 00:19:12,880
technical side and all

00:19:10,080 --> 00:19:14,480
that has to be done is on there actually

00:19:12,880 --> 00:19:15,600
doing it and there's a lot of legal

00:19:14,480 --> 00:19:18,720
issues and

00:19:15,600 --> 00:19:20,880
you know actually having payments

00:19:18,720 --> 00:19:24,000
working and all that

00:19:20,880 --> 00:19:27,039
that that i think is is something really

00:19:24,000 --> 00:19:30,799
important to get done but

00:19:27,039 --> 00:19:32,000
again it's not necessarily in flatback

00:19:30,799 --> 00:19:37,679
itself it's more

00:19:32,000 --> 00:19:37,679

YouTube URL: https://www.youtube.com/watch?v=0yeXTounX3E


