Title: Wayland for App Developers - Aleix Pol Gonzalez
Publication date: 2020-11-15
Playlist: Linux App Summit 2020 Talks
Description: 
	In this presentation I would like to discuss a little bit about what Wayland means to application developers.

How does it compare to X11? What do I need to support it? What new challenges and opportunities does it put on the table? Let's see if we can shed light on it and move on together.
Captions: 
	00:00:00,320 --> 00:00:04,799
okay uh thanks thanks everyone for the

00:00:03,040 --> 00:00:08,400
virtual round of applause

00:00:04,799 --> 00:00:12,480
it was virtually great um all right

00:00:08,400 --> 00:00:15,120
so for the talk today i thought that um

00:00:12,480 --> 00:00:16,880
instead of talking about uh things that

00:00:15,120 --> 00:00:18,080
are happening which is what i generally

00:00:16,880 --> 00:00:21,520
talk about because

00:00:18,080 --> 00:00:24,320
i am a developer i thought um

00:00:21,520 --> 00:00:25,359
well what will developers care about

00:00:24,320 --> 00:00:27,439
when they start

00:00:25,359 --> 00:00:28,720
developing their applications in general

00:00:27,439 --> 00:00:31,279
we are talking about

00:00:28,720 --> 00:00:32,079
graphics or graphical applications much

00:00:31,279 --> 00:00:36,239
like what

00:00:32,079 --> 00:00:39,680
um matthias was just talking to us about

00:00:36,239 --> 00:00:42,719
like all of these uh fancy graphic

00:00:39,680 --> 00:00:44,399
effects and stuff and i think that it's

00:00:42,719 --> 00:00:47,200
important to understand

00:00:44,399 --> 00:00:48,000
what is the process for our application

00:00:47,200 --> 00:00:52,079
to go into

00:00:48,000 --> 00:00:54,239
our uh user screens and displays and

00:00:52,079 --> 00:00:55,680
well wherever they use it because this

00:00:54,239 --> 00:00:57,520
changes every day

00:00:55,680 --> 00:00:59,680
so that's why i thought it could make

00:00:57,520 --> 00:01:02,559
sense to

00:00:59,680 --> 00:01:04,159
well talk a little bit about what uh

00:01:02,559 --> 00:01:05,920
waylon is

00:01:04,159 --> 00:01:07,920
i am also talking about whalen

00:01:05,920 --> 00:01:10,400
specifically not which is

00:01:07,920 --> 00:01:11,600
where they're going at least for the

00:01:10,400 --> 00:01:14,640
community as a whole

00:01:11,600 --> 00:01:17,119
some of us are more advanced in

00:01:14,640 --> 00:01:17,920
adopting it than others but uh in the

00:01:17,119 --> 00:01:20,960
end

00:01:17,920 --> 00:01:22,960
it's not entirely the status quo yet so

00:01:20,960 --> 00:01:25,600
it's still a technology that

00:01:22,960 --> 00:01:27,520
uh i am guessing that some of the

00:01:25,600 --> 00:01:30,320
developers need to embrace still

00:01:27,520 --> 00:01:31,840
uh first of all let me ooh the penguins

00:01:30,320 --> 00:01:35,360
look weird this used to be

00:01:31,840 --> 00:01:38,159
uh penguins emoji i think that

00:01:35,360 --> 00:01:38,960
big bluebottom doesn't like my emojis

00:01:38,159 --> 00:01:41,200
but

00:01:38,960 --> 00:01:42,159
i mean they were more cute as penguins

00:01:41,200 --> 00:01:45,200
but sorry about that

00:01:42,159 --> 00:01:45,759
who am i uh well my name is alesh paul i

00:01:45,200 --> 00:01:48,720
am from

00:01:45,759 --> 00:01:50,000
barcelona i i have been developing kde

00:01:48,720 --> 00:01:53,600
software for the last

00:01:50,000 --> 00:01:57,200
uh 15 years maybe more

00:01:53,600 --> 00:01:59,840
i get old quickly um

00:01:57,200 --> 00:02:00,399
i am the kdp president as well right now

00:01:59,840 --> 00:02:03,040
but

00:02:00,399 --> 00:02:04,799
uh well i'm still a software engineer

00:02:03,040 --> 00:02:07,360
and i work for blue systems

00:02:04,799 --> 00:02:07,920
doing well software development within

00:02:07,360 --> 00:02:12,239
kde

00:02:07,920 --> 00:02:14,319
i've been involved both on developing

00:02:12,239 --> 00:02:15,440
different applications within kde edu

00:02:14,319 --> 00:02:18,319
for example

00:02:15,440 --> 00:02:20,560
okay developer and our id but i've also

00:02:18,319 --> 00:02:23,200
been working as well as

00:02:20,560 --> 00:02:24,640
within plasma doing well our software

00:02:23,200 --> 00:02:28,160
center and more recently

00:02:24,640 --> 00:02:30,400
working on quinn which is our well

00:02:28,160 --> 00:02:31,920
window manager back then and waylon

00:02:30,400 --> 00:02:35,120
compositor nowadays

00:02:31,920 --> 00:02:39,360
uh which is how i got to well

00:02:35,120 --> 00:02:41,680
thinking about this kind of topic now um

00:02:39,360 --> 00:02:43,599
a bit the history for those of you who

00:02:41,680 --> 00:02:45,760
haven't been around forever

00:02:43,599 --> 00:02:46,720
and i'm not gonna even claim that i've

00:02:45,760 --> 00:02:48,879
been around forever

00:02:46,720 --> 00:02:50,879
even if i've been around for 15 years

00:02:48,879 --> 00:02:54,800
because

00:02:50,879 --> 00:02:58,080
in unix time forever takes much longer

00:02:54,800 --> 00:03:00,480
x11 which is what well

00:02:58,080 --> 00:03:02,000
still a lot of people are using nowadays

00:03:00,480 --> 00:03:04,239
was

00:03:02,000 --> 00:03:05,440
a system that was designed in the in the

00:03:04,239 --> 00:03:09,120
80s

00:03:05,440 --> 00:03:12,159
in um in conjunction with

00:03:09,120 --> 00:03:13,840
unix i'm not gonna claim that i know

00:03:12,159 --> 00:03:17,040
what happened because i wasn't born

00:03:13,840 --> 00:03:20,000
even then but i think that uh

00:03:17,040 --> 00:03:21,760
well it shows two very things that are i

00:03:20,000 --> 00:03:23,920
think very important one that

00:03:21,760 --> 00:03:25,680
we've been working on technology that

00:03:23,920 --> 00:03:30,879
has been established over

00:03:25,680 --> 00:03:30,879
a very long time and also that

00:03:30,959 --> 00:03:34,720
there was an intuit for for a change

00:03:33,440 --> 00:03:36,480
because well

00:03:34,720 --> 00:03:37,920
the world has definitely changed since

00:03:36,480 --> 00:03:41,280
back then now

00:03:37,920 --> 00:03:42,879
uh x11 and x3 which was the

00:03:41,280 --> 00:03:45,360
implementation that we

00:03:42,879 --> 00:03:46,239
i guess most of us started using when we

00:03:45,360 --> 00:03:49,920
got introduced

00:03:46,239 --> 00:03:54,000
in in linux

00:03:49,920 --> 00:03:57,120
was developed for a big

00:03:54,000 --> 00:04:00,799
mainframe a computer sorry about that

00:03:57,120 --> 00:04:02,879
big main mainframe computer so that

00:04:00,799 --> 00:04:03,840
they could put it in a university in a

00:04:02,879 --> 00:04:06,879
company and

00:04:03,840 --> 00:04:10,319
everybody would well join and

00:04:06,879 --> 00:04:11,920
uh from their own dumb clients and

00:04:10,319 --> 00:04:15,760
they would get well their own little

00:04:11,920 --> 00:04:18,880
windows and things

00:04:15,760 --> 00:04:20,320
and get their job done in a big computer

00:04:18,880 --> 00:04:24,080
elsewhere which is actually

00:04:20,320 --> 00:04:27,840
how we don't work nowadays now we still

00:04:24,080 --> 00:04:29,840
do a lot of our work

00:04:27,840 --> 00:04:32,080
on the cloud which we call it nowadays

00:04:29,840 --> 00:04:35,600
back then it wasn't called the cloud

00:04:32,080 --> 00:04:36,400
uh but well the graphical things they

00:04:35,600 --> 00:04:39,840
always happen

00:04:36,400 --> 00:04:44,479
on our computers be it well a desktop

00:04:39,840 --> 00:04:44,479
computer but also a mobile phone

00:04:44,639 --> 00:04:49,120
which is quite telling right like back

00:04:46,320 --> 00:04:49,600
then the graphics part was considered

00:04:49,120 --> 00:04:52,960
something

00:04:49,600 --> 00:04:54,800
hard to do whereas nowadays it's the

00:04:52,960 --> 00:04:56,479
kind of thing that we relegate into

00:04:54,800 --> 00:04:59,680
every device because

00:04:56,479 --> 00:05:02,479
we're good enough at it

00:04:59,680 --> 00:05:04,800
anyway moving into the future uh which

00:05:02,479 --> 00:05:08,080
is actually when i started to uh

00:05:04,800 --> 00:05:12,000
be part of the community there was this

00:05:08,080 --> 00:05:15,440
xgl project which was all super fancy

00:05:12,000 --> 00:05:18,560
which basically what it was doing was

00:05:15,440 --> 00:05:23,280
to include in the

00:05:18,560 --> 00:05:26,240
linux desktop or yeah the desktop

00:05:23,280 --> 00:05:27,680
technologies that we had been getting

00:05:26,240 --> 00:05:31,919
familiarized with for

00:05:27,680 --> 00:05:35,280
for example games uh like opengl

00:05:31,919 --> 00:05:37,440
uh so that uh while our

00:05:35,280 --> 00:05:38,639
systems would be able to use the

00:05:37,440 --> 00:05:41,680
hardware accelerate

00:05:38,639 --> 00:05:42,240
acceleration that that we had available

00:05:41,680 --> 00:05:44,080
right

00:05:42,240 --> 00:05:45,360
uh something that i learned at

00:05:44,080 --> 00:05:48,080
university and

00:05:45,360 --> 00:05:48,479
many of you will have as well is that

00:05:48,080 --> 00:05:51,039
the

00:05:48,479 --> 00:05:52,000
universal way of making any program run

00:05:51,039 --> 00:05:55,199
faster is by

00:05:52,000 --> 00:05:57,520
making uh well hardware ad hoc for

00:05:55,199 --> 00:05:59,280
solving that problem right and well

00:05:57,520 --> 00:06:02,639
graphics was a problem back then

00:05:59,280 --> 00:06:06,319
like i said from the from the beginning

00:06:02,639 --> 00:06:07,120
uh and we got eventually harvard to do

00:06:06,319 --> 00:06:10,160
it that

00:06:07,120 --> 00:06:11,840
was uh well by 2006 it was already quite

00:06:10,160 --> 00:06:14,319
fancy

00:06:11,840 --> 00:06:15,759
um there were a lot of well 3d based

00:06:14,319 --> 00:06:19,120
games already that

00:06:15,759 --> 00:06:21,280
people were running even consoles and

00:06:19,120 --> 00:06:22,240
this kind of stuff so it made a lot of

00:06:21,280 --> 00:06:25,520
sense to use it

00:06:22,240 --> 00:06:27,840
on on our desktops now

00:06:25,520 --> 00:06:27,840
um

00:06:29,039 --> 00:06:32,720
this was something that was put on top

00:06:30,880 --> 00:06:35,120
of x11

00:06:32,720 --> 00:06:36,240
because that's what all of our

00:06:35,120 --> 00:06:38,800
applications

00:06:36,240 --> 00:06:40,560
uh understood and it was the only thing

00:06:38,800 --> 00:06:43,840
that we had that could talk to

00:06:40,560 --> 00:06:46,800
our uh graphics cards

00:06:43,840 --> 00:06:48,319
and well it kind of worked and it had a

00:06:46,800 --> 00:06:51,440
very famous demo

00:06:48,319 --> 00:06:53,840
with a cube rotating between the

00:06:51,440 --> 00:06:53,840
different

00:06:54,080 --> 00:06:58,240
the different desktops virtual desktops

00:06:57,039 --> 00:07:02,080
which was

00:06:58,240 --> 00:07:04,400
fancy and i mean today it doesn't sound

00:07:02,080 --> 00:07:05,599
like that impressive but back then it

00:07:04,400 --> 00:07:07,440
was like

00:07:05,599 --> 00:07:09,120
look at what this crazy people are doing

00:07:07,440 --> 00:07:10,400
and by the way this wasn't this didn't

00:07:09,120 --> 00:07:13,520
really happen in a bubble

00:07:10,400 --> 00:07:15,919
this is around this time also microsoft

00:07:13,520 --> 00:07:16,960
started doing that for windows as well

00:07:15,919 --> 00:07:21,599
and so did

00:07:16,960 --> 00:07:24,800
apple for for mac os um

00:07:21,599 --> 00:07:27,520
so this created this super complex

00:07:24,800 --> 00:07:29,440
kind of solution that was not really

00:07:27,520 --> 00:07:32,000
future proof so

00:07:29,440 --> 00:07:33,199
people started working into alternatives

00:07:32,000 --> 00:07:37,120
x11 and

00:07:33,199 --> 00:07:39,599
xorg already back then uh started to

00:07:37,120 --> 00:07:42,160
get adapted into these kind of premises

00:07:39,599 --> 00:07:42,160
and so did

00:07:42,960 --> 00:07:48,639
uh so um we started getting it and if

00:07:45,599 --> 00:07:50,160
you today start using an x11 based

00:07:48,639 --> 00:07:51,520
linux desktop you will see a lot of

00:07:50,160 --> 00:07:52,319
these features already available it's

00:07:51,520 --> 00:07:55,199
not like you need

00:07:52,319 --> 00:07:55,840
weyland to do to do all of this stuff

00:07:55,199 --> 00:07:57,759
but

00:07:55,840 --> 00:07:59,280
eventually in 2013 according to

00:07:57,759 --> 00:08:00,960
wikipedia all of these dates are

00:07:59,280 --> 00:08:02,960
according to wikipedia i'm not a

00:08:00,960 --> 00:08:06,639
historian myself sorry about that

00:08:02,960 --> 00:08:10,479
uh we started uh developing

00:08:06,639 --> 00:08:13,599
uh weyland which is what we are gonna

00:08:10,479 --> 00:08:17,680
cover during this talk today now

00:08:13,599 --> 00:08:20,319
um but click

00:08:17,680 --> 00:08:21,599
so why why why did we need uh other

00:08:20,319 --> 00:08:24,000
things what do we

00:08:21,599 --> 00:08:25,039
as application developers now we need to

00:08:24,000 --> 00:08:27,280
think about

00:08:25,039 --> 00:08:30,479
two target platforms in practice rather

00:08:27,280 --> 00:08:30,479
than just the one

00:08:31,360 --> 00:08:35,599
at least for for a transitional time

00:08:35,760 --> 00:08:38,959
well uh for

00:08:39,120 --> 00:08:44,640
for starters we want stability uh

00:08:42,399 --> 00:08:45,920
the development of of xorg and

00:08:44,640 --> 00:08:48,240
compositors on top

00:08:45,920 --> 00:08:49,360
became like it definitely works and it

00:08:48,240 --> 00:08:54,560
worked for

00:08:49,360 --> 00:08:56,320
a good 30 years without uh i would say

00:08:54,560 --> 00:08:59,120
without problems but then it weren't my

00:08:56,320 --> 00:09:02,320
problem so i i know that a lot of people

00:08:59,120 --> 00:09:03,360
uh well sweated a lot uh during the

00:09:02,320 --> 00:09:06,720
process

00:09:03,360 --> 00:09:09,200
and well people eventually wanted to

00:09:06,720 --> 00:09:11,279
have this more simpler solution where

00:09:09,200 --> 00:09:13,920
from a compositor

00:09:11,279 --> 00:09:15,040
you could decide how things work how

00:09:13,920 --> 00:09:17,600
things uh

00:09:15,040 --> 00:09:19,440
communicate between one another and the

00:09:17,600 --> 00:09:21,040
way you have as a maintainer to

00:09:19,440 --> 00:09:23,519
say this is stable this is something

00:09:21,040 --> 00:09:24,240
that i i feel capable of delivering to

00:09:23,519 --> 00:09:27,279
my

00:09:24,240 --> 00:09:28,640
my users is by being able to somewhat

00:09:27,279 --> 00:09:31,680
control and

00:09:28,640 --> 00:09:34,959
uh be able to decide on what the

00:09:31,680 --> 00:09:38,480
stack is um this is something that

00:09:34,959 --> 00:09:41,519
we do get by wayland uh through the

00:09:38,480 --> 00:09:44,800
um the newer design

00:09:41,519 --> 00:09:46,480
we also uh are looking towards having

00:09:44,800 --> 00:09:50,560
performance graphics right

00:09:46,480 --> 00:09:52,640
so in the x11 model we were we had

00:09:50,560 --> 00:09:55,200
the applications talking to the server

00:09:52,640 --> 00:09:58,240
the applications talking to the desktop

00:09:55,200 --> 00:10:02,079
uh well the compositor

00:09:58,240 --> 00:10:02,880
and there was a lot of moving pieces

00:10:02,079 --> 00:10:04,640
over there

00:10:02,880 --> 00:10:06,320
what we have right now though with

00:10:04,640 --> 00:10:07,760
weyland is a much simpler

00:10:06,320 --> 00:10:09,360
architecture where all of the

00:10:07,760 --> 00:10:12,480
applications or

00:10:09,360 --> 00:10:14,880
clients like we generally call them

00:10:12,480 --> 00:10:16,480
in weyland talk to the compositor the

00:10:14,880 --> 00:10:19,920
compositor

00:10:16,480 --> 00:10:21,920
is already doing graphics calls

00:10:19,920 --> 00:10:22,959
fairly low level or as low level as it

00:10:21,920 --> 00:10:26,320
wants to

00:10:22,959 --> 00:10:28,800
uh the the graphics card

00:10:26,320 --> 00:10:30,640
and the graphics card does its thing now

00:10:28,800 --> 00:10:33,680
this means that there's a lot of the

00:10:30,640 --> 00:10:35,360
infrastructure that x11 was giving us

00:10:33,680 --> 00:10:38,480
for free that we have had to

00:10:35,360 --> 00:10:38,959
to implement but then this also means

00:10:38,480 --> 00:10:42,320
that

00:10:38,959 --> 00:10:45,519
if uh you right now tell

00:10:42,320 --> 00:10:49,120
the maintainer of your system bit

00:10:45,519 --> 00:10:51,120
gnome or plasma or sway or whichever

00:10:49,120 --> 00:10:52,160
that something is not working as it

00:10:51,120 --> 00:10:54,240
should they

00:10:52,160 --> 00:10:55,200
get to give you a proper answer rather

00:10:54,240 --> 00:10:58,000
than saying

00:10:55,200 --> 00:11:00,800
oh yeah you know this is back in x11

00:10:58,000 --> 00:11:03,519
report it to them primed on which

00:11:00,800 --> 00:11:05,839
is something that sadly has happened and

00:11:03,519 --> 00:11:09,440
it has put our

00:11:05,839 --> 00:11:12,480
position as a product uh in jeopardy

00:11:09,440 --> 00:11:13,040
at uh different points in in history

00:11:12,480 --> 00:11:14,560
right

00:11:13,040 --> 00:11:16,880
this is not something that should happen

00:11:14,560 --> 00:11:17,920
we should have the full ownership of

00:11:16,880 --> 00:11:20,880
what we deliver

00:11:17,920 --> 00:11:23,279
to be able to uh well solve all of the

00:11:20,880 --> 00:11:26,839
problems

00:11:23,279 --> 00:11:30,240
and the other very important part is

00:11:26,839 --> 00:11:30,640
um how the components communicate within

00:11:30,240 --> 00:11:33,839
and

00:11:30,640 --> 00:11:37,279
with each other like i said uh

00:11:33,839 --> 00:11:38,880
on on x11 i don't i didn't say it x11

00:11:37,279 --> 00:11:41,839
was like a

00:11:38,880 --> 00:11:43,600
huge observer uh pattern where every

00:11:41,839 --> 00:11:45,360
client could see everything that has

00:11:43,600 --> 00:11:47,120
that were that was happening there is

00:11:45,360 --> 00:11:49,360
something that has been tried to

00:11:47,120 --> 00:11:50,480
address in different ways like for

00:11:49,360 --> 00:11:54,320
example from

00:11:50,480 --> 00:11:56,800
from flat pack but in the end um

00:11:54,320 --> 00:11:57,440
you get uh all of the events that go

00:11:56,800 --> 00:11:59,519
into

00:11:57,440 --> 00:12:01,519
every client and then you decide which

00:11:59,519 --> 00:12:03,680
one you're which ones you want because

00:12:01,519 --> 00:12:06,399
you know who you are yourself right

00:12:03,680 --> 00:12:07,680
but it's in the end possible on x11 as

00:12:06,399 --> 00:12:11,040
is

00:12:07,680 --> 00:12:14,240
to know what things people are typing on

00:12:11,040 --> 00:12:16,560
uh well text fields on another window or

00:12:14,240 --> 00:12:17,839
to place ourselves wherever we want and

00:12:16,560 --> 00:12:19,760
this this kind of stuff

00:12:17,839 --> 00:12:24,240
this is a problem this is a security

00:12:19,760 --> 00:12:27,040
problem for starters because um

00:12:24,240 --> 00:12:28,639
we don't want all of our applications uh

00:12:27,040 --> 00:12:31,839
to know about everything

00:12:28,639 --> 00:12:34,800
we have not had a lot of problems about

00:12:31,839 --> 00:12:35,279
uh security on linux for example or at

00:12:34,800 --> 00:12:38,399
least

00:12:35,279 --> 00:12:41,440
major ones that we know about but

00:12:38,399 --> 00:12:42,240
it's only been because well people have

00:12:41,440 --> 00:12:44,720
been

00:12:42,240 --> 00:12:46,320
reasonably good at choosing where they

00:12:44,720 --> 00:12:48,639
get their applications from

00:12:46,320 --> 00:12:49,920
but in the end horrible things could

00:12:48,639 --> 00:12:51,519
have happened and i'm pretty sure that

00:12:49,920 --> 00:12:54,800
horrible things have happened

00:12:51,519 --> 00:12:58,399
somewhere because

00:12:54,800 --> 00:12:58,399
this could just happen right

00:12:58,639 --> 00:13:06,480
writing keylogger for x11 as it is

00:13:02,959 --> 00:13:09,760
used nowadays still is trivial and

00:13:06,480 --> 00:13:12,639
everybody can do it but sitting down

00:13:09,760 --> 00:13:14,320
in an afternoon right whereas uh but

00:13:12,639 --> 00:13:18,320
that's not ideal

00:13:14,320 --> 00:13:20,000
um what we do on on well and instead is

00:13:18,320 --> 00:13:21,839
since you only talk to the compositor

00:13:20,000 --> 00:13:22,240
the compositor will only be talking to

00:13:21,839 --> 00:13:24,480
you

00:13:22,240 --> 00:13:27,360
about the the things that you're

00:13:24,480 --> 00:13:27,360
supposed to know about

00:13:27,600 --> 00:13:31,680
this has a another interesting

00:13:29,120 --> 00:13:34,399
ramification which is um

00:13:31,680 --> 00:13:36,000
the state machine that you end up

00:13:34,399 --> 00:13:38,160
getting is much simpler because

00:13:36,000 --> 00:13:40,320
every client is not depending on the

00:13:38,160 --> 00:13:43,360
states of all of the other clients

00:13:40,320 --> 00:13:44,560
but instead that you just have the state

00:13:43,360 --> 00:13:47,040
of

00:13:44,560 --> 00:13:48,720
uh of that is the conclusion of what the

00:13:47,040 --> 00:13:50,399
compositor has been telling you but

00:13:48,720 --> 00:13:52,880
only the compositor and maybe the rest

00:13:50,399 --> 00:13:55,760
of the debug services that you talk to

00:13:52,880 --> 00:13:56,480
and maybe hardware but well not the

00:13:55,760 --> 00:13:58,639
state of

00:13:56,480 --> 00:13:59,760
every other client around you which i

00:13:58,639 --> 00:14:03,839
think that is

00:13:59,760 --> 00:14:07,199
also part of why this is good news

00:14:03,839 --> 00:14:08,959
so how does this work

00:14:07,199 --> 00:14:10,480
i keep talking about the compositor and

00:14:08,959 --> 00:14:12,800
the clients well

00:14:10,480 --> 00:14:14,839
uh let me show you this graph because

00:14:12,800 --> 00:14:16,320
graphs are always better at explaining

00:14:14,839 --> 00:14:19,519
things uh

00:14:16,320 --> 00:14:21,440
here it shows three applications

00:14:19,519 --> 00:14:22,959
the applications have buffers this is

00:14:21,440 --> 00:14:26,160
only the big thing

00:14:22,959 --> 00:14:26,959
how it works for the rendering part but

00:14:26,160 --> 00:14:28,800
i think that it's

00:14:26,959 --> 00:14:31,760
quite explanatory in itself so every

00:14:28,800 --> 00:14:34,399
application we have a set of buffers

00:14:31,760 --> 00:14:36,240
which are well every frame that that you

00:14:34,399 --> 00:14:36,880
want to write and that that you want to

00:14:36,240 --> 00:14:38,320
render on

00:14:36,880 --> 00:14:40,880
on the on the screen for your

00:14:38,320 --> 00:14:40,880
application

00:14:41,120 --> 00:14:44,160
it will will tell the compositor i have

00:14:43,440 --> 00:14:47,279
a new one

00:14:44,160 --> 00:14:50,079
or and you get to present it

00:14:47,279 --> 00:14:50,959
now the compositor will put it however

00:14:50,079 --> 00:14:54,720
they like

00:14:50,959 --> 00:14:58,000
in windows it will it could be on any

00:14:54,720 --> 00:14:59,199
other way as well it could be mosaics it

00:14:58,000 --> 00:15:00,480
could be doing like

00:14:59,199 --> 00:15:03,040
we have different kinds of of

00:15:00,480 --> 00:15:05,519
compositors are well like like suede for

00:15:03,040 --> 00:15:09,600
example which is styling we have

00:15:05,519 --> 00:15:11,839
well the normal window like we do on

00:15:09,600 --> 00:15:13,040
on plasma and they don't in gnome as

00:15:11,839 --> 00:15:14,639
well

00:15:13,040 --> 00:15:16,320
because in the end it's part of a

00:15:14,639 --> 00:15:16,959
compositor's role to decide how these

00:15:16,320 --> 00:15:18,320
things

00:15:16,959 --> 00:15:20,320
should be working and how these things

00:15:18,320 --> 00:15:22,320
are working um

00:15:20,320 --> 00:15:23,360
this graph is is a bit limited though

00:15:22,320 --> 00:15:25,760
because if

00:15:23,360 --> 00:15:27,600
applications could only send things well

00:15:25,760 --> 00:15:31,040
life would be very boring for everyone

00:15:27,600 --> 00:15:31,040
who wasn't a video player

00:15:31,120 --> 00:15:35,199
the compositor is also connected to

00:15:34,079 --> 00:15:38,800
other hardware

00:15:35,199 --> 00:15:41,839
that we will be using for

00:15:38,800 --> 00:15:41,839
input think about

00:15:42,079 --> 00:15:49,199
touch pads mice

00:15:45,120 --> 00:15:52,160
keyboards tablets

00:15:49,199 --> 00:15:53,279
anything really you can also think about

00:15:52,160 --> 00:15:55,360
virtual keyboard

00:15:53,279 --> 00:15:56,720
kind of use case it's not hardware but

00:15:55,360 --> 00:15:58,800
it's something that

00:15:56,720 --> 00:16:00,880
uh it's something that actually the

00:15:58,800 --> 00:16:03,279
compositor understands

00:16:00,880 --> 00:16:05,040
how it needs to be done it will get the

00:16:03,279 --> 00:16:05,600
information and it will be sent to the

00:16:05,040 --> 00:16:09,839
application

00:16:05,600 --> 00:16:09,839
in the right way and

00:16:10,240 --> 00:16:13,440
the compositor will be sending all of

00:16:11,600 --> 00:16:14,560
this application to the applications and

00:16:13,440 --> 00:16:17,279
the applications

00:16:14,560 --> 00:16:18,000
will be sending back new buffers with

00:16:17,279 --> 00:16:19,920
their

00:16:18,000 --> 00:16:21,839
updated information or whatever they

00:16:19,920 --> 00:16:24,399
need

00:16:21,839 --> 00:16:25,680
could also be talking about our stuff

00:16:24,399 --> 00:16:27,279
it's not like applications can only talk

00:16:25,680 --> 00:16:30,160
about

00:16:27,279 --> 00:16:30,720
tell about frames but it they can tell

00:16:30,160 --> 00:16:32,720
about

00:16:30,720 --> 00:16:37,839
anything we will see a bit later how

00:16:32,720 --> 00:16:37,839
this all works

00:16:40,079 --> 00:16:47,199
next now

00:16:43,279 --> 00:16:50,079
uh i i would say that

00:16:47,199 --> 00:16:51,680
so far it's quite normal and i would

00:16:50,079 --> 00:16:52,480
even say that's probably what you expect

00:16:51,680 --> 00:16:55,759
to hear

00:16:52,480 --> 00:16:58,000
i am not sure uh but what

00:16:55,759 --> 00:16:58,959
kind of implications does this have

00:16:58,000 --> 00:17:01,839
because in the end

00:16:58,959 --> 00:17:02,560
what i think that we're all seeing is

00:17:01,839 --> 00:17:04,880
that

00:17:02,560 --> 00:17:06,079
applications used to look a certain way

00:17:04,880 --> 00:17:07,919
on x11

00:17:06,079 --> 00:17:09,520
and they actually end up looking exactly

00:17:07,919 --> 00:17:12,319
the same on

00:17:09,520 --> 00:17:12,640
uh on weyland how's that possible why

00:17:12,319 --> 00:17:15,520
does

00:17:12,640 --> 00:17:15,520
this happen and

00:17:15,760 --> 00:17:22,400
why does willa matter after all right

00:17:19,520 --> 00:17:23,839
but uh in the end for for application

00:17:22,400 --> 00:17:25,919
developers

00:17:23,839 --> 00:17:27,839
this shouldn't change that much because

00:17:25,919 --> 00:17:29,440
we're all relying or most of us we're

00:17:27,839 --> 00:17:32,880
relying on

00:17:29,440 --> 00:17:35,440
uh well frameworks to do this kind of

00:17:32,880 --> 00:17:36,559
stuff there is jdk there is q there's

00:17:35,440 --> 00:17:40,320
sdl for example

00:17:36,559 --> 00:17:44,240
which is used more for games

00:17:40,320 --> 00:17:47,200
and these they do support um

00:17:44,240 --> 00:17:48,240
wait that wayland natively or through a

00:17:47,200 --> 00:17:51,520
back end

00:17:48,240 --> 00:17:53,440
so it basically just works and as a

00:17:51,520 --> 00:17:54,559
as an app developer you can mostly

00:17:53,440 --> 00:17:58,000
assume that

00:17:54,559 --> 00:18:01,760
things work normally uh with an asterisk

00:17:58,000 --> 00:18:05,120
that we will go through later

00:18:01,760 --> 00:18:06,240
but uh but you can focus on making your

00:18:05,120 --> 00:18:11,039
application

00:18:06,240 --> 00:18:11,039
great and and hope that the

00:18:12,240 --> 00:18:16,559
i hope that the application would work

00:18:13,919 --> 00:18:17,679
on x11 it will work on weyland and

00:18:16,559 --> 00:18:21,200
possibly other

00:18:17,679 --> 00:18:22,000
platforms like windows mac android that

00:18:21,200 --> 00:18:24,480
most of us

00:18:22,000 --> 00:18:26,559
support they should work in general

00:18:24,480 --> 00:18:29,440
right because in the end

00:18:26,559 --> 00:18:31,360
painting into a rectangle is well as

00:18:29,440 --> 00:18:32,640
hard as it can be

00:18:31,360 --> 00:18:35,120
that doesn't mean that all of them

00:18:32,640 --> 00:18:36,799
support them for example electron and

00:18:35,120 --> 00:18:39,760
actually well chromium and

00:18:36,799 --> 00:18:42,160
firefox aren't all that ported yet uh

00:18:39,760 --> 00:18:45,039
firefox you need to enable a

00:18:42,160 --> 00:18:45,840
thing chromium i think that the next

00:18:45,039 --> 00:18:49,360
version is we

00:18:45,840 --> 00:18:52,960
will start shipping it by default

00:18:49,360 --> 00:18:55,919
with an also an opt-in version setting

00:18:52,960 --> 00:18:56,960
an electron being based on chromium is

00:18:55,919 --> 00:19:00,240
also

00:18:56,960 --> 00:19:02,240
lacking there but hopefully soon

00:19:00,240 --> 00:19:04,080
it will start working actually i think

00:19:02,240 --> 00:19:07,520
that the next chromium

00:19:04,080 --> 00:19:08,000
87 which happens in two or three days

00:19:07,520 --> 00:19:09,520
not

00:19:08,000 --> 00:19:11,200
that much longer they will have this

00:19:09,520 --> 00:19:14,000
this option and i'm

00:19:11,200 --> 00:19:16,080
quite excited about that uh also

00:19:14,000 --> 00:19:16,559
something worth considering and keeping

00:19:16,080 --> 00:19:20,559
in mind

00:19:16,559 --> 00:19:22,160
is that while all of these support well

00:19:20,559 --> 00:19:24,640
and natively and properly

00:19:22,160 --> 00:19:25,200
we also have a component called xylene

00:19:24,640 --> 00:19:28,720
which

00:19:25,200 --> 00:19:30,720
uh supports uh x11 applications so if

00:19:28,720 --> 00:19:34,080
your application for any reason

00:19:30,720 --> 00:19:37,120
relies on something specific about x11

00:19:34,080 --> 00:19:40,400
you can have your application go through

00:19:37,120 --> 00:19:43,120
x wayland and this will make

00:19:40,400 --> 00:19:44,000
things work properly as long of course

00:19:43,120 --> 00:19:46,559
as the

00:19:44,000 --> 00:19:48,160
compositor is doing things right so

00:19:46,559 --> 00:19:52,080
today for example if you run

00:19:48,160 --> 00:19:54,400
an electron application from

00:19:52,080 --> 00:19:56,400
as they're meant to be used you will

00:19:54,400 --> 00:19:59,840
have them running

00:19:56,400 --> 00:20:00,559
through xylen as well as the web browser

00:19:59,840 --> 00:20:02,720
for example

00:20:00,559 --> 00:20:04,799
also unless you don't set the

00:20:02,720 --> 00:20:08,400
environment variables

00:20:04,799 --> 00:20:10,080
but it's slowly changing and actually

00:20:08,400 --> 00:20:12,159
more or less everything works as it

00:20:10,080 --> 00:20:16,880
should and you should notice

00:20:12,159 --> 00:20:20,320
there's uh small details like

00:20:16,880 --> 00:20:22,640
uh for example um scaling works a bit

00:20:20,320 --> 00:20:25,039
differently and applications look a bit

00:20:22,640 --> 00:20:27,360
blurrier if you have a

00:20:25,039 --> 00:20:29,440
a scaling system at least for us i think

00:20:27,360 --> 00:20:32,080
that other compositors will have the

00:20:29,440 --> 00:20:32,080
same problem

00:20:32,880 --> 00:20:36,880
also there are patches to solve that so

00:20:34,799 --> 00:20:38,720
in the future it might not end up not

00:20:36,880 --> 00:20:39,200
being the case but this is what you get

00:20:38,720 --> 00:20:41,679
today

00:20:39,200 --> 00:20:42,880
but it's not a big problem like many of

00:20:41,679 --> 00:20:45,200
us have been using

00:20:42,880 --> 00:20:47,039
weight and only for the last few days

00:20:45,200 --> 00:20:50,320
and we've all been able to do

00:20:47,039 --> 00:20:55,440
uh well everything that we used to do on

00:20:50,320 --> 00:20:55,440
on linux without feeling sorrow

00:20:56,720 --> 00:21:01,120
i've been talking a lot about this

00:20:59,280 --> 00:21:02,480
communication between the compositor and

00:21:01,120 --> 00:21:06,000
the client

00:21:02,480 --> 00:21:06,559
what does it look like and it happens

00:21:06,000 --> 00:21:09,039
through

00:21:06,559 --> 00:21:10,559
protocols now uh well when your

00:21:09,039 --> 00:21:12,720
application start

00:21:10,559 --> 00:21:13,600
starts it will it will connect into a

00:21:12,720 --> 00:21:16,080
socket

00:21:13,600 --> 00:21:16,960
and they will start communicating much

00:21:16,080 --> 00:21:19,679
like well

00:21:16,960 --> 00:21:20,480
any communications happens through a

00:21:19,679 --> 00:21:22,080
socket right

00:21:20,480 --> 00:21:23,520
you read things you get the red things

00:21:22,080 --> 00:21:25,440
etc uh

00:21:23,520 --> 00:21:27,679
this is not something that even if you

00:21:25,440 --> 00:21:27,679
wear

00:21:28,240 --> 00:21:33,520
toolkit developer you would have to

00:21:31,280 --> 00:21:35,440
care about that much because well on one

00:21:33,520 --> 00:21:41,520
hand there is slip wellin

00:21:35,440 --> 00:21:41,520
and it's tooling that takes care of that

00:21:42,480 --> 00:21:45,840
so well it's already somewhat abstracted

00:21:45,039 --> 00:21:49,600
so that you

00:21:45,840 --> 00:21:52,320
can comfortably have this kind of

00:21:49,600 --> 00:21:52,320
back and forth

00:21:52,720 --> 00:21:57,520
um as soon as you have to

00:21:56,240 --> 00:21:59,840
start looking into one of these

00:21:57,520 --> 00:22:01,760
protocols you will start seeing this xml

00:21:59,840 --> 00:22:03,760
file so i figured it

00:22:01,760 --> 00:22:06,000
would be useful to show a little bit

00:22:03,760 --> 00:22:08,320
about what it looks like

00:22:06,000 --> 00:22:10,559
so i created the most innovative

00:22:08,320 --> 00:22:12,720
protocol called the protocol potato

00:22:10,559 --> 00:22:15,200
which does nothing and it's not supposed

00:22:12,720 --> 00:22:17,840
to work or anything it just

00:22:15,200 --> 00:22:19,200
meant for you to see what kind of things

00:22:17,840 --> 00:22:21,600
it does

00:22:19,200 --> 00:22:22,799
so i mean this is a perfectly valid xml

00:22:21,600 --> 00:22:25,840
file and if you

00:22:22,799 --> 00:22:27,679
pass it to uh well well and tooling it

00:22:25,840 --> 00:22:28,880
won't give you an error it just will be

00:22:27,679 --> 00:22:30,720
useless

00:22:28,880 --> 00:22:33,679
but what you can see is that you have a

00:22:30,720 --> 00:22:35,440
protocol each product will have

00:22:33,679 --> 00:22:36,960
different interfaces that you can could

00:22:35,440 --> 00:22:41,200
see them like as

00:22:36,960 --> 00:22:43,679
objects if you want i guess

00:22:41,200 --> 00:22:46,000
different interfaces will have different

00:22:43,679 --> 00:22:49,120
kind of

00:22:46,000 --> 00:22:50,240
items mostly requests and events and you

00:22:49,120 --> 00:22:54,559
should read these

00:22:50,240 --> 00:22:54,559
protocols as if you were a client so

00:22:54,640 --> 00:22:59,039
in this case a client can request to get

00:22:58,080 --> 00:23:02,080
a potato

00:22:59,039 --> 00:23:05,200
and will eventually

00:23:02,080 --> 00:23:08,000
be notified about the cooked event

00:23:05,200 --> 00:23:08,799
right so when you're a client that

00:23:08,000 --> 00:23:13,200
implements this

00:23:08,799 --> 00:23:15,280
um you will have this kind of semantics

00:23:13,200 --> 00:23:17,600
uh allowed you can see also the request

00:23:15,280 --> 00:23:20,960
can have arguments so you can say

00:23:17,600 --> 00:23:23,679
say get the potato for this surface

00:23:20,960 --> 00:23:25,679
i know sorry i hear it's getting a

00:23:23,679 --> 00:23:27,919
potato and it's the

00:23:25,679 --> 00:23:29,760
surface that is returned but you could

00:23:27,919 --> 00:23:30,640
pass things like give me the potato

00:23:29,760 --> 00:23:33,760
number three

00:23:30,640 --> 00:23:36,960
or give me the potato cold banana

00:23:33,760 --> 00:23:39,520
whatever and eventually

00:23:36,960 --> 00:23:40,240
it will be again getting a callback that

00:23:39,520 --> 00:23:43,360
is use

00:23:40,240 --> 00:23:44,159
usually like a function pointer or a

00:23:43,360 --> 00:23:48,080
virtual

00:23:44,159 --> 00:23:51,200
function if you use object oriented

00:23:48,080 --> 00:23:52,080
programming that about uh the cooked

00:23:51,200 --> 00:23:55,840
signal

00:23:52,080 --> 00:23:57,840
whenever it's it's emitted um

00:23:55,840 --> 00:23:59,279
if you're a compositor though which none

00:23:57,840 --> 00:24:00,400
of you are because here we are at

00:23:59,279 --> 00:24:02,720
developers right now

00:24:00,400 --> 00:24:03,679
in the context of this talk what you do

00:24:02,720 --> 00:24:06,400
though is

00:24:03,679 --> 00:24:07,200
the get potato is something that you

00:24:06,400 --> 00:24:10,400
never call

00:24:07,200 --> 00:24:13,039
that you're called to offer potato

00:24:10,400 --> 00:24:13,600
and the event is something that you do

00:24:13,039 --> 00:24:16,240
send

00:24:13,600 --> 00:24:17,039
right so eventually when the event

00:24:16,240 --> 00:24:19,919
happens

00:24:17,039 --> 00:24:20,720
you get to uh emitted for your clients

00:24:19,919 --> 00:24:23,919
to know

00:24:20,720 --> 00:24:26,559
and something uh that i think it's

00:24:23,919 --> 00:24:28,480
useful to understand is that when you do

00:24:26,559 --> 00:24:29,360
send these things from the compositor

00:24:28,480 --> 00:24:31,760
you say

00:24:29,360 --> 00:24:33,279
to which client do you want to send it i

00:24:31,760 --> 00:24:36,400
mean it can be to all of them

00:24:33,279 --> 00:24:38,559
but not necessarily and actually usually

00:24:36,400 --> 00:24:39,440
not all of them but whoever you're

00:24:38,559 --> 00:24:44,000
replying to

00:24:39,440 --> 00:24:46,320
or anything in this regard now

00:24:44,000 --> 00:24:47,919
this all sounds very abstract how do we

00:24:46,320 --> 00:24:50,799
turn that into something that

00:24:47,919 --> 00:24:52,320
uh it looks more or less practical well

00:24:50,799 --> 00:24:54,799
um

00:24:52,320 --> 00:24:56,480
we're gonna go get to that later you can

00:24:54,799 --> 00:24:59,760
see the protocols available

00:24:56,480 --> 00:25:01,120
uh officially in the repository that i

00:24:59,760 --> 00:25:04,559
pasted on this

00:25:01,120 --> 00:25:07,039
um yeah that you can see over here

00:25:04,559 --> 00:25:07,840
maybe somebody can put it on the chat or

00:25:07,039 --> 00:25:10,480
something

00:25:07,840 --> 00:25:11,600
but essentially you will see a bunch of

00:25:10,480 --> 00:25:14,000
them there they are

00:25:11,600 --> 00:25:15,200
split into two big categories stable and

00:25:14,000 --> 00:25:17,440
unstable

00:25:15,200 --> 00:25:19,039
stable what they mean is that they are

00:25:17,440 --> 00:25:19,760
not meant to change in the foreseeable

00:25:19,039 --> 00:25:22,400
future

00:25:19,760 --> 00:25:24,080
unstable is that they might still be

00:25:22,400 --> 00:25:29,120
developed

00:25:24,080 --> 00:25:32,159
all of them they are agreed upon by

00:25:29,120 --> 00:25:34,480
different actors in the in the community

00:25:32,159 --> 00:25:35,840
being the different compositors they

00:25:34,480 --> 00:25:37,760
don't all need to agree

00:25:35,840 --> 00:25:38,880
that they are all useful and to

00:25:37,760 --> 00:25:42,000
implement them

00:25:38,880 --> 00:25:45,279
but at least there needs to be

00:25:42,000 --> 00:25:48,400
a critical mass that is using them and

00:25:45,279 --> 00:25:49,919
implementing them otherwise well it

00:25:48,400 --> 00:25:51,279
would be quite frustrating to say to

00:25:49,919 --> 00:25:51,679
find something over there and say i'm

00:25:51,279 --> 00:25:53,440
gonna

00:25:51,679 --> 00:25:54,880
i'm gonna use this protocol because it's

00:25:53,440 --> 00:25:57,520
exactly what i think uh

00:25:54,880 --> 00:25:59,120
what i need as a as an application

00:25:57,520 --> 00:26:02,799
developer but then

00:25:59,120 --> 00:26:04,720
not find any compositors that that do it

00:26:02,799 --> 00:26:07,039
most of the things you will find over

00:26:04,720 --> 00:26:09,120
there should be supported

00:26:07,039 --> 00:26:10,480
uh i think i mentioned there's the

00:26:09,120 --> 00:26:11,840
stable ones and there's the unstable

00:26:10,480 --> 00:26:14,400
ones in several ones

00:26:11,840 --> 00:26:15,039
they could change over time and kind of

00:26:14,400 --> 00:26:17,520
the idea

00:26:15,039 --> 00:26:18,960
is to polish the unstable ones so that

00:26:17,520 --> 00:26:21,520
they can became

00:26:18,960 --> 00:26:22,080
so that they can become stable over time

00:26:21,520 --> 00:26:25,279
and

00:26:22,080 --> 00:26:29,279
well enjoy life

00:26:25,279 --> 00:26:31,039
now these are the ones that you should

00:26:29,279 --> 00:26:32,480
care the most about as an application

00:26:31,039 --> 00:26:34,799
developer because

00:26:32,480 --> 00:26:36,720
they are the ones that will more or less

00:26:34,799 --> 00:26:40,480
be implemented by

00:26:36,720 --> 00:26:43,520
all compositors um

00:26:40,480 --> 00:26:44,559
but then seeing while creating a desktop

00:26:43,520 --> 00:26:48,400
environment is

00:26:44,559 --> 00:26:51,120
not always the simplest of tasks uh

00:26:48,400 --> 00:26:53,840
we've collectively uh started created a

00:26:51,120 --> 00:26:56,559
myriad of different protocols that

00:26:53,840 --> 00:26:59,360
are used for example in plasma we have

00:26:56,559 --> 00:27:01,520
several ones for communicating with

00:26:59,360 --> 00:27:03,919
shell which is uh definitely a specific

00:27:01,520 --> 00:27:03,919
kind of

00:27:04,960 --> 00:27:10,880
client that needs to do and to know

00:27:07,679 --> 00:27:12,720
about things that other clients will

00:27:10,880 --> 00:27:14,799
well shouldn't know about or will not

00:27:12,720 --> 00:27:17,919
need it anyway

00:27:14,799 --> 00:27:19,200
things like listing windows this kind of

00:27:17,919 --> 00:27:20,799
stuff you don't want

00:27:19,200 --> 00:27:22,559
or you don't need every application to

00:27:20,799 --> 00:27:25,279
know about this kind of stuff so

00:27:22,559 --> 00:27:25,840
we only said that send that to the to

00:27:25,279 --> 00:27:28,880
the

00:27:25,840 --> 00:27:33,039
privileged kind of uh clients

00:27:28,880 --> 00:27:35,760
uh others also have similar

00:27:33,039 --> 00:27:36,960
things some of them for example also

00:27:35,760 --> 00:27:40,320
extend what the

00:27:36,960 --> 00:27:42,880
standard ones do but in general uh

00:27:40,320 --> 00:27:46,159
these are some that you shouldn't need i

00:27:42,880 --> 00:27:48,880
did place them here though because

00:27:46,159 --> 00:27:50,320
they might be useful for you and as an

00:27:48,880 --> 00:27:52,000
application developer if you

00:27:50,320 --> 00:27:53,679
see that something is super important

00:27:52,000 --> 00:27:56,880
for you you can always

00:27:53,679 --> 00:28:00,000
say how about

00:27:56,880 --> 00:28:01,679
we standardize this one because

00:28:00,000 --> 00:28:02,660
i want to base my application on this

00:28:01,679 --> 00:28:04,399
concept

00:28:02,660 --> 00:28:06,399
[Music]

00:28:04,399 --> 00:28:08,159
and otherwise i cannot i cannot have my

00:28:06,399 --> 00:28:09,279
application to do its own thing

00:28:08,159 --> 00:28:11,360
and this is something that could

00:28:09,279 --> 00:28:13,760
definitely happen uh

00:28:11,360 --> 00:28:14,960
some that we've created in the past has

00:28:13,760 --> 00:28:18,880
been

00:28:14,960 --> 00:28:20,720
uh well shared between different

00:28:18,880 --> 00:28:23,360
projects and i could see them

00:28:20,720 --> 00:28:26,480
moving into more stable spaces

00:28:23,360 --> 00:28:26,480
eventually over time

00:28:26,799 --> 00:28:34,000
now um there was the xml file

00:28:30,880 --> 00:28:34,640
and there was the le vuelen thing i told

00:28:34,000 --> 00:28:37,360
you about

00:28:34,640 --> 00:28:39,919
so how do we mix them in in a way so

00:28:37,360 --> 00:28:42,960
that you don't have to become a weird

00:28:39,919 --> 00:28:45,440
protocol ninja so that

00:28:42,960 --> 00:28:46,159
and that everything reasonably works

00:28:45,440 --> 00:28:49,440
well there's

00:28:46,159 --> 00:28:54,000
these uh tools that you can use

00:28:49,440 --> 00:28:57,039
to generate a code from an xml file

00:28:54,000 --> 00:28:58,000
that will work for your application so

00:28:57,039 --> 00:29:00,880
basically what you do

00:28:58,000 --> 00:29:02,399
as a as an application when you want to

00:29:00,880 --> 00:29:04,080
interact directly with uh with a

00:29:02,399 --> 00:29:04,960
protocol is that you will create a

00:29:04,080 --> 00:29:07,120
registry

00:29:04,960 --> 00:29:08,080
the registry will announce to you all of

00:29:07,120 --> 00:29:11,520
the different

00:29:08,080 --> 00:29:13,840
um interfaces that or yeah

00:29:11,520 --> 00:29:14,880
protocols that are available and then

00:29:13,840 --> 00:29:16,799
you get to say

00:29:14,880 --> 00:29:18,559
all right i am interested on this one

00:29:16,799 --> 00:29:20,720
give me this one and i will

00:29:18,559 --> 00:29:22,080
work with it and what you will do is

00:29:20,720 --> 00:29:24,480
that or you will get

00:29:22,080 --> 00:29:25,200
an instance of a weird object that you

00:29:24,480 --> 00:29:28,399
will get to

00:29:25,200 --> 00:29:31,679
uh pass into one of them

00:29:28,399 --> 00:29:34,240
uh well classes

00:29:31,679 --> 00:29:35,919
generated by these scanner files classes

00:29:34,240 --> 00:29:39,039
or objects depending on

00:29:35,919 --> 00:29:40,799
the kind of of language that you use

00:29:39,039 --> 00:29:41,360
there's a wayland scanner that will

00:29:40,799 --> 00:29:44,640
generate

00:29:41,360 --> 00:29:48,000
see a dot c file and a dot h file

00:29:44,640 --> 00:29:50,080
the qll scanner sameish but

00:29:48,000 --> 00:29:52,159
with c plus plus things there's the

00:29:50,080 --> 00:29:53,679
python scanner which i have never used

00:29:52,159 --> 00:29:57,120
but it

00:29:53,679 --> 00:29:58,799
generates python code uh i guess

00:29:57,120 --> 00:30:00,399
i saw that there were others like for

00:29:58,799 --> 00:30:03,600
frost and this kind of stuff but in

00:30:00,399 --> 00:30:05,520
general the idea is that since it's not

00:30:03,600 --> 00:30:09,200
tied to any language or any technology

00:30:05,520 --> 00:30:11,520
you but you definitely want to uh

00:30:09,200 --> 00:30:13,360
communicate easily with with the

00:30:11,520 --> 00:30:14,960
protocol and you should be able to do so

00:30:13,360 --> 00:30:18,320
with the semantics that are provided

00:30:14,960 --> 00:30:22,000
from the from the xml file which is

00:30:18,320 --> 00:30:24,480
well what you care about uh

00:30:22,000 --> 00:30:26,000
at that point of course if you ever

00:30:24,480 --> 00:30:27,440
decide to come up with a protocol you

00:30:26,000 --> 00:30:29,919
will have to implement it

00:30:27,440 --> 00:30:30,480
for your client and then for all of the

00:30:29,919 --> 00:30:33,200
pro

00:30:30,480 --> 00:30:34,000
compositors so beware with doing that

00:30:33,200 --> 00:30:36,240
and

00:30:34,000 --> 00:30:38,000
well don't try to consider this a

00:30:36,240 --> 00:30:41,840
solution for everything

00:30:38,000 --> 00:30:44,240
um there's also the discussion about

00:30:41,840 --> 00:30:45,360
when you should be using whale on

00:30:44,240 --> 00:30:49,200
protocols and when

00:30:45,360 --> 00:30:50,720
you should be using debuffs for example

00:30:49,200 --> 00:30:52,799
there are things that have been using

00:30:50,720 --> 00:30:54,960
the bus that actually

00:30:52,799 --> 00:30:56,880
theoretically and technically could be

00:30:54,960 --> 00:30:59,360
imported into weyland protocols but

00:30:56,880 --> 00:31:00,240
there's no good reason to do that and we

00:30:59,360 --> 00:31:02,159
will never

00:31:00,240 --> 00:31:04,399
probably do it like i don't know i'm

00:31:02,159 --> 00:31:05,519
thinking power management right you have

00:31:04,399 --> 00:31:07,760
a

00:31:05,519 --> 00:31:09,760
diva service that is already doing its

00:31:07,760 --> 00:31:11,360
thing and

00:31:09,760 --> 00:31:14,960
well it doesn't have a big problem with

00:31:11,360 --> 00:31:18,000
that so it could make sense to have uh

00:31:14,960 --> 00:31:21,440
applications not be exposed to to those

00:31:18,000 --> 00:31:23,760
but in general as soon as they see them

00:31:21,440 --> 00:31:26,480
they should be able to continue working

00:31:23,760 --> 00:31:28,559
with these device

00:31:26,480 --> 00:31:31,279
interfaces and that will continue being

00:31:28,559 --> 00:31:31,279
the case right

00:31:31,360 --> 00:31:35,840
so as compositors we have several of

00:31:34,000 --> 00:31:37,279
them already implemented there's weston

00:31:35,840 --> 00:31:40,399
which is kind of the

00:31:37,279 --> 00:31:41,120
reference implementation and it lives

00:31:40,399 --> 00:31:44,640
together in

00:31:41,120 --> 00:31:46,320
free desktop with weyland itself

00:31:44,640 --> 00:31:47,679
there's queen which is the one we've

00:31:46,320 --> 00:31:50,559
been doing for

00:31:47,679 --> 00:31:52,159
plasma there is mother for gnome there's

00:31:50,559 --> 00:31:54,960
wr roots and sway

00:31:52,159 --> 00:31:55,279
the real roots as far as i understood is

00:31:54,960 --> 00:31:57,440
a

00:31:55,279 --> 00:31:58,480
framework to create compositors and

00:31:57,440 --> 00:32:00,640
actually there's

00:31:58,480 --> 00:32:02,080
several of them already based on it and

00:32:00,640 --> 00:32:05,039
then there's suey which is

00:32:02,080 --> 00:32:05,360
the one who that was created by the one

00:32:05,039 --> 00:32:07,600
the

00:32:05,360 --> 00:32:09,360
the people who created all your roots

00:32:07,600 --> 00:32:11,519
which is a

00:32:09,360 --> 00:32:14,240
funny looking one and then there's the

00:32:11,519 --> 00:32:17,200
cute whalen compositor which is

00:32:14,240 --> 00:32:18,640
well done by cute for doing more

00:32:17,200 --> 00:32:21,120
embedded kind of things

00:32:18,640 --> 00:32:23,760
although some people are creating uh

00:32:21,120 --> 00:32:26,880
proper desktop environments around it so

00:32:23,760 --> 00:32:26,880
that's kind of interesting

00:32:27,679 --> 00:32:31,760
things to keep in mind as an application

00:32:29,440 --> 00:32:33,200
developer well i think that uh something

00:32:31,760 --> 00:32:35,519
that

00:32:33,200 --> 00:32:36,880
has been a bit of a problem since the

00:32:35,519 --> 00:32:38,480
beginning

00:32:36,880 --> 00:32:40,480
for certain applications has been the

00:32:38,480 --> 00:32:42,880
positioning if your application is

00:32:40,480 --> 00:32:44,080
weird in that it needs to be placed in a

00:32:42,880 --> 00:32:46,480
specific

00:32:44,080 --> 00:32:47,200
region of the window uh you might have

00:32:46,480 --> 00:32:50,880
problems

00:32:47,200 --> 00:32:52,960
doing that uh on x11 you could say

00:32:50,880 --> 00:32:54,399
tell me where i am and it would tell you

00:32:52,960 --> 00:32:57,919
the x and y

00:32:54,399 --> 00:32:59,919
of of the position of your application

00:32:57,919 --> 00:33:01,679
but it would give you like all of the

00:32:59,919 --> 00:33:03,360
dimensions of your windows

00:33:01,679 --> 00:33:05,440
which you still need to know because you

00:33:03,360 --> 00:33:06,240
need to know how much pixels you need to

00:33:05,440 --> 00:33:10,000
render at

00:33:06,240 --> 00:33:14,799
any moment but what we don't know

00:33:10,000 --> 00:33:16,640
is about the the positioning um

00:33:14,799 --> 00:33:18,399
and from that we can derive it's not

00:33:16,640 --> 00:33:20,240
just about the positioning itself it's

00:33:18,399 --> 00:33:23,120
about how the compositor now

00:33:20,240 --> 00:33:24,720
is the one with authority about where

00:33:23,120 --> 00:33:27,360
things are placed

00:33:24,720 --> 00:33:28,320
something that also we sorry something

00:33:27,360 --> 00:33:31,360
that we used to do

00:33:28,320 --> 00:33:32,880
on on x11 was the braces window and a

00:33:31,360 --> 00:33:36,080
window decided to move

00:33:32,880 --> 00:33:36,880
on front and uh well because it thought

00:33:36,080 --> 00:33:39,120
that it was

00:33:36,880 --> 00:33:40,640
very special and important something

00:33:39,120 --> 00:33:42,559
that it cannot be

00:33:40,640 --> 00:33:44,159
done right now we're working on it but

00:33:42,559 --> 00:33:47,840
well it's the kind of things that it

00:33:44,159 --> 00:33:51,440
needs to be thought properly

00:33:47,840 --> 00:33:52,799
um the another thing that happened is

00:33:51,440 --> 00:33:56,960
that there were a lot of

00:33:52,799 --> 00:34:00,159
processes that uh their function was to

00:33:56,960 --> 00:34:02,480
um well see what others were doing or

00:34:00,159 --> 00:34:04,000
making things happen on other other

00:34:02,480 --> 00:34:06,960
clients for example

00:34:04,000 --> 00:34:08,480
think of a virtual keyboard and x11 you

00:34:06,960 --> 00:34:09,280
could implement that virtual keyboard by

00:34:08,480 --> 00:34:12,480
saying

00:34:09,280 --> 00:34:15,919
and now the x is pressed and now the y

00:34:12,480 --> 00:34:18,320
express is pressed but this

00:34:15,919 --> 00:34:19,280
is kind of weird right you don't want a

00:34:18,320 --> 00:34:21,359
random

00:34:19,280 --> 00:34:22,960
application to be sending keys to

00:34:21,359 --> 00:34:26,079
another random application

00:34:22,960 --> 00:34:29,200
you can implement um

00:34:26,079 --> 00:34:32,879
virtual keyboards on weyland right now

00:34:29,200 --> 00:34:35,679
and it works fine but

00:34:32,879 --> 00:34:37,520
it needs to be done properly and by

00:34:35,679 --> 00:34:39,200
properly i mean using a specific

00:34:37,520 --> 00:34:41,440
protocol that

00:34:39,200 --> 00:34:43,200
is about that rather than just saying

00:34:41,440 --> 00:34:43,839
this is what people definitely need they

00:34:43,200 --> 00:34:45,440
need

00:34:43,839 --> 00:34:47,359
this event as if it was coming from the

00:34:45,440 --> 00:34:48,879
keyboard which is kind of a weird

00:34:47,359 --> 00:34:52,159
premise

00:34:48,879 --> 00:34:52,560
um if you want to learn further there's

00:34:52,159 --> 00:34:56,480
the

00:34:52,560 --> 00:35:00,000
official documentation which is

00:34:56,480 --> 00:35:01,839
fine uh it's quite extensive uh

00:35:00,000 --> 00:35:03,040
there's also the whalen book which was

00:35:01,839 --> 00:35:06,160
uh created by

00:35:03,040 --> 00:35:07,040
uh one of the sway or the lead sway

00:35:06,160 --> 00:35:10,160
developer

00:35:07,040 --> 00:35:11,839
i think uh it's pretty good i ended up

00:35:10,160 --> 00:35:14,000
reading things over there when i was

00:35:11,839 --> 00:35:17,040
starting and i needed to understand

00:35:14,000 --> 00:35:18,480
why things were like they are so i

00:35:17,040 --> 00:35:21,680
recommend you to take a look

00:35:18,480 --> 00:35:24,480
and see what's what over there

00:35:21,680 --> 00:35:24,480
other than that

00:35:25,040 --> 00:35:29,599
there's definitely tons of other

00:35:27,040 --> 00:35:31,280
documentation all over the internet

00:35:29,599 --> 00:35:32,880
if there's something specific you need

00:35:31,280 --> 00:35:35,119
i'm sure that

00:35:32,880 --> 00:35:37,200
i or maybe other people will be able to

00:35:35,119 --> 00:35:40,800
help you with that

00:35:37,200 --> 00:35:43,680
but if anyone has any questions

00:35:40,800 --> 00:35:46,400
right now would be the right moment to

00:35:43,680 --> 00:35:46,400
talk about them

00:35:50,400 --> 00:35:53,680
so it looks like we have one question in

00:35:52,160 --> 00:35:56,880
the shared notes um

00:35:53,680 --> 00:36:00,400
it says what do you think about the

00:35:56,880 --> 00:36:00,400
k-win ft fork

00:36:01,920 --> 00:36:06,320
well the queen ft fork is something that

00:36:04,720 --> 00:36:09,359
you can ask the

00:36:06,320 --> 00:36:11,920
main developer he used to work

00:36:09,359 --> 00:36:13,520
with plasma on it he decided that he

00:36:11,920 --> 00:36:15,119
wanted to work alone and he's now

00:36:13,520 --> 00:36:16,000
working alone or i don't know if he's

00:36:15,119 --> 00:36:18,400
working with

00:36:16,000 --> 00:36:19,119
other people but i don't really have i

00:36:18,400 --> 00:36:22,640
don't

00:36:19,119 --> 00:36:22,640
i don't know why it matters

00:36:23,760 --> 00:36:28,000
okay next question is what is the status

00:36:26,160 --> 00:36:31,200
of weyland for

00:36:28,000 --> 00:36:34,400
i'm going to butcher this um

00:36:31,200 --> 00:36:37,680
except x-face and mate or mate

00:36:34,400 --> 00:36:39,200
um yeah um

00:36:37,680 --> 00:36:40,960
well i wouldn't know you would have to

00:36:39,200 --> 00:36:45,280
ask their developers

00:36:40,960 --> 00:36:47,680
which is kind of the thing that you

00:36:45,280 --> 00:36:48,960
have less of a shared infrastructure

00:36:47,680 --> 00:36:51,680
over there

00:36:48,960 --> 00:36:53,040
as far as i know which is not that much

00:36:51,680 --> 00:36:54,560
is that they were using

00:36:53,040 --> 00:36:56,560
gnome infrastructure for this kind of

00:36:54,560 --> 00:36:57,280
thing so i would expect them to be able

00:36:56,560 --> 00:37:01,040
to use

00:36:57,280 --> 00:37:03,040
matter but i am sure that

00:37:01,040 --> 00:37:05,200
somebody on the chat here will be able

00:37:03,040 --> 00:37:09,839
to give you a better answer than

00:37:05,200 --> 00:37:09,839
i have right now

00:37:14,320 --> 00:37:17,359
it looks like that's all the questions

00:37:15,920 --> 00:37:20,839
we have

00:37:17,359 --> 00:37:22,320
thank you alex as always a wonderful

00:37:20,839 --> 00:37:27,359
presentation

00:37:22,320 --> 00:37:29,040
and we will see you around i suppose

00:37:27,359 --> 00:37:34,960
you'll see me around thank you very much

00:37:29,040 --> 00:37:34,960

YouTube URL: https://www.youtube.com/watch?v=qLeCObkqfFs


