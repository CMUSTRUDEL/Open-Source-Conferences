Title: Collabora & Valve - What We're Doing (and Why We're Doing It) - Vivek Das Mohapatra
Publication date: 2020-11-14
Playlist: Linux App Summit 2020 Talks
Description: 
	A whistle-stop tour of the work we at Collabora are doing for Valve - ranging from Linux kernel features and enhancements to graphics to OS enhancements and a few other things besides.
Captions: 
	00:00:01,810 --> 00:00:09,349
[Music]

00:00:09,679 --> 00:00:13,280
welcome to this talk

00:00:10,880 --> 00:00:16,400
collaborating valve what we're doing and

00:00:13,280 --> 00:00:17,840
why we're doing it

00:00:16,400 --> 00:00:19,920
a little bit about the companies

00:00:17,840 --> 00:00:21,600
involved you obviously

00:00:19,920 --> 00:00:23,279
don't need to be told through valvar

00:00:21,600 --> 00:00:26,400
they're kind of a big deal in

00:00:23,279 --> 00:00:28,000
a pretty major company but who are we

00:00:26,400 --> 00:00:30,160
well collaborate are an open source

00:00:28,000 --> 00:00:31,679
software consultancy um

00:00:30,160 --> 00:00:33,280
you know that may or may not tell you

00:00:31,679 --> 00:00:35,200
what sort of things we do depending on

00:00:33,280 --> 00:00:38,239
how much you know about the field so

00:00:35,200 --> 00:00:40,879
what sort of things do we do well

00:00:38,239 --> 00:00:42,559
that depends on who's asking seriously

00:00:40,879 --> 00:00:44,000
actually does depend on who's asking

00:00:42,559 --> 00:00:46,719
because we cover a wide range

00:00:44,000 --> 00:00:48,480
of areas we've done work in graphics

00:00:46,719 --> 00:00:52,000
graphics drivers

00:00:48,480 --> 00:00:55,039
putting stuff on screen western

00:00:52,000 --> 00:00:56,800
multimedia web engines we do

00:00:55,039 --> 00:00:58,160
customization work for people if they

00:00:56,800 --> 00:01:00,320
need something

00:00:58,160 --> 00:01:02,399
fixed up to work just right for them and

00:01:00,320 --> 00:01:04,640
ideally upstream changes as well if the

00:01:02,399 --> 00:01:06,720
upstream project is interested

00:01:04,640 --> 00:01:08,080
similarly bug fixes in a project that

00:01:06,720 --> 00:01:10,960
they might be using

00:01:08,080 --> 00:01:12,560
we work on that and upstream the fixes

00:01:10,960 --> 00:01:14,960
later

00:01:12,560 --> 00:01:16,320
we've done integrated platforms with

00:01:14,960 --> 00:01:17,439
people so basically if someone needs a

00:01:16,320 --> 00:01:20,240
custom platform

00:01:17,439 --> 00:01:21,280
for all their products that that is

00:01:20,240 --> 00:01:23,200
going to be used

00:01:21,280 --> 00:01:24,720
by them and then we do that and they're

00:01:23,200 --> 00:01:26,240
building integration systems and

00:01:24,720 --> 00:01:29,119
reproducing reproducible spills

00:01:26,240 --> 00:01:29,520
so a wide range of areas come by what we

00:01:29,119 --> 00:01:33,119
do

00:01:29,520 --> 00:01:33,920
so and hopefully you'll see that in the

00:01:33,119 --> 00:01:36,720
list of work

00:01:33,920 --> 00:01:38,240
that we do for valve which we will go to

00:01:36,720 --> 00:01:40,000
next since that's what you're really

00:01:38,240 --> 00:01:43,200
here for

00:01:40,000 --> 00:01:46,000
so what's first on our list let's

00:01:43,200 --> 00:01:46,640
start with this intercepting syscalls um

00:01:46,000 --> 00:01:48,720
so

00:01:46,640 --> 00:01:50,560
what's this all about so if you know

00:01:48,720 --> 00:01:53,119
what a syscall is it's when

00:01:50,560 --> 00:01:54,479
the user space makes a call into the

00:01:53,119 --> 00:01:55,520
kernel for a specific piece of

00:01:54,479 --> 00:01:58,719
functionality

00:01:55,520 --> 00:01:59,920
a system call now normally this sort of

00:01:58,719 --> 00:02:03,520
thing is mediated

00:01:59,920 --> 00:02:06,880
via the library or a runtime such as

00:02:03,520 --> 00:02:09,440
your c library but you can make

00:02:06,880 --> 00:02:11,200
direct syscalls um if you know the

00:02:09,440 --> 00:02:14,000
number of the syscall you want to make

00:02:11,200 --> 00:02:15,280
and what kind of parameters it needs so

00:02:14,000 --> 00:02:17,680
why is this important

00:02:15,280 --> 00:02:18,800
well uh when you've got something like a

00:02:17,680 --> 00:02:20,319
game

00:02:18,800 --> 00:02:22,000
for example it's obviously going to be

00:02:20,319 --> 00:02:24,800
important to someone like valve

00:02:22,000 --> 00:02:25,920
or an application which makes this call

00:02:24,800 --> 00:02:29,520
if it goes via

00:02:25,920 --> 00:02:31,519
a library it can be intercepted

00:02:29,520 --> 00:02:33,280
by an emulator or a non-emulator

00:02:31,519 --> 00:02:37,440
depending on your point of view

00:02:33,280 --> 00:02:40,640
such as wine or proton and so we can run

00:02:37,440 --> 00:02:41,680
these things on a non-native system such

00:02:40,640 --> 00:02:44,879
as

00:02:41,680 --> 00:02:47,360
linux through an emulator if we

00:02:44,879 --> 00:02:48,840
can intercept cisco's to do with that

00:02:47,360 --> 00:02:52,560
part of the emulation

00:02:48,840 --> 00:02:53,440
now lately uh more and more applications

00:02:52,560 --> 00:02:56,560
have been

00:02:53,440 --> 00:02:57,599
bypassing the libraries the dlls in the

00:02:56,560 --> 00:02:59,200
windows world

00:02:57,599 --> 00:03:00,640
which are used which provide the

00:02:59,200 --> 00:03:02,480
wrappers for these cisco

00:03:00,640 --> 00:03:04,879
sometimes a cisco might not even have a

00:03:02,480 --> 00:03:05,840
wrapper this is problematic because of

00:03:04,879 --> 00:03:08,640
course if we don't

00:03:05,840 --> 00:03:09,360
intercept cisco then we've just made an

00:03:08,640 --> 00:03:12,400
unknown

00:03:09,360 --> 00:03:14,239
strange almost certainly bad request to

00:03:12,400 --> 00:03:17,040
the linux kernel

00:03:14,239 --> 00:03:18,560
and frankly it's going to be chaos cats

00:03:17,040 --> 00:03:20,480
and dogs living together

00:03:18,560 --> 00:03:22,239
the end of the world and more

00:03:20,480 --> 00:03:22,959
importantly your game's not going to

00:03:22,239 --> 00:03:24,959
work

00:03:22,959 --> 00:03:26,080
so we need to do something about that

00:03:24,959 --> 00:03:28,480
and because

00:03:26,080 --> 00:03:29,840
it's a game where this matters more than

00:03:28,480 --> 00:03:32,080
usual

00:03:29,840 --> 00:03:33,760
we need to do it efficiently and quickly

00:03:32,080 --> 00:03:34,879
there needs to be as little overhead as

00:03:33,760 --> 00:03:38,720
possible

00:03:34,879 --> 00:03:40,000
so what can you do a few approaches were

00:03:38,720 --> 00:03:41,920
tried

00:03:40,000 --> 00:03:43,599
one of the original approaches was to

00:03:41,920 --> 00:03:46,080
use se linux

00:03:43,599 --> 00:03:47,920
to trap the calls and effectively make

00:03:46,080 --> 00:03:50,720
them forbidden and then react to them

00:03:47,920 --> 00:03:51,200
to redirect them unfortunately that's a

00:03:50,720 --> 00:03:54,159
bit

00:03:51,200 --> 00:03:55,280
um there's a bit of a hammer to crack in

00:03:54,159 --> 00:03:58,480
that situation

00:03:55,280 --> 00:04:00,319
um it works but it's not fast there's a

00:03:58,480 --> 00:04:03,519
lot of overhead

00:04:00,319 --> 00:04:05,280
and it's really far from ideal another

00:04:03,519 --> 00:04:08,640
approach was to use setcomp

00:04:05,280 --> 00:04:10,080
in a sort of similar way again

00:04:08,640 --> 00:04:12,560
a bit of pushback from that from the

00:04:10,080 --> 00:04:13,280
community it's not ideal it's not really

00:04:12,560 --> 00:04:16,239
the right shape

00:04:13,280 --> 00:04:17,120
tool for the job and using something

00:04:16,239 --> 00:04:19,680
that should be

00:04:17,120 --> 00:04:21,199
for security for non-security uses is

00:04:19,680 --> 00:04:23,199
generally frowned upon

00:04:21,199 --> 00:04:25,759
because you increase your attack surface

00:04:23,199 --> 00:04:27,040
area by doing unexpected things

00:04:25,759 --> 00:04:28,720
you might actually introduce the

00:04:27,040 --> 00:04:30,000
vulnerability when the whole purpose of

00:04:28,720 --> 00:04:33,040
it is to

00:04:30,000 --> 00:04:36,960
prevent vulnerabilities or ameliorate

00:04:33,040 --> 00:04:40,160
so um what what did we end up doing

00:04:36,960 --> 00:04:44,479
so the thing that we ended up going with

00:04:40,160 --> 00:04:47,600
was a personality based mechanism which

00:04:44,479 --> 00:04:49,919
by extending a little bit of

00:04:47,600 --> 00:04:50,639
infrastructure in the kernel allows us

00:04:49,919 --> 00:04:53,199
to track

00:04:50,639 --> 00:04:55,600
calls from particular addresses and

00:04:53,199 --> 00:04:59,520
particular parts of an application

00:04:55,600 --> 00:05:02,320
which means that we can very easily

00:04:59,520 --> 00:05:03,120
enable and disable this trapping and we

00:05:02,320 --> 00:05:05,199
can trap

00:05:03,120 --> 00:05:07,600
just the syscalls that we are interested

00:05:05,199 --> 00:05:08,080
in and let the rest go through which is

00:05:07,600 --> 00:05:09,840
great

00:05:08,080 --> 00:05:11,600
because that is really what you want to

00:05:09,840 --> 00:05:14,479
do you're only interested

00:05:11,600 --> 00:05:16,639
in trapping a few of the syscalls this

00:05:14,479 --> 00:05:19,440
approach has the additional advantage

00:05:16,639 --> 00:05:19,919
that we don't need to change or monkey

00:05:19,440 --> 00:05:22,639
patch

00:05:19,919 --> 00:05:23,759
the game binaries or the game libraries

00:05:22,639 --> 00:05:26,880
tool

00:05:23,759 --> 00:05:28,639
because obviously that's tricky because

00:05:26,880 --> 00:05:30,400
that can often fall foul of anti-cheat

00:05:28,639 --> 00:05:33,280
mechanisms who have

00:05:30,400 --> 00:05:34,800
no way of distinguishing between you

00:05:33,280 --> 00:05:36,320
doing something for the purpose of

00:05:34,800 --> 00:05:38,160
emulation and someone

00:05:36,320 --> 00:05:40,479
intercepting cis syscalls to try and

00:05:38,160 --> 00:05:44,240
beat an anti-cheat

00:05:40,479 --> 00:05:45,759
mechanism so that's what we ended up

00:05:44,240 --> 00:05:47,919
going with i think that one's

00:05:45,759 --> 00:05:49,440
wending its way into the kernel i don't

00:05:47,919 --> 00:05:50,800
think it's been accepted yet but the

00:05:49,440 --> 00:05:53,039
patches have been going back and forth

00:05:50,800 --> 00:05:53,440
from the list and hopefully that will

00:05:53,039 --> 00:05:55,360
land

00:05:53,440 --> 00:05:58,880
soon to bring us a better wine and

00:05:55,360 --> 00:05:58,880
proton gaming experience

00:05:59,840 --> 00:06:03,280
on to the next item case and sensitive

00:06:02,160 --> 00:06:06,080
file systems

00:06:03,280 --> 00:06:06,639
so um you know obviously this is a

00:06:06,080 --> 00:06:09,919
fairly

00:06:06,639 --> 00:06:12,000
easy one to understand um in on

00:06:09,919 --> 00:06:13,440
in the windows world where most games

00:06:12,000 --> 00:06:17,280
come from these days

00:06:13,440 --> 00:06:20,000
days uh faster than the case insensitive

00:06:17,280 --> 00:06:22,319
you don't have to care what cases

00:06:20,000 --> 00:06:25,199
patterns you use when accessing files

00:06:22,319 --> 00:06:26,160
it all works regardless of what you've

00:06:25,199 --> 00:06:28,720
used

00:06:26,160 --> 00:06:30,560
this is very much not the case in the

00:06:28,720 --> 00:06:33,600
unix c linux world

00:06:30,560 --> 00:06:34,080
we expect a change in case to mean a

00:06:33,600 --> 00:06:38,319
different

00:06:34,080 --> 00:06:40,160
file now while a lot of the hard work of

00:06:38,319 --> 00:06:41,120
porting to multiple platforms is taken

00:06:40,160 --> 00:06:44,319
care of by

00:06:41,120 --> 00:06:44,880
things such as unity you've still got a

00:06:44,319 --> 00:06:47,360
problem

00:06:44,880 --> 00:06:49,360
in the way that they are used so one

00:06:47,360 --> 00:06:51,280
thing that we tend to see a lot

00:06:49,360 --> 00:06:52,880
is that game developers or application

00:06:51,280 --> 00:06:55,840
developers often have quite a

00:06:52,880 --> 00:06:57,759
hazard approach to the capitalization

00:06:55,840 --> 00:06:59,520
patterns they use they'll request a file

00:06:57,759 --> 00:07:01,440
with an initial capital

00:06:59,520 --> 00:07:03,039
or a different developer as part of

00:07:01,440 --> 00:07:03,840
doing that part of the code maybe all

00:07:03,039 --> 00:07:06,720
caps

00:07:03,840 --> 00:07:08,240
or possibly they'll be intercat in a

00:07:06,720 --> 00:07:10,800
different way

00:07:08,240 --> 00:07:12,960
because that's not necessarily obvious

00:07:10,800 --> 00:07:14,960
and this can cause huge problems because

00:07:12,960 --> 00:07:18,319
random assets in the game can suddenly

00:07:14,960 --> 00:07:21,599
appear to not be there and not be found

00:07:18,319 --> 00:07:22,880
and that makes porting much more painful

00:07:21,599 --> 00:07:25,280
than it needs to be

00:07:22,880 --> 00:07:26,560
and of course it's quite hard to tell

00:07:25,280 --> 00:07:28,800
someone who's used to

00:07:26,560 --> 00:07:30,000
a case folding file system no no you

00:07:28,800 --> 00:07:32,960
actually have to be consistent

00:07:30,000 --> 00:07:36,160
all the time from their point of view

00:07:32,960 --> 00:07:38,639
quite reasonably it's just

00:07:36,160 --> 00:07:40,240
an onerous and unreasonable request that

00:07:38,639 --> 00:07:40,880
they're not going to do anything about

00:07:40,240 --> 00:07:43,120
so

00:07:40,880 --> 00:07:44,560
we have to solve the problem if we want

00:07:43,120 --> 00:07:47,680
porting to be easy

00:07:44,560 --> 00:07:48,720
so how do we do this the approach that

00:07:47,680 --> 00:07:52,240
we've gone with

00:07:48,720 --> 00:07:56,000
is to allow case folding support

00:07:52,240 --> 00:07:58,240
in the ext family file systems

00:07:56,000 --> 00:08:00,240
and i believe we're also looking at once

00:07:58,240 --> 00:08:02,080
that work has landed and been accepted

00:08:00,240 --> 00:08:03,759
to extending that work to other file

00:08:02,080 --> 00:08:06,800
systems

00:08:03,759 --> 00:08:08,319
you might say that that should go in the

00:08:06,800 --> 00:08:11,120
vfs layer and

00:08:08,319 --> 00:08:12,639
that's a reasonable thing to say and one

00:08:11,120 --> 00:08:15,280
of the things that we will look at

00:08:12,639 --> 00:08:16,240
once we've gotten to the point of the

00:08:15,280 --> 00:08:19,520
mechanisms

00:08:16,240 --> 00:08:21,360
and the work being accepted is maybe

00:08:19,520 --> 00:08:24,000
getting that into the vfs layer

00:08:21,360 --> 00:08:25,120
um when i say we i'm not actually doing

00:08:24,000 --> 00:08:28,560
the work

00:08:25,120 --> 00:08:31,039
it's one of my colleagues so

00:08:28,560 --> 00:08:32,719
we'll see where that goes and hopefully

00:08:31,039 --> 00:08:33,839
we're getting pretty close i think again

00:08:32,719 --> 00:08:35,839
this is something that

00:08:33,839 --> 00:08:37,200
should has either been merged or should

00:08:35,839 --> 00:08:40,080
be merged the colonel

00:08:37,200 --> 00:08:41,919
soon i hope once everything's accepted

00:08:40,080 --> 00:08:45,519
one particular thing

00:08:41,919 --> 00:08:47,440
that we had to work on quite a lot

00:08:45,519 --> 00:08:48,720
that was uh added quite a bit of

00:08:47,440 --> 00:08:50,800
complexity to the

00:08:48,720 --> 00:08:53,040
the whole process was local and

00:08:50,800 --> 00:08:54,560
unicode's support

00:08:53,040 --> 00:08:56,080
case folding's a lot easier when you

00:08:54,560 --> 00:08:58,399
just have ascii to consider

00:08:56,080 --> 00:08:59,440
but when you consider locales where

00:08:58,399 --> 00:09:01,360
cases

00:08:59,440 --> 00:09:03,360
some characters might not be considered

00:09:01,360 --> 00:09:04,720
characters that have a case in some

00:09:03,360 --> 00:09:06,880
might be considered to have cases in

00:09:04,720 --> 00:09:09,200
others all that good stuff

00:09:06,880 --> 00:09:10,640
has gone into our implementation so

00:09:09,200 --> 00:09:14,000
hopefully it will be coming

00:09:10,640 --> 00:09:16,480
to a ported game near you someday very

00:09:14,000 --> 00:09:16,480
soon now

00:09:16,640 --> 00:09:19,839
next up runtimes and keeping them up to

00:09:19,360 --> 00:09:22,399
date

00:09:19,839 --> 00:09:23,920
so i'm not going to waste too much of

00:09:22,399 --> 00:09:24,959
your time explaining something that you

00:09:23,920 --> 00:09:27,519
probably know but

00:09:24,959 --> 00:09:29,920
what is the runtime probably best to

00:09:27,519 --> 00:09:32,160
think of it as a promise that's made

00:09:29,920 --> 00:09:33,360
to an application or game developer

00:09:32,160 --> 00:09:34,959
about

00:09:33,360 --> 00:09:37,279
everything that's going to be available

00:09:34,959 --> 00:09:40,399
to the game when it runs in terms of

00:09:37,279 --> 00:09:42,160
library versions software

00:09:40,399 --> 00:09:43,440
all the little bits of infrastructure

00:09:42,160 --> 00:09:44,880
that go around it that you would

00:09:43,440 --> 00:09:47,920
normally expect to come from your

00:09:44,880 --> 00:09:50,640
distribution in your operating system

00:09:47,920 --> 00:09:51,600
the idea with a runtime is that the

00:09:50,640 --> 00:09:53,600
application

00:09:51,600 --> 00:09:55,519
or game developer targets a particular

00:09:53,600 --> 00:09:58,480
runtime at a particular version

00:09:55,519 --> 00:10:00,480
and then doesn't worry too much about

00:09:58,480 --> 00:10:01,920
the actual version or distribution of

00:10:00,480 --> 00:10:05,040
the operating system

00:10:01,920 --> 00:10:06,480
that they'll be running on this is great

00:10:05,040 --> 00:10:08,880
from their point of view

00:10:06,480 --> 00:10:10,399
from maintainers point of view it

00:10:08,880 --> 00:10:13,040
doesn't actually change

00:10:10,399 --> 00:10:14,079
problem the runtime still needs to be

00:10:13,040 --> 00:10:16,480
maintained

00:10:14,079 --> 00:10:19,519
what do i mean by maintained well

00:10:16,480 --> 00:10:22,160
security fixes are a thing

00:10:19,519 --> 00:10:24,720
just because you're not fixing libraries

00:10:22,160 --> 00:10:26,480
provided by your distribution

00:10:24,720 --> 00:10:28,079
you still need to fix the ones provided

00:10:26,480 --> 00:10:30,240
by your runtime you know if there's a

00:10:28,079 --> 00:10:32,079
security breach if there's a floor

00:10:30,240 --> 00:10:33,839
you need to fix it it needs to be rolled

00:10:32,079 --> 00:10:34,880
out all of those run times need to be

00:10:33,839 --> 00:10:37,920
updated

00:10:34,880 --> 00:10:40,000
um protocol changes you know the outside

00:10:37,920 --> 00:10:40,560
world changes there's the limit how much

00:10:40,000 --> 00:10:43,040
we can

00:10:40,560 --> 00:10:43,839
isolate a game if it needs to talk to a

00:10:43,040 --> 00:10:47,120
server

00:10:43,839 --> 00:10:49,600
if it needs to talk to external services

00:10:47,120 --> 00:10:51,760
particularly multiplayer games there

00:10:49,600 --> 00:10:53,600
might be network issues

00:10:51,760 --> 00:10:55,279
so something needs to be done about that

00:10:53,600 --> 00:10:57,120
the library that it's using

00:10:55,279 --> 00:10:58,560
all that stuff needs to be looked at it

00:10:57,120 --> 00:11:01,120
might not be a security fix

00:10:58,560 --> 00:11:02,399
but it might still stop working tls

00:11:01,120 --> 00:11:04,640
certificates roots

00:11:02,399 --> 00:11:06,480
this might would be an example of that

00:11:04,640 --> 00:11:08,720
that stuff needs to be in the run time

00:11:06,480 --> 00:11:09,920
and it needs to be kept up to date and

00:11:08,720 --> 00:11:11,839
of course

00:11:09,920 --> 00:11:13,519
there is random monkey patching at the

00:11:11,839 --> 00:11:15,440
runtime for legacy reasons

00:11:13,519 --> 00:11:17,279
something might be broken something

00:11:15,440 --> 00:11:17,760
might have changed in an unpredictable

00:11:17,279 --> 00:11:19,519
way

00:11:17,760 --> 00:11:21,120
we've had a flag day in the world which

00:11:19,519 --> 00:11:22,800
means that everything needs to

00:11:21,120 --> 00:11:25,440
fit in its house in order to keep on

00:11:22,800 --> 00:11:27,200
working um that still needs to happen

00:11:25,440 --> 00:11:28,560
and it needs to happen for each runtime

00:11:27,200 --> 00:11:30,560
that is still supported

00:11:28,560 --> 00:11:32,079
and since the point of a runtime is that

00:11:30,560 --> 00:11:34,399
it should stay supported for a really

00:11:32,079 --> 00:11:37,760
long time so that a game that you bought

00:11:34,399 --> 00:11:38,800
five ten years ago still works you still

00:11:37,760 --> 00:11:40,880
need to do that

00:11:38,800 --> 00:11:42,480
so this is one of the another one of the

00:11:40,880 --> 00:11:44,560
things we do

00:11:42,480 --> 00:11:45,600
we do maintenance on the runtimes that

00:11:44,560 --> 00:11:48,720
steam uses

00:11:45,600 --> 00:11:50,480
and we are working on uh

00:11:48,720 --> 00:11:52,800
streamlining the process of releasing

00:11:50,480 --> 00:11:53,600
new runtimes and getting security fixes

00:11:52,800 --> 00:11:56,160
into them

00:11:53,600 --> 00:11:57,920
so that we can maintain a quickly

00:11:56,160 --> 00:12:00,880
iterating bunch of runtimes

00:11:57,920 --> 00:12:03,200
that get regular updates so games aren't

00:12:00,880 --> 00:12:06,480
chained to old versions of libraries

00:12:03,200 --> 00:12:08,880
but they also stay working with a

00:12:06,480 --> 00:12:12,000
particular runtime the idea is that

00:12:08,880 --> 00:12:12,480
maybe at times a game developer if they

00:12:12,000 --> 00:12:14,720
care

00:12:12,480 --> 00:12:16,320
might re-target their game at a newer

00:12:14,720 --> 00:12:18,560
run time that's provided

00:12:16,320 --> 00:12:19,519
and we'd still be maintaining that and

00:12:18,560 --> 00:12:23,120
that would work

00:12:19,519 --> 00:12:24,959
um or if not it's an old game it's um

00:12:23,120 --> 00:12:26,720
end of life for development it would

00:12:24,959 --> 00:12:27,440
still go on working because the runtimes

00:12:26,720 --> 00:12:30,880
that it was

00:12:27,440 --> 00:12:31,519
targeting was still getting its security

00:12:30,880 --> 00:12:34,079
fixes

00:12:31,519 --> 00:12:36,880
and other random repairs that it needed

00:12:34,079 --> 00:12:36,880
to keep working

00:12:37,279 --> 00:12:41,600
and next we come to containerization

00:12:39,440 --> 00:12:42,639
this is kind of related to the previous

00:12:41,600 --> 00:12:46,880
item runtimes

00:12:42,639 --> 00:12:48,880
um it's all about even more isolation of

00:12:46,880 --> 00:12:50,079
the game or application from the system

00:12:48,880 --> 00:12:51,760
around it

00:12:50,079 --> 00:12:53,839
one of the fundamental building blocks

00:12:51,760 --> 00:12:57,120
is things like

00:12:53,839 --> 00:12:58,800
name spaces so user id namespaces

00:12:57,120 --> 00:12:59,920
network namespaces file system

00:12:58,800 --> 00:13:02,160
namespaces

00:12:59,920 --> 00:13:04,320
where the idea is you just carve off

00:13:02,160 --> 00:13:06,560
little chunks of the system

00:13:04,320 --> 00:13:08,160
to limit what's visible to an

00:13:06,560 --> 00:13:11,120
application or game

00:13:08,160 --> 00:13:12,480
um which allows you to restrict what it

00:13:11,120 --> 00:13:14,560
can see

00:13:12,480 --> 00:13:16,320
down to the bits that it needs to to

00:13:14,560 --> 00:13:18,800
work the idea of this is

00:13:16,320 --> 00:13:21,040
partly for security reasons um so that

00:13:18,800 --> 00:13:22,800
if there's a flawless limit

00:13:21,040 --> 00:13:24,720
or vulnerability there's a limit to what

00:13:22,800 --> 00:13:27,440
the game or application can do

00:13:24,720 --> 00:13:28,160
and it's partly stability the less of

00:13:27,440 --> 00:13:30,720
the system

00:13:28,160 --> 00:13:31,920
the more restricted point of view that a

00:13:30,720 --> 00:13:35,600
game or application

00:13:31,920 --> 00:13:37,600
has the fewer things can actually cause

00:13:35,600 --> 00:13:40,320
it to stop working if it

00:13:37,600 --> 00:13:42,079
literally can never see them then those

00:13:40,320 --> 00:13:44,320
things can't

00:13:42,079 --> 00:13:46,399
we hope stop it from working if they

00:13:44,320 --> 00:13:49,040
change in some way

00:13:46,399 --> 00:13:50,000
so that's what containerization is about

00:13:49,040 --> 00:13:52,000
i talked a little about

00:13:50,000 --> 00:13:53,839
name spaces one of the big deals right

00:13:52,000 --> 00:13:56,000
now is flat pack

00:13:53,839 --> 00:13:57,600
um and bubble wrap is the technology

00:13:56,000 --> 00:13:59,519
that it's based on flat pack

00:13:57,600 --> 00:14:01,199
provides a lot of the infrastructure and

00:13:59,519 --> 00:14:03,839
work around it bubble wraps the

00:14:01,199 --> 00:14:04,639
sort of lower level thing that it's

00:14:03,839 --> 00:14:06,639
built on

00:14:04,639 --> 00:14:08,880
and we're doing a fair amount of work to

00:14:06,639 --> 00:14:11,920
get steam games running

00:14:08,880 --> 00:14:12,399
under those things one of our goals is

00:14:11,920 --> 00:14:15,360
that

00:14:12,399 --> 00:14:17,279
in addition to our own containerization

00:14:15,360 --> 00:14:18,160
work which is also built around bubble

00:14:17,279 --> 00:14:20,720
wrap

00:14:18,160 --> 00:14:21,519
and is particularly targeted at steel

00:14:20,720 --> 00:14:24,560
and valve

00:14:21,519 --> 00:14:25,440
we also want to be able to make all of

00:14:24,560 --> 00:14:27,040
it work

00:14:25,440 --> 00:14:28,800
under flat pack there are some

00:14:27,040 --> 00:14:31,279
challenges to this

00:14:28,800 --> 00:14:33,120
because there are things that steam or

00:14:31,279 --> 00:14:35,120
the way that steam launches games expect

00:14:33,120 --> 00:14:36,079
to do that it doesn't quite fit into the

00:14:35,120 --> 00:14:38,160
flat pack

00:14:36,079 --> 00:14:39,519
world view but we're coordinating

00:14:38,160 --> 00:14:42,959
between

00:14:39,519 --> 00:14:46,160
the flat pack teams and

00:14:42,959 --> 00:14:48,079
valve and trying to get to a point where

00:14:46,160 --> 00:14:50,000
both things play nicely with one another

00:14:48,079 --> 00:14:51,920
you know because then

00:14:50,000 --> 00:14:53,199
it would be really great if flat pack

00:14:51,920 --> 00:14:56,320
were a mechanism where

00:14:53,199 --> 00:14:56,720
we could provide steam games and they

00:14:56,320 --> 00:15:00,480
would

00:14:56,720 --> 00:15:02,079
hopefully just work so

00:15:00,480 --> 00:15:03,519
one of the things there that's quite

00:15:02,079 --> 00:15:05,360
important and we

00:15:03,519 --> 00:15:06,639
are sinking quite a lot of time into is

00:15:05,360 --> 00:15:10,399
device access

00:15:06,639 --> 00:15:11,360
raw or faked game libraries and game

00:15:10,399 --> 00:15:12,959
frameworks or

00:15:11,360 --> 00:15:14,639
games directly themselves if they don't

00:15:12,959 --> 00:15:17,040
use the framework

00:15:14,639 --> 00:15:18,720
are quite keen on quite a lot of

00:15:17,040 --> 00:15:20,000
low-level access to things like

00:15:18,720 --> 00:15:21,680
controllers

00:15:20,000 --> 00:15:23,279
and devices that represent them in the

00:15:21,680 --> 00:15:24,959
operating system

00:15:23,279 --> 00:15:27,199
that's understandable they often have

00:15:24,959 --> 00:15:30,240
fairly specialized needs they're not

00:15:27,199 --> 00:15:31,839
typical applications they might

00:15:30,240 --> 00:15:33,519
quite a few of them are precious and

00:15:31,839 --> 00:15:36,560
unique snowflakes in what they do

00:15:33,519 --> 00:15:38,000
and for a good reason so um

00:15:36,560 --> 00:15:40,560
we have to look at that and we have to

00:15:38,000 --> 00:15:42,079
figure out how do we punch holes into

00:15:40,560 --> 00:15:44,959
the containerization

00:15:42,079 --> 00:15:46,320
solution whether it's flat pack or a

00:15:44,959 --> 00:15:47,120
pressure vessel the thing that we're

00:15:46,320 --> 00:15:48,880
working on

00:15:47,120 --> 00:15:50,160
or something a bit more bespoke with

00:15:48,880 --> 00:15:53,600
bubble wrap you know

00:15:50,160 --> 00:15:55,600
how do we make it work and do we expose

00:15:53,600 --> 00:15:57,519
a raw device or do we fake up a raw

00:15:55,600 --> 00:15:59,279
device you know and if we do that

00:15:57,519 --> 00:16:00,720
how much heavy lifting are we doing with

00:15:59,279 --> 00:16:02,800
sort of emulation

00:16:00,720 --> 00:16:04,399
um to make it look like they've actually

00:16:02,800 --> 00:16:06,800
got the raw device

00:16:04,399 --> 00:16:08,240
um you know and then we have to also

00:16:06,800 --> 00:16:12,639
consider security

00:16:08,240 --> 00:16:14,560
are we actually just

00:16:12,639 --> 00:16:16,000
you know contradicting the main purpose

00:16:14,560 --> 00:16:17,759
of the containers for the two main

00:16:16,000 --> 00:16:20,399
purposes the stability

00:16:17,759 --> 00:16:21,199
and the security by punching these holes

00:16:20,399 --> 00:16:23,920
we have to be quite

00:16:21,199 --> 00:16:24,240
careful when we propose these things um

00:16:23,920 --> 00:16:28,240
so

00:16:24,240 --> 00:16:30,480
that is the the next big area which is

00:16:28,240 --> 00:16:32,000
related to the the run times that we've

00:16:30,480 --> 00:16:33,839
talked about because of course

00:16:32,000 --> 00:16:35,920
typically your container would have a

00:16:33,839 --> 00:16:36,639
runtime parachuted into it to be made

00:16:35,920 --> 00:16:40,079
available

00:16:36,639 --> 00:16:40,079
to the application that's right

00:16:41,440 --> 00:16:47,279
right diving a little deeper into the

00:16:44,160 --> 00:16:50,720
whole containerization runtime

00:16:47,279 --> 00:16:53,279
security rabbit hole we find

00:16:50,720 --> 00:16:54,320
segregated dynamic linking now this

00:16:53,279 --> 00:16:56,639
one's one of

00:16:54,320 --> 00:16:57,519
my personal projects and in that i'm one

00:16:56,639 --> 00:17:00,959
of the people who

00:16:57,519 --> 00:17:02,720
does quite a lot of the work on it so

00:17:00,959 --> 00:17:05,280
you probably haven't come across the

00:17:02,720 --> 00:17:07,760
phrase before what does it even mean

00:17:05,280 --> 00:17:09,039
uh well normally when you link to a

00:17:07,760 --> 00:17:11,039
library

00:17:09,039 --> 00:17:12,319
you get symbols from that library but

00:17:11,039 --> 00:17:14,240
the library pulls in its own

00:17:12,319 --> 00:17:16,839
dependencies as well

00:17:14,240 --> 00:17:18,400
and you see the symbols from those

00:17:16,839 --> 00:17:21,280
dependencies

00:17:18,400 --> 00:17:23,280
if a library depends on something that

00:17:21,280 --> 00:17:24,559
you've already pulled in another library

00:17:23,280 --> 00:17:25,039
or third library that you've already

00:17:24,559 --> 00:17:27,839
pulled in

00:17:25,039 --> 00:17:29,760
it'll just use that instead which is all

00:17:27,839 --> 00:17:31,600
well and good and it's mostly what you

00:17:29,760 --> 00:17:33,520
want and is efficient and it's

00:17:31,600 --> 00:17:34,720
generally the right thing to do

00:17:33,520 --> 00:17:37,039
unfortunately

00:17:34,720 --> 00:17:38,880
sometimes particularly when you have

00:17:37,039 --> 00:17:40,320
long-lived applications or games that

00:17:38,880 --> 00:17:41,280
have been knocking around for a really

00:17:40,320 --> 00:17:43,120
long time

00:17:41,280 --> 00:17:44,480
they'll depend on a version of a library

00:17:43,120 --> 00:17:46,000
that's not compatible

00:17:44,480 --> 00:17:48,559
with a version that something else is

00:17:46,000 --> 00:17:51,679
using so for example

00:17:48,559 --> 00:17:54,080
a mesa graphics driver might rely on a

00:17:51,679 --> 00:17:55,919
c standard library that's different to

00:17:54,080 --> 00:17:59,440
the one that a game

00:17:55,919 --> 00:18:02,000
it relies on you can't have two of those

00:17:59,440 --> 00:18:04,480
in the same link chain at least not

00:18:02,000 --> 00:18:04,480
currently

00:18:04,880 --> 00:18:08,720
you're gonna have a really bad day if

00:18:06,480 --> 00:18:09,360
that happens even if you could make it

00:18:08,720 --> 00:18:12,480
happen

00:18:09,360 --> 00:18:15,760
it would just be messy painful

00:18:12,480 --> 00:18:17,679
and not work very well so

00:18:15,760 --> 00:18:19,679
at least until segregated dynamic

00:18:17,679 --> 00:18:20,160
linking comes along so the idea with

00:18:19,679 --> 00:18:23,760
this

00:18:20,160 --> 00:18:26,000
is that you can load a library and

00:18:23,760 --> 00:18:27,760
just sort of draw a little dotted line

00:18:26,000 --> 00:18:29,679
around its symbols and you'll only see

00:18:27,760 --> 00:18:32,160
the symbols from that library itself

00:18:29,679 --> 00:18:33,919
um you won't see the symbols from any of

00:18:32,160 --> 00:18:37,200
its dependencies they'll be loaded

00:18:33,919 --> 00:18:40,960
into a little separate namespace

00:18:37,200 --> 00:18:42,080
and likewise the library won't see any

00:18:40,960 --> 00:18:44,880
symbols

00:18:42,080 --> 00:18:47,440
from your dependencies it gets its own

00:18:44,880 --> 00:18:50,400
little set

00:18:47,440 --> 00:18:51,360
now this isn't a security mechanism

00:18:50,400 --> 00:18:54,480
there is no

00:18:51,360 --> 00:18:57,600
hard enforced barrier

00:18:54,480 --> 00:19:00,640
between the these these name spaces

00:18:57,600 --> 00:19:03,200
uh it's built on dlm open which is a

00:19:00,640 --> 00:19:04,000
new ish call provided by glibc which

00:19:03,200 --> 00:19:07,039
does

00:19:04,000 --> 00:19:09,440
um the low-level work and

00:19:07,039 --> 00:19:10,799
on top of that we've done a bunch of

00:19:09,440 --> 00:19:13,600
work to

00:19:10,799 --> 00:19:15,039
mainly to make it streamlined and

00:19:13,600 --> 00:19:17,440
seamless for the user

00:19:15,039 --> 00:19:19,600
the basic mechanism already works but

00:19:17,440 --> 00:19:21,360
you have to do a lot of juggling

00:19:19,600 --> 00:19:23,039
and it turns out there are a couple of

00:19:21,360 --> 00:19:24,720
things that

00:19:23,039 --> 00:19:26,720
have to be shared and have to be

00:19:24,720 --> 00:19:28,000
compatible uh one of them being the c

00:19:26,720 --> 00:19:30,640
library itself

00:19:28,000 --> 00:19:32,720
uh you can it turns out to have more

00:19:30,640 --> 00:19:34,640
than one copy of the c library

00:19:32,720 --> 00:19:36,880
um with this mechanism the link chain

00:19:34,640 --> 00:19:38,480
but it can get a little hairy especially

00:19:36,880 --> 00:19:41,840
if

00:19:38,480 --> 00:19:44,559
1glibc tries to free memory allocated by

00:19:41,840 --> 00:19:46,400
another or if threading is involved the

00:19:44,559 --> 00:19:47,919
g-loop sees

00:19:46,400 --> 00:19:50,000
let's just say they don't get on and

00:19:47,919 --> 00:19:51,679
they do not play nicely with one another

00:19:50,000 --> 00:19:53,840
so we've had to do a few things to make

00:19:51,679 --> 00:19:55,840
that seamless so that the libraries that

00:19:53,840 --> 00:19:58,240
should be the same for all of the

00:19:55,840 --> 00:20:01,039
namespaces there's only one copy of

00:19:58,240 --> 00:20:02,640
and then the rest of the isolation works

00:20:01,039 --> 00:20:07,760
without any code changes

00:20:02,640 --> 00:20:10,000
and without any work by the game

00:20:07,760 --> 00:20:10,880
writer or the application developer or

00:20:10,000 --> 00:20:13,120
all that work and

00:20:10,880 --> 00:20:14,000
not a lot once these once this tooling

00:20:13,120 --> 00:20:15,520
is added

00:20:14,000 --> 00:20:17,440
there's a tiny little bit that generates

00:20:15,520 --> 00:20:19,760
a stub library to allow the

00:20:17,440 --> 00:20:21,200
namespace segregation to happen and

00:20:19,760 --> 00:20:24,640
that's automated

00:20:21,200 --> 00:20:27,760
so it should be coming to uh

00:20:24,640 --> 00:20:29,760
hopefully um i'm hoping to get it into

00:20:27,760 --> 00:20:30,880
the next glibc release or possibly the

00:20:29,760 --> 00:20:33,360
one after that

00:20:30,880 --> 00:20:34,320
and then hopefully we'll be coming to a

00:20:33,360 --> 00:20:36,000
pressure vessel

00:20:34,320 --> 00:20:37,440
and possibly a flat pack if they're

00:20:36,000 --> 00:20:41,120
interested in it um

00:20:37,440 --> 00:20:43,120
implementation uh shortly after that and

00:20:41,120 --> 00:20:44,559
yeah that's it so i'll be happy to

00:20:43,120 --> 00:20:46,320
answer lots of questions about this one

00:20:44,559 --> 00:20:49,840
because this is a bit of work that i

00:20:46,320 --> 00:20:49,840
personally know best

00:20:52,240 --> 00:20:55,360
and now a bit of change of pace uh the

00:20:54,640 --> 00:20:58,640
next item

00:20:55,360 --> 00:21:02,159
open xr so vrna are

00:20:58,640 --> 00:21:05,039
so hot right now so uh openxr

00:21:02,159 --> 00:21:06,080
is an implementation which seeks to

00:21:05,039 --> 00:21:08,240
provide

00:21:06,080 --> 00:21:09,520
things like both the low-level dryers

00:21:08,240 --> 00:21:12,320
and drivers

00:21:09,520 --> 00:21:13,360
and the high-level user space api that

00:21:12,320 --> 00:21:16,640
applications

00:21:13,360 --> 00:21:19,919
or games or what have you will use

00:21:16,640 --> 00:21:23,840
to provide vr and ar

00:21:19,919 --> 00:21:26,320
um to to users and

00:21:23,840 --> 00:21:28,320
one of the things that open xr is under

00:21:26,320 --> 00:21:31,679
the chromos umbrella the

00:21:28,320 --> 00:21:32,400
the vulcan people and the idea is to

00:21:31,679 --> 00:21:35,520
provide

00:21:32,400 --> 00:21:38,960
a uniform unified set

00:21:35,520 --> 00:21:42,640
so uh in much this hopefully in

00:21:38,960 --> 00:21:44,240
more a better way than the graphics

00:21:42,640 --> 00:21:45,919
libraries currently do because we still

00:21:44,240 --> 00:21:49,280
got the split between

00:21:45,919 --> 00:21:52,799
we've got the mesa vulcan directx

00:21:49,280 --> 00:21:54,720
splits the goal is that everyone will be

00:21:52,799 --> 00:21:56,799
able to use open xr

00:21:54,720 --> 00:21:59,280
it will have the same shape from the

00:21:56,799 --> 00:22:01,440
driver's point of view and from the

00:21:59,280 --> 00:22:03,200
applications or games point of view the

00:22:01,440 --> 00:22:06,320
implementations might differ

00:22:03,200 --> 00:22:07,200
but we're hoping that and currents are

00:22:06,320 --> 00:22:10,480
hoping that

00:22:07,200 --> 00:22:11,760
this will make it much easier for openxr

00:22:10,480 --> 00:22:15,120
to be used by

00:22:11,760 --> 00:22:17,280
anyone who wants to do vr and ar

00:22:15,120 --> 00:22:19,200
and one of the things that we're working

00:22:17,280 --> 00:22:21,200
on is making it good enough so you may

00:22:19,200 --> 00:22:24,080
be aware that valve have their

00:22:21,200 --> 00:22:25,679
valve vr that was started before open xr

00:22:24,080 --> 00:22:28,159
came along

00:22:25,679 --> 00:22:29,760
one of our goals is to see if we can get

00:22:28,159 --> 00:22:33,120
open xr to the point

00:22:29,760 --> 00:22:34,480
where valve vr can hop from one backend

00:22:33,120 --> 00:22:38,240
set of implementations

00:22:34,480 --> 00:22:41,440
to this because the ultimate goal

00:22:38,240 --> 00:22:45,200
is that vr and ar should work

00:22:41,440 --> 00:22:46,480
um out of the box without the users

00:22:45,200 --> 00:22:48,880
having to know

00:22:46,480 --> 00:22:49,919
which hardware is compatible with which

00:22:48,880 --> 00:22:51,840
framework

00:22:49,919 --> 00:22:53,360
um you should be able to buy it plug it

00:22:51,840 --> 00:22:56,480
in be ready to go

00:22:53,360 --> 00:22:57,919
that's it um and um we

00:22:56,480 --> 00:22:59,600
and valve believe that that's in

00:22:57,919 --> 00:23:02,080
everyone's interests you know

00:22:59,600 --> 00:23:04,400
for this thing to take off properly um

00:23:02,080 --> 00:23:06,400
because right now it's a bit like the

00:23:04,400 --> 00:23:07,360
old days right at the beginning when 3d

00:23:06,400 --> 00:23:10,320
cards were a thing

00:23:07,360 --> 00:23:12,000
a new thing and you just had to know so

00:23:10,320 --> 00:23:14,159
much about what was compatible with what

00:23:12,000 --> 00:23:16,559
to get them up and running

00:23:14,159 --> 00:23:18,640
don't like that i think it stops take up

00:23:16,559 --> 00:23:21,919
it stops the spread of

00:23:18,640 --> 00:23:22,640
vr and ar so we're hoping to get that

00:23:21,919 --> 00:23:26,080
done

00:23:22,640 --> 00:23:28,799
so that we can explore these brave new

00:23:26,080 --> 00:23:28,799
virtual worlds

00:23:30,240 --> 00:23:34,799
and finally the last item on my list um

00:23:33,120 --> 00:23:35,280
it's got a bit of a clunky name because

00:23:34,799 --> 00:23:38,640
i don't

00:23:35,280 --> 00:23:40,799
really have a well-known name to

00:23:38,640 --> 00:23:44,400
describe it by but

00:23:40,799 --> 00:23:48,559
atomic updates and a b booting well so

00:23:44,400 --> 00:23:51,120
what do i mean by that i hear you ask

00:23:48,559 --> 00:23:52,320
so the whole idea of atomic updates is

00:23:51,120 --> 00:23:54,640
that you have quick

00:23:52,320 --> 00:23:55,360
foolproof updates you get a definite

00:23:54,640 --> 00:23:57,600
result

00:23:55,360 --> 00:23:58,799
you know whether the update of your

00:23:57,600 --> 00:24:00,480
operating system

00:23:58,799 --> 00:24:01,919
your distribution whatever you want to

00:24:00,480 --> 00:24:05,039
call it worked

00:24:01,919 --> 00:24:07,200
or didn't and the idea of a b booting is

00:24:05,039 --> 00:24:11,039
that you have two copies of the system

00:24:07,200 --> 00:24:13,679
and you hop from one to the other

00:24:11,039 --> 00:24:14,880
as you go through your updates so you

00:24:13,679 --> 00:24:17,760
may start on a

00:24:14,880 --> 00:24:18,320
you'll update b check that it works did

00:24:17,760 --> 00:24:20,960
it work

00:24:18,320 --> 00:24:22,720
great we'll start booting b from now on

00:24:20,960 --> 00:24:24,480
next time we update we'll end up on an

00:24:22,720 --> 00:24:28,000
updated version of the

00:24:24,480 --> 00:24:29,679
a copy um if it didn't

00:24:28,000 --> 00:24:31,360
we can fall back to the last one we had

00:24:29,679 --> 00:24:33,520
which is great because especially if

00:24:31,360 --> 00:24:37,760
you're doing things like

00:24:33,520 --> 00:24:40,240
a game console like piece of kit or

00:24:37,760 --> 00:24:41,600
a very specialized operating system

00:24:40,240 --> 00:24:43,279
where you don't want to put

00:24:41,600 --> 00:24:45,120
a distribution where you don't want to

00:24:43,279 --> 00:24:47,440
put in a lot of tools

00:24:45,120 --> 00:24:49,200
necessarily so maybe the users aren't

00:24:47,440 --> 00:24:49,520
expected to be as technically capable

00:24:49,200 --> 00:24:52,799
and

00:24:49,520 --> 00:24:54,320
really we shouldn't expect them to be

00:24:52,799 --> 00:24:56,240
making the whole process much more

00:24:54,320 --> 00:24:59,200
reliable and also

00:24:56,240 --> 00:25:00,640
one other thing is speeding it up so if

00:24:59,200 --> 00:25:02,640
we tack onto this that we have a

00:25:00,640 --> 00:25:04,080
read-only file system for the bulk of

00:25:02,640 --> 00:25:06,000
the operating system

00:25:04,080 --> 00:25:08,320
it means that when we update we only

00:25:06,000 --> 00:25:10,000
need to update blocks

00:25:08,320 --> 00:25:12,640
at the block level parts of the file

00:25:10,000 --> 00:25:14,480
system that have actually changed

00:25:12,640 --> 00:25:15,760
which means you can seriously speed up

00:25:14,480 --> 00:25:17,440
the update

00:25:15,760 --> 00:25:19,200
and since they are read only and we know

00:25:17,440 --> 00:25:22,000
they haven't been altered

00:25:19,200 --> 00:25:24,799
and we do fixed point releases of the

00:25:22,000 --> 00:25:27,360
operator of the distribution

00:25:24,799 --> 00:25:28,000
even if you've skipped a few updates we

00:25:27,360 --> 00:25:30,080
can still

00:25:28,000 --> 00:25:31,600
generate on the server side the list of

00:25:30,080 --> 00:25:34,240
changes that you need and

00:25:31,600 --> 00:25:34,880
limit what you need to download so it's

00:25:34,240 --> 00:25:37,120
fast

00:25:34,880 --> 00:25:38,720
it's reliable we have a fallback

00:25:37,120 --> 00:25:40,640
mechanism

00:25:38,720 --> 00:25:43,840
these are all great things that want to

00:25:40,640 --> 00:25:46,240
provide and we've been working on this

00:25:43,840 --> 00:25:48,000
from the bootloader into all the way up

00:25:46,240 --> 00:25:49,600
the operating system update mechanisms

00:25:48,000 --> 00:25:52,320
themselves

00:25:49,600 --> 00:25:54,159
to provide all of that um you know it's

00:25:52,320 --> 00:25:55,120
not quite turnkey yet but it's getting

00:25:54,159 --> 00:25:57,760
there

00:25:55,120 --> 00:25:59,039
to the uh at the operating system and

00:25:57,760 --> 00:26:00,640
distribution level

00:25:59,039 --> 00:26:02,400
uh now some of you are going to be

00:26:00,640 --> 00:26:02,799
thinking oh well wait a minute does that

00:26:02,400 --> 00:26:04,720
doesn't

00:26:02,799 --> 00:26:07,039
mean i can't hack on the system anymore

00:26:04,720 --> 00:26:08,640
isn't this tremendously unfriendly to

00:26:07,039 --> 00:26:11,120
the whole open source ethos

00:26:08,640 --> 00:26:12,240
it's like well it would be but we have

00:26:11,120 --> 00:26:14,559
provided

00:26:12,240 --> 00:26:15,360
an easy read write read write mode

00:26:14,559 --> 00:26:17,840
switch

00:26:15,360 --> 00:26:19,120
so if you want to mess about with the

00:26:17,840 --> 00:26:20,080
system you want to do a bit of

00:26:19,120 --> 00:26:23,279
development

00:26:20,080 --> 00:26:25,120
um whether you're inside valve or not

00:26:23,279 --> 00:26:27,679
if you want to do a bit of um hacking up

00:26:25,120 --> 00:26:30,159
and try something new you can

00:26:27,679 --> 00:26:32,400
there is a mechanism to just say i'd

00:26:30,159 --> 00:26:35,200
like to switch into read write mode now

00:26:32,400 --> 00:26:36,559
you do that the system becomes writable

00:26:35,200 --> 00:26:37,279
you can mess about it with your heart's

00:26:36,559 --> 00:26:39,760
content

00:26:37,279 --> 00:26:41,440
and the great part is if you break it

00:26:39,760 --> 00:26:42,720
utterly which you know let's face it

00:26:41,440 --> 00:26:44,400
we've all been known to do

00:26:42,720 --> 00:26:46,720
you can always flip back to the previous

00:26:44,400 --> 00:26:49,039
version and then

00:26:46,720 --> 00:26:50,559
use that to bounce back into a known

00:26:49,039 --> 00:26:52,480
good state

00:26:50,559 --> 00:26:54,559
on the version that you were on

00:26:52,480 --> 00:26:56,559
fantastic so it should make um

00:26:54,559 --> 00:26:59,039
development and hacking and hobby

00:26:56,559 --> 00:27:01,840
hacking as well as professional hacking

00:26:59,039 --> 00:27:03,039
um a lot easier for the whole thing and

00:27:01,840 --> 00:27:04,080
that's where we're going with the whole

00:27:03,039 --> 00:27:07,200
atomic updates

00:27:04,080 --> 00:27:08,559
and a b booting thing um

00:27:07,200 --> 00:27:10,880
it's been a big chunk of the work that

00:27:08,559 --> 00:27:13,600
we've been doing for a while but

00:27:10,880 --> 00:27:16,960
it's coming along nicely i hope you'll

00:27:13,600 --> 00:27:16,960
be able to see that real soon

00:27:18,240 --> 00:27:24,960
right that brings me to the end of the

00:27:22,240 --> 00:27:26,320
little quick wizzle top stop tour of the

00:27:24,960 --> 00:27:28,399
work that we're doing for valve

00:27:26,320 --> 00:27:30,320
um i hope it's been enlightening and

00:27:28,399 --> 00:27:32,399
interesting um

00:27:30,320 --> 00:27:34,640
i'm happy to answer questions about any

00:27:32,399 --> 00:27:36,559
of it here's i've just

00:27:34,640 --> 00:27:37,919
put in a little recap of the different

00:27:36,559 --> 00:27:40,480
topics so

00:27:37,919 --> 00:27:41,120
uh to remind you what we talked about so

00:27:40,480 --> 00:27:42,640
um

00:27:41,120 --> 00:27:44,399
hit me up with any questions you like

00:27:42,640 --> 00:27:45,679
about these

00:27:44,399 --> 00:27:47,440
hopefully some of my colleagues are

00:27:45,679 --> 00:27:49,760
going to be here when we do this live

00:27:47,440 --> 00:27:51,600
because

00:27:49,760 --> 00:27:53,279
some of these i know a lot less about

00:27:51,600 --> 00:27:55,039
because i didn't really work on them

00:27:53,279 --> 00:27:58,080
others i know a bit more about and will

00:27:55,039 --> 00:28:01,440
be happy to talk your ears off about

00:27:58,080 --> 00:28:03,840
as much as you like so floor is open to

00:28:01,440 --> 00:28:03,840
questions

00:28:05,110 --> 00:28:11,480

YouTube URL: https://www.youtube.com/watch?v=0NSlBzUtXNI


