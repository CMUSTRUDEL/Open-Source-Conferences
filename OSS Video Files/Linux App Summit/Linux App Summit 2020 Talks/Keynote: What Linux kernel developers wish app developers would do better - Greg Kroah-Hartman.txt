Title: Keynote: What Linux kernel developers wish app developers would do better - Greg Kroah-Hartman
Publication date: 2020-11-15
Playlist: Linux App Summit 2020 Talks
Description: 
	About this talk:

In this talk, a Linux kernel developer gets to complain how his normal "test case" i.e. userspace code, could do better when it comes to a whole range of different things that have been learned over time by maintaining a stable interface to the kernel for 20+ years.

About Greg:

Greg Kroah-Hartman is a Fellow at the Linux Foundation. He is currently responsible for the stable Linux kernel releases, and is a maintainer of the USB, TTY, and driver core subsystems in the kernel as well as other portions of the kernel codebase that he wishes he could forget about.
Captions: 
	00:00:01,360 --> 00:00:07,440
okay is that working now

00:00:04,400 --> 00:00:09,679
i hope so um

00:00:07,440 --> 00:00:11,360
fun thing is i have great i have

00:00:09,679 --> 00:00:12,480
construction happening right below me so

00:00:11,360 --> 00:00:13,200
we might hear some drilling in the

00:00:12,480 --> 00:00:15,040
background but

00:00:13,200 --> 00:00:16,640
hey this is the joy of working from home

00:00:15,040 --> 00:00:19,920
in this situation

00:00:16,640 --> 00:00:22,480
um okay my talk um

00:00:19,920 --> 00:00:24,000
obvious title it's actually really short

00:00:22,480 --> 00:00:27,279
it's only one slide

00:00:24,000 --> 00:00:27,840
i can do this there that's the whole

00:00:27,279 --> 00:00:29,920
talk

00:00:27,840 --> 00:00:31,679
um okay let's go into a little more

00:00:29,920 --> 00:00:32,399
detail though um i'll try and explain

00:00:31,679 --> 00:00:33,600
why

00:00:32,399 --> 00:00:36,160
you don't want to make users mad and

00:00:33,600 --> 00:00:37,520
what happens when you do um

00:00:36,160 --> 00:00:39,040
a little bit about me since it didn't

00:00:37,520 --> 00:00:39,920
introduce me um i've been a kernel

00:00:39,040 --> 00:00:42,000
developer for

00:00:39,920 --> 00:00:42,960
way too long i used to be a embedded

00:00:42,000 --> 00:00:45,039
developer before that

00:00:42,960 --> 00:00:46,320
i maintain stable kernels i have done a

00:00:45,039 --> 00:00:49,039
lot of user space work

00:00:46,320 --> 00:00:49,440
um but at the low level i also maintain

00:00:49,039 --> 00:00:53,120
some

00:00:49,440 --> 00:00:54,480
future space packages um i will make fun

00:00:53,120 --> 00:00:56,079
of gnome later but let me

00:00:54,480 --> 00:00:57,440
tell you i have been advisory board for

00:00:56,079 --> 00:00:58,960
them for many years and i'm still a

00:00:57,440 --> 00:01:00,079
foundation member

00:00:58,960 --> 00:01:02,640
and i've worked on lots and lots of

00:01:00,079 --> 00:01:05,280
different districts um

00:01:02,640 --> 00:01:05,920
so all this stuff comes down to a pretty

00:01:05,280 --> 00:01:08,720
simple thing

00:01:05,920 --> 00:01:09,840
um who are you writing code for um are

00:01:08,720 --> 00:01:13,600
you writing code for

00:01:09,840 --> 00:01:15,119
what type of i mean why do you do this

00:01:13,600 --> 00:01:17,439
why it depends on why you're doing this

00:01:15,119 --> 00:01:21,119
is depends on what you should do

00:01:17,439 --> 00:01:22,159
so um

00:01:21,119 --> 00:01:24,000
very simple if you're writing for

00:01:22,159 --> 00:01:25,360
yourself and it's not a problem you

00:01:24,000 --> 00:01:26,000
throw it over the wall you have fun you

00:01:25,360 --> 00:01:27,439
put it out there

00:01:26,000 --> 00:01:29,439
publish it um you want other people to

00:01:27,439 --> 00:01:31,600
see this stuff get a resume

00:01:29,439 --> 00:01:32,560
wonderful no problem at all don't care

00:01:31,600 --> 00:01:35,680
about anything

00:01:32,560 --> 00:01:37,040
don't worry about it but the problem is

00:01:35,680 --> 00:01:39,439
if you write something that's useful it

00:01:37,040 --> 00:01:41,680
will come back and bite you ssla

00:01:39,439 --> 00:01:43,920
and openssl was infamously created

00:01:41,680 --> 00:01:45,920
because the developer wanted to learn c

00:01:43,920 --> 00:01:47,759
and all the problems that happened with

00:01:45,920 --> 00:01:50,079
that one of the forks of um

00:01:47,759 --> 00:01:51,360
udeth was because somebody wanted to

00:01:50,079 --> 00:01:52,560
learn c again

00:01:51,360 --> 00:01:54,079
and put it out there and people start

00:01:52,560 --> 00:01:54,640
relying on and they have to maintain it

00:01:54,079 --> 00:01:58,320
and

00:01:54,640 --> 00:01:59,920
use it so um if you do this just watch

00:01:58,320 --> 00:02:01,360
out um because it can happen

00:01:59,920 --> 00:02:03,040
um if you're writing it code for others

00:02:01,360 --> 00:02:04,479
which i think everybody here is because

00:02:03,040 --> 00:02:06,079
we all want to write open source

00:02:04,479 --> 00:02:07,680
software we want people to use it

00:02:06,079 --> 00:02:09,039
then we have to care about the users and

00:02:07,680 --> 00:02:10,239
we have to care about what they think

00:02:09,039 --> 00:02:12,480
what they do

00:02:10,239 --> 00:02:13,920
and how we react to them and we have to

00:02:12,480 --> 00:02:15,040
think about them when we create the

00:02:13,920 --> 00:02:17,920
software

00:02:15,040 --> 00:02:18,239
within reason there's the infamous xkid

00:02:17,920 --> 00:02:21,280
um

00:02:18,239 --> 00:02:23,120
document of somebody's odd feature a bug

00:02:21,280 --> 00:02:24,800
was a feature

00:02:23,120 --> 00:02:26,720
everything i say here is within reason

00:02:24,800 --> 00:02:27,840
because there are always some users you

00:02:26,720 --> 00:02:30,000
can never please

00:02:27,840 --> 00:02:31,920
no matter what and those people you can

00:02:30,000 --> 00:02:34,959
safely ignore

00:02:31,920 --> 00:02:37,840
so let's start though um what you

00:02:34,959 --> 00:02:38,959
do and how you act on um creating code

00:02:37,840 --> 00:02:41,120
depends on who you are

00:02:38,959 --> 00:02:42,400
and i'll break everything down into

00:02:41,120 --> 00:02:45,040
about three different groups here

00:02:42,400 --> 00:02:46,640
um kernel developers um this audience is

00:02:45,040 --> 00:02:48,319
not kernel developers but since i am one

00:02:46,640 --> 00:02:50,480
i'll talk about what we've learned

00:02:48,319 --> 00:02:51,680
and how we've made mistakes and what

00:02:50,480 --> 00:02:53,200
we've learned from that and how

00:02:51,680 --> 00:02:54,879
to apply it again to library developers

00:02:53,200 --> 00:02:56,319
and application developers which is the

00:02:54,879 --> 00:02:59,360
primary audience here

00:02:56,319 --> 00:03:01,760
um so first off kernel developers

00:02:59,360 --> 00:03:02,480
easy easy thing um we only have really

00:03:01,760 --> 00:03:04,239
one rule

00:03:02,480 --> 00:03:06,400
and linus gets mad at this whenever you

00:03:04,239 --> 00:03:07,040
see ransom the press or whatnot this is

00:03:06,400 --> 00:03:09,280
when

00:03:07,040 --> 00:03:11,680
we do not we break this rule and the

00:03:09,280 --> 00:03:15,040
rule is we cannot break user space

00:03:11,680 --> 00:03:16,800
and cannot break user space on purpose

00:03:15,040 --> 00:03:19,120
um break it accidentally we'll fix it

00:03:16,800 --> 00:03:21,040
whatever we break user space if nobody

00:03:19,120 --> 00:03:22,480
notices that's fine because we're we

00:03:21,040 --> 00:03:23,519
take advantage of things that when you

00:03:22,480 --> 00:03:25,440
don't notice different

00:03:23,519 --> 00:03:26,799
functionalities or stuff but you just

00:03:25,440 --> 00:03:28,560
can't break user space

00:03:26,799 --> 00:03:30,319
and we make this rule and other

00:03:28,560 --> 00:03:33,280
operating systems have this rule as well

00:03:30,319 --> 00:03:34,879
it's a very solid rule because we always

00:03:33,280 --> 00:03:36,239
want you to upgrade

00:03:34,879 --> 00:03:38,000
and we want you to upgrade without

00:03:36,239 --> 00:03:38,959
worrying about we don't want you to feel

00:03:38,000 --> 00:03:41,120
scared if

00:03:38,959 --> 00:03:42,560
we get a new you see in the release and

00:03:41,120 --> 00:03:43,040
we say hey this fixes a bunch of

00:03:42,560 --> 00:03:44,480
problems

00:03:43,040 --> 00:03:46,080
we don't want you to feel worried about

00:03:44,480 --> 00:03:47,680
taking that and that's

00:03:46,080 --> 00:03:49,599
really really important especially with

00:03:47,680 --> 00:03:50,560
security you want people to take all

00:03:49,599 --> 00:03:51,840
these fixes

00:03:50,560 --> 00:03:53,439
you want people to be able to upgrade

00:03:51,840 --> 00:03:54,400
you want them to also take advantage of

00:03:53,439 --> 00:03:56,959
the new features

00:03:54,400 --> 00:03:59,120
and if you have them even hesitate about

00:03:56,959 --> 00:04:00,879
updating to your latest version

00:03:59,120 --> 00:04:02,640
because if you've broken functionality

00:04:00,879 --> 00:04:06,239
for them they won't

00:04:02,640 --> 00:04:07,760
and that's not okay um again users we've

00:04:06,239 --> 00:04:08,879
learned this the hard way they will not

00:04:07,760 --> 00:04:09,519
update if they're afraid you're going to

00:04:08,879 --> 00:04:12,080
break it

00:04:09,519 --> 00:04:13,280
and in the long time kernel past we used

00:04:12,080 --> 00:04:15,120
to break things and

00:04:13,280 --> 00:04:17,040
we now realize that is not what we

00:04:15,120 --> 00:04:17,840
should ever do i'm gonna have a few

00:04:17,040 --> 00:04:20,320
number rules

00:04:17,840 --> 00:04:21,600
in this talk um they're not necessarily

00:04:20,320 --> 00:04:23,840
my rules but i'll

00:04:21,600 --> 00:04:24,960
i'll claim them for the choice of the

00:04:23,840 --> 00:04:28,160
talk

00:04:24,960 --> 00:04:29,360
um so how do you the problem with never

00:04:28,160 --> 00:04:30,960
breaking user space

00:04:29,360 --> 00:04:32,880
is what you do when you need things to

00:04:30,960 --> 00:04:34,800
change um

00:04:32,880 --> 00:04:36,320
the trick is you just support everything

00:04:34,800 --> 00:04:38,320
until there are no users

00:04:36,320 --> 00:04:39,919
um figuring out when there are and are

00:04:38,320 --> 00:04:41,680
not users is up to you

00:04:39,919 --> 00:04:43,360
in the kernel sometimes we know that oh

00:04:41,680 --> 00:04:44,880
there are no hardware

00:04:43,360 --> 00:04:46,479
of this type out there we used to have

00:04:44,880 --> 00:04:48,400
an architecture well we knew there was

00:04:46,479 --> 00:04:50,479
only two machines in existence

00:04:48,400 --> 00:04:52,240
one of them broke and the other one we

00:04:50,479 --> 00:04:52,560
actually paid the developer to replace

00:04:52,240 --> 00:04:53,840
it

00:04:52,560 --> 00:04:56,000
because we didn't want to support that

00:04:53,840 --> 00:04:57,600
thing anymore um other bits of part

00:04:56,000 --> 00:04:58,240
where we ripped out of the kernel when

00:04:57,600 --> 00:05:00,080
we knew

00:04:58,240 --> 00:05:01,840
things weren't even being used anymore

00:05:00,080 --> 00:05:04,400
we just ripped some code out

00:05:01,840 --> 00:05:05,919
um from intel that device that they know

00:05:04,400 --> 00:05:06,400
is not in the field that nobody actually

00:05:05,919 --> 00:05:08,320
uses

00:05:06,400 --> 00:05:10,320
that's fine but otherwise we have to

00:05:08,320 --> 00:05:12,160
keep supporting users

00:05:10,320 --> 00:05:13,360
because we made that contract we made

00:05:12,160 --> 00:05:15,840
that contract that we gave them a

00:05:13,360 --> 00:05:18,080
functionality we cannot remove it

00:05:15,840 --> 00:05:20,000
but what we can do is we can evolve

00:05:18,080 --> 00:05:20,880
things over time so that nobody actually

00:05:20,000 --> 00:05:22,479
notices

00:05:20,880 --> 00:05:24,800
we can move to different ways things

00:05:22,479 --> 00:05:27,680
happen we can do different things how

00:05:24,800 --> 00:05:28,960
stuff that um works and we can provide

00:05:27,680 --> 00:05:30,720
new ways of doing things

00:05:28,960 --> 00:05:32,720
and we provide new ways of doing things

00:05:30,720 --> 00:05:34,560
hopefully people will migrate over time

00:05:32,720 --> 00:05:35,919
in reality they don't they stick to the

00:05:34,560 --> 00:05:37,600
old stuff which is fine

00:05:35,919 --> 00:05:39,280
but we can provide new ways and this is

00:05:37,600 --> 00:05:40,639
how we constantly evolve and how we

00:05:39,280 --> 00:05:42,800
constantly move forward

00:05:40,639 --> 00:05:44,320
and this is how you survive because you

00:05:42,800 --> 00:05:46,560
have to change with the world

00:05:44,320 --> 00:05:47,360
so you have to provide new functionality

00:05:46,560 --> 00:05:49,520
a lot of people

00:05:47,360 --> 00:05:51,360
i get this complaint a lot from a number

00:05:49,520 --> 00:05:52,000
of people who've been in the i.t and the

00:05:51,360 --> 00:05:53,600
computer industry

00:05:52,000 --> 00:05:55,919
for a long time saying how is linux

00:05:53,600 --> 00:05:57,600
succeeding it's an old model the old

00:05:55,919 --> 00:05:59,600
unix posix model

00:05:57,600 --> 00:06:00,960
is obsolete we shouldn't be doing this

00:05:59,600 --> 00:06:03,840
anymore and the

00:06:00,960 --> 00:06:05,280
problem is um in one way linux supports

00:06:03,840 --> 00:06:06,880
that they support your binaries from 20

00:06:05,280 --> 00:06:10,080
years ago from 25 years ago

00:06:06,880 --> 00:06:11,680
you can still run really old um bsd

00:06:10,080 --> 00:06:13,440
applications you rebuild them and they

00:06:11,680 --> 00:06:15,199
work or you can run your application

00:06:13,440 --> 00:06:15,759
that was built 20 years ago and it still

00:06:15,199 --> 00:06:17,919
works

00:06:15,759 --> 00:06:19,280
so people think linux is stagnated but

00:06:17,919 --> 00:06:20,880
in reality we've created new

00:06:19,280 --> 00:06:22,000
functionalities right next to the old

00:06:20,880 --> 00:06:23,440
functionalities

00:06:22,000 --> 00:06:25,440
and that you can do different things you

00:06:23,440 --> 00:06:26,880
can take advantage of stuff we have ebpf

00:06:25,440 --> 00:06:28,080
which is taking over the world it's a

00:06:26,880 --> 00:06:30,319
micro kernel like

00:06:28,080 --> 00:06:31,360
architecture you can run user space

00:06:30,319 --> 00:06:33,120
programs on the kernel

00:06:31,360 --> 00:06:34,720
you can do all this fancy stuff proven

00:06:33,120 --> 00:06:37,120
that you can't lock up the kernel

00:06:34,720 --> 00:06:39,440
wonderful stuff iou ring is fast

00:06:37,120 --> 00:06:41,120
asynchronous io in a different way that

00:06:39,440 --> 00:06:42,800
has ever been done before and it's again

00:06:41,120 --> 00:06:43,440
sitting right next to the old posix

00:06:42,800 --> 00:06:45,199
model

00:06:43,440 --> 00:06:47,039
so that your old programs can work just

00:06:45,199 --> 00:06:47,600
fine but new programs can take advantage

00:06:47,039 --> 00:06:49,840
of this stuff

00:06:47,600 --> 00:06:51,440
and take advantage of speed increases of

00:06:49,840 --> 00:06:52,720
course linux now is a real-time

00:06:51,440 --> 00:06:54,240
operating system it's been a real-time

00:06:52,720 --> 00:06:55,039
operating system for a while without a

00:06:54,240 --> 00:06:56,960
tree patch

00:06:55,039 --> 00:06:58,080
those changes are almost all merged

00:06:56,960 --> 00:07:00,160
that's something people said

00:06:58,080 --> 00:07:01,599
could never possibly be done but yep we

00:07:00,160 --> 00:07:03,520
did it right next to

00:07:01,599 --> 00:07:05,599
the existing operating system and nobody

00:07:03,520 --> 00:07:07,360
noticed that's how you do it you evolve

00:07:05,599 --> 00:07:10,400
and add new functionality

00:07:07,360 --> 00:07:11,440
without breaking anything um in order to

00:07:10,400 --> 00:07:13,280
do this we you

00:07:11,440 --> 00:07:15,039
have to create the trust that people can

00:07:13,280 --> 00:07:17,199
rely on the kernel developers made this

00:07:15,039 --> 00:07:19,280
public promise 15 years ago

00:07:17,199 --> 00:07:20,720
and we haven't broken it since and that

00:07:19,280 --> 00:07:22,400
is how we're succeeding

00:07:20,720 --> 00:07:24,479
because if we break that trust people

00:07:22,400 --> 00:07:26,800
will stop using us and that's not okay

00:07:24,479 --> 00:07:28,000
and we learned this really really a hard

00:07:26,800 --> 00:07:30,800
way when we

00:07:28,000 --> 00:07:32,400
old development model we used to have um

00:07:30,800 --> 00:07:33,840
stable in the development trees in the

00:07:32,400 --> 00:07:35,599
development tree last a year

00:07:33,840 --> 00:07:37,199
and then the elementary lasted two years

00:07:35,599 --> 00:07:38,800
and then almost three years

00:07:37,199 --> 00:07:40,880
and it turned into a nightmare we broke

00:07:38,800 --> 00:07:42,240
things we had to roll things back we had

00:07:40,880 --> 00:07:44,479
to make things work again

00:07:42,240 --> 00:07:45,759
we had huge massive forks we all were

00:07:44,479 --> 00:07:46,720
working on different things at different

00:07:45,759 --> 00:07:49,440
times

00:07:46,720 --> 00:07:50,400
and it was a nightmare then we after 2.6

00:07:49,440 --> 00:07:51,919
came out

00:07:50,400 --> 00:07:53,680
a long time ago we said we're never

00:07:51,919 --> 00:07:55,520
going to do this again and we're all

00:07:53,680 --> 00:07:57,440
going to be stable every single release

00:07:55,520 --> 00:07:59,440
we do is stable so we've been that way

00:07:57,440 --> 00:08:02,000
since 2003

00:07:59,440 --> 00:08:03,840
and it's worked and people rely on us

00:08:02,000 --> 00:08:05,280
and we've done that um people said this

00:08:03,840 --> 00:08:07,440
is something you can't really do

00:08:05,280 --> 00:08:09,039
we kind of prove that you can do this we

00:08:07,440 --> 00:08:12,160
have a release every three months

00:08:09,039 --> 00:08:13,599
it's stable it's maintained we have long

00:08:12,160 --> 00:08:15,199
term trees that people want to stick to

00:08:13,599 --> 00:08:16,639
those for various reasons for certain

00:08:15,199 --> 00:08:19,360
hardware or products

00:08:16,639 --> 00:08:21,039
but it can be done and so i recommend

00:08:19,360 --> 00:08:24,400
that the stable model

00:08:21,039 --> 00:08:26,319
rolling releases time based stuff works

00:08:24,400 --> 00:08:28,080
so we figured it out the hard way other

00:08:26,319 --> 00:08:30,800
operating systems done this before

00:08:28,080 --> 00:08:32,560
um windows infamously maintains backward

00:08:30,800 --> 00:08:34,399
compatibility osx does not

00:08:32,560 --> 00:08:36,159
and you see os x developers getting very

00:08:34,399 --> 00:08:38,000
mad about that so it's

00:08:36,159 --> 00:08:40,320
a trade-off um depends on where you want

00:08:38,000 --> 00:08:43,039
your operating system to be used or not

00:08:40,320 --> 00:08:44,080
um along those lines this is a big

00:08:43,039 --> 00:08:45,600
reason um

00:08:44,080 --> 00:08:47,519
because we can't force anybody to use

00:08:45,600 --> 00:08:48,800
linux because it's free you can use it

00:08:47,519 --> 00:08:49,440
if you want to or not if it solves your

00:08:48,800 --> 00:08:51,519
problem

00:08:49,440 --> 00:08:53,279
but we don't we should never create and

00:08:51,519 --> 00:08:54,160
give you a reason to stop using it once

00:08:53,279 --> 00:08:56,000
you used it

00:08:54,160 --> 00:08:57,519
once you use it and rely on it we don't

00:08:56,000 --> 00:08:59,440
want you to be bad about it

00:08:57,519 --> 00:09:01,120
you don't want to make a breaking change

00:08:59,440 --> 00:09:03,200
that keeps you um

00:09:01,120 --> 00:09:04,240
it causes you to move away and that's

00:09:03,200 --> 00:09:05,680
something really important

00:09:04,240 --> 00:09:07,519
if you write software you don't want to

00:09:05,680 --> 00:09:08,160
alienate people and cause them to go

00:09:07,519 --> 00:09:11,279
away

00:09:08,160 --> 00:09:13,279
hopefully if you like users um

00:09:11,279 --> 00:09:14,959
okay that's kernel development i guess

00:09:13,279 --> 00:09:17,680
we'll do questions at the end

00:09:14,959 --> 00:09:18,480
so i'll wait this is going fast this is

00:09:17,680 --> 00:09:20,320
fun

00:09:18,480 --> 00:09:21,200
um let's talk about library developers i

00:09:20,320 --> 00:09:22,399
know there's a number of library

00:09:21,200 --> 00:09:25,600
developers here

00:09:22,399 --> 00:09:28,320
and um this

00:09:25,600 --> 00:09:29,839
is the hardest job ever um i really

00:09:28,320 --> 00:09:32,000
really feel sorry for you

00:09:29,839 --> 00:09:33,600
libraries writing this library develop

00:09:32,000 --> 00:09:34,000
is hard it's one of the hardest thing to

00:09:33,600 --> 00:09:35,279
do

00:09:34,000 --> 00:09:37,200
in the kernel we're really lucky because

00:09:35,279 --> 00:09:38,560
we have internal apis that we can evolve

00:09:37,200 --> 00:09:40,080
and change over time

00:09:38,560 --> 00:09:41,680
because they're inside the kernel we

00:09:40,080 --> 00:09:43,120
don't have to worry about breaking that

00:09:41,680 --> 00:09:45,040
things that once things go outside the

00:09:43,120 --> 00:09:48,720
kernel i mean that's all library is it's

00:09:45,040 --> 00:09:50,560
outwardly facing api um it's impossible

00:09:48,720 --> 00:09:52,399
and the main reason it's impossible is

00:09:50,560 --> 00:09:52,959
you can never know if your api actually

00:09:52,399 --> 00:09:54,480
works

00:09:52,959 --> 00:09:55,680
until you have a lot of people using it

00:09:54,480 --> 00:09:56,560
and by the time you have a lot of people

00:09:55,680 --> 00:09:57,760
using it

00:09:56,560 --> 00:09:59,440
then you realize all the problems are

00:09:57,760 --> 00:10:00,160
worth it in it and then you can't change

00:09:59,440 --> 00:10:02,320
it

00:10:00,160 --> 00:10:04,480
um getting it right the first time is

00:10:02,320 --> 00:10:07,200
almost impossible um

00:10:04,480 --> 00:10:07,760
it's hard i i don't know how you guys do

00:10:07,200 --> 00:10:10,320
it um

00:10:07,760 --> 00:10:12,079
it's a very difficult task um the few

00:10:10,320 --> 00:10:14,399
libraries i've had to write are

00:10:12,079 --> 00:10:17,360
horrible and you learn over time there's

00:10:14,399 --> 00:10:20,560
some good ideas on how to do libraries

00:10:17,360 --> 00:10:22,000
but it's really difficult um here's some

00:10:20,560 --> 00:10:23,279
good ideas

00:10:22,000 --> 00:10:24,800
one thing is you can never break

00:10:23,279 --> 00:10:26,640
anything if somebody starts using your

00:10:24,800 --> 00:10:29,040
library you can't break it

00:10:26,640 --> 00:10:30,640
that's just a flat out rule you should

00:10:29,040 --> 00:10:32,880
not ever

00:10:30,640 --> 00:10:34,320
break that rule otherwise you'll not use

00:10:32,880 --> 00:10:36,240
it you won't have a user anymore

00:10:34,320 --> 00:10:37,760
um the only way you can fix thing is by

00:10:36,240 --> 00:10:39,680
creating new ones and when you create a

00:10:37,760 --> 00:10:40,320
new api you can hope people move to that

00:10:39,680 --> 00:10:43,279
api

00:10:40,320 --> 00:10:44,640
but you still gotta stick around and

00:10:43,279 --> 00:10:46,880
keep that old api

00:10:44,640 --> 00:10:48,079
but in that api that you're creating you

00:10:46,880 --> 00:10:49,839
need to be strict

00:10:48,079 --> 00:10:51,680
you should not follow the postal's law

00:10:49,839 --> 00:10:53,440
for apis it just does not work we've

00:10:51,680 --> 00:10:56,240
seen it happen time and time again

00:10:53,440 --> 00:10:57,920
if you accept things that are too um

00:10:56,240 --> 00:10:59,200
that are out of bounds or out of

00:10:57,920 --> 00:11:00,480
scope from what you think you should be

00:10:59,200 --> 00:11:02,560
accepting and then you try and change

00:11:00,480 --> 00:11:04,079
that later on you will break real users

00:11:02,560 --> 00:11:06,079
so you need to be very strict in the

00:11:04,079 --> 00:11:07,600
beginning in the kernel we learned this

00:11:06,079 --> 00:11:09,920
the hard way with system calls

00:11:07,600 --> 00:11:11,279
we had extra fields and other sections

00:11:09,920 --> 00:11:13,120
of ioctals and such

00:11:11,279 --> 00:11:15,200
that we didn't care about and then when

00:11:13,120 --> 00:11:17,040
we want to increase things or

00:11:15,200 --> 00:11:19,120
add a new feature or change something we

00:11:17,040 --> 00:11:21,120
all of a sudden had to

00:11:19,120 --> 00:11:22,160
accept that that those fields would be

00:11:21,120 --> 00:11:23,760
full of garbage

00:11:22,160 --> 00:11:25,600
and we couldn't do that so we now have a

00:11:23,760 --> 00:11:27,120
rule when we add new fields and new

00:11:25,600 --> 00:11:29,200
system calls that we have

00:11:27,120 --> 00:11:30,240
if anything is reserved or anything is

00:11:29,200 --> 00:11:33,040
um

00:11:30,240 --> 00:11:34,240
reserved for future use we check it and

00:11:33,040 --> 00:11:34,959
we check to make sure it's set to

00:11:34,240 --> 00:11:36,880
nothing

00:11:34,959 --> 00:11:38,000
and otherwise we will break in the

00:11:36,880 --> 00:11:39,279
future and we'll have to create another

00:11:38,000 --> 00:11:40,880
system call if you look we have

00:11:39,279 --> 00:11:42,480
we number our system calls if you have

00:11:40,880 --> 00:11:44,240
the third and fourth version of them

00:11:42,480 --> 00:11:45,680
we have a number of those over time

00:11:44,240 --> 00:11:47,440
that's just how things grow

00:11:45,680 --> 00:11:48,720
um so don't don't be don't follow

00:11:47,440 --> 00:11:51,200
postal's law when you're do

00:11:48,720 --> 00:11:51,839
creating an api i you cannot maintain it

00:11:51,200 --> 00:11:54,079
over time

00:11:51,839 --> 00:11:55,040
just trust me i look at glibc um they

00:11:54,079 --> 00:11:57,400
know how to do this well

00:11:55,040 --> 00:12:00,320
as well um

00:11:57,400 --> 00:12:04,079
[Music]

00:12:00,320 --> 00:12:05,360
oh there we go um rusty russell is a

00:12:04,079 --> 00:12:07,519
kernel developer um

00:12:05,360 --> 00:12:09,279
back in 2003 he gave a really good talk

00:12:07,519 --> 00:12:10,800
on how to create an api

00:12:09,279 --> 00:12:12,320
such that if you hate your users or if

00:12:10,800 --> 00:12:14,320
you actually like your users

00:12:12,320 --> 00:12:15,600
um there's two blog posts that he

00:12:14,320 --> 00:12:17,600
summarized it in a nice way

00:12:15,600 --> 00:12:18,880
in 2008 made it a little better the

00:12:17,600 --> 00:12:19,680
original talk slides are really

00:12:18,880 --> 00:12:22,079
interesting i'd

00:12:19,680 --> 00:12:22,800
recommend everybody reading it um and if

00:12:22,079 --> 00:12:24,320
you can find it

00:12:22,800 --> 00:12:26,079
i couldn't find the link online i think

00:12:24,320 --> 00:12:26,480
the talk was recorded somewhere but it

00:12:26,079 --> 00:12:29,360
was from

00:12:26,480 --> 00:12:30,800
2003. um read those blog posts it tells

00:12:29,360 --> 00:12:32,880
you how to

00:12:30,800 --> 00:12:35,519
create an api that somebody cannot get

00:12:32,880 --> 00:12:38,800
wrong and that's the goal you want it to

00:12:35,519 --> 00:12:40,800
be so that your api is intuitive

00:12:38,800 --> 00:12:41,839
is not hard to use and it's

00:12:40,800 --> 00:12:43,440
self-documenting and

00:12:41,839 --> 00:12:46,320
all sorts of good things read those

00:12:43,440 --> 00:12:46,320
things they're really good

00:12:47,519 --> 00:12:52,639
um so again a lot of people claim

00:12:50,800 --> 00:12:54,399
that they want to move different apis

00:12:52,639 --> 00:12:55,680
because of they don't want to use them

00:12:54,399 --> 00:12:57,120
anymore they're broken

00:12:55,680 --> 00:12:59,120
you got to keep supporting them because

00:12:57,120 --> 00:13:01,440
you will have users and you want to

00:12:59,120 --> 00:13:02,720
if you do want to have people move to

00:13:01,440 --> 00:13:04,480
new things you need to provide them

00:13:02,720 --> 00:13:05,920
guides and help and documentation for

00:13:04,480 --> 00:13:07,279
how to do that you can't just throw a

00:13:05,920 --> 00:13:09,760
new api out there

00:13:07,279 --> 00:13:11,279
and expect them to use it and you need

00:13:09,760 --> 00:13:13,279
to document this stuff and

00:13:11,279 --> 00:13:14,480
you need to document it really well

00:13:13,279 --> 00:13:17,120
because

00:13:14,480 --> 00:13:18,240
if you don't stack overflow is going to

00:13:17,120 --> 00:13:21,440
try and do it and

00:13:18,240 --> 00:13:23,040
we have so many examples uh

00:13:21,440 --> 00:13:24,800
in the kernel elise you see these common

00:13:23,040 --> 00:13:26,000
patterns get submitted to us and drivers

00:13:24,800 --> 00:13:27,360
and whatnot and you're like where is

00:13:26,000 --> 00:13:29,440
this wrong code coming from

00:13:27,360 --> 00:13:30,639
and it's a stack overflow post that's

00:13:29,440 --> 00:13:32,560
been uploaded from

00:13:30,639 --> 00:13:34,639
10 years ago with here's how you solve

00:13:32,560 --> 00:13:35,760
this problem when that's actually wrong

00:13:34,639 --> 00:13:37,360
downloading those and getting rid of

00:13:35,760 --> 00:13:38,320
those is impossible so you just have to

00:13:37,360 --> 00:13:40,800
deal with that you don't want

00:13:38,320 --> 00:13:42,880
stackoverflow to be your primary use

00:13:40,800 --> 00:13:44,720
your primary documentation provide good

00:13:42,880 --> 00:13:46,480
documentation so in the kernel now we

00:13:44,720 --> 00:13:47,839
have tons and tons of documentation

00:13:46,480 --> 00:13:49,199
i don't know if anybody reads it but we

00:13:47,839 --> 00:13:50,560
have there to at least point people out

00:13:49,199 --> 00:13:51,519
when they get it wrong we can say go

00:13:50,560 --> 00:13:53,279
read this stuff

00:13:51,519 --> 00:13:54,959
and that's the most important thing but

00:13:53,279 --> 00:13:57,519
you need to provide a guide for how to

00:13:54,959 --> 00:14:00,480
do this type of stuff

00:13:57,519 --> 00:14:02,320
and again always evolve i have i can't

00:14:00,480 --> 00:14:04,720
count the number of times i've seen

00:14:02,320 --> 00:14:06,399
deprecated in libraries and that you

00:14:04,720 --> 00:14:08,079
rebuild your code against an old

00:14:06,399 --> 00:14:10,079
a new library and it's all of a sudden

00:14:08,079 --> 00:14:12,320
starts selling you a bunch of warnings

00:14:10,079 --> 00:14:13,440
that's the api that's the library

00:14:12,320 --> 00:14:16,000
creator saying

00:14:13,440 --> 00:14:16,480
um they give up you know um that's not

00:14:16,000 --> 00:14:17,920
okay

00:14:16,480 --> 00:14:19,760
a lot of times you can just they're

00:14:17,920 --> 00:14:21,680
saying use this instead of that then

00:14:19,760 --> 00:14:23,199
do that in the library work around those

00:14:21,680 --> 00:14:25,440
things because once you have a user you

00:14:23,199 --> 00:14:27,040
need to keep holding on to that user

00:14:25,440 --> 00:14:28,639
i don't want to rewrite my code just

00:14:27,040 --> 00:14:29,279
because you updated something unless

00:14:28,639 --> 00:14:31,680
there's a

00:14:29,279 --> 00:14:33,839
really really really good reason and

00:14:31,680 --> 00:14:35,760
almost never there almost never is

00:14:33,839 --> 00:14:37,519
um please just work around it and solve

00:14:35,760 --> 00:14:40,240
the problem on your own

00:14:37,519 --> 00:14:40,959
um that being said sometimes you do have

00:14:40,240 --> 00:14:43,120
to take a break

00:14:40,959 --> 00:14:44,079
you do have to start over again and go

00:14:43,120 --> 00:14:46,720
on but do that

00:14:44,079 --> 00:14:49,199
and do that as a whole new library um

00:14:46,720 --> 00:14:51,279
gtka is a good example of they just

00:14:49,199 --> 00:14:53,360
started over and that was great and they

00:14:51,279 --> 00:14:55,279
different ways of doing things and

00:14:53,360 --> 00:14:57,360
different model and you go from there

00:14:55,279 --> 00:14:58,800
and that's a perfectly valid

00:14:57,360 --> 00:15:00,160
reason to do that hopefully support the

00:14:58,800 --> 00:15:00,880
old stuff because we have lots of users

00:15:00,160 --> 00:15:02,800
from that

00:15:00,880 --> 00:15:04,079
over time it's nice to evolve things out

00:15:02,800 --> 00:15:06,720
of the way out of

00:15:04,079 --> 00:15:08,160
a way but just start over and then you

00:15:06,720 --> 00:15:09,360
have no users and then you don't know if

00:15:08,160 --> 00:15:10,639
anybody's using your api

00:15:09,360 --> 00:15:12,399
you don't know if you got it right until

00:15:10,639 --> 00:15:14,720
you have users and then it's broken then

00:15:12,399 --> 00:15:16,320
the cycle continues that's life that's

00:15:14,720 --> 00:15:19,360
the life of a library developer

00:15:16,320 --> 00:15:22,399
i'm so sorry but that's your choice um

00:15:19,360 --> 00:15:23,120
but it's very useful very useful um but

00:15:22,399 --> 00:15:25,120
you need to

00:15:23,120 --> 00:15:27,519
if you violate those things you cause

00:15:25,120 --> 00:15:29,199
people to lose trust if i see somebody

00:15:27,519 --> 00:15:31,199
if i rebuild and see deprecated all over

00:15:29,199 --> 00:15:31,920
the place or apis change then it's just

00:15:31,199 --> 00:15:33,839
horrible

00:15:31,920 --> 00:15:35,519
you don't want to do that um you don't

00:15:33,839 --> 00:15:37,279
want to violate that trust on purpose

00:15:35,519 --> 00:15:38,800
just because you're a lazy developer

00:15:37,279 --> 00:15:40,079
just because you feel like it could be

00:15:38,800 --> 00:15:40,880
done better just because you want to

00:15:40,079 --> 00:15:43,040
change things

00:15:40,880 --> 00:15:44,480
don't do that you're violating the trust

00:15:43,040 --> 00:15:47,440
that you're giving to a user

00:15:44,480 --> 00:15:49,199
and if you violate that trust you won't

00:15:47,440 --> 00:15:51,120
you have that user anymore and i've done

00:15:49,199 --> 00:15:52,320
this many times when i upgraded library

00:15:51,120 --> 00:15:54,560
and it turned out my

00:15:52,320 --> 00:15:56,240
code that relied on it now has to change

00:15:54,560 --> 00:15:57,680
because of that i will do everything i

00:15:56,240 --> 00:15:59,120
possibly can to rip it out and never

00:15:57,680 --> 00:16:00,880
rely on that library again

00:15:59,120 --> 00:16:03,360
maybe that's a good thing maybe it's not

00:16:00,880 --> 00:16:05,440
um usually libraries there are there

00:16:03,360 --> 00:16:06,800
because i want to do something else

00:16:05,440 --> 00:16:08,320
and a library is providing the

00:16:06,800 --> 00:16:09,040
functionality so i can do what i really

00:16:08,320 --> 00:16:11,040
want to do

00:16:09,040 --> 00:16:13,120
i don't want to have to write the code

00:16:11,040 --> 00:16:15,040
that's in the library itself

00:16:13,120 --> 00:16:16,639
but don't force me to if you start

00:16:15,040 --> 00:16:18,399
breaking things i will

00:16:16,639 --> 00:16:19,680
and you won't have any users and that's

00:16:18,399 --> 00:16:23,120
not okay

00:16:19,680 --> 00:16:26,240
please don't do that okay

00:16:23,120 --> 00:16:26,240
wow i'm going fast

00:16:26,320 --> 00:16:29,759
um application developers a lot of

00:16:28,639 --> 00:16:32,079
application developers here

00:16:29,759 --> 00:16:34,160
this is good um this isn't such a hard

00:16:32,079 --> 00:16:36,320
thing but

00:16:34,160 --> 00:16:37,920
you guys are the most easily easiest to

00:16:36,320 --> 00:16:38,639
criticize so i really feel sorry for

00:16:37,920 --> 00:16:40,000
this stuff

00:16:38,639 --> 00:16:41,279
everybody sees the buttons everybody

00:16:40,000 --> 00:16:42,720
thinks they can do something different

00:16:41,279 --> 00:16:44,560
everybody wants to criticize

00:16:42,720 --> 00:16:46,240
how the layout looks what the graphics

00:16:44,560 --> 00:16:48,079
are look at the previous talk here's all

00:16:46,240 --> 00:16:49,360
these hints on how to do things better

00:16:48,079 --> 00:16:51,279
and if you get those wrong people get

00:16:49,360 --> 00:16:51,759
mad and they'll get mad easily and it's

00:16:51,279 --> 00:16:53,199
usually

00:16:51,759 --> 00:16:54,800
your core functionality of your

00:16:53,199 --> 00:16:56,800
application is somewhere else it's not

00:16:54,800 --> 00:16:58,800
on these buttons it's not the stuff and

00:16:56,800 --> 00:17:00,240
people get upset you're the easiest to

00:16:58,800 --> 00:17:01,120
criticize it's just like a traffic

00:17:00,240 --> 00:17:02,560
engineer

00:17:01,120 --> 00:17:04,400
everybody knows where to put the road

00:17:02,560 --> 00:17:05,839
except you obviously so

00:17:04,400 --> 00:17:07,839
they will tell you about it and they

00:17:05,839 --> 00:17:08,480
will criticize you and that's not okay

00:17:07,839 --> 00:17:10,160
that's

00:17:08,480 --> 00:17:12,240
i feel very sorry for you but here's

00:17:10,160 --> 00:17:14,720
some things you can do to do this

00:17:12,240 --> 00:17:16,079
um the biggest thing to do is don't take

00:17:14,720 --> 00:17:17,919
away things that work

00:17:16,079 --> 00:17:19,199
if somebody's using this feature and

00:17:17,919 --> 00:17:22,959
using this functionality

00:17:19,199 --> 00:17:24,079
keep it there um it's that simple it's

00:17:22,959 --> 00:17:26,640
being it was there

00:17:24,079 --> 00:17:28,960
you provided for somebody don't think by

00:17:26,640 --> 00:17:30,320
removing it you're doing them a favor

00:17:28,960 --> 00:17:31,280
um you might be doing yourself a favor

00:17:30,320 --> 00:17:32,160
because you think it could be done a

00:17:31,280 --> 00:17:34,400
different way

00:17:32,160 --> 00:17:36,240
but don't because it's not going to work

00:17:34,400 --> 00:17:37,840
and the biggest example of this and the

00:17:36,240 --> 00:17:39,360
most public example of this happened

00:17:37,840 --> 00:17:42,799
many many years ago

00:17:39,360 --> 00:17:44,320
um 2011 the big day a number of people

00:17:42,799 --> 00:17:47,840
here know what that date was

00:17:44,320 --> 00:17:49,760
um i have heard it talked by

00:17:47,840 --> 00:17:52,000
as this date and this was the gnome

00:17:49,760 --> 00:17:53,440
three introduction everybody's system

00:17:52,000 --> 00:17:55,039
instantly when the district switched it

00:17:53,440 --> 00:17:58,080
over it looked totally

00:17:55,039 --> 00:17:59,520
and completely different um that was a

00:17:58,080 --> 00:18:01,919
major major break

00:17:59,520 --> 00:18:03,919
um this was the day the gnome project

00:18:01,919 --> 00:18:05,120
realized that they had real users

00:18:03,919 --> 00:18:06,400
based on the feedback they got they

00:18:05,120 --> 00:18:07,360
always thought they had users they

00:18:06,400 --> 00:18:08,960
always thought they were doing the right

00:18:07,360 --> 00:18:10,640
thing they wanted to make a change

00:18:08,960 --> 00:18:12,559
they wanted to do something different

00:18:10,640 --> 00:18:12,960
but this was the day that they really

00:18:12,559 --> 00:18:14,799
broke

00:18:12,960 --> 00:18:16,480
all their users trust because all of a

00:18:14,799 --> 00:18:17,200
sudden they impose a totally different

00:18:16,480 --> 00:18:18,880
model

00:18:17,200 --> 00:18:20,720
onto them onto what they were currently

00:18:18,880 --> 00:18:23,280
using to do used to doing

00:18:20,720 --> 00:18:24,559
getting the workflow and it broke them

00:18:23,280 --> 00:18:27,360
it just caused a

00:18:24,559 --> 00:18:29,280
number of major major pain it was

00:18:27,360 --> 00:18:31,840
horrible um

00:18:29,280 --> 00:18:33,440
the lwn.net review of gnome 3 was

00:18:31,840 --> 00:18:36,480
actually really good

00:18:33,440 --> 00:18:38,480
it was very comprehensive um but and the

00:18:36,480 --> 00:18:40,240
comments of course were horrible

00:18:38,480 --> 00:18:41,679
but read this if you're an application

00:18:40,240 --> 00:18:43,919
developer and you are considering

00:18:41,679 --> 00:18:46,320
rewriting how you do everything

00:18:43,919 --> 00:18:47,520
in a totally different way look at this

00:18:46,320 --> 00:18:49,520
you are seeing people

00:18:47,520 --> 00:18:50,640
mad because you took something that they

00:18:49,520 --> 00:18:53,039
were using

00:18:50,640 --> 00:18:54,960
and using to get their real work done

00:18:53,039 --> 00:18:57,600
their real work isn't to create a

00:18:54,960 --> 00:18:59,120
interface or our application environment

00:18:57,600 --> 00:18:59,679
their real work is to do something else

00:18:59,120 --> 00:19:01,600
and you

00:18:59,679 --> 00:19:03,840
made it harder to get them to do their

00:19:01,600 --> 00:19:05,760
real work you broke their trust

00:19:03,840 --> 00:19:07,520
and that was a long way you and the

00:19:05,760 --> 00:19:09,280
known developers clawed back from that

00:19:07,520 --> 00:19:11,280
it took them many many many years to do

00:19:09,280 --> 00:19:14,080
that um i think they're there now

00:19:11,280 --> 00:19:15,280
um i know myself i switched away and

00:19:14,080 --> 00:19:17,600
came back many years

00:19:15,280 --> 00:19:19,200
they've gotten better since 2011. they

00:19:17,600 --> 00:19:20,000
realize having a clean break doesn't

00:19:19,200 --> 00:19:22,320
work

00:19:20,000 --> 00:19:24,480
and that was not the best idea please

00:19:22,320 --> 00:19:26,240
don't in your application do the same

00:19:24,480 --> 00:19:29,760
thing i see this happen a lot

00:19:26,240 --> 00:19:30,240
um people evolve applications to do

00:19:29,760 --> 00:19:32,240
something

00:19:30,240 --> 00:19:34,880
totally different different ui that's

00:19:32,240 --> 00:19:38,799
not a good idea please don't do that

00:19:34,880 --> 00:19:39,520
um as a result everybody here knows made

00:19:38,799 --> 00:19:42,480
in cinnamon

00:19:39,520 --> 00:19:43,840
um sprung up um they fill a real need um

00:19:42,480 --> 00:19:45,360
these are real desktops that are with

00:19:43,840 --> 00:19:46,400
lots and lots of users because they were

00:19:45,360 --> 00:19:48,160
used to it before

00:19:46,400 --> 00:19:50,720
or they're used to that common paradigm

00:19:48,160 --> 00:19:51,440
um that's fine but this is an example

00:19:50,720 --> 00:19:53,200
that

00:19:51,440 --> 00:19:54,559
kind of shows that what the gnome

00:19:53,200 --> 00:19:57,440
developers did

00:19:54,559 --> 00:19:59,360
um was major and was really big because

00:19:57,440 --> 00:20:02,640
there's two separate projects

00:19:59,360 --> 00:20:04,080
just to fill that void um that's fine if

00:20:02,640 --> 00:20:06,480
the gnome developers want to do that

00:20:04,080 --> 00:20:08,559
they did um that was their decision to

00:20:06,480 --> 00:20:09,760
do again we're writing software for free

00:20:08,559 --> 00:20:11,919
you're giving it over throwing it over

00:20:09,760 --> 00:20:13,440
the wall i would say that maybe that

00:20:11,919 --> 00:20:15,200
wasn't the best decision to do

00:20:13,440 --> 00:20:16,799
but hey maybe you should have called it

00:20:15,200 --> 00:20:17,679
a different project gone off a different

00:20:16,799 --> 00:20:20,000
way

00:20:17,679 --> 00:20:21,600
that's their decision again be aware of

00:20:20,000 --> 00:20:24,720
this it will happen

00:20:21,600 --> 00:20:26,720
um but you want to change the thing

00:20:24,720 --> 00:20:28,000
about applications and ides and

00:20:26,720 --> 00:20:30,320
interfaces and whatnot you want to

00:20:28,000 --> 00:20:32,480
change based on time based on the world

00:20:30,320 --> 00:20:34,640
we change because we have to change um

00:20:32,480 --> 00:20:37,520
based on different ideas how things work

00:20:34,640 --> 00:20:38,240
so there's really two acceptable ways to

00:20:37,520 --> 00:20:40,640
change

00:20:38,240 --> 00:20:41,440
um in order to keep your users and that

00:20:40,640 --> 00:20:45,200
is

00:20:41,440 --> 00:20:46,880
um you can evolve slowly so that no one

00:20:45,200 --> 00:20:48,960
notices that's like the kernel we add

00:20:46,880 --> 00:20:51,600
new features we don't take things away

00:20:48,960 --> 00:20:53,200
we do nice things we evolve in such a

00:20:51,600 --> 00:20:55,120
manner that everybody's like oh that's

00:20:53,200 --> 00:20:56,720
just a common change i have my

00:20:55,120 --> 00:20:58,240
common paradigm from before i can learn

00:20:56,720 --> 00:21:00,880
the new stuff and keep on going

00:20:58,240 --> 00:21:03,840
it's a constant evolutionary change it

00:21:00,880 --> 00:21:06,240
isn't jarring it isn't major it isn't um

00:21:03,840 --> 00:21:07,919
a whole new paradigm and stuff and again

00:21:06,240 --> 00:21:10,159
the best example of this is kde

00:21:07,919 --> 00:21:11,280
kde has evolved and changed over time if

00:21:10,159 --> 00:21:13,039
you look at the old model

00:21:11,280 --> 00:21:14,320
versus the new stuff but they've evolved

00:21:13,039 --> 00:21:16,000
in such a way that

00:21:14,320 --> 00:21:17,600
the ideas are still there you can still

00:21:16,000 --> 00:21:20,480
have the same features

00:21:17,600 --> 00:21:22,480
um you haven't broken anybody's workflow

00:21:20,480 --> 00:21:23,679
you um added new stuff you maybe moved

00:21:22,480 --> 00:21:24,880
things around a little bit made it

00:21:23,679 --> 00:21:27,440
prettier of course

00:21:24,880 --> 00:21:28,880
things evolve over time but you didn't

00:21:27,440 --> 00:21:30,720
break anybody and because of that you

00:21:28,880 --> 00:21:32,159
don't hear anybody complaining about the

00:21:30,720 --> 00:21:33,440
new versions that much

00:21:32,159 --> 00:21:35,360
right they update a new one they're like

00:21:33,440 --> 00:21:36,720
hey it looks fancier and they keep on

00:21:35,360 --> 00:21:37,039
going because they can get the real work

00:21:36,720 --> 00:21:38,559
done

00:21:37,039 --> 00:21:40,799
and their real work is what they want to

00:21:38,559 --> 00:21:42,400
have done um that's a really good way

00:21:40,799 --> 00:21:44,159
kde does this very well

00:21:42,400 --> 00:21:45,360
gnome since the big break has done it

00:21:44,159 --> 00:21:46,720
pretty well as well if you look at their

00:21:45,360 --> 00:21:48,640
individual releases

00:21:46,720 --> 00:21:51,120
um but again maybe they learned from

00:21:48,640 --> 00:21:54,240
katy i'm glad you guys are talking

00:21:51,120 --> 00:21:56,480
um another way you can do this is if you

00:21:54,240 --> 00:21:58,080
provide a compelling reason to make the

00:21:56,480 --> 00:22:01,679
change you have to provide

00:21:58,080 --> 00:22:03,440
enough reason and enough um goodness

00:22:01,679 --> 00:22:05,120
to force somebody to take the time to

00:22:03,440 --> 00:22:07,600
learn to do something else

00:22:05,120 --> 00:22:08,240
that's very rare it happens very very

00:22:07,600 --> 00:22:10,559
rarely in

00:22:08,240 --> 00:22:12,159
an application space sometimes in

00:22:10,559 --> 00:22:14,320
library spaces this does

00:22:12,159 --> 00:22:15,280
um i'll call that systemd as a good

00:22:14,320 --> 00:22:17,440
example of

00:22:15,280 --> 00:22:19,039
how this they did it right they provided

00:22:17,440 --> 00:22:20,799
all the functionality they solved a real

00:22:19,039 --> 00:22:21,919
problem that was there they unified all

00:22:20,799 --> 00:22:24,000
these existing

00:22:21,919 --> 00:22:26,559
tools and problems in such a way that it

00:22:24,000 --> 00:22:28,320
was just so much better to use

00:22:26,559 --> 00:22:29,919
and it provided enough impetus that

00:22:28,320 --> 00:22:32,320
everybody was willing to do the

00:22:29,919 --> 00:22:33,919
do the work to modify their own stuff

00:22:32,320 --> 00:22:35,919
and move to the new model

00:22:33,919 --> 00:22:37,200
that it worked people still complain

00:22:35,919 --> 00:22:38,400
about it but it worked everybody

00:22:37,200 --> 00:22:40,080
switched

00:22:38,400 --> 00:22:42,320
everybody updated the new stuff that kde

00:22:40,080 --> 00:22:44,080
is doing with systemd on how it launches

00:22:42,320 --> 00:22:44,799
better is very nice gnome was integrated

00:22:44,080 --> 00:22:47,280
with it very

00:22:44,799 --> 00:22:48,880
from the beginning from very early um it

00:22:47,280 --> 00:22:49,440
works well it solves a real problem

00:22:48,880 --> 00:22:52,159
again

00:22:49,440 --> 00:22:53,840
that was a example of how you can

00:22:52,159 --> 00:22:57,120
provide a compelling reason to move

00:22:53,840 --> 00:23:00,480
on and make the change so

00:22:57,120 --> 00:23:02,159
again never break somebody's trust um

00:23:00,480 --> 00:23:03,919
or they will leave if you want them to

00:23:02,159 --> 00:23:06,880
leave that's fine but

00:23:03,919 --> 00:23:08,080
realize they will leave if you do break

00:23:06,880 --> 00:23:11,120
that trust

00:23:08,080 --> 00:23:13,120
and for my final rule again

00:23:11,120 --> 00:23:14,799
you don't want to make anybody mad um

00:23:13,120 --> 00:23:18,159
they will not be your users anymore

00:23:14,799 --> 00:23:21,120
it's that simple um that was

00:23:18,159 --> 00:23:22,720
that's it um if you take anything again

00:23:21,120 --> 00:23:24,720
it goes back to my first slide

00:23:22,720 --> 00:23:26,400
don't make your users mad and you make

00:23:24,720 --> 00:23:27,840
your users mad by throwing changes at

00:23:26,400 --> 00:23:29,360
them that they're not expecting so they

00:23:27,840 --> 00:23:32,880
can't get their work done

00:23:29,360 --> 00:23:36,080
um and that's all that was

00:23:32,880 --> 00:23:39,600
fast 55 slides in

00:23:36,080 --> 00:23:51,840
half an hour so questions anything else

00:23:39,600 --> 00:23:51,840
how do i do this

00:23:55,120 --> 00:24:02,080
questions in the shared notes okay

00:23:58,320 --> 00:24:04,000
okay um big change in your application

00:24:02,080 --> 00:24:06,559
do it step by step yes again evolve

00:24:04,000 --> 00:24:08,240
over time um libraries just keep adding

00:24:06,559 --> 00:24:09,919
to new libraries applications change

00:24:08,240 --> 00:24:11,600
things over time slowly

00:24:09,919 --> 00:24:13,679
and keep the old paradigm the old model

00:24:11,600 --> 00:24:15,200
if you want to switch to something major

00:24:13,679 --> 00:24:16,840
make it a whole new program it's that

00:24:15,200 --> 00:24:20,240
simple

00:24:16,840 --> 00:24:21,760
um symmetric december um

00:24:20,240 --> 00:24:24,240
signaling breaks by changing major

00:24:21,760 --> 00:24:26,720
versions um

00:24:24,240 --> 00:24:28,880
i think it's pointless if you're gonna

00:24:26,720 --> 00:24:30,159
say signify a break by a major version

00:24:28,880 --> 00:24:32,640
just call it a new library

00:24:30,159 --> 00:24:33,440
just make a new name um it's that simple

00:24:32,640 --> 00:24:35,039
because you're saying

00:24:33,440 --> 00:24:36,320
you're telling the world throwing

00:24:35,039 --> 00:24:36,799
everything away you got to start over

00:24:36,320 --> 00:24:39,039
again

00:24:36,799 --> 00:24:40,799
it's no different just support the old

00:24:39,039 --> 00:24:42,720
one support the new one

00:24:40,799 --> 00:24:44,400
and move on yes i can understand if you

00:24:42,720 --> 00:24:46,400
don't want to make changes and move to

00:24:44,400 --> 00:24:47,520
um keep the old api around but you threw

00:24:46,400 --> 00:24:49,360
it out there so

00:24:47,520 --> 00:24:51,520
it's your responsibility in a way to

00:24:49,360 --> 00:24:54,240
maintain that um

00:24:51,520 --> 00:24:56,000
i don't think sembert is a good idea

00:24:54,240 --> 00:24:58,159
just in reality it doesn't work very

00:24:56,000 --> 00:24:58,159
well

00:24:59,440 --> 00:25:06,240
um auto contain projects in linux world

00:25:03,279 --> 00:25:07,440
um we have the whole flat pack snaps all

00:25:06,240 --> 00:25:08,960
that other stuff people are doing

00:25:07,440 --> 00:25:12,000
there's other solutions with that

00:25:08,960 --> 00:25:13,360
um docker containers i mean in a way we

00:25:12,000 --> 00:25:14,960
have more solutions for this than

00:25:13,360 --> 00:25:16,080
anybody else has ever had for any other

00:25:14,960 --> 00:25:18,240
operating system

00:25:16,080 --> 00:25:19,600
um people are working on that problem or

00:25:18,240 --> 00:25:21,679
yourself you link it all statically

00:25:19,600 --> 00:25:24,960
together there are solutions to do this

00:25:21,679 --> 00:25:26,799
um i'm not in this area space um talk to

00:25:24,960 --> 00:25:28,240
other people that are i'm way below that

00:25:26,799 --> 00:25:30,159
so i don't know too much about this

00:25:28,240 --> 00:25:31,679
stuff

00:25:30,159 --> 00:25:32,960
um apple doesn't follow this at all they

00:25:31,679 --> 00:25:34,720
change things all the time just delete

00:25:32,960 --> 00:25:35,760
apis you don't see the came kind of

00:25:34,720 --> 00:25:38,799
upset about this

00:25:35,760 --> 00:25:39,440
um you don't see the developers are you

00:25:38,799 --> 00:25:41,120
kidding me

00:25:39,440 --> 00:25:43,360
apple's lost more developers over time

00:25:41,120 --> 00:25:46,240
than anybody else um

00:25:43,360 --> 00:25:47,200
developers for apple products are mad

00:25:46,240 --> 00:25:48,720
and they don't like it

00:25:47,200 --> 00:25:50,559
and you see them complaining all the

00:25:48,720 --> 00:25:51,120
time they are willing to put up with it

00:25:50,559 --> 00:25:52,320
because

00:25:51,120 --> 00:25:54,480
that's their business and that's their

00:25:52,320 --> 00:25:55,679
job they don't like it they don't like

00:25:54,480 --> 00:25:58,880
it at all um

00:25:55,679 --> 00:26:00,080
so i i think apple's being providing a

00:25:58,880 --> 00:26:02,320
disservice by

00:26:00,080 --> 00:26:03,760
doing that um now i know why apple wants

00:26:02,320 --> 00:26:05,279
to do that because it's hard to keep

00:26:03,760 --> 00:26:07,600
things around for a long time

00:26:05,279 --> 00:26:08,799
but um to say that it doesn't cause

00:26:07,600 --> 00:26:11,039
problems is

00:26:08,799 --> 00:26:13,120
naive it does cause problems look at

00:26:11,039 --> 00:26:15,200
there's tons of blog posts about it and

00:26:13,120 --> 00:26:16,559
and arguments about it and how old old

00:26:15,200 --> 00:26:17,120
new app old applications don't run

00:26:16,559 --> 00:26:20,000
anymore

00:26:17,120 --> 00:26:21,039
et cetera et cetera it's hard um apple's

00:26:20,000 --> 00:26:22,559
big enough and they throw with their

00:26:21,039 --> 00:26:23,039
weight around and they can get away with

00:26:22,559 --> 00:26:24,159
it um

00:26:23,039 --> 00:26:25,440
but they don't care about their

00:26:24,159 --> 00:26:26,720
developers as much as they care about

00:26:25,440 --> 00:26:30,559
their users

00:26:26,720 --> 00:26:31,679
sorry um any kernel technology user

00:26:30,559 --> 00:26:34,159
space devs yes

00:26:31,679 --> 00:26:35,760
um iou ring user space developers who

00:26:34,159 --> 00:26:37,279
care about i o should pay attention to

00:26:35,760 --> 00:26:39,279
that i know the postgres

00:26:37,279 --> 00:26:40,559
sheet looking at it now database other

00:26:39,279 --> 00:26:42,799
database developers that

00:26:40,559 --> 00:26:43,760
is asynchronous io no system call

00:26:42,799 --> 00:26:46,240
overhead

00:26:43,760 --> 00:26:47,760
um very very fast io you can throw

00:26:46,240 --> 00:26:49,520
things into a ring and you get notified

00:26:47,760 --> 00:26:51,919
user space when your data is there

00:26:49,520 --> 00:26:53,520
um very very good if you care about i o

00:26:51,919 --> 00:26:55,200
i recommend looking at that

00:26:53,520 --> 00:26:57,039
ebpf if you care about networking and

00:26:55,200 --> 00:26:58,000
networking control planes and stuff like

00:26:57,039 --> 00:27:00,320
that um

00:26:58,000 --> 00:27:01,039
and tracing and modifications of the

00:27:00,320 --> 00:27:03,840
kernel

00:27:01,039 --> 00:27:05,200
as it runs um ebpf is great you don't

00:27:03,840 --> 00:27:07,039
have to write kernel modules

00:27:05,200 --> 00:27:08,400
anymore you don't have to write drivers

00:27:07,039 --> 00:27:10,640
anymore you can do some really cool

00:27:08,400 --> 00:27:11,600
stuff um ebtf just keeps getting better

00:27:10,640 --> 00:27:15,120
and better

00:27:11,600 --> 00:27:16,799
there's more um there's ebpf um

00:27:15,120 --> 00:27:18,320
conference last week so go look at the

00:27:16,799 --> 00:27:19,039
notes for that um there's a book now

00:27:18,320 --> 00:27:21,279
about it

00:27:19,039 --> 00:27:24,320
um it changes all the time in the kernel

00:27:21,279 --> 00:27:25,679
but it's really really really good

00:27:24,320 --> 00:27:27,039
again that's what's exciting in linux

00:27:25,679 --> 00:27:29,120
development you should pay attention to

00:27:27,039 --> 00:27:30,960
um linux is boring we just provide a

00:27:29,120 --> 00:27:34,080
unified way to look at all your hardware

00:27:30,960 --> 00:27:35,679
we support all the hardware um so but we

00:27:34,080 --> 00:27:37,039
do so in a boring way that for an

00:27:35,679 --> 00:27:38,720
application you shouldn't care because

00:27:37,039 --> 00:27:39,120
it doesn't matter what hardware you run

00:27:38,720 --> 00:27:41,279
on

00:27:39,120 --> 00:27:43,279
that being said new things new system

00:27:41,279 --> 00:27:43,679
calls we provide um take advantage of

00:27:43,279 --> 00:27:45,760
those

00:27:43,679 --> 00:27:46,799
we add a new system call every other

00:27:45,760 --> 00:27:49,279
release or so

00:27:46,799 --> 00:27:51,360
to solve some problem um usually they

00:27:49,279 --> 00:27:53,440
don't get added to the library to

00:27:51,360 --> 00:27:54,559
let's see quickly you can take advantage

00:27:53,440 --> 00:27:56,399
of it on your own and

00:27:54,559 --> 00:27:57,840
use it in your application and roll back

00:27:56,399 --> 00:27:59,679
if you don't you can test if it's there

00:27:57,840 --> 00:28:02,240
or not

00:27:59,679 --> 00:28:02,799
those are good things i i've proposed a

00:28:02,240 --> 00:28:04,080
few

00:28:02,799 --> 00:28:05,520
system call recently but i don't have

00:28:04,080 --> 00:28:06,399
any actual users for it so it doesn't

00:28:05,520 --> 00:28:08,399
get merged

00:28:06,399 --> 00:28:09,919
um so i need an actual user for it so

00:28:08,399 --> 00:28:12,799
that was to do read and write of

00:28:09,919 --> 00:28:15,360
small files really quickly um or read

00:28:12,799 --> 00:28:18,640
files quickly not writing

00:28:15,360 --> 00:28:21,679
um what happens when you change your up

00:28:18,640 --> 00:28:25,279
to is only important for the new users

00:28:21,679 --> 00:28:27,919
um great we add support for new users

00:28:25,279 --> 00:28:28,640
all the time and you want to support new

00:28:27,919 --> 00:28:31,520
things but

00:28:28,640 --> 00:28:32,720
don't break old users that's the trick

00:28:31,520 --> 00:28:34,080
um i was

00:28:32,720 --> 00:28:35,520
it's sometimes a little different

00:28:34,080 --> 00:28:36,720
because i know there's lots of

00:28:35,520 --> 00:28:38,720
applications that have been around for

00:28:36,720 --> 00:28:40,640
forever that have really old uis

00:28:38,720 --> 00:28:41,679
but they keep those old uis an old ui

00:28:40,640 --> 00:28:43,039
model because they want to keep those

00:28:41,679 --> 00:28:44,320
old original users because that's what

00:28:43,039 --> 00:28:46,480
made them successful

00:28:44,320 --> 00:28:48,080
and you can switch and add new new

00:28:46,480 --> 00:28:48,559
properties and new things for new users

00:28:48,080 --> 00:28:50,640
as well

00:28:48,559 --> 00:28:52,159
it's hard i'm not saying it's easy to do

00:28:50,640 --> 00:28:53,520
um but this is why you're writing

00:28:52,159 --> 00:28:54,559
application software and not kernel

00:28:53,520 --> 00:28:55,600
software right because you like doing

00:28:54,559 --> 00:28:58,799
this type of stuff

00:28:55,600 --> 00:29:00,159
just at least be nice to your users um

00:28:58,799 --> 00:29:01,760
what's the best way for

00:29:00,159 --> 00:29:04,880
developers to stay up to date on kernel

00:29:01,760 --> 00:29:06,960
tech on linux weekly news lwn.net i

00:29:04,880 --> 00:29:08,799
you can subscribe to it um they're a

00:29:06,960 --> 00:29:10,080
great organization or you can just wait

00:29:08,799 --> 00:29:10,720
two weeks and the articles come out

00:29:10,080 --> 00:29:12,159
after that

00:29:10,720 --> 00:29:13,760
if you're two weeks behind on latest

00:29:12,159 --> 00:29:15,360
kernel development you're perfectly fine

00:29:13,760 --> 00:29:16,960
so i recommend doing that

00:29:15,360 --> 00:29:19,360
um that's the best way that's how we all

00:29:16,960 --> 00:29:22,000
get know things what are going on we all

00:29:19,360 --> 00:29:26,799
read it as well

00:29:22,000 --> 00:29:30,080
um i think i

00:29:26,799 --> 00:29:30,080
answered all the questions

00:29:31,600 --> 00:29:43,440
anything else

00:29:40,720 --> 00:29:43,919
oh man oh man very tough was it what it

00:29:43,440 --> 00:29:46,880
was

00:29:43,919 --> 00:29:48,320
thank you so much for the greatness okay

00:29:46,880 --> 00:29:51,600
i got to answer this last question

00:29:48,320 --> 00:29:53,039
the colors so there's a question um

00:29:51,600 --> 00:29:55,120
during the first corona breakdown i live

00:29:53,039 --> 00:29:56,960
in europe our lockdown my daughter had

00:29:55,120 --> 00:29:57,360
to come home for university and she was

00:29:56,960 --> 00:29:59,039
in

00:29:57,360 --> 00:30:00,880
i'm in the lowell library she

00:29:59,039 --> 00:30:02,960
color-coded the books

00:30:00,880 --> 00:30:04,320
to be for her conference calls for her

00:30:02,960 --> 00:30:06,159
university talks

00:30:04,320 --> 00:30:09,279
i didn't color code name the books she

00:30:06,159 --> 00:30:11,919
did that so it was very instagramable

00:30:09,279 --> 00:30:13,919
i take advantage i take i give her full

00:30:11,919 --> 00:30:16,880
credit for that effort

00:30:13,919 --> 00:30:16,880
it makes a pretty background

00:30:17,120 --> 00:30:21,120

YouTube URL: https://www.youtube.com/watch?v=CUifDVMHUXw


