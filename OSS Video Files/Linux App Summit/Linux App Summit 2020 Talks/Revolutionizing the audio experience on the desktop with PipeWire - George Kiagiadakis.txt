Title: Revolutionizing the audio experience on the desktop with PipeWire - George Kiagiadakis
Publication date: 2020-11-14
Playlist: Linux App Summit 2020 Talks
Description: 
	PipeWire has been making a lot of progress lately on providing a drop-in replacement audio server that unifies the PulseAudio and JACK APIs. Recently, it was announced that it is ready for general testing and at this rate it should be ready to be distributed as a replacement of PulseAudio in 2021.

Looking in the future, though, we need to ask ourselves... how can PipeWire improve the user experience? Does it actually bring any value to end users that have never heard of JACK before? Does it bring any changes?

In this talk, George is going to give an overview of how a PipeWire-enabled system looks like and behaves at the moment and then take a glimpse in the future, looking at ideas, which are already being worked on, that could revolutionize the user experience in an environment as complex as the desktop - with your help!
Captions: 
	00:00:01,800 --> 00:00:11,519
[Music]

00:00:09,280 --> 00:00:14,240
hello everyone my name is george and i'm

00:00:11,519 --> 00:00:16,640
a senior software engineer at collabora

00:00:14,240 --> 00:00:17,520
in this presentation i'm going to talk

00:00:16,640 --> 00:00:19,920
about

00:00:17,520 --> 00:00:22,400
the audio experience on the desktop with

00:00:19,920 --> 00:00:25,039
pipe wire

00:00:22,400 --> 00:00:26,400
let's first start by looking at what is

00:00:25,039 --> 00:00:29,519
pipe wire

00:00:26,400 --> 00:00:32,640
so pipe wire is a system demon whose

00:00:29,519 --> 00:00:35,360
main goal is to provide

00:00:32,640 --> 00:00:36,559
a means for applications to share audio

00:00:35,360 --> 00:00:39,920
and video between

00:00:36,559 --> 00:00:40,640
each other and not only that but also

00:00:39,920 --> 00:00:43,840
between

00:00:40,640 --> 00:00:44,640
applications and devices allowing

00:00:43,840 --> 00:00:47,520
devices

00:00:44,640 --> 00:00:49,120
to be presented to applications in a

00:00:47,520 --> 00:00:51,520
unified way so

00:00:49,120 --> 00:00:52,879
all kinds of media devices like cameras

00:00:51,520 --> 00:00:55,760
sound cards

00:00:52,879 --> 00:00:58,079
uh bluetooth headsets and so on these

00:00:55,760 --> 00:01:00,399
are all devices that

00:00:58,079 --> 00:01:03,280
can be accessed through pipewire in a

00:01:00,399 --> 00:01:03,280
unified way

00:01:03,440 --> 00:01:09,360
another goal of pipewire is also to

00:01:05,519 --> 00:01:13,439
unify the use cases around

00:01:09,360 --> 00:01:16,720
multimedia applications having a single

00:01:13,439 --> 00:01:20,479
api and a single means of them

00:01:16,720 --> 00:01:20,479
presenting themselves to the user

00:01:21,520 --> 00:01:25,040
so in the past we had for example pulse

00:01:24,400 --> 00:01:28,960
audio

00:01:25,040 --> 00:01:32,240
that was meant to drive the audio

00:01:28,960 --> 00:01:33,360
for the desktop use case and some into

00:01:32,240 --> 00:01:36,640
some extent also

00:01:33,360 --> 00:01:37,759
the embedded use case but then we had

00:01:36,640 --> 00:01:40,079
also jack

00:01:37,759 --> 00:01:42,240
which provides the audio server for

00:01:40,079 --> 00:01:44,479
professional audio

00:01:42,240 --> 00:01:45,360
and these are two very different kind of

00:01:44,479 --> 00:01:48,000
use cases

00:01:45,360 --> 00:01:49,600
where you want to use audio and audio

00:01:48,000 --> 00:01:51,840
devices on your system

00:01:49,600 --> 00:01:52,720
and pipe wire is trying to bridge those

00:01:51,840 --> 00:01:56,399
two

00:01:52,720 --> 00:01:57,040
and and more and another goal of

00:01:56,399 --> 00:02:00,159
pipewire

00:01:57,040 --> 00:02:03,200
is to address security concerns

00:02:00,159 --> 00:02:06,159
especially when it comes to

00:02:03,200 --> 00:02:08,080
running applications within containers

00:02:06,159 --> 00:02:12,000
nowadays we have flat pack

00:02:08,080 --> 00:02:13,200
that packs applications into containers

00:02:12,000 --> 00:02:16,239
that have limited

00:02:13,200 --> 00:02:17,200
permissions and pipe choir plays an

00:02:16,239 --> 00:02:20,319
important role

00:02:17,200 --> 00:02:23,840
to ensuring that these applications

00:02:20,319 --> 00:02:27,920
only get access to the

00:02:23,840 --> 00:02:30,239
media that they need

00:02:27,920 --> 00:02:32,239
so if they need access to the microphone

00:02:30,239 --> 00:02:33,040
it's just going to be the microphone not

00:02:32,239 --> 00:02:36,480
anything else

00:02:33,040 --> 00:02:38,640
for example

00:02:36,480 --> 00:02:41,519
so let's look at the current state of

00:02:38,640 --> 00:02:44,640
pipewire on the desktop

00:02:41,519 --> 00:02:47,760
right now it provides a well working

00:02:44,640 --> 00:02:50,239
pulse audio replacement which i use

00:02:47,760 --> 00:02:53,440
daily on my desktop and

00:02:50,239 --> 00:02:55,519
it has also a jack replacement so jack

00:02:53,440 --> 00:02:57,519
applications can run on top of pipe wire

00:02:55,519 --> 00:03:00,080
without any issues

00:02:57,519 --> 00:03:01,519
it also has a screen capture and camera

00:03:00,080 --> 00:03:04,239
capture functionality

00:03:01,519 --> 00:03:07,760
screen capture is implemented by the

00:03:04,239 --> 00:03:10,239
compositor of your desktop on weyland

00:03:07,760 --> 00:03:11,599
which basically grabs frames from the

00:03:10,239 --> 00:03:14,000
screen and shares them to other

00:03:11,599 --> 00:03:16,879
applications through backwire

00:03:14,000 --> 00:03:19,120
while camera capture is also available

00:03:16,879 --> 00:03:21,840
through video for linux

00:03:19,120 --> 00:03:23,519
although i don't think any application

00:03:21,840 --> 00:03:25,840
is is using that

00:03:23,519 --> 00:03:25,840
yet

00:03:27,040 --> 00:03:30,400
it's not totally integrated with flat

00:03:29,920 --> 00:03:33,360
pack

00:03:30,400 --> 00:03:35,280
as i at least for the audio part for the

00:03:33,360 --> 00:03:37,440
screen capture part it is integrated for

00:03:35,280 --> 00:03:40,000
the audio part it's not integrated

00:03:37,440 --> 00:03:41,360
so what i said about only sharing the

00:03:40,000 --> 00:03:46,080
microphone for example that

00:03:41,360 --> 00:03:49,599
that is not applicable at the moment um

00:03:46,080 --> 00:03:51,200
and we also have uh

00:03:49,599 --> 00:03:53,439
two implementations of the session

00:03:51,200 --> 00:03:57,200
manager pipevir itself

00:03:53,439 --> 00:04:00,319
doesn't do any management of the

00:03:57,200 --> 00:04:03,599
nodes that it has in its graph

00:04:00,319 --> 00:04:05,439
so there is a separate application

00:04:03,599 --> 00:04:07,920
called the session manager which

00:04:05,439 --> 00:04:08,959
is responsible for orchestrating the

00:04:07,920 --> 00:04:12,480
graph

00:04:08,959 --> 00:04:16,000
um when an application connects

00:04:12,480 --> 00:04:17,040
it basically finds where is the right

00:04:16,000 --> 00:04:20,079
place to link it

00:04:17,040 --> 00:04:20,880
and what kind of uh media access to give

00:04:20,079 --> 00:04:24,000
it

00:04:20,880 --> 00:04:25,840
uh and things like that and right now we

00:04:24,000 --> 00:04:27,680
have pipe wire media session which is

00:04:25,840 --> 00:04:28,000
the default session manager if you

00:04:27,680 --> 00:04:31,520
install

00:04:28,000 --> 00:04:34,240
bike wire and it has the

00:04:31,520 --> 00:04:34,880
most functionality for the desktop right

00:04:34,240 --> 00:04:37,150
now

00:04:34,880 --> 00:04:38,560
and we also have wire plumber which

00:04:37,150 --> 00:04:42,320
[Music]

00:04:38,560 --> 00:04:45,919
which myself and my team have developed

00:04:42,320 --> 00:04:47,280
that was initially targeted for embedded

00:04:45,919 --> 00:04:51,840
use cases but it's

00:04:47,280 --> 00:04:51,840
catching up also on the desktop site

00:04:52,800 --> 00:04:59,360
so let's look at how it

00:04:56,479 --> 00:05:01,440
how things look right now if you are

00:04:59,360 --> 00:05:05,520
trying to replace

00:05:01,440 --> 00:05:05,520
pulse audio with pipe wire

00:05:05,600 --> 00:05:10,639
so pipe wire ships a set of

00:05:08,800 --> 00:05:12,639
replacement libraries which implement

00:05:10,639 --> 00:05:14,800
the pulse audio api

00:05:12,639 --> 00:05:16,240
and if you if you have any if you have

00:05:14,800 --> 00:05:19,440
them installed you will

00:05:16,240 --> 00:05:21,840
see something like that on your terminal

00:05:19,440 --> 00:05:24,080
uh as you can see here post audio is not

00:05:21,840 --> 00:05:26,560
running but wire is running

00:05:24,080 --> 00:05:28,479
and if you if you run pulse audio

00:05:26,560 --> 00:05:31,280
control which which is a native

00:05:28,479 --> 00:05:31,919
pulse audio utility it shows you that

00:05:31,280 --> 00:05:34,880
it's

00:05:31,919 --> 00:05:35,440
connected to some pulse audio server

00:05:34,880 --> 00:05:38,800
server

00:05:35,440 --> 00:05:38,800
that is called pipewire

00:05:39,360 --> 00:05:42,479
same with other applications of course

00:05:41,759 --> 00:05:44,000
like

00:05:42,479 --> 00:05:45,840
public control which is the volume

00:05:44,000 --> 00:05:48,560
control app

00:05:45,840 --> 00:05:49,440
of pulse audio as you can see here it

00:05:48,560 --> 00:05:53,440
has

00:05:49,440 --> 00:05:55,600
at least my output devices properly

00:05:53,440 --> 00:05:57,840
my input device is here as you can see

00:05:55,600 --> 00:05:59,039
we also have device monitors just like

00:05:57,840 --> 00:06:02,960
in pulsodium there's

00:05:59,039 --> 00:06:05,120
no difference and

00:06:02,960 --> 00:06:06,400
the devices have profiles that you can

00:06:05,120 --> 00:06:08,639
configure so

00:06:06,400 --> 00:06:10,880
it allows selecting all the profiles

00:06:08,639 --> 00:06:12,639
that are available in pulse audio

00:06:10,880 --> 00:06:14,639
and you can also see here in the

00:06:12,639 --> 00:06:15,360
screenshot that i have a bluetooth

00:06:14,639 --> 00:06:20,960
headset

00:06:15,360 --> 00:06:23,520
connected that's the silver medal device

00:06:20,960 --> 00:06:24,479
bluetooth headsets are also working very

00:06:23,520 --> 00:06:27,120
well

00:06:24,479 --> 00:06:27,120
at the moment

00:06:27,680 --> 00:06:32,960
and yeah and

00:06:30,720 --> 00:06:34,560
in this example i also have firefox

00:06:32,960 --> 00:06:37,520
connected playing some music

00:06:34,560 --> 00:06:39,759
from youtube and as you can see

00:06:37,520 --> 00:06:43,680
everything works here

00:06:39,759 --> 00:06:44,240
the the the audio level bar works at the

00:06:43,680 --> 00:06:47,360
bottom

00:06:44,240 --> 00:06:49,680
and also there is a selection of the

00:06:47,360 --> 00:06:52,000
device available so if i try to select

00:06:49,680 --> 00:06:54,800
another device there

00:06:52,000 --> 00:06:56,080
it will move the stream from firefox to

00:06:54,800 --> 00:06:59,199
that other device

00:06:56,080 --> 00:07:01,919
properly and

00:06:59,199 --> 00:07:04,000
something extra that is not exactly

00:07:01,919 --> 00:07:06,080
visible here but it's in the background

00:07:04,000 --> 00:07:08,720
that this firefox instance that you see

00:07:06,080 --> 00:07:11,680
here connected is actually connected

00:07:08,720 --> 00:07:13,280
um is actually firefox running in

00:07:11,680 --> 00:07:16,000
flatback

00:07:13,280 --> 00:07:17,919
and to enable that actually there is uh

00:07:16,000 --> 00:07:18,960
apart from the replacement library that

00:07:17,919 --> 00:07:22,720
i talked about

00:07:18,960 --> 00:07:25,039
there is also right now um a replacement

00:07:22,720 --> 00:07:27,199
pulse audio socket so

00:07:25,039 --> 00:07:28,560
a native pulse audio socket is presented

00:07:27,199 --> 00:07:31,039
to firefox

00:07:28,560 --> 00:07:31,599
and it connects as if it was connecting

00:07:31,039 --> 00:07:33,680
to

00:07:31,599 --> 00:07:35,120
to pulse audio sending pulse audio

00:07:33,680 --> 00:07:37,039
commands and then these commands are

00:07:35,120 --> 00:07:41,199
being translated to the pipewire

00:07:37,039 --> 00:07:41,919
equivalents now let's see how it looks

00:07:41,199 --> 00:07:44,750
like

00:07:41,919 --> 00:07:45,919
if you try to replace chuck

00:07:44,750 --> 00:07:48,479
[Music]

00:07:45,919 --> 00:07:49,520
running some native tools like cute jack

00:07:48,479 --> 00:07:53,120
control

00:07:49,520 --> 00:07:53,120
that show the graph of jack

00:07:54,080 --> 00:07:58,319
if you have worked with jack before this

00:07:56,160 --> 00:08:01,759
this should be a familiar picture

00:07:58,319 --> 00:08:03,280
um it's um it shows

00:08:01,759 --> 00:08:05,280
basically all the devices that are

00:08:03,280 --> 00:08:06,560
available and all the the ports that

00:08:05,280 --> 00:08:08,240
they have available

00:08:06,560 --> 00:08:10,639
and there is also my firefox instance

00:08:08,240 --> 00:08:14,070
running over there and that is connected

00:08:10,639 --> 00:08:17,120
to this hda intel device

00:08:14,070 --> 00:08:19,680
[Music]

00:08:17,120 --> 00:08:21,520
that's exactly the same setup as the

00:08:19,680 --> 00:08:23,440
setup that was i was showing in the

00:08:21,520 --> 00:08:25,680
previous screenshots

00:08:23,440 --> 00:08:27,039
and then if if you try to run some

00:08:25,680 --> 00:08:30,160
native

00:08:27,039 --> 00:08:33,440
jack application it works

00:08:30,160 --> 00:08:35,279
so here for example i have a calf studio

00:08:33,440 --> 00:08:37,030
gear running

00:08:35,279 --> 00:08:38,839
with one filter

00:08:37,030 --> 00:08:41,360
[Music]

00:08:38,839 --> 00:08:43,120
configured calf is basically an

00:08:41,360 --> 00:08:45,680
application that allows you to

00:08:43,120 --> 00:08:47,120
to load a couple of audio filters and

00:08:45,680 --> 00:08:50,320
link them in any way that you

00:08:47,120 --> 00:08:51,760
that you like um and here we have a

00:08:50,320 --> 00:08:55,600
compressor filter

00:08:51,760 --> 00:08:57,120
and since i started it i i disconnected

00:08:55,600 --> 00:09:00,720
firefox from the hda

00:08:57,120 --> 00:09:03,200
intel device by using the cuja control

00:09:00,720 --> 00:09:06,560
graph and then i linked it to calf and

00:09:03,200 --> 00:09:09,519
then linked calf to hda intel and

00:09:06,560 --> 00:09:11,360
in this scenario it basically plays

00:09:09,519 --> 00:09:13,680
audio from youtube

00:09:11,360 --> 00:09:14,560
to the device but first going through

00:09:13,680 --> 00:09:17,519
the filter

00:09:14,560 --> 00:09:18,880
um from calf so audio from firefox goes

00:09:17,519 --> 00:09:23,839
to calf directly

00:09:18,880 --> 00:09:23,839
and from golf it goes to the device

00:09:23,920 --> 00:09:29,440
now this is all very nice uh it was a

00:09:27,279 --> 00:09:33,279
nightmare to get this

00:09:29,440 --> 00:09:35,680
with the real jack before

00:09:33,279 --> 00:09:37,600
if you have ever used jack and tried to

00:09:35,680 --> 00:09:38,880
use pulse audio applications together

00:09:37,600 --> 00:09:40,480
with jack

00:09:38,880 --> 00:09:42,480
you know that it's not very

00:09:40,480 --> 00:09:45,760
straightforward because you need to run

00:09:42,480 --> 00:09:48,080
a pulse audio server that handles the

00:09:45,760 --> 00:09:51,200
plus audio applications and then routes

00:09:48,080 --> 00:09:52,959
the audio from pulse audio to jack

00:09:51,200 --> 00:09:54,640
and it's not very flexible they don't

00:09:52,959 --> 00:09:57,040
have many outputs from pulsodium

00:09:54,640 --> 00:09:58,640
but in here we have all the flexibility

00:09:57,040 --> 00:10:01,920
that we want

00:09:58,640 --> 00:10:03,200
because everything is native however

00:10:01,920 --> 00:10:06,720
there are a couple of

00:10:03,200 --> 00:10:10,399
issues in combining pulse audio

00:10:06,720 --> 00:10:10,399
and jack in the same

00:10:12,000 --> 00:10:16,839
running them as running two running

00:10:15,040 --> 00:10:18,079
applications from pulsodium and jack

00:10:16,839 --> 00:10:20,399
together

00:10:18,079 --> 00:10:21,200
and in the above example where i linked

00:10:20,399 --> 00:10:24,399
firefox

00:10:21,200 --> 00:10:26,560
to calf for example we can see that

00:10:24,399 --> 00:10:29,920
there is an immediate usability issue

00:10:26,560 --> 00:10:32,880
in the volume control application where

00:10:29,920 --> 00:10:35,839
in the upper screenshot i'm showing what

00:10:32,880 --> 00:10:38,399
happens if firefox is routed to calf

00:10:35,839 --> 00:10:40,160
and in the lower screenshot what happens

00:10:38,399 --> 00:10:40,959
when firefox is routed to the device

00:10:40,160 --> 00:10:44,079
directly

00:10:40,959 --> 00:10:45,680
so when it's routed to calf pulse audio

00:10:44,079 --> 00:10:48,000
applications like

00:10:45,680 --> 00:10:49,200
puffer control here don't understand

00:10:48,000 --> 00:10:51,279
where this is linked to

00:10:49,200 --> 00:10:53,519
it they can see that it is there and

00:10:51,279 --> 00:10:55,279
it's linked to something but it's not

00:10:53,519 --> 00:10:57,920
clear where it's linked

00:10:55,279 --> 00:10:57,920
there is no

00:10:58,399 --> 00:11:01,680
there is nothing that represents this

00:11:00,240 --> 00:11:05,200
calf node

00:11:01,680 --> 00:11:05,200
on on the pulse audio side

00:11:05,440 --> 00:11:09,839
um and of course it's also not able to

00:11:08,160 --> 00:11:12,160
show the volume meter that is

00:11:09,839 --> 00:11:16,240
showing on the bottom because it doesn't

00:11:12,160 --> 00:11:16,240
know where to catch this audio from

00:11:18,480 --> 00:11:25,360
there is a hack to fix that so

00:11:22,240 --> 00:11:25,760
what you can do if you want to to fix

00:11:25,360 --> 00:11:29,839
that

00:11:25,760 --> 00:11:32,160
sort of is to run in this case calf

00:11:29,839 --> 00:11:32,880
with an additional environment variable

00:11:32,160 --> 00:11:36,399
that sets

00:11:32,880 --> 00:11:38,880
this media class property to audiosync

00:11:36,399 --> 00:11:41,040
and that basically adds a property to

00:11:38,880 --> 00:11:41,680
the node object that lets the pulse

00:11:41,040 --> 00:11:45,839
audio

00:11:41,680 --> 00:11:49,120
replacement library understand that

00:11:45,839 --> 00:11:53,920
this is a device so the pulse audio side

00:11:49,120 --> 00:11:57,360
now thinks that calf is an output device

00:11:53,920 --> 00:11:59,360
and it's going to show it properly in

00:11:57,360 --> 00:12:00,959
public control as you can see it shows a

00:11:59,360 --> 00:12:02,720
separate device

00:12:00,959 --> 00:12:04,560
you can even select it as a default

00:12:02,720 --> 00:12:06,000
device and have applications being

00:12:04,560 --> 00:12:10,639
crowded there

00:12:06,000 --> 00:12:12,639
automatically and firefox is also now

00:12:10,639 --> 00:12:15,200
also showing properly that it's linked

00:12:12,639 --> 00:12:15,200
to calf

00:12:17,600 --> 00:12:21,120
but of course there is no volume control

00:12:19,279 --> 00:12:23,120
on calf because it's not a real device

00:12:21,120 --> 00:12:26,560
it doesn't have the volume properties

00:12:23,120 --> 00:12:26,560
that other devices have

00:12:28,320 --> 00:12:34,959
now this works sort of there it it's not

00:12:31,920 --> 00:12:36,800
very nice to

00:12:34,959 --> 00:12:38,720
to set it up and there are also some

00:12:36,800 --> 00:12:41,839
issues like

00:12:38,720 --> 00:12:42,959
what happens if you have more filters

00:12:41,839 --> 00:12:46,160
enabled in calf

00:12:42,959 --> 00:12:47,600
it will they will all show up as ports

00:12:46,160 --> 00:12:50,320
on the same node and

00:12:47,600 --> 00:12:52,480
what the pulsodia site will understand

00:12:50,320 --> 00:12:54,720
for example if you have

00:12:52,480 --> 00:12:56,800
two stereo filters that have two and two

00:12:54,720 --> 00:12:59,920
ports each

00:12:56,800 --> 00:13:01,440
that means it will see four input ports

00:12:59,920 --> 00:13:03,120
and four output ports

00:13:01,440 --> 00:13:04,800
and we'll think that you have a four

00:13:03,120 --> 00:13:08,399
channel device not

00:13:04,800 --> 00:13:12,079
two different filters

00:13:08,399 --> 00:13:14,959
so it's not

00:13:12,079 --> 00:13:14,959
it's not exactly

00:13:15,200 --> 00:13:22,399
something that works so well

00:13:20,160 --> 00:13:23,839
uh we we also see another detail here

00:13:22,399 --> 00:13:26,000
that um

00:13:23,839 --> 00:13:28,480
okay when we set calf as the default

00:13:26,000 --> 00:13:30,800
device and we start firefox

00:13:28,480 --> 00:13:31,680
uh firefox is getting linked to calf

00:13:30,800 --> 00:13:33,440
properly

00:13:31,680 --> 00:13:35,360
that is done by the pilotwire session

00:13:33,440 --> 00:13:37,200
manager which

00:13:35,360 --> 00:13:38,800
recognizes that node and creates the

00:13:37,200 --> 00:13:41,680
link however

00:13:38,800 --> 00:13:43,120
on the on the other side where calf is

00:13:41,680 --> 00:13:44,959
connected to the device

00:13:43,120 --> 00:13:47,120
this is a link that has to be done

00:13:44,959 --> 00:13:49,839
through the jack session manager because

00:13:47,120 --> 00:13:51,120
but the pathway session manager doesn't

00:13:49,839 --> 00:13:53,760
have this functionality

00:13:51,120 --> 00:13:54,639
at least yet it's possible of course to

00:13:53,760 --> 00:13:58,639
implement it

00:13:54,639 --> 00:14:02,000
it's nothing um that is not

00:13:58,639 --> 00:14:04,560
it's all possible on what i'm saying

00:14:02,000 --> 00:14:05,360
but it right now it doesn't work so you

00:14:04,560 --> 00:14:07,519
have to

00:14:05,360 --> 00:14:09,440
run two different such monitors and you

00:14:07,519 --> 00:14:12,399
have to

00:14:09,440 --> 00:14:13,279
try and present things in a way that

00:14:12,399 --> 00:14:17,839
pulse audio

00:14:13,279 --> 00:14:17,839
will understand and jack will understand

00:14:19,360 --> 00:14:24,480
so how can we breach those two

00:14:22,079 --> 00:14:27,199
functionalities how how can we

00:14:24,480 --> 00:14:28,399
make something that actually works for

00:14:27,199 --> 00:14:32,320
both use cases

00:14:28,399 --> 00:14:35,519
nicely this is an open question

00:14:32,320 --> 00:14:38,880
i have some ideas about getting

00:14:35,519 --> 00:14:40,880
a few things working more nicely so

00:14:38,880 --> 00:14:43,360
in the case of calf for example i have

00:14:40,880 --> 00:14:46,399
some ideas that will help making this

00:14:43,360 --> 00:14:48,800
better but there are much more complex

00:14:46,399 --> 00:14:50,320
jack setups than running a simple

00:14:48,800 --> 00:14:53,440
feature filter

00:14:50,320 --> 00:14:55,199
you could have ardual running for

00:14:53,440 --> 00:14:57,680
example that is a full

00:14:55,199 --> 00:14:59,360
professional audio workstation with lots

00:14:57,680 --> 00:15:02,800
of

00:14:59,360 --> 00:15:06,160
controls and filters around and

00:15:02,800 --> 00:15:11,360
it could be hard to to get it right

00:15:06,160 --> 00:15:14,320
so yeah i need some thinking

00:15:11,360 --> 00:15:15,600
um and of course i'm also i'm i'm

00:15:14,320 --> 00:15:18,160
currently talking about

00:15:15,600 --> 00:15:20,160
combining pulse audio and jacks which is

00:15:18,160 --> 00:15:20,959
basically the desktop and pro audio use

00:15:20,160 --> 00:15:23,199
case

00:15:20,959 --> 00:15:24,079
uh what about other kinds of use cases

00:15:23,199 --> 00:15:28,079
what is

00:15:24,079 --> 00:15:28,079
uh missing from from that

00:15:29,920 --> 00:15:33,759
the desktop is pretty simple because we

00:15:33,040 --> 00:15:37,680
have

00:15:33,759 --> 00:15:39,519
single cpu and a single sound card

00:15:37,680 --> 00:15:41,040
or multiple sound cards but it doesn't

00:15:39,519 --> 00:15:44,480
matter you have multiple

00:15:41,040 --> 00:15:48,480
microphones my multiple speakers

00:15:44,480 --> 00:15:50,720
uh going to one cpu

00:15:48,480 --> 00:15:51,580
there are cases that i have worked on in

00:15:50,720 --> 00:15:53,199
the past so

00:15:51,580 --> 00:15:55,199
[Music]

00:15:53,199 --> 00:15:56,240
wire plumber for example we started the

00:15:55,199 --> 00:15:58,959
web plumber for

00:15:56,240 --> 00:16:00,800
automotive grade linux which is a

00:15:58,959 --> 00:16:03,920
distribution

00:16:00,800 --> 00:16:05,680
base for automotive manufacturers to use

00:16:03,920 --> 00:16:08,959
in cars

00:16:05,680 --> 00:16:10,240
and things in a car look very different

00:16:08,959 --> 00:16:13,279
they look like this

00:16:10,240 --> 00:16:16,240
so you have multiple cpus multiple

00:16:13,279 --> 00:16:17,040
computers around the car and each of

00:16:16,240 --> 00:16:19,440
them

00:16:17,040 --> 00:16:20,480
does something different and they all

00:16:19,440 --> 00:16:24,160
have needs

00:16:20,480 --> 00:16:27,839
to access speakers or microphones

00:16:24,160 --> 00:16:30,560
they may have to share those they may

00:16:27,839 --> 00:16:30,959
need to cooperate in some way there are

00:16:30,560 --> 00:16:34,240
also

00:16:30,959 --> 00:16:35,279
special devices like special microphones

00:16:34,240 --> 00:16:37,360
for example that

00:16:35,279 --> 00:16:38,560
do voice recognition that have their own

00:16:37,360 --> 00:16:42,399
processor in them

00:16:38,560 --> 00:16:44,399
and do some pre-processing of the audio

00:16:42,399 --> 00:16:45,759
so there is there is quite some

00:16:44,399 --> 00:16:48,839
complexity there

00:16:45,759 --> 00:16:51,920
and the main thing that

00:16:48,839 --> 00:16:53,519
is um

00:16:51,920 --> 00:16:55,199
the thing that is important when you

00:16:53,519 --> 00:16:58,160
write applications for such

00:16:55,199 --> 00:16:58,800
a system is for the application to

00:16:58,160 --> 00:17:02,560
declare

00:16:58,800 --> 00:17:06,319
its intent when it connects um

00:17:02,560 --> 00:17:09,919
because for example uh one

00:17:06,319 --> 00:17:12,480
important thing to consider is uh

00:17:09,919 --> 00:17:14,480
what happens when you have for example

00:17:12,480 --> 00:17:17,199
an application playing music

00:17:14,480 --> 00:17:18,959
and an application trying to give you

00:17:17,199 --> 00:17:20,720
instructions on the roads to navigate

00:17:18,959 --> 00:17:23,919
you

00:17:20,720 --> 00:17:27,360
these two need to access the speakers

00:17:23,919 --> 00:17:28,720
simultaneously and but the navigation

00:17:27,360 --> 00:17:30,960
application has

00:17:28,720 --> 00:17:32,559
more importance you need to hear that

00:17:30,960 --> 00:17:36,080
message

00:17:32,559 --> 00:17:39,600
and not the music so there are

00:17:36,080 --> 00:17:41,520
systems where basically they they

00:17:39,600 --> 00:17:44,320
when when the application tries to

00:17:41,520 --> 00:17:47,520
output navigation audio

00:17:44,320 --> 00:17:48,080
they basically raise the the volume of

00:17:47,520 --> 00:17:50,640
that

00:17:48,080 --> 00:17:51,520
uh stream and they lower the music so

00:17:50,640 --> 00:17:55,360
that you get

00:17:51,520 --> 00:17:58,840
a proper sound

00:17:55,360 --> 00:18:01,679
uh output um it's similar with

00:17:58,840 --> 00:18:03,120
uh little notifications that you may

00:18:01,679 --> 00:18:06,880
have in your car like the

00:18:03,120 --> 00:18:11,280
blinkers uh the the the alarm

00:18:06,880 --> 00:18:13,440
the light sound for example uh when it

00:18:11,280 --> 00:18:14,640
when it's on you need to be able to hear

00:18:13,440 --> 00:18:17,120
that and

00:18:14,640 --> 00:18:18,640
usually it's coming from the speakers in

00:18:17,120 --> 00:18:21,679
modern cars

00:18:18,640 --> 00:18:23,520
and it's uh it has priorities so it it

00:18:21,679 --> 00:18:26,960
needs to be heard

00:18:23,520 --> 00:18:30,799
more than anything else

00:18:26,960 --> 00:18:34,480
and in wire plumber we designed

00:18:30,799 --> 00:18:38,400
uh basically something

00:18:34,480 --> 00:18:41,919
that makes that work on top of pipe wire

00:18:38,400 --> 00:18:44,160
so applications uh in in agl they can

00:18:41,919 --> 00:18:47,200
declare their intent their role

00:18:44,160 --> 00:18:47,760
and they can connect to pipe wire and

00:18:47,200 --> 00:18:50,320
they

00:18:47,760 --> 00:18:51,200
will say i'm a music app or a navigation

00:18:50,320 --> 00:18:55,120
app

00:18:51,200 --> 00:18:57,840
and they will get proper routing to the

00:18:55,120 --> 00:18:57,840
sound output

00:18:59,440 --> 00:19:05,840
with a certain policy applied of course

00:19:02,480 --> 00:19:09,200
now why this is relevant for the desktop

00:19:05,840 --> 00:19:12,400
because it shows us that the use

00:19:09,200 --> 00:19:14,320
case of the application matters

00:19:12,400 --> 00:19:16,720
and these use cases also apply on the

00:19:14,320 --> 00:19:19,120
desktop so we have also on the desktop

00:19:16,720 --> 00:19:24,880
we have applications playing music

00:19:19,120 --> 00:19:26,880
maybe applications doing calls

00:19:24,880 --> 00:19:28,880
we have desktop notifications we may

00:19:26,880 --> 00:19:32,160
have a screen reader for example these

00:19:28,880 --> 00:19:35,520
are very very different use cases

00:19:32,160 --> 00:19:37,680
and in some circumstances they need to

00:19:35,520 --> 00:19:38,960
be treated differently

00:19:37,680 --> 00:19:42,320
[Music]

00:19:38,960 --> 00:19:45,520
and they could be treated differently

00:19:42,320 --> 00:19:47,760
which is actually not a very new idea

00:19:45,520 --> 00:19:48,799
it has been there for for at least a

00:19:47,760 --> 00:19:52,000
decade

00:19:48,799 --> 00:19:54,810
uh for example if you are familiar

00:19:52,000 --> 00:19:56,559
with kde you must remember this

00:19:54,810 --> 00:19:59,200
[Music]

00:19:56,559 --> 00:19:59,840
phonon preferences dialogue has been

00:19:59,200 --> 00:20:03,520
there for

00:19:59,840 --> 00:20:06,559
for a decade or so um

00:20:03,520 --> 00:20:08,640
and basically this

00:20:06,559 --> 00:20:10,480
brings this idea to the desktop it

00:20:08,640 --> 00:20:14,080
allows you to configure

00:20:10,480 --> 00:20:17,440
a different device per use case

00:20:14,080 --> 00:20:20,080
unfortunately this uh implementation in

00:20:17,440 --> 00:20:23,120
kde didn't go further so it only allowed

00:20:20,080 --> 00:20:26,000
you to specify a device

00:20:23,120 --> 00:20:26,400
and it was also limited to applications

00:20:26,000 --> 00:20:29,919
using

00:20:26,400 --> 00:20:32,000
phonon and not anything else

00:20:29,919 --> 00:20:34,320
and this idea actually comes from the

00:20:32,000 --> 00:20:37,440
mobile world where

00:20:34,320 --> 00:20:41,840
android for example it has

00:20:37,440 --> 00:20:44,320
this notion of a use case

00:20:41,840 --> 00:20:45,120
so your music app goes to the media

00:20:44,320 --> 00:20:47,520
channel and

00:20:45,120 --> 00:20:49,600
your phone call goes to the call channel

00:20:47,520 --> 00:20:50,880
and your ringtone goes to the ringtone

00:20:49,600 --> 00:20:53,760
channel

00:20:50,880 --> 00:20:54,720
and they all have different volumes

00:20:53,760 --> 00:20:57,440
which is something that

00:20:54,720 --> 00:20:58,720
kd didn't have kd only allows you to

00:20:57,440 --> 00:21:02,640
select a device

00:20:58,720 --> 00:21:06,400
android allows you to select

00:21:02,640 --> 00:21:09,039
volume per use case

00:21:06,400 --> 00:21:09,840
and what if we could do both actually we

00:21:09,039 --> 00:21:13,280
could select

00:21:09,840 --> 00:21:15,280
both a device a setup a session

00:21:13,280 --> 00:21:16,799
with with filters and everything in the

00:21:15,280 --> 00:21:19,840
pro audio case

00:21:16,799 --> 00:21:23,120
and also to have a

00:21:19,840 --> 00:21:26,400
different volume per use case

00:21:23,120 --> 00:21:29,200
i would love personally to have my

00:21:26,400 --> 00:21:31,039
music for example playing out in the in

00:21:29,200 --> 00:21:33,120
the room speakers

00:21:31,039 --> 00:21:34,799
uh while when i when i want to jump in a

00:21:33,120 --> 00:21:37,280
call i i want to

00:21:34,799 --> 00:21:38,480
just open my bluetooth headset put it on

00:21:37,280 --> 00:21:42,240
and i want the

00:21:38,480 --> 00:21:44,320
system to automatically understand that

00:21:42,240 --> 00:21:46,159
the music needs to stop and i'm going

00:21:44,320 --> 00:21:48,240
into a call and so the audio needs to be

00:21:46,159 --> 00:21:49,840
routed to the headset

00:21:48,240 --> 00:21:53,600
this is something that i would really

00:21:49,840 --> 00:21:53,600
love to have also on the desktop

00:21:56,000 --> 00:22:01,600
so how do we do that um in

00:21:59,120 --> 00:22:02,320
wire plumber we have introduced two

00:22:01,600 --> 00:22:05,440
kinds of

00:22:02,320 --> 00:22:08,080
new objects in in pipewire uh called

00:22:05,440 --> 00:22:10,559
endpoints and endpoint streams

00:22:08,080 --> 00:22:12,400
uh where this the the endpoints

00:22:10,559 --> 00:22:14,400
basically are

00:22:12,400 --> 00:22:15,919
something like the nodes that we have in

00:22:14,400 --> 00:22:18,960
pipewire

00:22:15,919 --> 00:22:22,320
they're just a more abstract

00:22:18,960 --> 00:22:24,400
term and the streams are paths

00:22:22,320 --> 00:22:26,320
associated with the use case so you

00:22:24,400 --> 00:22:27,120
would have a music stream a notification

00:22:26,320 --> 00:22:30,320
stream

00:22:27,120 --> 00:22:33,760
um a call stream etc

00:22:30,320 --> 00:22:36,640
and the graph there is a graph that

00:22:33,760 --> 00:22:37,679
looks similar to the to the graph of

00:22:36,640 --> 00:22:40,400
nodes that we

00:22:37,679 --> 00:22:41,039
we saw earlier in kuja control but in

00:22:40,400 --> 00:22:44,159
this

00:22:41,039 --> 00:22:46,240
case it has instead of ports instead of

00:22:44,159 --> 00:22:46,799
showing the channels it shows the use

00:22:46,240 --> 00:22:48,880
cases

00:22:46,799 --> 00:22:52,080
so the media player connects to the

00:22:48,880 --> 00:22:54,159
multimedia use case

00:22:52,080 --> 00:22:57,039
the voice agent the voice assistant

00:22:54,159 --> 00:23:00,640
connects to the voice assistant use case

00:22:57,039 --> 00:23:05,200
and so on and then the the endpoint

00:23:00,640 --> 00:23:08,240
object has some internal mechanisms

00:23:05,200 --> 00:23:10,400
going through the policy control to

00:23:08,240 --> 00:23:12,400
figure out what to do with these streams

00:23:10,400 --> 00:23:16,159
based on the use case that they

00:23:12,400 --> 00:23:16,159
have been opened with

00:23:17,120 --> 00:23:22,640
so these endpoints they are not

00:23:20,799 --> 00:23:24,480
fully adopted in pipe wire they are not

00:23:22,640 --> 00:23:25,760
a final design we may have to change

00:23:24,480 --> 00:23:27,760
things in the future

00:23:25,760 --> 00:23:31,360
it's something that we used in wire

00:23:27,760 --> 00:23:33,280
plumber to implement the streams

00:23:31,360 --> 00:23:35,760
to implement this functionality in

00:23:33,280 --> 00:23:38,240
automotive great linux

00:23:35,760 --> 00:23:39,520
of course there is an extension

00:23:38,240 --> 00:23:41,760
available in pipewire

00:23:39,520 --> 00:23:44,400
and it's actually enabled by default

00:23:41,760 --> 00:23:46,960
it's there

00:23:44,400 --> 00:23:50,640
but it's not used in the default desktop

00:23:46,960 --> 00:23:53,200
setup this is what i mean

00:23:50,640 --> 00:23:55,440
now before we go ahead and enable that

00:23:53,200 --> 00:23:59,039
in the desktop we need some thinking

00:23:55,440 --> 00:24:02,799
how can we breach those

00:23:59,039 --> 00:24:04,880
use cases to work together smoothly

00:24:02,799 --> 00:24:06,720
this is an open question i don't have

00:24:04,880 --> 00:24:09,120
all the answers

00:24:06,720 --> 00:24:09,840
uh but what i know and the reason that

00:24:09,120 --> 00:24:13,360
i'm i'm

00:24:09,840 --> 00:24:17,039
here today um giving this talk is

00:24:13,360 --> 00:24:20,240
because uh i believe that it needs

00:24:17,039 --> 00:24:21,360
a cooperation between application

00:24:20,240 --> 00:24:24,799
developers

00:24:21,360 --> 00:24:26,000
uh desktop developers and pipewire

00:24:24,799 --> 00:24:30,400
developers

00:24:26,000 --> 00:24:33,600
so we all need to work together and

00:24:30,400 --> 00:24:38,000
come up with uh ideas and

00:24:33,600 --> 00:24:41,200
uh see what our vision is for the future

00:24:38,000 --> 00:24:43,039
um to to to enable to breach all those

00:24:41,200 --> 00:24:44,480
functionalities together and to have

00:24:43,039 --> 00:24:48,240
something that

00:24:44,480 --> 00:24:50,799
is revolutionary that goes

00:24:48,240 --> 00:24:51,840
beyond what we already know uh in the

00:24:50,799 --> 00:24:55,279
linux desktop

00:24:51,840 --> 00:24:55,279
and in other desktops as well

00:24:55,360 --> 00:25:00,000
so if you have ideas uh they are all

00:24:58,960 --> 00:25:02,960
welcome

00:25:00,000 --> 00:25:05,120
we are hanging out on irc on on hashtag

00:25:02,960 --> 00:25:07,440
pipewire

00:25:05,120 --> 00:25:09,120
and uh the source code is available on

00:25:07,440 --> 00:25:11,840
github for desktop.org

00:25:09,120 --> 00:25:14,240
there is both pipewire and ware plumber

00:25:11,840 --> 00:25:17,360
they live in there

00:25:14,240 --> 00:25:20,480
if you don't if you want to let's say to

00:25:17,360 --> 00:25:25,039
dump your ideas in a ticket maybe

00:25:20,480 --> 00:25:25,039
open a ticket against a wire plumber

00:25:25,279 --> 00:25:29,440
and we can take it from there thank you

00:25:28,080 --> 00:25:40,960
very much for attending

00:25:29,440 --> 00:25:40,960

YouTube URL: https://www.youtube.com/watch?v=8LZt4loZu64


