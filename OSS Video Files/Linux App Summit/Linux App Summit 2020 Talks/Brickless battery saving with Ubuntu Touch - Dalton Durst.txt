Title: Brickless battery saving with Ubuntu Touch - Dalton Durst
Publication date: 2020-11-15
Playlist: Linux App Summit 2020 Talks
Description: 
	On the Linux Desktop, we value always-on, always-connected, and always in-sync applications. Our data, discussions, and research must always be available to us. We must always be instantly notified of important changes to the state of our chats, computer, or the world around us. Until we shut the laptop lid. Once the lid is shut, the laptop can safely become a brick until the lid is opened again.

Your phone likely doesn't have the luxury of becoming a brick whenever you put it in you pocket. You expect that important changes to the world around you, whether targeted toward you specifically or people sharing your interests, will command your attention.

Meanwhile, you also expect your phone to last at least a whole workday of mixed use and sleep periods. It might have a more efficient processor and smaller screen than your laptop, but it also has a much smaller battery. There's no way your phone would last all day if it was in the same "active" state that your laptop is with its lid open. But likewise, your phone doesn't become a brick as soon as it falls asleep. How?

Your phone isn't always active. It just fools you into thinking it is. As we move Desktop Linux further into form factors like tablets and candybar phones, we'll need to provide this illusion of continuous connectivity to more applications.

This talk is all about how Ubuntu Touch can manage calls, SMS, Telegram messages, news broadcasts, and infrastructure alerts while still providing multi-day battery life. We'll discuss the Ubuntu Touch forced application lifecycle and its exceptions, then take a look at how push notifications are critical to the illusion of continuous connectivity. We'll finish by talking about the future of push technology on Ubuntu Touch and abroad, especially where we need help in evaluating and producing new technologies based on Web Push standards.
Captions: 
	00:00:00,960 --> 00:00:05,440
hi everyone uh welcome to brickless

00:00:02,960 --> 00:00:07,919
battery saving with ubuntu touch

00:00:05,440 --> 00:00:09,440
uh this is a talk that's all about the

00:00:07,919 --> 00:00:12,719
tools that we can use

00:00:09,440 --> 00:00:14,799
to make linux on mobile devices just as

00:00:12,719 --> 00:00:18,000
popular and just as useful

00:00:14,799 --> 00:00:20,560
as android and ios that's a pretty big

00:00:18,000 --> 00:00:20,560
one i know

00:00:20,880 --> 00:00:24,080
i'll be talking about what ubuntu touch

00:00:22,800 --> 00:00:27,279
does to save battery

00:00:24,080 --> 00:00:29,679
and what well everyone else being

00:00:27,279 --> 00:00:31,760
android and ios does now

00:00:29,679 --> 00:00:34,000
hi there i'm dalton i'm the development

00:00:31,760 --> 00:00:35,280
manager for ubuntu touch at the eb ports

00:00:34,000 --> 00:00:36,960
foundation

00:00:35,280 --> 00:00:39,120
ubuntu touch is the open source

00:00:36,960 --> 00:00:40,719
replacement to android or ios

00:00:39,120 --> 00:00:42,840
if you're interested you want to learn

00:00:40,719 --> 00:00:45,039
more you can head over to

00:00:42,840 --> 00:00:48,239
devices.ubuntu-touch

00:00:45,039 --> 00:00:50,800
see if it works on your device uh you

00:00:48,239 --> 00:00:52,559
can find us on telegram at ubports

00:00:50,800 --> 00:00:57,440
or if you want to join us on matrix you

00:00:52,559 --> 00:00:57,440
can find us at ubports colonmatrix.org

00:00:57,680 --> 00:01:03,039
i love researching observing and

00:01:00,800 --> 00:01:05,840
explaining technology to other people

00:01:03,039 --> 00:01:07,439
i love um going back in history and

00:01:05,840 --> 00:01:08,240
seeing why we do things the way that we

00:01:07,439 --> 00:01:10,159
do today

00:01:08,240 --> 00:01:12,400
and i did a lot of that kind of research

00:01:10,159 --> 00:01:15,040
for this talk seeing how

00:01:12,400 --> 00:01:15,840
people in the past managed to save

00:01:15,040 --> 00:01:18,000
battery on

00:01:15,840 --> 00:01:19,600
devices that were much less capable and

00:01:18,000 --> 00:01:21,920
had much smaller batteries than we have

00:01:19,600 --> 00:01:24,080
today

00:01:21,920 --> 00:01:25,840
the talk itself today is all about the

00:01:24,080 --> 00:01:29,119
impossible situations that

00:01:25,840 --> 00:01:31,759
users ask us to fulfill and

00:01:29,119 --> 00:01:33,439
it's about the eternal eternal truths

00:01:31,759 --> 00:01:33,840
that we can use to actually fulfill

00:01:33,439 --> 00:01:36,320
those

00:01:33,840 --> 00:01:36,320
requests

00:01:37,119 --> 00:01:41,759
basically by fooling our users into

00:01:40,159 --> 00:01:42,159
thinking that we did the impossible for

00:01:41,759 --> 00:01:43,920
them

00:01:42,159 --> 00:01:46,000
instead of actually doing the impossible

00:01:43,920 --> 00:01:47,520
thing that they requested

00:01:46,000 --> 00:01:49,680
it's a talk about learning from those

00:01:47,520 --> 00:01:54,479
who came before us including

00:01:49,680 --> 00:01:56,719
well blackberry palm os maymo

00:01:54,479 --> 00:01:57,680
but i'm going to stay really really high

00:01:56,719 --> 00:01:59,280
level in this

00:01:57,680 --> 00:02:01,680
in this talk i want to start a

00:01:59,280 --> 00:02:03,840
discussion with other mobile linux

00:02:01,680 --> 00:02:07,200
operating systems that's a mouthful

00:02:03,840 --> 00:02:10,720
about how we can manage to save battery

00:02:07,200 --> 00:02:12,959
for all of our app developers how we can

00:02:10,720 --> 00:02:16,239
help developers do this with us so that

00:02:12,959 --> 00:02:18,560
we actually give users what they want

00:02:16,239 --> 00:02:22,239
this talk will also answer the eternal

00:02:18,560 --> 00:02:23,920
question why is ubuntu touch so weird um

00:02:22,239 --> 00:02:25,760
anyone who's used ubuntu touch before

00:02:23,920 --> 00:02:28,400
and tried to run like firefox

00:02:25,760 --> 00:02:29,680
or telegram desktop on it says well why

00:02:28,400 --> 00:02:32,000
isn't this work right

00:02:29,680 --> 00:02:34,319
hopefully this will do a bit to explain

00:02:32,000 --> 00:02:34,319
why

00:02:34,959 --> 00:02:38,640
at the base of it all the problem that

00:02:36,800 --> 00:02:41,920
we have on mobile devices today

00:02:38,640 --> 00:02:45,200
is that people want impossible things

00:02:41,920 --> 00:02:47,680
they want a task that they start to run

00:02:45,200 --> 00:02:49,680
until they stop it they want it to run

00:02:47,680 --> 00:02:53,200
always and forever

00:02:49,680 --> 00:02:53,200
for example if i

00:02:53,680 --> 00:02:57,680
were to install an email app on my phone

00:02:56,000 --> 00:03:00,080
i would expect that i get email

00:02:57,680 --> 00:03:01,599
until the end of time on my phone and

00:03:00,080 --> 00:03:02,400
anytime that there is an important

00:03:01,599 --> 00:03:04,800
message that

00:03:02,400 --> 00:03:05,599
i receive i want to be notified about

00:03:04,800 --> 00:03:07,519
that

00:03:05,599 --> 00:03:09,360
same for telegram if my friends or my

00:03:07,519 --> 00:03:10,239
enemies are trying to contact me on

00:03:09,360 --> 00:03:12,319
telegram

00:03:10,239 --> 00:03:14,080
well i want to know about that i want to

00:03:12,319 --> 00:03:16,400
be told about that

00:03:14,080 --> 00:03:18,239
and if i buy like a smart watch i expect

00:03:16,400 --> 00:03:19,920
that that thing is always in sync with

00:03:18,239 --> 00:03:21,120
my phone if i'm getting a notification

00:03:19,920 --> 00:03:25,280
it better be on my watch too

00:03:21,120 --> 00:03:25,280
time better be up to date um

00:03:25,840 --> 00:03:29,519
and i expect that to be done without

00:03:27,760 --> 00:03:32,400
manual intervention

00:03:29,519 --> 00:03:32,799
um which is kind of the important part

00:03:32,400 --> 00:03:34,640
here

00:03:32,799 --> 00:03:36,879
sure we can pull or refresh whatever we

00:03:34,640 --> 00:03:39,599
want but is that

00:03:36,879 --> 00:03:40,080
that's not too useful this is something

00:03:39,599 --> 00:03:42,480
that we

00:03:40,080 --> 00:03:44,000
usually refer to as always on or

00:03:42,480 --> 00:03:46,159
constant connectivity

00:03:44,000 --> 00:03:48,080
where our applications are always

00:03:46,159 --> 00:03:51,519
available always connected

00:03:48,080 --> 00:03:54,799
um and always up to date

00:03:51,519 --> 00:03:57,200
the problem is that we also want

00:03:54,799 --> 00:03:58,799
to get long battery life while having

00:03:57,200 --> 00:04:01,280
all these constantly connected things

00:03:58,799 --> 00:04:03,920
going on

00:04:01,280 --> 00:04:06,560
and there's a little problem called the

00:04:03,920 --> 00:04:10,720
laws of physics

00:04:06,560 --> 00:04:14,080
every task that we do on a cpu or a gpu

00:04:10,720 --> 00:04:17,280
or a network some network hardware takes

00:04:14,080 --> 00:04:18,639
energy and we have limited energy

00:04:17,280 --> 00:04:20,079
available from the batteries of our

00:04:18,639 --> 00:04:23,199
devices

00:04:20,079 --> 00:04:25,919
so if we just run tasks always

00:04:23,199 --> 00:04:27,120
forever we don't actually end up getting

00:04:25,919 --> 00:04:28,240
good battery life

00:04:27,120 --> 00:04:30,240
and that's a problem that we have on

00:04:28,240 --> 00:04:32,000
linux smartphones today you can either

00:04:30,240 --> 00:04:35,280
choose like with the pine phone

00:04:32,000 --> 00:04:37,120
to have a useful device that receives

00:04:35,280 --> 00:04:40,720
notifications from more than just

00:04:37,120 --> 00:04:42,720
sms and phone calls

00:04:40,720 --> 00:04:44,960
or you can have a device that lasts

00:04:42,720 --> 00:04:47,360
longer than 12 hours on a charge

00:04:44,960 --> 00:04:49,520
and that's not a very good compromise to

00:04:47,360 --> 00:04:50,960
make

00:04:49,520 --> 00:04:52,080
that's the old way of compromising

00:04:50,960 --> 00:04:54,240
things that's how we've been doing

00:04:52,080 --> 00:04:55,280
things since 1986 on the ibm pc

00:04:54,240 --> 00:04:57,759
convertible

00:04:55,280 --> 00:05:00,000
in the pc space yes i said that i

00:04:57,759 --> 00:05:01,440
researched back really far for this

00:05:00,000 --> 00:05:04,160
might be worth a blog post what i've

00:05:01,440 --> 00:05:06,800
learned sometime

00:05:04,160 --> 00:05:07,440
either your laptop is running tasks it

00:05:06,800 --> 00:05:09,759
is

00:05:07,440 --> 00:05:11,120
getting your telegram messages from your

00:05:09,759 --> 00:05:14,400
friends and enemies it is

00:05:11,120 --> 00:05:17,199
receiving uh email or you

00:05:14,400 --> 00:05:18,160
shut the lid and you're not receiving

00:05:17,199 --> 00:05:21,919
anything anymore

00:05:18,160 --> 00:05:23,680
the laptop is effectively off

00:05:21,919 --> 00:05:26,960
and that's a problem that we have

00:05:23,680 --> 00:05:26,960
persisted on the smartphone

00:05:27,039 --> 00:05:31,039
um we need to get around that and we can

00:05:30,560 --> 00:05:33,759
start

00:05:31,039 --> 00:05:34,880
we can try to do that by just saying

00:05:33,759 --> 00:05:37,120
well

00:05:34,880 --> 00:05:39,199
let's just not compromise let's just let

00:05:37,120 --> 00:05:40,240
apps do whatever they want whenever they

00:05:39,199 --> 00:05:42,800
want

00:05:40,240 --> 00:05:43,520
and in linux we have this really great

00:05:42,800 --> 00:05:45,199
thing called

00:05:43,520 --> 00:05:46,880
runtime power management or

00:05:45,199 --> 00:05:50,240
opportunistic idle

00:05:46,880 --> 00:05:54,000
which means whenever your device

00:05:50,240 --> 00:05:56,400
isn't doing something actively it can

00:05:54,000 --> 00:05:57,120
idle everything that doesn't need to be

00:05:56,400 --> 00:05:58,880
running

00:05:57,120 --> 00:06:00,560
isn't running and you save energy that

00:05:58,880 --> 00:06:02,240
way

00:06:00,560 --> 00:06:04,080
but we end up with some problems when we

00:06:02,240 --> 00:06:07,360
try that we don't hit

00:06:04,080 --> 00:06:08,319
idle often enough for example on my dell

00:06:07,360 --> 00:06:11,680
xps 13

00:06:08,319 --> 00:06:14,800
9370 which is the laptop i use

00:06:11,680 --> 00:06:16,960
every day if i were to

00:06:14,800 --> 00:06:18,960
close all my applications all my next

00:06:16,960 --> 00:06:21,759
cloud stuff and just leave wi-fi on

00:06:18,960 --> 00:06:22,960
and leave it connected it receives 65

00:06:21,759 --> 00:06:27,280
hours of battery life

00:06:22,960 --> 00:06:30,720
with screen off that drops about half

00:06:27,280 --> 00:06:31,280
once i open telegram and discord irc

00:06:30,720 --> 00:06:34,960
cloud

00:06:31,280 --> 00:06:36,800
element and thunderbird and i only get

00:06:34,960 --> 00:06:39,039
26 hours of battery life

00:06:36,800 --> 00:06:40,800
with the screen off and never turning on

00:06:39,039 --> 00:06:41,520
i never received a notification during

00:06:40,800 --> 00:06:45,919
this time

00:06:41,520 --> 00:06:48,479
because i'm a sad lonely person um

00:06:45,919 --> 00:06:49,360
but that battery life dropped by half so

00:06:48,479 --> 00:06:52,479
if we could say

00:06:49,360 --> 00:06:54,560
get one day of battery life on a phone

00:06:52,479 --> 00:06:55,840
once we run all those apps and actually

00:06:54,560 --> 00:06:59,039
get notifications

00:06:55,840 --> 00:07:00,479
like we expect on a phone

00:06:59,039 --> 00:07:02,240
we're only going to get 12 hours of

00:07:00,479 --> 00:07:04,400
battery life

00:07:02,240 --> 00:07:05,919
and on the pine phone we're only able to

00:07:04,400 --> 00:07:09,280
do 12 hours of battery life

00:07:05,919 --> 00:07:10,400
without aggressive power management

00:07:09,280 --> 00:07:12,319
which is something i'll talk about a

00:07:10,400 --> 00:07:14,400
little bit

00:07:12,319 --> 00:07:16,080
and then if you do something wild and

00:07:14,400 --> 00:07:20,240
crazy like open up a chrome

00:07:16,080 --> 00:07:21,440
tab with cnn.com in it no ad block

00:07:20,240 --> 00:07:23,360
and just leave that running in the

00:07:21,440 --> 00:07:24,720
background you get nine hours of battery

00:07:23,360 --> 00:07:28,160
life

00:07:24,720 --> 00:07:30,479
at least on this xps this

00:07:28,160 --> 00:07:33,120
isn't a very good experience at all that

00:07:30,479 --> 00:07:36,080
is a really short

00:07:33,120 --> 00:07:38,960
uh for something that is suspended or

00:07:36,080 --> 00:07:38,960
the screen isn't on

00:07:39,759 --> 00:07:43,360
and that brings us to some eternal

00:07:41,360 --> 00:07:46,400
truths about saving power

00:07:43,360 --> 00:07:49,599
on computers idling is

00:07:46,400 --> 00:07:50,319
good when we're idle we use less power

00:07:49,599 --> 00:07:53,039
because we're

00:07:50,319 --> 00:07:55,919
opportunistically turning off pieces of

00:07:53,039 --> 00:07:59,520
the system that we don't need

00:07:55,919 --> 00:08:01,759
but idle means idle

00:07:59,520 --> 00:08:04,879
it means that absolutely nothing can be

00:08:01,759 --> 00:08:04,879
happening in the background

00:08:05,599 --> 00:08:09,520
and that can be a problem for our

00:08:07,120 --> 00:08:12,560
current applications they don't know

00:08:09,520 --> 00:08:14,879
when to stop processing so that

00:08:12,560 --> 00:08:17,680
this is the system can actually be idle

00:08:14,879 --> 00:08:17,680
easy for me to say

00:08:17,759 --> 00:08:21,280
another eternal truth to power

00:08:19,120 --> 00:08:22,800
management is that it takes more energy

00:08:21,280 --> 00:08:26,479
to go from idle

00:08:22,800 --> 00:08:30,240
to running than it takes to go from

00:08:26,479 --> 00:08:32,719
running to rather busy

00:08:30,240 --> 00:08:34,240
going from zero percent cpu usage to one

00:08:32,719 --> 00:08:36,479
percent cpu usage

00:08:34,240 --> 00:08:38,080
is a higher jump than going from one

00:08:36,479 --> 00:08:41,680
percent cpu usage to

00:08:38,080 --> 00:08:43,120
say 25 or 50 percent in terms of

00:08:41,680 --> 00:08:46,080
the amount of energy that you're burning

00:08:43,120 --> 00:08:46,080
off into the atmosphere

00:08:46,320 --> 00:08:50,399
and therefore it's better to idle less

00:08:48,720 --> 00:08:52,640
but for longer periods

00:08:50,399 --> 00:08:53,680
than it is to idle more for shorter

00:08:52,640 --> 00:08:55,360
periods

00:08:53,680 --> 00:08:57,920
when we look at the power usage of our

00:08:55,360 --> 00:08:59,680
devices or the cpu usage even

00:08:57,920 --> 00:09:01,279
we want to look more like the graph that

00:08:59,680 --> 00:09:04,800
i have at the bottom of the slide

00:09:01,279 --> 00:09:05,519
where there are huge valleys and huge

00:09:04,800 --> 00:09:10,560
peaks

00:09:05,519 --> 00:09:12,399
rather than a lot of hilly landscapes

00:09:10,560 --> 00:09:13,600
because as you can see in that slide

00:09:12,399 --> 00:09:16,480
this is actually

00:09:13,600 --> 00:09:17,920
the power usage of my laptop when it's

00:09:16,480 --> 00:09:20,320
in idle

00:09:17,920 --> 00:09:21,440
there's a huge peak from going from no

00:09:20,320 --> 00:09:24,959
cpu usage

00:09:21,440 --> 00:09:26,800
to some cpu usage

00:09:24,959 --> 00:09:29,839
that can amount to a significant amount

00:09:26,800 --> 00:09:29,839
of battery power used

00:09:30,480 --> 00:09:33,839
the problem that we have is we assumed

00:09:33,040 --> 00:09:36,480
that users

00:09:33,839 --> 00:09:38,240
actually want constant connectivity they

00:09:36,480 --> 00:09:39,200
want their tasks and their applications

00:09:38,240 --> 00:09:42,640
to be running

00:09:39,200 --> 00:09:44,800
always and forever but

00:09:42,640 --> 00:09:46,399
there is an easier solution that

00:09:44,800 --> 00:09:48,399
actually is much harder to pull off in

00:09:46,399 --> 00:09:50,320
practice

00:09:48,399 --> 00:09:52,160
i always want my applications to be up

00:09:50,320 --> 00:09:54,959
to date isn't the same as

00:09:52,160 --> 00:09:57,279
i want my application to be running all

00:09:54,959 --> 00:10:00,480
the time

00:09:57,279 --> 00:10:01,920
it means i want it to fool me into

00:10:00,480 --> 00:10:02,959
thinking that my applications are

00:10:01,920 --> 00:10:05,200
running all the time

00:10:02,959 --> 00:10:06,079
it just needs to be a good enough

00:10:05,200 --> 00:10:09,200
illusion

00:10:06,079 --> 00:10:10,640
of constant connectivity not

00:10:09,200 --> 00:10:13,279
actually constantly connected

00:10:10,640 --> 00:10:13,279
applications

00:10:13,839 --> 00:10:18,240
so then we need to compromise the other

00:10:15,600 --> 00:10:21,519
way when we talk about

00:10:18,240 --> 00:10:21,920
saving power on mobile devices you might

00:10:21,519 --> 00:10:24,079
think

00:10:21,920 --> 00:10:24,959
well we need to tell applications okay

00:10:24,079 --> 00:10:27,040
so

00:10:24,959 --> 00:10:28,399
discord you're running right now element

00:10:27,040 --> 00:10:29,920
is also running right now

00:10:28,399 --> 00:10:31,760
and it's going to check for its messages

00:10:29,920 --> 00:10:33,600
every five minutes or so

00:10:31,760 --> 00:10:35,360
so you should check for your messages

00:10:33,600 --> 00:10:40,399
when it checks for messages

00:10:35,360 --> 00:10:42,800
that way we have longer values of idle

00:10:40,399 --> 00:10:44,880
the problem is applications don't need

00:10:42,800 --> 00:10:46,000
to care about other applications running

00:10:44,880 --> 00:10:48,480
on the system

00:10:46,000 --> 00:10:49,040
that's not fair to an app developer that

00:10:48,480 --> 00:10:50,880
just

00:10:49,040 --> 00:10:53,600
makes them implement a lot of stuff they

00:10:50,880 --> 00:10:53,600
don't care about

00:10:55,120 --> 00:11:00,399
uh luna asks could you just update fast

00:10:58,240 --> 00:11:03,680
when the app starts to be active

00:11:00,399 --> 00:11:05,279
no not really because you want

00:11:03,680 --> 00:11:07,279
applications to be sending you

00:11:05,279 --> 00:11:08,800
notifications like i just got on my

00:11:07,279 --> 00:11:10,320
phone now

00:11:08,800 --> 00:11:11,920
when people message you even if it's

00:11:10,320 --> 00:11:14,880
just sitting on a desk and appears to be

00:11:11,920 --> 00:11:16,959
doing nothing

00:11:14,880 --> 00:11:18,079
so we actually end up doing in practice

00:11:16,959 --> 00:11:20,320
then is

00:11:18,079 --> 00:11:21,680
suspending apps whenever they aren't in

00:11:20,320 --> 00:11:24,240
use

00:11:21,680 --> 00:11:25,360
whenever an app is focused it is not

00:11:24,240 --> 00:11:28,640
paused and it knows

00:11:25,360 --> 00:11:30,640
i can process whatever i want right now

00:11:28,640 --> 00:11:31,760
and then when an app isn't focused we

00:11:30,640 --> 00:11:33,600
pause it

00:11:31,760 --> 00:11:35,360
and does that mean that there's just no

00:11:33,600 --> 00:11:36,959
worries well

00:11:35,360 --> 00:11:38,480
not exactly because there are things

00:11:36,959 --> 00:11:40,240
that you want to do in the background

00:11:38,480 --> 00:11:42,000
you want to check for emails you want to

00:11:40,240 --> 00:11:45,279
update check lists and you want

00:11:42,000 --> 00:11:48,160
to notify the user if anything

00:11:45,279 --> 00:11:48,160
exceptional happens

00:11:48,720 --> 00:11:52,000
we'll talk about that just a moment but

00:11:50,639 --> 00:11:54,639
it's worth noting that

00:11:52,000 --> 00:11:56,160
if we suspend applications in idle we go

00:11:54,639 --> 00:11:57,680
to a state where we know

00:11:56,160 --> 00:11:59,680
when the system is doing something and

00:11:57,680 --> 00:12:00,320
when it isn't it's a system managed

00:11:59,680 --> 00:12:02,000
state

00:12:00,320 --> 00:12:03,440
and that allows us to do aggressive

00:12:02,000 --> 00:12:05,600
power management like

00:12:03,440 --> 00:12:07,040
manually shutting off the phone or

00:12:05,600 --> 00:12:08,560
putting it in to suspend

00:12:07,040 --> 00:12:11,680
and waking up a little bit later when

00:12:08,560 --> 00:12:13,200
apps requested to wake up

00:12:11,680 --> 00:12:15,040
that's how we get good battery life on

00:12:13,200 --> 00:12:16,800
the pine phone is by

00:12:15,040 --> 00:12:18,160
not actually having it in idle but

00:12:16,800 --> 00:12:19,680
having it in suspend

00:12:18,160 --> 00:12:24,480
and just fooling you into thinking it's

00:12:19,680 --> 00:12:27,600
only idling

00:12:24,480 --> 00:12:29,839
now this will make people upset

00:12:27,600 --> 00:12:30,720
because they want to run the same apps

00:12:29,839 --> 00:12:33,200
that they run

00:12:30,720 --> 00:12:35,600
today on their phone they're going to

00:12:33,200 --> 00:12:38,000
say i wanted real linux on my phone not

00:12:35,600 --> 00:12:41,040
this thing that you're giving me

00:12:38,000 --> 00:12:43,040
trust me i hear this every other day

00:12:41,040 --> 00:12:45,360
the thing is they aren't really saying i

00:12:43,040 --> 00:12:48,000
want the exact same apps that i have

00:12:45,360 --> 00:12:49,279
on my laptop they're saying i want the

00:12:48,000 --> 00:12:51,760
same experience

00:12:49,279 --> 00:12:53,360
from these apps that i have on my laptop

00:12:51,760 --> 00:12:54,959
i want telegram to run

00:12:53,360 --> 00:12:56,639
and i want it to tell me when i have new

00:12:54,959 --> 00:12:58,160
messages

00:12:56,639 --> 00:13:00,480
that doesn't necessarily mean that they

00:12:58,160 --> 00:13:01,120
want the same telegram desktop app on

00:13:00,480 --> 00:13:03,120
their phone

00:13:01,120 --> 00:13:04,720
and their laptop it'd be cool if they

00:13:03,120 --> 00:13:07,760
did though

00:13:04,720 --> 00:13:10,160
if the telegram desktop app was able to

00:13:07,760 --> 00:13:12,639
work when it was suspended in the

00:13:10,160 --> 00:13:12,639
background

00:13:13,200 --> 00:13:16,880
we start giving applications back the

00:13:15,360 --> 00:13:20,480
ability to run in the background

00:13:16,880 --> 00:13:22,079
step by step and that allows them to

00:13:20,480 --> 00:13:24,160
create the illusion of constant

00:13:22,079 --> 00:13:26,079
connectivity whereas

00:13:24,160 --> 00:13:27,680
well devices are kind of useless when

00:13:26,079 --> 00:13:29,200
everything is suspended whenever the

00:13:27,680 --> 00:13:30,480
screen is off

00:13:29,200 --> 00:13:33,680
we start giving apps back the

00:13:30,480 --> 00:13:35,440
opportunity to run in the background

00:13:33,680 --> 00:13:36,720
and this is something that we schedule

00:13:35,440 --> 00:13:38,880
as a system

00:13:36,720 --> 00:13:39,920
rather than as a bunch of apps trying

00:13:38,880 --> 00:13:43,680
loosely to

00:13:39,920 --> 00:13:46,560
work together the problem is that

00:13:43,680 --> 00:13:47,360
whenever we make a more convenient

00:13:46,560 --> 00:13:49,360
option

00:13:47,360 --> 00:13:52,959
a more flexible way for an app to run in

00:13:49,360 --> 00:13:56,079
the background it becomes

00:13:52,959 --> 00:13:57,440
less efficient the more that app

00:13:56,079 --> 00:13:59,360
developers are able to dictate

00:13:57,440 --> 00:14:01,360
exactly when their app runs in the

00:13:59,360 --> 00:14:03,440
background the less battery we have

00:14:01,360 --> 00:14:04,480
so that's a trade-off that we need to be

00:14:03,440 --> 00:14:07,600
um

00:14:04,480 --> 00:14:08,720
aware of also the more clever we need to

00:14:07,600 --> 00:14:12,480
make our

00:14:08,720 --> 00:14:13,440
um illusion the more that we suspend in

00:14:12,480 --> 00:14:17,600
the background

00:14:13,440 --> 00:14:19,600
the better battery life we get but

00:14:17,600 --> 00:14:22,079
it's harder to implement those clever

00:14:19,600 --> 00:14:22,079
solutions

00:14:22,480 --> 00:14:27,120
we then go so we're walking back the

00:14:25,600 --> 00:14:28,639
restrictions that we placed on app

00:14:27,120 --> 00:14:30,959
developers

00:14:28,639 --> 00:14:32,399
and we're walking them back in phases

00:14:30,959 --> 00:14:33,519
first off we make the required

00:14:32,399 --> 00:14:35,680
background services

00:14:33,519 --> 00:14:37,040
the things that basically everyone wants

00:14:35,680 --> 00:14:39,279
from their smartphone

00:14:37,040 --> 00:14:41,760
we make dedicated services to provide

00:14:39,279 --> 00:14:45,440
those applications

00:14:41,760 --> 00:14:48,079
next we create push services which allow

00:14:45,440 --> 00:14:51,440
application servers to tell the device

00:14:48,079 --> 00:14:53,040
when they have data to send

00:14:51,440 --> 00:14:54,639
from there we go on and create

00:14:53,040 --> 00:14:56,880
background extensions allowing

00:14:54,639 --> 00:14:58,480
applications that were in the foreground

00:14:56,880 --> 00:15:00,560
to run in the background for a short

00:14:58,480 --> 00:15:02,399
period of time

00:15:00,560 --> 00:15:04,399
we move on from there into maintenance

00:15:02,399 --> 00:15:06,560
tasks for things like

00:15:04,399 --> 00:15:08,399
refreshing your rss feeds in the

00:15:06,560 --> 00:15:10,480
background when you don't have a server

00:15:08,399 --> 00:15:13,839
component that can tell you

00:15:10,480 --> 00:15:15,920
when there's something new to see

00:15:13,839 --> 00:15:17,360
and finally we end off by implementing

00:15:15,920 --> 00:15:20,240
the easy button solution

00:15:17,360 --> 00:15:21,279
and that is uh actual real demons like

00:15:20,240 --> 00:15:24,639
we have

00:15:21,279 --> 00:15:26,639
on current systems today

00:15:24,639 --> 00:15:28,160
i would recommend implementing in this

00:15:26,639 --> 00:15:30,880
order um

00:15:28,160 --> 00:15:32,480
and well ubuntu touch is currently on

00:15:30,880 --> 00:15:34,160
the path we have the required background

00:15:32,480 --> 00:15:36,000
services and the push services

00:15:34,160 --> 00:15:37,600
that allow us to do this kind of thing

00:15:36,000 --> 00:15:39,519
and to a point kind of have the

00:15:37,600 --> 00:15:42,399
background extensions

00:15:39,519 --> 00:15:44,160
but this is just as much a proposal for

00:15:42,399 --> 00:15:44,959
how ubuntu touch is going to continue

00:15:44,160 --> 00:15:47,360
developing

00:15:44,959 --> 00:15:48,240
so that our app developers get the

00:15:47,360 --> 00:15:50,560
expectation

00:15:48,240 --> 00:15:51,920
their expectations met and their users

00:15:50,560 --> 00:15:53,519
expectations met

00:15:51,920 --> 00:15:56,240
just as much as it's a recommendation

00:15:53,519 --> 00:15:59,199
for how everyone should do this

00:15:56,240 --> 00:16:01,199
basically what i'm saying is uh we're

00:15:59,199 --> 00:16:02,959
probably going to do things this way

00:16:01,199 --> 00:16:06,240
whether people join us or not but we

00:16:02,959 --> 00:16:06,240
would love to have you join us

00:16:06,320 --> 00:16:11,519
um let's see yeah we start off by

00:16:09,759 --> 00:16:13,279
implementing the required background

00:16:11,519 --> 00:16:16,560
services the things that people will

00:16:13,279 --> 00:16:19,759
want the absolute most

00:16:16,560 --> 00:16:20,800
and we do this by well seeing what users

00:16:19,759 --> 00:16:23,120
use on their device

00:16:20,800 --> 00:16:25,519
most often we target the things that

00:16:23,120 --> 00:16:27,279
they do most often on their device

00:16:25,519 --> 00:16:29,759
and why they want their apps to run in

00:16:27,279 --> 00:16:32,160
the background

00:16:29,759 --> 00:16:34,480
the first one of those is media playback

00:16:32,160 --> 00:16:35,920
people want to play audio or video

00:16:34,480 --> 00:16:37,680
even when the screen is off on their

00:16:35,920 --> 00:16:38,560
device or the application playing the

00:16:37,680 --> 00:16:41,519
audio or video

00:16:38,560 --> 00:16:41,519
isn't in the foreground

00:16:41,759 --> 00:16:47,440
people want to upload and download files

00:16:44,880 --> 00:16:49,279
well apps want to do it for things like

00:16:47,440 --> 00:16:51,440
creating a social media post

00:16:49,279 --> 00:16:52,800
they want to upload files even when they

00:16:51,440 --> 00:16:54,240
aren't in the foreground because that

00:16:52,800 --> 00:16:55,920
could be a long running task

00:16:54,240 --> 00:16:58,560
the user could get bored and switch away

00:16:55,920 --> 00:16:58,560
while they do it

00:16:59,759 --> 00:17:03,440
we want to provide location updates to

00:17:02,160 --> 00:17:05,120
applications this is something that

00:17:03,440 --> 00:17:06,880
ubuntu touch doesn't do yet the other

00:17:05,120 --> 00:17:11,199
two are things that it does

00:17:06,880 --> 00:17:14,880
but if an application is using um

00:17:11,199 --> 00:17:16,559
apple uh locate location services

00:17:14,880 --> 00:17:18,640
it wants to be updated when it's in the

00:17:16,559 --> 00:17:20,319
background when the user moves

00:17:18,640 --> 00:17:22,319
for example if you have a run tracking

00:17:20,319 --> 00:17:23,679
application the user might be switching

00:17:22,319 --> 00:17:24,240
applications and running while browsing

00:17:23,679 --> 00:17:25,600
the web

00:17:24,240 --> 00:17:27,760
or they might have turned their phone

00:17:25,600 --> 00:17:31,679
off which is more likely

00:17:27,760 --> 00:17:32,960
and the app should continue receiving

00:17:31,679 --> 00:17:36,000
location updates

00:17:32,960 --> 00:17:37,520
when that occurs and then finally uh

00:17:36,000 --> 00:17:40,160
people want to create alarm clocks so

00:17:37,520 --> 00:17:42,640
their device wakes up and wakes them up

00:17:40,160 --> 00:17:47,679
uh when they request it excuse me for

00:17:42,640 --> 00:17:50,799
just a moment

00:17:47,679 --> 00:17:50,799
oh much better

00:17:51,280 --> 00:17:54,880
those are our required background

00:17:52,640 --> 00:17:56,400
services and once we have those in place

00:17:54,880 --> 00:17:59,120
um we're able to provide the experience

00:17:56,400 --> 00:18:02,400
of an iphone one in 2007.

00:17:59,120 --> 00:18:06,000
well actually the iphone 3g in 2008 when

00:18:02,400 --> 00:18:09,039
they opened up the app store developers

00:18:06,000 --> 00:18:09,840
from there we move on to what ios 3

00:18:09,039 --> 00:18:13,280
added

00:18:09,840 --> 00:18:15,919
and the iphone 3gs debuted with in 2009

00:18:13,280 --> 00:18:16,559
we're only 11 years behind now and we

00:18:15,919 --> 00:18:19,919
create

00:18:16,559 --> 00:18:21,840
push services push services flip the

00:18:19,919 --> 00:18:23,600
script on client devices

00:18:21,840 --> 00:18:24,960
whereas usually when you're running

00:18:23,600 --> 00:18:27,600
telegram or discord

00:18:24,960 --> 00:18:28,160
on your devices today they asked the

00:18:27,600 --> 00:18:29,840
server

00:18:28,160 --> 00:18:31,520
hey do you have content for me do you

00:18:29,840 --> 00:18:32,559
have content for me do you have content

00:18:31,520 --> 00:18:35,679
for me

00:18:32,559 --> 00:18:36,640
we instead make the server tell the

00:18:35,679 --> 00:18:39,919
client device

00:18:36,640 --> 00:18:40,720
i have content for you this is much more

00:18:39,919 --> 00:18:42,880
efficient because

00:18:40,720 --> 00:18:44,080
the server already knows that it has

00:18:42,880 --> 00:18:46,080
content available

00:18:44,080 --> 00:18:47,520
why doesn't it just make the client

00:18:46,080 --> 00:18:49,039
aware of that instead of the client

00:18:47,520 --> 00:18:50,559
needing to check in

00:18:49,039 --> 00:18:53,600
even though there might not be new

00:18:50,559 --> 00:18:53,600
content on the server

00:18:53,840 --> 00:18:57,440
it's kind of like a publisher or a

00:18:55,760 --> 00:19:00,160
publish and subscribe model

00:18:57,440 --> 00:19:01,120
except instead of polling like you would

00:19:00,160 --> 00:19:03,440
do an rss

00:19:01,120 --> 00:19:05,280
you get pushed the information that

00:19:03,440 --> 00:19:07,039
there's new data available

00:19:05,280 --> 00:19:08,880
we make the server tell the app i have

00:19:07,039 --> 00:19:11,520
data for you

00:19:08,880 --> 00:19:12,240
this can enable a lot of experiences in

00:19:11,520 --> 00:19:14,320
fact

00:19:12,240 --> 00:19:15,280
implementing a push service which is

00:19:14,320 --> 00:19:17,200
done by

00:19:15,280 --> 00:19:19,120
creating a client service on the device

00:19:17,200 --> 00:19:22,480
which holds a connection

00:19:19,120 --> 00:19:24,640
a single usually tcp connection

00:19:22,480 --> 00:19:25,919
to a server somewhere that is the push

00:19:24,640 --> 00:19:28,559
service

00:19:25,919 --> 00:19:32,559
and then app servers tell the push

00:19:28,559 --> 00:19:34,160
service i have content for this device

00:19:32,559 --> 00:19:35,760
the push service tells the device

00:19:34,160 --> 00:19:36,559
there's content for you and the device

00:19:35,760 --> 00:19:38,640
can then

00:19:36,559 --> 00:19:40,960
pull the content from the application

00:19:38,640 --> 00:19:40,960
server

00:19:41,600 --> 00:19:46,559
implementing these isn't easy but it

00:19:44,799 --> 00:19:49,120
allows us to do things like

00:19:46,559 --> 00:19:50,240
well get notification cards even when a

00:19:49,120 --> 00:19:53,679
device is

00:19:50,240 --> 00:19:55,919
seemingly asleep and off it allows us to

00:19:53,679 --> 00:19:57,039
grab information like if you had a news

00:19:55,919 --> 00:20:00,400
reader app

00:19:57,039 --> 00:20:04,400
like an rss feed app and it had a server

00:20:00,400 --> 00:20:06,320
component you could have the server

00:20:04,400 --> 00:20:08,159
tell the client there's content for you

00:20:06,320 --> 00:20:09,600
and then as soon as the user opens the

00:20:08,159 --> 00:20:11,760
application

00:20:09,600 --> 00:20:14,640
their news is available for them they

00:20:11,760 --> 00:20:16,720
don't need to wait for it to refresh

00:20:14,640 --> 00:20:19,280
so not only does this enable being able

00:20:16,720 --> 00:20:22,240
to do things and suspend it also enables

00:20:19,280 --> 00:20:25,679
apps to continue being refreshed even

00:20:22,240 --> 00:20:25,679
though they appear not to be running

00:20:25,840 --> 00:20:28,880
of course there are some cons to this

00:20:27,600 --> 00:20:32,640
model of course

00:20:28,880 --> 00:20:34,240
first off the actual um

00:20:32,640 --> 00:20:35,679
the actual push service itself is kind

00:20:34,240 --> 00:20:38,000
of hard to implement

00:20:35,679 --> 00:20:39,200
ubi ports already has a push service for

00:20:38,000 --> 00:20:43,200
ubuntu touch

00:20:39,200 --> 00:20:46,000
but it's based off of um some test code

00:20:43,200 --> 00:20:47,679
from canonical when they were developing

00:20:46,000 --> 00:20:50,640
ubuntu touch

00:20:47,679 --> 00:20:54,400
and it's not the huge big scalable

00:20:50,640 --> 00:20:54,400
solution that canonical originally had

00:20:54,559 --> 00:20:59,840
but it's also centralized whereas

00:20:57,600 --> 00:21:01,520
there are new technologies coming up

00:20:59,840 --> 00:21:04,640
like web push

00:21:01,520 --> 00:21:07,919
which enable decentralized push services

00:21:04,640 --> 00:21:09,440
where your client subscribes to your

00:21:07,919 --> 00:21:12,240
server

00:21:09,440 --> 00:21:12,720
and it tells app servers hey you should

00:21:12,240 --> 00:21:15,919
send

00:21:12,720 --> 00:21:17,840
notification content to my server

00:21:15,919 --> 00:21:18,320
whereas with a centralized system it's

00:21:17,840 --> 00:21:20,400
just

00:21:18,320 --> 00:21:21,919
there is one server everyone subscribes

00:21:20,400 --> 00:21:23,360
to that and if you don't like it well

00:21:21,919 --> 00:21:26,799
you can go away

00:21:23,360 --> 00:21:29,520
that's not ideal especially for

00:21:26,799 --> 00:21:31,200
use cases where maybe you don't have

00:21:29,520 --> 00:21:32,080
internet access maybe you're a company

00:21:31,200 --> 00:21:33,840
that is

00:21:32,080 --> 00:21:37,200
air-gapped on your network but you still

00:21:33,840 --> 00:21:37,200
want to provide these solutions

00:21:39,120 --> 00:21:43,440
i think web push is the way to go for

00:21:40,480 --> 00:21:46,400
this it is a w3c

00:21:43,440 --> 00:21:47,760
i think standard that is in progress and

00:21:46,400 --> 00:21:50,400
it's already implemented for

00:21:47,760 --> 00:21:51,360
firefox so we can take some of that

00:21:50,400 --> 00:21:54,640
implementation

00:21:51,360 --> 00:21:56,159
and reuse it of course with ubuntu touch

00:21:54,640 --> 00:21:58,159
we already have a solution for this

00:21:56,159 --> 00:21:59,760
so that's future stuff where we're going

00:21:58,159 --> 00:22:02,320
to be replacing that but

00:21:59,760 --> 00:22:04,080
i do plan on it happening because ubuntu

00:22:02,320 --> 00:22:08,880
push while it's wonderful

00:22:04,080 --> 00:22:08,880
um it's nearing its time

00:22:09,440 --> 00:22:14,400
also your app servers need to be

00:22:12,480 --> 00:22:15,360
centralized in this model you can't have

00:22:14,400 --> 00:22:17,840
apps that are

00:22:15,360 --> 00:22:19,679
only available on the client and have no

00:22:17,840 --> 00:22:21,520
server component

00:22:19,679 --> 00:22:22,720
i think this might be okay i think that

00:22:21,520 --> 00:22:25,360
it might be okay for

00:22:22,720 --> 00:22:27,600
open source projects to start having

00:22:25,360 --> 00:22:31,039
hosted services components that you can

00:22:27,600 --> 00:22:33,200
choose to run yourself that talk to

00:22:31,039 --> 00:22:34,720
maybe an applications or a push server

00:22:33,200 --> 00:22:40,320
that you run yourself or maybe

00:22:34,720 --> 00:22:43,120
one that someone else runs

00:22:40,320 --> 00:22:44,320
i think it wouldn't be bad for open

00:22:43,120 --> 00:22:46,720
source projects

00:22:44,320 --> 00:22:48,720
to run hosted components like that

00:22:46,720 --> 00:22:52,080
especially if we want to talk about

00:22:48,720 --> 00:22:54,559
open source projects maybe getting

00:22:52,080 --> 00:22:55,679
services revenue we just talked a little

00:22:54,559 --> 00:22:57,600
bit ago about

00:22:55,679 --> 00:22:59,280
increasing revenue to open source

00:22:57,600 --> 00:22:59,840
projects that could be a possible way is

00:22:59,280 --> 00:23:03,200
by

00:22:59,840 --> 00:23:06,960
having them be services organizations

00:23:03,200 --> 00:23:09,200
that um provide

00:23:06,960 --> 00:23:11,520
push services for your application but

00:23:09,200 --> 00:23:15,039
uh that's getting way off i'm sorry

00:23:11,520 --> 00:23:15,919
i need to move on at this point we can

00:23:15,039 --> 00:23:19,679
enable

00:23:15,919 --> 00:23:21,520
most if not well we can enable most

00:23:19,679 --> 00:23:23,280
use cases on mobile we can enable things

00:23:21,520 --> 00:23:24,559
like rss readers with services

00:23:23,280 --> 00:23:26,799
components we can enable

00:23:24,559 --> 00:23:28,559
voice over ip applications by having the

00:23:26,799 --> 00:23:30,480
voice over ip server tell us

00:23:28,559 --> 00:23:31,679
there's a call in coming and we can

00:23:30,480 --> 00:23:34,840
enable just

00:23:31,679 --> 00:23:36,480
getting notifications from telegram and

00:23:34,840 --> 00:23:38,720
stuff

00:23:36,480 --> 00:23:39,760
but there are some use cases where none

00:23:38,720 --> 00:23:43,039
of those

00:23:39,760 --> 00:23:45,919
really work so we move on

00:23:43,039 --> 00:23:46,720
to background tasks actually allowing

00:23:45,919 --> 00:23:48,880
application

00:23:46,720 --> 00:23:50,240
code to run in the background because up

00:23:48,880 --> 00:23:52,559
to this point we've usually

00:23:50,240 --> 00:23:53,440
not been running application code we've

00:23:52,559 --> 00:23:56,400
been running

00:23:53,440 --> 00:23:57,440
centralized daemon code on the device

00:23:56,400 --> 00:24:00,400
that then

00:23:57,440 --> 00:24:02,480
chooses to tell applications specific

00:24:00,400 --> 00:24:04,640
updates

00:24:02,480 --> 00:24:07,039
with background tasks we split common

00:24:04,640 --> 00:24:08,080
work that applications want to do in the

00:24:07,039 --> 00:24:09,440
background

00:24:08,080 --> 00:24:11,200
and we know that they want to do this

00:24:09,440 --> 00:24:14,559
because they do it in

00:24:11,200 --> 00:24:18,000
linux desktop applications and we allow

00:24:14,559 --> 00:24:19,919
applications to do this

00:24:18,000 --> 00:24:21,840
split it into we've split this kind of

00:24:19,919 --> 00:24:23,840
work into three main categories

00:24:21,840 --> 00:24:25,279
work that the user requested would

00:24:23,840 --> 00:24:26,799
happen right now

00:24:25,279 --> 00:24:28,880
as your application is transitioning to

00:24:26,799 --> 00:24:30,240
the background and then

00:24:28,880 --> 00:24:32,559
work that applications would want to

00:24:30,240 --> 00:24:35,360
happen sometime in the future

00:24:32,559 --> 00:24:36,000
it doesn't really matter and finally

00:24:35,360 --> 00:24:38,080
work that

00:24:36,000 --> 00:24:41,440
applications would want to have done at

00:24:38,080 --> 00:24:43,360
an exact time in the future

00:24:41,440 --> 00:24:45,360
it's worth noting as we go down that

00:24:43,360 --> 00:24:48,400
list the more flexible options

00:24:45,360 --> 00:24:50,400
give you worse battery life so if we're

00:24:48,400 --> 00:24:53,360
giving app developers more control over

00:24:50,400 --> 00:24:54,799
exactly when they run their tasks

00:24:53,360 --> 00:24:56,559
we need to be really careful about

00:24:54,799 --> 00:24:58,000
scheduling those otherwise we ruin

00:24:56,559 --> 00:24:59,600
battery life for the user

00:24:58,000 --> 00:25:00,720
and that's bad for both app developers

00:24:59,600 --> 00:25:02,480
because their users complain that

00:25:00,720 --> 00:25:04,159
they're getting bad battery life

00:25:02,480 --> 00:25:05,840
after they installed their app that's

00:25:04,159 --> 00:25:07,039
not fair and

00:25:05,840 --> 00:25:10,720
well it's bad for the system because

00:25:07,039 --> 00:25:10,720
they say the system has bad battery life

00:25:10,880 --> 00:25:15,679
so as much as we can get applications to

00:25:13,440 --> 00:25:17,039
use the services i'm talking about first

00:25:15,679 --> 00:25:19,120
rather than the ones i'm talking about

00:25:17,039 --> 00:25:20,799
last the better

00:25:19,120 --> 00:25:22,799
we start with background tasks that we

00:25:20,799 --> 00:25:25,919
want to happen now

00:25:22,799 --> 00:25:26,880
these are things like rendering a 3d

00:25:25,919 --> 00:25:28,480
scene in blender

00:25:26,880 --> 00:25:30,480
you kick off a render and then you get

00:25:28,480 --> 00:25:32,799
bored so you switch off your phone

00:25:30,480 --> 00:25:36,000
or you head over to the web browser and

00:25:32,799 --> 00:25:40,960
watch some funny cat videos

00:25:36,000 --> 00:25:43,120
or compiling software visual studio code

00:25:40,960 --> 00:25:44,640
or transcoding video before you upload

00:25:43,120 --> 00:25:46,000
it to chat service because someone just

00:25:44,640 --> 00:25:48,400
took a mean video of you and they want

00:25:46,000 --> 00:25:48,400
to show you

00:25:48,799 --> 00:25:52,240
on ios and android this is fully

00:25:50,559 --> 00:25:53,360
possible they both have this implemented

00:25:52,240 --> 00:25:55,120
and of course they have everything i

00:25:53,360 --> 00:25:56,880
talked about before implemented

00:25:55,120 --> 00:25:59,440
they give you a few minutes after you're

00:25:56,880 --> 00:26:01,039
in the foreground to finish your work

00:25:59,440 --> 00:26:03,200
and if you don't aren't able to finish

00:26:01,039 --> 00:26:05,520
your work in that time don't sweat it

00:26:03,200 --> 00:26:06,960
pause your work and then notify the user

00:26:05,520 --> 00:26:08,080
that you ran out of time and they need

00:26:06,960 --> 00:26:11,200
to come back to your app

00:26:08,080 --> 00:26:13,279
to resume android makes things a little

00:26:11,200 --> 00:26:15,120
bit more flexible because you can just

00:26:13,279 --> 00:26:16,320
notify the user that you are continuing

00:26:15,120 --> 00:26:19,039
to use more time

00:26:16,320 --> 00:26:20,480
whereas on ios you need to say please

00:26:19,039 --> 00:26:21,760
come back we didn't finish what you

00:26:20,480 --> 00:26:23,279
asked us to do

00:26:21,760 --> 00:26:25,760
just a bit of a difference of opinion

00:26:23,279 --> 00:26:27,520
between the two platforms there

00:26:25,760 --> 00:26:28,799
we move on to background tasks that you

00:26:27,520 --> 00:26:31,919
want to happen

00:26:28,799 --> 00:26:33,279
some nebulous time in the future

00:26:31,919 --> 00:26:35,440
these are really inflexible because

00:26:33,279 --> 00:26:36,320
basically you're telling mr god king

00:26:35,440 --> 00:26:38,400
system

00:26:36,320 --> 00:26:42,400
please do this thing i am requesting you

00:26:38,400 --> 00:26:42,400
do at some point in the future

00:26:42,559 --> 00:26:47,200
and then the system chooses to schedule

00:26:44,159 --> 00:26:49,039
that at some point that is useful to it

00:26:47,200 --> 00:26:50,640
to minimize wakeups to ensure that it's

00:26:49,039 --> 00:26:52,400
safe to use the data connection to make

00:26:50,640 --> 00:26:53,840
sure the user isn't present so that we

00:26:52,400 --> 00:26:56,960
don't ruin their experience of their

00:26:53,840 --> 00:26:56,960
foreground applications

00:26:57,120 --> 00:27:00,799
you would use this for things like

00:26:58,559 --> 00:27:03,679
cleaning up your database or

00:27:00,799 --> 00:27:05,520
refreshing app content like if you have

00:27:03,679 --> 00:27:06,240
an rss reader that is local on the

00:27:05,520 --> 00:27:07,600
device

00:27:06,240 --> 00:27:11,360
and you need to go out and check all

00:27:07,600 --> 00:27:14,000
these rss feeds you might use

00:27:11,360 --> 00:27:14,880
a task like this to do that because it

00:27:14,000 --> 00:27:16,640
doesn't

00:27:14,880 --> 00:27:18,960
really matter that the user gets their

00:27:16,640 --> 00:27:20,240
content immediately when it happens

00:27:18,960 --> 00:27:21,679
if they haven't requested push

00:27:20,240 --> 00:27:24,159
notifications it just matters that you

00:27:21,679 --> 00:27:25,840
don't take a long time to refresh

00:27:24,159 --> 00:27:28,080
when it's time for the user to open your

00:27:25,840 --> 00:27:32,080
app

00:27:28,080 --> 00:27:34,000
a good scheduler lets you do things like

00:27:32,080 --> 00:27:35,760
i only want these tasks to run when the

00:27:34,000 --> 00:27:39,919
device is on bat or on

00:27:35,760 --> 00:27:41,279
charging ios allows you to do this with

00:27:39,919 --> 00:27:43,200
background tasks

00:27:41,279 --> 00:27:45,039
and you have absolutely no control over

00:27:43,200 --> 00:27:47,039
when ios does these tasks for you

00:27:45,039 --> 00:27:49,360
you basically say i want to run this

00:27:47,039 --> 00:27:52,720
machine learning algorithm

00:27:49,360 --> 00:27:55,760
and the system says okay and it never

00:27:52,720 --> 00:27:57,360
says anything again until it's done

00:27:55,760 --> 00:27:59,360
android allows you a little bit more

00:27:57,360 --> 00:28:02,799
flexibility again with work manager

00:27:59,360 --> 00:28:04,320
and you can constrain your tasks to run

00:28:02,799 --> 00:28:08,080
when you're on battery when you're on

00:28:04,320 --> 00:28:08,080
wi-fi you have a lot of options there

00:28:09,120 --> 00:28:11,679
and then finally you have background

00:28:10,320 --> 00:28:12,399
tasks that you want to happen at an

00:28:11,679 --> 00:28:14,240
exact time

00:28:12,399 --> 00:28:16,000
later these are the most flexible but

00:28:14,240 --> 00:28:19,200
they give poor battery life

00:28:16,000 --> 00:28:21,760
you say every 15 minutes

00:28:19,200 --> 00:28:23,440
i would like to refresh email so that i

00:28:21,760 --> 00:28:24,080
can notify the user when they have new

00:28:23,440 --> 00:28:25,840
email

00:28:24,080 --> 00:28:27,440
and i don't have a server that i can use

00:28:25,840 --> 00:28:30,159
to notify the user when they have new

00:28:27,440 --> 00:28:32,320
email via push service

00:28:30,159 --> 00:28:33,520
on ios you can do this only if you are

00:28:32,320 --> 00:28:35,760
apple

00:28:33,520 --> 00:28:36,880
you have no other options but on android

00:28:35,760 --> 00:28:38,960
you have some options

00:28:36,880 --> 00:28:40,960
you can use work manager schedule tasks

00:28:38,960 --> 00:28:43,120
to get an approximate

00:28:40,960 --> 00:28:44,240
task completed this would be best for

00:28:43,120 --> 00:28:46,480
email because it's not

00:28:44,240 --> 00:28:48,880
essential that the user gets their email

00:28:46,480 --> 00:28:52,640
every five minutes exactly

00:28:48,880 --> 00:28:52,640
instead we can allow the system to

00:28:52,880 --> 00:28:56,159
schedule tasks as they work for example

00:28:54,720 --> 00:28:59,120
if you schedule something at

00:28:56,159 --> 00:29:00,880
101 you schedule something at 102 and

00:28:59,120 --> 00:29:02,480
you schedule something at 103

00:29:00,880 --> 00:29:04,320
well the system can just say well why

00:29:02,480 --> 00:29:07,039
don't we run all those things at 103 to

00:29:04,320 --> 00:29:07,039
save more power

00:29:07,120 --> 00:29:10,640
android has two options for this work

00:29:08,799 --> 00:29:13,039
manager schedule tasks are approximate

00:29:10,640 --> 00:29:15,440
and alarm manager you would use if you

00:29:13,039 --> 00:29:18,559
want an exact task in the future

00:29:15,440 --> 00:29:19,279
although with android 8 and up there's

00:29:18,559 --> 00:29:21,120
doze mode

00:29:19,279 --> 00:29:22,720
which actually makes your exact tasks

00:29:21,120 --> 00:29:25,039
run at some point in the future

00:29:22,720 --> 00:29:28,399
unless you say no really really this

00:29:25,039 --> 00:29:29,679
needs to happen at an exact time

00:29:28,399 --> 00:29:32,000
again these are only examples of

00:29:29,679 --> 00:29:33,919
implementation not exactly

00:29:32,000 --> 00:29:35,840
we don't need to file them exactly but

00:29:33,919 --> 00:29:37,279
given that both ios and android have 12

00:29:35,840 --> 00:29:40,559
years of experience on this i think we

00:29:37,279 --> 00:29:42,399
should take heed when

00:29:40,559 --> 00:29:44,000
literally everything else we have

00:29:42,399 --> 00:29:46,480
provided has failed

00:29:44,000 --> 00:29:47,120
we give applications the opportunity to

00:29:46,480 --> 00:29:50,240
make

00:29:47,120 --> 00:29:52,399
demons these are

00:29:50,240 --> 00:29:53,440
services that run all the time in the

00:29:52,399 --> 00:29:55,600
background

00:29:53,440 --> 00:29:57,279
these are really unsafe because they

00:29:55,600 --> 00:29:58,480
make it impossible for us to do

00:29:57,279 --> 00:30:01,600
aggressive power management

00:29:58,480 --> 00:30:01,600
because we might end up

00:30:02,240 --> 00:30:06,240
conflicting with what the app wants to

00:30:04,399 --> 00:30:08,320
do in the background

00:30:06,240 --> 00:30:10,080
so basically you just have to hope that

00:30:08,320 --> 00:30:12,799
the application developer

00:30:10,080 --> 00:30:15,600
made safe backgrounds or made a safe

00:30:12,799 --> 00:30:15,600
background service

00:30:16,000 --> 00:30:19,360
we have to look at the most common

00:30:17,520 --> 00:30:20,880
reasons why people would use these

00:30:19,360 --> 00:30:23,039
why developers would create apps with

00:30:20,880 --> 00:30:26,320
these and try to solve them

00:30:23,039 --> 00:30:28,640
for example it might be an issue of

00:30:26,320 --> 00:30:29,520
not being able to launch an app at the

00:30:28,640 --> 00:30:31,279
right time

00:30:29,520 --> 00:30:34,240
to respond to events that happen on the

00:30:31,279 --> 00:30:37,039
device for example if your next cloud

00:30:34,240 --> 00:30:39,360
or bacula and you want to back up a

00:30:37,039 --> 00:30:40,080
user's content exactly when they take

00:30:39,360 --> 00:30:43,520
pictures

00:30:40,080 --> 00:30:44,880
or modify stuff well then we might want

00:30:43,520 --> 00:30:47,120
a better content model

00:30:44,880 --> 00:30:48,399
where a saved file is able to notify

00:30:47,120 --> 00:30:50,320
multiple applications

00:30:48,399 --> 00:30:53,840
that there's new content and launch them

00:30:50,320 --> 00:30:55,600
so they don't need to run all the time

00:30:53,840 --> 00:30:57,200
however there will be some cases where

00:30:55,600 --> 00:31:00,399
there's just nothing we can do

00:30:57,200 --> 00:31:04,159
like decentralized and latency sensitive

00:31:00,399 --> 00:31:06,880
um applications like voice i p

00:31:04,159 --> 00:31:08,159
where you have 30 seconds to understand

00:31:06,880 --> 00:31:11,279
that there's a call coming in

00:31:08,159 --> 00:31:13,919
or you've missed it and you've failed

00:31:11,279 --> 00:31:15,600
um voiceover ip is really about the only

00:31:13,919 --> 00:31:18,159
thing i think of

00:31:15,600 --> 00:31:19,600
for these kinds of apps but there of our

00:31:18,159 --> 00:31:25,760
there are of course

00:31:19,600 --> 00:31:27,679
more because i am small brain sometimes

00:31:25,760 --> 00:31:28,960
and of course finally there are the

00:31:27,679 --> 00:31:32,320
applications that will

00:31:28,960 --> 00:31:32,880
expect incoming connections like an ssh

00:31:32,320 --> 00:31:36,080
server

00:31:32,880 --> 00:31:38,080
or a sync thing an instance

00:31:36,080 --> 00:31:39,440
where you can't go to sleep anytime

00:31:38,080 --> 00:31:42,559
because at any point

00:31:39,440 --> 00:31:46,080
anyone from anywhere could say i would

00:31:42,559 --> 00:31:48,960
like you to respond to me now

00:31:46,080 --> 00:31:50,799
and basically then we have to say well

00:31:48,960 --> 00:31:53,200
if your phone is a server it gets

00:31:50,799 --> 00:31:54,720
battery life like a server like 30

00:31:53,200 --> 00:31:57,440
seconds because it has a backup battery

00:31:54,720 --> 00:31:57,440
for the hard drives

00:31:58,399 --> 00:32:01,840
and um

00:32:02,559 --> 00:32:09,279
apologies lapse lapse of judgment there

00:32:06,640 --> 00:32:10,480
so to recap people want their computers

00:32:09,279 --> 00:32:12,720
to run their tasks

00:32:10,480 --> 00:32:14,240
forever but they also want good battery

00:32:12,720 --> 00:32:18,480
life and these two things

00:32:14,240 --> 00:32:20,240
are in constant conflict with each other

00:32:18,480 --> 00:32:22,159
so we need to think about some of the

00:32:20,240 --> 00:32:24,640
eternal truths of power management

00:32:22,159 --> 00:32:26,320
if we're idle we can say power but idle

00:32:24,640 --> 00:32:27,440
means there is absolutely nothing

00:32:26,320 --> 00:32:31,440
happening in the background

00:32:27,440 --> 00:32:34,960
ever and the state to go

00:32:31,440 --> 00:32:37,600
from idle to running uses more energy

00:32:34,960 --> 00:32:40,000
than going from running to busy so the

00:32:37,600 --> 00:32:43,200
more tasks we can schedule at once

00:32:40,000 --> 00:32:44,480
the better applications have trouble

00:32:43,200 --> 00:32:45,440
making that kind of thing happen

00:32:44,480 --> 00:32:48,240
themselves and

00:32:45,440 --> 00:32:49,760
we don't need to make services that like

00:32:48,240 --> 00:32:52,720
tell applications

00:32:49,760 --> 00:32:54,399
everyone else is running so we start by

00:32:52,720 --> 00:32:57,279
suspending them absolutely

00:32:54,399 --> 00:32:59,200
and then we help them to create the

00:32:57,279 --> 00:33:01,039
illusion of constant connectivity

00:32:59,200 --> 00:33:02,399
rather than genuine constant

00:33:01,039 --> 00:33:04,159
connectivity

00:33:02,399 --> 00:33:05,919
we start by suspending all applications

00:33:04,159 --> 00:33:07,120
and then we give app developers the

00:33:05,919 --> 00:33:08,640
tools they need

00:33:07,120 --> 00:33:10,640
to run in the background the way that

00:33:08,640 --> 00:33:11,519
their users expect so that they don't

00:33:10,640 --> 00:33:13,919
get the

00:33:11,519 --> 00:33:14,640
uh i wanted real linux on my mobile

00:33:13,919 --> 00:33:18,640
phone

00:33:14,640 --> 00:33:18,640
uh snark

00:33:19,679 --> 00:33:24,320
i want to do this together like i said

00:33:22,720 --> 00:33:26,159
ubuntu touch is probably going to go

00:33:24,320 --> 00:33:29,440
this way whether people

00:33:26,159 --> 00:33:31,360
um join us or not

00:33:29,440 --> 00:33:32,880
because this is these are the things

00:33:31,360 --> 00:33:36,159
that our users expect and these are the

00:33:32,880 --> 00:33:37,679
things that our app developers expect

00:33:36,159 --> 00:33:39,360
if you want to talk more about this with

00:33:37,679 --> 00:33:42,799
me you can find me at brickless

00:33:39,360 --> 00:33:43,679
dalton d-u-r dot s-t or go to dalton d-r

00:33:42,799 --> 00:33:46,000
dot s-t

00:33:43,679 --> 00:33:47,600
slash last 2020 where i have all the

00:33:46,000 --> 00:33:51,600
slides from this

00:33:47,600 --> 00:33:55,039
presentation hosted or you can join us

00:33:51,600 --> 00:33:56,799
at uh ubports go to forums.ueports.com

00:33:55,039 --> 00:33:58,559
open up a thread i'd love to talk about

00:33:56,799 --> 00:34:01,600
what i got wrong in this talk

00:33:58,559 --> 00:34:04,640
i'm at uni superbox over there or

00:34:01,600 --> 00:34:08,399
twitter at universal superbox

00:34:04,640 --> 00:34:10,000
on twitter again i

00:34:08,399 --> 00:34:11,440
i'm really passionate about this kind of

00:34:10,000 --> 00:34:13,119
thing about saving battery

00:34:11,440 --> 00:34:14,800
and i think that it doesn't only need to

00:34:13,119 --> 00:34:16,399
be something that happens on desktops i

00:34:14,800 --> 00:34:18,320
will take questions now

00:34:16,399 --> 00:34:19,520
or on mobile phones i think this can

00:34:18,320 --> 00:34:23,280
also be something we do

00:34:19,520 --> 00:34:26,480
on desktops to allow um

00:34:23,280 --> 00:34:28,079
more than just our mobile developers and

00:34:26,480 --> 00:34:28,840
our mobile users to get this kind of

00:34:28,079 --> 00:34:31,939
battery life

00:34:28,840 --> 00:34:31,939
[Music]

00:34:33,359 --> 00:34:37,280
excuse me okay i'll take some questions

00:34:36,720 --> 00:34:40,000
now

00:34:37,280 --> 00:34:42,240
okay thank you so much for your talk um

00:34:40,000 --> 00:34:42,960
it's actually really interesting and i

00:34:42,240 --> 00:34:46,560
know

00:34:42,960 --> 00:34:49,200
a lot of people also um had some so much

00:34:46,560 --> 00:34:50,960
conversation about it on the public chat

00:34:49,200 --> 00:34:53,440
and so we have a couple of questions

00:34:50,960 --> 00:34:55,919
here um the fosters um is there a

00:34:53,440 --> 00:34:57,440
standard for push notification

00:34:55,919 --> 00:34:59,920
whether you work for services like

00:34:57,440 --> 00:35:02,960
telegram or google

00:34:59,920 --> 00:35:04,640
so that is one particular problem there

00:35:02,960 --> 00:35:06,240
is kind of a standard for push

00:35:04,640 --> 00:35:07,760
notifications actually there are

00:35:06,240 --> 00:35:10,000
multiple

00:35:07,760 --> 00:35:11,440
um there is a web standard for push

00:35:10,000 --> 00:35:14,480
notifications called

00:35:11,440 --> 00:35:14,960
web push which is a app server push

00:35:14,480 --> 00:35:18,640
server

00:35:14,960 --> 00:35:19,680
and push client specification

00:35:18,640 --> 00:35:21,200
that's probably where we're going to

00:35:19,680 --> 00:35:22,960
look because that's where the most

00:35:21,200 --> 00:35:25,280
developers are going to be

00:35:22,960 --> 00:35:27,200
putting their effort into but they'll

00:35:25,280 --> 00:35:30,640
still need to implement

00:35:27,200 --> 00:35:34,240
um special cases for applications

00:35:30,640 --> 00:35:38,079
on mobile devices so they'd create

00:35:34,240 --> 00:35:40,480
a web push client for their

00:35:38,079 --> 00:35:41,200
web app they'd also need to make one for

00:35:40,480 --> 00:35:43,839
their

00:35:41,200 --> 00:35:46,000
ubuntu touch app or sorry their linux

00:35:43,839 --> 00:35:49,280
mobile app

00:35:46,000 --> 00:35:50,880
um thank you so much um so the second

00:35:49,280 --> 00:35:51,839
question is what are the battery

00:35:50,880 --> 00:35:55,200
implications

00:35:51,839 --> 00:35:58,880
of having potentially multiple wake ups

00:35:55,200 --> 00:36:02,240
for multiple decentralized push services

00:35:58,880 --> 00:36:05,040
passes the single wake up with grouped

00:36:02,240 --> 00:36:06,160
notification from a centralized push

00:36:05,040 --> 00:36:08,240
service

00:36:06,160 --> 00:36:09,680
that is an excellent question it is

00:36:08,240 --> 00:36:10,400
something slightly that you need to

00:36:09,680 --> 00:36:14,960
benchmark

00:36:10,400 --> 00:36:19,440
but generally on uh desktop linux now

00:36:14,960 --> 00:36:22,079
we have the case of multiple um

00:36:19,440 --> 00:36:23,680
different push services as opposed to

00:36:22,079 --> 00:36:26,560
one single push service

00:36:23,680 --> 00:36:27,839
so like i'm pretty sure though i can't

00:36:26,560 --> 00:36:30,560
look at the code

00:36:27,839 --> 00:36:32,560
discord is doing exactly this they open

00:36:30,560 --> 00:36:33,920
one websocket connection to their server

00:36:32,560 --> 00:36:35,920
which allows the server to tell the

00:36:33,920 --> 00:36:38,079
client you have new content instead of

00:36:35,920 --> 00:36:40,720
actually asking do you have new content

00:36:38,079 --> 00:36:43,119
for me every few seconds

00:36:40,720 --> 00:36:45,040
so the battery implications of having

00:36:43,119 --> 00:36:47,040
multiple decentralized push services

00:36:45,040 --> 00:36:49,040
are the implications of battery that we

00:36:47,040 --> 00:36:52,640
already have when you are running

00:36:49,040 --> 00:36:52,640
applications on a linux desktop

00:36:52,800 --> 00:36:57,040
okay um so we still have um somebody

00:36:55,440 --> 00:36:57,440
trying to type a new question so let's

00:36:57,040 --> 00:36:59,920
just

00:36:57,440 --> 00:37:00,720
take the third question does unborn to

00:36:59,920 --> 00:37:02,720
touch you

00:37:00,720 --> 00:37:05,280
see groups for managing resources or

00:37:02,720 --> 00:37:07,520
perhaps if not from the order talk at

00:37:05,280 --> 00:37:09,920
last it seems like it could

00:37:07,520 --> 00:37:10,720
help for management of um suspending

00:37:09,920 --> 00:37:14,079
apps

00:37:10,720 --> 00:37:16,480
ram cpu time and etc i forgot

00:37:14,079 --> 00:37:18,880
i forgot to mention this in the talk yes

00:37:16,480 --> 00:37:21,280
yes we do we suspend applications via c

00:37:18,880 --> 00:37:22,800
groups uh canonical started that with

00:37:21,280 --> 00:37:25,680
ubuntu app launch

00:37:22,800 --> 00:37:26,480
years before we're talking about doing

00:37:25,680 --> 00:37:28,320
it now

00:37:26,480 --> 00:37:30,400
but yes ubuntu touch already does that

00:37:28,320 --> 00:37:32,160
so apps can have multiple processes

00:37:30,400 --> 00:37:33,920
and we suspend all of them at once and

00:37:32,160 --> 00:37:36,160
resume all of them at once

00:37:33,920 --> 00:37:37,040
oh great thank you um so let's take the

00:37:36,160 --> 00:37:39,119
last question

00:37:37,040 --> 00:37:41,280
um so will this kind of power management

00:37:39,119 --> 00:37:42,800
system be available also for laptops and

00:37:41,280 --> 00:37:45,280
desktop linux

00:37:42,800 --> 00:37:47,520
boy i sure hope so i would love to have

00:37:45,280 --> 00:37:49,760
better idle battery life on my laptop

00:37:47,520 --> 00:37:50,960
um and basically that's what it comes

00:37:49,760 --> 00:37:52,960
down to is

00:37:50,960 --> 00:37:54,640
um if we have this kind of thing

00:37:52,960 --> 00:37:56,320
available on desktop we don't

00:37:54,640 --> 00:37:58,640
necessarily need to suspend

00:37:56,320 --> 00:38:00,079
all applications in the background but

00:37:58,640 --> 00:38:02,800
if they can better say

00:38:00,079 --> 00:38:05,359
i want to run work in the future like i

00:38:02,800 --> 00:38:07,680
want to update my application code

00:38:05,359 --> 00:38:08,640
at some point in the future when your

00:38:07,680 --> 00:38:11,280
laptop is

00:38:08,640 --> 00:38:13,200
sitting on your desk suspended it can

00:38:11,280 --> 00:38:15,119
receive that new application code like

00:38:13,200 --> 00:38:17,440
discord needing to update sometimes

00:38:15,119 --> 00:38:19,040
you don't need to wait on it or manually

00:38:17,440 --> 00:38:20,320
restart the application

00:38:19,040 --> 00:38:23,920
your laptop just does it while it's

00:38:20,320 --> 00:38:23,920

YouTube URL: https://www.youtube.com/watch?v=tt1U677h5kY


