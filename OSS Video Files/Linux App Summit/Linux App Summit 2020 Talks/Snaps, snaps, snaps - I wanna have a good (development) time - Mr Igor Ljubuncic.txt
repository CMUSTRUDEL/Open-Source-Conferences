Title: Snaps, snaps, snaps - I wanna have a good (development) time - Mr Igor Ljubuncic
Publication date: 2020-11-15
Playlist: Linux App Summit 2020 Talks
Description: 
	Snaps are confined, standalone Linux applications bundled with all the necessary dependencies to run independently. They are designed to simplify development and deployment of software, and make it easier for users to discover applications. Sounds like an enticing idea ... but where do you start?

This presentation unveils the boffinry of the snap ecosystem. It introduces and highlights the steps needed to package applications as snaps, including the underlying snap technology and mechanisms. The session will cover the building blocks used in the snapcraft.yaml file required to turn Linux applications into snaps, with overview of capabilities, confinement, interfaces, plugins, and more. By moving all the cruft behind the scenes, now all it takes is one simple recipe to build software with fun and ease.
Captions: 
	00:00:00,799 --> 00:00:05,680
so sweet uh

00:00:03,199 --> 00:00:07,680
hello good morning good afternoon good

00:00:05,680 --> 00:00:10,800
whatever time zone you're in

00:00:07,680 --> 00:00:13,120
uh my name is ingrid gorbachev uh

00:00:10,800 --> 00:00:14,719
i'm a developer advocate with canonical

00:00:13,120 --> 00:00:15,519
and i want to talk to you about snaps

00:00:14,719 --> 00:00:17,760
today

00:00:15,519 --> 00:00:19,119
i hope you have a you will have a good

00:00:17,760 --> 00:00:20,800
virtual experience

00:00:19,119 --> 00:00:22,240
typically it's not an easy thing to

00:00:20,800 --> 00:00:24,720
achieve interactiveness

00:00:22,240 --> 00:00:26,080
in a virtual session so in advance i'd

00:00:24,720 --> 00:00:27,359
like to say

00:00:26,080 --> 00:00:29,199
if you guys want to ask questions

00:00:27,359 --> 00:00:31,279
throughout type them down

00:00:29,199 --> 00:00:32,320
and whoever is the moderator if they can

00:00:31,279 --> 00:00:33,840
interrupt me and

00:00:32,320 --> 00:00:36,079
read the questions out loud that's

00:00:33,840 --> 00:00:37,920
perfectly fine i really don't mind we

00:00:36,079 --> 00:00:40,320
don't have to wait 45 minutes or

00:00:37,920 --> 00:00:41,120
whatever time we take to uh to ask

00:00:40,320 --> 00:00:44,239
questions uh

00:00:41,120 --> 00:00:48,320
at the end so interactiveness the more

00:00:44,239 --> 00:00:50,559
the merrier uh okay

00:00:48,320 --> 00:00:52,480
so a little bit about myself like i said

00:00:50,559 --> 00:00:54,559
i'm a developer advocate at canonical

00:00:52,480 --> 00:00:57,600
i've been working with canola

00:00:54,559 --> 00:01:00,160
uh two and a bit years

00:00:57,600 --> 00:01:01,680
i have been a linux guy all my life

00:01:00,160 --> 00:01:03,440
apart from the secret fact that i'm a

00:01:01,680 --> 00:01:05,840
physicist by vocation

00:01:03,440 --> 00:01:06,640
uh i read books and i'm a big petrol

00:01:05,840 --> 00:01:09,119
head

00:01:06,640 --> 00:01:10,320
as the image shows that's me driving

00:01:09,119 --> 00:01:13,360
around reno megan

00:01:10,320 --> 00:01:15,360
uh at spa belgium in the good old days

00:01:13,360 --> 00:01:19,360
when humans could ruin the planet

00:01:15,360 --> 00:01:20,560
free i have to say that i have to

00:01:19,360 --> 00:01:21,360
apologize in advance there are going to

00:01:20,560 --> 00:01:24,479
be a lot of

00:01:21,360 --> 00:01:26,159
cliche jokes and 80 song references that

00:01:24,479 --> 00:01:26,880
hopefully that will provide a

00:01:26,159 --> 00:01:28,880
measurement

00:01:26,880 --> 00:01:30,720
to for you to endure this session with

00:01:28,880 --> 00:01:33,280
joy

00:01:30,720 --> 00:01:35,360
so what are we going to talk about today

00:01:33,280 --> 00:01:38,799
uh i want to talk about snaps

00:01:35,360 --> 00:01:41,200
uh basically why snaps and

00:01:38,799 --> 00:01:42,159
what kind of a technical problem they

00:01:41,200 --> 00:01:45,280
solve

00:01:42,159 --> 00:01:46,159
i'm going to go into details around the

00:01:45,280 --> 00:01:48,640
architecture

00:01:46,159 --> 00:01:50,399
and the syntax basically there's a

00:01:48,640 --> 00:01:53,920
language and an ecosystem behind

00:01:50,399 --> 00:01:56,159
this technology i'm going to go briefly

00:01:53,920 --> 00:01:58,320
over how you publish the snapstore

00:01:56,159 --> 00:02:01,360
and as you can see the jokes are plenty

00:01:58,320 --> 00:02:03,439
already on the third slide

00:02:01,360 --> 00:02:05,940
and once again i have to say if you have

00:02:03,439 --> 00:02:07,200
any questions just go for it

00:02:05,940 --> 00:02:10,800
[Music]

00:02:07,200 --> 00:02:13,920
so what are snaps so snaps

00:02:10,800 --> 00:02:14,720
are uh on a philosophical level an

00:02:13,920 --> 00:02:17,760
attempt

00:02:14,720 --> 00:02:19,440
to resolve a big outstanding issue

00:02:17,760 --> 00:02:21,440
in the linux world which is the

00:02:19,440 --> 00:02:23,040
fragmentation and non-portability of

00:02:21,440 --> 00:02:25,360
software code

00:02:23,040 --> 00:02:26,239
on a technical level snaps are

00:02:25,360 --> 00:02:29,520
self-contained

00:02:26,239 --> 00:02:30,720
software packages basically you bundle

00:02:29,520 --> 00:02:33,040
all the bits and pieces that an

00:02:30,720 --> 00:02:36,080
application needs to run independently

00:02:33,040 --> 00:02:38,480
into a an archive and then

00:02:36,080 --> 00:02:40,560
you can put these freely around and use

00:02:38,480 --> 00:02:41,760
them on whichever linux distribution you

00:02:40,560 --> 00:02:43,760
have

00:02:41,760 --> 00:02:44,879
they're supposed to be simple and easy

00:02:43,760 --> 00:02:47,040
to publish

00:02:44,879 --> 00:02:48,160
and of course this is an ongoing process

00:02:47,040 --> 00:02:50,640
whereby we

00:02:48,160 --> 00:02:52,160
constantly engage development community

00:02:50,640 --> 00:02:54,560
try to learn as much as we can

00:02:52,160 --> 00:02:56,080
from from developers in their experience

00:02:54,560 --> 00:02:56,800
and then implement that into future

00:02:56,080 --> 00:02:59,200
versions of

00:02:56,800 --> 00:03:01,599
snap technology so that it's even easier

00:02:59,200 --> 00:03:04,720
and faster to publish snaps

00:03:01,599 --> 00:03:07,040
and one of the design feature is the

00:03:04,720 --> 00:03:08,000
to have safe and automatic updates

00:03:07,040 --> 00:03:10,080
something that is

00:03:08,000 --> 00:03:11,040
considered contentions are contentious

00:03:10,080 --> 00:03:13,200
on the desktop

00:03:11,040 --> 00:03:15,519
however uh something that has uh

00:03:13,200 --> 00:03:19,840
significant value and strategic impact

00:03:15,519 --> 00:03:19,840
in the iot world and the cloud space

00:03:20,879 --> 00:03:24,080
so just a quick question how so far so

00:03:23,519 --> 00:03:26,720
good

00:03:24,080 --> 00:03:28,239
the visuals the audio are you having fun

00:03:26,720 --> 00:03:33,840
are you having memories and flashbacks

00:03:28,239 --> 00:03:33,840
back to the 80s

00:03:34,799 --> 00:03:37,920
i see lots of people are okay it's fine

00:03:36,799 --> 00:03:41,599
cool so

00:03:37,920 --> 00:03:43,840
um let's talk about linux

00:03:41,599 --> 00:03:45,120
the classic linux you're not familiar

00:03:43,840 --> 00:03:48,560
with how linux works

00:03:45,120 --> 00:03:50,400
and to be able to package software and

00:03:48,560 --> 00:03:51,599
then distribute it on a classical linux

00:03:50,400 --> 00:03:53,200
distribution

00:03:51,599 --> 00:03:55,439
you need to have a good knowledge of

00:03:53,200 --> 00:03:56,720
linux internals and this also means

00:03:55,439 --> 00:03:58,720
understanding how different

00:03:56,720 --> 00:03:59,519
distributions are built and they're not

00:03:58,720 --> 00:04:01,120
identical

00:03:59,519 --> 00:04:03,040
how different packaging mechanisms and

00:04:01,120 --> 00:04:06,239
package managers work

00:04:03,040 --> 00:04:08,560
um this is also a non-trivial process

00:04:06,239 --> 00:04:09,599
and when you do roll out code and there

00:04:08,560 --> 00:04:11,920
are updates

00:04:09,599 --> 00:04:13,840
due to the nature of the application

00:04:11,920 --> 00:04:14,239
code you could end up in situations

00:04:13,840 --> 00:04:16,880
where

00:04:14,239 --> 00:04:18,479
updates uh do not complete or they

00:04:16,880 --> 00:04:21,280
complete partially

00:04:18,479 --> 00:04:22,240
or you end up in a weird limbo state

00:04:21,280 --> 00:04:24,960
where a

00:04:22,240 --> 00:04:26,400
an action wasn't fully committed and

00:04:24,960 --> 00:04:30,000
it's kind of a transitional

00:04:26,400 --> 00:04:31,360
limbo state um this presents

00:04:30,000 --> 00:04:33,600
okay you know what i'll ask you a

00:04:31,360 --> 00:04:34,080
question guys have you had a linux box

00:04:33,600 --> 00:04:37,440
go

00:04:34,080 --> 00:04:40,000
um go

00:04:37,440 --> 00:04:40,479
go work on you when you run an update

00:04:40,000 --> 00:04:41,759
basically

00:04:40,479 --> 00:04:43,360
update your system and then something

00:04:41,759 --> 00:04:45,040
doesn't work and i'm talking about

00:04:43,360 --> 00:04:48,639
application logic i'm talking about

00:04:45,040 --> 00:04:48,639
system breakages

00:04:48,800 --> 00:04:51,919
so i see that the microphone is over

00:04:50,720 --> 00:04:54,880
amplified i'll reduce

00:04:51,919 --> 00:04:57,840
i'll reduce the microphone volume is it

00:04:54,880 --> 00:04:57,840
any better now

00:04:58,880 --> 00:05:05,280
excellent thank you for that um

00:05:02,560 --> 00:05:06,479
so yes as jonathan says the package for

00:05:05,280 --> 00:05:09,120
soul solves everything

00:05:06,479 --> 00:05:10,400
thank you jonathan uh i think uh we can

00:05:09,120 --> 00:05:13,600
end the discussion

00:05:10,400 --> 00:05:15,919
early so

00:05:13,600 --> 00:05:16,639
i told you about a problem but then

00:05:15,919 --> 00:05:18,880
again

00:05:16,639 --> 00:05:19,759
why snaps i mean is this the solution to

00:05:18,880 --> 00:05:22,840
this problem

00:05:19,759 --> 00:05:25,759
uh i'd say that it is a solution

00:05:22,840 --> 00:05:27,039
and of course everyone would love to

00:05:25,759 --> 00:05:28,639
believe that what they do

00:05:27,039 --> 00:05:30,720
is the best and the most elegant thing

00:05:28,639 --> 00:05:32,960
around and but we

00:05:30,720 --> 00:05:33,919
generally believe that this approach can

00:05:32,960 --> 00:05:36,400
transform

00:05:33,919 --> 00:05:38,080
and advance linux from its current state

00:05:36,400 --> 00:05:40,880
of fragmentation

00:05:38,080 --> 00:05:41,199
and non-portability into something that

00:05:40,880 --> 00:05:45,759
is

00:05:41,199 --> 00:05:45,759
more transparent to the end user

00:05:46,479 --> 00:05:49,919
i'll do a little bit of promotional uh

00:05:49,120 --> 00:05:53,280
verbiage

00:05:49,919 --> 00:05:55,120
so feel free to um just ignore this part

00:05:53,280 --> 00:05:56,560
if you're not keen on promotional

00:05:55,120 --> 00:06:00,080
propaganda

00:05:56,560 --> 00:06:03,199
but basically um snaps are

00:06:00,080 --> 00:06:05,440
available to millions of users

00:06:03,199 --> 00:06:07,199
and it's not just ubuntu although you

00:06:05,440 --> 00:06:08,639
can you have snap support from version

00:06:07,199 --> 00:06:10,960
00:06:08,639 --> 00:06:12,479
uh snaps are available on 40 plus

00:06:10,960 --> 00:06:14,880
different linux distributions

00:06:12,479 --> 00:06:15,759
just to name a few arch linux manjaro

00:06:14,880 --> 00:06:19,280
fedora

00:06:15,759 --> 00:06:20,319
debian centos and so forth and in the

00:06:19,280 --> 00:06:22,400
snapstore

00:06:20,319 --> 00:06:24,560
you are welcome to host your code

00:06:22,400 --> 00:06:26,720
regardless of your licensing mechanism

00:06:24,560 --> 00:06:29,680
it can be closed source proprietary

00:06:26,720 --> 00:06:30,479
open source whatever whatever you fancy

00:06:29,680 --> 00:06:32,960
you can uh

00:06:30,479 --> 00:06:35,199
you can host it and distribute to your

00:06:32,960 --> 00:06:38,639
end users

00:06:35,199 --> 00:06:41,520
the idea is uh simplicity above all

00:06:38,639 --> 00:06:44,080
basically there's one snap uh per

00:06:41,520 --> 00:06:44,720
hardware architecture so let's say md64

00:06:44,080 --> 00:06:48,319
or

00:06:44,720 --> 00:06:51,520
arm hf and you distribute that one snap

00:06:48,319 --> 00:06:52,639
to all the supported systems that have

00:06:51,520 --> 00:06:54,240
snap support so

00:06:52,639 --> 00:06:56,000
you don't have to think about do i have

00:06:54,240 --> 00:06:58,400
to make custom changes for

00:06:56,000 --> 00:07:00,720
centos do i need to make custom changes

00:06:58,400 --> 00:07:02,560
for a specific version of manjaro

00:07:00,720 --> 00:07:04,800
or it will this work on an old version

00:07:02,560 --> 00:07:06,319
of ubuntu the idea is if it's supported

00:07:04,800 --> 00:07:07,440
it should run well and it should run

00:07:06,319 --> 00:07:09,120
consistently

00:07:07,440 --> 00:07:10,720
sometimes there could be pro there can

00:07:09,120 --> 00:07:13,039
be problems and we always

00:07:10,720 --> 00:07:14,080
strive to address them as as well as we

00:07:13,039 --> 00:07:16,160
can

00:07:14,080 --> 00:07:17,120
but we aim to achieve as much

00:07:16,160 --> 00:07:19,919
consistency

00:07:17,120 --> 00:07:20,960
and as few moving parts and that thus

00:07:19,919 --> 00:07:24,000
unknowns

00:07:20,960 --> 00:07:24,000
uh through snaps

00:07:24,160 --> 00:07:27,840
another benefit that developers can have

00:07:26,960 --> 00:07:30,080
is

00:07:27,840 --> 00:07:31,840
analytics when you create a developer

00:07:30,080 --> 00:07:34,479
account in the snapstore

00:07:31,840 --> 00:07:35,520
and you go through a different menus and

00:07:34,479 --> 00:07:37,520
options that you have there as a

00:07:35,520 --> 00:07:39,840
developer you will also find that for

00:07:37,520 --> 00:07:42,400
each individual snap that you publish

00:07:39,840 --> 00:07:44,080
you will also have an analytics page and

00:07:42,400 --> 00:07:46,560
on this page you will be able to

00:07:44,080 --> 00:07:47,520
see how your uh snap active usage is

00:07:46,560 --> 00:07:49,759
trending

00:07:47,520 --> 00:07:50,800
uh including breakdowns uh in terms of

00:07:49,759 --> 00:07:53,680
time version

00:07:50,800 --> 00:07:54,720
operating system and and and a few other

00:07:53,680 --> 00:07:57,039
qualifiers

00:07:54,720 --> 00:07:59,520
and then you can also correlate to

00:07:57,039 --> 00:08:02,720
perhaps social media engagement

00:07:59,520 --> 00:08:04,639
campaigns release of new versions or

00:08:02,720 --> 00:08:06,319
just any anything happening out there

00:08:04,639 --> 00:08:08,400
and it can also help you make

00:08:06,319 --> 00:08:12,240
more numbers driven decisions around

00:08:08,400 --> 00:08:14,560
your development

00:08:12,240 --> 00:08:15,599
you also have a full control of your

00:08:14,560 --> 00:08:18,400
update cycle

00:08:15,599 --> 00:08:20,000
uh basically as soon as you won't feel

00:08:18,400 --> 00:08:23,479
confident enough to publish

00:08:20,000 --> 00:08:26,720
uh an update you can and the updates are

00:08:23,479 --> 00:08:27,440
cryptographically signed which means

00:08:26,720 --> 00:08:30,319
that

00:08:27,440 --> 00:08:31,599
if you work with a snapstore or a sniper

00:08:30,319 --> 00:08:33,120
proxy

00:08:31,599 --> 00:08:35,440
you have a guarantee that what you're

00:08:33,120 --> 00:08:36,719
getting is a non-tempered code

00:08:35,440 --> 00:08:38,479
you also have a high level of

00:08:36,719 --> 00:08:40,560
granularity whereby

00:08:38,479 --> 00:08:42,880
you can differentiate how you distribute

00:08:40,560 --> 00:08:43,919
your code so you could also have for

00:08:42,880 --> 00:08:46,800
instance

00:08:43,919 --> 00:08:47,920
an edge version of your application then

00:08:46,800 --> 00:08:50,480
you can also have

00:08:47,920 --> 00:08:51,519
a candidate version or a stable version

00:08:50,480 --> 00:08:53,440
you can also have

00:08:51,519 --> 00:08:55,519
different tracks so that you support

00:08:53,440 --> 00:08:57,760
multiple versions in parallel

00:08:55,519 --> 00:09:00,000
and this gives you granularity and your

00:08:57,760 --> 00:09:02,560
users flexibility

00:09:00,000 --> 00:09:03,200
even if a system is potentially out of

00:09:02,560 --> 00:09:06,080
date

00:09:03,200 --> 00:09:06,720
you can still have snaps updating and

00:09:06,080 --> 00:09:09,040
providing

00:09:06,720 --> 00:09:10,399
users with functionality and security

00:09:09,040 --> 00:09:12,959
that they need

00:09:10,399 --> 00:09:15,839
and lastly as i mentioned previously you

00:09:12,959 --> 00:09:18,640
have automatic updates and by default

00:09:15,839 --> 00:09:20,160
the snap system service will check for

00:09:18,640 --> 00:09:22,480
updates four times a day

00:09:20,160 --> 00:09:24,640
as you can see by my lovely lovely joke

00:09:22,480 --> 00:09:26,800
at the bottom of the slide

00:09:24,640 --> 00:09:28,000
however you do have control over the

00:09:26,800 --> 00:09:30,800
update mechanism

00:09:28,000 --> 00:09:31,360
and you can manually set and defer

00:09:30,800 --> 00:09:34,000
updates

00:09:31,360 --> 00:09:35,200
up to 60 days so the four times a day

00:09:34,000 --> 00:09:38,080
can be as little as

00:09:35,200 --> 00:09:40,240
once every two months any questions so

00:09:38,080 --> 00:09:40,240
far

00:09:40,480 --> 00:09:44,160
any comments on the jokes again

00:09:48,800 --> 00:09:54,320
i see someone is typing hopefully for me

00:09:58,240 --> 00:10:01,920
okay while the typing is being done

00:09:59,839 --> 00:10:05,680
let's talk about how snaps work

00:10:01,920 --> 00:10:07,600
so snaps basically come in

00:10:05,680 --> 00:10:10,000
there are three plus one major

00:10:07,600 --> 00:10:12,320
components there's the snapd service

00:10:10,000 --> 00:10:13,519
which runs in the background and it is

00:10:12,320 --> 00:10:16,640
the management engine

00:10:13,519 --> 00:10:18,399
for all snaps snap related things then

00:10:16,640 --> 00:10:20,000
there's the user space component

00:10:18,399 --> 00:10:22,640
the snap commands so you use the snap

00:10:20,000 --> 00:10:25,440
command like snap install or snap

00:10:22,640 --> 00:10:26,720
snap remove snap search and so forth so

00:10:25,440 --> 00:10:29,279
these commands help you

00:10:26,720 --> 00:10:30,079
discover what you need and interface

00:10:29,279 --> 00:10:33,120
with the snap

00:10:30,079 --> 00:10:35,200
ecosystem there's the snap store as well

00:10:33,120 --> 00:10:36,480
which is the front and you have the

00:10:35,200 --> 00:10:39,920
web-based front-end

00:10:36,480 --> 00:10:41,920
but you can also use uh any application

00:10:39,920 --> 00:10:43,600
package manager the graphical package

00:10:41,920 --> 00:10:45,760
manager that supports

00:10:43,600 --> 00:10:46,720
snaps in the back-end for instance gnome

00:10:45,760 --> 00:10:49,839
software

00:10:46,720 --> 00:10:51,519
kd discover and and so forth and finally

00:10:49,839 --> 00:10:52,640
for developers there's the snapchat

00:10:51,519 --> 00:10:54,320
command line tool

00:10:52,640 --> 00:10:56,720
which you can use to build and publish

00:10:54,320 --> 00:10:56,720
snaps

00:10:58,000 --> 00:11:02,560
now don't get uh too excited this is

00:11:01,040 --> 00:11:05,760
probably not the most exciting

00:11:02,560 --> 00:11:06,880
uh diagram you've ever seen but

00:11:05,760 --> 00:11:10,560
basically this is

00:11:06,880 --> 00:11:13,279
just a diagram that shows how the snap

00:11:10,560 --> 00:11:14,079
components work you have the snap store

00:11:13,279 --> 00:11:16,000
which is

00:11:14,079 --> 00:11:18,000
the one store with the authoritative

00:11:16,000 --> 00:11:20,000
place where the code is

00:11:18,000 --> 00:11:21,600
hosted and from which you query

00:11:20,000 --> 00:11:23,680
information from

00:11:21,600 --> 00:11:25,440
there is the snapd service and the user

00:11:23,680 --> 00:11:29,200
space component and finally

00:11:25,440 --> 00:11:31,600
uh the snapcraft tool to to develop

00:11:29,200 --> 00:11:31,600
snaps

00:11:31,760 --> 00:11:35,440
so what snap what what can snapcraft do

00:11:34,880 --> 00:11:39,200
for you

00:11:35,440 --> 00:11:41,519
so um it builds snaps pure and simple

00:11:39,200 --> 00:11:42,320
and upon a successful completion of a

00:11:41,519 --> 00:11:44,720
build process

00:11:42,320 --> 00:11:46,079
you will have one or more snaps and when

00:11:44,720 --> 00:11:48,000
i say one or more

00:11:46,079 --> 00:11:50,560
you build a project but you can build it

00:11:48,000 --> 00:11:53,839
for multiple architectures

00:11:50,560 --> 00:11:56,800
a snap is a squash fest file system

00:11:53,839 --> 00:11:57,920
it's compressed if you follow the news

00:11:56,800 --> 00:12:00,240
lately you will have

00:11:57,920 --> 00:12:02,079
also heard that we recently did a change

00:12:00,240 --> 00:12:03,519
in in the compression we do

00:12:02,079 --> 00:12:05,839
to improve performance and start at

00:12:03,519 --> 00:12:08,000
times of different uh snaps

00:12:05,839 --> 00:12:09,279
so that's something that that could be

00:12:08,000 --> 00:12:11,440
potentially interesting for you to have

00:12:09,279 --> 00:12:14,160
a read after this session

00:12:11,440 --> 00:12:15,120
and inside that single file system you

00:12:14,160 --> 00:12:16,720
will find

00:12:15,120 --> 00:12:18,240
all of the application code and

00:12:16,720 --> 00:12:21,519
declarative metadata that the

00:12:18,240 --> 00:12:24,480
application requires to run

00:12:21,519 --> 00:12:25,120
and just finally the snaps have a dot

00:12:24,480 --> 00:12:29,200
snap

00:12:25,120 --> 00:12:31,519
extension so

00:12:29,200 --> 00:12:32,880
now we know more or less what the

00:12:31,519 --> 00:12:36,720
architecture looks like

00:12:32,880 --> 00:12:38,160
and it's time to to develop a snap just

00:12:36,720 --> 00:12:41,279
to actually write your first

00:12:38,160 --> 00:12:44,399
snap and so how you do that is you need

00:12:41,279 --> 00:12:47,200
to create a file called sniper.yaml

00:12:44,399 --> 00:12:48,880
it's in yaml syntax so you need some

00:12:47,200 --> 00:12:49,519
familiarity with the yaml language to

00:12:48,880 --> 00:12:52,800
understand

00:12:49,519 --> 00:12:56,320
declarative clauses in in the code

00:12:52,800 --> 00:12:58,079
and in a way if you come from the

00:12:56,320 --> 00:13:00,800
traditional linux world

00:12:58,079 --> 00:13:02,320
and you have built applications say

00:13:00,800 --> 00:13:04,000
let's say rpms

00:13:02,320 --> 00:13:06,240
then if you're familiar with the rpm

00:13:04,000 --> 00:13:07,920
spec files there is some

00:13:06,240 --> 00:13:09,600
commonality and logic in how that is

00:13:07,920 --> 00:13:13,440
done to how you build

00:13:09,600 --> 00:13:13,440
uh snaps with snapchat yaml

00:13:14,480 --> 00:13:19,680
here's an example uh so the actual code

00:13:18,000 --> 00:13:20,560
that i'm going to show you now is just

00:13:19,680 --> 00:13:23,200
representative

00:13:20,560 --> 00:13:24,079
and it's also a fairly trivial example i

00:13:23,200 --> 00:13:26,480
i will not go

00:13:24,079 --> 00:13:28,800
into far more detail example right now

00:13:26,480 --> 00:13:31,680
so please excuse me if if things

00:13:28,800 --> 00:13:33,120
feel oversimplified but for the sake of

00:13:31,680 --> 00:13:34,959
time and simplicity

00:13:33,120 --> 00:13:36,639
in in this session i'm just going to

00:13:34,959 --> 00:13:37,839
show you a very simple command line

00:13:36,639 --> 00:13:40,160
weather utility

00:13:37,839 --> 00:13:41,839
that all it does is gives you your uh

00:13:40,160 --> 00:13:44,240
forecast in your location

00:13:41,839 --> 00:13:45,120
when you run it from the command line as

00:13:44,240 --> 00:13:48,000
it happens it's

00:13:45,120 --> 00:13:49,440
it's a node application and it's one of

00:13:48,000 --> 00:13:52,560
the

00:13:49,440 --> 00:13:54,240
many different language uh languages

00:13:52,560 --> 00:13:56,320
and frameworks that we support in

00:13:54,240 --> 00:13:59,199
snapcraft which i'll touch upon

00:13:56,320 --> 00:14:00,639
briefly a bit later so a couple more

00:13:59,199 --> 00:14:02,399
seconds for you to have a look at

00:14:00,639 --> 00:14:04,320
what this cm looks like and now we'll

00:14:02,399 --> 00:14:05,199
and then we'll go into each section and

00:14:04,320 --> 00:14:07,839
explain

00:14:05,199 --> 00:14:10,880
the syntax and the meaning of different

00:14:07,839 --> 00:14:10,880
entries that you see here

00:14:14,560 --> 00:14:17,760
so the first part of the code is

00:14:16,160 --> 00:14:20,320
metadata basically

00:14:17,760 --> 00:14:21,199
identifiers through which uh your

00:14:20,320 --> 00:14:24,480
application

00:14:21,199 --> 00:14:26,160
gains uniqueness and discoverability so

00:14:24,480 --> 00:14:28,240
you give your application a name you

00:14:26,160 --> 00:14:28,839
give it a version the version can also

00:14:28,240 --> 00:14:31,760
be

00:14:28,839 --> 00:14:33,680
um

00:14:31,760 --> 00:14:35,440
a branch of your github project for

00:14:33,680 --> 00:14:37,680
instance or tied to

00:14:35,440 --> 00:14:38,880
any versioning control mechanisms you

00:14:37,680 --> 00:14:40,399
have to determine

00:14:38,880 --> 00:14:42,399
what the application is what the

00:14:40,399 --> 00:14:43,040
application version is then there's the

00:14:42,399 --> 00:14:45,920
summary

00:14:43,040 --> 00:14:46,560
basically a one-liner to help identify

00:14:45,920 --> 00:14:48,000
what your

00:14:46,560 --> 00:14:49,760
application does when someone does a

00:14:48,000 --> 00:14:52,240
search and a description

00:14:49,760 --> 00:14:54,720
uh which also supports markdown so you

00:14:52,240 --> 00:14:57,519
can have a rich description with bullets

00:14:54,720 --> 00:14:59,839
and italic and bold bolded text and so

00:14:57,519 --> 00:14:59,839
forth

00:15:01,360 --> 00:15:06,639
this is a table that shows you the rules

00:15:04,399 --> 00:15:08,160
for what you can or cannot do when you

00:15:06,639 --> 00:15:10,720
write your metadata

00:15:08,160 --> 00:15:11,279
basically it's all strings the version

00:15:10,720 --> 00:15:14,480
number

00:15:11,279 --> 00:15:16,480
is not a numerical qualifier that

00:15:14,480 --> 00:15:17,839
you have to abide by with so you can

00:15:16,480 --> 00:15:20,160
have anything for your version

00:15:17,839 --> 00:15:21,600
as long as it makes sense to you and and

00:15:20,160 --> 00:15:24,800
your users

00:15:21,600 --> 00:15:25,519
and there are also some limitations on

00:15:24,800 --> 00:15:29,360
the length

00:15:25,519 --> 00:15:31,040
and size of of the fields so

00:15:29,360 --> 00:15:33,199
yeah we're just warming up so let's look

00:15:31,040 --> 00:15:36,000
at the more interesting things

00:15:33,199 --> 00:15:37,360
the second part which we'll touch upon

00:15:36,000 --> 00:15:40,000
briefly

00:15:37,360 --> 00:15:40,480
very soon again is the confinement and

00:15:40,000 --> 00:15:43,199
this is

00:15:40,480 --> 00:15:44,480
a novel concept for people coming from

00:15:43,199 --> 00:15:46,720
traditional linux because

00:15:44,480 --> 00:15:48,480
in if you have a regular linux

00:15:46,720 --> 00:15:50,880
application installed in your system

00:15:48,480 --> 00:15:52,399
technically it's unbounded basically it

00:15:50,880 --> 00:15:54,399
can touch pretty much any part of the

00:15:52,399 --> 00:15:57,920
operating system within the privileges

00:15:54,399 --> 00:16:01,040
that that user has and

00:15:57,920 --> 00:16:03,200
um with snaps things are different

00:16:01,040 --> 00:16:04,320
snaps were originally

00:16:03,200 --> 00:16:06,800
[Music]

00:16:04,320 --> 00:16:08,639
our continuation of the clicks format

00:16:06,800 --> 00:16:11,120
that was used for ubuntu phone

00:16:08,639 --> 00:16:13,160
and with the phone the there was a

00:16:11,120 --> 00:16:15,360
strong emphasis on isolation and

00:16:13,160 --> 00:16:18,000
compartmentalization of applications

00:16:15,360 --> 00:16:20,000
for security reasons and this was uh

00:16:18,000 --> 00:16:22,720
transitioned also into snaps

00:16:20,000 --> 00:16:24,320
and the idea is that each snap lives in

00:16:22,720 --> 00:16:26,639
its own individual world

00:16:24,320 --> 00:16:27,839
and cannot easily interact with other

00:16:26,639 --> 00:16:29,839
applications

00:16:27,839 --> 00:16:31,360
of course that would make applications

00:16:29,839 --> 00:16:33,600
useless if they couldn't do anything

00:16:31,360 --> 00:16:37,360
inside the boundary inside which they

00:16:33,600 --> 00:16:39,040
exist so there's a granular mechanism

00:16:37,360 --> 00:16:41,040
which we call interfaces

00:16:39,040 --> 00:16:42,399
which allows you to punch uh very

00:16:41,040 --> 00:16:44,160
controlled holes

00:16:42,399 --> 00:16:45,680
in the snap confinement and then

00:16:44,160 --> 00:16:48,800
interface with different system

00:16:45,680 --> 00:16:51,440
resources for instance

00:16:48,800 --> 00:16:53,519
an application may need to uh be able to

00:16:51,440 --> 00:16:55,600
access files in home directory

00:16:53,519 --> 00:16:56,560
or an application may need network

00:16:55,600 --> 00:16:59,759
access

00:16:56,560 --> 00:17:04,799
or may need access to usb devices

00:16:59,759 --> 00:17:07,120
um opengl and so audio and so forth

00:17:04,799 --> 00:17:10,079
i see that there is a question about the

00:17:07,120 --> 00:17:12,319
centralized distribution of snaps

00:17:10,079 --> 00:17:13,919
uh this is a question that i will not

00:17:12,319 --> 00:17:16,640
address right now

00:17:13,919 --> 00:17:18,720
apologies for that i'm not deflecting uh

00:17:16,640 --> 00:17:20,559
it's a more complicated topic that i

00:17:18,720 --> 00:17:24,880
will refer you to

00:17:20,559 --> 00:17:27,600
we have an extensive series of q a's

00:17:24,880 --> 00:17:29,120
and topics that we're addressing and

00:17:27,600 --> 00:17:31,679
discussing with our community

00:17:29,120 --> 00:17:33,600
on our website and one of the questions

00:17:31,679 --> 00:17:34,799
is around this so i'll refer you to a

00:17:33,600 --> 00:17:36,880
more authoritative

00:17:34,799 --> 00:17:39,760
reply with far more details than i can

00:17:36,880 --> 00:17:39,760
give in this session

00:17:40,080 --> 00:17:43,840
so confinement level there are basically

00:17:42,080 --> 00:17:46,880
three levels there is strict

00:17:43,840 --> 00:17:50,000
dev mode and classic strict

00:17:46,880 --> 00:17:53,120
is the most well the strictest level

00:17:50,000 --> 00:17:55,280
that a snap can have and by default uh

00:17:53,120 --> 00:17:56,880
snaps that are strictly confined with no

00:17:55,280 --> 00:17:58,559
interfaces defined

00:17:56,880 --> 00:18:00,799
can't really do much they can just

00:17:58,559 --> 00:18:04,480
basically exist as code in

00:18:00,799 --> 00:18:06,320
in memory and that's very useless

00:18:04,480 --> 00:18:07,679
so you do need to provide overrides with

00:18:06,320 --> 00:18:10,720
interfaces

00:18:07,679 --> 00:18:13,280
dev mode is basically strict

00:18:10,720 --> 00:18:14,960
with soft errors and warnings rather

00:18:13,280 --> 00:18:16,640
than hard errors and warnings

00:18:14,960 --> 00:18:18,400
so if you're developing an application

00:18:16,640 --> 00:18:19,840
and you would like to figure out

00:18:18,400 --> 00:18:22,320
which parts of the system it wants to

00:18:19,840 --> 00:18:24,480
touch then you use that mode

00:18:22,320 --> 00:18:25,360
you get all the errors but without hard

00:18:24,480 --> 00:18:27,280
failures

00:18:25,360 --> 00:18:30,320
and then you can provide the granular

00:18:27,280 --> 00:18:33,360
interface overrides as you need

00:18:30,320 --> 00:18:34,640
finally for applications that cannot

00:18:33,360 --> 00:18:36,720
immediately be

00:18:34,640 --> 00:18:38,240
confined to strict there is a classic

00:18:36,720 --> 00:18:40,720
confinement method

00:18:38,240 --> 00:18:42,559
which we discourage because it basically

00:18:40,720 --> 00:18:44,640
gives you system level access

00:18:42,559 --> 00:18:46,640
like any traditional application that

00:18:44,640 --> 00:18:49,280
means that you can break your system

00:18:46,640 --> 00:18:51,440
you can break your snap by uh running

00:18:49,280 --> 00:18:54,640
updates on the system and so forth

00:18:51,440 --> 00:18:56,320
and it's really a stop gap measure

00:18:54,640 --> 00:18:57,679
and you can't just publish a snap

00:18:56,320 --> 00:18:59,360
manually

00:18:57,679 --> 00:19:01,120
automatically it has to go through

00:18:59,360 --> 00:19:03,039
security review and so forth

00:19:01,120 --> 00:19:04,799
so the main idea is for you to think

00:19:03,039 --> 00:19:07,440
about dev mode and strict

00:19:04,799 --> 00:19:08,480
and do use an extensive range of

00:19:07,440 --> 00:19:11,840
interfaces

00:19:08,480 --> 00:19:11,840
to get the functionality you need

00:19:12,160 --> 00:19:15,919
so our weather application yes you've

00:19:14,559 --> 00:19:18,720
got another question

00:19:15,919 --> 00:19:20,320
yes and it plans to add runtime

00:19:18,720 --> 00:19:22,400
permissions to snaps

00:19:20,320 --> 00:19:24,720
something like android's runtime

00:19:22,400 --> 00:19:26,160
permission for camera access microphone

00:19:24,720 --> 00:19:29,440
access file system access

00:19:26,160 --> 00:19:30,160
etc if i understand the question

00:19:29,440 --> 00:19:33,280
correctly

00:19:30,160 --> 00:19:33,600
the idea is then uh for instance you

00:19:33,280 --> 00:19:36,320
need

00:19:33,600 --> 00:19:37,039
webcam but then only at runtime you

00:19:36,320 --> 00:19:39,360
allow yes

00:19:37,039 --> 00:19:41,840
no rather than to have it predefined

00:19:39,360 --> 00:19:41,840
before

00:19:42,320 --> 00:19:47,440
is is that the meaning of the question

00:19:45,280 --> 00:19:49,520
basically that

00:19:47,440 --> 00:19:53,840
you have some kind of a visual prompt by

00:19:49,520 --> 00:19:53,840
which you allow deny in a ui

00:20:01,840 --> 00:20:08,240
see the oscar writes more

00:20:05,360 --> 00:20:09,600
uh yes something like i wish okay so it

00:20:08,240 --> 00:20:11,760
is doable today

00:20:09,600 --> 00:20:12,799
however it's not doable visually in

00:20:11,760 --> 00:20:14,960
terms of ui

00:20:12,799 --> 00:20:16,960
it's doable on the command line so you

00:20:14,960 --> 00:20:19,360
can uh install a snap

00:20:16,960 --> 00:20:21,120
you can before you run it check what

00:20:19,360 --> 00:20:23,679
interfaces it has defined

00:20:21,120 --> 00:20:25,360
and which ones are connected so to speak

00:20:23,679 --> 00:20:26,880
and then you can manually use snap

00:20:25,360 --> 00:20:28,640
connect or disconnect

00:20:26,880 --> 00:20:30,159
to connect to disconnect specific

00:20:28,640 --> 00:20:32,840
interfaces so for instance

00:20:30,159 --> 00:20:34,640
you install a snap which you don't fully

00:20:32,840 --> 00:20:37,760
trust and you say

00:20:34,640 --> 00:20:40,559
okay i'll snap disconnect its network

00:20:37,760 --> 00:20:42,080
see what it does kind of figure out if

00:20:40,559 --> 00:20:43,360
it's an application you like

00:20:42,080 --> 00:20:45,760
and then if you like you allow the

00:20:43,360 --> 00:20:46,559
network or you can say snap disconnect

00:20:45,760 --> 00:20:48,240
camera

00:20:46,559 --> 00:20:50,320
and continue using that application

00:20:48,240 --> 00:20:52,559
without it being able to access

00:20:50,320 --> 00:20:54,480
the camera now the thing is if the

00:20:52,559 --> 00:20:55,360
application logic is hard-coded to

00:20:54,480 --> 00:20:58,400
expect

00:20:55,360 --> 00:21:01,840
certain privileges and they're denied

00:20:58,400 --> 00:21:02,799
you may get unexpected errors so you can

00:21:01,840 --> 00:21:06,480
at runtime

00:21:02,799 --> 00:21:08,000
deny snap access to specific resources

00:21:06,480 --> 00:21:09,919
that the snap needs

00:21:08,000 --> 00:21:11,360
but be aware that the application may

00:21:09,919 --> 00:21:13,120
not handle it gracefully it really

00:21:11,360 --> 00:21:17,840
depends on how the application

00:21:13,120 --> 00:21:17,840
application is coded

00:21:24,799 --> 00:21:29,760
as well i think they wonder if they can

00:21:26,559 --> 00:21:31,120
do it with xdg desktop portals

00:21:29,760 --> 00:21:33,440
so again please i didn't hear well the

00:21:31,120 --> 00:21:35,840
question you oh sorry

00:21:33,440 --> 00:21:36,640
isn't there was a com another comment

00:21:35,840 --> 00:21:40,240
isn't this

00:21:36,640 --> 00:21:42,240
sdg desktop portals which snap supports

00:21:40,240 --> 00:21:45,120
as well

00:21:42,240 --> 00:21:46,240
that is one of the things but it's not

00:21:45,120 --> 00:21:48,000
everything because

00:21:46,240 --> 00:21:50,640
you need to really look at how long the

00:21:48,000 --> 00:21:51,120
list of of interfaces is and they really

00:21:50,640 --> 00:21:53,440
cover

00:21:51,120 --> 00:21:55,360
everything they also include things like

00:21:53,440 --> 00:21:58,000
uh process monitoring

00:21:55,360 --> 00:21:59,520
uh mount observe so you can see whether

00:21:58,000 --> 00:22:00,720
so you can cross file system mount

00:21:59,520 --> 00:22:04,080
points and see

00:22:00,720 --> 00:22:06,960
file sizes or mount uh file systems uh

00:22:04,080 --> 00:22:08,640
there are things like uh personal files

00:22:06,960 --> 00:22:09,919
being able to access hidden files in

00:22:08,640 --> 00:22:12,159
your home directory

00:22:09,919 --> 00:22:13,600
uh there's d bus and so forth so it's it

00:22:12,159 --> 00:22:16,080
goes

00:22:13,600 --> 00:22:18,159
much more than just accessing very

00:22:16,080 --> 00:22:20,320
specific things in the user session

00:22:18,159 --> 00:22:22,000
uh and the idea is basically that we

00:22:20,320 --> 00:22:23,200
provide this so that people can have

00:22:22,000 --> 00:22:25,200
strict confinement

00:22:23,200 --> 00:22:26,320
and very granular control rather than

00:22:25,200 --> 00:22:29,280
defaulting to

00:22:26,320 --> 00:22:30,159
let's say classic because it doesn't uh

00:22:29,280 --> 00:22:32,960
doesn't give them

00:22:30,159 --> 00:22:32,960
everything they need

00:22:33,440 --> 00:22:37,600
um i'll continue if there are any other

00:22:36,720 --> 00:22:41,039
questions

00:22:37,600 --> 00:22:43,600
absolutely feel free to ask so

00:22:41,039 --> 00:22:45,600
how the application isolation works

00:22:43,600 --> 00:22:47,840
astounding graphics again

00:22:45,600 --> 00:22:49,280
uh basically you have the read-only code

00:22:47,840 --> 00:22:51,679
which is the snap code

00:22:49,280 --> 00:22:52,320
and it cannot be changed but then to

00:22:51,679 --> 00:22:54,880
make

00:22:52,320 --> 00:22:56,960
the application useful over multiple

00:22:54,880 --> 00:23:00,480
sessions there's also a

00:22:56,960 --> 00:23:02,559
an app specific writeable area and

00:23:00,480 --> 00:23:03,520
there are well there are multiple

00:23:02,559 --> 00:23:05,840
writable areas

00:23:03,520 --> 00:23:06,880
including areas that can be ported and

00:23:05,840 --> 00:23:09,679
used across

00:23:06,880 --> 00:23:11,200
multiple snap updates or snap versions

00:23:09,679 --> 00:23:13,760
if you will

00:23:11,200 --> 00:23:15,679
there's confinement confinement is done

00:23:13,760 --> 00:23:16,480
through multiple mechanisms there's up

00:23:15,679 --> 00:23:19,520
armor

00:23:16,480 --> 00:23:21,679
there's c groups second so forth

00:23:19,520 --> 00:23:24,000
of course on other distributions in some

00:23:21,679 --> 00:23:25,600
cases some of the confinement mechanisms

00:23:24,000 --> 00:23:27,919
may not necessarily work

00:23:25,600 --> 00:23:29,520
because they don't exist or are not

00:23:27,919 --> 00:23:31,600
supported in those distributions

00:23:29,520 --> 00:23:32,880
so you will have partial confinement so

00:23:31,600 --> 00:23:35,280
you have only some

00:23:32,880 --> 00:23:36,640
levels of security rather than the whole

00:23:35,280 --> 00:23:40,799
gamut that

00:23:36,640 --> 00:23:42,799
is designed in in in the snap ecosystem

00:23:40,799 --> 00:23:43,919
and then you have the core snap

00:23:42,799 --> 00:23:47,440
basically the

00:23:43,919 --> 00:23:49,600
the um the heart of

00:23:47,440 --> 00:23:50,559
of the snap functionality behind the

00:23:49,600 --> 00:23:53,679
scenes

00:23:50,559 --> 00:23:56,240
uh upon which the snaps rely and

00:23:53,679 --> 00:23:57,760
use and we'll touch that in in a second

00:23:56,240 --> 00:23:59,919
and

00:23:57,760 --> 00:24:01,520
so you have the application code running

00:23:59,919 --> 00:24:02,559
you have the confinement and then you

00:24:01,520 --> 00:24:05,760
have the core snap

00:24:02,559 --> 00:24:08,799
to provide basically a file system

00:24:05,760 --> 00:24:10,240
for snaps to run and and exist on on a

00:24:08,799 --> 00:24:13,679
host

00:24:10,240 --> 00:24:15,360
so a bit more about the base like i said

00:24:13,679 --> 00:24:17,200
uh snaps are confined so you didn't

00:24:15,360 --> 00:24:19,600
really see the real files file system

00:24:17,200 --> 00:24:20,720
but they still rely on certain elements

00:24:19,600 --> 00:24:24,080
certain directories

00:24:20,720 --> 00:24:27,520
and libraries to exist to be able to run

00:24:24,080 --> 00:24:28,000
so what we have in in the snap ecosystem

00:24:27,520 --> 00:24:31,360
is

00:24:28,000 --> 00:24:32,240
uh a base basically a set a special kind

00:24:31,360 --> 00:24:33,919
of snap

00:24:32,240 --> 00:24:35,360
with a minimal set of libraries

00:24:33,919 --> 00:24:36,720
sometimes a little bit more than a

00:24:35,360 --> 00:24:38,880
minimal set of libraries

00:24:36,720 --> 00:24:39,760
and additional assets which are required

00:24:38,880 --> 00:24:42,720
to provide

00:24:39,760 --> 00:24:43,440
consistent runtime experience for snacks

00:24:42,720 --> 00:24:45,760
and

00:24:43,440 --> 00:24:46,720
they are usually aligned to different

00:24:45,760 --> 00:24:49,200
versions of

00:24:46,720 --> 00:24:50,080
ubuntu and now this can sound a little

00:24:49,200 --> 00:24:53,200
bit confusing

00:24:50,080 --> 00:24:55,200
but if you build your

00:24:53,200 --> 00:24:56,400
snap say against core 18 which would be

00:24:55,200 --> 00:24:57,919
00:24:56,400 --> 00:25:00,400
that doesn't mean that if you run on

00:24:57,919 --> 00:25:02,000
fedora that you're running on

00:25:00,400 --> 00:25:03,760
that doesn't that doesn't mean you need

00:25:02,000 --> 00:25:05,440
a fedora base

00:25:03,760 --> 00:25:07,919
inside the snap you'll still get all the

00:25:05,440 --> 00:25:10,880
libraries from the ubuntu core

00:25:07,919 --> 00:25:13,200
18 and the snapd service on fedora will

00:25:10,880 --> 00:25:16,000
that will do the necessary translations

00:25:13,200 --> 00:25:17,600
and the necessary uh abstractions to

00:25:16,000 --> 00:25:20,720
make sure that the snap runs

00:25:17,600 --> 00:25:23,200
consistently so when you build your snap

00:25:20,720 --> 00:25:24,000
you can decide on a base that basically

00:25:23,200 --> 00:25:26,880
defines

00:25:24,000 --> 00:25:28,000
what libraries and packages you have and

00:25:26,880 --> 00:25:30,720
what you can use at your

00:25:28,000 --> 00:25:32,480
uh during development time and there are

00:25:30,720 --> 00:25:33,760
and of course if this is not sufficient

00:25:32,480 --> 00:25:34,799
for you and you have different

00:25:33,760 --> 00:25:39,360
requirements you

00:25:34,799 --> 00:25:39,360
actually will write your own base

00:25:39,919 --> 00:25:44,880
now the build definition there are two

00:25:41,760 --> 00:25:47,840
parts yes please i hear a question

00:25:44,880 --> 00:25:49,120
you got a question slash comment there's

00:25:47,840 --> 00:25:51,679
an issue with slow

00:25:49,120 --> 00:25:52,960
snap run times due to compression is it

00:25:51,679 --> 00:25:56,080
possible to disable

00:25:52,960 --> 00:25:59,279
compression completely

00:25:56,080 --> 00:26:02,080
okay so two two answers to that

00:25:59,279 --> 00:26:04,080
one there we would like to believe that

00:26:02,080 --> 00:26:05,679
there are no more problems with it

00:26:04,080 --> 00:26:08,159
and if there are please please let us

00:26:05,679 --> 00:26:10,000
know go to the forum or file a bug

00:26:08,159 --> 00:26:12,559
we take this things seriously we have a

00:26:10,000 --> 00:26:13,440
whole uh series of articles written

00:26:12,559 --> 00:26:15,360
recently

00:26:13,440 --> 00:26:16,640
around compression improvements

00:26:15,360 --> 00:26:19,679
troubleshooting

00:26:16,640 --> 00:26:21,520
uh performance optimizations with uh

00:26:19,679 --> 00:26:22,720
hot startups called startups restaurant

00:26:21,520 --> 00:26:24,240
startups everything

00:26:22,720 --> 00:26:25,919
so we would like to believe that we have

00:26:24,240 --> 00:26:28,000
improved things considerably

00:26:25,919 --> 00:26:29,360
that said it is possible that there are

00:26:28,000 --> 00:26:32,159
issues and it is

00:26:29,360 --> 00:26:34,480
possible that you may want to use no

00:26:32,159 --> 00:26:36,480
compression whatsoever

00:26:34,480 --> 00:26:37,600
i don't have an immediate answer whether

00:26:36,480 --> 00:26:39,840
the store team

00:26:37,600 --> 00:26:41,520
or the security team will accept that as

00:26:39,840 --> 00:26:45,360
a valid option

00:26:41,520 --> 00:26:46,240
but i please do um start a thread on our

00:26:45,360 --> 00:26:48,559
forum perhaps

00:26:46,240 --> 00:26:49,919
and we'll see where where we go with

00:26:48,559 --> 00:26:53,039
that

00:26:49,919 --> 00:26:54,640
then you have a tricky question

00:26:53,039 --> 00:26:56,320
one second before a tricky question we

00:26:54,640 --> 00:26:59,120
also have uh ken

00:26:56,320 --> 00:27:00,240
uh from the desktop pin here uh a fellow

00:26:59,120 --> 00:27:02,000
canonical

00:27:00,240 --> 00:27:03,360
and he has just written that lzdo is

00:27:02,000 --> 00:27:05,120
practically no compression

00:27:03,360 --> 00:27:06,799
ken is the man basically he knows

00:27:05,120 --> 00:27:08,159
everything snap and desktop related as

00:27:06,799 --> 00:27:09,360
well so if you have any questions that

00:27:08,159 --> 00:27:10,880
you feel i'm not giving you a

00:27:09,360 --> 00:27:13,760
sufficiently good answer

00:27:10,880 --> 00:27:15,679
you can also uh ask ken i'll smoke neo

00:27:13,760 --> 00:27:18,080
king by the way the question is can flat

00:27:15,679 --> 00:27:18,840
pack and snap merge efforts and become

00:27:18,080 --> 00:27:22,000
one

00:27:18,840 --> 00:27:23,679
thing uh

00:27:22,000 --> 00:27:25,679
from a physical perspective if you look

00:27:23,679 --> 00:27:27,840
at the second law of thermodynamics

00:27:25,679 --> 00:27:30,480
there's nothing that prevents any two uh

00:27:27,840 --> 00:27:33,440
open source linux projects from working

00:27:30,480 --> 00:27:34,559
cooperating whether is that whether it

00:27:33,440 --> 00:27:36,799
if what is that

00:27:34,559 --> 00:27:37,840
that's doable on a practical level right

00:27:36,799 --> 00:27:40,720
now

00:27:37,840 --> 00:27:42,640
i can't say i mean it would be maybe

00:27:40,720 --> 00:27:44,399
even arrogant of me to go

00:27:42,640 --> 00:27:46,399
gushy and say yeah we can all work

00:27:44,399 --> 00:27:47,760
together and put aside every single

00:27:46,399 --> 00:27:49,279
difference that exists

00:27:47,760 --> 00:27:51,520
i would like to believe that this is

00:27:49,279 --> 00:27:53,200
doable but there are

00:27:51,520 --> 00:27:54,960
also practical technical differences

00:27:53,200 --> 00:27:57,200
that need to be addressed however

00:27:54,960 --> 00:27:58,159
we welcome cooperation we welcome

00:27:57,200 --> 00:28:00,840
sharing

00:27:58,159 --> 00:28:02,640
and if we can do better for the linux

00:28:00,840 --> 00:28:04,880
community any which way

00:28:02,640 --> 00:28:05,840
is welcome and possible and skin says we

00:28:04,880 --> 00:28:07,360
do cooperate but

00:28:05,840 --> 00:28:09,039
the more the merrier and if you have

00:28:07,360 --> 00:28:10,960
suggestions and ideas

00:28:09,039 --> 00:28:13,039
and concrete proposals into how to do

00:28:10,960 --> 00:28:15,440
that again please join our forum

00:28:13,039 --> 00:28:16,960
start the thread anything you fancy and

00:28:15,440 --> 00:28:19,760
we'll take it seriously we're not going

00:28:16,960 --> 00:28:19,760
to ignore things

00:28:20,080 --> 00:28:25,440
so build definition two parts

00:28:23,600 --> 00:28:27,440
and please don't get confused because i

00:28:25,440 --> 00:28:28,399
use the word parts as one of the parts

00:28:27,440 --> 00:28:30,720
is written on

00:28:28,399 --> 00:28:31,840
on screen there's the application

00:28:30,720 --> 00:28:33,919
declaration

00:28:31,840 --> 00:28:35,039
and there's the build declaration the

00:28:33,919 --> 00:28:38,320
parts part

00:28:35,039 --> 00:28:39,919
is where you define how your application

00:28:38,320 --> 00:28:42,240
is going to be built

00:28:39,919 --> 00:28:43,679
and by built we're talking about a whole

00:28:42,240 --> 00:28:47,279
range of possibilities

00:28:43,679 --> 00:28:49,919
you could reuse an existing binary

00:28:47,279 --> 00:28:50,960
you could extract an existing debian

00:28:49,919 --> 00:28:54,159
package

00:28:50,960 --> 00:28:56,559
or you could compile

00:28:54,159 --> 00:28:58,240
from source and you can compile a whole

00:28:56,559 --> 00:29:00,320
range of language you can use python

00:28:58,240 --> 00:29:01,279
you can use java you can use cc plus

00:29:00,320 --> 00:29:04,399
plus

00:29:01,279 --> 00:29:07,039
you can use node ruby

00:29:04,399 --> 00:29:09,279
we also support robotic robotics space

00:29:07,039 --> 00:29:12,240
languages like ross and moose

00:29:09,279 --> 00:29:13,279
and whole whole range of others recently

00:29:12,240 --> 00:29:16,000
we also have support

00:29:13,279 --> 00:29:16,720
flutter so we are branching out as much

00:29:16,000 --> 00:29:20,080
as we can

00:29:16,720 --> 00:29:23,200
to provide as much support for

00:29:20,080 --> 00:29:24,720
development languages and frameworks and

00:29:23,200 --> 00:29:26,559
then the application declaration is

00:29:24,720 --> 00:29:28,799
basically you define

00:29:26,559 --> 00:29:30,480
how your application is going to run and

00:29:28,799 --> 00:29:31,440
what kind of permissions or system

00:29:30,480 --> 00:29:34,159
resource access

00:29:31,440 --> 00:29:34,880
it will require and that is done through

00:29:34,159 --> 00:29:36,880
a

00:29:34,880 --> 00:29:37,919
keyword called plugs basically it

00:29:36,880 --> 00:29:39,600
defines

00:29:37,919 --> 00:29:41,760
into which interface you plug your

00:29:39,600 --> 00:29:43,520
application so for instance weather

00:29:41,760 --> 00:29:45,840
being a command line utility that needs

00:29:43,520 --> 00:29:48,240
to query meteorological services

00:29:45,840 --> 00:29:50,080
out there it needs that network access

00:29:48,240 --> 00:29:52,640
so we define network access

00:29:50,080 --> 00:29:54,240
and if you deny this application network

00:29:52,640 --> 00:29:58,399
access it can't really

00:29:54,240 --> 00:29:58,399
provide you up-to-date forecast

00:29:58,880 --> 00:30:03,200
so what i said now also written with

00:30:01,600 --> 00:30:08,320
bullets on the screen

00:30:03,200 --> 00:30:11,039
uh we have the application declaration

00:30:08,320 --> 00:30:12,000
is a block we have a command path to an

00:30:11,039 --> 00:30:14,480
executable

00:30:12,000 --> 00:30:15,440
and again executable can be a script it

00:30:14,480 --> 00:30:17,760
can be a binary

00:30:15,440 --> 00:30:19,679
or any which way by by which you would

00:30:17,760 --> 00:30:21,520
start your application

00:30:19,679 --> 00:30:24,480
and then the resources you need for

00:30:21,520 --> 00:30:24,480
strict confinement

00:30:25,520 --> 00:30:30,960
parts similarly we define

00:30:29,039 --> 00:30:32,880
the bits and pieces we need to assemble

00:30:30,960 --> 00:30:34,799
our application there could be one or

00:30:32,880 --> 00:30:36,799
more parts

00:30:34,799 --> 00:30:38,640
we have a plugin and in this case we use

00:30:36,799 --> 00:30:40,320
a nodejs plugin

00:30:38,640 --> 00:30:42,159
and here i'd like to emphasize a bit

00:30:40,320 --> 00:30:44,320
more plugins

00:30:42,159 --> 00:30:46,159
is another mechanism we have implemented

00:30:44,320 --> 00:30:47,440
in snapcraft to try to simplify

00:30:46,159 --> 00:30:49,440
development

00:30:47,440 --> 00:30:51,039
basically rather than you having to know

00:30:49,440 --> 00:30:54,320
every little bit

00:30:51,039 --> 00:30:57,440
about node and how to use it we provide

00:30:54,320 --> 00:31:00,480
a baseline template if you will

00:30:57,440 --> 00:31:02,320
for users and in this case developers

00:31:00,480 --> 00:31:04,559
to be able to more quickly iterate on

00:31:02,320 --> 00:31:06,799
their code this does not mean that you

00:31:04,559 --> 00:31:09,039
should be clueless or not understand at

00:31:06,799 --> 00:31:10,399
all how your application or application

00:31:09,039 --> 00:31:12,799
language works

00:31:10,399 --> 00:31:13,679
but using plugins you can simplify your

00:31:12,799 --> 00:31:15,039
development

00:31:13,679 --> 00:31:17,120
perhaps achieve a higher level of

00:31:15,039 --> 00:31:18,720
commonality and gain some speed

00:31:17,120 --> 00:31:20,880
because you already have reusable

00:31:18,720 --> 00:31:22,640
components

00:31:20,880 --> 00:31:24,720
for nodejs you will have specific

00:31:22,640 --> 00:31:26,320
keywords for other plugins

00:31:24,720 --> 00:31:27,919
for let's say python or ruby you will

00:31:26,320 --> 00:31:32,240
have different keywords because

00:31:27,919 --> 00:31:34,480
the languages are different

00:31:32,240 --> 00:31:36,159
before i touch on snapchat commands i

00:31:34,480 --> 00:31:38,240
just like to emphasize something

00:31:36,159 --> 00:31:40,000
and i i would actually even like uh

00:31:38,240 --> 00:31:42,000
input from jonathan riddle if

00:31:40,000 --> 00:31:43,360
he is available and can turn his

00:31:42,000 --> 00:31:46,320
microphone on

00:31:43,360 --> 00:31:47,679
there's something called extensions so

00:31:46,320 --> 00:31:50,559
we have also developed

00:31:47,679 --> 00:31:51,919
developed an even more abstract

00:31:50,559 --> 00:31:54,240
mechanism

00:31:51,919 --> 00:31:55,120
for uh application development for snap

00:31:54,240 --> 00:31:57,600
development called

00:31:55,120 --> 00:31:58,240
extensions an extension basically hides

00:31:57,600 --> 00:32:00,320
away

00:31:58,240 --> 00:32:01,440
lots of common pieces that you need to

00:32:00,320 --> 00:32:04,799
build an application

00:32:01,440 --> 00:32:07,919
against a framework we have no desktop

00:32:04,799 --> 00:32:10,000
extension we have kd neon extension and

00:32:07,919 --> 00:32:12,240
jonathan could potentially hear maybe

00:32:10,000 --> 00:32:13,840
mention us word or two if he wants

00:32:12,240 --> 00:32:16,399
about his experience with with the

00:32:13,840 --> 00:32:19,519
extension the idea is basically

00:32:16,399 --> 00:32:21,279
you reuse parts uh your snap becomes

00:32:19,519 --> 00:32:23,120
much smaller in size

00:32:21,279 --> 00:32:24,480
and you have a much better consistency

00:32:23,120 --> 00:32:27,279
because you don't manually

00:32:24,480 --> 00:32:29,279
uh play around and with specific

00:32:27,279 --> 00:32:30,880
components and you maybe miss a theme or

00:32:29,279 --> 00:32:34,799
you maybe miss a library

00:32:30,880 --> 00:32:37,840
it's all bundled in a in a common uh

00:32:34,799 --> 00:32:39,200
framework in all behind the scenes so

00:32:37,840 --> 00:32:41,840
jonathan if you can turn your mic

00:32:39,200 --> 00:32:43,039
on if it's possible if not there you go

00:32:41,840 --> 00:32:46,159
hello

00:32:43,039 --> 00:32:47,360
what's the question am i famous yes you

00:32:46,159 --> 00:32:49,360
are famous and if you could

00:32:47,360 --> 00:32:51,679
say a couple of words about the kd neon

00:32:49,360 --> 00:32:55,600
extension if you like

00:32:51,679 --> 00:32:58,159
um i haven't used it very much

00:32:55,600 --> 00:32:59,679
we've got the content snap and that is

00:32:58,159 --> 00:33:02,159
built using

00:32:59,679 --> 00:33:03,200
all the uh kd frameworks all the

00:33:02,159 --> 00:33:06,080
libraries the kde

00:33:03,200 --> 00:33:07,440
applications use um we built those as

00:33:06,080 --> 00:33:11,039
part of kde neon for

00:33:07,440 --> 00:33:13,600
our normal debian dot deb

00:33:11,039 --> 00:33:14,960
that's package archive um but we also

00:33:13,600 --> 00:33:16,960
have a job that

00:33:14,960 --> 00:33:18,399
grabs those turns them into a snap so

00:33:16,960 --> 00:33:21,840
that if you

00:33:18,399 --> 00:33:24,240
are making any kitty application um

00:33:21,840 --> 00:33:26,000
then it can be based on this content

00:33:24,240 --> 00:33:29,679
snap and that will have all the kde

00:33:26,000 --> 00:33:31,919
libraries available by default

00:33:29,679 --> 00:33:33,919
um without your question or you were

00:33:31,919 --> 00:33:36,159
asking about the extension

00:33:33,919 --> 00:33:37,200
you're golden i'll uh i'll continue

00:33:36,159 --> 00:33:39,919
thank you

00:33:37,200 --> 00:33:40,720
so what jonathan said and we take it one

00:33:39,919 --> 00:33:42,480
step further

00:33:40,720 --> 00:33:45,679
so you have the content snap you have

00:33:42,480 --> 00:33:47,840
the commonly reusable kd neon components

00:33:45,679 --> 00:33:49,679
and on top of that you can also add

00:33:47,840 --> 00:33:50,399
common themes you can add desktop

00:33:49,679 --> 00:33:51,679
integration

00:33:50,399 --> 00:33:54,240
and you can add a few other bits and

00:33:51,679 --> 00:33:56,000
pieces and you all declare all that

00:33:54,240 --> 00:33:57,519
just by using a one-liner so you

00:33:56,000 --> 00:34:00,880
basically say extension

00:33:57,519 --> 00:34:02,559
kd neon and bob's your uncle

00:34:00,880 --> 00:34:04,720
or if bob's not your angle then someone

00:34:02,559 --> 00:34:07,120
else but you get the idea

00:34:04,720 --> 00:34:09,119
i hope the jokes are appropriate so

00:34:07,120 --> 00:34:11,040
snapcraft commands

00:34:09,119 --> 00:34:12,480
now you have your yaml it's time to

00:34:11,040 --> 00:34:13,919
build and

00:34:12,480 --> 00:34:16,240
there's a whole bunch of commands you

00:34:13,919 --> 00:34:19,679
can run with snapcraft

00:34:16,240 --> 00:34:21,679
basically you can just do snapcraft and

00:34:19,679 --> 00:34:23,599
your snapchat builds you can use

00:34:21,679 --> 00:34:25,599
multipass in the back end

00:34:23,599 --> 00:34:26,960
which will spawn virtual machines and

00:34:25,599 --> 00:34:28,720
build in a

00:34:26,960 --> 00:34:30,159
isolated environment so it doesn't touch

00:34:28,720 --> 00:34:32,960
your file system

00:34:30,159 --> 00:34:35,040
or you can use containers lxd if

00:34:32,960 --> 00:34:38,560
multi-pass is not an option

00:34:35,040 --> 00:34:42,399
you can iterate and clean

00:34:38,560 --> 00:34:44,560
specific parts of your uh snap project

00:34:42,399 --> 00:34:46,079
if you encounter any errors or problems

00:34:44,560 --> 00:34:46,720
you can also step into the built

00:34:46,079 --> 00:34:48,079
environment

00:34:46,720 --> 00:34:49,599
if there are issues so you can

00:34:48,079 --> 00:34:50,560
troubleshoot live and understand if

00:34:49,599 --> 00:34:54,560
something's

00:34:50,560 --> 00:34:54,560
wrong and so forth

00:34:55,359 --> 00:35:00,720
basically like i said all you need to do

00:34:57,440 --> 00:35:00,720
is just do one liner

00:35:01,200 --> 00:35:04,240
i got an error that says connection

00:35:03,119 --> 00:35:06,160
failed when sharing screen

00:35:04,240 --> 00:35:08,560
did anyone else see that and did you

00:35:06,160 --> 00:35:08,560
lose me

00:35:10,480 --> 00:35:14,720
we have you but your slides seem to have

00:35:12,320 --> 00:35:18,400
disappeared yes

00:35:14,720 --> 00:35:18,400
okay i'll try to share again

00:35:24,240 --> 00:35:31,839
do you see the slides okay all right

00:35:28,079 --> 00:35:33,359
so we're back in in the game okay cool

00:35:31,839 --> 00:35:35,599
so all you need to do is just run

00:35:33,359 --> 00:35:38,560
snapcraft and if you've written your

00:35:35,599 --> 00:35:40,079
uh code well and there are no errors it

00:35:38,560 --> 00:35:40,720
should complete just fine and you will

00:35:40,079 --> 00:35:44,720
have uh

00:35:40,720 --> 00:35:47,119
your uh snapcraft artifact so just as a

00:35:44,720 --> 00:35:48,720
crude example i compiled something

00:35:47,119 --> 00:35:51,599
called dkdm

00:35:48,720 --> 00:35:54,079
and run snapcraft and you have the green

00:35:51,599 --> 00:35:56,000
lines green is good means no errors

00:35:54,079 --> 00:35:57,200
and in the end it says snap name of the

00:35:56,000 --> 00:36:01,359
snap.snap

00:35:57,200 --> 00:36:04,000
and that's it now that this step is done

00:36:01,359 --> 00:36:05,040
it's time to actually see what the snap

00:36:04,000 --> 00:36:07,839
contains

00:36:05,040 --> 00:36:09,520
so you can take your snap the squad file

00:36:07,839 --> 00:36:11,280
squash fs file system and you can

00:36:09,520 --> 00:36:12,560
unsquash it or you can mount it as a

00:36:11,280 --> 00:36:14,160
loopback device

00:36:12,560 --> 00:36:16,560
and then you will see that inside it

00:36:14,160 --> 00:36:18,960
looks like a typical linux file system

00:36:16,560 --> 00:36:22,720
except it all lives inside this archive

00:36:18,960 --> 00:36:24,480
you have bin etsy lib user and so forth

00:36:22,720 --> 00:36:26,800
and in these directories there will be

00:36:24,480 --> 00:36:29,119
libraries there will be binaries

00:36:26,800 --> 00:36:30,640
any which assets that your application

00:36:29,119 --> 00:36:32,560
needs and requires

00:36:30,640 --> 00:36:34,720
so in practical terms let's say that you

00:36:32,560 --> 00:36:38,000
require lib igor dot so

00:36:34,720 --> 00:36:39,599
shared library so you actually use the

00:36:38,000 --> 00:36:41,040
library from within the snap you don't

00:36:39,599 --> 00:36:41,920
use the one that's available on your

00:36:41,040 --> 00:36:43,440
file system and

00:36:41,920 --> 00:36:44,960
let's say that you delete that shared

00:36:43,440 --> 00:36:46,720
library on your

00:36:44,960 --> 00:36:49,040
or there's a system update that changes

00:36:46,720 --> 00:36:50,160
the version your snap is then affected

00:36:49,040 --> 00:36:51,839
your snap will continue

00:36:50,160 --> 00:36:53,440
running with the application code it

00:36:51,839 --> 00:36:56,000
expects to have

00:36:53,440 --> 00:36:59,920
and will not be impacted by any other

00:36:56,000 --> 00:36:59,920
application or any update on your system

00:37:01,119 --> 00:37:05,359
a few other bits and pieces for you to

00:37:04,000 --> 00:37:08,400
take into account

00:37:05,359 --> 00:37:08,720
there are a range of snap variables some

00:37:08,400 --> 00:37:12,000
of

00:37:08,720 --> 00:37:13,839
which you can declare in your uh yaml

00:37:12,000 --> 00:37:15,839
and others which you can refer to when

00:37:13,839 --> 00:37:19,119
you're troubleshooting or

00:37:15,839 --> 00:37:22,880
debugging your snaps so for instance the

00:37:19,119 --> 00:37:26,000
the read-only path or the writable data

00:37:22,880 --> 00:37:27,359
or the user data and and others uh

00:37:26,000 --> 00:37:29,440
at this point i would like to refer you

00:37:27,359 --> 00:37:32,000
to the documentation online

00:37:29,440 --> 00:37:32,640
and have a look for yourselves and this

00:37:32,000 --> 00:37:35,440
will give you

00:37:32,640 --> 00:37:36,320
an additional understanding of how snaps

00:37:35,440 --> 00:37:38,000
work

00:37:36,320 --> 00:37:41,599
and how you interact with snaps and

00:37:38,000 --> 00:37:43,599
snapchat during development

00:37:41,599 --> 00:37:44,720
now the fun part which is publishing

00:37:43,599 --> 00:37:46,720
your snap so

00:37:44,720 --> 00:37:48,400
once you have the snap ready you need to

00:37:46,720 --> 00:37:50,560
do three simple things

00:37:48,400 --> 00:37:51,520
one is register created that the

00:37:50,560 --> 00:37:54,400
development account

00:37:51,520 --> 00:37:55,359
on snapstore you click the button you go

00:37:54,400 --> 00:37:58,000
through the

00:37:55,359 --> 00:38:00,160
process and then you're a developer and

00:37:58,000 --> 00:38:02,839
you can upload one or more snaps

00:38:00,160 --> 00:38:04,160
plus quite a few other things like add

00:38:02,839 --> 00:38:06,960
collaborators

00:38:04,160 --> 00:38:07,599
uh and so forth then you need to

00:38:06,960 --> 00:38:10,079
register

00:38:07,599 --> 00:38:11,119
your application name ideally it will be

00:38:10,079 --> 00:38:14,320
a name that's not

00:38:11,119 --> 00:38:16,640
taken by someone else and it

00:38:14,320 --> 00:38:18,400
will be unique to your project so you

00:38:16,640 --> 00:38:21,520
don't go and say register

00:38:18,400 --> 00:38:22,240
kde for something that has nothing to do

00:38:21,520 --> 00:38:24,960
with kd

00:38:22,240 --> 00:38:26,000
for instance and finally then you upload

00:38:24,960 --> 00:38:29,760
your snap

00:38:26,000 --> 00:38:31,839
and polish up your page so that

00:38:29,760 --> 00:38:33,440
the application looks presentable it's

00:38:31,839 --> 00:38:34,720
beautiful and elegant and appealing to

00:38:33,440 --> 00:38:37,200
your end users

00:38:34,720 --> 00:38:40,480
and the snap begins its life as a

00:38:37,200 --> 00:38:42,079
product for consumers

00:38:40,480 --> 00:38:44,160
how you do this you do it on a command

00:38:42,079 --> 00:38:48,079
line and you have the option to

00:38:44,160 --> 00:38:50,800
push your snap to a different

00:38:48,079 --> 00:38:52,640
channel not just by default you have

00:38:50,800 --> 00:38:54,240
lots of variations here here i need to

00:38:52,640 --> 00:38:56,079
go into a concept that's

00:38:54,240 --> 00:38:58,480
quite interesting and it's store

00:38:56,079 --> 00:38:58,480
channels

00:38:58,640 --> 00:39:02,800
in in the snap store you have a

00:39:01,480 --> 00:39:05,280
three-dimensional

00:39:02,800 --> 00:39:05,839
matrix of possibilities on how you

00:39:05,280 --> 00:39:08,480
promote

00:39:05,839 --> 00:39:09,760
your code and how you provide it to your

00:39:08,480 --> 00:39:13,440
users

00:39:09,760 --> 00:39:14,880
you can use tracks which allow you to

00:39:13,440 --> 00:39:17,599
have multiple versions of your

00:39:14,880 --> 00:39:21,119
application available if you like

00:39:17,599 --> 00:39:23,680
you can use a risk level

00:39:21,119 --> 00:39:24,880
basically supported releases multiple

00:39:23,680 --> 00:39:27,280
support releases of

00:39:24,880 --> 00:39:28,079
the same application and then you can

00:39:27,280 --> 00:39:30,079
also have

00:39:28,079 --> 00:39:31,839
branches for optional testing and

00:39:30,079 --> 00:39:34,720
debugging basically

00:39:31,839 --> 00:39:35,280
you make a tiny change it could be eager

00:39:34,720 --> 00:39:38,720
with

00:39:35,280 --> 00:39:41,040
l0 compression and your colleagues

00:39:38,720 --> 00:39:42,800
or people who you work with or your beta

00:39:41,040 --> 00:39:46,079
testers can then download and

00:39:42,800 --> 00:39:47,920
test this specific release of

00:39:46,079 --> 00:39:49,119
of your snap before you promote it to

00:39:47,920 --> 00:39:50,840
the stable channel

00:39:49,119 --> 00:39:52,160
to the wide audience

00:39:50,840 --> 00:39:54,800
[Music]

00:39:52,160 --> 00:39:55,599
so some examples of what kind of tracks

00:39:54,800 --> 00:39:57,440
you could use

00:39:55,599 --> 00:39:59,599
there's always the default track which

00:39:57,440 --> 00:40:03,040
is the latest but you can use

00:39:59,599 --> 00:40:05,680
anything you like risks

00:40:03,040 --> 00:40:07,440
there's stable candidates better edge

00:40:05,680 --> 00:40:10,880
and a question yes please

00:40:07,440 --> 00:40:10,880
last question before your time is

00:40:11,119 --> 00:40:16,240
we will see ubuntu core as the main

00:40:13,520 --> 00:40:18,720
ubuntu with all applications as snap

00:40:16,240 --> 00:40:21,760
something like immutable base with some

00:40:18,720 --> 00:40:24,960
boxed applications

00:40:21,760 --> 00:40:27,200
the simplest answer i have is perhaps

00:40:24,960 --> 00:40:29,359
i don't have a definitive answer for

00:40:27,200 --> 00:40:29,359
that

00:40:29,839 --> 00:40:35,280
sorry if i'm being vague but i don't

00:40:32,480 --> 00:40:35,280
have more to say

00:40:35,680 --> 00:40:39,440
and again not because i'm trying to do

00:40:37,280 --> 00:40:42,720
plausible deniability or drama effect

00:40:39,440 --> 00:40:46,640
i just don't have an answer for that

00:40:42,720 --> 00:40:46,640
you said lots of questions what's next

00:40:47,520 --> 00:40:54,160
now the time is up is it

00:40:50,960 --> 00:40:57,599
s oh i thought i had a full hour

00:40:54,160 --> 00:40:58,560
based on uh what i've seen all right the

00:40:57,599 --> 00:41:00,880
schedule chest

00:40:58,560 --> 00:41:01,839
at the next stock storage in three four

00:41:00,880 --> 00:41:04,800
minutes

00:41:01,839 --> 00:41:06,480
okay then i'll breeze through quickly so

00:41:04,800 --> 00:41:09,760
you upload to the store

00:41:06,480 --> 00:41:11,760
don't use stable right away there could

00:41:09,760 --> 00:41:13,760
be automatic checks and manual checks if

00:41:11,760 --> 00:41:16,240
your snap doesn't pass the security

00:41:13,760 --> 00:41:17,839
requirements right away make sure you

00:41:16,240 --> 00:41:20,400
have a compelling

00:41:17,839 --> 00:41:22,160
page so that beautiful screenshots

00:41:20,400 --> 00:41:24,319
potentially videos

00:41:22,160 --> 00:41:25,520
rich descriptions so people see or snap

00:41:24,319 --> 00:41:28,960
they will want to interact

00:41:25,520 --> 00:41:34,000
download and use it so i guess

00:41:28,960 --> 00:41:37,280
i'm on time or or not but yeah

00:41:34,000 --> 00:41:39,760
anything else before we part

00:41:37,280 --> 00:41:39,760
in tears

00:41:47,599 --> 00:41:53,119
thank you all i hope you enjoyed it um

00:41:51,200 --> 00:41:54,480
have fun reach out if you have any

00:41:53,119 --> 00:41:56,079
questions uh

00:41:54,480 --> 00:41:59,839
we're really here to help and work with

00:41:56,079 --> 00:41:59,839

YouTube URL: https://www.youtube.com/watch?v=x076vv8y_yo


