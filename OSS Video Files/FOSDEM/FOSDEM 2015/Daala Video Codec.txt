Title: Daala Video Codec
Publication date: 2020-08-16
Playlist: FOSDEM 2015
Description: 
	By Nathan Egge


At: FOSDEM 2015



https://fosdem.org/2015/schedule/event/daala/


Daala is a next-generation royalty free video codec under development by Xiph.org and Mozilla.



Room: H.2213



Scheduled start: 2015-01-31 13:00:00
Captions: 
	00:00:05,920 --> 00:00:08,080
so uh

00:00:06,480 --> 00:00:09,440
yeah my name is nathan eggy i'm from

00:00:08,080 --> 00:00:10,240
mozilla and today i'll be talking to you

00:00:09,440 --> 00:00:12,960
about

00:00:10,240 --> 00:00:15,280
the dollar video codec project what we

00:00:12,960 --> 00:00:19,119
are affectionately calling

00:00:15,280 --> 00:00:19,119
the next next generation video

00:00:19,359 --> 00:00:24,400
all right and so um

00:00:23,039 --> 00:00:26,640
start by sort of giving the motivation

00:00:24,400 --> 00:00:28,160
of why free codecs matter

00:00:26,640 --> 00:00:29,519
and so here we're talking about when we

00:00:28,160 --> 00:00:30,000
talk about free we're talking about

00:00:29,519 --> 00:00:32,960
control

00:00:30,000 --> 00:00:33,440
and not and not cost so the idea is that

00:00:32,960 --> 00:00:35,600
um

00:00:33,440 --> 00:00:36,960
you know you should be able to do

00:00:35,600 --> 00:00:38,800
anything with this video codec that you

00:00:36,960 --> 00:00:39,760
want to and apply to any application

00:00:38,800 --> 00:00:42,239
that you want to not have to ask

00:00:39,760 --> 00:00:43,440
permission from anybody and so if you

00:00:42,239 --> 00:00:46,399
look at the

00:00:43,440 --> 00:00:47,200
current video codecs um there are

00:00:46,399 --> 00:00:50,079
billion dollar

00:00:47,200 --> 00:00:51,680
toll tax on communication tools so what

00:00:50,079 --> 00:00:55,520
this means is that

00:00:51,680 --> 00:00:58,000
you know for every cell phone um

00:00:55,520 --> 00:00:59,520
that has a audio or video codec in it

00:00:58,000 --> 00:01:01,840
there's a small cost

00:00:59,520 --> 00:01:04,000
associated with you know licensing that

00:01:01,840 --> 00:01:06,080
codec and if you look at the

00:01:04,000 --> 00:01:07,840
price of the components of that that

00:01:06,080 --> 00:01:09,680
device over time they all go down but

00:01:07,840 --> 00:01:11,760
the cost of licensing the codex sort of

00:01:09,680 --> 00:01:13,200
stays constant

00:01:11,760 --> 00:01:14,880
and of course you know as these things

00:01:13,200 --> 00:01:17,439
are sold all over the place this is

00:01:14,880 --> 00:01:19,439
you know multiplied million fold so um

00:01:17,439 --> 00:01:21,520
there's a heavy cost there

00:01:19,439 --> 00:01:23,520
and if you look at also the the

00:01:21,520 --> 00:01:24,560
licensing terms on these codecs

00:01:23,520 --> 00:01:28,400
they're really used as kind of a

00:01:24,560 --> 00:01:31,680
competitive weaponry right so the

00:01:28,400 --> 00:01:36,240
commodity hardware manufacturers

00:01:31,680 --> 00:01:38,240
will use these weapons by having

00:01:36,240 --> 00:01:39,439
patents on some portions of the codec

00:01:38,240 --> 00:01:40,320
and they'll have a reciprocal license

00:01:39,439 --> 00:01:42,320
with other

00:01:40,320 --> 00:01:44,240
other hardware vendors and what this

00:01:42,320 --> 00:01:46,799
means is new entries into the market

00:01:44,240 --> 00:01:47,680
who don't have any of those advantages

00:01:46,799 --> 00:01:49,280
um

00:01:47,680 --> 00:01:51,040
will have to pay a little bit more you

00:01:49,280 --> 00:01:52,240
know that few cents per device

00:01:51,040 --> 00:01:54,079
and that will make them uncompetitive

00:01:52,240 --> 00:01:54,560
and unprofitable and so this is a tool

00:01:54,079 --> 00:01:57,280
that

00:01:54,560 --> 00:01:58,960
used to keep competitive markets um your

00:01:57,280 --> 00:02:00,240
competitors out of the market

00:01:58,960 --> 00:02:02,000
and then finally you know the success of

00:02:00,240 --> 00:02:03,200
the internet was based on you know not

00:02:02,000 --> 00:02:05,040
having asked permission right so

00:02:03,200 --> 00:02:06,320
having to license a codec already is

00:02:05,040 --> 00:02:07,200
kind of burdensome and if you have an

00:02:06,320 --> 00:02:09,039
idea of

00:02:07,200 --> 00:02:11,280
beginning from that point maybe a

00:02:09,039 --> 00:02:12,720
non-starter

00:02:11,280 --> 00:02:14,080
and of course you know if you if you

00:02:12,720 --> 00:02:16,400
usually don't have to beg you know beg

00:02:14,080 --> 00:02:18,800
for forgiveness either so

00:02:16,400 --> 00:02:20,319
i work at mozilla and we ship web

00:02:18,800 --> 00:02:22,480
browser you might have heard of

00:02:20,319 --> 00:02:23,920
and we do this through a volunteer

00:02:22,480 --> 00:02:25,040
network for many distros we do this

00:02:23,920 --> 00:02:26,720
through this volunteer network of

00:02:25,040 --> 00:02:27,760
distributors you know people who run ftp

00:02:26,720 --> 00:02:29,280
sites

00:02:27,760 --> 00:02:30,959
who host the source code or who host

00:02:29,280 --> 00:02:33,360
binaries um

00:02:30,959 --> 00:02:34,879
if you're a small open source project

00:02:33,360 --> 00:02:36,160
and you're using a codec

00:02:34,879 --> 00:02:37,920
and you're distributing through the same

00:02:36,160 --> 00:02:39,680
fashion you know we all have the same

00:02:37,920 --> 00:02:41,519
problem we can't count how many people

00:02:39,680 --> 00:02:44,560
are using our products so for many of

00:02:41,519 --> 00:02:46,160
these licenses there's a per user cost

00:02:44,560 --> 00:02:47,599
and it's just even keeping track of the

00:02:46,160 --> 00:02:48,959
number of users is burdensome and you

00:02:47,599 --> 00:02:52,319
can't possibly

00:02:48,959 --> 00:02:53,200
even begin to you know pay that license

00:02:52,319 --> 00:02:54,319
costs

00:02:53,200 --> 00:02:56,560
and so a lot of people do is they'll

00:02:54,319 --> 00:03:00,000
just ignore these these costs

00:02:56,560 --> 00:03:02,000
um and for small projects you know

00:03:00,000 --> 00:03:03,440
you're perfectly fine doing so with the

00:03:02,000 --> 00:03:04,000
assumption that you know you're too

00:03:03,440 --> 00:03:06,159
small to be

00:03:04,000 --> 00:03:07,680
sued but what happens is once you're

00:03:06,159 --> 00:03:08,800
successful then you become a target and

00:03:07,680 --> 00:03:11,840
so

00:03:08,800 --> 00:03:12,720
um you know a famous case is skype you

00:03:11,840 --> 00:03:15,920
know

00:03:12,720 --> 00:03:16,959
started by using vp7 and vp8 and then

00:03:15,920 --> 00:03:18,800
when they became

00:03:16,959 --> 00:03:20,560
you know larger and successful they had

00:03:18,800 --> 00:03:22,159
the revenue to then license other codecs

00:03:20,560 --> 00:03:24,640
like 264.

00:03:22,159 --> 00:03:27,040
um and so there's sort of this tax on

00:03:24,640 --> 00:03:29,200
success that shows up when you use

00:03:27,040 --> 00:03:30,879
um you know codex without being mindful

00:03:29,200 --> 00:03:32,319
of the licenses

00:03:30,879 --> 00:03:34,080
and then finally the cost of the license

00:03:32,319 --> 00:03:35,680
really isn't actually the largest cost

00:03:34,080 --> 00:03:37,680
in deployment the largest cost is

00:03:35,680 --> 00:03:41,120
incompatibility and you think about

00:03:37,680 --> 00:03:41,599
the life cycle of product for some

00:03:41,120 --> 00:03:43,599
hardware

00:03:41,599 --> 00:03:45,440
manufacturers and they might spend

00:03:43,599 --> 00:03:46,879
orders of magnitude more on just

00:03:45,440 --> 00:03:48,799
ensuring compatibility across all their

00:03:46,879 --> 00:03:50,319
devices and all their deployments

00:03:48,799 --> 00:03:54,080
and the licensing feed them is really

00:03:50,319 --> 00:03:58,000
not so much a concern

00:03:54,080 --> 00:04:00,080
and so you might have seen this webcomic

00:03:58,000 --> 00:04:01,360
and you know you think well okay we have

00:04:00,080 --> 00:04:02,959
all these codecs

00:04:01,360 --> 00:04:04,959
you know we should really just make a

00:04:02,959 --> 00:04:06,159
new codec that covers these use cases

00:04:04,959 --> 00:04:08,080
and then we can get rid of all these

00:04:06,159 --> 00:04:09,519
compatibility issues

00:04:08,080 --> 00:04:11,519
and now you have one more codec that you

00:04:09,519 --> 00:04:13,280
have to be compatible with so

00:04:11,519 --> 00:04:14,720
um developing new codex is kind of

00:04:13,280 --> 00:04:15,840
missing the point you know you know the

00:04:14,720 --> 00:04:17,199
compatibility is kind of missing the

00:04:15,840 --> 00:04:19,600
point here there are other really good

00:04:17,199 --> 00:04:19,600
reasons

00:04:20,079 --> 00:04:23,919
and so um you know these are all mostly

00:04:23,120 --> 00:04:27,199
around

00:04:23,919 --> 00:04:29,040
um cost and licensing so the

00:04:27,199 --> 00:04:30,560
you know you can't license uh an

00:04:29,040 --> 00:04:31,919
encumbrance codec if there's no

00:04:30,560 --> 00:04:34,080
acceptable license so for

00:04:31,919 --> 00:04:35,360
for certain video codecs um they might

00:04:34,080 --> 00:04:38,880
if you call them to license or

00:04:35,360 --> 00:04:40,479
they'll give you option a or option b um

00:04:38,880 --> 00:04:42,400
and you know neither one of these things

00:04:40,479 --> 00:04:43,840
apply to you so you know there's no

00:04:42,400 --> 00:04:45,440
acceptable

00:04:43,840 --> 00:04:47,919
way for you to even get the license and

00:04:45,440 --> 00:04:52,400
an example of this is you know for

00:04:47,919 --> 00:04:53,600
uh 264 if you are deploying this um

00:04:52,400 --> 00:04:56,080
to a large group of people on the

00:04:53,600 --> 00:04:57,280
internet there is a licensed cap and so

00:04:56,080 --> 00:04:58,880
you can just pay the cap and

00:04:57,280 --> 00:05:00,320
don't have to worry about counting the

00:04:58,880 --> 00:05:01,520
number of people but for other codecs

00:05:00,320 --> 00:05:03,199
like aac

00:05:01,520 --> 00:05:04,479
there's no cap so you you're back to the

00:05:03,199 --> 00:05:05,840
same kind of problem there's no license

00:05:04,479 --> 00:05:06,800
that works for your your distribution

00:05:05,840 --> 00:05:09,120
model

00:05:06,800 --> 00:05:10,320
um and in some cases you know building a

00:05:09,120 --> 00:05:12,160
new codec then

00:05:10,320 --> 00:05:14,479
may be cheaper than than the licensing

00:05:12,160 --> 00:05:17,199
terms the dollar development team

00:05:14,479 --> 00:05:19,039
within mozilla is far below the the cap

00:05:17,199 --> 00:05:21,039
for 264. so

00:05:19,039 --> 00:05:23,360
um and we're not sure what the licensing

00:05:21,039 --> 00:05:24,880
will look like for 265 exactly so

00:05:23,360 --> 00:05:26,720
it makes sense for for mozilla who has

00:05:24,880 --> 00:05:27,039
this distribution problem to to build a

00:05:26,720 --> 00:05:28,479
new

00:05:27,039 --> 00:05:30,560
or to invest in the development of this

00:05:28,479 --> 00:05:34,080
free codec that everybody then can use

00:05:30,560 --> 00:05:35,199
um and of course this adversarial

00:05:34,080 --> 00:05:37,039
licensing

00:05:35,199 --> 00:05:38,880
is a huge risk in a in a competitive

00:05:37,039 --> 00:05:40,400
market and um

00:05:38,880 --> 00:05:43,280
you know fran is often none of fair

00:05:40,400 --> 00:05:46,800
reasonable or non-discriminatory

00:05:43,280 --> 00:05:50,080
there was ftc hearing in june of 2011

00:05:46,800 --> 00:05:52,320
where the intellectual property

00:05:50,080 --> 00:05:53,680
advisor for a large networking company

00:05:52,320 --> 00:05:56,080
you know said that fran meant

00:05:53,680 --> 00:05:57,680
she had to call and sign an nda before

00:05:56,080 --> 00:05:58,479
she could get licensing terms and so you

00:05:57,680 --> 00:06:00,080
know

00:05:58,479 --> 00:06:01,680
if she's under nda she can't talk to

00:06:00,080 --> 00:06:02,319
other people about the licensing terms

00:06:01,680 --> 00:06:04,000
for the same

00:06:02,319 --> 00:06:05,440
technologies you know how is this

00:06:04,000 --> 00:06:06,160
possibly

00:06:05,440 --> 00:06:09,039
you know reasonable and

00:06:06,160 --> 00:06:09,039
non-discriminatory

00:06:09,840 --> 00:06:13,039
all right so what we're trying to do

00:06:11,039 --> 00:06:14,400
with dolla is we're trying to

00:06:13,039 --> 00:06:17,039
you know change the competitive market

00:06:14,400 --> 00:06:19,600
here you know creating good codex

00:06:17,039 --> 00:06:21,360
is not an easy problem but we really

00:06:19,600 --> 00:06:24,560
don't need that many we really just need

00:06:21,360 --> 00:06:27,520
just need one and many of the

00:06:24,560 --> 00:06:28,400
the best implementations are already

00:06:27,520 --> 00:06:31,280
free software

00:06:28,400 --> 00:06:31,919
so if you look at um the open source

00:06:31,280 --> 00:06:33,280
community

00:06:31,919 --> 00:06:34,319
many of the commercial implements or

00:06:33,280 --> 00:06:36,080
many of the implications of these

00:06:34,319 --> 00:06:39,039
commercial codecs

00:06:36,080 --> 00:06:40,160
are already open source software you

00:06:39,039 --> 00:06:42,000
know you can use them

00:06:40,160 --> 00:06:43,280
and if you have any kind of deployment

00:06:42,000 --> 00:06:44,960
of the scale you have to go and license

00:06:43,280 --> 00:06:47,360
the appropriate patents maybe but

00:06:44,960 --> 00:06:48,000
they're already out there x264 and other

00:06:47,360 --> 00:06:51,199
implementations

00:06:48,000 --> 00:06:52,319
work great um and then of course network

00:06:51,199 --> 00:06:54,960
effects

00:06:52,319 --> 00:06:56,479
you know decide the the market so there

00:06:54,960 --> 00:06:56,960
has not been a case where a royalty-free

00:06:56,479 --> 00:07:01,280
codec

00:06:56,960 --> 00:07:02,639
has taken over in a particular niche

00:07:01,280 --> 00:07:04,400
that's then been displaced by a

00:07:02,639 --> 00:07:06,639
non-royalty you know by royalty bearing

00:07:04,400 --> 00:07:08,800
codec and so for jpeg there are lots of

00:07:06,639 --> 00:07:09,680
you know jetpack's a pretty old video or

00:07:08,800 --> 00:07:10,880
image standard

00:07:09,680 --> 00:07:12,800
there are lots of new image standards

00:07:10,880 --> 00:07:14,720
that have come out some of them

00:07:12,800 --> 00:07:16,160
you know have been patent encumbered and

00:07:14,720 --> 00:07:17,680
perhaps offer

00:07:16,160 --> 00:07:21,520
better performance in some very specific

00:07:17,680 --> 00:07:23,520
cases but nobody's able to displace jpeg

00:07:21,520 --> 00:07:25,280
but being royalty free you know is not

00:07:23,520 --> 00:07:27,039
enough there are different people who

00:07:25,280 --> 00:07:30,319
care about

00:07:27,039 --> 00:07:31,520
different things there are some for from

00:07:30,319 --> 00:07:32,479
the video space there are people that

00:07:31,520 --> 00:07:36,479
care about

00:07:32,479 --> 00:07:39,759
um the the cost per bit in terms of

00:07:36,479 --> 00:07:44,000
the um you know number of

00:07:39,759 --> 00:07:47,199
of uh bits per pixel say the the

00:07:44,000 --> 00:07:48,400
the compression um of the codec but they

00:07:47,199 --> 00:07:49,599
don't care about price right like so

00:07:48,400 --> 00:07:50,800
they'll be willing to pay anything you

00:07:49,599 --> 00:07:52,160
know they want just give me the very

00:07:50,800 --> 00:07:53,520
best codec i'll pay whatever your

00:07:52,160 --> 00:07:55,039
licensing terms are

00:07:53,520 --> 00:07:56,319
there are people who are in the mobile

00:07:55,039 --> 00:07:57,360
space that say well i need the best

00:07:56,319 --> 00:08:00,960
performance per

00:07:57,360 --> 00:08:03,680
per watt um there are people that

00:08:00,960 --> 00:08:05,199
have other needs and so in order to

00:08:03,680 --> 00:08:06,319
really kind of win this game

00:08:05,199 --> 00:08:08,720
you know you have to be royalty free and

00:08:06,319 --> 00:08:12,240
you have to be good on all fronts and so

00:08:08,720 --> 00:08:13,280
at zif we shipped other codex we shipped

00:08:12,240 --> 00:08:17,120
the aura

00:08:13,280 --> 00:08:19,840
and we shipped vorbis and these were not

00:08:17,120 --> 00:08:21,199
best in the in class for those use cases

00:08:19,840 --> 00:08:22,240
at that time and they didn't see the

00:08:21,199 --> 00:08:23,759
great adoption even though they were

00:08:22,240 --> 00:08:27,840
royalty free and in some cases you know

00:08:23,759 --> 00:08:27,840
they were significantly better

00:08:28,479 --> 00:08:33,360
and so what we as if was we then made

00:08:32,159 --> 00:08:35,919
opus

00:08:33,360 --> 00:08:37,039
so opus is an example of a royalty-free

00:08:35,919 --> 00:08:40,560
audio codec

00:08:37,039 --> 00:08:44,000
that we did with at the ietf

00:08:40,560 --> 00:08:45,680
uh standard body and opus is better

00:08:44,000 --> 00:08:47,839
almost across the board for every every

00:08:45,680 --> 00:08:51,200
use case and it

00:08:47,839 --> 00:08:52,800
basically um made like 10 other codecs

00:08:51,200 --> 00:08:55,040
obsolete you could just use opus in one

00:08:52,800 --> 00:08:58,640
place and you can handle all all

00:08:55,040 --> 00:09:00,160
use cases from you know very low quality

00:08:58,640 --> 00:09:04,320
voice communication all the way up to

00:09:00,160 --> 00:09:04,320
low latency high quality stereo

00:09:05,040 --> 00:09:09,839
high bit depth music quality and so we

00:09:08,240 --> 00:09:12,399
want to do is the same sort of thing

00:09:09,839 --> 00:09:14,640
um but the strategy is is essential here

00:09:12,399 --> 00:09:14,640
so

00:09:15,360 --> 00:09:19,600
um these things are are necessary for us

00:09:18,000 --> 00:09:21,680
to be successful

00:09:19,600 --> 00:09:23,839
in deploying a royalty-free video codec

00:09:21,680 --> 00:09:23,839
so

00:09:24,000 --> 00:09:27,040
we need to design alternatives to the to

00:09:26,480 --> 00:09:28,880
avoid the

00:09:27,040 --> 00:09:31,040
the worst uh patent thicket so it's not

00:09:28,880 --> 00:09:34,560
enough to be

00:09:31,040 --> 00:09:35,760
just avoiding existing known patents you

00:09:34,560 --> 00:09:36,640
know working around them we have to

00:09:35,760 --> 00:09:38,240
actually

00:09:36,640 --> 00:09:40,080
have a story that's compelling that we

00:09:38,240 --> 00:09:40,959
can tell people about why we're

00:09:40,080 --> 00:09:42,640
royalty-free

00:09:40,959 --> 00:09:44,480
so just going in and saying well we read

00:09:42,640 --> 00:09:46,240
these patents and we navigate them

00:09:44,480 --> 00:09:47,600
you know isn't isn't sufficient because

00:09:46,240 --> 00:09:48,800
those people aren't going to also read

00:09:47,600 --> 00:09:49,680
those patents you know the people you're

00:09:48,800 --> 00:09:51,040
talking to

00:09:49,680 --> 00:09:54,000
who may use your technology they don't

00:09:51,040 --> 00:09:54,000
want to invest the time in that

00:09:54,480 --> 00:09:57,760
and so we have to have a compelling

00:09:55,680 --> 00:09:59,360
story uh we'll we'll read and analyze

00:09:57,760 --> 00:10:00,160
patents and publish the results and

00:09:59,360 --> 00:10:01,839
often

00:10:00,160 --> 00:10:04,160
you know the advice there is that you

00:10:01,839 --> 00:10:05,920
know you should not publish your patent

00:10:04,160 --> 00:10:07,600
analysis because it kind of gives

00:10:05,920 --> 00:10:09,200
your competitors a blueprint of how you

00:10:07,600 --> 00:10:12,640
might

00:10:09,200 --> 00:10:17,279
defend this and and say uh patent court

00:10:12,640 --> 00:10:17,279
and the the point there is that we

00:10:17,360 --> 00:10:21,600
when we analyze and publish these

00:10:18,959 --> 00:10:22,399
results we can then defend ourselves

00:10:21,600 --> 00:10:25,600
against

00:10:22,399 --> 00:10:27,519
ipr claims like we did did it with opus

00:10:25,600 --> 00:10:28,959
by simply pointing out specific parts of

00:10:27,519 --> 00:10:30,959
these defenses and saying

00:10:28,959 --> 00:10:32,079
you know your patent your claims to this

00:10:30,959 --> 00:10:33,839
technique we're using

00:10:32,079 --> 00:10:35,440
do not apply for this specific reason

00:10:33,839 --> 00:10:37,440
and we're not actually giving away

00:10:35,440 --> 00:10:38,720
any patent defense as a result you know

00:10:37,440 --> 00:10:39,680
we end up with a very defensible

00:10:38,720 --> 00:10:40,720
statement

00:10:39,680 --> 00:10:41,920
and then of course we're going to patent

00:10:40,720 --> 00:10:44,880
the new technology that we developed

00:10:41,920 --> 00:10:47,200
we've done this already with dala

00:10:44,880 --> 00:10:48,320
and the idea there is is that by

00:10:47,200 --> 00:10:51,519
patenting

00:10:48,320 --> 00:10:53,440
um specific technologies we can then go

00:10:51,519 --> 00:10:56,880
to other partners in the industry

00:10:53,440 --> 00:10:58,399
and get them to um

00:10:56,880 --> 00:11:00,320
listen to our claims as to why we

00:10:58,399 --> 00:11:01,200
believe we're royalty free until opus

00:11:00,320 --> 00:11:02,959
had

00:11:01,200 --> 00:11:04,640
um patents it was a very it was very

00:11:02,959 --> 00:11:05,920
difficult to have that conversation but

00:11:04,640 --> 00:11:07,279
towards the end of opus development we

00:11:05,920 --> 00:11:09,040
filed some patents and we were able then

00:11:07,279 --> 00:11:10,560
to speak with industry partners

00:11:09,040 --> 00:11:14,800
because we can take those patents and we

00:11:10,560 --> 00:11:14,800
can use them to kind of

00:11:15,200 --> 00:11:19,839
grant reciprocal licenses so the the

00:11:17,440 --> 00:11:21,200
fourth bullet point here

00:11:19,839 --> 00:11:23,519
which is sort of what we did with opus

00:11:21,200 --> 00:11:23,519
is we

00:11:24,399 --> 00:11:29,519
we partnered with other people in the

00:11:27,040 --> 00:11:31,360
industry and granted a license on a

00:11:29,519 --> 00:11:34,560
reciprocal term which meant that

00:11:31,360 --> 00:11:34,560
you could use our patents

00:11:36,480 --> 00:11:41,120
for deployment of opus so long as you

00:11:39,600 --> 00:11:43,279
did not sue anybody else who was

00:11:41,120 --> 00:11:47,200
deploying opus

00:11:43,279 --> 00:11:49,279
for those patents and then if if you did

00:11:47,200 --> 00:11:50,399
go after someone else who was deploying

00:11:49,279 --> 00:11:52,399
opus

00:11:50,399 --> 00:11:53,839
you would lose that defense and any of

00:11:52,399 --> 00:11:56,079
the other players who were

00:11:53,839 --> 00:11:57,360
or partners who were deploying opus who

00:11:56,079 --> 00:11:58,399
wanted to sue you

00:11:57,360 --> 00:12:00,639
then had the right to do that without

00:11:58,399 --> 00:12:02,480
losing their license and so this became

00:12:00,639 --> 00:12:04,560
uh sort of like the the gpl in a sense

00:12:02,480 --> 00:12:09,440
you know it became this sort of

00:12:04,560 --> 00:12:10,320
technique to encourage good behavior

00:12:09,440 --> 00:12:12,399
and then finally you know we're

00:12:10,320 --> 00:12:14,320
targeting the the next next generation

00:12:12,399 --> 00:12:16,000
so we're not targeting 265

00:12:14,320 --> 00:12:17,440
we're looking after that the codec

00:12:16,000 --> 00:12:20,639
development cycle

00:12:17,440 --> 00:12:22,639
um is a pretty long cycle and so

00:12:20,639 --> 00:12:24,079
we believe that to be competitive we

00:12:22,639 --> 00:12:25,519
need to take the time to actually

00:12:24,079 --> 00:12:27,519
develop something that is significantly

00:12:25,519 --> 00:12:28,880
better than 265

00:12:27,519 --> 00:12:30,160
because they've already kind of come to

00:12:28,880 --> 00:12:31,680
market so if we were to deploy something

00:12:30,160 --> 00:12:32,959
that was equal to that

00:12:31,680 --> 00:12:34,480
they may have an advantage in the

00:12:32,959 --> 00:12:35,519
hardware space or in other spaces and so

00:12:34,480 --> 00:12:37,760
we want to actually be

00:12:35,519 --> 00:12:38,720
maybe 30 to 50 better than what 265 is

00:12:37,760 --> 00:12:39,760
doing

00:12:38,720 --> 00:12:40,959
and then finally you know we have to

00:12:39,760 --> 00:12:41,839
document all of this stuff and make it

00:12:40,959 --> 00:12:44,800
so that it's

00:12:41,839 --> 00:12:46,399
you know abundantly clear um that dollar

00:12:44,800 --> 00:12:48,880
is royalty free that dollar is better

00:12:46,399 --> 00:12:49,680
in all these use cases and let people

00:12:48,880 --> 00:12:54,079
know what we're

00:12:49,680 --> 00:12:54,079
what we're all about all right

00:12:54,720 --> 00:12:56,480
and so there are other parts of the

00:12:55,600 --> 00:12:58,399
strategy that are actually very

00:12:56,480 --> 00:13:00,560
difficult so we have to be

00:12:58,399 --> 00:13:01,600
the best in all cases we have to be best

00:13:00,560 --> 00:13:05,120
in

00:13:01,600 --> 00:13:05,120
compression per bit in

00:13:05,440 --> 00:13:11,279
bit per per watt so for the mobile case

00:13:08,959 --> 00:13:12,480
we have to be good for archive use cases

00:13:11,279 --> 00:13:14,560
we have to be good for streaming we have

00:13:12,480 --> 00:13:17,519
to be good for

00:13:14,560 --> 00:13:18,160
real-time communication we have to be

00:13:17,519 --> 00:13:19,920
able to

00:13:18,160 --> 00:13:21,839
speak with our competitors and our

00:13:19,920 --> 00:13:23,519
critics in the

00:13:21,839 --> 00:13:24,880
other camps and get them on board with

00:13:23,519 --> 00:13:25,920
what we're doing so there's a huge

00:13:24,880 --> 00:13:27,680
amount of develop

00:13:25,920 --> 00:13:29,680
developers that work on royalty bearing

00:13:27,680 --> 00:13:31,200
codecs and there's great mindshare on

00:13:29,680 --> 00:13:32,800
that stuff and we want to

00:13:31,200 --> 00:13:34,639
encourage those people that to

00:13:32,800 --> 00:13:35,279
contribute parts of their technology

00:13:34,639 --> 00:13:37,120
towards the

00:13:35,279 --> 00:13:38,560
codec development process knowing that

00:13:37,120 --> 00:13:40,160
they can get the benefit of using this

00:13:38,560 --> 00:13:42,000
on a royalty-free basis

00:13:40,160 --> 00:13:44,320
once it's once it becomes available say

00:13:42,000 --> 00:13:46,079
after the next generation of codex

00:13:44,320 --> 00:13:48,000
um and then one of the strategies that

00:13:46,079 --> 00:13:50,000
was that we did

00:13:48,000 --> 00:13:51,760
with opus that was great was we found a

00:13:50,000 --> 00:13:52,880
niche that was not currently covered by

00:13:51,760 --> 00:13:56,240
existing

00:13:52,880 --> 00:13:57,040
audio codecs and we developed a strong

00:13:56,240 --> 00:14:00,560
use case

00:13:57,040 --> 00:14:02,639
around that with opus so for low latency

00:14:00,560 --> 00:14:04,399
high quality

00:14:02,639 --> 00:14:06,240
audio there was nothing in that space

00:14:04,399 --> 00:14:06,800
and opus sort of filled that niche and

00:14:06,240 --> 00:14:08,079
until

00:14:06,800 --> 00:14:09,440
we started showing that we were very

00:14:08,079 --> 00:14:10,000
successful there we couldn't get other

00:14:09,440 --> 00:14:11,600
people

00:14:10,000 --> 00:14:13,440
to become interested in opus but once we

00:14:11,600 --> 00:14:14,720
showed some success then everybody

00:14:13,440 --> 00:14:17,519
realized that this was going to be

00:14:14,720 --> 00:14:18,639
something they could deploy

00:14:17,519 --> 00:14:21,040
and then finally the biggest problem is

00:14:18,639 --> 00:14:21,360
we you know the dollar development team

00:14:21,040 --> 00:14:23,600
is

00:14:21,360 --> 00:14:24,959
is 10 people and we're not in a position

00:14:23,600 --> 00:14:26,320
to develop our own hardware and so what

00:14:24,959 --> 00:14:29,199
we'd like to do is

00:14:26,320 --> 00:14:29,519
create technology in a way that shows to

00:14:29,199 --> 00:14:30,800
be

00:14:29,519 --> 00:14:32,560
you know shows that it's compelling but

00:14:30,800 --> 00:14:33,279
also is something that other people want

00:14:32,560 --> 00:14:34,959
to pick up

00:14:33,279 --> 00:14:37,680
and can easily convert into a hardware

00:14:34,959 --> 00:14:37,680
implementation

00:14:38,880 --> 00:14:43,199
and so um you know

00:14:43,279 --> 00:14:45,760
some of the things that we did in opus

00:14:44,480 --> 00:14:47,040
that worked really well that we're going

00:14:45,760 --> 00:14:48,959
to try to do with dala

00:14:47,040 --> 00:14:50,320
is we're going to try to do all of our

00:14:48,959 --> 00:14:53,360
work

00:14:50,320 --> 00:14:55,360
in a public process and recognize

00:14:53,360 --> 00:14:56,959
sanders body with a strong ipr

00:14:55,360 --> 00:14:59,440
disclosure policy

00:14:56,959 --> 00:15:00,480
so the work with opus was done at the

00:14:59,440 --> 00:15:03,600
ietf

00:15:00,480 --> 00:15:05,199
and in the ietf there is a

00:15:03,600 --> 00:15:07,440
strong ipr disclosure policy where

00:15:05,199 --> 00:15:09,760
anybody who shows up to

00:15:07,440 --> 00:15:11,279
contribute as make any comment towards

00:15:09,760 --> 00:15:12,240
that process for developing that

00:15:11,279 --> 00:15:15,760
standard

00:15:12,240 --> 00:15:17,839
is required to disclose any patents they

00:15:15,760 --> 00:15:19,839
have or may know about that read on that

00:15:17,839 --> 00:15:21,440
standard and in that specific disclosure

00:15:19,839 --> 00:15:22,480
they're required to give the patent

00:15:21,440 --> 00:15:24,800
number

00:15:22,480 --> 00:15:26,480
and this is good you know it's not

00:15:24,800 --> 00:15:27,680
there's nothing about the itf policy

00:15:26,480 --> 00:15:30,320
that says you

00:15:27,680 --> 00:15:31,360
must not use patent encumbered ideas or

00:15:30,320 --> 00:15:32,880
technologies

00:15:31,360 --> 00:15:34,720
but because they give us a specific

00:15:32,880 --> 00:15:36,880
patent number we can then evaluate that

00:15:34,720 --> 00:15:38,720
patent and say well we do or do not

00:15:36,880 --> 00:15:40,079
agree that this

00:15:38,720 --> 00:15:41,519
you know ip infringes on what we're

00:15:40,079 --> 00:15:43,199
doing and if we do believe that it does

00:15:41,519 --> 00:15:45,040
we can work around it we can then just

00:15:43,199 --> 00:15:47,040
opt to use some other technology or find

00:15:45,040 --> 00:15:51,040
some different way of doing things

00:15:47,040 --> 00:15:53,199
um that worked very well with opus

00:15:51,040 --> 00:15:54,240
and then you know we're gonna question

00:15:53,199 --> 00:15:56,560
all the assumptions around the

00:15:54,240 --> 00:15:59,920
conventional structure of video codec so

00:15:56,560 --> 00:16:01,199
you know basically the dollar research

00:15:59,920 --> 00:16:02,720
project is sort of a high risk high

00:16:01,199 --> 00:16:04,720
reward

00:16:02,720 --> 00:16:06,399
approach we're going to try new and

00:16:04,720 --> 00:16:08,880
radical techniques

00:16:06,399 --> 00:16:10,560
with the idea that um some of them

00:16:08,880 --> 00:16:11,440
should should give us performance gains

00:16:10,560 --> 00:16:13,279
that

00:16:11,440 --> 00:16:14,800
are above and beyond what you get with

00:16:13,279 --> 00:16:18,560
traditional video techniques

00:16:14,800 --> 00:16:21,040
um the way 264 and 265 and

00:16:18,560 --> 00:16:22,720
vp8 and vp9 have been developed they're

00:16:21,040 --> 00:16:24,240
sort of incremental improvements so you

00:16:22,720 --> 00:16:25,759
take an existing technique

00:16:24,240 --> 00:16:27,600
and you say well now we have more cpu

00:16:25,759 --> 00:16:29,120
budget what can we do that's different

00:16:27,600 --> 00:16:30,880
and maybe you'll refine that technique a

00:16:29,120 --> 00:16:32,480
little bit and by applying

00:16:30,880 --> 00:16:33,920
you know a little more computational

00:16:32,480 --> 00:16:36,639
power you'll get better motion vectors

00:16:33,920 --> 00:16:39,440
or you'll get better

00:16:36,639 --> 00:16:40,639
entropy coding and so we're going to

00:16:39,440 --> 00:16:42,000
check all those out and see if we can

00:16:40,639 --> 00:16:43,360
find something else

00:16:42,000 --> 00:16:44,720
we're going to try to find applications

00:16:43,360 --> 00:16:46,399
where high flexibility is essential so

00:16:44,720 --> 00:16:48,240
we've targeted dala at

00:16:46,399 --> 00:16:49,519
real-time communication this is in line

00:16:48,240 --> 00:16:51,600
with

00:16:49,519 --> 00:16:52,959
work with opus where at the ietf they

00:16:51,600 --> 00:16:55,519
adopted opus for

00:16:52,959 --> 00:16:56,399
the mandatory to implement audio codec

00:16:55,519 --> 00:16:58,320
we would like to

00:16:56,399 --> 00:16:59,839
develop a codec that fits a video codec

00:16:58,320 --> 00:17:01,040
that fits that niche for real-time

00:16:59,839 --> 00:17:02,240
communication

00:17:01,040 --> 00:17:05,120
with the hope that that will eventually

00:17:02,240 --> 00:17:07,839
get used at the itf with

00:17:05,120 --> 00:17:09,439
with the webrtc and then finally you

00:17:07,839 --> 00:17:12,480
know

00:17:09,439 --> 00:17:15,120
the process that

00:17:12,480 --> 00:17:16,079
mpeg uses a psnr to select the features

00:17:15,120 --> 00:17:18,720
they include in

00:17:16,079 --> 00:17:19,919
their codecs and psnr you know doesn't

00:17:18,720 --> 00:17:22,480
actually correlate

00:17:19,919 --> 00:17:23,520
well with what people perceive as video

00:17:22,480 --> 00:17:25,120
quality and so

00:17:23,520 --> 00:17:26,880
we actually will look at the videos and

00:17:25,120 --> 00:17:29,120
choose our techniques according to

00:17:26,880 --> 00:17:30,840
what gives a better visual performance

00:17:29,120 --> 00:17:33,760
rather than just arbitrary

00:17:30,840 --> 00:17:35,039
metrics okay

00:17:33,760 --> 00:17:37,840
and so very quickly i'm going to give

00:17:35,039 --> 00:17:39,919
you guys an overview on how video codecs

00:17:37,840 --> 00:17:43,039
work

00:17:39,919 --> 00:17:43,760
so there are four main parts to video

00:17:43,039 --> 00:17:46,240
codecs that

00:17:43,760 --> 00:17:47,200
pretty much all codecs are have to do

00:17:46,240 --> 00:17:48,160
there's prediction

00:17:47,200 --> 00:17:50,480
you know considering what you already

00:17:48,160 --> 00:17:52,000
know about a scene when coding the

00:17:50,480 --> 00:17:54,160
current scene

00:17:52,000 --> 00:17:56,880
transformation so you rearrange all the

00:17:54,160 --> 00:17:59,280
data so that it's in a more compact form

00:17:56,880 --> 00:18:00,320
quantization lowering the resolution of

00:17:59,280 --> 00:18:03,520
the transform data

00:18:00,320 --> 00:18:04,880
and then entropy coding and so

00:18:03,520 --> 00:18:06,720
prediction there are two kinds of

00:18:04,880 --> 00:18:08,480
prediction in video codecs

00:18:06,720 --> 00:18:10,559
there's intra prediction where you

00:18:08,480 --> 00:18:12,160
predict portions of the current frame

00:18:10,559 --> 00:18:14,160
from already decompressed portions of

00:18:12,160 --> 00:18:15,840
that frame so lower in the frame you can

00:18:14,160 --> 00:18:18,720
use references from above it

00:18:15,840 --> 00:18:21,039
and then inter prediction where you use

00:18:18,720 --> 00:18:23,520
the decoded previous frame to predict

00:18:21,039 --> 00:18:24,559
the next frame and here you can see you

00:18:23,520 --> 00:18:27,440
know for this

00:18:24,559 --> 00:18:29,120
current frame we've constructed a

00:18:27,440 --> 00:18:30,240
reference frame from the previous frames

00:18:29,120 --> 00:18:32,160
and that's the residual

00:18:30,240 --> 00:18:33,520
and there's significantly less

00:18:32,160 --> 00:18:34,160
information in the residual and so

00:18:33,520 --> 00:18:36,240
that's how

00:18:34,160 --> 00:18:38,400
most video clips get the bulk of their

00:18:36,240 --> 00:18:41,360
their compression

00:18:38,400 --> 00:18:42,000
um we do transformation so most codecs

00:18:41,360 --> 00:18:45,120
use a 2d

00:18:42,000 --> 00:18:46,320
dct which takes you know some spatial

00:18:45,120 --> 00:18:49,039
domain or some

00:18:46,320 --> 00:18:50,880
image image information image pixels

00:18:49,039 --> 00:18:53,600
applies the transform

00:18:50,880 --> 00:18:54,799
into a more sparse domain keeps just the

00:18:53,600 --> 00:18:58,640
highest coefficients

00:18:54,799 --> 00:19:00,240
and uses those as what it codes

00:18:58,640 --> 00:19:02,240
this gives us also great great

00:19:00,240 --> 00:19:03,440
compression is responsible for some of

00:19:02,240 --> 00:19:07,200
the blocky edges you see

00:19:03,440 --> 00:19:07,200
in codex like jpeg

00:19:07,840 --> 00:19:11,120
and then the last two points you know

00:19:08,799 --> 00:19:12,240
quantization encoding quantization is

00:19:11,120 --> 00:19:15,440
where we

00:19:12,240 --> 00:19:17,440
um you know we'll take those transform

00:19:15,440 --> 00:19:18,720
coefficients reduce the number of bits

00:19:17,440 --> 00:19:21,600
we use to represent them

00:19:18,720 --> 00:19:23,280
and take those bits and run them through

00:19:21,600 --> 00:19:25,039
an entropy coder that converts them into

00:19:23,280 --> 00:19:27,120
some

00:19:25,039 --> 00:19:29,919
set of numbers that has some probability

00:19:27,120 --> 00:19:32,480
distribution that's efficient

00:19:29,919 --> 00:19:34,000
and so in dollar we're going to

00:19:32,480 --> 00:19:35,760
basically do different things for all of

00:19:34,000 --> 00:19:38,160
those

00:19:35,760 --> 00:19:40,000
instead of doing just a dct we apply a

00:19:38,160 --> 00:19:42,320
lap transform

00:19:40,000 --> 00:19:43,039
which is technology that was around

00:19:42,320 --> 00:19:44,720
about

00:19:43,039 --> 00:19:46,480
20 years ago in the early 90s that was

00:19:44,720 --> 00:19:49,039
abandoned because of the computational

00:19:46,480 --> 00:19:50,400
cost and now that we've got

00:19:49,039 --> 00:19:52,720
faster computers this is now something

00:19:50,400 --> 00:19:54,400
that is tractable it also requires us to

00:19:52,720 --> 00:19:56,799
go through and do a bunch of other

00:19:54,400 --> 00:19:58,480
new techniques because none of the intra

00:19:56,799 --> 00:20:01,520
prediction and interpretation work with

00:19:58,480 --> 00:20:02,720
lap transforms exactly the same way and

00:20:01,520 --> 00:20:04,559
you know we've had to then innovate in

00:20:02,720 --> 00:20:05,520
that in that area

00:20:04,559 --> 00:20:07,840
we're going to do multi-symbol

00:20:05,520 --> 00:20:10,880
arithmetic coding

00:20:07,840 --> 00:20:12,000
most of the existing codecs do binary

00:20:10,880 --> 00:20:15,200
arithmetic coding

00:20:12,000 --> 00:20:16,640
uh context-adapted binary coding we use

00:20:15,200 --> 00:20:18,320
this great

00:20:16,640 --> 00:20:19,760
technique we borrowed from opus called

00:20:18,320 --> 00:20:21,280
perceptual vector quantization and if

00:20:19,760 --> 00:20:22,880
you were at foms yesterday

00:20:21,280 --> 00:20:25,840
jean-marc gave a great talk describing

00:20:22,880 --> 00:20:26,880
that technique and why we believe that's

00:20:25,840 --> 00:20:28,159
going to work really well for us and

00:20:26,880 --> 00:20:29,919
there's some interesting ideas around

00:20:28,159 --> 00:20:31,360
prediction where

00:20:29,919 --> 00:20:34,480
you no longer do the difference between

00:20:31,360 --> 00:20:36,000
frames and in doing so that removes

00:20:34,480 --> 00:20:37,840
our exposure to a number of patents that

00:20:36,000 --> 00:20:39,039
begin by saying take take the difference

00:20:37,840 --> 00:20:41,039
of two frames and then do this

00:20:39,039 --> 00:20:43,840
additional processing

00:20:41,039 --> 00:20:44,640
finally we do chroma from luma

00:20:43,840 --> 00:20:48,640
prediction which

00:20:44,640 --> 00:20:50,480
which is different from other codecs

00:20:48,640 --> 00:20:52,400
and um tim terryman will be talking

00:20:50,480 --> 00:20:53,200
about overlap block motion compensation

00:20:52,400 --> 00:20:55,840
next month

00:20:53,200 --> 00:20:57,200
conference and we do this clever time

00:20:55,840 --> 00:20:58,880
frequency resolution switching so all of

00:20:57,200 --> 00:21:03,039
these are kind of new techniques that

00:20:58,880 --> 00:21:04,320
are not currently used for video coding

00:21:03,039 --> 00:21:06,320
and we're going to use these in dial to

00:21:04,320 --> 00:21:07,600
try to you know

00:21:06,320 --> 00:21:09,919
have a believable story for being

00:21:07,600 --> 00:21:10,880
royalty free

00:21:09,919 --> 00:21:12,960
if you'd like to follow the work we're

00:21:10,880 --> 00:21:15,200
doing i've got

00:21:12,960 --> 00:21:16,559
a link here to some of the demos we put

00:21:15,200 --> 00:21:17,760
together these are all online

00:21:16,559 --> 00:21:20,080
and i think the slides are online that

00:21:17,760 --> 00:21:21,039
have has a link i encourage you to take

00:21:20,080 --> 00:21:23,120
a look at them if you have any interest

00:21:21,039 --> 00:21:26,080
in those specific

00:21:23,120 --> 00:21:26,799
coding techniques this is a chart that

00:21:26,080 --> 00:21:29,280
we made

00:21:26,799 --> 00:21:30,480
that sort of describes our our progress

00:21:29,280 --> 00:21:32,559
for the previous year

00:21:30,480 --> 00:21:34,400
and so what you're looking at here the

00:21:32,559 --> 00:21:38,480
red line is

00:21:34,400 --> 00:21:42,000
what h.265 does on a certain video set

00:21:38,480 --> 00:21:42,880
as of i believe november 20th of last

00:21:42,000 --> 00:21:45,039
year

00:21:42,880 --> 00:21:46,720
and then these lines here are are the

00:21:45,039 --> 00:21:47,840
dollar code base sort of over time and

00:21:46,720 --> 00:21:48,559
so we're making progress you know

00:21:47,840 --> 00:21:50,720
there's

00:21:48,559 --> 00:21:52,000
been additional work actually john mark

00:21:50,720 --> 00:21:53,280
landed code yesterday that

00:21:52,000 --> 00:21:54,799
gave another five percent improvement at

00:21:53,280 --> 00:21:55,600
sort of low rates so we're moving closer

00:21:54,799 --> 00:21:57,360
to that

00:21:55,600 --> 00:21:59,200
red line of 265 and we believe that

00:21:57,360 --> 00:22:02,080
there are many more techniques we can

00:21:59,200 --> 00:22:05,120
apply that will get us a little closer

00:22:02,080 --> 00:22:07,280
and of course you know the techniques

00:22:05,120 --> 00:22:08,720
i talked about before are really you

00:22:07,280 --> 00:22:09,919
know not the end of it there's

00:22:08,720 --> 00:22:11,360
new and innovative work that's being

00:22:09,919 --> 00:22:12,960
done in this space and for example this

00:22:11,360 --> 00:22:14,320
is a very interesting technique that

00:22:12,960 --> 00:22:17,520
lets you take

00:22:14,320 --> 00:22:19,360
the center frame that is a composite of

00:22:17,520 --> 00:22:21,919
the two other images and separate them

00:22:19,360 --> 00:22:24,960
so these are the result of doing

00:22:21,919 --> 00:22:26,080
sort of spatial or the sparsely induced

00:22:24,960 --> 00:22:28,559
prediction where you're actually able to

00:22:26,080 --> 00:22:30,400
separate two frames that were overlaid

00:22:28,559 --> 00:22:32,400
and that this has computational costs

00:22:30,400 --> 00:22:34,080
that you know may be tractable

00:22:32,400 --> 00:22:35,840
you know in the next few years so there

00:22:34,080 --> 00:22:37,200
are ideas that are new that haven't been

00:22:35,840 --> 00:22:38,240
currently deployed

00:22:37,200 --> 00:22:40,720
that we believe we can get a lot of

00:22:38,240 --> 00:22:44,960
gains out of

00:22:40,720 --> 00:22:46,960
so what's the road ahead look like um

00:22:44,960 --> 00:22:48,080
you know as that slide showed we've been

00:22:46,960 --> 00:22:49,360
we've been making some progress with

00:22:48,080 --> 00:22:52,880
these new techniques we had to

00:22:49,360 --> 00:22:52,880
sort of innovate and

00:22:52,960 --> 00:22:57,520
find new ways to to work around problems

00:22:55,520 --> 00:22:58,799
introduced by using lap transforms but

00:22:57,520 --> 00:23:02,000
there's still a long way to go

00:22:58,799 --> 00:23:06,960
um the industry is currently looking at

00:23:02,000 --> 00:23:08,159
deploying 265 hevc which is 265 and vp9

00:23:06,960 --> 00:23:09,440
so they're not really focused on the

00:23:08,159 --> 00:23:10,720
next next generation they've got a lot

00:23:09,440 --> 00:23:12,880
of work ahead of them

00:23:10,720 --> 00:23:13,840
but we'd like to you know take that

00:23:12,880 --> 00:23:15,600
opportunity to

00:23:13,840 --> 00:23:17,039
to innovate and make dala something that

00:23:15,600 --> 00:23:19,520
will be competitive

00:23:17,039 --> 00:23:21,280
so we'd love to get help from people and

00:23:19,520 --> 00:23:22,400
we just in particular are looking for

00:23:21,280 --> 00:23:25,679
application domains

00:23:22,400 --> 00:23:27,919
where um you know there's some novel

00:23:25,679 --> 00:23:29,600
novel use case that isn't currently

00:23:27,919 --> 00:23:30,559
covered by video codecs and if there's

00:23:29,600 --> 00:23:31,679
something that you think would be

00:23:30,559 --> 00:23:34,799
interesting

00:23:31,679 --> 00:23:36,080
maybe around you know video conferencing

00:23:34,799 --> 00:23:37,520
or any of those areas please

00:23:36,080 --> 00:23:39,520
talk to us let us know we'd like to

00:23:37,520 --> 00:23:42,880
accommodate that

00:23:39,520 --> 00:23:45,600
all right so i'm moving for questions

00:23:42,880 --> 00:23:45,600
thank you very much

00:23:49,279 --> 00:23:53,440
so we have time for one or two questions

00:23:55,360 --> 00:23:59,840
are you going to propose the data to our

00:23:57,360 --> 00:24:01,520
standards

00:23:59,840 --> 00:24:02,720
uh absolutely in fact we're going to be

00:24:01,520 --> 00:24:03,520
working with the center's body hopefully

00:24:02,720 --> 00:24:06,000
before we

00:24:03,520 --> 00:24:06,880
oh i'm sorry so to repeat the question

00:24:06,000 --> 00:24:09,760
the question was

00:24:06,880 --> 00:24:11,679
will we be um proposing dolla to a

00:24:09,760 --> 00:24:12,880
sarah's body at completion

00:24:11,679 --> 00:24:15,120
and the answer to that is that we're

00:24:12,880 --> 00:24:16,159
actually talking with the itf and

00:24:15,120 --> 00:24:18,559
forming a working group

00:24:16,159 --> 00:24:19,679
hopefully soon to do development of

00:24:18,559 --> 00:24:21,760
video codex

00:24:19,679 --> 00:24:23,200
in a public process so even before we

00:24:21,760 --> 00:24:23,919
have you know this is just one of the

00:24:23,200 --> 00:24:25,360
ideas

00:24:23,919 --> 00:24:27,039
um even before we've gotten everything

00:24:25,360 --> 00:24:28,480
finalized we'd love to engage

00:24:27,039 --> 00:24:31,840
a standards body maybe bring in other

00:24:28,480 --> 00:24:34,640
partners to give us uh contributions

00:24:31,840 --> 00:24:37,360
the community and get that done long

00:24:34,640 --> 00:24:37,360
before we're complete

00:24:39,440 --> 00:24:46,880
um you won't much am x

00:24:42,960 --> 00:24:50,960
265 but uh what about um

00:24:46,880 --> 00:24:55,520
well the uh cpu usage because the x6

00:24:50,960 --> 00:24:57,039
265 is really heavy right

00:24:55,520 --> 00:24:58,799
right yeah so we we run tests against

00:24:57,039 --> 00:25:01,360
two so the question was how does the cpu

00:24:58,799 --> 00:25:04,320
usage of dollar compare to 265

00:25:01,360 --> 00:25:05,279
we run benchmarks against 265 and

00:25:04,320 --> 00:25:08,480
currently we are

00:25:05,279 --> 00:25:11,039
we run significantly faster than them

00:25:08,480 --> 00:25:12,000
on their reference model our goal is to

00:25:11,039 --> 00:25:14,000
develop

00:25:12,000 --> 00:25:15,679
not just a reference model but also a

00:25:14,000 --> 00:25:18,240
production quality

00:25:15,679 --> 00:25:20,159
uh code that we can release you know

00:25:18,240 --> 00:25:21,360
under the zip mozilla heading that could

00:25:20,159 --> 00:25:24,000
be used to actually

00:25:21,360 --> 00:25:25,360
do this in software um at a performant

00:25:24,000 --> 00:25:26,559
rate you know from day one we're not

00:25:25,360 --> 00:25:28,960
going to

00:25:26,559 --> 00:25:30,320
you know just have ideas that will be

00:25:28,960 --> 00:25:31,840
you know hope that the cpu performance

00:25:30,320 --> 00:25:33,279
will improve over time so we're

00:25:31,840 --> 00:25:35,279
designing techniques that

00:25:33,279 --> 00:25:36,799
make use of this our entropy coder for

00:25:35,279 --> 00:25:42,480
example is designed to work really well

00:25:36,799 --> 00:25:45,520
with cindy

00:25:42,480 --> 00:25:47,279
um no i i think

00:25:45,520 --> 00:25:49,200
the techniques we're using have not been

00:25:47,279 --> 00:25:51,039
finalized there's a lot of optimization

00:25:49,200 --> 00:25:53,679
we have not done

00:25:51,039 --> 00:25:55,360
so the x264 has gone through and done

00:25:53,679 --> 00:25:58,480
assembly translations of

00:25:55,360 --> 00:25:59,679
some of the transformations and and

00:25:58,480 --> 00:26:00,799
motion search and we haven't done

00:25:59,679 --> 00:26:01,840
anything like that at all so there's

00:26:00,799 --> 00:26:04,720
still lots of room for

00:26:01,840 --> 00:26:04,720
additional performance

00:26:05,120 --> 00:26:08,720
okay so we'll stop here thank you very

00:26:08,159 --> 00:26:11,840
much

00:26:08,720 --> 00:26:11,840
and congratulations

00:26:12,559 --> 00:26:18,320
okay thank you you did a full room

00:26:15,679 --> 00:26:19,679
so maybe next year we need a bigger room

00:26:18,320 --> 00:26:25,840
hopefully

00:26:19,679 --> 00:26:27,919
right so the next stop will be

00:26:25,840 --> 00:26:27,919

YouTube URL: https://www.youtube.com/watch?v=UW4lmSYGZcQ


