Title: MySQL 8.0: Secure your MySQL Replication Deployment
Publication date: 2020-07-15
Playlist: FOSDEM 2020
Description: 
	by Pedro Figueiredo

At: FOSDEM 2020
https://video.fosdem.org/2020/H.2214/mysql8_secure_replication.webm

Data protection is an extensive and hot topic. Making sure that
whoever accesses your data has identity well established and is
authorized can be a complex and hard task. Moreover, nowadays
data tends to move around quickly between different instances of the
same service, different services and different data consumers.  This
often implies that data traverses different administrative domains. It
is key that MySQL handles, stores and replicates data complying
with the security requirements that business and regulations demand.


This session showcases the new developments in MySQL 8.0 that tighten
related replication security setups, and reduce the attack surface of
the different replication topologies. We will talk about secure
inter-server communication, encryption of replication data at rest
and the new features that make the replication applier run under a
specific security context. Come and learn about security related
replication features in MySQL 8.0.

Room: H.2214
Scheduled start: 2020-02-01 16:40:00
Captions: 
	00:00:05,279 --> 00:00:09,280
hi everyone

00:00:06,399 --> 00:00:11,360
i'm here uh today to to share with you

00:00:09,280 --> 00:00:15,679
some developments we've

00:00:11,360 --> 00:00:19,359
made in in mysql regarding

00:00:15,679 --> 00:00:24,160
the safety of the replication stream

00:00:19,359 --> 00:00:28,080
and how to protect data that is being

00:00:24,160 --> 00:00:30,560
replicated so

00:00:28,080 --> 00:00:31,519
what is exactly the the problem we are

00:00:30,560 --> 00:00:35,200
trying to solve so

00:00:31,519 --> 00:00:38,960
uh usually a slave just uh

00:00:35,200 --> 00:00:41,840
applies the events that the master sends

00:00:38,960 --> 00:00:42,719
despite uh the content it doesn't check

00:00:41,840 --> 00:00:45,760
for privilege

00:00:42,719 --> 00:00:46,640
nothing so we we just want to mirror the

00:00:45,760 --> 00:00:49,680
data that is

00:00:46,640 --> 00:00:53,600
on the master and put it on the

00:00:49,680 --> 00:00:57,600
slave so this is fine

00:00:53,600 --> 00:01:01,280
in in most cases but

00:00:57,600 --> 00:01:05,280
after we added multi-source replication

00:01:01,280 --> 00:01:09,520
we had this uh a bunch of new use cases

00:01:05,280 --> 00:01:13,600
like uh we could use this for that

00:01:09,520 --> 00:01:17,040
aggregation or that uh consolidation

00:01:13,600 --> 00:01:18,720
so we have a lot of data from different

00:01:17,040 --> 00:01:21,759
servers

00:01:18,720 --> 00:01:24,799
to be replicated to in into the

00:01:21,759 --> 00:01:27,520
same slave so

00:01:24,799 --> 00:01:29,280
at this point we have like big uh

00:01:27,520 --> 00:01:32,640
organizations that have multiple

00:01:29,280 --> 00:01:35,119
data entry points and uh

00:01:32,640 --> 00:01:37,280
they need to aggregate this data in and

00:01:35,119 --> 00:01:40,799
consolidate it in into a single

00:01:37,280 --> 00:01:44,000
database for instance and

00:01:40,799 --> 00:01:46,880
since the the the slave doesn't have any

00:01:44,000 --> 00:01:46,880
tools to

00:01:47,680 --> 00:01:50,560
enforce rules

00:01:51,200 --> 00:01:59,040
on the data this may

00:01:54,560 --> 00:02:02,880
uh break what what you are trying to

00:01:59,040 --> 00:02:05,680
do so basically

00:02:02,880 --> 00:02:05,680
we try to

00:02:06,560 --> 00:02:10,640
implement a set of options and and and

00:02:09,200 --> 00:02:14,720
features that

00:02:10,640 --> 00:02:18,879
could make the slave protect

00:02:14,720 --> 00:02:22,160
himself so okay

00:02:18,879 --> 00:02:26,080
so we needed to

00:02:22,160 --> 00:02:29,920
to assure that data is being encrypted

00:02:26,080 --> 00:02:33,360
both on the wire and on the disk

00:02:29,920 --> 00:02:34,239
that dml and nddl statement level

00:02:33,360 --> 00:02:37,200
privileges

00:02:34,239 --> 00:02:38,160
can be enforced on the slave so that if

00:02:37,200 --> 00:02:41,040
i don't want

00:02:38,160 --> 00:02:41,599
data to be deleted from a table ever i

00:02:41,040 --> 00:02:44,879
do not

00:02:41,599 --> 00:02:49,200
accept uh delete statement

00:02:44,879 --> 00:02:52,239
and that the differences between

00:02:49,200 --> 00:02:54,800
the the servers uh uh

00:02:52,239 --> 00:02:55,840
configuration the masters configuration

00:02:54,800 --> 00:02:58,239
do not clash

00:02:55,840 --> 00:02:59,519
while we are consolidating and

00:02:58,239 --> 00:03:03,120
aggregating the

00:02:59,519 --> 00:03:03,120
data so

00:03:03,519 --> 00:03:10,159
so how can we uh accomplish this

00:03:06,959 --> 00:03:14,400
so basically we um

00:03:10,159 --> 00:03:18,000
use a set of options the first one

00:03:14,400 --> 00:03:21,840
is we should use always encrypted

00:03:18,000 --> 00:03:25,040
channels so we should uh turn on

00:03:21,840 --> 00:03:27,599
uh dssl encryption and always use the

00:03:25,040 --> 00:03:28,080
deleted supported versions of the tls

00:03:27,599 --> 00:03:31,519
and

00:03:28,080 --> 00:03:34,159
nssl so this is been around for

00:03:31,519 --> 00:03:34,159
quite some time

00:03:36,400 --> 00:03:44,480
so also we should always

00:03:40,400 --> 00:03:44,879
use uh encryption on the binary log and

00:03:44,480 --> 00:03:47,920
on the

00:03:44,879 --> 00:03:51,200
the relay log even if we

00:03:47,920 --> 00:03:53,360
uh try to at an organizational uh

00:03:51,200 --> 00:03:54,640
level try to say you uh the master

00:03:53,360 --> 00:03:57,439
should should not

00:03:54,640 --> 00:03:58,080
replicate sensitive data and whatnot

00:03:57,439 --> 00:04:01,840
that could

00:03:58,080 --> 00:04:01,840
still happen so we should

00:04:03,280 --> 00:04:07,040
comply with that data privacy laws so we

00:04:06,000 --> 00:04:10,879
should

00:04:07,040 --> 00:04:15,120
turn on bin log encryption actually

00:04:10,879 --> 00:04:18,799
so we we can do it in

00:04:15,120 --> 00:04:21,840
three ways uh parameters

00:04:18,799 --> 00:04:24,800
when we run the mask mysqld

00:04:21,840 --> 00:04:26,160
we can just set it globally uh in the in

00:04:24,800 --> 00:04:29,360
mysql shell

00:04:26,160 --> 00:04:33,520
and persist it or add the the

00:04:29,360 --> 00:04:35,759
configuration to the to the config file

00:04:33,520 --> 00:04:36,960
we can always use a performance schema

00:04:35,759 --> 00:04:41,440
to check

00:04:36,960 --> 00:04:44,160
if our encryption is on and and properly

00:04:41,440 --> 00:04:44,160
configurated

00:04:46,800 --> 00:04:55,280
so a third step

00:04:50,479 --> 00:04:58,639
is to only allow for role-based

00:04:55,280 --> 00:05:01,680
replication okay so uh um

00:04:58,639 --> 00:05:02,560
allowing a certain peso uh replication

00:05:01,680 --> 00:05:05,919
makes

00:05:02,560 --> 00:05:06,400
us re re-execute the statements on the

00:05:05,919 --> 00:05:08,320
or

00:05:06,400 --> 00:05:09,840
on the slave side and this can be a

00:05:08,320 --> 00:05:13,919
problem

00:05:09,840 --> 00:05:17,680
especially if we if we are

00:05:13,919 --> 00:05:20,960
running we are

00:05:17,680 --> 00:05:24,240
especially if we are trying to to impose

00:05:20,960 --> 00:05:28,960
data level rules that

00:05:24,240 --> 00:05:32,960
can be overcome with second-best

00:05:28,960 --> 00:05:36,560
replication okay uh a few examples

00:05:32,960 --> 00:05:40,320
like star procedures or functions or

00:05:36,560 --> 00:05:43,360
the load the data uh the load data uh

00:05:40,320 --> 00:05:46,560
uh event and and command which

00:05:43,360 --> 00:05:47,919
makes us write the whole file into disk

00:05:46,560 --> 00:05:50,639
and then

00:05:47,919 --> 00:05:52,400
execute it if we use robustware

00:05:50,639 --> 00:05:55,280
replication this doesn't happen

00:05:52,400 --> 00:05:56,400
we do not re-execute anything we just

00:05:55,280 --> 00:06:00,479
apply the rows

00:05:56,400 --> 00:06:03,520
and the data changes okay so how can we

00:06:00,479 --> 00:06:04,639
accomplish this so we added a new option

00:06:03,520 --> 00:06:07,199
to

00:06:04,639 --> 00:06:07,840
to change master so you can actually do

00:06:07,199 --> 00:06:11,120
this per

00:06:07,840 --> 00:06:13,039
channel okay so you you can have some

00:06:11,120 --> 00:06:14,639
some masters you you you trust more that

00:06:13,039 --> 00:06:18,479
you may

00:06:14,639 --> 00:06:22,080
may not use it so we just

00:06:18,479 --> 00:06:25,280
use the option and just use it one and

00:06:22,080 --> 00:06:28,080
then the the on this stream

00:06:25,280 --> 00:06:29,120
the the slave will will only accept

00:06:28,080 --> 00:06:32,639
events that are

00:06:29,120 --> 00:06:32,639
in raw farm format

00:06:32,840 --> 00:06:38,479
so the uh

00:06:35,600 --> 00:06:39,440
the the slave does not filter out

00:06:38,479 --> 00:06:42,960
statement based

00:06:39,440 --> 00:06:47,199
uh replication okay so if

00:06:42,960 --> 00:06:49,520
if a statement if a statement is

00:06:47,199 --> 00:06:50,400
received in if an event is receiving

00:06:49,520 --> 00:06:53,199
statement to

00:06:50,400 --> 00:06:53,840
format the the replication will will

00:06:53,199 --> 00:06:57,440
stop

00:06:53,840 --> 00:07:00,800
okay and then error will be logged

00:06:57,440 --> 00:07:03,759
okay we can check uh the

00:07:00,800 --> 00:07:04,800
the value of the of the option again

00:07:03,759 --> 00:07:09,199
using uh

00:07:04,800 --> 00:07:09,199
performance schema so you can check it

00:07:10,960 --> 00:07:14,479
next next step

00:07:14,840 --> 00:07:20,479
so

00:07:17,280 --> 00:07:21,599
we have an option in in mysql is called

00:07:20,479 --> 00:07:24,720
sql

00:07:21,599 --> 00:07:26,720
require primary key where we enforce

00:07:24,720 --> 00:07:30,560
that

00:07:26,720 --> 00:07:33,599
a table needs to have a primary key

00:07:30,560 --> 00:07:37,120
so when we are uh replicating

00:07:33,599 --> 00:07:40,319
uh uh data from master to uh

00:07:37,120 --> 00:07:42,880
to a slave usually the the the

00:07:40,319 --> 00:07:44,879
the the slave the default behavior is

00:07:42,880 --> 00:07:48,800
that the slave will just

00:07:44,879 --> 00:07:51,680
set the value for the session

00:07:48,800 --> 00:07:52,479
for the player session that comes from

00:07:51,680 --> 00:07:56,879
the master

00:07:52,479 --> 00:07:59,120
so if the master is running with sql

00:07:56,879 --> 00:08:00,560
primary key to one the slave will set it

00:07:59,120 --> 00:08:04,400
one and then

00:08:00,560 --> 00:08:06,960
apply a pi apply what this makes is that

00:08:04,400 --> 00:08:08,240
different masters may have different

00:08:06,960 --> 00:08:12,319
configurations

00:08:08,240 --> 00:08:14,800
and you you if we are uh

00:08:12,319 --> 00:08:15,680
to to the same slave it may be it it may

00:08:14,800 --> 00:08:19,599
happen that we have

00:08:15,680 --> 00:08:22,160
uh distinct behaviors and we are not

00:08:19,599 --> 00:08:23,520
being able to say on the slave i require

00:08:22,160 --> 00:08:26,960
this or i do

00:08:23,520 --> 00:08:30,240
do not really require this so we

00:08:26,960 --> 00:08:32,320
introduced this this new option if we

00:08:30,240 --> 00:08:35,680
set it to one

00:08:32,320 --> 00:08:36,479
the the the slave just disregards what

00:08:35,680 --> 00:08:39,519
comes from

00:08:36,479 --> 00:08:43,440
from the master and we'll always

00:08:39,519 --> 00:08:46,800
check for primary keys if it's too off

00:08:43,440 --> 00:08:48,959
the the the opposite behavior so

00:08:46,800 --> 00:08:49,839
the slave will just disregard what comes

00:08:48,959 --> 00:08:53,120
from

00:08:49,839 --> 00:08:56,640
from the master and will

00:08:53,120 --> 00:08:59,360
no no not check so we should

00:08:56,640 --> 00:09:00,720
if we are if we are trying to protect

00:08:59,360 --> 00:09:04,800
our side we should always

00:09:00,720 --> 00:09:07,839
put it on all channels to one value or

00:09:04,800 --> 00:09:10,880
the other value okay

00:09:07,839 --> 00:09:11,920
there is a a search value for the option

00:09:10,880 --> 00:09:15,040
which is stream

00:09:11,920 --> 00:09:16,560
which is the current behavior so if if

00:09:15,040 --> 00:09:18,640
you set to

00:09:16,560 --> 00:09:19,839
to stream we are not protecting anything

00:09:18,640 --> 00:09:23,839
okay so

00:09:19,839 --> 00:09:23,839
just on and off

00:09:27,600 --> 00:09:31,839
sorry what happens if you are so you're

00:09:29,839 --> 00:09:34,320
checking the upstream master for what

00:09:31,839 --> 00:09:34,320
setting is

00:09:35,040 --> 00:09:41,760
if if the option is stream we just

00:09:38,080 --> 00:09:44,880
set it it's the current behavior so

00:09:41,760 --> 00:09:46,160
the slave sets the option for the

00:09:44,880 --> 00:09:51,839
session

00:09:46,160 --> 00:09:51,839
that comes from the master

00:09:56,800 --> 00:10:00,080
if he doesn't come in in the event

00:09:58,720 --> 00:10:05,839
stream it's

00:10:00,080 --> 00:10:05,839
it it's not an issue yes

00:10:23,519 --> 00:10:30,160
okay so again we can

00:10:27,360 --> 00:10:31,360
use the performance schema to check the

00:10:30,160 --> 00:10:33,839
value of

00:10:31,360 --> 00:10:33,839
on our

00:10:34,399 --> 00:10:41,839
on our option and

00:10:37,600 --> 00:10:45,360
finally the final step we can

00:10:41,839 --> 00:10:48,000
start using the replication applier

00:10:45,360 --> 00:10:49,120
we can enforce the replication applier

00:10:48,000 --> 00:10:52,959
to run

00:10:49,120 --> 00:10:54,880
within a given user security context

00:10:52,959 --> 00:10:56,000
this means that the applier will

00:10:54,880 --> 00:10:58,480
actually do

00:10:56,000 --> 00:10:59,600
privileged checks on every event that

00:10:58,480 --> 00:11:03,680
comes over the wire

00:10:59,600 --> 00:11:06,720
so this is to set it up is is

00:11:03,680 --> 00:11:10,240
is quite simple we just

00:11:06,720 --> 00:11:13,440
create a user we need to grant this

00:11:10,240 --> 00:11:16,399
new privilege to the to the user

00:11:13,440 --> 00:11:19,040
because this we are saying that we are

00:11:16,399 --> 00:11:23,120
allowing the user to be used

00:11:19,040 --> 00:11:26,480
as the the the context

00:11:23,120 --> 00:11:29,600
uh for for the for the server uh player

00:11:26,480 --> 00:11:32,480
then we can grant whatever set of

00:11:29,600 --> 00:11:33,360
of privileges we need so we if we don't

00:11:32,480 --> 00:11:37,040
want

00:11:33,360 --> 00:11:40,640
the uh records to be deleted ever

00:11:37,040 --> 00:11:42,720
when we are uh consul pulling the

00:11:40,640 --> 00:11:44,079
data we just don't need for instance the

00:11:42,720 --> 00:11:48,160
delete

00:11:44,079 --> 00:11:51,680
privilege and if some if some uh

00:11:48,160 --> 00:11:55,440
delete statement uh duty event uh

00:11:51,680 --> 00:11:58,959
appears replication will will just stop

00:11:55,440 --> 00:11:59,680
okay so this this is a way for us to say

00:11:58,959 --> 00:12:03,360
okay

00:11:59,680 --> 00:12:08,720
this channel will just have this

00:12:03,360 --> 00:12:08,720
privilege privileges to apply the paper

00:12:08,839 --> 00:12:14,160
um

00:12:10,959 --> 00:12:18,639
yes the application will stop we'll stop

00:12:14,160 --> 00:12:22,079
for that channel so not that statement

00:12:18,639 --> 00:12:22,079
stop so yes

00:12:22,880 --> 00:12:27,360
if uh if a privilege check is not is not

00:12:25,120 --> 00:12:27,360
uh

00:12:27,440 --> 00:12:34,639
checked successfully it will stop yes

00:12:31,839 --> 00:12:35,120
and uh error logging will be sent to the

00:12:34,639 --> 00:12:37,440
to the

00:12:35,120 --> 00:12:39,120
to the error log it will stop for that

00:12:37,440 --> 00:12:42,240
channel okay not

00:12:39,120 --> 00:12:45,680
for all other channels so we can

00:12:42,240 --> 00:12:49,680
again use the performance schema to to

00:12:45,680 --> 00:12:53,279
to to check the the the status of our

00:12:49,680 --> 00:12:56,000
option so

00:12:53,279 --> 00:12:57,680
some references so the manual and some

00:12:56,000 --> 00:13:01,600
blog posts that

00:12:57,680 --> 00:13:05,839
discuss all all of these in detail

00:13:01,600 --> 00:13:07,680
and that's it any

00:13:05,839 --> 00:13:09,680
one thing i played with rep server with

00:13:07,680 --> 00:13:11,680
cybase like 12 years ago

00:13:09,680 --> 00:13:12,720
sorry one of the features it had which

00:13:11,680 --> 00:13:14,880
is your this is

00:13:12,720 --> 00:13:16,240
very similar to the features that were

00:13:14,880 --> 00:13:19,040
available there was that

00:13:16,240 --> 00:13:20,160
uh something i used was a previous job

00:13:19,040 --> 00:13:22,399
was to

00:13:20,160 --> 00:13:24,240
ignore the statement so for example

00:13:22,399 --> 00:13:25,680
things that turn up on the consolidated

00:13:24,240 --> 00:13:26,720
system we didn't want to do with crop

00:13:25,680 --> 00:13:28,959
tables or to

00:13:26,720 --> 00:13:30,880
delete data so we basically said if you

00:13:28,959 --> 00:13:32,720
see a delete just ignore it

00:13:30,880 --> 00:13:33,839
okay um and they didn't generate an

00:13:32,720 --> 00:13:34,720
error it just said oh i've got to leave

00:13:33,839 --> 00:13:36,160
these rows where i won't

00:13:34,720 --> 00:13:38,240
you obviously then have to set up your

00:13:36,160 --> 00:13:38,720
tables to have the structure to support

00:13:38,240 --> 00:13:40,880
that

00:13:38,720 --> 00:13:42,240
but if you do that then you just say

00:13:40,880 --> 00:13:43,920
okay it's the truncate table

00:13:42,240 --> 00:13:45,760
i won't allow some gate i'll just ignore

00:13:43,920 --> 00:13:47,519
it and that allowed things to flow

00:13:45,760 --> 00:13:49,920
through completely cleanly

00:13:47,519 --> 00:13:50,800
with on the upstream system the oltp

00:13:49,920 --> 00:13:52,880
systems

00:13:50,800 --> 00:13:55,120
deleting stuff and painting tables doing

00:13:52,880 --> 00:13:55,839
things which made sense for the rtp

00:13:55,120 --> 00:13:59,040
types

00:13:55,839 --> 00:13:59,920
but the analytical part just ignored

00:13:59,040 --> 00:14:01,199
certain things

00:13:59,920 --> 00:14:03,040
because it didn't make sense and they

00:14:01,199 --> 00:14:04,720
didn't want to remove that stuff

00:14:03,040 --> 00:14:06,480
and that that was very that was very

00:14:04,720 --> 00:14:08,560
useful a feature like that

00:14:06,480 --> 00:14:09,600
i could see being being useful also here

00:14:08,560 --> 00:14:13,120
in my sequel yes

00:14:09,600 --> 00:14:15,920
yes in raw bass it might be complicated

00:14:13,120 --> 00:14:17,199
you know not because uh a rep service is

00:14:15,920 --> 00:14:18,959
exactly the same thing you may

00:14:17,199 --> 00:14:21,040
need to add extra columns into or you

00:14:18,959 --> 00:14:23,440
need to do some things to make it

00:14:21,040 --> 00:14:24,720
to make the aggregation work that way

00:14:23,440 --> 00:14:27,120
but uh

00:14:24,720 --> 00:14:28,320
clearly often you don't want in some

00:14:27,120 --> 00:14:29,360
types of systems you just don't want to

00:14:28,320 --> 00:14:31,199
delete the data

00:14:29,360 --> 00:14:32,959
but it may be that as long as you don't

00:14:31,199 --> 00:14:34,480
overwrite the existing data you generate

00:14:32,959 --> 00:14:36,639
new rows which don't overlap

00:14:34,480 --> 00:14:37,839
you also have to design your data model

00:14:36,639 --> 00:14:40,399
to handle that

00:14:37,839 --> 00:14:41,040
then you can do something like this uh

00:14:40,399 --> 00:14:44,079
very well

00:14:41,040 --> 00:14:45,440
because if replication breaks that's

00:14:44,079 --> 00:14:47,360
yeah that's what i was asking that

00:14:45,440 --> 00:14:49,920
earlier right but they didn't know us

00:14:47,360 --> 00:14:50,800
but no they look like nice things and i

00:14:49,920 --> 00:14:54,959
can see a lot of people

00:14:50,800 --> 00:14:54,959
or some people having a use case for all

00:14:56,839 --> 00:15:11,839
that

00:14:58,800 --> 00:15:11,839

YouTube URL: https://www.youtube.com/watch?v=-Bf1ZJL3ij0


