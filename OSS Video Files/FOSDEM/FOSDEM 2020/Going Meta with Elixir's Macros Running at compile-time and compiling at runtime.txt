Title: Going Meta with Elixir's Macros Running at compile-time and compiling at runtime
Publication date: 2020-07-10
Playlist: FOSDEM 2020
Description: 
	by Wiebe-Marten Wijnja

At: FOSDEM 2020
https://video.fosdem.org/2020/AW1.121/beam_going_meta_elixir_macros.webm

Compilation and execution are as different as night and day. Or are they? By blurring the lines, Elixir (and the BEAM VM) enable some very powerful and useful meta-programming techniques.


In this presentation, Marten will talk about running and generating code at compile-time, Elixir's hygienic macros, and how to compile and hot-reload altered or extra code, while your program is running!
Besides explaining these concepts, their usefulness will be motivated using various practical real-world examples.

Room: AW1.121
Scheduled start: 2020-02-01 12:30:00
Captions: 
	00:00:04,760 --> 00:00:10,980
start for the next talk we can have

00:00:07,620 --> 00:00:14,400
Martin present he's been a regular at

00:00:10,980 --> 00:00:18,740
various elixir coughs with as both an

00:00:14,400 --> 00:00:21,600
attendee and as a speaker he has a very

00:00:18,740 --> 00:00:26,940
extensive collection of libraries that

00:00:21,600 --> 00:00:30,180
you can all look into and abuse over it

00:00:26,940 --> 00:00:35,670
is github account which would be I guess

00:00:30,180 --> 00:00:38,100
github.com /qq WI and yeah he's also an

00:00:35,670 --> 00:00:40,230
Alexa forum moderator and without

00:00:38,100 --> 00:00:49,289
further ado let's give it up for Martin

00:00:40,230 --> 00:00:51,659
first off going meta with us so welcome

00:00:49,289 --> 00:00:55,679
everyone I'll be talking about going

00:00:51,659 --> 00:00:58,069
meta with elixir so what does it mean to

00:00:55,679 --> 00:01:00,659
go meta well within the context of

00:00:58,069 --> 00:01:02,639
programming matter programming it means

00:01:00,659 --> 00:01:04,769
that rather than just while writing a

00:01:02,639 --> 00:01:06,960
program that takes some data as input

00:01:04,769 --> 00:01:09,390
and transforms this data and perform

00:01:06,960 --> 00:01:12,000
some tasks as output it actually treats

00:01:09,390 --> 00:01:16,380
the program itself as data that it can

00:01:12,000 --> 00:01:19,170
create and modify while it is running so

00:01:16,380 --> 00:01:21,450
in this talk I'm going to explain to you

00:01:19,170 --> 00:01:22,979
in what ways elixir helps you with doing

00:01:21,450 --> 00:01:24,689
meta programming and why this is useful

00:01:22,979 --> 00:01:27,630
and give you a couple of very practical

00:01:24,689 --> 00:01:29,100
real-life examples of course some of

00:01:27,630 --> 00:01:31,409
these examples have been trimmed down

00:01:29,100 --> 00:01:34,020
somewhat so my code fits on the slides

00:01:31,409 --> 00:01:35,850
and this talk is geared towards an

00:01:34,020 --> 00:01:37,799
audience of people who may be new to

00:01:35,850 --> 00:01:39,840
elixir or may already know a little bit

00:01:37,799 --> 00:01:42,780
of an exhibit and new to for instance

00:01:39,840 --> 00:01:44,670
programming with macros it's not a

00:01:42,780 --> 00:01:45,990
problem if you cannot follow along with

00:01:44,670 --> 00:01:47,759
all the code examples that I'll show you

00:01:45,990 --> 00:01:49,950
it will all be very quick because we

00:01:47,759 --> 00:01:53,340
only have 20 minutes but I will link to

00:01:49,950 --> 00:01:55,170
a lot of resources and show you many

00:01:53,340 --> 00:01:56,549
names of where you can find the stuff

00:01:55,170 --> 00:01:59,659
that I'm talking about so you can read

00:01:56,549 --> 00:01:59,659
about it in more detail

00:02:00,259 --> 00:02:05,729
so in elixir there are two main

00:02:03,390 --> 00:02:08,340
techniques that you can use to do meta

00:02:05,729 --> 00:02:11,100
programming we can both influence how

00:02:08,340 --> 00:02:13,200
code is actually being compiled while

00:02:11,100 --> 00:02:15,510
you're creating your program and once

00:02:13,200 --> 00:02:17,940
your program is running we can also

00:02:15,510 --> 00:02:19,590
change what code the

00:02:17,940 --> 00:02:21,420
Grahame itself actually consists of and

00:02:19,590 --> 00:02:23,790
this might still sound a little bit

00:02:21,420 --> 00:02:25,980
vague but I will explain to you why

00:02:23,790 --> 00:02:28,320
these two techniques are very useful so

00:02:25,980 --> 00:02:29,750
let us first start with running code at

00:02:28,320 --> 00:02:32,220
compile time

00:02:29,750 --> 00:02:34,290
the simplest the most general technique

00:02:32,220 --> 00:02:36,540
to use to do this is dynamic compilation

00:02:34,290 --> 00:02:39,120
if we have an elixir module like this

00:02:36,540 --> 00:02:42,000
simple example here that has a single

00:02:39,120 --> 00:02:45,600
function to compute the Fibonacci the

00:02:42,000 --> 00:02:47,820
nth Fibonacci number then all the part

00:02:45,600 --> 00:02:50,520
that is inside the function clauses is

00:02:47,820 --> 00:02:51,750
it's called at run time when the program

00:02:50,520 --> 00:02:54,570
is actually running and someone calls

00:02:51,750 --> 00:02:57,270
this function however all the parts

00:02:54,570 --> 00:03:00,030
outside of the function are evaluated at

00:02:57,270 --> 00:03:01,920
compile time and you can use any elixir

00:03:00,030 --> 00:03:03,480
code including of modules you wrote

00:03:01,920 --> 00:03:06,900
yourself that have already been compiled

00:03:03,480 --> 00:03:08,850
and just call that stuff over here and

00:03:06,900 --> 00:03:12,180
it will run at compile time and do all

00:03:08,850 --> 00:03:15,030
kinds of interesting stuff as a very

00:03:12,180 --> 00:03:18,480
simple example we can just use an if

00:03:15,030 --> 00:03:21,030
statement to conditionally compile one

00:03:18,480 --> 00:03:23,220
implementation or another or use one

00:03:21,030 --> 00:03:25,260
implementation and raise an error at

00:03:23,220 --> 00:03:27,090
compile time to explain hey would you

00:03:25,260 --> 00:03:29,010
can't use this feature you cannot use

00:03:27,090 --> 00:03:31,170
this library because we're missing some

00:03:29,010 --> 00:03:35,700
very important thing that underlying

00:03:31,170 --> 00:03:38,370
runtime should provide so then that way

00:03:35,700 --> 00:03:40,020
we can propagate errors to show you

00:03:38,370 --> 00:03:42,000
errors early during the development

00:03:40,020 --> 00:03:44,570
cycle so you get very quick feedback

00:03:42,000 --> 00:03:46,890
which is a lot nicer than finding out

00:03:44,570 --> 00:03:49,019
only once your program is running or

00:03:46,890 --> 00:03:50,760
once your program is deployed so let's

00:03:49,019 --> 00:03:54,180
go back to our Fibonacci example that we

00:03:50,760 --> 00:03:55,680
used before now this code is this is

00:03:54,180 --> 00:03:57,540
very naive implementation of the

00:03:55,680 --> 00:04:00,060
Fibonacci function and there are some

00:03:57,540 --> 00:04:01,470
very clever ways to make it faster but

00:04:00,060 --> 00:04:03,090
this is to talk about meta programming

00:04:01,470 --> 00:04:05,700
so we're going to solve this problem

00:04:03,090 --> 00:04:08,820
with meta programming one thing we could

00:04:05,700 --> 00:04:10,380
do is to pre calculate a couple of known

00:04:08,820 --> 00:04:13,920
results to the Fibonacci function and

00:04:10,380 --> 00:04:16,859
then use a for loop to iterate over

00:04:13,920 --> 00:04:18,570
these known results and define function

00:04:16,859 --> 00:04:21,180
clauses for each of these known results

00:04:18,570 --> 00:04:24,110
so now the Fibonacci function does not

00:04:21,180 --> 00:04:26,310
need to recurse for these simple

00:04:24,110 --> 00:04:30,349
function calls and that makes it a lot

00:04:26,310 --> 00:04:32,419
faster so writing code like this

00:04:30,349 --> 00:04:34,939
does exactly the same thing as if we had

00:04:32,419 --> 00:04:36,860
written this code by hand but of course

00:04:34,939 --> 00:04:38,569
once we're adding more and more stuff to

00:04:36,860 --> 00:04:42,289
this this becomes less and less

00:04:38,569 --> 00:04:45,830
maintainable as a real live example this

00:04:42,289 --> 00:04:48,860
is how elixir uses now this is how

00:04:45,830 --> 00:04:51,139
elixir is able to have proper Unicode

00:04:48,860 --> 00:04:52,999
support they take the Unicode data dot

00:04:51,139 --> 00:04:54,710
txt file that's released every couple of

00:04:52,999 --> 00:04:57,409
months by the Unicode consortium and

00:04:54,710 --> 00:04:59,419
they parse this file to find out

00:04:57,409 --> 00:05:00,860
properties about the various characters

00:04:59,419 --> 00:05:02,360
than there are thousands and thousands

00:05:00,860 --> 00:05:05,419
of them that make up the Unicode

00:05:02,360 --> 00:05:07,849
standard and then we iterate over all of

00:05:05,419 --> 00:05:09,529
these ranges of characters to define in

00:05:07,849 --> 00:05:13,009
this case whether this is a you

00:05:09,529 --> 00:05:15,379
uppercase character or not and this is a

00:05:13,009 --> 00:05:18,020
very clear example where you could not

00:05:15,379 --> 00:05:22,279
maintain this code by writing all these

00:05:18,020 --> 00:05:24,439
function classes by hand now if plain

00:05:22,279 --> 00:05:27,469
dynamic compilation is not good enough

00:05:24,439 --> 00:05:29,919
we can also use a more powerful tool and

00:05:27,469 --> 00:05:29,919
therefore

00:10:07,930 --> 00:10:17,180
back then and in some cases still is to

00:10:11,570 --> 00:10:20,870
power phone switches which really need

00:10:17,180 --> 00:10:23,150
to be have have a very very good uptime

00:10:20,870 --> 00:10:26,150
be available all the time and they have

00:10:23,150 --> 00:10:29,570
this great advertisement video of now 30

00:10:26,150 --> 00:10:31,760
or 4 years old where they explain how

00:10:29,570 --> 00:10:33,920
they are able to KO each other and use

00:10:31,760 --> 00:10:35,780
this software that that does this phone

00:10:33,920 --> 00:10:37,790
that that manages this phone switch and

00:10:35,780 --> 00:10:40,220
when one of the call break cause breaks

00:10:37,790 --> 00:10:42,680
they're able to fix the bug coordinate

00:10:40,220 --> 00:10:44,570
over the other calls and deploy a new

00:10:42,680 --> 00:10:45,800
version of their software without any of

00:10:44,570 --> 00:10:48,860
the other calls having to be brought

00:10:45,800 --> 00:10:50,810
down and this is not only nice for this

00:10:48,860 --> 00:10:53,540
particular example but also really nice

00:10:50,810 --> 00:10:55,910
when working with certain types of web

00:10:53,540 --> 00:10:57,740
applications where it's really important

00:10:55,910 --> 00:10:59,750
to be able to still access your current

00:10:57,740 --> 00:11:01,430
data and memory or have these

00:10:59,750 --> 00:11:03,790
connections to other services open all

00:11:01,430 --> 00:11:06,110
the time it also really helps while

00:11:03,790 --> 00:11:09,500
writing and debugging your software in

00:11:06,110 --> 00:11:11,030
in the console because if something goes

00:11:09,500 --> 00:11:13,270
different than you expect you are able

00:11:11,030 --> 00:11:16,220
to make quick changes to your code

00:11:13,270 --> 00:11:17,720
recompile that particular module and all

00:11:16,220 --> 00:11:19,850
your data is still there you don't have

00:11:17,720 --> 00:11:21,950
to refresh anything any part of your

00:11:19,850 --> 00:11:23,510
data it's also really helps here that

00:11:21,950 --> 00:11:26,360
elixir is a functional language with

00:11:23,510 --> 00:11:27,980
immutable data types but now for some

00:11:26,360 --> 00:11:30,350
other examples where hot code reloading

00:11:27,980 --> 00:11:32,780
really makes sense besides being able to

00:11:30,350 --> 00:11:36,710
deploy new versions of your software

00:11:32,780 --> 00:11:38,570
without stopping a program one example

00:11:36,710 --> 00:11:41,450
which is by some people called a little

00:11:38,570 --> 00:11:43,220
bit of a hack is known as fast global

00:11:41,450 --> 00:11:46,010
and nowadays there's also a built-in

00:11:43,220 --> 00:11:49,310
version of this persistent term because

00:11:46,010 --> 00:11:51,440
for most cases it is fine if you store

00:11:49,310 --> 00:11:55,010
your data in a single elixir airline

00:11:51,440 --> 00:11:57,230
process and when another process needs

00:11:55,010 --> 00:11:59,930
to read this to communicate coordinate

00:11:57,230 --> 00:12:02,440
with this process however all memory in

00:11:59,930 --> 00:12:04,160
election talent processes is completely

00:12:02,440 --> 00:12:06,380
separate from each other they're not

00:12:04,160 --> 00:12:08,330
able to immediately access it

00:12:06,380 --> 00:12:10,730
and this means that in some cases they

00:12:08,330 --> 00:12:12,530
might become congestion on certain

00:12:10,730 --> 00:12:14,840
processes that have certain data and

00:12:12,530 --> 00:12:16,880
there are some other ways to resolve

00:12:14,840 --> 00:12:19,640
this for instance using ETS or long-term

00:12:16,880 --> 00:12:22,460
storage but even that has at some point

00:12:19,640 --> 00:12:24,860
its scalability issues and one thing you

00:12:22,460 --> 00:12:28,640
can do to fix this problem is to

00:12:24,860 --> 00:12:30,860
actually recompile data into a piece of

00:12:28,640 --> 00:12:33,620
code that is then shared between other

00:12:30,860 --> 00:12:35,210
processes again of course there are many

00:12:33,620 --> 00:12:37,820
cases in which it doesn't take sense so

00:12:35,210 --> 00:12:39,770
benchmark before you use it but if we

00:12:37,820 --> 00:12:44,390
wanted to build something like this by

00:12:39,770 --> 00:12:45,950
hand it could work like this we have a

00:12:44,390 --> 00:12:47,450
simple module with a cut and a put

00:12:45,950 --> 00:12:49,910
function and in the get phone get

00:12:47,450 --> 00:12:52,490
function we see if we check if any value

00:12:49,910 --> 00:12:55,390
was already stored and if so we return

00:12:52,490 --> 00:12:58,670
it if not we return a default value and

00:12:55,390 --> 00:13:00,950
when putting them value we evaluate some

00:12:58,670 --> 00:13:04,970
ast that we're building here at runtime

00:13:00,950 --> 00:13:07,160
and here we define a module that has the

00:13:04,970 --> 00:13:09,380
given key as module name with a single

00:13:07,160 --> 00:13:12,710
function that contains only the value

00:13:09,380 --> 00:13:14,150
we're interested in of course don't

00:13:12,710 --> 00:13:18,230
write this code at home nowadays

00:13:14,150 --> 00:13:20,300
starting an OTP 21.4 or whatever the

00:13:18,230 --> 00:13:22,490
version exactly was there's a built-in

00:13:20,300 --> 00:13:24,410
way to do this using the persistent term

00:13:22,490 --> 00:13:27,380
library that now ships with Erlang

00:13:24,410 --> 00:13:29,510
itself and again this is somewhat of a

00:13:27,380 --> 00:13:30,950
hack you only really need this if you

00:13:29,510 --> 00:13:32,110
have efficiency problems but let's look

00:13:30,950 --> 00:13:35,750
at another example

00:13:32,110 --> 00:13:38,180
TC data is a very write widely used

00:13:35,750 --> 00:13:41,680
library for keeping track of time zones

00:13:38,180 --> 00:13:44,150
because what how time zones and daily

00:13:41,680 --> 00:13:46,580
summertime wintertime is handled daily

00:13:44,150 --> 00:13:49,790
savings time is handled changes between

00:13:46,580 --> 00:13:51,950
countries but also sometimes it how this

00:13:49,790 --> 00:13:53,780
within a country is handled changes

00:13:51,950 --> 00:13:56,290
based on political decisions made

00:13:53,780 --> 00:13:59,570
sometimes we only have like a week

00:13:56,290 --> 00:14:01,790
notice before it happens and so it

00:13:59,570 --> 00:14:04,700
really doesn't make sense to pre compile

00:14:01,790 --> 00:14:06,110
your program only to have the timezone

00:14:04,700 --> 00:14:08,510
information change you know you have to

00:14:06,110 --> 00:14:11,720
do it all again so it makes sense if

00:14:08,510 --> 00:14:14,960
this happens outside of your normal

00:14:11,720 --> 00:14:17,120
program release schedule so what TC data

00:14:14,960 --> 00:14:19,280
does is at runtime once a day it

00:14:17,120 --> 00:14:20,060
performs a request to remote location

00:14:19,280 --> 00:14:22,550
where the

00:14:20,060 --> 00:14:25,460
time zone database files stored and if

00:14:22,550 --> 00:14:27,020
there are any changes it recompiles that

00:14:25,460 --> 00:14:28,910
information into your application

00:14:27,020 --> 00:14:31,430
currently it's actually still using it

00:14:28,910 --> 00:14:33,800
yes but there is work being done right

00:14:31,430 --> 00:14:36,410
now to replace this with persistent term

00:14:33,800 --> 00:14:39,160
exactly for the scalability issues that

00:14:36,410 --> 00:14:42,170
they're facing another very interesting

00:14:39,160 --> 00:14:44,180
application of this is using

00:14:42,170 --> 00:14:46,190
introspection there are many languages

00:14:44,180 --> 00:14:48,290
and environments in which when you want

00:14:46,190 --> 00:14:50,000
to find out well your application has a

00:14:48,290 --> 00:14:52,910
memory leak or is behaving in an

00:14:50,000 --> 00:14:55,700
unexpected way in the wild you have to

00:14:52,910 --> 00:14:57,980
stop the program add some tracing

00:14:55,700 --> 00:15:00,350
statements to your source code recompile

00:14:57,980 --> 00:15:03,020
it started again and then hope and pray

00:15:00,350 --> 00:15:06,890
that the program will trigger this same

00:15:03,020 --> 00:15:09,590
weird edge case however in election

00:15:06,890 --> 00:15:11,780
erelong you're able to actually patch

00:15:09,590 --> 00:15:13,640
this tracing information into the course

00:15:11,780 --> 00:15:15,830
where you want it and the rest of your

00:15:13,640 --> 00:15:17,810
program is completely unaffected so in

00:15:15,830 --> 00:15:21,440
this case we start with the same people

00:15:17,810 --> 00:15:24,920
notch example as before but now when

00:15:21,440 --> 00:15:26,630
starting introspection D Big D billing

00:15:24,920 --> 00:15:29,240
statement where we say we're only

00:15:26,630 --> 00:15:32,270
interested in calls to the Fibonacci

00:15:29,240 --> 00:15:34,760
function with one as an argument then

00:15:32,270 --> 00:15:37,910
that call to the tracing functionality

00:15:34,760 --> 00:15:39,710
is only used over there and the rest of

00:15:37,910 --> 00:15:44,210
our application still works exactly as

00:15:39,710 --> 00:15:45,830
it was before now when we call it we

00:15:44,210 --> 00:15:47,960
immediately receive all these tracing

00:15:45,830 --> 00:15:50,060
messages so we can use it to debug and

00:15:47,960 --> 00:15:53,000
once we stop the tracing information is

00:15:50,060 --> 00:15:55,070
removed again and now our program works

00:15:53,000 --> 00:15:56,930
identical as it was before we started

00:15:55,070 --> 00:15:58,280
tracing so this really helps for

00:15:56,930 --> 00:16:01,820
instance when working with race

00:15:58,280 --> 00:16:03,020
conditions etc because all other parts

00:16:01,820 --> 00:16:05,300
of your program are completely

00:16:03,020 --> 00:16:07,580
unaffected and this works because we're

00:16:05,300 --> 00:16:10,030
running on a virtual machine with

00:16:07,580 --> 00:16:10,030
bytecode

00:16:13,279 --> 00:16:18,300
so there you have it there is our two

00:16:16,230 --> 00:16:20,700
tools you can use and we compilation at

00:16:18,300 --> 00:16:24,110
runtime is maybe the slightly more

00:16:20,700 --> 00:16:26,160
archaic one and has more niche

00:16:24,110 --> 00:16:28,470
applications where you could really use

00:16:26,160 --> 00:16:30,480
it but both running at compile time and

00:16:28,470 --> 00:16:32,790
recompiling code at runtime are very

00:16:30,480 --> 00:16:35,370
useful and of course also share a lot of

00:16:32,790 --> 00:16:37,529
similarity between them as a final

00:16:35,370 --> 00:16:38,940
warning I would like to say that these

00:16:37,529 --> 00:16:41,370
are great tools and you can build some

00:16:38,940 --> 00:16:44,130
really amazing stuff with it however if

00:16:41,370 --> 00:16:46,200
you're going too far then your code

00:16:44,130 --> 00:16:47,940
might become very hard to read or

00:16:46,200 --> 00:16:49,740
maintain because if someone writes

00:16:47,940 --> 00:16:52,170
certain code and the macro completely

00:16:49,740 --> 00:16:54,029
transforms it into something else then

00:16:52,170 --> 00:16:56,610
it becomes difficult to know what is

00:16:54,029 --> 00:16:58,740
going on but of course also very

00:16:56,610 --> 00:17:02,880
important is to have fun and to enjoy

00:16:58,740 --> 00:17:05,069
what we're working with all the things I

00:17:02,880 --> 00:17:06,900
talked about have some information on

00:17:05,069 --> 00:17:08,429
the internet which you can look at my

00:17:06,900 --> 00:17:11,490
slides will of course also be available

00:17:08,429 --> 00:17:12,689
online and with that I want to thank you

00:17:11,490 --> 00:17:14,839
very much for your time listening to me

00:17:12,689 --> 00:17:14,839
today

00:17:20,270 --> 00:17:24,079
and now there's some time for questions

00:17:38,840 --> 00:17:44,309
the question was have you run any

00:17:41,640 --> 00:17:46,679
benchmarks to compare putting stuff into

00:17:44,309 --> 00:17:48,450
ETS versus recompiling and module and

00:17:46,679 --> 00:17:50,910
reading from that module I have not done

00:17:48,450 --> 00:17:52,620
myself there are some benchmarks

00:17:50,910 --> 00:17:54,590
available of other people who did this

00:17:52,620 --> 00:17:57,870
for various different projects and

00:17:54,590 --> 00:17:59,850
essentially recompiling something of

00:17:57,870 --> 00:18:01,440
course takes a lot of time and also the

00:17:59,850 --> 00:18:03,210
more processes you have the longer it

00:18:01,440 --> 00:18:07,830
takes because all the processes will

00:18:03,210 --> 00:18:10,740
need their code store refreshed however

00:18:07,830 --> 00:18:13,410
once it is stored it is a lot faster and

00:18:10,740 --> 00:18:15,390
lot more scalable than ETS but only at

00:18:13,410 --> 00:18:17,400
very large scale so for most

00:18:15,390 --> 00:18:19,140
applications starting out it really

00:18:17,400 --> 00:18:22,050
makes more sense to first start with an

00:18:19,140 --> 00:18:24,840
agent and then at some point with ETS

00:18:22,050 --> 00:18:25,910
and only when you're really reaching the

00:18:24,840 --> 00:18:27,920
limits of that

00:18:25,910 --> 00:18:40,040
start looking into persistent term

00:18:27,920 --> 00:18:43,750
storage yes do I have any advice on how

00:18:40,040 --> 00:18:46,460
to test code that uses macros well I

00:18:43,750 --> 00:18:49,490
have written some libraries in the past

00:18:46,460 --> 00:18:51,500
that used macros and something that

00:18:49,490 --> 00:18:56,600
really helped me while debugging is that

00:18:51,500 --> 00:18:58,660
after creating my ast in the macro to

00:18:56,600 --> 00:19:02,570
just put an IO inspect statement there

00:18:58,660 --> 00:19:05,390
and there are some helper methods as

00:19:02,570 --> 00:19:07,880
well in the code module that elixir

00:19:05,390 --> 00:19:10,610
ships with that allow you to introspect

00:19:07,880 --> 00:19:12,020
your macro your your your ast as

00:19:10,610 --> 00:19:13,670
readable source code again and that

00:19:12,020 --> 00:19:16,430
really helps to find out what exactly is

00:19:13,670 --> 00:19:19,760
going on there and besides that try to

00:19:16,430 --> 00:19:21,650
come up with a lot of examples of what

00:19:19,760 --> 00:19:23,450
you want it to look like when someone

00:19:21,650 --> 00:19:25,790
uses the DSL that your macro provides

00:19:23,450 --> 00:19:27,410
also try to come up with your counter

00:19:25,790 --> 00:19:30,680
examples of things that people might try

00:19:27,410 --> 00:19:33,380
so you can test for yeah common errors

00:19:30,680 --> 00:19:35,150
and of course I'm a big fan of using

00:19:33,380 --> 00:19:37,370
property testing wherever it's possible

00:19:35,150 --> 00:19:39,500
and that might also really help to catch

00:19:37,370 --> 00:19:41,210
some edge cases that you would otherwise

00:19:39,500 --> 00:19:59,930
not have considered great question thank

00:19:41,210 --> 00:20:02,720
you yes great I have not read it myself

00:19:59,930 --> 00:20:04,970
but it it's probably a great resource

00:20:02,720 --> 00:20:07,580
because Chris record really writes very

00:20:04,970 --> 00:20:10,420
well thank you for mentioning it I will

00:20:07,580 --> 00:20:10,420
add it to my slides

00:20:18,380 --> 00:20:20,440

YouTube URL: https://www.youtube.com/watch?v=7vlzYSTLt-s


