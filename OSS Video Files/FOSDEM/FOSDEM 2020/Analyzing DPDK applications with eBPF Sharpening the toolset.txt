Title: Analyzing DPDK applications with eBPF Sharpening the toolset
Publication date: 2020-07-14
Playlist: FOSDEM 2020
Description: 
	by Stephen Hemminger

At: FOSDEM 2020
https://video.fosdem.org/2020/H.1308/analyzing_dpdk_applications_with_ebpf.webm

One of the challenges of doing software network applications is observing the inputs, outputs, and what the application is doing with them. Linux provides a rich tool set with eBPF but integrating this into a DPDK application is challenging. The DPDK libraries for capturing is incomplete which leads to lots of time debugging the tools. This talk addresses these issues, recommends solutions and proposes enhancements to make developers live easier.
The DPDK provides a limited form of packet capture, but it only works on a single interface with no filtering and inaccurate timestamps.
I go over  what packet capture does now, how it can be improved, and how it can be integrated with other tracing.


This talk is an extension of the talk  (based on community feedback) given in 2019 at the DPDK userspace summit.

Room: H.1308 (Rolin)
Scheduled start: 2020-02-01 11:50:00
Captions: 
	00:00:04,630 --> 00:00:11,920
hi everybody I'm Steven hem injure

00:00:08,500 --> 00:00:15,459
I work for Microsoft but I'm also very

00:00:11,920 --> 00:00:18,460
much involved with the DVD K and the

00:00:15,459 --> 00:00:21,220
Linux kernel I am NOT one of the PPF

00:00:18,460 --> 00:00:24,070
developers even though there's some EPF

00:00:21,220 --> 00:00:28,900
in this talk it's not the main focus I

00:00:24,070 --> 00:00:29,230
just wanted work see the button there we

00:00:28,900 --> 00:00:31,960
go

00:00:29,230 --> 00:00:37,899
I'll skip the table of contents to save

00:00:31,960 --> 00:00:39,789
time so when I started this out it's

00:00:37,899 --> 00:00:42,010
looking around I said you know in

00:00:39,789 --> 00:00:44,440
America there's a proverb that says you

00:00:42,010 --> 00:00:46,270
know a bad only a bad workman complains

00:00:44,440 --> 00:00:47,920
about his tools and since I was coming

00:00:46,270 --> 00:00:51,489
to Belgium I looked up it turns out it's

00:00:47,920 --> 00:00:53,039
an old French proverb but bad workers

00:00:51,489 --> 00:00:55,300
never finds a good tool but then I

00:00:53,039 --> 00:00:57,280
started look around it there's actually

00:00:55,300 --> 00:00:58,149
a Chinese proverb so it says to do a

00:00:57,280 --> 00:01:00,699
good job

00:00:58,149 --> 00:01:02,320
a craftsman must sharpen his tools and I

00:01:00,699 --> 00:01:04,269
do woodworking and I've learned the hard

00:01:02,320 --> 00:01:07,240
way that unless you sharpen your chisel

00:01:04,269 --> 00:01:09,130
you destroy things and I think this is

00:01:07,240 --> 00:01:12,640
the same thing as truly the tool sets we

00:01:09,130 --> 00:01:15,820
work with but before I go too deep into

00:01:12,640 --> 00:01:16,509
tool sets I kind of want to throw up a

00:01:15,820 --> 00:01:19,990
big red flag

00:01:16,509 --> 00:01:23,110
so people don't get too enamored with

00:01:19,990 --> 00:01:24,909
the tools that's not what the most

00:01:23,110 --> 00:01:26,680
important thing is the most important

00:01:24,909 --> 00:01:29,920
thing is figuring out how you're gonna

00:01:26,680 --> 00:01:31,479
do it with good methodology so start out

00:01:29,920 --> 00:01:32,470
with a problem statement up what are you

00:01:31,479 --> 00:01:36,549
trying to solve

00:01:32,470 --> 00:01:39,009
what's your workload look like and what

00:01:36,549 --> 00:01:41,320
are your targets and use a good

00:01:39,009 --> 00:01:44,140
methodology to actually do this in a

00:01:41,320 --> 00:01:46,450
structured scientific process manner not

00:01:44,140 --> 00:01:50,020
just throw it at the wall and see what

00:01:46,450 --> 00:01:52,479
sticks and I'm not the person to go into

00:01:50,020 --> 00:01:54,790
detail about that but you should really

00:01:52,479 --> 00:01:58,450
look up any of Brendan Greg's talks on

00:01:54,790 --> 00:02:01,259
Linux performance analysis and the e BPF

00:01:58,450 --> 00:02:03,969
textbook that it's now out from O'Reilly

00:02:01,259 --> 00:02:06,850
do some research learn how to do it

00:02:03,969 --> 00:02:09,130
before you get too deep into playing

00:02:06,850 --> 00:02:14,980
with tools but after I've shown that out

00:02:09,130 --> 00:02:16,720
now I'll go talking about tools so in my

00:02:14,980 --> 00:02:18,250
life we spend a lot of time working with

00:02:16,720 --> 00:02:21,040
DB DK applications

00:02:18,250 --> 00:02:23,800
and in a DB DK application there's

00:02:21,040 --> 00:02:26,830
really two ways to look at it one way to

00:02:23,800 --> 00:02:29,620
look at it doing analysis since tune

00:02:26,830 --> 00:02:32,350
analyze the data as in what's coming in

00:02:29,620 --> 00:02:34,840
and what's going out this is traditional

00:02:32,350 --> 00:02:36,730
TCP dump packet filtering so you

00:02:34,840 --> 00:02:40,060
basically have a mechanism to get the

00:02:36,730 --> 00:02:42,010
data to see what the application why

00:02:40,060 --> 00:02:44,650
you're dropping packets what's good not

00:02:42,010 --> 00:02:46,600
going in the other way to look at it is

00:02:44,650 --> 00:02:49,450
programmatically and that's what's

00:02:46,600 --> 00:02:53,400
tracing is tracing is all about let's

00:02:49,450 --> 00:02:58,330
insert something into the program and

00:02:53,400 --> 00:03:00,790
see what we got the poor man's way of

00:02:58,330 --> 00:03:02,709
that is print K this is doing something

00:03:00,790 --> 00:03:04,330
smarter than print cake figure out

00:03:02,709 --> 00:03:07,450
what's going on

00:03:04,330 --> 00:03:12,610
both of these are useful and both of

00:03:07,450 --> 00:03:17,680
them are part of the solution and on the

00:03:12,610 --> 00:03:21,190
packet capture side traditionally the

00:03:17,680 --> 00:03:24,130
early days of DVD K there was nothing

00:03:21,190 --> 00:03:30,070
like the first user survey feedback we

00:03:24,130 --> 00:03:33,040
got was I need TCP dump so Intel and a

00:03:30,070 --> 00:03:36,220
few others developed a packet dump for

00:03:33,040 --> 00:03:39,489
DVD K called P dump and the way it works

00:03:36,220 --> 00:03:42,730
is your application is writing is your

00:03:39,489 --> 00:03:45,910
primary application and you have a

00:03:42,730 --> 00:03:48,010
secondary application that shares a ring

00:03:45,910 --> 00:03:51,250
with the primary application and

00:03:48,010 --> 00:03:54,010
captures packets and the packets are

00:03:51,250 --> 00:03:57,700
outputted in pcap format and you put

00:03:54,010 --> 00:04:00,160
them somewhere the problem with this is

00:03:57,700 --> 00:04:03,579
the implementation of this is very

00:04:00,160 --> 00:04:05,620
limited there you have no metadata so

00:04:03,579 --> 00:04:07,690
you don't even know be LAN tags are gone

00:04:05,620 --> 00:04:11,470
you have nothing about offload flags

00:04:07,690 --> 00:04:15,370
what flow rule matched so you have very

00:04:11,470 --> 00:04:17,530
little state in this packet capture the

00:04:15,370 --> 00:04:20,200
implementation of this is not very

00:04:17,530 --> 00:04:22,210
robust and the timestamp happens at the

00:04:20,200 --> 00:04:23,950
far end of the thing kind of like you

00:04:22,210 --> 00:04:26,020
saw earlier when they talked about with

00:04:23,950 --> 00:04:28,630
collecti it's the same thing only at the

00:04:26,020 --> 00:04:30,190
DPD k level the packet isn't being

00:04:28,630 --> 00:04:31,230
stamped when it's arrived it's being

00:04:30,190 --> 00:04:33,360
stamped when you

00:04:31,230 --> 00:04:35,910
finally pull it off which is pretty much

00:04:33,360 --> 00:04:37,740
useless you have no direction

00:04:35,910 --> 00:04:39,150
information so if you're capturing

00:04:37,740 --> 00:04:40,950
receive and transmit you don't know

00:04:39,150 --> 00:04:44,850
whether which way this packet came from

00:04:40,950 --> 00:04:46,980
and the current implementation only

00:04:44,850 --> 00:04:50,940
really handles a single port so if I've

00:04:46,980 --> 00:04:54,660
got a router I want to have both ends

00:04:50,940 --> 00:04:56,130
captured at once put in one file or you

00:04:54,660 --> 00:04:57,900
have to do something where you've got

00:04:56,130 --> 00:05:01,230
multiple files and try to correlate by

00:04:57,900 --> 00:05:03,210
timestamps it's pretty hard and lastly

00:05:01,230 --> 00:05:05,100
there's no filtering so there's nothing

00:05:03,210 --> 00:05:10,290
you just basically you get the firehose

00:05:05,100 --> 00:05:15,080
and because of all this the performance

00:05:10,290 --> 00:05:17,280
is pretty poor so for what I've done

00:05:15,080 --> 00:05:19,440
working it's not actually upstream like

00:05:17,280 --> 00:05:23,610
the probe patches are still in progress

00:05:19,440 --> 00:05:25,710
is to support P cap and G in the DB DK

00:05:23,610 --> 00:05:28,800
with that you get nine is the second

00:05:25,710 --> 00:05:30,930
time resolution we can put system and

00:05:28,800 --> 00:05:32,760
interface data if you're in the cloud

00:05:30,930 --> 00:05:37,230
it's really important to be able to know

00:05:32,760 --> 00:05:40,680
I got this no data file I captured on a

00:05:37,230 --> 00:05:41,250
some node what was the hardware on that

00:05:40,680 --> 00:05:42,870
node

00:05:41,250 --> 00:05:45,810
what was the versions of the firmware

00:05:42,870 --> 00:05:48,960
all that can be put in the file that you

00:05:45,810 --> 00:05:53,340
got captured it supports multiple

00:05:48,960 --> 00:05:55,980
interfaces so you can have some 16-bit

00:05:53,340 --> 00:06:01,350
number of interfaces and put them all in

00:05:55,980 --> 00:06:03,960
one file and put them together pcap ng

00:06:01,350 --> 00:06:05,820
supports flags for direction and you can

00:06:03,960 --> 00:06:08,460
put the hash value of the packet and

00:06:05,820 --> 00:06:12,540
even comment strings of any other data

00:06:08,460 --> 00:06:14,670
you want so really it provides all that

00:06:12,540 --> 00:06:16,440
so we're working out the details and all

00:06:14,670 --> 00:06:18,360
the API and ABI but it'll definitely

00:06:16,440 --> 00:06:21,300
roll through the next thing I've been

00:06:18,360 --> 00:06:23,850
working on leg 2 this is putting packet

00:06:21,300 --> 00:06:25,890
filtering into the packet capture so the

00:06:23,850 --> 00:06:28,560
traditional way of doing that is with

00:06:25,890 --> 00:06:30,990
TCP dump is you start out with some nice

00:06:28,560 --> 00:06:33,830
text string like show me all packets

00:06:30,990 --> 00:06:37,800
with the IP destination of FASTA org and

00:06:33,830 --> 00:06:44,130
Lib pcap does all the magic and produces

00:06:37,800 --> 00:06:44,999
a CB PF program so the problem is we

00:06:44,130 --> 00:06:48,569
don't have a

00:06:44,999 --> 00:06:51,599
classic BBF interpreter in DB DK and we

00:06:48,569 --> 00:06:54,179
really don't want to put one in so we'll

00:06:51,599 --> 00:06:58,369
do the same thing the kernel does which

00:06:54,179 --> 00:07:01,079
is translate that into an EP PF program

00:06:58,369 --> 00:07:04,769
I've just worked with of several people

00:07:01,079 --> 00:07:07,139
to get permission to take the same basic

00:07:04,769 --> 00:07:09,329
code loop that does that in the socket

00:07:07,139 --> 00:07:11,129
filter and the kernel make it BSD

00:07:09,329 --> 00:07:16,949
license so that we can put that in the

00:07:11,129 --> 00:07:19,079
DB DK so you just type at the outer

00:07:16,949 --> 00:07:21,419
level you put in the filter string you

00:07:19,079 --> 00:07:23,279
get in the lower level you get the EBP F

00:07:21,419 --> 00:07:25,499
program and then we can execute that in

00:07:23,279 --> 00:07:29,789
the DB DK with a JIT and everything else

00:07:25,499 --> 00:07:34,349
that's there how am i doing on the

00:07:29,789 --> 00:07:38,369
tracing side there's several options on

00:07:34,349 --> 00:07:44,129
Linux I will have to admit doing him in

00:07:38,369 --> 00:07:46,289
user space none of them is ideal but I'm

00:07:44,129 --> 00:07:49,649
gonna describe two or three of them that

00:07:46,289 --> 00:07:51,989
I tried and how that how they work

00:07:49,649 --> 00:07:54,779
together and what it would look like so

00:07:51,989 --> 00:07:56,789
first one was Linux trace toolkit it's

00:07:54,779 --> 00:08:01,050
been around a while it's very easy to

00:07:56,789 --> 00:08:02,999
use and very well documented using it in

00:08:01,050 --> 00:08:04,979
user space a typical way to use it as

00:08:02,999 --> 00:08:08,189
usually to find trace points where you

00:08:04,979 --> 00:08:09,869
put trace points in your code and then

00:08:08,189 --> 00:08:14,369
you can run filters at those trace

00:08:09,869 --> 00:08:18,419
points and it produces common trace

00:08:14,369 --> 00:08:22,199
flight trace format data which can then

00:08:18,419 --> 00:08:23,639
be digested and it's a from a user space

00:08:22,199 --> 00:08:26,610
tracing point of view it's very high

00:08:23,639 --> 00:08:28,709
performance it uses RCU and ring buffers

00:08:26,610 --> 00:08:32,129
all this kind of performance tricks the

00:08:28,709 --> 00:08:37,559
DB DK does to basically get a firehose

00:08:32,129 --> 00:08:42,000
of trace points and in the user space so

00:08:37,559 --> 00:08:44,939
my example with DB DK implementing the

00:08:42,000 --> 00:08:47,790
test P of D application DB DK the one

00:08:44,939 --> 00:08:51,689
most commonly everybody seems to use oh

00:08:47,790 --> 00:08:55,380
great well I got messed up license never

00:08:51,689 --> 00:08:58,559
use tabs and in flights but if you look

00:08:55,380 --> 00:08:58,830
the court loop of sending a burst of

00:08:58,559 --> 00:09:00,780
pass

00:08:58,830 --> 00:09:04,650
rockets in the l-3 forward application

00:09:00,780 --> 00:09:06,750
has a there and there's put a trace

00:09:04,650 --> 00:09:10,440
point and that says hey I got some

00:09:06,750 --> 00:09:14,430
packets so you want to do the same thing

00:09:10,440 --> 00:09:16,290
with EB bf kept from D trace that now

00:09:14,430 --> 00:09:19,560
have the ability to do this in userspace

00:09:16,290 --> 00:09:24,090
I'm kind of going fast so the same thing

00:09:19,560 --> 00:09:26,580
in userspace this is what SPMD receive

00:09:24,090 --> 00:09:28,860
you put a DTrace probe point in and you

00:09:26,580 --> 00:09:31,590
get the same kind of thing you want to

00:09:28,860 --> 00:09:33,690
use it you end up using BPF trace and

00:09:31,590 --> 00:09:38,360
you say I'd like to pick up the

00:09:33,690 --> 00:09:38,360
user-defined trace point in test PMD and

00:09:38,720 --> 00:09:44,100
I'd like this trace point and you give

00:09:41,580 --> 00:09:47,490
it an expression of what you want so I

00:09:44,100 --> 00:09:50,100
did an example doing BPF trace with test

00:09:47,490 --> 00:09:51,690
PMD and rx burst and tell me the hash of

00:09:50,100 --> 00:09:54,030
how many packets do I get each time

00:09:51,690 --> 00:09:56,760
through the loop do I get a little or a

00:09:54,030 --> 00:09:58,740
lot and this lets me decide if I should

00:09:56,760 --> 00:10:01,470
use bigger birth size how much memory I

00:09:58,740 --> 00:10:03,480
should use a whole lot of things well

00:10:01,470 --> 00:10:05,910
the downside of this is you run some

00:10:03,480 --> 00:10:07,260
performance testing these are not real

00:10:05,910 --> 00:10:09,950
performance tests that's what these

00:10:07,260 --> 00:10:12,090
slides are trying to say this is not

00:10:09,950 --> 00:10:15,720
analytical statistical write of paper

00:10:12,090 --> 00:10:17,670
tests this is do a hack do it unboxing

00:10:15,720 --> 00:10:20,310
what am I getting so I got two systems

00:10:17,670 --> 00:10:24,480
one sending to the other one at full

00:10:20,310 --> 00:10:28,920
speed 25 gig NIC what does it cost me

00:10:24,480 --> 00:10:31,500
well if I'm doing packet dump so we've

00:10:28,920 --> 00:10:33,300
packaged up turned off having the

00:10:31,500 --> 00:10:35,550
infrastructure in place cost me nothing

00:10:33,300 --> 00:10:40,350
but as soon as I start capturing I get a

00:10:35,550 --> 00:10:43,410
36% performance loss now I did a hack

00:10:40,350 --> 00:10:47,370
say what if I had EB bf in there and I

00:10:43,410 --> 00:10:49,170
said and my capture filter I evaluated

00:10:47,370 --> 00:10:50,970
so don't capture this packet so

00:10:49,170 --> 00:10:54,690
everything it was just a null program

00:10:50,970 --> 00:10:57,210
that says no that's that went from 36%

00:10:54,690 --> 00:10:59,490
to zero so that says capturing with EPP

00:10:57,210 --> 00:11:00,840
F is going to work for what you want you

00:10:59,490 --> 00:11:03,960
still have the problem of why is it

00:11:00,840 --> 00:11:06,000
taking so long and packet capture but

00:11:03,960 --> 00:11:10,200
it's a different problem as far as

00:11:06,000 --> 00:11:12,660
tracing with LT TNG putting the trace

00:11:10,200 --> 00:11:16,129
point and cost you an insignificant

00:11:12,660 --> 00:11:20,129
small amount of time less than 1% and

00:11:16,129 --> 00:11:23,670
when it's enabled it was down to in the

00:11:20,129 --> 00:11:27,810
noise so basically at 25 gig that trace

00:11:23,670 --> 00:11:32,310
point was costing me nothing now that

00:11:27,810 --> 00:11:35,490
day that may cost me something BPF trace

00:11:32,310 --> 00:11:37,110
putting the trace point and cost me even

00:11:35,490 --> 00:11:41,220
less because it's just a bunch of no op

00:11:37,110 --> 00:11:43,949
instructions but turning it on and to do

00:11:41,220 --> 00:11:52,439
that hash program would cost a fifty six

00:11:43,949 --> 00:11:54,990
percent drop in throughput so kind of

00:11:52,439 --> 00:11:57,480
rushing here but so we've got a bunch of

00:11:54,990 --> 00:12:00,569
ongoing work at the DB DK packet capture

00:11:57,480 --> 00:12:02,819
to try to give it full filtering i've

00:12:00,569 --> 00:12:04,860
got a new versions of program because i

00:12:02,819 --> 00:12:07,560
want a user interface that looks more

00:12:04,860 --> 00:12:09,389
like tea shark and less like a DVD kay

00:12:07,560 --> 00:12:11,850
application because users don't care

00:12:09,389 --> 00:12:14,629
about all the models and wonderful

00:12:11,850 --> 00:12:17,130
hardware flags that we love in DB DK and

00:12:14,629 --> 00:12:19,079
there's ongoing discussion on the man

00:12:17,130 --> 00:12:21,779
list of how DVD k we can have a

00:12:19,079 --> 00:12:25,800
standardized set of trace points so that

00:12:21,779 --> 00:12:27,120
other tools can get in and use them and

00:12:25,800 --> 00:12:29,430
i wanted to leave some time for

00:12:27,120 --> 00:12:35,509
questions so i sped up as soon as the

00:12:29,430 --> 00:12:35,509
flag went up what OH

00:12:35,899 --> 00:12:54,689
so I will now open the floor for some

00:12:39,420 --> 00:12:58,019
questions for a minute or two yes we

00:12:54,689 --> 00:13:01,589
have a EP bf Virtual Machine and DVD K

00:12:58,019 --> 00:13:03,329
it's fairly limited right now in terms

00:13:01,589 --> 00:13:06,509
of there isn't a lot of hooks that use

00:13:03,329 --> 00:13:08,790
it and it doesn't support maps and all

00:13:06,509 --> 00:13:13,079
the well the neat tricks you can do with

00:13:08,790 --> 00:13:15,379
EDF so it needs a lot more work but it's

00:13:13,079 --> 00:13:18,899
there already

00:13:15,379 --> 00:13:22,470
it started out from a common code base

00:13:18,899 --> 00:13:26,230
but it's maintained separately

00:13:22,470 --> 00:13:28,420
and it was agreed a lot of this is

00:13:26,230 --> 00:13:31,450
shared work with the developers EVP of

00:13:28,420 --> 00:13:34,060
harmonics so it's like well are we

00:13:31,450 --> 00:13:40,440
willing to BSD licenses and that's the

00:13:34,060 --> 00:13:40,440
biggest hurdle often other questions

00:13:40,800 --> 00:14:09,550
back there right the prop a two things

00:14:03,730 --> 00:14:12,970
one with LT TNG you can't do the at

00:14:09,550 --> 00:14:16,150
scale run a program on the node to give

00:14:12,970 --> 00:14:18,970
me the results and that's where a BPF

00:14:16,150 --> 00:14:20,800
shines so where p PF shines is if you're

00:14:18,970 --> 00:14:23,730
trying to scale out by using compute

00:14:20,800 --> 00:14:26,890
resources at the at the trace point

00:14:23,730 --> 00:14:29,140
where LT T&G works really well is if

00:14:26,890 --> 00:14:31,000
you're saying for security or other

00:14:29,140 --> 00:14:32,770
reasons i can't run things in that

00:14:31,000 --> 00:14:35,620
environment or it's an embedded system

00:14:32,770 --> 00:14:38,110
or something get me the data and i'll

00:14:35,620 --> 00:14:41,200
process the data later so my

00:14:38,110 --> 00:14:43,600
recommendation is abstract but what you

00:14:41,200 --> 00:14:45,700
the classic debian thing if you can't

00:14:43,600 --> 00:14:47,350
make a decision make both decisions so

00:14:45,700 --> 00:14:50,470
have an abstraction that says here's the

00:14:47,350 --> 00:14:52,180
trace points and document that and let

00:14:50,470 --> 00:14:54,490
people choose for their environment

00:14:52,180 --> 00:15:01,830
which tool though use to put the trace

00:14:54,490 --> 00:15:01,830
point in i get the times up yes Thomas

00:15:06,510 --> 00:15:09,399
that's a good question I really wish you

00:15:08,920 --> 00:15:15,430
could

00:15:09,399 --> 00:15:17,320
I haven't volunteered for too many

00:15:15,430 --> 00:15:21,460
things right now a volunteer to help

00:15:17,320 --> 00:15:28,609
that's but all I can do thank you

00:15:21,460 --> 00:15:28,609

YouTube URL: https://www.youtube.com/watch?v=WrlypYn18jI


