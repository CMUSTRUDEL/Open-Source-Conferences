Title: Below Kubernetes: Demystifying container runtimes
Publication date: 2020-07-13
Playlist: FOSDEM 2020
Description: 
	by Thierry Carrez

At: FOSDEM 2020
https://video.fosdem.org/2020/UD2.208/containers_k8s_runtimes.webm

Today, the task of running containers involves a lot of technologies and levels of abstraction, and it can be difficult to understand, or just to keep up. How do CRI-O and containerd overlap ? Does Kata containers compete with Firecracker ? Is there any relationship between OCI and CRI ? How many different meanings can "container runtime" have ?


In this talk, we will navigate this treacherous sea of overlapping technologies and acronyms that take care of running container workloads, below Kubernetes all the way down to the Linux kernel. We will present at a high-level how these technologies, interfaces and levels of abstraction combine and overlap, and hopefully clarify which are spec vs. implementation, which are complementary, and which are alternative solutions.
This talk will cover the following points:


❮ul❯
❮li❯The world used to be simple: the case of Docker❮/li❯
❮li❯Interfaces: OCI and CRI❮/li❯
❮li❯More puzzle pieces: Podman, Containerd and CRI-O❮/li❯
❮li❯Workload isolation: Kata Containers, GVisor and Firecracker❮/li❯
❮li❯Q&amp;A❮/li❯
❮/ul❯


Room: UD2.208 (Decroly)
Scheduled start: 2020-02-01 12:45:00
Captions: 
	00:00:08,000 --> 00:00:13,130
okay next up we've got cherry is going

00:00:10,830 --> 00:00:19,390
to be talking to us about kubernetes

00:00:13,130 --> 00:00:25,869
defying the content of runtimes hello

00:00:19,390 --> 00:00:28,820
are you hearing me correctly yes okay so

00:00:25,869 --> 00:00:30,980
my name is cherry comas I work for the

00:00:28,820 --> 00:00:33,470
OpenStack foundation and today I want to

00:00:30,980 --> 00:00:35,870
talk to you about what's happening below

00:00:33,470 --> 00:00:38,810
kubernetes in the wonderful world of

00:00:35,870 --> 00:00:41,930
container runtimes but first you may

00:00:38,810 --> 00:00:43,720
wonder why I'm here because I work for

00:00:41,930 --> 00:00:49,100
the OpenStack foundation and obviously

00:00:43,720 --> 00:00:50,990
up and stack has this focus on just--all

00:00:49,100 --> 00:00:55,220
machines around the Aven the OpenStack

00:00:50,990 --> 00:00:58,010
project and so like containers replacing

00:00:55,220 --> 00:00:59,720
the aims and stuff why am I here well

00:00:58,010 --> 00:01:01,790
first up and stack is more than just

00:00:59,720 --> 00:01:03,260
doctoring machines it's a collection of

00:01:01,790 --> 00:01:06,079
projects so some of them are very

00:01:03,260 --> 00:01:08,240
content oriented I like to have the Zune

00:01:06,079 --> 00:01:09,890
project that lets you run containers or

00:01:08,240 --> 00:01:12,130
we have the magnum project that gives

00:01:09,890 --> 00:01:14,570
you ready to use cube analytics clusters

00:01:12,130 --> 00:01:16,640
but second the OpenStack foundation is

00:01:14,570 --> 00:01:19,429
more than just OpenStack we're actually

00:01:16,640 --> 00:01:21,770
a foundation that generally supports

00:01:19,429 --> 00:01:24,710
openly developing open infrastructure

00:01:21,770 --> 00:01:27,259
solutions which is open source solutions

00:01:24,710 --> 00:01:29,030
for providing infrastructure and so we

00:01:27,259 --> 00:01:31,609
support up and stack obviously but also

00:01:29,030 --> 00:01:36,139
projects like airship to declaratively

00:01:31,609 --> 00:01:39,069
provision infrastructure Zoo for a cloud

00:01:36,139 --> 00:01:41,630
native continuous integration system

00:01:39,069 --> 00:01:44,689
Starling X which provides infrastructure

00:01:41,630 --> 00:01:47,209
for edge and IOT and more to the point

00:01:44,689 --> 00:01:49,880
of these tokido containers which is a

00:01:47,209 --> 00:01:51,679
secure container runtime and so as part

00:01:49,880 --> 00:01:53,869
of my involvement with that project that

00:01:51,679 --> 00:01:57,799
tried to make sense of what was

00:01:53,869 --> 00:02:01,270
happening in that area more specifically

00:01:57,799 --> 00:02:03,969
the talks you will have in this room and

00:02:01,270 --> 00:02:06,649
in other developers that first them

00:02:03,969 --> 00:02:08,660
around Cuba LEDs are mostly focused on

00:02:06,649 --> 00:02:11,000
what's happening on top of kubernetes

00:02:08,660 --> 00:02:12,980
like how you use it or what are the API

00:02:11,000 --> 00:02:15,709
is how you customize it how you extend

00:02:12,980 --> 00:02:18,470
it with operators to allow you to deploy

00:02:15,709 --> 00:02:20,320
complex applications and this talk is

00:02:18,470 --> 00:02:23,000
more about what's happening below it

00:02:20,320 --> 00:02:25,940
like all the open infrastructure pieces

00:02:23,000 --> 00:02:27,230
that you need to run below it more

00:02:25,940 --> 00:02:30,140
specifically the space but

00:02:27,230 --> 00:02:33,980
when Cuban ladies and the Linux kernel

00:02:30,140 --> 00:02:36,049
and what I discovered there by doing my

00:02:33,980 --> 00:02:38,540
investigation is that's it's a pretty

00:02:36,049 --> 00:02:42,290
complex mess of technologies and

00:02:38,540 --> 00:02:44,450
overlapping projects and products some

00:02:42,290 --> 00:02:46,730
of them overlapping some others

00:02:44,450 --> 00:02:50,900
complementary and I had like plenty of

00:02:46,730 --> 00:02:54,440
questions like do container D and cryo

00:02:50,900 --> 00:02:58,790
overlap in some way or other containers

00:02:54,440 --> 00:03:01,280
competing with firecracker or do CRI and

00:02:58,790 --> 00:03:03,530
OC I have anything in common or how many

00:03:01,280 --> 00:03:07,609
different meanings can contain a runtime

00:03:03,530 --> 00:03:09,019
have the answer is a lot and I was

00:03:07,609 --> 00:03:11,660
trying to make sense of it I started to

00:03:09,019 --> 00:03:13,849
draw this diagram and as it was like

00:03:11,660 --> 00:03:15,560
doing it for my personal usage people

00:03:13,849 --> 00:03:18,049
told me that was actually useful to them

00:03:15,560 --> 00:03:20,750
and so this talk is the story behind the

00:03:18,049 --> 00:03:24,560
creation of the diagram and how I dated

00:03:20,750 --> 00:03:25,459
it over time I left enough time in the

00:03:24,560 --> 00:03:27,769
end so that we can have multiple

00:03:25,459 --> 00:03:29,629
questions hopefully and so you can all

00:03:27,769 --> 00:03:31,639
tell me how my diagram is wrong or what

00:03:29,629 --> 00:03:33,319
I forgot in there or obviously that took

00:03:31,639 --> 00:03:35,569
down the technology that is not there

00:03:33,319 --> 00:03:39,010
that should be there there should be

00:03:35,569 --> 00:03:42,440
plenty of time for blaming me at the end

00:03:39,010 --> 00:03:44,750
so five years ago when he started this

00:03:42,440 --> 00:03:45,880
chimera this thing the world used to be

00:03:44,750 --> 00:03:49,250
very simple

00:03:45,880 --> 00:03:51,109
we had cuban latest at the top and it

00:03:49,250 --> 00:03:55,760
was calling dr. or to create containers

00:03:51,109 --> 00:03:58,730
and dr i did it's magic with namespaces

00:03:55,760 --> 00:04:03,620
and see groups and things were perfect

00:03:58,730 --> 00:04:06,650
but then we started that was probably a

00:04:03,620 --> 00:04:08,329
bit too simple and so we and it probably

00:04:06,650 --> 00:04:11,840
gave a bit too much importance to docker

00:04:08,329 --> 00:04:14,359
and his giant green box was not to

00:04:11,840 --> 00:04:17,450
everyone's taste so we started to add

00:04:14,359 --> 00:04:20,299
interfaces the first interfaces we added

00:04:17,450 --> 00:04:22,610
was OSI I was the I stands for open

00:04:20,299 --> 00:04:26,180
containers initiative it was created

00:04:22,610 --> 00:04:30,590
early 2015 so really at the at the proto

00:04:26,180 --> 00:04:32,750
Cuban ladies age and it was really to

00:04:30,590 --> 00:04:34,280
standardize the Wild West of containers

00:04:32,750 --> 00:04:35,990
everyone was doing containers in a

00:04:34,280 --> 00:04:40,569
slightly different way and it was very

00:04:35,990 --> 00:04:43,119
confusing so the OSI I defined two specs

00:04:40,569 --> 00:04:44,830
is the runtime spec that defines the

00:04:43,119 --> 00:04:48,309
primitives that you can use to start

00:04:44,830 --> 00:04:51,099
stop post destroy containers and the

00:04:48,309 --> 00:04:54,219
other is the image spec which is

00:04:51,099 --> 00:04:57,069
defining how a container bundle should

00:04:54,219 --> 00:04:59,770
looks like in terms of its binary form

00:04:57,069 --> 00:05:03,879
to be able to be processed by an 11-time

00:04:59,770 --> 00:05:06,939
and so we took this and we said let's

00:05:03,879 --> 00:05:09,699
split it in two and have the container

00:05:06,939 --> 00:05:12,129
running functions and in the run C part

00:05:09,699 --> 00:05:16,059
and have the doctor see Li and Damon

00:05:12,129 --> 00:05:19,270
doing during the the domain the all the

00:05:16,059 --> 00:05:22,209
processing of the requests so it was

00:05:19,270 --> 00:05:25,270
pretty cool then we studied a new

00:05:22,209 --> 00:05:28,860
another interface the container one-time

00:05:25,270 --> 00:05:32,319
interface CRI was added late 2016 and

00:05:28,860 --> 00:05:36,689
here the idea was to have primitives to

00:05:32,319 --> 00:05:39,069
manage pod life cycles so create a pod

00:05:36,689 --> 00:05:41,139
clear a path sandbox destroy about

00:05:39,069 --> 00:05:43,809
sandbox add a new container to that pod

00:05:41,139 --> 00:05:47,409
sandbox that type of request basically

00:05:43,809 --> 00:05:53,019
what kubernetes needs to do its pod

00:05:47,409 --> 00:05:55,419
stuff and back then the problem was that

00:05:53,019 --> 00:05:57,309
there was two ways of planning

00:05:55,419 --> 00:05:58,779
containers in cuba ladies walk eight on

00:05:57,309 --> 00:06:02,469
one side and docker on the other and

00:05:58,779 --> 00:06:05,439
each had its own code within communities

00:06:02,469 --> 00:06:07,599
to handle handle the the the pod

00:06:05,439 --> 00:06:10,629
creation so it was obviously a bit

00:06:07,599 --> 00:06:13,180
confusing and every time they had to

00:06:10,629 --> 00:06:14,680
change a thing in on the darker side

00:06:13,180 --> 00:06:16,930
they had to replicate it on the rocket

00:06:14,680 --> 00:06:19,869
side so obviously this was calling for

00:06:16,930 --> 00:06:22,180
an abstraction and an interface which

00:06:19,869 --> 00:06:23,649
was added at that layer so see how I

00:06:22,180 --> 00:06:26,740
just sits below cube and it is for

00:06:23,649 --> 00:06:29,949
giving it giving orders to all the CRI

00:06:26,740 --> 00:06:32,369
runtimes that's it below it so doctor

00:06:29,949 --> 00:06:35,769
had to we organize a bit in order to

00:06:32,369 --> 00:06:38,529
like submit itself to to that so it's

00:06:35,769 --> 00:06:40,449
actually split in three pieces and I'm

00:06:38,529 --> 00:06:42,699
simply simplifying because each box

00:06:40,449 --> 00:06:45,879
contains multiple pieces but so doc

00:06:42,699 --> 00:06:48,550
yasiel I would call container D and to

00:06:45,879 --> 00:06:50,949
glue between the CRI interface and

00:06:48,550 --> 00:06:51,910
container the new project called CRI

00:06:50,949 --> 00:06:54,640
continually

00:06:51,910 --> 00:06:56,620
creative name was created to do with

00:06:54,640 --> 00:06:58,900
this shame between the two between the

00:06:56,620 --> 00:07:03,820
the needs of continuity and the needs of

00:06:58,900 --> 00:07:07,480
sure I I was still pretty simple the the

00:07:03,820 --> 00:07:11,410
diagram is still readable barely back

00:07:07,480 --> 00:07:13,150
then at that point at 2017 kubernetes

00:07:11,410 --> 00:07:15,580
business was booming so everyone wanted

00:07:13,150 --> 00:07:18,940
a piece of it our history further

00:07:15,580 --> 00:07:21,120
reduced darker influence on it and at

00:07:18,940 --> 00:07:23,680
that point work at that lost steam

00:07:21,120 --> 00:07:27,160
probably because darker showed a lot of

00:07:23,680 --> 00:07:29,380
willingness to adapt and split its

00:07:27,160 --> 00:07:32,860
components to respond to those

00:07:29,380 --> 00:07:36,220
interfaces and so pocket was basically

00:07:32,860 --> 00:07:42,310
made irrelevant by docker willingness to

00:07:36,220 --> 00:07:45,160
be to be very adaptive and but there was

00:07:42,310 --> 00:07:48,580
still an area there that you could hit

00:07:45,160 --> 00:07:50,380
hill with something because why would

00:07:48,580 --> 00:07:52,390
you need as you keep on a decision why

00:07:50,380 --> 00:07:55,600
would you need to do is create CRI

00:07:52,390 --> 00:07:58,720
container the container D to go to an AA

00:07:55,600 --> 00:08:00,850
CIA one time so there was a room for

00:07:58,720 --> 00:08:03,760
simpler communities specific component

00:08:00,850 --> 00:08:06,610
to bridge between COI and OCI and that's

00:08:03,760 --> 00:08:09,370
where cryo was created it's basically

00:08:06,610 --> 00:08:12,450
varies kubernetes oriented take CRI on

00:08:09,370 --> 00:08:15,610
one side speed slow CI on the other and

00:08:12,450 --> 00:08:17,200
that's very that's very convenient if

00:08:15,610 --> 00:08:20,890
you are not buying into the docker

00:08:17,200 --> 00:08:22,750
ecosystem and if you did not buy into

00:08:20,890 --> 00:08:25,900
that docker echo system then the

00:08:22,750 --> 00:08:28,930
container d part that you had to run to

00:08:25,900 --> 00:08:31,390
continue to run the doctor of CLI was a

00:08:28,930 --> 00:08:33,430
bit redundant so there was space for a

00:08:31,390 --> 00:08:35,560
CLI tool that will allow you to test

00:08:33,430 --> 00:08:37,990
containers and pods outside of

00:08:35,560 --> 00:08:40,030
communities without having to run any of

00:08:37,990 --> 00:08:43,270
the documents that's where pod man was

00:08:40,030 --> 00:08:47,200
created together with lipid and want to

00:08:43,270 --> 00:08:48,220
oversimplify but then everyone was still

00:08:47,200 --> 00:08:52,840
using run sea

00:08:48,220 --> 00:08:55,270
so obviously that was too simple as

00:08:52,840 --> 00:08:58,780
containers we are becoming more

00:08:55,270 --> 00:09:00,610
seriously used and people realized that

00:08:58,780 --> 00:09:02,290
there was a need for stronger isolation

00:09:00,610 --> 00:09:03,820
between workloads especially in the

00:09:02,290 --> 00:09:04,200
public cloud scenario while you might

00:09:03,820 --> 00:09:05,970
host

00:09:04,200 --> 00:09:08,160
your containers next to someone else's

00:09:05,970 --> 00:09:11,100
containers and some people don't have a

00:09:08,160 --> 00:09:14,940
really good hygiene in when they share

00:09:11,100 --> 00:09:16,890
their their workloads so that's when

00:09:14,940 --> 00:09:19,170
everyone ended up discovering the dock

00:09:16,890 --> 00:09:21,860
dirty secrets of containers they're

00:09:19,170 --> 00:09:25,260
actually not very good at containing and

00:09:21,860 --> 00:09:27,870
at least not not enough for sensitive

00:09:25,260 --> 00:09:31,200
workloads and as a result in the real

00:09:27,870 --> 00:09:32,880
world containers actually run in VMs

00:09:31,200 --> 00:09:35,850
that's the dirty secret of containers

00:09:32,880 --> 00:09:39,390
and when I say in the real world I mean

00:09:35,850 --> 00:09:42,060
in Amazon Web Services Google Cloud Adi

00:09:39,390 --> 00:09:45,780
cloud Microsoft Azure they all run into

00:09:42,060 --> 00:09:48,140
some form of VM isolation those

00:09:45,780 --> 00:09:51,990
proprietary clouds all have proprietary

00:09:48,140 --> 00:09:54,420
solutions to do that that isolation is

00:09:51,990 --> 00:09:56,640
is powered by pieces that are not open

00:09:54,420 --> 00:09:59,190
source so there was clearly a need at

00:09:56,640 --> 00:10:02,430
that point for an open source solution

00:09:59,190 --> 00:10:05,940
and up an infrastructure solution to run

00:10:02,430 --> 00:10:11,100
kubernetes spuds within the ends in qemu

00:10:05,940 --> 00:10:15,020
kayvyun back then there was a project

00:10:11,100 --> 00:10:17,790
called hype and company called hyper I

00:10:15,020 --> 00:10:21,110
was creating a container one time called

00:10:17,790 --> 00:10:26,520
one V that allowed to run containers in

00:10:21,110 --> 00:10:29,310
VMs into mu k vm VMS so they had a hyper

00:10:26,520 --> 00:10:32,460
CLI tool that you could call to run

00:10:29,310 --> 00:10:33,530
containers within micro viens ten

00:10:32,460 --> 00:10:38,700
minutes left that's plenty

00:10:33,530 --> 00:10:41,070
it's perfect speak fast so they

00:10:38,700 --> 00:10:44,580
developed the CRA runtime called frack T

00:10:41,070 --> 00:10:48,930
which might have heard of or not that

00:10:44,580 --> 00:10:52,380
allowed you to run to run pods to

00:10:48,930 --> 00:10:55,320
directly on one V and being able to run

00:10:52,380 --> 00:10:56,010
those pods in in the ends around the

00:10:55,320 --> 00:10:58,550
same time

00:10:56,010 --> 00:11:01,080
Intel was working on clear containers

00:10:58,550 --> 00:11:03,840
which was an OC i run time to run

00:11:01,080 --> 00:11:05,220
containers on q k vm and there were

00:11:03,840 --> 00:11:06,960
really a lot of similarities between

00:11:05,220 --> 00:11:10,590
those two projects one v and clear

00:11:06,960 --> 00:11:12,540
containers so they merge into a neutral

00:11:10,590 --> 00:11:14,220
openly developed project called cotta

00:11:12,540 --> 00:11:16,050
containers under the OpenStack

00:11:14,220 --> 00:11:20,010
foundation and

00:11:16,050 --> 00:11:24,690
that was Kara containers Pope proposed

00:11:20,010 --> 00:11:28,560
to one pods of containers in in micro

00:11:24,690 --> 00:11:30,510
VMs when under queuing kv n so since

00:11:28,560 --> 00:11:32,040
scatter containers was a no CI compliant

00:11:30,510 --> 00:11:34,140
one time he could use pod man over

00:11:32,040 --> 00:11:36,060
docker to actually run containers

00:11:34,140 --> 00:11:38,250
directly uncut a container so you did

00:11:36,060 --> 00:11:41,220
not need that hyper CLI anymore that's

00:11:38,250 --> 00:11:45,209
why it's removed from the diagram the

00:11:41,220 --> 00:11:47,370
other nice side effect of doing this

00:11:45,209 --> 00:11:50,459
project this open source of an

00:11:47,370 --> 00:11:52,500
infrastructure project and it's it's

00:11:50,459 --> 00:11:54,420
more generally a great thing about open

00:11:52,500 --> 00:11:56,610
source is that it encouraged those

00:11:54,420 --> 00:11:59,430
companies do Google's the Amazons to

00:11:56,610 --> 00:12:01,890
also who is their proprietary technology

00:11:59,430 --> 00:12:03,360
for container isolation and their own

00:12:01,890 --> 00:12:05,130
open source manner they did not want to

00:12:03,360 --> 00:12:07,019
be displaced by an open source solution

00:12:05,130 --> 00:12:09,990
that would make whatever they were using

00:12:07,019 --> 00:12:12,209
less relevant so that encouraged them to

00:12:09,990 --> 00:12:15,899
also publish as open source their own

00:12:12,209 --> 00:12:18,600
their own projects and so Google

00:12:15,899 --> 00:12:21,029
released G visor which at least in its

00:12:18,600 --> 00:12:23,760
pitch face mode is using a Cisco

00:12:21,029 --> 00:12:25,709
filtering for container isolation so

00:12:23,760 --> 00:12:27,779
they are not really using VMs they have

00:12:25,709 --> 00:12:29,190
modes where the Erin is within VMs but

00:12:27,779 --> 00:12:30,959
the pitch based mode was probably the

00:12:29,190 --> 00:12:33,630
most interesting one is actually doing

00:12:30,959 --> 00:12:35,640
Cisco filtering activities called

00:12:33,630 --> 00:12:38,399
filtering and Amazon released

00:12:35,640 --> 00:12:41,730
firecracker which is highly opinionated

00:12:38,399 --> 00:12:44,459
the actual machine manager to because

00:12:41,730 --> 00:12:46,320
they found that qmu was way too wide in

00:12:44,459 --> 00:12:48,930
terms of what it's supported and they

00:12:46,320 --> 00:12:51,390
had a very narrow use case which was to

00:12:48,930 --> 00:12:53,640
run functions in micro vias

00:12:51,390 --> 00:12:56,130
so for my for Amazon Web Services lambda

00:12:53,640 --> 00:12:57,270
they would run to run those functions

00:12:56,130 --> 00:12:59,089
also in VMs

00:12:57,270 --> 00:13:02,820
that's another dirty secret of functions

00:12:59,089 --> 00:13:07,260
and and to run their sexual containers

00:13:02,820 --> 00:13:09,570
open them in secure containers and cata

00:13:07,260 --> 00:13:12,779
containers evolved so that it could run

00:13:09,570 --> 00:13:16,709
in qmu or in firecracker or in mu which

00:13:12,779 --> 00:13:18,360
is like a light version of qmu for for

00:13:16,709 --> 00:13:24,050
actually running VMs so you cannot

00:13:18,360 --> 00:13:24,050
really run those pods into extremely

00:13:24,170 --> 00:13:29,960
simple VMs that booting in microseconds

00:13:27,470 --> 00:13:31,700
that's actually where the diagram

00:13:29,960 --> 00:13:34,940
started to get too complex because there

00:13:31,700 --> 00:13:38,360
is a hole in there and not sure a boss

00:13:34,940 --> 00:13:40,760
void so someone decided that it would be

00:13:38,360 --> 00:13:44,780
a good idea to directly link container D

00:13:40,760 --> 00:13:47,240
with firecracker and bypass the OCR on

00:13:44,780 --> 00:13:49,100
the OCI interface and directly connect

00:13:47,240 --> 00:13:51,020
the two and they created a piece of

00:13:49,100 --> 00:13:53,900
software called FC container D also a

00:13:51,020 --> 00:13:57,350
very creative name bypassing the OCR

00:13:53,900 --> 00:13:59,120
runtime and yeah how do I represent that

00:13:57,350 --> 00:14:01,370
I need to add another dimension to this

00:13:59,120 --> 00:14:03,230
diagram and then I learned that color

00:14:01,370 --> 00:14:05,990
containers also plugs directly into

00:14:03,230 --> 00:14:08,510
container D and cryo to leverage

00:14:05,990 --> 00:14:10,310
advanced feature in there in addition to

00:14:08,510 --> 00:14:13,990
being an OC I complain at runtime so

00:14:10,310 --> 00:14:16,280
those CRA runtimes are actually

00:14:13,990 --> 00:14:19,340
developing advanced features that are

00:14:16,280 --> 00:14:20,960
smaller than what the OCR runtime do see

00:14:19,340 --> 00:14:23,600
a runtime interface actually mandates

00:14:20,960 --> 00:14:25,250
and so plugging directly into cryo

00:14:23,600 --> 00:14:26,960
are plugging your Viking into containers

00:14:25,250 --> 00:14:28,910
D you can get better performance or more

00:14:26,960 --> 00:14:31,660
features and that's where they started

00:14:28,910 --> 00:14:35,420
to multi-link also by passing the OCI

00:14:31,660 --> 00:14:37,100
the OCI interface still glassy I

00:14:35,420 --> 00:14:39,530
complain at one time but it it's also

00:14:37,100 --> 00:14:42,230
not an OC I complained one time if you

00:14:39,530 --> 00:14:44,420
wanted Cherokee blood so that's where I

00:14:42,230 --> 00:14:46,460
did stop trying to represent it in a

00:14:44,420 --> 00:14:49,340
single diagram that's where I stopped so

00:14:46,460 --> 00:14:53,780
you have CLI tools in green you have CRI

00:14:49,340 --> 00:14:57,350
runtimes in purple OCR runtimes in blue

00:14:53,780 --> 00:14:59,450
and virtual machine managers in red and

00:14:57,350 --> 00:15:03,320
you can see which ones are actually

00:14:59,450 --> 00:15:08,780
complementary which ones can be used as

00:15:03,320 --> 00:15:11,360
alternatives and hopefully this diagram

00:15:08,780 --> 00:15:13,700
gives you if I know this problem is

00:15:11,360 --> 00:15:18,350
probably well versed into the wonderful

00:15:13,700 --> 00:15:20,090
world of container runtimes but it it I

00:15:18,350 --> 00:15:21,620
hope that for some of you gives you a

00:15:20,090 --> 00:15:24,560
better understanding or how those pieces

00:15:21,620 --> 00:15:26,360
fit together I know it helped me so

00:15:24,560 --> 00:15:29,600
which ones are complementary which

00:15:26,360 --> 00:15:31,790
pieces fit together and so thank you for

00:15:29,600 --> 00:15:37,570
your attention

00:15:31,790 --> 00:15:37,570
[Applause]

00:15:37,910 --> 00:15:41,840
and we have time for questions I'm

00:15:40,340 --> 00:15:48,380
pretty sure they were like errors in

00:15:41,840 --> 00:15:50,840
this it's a tell me so there are many

00:15:48,380 --> 00:15:55,280
options which ones do you use and do you

00:15:50,840 --> 00:15:57,980
recommend using and why so like from our

00:15:55,280 --> 00:16:00,050
perspective where we're producing mostly

00:15:57,980 --> 00:16:01,730
cata containers so our problem is not to

00:16:00,050 --> 00:16:03,590
make sure that whatever is invented

00:16:01,730 --> 00:16:06,140
around it we actually support it

00:16:03,590 --> 00:16:09,050
correctly so the most of the work that's

00:16:06,140 --> 00:16:11,150
been done is who supporting the advanced

00:16:09,050 --> 00:16:14,150
feature in cryo and container G and

00:16:11,150 --> 00:16:16,610
plugging into qmu name you track record

00:16:14,150 --> 00:16:18,530
really quickly so that things like FC

00:16:16,610 --> 00:16:19,910
container did don't get created but that

00:16:18,530 --> 00:16:23,240
doesn't prevent people from creating

00:16:19,910 --> 00:16:25,880
code and so that's our perspective I

00:16:23,240 --> 00:16:28,340
would personally I like the I like going

00:16:25,880 --> 00:16:29,750
going vertical communities cryo color

00:16:28,340 --> 00:16:33,470
containers firecracker

00:16:29,750 --> 00:16:37,010
KVM because that's where you get I would

00:16:33,470 --> 00:16:40,150
say the simplest stack but I understand

00:16:37,010 --> 00:16:43,120
how people like to use the docker

00:16:40,150 --> 00:16:47,060
toolset and then if you're like a docker

00:16:43,120 --> 00:16:48,890
shop with you run also containers simple

00:16:47,060 --> 00:16:50,620
containers rather than just cuban it is

00:16:48,890 --> 00:16:54,290
it actually makes sense to traverse it

00:16:50,620 --> 00:16:57,700
in another direction so going through

00:16:54,290 --> 00:17:01,040
CRI container the container the year and

00:16:57,700 --> 00:17:03,560
and then whether or not you use cada

00:17:01,040 --> 00:17:08,000
containers over NCE or divisor others is

00:17:03,560 --> 00:17:12,590
really about your sensitivity profile to

00:17:08,000 --> 00:17:15,200
to the values security properties

00:17:12,590 --> 00:17:18,860
because color containers is not as fast

00:17:15,200 --> 00:17:21,230
as ones like it's it's it's more like

00:17:18,860 --> 00:17:23,240
tens of milliseconds on one side and

00:17:21,230 --> 00:17:25,490
hundreds of milliseconds on the other so

00:17:23,240 --> 00:17:27,860
if you are at that level where you need

00:17:25,490 --> 00:17:29,960
15 minutes second response time maybe

00:17:27,860 --> 00:17:31,460
doing color containers cream.you is not

00:17:29,960 --> 00:17:33,380
is not okay

00:17:31,460 --> 00:17:35,510
quatre containers firecracker maybe one

00:17:33,380 --> 00:17:37,970
because it's like 50 milliseconds 30

00:17:35,510 --> 00:17:40,430
milliseconds so it still has an overhead

00:17:37,970 --> 00:17:42,680
but it depends completely if you are

00:17:40,430 --> 00:17:44,090
running trusted workloads on a private

00:17:42,680 --> 00:17:46,450
community cluster you don't care that

00:17:44,090 --> 00:17:49,899
much about the noisy neighbors and

00:17:46,450 --> 00:17:51,159
the Tiki neighbors if you're a public

00:17:49,899 --> 00:18:00,249
cloud you have to find something like

00:17:51,159 --> 00:18:02,580
like got a containers basically other

00:18:00,249 --> 00:18:02,580
questions

00:18:05,010 --> 00:18:08,299
unison Bergner

00:18:13,370 --> 00:18:20,290
where would you place Alex Dee here oh

00:18:18,280 --> 00:18:23,450
my

00:18:20,290 --> 00:18:25,280
you probably Stefan can probably place

00:18:23,450 --> 00:18:26,750
lxd somewhere in there because I'm

00:18:25,280 --> 00:18:30,020
pretty sure you can plug into cue

00:18:26,750 --> 00:18:34,690
melodies yeah so someone someone wrote a

00:18:30,020 --> 00:18:37,940
CRI for Lexi and kubernetes that's LX e

00:18:34,690 --> 00:18:39,080
ex what LX e because someone is just

00:18:37,940 --> 00:18:42,049
going to collect for that next letter

00:18:39,080 --> 00:18:45,110
you know this dog Fang which then with

00:18:42,049 --> 00:18:47,929
the kubernetes er I'll X T and then Lex

00:18:45,110 --> 00:18:50,570
D can either go through a Lexie straight

00:18:47,929 --> 00:18:52,160
to the camel for containers or these

00:18:50,570 --> 00:18:54,350
days we can run virtual machines which

00:18:52,160 --> 00:18:57,230
then goes to create EMU and then camera

00:18:54,350 --> 00:19:00,830
so legacy would cannot replace the

00:18:57,230 --> 00:19:05,570
entire middle layer yeah but you end up

00:19:00,830 --> 00:19:07,220
with in LXE containers right legs D as

00:19:05,570 --> 00:19:12,350
of last week can read that full machine

00:19:07,220 --> 00:19:14,980
circu mu as well yeah I know I had to

00:19:12,350 --> 00:19:24,140
stop at one point yeah I think I stopped

00:19:14,980 --> 00:19:26,780
it still makes sense so from a diagram

00:19:24,140 --> 00:19:29,750
we can understand that the left part is

00:19:26,780 --> 00:19:32,500
the more secure one and the right part

00:19:29,750 --> 00:19:38,059
is the one of the lowest latency

00:19:32,500 --> 00:19:40,250
well no no so you have one C which would

00:19:38,059 --> 00:19:43,100
run in traditional containers

00:19:40,250 --> 00:19:49,280
Aleksey would probably be also be usable

00:19:43,100 --> 00:19:52,370
there and the like isolation increases

00:19:49,280 --> 00:19:54,260
as you go left I would say and there are

00:19:52,370 --> 00:19:56,990
other things like nabla containers is

00:19:54,260 --> 00:20:00,070
also a solution that does container

00:19:56,990 --> 00:20:04,700
isolation for for pods

00:20:00,070 --> 00:20:06,890
it just has a slightly less success in

00:20:04,700 --> 00:20:09,919
in the container in the humanities world

00:20:06,890 --> 00:20:12,110
I would say but what we are seeing is

00:20:09,919 --> 00:20:13,820
people using run C and color containers

00:20:12,110 --> 00:20:16,370
at the same time and depending on the

00:20:13,820 --> 00:20:19,070
workload they would like switch to one

00:20:16,370 --> 00:20:22,040
or the other so you can basically do run

00:20:19,070 --> 00:20:22,920
them in parallel and decide workload by

00:20:22,040 --> 00:20:25,800
workload if you

00:20:22,920 --> 00:20:30,630
switching to the secure one time or the

00:20:25,800 --> 00:20:32,760
less secure one so next year please 3d

00:20:30,630 --> 00:20:34,970
print a diagram with options they're

00:20:32,760 --> 00:20:40,770
busy

00:20:34,970 --> 00:20:43,620
yeah it really like it's a space where

00:20:40,770 --> 00:20:51,960
people like to see away invent things

00:20:43,620 --> 00:20:53,730
you know so and so I'm not very um I

00:20:51,960 --> 00:20:57,350
don't trust that this diagram is getting

00:20:53,730 --> 00:20:59,640
any simpler in the future human nature

00:20:57,350 --> 00:21:00,300
all right well thank you very much

00:20:59,640 --> 00:21:03,650
thanks

00:21:00,300 --> 00:21:03,650

YouTube URL: https://www.youtube.com/watch?v=MDsjINTL7Ek


