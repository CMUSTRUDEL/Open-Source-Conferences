Title: Debugging and tracing a production RabbitMQ node
Publication date: 2020-07-13
Playlist: FOSDEM 2020
Description: 
	by Gabriele Santomaggio

At: FOSDEM 2020
https://video.fosdem.org/2020/AW1.121/beam_debugging_tracing_rabbitmq_node.webm

In this talk, we will see how to debug/trace on a running RabbitMQ node.
Erlang remote access and remote debugging are builtin features in Erlang/Elixir.❮br/❯
With these features, it is possible to see what's happening inside a BEAM node (as RabbitMQ).
I will show also how to use "dynamic loading"  to add a not native code in a running beam.
Erlang remote access and remote debugging are builtin features in Erlang/Elixir.❮br/❯
With these features, it is possible to see what's happening inside a BEAM node (as RabbitMQ).
There are a set of tools inside the beam like etop, eprof, dbg, fprof ... that work in the same Linux way.
In this talk, we will see how to use some of these features on a running RabbitMQ node.
I will show also how to use "dynamic loading"  to add a not native code in a running beam.

Room: AW1.121
Scheduled start: 2020-02-01 10:30:00
Captions: 
	00:00:04,580 --> 00:00:10,880
so thank you for coming and thank you

00:00:07,220 --> 00:00:13,760
for the organizer this is the first year

00:00:10,880 --> 00:00:16,060
here in Folsom and I'm very happy about

00:00:13,760 --> 00:00:19,010
that so today we're going to speak about

00:00:16,060 --> 00:00:22,610
how to debug and trace our RabbitMQ note

00:00:19,010 --> 00:00:24,739
I will show some things some rabbitmq

00:00:22,610 --> 00:00:26,960
internals please don't try this at home

00:00:24,739 --> 00:00:30,470
or better don't try this in production

00:00:26,960 --> 00:00:35,300
this is just to to understand how

00:00:30,470 --> 00:00:38,980
powerful can be the their airline

00:00:35,300 --> 00:00:43,129
chasing and bugging so they already say

00:00:38,980 --> 00:00:46,519
already said about me I'm currently

00:00:43,129 --> 00:00:49,250
working on RabbitMQ in kubernetes forget

00:00:46,519 --> 00:00:51,980
to say that you can win this papa

00:00:49,250 --> 00:00:55,160
today I will ask some complex question

00:00:51,980 --> 00:00:59,989
if you will answer correctly you can win

00:00:55,160 --> 00:01:01,910
one of these just naming for the people

00:00:59,989 --> 00:01:05,300
that don't know anything about rahmatan

00:01:01,910 --> 00:01:06,850
Qi Lang etc do you know RabbitMQ raise

00:01:05,300 --> 00:01:10,670
your hand

00:01:06,850 --> 00:01:13,910
lot of people do you use RabbitMQ in

00:01:10,670 --> 00:01:17,510
production is there someone that does

00:01:13,910 --> 00:01:23,240
not use rabbitmq you deserve this one in

00:01:17,510 --> 00:01:25,910
the win as you can see is extremely hard

00:01:23,240 --> 00:01:27,250
to win the there is another one so pay

00:01:25,910 --> 00:01:31,370
attention

00:01:27,250 --> 00:01:33,170
so RabbitMQ is message broker the

00:01:31,370 --> 00:01:34,880
interesting part for this talk is that

00:01:33,170 --> 00:01:37,490
is bought in in Erlang and the command

00:01:34,880 --> 00:01:42,530
line in Erik 0 starting from rabbitmq

00:01:37,490 --> 00:01:44,870
3.7 I noticed just running air lung and

00:01:42,530 --> 00:01:48,260
Alex here application the beam is the

00:01:44,870 --> 00:01:50,600
the alan guth on machine so let's start

00:01:48,260 --> 00:01:54,310
speaking about analyzing a Linux machine

00:01:50,600 --> 00:01:57,560
or a server what you usually do is to

00:01:54,310 --> 00:02:00,110
connect remotely in the in the server

00:01:57,560 --> 00:02:02,810
analyze the processes the analyzes

00:02:00,110 --> 00:02:05,870
memory kills some process if need may be

00:02:02,810 --> 00:02:08,599
the process is using a lot of memory a

00:02:05,870 --> 00:02:11,450
lot of CPU and you want to just kill it

00:02:08,599 --> 00:02:13,380
and restart it and run your script

00:02:11,450 --> 00:02:17,280
inside the

00:02:13,380 --> 00:02:19,890
the seller so what if I say that you can

00:02:17,280 --> 00:02:24,270
do the same with another airline

00:02:19,890 --> 00:02:26,100
application so the remote connection in

00:02:24,270 --> 00:02:29,610
our lung is called add airline remote

00:02:26,100 --> 00:02:33,840
shell there are several tools inside the

00:02:29,610 --> 00:02:36,630
beam like top that is called add usually

00:02:33,840 --> 00:02:39,390
there is an a a top a probe etc etc

00:02:36,630 --> 00:02:40,920
inside the along the along neutral

00:02:39,390 --> 00:02:44,970
machine there are several tools to

00:02:40,920 --> 00:02:48,090
manage to trace the memory to understand

00:02:44,970 --> 00:02:52,620
what's going on inside the beam memory

00:02:48,090 --> 00:02:56,190
and you can execute a custom code inside

00:02:52,620 --> 00:02:58,200
the inside the node and one of the most

00:02:56,190 --> 00:03:01,890
interesting feature I think that is that

00:02:58,200 --> 00:03:05,700
you cannot dynamically the code inside

00:03:01,890 --> 00:03:08,100
one beam I mean if the code is I mean if

00:03:05,700 --> 00:03:10,680
the beam is remote you can lord

00:03:08,100 --> 00:03:15,870
you can send code to the to the restore

00:03:10,680 --> 00:03:19,140
machine I usually use this kind of the

00:03:15,870 --> 00:03:21,590
official when I have to work for example

00:03:19,140 --> 00:03:25,170
inside kubernetes because in kubernetes

00:03:21,590 --> 00:03:29,040
I have maybe I have to test some

00:03:25,170 --> 00:03:30,780
kubernetes api and i don't have all the

00:03:29,040 --> 00:03:36,830
kubernetes in local and they have to

00:03:30,780 --> 00:03:36,830
test it remotely and this is one of the

00:03:37,040 --> 00:03:45,840
important buzz feature I think from my

00:03:40,470 --> 00:03:52,170
personal opinion so I will show you demo

00:03:45,840 --> 00:03:56,010
live because I like I am brave and I

00:03:52,170 --> 00:04:01,530
like to show some things live here I

00:03:56,010 --> 00:04:05,310
have rabbitmq node running that is this

00:04:01,530 --> 00:04:08,310
one can you see all right the host name

00:04:05,310 --> 00:04:12,959
is rabbitmq leap my host name is lip

00:04:08,310 --> 00:04:15,090
because I just spent almost one hour to

00:04:12,959 --> 00:04:18,299
decide the host name of on my machine

00:04:15,090 --> 00:04:23,100
and it the fourth one I don't have

00:04:18,299 --> 00:04:24,080
fantasy and we will use the observer

00:04:23,100 --> 00:04:27,229
tool

00:04:24,080 --> 00:04:28,789
we relax us inside the RabbitMQ database

00:04:27,229 --> 00:04:33,409
configuration because for the people

00:04:28,789 --> 00:04:35,419
that use rabbitmq I think that if you

00:04:33,409 --> 00:04:39,590
want to look inside the rabbitmq

00:04:35,419 --> 00:04:43,969
database it is extremely hard to to look

00:04:39,590 --> 00:04:46,189
inside the database and we will call an

00:04:43,969 --> 00:04:52,479
internal function which tries it and the

00:04:46,189 --> 00:04:52,479
we will load a custom model so let me

00:04:53,080 --> 00:05:03,560
okay let's try yes so the first one is

00:04:57,440 --> 00:05:08,060
that we are going to we are going to

00:05:03,560 --> 00:05:11,539
access to the remote RabbitMQ node as

00:05:08,060 --> 00:05:14,120
you can see here the the local node my

00:05:11,539 --> 00:05:16,129
local node node is called the bug but I

00:05:14,120 --> 00:05:19,819
can call the local node as you prefer

00:05:16,129 --> 00:05:23,689
can you see it guys that's better okay

00:05:19,819 --> 00:05:24,110
and here now I am inside the RabbitMQ

00:05:23,689 --> 00:05:28,719
node

00:05:24,110 --> 00:05:32,719
it's easy as you can see too much easy

00:05:28,719 --> 00:05:37,129
so the first tool that someone I think

00:05:32,719 --> 00:05:45,379
that know is oops oops well not this one

00:05:37,129 --> 00:05:48,699
this one so the first tool is the

00:05:45,379 --> 00:05:52,870
observer that gives you an overwatch

00:05:48,699 --> 00:05:57,169
overview in what's happening inside your

00:05:52,870 --> 00:06:00,400
Vista machine the number of course the

00:05:57,169 --> 00:06:03,279
memory you can check for example the

00:06:00,400 --> 00:06:08,240
memory utilization uh-oh

00:06:03,279 --> 00:06:10,879
etc etcetera this is the processes that

00:06:08,240 --> 00:06:13,550
you can order based on the memory usage

00:06:10,879 --> 00:06:15,979
or the number of the reduction PID

00:06:13,550 --> 00:06:19,580
Exeter Exeter the interesting things

00:06:15,979 --> 00:06:23,000
here is this one when you go to insight

00:06:19,580 --> 00:06:26,240
above you you can analyze the 80s table

00:06:23,000 --> 00:06:28,550
and Minister tables RabbitMQ use manager

00:06:26,240 --> 00:06:31,219
only for the configuration this is a

00:06:28,550 --> 00:06:34,969
common mistakes that someone thinks that

00:06:31,219 --> 00:06:36,260
RabbitMQ use users in Asia to store the

00:06:34,969 --> 00:06:39,710
messages RabbitMQ

00:06:36,260 --> 00:06:43,400
using users - Manisha only for the

00:06:39,710 --> 00:06:46,960
configuration okay in this in this way

00:06:43,400 --> 00:06:50,930
you you can see what there is inside the

00:06:46,960 --> 00:06:52,760
database and maybe you have some problem

00:06:50,930 --> 00:06:56,750
with some queue and do you want to check

00:06:52,760 --> 00:07:00,860
if the queue actual exists or stuff like

00:06:56,750 --> 00:07:03,470
that please don't touch the the database

00:07:00,860 --> 00:07:06,140
just view database you shouldn't never

00:07:03,470 --> 00:07:10,670
touch directly this database but if you

00:07:06,140 --> 00:07:13,790
want to try it maybe just to break it

00:07:10,670 --> 00:07:16,370
you can do that so it's easy because I

00:07:13,790 --> 00:07:21,380
am Optima queue is enough to delete the

00:07:16,370 --> 00:07:26,240
BART Liebman Asia badly bribe them queue

00:07:21,380 --> 00:07:28,030
and you recreate RabbitMQ create from

00:07:26,240 --> 00:07:33,830
scratch

00:07:28,030 --> 00:07:37,310
another the problem with the observer is

00:07:33,830 --> 00:07:41,840
that it requires the graphics library

00:07:37,310 --> 00:07:46,910
and for example when you have a remote

00:07:41,840 --> 00:07:48,710
server in kubernetes you don't have the

00:07:46,910 --> 00:07:51,110
graphics library this is useful

00:07:48,710 --> 00:07:55,570
especially when you work locally there

00:07:51,110 --> 00:08:02,360
is another tool that is called observer

00:07:55,570 --> 00:08:05,830
CLI that is let me try to do that can

00:08:02,360 --> 00:08:10,070
you say it ok this is exactly the same

00:08:05,830 --> 00:08:13,000
for observer but if just use a command

00:08:10,070 --> 00:08:15,980
line so you don't have any problem with

00:08:13,000 --> 00:08:19,580
custom libraries and you don't have to

00:08:15,980 --> 00:08:22,240
install anything again this is another

00:08:19,580 --> 00:08:25,180
great way to analyze the

00:08:22,240 --> 00:08:28,830
the RabbitMQ note but you can install

00:08:25,180 --> 00:08:32,200
this in your airline called Alex ear

00:08:28,830 --> 00:08:38,740
application if you want you should you

00:08:32,200 --> 00:08:41,440
must okay so now let's let's try to to

00:08:38,740 --> 00:08:43,810
call some internal function inside

00:08:41,440 --> 00:08:45,880
barbecue and let's see how to trace it

00:08:43,810 --> 00:08:55,540
let let's suppose that I want to create

00:08:45,880 --> 00:08:57,690
for some strange reason q2 much excuse

00:08:55,540 --> 00:08:57,690
me

00:09:00,149 --> 00:09:07,690
okay so this this function RabbitMQ blah

00:09:05,140 --> 00:09:10,779
blah blah declared etc this is the

00:09:07,690 --> 00:09:13,779
internal call so the internal RabbitMQ

00:09:10,779 --> 00:09:16,029
call to create one queue so we just

00:09:13,779 --> 00:09:22,029
created one queue using the internal

00:09:16,029 --> 00:09:28,959
course you don't trust me right now this

00:09:22,029 --> 00:09:33,490
one okay you trust me now okay so let me

00:09:28,959 --> 00:09:37,480
check the time I still have time okay so

00:09:33,490 --> 00:09:42,100
now that let's suppose that you want to

00:09:37,480 --> 00:09:44,649
trace a specific cold inside verb

00:09:42,100 --> 00:09:48,100
Temecula this is in general when you if

00:09:44,649 --> 00:09:54,370
you want to trace one call in your beam

00:09:48,100 --> 00:09:56,709
is enough to start DBC at the moment I

00:09:54,370 --> 00:09:59,170
don't want to spend too much time on the

00:09:56,709 --> 00:10:00,520
BC because it requires another kind of

00:09:59,170 --> 00:10:06,190
the session but just to let you know

00:10:00,520 --> 00:10:08,589
that you can just start the DBC and this

00:10:06,190 --> 00:10:11,170
is the pattern that the call that they

00:10:08,589 --> 00:10:14,920
want to trace that is the clay with all

00:10:11,170 --> 00:10:18,310
the parameters and this is the I want to

00:10:14,920 --> 00:10:22,270
trace only the call the function calls

00:10:18,310 --> 00:10:26,760
now let's try again to create another

00:10:22,270 --> 00:10:31,560
queue let's call it for example tree

00:10:26,760 --> 00:10:34,980
here as you can see there is full stack

00:10:31,560 --> 00:10:39,480
the first one and the second one

00:10:34,980 --> 00:10:42,090
and the return function everything you

00:10:39,480 --> 00:10:45,420
can do everything live so the RabbitMQ

00:10:42,090 --> 00:10:46,370
node is still operating with the second

00:10:45,420 --> 00:10:49,560
queue okay

00:10:46,370 --> 00:10:55,050
don't forget to stop

00:10:49,560 --> 00:10:57,800
oops don't forget to stop the DBC

00:10:55,050 --> 00:11:00,780
especially if you are trying to trace

00:10:57,800 --> 00:11:03,030
production note because the DBC is not

00:11:00,780 --> 00:11:05,220
totally free if you are inside for

00:11:03,030 --> 00:11:10,680
example a loop or some complex function

00:11:05,220 --> 00:11:16,230
the DBC can use lot of memory a lot of

00:11:10,680 --> 00:11:18,240
CPU exit exit now we we trace we are

00:11:16,230 --> 00:11:21,120
tracing the call using the console but

00:11:18,240 --> 00:11:26,000
you can use file that it's better you

00:11:21,120 --> 00:11:29,760
can use TCP socket stuff like that now

00:11:26,000 --> 00:11:36,060
we can do some things more complex here

00:11:29,760 --> 00:11:43,670
that is some things like that okay this

00:11:36,060 --> 00:11:49,950
one for example let me I just created

00:11:43,670 --> 00:11:53,190
100 queues okay the timer effect one

00:11:49,950 --> 00:11:56,430
under kills inside the using always the

00:11:53,190 --> 00:12:01,110
the same function what just using loop

00:11:56,430 --> 00:12:05,220
okay but when you start to work using

00:12:01,110 --> 00:12:07,260
console it's a bit hard because okay you

00:12:05,220 --> 00:12:09,420
can write function but start to be

00:12:07,260 --> 00:12:13,140
extremely complex when you want to do

00:12:09,420 --> 00:12:17,610
some things more more complex so this is

00:12:13,140 --> 00:12:23,760
what I want to show you I have here this

00:12:17,610 --> 00:12:27,080
parent file okay that is inside my local

00:12:23,760 --> 00:12:27,080
my local machine

00:12:31,660 --> 00:12:36,580
me okay

00:12:38,080 --> 00:12:51,620
okay it's enough to add the part and and

00:12:45,640 --> 00:12:54,320
Lord the end Lord model now we have just

00:12:51,620 --> 00:12:58,760
add a new model inside rabbitmq

00:12:54,320 --> 00:13:00,410
accustomed all inside rabbitmq with are

00:12:58,760 --> 00:13:03,680
running note I think that this is

00:13:00,410 --> 00:13:07,810
extremely extremely cool now say you

00:13:03,680 --> 00:13:09,080
know the beam is very cool do you agree

00:13:07,810 --> 00:13:17,170
yeah

00:13:09,080 --> 00:13:20,840
who was the first one that one okay so

00:13:17,170 --> 00:13:24,080
in this way you can associate add or

00:13:20,840 --> 00:13:26,500
remove code exit accident so again be

00:13:24,080 --> 00:13:30,710
careful for what you want to add in your

00:13:26,500 --> 00:13:34,010
in your system you can also remove and

00:13:30,710 --> 00:13:35,930
delete the the model look when you have

00:13:34,010 --> 00:13:38,270
finish it or if you want you can write

00:13:35,930 --> 00:13:39,970
your own custom plugins I dropped in

00:13:38,270 --> 00:13:42,800
queue why not okay

00:13:39,970 --> 00:13:45,530
another things when I say that you can

00:13:42,800 --> 00:13:49,340
do what you want is some things like

00:13:45,530 --> 00:13:57,040
that so you cannot just stop RabbitMQ

00:13:49,340 --> 00:13:57,040
and down so let's

00:13:57,280 --> 00:14:02,830
and you can start the game in this way

00:14:06,190 --> 00:14:11,990
okay I don't have the the cues anymore

00:14:09,380 --> 00:14:15,590
because I created the temple in a queue

00:14:11,990 --> 00:14:18,230
so for the people that no RabbitMQ when

00:14:15,590 --> 00:14:19,520
you start stop and I start RabbitMQ with

00:14:18,230 --> 00:14:22,220
a temple in a queue

00:14:19,520 --> 00:14:29,870
you don't have the excuse the queues

00:14:22,220 --> 00:14:33,190
anymore so when you finish I'd be

00:14:29,870 --> 00:14:37,310
basically wait your trays the bug and

00:14:33,190 --> 00:14:41,240
stuff like that is enough to just kill

00:14:37,310 --> 00:14:46,280
the node and and it's done last note you

00:14:41,240 --> 00:14:49,400
should use the hidden hit the hidden

00:14:46,280 --> 00:14:52,460
parameters that is when you use this

00:14:49,400 --> 00:14:56,180
common hidden you okay thank you you

00:14:52,460 --> 00:14:59,870
will connect to eruption queue or

00:14:56,180 --> 00:15:02,840
another node and your node will be not

00:14:59,870 --> 00:15:06,170
listening in the notes call that this

00:15:02,840 --> 00:15:08,330
should be the right way to do that now I

00:15:06,170 --> 00:15:13,040
am only five minutes

00:15:08,330 --> 00:15:15,740
as I said I work it recently to want a

00:15:13,040 --> 00:15:18,980
new feature in RabbitMQ kubernetes

00:15:15,740 --> 00:15:21,740
plugin and i had to use a lot because i

00:15:18,980 --> 00:15:24,740
don't i didn't have the kubernetes in

00:15:21,740 --> 00:15:27,140
local and i couldn't try this function

00:15:24,740 --> 00:15:30,890
in local so this was the best way to

00:15:27,140 --> 00:15:35,840
tour after that a copy and past the the

00:15:30,890 --> 00:15:38,420
function and it and it work it so

00:15:35,840 --> 00:15:41,840
security someone is thinking i think

00:15:38,420 --> 00:15:44,420
that oh my god everyone can access on my

00:15:41,840 --> 00:15:47,450
model at this time so don't panic

00:15:44,420 --> 00:15:50,120
because in order to access in remote

00:15:47,450 --> 00:15:53,720
shell you need to have the port mapping

00:15:50,120 --> 00:15:56,390
port open and you need the airlin cookie

00:15:53,720 --> 00:15:59,330
and cookie is a sort of secret that you

00:15:56,390 --> 00:16:02,990
shouldn't share with other people and

00:15:59,330 --> 00:16:05,420
it's enough to just to enable the

00:16:02,990 --> 00:16:07,010
firewall and the speaking about RabbitMQ

00:16:05,420 --> 00:16:12,950
is enough to open the

00:16:07,010 --> 00:16:15,530
I'm report and you should use the remote

00:16:12,950 --> 00:16:18,710
access only inside trust network don't

00:16:15,530 --> 00:16:20,210
try this in production for example if

00:16:18,710 --> 00:16:21,920
you want to play with your Optima queue

00:16:20,210 --> 00:16:24,770
you can do that right in order to create

00:16:21,920 --> 00:16:26,510
their cues and exchange you should use

00:16:24,770 --> 00:16:29,690
at the standard API because there are

00:16:26,510 --> 00:16:34,370
several controls around queue creation X

00:16:29,690 --> 00:16:37,040
and exchange creation so play with it

00:16:34,370 --> 00:16:40,130
but when you are in production be

00:16:37,040 --> 00:16:44,840
careful you should you have to know what

00:16:40,130 --> 00:16:48,320
you are doing in production so I just

00:16:44,840 --> 00:16:51,380
have more or less a couple minutes I

00:16:48,320 --> 00:16:54,140
finish it but but I want to point out

00:16:51,380 --> 00:16:57,590
some things that is extremely important

00:16:54,140 --> 00:17:01,010
for me and I think that the Italians guy

00:16:57,590 --> 00:17:04,250
they will agree with me because when I

00:17:01,010 --> 00:17:06,320
go around I see strange things marketers

00:17:04,250 --> 00:17:08,510
in Italian dishes I want to point out

00:17:06,320 --> 00:17:09,140
that spaghetti alla bolognese does not

00:17:08,510 --> 00:17:13,640
exist

00:17:09,140 --> 00:17:17,150
I am from Bologna and trust me does not

00:17:13,640 --> 00:17:21,350
exist the second one spaghetti comp or

00:17:17,150 --> 00:17:23,829
pet that does not exist because it's you

00:17:21,350 --> 00:17:26,780
know kids it's yeah okay

00:17:23,829 --> 00:17:30,140
fettuccine linguine Alfredo does not

00:17:26,780 --> 00:17:33,230
exist the question is who is afraid oh

00:17:30,140 --> 00:17:36,650
because we don't know if I do you know

00:17:33,230 --> 00:17:39,110
afraid we don't know another things that

00:17:36,650 --> 00:17:41,960
the linguini does not exist is not an

00:17:39,110 --> 00:17:44,390
Italian word okay mean we may be

00:17:41,960 --> 00:17:47,360
linguine but linguini does not exist and

00:17:44,390 --> 00:17:49,550
the last one Italian cappuccino only for

00:17:47,360 --> 00:17:53,080
breakfast finish an order for a large

00:17:49,550 --> 00:17:53,080
not please please

00:17:58,240 --> 00:18:06,200
so a few links that can be used for to

00:18:02,330 --> 00:18:09,350
trace and this is these are external

00:18:06,200 --> 00:18:12,050
tools that you can use and if you want

00:18:09,350 --> 00:18:54,920
to just play with it if you have

00:18:12,050 --> 00:18:59,360
questions about to ask and I didn't test

00:18:54,920 --> 00:19:03,140
it I usually use the standard okay if I

00:18:59,360 --> 00:19:06,890
can use the remote shell in this was

00:19:03,140 --> 00:19:09,410
less containers so I didn't test it but

00:19:06,890 --> 00:19:10,820
I think that it should work I don't see

00:19:09,410 --> 00:19:15,110
any reason why you shouldn't work

00:19:10,820 --> 00:19:17,720
because it creates its own gusto machine

00:19:15,110 --> 00:19:20,090
the port mapping and the shouldn't work

00:19:17,720 --> 00:19:24,410
but it's a test that I'd like to do I

00:19:20,090 --> 00:19:28,010
usually use the standard RabbitMQ image

00:19:24,410 --> 00:19:30,410
and work up the stutter rabbitmq image

00:19:28,010 --> 00:19:33,410
this is because I don't want to create

00:19:30,410 --> 00:19:36,410
another another standard you know this

00:19:33,410 --> 00:19:38,940
is another another standard I think that

00:19:36,410 --> 00:19:42,150
for my experience the

00:19:38,940 --> 00:19:45,720
the creation of a new node is enough

00:19:42,150 --> 00:19:49,820
fast so why you want to use this destroy

00:19:45,720 --> 00:19:49,820
class is there any reason

00:19:50,780 --> 00:19:55,680
all right so what speaking about

00:19:53,520 --> 00:19:58,380
kubernetes is kubernetes engine in

00:19:55,680 --> 00:20:00,330
general I didn't have any special kind

00:19:58,380 --> 00:20:02,970
of the problem the problem is only two

00:20:00,330 --> 00:20:06,500
accessing kubernetes once you are inside

00:20:02,970 --> 00:20:06,500
I didn't have any problem

00:20:18,530 --> 00:20:25,290
so so let me say if I have some story

00:20:23,310 --> 00:20:28,230
about the bodying etc to say that I

00:20:25,290 --> 00:20:32,270
spent more time debugging the RabbitMQ

00:20:28,230 --> 00:20:32,270
than write codes yeah

00:20:32,840 --> 00:20:40,380
for example there were a bug in the

00:20:37,410 --> 00:20:42,750
garbage collector because for the people

00:20:40,380 --> 00:20:44,760
that work with garbage collector the

00:20:42,750 --> 00:20:46,940
first thing is a garbage collector is

00:20:44,760 --> 00:20:49,260
very cool because I don't have to

00:20:46,940 --> 00:20:52,560
destroy the memory etcetera etcetera

00:20:49,260 --> 00:20:56,610
after couple of molten whom how can I

00:20:52,560 --> 00:21:00,900
call the the hi how can I force the

00:20:56,610 --> 00:21:03,900
garbage collector come so I have to find

00:21:00,900 --> 00:21:06,420
the issue but basically there were there

00:21:03,900 --> 00:21:10,920
was a problem with the garbage collector

00:21:06,420 --> 00:21:15,750
and the me introduce it parameters that

00:21:10,920 --> 00:21:20,870
each X function the garbage collector is

00:21:15,750 --> 00:21:27,780
faucet to to call and I spent time with

00:21:20,870 --> 00:21:35,010
tools that is called add improv rank

00:21:27,780 --> 00:21:39,150
this one that is our time in providing

00:21:35,010 --> 00:21:41,510
for for air long so you decide to to

00:21:39,150 --> 00:21:45,030
trace one specific call and you can see

00:21:41,510 --> 00:21:49,130
which function is colored most and you

00:21:45,030 --> 00:21:52,920
can decide in this case was

00:21:49,130 --> 00:21:55,500
the the garbage collector because the

00:21:52,920 --> 00:21:57,720
garbage collector was inside the

00:21:55,500 --> 00:22:00,210
function for some reason and we decided

00:21:57,720 --> 00:22:06,110
to call it each I don't know X number of

00:22:00,210 --> 00:22:12,840
the X number number of the reductions

00:22:06,110 --> 00:22:17,280
other stories is mostly about kubernetes

00:22:12,840 --> 00:22:20,430
and yes another one interesting is that

00:22:17,280 --> 00:22:24,180
I found a bug in lazy Q a few years do

00:22:20,430 --> 00:22:26,430
you know Lisa Kuhne RabbitMQ no basic

00:22:24,180 --> 00:22:29,220
you is a kind of the queue I found a bug

00:22:26,430 --> 00:22:34,380
when you switch from the normal to lazy

00:22:29,220 --> 00:22:39,030
and using the DBC and but logging in

00:22:34,380 --> 00:22:41,880
file because was very high stack using

00:22:39,030 --> 00:22:43,980
the DBC I could find the problem and

00:22:41,880 --> 00:22:47,280
they could resolve the problem

00:22:43,980 --> 00:22:47,820
just just was hot but cool resolve the

00:22:47,280 --> 00:22:55,500
problem

00:22:47,820 --> 00:22:56,730
analyzing the distress the trace okay

00:22:55,500 --> 00:23:03,440
thank you

00:22:56,730 --> 00:23:03,440

YouTube URL: https://www.youtube.com/watch?v=HxrqXDTZHBw


