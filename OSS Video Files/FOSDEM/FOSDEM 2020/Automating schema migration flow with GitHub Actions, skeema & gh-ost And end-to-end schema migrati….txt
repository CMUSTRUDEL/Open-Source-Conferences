Title: Automating schema migration flow with GitHub Actions, skeema & gh-ost And end-to-end schema migratiâ€¦
Publication date: 2020-07-14
Playlist: FOSDEM 2020
Description: 
	Automating schema migration flow with GitHub Actions, skeema & gh-ost And end-to-end schema migration automation, from design to production, at GitHub
by Shlomi Noach

At: FOSDEM 2020
https://video.fosdem.org/2020/H.2214/mysql_github_schema.webm

Schema migration is more than running an ALTER TABLE. It is about designing, reviewing, approving, queuing, scheduling, executing, auditing, controlling and versioning the changes.


At GitHub we run multiple migrations per day, and much of this flow used to be manual, taking a significant toll from the databases team. In this session we illustrate how we automated away migration using free and open source solutions, and based on trusted development flow.
Schema migration is more than running an ALTER TABLE. It is about designing, reviewing, approving, queuing, scheduling, executing, auditing, controlling and versioning the changes.


At GitHub we run multiple migrations per day, and much of this flow used to be manual, taking a significant toll from the databases team. In this session we illustrate how we automated away migration using free and open source solutions, and based on trusted development flow.


We highlight the use of the skeema tool, with GitHub Actions, git flow and gh-ost.

Room: H.2214
Scheduled start: 2020-02-01 17:10:00
Captions: 
	00:00:09,240 --> 00:00:13,720
yep well thank you for thank you for

00:00:13,000 --> 00:00:15,370
coming

00:00:13,720 --> 00:00:18,070
late hour I know everyone must be a

00:00:15,370 --> 00:00:20,380
little bit hungry my name is slow Meno

00:00:18,070 --> 00:00:23,439
and this is automated schema regression

00:00:20,380 --> 00:00:25,090
would get AB action schema and ghost

00:00:23,439 --> 00:00:28,330
I'm with the gate of database

00:00:25,090 --> 00:00:29,890
infrastructure team I also a bunch of

00:00:28,330 --> 00:00:31,689
the open source projects Orchestrator

00:00:29,890 --> 00:00:34,660
ghost I will talk a little bit about

00:00:31,689 --> 00:00:36,400
ghost today I work with Geetha by I

00:00:34,660 --> 00:00:39,579
assume I don't need to introduce the

00:00:36,400 --> 00:00:41,680
company here in the past year we we

00:00:39,579 --> 00:00:44,380
shipped a lot of new products and

00:00:41,680 --> 00:00:46,960
services like actions packages security

00:00:44,380 --> 00:00:49,660
advisor advisories code navigation

00:00:46,960 --> 00:00:53,800
search notifications sponsors mobile and

00:00:49,660 --> 00:00:56,140
more seen that our back-end is my school

00:00:53,800 --> 00:00:58,770
my school stores or all our company's

00:00:56,140 --> 00:01:02,380
metadata all these new developments

00:00:58,770 --> 00:01:05,710
imply schema migrations right new

00:01:02,380 --> 00:01:08,830
feature new table added column oh we

00:01:05,710 --> 00:01:10,990
need a new code or new query so we need

00:01:08,830 --> 00:01:13,320
this new index maybe we dropped a few

00:01:10,990 --> 00:01:16,210
tables maybe we do an iteration where

00:01:13,320 --> 00:01:18,130
throughout the process of maturing the

00:01:16,210 --> 00:01:20,920
product we create and then drop tables

00:01:18,130 --> 00:01:23,530
and change their design all the time I

00:01:20,920 --> 00:01:26,500
asked earlier by show of hands how many

00:01:23,530 --> 00:01:28,930
people run a skilled migration per month

00:01:26,500 --> 00:01:31,150
per week per day there were a few people

00:01:28,930 --> 00:01:34,479
who run a schema migration per day on

00:01:31,150 --> 00:01:36,970
average we run two on average per day of

00:01:34,479 --> 00:01:39,010
course not every day is the same some

00:01:36,970 --> 00:01:42,720
days we have like five or six schema

00:01:39,010 --> 00:01:47,170
migrations what is a schema migration

00:01:42,720 --> 00:01:48,940
right on the face of it it looks like

00:01:47,170 --> 00:01:50,530
okay it's just a create table it's just

00:01:48,940 --> 00:01:53,350
an outer table it's just a drop table

00:01:50,530 --> 00:01:56,110
but I think it's a lot more than that

00:01:53,350 --> 00:01:58,090
and I will ask my quick show of hands do

00:01:56,110 --> 00:02:01,090
you find that you have a lot of manual

00:01:58,090 --> 00:02:03,700
labor before during and after a

00:02:01,090 --> 00:02:09,039
migration does this happen to you yes if

00:02:03,700 --> 00:02:15,159
so not so Mary okay so I'd like to break

00:02:09,039 --> 00:02:20,040
down how I perceive schema migrations to

00:02:15,159 --> 00:02:25,330
be in a well controlled audited stay

00:02:20,040 --> 00:02:26,750
reproducible debuggable fashion which is

00:02:25,330 --> 00:02:32,030
the way that that we do it

00:02:26,750 --> 00:02:34,670
so the way the way that I see it we have

00:02:32,030 --> 00:02:37,610
developers who design their features and

00:02:34,670 --> 00:02:40,190
they create the this statement the need

00:02:37,610 --> 00:02:45,260
right I need this table or need these

00:02:40,190 --> 00:02:48,770
new columns hopefully they will ask

00:02:45,260 --> 00:02:51,140
their peers to review hopefully before

00:02:48,770 --> 00:02:53,720
going to production I don't just decide

00:02:51,140 --> 00:02:55,640
something myself and push this can't

00:02:53,720 --> 00:02:59,440
happen with smaller setups but hopefully

00:02:55,640 --> 00:02:59,440
we go through some review process

00:02:59,830 --> 00:03:06,260
hopefully if you have a databases team

00:03:03,770 --> 00:03:09,080
DBAs they will review it as well because

00:03:06,260 --> 00:03:12,650
there's some guidelines that they will

00:03:09,080 --> 00:03:15,050
be concerned with like we do or do not

00:03:12,650 --> 00:03:19,310
support for encase oldest integer is

00:03:15,050 --> 00:03:21,980
signed it should be unsigned right the

00:03:19,310 --> 00:03:27,080
length of a column this is a duplicate

00:03:21,980 --> 00:03:28,940
index stuff like that and from there we

00:03:27,080 --> 00:03:30,890
need to formalize and make sure that

00:03:28,940 --> 00:03:33,380
this statement way we want to generate

00:03:30,890 --> 00:03:36,799
is correct I'll talk a little bit about

00:03:33,380 --> 00:03:38,870
that later and then decide where to run

00:03:36,799 --> 00:03:40,670
this on smaller setups you have a single

00:03:38,870 --> 00:03:45,470
mask you'll clusters or larger setups

00:03:40,670 --> 00:03:48,470
you have multiple ten twenty wait this

00:03:45,470 --> 00:03:50,840
this out the table on which is that

00:03:48,470 --> 00:03:51,950
alter table users wait we have users in

00:03:50,840 --> 00:03:54,890
this cluster in this class in this

00:03:51,950 --> 00:03:58,549
saucer who who figures out exactly which

00:03:54,890 --> 00:04:01,670
one it is who says whose sure this is

00:03:58,549 --> 00:04:04,549
indeed the table we're talking about we

00:04:01,670 --> 00:04:08,209
need to schedule the migration if we run

00:04:04,549 --> 00:04:09,920
multiple migrations a day then possibly

00:04:08,209 --> 00:04:12,350
one of our clusters is already busy

00:04:09,920 --> 00:04:14,180
right now run in a long migration I'm

00:04:12,350 --> 00:04:17,060
not going to kick another concurrent

00:04:14,180 --> 00:04:20,510
migration it's possible for us but it

00:04:17,060 --> 00:04:22,270
really slows things down we really wait

00:04:20,510 --> 00:04:26,180
until the first migration completes

00:04:22,270 --> 00:04:31,580
before we do the next one so there's the

00:04:26,180 --> 00:04:33,680
scheduling here we run the migration we

00:04:31,580 --> 00:04:37,099
all did it make sure everything's fine

00:04:33,680 --> 00:04:39,289
production is fine is happy we probably

00:04:37,099 --> 00:04:40,610
need to report to developers hey what's

00:04:39,289 --> 00:04:42,370
the status with something

00:04:40,610 --> 00:04:45,979
have like a multi-day migration because

00:04:42,370 --> 00:04:48,139
table is crazy big we have a couple

00:04:45,979 --> 00:04:50,000
tables that take 20 days to migrate

00:04:48,139 --> 00:04:54,889
that's like a little bit to the extreme

00:04:50,000 --> 00:04:56,569
but we do have some some substantial

00:04:54,889 --> 00:04:58,669
amount of tables that takes hours to a

00:04:56,569 --> 00:05:00,770
couple days to migrate and we need to be

00:04:58,669 --> 00:05:01,550
able to tell the people hey you know

00:05:00,770 --> 00:05:07,250
it's still working

00:05:01,550 --> 00:05:10,460
eta 12 hours whatever at the end we need

00:05:07,250 --> 00:05:12,199
to maybe clean up drop the old table let

00:05:10,460 --> 00:05:13,909
people know notify them hey that's

00:05:12,199 --> 00:05:15,349
complete do you want to test it do you

00:05:13,909 --> 00:05:18,560
want to verify come back to me to tell

00:05:15,349 --> 00:05:20,389
me that everything is okay and then

00:05:18,560 --> 00:05:22,849
finally the developers will do

00:05:20,389 --> 00:05:25,060
deployments marriages whatever it is

00:05:22,849 --> 00:05:27,830
they need to do does that make sense

00:05:25,060 --> 00:05:30,050
would anyone everyone agree that there's

00:05:27,830 --> 00:05:32,659
a little more manual toil maybe I wasn't

00:05:30,050 --> 00:05:35,029
very clear previously about what manual

00:05:32,659 --> 00:05:37,729
labor it is around immigration so yes

00:05:35,029 --> 00:05:40,250
raise your hand now yes okay good thank

00:05:37,729 --> 00:05:44,120
you internally at geared up we actually

00:05:40,250 --> 00:05:49,150
happened for a long time to own even

00:05:44,120 --> 00:05:51,979
some parts of their developers roles

00:05:49,150 --> 00:05:55,789
because we owned so much of our process

00:05:51,979 --> 00:05:57,860
we took ownership of this extra step so

00:05:55,789 --> 00:06:00,229
for us this was a real problem because

00:05:57,860 --> 00:06:05,229
if we need to run five six migrations

00:06:00,229 --> 00:06:08,860
PDA four Sundays we are a union

00:06:05,229 --> 00:06:11,150
scheduler multitasker context switcher

00:06:08,860 --> 00:06:12,589
okay I need to begin this ball this is

00:06:11,150 --> 00:06:13,909
running I'm going to review this all

00:06:12,589 --> 00:06:18,919
this is complete let me kick the other

00:06:13,909 --> 00:06:21,319
one this puts a huge amount of toil on

00:06:18,919 --> 00:06:24,020
us best-case scenario hours per week

00:06:21,319 --> 00:06:29,930
worst case scenarios hours manual labor

00:06:24,020 --> 00:06:33,110
per day and we sought an automation to

00:06:29,930 --> 00:06:34,789
solve that and so what we're going to do

00:06:33,110 --> 00:06:37,279
now that we've explained the problem

00:06:34,789 --> 00:06:40,400
space I'll illustrate the solution we

00:06:37,279 --> 00:06:43,039
came up with so before showing the

00:06:40,400 --> 00:06:45,650
solution I'd like to tell you that the

00:06:43,039 --> 00:06:47,870
the problem is complex it's complex not

00:06:45,650 --> 00:06:50,389
because it's like rocket science but

00:06:47,870 --> 00:06:53,240
because there's different environments

00:06:50,389 --> 00:06:53,880
here different ownerships right the the

00:06:53,240 --> 00:06:56,310
coaching

00:06:53,880 --> 00:06:58,470
comes from a developer but I'm a DBA

00:06:56,310 --> 00:07:00,600
running it and maybe there's a necessary

00:06:58,470 --> 00:07:02,610
thing to monitor or maybe it's the same

00:07:00,600 --> 00:07:04,050
thing for you but there's a development

00:07:02,610 --> 00:07:05,550
environment and then production

00:07:04,050 --> 00:07:09,990
environment how do you bring this from

00:07:05,550 --> 00:07:12,360
here to there and in a search for a

00:07:09,990 --> 00:07:14,310
complete solution that knows all the

00:07:12,360 --> 00:07:16,170
environment which means it has

00:07:14,310 --> 00:07:18,150
credentials to all the environments it

00:07:16,170 --> 00:07:21,600
can control anything it's pretty risky

00:07:18,150 --> 00:07:24,030
we came up with a design that is a

00:07:21,600 --> 00:07:27,120
combinatorial solution right a few

00:07:24,030 --> 00:07:30,420
loosely coupled applications or

00:07:27,120 --> 00:07:33,930
solutions each responsible on their zone

00:07:30,420 --> 00:07:36,450
or realm and orchestrate it together to

00:07:33,930 --> 00:07:39,360
bring you a full solution and this is

00:07:36,450 --> 00:07:42,000
what I'd like to describe so the first

00:07:39,360 --> 00:07:45,630
thing to note is the code I asked

00:07:42,000 --> 00:07:49,290
earlier who here don't even review their

00:07:45,630 --> 00:07:53,700
code a few people raised their hands in

00:07:49,290 --> 00:07:55,560
my opinion a schema change needs to be

00:07:53,700 --> 00:07:58,080
part of the code and needs to be

00:07:55,560 --> 00:08:03,120
reviewed as if it were code that's my

00:07:58,080 --> 00:08:06,960
opinion specifically get up it's a

00:08:03,120 --> 00:08:09,210
necessity for example we don't only have

00:08:06,960 --> 00:08:12,660
github calm we also shape get up

00:08:09,210 --> 00:08:14,790
Enterprise in one prim solution right it

00:08:12,660 --> 00:08:17,100
sits on a customer's place and while we

00:08:14,790 --> 00:08:19,890
do continuous deployment to Gharib comm

00:08:17,100 --> 00:08:21,660
we do periodic upgrades like every few

00:08:19,890 --> 00:08:26,970
months whatever the timeframe is on a

00:08:21,660 --> 00:08:29,700
customer's host and we need to be able

00:08:26,970 --> 00:08:31,920
to reproduce those schema changes and

00:08:29,700 --> 00:08:34,740
the code updates that we did on comm on

00:08:31,920 --> 00:08:37,140
the customers computers which means we

00:08:34,740 --> 00:08:39,660
have to have the log or we have to have

00:08:37,140 --> 00:08:41,969
the version we need to know exactly what

00:08:39,660 --> 00:08:45,210
migrations we ran and we need to decide

00:08:41,969 --> 00:08:48,570
up to where right where am I going to

00:08:45,210 --> 00:08:51,390
upgrade to and that should be coupled

00:08:48,570 --> 00:08:53,130
with the code because if I put the wrong

00:08:51,390 --> 00:08:58,290
schema version with the wrong code

00:08:53,130 --> 00:09:01,860
everything will explode and so in my

00:08:58,290 --> 00:09:03,510
opinion schema changes should be treated

00:09:01,860 --> 00:09:06,819
as cold and internally at getup

00:09:03,510 --> 00:09:09,489
we always couple the schema changes

00:09:06,819 --> 00:09:12,069
or the schema design within the same

00:09:09,489 --> 00:09:19,269
repo of the code that uses them always

00:09:12,069 --> 00:09:22,600
together to that effect we've kinda

00:09:19,269 --> 00:09:26,379
we're kind of beginning to figure out

00:09:22,600 --> 00:09:28,089
how the solution begins because if we're

00:09:26,379 --> 00:09:31,779
going to treat schema changes its code

00:09:28,089 --> 00:09:34,749
then for us together we happen to have a

00:09:31,779 --> 00:09:37,720
solution to that we happen to know a gig

00:09:34,749 --> 00:09:40,979
hosting service that provides you know

00:09:37,720 --> 00:09:43,299
version in and then source control and

00:09:40,979 --> 00:09:46,739
reviews it's a run that's the very

00:09:43,299 --> 00:09:51,999
platform that we develop and so for us a

00:09:46,739 --> 00:09:55,899
schema change is coupled with what what

00:09:51,999 --> 00:09:58,539
we feel is the heart of the get of flow

00:09:55,899 --> 00:10:00,129
which is the pull request so for us to

00:09:58,539 --> 00:10:04,600
make a schema change a developer would

00:10:00,129 --> 00:10:07,509
check out branch modify the schema

00:10:04,600 --> 00:10:09,729
commit push create a pull request the

00:10:07,509 --> 00:10:12,639
pull request is the place where the

00:10:09,729 --> 00:10:14,949
developer would seek peer review or DBA

00:10:12,639 --> 00:10:16,929
review we will discuss the schema change

00:10:14,949 --> 00:10:20,079
say this is good this is not good let's

00:10:16,929 --> 00:10:23,559
move on this is where CI runs this is

00:10:20,079 --> 00:10:26,169
where communication goes and for us it

00:10:23,559 --> 00:10:29,379
looks like this so in this sample OPR I

00:10:26,169 --> 00:10:33,339
create a pull request I describe what

00:10:29,379 --> 00:10:37,119
it's for I made a few larger slides and

00:10:33,339 --> 00:10:40,989
you the slides here not well visible to

00:10:37,119 --> 00:10:45,339
the people in the back so we the way we

00:10:40,989 --> 00:10:48,429
run designer schemas or version our

00:10:45,339 --> 00:10:50,979
scheme is that on our file system we we

00:10:48,429 --> 00:10:53,619
have the declarative approach the create

00:10:50,979 --> 00:10:56,799
table statements for the for our schemas

00:10:53,619 --> 00:11:01,419
and when I do a schema change what I do

00:10:56,799 --> 00:11:05,379
is I create a PR and my commit reflects

00:11:01,419 --> 00:11:09,789
the new schema design this is smaller

00:11:05,379 --> 00:11:13,179
but not higher right so I added a column

00:11:09,789 --> 00:11:16,119
I dropped an index and this is my new

00:11:13,179 --> 00:11:18,309
schema design I don't explain how to get

00:11:16,119 --> 00:11:20,470
from here to here but I explain what I

00:11:18,309 --> 00:11:22,900
want to have with this code version

00:11:20,470 --> 00:11:24,580
that's a declarative approach as opposed

00:11:22,900 --> 00:11:28,510
to the programmatic approach where you

00:11:24,580 --> 00:11:30,760
version the ultra statement itself so if

00:11:28,510 --> 00:11:33,400
we who if we use this declarative

00:11:30,760 --> 00:11:35,500
approach then how do I know what the

00:11:33,400 --> 00:11:37,030
statement is like what migration do I

00:11:35,500 --> 00:11:39,790
need to run this is the before this is

00:11:37,030 --> 00:11:42,990
the after git diff is not the good

00:11:39,790 --> 00:11:48,280
solution here it's very bad with diff in

00:11:42,990 --> 00:11:51,490
SQL and to that effect we use schema

00:11:48,280 --> 00:11:53,800
schema is a fantastic open source tool

00:11:51,490 --> 00:11:55,570
by our friends from the community Evan

00:11:53,800 --> 00:11:59,410
Elias with no tears today is based in

00:11:55,570 --> 00:12:01,810
the US it's open source it's I'm going

00:11:59,410 --> 00:12:03,640
to do the injustice because I'm going

00:12:01,810 --> 00:12:04,030
through really this right in a couple

00:12:03,640 --> 00:12:06,430
minutes

00:12:04,030 --> 00:12:09,490
it's a tool for automated schema

00:12:06,430 --> 00:12:15,250
migration control we use this subset of

00:12:09,490 --> 00:12:20,680
the capabilities of these two and one of

00:12:15,250 --> 00:12:23,320
the I'll show you how we use came up the

00:12:20,680 --> 00:12:25,570
same with schema is that for people who

00:12:23,320 --> 00:12:29,590
use git or general purpose version

00:12:25,570 --> 00:12:31,810
control this will feel very familiar

00:12:29,590 --> 00:12:34,690
the idea with schema is that you know in

00:12:31,810 --> 00:12:38,290
my repo in my code I will have some

00:12:34,690 --> 00:12:40,480
route path and then for each database

00:12:38,290 --> 00:12:42,340
that I have I have a subdirectory and

00:12:40,480 --> 00:12:45,370
for each table I have the definition

00:12:42,340 --> 00:12:46,600
file the SQL the decree defines that

00:12:45,370 --> 00:12:49,960
table okay so far

00:12:46,600 --> 00:12:52,990
cool there is also some schema

00:12:49,960 --> 00:12:56,830
configuration files schema config

00:12:52,990 --> 00:12:58,900
configuration files tell schema given an

00:12:56,830 --> 00:13:00,820
environment where to find the database

00:12:58,900 --> 00:13:04,839
server for that environment

00:13:00,820 --> 00:13:06,820
okay so schema gets access to database

00:13:04,839 --> 00:13:07,990
service if you want to later give it

00:13:06,820 --> 00:13:11,110
access to production give it access

00:13:07,990 --> 00:13:13,990
oppression if it's QA testing staging

00:13:11,110 --> 00:13:15,910
whatever whatever you choose util schema

00:13:13,990 --> 00:13:21,190
what's the environment and what are the

00:13:15,910 --> 00:13:23,230
credentials and location the table

00:13:21,190 --> 00:13:26,080
definition files just the normal create

00:13:23,230 --> 00:13:30,750
a role nothing interesting about that ok

00:13:26,080 --> 00:13:33,310
so far so schema sees a file system with

00:13:30,750 --> 00:13:34,089
database and table right layout on one

00:13:33,310 --> 00:13:36,550
hand only

00:13:34,089 --> 00:13:38,499
and it has the information to connect to

00:13:36,550 --> 00:13:39,999
your databases and you can do some

00:13:38,499 --> 00:13:42,999
interesting things with schema you can

00:13:39,999 --> 00:13:45,569
say schema please push schema push will

00:13:42,999 --> 00:13:47,889
connect to your database and apply

00:13:45,569 --> 00:13:49,689
whatever scheme is defined in your file

00:13:47,889 --> 00:13:52,240
system which will apply to the database

00:13:49,689 --> 00:13:53,920
it will create tables as needed it will

00:13:52,240 --> 00:13:56,379
drop tables as needed it will alter

00:13:53,920 --> 00:13:58,769
tables as needed and the nice thing is

00:13:56,379 --> 00:14:01,240
that the scheme is very good about

00:13:58,769 --> 00:14:04,660
analyzing the correct if and generate

00:14:01,240 --> 00:14:07,600
the correct and well-formed schema

00:14:04,660 --> 00:14:10,990
author statements you can also ask

00:14:07,600 --> 00:14:12,550
schema to pool so just overwrite my file

00:14:10,990 --> 00:14:15,939
system with whatever it is on the

00:14:12,550 --> 00:14:18,910
database and finally which is roughly

00:14:15,939 --> 00:14:21,430
what we use you can say schema please do

00:14:18,910 --> 00:14:23,649
don't do anything just output the

00:14:21,430 --> 00:14:26,829
necessary outlet statements that would

00:14:23,649 --> 00:14:29,769
take my database from its current state

00:14:26,829 --> 00:14:30,550
to the one in the file system does that

00:14:29,769 --> 00:14:36,999
make sense so far

00:14:30,550 --> 00:14:40,300
cool where do we run schema earlier last

00:14:36,999 --> 00:14:46,050
year we released get up actions get up

00:14:40,300 --> 00:14:49,629
actions is a place for you to run code

00:14:46,050 --> 00:14:52,240
almost arbitrary code as response to

00:14:49,629 --> 00:14:55,779
events on your repos an event could be

00:14:52,240 --> 00:14:59,139
the creation of an issue someone closed

00:14:55,779 --> 00:15:01,149
an issue someone pushed or created pull

00:14:59,139 --> 00:15:03,459
request or request a review or revealed

00:15:01,149 --> 00:15:07,449
or added a label or whatever something

00:15:03,459 --> 00:15:10,990
happens on your repo and the code that

00:15:07,449 --> 00:15:13,360
you would run runs in a container the

00:15:10,990 --> 00:15:15,129
container runs on get-ups own

00:15:13,360 --> 00:15:16,269
infrastructure you don't need to provide

00:15:15,129 --> 00:15:18,759
that container you don't need to do

00:15:16,269 --> 00:15:20,589
anything you just create an action llamÃ³

00:15:18,759 --> 00:15:22,300
file and in that yellow file you would

00:15:20,589 --> 00:15:26,499
put whatever commands you want to run it

00:15:22,300 --> 00:15:29,379
could be shell scripts etc so Gaeta will

00:15:26,499 --> 00:15:31,170
run that code on g-dub's infrastructure

00:15:29,379 --> 00:15:34,240
on your behalf

00:15:31,170 --> 00:15:37,420
given some action and the last but not

00:15:34,240 --> 00:15:39,100
least is that that container while it's

00:15:37,420 --> 00:15:41,920
a container and isolated from the world

00:15:39,100 --> 00:15:44,980
has access to your repo it implicitly it

00:15:41,920 --> 00:15:46,360
implicitly gets the github API token to

00:15:44,980 --> 00:15:50,829
interact with

00:15:46,360 --> 00:15:53,970
repo so get up actions are commonly used

00:15:50,829 --> 00:15:58,120
for CI CDA or no that's a classical use

00:15:53,970 --> 00:16:06,040
use case and that's how we run in schema

00:15:58,120 --> 00:16:09,700
so we run schema to diff diff the the

00:16:06,040 --> 00:16:12,839
changes upon pull requests and it looks

00:16:09,700 --> 00:16:16,329
like this by the way github actions is

00:16:12,839 --> 00:16:18,459
free for public repos for private repos

00:16:16,329 --> 00:16:20,829
there's some free plans on free amount

00:16:18,459 --> 00:16:23,860
of minutes and from there on it's it's

00:16:20,829 --> 00:16:25,959
charged so it looks like this this is a

00:16:23,860 --> 00:16:28,360
very simplified llamÃ³ file that's the

00:16:25,959 --> 00:16:29,980
action definition file it's of course

00:16:28,360 --> 00:16:33,279
incomplete the actual file is much

00:16:29,980 --> 00:16:35,820
bigger it says okay pair pool request

00:16:33,279 --> 00:16:38,260
I'm going to do the next three things

00:16:35,820 --> 00:16:43,089
one is that I'm going to check out

00:16:38,260 --> 00:16:46,930
master or the bed bass riff I'm going to

00:16:43,089 --> 00:16:49,779
check out master then and I forgot to

00:16:46,930 --> 00:16:53,470
say that the container runs Linux it

00:16:49,779 --> 00:16:56,550
runs Ubuntu along with a bunch of useful

00:16:53,470 --> 00:17:00,940
software among which is a MySQL server

00:16:56,550 --> 00:17:02,199
so next I'm going to skin a push I'm

00:17:00,940 --> 00:17:05,319
going to skip a push so I'm going to

00:17:02,199 --> 00:17:08,370
apply the schema definition as found a

00:17:05,319 --> 00:17:12,309
master branch on to the containers MySQL

00:17:08,370 --> 00:17:15,429
database okay so far and then finally

00:17:12,309 --> 00:17:21,760
I'm going to check out the PRS branch or

00:17:15,429 --> 00:17:24,250
head and then PR deef so essentially

00:17:21,760 --> 00:17:26,410
asking schema tell me what the

00:17:24,250 --> 00:17:28,870
statements are needed to take the

00:17:26,410 --> 00:17:34,260
database from the master version to my

00:17:28,870 --> 00:17:36,970
PRS version to my branches version okay

00:17:34,260 --> 00:17:40,200
and it looks like this

00:17:36,970 --> 00:17:43,090
it runs there's a bunch of steps and

00:17:40,200 --> 00:17:45,340
eventually it ends up what what we did

00:17:43,090 --> 00:17:49,660
is that it ends up in adding a pool

00:17:45,340 --> 00:17:53,220
request comment zoom in comment on to

00:17:49,660 --> 00:17:55,660
your PR saying this is the you know

00:17:53,220 --> 00:17:58,980
well-formed alter statement this is what

00:17:55,660 --> 00:17:58,980
schema has

00:17:59,470 --> 00:18:05,330
analyze your PR to do does that make

00:18:02,060 --> 00:18:08,900
sense so far okay all these thus far all

00:18:05,330 --> 00:18:11,990
these story requires one yellow file you

00:18:08,900 --> 00:18:16,010
put in your repo it done done deal

00:18:11,990 --> 00:18:18,740
okay the migration itself create table

00:18:16,010 --> 00:18:21,290
drop table relatively simple for all T

00:18:18,740 --> 00:18:23,630
table I we his ghost raise your hand if

00:18:21,290 --> 00:18:25,520
you've heard of ghost cool we've

00:18:23,630 --> 00:18:26,900
described it in previous years I'm not

00:18:25,520 --> 00:18:29,510
going to repeat I'm just going to say

00:18:26,900 --> 00:18:32,120
that for us ghost works very well it

00:18:29,510 --> 00:18:34,250
does not make impact in production we

00:18:32,120 --> 00:18:36,650
don't need to worry about ghost running

00:18:34,250 --> 00:18:38,990
it's well controlled well behaved will

00:18:36,650 --> 00:18:41,600
throttled and does not hurt our

00:18:38,990 --> 00:18:43,670
production servers so we kind of don't

00:18:41,600 --> 00:18:47,030
care whether ghost is running or not

00:18:43,670 --> 00:18:50,930
it's it's good and safe for us and so

00:18:47,030 --> 00:18:53,030
the glue the final glue is skip free ski

00:18:50,930 --> 00:18:55,430
free the name coined by Tom Cooper names

00:18:53,030 --> 00:18:59,500
are hard it's based on schema and hence

00:18:55,430 --> 00:19:02,030
free a or whatever and we go to ski free

00:18:59,500 --> 00:19:04,520
so this is the orcas training service

00:19:02,030 --> 00:19:09,350
that connects the dots and makes the

00:19:04,520 --> 00:19:11,600
entire flow and we developed it we're

00:19:09,350 --> 00:19:15,170
developing it at get up to solve our

00:19:11,600 --> 00:19:17,720
migration problems so allowing to just

00:19:15,170 --> 00:19:19,550
illustrate with you the entire flow and

00:19:17,720 --> 00:19:21,740
you'll understand what ski free does

00:19:19,550 --> 00:19:23,150
okay so we begin with the developer who

00:19:21,740 --> 00:19:26,450
creates a pool request we've seen this

00:19:23,150 --> 00:19:29,300
this is the change we have that llamÃ³

00:19:26,450 --> 00:19:33,230
file the action file it runs it

00:19:29,300 --> 00:19:37,910
generates the diff it adds a magic label

00:19:33,230 --> 00:19:40,700
migration schema diff right hopefully

00:19:37,910 --> 00:19:41,690
the developer will ask their peers to

00:19:40,700 --> 00:19:45,080
review and approve

00:19:41,690 --> 00:19:47,450
someone reviewed and approved ski free

00:19:45,080 --> 00:19:49,610
is a process that is aware of my repose

00:19:47,450 --> 00:19:52,910
while it doesn't have access to my code

00:19:49,610 --> 00:19:55,880
my get code itself it does have access

00:19:52,910 --> 00:19:59,960
to my to the github API into my repo

00:19:55,880 --> 00:20:02,270
through the API it looks for open pool

00:19:59,960 --> 00:20:04,490
requests that have schema diff

00:20:02,270 --> 00:20:07,370
statements with that label and have been

00:20:04,490 --> 00:20:11,210
approved by a peer that means it's ready

00:20:07,370 --> 00:20:12,570
to ship on how does it ship on ski free

00:20:11,210 --> 00:20:14,519
says well yeah the

00:20:12,570 --> 00:20:16,380
well preserve approved I'm now seeking

00:20:14,519 --> 00:20:18,389
review from the database infrastructure

00:20:16,380 --> 00:20:20,399
team because they're the next step

00:20:18,389 --> 00:20:22,409
that's that's the process for some

00:20:20,399 --> 00:20:24,299
Reapers we have the DB schema reviewers

00:20:22,409 --> 00:20:27,330
team who are more application aware but

00:20:24,299 --> 00:20:32,190
we could have one or two reviewers

00:20:27,330 --> 00:20:34,159
federal reviewers needed so I still mean

00:20:32,190 --> 00:20:37,049
the database infrastructure team approve

00:20:34,159 --> 00:20:38,490
ski free sees that it keeps pulling the

00:20:37,049 --> 00:20:42,750
pull request what's the status

00:20:38,490 --> 00:20:44,730
oh it's been labeled as you know a

00:20:42,750 --> 00:20:46,649
change and the user approved there the

00:20:44,730 --> 00:20:49,309
peer approve and the database

00:20:46,649 --> 00:20:51,899
infrastructure team approved all right I

00:20:49,309 --> 00:20:53,879
compute where I need to run this okay

00:20:51,899 --> 00:20:56,659
this specific see much change is going

00:20:53,879 --> 00:20:59,220
to run on this and that cluster and

00:20:56,659 --> 00:21:00,990
scheduler is kicking in and it checks

00:20:59,220 --> 00:21:03,029
and it knows whether a migration is

00:21:00,990 --> 00:21:04,080
already running yes or no and whether

00:21:03,029 --> 00:21:07,110
I'm good to go

00:21:04,080 --> 00:21:09,570
and as it begins to run the migration it

00:21:07,110 --> 00:21:11,460
adds a pull request comment and as it

00:21:09,570 --> 00:21:13,139
completes running the migration it adds

00:21:11,460 --> 00:21:15,840
a pull request comment the developer

00:21:13,139 --> 00:21:17,789
knows they just know because all they

00:21:15,840 --> 00:21:19,500
need to do is listen on their

00:21:17,789 --> 00:21:20,850
notifications we use an already

00:21:19,500 --> 00:21:22,440
established mechanism forgettable

00:21:20,850 --> 00:21:24,269
notifications we don't need to reinvent

00:21:22,440 --> 00:21:26,340
the wheel we don't need to communicate

00:21:24,269 --> 00:21:29,610
to the developer because they just know

00:21:26,340 --> 00:21:32,100
we're telling them by automation finally

00:21:29,610 --> 00:21:34,799
maybe the PR has multiple migrations we

00:21:32,100 --> 00:21:38,519
will notify the developer everything is

00:21:34,799 --> 00:21:41,250
done please go ahead do your thing great

00:21:38,519 --> 00:21:43,919
I'm happy to marriage and do whatever I

00:21:41,250 --> 00:21:48,240
want to do deploy do whatever I want to

00:21:43,919 --> 00:21:51,059
do make sense so far cool so this is how

00:21:48,240 --> 00:21:55,889
it looks like today we started running

00:21:51,059 --> 00:21:59,039
this like three months ago for those

00:21:55,889 --> 00:22:02,639
sitting in the back the entire list that

00:21:59,039 --> 00:22:05,639
used to be owned by DBA now is mostly

00:22:02,639 --> 00:22:08,190
taken by automation where developers

00:22:05,639 --> 00:22:10,440
should own it they own it the DBA team

00:22:08,190 --> 00:22:12,799
now only have one role in that process

00:22:10,440 --> 00:22:15,440
and that is to review and approve the PR

00:22:12,799 --> 00:22:18,149
once we review and approve the PR

00:22:15,440 --> 00:22:21,179
automation takes it away we don't need

00:22:18,149 --> 00:22:24,179
to think about it anymore the impact for

00:22:21,179 --> 00:22:25,440
us is down from hours per day or hours

00:22:24,179 --> 00:22:27,330
per week to me

00:22:25,440 --> 00:22:29,610
it's per week that's the time we spent

00:22:27,330 --> 00:22:32,279
to their own migrations we don't care we

00:22:29,610 --> 00:22:34,440
care because we reveal that once we

00:22:32,279 --> 00:22:38,879
approve take it away

00:22:34,440 --> 00:22:41,429
and everyone knows developers have

00:22:38,879 --> 00:22:43,799
visibility they also have cherubs they

00:22:41,429 --> 00:22:46,440
can proactively check what the status is

00:22:43,799 --> 00:22:48,149
but like I said they get notifications

00:22:46,440 --> 00:22:50,000
on the PR page everything is

00:22:48,149 --> 00:22:52,470
communicated through the peer page

00:22:50,000 --> 00:22:55,649
better tiny transitions we don't need to

00:22:52,470 --> 00:22:58,470
wait for database engineer to be up in

00:22:55,649 --> 00:23:00,539
awake at their computer to kick off the

00:22:58,470 --> 00:23:03,330
migration the methylation just kicks off

00:23:00,539 --> 00:23:05,220
as soon as possible so developers have

00:23:03,330 --> 00:23:07,830
been telling us you know how shorter the

00:23:05,220 --> 00:23:10,230
time was you know wall clock time from

00:23:07,830 --> 00:23:13,500
the moment they publish a request until

00:23:10,230 --> 00:23:16,289
the moment it's done an introduction ok

00:23:13,500 --> 00:23:19,289
so far skipper was developed internally

00:23:16,289 --> 00:23:21,629
geared up and uses internal get up

00:23:19,289 --> 00:23:25,799
resources and services like our service

00:23:21,629 --> 00:23:28,500
discovery making mechanism and our

00:23:25,799 --> 00:23:30,210
inventory service and shadow ops

00:23:28,500 --> 00:23:34,320
integrations and internal golang

00:23:30,210 --> 00:23:36,960
libraries which we have and so it's not

00:23:34,320 --> 00:23:38,309
really a general purpose solution and

00:23:36,960 --> 00:23:40,710
it's something that's very difficult to

00:23:38,309 --> 00:23:42,690
open-source and to just ship to to

00:23:40,710 --> 00:23:47,370
everyone because it relies so much on

00:23:42,690 --> 00:23:49,230
our internal infrastructure and yet we

00:23:47,370 --> 00:23:52,769
hope the community can benefit from this

00:23:49,230 --> 00:23:55,980
so we'll open sourcing it

00:23:52,769 --> 00:23:58,679
so what you'll get within a couple of

00:23:55,980 --> 00:24:00,299
weeks I hope so look out for genome

00:23:58,679 --> 00:24:03,600
engineering blog post where we will

00:24:00,299 --> 00:24:04,980
share this you'll get an incomplete code

00:24:03,600 --> 00:24:07,590
you'll get code that doesn't build

00:24:04,980 --> 00:24:10,200
doesn't compile compile it will break

00:24:07,590 --> 00:24:12,149
but with some hints and suggestions for

00:24:10,200 --> 00:24:14,070
you ok instead of using a service to

00:24:12,149 --> 00:24:16,320
everyone why don't you start with a

00:24:14,070 --> 00:24:18,750
simple configuration file and then work

00:24:16,320 --> 00:24:22,590
it out if the community finds itself or

00:24:18,750 --> 00:24:24,690
we're happy so hopefully within a couple

00:24:22,590 --> 00:24:28,190
weeks we'll release key free is open

00:24:24,690 --> 00:24:31,309
source and I'm happy to take questions

00:24:28,190 --> 00:24:31,309
yes sir

00:24:33,400 --> 00:24:39,020
the scale of each redeployed these

00:24:35,630 --> 00:24:45,880
migrations we have over a hundred

00:24:39,020 --> 00:24:51,169
production servers in a dozen more

00:24:45,880 --> 00:24:53,960
production clusters we are not huge but

00:24:51,169 --> 00:24:56,240
we're very busy right so we do have a

00:24:53,960 --> 00:24:59,720
couple clusters that are like maybe a

00:24:56,240 --> 00:25:02,480
couple terabytes worth of data set

00:24:59,720 --> 00:25:05,030
others are smaller but almost all of

00:25:02,480 --> 00:25:08,630
them are extremely busy right so an

00:25:05,030 --> 00:25:10,850
interruption to those classes is very

00:25:08,630 --> 00:25:13,370
quickly reflected as a gdb incident

00:25:10,850 --> 00:25:15,850
right so what's important for us is to

00:25:13,370 --> 00:25:18,380
keep everything under the radar that's

00:25:15,850 --> 00:25:20,809
if it takes longer to run that's fine

00:25:18,380 --> 00:25:23,030
but most important to keep it under the

00:25:20,809 --> 00:25:33,860
radar does that answer your question

00:25:23,030 --> 00:25:36,320
yes sir right yes yes so skipper itself

00:25:33,860 --> 00:25:39,110
is backed by its own MySQL database

00:25:36,320 --> 00:25:40,970
right and so Skip's whiskey free

00:25:39,110 --> 00:25:43,760
stateless but everything gets written

00:25:40,970 --> 00:25:45,890
there and so skipper is can easily check

00:25:43,760 --> 00:25:47,929
whether there's an entry there's a live

00:25:45,890 --> 00:25:50,120
check that keeps updating to make sure

00:25:47,929 --> 00:25:53,360
and if the migration dies for some

00:25:50,120 --> 00:25:59,770
reason eventually that wall will be

00:25:53,360 --> 00:25:59,770
garbage collected and will yes sir

00:26:01,840 --> 00:26:07,010
how do I handle how do we handle

00:26:04,370 --> 00:26:09,200
migrations that update data we call

00:26:07,010 --> 00:26:11,690
these transitions right these are not

00:26:09,200 --> 00:26:13,789
schema migrations these are like okay

00:26:11,690 --> 00:26:15,590
once we created some column now you want

00:26:13,789 --> 00:26:20,590
to populate that column based on some

00:26:15,590 --> 00:26:23,390
other query this we call it transition

00:26:20,590 --> 00:26:26,419
this has to do with us but but it's not

00:26:23,390 --> 00:26:28,400
a schema migration so the developers

00:26:26,419 --> 00:26:30,320
design the transition we call this

00:26:28,400 --> 00:26:33,020
transition right the update the insert

00:26:30,320 --> 00:26:34,640
or whatever and the one thing that we do

00:26:33,020 --> 00:26:37,250
provide to them is a throttling

00:26:34,640 --> 00:26:39,620
mechanism because this might involve

00:26:37,250 --> 00:26:41,690
like updating 50 million rows we don't

00:26:39,620 --> 00:26:44,430
want to do that in once we have a drop

00:26:41,690 --> 00:26:46,860
in service called fraeno

00:26:44,430 --> 00:26:49,770
if re and oh it's it's listed actually

00:26:46,860 --> 00:26:51,210
in the first slide and so this is a

00:26:49,770 --> 00:26:53,370
pushback service it's a voluntary

00:26:51,210 --> 00:26:55,380
pushback service you will ask fraeno hey

00:26:53,370 --> 00:26:57,450
am i good to write to that cluster and

00:26:55,380 --> 00:26:59,820
friend will say yeah it looks healthy to

00:26:57,450 --> 00:27:02,370
me or no please refrain from writing if

00:26:59,820 --> 00:27:04,980
it says okay you will write like 50

00:27:02,370 --> 00:27:06,030
maybe a hundred rows and ask again and

00:27:04,980 --> 00:27:09,090
again and again again

00:27:06,030 --> 00:27:10,290
so that's that's a service they have

00:27:09,090 --> 00:27:17,250
time for more questions

00:27:10,290 --> 00:27:19,770
one last question sir in the back yes

00:27:17,250 --> 00:27:24,150
good question do we also migrate

00:27:19,770 --> 00:27:26,970
skimmers with shorted tables we do

00:27:24,150 --> 00:27:28,560
experiment with the test we are in in

00:27:26,970 --> 00:27:34,560
different clusters we're in different

00:27:28,560 --> 00:27:37,860
stages of maturity and so yes ski free

00:27:34,560 --> 00:27:39,600
is shard aware so one of the things that

00:27:37,860 --> 00:27:41,910
is internal together these are a/b test

00:27:39,600 --> 00:27:45,240
setup so ski free can talk to the test

00:27:41,910 --> 00:27:48,600
and verify whether this is shorted and

00:27:45,240 --> 00:27:50,580
if so it knows to run like your single

00:27:48,600 --> 00:27:52,440
out the statement needs to run on three

00:27:50,580 --> 00:27:54,780
different clusters or four different

00:27:52,440 --> 00:27:57,000
clusters because the cluster is in three

00:27:54,780 --> 00:28:01,260
or four shards and so it will

00:27:57,000 --> 00:28:02,730
independently alter the table and part

00:28:01,260 --> 00:28:04,980
of the vacations relation is to update

00:28:02,730 --> 00:28:08,160
the V schema etc but yeah this is

00:28:04,980 --> 00:28:10,430
basically handled okay thank you very

00:28:08,160 --> 00:28:10,430
much

00:28:11,860 --> 00:28:13,920

YouTube URL: https://www.youtube.com/watch?v=xyMKhL75Vyg


