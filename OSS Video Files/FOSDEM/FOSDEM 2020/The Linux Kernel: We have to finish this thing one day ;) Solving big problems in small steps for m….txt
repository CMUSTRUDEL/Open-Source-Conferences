Title: The Linux Kernel: We have to finish this thing one day ;) Solving big problems in small steps for m…
Publication date: 2020-07-17
Playlist: FOSDEM 2020
Description: 
	The Linux Kernel: We have to finish this thing one day ;) Solving big problems in small steps for more than two decades
by Thorsten Leemhuis

At: FOSDEM 2020
https://video.fosdem.org/2020/Janson/linux_kernel.webm

Today's Linux kernel and the ones from the early FOSDEM days still have some things in common, but in the end are totally different beasts. This talk will take a closer look at how the Linux kernel and its development during those twenty years evolved and adapted to new expectations. The talk will thus mention some of the changes to the Linux kernel that had the most impact in those two decades; many might have seemed small or insignificant in the beginning, but turned out to pave the path for ground breaking techniques like Android, Cloud or Containers we all deal with today. The speaker will also take a closer look at how Linux kernel development itself changed during those twenty years, but also cover aspects that didn't change much – like the email driver development model, which in the days of Github and Gitlab might look anarchic and from the Middle Ages to some. The speaker also will step on thin ice and speculate a few minutes what the future might hold, as there are a few strong indicators that Linux is entering a new era and slowly but steady get more aspects of a microkernel.

Room: Janson
Scheduled start: 2020-02-01 09:00:00
Captions: 
	00:00:04,580 --> 00:00:08,180
I shown your phone turn off the sounds

00:00:06,680 --> 00:00:10,160
on your phone you probably bought like

00:00:08,180 --> 00:00:12,320
14 other things attached to the Wi-Fi

00:00:10,160 --> 00:00:13,670
which is why I'm on 3G right now thanks

00:00:12,320 --> 00:00:15,620
so much

00:00:13,670 --> 00:00:19,460
you should probably turn those on silent

00:00:15,620 --> 00:00:21,260
as well this will be video recorded I

00:00:19,460 --> 00:00:22,609
can't say videotaped anymore even though

00:00:21,260 --> 00:00:26,990
that's how I learned how to do things

00:00:22,609 --> 00:00:28,369
this beard is gray so we only have this

00:00:26,990 --> 00:00:32,269
working microphone because it's an

00:00:28,369 --> 00:00:34,519
all-volunteer event please donate so

00:00:32,269 --> 00:00:36,920
during the Q&A session you'll have to

00:00:34,519 --> 00:00:39,170
raise your hand speak clearly without

00:00:36,920 --> 00:00:40,790
the assistance of modern technology the

00:00:39,170 --> 00:00:42,379
speaker will repeat that for the

00:00:40,790 --> 00:00:44,449
recording for all the streaming people

00:00:42,379 --> 00:00:46,629
who just got lost and decided to stop at

00:00:44,449 --> 00:00:50,510
a Starbucks and connect to the Wi-Fi so

00:00:46,629 --> 00:00:53,869
question repeats answers learning

00:00:50,510 --> 00:00:55,519
everybody ready oh well you're not even

00:00:53,869 --> 00:00:59,720
awake yet that coffee hasn't kicked in

00:00:55,519 --> 00:01:01,070
is everybody ready thank you yeah you

00:00:59,720 --> 00:01:02,150
don't have to be excited about me you

00:01:01,070 --> 00:01:04,760
should be excited about our first

00:01:02,150 --> 00:01:06,200
speaker whose name got removed because

00:01:04,760 --> 00:01:08,810
somebody wants me to take an update

00:01:06,200 --> 00:01:12,260
while I am traveling that's rude

00:01:08,810 --> 00:01:14,090
Thorstein leave Hughes is a Linux kernel

00:01:12,260 --> 00:01:16,010
development follower he's been starting

00:01:14,090 --> 00:01:17,360
since the start of the century turns out

00:01:16,010 --> 00:01:18,860
he's known for his kernel log column

00:01:17,360 --> 00:01:20,570
which is over the years covered the

00:01:18,860 --> 00:01:23,300
features of more than 70 new linux

00:01:20,570 --> 00:01:25,610
features in detail as elaborate and

00:01:23,300 --> 00:01:28,190
respected article series isn't published

00:01:25,610 --> 00:01:29,630
by his employer the german CT magazines

00:01:28,190 --> 00:01:32,870
hereís biggest computer and tech

00:01:29,630 --> 00:01:34,460
magazine both online and in print if you

00:01:32,870 --> 00:01:36,950
don't know what print is ask somebody

00:01:34,460 --> 00:01:38,659
who's got a beard like mine he used to

00:01:36,950 --> 00:01:40,460
contribute to the Linux kernel but has

00:01:38,659 --> 00:01:42,140
put that aside just so he can cover and

00:01:40,460 --> 00:01:45,050
come to conferences like this and talk

00:01:42,140 --> 00:01:46,510
about open source please give a round of

00:01:45,050 --> 00:01:53,920
applause for Thoris Tenley news

00:01:46,510 --> 00:01:55,250
[Applause]

00:01:53,920 --> 00:01:57,860
yeah

00:01:55,250 --> 00:02:00,710
welcome everybody I haven't used such a

00:01:57,860 --> 00:02:03,409
mic for quite a while so if I don't hold

00:02:00,710 --> 00:02:05,390
it right just let me know yeah but let's

00:02:03,409 --> 00:02:07,700
go here it's a 20s first time already

00:02:05,390 --> 00:02:09,979
and I think I'm one giving a keynote

00:02:07,700 --> 00:02:12,019
that's a big biggest chance to really

00:02:09,979 --> 00:02:13,250
give thanks to the organizers and all

00:02:12,019 --> 00:02:16,010
the volunteers that make this great

00:02:13,250 --> 00:02:18,489
conferences happen so we'll give a round

00:02:16,010 --> 00:02:18,489
of applause please

00:02:23,200 --> 00:02:30,080
yeah thanks for this work a warning this

00:02:27,110 --> 00:02:32,239
talk is kind of part of the history talk

00:02:30,080 --> 00:02:34,010
but don't worry it won't be in history

00:02:32,239 --> 00:02:35,900
class I promise I'll make sure of that

00:02:34,010 --> 00:02:38,000
and everything I mentioned is kinda

00:02:35,900 --> 00:02:40,519
relevant for today and there will be a

00:02:38,000 --> 00:02:41,299
moral of the story at the end so let's

00:02:40,519 --> 00:02:44,150
get started

00:02:41,299 --> 00:02:47,690
the stage when if first first time

00:02:44,150 --> 00:02:50,260
actually happened in 2001 shortly before

00:02:47,690 --> 00:02:53,209
that Linux 2.4 had just been released I

00:02:50,260 --> 00:02:55,760
basically had all the important features

00:02:53,209 --> 00:02:57,680
needed back then kind of everything

00:02:55,760 --> 00:02:59,980
needed to conquer the world and bring us

00:02:57,680 --> 00:03:02,150
where we are today POSIX support

00:02:59,980 --> 00:03:05,569
graphical interface

00:03:02,150 --> 00:03:09,290
it was potable to various arc arcs and

00:03:05,569 --> 00:03:10,940
the performance was good since then ton

00:03:09,290 --> 00:03:12,739
of improvements have been merged into

00:03:10,940 --> 00:03:14,569
the Linux kernel and I count can only

00:03:12,739 --> 00:03:16,060
mention if quite a few of them because

00:03:14,569 --> 00:03:19,280
otherwise this talk would take all day

00:03:16,060 --> 00:03:21,500
or even two days maybe and one of the

00:03:19,280 --> 00:03:25,040
things that happened Linux was growing

00:03:21,500 --> 00:03:27,849
up to that for for example would like to

00:03:25,040 --> 00:03:30,560
not run very well on today's computers

00:03:27,849 --> 00:03:32,840
obviously because lots of drivers would

00:03:30,560 --> 00:03:35,030
be missing but one of the things that

00:03:32,840 --> 00:03:37,010
wouldn't work is but it would be

00:03:35,030 --> 00:03:39,650
problematic would be the number of CPU

00:03:37,010 --> 00:03:39,919
cores in modern systems because back

00:03:39,650 --> 00:03:42,590
then

00:03:39,919 --> 00:03:44,450
uni processors were quite a norm if you

00:03:42,590 --> 00:03:48,230
had an SMP system of two processes that

00:03:44,450 --> 00:03:51,829
was normal back then but today we have

00:03:48,230 --> 00:03:53,510
CPUs with 12 or 16 calls actually and

00:03:51,829 --> 00:03:56,299
even smartphones have four cores and

00:03:53,510 --> 00:03:59,569
that might be way too much for Linux it

00:03:56,299 --> 00:04:02,870
was actually SMP capable since June 1996

00:03:59,569 --> 00:04:04,849
already but back then that was kind of

00:04:02,870 --> 00:04:07,609
brute force how it was made possible

00:04:04,849 --> 00:04:09,950
there was big car lock and that's

00:04:07,609 --> 00:04:12,769
basically that only one CPU core was

00:04:09,950 --> 00:04:15,769
allowed to execute kernel code at a time

00:04:12,769 --> 00:04:17,450
so I had two programs running in

00:04:15,769 --> 00:04:19,190
parallel and both wanted to call into

00:04:17,450 --> 00:04:21,650
the kernel to to make it do something

00:04:19,190 --> 00:04:24,560
and they had to wait for the other one

00:04:21,650 --> 00:04:26,510
to finish that actually was soft would

00:04:24,560 --> 00:04:29,389
find a great locking that followed in

00:04:26,510 --> 00:04:32,069
2.2 and two that form so the next two or

00:04:29,389 --> 00:04:36,139
three years and that made Linux

00:04:32,069 --> 00:04:39,270
scale a lot better already so in the 2.4

00:04:36,139 --> 00:04:41,369
days it was wasn't that bad an email but

00:04:39,270 --> 00:04:43,949
other unix's were known to scale a lot

00:04:41,369 --> 00:04:46,409
better the Linux developers actually

00:04:43,949 --> 00:04:48,569
continued to work on that and by 2.6

00:04:46,409 --> 00:04:51,210
Linux had got a thousands of finer

00:04:48,569 --> 00:04:54,539
graded locks um yeah but pecan lock was

00:04:51,210 --> 00:04:55,979
still around yeah desperate even if some

00:04:54,539 --> 00:05:00,089
people had assumed it would be gone by

00:04:55,979 --> 00:05:04,199
2006 already I looked it up actually

00:05:00,089 --> 00:05:08,879
2006 dot six had about 500 locks pecan

00:05:04,199 --> 00:05:11,339
log calls back then and it as it turned

00:05:08,879 --> 00:05:15,149
out many many more steps were needed and

00:05:11,339 --> 00:05:20,879
had to be taken to get rid of the big

00:05:15,149 --> 00:05:22,589
car lock networks acting up here and if

00:05:20,879 --> 00:05:24,959
you're interested in all those details

00:05:22,589 --> 00:05:27,659
which had to be done you can look some

00:05:24,959 --> 00:05:30,059
of them up on the lwn nut which is a

00:05:27,659 --> 00:05:31,469
great size that size that reports about

00:05:30,059 --> 00:05:34,439
the happenings in the Linux kernel all

00:05:31,469 --> 00:05:37,110
the time now as you can see during at

00:05:34,439 --> 00:05:39,330
between 2004 and 2011 when the pecan

00:05:37,110 --> 00:05:41,520
lock was removed and there were lots of

00:05:39,330 --> 00:05:43,919
articles that explained where all the

00:05:41,520 --> 00:05:46,319
problems were yeah and as I mentioned it

00:05:43,919 --> 00:05:48,659
Linux rhetoric rid of this big con lock

00:05:46,319 --> 00:05:50,789
that was a problem for scalability in

00:05:48,659 --> 00:05:53,399
2000 elf so basically after about 11

00:05:50,789 --> 00:05:55,580
years and that was possible thanks to a

00:05:53,399 --> 00:05:58,019
heroic affords by various developers

00:05:55,580 --> 00:06:00,629
especially we have to thank an apartment

00:05:58,019 --> 00:06:02,159
for that he actually took care of the

00:06:00,629 --> 00:06:04,769
last few steps that were really really a

00:06:02,159 --> 00:06:09,509
lot of work and without much gain maybe

00:06:04,769 --> 00:06:11,789
and yeah but yeah it was quite a game

00:06:09,509 --> 00:06:13,469
but it was really hard doing this this

00:06:11,789 --> 00:06:16,979
last things because they weren't all our

00:06:13,469 --> 00:06:19,439
drivers and things like that but

00:06:16,979 --> 00:06:21,599
scalability since then actually remains

00:06:19,439 --> 00:06:23,729
something being worked on if you look at

00:06:21,599 --> 00:06:25,199
LW and that again there are many many

00:06:23,729 --> 00:06:29,819
more articles over the past few years

00:06:25,199 --> 00:06:31,559
that and were about scalability and many

00:06:29,819 --> 00:06:33,330
small improvements happened over time

00:06:31,559 --> 00:06:35,399
it's kind of a neverending story like

00:06:33,330 --> 00:06:37,110
recently there were some amendment

00:06:35,399 --> 00:06:39,569
optimizations there was a new scheduler

00:06:37,110 --> 00:06:41,879
load balancing balancing column that got

00:06:39,569 --> 00:06:44,009
merged into the Linux 5.5 kernel which

00:06:41,879 --> 00:06:45,060
is the latest right now and many other

00:06:44,009 --> 00:06:47,640
things

00:06:45,060 --> 00:06:49,740
and most people most of you that don't

00:06:47,640 --> 00:06:51,600
that are not currently well opposed

00:06:49,740 --> 00:06:53,460
don't notice any of this because all

00:06:51,600 --> 00:06:56,100
those changes happen basically under the

00:06:53,460 --> 00:06:58,560
radar but thanks to this Linux is and

00:06:56,100 --> 00:07:00,660
stays one of the best scaling OS kernels

00:06:58,560 --> 00:07:03,230
these days maybe it's even the best I

00:07:00,660 --> 00:07:07,470
was a bit careful in writing that so I

00:07:03,230 --> 00:07:10,440
went for one of the best maybe I was

00:07:07,470 --> 00:07:11,900
over overly careful there yeah that's

00:07:10,440 --> 00:07:15,000
one of the things that happened in

00:07:11,900 --> 00:07:19,650
various small steps during this past two

00:07:15,000 --> 00:07:21,510
decades and and getting rid of the car

00:07:19,650 --> 00:07:23,490
lock was really one of the big first

00:07:21,510 --> 00:07:25,890
achievements but with that small steps

00:07:23,490 --> 00:07:27,870
that happened and that was possible

00:07:25,890 --> 00:07:29,850
because and that was something everybody

00:07:27,870 --> 00:07:31,530
worked together on its kind of common

00:07:29,850 --> 00:07:33,090
goal but more often there's some

00:07:31,530 --> 00:07:36,140
competition become between the kernel

00:07:33,090 --> 00:07:38,730
developers mam and one of the thing that

00:07:36,140 --> 00:07:40,650
Linux kernel was actually still missing

00:07:38,730 --> 00:07:43,260
in the early first ten days was built in

00:07:40,650 --> 00:07:45,870
virtualization capabilities and that's

00:07:43,260 --> 00:07:49,290
not unusual because virtualization on

00:07:45,870 --> 00:07:51,540
x86 Linux was not very popular or not

00:07:49,290 --> 00:07:54,510
famous back then that it only happened

00:07:51,540 --> 00:07:56,820
during the mid 2000s with Zen some of

00:07:54,510 --> 00:07:59,850
you might remember getting popular in

00:07:56,820 --> 00:08:01,950
2005 and x86 processors actually

00:07:59,850 --> 00:08:04,580
starting I started getting

00:08:01,950 --> 00:08:07,230
virtualization capabilities back then

00:08:04,580 --> 00:08:09,300
then Bank man actually looked like the

00:08:07,230 --> 00:08:12,510
obvious and fitting solution for the

00:08:09,300 --> 00:08:14,610
Linux world there was no competition

00:08:12,510 --> 00:08:17,340
there everybody C thought that would be

00:08:14,610 --> 00:08:19,350
what we what will make that what

00:08:17,340 --> 00:08:23,250
everybody would be using there was just

00:08:19,350 --> 00:08:25,200
one problem support for for Runnings for

00:08:23,250 --> 00:08:27,540
using sin as a host or guests with Linux

00:08:25,200 --> 00:08:29,280
was out of three but a lot of people

00:08:27,540 --> 00:08:31,560
didn't care that much and the other

00:08:29,280 --> 00:08:34,350
problem was Zen was actually kind of a

00:08:31,560 --> 00:08:37,260
kernel underneath the Linux kernel then

00:08:34,350 --> 00:08:40,770
suddenly out of the blue in October 2006

00:08:37,260 --> 00:08:42,810
KVM came much already xavier lead later

00:08:40,770 --> 00:08:45,330
into the Linux kernel because it was

00:08:42,810 --> 00:08:47,280
quite small it was quite small and being

00:08:45,330 --> 00:08:50,400
compared with Xen actually didn't offer

00:08:47,280 --> 00:08:51,570
that go to a kind of a feature set the

00:08:50,400 --> 00:08:53,760
performance was worse

00:08:51,570 --> 00:08:55,560
it had less features and actually

00:08:53,760 --> 00:08:58,170
required the CPU of virtualization

00:08:55,560 --> 00:08:58,510
capabilities some sometimes it looked a

00:08:58,170 --> 00:09:02,080
bit

00:08:58,510 --> 00:09:04,540
katoya but in the end it turned out it

00:09:02,080 --> 00:09:06,190
was quickly improved because various

00:09:04,540 --> 00:09:08,380
people and companies found interest in

00:09:06,190 --> 00:09:10,960
it and helped with little steps making

00:09:08,380 --> 00:09:12,420
KVM bet better and as some of you might

00:09:10,960 --> 00:09:14,650
know in the end

00:09:12,420 --> 00:09:16,690
KVM turn out to be game game chaser

00:09:14,650 --> 00:09:19,120
today it's basically used everywhere

00:09:16,690 --> 00:09:21,250
these days and actually one of the

00:09:19,120 --> 00:09:23,620
cornerstones for what it made Linux

00:09:21,250 --> 00:09:26,440
through the cloud Xen is still around

00:09:23,620 --> 00:09:28,300
and the support for running as hosts and

00:09:26,440 --> 00:09:31,120
guests with Linux actually got only

00:09:28,300 --> 00:09:35,350
merged five years later in the 2.0 days

00:09:31,120 --> 00:09:38,230
and these days then it's quite small

00:09:35,350 --> 00:09:41,080
when compared to KVM so why did KVM

00:09:38,230 --> 00:09:42,520
succeed yeah one of the reasons that

00:09:41,080 --> 00:09:45,700
might be a factor might be that

00:09:42,520 --> 00:09:47,950
xanthosis didn't get the code upstream

00:09:45,700 --> 00:09:50,710
fast enough but i think the real reason

00:09:47,950 --> 00:09:52,450
this KVM had better more flexible and

00:09:50,710 --> 00:09:54,970
future-proof design and actually one

00:09:52,450 --> 00:09:56,710
that allowed linux to stay in control

00:09:54,970 --> 00:09:59,110
because it was built into Linux not

00:09:56,710 --> 00:10:02,470
underneath it and that's obviously

00:09:59,110 --> 00:10:04,780
suited Linux more and its developers so

00:10:02,470 --> 00:10:08,290
they become became interested in helped

00:10:04,780 --> 00:10:11,590
making it better and yeah that's how it

00:10:08,290 --> 00:10:14,350
ended and yeah that's why KVM ruled the

00:10:11,590 --> 00:10:16,660
world these days and yeah that's most

00:10:14,350 --> 00:10:18,490
kind of history lessons history lesson

00:10:16,660 --> 00:10:21,040
but on the other hand that's things like

00:10:18,490 --> 00:10:23,800
that happen everyday every now and then

00:10:21,040 --> 00:10:26,320
these days also for example recently

00:10:23,800 --> 00:10:29,230
there was a DB decay that's a technique

00:10:26,320 --> 00:10:31,720
to make network packages go straight

00:10:29,230 --> 00:10:34,150
into userland app applications and

00:10:31,720 --> 00:10:35,770
bypass the Linux kernel that obviously

00:10:34,150 --> 00:10:38,350
didn't suit the Linux kernel develop as

00:10:35,770 --> 00:10:40,090
much so they started to fight back and

00:10:38,350 --> 00:10:43,210
worked on solution

00:10:40,090 --> 00:10:45,850
they expressed data paths and XDP and

00:10:43,210 --> 00:10:48,520
something build upon that's called f x

00:10:45,850 --> 00:10:51,070
DP socket where user line programs can

00:10:48,520 --> 00:10:54,070
can immediately get those packages so

00:10:51,070 --> 00:10:56,620
the kernel stays in control and it seems

00:10:54,070 --> 00:10:58,990
those two solutions actually can keep up

00:10:56,620 --> 00:11:02,200
of TBT Kalyan these days so it's likely

00:10:58,990 --> 00:11:04,800
I'd say if I would bet I bet on these

00:11:02,200 --> 00:11:08,950
two solutions and I think they will gain

00:11:04,800 --> 00:11:10,300
territory back from DB TK because it's

00:11:08,950 --> 00:11:12,279
better integrated in Linux

00:11:10,300 --> 00:11:16,029
another example is

00:11:12,279 --> 00:11:18,819
I own so the program can do something

00:11:16,029 --> 00:11:20,620
else when it reads all rights makes it

00:11:18,819 --> 00:11:22,569
cannot read or write data from some

00:11:20,620 --> 00:11:24,310
storage device that's normal in the

00:11:22,569 --> 00:11:26,680
windows world and but unusual in the

00:11:24,310 --> 00:11:29,620
Linux except for maybe great big

00:11:26,680 --> 00:11:31,389
databases but these days something a

00:11:29,620 --> 00:11:34,389
solution finally shows up that's called

00:11:31,389 --> 00:11:37,180
IO Ewing it was imagined recounted a bit

00:11:34,389 --> 00:11:38,889
more than one year ago and it's an

00:11:37,180 --> 00:11:42,490
answer to a similar bypass technique

00:11:38,889 --> 00:11:44,110
that's called SP DK and yeah and it

00:11:42,490 --> 00:11:45,790
actually will help getting the

00:11:44,110 --> 00:11:48,040
performance out of these new SSDs

00:11:45,790 --> 00:11:51,970
because they are really quite quite fast

00:11:48,040 --> 00:11:55,360
and to make make the get performance out

00:11:51,970 --> 00:11:56,980
of is such an asynchronous IO a solution

00:11:55,360 --> 00:11:59,709
is needed because the SIS call overhead

00:11:56,980 --> 00:12:02,129
is way too much otherwise and the thing

00:11:59,709 --> 00:12:04,089
is just as KVM both these solutions got

00:12:02,129 --> 00:12:06,639
imported into the linux kernel and

00:12:04,089 --> 00:12:08,319
started quite small and then got

00:12:06,639 --> 00:12:09,699
improved in small steps by various

00:12:08,319 --> 00:12:12,129
people that found them interesting and

00:12:09,699 --> 00:12:14,370
it shows it that things like they had

00:12:12,129 --> 00:12:16,500
them all the time

00:12:14,370 --> 00:12:19,300
virtualization was not the only thing

00:12:16,500 --> 00:12:21,240
the only solution to make Linux a host

00:12:19,300 --> 00:12:24,939
for something there was something else

00:12:21,240 --> 00:12:27,189
that Linux miss doing early fosston days

00:12:24,939 --> 00:12:29,470
there was support for containers and

00:12:27,189 --> 00:12:30,970
that's actually quite interesting

00:12:29,470 --> 00:12:33,129
because other UNIX is back then

00:12:30,970 --> 00:12:35,949
supported them already freebsd for

00:12:33,129 --> 00:12:38,319
example date and Solaris learned it a

00:12:35,949 --> 00:12:41,589
little bit later for Linux that only

00:12:38,319 --> 00:12:44,079
became famous in 2014 and a lot of

00:12:41,589 --> 00:12:47,079
people sometimes wonder why did it take

00:12:44,079 --> 00:12:49,540
so long yeah it took so long basically

00:12:47,079 --> 00:12:51,720
because they can't collect features to

00:12:49,540 --> 00:12:54,519
build something similar with Linux and

00:12:51,720 --> 00:12:56,920
yeah that's those features had to be

00:12:54,519 --> 00:12:59,410
built but that happened one step at a

00:12:56,920 --> 00:13:01,870
time it took years some of these

00:12:59,410 --> 00:13:05,649
features actually we use today for

00:13:01,870 --> 00:13:07,449
containers were actually built for fork

00:13:05,649 --> 00:13:10,629
and containers and docker that like the

00:13:07,449 --> 00:13:13,149
various namespaces and some of those

00:13:10,629 --> 00:13:17,679
features we use for containers actually

00:13:13,149 --> 00:13:19,480
not directly when partly built for

00:13:17,679 --> 00:13:20,949
 antenna used like the C group

00:13:19,480 --> 00:13:24,429
stuff the control group stuff that make

00:13:20,949 --> 00:13:25,260
sure one process can take all the CPU or

00:13:24,429 --> 00:13:27,810
memory and

00:13:25,260 --> 00:13:29,460
other staff and that in the beginning

00:13:27,810 --> 00:13:31,890
actually was used a lot of lot with

00:13:29,460 --> 00:13:33,510
virtualization with KVM and some of the

00:13:31,890 --> 00:13:35,220
features we use to build containers

00:13:33,510 --> 00:13:36,780
these days actually were built for

00:13:35,220 --> 00:13:38,730
totally different use cases like

00:13:36,780 --> 00:13:41,490
capabilities and seccomp and a few other

00:13:38,730 --> 00:13:44,100
things and the thing that made dhaka

00:13:41,490 --> 00:13:46,020
popular in the end was actually docker

00:13:44,100 --> 00:13:48,390
combine these and a few other features

00:13:46,020 --> 00:13:50,520
in a new and more attractive way and

00:13:48,390 --> 00:13:53,310
that made Linux container suddenly

00:13:50,520 --> 00:13:54,800
suddenly quite popular and in the end

00:13:53,310 --> 00:13:58,950
kind of changed the world

00:13:54,800 --> 00:14:00,870
funny detailed an Alex II was designed

00:13:58,950 --> 00:14:03,450
to become the preferred solution and

00:14:00,870 --> 00:14:05,070
that's a bit older and there were

00:14:03,450 --> 00:14:07,020
actually two other Linux container

00:14:05,070 --> 00:14:09,780
solution which which also an open

00:14:07,020 --> 00:14:11,280
possess and that became quite small

00:14:09,780 --> 00:14:13,380
thanks to all the other things stock

00:14:11,280 --> 00:14:15,180
abroad and Linux V service the other

00:14:13,380 --> 00:14:16,830
solution that is basically forgotten

00:14:15,180 --> 00:14:19,830
these days they came early and used out

00:14:16,830 --> 00:14:21,450
of three packages but thanks to the

00:14:19,830 --> 00:14:23,310
kernel and small steps and these

00:14:21,450 --> 00:14:24,650
features you can you combine in

00:14:23,310 --> 00:14:29,670
interesting ways

00:14:24,650 --> 00:14:32,640
they docker overrun them basically and

00:14:29,670 --> 00:14:35,130
just now the leading thing Alex II

00:14:32,640 --> 00:14:38,190
actually actually is still around and

00:14:35,130 --> 00:14:41,190
definitely not as big as darker and the

00:14:38,190 --> 00:14:42,930
funny detail there is just imagine if it

00:14:41,190 --> 00:14:45,660
would have been one company that it

00:14:42,930 --> 00:14:49,530
would have invested all the money in

00:14:45,660 --> 00:14:51,210
bring making the corner and capable of

00:14:49,530 --> 00:14:54,030
to running containers and building and

00:14:51,210 --> 00:14:56,130
Alex T as usual and processor on top of

00:14:54,030 --> 00:14:58,200
it and that actually might have been a

00:14:56,130 --> 00:15:00,300
pretty bad return of investment for them

00:14:58,200 --> 00:15:03,260
because yeah other companies can use

00:15:00,300 --> 00:15:05,820
those features your board as well yeah

00:15:03,260 --> 00:15:07,920
and that that really makes it a little

00:15:05,820 --> 00:15:10,740
bit risky for companies to invest that

00:15:07,920 --> 00:15:12,630
much money but on the other end that's a

00:15:10,740 --> 00:15:14,550
problem for the kernel Linux the

00:15:12,630 --> 00:15:16,410
operating system actually got a way

00:15:14,550 --> 00:15:18,870
better and more flexible solution thanks

00:15:16,410 --> 00:15:24,540
to this and thanks to all the various

00:15:18,870 --> 00:15:26,070
small steps that were taken and other

00:15:24,540 --> 00:15:28,290
reason why we have so many small

00:15:26,070 --> 00:15:32,070
features that docker could combine in a

00:15:28,290 --> 00:15:34,560
new and more attractive way docker

00:15:32,070 --> 00:15:37,320
already was quite unexpected but welcome

00:15:34,560 --> 00:15:38,940
surprise and that's not the only time

00:15:37,320 --> 00:15:41,850
Linux kernel stuff and

00:15:38,940 --> 00:15:45,360
kind of features show up that's nobody

00:15:41,850 --> 00:15:48,360
really aimed for and one of those things

00:15:45,360 --> 00:15:51,360
actually is changing the kernel these

00:15:48,360 --> 00:15:53,730
days and Linux basically is on a trip

00:15:51,360 --> 00:15:56,460
into the unknown right now what I'm

00:15:53,730 --> 00:15:58,650
talking about is an improved berkeley

00:15:56,460 --> 00:16:01,620
package filter it's called be BPF for

00:15:58,650 --> 00:16:06,420
short or these days CBPR for classic DVF

00:16:01,620 --> 00:16:10,020
and the improvements again in 2014-15

00:16:06,420 --> 00:16:12,060
and it's an internal mini VM mini

00:16:10,020 --> 00:16:13,950
virtual machine but not a like a virtual

00:16:12,060 --> 00:16:16,410
machine that emulates a different

00:16:13,950 --> 00:16:20,040
computer more lucky Java VM where you

00:16:16,410 --> 00:16:22,740
can upload in programs to and then they

00:16:20,040 --> 00:16:26,820
can execute execute them that's

00:16:22,740 --> 00:16:29,190
something for 20 years ago TCP dump for

00:16:26,820 --> 00:16:31,740
example relied on to only get those

00:16:29,190 --> 00:16:32,340
packages from the kernel into into

00:16:31,740 --> 00:16:34,950
userland

00:16:32,340 --> 00:16:37,110
image to see TCP dump the user was

00:16:34,950 --> 00:16:40,290
actually interested in that's needed

00:16:37,110 --> 00:16:42,360
because I needed to for performance

00:16:40,290 --> 00:16:44,460
reason because copying everything over

00:16:42,360 --> 00:16:47,040
simply is so much work it was slow

00:16:44,460 --> 00:16:49,470
everything way too much down this

00:16:47,040 --> 00:16:51,510
improved CBP have actually got core get

00:16:49,470 --> 00:16:54,480
got called EBP F you might have heard of

00:16:51,510 --> 00:16:57,120
this thing some people even call it just

00:16:54,480 --> 00:16:58,530
BBF for short these days it's I'm kind

00:16:57,120 --> 00:17:00,840
of angry with the developers there

00:16:58,530 --> 00:17:02,970
because now we have an old PPF that's

00:17:00,840 --> 00:17:06,620
called PPF a new BPF and nobody knows

00:17:02,970 --> 00:17:10,020
what what somebody's talking about yeah

00:17:06,620 --> 00:17:12,060
that's really sometimes annoying but

00:17:10,020 --> 00:17:13,949
most of the time if you read B PPF these

00:17:12,060 --> 00:17:16,829
days it's actually the enhanced one

00:17:13,949 --> 00:17:20,449
that's meant yeah it became really fast

00:17:16,829 --> 00:17:22,680
and much more powerful VM to run

00:17:20,449 --> 00:17:25,439
programs in kernel mode that's actually

00:17:22,680 --> 00:17:29,160
if you had suggested something like that

00:17:25,439 --> 00:17:30,990
tool in a stall was 20 years ago I guess

00:17:29,160 --> 00:17:33,450
the idea would immediately have been

00:17:30,990 --> 00:17:35,790
shut down because it's kind of crazy but

00:17:33,450 --> 00:17:37,170
these days it worked and one of the

00:17:35,790 --> 00:17:39,470
reasons why it's work is actually it's

00:17:37,170 --> 00:17:43,770
got improved a small thing and then

00:17:39,470 --> 00:17:45,390
improved and approved again and that way

00:17:43,770 --> 00:17:47,400
everybody could be sure that's not

00:17:45,390 --> 00:17:49,740
dangerous or something the network

00:17:47,400 --> 00:17:52,330
developers actually blew this EBP F to

00:17:49,740 --> 00:17:54,820
scratch some interest they had and

00:17:52,330 --> 00:17:57,070
improved it and improved it again this

00:17:54,820 --> 00:17:58,710
XTP stuff I mentioned earlier has

00:17:57,070 --> 00:18:01,720
actually built upon this and really

00:17:58,710 --> 00:18:03,700
relies on it but these days other kernel

00:18:01,720 --> 00:18:08,380
subsystem started to use it as well or

00:18:03,700 --> 00:18:09,040
will soon and more seemed seem to be

00:18:08,380 --> 00:18:11,770
interesting

00:18:09,040 --> 00:18:15,070
actually on lwn net its became kind of a

00:18:11,770 --> 00:18:17,200
running get cake that some doing the

00:18:15,070 --> 00:18:20,380
articles there's often the case where

00:18:17,200 --> 00:18:23,620
some some solution assault for complex

00:18:20,380 --> 00:18:26,620
complicated problem and then often PB PF

00:18:23,620 --> 00:18:28,450
is suggested to use it it won't be used

00:18:26,620 --> 00:18:31,030
all the time but it seems it's getting

00:18:28,450 --> 00:18:34,810
into the kernel at various various areas

00:18:31,030 --> 00:18:37,510
and yeah EBP F is still not done I mean

00:18:34,810 --> 00:18:40,210
it's got developed over the past few

00:18:37,510 --> 00:18:42,400
year but it's improved more and more and

00:18:40,210 --> 00:18:45,220
starts to change the kernel fundament

00:18:42,400 --> 00:18:47,260
for fundamentally and makes Linux

00:18:45,220 --> 00:18:50,320
actually gets more specs of a

00:18:47,260 --> 00:18:52,600
microkernel just thing what some of you

00:18:50,320 --> 00:18:54,850
might remember this big debate if

00:18:52,600 --> 00:18:59,590
Michael Connors is a better design then

00:18:54,850 --> 00:19:01,270
this stuff that the model that Linux

00:18:59,590 --> 00:19:04,240
currently use which is more like a

00:19:01,270 --> 00:19:06,150
monolithic kernel but as I said Linux

00:19:04,240 --> 00:19:08,560
gains more aspects of a microkernel and

00:19:06,150 --> 00:19:10,810
that's actually what Europe's biggest

00:19:08,560 --> 00:19:13,540
computer magazine wrote the German City

00:19:10,810 --> 00:19:16,720
magazine it looks like that and if some

00:19:13,540 --> 00:19:19,090
of you now see you see pump people

00:19:16,720 --> 00:19:24,700
giggle next to you to you that's because

00:19:19,090 --> 00:19:26,320
yeah that's what I wrote that yeah maybe

00:19:24,700 --> 00:19:28,000
I should try that on Wikipedia write

00:19:26,320 --> 00:19:31,240
something somewhere and then change and

00:19:28,000 --> 00:19:33,460
give myself a sauce yeah but I'm not

00:19:31,240 --> 00:19:35,560
only a popular food for the scanner

00:19:33,460 --> 00:19:38,590
reporting I do that for 15 years now

00:19:35,560 --> 00:19:40,750
I'm also did a few things in my spare

00:19:38,590 --> 00:19:42,190
time for regression taking and I was

00:19:40,750 --> 00:19:45,390
actually invited for the current summit

00:19:42,190 --> 00:19:47,650
and so I know what I'm talking about and

00:19:45,390 --> 00:19:50,290
I'm not the only one that actually wrote

00:19:47,650 --> 00:19:53,050
this microkernel comparison and I will

00:19:50,290 --> 00:19:56,350
be lwn net actually mentioned it as well

00:19:53,050 --> 00:20:01,210
and there's another one another running

00:19:56,350 --> 00:20:02,830
joke yeah you laugh but this one of the

00:20:01,210 --> 00:20:04,390
core developers that made a lot of

00:20:02,830 --> 00:20:09,190
things happening you we

00:20:04,390 --> 00:20:11,590
use every day suno its we laughed these

00:20:09,190 --> 00:20:13,750
days but maybe it will happen it will

00:20:11,590 --> 00:20:17,230
maybe we stand here in ten years and say

00:20:13,750 --> 00:20:19,180
here that's how it all began and there's

00:20:17,230 --> 00:20:21,790
also another improvement that's coming

00:20:19,180 --> 00:20:23,530
where the microcon aspect is mentioned

00:20:21,790 --> 00:20:25,510
that's really fascinating to what

00:20:23,530 --> 00:20:28,060
remains to be seen what comes out of it

00:20:25,510 --> 00:20:29,380
maybe it's a we're at the beginning

00:20:28,060 --> 00:20:32,850
already in the middle of a small

00:20:29,380 --> 00:20:35,590
revolution that makes Linux more

00:20:32,850 --> 00:20:36,720
resistant flexible and more powerful it

00:20:35,590 --> 00:20:39,190
remains to be seen

00:20:36,720 --> 00:20:40,750
thing is most people actually don't

00:20:39,190 --> 00:20:42,520
notice because it's happening in a lot

00:20:40,750 --> 00:20:46,320
of small steps and without disrupting

00:20:42,520 --> 00:20:48,790
all features so and that can can can be

00:20:46,320 --> 00:20:52,600
though you don't have to care if you're

00:20:48,790 --> 00:20:55,630
not interested in then yeah longstanding

00:20:52,600 --> 00:20:58,060
wishes that's a different topic another

00:20:55,630 --> 00:21:01,090
area where Linux actually was behind on

00:20:58,060 --> 00:21:02,980
the in the early Fossum days was a

00:21:01,090 --> 00:21:05,680
proper tracing solution to look into the

00:21:02,980 --> 00:21:08,350
system or a specific program to look why

00:21:05,680 --> 00:21:10,780
the system is slow or why the program is

00:21:08,350 --> 00:21:13,060
slow and the famous solution in this

00:21:10,780 --> 00:21:15,490
area is actually dtrace and actually

00:21:13,060 --> 00:21:18,340
published in 2005 and pillages solaris

00:21:15,490 --> 00:21:20,440
and people for four years wanted

00:21:18,340 --> 00:21:23,620
something similar with linux and they

00:21:20,440 --> 00:21:26,290
got something recently that's called BB

00:21:23,620 --> 00:21:28,840
PF compiler collection BCC for short and

00:21:26,290 --> 00:21:31,780
BB PF trace and those are actually

00:21:28,840 --> 00:21:34,060
called dtrace 2.0 these days by Brandon

00:21:31,780 --> 00:21:37,000
Greg which is one of the leading experts

00:21:34,060 --> 00:21:37,930
on on DTrace at least according to

00:21:37,000 --> 00:21:42,130
Wikipedia

00:21:37,930 --> 00:21:44,080
I know I didn't write that there yeah

00:21:42,130 --> 00:21:49,480
and actually those two new solutions can

00:21:44,080 --> 00:21:52,720
the 2.0 is appropriate because P we have

00:21:49,480 --> 00:21:57,130
trace and BCC actually can do more than

00:21:52,720 --> 00:21:59,500
the old PC see more than D trace it's

00:21:57,130 --> 00:22:01,780
pretty cool if you want to know more

00:21:59,500 --> 00:22:03,580
about it look at Brandon's website I

00:22:01,780 --> 00:22:05,980
mentioned it here and he also published

00:22:03,580 --> 00:22:10,390
a book recently it's quite cool and

00:22:05,980 --> 00:22:12,610
gives a lot of details and into what you

00:22:10,390 --> 00:22:15,040
can do with modern kernels and and and

00:22:12,610 --> 00:22:17,400
tracing now and yeah it took basically

00:22:15,040 --> 00:22:21,180
like ten or fifteen years to get

00:22:17,400 --> 00:22:23,490
everything into the kernel and the funny

00:22:21,180 --> 00:22:25,530
thing is that actually happened without

00:22:23,490 --> 00:22:28,680
a design that had something like PCC or

00:22:25,530 --> 00:22:31,110
BF traits in mind they thinks they match

00:22:28,680 --> 00:22:32,490
thanks to evolution because the kernel

00:22:31,110 --> 00:22:34,980
developers actually built various

00:22:32,490 --> 00:22:36,810
building blocks over the past 10 or 15

00:22:34,980 --> 00:22:39,720
years sometimes with smaller or

00:22:36,810 --> 00:22:42,120
different goals you have tools like f

00:22:39,720 --> 00:22:46,080
trace trace points / k probes and all

00:22:42,120 --> 00:22:48,180
those things and then that those were

00:22:46,080 --> 00:22:52,410
one part of the solution the other part

00:22:48,180 --> 00:22:55,620
is e BPF they are this again antia then

00:22:52,410 --> 00:22:57,810
somebody combined those tool and and

00:22:55,620 --> 00:23:00,240
made new things possible and then

00:22:57,810 --> 00:23:01,770
actually BCC and PPF trace came out by

00:23:00,240 --> 00:23:04,560
some people and tada

00:23:01,770 --> 00:23:08,070
yeah that's how we have D trace to the

00:23:04,560 --> 00:23:10,560
zeros these days really great how things

00:23:08,070 --> 00:23:11,850
work out and without a design like you

00:23:10,560 --> 00:23:15,000
would have normally when you're building

00:23:11,850 --> 00:23:18,300
an operating system yes

00:23:15,000 --> 00:23:21,060
something impossible Linux will soon

00:23:18,300 --> 00:23:24,270
offer an really great and important new

00:23:21,060 --> 00:23:25,770
feature one almost and one almost nobody

00:23:24,270 --> 00:23:28,020
would have expect during the early

00:23:25,770 --> 00:23:30,990
fosston days it will be real-time

00:23:28,020 --> 00:23:35,520
capable so it will be able to use Linux

00:23:30,990 --> 00:23:38,690
for your laser cutter or for your Roboto

00:23:35,520 --> 00:23:42,390
and your industry line that manufactures

00:23:38,690 --> 00:23:44,040
cars or whatever because it can make

00:23:42,390 --> 00:23:47,120
sure that that program that's

00:23:44,040 --> 00:23:50,250
controlling you laser cutters is always

00:23:47,120 --> 00:23:53,400
called in time to react to certain

00:23:50,250 --> 00:23:56,660
events and that's really important for

00:23:53,400 --> 00:23:58,890
this use case and yeah

00:23:56,660 --> 00:24:00,420
thank you for telling me all if only for

00:23:58,890 --> 00:24:02,700
some days that was actually nothing

00:24:00,420 --> 00:24:04,470
people talked about yet but it was an

00:24:02,700 --> 00:24:07,500
idea actually in some people's mind

00:24:04,470 --> 00:24:09,210
mine's already especially in the mind of

00:24:07,500 --> 00:24:11,280
Thomas clocks now who's one of the

00:24:09,210 --> 00:24:16,230
leading or the leading developer for the

00:24:11,280 --> 00:24:18,960
real-time kernel patches and he actually

00:24:16,230 --> 00:24:20,610
recently last fall on the Linux pompous

00:24:18,960 --> 00:24:23,820
conference gave a great talk about this

00:24:20,610 --> 00:24:25,560
and ul is here I also you don't have to

00:24:23,820 --> 00:24:28,050
write this down I will upload the slides

00:24:25,560 --> 00:24:30,600
to the website I try to do that before

00:24:28,050 --> 00:24:32,850
right before the talk but the

00:24:30,600 --> 00:24:35,400
network was overloaded so you have to

00:24:32,850 --> 00:24:36,660
wait for that sorry but it's a great

00:24:35,400 --> 00:24:39,299
talk where he's looking back and

00:24:36,660 --> 00:24:42,990
mentions a few nightmares all the RT

00:24:39,299 --> 00:24:45,360
development gave him and one part of the

00:24:42,990 --> 00:24:50,460
talks actually he mentioned a few quotes

00:24:45,360 --> 00:24:52,559
like real time people are crazy and not

00:24:50,460 --> 00:24:54,090
going ever to get merged into little

00:24:52,559 --> 00:24:57,419
dynix kernel and things like that and

00:24:54,090 --> 00:25:00,330
for I know I spoiled a talk a little bit

00:24:57,419 --> 00:25:03,539
yeah but these quotes actually are all

00:25:00,330 --> 00:25:07,010
from Linda Stahl was himself that was

00:25:03,539 --> 00:25:10,559
most of them were from 2005 from a great

00:25:07,010 --> 00:25:13,380
2004 a great great debate of if we're

00:25:10,559 --> 00:25:15,809
making real-time Linux wheels I'm

00:25:13,380 --> 00:25:18,809
capable actually it's a good idea yeah

00:25:15,809 --> 00:25:22,830
but the developers actually didn't give

00:25:18,809 --> 00:25:24,780
up and they basically started working on

00:25:22,830 --> 00:25:27,720
it having this external patch set and

00:25:24,780 --> 00:25:30,900
got small steps in a small patches and

00:25:27,720 --> 00:25:32,730
small into the mainline kernel and yeah

00:25:30,900 --> 00:25:34,620
that actually made Linux better for all

00:25:32,730 --> 00:25:37,890
of us even if we don't use real-time

00:25:34,620 --> 00:25:40,650
systems or we don't need them and the

00:25:37,890 --> 00:25:42,960
real-time patches hit quite a lot of

00:25:40,650 --> 00:25:46,470
problems and skill scalability issues

00:25:42,960 --> 00:25:47,909
first and that in they fix them and that

00:25:46,470 --> 00:25:51,539
in the end made Linux better for all of

00:25:47,909 --> 00:25:53,070
us and yeah the thing is Artie

00:25:51,539 --> 00:25:56,039
developers actually had a lot of body

00:25:53,070 --> 00:25:58,590
blows and one of the worst was basically

00:25:56,039 --> 00:26:00,590
like five or six years ago they had

00:25:58,590 --> 00:26:04,169
basically like ninety to ninety percent

00:26:00,590 --> 00:26:06,659
of the route done what that were needed

00:26:04,169 --> 00:26:09,380
to get make make Linux real-time capable

00:26:06,659 --> 00:26:14,370
but they needed basically needed money

00:26:09,380 --> 00:26:17,250
for the last few last mile for the last

00:26:14,370 --> 00:26:19,470
five years as it turned out yeah and the

00:26:17,250 --> 00:26:22,740
thing is that was needed because lots of

00:26:19,470 --> 00:26:25,140
company communities that used the apt RT

00:26:22,740 --> 00:26:27,900
paid respect then actually didn't help

00:26:25,140 --> 00:26:30,360
much of development and but lucky

00:26:27,900 --> 00:26:33,929
luckily and the Artie people were

00:26:30,360 --> 00:26:36,419
successful they came to the Linux

00:26:33,929 --> 00:26:38,309
Foundation and talked to them and they

00:26:36,419 --> 00:26:41,700
actually founded a project with a few

00:26:38,309 --> 00:26:43,530
companies in 2015 and yes thanks to this

00:26:41,700 --> 00:26:44,340
project the main trip will soon be

00:26:43,530 --> 00:26:46,520
finished

00:26:44,340 --> 00:26:49,080
because the real-time capabilities are

00:26:46,520 --> 00:26:51,270
the biggest the most important patch

00:26:49,080 --> 00:26:53,460
actually is in the Linux kernel already

00:26:51,270 --> 00:26:55,680
the config option to enable the

00:26:53,460 --> 00:26:57,540
real-time support it's not exposed yet

00:26:55,680 --> 00:26:59,400
because there are few things missing the

00:26:57,540 --> 00:27:01,440
biggest thing is actually a rework for

00:26:59,400 --> 00:27:03,540
the print case stuff that's actually

00:27:01,440 --> 00:27:06,000
which what's doing your logging which

00:27:03,540 --> 00:27:08,130
you can see with D message and that but

00:27:06,000 --> 00:27:10,020
that's in the work and there was some

00:27:08,130 --> 00:27:13,470
disagreements but they were settled

00:27:10,020 --> 00:27:15,210
really recently and the patch was the

00:27:13,470 --> 00:27:17,340
new patch to make everything happen was

00:27:15,210 --> 00:27:20,520
sent to the Linux kernel mailing list

00:27:17,340 --> 00:27:23,640
the full review recently so it's likely

00:27:20,520 --> 00:27:25,800
this will get into the the kernel this

00:27:23,640 --> 00:27:28,710
yes and then make Linux real-time

00:27:25,800 --> 00:27:30,660
capable describing all the steps the

00:27:28,710 --> 00:27:33,570
real-time developers had to take was

00:27:30,660 --> 00:27:36,810
what take also a day or two maybe or

00:27:33,570 --> 00:27:38,970
because if you go to LW and not and

00:27:36,810 --> 00:27:42,300
actually look what what problems were

00:27:38,970 --> 00:27:45,570
discussed over those years you you have

00:27:42,300 --> 00:27:47,730
many articles you can read man but it

00:27:45,570 --> 00:27:50,400
shows even crazy goals let look

00:27:47,730 --> 00:27:53,100
unreachable it can be achieved in small

00:27:50,400 --> 00:27:54,840
steps and yeah the thing is that

00:27:53,100 --> 00:27:58,680
actually how most of the Linux kernel

00:27:54,840 --> 00:28:03,450
features evolve as they are not designed

00:27:58,680 --> 00:28:04,320
by some some company or some some in a

00:28:03,450 --> 00:28:06,690
meeting or something

00:28:04,320 --> 00:28:09,210
often it are simply individuals that

00:28:06,690 --> 00:28:12,270
want to realize an idea or a dream and

00:28:09,210 --> 00:28:14,550
make Linux do something and sometimes

00:28:12,270 --> 00:28:17,100
they even abused companies to realize

00:28:14,550 --> 00:28:18,780
their ideas that happens they simply

00:28:17,100 --> 00:28:21,900
look for companies that might be willing

00:28:18,780 --> 00:28:23,790
to pay them and and some of the

00:28:21,900 --> 00:28:27,180
developers sometimes have to find other

00:28:23,790 --> 00:28:29,250
places to to find money but it shows

00:28:27,180 --> 00:28:32,430
really with a good idea and commitment

00:28:29,250 --> 00:28:35,960
and even big and crazy deems dreams can

00:28:32,430 --> 00:28:37,950
be realized in real time

00:28:35,960 --> 00:28:41,190
Petra's actually are a really good

00:28:37,950 --> 00:28:43,740
example for that yeah I mentioned a few

00:28:41,190 --> 00:28:45,390
times that Linux is working the Linux

00:28:43,740 --> 00:28:47,390
kernel is working differently a little

00:28:45,390 --> 00:28:49,710
bit and

00:28:47,390 --> 00:28:51,720
nevertheless it learned a lot of things

00:28:49,710 --> 00:28:54,650
since you're the first 10 days but it

00:28:51,720 --> 00:28:57,420
took them quite quite long to make make

00:28:54,650 --> 00:28:58,299
to get those features realized but

00:28:57,420 --> 00:28:59,859
that's just

00:28:58,299 --> 00:29:02,129
how the Linux word is because you can't

00:28:59,859 --> 00:29:04,929
simply can't just hire 50 developers

00:29:02,129 --> 00:29:06,909
make them work for two or three years to

00:29:04,929 --> 00:29:10,119
build especially this specific feature

00:29:06,909 --> 00:29:13,599
like son for example could do of zones D

00:29:10,119 --> 00:29:15,849
trees or a set of s because if you do

00:29:13,599 --> 00:29:17,139
that there's a really the risk after two

00:29:15,849 --> 00:29:20,409
or three years you get to the kernel

00:29:17,139 --> 00:29:22,479
developers and they say no we don't want

00:29:20,409 --> 00:29:25,779
that that's way too big and you're doing

00:29:22,479 --> 00:29:27,969
this and this wall or wrong and because

00:29:25,779 --> 00:29:31,389
they want to see these small step

00:29:27,969 --> 00:29:34,179
interim incremental steps because that

00:29:31,389 --> 00:29:37,419
work quite wait for the Linux column and

00:29:34,179 --> 00:29:39,299
that actually means more work for for

00:29:37,419 --> 00:29:42,789
the companies if you want to realize

00:29:39,299 --> 00:29:45,190
something yeah it's after develop kernel

00:29:42,789 --> 00:29:47,079
developers really well often lead to the

00:29:45,190 --> 00:29:50,019
best solution on the market but it has

00:29:47,079 --> 00:29:53,889
disadvantages too so and now I'm going

00:29:50,019 --> 00:29:56,849
to check who's awake who's hands up and

00:29:53,889 --> 00:30:00,940
leave it open leave it up if you awake

00:29:56,849 --> 00:30:04,389
yeah yeah so leave it leave it leave it

00:30:00,940 --> 00:30:06,219
up if you agree with standing here it's

00:30:04,389 --> 00:30:11,099
set of s actually the most sophisticated

00:30:06,219 --> 00:30:15,029
file system in the UNIX world yeah yeah

00:30:11,099 --> 00:30:19,509
quite quite a few hands went down but

00:30:15,029 --> 00:30:22,059
about what really fifty percent but but

00:30:19,509 --> 00:30:26,109
close with some people think it is

00:30:22,059 --> 00:30:27,659
yeah but as NFS and the Linux file

00:30:26,109 --> 00:30:30,429
systems actually one of those areas

00:30:27,659 --> 00:30:33,149
where a lot of people say Linux is still

00:30:30,429 --> 00:30:36,429
not not the best

00:30:33,149 --> 00:30:39,219
kernel for that because services is

00:30:36,429 --> 00:30:42,339
better and the funny thing is there will

00:30:39,219 --> 00:30:45,099
work on a set of s4 Lee knows actually

00:30:42,339 --> 00:30:46,690
actually was started in 2008 it's called

00:30:45,099 --> 00:30:49,149
butter fest I guess most of you have

00:30:46,690 --> 00:30:51,700
heard about this but as most of you will

00:30:49,149 --> 00:30:54,789
likely know it doesn't have hasn't

00:30:51,700 --> 00:30:56,739
reached that goal and yet and it doesn't

00:30:54,789 --> 00:30:59,649
look like it will be anytime soon

00:30:56,739 --> 00:31:01,209
if you go to Wikipedia we actually see a

00:30:59,649 --> 00:31:04,479
few features that are called unstable

00:31:01,209 --> 00:31:06,460
unstable on and if use features that

00:31:04,479 --> 00:31:08,289
were announced or that set of has

00:31:06,460 --> 00:31:10,960
already had that are not even

00:31:08,289 --> 00:31:11,950
implemented yet and also the big

00:31:10,960 --> 00:31:15,220
question is what

00:31:11,950 --> 00:31:19,240
took them so long yeah one thing for

00:31:15,220 --> 00:31:23,350
sure it was over hot and just like all

00:31:19,240 --> 00:31:25,299
the other features but Elvis was merged

00:31:23,350 --> 00:31:28,179
into the kernel when it was still quite

00:31:25,299 --> 00:31:29,440
small and then improved in very various

00:31:28,179 --> 00:31:32,200
little small steps

00:31:29,440 --> 00:31:33,730
yeah and that take take a lot of time as

00:31:32,200 --> 00:31:37,809
I showed with the other examples I gave

00:31:33,730 --> 00:31:39,940
earlier and it also shows how quick

00:31:37,809 --> 00:31:42,429
things improve and complicated areas

00:31:39,940 --> 00:31:44,710
mainly depends on how complex the area

00:31:42,429 --> 00:31:46,990
is the problem actually issue what try

00:31:44,710 --> 00:31:48,929
to solve and how many individuals or

00:31:46,990 --> 00:31:52,029
companies back to the development and

00:31:48,929 --> 00:31:54,549
turned-out problem scope he has really

00:31:52,029 --> 00:31:57,010
really complex and company a lot of

00:31:54,549 --> 00:31:58,659
companies didn't care too much some

00:31:57,010 --> 00:32:01,870
companies actually helped like Oracle

00:31:58,659 --> 00:32:05,110
Sousa Facebook and few others but some

00:32:01,870 --> 00:32:06,850
don't care much and didn't help no

00:32:05,110 --> 00:32:09,970
complaint it's how it thinks sometimes

00:32:06,850 --> 00:32:12,399
it's in the links world so the big

00:32:09,970 --> 00:32:15,610
question is will Linux get something to

00:32:12,399 --> 00:32:17,200
compete with ZFS I'm pretty sure sooner

00:32:15,610 --> 00:32:20,620
or later it will the examples I gave

00:32:17,200 --> 00:32:22,809
really show that it might just take 10

00:32:20,620 --> 00:32:26,580
more years maybe just 5 but maybe 15 who

00:32:22,809 --> 00:32:29,500
knows we will see just to mention a few

00:32:26,580 --> 00:32:32,559
recent events there was filesystem peak

00:32:29,500 --> 00:32:36,190
as FS that a lot of people have high

00:32:32,559 --> 00:32:39,070
expectations there I'd say be wait and

00:32:36,190 --> 00:32:40,630
see and keep your expectations under

00:32:39,070 --> 00:32:43,059
control to not create create another

00:32:40,630 --> 00:32:44,620
hype because history shows it's a hard

00:32:43,059 --> 00:32:46,210
problem the history of butterface

00:32:44,620 --> 00:32:48,610
actually shows it's a hard problem that

00:32:46,210 --> 00:32:50,200
takes a lot of a fort and because FS

00:32:48,610 --> 00:32:52,450
right now is basically a one-man show

00:32:50,200 --> 00:32:54,519
and not even submitted to mainline

00:32:52,450 --> 00:32:57,730
inclusion yet so it's unlikely to fly

00:32:54,519 --> 00:33:01,059
soon even if it got much companies would

00:32:57,730 --> 00:33:02,649
need to have a lot of testing and

00:33:01,059 --> 00:33:04,210
testing in the field before that's

00:33:02,649 --> 00:33:06,700
really become stables or it that will

00:33:04,210 --> 00:33:09,010
take a while if things really develop in

00:33:06,700 --> 00:33:11,559
this direction maybe in in the end it

00:33:09,010 --> 00:33:13,240
turns out that but that but Elvis gets

00:33:11,559 --> 00:33:15,309
improved and that becomes a set of s

00:33:13,240 --> 00:33:16,860
volumes in the end just as planned that

00:33:15,309 --> 00:33:20,980
nobody knows that

00:33:16,860 --> 00:33:22,870
yeah I'll talked a lot about features

00:33:20,980 --> 00:33:25,260
already but let's switch gears a little

00:33:22,870 --> 00:33:27,740
bit and talk about Linux kernel develop

00:33:25,260 --> 00:33:30,780
how the kernel is developed itself

00:33:27,740 --> 00:33:33,240
because during the early 1st and first

00:33:30,780 --> 00:33:35,460
10 days the Linux kernel developed men

00:33:33,240 --> 00:33:37,800
looked really odd to outsiders there was

00:33:35,460 --> 00:33:39,870
no central development Forge like

00:33:37,800 --> 00:33:42,690
SourceForge gate lab or kid

00:33:39,870 --> 00:33:44,700
github development was actually totally

00:33:42,690 --> 00:33:45,510
driven by email there were dozens of

00:33:44,700 --> 00:33:47,570
mailing lists

00:33:45,510 --> 00:33:50,600
no tracker for pet submissions no

00:33:47,570 --> 00:33:53,790
central issue tracker and neither for

00:33:50,600 --> 00:33:55,830
developers no users there were long

00:33:53,790 --> 00:33:58,170
unstable development phases they were so

00:33:55,830 --> 00:34:02,300
new fate and new features that got build

00:33:58,170 --> 00:34:05,340
and integrated into an unstable series

00:34:02,300 --> 00:34:07,350
sit there long and reached users only

00:34:05,340 --> 00:34:08,700
after two or three years it was made a

00:34:07,350 --> 00:34:10,620
lot of people unhappy

00:34:08,700 --> 00:34:13,290
there was no predictable released

00:34:10,620 --> 00:34:14,940
guidance no driver they just better they

00:34:13,290 --> 00:34:16,440
database where I could look up if your

00:34:14,940 --> 00:34:19,380
hardware support and how good and

00:34:16,440 --> 00:34:22,919
actually we had an overworked lead

00:34:19,380 --> 00:34:24,000
developer and because we didn't one of

00:34:22,919 --> 00:34:26,970
the reasons why he was kind of

00:34:24,000 --> 00:34:28,409
overworked and we didn't even have a

00:34:26,970 --> 00:34:32,129
version controls file system by a

00:34:28,409 --> 00:34:34,379
resident control system back then for

00:34:32,129 --> 00:34:36,600
the younger ones in the front

00:34:34,379 --> 00:34:38,669
yes 20 years ago we had version control

00:34:36,600 --> 00:34:40,649
systems already most people most project

00:34:38,669 --> 00:34:44,700
actually used them for the older ones

00:34:40,649 --> 00:34:47,159
yes those were CBS and SVN and maybe

00:34:44,700 --> 00:34:49,919
those were the middle-age respect and I

00:34:47,159 --> 00:34:50,850
don't know but kids really made things a

00:34:49,919 --> 00:34:53,540
lot better yeah

00:34:50,850 --> 00:34:57,080
but then back to kernel development

00:34:53,540 --> 00:35:01,430
there are I've there were way more

00:34:57,080 --> 00:35:04,320
aspects for kernel development and the

00:35:01,430 --> 00:35:06,870
approach actually improved quite

00:35:04,320 --> 00:35:12,180
somewhat since then like we have kids

00:35:06,870 --> 00:35:13,740
since 2005 and hadn't changed the world

00:35:12,180 --> 00:35:17,550
really to the better thanks Lee knows

00:35:13,740 --> 00:35:20,220
it's the second project that made the

00:35:17,550 --> 00:35:22,620
world change and now I have here strange

00:35:20,220 --> 00:35:25,320
pop-ups yell it's blocking me my site

00:35:22,620 --> 00:35:29,280
yeah and we actually got a predictable

00:35:25,320 --> 00:35:31,590
release cadence release cycle since 2005

00:35:29,280 --> 00:35:32,910
we basically get new releases from Linux

00:35:31,590 --> 00:35:34,680
kernel have been 9 and 10 weeks so it

00:35:32,910 --> 00:35:38,980
doesn't take that long to get a feature

00:35:34,680 --> 00:35:40,930
out to the users and this approach where

00:35:38,980 --> 00:35:43,180
every new version brings new features

00:35:40,930 --> 00:35:45,310
actually was called crazy by a lot of

00:35:43,180 --> 00:35:47,200
people when when the Linux kernel switch

00:35:45,310 --> 00:35:48,940
to it but it turned out very well and

00:35:47,200 --> 00:35:51,310
actually browsers actually later picked

00:35:48,940 --> 00:35:54,220
it up so Firefox and Chrome we all are

00:35:51,310 --> 00:35:57,430
used to this this model that basically

00:35:54,220 --> 00:36:00,340
we're the Linux kernel built a path to

00:35:57,430 --> 00:36:02,530
actually do that we also got stable

00:36:00,340 --> 00:36:05,350
long-term Colonel said have supported

00:36:02,530 --> 00:36:07,240
for longer liked latest a lot of those

00:36:05,350 --> 00:36:10,450
long-term cons are supported for six

00:36:07,240 --> 00:36:12,760
years these days but to be honest many

00:36:10,450 --> 00:36:15,369
of the other things I mentioned a few

00:36:12,760 --> 00:36:17,290
minutes ago are still around and some

00:36:15,369 --> 00:36:18,910
even got worse though so these days we

00:36:17,290 --> 00:36:21,390
don't have dozens of mailing lists we

00:36:18,910 --> 00:36:24,700
have hundreds of mailing lists and

00:36:21,390 --> 00:36:27,160
development is actually still driven by

00:36:24,700 --> 00:36:29,980
email there's not there is a box Allah

00:36:27,160 --> 00:36:31,990
man but the thing is where you can

00:36:29,980 --> 00:36:33,880
report issues but the thing is lots of

00:36:31,990 --> 00:36:35,710
developers don't look there because in

00:36:33,880 --> 00:36:38,320
most cases it's not the office official

00:36:35,710 --> 00:36:39,730
way to report box just the hint for

00:36:38,320 --> 00:36:42,280
those that want to report box to the

00:36:39,730 --> 00:36:44,490
kernel developers the proper place and

00:36:42,280 --> 00:36:47,050
most of the time is a mailing list

00:36:44,490 --> 00:36:49,660
security also became much more important

00:36:47,050 --> 00:36:52,090
since then but still we have no

00:36:49,660 --> 00:36:54,190
automatic Matic code checking in a

00:36:52,090 --> 00:36:56,320
central place most of the subsystem

00:36:54,190 --> 00:36:58,750
maintained as you something and develop

00:36:56,320 --> 00:37:01,090
some of the developers also but nothing

00:36:58,750 --> 00:37:03,130
central here a lot of room for

00:37:01,090 --> 00:37:06,550
improvements here and on some of those

00:37:03,130 --> 00:37:07,300
things actually is someone was working

00:37:06,550 --> 00:37:10,240
on them already

00:37:07,300 --> 00:37:11,859
and there's always the idea why not

00:37:10,240 --> 00:37:15,280
switch to a central fault like it

00:37:11,859 --> 00:37:16,960
happened github for development because

00:37:15,280 --> 00:37:19,210
you would get a lot of things for

00:37:16,960 --> 00:37:21,700
freedom but no that won't have many

00:37:19,210 --> 00:37:24,880
times soon because just like with

00:37:21,700 --> 00:37:26,950
features that developers demand that

00:37:24,880 --> 00:37:31,420
things improved in small steps here too

00:37:26,950 --> 00:37:33,550
because yeah that's how it works well

00:37:31,420 --> 00:37:35,800
for them and yeah but that's really

00:37:33,550 --> 00:37:38,380
needs someone that's motivated enough to

00:37:35,800 --> 00:37:40,390
do that without an immediately return of

00:37:38,380 --> 00:37:42,910
investment and that makes it sometimes a

00:37:40,390 --> 00:37:45,490
little bit hard and that's why some of

00:37:42,910 --> 00:37:48,609
those things are still kind of archaic

00:37:45,490 --> 00:37:50,470
with Linux kernel development it becomes

00:37:48,609 --> 00:37:52,330
more and more of a problem there was

00:37:50,470 --> 00:37:52,560
also recently on a plumber's conference

00:37:52,330 --> 00:37:55,980
and

00:37:52,560 --> 00:37:57,990
all talk about it with with what

00:37:55,980 --> 00:38:01,080
problems a lot of developers have to

00:37:57,990 --> 00:38:04,500
deal with these days thanks to that work

00:38:01,080 --> 00:38:07,020
group was actually started and already

00:38:04,500 --> 00:38:08,670
got to work so a few improvements are

00:38:07,020 --> 00:38:10,470
coming there's now our Garrett instance

00:38:08,670 --> 00:38:14,490
which developers can use to submit

00:38:10,470 --> 00:38:18,600
patches to the Linux kernel and way

00:38:14,490 --> 00:38:20,010
needs to be seen how the other kernel

00:38:18,600 --> 00:38:23,940
developers will start to use this and

00:38:20,010 --> 00:38:26,310
how if they liked it but but as you can

00:38:23,940 --> 00:38:28,230
see its development is improved with

00:38:26,310 --> 00:38:30,300
small small steps just like with

00:38:28,230 --> 00:38:34,710
features and yeah that will take some

00:38:30,300 --> 00:38:36,360
time sometimes people ask her and should

00:38:34,710 --> 00:38:39,480
why can't the Linux Foundation help you

00:38:36,360 --> 00:38:42,380
more maybe it should help a little bit

00:38:39,480 --> 00:38:46,290
more but I'm not sure how much because

00:38:42,380 --> 00:38:48,210
the Linux development model model really

00:38:46,290 --> 00:38:50,640
worked well and I don't think it would

00:38:48,210 --> 00:38:52,440
be a good idea to basically organize

00:38:50,640 --> 00:38:54,720
them like OpenStack or kubernetes are

00:38:52,440 --> 00:38:57,780
developed with lots of committees and

00:38:54,720 --> 00:39:00,050
hierarchy and things like that yeah that

00:38:57,780 --> 00:39:02,760
might not be the best for doing scrum

00:39:00,050 --> 00:39:06,350
nevertheless Linux kernel development

00:39:02,760 --> 00:39:09,390
meanwhile runs at a usual place pace

00:39:06,350 --> 00:39:11,730
every we get new kernel versions every 9

00:39:09,390 --> 00:39:13,650
or 10 weeks for many many years now if

00:39:11,730 --> 00:39:16,740
you're interested in a few few numbers

00:39:13,650 --> 00:39:20,880
we are actually each of those versions

00:39:16,740 --> 00:39:23,840
brings about 13,500 commits sometimes

00:39:20,880 --> 00:39:27,510
it's thousand or 2,000 more or less and

00:39:23,840 --> 00:39:29,940
all of those bring about 300,000 new

00:39:27,510 --> 00:39:33,630
lines every version so about every year

00:39:29,940 --> 00:39:36,840
the kernel grows about 1.5 million lines

00:39:33,630 --> 00:39:39,210
per year and that actually happens about

00:39:36,840 --> 00:39:41,150
15 years after Andrew Martin who was

00:39:39,210 --> 00:39:45,510
back then number two and the hierarchy

00:39:41,150 --> 00:39:47,970
wrote this and famous last words but the

00:39:45,510 --> 00:39:50,520
actual patch volume has to rope off one

00:39:47,970 --> 00:39:52,920
day as I said that was 15 years ago

00:39:50,520 --> 00:39:55,980
it didn't back then we had like I think

00:39:52,920 --> 00:39:58,350
six or eight thousand pet commits every

00:39:55,980 --> 00:40:02,820
kernel release as I said these days we

00:39:58,350 --> 00:40:05,970
often have 13,500 and the Latin later

00:40:02,820 --> 00:40:07,980
number is actually stable these days so

00:40:05,970 --> 00:40:10,950
the patch volume is quite constant there

00:40:07,980 --> 00:40:13,770
hmm yeah but that was not the only thing

00:40:10,950 --> 00:40:15,359
Andrew Martin wrote back then he also

00:40:13,770 --> 00:40:18,359
said we have to finish this thing one

00:40:15,359 --> 00:40:22,109
day yeah I don't think that will ever

00:40:18,359 --> 00:40:24,869
happen I guess Linux might be forget

00:40:22,109 --> 00:40:27,660
forgotten maybe in hundred years and

00:40:24,869 --> 00:40:30,750
because all developers might work on

00:40:27,660 --> 00:40:33,619
something else or we still use it in 100

00:40:30,750 --> 00:40:36,690
years who knows remains to be seen

00:40:33,619 --> 00:40:40,380
so now I'm coming to the end slowly

00:40:36,690 --> 00:40:42,420
summing things up now the Linux

00:40:40,380 --> 00:40:44,579
developers really solve big problems and

00:40:42,420 --> 00:40:46,710
small steps the big con lock showed that

00:40:44,579 --> 00:40:49,250
the small steps lead really to better

00:40:46,710 --> 00:40:51,540
and more flexible solution like KVM did

00:40:49,250 --> 00:40:53,700
sometimes these small steps actually

00:40:51,540 --> 00:40:58,140
make groundbreaking new technology

00:40:53,700 --> 00:41:00,300
possible like like Daka did the these

00:40:58,140 --> 00:41:02,400
small building blocks that are built in

00:41:00,300 --> 00:41:05,790
these small steps actually sometimes can

00:41:02,400 --> 00:41:10,109
can even help fulfilling old wishes like

00:41:05,790 --> 00:41:12,119
DTrace 2.0 did for the wish for tracing

00:41:10,109 --> 00:41:14,450
solution and this process actually can

00:41:12,119 --> 00:41:17,670
lead to quite unexpected disrupting

00:41:14,450 --> 00:41:19,290
results like this be BPF thing I

00:41:17,670 --> 00:41:20,520
mentioned really keep an eye on it it's

00:41:19,290 --> 00:41:23,730
going to be fun what's coming out of

00:41:20,520 --> 00:41:25,349
that but thing is that's what mate and

00:41:23,730 --> 00:41:27,329
makes leaning so great because those

00:41:25,349 --> 00:41:30,599
were just big examples during the past

00:41:27,329 --> 00:41:32,339
three two years at two decades the big

00:41:30,599 --> 00:41:35,160
features that what he developed like

00:41:32,339 --> 00:41:39,150
that it's basically all the other stuff

00:41:35,160 --> 00:41:41,790
was was quite similar but it shows it

00:41:39,150 --> 00:41:44,310
what makes Linux so great and reaching

00:41:41,790 --> 00:41:47,730
big and chose it you can reach big goals

00:41:44,310 --> 00:41:48,599
with small steps and even if that takes

00:41:47,730 --> 00:41:50,339
time

00:41:48,599 --> 00:41:53,849
yeah and if something takes time it

00:41:50,339 --> 00:41:55,319
obviously also needs money because we

00:41:53,849 --> 00:41:59,910
all have to eat in the end of the day

00:41:55,319 --> 00:42:01,920
and yeah so to realize them that often

00:41:59,910 --> 00:42:05,280
needs someone that's really committed

00:42:01,920 --> 00:42:08,460
Italy someone that's an individual what

00:42:05,280 --> 00:42:11,609
that wants to realize a dream and has a

00:42:08,460 --> 00:42:13,980
dream about a new feature and that and

00:42:11,609 --> 00:42:16,230
drive makes everything happened to

00:42:13,980 --> 00:42:18,390
realize that in the kernel because

00:42:16,230 --> 00:42:19,830
that's how all those features I

00:42:18,390 --> 00:42:21,600
mentioned too got developed

00:42:19,830 --> 00:42:24,030
and the real-time stuff I mentioned is

00:42:21,600 --> 00:42:26,900
really was a really big and crazy dream

00:42:24,030 --> 00:42:29,850
but even that got realized this way

00:42:26,900 --> 00:42:35,220
nevertheless in some RS we are still not

00:42:29,850 --> 00:42:37,500
there yet and to improve things you have

00:42:35,220 --> 00:42:40,290
to basically become an individual that

00:42:37,500 --> 00:42:41,190
is committed and find money to get this

00:42:40,290 --> 00:42:43,470
dream realized

00:42:41,190 --> 00:42:45,960
and then maybe Linux will get a file

00:42:43,470 --> 00:42:48,660
system that's as good or even better

00:42:45,960 --> 00:42:50,970
than set of s and we might get developer

00:42:48,660 --> 00:42:53,940
tools and schemes that are even better

00:42:50,970 --> 00:42:57,750
than what what we have these these days

00:42:53,940 --> 00:42:59,880
just like it was for example or other

00:42:57,750 --> 00:43:03,030
things that will have a positive and

00:42:59,880 --> 00:43:06,390
impact on the world or the world of free

00:43:03,030 --> 00:43:08,790
and open source software like Linux and

00:43:06,390 --> 00:43:10,980
get hat and have which just as

00:43:08,790 --> 00:43:13,260
everything else I mentioned is were just

00:43:10,980 --> 00:43:15,900
a dream and somebody said that somebody

00:43:13,260 --> 00:43:19,490
realized in this case Lee knows that's

00:43:15,900 --> 00:43:22,490
it and that's if you're wondering slide

00:43:19,490 --> 00:43:22,490
00:43:22,660 --> 00:43:27,949
[Applause]

00:43:30,200 --> 00:43:37,430
all those like I have so many things to

00:43:33,950 --> 00:43:39,980
say and so many things in my hat that's

00:43:37,430 --> 00:43:42,349
why I'm using to these slides to keep on

00:43:39,980 --> 00:43:48,940
track so are there any questions we now

00:43:42,349 --> 00:43:52,339
have to switch mics all right if you're

00:43:48,940 --> 00:43:53,990
okay if you're planning to leave you

00:43:52,339 --> 00:43:54,980
know this makes questions a little bit

00:43:53,990 --> 00:43:56,390
difficult we have about five minutes

00:43:54,980 --> 00:44:01,880
left for questions if someone has a

00:43:56,390 --> 00:44:03,200
question I now can't get to you guys if

00:44:01,880 --> 00:44:04,640
folks leaving the room could leave the

00:44:03,200 --> 00:44:06,320
room as quietly as possible so we can

00:44:04,640 --> 00:44:23,270
hear the intelligent discourse from the

00:44:06,320 --> 00:44:25,609
questions in the audience to make use of

00:44:23,270 --> 00:44:34,700
quantum computers and quantum chips that

00:44:25,609 --> 00:44:37,700
are coming up yes thank you I have no

00:44:34,700 --> 00:44:40,609
idea I don't think anybody is working on

00:44:37,700 --> 00:44:43,849
making Linux run on quantum computers

00:44:40,609 --> 00:44:47,030
maybe we need new operating systems for

00:44:43,849 --> 00:44:49,520
them remains to be seen maybe somewhere

00:44:47,030 --> 00:44:52,670
and somewhere some lab somebody ported

00:44:49,520 --> 00:44:54,740
little safe but I have no idea by the

00:44:52,670 --> 00:44:56,089
way if if you're exiting the room could

00:44:54,740 --> 00:44:57,920
you please do it from the middle or the

00:44:56,089 --> 00:44:59,510
back they were still trying to actually

00:44:57,920 --> 00:45:01,900
answer questions at the front of the

00:44:59,510 --> 00:45:01,900
room at the moment

00:45:03,130 --> 00:45:08,469
thank you for the table I wanted to know

00:45:05,949 --> 00:45:12,609
do you think that Linux as good and

00:45:08,469 --> 00:45:14,619
faster or less fast during the time

00:45:12,609 --> 00:45:21,609
during the 20 ounce pie sorry I don't

00:45:14,619 --> 00:45:24,190
understand you're still out could you

00:45:21,609 --> 00:45:26,199
maybe come here oh yeah yeah oh yeah

00:45:24,190 --> 00:45:28,900
thanks that's now again do you think

00:45:26,199 --> 00:45:30,999
that the Linux kernel has gotten faster

00:45:28,900 --> 00:45:35,640
during the years because you know a

00:45:30,999 --> 00:45:39,279
software grows it's sometimes slower

00:45:35,640 --> 00:45:41,079
there was many performance enhancements

00:45:39,279 --> 00:45:44,380
so do you think it has gotten like

00:45:41,079 --> 00:45:50,890
slower or faster on the same out where

00:45:44,380 --> 00:45:53,170
oh you mean if if it should be if it

00:45:50,890 --> 00:45:57,940
should be how it could be faster or what

00:45:53,170 --> 00:46:00,489
I like doing all the time that passed oh

00:45:57,940 --> 00:46:02,289
you talked about do you think but the

00:46:00,489 --> 00:46:05,410
kernel as good and faster

00:46:02,289 --> 00:46:10,779
I still out here sorry I can't

00:46:05,410 --> 00:46:14,009
understand it ok we're gonna try this

00:46:10,779 --> 00:46:18,579
again does anybody have a question

00:46:14,009 --> 00:46:22,890
hopefully isn't oh well did you ask if

00:46:18,579 --> 00:46:22,890
the Linux kernel was growing fat or what

00:46:23,489 --> 00:46:30,430
gene is whether Linux gets passed

00:46:26,349 --> 00:46:38,140
through with these updates if even

00:46:30,430 --> 00:46:40,239
faster release updates when Linux gets

00:46:38,140 --> 00:46:43,299
passed up with all the improvements yeah

00:46:40,239 --> 00:46:45,459
it Linux basically gets faster basically

00:46:43,299 --> 00:46:48,099
with every new versions always in little

00:46:45,459 --> 00:46:51,249
little steps also is per this is too

00:46:48,099 --> 00:46:57,280
slow in some some areas or where do you

00:46:51,249 --> 00:47:02,300
think it's too slow it's

00:46:57,280 --> 00:47:04,820
and I think the point was with the

00:47:02,300 --> 00:47:08,570
increased code base it might get slower

00:47:04,820 --> 00:47:11,150
over time if can you repeat it with they

00:47:08,570 --> 00:47:13,099
increase code base over time it might

00:47:11,150 --> 00:47:14,630
get slower because you have too many

00:47:13,099 --> 00:47:16,930
lines you mean because it's getting

00:47:14,630 --> 00:47:19,099
slower because it's so big not

00:47:16,930 --> 00:47:21,369
necessarily right now but can it be in

00:47:19,099 --> 00:47:21,369
the future

00:47:21,400 --> 00:47:27,200
yeah the Linux kernel is quite modular

00:47:24,020 --> 00:47:29,300
so you can build everything into it what

00:47:27,200 --> 00:47:31,730
you want but sure some of those features

00:47:29,300 --> 00:47:36,020
have some overhead that make Linux may

00:47:31,730 --> 00:47:38,630
be slower and that actually likely would

00:47:36,020 --> 00:47:42,470
become this overhead would be a problem

00:47:38,630 --> 00:47:44,510
if you would use a modern Linux on a

00:47:42,470 --> 00:47:47,630
quite old system but on the other hand

00:47:44,510 --> 00:47:50,599
you can configure Linux quite quite

00:47:47,630 --> 00:47:53,960
modular and I mean it's used on a lot of

00:47:50,599 --> 00:47:56,300
embedded systems so it shows it can be

00:47:53,960 --> 00:47:58,130
made quite small and at the same time

00:47:56,300 --> 00:48:02,329
also work on quite big servers with

00:47:58,130 --> 00:48:05,990
hundreds of CPUs right this is our last

00:48:02,329 --> 00:48:07,819
question last question okay my name is

00:48:05,990 --> 00:48:12,200
totally sorry I speak a little bit

00:48:07,819 --> 00:48:14,119
English I would like to ask about if I

00:48:12,200 --> 00:48:21,369
understand to your right you said that

00:48:14,119 --> 00:48:24,020
each year we got 1.5 million lines more

00:48:21,369 --> 00:48:31,329
just your opinion what's happened in 10

00:48:24,020 --> 00:48:34,640
years so what was it who tested it I

00:48:31,329 --> 00:48:36,650
can't hear the speakers are away from

00:48:34,640 --> 00:48:39,680
here could you explain me how it's

00:48:36,650 --> 00:48:43,190
possible to test it at all how to tell

00:48:39,680 --> 00:48:47,900
things that you enter into doesn't care

00:48:43,190 --> 00:48:51,650
about commits from IBM or Facebook or

00:48:47,900 --> 00:48:53,900
another conference yes tested at all no

00:48:51,650 --> 00:48:55,819
no I guess nobody tests it's all because

00:48:53,900 --> 00:48:59,990
you can build it in lots of different

00:48:55,819 --> 00:49:02,480
ways we have a lot of issues well what

00:48:59,990 --> 00:49:06,290
this why they have a lot of issues yeah

00:49:02,480 --> 00:49:08,000
it's a lot of people try to testing the

00:49:06,290 --> 00:49:09,410
Linux kernel throughout Lee but you

00:49:08,000 --> 00:49:11,450
can't test at all

00:49:09,410 --> 00:49:14,360
and that's also something that really

00:49:11,450 --> 00:49:17,870
needs to be get better which the work

00:49:14,360 --> 00:49:20,120
for group also I think has on its

00:49:17,870 --> 00:49:24,550
roadmap to make sure the contest thing

00:49:20,120 --> 00:49:27,230
gets better yeah okay I think we are

00:49:24,550 --> 00:49:29,840
ending this if you can want to give any

00:49:27,230 --> 00:49:32,120
feedback just talk to me even if you

00:49:29,840 --> 00:49:35,150
didn't like it yeah and if you want to

00:49:32,120 --> 00:49:37,630
follow me you can follow me here if you

00:49:35,150 --> 00:49:46,739
want thanks again and have a great pasta

00:49:37,630 --> 00:49:46,739

YouTube URL: https://www.youtube.com/watch?v=ZkJSeEvtkxw


