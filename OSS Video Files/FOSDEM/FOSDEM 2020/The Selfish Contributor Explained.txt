Title: The Selfish Contributor Explained
Publication date: 2020-07-09
Playlist: FOSDEM 2020
Description: 
	by James Bottomley

At: FOSDEM 2020
https://video.fosdem.org/2020/K.1.105/selfish_contributor.webm

It has become very popular in the last several years to think of free and open source as a community forward activity, indeed the modern approach is to try and form a community or foundation first and do code second.  There is also much talk about maintainer burn out and community exploitation.  However, the same people who talk about this still paraphrase the most famous quote from the Cathedral and the Bazaar "Scratching your own itch".  They forget this is your own itch not everyone else's because Open Source begins as a selfish activity.  The fact that communities do form around a load of selfish competing individuals is actually a testament to the unacknowledged power of open source to co-opt the selfish instinct and make it synergistic to some communal good.


This talk will explore the selfish origins of free and open source and dissect the co-option power it has to form broad and deep communities from what are apparently simple transactional engagements.  We'll also explain how some of the more recent community failures have been engendered by the concentration on long term community to the detriment of enabling purely transactional mechanics by which initially selfish contributors come to the project.
The origins of selfish contributions, while called out in the founding canons of the open source and free software movements, were initially not very well recognized until the first open source projects (and here the author will use the example he's familiar with: the Linux Kernel) tried to engage successfully with companies trying to utilize the projects for their own ends.  We became adept at explaining why forking is bad and how your cost structure will rise exponentially if you do it and how the cheapest method of achieving your business goals is in fact to work with the existing community on whatever feature the company was trying to add as part of its business plan.  In fact, those of use who did company engagement because transactional sales people offering a corporation the achievements of business goals in exchange for some unexpected community engagement.


Nowadays, all companies have drunk the open source coolaid and all pledge their loyalty to further the interests of the community and this previous learning is all but forgotten in the third and fourth waves of open source.  However, at their hearts, corporations are still the same business goal focussed transactional entities we had to deal with in the early days of open source and an understanding of how to co-opt their transactional nature would go a long way to assisting new open source developers in their quest to form communities.


This talk will begin with some history of the Linux kernel's corporate engagement, explore and explain some of the processes within open source development that lead to the conversion of transactionalism into long term community synergy (the truly astounding ability of open source to co-opt selfishness) and then give a few examples of how serving the community rather than enabling transactionalism can give rise to burn out and apparent exploitation.  In conclusion we'll give some simple rules to enable this co-opting and suggest how some of the competing interests of the ethical source and social justice movements might likewise be co-opted.

Room: K.1.105 (La Fontaine)
Scheduled start: 2020-02-01 10:00:00
Captions: 
	00:00:05,359 --> 00:00:08,639
um

00:00:05,839 --> 00:00:09,760
so good morning everyone um our next

00:00:08,639 --> 00:00:12,880
speaker is mr

00:00:09,760 --> 00:00:16,560
james bottomley with his talk

00:00:12,880 --> 00:00:19,090
titled the selfish contributor explained

00:00:16,560 --> 00:00:23,840
well thank you very much indeed and

00:00:19,090 --> 00:00:26,480
[Applause]

00:00:23,840 --> 00:00:28,240
so if you attended the previous talk

00:00:26,480 --> 00:00:30,560
denise took us through a nice

00:00:28,240 --> 00:00:32,239
view of the airy hopeful altruistic

00:00:30,560 --> 00:00:33,920
uplands of open source and what it can

00:00:32,239 --> 00:00:35,760
do for municipalities

00:00:33,920 --> 00:00:37,200
i'm going to take you on a journey

00:00:35,760 --> 00:00:39,520
through the deep dark

00:00:37,200 --> 00:00:41,360
motivational secrets to see me

00:00:39,520 --> 00:00:43,840
underbelly of open source

00:00:41,360 --> 00:00:45,440
how people can actually get engineers to

00:00:43,840 --> 00:00:46,719
contribute efficiently to the open

00:00:45,440 --> 00:00:49,120
source project

00:00:46,719 --> 00:00:52,000
um i'm james bottomley i work for ibm as

00:00:49,120 --> 00:00:53,840
you can see from my email address

00:00:52,000 --> 00:00:55,600
i am actually a very old school open

00:00:53,840 --> 00:00:58,480
source person so my open source

00:00:55,600 --> 00:01:00,719
experience actually goes back to 1982

00:00:58,480 --> 00:01:03,039
with looking at the source code of what

00:01:00,719 --> 00:01:05,760
was then bsd

00:01:03,039 --> 00:01:06,080
so that means i've spent almost 40 years

00:01:05,760 --> 00:01:09,680
in

00:01:06,080 --> 00:01:11,680
open source and as a result although

00:01:09,680 --> 00:01:13,680
my marketing department in ibm makes me

00:01:11,680 --> 00:01:15,600
put my twitter account on the slides

00:01:13,680 --> 00:01:16,880
twitter for me is mostly a write-only

00:01:15,600 --> 00:01:18,560
exercise so

00:01:16,880 --> 00:01:21,680
if you expect to contact me that way

00:01:18,560 --> 00:01:24,720
you're going to be sorely disappointed

00:01:21,680 --> 00:01:26,159
so i've been a container evangelist for

00:01:24,720 --> 00:01:30,000
a long time in fact

00:01:26,159 --> 00:01:31,600
nearly um 10 years now so containers are

00:01:30,000 --> 00:01:32,079
usually my thing and i have actually

00:01:31,600 --> 00:01:35,360
talked

00:01:32,079 --> 00:01:36,960
at fosdem about containers before

00:01:35,360 --> 00:01:38,960
i have actually spent a lot of time in

00:01:36,960 --> 00:01:39,680
open source advocacy in the very early

00:01:38,960 --> 00:01:41,280
days

00:01:39,680 --> 00:01:43,439
so i was one of the people who was

00:01:41,280 --> 00:01:46,000
instrumental in actually

00:01:43,439 --> 00:01:47,759
trying to capture what was then the open

00:01:46,000 --> 00:01:49,680
source development laboratory that was

00:01:47,759 --> 00:01:51,280
trying to co-op the linux kernel into

00:01:49,680 --> 00:01:53,119
doing projects it didn't want

00:01:51,280 --> 00:01:54,960
and actually make it serve the open

00:01:53,119 --> 00:01:58,320
source community so that's where i got

00:01:54,960 --> 00:02:00,159
my first taste of open source politics

00:01:58,320 --> 00:02:02,000
and of course i'm still technically a

00:02:00,159 --> 00:02:04,159
kernel developer of course

00:02:02,000 --> 00:02:05,920
i'm now so old that nobody really

00:02:04,159 --> 00:02:06,719
expects me to write that much useful

00:02:05,920 --> 00:02:09,599
code

00:02:06,719 --> 00:02:10,479
so i have uh sub maintainers martin

00:02:09,599 --> 00:02:12,640
peterson

00:02:10,479 --> 00:02:14,319
abele looks after the skizzy subsystem

00:02:12,640 --> 00:02:16,319
and helga della looks after the peer

00:02:14,319 --> 00:02:18,080
risk architecture i do virtually nothing

00:02:16,319 --> 00:02:20,000
i think the last few patches i did for

00:02:18,080 --> 00:02:22,000
scuzzy were just some bug fixers

00:02:20,000 --> 00:02:23,440
admittedly for pa risk this year i did

00:02:22,000 --> 00:02:25,920
actually make the bootloader work on

00:02:23,440 --> 00:02:29,040
ext4 so i'm still coding there

00:02:25,920 --> 00:02:30,319
but the point is that uh martin just

00:02:29,040 --> 00:02:33,040
doesn't really want to deal with the

00:02:30,319 --> 00:02:35,200
hassle of sending patches to linus every

00:02:33,040 --> 00:02:36,720
uh merge window and all of the blowback

00:02:35,200 --> 00:02:38,480
that you can get from that particularly

00:02:36,720 --> 00:02:40,160
if you're a scuzzy developer

00:02:38,480 --> 00:02:41,680
so he leaves it up to me to actually

00:02:40,160 --> 00:02:43,040
send the pull request even though he's

00:02:41,680 --> 00:02:45,920
done all the hard work of actually

00:02:43,040 --> 00:02:45,920
assembling the tree

00:02:46,160 --> 00:02:50,000
um i do have to give you a disclaimer

00:02:48,560 --> 00:02:51,840
this talk is wholly based

00:02:50,000 --> 00:02:53,760
on personal observation there will be a

00:02:51,840 --> 00:02:55,599
lot in this talk you may disagree with

00:02:53,760 --> 00:02:57,040
and i'm happy to entertain disagreements

00:02:55,599 --> 00:02:57,680
afterwards in the question and answer

00:02:57,040 --> 00:02:59,360
session

00:02:57,680 --> 00:03:01,440
but this is my personal opinion and

00:02:59,360 --> 00:03:03,040
observation it is definitely nothing to

00:03:01,440 --> 00:03:04,560
do with ibm

00:03:03,040 --> 00:03:07,040
who were not very keen on me coming to

00:03:04,560 --> 00:03:10,400
talk about this topic anyway

00:03:07,040 --> 00:03:12,800
so let's begin with a fun topic

00:03:10,400 --> 00:03:14,480
since almost everybody in this room in

00:03:12,800 --> 00:03:15,760
some form would count themselves as an

00:03:14,480 --> 00:03:18,080
engineer most people would count

00:03:15,760 --> 00:03:20,959
themselves as a software engineer

00:03:18,080 --> 00:03:22,640
managing engineers is a hard problem and

00:03:20,959 --> 00:03:24,560
it's been a hard problem since long

00:03:22,640 --> 00:03:26,239
before i was in open source and long

00:03:24,560 --> 00:03:28,480
before computers existed

00:03:26,239 --> 00:03:30,000
engineers tend to be opinionated and not

00:03:28,480 --> 00:03:32,560
play very well with others

00:03:30,000 --> 00:03:34,640
there's a very famous quote about

00:03:32,560 --> 00:03:35,360
managing engineers is a bit like herding

00:03:34,640 --> 00:03:37,360
cats

00:03:35,360 --> 00:03:38,879
they are very difficult to get them all

00:03:37,360 --> 00:03:39,599
to line up and go in the same damn

00:03:38,879 --> 00:03:43,200
direction

00:03:39,599 --> 00:03:43,200
and actually work on your project

00:03:43,519 --> 00:03:47,120
and obviously this means that getting

00:03:45,200 --> 00:03:49,599
engineers to do productive work

00:03:47,120 --> 00:03:51,360
can be incredibly difficult and so

00:03:49,599 --> 00:03:53,120
managers who can actually get productive

00:03:51,360 --> 00:03:53,840
work out of engineers in propriety

00:03:53,120 --> 00:03:55,760
industry

00:03:53,840 --> 00:03:58,239
are in very big demand that's why they

00:03:55,760 --> 00:04:00,319
paid very big salaries

00:03:58,239 --> 00:04:01,599
but one of the interesting corollaries

00:04:00,319 --> 00:04:04,159
of engineers is they do

00:04:01,599 --> 00:04:04,720
actually work best on things they like

00:04:04,159 --> 00:04:06,959
so

00:04:04,720 --> 00:04:08,560
i've worked in a lot of proprietary

00:04:06,959 --> 00:04:09,120
companies doing a lot of proprietary

00:04:08,560 --> 00:04:10,799
stuff

00:04:09,120 --> 00:04:12,319
and i find the best way of actually

00:04:10,799 --> 00:04:14,080
managing engineers

00:04:12,319 --> 00:04:15,599
is to persuade them that they like

00:04:14,080 --> 00:04:16,320
whatever the project you're actually

00:04:15,599 --> 00:04:18,000
doing is

00:04:16,320 --> 00:04:19,840
if from a technical point of view you

00:04:18,000 --> 00:04:21,440
can persuade every member on the team

00:04:19,840 --> 00:04:23,680
that actually this is an interesting and

00:04:21,440 --> 00:04:25,520
worthwhile exercise the job of hurting

00:04:23,680 --> 00:04:28,960
the cats managing the engineers

00:04:25,520 --> 00:04:32,160
becomes much easier and

00:04:28,960 --> 00:04:33,680
if you don't try and motivate engineers

00:04:32,160 --> 00:04:35,440
with a technical motivation if you're

00:04:33,680 --> 00:04:36,240
just trying to do a sort of managerial

00:04:35,440 --> 00:04:37,759
motivation

00:04:36,240 --> 00:04:39,040
it becomes very difficult because if you

00:04:37,759 --> 00:04:40,160
go and ask engineers what their

00:04:39,040 --> 00:04:41,919
motivations are

00:04:40,160 --> 00:04:43,840
and a 10 engineer team you will get 10

00:04:41,919 --> 00:04:45,280
different answers and trying to satisfy

00:04:43,840 --> 00:04:47,440
all those expectations becomes

00:04:45,280 --> 00:04:48,960
impossible

00:04:47,440 --> 00:04:50,240
and as i said this is something the

00:04:48,960 --> 00:04:52,160
industry has been struggling with for

00:04:50,240 --> 00:04:52,639
decades i would almost say for centuries

00:04:52,160 --> 00:04:54,560
i think

00:04:52,639 --> 00:04:57,199
this problem has been excellent for over

00:04:54,560 --> 00:04:59,440
100 years now

00:04:57,199 --> 00:05:00,560
so let's do an analogy from truffle

00:04:59,440 --> 00:05:02,720
hunting um

00:05:00,560 --> 00:05:04,240
i made up this slide because there's a

00:05:02,720 --> 00:05:06,240
wonderful restaurant just next door to

00:05:04,240 --> 00:05:07,759
the ulb called la truth noir

00:05:06,240 --> 00:05:09,840
which hopefully i will be enjoying

00:05:07,759 --> 00:05:11,520
myself at this evening

00:05:09,840 --> 00:05:13,360
but the other point is i come from the

00:05:11,520 --> 00:05:14,240
pacific northwest and a lot of you may

00:05:13,360 --> 00:05:16,400
not know it

00:05:14,240 --> 00:05:18,160
but the pacific northwest actually has a

00:05:16,400 --> 00:05:19,360
truffle industry the climate is almost

00:05:18,160 --> 00:05:22,400
identical to here

00:05:19,360 --> 00:05:24,240
and we actually grow very nice truffles

00:05:22,400 --> 00:05:26,080
and you probably haven't heard that

00:05:24,240 --> 00:05:27,440
there is a massive disagreement between

00:05:26,080 --> 00:05:28,560
the truffle gatherers of the pacific

00:05:27,440 --> 00:05:30,880
northwest

00:05:28,560 --> 00:05:32,479
and the world famous truffle gatherers

00:05:30,880 --> 00:05:34,160
in france perigord region

00:05:32,479 --> 00:05:36,000
everywhere that truffles famously come

00:05:34,160 --> 00:05:38,639
from

00:05:36,000 --> 00:05:40,960
and it's this americans actually prefer

00:05:38,639 --> 00:05:42,720
dogs for hunting truffles

00:05:40,960 --> 00:05:45,199
the french and in fact everybody in

00:05:42,720 --> 00:05:46,880
europe think this is a load of rubbish

00:05:45,199 --> 00:05:47,919
and everybody should use pigs for

00:05:46,880 --> 00:05:49,360
hunting truffles

00:05:47,919 --> 00:05:51,039
this is a source of a massive

00:05:49,360 --> 00:05:52,400
disagreement between american truffle

00:05:51,039 --> 00:05:55,440
hunters and

00:05:52,400 --> 00:05:56,960
european truffle hunters so dogs have to

00:05:55,440 --> 00:05:58,800
be trained to hunt truffles

00:05:56,960 --> 00:06:00,080
but they can they have good senses of

00:05:58,800 --> 00:06:01,680
smell dogs

00:06:00,080 --> 00:06:03,120
actually don't like truffles which is

00:06:01,680 --> 00:06:04,639
somewhat of an advantage which means if

00:06:03,120 --> 00:06:06,080
they dig you up a truffle they won't eat

00:06:04,639 --> 00:06:08,720
it whereas a pig will

00:06:06,080 --> 00:06:10,319
however pigs absolutely love truffles

00:06:08,720 --> 00:06:12,400
the reason a pig is a good truffle

00:06:10,319 --> 00:06:13,759
hunter and needs virtually no training

00:06:12,400 --> 00:06:15,440
is because they will sniff them out

00:06:13,759 --> 00:06:17,039
naturally and if given the opportunity

00:06:15,440 --> 00:06:18,960
we'll dig them all up and eat them

00:06:17,039 --> 00:06:21,600
this is why pigs make really good

00:06:18,960 --> 00:06:23,360
truffle hunters according to europeans

00:06:21,600 --> 00:06:24,960
americans on the converse think that

00:06:23,360 --> 00:06:27,199
pigs are big

00:06:24,960 --> 00:06:28,000
smelly hard to control and actually very

00:06:27,199 --> 00:06:29,680
dangerous

00:06:28,000 --> 00:06:31,360
so if you look at a lot of the truffle

00:06:29,680 --> 00:06:33,199
hunters of the perigord region

00:06:31,360 --> 00:06:34,800
chances are most of them don't have 10

00:06:33,199 --> 00:06:35,919
or a significant number of them don't

00:06:34,800 --> 00:06:37,840
have 10 fingers

00:06:35,919 --> 00:06:39,840
because if you actually get between a

00:06:37,840 --> 00:06:41,440
pig's mouth and a truffle

00:06:39,840 --> 00:06:42,960
and you happen to be holding it they

00:06:41,440 --> 00:06:45,120
will take the truffle and your finger

00:06:42,960 --> 00:06:48,639
off as well

00:06:45,120 --> 00:06:49,280
so pigs are good truffle hunters because

00:06:48,639 --> 00:06:51,680
they have a

00:06:49,280 --> 00:06:53,520
selfish interest dogs make truffle

00:06:51,680 --> 00:06:55,360
hunters because they have an altruistic

00:06:53,520 --> 00:06:56,560
motivation all they really want to do is

00:06:55,360 --> 00:06:58,080
please you the owner

00:06:56,560 --> 00:07:00,000
so if you teach them what a truffle

00:06:58,080 --> 00:07:01,599
smells like they'll go and sniff it out

00:07:00,000 --> 00:07:03,280
but not because they want the truffle

00:07:01,599 --> 00:07:04,720
just because they know you want them to

00:07:03,280 --> 00:07:07,280
have the truffle

00:07:04,720 --> 00:07:09,039
and the sad fact of this is that pigs

00:07:07,280 --> 00:07:11,520
find many more truffles

00:07:09,039 --> 00:07:12,319
the truffle industry in america is

00:07:11,520 --> 00:07:14,400
somewhat

00:07:12,319 --> 00:07:16,080
small and it's for people like me who

00:07:14,400 --> 00:07:18,000
like truffles is actually very difficult

00:07:16,080 --> 00:07:20,000
to cope with because i have to go and

00:07:18,000 --> 00:07:21,199
frequent farmers markets where the

00:07:20,000 --> 00:07:23,280
foragers appear

00:07:21,199 --> 00:07:24,400
and my supply of truffles is actually

00:07:23,280 --> 00:07:26,160
very uncertain

00:07:24,400 --> 00:07:27,520
truffle season in seattle is sometime

00:07:26,160 --> 00:07:30,160
from november to march

00:07:27,520 --> 00:07:32,080
but i'm lucky if you know every other

00:07:30,160 --> 00:07:33,919
time i go to the farmers market somebody

00:07:32,080 --> 00:07:35,919
has a truffle just because

00:07:33,919 --> 00:07:37,919
dogs are not as good at finding truffles

00:07:35,919 --> 00:07:39,840
as pigs

00:07:37,919 --> 00:07:41,759
and the point about this parallel or

00:07:39,840 --> 00:07:44,720
this parable is that

00:07:41,759 --> 00:07:46,560
a selfish motivation that the pig has if

00:07:44,720 --> 00:07:48,800
you can harness it right

00:07:46,560 --> 00:07:50,639
actually gets you far more productive

00:07:48,800 --> 00:07:52,560
work than you can get out of the dog

00:07:50,639 --> 00:07:53,919
even though the dog loves you to bits

00:07:52,560 --> 00:07:55,520
and really wants to please you

00:07:53,919 --> 00:07:57,520
just because the dog is not really

00:07:55,520 --> 00:08:01,199
interested in truffles the pig

00:07:57,520 --> 00:08:03,599
is much more motivated so let's

00:08:01,199 --> 00:08:06,879
apply that lesson to open source the

00:08:03,599 --> 00:08:09,280
selfish motivation for doing open source

00:08:06,879 --> 00:08:10,639
it's actually encoded in our canons the

00:08:09,280 --> 00:08:12,560
cathedral and the bazaar

00:08:10,639 --> 00:08:13,919
by eric raymond contains the phrase

00:08:12,560 --> 00:08:15,840
scratching your own itch

00:08:13,919 --> 00:08:17,520
this is the archetypal selfish

00:08:15,840 --> 00:08:19,599
motivation for any engineer

00:08:17,520 --> 00:08:20,720
to contribute to an open source project

00:08:19,599 --> 00:08:22,160
because there's something in that

00:08:20,720 --> 00:08:23,840
project they want to do

00:08:22,160 --> 00:08:25,520
add to or change they're scratching

00:08:23,840 --> 00:08:28,400
their own edge

00:08:25,520 --> 00:08:29,759
and harnessing the selfish motivation in

00:08:28,400 --> 00:08:32,080
an open source project

00:08:29,759 --> 00:08:33,919
can actually make the cats move together

00:08:32,080 --> 00:08:35,440
if all the cats want to move in the same

00:08:33,919 --> 00:08:37,039
direction you don't need to hurt them

00:08:35,440 --> 00:08:37,919
because they will actually naturally go

00:08:37,039 --> 00:08:40,159
there

00:08:37,919 --> 00:08:42,080
what this means is that open source has

00:08:40,159 --> 00:08:44,240
a natural built-in advantage

00:08:42,080 --> 00:08:46,160
because i'm not a manager who goes to

00:08:44,240 --> 00:08:48,160
you and says well our company business

00:08:46,160 --> 00:08:49,839
now is making foo gadgets

00:08:48,160 --> 00:08:51,120
and you 15 people are now going to be

00:08:49,839 --> 00:08:52,880
working on foo gadgets isn't it

00:08:51,120 --> 00:08:54,160
wonderful

00:08:52,880 --> 00:08:56,080
open source contributors are

00:08:54,160 --> 00:08:57,680
self-selected for liking the project

00:08:56,080 --> 00:09:00,080
so they come to the project with a

00:08:57,680 --> 00:09:03,279
natural inbuilt desire to like the

00:09:00,080 --> 00:09:03,279
project and want to help it

00:09:03,839 --> 00:09:07,920
and of course if the cats will actually

00:09:06,080 --> 00:09:09,760
all move in the same direction naturally

00:09:07,920 --> 00:09:11,760
it becomes an interesting question of is

00:09:09,760 --> 00:09:13,040
a cat herder really necessary

00:09:11,760 --> 00:09:14,800
for those of you in the room who are

00:09:13,040 --> 00:09:16,399
community managers don't worry i'll give

00:09:14,800 --> 00:09:19,440
the answer later it will be yes

00:09:16,399 --> 00:09:21,040
so your job is still not in debt

00:09:19,440 --> 00:09:22,640
so let's look at the lessons from linux

00:09:21,040 --> 00:09:24,320
because my history of linux goes all the

00:09:22,640 --> 00:09:26,320
way back to 1992.

00:09:24,320 --> 00:09:27,920
so i'll do some of the early history

00:09:26,320 --> 00:09:29,279
that i wasn't actually present for in

00:09:27,920 --> 00:09:32,560
00:09:29,279 --> 00:09:34,320
um for those of you who most of you in

00:09:32,560 --> 00:09:36,640
the room will probably recognize this

00:09:34,320 --> 00:09:38,640
this is the original uh it's not an

00:09:36,640 --> 00:09:40,880
email it's actually a news group it was

00:09:38,640 --> 00:09:42,080
sent to the compost minix news group by

00:09:40,880 --> 00:09:44,880
lena's tool vials

00:09:42,080 --> 00:09:46,320
announcing linux the 0.01 release of

00:09:44,880 --> 00:09:48,399
linux

00:09:46,320 --> 00:09:49,680
interesting things about this email you

00:09:48,399 --> 00:09:52,320
don't need to read it all i'll

00:09:49,680 --> 00:09:54,080
extract the interesting bits is there is

00:09:52,320 --> 00:09:54,800
no mention of open source anywhere in

00:09:54,080 --> 00:09:56,560
this email

00:09:54,800 --> 00:09:58,000
he actually just says it's a free

00:09:56,560 --> 00:09:59,680
operating system he's just putting it

00:09:58,000 --> 00:10:02,079
out there doesn't mention open source

00:09:59,680 --> 00:10:03,680
licensing anything and there's no

00:10:02,079 --> 00:10:05,920
request for contributions

00:10:03,680 --> 00:10:06,720
in fact if you read lower down what he

00:10:05,920 --> 00:10:08,640
says is

00:10:06,720 --> 00:10:10,000
he's welcome suggestions so people are

00:10:08,640 --> 00:10:12,160
going to tell him what to do

00:10:10,000 --> 00:10:13,839
and he expects to write the code but he

00:10:12,160 --> 00:10:15,600
doesn't promise to write code for all of

00:10:13,839 --> 00:10:18,800
the suggestions

00:10:15,600 --> 00:10:19,440
so linus at this point 1991 actually

00:10:18,800 --> 00:10:21,279
thinks

00:10:19,440 --> 00:10:23,600
believes he will be writing all of the

00:10:21,279 --> 00:10:26,880
code for linux you know this is his

00:10:23,600 --> 00:10:28,880
fundamental view and of course

00:10:26,880 --> 00:10:30,720
really he's treating everybody else's

00:10:28,880 --> 00:10:32,160
users i'm going to write the code you're

00:10:30,720 --> 00:10:33,600
just going to use my wonderful new

00:10:32,160 --> 00:10:35,200
operating system that looks quite like

00:10:33,600 --> 00:10:37,120
minix

00:10:35,200 --> 00:10:38,800
and obviously contributions in the shape

00:10:37,120 --> 00:10:42,000
of patches eventually

00:10:38,800 --> 00:10:42,399
did come flooding in i actually for this

00:10:42,000 --> 00:10:44,160
talk

00:10:42,399 --> 00:10:46,160
tried to trace the first contribution to

00:10:44,160 --> 00:10:48,640
linux unfortunately

00:10:46,160 --> 00:10:50,079
in the time between 1991 and us setting

00:10:48,640 --> 00:10:53,440
up the kernel mailing list

00:10:50,079 --> 00:10:54,640
a lot of the actual archives of the news

00:10:53,440 --> 00:10:56,880
groups are missing

00:10:54,640 --> 00:10:59,120
so i have a suspicion that the first

00:10:56,880 --> 00:11:01,839
ever patch for linux was ted shows

00:10:59,120 --> 00:11:02,240
extended file system which dropped in

00:11:01,839 --> 00:11:05,760
the

00:11:02,240 --> 00:11:06,880
uh 0.12 kernel but i have no proof that

00:11:05,760 --> 00:11:09,600
it actually is

00:11:06,880 --> 00:11:11,279
but the point is that even though linus

00:11:09,600 --> 00:11:13,279
did not want contributions

00:11:11,279 --> 00:11:14,880
people forced them on him anyway and

00:11:13,279 --> 00:11:17,920
what he's discovered is the operating

00:11:14,880 --> 00:11:19,920
system grew faster because of it

00:11:17,920 --> 00:11:21,680
and what this meant for linus is that an

00:11:19,920 --> 00:11:23,760
open source cat herder was actually

00:11:21,680 --> 00:11:25,519
organically born this was something he

00:11:23,760 --> 00:11:27,200
was not expecting to do he was expecting

00:11:25,519 --> 00:11:28,959
to be writing all the code remember

00:11:27,200 --> 00:11:30,399
but what he ended up doing was actually

00:11:28,959 --> 00:11:33,120
hurting the cats and

00:11:30,399 --> 00:11:35,120
integrating the patches and of course

00:11:33,120 --> 00:11:36,800
now we call him a benevolent dictator

00:11:35,120 --> 00:11:40,640
this is the standard model in

00:11:36,800 --> 00:11:42,959
open source let me in some of the time i

00:11:40,640 --> 00:11:45,120
have give you a little aside about why

00:11:42,959 --> 00:11:46,640
the benevolent dictator model works so

00:11:45,120 --> 00:11:49,040
well in open source because

00:11:46,640 --> 00:11:50,800
it's become very trendy nowadays to

00:11:49,040 --> 00:11:52,880
attack the benevolent dictator model

00:11:50,800 --> 00:11:55,600
because it tends to concentrate power

00:11:52,880 --> 00:11:56,399
in people whom you might not like that

00:11:55,600 --> 00:11:59,360
much

00:11:56,399 --> 00:12:01,040
but the reason it works so well and the

00:11:59,360 --> 00:12:01,519
reason it's extremely common in open

00:12:01,040 --> 00:12:03,279
source

00:12:01,519 --> 00:12:05,120
is because it actually mirrors the

00:12:03,279 --> 00:12:06,399
technical leadership set up in industry

00:12:05,120 --> 00:12:09,040
almost exactly

00:12:06,399 --> 00:12:10,880
barring all of the management stuff if

00:12:09,040 --> 00:12:12,800
you look at the technical leadership the

00:12:10,880 --> 00:12:14,399
people trying to persuade engineers

00:12:12,800 --> 00:12:15,920
to work on code that they actually would

00:12:14,399 --> 00:12:17,839
like to work on the code

00:12:15,920 --> 00:12:19,920
the structure of an open source project

00:12:17,839 --> 00:12:21,120
under a benevolent dictator is an almost

00:12:19,920 --> 00:12:23,279
exact mirror

00:12:21,120 --> 00:12:24,399
the benevolent dictator is very similar

00:12:23,279 --> 00:12:26,639
to the cto

00:12:24,399 --> 00:12:27,839
you know what's called a weak cto model

00:12:26,639 --> 00:12:30,639
for the industry

00:12:27,839 --> 00:12:32,560
the cto has no power so their job is to

00:12:30,639 --> 00:12:34,959
persuade the engineers to work

00:12:32,560 --> 00:12:35,600
bad ctos can't persuade end up getting

00:12:34,959 --> 00:12:38,160
fired

00:12:35,600 --> 00:12:39,760
good ctos who can persuade end up

00:12:38,160 --> 00:12:41,440
actually satisfying the goals of the

00:12:39,760 --> 00:12:42,639
company and getting big fat bonuses at

00:12:41,440 --> 00:12:44,800
the end of the year

00:12:42,639 --> 00:12:46,399
ctos don't do this alone they usually

00:12:44,800 --> 00:12:47,360
have a panel of architects or an office

00:12:46,399 --> 00:12:49,440
of the cto

00:12:47,360 --> 00:12:50,880
so a group of people who help them which

00:12:49,440 --> 00:12:52,399
actually in the benevolent dictator

00:12:50,880 --> 00:12:55,120
model tends to correspond

00:12:52,399 --> 00:12:56,800
to either the maintainers in linux or

00:12:55,120 --> 00:12:57,120
the cabal or whatever you want to call

00:12:56,800 --> 00:13:00,160
it

00:12:57,120 --> 00:13:01,760
but effectively it's a head model

00:13:00,160 --> 00:13:03,760
and a group that follows them and trying

00:13:01,760 --> 00:13:05,920
to get contributions and

00:13:03,760 --> 00:13:07,839
the reason it's so successful is because

00:13:05,920 --> 00:13:10,320
industry has been playing with this for

00:13:07,839 --> 00:13:11,600
you know decades and this is the best

00:13:10,320 --> 00:13:13,200
model they've come up with

00:13:11,600 --> 00:13:14,800
for actually getting productive work out

00:13:13,200 --> 00:13:16,800
of engineers so it's no

00:13:14,800 --> 00:13:18,000
accident that an open source it actually

00:13:16,800 --> 00:13:20,079
works very well

00:13:18,000 --> 00:13:21,360
also for running an open source project

00:13:20,079 --> 00:13:23,600
that doesn't mean it's the only

00:13:21,360 --> 00:13:25,040
pro only way you can run an open source

00:13:23,600 --> 00:13:27,120
project and there have been many

00:13:25,040 --> 00:13:29,200
interesting experiments to try that

00:13:27,120 --> 00:13:30,720
but it does mean the model is tried and

00:13:29,200 --> 00:13:32,000
trusted and actually works

00:13:30,720 --> 00:13:34,000
so if you're going to attack the

00:13:32,000 --> 00:13:35,959
benevolent dictator model you need to

00:13:34,000 --> 00:13:38,639
attack it from something else other than

00:13:35,959 --> 00:13:40,320
non-functionality

00:13:38,639 --> 00:13:42,720
like said it's well understood and well

00:13:40,320 --> 00:13:44,560
tested and one interesting thing is that

00:13:42,720 --> 00:13:45,199
python itself actually follows this

00:13:44,560 --> 00:13:47,199
model

00:13:45,199 --> 00:13:49,519
and guido van rossum recently stepped

00:13:47,199 --> 00:13:51,519
down so python will actually show us

00:13:49,519 --> 00:13:53,519
whether we can actually run this model

00:13:51,519 --> 00:13:55,600
with only a cabal and no benevolent

00:13:53,519 --> 00:13:56,320
dictator the jury is still out on that

00:13:55,600 --> 00:13:58,240
one but

00:13:56,320 --> 00:14:00,399
since the model is so similar it looks

00:13:58,240 --> 00:14:02,240
like it might actually work

00:14:00,399 --> 00:14:04,959
like you said other models are possible

00:14:02,240 --> 00:14:07,440
but none is so widely adopted

00:14:04,959 --> 00:14:09,360
so let's get into the quid pro quo trap

00:14:07,440 --> 00:14:11,920
um i will not be mentioning impeachment

00:14:09,360 --> 00:14:13,600
or anything going on in america here

00:14:11,920 --> 00:14:15,199
but i did choose the title because of

00:14:13,600 --> 00:14:16,800
that i'm sorry i just wanted to get a

00:14:15,199 --> 00:14:19,360
cheap laugh

00:14:16,800 --> 00:14:20,000
all projects that become popular in open

00:14:19,360 --> 00:14:22,000
source

00:14:20,000 --> 00:14:23,120
run into scaling issues there are no ifs

00:14:22,000 --> 00:14:25,600
ands and buts you go

00:14:23,120 --> 00:14:27,360
from linux tool valves this is my hobby

00:14:25,600 --> 00:14:29,839
project 0.01

00:14:27,360 --> 00:14:30,959
it's you know about 10 000 lines of code

00:14:29,839 --> 00:14:32,639
isn't it wonderful

00:14:30,959 --> 00:14:34,079
through oh my god i've got a load of

00:14:32,639 --> 00:14:36,079
contributions my

00:14:34,079 --> 00:14:37,839
wonderful project is now a million lines

00:14:36,079 --> 00:14:39,120
of code and half the people on the

00:14:37,839 --> 00:14:41,040
planet are using it

00:14:39,120 --> 00:14:42,639
and i have a huge problem accepting

00:14:41,040 --> 00:14:43,600
patches because so many people want to

00:14:42,639 --> 00:14:45,920
contribute

00:14:43,600 --> 00:14:46,639
so all projects go through successful

00:14:45,920 --> 00:14:49,040
projects

00:14:46,639 --> 00:14:50,880
go through a sort of please please

00:14:49,040 --> 00:14:52,800
contribute to my project please like me

00:14:50,880 --> 00:14:54,480
to uh oh my god what do i do with

00:14:52,800 --> 00:14:56,560
everybody liking me so much this is the

00:14:54,480 --> 00:14:59,279
scaling problem in open source

00:14:56,560 --> 00:15:01,279
and in linux the crisis point was

00:14:59,279 --> 00:15:03,760
actually reached in 2002 which is pretty

00:15:01,279 --> 00:15:04,560
good this is 11 years after the initial

00:15:03,760 --> 00:15:09,040
project

00:15:04,560 --> 00:15:11,120
uh started up till 2002

00:15:09,040 --> 00:15:12,639
every patch that went into linux and i

00:15:11,120 --> 00:15:13,519
believe you've seen greg crow hartman

00:15:12,639 --> 00:15:16,160
statistics

00:15:13,519 --> 00:15:17,600
telling you today about how many tens

00:15:16,160 --> 00:15:19,839
two were approaching hundreds of

00:15:17,600 --> 00:15:22,079
thousands of patches emerged by

00:15:19,839 --> 00:15:23,519
each release cycle every patch was

00:15:22,079 --> 00:15:25,120
emailed personally to leanness and

00:15:23,519 --> 00:15:27,199
personally integrated by him

00:15:25,120 --> 00:15:29,120
this gives you an idea given the patch

00:15:27,199 --> 00:15:30,160
volume we accept today of why this model

00:15:29,120 --> 00:15:31,680
just wouldn't scale

00:15:30,160 --> 00:15:33,519
and like you said the scaling point was

00:15:31,680 --> 00:15:34,880
reached in 2002 lena's just

00:15:33,519 --> 00:15:37,120
was starting to burn out and couldn't

00:15:34,880 --> 00:15:38,800
cope it was called the linus doesn't

00:15:37,120 --> 00:15:40,160
scale problem you can actually google

00:15:38,800 --> 00:15:42,959
for it

00:15:40,160 --> 00:15:45,199
and obviously we blamed linus because it

00:15:42,959 --> 00:15:48,079
was him not scaling it was his fault

00:15:45,199 --> 00:15:49,519
and he fixed it with tooling initially

00:15:48,079 --> 00:15:52,639
we had the somewhat interesting

00:15:49,519 --> 00:15:55,600
proprietary bit keeper episode in 2002

00:15:52,639 --> 00:15:56,320
but ultimately in 2005 the git tool was

00:15:55,600 --> 00:15:58,320
born

00:15:56,320 --> 00:16:00,160
and i remember those days very well

00:15:58,320 --> 00:16:01,279
because every kernel developer who was

00:16:00,160 --> 00:16:04,000
also a maintainer

00:16:01,279 --> 00:16:05,920
spent three months writing git it was

00:16:04,000 --> 00:16:06,560
somewhat of an interesting education for

00:16:05,920 --> 00:16:08,720
us

00:16:06,560 --> 00:16:10,240
so i think if you look deep in the

00:16:08,720 --> 00:16:12,399
bowels of git history

00:16:10,240 --> 00:16:13,759
somewhere in the git merge logic i've

00:16:12,399 --> 00:16:16,959
actually got several commits

00:16:13,759 --> 00:16:16,959
even as a kernel developer

00:16:17,360 --> 00:16:21,519
fixing the problem in the acceptance

00:16:19,759 --> 00:16:23,360
layer actually avoids the quid pro quo

00:16:21,519 --> 00:16:25,199
trap so linus didn't know it

00:16:23,360 --> 00:16:27,440
but the fact that we blamed him from the

00:16:25,199 --> 00:16:30,240
problem and he fixed it with tooling

00:16:27,440 --> 00:16:31,680
allowed linux itself to sidestep the

00:16:30,240 --> 00:16:34,639
quid pro quo trap

00:16:31,680 --> 00:16:37,199
so the trap is that once you run into

00:16:34,639 --> 00:16:38,320
the scaling problem the temptation is to

00:16:37,199 --> 00:16:40,399
flow control i mean

00:16:38,320 --> 00:16:42,720
you're all engineers everybody knows

00:16:40,399 --> 00:16:44,000
that if you've got a congestion problem

00:16:42,720 --> 00:16:45,839
you flow control it

00:16:44,000 --> 00:16:47,680
so the float the natural flow control

00:16:45,839 --> 00:16:49,839
you would think of is

00:16:47,680 --> 00:16:51,440
you know tap the source push back on the

00:16:49,839 --> 00:16:52,560
contributors try and slow down the

00:16:51,440 --> 00:16:54,959
contributions

00:16:52,560 --> 00:16:56,240
make the pipeline flow much more evenly

00:16:54,959 --> 00:16:58,079
and effectively

00:16:56,240 --> 00:17:00,000
the temptation therefore is to try and

00:16:58,079 --> 00:17:03,279
push the problem onto the contributors

00:17:00,000 --> 00:17:06,799
to raise barriers to contribution

00:17:03,279 --> 00:17:09,039
um so i've seen people say things like

00:17:06,799 --> 00:17:10,160
okay but my project has this huge

00:17:09,039 --> 00:17:11,679
problem with reviewing

00:17:10,160 --> 00:17:13,439
i'm not going to accept your patch

00:17:11,679 --> 00:17:14,799
unless i see two reviews from you this

00:17:13,439 --> 00:17:16,880
is a quid pro quo

00:17:14,799 --> 00:17:18,160
i am conditioning acceptance of your

00:17:16,880 --> 00:17:21,439
patch bribery

00:17:18,160 --> 00:17:23,280
on you doing two reviews

00:17:21,439 --> 00:17:24,880
openstack did this also for feature

00:17:23,280 --> 00:17:26,319
contributors

00:17:24,880 --> 00:17:28,400
one of the things that openstack was

00:17:26,319 --> 00:17:30,400
very keen on was sustainability

00:17:28,400 --> 00:17:32,240
and they believed that in order for a

00:17:30,400 --> 00:17:33,919
feature to have sustainability

00:17:32,240 --> 00:17:35,280
the actual contributor of the feature

00:17:33,919 --> 00:17:38,400
would have to demonstrate they would

00:17:35,280 --> 00:17:40,559
stick around and help maintain it

00:17:38,400 --> 00:17:42,000
in linus in linux we don't regard this

00:17:40,559 --> 00:17:43,760
as actually a truism

00:17:42,000 --> 00:17:45,679
as long as a feature is well written

00:17:43,760 --> 00:17:47,840
we're happy for anybody else to maintain

00:17:45,679 --> 00:17:49,600
it so we accept well written features

00:17:47,840 --> 00:17:51,039
we don't inquire into whether the person

00:17:49,600 --> 00:17:51,679
contributing the feature will stick

00:17:51,039 --> 00:17:53,520
around

00:17:51,679 --> 00:17:54,799
except for going through all of the code

00:17:53,520 --> 00:17:56,640
review process

00:17:54,799 --> 00:17:58,640
and having a nicely polished thing at

00:17:56,640 --> 00:18:01,360
the end of it

00:17:58,640 --> 00:18:03,520
but conditioning contributions on

00:18:01,360 --> 00:18:04,400
mandatory unrelated actions the quid pro

00:18:03,520 --> 00:18:07,120
quo

00:18:04,400 --> 00:18:09,039
makes contributors feel used you know it

00:18:07,120 --> 00:18:10,480
it feels like the project is stealing

00:18:09,039 --> 00:18:11,440
your free time you're not giving it

00:18:10,480 --> 00:18:12,960
voluntarily

00:18:11,440 --> 00:18:14,640
because you want to get this patch

00:18:12,960 --> 00:18:16,160
stream perhaps your employer has charged

00:18:14,640 --> 00:18:18,400
you to get this patch upstream

00:18:16,160 --> 00:18:19,440
so you have to satisfy this quid pro quo

00:18:18,400 --> 00:18:21,120
to get this to happen

00:18:19,440 --> 00:18:22,799
and it makes you feel very used and

00:18:21,120 --> 00:18:25,120
unhappy

00:18:22,799 --> 00:18:26,960
scaling problems must be solved in the

00:18:25,120 --> 00:18:27,520
acceptance layer they must be solved by

00:18:26,960 --> 00:18:29,760
tooling

00:18:27,520 --> 00:18:31,760
they must be sold by the maintainers if

00:18:29,760 --> 00:18:32,720
you push the scaling problem down onto

00:18:31,760 --> 00:18:34,080
the contributors

00:18:32,720 --> 00:18:35,919
you're setting your project up for

00:18:34,080 --> 00:18:37,600
failure eventually i mean it will

00:18:35,919 --> 00:18:39,360
chanter on for a long time

00:18:37,600 --> 00:18:41,520
perhaps it will be a popular project for

00:18:39,360 --> 00:18:43,919
a long time but the moment

00:18:41,520 --> 00:18:45,679
your popularity starts to wane as it did

00:18:43,919 --> 00:18:47,679
in the colonel a long time ago

00:18:45,679 --> 00:18:49,520
it's the moment that your contributors

00:18:47,679 --> 00:18:50,400
will start to remember all of the wrongs

00:18:49,520 --> 00:18:52,240
you've done to them

00:18:50,400 --> 00:18:54,320
and start to move off onto the trendier

00:18:52,240 --> 00:18:56,400
projects if you want to keep

00:18:54,320 --> 00:18:59,039
a committed contributor base you need to

00:18:56,400 --> 00:18:59,039
treat them well

00:18:59,120 --> 00:19:05,120
so another problem in open source is

00:19:02,080 --> 00:19:07,440
something called the origin problem

00:19:05,120 --> 00:19:08,480
open source is a purely pragmatic

00:19:07,440 --> 00:19:10,720
exercise

00:19:08,480 --> 00:19:11,919
so in some ways i would argue the

00:19:10,720 --> 00:19:14,080
differentiator between

00:19:11,919 --> 00:19:15,840
open source and free software is the

00:19:14,080 --> 00:19:18,080
motivation for contribution

00:19:15,840 --> 00:19:19,440
in free software in theory to make a

00:19:18,080 --> 00:19:20,640
contribution you're supposed to

00:19:19,440 --> 00:19:22,320
subscribe to the

00:19:20,640 --> 00:19:24,400
say the four freedoms or the principles

00:19:22,320 --> 00:19:25,600
of the software open source makes no

00:19:24,400 --> 00:19:27,200
such requirement

00:19:25,600 --> 00:19:29,679
one of the interesting things about open

00:19:27,200 --> 00:19:31,360
source is that the four freedoms tend to

00:19:29,679 --> 00:19:32,240
appear naturally even though we don't

00:19:31,360 --> 00:19:34,720
require them

00:19:32,240 --> 00:19:36,400
so there is no real daylight between the

00:19:34,720 --> 00:19:37,039
open source position the free software

00:19:36,400 --> 00:19:39,039
position

00:19:37,039 --> 00:19:41,200
as bruce parents will often tell you but

00:19:39,039 --> 00:19:42,880
the pragmatism in open source

00:19:41,200 --> 00:19:44,320
means that all contributions should be

00:19:42,880 --> 00:19:46,799
considered on their merit

00:19:44,320 --> 00:19:48,320
there are no real ways around this this

00:19:46,799 --> 00:19:50,080
i realize is contra

00:19:48,320 --> 00:19:51,919
contrary to the post-meritocracy

00:19:50,080 --> 00:19:53,440
movement nowadays that wants you to

00:19:51,919 --> 00:19:54,480
consider the origin of the contra

00:19:53,440 --> 00:19:55,760
contribution

00:19:54,480 --> 00:19:57,600
but the problem you're setting

00:19:55,760 --> 00:19:59,919
yourselves up for is origin

00:19:57,600 --> 00:20:02,400
consideration is a very slippery slope

00:19:59,919 --> 00:20:04,320
so fine you may suddenly prefer code

00:20:02,400 --> 00:20:04,960
from underrepresented minorities as a

00:20:04,320 --> 00:20:06,480
way of

00:20:04,960 --> 00:20:08,799
sort of it's like affirmative action you

00:20:06,480 --> 00:20:09,600
may prefer code from underrepresented

00:20:08,799 --> 00:20:11,520
minorities

00:20:09,600 --> 00:20:14,240
but once you start inquiring into the

00:20:11,520 --> 00:20:15,600
origins there are a whole load of semia

00:20:14,240 --> 00:20:17,760
origins that you might

00:20:15,600 --> 00:20:19,760
not like as much and if that starts to

00:20:17,760 --> 00:20:21,600
weigh into your judgment of the code

00:20:19,760 --> 00:20:23,120
you've started to tie the project to

00:20:21,600 --> 00:20:24,880
your own personal attitudes

00:20:23,120 --> 00:20:27,600
people will notice and eventually blame

00:20:24,880 --> 00:20:29,520
you for it this is the origin trap

00:20:27,600 --> 00:20:31,600
not falling into that trap means being

00:20:29,520 --> 00:20:34,720
ruthless about considering contributions

00:20:31,600 --> 00:20:38,159
solely on merit

00:20:34,720 --> 00:20:40,159
and regardless of where they came from

00:20:38,159 --> 00:20:41,600
inquiring why someone wants to submit a

00:20:40,159 --> 00:20:44,320
patch which their motivation

00:20:41,600 --> 00:20:46,480
is leads to this problem and it leads to

00:20:44,320 --> 00:20:48,480
a very slippery slope and eventually

00:20:46,480 --> 00:20:49,679
your project can stand a good chance of

00:20:48,480 --> 00:20:51,760
dying because of it

00:20:49,679 --> 00:20:53,520
eventually all of the contributors if

00:20:51,760 --> 00:20:55,039
you inquire too deeply into the origins

00:20:53,520 --> 00:20:56,799
will end up looking like you

00:20:55,039 --> 00:20:58,640
because you like people who look like

00:20:56,799 --> 00:21:00,000
you and if you can inquire into their

00:20:58,640 --> 00:21:01,919
origins you tend to

00:21:00,000 --> 00:21:03,679
subconsciously bias towards them and

00:21:01,919 --> 00:21:07,440
eventually they will all look like you

00:21:03,679 --> 00:21:08,320
which is bad and wrong not considering

00:21:07,440 --> 00:21:10,559
motivation

00:21:08,320 --> 00:21:12,880
actually allows us to have a much

00:21:10,559 --> 00:21:14,559
diverse base of contributors

00:21:12,880 --> 00:21:17,200
and it allows differently motivated

00:21:14,559 --> 00:21:19,039
people to collaborate that doesn't mean

00:21:17,200 --> 00:21:20,880
that it works perfectly it obviously

00:21:19,039 --> 00:21:23,919
doesn't the linux kernel

00:21:20,880 --> 00:21:25,600
is still 95 white and male and there are

00:21:23,919 --> 00:21:28,000
several reasons for that

00:21:25,600 --> 00:21:28,960
the boy culture that we had going on in

00:21:28,000 --> 00:21:30,880
the sort of

00:21:28,960 --> 00:21:32,720
early part of this millennium was a

00:21:30,880 --> 00:21:35,600
significant factor of that

00:21:32,720 --> 00:21:37,520
but the point here is that we have

00:21:35,600 --> 00:21:38,480
deployed other means for controlling

00:21:37,520 --> 00:21:41,039
this problem

00:21:38,480 --> 00:21:42,159
besides inquiring into the origin and

00:21:41,039 --> 00:21:44,480
these other means

00:21:42,159 --> 00:21:46,240
seem to be working reasonably well we

00:21:44,480 --> 00:21:48,159
get no credit for it we're always held

00:21:46,240 --> 00:21:50,240
up as the poster child for the most

00:21:48,159 --> 00:21:52,559
horrible open source ecosystem

00:21:50,240 --> 00:21:54,320
but in fact things have become much more

00:21:52,559 --> 00:21:55,200
civil and much politer on the linux

00:21:54,320 --> 00:21:57,039
kernel list

00:21:55,200 --> 00:21:58,240
since we started to take this project

00:21:57,039 --> 00:22:00,720
problem seriously

00:21:58,240 --> 00:22:03,039
and we've done it without really in

00:22:00,720 --> 00:22:04,880
inquiring into the origin of the patches

00:22:03,039 --> 00:22:06,640
we've done it with the help of a lot of

00:22:04,880 --> 00:22:09,120
dedicated people who sit around the

00:22:06,640 --> 00:22:11,600
project doing things like outreachy

00:22:09,120 --> 00:22:12,400
and google summer of code and colonel

00:22:11,600 --> 00:22:15,919
newbies

00:22:12,400 --> 00:22:17,679
and contribution prod pro projects

00:22:15,919 --> 00:22:19,760
that are actually designed to pull a

00:22:17,679 --> 00:22:20,640
wide and diverse body of people into a

00:22:19,760 --> 00:22:23,760
project

00:22:20,640 --> 00:22:24,960
diversity by the way is key to a project

00:22:23,760 --> 00:22:27,600
surviving

00:22:24,960 --> 00:22:28,960
in order to explore the true problem

00:22:27,600 --> 00:22:30,799
space of what you're trying to do

00:22:28,960 --> 00:22:32,080
in something as complex as an operating

00:22:30,799 --> 00:22:33,760
system you need

00:22:32,080 --> 00:22:35,200
people who will look at problems from

00:22:33,760 --> 00:22:37,200
very different angles

00:22:35,200 --> 00:22:39,440
that means you need a diversity of

00:22:37,200 --> 00:22:41,520
viewpoints once you get a monoculture

00:22:39,440 --> 00:22:43,120
you won't explore the problem properly

00:22:41,520 --> 00:22:44,799
your solution will be wrong and

00:22:43,120 --> 00:22:45,600
eventually everybody will move away from

00:22:44,799 --> 00:22:47,600
your project

00:22:45,600 --> 00:22:49,440
so diversity is actually key to

00:22:47,600 --> 00:22:51,520
sustainability and open source

00:22:49,440 --> 00:22:54,480
it's just that you can't fix diversity

00:22:51,520 --> 00:22:57,039
by inquiring into origins

00:22:54,480 --> 00:22:57,760
obviously not inquiring into origins and

00:22:57,039 --> 00:22:59,919
having

00:22:57,760 --> 00:23:01,840
a load of mechanisms around it to pull

00:22:59,919 --> 00:23:04,320
lots of people in helps to keep abroad

00:23:01,840 --> 00:23:08,159
contributor base

00:23:04,320 --> 00:23:10,320
so dealing with corporations

00:23:08,159 --> 00:23:12,559
corporations nowadays are coming to

00:23:10,320 --> 00:23:14,320
dominate open source

00:23:12,559 --> 00:23:16,480
what i'm going to do is go back to

00:23:14,320 --> 00:23:17,600
through the linux a small amount of the

00:23:16,480 --> 00:23:19,440
linux history

00:23:17,600 --> 00:23:20,720
of dealing with corporations because it

00:23:19,440 --> 00:23:22,799
was very messy

00:23:20,720 --> 00:23:24,320
and i was involved very deeply in doing

00:23:22,799 --> 00:23:26,720
that

00:23:24,320 --> 00:23:29,360
but sad fact nowadays is that a

00:23:26,720 --> 00:23:31,760
significant amount of open source code

00:23:29,360 --> 00:23:32,480
originates in companies and not all

00:23:31,760 --> 00:23:34,159
companies

00:23:32,480 --> 00:23:36,080
have the best interest of the community

00:23:34,159 --> 00:23:38,320
at heart and indeed if you actually

00:23:36,080 --> 00:23:39,760
consider it no company has the interest

00:23:38,320 --> 00:23:43,600
of the community at heart

00:23:39,760 --> 00:23:45,440
unless there is as i think denise said

00:23:43,600 --> 00:23:46,799
a sort of greed alignment between what

00:23:45,440 --> 00:23:49,440
the company is doing

00:23:46,799 --> 00:23:51,520
and what um the open source project is

00:23:49,440 --> 00:23:54,480
going to achieve

00:23:51,520 --> 00:23:55,279
corporations only act in their best

00:23:54,480 --> 00:23:58,320
interests

00:23:55,279 --> 00:23:59,760
this is a truism their object is to make

00:23:58,320 --> 00:24:02,480
money it doesn't matter

00:23:59,760 --> 00:24:03,039
how many you know codes of conduct they

00:24:02,480 --> 00:24:05,120
have

00:24:03,039 --> 00:24:06,559
how many sort of altruistic statements

00:24:05,120 --> 00:24:08,320
they make to their board

00:24:06,559 --> 00:24:09,919
if a corporation is not making money

00:24:08,320 --> 00:24:12,000
it's not going to survive and eventually

00:24:09,919 --> 00:24:14,799
the stock market will ensure it's killed

00:24:12,000 --> 00:24:15,600
making money is key above all other

00:24:14,799 --> 00:24:18,000
things

00:24:15,600 --> 00:24:21,120
and this is why corporations always act

00:24:18,000 --> 00:24:22,960
with selfish motivation

00:24:21,120 --> 00:24:24,720
all of their engagements are

00:24:22,960 --> 00:24:26,640
transactional

00:24:24,720 --> 00:24:28,000
i presume since we're in the age of

00:24:26,640 --> 00:24:30,559
trump i don't have to explain

00:24:28,000 --> 00:24:32,559
transactionalism it's basically

00:24:30,559 --> 00:24:34,720
having short-term goals instead of

00:24:32,559 --> 00:24:37,760
long-term goals

00:24:34,720 --> 00:24:39,440
and if the business goal changes the

00:24:37,760 --> 00:24:41,360
corporation can easily move away from

00:24:39,440 --> 00:24:42,880
the project if the priorities change

00:24:41,360 --> 00:24:44,480
they will drop you like a hot brick and

00:24:42,880 --> 00:24:45,679
move on to whatever it is the priority

00:24:44,480 --> 00:24:47,679
is just moved for

00:24:45,679 --> 00:24:49,440
and you won't be able to avoid this so

00:24:47,679 --> 00:24:51,760
you just have to prepare for it it will

00:24:49,440 --> 00:24:54,320
happen

00:24:51,760 --> 00:24:57,360
so corporations are the archetypal

00:24:54,320 --> 00:24:57,360
selfish contributor

00:24:57,760 --> 00:25:01,440
and this selfish contribution problem

00:25:00,320 --> 00:25:05,840
generated

00:25:01,440 --> 00:25:08,000
in sort of the 2005-4 time frame

00:25:05,840 --> 00:25:09,200
some of the biggest scaling problems we

00:25:08,000 --> 00:25:11,039
actually had in linux

00:25:09,200 --> 00:25:12,799
when linux became interesting to

00:25:11,039 --> 00:25:16,559
corporations we had

00:25:12,799 --> 00:25:19,440
really really huge problems the sad fact

00:25:16,559 --> 00:25:21,039
is that selfishness does not always

00:25:19,440 --> 00:25:21,600
produce the best solution for the

00:25:21,039 --> 00:25:24,159
problem

00:25:21,600 --> 00:25:24,880
in theory a selfish selfishly motivated

00:25:24,159 --> 00:25:26,960
person

00:25:24,880 --> 00:25:28,000
should be doing the best thing for them

00:25:26,960 --> 00:25:29,679
but the sad

00:25:28,000 --> 00:25:31,039
fact is that most of the time they're

00:25:29,679 --> 00:25:33,279
not what they think

00:25:31,039 --> 00:25:36,159
is the best thing for them is really not

00:25:33,279 --> 00:25:36,159
the best thing for them

00:25:36,559 --> 00:25:41,760
so part of the job of actually

00:25:39,919 --> 00:25:44,480
doing great alignment between

00:25:41,760 --> 00:25:47,039
corporations individuals and projects

00:25:44,480 --> 00:25:49,120
is actually trying to work out what a

00:25:47,039 --> 00:25:49,840
better selfish motivation for a company

00:25:49,120 --> 00:25:52,240
would be

00:25:49,840 --> 00:25:54,240
and persuading them of it this is why

00:25:52,240 --> 00:25:56,559
open source people who can actually make

00:25:54,240 --> 00:25:58,080
the transition to the corporate world

00:25:56,559 --> 00:25:59,600
usually with the thigh-length waiters

00:25:58,080 --> 00:26:00,320
because you have so much to deal

00:25:59,600 --> 00:26:03,760
with it's not

00:26:00,320 --> 00:26:06,000
true if you can explain

00:26:03,760 --> 00:26:07,760
to the ceo the marketing department and

00:26:06,000 --> 00:26:10,240
the business development people

00:26:07,760 --> 00:26:12,080
why the corporate attitude to open

00:26:10,240 --> 00:26:12,799
source needs to change why the greed

00:26:12,080 --> 00:26:15,039
needs to be

00:26:12,799 --> 00:26:17,200
realigned and how this will actually

00:26:15,039 --> 00:26:18,880
help all of the short-term goals

00:26:17,200 --> 00:26:20,400
they'll love you for it and they will

00:26:18,880 --> 00:26:21,120
actually change the business model of

00:26:20,400 --> 00:26:23,360
the company

00:26:21,120 --> 00:26:24,559
in order to take advantage of it the key

00:26:23,360 --> 00:26:27,120
is persuading them

00:26:24,559 --> 00:26:29,120
that what you're doing now may be what

00:26:27,120 --> 00:26:31,520
you think is in your own best interest

00:26:29,120 --> 00:26:33,200
but if you just did x y and z it will

00:26:31,520 --> 00:26:33,840
produce a much better result for the

00:26:33,200 --> 00:26:36,000
business

00:26:33,840 --> 00:26:37,360
and therefore is much more within the

00:26:36,000 --> 00:26:40,240
corporate interest

00:26:37,360 --> 00:26:41,440
understanding selfish motivations and so

00:26:40,240 --> 00:26:44,240
this is the key

00:26:41,440 --> 00:26:46,000
being somebody who is capable of seeing

00:26:44,240 --> 00:26:47,600
a better selfish motivation

00:26:46,000 --> 00:26:49,279
when the people who are supposed to be

00:26:47,600 --> 00:26:51,520
the ones who understand it i mean

00:26:49,279 --> 00:26:53,039
you don't get to be a ceo and a vp by

00:26:51,520 --> 00:26:55,120
not understanding how to align your

00:26:53,039 --> 00:26:56,799
company correctly

00:26:55,120 --> 00:26:58,640
you have to explain to them why the

00:26:56,799 --> 00:26:59,840
alignment is wrong and how it could

00:26:58,640 --> 00:27:02,240
actually work better

00:26:59,840 --> 00:27:06,400
and to do this you need to be virtuoso

00:27:02,240 --> 00:27:08,720
in understanding selfish motivations

00:27:06,400 --> 00:27:09,600
like i said you have to work out what is

00:27:08,720 --> 00:27:12,000
in the best

00:27:09,600 --> 00:27:12,880
interest of the contributor the company

00:27:12,000 --> 00:27:14,400
whatever

00:27:12,880 --> 00:27:15,840
simply because some of the actions

00:27:14,400 --> 00:27:17,200
they're taking are often not in their

00:27:15,840 --> 00:27:20,240
best interest

00:27:17,200 --> 00:27:22,799
um i could go into lots of

00:27:20,240 --> 00:27:24,159
a tragedy of the commons details but

00:27:22,799 --> 00:27:25,520
i'll just leave you with the truffle

00:27:24,159 --> 00:27:27,600
hunting one

00:27:25,520 --> 00:27:29,440
i've already explained that pigs make

00:27:27,600 --> 00:27:31,120
far better truffle hunters than dogs

00:27:29,440 --> 00:27:32,559
and if americans could learn to love

00:27:31,120 --> 00:27:34,080
pigs

00:27:32,559 --> 00:27:35,440
i would actually have a much steadier

00:27:34,080 --> 00:27:36,320
supply of truffles in the pacific

00:27:35,440 --> 00:27:38,480
northwest

00:27:36,320 --> 00:27:40,399
but americans are firmly of the opinion

00:27:38,480 --> 00:27:43,039
that pigs are wrong and

00:27:40,399 --> 00:27:43,760
dogs are right but the problem is if you

00:27:43,039 --> 00:27:46,159
let a pig

00:27:43,760 --> 00:27:47,440
into a truffle orchard uncontrolled it

00:27:46,159 --> 00:27:49,120
will first of all dig up all the

00:27:47,440 --> 00:27:50,799
truffles then it will eat them all

00:27:49,120 --> 00:27:52,559
and then it will grub up your orchard as

00:27:50,799 --> 00:27:54,480
it tries to find more and more truffles

00:27:52,559 --> 00:27:56,080
it will destroy the thing that your

00:27:54,480 --> 00:27:58,320
livelihood depends on

00:27:56,080 --> 00:27:59,200
controlling the greedy interests of the

00:27:58,320 --> 00:28:01,520
pig

00:27:59,200 --> 00:28:03,120
is a necessity if you want to be a

00:28:01,520 --> 00:28:05,200
professional truffle hunter

00:28:03,120 --> 00:28:07,520
harnessing the greedy motivation is one

00:28:05,200 --> 00:28:09,600
side of it but controlling the excesses

00:28:07,520 --> 00:28:11,279
and persuading the pig that actually

00:28:09,600 --> 00:28:12,640
if you just find me a load of truffles

00:28:11,279 --> 00:28:13,279
i'll take you to new truffle hunting

00:28:12,640 --> 00:28:14,640
ground i'll

00:28:13,279 --> 00:28:16,320
feed you three truffles a day or

00:28:14,640 --> 00:28:17,760
whatever i will keep my fingers firmly

00:28:16,320 --> 00:28:19,520
out of the way of your mouth

00:28:17,760 --> 00:28:21,039
and that way we will have a nice

00:28:19,520 --> 00:28:23,120
symbiotic relationship

00:28:21,039 --> 00:28:24,399
whereas if you escape and grub up my

00:28:23,120 --> 00:28:26,320
orchard i'm going to send you to the

00:28:24,399 --> 00:28:30,240
bacon factory right this is the way that

00:28:26,320 --> 00:28:32,799
we actually teach the pigs

00:28:30,240 --> 00:28:34,799
and obviously you have to work out what

00:28:32,799 --> 00:28:36,799
is really in the best interest of this

00:28:34,799 --> 00:28:38,960
contributor this company whatever

00:28:36,799 --> 00:28:40,399
and persuade them that it is actually in

00:28:38,960 --> 00:28:41,279
their best interest this is a hugely

00:28:40,399 --> 00:28:45,039
tall order

00:28:41,279 --> 00:28:45,679
i can remember back in 2005 as sort of a

00:28:45,039 --> 00:28:47,679
fairly

00:28:45,679 --> 00:28:49,440
i wasn't such a junior developer but i

00:28:47,679 --> 00:28:50,320
had no ex real experience of a

00:28:49,440 --> 00:28:52,159
corporation

00:28:50,320 --> 00:28:53,600
i just become vice president of a

00:28:52,159 --> 00:28:55,679
startup company which

00:28:53,600 --> 00:28:57,360
as any large corporation will tell you

00:28:55,679 --> 00:29:00,080
is no experience at all

00:28:57,360 --> 00:29:01,279
and i had to go and explain to sort of

00:29:00,080 --> 00:29:04,080
people high up in

00:29:01,279 --> 00:29:06,399
ibm and hp and all of these sort of open

00:29:04,080 --> 00:29:09,200
source loomers who'd started osdl

00:29:06,399 --> 00:29:10,640
why what they were doing was wrong and i

00:29:09,200 --> 00:29:11,360
got to say it was a very daunting

00:29:10,640 --> 00:29:13,120
prospect

00:29:11,360 --> 00:29:14,480
but learning how to do this is an

00:29:13,120 --> 00:29:16,399
essential

00:29:14,480 --> 00:29:18,320
feature of somebody who wants to

00:29:16,399 --> 00:29:20,960
actually get deeply into open source

00:29:18,320 --> 00:29:22,480
politics and motivations

00:29:20,960 --> 00:29:24,559
the big problem was with the

00:29:22,480 --> 00:29:26,000
corporations they wanted to treat linux

00:29:24,559 --> 00:29:28,000
exactly as unix so they had this

00:29:26,000 --> 00:29:29,840
model of how unix operators they just

00:29:28,000 --> 00:29:30,640
wanted linux to operate in exactly the

00:29:29,840 --> 00:29:32,159
same way

00:29:30,640 --> 00:29:34,000
because then that model of how they

00:29:32,159 --> 00:29:35,919
build stuff would just transfer over

00:29:34,000 --> 00:29:37,679
and nobody needs to be retrained the

00:29:35,919 --> 00:29:39,039
most expensive thing in industry is

00:29:37,679 --> 00:29:40,240
retraining and they really didn't want

00:29:39,039 --> 00:29:43,200
to do this

00:29:40,240 --> 00:29:44,960
so obviously they demanded a stable abi

00:29:43,200 --> 00:29:47,279
and they worked with the distributions

00:29:44,960 --> 00:29:49,200
not the upstream to get their code in

00:29:47,279 --> 00:29:51,120
the result of this was that by the end

00:29:49,200 --> 00:29:53,600
of the 2-4 kernel cycle

00:29:51,120 --> 00:29:55,120
all every distribution this is red hats

00:29:53,600 --> 00:29:56,559
who say i think ubuntu was a bit

00:29:55,120 --> 00:29:57,279
fledgling by then so it didn't really

00:29:56,559 --> 00:30:00,159
exist but

00:29:57,279 --> 00:30:00,799
at least red hat and suse had a patch to

00:30:00,159 --> 00:30:02,320
linux

00:30:00,799 --> 00:30:04,559
that was actually bigger than linux

00:30:02,320 --> 00:30:06,480
itself at the end of the 2-4 cycle

00:30:04,559 --> 00:30:07,600
just because of all the perversions that

00:30:06,480 --> 00:30:10,159
corporations had

00:30:07,600 --> 00:30:12,480
forced upon them this is where upstream

00:30:10,159 --> 00:30:14,159
first came from because it turned out

00:30:12,480 --> 00:30:15,919
that in those days we were actually

00:30:14,159 --> 00:30:16,799
doing a twin track development model of

00:30:15,919 --> 00:30:18,799
2-4

00:30:16,799 --> 00:30:20,080
was the stable branch and 2-5 was going

00:30:18,799 --> 00:30:20,720
to be the new branch and it actually

00:30:20,080 --> 00:30:23,039
took us

00:30:20,720 --> 00:30:24,640
two years to produce two five by the

00:30:23,039 --> 00:30:26,480
time two five came out

00:30:24,640 --> 00:30:27,760
the distributions just could not adopt

00:30:26,480 --> 00:30:28,240
it with all the back ports they had to

00:30:27,760 --> 00:30:30,720
do

00:30:28,240 --> 00:30:33,120
it became an impossible problem and it's

00:30:30,720 --> 00:30:35,440
where persuading the corporations

00:30:33,120 --> 00:30:37,520
that actually working with the upstream

00:30:35,440 --> 00:30:38,000
would mean they didn't face this cliff

00:30:37,520 --> 00:30:39,440
edge

00:30:38,000 --> 00:30:41,600
every couple of years because that was

00:30:39,440 --> 00:30:44,880
going to be our release cycle

00:30:41,600 --> 00:30:46,640
and actually having a stable mechanism

00:30:44,880 --> 00:30:49,120
for contributing to linux

00:30:46,640 --> 00:30:50,000
ongoing a sustainable mechanism would

00:30:49,120 --> 00:30:51,840
actually be much

00:30:50,000 --> 00:30:53,120
better for their customers rather than

00:30:51,840 --> 00:30:54,880
them having to scramble and their

00:30:53,120 --> 00:30:56,320
customers demanding to know why with all

00:30:54,880 --> 00:30:58,640
these security bugs

00:30:56,320 --> 00:31:00,640
are we not on the 2-5 kernel or the 2-6

00:30:58,640 --> 00:31:02,320
kernel which was a stable successor that

00:31:00,640 --> 00:31:03,039
came out a year ago why are we still on

00:31:02,320 --> 00:31:06,480
2-4

00:31:03,039 --> 00:31:06,480
answer because we can't up-port

00:31:07,039 --> 00:31:10,880
the point is that in order to give all

00:31:09,039 --> 00:31:12,159
these talks that i did in sort of the

00:31:10,880 --> 00:31:14,080
early 2000s

00:31:12,159 --> 00:31:16,080
i had to understand all of the

00:31:14,080 --> 00:31:18,399
motivations of the corporations

00:31:16,080 --> 00:31:19,440
and try and persuade them why what they

00:31:18,399 --> 00:31:21,120
were doing was wrong

00:31:19,440 --> 00:31:22,640
and remember what they were doing is

00:31:21,120 --> 00:31:25,440
what they'd always done for unix

00:31:22,640 --> 00:31:27,200
i mean they'd done this for 20 years why

00:31:25,440 --> 00:31:29,279
the hell doesn't it work for linux this

00:31:27,200 --> 00:31:30,399
is the question they kept on asking over

00:31:29,279 --> 00:31:31,679
and over again

00:31:30,399 --> 00:31:33,840
i mean the answer is obvious it's

00:31:31,679 --> 00:31:34,399
because linux is different it's open

00:31:33,840 --> 00:31:36,240
source

00:31:34,399 --> 00:31:38,399
and the development model is radically

00:31:36,240 --> 00:31:40,720
different from the proprietary unix one

00:31:38,399 --> 00:31:42,080
and oh by the way the reason you want to

00:31:40,720 --> 00:31:44,159
contribute to linux

00:31:42,080 --> 00:31:46,000
is because it offers the hope of a much

00:31:44,159 --> 00:31:46,960
more stable operating system base for

00:31:46,000 --> 00:31:49,039
your customers

00:31:46,960 --> 00:31:50,960
than all of the proprietary unices that

00:31:49,039 --> 00:31:52,480
are currently at war with each other

00:31:50,960 --> 00:31:54,720
over what they should be doing to

00:31:52,480 --> 00:31:58,640
actually capture more market share

00:31:54,720 --> 00:32:01,120
and eventually corporations listened

00:31:58,640 --> 00:32:03,519
the linux foundation was born and we

00:32:01,120 --> 00:32:05,120
actually managed to enforce the upstream

00:32:03,519 --> 00:32:05,679
first policy on the distributions we

00:32:05,120 --> 00:32:08,080
actually

00:32:05,679 --> 00:32:08,880
formed a coalition of corporations

00:32:08,080 --> 00:32:12,320
interested

00:32:08,880 --> 00:32:15,279
uh maintainers uh distributions

00:32:12,320 --> 00:32:16,960
and the like to actually force every

00:32:15,279 --> 00:32:18,240
company that came to linux to work with

00:32:16,960 --> 00:32:19,760
upstream first

00:32:18,240 --> 00:32:23,120
if your patch wasn't upstream the

00:32:19,760 --> 00:32:23,120
distribution would not take it

00:32:23,919 --> 00:32:28,080
so we get on to the biggest problem in

00:32:27,360 --> 00:32:30,559
linux

00:32:28,080 --> 00:32:32,159
managing communities effectively how

00:32:30,559 --> 00:32:34,640
would you become a cat herder if you

00:32:32,159 --> 00:32:34,640
wanted to

00:32:35,039 --> 00:32:39,039
a key goal of any community manager is

00:32:38,080 --> 00:32:42,000
to ensure

00:32:39,039 --> 00:32:43,760
that selfish contribution is enabled and

00:32:42,000 --> 00:32:45,919
you can do this by avoiding the origin

00:32:43,760 --> 00:32:48,960
trap not asking for a quid pro quo

00:32:45,919 --> 00:32:51,360
and actually generally just assessing

00:32:48,960 --> 00:32:53,360
the code on its merits i mean if there's

00:32:51,360 --> 00:32:55,039
a mismatch between what the code does

00:32:53,360 --> 00:32:56,559
and what the project would like it to do

00:32:55,039 --> 00:32:58,240
you can still discuss it

00:32:56,559 --> 00:32:59,760
you can explain the engineering reasons

00:32:58,240 --> 00:33:01,360
why it would look better this way

00:32:59,760 --> 00:33:02,720
the contributor may or may not listen

00:33:01,360 --> 00:33:03,279
but if they listen you get something

00:33:02,720 --> 00:33:04,640
better

00:33:03,279 --> 00:33:06,399
and if they don't listen perhaps they'll

00:33:04,640 --> 00:33:09,120
go away and develop another project

00:33:06,399 --> 00:33:10,000
so there is still the argi bhaji over

00:33:09,120 --> 00:33:12,480
technical vision

00:33:10,000 --> 00:33:13,919
for the project and we'll always have

00:33:12,480 --> 00:33:16,480
discussions about this

00:33:13,919 --> 00:33:17,039
but enabling selfish contributors is a

00:33:16,480 --> 00:33:20,320
key

00:33:17,039 --> 00:33:22,320
job of any community manager

00:33:20,320 --> 00:33:24,159
and you have to make selfish

00:33:22,320 --> 00:33:26,799
contributors feel welcome

00:33:24,159 --> 00:33:28,640
even if you know because you've examined

00:33:26,799 --> 00:33:30,960
the business goals of this company

00:33:28,640 --> 00:33:32,000
that once they've dropped this embedded

00:33:30,960 --> 00:33:33,519
prod product

00:33:32,000 --> 00:33:35,120
that they need to get patches upstream

00:33:33,519 --> 00:33:36,720
in the linux kernel for they're just

00:33:35,120 --> 00:33:38,399
going to drop it and disappear off and

00:33:36,720 --> 00:33:39,440
do some other iot thing that's going to

00:33:38,399 --> 00:33:42,880
be totally different

00:33:39,440 --> 00:33:44,880
possibly based on vx works so you know

00:33:42,880 --> 00:33:46,880
there is a finite timeline to their

00:33:44,880 --> 00:33:48,559
contribution that's still not a good

00:33:46,880 --> 00:33:51,039
reason for not accepting the code

00:33:48,559 --> 00:33:52,399
if the code works and is good and can be

00:33:51,039 --> 00:33:55,039
made to work for other people

00:33:52,399 --> 00:33:55,840
it should be accepted even if the

00:33:55,039 --> 00:33:58,240
contribution

00:33:55,840 --> 00:33:59,440
is selfish and time limited the code

00:33:58,240 --> 00:34:01,039
should still be accepted

00:33:59,440 --> 00:34:03,200
and the contributor should be made

00:34:01,039 --> 00:34:03,600
welcome doing it you don't make them

00:34:03,200 --> 00:34:05,200
feel

00:34:03,600 --> 00:34:06,720
they're working for this shitty company

00:34:05,200 --> 00:34:07,200
who's just going to drop linux and move

00:34:06,720 --> 00:34:09,839
on

00:34:07,200 --> 00:34:11,599
you make them feel that while they are

00:34:09,839 --> 00:34:13,040
actually contributing patches

00:34:11,599 --> 00:34:14,560
and going through the process of trying

00:34:13,040 --> 00:34:16,000
to get it upstream they are valued

00:34:14,560 --> 00:34:17,440
members of our community

00:34:16,000 --> 00:34:19,440
they choose to leave it later that will

00:34:17,440 --> 00:34:20,399
be their own choice but while they're

00:34:19,440 --> 00:34:24,079
contributing

00:34:20,399 --> 00:34:25,839
they're valued and obviously like i said

00:34:24,079 --> 00:34:27,839
the contribution has to be made

00:34:25,839 --> 00:34:30,079
acceptable to the company there are no

00:34:27,839 --> 00:34:32,079
ifs and made acceptable to the project

00:34:30,079 --> 00:34:34,399
there are no ifs and buts about this

00:34:32,079 --> 00:34:35,919
the contribution can't be maintained

00:34:34,399 --> 00:34:37,520
your project will just become an

00:34:35,919 --> 00:34:40,480
unmaintainable mess

00:34:37,520 --> 00:34:42,560
as linus often says it's all about taste

00:34:40,480 --> 00:34:43,280
finding maintainers who actually have

00:34:42,560 --> 00:34:46,079
taste

00:34:43,280 --> 00:34:48,560
and who will actually deploy that taste

00:34:46,079 --> 00:34:49,760
when accepting contributions is the key

00:34:48,560 --> 00:34:51,440
to ensuring

00:34:49,760 --> 00:34:54,240
the kernel itself does not become

00:34:51,440 --> 00:34:54,240
unmaintainable

00:34:54,800 --> 00:34:58,400
and as i think i've said about 15 times

00:34:57,599 --> 00:35:00,640
now

00:34:58,400 --> 00:35:02,560
understanding selfish motivations is

00:35:00,640 --> 00:35:04,160
vital for all of these tasks

00:35:02,560 --> 00:35:06,400
if you don't understand the selfish

00:35:04,160 --> 00:35:07,280
motivation for why this person is doing

00:35:06,400 --> 00:35:08,960
what they're doing

00:35:07,280 --> 00:35:10,960
you're at a disadvantage in trying to

00:35:08,960 --> 00:35:12,960
persuade them when persuasion is

00:35:10,960 --> 00:35:14,320
necessary that if they just modified the

00:35:12,960 --> 00:35:16,320
patch slightly you'll be much more

00:35:14,320 --> 00:35:18,640
acceptable to the project

00:35:16,320 --> 00:35:19,440
so one of the jobs that all of you

00:35:18,640 --> 00:35:21,839
should look at

00:35:19,440 --> 00:35:23,280
is can you actually understand selfish

00:35:21,839 --> 00:35:25,760
motivations of people

00:35:23,280 --> 00:35:26,640
and actually the virtuoso job is can you

00:35:25,760 --> 00:35:28,000
harness them

00:35:26,640 --> 00:35:30,000
people who can harness selfish

00:35:28,000 --> 00:35:30,960
motivations are few or far between but

00:35:30,000 --> 00:35:32,880
if you can

00:35:30,960 --> 00:35:34,000
you have a career mapped out either as a

00:35:32,880 --> 00:35:36,480
community manager

00:35:34,000 --> 00:35:38,000
or possibly as a c open source cto open

00:35:36,480 --> 00:35:39,760
source program office leader

00:35:38,000 --> 00:35:41,680
you're the very person that industry

00:35:39,760 --> 00:35:42,560
wants you will be able to bridge the

00:35:41,680 --> 00:35:44,480
divide

00:35:42,560 --> 00:35:45,599
between the business goals and the

00:35:44,480 --> 00:35:47,599
community goals

00:35:45,599 --> 00:35:48,960
and thanks to your understanding of

00:35:47,599 --> 00:35:50,960
selfish motivations

00:35:48,960 --> 00:35:52,720
you will understand how the alignment of

00:35:50,960 --> 00:35:53,599
those goals works how great alignment

00:35:52,720 --> 00:35:55,440
works

00:35:53,599 --> 00:35:57,520
and you will be able to persuade both

00:35:55,440 --> 00:35:59,440
the community and the company to do

00:35:57,520 --> 00:36:01,760
better work in the interests of the

00:35:59,440 --> 00:36:01,760
project

00:36:03,599 --> 00:36:07,920
and obviously with the example of the

00:36:05,359 --> 00:36:09,680
pig controlling the selfish motivations

00:36:07,920 --> 00:36:12,320
can also be vital

00:36:09,680 --> 00:36:13,119
one of the problems with the 2-4 kernel

00:36:12,320 --> 00:36:14,960
cycle

00:36:13,119 --> 00:36:16,640
is that we did try to control the

00:36:14,960 --> 00:36:18,240
selfish motivations of the corporation

00:36:16,640 --> 00:36:19,599
by telling them that

00:36:18,240 --> 00:36:21,040
unless they worked properly with us

00:36:19,599 --> 00:36:23,359
upstream and we were not giving them

00:36:21,040 --> 00:36:25,200
stable abi their patches wouldn't go in

00:36:23,359 --> 00:36:26,800
so their prompt solution was just to go

00:36:25,200 --> 00:36:28,400
straight around us and talk to the

00:36:26,800 --> 00:36:30,720
distributions instead

00:36:28,400 --> 00:36:32,480
the only way we brought them back was by

00:36:30,720 --> 00:36:33,119
blocking the distribution channel by

00:36:32,480 --> 00:36:34,800
getting

00:36:33,119 --> 00:36:36,800
the agreement that everything would be

00:36:34,800 --> 00:36:38,880
upstream first among the distributions

00:36:36,800 --> 00:36:40,560
if we hadn't caused that to happen

00:36:38,880 --> 00:36:42,079
probably corporations would still be

00:36:40,560 --> 00:36:42,560
rooting around the linux kernel today

00:36:42,079 --> 00:36:44,400
although

00:36:42,560 --> 00:36:45,599
i suspect we've found a different method

00:36:44,400 --> 00:36:48,880
of persuading them

00:36:45,599 --> 00:36:49,440
but controlling incorrect selfish

00:36:48,880 --> 00:36:52,480
instincts

00:36:49,440 --> 00:36:54,079
is almost as vital as understanding why

00:36:52,480 --> 00:36:55,440
people are doing what they're doing what

00:36:54,079 --> 00:36:59,200
the selfish motivation

00:36:55,440 --> 00:37:00,720
actually is and obviously

00:36:59,200 --> 00:37:02,640
another key is finding better

00:37:00,720 --> 00:37:05,119
motivations for kernel for for

00:37:02,640 --> 00:37:07,119
companies if you can do this you become

00:37:05,119 --> 00:37:08,880
a very valuable strategic planner for

00:37:07,119 --> 00:37:11,119
any company you choose to join

00:37:08,880 --> 00:37:12,240
because you have cracked the knot of

00:37:11,119 --> 00:37:14,400
understanding

00:37:12,240 --> 00:37:16,480
how to do correct community business

00:37:14,400 --> 00:37:18,880
planning for business goals

00:37:16,480 --> 00:37:20,720
right then this is not to everybody's

00:37:18,880 --> 00:37:22,560
taste not everybody will do it

00:37:20,720 --> 00:37:24,480
but if you want to earn massive salaries

00:37:22,560 --> 00:37:26,960
in industry this is certainly one way of

00:37:24,480 --> 00:37:26,960
doing it

00:37:27,119 --> 00:37:30,560
and one thing i have learned in the

00:37:30,000 --> 00:37:33,119
colonel

00:37:30,560 --> 00:37:34,560
is that having clear documentation about

00:37:33,119 --> 00:37:36,560
what a contribution is

00:37:34,560 --> 00:37:38,079
how to make it what it consists of how

00:37:36,560 --> 00:37:41,200
to write a change log

00:37:38,079 --> 00:37:42,560
is very helpful because if somebody

00:37:41,200 --> 00:37:44,880
makes a contribution

00:37:42,560 --> 00:37:45,920
that is wrong having a document to point

00:37:44,880 --> 00:37:48,000
to that says

00:37:45,920 --> 00:37:49,760
okay there's a problem here because you

00:37:48,000 --> 00:37:52,160
haven't done this this and this

00:37:49,760 --> 00:37:53,760
is really helpful in convincing the

00:37:52,160 --> 00:37:55,520
person on the other end of that email

00:37:53,760 --> 00:37:56,160
that we have truly thought about this

00:37:55,520 --> 00:37:58,880
problem

00:37:56,160 --> 00:37:59,839
having documentation means that we have

00:37:58,880 --> 00:38:01,359
thought about it

00:37:59,839 --> 00:38:02,880
and we have something to point to that

00:38:01,359 --> 00:38:04,720
says we've thought about it

00:38:02,880 --> 00:38:05,920
and we're not just beating up on you

00:38:04,720 --> 00:38:07,760
because we don't like you

00:38:05,920 --> 00:38:09,760
it's written in the document here and

00:38:07,760 --> 00:38:12,000
we'll we'll enforce it for everybody

00:38:09,760 --> 00:38:15,200
it actually contributes the sense of

00:38:12,000 --> 00:38:15,200
fairness in the project

00:38:16,000 --> 00:38:19,040
and clear documentation should detail

00:38:18,400 --> 00:38:21,200
both

00:38:19,040 --> 00:38:22,560
getting better patches and setting

00:38:21,200 --> 00:38:25,040
expectations

00:38:22,560 --> 00:38:26,400
right so your expectations about how the

00:38:25,040 --> 00:38:28,079
patch will be accepted

00:38:26,400 --> 00:38:29,760
how much pain you're going to go through

00:38:28,079 --> 00:38:30,880
and how long it will be before the patch

00:38:29,760 --> 00:38:33,200
appears in the kernel

00:38:30,880 --> 00:38:34,560
is vital to actually setting the

00:38:33,200 --> 00:38:37,599
expectations of people

00:38:34,560 --> 00:38:39,440
so they they if their contribution

00:38:37,599 --> 00:38:41,359
takes longer than they expected to get

00:38:39,440 --> 00:38:43,839
upstream they can actually become

00:38:41,359 --> 00:38:45,680
bored and disillusioned and drift away

00:38:43,839 --> 00:38:46,800
having a document that explains how long

00:38:45,680 --> 00:38:50,320
this might take

00:38:46,800 --> 00:38:50,320
helps combat that

00:38:50,880 --> 00:38:54,400
and obviously in almost all

00:38:52,560 --> 00:38:56,320
contributions especially if you're a

00:38:54,400 --> 00:39:00,079
first-time contributor

00:38:56,320 --> 00:39:02,960
contributions always need modifications

00:39:00,079 --> 00:39:04,079
however one of the things you can use

00:39:02,960 --> 00:39:05,920
these modifications

00:39:04,079 --> 00:39:07,520
as is a learning exercise for the

00:39:05,920 --> 00:39:09,359
contributor so

00:39:07,520 --> 00:39:11,280
instead of just pushing back and saying

00:39:09,359 --> 00:39:14,400
read the documentation and do it better

00:39:11,280 --> 00:39:17,359
you explain why it's done wrong for me

00:39:14,400 --> 00:39:18,240
the standard bugbear is writing commit

00:39:17,359 --> 00:39:20,079
logs

00:39:18,240 --> 00:39:21,680
apparently nobody in the universe can

00:39:20,079 --> 00:39:23,599
actually write decent commit logs

00:39:21,680 --> 00:39:26,240
everybody wants to document how the code

00:39:23,599 --> 00:39:26,720
works i am a programmer i can read the

00:39:26,240 --> 00:39:28,880
code

00:39:26,720 --> 00:39:30,240
reading the code tells me how it works

00:39:28,880 --> 00:39:32,320
what i want to know is

00:39:30,240 --> 00:39:34,000
why is it doing what it's doing that is

00:39:32,320 --> 00:39:36,480
what the commit log should tell me it

00:39:34,000 --> 00:39:38,320
should tell me the why not the what

00:39:36,480 --> 00:39:42,640
and eventually with a lot of

00:39:38,320 --> 00:39:45,760
contributions to the schools

00:39:42,640 --> 00:39:47,680
thank you with a lot of contributions to

00:39:45,760 --> 00:39:49,520
the scuzzy subsystem i simply end up

00:39:47,680 --> 00:39:50,079
giving up and rewriting the commit log

00:39:49,520 --> 00:39:51,839
and saying

00:39:50,079 --> 00:39:53,760
this is how you should have done it and

00:39:51,839 --> 00:39:54,480
it's my job as a maintainer to do that

00:39:53,760 --> 00:39:58,240
so it's

00:39:54,480 --> 00:39:59,119
not bad and explaining to the

00:39:58,240 --> 00:40:01,839
contributor

00:39:59,119 --> 00:40:03,200
why this is in both their interests and

00:40:01,839 --> 00:40:03,920
the community and the code bases

00:40:03,200 --> 00:40:06,640
interest

00:40:03,920 --> 00:40:07,839
is really important aligning interests

00:40:06,640 --> 00:40:10,880
is key

00:40:07,839 --> 00:40:11,440
to harnessing selfish motivation with

00:40:10,880 --> 00:40:13,839
that

00:40:11,440 --> 00:40:14,560
i think i got a few minutes left

00:40:13,839 --> 00:40:17,680
conclusions

00:40:14,560 --> 00:40:19,440
are harnessing selfishness is

00:40:17,680 --> 00:40:21,599
an absolute essential for getting

00:40:19,440 --> 00:40:23,680
maximum engineering profitability

00:40:21,599 --> 00:40:25,359
open source is about 70 percent of the

00:40:23,680 --> 00:40:26,160
way there because of the interest

00:40:25,359 --> 00:40:27,760
alignment

00:40:26,160 --> 00:40:30,079
but getting it the other 30 percent of

00:40:27,760 --> 00:40:31,760
the way there requires a cat herder

00:40:30,079 --> 00:40:34,079
what we would call a benevolent dictator

00:40:31,760 --> 00:40:36,560
in linux but somebody who can manage the

00:40:34,079 --> 00:40:36,560
community

00:40:36,720 --> 00:40:40,960
understanding the selfish motivations is

00:40:39,119 --> 00:40:42,079
vital for helping contributors be

00:40:40,960 --> 00:40:43,760
successful

00:40:42,079 --> 00:40:45,359
especially if those contributors are

00:40:43,760 --> 00:40:47,520
coming out of corporations

00:40:45,359 --> 00:40:49,200
primarily because just because they're

00:40:47,520 --> 00:40:50,800
acting selfishly doesn't mean they're

00:40:49,200 --> 00:40:52,480
acting in their own best interest

00:40:50,800 --> 00:40:54,960
and it might be your job to explain to

00:40:52,480 --> 00:40:57,520
them what their best interests are

00:40:54,960 --> 00:41:00,400
and it's obviously this is a vital skill

00:40:57,520 --> 00:41:02,319
for managing corporate contributions

00:41:00,400 --> 00:41:04,640
so with that i will say thank you if you

00:41:02,319 --> 00:41:06,079
enjoyed this this is impress.js my own

00:41:04,640 --> 00:41:08,000
personal modification of it

00:41:06,079 --> 00:41:09,839
the patches should be going upstream

00:41:08,000 --> 00:41:12,240
probably never but

00:41:09,839 --> 00:41:14,000
i will try and do better obviously it's

00:41:12,240 --> 00:41:14,960
written in html which makes me a web

00:41:14,000 --> 00:41:18,800
developer

00:41:14,960 --> 00:41:21,359
the entire talk is actually available

00:41:18,800 --> 00:41:22,240
on my own personal website under impress

00:41:21,359 --> 00:41:24,079
slides

00:41:22,240 --> 00:41:35,200
and with that i will just say thank you

00:41:24,079 --> 00:41:36,640
and call for questions

00:41:35,200 --> 00:41:39,599
so i must have taken a few people off

00:41:36,640 --> 00:41:39,599
let's have the questions

00:41:41,599 --> 00:41:45,040
hi james thank you for the presentation

00:41:44,400 --> 00:41:48,960
um

00:41:45,040 --> 00:41:52,560
i have a question about how a

00:41:48,960 --> 00:41:55,599
company can plan for the big changes

00:41:52,560 --> 00:41:59,680
uh in upstream kernel for example

00:41:55,599 --> 00:42:02,880
so what is more more welcoming

00:41:59,680 --> 00:42:06,640
way to do that is to prepare the changes

00:42:02,880 --> 00:42:11,280
and push everything uh well send

00:42:06,640 --> 00:42:14,079
send a lot of patches or to

00:42:11,280 --> 00:42:17,040
when you know that you have a problem to

00:42:14,079 --> 00:42:21,200
arrange some kind of i don't know

00:42:17,040 --> 00:42:24,400
um discussion uh about the possible way

00:42:21,200 --> 00:42:28,240
how to solve the problem to get all the

00:42:24,400 --> 00:42:32,160
i don't know opinions so what way

00:42:28,240 --> 00:42:33,599
is more uh efficient for selfish

00:42:32,160 --> 00:42:36,480
contributor

00:42:33,599 --> 00:42:38,640
okay so first of all you have to

00:42:36,480 --> 00:42:41,599
appreciate that every open source

00:42:38,640 --> 00:42:43,440
project is driven by contributions and

00:42:41,599 --> 00:42:45,520
so the contributors are the ones that

00:42:43,440 --> 00:42:47,200
actually in a correctly run project

00:42:45,520 --> 00:42:49,520
drive the direction of the project is

00:42:47,200 --> 00:42:50,720
going in sudden changes in direction

00:42:49,520 --> 00:42:52,880
because of this drive

00:42:50,720 --> 00:42:55,680
are not unusual and those sudden changes

00:42:52,880 --> 00:42:58,000
can stomp all over patch sets you have

00:42:55,680 --> 00:42:58,880
if you are a large company the way you

00:42:58,000 --> 00:43:00,720
avoid this

00:42:58,880 --> 00:43:02,240
is to be one of the people actually

00:43:00,720 --> 00:43:03,920
driving the changes

00:43:02,240 --> 00:43:06,000
so if you have a lot of if you deploy a

00:43:03,920 --> 00:43:07,599
lot of contributors to the ecosystem

00:43:06,000 --> 00:43:09,920
and you're actually in charge of driving

00:43:07,599 --> 00:43:11,520
the project it can actually help keep it

00:43:09,920 --> 00:43:12,160
stable for whatever contribution you're

00:43:11,520 --> 00:43:14,000
doing

00:43:12,160 --> 00:43:15,680
if you're a much smaller company you're

00:43:14,000 --> 00:43:17,680
at the mercy of what's going on

00:43:15,680 --> 00:43:19,359
inside the project it's still not an

00:43:17,680 --> 00:43:21,359
impossible position to be in

00:43:19,359 --> 00:43:23,200
but eventually you just have to become

00:43:21,359 --> 00:43:25,040
good at rebasing

00:43:23,200 --> 00:43:27,280
i've got a few patches for the tpm

00:43:25,040 --> 00:43:28,880
subsystem that have been languishing for

00:43:27,280 --> 00:43:30,960
about five releases

00:43:28,880 --> 00:43:32,720
and over those five releases they keep

00:43:30,960 --> 00:43:33,280
on changing the locations of all the

00:43:32,720 --> 00:43:35,040
code

00:43:33,280 --> 00:43:37,200
so that means i have to completely

00:43:35,040 --> 00:43:38,720
rebase my code every time this damn

00:43:37,200 --> 00:43:41,119
thing happens

00:43:38,720 --> 00:43:42,720
so being good at rebasing if you can't

00:43:41,119 --> 00:43:43,680
afford to deploy a massive army of

00:43:42,720 --> 00:43:45,119
contributors

00:43:43,680 --> 00:43:46,880
is really the only way that you will

00:43:45,119 --> 00:43:47,680
actually cope with this you're not going

00:43:46,880 --> 00:43:49,359
to stop the

00:43:47,680 --> 00:43:51,119
runaway train of a project that's

00:43:49,359 --> 00:43:52,000
changing direction and changing apis

00:43:51,119 --> 00:43:54,640
constantly

00:43:52,000 --> 00:43:56,560
you just have to cope with it sorry i

00:43:54,640 --> 00:44:00,160
just want to say to everyone in the room

00:43:56,560 --> 00:44:02,079
can you please be as quiet as possible

00:44:00,160 --> 00:44:03,440
please i know everyone's very busy but

00:44:02,079 --> 00:44:09,040
everyone would like to hear

00:44:03,440 --> 00:44:12,240
the speaker on stage thank you

00:44:09,040 --> 00:44:12,240
well okay

00:44:12,319 --> 00:44:17,520
i suppose we started late so we get some

00:44:14,400 --> 00:44:17,520
chance of finishing late

00:44:18,720 --> 00:44:24,400
thank you for the amazing presentation

00:44:21,920 --> 00:44:26,400
there are definitely some parts that

00:44:24,400 --> 00:44:27,599
i disagree with but what i do want to

00:44:26,400 --> 00:44:30,960
focus on

00:44:27,599 --> 00:44:34,720
is the selfish motivation it seems like

00:44:30,960 --> 00:44:37,760
it was very much of a binary either or

00:44:34,720 --> 00:44:39,599
it was the dog or the pig and i'm

00:44:37,760 --> 00:44:42,560
wondering what are your thoughts

00:44:39,599 --> 00:44:43,520
about innovations in selfishness because

00:44:42,560 --> 00:44:45,760
it seems like you

00:44:43,520 --> 00:44:48,319
talked a lot about corporations but i

00:44:45,760 --> 00:44:51,680
think a lot of times developers

00:44:48,319 --> 00:44:52,720
do not capture as much value as they can

00:44:51,680 --> 00:44:55,520
for their work

00:44:52,720 --> 00:44:56,319
in corporations and is there another

00:44:55,520 --> 00:44:58,880
future

00:44:56,319 --> 00:45:00,319
model of selfishness okay so thank you

00:44:58,880 --> 00:45:01,040
for the question it's actually a great

00:45:00,319 --> 00:45:02,960
question

00:45:01,040 --> 00:45:04,240
the reason i presented it as binary is

00:45:02,960 --> 00:45:05,520
because it makes for a much more

00:45:04,240 --> 00:45:08,560
interesting talk

00:45:05,520 --> 00:45:11,359
but the truth is that it's not either or

00:45:08,560 --> 00:45:13,440
what actually happens if you align

00:45:11,359 --> 00:45:15,760
selfish interests correctly

00:45:13,440 --> 00:45:16,640
is that a form of altruism does appear

00:45:15,760 --> 00:45:18,480
out of this

00:45:16,640 --> 00:45:20,560
because suddenly it becomes in your

00:45:18,480 --> 00:45:22,720
interest to actually help the project

00:45:20,560 --> 00:45:24,880
once you've got the grid alignment done

00:45:22,720 --> 00:45:26,640
and everything's working correctly and

00:45:24,880 --> 00:45:27,440
you've got the best business plan you

00:45:26,640 --> 00:45:30,160
can get

00:45:27,440 --> 00:45:31,440
out of all of this you you actually find

00:45:30,160 --> 00:45:33,599
that your interest

00:45:31,440 --> 00:45:35,280
and the project's interests match each

00:45:33,599 --> 00:45:36,560
other for a long step of the way

00:45:35,280 --> 00:45:38,720
and you might be doing this for a

00:45:36,560 --> 00:45:40,880
selfish reason but you're doing it

00:45:38,720 --> 00:45:42,720
you're doing it helps the project and as

00:45:40,880 --> 00:45:44,560
far as the project is concerned helping

00:45:42,720 --> 00:45:46,400
it is an altruistic reason

00:45:44,560 --> 00:45:47,680
so this is where once you get the

00:45:46,400 --> 00:45:49,760
alignment correct

00:45:47,680 --> 00:45:51,599
selfish motivations and altruistic

00:45:49,760 --> 00:45:54,720
motivations somewhat merge

00:45:51,599 --> 00:45:56,960
so there's always um a sort of

00:45:54,720 --> 00:45:58,720
there there's there's an ideal mix

00:45:56,960 --> 00:46:00,319
between the two instead of waiting for

00:45:58,720 --> 00:46:02,400
it to sort of appear like some

00:46:00,319 --> 00:46:03,920
renormalization transformation

00:46:02,400 --> 00:46:05,440
if you can persuade your company to

00:46:03,920 --> 00:46:07,119
start from that position

00:46:05,440 --> 00:46:08,640
chances are they'll reach the plateau

00:46:07,119 --> 00:46:10,400
much faster but

00:46:08,640 --> 00:46:12,640
the plateau can be reached whether you

00:46:10,400 --> 00:46:14,640
start from pure selfishness or whether

00:46:12,640 --> 00:46:29,839
you try and incorporate altruism into

00:46:14,640 --> 00:46:29,839
what you're doing

00:46:52,160 --> 00:46:57,839
so this is really a question about open

00:46:54,160 --> 00:46:57,839
source sustainability

00:47:02,640 --> 00:47:06,400
so just to go back to the bit of the

00:47:05,200 --> 00:47:08,240
question where you asked why i

00:47:06,400 --> 00:47:10,160
concentrate on corporations

00:47:08,240 --> 00:47:12,400
and the reason is because i'm problem

00:47:10,160 --> 00:47:13,520
driven most of my problems are caused by

00:47:12,400 --> 00:47:16,400
corporations

00:47:13,520 --> 00:47:18,000
so to somebody who sits in that prison

00:47:16,400 --> 00:47:20,240
everything is a corporate problem

00:47:18,000 --> 00:47:22,000
but i agree absolutely with you that

00:47:20,240 --> 00:47:23,280
harnessing selfish motivations for

00:47:22,000 --> 00:47:26,079
individuals as well

00:47:23,280 --> 00:47:26,400
is also important i did touch on that it

00:47:26,079 --> 00:47:28,640
was

00:47:26,400 --> 00:47:29,920
i think only the latter part of my talk

00:47:28,640 --> 00:47:31,119
that really became all about

00:47:29,920 --> 00:47:33,920
corporations

00:47:31,119 --> 00:47:35,920
but remember that in linux we got our

00:47:33,920 --> 00:47:37,280
baptism fire of how to cope with this

00:47:35,920 --> 00:47:39,520
from the corporations

00:47:37,280 --> 00:47:40,960
and that that means it's a feature

00:47:39,520 --> 00:47:43,119
product of my upbringing

00:47:40,960 --> 00:47:44,319
so it's in my dna so to speak which is

00:47:43,119 --> 00:47:46,800
why unfortunately

00:47:44,319 --> 00:47:47,599
i phrased everything like this you're

00:47:46,800 --> 00:47:50,800
welcome

00:47:47,599 --> 00:47:50,800
and i think with that

00:47:51,359 --> 00:47:55,200
okay one more another question i promise

00:47:53,200 --> 00:47:58,480
it's interesting and so i

00:47:55,200 --> 00:48:02,079
i found your uh talk specifically

00:47:58,480 --> 00:48:04,240
on talking about diversity uh in teams

00:48:02,079 --> 00:48:05,119
uh in open source projects being really

00:48:04,240 --> 00:48:07,599
important

00:48:05,119 --> 00:48:09,599
understanding both the problem space

00:48:07,599 --> 00:48:10,960
better but also having experiences that

00:48:09,599 --> 00:48:14,079
people can draw in

00:48:10,960 --> 00:48:16,000
to fix problems in that space given that

00:48:14,079 --> 00:48:18,400
i was interested that you

00:48:16,000 --> 00:48:19,599
spoke out against things like positive

00:48:18,400 --> 00:48:22,480
action and i wonder

00:48:19,599 --> 00:48:24,160
what your thoughts are on maybe not

00:48:22,480 --> 00:48:27,200
considering that

00:48:24,160 --> 00:48:28,880
in the origin of contributions um but

00:48:27,200 --> 00:48:30,160
actually when considering when bringing

00:48:28,880 --> 00:48:31,839
new maintainers on

00:48:30,160 --> 00:48:33,119
i suppose you could call it positive

00:48:31,839 --> 00:48:33,359
action the other way you could look at

00:48:33,119 --> 00:48:36,400
it

00:48:33,359 --> 00:48:38,400
is valuing the diversity

00:48:36,400 --> 00:48:39,760
of your team in and as of itself

00:48:38,400 --> 00:48:40,880
somewhat like maybe you were putting

00:48:39,760 --> 00:48:42,800
together a football team

00:48:40,880 --> 00:48:44,880
you wouldn't want the 11 best players

00:48:42,800 --> 00:48:48,000
you want players that work together to

00:48:44,880 --> 00:48:51,200
maximize that space

00:48:48,000 --> 00:48:53,359
okay so um i did say that you should

00:48:51,200 --> 00:48:55,839
never examine the origin of the patch

00:48:53,359 --> 00:48:56,800
so in that sense i was against examining

00:48:55,839 --> 00:48:59,599
origins

00:48:56,800 --> 00:49:01,760
but i also said that the way we solve

00:48:59,599 --> 00:49:02,400
this problem in linux is to put lots of

00:49:01,760 --> 00:49:05,119
structures

00:49:02,400 --> 00:49:07,119
in place around the ecosystem that

00:49:05,119 --> 00:49:08,480
actually try and encourage a diversity

00:49:07,119 --> 00:49:11,680
of contributions

00:49:08,480 --> 00:49:14,160
so i'm not completely against

00:49:11,680 --> 00:49:16,000
positive action i just think that in

00:49:14,160 --> 00:49:18,400
terms of patch consideration

00:49:16,000 --> 00:49:20,160
the positive action has no place the

00:49:18,400 --> 00:49:22,480
positive action should occur

00:49:20,160 --> 00:49:23,280
in the encouragement of contributions

00:49:22,480 --> 00:49:26,880
outside

00:49:23,280 --> 00:49:28,640
of the sort of laser-like focus we have

00:49:26,880 --> 00:49:30,640
on making sure the contribution is

00:49:28,640 --> 00:49:32,640
technically correct so what i was trying

00:49:30,640 --> 00:49:34,079
to do was separate the motivations i

00:49:32,640 --> 00:49:36,240
didn't mean to imply

00:49:34,079 --> 00:49:37,680
that all forms of affirmative action are

00:49:36,240 --> 00:49:39,359
wrong because that would have me

00:49:37,680 --> 00:49:40,880
shutting down the outreachy project and

00:49:39,359 --> 00:49:41,599
colonel newbies and everything else that

00:49:40,880 --> 00:49:44,160
we do to

00:49:41,599 --> 00:49:45,440
help the ecosystem we need as i said a

00:49:44,160 --> 00:49:48,079
diverse ecosystem

00:49:45,440 --> 00:49:48,640
encouraging diversity in the ecosystem

00:49:48,079 --> 00:49:50,960
through

00:49:48,640 --> 00:49:52,480
external means is absolutely vital to

00:49:50,960 --> 00:49:53,280
maintaining the sustainability of the

00:49:52,480 --> 00:49:55,680
project

00:49:53,280 --> 00:49:57,359
without a diverse contributor basis we

00:49:55,680 --> 00:49:58,880
don't have enough diverse thought

00:49:57,359 --> 00:50:00,800
to explore all the problems in the

00:49:58,880 --> 00:50:02,640
operating system problem space

00:50:00,800 --> 00:50:04,480
and without the ability to explore the

00:50:02,640 --> 00:50:06,160
problems completely and correctly

00:50:04,480 --> 00:50:08,000
we'll come up with the wrong solution

00:50:06,160 --> 00:50:10,400
diversity is vital for preventing us

00:50:08,000 --> 00:50:12,580
falling into that trap

00:50:10,400 --> 00:50:18,989
okay with that i will say thank you very

00:50:12,580 --> 00:50:18,989
[Applause]

00:50:20,200 --> 00:50:23,200

YouTube URL: https://www.youtube.com/watch?v=ueHsgU_k6zI


