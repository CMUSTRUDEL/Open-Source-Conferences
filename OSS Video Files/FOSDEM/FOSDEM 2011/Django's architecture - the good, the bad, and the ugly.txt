Title: Django's architecture - the good, the bad, and the ugly
Publication date: 2011-12-22
Playlist: FOSDEM 2011
Description: 
	By Andrew Godwin 

Django has become one of the leading web frameworks over the past few years, and has become well-known in the web industry for both good and bad reasons.

This talk takes a look at the internal architecture of Django, and highlights what we've cleaned up, what we got right from he start, and the dusty corners of the code that still need a bit more work - a never-ending problem in such a large open-source project


FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:06,890 --> 00:00:11,730
why thank you for coming

00:00:09,420 --> 00:00:14,670
I'm Andrew Godwin and I'm gonna give you

00:00:11,730 --> 00:00:16,680
a look on Johnny's architecture the good

00:00:14,670 --> 00:00:18,210
the bad and the ugly

00:00:16,680 --> 00:00:20,369
I'll cover exactly what that means in a

00:00:18,210 --> 00:00:23,160
short few short moments but first of all

00:00:20,369 --> 00:00:25,650
just in the instruction to myself I'm

00:00:23,160 --> 00:00:27,090
one of the Django core committers I have

00:00:25,650 --> 00:00:29,099
been working with Django for about three

00:00:27,090 --> 00:00:32,700
years I became a coffee cook me - last

00:00:29,099 --> 00:00:34,559
year I am at various times either a

00:00:32,700 --> 00:00:36,630
freelance or mercenary programmer as

00:00:34,559 --> 00:00:38,579
like skillful myself and also at the

00:00:36,630 --> 00:00:40,500
moment I'm sort of founding a startup

00:00:38,579 --> 00:00:44,879
apparently it's more project that

00:00:40,500 --> 00:00:46,829
evolved so first of all I want to start

00:00:44,879 --> 00:00:48,840
off with a brief history of Django how

00:00:46,829 --> 00:00:49,890
it's evolved where it's come from if

00:00:48,840 --> 00:00:53,730
you're unfamiliar which a lot of people

00:00:49,890 --> 00:00:57,059
are so Django started off at the launch

00:00:53,730 --> 00:00:59,640
Journal world in Lawrence Kansas in 2005

00:00:57,059 --> 00:01:03,329
as a team of three developers and one

00:00:59,640 --> 00:01:05,189
designer sort of built Django internally

00:01:03,329 --> 00:01:07,560
for use with a few source sites the

00:01:05,189 --> 00:01:09,439
world company was building they are very

00:01:07,560 --> 00:01:11,340
newspaper sites that are quite CMS see

00:01:09,439 --> 00:01:13,590
but it was still quite a generic

00:01:11,340 --> 00:01:16,340
framework and so they decided probably

00:01:13,590 --> 00:01:18,900
publicly release it the same year and

00:01:16,340 --> 00:01:20,070
they weren't expecting much reaction but

00:01:18,900 --> 00:01:22,650
the sort of reaction they got

00:01:20,070 --> 00:01:25,470
overwhelmed them the oft famous quote is

00:01:22,650 --> 00:01:27,720
that in 2006 Jacob

00:01:25,470 --> 00:01:30,509
one of the first few developers in

00:01:27,720 --> 00:01:32,670
Django famously quoted that Django one

00:01:30,509 --> 00:01:34,710
point naught is just around the corner

00:01:32,670 --> 00:01:36,450
a mere two years later they finally got

00:01:34,710 --> 00:01:39,930
to one point naught after realizing

00:01:36,450 --> 00:01:42,119
about half the codebase since one point

00:01:39,930 --> 00:01:43,979
naught we've had a basically an API

00:01:42,119 --> 00:01:46,649
feature freeze or at least backward

00:01:43,979 --> 00:01:48,329
compatibility so any feature we want to

00:01:46,649 --> 00:01:51,240
get rid of has had at least three

00:01:48,329 --> 00:01:52,979
versions of deprecation so it's quite

00:01:51,240 --> 00:01:55,229
stable now before one point no it was

00:01:52,979 --> 00:01:57,719
anything goes a lot of people were

00:01:55,229 --> 00:02:00,270
running off of the main branch of sv

00:01:57,719 --> 00:02:01,530
subversion for quite a boil I think

00:02:00,270 --> 00:02:03,090
about there was about one and a half

00:02:01,530 --> 00:02:05,909
years between stable releases at one

00:02:03,090 --> 00:02:07,409
point and there are many many production

00:02:05,909 --> 00:02:09,810
sites just running off of the

00:02:07,409 --> 00:02:12,400
development branch so it's nice we

00:02:09,810 --> 00:02:15,239
finally have some stable releases again

00:02:12,400 --> 00:02:18,519
release 1.3 is coming up in a few weeks

00:02:15,239 --> 00:02:20,830
it's more of a minor bug-fix releases

00:02:18,519 --> 00:02:23,830
time since one point no we've had a few

00:02:20,830 --> 00:02:26,140
big features 1.3 is little less but we

00:02:23,830 --> 00:02:29,860
still such snuck some sort of major

00:02:26,140 --> 00:02:31,660
features in but generally it's sort of

00:02:29,860 --> 00:02:35,379
progressing nice nice and stable these

00:02:31,660 --> 00:02:37,470
days so one of the main things that

00:02:35,379 --> 00:02:40,629
architecture is how things architected

00:02:37,470 --> 00:02:42,370
so first of all I'm gonna go through how

00:02:40,629 --> 00:02:45,220
Django is basically laid out and the

00:02:42,370 --> 00:02:46,930
coat in the codebase for those of you

00:02:45,220 --> 00:02:48,790
who aren't familiar with Python it

00:02:46,930 --> 00:02:50,380
should be pretty obvious how things work

00:02:48,790 --> 00:02:53,230
there's modules it's like most of the

00:02:50,380 --> 00:02:54,849
languages they're hierarchical and then

00:02:53,230 --> 00:02:57,400
after that I'm going to go through some

00:02:54,849 --> 00:02:59,379
of the more interesting points of the

00:02:57,400 --> 00:03:01,629
Django code bases in architecture some

00:02:59,379 --> 00:03:03,099
of them are good some of them you see

00:03:01,629 --> 00:03:04,900
that and fix them and some of them are

00:03:03,099 --> 00:03:09,280
still a bit ugly I'm going to try and

00:03:04,900 --> 00:03:10,989
fix them soon so Django is as you can

00:03:09,280 --> 00:03:11,890
imagine for a large web framework a very

00:03:10,989 --> 00:03:15,250
complex Beast

00:03:11,890 --> 00:03:18,700
this is a subset of the top-level

00:03:15,250 --> 00:03:21,250
modules in Django these are the main

00:03:18,700 --> 00:03:23,950
important ones though so going through

00:03:21,250 --> 00:03:26,410
them alphabetically contrib is where we

00:03:23,950 --> 00:03:28,150
keep all of our optional add-ons so

00:03:26,410 --> 00:03:30,069
Django's philosophy is that anything

00:03:28,150 --> 00:03:32,139
that doesn't have to be in the core it's

00:03:30,069 --> 00:03:33,940
in contributing you can disable it so

00:03:32,139 --> 00:03:35,290
user authentication sessions all that

00:03:33,940 --> 00:03:36,730
kind of stuff are in there I'll go

00:03:35,290 --> 00:03:38,739
without them in more detail in a second

00:03:36,730 --> 00:03:40,480
core it's where all the absolutely

00:03:38,739 --> 00:03:42,790
essential part of Django is things like

00:03:40,480 --> 00:03:46,540
URL resolving basic functions and

00:03:42,790 --> 00:03:48,549
handlers DB is our models backend for

00:03:46,540 --> 00:03:50,470
cooling databases is an abstraction

00:03:48,549 --> 00:03:53,079
layer I'll go over that again in a

00:03:50,470 --> 00:03:55,930
minute in a minute dispatch is the

00:03:53,079 --> 00:03:57,430
signal handlers so Django has signals

00:03:55,930 --> 00:04:00,489
which are sort of there you can register

00:03:57,430 --> 00:04:02,220
hooks and signals so you can say when

00:04:00,489 --> 00:04:04,780
this model has changed

00:04:02,220 --> 00:04:06,940
run this function so you can do custom

00:04:04,780 --> 00:04:09,269
save hook's custom validation things

00:04:06,940 --> 00:04:12,010
like that in sort of that kind of area

00:04:09,269 --> 00:04:13,540
HTTP rht to be handling libraries it

00:04:12,010 --> 00:04:16,450
does things like recognizing status

00:04:13,540 --> 00:04:17,650
codes before incorrect responses mine

00:04:16,450 --> 00:04:20,409
handling that kind of stuff

00:04:17,650 --> 00:04:22,120
forms is the forms library django has

00:04:20,409 --> 00:04:23,800
had two forms libraries one called old

00:04:22,120 --> 00:04:24,930
forms now one called new forms is his

00:04:23,800 --> 00:04:27,660
new forms in one place

00:04:24,930 --> 00:04:31,530
three forms is a sort of generic way of

00:04:27,660 --> 00:04:34,500
writing user input forms so both simple

00:04:31,530 --> 00:04:37,289
forms like name email password and more

00:04:34,500 --> 00:04:39,630
complex sets of there are at least three

00:04:37,289 --> 00:04:41,160
sets of name email password they all

00:04:39,630 --> 00:04:43,789
have to be present that has been at most

00:04:41,160 --> 00:04:46,500
5 it's quite if you get quite complex

00:04:43,789 --> 00:04:48,509
middleware is where what Jiang Urkel's

00:04:46,500 --> 00:04:50,789
middleware lives if you're unfamiliar

00:04:48,509 --> 00:04:53,460
with the concept from whisky then it's

00:04:50,789 --> 00:04:55,080
basically code that runs around a

00:04:53,460 --> 00:04:58,229
request so you can intercept the

00:04:55,080 --> 00:05:00,180
incoming HTTP request and set custom

00:04:58,229 --> 00:05:01,830
variables you can change the headers so

00:05:00,180 --> 00:05:04,259
you can do authentication you can do cos

00:05:01,830 --> 00:05:05,699
reflection and then on the response you

00:05:04,259 --> 00:05:08,039
can do things so you can gzip for

00:05:05,699 --> 00:05:10,949
example in response you can do various

00:05:08,039 --> 00:05:13,110
things like that shortcuts is full of

00:05:10,949 --> 00:05:15,270
some handy bits because Django can get

00:05:13,110 --> 00:05:17,160
very complex in its import paths so

00:05:15,270 --> 00:05:19,169
there's things that never sort of just

00:05:17,160 --> 00:05:22,280
render me at this template into a

00:05:19,169 --> 00:05:22,280
response and things like that

00:05:22,789 --> 00:05:27,150
templates is where the Django templating

00:05:25,199 --> 00:05:28,440
language lives the Django temping

00:05:27,150 --> 00:05:30,870
language is quite an odd Beast is

00:05:28,440 --> 00:05:32,699
designed mostly so that you can't do

00:05:30,870 --> 00:05:34,260
much logic in it and for a very long

00:05:32,699 --> 00:05:37,440
time it's assigned very much this way we

00:05:34,260 --> 00:05:42,690
slowly sort of weaning off of that at

00:05:37,440 --> 00:05:44,310
the moment and it's come on to that

00:05:42,690 --> 00:05:45,539
later it's quite interesting and it's

00:05:44,310 --> 00:05:46,590
probably one of the oldest parts of the

00:05:45,539 --> 00:05:49,110
code base that's hasn't been touched

00:05:46,590 --> 00:05:51,720
very much and then finally views which

00:05:49,110 --> 00:05:52,979
is where all our generic views live and

00:05:51,720 --> 00:05:54,240
in the latest release of Django we've

00:05:52,979 --> 00:05:56,580
introduced song called Jeanette

00:05:54,240 --> 00:05:57,930
class-based views which are sort of a

00:05:56,580 --> 00:06:01,169
better framework for running views and

00:05:57,930 --> 00:06:04,530
all that code gives in there so contrib

00:06:01,169 --> 00:06:06,780
is as because even more in depth than

00:06:04,530 --> 00:06:08,759
the main level 3 so these are these are

00:06:06,780 --> 00:06:12,090
the main contrabass there's about 6 and

00:06:08,759 --> 00:06:13,169
all of them I'll go through some of the

00:06:12,090 --> 00:06:16,020
more interesting ones later with some

00:06:13,169 --> 00:06:19,470
pictures of how they work but admin is

00:06:16,020 --> 00:06:22,199
Django's famous magical administrate

00:06:19,470 --> 00:06:25,349
interface where you can edit code off is

00:06:22,199 --> 00:06:27,090
a user authentication system that's

00:06:25,349 --> 00:06:28,820
subject of much debate it works very

00:06:27,090 --> 00:06:31,620
well out the box with small applications

00:06:28,820 --> 00:06:32,880
comments is a bit of an odd commenting

00:06:31,620 --> 00:06:34,289
system that was great and it was

00:06:32,880 --> 00:06:35,860
invented and is getting a bit out of

00:06:34,289 --> 00:06:38,740
date now

00:06:35,860 --> 00:06:41,380
content types is a way of doing generic

00:06:38,740 --> 00:06:44,200
foreign keys to other things so you can

00:06:41,380 --> 00:06:47,800
link to arbitrary tables and models it

00:06:44,200 --> 00:06:49,390
kind of it kind of breaks relational

00:06:47,800 --> 00:06:50,620
database conventions a bit but it can be

00:06:49,390 --> 00:06:52,960
very useful things like comments which

00:06:50,620 --> 00:06:55,210
it is next to flap pages is a very

00:06:52,960 --> 00:06:57,370
simple way of just having database pages

00:06:55,210 --> 00:06:59,290
so you can say things like an about page

00:06:57,370 --> 00:07:03,580
and an FAQ page you can just have them

00:06:59,290 --> 00:07:05,250
it's again not very complex the idea of

00:07:03,580 --> 00:07:07,210
contrib is it's very simple

00:07:05,250 --> 00:07:10,270
implementations are very common patterns

00:07:07,210 --> 00:07:11,200
that's the definition of it gears is one

00:07:10,270 --> 00:07:13,390
of the more interesting ones it's

00:07:11,200 --> 00:07:16,000
Django's geospatial support so you can

00:07:13,390 --> 00:07:18,040
do arbitrary polygons you can do testing

00:07:16,000 --> 00:07:20,290
of lines in lines you can do projection

00:07:18,040 --> 00:07:23,340
to do all sort of exciting things I've

00:07:20,290 --> 00:07:25,690
got some stuff in that later as well

00:07:23,340 --> 00:07:28,090
humanizes for the things for adding

00:07:25,690 --> 00:07:29,590
numbers and sizes humanity users so you

00:07:28,090 --> 00:07:31,330
can do things like torture putting

00:07:29,590 --> 00:07:31,780
commas in numbers changing numbers to

00:07:31,330 --> 00:07:34,330
words

00:07:31,780 --> 00:07:35,950
local flavor is full of things that are

00:07:34,330 --> 00:07:38,440
for localization I suppose

00:07:35,950 --> 00:07:39,760
internationalization so those are the

00:07:38,440 --> 00:07:42,910
difference internationalization is

00:07:39,760 --> 00:07:45,010
translating words so you can for example

00:07:42,910 --> 00:07:47,740
vuelven saying hallo and you can have

00:07:45,010 --> 00:07:49,570
Bonjour Andrew local flavor

00:07:47,740 --> 00:07:52,660
is different to that and that it's

00:07:49,570 --> 00:07:54,610
localizing what you put in so in the UK

00:07:52,660 --> 00:07:57,430
we'd have a postcode in the US you have

00:07:54,610 --> 00:07:58,900
a zip code also things like telephone

00:07:57,430 --> 00:08:01,120
numbers vary from country to country and

00:07:58,900 --> 00:08:02,470
there's other things as well so things

00:08:01,120 --> 00:08:04,060
like the u.s. state fields are in there

00:08:02,470 --> 00:08:06,910
because the only important for the US

00:08:04,060 --> 00:08:08,320
and so most large countries have an

00:08:06,910 --> 00:08:10,450
entry local flavour with some custom

00:08:08,320 --> 00:08:12,250
widgets for their country so if you're

00:08:10,450 --> 00:08:14,830
building an application for you know

00:08:12,250 --> 00:08:17,080
something that isn't based on either the

00:08:14,830 --> 00:08:18,730
UK or America which a lot of people do

00:08:17,080 --> 00:08:21,160
here in Europe you can actually do it

00:08:18,730 --> 00:08:24,490
sanely which is helpful messages is a

00:08:21,160 --> 00:08:27,100
way of doing sort of messages for

00:08:24,490 --> 00:08:28,630
upcoming things so I think in metal

00:08:27,100 --> 00:08:31,090
cycle this flash but the idea to you so

00:08:28,630 --> 00:08:33,220
you can save somebody say tell them it's

00:08:31,090 --> 00:08:34,780
been Sade and then the next page along

00:08:33,220 --> 00:08:37,419
can look at the messages and go oh look

00:08:34,780 --> 00:08:39,490
it's been saved sessions is our support

00:08:37,419 --> 00:08:39,940
for sessions because obviously HTTP is

00:08:39,490 --> 00:08:43,030
stateless

00:08:39,940 --> 00:08:44,380
so that just has cookies and it stores

00:08:43,030 --> 00:08:48,240
things in other database or a cache

00:08:44,380 --> 00:08:50,130
back-end static files is new and 1.3

00:08:48,240 --> 00:08:52,680
Chango used to just tell it to your own

00:08:50,130 --> 00:08:55,709
management of CSS and images and things

00:08:52,680 --> 00:08:57,480
these days we've decided to move in in

00:08:55,709 --> 00:09:00,000
this release support for Manning's you

00:08:57,480 --> 00:09:01,529
know managing those more sanely so the

00:09:00,000 --> 00:09:03,899
idea with Django is that you can have

00:09:01,529 --> 00:09:05,610
these third-party reusable apps and it

00:09:03,899 --> 00:09:07,380
used to be the case that you had to take

00:09:05,610 --> 00:09:09,870
their media they shipped with their CSS

00:09:07,380 --> 00:09:11,670
their JavaScript and move it into the

00:09:09,870 --> 00:09:14,279
right place with static files

00:09:11,670 --> 00:09:15,600
Django automatically automatically take

00:09:14,279 --> 00:09:18,510
all that media and put it in the right

00:09:15,600 --> 00:09:21,510
place for you and also their syndication

00:09:18,510 --> 00:09:25,920
which is our support for rss/atom and

00:09:21,510 --> 00:09:28,649
those other kind of feeds core itself

00:09:25,920 --> 00:09:31,230
has a few other things inside it namely

00:09:28,649 --> 00:09:34,589
there's the cache which is our cache

00:09:31,230 --> 00:09:36,120
back-end the cache back end is somewhat

00:09:34,589 --> 00:09:39,779
abstract 'add I'll talk about that in a

00:09:36,120 --> 00:09:41,459
bit there's files which is support for

00:09:39,779 --> 00:09:43,860
uploading files and handling on disk

00:09:41,459 --> 00:09:45,270
files there's various optimizations

00:09:43,860 --> 00:09:47,010
there has small files only ever get

00:09:45,270 --> 00:09:47,910
stored in memory and large files get

00:09:47,010 --> 00:09:49,170
pushed onto the disk when they are

00:09:47,910 --> 00:09:51,500
uploaded so you don't use up all the

00:09:49,170 --> 00:09:54,959
memory of like a gig file being uploaded

00:09:51,500 --> 00:09:57,360
handlers is full of support for things

00:09:54,959 --> 00:09:59,399
like talking to mod whiskey talking to

00:09:57,360 --> 00:10:02,970
my Python all the various ways you can

00:09:59,399 --> 00:10:07,140
run Django I believe it's also fast CGI

00:10:02,970 --> 00:10:09,000
sports in there as well mail is the sort

00:10:07,140 --> 00:10:11,190
of abstraction layer for emailing people

00:10:09,000 --> 00:10:14,100
it used to be fixed these days you can

00:10:11,190 --> 00:10:15,690
have email support for SMTP you have on

00:10:14,100 --> 00:10:17,310
the printers the console so you can

00:10:15,690 --> 00:10:18,930
debug and see what what would be sent

00:10:17,310 --> 00:10:19,760
and there's a few other things in there

00:10:18,930 --> 00:10:22,170
as well

00:10:19,760 --> 00:10:24,029
management is support for Django so

00:10:22,170 --> 00:10:26,670
David management commands so manage

00:10:24,029 --> 00:10:28,680
commands are things where you basically

00:10:26,670 --> 00:10:31,200
you can say this is a task the people

00:10:28,680 --> 00:10:32,850
can run so you can say you know sort of

00:10:31,200 --> 00:10:35,250
import data all that kind of stuff

00:10:32,850 --> 00:10:37,980
and you can define these per application

00:10:35,250 --> 00:10:39,240
in Django so if I ship so if we sample I

00:10:37,980 --> 00:10:41,730
brought in a patient with South which

00:10:39,240 --> 00:10:43,770
does database migrations for Django so I

00:10:41,730 --> 00:10:46,470
can ship lots of management commands

00:10:43,770 --> 00:10:48,390
which do things like run migrations let

00:10:46,470 --> 00:10:49,860
you sort of half create migrations

00:10:48,390 --> 00:10:51,600
automatically and those are all that my

00:10:49,860 --> 00:10:54,209
management commands and the framework

00:10:51,600 --> 00:10:56,070
front of those lives in there serializes

00:10:54,209 --> 00:10:59,100
is our support for reading and writing

00:10:56,070 --> 00:11:01,840
out JSON and XML and one of the format

00:10:59,100 --> 00:11:03,250
of what it is for models so

00:11:01,840 --> 00:11:05,500
rather than dumping sequel you can dump

00:11:03,250 --> 00:11:06,730
at a place independent format it's not

00:11:05,500 --> 00:11:08,920
particularly efficient and it will fail

00:11:06,730 --> 00:11:10,270
on large databases but for moving stuff

00:11:08,920 --> 00:11:11,710
around development when often you're

00:11:10,270 --> 00:11:13,570
using perhaps equal light on one machine

00:11:11,710 --> 00:11:17,830
or Postgres and another it can be very

00:11:13,570 --> 00:11:20,560
handy servers is where the

00:11:17,830 --> 00:11:23,350
implementations of the two actual web

00:11:20,560 --> 00:11:25,510
servers Django has in it roll so there's

00:11:23,350 --> 00:11:27,250
a very small debugging web server so you

00:11:25,510 --> 00:11:28,810
have to have like Apache or mod Python

00:11:27,250 --> 00:11:31,180
or gonna coolness live locally and

00:11:28,810 --> 00:11:33,520
there's also a far cgi wrapper in there

00:11:31,180 --> 00:11:35,410
which counselors server paginate err for

00:11:33,520 --> 00:11:37,990
some reason lives in here I'm not quite

00:11:35,410 --> 00:11:39,880
sure why it does do that support

00:11:37,990 --> 00:11:41,200
basically taking a list of things having

00:11:39,880 --> 00:11:43,990
pages of it which is obviously used a

00:11:41,200 --> 00:11:47,260
lot in most websites URL resolvers is

00:11:43,990 --> 00:11:49,420
our URL framework in Django URLs are a

00:11:47,260 --> 00:11:51,310
set of regular expressions it reads

00:11:49,420 --> 00:11:52,540
through them top to bottom and then the

00:11:51,310 --> 00:11:55,360
first one that matches it takes and

00:11:52,540 --> 00:11:58,450
fires the view connector to that and

00:11:55,360 --> 00:12:00,490
then validators is new in 1.2 we're

00:11:58,450 --> 00:12:02,320
having model validation so what we used

00:12:00,490 --> 00:12:04,180
to do is just have form style 8 input

00:12:02,320 --> 00:12:06,070
and then when you try to save something

00:12:04,180 --> 00:12:07,930
the database would just dive is the

00:12:06,070 --> 00:12:10,330
wrong kind of type so if you sort of if

00:12:07,930 --> 00:12:12,250
you incorrectly have a character field

00:12:10,330 --> 00:12:14,020
on your form when you say to an integer

00:12:12,250 --> 00:12:15,550
field they know that the database just

00:12:14,020 --> 00:12:16,180
died horrific horrific Lee and go no

00:12:15,550 --> 00:12:19,180
that's wrong

00:12:16,180 --> 00:12:19,870
in 1.2 we introduced the idea of model

00:12:19,180 --> 00:12:21,580
violation

00:12:19,870 --> 00:12:22,870
so now mortals also violate things when

00:12:21,580 --> 00:12:25,150
you put them in and you get sensible

00:12:22,870 --> 00:12:26,730
errors rather than the occasion and you

00:12:25,150 --> 00:12:30,940
cryptic my sequel of postcodes errors

00:12:26,730 --> 00:12:32,880
which can often be quite confusing the

00:12:30,940 --> 00:12:34,870
database back-end is split into

00:12:32,880 --> 00:12:36,580
essentially two parts backends and

00:12:34,870 --> 00:12:38,290
models backends is where all our

00:12:36,580 --> 00:12:40,690
database specific code lives

00:12:38,290 --> 00:12:43,240
so there's backends for my sequel post

00:12:40,690 --> 00:12:46,060
prayers Oracle and sequel Lite in core

00:12:43,240 --> 00:12:47,950
and there's also Microsoft sequel server

00:12:46,060 --> 00:12:50,230
fire burden if your other ones available

00:12:47,950 --> 00:12:51,400
as third-party applications they don't

00:12:50,230 --> 00:12:55,360
have to live in here this is the ones we

00:12:51,400 --> 00:12:58,150
ship with and their models is to sort of

00:12:55,360 --> 00:13:00,100
the layers on top of that so backends

00:12:58,150 --> 00:13:02,640
gets rid of all the specific stuff like

00:13:00,100 --> 00:13:05,050
what types to use and molds is a sort of

00:13:02,640 --> 00:13:06,160
so important we have meta classes and

00:13:05,050 --> 00:13:08,200
things so you do things declaratively

00:13:06,160 --> 00:13:10,870
and that's where about magic lives it's

00:13:08,200 --> 00:13:12,310
not as much because it sounds there's

00:13:10,870 --> 00:13:14,450
many other parts I could spend all day

00:13:12,310 --> 00:13:16,280
hearing about all every models

00:13:14,450 --> 00:13:19,400
we have in our code base but if your

00:13:16,280 --> 00:13:22,670
sanity I'll I won't so here's a few

00:13:19,400 --> 00:13:24,260
interesting ones we have decorators for

00:13:22,670 --> 00:13:26,510
views so if you're unfamiliar with

00:13:24,260 --> 00:13:27,650
pricing them again decorators are the

00:13:26,510 --> 00:13:30,170
concept of a function which wraps a

00:13:27,650 --> 00:13:31,550
function so basically because in Python

00:13:30,170 --> 00:13:32,750
functions the first class object you can

00:13:31,550 --> 00:13:33,740
take a function mutate it through a

00:13:32,750 --> 00:13:36,710
different function get a different

00:13:33,740 --> 00:13:38,180
function to return there get complex but

00:13:36,710 --> 00:13:40,520
the idea is you can wrap a function in

00:13:38,180 --> 00:13:42,170
this must be done by an admin this must

00:13:40,520 --> 00:13:44,540
be done by logged in user or various

00:13:42,170 --> 00:13:46,250
other checks like that and some common

00:13:44,540 --> 00:13:48,800
ones live in their generic views

00:13:46,250 --> 00:13:50,120
contains some simple views so a lot of

00:13:48,800 --> 00:13:52,160
sites do things like render a simple

00:13:50,120 --> 00:13:54,290
template render a model to a template

00:13:52,160 --> 00:13:55,580
render lists of models and there's

00:13:54,290 --> 00:13:57,740
common codes all those kind of things

00:13:55,580 --> 00:14:00,350
that lives in generic views so you can

00:13:57,740 --> 00:14:02,690
take them so of your generic site and

00:14:00,350 --> 00:14:04,630
just pull it over there and have all

00:14:02,690 --> 00:14:07,460
that code written for you

00:14:04,630 --> 00:14:11,300
CSRF is our cross-site request forgery

00:14:07,460 --> 00:14:13,700
protection cross-site request forgery is

00:14:11,300 --> 00:14:15,470
one of those attacks vectors on website

00:14:13,700 --> 00:14:17,150
that isn't very well understood it's

00:14:15,470 --> 00:14:19,370
very important and it can mean your

00:14:17,150 --> 00:14:21,200
users can get very nasty things done to

00:14:19,370 --> 00:14:24,200
them Jango ships with full support for

00:14:21,200 --> 00:14:25,900
CSRF we have done for a long time and

00:14:24,200 --> 00:14:28,070
I'll cover that again later in a bit

00:14:25,900 --> 00:14:31,280
that's been upgraded recently to be less

00:14:28,070 --> 00:14:32,390
evil than it used to be test is a

00:14:31,280 --> 00:14:35,060
testing framework which is very

00:14:32,390 --> 00:14:37,790
important you can do testing there's

00:14:35,060 --> 00:14:39,020
custom test handlers you can there's a

00:14:37,790 --> 00:14:41,540
custom test client we can do fake

00:14:39,020 --> 00:14:43,160
requests to Jango and you can do things

00:14:41,540 --> 00:14:45,260
like assert that the templates been used

00:14:43,160 --> 00:14:48,380
and look in the context of templates and

00:14:45,260 --> 00:14:51,350
things like that there's also the forms

00:14:48,380 --> 00:14:53,540
which forms as arranged into slider of

00:14:51,350 --> 00:14:56,150
widgets so widget could be a text area

00:14:53,540 --> 00:14:58,130
or a select box fields which then use

00:14:56,150 --> 00:14:59,480
one of those they have types so every

00:14:58,130 --> 00:15:01,540
sample had an integer field to put in a

00:14:59,480 --> 00:15:03,770
text area or because use it text input

00:15:01,540 --> 00:15:05,960
you have multi select fields and things

00:15:03,770 --> 00:15:07,760
like that form sets which is this idea

00:15:05,960 --> 00:15:10,820
of having many things so you can have

00:15:07,760 --> 00:15:13,070
you know up to four users or you can

00:15:10,820 --> 00:15:14,570
edit a list of things and models which

00:15:13,070 --> 00:15:16,130
is uh support for introspecting models

00:15:14,570 --> 00:15:18,080
and making forms automatically out of

00:15:16,130 --> 00:15:21,700
them so if you have a model we can read

00:15:18,080 --> 00:15:24,800
the field types and look what it is but

00:15:21,700 --> 00:15:26,510
basically since 2005 literally every

00:15:24,800 --> 00:15:28,310
piece of code in Django has been changed

00:15:26,510 --> 00:15:29,660
there's very little left from

00:15:28,310 --> 00:15:32,270
the original release that hasn't been

00:15:29,660 --> 00:15:34,340
touched by somebody in some places this

00:15:32,270 --> 00:15:36,380
is because the original code was a bit

00:15:34,340 --> 00:15:38,390
odd in other places is because

00:15:36,380 --> 00:15:40,279
requirements are changed over time and

00:15:38,390 --> 00:15:44,240
in other places because we've just

00:15:40,279 --> 00:15:45,890
expanded and what things can do but of

00:15:44,240 --> 00:15:47,779
the main classes talk is to go through

00:15:45,890 --> 00:15:49,670
well I think some of the good bits of

00:15:47,779 --> 00:15:51,380
Django are some of the bad bits and some

00:15:49,670 --> 00:15:52,400
of the really horrible bits that just

00:15:51,380 --> 00:15:53,029
should never been in there in the first

00:15:52,400 --> 00:15:57,050
place

00:15:53,029 --> 00:15:58,940
and also as I said before some of these

00:15:57,050 --> 00:16:00,470
often are historical and we've fixed

00:15:58,940 --> 00:16:02,320
them but I get to talk about them here

00:16:00,470 --> 00:16:05,570
cuz we fix them and I can sort of gloat

00:16:02,320 --> 00:16:07,460
other other ones of these are current

00:16:05,570 --> 00:16:08,870
issues in Django that we have yet to fix

00:16:07,460 --> 00:16:14,440
quickly they have even a time and

00:16:08,870 --> 00:16:17,060
infinite developers yeah there we are

00:16:14,440 --> 00:16:19,370
the nasty bits I promise will be fixed

00:16:17,060 --> 00:16:22,520
soon you know just don't protect me

00:16:19,370 --> 00:16:24,770
so the good things the main

00:16:22,520 --> 00:16:27,140
crowd-pleaser in Django is the admin a

00:16:24,770 --> 00:16:29,779
lot of people when they first comes

00:16:27,140 --> 00:16:31,550
Django the idea they can write about 20

00:16:29,779 --> 00:16:33,350
lines of code for model and add two or

00:16:31,550 --> 00:16:36,380
three lines to an admin hit go and then

00:16:33,350 --> 00:16:38,620
this big page appears they let you edit

00:16:36,380 --> 00:16:43,660
things straight away that's very handy

00:16:38,620 --> 00:16:46,370
the admin is often not used as is on

00:16:43,660 --> 00:16:47,540
end-user sites ladies a lot of time but

00:16:46,370 --> 00:16:50,000
even in development it can be a

00:16:47,540 --> 00:16:51,830
lifesaver because you can you know you

00:16:50,000 --> 00:16:53,030
can edit your test data you can do all

00:16:51,830 --> 00:16:54,680
that kind of stuff release the other

00:16:53,030 --> 00:16:58,370
hand to fiddle around a sequel console

00:16:54,680 --> 00:17:01,760
or a Python shell I can't tell you how

00:16:58,370 --> 00:17:02,750
many hours or days Gavin has saved me

00:17:01,760 --> 00:17:04,970
over the past three or four years

00:17:02,750 --> 00:17:06,740
working with Django just being able to

00:17:04,970 --> 00:17:09,980
visually edit and fiddle with my models

00:17:06,740 --> 00:17:11,449
and also a lot of clients have quite

00:17:09,980 --> 00:17:14,030
happy with the admin it provides it's

00:17:11,449 --> 00:17:15,319
quite sensible it's quite clean it

00:17:14,030 --> 00:17:20,329
doesn't do very much but there's lots of

00:17:15,319 --> 00:17:23,390
extensions for it the model layer this

00:17:20,329 --> 00:17:25,610
is often often derided part of Django

00:17:23,390 --> 00:17:28,010
people often say all those lots of other

00:17:25,610 --> 00:17:29,750
you know abstraction layers for prices

00:17:28,010 --> 00:17:31,640
and for databases there's they're all

00:17:29,750 --> 00:17:33,140
sequel object it's not so much anymore

00:17:31,640 --> 00:17:36,500
they're super alchemy there's lots of

00:17:33,140 --> 00:17:37,760
others but Django has a different

00:17:36,500 --> 00:17:40,460
philosophy first of all we call it the

00:17:37,760 --> 00:17:41,530
model layer it's not an ORM it's not

00:17:40,460 --> 00:17:44,160
particularly designed to do

00:17:41,530 --> 00:17:46,300
relational databases and there is

00:17:44,160 --> 00:17:49,030
partial support for things like MongoDB

00:17:46,300 --> 00:17:51,030
in there as well it is very much an

00:17:49,030 --> 00:17:52,810
abstraction away from that concept

00:17:51,030 --> 00:17:54,640
obviously relational things do leak

00:17:52,810 --> 00:17:57,790
through they have two following keys are

00:17:54,640 --> 00:18:00,790
in there but we look we like the sort of

00:17:57,790 --> 00:18:02,680
simplicity and the way it's designed and

00:18:00,790 --> 00:18:04,600
also back in 2005 there weren't that

00:18:02,680 --> 00:18:08,950
many other things around people often

00:18:04,600 --> 00:18:12,610
forget that Django is full of sensible

00:18:08,950 --> 00:18:15,700
abstractions so one of the things a lot

00:18:12,610 --> 00:18:17,110
of other places often don't have sort of

00:18:15,700 --> 00:18:20,050
younger frameworks or other frameworks

00:18:17,110 --> 00:18:22,690
or different languages is adoption to

00:18:20,050 --> 00:18:24,730
sort of opt out of having like database

00:18:22,690 --> 00:18:27,910
pack sessions or other things like that

00:18:24,730 --> 00:18:29,920
so not only is there a session different

00:18:27,910 --> 00:18:31,630
back-end so for example on larger sites

00:18:29,920 --> 00:18:33,550
you don't know sessions to be in a big

00:18:31,630 --> 00:18:34,840
something in like memcache or you want

00:18:33,550 --> 00:18:38,110
to be in sign cookies which is even more

00:18:34,840 --> 00:18:39,820
scalable caching there's memcache

00:18:38,110 --> 00:18:42,000
there's Redis says on file there's in

00:18:39,820 --> 00:18:45,550
databases all sorts of options for that

00:18:42,000 --> 00:18:47,200
email backends we've just changed so you

00:18:45,550 --> 00:18:49,300
don't have to send bias and CP anymore

00:18:47,200 --> 00:18:52,930
especially for non-local blocks

00:18:49,300 --> 00:18:55,600
developing then you may not have an SMTP

00:18:52,930 --> 00:18:58,090
support your laptop may not know what

00:18:55,600 --> 00:18:59,560
send mail even is so the idea of

00:18:58,090 --> 00:19:00,850
printing to console rather than sending

00:18:59,560 --> 00:19:05,320
email and things like that is really

00:19:00,850 --> 00:19:06,460
handy geo Django is one of my favorite

00:19:05,320 --> 00:19:08,620
parts of Janko

00:19:06,460 --> 00:19:09,970
it was co-opted into Django only just

00:19:08,620 --> 00:19:12,280
before the one point not release used to

00:19:09,970 --> 00:19:14,890
be a set for a project but for those who

00:19:12,280 --> 00:19:17,380
aren't familiar with geospatial editing

00:19:14,890 --> 00:19:20,470
geo jangly lets you define areas or

00:19:17,380 --> 00:19:23,050
points or lines so you can sample areas

00:19:20,470 --> 00:19:25,630
can be counties or administrative

00:19:23,050 --> 00:19:27,460
regions or countries lines could be

00:19:25,630 --> 00:19:31,440
roads or endpoints could be a sort of

00:19:27,460 --> 00:19:34,420
places and the idea is that you can

00:19:31,440 --> 00:19:36,160
define models like you usually do so I

00:19:34,420 --> 00:19:38,950
can say here's here's some lakes they

00:19:36,160 --> 00:19:41,560
have a name they have a rate which is

00:19:38,950 --> 00:19:44,470
their rate of Phil they have a geom

00:19:41,560 --> 00:19:46,240
which is their actual polygon and they

00:19:44,470 --> 00:19:47,530
can have and then the objects line is so

00:19:46,240 --> 00:19:51,880
it knows how to do geospatial queries

00:19:47,530 --> 00:19:54,730
and then we can say get a lake with ID 3

00:19:51,880 --> 00:19:55,309
and we can then ask for if this lake

00:19:54,730 --> 00:19:57,259
contains

00:19:55,309 --> 00:19:59,120
self which it does and only can you do

00:19:57,259 --> 00:20:02,029
this you can define area so I can I

00:19:59,120 --> 00:20:04,100
could get the polygon of the USA and say

00:20:02,029 --> 00:20:07,070
tell me all the lakes are inside this

00:20:04,100 --> 00:20:10,610
polygon and then post post gears which

00:20:07,070 --> 00:20:12,049
is the Postgres rule get GIS back-end my

00:20:10,610 --> 00:20:14,360
sequel has basic support for rectangle

00:20:12,049 --> 00:20:16,460
ones and a few other backends can take

00:20:14,360 --> 00:20:18,200
that query pass it quite efficiently and

00:20:16,460 --> 00:20:20,389
return me quite quickly all the lakes

00:20:18,200 --> 00:20:23,509
are inside the USA again you can do it

00:20:20,389 --> 00:20:25,309
with points so I can ask for all events

00:20:23,509 --> 00:20:26,539
that have happened inside London and it

00:20:25,309 --> 00:20:29,659
will just give me all the things that

00:20:26,539 --> 00:20:30,889
inside that area you also gives you a

00:20:29,659 --> 00:20:32,720
very nice admin interface for editing

00:20:30,889 --> 00:20:34,070
these so if you're unsure where South

00:20:32,720 --> 00:20:35,509
Africa is you can pop up in the app the

00:20:34,070 --> 00:20:38,419
model admin and say oh that that's South

00:20:35,509 --> 00:20:39,619
Africa and you can also edit them and

00:20:38,419 --> 00:20:41,570
pull the points around and various

00:20:39,619 --> 00:20:44,950
things so you can change what things

00:20:41,570 --> 00:20:47,360
look like and it's very useful testing

00:20:44,950 --> 00:20:50,450
Django has some very good debugging

00:20:47,360 --> 00:20:52,580
tools so no only do we have managed up

00:20:50,450 --> 00:20:55,039
pie shell for those I'm familiar with

00:20:52,580 --> 00:20:58,220
that that launch is a Python interactive

00:20:55,039 --> 00:20:59,779
shell or a repple inside your Django

00:20:58,220 --> 00:21:01,639
project so you can import your models

00:20:59,779 --> 00:21:03,049
you can play around with them you can

00:21:01,639 --> 00:21:05,119
test that your functions you can test

00:21:03,049 --> 00:21:08,049
out your filters or do all this kind of

00:21:05,119 --> 00:21:12,019
stuff we have good testing tools as well

00:21:08,049 --> 00:21:14,869
Django has a very strong testing

00:21:12,019 --> 00:21:16,999
community people are often derided for

00:21:14,869 --> 00:21:19,970
not doing tests and there was in fact a

00:21:16,999 --> 00:21:21,499
Django - project two years ago that I

00:21:19,970 --> 00:21:23,960
think was called Django pants for some

00:21:21,499 --> 00:21:26,119
reason that took applications on pipe I

00:21:23,960 --> 00:21:27,200
downloaded them and then test it and

00:21:26,119 --> 00:21:28,759
then see how many tests they had and

00:21:27,200 --> 00:21:30,409
check their coverage and we have your

00:21:28,759 --> 00:21:32,720
writing ever A to C which is quite nice

00:21:30,409 --> 00:21:35,419
but Jiang has quite a lot of testing

00:21:32,720 --> 00:21:38,659
tools it has a fake client so you can do

00:21:35,419 --> 00:21:40,249
fake requests since your application and

00:21:38,659 --> 00:21:41,990
see what comes back and so rather than

00:21:40,249 --> 00:21:44,360
just testing that it returns 200 okay

00:21:41,990 --> 00:21:46,999
you can test that if I asked for the

00:21:44,360 --> 00:21:49,129
page about ponies using event uses a

00:21:46,999 --> 00:21:50,600
pony's template it returns the context

00:21:49,129 --> 00:21:53,269
of the right things in it and all those

00:21:50,600 --> 00:21:55,159
kind of things and also the as I said

00:21:53,269 --> 00:21:57,139
the culture of debugging and testing

00:21:55,159 --> 00:21:59,179
around Django is very good and then only

00:21:57,139 --> 00:22:01,639
does call Django have this idea of

00:21:59,179 --> 00:22:03,139
testing and you know and every every

00:22:01,639 --> 00:22:06,049
single bug we have must have a test that

00:22:03,139 --> 00:22:07,369
proves it's been fixed but there's also

00:22:06,049 --> 00:22:08,990
third-party tools for debugging and

00:22:07,369 --> 00:22:09,510
testing and things like Django debug

00:22:08,990 --> 00:22:11,340
toolbar

00:22:09,510 --> 00:22:15,990
show you on your site what's been going

00:22:11,340 --> 00:22:17,280
on see the new CSI reflection is nice

00:22:15,990 --> 00:22:18,690
I had to qualify the new one because the

00:22:17,280 --> 00:22:21,690
old one is in my ugly section as I tell

00:22:18,690 --> 00:22:25,380
you later so the new CSI protection is

00:22:21,690 --> 00:22:27,180
very nice you can do a form say put a

00:22:25,380 --> 00:22:29,250
token here and then a middle well we'll

00:22:27,180 --> 00:22:31,950
check was matically all your posts are

00:22:29,250 --> 00:22:34,380
protected a quick introduction for those

00:22:31,950 --> 00:22:37,290
who don't know what CSRF is if your

00:22:34,380 --> 00:22:38,490
application has a post view so if you

00:22:37,290 --> 00:22:42,090
say if you post here will delete

00:22:38,490 --> 00:22:43,860
something then evil comm can have a form

00:22:42,090 --> 00:22:46,050
that posts to the right URL in your site

00:22:43,860 --> 00:22:48,240
and if the users logged in you can just

00:22:46,050 --> 00:22:49,650
sort of auto post that in an iframe in

00:22:48,240 --> 00:22:50,390
the background there's all deleting

00:22:49,650 --> 00:22:52,980
stuff over here

00:22:50,390 --> 00:22:55,470
so with CSRF the idea is that you have

00:22:52,980 --> 00:22:57,900
tokens and so whenever your site makes

00:22:55,470 --> 00:23:00,030
the webpage it puts us open and in its

00:22:57,900 --> 00:23:02,900
form so it can prove that the form

00:23:00,030 --> 00:23:05,190
that's being submitted came from itself

00:23:02,900 --> 00:23:06,900
so I'll go why later the weights very

00:23:05,190 --> 00:23:08,820
important that's the case but the new

00:23:06,900 --> 00:23:11,070
one is quite nice and you can turn it

00:23:08,820 --> 00:23:12,960
off optionally on different parts of the

00:23:11,070 --> 00:23:14,700
site the old one has to be on or off

00:23:12,960 --> 00:23:18,000
globally a new one you can say it's on

00:23:14,700 --> 00:23:20,160
for the admin and off everywhere else or

00:23:18,000 --> 00:23:22,050
two escaping this is a major

00:23:20,160 --> 00:23:24,420
introduction Django about one point

00:23:22,050 --> 00:23:27,690
naught was the idea that all strings and

00:23:24,420 --> 00:23:30,240
templates are always escaped HTML inside

00:23:27,690 --> 00:23:31,590
them unless you say otherwise so this is

00:23:30,240 --> 00:23:33,630
this immediately stops a lot of

00:23:31,590 --> 00:23:35,820
cross-site scripting attacks in in their

00:23:33,630 --> 00:23:38,520
footsteps it's not perfect security

00:23:35,820 --> 00:23:40,530
design it won't fix all attacks but it's

00:23:38,520 --> 00:23:42,750
it really does help stop a lot of people

00:23:40,530 --> 00:23:45,630
new to django or people who is sort of

00:23:42,750 --> 00:23:46,890
coding in a hurry have deadlines and it

00:23:45,630 --> 00:23:49,290
makes you feel safe about your code you

00:23:46,890 --> 00:23:50,910
know that if you render this variable it

00:23:49,290 --> 00:23:53,820
even has a script tag nothing will

00:23:50,910 --> 00:23:55,980
happen to show so just show script so

00:23:53,820 --> 00:23:57,990
that's really handy and we imagine

00:23:55,980 --> 00:23:59,190
introducing them nice mostly non

00:23:57,990 --> 00:24:02,550
backwards compatible most of that was

00:23:59,190 --> 00:24:04,380
compatible way the view API simplicity

00:24:02,550 --> 00:24:06,600
is something that some of the cool

00:24:04,380 --> 00:24:09,270
critters are very happy about in Django

00:24:06,600 --> 00:24:11,190
a view is just any callable that takes a

00:24:09,270 --> 00:24:12,930
request and returns response as matter

00:24:11,190 --> 00:24:14,820
what it is can be a function it can be a

00:24:12,930 --> 00:24:17,880
class with the call method in Python it

00:24:14,820 --> 00:24:20,130
can be something else but the idea is

00:24:17,880 --> 00:24:21,870
that anything does this is fine so views

00:24:20,130 --> 00:24:22,590
a tradition and younger their function

00:24:21,870 --> 00:24:24,870
so you choose

00:24:22,590 --> 00:24:27,179
but recently we start having class-based

00:24:24,870 --> 00:24:28,740
views so you can have a view you can

00:24:27,179 --> 00:24:30,690
then inherit from it and inherit most of

00:24:28,740 --> 00:24:31,770
the behavior and use the sub methods but

00:24:30,690 --> 00:24:33,630
you can change a little bit of the

00:24:31,770 --> 00:24:36,630
behavior as well so if I inherit a

00:24:33,630 --> 00:24:38,490
ListView I can change sort of the query

00:24:36,630 --> 00:24:40,260
said it uses all the filters uses the

00:24:38,490 --> 00:24:41,640
models but then get all the other code

00:24:40,260 --> 00:24:43,799
for free rather than rewriting their new

00:24:41,640 --> 00:24:46,710
function and this kind of flexibility in

00:24:43,799 --> 00:24:49,529
Django is very key we really do like the

00:24:46,710 --> 00:24:51,029
idea that we're not imposing one

00:24:49,529 --> 00:24:51,990
particular way on people but we

00:24:51,029 --> 00:24:53,210
generally try and push you in the right

00:24:51,990 --> 00:24:55,679
direction

00:24:53,210 --> 00:24:57,990
- I think was a good choice obviously

00:24:55,679 --> 00:25:01,140
I'm biased here there are many other

00:24:57,990 --> 00:25:02,340
good languages as well but it's it's you

00:25:01,140 --> 00:25:04,080
know compared to something like C or

00:25:02,340 --> 00:25:06,840
Java it's a lot easier and quicker to

00:25:04,080 --> 00:25:08,760
write things in dynamically I'm sure

00:25:06,840 --> 00:25:10,520
I've know how to define but I like

00:25:08,760 --> 00:25:13,169
Python so you know I'm allotted time

00:25:10,520 --> 00:25:15,929
multiple database supports very nice

00:25:13,169 --> 00:25:18,390
this came Jang one point two and was in

00:25:15,929 --> 00:25:18,840
fact brought about had the first django

00:25:18,390 --> 00:25:20,640
con

00:25:18,840 --> 00:25:22,590
Cal Henderson one of the founders of

00:25:20,640 --> 00:25:23,940
Flickr still on stage and did a talk

00:25:22,590 --> 00:25:26,460
called why I hate Django which is

00:25:23,940 --> 00:25:27,840
fantastic we have a tradition in Django

00:25:26,460 --> 00:25:30,179
of having talks at conferences of why I

00:25:27,840 --> 00:25:34,200
hate Django is why every year it's very

00:25:30,179 --> 00:25:35,520
important and of cowls points his major

00:25:34,200 --> 00:25:38,850
point was that there was no support for

00:25:35,520 --> 00:25:40,380
more than one database in Django one

00:25:38,850 --> 00:25:42,179
point notes you connect to one database

00:25:40,380 --> 00:25:43,020
in that was it there's no support for a

00:25:42,179 --> 00:25:45,480
lot of different ones for real

00:25:43,020 --> 00:25:48,120
difference of rights and it cites a big

00:25:45,480 --> 00:25:49,500
scale you want one day space - right -

00:25:48,120 --> 00:25:51,179
and the master then you read from the

00:25:49,500 --> 00:25:51,720
slaves and various other different

00:25:51,179 --> 00:25:54,210
things as well

00:25:51,720 --> 00:25:56,490
or sharding by different some different

00:25:54,210 --> 00:25:58,080
kinds of table and so multi TV is a very

00:25:56,490 --> 00:26:00,720
important thing it's very nicely done

00:25:58,080 --> 00:26:02,010
it's not most full at all if you're

00:26:00,720 --> 00:26:04,320
using my database you'd never know it's

00:26:02,010 --> 00:26:06,360
there and as soon as you want it it

00:26:04,320 --> 00:26:08,039
turns up you can do things with it it's

00:26:06,360 --> 00:26:10,620
not very complex it's got no built-in

00:26:08,039 --> 00:26:13,559
support for sharding or any kind of sort

00:26:10,620 --> 00:26:14,880
of readwrite balancing but the idea is

00:26:13,559 --> 00:26:16,200
that you're doing that stuff you're

00:26:14,880 --> 00:26:18,360
probably quite large you can afford to

00:26:16,200 --> 00:26:20,460
correct yourself anything we shipped

00:26:18,360 --> 00:26:22,230
wouldn't fit for most people it's

00:26:20,460 --> 00:26:24,450
probably you know we'd rather you do it

00:26:22,230 --> 00:26:26,460
the right way for you following shipping

00:26:24,450 --> 00:26:29,580
some code that worked all right half the

00:26:26,460 --> 00:26:31,500
time we have a very small actual core

00:26:29,580 --> 00:26:33,210
you can turn off nearly all of Django

00:26:31,500 --> 00:26:34,500
the admin the authentication the

00:26:33,210 --> 00:26:36,519
sessions all that kind of stuff and

00:26:34,500 --> 00:26:39,519
we're left with basically just URL rizal

00:26:36,519 --> 00:26:41,320
in a view handler not many people do

00:26:39,519 --> 00:26:43,089
I've done it once in the past but it is

00:26:41,320 --> 00:26:45,159
quite nicely you can turn off bits and

00:26:43,089 --> 00:26:46,239
the admin especially is use of a turn

00:26:45,159 --> 00:26:48,580
off if you've gone your own admin

00:26:46,239 --> 00:26:50,139
sessions users turned off you're doing a

00:26:48,580 --> 00:26:52,749
stateless websites you save some render

00:26:50,139 --> 00:26:55,059
time internalization can be turned off

00:26:52,749 --> 00:26:58,450
if like me you do mostly English sites I

00:26:55,059 --> 00:27:00,009
do do some missing Malaysian ones and

00:26:58,450 --> 00:27:03,330
you know it's it's nice to have that

00:27:00,009 --> 00:27:06,149
kind of flexibility and finally

00:27:03,330 --> 00:27:08,409
documentation I think is very important

00:27:06,149 --> 00:27:10,119
we have very good documentation it's

00:27:08,409 --> 00:27:11,469
very extensive it's not that well

00:27:10,119 --> 00:27:14,679
organized perhaps there's a lot of it

00:27:11,469 --> 00:27:16,869
there and there's a culture of

00:27:14,679 --> 00:27:18,999
documentation if you submit a bug patch

00:27:16,869 --> 00:27:20,320
to Jango it will not be accepted has

00:27:18,999 --> 00:27:22,570
documentation for what you've added if

00:27:20,320 --> 00:27:24,369
there's any new features a test which

00:27:22,570 --> 00:27:26,529
means that any new features the Khaled

00:27:24,369 --> 00:27:27,999
always had documentation and in

00:27:26,529 --> 00:27:29,919
third-party applications if you don't

00:27:27,999 --> 00:27:31,779
have a documentation you're derided it's

00:27:29,919 --> 00:27:33,129
a big strong thing we'd like to make

00:27:31,779 --> 00:27:35,099
sure that people know how to use this

00:27:33,129 --> 00:27:37,539
stuff because it's all very well having

00:27:35,099 --> 00:27:38,739
these all these cool programs but unless

00:27:37,539 --> 00:27:42,519
you can appeal them all to do with them

00:27:38,739 --> 00:27:43,529
you know it's not very useful that

00:27:42,519 --> 00:27:46,089
wasn't the finally this is to finally

00:27:43,529 --> 00:27:47,649
well possibly not the community I think

00:27:46,089 --> 00:27:49,509
is very important jiangha has a very

00:27:47,649 --> 00:27:51,369
strong community we have we'd have three

00:27:49,509 --> 00:27:52,749
years of conferences now they keep

00:27:51,369 --> 00:27:54,239
getting bigger we care to keep moving to

00:27:52,749 --> 00:27:56,259
different hotels and making them bigger

00:27:54,239 --> 00:27:57,609
and there's a very strong sense of

00:27:56,259 --> 00:27:58,509
community we have lots of third-party

00:27:57,609 --> 00:28:00,959
applications

00:27:58,509 --> 00:28:02,619
lots of people using it lots of tips and

00:28:00,959 --> 00:28:04,089
generally it's it and they're really

00:28:02,619 --> 00:28:06,549
friendly as well and it's nice of the

00:28:04,089 --> 00:28:08,919
community and it also means that the

00:28:06,549 --> 00:28:11,289
core development team can grow bigger we

00:28:08,919 --> 00:28:14,950
can get more stuff done and it can

00:28:11,289 --> 00:28:17,139
generally be quite quite good Jango is

00:28:14,950 --> 00:28:19,690
also not too high level we don't take

00:28:17,139 --> 00:28:22,419
one method of doing stuff and impose it

00:28:19,690 --> 00:28:24,519
so I'm not I'm saying it's a bad day but

00:28:22,419 --> 00:28:26,709
you know certain CMS's things like true

00:28:24,519 --> 00:28:27,609
Powell for example impose a certain way

00:28:26,709 --> 00:28:29,320
of doing things

00:28:27,609 --> 00:28:31,389
and in Drupal you basically you start

00:28:29,320 --> 00:28:33,579
off with your thing and you sort of edit

00:28:31,389 --> 00:28:35,339
down and pause and pare away things and

00:28:33,579 --> 00:28:37,509
Johnny you still the bottom you build up

00:28:35,339 --> 00:28:39,399
for things you're doing Jango that

00:28:37,509 --> 00:28:41,259
aren't necessarily just content sites

00:28:39,399 --> 00:28:42,820
this is fine if you want that content

00:28:41,259 --> 00:28:44,559
management system there are ones built

00:28:42,820 --> 00:28:46,809
on top of Jango but Jango is more

00:28:44,559 --> 00:28:49,299
framework for general web applications

00:28:46,809 --> 00:28:49,780
if you're doing a site that has mapping

00:28:49,299 --> 00:28:52,450
along with

00:28:49,780 --> 00:28:53,830
with some snazzy stuff then you can sort

00:28:52,450 --> 00:28:55,540
of build them up and choose the right

00:28:53,830 --> 00:28:58,450
part from the start and I think that's

00:28:55,540 --> 00:29:01,410
really nice now the more interesting

00:28:58,450 --> 00:29:05,440
part the bad this is as much interesting

00:29:01,410 --> 00:29:09,460
so the old CSF support was fascinating

00:29:05,440 --> 00:29:11,970
the awful so as with most bad parts in

00:29:09,460 --> 00:29:15,760
Django it used a regular expression and

00:29:11,970 --> 00:29:17,080
basically it looked for the last tag

00:29:15,760 --> 00:29:19,180
well it's not very good here there's a

00:29:17,080 --> 00:29:21,850
the last form tag proposing film take on

00:29:19,180 --> 00:29:24,880
any form it took that and you replace it

00:29:21,850 --> 00:29:26,410
with a CSRF token and the closed form

00:29:24,880 --> 00:29:28,660
tag which is all fine so every film on

00:29:26,410 --> 00:29:31,860
the page gets a token saying what it is

00:29:28,660 --> 00:29:34,240
that's all well and good however also

00:29:31,860 --> 00:29:36,790
for forms that post it outside the page

00:29:34,240 --> 00:29:40,120
say to evil calm isn't this example it

00:29:36,790 --> 00:29:41,860
also included the token this is not good

00:29:40,120 --> 00:29:43,810
because that means evil calm has a token

00:29:41,860 --> 00:29:45,460
that's valid for you for that user on

00:29:43,810 --> 00:29:47,620
your site so they can then take that

00:29:45,460 --> 00:29:49,840
post directly back to your site and do a

00:29:47,620 --> 00:29:52,720
CSRF attack and if using the admin that

00:29:49,840 --> 00:29:55,960
means they can post to slash admin /

00:29:52,720 --> 00:29:57,460
course / user / delete or something and

00:29:55,960 --> 00:29:58,780
then stop deleting your admin users or

00:29:57,460 --> 00:30:01,000
even post their own admin user or

00:29:58,780 --> 00:30:03,010
various other things so thankfully this

00:30:01,000 --> 00:30:04,540
has got rid of eventually you can still

00:30:03,010 --> 00:30:06,130
turn it on it's called legacy now

00:30:04,540 --> 00:30:07,840
there's a very large warning

00:30:06,130 --> 00:30:09,220
documentation saying don't do this it's

00:30:07,840 --> 00:30:11,830
probably very stupid because you can get

00:30:09,220 --> 00:30:13,090
attacked by evil sites but if you don't

00:30:11,830 --> 00:30:16,120
post outside your sites like the first

00:30:13,090 --> 00:30:17,200
people did this didn't it's fine SEMA

00:30:16,120 --> 00:30:19,900
changes is always been a problem in

00:30:17,200 --> 00:30:20,290
Django in Django when you make a new

00:30:19,900 --> 00:30:22,780
model

00:30:20,290 --> 00:30:23,860
you've unsink t be a new table appears

00:30:22,780 --> 00:30:25,720
everybody's happy

00:30:23,860 --> 00:30:27,610
if you add a new column if you delete a

00:30:25,720 --> 00:30:29,890
column if you change the constraints

00:30:27,610 --> 00:30:33,130
Django itself just goes mm-hmm and

00:30:29,890 --> 00:30:34,390
doesn't do anything so luckily that I've

00:30:33,130 --> 00:30:35,770
been fixing this for the last two years

00:30:34,390 --> 00:30:37,780
providing an external third-party

00:30:35,770 --> 00:30:39,190
application called South there are the

00:30:37,780 --> 00:30:42,100
ones 2d migrations

00:30:39,190 --> 00:30:44,260
I forget some other ones Django

00:30:42,100 --> 00:30:45,730
evolution that do the same thing but I

00:30:44,260 --> 00:30:47,830
think this was kind of a mission from

00:30:45,730 --> 00:30:49,770
Django at the start adding columns and

00:30:47,830 --> 00:30:52,240
deleting columns is something I do a lot

00:30:49,770 --> 00:30:54,880
my schema doesn't start off fixed in

00:30:52,240 --> 00:30:57,250
stone it's like you know it presumes you

00:30:54,880 --> 00:30:58,630
don't want a UML diagram and then draw

00:30:57,250 --> 00:30:59,679
your models from that rows I just sort

00:30:58,630 --> 00:31:01,360
of sit there hacking about models

00:30:59,679 --> 00:31:02,890
changing types of fields I think

00:31:01,360 --> 00:31:04,540
constraints Lego

00:31:02,890 --> 00:31:08,559
so I think the lack of that was a bit

00:31:04,540 --> 00:31:10,030
bad the plan is hopefully to get some

00:31:08,559 --> 00:31:12,520
parts of schema training into SAP into

00:31:10,030 --> 00:31:14,470
Django in a release or through loses

00:31:12,520 --> 00:31:17,700
time but there's no fixed timeline or

00:31:14,470 --> 00:31:22,510
feature set for that so I'd wait and see

00:31:17,700 --> 00:31:25,390
the template implementation is dodgy the

00:31:22,510 --> 00:31:27,490
him-8 so those of you've done parsing of

00:31:25,390 --> 00:31:29,710
languages know that you have a tokenizer

00:31:27,490 --> 00:31:32,740
and then a you know or lecture and then

00:31:29,710 --> 00:31:35,049
a parser basically Django's tokenizer is

00:31:32,740 --> 00:31:37,540
two regular expressions and it's parser

00:31:35,049 --> 00:31:40,500
is basically non-existent it can't cope

00:31:37,540 --> 00:31:42,880
with anyhow nesting of comments living

00:31:40,500 --> 00:31:44,740
it's also not very efficient to doing

00:31:42,880 --> 00:31:46,750
includes it doesn't compile templates

00:31:44,740 --> 00:31:49,960
just interprets them it's generally

00:31:46,750 --> 00:31:53,020
quite slow one of the old big sites that

00:31:49,960 --> 00:31:55,419
use Django before they went away had

00:31:53,020 --> 00:31:57,220
about 200 includes in every template

00:31:55,419 --> 00:31:59,410
page and there only took about 1/2

00:31:57,220 --> 00:32:01,630
seconds sometimes so it's really not

00:31:59,410 --> 00:32:03,040
brilliant with its Pugliese kind of been

00:32:01,630 --> 00:32:04,870
bolted on and patched arounds there's

00:32:03,040 --> 00:32:05,950
now a caching template renderer but

00:32:04,870 --> 00:32:08,169
that's kind of not really the solution

00:32:05,950 --> 00:32:10,179
to the problem there have been

00:32:08,169 --> 00:32:13,809
discussions of possibly improving it a

00:32:10,179 --> 00:32:15,700
bit more inside but the problem is it's

00:32:13,809 --> 00:32:17,650
very hard to change while still being a

00:32:15,700 --> 00:32:18,940
hundred seven backwards-compatible which

00:32:17,650 --> 00:32:20,440
of course django is very important

00:32:18,940 --> 00:32:21,610
because people rely on us not to just

00:32:20,440 --> 00:32:24,100
change things that need their feet and

00:32:21,610 --> 00:32:27,220
that means they can't upgrade but

00:32:24,100 --> 00:32:32,080
hopefully we'll fix that soon ah the

00:32:27,220 --> 00:32:33,640
ugly even better magic django when it

00:32:32,080 --> 00:32:35,620
was first released in 2005 has a lot of

00:32:33,640 --> 00:32:36,490
magic you define models they magically

00:32:35,620 --> 00:32:38,350
appeared over here in a different

00:32:36,490 --> 00:32:39,910
namespace and when you import them from

00:32:38,350 --> 00:32:41,549
you define template act they magically

00:32:39,910 --> 00:32:44,380
appear over here

00:32:41,549 --> 00:32:45,520
this wasn't Britta Klee good and people

00:32:44,380 --> 00:32:47,440
did know how things appeared you can

00:32:45,520 --> 00:32:48,820
trace them back very easily if a model

00:32:47,440 --> 00:32:51,669
just appeared in Django dot metal you

00:32:48,820 --> 00:32:53,230
had no idea it came from and so there

00:32:51,669 --> 00:32:55,090
was a very popular thing called the

00:32:53,230 --> 00:32:57,150
magic removal where all the magic was

00:32:55,090 --> 00:33:00,370
taken out Django more motions the magic

00:32:57,150 --> 00:33:01,960
so these days is a lot better and you

00:33:00,370 --> 00:33:03,100
can tell where things come from you can

00:33:01,960 --> 00:33:04,390
easily trace back areas to where they

00:33:03,100 --> 00:33:06,850
actually came from more than some other

00:33:04,390 --> 00:33:10,030
module but that was quite nasty for a

00:33:06,850 --> 00:33:13,540
while too many regular expressions

00:33:10,030 --> 00:33:15,940
I love regular expressions but they can

00:33:13,540 --> 00:33:16,720
get a bit long so there are several very

00:33:15,940 --> 00:33:19,090
long regular

00:33:16,720 --> 00:33:22,659
in the core Django Code the URL was over

00:33:19,090 --> 00:33:24,640
has one runs make expressions they're

00:33:22,659 --> 00:33:26,320
probably fine much we should but you

00:33:24,640 --> 00:33:27,669
know that's that's general generally

00:33:26,320 --> 00:33:29,409
said to be alright

00:33:27,669 --> 00:33:30,940
but one of our most recent security

00:33:29,409 --> 00:33:33,190
phone security found that he's in sort

00:33:30,940 --> 00:33:37,110
of lost mid last year was probably the

00:33:33,190 --> 00:33:39,640
email regex so this is our email regex

00:33:37,110 --> 00:33:40,960
the top one is vulnerable to a DDoS

00:33:39,640 --> 00:33:43,270
attack the bottom one is not vulnerable

00:33:40,960 --> 00:33:47,860
to a DDoS attack if you can spot the

00:33:43,270 --> 00:33:50,710
difference the difference is actually

00:33:47,860 --> 00:33:53,470
this clause here which limits the length

00:33:50,710 --> 00:33:55,210
of this particular query if you don't

00:33:53,470 --> 00:33:57,340
have that there your regular expression

00:33:55,210 --> 00:33:58,809
and it does backtracking and longer the

00:33:57,340 --> 00:34:00,970
domain string you put in the longer it

00:33:58,809 --> 00:34:03,010
takes if you put three or four hundred

00:34:00,970 --> 00:34:06,640
characters in the top one would run for

00:34:03,010 --> 00:34:10,030
several minutes and just died so yeah

00:34:06,640 --> 00:34:13,389
the problem is and we spent a good three

00:34:10,030 --> 00:34:14,320
or four days on and off trying to work

00:34:13,389 --> 00:34:17,379
out what the hell was wrong with how to

00:34:14,320 --> 00:34:22,530
fix this because it's not particularly

00:34:17,379 --> 00:34:25,089
editable yes so I think we should have

00:34:22,530 --> 00:34:27,510
for an email validation does the string

00:34:25,089 --> 00:34:29,500
contain ant yes it's probably an email

00:34:27,510 --> 00:34:31,270
because you know because we can't test

00:34:29,500 --> 00:34:32,349
whether that actually isn't that

00:34:31,270 --> 00:34:33,460
provided email the other end of that

00:34:32,349 --> 00:34:36,490
address there's just test whether it

00:34:33,460 --> 00:34:38,649
looks like one and most users you know

00:34:36,490 --> 00:34:41,080
most errors are going to be typing user

00:34:38,649 --> 00:34:44,560
names in their web addresses and I just

00:34:41,080 --> 00:34:46,570
think getting this kind of checking is a

00:34:44,560 --> 00:34:48,520
bit excessive also it only allows them

00:34:46,570 --> 00:34:50,770
eight T of these that are six characters

00:34:48,520 --> 00:34:52,210
long so if you have so dot museum is

00:34:50,770 --> 00:34:53,619
fine but if we invent a seven letter one

00:34:52,210 --> 00:34:58,119
all the old versions are trying aren't

00:34:53,619 --> 00:34:59,980
gonna work so yeah not brilliant off is

00:34:58,119 --> 00:35:02,470
a big bug bear of mine this is like a

00:34:59,980 --> 00:35:05,800
personal vendetta thing male so off

00:35:02,470 --> 00:35:07,570
inside Django is fixed so it's fixed to

00:35:05,800 --> 00:35:08,980
having a first name and last name which

00:35:07,570 --> 00:35:11,650
is already stupid for internalization

00:35:08,980 --> 00:35:13,500
you know first time and last name is not

00:35:11,650 --> 00:35:15,820
is a very Western things to start with

00:35:13,500 --> 00:35:18,640
is fixed are having a single email

00:35:15,820 --> 00:35:22,030
address and a password the email address

00:35:18,640 --> 00:35:23,410
is required as is the password and it's

00:35:22,030 --> 00:35:25,270
also fixed having a few of attributes

00:35:23,410 --> 00:35:27,339
and you can't change this you can't go

00:35:25,270 --> 00:35:29,410
to Django and go I also want an age

00:35:27,339 --> 00:35:30,460
field or I also wanted a URL of our

00:35:29,410 --> 00:35:31,450
website field

00:35:30,460 --> 00:35:34,330
you have to make a different model than

00:35:31,450 --> 00:35:35,830
nicotine and there's no way of getting

00:35:34,330 --> 00:35:37,450
rid of off and doing your own without

00:35:35,830 --> 00:35:39,430
completely removing it because you can't

00:35:37,450 --> 00:35:41,910
remove it and making your own one and

00:35:39,430 --> 00:35:43,780
then replicating all the same api or

00:35:41,910 --> 00:35:45,970
writing your own code that use a

00:35:43,780 --> 00:35:48,040
different API and there's been some

00:35:45,970 --> 00:35:49,810
discussion about how to make this better

00:35:48,040 --> 00:35:51,880
there's been the idea of extendable

00:35:49,810 --> 00:35:53,230
models but you know doing that anyway

00:35:51,880 --> 00:35:56,410
that's not crazy is very difficult

00:35:53,230 --> 00:35:58,630
we don't want much crazy crazy as bad so

00:35:56,410 --> 00:35:59,740
it's a difficult problem and it's a bit

00:35:58,630 --> 00:36:01,359
ugly because you end up with these

00:35:59,740 --> 00:36:03,400
one-to-one relationships that really

00:36:01,359 --> 00:36:05,500
should be one table of like a profile

00:36:03,400 --> 00:36:07,540
model and there's even a hack where you

00:36:05,500 --> 00:36:08,920
say this is my profile model and Jango

00:36:07,540 --> 00:36:10,780
had special shortcuts to get it from a

00:36:08,920 --> 00:36:14,859
user but it's just to work around of the

00:36:10,780 --> 00:36:16,839
problem the old template language was

00:36:14,859 --> 00:36:19,960
fascinating so rather than having an if

00:36:16,839 --> 00:36:22,780
tag that just did you know equal Z less

00:36:19,960 --> 00:36:24,400
than greater than na that was bad the if

00:36:22,780 --> 00:36:26,530
tag dusted boolean testing took one

00:36:24,400 --> 00:36:28,300
variable if you wanted ooh equals there

00:36:26,530 --> 00:36:30,849
was an if equal tag that's fine right no

00:36:28,300 --> 00:36:33,760
if equal a B you don't do not equal to

00:36:30,849 --> 00:36:36,490
yes do if not equal and January every

00:36:33,760 --> 00:36:38,589
tag ends with an end tag name and so if

00:36:36,490 --> 00:36:40,510
you want to do lots of negation negated

00:36:38,589 --> 00:36:41,980
equal expressions your code and tellers

00:36:40,510 --> 00:36:45,310
are littered with MZ if not equal which

00:36:41,980 --> 00:36:49,390
is not the best ways to ifs thankfully

00:36:45,310 --> 00:36:51,130
in 1.2 we don't know 31.2 winter smart

00:36:49,390 --> 00:36:53,230
if which actually do some modern things

00:36:51,130 --> 00:36:55,839
as double equals and it calls in less

00:36:53,230 --> 00:36:56,950
than and things like that but this is a

00:36:55,839 --> 00:36:58,359
site you know the template language

00:36:56,950 --> 00:37:02,320
shouldn't have that much logic but I

00:36:58,359 --> 00:37:05,109
think that's going a bit too far but the

00:37:02,320 --> 00:37:06,520
question thing here is you know Chang

00:37:05,109 --> 00:37:07,720
has a lot of problems we've had a lot of

00:37:06,520 --> 00:37:10,510
them and we sold a lot of them as well

00:37:07,720 --> 00:37:10,900
all that I since we learnt here not

00:37:10,510 --> 00:37:13,510
really

00:37:10,900 --> 00:37:15,550
when Django is initially released it had

00:37:13,510 --> 00:37:17,410
a very different purpose to add that it

00:37:15,550 --> 00:37:20,710
does now it was one of a few websites

00:37:17,410 --> 00:37:21,760
in-house it worked fine for those and if

00:37:20,710 --> 00:37:24,430
they were well enough people were

00:37:21,760 --> 00:37:28,390
impressed by and really you know really

00:37:24,430 --> 00:37:30,190
got some infused by how good it was but

00:37:28,390 --> 00:37:31,869
I think every framework and every

00:37:30,190 --> 00:37:34,780
software application develops over time

00:37:31,869 --> 00:37:36,040
and you get the horrible bits of code

00:37:34,780 --> 00:37:37,119
and regular expressions that you can't

00:37:36,040 --> 00:37:41,770
debug lying around

00:37:37,119 --> 00:37:44,050
but I think in general you know

00:37:41,770 --> 00:37:45,490
you have to realize that for projects

00:37:44,050 --> 00:37:46,750
not everything needs fixing now I know a

00:37:45,490 --> 00:37:48,160
lot of people who just sit there and

00:37:46,750 --> 00:37:49,090
refused to release software the software

00:37:48,160 --> 00:37:51,010
is perfect

00:37:49,090 --> 00:37:53,290
software is never perfect but I think I

00:37:51,010 --> 00:37:55,660
think we all know that open source

00:37:53,290 --> 00:37:56,830
software has never done and if we sat

00:37:55,660 --> 00:37:58,030
there and didn't release it to all those

00:37:56,830 --> 00:37:59,530
problems like a salad would have fixed

00:37:58,030 --> 00:38:00,820
jiangha one point naught would still

00:37:59,530 --> 00:38:03,400
wouldn't have happened five six years

00:38:00,820 --> 00:38:07,450
later so you know it's one of those

00:38:03,400 --> 00:38:09,850
things and I you know from what I've

00:38:07,450 --> 00:38:12,850
seen the last three years you improved

00:38:09,850 --> 00:38:15,130
by being consistent sometimes even at

00:38:12,850 --> 00:38:17,980
the expense of being a little ugly or a

00:38:15,130 --> 00:38:19,900
little bad in the end yes that language

00:38:17,980 --> 00:38:20,980
is ugly but it's been the same for three

00:38:19,900 --> 00:38:22,720
or four years and you can still use it

00:38:20,980 --> 00:38:25,660
and your application is still mostly

00:38:22,720 --> 00:38:27,670
wrong don't get carried away by writing

00:38:25,660 --> 00:38:30,220
new features we got carried away for a

00:38:27,670 --> 00:38:32,860
while that was bad a lots of bugs piled

00:38:30,220 --> 00:38:34,000
up we're fixing right now but yes new

00:38:32,860 --> 00:38:35,440
features are great but they're only

00:38:34,000 --> 00:38:38,620
great the old ones still work at the

00:38:35,440 --> 00:38:40,240
same time and also people with lots of

00:38:38,620 --> 00:38:44,290
free time it's very handy for an open

00:38:40,240 --> 00:38:46,300
source project we for a while Django had

00:38:44,290 --> 00:38:50,290
a bit of a lack of work resources bank

00:38:46,300 --> 00:38:51,910
lifts and mostly improved now but don't

00:38:50,290 --> 00:38:54,030
you know never underestimate the amount

00:38:51,910 --> 00:38:56,290
of developers and resources you need

00:38:54,030 --> 00:38:56,830
especially if think if you think you're

00:38:56,290 --> 00:38:58,600
all right

00:38:56,830 --> 00:38:59,950
remember that takes a few months or a

00:38:58,600 --> 00:39:02,560
few years to bring new people into the

00:38:59,950 --> 00:39:03,910
fold and get up to speed and by the time

00:39:02,560 --> 00:39:07,870
you get there you may realize you've

00:39:03,910 --> 00:39:08,830
been a bit too late so thank you for

00:39:07,870 --> 00:39:13,600
that I hope you've learned something

00:39:08,830 --> 00:39:15,010
from this if not then I'm sorry cut feel

00:39:13,600 --> 00:39:18,390
free to have any questions I'm happy to

00:39:15,010 --> 00:39:18,390
defend my position and thank you much

00:39:29,970 --> 00:39:33,270
any questions

00:39:44,680 --> 00:39:48,530
so the question was Google App Engine is

00:39:47,180 --> 00:39:50,810
using a very old version of Django which

00:39:48,530 --> 00:39:52,580
is not 196 is it any communication with

00:39:50,810 --> 00:39:54,740
them to try and fix that there has been

00:39:52,580 --> 00:39:57,200
a bit with the App Engine you can

00:39:54,740 --> 00:39:58,430
thankfully these days you get your own

00:39:57,200 --> 00:40:01,400
version dangling there by zipping it up

00:39:58,430 --> 00:40:03,020
and fixing it in some people have tried

00:40:01,400 --> 00:40:05,660
to poke them they haven't done very much

00:40:03,020 --> 00:40:07,670
App Engine doesn't seem to be it seems

00:40:05,660 --> 00:40:08,900
to be sort of a bit of a they've barely

00:40:07,670 --> 00:40:11,210
started doing new features against I'm

00:40:08,900 --> 00:40:13,430
not sure the site of that is but I think

00:40:11,210 --> 00:40:14,930
they've just let in theirs because just

00:40:13,430 --> 00:40:18,610
because I mean these days I think they

00:40:14,930 --> 00:40:18,610
recommend do your own Django so

00:40:25,030 --> 00:40:27,660
thank you very much

00:40:29,400 --> 00:40:31,460

YouTube URL: https://www.youtube.com/watch?v=7KTVws3TiC0


