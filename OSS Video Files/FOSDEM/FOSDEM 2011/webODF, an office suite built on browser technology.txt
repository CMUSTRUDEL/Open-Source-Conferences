Title: webODF, an office suite built on browser technology
Publication date: 2011-12-22
Playlist: FOSDEM 2011
Description: 
	by Jos van den Oever 

Office suites for the cloud are becoming more popular. All of them are closed source and, worse, running on a server that is outside of the control of the user. A Free Software solution for this problems is urgently needed.

WebODF is a library for adding OpenDocument Format (ODF) support to applications, regardless of whether they are running on the web or on the desktop. WebODF is a javascript library of about 1000 lines of code (measured August 2010) that can display ODF documents in browsers and HTML widgets. Currently, editing support is being added. WebODF can be used in web applications and desktop applications.

WebODF is extremely innovative because it is the first FOSS implementation of an office suite based on HTML5. Using HTML5 means that the code will run on nearly all modern computing systems. On top of that, it uses CSS in such a way that the ODF document is used nearly unaltered as the run-time presentation. This simplification allows us to develop fast and with little code.



FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:07,730 --> 00:00:12,960
welcome i'm ready to the second top and

00:00:10,620 --> 00:00:15,570
the office track this one will be

00:00:12,960 --> 00:00:17,100
different from the one before different

00:00:15,570 --> 00:00:20,130
from the other after because it's a very

00:00:17,100 --> 00:00:22,410
different project this project is not a

00:00:20,130 --> 00:00:23,699
decade old like the like the other ones

00:00:22,410 --> 00:00:26,039
more than a decade it doesn't have a

00:00:23,699 --> 00:00:30,840
million lines of code only 3000 at the

00:00:26,039 --> 00:00:32,700
moment so it's and it's all running in

00:00:30,840 --> 00:00:35,160
the browser so it's it's quite different

00:00:32,700 --> 00:00:36,870
than before I like to wear by the way

00:00:35,160 --> 00:00:39,420
thank for them for giving me the

00:00:36,870 --> 00:00:41,670
opportunity to to speak here it's I

00:00:39,420 --> 00:00:43,700
really love this conference and by

00:00:41,670 --> 00:00:47,100
letting me speak a I really feel honored

00:00:43,700 --> 00:00:49,800
so let's start with the overview of the

00:00:47,100 --> 00:00:51,570
talk so you know what's coming and i'll

00:00:49,800 --> 00:00:54,239
start with a small demo on how you can

00:00:51,570 --> 00:00:56,399
use web odf on your website because it's

00:00:54,239 --> 00:00:59,070
so very easy to use it i'm just going to

00:00:56,399 --> 00:01:00,690
start right off for that and then i'll

00:00:59,070 --> 00:01:03,629
go a bit into the history its young

00:01:00,690 --> 00:01:05,129
project about half a year old and i'll

00:01:03,629 --> 00:01:07,799
tell you how it came to be why we

00:01:05,129 --> 00:01:10,380
thought of this idea then i'm going to

00:01:07,799 --> 00:01:11,700
explain a bit about what is ODF what

00:01:10,380 --> 00:01:14,430
does the file format look like and how

00:01:11,700 --> 00:01:18,570
can we put the information in the file

00:01:14,430 --> 00:01:21,119
inside of an HTML file then I'll go into

00:01:18,570 --> 00:01:23,430
how you can write JavaScript for web

00:01:21,119 --> 00:01:26,130
kids sorry for web idea because it's a

00:01:23,430 --> 00:01:27,659
bit we're quite strict on how to write

00:01:26,130 --> 00:01:30,869
JavaScript it's not so easy as you might

00:01:27,659 --> 00:01:32,040
think and then at the end I'm going to

00:01:30,869 --> 00:01:38,579
show you how to use web already if not

00:01:32,040 --> 00:01:40,979
on your website bite in your program so

00:01:38,579 --> 00:01:43,259
what's the goal of this project the goal

00:01:40,979 --> 00:01:46,799
of web odf is that we making a

00:01:43,259 --> 00:01:49,200
javascript HTML 5 library and that makes

00:01:46,799 --> 00:01:53,750
it easy to add odf to your website or

00:01:49,200 --> 00:01:57,240
your software so if you want to have a

00:01:53,750 --> 00:01:59,850
way of viewing audio files you are not

00:01:57,240 --> 00:02:01,560
dependent on a browser sorry on my cloud

00:01:59,850 --> 00:02:04,380
service you can put it on your own

00:02:01,560 --> 00:02:06,689
website or your company server and it's

00:02:04,380 --> 00:02:08,520
easy to look at your audio files then we

00:02:06,689 --> 00:02:10,590
will also in the future at editing

00:02:08,520 --> 00:02:12,959
support and then you can also

00:02:10,590 --> 00:02:13,569
collaboratively in the browser edit ODF

00:02:12,959 --> 00:02:15,370
documents

00:02:13,569 --> 00:02:17,140
and they will be exactly the same

00:02:15,370 --> 00:02:18,819
documents which you can open in

00:02:17,140 --> 00:02:23,769
Microsoft Office leave offers open

00:02:18,819 --> 00:02:26,379
offers calleja doesn't matter and just

00:02:23,769 --> 00:02:28,060
because we're using javascript and HTML

00:02:26,379 --> 00:02:31,060
technology doesn't mean we are limited

00:02:28,060 --> 00:02:34,389
to the browser in fact it's very easy to

00:02:31,060 --> 00:02:36,189
use this technology to make an OTF

00:02:34,389 --> 00:02:38,319
application which ones on the desktop or

00:02:36,189 --> 00:02:41,950
on a mobile phone or on a tablet and

00:02:38,319 --> 00:02:48,310
that's an example i will give of that at

00:02:41,950 --> 00:02:51,159
the end of the presentation so how to

00:02:48,310 --> 00:02:53,109
use web earlier okay what do you need

00:02:51,159 --> 00:02:55,030
you don't really need a lot you just

00:02:53,109 --> 00:02:58,359
check out the git repository it's quite

00:02:55,030 --> 00:03:00,370
small and you need a web server that's

00:02:58,359 --> 00:03:03,579
all you need there's actually a small

00:03:00,370 --> 00:03:07,239
script inside of her web odf it contains

00:03:03,579 --> 00:03:09,780
a file called HTTP server KS and that's

00:03:07,239 --> 00:03:12,159
a script which you can use with nodejs

00:03:09,780 --> 00:03:13,209
to start a small web server and i'm

00:03:12,159 --> 00:03:14,949
going to use that for a small

00:03:13,209 --> 00:03:19,530
demonstration but you can just as easily

00:03:14,949 --> 00:03:24,009
use apache or any other web server so

00:03:19,530 --> 00:03:26,590
you take the web server or use the given

00:03:24,009 --> 00:03:28,870
script and you copy these files that's

00:03:26,590 --> 00:03:32,349
all of them so it's 10 DF HTML that's

00:03:28,870 --> 00:03:36,280
basically the application and a CSS file

00:03:32,349 --> 00:03:38,919
with the default styling the the basic

00:03:36,280 --> 00:03:41,650
start up most of the program ODF dog is

00:03:38,919 --> 00:03:43,629
and the rest of the functionality is put

00:03:41,650 --> 00:03:45,849
into classes in separate JavaScript

00:03:43,629 --> 00:03:47,739
files but it's just a couple of files

00:03:45,849 --> 00:03:49,810
you copy into then into the same

00:03:47,739 --> 00:03:53,799
directory once you've done that you have

00:03:49,810 --> 00:03:56,379
an OTF viewing and ODF sir a web server

00:03:53,799 --> 00:03:58,659
with ODF viewing capability what's

00:03:56,379 --> 00:04:00,790
missing then it's just your files you

00:03:58,659 --> 00:04:04,239
take your audio files put them in the

00:04:00,790 --> 00:04:06,939
same directory or relative to your to

00:04:04,239 --> 00:04:09,639
the JavaScript and you could to go so

00:04:06,939 --> 00:04:11,799
you can go to a URL which has a hash and

00:04:09,639 --> 00:04:13,269
then the name of the file so if you have

00:04:11,799 --> 00:04:15,639
a content management system you want to

00:04:13,269 --> 00:04:18,849
have ODF support just copy the files in

00:04:15,639 --> 00:04:21,430
there link up the documents which the

00:04:18,849 --> 00:04:24,460
users upload with a simple hash to ODF

00:04:21,430 --> 00:04:26,210
HTML and you're done so I'm going to

00:04:24,460 --> 00:04:28,370
demo that now

00:04:26,210 --> 00:04:32,360
in fact I was demoing it all along

00:04:28,370 --> 00:04:36,710
because as you can see i'm running a web

00:04:32,360 --> 00:04:41,210
browser this is chrome and what you see

00:04:36,710 --> 00:04:44,270
here is a URL so i'm running this on

00:04:41,210 --> 00:04:47,449
localhost the previous speaker had an

00:04:44,270 --> 00:04:48,979
objection to to using HTML technology

00:04:47,449 --> 00:04:50,539
because the web might go down and you

00:04:48,979 --> 00:04:51,800
can't use your software I'm just running

00:04:50,539 --> 00:04:53,539
this on localhost so there's absolutely

00:04:51,800 --> 00:04:58,910
no danger of this going down it's

00:04:53,539 --> 00:05:01,699
completely safe yeah and this is this is

00:04:58,910 --> 00:05:06,860
just file so I'm presenting from this

00:05:01,699 --> 00:05:09,490
file I'll go to here to show you this is

00:05:06,860 --> 00:05:12,590
the server running here demo directory

00:05:09,490 --> 00:05:15,139
I'm calling the note executable with the

00:05:12,590 --> 00:05:16,669
HTTP server script which just does if

00:05:15,139 --> 00:05:20,620
you send to get to it it will give you

00:05:16,669 --> 00:05:20,620
the file it's a very simple server and

00:05:22,780 --> 00:05:34,280
here are the files oh this is just the

00:05:25,759 --> 00:05:36,530
JavaScript so these are all the files in

00:05:34,280 --> 00:05:38,539
the directory the basically that the

00:05:36,530 --> 00:05:41,539
files are just listed in including then

00:05:38,539 --> 00:05:43,310
my report ODT the open document

00:05:41,539 --> 00:05:45,409
standards which is something i will use

00:05:43,310 --> 00:05:47,770
to show you later and a presentation and

00:05:45,409 --> 00:05:50,060
a new spreadsheet so we're not just

00:05:47,770 --> 00:05:53,979
working there with a presentation but

00:05:50,060 --> 00:05:53,979
we're also supporting spreadsheets and

00:05:54,280 --> 00:05:59,780
text files so this is the same this is a

00:05:57,979 --> 00:06:02,810
different different version here i wrote

00:05:59,780 --> 00:06:05,360
a small you I into it this is not a

00:06:02,810 --> 00:06:07,009
standard part of web ODF but it's an

00:06:05,360 --> 00:06:09,860
example of how you can use it in a more

00:06:07,009 --> 00:06:12,259
sophisticated application so this is

00:06:09,860 --> 00:06:13,940
just an x GS it's the javascript library

00:06:12,259 --> 00:06:18,320
which with which you can build you eyes

00:06:13,940 --> 00:06:19,610
and here it's listing some files so you

00:06:18,320 --> 00:06:22,909
can open it and here's a different

00:06:19,610 --> 00:06:28,449
presentation so you see it's got styles

00:06:22,909 --> 00:06:30,860
as our pictures here's a big spreadsheet

00:06:28,449 --> 00:06:32,659
takes a bit longer to open but not

00:06:30,860 --> 00:06:35,740
really up if you consider the size of

00:06:32,659 --> 00:06:38,430
this file it has colors for styles

00:06:35,740 --> 00:06:42,710
colors for the cells and

00:06:38,430 --> 00:06:42,710
yeah basically it looks pretty good so

00:06:43,280 --> 00:06:51,420
that's how you use it now how did it

00:06:48,300 --> 00:06:53,670
came to be why do we think of opening a

00:06:51,420 --> 00:06:57,150
writing writing an application which can

00:06:53,670 --> 00:07:00,570
easily allow you to view documents in

00:06:57,150 --> 00:07:03,180
your browser but spacebar stopped

00:07:00,570 --> 00:07:05,460
working yeah well for that I have to

00:07:03,180 --> 00:07:06,750
start a web kit I guess many people know

00:07:05,460 --> 00:07:09,690
WebKit the browser I'm using now is

00:07:06,750 --> 00:07:12,540
chrome it's also build on WebKit it has

00:07:09,690 --> 00:07:14,940
a history of a long ago it started in

00:07:12,540 --> 00:07:18,750
the KD project where the browser was K

00:07:14,940 --> 00:07:22,350
HTML and that was a very popular browser

00:07:18,750 --> 00:07:24,480
it was pretty good at the time and so

00:07:22,350 --> 00:07:26,970
good that at some point Apple decided to

00:07:24,480 --> 00:07:29,520
fork it and make it into the Safari web

00:07:26,970 --> 00:07:31,460
browser at this time Mozilla was the

00:07:29,520 --> 00:07:34,500
most popular open source browser and

00:07:31,460 --> 00:07:38,660
they didn't choose Mozilla because they

00:07:34,500 --> 00:07:41,460
liked the design of K HTML better so

00:07:38,660 --> 00:07:45,780
initially Apple wasn't behaving very

00:07:41,460 --> 00:07:47,550
much as a nice open source citizen in

00:07:45,780 --> 00:07:49,680
the sense that when i made a new safari

00:07:47,550 --> 00:07:52,290
release what it was he just dumped a

00:07:49,680 --> 00:07:54,990
tarball of the source code but after a

00:07:52,290 --> 00:07:56,850
couple of years and complaining about by

00:07:54,990 --> 00:07:59,940
the K HTML developers that they wanted a

00:07:56,850 --> 00:08:03,360
more urban development process Apple

00:07:59,940 --> 00:08:05,370
solder the web hit project and so it

00:08:03,360 --> 00:08:09,030
became a really a proper nice project

00:08:05,370 --> 00:08:12,750
and from that point on it gained more

00:08:09,030 --> 00:08:16,770
ports that led to Chrome gtk WebKit huge

00:08:12,750 --> 00:08:21,150
WebKit and many other adaptations of web

00:08:16,770 --> 00:08:23,100
hit and now nearly every computer has a

00:08:21,150 --> 00:08:24,990
version of replicate running and by

00:08:23,100 --> 00:08:28,050
computer I also mean mobile phones and

00:08:24,990 --> 00:08:32,820
tablets so it's a pervasive it's a huge

00:08:28,050 --> 00:08:34,890
success and within our company ko we

00:08:32,820 --> 00:08:40,530
were thinking well can we repeat this

00:08:34,890 --> 00:08:42,270
for office suites so to to see why web

00:08:40,530 --> 00:08:44,580
page is so successful we have to go back

00:08:42,270 --> 00:08:46,560
a bit and look at how it works on the

00:08:44,580 --> 00:08:48,120
inside if you have all these different

00:08:46,560 --> 00:08:51,420
environments for which there are ports

00:08:48,120 --> 00:08:52,089
and you look at for example the string

00:08:51,420 --> 00:08:56,019
class

00:08:52,089 --> 00:08:59,470
for them I mean most prices are written

00:08:56,019 --> 00:09:02,230
in C++ and what C++ is different on

00:08:59,470 --> 00:09:06,279
every platform in KDE you have a cue

00:09:02,230 --> 00:09:07,720
string Mac OS has an nsstring CF or I

00:09:06,279 --> 00:09:10,839
don't actually know what I meant to

00:09:07,720 --> 00:09:12,759
replace that we express has a

00:09:10,839 --> 00:09:14,999
reoccurring and haiku has a B string so

00:09:12,759 --> 00:09:18,579
that the many different strings and

00:09:14,999 --> 00:09:19,930
people can get ferry or obsessed about

00:09:18,579 --> 00:09:21,939
what type of spring they're using and

00:09:19,930 --> 00:09:23,620
not just the strings is also the factors

00:09:21,939 --> 00:09:26,379
it's also the graphical interface which

00:09:23,620 --> 00:09:29,499
were talking to the clever thing Apple

00:09:26,379 --> 00:09:31,689
did with WebKit when it ported it from

00:09:29,499 --> 00:09:34,990
the cute string and the whole cute

00:09:31,689 --> 00:09:38,279
environment to to mac OS is that they

00:09:34,990 --> 00:09:42,129
abstracted away all of these things so

00:09:38,279 --> 00:09:44,589
they made it possible to implement a few

00:09:42,129 --> 00:09:46,990
abstract platform dependent classes and

00:09:44,589 --> 00:09:49,389
then have a native application a native

00:09:46,990 --> 00:09:53,949
web hit your environment and that's why

00:09:49,389 --> 00:09:55,749
the adoption was so great now we would

00:09:53,949 --> 00:09:57,850
like to repeat that at the time we

00:09:55,749 --> 00:09:59,470
wanted to repeat that this was an

00:09:57,850 --> 00:10:03,939
inspiration for a project which we

00:09:59,470 --> 00:10:05,980
called ODF gate and since most free open

00:10:03,939 --> 00:10:08,889
source office software is also written

00:10:05,980 --> 00:10:10,480
in C++ but also the libraries are

00:10:08,889 --> 00:10:12,370
different I mean Libre Office calleja

00:10:10,480 --> 00:10:14,800
and our be worth oh I have different

00:10:12,370 --> 00:10:17,410
string types and the different which it

00:10:14,800 --> 00:10:19,600
sets he thought well why don't we take

00:10:17,410 --> 00:10:23,949
the WebKit approach and built built on

00:10:19,600 --> 00:10:27,129
that so DF get was born and it used the

00:10:23,949 --> 00:10:30,220
WebKit approach and the initial scope

00:10:27,129 --> 00:10:32,110
was to have a server-side handling of

00:10:30,220 --> 00:10:33,759
ODF document so we didn't go i want to

00:10:32,110 --> 00:10:36,040
go do graphical route first we'll say

00:10:33,759 --> 00:10:39,279
okay is this idea of loading saving

00:10:36,040 --> 00:10:42,069
order f documents on different c++

00:10:39,279 --> 00:10:43,870
frameworks is that is that feasible and

00:10:42,069 --> 00:10:45,999
we started working on it and one of the

00:10:43,870 --> 00:10:48,370
excellent things of WebKit is that they

00:10:45,999 --> 00:10:51,759
have a very good test environment they

00:10:48,370 --> 00:10:53,620
have tons and tons of tests and detailed

00:10:51,759 --> 00:10:56,529
these tests are all written HTML with

00:10:53,620 --> 00:10:59,170
some JavaScript to run them so we are

00:10:56,529 --> 00:11:01,870
also writing a lot of unit tests and our

00:10:59,170 --> 00:11:05,329
unit tests where we're reading ODF files

00:11:01,870 --> 00:11:06,889
and at some point I was thinking well

00:11:05,329 --> 00:11:09,139
why do we need to have the zip the

00:11:06,889 --> 00:11:12,259
unzipping inside of the inside of the

00:11:09,139 --> 00:11:13,879
ODF it part can we can remove it to the

00:11:12,259 --> 00:11:16,429
to the JavaScript side and in fact there

00:11:13,879 --> 00:11:21,350
are gzip libraries in written in

00:11:16,429 --> 00:11:23,809
JavaScript so I started playing and at

00:11:21,350 --> 00:11:25,850
some point I didn't have any C++ left I

00:11:23,809 --> 00:11:28,730
just had my JavaScript and thought well

00:11:25,850 --> 00:11:31,220
okay so it's possible in a browser and

00:11:28,730 --> 00:11:33,980
we I tested it not just with WebKit but

00:11:31,220 --> 00:11:37,069
also with opera firefox it's possible to

00:11:33,980 --> 00:11:42,009
unzip a file purely in JavaScript then

00:11:37,069 --> 00:11:48,589
take the custom XML and put it into a

00:11:42,009 --> 00:11:51,619
web page and that's how WebKit that's

00:11:48,589 --> 00:11:54,019
how web ODF got started so now I'll tell

00:11:51,619 --> 00:11:56,749
you a bit about what Elliot looked like

00:11:54,019 --> 00:12:02,239
and how you can put it inside an HTML

00:11:56,749 --> 00:12:04,639
page so ODF it's a great standard all

00:12:02,239 --> 00:12:08,929
three office suites in this office track

00:12:04,639 --> 00:12:12,470
today use ODF as a main file format it

00:12:08,929 --> 00:12:15,410
we use as many technologies XML zip us

00:12:12,470 --> 00:12:16,759
xs-l offers RDF recently since version 1

00:12:15,410 --> 00:12:18,980
dot too and I think that's a great

00:12:16,759 --> 00:12:20,869
addition I won't go into too much what

00:12:18,980 --> 00:12:25,519
it is right now scalable vector graphics

00:12:20,869 --> 00:12:28,610
X queries and it's very active there's a

00:12:25,519 --> 00:12:31,220
weekly call of the the people working on

00:12:28,610 --> 00:12:32,600
the standard and they are all from

00:12:31,220 --> 00:12:34,040
different different vendors they're

00:12:32,600 --> 00:12:36,379
talking together about how to improve

00:12:34,040 --> 00:12:39,470
the Senate and a couple of years there's

00:12:36,379 --> 00:12:43,699
a plug fest where implementers from

00:12:39,470 --> 00:12:45,739
different versions of different ODF

00:12:43,699 --> 00:12:47,389
software come together and see if there

00:12:45,739 --> 00:12:50,600
are DF documents actually work together

00:12:47,389 --> 00:12:52,549
well there are any implementations

00:12:50,600 --> 00:12:55,610
calera leave off as well you know most

00:12:52,549 --> 00:12:58,189
of these the ones on the on this side

00:12:55,610 --> 00:13:00,919
are actually cloud services while

00:12:58,189 --> 00:13:02,179
Microsoft Office is is also a desktop

00:13:00,919 --> 00:13:06,079
application but it also has a cloud

00:13:02,179 --> 00:13:08,029
service and the the growth of cloud

00:13:06,079 --> 00:13:10,579
service was actually one of the reasons

00:13:08,029 --> 00:13:14,269
why we said that web modf would be

00:13:10,579 --> 00:13:16,959
important because more people want to

00:13:14,269 --> 00:13:18,800
work on documents in the browser but

00:13:16,959 --> 00:13:20,510
they don't always

00:13:18,800 --> 00:13:26,510
to put their documents on a Google

00:13:20,510 --> 00:13:29,570
server or on the Microsoft server so how

00:13:26,510 --> 00:13:34,399
does web modf work well you start with

00:13:29,570 --> 00:13:36,529
an HTML file and in your html5 file you

00:13:34,399 --> 00:13:39,589
figure out what the path to the zip file

00:13:36,529 --> 00:13:42,760
is and you start loading it the loading

00:13:39,589 --> 00:13:45,980
is usually done with an egg xml

00:13:42,760 --> 00:13:48,140
httprequest which gets the binary data

00:13:45,980 --> 00:13:49,399
and it doesn't get the whole file at

00:13:48,140 --> 00:13:52,700
once if you have a file with large

00:13:49,399 --> 00:13:54,170
images it will not get that once it

00:13:52,700 --> 00:13:56,089
would be too slow so we will first get

00:13:54,170 --> 00:13:57,950
the index of the zip file then it will

00:13:56,089 --> 00:14:01,040
get all the bits which are important to

00:13:57,950 --> 00:14:03,620
load the content XML file which is the

00:14:01,040 --> 00:14:06,860
most important file the settings.xml the

00:14:03,620 --> 00:14:08,959
Styles XML file and then it will put the

00:14:06,860 --> 00:14:12,950
information which is in there in the Dom

00:14:08,959 --> 00:14:16,250
tree which forms your HTML document then

00:14:12,950 --> 00:14:20,060
you've got a lot of XML added to your

00:14:16,250 --> 00:14:22,430
document and the HTML HTML standard says

00:14:20,060 --> 00:14:25,160
if it doesn't recognize a tag it will do

00:14:22,430 --> 00:14:26,839
nothing with it so any normal text which

00:14:25,160 --> 00:14:29,690
is in there is just shown as plain text

00:14:26,839 --> 00:14:31,070
and and it doesn't look like an office

00:14:29,690 --> 00:14:33,200
document let alone the spreadsheet at

00:14:31,070 --> 00:14:36,200
all so what we need to do is we need to

00:14:33,200 --> 00:14:38,089
use CSS with namespace support and I'll

00:14:36,200 --> 00:14:39,589
show you later how that works to hide

00:14:38,089 --> 00:14:42,740
and show the important bits and to

00:14:39,589 --> 00:14:46,100
format them on a page on the slide or in

00:14:42,740 --> 00:14:48,529
a spreadsheet stretch it sells then we

00:14:46,100 --> 00:14:51,950
look at what the custom styles are the

00:14:48,529 --> 00:14:54,800
ball the italic the forms used the size

00:14:51,950 --> 00:14:58,430
of the font and we also convert that to

00:14:54,800 --> 00:15:01,339
CSS so that the file in itself look in

00:14:58,430 --> 00:15:07,250
itself looks good and after that we load

00:15:01,339 --> 00:15:08,899
the images so that's basically the all

00:15:07,250 --> 00:15:13,339
the different steps and we'll go into

00:15:08,899 --> 00:15:15,410
each of these in more detail now so most

00:15:13,339 --> 00:15:18,440
audio files are zip files not all of

00:15:15,410 --> 00:15:24,019
them and they can tell it XML files and

00:15:18,440 --> 00:15:25,940
pictures HTML has one Dom so and it's

00:15:24,019 --> 00:15:28,040
usually XML file or at least if it's not

00:15:25,940 --> 00:15:31,040
a proper XML file it will be read as one

00:15:28,040 --> 00:15:32,630
it will be corrected and ODF has a

00:15:31,040 --> 00:15:35,240
different serialization

00:15:32,630 --> 00:15:38,570
so the problem is HTML has one Dom but

00:15:35,240 --> 00:15:41,000
in a audia father many zip files so

00:15:38,570 --> 00:15:43,190
which sort of many XML files which of

00:15:41,000 --> 00:15:44,840
the XML files will you actually put in

00:15:43,190 --> 00:15:46,700
the HTML Dom or how will you put it in

00:15:44,840 --> 00:15:50,990
there but there's a solution for that

00:15:46,700 --> 00:15:53,920
because the ODF standard has a different

00:15:50,990 --> 00:15:56,660
serialization which is just one xml file

00:15:53,920 --> 00:16:00,410
nobody's using it actually are not

00:15:56,660 --> 00:16:02,480
really but it's still useful the fact

00:16:00,410 --> 00:16:05,660
that it's in the standard gives the

00:16:02,480 --> 00:16:07,190
aside web only have a good idea of how

00:16:05,660 --> 00:16:09,410
to put the different parts which are

00:16:07,190 --> 00:16:14,230
normally in a zip file into one Dom tree

00:16:09,410 --> 00:16:17,800
and this is what this will look like so

00:16:14,230 --> 00:16:21,320
here's the HTML this is the live tree

00:16:17,800 --> 00:16:24,380
I've collapsed the head and you see the

00:16:21,320 --> 00:16:28,430
body that's an HTML body and then the

00:16:24,380 --> 00:16:30,410
document tag there that's an office an

00:16:28,430 --> 00:16:32,630
office tag it's in the office namespace

00:16:30,410 --> 00:16:35,180
it's not young like that that's just

00:16:32,630 --> 00:16:38,360
something typical in the way chrome

00:16:35,180 --> 00:16:40,850
shows this and then you see different

00:16:38,360 --> 00:16:43,220
tags and each of those tax contains

00:16:40,850 --> 00:16:46,370
parts from the different xml files in an

00:16:43,220 --> 00:16:48,410
ldif file so we by following the

00:16:46,370 --> 00:16:52,790
standard we can put all the components

00:16:48,410 --> 00:16:56,710
inside of one Dom tree and once we have

00:16:52,790 --> 00:16:59,450
it there we can do lots of stuff I mean

00:16:56,710 --> 00:17:02,120
suppose you would like to do some

00:16:59,450 --> 00:17:05,120
editing or custom scripting you could

00:17:02,120 --> 00:17:08,720
just go wild with JavaScript like you do

00:17:05,120 --> 00:17:11,660
with with HTML pages and modify it to

00:17:08,720 --> 00:17:16,220
your heart's content it's all available

00:17:11,660 --> 00:17:19,550
with the with the door maybe I now so

00:17:16,220 --> 00:17:21,170
that's that one we've got the we've got

00:17:19,550 --> 00:17:25,250
the old document loaded in the Dom tree

00:17:21,170 --> 00:17:27,500
but it doesn't look very good yet so

00:17:25,250 --> 00:17:30,590
what do we do we want to use the the

00:17:27,500 --> 00:17:34,970
styling information but the styling used

00:17:30,590 --> 00:17:38,540
by odf is not the same as HTML HTML user

00:17:34,970 --> 00:17:41,240
CSS CSS 3 by now and that's quite

00:17:38,540 --> 00:17:45,320
different from the styles which in odf

00:17:41,240 --> 00:17:45,870
which are based on xsl-fo so we need to

00:17:45,320 --> 00:17:51,050
convert

00:17:45,870 --> 00:17:53,340
but two issues ODF uses style names so

00:17:51,050 --> 00:17:55,470
whenever you have one of you have a

00:17:53,340 --> 00:17:57,620
style you use the say okay this element

00:17:55,470 --> 00:18:00,090
has dis tiled this element as that style

00:17:57,620 --> 00:18:03,000
whereas in CSS you have select ins you

00:18:00,090 --> 00:18:05,809
say okay this is a diff and all diff

00:18:03,000 --> 00:18:08,970
switch are inside of a paragraph or

00:18:05,809 --> 00:18:12,480
which have an ID like this should be

00:18:08,970 --> 00:18:13,890
green so it's a bit different and that

00:18:12,480 --> 00:18:16,950
the properties themselves are different

00:18:13,890 --> 00:18:19,350
so if mold might have a different name

00:18:16,950 --> 00:18:22,830
than boldin in odf might have a

00:18:19,350 --> 00:18:24,570
different name then bowled in CSS but

00:18:22,830 --> 00:18:26,850
for both actually it's not to say it is

00:18:24,570 --> 00:18:30,750
the same but there are many tweaks you

00:18:26,850 --> 00:18:34,800
have to do conversions so here's an

00:18:30,750 --> 00:18:37,980
example this a top part is an extract

00:18:34,800 --> 00:18:39,900
from styles.xml and it defines a style

00:18:37,980 --> 00:18:42,110
called my bold and basically what it

00:18:39,900 --> 00:18:45,120
says okay text property this is bold and

00:18:42,110 --> 00:18:47,070
then below you see how we would convert

00:18:45,120 --> 00:18:51,480
this so that the browser shows us

00:18:47,070 --> 00:18:54,450
properly you see text pipe p that the

00:18:51,480 --> 00:18:57,300
pipe is the equivalent of the colon and

00:18:54,450 --> 00:19:02,760
xml it's this it's a divider between the

00:18:57,300 --> 00:19:04,710
namespace prefix and the local name then

00:19:02,760 --> 00:19:07,170
you see the angular brackets and angular

00:19:04,710 --> 00:19:10,340
brackets say if the style if the text

00:19:07,170 --> 00:19:16,050
style name is my bull then this applies

00:19:10,340 --> 00:19:19,800
so we have directly translated the the

00:19:16,050 --> 00:19:23,760
selector based on just name to below the

00:19:19,800 --> 00:19:26,220
selected based on Paralon a paragraph

00:19:23,760 --> 00:19:28,740
with that name of course there's not

00:19:26,220 --> 00:19:33,720
just paragraphs you have also headers

00:19:28,740 --> 00:19:35,760
and lots of other lots of other elements

00:19:33,720 --> 00:19:37,920
and all of these elements will have to

00:19:35,760 --> 00:19:39,390
have the same rule so you in practice we

00:19:37,920 --> 00:19:41,970
have to repeat this rule quite a few

00:19:39,390 --> 00:19:44,730
times to cover all of the all of the

00:19:41,970 --> 00:19:47,400
styling and you'll see that later when I

00:19:44,730 --> 00:19:51,540
go want to show you how some

00:19:47,400 --> 00:19:52,830
introspection in the browser okay so

00:19:51,540 --> 00:19:58,620
that's basically how the conversion

00:19:52,830 --> 00:20:01,080
works and you see that I should go back

00:19:58,620 --> 00:20:03,300
one step what we're doing here is the

00:20:01,080 --> 00:20:07,830
this because we're change we're changing

00:20:03,300 --> 00:20:10,680
the styles into a CSS but when when

00:20:07,830 --> 00:20:12,870
we're editing we will first edit the top

00:20:10,680 --> 00:20:16,890
part so it will change the actual ODF

00:20:12,870 --> 00:20:19,370
and then we do the translation so when

00:20:16,890 --> 00:20:22,460
were editing which were actually not

00:20:19,370 --> 00:20:26,250
supporting yet but which were planning

00:20:22,460 --> 00:20:29,309
we will be editing the actual ODF and

00:20:26,250 --> 00:20:34,980
then we calculate what CSS looks like

00:20:29,309 --> 00:20:37,290
and this brings us to a point a problem

00:20:34,980 --> 00:20:39,450
with many office suites is that they

00:20:37,290 --> 00:20:41,309
usually try to warn you from using ODF

00:20:39,450 --> 00:20:44,780
or they try to warn you from the

00:20:41,309 --> 00:20:47,460
document which is not your native format

00:20:44,780 --> 00:20:50,640
Microsoft doesn't like you using open

00:20:47,460 --> 00:20:51,900
document formats and well not if it

00:20:50,640 --> 00:20:54,090
doesn't even matter if they like it or

00:20:51,900 --> 00:20:56,400
not their runtime model is quite

00:20:54,090 --> 00:21:00,179
different from what ODF looks like and

00:20:56,400 --> 00:21:02,280
that's why some features may be lost

00:21:00,179 --> 00:21:04,470
when you're saving unfortunately they

00:21:02,280 --> 00:21:06,540
never tell you which features exactly so

00:21:04,470 --> 00:21:09,360
that you could make a recent decision on

00:21:06,540 --> 00:21:10,650
whether or not to use ODF or not but the

00:21:09,360 --> 00:21:12,330
same thing goes for leave office for

00:21:10,650 --> 00:21:14,429
example when when you're opening

00:21:12,330 --> 00:21:15,660
something in ODF and you want to save it

00:21:14,429 --> 00:21:17,550
as PowerPoint they will give you the

00:21:15,660 --> 00:21:20,010
same warning there so yeah I'm not sure

00:21:17,550 --> 00:21:22,890
if power pointers as it exactly the same

00:21:20,010 --> 00:21:26,010
features so are you really sure that you

00:21:22,890 --> 00:21:29,520
want to use it well in ODF our one time

00:21:26,010 --> 00:21:31,410
model is ODF just like the model which

00:21:29,520 --> 00:21:34,170
you are saving so there is very little

00:21:31,410 --> 00:21:36,300
difference it's just the XML which you

00:21:34,170 --> 00:21:44,780
have on disk is the way it looks in the

00:21:36,300 --> 00:21:47,309
browser and I want to give a small dose

00:21:44,780 --> 00:21:48,900
demonstration of that by actually just

00:21:47,309 --> 00:21:51,270
going and looking inside of this browser

00:21:48,900 --> 00:21:53,970
now so this is this is the live document

00:21:51,270 --> 00:21:57,630
and by the way do you know what this is

00:21:53,970 --> 00:21:59,300
this Imbros attained office text editor

00:21:57,630 --> 00:22:03,630
terms you call this an underwater screen

00:21:59,300 --> 00:22:06,750
it's been it's it was popular and we're

00:22:03,630 --> 00:22:08,820
perfect and basically in the browser is

00:22:06,750 --> 00:22:11,450
back you can actually see what your

00:22:08,820 --> 00:22:11,450
document looks like

00:22:11,850 --> 00:22:18,809
so you see here the the XML and here you

00:22:16,919 --> 00:22:21,929
see if you select an element for example

00:22:18,809 --> 00:22:24,210
the first page you see what CSS applies

00:22:21,929 --> 00:22:26,640
to it so you can directly see when

00:22:24,210 --> 00:22:30,390
you're developing or improving web odf

00:22:26,640 --> 00:22:34,350
if if the if the CSS translation is

00:22:30,390 --> 00:22:41,400
correct and you can even see where it

00:22:34,350 --> 00:22:51,900
was defined okay but that's just the

00:22:41,400 --> 00:22:54,360
underwater scream ok the next part will

00:22:51,900 --> 00:22:56,220
be a bit of our JavaScript because

00:22:54,360 --> 00:22:58,260
writing JavaScript is something many

00:22:56,220 --> 00:23:05,429
people like to do but few people like to

00:22:58,260 --> 00:23:08,340
learn and the the problem with

00:23:05,429 --> 00:23:11,789
javascript is it's quite flawed there

00:23:08,340 --> 00:23:15,120
are many problems with it and but you

00:23:11,789 --> 00:23:18,090
can avoid the problems and that's what I

00:23:15,120 --> 00:23:20,400
want to go into a bit right here and you

00:23:18,090 --> 00:23:22,049
have to be very careful writing

00:23:20,400 --> 00:23:24,990
JavaScript but with the right tools it's

00:23:22,049 --> 00:23:26,909
a bottle it's just fine it just you have

00:23:24,990 --> 00:23:30,169
to be aware of them so I want to I want

00:23:26,909 --> 00:23:32,309
to talk a bit about that now so this is

00:23:30,169 --> 00:23:34,650
alyssa practices with you which I want

00:23:32,309 --> 00:23:36,030
to talk about quickly so you have to use

00:23:34,650 --> 00:23:38,159
the good parts of JavaScript the many

00:23:36,030 --> 00:23:40,260
bets parts you have to what you want to

00:23:38,159 --> 00:23:42,870
use jslint which is just a checker which

00:23:40,260 --> 00:23:45,600
checks is my javascript good you want to

00:23:42,870 --> 00:23:47,789
use one time abstraction and we really

00:23:45,600 --> 00:23:49,230
need that here because web ODF might be

00:23:47,789 --> 00:23:51,360
running in a browser it might be running

00:23:49,230 --> 00:23:53,940
on a command line it might be running in

00:23:51,360 --> 00:23:57,659
a native application so we're

00:23:53,940 --> 00:23:59,490
abstracting that way in a project you

00:23:57,659 --> 00:24:01,590
want to use callbacks for fast I oh and

00:23:59,490 --> 00:24:03,539
you want to compile your JavaScript we

00:24:01,590 --> 00:24:05,640
using the closure compiler and of course

00:24:03,539 --> 00:24:09,240
use a lot of unit tests so the first

00:24:05,640 --> 00:24:10,799
part I saw that a standard O'Reilly here

00:24:09,240 --> 00:24:12,659
that the biggest sponsor of the event so

00:24:10,799 --> 00:24:14,130
I think it's good as I say this is an

00:24:12,659 --> 00:24:15,419
excellent book and you should probably

00:24:14,130 --> 00:24:16,980
buy it if you want to write JavaScript

00:24:15,419 --> 00:24:21,419
it's called JavaScript the good parts

00:24:16,980 --> 00:24:26,059
and it explains which part of JavaScript

00:24:21,419 --> 00:24:26,059
are bad and which you should avoid and

00:24:26,630 --> 00:24:33,870
yeah it's it's it's it's a very thin

00:24:31,770 --> 00:24:35,340
book it's a great read I think you

00:24:33,870 --> 00:24:41,730
should you should really have a look at

00:24:35,340 --> 00:24:44,100
it and the author of the book also wrote

00:24:41,730 --> 00:24:46,200
a program called GS lint and GS lint

00:24:44,100 --> 00:24:50,180
will tell you what if you're using a bad

00:24:46,200 --> 00:24:53,040
part of JavaScript so you can avoid it

00:24:50,180 --> 00:24:54,900
so the runtime web odf runs in different

00:24:53,040 --> 00:24:56,520
runtimes and the only common thing

00:24:54,900 --> 00:24:58,200
between all the runtimes is that of

00:24:56,520 --> 00:25:00,270
course they're all JavaScript and some

00:24:58,200 --> 00:25:02,730
may have a doll if they don't have a Dom

00:25:00,270 --> 00:25:04,770
you cannot do anything you cannot do

00:25:02,730 --> 00:25:06,390
everything but you can still do the

00:25:04,770 --> 00:25:09,870
unzipping for example you can still do

00:25:06,390 --> 00:25:11,880
base64 encoding and the one time is a

00:25:09,870 --> 00:25:14,160
thin abstraction layer and that gives

00:25:11,880 --> 00:25:17,580
you access to the file system login use

00:25:14,160 --> 00:25:20,520
of timers the window object and we have

00:25:17,580 --> 00:25:22,980
currently run times for the browser for

00:25:20,520 --> 00:25:24,510
no GS which is the server which is

00:25:22,980 --> 00:25:26,970
currently running this presentation and

00:25:24,510 --> 00:25:31,650
y know which is a java javascript

00:25:26,970 --> 00:25:33,720
implementation you should also use

00:25:31,650 --> 00:25:37,530
callbacks this is a very cool feature of

00:25:33,720 --> 00:25:40,200
javascript and since i 0 is all from the

00:25:37,530 --> 00:25:42,180
bottleneck in your application instead

00:25:40,200 --> 00:25:44,280
of waiting for event that may be slow

00:25:42,180 --> 00:25:47,190
you should just call you should pass a

00:25:44,280 --> 00:25:49,590
function so here is a function load XML

00:25:47,190 --> 00:25:53,190
and we want to read the file my my file

00:25:49,590 --> 00:25:55,560
dot XML instead of waiting for the

00:25:53,190 --> 00:25:58,200
result we just get pass along a function

00:25:55,560 --> 00:26:02,130
and the function has two arguments error

00:25:58,200 --> 00:26:04,080
and data and if there if if the loading

00:26:02,130 --> 00:26:05,340
has been done then this function will be

00:26:04,080 --> 00:26:09,960
called with I above the error message

00:26:05,340 --> 00:26:12,620
all the data so because the function

00:26:09,960 --> 00:26:15,000
load XML itself returns immediately

00:26:12,620 --> 00:26:17,640
sending a request to the file system and

00:26:15,000 --> 00:26:20,010
then putting hanging this function on

00:26:17,640 --> 00:26:21,810
there it can immediately continue it all

00:26:20,010 --> 00:26:24,030
the rest of your application so your

00:26:21,810 --> 00:26:27,240
application becomes a bit faster quite a

00:26:24,030 --> 00:26:29,880
bit faster well it's very important to

00:26:27,240 --> 00:26:32,340
write unit tests it's tricky to write a

00:26:29,880 --> 00:26:33,960
program which one's an impreza I mean

00:26:32,340 --> 00:26:36,160
browsers are so different they're

00:26:33,960 --> 00:26:37,780
getting much better but

00:26:36,160 --> 00:26:40,570
they're still very different so you

00:26:37,780 --> 00:26:41,920
really need to test a lot and also I

00:26:40,570 --> 00:26:44,140
have to admit I didn't mention this yet

00:26:41,920 --> 00:26:46,090
but we are not even supporting I

00:26:44,140 --> 00:26:50,230
Internet Explorer at all right now

00:26:46,090 --> 00:26:53,200
because it's not worth it we I looked at

00:26:50,230 --> 00:26:56,230
internet explorer 9 and we might support

00:26:53,200 --> 00:26:58,000
that it's a lot better but I'm not sure

00:26:56,230 --> 00:26:59,860
it's following the standards good enough

00:26:58,000 --> 00:27:01,030
we tried when we add out on how to

00:26:59,860 --> 00:27:04,870
develop something we just read the

00:27:01,030 --> 00:27:06,490
standard and use that and if internet

00:27:04,870 --> 00:27:08,800
explorer adheres to that we may we may

00:27:06,490 --> 00:27:11,320
start using that I don't see that as a

00:27:08,800 --> 00:27:13,800
big for adoption of the project because

00:27:11,320 --> 00:27:16,390
if you want to use a native application

00:27:13,800 --> 00:27:19,750
you free to choose any browser you like

00:27:16,390 --> 00:27:21,730
a WebKit component for example if you

00:27:19,750 --> 00:27:24,750
want to use it on an Internet you

00:27:21,730 --> 00:27:27,070
control who is using web browser so

00:27:24,750 --> 00:27:31,390
selecting on quality of browser is not

00:27:27,070 --> 00:27:34,030
doing an issue I think yeah so we also

00:27:31,390 --> 00:27:36,460
test with the command line programs just

00:27:34,030 --> 00:27:38,230
so that we can do a unit testing easily

00:27:36,460 --> 00:27:40,210
we don't have to press reload in all the

00:27:38,230 --> 00:27:42,610
browsers we can just run something on

00:27:40,210 --> 00:27:44,710
the command line in cementing the code

00:27:42,610 --> 00:27:47,380
there's a very cool tool called Jas

00:27:44,710 --> 00:27:49,330
coverage what you do is you run an

00:27:47,380 --> 00:27:52,030
executable over your JavaScript code and

00:27:49,330 --> 00:27:55,060
it will instrument it that means it will

00:27:52,030 --> 00:27:57,040
add monitors in all of your code and

00:27:55,060 --> 00:27:58,840
then when you run your tests it will

00:27:57,040 --> 00:28:01,240
tell you how often every line of your

00:27:58,840 --> 00:28:03,250
code was executed and that's very good

00:28:01,240 --> 00:28:07,140
because you can you can check if you are

00:28:03,250 --> 00:28:07,140
actually testing all of your application

00:28:07,320 --> 00:28:13,060
ok no GS I want to say a few things

00:28:09,970 --> 00:28:17,080
about that because you want to run unit

00:28:13,060 --> 00:28:21,340
tests on the command line low GS is a v8

00:28:17,080 --> 00:28:24,160
engine it's the JavaScript engine which

00:28:21,340 --> 00:28:26,320
is in chrome and it uses callbacks and

00:28:24,160 --> 00:28:28,420
sensibly so it's very good for a server

00:28:26,320 --> 00:28:30,340
if you if you want to implement this

00:28:28,420 --> 00:28:33,180
server in JavaScript well this is the

00:28:30,340 --> 00:28:36,490
thing you need it's really up and coming

00:28:33,180 --> 00:28:38,530
we're also using right now it's a very

00:28:36,490 --> 00:28:40,330
slow javascript engine and it doesn't

00:28:38,530 --> 00:28:41,620
use callbacks so the reason why we're

00:28:40,330 --> 00:28:47,080
using that is because it's so different

00:28:41,620 --> 00:28:48,670
because the callbacks and do need

00:28:47,080 --> 00:28:49,420
special attention you need to make sure

00:28:48,670 --> 00:28:52,840
that

00:28:49,420 --> 00:28:54,400
if you pass a callback that you don't

00:28:52,840 --> 00:28:58,480
need it before you actually leave the

00:28:54,400 --> 00:29:01,060
the current execution loop and lastly

00:28:58,480 --> 00:29:03,970
we're using cute WebKit because neither

00:29:01,060 --> 00:29:05,620
no GS Laurel Rhino has a dome and we

00:29:03,970 --> 00:29:08,230
also would like to do tests on the dome

00:29:05,620 --> 00:29:10,540
on the command line so we have a cute

00:29:08,230 --> 00:29:17,890
WebKit which ones with no user interface

00:29:10,540 --> 00:29:20,140
and which we can do more testing with ok

00:29:17,890 --> 00:29:21,310
next in the list of tools which you want

00:29:20,140 --> 00:29:25,560
to use with javascript is a closure

00:29:21,310 --> 00:29:27,760
compiler since what what does it do it

00:29:25,560 --> 00:29:30,970
combines all your javascript files into

00:29:27,760 --> 00:29:32,560
one big file and optimizes that and in

00:29:30,970 --> 00:29:34,900
itself that's not really too important

00:29:32,560 --> 00:29:37,210
for this project because the code isn't

00:29:34,900 --> 00:29:39,250
so huge but it also the syntax checking

00:29:37,210 --> 00:29:40,990
and it also does type checking so

00:29:39,250 --> 00:29:42,370
instead of waiting for your browser to

00:29:40,990 --> 00:29:43,720
give an error you can already on the

00:29:42,370 --> 00:29:46,360
command line see if your code is any

00:29:43,720 --> 00:29:48,910
good how does this type checking work

00:29:46,360 --> 00:29:51,400
below here is a smaller code fragment

00:29:48,910 --> 00:29:54,190
and you basically you set comments

00:29:51,400 --> 00:29:56,500
seeing what type every argument to your

00:29:54,190 --> 00:29:58,570
code is and even if you pass a callback

00:29:56,500 --> 00:30:00,220
function you can say what the arguments

00:29:58,570 --> 00:30:02,920
to the callback function should be and

00:30:00,220 --> 00:30:09,340
it's surprising how many type errors

00:30:02,920 --> 00:30:12,280
this this will catch ok that was most of

00:30:09,340 --> 00:30:15,400
the talk already I would like to at the

00:30:12,280 --> 00:30:17,920
end show a way of how to use web odf in

00:30:15,400 --> 00:30:20,800
your program if you download the code

00:30:17,920 --> 00:30:22,990
you'll see two examples there one

00:30:20,800 --> 00:30:25,840
example is to use web odf in acute

00:30:22,990 --> 00:30:27,640
application where you using cute web pit

00:30:25,840 --> 00:30:30,130
and you create a canvas where you can

00:30:27,640 --> 00:30:31,810
load oef documents and another example

00:30:30,130 --> 00:30:33,490
which is in there is to make an android

00:30:31,810 --> 00:30:36,000
application which could show ODF

00:30:33,490 --> 00:30:38,980
documents at the moment there is no

00:30:36,000 --> 00:30:42,220
decent application on android to show

00:30:38,980 --> 00:30:45,040
ODF documents and this one is also just

00:30:42,220 --> 00:30:47,590
a demo so is it is well it's not

00:30:45,040 --> 00:30:49,720
released as a decent solution which is

00:30:47,590 --> 00:30:52,090
in the marketplace yet but it's very

00:30:49,720 --> 00:30:55,210
small because most of the code is in the

00:30:52,090 --> 00:30:57,340
JavaScript which is shared and it would

00:30:55,210 --> 00:30:59,080
be very easy also to make for example an

00:30:57,340 --> 00:31:01,290
iphone or blackberry version of this

00:30:59,080 --> 00:31:01,290
application

00:31:02,190 --> 00:31:09,210
so this is this is a small excerpt of

00:31:07,289 --> 00:31:12,299
the code of it it's basically two

00:31:09,210 --> 00:31:16,980
classes and here you see some of the

00:31:12,299 --> 00:31:20,460
magic happening here what you do is you

00:31:16,980 --> 00:31:25,049
you load this ODF HTML file in your web

00:31:20,460 --> 00:31:27,419
get the widget and when it's loaded you

00:31:25,049 --> 00:31:29,370
change the current run time you change

00:31:27,419 --> 00:31:32,820
the read function and you change the

00:31:29,370 --> 00:31:35,370
function for the get file size and once

00:31:32,820 --> 00:31:38,730
you've done that then you instantiate a

00:31:35,370 --> 00:31:41,909
new ODF container so we're overloading

00:31:38,730 --> 00:31:44,730
to two functions and then this gives our

00:31:41,909 --> 00:31:46,799
application the ability to read any file

00:31:44,730 --> 00:31:48,870
on the file system so the advantage of

00:31:46,799 --> 00:31:50,309
this application is that it can actually

00:31:48,870 --> 00:31:56,549
show you files which are on your disk

00:31:50,309 --> 00:32:00,210
and I'll I run it now it's here so this

00:31:56,549 --> 00:32:02,399
is the simulator it's it's an older

00:32:00,210 --> 00:32:04,559
version of Android I purvis purposefully

00:32:02,399 --> 00:32:05,669
used an older version to show that also

00:32:04,559 --> 00:32:08,539
works that you don't need all the new

00:32:05,669 --> 00:32:11,820
features in Android to get this running

00:32:08,539 --> 00:32:18,929
so here it goes um let's open a

00:32:11,820 --> 00:32:20,850
spreadsheet the emulator is a bit slow

00:32:18,929 --> 00:32:23,870
on the device it would be faster yeah so

00:32:20,850 --> 00:32:34,139
you hear you see very simple spreadsheet

00:32:23,870 --> 00:32:37,470
let's open a small text file and you see

00:32:34,139 --> 00:32:41,129
that this is just a it's really just an

00:32:37,470 --> 00:32:47,669
HTML page but they also enjoy provide

00:32:41,129 --> 00:32:50,419
you with nice UI here and yeah it's a

00:32:47,669 --> 00:32:52,799
very small application most of it is

00:32:50,419 --> 00:32:59,190
most of it is just the JavaScript which

00:32:52,799 --> 00:33:01,019
is shared okay so what are the current

00:32:59,190 --> 00:33:02,460
activities in the project where we've

00:33:01,019 --> 00:33:03,960
been going for half a year where we're

00:33:02,460 --> 00:33:05,520
being sponsored by an outlet we still

00:33:03,960 --> 00:33:07,170
have about three months of months

00:33:05,520 --> 00:33:09,540
left a funding not not full-time

00:33:07,170 --> 00:33:11,250
part-time hunting and during this time

00:33:09,540 --> 00:33:13,800
we want to improve the rendering of your

00:33:11,250 --> 00:33:16,020
documents because we will certainly we

00:33:13,800 --> 00:33:17,400
certainly if you open the document in a

00:33:16,020 --> 00:33:18,990
web ID of it it certainly doesn't

00:33:17,400 --> 00:33:21,120
completely look like it would do in

00:33:18,990 --> 00:33:22,230
legal office or Caligula right now so

00:33:21,120 --> 00:33:24,180
there's still some quite some

00:33:22,230 --> 00:33:26,400
improvements to be made there we're

00:33:24,180 --> 00:33:28,530
making API so that you can control the

00:33:26,400 --> 00:33:31,410
ODF canvas if you want to write your own

00:33:28,530 --> 00:33:34,320
custom JavaScript html5 application

00:33:31,410 --> 00:33:36,120
which just an OD of widget in there it

00:33:34,320 --> 00:33:38,400
would be nice to have a nice API in

00:33:36,120 --> 00:33:41,010
there we do have something API where you

00:33:38,400 --> 00:33:43,050
can zoom in and out and where you can

00:33:41,010 --> 00:33:44,850
exchange parts of the document

00:33:43,050 --> 00:33:47,250
programmatically but we want to extend

00:33:44,850 --> 00:33:48,480
that a bit to make it nicer and of

00:33:47,250 --> 00:33:53,160
course suggestions of people who are

00:33:48,480 --> 00:33:56,070
using the code are welcome yeah we want

00:33:53,160 --> 00:33:57,870
to write support we want to have right

00:33:56,070 --> 00:34:00,450
support so we can actually save a file

00:33:57,870 --> 00:34:02,370
back this is partially done already and

00:34:00,450 --> 00:34:04,710
we want to support limiting limited

00:34:02,370 --> 00:34:06,300
anything in the user interface not

00:34:04,710 --> 00:34:09,270
complete editing you won't be able to

00:34:06,300 --> 00:34:12,510
completely modify a whole table that's

00:34:09,270 --> 00:34:14,100
quite complicated if somebody would like

00:34:12,510 --> 00:34:18,120
to write this code the more than welcome

00:34:14,100 --> 00:34:19,530
but this is not our initial focus and if

00:34:18,120 --> 00:34:21,450
you're interested in this code it's only

00:34:19,530 --> 00:34:24,210
three thousand lines of JavaScript right

00:34:21,450 --> 00:34:25,890
now so you can check it out and become

00:34:24,210 --> 00:34:29,100
creative just put it on your web server

00:34:25,890 --> 00:34:31,140
and see see what's missing and I'm sure

00:34:29,100 --> 00:34:36,720
it's whatever is missing for you is easy

00:34:31,140 --> 00:34:39,630
to fix unless it's some big feature okay

00:34:36,720 --> 00:34:42,149
summarizing open document format is

00:34:39,630 --> 00:34:45,690
great I guess all three speakers in this

00:34:42,149 --> 00:34:49,980
track will agree with that the community

00:34:45,690 --> 00:34:51,929
for early f is very active and what ODF

00:34:49,980 --> 00:34:55,530
is great because it can bring ODF to

00:34:51,929 --> 00:34:58,080
websites and too many devices and Weber

00:34:55,530 --> 00:35:00,360
EF is also great because it doesn't mess

00:34:58,080 --> 00:35:03,600
around with your ODF it just keeps it in

00:35:00,360 --> 00:35:06,750
your document as ODF it doesn't convert

00:35:03,600 --> 00:35:12,530
it to some internal one time so weber

00:35:06,750 --> 00:35:12,530
IDF makes early f easy and fun thank you

00:35:19,869 --> 00:35:28,249
so well we now have actually 50 minutes

00:35:23,450 --> 00:35:32,150
for questions so have you considered

00:35:28,249 --> 00:35:34,219
turning web odf into a firefox extension

00:35:32,150 --> 00:35:36,619
so that you can preview ODF files on

00:35:34,219 --> 00:35:39,739
sites which don't have web ODF installed

00:35:36,619 --> 00:35:41,599
you can record it on what so there's

00:35:39,739 --> 00:35:44,539
lots of ODF documents on the web right

00:35:41,599 --> 00:35:46,549
now they're in this system the what the

00:35:44,539 --> 00:35:49,009
owner of the website has to install ODF

00:35:46,549 --> 00:35:50,690
with HTML are on their domain in order

00:35:49,009 --> 00:35:52,130
to be able to preview them if you turn

00:35:50,690 --> 00:35:54,380
took this code and made it into a

00:35:52,130 --> 00:35:56,569
browser extension then the owner of the

00:35:54,380 --> 00:35:58,849
browser could preview any ODF document

00:35:56,569 --> 00:36:01,009
that sounds very good idea yeah I

00:35:58,849 --> 00:36:02,479
haven't salih bit that I haven't thought

00:36:01,009 --> 00:36:04,579
about that because I wasn't aware that

00:36:02,479 --> 00:36:07,519
an extension might be able to sort of

00:36:04,579 --> 00:36:09,049
handle a mime type oh absolutely then

00:36:07,519 --> 00:36:10,700
about in other browsers but certainly in

00:36:09,049 --> 00:36:13,369
Firefox it would be very easy to make

00:36:10,700 --> 00:36:14,690
this son yeah I mean I think this has

00:36:13,369 --> 00:36:16,219
actually been tried before there was a

00:36:14,690 --> 00:36:17,539
Firefox extension that did some very

00:36:16,219 --> 00:36:19,249
simple stuff but you seem to have got a

00:36:17,539 --> 00:36:21,079
whole lot further so be really

00:36:19,249 --> 00:36:23,059
interesting I mean I personally think

00:36:21,079 --> 00:36:24,799
that it would be a cool feature for

00:36:23,059 --> 00:36:26,599
Firefox to have in the core eventually a

00:36:24,799 --> 00:36:28,940
kind of preview mode ODF ours would

00:36:26,599 --> 00:36:30,739
really driver the adoption and if your

00:36:28,940 --> 00:36:32,930
code could get to a you know a certain

00:36:30,739 --> 00:36:36,680
level of fidelity and a certain level of

00:36:32,930 --> 00:36:38,930
reliability yeah then why not yep also

00:36:36,680 --> 00:36:40,459
if it's an extension you can just when

00:36:38,930 --> 00:36:42,349
somebody clicks in it you can open it

00:36:40,459 --> 00:36:44,469
show it but on the top have a big button

00:36:42,349 --> 00:36:50,479
saying actually open it on your desktop

00:36:44,469 --> 00:36:59,719
yeah good suggestion are there any more

00:36:50,479 --> 00:37:06,859
questions oh all the way up there were

00:36:59,719 --> 00:37:12,079
you again maybe you have said it I was a

00:37:06,859 --> 00:37:16,839
bit late but what is the added value of

00:37:12,079 --> 00:37:16,839
web ODF compared to native HTML

00:37:18,500 --> 00:37:24,050
well that's native HTML isn't ODF so if

00:37:22,280 --> 00:37:25,760
you have office documents which people

00:37:24,050 --> 00:37:27,860
are creating with with Mabel office

00:37:25,760 --> 00:37:30,050
microsoft office Calleja and then you

00:37:27,860 --> 00:37:31,910
also want to publish them on the web how

00:37:30,050 --> 00:37:33,860
are you going to do that you need

00:37:31,910 --> 00:37:38,420
something for that and I think web.pdf

00:37:33,860 --> 00:37:41,720
is a very nice way of doing that is true

00:37:38,420 --> 00:37:49,370
to the original document as HTML allows

00:37:41,720 --> 00:37:52,120
so HTML one time allows any more

00:37:49,370 --> 00:38:08,210
questions yeah plan here's a question

00:37:52,120 --> 00:38:09,530
sorry i'm not sure if i remember

00:38:08,210 --> 00:38:12,470
correctly but he said something like

00:38:09,530 --> 00:38:19,550
that since you modify it directly the

00:38:12,470 --> 00:38:22,930
ODF the document model then you re

00:38:19,550 --> 00:38:27,770
render it into the into the into the

00:38:22,930 --> 00:38:31,300
exact at html5 Dom right and this I

00:38:27,770 --> 00:38:33,920
think could be a problem for I mean the

00:38:31,300 --> 00:38:38,450
speed the performance of the program I

00:38:33,920 --> 00:38:41,390
mean probably is unfeasible to go the

00:38:38,450 --> 00:38:45,940
other way around I mean to keep to

00:38:41,390 --> 00:38:49,870
changes in sync or to use another

00:38:45,940 --> 00:38:52,250
document object model in the middle of

00:38:49,870 --> 00:38:56,930
what you are doing currently it will be

00:38:52,250 --> 00:38:59,830
out of right so it's not visible but do

00:38:56,930 --> 00:39:01,790
you think at least for the simple

00:38:59,830 --> 00:39:04,070
editing capabilities that you are

00:39:01,790 --> 00:39:08,660
planning to now it won't be a problem or

00:39:04,070 --> 00:39:09,740
I mean I'm just the I completely see

00:39:08,660 --> 00:39:12,860
where you see that there might be a

00:39:09,740 --> 00:39:14,090
performance problem and well for small

00:39:12,860 --> 00:39:15,830
documents actually there's no

00:39:14,090 --> 00:39:18,260
performance problem because loading is

00:39:15,830 --> 00:39:20,000
loading is pretty fast as well I didn't

00:39:18,260 --> 00:39:22,160
actually show benchmark here but if you

00:39:20,000 --> 00:39:24,620
want to load for example the the ODS

00:39:22,160 --> 00:39:28,040
specification which is a 600 document

00:39:24,620 --> 00:39:30,200
600 page document it takes double as

00:39:28,040 --> 00:39:31,500
long as libre office doesn't it was

00:39:30,200 --> 00:39:33,630
about as fast as i open

00:39:31,500 --> 00:39:35,340
but the latest live office people

00:39:33,630 --> 00:39:36,720
released was quite a bit faster so

00:39:35,340 --> 00:39:38,760
unfortunately I can't say anymore that

00:39:36,720 --> 00:39:41,480
is comparable speed it's double the

00:39:38,760 --> 00:39:43,830
speed right now but it's pretty fast now

00:39:41,480 --> 00:39:45,750
that's of course the unzipping and then

00:39:43,830 --> 00:39:48,570
the rendering if you just do if you just

00:39:45,750 --> 00:39:51,600
update the the rendering that certainly

00:39:48,570 --> 00:39:54,690
takes several hundred milliseconds for a

00:39:51,600 --> 00:39:57,030
decent document and your suggestion of

00:39:54,690 --> 00:39:58,680
if there's an editor in one place just

00:39:57,030 --> 00:40:00,630
do a frag update only fragment of the

00:39:58,680 --> 00:40:02,670
CSS I think makes sense but I don't

00:40:00,630 --> 00:40:05,100
think you should change the CSS and then

00:40:02,670 --> 00:40:06,720
when you start saving then only at that

00:40:05,100 --> 00:40:08,660
point go back to the to the styles

00:40:06,720 --> 00:40:11,880
because then your programming logic

00:40:08,660 --> 00:40:16,290
becomes quite complex it makes more

00:40:11,880 --> 00:40:20,130
sense to say ok the styles.xml is sort

00:40:16,290 --> 00:40:23,310
of the the real value and the CSS is a

00:40:20,130 --> 00:40:25,670
reflection of it but updating it can be

00:40:23,310 --> 00:40:32,690
done in small parts to make it faster

00:40:25,670 --> 00:40:35,280
thank you right nope any more questions

00:40:32,690 --> 00:40:43,860
there's a question ha we are you

00:40:35,280 --> 00:40:46,590
Jonathan home yes you said we can use

00:40:43,860 --> 00:40:49,680
web ODF in cute application could you

00:40:46,590 --> 00:40:54,030
list which cute modules you may use for

00:40:49,680 --> 00:40:57,060
that sorry the cute four modules for

00:40:54,030 --> 00:41:00,930
example web Kate or some other modules

00:40:57,060 --> 00:41:04,220
yes Adi of itself doesn't need cute but

00:41:00,930 --> 00:41:08,640
you can use the cute webhead module to

00:41:04,220 --> 00:41:10,500
display web ODF so in web earlier we

00:41:08,640 --> 00:41:13,080
have a small demo application which is

00:41:10,500 --> 00:41:16,050
just a couple of hundred lines of cute

00:41:13,080 --> 00:41:20,070
c++ which basically embeds the

00:41:16,050 --> 00:41:22,620
javascript files starts a star secured

00:41:20,070 --> 00:41:25,320
web page and then says okay now just

00:41:22,620 --> 00:41:27,300
render render this and so all the

00:41:25,320 --> 00:41:30,180
application does is it says okay this

00:41:27,300 --> 00:41:31,470
file access the web the web component is

00:41:30,180 --> 00:41:34,140
not allowed to access the file system

00:41:31,470 --> 00:41:36,300
usually especially not via XL HTTP

00:41:34,140 --> 00:41:38,370
requests so it just goes back to the

00:41:36,300 --> 00:41:40,020
cute code there's a binding for that and

00:41:38,370 --> 00:41:42,360
then the cute code will read the file

00:41:40,020 --> 00:41:43,830
and pass it on but it's it's just a

00:41:42,360 --> 00:41:44,790
little bit of cute code most of it is

00:41:43,830 --> 00:41:47,400
shared

00:41:44,790 --> 00:41:50,430
so even if your application is an very

00:41:47,400 --> 00:41:52,080
GD k cute the the whole layer should be

00:41:50,430 --> 00:41:54,300
quite small most of it is all JavaScript

00:41:52,080 --> 00:41:55,590
code you just the native binding is

00:41:54,300 --> 00:42:03,890
something which you need to write as

00:41:55,590 --> 00:42:06,690
dedicated code for i'm i'm currently

00:42:03,890 --> 00:42:09,420
publishing some audio documents just by

00:42:06,690 --> 00:42:12,450
exporting them to HTML from home and

00:42:09,420 --> 00:42:15,090
office it's just a few but I probably

00:42:12,450 --> 00:42:17,660
could automate that why would I move to

00:42:15,090 --> 00:42:20,430
web of the effort would be affinities

00:42:17,660 --> 00:42:22,260
well you would do less work you don't

00:42:20,430 --> 00:42:24,090
need to convert your documents because

00:42:22,260 --> 00:42:25,260
what should we do I don't know what your

00:42:24,090 --> 00:42:26,910
web server looks like whether if it's

00:42:25,260 --> 00:42:28,680
just a page say okay these are my

00:42:26,910 --> 00:42:31,020
documents here are links to the HTML

00:42:28,680 --> 00:42:32,520
versions and here are links to the real

00:42:31,020 --> 00:42:34,890
documents that's probably what it looks

00:42:32,520 --> 00:42:38,220
like so what you would then do is you

00:42:34,890 --> 00:42:40,620
could remove the HTML link or at least

00:42:38,220 --> 00:42:42,960
change it to go to this ODF toad not ml

00:42:40,620 --> 00:42:45,030
with the with the hash and then just

00:42:42,960 --> 00:42:46,650
link to the file and you're saving a

00:42:45,030 --> 00:42:49,590
tiny bit of this space because you don't

00:42:46,650 --> 00:42:51,690
need to store the HTML version and also

00:42:49,590 --> 00:42:53,970
I think that this version might look

00:42:51,690 --> 00:42:55,560
better but I don't know what could what

00:42:53,970 --> 00:42:57,470
the converter looks like is it something

00:42:55,560 --> 00:43:00,480
which creates bitmaps or doesn't create

00:42:57,470 --> 00:43:01,890
which which filter I using well they're

00:43:00,480 --> 00:43:06,260
just a few pictures shall shoot a

00:43:01,890 --> 00:43:06,260
miracle but I'll give it a try yeah okay

00:43:06,770 --> 00:43:14,040
doesn't know of course if it's pictures

00:43:12,510 --> 00:43:18,150
but if it's pictures you can't select

00:43:14,040 --> 00:43:20,160
text anymore so and here you can well

00:43:18,150 --> 00:43:24,300
you have one slide briefly mentioning a

00:43:20,160 --> 00:43:26,910
project named oef kid in the concepts of

00:43:24,300 --> 00:43:31,380
WebKit is is that superseded now bye-bye

00:43:26,910 --> 00:43:32,960
web ODF sorry you're quite hard to

00:43:31,380 --> 00:43:36,690
understand pay you okay a cup of it um

00:43:32,960 --> 00:43:39,690
is that better yeah okay you mentioned a

00:43:36,690 --> 00:43:42,000
project on one slide called ODF kid yes

00:43:39,690 --> 00:43:45,510
and in the context of WebKit so it's

00:43:42,000 --> 00:43:47,910
humid c++ something or see and but you

00:43:45,510 --> 00:43:51,360
continue to talk about web modf so is

00:43:47,910 --> 00:43:54,060
wipeout EF superseding the ODF kit or no

00:43:51,360 --> 00:43:56,610
they're separate projects ODF get came

00:43:54,060 --> 00:43:57,819
first and rdf get basically is as as

00:43:56,610 --> 00:44:00,400
largest

00:43:57,819 --> 00:44:02,589
just patch on WebKit to give WebKit

00:44:00,400 --> 00:44:06,880
support for odf files so we added some

00:44:02,589 --> 00:44:09,729
logic there to do unzipping and two to

00:44:06,880 --> 00:44:11,709
go for it turu to read either the XML

00:44:09,729 --> 00:44:14,140
format or to read the zip format and

00:44:11,709 --> 00:44:16,989
also load it into the Dom tree and then

00:44:14,140 --> 00:44:20,519
do some javascript work on that however

00:44:16,989 --> 00:44:22,630
when we were writing this we saw that

00:44:20,519 --> 00:44:25,299
actually most of the things which we

00:44:22,630 --> 00:44:27,039
were rich were patching WebKit for you

00:44:25,299 --> 00:44:30,819
could just write in JavaScript and that

00:44:27,039 --> 00:44:34,029
would be easier so I do think that web

00:44:30,819 --> 00:44:36,400
ODF is more elegant solution but if you

00:44:34,029 --> 00:44:39,130
really want war speed then you can still

00:44:36,400 --> 00:44:41,410
then ODF kit is nicer because then you

00:44:39,130 --> 00:44:43,359
have the unzipping support for example

00:44:41,410 --> 00:44:45,190
in the browser itself that being said I

00:44:43,359 --> 00:44:47,799
do think that and we might actually

00:44:45,190 --> 00:44:49,660
submitters a patch to the WebKit people

00:44:47,799 --> 00:44:53,199
saying hey why don't you add unzip

00:44:49,660 --> 00:44:56,319
supports as an as a faster version just

00:44:53,199 --> 00:44:58,779
by having it in the c++ code it would

00:44:56,319 --> 00:45:00,369
require the extension of their interface

00:44:58,779 --> 00:45:03,039
is not sure if they would accept it but

00:45:00,369 --> 00:45:05,109
yeah it would it would benefit sort of

00:45:03,039 --> 00:45:07,049
everybody using web kit and also web odf

00:45:05,109 --> 00:45:10,509
would then be faster because we need to

00:45:07,049 --> 00:45:14,440
implement that itself the the way

00:45:10,509 --> 00:45:16,989
JavaScript handles binary binary race is

00:45:14,440 --> 00:45:19,420
basically nonexistent it's just in an

00:45:16,989 --> 00:45:26,859
array of numbers so that's really quite

00:45:19,420 --> 00:45:31,920
inefficient but it's fast enough all

00:45:26,859 --> 00:45:36,430
right are there any more questions I

00:45:31,920 --> 00:45:40,650
don't see anything well thank you all

00:45:36,430 --> 00:45:40,650
for attention thanks to the speaker

00:45:42,740 --> 00:45:44,800

YouTube URL: https://www.youtube.com/watch?v=TpAsk69vI0k


