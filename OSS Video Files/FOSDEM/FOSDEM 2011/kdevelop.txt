Title: kdevelop
Publication date: 2011-12-22
Playlist: FOSDEM 2011
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:06,440 --> 00:00:11,720
everyone um yeah 15 minutes is not much

00:00:11,219 --> 00:00:15,380
time

00:00:11,720 --> 00:00:18,050
kdevelop so I concentrate on one part of

00:00:15,380 --> 00:00:20,690
it mainly in my opinion one of the most

00:00:18,050 --> 00:00:25,100
important ones the C++ language support

00:00:20,690 --> 00:00:28,250
and in my opinion what makes it stand

00:00:25,100 --> 00:00:31,849
apart is that we try to understand you

00:00:28,250 --> 00:00:34,940
or C++ code which enables us to support

00:00:31,849 --> 00:00:38,930
quite a lot of nice features making it

00:00:34,940 --> 00:00:42,680
possible to help you write C++ code in a

00:00:38,930 --> 00:00:46,040
much faster rate so let's start with

00:00:42,680 --> 00:00:47,690
quite a simple thing I would say syntax

00:00:46,040 --> 00:00:51,490
highlighting is one of the most basic

00:00:47,690 --> 00:00:54,140
features every IDE and editor needs and

00:00:51,490 --> 00:00:56,690
C++ is pretty hard to highlight because

00:00:54,140 --> 00:00:58,610
essentially what you need is to parse

00:00:56,690 --> 00:01:00,560
the coat and to understand it to do it

00:00:58,610 --> 00:01:04,180
properly because this is something like

00:01:00,560 --> 00:01:08,119
no highlighting of course it's not very

00:01:04,180 --> 00:01:10,189
good to find an overview there right so

00:01:08,119 --> 00:01:12,950
let's see how Kate the normal editor

00:01:10,189 --> 00:01:15,439
does it it just has a bunch of keywords

00:01:12,950 --> 00:01:18,290
that highlights basically so um of

00:01:15,439 --> 00:01:21,230
course it's better already but you still

00:01:18,290 --> 00:01:23,420
cannot really differentiate between what

00:01:21,230 --> 00:01:25,070
is what at a single glance like what is

00:01:23,420 --> 00:01:27,530
the function what is the typedef what is

00:01:25,070 --> 00:01:29,930
the namespace what is the custom class

00:01:27,530 --> 00:01:32,390
whatever so take a look at how kdevelop

00:01:29,930 --> 00:01:35,450
does it we parse the code we understand

00:01:32,390 --> 00:01:37,760
it we analyze it we put lots of shiny

00:01:35,450 --> 00:01:40,970
colors on it and they actually have a

00:01:37,760 --> 00:01:43,610
meaning I mean look at it the namespaces

00:01:40,970 --> 00:01:46,340
are read the type there's have a dark

00:01:43,610 --> 00:01:51,200
green custom types have a bright green

00:01:46,340 --> 00:01:54,080
and functions are blue methods from the

00:01:51,200 --> 00:01:57,049
same class yellow and all that so just a

00:01:54,080 --> 00:01:59,210
quick glance at the code you can find

00:01:57,049 --> 00:02:01,670
out what is what and this is really

00:01:59,210 --> 00:02:03,830
really neat and actually we can do more

00:02:01,670 --> 00:02:07,340
if you look at the bottom function the

00:02:03,830 --> 00:02:10,369
variables are still all just old and

00:02:07,340 --> 00:02:13,430
black but if you turn on local

00:02:10,369 --> 00:02:16,189
colorization we do magic and put the

00:02:13,430 --> 00:02:19,790
rainbow in there and this really helps

00:02:16,189 --> 00:02:20,980
if you think about the three variables

00:02:19,790 --> 00:02:25,150
called V

00:02:20,980 --> 00:02:27,819
v 1 and v big why the guy they if you

00:02:25,150 --> 00:02:29,530
don't have any highlighting they look

00:02:27,819 --> 00:02:31,299
nearly the same but with color

00:02:29,530 --> 00:02:35,530
highlighting you can differentiate them

00:02:31,299 --> 00:02:38,170
very easily so um you can configure all

00:02:35,530 --> 00:02:40,299
that to your likings what else do we

00:02:38,170 --> 00:02:43,480
have code completion of course very

00:02:40,299 --> 00:02:47,920
important as well and we hope that it

00:02:43,480 --> 00:02:50,920
just works um it does for most things

00:02:47,920 --> 00:02:54,640
like you I call some function which

00:02:50,920 --> 00:02:57,610
returns a something q week poetry rich

00:02:54,640 --> 00:02:59,260
and as you can see it just passes the

00:02:57,610 --> 00:03:01,390
code understands what is returned from

00:02:59,260 --> 00:03:03,879
the function and offers you the correct

00:03:01,390 --> 00:03:06,129
code completion but you can also use

00:03:03,879 --> 00:03:08,440
macros if you want to there are lots of

00:03:06,129 --> 00:03:10,810
friend works I think which force you to

00:03:08,440 --> 00:03:14,859
use macros for quite a lot of functions

00:03:10,810 --> 00:03:17,650
and it works as well so this is for us

00:03:14,859 --> 00:03:20,650
the same as you would write ASDF and

00:03:17,650 --> 00:03:23,799
call that function directly but we also

00:03:20,650 --> 00:03:27,519
understand template code so Q week

00:03:23,799 --> 00:03:31,000
pointer is the pointer II of the full

00:03:27,519 --> 00:03:33,310
class up there with bar in there and bar

00:03:31,000 --> 00:03:35,230
is just the type to queue object and we

00:03:33,310 --> 00:03:37,480
understand that all and show you the

00:03:35,230 --> 00:03:40,209
correct code completion in this case and

00:03:37,480 --> 00:03:44,410
I think this is really really neat and

00:03:40,209 --> 00:03:46,750
helps you to write code very fast what

00:03:44,410 --> 00:03:49,569
else do we have I'm context sensitive

00:03:46,750 --> 00:03:51,880
information quite a lot of that and here

00:03:49,569 --> 00:03:55,359
it's just code completion as before but

00:03:51,880 --> 00:03:58,389
if I press out or use the mouse to click

00:03:55,359 --> 00:04:00,700
into the completion model and we shall

00:03:58,389 --> 00:04:04,750
more information about the function you

00:04:00,700 --> 00:04:06,970
about to execute and we show you where

00:04:04,750 --> 00:04:09,599
it's defined you can jump to the

00:04:06,970 --> 00:04:13,000
declaration we show inline documentation

00:04:09,599 --> 00:04:15,609
it's really neat and this way you don't

00:04:13,000 --> 00:04:18,370
have to look up this kind of

00:04:15,609 --> 00:04:21,729
documentation in a manual or anything it

00:04:18,370 --> 00:04:24,550
it's all there when you need it we also

00:04:21,729 --> 00:04:26,380
show which function argument you're in

00:04:24,550 --> 00:04:30,010
right now for example here i'm in a

00:04:26,380 --> 00:04:33,040
constructor of Q line at it I requested

00:04:30,010 --> 00:04:35,950
code completion with controlled space

00:04:33,040 --> 00:04:40,000
and up above the normal completion list

00:04:35,950 --> 00:04:42,760
I show the three overloads for the

00:04:40,000 --> 00:04:46,060
constructor and you can see what you

00:04:42,760 --> 00:04:49,960
want to do and what you should insert

00:04:46,060 --> 00:04:55,120
there as a type for the parameters we do

00:04:49,960 --> 00:04:57,730
best matching that means like the items

00:04:55,120 --> 00:05:00,940
in the computer completion list that are

00:04:57,730 --> 00:05:03,900
greenish in the left column are supposed

00:05:00,940 --> 00:05:06,970
to be proper matches for the current

00:05:03,900 --> 00:05:09,280
function argument you are in so this way

00:05:06,970 --> 00:05:11,680
you often don't have to search in the

00:05:09,280 --> 00:05:14,470
possibly quite large list of valid

00:05:11,680 --> 00:05:16,510
completion items but the most important

00:05:14,470 --> 00:05:19,930
ones are always at the top this is very

00:05:16,510 --> 00:05:22,570
helpful as well and of course we can do

00:05:19,930 --> 00:05:25,540
file code completion going through the

00:05:22,570 --> 00:05:29,560
include paths for your project and it

00:05:25,540 --> 00:05:32,500
just works as you would imagine so code

00:05:29,560 --> 00:05:34,270
navigation um similar to what i showed

00:05:32,500 --> 00:05:36,880
before in code completion with a

00:05:34,270 --> 00:05:39,190
pressing out you can also move the

00:05:36,880 --> 00:05:42,250
cursor around in your code and press out

00:05:39,190 --> 00:05:44,110
or have a declaration or use or whatever

00:05:42,250 --> 00:05:45,820
with your mouse and we will show this

00:05:44,110 --> 00:05:47,950
little pop up there giving you

00:05:45,820 --> 00:05:50,830
information about the symbol under the

00:05:47,950 --> 00:05:52,960
cursor and you can click on the links in

00:05:50,830 --> 00:05:55,180
there and jump to the declaration or

00:05:52,960 --> 00:05:57,970
show the uses of that declaration

00:05:55,180 --> 00:06:01,720
everything it's very helpful and makes

00:05:57,970 --> 00:06:06,550
it possible to analyze new code very

00:06:01,720 --> 00:06:09,160
fast and we show macro definitions which

00:06:06,550 --> 00:06:11,260
is sometimes very useful as well to see

00:06:09,160 --> 00:06:13,270
what is actually going on especially if

00:06:11,260 --> 00:06:16,060
you write code and it shows you parse

00:06:13,270 --> 00:06:17,640
error in line and you use the macro you

00:06:16,060 --> 00:06:20,920
often don't know what it actually does

00:06:17,640 --> 00:06:25,330
just hover it see the syntax error there

00:06:20,920 --> 00:06:26,980
continuing quite nice includes and this

00:06:25,330 --> 00:06:28,900
is many useful to jump to the

00:06:26,980 --> 00:06:32,050
declaration you could of course just

00:06:28,900 --> 00:06:35,410
ctrl click on the included will open the

00:06:32,050 --> 00:06:38,230
file but this is also good to give you a

00:06:35,410 --> 00:06:42,749
rough overview about what this include

00:06:38,230 --> 00:06:45,340
is supposed to do um there

00:06:42,749 --> 00:06:48,789
pop-up I showed before gives you the

00:06:45,340 --> 00:06:52,150
ability to browse coat in my opinion

00:06:48,789 --> 00:06:55,360
browsing code is also one of the most

00:06:52,150 --> 00:06:57,969
outstanding features of kdevelop many

00:06:55,360 --> 00:06:59,800
other ladies support that as well but we

00:06:57,969 --> 00:07:05,229
really stress it and put it to the next

00:06:59,800 --> 00:07:09,009
level and if you look at the pop-up you

00:07:05,229 --> 00:07:11,349
can use alt keys for example to browse

00:07:09,009 --> 00:07:14,169
through it and press ENTER jump to the

00:07:11,349 --> 00:07:17,139
coolest concentrator jump back and you

00:07:14,169 --> 00:07:21,550
don't have to use anything else except

00:07:17,139 --> 00:07:24,430
kdevelop to view a source code in a good

00:07:21,550 --> 00:07:28,000
way and of course we have this funny

00:07:24,430 --> 00:07:30,669
toolbar at at top which enables you to

00:07:28,000 --> 00:07:32,800
use the IDE similar to a browser if

00:07:30,669 --> 00:07:36,639
you're looking at code like you can jump

00:07:32,800 --> 00:07:40,479
back forwards search use the outline of

00:07:36,639 --> 00:07:42,039
a file all that it's very helpful and as

00:07:40,479 --> 00:07:44,379
you can see here this is just the

00:07:42,039 --> 00:07:47,919
navigation menu we have lots of features

00:07:44,379 --> 00:07:49,779
lots of shortcuts and eventually you

00:07:47,919 --> 00:07:52,479
will start to learn them and it makes

00:07:49,779 --> 00:07:55,150
you really fast and jumping around your

00:07:52,479 --> 00:07:57,490
code and it's very important that you

00:07:55,150 --> 00:08:03,039
learn this if you want to use kdevelop

00:07:57,490 --> 00:08:06,909
in its full potential so another thing

00:08:03,039 --> 00:08:08,919
quick open is also a tool bar up top but

00:08:06,909 --> 00:08:12,339
you can use the shortcuts to open the

00:08:08,919 --> 00:08:16,270
dialog as well and this way you are so

00:08:12,339 --> 00:08:18,669
fast to open any file any class or any

00:08:16,270 --> 00:08:20,770
function or any combinations of these in

00:08:18,669 --> 00:08:24,000
your code you just hit the shortcut

00:08:20,770 --> 00:08:26,610
insert some pattern like I don't know a

00:08:24,000 --> 00:08:29,469
foo bar and it shows you every file

00:08:26,610 --> 00:08:31,629
which has foo bar in its path in your

00:08:29,469 --> 00:08:34,719
open projects or in you include path

00:08:31,629 --> 00:08:37,240
however you want to configure it I

00:08:34,719 --> 00:08:40,719
personally use this like ninety percent

00:08:37,240 --> 00:08:43,510
of the time and only the normal control

00:08:40,719 --> 00:08:46,300
o file open dialog India about ten

00:08:43,510 --> 00:08:50,260
percent if at all so this is really a

00:08:46,300 --> 00:08:54,010
good feature as well and what else do we

00:08:50,260 --> 00:08:55,480
have um assistance these are little

00:08:54,010 --> 00:08:59,440
helpers that

00:08:55,480 --> 00:09:02,050
are supposed to take the mundane tasks

00:08:59,440 --> 00:09:05,260
and do them for you like for example if

00:09:02,050 --> 00:09:08,199
you separate the implementation from the

00:09:05,260 --> 00:09:11,410
definition and have a function like this

00:09:08,199 --> 00:09:13,930
and I just edit the comes through stuff

00:09:11,410 --> 00:09:15,699
to the constructor and it tells me like

00:09:13,930 --> 00:09:18,639
do you want to update the declaration

00:09:15,699 --> 00:09:21,910
signature and if I would now press out

00:09:18,639 --> 00:09:23,709
one or go with the mouse to the one and

00:09:21,910 --> 00:09:27,459
click on that it would automatically

00:09:23,709 --> 00:09:31,209
update the different a declaration up

00:09:27,459 --> 00:09:34,589
there it's really really need this angle

00:09:31,209 --> 00:09:38,260
goes for renaming variables for example

00:09:34,589 --> 00:09:41,769
imagine it was before in my bar in the

00:09:38,260 --> 00:09:43,810
class and i renamed it to my Varro to it

00:09:41,769 --> 00:09:45,910
offers me to do you want to rename all

00:09:43,810 --> 00:09:47,680
users of that variable it works as you

00:09:45,910 --> 00:09:50,820
would expect it's a new feature in

00:09:47,680 --> 00:09:53,980
kdevelop for the two by the way um

00:09:50,820 --> 00:09:57,370
there's a declaration system you can

00:09:53,980 --> 00:10:00,370
write like an expression without the

00:09:57,370 --> 00:10:03,130
types and it offers you like do you want

00:10:00,370 --> 00:10:06,550
to declare that as local variable and it

00:10:03,130 --> 00:10:08,529
will add the type to that variable and

00:10:06,550 --> 00:10:10,569
you can also declare it as a public

00:10:08,529 --> 00:10:12,610
variable in the class and if you do that

00:10:10,569 --> 00:10:14,970
in the CPP file it will automatically

00:10:12,610 --> 00:10:18,639
edit in the header and it's very cool

00:10:14,970 --> 00:10:20,769
it's also very useful if you work with

00:10:18,639 --> 00:10:24,250
iterators a lot like you have something

00:10:20,769 --> 00:10:26,889
cue list Const begin you don't want to

00:10:24,250 --> 00:10:30,910
remember the long block of type you just

00:10:26,889 --> 00:10:33,220
write it equals list cons begin hit the

00:10:30,910 --> 00:10:36,850
out one and we'll add the type in front

00:10:33,220 --> 00:10:39,069
it's very useful and there is also

00:10:36,850 --> 00:10:42,010
missing to include a system like here I

00:10:39,069 --> 00:10:44,350
use the queue application without having

00:10:42,010 --> 00:10:47,620
it included anywhere and now kdevelop

00:10:44,350 --> 00:10:49,720
offers me do you want to at the include

00:10:47,620 --> 00:10:52,480
for that file because I found it in your

00:10:49,720 --> 00:10:53,980
include pass or instead do you want to

00:10:52,480 --> 00:10:59,459
use the forward declaration for this

00:10:53,980 --> 00:10:59,459
class and this is also very neat Oh

00:11:00,270 --> 00:11:05,990
there is a overload the system similar

00:11:03,180 --> 00:11:09,720
to code completion you write your class

00:11:05,990 --> 00:11:11,910
inherit from a virtual class and just to

00:11:09,720 --> 00:11:13,470
control space in the body and it tells

00:11:11,910 --> 00:11:15,900
you like do you want to overwrite the

00:11:13,470 --> 00:11:18,630
Pew static ones marked with a little red

00:11:15,900 --> 00:11:20,900
flag do you have to do those or the

00:11:18,630 --> 00:11:24,270
other virtual functions if you like to

00:11:20,900 --> 00:11:26,550
then you switch to the CPP file do the

00:11:24,270 --> 00:11:29,250
same control space and assume that I

00:11:26,550 --> 00:11:33,060
just edit these like five functions up

00:11:29,250 --> 00:11:36,480
there to the header I can now press like

00:11:33,060 --> 00:11:39,540
execute this item and it will write the

00:11:36,480 --> 00:11:41,550
function body there for me and I can

00:11:39,540 --> 00:11:48,350
just write the real code I'm interested

00:11:41,550 --> 00:11:48,350
in so DF any other questions for me

00:11:52,640 --> 00:12:08,010
nothing too fast so yeah thank you yes

00:12:05,430 --> 00:12:09,780
i'll be at the KDE booth if anyone has

00:12:08,010 --> 00:12:11,790
questions about k develop or muscle

00:12:09,780 --> 00:12:14,540
visualize or anything so yeah find me

00:12:11,790 --> 00:12:14,540

YouTube URL: https://www.youtube.com/watch?v=moLh_9X8WaQ


