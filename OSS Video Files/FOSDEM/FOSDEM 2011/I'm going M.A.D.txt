Title: I'm going M.A.D
Publication date: 2011-12-22
Playlist: FOSDEM 2011
Description: 
	by Spike Morelli 

When people talk about monitoring generally they are system people talking of hosts and network gear going up and down. That is the monitoring world as most people know it and it must change if we want to write better applications and offer better services.

FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,000 --> 00:00:02,030
I

00:00:04,470 --> 00:00:09,050
you

00:00:06,500 --> 00:00:11,570
ladies and gentlemen our next and final

00:00:09,050 --> 00:00:14,480
speaker in the system track is spy

00:00:11,570 --> 00:00:18,020
morelli who will be doing a talk

00:00:14,480 --> 00:00:20,199
entitled I'm going mad thank you very

00:00:18,020 --> 00:00:20,199
much

00:00:26,220 --> 00:00:34,150
is he working okay all right sorry about

00:00:29,500 --> 00:00:36,750
him mess up I've gone mad already so I'm

00:00:34,150 --> 00:00:40,839
going mad it's a I wanted to share what

00:00:36,750 --> 00:00:42,790
would have gone through in the past six

00:00:40,839 --> 00:00:45,070
years from Boehner completely a system

00:00:42,790 --> 00:00:47,680
administrator to doing development and

00:00:45,070 --> 00:00:49,930
then from being a full-time developer

00:00:47,680 --> 00:00:53,379
going back to do system administration

00:00:49,930 --> 00:00:56,820
how that worked out for me how many

00:00:53,379 --> 00:01:02,670
developers are in the audience

00:00:56,820 --> 00:01:08,770
operations folk do we have any QA people

00:01:02,670 --> 00:01:10,630
sorry all right so i can say that this

00:01:08,770 --> 00:01:14,890
will work for you but it has worked for

00:01:10,630 --> 00:01:18,750
me pretty well in in my various jobs so

00:01:14,890 --> 00:01:23,890
I'm going mad it's monitoring aided

00:01:18,750 --> 00:01:30,950
development and one point that I started

00:01:23,890 --> 00:01:32,869
like to start with is there we all cold

00:01:30,950 --> 00:01:36,229
and even when you start with your

00:01:32,869 --> 00:01:39,049
one-liner on a bash shell you are coding

00:01:36,229 --> 00:01:40,729
you're effectively coding and then maybe

00:01:39,049 --> 00:01:44,119
you're one lines it become not enough

00:01:40,729 --> 00:01:45,829
and you move to a bash script and then

00:01:44,119 --> 00:01:49,250
you can go farther and start to be perl

00:01:45,829 --> 00:01:52,640
python ruby anything that you want but

00:01:49,250 --> 00:01:55,130
your cold either even if you are an

00:01:52,640 --> 00:01:57,560
admin your coding if you are a QA person

00:01:55,130 --> 00:01:59,450
testing automation is becoming bigger

00:01:57,560 --> 00:02:02,569
and bigger and testing of the mission

00:01:59,450 --> 00:02:05,420
requires a lot of coding and also we've

00:02:02,569 --> 00:02:07,130
seen a huge uptake with a configuration

00:02:05,420 --> 00:02:08,660
management lately when you have a

00:02:07,130 --> 00:02:11,989
configuration management either if you

00:02:08,660 --> 00:02:14,000
use puppet or chef so at yourself

00:02:11,989 --> 00:02:16,340
writing Ruby you're still coding so

00:02:14,000 --> 00:02:17,750
we're still talking about code but

00:02:16,340 --> 00:02:20,150
somehow especially for people in

00:02:17,750 --> 00:02:22,250
operations where I come from you don't

00:02:20,150 --> 00:02:25,549
feel like our developer you're not treat

00:02:22,250 --> 00:02:28,040
as a developer and this is this is

00:02:25,549 --> 00:02:29,750
heartful because this is one of the

00:02:28,040 --> 00:02:32,690
reason the fact their operations and

00:02:29,750 --> 00:02:34,400
development use two completely different

00:02:32,690 --> 00:02:37,310
languages and don't recognize each other

00:02:34,400 --> 00:02:41,329
it's part of reason why in organizations

00:02:37,310 --> 00:02:44,810
we have these kind of problems and these

00:02:41,329 --> 00:02:46,970
are snippet of a map and manifest and as

00:02:44,810 --> 00:02:51,590
you can see it looks a lot like a piece

00:02:46,970 --> 00:02:54,290
of code so if we all code we should try

00:02:51,590 --> 00:02:55,790
to talk to each other more than we do

00:02:54,290 --> 00:02:58,130
when we should try to learn from each

00:02:55,790 --> 00:03:00,260
other more than we currently do and it's

00:02:58,130 --> 00:03:02,090
it's weird as a as a thing of not

00:03:00,260 --> 00:03:06,859
feeling as a developer as a system as a

00:03:02,090 --> 00:03:10,790
system person why don't I feel as a as a

00:03:06,859 --> 00:03:14,599
developer why are my scripts not treated

00:03:10,790 --> 00:03:16,880
z FD the were cold when when everybody

00:03:14,599 --> 00:03:19,430
when people start developing and they

00:03:16,880 --> 00:03:22,010
were the first hello world how is there

00:03:19,430 --> 00:03:23,870
anymore it kind of be about complexity

00:03:22,010 --> 00:03:26,239
because they're low world is now more

00:03:23,870 --> 00:03:29,810
complex than your automation screen and

00:03:26,239 --> 00:03:31,940
nonetheless you're kind of falling feel

00:03:29,810 --> 00:03:34,250
as if you were a developer when you're

00:03:31,940 --> 00:03:35,840
writing your first hello world people in

00:03:34,250 --> 00:03:36,580
operations are still the people that I

00:03:35,840 --> 00:03:39,160
know

00:03:36,580 --> 00:03:42,250
met in my in my career do not feel ever

00:03:39,160 --> 00:03:47,170
as developers before has something

00:03:42,250 --> 00:03:49,990
completely different now monitoring

00:03:47,170 --> 00:03:53,800
metrics is a lifetime love for me either

00:03:49,990 --> 00:03:56,470
since I started doing my career's

00:03:53,800 --> 00:03:59,170
assessment sysadmin the fact that I had

00:03:56,470 --> 00:04:02,080
nag yes and the Nagas checked all my

00:03:59,170 --> 00:04:03,700
systems for me was also the first day

00:04:02,080 --> 00:04:07,150
that someone showed me that naggers I

00:04:03,700 --> 00:04:10,060
was wow now something is checking things

00:04:07,150 --> 00:04:13,870
for me now if i can sleep much better

00:04:10,060 --> 00:04:16,390
than I used to and then these this huge

00:04:13,870 --> 00:04:19,840
uptick there is one from monitoring I

00:04:16,390 --> 00:04:24,250
discover metrics and metrics Caesar is

00:04:19,840 --> 00:04:26,560
something that it kind of is if it gets

00:04:24,250 --> 00:04:28,900
talking of monitoring tokina metrics

00:04:26,560 --> 00:04:31,750
some people use one term rather than the

00:04:28,900 --> 00:04:34,360
other they all kind of belong to the

00:04:31,750 --> 00:04:39,130
same world but effectively they have two

00:04:34,360 --> 00:04:41,440
completely different meanings metrics

00:04:39,130 --> 00:04:44,380
tell you how a system is doing

00:04:41,440 --> 00:04:48,100
monitoring tells you much more like is a

00:04:44,380 --> 00:04:50,550
system okay is the system broken and if

00:04:48,100 --> 00:04:53,640
you if you think about medicine I'd I

00:04:50,550 --> 00:04:56,650
think about the metaphor of a doctor

00:04:53,640 --> 00:04:58,780
doctors for our in our Western culture

00:04:56,650 --> 00:05:00,100
day they come in when you get sick so

00:04:58,780 --> 00:05:02,290
when you get sick you go and see the

00:05:00,100 --> 00:05:04,780
doctor and the doctor try to backtrack

00:05:02,290 --> 00:05:07,540
what happened are you were doing in in

00:05:04,780 --> 00:05:09,850
the last 10 months and figure out what

00:05:07,540 --> 00:05:13,720
might have gone wrong and when I went to

00:05:09,850 --> 00:05:16,000
China and I and I had kind of a I got to

00:05:13,720 --> 00:05:18,790
see how old Chinese doctors used to used

00:05:16,000 --> 00:05:22,060
to work a Chinese doctor always follows

00:05:18,790 --> 00:05:24,850
you it follows you when you are okay and

00:05:22,060 --> 00:05:27,070
you pay them to keep you healthy and

00:05:24,850 --> 00:05:29,860
when you get sick that's when you don't

00:05:27,070 --> 00:05:34,110
pay them because they failed and in this

00:05:29,860 --> 00:05:36,280
way metrics to me are much better way of

00:05:34,110 --> 00:05:38,470
understanding looking at a system

00:05:36,280 --> 00:05:42,130
because you kind of follow the system

00:05:38,470 --> 00:05:45,600
rather than just getting to know when

00:05:42,130 --> 00:05:50,760
something is broken or something works

00:05:45,600 --> 00:05:54,180
and I had I spent some time in India

00:05:50,760 --> 00:05:58,740
warehousing and in litter warehousing I

00:05:54,180 --> 00:06:02,190
met this guy there was a pure data geek

00:05:58,740 --> 00:06:04,380
at its best it has this huge pies of

00:06:02,190 --> 00:06:06,240
data heaps and heaps of data and he

00:06:04,380 --> 00:06:08,430
could pull out incredible things out of

00:06:06,240 --> 00:06:13,970
this it's a deal and that's where I got

00:06:08,430 --> 00:06:16,710
my my love for metric metrics comes from

00:06:13,970 --> 00:06:20,220
comes from these experience and this guy

00:06:16,710 --> 00:06:22,590
had a had a great message and one day he

00:06:20,220 --> 00:06:24,780
told me there is no such thing as too

00:06:22,590 --> 00:06:27,300
much data only data you don't know how

00:06:24,780 --> 00:06:30,210
to make sense off and this is very

00:06:27,300 --> 00:06:32,940
important because obviously there is a

00:06:30,210 --> 00:06:35,190
cost in having all this data and having

00:06:32,940 --> 00:06:38,040
all these metrics there is a data

00:06:35,190 --> 00:06:39,600
analytics dev room which was really

00:06:38,040 --> 00:06:42,030
interesting and they they talked a lot

00:06:39,600 --> 00:06:44,930
about how you do data mining and what

00:06:42,030 --> 00:06:48,050
you can get out of of that data and

00:06:44,930 --> 00:06:52,230
certainly it isn't a simple task but

00:06:48,050 --> 00:06:54,180
that task has huge payoffs and so

00:06:52,230 --> 00:06:55,980
sometimes you come across people that

00:06:54,180 --> 00:06:58,860
says well why would I want to keep

00:06:55,980 --> 00:07:01,050
certain metrics why would I want to you

00:06:58,860 --> 00:07:03,300
know I just keep CPU or I just keep

00:07:01,050 --> 00:07:04,500
memory those few things what's the point

00:07:03,300 --> 00:07:06,270
of keeping more than what's the point of

00:07:04,500 --> 00:07:07,680
keeping them for longer you know they're

00:07:06,270 --> 00:07:10,320
going to take all this space and then

00:07:07,680 --> 00:07:13,470
there's noise how am I going to find all

00:07:10,320 --> 00:07:17,970
the good informations that are hidden in

00:07:13,470 --> 00:07:19,500
all this data so why don't but while

00:07:17,970 --> 00:07:21,870
there is a cost at that point obviously

00:07:19,500 --> 00:07:23,600
is is partially through the reason cost

00:07:21,870 --> 00:07:27,870
to it but it's important to recognize

00:07:23,600 --> 00:07:31,980
the benefits and so certainly you have

00:07:27,870 --> 00:07:34,470
to mind information / floor there are no

00:07:31,980 --> 00:07:36,570
free lunches you cannot expect that by

00:07:34,470 --> 00:07:38,970
starting collecting data instantly

00:07:36,570 --> 00:07:41,280
you'll be able to figure out everything

00:07:38,970 --> 00:07:47,640
about your systems that you didn't know

00:07:41,280 --> 00:07:51,890
before and there certainly is a risk you

00:07:47,640 --> 00:07:51,890
will be misled by all those metrics

00:07:54,409 --> 00:08:01,459
so I didn't I didn't test my code as a

00:07:59,300 --> 00:08:04,309
system guy when I started I did no

00:08:01,459 --> 00:08:07,099
testing whatsoever obviously I would run

00:08:04,309 --> 00:08:09,309
a 1 i'm saying testing i'm kind of

00:08:07,099 --> 00:08:12,529
talking about unit testing to begin with

00:08:09,309 --> 00:08:14,689
but mostly we run my scripts and test

00:08:12,529 --> 00:08:18,249
them maybe on a debt time that barely

00:08:14,689 --> 00:08:21,649
were VMS maybe sun-sin beginning of zen

00:08:18,249 --> 00:08:23,360
and you would do someone there and then

00:08:21,649 --> 00:08:25,519
you would have a box in the office to

00:08:23,360 --> 00:08:27,679
run some of this stuff on and that was

00:08:25,519 --> 00:08:29,269
my new ride but you know you need

00:08:27,679 --> 00:08:34,579
testing nothing because that's not how

00:08:29,269 --> 00:08:36,979
we roll in hopes apparently and then I I

00:08:34,579 --> 00:08:38,689
met so I changed company changed job and

00:08:36,979 --> 00:08:41,599
I going to desert company where they

00:08:38,689 --> 00:08:43,490
were better developers and not just

00:08:41,599 --> 00:08:47,959
because the word better developers and

00:08:43,490 --> 00:08:50,779
better maybe uh is a abusing the term by

00:08:47,959 --> 00:08:53,600
the were more friendly toward operations

00:08:50,779 --> 00:08:55,970
and so they really believe in testing

00:08:53,600 --> 00:08:58,129
and they wanted to talk about it and so

00:08:55,970 --> 00:09:00,529
they were doing like talks you lunch and

00:08:58,129 --> 00:09:02,449
various things to which week and going

00:09:00,529 --> 00:09:05,480
as an operations department and is

00:09:02,449 --> 00:09:07,880
finally I got inspired by how they were

00:09:05,480 --> 00:09:09,560
approaching softer development how much

00:09:07,880 --> 00:09:11,630
value they were putting on testing and

00:09:09,560 --> 00:09:15,290
how much they were getting out of this

00:09:11,630 --> 00:09:18,620
testing they had metrics to prove that

00:09:15,290 --> 00:09:20,360
testing for them worked really well they

00:09:18,620 --> 00:09:22,790
produce better software's fewer bugs

00:09:20,360 --> 00:09:25,220
they had less problems in production and

00:09:22,790 --> 00:09:26,810
so I started to kind of wanted to do

00:09:25,220 --> 00:09:30,769
this fasting but then I still couldn't

00:09:26,810 --> 00:09:33,470
because systems don't do testing at all

00:09:30,769 --> 00:09:36,079
but then I moved on as I started my own

00:09:33,470 --> 00:09:38,420
business and I and I wanted to actually

00:09:36,079 --> 00:09:39,949
make something and I guess it's the same

00:09:38,420 --> 00:09:41,720
separating the same even with fries off

00:09:39,949 --> 00:09:43,939
the project's all the new free software

00:09:41,720 --> 00:09:46,550
projects are coming out these days they

00:09:43,939 --> 00:09:49,600
all have tests and they actually go on

00:09:46,550 --> 00:09:53,509
how much coverage what we'll get to it

00:09:49,600 --> 00:09:55,850
they get on the test so I started to do

00:09:53,509 --> 00:09:58,459
something and the amazing thing is that

00:09:55,850 --> 00:10:01,160
as I started to do testing I realize

00:09:58,459 --> 00:10:03,699
that actually in a way as a sister

00:10:01,160 --> 00:10:06,529
person i was doing testing already and

00:10:03,699 --> 00:10:09,319
when we still want to start to do TDD i

00:10:06,529 --> 00:10:12,620
realized that i used to do TDD with

00:10:09,319 --> 00:10:14,540
nagios because you would bring up a

00:10:12,620 --> 00:10:17,630
service in dagestan a service check in

00:10:14,540 --> 00:10:20,779
Nadia's and then you will bring up and

00:10:17,630 --> 00:10:23,509
nagisa monitoring system and then you

00:10:20,779 --> 00:10:25,699
will bring up the system and you will

00:10:23,509 --> 00:10:27,439
see the check pass which is what people

00:10:25,699 --> 00:10:29,779
do in test-driven development the right

00:10:27,439 --> 00:10:31,730
that has first the see the test failing

00:10:29,779 --> 00:10:33,860
then they brought the code to satisfy

00:10:31,730 --> 00:10:37,040
the test and the see that has passed and

00:10:33,860 --> 00:10:40,959
that gives them a certain amount of

00:10:37,040 --> 00:10:44,660
certainty that that code is correct and

00:10:40,959 --> 00:10:46,670
test given development is uh is really

00:10:44,660 --> 00:10:49,040
interesting for for many reasons one in

00:10:46,670 --> 00:10:50,449
security I realized that sometimes

00:10:49,040 --> 00:10:52,160
developers don't care too much about

00:10:50,449 --> 00:10:53,899
security depending what they're doing

00:10:52,160 --> 00:10:56,509
and these are there always fights

00:10:53,899 --> 00:10:59,029
between operations and and development

00:10:56,509 --> 00:11:01,790
because developers maybe don't care as

00:10:59,029 --> 00:11:04,550
much as operations would like them to do

00:11:01,790 --> 00:11:08,300
about security tdd is grateful security

00:11:04,550 --> 00:11:10,730
because you can write tests with in mind

00:11:08,300 --> 00:11:12,920
like user input so if you have a

00:11:10,730 --> 00:11:15,649
function to validate signal you can

00:11:12,920 --> 00:11:18,470
write a test that checks for escape

00:11:15,649 --> 00:11:21,470
characters in your email so ddd is a

00:11:18,470 --> 00:11:23,509
great way to do testing and so when i

00:11:21,470 --> 00:11:26,540
start applying testing i also start to

00:11:23,509 --> 00:11:30,350
record the success rate on my test how

00:11:26,540 --> 00:11:33,819
was that in testing and i had this kind

00:11:30,350 --> 00:11:36,980
of thing coming up this is more the

00:11:33,819 --> 00:11:39,529
beginning of a project and this graph

00:11:36,980 --> 00:11:42,470
tells a story that you will now be able

00:11:39,529 --> 00:11:45,679
to see if you just looked at some

00:11:42,470 --> 00:11:47,540
numbers at any given time and what this

00:11:45,679 --> 00:11:50,149
graph is telling me it's telling me that

00:11:47,540 --> 00:11:51,800
i didn't do as much testing in the

00:11:50,149 --> 00:11:55,130
beginning where I was introducing unit

00:11:51,800 --> 00:11:57,110
testing and then I got to tag 0 1 where

00:11:55,130 --> 00:11:59,959
I wanted to kind of do it release and I

00:11:57,110 --> 00:12:02,000
actually matched and all my TAS past and

00:11:59,959 --> 00:12:03,620
done a divergent again I was adding

00:12:02,000 --> 00:12:05,689
tasks but some of them were failing i

00:12:03,620 --> 00:12:07,429
wasn't really carrying and then again

00:12:05,689 --> 00:12:08,480
another release and imagine again and

00:12:07,429 --> 00:12:09,970
now there is an interesting thing

00:12:08,480 --> 00:12:11,829
happening up there I'm

00:12:09,970 --> 00:12:15,550
anymore and I'm not the virgin anymore

00:12:11,829 --> 00:12:17,829
because I've introduced Edd and so I'm

00:12:15,550 --> 00:12:21,399
writing the task before writing my code

00:12:17,829 --> 00:12:23,769
and I'm not forgetting but when I when I

00:12:21,399 --> 00:12:25,750
you can set up an ingot github mercure

00:12:23,769 --> 00:12:28,300
whatever you use you can set up your

00:12:25,750 --> 00:12:30,639
hooks to run your tests your unit tests

00:12:28,300 --> 00:12:35,079
when you do a committee and reject the

00:12:30,639 --> 00:12:37,000
committee if the tests don't pass now as

00:12:35,079 --> 00:12:38,800
you get your tests and you think okay

00:12:37,000 --> 00:12:40,629
well i'm adding this test i'm doing well

00:12:38,800 --> 00:12:44,800
but then you have the question of how

00:12:40,629 --> 00:12:47,199
much does test cover of my of my code

00:12:44,800 --> 00:12:48,730
base because it's usually stick you're

00:12:47,199 --> 00:12:52,420
adding a lot of tasks for just one small

00:12:48,730 --> 00:12:54,610
portion of your code and then you can

00:12:52,420 --> 00:12:57,339
start you measured eases wall and graph

00:12:54,610 --> 00:12:59,800
it and you can get something like this

00:12:57,339 --> 00:13:02,949
and something like these at the first

00:12:59,800 --> 00:13:04,509
glance again it says something and you

00:13:02,949 --> 00:13:06,370
can see there you didn't have coverage

00:13:04,509 --> 00:13:08,709
you've gone up in the beginning that you

00:13:06,370 --> 00:13:10,689
kind of got up to the 80 and then you've

00:13:08,709 --> 00:13:12,459
got down from 80 so you've lost coverage

00:13:10,689 --> 00:13:14,559
problem because you had the code then

00:13:12,459 --> 00:13:15,970
you added some text but the stats

00:13:14,559 --> 00:13:17,410
weren't covering your code and then you

00:13:15,970 --> 00:13:19,870
go up to a top and you were you're

00:13:17,410 --> 00:13:21,009
reaching a hundred percent coverage and

00:13:19,870 --> 00:13:23,709
it's interesting that you reach a

00:13:21,009 --> 00:13:26,589
hundred percent coverage with tar go to

00:13:23,709 --> 00:13:28,360
but you've added almost nude has just a

00:13:26,589 --> 00:13:30,970
few tests so that is an interesting

00:13:28,360 --> 00:13:33,490
thing and we'll come back to it in a

00:13:30,970 --> 00:13:35,559
minute but now you start thinking well

00:13:33,490 --> 00:13:36,699
I've got this coverage of whatever got

00:13:35,559 --> 00:13:39,459
these tests are there any other

00:13:36,699 --> 00:13:43,959
interesting metrics how big is my code

00:13:39,459 --> 00:13:46,360
bags and you can save lines of code well

00:13:43,959 --> 00:13:49,000
lines of code is a really bad metric

00:13:46,360 --> 00:13:51,339
because how big is your actual Iraq code

00:13:49,000 --> 00:13:54,459
is not really what you're interesting to

00:13:51,339 --> 00:13:58,600
but it's a good starting point so you

00:13:54,459 --> 00:14:01,059
kind of go thanks but no thanks if you

00:13:58,600 --> 00:14:03,370
start to bra fit nonetheless it said

00:14:01,059 --> 00:14:05,199
something interesting again because as

00:14:03,370 --> 00:14:08,170
you can see you girl number of tests and

00:14:05,199 --> 00:14:11,079
you coverage and then your lines of code

00:14:08,170 --> 00:14:13,360
going out and now do you remember from

00:14:11,079 --> 00:14:16,209
the from the previous slide that I had

00:14:13,360 --> 00:14:18,089
achieved one hundred percent coverage on

00:14:16,209 --> 00:14:21,189
tab go to even though I didn't have

00:14:18,089 --> 00:14:22,290
manifests look what happened lines of

00:14:21,189 --> 00:14:28,600
code one down

00:14:22,290 --> 00:14:31,300
why went down because I refactored so in

00:14:28,600 --> 00:14:34,180
this graph having these metrics recorded

00:14:31,300 --> 00:14:37,480
and having them graft tells me something

00:14:34,180 --> 00:14:39,700
that I would not necessarily catch if I

00:14:37,480 --> 00:14:42,130
didn't have something like this so at

00:14:39,700 --> 00:14:43,630
this point I know and if you if you

00:14:42,130 --> 00:14:45,880
think about you know over the span of

00:14:43,630 --> 00:14:47,440
the year you could pinpoint every time

00:14:45,880 --> 00:14:51,850
you refactor every time you change

00:14:47,440 --> 00:14:53,350
something big in your code but obviously

00:14:51,850 --> 00:14:55,149
as you said language code is not a good

00:14:53,350 --> 00:14:58,149
metric what you're really interesting is

00:14:55,149 --> 00:14:59,740
complexity which is your enemy you don't

00:14:58,149 --> 00:15:01,779
want complex code because you're more

00:14:59,740 --> 00:15:03,790
likely to induce buds the same way that

00:15:01,779 --> 00:15:06,070
you don't want complex systems because

00:15:03,790 --> 00:15:08,320
they are more prone to failure but how

00:15:06,070 --> 00:15:10,680
do you imagine complexity and the things

00:15:08,320 --> 00:15:12,820
that I started thinking with is

00:15:10,680 --> 00:15:14,950
something that some ideas that I got

00:15:12,820 --> 00:15:17,770
from a from Spanish sustenance famine

00:15:14,950 --> 00:15:20,350
simple scoring so you begin to think you

00:15:17,770 --> 00:15:22,899
know how do I assess complexity what

00:15:20,350 --> 00:15:25,000
metrics can I use to address complexity

00:15:22,899 --> 00:15:27,610
and so one thing that you can start to

00:15:25,000 --> 00:15:29,110
do is call graphs call graphs you can

00:15:27,610 --> 00:15:31,180
use there are many many libraries that

00:15:29,110 --> 00:15:33,459
will scan your code and it will tell you

00:15:31,180 --> 00:15:35,380
a call graph so which function is

00:15:33,459 --> 00:15:38,110
calling which function and it would

00:15:35,380 --> 00:15:40,899
build a tree and so by there you can see

00:15:38,110 --> 00:15:43,420
the amount of nesting now if you have a

00:15:40,899 --> 00:15:46,450
lot of nesting where you get functions

00:15:43,420 --> 00:15:49,510
then maybe you get like a 45 have seen

00:15:46,450 --> 00:15:51,250
six ten layers of nesting that is really

00:15:49,510 --> 00:15:54,220
bad that counts that is a metric that

00:15:51,250 --> 00:15:57,160
you can use to score your code as a

00:15:54,220 --> 00:15:58,899
complex code number and size of

00:15:57,160 --> 00:16:02,170
functions there are people that will

00:15:58,899 --> 00:16:04,329
limit their will impose arbitrary limits

00:16:02,170 --> 00:16:07,120
on the language of your functions

00:16:04,329 --> 00:16:09,040
because they say long functions are hard

00:16:07,120 --> 00:16:11,980
to read and again it's easier to

00:16:09,040 --> 00:16:14,709
introduce bugs so you can use that as a

00:16:11,980 --> 00:16:17,649
metric to judge the complexity of your

00:16:14,709 --> 00:16:21,190
code the other thing is called closure

00:16:17,649 --> 00:16:23,170
now cuckoo is something i came across

00:16:21,190 --> 00:16:26,440
recently with my crow feathers he made a

00:16:23,170 --> 00:16:29,350
post on his blood and he was saying if

00:16:26,440 --> 00:16:32,350
you call this good code you tend to not

00:16:29,350 --> 00:16:35,459
change the same files many times you

00:16:32,350 --> 00:16:37,649
tend to add new files or odd

00:16:35,459 --> 00:16:39,720
says if you think in terms of our object

00:16:37,649 --> 00:16:42,149
oriented programming and so the idea

00:16:39,720 --> 00:16:44,399
that you extend your classes you do

00:16:42,149 --> 00:16:46,170
necessarily will attach classes that

00:16:44,399 --> 00:16:50,730
you've written before and so he graft

00:16:46,170 --> 00:16:52,679
he's his commits on github and you could

00:16:50,730 --> 00:16:54,480
see that a lot of the files will never

00:16:52,679 --> 00:16:56,519
touch the gandy we introducing new files

00:16:54,480 --> 00:16:59,279
or adam functions and then he had a

00:16:56,519 --> 00:17:02,579
couple of areas were he had like

00:16:59,279 --> 00:17:05,159
hundreds of changes and so he targeted

00:17:02,579 --> 00:17:08,309
those places for refactoring so it's

00:17:05,159 --> 00:17:11,909
again a metric that helps you write in

00:17:08,309 --> 00:17:13,500
better code which then in turn a works

00:17:11,909 --> 00:17:16,919
better in production and keeps your

00:17:13,500 --> 00:17:19,770
operation happier and again then you

00:17:16,919 --> 00:17:22,230
have complex to the build system if you

00:17:19,770 --> 00:17:24,299
have a building a complex application

00:17:22,230 --> 00:17:26,789
you generally end up with a complex

00:17:24,299 --> 00:17:28,799
build system so the complexity of build

00:17:26,789 --> 00:17:31,110
system is a good indicator and can be

00:17:28,799 --> 00:17:35,669
used for scoring to judge the complexity

00:17:31,110 --> 00:17:37,980
of your code and again here a graph of

00:17:35,669 --> 00:17:39,929
those things and you can see that

00:17:37,980 --> 00:17:42,899
complexion this line is reassuring

00:17:39,929 --> 00:17:46,110
because it tells me that despite several

00:17:42,899 --> 00:17:50,700
changes my code complexity has not gone

00:17:46,110 --> 00:17:53,309
out and also it's important to do it

00:17:50,700 --> 00:17:57,990
with style style can also be a source of

00:17:53,309 --> 00:17:59,490
metrics how good is your code so for

00:17:57,990 --> 00:18:02,399
example if you use stuff like Lincoln

00:17:59,490 --> 00:18:04,919
which is a it's a jacket that will run

00:18:02,399 --> 00:18:06,570
through your code and have a lot of I'll

00:18:04,919 --> 00:18:07,950
tell you a lot of things about your code

00:18:06,570 --> 00:18:11,730
if you're naming the way you're naming

00:18:07,950 --> 00:18:13,679
your variable makes sense if you the

00:18:11,730 --> 00:18:15,600
langevin lines all sorts of things that

00:18:13,679 --> 00:18:18,330
you can pick up and there are specific

00:18:15,600 --> 00:18:22,620
ones like pap eight I use a lot of

00:18:18,330 --> 00:18:24,720
Python so on using pate and then we're

00:18:22,620 --> 00:18:27,779
more beautiful code these are not the

00:18:24,720 --> 00:18:30,470
thing that I found really to be really

00:18:27,779 --> 00:18:33,529
important this works works both for

00:18:30,470 --> 00:18:36,029
operations and for development

00:18:33,529 --> 00:18:37,350
especially for operations this is really

00:18:36,029 --> 00:18:40,230
important this is the thing that I

00:18:37,350 --> 00:18:42,779
picked up in development developers tend

00:18:40,230 --> 00:18:45,649
to reward beautiful code they tend to

00:18:42,779 --> 00:18:48,720
reward good code so they put value on

00:18:45,649 --> 00:18:50,940
duty right operations

00:18:48,720 --> 00:18:54,630
doing if the operations does it right

00:18:50,940 --> 00:18:57,360
nobody notices culturally that is how

00:18:54,630 --> 00:18:59,789
it's expected and that is all is also

00:18:57,360 --> 00:19:02,850
harmful because nobody is supposed to

00:18:59,789 --> 00:19:05,820
notice that and nobody gives value to

00:19:02,850 --> 00:19:09,419
what operations as done directly and

00:19:05,820 --> 00:19:11,730
this creates conflict between operations

00:19:09,419 --> 00:19:14,220
and end development because operations

00:19:11,730 --> 00:19:16,409
gone well they get all the credit we

00:19:14,220 --> 00:19:22,620
don't get any credit and so you create

00:19:16,409 --> 00:19:26,580
these designer masseter now the thing we

00:19:22,620 --> 00:19:28,020
matrix is a people complain the biggest

00:19:26,580 --> 00:19:30,179
complaint that I've heard when I talked

00:19:28,020 --> 00:19:32,100
about metrics is there as soon as you

00:19:30,179 --> 00:19:34,740
introduce a metric people will start

00:19:32,100 --> 00:19:36,960
gaming it and all the companies that

00:19:34,740 --> 00:19:39,750
they try to to introduce metrics for

00:19:36,960 --> 00:19:41,419
example to judge developers how good

00:19:39,750 --> 00:19:44,490
they were doing how good this stuff was

00:19:41,419 --> 00:19:47,820
have more or less to a certain extent

00:19:44,490 --> 00:19:51,750
failed because developers would start

00:19:47,820 --> 00:19:54,559
gaming those metrics just to get a raise

00:19:51,750 --> 00:19:57,059
at the end of the year or something so

00:19:54,559 --> 00:19:58,559
there are problems with metric again

00:19:57,059 --> 00:20:00,809
there are no free lunches it's not just

00:19:58,559 --> 00:20:03,330
the cost of analyzing the cost of rising

00:20:00,809 --> 00:20:06,390
derrida visa a mindset there has to be

00:20:03,330 --> 00:20:08,340
changed in order to make good use of

00:20:06,390 --> 00:20:10,740
metrics but they are extremely powerful

00:20:08,340 --> 00:20:12,120
and then of course all the stuff that I

00:20:10,740 --> 00:20:14,539
was doing and I was doing it manually

00:20:12,120 --> 00:20:17,610
then you shouldn't be doing it manually

00:20:14,539 --> 00:20:20,250
really and so I started to use a CI and

00:20:17,610 --> 00:20:22,710
I stopped exporting data what I was

00:20:20,250 --> 00:20:24,299
doing commit or looking at Mike admits

00:20:22,710 --> 00:20:26,159
and scanning my code and I started to

00:20:24,299 --> 00:20:28,860
using ad soon then he's been renamed

00:20:26,159 --> 00:20:30,330
Jenkins buildbot is great as well but

00:20:28,860 --> 00:20:33,120
anything that is continuous integration

00:20:30,330 --> 00:20:34,740
it is really useful and continuous

00:20:33,120 --> 00:20:38,280
integration is also being picked up by

00:20:34,740 --> 00:20:39,510
by operations for for system scripts

00:20:38,280 --> 00:20:42,630
there are people they use continuous

00:20:39,510 --> 00:20:44,880
integration to run through the puppet or

00:20:42,630 --> 00:20:46,620
chef manifest again all these

00:20:44,880 --> 00:20:51,000
configuration management staff has

00:20:46,620 --> 00:20:52,919
changed a lot stuff in operations but in

00:20:51,000 --> 00:20:55,500
doing these I kind of forgot where I was

00:20:52,919 --> 00:20:57,210
coming from because I kind of got really

00:20:55,500 --> 00:20:58,190
excited about the metrics and about the

00:20:57,210 --> 00:21:01,340
development

00:20:58,190 --> 00:21:04,220
and where I came from his days and this

00:21:01,340 --> 00:21:07,940
is really bad and if you haven't been on

00:21:04,220 --> 00:21:09,710
coal you probably don't realize what it

00:21:07,940 --> 00:21:10,820
is to be on call when I wasn't on coal

00:21:09,710 --> 00:21:13,490
in my first year of system

00:21:10,820 --> 00:21:15,080
administration I didn't really know what

00:21:13,490 --> 00:21:18,909
I was talking about the first time that

00:21:15,080 --> 00:21:22,039
I went on call it really shook me and

00:21:18,909 --> 00:21:24,350
when I had these uh I had a specific

00:21:22,039 --> 00:21:25,789
ringtone on the phone that the company

00:21:24,350 --> 00:21:28,759
gave me and we couldn't change the

00:21:25,789 --> 00:21:30,289
ringtone after I left the company when I

00:21:28,759 --> 00:21:33,320
was in a public place and some would

00:21:30,289 --> 00:21:35,179
have the same ringtone I would twitch so

00:21:33,320 --> 00:21:37,100
you kind of have these things that you

00:21:35,179 --> 00:21:40,220
know it really gets into your life it's

00:21:37,100 --> 00:21:43,250
really difficult to to kind of it bein

00:21:40,220 --> 00:21:46,789
on call really sucks big time and so you

00:21:43,250 --> 00:21:49,039
want to avoid it and one thing that you

00:21:46,789 --> 00:21:53,029
can do to avoid it and one way one path

00:21:49,039 --> 00:21:56,690
that as work for me is to introduce

00:21:53,029 --> 00:21:59,690
metrics because how is greater than if

00:21:56,690 --> 00:22:01,639
and it is never too early to start

00:21:59,690 --> 00:22:05,269
monitoring your applications behavior

00:22:01,639 --> 00:22:07,610
and this is key this is where operations

00:22:05,269 --> 00:22:10,129
and development can start to collaborate

00:22:07,610 --> 00:22:11,870
much more operations can bring to

00:22:10,129 --> 00:22:13,970
development and this is happening to a

00:22:11,870 --> 00:22:16,639
certain extent in a new development

00:22:13,970 --> 00:22:18,769
environments put motor in this

00:22:16,639 --> 00:22:21,409
development environments add my own

00:22:18,769 --> 00:22:23,629
track cpu usage memory usage and out

00:22:21,409 --> 00:22:26,360
those metrics and those metrics can help

00:22:23,629 --> 00:22:27,860
developers because again we do TDD to

00:22:26,360 --> 00:22:29,990
catch for example tunity is good for a

00:22:27,860 --> 00:22:32,840
factoring because you know that if you

00:22:29,990 --> 00:22:36,080
have your tests and you refactor and you

00:22:32,840 --> 00:22:38,360
break something you will know now how

00:22:36,080 --> 00:22:40,309
about using metrics for cpu usage your

00:22:38,360 --> 00:22:42,590
memory usage to figure out the one

00:22:40,309 --> 00:22:45,789
you're a factor you actually introduced

00:22:42,590 --> 00:22:48,019
a loop in your code or a memory leak

00:22:45,789 --> 00:22:49,429
wouldn't that be useful wouldn't it be

00:22:48,019 --> 00:22:51,529
useful to figure out that you've

00:22:49,429 --> 00:22:54,139
introduced a memory leak before it hits

00:22:51,529 --> 00:22:55,879
production before you finish the sprint

00:22:54,139 --> 00:22:58,399
if you're doing agile or whatever you're

00:22:55,879 --> 00:23:00,200
doing and you get two months later a

00:22:58,399 --> 00:23:01,370
month later to run maybe you're still

00:23:00,200 --> 00:23:03,019
testing and you're still doing load

00:23:01,370 --> 00:23:05,269
testing and you figure it out before

00:23:03,019 --> 00:23:07,009
production but it happens later and you

00:23:05,269 --> 00:23:09,200
have to go back and kind of figure it

00:23:07,009 --> 00:23:09,830
out how you went wrong where it went

00:23:09,200 --> 00:23:12,529
wrong

00:23:09,830 --> 00:23:15,559
monitoring and having metrics from day

00:23:12,529 --> 00:23:17,659
one can be really really helpful and it

00:23:15,559 --> 00:23:19,850
has helped me directly in in some of the

00:23:17,659 --> 00:23:23,360
code that I've written because I'm so

00:23:19,850 --> 00:23:26,299
not a great developer and I made a lot

00:23:23,360 --> 00:23:28,429
of mistakes and testing has saved my

00:23:26,299 --> 00:23:31,880
life in many cases and having metrics

00:23:28,429 --> 00:23:33,890
that saved me in many many cases another

00:23:31,880 --> 00:23:36,140
thing that can be done it's the right

00:23:33,890 --> 00:23:37,610
code that it might err in friendly this

00:23:36,140 --> 00:23:40,070
is another thing that developers can

00:23:37,610 --> 00:23:42,169
help can kind of come together a point

00:23:40,070 --> 00:23:45,080
of contact between development and

00:23:42,169 --> 00:23:49,190
operations in the in sort of divorce

00:23:45,080 --> 00:23:51,320
kind of a couch would change and here

00:23:49,190 --> 00:23:55,190
guys this is more flask happened as you

00:23:51,320 --> 00:23:58,850
can see I've got our / mon / status /

00:23:55,190 --> 00:24:00,679
mon / sell fast and a / mon / metrics so

00:23:58,850 --> 00:24:03,889
if you have stuff like that I can point

00:24:00,679 --> 00:24:06,169
my nagios my monitoring system to those

00:24:03,889 --> 00:24:08,360
kind of things and I can get very easily

00:24:06,169 --> 00:24:11,419
very simply a status of an application

00:24:08,360 --> 00:24:14,000
or the performances for example if it's

00:24:11,419 --> 00:24:17,840
a web app you can store the last a

00:24:14,000 --> 00:24:21,409
handwritten code in a memcache and this

00:24:17,840 --> 00:24:23,570
is happening a good deal in in system

00:24:21,409 --> 00:24:25,820
tools like if you think of memcache for

00:24:23,570 --> 00:24:27,260
example man cash as you can tell it to

00:24:25,820 --> 00:24:29,929
the port and you can run a staff as

00:24:27,260 --> 00:24:32,240
command and you get out a list of all of

00:24:29,929 --> 00:24:35,330
the current status of memcache which is

00:24:32,240 --> 00:24:40,460
really useful to judge how your caches

00:24:35,330 --> 00:24:44,440
are doing the bottom line is that Ops is

00:24:40,460 --> 00:24:47,059
changing operations it's changing

00:24:44,440 --> 00:24:49,610
configuration management has made a huge

00:24:47,059 --> 00:24:52,100
difference in how Russians has been

00:24:49,610 --> 00:24:54,860
moving in the last couple of years three

00:24:52,100 --> 00:24:57,889
years and we're closing in to something

00:24:54,860 --> 00:24:59,750
that looks much more what developers are

00:24:57,889 --> 00:25:02,360
used to and this is really important

00:24:59,750 --> 00:25:04,010
because again in these conflict between

00:25:02,360 --> 00:25:06,799
operations and development in many

00:25:04,010 --> 00:25:08,899
organizations have one of the big

00:25:06,799 --> 00:25:10,970
problems is the language that both

00:25:08,899 --> 00:25:13,880
parties are speaking and the fact that

00:25:10,970 --> 00:25:16,539
both parties can speak cold is greatly

00:25:13,880 --> 00:25:18,799
helping to reduce that divide

00:25:16,539 --> 00:25:20,450
configuration management also has given

00:25:18,799 --> 00:25:23,360
birth in this infrastructure as code

00:25:20,450 --> 00:25:26,270
sort of thing which basically means that

00:25:23,360 --> 00:25:29,690
since now my how my systems are set up

00:25:26,270 --> 00:25:31,730
is close to writing a piece of code now

00:25:29,690 --> 00:25:34,280
my infrastructure really can be

00:25:31,730 --> 00:25:36,740
represented with code which can help in

00:25:34,280 --> 00:25:38,929
in this process and then you have

00:25:36,740 --> 00:25:41,390
behavior driven development which is

00:25:38,929 --> 00:25:43,700
something fairly new but it's something

00:25:41,390 --> 00:25:45,290
that developers love there are a lot of

00:25:43,700 --> 00:25:46,970
developers that really like to do

00:25:45,290 --> 00:25:48,890
behavior driven development and then

00:25:46,970 --> 00:25:51,500
using the Kumbha a rubber framework

00:25:48,890 --> 00:25:54,920
those are applications that will allow

00:25:51,500 --> 00:25:56,299
you to write in in native languages like

00:25:54,920 --> 00:25:58,640
in plain English or whatever is a

00:25:56,299 --> 00:26:00,410
language in natural language you write

00:25:58,640 --> 00:26:03,940
your tests and you say something like

00:26:00,410 --> 00:26:07,340
when i connect to such-and-such page I

00:26:03,940 --> 00:26:11,480
expect such and such output and those

00:26:07,340 --> 00:26:13,250
when and expect a key words their tools

00:26:11,480 --> 00:26:15,470
like a camber rubber framework or

00:26:13,250 --> 00:26:18,620
lactose city do Python will know how to

00:26:15,470 --> 00:26:20,840
interpret and convert it into a test so

00:26:18,620 --> 00:26:22,730
now you have something that developers

00:26:20,840 --> 00:26:25,549
are really happy with they love to do

00:26:22,730 --> 00:26:27,950
BDD and now operations can use it there

00:26:25,549 --> 00:26:31,940
is a plug-in called Nagas koo kumba that

00:26:27,950 --> 00:26:33,770
allows you to run tests really natural

00:26:31,940 --> 00:26:35,780
language win nag use to monitor your

00:26:33,770 --> 00:26:38,390
application so now there is no longer

00:26:35,780 --> 00:26:40,400
this kind of a developers write their

00:26:38,390 --> 00:26:42,650
own tests and then they pass into

00:26:40,400 --> 00:26:44,570
operation which have to rewrite the test

00:26:42,650 --> 00:26:46,160
into something else to fit whatever

00:26:44,570 --> 00:26:48,410
monitored infrastructure they're using

00:26:46,160 --> 00:26:51,950
the two groups can use the same language

00:26:48,410 --> 00:26:53,299
and the same tools and then continuous

00:26:51,950 --> 00:26:56,600
integration as I was saying it's already

00:26:53,299 --> 00:27:00,710
happening notes and having these things

00:26:56,600 --> 00:27:04,520
in common can greatly help with dialogue

00:27:00,710 --> 00:27:07,760
and so you can help but how how do you

00:27:04,520 --> 00:27:10,520
help if you are not realize and accept

00:27:07,760 --> 00:27:12,740
that you code don't think that because

00:27:10,520 --> 00:27:15,980
you are in operations the fact that your

00:27:12,740 --> 00:27:18,370
reparations justifies no testing not

00:27:15,980 --> 00:27:21,950
using unit testing using the serve

00:27:18,370 --> 00:27:24,559
pardons that developers are using learn

00:27:21,950 --> 00:27:26,690
from your developers understand how they

00:27:24,559 --> 00:27:29,390
do it why they do it what they do and

00:27:26,690 --> 00:27:32,179
adopt those kind of techniques is lots

00:27:29,390 --> 00:27:33,830
of good stuff and advertise your

00:27:32,179 --> 00:27:34,600
achievements I'm itouch from these

00:27:33,830 --> 00:27:38,650
earlier

00:27:34,600 --> 00:27:40,900
developers are generally identifies as

00:27:38,650 --> 00:27:43,030
the ones that produce the features

00:27:40,900 --> 00:27:45,400
produced with what is sold to customers

00:27:43,030 --> 00:27:47,740
so that is what is visible operations

00:27:45,400 --> 00:27:49,840
are never visible and so start with the

00:27:47,740 --> 00:27:54,669
ties your achievements start to talk

00:27:49,840 --> 00:27:57,220
about it and engage your developers in

00:27:54,669 --> 00:27:59,080
my experience when I start to to

00:27:57,220 --> 00:28:03,429
actually go to develop it and ask well

00:27:59,080 --> 00:28:05,710
how could I test my my my script they

00:28:03,429 --> 00:28:07,900
were more than happy to talk to me so

00:28:05,710 --> 00:28:10,600
really it's not that they don't care

00:28:07,900 --> 00:28:12,970
it's just that they're speaking a

00:28:10,600 --> 00:28:15,669
different language and there is a hard

00:28:12,970 --> 00:28:17,590
though in in getting over that that

00:28:15,669 --> 00:28:20,049
divergence so if you ask for things that

00:28:17,590 --> 00:28:23,799
they recognize is familiar there will be

00:28:20,049 --> 00:28:27,970
more than happy to help you if you are a

00:28:23,799 --> 00:28:29,980
developer tree ops as developer

00:28:27,970 --> 00:28:33,940
understand that they're writing code and

00:28:29,980 --> 00:28:35,799
recognize that share the knowledge how

00:28:33,940 --> 00:28:37,630
you doing again do the opposite what ops

00:28:35,799 --> 00:28:39,970
are supposed to do in terms of getting

00:28:37,630 --> 00:28:41,860
in contact code applications they're

00:28:39,970 --> 00:28:45,580
easier to monitor like we went through

00:28:41,860 --> 00:28:47,740
and learn from operations like type

00:28:45,580 --> 00:28:49,570
tapping today did knowledge about

00:28:47,740 --> 00:28:52,990
metrics and monitoring because you can

00:28:49,570 --> 00:28:54,490
be really useful and the most important

00:28:52,990 --> 00:28:56,919
metric this is something that I stole

00:28:54,490 --> 00:28:59,770
from from Patrick's talks path of the

00:28:56,919 --> 00:29:01,630
blog i gave talk about DevOps in in

00:28:59,770 --> 00:29:05,220
London last week it was a great talk and

00:29:01,630 --> 00:29:10,419
it was all about cultural no tools and

00:29:05,220 --> 00:29:13,419
his talk was about trust and Trust is

00:29:10,419 --> 00:29:15,250
the most important metric Trust is the

00:29:13,419 --> 00:29:17,289
most important method because if you're

00:29:15,250 --> 00:29:20,740
trying to get these two groups together

00:29:17,289 --> 00:29:22,539
to talk to each other the reason there

00:29:20,740 --> 00:29:25,000
is a game to be made there because if

00:29:22,539 --> 00:29:26,530
you if you have like 10 people and each

00:29:25,000 --> 00:29:28,900
one of those people can in theory

00:29:26,530 --> 00:29:31,780
produce ten of whatever you need a work

00:29:28,900 --> 00:29:34,570
and then one of those people doesn't

00:29:31,780 --> 00:29:37,390
trust one of the developer doesn't trust

00:29:34,570 --> 00:29:41,080
one of the ops people then they will

00:29:37,390 --> 00:29:43,809
hold the work waiting for the ops of the

00:29:41,080 --> 00:29:45,460
group that they would like or maybe they

00:29:43,809 --> 00:29:45,880
will install their applications on the

00:29:45,460 --> 00:29:47,890
road

00:29:45,880 --> 00:29:50,710
they become a bottleneck so your

00:29:47,890 --> 00:29:55,300
production goes down because you're not

00:29:50,710 --> 00:29:57,210
trusting each other and to close so

00:29:55,300 --> 00:30:03,210
don't let uncertainty drive you insane

00:29:57,210 --> 00:30:03,210
go mad thanks everybody

00:30:11,360 --> 00:30:14,360
questions

00:30:18,770 --> 00:30:32,860
no thank you no one well no mango

00:30:26,710 --> 00:30:34,960
whether ok so there's a little part of

00:30:32,860 --> 00:30:40,000
your present a dish and I didn't catch

00:30:34,960 --> 00:30:43,390
because what is TDD what what is the

00:30:40,000 --> 00:30:46,179
theme ddd Oh tilling soil test driven

00:30:43,390 --> 00:30:49,270
development is the fact that you develop

00:30:46,179 --> 00:30:51,730
your tests before you develop your code

00:30:49,270 --> 00:30:54,940
so right then then writing your code and

00:30:51,730 --> 00:30:56,710
then you go on and says well what really

00:30:54,940 --> 00:30:59,440
should this code look like how it should

00:30:56,710 --> 00:31:01,390
behave and then writing a test you write

00:30:59,440 --> 00:31:04,870
your tests first and then you write the

00:31:01,390 --> 00:31:06,549
code to make that test pass that is much

00:31:04,870 --> 00:31:08,890
more likely to guarantee that you will

00:31:06,549 --> 00:31:11,950
have all your testing place to all your

00:31:08,890 --> 00:31:19,000
tests will cover all your code does that

00:31:11,950 --> 00:31:22,720
make sense hi could you speak to the

00:31:19,000 --> 00:31:25,270
automation of tests in a deployment and

00:31:22,720 --> 00:31:29,470
a scenario so the automation intestine

00:31:25,270 --> 00:31:30,970
deployment sure with the thing that most

00:31:29,470 --> 00:31:34,799
people have seen doing and I've done

00:31:30,970 --> 00:31:38,230
myself is done with virtual machines so

00:31:34,799 --> 00:31:41,340
what you end up doing is generally try

00:31:38,230 --> 00:31:44,529
to spin up and create virtual machines

00:31:41,340 --> 00:31:47,409
environments from scratch which is

00:31:44,529 --> 00:31:49,510
what's our QA is used to and then you

00:31:47,409 --> 00:31:51,970
deploy coach Watson can do can deploy

00:31:49,510 --> 00:31:54,880
your code to 20 machine that you want to

00:31:51,970 --> 00:31:58,090
soak with bill box so the idea is that

00:31:54,880 --> 00:31:59,559
you use something like even asking for

00:31:58,090 --> 00:32:01,929
example can spin up an instance if you

00:31:59,559 --> 00:32:04,390
want so you can tell it to create an

00:32:01,929 --> 00:32:06,669
instance week saying KDM or in the cloud

00:32:04,390 --> 00:32:09,820
if you want deploy your code to it and

00:32:06,669 --> 00:32:12,130
then run script and that's Kripke run

00:32:09,820 --> 00:32:17,169
all your tests and give you all things

00:32:12,130 --> 00:32:18,850
if you're doing other things like we

00:32:17,169 --> 00:32:21,820
continue sir we continuous integration

00:32:18,850 --> 00:32:23,890
you could run metrics on the same box

00:32:21,820 --> 00:32:25,240
there arts on or whatever is the

00:32:23,890 --> 00:32:28,270
continuous integration er you use runs

00:32:25,240 --> 00:32:30,880
on that is perfectly fine it is not that

00:32:28,270 --> 00:32:33,279
good to do integration testing it works

00:32:30,880 --> 00:32:35,799
well like to get metrics from unit tests

00:32:33,279 --> 00:32:37,450
know so well for integration testing

00:32:35,799 --> 00:32:39,570
from integration testing really you

00:32:37,450 --> 00:32:41,040
would want either develop

00:32:39,570 --> 00:32:43,380
environments their own demand or

00:32:41,040 --> 00:32:45,390
environments that you can at least clean

00:32:43,380 --> 00:32:49,500
out between runs because you don't want

00:32:45,390 --> 00:32:51,860
to reuse the same environment twice does

00:32:49,500 --> 00:32:51,860
that clear

00:32:55,980 --> 00:32:58,980
good

00:33:00,800 --> 00:33:04,090
yeah I think we're good

00:33:05,929 --> 00:33:09,369
prob power

00:33:27,920 --> 00:33:32,540
hello my question might sound a bit

00:33:30,620 --> 00:33:34,580
cynical but do you think it's really

00:33:32,540 --> 00:33:37,040
possible for developers and operations

00:33:34,580 --> 00:33:38,840
to trust each other you have you spoke

00:33:37,040 --> 00:33:40,550
to some developers when we were in

00:33:38,840 --> 00:33:42,920
operations and they were really

00:33:40,550 --> 00:33:44,360
interested in helping you are making

00:33:42,920 --> 00:33:47,600
their applications more testable and

00:33:44,360 --> 00:33:50,180
everything but my experience is exactly

00:33:47,600 --> 00:33:52,520
the opposite I want the new operations

00:33:50,180 --> 00:33:55,040
and most developers don't want to talk

00:33:52,520 --> 00:33:56,720
to operations want to just coat and do

00:33:55,040 --> 00:33:58,700
nothing else and they have their own

00:33:56,720 --> 00:34:00,440
idea how it should work which is really

00:33:58,700 --> 00:34:03,620
getting really hard to get to them and

00:34:00,440 --> 00:34:07,400
to explain them how the real wife works

00:34:03,620 --> 00:34:10,400
well so the thing is that i'm not i'm

00:34:07,400 --> 00:34:12,650
not saying that developers should behave

00:34:10,400 --> 00:34:14,720
and take on responsibility of operation

00:34:12,650 --> 00:34:16,820
I totally appreciate that as a developer

00:34:14,720 --> 00:34:18,980
I don't want to know in fact when I star

00:34:16,820 --> 00:34:21,050
coding I'm bothered by the fact that I

00:34:18,980 --> 00:34:22,400
have to install something or take care

00:34:21,050 --> 00:34:24,200
of something because he breaks I

00:34:22,400 --> 00:34:27,890
wouldn't want to do that so I appreciate

00:34:24,200 --> 00:34:32,080
that balance what I'm saying is that in

00:34:27,890 --> 00:34:34,120
terms of how you handle certain problems

00:34:32,080 --> 00:34:35,870
that kind of thing can happen

00:34:34,120 --> 00:34:38,210
transparently so think for example

00:34:35,870 --> 00:34:41,810
continuous integration it's a good it's

00:34:38,210 --> 00:34:46,130
a good thing we're both operations and

00:34:41,810 --> 00:34:49,490
development contribute to that system

00:34:46,130 --> 00:34:51,290
and then without having like so say as

00:34:49,490 --> 00:34:53,810
an operation I contribute to the fact

00:34:51,290 --> 00:34:56,810
that when your continuous integration

00:34:53,810 --> 00:34:59,750
spins up an instance on zan and

00:34:56,810 --> 00:35:01,250
katie-ann it installs monitoring and

00:34:59,750 --> 00:35:02,870
installs monitoring the monitors

00:35:01,250 --> 00:35:06,920
everything that's happening on that box

00:35:02,870 --> 00:35:10,040
as a developer then i deploy my

00:35:06,920 --> 00:35:12,140
application on on that box where I have

00:35:10,040 --> 00:35:14,780
my plication end up on the box and I

00:35:12,140 --> 00:35:18,020
don't have to know that those metrics

00:35:14,780 --> 00:35:21,320
have been collected and how all i care

00:35:18,020 --> 00:35:23,390
is there I get that feedback so I don't

00:35:21,320 --> 00:35:25,280
require the developer to be involved

00:35:23,390 --> 00:35:27,800
we're creating that environment I'm

00:35:25,280 --> 00:35:31,670
saying that developer has

00:35:27,800 --> 00:35:33,560
advantage if it take those metrics he

00:35:31,670 --> 00:35:37,790
looks at these metrics and takes what

00:35:33,560 --> 00:35:39,770
operation can give him so there is a

00:35:37,790 --> 00:35:44,290
collaboration that is possible without

00:35:39,770 --> 00:35:48,680
requiring either party to actually learn

00:35:44,290 --> 00:35:51,980
the in the details of how the other the

00:35:48,680 --> 00:35:54,830
other side is working you shouldn't need

00:35:51,980 --> 00:35:56,960
to know the details of how to setup

00:35:54,830 --> 00:35:59,840
nagios that is irrelevant but if you

00:35:56,960 --> 00:36:02,000
think like for example in we behavioral

00:35:59,840 --> 00:36:04,130
driven development and writing a test in

00:36:02,000 --> 00:36:05,990
natural natural language there is a good

00:36:04,130 --> 00:36:08,900
example the developer doesn't have to

00:36:05,990 --> 00:36:12,080
learn anything about how Nagas work he

00:36:08,900 --> 00:36:15,080
writes his test with Cacambo with Robert

00:36:12,080 --> 00:36:18,110
framework and then he passes the test to

00:36:15,080 --> 00:36:20,690
operation so their operations and

00:36:18,110 --> 00:36:22,940
development they give to each other they

00:36:20,690 --> 00:36:25,970
gain from each other without actually

00:36:22,940 --> 00:36:29,470
having to learn anything in terms of the

00:36:25,970 --> 00:36:32,780
underlying details does that make sense

00:36:29,470 --> 00:36:37,400
no go ahead why doesn't what doesn't it

00:36:32,780 --> 00:36:39,050
make sense because in the end from what

00:36:37,400 --> 00:36:41,720
I've seen developers live in a different

00:36:39,050 --> 00:36:44,060
world can you speak a bit louder please

00:36:41,720 --> 00:36:46,930
sorry so from what I've seen developers

00:36:44,060 --> 00:36:51,890
live in a different world and they are

00:36:46,930 --> 00:36:54,670
sure that is that good no right okay so

00:36:51,890 --> 00:36:58,220
if we agree that is not good what is the

00:36:54,670 --> 00:37:02,900
simplest thing that you can do to try

00:36:58,220 --> 00:37:04,430
and fix that and in my from my

00:37:02,900 --> 00:37:06,650
experience the simplest thing that you

00:37:04,430 --> 00:37:09,980
can do it's kind of to congregate around

00:37:06,650 --> 00:37:12,500
testing and congregate around common

00:37:09,980 --> 00:37:14,870
tools because the fact that you're using

00:37:12,500 --> 00:37:17,900
completely different terminology and

00:37:14,870 --> 00:37:19,430
things a contributing factor as a

00:37:17,900 --> 00:37:21,880
developer I don't want to know about all

00:37:19,430 --> 00:37:21,880
that stuff

00:37:22,900 --> 00:37:28,960
so your idea is just that the two worlds

00:37:26,619 --> 00:37:31,630
of developers and lobster can come

00:37:28,960 --> 00:37:33,940
around exactly around testing can use

00:37:31,630 --> 00:37:38,049
that as a intermediate language yeah you

00:37:33,940 --> 00:37:40,990
use use use testing as an excuse as a

00:37:38,049 --> 00:37:45,549
common language to talk about what has

00:37:40,990 --> 00:37:55,559
to eventually happen in production to

00:37:45,549 --> 00:37:55,559
better now go I think there's one there

00:38:06,960 --> 00:38:14,070
I just a practical question when you

00:38:11,010 --> 00:38:16,320
talk about the scripts that you're right

00:38:14,070 --> 00:38:20,460
and the testing that you apply over them

00:38:16,320 --> 00:38:23,450
and all that what's the which are the

00:38:20,460 --> 00:38:26,900
languages that you use which are the

00:38:23,450 --> 00:38:30,060
tools that you used to unit test those

00:38:26,900 --> 00:38:32,930
scripts of those well pieces of code or

00:38:30,060 --> 00:38:35,190
whatever you want to call them that

00:38:32,930 --> 00:38:36,810
sorry I I catch I didn't catch the

00:38:35,190 --> 00:38:39,090
beginning of your question when I spoke

00:38:36,810 --> 00:38:41,940
about what when you when you talk about

00:38:39,090 --> 00:38:44,310
the code that you write the call graph

00:38:41,940 --> 00:38:47,460
yeah the code that you write so in which

00:38:44,310 --> 00:38:52,170
language do you write that code what

00:38:47,460 --> 00:38:54,450
which kind of things does that code do

00:38:52,170 --> 00:38:57,290
and what what problems that does it

00:38:54,450 --> 00:39:01,290
address and how you test it so which

00:38:57,290 --> 00:39:04,860
which framework or whatever you use to

00:39:01,290 --> 00:39:07,800
unit test that and to even to record

00:39:04,860 --> 00:39:12,090
those those unit tests the results sure

00:39:07,800 --> 00:39:14,730
so I develop Muslim Python so the tools

00:39:12,090 --> 00:39:16,350
and things that I use a pretty much all

00:39:14,730 --> 00:39:18,900
around Python and a bit of ribbon these

00:39:16,350 --> 00:39:21,500
days but still so for the call graph and

00:39:18,900 --> 00:39:24,270
that kind of thing I use Pike or graph

00:39:21,500 --> 00:39:27,540
which works really well and outputs in

00:39:24,270 --> 00:39:30,420
in dot format so you can even graph it

00:39:27,540 --> 00:39:33,930
with graphics and that works that works

00:39:30,420 --> 00:39:37,590
really well I mentioned p p8 to do the

00:39:33,930 --> 00:39:40,650
end Linkin to do the style checker on my

00:39:37,590 --> 00:39:43,920
code and I used to use buildbot for the

00:39:40,650 --> 00:39:47,250
continuous integration I ran in problems

00:39:43,920 --> 00:39:49,320
configuring buildbot and at that time I

00:39:47,250 --> 00:39:51,870
couldn't really be bothered with

00:39:49,320 --> 00:39:53,970
figuring them out and so I tried outs

00:39:51,870 --> 00:39:56,670
and the nuts and seems to do all it a

00:39:53,970 --> 00:39:59,840
night in an easy way so as which that

00:39:56,670 --> 00:40:06,000
and the other thing that I use I I use a

00:39:59,840 --> 00:40:08,790
kvm on my box too despite only verte to

00:40:06,000 --> 00:40:12,000
drive libvirt is an abstraction on topic

00:40:08,790 --> 00:40:16,799
ATM but on top of every possible known

00:40:12,000 --> 00:40:19,720
visualization system except for everyone

00:40:16,799 --> 00:40:22,359
so you can from Python you can drive for

00:40:19,720 --> 00:40:25,210
example creating a new virtual machine

00:40:22,359 --> 00:40:27,579
and then deploying getting Adson to

00:40:25,210 --> 00:40:30,339
deploy code to it and then run all your

00:40:27,579 --> 00:40:32,170
checks in there for EM the behavioral

00:40:30,339 --> 00:40:37,539
driven development i use lactose which

00:40:32,170 --> 00:40:39,640
is as a Python clone of camber rubber

00:40:37,539 --> 00:40:43,180
framework is also very interesting and

00:40:39,640 --> 00:40:46,329
it's probably more known than lettuce on

00:40:43,180 --> 00:40:49,329
server the big level it can it is more

00:40:46,329 --> 00:40:51,220
powerful before for simplest stuff i

00:40:49,329 --> 00:40:53,200
would say lattice is much more

00:40:51,220 --> 00:40:57,250
approachable so i would recommend that

00:40:53,200 --> 00:41:01,000
at least to start with what else is

00:40:57,250 --> 00:41:03,549
there to store metrics I've done a few

00:41:01,000 --> 00:41:05,530
of use a few different things I try to

00:41:03,549 --> 00:41:07,839
use SQLite because I didn't need

00:41:05,530 --> 00:41:10,299
anything big and it was mostly just me

00:41:07,839 --> 00:41:14,200
so I use SQLite to store all the metrics

00:41:10,299 --> 00:41:16,960
in in the beginning and then for other

00:41:14,200 --> 00:41:20,920
metrics and system metrics I used to use

00:41:16,960 --> 00:41:23,140
a rd tool and then I moved a lot of

00:41:20,920 --> 00:41:26,140
stuff to graph I just because it's

00:41:23,140 --> 00:41:28,559
simply the problem with them we grow

00:41:26,140 --> 00:41:31,329
with our DD tool is that it expects

00:41:28,559 --> 00:41:33,700
things to be in this in the exact time

00:41:31,329 --> 00:41:36,220
series and if you miss the cern at

00:41:33,700 --> 00:41:39,099
certain times lots it will give troubles

00:41:36,220 --> 00:41:41,049
graphite is more tolerant in sin

00:41:39,099 --> 00:41:43,720
sporadic events which is what kind of

00:41:41,049 --> 00:41:45,609
you end up doing when when you just

00:41:43,720 --> 00:41:50,859
sends metrics when you do commits and

00:41:45,609 --> 00:41:52,240
similar things i think that's that's

00:41:50,859 --> 00:41:54,819
about it that's pretty much all the

00:41:52,240 --> 00:41:57,160
tools that I music oh and for unit

00:41:54,819 --> 00:42:00,910
testing I use the built-in unit test

00:41:57,160 --> 00:42:02,619
framework so yeah the unit tests that

00:42:00,910 --> 00:42:05,829
that comes with our with the standard

00:42:02,619 --> 00:42:07,960
late pi test is a school as well they

00:42:05,829 --> 00:42:09,670
have a bunch of our a bunch of

00:42:07,960 --> 00:42:12,420
advantages the other thing you might

00:42:09,670 --> 00:42:16,779
want to look at its talks to your ex

00:42:12,420 --> 00:42:18,670
which allows you to to set up different

00:42:16,779 --> 00:42:20,950
environments with even different

00:42:18,670 --> 00:42:24,190
versions of Python so you can run like

00:42:20,950 --> 00:42:26,289
in currently you can test on 2.4 2.5 2.6

00:42:24,190 --> 00:42:28,930
in between seven and three all of them

00:42:26,289 --> 00:42:29,530
and test all your code and that is also

00:42:28,930 --> 00:42:31,750
interesting

00:42:29,530 --> 00:42:33,100
because you can collect metrics it's in

00:42:31,750 --> 00:42:35,050
our case where metrics can be very

00:42:33,100 --> 00:42:37,390
useful you can collect methods and see

00:42:35,050 --> 00:42:39,490
how your code performs on different

00:42:37,390 --> 00:42:41,620
versions of Python so there can be

00:42:39,490 --> 00:42:44,770
interesting because you might say well I

00:42:41,620 --> 00:42:50,010
focus on my development 3.6 because they

00:42:44,770 --> 00:42:50,010
get bad performances yeah that's all

00:42:51,779 --> 00:42:57,779
and I think we're done done yes

00:42:58,220 --> 00:43:02,410
there's still

00:43:00,339 --> 00:43:05,410
you still something that's

00:43:02,410 --> 00:43:05,410
questions

00:43:08,049 --> 00:43:12,799
No

00:43:10,480 --> 00:43:15,920
are there still some more questions

00:43:12,799 --> 00:43:19,150
otherwise i would say thanks for one

00:43:15,920 --> 00:43:19,150
penis it's one block

00:43:24,710 --> 00:43:32,750
hi I have to do implement application

00:43:29,930 --> 00:43:35,720
monitoring quite heavy corporate

00:43:32,750 --> 00:43:37,910
environment and I'm facing the the

00:43:35,720 --> 00:43:41,990
position of I would say or the

00:43:37,910 --> 00:43:45,920
reluctance of the operations people to

00:43:41,990 --> 00:43:48,770
send so much event so much data into

00:43:45,920 --> 00:43:53,210
their system ah do you have any comment

00:43:48,770 --> 00:43:55,849
on that so obviously if you have a lot

00:43:53,210 --> 00:43:58,910
of data is problematic it can be it can

00:43:55,849 --> 00:44:01,609
be a pain all this stuff I've been doing

00:43:58,910 --> 00:44:03,619
it mostly for myself so I had a small

00:44:01,609 --> 00:44:07,790
necessity I've used to deal in the back

00:44:03,619 --> 00:44:10,550
a couple jobs ago with a with a lot of

00:44:07,790 --> 00:44:14,180
data and we had like huge mysql clusters

00:44:10,550 --> 00:44:16,640
or HDFS also used that it works pretty

00:44:14,180 --> 00:44:24,290
well the reason there is a project

00:44:16,640 --> 00:44:30,650
called open open HD ms which has been

00:44:24,290 --> 00:44:33,589
launched by a team what is called not

00:44:30,650 --> 00:44:35,660
tweeted people do not dig one of these

00:44:33,589 --> 00:44:39,500
big company not forget a name which is

00:44:35,660 --> 00:44:41,000
basically rd so you had you get kind of

00:44:39,500 --> 00:44:44,750
d the sort of thing the round robin

00:44:41,000 --> 00:44:46,910
databases do and an RDD tool does in

00:44:44,750 --> 00:44:48,440
terms of you know giving you graphs and

00:44:46,910 --> 00:44:50,900
all of that store in math works button

00:44:48,440 --> 00:44:53,390
HDFS so that's quite interesting it

00:44:50,900 --> 00:44:55,580
gives you back end as a file storage of

00:44:53,390 --> 00:44:58,869
scales really well and at the same time

00:44:55,580 --> 00:45:02,180
you get you still have an interface that

00:44:58,869 --> 00:45:04,550
it's that you would manage like you were

00:45:02,180 --> 00:45:06,859
not kind of normally interface the rd

00:45:04,550 --> 00:45:09,560
the other interesting things that you

00:45:06,859 --> 00:45:13,130
can do if you want to use a server our

00:45:09,560 --> 00:45:18,950
dbase tools now already supports a hardy

00:45:13,130 --> 00:45:22,369
cash dee dee cash the caches you read

00:45:18,950 --> 00:45:25,520
them right and you can chain them so you

00:45:22,369 --> 00:45:27,290
can have different boxes the store

00:45:25,520 --> 00:45:29,839
different slices you sort of partition

00:45:27,290 --> 00:45:33,020
your data and then you have sort of a

00:45:29,839 --> 00:45:37,029
you ask Oh Dr Dee cash d and you cash

00:45:33,020 --> 00:45:40,659
that and so you have like one master

00:45:37,029 --> 00:45:44,259
node in chain to all the others and that

00:45:40,659 --> 00:45:47,880
kind of makes you mix kaylene rd easier

00:45:44,259 --> 00:45:51,099
and I'm fairly possible fairly feasible

00:45:47,880 --> 00:45:53,140
otherwise it depends it really depends

00:45:51,099 --> 00:45:55,329
also on what kind of data I mean for

00:45:53,140 --> 00:45:56,829
some things you could think of using for

00:45:55,329 --> 00:45:59,109
stuff like this is probably a key value

00:45:56,829 --> 00:46:02,229
store would work really well because at

00:45:59,109 --> 00:46:04,959
the end at the end really metrics we're

00:46:02,229 --> 00:46:07,419
really talking about a label and a value

00:46:04,959 --> 00:46:10,119
and a point in time you know you have

00:46:07,419 --> 00:46:11,579
three variables you just have in at the

00:46:10,119 --> 00:46:15,549
point X you're using something like

00:46:11,579 --> 00:46:19,179
Reggie's works really well ready send

00:46:15,549 --> 00:46:20,739
Cassandra and depending what

00:46:19,179 --> 00:46:23,409
you're doing for metrics that will

00:46:20,739 --> 00:46:26,079
probably use Redis over and I

00:46:23,409 --> 00:46:28,359
think weakest andhra it works really

00:46:26,079 --> 00:46:30,429
nicely but it comes with a kind of a

00:46:28,359 --> 00:46:32,559
heavy luggage because you have to get

00:46:30,429 --> 00:46:34,929
all three and other things coming out of

00:46:32,559 --> 00:46:36,999
facebook which are really nice but then

00:46:34,929 --> 00:46:38,589
you have to maintain them and so you

00:46:36,999 --> 00:46:40,829
ready seem that sense it to be more

00:46:38,589 --> 00:46:40,829
lightweight

00:46:42,589 --> 00:46:45,579
anything else

00:46:49,170 --> 00:46:53,780

YouTube URL: https://www.youtube.com/watch?v=2NbCrNB2N8g


