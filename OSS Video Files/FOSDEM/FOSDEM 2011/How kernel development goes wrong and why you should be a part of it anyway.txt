Title: How kernel development goes wrong and why you should be a part of it anyway
Publication date: 2011-12-22
Playlist: FOSDEM 2011
Description: 
	by Jonathan Corbet 

The Linux kernel is at the core of any Linux system; the performance and capabilities of the kernel will, in the end, place an upper bound on what the system as a whole can do.

The Linux kernel is at the core of any Linux system; the performance and capabilities of the kernel will, in the end, place an upper bound on what the system as a whole can do. This talk will review recent events in the kernel development community, discuss the current state of the kernel and the challenges it faces, and look forward to how the kernel may address those challenges. Attendees of any technical ability should gain a better understanding of how the kernel got to its current state and what can be expected in the near future.


FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:04,460 --> 00:00:06,520
you

00:00:06,960 --> 00:00:10,710
thank you thank you all for um for

00:00:09,180 --> 00:00:12,849
sticking around through to the end time

00:00:10,710 --> 00:00:14,259
guess I'm in the unenviable

00:00:12,849 --> 00:00:16,930
being the only thing between you and

00:00:14,259 --> 00:00:18,520
your post-session beer or going home or

00:00:16,930 --> 00:00:22,689
whatever it is so I'll try to be

00:00:18,520 --> 00:00:25,240
merciful anyway those of you who have

00:00:22,689 --> 00:00:27,039
seen me talk before know that I tend to

00:00:25,240 --> 00:00:28,720
talk an awful lot about how well the

00:00:27,039 --> 00:00:30,550
kernel development process is working

00:00:28,720 --> 00:00:32,110
how well things are going then in fact

00:00:30,550 --> 00:00:34,690
it is going really well we've put out

00:00:32,110 --> 00:00:36,489
four to five releases every year pretty

00:00:34,690 --> 00:00:39,400
much every 80 days just like clockwork

00:00:36,489 --> 00:00:41,199
we get something like 10,000 changes and

00:00:39,400 --> 00:00:42,640
every single one of those releases we've

00:00:41,199 --> 00:00:44,440
got over a thousand developers

00:00:42,640 --> 00:00:46,809
participating and every single one of

00:00:44,440 --> 00:00:48,850
those release cycles this is a big

00:00:46,809 --> 00:00:50,200
process that's working quite well the

00:00:48,850 --> 00:00:51,910
results are showing up in everything

00:00:50,200 --> 00:00:53,500
from your toaster through to your

00:00:51,910 --> 00:00:55,449
supercomputer and everything in between

00:00:53,500 --> 00:00:56,949
the whole thing works and so I spend a

00:00:55,449 --> 00:00:58,989
lot of time talking about that but I'm

00:00:56,949 --> 00:00:59,620
not gonna do that today and tire that is

00:00:58,989 --> 00:01:02,020
boring

00:00:59,620 --> 00:01:04,059
instead today we get to talk about when

00:01:02,020 --> 00:01:06,220
things don't work quite as well we just

00:01:04,059 --> 00:01:09,550
can kind of find I have a few reasons

00:01:06,220 --> 00:01:11,289
for wanting to do that one of which I

00:01:09,550 --> 00:01:13,090
forgot to make a slide for is the simple

00:01:11,289 --> 00:01:14,860
fact that development failures cost us

00:01:13,090 --> 00:01:17,740
developers that we can't afford to lose

00:01:14,860 --> 00:01:19,720
even with the thousand with thousands of

00:01:17,740 --> 00:01:22,540
developers participating in our process

00:01:19,720 --> 00:01:24,790
we're not so rich that we can afford to

00:01:22,540 --> 00:01:28,659
lose talented people we never can do

00:01:24,790 --> 00:01:30,070
that beyond that you see things in the

00:01:28,659 --> 00:01:33,880
news every now and then when something

00:01:30,070 --> 00:01:35,380
falls apart and then you see unfavorable

00:01:33,880 --> 00:01:37,060
articles that sort of thing this shows

00:01:35,380 --> 00:01:40,329
up you see these kinds of headlines that

00:01:37,060 --> 00:01:44,290
pop up on wrong reputable news sources

00:01:40,329 --> 00:01:46,780
and so on and you know it makes us look

00:01:44,290 --> 00:01:49,840
bad and I'd rather not have that but the

00:01:46,780 --> 00:01:52,060
real reason for wanting to look at

00:01:49,840 --> 00:01:53,259
failures is that you learn from failure

00:01:52,060 --> 00:01:56,079
right that's how you really learn about

00:01:53,259 --> 00:01:58,000
how things are going on so another quote

00:01:56,079 --> 00:02:00,990
from a very influential figure in our

00:01:58,000 --> 00:02:00,990
particular community

00:02:01,950 --> 00:02:07,750
yes it's fine to celebrate success but

00:02:05,220 --> 00:02:09,310
what really matters is to heed the

00:02:07,750 --> 00:02:13,390
lessons of failure I'm sure that he has

00:02:09,310 --> 00:02:16,470
done this perhaps that's why he's out of

00:02:13,390 --> 00:02:19,420
the operating system business now um

00:02:16,470 --> 00:02:20,890
anyway more to the point though is is

00:02:19,420 --> 00:02:22,330
this quote here this comes from a book

00:02:20,890 --> 00:02:24,940
called the science of the artificial by

00:02:22,330 --> 00:02:26,680
Herbert Simon who's a Nobel Prize winner

00:02:24,940 --> 00:02:29,080
and economics all that here we was

00:02:26,680 --> 00:02:31,959
looking into the study of how the brain

00:02:29,080 --> 00:02:34,570
works and all that and he was looking at

00:02:31,959 --> 00:02:36,970
how things fail and the way his way of

00:02:34,570 --> 00:02:39,280
putting it was that a bridge when it

00:02:36,970 --> 00:02:41,290
works is just a piece of road that you

00:02:39,280 --> 00:02:43,150
can drive over you only learn about how

00:02:41,290 --> 00:02:45,940
it's built when it's been overloaded and

00:02:43,150 --> 00:02:47,950
something goes wrong so if we want to

00:02:45,940 --> 00:02:49,570
learn more about how kernels are built

00:02:47,950 --> 00:02:51,670
and how the development process works

00:02:49,570 --> 00:02:53,320
then we should look at how things go

00:02:51,670 --> 00:02:56,680
wrong so that's what I intend to do here

00:02:53,320 --> 00:03:00,459
but I want to just by to put out a quick

00:02:56,680 --> 00:03:01,600
note quickly because you know there are

00:03:00,459 --> 00:03:03,220
a lot of people in the kernel

00:03:01,600 --> 00:03:06,190
development community some of whom are

00:03:03,220 --> 00:03:08,170
rather more serious than others and I'm

00:03:06,190 --> 00:03:10,750
not gonna be talking about the people

00:03:08,170 --> 00:03:13,299
who are just sort of there to be strange

00:03:10,750 --> 00:03:14,830
and so on that's that's not what I'm

00:03:13,299 --> 00:03:16,630
after here I'm gonna have to name a

00:03:14,830 --> 00:03:19,030
bunch of names because I don't know how

00:03:16,630 --> 00:03:21,220
to talk about specific failures without

00:03:19,030 --> 00:03:22,750
doing that but everybody whose name I

00:03:21,220 --> 00:03:26,080
put up here is gonna be somebody that I

00:03:22,750 --> 00:03:27,880
respect somebody who is a welcome part

00:03:26,080 --> 00:03:30,489
of our community I'm not putting anybody

00:03:27,880 --> 00:03:32,530
up to mock them at all because they're

00:03:30,489 --> 00:03:35,260
all people who I think are better than

00:03:32,530 --> 00:03:38,560
me at this stuff so even this guy who's

00:03:35,260 --> 00:03:41,980
perhaps one of the the the more clownish

00:03:38,560 --> 00:03:44,140
of the bunch who points out that you

00:03:41,980 --> 00:03:45,670
know we haven't we're not failing we're

00:03:44,140 --> 00:03:49,690
just finding ways not to solve the

00:03:45,670 --> 00:03:52,780
problem so with that in mind let's sort

00:03:49,690 --> 00:03:56,709
of hit the road and look at ways not to

00:03:52,780 --> 00:03:59,320
solve problems example number one is a

00:03:56,709 --> 00:04:01,540
file system called tux theory came out

00:03:59,320 --> 00:04:02,769
back in 2008 Danny Philips has been

00:04:01,540 --> 00:04:04,720
around our community for a long time

00:04:02,769 --> 00:04:07,299
very smart guy done a lot of stuff and

00:04:04,720 --> 00:04:09,010
he came out in in July of 2008 and said

00:04:07,299 --> 00:04:10,120
I'm gonna make a new file system there

00:04:09,010 --> 00:04:12,190
was a lot of interest in new file

00:04:10,120 --> 00:04:14,140
systems then as there is now trying to

00:04:12,190 --> 00:04:16,450
take us forward in the in the air

00:04:14,140 --> 00:04:19,060
of next generation file systems so I've

00:04:16,450 --> 00:04:20,500
got all these great ideas puts out his

00:04:19,060 --> 00:04:21,880
announcement puts out his code there are

00:04:20,500 --> 00:04:23,440
a lot of very interesting discussions

00:04:21,880 --> 00:04:26,050
that went on between him and other file

00:04:23,440 --> 00:04:28,090
system developers by November of that

00:04:26,050 --> 00:04:29,890
year he headed to the point where he

00:04:28,090 --> 00:04:32,020
could actually boot a Linux system with

00:04:29,890 --> 00:04:34,210
with a root filesystem based on his text

00:04:32,020 --> 00:04:35,650
three file system he had other people

00:04:34,210 --> 00:04:37,690
contributing code it literally looked

00:04:35,650 --> 00:04:39,640
like the project was getting going but

00:04:37,690 --> 00:04:42,880
if you look forward into the next year

00:04:39,640 --> 00:04:45,100
things trickle off and by august of 2009

00:04:42,880 --> 00:04:46,720
the the last commit goes in which was

00:04:45,100 --> 00:04:48,460
some sort of a whitespace fix something

00:04:46,720 --> 00:04:50,590
like that and the whole thing just sort

00:04:48,460 --> 00:04:52,570
of died the project is dead the codes

00:04:50,590 --> 00:04:53,980
not in the kernel nobody is using this

00:04:52,570 --> 00:04:54,520
filesystem and all the work that went

00:04:53,980 --> 00:04:59,350
into it

00:04:54,520 --> 00:05:01,570
is yes or not so somebody saw this

00:04:59,350 --> 00:05:03,160
coming this is Andrew Morton's think of

00:05:01,570 --> 00:05:04,180
him as the number two kernel developer

00:05:03,160 --> 00:05:07,690
if you if you like

00:05:04,180 --> 00:05:09,700
who gave the annual warning saying don't

00:05:07,690 --> 00:05:11,200
don't keep adding stuff to a project

00:05:09,700 --> 00:05:13,090
that's out of the mainline kernel tree

00:05:11,200 --> 00:05:16,990
because that just makes it harder to get

00:05:13,090 --> 00:05:20,400
it in when the time comes so that

00:05:16,990 --> 00:05:23,260
warning went out was not heard

00:05:20,400 --> 00:05:25,030
so the probably kept on developing

00:05:23,260 --> 00:05:28,690
outside of the mainline tree until

00:05:25,030 --> 00:05:30,760
Daniel lost interest he got a job at a

00:05:28,690 --> 00:05:35,050
certain search engine company that I

00:05:30,760 --> 00:05:36,910
won't name which is stopping the kiss of

00:05:35,050 --> 00:05:40,030
death for community contribution

00:05:36,910 --> 00:05:41,919
unfortunately and he went away and the

00:05:40,030 --> 00:05:43,600
project died and even acknowledged later

00:05:41,919 --> 00:05:46,000
on yes I should have listened to this I

00:05:43,600 --> 00:05:47,890
should have gotten my code into the

00:05:46,000 --> 00:05:50,770
kernel when when I was warned to do that

00:05:47,890 --> 00:05:52,030
so a lesson from this is there's

00:05:50,770 --> 00:05:54,400
something that a lot of us have been

00:05:52,030 --> 00:05:56,290
saying for quite a while now if you have

00:05:54,400 --> 00:05:58,330
code that is outside of the mainline

00:05:56,290 --> 00:06:00,220
project is essentially invisible it

00:05:58,330 --> 00:06:02,440
doesn't have the attention it doesn't

00:06:00,220 --> 00:06:05,620
have the momentum it just doesn't have

00:06:02,440 --> 00:06:07,120
the the activity around it the code does

00:06:05,620 --> 00:06:10,169
when it gets into the mainline kernel

00:06:07,120 --> 00:06:12,669
tree if you've ever watched a bike race

00:06:10,169 --> 00:06:15,039
you notice how they all ride together in

00:06:12,669 --> 00:06:16,240
a peloton a tight group all together if

00:06:15,039 --> 00:06:18,160
you've ever ridden in a group like that

00:06:16,240 --> 00:06:20,140
you understand why the group carries

00:06:18,160 --> 00:06:21,729
forward the air with it and you can ride

00:06:20,140 --> 00:06:23,770
at great speed with almost no effort

00:06:21,729 --> 00:06:25,210
within a group like this as soon as you

00:06:23,770 --> 00:06:26,830
go outside of it you're pushing against

00:06:25,210 --> 00:06:28,540
the wind by yourself and you

00:06:26,830 --> 00:06:31,330
to work much harder to ride much more

00:06:28,540 --> 00:06:32,650
slowly than you do the kernel process is

00:06:31,330 --> 00:06:34,780
really an awful lot like this code

00:06:32,650 --> 00:06:37,090
that's in the kernel gets carried along

00:06:34,780 --> 00:06:38,830
by the momentum of the kernel itself it

00:06:37,090 --> 00:06:40,960
has its carolina's all the people who

00:06:38,830 --> 00:06:42,610
are focused on it if you were outside of

00:06:40,960 --> 00:06:45,430
it then you're here against the wind by

00:06:42,610 --> 00:06:46,990
yourself so blesses really clear get

00:06:45,430 --> 00:06:49,410
your code into the main line as quickly

00:06:46,990 --> 00:06:52,030
as you can if you look at the

00:06:49,410 --> 00:06:53,650
development of the butter FS filesystem

00:06:52,030 --> 00:06:56,020
which was being developed at about the

00:06:53,650 --> 00:06:58,900
same time Chris Mason put that file

00:06:56,020 --> 00:07:00,340
system into the kernel even though it

00:06:58,900 --> 00:07:03,040
was nowhere near ready it's still not

00:07:00,340 --> 00:07:04,510
considered to be ready and the pace of

00:07:03,040 --> 00:07:05,830
development at that point picked up and

00:07:04,510 --> 00:07:07,960
butter fest is still a very strong

00:07:05,830 --> 00:07:09,760
project and will be the next-generation

00:07:07,960 --> 00:07:11,560
file system that will all be running in

00:07:09,760 --> 00:07:13,480
the near future because he did that if

00:07:11,560 --> 00:07:21,930
he'd kept it outside it would have been

00:07:13,480 --> 00:07:21,930
harder I'll take that as an agreement

00:07:28,500 --> 00:07:36,640
all right moving on VM 28 xx driver is a

00:07:35,080 --> 00:07:38,410
video for lace driver it's a web cam

00:07:36,640 --> 00:07:41,380
driver that actually was put in the

00:07:38,410 --> 00:07:43,620
mainline kernel back in 2005 by a guy

00:07:41,380 --> 00:07:45,700
named Marcus Rexburg wreck Berger

00:07:43,620 --> 00:07:47,380
over the course of the next couple of

00:07:45,700 --> 00:07:49,810
years a whole lot of things happen and

00:07:47,380 --> 00:07:52,270
by the beginning of 2008 he was no

00:07:49,810 --> 00:07:53,650
longer contributing to that driver later

00:07:52,270 --> 00:07:56,380
on that year he actually tried to

00:07:53,650 --> 00:07:59,680
replace it outright and that was that

00:07:56,380 --> 00:08:02,140
effort was rejected and then in 2009 we

00:07:59,680 --> 00:08:05,290
saw the last patch from him in the queue

00:08:02,140 --> 00:08:07,060
the kernel in anywhere in the kernel and

00:08:05,290 --> 00:08:10,480
we lost him from our developer community

00:08:07,060 --> 00:08:13,390
at this time what went on was a whole

00:08:10,480 --> 00:08:15,840
lot of disagreement between Marcus and

00:08:13,390 --> 00:08:18,220
the the higher-level video for Linux

00:08:15,840 --> 00:08:20,590
maintainer and it was really best

00:08:18,220 --> 00:08:23,260
summarized by by a message he sent out

00:08:20,590 --> 00:08:24,880
in the middle of this saying companies

00:08:23,260 --> 00:08:27,280
should be aware that if they submit

00:08:24,880 --> 00:08:30,190
Coates you they lose control over their

00:08:27,280 --> 00:08:33,729
work it was an issue of control over

00:08:30,190 --> 00:08:35,350
whether Marcus had the absolute control

00:08:33,729 --> 00:08:36,970
over what went into that driver but

00:08:35,350 --> 00:08:39,130
whether others can contribute it and

00:08:36,970 --> 00:08:40,360
carry it forward and enhance it in ways

00:08:39,130 --> 00:08:42,849
they saw fit

00:08:40,360 --> 00:08:48,879
here's another example back in May of

00:08:42,849 --> 00:08:51,339
2004 Hans Reiser saw an attempt to to

00:08:48,879 --> 00:08:52,689
modify the Reiser three file system this

00:08:51,339 --> 00:08:55,660
is we're talking about Ryan's dream

00:08:52,689 --> 00:08:58,259
Chris Mason came along and added code to

00:08:55,660 --> 00:09:00,249
add support for access control lists and

00:08:58,259 --> 00:09:02,470
extended attributes to the rights of

00:09:00,249 --> 00:09:04,059
three file system this is a feature that

00:09:02,470 --> 00:09:05,739
you need to support things like the SC

00:09:04,059 --> 00:09:07,779
Linux security framework that sort of

00:09:05,739 --> 00:09:09,670
stuff and Hans said no you cannot add

00:09:07,779 --> 00:09:11,410
that to my file system and think it's

00:09:09,670 --> 00:09:14,439
supposed to be stable I want people

00:09:11,410 --> 00:09:20,139
working on riser 4 instead we'll talk

00:09:14,439 --> 00:09:22,360
about riser for later so Hans lost that

00:09:20,139 --> 00:09:23,470
battle write the code went into riser 3

00:09:22,360 --> 00:09:25,449
the enhancements were there they're

00:09:23,470 --> 00:09:27,040
still there they're being used right he

00:09:25,449 --> 00:09:30,220
was overridden with that Lina's

00:09:27,040 --> 00:09:31,660
described it this way he's had to to

00:09:30,220 --> 00:09:35,019
make this less than a whole lot of times

00:09:31,660 --> 00:09:37,209
right if you maintain code if you

00:09:35,019 --> 00:09:38,799
contributed it you don't own it right if

00:09:37,209 --> 00:09:41,589
somebody else comes along with something

00:09:38,799 --> 00:09:45,429
that needs to be done to it then you do

00:09:41,589 --> 00:09:46,899
not have the ability to control it this

00:09:45,429 --> 00:09:49,089
is something that's true the chrome it's

00:09:46,899 --> 00:09:51,249
really true of any free software project

00:09:49,089 --> 00:09:52,989
that that merits the name right when

00:09:51,249 --> 00:09:54,790
you've contributed code you put it under

00:09:52,989 --> 00:09:56,410
a free license you've put it out there

00:09:54,790 --> 00:09:59,410
for the community to work on you have

00:09:56,410 --> 00:10:01,869
given up a certain degree of control and

00:09:59,410 --> 00:10:04,299
if anything if things are going well at

00:10:01,869 --> 00:10:06,009
all others will come along and work on

00:10:04,299 --> 00:10:08,799
it they will improve it they will make

00:10:06,009 --> 00:10:10,389
it better once you put it into the into

00:10:08,799 --> 00:10:12,790
the kernel you've really you've turned

00:10:10,389 --> 00:10:15,629
it loose you have to let it fly in my

00:10:12,790 --> 00:10:17,439
mind this is not a downside of

00:10:15,629 --> 00:10:18,970
contributing code this is one of the

00:10:17,439 --> 00:10:20,529
most beautiful things that there is that

00:10:18,970 --> 00:10:22,029
you can put some code out there and

00:10:20,529 --> 00:10:25,119
watch it get better and you don't have

00:10:22,029 --> 00:10:28,179
to do it yeah I think that's great but

00:10:25,119 --> 00:10:30,699
if you want to contain control over that

00:10:28,179 --> 00:10:33,759
code then then you should really just

00:10:30,699 --> 00:10:35,860
hang on to it because that that's just

00:10:33,759 --> 00:10:42,220
not compatible with how free software

00:10:35,860 --> 00:10:44,679
works back in 2002 this is at the

00:10:42,220 --> 00:10:48,339
beginning of the 2.5 development kernel

00:10:44,679 --> 00:10:50,679
series the the position of maintainer

00:10:48,339 --> 00:10:52,419
for the IDE disk subsystem was actually

00:10:50,679 --> 00:10:53,190
vacant at that time we had no maintainer

00:10:52,419 --> 00:10:54,630
for

00:10:53,190 --> 00:10:56,310
really a pretty critical piece of code

00:10:54,630 --> 00:10:58,680
because we actually still had IDE this

00:10:56,310 --> 00:11:01,020
in those days there's no maintainer

00:10:58,680 --> 00:11:03,150
because that code was widely held to

00:11:01,020 --> 00:11:05,670
have driven insane everybody who tried

00:11:03,150 --> 00:11:08,660
to take control of it over the years and

00:11:05,670 --> 00:11:11,580
so people kind of went off after a while

00:11:08,660 --> 00:11:14,250
so Martindale lucky shows up this guy

00:11:11,580 --> 00:11:16,050
shows up in posts a past assist here's a

00:11:14,250 --> 00:11:19,110
bunch of cleanups for the ID subsystem

00:11:16,050 --> 00:11:23,160
that goes in within a few weeks use up

00:11:19,110 --> 00:11:24,600
to the 18th set of cleanup patches these

00:11:23,160 --> 00:11:27,810
are fairly significant restructuring

00:11:24,600 --> 00:11:29,520
patches at this point and he set himself

00:11:27,810 --> 00:11:32,490
up as the maintainer of the IDE

00:11:29,520 --> 00:11:33,570
subsystem he continued to send in more

00:11:32,490 --> 00:11:36,030
and more passions which were being

00:11:33,570 --> 00:11:39,150
merged by leanness until by August of

00:11:36,030 --> 00:11:40,590
that year he is up to number 115 this is

00:11:39,150 --> 00:11:42,930
a whole lot of patches all going in

00:11:40,590 --> 00:11:45,030
there during this time he was invited to

00:11:42,930 --> 00:11:47,190
the colonel summit to to represent that

00:11:45,030 --> 00:11:49,260
work there and so on things really seems

00:11:47,190 --> 00:11:52,950
to be on a roll there one week after

00:11:49,260 --> 00:11:54,480
number 115 he quit the colonel

00:11:52,950 --> 00:11:56,670
development process entirely and all

00:11:54,480 --> 00:11:58,500
that code was ripped out the IDE code

00:11:56,670 --> 00:12:00,780
was put back to where it was at the

00:11:58,500 --> 00:12:03,330
beginning of the 2.5 development series

00:12:00,780 --> 00:12:05,100
all that work his work and the work that

00:12:03,330 --> 00:12:08,910
everybody else put into helping make it

00:12:05,100 --> 00:12:11,520
work was was lost and went away there's

00:12:08,910 --> 00:12:14,580
a major loss of a developer and his time

00:12:11,520 --> 00:12:16,800
in his work so anybody who was actually

00:12:14,580 --> 00:12:18,180
running 2.5 development kernels during

00:12:16,800 --> 00:12:21,930
those days knows what happened here

00:12:18,180 --> 00:12:24,120
right the the IDE subsystem was highly

00:12:21,930 --> 00:12:25,380
unreliable during this time in fact it

00:12:24,120 --> 00:12:27,090
was considered that if you wanted to run

00:12:25,380 --> 00:12:29,760
run these kernels you were really best

00:12:27,090 --> 00:12:32,220
off using scuzzy discs during that time

00:12:29,760 --> 00:12:34,260
and he described it this way when some

00:12:32,220 --> 00:12:36,270
people questioned him on it said that

00:12:34,260 --> 00:12:41,550
well breakage is the price you have to

00:12:36,270 --> 00:12:45,120
pay for advancements there was perhaps

00:12:41,550 --> 00:12:46,830
more breakage than advancements but he

00:12:45,120 --> 00:12:48,390
was he was really trying to carry it

00:12:46,830 --> 00:12:51,630
forward but he did it with a sort of

00:12:48,390 --> 00:12:54,089
scorched earth policy that that really

00:12:51,630 --> 00:12:58,350
made the kernel unusable for people and

00:12:54,089 --> 00:13:02,070
took things backwards and you know the

00:12:58,350 --> 00:13:04,470
lesson is clear right don't do that this

00:13:02,070 --> 00:13:06,200
lesson has become much more clear in the

00:13:04,470 --> 00:13:08,750
time since then

00:13:06,200 --> 00:13:10,250
code that that breaks a subsystem for

00:13:08,750 --> 00:13:12,380
months at a time would just not be

00:13:10,250 --> 00:13:14,180
tolerated now because we have adopted a

00:13:12,380 --> 00:13:18,019
policy that is very strongly against

00:13:14,180 --> 00:13:19,850
regressions when you were evolving a

00:13:18,019 --> 00:13:21,889
piece of code as quickly as the kernel

00:13:19,850 --> 00:13:24,680
is changing you really have to be

00:13:21,889 --> 00:13:26,510
careful to ensure that you are not going

00:13:24,680 --> 00:13:28,699
backwards in terms of quality and

00:13:26,510 --> 00:13:30,649
knowing that you're not going backwards

00:13:28,699 --> 00:13:33,230
is actually very hard how do you measure

00:13:30,649 --> 00:13:34,970
the quality of a kernel it's not just a

00:13:33,230 --> 00:13:37,370
number you can pick out it's not just a

00:13:34,970 --> 00:13:39,410
metric you can have but one thing that

00:13:37,370 --> 00:13:41,300
you can do is you can insist that a

00:13:39,410 --> 00:13:44,029
kernel that works for people at one

00:13:41,300 --> 00:13:45,829
point continues to work going forward if

00:13:44,029 --> 00:13:48,320
you don't allow things to go backwards

00:13:45,829 --> 00:13:51,230
then you should be creating kernels that

00:13:48,320 --> 00:13:53,300
are getting better over time all right

00:13:51,230 --> 00:13:56,209
if you don't do that at this point if

00:13:53,300 --> 00:13:58,730
you break things your codes likely to

00:13:56,209 --> 00:14:00,529
come out within a week at this point it

00:13:58,730 --> 00:14:03,980
won't go on for six months like it did

00:14:00,529 --> 00:14:06,500
here but one way or the other

00:14:03,980 --> 00:14:13,699
don't break things and life will be

00:14:06,500 --> 00:14:15,649
better this was perhaps one of the

00:14:13,699 --> 00:14:17,449
highest profile homing failures that we

00:14:15,649 --> 00:14:23,420
saw with a lot of media attention and so

00:14:17,449 --> 00:14:26,449
on the scheduler early in the in the 2.6

00:14:23,420 --> 00:14:28,370
series up into the early 20s was was

00:14:26,449 --> 00:14:32,029
called the Oh order one scheduler done

00:14:28,370 --> 00:14:33,769
by Ingo Molnar and others over time it

00:14:32,029 --> 00:14:35,750
had developed a whole lot of little

00:14:33,769 --> 00:14:38,449
tweaks trying to improve interactivity

00:14:35,750 --> 00:14:40,970
to make interactive desktop systems more

00:14:38,449 --> 00:14:43,070
responsive the code had gotten very

00:14:40,970 --> 00:14:46,640
complex very twisted very hard to work

00:14:43,070 --> 00:14:48,949
on full of heuristics and I still didn't

00:14:46,640 --> 00:14:51,110
really perform the way people wanted it

00:14:48,949 --> 00:14:53,209
to with regard to interactivity so

00:14:51,110 --> 00:14:55,220
conchal Eva's who was actually not a

00:14:53,209 --> 00:14:57,620
kernel developer by training at all he's

00:14:55,220 --> 00:14:59,600
a doctor he's an anesthesiologist but he

00:14:57,620 --> 00:15:01,550
he managed to train himself in kernel

00:14:59,600 --> 00:15:03,889
development and get quite good at it he

00:15:01,550 --> 00:15:05,449
came along and he said okay I don't like

00:15:03,889 --> 00:15:07,430
this idea at all let's just throw it

00:15:05,449 --> 00:15:08,600
away we'll get rid of all the heuristics

00:15:07,430 --> 00:15:11,750
and we'll put it in a very simple

00:15:08,600 --> 00:15:14,120
scheduler this works on simple fairness

00:15:11,750 --> 00:15:16,699
if there are four processes contending

00:15:14,120 --> 00:15:18,670
for the CPU each one gets 25% of that

00:15:16,699 --> 00:15:21,310
CPU period

00:15:18,670 --> 00:15:23,950
so much simpler algorithm you can put it

00:15:21,310 --> 00:15:25,420
in simplified all the code and as it

00:15:23,950 --> 00:15:27,610
turned out that made interactivity

00:15:25,420 --> 00:15:29,650
better then all the here sticks in the

00:15:27,610 --> 00:15:31,840
complicated code that we had before at

00:15:29,650 --> 00:15:33,400
least in some situations so he puts it

00:15:31,840 --> 00:15:35,140
out there the very next day leanness

00:15:33,400 --> 00:15:37,000
looks at it he says yeah I could

00:15:35,140 --> 00:15:38,500
consider merging that I like this and

00:15:37,000 --> 00:15:40,450
simplifies things it gets rid of a lot

00:15:38,500 --> 00:15:42,310
of code but if you followed the

00:15:40,450 --> 00:15:43,810
discussion you see that within a couple

00:15:42,310 --> 00:15:46,600
of weeks the tone was getting rather

00:15:43,810 --> 00:15:49,560
grumpier and what was going on was once

00:15:46,600 --> 00:15:52,120
again breaking things for people right

00:15:49,560 --> 00:15:53,620
Khan's scheduler made things better for

00:15:52,120 --> 00:15:57,850
some people but it made things worse for

00:15:53,620 --> 00:16:00,340
other people and he was not as

00:15:57,850 --> 00:16:01,680
responsive as he needed to be to the

00:16:00,340 --> 00:16:04,480
complaints of the people whose

00:16:01,680 --> 00:16:07,030
performance was going backwards this got

00:16:04,480 --> 00:16:10,840
to a point that eventually Ingo Molnar

00:16:07,030 --> 00:16:13,450
went off and doing as he is want to do

00:16:10,840 --> 00:16:16,150
what times took a day or two and

00:16:13,450 --> 00:16:18,220
completely wrote his own thing that did

00:16:16,150 --> 00:16:19,780
it his way using the same basic

00:16:18,220 --> 00:16:22,030
algorithm it was called the completely

00:16:19,780 --> 00:16:24,370
fair scheduler for CFS so that was

00:16:22,030 --> 00:16:26,290
posted within a few months it was CSS

00:16:24,370 --> 00:16:28,510
CFS that was merged into the main line

00:16:26,290 --> 00:16:31,360
not and Khan's deadlines scheduler and

00:16:28,510 --> 00:16:34,090
within a couple weeks of that con left

00:16:31,360 --> 00:16:36,130
the development community and he left in

00:16:34,090 --> 00:16:39,400
a very public sort of disgruntled

00:16:36,130 --> 00:16:41,650
unhappy sort of way saying I'm out of

00:16:39,400 --> 00:16:43,060
here I'm done I'm gonna leave before I

00:16:41,650 --> 00:16:46,480
get so fed up that I end up running

00:16:43,060 --> 00:16:48,160
Windows and we lost a developer who was

00:16:46,480 --> 00:16:48,820
really trying to do good stuff a very

00:16:48,160 --> 00:16:50,530
smart guy

00:16:48,820 --> 00:16:53,280
somebody we couldn't afford to lose it

00:16:50,530 --> 00:16:55,600
was it was not a good thing in any way

00:16:53,280 --> 00:16:57,580
so what do you learn from something like

00:16:55,600 --> 00:17:00,730
this right you need to learn from these

00:16:57,580 --> 00:17:02,980
things so number one improve the kernel

00:17:00,730 --> 00:17:04,570
for everybody you cannot go in and

00:17:02,980 --> 00:17:06,670
improve the kernel for one group of

00:17:04,570 --> 00:17:08,440
people the expense of another right the

00:17:06,670 --> 00:17:10,180
kernel at this point is running on your

00:17:08,440 --> 00:17:12,790
telephone that's running on your desktop

00:17:10,180 --> 00:17:14,620
is running on huge supercomputers it's

00:17:12,790 --> 00:17:17,320
running on all kinds of things we have a

00:17:14,620 --> 00:17:19,660
very wide ranging user base and you

00:17:17,320 --> 00:17:21,790
simply cannot make it worse for some of

00:17:19,660 --> 00:17:24,490
those people so if you can't make it

00:17:21,790 --> 00:17:28,240
better for everybody at least need to

00:17:24,490 --> 00:17:30,550
not make it worse for people related to

00:17:28,240 --> 00:17:31,539
this is the fact that certain parts of

00:17:30,550 --> 00:17:33,999
the kernel

00:17:31,539 --> 00:17:36,309
are simply hard to change this is

00:17:33,999 --> 00:17:40,119
especially true core kernel areas that

00:17:36,309 --> 00:17:41,559
are are coated with a whole lot of

00:17:40,119 --> 00:17:42,970
heuristics that have been developed over

00:17:41,559 --> 00:17:45,190
time and where we have a lot of

00:17:42,970 --> 00:17:47,229
experience that says if you mess with

00:17:45,190 --> 00:17:48,489
these things you tend to find surprises

00:17:47,229 --> 00:17:51,669
on other workloads

00:17:48,489 --> 00:17:54,009
far into the future when it's harder to

00:17:51,669 --> 00:17:56,289
fix the fact we're still finding things

00:17:54,009 --> 00:17:57,549
that relate to the scheduler change and

00:17:56,289 --> 00:17:59,830
still fixing them it takes a long time

00:17:57,549 --> 00:18:01,629
to do this so there's a fair amount of

00:17:59,830 --> 00:18:03,009
resistance to making changes in parts of

00:18:01,629 --> 00:18:04,539
the kernel and you have to have a lot of

00:18:03,009 --> 00:18:06,609
patience if you want to work in those

00:18:04,539 --> 00:18:11,409
areas that's just the way it is it's a

00:18:06,609 --> 00:18:13,690
it's a hard task to do participate in

00:18:11,409 --> 00:18:16,359
the discussion Kahn had his own mailing

00:18:13,690 --> 00:18:18,009
list for discussion of his patches the

00:18:16,359 --> 00:18:19,659
people who subscribe to that list for

00:18:18,009 --> 00:18:21,879
naturally the people who are interested

00:18:19,659 --> 00:18:23,679
in his work and liked it so he got he

00:18:21,879 --> 00:18:25,210
was working in an environment where

00:18:23,679 --> 00:18:26,769
everyone was saying yeah this is great

00:18:25,210 --> 00:18:28,720
you're doing good stuff keep going we

00:18:26,769 --> 00:18:30,609
want more of it that sort of thing

00:18:28,720 --> 00:18:32,859
he wasn't participating in the

00:18:30,609 --> 00:18:35,619
discussion on the Linux kernel list

00:18:32,859 --> 00:18:37,929
where people were we're looking at

00:18:35,619 --> 00:18:39,999
things from a wider point of view so he

00:18:37,929 --> 00:18:42,009
really he missed the the wider

00:18:39,999 --> 00:18:43,629
discussion he missed the view of the of

00:18:42,009 --> 00:18:46,330
the situation that he really needed to

00:18:43,629 --> 00:18:48,549
have you just can't do that you cannot

00:18:46,330 --> 00:18:51,759
isolate yourself from the community even

00:18:48,549 --> 00:18:53,889
if say not subscribing to Linux kernel

00:18:51,759 --> 00:18:55,869
and getting 500 messages a day out of

00:18:53,889 --> 00:18:59,320
your inbox there's an appealing sort of

00:18:55,869 --> 00:19:01,029
thing to do you really you have to you

00:18:59,320 --> 00:19:02,559
have to be part of the community or else

00:19:01,029 --> 00:19:05,619
you're not going to work well with the

00:19:02,559 --> 00:19:08,200
community but perhaps the most important

00:19:05,619 --> 00:19:10,389
thing the key lesson to draw from this

00:19:08,200 --> 00:19:13,210
in my mind is that you really need to

00:19:10,389 --> 00:19:15,340
look for a solution to your problem and

00:19:13,210 --> 00:19:17,200
not the incorporation of a specific body

00:19:15,340 --> 00:19:19,059
of code because if you look at what

00:19:17,200 --> 00:19:21,749
happened with the completely free

00:19:19,059 --> 00:19:25,450
scheduler Kahn got what he wanted he won

00:19:21,749 --> 00:19:27,549
he was able to through the through his

00:19:25,450 --> 00:19:29,619
efforts replaced the scheduler we've won

00:19:27,549 --> 00:19:32,229
that was based on fair scheduling it

00:19:29,619 --> 00:19:34,570
just wasn't his code and so it got hurt

00:19:32,229 --> 00:19:36,609
but if you looked if he took a step back

00:19:34,570 --> 00:19:38,499
and look at it he got what he wanted out

00:19:36,609 --> 00:19:41,610
of all of this and was widely credited

00:19:38,499 --> 00:19:44,580
for having pushed things that way

00:19:41,610 --> 00:19:46,020
dan fry is a vice president at IBM runs

00:19:44,580 --> 00:19:48,600
their Linux Technology Center there

00:19:46,020 --> 00:19:51,000
gives a talk he talks about how IBM

00:19:48,600 --> 00:19:53,820
approaches this sort of thing within IBM

00:19:51,000 --> 00:19:55,350
if you work for IBM and you push the the

00:19:53,820 --> 00:19:57,540
community towards the solution of a

00:19:55,350 --> 00:19:59,730
problem you're credited for having done

00:19:57,540 --> 00:20:01,860
that whether or not it is your specific

00:19:59,730 --> 00:20:03,420
code that is merged they don't care if

00:20:01,860 --> 00:20:05,430
it's your code that was developed at IBM

00:20:03,420 --> 00:20:07,290
that was merged if the problem is solved

00:20:05,430 --> 00:20:09,690
it's a very enlightened view and you can

00:20:07,290 --> 00:20:11,700
see it in action the way the IBM's

00:20:09,690 --> 00:20:13,440
developers work with the community it's

00:20:11,700 --> 00:20:16,380
something that that I would like to see

00:20:13,440 --> 00:20:17,790
much more widely adopted throughout the

00:20:16,380 --> 00:20:20,010
kernel development community and beyond

00:20:17,790 --> 00:20:21,690
really if you look for the solution to

00:20:20,010 --> 00:20:23,760
the problem you're a whole lot happier

00:20:21,690 --> 00:20:32,390
then if you're looking for an entry in

00:20:23,760 --> 00:20:32,390
the change lock all right

00:20:39,869 --> 00:20:44,619
you know the only other time I came to

00:20:42,789 --> 00:20:46,720
Fossum I actually spoke right next to

00:20:44,619 --> 00:20:49,029
Hans Reiser we had you put us in two

00:20:46,720 --> 00:20:51,039
sessions right next to each other

00:20:49,029 --> 00:20:53,499
Hans is a really smart guy with a lot of

00:20:51,039 --> 00:20:55,389
very interesting ideas there are certain

00:20:53,499 --> 00:21:00,999
aspects of his behavior that he just

00:20:55,389 --> 00:21:02,049
cannot approve of but you know and

00:21:00,999 --> 00:21:05,529
honestly I don't think it's all that

00:21:02,049 --> 00:21:08,679
funny but but if we think about Reiser

00:21:05,529 --> 00:21:11,440
for back in 2002 it was already fairly

00:21:08,679 --> 00:21:13,450
clear that the file systems we had at

00:21:11,440 --> 00:21:14,799
that time we're not adequate to what we

00:21:13,450 --> 00:21:17,710
needed going forward into the future

00:21:14,799 --> 00:21:19,059
that we're really carrying with us the

00:21:17,710 --> 00:21:21,730
weight of file systems that were

00:21:19,059 --> 00:21:24,070
designed back in the UNIX days priority

00:21:21,730 --> 00:21:26,619
UNIX really there the ext series of file

00:21:24,070 --> 00:21:28,419
systems really carries forward a lot of

00:21:26,619 --> 00:21:31,299
ideas from the fast file system in

00:21:28,419 --> 00:21:35,019
session them from our UNIX heritage old

00:21:31,299 --> 00:21:36,580
stuff our needs have come forward the

00:21:35,019 --> 00:21:37,509
hardware has changed the so on so we

00:21:36,580 --> 00:21:40,389
needed something different

00:21:37,509 --> 00:21:42,220
han saw that plus he had a whole lot of

00:21:40,389 --> 00:21:44,320
wild ideas of his own that he wanted to

00:21:42,220 --> 00:21:47,080
put in new file system so way back in

00:21:44,320 --> 00:21:50,200
2002 he put out the first version of the

00:21:47,080 --> 00:21:53,799
riser 4 file system he worked on this in

00:21:50,200 --> 00:21:56,710
2003 just as as leanness was finally

00:21:53,799 --> 00:21:58,330
trying to pull together two 6-0 release

00:21:56,710 --> 00:21:59,679
and get it out there he said well 1 why

00:21:58,330 --> 00:22:00,940
don't you throw my file system into

00:21:59,679 --> 00:22:03,309
there you've thrown in everything else

00:22:00,940 --> 00:22:04,720
into the Sun because 9 to 6 was in

00:22:03,309 --> 00:22:09,609
feature freeze for the better part of

00:22:04,720 --> 00:22:12,129
two years for a very leanest sort of

00:22:09,609 --> 00:22:14,109
value a feature free shall we say so I

00:22:12,129 --> 00:22:16,210
mean a file system would really just be

00:22:14,109 --> 00:22:19,029
the noise for something like that but

00:22:16,210 --> 00:22:20,559
but he didn't succeed but he did in 2004

00:22:19,029 --> 00:22:23,859
managed to get it into Endor Wharton's

00:22:20,559 --> 00:22:25,480
mm tree which was seen as being the main

00:22:23,859 --> 00:22:27,999
path into the kernel at that particular

00:22:25,480 --> 00:22:31,119
time that's changed a bit since then

00:22:27,999 --> 00:22:32,769
still didn't get in a 2005 and 2006 he

00:22:31,119 --> 00:22:36,249
made major pushes to get this stuff

00:22:32,769 --> 00:22:37,950
merged never succeeded finally he kind

00:22:36,249 --> 00:22:41,230
of left our community forevermore and

00:22:37,950 --> 00:22:43,690
Raisa 4 has since languished and I don't

00:22:41,230 --> 00:22:46,659
think we will ever see it merged into

00:22:43,690 --> 00:22:47,919
the mainline kernel so why was there so

00:22:46,659 --> 00:22:49,720
much trouble why did we have a

00:22:47,919 --> 00:22:51,260
next-generation file system that we

00:22:49,720 --> 00:22:54,230
couldn't get put into the inn

00:22:51,260 --> 00:22:57,890
mainline kernel well a lot of things

00:22:54,230 --> 00:22:59,750
that you can point to it behaves very

00:22:57,890 --> 00:23:01,850
strangely the only file system I've ever

00:22:59,750 --> 00:23:04,250
seen we actually change your working

00:23:01,850 --> 00:23:06,560
directory into a plain text file and

00:23:04,250 --> 00:23:08,210
then cat out the metadata like the

00:23:06,560 --> 00:23:11,030
modification time as a separate little

00:23:08,210 --> 00:23:12,230
file no one else has done that sort of

00:23:11,030 --> 00:23:14,600
thing so there's certain things that

00:23:12,230 --> 00:23:15,920
don't conform to the the established

00:23:14,600 --> 00:23:19,370
standards for unix-like operating

00:23:15,920 --> 00:23:21,530
systems there are a number of technical

00:23:19,370 --> 00:23:23,480
difficulties things like locking

00:23:21,530 --> 00:23:25,250
problems that sort of stuff a lot of

00:23:23,480 --> 00:23:27,050
those result from the fact that Raisa

00:23:25,250 --> 00:23:30,140
four was developed behind closed doors

00:23:27,050 --> 00:23:32,210
for a long time and given to the

00:23:30,140 --> 00:23:33,650
community as a sort of finished product

00:23:32,210 --> 00:23:34,910
if he had brought it forward sooner a

00:23:33,650 --> 00:23:38,540
lot of these problems would have been

00:23:34,910 --> 00:23:43,190
simpler to fix earlier on honza's

00:23:38,540 --> 00:23:45,710
approach to benchmarks was creative

00:23:43,190 --> 00:23:47,390
shall we say people who ran benchmarks

00:23:45,710 --> 00:23:50,960
independently tended not to get the same

00:23:47,390 --> 00:23:53,360
results as constant he was approached to

00:23:50,960 --> 00:23:55,880
others in the community was wasn't

00:23:53,360 --> 00:23:57,680
agonistic if you questioned his work you

00:23:55,880 --> 00:23:59,270
tended to get put into the group of

00:23:57,680 --> 00:24:01,490
pupil who were conspiring to suppress

00:23:59,270 --> 00:24:02,960
and his work so she was various

00:24:01,490 --> 00:24:05,150
companies he didn't like who were

00:24:02,960 --> 00:24:07,820
obviously trying just to put his work

00:24:05,150 --> 00:24:09,500
down and so on it was a it was a very

00:24:07,820 --> 00:24:11,090
difficult thing to the point where a lot

00:24:09,500 --> 00:24:14,240
of people refused to talk to him anymore

00:24:11,090 --> 00:24:16,760
because they tended to get attacked and

00:24:14,240 --> 00:24:19,010
finally the episode with Brides are free

00:24:16,760 --> 00:24:20,030
that I three that I mentioned before was

00:24:19,010 --> 00:24:22,100
something that was still in people's

00:24:20,030 --> 00:24:24,620
mind and they were really afraid that

00:24:22,100 --> 00:24:26,510
the Hans was going to dump Reiser for

00:24:24,620 --> 00:24:29,690
into the kernel then go off with work on

00:24:26,510 --> 00:24:32,300
Reiser five and and not want to continue

00:24:29,690 --> 00:24:34,190
with the the stabilization and

00:24:32,300 --> 00:24:35,450
development of Reiser for for all of

00:24:34,190 --> 00:24:36,950
these reasons there was a whole lot of

00:24:35,450 --> 00:24:40,040
resistance to getting the code into the

00:24:36,950 --> 00:24:42,530
main line so so it never happened so the

00:24:40,040 --> 00:24:45,530
lessons from this serve are fairly clear

00:24:42,530 --> 00:24:47,240
Linux is not a research system there's a

00:24:45,530 --> 00:24:49,730
whole lot of very innovative work that

00:24:47,240 --> 00:24:51,590
goes into the Linux kernel but in the

00:24:49,730 --> 00:24:55,310
end this is a production system that is

00:24:51,590 --> 00:24:57,200
used for all kinds of real world use

00:24:55,310 --> 00:24:58,970
cases it's not something that you can

00:24:57,200 --> 00:25:00,600
just put any kind of wacky thing into

00:24:58,970 --> 00:25:02,730
and

00:25:00,600 --> 00:25:04,440
and expect to get away with it so if you

00:25:02,730 --> 00:25:06,750
are going to break from something like

00:25:04,440 --> 00:25:08,550
the POSIX standard then you have to do

00:25:06,750 --> 00:25:11,100
so very carefully in ways that don't

00:25:08,550 --> 00:25:15,900
break existing applications and so on is

00:25:11,100 --> 00:25:18,570
you have to be very careful with that no

00:25:15,900 --> 00:25:20,130
matter how brilliant you are and no

00:25:18,570 --> 00:25:22,980
matter what kind of mission you have and

00:25:20,130 --> 00:25:25,740
I don't know if his documents are still

00:25:22,980 --> 00:25:27,630
on the net this can I had a vision for

00:25:25,740 --> 00:25:30,270
where operating system should go that

00:25:27,630 --> 00:25:31,860
was quite well thought out and it may

00:25:30,270 --> 00:25:33,420
not be where you wanted to go but he

00:25:31,860 --> 00:25:36,540
really had a lot of interesting ideas

00:25:33,420 --> 00:25:38,190
but none of that will get you past an

00:25:36,540 --> 00:25:40,740
implementation that has technical

00:25:38,190 --> 00:25:42,300
problems no matter how brilliant it is

00:25:40,740 --> 00:25:44,670
if it's going to deadlock the computer

00:25:42,300 --> 00:25:48,210
then it's not going to make it in

00:25:44,670 --> 00:25:54,630
right you can't get past that conspiracy

00:25:48,210 --> 00:25:56,520
theories are not going to help you this

00:25:54,630 --> 00:25:58,380
this kind of thing happens fairly often

00:25:56,520 --> 00:25:59,850
we've seen some fairly recently on the

00:25:58,380 --> 00:26:02,010
kernel mailing list where people will

00:25:59,850 --> 00:26:04,470
say well you're just criticizing my

00:26:02,010 --> 00:26:07,590
patch because your employer doesn't want

00:26:04,470 --> 00:26:10,830
it in I won't say such things never

00:26:07,590 --> 00:26:13,050
happen because we're human and human

00:26:10,830 --> 00:26:14,370
things happen the kernel developers tend

00:26:13,050 --> 00:26:16,680
to think of themselves as kernel

00:26:14,370 --> 00:26:19,350
developers first and employees of

00:26:16,680 --> 00:26:20,760
whatever company second they think it's

00:26:19,350 --> 00:26:22,410
fairly likely that in five or ten years

00:26:20,760 --> 00:26:23,910
they'll still be working on the kernel

00:26:22,410 --> 00:26:26,340
but maybe working for some different

00:26:23,910 --> 00:26:28,200
company they're not really interested in

00:26:26,340 --> 00:26:30,060
compromising the kernel for any

00:26:28,200 --> 00:26:31,380
particular company's objectives even the

00:26:30,060 --> 00:26:34,430
one that's paying their paycheck right

00:26:31,380 --> 00:26:38,250
now so you don't see them very often

00:26:34,430 --> 00:26:40,650
incorporated conspiracies of this type

00:26:38,250 --> 00:26:42,630
going in if somebody starts accusing

00:26:40,650 --> 00:26:45,930
people of it that's usually a sign that

00:26:42,630 --> 00:26:47,010
the discussion is done and that they're

00:26:45,930 --> 00:26:50,430
not really going to get much further

00:26:47,010 --> 00:26:52,830
just don't do it then finally the

00:26:50,430 --> 00:26:55,950
community has a long memory and a long

00:26:52,830 --> 00:26:58,500
time higher horizon if you are posting

00:26:55,950 --> 00:27:00,180
code to go into the kernel people will

00:26:58,500 --> 00:27:02,340
always be thinking what will it be like

00:27:00,180 --> 00:27:04,470
to maintain this five or ten years from

00:27:02,340 --> 00:27:06,450
now because they know they're likely to

00:27:04,470 --> 00:27:07,860
be there in five or ten years and stuck

00:27:06,450 --> 00:27:09,900
with it so you're gonna want to know

00:27:07,860 --> 00:27:11,700
will you be there and maintain it what

00:27:09,900 --> 00:27:14,309
will this code do - our maintenance

00:27:11,700 --> 00:27:17,309
going forward and so on it's always

00:27:14,309 --> 00:27:19,109
always on people's minds and very

00:27:17,309 --> 00:27:30,139
strongly affects how people look at

00:27:19,109 --> 00:27:32,960
things all right systemtap back in 2003

00:27:30,139 --> 00:27:35,279
sun microsystems comes out with this

00:27:32,960 --> 00:27:36,960
kernel tracing can actually kernel in

00:27:35,279 --> 00:27:39,719
userspace tracing facility called d

00:27:36,960 --> 00:27:41,849
trace and then they give it a lot of

00:27:39,719 --> 00:27:43,499
publicity saying this is this is a great

00:27:41,849 --> 00:27:45,989
tool we have better visibility into how

00:27:43,499 --> 00:27:48,179
our system works than anybody else has

00:27:45,989 --> 00:27:51,109
and so certainly you want to run solaris

00:27:48,179 --> 00:27:53,429
instead of linux so this this of course

00:27:51,109 --> 00:27:56,070
inspired response within the community

00:27:53,429 --> 00:27:57,719
and within a couple of years we had an

00:27:56,070 --> 00:28:00,749
update to the Red Hat Enterprise Linux

00:27:57,719 --> 00:28:02,519
for that include the system tab which is

00:28:00,749 --> 00:28:04,889
a tool that did very much the same sorts

00:28:02,519 --> 00:28:07,469
of things that that DTrace does allows

00:28:04,889 --> 00:28:10,440
you to put probes into the kernel thus

00:28:07,469 --> 00:28:12,539
you do all kinds of complicated data

00:28:10,440 --> 00:28:14,070
collection aggregation statistics and so

00:28:12,539 --> 00:28:16,859
on trying to figure out what's going on

00:28:14,070 --> 00:28:19,769
with within your kernel so this was

00:28:16,859 --> 00:28:22,349
posted way back in 2005 but we never saw

00:28:19,769 --> 00:28:24,239
merged and said in 2008 we saw a

00:28:22,349 --> 00:28:27,330
different tracing facility much simpler

00:28:24,239 --> 00:28:29,429
thing called F trace put in in 2009 we

00:28:27,330 --> 00:28:31,169
saw per 5n switch is events collection

00:28:29,429 --> 00:28:33,029
statistics that sort of thing very

00:28:31,169 --> 00:28:35,519
different sort of development there was

00:28:33,029 --> 00:28:37,559
worse there even though last year

00:28:35,519 --> 00:28:40,139
actually not last year anymore but I'm

00:28:37,559 --> 00:28:42,239
in 2009 we have saw one dot o version of

00:28:40,139 --> 00:28:44,159
system tap and one not for just a few

00:28:42,239 --> 00:28:46,979
weeks ago I don't think we'll ever see a

00:28:44,159 --> 00:28:50,820
system tap in the mainline kernel which

00:28:46,979 --> 00:28:52,799
is fairly surprising given this is a

00:28:50,820 --> 00:28:54,599
development that had something like a

00:28:52,799 --> 00:28:55,109
dozen full-time engineers on it for

00:28:54,599 --> 00:28:57,089
years

00:28:55,109 --> 00:28:59,519
funded by a number of companies who were

00:28:57,089 --> 00:29:01,830
very core to to Linux development

00:28:59,519 --> 00:29:03,799
creating a facility that everybody

00:29:01,830 --> 00:29:06,659
really sort of acknowledged that we need

00:29:03,799 --> 00:29:12,479
so one wonders what's what's going on

00:29:06,659 --> 00:29:15,989
why why did this happen and the kids

00:29:12,479 --> 00:29:19,109
here if you think back to the 2008

00:29:15,989 --> 00:29:20,940
kernel summon this particular people

00:29:19,109 --> 00:29:23,309
here was asked how many of you have

00:29:20,940 --> 00:29:24,749
tried to use system town about half the

00:29:23,309 --> 00:29:26,849
people in the room raised their hands

00:29:24,749 --> 00:29:29,009
and then how many of you have actually

00:29:26,849 --> 00:29:32,580
succeeded in doing it and most of those

00:29:29,009 --> 00:29:35,339
hands went down right this group of

00:29:32,580 --> 00:29:37,440
people here is not just sort of any

00:29:35,339 --> 00:29:40,200
group of random users right this is the

00:29:37,440 --> 00:29:41,580
the top level of the kernel development

00:29:40,200 --> 00:29:43,710
community the people who can be invited

00:29:41,580 --> 00:29:48,479
to the kernel summit if they cannot make

00:29:43,710 --> 00:29:50,729
system tap work then this is a fairly

00:29:48,479 --> 00:29:55,589
bad sign with regard to the usability of

00:29:50,729 --> 00:29:57,509
your system all right and so Ingo Molnar

00:29:55,589 --> 00:29:59,879
kind of described it like this later on

00:29:57,509 --> 00:30:02,009
right then what you really have to do is

00:29:59,879 --> 00:30:04,320
to not concentrate on requirements drawn

00:30:02,009 --> 00:30:06,989
up by by management's or so on which is

00:30:04,320 --> 00:30:10,799
really what system tap was instead focus

00:30:06,989 --> 00:30:13,470
on usability and in particular usability

00:30:10,799 --> 00:30:15,029
for developers that's a key aspect of

00:30:13,470 --> 00:30:18,839
getting stuff into the kernel is

00:30:15,029 --> 00:30:21,690
usability for developers because if the

00:30:18,839 --> 00:30:23,460
kernel developers don't see the value of

00:30:21,690 --> 00:30:25,889
the code it's not going to go in

00:30:23,460 --> 00:30:28,739
regardless of what people management

00:30:25,889 --> 00:30:30,779
levels say this is usually a good thing

00:30:28,739 --> 00:30:32,460
that the developers make these decisions

00:30:30,779 --> 00:30:34,889
that it's not a management decision

00:30:32,460 --> 00:30:37,259
that's part of why I why the kernel is

00:30:34,889 --> 00:30:39,169
as good as it is sometimes it could be

00:30:37,259 --> 00:30:41,429
problematic because

00:30:39,169 --> 00:30:44,039
kernel developers like anybody else can

00:30:41,429 --> 00:30:48,440
be kind of myopic at times and will

00:30:44,039 --> 00:30:50,729
sometimes fail to to see things that

00:30:48,440 --> 00:30:53,609
really are needed even if it's not

00:30:50,729 --> 00:30:55,919
useful to them in particular so you know

00:30:53,609 --> 00:30:57,779
as one example of this we actually had a

00:30:55,919 --> 00:31:01,320
dynamic tracing facility that was posted

00:30:57,779 --> 00:31:03,779
for inclusion back in about 1999 but

00:31:01,320 --> 00:31:07,409
nobody saw any value in that and so that

00:31:03,779 --> 00:31:11,399
code languished and so on and we had to

00:31:07,409 --> 00:31:13,200
do it all over again ten years later so

00:31:11,399 --> 00:31:15,409
one just happens here's another example

00:31:13,200 --> 00:31:18,059
that kind of ties into the same thing

00:31:15,409 --> 00:31:19,919
back in 2008

00:31:18,059 --> 00:31:21,089
developer Red Hat came out and posted

00:31:19,919 --> 00:31:23,940
the thing that he called topo

00:31:21,089 --> 00:31:26,070
this was a subsystem that provided a new

00:31:23,940 --> 00:31:28,109
set of system calls allowing virus

00:31:26,070 --> 00:31:32,220
scanning malware scanning utilities to

00:31:28,109 --> 00:31:34,109
hook into in the system calls the idea

00:31:32,220 --> 00:31:36,479
being that if some process on the system

00:31:34,109 --> 00:31:38,140
opens a file then the virus scanner

00:31:36,479 --> 00:31:39,790
actually gets an event saying

00:31:38,140 --> 00:31:42,160
somebody's trying to open this file it

00:31:39,790 --> 00:31:44,080
can go and scan the file first if it

00:31:42,160 --> 00:31:45,790
doesn't find anything it dislikes and it

00:31:44,080 --> 00:31:48,370
says back to the kernel okay let that

00:31:45,790 --> 00:31:50,230
open proceed and and life goes on

00:31:48,370 --> 00:31:53,740
otherwise it can actually block the open

00:31:50,230 --> 00:31:56,710
of the file and not allow it so any of

00:31:53,740 --> 00:31:59,140
being block viruses as they passed the

00:31:56,710 --> 00:32:01,750
system so this didn't go in at all in

00:31:59,140 --> 00:32:06,700
fact um shall we say the reception was

00:32:01,750 --> 00:32:08,650
chilly because after all first of all

00:32:06,700 --> 00:32:11,320
Linux doesn't need virus scanners that's

00:32:08,650 --> 00:32:13,240
not really a security model that has

00:32:11,320 --> 00:32:15,670
much value on a Linux system we don't

00:32:13,240 --> 00:32:18,190
have that particular kind of problem so

00:32:15,670 --> 00:32:21,400
why should we people on me with broken

00:32:18,190 --> 00:32:22,960
security mod models now of course the

00:32:21,400 --> 00:32:25,900
real use of this was not to protect

00:32:22,960 --> 00:32:27,520
Linux systems it was to protect Windows

00:32:25,900 --> 00:32:28,450
systems that are mounting at male school

00:32:27,520 --> 00:32:31,090
or something like that

00:32:28,450 --> 00:32:33,430
this is on a samba exported file system

00:32:31,090 --> 00:32:36,460
that sort of thing so it goes beyond

00:32:33,430 --> 00:32:38,530
that but that again was not necessarily

00:32:36,460 --> 00:32:40,600
a use case that is interesting to linux

00:32:38,530 --> 00:32:42,700
kernel developers who are not really

00:32:40,600 --> 00:32:45,370
usually concerned with maintaining a lot

00:32:42,700 --> 00:32:47,680
of Windows systems out on the network

00:32:45,370 --> 00:32:49,150
beyond that the requirements were not

00:32:47,680 --> 00:32:50,710
expressed very well all right there was

00:32:49,150 --> 00:32:52,300
no threat model they couldn't really say

00:32:50,710 --> 00:32:54,910
what they're trying to defend against

00:32:52,300 --> 00:32:56,710
and in fact that sort of came into focus

00:32:54,910 --> 00:32:57,970
over the discussions and they focused on

00:32:56,710 --> 00:32:59,440
the solutions their needs their

00:32:57,970 --> 00:33:01,600
requirements said basically we need

00:32:59,440 --> 00:33:03,010
Talpa not we need to try to defend

00:33:01,600 --> 00:33:05,560
against this particular sort of thing

00:33:03,010 --> 00:33:07,270
that sort of thing so this this code

00:33:05,560 --> 00:33:10,810
went down in flames but if you look

00:33:07,270 --> 00:33:13,600
lighter on in August we saw the merger

00:33:10,810 --> 00:33:15,310
with thing called FA notify if a notify

00:33:13,600 --> 00:33:17,910
who is a set of system calls that

00:33:15,310 --> 00:33:20,800
provide hooks for antivirus scanners

00:33:17,910 --> 00:33:23,170
which sounds fairly familiar if you look

00:33:20,800 --> 00:33:25,600
at it so you might think okay well what

00:33:23,170 --> 00:33:27,220
changed here there are two things that

00:33:25,600 --> 00:33:28,630
were very different this was in fact the

00:33:27,220 --> 00:33:31,960
same code so one of the things that

00:33:28,630 --> 00:33:33,790
changed was the name huh to sort of

00:33:31,960 --> 00:33:36,550
leave behind the memories of what had

00:33:33,790 --> 00:33:40,150
come before but one of the things they

00:33:36,550 --> 00:33:41,920
had is this is essentially a file system

00:33:40,150 --> 00:33:43,870
you vet notification make isn't there's

00:33:41,920 --> 00:33:45,790
a Metascore we already have two of them

00:33:43,870 --> 00:33:47,710
in the kernel before if they notify one

00:33:45,790 --> 00:33:50,200
called D notify I'm only called I notify

00:33:47,710 --> 00:33:52,150
so we were adding a third one

00:33:50,200 --> 00:33:53,830
what the developer did is he went he

00:33:52,150 --> 00:33:55,690
cleaned up the existing event

00:33:53,830 --> 00:33:59,110
notification code which was pretty ugly

00:33:55,690 --> 00:34:01,390
and made it work for both of the

00:33:59,110 --> 00:34:03,370
existing mechanisms and for his as well

00:34:01,390 --> 00:34:05,830
so instead of having three we went back

00:34:03,370 --> 00:34:07,750
down to one core notification mechanism

00:34:05,830 --> 00:34:09,430
in the kernel and the other thing is

00:34:07,750 --> 00:34:11,320
that he rephrase the requirement so

00:34:09,430 --> 00:34:13,480
instead of saying we want to enable

00:34:11,320 --> 00:34:15,070
virus scanners we want to say we want

00:34:13,480 --> 00:34:17,170
them to hook into the system without

00:34:15,070 --> 00:34:18,310
using the route cat type techniques that

00:34:17,170 --> 00:34:19,840
they are using now because if you

00:34:18,310 --> 00:34:21,910
actually look at some of this commercial

00:34:19,840 --> 00:34:25,570
proprietary virus scanning code that

00:34:21,910 --> 00:34:27,100
people sell for Linux systems now it

00:34:25,570 --> 00:34:28,930
actually will go and patch into the

00:34:27,100 --> 00:34:30,700
system call table and do things that you

00:34:28,930 --> 00:34:32,800
normally associate with rootkits so that

00:34:30,700 --> 00:34:34,960
it can intercept system calls and do

00:34:32,800 --> 00:34:36,370
what it wants so that that's really ugly

00:34:34,960 --> 00:34:38,560
stuff that's not something we want to

00:34:36,370 --> 00:34:40,330
have happening so this allows that code

00:34:38,560 --> 00:34:42,790
which already exists which is out there

00:34:40,330 --> 00:34:44,200
to function without having to do that

00:34:42,790 --> 00:34:45,670
kind of nasty stuff and that's an

00:34:44,200 --> 00:34:48,640
improvement for everybody involved

00:34:45,670 --> 00:34:50,950
so by rephrasing the requirements and by

00:34:48,640 --> 00:34:53,670
cleaning things up he was able to get

00:34:50,950 --> 00:34:57,250
that code into the mainline kernel so

00:34:53,670 --> 00:34:59,770
the lessons from this sell your patches

00:34:57,250 --> 00:35:02,440
to the developers not not to the

00:34:59,770 --> 00:35:04,360
managers not to the customers you have

00:35:02,440 --> 00:35:05,920
to sell them to the developers and if

00:35:04,360 --> 00:35:07,780
you clean things up on the way then you

00:35:05,920 --> 00:35:09,970
build goodwill cleaning things up by the

00:35:07,780 --> 00:35:13,330
way does that mean white speights

00:35:09,970 --> 00:35:15,870
patches for anybody who's tempted to do

00:35:13,330 --> 00:35:20,620
that it means truly cleaning up the code

00:35:15,870 --> 00:35:23,110
so there's a few examples I could do a

00:35:20,620 --> 00:35:24,880
whole lot more if any of these interests

00:35:23,110 --> 00:35:27,070
you you can ask me during the question

00:35:24,880 --> 00:35:28,930
time and I can go into that but suffice

00:35:27,070 --> 00:35:32,980
to say that there's no shortage of

00:35:28,930 --> 00:35:35,050
examples out there so one can look at

00:35:32,980 --> 00:35:37,390
the history and say well we have an

00:35:35,050 --> 00:35:39,940
awful lot of examples of how things can

00:35:37,390 --> 00:35:42,640
go wrong when things go bad you might

00:35:39,940 --> 00:35:45,310
say well why bother why should we be

00:35:42,640 --> 00:35:46,810
concerned with why do I do with this

00:35:45,310 --> 00:35:48,160
deal with this when things can go wrong

00:35:46,810 --> 00:35:50,140
so easily

00:35:48,160 --> 00:35:52,980
and so I just wanted to talk briefly

00:35:50,140 --> 00:35:55,360
about that starting with the fact that

00:35:52,980 --> 00:35:57,910
for all that we have all these

00:35:55,360 --> 00:36:00,160
high-profile failures things don't go

00:35:57,910 --> 00:36:01,220
wrong that easily it's not as hard as it

00:36:00,160 --> 00:36:02,390
seems

00:36:01,220 --> 00:36:04,640
number that we're dealing with a

00:36:02,390 --> 00:36:06,680
development process that in every

00:36:04,640 --> 00:36:08,570
release cycle every 80 days or so

00:36:06,680 --> 00:36:12,440
because incorporating the work of over a

00:36:08,570 --> 00:36:13,910
thousand developers so every few months

00:36:12,440 --> 00:36:15,440
there's over a thousand people who

00:36:13,910 --> 00:36:18,470
succeed in getting their code into the

00:36:15,440 --> 00:36:20,869
kernel so clearly it can't be that hard

00:36:18,470 --> 00:36:24,820
the barriers cannot be that high if that

00:36:20,869 --> 00:36:24,820
many people are able to get this done

00:36:25,090 --> 00:36:32,720
more importantly it's fun alright as

00:36:29,599 --> 00:36:35,720
working in a reasonable free software

00:36:32,720 --> 00:36:40,340
project it's a good time you want to be

00:36:35,720 --> 00:36:42,500
a part of it but beyond that even though

00:36:40,340 --> 00:36:44,930
it's not that hard and even though it's

00:36:42,500 --> 00:36:46,970
fun it's still not a club that everybody

00:36:44,930 --> 00:36:48,530
can join it's something that you have to

00:36:46,970 --> 00:36:51,920
want to do it's something you have to

00:36:48,530 --> 00:36:56,840
work towards it is not sufficient to to

00:36:51,920 --> 00:36:58,220
simply look good in your swimsuit so if

00:36:56,840 --> 00:36:59,960
there's something that's fun to be part

00:36:58,220 --> 00:37:03,310
of and if it's something that you can

00:36:59,960 --> 00:37:05,960
turn to but certainly a path towards

00:37:03,310 --> 00:37:07,760
towards employment and such that the

00:37:05,960 --> 00:37:10,099
fact of the matter is and this has been

00:37:07,760 --> 00:37:11,690
true for some time that if you're if

00:37:10,099 --> 00:37:14,359
you've established an ability to get

00:37:11,690 --> 00:37:16,220
code into the kernel then people will

00:37:14,359 --> 00:37:18,020
come to you and they will throw jobs at

00:37:16,220 --> 00:37:20,150
you this kind of a nice thing if that's

00:37:18,020 --> 00:37:27,440
something that you're after gets a

00:37:20,150 --> 00:37:29,390
little tiring after a while perhaps most

00:37:27,440 --> 00:37:31,060
importantly of all the the message I

00:37:29,390 --> 00:37:33,530
kind of want to leave you with is that

00:37:31,060 --> 00:37:35,060
this is how you get the kernel to meet

00:37:33,530 --> 00:37:38,300
your needs this is how you drive it

00:37:35,060 --> 00:37:40,970
forward the kernel is really open to

00:37:38,300 --> 00:37:43,130
everybody who is willing to to push it

00:37:40,970 --> 00:37:44,300
forward in good directions and this is

00:37:43,130 --> 00:37:46,339
how you get it to where you want it to

00:37:44,300 --> 00:37:48,140
be this is your vote this is how you how

00:37:46,339 --> 00:37:49,910
our community works this is true of the

00:37:48,140 --> 00:37:53,660
kernel is true of every other process

00:37:49,910 --> 00:37:55,369
out or every other project out there you

00:37:53,660 --> 00:37:57,230
don't just sort of go and put in

00:37:55,369 --> 00:37:59,359
improvement requests or so on the way

00:37:57,230 --> 00:38:01,910
that you get things working the way you

00:37:59,359 --> 00:38:03,980
want them to be is to actually get your

00:38:01,910 --> 00:38:05,750
hands dirty and to get the code into the

00:38:03,980 --> 00:38:07,820
kernel so whether you're trying to

00:38:05,750 --> 00:38:09,950
simply make a device work or whether

00:38:07,820 --> 00:38:11,839
you're trying to enable some of the sort

00:38:09,950 --> 00:38:13,680
of freedom type technologies that evan

00:38:11,839 --> 00:38:15,840
Moglen was talking about yesterday

00:38:13,680 --> 00:38:17,730
this is how you do it this is how you

00:38:15,840 --> 00:38:22,680
get things to where you want them to be

00:38:17,730 --> 00:38:24,510
so I hope that that all of you will be

00:38:22,680 --> 00:38:26,520
inspired to do that to be a part of this

00:38:24,510 --> 00:38:28,860
to try to push things forward because

00:38:26,520 --> 00:38:30,480
after all in the immortal words of a

00:38:28,860 --> 00:38:35,400
former vice president of the United

00:38:30,480 --> 00:38:39,000
States if we don't succeed well then we

00:38:35,400 --> 00:38:40,530
run the risk of failure so I have a fair

00:38:39,000 --> 00:38:42,630
amount of time for questions and we'd be

00:38:40,530 --> 00:38:45,980
delighted to answer a few I assume we

00:38:42,630 --> 00:38:45,980
have somebody with a microphone so

00:39:03,720 --> 00:39:07,810
somebody mr. art but if there is any

00:39:06,280 --> 00:39:15,840
questions please raise your hand over

00:39:07,810 --> 00:39:18,340
there a front row yeah hello I know that

00:39:15,840 --> 00:39:21,010
some of a lot of your examples were from

00:39:18,340 --> 00:39:24,220
the 2.5 year of the kernel so do you

00:39:21,010 --> 00:39:26,290
think that having abandoned having long

00:39:24,220 --> 00:39:27,430
periods of instability has guarded

00:39:26,290 --> 00:39:31,360
against this kind of thing happening

00:39:27,430 --> 00:39:35,830
more recently I'm sorry I don't hear

00:39:31,360 --> 00:39:37,990
that very well as free eques a lot of

00:39:35,830 --> 00:39:40,570
your examples happened during the 2.5

00:39:37,990 --> 00:39:42,340
unstable phase of the kernel so do you

00:39:40,570 --> 00:39:45,190
think that abandoning beyond the stable

00:39:42,340 --> 00:39:46,420
phase what has meant that these kind of

00:39:45,190 --> 00:39:49,330
incidents will happen a lot less

00:39:46,420 --> 00:39:52,870
frequently okay so one of the examples

00:39:49,330 --> 00:39:55,930
happen during 2.5 but in fact really the

00:39:52,870 --> 00:39:57,700
only the IDE example is exclusively

00:39:55,930 --> 00:40:00,310
within the 2.5 development series

00:39:57,700 --> 00:40:04,140
everything else was taken from 2.6 and

00:40:00,310 --> 00:40:06,910
forward so the event of the old

00:40:04,140 --> 00:40:09,310
long-term unstable series has certainly

00:40:06,910 --> 00:40:11,680
changed the process and made certain

00:40:09,310 --> 00:40:13,420
things different for example much reduce

00:40:11,680 --> 00:40:15,100
the tolerance for regressions and so on

00:40:13,420 --> 00:40:19,290
because we just don't have the time to

00:40:15,100 --> 00:40:21,610
fix them that we used to but otherwise I

00:40:19,290 --> 00:40:25,930
don't think it's changed much other than

00:40:21,610 --> 00:40:32,230
that other than just bringing things to

00:40:25,930 --> 00:40:35,440
the fore more quickly so what what hi

00:40:32,230 --> 00:40:38,160
over here but somebody's out there sad

00:40:35,440 --> 00:40:38,160
don't worry

00:40:38,860 --> 00:40:44,230
so which category to the Android wait

00:40:42,010 --> 00:40:47,580
locks pull into is that the badly

00:40:44,230 --> 00:40:50,260
described requirements category or

00:40:47,580 --> 00:40:52,450
wakelocks okay I'm wait clock sirs to

00:40:50,260 --> 00:40:54,760
sun blockers I could do an entire talk

00:40:52,450 --> 00:40:56,800
on that in fact if you look Matthew

00:40:54,760 --> 00:40:59,590
Garrett did do an entire talk in Linux

00:40:56,800 --> 00:41:03,430
con and the video of that is online for

00:40:59,590 --> 00:41:05,530
people who really want the want the full

00:41:03,430 --> 00:41:06,310
details of that the real failure with

00:41:05,530 --> 00:41:09,130
wakelocks

00:41:06,310 --> 00:41:10,540
who is out of tree development where

00:41:09,130 --> 00:41:13,220
they actually when they develop this

00:41:10,540 --> 00:41:16,020
this feature for the Android system

00:41:13,220 --> 00:41:18,540
off in their own corner without

00:41:16,020 --> 00:41:20,400
involving the community and all and most

00:41:18,540 --> 00:41:23,040
importantly they ship this feature to

00:41:20,400 --> 00:41:24,930
users before they ever proposed it for

00:41:23,040 --> 00:41:27,000
for merging into the kernel there are a

00:41:24,930 --> 00:41:29,160
whole lot of problems with wakelocks the

00:41:27,000 --> 00:41:32,970
way they were originally developed they

00:41:29,160 --> 00:41:35,490
were they were insecure they required a

00:41:32,970 --> 00:41:37,980
lot of change drivers and so on nobody

00:41:35,490 --> 00:41:40,710
really liked the the way that way clock

00:41:37,980 --> 00:41:42,540
works so way clocks work so they had to

00:41:40,710 --> 00:41:43,860
change which creates all kinds of

00:41:42,540 --> 00:41:45,420
compatibility problems with your

00:41:43,860 --> 00:41:47,910
existing user space when you have to

00:41:45,420 --> 00:41:49,830
make those changes there's been a lot of

00:41:47,910 --> 00:41:51,750
trouble trying to come up with with a

00:41:49,830 --> 00:41:53,640
suitable replacement we actually I

00:41:51,750 --> 00:41:55,260
believe have a good replacement for wake

00:41:53,640 --> 00:41:57,780
locks in the mainline kernel now

00:41:55,260 --> 00:41:59,220
although the Android people have not yet

00:41:57,780 --> 00:42:01,530
really looked at it or committed to

00:41:59,220 --> 00:42:03,630
using it so hopefully we'll have a happy

00:42:01,530 --> 00:42:05,220
ending to that story if you want more

00:42:03,630 --> 00:42:08,190
details on that either look at Matthew

00:42:05,220 --> 00:42:13,320
stock or or look at the the stuff that's

00:42:08,190 --> 00:42:15,960
been written on lwn about that of all

00:42:13,320 --> 00:42:17,370
the things that you listed both that you

00:42:15,960 --> 00:42:19,590
talked about and that you just put in

00:42:17,370 --> 00:42:22,860
your list which of them in your personal

00:42:19,590 --> 00:42:24,530
opinion is the most significant loss to

00:42:22,860 --> 00:42:30,270
the kernel and to the Linux community

00:42:24,530 --> 00:42:31,500
which is the most significant loss hard

00:42:30,270 --> 00:42:34,650
to say I mean they all represent

00:42:31,500 --> 00:42:36,540
significant losses in a way but I was in

00:42:34,650 --> 00:42:39,000
my mind I still really regret the loss

00:42:36,540 --> 00:42:41,970
of conk Olivos because I think he was

00:42:39,000 --> 00:42:43,590
trying to to work for a constituency

00:42:41,970 --> 00:42:46,020
that doesn't always get the the

00:42:43,590 --> 00:42:47,370
attention that it needs to have and so

00:42:46,020 --> 00:42:49,710
on he was trying to do interesting

00:42:47,370 --> 00:42:52,680
things and I wish you were still a part

00:42:49,710 --> 00:42:53,910
of our community so then that's perhaps

00:42:52,680 --> 00:42:58,590
at the top of my list but I think

00:42:53,910 --> 00:43:01,110
they're all significant John on a lot of

00:42:58,590 --> 00:43:03,720
your examples I it seems like a

00:43:01,110 --> 00:43:05,430
recurring theme is once something either

00:43:03,720 --> 00:43:07,710
doesn't get merged or it's obvious that

00:43:05,430 --> 00:43:09,240
it's not going to get merged it sort of

00:43:07,710 --> 00:43:11,880
leads to the sooner rather than later

00:43:09,240 --> 00:43:14,370
kind of death of it it seemed like the

00:43:11,880 --> 00:43:16,310
one counterexample in there was was

00:43:14,370 --> 00:43:19,110
system tap that didn't get merged yet

00:43:16,310 --> 00:43:21,330
still got to a 1.0 is there something

00:43:19,110 --> 00:43:23,280
about that that makes it an anomaly that

00:43:21,330 --> 00:43:25,260
it lived on even when it became obvious

00:43:23,280 --> 00:43:26,050
that wouldn't get merged or is it sort

00:43:25,260 --> 00:43:34,210
of just a matter

00:43:26,050 --> 00:43:36,610
time oh that's um well part of that is

00:43:34,210 --> 00:43:39,670
is relatively easy to answer because

00:43:36,610 --> 00:43:42,760
systemtap for all its failings is in

00:43:39,670 --> 00:43:44,860
fact very useful to the support staffs

00:43:42,760 --> 00:43:47,350
behind Enterprise Linux distributions

00:43:44,860 --> 00:43:49,120
alright it comes it works out of the box

00:43:47,350 --> 00:43:52,450
when it is packaged with an Enterprise

00:43:49,120 --> 00:43:54,130
Linux distribution and and the technical

00:43:52,450 --> 00:43:56,680
support behind it can make use of it and

00:43:54,130 --> 00:43:59,410
they like it for that reason the

00:43:56,680 --> 00:44:01,200
companies and the specific company when

00:43:59,410 --> 00:44:03,520
you know well I suspect um

00:44:01,200 --> 00:44:05,170
continues to put resources behind the

00:44:03,520 --> 00:44:07,230
development of system tab it will

00:44:05,170 --> 00:44:09,100
probably support it for some time yet

00:44:07,230 --> 00:44:12,340
there's there's there's a certain

00:44:09,100 --> 00:44:14,500
commercial interest there and in a in

00:44:12,340 --> 00:44:18,310
that sort of very rigidly defined

00:44:14,500 --> 00:44:20,050
environment beyond that a lot of the

00:44:18,310 --> 00:44:21,910
development resources that went in the

00:44:20,050 --> 00:44:23,950
system tab has has been removed and put

00:44:21,910 --> 00:44:25,720
into other things but I think systemtap

00:44:23,950 --> 00:44:27,340
will continue under its own momentum for

00:44:25,720 --> 00:44:30,430
some time because it does serve a need

00:44:27,340 --> 00:44:31,540
that some people have we are getting to

00:44:30,430 --> 00:44:33,280
the point where the other tracing

00:44:31,540 --> 00:44:35,050
facilities can fill that in but we're

00:44:33,280 --> 00:44:38,140
probably a few years from really

00:44:35,050 --> 00:44:45,100
replacing system tap for the needs of of

00:44:38,140 --> 00:44:46,930
that particular use case so there's a

00:44:45,100 --> 00:44:50,140
general pattern I've seen in open source

00:44:46,930 --> 00:44:52,990
projects where older established

00:44:50,140 --> 00:44:54,670
projects that are very popular become

00:44:52,990 --> 00:44:57,700
very very conservative and refuse

00:44:54,670 --> 00:44:59,440
changes that would deceive destabilize

00:44:57,700 --> 00:45:01,690
all the features that they have existing

00:44:59,440 --> 00:45:04,930
users that appreciate so how do you

00:45:01,690 --> 00:45:06,520
prevent requirements like not being able

00:45:04,930 --> 00:45:08,980
to change the scheduler unless you can

00:45:06,520 --> 00:45:11,380
prove everyone on earth nobody has a

00:45:08,980 --> 00:45:13,330
performance degradation anywhere how do

00:45:11,380 --> 00:45:15,610
you prevent requirements like that from

00:45:13,330 --> 00:45:18,760
me leading stagnation and eventually

00:45:15,610 --> 00:45:20,680
usually projects get very very

00:45:18,760 --> 00:45:23,200
conservative and stagnate until another

00:45:20,680 --> 00:45:24,880
project comes along and and they can try

00:45:23,200 --> 00:45:29,500
experimental things because they don't

00:45:24,880 --> 00:45:31,600
have that baggage how you go forward in

00:45:29,500 --> 00:45:34,330
a situation like that can indeed be a

00:45:31,600 --> 00:45:38,650
problem with something like a scheduler

00:45:34,330 --> 00:45:39,440
the only thing you can do is to to have

00:45:38,650 --> 00:45:41,300
to

00:45:39,440 --> 00:45:43,940
extensively under all kinds of workloads

00:45:41,300 --> 00:45:46,250
and see if people don't screen for long

00:45:43,940 --> 00:45:50,030
enough for certain other sorts of things

00:45:46,250 --> 00:45:51,730
like the user space ABI we really just

00:45:50,030 --> 00:45:55,760
don't allow ourselves to break it ever

00:45:51,730 --> 00:45:57,950
so if change would break applications

00:45:55,760 --> 00:46:03,380
with a few exceptions it just can't go

00:45:57,950 --> 00:46:05,660
in at least not without a migration path

00:46:03,380 --> 00:46:06,800
that can take at least five years till

00:46:05,660 --> 00:46:08,870
you get to the point where you're really

00:46:06,800 --> 00:46:10,820
convinced that nobody is using it

00:46:08,870 --> 00:46:13,580
anymore we take the that don't break

00:46:10,820 --> 00:46:15,260
things rule quite seriously to the point

00:46:13,580 --> 00:46:18,380
that you can still run a dot outbound

00:46:15,260 --> 00:46:19,850
binaries from the pre 1 dot X days and

00:46:18,380 --> 00:46:21,770
if you've got the libraries around for

00:46:19,850 --> 00:46:23,120
them they'll still work right very

00:46:21,770 --> 00:46:24,530
careful about that there's a bit of a

00:46:23,120 --> 00:46:28,520
straitjacket at the times it does

00:46:24,530 --> 00:46:30,110
constrain how we can do things but you

00:46:28,520 --> 00:46:32,120
know we want the lace to be useful going

00:46:30,110 --> 00:46:33,800
forward and more importantly we want

00:46:32,120 --> 00:46:36,320
people to upgrade the current kernels

00:46:33,800 --> 00:46:38,360
for all kinds of reasons so we will

00:46:36,320 --> 00:46:40,130
continue to be very careful about that

00:46:38,360 --> 00:46:41,420
and yes that slows certain things down

00:46:40,130 --> 00:46:43,310
but it hasn't

00:46:41,420 --> 00:46:45,560
I don't think stop the process yet I

00:46:43,310 --> 00:46:51,730
think we'll continue to keep things

00:46:45,560 --> 00:46:55,880
going hi John during Monta Vista vision

00:46:51,730 --> 00:46:59,720
2008 we spoke and then we talked about

00:46:55,880 --> 00:47:02,930
your device drivers book and we are now

00:46:59,720 --> 00:47:06,830
almost three years later I think you

00:47:02,930 --> 00:47:08,930
decided not to do a new book there will

00:47:06,830 --> 00:47:13,400
be a new device driver book I am working

00:47:08,930 --> 00:47:15,710
with the other day authors trying to

00:47:13,400 --> 00:47:17,510
figure out a model for publishing a book

00:47:15,710 --> 00:47:19,430
for something that changes as quickly as

00:47:17,510 --> 00:47:24,020
the kernel does in ways that don't go

00:47:19,430 --> 00:47:25,790
obsolete I'm hoping or boys that are

00:47:24,020 --> 00:47:29,210
maintainable let's put it that way so

00:47:25,790 --> 00:47:31,340
I'm hoping to have something to say at

00:47:29,210 --> 00:47:32,720
least within the next few months but I'm

00:47:31,340 --> 00:47:34,940
not quite ready to say how that's gonna

00:47:32,720 --> 00:47:37,730
work yet but yeah something will happen

00:47:34,940 --> 00:47:40,610
because a book that describes to 6/10 is

00:47:37,730 --> 00:47:43,510
of limited utility in in the current

00:47:40,610 --> 00:47:43,510
world this at least

00:47:47,590 --> 00:47:52,040
are there any more questions

00:47:49,730 --> 00:47:54,350
I think we can talk for hours with Rick

00:47:52,040 --> 00:47:56,360
Jonathan but one sadly foursome is

00:47:54,350 --> 00:47:57,950
almost over so before you leave I want

00:47:56,360 --> 00:48:01,690
to give the floor to Matias but first

00:47:57,950 --> 00:48:01,690

YouTube URL: https://www.youtube.com/watch?v=MzCIBZONf5M


