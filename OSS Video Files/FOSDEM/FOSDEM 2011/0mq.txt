Title: 0mq
Publication date: 2011-12-22
Playlist: FOSDEM 2011
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:06,440 --> 00:00:13,219
zeromq my name is Peter Hitchens I'd

00:00:10,430 --> 00:00:14,719
like to start by thanking the FA's dem

00:00:13,219 --> 00:00:16,060
team for their organization this is an

00:00:14,719 --> 00:00:18,800
amazing event

00:00:16,060 --> 00:00:20,689
when I started programming open source

00:00:18,800 --> 00:00:22,939
in like nineteen ninety or something we

00:00:20,689 --> 00:00:24,800
were marginal and today we're mainstream

00:00:22,939 --> 00:00:26,329
and the events like this you know bring

00:00:24,800 --> 00:00:31,489
us together and to exchange ideas it's

00:00:26,329 --> 00:00:34,909
really fantastic okay so today I'm going

00:00:31,489 --> 00:00:37,570
to give you just one idea which is about

00:00:34,909 --> 00:00:39,750
have one way of building large

00:00:37,570 --> 00:00:41,880
applications

00:00:39,750 --> 00:00:43,080
concurrent applications parallel

00:00:41,880 --> 00:00:45,870
applications multi-storey of

00:00:43,080 --> 00:00:47,760
applications applications that do a lot

00:00:45,870 --> 00:00:53,010
of work and that need for that a lot of

00:00:47,760 --> 00:00:54,630
course boxes whatever basically what I

00:00:53,010 --> 00:00:56,850
will argue is that everything that we've

00:00:54,630 --> 00:00:58,860
been taught in the universities and with

00:00:56,850 --> 00:01:00,720
all respect to universities in the last

00:00:58,860 --> 00:01:03,629
30 40 years about doing this is

00:01:00,720 --> 00:01:07,320
completely wrong and I will explain the

00:01:03,629 --> 00:01:08,940
right way of doing it okay so a law

00:01:07,320 --> 00:01:11,160
about concurrency the flesh has been

00:01:08,940 --> 00:01:13,860
vented this a couple of weeks ago it's

00:01:11,160 --> 00:01:16,140
very original equals MC squared the the

00:01:13,860 --> 00:01:18,509
effort that it takes to build a system

00:01:16,140 --> 00:01:21,360
is a function of the mass versus eyes

00:01:18,509 --> 00:01:22,890
the system times the square of the

00:01:21,360 --> 00:01:26,970
number of conflicts between parts of the

00:01:22,890 --> 00:01:28,320
system so most systems most simple

00:01:26,970 --> 00:01:30,420
systems like you know a tool to do a

00:01:28,320 --> 00:01:34,289
flash programming there's no conflict

00:01:30,420 --> 00:01:36,090
it's one program doing one thing as we

00:01:34,289 --> 00:01:38,460
build larger applications we start

00:01:36,090 --> 00:01:43,009
having to share information in some way

00:01:38,460 --> 00:01:43,009
and the traditional way of doing that is

00:01:43,040 --> 00:01:49,530
to share data between threads and we get

00:01:46,409 --> 00:01:51,540
this curve at least in my opinion just

00:01:49,530 --> 00:01:53,700
among can disprove this where the effort

00:01:51,540 --> 00:01:56,960
goes up exponentially as we get more and

00:01:53,700 --> 00:01:56,960
more work on the same data

00:01:57,369 --> 00:02:02,930
now we all start very happily with

00:01:59,750 --> 00:02:05,149
simple programs doing simple work and we

00:02:02,930 --> 00:02:08,989
start with no conflict well let's say

00:02:05,149 --> 00:02:11,510
one conflict equals 11 thread the

00:02:08,989 --> 00:02:12,950
problem is that over time if system

00:02:11,510 --> 00:02:15,410
works then we're asked to make it bigger

00:02:12,950 --> 00:02:17,780
and handle more get bigger in capacity

00:02:15,410 --> 00:02:22,790
we start going into multithreading and

00:02:17,780 --> 00:02:24,620
we end up basically here you know one of

00:02:22,790 --> 00:02:26,690
these series in IT is a pain is a bad

00:02:24,620 --> 00:02:28,849
sign an effort is a bad sign thing

00:02:26,690 --> 00:02:30,500
should be easier not harder and when

00:02:28,849 --> 00:02:32,239
things take a lot of pain a lot of

00:02:30,500 --> 00:02:33,650
effort you know this is like whoa stop

00:02:32,239 --> 00:02:36,500
this is wrong there's something wrong

00:02:33,650 --> 00:02:37,760
here and the problem with multithreading

00:02:36,500 --> 00:02:39,860
as we learn it in school and university

00:02:37,760 --> 00:02:42,049
and as we're taught by basically every

00:02:39,860 --> 00:02:43,910
vendor is that the more you try to scale

00:02:42,049 --> 00:02:49,430
your system the more pain it takes the

00:02:43,910 --> 00:02:51,880
more effort it takes exponentially the

00:02:49,430 --> 00:02:54,019
reason for this in my opinion is the

00:02:51,880 --> 00:02:55,519
traditional multithreading concurrency

00:02:54,019 --> 00:02:58,760
is based on the theory that is a global

00:02:55,519 --> 00:03:00,950
market for five thousand computers and

00:02:58,760 --> 00:03:03,380
you know we take the computer is a very

00:03:00,950 --> 00:03:04,850
big serious thing and then we then we

00:03:03,380 --> 00:03:06,019
multitask around that thing and we try

00:03:04,850 --> 00:03:09,350
to share the data that the computer

00:03:06,019 --> 00:03:10,880
represents so is this notion that your

00:03:09,350 --> 00:03:12,920
data structure is central then your

00:03:10,880 --> 00:03:15,079
threads have to access that somehow and

00:03:12,920 --> 00:03:16,519
that's concurrency this is what I was

00:03:15,079 --> 00:03:18,859
taught University okay that was a long

00:03:16,519 --> 00:03:20,870
time ago but it's still what you'll get

00:03:18,859 --> 00:03:22,880
when you buy a tool from Intel or when

00:03:20,870 --> 00:03:27,049
you look at how to program concurrency

00:03:22,880 --> 00:03:29,060
in fact to be any modern language so

00:03:27,049 --> 00:03:31,310
what you know what we've been taught is

00:03:29,060 --> 00:03:34,280
that concurrency is dead up share

00:03:31,310 --> 00:03:37,970
between threads where it were not really

00:03:34,280 --> 00:03:40,400
Houston and in this part it's thinking

00:03:37,970 --> 00:03:42,260
of concurrency as multiple boxes or

00:03:40,400 --> 00:03:44,930
multiple processes this is kind of new I

00:03:42,260 --> 00:03:46,459
know that modern browsers now start to

00:03:44,930 --> 00:03:47,720
have a process per tab rather than a

00:03:46,459 --> 00:03:50,120
thread per tab this is a new way of

00:03:47,720 --> 00:03:51,590
thinking so we have these threads that

00:03:50,120 --> 00:03:54,530
then try to share data and they try to

00:03:51,590 --> 00:03:56,239
prevent conflicts to the same data so

00:03:54,530 --> 00:03:59,019
they use locks they use semaphores and

00:03:56,239 --> 00:04:02,090
this code basically fails by default

00:03:59,019 --> 00:04:04,340
when you share data it seems to work as

00:04:02,090 --> 00:04:06,019
you scale it fails so you're building

00:04:04,340 --> 00:04:08,210
systems that are that are not fail safe

00:04:06,019 --> 00:04:09,500
they are going to fail by default

00:04:08,210 --> 00:04:11,780
the more you load your system the more

00:04:09,500 --> 00:04:12,770
it fails the more you make a parallel

00:04:11,780 --> 00:04:14,750
the more it feels this is really

00:04:12,770 --> 00:04:17,690
terrible and you're diminishing returns

00:04:14,750 --> 00:04:20,450
hits at about 4 or 8 threads depending

00:04:17,690 --> 00:04:22,340
on how much effort you put into it so I

00:04:20,450 --> 00:04:26,120
considers to be bogus if I'm actually

00:04:22,340 --> 00:04:30,650
totally insane the ideal world what we

00:04:26,120 --> 00:04:33,590
want is that we start with cheap and we

00:04:30,650 --> 00:04:35,540
end with cheap and this isn't a dream

00:04:33,590 --> 00:04:37,940
this is just a matter of deciding you

00:04:35,540 --> 00:04:42,170
know where we're tired of 30 years of

00:04:37,940 --> 00:04:43,550
autocracy you know democracy go Egypt we

00:04:42,170 --> 00:04:46,610
want to end up with basically a

00:04:43,550 --> 00:04:47,720
democratic liberal system and what very

00:04:46,610 --> 00:04:48,860
few people do know is that there is

00:04:47,720 --> 00:04:51,230
actually a model forest called the

00:04:48,860 --> 00:04:54,110
actual model which I rediscovered myself

00:04:51,230 --> 00:04:56,510
you know maybe like a year ago we kind

00:04:54,110 --> 00:04:58,160
of reinvented this for 40 mq now that's

00:04:56,510 --> 00:05:00,050
a model is actually 40 years old almost

00:04:58,160 --> 00:05:02,420
which is really tragic completely

00:05:00,050 --> 00:05:03,950
ignored by mainstream programming and

00:05:02,420 --> 00:05:06,280
it's based on the theory that there are

00:05:03,950 --> 00:05:10,340
lots of computers and they're cheap

00:05:06,280 --> 00:05:11,720
which is actually where we are today the

00:05:10,340 --> 00:05:13,700
key thing about it is that there are

00:05:11,720 --> 00:05:15,020
thousands and thousands of computers are

00:05:13,700 --> 00:05:17,660
very cheap and they're connected by a

00:05:15,020 --> 00:05:20,660
very fast very efficient and cheap

00:05:17,660 --> 00:05:22,700
communications infrastructure think

00:05:20,660 --> 00:05:24,530
about that for a second if you can get

00:05:22,700 --> 00:05:25,910
this then you're your conflict is one no

00:05:24,530 --> 00:05:27,800
conflict you have one thread at any

00:05:25,910 --> 00:05:31,970
point accessing one piece of data there

00:05:27,800 --> 00:05:34,100
are no locks the only modern language of

00:05:31,970 --> 00:05:38,390
any size and import that does this is

00:05:34,100 --> 00:05:39,920
airline and airline is weird and you

00:05:38,390 --> 00:05:40,970
know it's a good language for doing

00:05:39,920 --> 00:05:42,860
certain things that having to learn a

00:05:40,970 --> 00:05:46,480
weird language to do basically

00:05:42,860 --> 00:05:46,480
mainstream workers is not good either

00:05:47,850 --> 00:05:52,240
so the basic I mean the actual model is

00:05:50,170 --> 00:05:53,890
really quite simple think of boxes

00:05:52,240 --> 00:05:56,350
sending messages to each other you know

00:05:53,890 --> 00:05:58,420
it's a mobile phone sending messages to

00:05:56,350 --> 00:06:01,030
other mobile phones via whatever this is

00:05:58,420 --> 00:06:03,160
an actor model basically and this is

00:06:01,030 --> 00:06:04,450
this model is based originally on the

00:06:03,160 --> 00:06:06,220
physical world where there are lots of

00:06:04,450 --> 00:06:08,380
things that are all independent and it

00:06:06,220 --> 00:06:11,170
doesn't match the way that you know I T

00:06:08,380 --> 00:06:13,660
is going which is hundreds of billions

00:06:11,170 --> 00:06:15,430
of computers connected in in in weird

00:06:13,660 --> 00:06:16,540
ways and if you can manage those

00:06:15,430 --> 00:06:19,240
connections you can build applications

00:06:16,540 --> 00:06:22,930
that distribute over hundreds thousands

00:06:19,240 --> 00:06:25,780
tens of thousands of computers so what

00:06:22,930 --> 00:06:28,090
are the ingredients for a successful you

00:06:25,780 --> 00:06:30,100
know concurrent architecture you need

00:06:28,090 --> 00:06:32,290
lots of cheap boxes but we have this

00:06:30,100 --> 00:06:33,910
today boxes are really cheap you can get

00:06:32,290 --> 00:06:36,310
threads you can get processed as you can

00:06:33,910 --> 00:06:38,020
get Korres you can get Amazon it boxes

00:06:36,310 --> 00:06:39,850
are very very cheap there's no longer

00:06:38,020 --> 00:06:43,510
the requirement to share a box this is

00:06:39,850 --> 00:06:45,460
as old we have that we have tools to

00:06:43,510 --> 00:06:47,560
build contractual api's now you know

00:06:45,460 --> 00:06:49,090
when you start talking between boxes you

00:06:47,560 --> 00:06:50,730
want some formality about what you're

00:06:49,090 --> 00:06:54,280
sending you can't just send random data

00:06:50,730 --> 00:06:55,810
the level of formality depends on how

00:06:54,280 --> 00:06:58,300
important your system is you can make it

00:06:55,810 --> 00:07:00,880
quite ad hoc or very very formalized

00:06:58,300 --> 00:07:02,890
with parsing of messages and schemas

00:07:00,880 --> 00:07:04,930
that can generate parsers and get very

00:07:02,890 --> 00:07:07,290
sophisticated we have this we have tools

00:07:04,930 --> 00:07:09,720
to make any level of meta that we need

00:07:07,290 --> 00:07:12,040
and we need a high-performance network

00:07:09,720 --> 00:07:14,560
and it's really shocking but no one's

00:07:12,040 --> 00:07:16,000
ever made this before it's really weird

00:07:14,560 --> 00:07:17,380
you'd think this would be like you know

00:07:16,000 --> 00:07:19,300
a main thing to make but no one actually

00:07:17,380 --> 00:07:20,380
ever made this you could buy commercial

00:07:19,300 --> 00:07:24,400
products that did this but they're very

00:07:20,380 --> 00:07:26,170
expensive which excludes all of us or

00:07:24,400 --> 00:07:28,180
you can get tools that do certain things

00:07:26,170 --> 00:07:30,970
but they're limited but actually a

00:07:28,180 --> 00:07:34,510
generic communication infrastructure is

00:07:30,970 --> 00:07:35,920
a was a new thing and and so we have 0

00:07:34,510 --> 00:07:39,040
mq which is basically fast and cheap

00:07:35,920 --> 00:07:42,090
networking between threads processes

00:07:39,040 --> 00:07:45,480
course boxes

00:07:42,090 --> 00:07:48,840
and so my argument is that 0 mq gives

00:07:45,480 --> 00:07:50,520
you c equals 1 so you you pay your

00:07:48,840 --> 00:07:52,740
effort according to the mass of your

00:07:50,520 --> 00:07:55,770
program and that's it yet you can build

00:07:52,740 --> 00:07:58,229
highly concurrent systems with this you

00:07:55,770 --> 00:08:00,120
can connect threads to threads threads

00:07:58,229 --> 00:08:03,120
to processes processes to boxes using

00:08:00,120 --> 00:08:04,650
the same API using the same model which

00:08:03,120 --> 00:08:07,350
is basically a kind of a socket style

00:08:04,650 --> 00:08:09,030
API you say talk to this piece send it

00:08:07,350 --> 00:08:11,550
messages and it will send entire

00:08:09,030 --> 00:08:14,190
messages for you it transports blobs

00:08:11,550 --> 00:08:15,450
there's no notion in zeromq about the

00:08:14,190 --> 00:08:18,000
contract that's up to use it as a

00:08:15,450 --> 00:08:21,900
developer matter has these things called

00:08:18,000 --> 00:08:23,400
messaging patterns which are more or

00:08:21,900 --> 00:08:25,770
less natural ways of connecting pieces

00:08:23,400 --> 00:08:28,770
pops up is distributing data pipeline

00:08:25,770 --> 00:08:30,690
distributes work request reply is about

00:08:28,770 --> 00:08:32,400
getting reliability in there and are

00:08:30,690 --> 00:08:34,830
these basic patterns is three or four or

00:08:32,400 --> 00:08:36,630
five which cover ninety-five percent of

00:08:34,830 --> 00:08:39,479
all messaging and all communications in

00:08:36,630 --> 00:08:41,099
this respect so when you start looking

00:08:39,479 --> 00:08:44,039
at zeromq it's kind of weird it's a

00:08:41,099 --> 00:08:45,779
small library they're not very big it

00:08:44,039 --> 00:08:49,080
does a lot it connects nothing it's like

00:08:45,779 --> 00:08:50,339
20 languages 25 languages with api's and

00:08:49,080 --> 00:08:53,730
it takes maybe a day to make a new

00:08:50,339 --> 00:08:55,200
language api when you write when you

00:08:53,730 --> 00:08:56,730
look at motoring applications in here in

00:08:55,200 --> 00:08:58,020
più there are no locks no semaphores

00:08:56,730 --> 00:08:59,610
what you have our tasks that take

00:08:58,020 --> 00:09:01,830
messages process them and distribute

00:08:59,610 --> 00:09:03,180
further messages using the simple API

00:09:01,830 --> 00:09:06,209
and it's shocking how easy it is to

00:09:03,180 --> 00:09:07,770
write code like this it's shocking i

00:09:06,209 --> 00:09:10,080
mean i've written motor dead code and

00:09:07,770 --> 00:09:12,360
spent you know 18 months debugging

00:09:10,080 --> 00:09:14,520
applications that were supposed to run

00:09:12,360 --> 00:09:15,959
on for eight cores and the more we

00:09:14,520 --> 00:09:17,790
stressed it the more it crashed and we

00:09:15,959 --> 00:09:20,339
spent you know i spend i spent nights

00:09:17,790 --> 00:09:22,830
debugging conflicts that's why i have no

00:09:20,339 --> 00:09:25,200
hair left and with cmq you know you

00:09:22,830 --> 00:09:27,120
write code and it works and you write it

00:09:25,200 --> 00:09:28,350
on one box using a few threads then you

00:09:27,120 --> 00:09:30,209
put it on the processes it's the same

00:09:28,350 --> 00:09:31,470
code it still works that you break it

00:09:30,209 --> 00:09:33,270
across boxes in the same code and it

00:09:31,470 --> 00:09:34,709
still works and then you you load it and

00:09:33,270 --> 00:09:37,830
you hit it with data and the thing still

00:09:34,709 --> 00:09:40,200
works and this is really shocking

00:09:37,830 --> 00:09:42,600
and you can score to any number of

00:09:40,200 --> 00:09:43,680
course you know where we're building us

00:09:42,600 --> 00:09:46,440
you know the kind of thing that we do is

00:09:43,680 --> 00:09:49,170
0 mq is build stock exchanges where you

00:09:46,440 --> 00:09:50,670
have tens of thousands of course then

00:09:49,170 --> 00:09:54,960
you're processing tens of millions

00:09:50,670 --> 00:09:57,120
messages per second this is unimaginable

00:09:54,960 --> 00:09:58,530
than any other in any other way and yet

00:09:57,120 --> 00:10:00,090
the cost of building systems is not

00:09:58,530 --> 00:10:02,910
hundreds of millions of dollars it's

00:10:00,090 --> 00:10:07,530
it's it's you know single figures of

00:10:02,910 --> 00:10:08,970
millions of dollars thank you so this

00:10:07,530 --> 00:10:11,010
idea i'm going to give you today is very

00:10:08,970 --> 00:10:13,320
simple concurrent systems parallel

00:10:11,010 --> 00:10:15,570
systems are a very big part of our

00:10:13,320 --> 00:10:18,270
future and IT this is you want to

00:10:15,570 --> 00:10:20,760
exploit this course you cannot accept if

00:10:18,270 --> 00:10:22,200
in some niche cases keep software

00:10:20,760 --> 00:10:24,090
running on one core software is

00:10:22,200 --> 00:10:26,340
distributed the world is distributed and

00:10:24,090 --> 00:10:28,410
as programmers we need tools to make the

00:10:26,340 --> 00:10:30,720
speech the distribution work those tools

00:10:28,410 --> 00:10:32,640
didn't exist until a few years ago the

00:10:30,720 --> 00:10:34,710
zeromq is one of the best obviously

00:10:32,640 --> 00:10:37,500
because you know my community made it

00:10:34,710 --> 00:10:38,400
it's GPL open source has been in

00:10:37,500 --> 00:10:41,190
development for about three or four

00:10:38,400 --> 00:10:43,920
years it's based on our experience

00:10:41,190 --> 00:10:45,210
making communication software for the

00:10:43,920 --> 00:10:48,270
financial industry where they have this

00:10:45,210 --> 00:10:49,800
problem but really we wanted to make

00:10:48,270 --> 00:10:52,470
this an open source tool it's a

00:10:49,800 --> 00:10:54,510
successful community 70 people on IRC at

00:10:52,470 --> 00:10:57,390
any particular time of active mailing

00:10:54,510 --> 00:11:00,210
lists many contributors which is really

00:10:57,390 --> 00:11:03,780
nice API is in every possible language

00:11:00,210 --> 00:11:05,130
it runs every possible system about I

00:11:03,780 --> 00:11:08,580
mattox we've been doing free software

00:11:05,130 --> 00:11:10,470
for about 20 years I guess and you know

00:11:08,580 --> 00:11:13,110
we do protocols communities that's what

00:11:10,470 --> 00:11:14,490
really i like doing we turn zeromq over

00:11:13,110 --> 00:11:15,870
to the community last year and said look

00:11:14,490 --> 00:11:18,510
you know everyone owns this we don't

00:11:15,870 --> 00:11:20,160
going to take control of it if if i die

00:11:18,510 --> 00:11:21,510
or if my company's bought it won't

00:11:20,160 --> 00:11:22,790
affect the software it's owned by its

00:11:21,510 --> 00:11:26,400
community which is very important step

00:11:22,790 --> 00:11:27,630
the lgpl like i said and and then we

00:11:26,400 --> 00:11:30,750
make our money from support which is

00:11:27,630 --> 00:11:34,110
quite a nice business model so we have

00:11:30,750 --> 00:11:35,430
that was a quick talk right and we have

00:11:34,110 --> 00:11:36,769
five minutes for questions if you have

00:11:35,430 --> 00:11:39,879
questions

00:11:36,769 --> 00:11:39,879
gentlemen in red

00:11:44,869 --> 00:11:53,879
two questions how would you compare to

00:11:49,230 --> 00:11:58,170
Stephen's right he was probably slow i

00:11:53,879 --> 00:12:00,059
guess and the other one is how about

00:11:58,170 --> 00:12:03,059
processing images for example in as

00:12:00,059 --> 00:12:04,889
multiple co-op right one english ok

00:12:03,059 --> 00:12:07,350
we'll go quickly so first of all zeromq

00:12:04,889 --> 00:12:08,939
vs d bus the second question how do you

00:12:07,350 --> 00:12:11,309
distribute work for example image

00:12:08,939 --> 00:12:12,359
processing saudi bus is a product which

00:12:11,309 --> 00:12:15,029
does a certain thing it connects

00:12:12,359 --> 00:12:17,069
processes and threads in one box now

00:12:15,029 --> 00:12:18,660
you'll see much overlap between 0 mq and

00:12:17,069 --> 00:12:20,699
other messaging systems there's not a

00:12:18,660 --> 00:12:22,379
new concept to connect pieces what's

00:12:20,699 --> 00:12:24,749
your in queue is where it special is its

00:12:22,379 --> 00:12:26,699
its generosity you can connect pieces

00:12:24,749 --> 00:12:29,189
with a processes be their boxes video

00:12:26,699 --> 00:12:32,399
threads using the same API you can use

00:12:29,189 --> 00:12:34,139
different transports TCP multicast into

00:12:32,399 --> 00:12:37,319
process into thread using the same API

00:12:34,139 --> 00:12:39,149
so you write code one time which is

00:12:37,319 --> 00:12:40,739
conceptually based of tasks you put the

00:12:39,149 --> 00:12:42,509
start screen anywhere you like then you

00:12:40,739 --> 00:12:44,399
distribute them tasks don't change

00:12:42,509 --> 00:12:46,499
that's the big difference it's really

00:12:44,399 --> 00:12:47,850
aimed for scaling out applications to

00:12:46,499 --> 00:12:51,179
any size rather than building them on

00:12:47,850 --> 00:12:53,459
one box second question about processing

00:12:51,179 --> 00:12:54,929
images this is a classic workload

00:12:53,459 --> 00:12:57,079
distribution case and it's a classic

00:12:54,929 --> 00:13:00,419
case of using many cores to do the work

00:12:57,079 --> 00:13:02,850
one cpu takes one second to process one

00:13:00,419 --> 00:13:04,139
image and your client wants to process a

00:13:02,850 --> 00:13:07,230
thousand the second just advertising

00:13:04,139 --> 00:13:09,899
CPUs so typically zeromq architecture

00:13:07,230 --> 00:13:11,999
you'd have a first point where work

00:13:09,899 --> 00:13:13,350
comes in and it distributes it to nodes

00:13:11,999 --> 00:13:14,519
that do work and then they will send

00:13:13,350 --> 00:13:16,649
back the results and you send it back

00:13:14,519 --> 00:13:18,169
classic architecture very simple to

00:13:16,649 --> 00:13:21,089
build a zeromq it will take you maybe

00:13:18,169 --> 00:13:22,560
half a day to make this in python maybe

00:13:21,089 --> 00:13:24,779
two hours

00:13:22,560 --> 00:13:28,110
next question from somebody gentlemen

00:13:24,779 --> 00:13:33,720
translate yes all the end points

00:13:28,110 --> 00:13:35,560
five if you have you won't set up a

00:13:33,720 --> 00:13:38,620
message to

00:13:35,560 --> 00:13:42,089
the pipeline to 20 frozen scan that

00:13:38,620 --> 00:13:44,670
process move or is it fixed

00:13:42,089 --> 00:13:46,019
what I suggest you do to understand here

00:13:44,670 --> 00:13:48,269
and cute little bit better is to read

00:13:46,019 --> 00:13:49,920
the the user guide I wrote it's called

00:13:48,269 --> 00:13:52,410
there's a blizzard as a book called the

00:13:49,920 --> 00:13:53,670
guide and it explains the basic patterns

00:13:52,410 --> 00:13:55,709
how they work it's got lots of examples

00:13:53,670 --> 00:13:57,779
in every single possible language and

00:13:55,709 --> 00:14:00,089
you will see how to build basic

00:13:57,779 --> 00:14:02,069
applications using zeromq that's a good

00:14:00,089 --> 00:14:05,730
starting point you around somewhere

00:14:02,069 --> 00:14:07,019
working and I will stay outside here for

00:14:05,730 --> 00:14:08,639
the next half an hour so if you have

00:14:07,019 --> 00:14:12,889
questions feel free to come and find me

00:14:08,639 --> 00:14:12,889

YouTube URL: https://www.youtube.com/watch?v=Unx2dpgEaI8


