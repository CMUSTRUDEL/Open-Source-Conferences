Title: cyassl
Publication date: 2011-12-22
Playlist: FOSDEM 2011
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:06,480 --> 00:00:10,130
we're stefana come with

00:00:10,490 --> 00:00:20,450
we we oftentimes hear things like yah

00:00:15,830 --> 00:00:29,060
SSL or Y azle we answer to any of the

00:00:20,450 --> 00:00:31,220
above and that's not working other 10

00:00:29,060 --> 00:00:33,230
you have to point it at the black thing

00:00:31,220 --> 00:00:37,730
okay i will now point it at the black

00:00:33,230 --> 00:00:39,500
thing so the quick story of the talk is

00:00:37,730 --> 00:00:42,170
that i'll talk a little bit about basic

00:00:39,500 --> 00:00:45,620
information for ssl with some assumption

00:00:42,170 --> 00:00:48,170
that you've heard about ssl before and

00:00:45,620 --> 00:00:50,720
then go into specifics on what's

00:00:48,170 --> 00:00:53,089
different about our implementation you

00:00:50,720 --> 00:00:57,110
may know the the most widely used

00:00:53,089 --> 00:00:59,510
implementation of SSL is open SSL and

00:00:57,110 --> 00:01:02,989
we'll talk mainly about what's different

00:00:59,510 --> 00:01:04,549
between that one and ours primarily

00:01:02,989 --> 00:01:07,400
because that's the one people understand

00:01:04,549 --> 00:01:09,260
if there is time we'll talk about the

00:01:07,400 --> 00:01:12,170
azle embedded web server which we've

00:01:09,260 --> 00:01:16,009
implemented primarily because are

00:01:12,170 --> 00:01:19,460
embedded users needed it's basically the

00:01:16,009 --> 00:01:21,770
HTTP protocol implemented for embedded

00:01:19,460 --> 00:01:23,119
systems and then we'll talk about some

00:01:21,770 --> 00:01:28,479
of the funner projects that we're doing

00:01:23,119 --> 00:01:30,560
with with C azle the basics about our

00:01:28,479 --> 00:01:34,039
project i'll tell you the project

00:01:30,560 --> 00:01:36,200
Genesis was originally to go into mysql

00:01:34,039 --> 00:01:40,069
that was the first and the biggest user

00:01:36,200 --> 00:01:44,810
of the azle technology to secure between

00:01:40,069 --> 00:01:47,090
clients and servers for for mysql but we

00:01:44,810 --> 00:01:49,520
also targeted the technology at the

00:01:47,090 --> 00:01:51,409
embedded in real-time operating systems

00:01:49,520 --> 00:01:53,899
environments so we're operating system

00:01:51,409 --> 00:01:57,619
lists environments in the case you need

00:01:53,899 --> 00:02:00,350
to run SSL and secure your data coming

00:01:57,619 --> 00:02:03,620
from a very low powered sensor type

00:02:00,350 --> 00:02:06,770
device up to the cloud for example

00:02:03,620 --> 00:02:09,350
our focus is on size and speed we try

00:02:06,770 --> 00:02:13,490
and be minimalists we support the

00:02:09,350 --> 00:02:17,110
minimal of the spec that is widely used

00:02:13,490 --> 00:02:20,300
which means we apply Occam's razor

00:02:17,110 --> 00:02:22,910
liberally to the implementation of SSL

00:02:20,300 --> 00:02:25,220
to keep it small and keep it also very

00:02:22,910 --> 00:02:26,840
portable but we are very good at

00:02:25,220 --> 00:02:28,160
supporting the industry standards and

00:02:26,840 --> 00:02:32,690
I'll talk I think I have a slide later

00:02:28,160 --> 00:02:35,750
on about that licensing wise were GPL as

00:02:32,690 --> 00:02:37,970
well as commercially licensed we are

00:02:35,750 --> 00:02:40,850
what we call dual licensed which means

00:02:37,970 --> 00:02:44,000
we as a company and a project on the

00:02:40,850 --> 00:02:45,830
copyright and for those cuts for those

00:02:44,000 --> 00:02:48,500
users that can't tolerate the terms of

00:02:45,830 --> 00:02:50,240
the GPL we sell commercial licenses and

00:02:48,500 --> 00:02:54,250
that's how we fund the project

00:02:50,240 --> 00:02:57,260
development we also support or include

00:02:54,250 --> 00:03:00,130
flossed exceptions which is free

00:02:57,260 --> 00:03:03,650
software foundation approved for

00:03:00,130 --> 00:03:06,350
implementing GPL based libraries inside

00:03:03,650 --> 00:03:09,530
of say MIT or berkeley-based berkeley

00:03:06,350 --> 00:03:13,040
licensed projects without having the GPL

00:03:09,530 --> 00:03:14,989
kind of take over we've been around

00:03:13,040 --> 00:03:17,150
since 2004's when we start did the

00:03:14,989 --> 00:03:19,820
original implementation single source

00:03:17,150 --> 00:03:22,340
space since then same development team

00:03:19,820 --> 00:03:23,720
working on it since that time and

00:03:22,340 --> 00:03:26,420
probably the big point on this slide

00:03:23,720 --> 00:03:28,640
that we like to point out is that we're

00:03:26,420 --> 00:03:32,450
just a whole lot smaller where's my

00:03:28,640 --> 00:03:34,040
pointer then openssl so about 20 times

00:03:32,450 --> 00:03:38,750
smaller and the sizes are on the next

00:03:34,040 --> 00:03:41,810
slide starting with the the standards

00:03:38,750 --> 00:03:43,610
we're supporting up to TLS 1.2 there's

00:03:41,810 --> 00:03:46,750
only a couple other projects that are

00:03:43,610 --> 00:03:50,930
supporting that level of the TLS

00:03:46,750 --> 00:03:53,180
standard we also support DTLS Datagram

00:03:50,930 --> 00:03:56,600
TLS and both of those standards are

00:03:53,180 --> 00:03:58,670
useful in some of the newer uses of the

00:03:56,600 --> 00:04:01,130
internet which specifically means

00:03:58,670 --> 00:04:03,489
streaming media a lot of the old SSL

00:04:01,130 --> 00:04:06,170
implementations were really good at

00:04:03,489 --> 00:04:07,910
dealing with static web pages going

00:04:06,170 --> 00:04:10,010
across the internet encrypting those and

00:04:07,910 --> 00:04:12,829
securing those we like to think our

00:04:10,010 --> 00:04:13,890
implementation of SSL is really good if

00:04:12,829 --> 00:04:16,570
not the best

00:04:13,890 --> 00:04:19,150
implementation for dealing with

00:04:16,570 --> 00:04:21,940
streaming media so that means video or

00:04:19,150 --> 00:04:24,340
voice a lot of our users think so too so

00:04:21,940 --> 00:04:26,890
we're ending up in things like voice

00:04:24,340 --> 00:04:31,240
over IP phones IP telephony that sort of

00:04:26,890 --> 00:04:32,620
thing and sometimes gaming as well you

00:04:31,240 --> 00:04:34,300
can see the size is there we're pretty

00:04:32,620 --> 00:04:36,940
small we're about as small as it can get

00:04:34,300 --> 00:04:38,680
some guys on the open wrt project got it

00:04:36,940 --> 00:04:44,740
smaller I think they got it down for

00:04:38,680 --> 00:04:46,750
their purposes to about 15k in size we

00:04:44,740 --> 00:04:49,750
do keep our API simple again applying

00:04:46,750 --> 00:04:51,960
Occam's razor and we think that's a

00:04:49,750 --> 00:04:54,970
strength of the product we make this

00:04:51,960 --> 00:04:57,730
form of security easy to use at least

00:04:54,970 --> 00:05:00,580
from the programmatic level by making it

00:04:57,730 --> 00:05:05,920
as simple as possible we also we also

00:05:00,580 --> 00:05:07,720
those support the openssl API and a

00:05:05,920 --> 00:05:11,170
limited subset I think there's four

00:05:07,720 --> 00:05:13,120
thousand or so functions available and

00:05:11,170 --> 00:05:16,450
open SSL so it's fairly complex we

00:05:13,120 --> 00:05:18,570
support 400 of those four projects

00:05:16,450 --> 00:05:25,720
essentially for projects that need to

00:05:18,570 --> 00:05:27,669
pour it over from openssl to azle we're

00:05:25,720 --> 00:05:30,700
very big on hardware optimization so

00:05:27,669 --> 00:05:32,919
we've done a lot of optimization of down

00:05:30,700 --> 00:05:35,520
to the assembly level for pic32 chips

00:05:32,919 --> 00:05:39,250
for example a lot of the ARM chip sets

00:05:35,520 --> 00:05:47,380
more recently we did a ESN I which is

00:05:39,250 --> 00:05:48,460
for the new intel server chipsets we're

00:05:47,380 --> 00:05:50,919
pretty excited about some of the new

00:05:48,460 --> 00:05:52,630
cipher suites that we're supporting all

00:05:50,919 --> 00:05:54,610
the ones in grey or kind of the standard

00:05:52,630 --> 00:05:58,060
stuff but the the new interesting ones

00:05:54,610 --> 00:06:00,190
to us or rabbit in HC 128 I talked about

00:05:58,060 --> 00:06:01,630
streaming media a minute ago these are

00:06:00,190 --> 00:06:04,390
some of the new ciphers for streaming

00:06:01,630 --> 00:06:06,390
media and they're super fast when you

00:06:04,390 --> 00:06:09,340
you're dealing with streaming media

00:06:06,390 --> 00:06:11,110
today to believe we're the only SSL

00:06:09,340 --> 00:06:14,080
implementation that has implemented

00:06:11,110 --> 00:06:17,440
these types of streaming ciphers and the

00:06:14,080 --> 00:06:19,060
results are pretty dramatic as much as

00:06:17,440 --> 00:06:21,520
you know depending on the system course

00:06:19,060 --> 00:06:24,340
as much as fifty seventy percent

00:06:21,520 --> 00:06:26,380
improvement sometimes even a multiple if

00:06:24,340 --> 00:06:27,850
you're on an underpowered CPU

00:06:26,380 --> 00:06:30,990
they can be pretty meaningful if you're

00:06:27,850 --> 00:06:33,760
trying to stream video in a secure way

00:06:30,990 --> 00:06:35,590
we also have we have the ability of

00:06:33,760 --> 00:06:37,210
course anybody with some code has the

00:06:35,590 --> 00:06:39,400
ability to add their own site we've

00:06:37,210 --> 00:06:43,750
modular eyes to the point where adding

00:06:39,400 --> 00:06:45,970
your own cipher to 2y azle can be fairly

00:06:43,750 --> 00:06:49,540
easy and we tried to make it as

00:06:45,970 --> 00:06:52,930
pluggable as possible so there are some

00:06:49,540 --> 00:06:56,050
proprietary cipher suites available as

00:06:52,930 --> 00:06:58,000
well in C azle and if you follow our

00:06:56,050 --> 00:06:59,710
project you'll see announcements about

00:06:58,000 --> 00:07:03,490
that sort of thing and in the coming

00:06:59,710 --> 00:07:06,100
months another thing that we talked

00:07:03,490 --> 00:07:07,840
about is the ability to work without an

00:07:06,100 --> 00:07:11,170
operating system we do have a lot of

00:07:07,840 --> 00:07:12,820
people using us in sensor based type

00:07:11,170 --> 00:07:16,690
environments which means say you're

00:07:12,820 --> 00:07:18,910
you're deploying x millions of chips to

00:07:16,690 --> 00:07:22,870
sense the amount of electricity going

00:07:18,910 --> 00:07:25,720
out of or into X million households so

00:07:22,870 --> 00:07:28,240
you really want to minimize the cost of

00:07:25,720 --> 00:07:31,630
that device that you put into a

00:07:28,240 --> 00:07:34,270
household hence the the follow-on

00:07:31,630 --> 00:07:35,950
requirement of not having the overhead

00:07:34,270 --> 00:07:38,980
of an operating system and not having

00:07:35,950 --> 00:07:40,590
the overhead of an expensive SSL and

00:07:38,980 --> 00:07:44,470
cryptography can get pretty expensive

00:07:40,590 --> 00:07:48,760
but we've we've made our product and

00:07:44,470 --> 00:07:51,070
project easy too easy to run without an

00:07:48,760 --> 00:07:53,830
operating system to the point of

00:07:51,070 --> 00:07:59,590
actually not even needing the standard C

00:07:53,830 --> 00:08:03,160
library to to build it so which I

00:07:59,590 --> 00:08:05,050
already mentioned TLS 1.2 support some

00:08:03,160 --> 00:08:06,450
of the the other projects that are doing

00:08:05,050 --> 00:08:08,710
that one of the limitations of

00:08:06,450 --> 00:08:13,210
supporting the newest and greatest in

00:08:08,710 --> 00:08:15,910
the TLS standard is the ability to test

00:08:13,210 --> 00:08:17,740
against others right now I think the

00:08:15,910 --> 00:08:20,050
only ones we can test against are the

00:08:17,740 --> 00:08:21,730
new TLS guys which also have an

00:08:20,050 --> 00:08:23,890
excellent project and then the Opera

00:08:21,730 --> 00:08:27,310
browser but that's it right now in terms

00:08:23,890 --> 00:08:28,870
of TLS 1.2 support for whatever reason I

00:08:27,310 --> 00:08:31,350
can report to you that the industry is

00:08:28,870 --> 00:08:33,450
starting to pick up this level

00:08:31,350 --> 00:08:36,060
the protocol and there seems to be a lot

00:08:33,450 --> 00:08:38,280
of demand in the last couple of quarters

00:08:36,060 --> 00:08:42,200
the last six months or so there's been a

00:08:38,280 --> 00:08:45,180
lot more demand for TLS 1.2 support

00:08:42,200 --> 00:08:46,590
especially in telephony type

00:08:45,180 --> 00:08:50,340
environments high in telephony

00:08:46,590 --> 00:08:52,650
environments so one of one of the

00:08:50,340 --> 00:08:55,350
funnest projects we did last summer was

00:08:52,650 --> 00:08:56,940
with memcache if you're in the web space

00:08:55,350 --> 00:09:00,870
you probably know what memcache is it's

00:08:56,940 --> 00:09:03,600
a distributed memory manager we we were

00:09:00,870 --> 00:09:05,810
wondering what about securing this

00:09:03,600 --> 00:09:09,030
distributed memory manager and and what

00:09:05,810 --> 00:09:12,180
what could we what kind of performance

00:09:09,030 --> 00:09:13,980
would we get specifically when you go

00:09:12,180 --> 00:09:18,090
secure something like this that's sort

00:09:13,980 --> 00:09:20,610
of driven to be a performance beast so

00:09:18,090 --> 00:09:24,060
if you look on the far left yes it's

00:09:20,610 --> 00:09:28,550
your left this is memcache running

00:09:24,060 --> 00:09:30,720
without any encryption this is the

00:09:28,550 --> 00:09:33,780
benchmark running directly against a

00:09:30,720 --> 00:09:35,670
MySQL database the interesting things to

00:09:33,780 --> 00:09:37,520
note here is that roughly then this is

00:09:35,670 --> 00:09:39,840
run on like maybe a three year old Mac

00:09:37,520 --> 00:09:42,060
this particular benchmark so it's kind

00:09:39,840 --> 00:09:45,600
of relative if you're running on a

00:09:42,060 --> 00:09:47,130
brand-new high-performance server then

00:09:45,600 --> 00:09:49,500
these kind of gets squished together

00:09:47,130 --> 00:09:51,520
relatively especially if you're running

00:09:49,500 --> 00:09:55,490
our I ESN I

00:09:51,520 --> 00:09:59,840
hardware encryption but what we thought

00:09:55,490 --> 00:10:03,140
was interesting is how well the the

00:09:59,840 --> 00:10:04,700
stream ciphers performed relative to

00:10:03,140 --> 00:10:06,590
some of the older and more standard

00:10:04,700 --> 00:10:12,650
ciphers so you can see they work pretty

00:10:06,590 --> 00:10:14,420
good another project and that we're

00:10:12,650 --> 00:10:17,690
really interested in because we've had a

00:10:14,420 --> 00:10:20,360
lot of users doing it for themselves and

00:10:17,690 --> 00:10:23,390
rolling their own with C azle as the key

00:10:20,360 --> 00:10:25,250
component is building out systems for

00:10:23,390 --> 00:10:27,560
secure firmware updates and to do that

00:10:25,250 --> 00:10:29,210
you're going to need something like well

00:10:27,560 --> 00:10:32,510
you're going to need an SSL essentially

00:10:29,210 --> 00:10:34,510
on the device to roll to be able to roll

00:10:32,510 --> 00:10:39,020
out your firmware updates to the device

00:10:34,510 --> 00:10:42,440
and we've also seen a certain number of

00:10:39,020 --> 00:10:43,820
attacks based on on people taking over

00:10:42,440 --> 00:10:47,300
the device or getting their own firmware

00:10:43,820 --> 00:10:49,190
on the device or getting the malicious

00:10:47,300 --> 00:10:51,560
firmware built on our setup on the

00:10:49,190 --> 00:10:54,620
device so secure firmware updates is

00:10:51,560 --> 00:10:56,180
becoming a bigger and bigger issue part

00:10:54,620 --> 00:10:58,190
of the reason we're here cause them is

00:10:56,180 --> 00:11:00,410
we want to talk up this issue we're

00:10:58,190 --> 00:11:01,580
actually seeking collaborators people

00:11:00,410 --> 00:11:03,590
who are interested in this problem

00:11:01,580 --> 00:11:05,060
essentially what we'd like to build out

00:11:03,590 --> 00:11:09,950
as a project and we have the kind of the

00:11:05,060 --> 00:11:13,850
base form for it is a an open-source

00:11:09,950 --> 00:11:15,470
secure firmware update system and that

00:11:13,850 --> 00:11:16,820
means something on the server side the

00:11:15,470 --> 00:11:19,670
keeps track of who's update and who's

00:11:16,820 --> 00:11:22,760
not and it keeps it also means using

00:11:19,670 --> 00:11:24,500
something like see azle on the device

00:11:22,760 --> 00:11:27,290
side but building kind of an agent

00:11:24,500 --> 00:11:28,670
around it for doing the updating and

00:11:27,290 --> 00:11:30,980
like I said we've had plenty of our

00:11:28,670 --> 00:11:34,580
users doing this but we have yet to roll

00:11:30,980 --> 00:11:36,140
it out as an actual project but it is

00:11:34,580 --> 00:11:39,209
forthcoming from us and we are seeking

00:11:36,140 --> 00:11:41,680
collaborators on this

00:11:39,209 --> 00:11:45,490
more recently just talking about new

00:11:41,680 --> 00:11:48,610
features we've added a certificate

00:11:45,490 --> 00:11:50,019
generation to see as well so you can

00:11:48,610 --> 00:11:52,480
make your own keys you can be your own

00:11:50,019 --> 00:11:55,240
certificate authority if you want to

00:11:52,480 --> 00:11:56,920
start your own certificate business and

00:11:55,240 --> 00:11:59,709
go compete with verisign and you see

00:11:56,920 --> 00:12:03,430
azle to do it you can but more more

00:11:59,709 --> 00:12:06,220
likely you're you're not requiring the

00:12:03,430 --> 00:12:10,930
authority of your not requiring an

00:12:06,220 --> 00:12:13,269
external Authority and are in a position

00:12:10,930 --> 00:12:15,610
to generate your own certificates and

00:12:13,269 --> 00:12:17,110
keys and use them but that's that's

00:12:15,610 --> 00:12:21,670
probably the newest kind of biggest

00:12:17,110 --> 00:12:23,760
thing we've done to the technology one

00:12:21,670 --> 00:12:27,490
thing we found out in the course of

00:12:23,760 --> 00:12:29,250
managing our project is every month or

00:12:27,490 --> 00:12:31,860
so somebody else wants us to integrate

00:12:29,250 --> 00:12:34,779
see as a link to an embedded web server

00:12:31,860 --> 00:12:36,610
we decided to sort of centralized those

00:12:34,779 --> 00:12:38,579
efforts we've poured it in into state

00:12:36,610 --> 00:12:41,440
lady we've poured it into engine acts

00:12:38,579 --> 00:12:44,560
and a couple others and some proprietary

00:12:41,440 --> 00:12:46,420
ones but we really like the Mongoose

00:12:44,560 --> 00:12:47,860
embedded web server so we centralized

00:12:46,420 --> 00:12:50,860
our efforts around that and that's what

00:12:47,860 --> 00:12:52,779
we recommend and we've actually built

00:12:50,860 --> 00:12:56,589
out additional features and contribute

00:12:52,779 --> 00:12:58,240
to that project as well if you're in the

00:12:56,589 --> 00:13:00,190
market for an embedded web server and

00:12:58,240 --> 00:13:02,440
you want it to be open source we can't

00:13:00,190 --> 00:13:03,850
think of a better one to work with these

00:13:02,440 --> 00:13:05,769
guys are doing a really good job and

00:13:03,850 --> 00:13:11,529
it's one of our key collaborators for

00:13:05,769 --> 00:13:12,910
for the azle project so you can see

00:13:11,529 --> 00:13:14,589
basically what the I'm running out of

00:13:12,910 --> 00:13:16,120
time but here's the standard features

00:13:14,589 --> 00:13:19,389
you get with the azle embedded web

00:13:16,120 --> 00:13:21,399
server which is again derived from the

00:13:19,389 --> 00:13:23,529
mongoose project but it's all the basic

00:13:21,399 --> 00:13:25,750
stuff again applying Occam's razor for

00:13:23,529 --> 00:13:31,480
when you need an embedded web server on

00:13:25,750 --> 00:13:34,870
a device a list of the environments that

00:13:31,480 --> 00:13:38,649
we support by show of hands are there

00:13:34,870 --> 00:13:41,170
any Tron users out there okay I thought

00:13:38,649 --> 00:13:43,329
so it's very fairly esoteric and used

00:13:41,170 --> 00:13:44,649
primarily in Japan for you're probably

00:13:43,329 --> 00:13:46,209
trying users out there but they're on

00:13:44,649 --> 00:13:47,450
some device that's sitting in there in

00:13:46,209 --> 00:13:50,660
there

00:13:47,450 --> 00:13:53,330
room somewhere another project we're

00:13:50,660 --> 00:13:56,630
seeking collaborators on is Seattle

00:13:53,330 --> 00:13:58,520
running on a GPU we think cryptography

00:13:56,630 --> 00:14:01,730
is an interesting way to leverage the

00:13:58,520 --> 00:14:04,460
and harness the power of of GPUs we've

00:14:01,730 --> 00:14:06,500
done some initial porting opencl is also

00:14:04,460 --> 00:14:10,220
kind of young so we've run into fair

00:14:06,500 --> 00:14:14,420
number of bugs porting our cryptography

00:14:10,220 --> 00:14:18,440
over 22 opencl on the GPU but that's

00:14:14,420 --> 00:14:19,970
that's in in progress and we do expect

00:14:18,440 --> 00:14:21,770
that we'll release something and we're

00:14:19,970 --> 00:14:28,030
we're sneaking people that want to join

00:14:21,770 --> 00:14:30,920
us in that effort and the black thing

00:14:28,030 --> 00:14:32,540
how's that embedded SSL used here's some

00:14:30,920 --> 00:14:34,670
examples we ported this thing into

00:14:32,540 --> 00:14:37,790
printers I talked about sensors earlier

00:14:34,670 --> 00:14:39,350
tell a pharmacy more recently so the

00:14:37,790 --> 00:14:40,940
doctor walking around giving you a

00:14:39,350 --> 00:14:42,530
prescription and that going somewhere

00:14:40,940 --> 00:14:45,740
that sort of thing needs to be secured

00:14:42,530 --> 00:14:48,020
with ssl IP telephony we've been out for

00:14:45,740 --> 00:14:51,050
a number of years more recently people

00:14:48,020 --> 00:14:53,680
both commercial primarily commercial

00:14:51,050 --> 00:14:56,450
video game manufacturers are starting to

00:14:53,680 --> 00:14:58,460
to integrate this stuff and with that

00:14:56,450 --> 00:15:00,550
I'm finished thank you for your

00:14:58,460 --> 00:15:00,550

YouTube URL: https://www.youtube.com/watch?v=IIvz_itAXy8


