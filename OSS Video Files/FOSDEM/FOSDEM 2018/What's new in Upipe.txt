Title: What's new in Upipe
Publication date: 2018-02-03
Playlist: FOSDEM 2018
Description: 
	by Rafaël Carré

At: FOSDEM 2018
Room: H.1309 (Van Rijn)
Scheduled start: 2018-02-03 14:30:00+01
Captions: 
	00:00:04,620 --> 00:00:09,650
so we're going to start the next

00:00:06,570 --> 00:00:11,700
presentation so it's yet another

00:00:09,650 --> 00:00:15,000
multimedia framework called you pipe

00:00:11,700 --> 00:00:16,650
products I know a bit about but this

00:00:15,000 --> 00:00:18,450
year a file has agreed to do the

00:00:16,650 --> 00:00:22,740
presentation so please give a warm

00:00:18,450 --> 00:00:24,080
welcome to fi the courage hello thank

00:00:22,740 --> 00:00:27,840
you

00:00:24,080 --> 00:00:32,730
so a little bit about myself I started

00:00:27,840 --> 00:00:36,420
contributing to VLC in 2006 and I join

00:00:32,730 --> 00:00:40,320
you pipe through years ago so on

00:00:36,420 --> 00:00:44,760
what what is you pipe it's a it's a

00:00:40,320 --> 00:00:46,530
GStreamer for broadcast so the big

00:00:44,760 --> 00:00:49,530
question is what is broadcast exactly

00:00:46,530 --> 00:00:51,840
I've worked for six years in broadcast

00:00:49,530 --> 00:00:55,890
and I still not sure exactly what it is

00:00:51,840 --> 00:00:59,430
so if I try to guess it's a old school

00:00:55,890 --> 00:01:03,539
TV I think when when the first TVs were

00:00:59,430 --> 00:01:07,500
created in a black-and-white this is a

00:01:03,539 --> 00:01:10,890
distribution of a viewer Reggio for

00:01:07,500 --> 00:01:14,000
millions or billions of people so what

00:01:10,890 --> 00:01:19,940
what do we need in broadcast we need an

00:01:14,000 --> 00:01:23,880
high quality of service 24 hours per day

00:01:19,940 --> 00:01:27,149
good good quality because people watch

00:01:23,880 --> 00:01:28,740
TV on a bigger and bigger screen so it's

00:01:27,149 --> 00:01:34,970
not like on the phone where you can have

00:01:28,740 --> 00:01:38,990
a 104 for 444 video it needs to be are

00:01:34,970 --> 00:01:42,119
the quality needs to be a very good so

00:01:38,990 --> 00:01:47,369
as Christoph's said they created the

00:01:42,119 --> 00:01:50,729
project in around 2012 so about 15 years

00:01:47,369 --> 00:01:53,310
after creating VLC so all the mistakes

00:01:50,729 --> 00:01:56,280
who are done in VLC and which we still

00:01:53,310 --> 00:02:02,280
suffer from today they're gone you pipe

00:01:56,280 --> 00:02:04,319
is perfect so it's it's the you pipe is

00:02:02,280 --> 00:02:08,280
a pipeline and of course it comes with

00:02:04,319 --> 00:02:11,400
all the other modules or plugins which

00:02:08,280 --> 00:02:13,819
you can connect together to do anything

00:02:11,400 --> 00:02:13,819
you want

00:02:16,620 --> 00:02:24,190
so it's a it's fast

00:02:20,860 --> 00:02:28,810
of course it's it uses a model of event

00:02:24,190 --> 00:02:31,750
so when you are not receiving any senior

00:02:28,810 --> 00:02:34,930
the pipeline is waiting on on the file

00:02:31,750 --> 00:02:37,390
descriptor so it's not using any CPU and

00:02:34,930 --> 00:02:40,870
as soon as you get the something

00:02:37,390 --> 00:02:45,220
incoming you you're waking up by poll so

00:02:40,870 --> 00:02:49,420
you can enter leet immediately so on on

00:02:45,220 --> 00:02:55,030
Linux we use a Libby V but on Windows

00:02:49,420 --> 00:02:58,630
you could use the Enlightenment and Eco

00:02:55,030 --> 00:03:00,700
Rico but windows support is still it's

00:02:58,630 --> 00:03:03,670
not there there was some work done but

00:03:00,700 --> 00:03:05,740
the guy left so if you know about

00:03:03,670 --> 00:03:11,100
Windows and need a broadcaster from work

00:03:05,740 --> 00:03:14,110
come and we let pure at this port so

00:03:11,100 --> 00:03:17,650
it's it's a bit weird for something

00:03:14,110 --> 00:03:22,180
modern to use no sweat but actually it's

00:03:17,650 --> 00:03:24,280
a lie each each each module runs on the

00:03:22,180 --> 00:03:26,860
main thread so you don't have a

00:03:24,280 --> 00:03:31,050
synchronization problems in your

00:03:26,860 --> 00:03:33,700
pipeline but what you can do is deport

00:03:31,050 --> 00:03:37,980
one module or part of the pipeline to

00:03:33,700 --> 00:03:37,980
another thread and we already have a

00:03:38,100 --> 00:03:45,070
synchronization using a lot less and to

00:03:41,440 --> 00:03:47,950
mix when they did so you can report your

00:03:45,070 --> 00:03:49,900
pipeline and get us right for free

00:03:47,950 --> 00:03:51,700
but from the view of the pipeline you

00:03:49,900 --> 00:04:03,820
don't see the sweat everything runs in

00:03:51,700 --> 00:04:05,800
sync so of course it's a dynamic so you

00:04:03,820 --> 00:04:09,610
can each module can add its own

00:04:05,800 --> 00:04:12,400
requirements and so on and so on for

00:04:09,610 --> 00:04:15,220
example if you your hardware have you

00:04:12,400 --> 00:04:18,340
need some specific stride it needs to be

00:04:15,220 --> 00:04:22,419
lined and but many bits to be able to

00:04:18,340 --> 00:04:23,850
perform a SIMD of course zero copy you

00:04:22,419 --> 00:04:26,470
can

00:04:23,850 --> 00:04:30,330
the pipeline can when they are directly

00:04:26,470 --> 00:04:34,120
in the final buffer at every steps and

00:04:30,330 --> 00:04:36,490
that's it and so the the pipes

00:04:34,120 --> 00:04:38,860
themselves are really done they just

00:04:36,490 --> 00:04:42,610
take something in and out and give you

00:04:38,860 --> 00:04:45,400
an interface for configuration but we

00:04:42,610 --> 00:04:48,759
all all the logic is done in the

00:04:45,400 --> 00:04:55,840
application so you just use the stupid

00:04:48,759 --> 00:04:57,490
pipes and you tell them what to do so as

00:04:55,840 --> 00:05:01,810
I said that it's broadcast so it needs

00:04:57,490 --> 00:05:03,520
to be a very reliable because you don't

00:05:01,810 --> 00:05:05,229
want to be sitting in front on the owner

00:05:03,520 --> 00:05:07,389
of the TV watching some news and

00:05:05,229 --> 00:05:07,900
suddenly it goes a back screen for two

00:05:07,389 --> 00:05:09,460
seconds

00:05:07,900 --> 00:05:13,060
and it comes back because something

00:05:09,460 --> 00:05:15,910
crashed in the data center so we have a

00:05:13,060 --> 00:05:20,199
test suit which is not complete but we

00:05:15,910 --> 00:05:22,690
are walking and making better and we use

00:05:20,199 --> 00:05:26,620
a well grind lib assign which was I

00:05:22,690 --> 00:05:29,110
mentioned and we are facing interval

00:05:26,620 --> 00:05:37,360
pipes especially the framers since they

00:05:29,110 --> 00:05:47,199
receive untrusted input so we use a AFL

00:05:37,360 --> 00:05:48,669
and that's it so what's new since a lot

00:05:47,199 --> 00:05:52,330
last was them I think rather release

00:05:48,669 --> 00:05:53,490
around us first them so and another one

00:05:52,330 --> 00:05:59,229
is coming today

00:05:53,490 --> 00:06:02,409
so ten contributors not many new people

00:05:59,229 --> 00:06:05,729
but hopefully you will be interested in

00:06:02,409 --> 00:06:10,120
joining us so about one commit birthday

00:06:05,729 --> 00:06:12,729
blah blah blah some stats the the

00:06:10,120 --> 00:06:15,669
pipeline itself didn't see many changes

00:06:12,729 --> 00:06:18,159
there were some improvements but nobody

00:06:15,669 --> 00:06:21,639
fixes so this is cool because it means

00:06:18,159 --> 00:06:26,430
that the the pipeline itself is other

00:06:21,639 --> 00:06:29,289
side perfect that laughs it's true and

00:06:26,430 --> 00:06:31,930
but what we did we created there are

00:06:29,289 --> 00:06:35,830
many new modules and I'll talk about

00:06:31,930 --> 00:06:37,039
them so the first one the biggest one

00:06:35,830 --> 00:06:39,979
maybe

00:06:37,039 --> 00:06:46,729
it's the declan sink so the black magic

00:06:39,979 --> 00:06:48,979
cards which to SDI output so it's it was

00:06:46,729 --> 00:06:52,819
a lot of work because if you don't know

00:06:48,979 --> 00:06:56,089
the discards the manufacturer gives a an

00:06:52,819 --> 00:06:59,479
SDK which is a first platform because it

00:06:56,089 --> 00:07:02,229
wins on Linux windows and and Mac but

00:06:59,479 --> 00:07:05,210
the program is it's it's proprietary

00:07:02,229 --> 00:07:09,289
both the the kernel driver and the user

00:07:05,210 --> 00:07:10,999
space library and it's part you have

00:07:09,289 --> 00:07:14,569
many many many problems with

00:07:10,999 --> 00:07:17,139
synchronization if you if you add a

00:07:14,569 --> 00:07:20,659
reference clock the signal will drop

00:07:17,139 --> 00:07:22,999
four seconds later or something so you

00:07:20,659 --> 00:07:26,240
have to test and guess what's wrong you

00:07:22,999 --> 00:07:28,370
ask them what why doesn't your stuff

00:07:26,240 --> 00:07:31,069
work yes or we will fix it in the in the

00:07:28,370 --> 00:07:33,770
next release but then they give you a

00:07:31,069 --> 00:07:37,399
new release which added adds more bugs

00:07:33,770 --> 00:07:41,029
so we have to wait to work around many

00:07:37,399 --> 00:07:44,809
many buds and now it's stable so it's

00:07:41,029 --> 00:07:48,680
actually working in a on your TV so if

00:07:44,809 --> 00:07:52,669
you're watching your TV but module might

00:07:48,680 --> 00:07:55,479
be behind we support teletext in a

00:07:52,669 --> 00:07:59,870
vertical ancillary space so this is a

00:07:55,479 --> 00:08:02,899
vertical and slow is a technology from

00:07:59,870 --> 00:08:05,599
the old days it's been there for 50

00:08:02,899 --> 00:08:09,409
years and after the switch to digital TV

00:08:05,599 --> 00:08:11,360
they kept it because the guys that they

00:08:09,409 --> 00:08:13,249
had learned to work with old

00:08:11,360 --> 00:08:16,249
technologies and they didn't want to

00:08:13,249 --> 00:08:18,769
change so we had to to follow so

00:08:16,249 --> 00:08:20,300
teletext is mostly used in europe in the

00:08:18,769 --> 00:08:26,029
u.s. it's a prescriptions which we

00:08:20,300 --> 00:08:26,809
supposed to we also do same g37 what is

00:08:26,029 --> 00:08:30,759
it exactly

00:08:26,809 --> 00:08:34,669
it's a method for transporting

00:08:30,759 --> 00:08:39,310
compressed audio of a PCM channel so you

00:08:34,669 --> 00:08:41,829
have an it's all digital so you have a

00:08:39,310 --> 00:08:44,630
start code which is an audio sample

00:08:41,829 --> 00:08:48,019
which would not make sense in a real

00:08:44,630 --> 00:08:50,540
world in we are you Joe and when you

00:08:48,019 --> 00:08:50,990
notice besought God in the in the audio

00:08:50,540 --> 00:08:53,720
it mean

00:08:50,990 --> 00:08:56,870
the the PCM samples that follow are

00:08:53,720 --> 00:09:01,459
actually compressed data so you can

00:08:56,870 --> 00:09:03,320
transport in a stereo track so to

00:09:01,459 --> 00:09:03,890
China's PCM you could transport a

00:09:03,320 --> 00:09:08,560
compressed

00:09:03,890 --> 00:09:13,370
ac3 with 5.1 or don't be e which is a

00:09:08,560 --> 00:09:18,740
codec but is only used in broadcast and

00:09:13,370 --> 00:09:24,620
there was a decoder added to ffmpeg last

00:09:18,740 --> 00:09:28,250
year it's not much known and also in 77

00:09:24,620 --> 00:09:30,740
you can transport PCM so you have PCM

00:09:28,250 --> 00:09:33,110
you had the start code and then PCM

00:09:30,740 --> 00:09:39,709
behind doesn't make sense but you can do

00:09:33,110 --> 00:09:43,279
it we also added the yes I think si is a

00:09:39,709 --> 00:09:47,120
bit like SDI it's a format form for

00:09:43,279 --> 00:09:50,990
transmit transmitting video and we

00:09:47,120 --> 00:09:54,640
already had a sauce module so to receive

00:09:50,990 --> 00:09:57,190
the si signal and which ones meted as a

00:09:54,640 --> 00:10:01,250
transport transport stream for example

00:09:57,190 --> 00:10:04,430
so and it's I mean it's it's designed

00:10:01,250 --> 00:10:10,339
for MPS because it uses the same 27

00:10:04,430 --> 00:10:13,399
megahertz clock we had TVB CSA which is

00:10:10,339 --> 00:10:17,209
a an encryption system for for satellite

00:10:13,399 --> 00:10:20,630
so for paid TV so you can do it both

00:10:17,209 --> 00:10:23,500
sides encryption and decryption and it's

00:10:20,630 --> 00:10:25,190
actually a fork the original version

00:10:23,500 --> 00:10:29,570
came from VideoLAN

00:10:25,190 --> 00:10:34,360
and that that guy popped it and we added

00:10:29,570 --> 00:10:37,790
the sim d and actually divide divide the

00:10:34,360 --> 00:10:40,640
bit slicing implementation so it's very

00:10:37,790 --> 00:10:43,870
very fast I think a couple gigs per

00:10:40,640 --> 00:10:43,870
second on modern order

00:10:47,660 --> 00:10:54,260
where did the FEC so for the error

00:10:51,290 --> 00:10:57,740
correction which uses a scintilla the 70

00:10:54,260 --> 00:11:01,040
standard so it's part of the series

00:10:57,740 --> 00:11:03,820
which define the SGI over IP but it's

00:11:01,040 --> 00:11:08,120
not specific to twisty over IP so any

00:11:03,820 --> 00:11:11,480
RTP stream you can add FEC and we can

00:11:08,120 --> 00:11:18,680
receive it so you can choose your the

00:11:11,480 --> 00:11:20,540
size of your matrix and sometimes a PC

00:11:18,680 --> 00:11:21,920
is not enough you have too many roses so

00:11:20,540 --> 00:11:24,440
you can't reconstruct the matrix

00:11:21,920 --> 00:11:30,530
perfectly you're losing a video so we

00:11:24,440 --> 00:11:34,130
also added a up you it's I mean at last

00:11:30,530 --> 00:11:35,510
nab there was a new new solution by a

00:11:34,130 --> 00:11:38,900
vision called

00:11:35,510 --> 00:11:41,770
srt secure reliable transport and I

00:11:38,900 --> 00:11:44,810
thought is a mix of FEC and

00:11:41,770 --> 00:11:48,140
retransmission but we chose to use the

00:11:44,810 --> 00:11:50,450
existing standout also we don't know any

00:11:48,140 --> 00:11:53,090
other implementation of a standard so we

00:11:50,450 --> 00:11:55,970
can't test it in the real world except

00:11:53,090 --> 00:11:57,740
against ourselves if you test your

00:11:55,970 --> 00:12:00,710
software we have with your software it's

00:11:57,740 --> 00:12:05,450
always going to be compatible so we are

00:12:00,710 --> 00:12:10,610
looking for another irq implementation

00:12:05,450 --> 00:12:12,980
so this the mode is nak so each time you

00:12:10,610 --> 00:12:17,510
you lose a packet you asked for a

00:12:12,980 --> 00:12:21,160
retransmission and that's why you have a

00:12:17,510 --> 00:12:25,190
longer latin season with FEC so really

00:12:21,160 --> 00:12:27,290
both both ways of protecting your

00:12:25,190 --> 00:12:29,660
against packet loss are good but they

00:12:27,290 --> 00:12:31,250
have the drawbacks so it depends on the

00:12:29,660 --> 00:12:36,740
kind of jitter of

00:12:31,250 --> 00:12:37,580
almost your network and since it's a

00:12:36,740 --> 00:12:41,410
pipeline

00:12:37,580 --> 00:12:44,810
we can actually put one behind the other

00:12:41,410 --> 00:12:47,030
but really we should merge them so each

00:12:44,810 --> 00:12:51,590
one can know that they need to share a

00:12:47,030 --> 00:12:53,810
common internal state so for example if

00:12:51,590 --> 00:12:56,030
you can correct a packet with FEC you

00:12:53,810 --> 00:12:58,670
shouldn't ask for retransmission because

00:12:56,030 --> 00:13:01,190
it's gonna make your retire and

00:12:58,670 --> 00:13:04,670
maybe because more packet loss so

00:13:01,190 --> 00:13:06,230
we still did not we did not match it and

00:13:04,670 --> 00:13:07,520
actually we don't know how exactly to do

00:13:06,230 --> 00:13:11,000
it efficiently

00:13:07,520 --> 00:13:18,320
so maybe we'll use them either one and

00:13:11,000 --> 00:13:22,550
the other but never together so I was

00:13:18,320 --> 00:13:26,720
talking about 73 7 we actually add the

00:13:22,550 --> 00:13:28,790
ffmpeg like moment where but 2% were

00:13:26,720 --> 00:13:30,920
working on competing implementations

00:13:28,790 --> 00:13:33,440
without telling the other out and we

00:13:30,920 --> 00:13:37,630
actually committed the two versions but

00:13:33,440 --> 00:13:42,140
a little bit different because one is a

00:13:37,630 --> 00:13:45,440
parser so it will extract the the the

00:13:42,140 --> 00:13:48,500
payload only remove the SM the su-27

00:13:45,440 --> 00:13:51,770
adder which you might not need anymore

00:13:48,500 --> 00:13:55,880
but in our case since we are with

00:13:51,770 --> 00:13:58,940
transmitting on the under SDI output we

00:13:55,880 --> 00:13:59,900
need to keep the adder so they worked a

00:13:58,940 --> 00:14:04,280
bit differently

00:13:59,900 --> 00:14:09,140
also the you can have a 16 20 or 24 bits

00:14:04,280 --> 00:14:11,750
mode in the 3-3-7 and what the the

00:14:09,140 --> 00:14:14,540
parser is only using 16 bits and the

00:14:11,750 --> 00:14:17,030
other one is 20 bits but you could

00:14:14,540 --> 00:14:21,650
modify them if you need it to support

00:14:17,030 --> 00:14:24,520
another business we added the freetype

00:14:21,650 --> 00:14:28,970
for text rendering it's a very basic

00:14:24,520 --> 00:14:32,000
because we don't deal with positioning

00:14:28,970 --> 00:14:34,970
if you have a P for example the both the

00:14:32,000 --> 00:14:38,180
piece below the the screen so you don't

00:14:34,970 --> 00:14:40,250
see it but since we only needed

00:14:38,180 --> 00:14:43,160
something simple we avoid the text in

00:14:40,250 --> 00:14:50,900
all caps and that works for us so what's

00:14:43,160 --> 00:14:55,670
cool blanc sauce what this does is

00:14:50,900 --> 00:14:59,180
generate the lmg stream lossing so you

00:14:55,670 --> 00:15:03,350
can ever you can create your output and

00:14:59,180 --> 00:15:07,070
start transmitting nothing which is

00:15:03,350 --> 00:15:10,610
useful if if you mix it with let's say

00:15:07,070 --> 00:15:13,130
if if you want to switch programs so you

00:15:10,610 --> 00:15:14,400
start the output on on an empty source

00:15:13,130 --> 00:15:17,220
and then you

00:15:14,400 --> 00:15:19,500
reflect the your actual program to the

00:15:17,220 --> 00:15:26,820
output which already exists and it's

00:15:19,500 --> 00:15:32,520
going smooth a vsync it's a warm Excel

00:15:26,820 --> 00:15:35,850
so but for when you deal with SDI each

00:15:32,520 --> 00:15:38,180
each audio frame is mixed together with

00:15:35,850 --> 00:15:45,570
the video and you have to send them as

00:15:38,180 --> 00:15:50,570
one one packet one block so we need to

00:15:45,570 --> 00:15:50,570
synchronize them at the sample level and

00:15:50,750 --> 00:15:57,390
so we use kind of we can use a blank

00:15:54,120 --> 00:16:02,310
source form for the video but for the

00:15:57,390 --> 00:16:06,480
audio we are actually based on the

00:16:02,310 --> 00:16:08,160
output clock so since the input and

00:16:06,480 --> 00:16:10,620
output clocks differ you need to

00:16:08,160 --> 00:16:15,300
resample the audio so it will fall

00:16:10,620 --> 00:16:17,970
exactly each time and we use Peaks

00:16:15,300 --> 00:16:21,120
because we speaks you can do fractional

00:16:17,970 --> 00:16:21,660
with something so going up and down as

00:16:21,120 --> 00:16:25,230
you need

00:16:21,660 --> 00:16:28,020
without airing attracts if you lose one

00:16:25,230 --> 00:16:30,690
of your sample you you would hear hear

00:16:28,020 --> 00:16:34,950
crack so with this module we have

00:16:30,690 --> 00:16:38,640
perfect something output we added v2 10

00:16:34,950 --> 00:16:41,670
decoder after the encoder so what's the

00:16:38,640 --> 00:16:45,210
SDI video format and we made it fast

00:16:41,670 --> 00:16:52,440
actually James made it first with avx2

00:16:45,210 --> 00:16:55,050
assembly and yeah we did more small

00:16:52,440 --> 00:16:58,590
objects zone plate is a it's a test

00:16:55,050 --> 00:17:00,960
pattern which is used in in TV so

00:16:58,590 --> 00:17:04,589
instead of blanc sauce which is black

00:17:00,960 --> 00:17:08,670
you could use this one x265 encoding

00:17:04,589 --> 00:17:11,100
which is a steep slope grid module which

00:17:08,670 --> 00:17:14,070
is used with the blank saucers so this

00:17:11,100 --> 00:17:15,720
is a seamless switchover you you create

00:17:14,070 --> 00:17:18,110
your output which would be your TV

00:17:15,720 --> 00:17:20,640
channel and you can switch the programs

00:17:18,110 --> 00:17:22,590
you connect one source and the other and

00:17:20,640 --> 00:17:27,490
they flip in an instant without our

00:17:22,590 --> 00:17:30,040
artifacts DT SDI as well as file format

00:17:27,490 --> 00:17:33,070
used in the the dead tech tech tools to

00:17:30,040 --> 00:17:36,130
do a raw SDI capture it's a simple

00:17:33,070 --> 00:17:39,340
letter doc to sound which was the the

00:17:36,130 --> 00:17:41,830
first contribution of a new new

00:17:39,340 --> 00:17:47,320
contribution new contributed view pipe

00:17:41,830 --> 00:17:49,510
so what it does is you you said that the

00:17:47,320 --> 00:17:50,860
parameters you want from the wave the

00:17:49,510 --> 00:17:54,550
header that you don't have since it's

00:17:50,860 --> 00:17:59,350
raw PCM and you can do a PCM stream from

00:17:54,550 --> 00:18:00,780
front file what's coming DVB satellite

00:17:59,350 --> 00:18:04,330
sauce

00:18:00,780 --> 00:18:10,809
SDI over IP which is working and on-air

00:18:04,330 --> 00:18:14,380
now but not yet committed so 2022 the

00:18:10,809 --> 00:18:16,059
old standard which is working and we are

00:18:14,380 --> 00:18:19,260
working on the new one which was just

00:18:16,059 --> 00:18:23,170
released last year and it should be

00:18:19,260 --> 00:18:27,040
should be working for knob I hope so and

00:18:23,170 --> 00:18:30,429
will also work on subframe latency

00:18:27,040 --> 00:18:32,830
encoders and decoders so we can actually

00:18:30,429 --> 00:18:34,720
hear transmitted you cut the video

00:18:32,830 --> 00:18:36,700
before the rest of the frame has arrived

00:18:34,720 --> 00:18:41,830
so let's say if you have a progressive

00:18:36,700 --> 00:18:43,900
scan of on your camera you can start

00:18:41,830 --> 00:18:46,750
working on encoding and transmitting the

00:18:43,900 --> 00:18:51,280
first lines before the scan is done so

00:18:46,750 --> 00:18:53,800
that will be cool and of course I hope

00:18:51,280 --> 00:18:58,300
that some of you will be interested in

00:18:53,800 --> 00:19:00,550
enjoying the product so we open we are

00:18:58,300 --> 00:19:03,370
cool we are a small project we are cool

00:19:00,550 --> 00:19:12,300
only nice people so if you are not nice

00:19:03,370 --> 00:19:12,300
not come any question

00:19:16,560 --> 00:19:27,730
so are there any questions I can pass

00:19:19,450 --> 00:19:32,710
the mic yes it's more of a comment on

00:19:27,730 --> 00:19:34,990
the SRT thing it doesn't do a CC and the

00:19:32,710 --> 00:19:37,480
bun of big features is that they can

00:19:34,990 --> 00:19:39,760
they try to guess the link of the

00:19:37,480 --> 00:19:43,210
bandwidth okay so that you can inform

00:19:39,760 --> 00:19:45,640
your encoder okay I sorted was doing a

00:19:43,210 --> 00:19:47,410
fish as well so they found that FEC is

00:19:45,640 --> 00:19:48,520
not useful pretty internet that's what

00:19:47,410 --> 00:19:50,830
they're okay

00:19:48,520 --> 00:19:52,840
that it that it's more efficient to do

00:19:50,830 --> 00:19:54,340
retransmission okay so that's what the

00:19:52,840 --> 00:19:57,670
internet maybe yeah it depends on the

00:19:54,340 --> 00:20:02,200
link maybe on a dedicated link yes it

00:19:57,670 --> 00:20:05,140
would be useful so that if you live in

00:20:02,200 --> 00:20:06,880
CDs it's not that long easy there and I

00:20:05,140 --> 00:20:08,620
was talking about the we use the

00:20:06,880 --> 00:20:11,080
standard but when doing the

00:20:08,620 --> 00:20:13,660
implementation I realized that you you

00:20:11,080 --> 00:20:16,540
don't receive the you don't know the

00:20:13,660 --> 00:20:19,420
beach weight I on the right end of the

00:20:16,540 --> 00:20:22,570
with transmission so we had to add a

00:20:19,420 --> 00:20:24,940
custom rtcp a packet to send back the

00:20:22,570 --> 00:20:28,540
beach way to the to the sender and to do

00:20:24,940 --> 00:20:32,830
some stats so maybe they tested there is

00:20:28,540 --> 00:20:36,510
RFC two and so that it wasn't usable for

00:20:32,830 --> 00:20:38,470
them yeah it's something that was

00:20:36,510 --> 00:20:40,480
developers proprietary software like

00:20:38,470 --> 00:20:46,900
five or six years and they shipped

00:20:40,480 --> 00:20:50,380
before the open source stuff someone

00:20:46,900 --> 00:20:54,520
else is there any other question I'm

00:20:50,380 --> 00:20:56,830
coming I'm coming I'm running I'm sorry

00:20:54,520 --> 00:20:58,720
I'm calling because you have to be in

00:20:56,830 --> 00:21:03,760
the camera otherwise people don't hear

00:20:58,720 --> 00:21:06,340
you I just wanted to ask if you're using

00:21:03,760 --> 00:21:11,310
the told EE Dakota in your workflow no

00:21:06,340 --> 00:21:14,680
because what we do is transmission so we

00:21:11,310 --> 00:21:16,480
we transmit the door be as Dolby was the

00:21:14,680 --> 00:21:19,300
the point of using su-37

00:21:16,480 --> 00:21:21,250
because the other equipment all the

00:21:19,300 --> 00:21:23,890
equipment on just chain understands

00:21:21,250 --> 00:21:25,180
which format so we don't need to decode

00:21:23,890 --> 00:21:26,500
it to to PCM

00:21:25,180 --> 00:21:29,470
because the

00:21:26,500 --> 00:21:32,440
Dolby II would be for example six

00:21:29,470 --> 00:21:34,679
channels but if we send it in the

00:21:32,440 --> 00:21:38,710
compressed form in three through seven

00:21:34,679 --> 00:21:40,450
we can put fit six channels into so the

00:21:38,710 --> 00:21:43,330
coding would not make sense because we

00:21:40,450 --> 00:21:45,429
don't have an any so did you ever taste

00:21:43,330 --> 00:21:49,210
it I'm just curious because I wasn't

00:21:45,429 --> 00:21:53,500
really able to okay thank you but I

00:21:49,210 --> 00:21:58,090
could I could share someplace maybe okay

00:21:53,500 --> 00:21:59,380
just it's in there it wasn't on the

00:21:58,090 --> 00:22:01,740
beginning of the presentation you can

00:21:59,380 --> 00:22:01,740
ask me

00:22:02,169 --> 00:22:06,400
hi you were mentioning wanting to find

00:22:05,559 --> 00:22:09,429
other

00:22:06,400 --> 00:22:12,700
I mean testing inter interoperability

00:22:09,429 --> 00:22:13,990
for retransmission uh-huh so there's G

00:22:12,700 --> 00:22:17,950
Sherman which is the you pipe for

00:22:13,990 --> 00:22:19,900
everything else if nobody can try I mean

00:22:17,950 --> 00:22:24,700
essentially there's all RTX support in

00:22:19,900 --> 00:22:27,250
it the RFC pretty much I mean they

00:22:24,700 --> 00:22:28,990
obviously that you mentioned is is not

00:22:27,250 --> 00:22:32,400
the actual implementation of the

00:22:28,990 --> 00:22:32,400
retransmission it's a whole bunch of

00:22:33,210 --> 00:22:39,990
recommendations on how you should behave

00:22:35,380 --> 00:22:43,110
okay I will have a look at this recipe

00:22:39,990 --> 00:22:43,110
thank you

00:22:43,140 --> 00:22:46,830
any other question

00:22:54,370 --> 00:23:01,760
no less chance well thank you I fell

00:23:00,230 --> 00:23:05,339
thank you for attention

00:23:01,760 --> 00:23:05,339

YouTube URL: https://www.youtube.com/watch?v=VCHXMDCmsgc


