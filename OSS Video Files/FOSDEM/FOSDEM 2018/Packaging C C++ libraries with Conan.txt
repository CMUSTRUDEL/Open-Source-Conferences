Title: Packaging C C++ libraries with Conan
Publication date: 2018-02-04
Playlist: FOSDEM 2018
Description: 
	by ThÃ©o Delrieu

At: FOSDEM 2018
Room: K.3.201
Scheduled start: 2018-02-03 11:00:00+01
Captions: 
	00:00:04,650 --> 00:00:11,460
so you Conan and how we use it to

00:00:08,220 --> 00:00:14,250
package C and C++ dependencies but first

00:00:11,460 --> 00:00:17,010
I'd introduce myself briefly so I'm

00:00:14,250 --> 00:00:20,880
totally you I work at tinker based in

00:00:17,010 --> 00:00:24,029
Paris and I use Conan a lot at work to

00:00:20,880 --> 00:00:27,350
package for Windows every Mac Mac OS

00:00:24,029 --> 00:00:30,840
Linux and Android and iOS and I'm also

00:00:27,350 --> 00:00:36,449
proud very proud one-time contributor as

00:00:30,840 --> 00:00:38,820
you can see that's a start so thank you

00:00:36,449 --> 00:00:42,000
we are doing an end-to-end encryption

00:00:38,820 --> 00:00:45,739
SDK the first version is available in

00:00:42,000 --> 00:00:50,390
JavaScript and we currently actively

00:00:45,739 --> 00:00:53,070
developing the Android and iOS SDK so

00:00:50,390 --> 00:00:55,050
when we decided to develop the native

00:00:53,070 --> 00:00:57,660
version everyone in the team was really

00:00:55,050 --> 00:01:02,579
excited because most of us have our

00:00:57,660 --> 00:01:05,160
back-end developers but at one point

00:01:02,579 --> 00:01:10,770
someone asked well what language should

00:01:05,160 --> 00:01:13,009
we use and then after a few days of

00:01:10,770 --> 00:01:15,869
constructive and intelligent discussions

00:01:13,009 --> 00:01:20,130
we agreed on three key points that the

00:01:15,869 --> 00:01:23,670
language had to have so the first of all

00:01:20,130 --> 00:01:25,380
is write once run everywhere because we

00:01:23,670 --> 00:01:28,830
don't want to write everything in Swift

00:01:25,380 --> 00:01:31,849
and then in Catalan or Java we wanted

00:01:28,830 --> 00:01:34,800
one code base then high-performance

00:01:31,849 --> 00:01:36,869
especially for mobile devices and also

00:01:34,800 --> 00:01:38,940
great or at least good dependency

00:01:36,869 --> 00:01:41,399
management and that's why we chose C++

00:01:38,940 --> 00:01:43,679
now I know what you're thinking what the

00:01:41,399 --> 00:01:45,899
hell is this guy talking about C+ brandy

00:01:43,679 --> 00:01:47,940
and good discipline NC management don't

00:01:45,899 --> 00:01:50,789
go in the same slide and instru that

00:01:47,940 --> 00:01:53,970
usually it looks like this for the

00:01:50,789 --> 00:01:56,399
unusual support plus dependencies I mean

00:01:53,970 --> 00:02:00,539
who doesn't love to upgrade open SSL on

00:01:56,399 --> 00:02:03,869
Windows for example our boost but that

00:02:00,539 --> 00:02:04,890
was before Conan so Conan is a C++

00:02:03,869 --> 00:02:07,530
package manager

00:02:04,890 --> 00:02:11,090
it works with all the languages but

00:02:07,530 --> 00:02:14,129
primarily primarily design around those

00:02:11,090 --> 00:02:16,379
it's disfranchised so you can oust your

00:02:14,129 --> 00:02:18,180
own server that's why what we do it's

00:02:16,379 --> 00:02:20,879
open source available on github

00:02:18,180 --> 00:02:23,610
it's written in Python in Python

00:02:20,879 --> 00:02:28,019
compatible with two and three so you can

00:02:23,610 --> 00:02:31,920
run it everywhere so I have two parts

00:02:28,019 --> 00:02:35,159
now I have one the basic package

00:02:31,920 --> 00:02:37,079
creation upload and retrieval no sort of

00:02:35,159 --> 00:02:40,439
package management expect and after that

00:02:37,079 --> 00:02:44,129
I'll show you more how we use Conan as a

00:02:40,439 --> 00:02:47,970
cross build tool for Android so first

00:02:44,129 --> 00:02:51,150
there's the cone on create method we

00:02:47,970 --> 00:02:54,480
tells you to create packages so you have

00:02:51,150 --> 00:02:56,730
a recipe that I've shown in a bit you

00:02:54,480 --> 00:02:59,489
can connect create will read the recipe

00:02:56,730 --> 00:03:02,670
run it and it will store the package in

00:02:59,489 --> 00:03:05,340
your local cache after that there's the

00:03:02,670 --> 00:03:07,379
canal upload method which will find

00:03:05,340 --> 00:03:09,989
local packages you want to upload and

00:03:07,379 --> 00:03:11,359
then upload it to the remote of your

00:03:09,989 --> 00:03:15,329
choice

00:03:11,359 --> 00:03:18,989
so here's how a recipe look like it's

00:03:15,329 --> 00:03:22,829
playing path Python so we import this

00:03:18,989 --> 00:03:26,519
Conan file from the Conan's Python

00:03:22,829 --> 00:03:29,310
module so the canal file is the basic

00:03:26,519 --> 00:03:31,199
framework we will use so we define I

00:03:29,310 --> 00:03:34,010
have a small library link on arithmetic

00:03:31,199 --> 00:03:39,030
which exposes not function

00:03:34,010 --> 00:03:41,099
and so I derive my arithmetic : class so

00:03:39,030 --> 00:03:43,730
there's the future abuse name the

00:03:41,099 --> 00:03:47,069
version and then there's the settings so

00:03:43,730 --> 00:03:49,079
the OS and arch that you see here are

00:03:47,069 --> 00:03:51,299
the operating system and the

00:03:49,079 --> 00:03:54,299
architecture on which the package we run

00:03:51,299 --> 00:03:58,199
will type debugger it is and then

00:03:54,299 --> 00:04:00,389
compiler now we need to retrieve sources

00:03:58,199 --> 00:04:05,310
so I will fetch the source from my

00:04:00,389 --> 00:04:10,139
github account and simply run git clone

00:04:05,310 --> 00:04:13,440
and then I will use the Simek helper in

00:04:10,139 --> 00:04:18,299
the bid method to configure build and

00:04:13,440 --> 00:04:19,829
install my project I will only use Simek

00:04:18,299 --> 00:04:22,530
during this presentation

00:04:19,829 --> 00:04:26,219
Coenen provides a lots of helper you can

00:04:22,530 --> 00:04:30,220
work with my son auto tools and a lot of

00:04:26,219 --> 00:04:34,190
the other sorry lots of others in

00:04:30,220 --> 00:04:37,430
and then there's we need to expose to

00:04:34,190 --> 00:04:40,520
our consumers some information in this

00:04:37,430 --> 00:04:44,240
case which library they need to link

00:04:40,520 --> 00:04:46,460
against there's others there's other

00:04:44,240 --> 00:04:48,860
attributes by default like the include

00:04:46,460 --> 00:04:50,539
directory which is named include by

00:04:48,860 --> 00:04:55,370
default so you don't have to specify

00:04:50,539 --> 00:04:58,550
that so then to consume package you need

00:04:55,370 --> 00:05:02,000
to use the conan install method so

00:04:58,550 --> 00:05:03,440
there's an error in the slides here it's

00:05:02,000 --> 00:05:05,000
not running recipe it's check

00:05:03,440 --> 00:05:07,610
requirements

00:05:05,000 --> 00:05:10,130
so there's a conan file dot txt that

00:05:07,610 --> 00:05:13,220
i've shown in the next slide where you

00:05:10,130 --> 00:05:15,770
declare your requirements so it's gonna

00:05:13,220 --> 00:05:19,550
install with read up file then try to

00:05:15,770 --> 00:05:22,819
fetch packages in it either in your

00:05:19,550 --> 00:05:25,190
local cache or in remotes and then

00:05:22,819 --> 00:05:28,490
finally it will generate build

00:05:25,190 --> 00:05:31,520
information files in this case see make

00:05:28,490 --> 00:05:33,729
so it will generate Conan bin info dot C

00:05:31,520 --> 00:05:39,710
make file containing every include

00:05:33,729 --> 00:05:44,810
library directory targets etc extra like

00:05:39,710 --> 00:05:47,210
a pkg config file so in our current file

00:05:44,810 --> 00:05:50,090
dot txt we have simply this section

00:05:47,210 --> 00:05:54,050
requires and we have to put references

00:05:50,090 --> 00:05:55,909
to our packages in Canal references are

00:05:54,050 --> 00:05:59,389
composed of the name of the package it's

00:05:55,909 --> 00:06:01,789
version and then you a username and a

00:05:59,389 --> 00:06:04,759
channel so the username is usually the

00:06:01,789 --> 00:06:08,960
author of the recipe in this case me and

00:06:04,759 --> 00:06:11,509
the channel can be compared to a git

00:06:08,960 --> 00:06:14,180
branch so like in Conan by default the

00:06:11,509 --> 00:06:18,650
stable branch the stable channel is the

00:06:14,180 --> 00:06:22,029
master branch and then we need to say to

00:06:18,650 --> 00:06:25,430
tell Conan we want see make files

00:06:22,029 --> 00:06:27,949
generated here you can put a lot of

00:06:25,430 --> 00:06:31,370
other things so I said PKG config can

00:06:27,949 --> 00:06:36,199
use even xcode files don't use that that

00:06:31,370 --> 00:06:39,710
yeah you can use that and then one final

00:06:36,199 --> 00:06:42,390
thing to change to our project so this

00:06:39,710 --> 00:06:44,760
is see mclean txt

00:06:42,390 --> 00:06:47,280
was written before the Coonan

00:06:44,760 --> 00:06:49,530
integration as you can see we have our

00:06:47,280 --> 00:06:53,400
calculator project we have a fine

00:06:49,530 --> 00:06:56,100
package then add executable and finally

00:06:53,400 --> 00:07:00,750
we link our executable to the package

00:06:56,100 --> 00:07:02,550
that we found if use find package with

00:07:00,750 --> 00:07:05,490
canal there's only two lines to encode

00:07:02,550 --> 00:07:08,610
you have to include the file that can

00:07:05,490 --> 00:07:10,080
ungenerous it previously and then you

00:07:08,610 --> 00:07:11,790
need to call this Coenen basic set of

00:07:10,080 --> 00:07:14,220
macro and that's it

00:07:11,790 --> 00:07:17,580
if you like me and you don't like

00:07:14,220 --> 00:07:20,820
writing like package files you can

00:07:17,580 --> 00:07:23,430
simply use the targets argument to the

00:07:20,820 --> 00:07:26,430
Coenen basic set of macro and it will

00:07:23,430 --> 00:07:30,570
then come on we'll create a namespace

00:07:26,430 --> 00:07:33,210
named Coenen pkg and add a target for

00:07:30,570 --> 00:07:37,230
each of your dependencies so here I

00:07:33,210 --> 00:07:41,910
replaced the arithmetic dot arithmetic

00:07:37,230 --> 00:07:49,220
by current pkg arithmetic so time for a

00:07:41,910 --> 00:07:52,650
little demo so I'm inside the arithmetic

00:07:49,220 --> 00:07:56,310
folder and I will use current create to

00:07:52,650 --> 00:07:59,520
create the package so can uncreate it

00:07:56,310 --> 00:08:06,240
needs two arguments G path to the recipe

00:07:59,520 --> 00:08:13,230
and the username and channel named

00:08:06,240 --> 00:08:15,090
assumptions and so in the so here you

00:08:13,230 --> 00:08:18,440
can see Kannan is running the sauce

00:08:15,090 --> 00:08:22,230
methods planning in the github now is

00:08:18,440 --> 00:08:27,630
launching CMake to build the package

00:08:22,230 --> 00:08:34,130
install and done and we can see with the

00:08:27,630 --> 00:08:34,130
canal search method of it is made

00:08:36,950 --> 00:08:42,860
and here we can see we have a package in

00:08:39,630 --> 00:08:48,030
our local cache with all those settings

00:08:42,860 --> 00:08:51,870
so now I want to upload this package to

00:08:48,030 --> 00:08:57,840
my bin tray account so here I have one

00:08:51,870 --> 00:09:00,680
remote smell FOSDEM and then i rewrite

00:08:57,840 --> 00:09:00,680
this

00:09:01,560 --> 00:09:15,660
I mean I can see I pulled the recipe and

00:09:09,899 --> 00:09:20,670
then the package dot Torchic G Z DZ so

00:09:15,660 --> 00:09:22,949
now I will try to use my package I will

00:09:20,670 --> 00:09:25,620
on purpose remove it from my local cache

00:09:22,949 --> 00:09:42,029
to show you the fetching from the server

00:09:25,620 --> 00:09:45,779
so so I have my content file txt in my

00:09:42,029 --> 00:09:49,050
CMake there's only the to include lines

00:09:45,779 --> 00:09:52,410
like I so I show you you before so let's

00:09:49,050 --> 00:09:54,899
create a build directory and then run

00:09:52,410 --> 00:09:57,920
gonna install and give it the D path to

00:09:54,899 --> 00:09:57,920
the current file text

00:10:01,520 --> 00:10:09,330
so it tried to run on the default the

00:10:06,120 --> 00:10:12,690
official repository remotes didn't find

00:10:09,330 --> 00:10:16,880
anything and so it found in Faust them

00:10:12,690 --> 00:10:21,600
to 2018 download the package and here

00:10:16,880 --> 00:10:27,510
generated the Simic file now all I need

00:10:21,600 --> 00:10:39,000
to do is see make green snake red ninja

00:10:27,510 --> 00:10:41,880
and use greater okay so come on also

00:10:39,000 --> 00:10:45,240
detected my settings but you can specify

00:10:41,880 --> 00:10:47,610
your own like here I want let's say of

00:10:45,240 --> 00:10:53,010
GCC seven and I want to use a really old

00:10:47,610 --> 00:10:56,490
version of GCC six and I use the - s

00:10:53,010 --> 00:10:58,350
options to specify the setting so let's

00:10:56,490 --> 00:11:01,650
say we want to be able to align five

00:10:58,350 --> 00:11:04,140
with the newest GCC ABI debug build it

00:11:01,650 --> 00:11:07,440
gets a bit tricky because yeah it's hard

00:11:04,140 --> 00:11:09,810
to type it's long enough so there's a

00:11:07,440 --> 00:11:12,030
solution you can use profiles instead

00:11:09,810 --> 00:11:14,630
and that's what you can use this when

00:11:12,030 --> 00:11:17,220
you don't write any settings it

00:11:14,630 --> 00:11:21,150
generates a default profile so that's

00:11:17,220 --> 00:11:24,840
the g1 eternities online machine Linux

00:11:21,150 --> 00:11:28,890
except x64 GCC seven and quick PSA by

00:11:24,840 --> 00:11:33,150
default Conan will put the lip stood c++

00:11:28,890 --> 00:11:35,940
the old GCC ABI as a default you don't

00:11:33,150 --> 00:11:38,850
if you want the newest you have to use

00:11:35,940 --> 00:11:40,620
leaps to C++ 11 that's not something you

00:11:38,850 --> 00:11:43,550
want to discover after building 30

00:11:40,620 --> 00:11:46,740
packages like me

00:11:43,550 --> 00:11:50,610
so let's refactor our command line and

00:11:46,740 --> 00:11:55,520
we'll use simply plain version 5 within

00:11:50,610 --> 00:11:59,190
us WI in debug mode and now we simply

00:11:55,520 --> 00:12:02,120
rerun cone and create now with the

00:11:59,190 --> 00:12:06,270
double dash profile the option and

00:12:02,120 --> 00:12:08,760
giving our profile you can still use the

00:12:06,270 --> 00:12:11,970
dash S option to specify setting to

00:12:08,760 --> 00:12:14,700
override the default ones or the ones

00:12:11,970 --> 00:12:21,280
specified in your profile

00:12:14,700 --> 00:12:23,650
so now I'll focus more on the yeah cross

00:12:21,280 --> 00:12:26,230
building tool aspect and not so much the

00:12:23,650 --> 00:12:29,620
package management to show you how we

00:12:26,230 --> 00:12:30,670
can use content packages to cross

00:12:29,620 --> 00:12:34,090
compile for Android

00:12:30,670 --> 00:12:37,150
quite simply so we have a list of

00:12:34,090 --> 00:12:40,240
prerequisite for enjoy building the NDK

00:12:37,150 --> 00:12:43,660
of course we will use standalone drain

00:12:40,240 --> 00:12:47,370
to Train and we need a new current

00:12:43,660 --> 00:12:51,310
profile but first I want to introduce

00:12:47,370 --> 00:12:54,070
build requirements so if you have a

00:12:51,310 --> 00:12:57,010
package a which in its recipe is

00:12:54,070 --> 00:13:00,300
declaring set that aren't info dot foo

00:12:57,010 --> 00:13:03,160
equals bar and that you have a package B

00:13:00,300 --> 00:13:05,940
that declares a build requirement on the

00:13:03,160 --> 00:13:12,370
package a during the iteration of

00:13:05,940 --> 00:13:16,450
package B it will export the environment

00:13:12,370 --> 00:13:19,180
viable in inside the environment of your

00:13:16,450 --> 00:13:23,770
shell so inside package B you could do

00:13:19,180 --> 00:13:27,460
equal dollar foo and you have bar it's

00:13:23,770 --> 00:13:31,690
same thing with CPP info that we saw in

00:13:27,460 --> 00:13:33,880
the previous slide if I declare self dot

00:13:31,690 --> 00:13:37,030
CPP in for that sis root equals the path

00:13:33,880 --> 00:13:40,210
to my android sister --it it will appear

00:13:37,030 --> 00:13:42,940
inside package B in the recipe as self

00:13:40,210 --> 00:13:45,790
that the depth CPP info that's his route

00:13:42,940 --> 00:13:47,980
and why is that useful because the C my

00:13:45,790 --> 00:13:49,600
helper will be able to automatically

00:13:47,980 --> 00:13:53,560
detect that and set the sister

00:13:49,600 --> 00:13:56,530
accordingly so what we'll do we'll build

00:13:53,560 --> 00:14:00,820
a standalone tool chain that we have a

00:13:56,530 --> 00:14:04,360
build requirement on the NDK and then we

00:14:00,820 --> 00:14:07,060
will throw the NDK and only use this

00:14:04,360 --> 00:14:10,380
tool chain and her here RS medic will

00:14:07,060 --> 00:14:14,890
have also been requirement the two thing

00:14:10,380 --> 00:14:19,390
so before that be fortunate use the

00:14:14,890 --> 00:14:22,690
recipes there's our Android profile as

00:14:19,390 --> 00:14:25,930
you can see the OS and arch are we have

00:14:22,690 --> 00:14:28,750
been changed to android arm v8

00:14:25,930 --> 00:14:32,200
there's this OS API level that is

00:14:28,750 --> 00:14:36,910
specific to Android and then we'll use a

00:14:32,200 --> 00:14:38,650
client five with lip C++ and there's two

00:14:36,910 --> 00:14:44,560
new settings that have been introduced

00:14:38,650 --> 00:14:47,050
in Canon wine point point O to ease the

00:14:44,560 --> 00:14:50,650
development of build requirement

00:14:47,050 --> 00:14:53,440
packages because I want the NDK to run

00:14:50,650 --> 00:14:58,660
on my build platform not on a Android

00:14:53,440 --> 00:15:01,420
device and that's why I was build Alps

00:14:58,660 --> 00:15:04,540
to make the difference otherwise you

00:15:01,420 --> 00:15:06,580
will get a super cross compiler that can

00:15:04,540 --> 00:15:09,910
run on your mobile phone you don't want

00:15:06,580 --> 00:15:13,589
to use that so here always build equals

00:15:09,910 --> 00:15:18,370
Linux and as building as equals XE d 4

00:15:13,589 --> 00:15:22,420
so the NDK recipe right before same

00:15:18,370 --> 00:15:24,910
cannon fire start and then the settings

00:15:22,420 --> 00:15:28,440
we only only need always build an

00:15:24,910 --> 00:15:33,790
obstacle because we will fetch the

00:15:28,440 --> 00:15:39,190
precompiled binary arts archive for

00:15:33,790 --> 00:15:41,410
linux x64 then this package method I

00:15:39,190 --> 00:15:44,620
didn't use it in the previous slide

00:15:41,410 --> 00:15:47,440
because C make installs already did the

00:15:44,620 --> 00:15:49,390
job but here there's no C make and all

00:15:47,440 --> 00:15:53,350
we want to do is copy everything from

00:15:49,390 --> 00:15:56,709
the Android NDK and uncompressed

00:15:53,350 --> 00:16:01,450
archieve archive right to our package

00:15:56,709 --> 00:16:04,150
folder and then to be able to build a

00:16:01,450 --> 00:16:06,790
standalone to chain we need to have

00:16:04,150 --> 00:16:10,209
access to this bill slash tools folder

00:16:06,790 --> 00:16:13,270
that's why we put it in our selves in

00:16:10,209 --> 00:16:16,990
folder path so which means in the

00:16:13,270 --> 00:16:18,760
standalone to chain recipe this build

00:16:16,990 --> 00:16:20,860
tools folder will be in the path and

00:16:18,760 --> 00:16:25,900
once this tool chain will be created it

00:16:20,860 --> 00:16:30,520
will be removed so the tools and recipe

00:16:25,900 --> 00:16:32,470
doesn't have provenance 9 we same thing

00:16:30,520 --> 00:16:34,240
we need always build our build and then

00:16:32,470 --> 00:16:37,300
we declare our builder requirements on

00:16:34,240 --> 00:16:38,230
the probably previous package that we

00:16:37,300 --> 00:16:41,360
got

00:16:38,230 --> 00:16:43,940
in the build command we only need this

00:16:41,360 --> 00:16:47,630
make standard Shane Dallas H which is

00:16:43,940 --> 00:16:51,230
located in the indica tools folder so we

00:16:47,630 --> 00:16:57,500
simply run it and then in the package

00:16:51,230 --> 00:17:00,590
info we set our sis word so bit

00:16:57,500 --> 00:17:04,280
requirements can be specified in two

00:17:00,590 --> 00:17:06,920
ways either in the recipe but it's okay

00:17:04,280 --> 00:17:09,530
for a few package but here I want to use

00:17:06,920 --> 00:17:11,569
my tools and each time that I want to

00:17:09,530 --> 00:17:13,640
cross compile and I don't want to use it

00:17:11,569 --> 00:17:17,089
to add a very requirement in every

00:17:13,640 --> 00:17:19,670
recipe so what I can do is add the bill

00:17:17,089 --> 00:17:22,430
requires section in my profile and put

00:17:19,670 --> 00:17:25,910
it there and now each time that I will

00:17:22,430 --> 00:17:28,670
use this profile I will use this bill

00:17:25,910 --> 00:17:32,840
requirement so it's time for our final

00:17:28,670 --> 00:17:34,340
demo I already don't need it the ndk so

00:17:32,840 --> 00:17:39,790
you won't have to watch the progress bar

00:17:34,340 --> 00:17:43,270
for ten minutes so let's simply build

00:17:39,790 --> 00:17:43,270
this will chain

00:17:46,040 --> 00:17:55,680
Troy profile I'm a bit because

00:17:50,940 --> 00:17:59,270
I only handle one to train our arm 64

00:17:55,680 --> 00:18:03,140
and that's it for sake of simplicity and

00:17:59,270 --> 00:18:10,110
then I like to Train so I can show you

00:18:03,140 --> 00:18:13,130
inside Mari local cache here I have

00:18:10,110 --> 00:18:17,280
everything already packaging packaged

00:18:13,130 --> 00:18:22,650
for completion so let's go into our

00:18:17,280 --> 00:18:29,100
previous arithmetic folder and you

00:18:22,650 --> 00:18:32,820
couldn't create so now we can see it

00:18:29,100 --> 00:18:35,490
cannot put so in your current tells us

00:18:32,820 --> 00:18:39,750
your course building from Linux x264 to

00:18:35,490 --> 00:18:43,110
Android and 64 same thing as before and

00:18:39,750 --> 00:18:45,980
here there's build requirements so our

00:18:43,110 --> 00:18:50,060
to chain has been correctly detected

00:18:45,980 --> 00:18:54,600
simply we haven't changed the arithmetic

00:18:50,060 --> 00:18:57,480
recipe which is great and now see make

00:18:54,600 --> 00:19:00,990
already finds everything the API level

00:18:57,480 --> 00:19:04,770
the IBI etc the compiler everything gets

00:19:00,990 --> 00:19:07,070
built so I can rerun Coenen search sorry

00:19:04,770 --> 00:19:07,070
up

00:19:09,830 --> 00:19:17,639
and I am now I have to package first one

00:19:13,889 --> 00:19:28,080
for my own night machine and here for

00:19:17,639 --> 00:19:32,159
Hajj and Android app API 21 and that's

00:19:28,080 --> 00:19:34,409
it so I put I added a few things so our

00:19:32,159 --> 00:19:38,249
website or documentation there our

00:19:34,409 --> 00:19:40,919
github and the conan website gone on

00:19:38,249 --> 00:19:42,149
github there's also a slack channel on

00:19:40,919 --> 00:19:46,519
the CPP line

00:19:42,149 --> 00:19:49,229
slack you can join the hashtag Conan and

00:19:46,519 --> 00:20:06,499
I guess I'll take some questions from

00:19:49,229 --> 00:20:06,499
now does it work on the windows yes yes

00:20:10,759 --> 00:20:20,070
I I know this so the question is is this

00:20:16,710 --> 00:20:22,470
possible to build the Deb or RPM

00:20:20,070 --> 00:20:25,950
packages directly from :

00:20:22,470 --> 00:20:30,269
I don't know I've only packaged the C++

00:20:25,950 --> 00:20:32,609
dependencies from I I have no knowledge

00:20:30,269 --> 00:20:36,359
in distribution package management sorry

00:20:32,609 --> 00:20:37,679
a bit of a new Twitter but it might be

00:20:36,359 --> 00:20:41,720
possible I don't know I should I should

00:20:37,679 --> 00:20:41,720
check yes

00:20:44,830 --> 00:20:51,190
okay so the question is how many

00:20:48,640 --> 00:20:53,960
packages are already available

00:20:51,190 --> 00:20:58,570
prepackaged and how many I had to be

00:20:53,960 --> 00:21:02,299
myself so I started to use Conan in the

00:20:58,570 --> 00:21:07,240
0.20 version so the focus was more on

00:21:02,299 --> 00:21:11,179
the code source and debugging

00:21:07,240 --> 00:21:13,640
stabilization etc so there's more and

00:21:11,179 --> 00:21:17,510
more package on the Conan Center and the

00:21:13,640 --> 00:21:20,809
bean crafters repository for boost

00:21:17,510 --> 00:21:24,730
there's a recipe that for Android iOS

00:21:20,809 --> 00:21:41,720
etc you can use but I had to do lots

00:21:24,730 --> 00:21:45,230
myself so is this can you make a private

00:21:41,720 --> 00:21:47,169
repository we own our own Conan server

00:21:45,230 --> 00:21:50,360
on our server

00:21:47,169 --> 00:21:53,000
at work and yeah you can it's

00:21:50,360 --> 00:22:13,700
decentralized so you can do whatever you

00:21:53,000 --> 00:22:16,309
want you can host your own packages okay

00:22:13,700 --> 00:22:19,580
so the question is does gonna only work

00:22:16,309 --> 00:22:24,049
on C and C++ binaries you can package

00:22:19,580 --> 00:22:26,570
other languages but the helpers are the

00:22:24,049 --> 00:22:29,720
that are available so the self dot cpp

00:22:26,570 --> 00:22:32,450
info DC mikkel / etc are more focused on

00:22:29,720 --> 00:22:36,500
C and C++ but you can do that i packaged

00:22:32,450 --> 00:22:39,289
GD g DK and i think it works also for go

00:22:36,500 --> 00:22:42,289
it doesn't really care about that but

00:22:39,289 --> 00:22:44,330
maybe you have to use a different class

00:22:42,289 --> 00:22:46,640
than the conan file let's say the

00:22:44,330 --> 00:22:48,830
current file framework is more designed

00:22:46,640 --> 00:22:52,179
around c and c++ but yeah you could make

00:22:48,830 --> 00:22:52,179
your own for another language

00:23:01,269 --> 00:23:12,950
so is there competitors in this field

00:23:07,789 --> 00:23:16,250
other dynamic so there was previously an

00:23:12,950 --> 00:23:18,080
attempt to for a cross for a cheap as

00:23:16,250 --> 00:23:22,820
possible case manager I think it was

00:23:18,080 --> 00:23:26,389
named B code and it's dead so but on

00:23:22,820 --> 00:23:28,250
their repository the guys beyond conan

00:23:26,389 --> 00:23:32,090
are very reactive they're backed by a

00:23:28,250 --> 00:23:35,510
Jeb frog and yeah they work full-time on

00:23:32,090 --> 00:23:37,639
this they're very welcoming you can post

00:23:35,510 --> 00:23:49,309
any issues and there we answer in the

00:23:37,639 --> 00:23:52,240
day so if there's already some channel

00:23:49,309 --> 00:23:59,210
out there which packages what they need

00:23:52,240 --> 00:24:01,669
so how do I know if if there is already

00:23:59,210 --> 00:24:04,639
packages from for me on other remotes

00:24:01,669 --> 00:24:09,019
and so I used the Quran search method to

00:24:04,639 --> 00:24:11,059
you search inside Maya on tacky in it's

00:24:09,019 --> 00:24:13,070
my own local cache you could use it to

00:24:11,059 --> 00:24:16,730
look for remotes by default you only

00:24:13,070 --> 00:24:19,880
have two or three remotes installed but

00:24:16,730 --> 00:24:23,389
yeah since I've built everything or

00:24:19,880 --> 00:24:25,510
almost myself I'd no use for good

00:24:23,389 --> 00:24:30,010
answers but I think it works great

00:24:25,510 --> 00:24:30,010
should try then yes

00:24:35,390 --> 00:24:43,350
yes so by default sorry the question is

00:24:38,700 --> 00:24:46,050
is there a list of remotes that you can

00:24:43,350 --> 00:24:49,970
look for by default there's the Conant

00:24:46,050 --> 00:24:54,650
Center really the stable master wrench

00:24:49,970 --> 00:24:58,350
deacon on transit and there's another

00:24:54,650 --> 00:25:01,290
organization bin crafters that are

00:24:58,350 --> 00:25:05,520
making they succeeded in making a module

00:25:01,290 --> 00:25:08,250
modular boost installation so I didn't

00:25:05,520 --> 00:25:10,980
think it was possible so yeah you can

00:25:08,250 --> 00:25:14,900
they're doing a lot of packages you can

00:25:10,980 --> 00:25:14,900
look for that yes

00:25:17,210 --> 00:25:22,860
so is there any API for licensing I

00:25:20,340 --> 00:25:25,830
haven't shown in the demo but in the

00:25:22,860 --> 00:25:30,150
attributes you can use license and I

00:25:25,830 --> 00:25:33,480
think it can be yeah a search in I need

00:25:30,150 --> 00:25:44,400
to track but it it will surprise me if

00:25:33,480 --> 00:25:47,580
it didn't work so can those Coenen

00:25:44,400 --> 00:25:50,400
relocates the binaries it downloads no

00:25:47,580 --> 00:25:53,130
there's no I I don't think so there is

00:25:50,400 --> 00:26:02,190
no they don't touch the binaries once

00:25:53,130 --> 00:26:05,730
it's a so what do you mean exactly okay

00:26:02,190 --> 00:26:06,770
so of those the packages find their own

00:26:05,730 --> 00:26:10,530
requirements

00:26:06,770 --> 00:26:14,520
well you declare them I haven't used

00:26:10,530 --> 00:26:18,180
that but if you let's say I package that

00:26:14,520 --> 00:26:20,760
Lib and I want to depend on zan Lib on

00:26:18,180 --> 00:26:23,100
another package so I've shown the build

00:26:20,760 --> 00:26:28,460
requires attributes and there's also the

00:26:23,100 --> 00:26:35,130
requires attributes so you just put yes

00:26:28,460 --> 00:26:39,900
yes for bidding for cert library yeah

00:26:35,130 --> 00:26:43,610
but our path so I mainly use static

00:26:39,900 --> 00:26:46,460
libraries in in work at work but for

00:26:43,610 --> 00:26:49,010
shall library you can buy so yeah okay I

00:26:46,460 --> 00:26:53,900
get I get the by default there's no are

00:26:49,010 --> 00:26:56,390
parse ARPA's for on Mac OS they're all

00:26:53,900 --> 00:26:59,330
stripped so you just have the name of

00:26:56,390 --> 00:27:02,090
the library and then it's your it's your

00:26:59,330 --> 00:27:24,800
work to have some fun with install name

00:27:02,090 --> 00:27:27,650
tool for example so is that your

00:27:24,800 --> 00:27:30,490
responsibility to tell a binary where

00:27:27,650 --> 00:27:34,910
the C++ standard library is on a

00:27:30,490 --> 00:27:36,800
non-standard platform so by default

00:27:34,910 --> 00:27:41,710
there is no our path but you can let

00:27:36,800 --> 00:27:45,380
them you can yeah but I think I had to

00:27:41,710 --> 00:27:47,450
pay say in the tool train for example

00:27:45,380 --> 00:27:51,440
for Android we want to build a tree with

00:27:47,450 --> 00:27:53,900
the static lip C++ so we had to in the

00:27:51,440 --> 00:27:57,350
tool train add link flags for every

00:27:53,900 --> 00:28:01,040
package built with that library and then

00:27:57,350 --> 00:28:03,590
it were but before shared I didn't use

00:28:01,040 --> 00:28:06,440
that so it's quite a tricky question

00:28:03,590 --> 00:28:09,730
I need maybe we can see after the talk

00:28:06,440 --> 00:28:09,730
if you want yes

00:28:21,320 --> 00:28:43,010
in the so so how do you do when you have

00:28:40,760 --> 00:28:45,530
a library installed on your system and

00:28:43,010 --> 00:28:47,990
already and some the same library

00:28:45,530 --> 00:28:50,299
installed with Conan so if you use in

00:28:47,990 --> 00:28:54,919
your Civic file the include that I've

00:28:50,299 --> 00:28:57,980
shown it simply takes precedence over

00:28:54,919 --> 00:29:00,590
the system package III don't remember

00:28:57,980 --> 00:29:05,480
exactly the semester but it's the fine

00:29:00,590 --> 00:29:08,299
module and yeah yes the C make if you

00:29:05,480 --> 00:29:10,130
just use fine package or yeah for

00:29:08,299 --> 00:29:13,039
example file package which would usually

00:29:10,130 --> 00:29:15,020
find the system library then if you

00:29:13,039 --> 00:29:16,429
serve fine package and include the Khan

00:29:15,020 --> 00:29:20,409
online it would find equivalent

00:29:16,429 --> 00:29:20,409
libraries yes

00:29:23,440 --> 00:29:30,749

YouTube URL: https://www.youtube.com/watch?v=RDsn0TKcdPQ


