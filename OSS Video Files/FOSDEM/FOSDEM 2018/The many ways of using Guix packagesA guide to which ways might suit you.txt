Title: The many ways of using Guix packagesA guide to which ways might suit you
Publication date: 2018-02-03
Playlist: FOSDEM 2018
Description: 
	by Christopher Baines

At: FOSDEM 2018
Room: K.3.201
Scheduled start: 2018-02-03 14:30:00+01
Captions: 
	00:00:04,630 --> 00:00:10,469
so how everyone my name is Chris and I'm

00:00:08,770 --> 00:00:13,180
gonna talk a bit about getting geeks

00:00:10,469 --> 00:00:15,340
just as a quick survey how many people

00:00:13,180 --> 00:00:20,740
have heard of them do new geeks before

00:00:15,340 --> 00:00:24,310
for them why am I even here that's like

00:00:20,740 --> 00:00:26,830
most people okay so I found out about

00:00:24,310 --> 00:00:29,440
genuki back not last full stem but the

00:00:26,830 --> 00:00:31,810
one before back in 2016 I remember

00:00:29,440 --> 00:00:36,129
installing it the night before which is

00:00:31,810 --> 00:00:39,190
yeah I can't remember about it so some

00:00:36,129 --> 00:00:41,350
of the concepts involved in geeks take a

00:00:39,190 --> 00:00:42,940
little time to get used to so I've tried

00:00:41,350 --> 00:00:44,350
to break down the benefits and

00:00:42,940 --> 00:00:47,859
properties into three different areas

00:00:44,350 --> 00:00:50,109
kind of dependability flexibility and

00:00:47,859 --> 00:00:57,219
Geeks is position as a general purpose

00:00:50,109 --> 00:00:59,829
package manager so starting with

00:00:57,219 --> 00:01:02,559
dependability and I consider geeks to be

00:00:59,829 --> 00:01:04,420
very dependable the main building block

00:01:02,559 --> 00:01:07,690
for that dependability is the immutable

00:01:04,420 --> 00:01:09,820
store so the store is the directory

00:01:07,690 --> 00:01:13,119
where data can be added but it can't be

00:01:09,820 --> 00:01:15,100
changed the peaks the the location that

00:01:13,119 --> 00:01:18,700
is kind of fixed so it's out slash canoe

00:01:15,100 --> 00:01:21,189
slash store when you build packages with

00:01:18,700 --> 00:01:23,920
Peaks you can fix the behavior of those

00:01:21,189 --> 00:01:25,119
packages out at the build time so it

00:01:23,920 --> 00:01:28,630
doesn't change later on when you're

00:01:25,119 --> 00:01:30,219
using s on different systems I'll give

00:01:28,630 --> 00:01:33,700
some concrete examples of how to do this

00:01:30,219 --> 00:01:36,070
later on the other part is dependability

00:01:33,700 --> 00:01:39,670
is kind of coping of inevitable failures

00:01:36,070 --> 00:01:41,799
so sometimes things go wrong and the

00:01:39,670 --> 00:01:43,450
best best thing to do is just go back to

00:01:41,799 --> 00:01:45,700
when it was working before before you

00:01:43,450 --> 00:01:49,289
did anything and the architecture DG's

00:01:45,700 --> 00:01:49,289
is kind of elegant he supports that

00:01:50,159 --> 00:01:55,439
so having spent a couple of years now

00:01:53,189 --> 00:01:57,560
doing odd things of geeks I can say for

00:01:55,439 --> 00:02:00,119
sure that it's quite a flexible tool

00:01:57,560 --> 00:02:01,770
geek supports downloading packages like

00:02:00,119 --> 00:02:03,479
binary packages from the Internet

00:02:01,770 --> 00:02:07,500
it also supports building those same

00:02:03,479 --> 00:02:09,060
packages from source that building from

00:02:07,500 --> 00:02:10,349
source can come in really useful when

00:02:09,060 --> 00:02:12,209
you're building your own packages or

00:02:10,349 --> 00:02:13,340
tweaking the definitions for new ones

00:02:12,209 --> 00:02:17,220
you already have

00:02:13,340 --> 00:02:18,510
geeks also elegantly supports building

00:02:17,220 --> 00:02:19,769
like having multiple versions of the

00:02:18,510 --> 00:02:21,480
same package and having multiple

00:02:19,769 --> 00:02:23,819
versions of the same package even on the

00:02:21,480 --> 00:02:26,250
same system you can even have multiple

00:02:23,819 --> 00:02:28,200
like different variants of a single

00:02:26,250 --> 00:02:29,910
version of the single bit of software

00:02:28,200 --> 00:02:36,269
perhaps built with different comparison

00:02:29,910 --> 00:02:38,239
arguments finally geeks is a

00:02:36,269 --> 00:02:40,019
general-purpose package manager

00:02:38,239 --> 00:02:43,410
personally this is something I have a

00:02:40,019 --> 00:02:45,000
big preference for I think the kind of

00:02:43,410 --> 00:02:47,700
problems of package management are best

00:02:45,000 --> 00:02:49,290
best tackled without fracturing like the

00:02:47,700 --> 00:02:52,739
effort along lines like programming

00:02:49,290 --> 00:02:54,870
language or fields of use while geeks is

00:02:52,739 --> 00:02:57,480
a general-purpose package manager it has

00:02:54,870 --> 00:02:59,400
specific tooling so if you want if you

00:02:57,480 --> 00:03:02,209
want a docker image for example there

00:02:59,400 --> 00:03:04,859
were ways of getting from geeks to that

00:03:02,209 --> 00:03:07,620
geeks is a package manager because of

00:03:04,859 --> 00:03:10,920
this works on many systems so you can

00:03:07,620 --> 00:03:12,660
use it on Debian but also there is a

00:03:10,920 --> 00:03:16,139
system called geeks SD which is built

00:03:12,660 --> 00:03:17,930
around geeks itself so it kind of goes

00:03:16,139 --> 00:03:20,130
across that traditional boundary between

00:03:17,930 --> 00:03:23,840
package managers link to an operating

00:03:20,130 --> 00:03:23,840
system and other package managers

00:03:24,010 --> 00:03:28,900
right on to some practical stuff you

00:03:27,400 --> 00:03:32,769
might be able to guess what this command

00:03:28,900 --> 00:03:35,319
does it will look at the available

00:03:32,769 --> 00:03:37,709
packages find one called hello and then

00:03:35,319 --> 00:03:40,180
install it so the current users profile

00:03:37,709 --> 00:03:43,180
in case you haven't encounters hello hit

00:03:40,180 --> 00:03:44,890
some purpose is pretty simple provides a

00:03:43,180 --> 00:03:47,470
binary called hello that prints out

00:03:44,890 --> 00:03:49,690
hello world when you run it the the

00:03:47,470 --> 00:03:54,010
profile bit is key here and I'll try and

00:03:49,690 --> 00:03:56,170
explain this now so let's let's take an

00:03:54,010 --> 00:03:58,569
another example say you've you've

00:03:56,170 --> 00:04:01,569
installed two packages Sam tools and

00:03:58,569 --> 00:04:04,840
bowtie and you would end up with

00:04:01,569 --> 00:04:08,950
something that looks like this so you

00:04:04,840 --> 00:04:11,319
have a dot gigs profile thin link shown

00:04:08,950 --> 00:04:15,310
at the top and in your home directory it

00:04:11,319 --> 00:04:17,579
would point at another sim link in the

00:04:15,310 --> 00:04:20,139
search bar such geeks directory that

00:04:17,579 --> 00:04:23,320
symlink would then point to another

00:04:20,139 --> 00:04:25,320
similar names with a number and that sim

00:04:23,320 --> 00:04:27,970
link with them points into the store so

00:04:25,320 --> 00:04:32,650
it's the directory ending in - profile

00:04:27,970 --> 00:04:35,050
in the new store directory the number of

00:04:32,650 --> 00:04:37,300
the sibling here 42 is the generation of

00:04:35,050 --> 00:04:42,760
the profile so what kind of 40 second

00:04:37,300 --> 00:04:44,650
version of your profile the profile

00:04:42,760 --> 00:04:46,510
directory doesn't actually store the the

00:04:44,650 --> 00:04:48,729
files for those packages it's it's just

00:04:46,510 --> 00:04:52,510
linking to those those files in the

00:04:48,729 --> 00:04:54,099
packages in the store and all all this

00:04:52,510 --> 00:04:56,139
complexity is actually hidden hidden

00:04:54,099 --> 00:04:58,990
from the user when you if you run the

00:04:56,139 --> 00:05:00,849
geeks package command you will usually

00:04:58,990 --> 00:05:02,740
just get get the environment variables

00:05:00,849 --> 00:05:04,720
set up for you to use the packages

00:05:02,740 --> 00:05:07,360
you've installed so here the path will

00:05:04,720 --> 00:05:09,760
be set up to include the profile and

00:05:07,360 --> 00:05:12,630
that would put you can use Sam tools and

00:05:09,760 --> 00:05:12,630
then bowtie too

00:05:14,150 --> 00:05:20,630
so what happens if you make a change say

00:05:18,650 --> 00:05:22,580
you remove the bowtie package so just

00:05:20,630 --> 00:05:25,250
like you can do - - install you can do

00:05:22,580 --> 00:05:28,009
heat package - are and then the package

00:05:25,250 --> 00:05:30,590
you want to remove so a new generation

00:05:28,009 --> 00:05:33,979
of your profile we will be created so

00:05:30,590 --> 00:05:35,330
there's a 43 that's appeared and the

00:05:33,979 --> 00:05:39,800
similar links are now linking through

00:05:35,330 --> 00:05:41,539
that to the store the directory in the

00:05:39,800 --> 00:05:43,910
store for the profile at the bottom here

00:05:41,539 --> 00:05:46,669
has been updated and has been it no

00:05:43,910 --> 00:05:50,620
longer contains the bowtie to package

00:05:46,669 --> 00:05:50,620
it's just pointing at Sam tools package

00:05:51,820 --> 00:05:56,570
the critical thing that's happened here

00:05:54,740 --> 00:05:58,400
or rather not happened is you still have

00:05:56,570 --> 00:05:59,810
your old profile you still have all the

00:05:58,400 --> 00:06:00,759
stuff you had before you're just not

00:05:59,810 --> 00:06:03,380
using it anymore

00:06:00,759 --> 00:06:03,949
what this allows you to do is to

00:06:03,380 --> 00:06:06,949
rollback

00:06:03,949 --> 00:06:09,169
so you can just switch back to using the

00:06:06,949 --> 00:06:10,610
40 second generation of your profile and

00:06:09,169 --> 00:06:12,349
you're back with the same things she had

00:06:10,610 --> 00:06:14,479
before because the stores are mutable

00:06:12,349 --> 00:06:18,050
you know that this is the same the same

00:06:14,479 --> 00:06:21,710
stuff that cons have changed so yeah to

00:06:18,050 --> 00:06:23,150
recap the immutable nature of the sport

00:06:21,710 --> 00:06:26,120
combined with the way we're using

00:06:23,150 --> 00:06:27,919
profiles here means like you've got that

00:06:26,120 --> 00:06:33,349
dependability even if stuff goes wrong

00:06:27,919 --> 00:06:37,010
you can roll back so on some flexibility

00:06:33,349 --> 00:06:38,240
now so the geeks package command deals

00:06:37,010 --> 00:06:40,039
with profiles but there's another

00:06:38,240 --> 00:06:42,349
command that also does that as well eats

00:06:40,039 --> 00:06:43,669
environments commands the purpose of

00:06:42,349 --> 00:06:46,820
this command is create development

00:06:43,669 --> 00:06:48,470
environment so you want to work on a

00:06:46,820 --> 00:06:50,570
package but you don't want to install

00:06:48,470 --> 00:06:52,940
the dependencies using the each package

00:06:50,570 --> 00:06:53,659
command so you can run geeks environment

00:06:52,940 --> 00:06:56,060
hello

00:06:53,659 --> 00:06:57,590
and it will set you up with a it with an

00:06:56,060 --> 00:06:59,900
environment which contains the things

00:06:57,590 --> 00:07:02,270
you need to build that so like GCC in

00:06:59,900 --> 00:07:05,659
this case so if you you would run that

00:07:02,270 --> 00:07:08,750
commands look at your fine GCC's hearing

00:07:05,659 --> 00:07:11,330
a path you'd see it hearing off the end

00:07:08,750 --> 00:07:15,919
of the screen here

00:07:11,330 --> 00:07:17,930
and so looking past the purpose of the

00:07:15,919 --> 00:07:19,879
geeks environment commands it's a it's a

00:07:17,930 --> 00:07:22,969
very flexible way of dealing with like

00:07:19,879 --> 00:07:24,919
arbitrary profiles so here's how you

00:07:22,969 --> 00:07:29,780
would generate a profile containing the

00:07:24,919 --> 00:07:31,610
holo package and the Lyle package if you

00:07:29,780 --> 00:07:33,080
would look what's a look at the profile

00:07:31,610 --> 00:07:34,879
in the store you'd see something like

00:07:33,080 --> 00:07:37,159
this so we're looking here at the bin

00:07:34,879 --> 00:07:39,289
directory of that profile X it's

00:07:37,159 --> 00:07:41,569
composing those two packages by sim

00:07:39,289 --> 00:07:45,189
linking to the the files in the bin

00:07:41,569 --> 00:07:45,189
directories of those packages

00:07:46,240 --> 00:07:52,219
so to recap very quickly installing

00:07:50,629 --> 00:07:54,860
packages to your users profile you can

00:07:52,219 --> 00:07:56,240
do by each package - I entering a

00:07:54,860 --> 00:07:58,370
development environment can you use the

00:07:56,240 --> 00:08:00,080
geeks environment command and to enter

00:07:58,370 --> 00:08:02,569
an environment with like specific

00:08:00,080 --> 00:08:05,889
packages you can use the - - a - hoc

00:08:02,569 --> 00:08:08,719
flag it's the geeks environment command

00:08:05,889 --> 00:08:12,080
right let's look at some more

00:08:08,719 --> 00:08:14,629
interesting way using geeks packages so

00:08:12,080 --> 00:08:17,090
usually eats packages explicitly rely on

00:08:14,629 --> 00:08:21,050
the dependencies by pointing them where

00:08:17,090 --> 00:08:23,029
they like lie in the store so this is

00:08:21,050 --> 00:08:24,740
really useful for reliability because

00:08:23,029 --> 00:08:26,360
the stores are mutable if if you're

00:08:24,740 --> 00:08:28,610
pointing at something in it you know you

00:08:26,360 --> 00:08:30,229
hope that it doesn't you know you with

00:08:28,610 --> 00:08:32,990
some degree of reliability that's not

00:08:30,229 --> 00:08:35,209
going to change so the behavior of your

00:08:32,990 --> 00:08:37,909
package is kind of on that stable

00:08:35,209 --> 00:08:40,039
bedrock it also provides some

00:08:37,909 --> 00:08:43,190
flexibility because as you know what's

00:08:40,039 --> 00:08:45,470
used you can remove all the all the

00:08:43,190 --> 00:08:49,519
unnecessary stuff around the side so

00:08:45,470 --> 00:08:51,920
this is what this command does now the

00:08:49,519 --> 00:08:53,540
can like now the bash shell started in

00:08:51,920 --> 00:08:55,579
this environment will be started in an

00:08:53,540 --> 00:08:57,199
isolated Mountain aim space with only

00:08:55,579 --> 00:08:59,899
access to the parts of the store it

00:08:57,199 --> 00:09:01,190
needs that some certain bits of the root

00:08:59,899 --> 00:09:04,279
filesystem annual current working

00:09:01,190 --> 00:09:06,430
directory it's also in a different pit

00:09:04,279 --> 00:09:10,370
namespace and several other namespaces

00:09:06,430 --> 00:09:13,459
so if you to look at say the the

00:09:10,370 --> 00:09:17,400
contents of your store you only see what

00:09:13,459 --> 00:09:20,320
you need for running hello here and bash

00:09:17,400 --> 00:09:27,190
you also don't have like LS so tents why

00:09:20,320 --> 00:09:28,360
you have to use echo so like note here

00:09:27,190 --> 00:09:30,430
that I'm not talking about kind of

00:09:28,360 --> 00:09:31,600
containers and then well I am talking

00:09:30,430 --> 00:09:34,690
about containers in the sense of just

00:09:31,600 --> 00:09:36,100
Linux namespaces so like somehow the

00:09:34,690 --> 00:09:38,740
term containers has kind of been

00:09:36,100 --> 00:09:41,530
conflated with managing state and

00:09:38,740 --> 00:09:43,330
package management sadik's kind of

00:09:41,530 --> 00:09:45,370
you've got some separation between these

00:09:43,330 --> 00:09:47,350
two concepts you've you've got the

00:09:45,370 --> 00:09:48,640
information about what's using what's at

00:09:47,350 --> 00:09:50,560
the package manager level and that

00:09:48,640 --> 00:09:56,980
enables you to kind of add ons and

00:09:50,560 --> 00:09:58,300
contain a stuff on top so this is

00:09:56,980 --> 00:10:02,140
another way of looking at that

00:09:58,300 --> 00:10:03,700
information so here's a graph generated

00:10:02,140 --> 00:10:06,580
with peaks for the whole package

00:10:03,700 --> 00:10:07,780
it shows the references of that package

00:10:06,580 --> 00:10:11,800
and the things that you're referencing

00:10:07,780 --> 00:10:13,330
they're references as well so this along

00:10:11,800 --> 00:10:15,340
with another command called geek size

00:10:13,330 --> 00:10:17,770
can be really useful an understanding

00:10:15,340 --> 00:10:24,240
kind of what this graph looks like in

00:10:17,770 --> 00:10:24,240
the store so this

00:10:25,470 --> 00:10:29,160
if you actually look at what those

00:10:26,940 --> 00:10:31,200
references mean you one of the

00:10:29,160 --> 00:10:35,430
references that the whole package has is

00:10:31,200 --> 00:10:37,290
in the way that the binary is linking

00:10:35,430 --> 00:10:38,640
for the shared libraries it uses so you

00:10:37,290 --> 00:10:42,330
might not be able to read this very well

00:10:38,640 --> 00:10:44,670
because the text is quite small but on

00:10:42,330 --> 00:10:46,920
the on the left here we have here

00:10:44,670 --> 00:10:50,280
calling the l DD command on the hello

00:10:46,920 --> 00:10:53,580
binary in the store it's printing out

00:10:50,280 --> 00:10:55,290
these long long paths to show which

00:10:53,580 --> 00:10:57,450
shared libraries it's referencing and

00:10:55,290 --> 00:11:00,390
it's referencing them by their absolute

00:10:57,450 --> 00:11:02,820
location in the store though this gives

00:11:00,390 --> 00:11:05,220
you some reliability is like the whole

00:11:02,820 --> 00:11:07,650
binary won't change in its behavior or

00:11:05,220 --> 00:11:08,490
at least not from these things changing

00:11:07,650 --> 00:11:11,670
because they're not going to change

00:11:08,490 --> 00:11:13,650
though in the store so this is a

00:11:11,670 --> 00:11:15,390
concrete example of how you fix the

00:11:13,650 --> 00:11:18,630
behavior of a program at Build time so

00:11:15,390 --> 00:11:20,120
you build it to use these exact shared

00:11:18,630 --> 00:11:22,110
libraries and then that won't change

00:11:20,120 --> 00:11:27,180
even if you deploy it to a different

00:11:22,110 --> 00:11:28,950
system one thing so this this you might

00:11:27,180 --> 00:11:30,450
have no static linking and dynamic

00:11:28,950 --> 00:11:32,460
linking I mean this is a kind of like

00:11:30,450 --> 00:11:34,740
hybrid approach where you're doing

00:11:32,460 --> 00:11:36,420
dynamic linking you're getting some of

00:11:34,740 --> 00:11:40,700
the benefits and the stability from

00:11:36,420 --> 00:11:44,940
static linking that's quite cool so

00:11:40,700 --> 00:11:48,240
that's some flexibility so we've looked

00:11:44,940 --> 00:11:52,320
at geek package - - install you can tell

00:11:48,240 --> 00:11:54,630
it to use a different profile so say if

00:11:52,320 --> 00:11:56,790
having one profile per user which is how

00:11:54,630 --> 00:11:58,470
how geeks works by default isn't enough

00:11:56,790 --> 00:12:01,440
you can have arbitrary numbers of

00:11:58,470 --> 00:12:03,450
profiles what that will do is it will

00:12:01,440 --> 00:12:05,130
create some some sim links and where the

00:12:03,450 --> 00:12:06,690
way you put the profile so here in the

00:12:05,130 --> 00:12:09,620
current directory that point to the

00:12:06,690 --> 00:12:09,620
relevant bits in the store

00:12:09,940 --> 00:12:14,950
another neat way that I've I've come to

00:12:12,610 --> 00:12:17,230
use geeks is to integrate a program

00:12:14,950 --> 00:12:19,110
called Durham sodium there's a

00:12:17,230 --> 00:12:21,370
completely completely different thing

00:12:19,110 --> 00:12:26,380
it's an environment switcher for your

00:12:21,370 --> 00:12:28,600
shell so you can write a file called dot

00:12:26,380 --> 00:12:30,250
n bar C plus it in a directory and when

00:12:28,600 --> 00:12:32,470
you enter that directory Durham will

00:12:30,250 --> 00:12:34,200
kind of evaluate that file and set up

00:12:32,470 --> 00:12:38,020
your environment make some changes to it

00:12:34,200 --> 00:12:39,580
you can get geeks to like say say which

00:12:38,020 --> 00:12:41,560
environment variables you need to change

00:12:39,580 --> 00:12:43,930
to activate a profile so you can hook

00:12:41,560 --> 00:12:45,700
the two things together by putting

00:12:43,930 --> 00:12:49,030
something like this in your button bar C

00:12:45,700 --> 00:12:51,670
file so use the status ad-hoc GCC

00:12:49,030 --> 00:12:53,800
toolchain Python Python XML and that

00:12:51,670 --> 00:12:55,570
means so I've put this in the the

00:12:53,800 --> 00:12:59,710
temporary directory so that when I enter

00:12:55,570 --> 00:13:01,420
it eats finds out what I need to what

00:12:59,710 --> 00:13:04,300
environment Vera is I need to change to

00:13:01,420 --> 00:13:06,940
use these and then we'll adjust the

00:13:04,300 --> 00:13:08,020
environment to match so this is quite a

00:13:06,940 --> 00:13:09,850
cool way of kind of managing

00:13:08,020 --> 00:13:12,190
dependencies on your system you kind of

00:13:09,850 --> 00:13:16,920
just change into the directory and you

00:13:12,190 --> 00:13:16,920
get GCC appearing or python appearing

00:13:17,040 --> 00:13:23,200
okay another cool thing it's a geek pack

00:13:20,520 --> 00:13:24,820
is really practical offering some of the

00:13:23,200 --> 00:13:28,750
benefits of kind of bundling software

00:13:24,820 --> 00:13:32,230
together but also using geeks at the

00:13:28,750 --> 00:13:35,530
same time so some quick examples here

00:13:32,230 --> 00:13:37,810
packing up guile Emacs and Geiser so

00:13:35,530 --> 00:13:40,140
into into a tarball that contains not so

00:13:37,810 --> 00:13:42,550
V values packages but also all of their

00:13:40,140 --> 00:13:46,600
indirect and direct dependencies in the

00:13:42,550 --> 00:13:48,670
store you can also generate a tarball

00:13:46,600 --> 00:13:50,970
that's kind of of a format compatible

00:13:48,670 --> 00:13:54,160
with docker using the same approach and

00:13:50,970 --> 00:13:56,149
you just add bash a blocker onto the

00:13:54,160 --> 00:14:00,060
command

00:13:56,149 --> 00:14:03,930
alright geeks has around six and a half

00:14:00,060 --> 00:14:06,269
thousand possibly more packages be might

00:14:03,930 --> 00:14:07,680
want to use something that's missing one

00:14:06,269 --> 00:14:11,490
thing you could do is look at packaging

00:14:07,680 --> 00:14:13,350
it to get contains several importers so

00:14:11,490 --> 00:14:16,649
programs that can use existing metadata

00:14:13,350 --> 00:14:19,800
say on sites like pi PI for Python or

00:14:16,649 --> 00:14:21,120
Ruby gems to org for Ruby and creates a

00:14:19,800 --> 00:14:22,949
package definition using that

00:14:21,120 --> 00:14:24,600
information now depending on the

00:14:22,949 --> 00:14:26,459
importer and depending how on how

00:14:24,600 --> 00:14:28,199
complete the information is that has

00:14:26,459 --> 00:14:29,519
available you might get a package of it

00:14:28,199 --> 00:14:33,480
builds or you might need to do some

00:14:29,519 --> 00:14:34,889
tweaks but they're a very quick way

00:14:33,480 --> 00:14:41,730
importers are a very quick way of

00:14:34,889 --> 00:14:45,600
building packages so that's kind of

00:14:41,730 --> 00:14:47,009
readable here is an example package

00:14:45,600 --> 00:14:50,579
definition so this is for the hello

00:14:47,009 --> 00:14:54,360
package that we looked at earlier it's

00:14:50,579 --> 00:14:56,819
pretty simple it's not it's literally

00:14:54,360 --> 00:15:01,649
just this bit of code you don't have

00:14:56,819 --> 00:15:03,300
multiple files the entire build process

00:15:01,649 --> 00:15:05,069
is encapsulated into the build system

00:15:03,300 --> 00:15:08,069
which is around the middle kind of

00:15:05,069 --> 00:15:09,690
definition but this is this is a simple

00:15:08,069 --> 00:15:12,449
example of something that kind of

00:15:09,690 --> 00:15:14,610
follows some conventions geeks like you

00:15:12,449 --> 00:15:16,110
for some stuff some stuff is more

00:15:14,610 --> 00:15:17,699
complicated and you have to build more

00:15:16,110 --> 00:15:22,889
complicated package definition was to

00:15:17,699 --> 00:15:24,510
handle that now one part of why geeks

00:15:22,889 --> 00:15:27,630
packages are sown dependable is what

00:15:24,510 --> 00:15:29,130
this kind of represents even though

00:15:27,630 --> 00:15:30,750
we're not declaring any additional

00:15:29,130 --> 00:15:34,230
inputs beyond what the build system

00:15:30,750 --> 00:15:37,130
provides this package represents kind of

00:15:34,230 --> 00:15:37,130
all of that information

00:15:38,320 --> 00:15:43,720
so as well as the the source tarball to

00:15:42,490 --> 00:15:45,850
the source tarball it's kind of a best

00:15:43,720 --> 00:15:47,680
towards the top well some guessing

00:15:45,850 --> 00:15:49,959
towards is that you can you can pull out

00:15:47,680 --> 00:15:54,420
the information and graph it which gives

00:15:49,959 --> 00:15:56,980
you something like this so this is a

00:15:54,420 --> 00:15:59,170
representation of that package here

00:15:56,980 --> 00:16:03,160
we're graphing the the derivations for

00:15:59,170 --> 00:16:06,730
the package I don't expect you to read

00:16:03,160 --> 00:16:10,569
this but I've colored some the parts

00:16:06,730 --> 00:16:18,009
differently and so the the if you

00:16:10,569 --> 00:16:19,630
noticed the the source for her hello has

00:16:18,009 --> 00:16:22,269
this kind of hash in the bottom

00:16:19,630 --> 00:16:24,100
represented in base verse you see that

00:16:22,269 --> 00:16:27,130
means it's fixed data going into this

00:16:24,100 --> 00:16:29,620
kind of process for the fixed data parts

00:16:27,130 --> 00:16:31,329
of this process of colored in black and

00:16:29,620 --> 00:16:34,360
they kind of lie around the edge as

00:16:31,329 --> 00:16:36,399
you'd expect bits colored in purple

00:16:34,360 --> 00:16:39,459
towards the middle or the the derivation

00:16:36,399 --> 00:16:42,100
so the the bits bits of the process in

00:16:39,459 --> 00:16:45,880
building hello that takes some some data

00:16:42,100 --> 00:16:47,920
and awesome output some other

00:16:45,880 --> 00:16:51,550
derivations combine it together to build

00:16:47,920 --> 00:16:53,860
something so hello is one of these

00:16:51,550 --> 00:16:59,980
purple nodes and towards the left I

00:16:53,860 --> 00:17:01,420
think now you might have noticed and

00:16:59,980 --> 00:17:04,829
some of the examples I had earlier that

00:17:01,420 --> 00:17:09,790
there was a hash showing up so that hash

00:17:04,829 --> 00:17:11,890
represents this this this graph all the

00:17:09,790 --> 00:17:13,480
bits of data that are going into it that

00:17:11,890 --> 00:17:15,459
means if you change any part of this

00:17:13,480 --> 00:17:16,659
graph the hash will change in the

00:17:15,459 --> 00:17:18,280
package will be different

00:17:16,659 --> 00:17:20,770
this is how you kind of get different

00:17:18,280 --> 00:17:23,829
packages for different build steps the

00:17:20,770 --> 00:17:25,449
hash the hash describes all parts of the

00:17:23,829 --> 00:17:26,919
process so if you change a single part

00:17:25,449 --> 00:17:30,360
of the process you get a different hash

00:17:26,919 --> 00:17:30,360
a different entry in the store

00:17:30,690 --> 00:17:37,769
right so thank you for listening I

00:17:35,369 --> 00:17:40,710
intentionally kind of I think we're

00:17:37,769 --> 00:17:42,629
doing very well on time and I didn't put

00:17:40,710 --> 00:17:44,519
any demos in but I'm quite open for

00:17:42,629 --> 00:17:47,690
going back and trying to look at some of

00:17:44,519 --> 00:17:50,940
the things more more in more specifics

00:17:47,690 --> 00:17:52,679
this was kind of a like I before using

00:17:50,940 --> 00:17:54,690
geeks for a couple of years now I was

00:17:52,679 --> 00:17:56,279
quite familiar of doing Debian package

00:17:54,690 --> 00:17:58,019
things and it took me at least a year to

00:17:56,279 --> 00:18:01,440
come around to the idea this is kind of

00:17:58,019 --> 00:18:02,999
even sensible so it's not something I'm

00:18:01,440 --> 00:18:05,879
expecting to convince anyone kind of

00:18:02,999 --> 00:18:07,889
overnight but if you want to talk to

00:18:05,879 --> 00:18:10,169
other people there's a quite active RC

00:18:07,889 --> 00:18:11,789
channel on freenode and there were a

00:18:10,169 --> 00:18:14,489
blog posts and mailing lists on the

00:18:11,789 --> 00:18:16,499
website there's also a talk a couple of

00:18:14,489 --> 00:18:19,289
talks actually in the HBC track tomorrow

00:18:16,499 --> 00:18:23,070
and including one by Ludovic Cortez who

00:18:19,289 --> 00:18:28,399
um kind of started the geeks project any

00:18:23,070 --> 00:18:28,399
questions hello

00:18:29,320 --> 00:18:34,850
just geeks high-end means that kind of

00:18:32,809 --> 00:18:38,140
clearing up all packages so if you still

00:18:34,850 --> 00:18:38,140
some anti-tank life

00:18:38,660 --> 00:18:42,570
[Music]

00:18:39,800 --> 00:18:45,320
yes a the question was this Keeks have

00:18:42,570 --> 00:18:49,110
some way of clearing out old packages

00:18:45,320 --> 00:18:55,290
and the answer is yes so in the same way

00:18:49,110 --> 00:18:58,640
that actually I had a example you know

00:18:55,290 --> 00:19:01,740
didn't have an example for this so

00:18:58,640 --> 00:19:03,870
there's a command called geeks GC which

00:19:01,740 --> 00:19:06,180
is aptly named garbage collector it

00:19:03,870 --> 00:19:07,800
works in the same way as kind of you

00:19:06,180 --> 00:19:09,690
might be familiar with garbage

00:19:07,800 --> 00:19:12,330
collectors from like pogoing languages

00:19:09,690 --> 00:19:13,350
you have a graph the graph of items in

00:19:12,330 --> 00:19:15,600
the store which have kind of

00:19:13,350 --> 00:19:17,850
dependencies on each other you can

00:19:15,600 --> 00:19:20,160
traverse even starts at their like known

00:19:17,850 --> 00:19:22,170
kind of routes the think the the

00:19:20,160 --> 00:19:24,000
generations of your profile and the

00:19:22,170 --> 00:19:26,040
other bits of software that ever

00:19:24,000 --> 00:19:28,260
installed on your system you can find

00:19:26,040 --> 00:19:29,790
everything that is used in the store and

00:19:28,260 --> 00:19:32,760
then you can cut out everything else and

00:19:29,790 --> 00:19:34,500
get rid of it that's a like a really

00:19:32,760 --> 00:19:36,000
really safe process because you're

00:19:34,500 --> 00:19:38,160
because you've got those absolute

00:19:36,000 --> 00:19:40,200
dependency links you can remove stuff

00:19:38,160 --> 00:19:42,390
without worrying about someone using it

00:19:40,200 --> 00:19:44,190
providing they've kind of registered

00:19:42,390 --> 00:19:46,080
their use for it which like commands

00:19:44,190 --> 00:19:50,850
like each package and Geeks environment

00:19:46,080 --> 00:19:52,980
make easy to do yes it does you yeah you

00:19:50,850 --> 00:19:54,930
can get quite big stuff and especially

00:19:52,980 --> 00:19:57,660
on small systems you can run out of

00:19:54,930 --> 00:19:59,340
space but you can work out what's taking

00:19:57,660 --> 00:20:04,640
up your space and get rid of it from the

00:19:59,340 --> 00:20:11,130
store okay yes

00:20:04,640 --> 00:20:15,890
do both I my own particular softer than

00:20:11,130 --> 00:20:15,890
trying to package for HPC purposes

00:20:16,940 --> 00:20:21,150
currently support the indirectly

00:20:19,500 --> 00:20:22,230
supporting this back because it works

00:20:21,150 --> 00:20:24,110
for us

00:20:22,230 --> 00:20:26,580
easy both is a bit of an issue still

00:20:24,110 --> 00:20:29,550
what I want to be able to do is build my

00:20:26,580 --> 00:20:32,280
version of software with different

00:20:29,550 --> 00:20:35,760
variants build a version which has say

00:20:32,280 --> 00:20:38,130
32 bit labels integers 64 bits of floats

00:20:35,760 --> 00:20:39,510
or 32-bit floats with the particular

00:20:38,130 --> 00:20:41,490
version of boost with a different

00:20:39,510 --> 00:20:44,690
version of seiga with an older version

00:20:41,490 --> 00:20:47,430
of flex and have like six different

00:20:44,690 --> 00:20:50,250
combinations coexisting to be able to

00:20:47,430 --> 00:20:52,590
swap them yeah second point the question

00:20:50,250 --> 00:20:54,030
is I'd like to have this deployed in

00:20:52,590 --> 00:20:55,860
such a way that you can see this is

00:20:54,030 --> 00:20:59,810
going to be my installation path and

00:20:55,860 --> 00:21:02,700
then make that available on city

00:20:59,810 --> 00:21:06,800
generally available for everybody on the

00:21:02,700 --> 00:21:10,560
cluster and not one machine but say

00:21:06,800 --> 00:21:12,210
5,000 10,000 cores something like that

00:21:10,560 --> 00:21:20,460
we're not everyone is going to have

00:21:12,210 --> 00:21:24,180
Peaks installed there yeah so to

00:21:20,460 --> 00:21:27,720
summarize two questions first variant

00:21:24,180 --> 00:21:29,850
secondly cluster deployments so I didn't

00:21:27,720 --> 00:21:31,800
personally use any HPC stuff maybe some

00:21:29,850 --> 00:21:33,330
of the people who do because I know

00:21:31,800 --> 00:21:36,270
they're in the room can join in

00:21:33,330 --> 00:21:39,060
afterwards but yes variants there a

00:21:36,270 --> 00:21:41,520
possible thing so I was in the SPAC talk

00:21:39,060 --> 00:21:45,290
earlier so I know well what was said in

00:21:41,520 --> 00:21:47,520
that talk about variants and I Deeks has

00:21:45,290 --> 00:21:50,040
you can add some things on the command

00:21:47,520 --> 00:21:52,680
line for rewriting the kind of directed

00:21:50,040 --> 00:21:53,880
acyclic graph for packages but that

00:21:52,680 --> 00:21:55,980
sounds like it might not be quite

00:21:53,880 --> 00:21:58,500
sufficient for your case I mean but

00:21:55,980 --> 00:22:00,030
you've still got you can write out the

00:21:58,500 --> 00:22:01,590
package definitions and write out some

00:22:00,030 --> 00:22:03,600
functions to make the transformations

00:22:01,590 --> 00:22:07,500
you want to and that it should all be

00:22:03,600 --> 00:22:08,880
possible including yeah using multiple

00:22:07,500 --> 00:22:11,330
versions of things and managing it

00:22:08,880 --> 00:22:15,590
elegantly and the second part about

00:22:11,330 --> 00:22:19,669
profiles deploying this yeah

00:22:15,590 --> 00:22:21,440
so it sounds to me like the geeks kind

00:22:19,669 --> 00:22:23,929
of package command where you tell it to

00:22:21,440 --> 00:22:25,820
use a profile that might fit

00:22:23,929 --> 00:22:27,740
conveniently you can you can have a name

00:22:25,820 --> 00:22:30,740
for that that collection of software

00:22:27,740 --> 00:22:32,029
that you've kind of curated and you can

00:22:30,740 --> 00:22:36,110
put that somewhere on the system and

00:22:32,029 --> 00:22:38,240
then some user can can source the / UTC

00:22:36,110 --> 00:22:44,509
slash profile file within that and that

00:22:38,240 --> 00:22:46,700
will set up the whole environment so

00:22:44,509 --> 00:22:52,100
what could you load that up is a TCL or

00:22:46,700 --> 00:22:53,869
a lure module so like so could you have

00:22:52,100 --> 00:23:02,389
a lure module within that profile which

00:22:53,869 --> 00:23:04,730
you load up using Lua I'm not familiar

00:23:02,389 --> 00:23:07,279
very much of the modules thing for HPC

00:23:04,730 --> 00:23:08,869
but like if you wanted to if you have

00:23:07,279 --> 00:23:10,309
Louis stuff where in that profile then

00:23:08,869 --> 00:23:12,230
that should work if you have a Lua

00:23:10,309 --> 00:23:28,759
program to load that profile then that

00:23:12,230 --> 00:23:30,159
should work as well yeah cool so I'll

00:23:28,759 --> 00:23:33,289
repeat your answer I think that was a

00:23:30,159 --> 00:23:35,240
someone uses necks which is very similar

00:23:33,289 --> 00:23:38,850
to geeks and it's possible with with NYX

00:23:35,240 --> 00:23:42,130
so yes yeah yeah

00:23:38,850 --> 00:23:45,340
yep among the distributions that I can

00:23:42,130 --> 00:23:50,920
use a geeks on daughter is one of them

00:23:45,340 --> 00:23:53,650
on we do so I don't know if it working

00:23:50,920 --> 00:23:59,290
but I know that is that the bashful kind

00:23:53,650 --> 00:24:01,060
of gönül Ike thing on Windows I guess it

00:23:59,290 --> 00:24:02,800
should work I mean you might have some

00:24:01,060 --> 00:24:06,430
issues of getting the bill demon to work

00:24:02,800 --> 00:24:08,590
because the bill demon uses uses like

00:24:06,430 --> 00:24:10,570
namespaces which EV well Linux

00:24:08,590 --> 00:24:12,730
namespaces so you have to see how well

00:24:10,570 --> 00:24:16,480
Windows is kind of kernel supports those

00:24:12,730 --> 00:24:30,730
but the isolation but maybe if you yeah

00:24:16,480 --> 00:24:54,910
it might be a Windows and no I don't

00:24:30,730 --> 00:24:57,400
know anyone who's tried right the answer

00:24:54,910 --> 00:25:00,670
was with recent versions of Windows

00:24:57,400 --> 00:25:02,040
neck's works I should be good right I

00:25:00,670 --> 00:25:04,390
think time's up

00:25:02,040 --> 00:25:05,950
so I have some stickers that people want

00:25:04,390 --> 00:25:07,920
stickers and you can come and ask me

00:25:05,950 --> 00:25:10,920
questions afterwards as well

00:25:07,920 --> 00:25:10,920
yep

00:25:12,020 --> 00:25:21,510

YouTube URL: https://www.youtube.com/watch?v=q2F6_34tGKI


