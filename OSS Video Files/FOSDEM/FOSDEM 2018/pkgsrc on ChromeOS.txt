Title: pkgsrc on ChromeOS
Publication date: 2018-02-03
Playlist: FOSDEM 2018
Description: 
	by Benny Siegert

At: FOSDEM 2018
Room: K.3.401
Scheduled start: 2018-02-03 14:25:00+01
Captions: 
	00:00:04,650 --> 00:00:09,809
welcome back everyone hi my name is

00:00:07,680 --> 00:00:11,960
penny Siegert today I'm going to talk to

00:00:09,809 --> 00:00:17,279
you about packaged source of Chrome OS

00:00:11,960 --> 00:00:19,680
so it's not directly running on BSD but

00:00:17,279 --> 00:00:21,720
we're using a component of net BSD which

00:00:19,680 --> 00:00:25,650
is packaged source and running it on

00:00:21,720 --> 00:00:29,910
Chrome OS which is enough space but you

00:00:25,650 --> 00:00:32,489
know so so first I want to tell you why

00:00:29,910 --> 00:00:34,470
why we're going to do this thing or why

00:00:32,489 --> 00:00:38,370
I'm doing this thing for myself in its

00:00:34,470 --> 00:00:39,510
way and then I'm gonna present a little

00:00:38,370 --> 00:00:41,610
bit about chrome voice because it's

00:00:39,510 --> 00:00:45,510
quite an interesting operating system in

00:00:41,610 --> 00:00:47,309
my opinion we're going to be looking at

00:00:45,510 --> 00:00:51,750
bootstrapping packaged source so that we

00:00:47,309 --> 00:00:55,520
can use various packages that are in

00:00:51,750 --> 00:00:59,520
there and then some future work because

00:00:55,520 --> 00:01:04,949
as I said right now the work of getting

00:00:59,520 --> 00:01:07,350
package stores working well on on Chrome

00:01:04,949 --> 00:01:09,330
OS is very much work in progress but

00:01:07,350 --> 00:01:15,240
we're gonna see that so first of all why

00:01:09,330 --> 00:01:17,280
why am I doing this so I personally I

00:01:15,240 --> 00:01:19,890
think Chromebooks are very attractive

00:01:17,280 --> 00:01:21,890
laptops so you might be seeing that I'm

00:01:19,890 --> 00:01:25,860
presenting from FreeBSD machine because

00:01:21,890 --> 00:01:28,349
this Chromebook and this long chain of

00:01:25,860 --> 00:01:31,890
adapters didn't really work together but

00:01:28,349 --> 00:01:34,590
other than that you know they're kind of

00:01:31,890 --> 00:01:36,869
secure they have secure poops on by

00:01:34,590 --> 00:01:43,080
default operating system images are

00:01:36,869 --> 00:01:47,149
signed updates are signed they they put

00:01:43,080 --> 00:01:51,179
really quickly they they don't have a

00:01:47,149 --> 00:01:54,840
BIOS nor UEFI instead they have

00:01:51,179 --> 00:01:56,099
something that's similar to Linux BIOS I

00:01:54,840 --> 00:01:59,250
think it's called something else these

00:01:56,099 --> 00:02:01,200
days so they from from switching it on

00:01:59,250 --> 00:02:04,319
to getting to the login screen it's like

00:02:01,200 --> 00:02:07,830
five seconds which is great I've never

00:02:04,319 --> 00:02:10,470
had one break from the software so this

00:02:07,830 --> 00:02:12,840
the updates come weekly they they're

00:02:10,470 --> 00:02:14,159
installed in the background the only

00:02:12,840 --> 00:02:15,469
thing you notice that in their system

00:02:14,159 --> 00:02:19,159
tray you get a little

00:02:15,469 --> 00:02:22,400
a roll icon and and it essentially says

00:02:19,159 --> 00:02:23,569
the next time you're gonna restart your

00:02:22,400 --> 00:02:30,109
computer you're gonna have a new version

00:02:23,569 --> 00:02:31,489
which is nice the prices for the pricing

00:02:30,109 --> 00:02:34,189
for the hardware is often quite

00:02:31,489 --> 00:02:36,439
competitive I like the fact that they

00:02:34,189 --> 00:02:39,769
run Android apps so for us I don't know

00:02:36,439 --> 00:02:44,719
Chrome OS in a census chrome the browser

00:02:39,769 --> 00:02:48,019
is the operating system right but these

00:02:44,719 --> 00:02:50,299
days you can you can run Android apps on

00:02:48,019 --> 00:02:52,819
them and that's super handy for example

00:02:50,299 --> 00:02:54,650
I'm running the first-time companion

00:02:52,819 --> 00:02:57,500
Android app on this laptop and that

00:02:54,650 --> 00:03:01,400
allows me to like schedule or look at

00:02:57,500 --> 00:03:03,530
what talks I want to see and finally one

00:03:01,400 --> 00:03:06,560
of those things that you're either

00:03:03,530 --> 00:03:09,650
believing or not is you could say it's

00:03:06,560 --> 00:03:12,079
the power of the cloud and a Chromebook

00:03:09,650 --> 00:03:14,510
is mostly stateless device so it holds

00:03:12,079 --> 00:03:16,519
it holds your account the account

00:03:14,510 --> 00:03:18,049
credentials are our Google account

00:03:16,519 --> 00:03:22,000
credentials actually so if you have a

00:03:18,049 --> 00:03:27,009
gmail account you use that to log in but

00:03:22,000 --> 00:03:31,459
all of the settings are synced through

00:03:27,009 --> 00:03:33,259
various cloud mechanisms and most of the

00:03:31,459 --> 00:03:35,269
data you store is gonna be stored in

00:03:33,259 --> 00:03:38,680
something like Google Drive so what that

00:03:35,269 --> 00:03:42,409
means is if if my Chromebook breaks I

00:03:38,680 --> 00:03:46,759
can get a new one I can log in on that

00:03:42,409 --> 00:03:48,829
machine and then I get a basically an

00:03:46,759 --> 00:03:50,329
empty desktop and one by one like icons

00:03:48,829 --> 00:03:51,889
start reappearing and the Chrome apps

00:03:50,329 --> 00:03:54,319
are being reinstalled and everything and

00:03:51,889 --> 00:03:58,040
then like five minutes later it it is as

00:03:54,319 --> 00:04:00,590
it was with the exception of things have

00:03:58,040 --> 00:04:03,340
downloads with local hard drive so

00:04:00,590 --> 00:04:08,329
that's kind of nice however we're gonna

00:04:03,340 --> 00:04:09,439
sort of get remove this property in a

00:04:08,329 --> 00:04:15,909
few minutes by installing software

00:04:09,439 --> 00:04:18,799
locally but sure why not now as I said

00:04:15,909 --> 00:04:21,320
it's Chrome OS is an operating system

00:04:18,799 --> 00:04:24,260
where the browser is the OS or at least

00:04:21,320 --> 00:04:27,380
that's what the marketing speaks says so

00:04:24,260 --> 00:04:28,550
how are you gonna get local software on

00:04:27,380 --> 00:04:31,430
this thing there's two

00:04:28,550 --> 00:04:33,860
waise there's really three ways the

00:04:31,430 --> 00:04:37,810
first one is you can install something

00:04:33,860 --> 00:04:40,400
called term ox it is an Android app that

00:04:37,810 --> 00:04:44,000
pretends to be terminal emulator but it

00:04:40,400 --> 00:04:47,870
happens to include more or less full

00:04:44,000 --> 00:04:51,950
Linux user land so you can you can

00:04:47,870 --> 00:04:54,550
configure that and then your software

00:04:51,950 --> 00:05:00,320
that you install it's gonna run in that

00:04:54,550 --> 00:05:03,080
Android thing and you can interact with

00:05:00,320 --> 00:05:06,560
it through the the graphical front-end

00:05:03,080 --> 00:05:09,980
essentially or you can set up SSH and

00:05:06,560 --> 00:05:12,920
SSH into that container or whatever you

00:05:09,980 --> 00:05:15,350
want to call it I'm not going to talk

00:05:12,920 --> 00:05:18,410
about that that's the way that some

00:05:15,350 --> 00:05:21,100
people use but the thing I chose is you

00:05:18,410 --> 00:05:23,540
can set up the machine in developer mode

00:05:21,100 --> 00:05:29,750
so developer mode removes certain

00:05:23,540 --> 00:05:32,470
restrictions and it's originally it's

00:05:29,750 --> 00:05:35,270
meant for people developing the OS

00:05:32,470 --> 00:05:38,330
themselves but we can also use it to

00:05:35,270 --> 00:05:41,650
develop software locally by installing

00:05:38,330 --> 00:05:44,000
software and then developer mode is a

00:05:41,650 --> 00:05:49,520
used to be Hardware switch these days is

00:05:44,000 --> 00:05:51,440
a software switch some like if you have

00:05:49,520 --> 00:05:53,210
a managed Chromebook for example if your

00:05:51,440 --> 00:05:54,800
employer gives you one it's very likely

00:05:53,210 --> 00:05:57,110
that you're not allowed to switch that

00:05:54,800 --> 00:05:59,060
on so that's very unfortunate

00:05:57,110 --> 00:06:01,370
however there's this way number three

00:05:59,060 --> 00:06:03,700
and it's kind of the sneak preview if

00:06:01,370 --> 00:06:07,130
you go into crush the Chrome OS shell

00:06:03,700 --> 00:06:08,960
you'll notice there is a very poorly

00:06:07,130 --> 00:06:11,300
documented command that's just called C

00:06:08,960 --> 00:06:15,470
and it says run something in the

00:06:11,300 --> 00:06:17,930
container and it's very intriguing you

00:06:15,470 --> 00:06:22,430
can look into the source code to to work

00:06:17,930 --> 00:06:24,620
out how it works I think the idea is

00:06:22,430 --> 00:06:26,780
that you can set up a local container

00:06:24,620 --> 00:06:29,000
containing a user land and it would be

00:06:26,780 --> 00:06:32,540
isolated enough so that you can use it

00:06:29,000 --> 00:06:34,280
even in non developer mode however it

00:06:32,540 --> 00:06:36,050
requires the container to be signed in

00:06:34,280 --> 00:06:37,610
some way and I haven't figured out how

00:06:36,050 --> 00:06:38,720
that works but and it's also not

00:06:37,610 --> 00:06:40,760
officially released

00:06:38,720 --> 00:06:44,510
but you know the command is there and

00:06:40,760 --> 00:06:47,480
the source code is also there so

00:06:44,510 --> 00:06:51,980
developer mode it is so how does Chrome

00:06:47,480 --> 00:06:54,080
OS look internally it's based on Linux

00:06:51,980 --> 00:06:57,080
it's based on Gentoo Linux that's

00:06:54,080 --> 00:06:59,930
probably the first big surprise if you

00:06:57,080 --> 00:07:02,450
if you ever build chromium OS it's the

00:06:59,930 --> 00:07:05,020
open-source version of Chrome OS if you

00:07:02,450 --> 00:07:07,220
ever built chromium OS from source

00:07:05,020 --> 00:07:09,140
there's a thing called read hold it'll

00:07:07,220 --> 00:07:13,000
download like various deep triples and

00:07:09,140 --> 00:07:15,260
stuff and then at some point like

00:07:13,000 --> 00:07:19,280
portage starts up and starts emerging

00:07:15,260 --> 00:07:21,200
things it's bit weird but hey it's a

00:07:19,280 --> 00:07:25,960
really well integrated general system so

00:07:21,200 --> 00:07:25,960
why not so on the on the Linux kernel

00:07:27,430 --> 00:07:33,140
chrome is your main user land thing that

00:07:30,560 --> 00:07:34,910
runs there is no X over in between there

00:07:33,140 --> 00:07:37,610
is no wayland in between I think it's

00:07:34,910 --> 00:07:45,680
chrome runs directly on the frame buffer

00:07:37,610 --> 00:07:48,200
I believe and the Android runtime so of

00:07:45,680 --> 00:07:52,090
the whole running Android applications

00:07:48,200 --> 00:07:55,790
locally runs in a local container it

00:07:52,090 --> 00:07:57,979
shares the host kernel which is

00:07:55,790 --> 00:08:00,250
interesting so if you do a px and a term

00:07:57,979 --> 00:08:05,690
a PS and a terminal you're going to see

00:08:00,250 --> 00:08:07,250
the typical thingamajig daemon the

00:08:05,690 --> 00:08:09,410
kernel processes and then there are all

00:08:07,250 --> 00:08:13,280
these processes with names like Kombat

00:08:09,410 --> 00:08:17,030
googled or Android blah and they're all

00:08:13,280 --> 00:08:19,970
in the same process space so this

00:08:17,030 --> 00:08:24,910
container provides some isolation and

00:08:19,970 --> 00:08:27,440
these isolation between users is a

00:08:24,910 --> 00:08:31,280
little bit of a figment and a little bit

00:08:27,440 --> 00:08:34,219
not it's it's a bit special as so many

00:08:31,280 --> 00:08:35,630
things there is one non privileged user

00:08:34,219 --> 00:08:38,810
in the system is called Chronos

00:08:35,630 --> 00:08:41,030
incidentally Chronos is the the code

00:08:38,810 --> 00:08:44,110
name that Chrome OS itself had

00:08:41,030 --> 00:08:46,250
internally before it was released and

00:08:44,110 --> 00:08:49,610
and of course there's the root user in

00:08:46,250 --> 00:08:51,700
various system users when you're seeing

00:08:49,610 --> 00:08:53,590
the login screen in the UI

00:08:51,700 --> 00:08:56,380
it presents you with all the users that

00:08:53,590 --> 00:08:59,140
have accounts on the system it's already

00:08:56,380 --> 00:09:02,140
a logged in user session from the UNIX

00:08:59,140 --> 00:09:03,970
point of view so the the chrome that

00:09:02,140 --> 00:09:07,930
renders the login window already runs

00:09:03,970 --> 00:09:09,400
this user Chronos and when when you

00:09:07,930 --> 00:09:14,500
enter a password and you quote unquote

00:09:09,400 --> 00:09:16,240
login in the UI what happens is for

00:09:14,500 --> 00:09:18,760
every user that has an accounts there is

00:09:16,240 --> 00:09:21,510
an encrypted filesystem image and the

00:09:18,760 --> 00:09:24,460
encryption key is based on your password

00:09:21,510 --> 00:09:28,090
so with the password you entered it's

00:09:24,460 --> 00:09:30,580
gonna mount and decrypt the this

00:09:28,090 --> 00:09:32,800
filesystem container that contains your

00:09:30,580 --> 00:09:35,200
files and it's going to be mounted under

00:09:32,800 --> 00:09:40,600
home Chronos user so the home Chronos

00:09:35,200 --> 00:09:42,910
basically is all the users on the system

00:09:40,600 --> 00:09:45,400
whereas home Kronos user which was set

00:09:42,910 --> 00:09:50,860
to dollar home is inside this encrypted

00:09:45,400 --> 00:09:53,470
filesystem in developer mode you have a

00:09:50,860 --> 00:09:57,700
virtual terminal number to control out F

00:09:53,470 --> 00:10:01,330
two although f2 is really the forward

00:09:57,700 --> 00:10:04,480
arrow key opens a text console with a

00:10:01,330 --> 00:10:09,700
centered login it looks fairly standard

00:10:04,480 --> 00:10:11,950
like a like a gentle system and crush

00:10:09,700 --> 00:10:16,330
the Chrome OS shell which you've reached

00:10:11,950 --> 00:10:17,890
by pressing ctrl t gains a new command

00:10:16,330 --> 00:10:20,320
called shell and that gives you a bash

00:10:17,890 --> 00:10:23,320
and so that's what I mainly use for

00:10:20,320 --> 00:10:24,550
working on the command line so you're

00:10:23,320 --> 00:10:28,510
going to have a browser tab and the

00:10:24,550 --> 00:10:32,740
browser tab runs a terminal and in the

00:10:28,510 --> 00:10:37,120
terminal you have bash and you can run T

00:10:32,740 --> 00:10:39,310
marks or whatever you want to run you

00:10:37,120 --> 00:10:40,720
could also if you don't like this

00:10:39,310 --> 00:10:42,400
particular terminal emulator you could

00:10:40,720 --> 00:10:44,950
also set up SSH and a station to your

00:10:42,400 --> 00:10:49,510
local machine but you don't really need

00:10:44,950 --> 00:10:51,520
to so that's the story about user user

00:10:49,510 --> 00:10:54,100
isolation there are a couple more or

00:10:51,520 --> 00:10:57,210
idiosyncratic features of their OS that

00:10:54,100 --> 00:10:58,910
you stumble over when you use it so

00:10:57,210 --> 00:10:59,870
first of all

00:10:58,910 --> 00:11:02,270
the first thing I noticed is that

00:10:59,870 --> 00:11:05,510
there's no man command and it is kind of

00:11:02,270 --> 00:11:07,130
weird but then again the operating

00:11:05,510 --> 00:11:08,960
system you use is not really meant to be

00:11:07,130 --> 00:11:12,200
used on a command line so I can see them

00:11:08,960 --> 00:11:16,670
not including it package source whip

00:11:12,200 --> 00:11:18,620
does have a package for man I haven't

00:11:16,670 --> 00:11:20,210
tried that out but that in principle

00:11:18,620 --> 00:11:28,600
should work and should give you man

00:11:20,210 --> 00:11:31,340
pages the the walk command on the system

00:11:28,600 --> 00:11:33,500
I'll talk a little bit more about that

00:11:31,340 --> 00:11:37,460
later is very very minimal and

00:11:33,500 --> 00:11:40,130
restricted for security reasons the only

00:11:37,460 --> 00:11:43,340
editor are found in the base system by

00:11:40,130 --> 00:11:45,980
default this of him and vim is compiled

00:11:43,340 --> 00:11:50,330
with the tiny feature set so it has no

00:11:45,980 --> 00:11:52,430
like syntax highlighting I think it does

00:11:50,330 --> 00:11:54,800
have several buffer I'm not sure if it

00:11:52,430 --> 00:11:57,880
has multi buffer support but it has no

00:11:54,800 --> 00:12:01,010
syntax highlighting no dipping no

00:11:57,880 --> 00:12:04,330
language extension support no whatever

00:12:01,010 --> 00:12:08,840
but you can edit files with it so it's

00:12:04,330 --> 00:12:13,940
close enough and it has a somewhat

00:12:08,840 --> 00:12:16,460
aggressive thing that kills processes

00:12:13,940 --> 00:12:21,230
that have buffer overruns I don't know

00:12:16,460 --> 00:12:23,330
exactly how that is called but for

00:12:21,230 --> 00:12:25,850
example the this vim thing when I tried

00:12:23,330 --> 00:12:28,820
to build a full feature trim from

00:12:25,850 --> 00:12:31,340
package doors it gets killed immediately

00:12:28,820 --> 00:12:32,660
won't start up with theirs had been a

00:12:31,340 --> 00:12:34,310
buffer overflow detected I'm going to

00:12:32,660 --> 00:12:39,620
kill this process and I haven't figured

00:12:34,310 --> 00:12:42,320
out why and then the other thing is that

00:12:39,620 --> 00:12:44,780
they removed various things from the

00:12:42,320 --> 00:12:47,110
system such as NIS which nobody in their

00:12:44,780 --> 00:12:51,350
right mind would use especially in 2018

00:12:47,110 --> 00:12:54,860
or a bunch of libraries that are on the

00:12:51,350 --> 00:12:57,010
system are not delivered with headers

00:12:54,860 --> 00:12:59,540
which again is understandable because

00:12:57,010 --> 00:13:04,520
yeah it's so system that assumes that

00:12:59,540 --> 00:13:08,180
you don't develop in theory and that

00:13:04,520 --> 00:13:10,460
trips up a bunch of software that

00:13:08,180 --> 00:13:11,990
essentially it's badly written that says

00:13:10,460 --> 00:13:13,700
like this is a Linux system so there

00:13:11,990 --> 00:13:16,220
should really be an SE Linux library

00:13:13,700 --> 00:13:20,360
with its headers and if there's not then

00:13:16,220 --> 00:13:23,270
it just breaks so so that's something

00:13:20,360 --> 00:13:26,529
I've tripped over a few times other than

00:13:23,270 --> 00:13:31,370
that it's it's actually a surprisingly

00:13:26,529 --> 00:13:33,020
standard Linux usual and you're in for a

00:13:31,370 --> 00:13:36,140
surprise when you run the mount command

00:13:33,020 --> 00:13:38,750
though this is a tiny extra extract of

00:13:36,140 --> 00:13:41,649
it in a full-screen terminal mount is

00:13:38,750 --> 00:13:44,570
more than a screen full most of that is

00:13:41,649 --> 00:13:46,160
because of all those bind mounds and

00:13:44,570 --> 00:13:48,020
null mounds and whatever they're called

00:13:46,160 --> 00:13:49,820
way it can like graft a bit of the

00:13:48,020 --> 00:13:52,279
filesystem somewhere else which they use

00:13:49,820 --> 00:13:55,459
for setting up container paths and so on

00:13:52,279 --> 00:13:57,380
and like there's an emulated SD card in

00:13:55,459 --> 00:13:59,570
the Android container / SD card

00:13:57,380 --> 00:14:02,420
directory and all a bunch of nonsense

00:13:59,570 --> 00:14:05,410
like that but the essential structure

00:14:02,420 --> 00:14:09,589
that I would like to work you through is

00:14:05,410 --> 00:14:15,529
on slash you have this device manager

00:14:09,589 --> 00:14:17,120
device and it's read-only you can when

00:14:15,529 --> 00:14:20,120
you when you set your machine into

00:14:17,120 --> 00:14:22,730
developer mode you can set it into some

00:14:20,120 --> 00:14:24,709
sort of extended developer mode or

00:14:22,730 --> 00:14:26,839
whatever it's called where everything

00:14:24,709 --> 00:14:28,970
gets read right and you can SSH in

00:14:26,839 --> 00:14:29,810
without a password and all about a whole

00:14:28,970 --> 00:14:33,080
bunch of other things

00:14:29,810 --> 00:14:34,910
I don't know recommend that so I

00:14:33,080 --> 00:14:38,779
recommend you to leave the slash

00:14:34,910 --> 00:14:41,390
partition read-only and keep it managed

00:14:38,779 --> 00:14:43,430
by the OS updater essentially so you're

00:14:41,390 --> 00:14:45,290
gonna keep getting these weekly updates

00:14:43,430 --> 00:14:47,570
and every time it's gonna just do random

00:14:45,290 --> 00:14:54,470
things that you don't care about in the

00:14:47,570 --> 00:14:55,670
slash partition and you can even once

00:14:54,470 --> 00:14:58,700
you're in developer mode you can

00:14:55,670 --> 00:15:02,300
re-enable secure boot because it the

00:14:58,700 --> 00:15:05,110
default gets disabled and and then your

00:15:02,300 --> 00:15:08,800
your operating system images are

00:15:05,110 --> 00:15:12,709
verified which is good the other thing

00:15:08,800 --> 00:15:14,630
the other two important partitions are

00:15:12,709 --> 00:15:18,620
the one that's called stateful partition

00:15:14,630 --> 00:15:19,720
and that is read/write and the OEM

00:15:18,620 --> 00:15:23,649
partition which

00:15:19,720 --> 00:15:25,360
and my my machine has almost nothing

00:15:23,649 --> 00:15:27,069
that they always it so that the

00:15:25,360 --> 00:15:30,910
manufacturer of the Chromebook can put

00:15:27,069 --> 00:15:33,879
their own crap in there and the stateful

00:15:30,910 --> 00:15:35,500
partition is the one that holds the

00:15:33,879 --> 00:15:38,759
encrypted filesystem image for all the

00:15:35,500 --> 00:15:41,709
users they're just you know loopback

00:15:38,759 --> 00:15:43,720
loopback mounds of on that partition and

00:15:41,709 --> 00:15:46,060
the stateful partition is also the thing

00:15:43,720 --> 00:15:52,180
that is wiped when you as they call it

00:15:46,060 --> 00:15:57,550
power wash the device and and it's the

00:15:52,180 --> 00:15:58,870
thing that has the main main part of the

00:15:57,550 --> 00:16:01,060
internal storage so the slash is

00:15:58,870 --> 00:16:02,560
relatively tiny and most of it is on the

00:16:01,060 --> 00:16:05,439
stateful partition so you can use it for

00:16:02,560 --> 00:16:11,430
your data so you see home Chronos user

00:16:05,439 --> 00:16:11,430
that's the encrypted filesystem thing

00:16:12,689 --> 00:16:19,810
user local is one of those bind mounds

00:16:17,009 --> 00:16:23,610
one thing to notice is that your home

00:16:19,810 --> 00:16:28,980
directory is no s UID no def and no x'q

00:16:23,610 --> 00:16:31,809
so developing inside there is no fun

00:16:28,980 --> 00:16:34,540
however the only bit of the filesystem

00:16:31,809 --> 00:16:35,079
that is exposed to the UI of the local

00:16:34,540 --> 00:16:38,430
filesystem

00:16:35,079 --> 00:16:42,189
is the Downloads folder under your home

00:16:38,430 --> 00:16:44,559
so what I do is I have a home Chronos

00:16:42,189 --> 00:16:46,389
user downloads source where I put all my

00:16:44,559 --> 00:16:48,759
source tree so I can use like three

00:16:46,389 --> 00:16:50,500
editors and Chrome apps through to work

00:16:48,759 --> 00:16:52,540
on those but if I want to compile

00:16:50,500 --> 00:16:54,639
something then I need to put in some

00:16:52,540 --> 00:16:56,559
sort of temporary directory or or you

00:16:54,639 --> 00:17:01,300
know packaged source all of it is in

00:16:56,559 --> 00:17:02,889
then use a local for me so so here's my

00:17:01,300 --> 00:17:05,199
recommendation as I said leave the root

00:17:02,889 --> 00:17:07,839
partition read-only play around and use

00:17:05,199 --> 00:17:11,140
a local or the state for partition which

00:17:07,839 --> 00:17:14,110
is the same thing really or you might

00:17:11,140 --> 00:17:18,299
choose to to put an SD card or something

00:17:14,110 --> 00:17:21,539
or even a USB stick into your laptop and

00:17:18,299 --> 00:17:25,299
format that as x2 and mounted without no

00:17:21,539 --> 00:17:27,339
exec and then play in that maybe that's

00:17:25,299 --> 00:17:32,070
also sensible because you can make a

00:17:27,339 --> 00:17:32,070
very large SD card these things

00:17:36,210 --> 00:17:45,370
you could probably I haven't tried that

00:17:38,770 --> 00:17:48,010
but peckish sources not very opinionated

00:17:45,370 --> 00:17:50,740
it allows you to install it anywhere so

00:17:48,010 --> 00:17:53,170
that's so that's that's nice

00:17:50,740 --> 00:17:56,440
so now let's let's jump to package doors

00:17:53,170 --> 00:17:59,110
actually so what is it it's the net bsd

00:17:56,440 --> 00:18:01,510
package collection and at the time of

00:17:59,110 --> 00:18:06,040
writing or if passed the twenty thousand

00:18:01,510 --> 00:18:08,410
package mark which is quite a lot so

00:18:06,040 --> 00:18:10,360
these packages are the main part of

00:18:08,410 --> 00:18:13,450
package source is essentially a large

00:18:10,360 --> 00:18:16,810
tree of make files that encode how to

00:18:13,450 --> 00:18:19,150
build all these packages how to what

00:18:16,810 --> 00:18:20,650
their dependencies are like what what

00:18:19,150 --> 00:18:22,390
packages you need to have installed the

00:18:20,650 --> 00:18:26,650
furqan even try to build and so on and

00:18:22,390 --> 00:18:29,020
so forth package doors is released once

00:18:26,650 --> 00:18:32,950
a quarter every three months the last

00:18:29,020 --> 00:18:38,800
release was called 2017 q4 was around

00:18:32,950 --> 00:18:40,830
the new year's eve these releases are

00:18:38,800 --> 00:18:43,720
kept up to date with security updates

00:18:40,830 --> 00:18:44,770
although i'll show you the stuff i'm

00:18:43,720 --> 00:18:49,530
going to show you later is all on

00:18:44,770 --> 00:18:49,530
package source current unfortunately and

00:18:49,650 --> 00:18:57,610
in principle it has the the possibility

00:18:55,300 --> 00:19:00,790
of using binary packages or building

00:18:57,610 --> 00:19:03,400
things from source however because this

00:19:00,790 --> 00:19:05,500
is a new platform there are no binary

00:19:03,400 --> 00:19:09,810
packages yet package source itself

00:19:05,500 --> 00:19:13,390
supports 20 different OS types and

00:19:09,810 --> 00:19:17,530
several variants and a whole bunch

00:19:13,390 --> 00:19:21,250
basically any architecture that that or

00:19:17,530 --> 00:19:23,020
if those OSS might run on one thing I

00:19:21,250 --> 00:19:25,710
forgot to mention Chrome OS itself has

00:19:23,020 --> 00:19:29,680
four different architectures it has

00:19:25,710 --> 00:19:35,410
essentially 32-bit x86 64-bit x86 and

00:19:29,680 --> 00:19:38,220
then arm in 34 32 and 64 bits

00:19:35,410 --> 00:19:42,050
so this Chromebook over there is a

00:19:38,220 --> 00:19:45,380
Samsung Chromebook pro

00:19:42,050 --> 00:19:48,530
as Amy 64 architecture the Samsung

00:19:45,380 --> 00:19:50,420
Chromebook plus is a 64-bit arm so you

00:19:48,530 --> 00:19:53,360
have all the variants I've only tested

00:19:50,420 --> 00:19:55,550
ami 64 challenge number one when you

00:19:53,360 --> 00:19:58,490
want to build stuff where you get a

00:19:55,550 --> 00:20:03,740
compiler or rather whether you get to

00:19:58,490 --> 00:20:05,210
chain from so chrome OS has a command in

00:20:03,740 --> 00:20:07,970
dev mode that's called def install

00:20:05,210 --> 00:20:10,190
that's supposed to install tools for you

00:20:07,970 --> 00:20:12,200
to develop but as however it installs a

00:20:10,190 --> 00:20:16,130
whole bunch of crap like Ruby and and

00:20:12,200 --> 00:20:21,370
and Python and like scripting language

00:20:16,130 --> 00:20:23,570
nonsense but no C compiler and they

00:20:21,370 --> 00:20:25,460
somebody asks on remaining.this like

00:20:23,570 --> 00:20:27,620
what is this and they said we're working

00:20:25,460 --> 00:20:32,000
on it but we don't have anything yet so

00:20:27,620 --> 00:20:34,580
so that's bad if this were an ideal

00:20:32,000 --> 00:20:36,140
world we would have somebody else

00:20:34,580 --> 00:20:39,530
for example me would have already built

00:20:36,140 --> 00:20:41,930
binary packages for say GCC so you could

00:20:39,530 --> 00:20:43,310
just install a binary bootstrap kit add

00:20:41,930 --> 00:20:45,290
the packages and have a tool chain

00:20:43,310 --> 00:20:47,330
however I'm not at that point yet

00:20:45,290 --> 00:20:52,100
unfortunately so we're gonna need some

00:20:47,330 --> 00:20:55,970
sort of a bridge to get a C compiler now

00:20:52,100 --> 00:20:57,920
that we don't have one yet so I found

00:20:55,970 --> 00:20:59,600
there are different things that you

00:20:57,920 --> 00:21:01,910
might try I found this thing called

00:20:59,600 --> 00:21:05,330
Chrome brew and it'sit's pretty

00:21:01,910 --> 00:21:11,240
intriguing it's based on homebrew except

00:21:05,330 --> 00:21:14,870
for Chrome and it's written in Ruby

00:21:11,240 --> 00:21:18,680
because it's homebrew based and you

00:21:14,870 --> 00:21:21,110
install it with this fun command like

00:21:18,680 --> 00:21:29,360
just double you get a thing and pipe it

00:21:21,110 --> 00:21:32,000
into bash which I did and it's redeeming

00:21:29,360 --> 00:21:34,880
feature is that it has binary so this is

00:21:32,000 --> 00:21:37,310
the home page of chrome brew

00:21:34,880 --> 00:21:39,590
it has binary packages available for for

00:21:37,310 --> 00:21:41,230
all for chrome architectures Chrome OS

00:21:39,590 --> 00:21:46,100
architectures so that's nice

00:21:41,230 --> 00:21:48,050
GPL license so good shout out to them

00:21:46,100 --> 00:21:51,380
they've they're quite a bit further down

00:21:48,050 --> 00:21:53,040
the rabbit hole than I am so I'm solving

00:21:51,380 --> 00:21:57,330
once you've installed

00:21:53,040 --> 00:22:00,480
like you pipe this command into bash you

00:21:57,330 --> 00:22:03,720
use the clan called crew install GCC in

00:22:00,480 --> 00:22:06,540
Linux headers it'll it'll say it needs

00:22:03,720 --> 00:22:08,400
to install various other things then it

00:22:06,540 --> 00:22:10,530
says oh look there's a binary package

00:22:08,400 --> 00:22:14,550
available downloads the things installs

00:22:10,530 --> 00:22:16,230
it's actually really nice now we're

00:22:14,550 --> 00:22:18,180
going to do the following we're gonna

00:22:16,230 --> 00:22:20,840
install we're going to download the

00:22:18,180 --> 00:22:24,450
package source current árbol from the

00:22:20,840 --> 00:22:29,610
package source FTP extracted in user

00:22:24,450 --> 00:22:33,240
local as I said before you enter shell

00:22:29,610 --> 00:22:35,040
to enter the shell and then you change

00:22:33,240 --> 00:22:38,070
into the bootstrap directory called the

00:22:35,040 --> 00:22:39,930
bootstrap scripts and immediately exits

00:22:38,070 --> 00:22:43,140
and says your shells echo command is not

00:22:39,930 --> 00:22:47,940
BSD compatible our look should have

00:22:43,140 --> 00:22:52,910
another shell I've it turns out if you

00:22:47,940 --> 00:22:56,610
export bin bash as your sh it works

00:22:52,910 --> 00:23:01,230
doesn't seem buddy to a BSD but okay so

00:22:56,610 --> 00:23:04,500
try to this is the bootstrap core this

00:23:01,230 --> 00:23:06,120
actually try 10 or something this is the

00:23:04,500 --> 00:23:10,110
current line I settled on I'm gonna

00:23:06,120 --> 00:23:12,600
explain to you what all those parameters

00:23:10,110 --> 00:23:16,770
mean the first one unprivileged is

00:23:12,600 --> 00:23:19,260
really nice it'll install everything as

00:23:16,770 --> 00:23:24,150
user Chronos so you don't have to use

00:23:19,260 --> 00:23:27,030
sudo all the time you might like that or

00:23:24,150 --> 00:23:30,420
not I I do then the next thing is the

00:23:27,030 --> 00:23:32,190
installation directories so I said the

00:23:30,420 --> 00:23:34,140
source tree unpacked under user local

00:23:32,190 --> 00:23:38,220
package source I use user local package

00:23:34,140 --> 00:23:41,910
as the the prefix and then I put the var

00:23:38,220 --> 00:23:44,190
and package DP inside that prefix so

00:23:41,910 --> 00:23:48,270
everything is nicely self-contained you

00:23:44,190 --> 00:23:51,990
can backup use the local pkg and have

00:23:48,270 --> 00:23:54,420
your entire installation there then see

00:23:51,990 --> 00:23:58,320
refers equal no is a fun one that took

00:23:54,420 --> 00:24:02,430
me a while so see rappers is hard to

00:23:58,320 --> 00:24:04,500
explain even is a package source uses a

00:24:02,430 --> 00:24:06,130
set of wrappers around things like a

00:24:04,500 --> 00:24:09,790
compiler linker and so

00:24:06,130 --> 00:24:11,710
and can do various things such as adapt

00:24:09,790 --> 00:24:14,620
the command lines to different versions

00:24:11,710 --> 00:24:16,810
of compilers you can tell it to like

00:24:14,620 --> 00:24:19,120
remove things from the command line like

00:24:16,810 --> 00:24:21,010
if the build system insists on adding at

00:24:19,120 --> 00:24:22,450
an old - P thread and you don't want it

00:24:21,010 --> 00:24:25,210
you can tell it to remove that parameter

00:24:22,450 --> 00:24:27,160
and and so that - - implementation of

00:24:25,210 --> 00:24:28,990
the wrappers there's the the old ones

00:24:27,160 --> 00:24:31,420
the old and busted ones they are written

00:24:28,990 --> 00:24:38,130
in shell and the new hotness is written

00:24:31,420 --> 00:24:42,640
in C it's quite a bit faster - however

00:24:38,130 --> 00:24:43,780
because of the way the bootstrap detects

00:24:42,640 --> 00:24:45,220
the presence or absence of various

00:24:43,780 --> 00:24:48,550
things it detects there's no patch

00:24:45,220 --> 00:24:50,830
command which is true so installed stiff

00:24:48,550 --> 00:24:52,930
utils and if utils depends on a whole

00:24:50,830 --> 00:24:57,280
bunch of other things and so it ends up

00:24:52,930 --> 00:24:58,960
creating a circular dependency where to

00:24:57,280 --> 00:25:00,970
install C wrappers you need to have

00:24:58,960 --> 00:25:03,520
digital installed but to build if utils

00:25:00,970 --> 00:25:05,800
you need to see wrappers installed so

00:25:03,520 --> 00:25:08,860
you bootstrap without C wrappers and

00:25:05,800 --> 00:25:10,960
then you delete once your bootstrap the

00:25:08,860 --> 00:25:14,410
line that says C ripe is equal know from

00:25:10,960 --> 00:25:17,680
your make on and then the rest will be

00:25:14,410 --> 00:25:20,350
built without and then prefer package

00:25:17,680 --> 00:25:23,200
stores equal yes because the the

00:25:20,350 --> 00:25:24,760
delivered the libraries as I said that

00:25:23,200 --> 00:25:26,550
I've delivered by the base system often

00:25:24,760 --> 00:25:32,590
incomplete in various ways

00:25:26,550 --> 00:25:35,590
and here I put six jobs there's this

00:25:32,590 --> 00:25:38,260
machine has four threads so six make

00:25:35,590 --> 00:25:40,270
jobs is a good way of getting the

00:25:38,260 --> 00:25:43,060
maximum build performance out and then

00:25:40,270 --> 00:25:46,300
this happens on Chrome better Chrome 64

00:25:43,060 --> 00:25:47,680
and later it'll run happily for a while

00:25:46,300 --> 00:25:50,470
and then it says I'm going to install

00:25:47,680 --> 00:25:53,110
the bootstrap m'kay files and then you

00:25:50,470 --> 00:25:54,700
get this fun message a WK runtime error

00:25:53,110 --> 00:25:59,230
pipe execution not allowed in sandbox

00:25:54,700 --> 00:26:04,300
mode you go what the hell is this it

00:25:59,230 --> 00:26:11,820
turns out the aw K that Chrome OS

00:26:04,300 --> 00:26:17,650
delivers has been used in an exploit as

00:26:11,820 --> 00:26:19,160
a vector of running a command and I

00:26:17,650 --> 00:26:21,290
don't know what all

00:26:19,160 --> 00:26:23,120
exact details but you know that there is

00:26:21,290 --> 00:26:26,090
this thing called poem to ohm or

00:26:23,120 --> 00:26:29,510
something and Chrome OS regularly has

00:26:26,090 --> 00:26:31,640
good performance sometimes not so good

00:26:29,510 --> 00:26:33,110
and one of those exploit chains that did

00:26:31,640 --> 00:26:35,240
the full compromise of the system use

00:26:33,110 --> 00:26:36,920
talk so they said we're going to fix

00:26:35,240 --> 00:26:42,670
that and they implemented the sandbox

00:26:36,920 --> 00:26:46,340
mode for mark which is their awk and

00:26:42,670 --> 00:26:48,140
they install a version of all that is

00:26:46,340 --> 00:26:50,120
permanently set into the sandbox mode so

00:26:48,140 --> 00:26:52,820
it cannot run cannot do networking it

00:26:50,120 --> 00:26:54,710
cannot run pipes it cannot open files

00:26:52,820 --> 00:26:55,550
with programmatic names and so on and so

00:26:54,710 --> 00:26:57,710
forth

00:26:55,550 --> 00:26:59,150
which is kind of annoying because the

00:26:57,710 --> 00:27:05,240
dependency management of packaged sauce

00:26:59,150 --> 00:27:08,780
needs those features so I fixed it on

00:27:05,240 --> 00:27:10,340
Friday in the Train essentially just the

00:27:08,780 --> 00:27:12,710
bootstrap kid now detects that you're on

00:27:10,340 --> 00:27:14,930
Chrome OS and says needs awk equal yes

00:27:12,710 --> 00:27:20,540
and then we build a net beastie orc and

00:27:14,930 --> 00:27:26,990
everything is fine the other thing I did

00:27:20,540 --> 00:27:29,390
in this work is to properly support

00:27:26,990 --> 00:27:34,190
Chrome OS specific hex param

00:27:29,390 --> 00:27:35,600
customizations by making it a sort of

00:27:34,190 --> 00:27:38,060
first class citizen in packaged source

00:27:35,600 --> 00:27:39,950
packages has the concept of an OS

00:27:38,060 --> 00:27:41,900
variant and that was invented for

00:27:39,950 --> 00:27:43,820
Solaris derivatives or Sun OS

00:27:41,900 --> 00:27:50,290
derivatives so you might know there is

00:27:43,820 --> 00:27:52,580
like it yeah there's Lumos and

00:27:50,290 --> 00:27:54,740
openindiana and a bunch of others so

00:27:52,580 --> 00:27:57,380
they distinguished by setting this or is

00:27:54,740 --> 00:28:00,770
variant variable so now in in package

00:27:57,380 --> 00:28:02,540
stores current on Linux we essentially

00:28:00,770 --> 00:28:04,160
put the lowercase distro name in OS

00:28:02,540 --> 00:28:05,720
variant and so you can check if I was

00:28:04,160 --> 00:28:10,280
very Nico Chrome OS then you put some

00:28:05,720 --> 00:28:12,260
some customization some some things that

00:28:10,280 --> 00:28:14,840
break on the platform when it's up

00:28:12,260 --> 00:28:16,850
streams faults I try to send patches

00:28:14,840 --> 00:28:21,290
upstream there's just have been a couple

00:28:16,850 --> 00:28:23,170
one so I did that so back to our our

00:28:21,290 --> 00:28:26,330
little use case now that we have

00:28:23,170 --> 00:28:28,850
installed packaged source we can install

00:28:26,330 --> 00:28:31,190
some software first of all you want to

00:28:28,850 --> 00:28:32,120
export you want to add this path thing

00:28:31,190 --> 00:28:35,539
at the end of your

00:28:32,120 --> 00:28:39,830
are see so that all the commands you

00:28:35,539 --> 00:28:43,039
install in M package stores are

00:28:39,830 --> 00:28:46,010
available from the command line then you

00:28:43,039 --> 00:28:49,250
can just go to any old directory such as

00:28:46,010 --> 00:28:51,950
length slash go my personal favorite to

00:28:49,250 --> 00:28:55,159
be make package install it'll download

00:28:51,950 --> 00:28:57,260
the sources check for dependencies

00:28:55,159 --> 00:29:00,409
install those first then download

00:28:57,260 --> 00:29:02,870
sources build everything install and

00:29:00,409 --> 00:29:05,570
create a bandit binary package you can

00:29:02,870 --> 00:29:07,399
take those binary packages and move them

00:29:05,570 --> 00:29:10,640
to other machines it's all nice if

00:29:07,399 --> 00:29:13,460
you're the package source dot se it has

00:29:10,640 --> 00:29:17,330
a searchable web catalog of the twenty

00:29:13,460 --> 00:29:19,159
thousand-plus packages so once you find

00:29:17,330 --> 00:29:24,350
something there you can just install and

00:29:19,159 --> 00:29:26,899
use and in my last 40 seconds I'm going

00:29:24,350 --> 00:29:29,210
to quickly summarize the future work for

00:29:26,899 --> 00:29:30,770
this and I will also want to say well

00:29:29,210 --> 00:29:32,270
open for contributions so if you have a

00:29:30,770 --> 00:29:35,470
Chromebook and you're interested in

00:29:32,270 --> 00:29:38,360
joining this effort please get in touch

00:29:35,470 --> 00:29:41,090
we have a debauch tracker and we have a

00:29:38,360 --> 00:29:45,799
github even although it's a read-only

00:29:41,090 --> 00:29:47,240
mirror so my first point that I want to

00:29:45,799 --> 00:29:49,159
fix this I want to have a full tool

00:29:47,240 --> 00:29:52,159
chain as package source binary packages

00:29:49,159 --> 00:29:54,679
so what that means bin utils GCC and so

00:29:52,159 --> 00:29:58,190
on and then we can get rid of crude the

00:29:54,679 --> 00:30:00,140
chrome brew requirement and you'll just

00:29:58,190 --> 00:30:04,460
be able to download a bootstrap kit and

00:30:00,140 --> 00:30:06,559
binary packages and I want to package

00:30:04,460 --> 00:30:08,720
some things that are not in base so so

00:30:06,559 --> 00:30:10,640
again there's some software that things

00:30:08,720 --> 00:30:13,309
if you're on Linux you must have lino

00:30:10,640 --> 00:30:15,020
POSIX extended attributes however the

00:30:13,309 --> 00:30:16,940
library is not there on Chrome OS so you

00:30:15,020 --> 00:30:20,330
can add those for higher package source

00:30:16,940 --> 00:30:22,640
men is another example and finally look

00:30:20,330 --> 00:30:24,429
into support for X applications so as

00:30:22,640 --> 00:30:28,690
far as I understand you cannot mix

00:30:24,429 --> 00:30:31,540
graphical I know graphical

00:30:28,690 --> 00:30:34,450
X applications on the Chrome OS desktop

00:30:31,540 --> 00:30:36,580
but I think you can launch an X server

00:30:34,450 --> 00:30:40,720
on a new virtual terminal such as 3t3

00:30:36,580 --> 00:30:42,580
and that should work in the future and

00:30:40,720 --> 00:30:43,790
that's it and we don't have time for

00:30:42,580 --> 00:30:52,000
questions

00:30:43,790 --> 00:30:52,000

YouTube URL: https://www.youtube.com/watch?v=MmtSaq-S4Gw


