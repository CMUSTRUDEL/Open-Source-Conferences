Title: pot: another container framework based on jails and ZFS A personal educational project to run contaâ€¦
Publication date: 2018-02-04
Playlist: FOSDEM 2018
Description: 
	pot: another container framework based on jails and ZFS A personal/educational project to run containers with the power of FreeBSD
by Luca Pizzamiglio

At: FOSDEM 2018
Room: K.3.401
Scheduled start: 2018-02-03 12:35:00+01
Captions: 
	00:00:05,509 --> 00:00:13,110
welcome to the newcomers and the free

00:00:08,490 --> 00:00:17,310
first of all than people so this is the

00:00:13,110 --> 00:00:22,230
first of our two talks about GB SD

00:00:17,310 --> 00:00:24,989
containers and virtualization so this

00:00:22,230 --> 00:00:26,550
one is about thoughts containers system

00:00:24,989 --> 00:00:31,919
and wait a minute containers and free

00:00:26,550 --> 00:00:32,780
busy so please I think you can go one

00:00:31,919 --> 00:00:35,579
minutes

00:00:32,780 --> 00:00:37,559
yeah come smooth talks before I mean I

00:00:35,579 --> 00:00:41,879
would like to wait the right time so

00:00:37,559 --> 00:00:48,239
from coming up just presenting myself my

00:00:41,879 --> 00:00:50,999
name is Luca pizza menu which I'm finish

00:00:48,239 --> 00:00:51,379
the integers since eight nine years more

00:00:50,999 --> 00:00:54,690
or less

00:00:51,379 --> 00:00:58,980
Posca meter I'm coming to freshmen so

00:00:54,690 --> 00:01:02,069
started in molecular steal his job I

00:00:58,980 --> 00:01:05,550
work at tu bhavo and my main occupation

00:01:02,069 --> 00:01:09,180
is building custom repository for

00:01:05,550 --> 00:01:12,510
FreeBSD so I use lot what do you think

00:01:09,180 --> 00:01:15,660
open it this is a system that allows you

00:01:12,510 --> 00:01:23,970
to customize your package repository on

00:01:15,660 --> 00:01:26,370
FreeBSD so that's where my that was my

00:01:23,970 --> 00:01:31,620
motivation that drove me to start this

00:01:26,370 --> 00:01:34,080
kind of project technically I don't have

00:01:31,620 --> 00:01:36,930
a good definition about what a container

00:01:34,080 --> 00:01:38,580
is it's kind of the thought system that

00:01:36,930 --> 00:01:41,220
is not a little machine that is not

00:01:38,580 --> 00:01:42,750
Safari it's something between you know

00:01:41,220 --> 00:01:45,810
it's very it's kind of a clean

00:01:42,750 --> 00:01:47,250
environment when you can run something

00:01:45,810 --> 00:01:48,390
that looks like a virtual machine but

00:01:47,250 --> 00:01:50,490
it's not a little machine is kind of

00:01:48,390 --> 00:01:53,480
virtualization of the operating system

00:01:50,490 --> 00:01:58,380
level why I needed this kind of

00:01:53,480 --> 00:02:00,960
instances as a park a little top

00:01:58,380 --> 00:02:04,470
maintainer I really need sometimes clean

00:02:00,960 --> 00:02:07,429
environment to test my Porter oftentimes

00:02:04,470 --> 00:02:11,099
when you build software you have

00:02:07,429 --> 00:02:13,260
unexpected connections Auto cough is

00:02:11,099 --> 00:02:14,820
really bad it takes the wrong library

00:02:13,260 --> 00:02:16,650
one configuration so you have a pin

00:02:14,820 --> 00:02:19,170
environment is pretty easy this is what

00:02:16,650 --> 00:02:23,160
project does but to develop a new part

00:02:19,170 --> 00:02:25,290
puja is not really a nice capful it's

00:02:23,160 --> 00:02:29,400
nice to build to manage all of them but

00:02:25,290 --> 00:02:31,950
not to develop stuff another personal

00:02:29,400 --> 00:02:35,790
myth was to szostak is a kind of

00:02:31,950 --> 00:02:39,060
configuration management to I really

00:02:35,790 --> 00:02:41,850
need to run on my laptop some network

00:02:39,060 --> 00:02:44,490
give to an environment to have client

00:02:41,850 --> 00:02:48,630
server configurations to run several

00:02:44,490 --> 00:02:50,130
stuff to run web services nowadays you

00:02:48,630 --> 00:02:52,590
not have any application anymore we have

00:02:50,130 --> 00:02:55,260
Web Services to build stuff and I really

00:02:52,590 --> 00:02:58,440
like to push in these directions also on

00:02:55,260 --> 00:03:01,170
my laptop there are already some

00:02:58,440 --> 00:03:02,640
solution available on freebsd basically

00:03:01,170 --> 00:03:05,670
based heavily on jails

00:03:02,640 --> 00:03:07,800
like easy jail io cage but have the

00:03:05,670 --> 00:03:09,740
feeling that that didn't really provide

00:03:07,800 --> 00:03:16,500
what I needed

00:03:09,740 --> 00:03:18,300
moreover it's open source means that if

00:03:16,500 --> 00:03:21,390
you want to rank vent the wheel you can

00:03:18,300 --> 00:03:26,190
do it so if my motivation was also that

00:03:21,390 --> 00:03:29,100
I had other versus ezj doesn't support

00:03:26,190 --> 00:03:30,810
easily VC GP configuration if I run on

00:03:29,100 --> 00:03:33,420
my laptop normally the tab fixed by

00:03:30,810 --> 00:03:35,700
piece but you have a dist GP on one

00:03:33,420 --> 00:03:39,150
network and you want to visualize the

00:03:35,700 --> 00:03:41,310
natural inside I want it

00:03:39,150 --> 00:03:44,519
without any sharing imitate docker I

00:03:41,310 --> 00:03:46,110
don't like doctor 100% but there are a

00:03:44,519 --> 00:03:47,820
lot of use case where doctor is really a

00:03:46,110 --> 00:03:49,920
killing feature I mean clean technology

00:03:47,820 --> 00:03:53,300
and freebies it doesn't provide the

00:03:49,920 --> 00:03:56,970
similar user cleanliness that docker has

00:03:53,300 --> 00:03:59,250
so I can say I saw other developers

00:03:56,970 --> 00:04:03,510
using doctors would could be nice to

00:03:59,250 --> 00:04:05,459
have something similar automation that

00:04:03,510 --> 00:04:09,780
provide more user friendly

00:04:05,459 --> 00:04:12,720
comment line interface also wanted to

00:04:09,780 --> 00:04:14,430
sent it that I build up for myself so I

00:04:12,720 --> 00:04:17,820
can experiment different solutions

00:04:14,430 --> 00:04:21,359
taking the wrong path also different

00:04:17,820 --> 00:04:23,820
concepts and of course was for me an

00:04:21,359 --> 00:04:25,180
opportunity to learn more about the busy

00:04:23,820 --> 00:04:27,009
technologies

00:04:25,180 --> 00:04:29,410
I would have developed any new features

00:04:27,009 --> 00:04:35,580
2 freebies the I just use what already

00:04:29,410 --> 00:04:38,380
available was basically J's set F s PF a

00:04:35,580 --> 00:04:44,110
ctrl C P you said whatever we spoke

00:04:38,380 --> 00:04:46,330
about later that is part what is

00:04:44,110 --> 00:04:50,410
basically just a tool that automated

00:04:46,330 --> 00:04:52,539
management of my container model so it's

00:04:50,410 --> 00:04:54,729
just a bunch of shell scripts until now

00:04:52,539 --> 00:04:58,800
because it's everything is just comment

00:04:54,729 --> 00:05:02,550
line tools that create data set run J's

00:04:58,800 --> 00:05:06,610
create confuse network cards whatever so

00:05:02,550 --> 00:05:09,070
new needs for higher programming

00:05:06,610 --> 00:05:13,630
languages add message features probably

00:05:09,070 --> 00:05:16,270
we need better stuff so we see that the

00:05:13,630 --> 00:05:19,889
name comes from parties you know is used

00:05:16,270 --> 00:05:24,970
to cook and can contain something like

00:05:19,889 --> 00:05:28,960
pasta I'm Italian so obviously is the

00:05:24,970 --> 00:05:30,970
right analogy for that the idea is when

00:05:28,960 --> 00:05:35,139
you cook pasta you see this tomato sauce

00:05:30,970 --> 00:05:37,180
pasta and carbonara spaghetti in both

00:05:35,139 --> 00:05:39,760
cases even a completely different but

00:05:37,180 --> 00:05:41,770
you start with a pot of boiling water so

00:05:39,760 --> 00:05:43,510
if I put the salt and then you put the

00:05:41,770 --> 00:05:47,080
pasta to cook so there is a kind of

00:05:43,510 --> 00:05:51,130
reusable started beginning from the

00:05:47,080 --> 00:05:53,289
recipe so it's that was the idea to have

00:05:51,130 --> 00:05:55,840
a different concept inside my containers

00:05:53,289 --> 00:05:58,900
to be able to reuse some stuff basically

00:05:55,840 --> 00:06:00,159
reuse the pot also is three letters that

00:05:58,900 --> 00:06:03,699
is important when you have common line

00:06:00,159 --> 00:06:06,310
and that vbz contain the new technology

00:06:03,699 --> 00:06:11,909
it could be a huge common language what

00:06:06,310 --> 00:06:15,009
is short three letters is what is

00:06:11,909 --> 00:06:18,759
there's no new ideas just copy good

00:06:15,009 --> 00:06:24,610
ideas from there and there so okay it

00:06:18,759 --> 00:06:26,949
would be like to split a fix the system

00:06:24,610 --> 00:06:29,669
in three logical components we have

00:06:26,949 --> 00:06:32,110
previously base the packages and

00:06:29,669 --> 00:06:34,289
basically customization means everything

00:06:32,110 --> 00:06:34,289
else

00:06:34,320 --> 00:06:39,699
we'll be nice to have peace three

00:06:36,729 --> 00:06:43,570
logical components separated three

00:06:39,699 --> 00:06:45,100
logical like this Cartesian do the first

00:06:43,570 --> 00:06:50,199
data set basically who knows exactly

00:06:45,100 --> 00:06:53,139
what to the first data set is so that

00:06:50,199 --> 00:06:55,720
Affairs is the file system for Phoebus D

00:06:53,139 --> 00:06:58,710
and you have to imagine that in this

00:06:55,720 --> 00:07:03,100
case data set like logical partition

00:06:58,710 --> 00:07:07,060
inside of a 3 structure so you can

00:07:03,100 --> 00:07:08,830
create separate partition this partition

00:07:07,060 --> 00:07:10,870
in this case and I'll put in one

00:07:08,830 --> 00:07:12,460
partition the freebies database stuff in

00:07:10,870 --> 00:07:16,120
other partition the packages any other

00:07:12,460 --> 00:07:19,750
partition the customization I found a

00:07:16,120 --> 00:07:22,750
way to combine them and recreate a

00:07:19,750 --> 00:07:24,600
proper through this d3 what is good in

00:07:22,750 --> 00:07:27,610
the previously that the tree is already

00:07:24,600 --> 00:07:29,380
well separated all packages for instance

00:07:27,610 --> 00:07:30,970
are installed under us are local so they

00:07:29,380 --> 00:07:34,750
are not mixed up with everything else so

00:07:30,970 --> 00:07:37,690
that's helped me a lot and then I have a

00:07:34,750 --> 00:07:40,229
bunch of symbolically that create make

00:07:37,690 --> 00:07:46,030
make it possible

00:07:40,229 --> 00:07:49,090
box images basically what you have when

00:07:46,030 --> 00:07:50,830
I create a pot I need a base as you see

00:07:49,090 --> 00:07:54,520
the base 11th is the first thing that

00:07:50,830 --> 00:07:58,360
you have to do when you create a new

00:07:54,520 --> 00:08:01,690
system let's say and then you can create

00:07:58,360 --> 00:08:04,300
what a I mean this another pot the name

00:08:01,690 --> 00:08:07,150
is a just to be a strict I call the

00:08:04,300 --> 00:08:10,599
level one because as you see by the name

00:08:07,150 --> 00:08:13,360
uses of the base 11 one is the same base

00:08:10,599 --> 00:08:16,389
but at every box that you see is the

00:08:13,360 --> 00:08:19,180
first data set when you create this

00:08:16,389 --> 00:08:22,750
level one it takes this pot as a

00:08:19,180 --> 00:08:24,970
reference and it use the same base

00:08:22,750 --> 00:08:27,010
basically is not to be read-only so it's

00:08:24,970 --> 00:08:31,330
not duplicated it's exactly the same one

00:08:27,010 --> 00:08:35,950
and it's using the same component and

00:08:31,330 --> 00:08:38,589
those are just for the pot a in this

00:08:35,950 --> 00:08:41,409
case I've used again the same component

00:08:38,589 --> 00:08:43,030
and I customize which packages and

00:08:41,409 --> 00:08:45,130
customization about the configurations

00:08:43,030 --> 00:08:49,509
the point is is to be able

00:08:45,130 --> 00:08:55,060
to reuse completely one data set from

00:08:49,509 --> 00:08:56,649
one party to another one maybe a little

00:08:55,060 --> 00:08:59,529
bit more clear with the comment line

00:08:56,649 --> 00:09:02,050
workflow protein is just to initialize

00:08:59,529 --> 00:09:05,350
everything create base is able it

00:09:02,050 --> 00:09:06,149
creates basically the the base that you

00:09:05,350 --> 00:09:09,759
can reuse

00:09:06,149 --> 00:09:12,310
you can specify version of FreeBSD that

00:09:09,759 --> 00:09:14,470
means that you can have multiple

00:09:12,310 --> 00:09:16,389
versions for Pascal which is pretty

00:09:14,470 --> 00:09:18,459
useful because time to time something

00:09:16,389 --> 00:09:20,470
doesn't work on 10.3 but I have a

00:09:18,459 --> 00:09:22,720
comment and you need some different

00:09:20,470 --> 00:09:26,620
versioning so it's really useful to have

00:09:22,720 --> 00:09:28,779
multiple bases the crate place basically

00:09:26,620 --> 00:09:32,380
download for this xi create old data set

00:09:28,779 --> 00:09:35,319
and create the publish many B's level

00:09:32,380 --> 00:09:39,069
zero reference then we could create

00:09:35,319 --> 00:09:40,990
pa-11 one with which days should I use

00:09:39,069 --> 00:09:43,899
and you create these new ports creating

00:09:40,990 --> 00:09:45,970
those the package data set and the

00:09:43,899 --> 00:09:48,790
customization data set and the same for

00:09:45,970 --> 00:09:51,850
the pot B then there is a comment start

00:09:48,790 --> 00:09:54,029
and stop what start does it mount all

00:09:51,850 --> 00:09:58,420
data set in the proper manner to create

00:09:54,029 --> 00:10:00,639
a valid through business system and then

00:09:58,420 --> 00:10:05,019
it starts the container that is

00:10:00,639 --> 00:10:06,630
basically a J this top layer does the

00:10:05,019 --> 00:10:11,290
stuff in the reverse order

00:10:06,630 --> 00:10:14,920
stop the J amount the topes data set the

00:10:11,290 --> 00:10:20,649
point to have this kind of read only

00:10:14,920 --> 00:10:22,839
mount this mechanism is to exploit I

00:10:20,649 --> 00:10:25,689
mean the problem is you can with new

00:10:22,839 --> 00:10:28,839
visualization trend metal container you

00:10:25,689 --> 00:10:30,610
have different images for everything

00:10:28,839 --> 00:10:33,220
people it's so easy to create new

00:10:30,610 --> 00:10:35,889
virtual images that nobody will really

00:10:33,220 --> 00:10:39,670
manage them because then you can create

00:10:35,889 --> 00:10:41,589
fifty hundreds of mr. machines and say

00:10:39,670 --> 00:10:43,839
we have to run a security parade of

00:10:41,589 --> 00:10:45,670
security fix and you have to go alone

00:10:43,839 --> 00:10:48,130
machines you know people machines and

00:10:45,670 --> 00:10:51,160
equate them in this case if I'll make

00:10:48,130 --> 00:10:53,319
some modification in the first one I can

00:10:51,160 --> 00:10:55,569
see immediately this I can use it as

00:10:53,319 --> 00:10:57,330
reference if I'm a notification there I

00:10:55,569 --> 00:10:58,680
can see immediately

00:10:57,330 --> 00:11:00,990
the modification here because it's

00:10:58,680 --> 00:11:03,089
mounted via mu f s that means is really

00:11:00,990 --> 00:11:05,220
the same component is not duplicated

00:11:03,089 --> 00:11:08,220
this is really the same so a

00:11:05,220 --> 00:11:09,990
modification there is immediately

00:11:08,220 --> 00:11:13,440
applied to every computer every

00:11:09,990 --> 00:11:28,170
container that is using the same data

00:11:13,440 --> 00:11:32,220
set so far is just binary below

00:11:28,170 --> 00:11:38,910
extract them it's not yet so

00:11:32,220 --> 00:11:44,000
sophisticated when I start to play with

00:11:38,910 --> 00:11:46,709
it say okay three five system components

00:11:44,000 --> 00:11:51,660
usable as building blocks are not enough

00:11:46,709 --> 00:11:54,149
for my vision of the future let's say so

00:11:51,660 --> 00:12:00,450
I would need more persistent components

00:11:54,149 --> 00:12:02,010
I would really see a way to build of an

00:12:00,450 --> 00:12:05,040
image as a building blocks I would like

00:12:02,010 --> 00:12:07,730
to add code repository or a database or

00:12:05,040 --> 00:12:13,380
caches and use them in several occasion

00:12:07,730 --> 00:12:17,550
so I music song master as an example

00:12:13,380 --> 00:12:19,350
there example basically what they do we

00:12:17,550 --> 00:12:22,110
have configurations resistance for our

00:12:19,350 --> 00:12:24,990
servers stored on bit so I am a

00:12:22,110 --> 00:12:27,120
depositor leader on my laptop I make

00:12:24,990 --> 00:12:30,720
some modifications and I use our

00:12:27,120 --> 00:12:33,450
specific container to run the server and

00:12:30,720 --> 00:12:37,529
I want to use my laptop as a server so I

00:12:33,450 --> 00:12:39,930
can isolate in this isolated environment

00:12:37,529 --> 00:12:42,540
in an isolated Network I can use the

00:12:39,930 --> 00:12:45,270
same repository but I use the container

00:12:42,540 --> 00:12:47,279
just to run the server instance and I

00:12:45,270 --> 00:12:50,550
can use my laptop to develop new stuff

00:12:47,279 --> 00:12:52,290
and do whatever I want so then all my

00:12:50,550 --> 00:12:53,760
credentials are on my network are not in

00:12:52,290 --> 00:12:57,990
the container the container is just the

00:12:53,760 --> 00:13:00,990
executor is that the server so for to

00:12:57,990 --> 00:13:03,690
death also different concept called for

00:13:00,990 --> 00:13:06,930
system component so you can add other

00:13:03,690 --> 00:13:08,680
pieces other set of s data set so you

00:13:06,930 --> 00:13:10,240
create a component for

00:13:08,680 --> 00:13:12,970
create the path and then we'd add

00:13:10,240 --> 00:13:16,480
consistent component you just say which

00:13:12,970 --> 00:13:19,420
part which a system component everywhere

00:13:16,480 --> 00:13:21,760
has to be mounted the job was really an

00:13:19,420 --> 00:13:27,120
inspiration for that because it's

00:13:21,760 --> 00:13:27,120
basically what what it does but it's a

00:13:40,320 --> 00:13:46,540
so they're here the persistent component

00:13:43,360 --> 00:13:48,790
compose Italy P is the part so here I'm

00:13:46,540 --> 00:13:51,180
adding the this persistent component to

00:13:48,790 --> 00:13:54,100
this part and this is the mount point

00:13:51,180 --> 00:13:56,560
normally I use P for the pot name F for

00:13:54,100 --> 00:13:59,529
persistent components B for basis just

00:13:56,560 --> 00:14:07,500
to are trying to be consistent in all

00:13:59,529 --> 00:14:07,500
common lines but yeah test analogy again

00:14:08,310 --> 00:14:16,510
in this case of other type of spaghetti

00:14:11,080 --> 00:14:18,640
what that means it can not just use the

00:14:16,510 --> 00:14:22,240
same part of the recipe if I'm cooking

00:14:18,640 --> 00:14:24,459
with my pasta and my my part here I can

00:14:22,240 --> 00:14:26,410
even cook two different dishes with the

00:14:24,459 --> 00:14:29,260
same physical import I can cook

00:14:26,410 --> 00:14:33,310
spaghetti there and then when it's

00:14:29,260 --> 00:14:36,220
cooked I can serve one another and the

00:14:33,310 --> 00:14:40,060
other one with a review in this case so

00:14:36,220 --> 00:14:44,589
the me the reuse is can be pushed even

00:14:40,060 --> 00:14:49,900
further this is a real example that I'm

00:14:44,589 --> 00:14:52,720
using on my laptop I forgot to mention

00:14:49,900 --> 00:14:55,270
that the level is the level is the

00:14:52,720 --> 00:14:57,130
number of data first data set or

00:14:55,270 --> 00:15:00,120
persistent component that I'm mounting

00:14:57,130 --> 00:15:04,390
in read-only in this case I'm not

00:15:00,120 --> 00:15:07,420
reusing only the base so the first flip

00:15:04,390 --> 00:15:11,560
is the base but also the package here I

00:15:07,420 --> 00:15:13,240
have level one reference container where

00:15:11,560 --> 00:15:15,730
I install everything there is relative

00:15:13,240 --> 00:15:18,670
to salt master and here I have two

00:15:15,730 --> 00:15:20,940
instances they are using those

00:15:18,670 --> 00:15:23,620
definitions and

00:15:20,940 --> 00:15:26,140
they had just the customization inside

00:15:23,620 --> 00:15:29,880
them and the next day law repository

00:15:26,140 --> 00:15:33,120
outside in this case have two instances

00:15:29,880 --> 00:15:34,720
of the same server with two different

00:15:33,120 --> 00:15:36,610
configuration and two different

00:15:34,720 --> 00:15:41,080
repository but I'll have only one

00:15:36,610 --> 00:15:45,330
package that asserting only one based

00:15:41,080 --> 00:15:50,140
episode so is to push the reusability

00:15:45,330 --> 00:15:53,290
even further took the pestle how to do

00:15:50,140 --> 00:15:55,810
that this is the workflow is similar to

00:15:53,290 --> 00:15:59,980
before I create persistent components

00:15:55,810 --> 00:16:01,180
that create the level one part and here

00:15:59,980 --> 00:16:03,399
is slightly different

00:16:01,180 --> 00:16:05,529
I just say okay use salt base as a

00:16:03,399 --> 00:16:09,390
reference because it's a level two that

00:16:05,529 --> 00:16:12,940
means you don't have to use only one

00:16:09,390 --> 00:16:19,089
first is the data set and read all about

00:16:12,940 --> 00:16:21,190
even chew and then I having the Deaf

00:16:19,089 --> 00:16:24,959
assistant components and this is a kind

00:16:21,190 --> 00:16:30,209
of real case that I have on my laptop

00:16:24,959 --> 00:16:30,209
question so far yeah

00:16:31,510 --> 00:16:36,639
[Music]

00:16:34,360 --> 00:16:39,910
because it was about the there is a

00:16:36,639 --> 00:16:45,670
little bit about two levels then yeah

00:16:39,910 --> 00:16:47,529
there's only two levels I was thinking

00:16:45,670 --> 00:16:51,189
about it there are taking place some

00:16:47,529 --> 00:16:54,959
problems if you want to reuse more topic

00:16:51,189 --> 00:16:59,529
can be tricky for instance if you have a

00:16:54,959 --> 00:17:02,290
PHP package a server can be

00:16:59,529 --> 00:17:03,819
Angelique's or Apache all our packages

00:17:02,290 --> 00:17:07,689
and you have only one of them you cannot

00:17:03,819 --> 00:17:11,709
combine here I have a patch in here of

00:17:07,689 --> 00:17:14,439
PHP they mix that in the in the tree so

00:17:11,709 --> 00:17:19,120
the actually perspective is we would be

00:17:14,439 --> 00:17:22,480
really tricky to do that probably

00:17:19,120 --> 00:17:30,809
possible but I don't see really it can

00:17:22,480 --> 00:17:34,380
be too complicated Network side

00:17:30,809 --> 00:17:37,409
currently what supports automatically to

00:17:34,380 --> 00:17:40,870
network configurations one is in Eric

00:17:37,409 --> 00:17:42,549
typical use for Bill it means that he

00:17:40,870 --> 00:17:44,649
narak the network stack of the or of

00:17:42,549 --> 00:17:46,570
your machine so you don't have any

00:17:44,649 --> 00:17:49,000
configuration you cannot expose any

00:17:46,570 --> 00:17:52,059
services outside it but you can have

00:17:49,000 --> 00:17:54,760
access to Internet or whatever or you

00:17:52,059 --> 00:17:58,630
can create a different network inside

00:17:54,760 --> 00:18:01,450
your laptop is exploiting vennett there

00:17:58,630 --> 00:18:03,399
is not yet officially activated in

00:18:01,450 --> 00:18:08,769
freebsd kernel so that means that you

00:18:03,399 --> 00:18:09,690
have to rebuild your kernel it hat is

00:18:08,769 --> 00:18:17,940
already cleared

00:18:09,690 --> 00:18:21,309
nice it's supported by PF using a net

00:18:17,940 --> 00:18:24,580
just okay and the big picture basically

00:18:21,309 --> 00:18:27,370
this is the host in the configuration

00:18:24,580 --> 00:18:31,000
file you specify the big stuff about

00:18:27,370 --> 00:18:33,460
your network the network addresses the

00:18:31,000 --> 00:18:35,980
internal gateway is the the gateway for

00:18:33,460 --> 00:18:43,330
your internal network and this is

00:18:35,980 --> 00:18:46,620
currently my natural interface those are

00:18:43,330 --> 00:18:51,130
possible paths every container as a I

00:18:46,620 --> 00:18:53,350
would say IP address and the system

00:18:51,130 --> 00:18:55,840
automatically create this pair of

00:18:53,350 --> 00:18:57,550
network cards one we belong to the

00:18:55,840 --> 00:19:01,810
container once they're outside in the

00:18:57,550 --> 00:19:04,330
host you just attach the the car to the

00:19:01,810 --> 00:19:07,090
beach and then if you have an internal

00:19:04,330 --> 00:19:10,300
communication is used the bridge if you

00:19:07,090 --> 00:19:17,110
want to go out it's just the PF is going

00:19:10,300 --> 00:19:20,590
out currently its support ipv4 problem

00:19:17,110 --> 00:19:23,650
in the future ipv6 if you are using ipv6

00:19:20,590 --> 00:19:26,320
only network it doesn't work I test it

00:19:23,650 --> 00:19:28,930
before so it's not yet ready I guess

00:19:26,320 --> 00:19:31,540
there is some trick they have to do with

00:19:28,930 --> 00:19:34,000
the net it's just really trivial

00:19:31,540 --> 00:19:37,120
configuration the big part is just doing

00:19:34,000 --> 00:19:39,280
the creation when you say a is use as

00:19:37,120 --> 00:19:41,020
intimate are just one of these we

00:19:39,280 --> 00:19:45,820
automatically create the infrastructure

00:19:41,020 --> 00:19:47,470
that you have that you need you have

00:19:45,820 --> 00:19:51,250
several missing features in this area

00:19:47,470 --> 00:19:53,260
for instance it would be nice to have a

00:19:51,250 --> 00:19:55,150
container directly attached to your

00:19:53,260 --> 00:19:59,590
network card so having a fixed address

00:19:55,150 --> 00:20:02,830
which is what J's support my system

00:19:59,590 --> 00:20:05,350
doesn't support yet but this should be

00:20:02,830 --> 00:20:07,990
easy to do I would like to add a small

00:20:05,350 --> 00:20:09,550
tool to help management of this network

00:20:07,990 --> 00:20:13,380
system because the kind of static

00:20:09,550 --> 00:20:17,200
manager I cannot run a real DHCP inside

00:20:13,380 --> 00:20:17,710
so something like that and the third

00:20:17,200 --> 00:20:20,980
part

00:20:17,710 --> 00:20:22,840
I'm working on it is expose network

00:20:20,980 --> 00:20:26,410
services in societies with tor network

00:20:22,840 --> 00:20:29,680
so basically I really done the work

00:20:26,410 --> 00:20:33,460
about DNS pot you can create an internal

00:20:29,680 --> 00:20:37,530
ultimate DNS port network is a internal

00:20:33,460 --> 00:20:40,840
DNS for the system based on console so

00:20:37,530 --> 00:20:42,790
your container can start register the

00:20:40,840 --> 00:20:46,570
services to console and then there are

00:20:42,790 --> 00:20:48,580
reachable via DNS and then with Asia

00:20:46,570 --> 00:20:50,650
priestess or a load balancer like HR

00:20:48,580 --> 00:20:54,850
proxy in your host you can make

00:20:50,650 --> 00:20:55,820
everything available dynamic micro

00:20:54,850 --> 00:20:58,789
service friendly

00:20:55,820 --> 00:21:02,649
or this kind of stuff but it's still

00:20:58,789 --> 00:21:05,989
ongoing is using tooling from other

00:21:02,649 --> 00:21:09,220
suppliers taking very possible there is

00:21:05,989 --> 00:21:09,220
no limits to do that

00:21:10,659 --> 00:21:15,950
what is heavily based on sort of s

00:21:13,190 --> 00:21:19,489
everything there is unzip the first data

00:21:15,950 --> 00:21:22,309
set the first if you don't know you can

00:21:19,489 --> 00:21:26,419
do magic stuff like taking a snapshot of

00:21:22,309 --> 00:21:29,359
a data set so you can take a snapshot of

00:21:26,419 --> 00:21:31,340
a pot so you have a container oh this is

00:21:29,359 --> 00:21:35,149
nice I can take a snapshot so I can and

00:21:31,340 --> 00:21:37,340
then I can use the snapshot in several

00:21:35,149 --> 00:21:39,799
way for instance that can make some it

00:21:37,340 --> 00:21:41,720
test modification and then it doesn't

00:21:39,799 --> 00:21:45,769
work you can go back and reuse this

00:21:41,720 --> 00:21:50,629
natural that you take before so those

00:21:45,769 --> 00:21:51,289
are pretty useful features that they are

00:21:50,629 --> 00:21:54,710
for free

00:21:51,289 --> 00:21:56,690
you can even clone a snapshot and that

00:21:54,710 --> 00:21:57,200
can be used to clone a party on a

00:21:56,690 --> 00:21:59,239
container

00:21:57,200 --> 00:22:00,649
oh this is nice I can clone it because

00:21:59,239 --> 00:22:04,970
we want to run some modification I would

00:22:00,649 --> 00:22:07,599
I want to test something so you can come

00:22:04,970 --> 00:22:11,029
on our current container and make your

00:22:07,599 --> 00:22:13,940
experiments or whatever you can rename

00:22:11,029 --> 00:22:15,799
it that's looks like trivia that believe

00:22:13,940 --> 00:22:18,529
me is not trivial when you have a lot of

00:22:15,799 --> 00:22:22,940
three that has to be renamed inside that

00:22:18,529 --> 00:22:25,690
is doable the working progress is there

00:22:22,940 --> 00:22:28,609
promote as a kind of tricky concept is

00:22:25,690 --> 00:22:30,529
basically when you have a snapshot and

00:22:28,609 --> 00:22:31,489
then you clone it and then you decide

00:22:30,529 --> 00:22:34,099
that your cool

00:22:31,489 --> 00:22:37,519
is better than the original one you want

00:22:34,099 --> 00:22:39,729
to say okay the experimental one now is

00:22:37,519 --> 00:22:39,729
my

00:22:39,880 --> 00:22:44,030
yeah it's my production tree it's not

00:22:42,110 --> 00:22:47,900
the other one so you want to exchange

00:22:44,030 --> 00:22:53,210
the let's say the importance of them so

00:22:47,900 --> 00:22:54,500
this is what promote does if you use KCF

00:22:53,210 --> 00:22:56,720
I don't know you have a production

00:22:54,500 --> 00:22:58,610
container that runs some web service you

00:22:56,720 --> 00:23:00,920
make a clone you test your stuff there

00:22:58,610 --> 00:23:02,870
and then you want change them in this

00:23:00,920 --> 00:23:04,610
case you need officials like promote

00:23:02,870 --> 00:23:06,920
because that the writers neck should

00:23:04,610 --> 00:23:08,150
stay attached to the original one do you

00:23:06,920 --> 00:23:12,169
want that as natural stay attached to

00:23:08,150 --> 00:23:14,330
the new one small is that a fest up but

00:23:12,169 --> 00:23:27,830
missing feature to have this kind of

00:23:14,330 --> 00:23:29,870
nice basically you have two kinds of

00:23:27,830 --> 00:23:32,720
flavours the first is typical one

00:23:29,870 --> 00:23:34,549
provisioning is a jailer cage providing

00:23:32,720 --> 00:23:37,160
at least you can write a shell script

00:23:34,549 --> 00:23:40,400
that is run inside your container at the

00:23:37,160 --> 00:23:42,320
beginning to make animation terraforming

00:23:40,400 --> 00:23:44,900
provisioning context realization you

00:23:42,320 --> 00:23:46,820
name it what you can be and there is

00:23:44,900 --> 00:23:48,770
also a possibility to have two flavors I

00:23:46,820 --> 00:23:50,530
mean the different one that for all your

00:23:48,770 --> 00:23:55,100
container is the same one and then

00:23:50,530 --> 00:23:57,530
customization and then I extended the

00:23:55,100 --> 00:24:01,220
concept of flavor also with a set of hot

00:23:57,530 --> 00:24:03,020
comments for instance I want to attach a

00:24:01,220 --> 00:24:08,020
system components automatically because

00:24:03,020 --> 00:24:11,570
I know that I can do it so I can write a

00:24:08,020 --> 00:24:13,700
script that does this kind of feature

00:24:11,570 --> 00:24:15,470
possible to enforce priorities for

00:24:13,700 --> 00:24:17,750
instance I want to an apport

00:24:15,470 --> 00:24:20,090
container is a client and I can attach

00:24:17,750 --> 00:24:21,740
automatically the server so we forced up

00:24:20,090 --> 00:24:27,169
the server and then the client this kind

00:24:21,740 --> 00:24:31,010
of realization this is an example quite

00:24:27,169 --> 00:24:35,090
rich it is imitating the job is gain if

00:24:31,010 --> 00:24:37,700
I want to have a building system to

00:24:35,090 --> 00:24:41,660
build packages basically or to test

00:24:37,700 --> 00:24:45,679
staff if I create this flavor called

00:24:41,660 --> 00:24:46,520
build port I have two files one is the

00:24:45,679 --> 00:24:49,100
pot

00:24:46,520 --> 00:24:50,960
script so to say and the other is a real

00:24:49,100 --> 00:24:53,539
shell script the

00:24:50,960 --> 00:24:55,549
here is adding basically all four system

00:24:53,539 --> 00:24:59,090
components they need or that they want

00:24:55,549 --> 00:25:01,880
and that will be the script that will be

00:24:59,090 --> 00:25:04,070
executed inside basically is adding the

00:25:01,880 --> 00:25:05,330
parse tree where the beast files

00:25:04,070 --> 00:25:08,059
basically the source files were

00:25:05,330 --> 00:25:09,649
downloaded so if I have different parts

00:25:08,059 --> 00:25:24,169
they don't have to download every time

00:25:09,649 --> 00:25:25,970
the same the question was about before

00:25:24,169 --> 00:25:29,779
using the first boot or using a

00:25:25,970 --> 00:25:32,179
mechanism of my own I just start the

00:25:29,779 --> 00:25:34,730
container I copied before the script

00:25:32,179 --> 00:25:44,529
there and they run it no sophistication

00:25:34,730 --> 00:25:53,000
at all it's really easy easy there and

00:25:44,529 --> 00:25:56,240
have a question about yeah we spoke

00:25:53,000 --> 00:25:59,690
about time dependency there is this

00:25:56,240 --> 00:26:02,360
object comment that allows you to create

00:25:59,690 --> 00:26:04,460
a runtime dependency to different

00:26:02,360 --> 00:26:06,340
containers or both whatever you want to

00:26:04,460 --> 00:26:10,940
call them

00:26:06,340 --> 00:26:12,289
this is client-server architecture so if

00:26:10,940 --> 00:26:14,240
you have our container as a server

00:26:12,289 --> 00:26:16,850
containers the client in the cloud you

00:26:14,240 --> 00:26:18,890
can add a dependency to the server in

00:26:16,850 --> 00:26:20,779
this case that you have a salt minion

00:26:18,890 --> 00:26:23,240
client that is used for testing and

00:26:20,779 --> 00:26:26,149
these the server is master when I start

00:26:23,240 --> 00:26:28,789
the so test automatically they say oh so

00:26:26,149 --> 00:26:30,409
passive is already running yes good nor

00:26:28,789 --> 00:26:32,390
I were to start it and then I run it

00:26:30,409 --> 00:26:40,700
myself so you can create a kind of

00:26:32,390 --> 00:26:43,220
energy inside it we can speak about four

00:26:40,700 --> 00:26:48,140
hours about our social mutation I add it

00:26:43,220 --> 00:26:51,039
because it looked like really cool maybe

00:26:48,140 --> 00:26:51,039
it's not

00:26:52,610 --> 00:27:00,090
suzay it looks like a really a nice

00:26:54,660 --> 00:27:03,750
topic but it doesn't work I had that CPC

00:27:00,090 --> 00:27:08,040
pset is a comment available festivities

00:27:03,750 --> 00:27:10,640
in all UNIX to stick some processes in

00:27:08,040 --> 00:27:13,500
this case container to specific CPUs

00:27:10,640 --> 00:27:17,340
with this comment line I say that the

00:27:13,500 --> 00:27:21,179
pathname pot fantasy is running on CP u

00:27:17,340 --> 00:27:25,520
0 and qu and only on those 2 CPUs not

00:27:21,179 --> 00:27:28,580
nothing else in this case I can limit

00:27:25,520 --> 00:27:30,870
the usage and their conflicts between

00:27:28,580 --> 00:27:35,190
different containers running on the same

00:27:30,870 --> 00:27:39,570
machine there is a kind of I would say

00:27:35,190 --> 00:27:44,179
race condition so to say I cannot run

00:27:39,570 --> 00:27:44,179
the comments before the jail is created

00:27:48,830 --> 00:27:58,890
nice so just that will be will be solved

00:27:56,340 --> 00:28:03,440
with view with J's that will be support

00:27:58,890 --> 00:28:07,230
a CP set inside I would like to have

00:28:03,440 --> 00:28:10,380
improvement currently this man you see

00:28:07,230 --> 00:28:11,790
0-2 means that you have in the

00:28:10,380 --> 00:28:14,670
configuration you say that this

00:28:11,790 --> 00:28:16,800
container run on CPU Xeon CPU is not in

00:28:14,670 --> 00:28:19,350
any at all I would like to just say a

00:28:16,800 --> 00:28:22,170
use to course not

00:28:19,350 --> 00:28:24,480
which one so just when you start the

00:28:22,170 --> 00:28:28,830
container is identify which is less used

00:28:24,480 --> 00:28:35,400
and allocate monthly way missing feature

00:28:28,830 --> 00:28:40,950
it become then I try to play with our

00:28:35,400 --> 00:28:43,679
CTL who knows our CTL is still activated

00:28:40,950 --> 00:28:45,960
you can confirm it it's not yet

00:28:43,679 --> 00:28:49,350
activated as framework is a limited

00:28:45,960 --> 00:28:54,420
resource I was a limitation resource

00:28:49,350 --> 00:28:57,480
management framework inside FreeBSD get

00:28:54,420 --> 00:28:58,919
activated at the time I can't we use it

00:28:57,480 --> 00:29:01,379
a lot to show

00:28:58,919 --> 00:29:03,450
resources used by your continued can see

00:29:01,379 --> 00:29:05,309
how much memory is your containers using

00:29:03,450 --> 00:29:07,200
how much will memory physical memory

00:29:05,309 --> 00:29:10,080
there is an estimation about any

00:29:07,200 --> 00:29:12,450
operations and so on

00:29:10,080 --> 00:29:17,009
theoretically you can use it also to

00:29:12,450 --> 00:29:18,809
limit those resources for instance you

00:29:17,009 --> 00:29:22,019
can say hey I don't want this my

00:29:18,809 --> 00:29:30,929
container use more than one gigabyte of

00:29:22,019 --> 00:29:32,549
physical memory such a bad idea first of

00:29:30,929 --> 00:29:34,859
all normally you have to say how much

00:29:32,549 --> 00:29:37,619
memory and you don't have really clear

00:29:34,859 --> 00:29:39,409
idea how what can be a limit for a

00:29:37,619 --> 00:29:41,820
container I don't know it could be

00:29:39,409 --> 00:29:42,749
reasonable to have one gigabyte could be

00:29:41,820 --> 00:29:47,070
true gigabytes

00:29:42,749 --> 00:29:48,840
you don't really know exactly and then I

00:29:47,070 --> 00:29:50,879
make some experiment to understand

00:29:48,840 --> 00:29:54,090
what's happening when you switch in this

00:29:50,879 --> 00:29:56,279
limit I mean I creating the denial of

00:29:54,090 --> 00:29:58,710
service is crashing everything is going

00:29:56,279 --> 00:30:01,230
after memory what's what's the effect so

00:29:58,710 --> 00:30:03,480
can I have an instance of salt master I

00:30:01,230 --> 00:30:06,710
said okay how much memory is using an

00:30:03,480 --> 00:30:09,710
empty so master mean is a Python server

00:30:06,710 --> 00:30:14,090
450 megabyte doing nothing but say okay

00:30:09,710 --> 00:30:18,179
try to put some limitation so I say

00:30:14,090 --> 00:30:20,489
slightly 400 meter by still walking no

00:30:18,179 --> 00:30:24,059
complaints I say what how is possible at

00:30:20,489 --> 00:30:28,279
the system run with 30 megabytes less be

00:30:24,059 --> 00:30:28,279
aggressive 200 megabyte still working

00:30:28,970 --> 00:30:34,470
some time was above so the first

00:30:31,649 --> 00:30:37,159
question was okay if it is a Bob is not

00:30:34,470 --> 00:30:41,220
so bad it's not crashing I mean the

00:30:37,159 --> 00:30:44,789
features is saved but leave it 50

00:30:41,220 --> 00:30:46,619
megabyte still working 10 megabytes

00:30:44,789 --> 00:30:49,950
still working it was really really

00:30:46,619 --> 00:30:55,440
confused and I would the what it does

00:30:49,950 --> 00:30:58,220
it's basically for processes to free or

00:30:55,440 --> 00:31:00,720
physical memory they are not really

00:30:58,220 --> 00:31:03,210
necessarily to use basically that all

00:31:00,720 --> 00:31:06,629
read-only pages like text segments and

00:31:03,210 --> 00:31:08,820
so on so in this case was a Python

00:31:06,629 --> 00:31:11,270
process so all Python passes there were

00:31:08,820 --> 00:31:14,640
several Python processes every

00:31:11,270 --> 00:31:17,780
could take a loan or 50 megabyte and few

00:31:14,640 --> 00:31:20,850
of them is restricted to 50 kilobytes

00:31:17,780 --> 00:31:23,430
because a minimum working set the

00:31:20,850 --> 00:31:27,690
working set is a nice operating system

00:31:23,430 --> 00:31:30,060
theory name and actually if exactly what

00:31:27,690 --> 00:31:32,660
it does its reduced the working set of

00:31:30,060 --> 00:31:35,280
your processes at minimum it can have

00:31:32,660 --> 00:31:37,730
performance penalty because obviously

00:31:35,280 --> 00:31:40,440
working set there is a reason to keep

00:31:37,730 --> 00:31:44,630
these pages in memory instead of

00:31:40,440 --> 00:31:46,890
floating every time all of them I

00:31:44,630 --> 00:31:50,330
wouldn't suggest to use this kind of

00:31:46,890 --> 00:31:53,310
limitation because I just read that it

00:31:50,330 --> 00:31:58,050
it doesn't feel really correct it's good

00:31:53,310 --> 00:32:00,060
to have somehow a way to avoid or to

00:31:58,050 --> 00:32:02,550
control what several containers are

00:32:00,060 --> 00:32:04,560
doing to avoid mixing I mean one

00:32:02,550 --> 00:32:11,100
container go crazy and affecting the

00:32:04,560 --> 00:32:13,560
world system but still I'm questioning

00:32:11,100 --> 00:32:15,830
about how good this kind of limitation

00:32:13,560 --> 00:32:15,830
can be

00:32:21,150 --> 00:32:25,870
the question was about if these

00:32:24,000 --> 00:32:28,570
constraints are affecting all other

00:32:25,870 --> 00:32:30,490
containers no it's per container so you

00:32:28,570 --> 00:32:34,240
can say okay please discontinue use just

00:32:30,490 --> 00:32:37,000
10 megabyte it yeah

00:32:34,240 --> 00:32:39,150
if somehow good but first of all is not

00:32:37,000 --> 00:32:44,500
respected because it's only that

00:32:39,150 --> 00:32:47,650
read-only pages can be drop off if you

00:32:44,500 --> 00:32:50,230
have to load an image or data that

00:32:47,650 --> 00:32:51,880
captain has to be modified it has to be

00:32:50,230 --> 00:32:57,600
there they stayed there and they use

00:32:51,880 --> 00:33:04,060
memory so it's not a strict constraint

00:32:57,600 --> 00:33:06,400
so because otherwise you have what out

00:33:04,060 --> 00:33:08,380
of memory and then the process died and

00:33:06,400 --> 00:33:09,730
you're not happy as well because then

00:33:08,380 --> 00:33:11,740
you have denial of service I mean it's

00:33:09,730 --> 00:33:15,100
not really something that you want is

00:33:11,740 --> 00:33:19,570
its controversial topic because when you

00:33:15,100 --> 00:33:21,280
reach the limit what happened still

00:33:19,570 --> 00:33:22,840
struggling with what could be I mean

00:33:21,280 --> 00:33:24,940
it's usable it's still there I mean I

00:33:22,840 --> 00:33:28,480
left these features there because it can

00:33:24,940 --> 00:33:31,000
be useful you can prioritize basically

00:33:28,480 --> 00:33:34,270
also the the usage of memory in your new

00:33:31,000 --> 00:33:36,130
system but my suggestion is leave the

00:33:34,270 --> 00:33:39,190
memory management to the operating

00:33:36,130 --> 00:33:42,810
system is doing the best job you have to

00:33:39,190 --> 00:33:47,050
keep an eye okay it was using more but

00:33:42,810 --> 00:33:53,350
three memory is waste memory so this

00:33:47,050 --> 00:33:56,890
what a lot of people used to say very

00:33:53,350 --> 00:33:59,560
shortly P CPU is percentage CPU our CTL

00:33:56,890 --> 00:34:02,830
theoretically allowed to limit the

00:33:59,560 --> 00:34:04,240
percentage of CPU used by a container or

00:34:02,830 --> 00:34:09,940
process or something like that

00:34:04,240 --> 00:34:11,860
I wasn't able to use it really I thought

00:34:09,940 --> 00:34:16,629
I don't know if it's a bug or not I need

00:34:11,860 --> 00:34:21,610
time to identify it I use stressing G as

00:34:16,629 --> 00:34:24,190
a stressor stressing CPU user space

00:34:21,610 --> 00:34:27,730
everything was fine I say okay use 60%

00:34:24,190 --> 00:34:30,850
of CPU it was using 60% of CPU nice then

00:34:27,730 --> 00:34:32,990
I say okay use a fork stressors start to

00:34:30,850 --> 00:34:36,450
fork as a hell and

00:34:32,990 --> 00:34:39,119
CPU person that uses words around 25,000

00:34:36,450 --> 00:34:43,619
percentage I say how can be possibly as

00:34:39,119 --> 00:34:44,970
a fork or cannot reach 250 it I think

00:34:43,619 --> 00:34:47,669
there is something wrong in the counter

00:34:44,970 --> 00:34:51,919
but what they see is how it works if you

00:34:47,669 --> 00:34:54,899
need this limit the person are stopped

00:34:51,919 --> 00:34:59,160
completely stopped full stop frozen did

00:34:54,899 --> 00:35:01,079
not go for any folder so I saw this

00:34:59,160 --> 00:35:05,579
delay of seconds because I have to reach

00:35:01,079 --> 00:35:08,640
again this 60% of usage was 2000 and go

00:35:05,579 --> 00:35:10,020
back to is checked time to time is not a

00:35:08,640 --> 00:35:12,869
really strict I mean you cannot say a

00:35:10,020 --> 00:35:14,700
process a run smoothly you have to check

00:35:12,869 --> 00:35:16,260
stop to run and then you say are used

00:35:14,700 --> 00:35:19,170
too much resources so you stop it and

00:35:16,260 --> 00:35:21,750
then ok now you have more time to use it

00:35:19,170 --> 00:35:26,970
and then you stop it so it's kind of

00:35:21,750 --> 00:35:29,430
strange behavior pushing some delay that

00:35:26,970 --> 00:35:30,720
is not really easy to observe I will

00:35:29,430 --> 00:35:32,940
prefer to use CPU set

00:35:30,720 --> 00:35:35,250
you mean is the number of course that

00:35:32,940 --> 00:35:41,760
you are using more than limiting the

00:35:35,250 --> 00:35:44,849
percentage of it's easier and probably

00:35:41,760 --> 00:35:47,609
is stress less the scheduler if someone

00:35:44,849 --> 00:35:50,579
knows better than me how our city and

00:35:47,609 --> 00:35:54,059
work on PCP you please help me in this

00:35:50,579 --> 00:35:57,079
case probably is it's a bug I would say

00:35:54,059 --> 00:35:57,079
with this number is

00:36:16,360 --> 00:36:29,710
right question was about another way hi

00:36:23,410 --> 00:36:32,380
P are you okay limits are you know I

00:36:29,710 --> 00:36:35,380
didn't do it yet my deal was basically

00:36:32,380 --> 00:36:37,570
to add asked you to limit the usage of

00:36:35,380 --> 00:36:39,400
bandwidth between containers who

00:36:37,570 --> 00:36:44,470
privatize the usage of the network card

00:36:39,400 --> 00:36:47,470
or something like that but I'm still

00:36:44,470 --> 00:36:55,210
developing discovering new stuff down

00:36:47,470 --> 00:36:56,200
there but this you can submit patches no

00:36:55,210 --> 00:37:00,790
shop the big picture

00:36:56,200 --> 00:37:02,680
I currently so what if now a system just

00:37:00,790 --> 00:37:07,020
a bunch of shell script I did it in the

00:37:02,680 --> 00:37:10,810
last three months in my spare time so

00:37:07,020 --> 00:37:17,730
really green system I'm the only user so

00:37:10,810 --> 00:37:22,120
it's full of block but working late I

00:37:17,730 --> 00:37:27,750
kind of big picture what could be really

00:37:22,120 --> 00:37:32,920
nice for instance I'm trying to put

00:37:27,750 --> 00:37:35,950
electron on previously that use a

00:37:32,920 --> 00:37:38,320
library based on chromium that means it

00:37:35,950 --> 00:37:41,350
has to be if chromium itself if you ever

00:37:38,320 --> 00:37:43,870
compiled chromium you know you noticed

00:37:41,350 --> 00:37:47,440
only this sources compressed are around

00:37:43,870 --> 00:37:50,590
1500 megabyte it takes normally on a

00:37:47,440 --> 00:37:52,960
server with multi-core ten hours I would

00:37:50,590 --> 00:37:55,690
certainly bet on your my Leto could take

00:37:52,960 --> 00:37:57,670
two days so you say well I start to work

00:37:55,690 --> 00:37:59,920
on it I would like would like to take my

00:37:57,670 --> 00:38:02,920
container I move to a powerful server

00:37:59,920 --> 00:38:09,250
and do the work there currently I cannot

00:38:02,920 --> 00:38:11,650
but for you for people doesn't know ZFS

00:38:09,250 --> 00:38:15,580
snapshots can be transferred per network

00:38:11,650 --> 00:38:19,870
so theoretically I can send I a apart is

00:38:15,580 --> 00:38:21,820
a collection of ZFS data set so I can

00:38:19,870 --> 00:38:24,280
just send them to another server and

00:38:21,820 --> 00:38:26,920
then allow this container to run

00:38:24,280 --> 00:38:28,870
somewhere else so it's not impossible to

00:38:26,920 --> 00:38:32,030
do it

00:38:28,870 --> 00:38:33,410
so imitating dr. Hart or something like

00:38:32,030 --> 00:38:36,650
that

00:38:33,410 --> 00:38:39,680
this is just a bunch of what you have a

00:38:36,650 --> 00:38:43,790
snapshot exporter so you can have to

00:38:39,680 --> 00:38:48,260
take snapshots for every container that

00:38:43,790 --> 00:38:50,990
you have but the good part is locally

00:38:48,260 --> 00:38:54,050
you just need for instance one instance

00:38:50,990 --> 00:38:56,330
of the base 11 because all of them they

00:38:54,050 --> 00:39:01,370
are based on the same base 11 just if

00:38:56,330 --> 00:39:03,710
one of them the same for everything is

00:39:01,370 --> 00:39:07,810
using the dolly and they're the bit part

00:39:03,710 --> 00:39:10,220
of two snapshots is that you can send

00:39:07,810 --> 00:39:13,130
incremental snapshots that means if you

00:39:10,220 --> 00:39:16,460
have already said if I have an update or

00:39:13,130 --> 00:39:18,740
an upgrade for instance package PHP or

00:39:16,460 --> 00:39:21,020
new version I create a new snapshot and

00:39:18,740 --> 00:39:24,110
they send here only the differences

00:39:21,020 --> 00:39:26,050
between the previous data set and the

00:39:24,110 --> 00:39:28,970
new one and then all of them are

00:39:26,050 --> 00:39:35,180
immediately upgraded to the new version

00:39:28,970 --> 00:39:37,550
of the optin area that is division I

00:39:35,180 --> 00:39:40,160
don't know if it really works in the

00:39:37,550 --> 00:39:44,390
production value I dia so I would like

00:39:40,160 --> 00:39:50,510
to add more feature and to try it one

00:39:44,390 --> 00:39:55,540
day and then nice name for orchestration

00:39:50,510 --> 00:39:57,440
yes that's basically I have I hate

00:39:55,540 --> 00:39:59,810
automatically fully automatic

00:39:57,440 --> 00:40:05,240
orchestration I truly believe it doesn't

00:39:59,810 --> 00:40:07,610
work but here is it's just boxes I

00:40:05,240 --> 00:40:09,710
really like to use LibreOffice and the

00:40:07,610 --> 00:40:11,540
mouse so that's right corrected but

00:40:09,710 --> 00:40:14,210
there's no real meaning on that is just

00:40:11,540 --> 00:40:17,840
you know we have a bunch of by for web

00:40:14,210 --> 00:40:20,600
services I distribute them the yellow

00:40:17,840 --> 00:40:21,860
one are just kind of sort of backup but

00:40:20,600 --> 00:40:24,950
all the intelligence is in the load

00:40:21,860 --> 00:40:26,330
balancer so is this my personal vision

00:40:24,950 --> 00:40:28,610
of orchestration I can send my

00:40:26,330 --> 00:40:33,100
containers there and it's the load

00:40:28,610 --> 00:40:37,630
balancer that keep them ready to be used

00:40:33,100 --> 00:40:42,940
or running in parallel or whatever but

00:40:37,630 --> 00:40:47,780
still this is really far way far to be

00:40:42,940 --> 00:40:51,350
implemented first conclusion the project

00:40:47,780 --> 00:40:54,020
is on github for kit submit request

00:40:51,350 --> 00:40:56,930
issues whatever please use it and give

00:40:54,020 --> 00:41:02,060
me a lot of feedback as the only user I

00:40:56,930 --> 00:41:05,330
know that is it's broken something that

00:41:02,060 --> 00:41:06,830
is really good to remember containers

00:41:05,330 --> 00:41:12,230
cannot be better than the operating

00:41:06,830 --> 00:41:14,810
system that is under the hood so making

00:41:12,230 --> 00:41:15,260
some docker comparison they say ok

00:41:14,810 --> 00:41:16,460
doctor

00:41:15,260 --> 00:41:18,800
does this stuff in this way because

00:41:16,460 --> 00:41:20,810
Linux has these features BBC is

00:41:18,800 --> 00:41:22,960
different so you have that data first

00:41:20,810 --> 00:41:26,210
data set you can do different stuff I

00:41:22,960 --> 00:41:29,930
wouldn't say better work I don't care

00:41:26,210 --> 00:41:31,250
is just different because I'm using the

00:41:29,930 --> 00:41:33,020
operating system has different

00:41:31,250 --> 00:41:36,140
peculiarities different features and

00:41:33,020 --> 00:41:37,910
that's why it's different but you can

00:41:36,140 --> 00:41:39,640
not overcome this kind of stuff if there

00:41:37,910 --> 00:41:42,290
is no process relation you cannot do it

00:41:39,640 --> 00:41:45,790
without J's I cannot do this kind of

00:41:42,290 --> 00:41:45,790
colonization or something like that

00:41:46,000 --> 00:41:55,040
yeah thanks for coming

00:41:50,090 --> 00:42:00,430
we'll enjoy it to do it question I will

00:41:55,040 --> 00:42:00,430
be around here whatever but don't be shy

00:42:12,390 --> 00:42:20,140
it's mixing the berries component okay I

00:42:15,580 --> 00:42:23,020
will Jade already I have packages if I

00:42:20,140 --> 00:42:26,740
mix all that I can make mystic an image

00:42:23,020 --> 00:42:36,810
or presenting something for a container

00:42:26,740 --> 00:42:36,810
system that I can generate some kind of

00:42:41,280 --> 00:42:46,720
the question was about modular image a

00:42:44,200 --> 00:42:50,100
new comment of project that can create

00:42:46,720 --> 00:42:53,020
an image with all the packages created

00:42:50,100 --> 00:42:54,490
to be ready to be used kind of this

00:42:53,020 --> 00:42:56,710
mystic as you can already store with

00:42:54,490 --> 00:42:59,340
your custom custom version of Phoebus de

00:42:56,710 --> 00:43:04,960
packages and so on I wasn't aware that

00:42:59,340 --> 00:43:08,620
one one idea was for me was create

00:43:04,960 --> 00:43:12,910
packages with podrÃ­a run a pot it is to

00:43:08,620 --> 00:43:15,670
this new fleshly experimental packages

00:43:12,910 --> 00:43:17,680
in a container or a multiple cotton

00:43:15,670 --> 00:43:20,050
especially if you have web server to

00:43:17,680 --> 00:43:22,480
test or distributor system to test this

00:43:20,050 --> 00:43:25,000
can be really useful to automate all

00:43:22,480 --> 00:43:27,520
this kind of stuff and create parts that

00:43:25,000 --> 00:43:34,510
just install new stuff test them look

00:43:27,520 --> 00:43:37,960
and it goes also to create to to test up

00:43:34,510 --> 00:43:41,530
create procedures I take a snapshot

00:43:37,960 --> 00:43:43,570
super part so this is always the current

00:43:41,530 --> 00:43:45,220
stuff for the previous stuff so I run an

00:43:43,570 --> 00:43:48,010
upgrade I see okay there's a conflict

00:43:45,220 --> 00:43:50,350
what is a company and they can test also

00:43:48,010 --> 00:43:52,960
database I mean current situation

00:43:50,350 --> 00:43:56,050
comparing them and so on so that was my

00:43:52,960 --> 00:43:58,120
idea as component to attach to project

00:43:56,050 --> 00:44:06,220
but it will be nice to have this kind of

00:43:58,120 --> 00:44:11,880
output documentation the question was

00:44:06,220 --> 00:44:18,120
what documentation your it's

00:44:11,880 --> 00:44:25,200
there is a super there is super nice on

00:44:18,120 --> 00:44:27,330
people is 0% I would say I have to work

00:44:25,200 --> 00:44:31,110
especially to how to do this stuff I

00:44:27,330 --> 00:44:32,910
mean yeah that's also why I need

00:44:31,110 --> 00:44:36,990
feedback because I know how to do it

00:44:32,910 --> 00:44:40,880
I know under the hood but and please as

00:44:36,990 --> 00:44:40,880
we must have a recent examples over them

00:44:56,900 --> 00:45:04,590
the question was if I had a way to

00:45:00,240 --> 00:45:10,260
import existing J's to to part no I

00:45:04,590 --> 00:45:12,600
don't have this not yet I said it's

00:45:10,260 --> 00:45:16,890
fully customized on my needs because I'm

00:45:12,600 --> 00:45:18,710
the only user so but feel free we join

00:45:16,890 --> 00:45:21,300
the community do it

00:45:18,710 --> 00:45:24,990
I've enjoyed to to have more people

00:45:21,300 --> 00:45:27,110
working on it with I mean it to me is a

00:45:24,990 --> 00:45:29,700
cool idea but alone I cannot do really

00:45:27,110 --> 00:45:33,590
it's potentially a lot of work a lot of

00:45:29,700 --> 00:45:33,590
use case that cannot really manage

00:46:05,940 --> 00:46:10,229
the question was I mean it's still

00:46:08,890 --> 00:46:14,019
something that I'm struggling this

00:46:10,229 --> 00:46:15,190
certification is really needed that's

00:46:14,019 --> 00:46:17,380
still something that I'm questioning

00:46:15,190 --> 00:46:19,180
about I mean splitting these in packages

00:46:17,380 --> 00:46:21,999
is really needed or that can be

00:46:19,180 --> 00:46:25,599
condensed with only one and who cares

00:46:21,999 --> 00:46:28,559
about the customizations up is different

00:46:25,599 --> 00:46:31,299
is per container but the other can be

00:46:28,559 --> 00:46:33,489
even if what I'm doing visually if you

00:46:31,299 --> 00:46:36,910
have a base that is clean then you make

00:46:33,489 --> 00:46:38,380
a clone by calling it so only the

00:46:36,910 --> 00:46:40,710
difference are stored on the disk so

00:46:38,380 --> 00:46:44,469
it's it's not a waste of space and

00:46:40,710 --> 00:46:47,829
sister ugly the idea was really to speed

00:46:44,469 --> 00:46:50,950
them to send to reduce as much as

00:46:47,829 --> 00:46:52,839
possible or something like that but can

00:46:50,950 --> 00:46:55,690
create problem currently I guess easyJet

00:46:52,839 --> 00:47:03,309
for instance create only one data files

00:46:55,690 --> 00:47:05,739
that are set for the wall jail though

00:47:03,309 --> 00:47:08,079
currently I mean it's possible to make

00:47:05,739 --> 00:47:12,549
some time anything and also recreates

00:47:08,079 --> 00:47:16,269
not I mean with good flavors you can

00:47:12,549 --> 00:47:18,670
technically recreate really easily you

00:47:16,269 --> 00:47:23,859
have no time to make a short demo I can

00:47:18,670 --> 00:47:26,440
show this it's really take 30 seconds to

00:47:23,859 --> 00:47:27,009
create a part if the base is already

00:47:26,440 --> 00:47:29,979
there

00:47:27,009 --> 00:47:32,710
it's really just run it because that

00:47:29,979 --> 00:47:35,109
affects clone is immediate when the jail

00:47:32,710 --> 00:47:38,589
it takes two seconds so creating the new

00:47:35,109 --> 00:47:42,660
part is zero time technically we can do

00:47:38,589 --> 00:47:42,660
it is why not

00:47:45,060 --> 00:47:54,620
I have here already the line this is a

00:47:50,970 --> 00:47:57,180
complex one I create a particle test

00:47:54,620 --> 00:48:01,050
it's visible for everyone make it bigger

00:47:57,180 --> 00:48:05,850
and pot called

00:48:01,050 --> 00:48:09,210
test based on a base 11 one with IP

00:48:05,850 --> 00:48:11,670
address or my internal network I'm using

00:48:09,210 --> 00:48:15,060
the big port flavor and I want to use

00:48:11,670 --> 00:48:19,610
the DNS as a party's that of inheriting

00:48:15,060 --> 00:48:19,610
the DNS configuration from my host and

00:48:21,860 --> 00:48:26,820
it was completely clean and this is what

00:48:24,840 --> 00:48:31,860
it take it just launched the DNS for

00:48:26,820 --> 00:48:35,310
instance it creates the pot and is

00:48:31,860 --> 00:48:37,380
running all and that's it it's running

00:48:35,310 --> 00:48:39,930
all the flavor so to run a flavor has to

00:48:37,380 --> 00:48:42,420
run the container run the flavor inside

00:48:39,930 --> 00:48:45,930
stop it so that's right take a little

00:48:42,420 --> 00:48:49,170
bit that that I created a container and

00:48:45,930 --> 00:48:50,370
I don't know two seconds everything is

00:48:49,170 --> 00:48:52,250
already there that's why it's so easy

00:48:50,370 --> 00:48:57,770
certainly you don't have to download

00:48:52,250 --> 00:49:07,140
every time everything but that's what

00:48:57,770 --> 00:49:10,710
more or less I did this the container

00:49:07,140 --> 00:49:14,190
that I just created is called test this

00:49:10,710 --> 00:49:17,760
the AP is connecting not active those

00:49:14,190 --> 00:49:19,830
are the data set and those are the names

00:49:17,760 --> 00:49:22,140
and then where they are mounted so

00:49:19,830 --> 00:49:25,440
that's why immigration is a bit tricky

00:49:22,140 --> 00:49:28,020
because what pot does is forcing

00:49:25,440 --> 00:49:31,220
conventions to know exactly what web

00:49:28,020 --> 00:49:34,500
data set are we have to be mounted so

00:49:31,220 --> 00:49:35,940
let's is to make automations otherwise

00:49:34,500 --> 00:49:42,240
this can be hard to make this kind of

00:49:35,940 --> 00:49:45,560
automation with stuff basically that's

00:49:42,240 --> 00:49:45,560
it for me

00:49:51,930 --> 00:50:09,510
I activate it and now I mean if you see

00:49:57,350 --> 00:50:11,790
the network and decide to is only yeah

00:50:09,510 --> 00:50:14,910
this is the network configuration inside

00:50:11,790 --> 00:50:18,690
you have the desired rest if I go out

00:50:14,910 --> 00:50:25,170
and I make if called Hague page you

00:50:18,690 --> 00:50:27,630
probably and it was automatically

00:50:25,170 --> 00:50:28,800
created it wasn't active before it was I

00:50:27,630 --> 00:50:32,480
didn't need the bridge is missing

00:50:28,800 --> 00:50:37,070
creating it with the gateway address and

00:50:32,480 --> 00:50:37,070
is adding where is it

00:50:37,560 --> 00:50:44,700
member I have the e pair network card

00:50:41,940 --> 00:50:46,470
and it automatically means it's just

00:50:44,700 --> 00:50:49,410
pushing more information you don't have

00:50:46,470 --> 00:50:54,570
to meet all tricks to use it about

00:50:49,410 --> 00:50:59,070
network and so on so that was my I try

00:50:54,570 --> 00:51:01,670
to make stuff easier I would say that

00:50:59,070 --> 00:51:01,670
time is over

00:51:04,040 --> 00:51:08,610
[Applause]

00:51:10,210 --> 00:51:12,270

YouTube URL: https://www.youtube.com/watch?v=8zIFhHIZDD8


