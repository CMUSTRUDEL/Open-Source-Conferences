Title: syspatch(8)OpenBSD base system maintenance made easy
Publication date: 2018-02-03
Playlist: FOSDEM 2018
Description: 
	by Antoine Jacoutot

At: FOSDEM 2018
Room: K.3.401
Scheduled start: 2018-02-03 15:00:00+01
Captions: 
	00:00:05,740 --> 00:00:12,129
hello everyone welcome thank you for

00:00:08,710 --> 00:00:15,520
attending this talk today I'm gonna talk

00:00:12,129 --> 00:00:21,070
about small but handy tool called sis

00:00:15,520 --> 00:00:25,330
patch so quickly when I saw my name is

00:00:21,070 --> 00:00:27,880
Antoine I'm known as a J Couto or a J at

00:00:25,330 --> 00:00:30,520
OpenBSD dot org I'm also part of the

00:00:27,880 --> 00:00:33,430
gnome foundation and I mostly work on

00:00:30,520 --> 00:00:36,909
anything that helps me put OpenBSD into

00:00:33,430 --> 00:00:41,440
production and for work I'm a head of a

00:00:36,909 --> 00:00:42,579
sari at Vaughan privet so what we're

00:00:41,440 --> 00:00:45,760
gonna talk about today

00:00:42,579 --> 00:00:49,389
sis patch this patch is both a tool and

00:00:45,760 --> 00:00:52,059
a built framework for patches the main

00:00:49,389 --> 00:00:56,710
tool is basically a very small shell

00:00:52,059 --> 00:00:58,539
script 220 line of code and then we have

00:00:56,710 --> 00:01:00,760
the build framework that's under user

00:00:58,539 --> 00:01:03,760
source the district says patch which is

00:01:00,760 --> 00:01:06,520
the usual source tree of your OpenBSD

00:01:03,760 --> 00:01:09,430
installation that's mainly BSD make

00:01:06,520 --> 00:01:11,619
files that replicate what the release

00:01:09,430 --> 00:01:15,460
build process does on open BSD as well

00:01:11,619 --> 00:01:18,969
as or poetry during this talk I'm going

00:01:15,460 --> 00:01:21,640
to talk about binary patch that's not

00:01:18,969 --> 00:01:24,969
really accurate because we're not doing

00:01:21,640 --> 00:01:27,399
binary gypping but we're actually

00:01:24,969 --> 00:01:29,740
providing a new version of binaries

00:01:27,399 --> 00:01:31,990
libraries etc there is just easier to

00:01:29,740 --> 00:01:36,310
refer to them as as binary patches

00:01:31,990 --> 00:01:40,000
though so first of all a little bit of

00:01:36,310 --> 00:01:43,950
history anyone who had to actually

00:01:40,000 --> 00:01:47,679
maintain open BSD boxin in production

00:01:43,950 --> 00:01:49,719
more than a dozen of them hit this

00:01:47,679 --> 00:01:52,509
horrible requirement is that you cannot

00:01:49,719 --> 00:01:54,340
easily keep your system up to date what

00:01:52,509 --> 00:01:56,350
I call up to date is not upgrade from

00:01:54,340 --> 00:01:59,140
one release to another but just to keep

00:01:56,350 --> 00:02:03,159
up to date regarding security and

00:01:59,140 --> 00:02:04,929
reliability patches so up until says

00:02:03,159 --> 00:02:07,840
patch you had basically two solutions

00:02:04,929 --> 00:02:11,380
either you CVS up and then you have to

00:02:07,840 --> 00:02:13,330
recreate a complete release of course

00:02:11,380 --> 00:02:14,920
you have to do that to do everything

00:02:13,330 --> 00:02:17,960
manually you have to use signifies to

00:02:14,920 --> 00:02:23,350
verify that the actual

00:02:17,960 --> 00:02:25,790
stuff that you download is is valid so

00:02:23,350 --> 00:02:27,770
the 2d function you could do is build a

00:02:25,790 --> 00:02:30,980
release from scratch CVS up from stable

00:02:27,770 --> 00:02:32,600
or you keep the ideas D for example six

00:02:30,980 --> 00:02:35,150
point to release and you manually patch

00:02:32,600 --> 00:02:37,130
it and you build only the small part

00:02:35,150 --> 00:02:39,560
that you wanted to be patched the big

00:02:37,130 --> 00:02:41,810
issue with that is that if for example

00:02:39,560 --> 00:02:44,270
you have a security issue in your lip

00:02:41,810 --> 00:02:46,640
crypto then of course we rebuild it with

00:02:44,270 --> 00:02:49,670
the patch that was install shared

00:02:46,640 --> 00:02:51,800
libraries but also start static library

00:02:49,670 --> 00:02:53,900
the problem with static library is that

00:02:51,800 --> 00:02:56,030
anything in the base system that is

00:02:53,900 --> 00:02:59,540
actually using this library will not be

00:02:56,030 --> 00:03:02,360
rebuilt so basically your back half

00:02:59,540 --> 00:03:03,800
patch really so the only real way was to

00:03:02,360 --> 00:03:05,660
build a complete release from scratch

00:03:03,800 --> 00:03:07,310
and that's a huge pain because that

00:03:05,660 --> 00:03:09,800
means that if you want to update a group

00:03:07,310 --> 00:03:11,510
of machines then you have to do a really

00:03:09,800 --> 00:03:13,730
really big upgrade which is like the

00:03:11,510 --> 00:03:16,310
same basically the same thing that you

00:03:13,730 --> 00:03:20,060
would do from one grade to one release

00:03:16,310 --> 00:03:23,470
sorry to and release plus one so it was

00:03:20,060 --> 00:03:27,380
really tedious to to to maintain boxin a

00:03:23,470 --> 00:03:30,800
few years ago i was hired in the company

00:03:27,380 --> 00:03:33,800
called MTA the company one of the

00:03:30,800 --> 00:03:36,470
companies job was to put open BSD

00:03:33,800 --> 00:03:38,840
machines into production both servers

00:03:36,470 --> 00:03:41,060
and workstation so we had a huge pool of

00:03:38,840 --> 00:03:43,750
open BSD machines to maintain all over

00:03:41,060 --> 00:03:47,750
the globe and of course using official

00:03:43,750 --> 00:03:52,190
update facility was really tedious so we

00:03:47,750 --> 00:03:54,560
come up we came up with a tool to

00:03:52,190 --> 00:03:57,380
provide binary patches for the OpenBSD

00:03:54,560 --> 00:04:00,200
based system the tool was based on the

00:03:57,380 --> 00:04:03,050
package tool like when you have a new

00:04:00,200 --> 00:04:06,740
patch you just install the package there

00:04:03,050 --> 00:04:09,980
was two issue with that what it works

00:04:06,740 --> 00:04:13,310
relatively fine it really abuses the

00:04:09,980 --> 00:04:17,299
package tool framework also you will get

00:04:13,310 --> 00:04:19,040
a mismatch binary well myths match

00:04:17,299 --> 00:04:20,810
signatures in your packages when you

00:04:19,040 --> 00:04:23,690
upgrade you in your release let's say

00:04:20,810 --> 00:04:24,540
for example you a great lip crypto using

00:04:23,690 --> 00:04:27,380
using

00:04:24,540 --> 00:04:32,070
then the package shoe framework will

00:04:27,380 --> 00:04:34,710
record the checksum of the binary of

00:04:32,070 --> 00:04:36,780
course when you later upgrade to the new

00:04:34,710 --> 00:04:38,520
release then the package would still be

00:04:36,780 --> 00:04:41,190
installed but of course the library will

00:04:38,520 --> 00:04:42,210
have changed so there were all kind of

00:04:41,190 --> 00:04:47,070
stuff like that that we're not really

00:04:42,210 --> 00:04:49,230
really nice I would say so we come up

00:04:47,070 --> 00:04:54,000
with a small wrapper script called open

00:04:49,230 --> 00:04:56,520
up which is again a shell wrapper that

00:04:54,000 --> 00:05:00,450
we used to to keep both the base system

00:04:56,520 --> 00:05:01,710
and the package up-to-date and it's a

00:05:00,450 --> 00:05:04,440
wrapper because it was doing some stuff

00:05:01,710 --> 00:05:07,260
around behind the scenes to to deal with

00:05:04,440 --> 00:05:10,590
checksum mismatch and stuff like that so

00:05:07,260 --> 00:05:13,020
it worked nicely it was a bit ugly and

00:05:10,590 --> 00:05:14,910
the main issue was that it was not

00:05:13,020 --> 00:05:16,890
official so while the world there were

00:05:14,910 --> 00:05:19,470
there are a few open BSD developer hired

00:05:16,890 --> 00:05:23,540
by this company that's still not of open

00:05:19,470 --> 00:05:23,540
BSD provided a way to stay up to date

00:05:25,370 --> 00:05:34,560
so now situation today so suspended in

00:05:30,630 --> 00:05:38,190
open BSD on September 2016 it was the

00:05:34,560 --> 00:05:41,130
result of a hackathon in Cambridge and

00:05:38,190 --> 00:05:43,860
that's a joint work between Robert Nagi

00:05:41,130 --> 00:05:46,500
and myself the first support it really

00:05:43,860 --> 00:05:48,810
is was open BSD six on one so that is

00:05:46,500 --> 00:05:52,890
the previews release since we're at six

00:05:48,810 --> 00:05:55,230
point two today so this tool only makes

00:05:52,890 --> 00:05:57,390
sense on official releases and kernel

00:05:55,230 --> 00:05:59,880
you cannot use it if you're using like

00:05:57,390 --> 00:06:02,940
current or if you use it using stable

00:05:59,880 --> 00:06:05,220
it's really meant to be an additional

00:06:02,940 --> 00:06:09,630
layer on top of your of the regular

00:06:05,220 --> 00:06:15,920
release as of today we support amd64 re

00:06:09,630 --> 00:06:18,570
386 and 164 we only support the last

00:06:15,920 --> 00:06:22,200
release so that means that as of today

00:06:18,570 --> 00:06:24,280
we don't support 6.1 anymore although it

00:06:22,200 --> 00:06:26,740
is still supported

00:06:24,280 --> 00:06:29,650
patches are still available that has CVS

00:06:26,740 --> 00:06:34,300
patches reason for that is a lack of

00:06:29,650 --> 00:06:36,460
manpower and also what's important is

00:06:34,300 --> 00:06:39,430
that this tool is really a very small

00:06:36,460 --> 00:06:41,410
and stupid tool so we really only want

00:06:39,430 --> 00:06:43,810
to use it to keep be up-to-date

00:06:41,410 --> 00:06:48,480
regarding security and reliability it's

00:06:43,810 --> 00:06:50,710
not a new release of grade tool and

00:06:48,480 --> 00:06:52,930
while shell script well basically

00:06:50,710 --> 00:06:55,720
because everything we had to basically

00:06:52,930 --> 00:06:57,130
implement this feature we're already in

00:06:55,720 --> 00:07:02,830
the base system we just had to

00:06:57,130 --> 00:07:04,450
orchestrate them so shell script before

00:07:02,830 --> 00:07:06,490
coming up with with this patch we

00:07:04,450 --> 00:07:10,360
started looking a bit about what the

00:07:06,490 --> 00:07:12,100
others were doing so in Linux most of

00:07:10,360 --> 00:07:13,630
the time everything is a package so you

00:07:12,100 --> 00:07:16,570
don't really have to deal with that you

00:07:13,630 --> 00:07:21,190
you can run your DNF grade or app to

00:07:16,570 --> 00:07:23,560
your grade or whatever as I said our

00:07:21,190 --> 00:07:25,600
intern was completely different we don't

00:07:23,560 --> 00:07:28,450
want to be a release of grade tool we

00:07:25,600 --> 00:07:30,250
want to be a maintenance tool also

00:07:28,450 --> 00:07:33,700
sometimes roll backs are tricky when

00:07:30,250 --> 00:07:36,850
everything is a package so then we

00:07:33,700 --> 00:07:39,700
looked at the FreeBSD to be honest with

00:07:36,850 --> 00:07:43,510
Bill jealous about three beers update

00:07:39,700 --> 00:07:46,750
for for quite a long time we looked into

00:07:43,510 --> 00:07:50,710
implementing it but that was quite

00:07:46,750 --> 00:07:54,190
complicated much too clever basically

00:07:50,710 --> 00:07:59,110
for us or at least for me also it's very

00:07:54,190 --> 00:08:01,510
slow it's horribly slow and it's also a

00:07:59,110 --> 00:08:03,340
tool that will basically allow you to to

00:08:01,510 --> 00:08:04,570
upgrade you in your release and so

00:08:03,340 --> 00:08:06,220
that's something we didn't want to do

00:08:04,570 --> 00:08:08,830
and that that's also as part of the

00:08:06,220 --> 00:08:11,080
complication of the tool and regarding

00:08:08,830 --> 00:08:18,070
net bsd and dragonfly as far as I know

00:08:11,080 --> 00:08:20,140
it's a source only so sis patch as I

00:08:18,070 --> 00:08:22,330
said sis patch is really really simple

00:08:20,140 --> 00:08:24,910
tool you have a four option that we will

00:08:22,330 --> 00:08:27,430
detail later but basically if you run it

00:08:24,910 --> 00:08:29,590
without any argument it will install all

00:08:27,430 --> 00:08:31,180
the missing patches automatically you

00:08:29,590 --> 00:08:33,610
don't have to pass it any option or

00:08:31,180 --> 00:08:35,680
anything so it's just a small utility

00:08:33,610 --> 00:08:37,040
that that will basically fetch and

00:08:35,680 --> 00:08:41,320
install

00:08:37,040 --> 00:08:41,320
binary patches and well back of course

00:08:41,530 --> 00:08:48,170
within the script we implemented a small

00:08:44,570 --> 00:08:51,320
improved function this function is used

00:08:48,170 --> 00:08:53,270
to lose privileges while doing some

00:08:51,320 --> 00:08:55,490
sensitive stuff like going online or

00:08:53,270 --> 00:08:57,290
like doing cryptographic verification

00:08:55,490 --> 00:09:00,470
and stuff like that so it's really

00:08:57,290 --> 00:09:02,720
stupid when using all your only su that

00:09:00,470 --> 00:09:04,880
you do that where we drop her villages

00:09:02,720 --> 00:09:08,570
to a user called underscore since patch

00:09:04,880 --> 00:09:11,300
and then we do the dangerous stuff

00:09:08,570 --> 00:09:14,360
that's exactly what the OpenBSD

00:09:11,300 --> 00:09:18,680
installer does and we wanted to a Munich

00:09:14,360 --> 00:09:20,660
that behavior we also well you may be

00:09:18,680 --> 00:09:23,420
able you you may want to pass an

00:09:20,660 --> 00:09:26,360
argument sorry to this function like you

00:09:23,420 --> 00:09:28,610
may want to as an unprivileged user go

00:09:26,360 --> 00:09:30,440
online but of course you want to have

00:09:28,610 --> 00:09:32,090
the right to some time download

00:09:30,440 --> 00:09:37,010
something and write it somewhere so with

00:09:32,090 --> 00:09:39,530
the minus F function the privilege the

00:09:37,010 --> 00:09:43,610
the losing of the privilege will happen

00:09:39,530 --> 00:09:45,800
after that the file has been created so

00:09:43,610 --> 00:09:48,020
as I said everything that's a network

00:09:45,800 --> 00:09:51,530
related or crypto related will be done

00:09:48,020 --> 00:09:54,020
using this function which is basically

00:09:51,530 --> 00:10:00,350
what we do insist patch to to fetch the

00:09:54,020 --> 00:10:02,660
the sha-256 signature file so let's look

00:10:00,350 --> 00:10:05,870
a bit about the options so we have a

00:10:02,660 --> 00:10:08,710
batch - see that's basically check so

00:10:05,870 --> 00:10:13,040
check what the what you pay will patches

00:10:08,710 --> 00:10:15,650
around so what it does it does it will

00:10:13,040 --> 00:10:17,230
fetch the signature file we're using the

00:10:15,650 --> 00:10:21,950
command that was in the previous slide

00:10:17,230 --> 00:10:25,610
it will verify it using signify and then

00:10:21,950 --> 00:10:28,520
it will pause and compare what's inside

00:10:25,610 --> 00:10:30,350
that signature file to the installed

00:10:28,520 --> 00:10:32,000
patch on the system and from that it

00:10:30,350 --> 00:10:35,450
will build a list and display what's

00:10:32,000 --> 00:10:38,090
missing nice thing to notice it's

00:10:35,450 --> 00:10:40,460
automatically one bar or our C system

00:10:38,090 --> 00:10:42,080
once you upgrade to a new release so

00:10:40,460 --> 00:10:43,790
that means that you will see in your G

00:10:42,080 --> 00:10:45,920
message output if you have missing

00:10:43,790 --> 00:10:48,250
patches and it will send a mail to route

00:10:45,920 --> 00:10:48,250
as well

00:10:48,700 --> 00:10:55,810
we have a - election so that's to list

00:10:52,910 --> 00:10:58,040
the actually the actual installed patch

00:10:55,810 --> 00:11:00,020
it's a really stupid functionally we'll

00:10:58,040 --> 00:11:02,180
just look into into a specified

00:11:00,020 --> 00:11:04,130
directory that's a versus patch and see

00:11:02,180 --> 00:11:06,020
if there's anything there if they are

00:11:04,130 --> 00:11:08,060
that means that we have patches that are

00:11:06,020 --> 00:11:15,200
installed on the system and in this case

00:11:08,060 --> 00:11:18,230
what it will list them now we have

00:11:15,200 --> 00:11:20,720
suspect without any option as I

00:11:18,230 --> 00:11:23,960
mentioned that what we'll install all

00:11:20,720 --> 00:11:26,360
the missing patches on your machine so

00:11:23,960 --> 00:11:28,640
it does a few check before it remove

00:11:26,360 --> 00:11:30,830
anything that doesn't match the actual

00:11:28,640 --> 00:11:35,300
release and that's stored under vs.

00:11:30,830 --> 00:11:39,110
patch the year are key they're contained

00:11:35,300 --> 00:11:41,870
the actual CVS deep patch so you can

00:11:39,110 --> 00:11:44,930
know exactly what the patch does and it

00:11:41,870 --> 00:11:46,700
also contains your rollback that if

00:11:44,930 --> 00:11:48,440
something is something bad happen in the

00:11:46,700 --> 00:11:52,610
machine you can easily roll back using

00:11:48,440 --> 00:11:54,440
that but there is no garbage collection

00:11:52,610 --> 00:11:56,090
between releases like for example we

00:11:54,440 --> 00:11:57,680
have ten patch was installed on your

00:11:56,090 --> 00:12:00,770
machine you upgrade to a new release

00:11:57,680 --> 00:12:03,290
then this directory is still full of the

00:12:00,770 --> 00:12:04,670
old patch and a rollback right so the

00:12:03,290 --> 00:12:06,350
first thing that this patch does is

00:12:04,670 --> 00:12:09,800
remove all the non matching stuff there

00:12:06,350 --> 00:12:12,590
and then it will compare the your

00:12:09,800 --> 00:12:14,600
install patches against the available

00:12:12,590 --> 00:12:17,360
one using pretty much the same function

00:12:14,600 --> 00:12:20,660
that used to list and check for patches

00:12:17,360 --> 00:12:22,870
and then it will loop during the

00:12:20,660 --> 00:12:25,610
unproved download and verification of

00:12:22,870 --> 00:12:28,280
the table or the remote well that are on

00:12:25,610 --> 00:12:30,590
our mirror server it will do a few

00:12:28,280 --> 00:12:32,420
checks like make sure that we're writing

00:12:30,590 --> 00:12:34,760
on the local file system not on an

00:12:32,420 --> 00:12:37,340
affairs that we have enough space that

00:12:34,760 --> 00:12:41,600
the fight system is not read-only stuff

00:12:37,340 --> 00:12:43,820
like that and from there we pick the

00:12:41,600 --> 00:12:45,260
actual list of file that we're going to

00:12:43,820 --> 00:12:48,500
install from the tar.gz

00:12:45,260 --> 00:12:51,080
and then we create a rollback trouble

00:12:48,500 --> 00:12:55,850
using the actual fight that are on the

00:12:51,080 --> 00:12:58,970
system and then we save once we have

00:12:55,850 --> 00:13:00,180
done that we save install the patches

00:12:58,970 --> 00:13:01,830
that are contained

00:13:00,180 --> 00:13:04,650
the fight story that are contained in

00:13:01,830 --> 00:13:07,500
our patch we're using install - capital

00:13:04,650 --> 00:13:09,540
S which is the the safe install that

00:13:07,500 --> 00:13:14,070
unlinked the existing target before

00:13:09,540 --> 00:13:17,100
installing a new file and then at the

00:13:14,070 --> 00:13:19,080
end of the run if a new kernel was

00:13:17,100 --> 00:13:23,100
installed that is if it was a kernel

00:13:19,080 --> 00:13:28,290
patch then we run reorder kernel we

00:13:23,100 --> 00:13:30,960
order kernel is what we call call on

00:13:28,290 --> 00:13:33,810
openbsd so it's pretty new feature that

00:13:30,960 --> 00:13:36,180
I think it landed like a like six eight

00:13:33,810 --> 00:13:39,600
months ago an internal address

00:13:36,180 --> 00:13:41,880
randomized link and it's basically a

00:13:39,600 --> 00:13:45,180
random and they run the randomization

00:13:41,880 --> 00:13:49,140
feature that we added to or kernel it

00:13:45,180 --> 00:13:51,390
shuffles the object linking order and it

00:13:49,140 --> 00:13:54,450
does that at every reboot select each

00:13:51,390 --> 00:13:55,950
kernel that you guys run on OpenBSD are

00:13:54,450 --> 00:13:58,890
completely different one from one

00:13:55,950 --> 00:14:02,460
another so like the internal Delta

00:13:58,890 --> 00:14:04,320
between functions inside the kernel or

00:14:02,460 --> 00:14:06,900
not where one would expect them to be

00:14:04,320 --> 00:14:09,990
which makes some particular case of tags

00:14:06,900 --> 00:14:14,040
way more difficult it's it's different

00:14:09,990 --> 00:14:16,200
from ksl R which is what I think they're

00:14:14,040 --> 00:14:20,160
doing on Linux but it has a similar goal

00:14:16,200 --> 00:14:22,050
so basically we don't need to load the

00:14:20,160 --> 00:14:24,810
kernel in a random location because the

00:14:22,050 --> 00:14:26,279
kernel itself is randomized so that

00:14:24,810 --> 00:14:32,160
that's the main difference between Karl

00:14:26,279 --> 00:14:35,880
and kasl are we have the minus or option

00:14:32,160 --> 00:14:39,959
which will roll back the last installed

00:14:35,880 --> 00:14:42,270
patch it's important to note that you

00:14:39,959 --> 00:14:44,580
cannot choose which patch you want to

00:14:42,270 --> 00:14:46,410
install whole patches are cumulative if

00:14:44,580 --> 00:14:48,029
you want to roll back a patch you have

00:14:46,410 --> 00:14:50,580
to roll back the entire sequence of

00:14:48,029 --> 00:14:53,040
patch that were before this one so

00:14:50,580 --> 00:14:55,920
that's why you can only always roll back

00:14:53,040 --> 00:14:57,540
the last into an installed one so what

00:14:55,920 --> 00:15:00,050
it does basically does the same kind of

00:14:57,540 --> 00:15:02,940
checks as we do when installing patches

00:15:00,050 --> 00:15:04,980
and then it will get the roll back

00:15:02,940 --> 00:15:09,180
trouble from divorces patch directory

00:15:04,980 --> 00:15:11,130
and extract it and then of course we

00:15:09,180 --> 00:15:12,610
move the ID all his bad directory and

00:15:11,130 --> 00:15:17,800
then we really into

00:15:12,610 --> 00:15:21,519
if needed and we have the minus capital

00:15:17,800 --> 00:15:26,290
R which is basically remove all the

00:15:21,519 --> 00:15:27,760
patches we had a few use case in the

00:15:26,290 --> 00:15:31,329
past for that so that was where it was

00:15:27,760 --> 00:15:38,380
implemented and of course as anything in

00:15:31,329 --> 00:15:41,019
sis patch it stops at the first error so

00:15:38,380 --> 00:15:43,779
that's how to basically handle the

00:15:41,019 --> 00:15:46,300
patches so let's have a look at how the

00:15:43,779 --> 00:15:51,760
process and the building of patches

00:15:46,300 --> 00:15:55,149
works so first of all someone notice an

00:15:51,760 --> 00:15:57,130
issue with the code so they will tell

00:15:55,149 --> 00:15:59,160
the developer your code sucks or

00:15:57,130 --> 00:16:02,019
whatever has a security issue in it so

00:15:59,160 --> 00:16:04,690
we create a fix we get of course

00:16:02,019 --> 00:16:08,320
validation and review it is committed to

00:16:04,690 --> 00:16:10,480
current and then boom will back port it

00:16:08,320 --> 00:16:15,700
to crow to stable and creates the

00:16:10,480 --> 00:16:19,089
initial errata 5gj will then review the

00:16:15,700 --> 00:16:23,190
patch write the W changes on our website

00:16:19,089 --> 00:16:26,380
and we create an announcement then feel

00:16:23,190 --> 00:16:29,079
will sign the patch only a handful of

00:16:26,380 --> 00:16:32,050
people are actually able to or choose to

00:16:29,079 --> 00:16:34,660
sign the other patch file then Robert

00:16:32,050 --> 00:16:37,839
will build the patch using the assigned

00:16:34,660 --> 00:16:40,089
pied Fowler and of course then we test

00:16:37,839 --> 00:16:45,640
it and then make it available on our

00:16:40,089 --> 00:16:48,399
mirror that's roughly our process for

00:16:45,640 --> 00:16:53,140
dealing with errata but it's not set in

00:16:48,399 --> 00:16:56,560
stone can vary from time to time so

00:16:53,140 --> 00:16:58,720
that's actually on amd64 and a36 those

00:16:56,560 --> 00:17:03,100
are actually the build machine for this

00:16:58,720 --> 00:17:06,069
patch so that quite small they are built

00:17:03,100 --> 00:17:12,130
on machines that don't have any access

00:17:06,069 --> 00:17:17,020
to the internet and we for each patch we

00:17:12,130 --> 00:17:20,319
do a complete rebuild of the release I

00:17:17,020 --> 00:17:22,240
will go into that a bit later there are

00:17:20,319 --> 00:17:24,970
different types of patches

00:17:22,240 --> 00:17:25,420
we have colonel we have user land and

00:17:24,970 --> 00:17:26,980
which

00:17:25,420 --> 00:17:29,860
could be an entire release or we have

00:17:26,980 --> 00:17:31,540
exam Ocala or XOR implementation and in

00:17:29,860 --> 00:17:36,160
which case we are rebuild to complete

00:17:31,540 --> 00:17:39,700
x.org of course all the patches are

00:17:36,160 --> 00:17:43,090
installed on the build machine and all

00:17:39,700 --> 00:17:45,640
the result of building release our

00:17:43,090 --> 00:17:50,980
patched release will be put into a fake

00:17:45,640 --> 00:17:54,160
word directory the patch are created by

00:17:50,980 --> 00:17:56,860
basically drifting our current fake

00:17:54,160 --> 00:18:00,190
route with the previous one and that's

00:17:56,860 --> 00:18:11,380
how we know what changed between the

00:18:00,190 --> 00:18:13,990
release and the patched one yes USB and

00:18:11,380 --> 00:18:16,090
yes and say and the initial fake rope

00:18:13,990 --> 00:18:19,780
the rectory is just the ID extracted

00:18:16,090 --> 00:18:22,000
official release so we have a we have a

00:18:19,780 --> 00:18:25,690
make fight for that because each

00:18:22,000 --> 00:18:26,920
dispatch dot MK I won't go too much into

00:18:25,690 --> 00:18:29,200
the data is not interesting but

00:18:26,920 --> 00:18:33,820
basically where we stripped a bit what

00:18:29,200 --> 00:18:35,620
the OpenBSD release process does as well

00:18:33,820 --> 00:18:39,730
as some part of the port's tree and we

00:18:35,620 --> 00:18:42,850
assemble them into the into this file so

00:18:39,730 --> 00:18:45,580
we fetch and verify the patch we signify

00:18:42,850 --> 00:18:47,710
we create a fake route using the new

00:18:45,580 --> 00:18:50,050
prom option because we don't build as I

00:18:47,710 --> 00:18:52,990
mean we're to build as route but we are

00:18:50,050 --> 00:18:54,580
losing privileges quite early so when we

00:18:52,990 --> 00:18:58,600
install file we need to be able to

00:18:54,580 --> 00:19:00,970
install them owned by route etcetera so

00:18:58,600 --> 00:19:03,850
we're using an open mount option for

00:19:00,970 --> 00:19:07,150
that and then we'd if the current built

00:19:03,850 --> 00:19:11,220
faith hood against the the the former

00:19:07,150 --> 00:19:11,220
one and create the dispatched horrible

00:19:12,390 --> 00:19:18,970
so the main issue we had when we first

00:19:16,960 --> 00:19:21,610
started implementing this patch is that

00:19:18,970 --> 00:19:25,120
on open BSD we don't have reproducible

00:19:21,610 --> 00:19:28,630
build there is no effort whatsoever into

00:19:25,120 --> 00:19:31,030
into that right now so we didn't look

00:19:28,630 --> 00:19:33,630
for a reproducible build but we looked

00:19:31,030 --> 00:19:38,390
for what I call deterministic builds

00:19:33,630 --> 00:19:39,950
that is that we know that if we build

00:19:38,390 --> 00:19:41,480
this release on one machine and that

00:19:39,950 --> 00:19:44,300
release on another machine

00:19:41,480 --> 00:19:48,500
we end up with at least the same set of

00:19:44,300 --> 00:19:50,740
build options first issue we had was

00:19:48,500 --> 00:19:54,070
with the dr archiver

00:19:50,740 --> 00:19:57,290
we had to implement the D flat the

00:19:54,070 --> 00:20:00,200
deterministic flag to prevent some

00:19:57,290 --> 00:20:04,820
randomness in the archives for example

00:20:00,200 --> 00:20:08,180
we had code UID GID and M time to zero

00:20:04,820 --> 00:20:09,890
and the mode two six four four otherwise

00:20:08,180 --> 00:20:11,930
it was completely it could be completely

00:20:09,890 --> 00:20:16,670
random and we had difference in like

00:20:11,930 --> 00:20:17,450
each and every archives so that was easy

00:20:16,670 --> 00:20:19,970
to fix

00:20:17,450 --> 00:20:22,970
there was a few requirement here and

00:20:19,970 --> 00:20:25,060
there to use that new options but that

00:20:22,970 --> 00:20:28,340
was that was an easy fix

00:20:25,060 --> 00:20:31,790
then there was the the timestamp of the

00:20:28,340 --> 00:20:34,910
actual archive which were obviously

00:20:31,790 --> 00:20:36,830
different from a for each built the diff

00:20:34,910 --> 00:20:41,180
that SH squid that I mentioned is

00:20:36,830 --> 00:20:45,260
actually using CMP for comparison of the

00:20:41,180 --> 00:20:47,630
files and we can actually use a thirty

00:20:45,260 --> 00:20:50,450
four bytes offset to skip the times

00:20:47,630 --> 00:20:53,240
tenth index we were actually quite happy

00:20:50,450 --> 00:20:56,920
to see that it was so easily possible so

00:20:53,240 --> 00:20:56,920
this problem was also very easy to fix

00:20:57,040 --> 00:21:02,260
besides Tariq archives we also had a

00:21:00,080 --> 00:21:04,790
shared object

00:21:02,260 --> 00:21:07,220
OpenBSD will rebuild all the shared

00:21:04,790 --> 00:21:09,380
object in a completely random order so

00:21:07,220 --> 00:21:11,060
of course you can imagine that when you

00:21:09,380 --> 00:21:13,970
G thing one release with another one

00:21:11,060 --> 00:21:16,670
that again everything is different so

00:21:13,970 --> 00:21:20,210
what we did is that we basically told

00:21:16,670 --> 00:21:23,150
sis patch to use video F on the shared

00:21:20,210 --> 00:21:26,150
object of the previous fake root the

00:21:23,150 --> 00:21:28,910
previews build get the linking order

00:21:26,150 --> 00:21:30,710
from there and then apply it exactly in

00:21:28,910 --> 00:21:34,100
the same order when we build a release

00:21:30,710 --> 00:21:36,320
with a patched release so that was a bit

00:21:34,100 --> 00:21:40,520
tricky to get but in the end it really

00:21:36,320 --> 00:21:42,620
actually actually worked fine in the

00:21:40,520 --> 00:21:46,340
middle of you're implementing sis patch

00:21:42,620 --> 00:21:50,310
we moved from GCC to Clank at least on

00:21:46,340 --> 00:21:53,820
ng 64 our 386 and arm 64

00:21:50,310 --> 00:21:56,130
and we had hit a few bugs that were

00:21:53,820 --> 00:21:58,950
related like the assembler does not

00:21:56,130 --> 00:22:01,860
properly set the dot 5 directive when

00:21:58,950 --> 00:22:05,160
compiling assembly files so I was

00:22:01,860 --> 00:22:08,820
missing from the object which basically

00:22:05,160 --> 00:22:11,240
prevented radial F to see them and if

00:22:08,820 --> 00:22:15,150
they conceived and and we can't have the

00:22:11,240 --> 00:22:16,590
link order so there was I don't think it

00:22:15,150 --> 00:22:20,850
has been fixed upstream by the way there

00:22:16,590 --> 00:22:24,500
is a bug report about it we also build

00:22:20,850 --> 00:22:27,080
most of our stuff with minus G and

00:22:24,500 --> 00:22:30,480
sometimes it's not a hundred percent

00:22:27,080 --> 00:22:37,020
reproducible the local occasionally

00:22:30,480 --> 00:22:40,590
section changes so this particular issue

00:22:37,020 --> 00:22:41,850
is not fixed yet what you end up

00:22:40,590 --> 00:22:44,160
basically is that you have a lot of

00:22:41,850 --> 00:22:46,550
folks positive that you have to manually

00:22:44,160 --> 00:22:48,840
edit in the peer list of the OCS patch

00:22:46,550 --> 00:22:51,170
it's still under investigation we have

00:22:48,840 --> 00:22:55,640
no idea where this this actual

00:22:51,170 --> 00:22:55,640
non-deterministic thing is coming from

00:22:56,570 --> 00:23:02,250
then we had the funny stuff with with

00:22:59,160 --> 00:23:05,970
Pro the configured test for long double

00:23:02,250 --> 00:23:09,030
implementation details props the content

00:23:05,970 --> 00:23:14,010
of long double length and that gets

00:23:09,030 --> 00:23:17,010
stored in config module but some of

00:23:14,010 --> 00:23:21,780
these bytes are comfy pretty much random

00:23:17,010 --> 00:23:24,300
and vary between builds because of the

00:23:21,780 --> 00:23:28,020
log only 80 bit and the remaining bytes

00:23:24,300 --> 00:23:30,600
or like uninitialized so we had again it

00:23:28,020 --> 00:23:32,850
was not not always the case it was

00:23:30,600 --> 00:23:35,790
completely random and it was a hard one

00:23:32,850 --> 00:23:38,970
to track down but finally we saw that it

00:23:35,790 --> 00:23:41,400
was fixed in Perl a few months before we

00:23:38,970 --> 00:23:47,250
started looking into it so we just back

00:23:41,400 --> 00:23:50,850
ported the patches there was also the

00:23:47,250 --> 00:23:53,430
case of manual pages created by Perl for

00:23:50,850 --> 00:23:55,980
that we didn't come up with any solution

00:23:53,430 --> 00:23:57,700
yet the diff dot SH script he was said

00:23:55,980 --> 00:24:01,599
to remove there

00:23:57,700 --> 00:24:03,729
the time stamp header then we had a few

00:24:01,599 --> 00:24:07,269
funny things like like time and date

00:24:03,729 --> 00:24:09,969
that were in several piece of code

00:24:07,269 --> 00:24:14,019
within the OpenBSD sauce tree like to

00:24:09,969 --> 00:24:15,609
display the build date or whatever so

00:24:14,019 --> 00:24:19,629
this one was easy we just removed it

00:24:15,609 --> 00:24:23,409
from the code well I mean what what

00:24:19,629 --> 00:24:24,820
shoes does it have and also something

00:24:23,409 --> 00:24:26,950
that was really really really well

00:24:24,820 --> 00:24:30,039
something that was really unexpected as

00:24:26,950 --> 00:24:33,039
that patches aren't built on the release

00:24:30,039 --> 00:24:36,549
machines the release the release are

00:24:33,039 --> 00:24:39,009
actually built by feel the patches are

00:24:36,549 --> 00:24:42,039
built by Robert so they're not built on

00:24:39,009 --> 00:24:45,099
the same machines obviously and on open

00:24:42,039 --> 00:24:46,869
BSD we don't have any automated garbage

00:24:45,099 --> 00:24:50,200
collection of old files like for example

00:24:46,869 --> 00:24:51,909
if we remove a header then nothing will

00:24:50,200 --> 00:24:55,989
automatically remove it from the system

00:24:51,909 --> 00:24:58,690
you have to do that manually and we

00:24:55,989 --> 00:25:00,249
realized that actually Theo's machine

00:24:58,690 --> 00:25:01,329
had a lot of header that we didn't have

00:25:00,249 --> 00:25:03,759
that weren't cleaned

00:25:01,329 --> 00:25:05,649
I mean basically that doesn't doesn't

00:25:03,759 --> 00:25:11,070
introduce any issue but in this case for

00:25:05,649 --> 00:25:13,509
pearl pearl actually picked up a

00:25:11,070 --> 00:25:16,089
different option because the header was

00:25:13,509 --> 00:25:20,289
there so of course the bad the final

00:25:16,089 --> 00:25:22,359
binary was completely different and of

00:25:20,289 --> 00:25:24,940
course that specific issue is only

00:25:22,359 --> 00:25:26,950
relevant for the first dispatch since

00:25:24,940 --> 00:25:33,099
for the second one we compared to our

00:25:26,950 --> 00:25:36,429
own built release so what do we want to

00:25:33,099 --> 00:25:39,279
do in the future so far the tool is very

00:25:36,429 --> 00:25:41,979
nice it works really nicely it's super

00:25:39,279 --> 00:25:45,190
simple what we want to do is to put more

00:25:41,979 --> 00:25:47,799
architectures obviously I would really

00:25:45,190 --> 00:25:50,979
like if we were if we would be able to

00:25:47,799 --> 00:25:52,629
support the current release and the

00:25:50,979 --> 00:25:57,940
previous one so at least you have

00:25:52,629 --> 00:25:59,589
patches for an entire year that issue is

00:25:57,940 --> 00:26:02,440
again no technical store that we don't

00:25:59,589 --> 00:26:05,019
have the manpower to do that and

00:26:02,440 --> 00:26:08,079
something I'm hopeful as well is to pave

00:26:05,019 --> 00:26:09,530
the role for stable packages we do have

00:26:08,079 --> 00:26:12,350
stable packages

00:26:09,530 --> 00:26:14,960
as part of the poetry but they're not

00:26:12,350 --> 00:26:18,710
built so that's it's kind of a pain

00:26:14,960 --> 00:26:22,220
torture actually maintain these and it

00:26:18,710 --> 00:26:25,010
would be also a bit nice to other more

00:26:22,220 --> 00:26:27,440
verbose output when listing sis patch

00:26:25,010 --> 00:26:29,840
like listing installed one order to

00:26:27,440 --> 00:26:32,860
order the available one because the the

00:26:29,840 --> 00:26:35,390
name or a bit bit tricky doesn't always

00:26:32,860 --> 00:26:39,050
doesn't always tell you where the actual

00:26:35,390 --> 00:26:41,780
patch is within the sorcery and what it

00:26:39,050 --> 00:26:44,060
does I mean zero zero to underscore Lib

00:26:41,780 --> 00:26:45,860
SSL okay you know that something under

00:26:44,060 --> 00:26:48,530
Lib SSL but you have no idea what the

00:26:45,860 --> 00:26:51,890
patch fixes so it would be nice to have

00:26:48,530 --> 00:26:55,660
that and something else as well as that

00:26:51,890 --> 00:26:59,630
currently when we install kernel patches

00:26:55,660 --> 00:27:02,510
a kernel patch is not a new kernel it's

00:26:59,630 --> 00:27:05,840
just the new object file that were

00:27:02,510 --> 00:27:08,900
modified so that means that we can we

00:27:05,840 --> 00:27:11,090
can ship pretty small patches and your

00:27:08,900 --> 00:27:13,820
kernel which basically will be recreated

00:27:11,090 --> 00:27:17,180
anyway by the Carl pre-order kernel

00:27:13,820 --> 00:27:19,250
mechanism so that's why we only ship the

00:27:17,180 --> 00:27:21,320
different object file the problem we

00:27:19,250 --> 00:27:24,680
have is that on open Beauty we have a

00:27:21,320 --> 00:27:28,310
different kernel for SMP machine and

00:27:24,680 --> 00:27:30,890
single processor machines so that works

00:27:28,310 --> 00:27:34,490
perfectly fine but if you want a VM for

00:27:30,890 --> 00:27:37,100
example you install it on a single

00:27:34,490 --> 00:27:39,380
processor of machines you patch it and

00:27:37,100 --> 00:27:43,070
then you want to upgrade with the end to

00:27:39,380 --> 00:27:45,290
josef cpu for CPU eight CPU then sis

00:27:43,070 --> 00:27:47,650
patch that anna nexpaq suspect will get

00:27:45,290 --> 00:27:51,530
a kernel patch that will try to build

00:27:47,650 --> 00:27:54,620
against MP machine because you are now

00:27:51,530 --> 00:27:57,290
an empty machine but your installer we

00:27:54,620 --> 00:28:01,240
only have installed the G single

00:27:57,290 --> 00:28:05,570
processor object for kernel linking and

00:28:01,240 --> 00:28:08,270
boom so yeah so I hope that one day we

00:28:05,570 --> 00:28:13,670
can have one slash bsd for both MP and

00:28:08,270 --> 00:28:16,430
SP machine that's pretty much it off

00:28:13,670 --> 00:28:19,340
topic we are hiring so if you're looking

00:28:16,430 --> 00:28:20,330
into development operations whatever

00:28:19,340 --> 00:28:21,159
come talk to me

00:28:20,330 --> 00:28:24,070
well we're hi

00:28:21,159 --> 00:28:38,229
all kind of different profiles any

00:28:24,070 --> 00:28:43,239
questions yes yes

00:28:38,229 --> 00:28:46,269
you can't pick one or the other that's

00:28:43,239 --> 00:28:48,460
that's by design we thought a lot about

00:28:46,269 --> 00:29:00,999
it but it's just way easier to do it

00:28:48,460 --> 00:29:05,710
this way yes sorry no we know how to do

00:29:00,999 --> 00:29:10,869
that I would very much like to implement

00:29:05,710 --> 00:29:14,559
it but I'm not sure how to integrate it

00:29:10,869 --> 00:29:16,840
within OpenBSD itself itself yet there

00:29:14,559 --> 00:29:17,320
is a solution for it I would like it

00:29:16,840 --> 00:29:37,149
personally

00:29:17,320 --> 00:29:44,679
yeah yes choose whatever man I mean it's

00:29:37,149 --> 00:29:46,929
it's your box I I don't know it's it's

00:29:44,679 --> 00:29:48,129
it's not a question I can answer I mean

00:29:46,929 --> 00:29:48,789
it's really dependent on your

00:29:48,129 --> 00:29:53,259
environment

00:29:48,789 --> 00:29:55,659
I mean if usually patches are really

00:29:53,259 --> 00:29:58,869
well tested of course we can screw

00:29:55,659 --> 00:30:01,029
something up I don't feel I don't see

00:29:58,869 --> 00:30:05,830
what I what I do like is having sis

00:30:01,029 --> 00:30:06,999
patch check in chrome but apply it most

00:30:05,830 --> 00:30:09,009
of the time you have to do something

00:30:06,999 --> 00:30:10,539
after you apply your patch like you have

00:30:09,009 --> 00:30:12,279
I don't know you have a lip crypto or

00:30:10,539 --> 00:30:15,840
whatever you have to restore to daemon

00:30:12,279 --> 00:30:15,840
using the library anyway so

00:30:28,190 --> 00:30:33,360
if you try to restore dispatch now if

00:30:31,649 --> 00:30:36,779
you have a problem okay so so the

00:30:33,360 --> 00:30:38,269
question is what happens if during the

00:30:36,779 --> 00:30:39,419
run of sis patch you lose the network

00:30:38,269 --> 00:30:42,539
okay

00:30:39,419 --> 00:30:45,899
if anything happens between at the

00:30:42,539 --> 00:30:48,570
moment of installation of the patch it

00:30:45,899 --> 00:30:51,419
and if any error occurs then it will

00:30:48,570 --> 00:30:53,700
stop and roll back so if you lose the

00:30:51,419 --> 00:30:55,440
network it's not installing anything so

00:30:53,700 --> 00:30:57,480
it will just hang whatever again you can

00:30:55,440 --> 00:30:59,580
control see and there is a trap handler

00:30:57,480 --> 00:31:02,399
that will handle everything so it's

00:30:59,580 --> 00:31:07,980
pretty safe in that regard of course if

00:31:02,399 --> 00:31:09,360
you unplug your machines then okay I

00:31:07,980 --> 00:31:11,840
think we're done thank you very much for

00:31:09,360 --> 00:31:11,840
attention

00:31:14,600 --> 00:31:19,100

YouTube URL: https://www.youtube.com/watch?v=6mq4B0dYCS4


