Title: Hurd's PCI arbiter
Publication date: 2018-02-03
Playlist: FOSDEM 2018
Description: 
	by Samuel Thibault

At: FOSDEM 2018
Room: AW1.126
Scheduled start: 2018-02-03 11:45:00+01
Captions: 
	00:00:04,620 --> 00:00:24,810
so our next but before we start manager

00:00:12,980 --> 00:00:30,330
asked the audience almost like to tell

00:00:24,810 --> 00:00:34,500
the same thing to the people who are so

00:00:30,330 --> 00:00:37,440
it's okay so good morning everybody

00:00:34,500 --> 00:00:40,140
so we talked about the hurt in general

00:00:37,440 --> 00:00:42,809
and in particle of this morning and the

00:00:40,140 --> 00:00:46,320
PCI arbiter which is something which was

00:00:42,809 --> 00:00:49,290
developed really recently so I am Samuel

00:00:46,320 --> 00:00:52,890
table but this is John who did all the

00:00:49,290 --> 00:00:55,620
work so credit season for him

00:00:52,890 --> 00:00:58,500
so the hurt basically it's all about

00:00:55,620 --> 00:01:00,329
freedom zero of free software and the

00:00:58,500 --> 00:01:02,760
freedom to run the program for any

00:01:00,329 --> 00:01:05,789
purpose and thing is on Linux you don't

00:01:02,760 --> 00:01:07,830
have that you don't you cannot do things

00:01:05,789 --> 00:01:11,490
that only root can do and things like

00:01:07,830 --> 00:01:15,300
this so for instance why is fdisk MKX

00:01:11,490 --> 00:01:17,700
2fs etc hidden in flash has been I have

00:01:15,300 --> 00:01:20,039
to prepare a disk image or something why

00:01:17,700 --> 00:01:23,780
do you have to get the tools from s bin

00:01:20,039 --> 00:01:27,090
I should be able to tinker with image I

00:01:23,780 --> 00:01:29,759
have a home directory where there is

00:01:27,090 --> 00:01:31,440
room and I can store things I have

00:01:29,759 --> 00:01:34,170
access to the network I would like to be

00:01:31,440 --> 00:01:36,270
able to do VPNs and plug the

00:01:34,170 --> 00:01:39,420
applications I want to the VPN and not

00:01:36,270 --> 00:01:42,450
the others and things like this and it's

00:01:39,420 --> 00:01:45,690
also freedom to innovate so if you want

00:01:42,450 --> 00:01:47,940
to experiment with the file system well

00:01:45,690 --> 00:01:51,720
you have to patch your kernel and maybe

00:01:47,940 --> 00:01:53,459
it will be become less stable if you

00:01:51,720 --> 00:01:55,380
want on the machine you don't

00:01:53,459 --> 00:01:57,929
administrate you will not be able to do

00:01:55,380 --> 00:02:02,160
that because the administrator doesn't

00:01:57,929 --> 00:02:05,069
trust you so that's really problem maybe

00:02:02,160 --> 00:02:07,830
you want to tune you workflow because

00:02:05,069 --> 00:02:10,229
yes you have things and the way you

00:02:07,830 --> 00:02:12,209
prefer and being just in your home

00:02:10,229 --> 00:02:15,959
directory it's not the things you would

00:02:12,209 --> 00:02:17,580
like to have to combine processes the

00:02:15,959 --> 00:02:19,500
way you want it cetera

00:02:17,580 --> 00:02:22,830
and one of the things I talk about today

00:02:19,500 --> 00:02:23,910
is giving a PCI card to a process so you

00:02:22,830 --> 00:02:27,720
have I don't know

00:02:23,910 --> 00:02:29,940
music processing software and you want

00:02:27,720 --> 00:02:32,370
to give it the PCI card so it can really

00:02:29,940 --> 00:02:34,800
drive the thing as efficiently as

00:02:32,370 --> 00:02:36,870
possible real time and processing things

00:02:34,800 --> 00:02:41,250
like this and you want to give it a PCI

00:02:36,870 --> 00:02:45,000
card it's also the freedom from software

00:02:41,250 --> 00:02:47,760
itself software it may be do not trust

00:02:45,000 --> 00:02:51,120
it because you you haven't read this

00:02:47,760 --> 00:02:53,010
read the source code you cannot read the

00:02:51,120 --> 00:02:56,280
source code or you know there are bugs

00:02:53,010 --> 00:02:59,550
and you want to isolate the program from

00:02:56,280 --> 00:03:02,700
others to avoid something crashing

00:02:59,550 --> 00:03:05,640
getting everything with it and drivers

00:03:02,700 --> 00:03:08,190
of course I mean we know that all the

00:03:05,640 --> 00:03:13,410
perks in the kernel are mostly in the

00:03:08,190 --> 00:03:16,560
drivers so this is how it looks like so

00:03:13,410 --> 00:03:18,300
it's really a microkernel layering so

00:03:16,560 --> 00:03:21,180
you have a kernel which only managed

00:03:18,300 --> 00:03:24,870
tasks memory and IPC and the rest is in

00:03:21,180 --> 00:03:27,090
New Zealand so we have a proxy server

00:03:24,870 --> 00:03:31,140
which knows about processes there are

00:03:27,090 --> 00:03:35,060
PID UID owners things like this and P a

00:03:31,140 --> 00:03:38,220
finite is the tcp/ip stack the X 2 FS

00:03:35,060 --> 00:03:40,890
manage the file system and oath is

00:03:38,220 --> 00:03:43,920
something people don't usually know

00:03:40,890 --> 00:03:48,450
about it's just knowing what process

00:03:43,920 --> 00:03:51,540
belongs to which you ID so this observer

00:03:48,450 --> 00:03:54,090
is related with all the rest being that

00:03:51,540 --> 00:03:57,420
X 2 FS knows about us DS 4 files but

00:03:54,090 --> 00:04:00,350
it's oath which tells ok this shell is

00:03:57,420 --> 00:04:04,380
allowed to do this with the filesystem

00:04:00,350 --> 00:04:07,700
so it's a sort of wonderful point for

00:04:04,380 --> 00:04:10,050
authorization things and so it's all

00:04:07,700 --> 00:04:13,560
flexible like this we can do crazy

00:04:10,050 --> 00:04:16,440
stuffs I can refer you to previous

00:04:13,560 --> 00:04:22,320
videos of previous Fossum microkernel

00:04:16,440 --> 00:04:25,410
room sessions just to give some examples

00:04:22,320 --> 00:04:29,070
if a server crashes that's not a problem

00:04:25,410 --> 00:04:31,500
so the computable deform error we see on

00:04:29,070 --> 00:04:33,240
hard system it's just an error

00:04:31,500 --> 00:04:35,430
it's not something of the death that

00:04:33,240 --> 00:04:37,800
takes the whole system and way so for

00:04:35,430 --> 00:04:40,740
instance if that if the tcp/ip stack

00:04:37,800 --> 00:04:43,320
crashes okay all the TCP sessions are

00:04:40,740 --> 00:04:44,010
lost but every day everything else is

00:04:43,320 --> 00:04:46,920
fine

00:04:44,010 --> 00:04:49,110
I can't recover a system I don't have

00:04:46,920 --> 00:04:51,480
networks network access to it

00:04:49,110 --> 00:04:55,470
but if I have console access then okay

00:04:51,480 --> 00:04:58,140
nothing is lost it's easy to debug and

00:04:55,470 --> 00:05:01,320
tune you can run gdb on the tcp/ip stack

00:04:58,140 --> 00:05:03,420
on X 2 FS things like this and then you

00:05:01,320 --> 00:05:06,240
can their crazy things so for instance

00:05:03,420 --> 00:05:09,060
the console there is a mark console

00:05:06,240 --> 00:05:11,670
which is really low featured but there

00:05:09,060 --> 00:05:14,520
is the hurt console it has dynamic front

00:05:11,670 --> 00:05:19,650
support text phone support that is the

00:05:14,520 --> 00:05:21,600
pci vga card only allows for 500 glyphs

00:05:19,650 --> 00:05:23,550
showed on the screen but then you can

00:05:21,600 --> 00:05:25,110
allocate dynamically which cliff you

00:05:23,550 --> 00:05:28,140
want to show and then you can have

00:05:25,110 --> 00:05:30,810
chinese which has many more countries

00:05:28,140 --> 00:05:32,220
than this but since they don't show up

00:05:30,810 --> 00:05:35,490
at the same time then you can

00:05:32,220 --> 00:05:38,310
dynamically choose what shows up so

00:05:35,490 --> 00:05:41,250
chinese countries emojis even we don't

00:05:38,310 --> 00:05:43,710
have to do anything to get emojis on the

00:05:41,250 --> 00:05:46,800
console but just load a font which has

00:05:43,710 --> 00:05:49,230
the glyphs and that's fine and the

00:05:46,800 --> 00:05:51,660
kernel is quite small it only handles

00:05:49,230 --> 00:05:55,770
the task memory an IPC everything else

00:05:51,660 --> 00:05:58,350
is on the user name so for instance I

00:05:55,770 --> 00:06:02,030
have the same things I talked about and

00:05:58,350 --> 00:06:04,860
then I have an FTP FS running as a user

00:06:02,030 --> 00:06:07,169
because it doesn't need any kind of

00:06:04,860 --> 00:06:09,690
special authorization it just needs to

00:06:07,169 --> 00:06:14,010
access the network and to connect to

00:06:09,690 --> 00:06:17,780
through FTP and then there's ISO FS and

00:06:14,010 --> 00:06:20,790
a shell CP what is happening oh sorry

00:06:17,780 --> 00:06:23,730
it's actually basically you have mounted

00:06:20,790 --> 00:06:26,520
an ISO FS which is on an FTP server and

00:06:23,730 --> 00:06:30,150
then you can access to the files within

00:06:26,520 --> 00:06:32,610
the ISO image which is on FTP and the

00:06:30,150 --> 00:06:35,400
thing is we don't need to download the

00:06:32,610 --> 00:06:38,280
whole ISO to do that because I saw is

00:06:35,400 --> 00:06:40,560
indexed and so FTP FS just serves the

00:06:38,280 --> 00:06:43,110
bits of the file that on you need for

00:06:40,560 --> 00:06:44,670
ISO FS to work and provide and the file

00:06:43,110 --> 00:06:47,280
to CP which can get

00:06:44,670 --> 00:06:53,160
right so it's extremely efficient

00:06:47,280 --> 00:06:56,130
actually so some examples I have on my

00:06:53,160 --> 00:07:00,510
home FTP column which is a multiplexer

00:06:56,130 --> 00:07:06,000
for FTP FS and so I can just do I don't

00:07:00,510 --> 00:07:09,780
know VI tip / FTP column and an FTP URL

00:07:06,000 --> 00:07:12,570
same for HTTP and I don't need to

00:07:09,780 --> 00:07:16,770
implement FTP in VI it's just provided

00:07:12,570 --> 00:07:19,380
by the system so I can mount on my

00:07:16,770 --> 00:07:22,560
directory the ISO FS for something which

00:07:19,380 --> 00:07:24,360
is on an FTP server then look at it it

00:07:22,560 --> 00:07:27,420
just works

00:07:24,360 --> 00:07:29,880
the signature file I can put something

00:07:27,420 --> 00:07:31,560
on it which says each time you open it

00:07:29,880 --> 00:07:34,830
your own fortune and so each time you

00:07:31,560 --> 00:07:38,910
actually read the dot signature you get

00:07:34,830 --> 00:07:42,950
a new fortune so it's cool stuff and one

00:07:38,910 --> 00:07:46,440
thing I mentioned getting your your own

00:07:42,950 --> 00:07:49,140
environment there's the map the remote

00:07:46,440 --> 00:07:52,230
translator which says you get a new

00:07:49,140 --> 00:07:54,900
shell in which slash bin slash SH is

00:07:52,230 --> 00:07:57,510
actually a pointer to home slash bin

00:07:54,900 --> 00:07:59,010
slash SH and so from then on all the

00:07:57,510 --> 00:08:01,980
scripts Iran etcetera

00:07:59,010 --> 00:08:04,440
do you see that shall instead of batch

00:08:01,980 --> 00:08:06,750
which might be convenient if you have I

00:08:04,440 --> 00:08:09,420
don't know scripts which want bash as

00:08:06,750 --> 00:08:14,070
the shell in slash bin slash asset but

00:08:09,420 --> 00:08:15,630
the system provides - as a sure oh you

00:08:14,070 --> 00:08:19,080
can get everything in this large bin

00:08:15,630 --> 00:08:21,510
which is actually your bin in which you

00:08:19,080 --> 00:08:23,370
have put everything so this is basically

00:08:21,510 --> 00:08:26,490
the kind of things that we have with two

00:08:23,370 --> 00:08:31,590
Nix gigs etc except that it's at the

00:08:26,490 --> 00:08:34,650
operating system level so how does it

00:08:31,590 --> 00:08:36,510
work it's quite simple actually the idea

00:08:34,650 --> 00:08:40,260
is that it's Lipsy

00:08:36,510 --> 00:08:42,840
which implements this so everything that

00:08:40,260 --> 00:08:45,000
happens in the system is inter possible

00:08:42,840 --> 00:08:50,550
because everything is already an RPC is

00:08:45,000 --> 00:08:52,140
how it works from the start and so you

00:08:50,550 --> 00:08:53,970
just expose what you want in the

00:08:52,140 --> 00:08:56,970
filesystem you slash something slash

00:08:53,970 --> 00:08:58,320
something and then the user can decide

00:08:56,970 --> 00:09:01,740
what to put here

00:08:58,320 --> 00:09:03,780
and there the idea if you think about I

00:09:01,740 --> 00:09:06,990
don't know a fake root chroot for

00:09:03,780 --> 00:09:09,860
instance fake root is actually something

00:09:06,990 --> 00:09:12,540
that puts a library to redirect

00:09:09,860 --> 00:09:14,520
open/close etc so that instead of

00:09:12,540 --> 00:09:17,340
opening that thing it opens something

00:09:14,520 --> 00:09:20,220
else it does work enough for the use

00:09:17,340 --> 00:09:22,280
it's used for but it's not perfect and

00:09:20,220 --> 00:09:24,780
as soon as you have new find a new

00:09:22,280 --> 00:09:27,480
system calls then it has to be taught

00:09:24,780 --> 00:09:30,060
but the new system calls to reductant to

00:09:27,480 --> 00:09:34,320
be direct them as well well here since

00:09:30,060 --> 00:09:38,610
it leaps you then anything that will be

00:09:34,320 --> 00:09:41,280
added will be inter possible that way so

00:09:38,610 --> 00:09:43,320
actually it's virtualization at a really

00:09:41,280 --> 00:09:45,180
fine grain interface when you see

00:09:43,320 --> 00:09:47,760
containers everything like this

00:09:45,180 --> 00:09:51,060
it's all very close grain I compared to

00:09:47,760 --> 00:09:52,650
this and so the idea as the user you

00:09:51,060 --> 00:09:54,060
have your home directory you have

00:09:52,650 --> 00:09:59,750
network access and then you can do

00:09:54,060 --> 00:10:03,090
whatever you want with it so crazy thing

00:09:59,750 --> 00:10:06,300
you have open a VPN than your own tcp/ip

00:10:03,090 --> 00:10:09,510
stack on top of it then FTP FS and to

00:10:06,300 --> 00:10:11,910
get a disk image which is partitioned so

00:10:09,510 --> 00:10:14,580
you get to one of the partition then you

00:10:11,910 --> 00:10:16,440
get inside the X 2 FS of the partition

00:10:14,580 --> 00:10:19,020
and there's a nice Oh image and then you

00:10:16,440 --> 00:10:25,020
open something inside it and it is

00:10:19,020 --> 00:10:28,400
natural to do this actually ok so

00:10:25,020 --> 00:10:31,890
getting to what I'd like to show today

00:10:28,400 --> 00:10:35,340
so quite recently what we did was to

00:10:31,890 --> 00:10:37,890
move originally we had the drivers the

00:10:35,340 --> 00:10:39,840
network drivers inside the kernel and

00:10:37,890 --> 00:10:42,570
that that was not a good thing so we

00:10:39,840 --> 00:10:45,600
said ok let's move it to user name so

00:10:42,570 --> 00:10:48,300
that it eth0 actually leaves something

00:10:45,600 --> 00:10:50,820
is somewhere on slash dev slash eth0 so

00:10:48,300 --> 00:10:53,640
I can see it it's not something you see

00:10:50,820 --> 00:10:55,860
and Linux for instance but here we

00:10:53,640 --> 00:10:58,590
actually have slash dev slash a th 0 and

00:10:55,860 --> 00:11:00,780
what we did was just to take the Linux

00:10:58,590 --> 00:11:05,070
drivers and to put it in a process and

00:11:00,780 --> 00:11:07,340
then plug here with PFI net and get it

00:11:05,070 --> 00:11:11,180
to have access to the hard way to drive

00:11:07,340 --> 00:11:11,180
and the PCI card

00:11:11,490 --> 00:11:17,009
so this is really nice because for

00:11:13,769 --> 00:11:20,189
instance I know that some of the wheel

00:11:17,009 --> 00:11:21,720
tech drivers get struck from times to

00:11:20,189 --> 00:11:22,889
times and apparently it's really the

00:11:21,720 --> 00:11:25,290
driver which has a bird

00:11:22,889 --> 00:11:27,600
and so my need stuck okay just kill the

00:11:25,290 --> 00:11:29,160
driver and it gets restarted and

00:11:27,600 --> 00:11:32,220
everything else continues to work the

00:11:29,160 --> 00:11:35,550
PFI net stack is fine it just opens the

00:11:32,220 --> 00:11:38,790
new driver and all the TCP sessions are

00:11:35,550 --> 00:11:43,529
still there anything nothing is lost so

00:11:38,790 --> 00:11:46,199
it's really good if you want to do a

00:11:43,529 --> 00:11:49,619
firewall then just put a process which

00:11:46,199 --> 00:11:53,129
filters the frames between the tcp/ip

00:11:49,619 --> 00:11:58,199
stack and the actual device and then you

00:11:53,129 --> 00:12:00,420
have a firewall if you want to be crazy

00:11:58,199 --> 00:12:03,899
you can put an Open VPN on top of this

00:12:00,420 --> 00:12:05,970
and then a new tcp/ip stack the idea is

00:12:03,899 --> 00:12:08,309
that the system provided stack is

00:12:05,970 --> 00:12:10,199
somewhere here and then your own stack

00:12:08,309 --> 00:12:13,110
you can put it in your direct in your

00:12:10,199 --> 00:12:15,589
home directory and with the remap and

00:12:13,110 --> 00:12:18,600
translator just tell applications

00:12:15,589 --> 00:12:21,869
instead the slash servers socket to

00:12:18,600 --> 00:12:23,759
actually is redirected to somewhere and

00:12:21,869 --> 00:12:27,319
then it just works you have

00:12:23,759 --> 00:12:33,089
virtualization made easy actually

00:12:27,319 --> 00:12:36,720
so about PCI the problem we have which

00:12:33,089 --> 00:12:41,549
is not too much problem because we only

00:12:36,720 --> 00:12:44,490
keep so the net DD driver so this is

00:12:41,549 --> 00:12:47,220
called a DD it actually accesses PCI and

00:12:44,490 --> 00:12:50,939
the network PCI card and for this it has

00:12:47,220 --> 00:12:53,790
to access the PCI config space when it

00:12:50,939 --> 00:12:56,699
starts but then if you start X ok so

00:12:53,790 --> 00:13:00,269
we'll need that as well and then if you

00:12:56,699 --> 00:13:03,059
start ramp demon from getting sound then

00:13:00,269 --> 00:13:06,240
you need that as well so the list can

00:13:03,059 --> 00:13:09,779
continue so we need something to make

00:13:06,240 --> 00:13:12,149
that safe because P say config is not

00:13:09,779 --> 00:13:14,759
something which is thread safe country

00:13:12,149 --> 00:13:19,529
and safe so for now it's fine enough

00:13:14,759 --> 00:13:22,559
because Goomba starts first then net ID

00:13:19,529 --> 00:13:24,120
and then net and then X agha so it never

00:13:22,559 --> 00:13:25,110
happens that they actually work together

00:13:24,120 --> 00:13:26,550
but

00:13:25,110 --> 00:13:29,880
soon we will have something like this

00:13:26,550 --> 00:13:33,210
happening so it's not good idea so the

00:13:29,880 --> 00:13:35,460
ID that was implemented by John was to

00:13:33,210 --> 00:13:38,400
have a translator and that provides the

00:13:35,460 --> 00:13:42,570
PCI config access and so you'd have

00:13:38,400 --> 00:13:45,150
slash service like PCIe slash the path

00:13:42,570 --> 00:13:47,670
to the device zone the piece a domain

00:13:45,150 --> 00:13:50,640
piece a burst device function etc and

00:13:47,670 --> 00:13:53,670
then when you open the file here then

00:13:50,640 --> 00:13:57,030
you can use our pcs to read right

00:13:53,670 --> 00:14:00,620
configuration things and get the device

00:13:57,030 --> 00:14:04,530
regions to access the memory get the ROM

00:14:00,620 --> 00:14:08,340
to map it so that the drivers can work

00:14:04,530 --> 00:14:10,260
etc and so basically that was enough to

00:14:08,340 --> 00:14:13,850
implement Lippi side access and PCI

00:14:10,260 --> 00:14:16,470
utils backends so that way anything that

00:14:13,850 --> 00:14:19,860
uses the PCI excessive for instance X

00:14:16,470 --> 00:14:23,220
hog and things like this just transform

00:14:19,860 --> 00:14:26,930
he access the the PCI arbiter and they

00:14:23,220 --> 00:14:30,390
can run concurrently so that's good so

00:14:26,930 --> 00:14:32,880
we have this so we have the PCI arbiter

00:14:30,390 --> 00:14:36,360
which lives in New Zealand which

00:14:32,880 --> 00:14:39,240
provides access to some Neddie Neddie DD

00:14:36,360 --> 00:14:40,980
from the network and then X org which he

00:14:39,240 --> 00:14:45,270
started and then a runt

00:14:40,980 --> 00:14:49,920
demon for sounds of PCM and for instance

00:14:45,270 --> 00:14:52,500
my Firefox opens a network and emits 2x

00:14:49,920 --> 00:14:57,900
organ plays and the sound at the same

00:14:52,500 --> 00:15:02,060
time and w3m just uses the network okay

00:14:57,900 --> 00:15:06,060
good but then we can go further

00:15:02,060 --> 00:15:08,760
accessing PCIe cards as a user while we

00:15:06,060 --> 00:15:13,440
are at it we have files in slash server

00:15:08,760 --> 00:15:17,130
/ PCI maybe I can teach mode a file and

00:15:13,440 --> 00:15:20,370
then provide access to a user to the to

00:15:17,130 --> 00:15:22,860
the device suggest and change the

00:15:20,370 --> 00:15:26,790
permissions you can say ok on servers

00:15:22,860 --> 00:15:30,600
PCI to say your ID that is allowed to

00:15:26,790 --> 00:15:33,120
access to this PCI card so you can do it

00:15:30,600 --> 00:15:35,940
on the fly by using FC subs or you can

00:15:33,120 --> 00:15:38,710
use that runs to recall that on the file

00:15:35,940 --> 00:15:42,340
system so it's always that way

00:15:38,710 --> 00:15:47,200
then the user here can access and to get

00:15:42,340 --> 00:15:50,800
readwrite config etc so for now one

00:15:47,200 --> 00:15:52,690
thing which I mentioned so get depth

00:15:50,800 --> 00:15:54,880
regions get there from from now these

00:15:52,690 --> 00:15:57,190
only provide the address and then you

00:15:54,880 --> 00:15:59,470
have to open slash dev slash Ram to

00:15:57,190 --> 00:16:02,260
access the actual memory and you have to

00:15:59,470 --> 00:16:04,600
be root for this for now one thing we

00:16:02,260 --> 00:16:07,960
would like to do is to make to add

00:16:04,600 --> 00:16:11,950
operations here so that the user would

00:16:07,960 --> 00:16:14,770
just M map the device there and to get

00:16:11,950 --> 00:16:18,520
the actual resources the memory of the

00:16:14,770 --> 00:16:21,460
PCI card things like this and some PCI

00:16:18,520 --> 00:16:24,220
cards are not only driven by memory but

00:16:21,460 --> 00:16:28,030
also I approached the old IO legacy

00:16:24,220 --> 00:16:30,910
airports the funny thing is Numa does

00:16:28,030 --> 00:16:32,980
implement the notion of token which

00:16:30,910 --> 00:16:36,460
allows us to access to a given set of

00:16:32,980 --> 00:16:38,650
i/o ports so the idea is that the PCI

00:16:36,460 --> 00:16:41,800
arbiter would create the token

00:16:38,650 --> 00:16:43,990
tell the colonel please make me a token

00:16:41,800 --> 00:16:46,360
that allows you access to these are you

00:16:43,990 --> 00:16:49,860
ports which are the ones and that access

00:16:46,360 --> 00:16:53,260
the card and then I can give it to a

00:16:49,860 --> 00:16:56,220
program and then it can use it to access

00:16:53,260 --> 00:16:58,990
to the i/o port so that we can have this

00:16:56,220 --> 00:17:01,300
the cheese we have the PCI arbiter which

00:16:58,990 --> 00:17:04,300
has to be route to access the actual

00:17:01,300 --> 00:17:07,750
hardware and then everything else can be

00:17:04,300 --> 00:17:10,900
run as nobody nobody on the hood is not

00:17:07,750 --> 00:17:14,350
a UID is really nobody it's processes

00:17:10,900 --> 00:17:17,830
which don't have any permission so for

00:17:14,350 --> 00:17:19,900
instance the net DD driver can start

00:17:17,830 --> 00:17:23,620
maybe as a user which is allowed to

00:17:19,900 --> 00:17:25,660
access network cards so it opens the

00:17:23,620 --> 00:17:28,420
network card with the PCI arbiter when

00:17:25,660 --> 00:17:30,910
once it had it has done this it has the

00:17:28,420 --> 00:17:34,720
permissions it can forget about its

00:17:30,910 --> 00:17:37,210
permission it has the system removing

00:17:34,720 --> 00:17:40,030
any of my permissions and then it cannot

00:17:37,210 --> 00:17:43,180
do anything else than just driving the

00:17:40,030 --> 00:17:46,720
PCI card so that's extremely safe and

00:17:43,180 --> 00:17:49,690
same for xorg for the run driver etc and

00:17:46,720 --> 00:17:51,850
then everything here we don't trust it

00:17:49,690 --> 00:17:52,450
that's not a problem it cannot do much

00:17:51,850 --> 00:17:58,049
harm

00:17:52,450 --> 00:18:03,010
cannot even open a file so that's fine

00:17:58,049 --> 00:18:07,419
maybe I can even move my ramp sound

00:18:03,010 --> 00:18:09,460
demon and to a user that is this is

00:18:07,419 --> 00:18:11,620
controlled by the administrator of the

00:18:09,460 --> 00:18:14,620
system so it provides drivers for the

00:18:11,620 --> 00:18:16,389
hardware ok but maybe the user said I

00:18:14,620 --> 00:18:19,830
would like to drive the sound card

00:18:16,389 --> 00:18:22,299
myself because it has special features

00:18:19,830 --> 00:18:25,830
experimental features etc else I would

00:18:22,299 --> 00:18:29,470
like to run this as a user ok why not

00:18:25,830 --> 00:18:34,000
but that's dangerous

00:18:29,470 --> 00:18:37,720
why because PCI cards can do DMS to

00:18:34,000 --> 00:18:40,000
anywhere in the physical memory but you

00:18:37,720 --> 00:18:42,700
have a um mu which allows to prevent

00:18:40,000 --> 00:18:44,649
this kind of thing so you actually

00:18:42,700 --> 00:18:46,750
control you say this card can only

00:18:44,649 --> 00:18:50,139
access to and that part of the memory

00:18:46,750 --> 00:18:52,059
and then it becomes safe it just allow

00:18:50,139 --> 00:18:56,049
the user to access the memory it owns

00:18:52,059 --> 00:18:58,480
and that's all so if you know about PCI

00:18:56,049 --> 00:19:03,130
paths pass through with hypervisors

00:18:58,480 --> 00:19:05,590
that's the same feature and it's just at

00:19:03,130 --> 00:19:07,990
the shell level instead of hypervisor

00:19:05,590 --> 00:19:09,940
you have to configure something etc here

00:19:07,990 --> 00:19:15,029
you just configure it in the shell and

00:19:09,940 --> 00:19:15,029
you have access to the PCI card and

00:19:15,210 --> 00:19:19,809
maybe you don't know you do not want to

00:19:17,799 --> 00:19:21,549
give the whole PCI card to the user

00:19:19,809 --> 00:19:25,120
because others would like to use it

00:19:21,549 --> 00:19:26,909
there are quite a few high end cards

00:19:25,120 --> 00:19:29,110
like cisco cards on things like this

00:19:26,909 --> 00:19:31,690
which actually provides various

00:19:29,110 --> 00:19:34,450
functions you have just one ethernet

00:19:31,690 --> 00:19:37,539
card but when you do LS PCI you see a

00:19:34,450 --> 00:19:40,240
lot of functions it's just virtual cards

00:19:37,539 --> 00:19:43,539
that you can assign to different domains

00:19:40,240 --> 00:19:45,940
on a hypervisor system but on the hood

00:19:43,539 --> 00:19:47,919
it would be on different users so each

00:19:45,940 --> 00:19:49,960
user has access to the same card and

00:19:47,919 --> 00:19:56,799
they are just isolated one from the

00:19:49,960 --> 00:19:59,260
other and you could even go further the

00:19:56,799 --> 00:20:02,409
thing is you're a user in in that

00:19:59,260 --> 00:20:04,929
situation if you don't trust this code

00:20:02,409 --> 00:20:05,920
it's a problem because it can open files

00:20:04,929 --> 00:20:08,700
your own file

00:20:05,920 --> 00:20:11,560
maybe I don't know there are the

00:20:08,700 --> 00:20:13,330
passwords you have stored in Firefox and

00:20:11,560 --> 00:20:14,410
things I see so you don't trust that

00:20:13,330 --> 00:20:17,440
good okay

00:20:14,410 --> 00:20:19,330
just that a sub hurt the surf hand is

00:20:17,440 --> 00:20:21,880
something that you can start as a normal

00:20:19,330 --> 00:20:25,690
user which gets completely separate it

00:20:21,880 --> 00:20:28,390
has its own notion of users and then it

00:20:25,690 --> 00:20:33,160
cannot access the files you can access

00:20:28,390 --> 00:20:36,010
so I have w3m which I trust okay I like

00:20:33,160 --> 00:20:39,040
it and I know it's small okay fine I

00:20:36,010 --> 00:20:41,830
trust it but Firefox it's big it has

00:20:39,040 --> 00:20:44,860
flash all these things and when it has a

00:20:41,830 --> 00:20:48,220
separate user and the driver as well I

00:20:44,860 --> 00:20:50,140
ran it as a separate user the idea is

00:20:48,220 --> 00:20:53,620
that should be able to do this

00:20:50,140 --> 00:20:56,530
I actually nest the PCI arbiters there

00:20:53,620 --> 00:20:59,950
is the system provided one which the

00:20:56,530 --> 00:21:02,740
user is allowed to access only the sound

00:20:59,950 --> 00:21:06,550
card and then the user starts another

00:21:02,740 --> 00:21:09,400
PCI arbiter in which it says okay this

00:21:06,550 --> 00:21:11,470
sub user is allowed to access the Sun

00:21:09,400 --> 00:21:14,770
board and only that I may be something

00:21:11,470 --> 00:21:19,560
else I will do not provide access to it

00:21:14,770 --> 00:21:25,680
etc so this is a way to be able to run

00:21:19,560 --> 00:21:28,690
untrusted code safely as a user even

00:21:25,680 --> 00:21:32,770
okay so that was for the PCI part and

00:21:28,690 --> 00:21:36,280
now the news about the heard so the

00:21:32,770 --> 00:21:39,460
statute the status hasn't changed so

00:21:36,280 --> 00:21:44,200
much so we support 32-bit we have a

00:21:39,460 --> 00:21:47,470
support starting of 64-bit support which

00:21:44,200 --> 00:21:50,200
hasn't moved so much recently because we

00:21:47,470 --> 00:21:54,460
have so many things to do it's not so

00:21:50,200 --> 00:21:58,120
much a priority so now we have 2 6 32

00:21:54,460 --> 00:22:01,600
gigs drivers we would like to use ramp

00:21:58,120 --> 00:22:04,120
to get new drivers of course so we have

00:22:01,600 --> 00:22:07,780
X org we have HD is that's fine enough

00:22:04,120 --> 00:22:12,400
from most hacking used not desktop use

00:22:07,780 --> 00:22:14,680
but that's finding us for having fun we

00:22:12,400 --> 00:22:16,600
have an experimental Sun support through

00:22:14,680 --> 00:22:19,450
user land run so you start and player

00:22:16,600 --> 00:22:21,490
and actually it starts a kernel

00:22:19,450 --> 00:22:26,289
with some drivers and then he tries to

00:22:21,490 --> 00:22:29,590
the Sun and device so we had a talk

00:22:26,289 --> 00:22:31,330
about this last year or two years two

00:22:29,590 --> 00:22:34,210
years ago I don't remember

00:22:31,330 --> 00:22:36,190
we don't have USB yet but again it's a

00:22:34,210 --> 00:22:39,510
matter of clicking ramp and then

00:22:36,190 --> 00:22:43,240
plugging things and that should be fine

00:22:39,510 --> 00:22:46,779
so it's quite stable the thing is the

00:22:43,240 --> 00:22:49,690
box is I maintained for an am building

00:22:46,779 --> 00:22:52,690
package etc I don't remember when I was

00:22:49,690 --> 00:22:54,730
still reinstall them more than a decade

00:22:52,690 --> 00:22:59,230
probably I I don't even remember

00:22:54,730 --> 00:23:01,570
so yes it's quite stable and the build

00:22:59,230 --> 00:23:03,580
demons the keep building packages it's

00:23:01,570 --> 00:23:06,700
something which is really intensive you

00:23:03,580 --> 00:23:08,860
keep copying files compiling things

00:23:06,700 --> 00:23:12,220
downloading stuff so it's really

00:23:08,860 --> 00:23:17,139
stressing everything and we don't get

00:23:12,220 --> 00:23:20,350
Hanks or memory issues etc after weeks

00:23:17,139 --> 00:23:23,620
of doing that all the time so yeah it

00:23:20,350 --> 00:23:25,750
does work quite well it does crash has

00:23:23,620 --> 00:23:28,929
chunks sometimes but it's not so

00:23:25,750 --> 00:23:31,899
frequent we have a lot of packages from

00:23:28,929 --> 00:23:34,389
the Debian archive so it goes up and

00:23:31,899 --> 00:23:37,210
down depending on new things that are

00:23:34,389 --> 00:23:40,510
required and things to fix but basically

00:23:37,210 --> 00:23:43,389
on we are around 80% help is really

00:23:40,510 --> 00:23:45,610
welcome to make that figure bigger

00:23:43,389 --> 00:23:47,380
usually it's just a matter of fixing a

00:23:45,610 --> 00:23:49,690
few lines of code in in the software

00:23:47,380 --> 00:23:52,960
because they assume Linux or they assume

00:23:49,690 --> 00:23:57,789
if it's not Linux it's Windows yeah but

00:23:52,960 --> 00:24:01,149
well we have some of Firefox numeric I

00:23:57,789 --> 00:24:03,190
mean big software do do work actually we

00:24:01,149 --> 00:24:05,260
have the standard Debian installer so

00:24:03,190 --> 00:24:08,190
it's actually as easy to install Debian

00:24:05,260 --> 00:24:13,450
hard as it is to install Debian at all

00:24:08,190 --> 00:24:16,830
so that's fine some more recent news we

00:24:13,450 --> 00:24:19,960
have gigs which is going quite well so

00:24:16,830 --> 00:24:21,909
purists I mean new purists are happy

00:24:19,960 --> 00:24:26,320
because they have a real new only new

00:24:21,909 --> 00:24:29,049
system the nice thing is it's actually

00:24:26,320 --> 00:24:31,389
bootstraps from scratch and that is they

00:24:29,049 --> 00:24:32,720
have the rule to starting from a C

00:24:31,389 --> 00:24:35,899
compiler on Linux

00:24:32,720 --> 00:24:38,330
build a cross builder etc and then build

00:24:35,899 --> 00:24:42,109
from scratch the whole system from an

00:24:38,330 --> 00:24:44,960
existing Linux system so we can trust

00:24:42,109 --> 00:24:48,859
that thing quite a lot and it helped us

00:24:44,960 --> 00:24:51,349
in Debian for the bootstrap effort to be

00:24:48,859 --> 00:24:54,769
safe saying okay we can also reconstruct

00:24:51,349 --> 00:24:56,899
the Debian architecture a new hard

00:24:54,769 --> 00:25:01,190
architecture from scratch if it would

00:24:56,899 --> 00:25:02,899
ever be necessary so I think there is

00:25:01,190 --> 00:25:05,330
some work to do so that it's actually

00:25:02,899 --> 00:25:07,960
bootable that yeah people are hacking on

00:25:05,330 --> 00:25:11,899
it and it's going quite fine

00:25:07,960 --> 00:25:14,539
so recently I didn't mention to it

00:25:11,899 --> 00:25:17,749
the translators so slash server socket

00:25:14,539 --> 00:25:21,379
slash service PCI etc it's actually

00:25:17,749 --> 00:25:24,859
special files and so far we use new hair

00:25:21,379 --> 00:25:27,559
extension to store them recently we put

00:25:24,859 --> 00:25:30,349
some code that you use ex attr so to use

00:25:27,559 --> 00:25:34,759
a standard feature of x2 FS to actually

00:25:30,349 --> 00:25:37,549
store things we have optimization

00:25:34,759 --> 00:25:40,759
stabilization so quite a few things I

00:25:37,549 --> 00:25:43,309
won't detail everything but basically we

00:25:40,759 --> 00:25:48,830
got the physics implementation which

00:25:43,309 --> 00:25:51,909
provides really nice performance we have

00:25:48,830 --> 00:25:54,889
high mind support it was quite something

00:25:51,909 --> 00:25:57,080
because we are still with a 32-bit

00:25:54,889 --> 00:25:59,389
kernel and so to access more than 4

00:25:57,080 --> 00:26:01,940
gigabytes of memory you have to map

00:25:59,389 --> 00:26:05,149
memory on the fire etcetera this was

00:26:01,940 --> 00:26:07,450
implemented so ok for now we can access

00:26:05,149 --> 00:26:12,109
more than 4 gigabytes of memory that way

00:26:07,450 --> 00:26:15,320
so we are fine on that front I mentioned

00:26:12,109 --> 00:26:18,499
the sub hard to say a user can start

00:26:15,320 --> 00:26:21,019
something and be sure that it's isolated

00:26:18,499 --> 00:26:23,690
so this is something that one can really

00:26:21,019 --> 00:26:25,820
do now and before we had to be root to

00:26:23,690 --> 00:26:28,879
run a sub head so a different set of

00:26:25,820 --> 00:26:31,700
notion of users but now we can do it as

00:26:28,879 --> 00:26:34,159
a user the really cool thing about this

00:26:31,700 --> 00:26:36,440
is that you can really think about

00:26:34,159 --> 00:26:38,599
containers when you think about subverts

00:26:36,440 --> 00:26:41,779
the difference is that from the ground

00:26:38,599 --> 00:26:44,330
it's safe because actually it was

00:26:41,779 --> 00:26:45,380
difficult to implement because it's safe

00:26:44,330 --> 00:26:47,870
it's

00:26:45,380 --> 00:26:51,049
deep inside the construction of subverts

00:26:47,870 --> 00:26:51,500
that it is safe because it cannot be not

00:26:51,049 --> 00:26:54,230
safe

00:26:51,500 --> 00:26:57,289
instead of Linux which keeps saying all

00:26:54,230 --> 00:26:59,929
four containers we forgot to isolate the

00:26:57,289 --> 00:27:03,140
song cut we forgot to isolate this part

00:26:59,929 --> 00:27:05,840
and that I don't you I don't know where

00:27:03,140 --> 00:27:07,429
it will end because there will be always

00:27:05,840 --> 00:27:09,470
somebody which adds something to the

00:27:07,429 --> 00:27:12,140
linux kernel which needs to be contained

00:27:09,470 --> 00:27:14,030
while on the hood it's not so easy to

00:27:12,140 --> 00:27:16,220
implement something because from the

00:27:14,030 --> 00:27:20,559
start it's contained and so you cannot

00:27:16,220 --> 00:27:24,110
do something unsafe we've worked on

00:27:20,559 --> 00:27:27,169
using the L WIP tcp/ip stack because

00:27:24,110 --> 00:27:29,240
from now we use an old Linux stack which

00:27:27,169 --> 00:27:32,539
is fine enough but ok let's get

00:27:29,240 --> 00:27:35,390
something which is maintained and put it

00:27:32,539 --> 00:27:38,360
in in the process and there's somebody

00:27:35,390 --> 00:27:41,390
who also worked on distributed system so

00:27:38,360 --> 00:27:43,580
you do PS and you see all processes

00:27:41,390 --> 00:27:46,760
running on your machine but also another

00:27:43,580 --> 00:27:48,770
machine they have a current view of what

00:27:46,760 --> 00:27:50,659
is a system for now it's really

00:27:48,770 --> 00:27:53,000
experimental but you could think that

00:27:50,659 --> 00:27:54,559
you can migrate a process from one to

00:27:53,000 --> 00:27:57,890
the other and everything works fine

00:27:54,559 --> 00:28:00,260
because everything is interposed too so

00:27:57,890 --> 00:28:02,929
you just need to push the messages

00:28:00,260 --> 00:28:07,820
through the network to get things

00:28:02,929 --> 00:28:11,840
working we had releases so there's that

00:28:07,820 --> 00:28:14,270
old one which is still fun we had we

00:28:11,840 --> 00:28:17,750
used to have a card it's not really

00:28:14,270 --> 00:28:20,299
active nowadays we have releases

00:28:17,750 --> 00:28:22,760
upstream releases from x times and we

00:28:20,299 --> 00:28:26,090
have Debian snapshots so we had last one

00:28:22,760 --> 00:28:29,150
one year ago and within one year we will

00:28:26,090 --> 00:28:32,240
have another one normally so we have

00:28:29,150 --> 00:28:33,850
stable sets of things you can have it a

00:28:32,240 --> 00:28:39,260
try

00:28:33,850 --> 00:28:40,820
so future work I think the one thing

00:28:39,260 --> 00:28:43,309
that we would like to have a look at

00:28:40,820 --> 00:28:46,909
these drivers to get support for sound

00:28:43,309 --> 00:28:49,280
USB etc but going through run as Jen

00:28:46,909 --> 00:28:51,500
Lucas said Ram is something which is

00:28:49,280 --> 00:28:54,440
maintained which is mainstream which is

00:28:51,500 --> 00:28:57,080
flexible and we should really leverage

00:28:54,440 --> 00:28:59,240
this so it's just a matter of plugging

00:28:57,080 --> 00:29:01,850
things fixing

00:28:59,240 --> 00:29:04,640
of compilation issues and it should be

00:29:01,850 --> 00:29:07,220
working fine and with the PCI AB arbiter

00:29:04,640 --> 00:29:09,980
it's fine to have the disk network its

00:29:07,220 --> 00:29:13,220
etc in separate processes so if one

00:29:09,980 --> 00:29:16,039
crashes no problem

00:29:13,220 --> 00:29:18,740
so 64-bit support sometime maybe a

00:29:16,039 --> 00:29:22,190
reader head is still missing so the

00:29:18,740 --> 00:29:23,779
performance may not be so good but well

00:29:22,190 --> 00:29:25,309
for now it's fine enough but yeah at

00:29:23,779 --> 00:29:28,309
some point we we should really work

00:29:25,309 --> 00:29:30,679
something and then there's the crazy

00:29:28,309 --> 00:29:33,260
stuff so for instance somebody said well

00:29:30,679 --> 00:29:35,779
the startup scripts you know it's all in

00:29:33,260 --> 00:29:38,539
C it's complex you could do this in

00:29:35,779 --> 00:29:41,149
scheme and then everything from boot up

00:29:38,539 --> 00:29:43,429
to the shell would be in scheme why not

00:29:41,149 --> 00:29:46,070
I mean the the idea of the herd is that

00:29:43,429 --> 00:29:48,350
it's flexible and they you can they're

00:29:46,070 --> 00:29:50,899
crazy things because you can plug things

00:29:48,350 --> 00:29:53,990
together you just have the file system

00:29:50,899 --> 00:29:58,159
to plug things together so you're

00:29:53,990 --> 00:30:01,520
welcome to have any kind of hack you

00:29:58,159 --> 00:30:04,010
would like to have in the system so

00:30:01,520 --> 00:30:06,740
thanks for listening and everybody that

00:30:04,010 --> 00:30:08,960
works on this really welcome help

00:30:06,740 --> 00:30:11,330
because there's a lot of things I have

00:30:08,960 --> 00:30:14,690
to do just to maintain the system so

00:30:11,330 --> 00:30:16,880
that it works stabling et cetera I would

00:30:14,690 --> 00:30:20,510
really like to welcome help for instance

00:30:16,880 --> 00:30:22,640
the 64-bit support is still post just

00:30:20,510 --> 00:30:24,230
because I don't have and the time to do

00:30:22,640 --> 00:30:27,110
it because I'm working on something else

00:30:24,230 --> 00:30:29,299
so if people want to have 64-bit support

00:30:27,110 --> 00:30:31,549
then help me with that stuff I have to

00:30:29,299 --> 00:30:35,240
do and then I'll have time to do the

00:30:31,549 --> 00:30:37,539
64-bit support so thanks and I welcome

00:30:35,240 --> 00:30:37,539
questions

00:30:38,450 --> 00:30:47,539
[Applause]

00:31:05,789 --> 00:31:18,999
do you mean running Apache you mean

00:31:17,919 --> 00:31:25,179
meltdown inspector

00:31:18,999 --> 00:31:30,609
meltdown inspector so meltdown and specs

00:31:25,179 --> 00:31:32,139
are really awful in that I mean yeah so

00:31:30,609 --> 00:31:34,959
the question is would it be easier to

00:31:32,139 --> 00:31:37,839
patch against meltdown inspect on the

00:31:34,959 --> 00:31:43,059
hood and the program is no because here

00:31:37,839 --> 00:31:46,389
managing memory is relying on the CPU to

00:31:43,059 --> 00:31:49,649
do things the thing is it's always a

00:31:46,389 --> 00:31:52,239
problem of performance versus security

00:31:49,649 --> 00:31:54,729
ideally the kernel here wouldn't see

00:31:52,239 --> 00:31:57,369
anything and any memory and it would

00:31:54,729 --> 00:31:59,979
always copy from here to there and then

00:31:57,369 --> 00:32:01,869
from there to there and then what you

00:31:59,979 --> 00:32:04,539
would be able to see would be with

00:32:01,869 --> 00:32:07,659
meltdown would be only what the Condor

00:32:04,539 --> 00:32:10,509
sees that is the message is currently

00:32:07,659 --> 00:32:12,489
being transferred so not everything so

00:32:10,509 --> 00:32:14,739
that would be less of a problem and that

00:32:12,489 --> 00:32:16,929
for performance we prefer to make the

00:32:14,739 --> 00:32:18,669
kernel see all the memory so it can copy

00:32:16,929 --> 00:32:21,129
directly from one process to the other

00:32:18,669 --> 00:32:25,869
and then with meant down you can see

00:32:21,129 --> 00:32:27,789
everything then so yes melon is really

00:32:25,869 --> 00:32:29,829
often in that you cannot trust even the

00:32:27,789 --> 00:32:35,399
hardware the isolation between processes

00:32:29,829 --> 00:32:35,399
okay then we screwed yes

00:32:41,509 --> 00:32:47,090
website there's a lot of kind of paces

00:32:43,609 --> 00:32:58,039
of IRC conversations not very much kind

00:32:47,090 --> 00:33:00,379
of description of tasks so the question

00:32:58,039 --> 00:33:03,080
is about the contributing page on the

00:33:00,379 --> 00:33:07,369
wiki it has some things but it's not so

00:33:03,080 --> 00:33:12,320
easy the thing is there are so many

00:33:07,369 --> 00:33:16,070
things to do I could spend time on doing

00:33:12,320 --> 00:33:22,159
this I welcome people doing this for me

00:33:16,070 --> 00:33:25,669
I agree it's it's like a bottleneck to

00:33:22,159 --> 00:33:28,190
get people to do some things that well

00:33:25,669 --> 00:33:30,980
one issue we have is that people comes

00:33:28,190 --> 00:33:34,100
and say what can I do and the answer is

00:33:30,980 --> 00:33:36,919
what can you do in that what are you

00:33:34,100 --> 00:33:39,980
able to do and what you are willing to

00:33:36,919 --> 00:33:42,710
learn to do and these are really

00:33:39,980 --> 00:33:45,739
different things which make what you can

00:33:42,710 --> 00:33:47,869
actually do then really different so on

00:33:45,739 --> 00:33:51,619
the contributing page there there are

00:33:47,869 --> 00:33:55,220
lists of small hacks they are not so

00:33:51,619 --> 00:33:56,899
small in that it means I don't know for

00:33:55,220 --> 00:34:00,440
somebody who knows what he's doing maybe

00:33:56,899 --> 00:34:02,480
a few days for somebody who doesn't know

00:34:00,440 --> 00:34:05,480
then it will be a few months because he

00:34:02,480 --> 00:34:08,690
will have to learn a lot of things but

00:34:05,480 --> 00:34:10,250
that's cool because I mean really almost

00:34:08,690 --> 00:34:14,619
everything I know about the printing

00:34:10,250 --> 00:34:17,569
system etc what gave me a job in the

00:34:14,619 --> 00:34:19,339
United Kingdom and things like this was

00:34:17,569 --> 00:34:24,379
because of things I've learned due to

00:34:19,339 --> 00:34:26,240
pet projects so yes there's that list of

00:34:24,379 --> 00:34:29,419
small hacks you can have a look at if

00:34:26,240 --> 00:34:32,389
you don't understand and ask on the

00:34:29,419 --> 00:34:35,540
mailing list we can describe what's

00:34:32,389 --> 00:34:38,030
required give pointers etc the idea is

00:34:35,540 --> 00:34:39,710
that it should be something you would

00:34:38,030 --> 00:34:43,970
like to work on so that you are

00:34:39,710 --> 00:34:48,280
motivated to make it work so I don't but

00:34:43,970 --> 00:34:48,280
yes we should work on that part indeed

00:34:48,369 --> 00:34:52,570
yes

00:34:49,570 --> 00:35:13,720
he said that for the 64-bit support you

00:34:52,570 --> 00:35:16,960
are yeah so the question is about 64-bit

00:35:13,720 --> 00:35:20,950
support so for now we have just the

00:35:16,960 --> 00:35:23,230
kernel support the idea is that you

00:35:20,950 --> 00:35:25,810
don't so much need 64-bit in New Zealand

00:35:23,230 --> 00:35:27,700
because for jika bytes of memory it's

00:35:25,810 --> 00:35:30,280
quite big I mean when I see Firefox

00:35:27,700 --> 00:35:32,050
taking logica bytes of memory I say no

00:35:30,280 --> 00:35:35,050
it's not really normal

00:35:32,050 --> 00:35:37,390
so for now the idea would be the kernel

00:35:35,050 --> 00:35:40,390
C is 64 bit so it can manage memory and

00:35:37,390 --> 00:35:44,020
the way it prefers and then we just have

00:35:40,390 --> 00:35:45,610
to translate the our pcs the parameters

00:35:44,020 --> 00:35:47,440
the addresses and things like this

00:35:45,610 --> 00:35:49,900
it shouldn't be so hard because it's

00:35:47,440 --> 00:35:51,760
really just the layer and then

00:35:49,900 --> 00:35:54,040
everything else will work all the our

00:35:51,760 --> 00:35:57,490
pieces etcetera and at some point we can

00:35:54,040 --> 00:35:59,380
bootstrap a 64-bit architecture it will

00:35:57,490 --> 00:36:02,710
be just a matter with you finding things

00:35:59,380 --> 00:36:22,480
plotting the assembly snippets etc that

00:36:02,710 --> 00:36:24,610
that's not too much of an effort so

00:36:22,480 --> 00:36:29,170
either to implement translation between

00:36:24,610 --> 00:36:33,090
32 bit and 64 just good native 64 maybe

00:36:29,170 --> 00:36:35,140
the thing is we have a 32-bit

00:36:33,090 --> 00:36:38,140
distribution which exists which we know

00:36:35,140 --> 00:36:43,150
is table etc would like to leverage on

00:36:38,140 --> 00:36:46,290
this maybe but yeah I mean I myself

00:36:43,150 --> 00:36:49,600
prefer 32 to 64 if somebody prefers to

00:36:46,290 --> 00:36:56,350
bootstrap 64 then yeah go for it and

00:36:49,600 --> 00:36:57,910
you're welcome yeah - just just last

00:36:56,350 --> 00:37:00,240
question yes because we are out of time

00:36:57,910 --> 00:37:00,240
then

00:37:01,370 --> 00:37:07,430
you can get a token that you can pass

00:37:04,430 --> 00:37:07,430
yeah

00:37:12,420 --> 00:37:17,400
so I mentioned that you can have a token

00:37:14,849 --> 00:37:19,289
which gives access to i/o ports and and

00:37:17,400 --> 00:37:20,970
you can give it to another process so is

00:37:19,289 --> 00:37:24,150
it something which is general or

00:37:20,970 --> 00:37:27,420
something just for this case it is

00:37:24,150 --> 00:37:29,640
something really general actually when I

00:37:27,420 --> 00:37:34,920
mentioned the question of a discussion

00:37:29,640 --> 00:37:37,859
between X to FS and oath here the arrows

00:37:34,920 --> 00:37:40,680
I put is actually a pot exchange the

00:37:37,859 --> 00:37:43,079
idea is that Sh actually gets a token

00:37:40,680 --> 00:37:45,839
from aute and gives it to X two FS and

00:37:43,079 --> 00:37:47,609
then X 2 FS can match it with the token

00:37:45,839 --> 00:37:49,920
it got from owed which is a proof that

00:37:47,609 --> 00:37:52,170
this process is actually allowed to

00:37:49,920 --> 00:37:57,420
access the file so yeah this is

00:37:52,170 --> 00:38:00,170
something deep in in in the system okay

00:37:57,420 --> 00:38:00,170
thanks everybody

00:38:00,700 --> 00:38:03,870

YouTube URL: https://www.youtube.com/watch?v=SpqTnLD8ZJ8


