Title: Creating GopherJS Apps with gRPC-Web
Publication date: 2018-02-03
Playlist: FOSDEM 2018
Description: 
	by Johan Brandhorst

At: FOSDEM 2018
Room: H.1308 (Rolin)
Scheduled start: 2018-02-03 15:00:00+01
Captions: 
	00:00:07,700 --> 00:00:13,080
right yeah I'm Johan hi everyone I'm

00:00:10,530 --> 00:00:15,570
really excited to be here I'm a Swedish

00:00:13,080 --> 00:00:17,640
guy I live in England I worked for a

00:00:15,570 --> 00:00:19,830
data a collaboration startup called in

00:00:17,640 --> 00:00:23,130
folsom I'll be using go for about 2

00:00:19,830 --> 00:00:25,560
years and I really like language in my

00:00:23,130 --> 00:00:27,270
spare time I enjoy working on open

00:00:25,560 --> 00:00:29,670
source projects and I've contributed to

00:00:27,270 --> 00:00:31,980
the go programming language I run my own

00:00:29,670 --> 00:00:34,980
blog writing mostly about go and gr PC

00:00:31,980 --> 00:00:36,450
and today I'm here to talk about my open

00:00:34,980 --> 00:00:38,789
source project and creating go for

00:00:36,450 --> 00:00:40,920
Jessup's with the gr pc web so let's

00:00:38,789 --> 00:00:43,829
take a quick overview first today we're

00:00:40,920 --> 00:00:46,110
going to learn about pull of f gr pc g r

00:00:43,829 --> 00:00:49,170
pc web and go for Jas we're going to

00:00:46,110 --> 00:00:51,090
introduce Geo PC web for go we're going

00:00:49,170 --> 00:00:54,020
to create a simple app with GFC web for

00:00:51,090 --> 00:00:57,210
go so let's let's start with protobuf

00:00:54,020 --> 00:00:58,829
who's heard of protobuf before yeah

00:00:57,210 --> 00:01:02,059
that's most of the room as expected and

00:00:58,829 --> 00:01:04,979
it was using it in production

00:01:02,059 --> 00:01:05,939
ok yeah cool so this is it's not gonna

00:01:04,979 --> 00:01:08,340
be a lot of news for you

00:01:05,939 --> 00:01:11,460
it's a Google's interface description

00:01:08,340 --> 00:01:13,620
language a binary serialization format

00:01:11,460 --> 00:01:16,860
built for backwards compatibility and

00:01:13,620 --> 00:01:18,540
leverages cogeneration it is used for

00:01:16,860 --> 00:01:21,780
service or service communication as well

00:01:18,540 --> 00:01:24,090
as data storage it's made deciding to be

00:01:21,780 --> 00:01:25,820
fast faster than XML up to a hundred

00:01:24,090 --> 00:01:28,470
times according to the Google

00:01:25,820 --> 00:01:30,420
documentation however relevant that

00:01:28,470 --> 00:01:33,510
comparison is and as faster than Jason

00:01:30,420 --> 00:01:35,340
as well of course it's got wide official

00:01:33,510 --> 00:01:38,220
language support including go C++ Java

00:01:35,340 --> 00:01:39,810
Python and other official

00:01:38,220 --> 00:01:42,659
implementations as well as third-party

00:01:39,810 --> 00:01:44,220
libraries and as far as I can tell this

00:01:42,659 --> 00:01:45,900
is the highest resolution image that

00:01:44,220 --> 00:01:47,030
exists for the photograph public that's

00:01:45,900 --> 00:01:50,900
terrible

00:01:47,030 --> 00:01:55,470
so so what is the purpose if I look like

00:01:50,900 --> 00:01:57,330
I've chosen a simple file here using

00:01:55,470 --> 00:01:58,439
poetry syntax which is a modern way of

00:01:57,330 --> 00:02:00,689
creating photo files

00:01:58,439 --> 00:02:01,950
I've also used a go package option which

00:02:00,689 --> 00:02:03,450
is specifically go but you should

00:02:01,950 --> 00:02:05,909
definitely using if you're using proto

00:02:03,450 --> 00:02:07,619
buffers go it makes all your imports

00:02:05,909 --> 00:02:09,060
much easier to handle we've got a

00:02:07,619 --> 00:02:10,590
package declaration here as well which

00:02:09,060 --> 00:02:12,060
is used for namespacing packages and

00:02:10,590 --> 00:02:14,280
we've got a really simple message

00:02:12,060 --> 00:02:16,470
declaration and we've got a couple of

00:02:14,280 --> 00:02:18,120
different types here and some field

00:02:16,470 --> 00:02:20,319
numbers which is used for marshalling

00:02:18,120 --> 00:02:21,610
and marshalling and helps with

00:02:20,319 --> 00:02:24,879
backwards-compatibility guarantees that

00:02:21,610 --> 00:02:26,109
it gives you a product plus also support

00:02:24,879 --> 00:02:29,019
more advanced features such as

00:02:26,109 --> 00:02:31,359
enumerations arrays maps and nested

00:02:29,019 --> 00:02:32,500
messages and one of types and services

00:02:31,359 --> 00:02:33,189
which we're going to come back to in a

00:02:32,500 --> 00:02:37,030
moment

00:02:33,189 --> 00:02:39,519
so was the generator code looks like so

00:02:37,030 --> 00:02:42,609
from that simple type description that

00:02:39,519 --> 00:02:45,760
we had in the profile we get a go type

00:02:42,609 --> 00:02:48,730
the types map very simply in the girl

00:02:45,760 --> 00:02:50,139
case we get some struck tags for JSON

00:02:48,730 --> 00:02:54,329
and protobuf and marshaling and we also

00:02:50,139 --> 00:02:58,569
get some Gators the default go protobuf

00:02:54,329 --> 00:03:00,220
generator uses reflection for marshaling

00:02:58,569 --> 00:03:03,069
and unmarshal II but there's a

00:03:00,220 --> 00:03:06,069
third-party implementation called Go Go

00:03:03,069 --> 00:03:10,299
proto which uses type-specific

00:03:06,069 --> 00:03:11,680
marshalling thanks Walter which you

00:03:10,299 --> 00:03:15,040
should use if you're using go case it's

00:03:11,680 --> 00:03:18,430
faster so how do we use protobuf for

00:03:15,040 --> 00:03:19,959
service to service communications g RPC

00:03:18,430 --> 00:03:21,159
so obviously we'd already been

00:03:19,959 --> 00:03:25,359
introduced to GRC a little bit here

00:03:21,159 --> 00:03:28,510
today but who's using gr PC at work yeah

00:03:25,359 --> 00:03:30,209
that's quite a few actually yeah so it's

00:03:28,510 --> 00:03:34,409
a remote procedure call protocol

00:03:30,209 --> 00:03:36,609
developed by Google built on HTTP 2 it's

00:03:34,409 --> 00:03:40,120
donated to the cloud native computing

00:03:36,609 --> 00:03:41,440
foundation its serialization agnostic

00:03:40,120 --> 00:03:43,239
but you normally use it with protobuf

00:03:41,440 --> 00:03:46,680
although it does also have supports

00:03:43,239 --> 00:03:50,229
official support for flatbuffers now and

00:03:46,680 --> 00:03:51,819
and like protobuf you generate code from

00:03:50,229 --> 00:03:53,290
the protobuf sessions or the flat bar

00:03:51,819 --> 00:03:55,120
for definitions if you use a preference

00:03:53,290 --> 00:03:57,340
of course and it comes with powerful

00:03:55,120 --> 00:03:58,810
streaming capabilities such as service i

00:03:57,340 --> 00:04:01,359
streaming client-side streaming and

00:03:58,810 --> 00:04:02,379
bi-directional streaming which is really

00:04:01,359 --> 00:04:04,120
useful for services service

00:04:02,379 --> 00:04:05,979
communications of course and it's the

00:04:04,120 --> 00:04:09,699
backbone of Google's internal

00:04:05,979 --> 00:04:13,329
communications network so what can we do

00:04:09,699 --> 00:04:15,459
with G RPC so this is a page an image

00:04:13,329 --> 00:04:17,620
from the official GRDC documentation and

00:04:15,459 --> 00:04:19,209
essentially the idea is that it allows

00:04:17,620 --> 00:04:21,190
you to write polyglot micro service

00:04:19,209 --> 00:04:24,190
architectures such as Google's

00:04:21,190 --> 00:04:26,500
presumably we've got a C++ server

00:04:24,190 --> 00:04:28,930
android client and another Ruby client

00:04:26,500 --> 00:04:30,820
and they just interact over the protobuf

00:04:28,930 --> 00:04:32,770
interface

00:04:30,820 --> 00:04:34,930
and the hitch should be to that er PC

00:04:32,770 --> 00:04:36,880
provides but you could easily replace

00:04:34,930 --> 00:04:38,140
the C++ service here with a go service

00:04:36,880 --> 00:04:40,030
and this rubric lines with a Python

00:04:38,140 --> 00:04:42,820
client and so on that's what it gives

00:04:40,030 --> 00:04:45,310
you so what does it look like in the

00:04:42,820 --> 00:04:46,540
profiles so we've taken the the proto

00:04:45,310 --> 00:04:48,430
file that we had before we've just added

00:04:46,540 --> 00:04:51,430
another type here and with other service

00:04:48,430 --> 00:04:53,500
at the bottom with a method a simple

00:04:51,430 --> 00:04:57,690
unary method that takes a category

00:04:53,500 --> 00:05:01,120
request and returns a cat toy and this

00:04:57,690 --> 00:05:03,610
then produces this is a snippet of the

00:05:01,120 --> 00:05:06,340
generated code that it produces you get

00:05:03,610 --> 00:05:09,010
a for this client you get a client-side

00:05:06,340 --> 00:05:11,620
interface that you can work with and on

00:05:09,010 --> 00:05:14,760
the server side you have to implement

00:05:11,620 --> 00:05:17,830
this interface in order to support the

00:05:14,760 --> 00:05:19,120
interface so it's very simple all over

00:05:17,830 --> 00:05:21,430
you just define it in the in the

00:05:19,120 --> 00:05:22,930
profiles and then you can in the client

00:05:21,430 --> 00:05:24,700
side just just call the function

00:05:22,930 --> 00:05:26,440
essentially and in the server side you

00:05:24,700 --> 00:05:30,180
just implement the interface very nice

00:05:26,440 --> 00:05:33,100
so but can we use this in the browser

00:05:30,180 --> 00:05:37,600
yes with GOP C Webb who is heard of G

00:05:33,100 --> 00:05:39,070
RPC web that's actually more than I

00:05:37,600 --> 00:05:41,770
expected I gotta say it's a it's a very

00:05:39,070 --> 00:05:43,780
new project well it's been in

00:05:41,770 --> 00:05:47,070
development for about a year as far as I

00:05:43,780 --> 00:05:49,960
know and but no two years probably and

00:05:47,070 --> 00:05:52,180
it only has an official spec out yet

00:05:49,960 --> 00:05:53,800
there's also an official client but it's

00:05:52,180 --> 00:05:56,410
an alpha stage and it's still being

00:05:53,800 --> 00:05:57,970
developed in a private repository so you

00:05:56,410 --> 00:05:59,440
can't really get your hands on it but

00:05:57,970 --> 00:06:01,750
there's an issue on github where you can

00:05:59,440 --> 00:06:03,180
ask for access and you can use it but

00:06:01,750 --> 00:06:08,590
it's not really ready for production use

00:06:03,180 --> 00:06:12,400
it's a uses protobuf for its

00:06:08,590 --> 00:06:14,650
communications and it supports service I

00:06:12,400 --> 00:06:17,940
streaming only no client-side or

00:06:14,650 --> 00:06:20,020
bi-directional streaming as the browser

00:06:17,940 --> 00:06:21,220
standard that's supposed to standardize

00:06:20,020 --> 00:06:22,900
status this is called the streams API

00:06:21,220 --> 00:06:25,590
has not been finalized yet and there's

00:06:22,900 --> 00:06:28,720
no browser that implements it yet anyway

00:06:25,590 --> 00:06:30,790
so only server-side streaming in geo

00:06:28,720 --> 00:06:32,710
busy web unfortunately but the idea is

00:06:30,790 --> 00:06:35,560
that the browser becomes just another gr

00:06:32,710 --> 00:06:39,040
PC client and as I mentioned they're the

00:06:35,560 --> 00:06:40,780
official implementation is is not really

00:06:39,040 --> 00:06:42,720
ready for production use however there

00:06:40,780 --> 00:06:45,240
is another implementation

00:06:42,720 --> 00:06:47,100
written by a British company called

00:06:45,240 --> 00:06:49,760
improbable which is written in

00:06:47,100 --> 00:06:52,080
typescript it uses HTTP - and

00:06:49,760 --> 00:06:54,660
transparently grinded down great student

00:06:52,080 --> 00:06:57,030
HTTP one it also uses the fetch API and

00:06:54,660 --> 00:06:59,670
transparently clampdown grades to xhr

00:06:57,030 --> 00:07:02,130
for browser support it also comes with a

00:06:59,670 --> 00:07:04,670
go proxy package and the binary

00:07:02,130 --> 00:07:09,120
depending on what you want to use it for

00:07:04,670 --> 00:07:11,420
so this here is the browser stack this

00:07:09,120 --> 00:07:14,610
here is an example of the if you're

00:07:11,420 --> 00:07:16,500
exposing a goji OPC server you just

00:07:14,610 --> 00:07:18,210
import the GFC web package and you just

00:07:16,500 --> 00:07:20,400
wrap your GFC so it's very simple

00:07:18,210 --> 00:07:22,530
if you have any other VIP see server you

00:07:20,400 --> 00:07:24,630
just front it with the go stand-alone

00:07:22,530 --> 00:07:27,570
proxy binary it's also very simple the

00:07:24,630 --> 00:07:30,600
proxy is necessary and mandated by the

00:07:27,570 --> 00:07:34,350
spec because the browser cannot speak

00:07:30,600 --> 00:07:37,320
the official GBC protocol but it's very

00:07:34,350 --> 00:07:38,970
simple still just use it and it's used

00:07:37,320 --> 00:07:40,410
in production acting probable and I'm

00:07:38,970 --> 00:07:41,700
not sure if anyone else is using it in

00:07:40,410 --> 00:07:45,120
production that would be interested in

00:07:41,700 --> 00:07:46,560
hearing afterwards so what can we run go

00:07:45,120 --> 00:07:49,340
in the browser yes we can with go for

00:07:46,560 --> 00:07:52,920
yes who's heard of coverage as before

00:07:49,340 --> 00:07:56,070
only half the room okay well you weren't

00:07:52,920 --> 00:07:57,380
for a ride go for jazz is a go to

00:07:56,070 --> 00:08:00,210
JavaScript transpiler

00:07:57,380 --> 00:08:02,670
written by Richard Musial it's been out

00:08:00,210 --> 00:08:04,350
for about four years so so I think and

00:08:02,670 --> 00:08:06,000
it supports nearly everything in the

00:08:04,350 --> 00:08:10,860
standard library including go routines

00:08:06,000 --> 00:08:12,660
it's used in production by certain open

00:08:10,860 --> 00:08:14,910
source projects such as / keep which

00:08:12,660 --> 00:08:18,090
used to be called calmly store one

00:08:14,910 --> 00:08:21,690
password X an in Chapter both private

00:08:18,090 --> 00:08:23,910
companies and there are also community

00:08:21,690 --> 00:08:26,880
bindings for popular JavaScript

00:08:23,910 --> 00:08:29,820
frameworks such as react view the dome

00:08:26,880 --> 00:08:31,610
and WebSockets so what do we get if we

00:08:29,820 --> 00:08:36,349
put all of this together right

00:08:31,610 --> 00:08:39,000
gypsy web forego my open source library

00:08:36,349 --> 00:08:41,520
so it's combines gopher guess with gif

00:08:39,000 --> 00:08:45,570
PC web using the improbable gr PC web

00:08:41,520 --> 00:08:47,730
client and it has a protic plugin that

00:08:45,570 --> 00:08:50,700
generates go for Jas code with no

00:08:47,730 --> 00:08:53,250
JavaScript dependencies it's designed to

00:08:50,700 --> 00:08:55,529
look like go to your PC clients and it

00:08:53,250 --> 00:08:57,689
has full streaming support

00:08:55,529 --> 00:08:59,670
that speck only mandates that you should

00:08:57,689 --> 00:09:01,920
support server-side streaming but I was

00:08:59,670 --> 00:09:03,149
sitting at the golden UK conference and

00:09:01,920 --> 00:09:05,100
I had an idea and I implemented

00:09:03,149 --> 00:09:06,569
bidirectional streaming and client-side

00:09:05,100 --> 00:09:09,120
streaming with a WebSocket box I see you

00:09:06,569 --> 00:09:13,579
can use that as well with the GFC web

00:09:09,120 --> 00:09:16,379
for go library so what can we do with it

00:09:13,579 --> 00:09:18,480
if you could write go for Jezebel wrap

00:09:16,379 --> 00:09:20,490
you could you could write a gopher yes

00:09:18,480 --> 00:09:22,170
electron up for example and use it to

00:09:20,490 --> 00:09:25,680
communicate with your back-end or you

00:09:22,170 --> 00:09:28,499
could just write a generic front end for

00:09:25,680 --> 00:09:33,139
your G OPC service and it doesn't even

00:09:28,499 --> 00:09:35,639
have to be a Goldie IPC service but

00:09:33,139 --> 00:09:38,129
we're gonna have an example later to see

00:09:35,639 --> 00:09:39,930
what it looks like and essentially

00:09:38,129 --> 00:09:44,339
anywhere where the fronton talks to the

00:09:39,930 --> 00:09:46,769
backend so here's the generated code and

00:09:44,339 --> 00:09:49,319
if you just remember back a couple of

00:09:46,769 --> 00:09:51,149
minutes ago the go client and a

00:09:49,319 --> 00:09:52,499
generation it looks it's supposed to

00:09:51,149 --> 00:09:56,100
look very similar to that so you get a

00:09:52,499 --> 00:09:58,410
very similar interface with a

00:09:56,100 --> 00:10:01,610
constructor like this that returns you

00:09:58,410 --> 00:10:03,990
the interface from the generated code

00:10:01,610 --> 00:10:05,459
all this is very interesting but I want

00:10:03,990 --> 00:10:08,279
to show you what it's like to work with

00:10:05,459 --> 00:10:09,420
so I'm gonna do a live demo here and if

00:10:08,279 --> 00:10:12,300
you want to follow along I give you

00:10:09,420 --> 00:10:13,790
about 10 seconds to clone that repo

00:10:12,300 --> 00:10:19,079
right there

00:10:13,790 --> 00:10:20,670
Francis I asked him to hold my

00:10:19,079 --> 00:10:27,509
microphone do you want a little

00:10:20,670 --> 00:10:29,459
microphone very good ok so I'm gonna

00:10:27,509 --> 00:10:32,360
press this button and hopefully this is

00:10:29,459 --> 00:10:32,360
not going to break everything

00:10:33,030 --> 00:10:36,110
[Music]

00:10:46,740 --> 00:10:51,960
that's just the wrong oops

00:10:54,360 --> 00:11:10,360
yeah can we turn the lights off for the

00:10:56,440 --> 00:11:15,090
stage oh my goodness I have no idea I

00:11:10,360 --> 00:11:19,560
didn't think about this color theme

00:11:15,090 --> 00:11:22,930
no I'm solarized light I'll probably do

00:11:19,560 --> 00:11:26,170
all right okay so get off to a good

00:11:22,930 --> 00:11:27,940
start here we're going to so I've just

00:11:26,170 --> 00:11:29,200
got a clone of the requestor here and

00:11:27,940 --> 00:11:32,560
the first thing I'm going to do is to

00:11:29,200 --> 00:11:35,410
disable the softly compression which

00:11:32,560 --> 00:11:37,930
with otherwise run and takes a quite a

00:11:35,410 --> 00:11:39,880
long time and what it takes about 10

00:11:37,930 --> 00:11:41,490
seconds per generation but it's going to

00:11:39,880 --> 00:11:43,330
stop us from doing anything useful so

00:11:41,490 --> 00:11:47,140
for the purposes of this demo I'm

00:11:43,330 --> 00:11:52,120
disabling it anyway next step is to

00:11:47,140 --> 00:11:54,850
replace I'm going to replace the imports

00:11:52,120 --> 00:11:57,010
of the film repository of course with

00:11:54,850 --> 00:11:58,630
the repository into which a repository

00:11:57,010 --> 00:12:00,340
passed into which I've found my first

00:11:58,630 --> 00:12:03,700
tree so it's just a simple fine command

00:12:00,340 --> 00:12:05,290
it's in the readme and so you can use

00:12:03,700 --> 00:12:07,180
that for your own showing if you have

00:12:05,290 --> 00:12:09,850
and the next thing we're going to run is

00:12:07,180 --> 00:12:11,440
when make generate cert which will

00:12:09,850 --> 00:12:17,770
generate themselves a self-signed

00:12:11,440 --> 00:12:20,680
certificate well anyway okay next up

00:12:17,770 --> 00:12:35,020
let's just take it for a spin and see if

00:12:20,680 --> 00:12:36,910
it all works loggers not printing it yes

00:12:35,020 --> 00:12:39,000
fun fact if you typed a bad idea into

00:12:36,910 --> 00:12:43,930
this prompted accept your certificates

00:12:39,000 --> 00:12:47,590
yes okay so it works perfect next up no

00:12:43,930 --> 00:12:49,810
that's that's not the demo that is not

00:12:47,590 --> 00:12:52,990
the demo okay so what I want to do here

00:12:49,810 --> 00:12:55,240
is show you how to use it a little bit

00:12:52,990 --> 00:12:55,710
so I'm gonna go into the index.html I'm

00:12:55,240 --> 00:12:58,290
going to add

00:12:55,710 --> 00:13:01,410
button here you're gonna say click me on

00:12:58,290 --> 00:13:05,280
the button and we're gonna also add a

00:13:01,410 --> 00:13:09,270
div which groups and we can write you

00:13:05,280 --> 00:13:11,520
let's call it a container and that's

00:13:09,270 --> 00:13:13,770
saving our index.html and then we're

00:13:11,520 --> 00:13:14,880
going to open the proto file so as I

00:13:13,770 --> 00:13:16,200
mentioned before all of this is just

00:13:14,880 --> 00:13:18,090
controlled via the proto file

00:13:16,200 --> 00:13:19,890
essentially and this boilerplate reaper

00:13:18,090 --> 00:13:20,850
comes with a empty profile essentially

00:13:19,890 --> 00:13:22,710
with just a little bit of boilerplate

00:13:20,850 --> 00:13:24,480
for you so you can just get down to the

00:13:22,710 --> 00:13:26,310
business of defining your types so I'm

00:13:24,480 --> 00:13:27,630
going to define a user here and I'm

00:13:26,310 --> 00:13:31,350
going to need some help from the

00:13:27,630 --> 00:13:33,060
audience to figure out all of the fields

00:13:31,350 --> 00:13:34,980
that we should add to this I'm going to

00:13:33,060 --> 00:13:38,160
add an ID I'm going to add a name and

00:13:34,980 --> 00:13:41,220
we're going to add a whoops you enter to

00:13:38,160 --> 00:13:47,010
age but what else should we put in the

00:13:41,220 --> 00:13:55,100
user type suggestions sorry email is a

00:13:47,010 --> 00:13:57,480
good one yeah okay like so space and

00:13:55,100 --> 00:14:00,390
we're also gonna add a another message

00:13:57,480 --> 00:14:01,740
type to and which we'll call user

00:14:00,390 --> 00:14:03,090
request and you'll soon become very

00:14:01,740 --> 00:14:05,700
obvious why that's called user request

00:14:03,090 --> 00:14:08,610
and of course that's going to take just

00:14:05,700 --> 00:14:12,000
an ID yes and then we're going to define

00:14:08,610 --> 00:14:18,360
the RPC method get user which takes a

00:14:12,000 --> 00:14:20,570
user request and returns a user like so

00:14:18,360 --> 00:14:26,270
boom and with that we've defined

00:14:20,570 --> 00:14:26,270
everything we need essentially to then

00:14:32,210 --> 00:14:37,080
[Music]

00:14:34,760 --> 00:14:39,900
that generates the profiles and also

00:14:37,080 --> 00:14:42,330
generates the and JavaScript and they go

00:14:39,900 --> 00:14:43,770
for this interface but anyway we haven't

00:14:42,330 --> 00:14:45,570
actually done anything in the

00:14:43,770 --> 00:14:47,340
implementation of either side yet so

00:14:45,570 --> 00:14:51,000
what's happened here is we've generated

00:14:47,340 --> 00:14:53,760
the server and all of a sudden my type a

00:14:51,000 --> 00:14:55,170
check at compile time fails because my

00:14:53,760 --> 00:14:57,090
back-end does no longer implement the

00:14:55,170 --> 00:15:00,570
interface that it's supposed to so I'm

00:14:57,090 --> 00:15:01,950
gonna take that interface function

00:15:00,570 --> 00:15:05,090
definition and we're gonna of course

00:15:01,950 --> 00:15:05,090
implement this on the backend

00:15:06,710 --> 00:15:15,390
and she do context is called context of

00:15:13,170 --> 00:15:18,030
course and we'll call the request

00:15:15,390 --> 00:15:21,780
request if you add some namespacing here

00:15:18,030 --> 00:15:23,880
because she didn't give it to us okay

00:15:21,780 --> 00:15:25,110
and then the backend is a very bad

00:15:23,880 --> 00:15:28,490
back-end because it only supports one

00:15:25,110 --> 00:15:34,740
user and so we're going to check if the

00:15:28,490 --> 00:15:36,980
request ID has it's the same as the only

00:15:34,740 --> 00:15:39,440
user that we support and if it isn't

00:15:36,980 --> 00:15:43,380
then we're going to return an error

00:15:39,440 --> 00:15:47,370
we're going to use the standard GOP see

00:15:43,380 --> 00:15:50,520
status error type of course I guess we

00:15:47,370 --> 00:15:52,230
are good GRC citizens and we're gonna

00:15:50,520 --> 00:15:54,440
return it not found which translates to

00:15:52,230 --> 00:15:58,230
HTTP 404 in case you're interested and

00:15:54,440 --> 00:16:00,690
say oh we can say user not found in this

00:15:58,230 --> 00:16:04,250
case so that's basically a correct way

00:16:00,690 --> 00:16:06,270
of saying invalid ID if you want however

00:16:04,250 --> 00:16:08,730
once we've gotten to this stage in the

00:16:06,270 --> 00:16:10,200
logic we know that the correct user has

00:16:08,730 --> 00:16:16,380
been specified so we're going to return

00:16:10,200 --> 00:16:18,660
which we want to return the user that we

00:16:16,380 --> 00:16:24,890
have money do you want two three four of

00:16:18,660 --> 00:16:27,530
course name I'm gonna use myself here

00:16:24,890 --> 00:16:33,680
and email

00:16:27,530 --> 00:16:37,650
I'll just put redacted because and Neil

00:16:33,680 --> 00:16:40,050
so that's a back-end done and then we go

00:16:37,650 --> 00:16:42,090
to the front end which this is all go

00:16:40,050 --> 00:16:44,040
for GS code but of course it just looks

00:16:42,090 --> 00:16:46,770
like oh because it is and you shouldn't

00:16:44,040 --> 00:16:48,480
pretend that it's anything else and now

00:16:46,770 --> 00:16:49,740
hopefully this is all going to look

00:16:48,480 --> 00:16:52,080
fantastic to you if you haven't used go

00:16:49,740 --> 00:16:54,600
for you jest before so if you cast your

00:16:52,080 --> 00:16:56,250
memory back to the index.html

00:16:54,600 --> 00:17:00,750
definitions that we made we've got a

00:16:56,250 --> 00:17:05,970
button that we can use and we're going

00:17:00,750 --> 00:17:10,080
to use the document dot get element by

00:17:05,970 --> 00:17:11,430
ID and get the ID of the button of

00:17:10,080 --> 00:17:14,550
course and then we're going to say that

00:17:11,430 --> 00:17:15,870
this is a type dome button can you

00:17:14,550 --> 00:17:17,670
imagine doing something like that in

00:17:15,870 --> 00:17:18,840
JavaScript that would be amazing but you

00:17:17,670 --> 00:17:19,559
can't of course because javascript is

00:17:18,840 --> 00:17:23,709
dynamic

00:17:19,559 --> 00:17:29,410
curses and so we're gonna get the

00:17:23,709 --> 00:17:31,929
container as well this is why we need to

00:17:29,410 --> 00:17:34,020
go to save us from JavaScript and we're

00:17:31,929 --> 00:17:37,150
gonna talk a little bit later about

00:17:34,020 --> 00:17:39,429
other things relating to the future of

00:17:37,150 --> 00:17:41,830
the web and go but not right now

00:17:39,429 --> 00:17:44,380
so with this button element we can add

00:17:41,830 --> 00:17:45,309
an event listener because we want to do

00:17:44,380 --> 00:17:46,419
something interesting when we're

00:17:45,309 --> 00:17:47,740
clicking on the button we're going to

00:17:46,419 --> 00:17:49,960
tie to the interest in your click we're

00:17:47,740 --> 00:17:51,250
going to disable that use capture which

00:17:49,960 --> 00:17:53,049
I don't even know what it does actually

00:17:51,250 --> 00:17:54,700
but we don't need it in this case and

00:17:53,049 --> 00:17:56,620
we're going to ignore the dome event

00:17:54,700 --> 00:17:58,179
input arguments to this function

00:17:56,620 --> 00:18:00,400
but essentially here we are this

00:17:58,179 --> 00:18:02,919
function is going to be called when we

00:18:00,400 --> 00:18:04,660
press the button so what we want to do

00:18:02,919 --> 00:18:06,490
of course we want to make a call to the

00:18:04,660 --> 00:18:07,870
backend get user and this is the

00:18:06,490 --> 00:18:10,240
function that we defined in the profile

00:18:07,870 --> 00:18:15,130
before of course and it takes a context

00:18:10,240 --> 00:18:16,780
you can use contexts with you can use a

00:18:15,130 --> 00:18:18,220
context with the timeout and stuff if

00:18:16,780 --> 00:18:20,230
you want to in here it will all work as

00:18:18,220 --> 00:18:21,700
expected but we're not gonna bother here

00:18:20,230 --> 00:18:26,020
because the backend should reply to us

00:18:21,700 --> 00:18:29,440
in good order the wrong namespace client

00:18:26,020 --> 00:18:31,270
user request of course ID and because we

00:18:29,440 --> 00:18:34,690
just implements the backend we know what

00:18:31,270 --> 00:18:36,370
to put here of course and we're gonna

00:18:34,690 --> 00:18:38,679
assign those to a user and an error

00:18:36,370 --> 00:18:42,880
because it can error and what do we do

00:18:38,679 --> 00:18:45,820
if we error like good go first we do if

00:18:42,880 --> 00:18:47,140
our Neil of course so we don't want to

00:18:45,820 --> 00:18:50,049
continue that flow but we do want to do

00:18:47,140 --> 00:18:51,429
something so let's write to the

00:18:50,049 --> 00:18:56,950
container you can set the text content

00:18:51,429 --> 00:18:58,270
to the content of the error however if

00:18:56,950 --> 00:19:00,340
we're here then we've got a user back

00:18:58,270 --> 00:19:01,630
from the the back end which is great

00:19:00,340 --> 00:19:03,880
news because that's what we wanted all

00:19:01,630 --> 00:19:08,350
along so then we're going to take the

00:19:03,880 --> 00:19:09,340
container and set text content to

00:19:08,350 --> 00:19:13,630
something more interesting

00:19:09,340 --> 00:19:17,130
we'll start with name and we're just

00:19:13,630 --> 00:19:17,130
gonna do some string concatenation here

00:19:20,889 --> 00:19:25,099
inch

00:19:22,020 --> 00:19:25,099
[Music]

00:19:26,119 --> 00:19:31,649
now age is actually an unsigned integer

00:19:29,850 --> 00:19:37,529
so I'm going to have to use this trick

00:19:31,649 --> 00:19:40,769
on you have to do integer conversion on

00:19:37,529 --> 00:19:50,249
that bad boy and there we go and then we

00:19:40,769 --> 00:19:57,809
also use a IDE with an ID and of course

00:19:50,249 --> 00:20:00,450
thank you sir we've got email see if I

00:19:57,809 --> 00:20:03,480
got that right no compilation errors

00:20:00,450 --> 00:20:07,649
okay now this looks great right however

00:20:03,480 --> 00:20:09,929
there is one little trivia about

00:20:07,649 --> 00:20:11,369
coffered yes and JavaScript in in

00:20:09,929 --> 00:20:12,929
generally you can't block on the main

00:20:11,369 --> 00:20:14,549
thread so this is going to be wrapped in

00:20:12,929 --> 00:20:16,739
a go routine in order for it to execute

00:20:14,549 --> 00:20:19,710
otherwise it will not work but you will

00:20:16,739 --> 00:20:21,929
get a runtime error just not all that

00:20:19,710 --> 00:20:23,100
useful so now that we've generated that

00:20:21,929 --> 00:20:25,820
we've got the back end we got the front

00:20:23,100 --> 00:20:27,919
end we're gonna run the server again and

00:20:25,820 --> 00:20:30,330
[Music]

00:20:27,919 --> 00:20:34,710
that has not worked so I'm going to

00:20:30,330 --> 00:20:36,450
assume that I was caching it yes my

00:20:34,710 --> 00:20:37,769
testing you would do that about 50% of

00:20:36,450 --> 00:20:40,409
the time so I was hoping is just gonna

00:20:37,769 --> 00:20:42,239
work anyway boom it worked right we

00:20:40,409 --> 00:20:47,519
click the button we got a request to the

00:20:42,239 --> 00:20:49,409
backend thank you

00:20:47,519 --> 00:20:51,480
if you want to you can be sneaky and

00:20:49,409 --> 00:20:52,830
look at the information that's been sent

00:20:51,480 --> 00:20:54,899
here but that's that's not what I want

00:20:52,830 --> 00:20:58,609
to do very good ok that's actually right

00:20:54,899 --> 00:21:01,200
on cue I just wanted to show as well

00:20:58,609 --> 00:21:04,470
this is great right but what happens if

00:21:01,200 --> 00:21:06,779
we give the wrong ID and as you know we

00:21:04,470 --> 00:21:09,239
said to the backend that it should

00:21:06,779 --> 00:21:13,859
return a nice G RPC error but how will

00:21:09,239 --> 00:21:16,049
the front end handle that and yes so it

00:21:13,859 --> 00:21:17,399
gives us a not found error and if you

00:21:16,049 --> 00:21:18,989
used to go to your PC you will know this

00:21:17,399 --> 00:21:20,609
is exactly what I go do busy error looks

00:21:18,989 --> 00:21:23,519
like however this is not all that

00:21:20,609 --> 00:21:28,950
interesting because in addition to this

00:21:23,519 --> 00:21:32,669
we can do status from error --air and

00:21:28,950 --> 00:21:35,020
get access to things like the the

00:21:32,669 --> 00:21:38,740
enumeration itself

00:21:35,020 --> 00:21:43,930
stiva code we can get st that message

00:21:38,740 --> 00:21:45,940
and also other trailers so actually yeah

00:21:43,930 --> 00:21:47,260
we probably have no okay I'm gonna skip

00:21:45,940 --> 00:21:50,860
that because I don't think we have time

00:21:47,260 --> 00:21:58,240
and so let's go back to the presentation

00:21:50,860 --> 00:22:01,590
and yeah so alright thank you much so so

00:21:58,240 --> 00:22:07,210
there we go um yeah this is the wrong

00:22:01,590 --> 00:22:09,910
window actually there we go so what

00:22:07,210 --> 00:22:11,620
we've learned today is we've seen that

00:22:09,910 --> 00:22:14,020
we can take a simple problem of

00:22:11,620 --> 00:22:16,690
interface like definition we can

00:22:14,020 --> 00:22:19,240
generate a front end and back end and

00:22:16,690 --> 00:22:21,550
simply in to implement the back end

00:22:19,240 --> 00:22:23,380
implement the front end and have easy

00:22:21,550 --> 00:22:25,180
communications between a gopher just

00:22:23,380 --> 00:22:28,780
rent and go for just back and I go back

00:22:25,180 --> 00:22:30,100
end indeed this is just an example of

00:22:28,780 --> 00:22:32,020
what you can do of course you can

00:22:30,100 --> 00:22:34,870
replace the go back ng RPC service with

00:22:32,020 --> 00:22:36,370
any other G RPC service and I encourage

00:22:34,870 --> 00:22:39,070
you to look at the boilerplate repo and

00:22:36,370 --> 00:22:41,560
on the official repo which will be

00:22:39,070 --> 00:22:43,120
linked on my talks page there's all

00:22:41,560 --> 00:22:46,990
kinds of examples about using this in

00:22:43,120 --> 00:22:48,430
different scenarios and hopefully the

00:22:46,990 --> 00:22:49,810
next time you want to either go for JSF

00:22:48,430 --> 00:22:54,000
which should be soon because it's great

00:22:49,810 --> 00:22:58,320
you can try look at using my library and

00:22:54,000 --> 00:23:02,110
okay I'd like to thank first time and

00:22:58,320 --> 00:23:05,020
they don't organize errs I'd like to

00:23:02,110 --> 00:23:07,870
give thanks to improbable who created

00:23:05,020 --> 00:23:09,550
the Geo PC web client implementation

00:23:07,870 --> 00:23:10,930
which is really nice especially McHale

00:23:09,550 --> 00:23:13,720
Bukowski who's been doing great

00:23:10,930 --> 00:23:16,330
contributions to the go DF PC ecosystem

00:23:13,720 --> 00:23:18,100
I'd like to thank Richard Musial for

00:23:16,330 --> 00:23:20,530
crating covered yes he is currently

00:23:18,100 --> 00:23:23,620
working on a wesen compilation target

00:23:20,530 --> 00:23:25,090
for go which is extremely exciting if

00:23:23,620 --> 00:23:27,010
you haven't checked that out yet you

00:23:25,090 --> 00:23:28,240
should google it hopefully that will

00:23:27,010 --> 00:23:29,890
come to fruition at some point too and I

00:23:28,240 --> 00:23:31,690
can't imagine anyone better than Richard

00:23:29,890 --> 00:23:35,050
to be working on that kind of thing

00:23:31,690 --> 00:23:37,450
Dmitriy is relative who's appears to be

00:23:35,050 --> 00:23:40,240
the main maintainer of gorgeous it gets

00:23:37,450 --> 00:23:41,710
updates every major go version or so

00:23:40,240 --> 00:23:43,210
because there's all kinds of new things

00:23:41,710 --> 00:23:44,680
in the standard library need to make

00:23:43,210 --> 00:23:47,560
sure that it's compatible with gorgeous

00:23:44,680 --> 00:23:48,310
and when they go for GSM community

00:23:47,560 --> 00:23:50,350
engine

00:23:48,310 --> 00:23:53,020
is great you should check out the slack

00:23:50,350 --> 00:23:54,730
Channel honest like a girlfriend yes I'd

00:23:53,020 --> 00:23:57,970
like to thank Travis Klein who gave me

00:23:54,730 --> 00:24:01,840
the idea to implement my own WebSocket

00:23:57,970 --> 00:24:03,460
streaming proxy from his proxy which is

00:24:01,840 --> 00:24:04,990
for the GOP C gateway so if you're used

00:24:03,460 --> 00:24:06,340
in gear pgj forget where you should

00:24:04,990 --> 00:24:11,020
check out that library as well it's it

00:24:06,340 --> 00:24:13,270
allows you to do streaming in with the

00:24:11,020 --> 00:24:16,390
GOP C gateway and also Paul Jolie who

00:24:13,270 --> 00:24:17,920
has pushed me to present my own work and

00:24:16,390 --> 00:24:18,280
who without whom I wouldn't be here

00:24:17,920 --> 00:24:20,140
today

00:24:18,280 --> 00:24:21,550
and last but not least I'd like to thank

00:24:20,140 --> 00:24:23,410
you for listening to my talk I hope you

00:24:21,550 --> 00:24:36,280
enjoyed it and I'll take any questions

00:24:23,410 --> 00:24:38,670
you might have now thank you okay no

00:24:36,280 --> 00:24:38,670
questions

00:24:42,210 --> 00:24:48,869
Thank You Francis oh yeah you should

00:24:47,070 --> 00:24:49,950
check out the taco features tons of

00:24:48,869 --> 00:24:56,149
links in there you can start playing

00:24:49,950 --> 00:24:56,149
around with it yourself if you like yes

00:25:03,619 --> 00:25:11,070
yeah so um a longer version sorry yes

00:25:07,889 --> 00:25:12,629
the question was it appears that girl

00:25:11,070 --> 00:25:15,299
4GS generates large JavaScript files

00:25:12,629 --> 00:25:16,289
essentially this is true and a longer

00:25:15,299 --> 00:25:17,730
version of my talk would have talked a

00:25:16,289 --> 00:25:18,869
little bit about how to work around that

00:25:17,730 --> 00:25:21,330
but you didn't it was not as how I

00:25:18,869 --> 00:25:23,759
disabled the softly in compression while

00:25:21,330 --> 00:25:25,409
I was doing that presentation this

00:25:23,759 --> 00:25:27,059
hopefully compression introduces

00:25:25,409 --> 00:25:28,440
something like an 80% compression rate

00:25:27,059 --> 00:25:30,210
which is it's really nice it will bring

00:25:28,440 --> 00:25:32,129
the two megabytes down to about 300

00:25:30,210 --> 00:25:34,320
kilobytes which is still quite large and

00:25:32,129 --> 00:25:35,519
in general when you're working with go

00:25:34,320 --> 00:25:37,080
for Jess you have to be a little bit

00:25:35,519 --> 00:25:41,220
careful about what packages you import

00:25:37,080 --> 00:25:44,039
which is a bit unfortunate but if you I

00:25:41,220 --> 00:25:46,200
mean 2 megabytes in this case is

00:25:44,039 --> 00:25:48,929
actually probably an example of a small

00:25:46,200 --> 00:25:51,090
file I know the perk keep generated file

00:25:48,929 --> 00:25:54,440
is like nine megabytes which is awful

00:25:51,090 --> 00:25:57,330
and it's it's probably in my opinion

00:25:54,440 --> 00:26:01,139
what holds back go for the adoption the

00:25:57,330 --> 00:26:04,619
most but as I said with gzip compression

00:26:01,139 --> 00:26:05,820
which softly is essentially you can you

00:26:04,619 --> 00:26:08,759
can get it down to much more manageable

00:26:05,820 --> 00:26:10,830
file sizes and in this one in particular

00:26:08,759 --> 00:26:13,909
will be about 300 kilobytes which is

00:26:10,830 --> 00:26:17,659
acceptable I think for most people

00:26:13,909 --> 00:26:17,659
yes Thank You Francis

00:26:25,330 --> 00:26:30,100
the question is world webassembly

00:26:27,009 --> 00:26:33,100
makeover days irrelevant and my personal

00:26:30,100 --> 00:26:36,399
answer is I hope so and I hope we'll be

00:26:33,100 --> 00:26:38,320
able to just write girl code and produce

00:26:36,399 --> 00:26:40,629
a beautiful web assembly code with none

00:26:38,320 --> 00:26:44,620
of the JavaScript rubbish frankly that

00:26:40,629 --> 00:26:47,110
we have to deal with today and yeah I'm

00:26:44,620 --> 00:26:48,370
eagerly awaiting the first beta when

00:26:47,110 --> 00:26:50,740
when Richard if you're watching this

00:26:48,370 --> 00:26:57,190
Richard um I'm like I'm your biggest fan

00:26:50,740 --> 00:26:58,280
when it's ready I am ready okay thank

00:26:57,190 --> 00:27:05,300
you

00:26:58,280 --> 00:27:05,300

YouTube URL: https://www.youtube.com/watch?v=R2HaxH7Et64


