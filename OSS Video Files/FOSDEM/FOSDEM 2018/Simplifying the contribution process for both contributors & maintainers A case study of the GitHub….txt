Title: Simplifying the contribution process for both contributors & maintainers A case study of the GitHubâ€¦
Publication date: 2018-02-04
Playlist: FOSDEM 2018
Description: 
	Simplifying the contribution process for both contributors & maintainers A case study of the GitHub integration in EasyBuild
by Kenneth Hoste

At: FOSDEM 2018
Room: H.2213
Scheduled start: 2018-02-03 14:10:00+01
Captions: 
	00:00:04,810 --> 00:00:08,440
alright alright thanks everybody

00:00:07,210 --> 00:00:10,210
delighted to have you here

00:00:08,440 --> 00:00:12,990
Kenneth host Oh will be speaking to us

00:00:10,210 --> 00:00:14,830
today he's a PhD from Ghent University

00:00:12,990 --> 00:00:17,950
works in the high performance computing

00:00:14,830 --> 00:00:20,440
beam there he also is the maintainer of

00:00:17,950 --> 00:00:24,630
easy build a build system for high /

00:00:20,440 --> 00:00:24,630
high performance computing deployments

00:00:28,320 --> 00:00:33,430
to attend at the George all right think

00:00:31,120 --> 00:00:34,810
much for the introduction I should say

00:00:33,430 --> 00:00:37,780
I'm not the only maintainer of visible

00:00:34,810 --> 00:00:39,400
there's more than one which is good so

00:00:37,780 --> 00:00:41,500
what I want to talk to you today talk

00:00:39,400 --> 00:00:43,930
about today is the work that we have

00:00:41,500 --> 00:00:46,170
done an easy build to make it easy for

00:00:43,930 --> 00:00:48,550
people to contribute back to easy build

00:00:46,170 --> 00:00:50,770
and now explain why we're doing that and

00:00:48,550 --> 00:00:53,650
how we're doing it so first off I'm sure

00:00:50,770 --> 00:00:57,000
most people here know what github is but

00:00:53,650 --> 00:00:59,380
I felt obliged to have a slide on it

00:00:57,000 --> 00:01:00,910
it's basically the place where

00:00:59,380 --> 00:01:03,790
open-source is being developed right now

00:01:00,910 --> 00:01:07,000
it's absolutely huge there's 24 million

00:01:03,790 --> 00:01:09,700
users over 60 million repositories out

00:01:07,000 --> 00:01:11,170
there and they recently crossed the

00:01:09,700 --> 00:01:13,210
boundary of a hundred million merged

00:01:11,170 --> 00:01:15,490
pull requests so that's absolutely

00:01:13,210 --> 00:01:18,700
amazing it also has an issue tracker

00:01:15,490 --> 00:01:20,770
code review stuff wiki websites a whole

00:01:18,700 --> 00:01:23,860
bunch of things on the meet of github

00:01:20,770 --> 00:01:26,200
there's get which is the version control

00:01:23,860 --> 00:01:29,460
system that Lena Stovall's created so

00:01:26,200 --> 00:01:31,840
the same guy behind the Linux kernel

00:01:29,460 --> 00:01:33,460
it's certainly the most popular version

00:01:31,840 --> 00:01:36,280
control system today there have been

00:01:33,460 --> 00:01:37,510
many others in the past and this is

00:01:36,280 --> 00:01:39,070
what's on the neat gate so it was

00:01:37,510 --> 00:01:40,960
designed to have very good performance

00:01:39,070 --> 00:01:43,450
even for very large projects like the

00:01:40,960 --> 00:01:45,670
Linux kernel to support nonlinear

00:01:43,450 --> 00:01:47,350
development disability workflow working

00:01:45,670 --> 00:01:49,690
of line and then getting back on line to

00:01:47,350 --> 00:01:52,030
share your work and it was also designed

00:01:49,690 --> 00:01:54,900
not to be like the old CVS system that

00:01:52,030 --> 00:01:57,220
was one of the explicit design goals

00:01:54,900 --> 00:02:01,930
internally it works a little bit like

00:01:57,220 --> 00:02:03,190
blockchains before bak chain was cool so

00:02:01,930 --> 00:02:04,750
that they have that going all the

00:02:03,190 --> 00:02:06,220
hashing and all that stuff going on is

00:02:04,750 --> 00:02:08,860
pretty much also what's going on in the

00:02:06,220 --> 00:02:10,899
blockchain so most of you will be

00:02:08,860 --> 00:02:12,400
familiar hopefully with the get workflow

00:02:10,899 --> 00:02:14,379
a little bit even if you're not that's

00:02:12,400 --> 00:02:16,900
fine but sort of the point of the talk

00:02:14,379 --> 00:02:18,790
so don't worry so typically what you do

00:02:16,900 --> 00:02:22,989
is you edit a file if you only use Emacs

00:02:18,790 --> 00:02:24,640
you can you then go to get you create a

00:02:22,989 --> 00:02:27,069
branch and you check out the branch you

00:02:24,640 --> 00:02:29,050
want to commit your work by staging the

00:02:27,069 --> 00:02:31,510
file would get add and using git commit

00:02:29,050 --> 00:02:33,700
and hopefully useful message to explain

00:02:31,510 --> 00:02:35,920
what you did in this and these changes

00:02:33,700 --> 00:02:37,840
and then you typically push it out to a

00:02:35,920 --> 00:02:39,879
remote repository in general we just

00:02:37,840 --> 00:02:43,540
typically get help so that's where you

00:02:39,879 --> 00:02:45,250
share your work with others that was

00:02:43,540 --> 00:02:47,110
very high level what what

00:02:45,250 --> 00:02:48,190
what get is now I want to go back a

00:02:47,110 --> 00:02:51,190
little bit in history and look at

00:02:48,190 --> 00:02:54,640
version control this is not my idea to

00:02:51,190 --> 00:02:56,200
do this this was done in a blog post on

00:02:54,640 --> 00:02:58,480
get Brian on comm as well and basically

00:02:56,200 --> 00:03:00,100
stole their idea and expanded on it a

00:02:58,480 --> 00:03:03,310
little bit so what they are doing is

00:03:00,100 --> 00:03:05,950
looking at the search traffic via Google

00:03:03,310 --> 00:03:08,470
Trends for all these version control

00:03:05,950 --> 00:03:10,330
systems and a hundred percent here means

00:03:08,470 --> 00:03:14,500
the highest search volume we will be

00:03:10,330 --> 00:03:16,090
seeing in this graph so CVS was very

00:03:14,500 --> 00:03:18,310
popular for a long time but since

00:03:16,090 --> 00:03:20,560
certainly 2004 it has declined the low

00:03:18,310 --> 00:03:22,870
in popularity the polarity of course

00:03:20,560 --> 00:03:25,720
because of other version control systems

00:03:22,870 --> 00:03:27,700
coming up like subversion like also

00:03:25,720 --> 00:03:31,060
mercurial so all of these names are

00:03:27,700 --> 00:03:34,840
hopefully at least familiar to you and

00:03:31,060 --> 00:03:37,840
then gate came in and get the search

00:03:34,840 --> 00:03:39,910
volume of get quickly went up and the

00:03:37,840 --> 00:03:41,770
others mainly subversion mercurial

00:03:39,910 --> 00:03:43,360
suffered from that basically so kid

00:03:41,770 --> 00:03:45,550
became a lot popular lot more popular

00:03:43,360 --> 00:03:47,350
and subversion member carrillo are like

00:03:45,550 --> 00:03:52,330
a 10 percent in terms of search volume

00:03:47,350 --> 00:03:54,280
and Google compared to get now why did

00:03:52,330 --> 00:03:56,440
it become so popular what happened there

00:03:54,280 --> 00:03:58,870
is it technically or better ores there

00:03:56,440 --> 00:04:01,030
are also other factors so get started

00:03:58,870 --> 00:04:04,000
here that was like technicals get 1.0

00:04:01,030 --> 00:04:06,730
2005 for a long time it was okay going

00:04:04,000 --> 00:04:08,560
up a little bit but what's this spike

00:04:06,730 --> 00:04:10,570
all of a sudden so something happened

00:04:08,560 --> 00:04:13,959
there that was basically github so

00:04:10,570 --> 00:04:16,060
github launched publicly April 2008

00:04:13,959 --> 00:04:21,430
which is here and then shortly after you

00:04:16,060 --> 00:04:22,840
see the spike on interest and get so at

00:04:21,430 --> 00:04:25,420
least that that's my conclusion from

00:04:22,840 --> 00:04:27,160
this you can never be sure but let's see

00:04:25,420 --> 00:04:30,340
there's another spike here so this was a

00:04:27,160 --> 00:04:31,930
news item like Linda Stovall the other

00:04:30,340 --> 00:04:33,880
gets her pull request to the Linux

00:04:31,930 --> 00:04:35,440
kernel and basically said no I don't

00:04:33,880 --> 00:04:37,120
want to do github pull request because

00:04:35,440 --> 00:04:38,500
they're doing it totally wrong send me a

00:04:37,120 --> 00:04:40,480
patch fire mail and that's how we work

00:04:38,500 --> 00:04:42,760
in the Linux kernel a lot of people were

00:04:40,480 --> 00:04:44,830
surprised and certainly for me that's

00:04:42,760 --> 00:04:46,210
what I learned that Linda's Torvalds was

00:04:44,830 --> 00:04:49,450
the designer of gate I didn't know that

00:04:46,210 --> 00:04:51,669
before this so he he designed gate which

00:04:49,450 --> 00:04:56,169
is underneath github but he doesn't get

00:04:51,669 --> 00:04:57,460
hurt it was a bit painful so the

00:04:56,169 --> 00:04:58,749
interesting gate seems to follow the

00:04:57,460 --> 00:05:02,409
interesting get help

00:04:58,749 --> 00:05:04,269
that's what I get from this graph and so

00:05:02,409 --> 00:05:07,059
personable crude oil are like one-tenth

00:05:04,269 --> 00:05:09,039
of interests if you want to put it like

00:05:07,059 --> 00:05:12,909
that in terms of search for me there's

00:05:09,039 --> 00:05:14,319
no the small peak here it is like the

00:05:12,909 --> 00:05:17,289
hundred percent the highest thirst

00:05:14,319 --> 00:05:19,449
volumes they have seen for get up until

00:05:17,289 --> 00:05:21,969
now can anyone guess what happened here

00:05:19,449 --> 00:05:22,809
this is pretty recent this is like first

00:05:21,969 --> 00:05:30,489
time last year

00:05:22,809 --> 00:05:33,009
yeah sorry the security issue or I could

00:05:30,489 --> 00:05:35,409
read that actually what what I found was

00:05:33,009 --> 00:05:37,629
like the tech companies complaining

00:05:35,409 --> 00:05:41,829
about Trump his immigration ban and get

00:05:37,629 --> 00:05:43,179
up was one of them if this is actually

00:05:41,829 --> 00:05:45,039
the peak I'm not sure many people were

00:05:43,179 --> 00:05:46,539
like gets up what get what get actually

00:05:45,039 --> 00:05:50,829
on the started searching for it maybe

00:05:46,539 --> 00:05:52,959
that was it so it gets popular thanks to

00:05:50,829 --> 00:05:54,519
get help well there seems to be a

00:05:52,959 --> 00:05:56,799
correlation but we can never really be

00:05:54,519 --> 00:05:59,559
sure maybe there was even some kind of

00:05:56,799 --> 00:06:01,149
feedback loop so get cost more

00:05:59,559 --> 00:06:03,069
interesting a github cause more

00:06:01,149 --> 00:06:04,779
interesting gate which in turn made gets

00:06:03,069 --> 00:06:07,089
help more popular because people had to

00:06:04,779 --> 00:06:08,800
collaborate maybe that was it or maybe

00:06:07,089 --> 00:06:10,269
it's just because github has given a

00:06:08,800 --> 00:06:12,399
name and Google Trends you cannot really

00:06:10,269 --> 00:06:15,069
pull those apart so I'm just talking

00:06:12,399 --> 00:06:16,899
 but I don't know it's certainly

00:06:15,069 --> 00:06:19,239
the most popular version control system

00:06:16,899 --> 00:06:21,939
out there today so I don't think anyone

00:06:19,239 --> 00:06:23,319
will contest that so you'll basically

00:06:21,939 --> 00:06:25,300
have to learn it if you want to

00:06:23,319 --> 00:06:28,169
contribute to an open-source project

00:06:25,300 --> 00:06:30,459
you're kind of stuck to it everybody is

00:06:28,169 --> 00:06:33,459
so you'll have to learn it you have to

00:06:30,459 --> 00:06:36,129
learn how to use it right now that's a

00:06:33,459 --> 00:06:38,769
bit of a pain point and it has a pretty

00:06:36,129 --> 00:06:41,079
steep learning curve this is the the top

00:06:38,769 --> 00:06:43,959
three questions on Stack Overflow and

00:06:41,079 --> 00:06:45,519
the tag we'd get now the questions here

00:06:43,959 --> 00:06:46,959
are not too surprising like how do you

00:06:45,519 --> 00:06:50,229
undo commit it's not really

00:06:46,959 --> 00:06:52,149
straightforward even from the help how

00:06:50,229 --> 00:06:55,389
do I delete the git branch both on your

00:06:52,149 --> 00:06:56,829
machine and on github how do you do that

00:06:55,389 --> 00:06:58,959
what's the difference between getting

00:06:56,829 --> 00:07:01,209
git pull and get fetch sounds like the

00:06:58,959 --> 00:07:03,249
same but it's very different this got a

00:07:01,209 --> 00:07:05,349
lot of views so this this has six

00:07:03,249 --> 00:07:09,160
million views now in comparison that how

00:07:05,349 --> 00:07:11,720
to exit vim only has 1.3 million views

00:07:09,160 --> 00:07:13,790
so people seem to have a lot more

00:07:11,720 --> 00:07:15,650
problems with this than exited film so

00:07:13,790 --> 00:07:17,480
there seems to be an issue there this

00:07:15,650 --> 00:07:20,030
was a recent tweet from a guy that works

00:07:17,480 --> 00:07:22,790
at github I'd had to Google something to

00:07:20,030 --> 00:07:24,230
undo a last commit so this stuff is hard

00:07:22,790 --> 00:07:27,110
I mean even people that get a printed

00:07:24,230 --> 00:07:30,590
heart I hope he was okay with me using

00:07:27,110 --> 00:07:33,290
the screenshot of his tweet and this is

00:07:30,590 --> 00:07:33,760
on Quora so one guy asked just in

00:07:33,290 --> 00:07:36,050
general

00:07:33,760 --> 00:07:38,180
why is gets so hard to learn and then

00:07:36,050 --> 00:07:40,310
maybe people were replying so many

00:07:38,180 --> 00:07:41,810
important people at important positions

00:07:40,310 --> 00:07:44,810
and this guy said it's the Perot of

00:07:41,810 --> 00:07:48,650
source control system and that's not a

00:07:44,810 --> 00:07:52,220
good thing so yeah it's difficult also

00:07:48,650 --> 00:07:53,780
get is not for everybody the main target

00:07:52,220 --> 00:07:55,010
audience is software developers people

00:07:53,780 --> 00:07:56,660
that develop software have to work

00:07:55,010 --> 00:08:00,620
together in teams to develop software

00:07:56,660 --> 00:08:02,480
that makes it very easy to do that was

00:08:00,620 --> 00:08:05,990
designed for these kind of people now a

00:08:02,480 --> 00:08:07,580
lot of computer people to use a term

00:08:05,990 --> 00:08:09,110
like this don't need it for the daily

00:08:07,580 --> 00:08:11,210
work if you're not really developing

00:08:09,110 --> 00:08:15,620
software you don't really need gate so

00:08:11,210 --> 00:08:17,540
why do you have to learn it some don't

00:08:15,620 --> 00:08:19,250
have the time to learn it others try to

00:08:17,540 --> 00:08:21,680
learn it but can't seem to figure it out

00:08:19,250 --> 00:08:23,300
and not everybody knows somebody that

00:08:21,680 --> 00:08:24,380
can help them because that has been very

00:08:23,300 --> 00:08:26,360
helpful for me certain you're gonna

00:08:24,380 --> 00:08:28,480
learn get you have them get expert in

00:08:26,360 --> 00:08:31,280
your office and whatever you are stuck

00:08:28,480 --> 00:08:34,700
and you can ask somebody is it ok to do

00:08:31,280 --> 00:08:36,140
get me set hard that's very useful if

00:08:34,700 --> 00:08:38,750
you don't then maybe you shoot yourself

00:08:36,140 --> 00:08:41,090
in the foot and you learn even less of

00:08:38,750 --> 00:08:42,410
gate than you should and some people

00:08:41,090 --> 00:08:44,060
don't want to learn it and that's ok if

00:08:42,410 --> 00:08:48,890
you don't want to it and should feel

00:08:44,060 --> 00:08:50,660
forced because it's so hard it can and

00:08:48,890 --> 00:08:52,970
many people don't need it it can be a

00:08:50,660 --> 00:08:54,640
major hurdle for contributors so people

00:08:52,970 --> 00:08:57,290
want to contribute back to your project

00:08:54,640 --> 00:08:58,880
but they have to learn gate first to do

00:08:57,290 --> 00:09:01,010
that and many people don't write this

00:08:58,880 --> 00:09:02,420
and then maybe you'll just lose the

00:09:01,010 --> 00:09:04,570
contribution you'll say yeah yeah

00:09:02,420 --> 00:09:06,920
whatever

00:09:04,570 --> 00:09:08,270
so the stuff that people have to do to

00:09:06,920 --> 00:09:10,250
contribute back is already quite

00:09:08,270 --> 00:09:11,810
substantial right so they have to know

00:09:10,250 --> 00:09:14,120
your project a little bit they have to

00:09:11,810 --> 00:09:16,460
probably know the problem programming

00:09:14,120 --> 00:09:18,230
language you used or maybe use multiple

00:09:16,460 --> 00:09:19,760
ones in the same project they have to

00:09:18,230 --> 00:09:22,240
know the code base a little bit have to

00:09:19,760 --> 00:09:24,160
get around to find their way

00:09:22,240 --> 00:09:25,779
there are several project specific

00:09:24,160 --> 00:09:29,019
policies and expectations that they have

00:09:25,779 --> 00:09:30,519
to be aware of like the normal get

00:09:29,019 --> 00:09:32,440
workflow for that specific project

00:09:30,519 --> 00:09:34,750
project what do I have to test what is

00:09:32,440 --> 00:09:38,470
being tested by reviewers and maintained

00:09:34,750 --> 00:09:40,450
there's code style rules just how do i

00:09:38,470 --> 00:09:42,310
implement the bug what what do you

00:09:40,450 --> 00:09:45,670
really need to worry about backwards

00:09:42,310 --> 00:09:47,589
compatibility or or not all of that

00:09:45,670 --> 00:09:49,870
stuff and then on on top of this they

00:09:47,589 --> 00:09:52,149
have to learn gate and get up as well to

00:09:49,870 --> 00:09:54,760
even be able to do the right pull

00:09:52,149 --> 00:09:57,339
request the way the maintainer actually

00:09:54,760 --> 00:09:59,260
want to see contributions so the initial

00:09:57,339 --> 00:10:01,480
effort for people new to your project is

00:09:59,260 --> 00:10:03,550
huge and it's very at least in my

00:10:01,480 --> 00:10:06,450
experience often underestimated they

00:10:03,550 --> 00:10:09,220
need to do need to know all this stuff

00:10:06,450 --> 00:10:10,630
before even creating a contribution and

00:10:09,220 --> 00:10:14,649
then on top of that get and get help as

00:10:10,630 --> 00:10:18,399
well I of course documentation sorry we

00:10:14,649 --> 00:10:20,170
go back documentation here can be very

00:10:18,399 --> 00:10:22,810
useful but it's not sufficient for

00:10:20,170 --> 00:10:24,760
everybody so people don't really always

00:10:22,810 --> 00:10:28,209
read documentation at least not the way

00:10:24,760 --> 00:10:32,020
it was intended to be read so it's not

00:10:28,209 --> 00:10:34,600
enough so a little bit about easy build

00:10:32,020 --> 00:10:36,640
just have some context here it's a

00:10:34,600 --> 00:10:39,339
framework to install scientific software

00:10:36,640 --> 00:10:41,620
on HPC systems which is not easy it's

00:10:39,339 --> 00:10:43,060
not like installing gzip with configure

00:10:41,620 --> 00:10:45,339
make make installs a lot more complex

00:10:43,060 --> 00:10:49,450
than that and partially because of the

00:10:45,339 --> 00:10:51,310
scientists writing software it uses easy

00:10:49,450 --> 00:10:53,459
to lose this easy config file as recipes

00:10:51,310 --> 00:10:55,300
and I'll show one so you have a

00:10:53,459 --> 00:10:57,220
reasonable idea of what it does it's

00:10:55,300 --> 00:10:58,959
written in Python syntax and it's

00:10:57,220 --> 00:11:01,510
basically key value definitions

00:10:58,959 --> 00:11:03,640
it tells easy build which is a which

00:11:01,510 --> 00:11:07,089
version of the software to install and

00:11:03,640 --> 00:11:08,800
so on one of the most common

00:11:07,089 --> 00:11:11,050
contributions we get to easy build as

00:11:08,800 --> 00:11:12,880
people add a new recipe a new easy

00:11:11,050 --> 00:11:15,370
config file for a new software version

00:11:12,880 --> 00:11:17,050
for example or build with a different

00:11:15,370 --> 00:11:18,940
compiler or anything like this because

00:11:17,050 --> 00:11:21,730
it's quite easy to do so because you can

00:11:18,940 --> 00:11:23,890
use an existing easy config file copy it

00:11:21,730 --> 00:11:26,260
change it a little bit and then give it

00:11:23,890 --> 00:11:28,029
back if it works for you and that may be

00:11:26,260 --> 00:11:31,420
a very valuable contribution even though

00:11:28,029 --> 00:11:34,029
it's a little bit of work people it's

00:11:31,420 --> 00:11:35,230
like a statement this works for me so it

00:11:34,029 --> 00:11:37,029
probably also works for you

00:11:35,230 --> 00:11:39,940
and that's a very valuable contribution

00:11:37,029 --> 00:11:41,290
we would like to see many of these now

00:11:39,940 --> 00:11:45,190
to learn more about these people to have

00:11:41,290 --> 00:11:46,930
a talk in the HPC defin tomorrow that

00:11:45,190 --> 00:11:48,100
compares easy build with other tools so

00:11:46,930 --> 00:11:50,410
if you want to learn more about this

00:11:48,100 --> 00:11:51,790
build you can come there if you can wake

00:11:50,410 --> 00:11:56,470
up early enough it's the first talk of

00:11:51,790 --> 00:11:59,380
the day so how does easy will work well

00:11:56,470 --> 00:12:01,089
you do a B which is the main command you

00:11:59,380 --> 00:12:04,149
give it in the name of an easy config

00:12:01,089 --> 00:12:05,740
file we'll pick up that file power set

00:12:04,149 --> 00:12:07,839
see what actually wants to be installed

00:12:05,740 --> 00:12:10,139
to do the installation it completes and

00:12:07,839 --> 00:12:12,760
then the scientists can use the software

00:12:10,139 --> 00:12:15,130
so it consumes these easy config files

00:12:12,760 --> 00:12:16,750
that look a little bit like this now I'm

00:12:15,130 --> 00:12:18,399
not going to go into much detail here

00:12:16,750 --> 00:12:20,500
but one thing I do want to show is that

00:12:18,399 --> 00:12:22,510
it's very easy to tweak so this is the

00:12:20,500 --> 00:12:25,029
software version you can just bump it if

00:12:22,510 --> 00:12:26,350
there's a new software version and give

00:12:25,029 --> 00:12:28,300
us back that easy country files the

00:12:26,350 --> 00:12:30,940
installation worked you can change the

00:12:28,300 --> 00:12:32,470
compiler tool chain that was used to

00:12:30,940 --> 00:12:34,149
install the software maybe tweak the

00:12:32,470 --> 00:12:36,399
dependency is a new version of Python

00:12:34,149 --> 00:12:40,269
all of these things are quite trivial to

00:12:36,399 --> 00:12:43,860
to change and then maybe you want to

00:12:40,269 --> 00:12:43,860
contribute it back to easy but hopefully

00:12:44,760 --> 00:12:49,839
so to contribute back you value only

00:12:48,250 --> 00:12:51,910
you'll need to get help accounts because

00:12:49,839 --> 00:12:53,920
the repository the easy bug repository

00:12:51,910 --> 00:12:55,690
lives on github if you don't have that

00:12:53,920 --> 00:12:59,140
you'll need to create it you'll need to

00:12:55,690 --> 00:13:01,089
fork our easy conflicts repository into

00:12:59,140 --> 00:13:03,430
your github account so you have some

00:13:01,089 --> 00:13:07,180
place to contribute from and then you

00:13:03,430 --> 00:13:08,769
clone the repository this is quite easy

00:13:07,180 --> 00:13:11,230
you only have to do this once these

00:13:08,769 --> 00:13:13,540
three steps right and then you start

00:13:11,230 --> 00:13:15,699
working with git so again you create a

00:13:13,540 --> 00:13:18,310
branch you add the easy config file

00:13:15,699 --> 00:13:19,870
which you had to put in the right place

00:13:18,310 --> 00:13:22,269
and give the right name first you do to

00:13:19,870 --> 00:13:25,269
commit you push it to origin which is

00:13:22,269 --> 00:13:26,589
probably your fork on github and then

00:13:25,269 --> 00:13:28,029
you go to github if you're quick enough

00:13:26,589 --> 00:13:30,459
you get the green button you can click

00:13:28,029 --> 00:13:33,610
to make the contribution which will give

00:13:30,459 --> 00:13:36,100
you this screen and then here come a

00:13:33,610 --> 00:13:38,110
little bit of policy usable policy comes

00:13:36,100 --> 00:13:39,730
in you expect you to make sure that you

00:13:38,110 --> 00:13:42,610
target the develop branch which is not

00:13:39,730 --> 00:13:44,920
the default we hopefully we asked you to

00:13:42,610 --> 00:13:46,810
format your pull request title like this

00:13:44,920 --> 00:13:47,980
so we know what you're actually adding

00:13:46,810 --> 00:13:49,120
to easy build may

00:13:47,980 --> 00:13:51,790
some useful information in the

00:13:49,120 --> 00:13:53,440
description and you put better

00:13:51,790 --> 00:13:55,960
double-check your changes to make sure

00:13:53,440 --> 00:13:58,240
you're not accidentally doing something

00:13:55,960 --> 00:14:00,100
wrong there so that's this is a bit of

00:13:58,240 --> 00:14:01,450
manual work and then hopefully you can

00:14:00,100 --> 00:14:02,910
click the magic green button to create

00:14:01,450 --> 00:14:06,460
the pull request and you're done

00:14:02,910 --> 00:14:08,500
well no we're you're not done yet this

00:14:06,460 --> 00:14:09,910
is just starting the contribution so now

00:14:08,500 --> 00:14:11,920
I would Travis

00:14:09,910 --> 00:14:14,680
so our Travis configuration is going to

00:14:11,920 --> 00:14:16,870
trigger automatically it's going to do

00:14:14,680 --> 00:14:19,810
some testing or easy config file mainly

00:14:16,870 --> 00:14:21,400
looking like is it actually sensible

00:14:19,810 --> 00:14:24,700
does it have all the dependencies for

00:14:21,400 --> 00:14:26,740
other stuff does it actually parse some

00:14:24,700 --> 00:14:28,060
very simple things like this then at

00:14:26,740 --> 00:14:29,620
some point the maintainer one of the

00:14:28,060 --> 00:14:32,740
easy build maintains will review your

00:14:29,620 --> 00:14:34,270
pull request somebody will test it so

00:14:32,740 --> 00:14:36,820
actually do the installation that your

00:14:34,270 --> 00:14:38,620
easy config file describes and then

00:14:36,820 --> 00:14:42,310
hopefully also report back whether that

00:14:38,620 --> 00:14:44,590
worked for him um through the review the

00:14:42,310 --> 00:14:46,450
reviewer may ask some things to be

00:14:44,590 --> 00:14:47,800
changed or maybe Travis fails and

00:14:46,450 --> 00:14:50,350
because of that you have to go and

00:14:47,800 --> 00:14:52,300
change some minor things which means you

00:14:50,350 --> 00:14:54,610
have to go back to get okay back to

00:14:52,300 --> 00:14:55,840
square one and maybe you have to do this

00:14:54,610 --> 00:14:57,730
even multiple times because it's

00:14:55,840 --> 00:15:01,720
typically a review cycle and you get

00:14:57,730 --> 00:15:02,860
some feedback over and over again that

00:15:01,720 --> 00:15:04,660
may happen certain if you're a new

00:15:02,860 --> 00:15:07,920
contributor this is typically what

00:15:04,660 --> 00:15:10,390
happens okay so you've got the review

00:15:07,920 --> 00:15:12,310
there were some small changes requested

00:15:10,390 --> 00:15:14,380
you say ok learning to do the extra

00:15:12,310 --> 00:15:15,670
effort go back to gates first of all I

00:15:14,380 --> 00:15:17,770
have to figure out the branch name you

00:15:15,670 --> 00:15:19,480
used for your pull request if to look at

00:15:17,770 --> 00:15:21,280
the pull request copy paste the branch

00:15:19,480 --> 00:15:23,230
name you're probably being funny there

00:15:21,280 --> 00:15:25,780
so it's not hard to remember what you

00:15:23,230 --> 00:15:27,760
used in this case you use example so you

00:15:25,780 --> 00:15:29,620
check out the example branch we again

00:15:27,760 --> 00:15:31,870
make the necessary changes as requested

00:15:29,620 --> 00:15:33,520
by the reviewer do a get remit of all

00:15:31,870 --> 00:15:35,230
our changes now be careful with this

00:15:33,520 --> 00:15:37,120
because if you have other changes it

00:15:35,230 --> 00:15:39,640
will suddenly push them in your branch

00:15:37,120 --> 00:15:41,890
as well which you may not want to do you

00:15:39,640 --> 00:15:43,450
push back the updated branch in your

00:15:41,890 --> 00:15:45,340
fork on github which will also update

00:15:43,450 --> 00:15:49,030
the pull request and you have to do this

00:15:45,340 --> 00:15:50,530
a couple of times so this is a lot of

00:15:49,030 --> 00:15:52,810
overhead there's a lot of manual steps

00:15:50,530 --> 00:15:54,670
you need to know get a bit you need to

00:15:52,810 --> 00:15:56,890
come up with a funny branch name do four

00:15:54,670 --> 00:15:58,960
git commands to set up the branch and

00:15:56,890 --> 00:16:00,460
push it to github you need to click

00:15:58,960 --> 00:16:01,570
around and get help to open the pool

00:16:00,460 --> 00:16:04,390
request and fill in some

00:16:01,570 --> 00:16:06,610
boxes and then responding to the review

00:16:04,390 --> 00:16:08,680
we have to do three more git commands to

00:16:06,610 --> 00:16:10,180
fine-tune the pull request and then

00:16:08,680 --> 00:16:11,830
afterwards if things got merge you have

00:16:10,180 --> 00:16:13,720
two branches to worry about the local

00:16:11,830 --> 00:16:14,860
one and the laptop and the remote one

00:16:13,720 --> 00:16:16,450
gets hope that you better clean up

00:16:14,860 --> 00:16:19,390
otherwise you have 100 branches before

00:16:16,450 --> 00:16:21,160
you know it and all of this

00:16:19,390 --> 00:16:23,200
assuming that you actually know the

00:16:21,160 --> 00:16:25,480
project force is already which may or

00:16:23,200 --> 00:16:27,160
may not be documented and he's an easy

00:16:25,480 --> 00:16:29,470
build they are but nobody reads

00:16:27,160 --> 00:16:30,790
documentation so they don't know

00:16:29,470 --> 00:16:32,560
and it also assumes that you don't mess

00:16:30,790 --> 00:16:34,930
up any good commands because if you do

00:16:32,560 --> 00:16:37,930
something wrong in between you may even

00:16:34,930 --> 00:16:39,220
lose your work or anything like this all

00:16:37,930 --> 00:16:44,610
right so we have to do better than this

00:16:39,220 --> 00:16:47,650
right it has to be a better way the

00:16:44,610 --> 00:16:50,110
situation that triggered me to work on

00:16:47,650 --> 00:16:51,760
this was the race we were seeing in

00:16:50,110 --> 00:16:56,770
contributions in easy build so this is

00:16:51,760 --> 00:16:59,890
the green boxes 2013 Louis 2014 and 2015

00:16:56,770 --> 00:17:01,510
we had about twice the amount of

00:16:59,890 --> 00:17:04,150
contributions we had before so this was

00:17:01,510 --> 00:17:06,339
going up quite quickly almost a thousand

00:17:04,150 --> 00:17:08,350
tool requests in a single year and I was

00:17:06,339 --> 00:17:09,850
almost doing this by myself reviewing

00:17:08,350 --> 00:17:11,829
contributions it just didn't scare

00:17:09,850 --> 00:17:12,939
anymore I was getting really worried

00:17:11,829 --> 00:17:15,070
like we're not going to be able to keep

00:17:12,939 --> 00:17:16,750
up if this keeps going well of course we

00:17:15,070 --> 00:17:19,449
want the contributions we don't tell

00:17:16,750 --> 00:17:22,810
people stop contributing absence there's

00:17:19,449 --> 00:17:24,040
a bit of conflict there and also a lot

00:17:22,810 --> 00:17:25,930
of people are struggling with the

00:17:24,040 --> 00:17:27,750
contribution procedure with the policies

00:17:25,930 --> 00:17:30,400
mainly with get stuff they were like I

00:17:27,750 --> 00:17:32,020
tried something it didn't work or messed

00:17:30,400 --> 00:17:34,780
up my branch close this pull request

00:17:32,020 --> 00:17:38,110
open a new one lots of overhead there we

00:17:34,780 --> 00:17:39,940
trying to explain to new people how to

00:17:38,110 --> 00:17:42,130
do things right like try this get branch

00:17:39,940 --> 00:17:43,480
and try get reset but don't do that -

00:17:42,130 --> 00:17:45,520
hard because it are going to reduce your

00:17:43,480 --> 00:17:47,920
work so trying to be careful lots of

00:17:45,520 --> 00:17:49,930
back and forth lots of time being wasted

00:17:47,920 --> 00:17:52,900
some people even stopped contributing

00:17:49,930 --> 00:17:55,210
because of this so they didn't you were

00:17:52,900 --> 00:17:56,590
not familiar enough with git yet and

00:17:55,210 --> 00:17:58,030
they said ok I can't figure this out I

00:17:56,590 --> 00:17:59,230
don't have time for this forget it leave

00:17:58,030 --> 00:18:01,600
the contribution close the pull request

00:17:59,230 --> 00:18:06,670
and we never saw them back setup that

00:18:01,600 --> 00:18:08,980
was not good and then the irony here is

00:18:06,670 --> 00:18:11,140
easy builders is a project that aims to

00:18:08,980 --> 00:18:12,760
automate installations and then you have

00:18:11,140 --> 00:18:16,500
to do all this manual work to make a

00:18:12,760 --> 00:18:16,500
contribution it didn't make sense

00:18:17,020 --> 00:18:21,460
so when I started working on the github

00:18:19,660 --> 00:18:23,320
integration that we have today an easy

00:18:21,460 --> 00:18:26,050
build I did this mostly over Christmas

00:18:23,320 --> 00:18:27,790
just because I was frustrated enough the

00:18:26,050 --> 00:18:29,560
week before that I couldn't get it out

00:18:27,790 --> 00:18:32,020
of my mind and I wanted to have some

00:18:29,560 --> 00:18:35,050
solution or at least try to come up with

00:18:32,020 --> 00:18:36,910
a solution so the idea was to automate

00:18:35,050 --> 00:18:40,510
the contribution workflow to make it a

00:18:36,910 --> 00:18:42,940
lot easier for people to make down lose

00:18:40,510 --> 00:18:44,620
less time and also to avoid direct

00:18:42,940 --> 00:18:46,870
interaction with git because many people

00:18:44,620 --> 00:18:49,690
were not familiar enough to actually do

00:18:46,870 --> 00:18:51,190
the contribution the initial

00:18:49,690 --> 00:18:52,960
implementation had support for a bunch

00:18:51,190 --> 00:18:55,630
of things which I'll go over in a bit

00:18:52,960 --> 00:18:57,130
and for now it's limited to easy config

00:18:55,630 --> 00:18:59,410
files we can actually extend this to

00:18:57,130 --> 00:19:01,390
other parts of easy build and make it

00:18:59,410 --> 00:19:05,380
easier to become to do contributions

00:19:01,390 --> 00:19:07,090
there as well so underneath this is act

00:19:05,380 --> 00:19:10,150
this is pretty basic there's nothing

00:19:07,090 --> 00:19:12,880
really fancy going on there's a a git

00:19:10,150 --> 00:19:15,130
Python library which is a wrapper around

00:19:12,880 --> 00:19:17,680
gates that you can just talk to get from

00:19:15,130 --> 00:19:20,230
Python which is it works pretty well

00:19:17,680 --> 00:19:23,470
github has a very good REST API that you

00:19:20,230 --> 00:19:24,670
can talk to so this is just to automate

00:19:23,470 --> 00:19:25,840
the interaction with github so you don't

00:19:24,670 --> 00:19:29,290
have to click around with the mouse or

00:19:25,840 --> 00:19:31,150
even go to github yourself you can

00:19:29,290 --> 00:19:33,400
automate this whole workflow and then we

00:19:31,150 --> 00:19:36,910
use the keyring Brighton package to save

00:19:33,400 --> 00:19:38,590
the get token that we need to talk to

00:19:36,910 --> 00:19:41,320
the github API on your behalf so with

00:19:38,590 --> 00:19:43,510
your account without you having to enter

00:19:41,320 --> 00:19:45,280
a port and password or anything this is

00:19:43,510 --> 00:19:46,330
specific to Python but you could you can

00:19:45,280 --> 00:19:49,660
do the same thing in any other language

00:19:46,330 --> 00:19:51,490
you can find libraries basically all the

00:19:49,660 --> 00:19:52,960
only thing you need is something to talk

00:19:51,490 --> 00:19:55,030
to get and then something to safely

00:19:52,960 --> 00:19:56,560
store the token that's generally not

00:19:55,030 --> 00:19:59,620
that any language should really have it

00:19:56,560 --> 00:20:02,110
so what what did we add we added support

00:19:59,620 --> 00:20:05,560
for opening new pool requests in the

00:20:02,110 --> 00:20:07,390
easy build command line so EB new PR you

00:20:05,560 --> 00:20:08,830
run it like this you do a B a new PR you

00:20:07,390 --> 00:20:12,910
give it an easy config file which can

00:20:08,830 --> 00:20:15,040
have any name doesn't matter one single

00:20:12,910 --> 00:20:17,470
command no git commands no interaction

00:20:15,040 --> 00:20:19,540
with github that was the goal what this

00:20:17,470 --> 00:20:22,270
will do is it will fetch the develop

00:20:19,540 --> 00:20:27,100
branch from the upstream copy this easy

00:20:22,270 --> 00:20:28,960
config file in there to prepare then it

00:20:27,100 --> 00:20:31,000
will create a branch within

00:20:28,960 --> 00:20:32,230
automatically derived branch name you

00:20:31,000 --> 00:20:33,310
can pick your branch name if you really

00:20:32,230 --> 00:20:36,220
want to if you want to be funny you

00:20:33,310 --> 00:20:37,870
still can but this does this is just a

00:20:36,220 --> 00:20:40,090
timestamp and it checks from the easy

00:20:37,870 --> 00:20:41,800
control which software and which version

00:20:40,090 --> 00:20:43,540
and try to trust against a reasonable

00:20:41,800 --> 00:20:47,140
name from that you can actually just

00:20:43,540 --> 00:20:48,940
tell branches apart relatively easily it

00:20:47,140 --> 00:20:54,030
will push this branch to get to up for

00:20:48,940 --> 00:20:54,030
you just get push origin branch right

00:20:54,150 --> 00:20:58,750
during the copy here it's actually also

00:20:56,470 --> 00:21:00,610
renaming the easy config file based on

00:20:58,750 --> 00:21:02,170
what's in there and also getting the

00:21:00,610 --> 00:21:04,300
location right so you don't have to do

00:21:02,170 --> 00:21:06,760
it yourself every easy config file you

00:21:04,300 --> 00:21:08,710
contribute can be tested EB and if you

00:21:06,760 --> 00:21:13,210
do new PR it will rename it properly

00:21:08,710 --> 00:21:16,000
that we are supposed to do and then here

00:21:13,210 --> 00:21:17,950
it's preparing the pull request so it's

00:21:16,000 --> 00:21:20,650
going to target our develop branch it

00:21:17,950 --> 00:21:22,450
gonna it has Auto generated at the are

00:21:20,650 --> 00:21:24,340
title for you the way we would like it

00:21:22,450 --> 00:21:27,160
to have and of course you can override

00:21:24,340 --> 00:21:28,720
this it has a description the default

00:21:27,160 --> 00:21:31,570
description is just this was created to

00:21:28,720 --> 00:21:33,760
t be new PR which is useful it's a bit

00:21:31,570 --> 00:21:36,250
of promotion for this as well and then

00:21:33,760 --> 00:21:38,920
it you give you a short overview pretty

00:21:36,250 --> 00:21:40,300
much like git stat does and it opens the

00:21:38,920 --> 00:21:41,890
pull request for you by talking to the

00:21:40,300 --> 00:21:43,870
github API so there's are a lot of stuff

00:21:41,890 --> 00:21:46,300
going on here in the background but you

00:21:43,870 --> 00:21:47,020
only do one pump command e be new PR

00:21:46,300 --> 00:21:48,010
that's it

00:21:47,020 --> 00:21:52,960
and everything else is done

00:21:48,010 --> 00:21:55,510
automatically so to summarize this is

00:21:52,960 --> 00:21:57,130
what you do manually moving renaming

00:21:55,510 --> 00:21:58,810
files moving in the right location a

00:21:57,130 --> 00:22:00,820
bunch of good commands and I'm logging

00:21:58,810 --> 00:22:03,060
in to get happening clicking around to

00:22:00,820 --> 00:22:06,580
open the pool request now you do this

00:22:03,060 --> 00:22:10,840
one command it does one single DB c'mon

00:22:06,580 --> 00:22:12,880
no gates no github it builds stuff so it

00:22:10,840 --> 00:22:14,710
parses the easy config file to get all

00:22:12,880 --> 00:22:16,420
the renaming right and the PR title

00:22:14,710 --> 00:22:21,520
right and it ends up saving a lot of

00:22:16,420 --> 00:22:23,320
time pretty much the same thing for

00:22:21,520 --> 00:22:25,870
updating existing pool requests so you

00:22:23,320 --> 00:22:27,910
do in the update PR you give it a pull

00:22:25,870 --> 00:22:30,010
request number you give it an updated

00:22:27,910 --> 00:22:31,990
easy config file which yet again can

00:22:30,010 --> 00:22:33,550
have any name it doesn't care and here

00:22:31,990 --> 00:22:36,130
we force you to give a commit message

00:22:33,550 --> 00:22:37,990
yourself to describe the changes because

00:22:36,130 --> 00:22:39,670
this is typically changing a file that's

00:22:37,990 --> 00:22:42,010
already there rather than maybe

00:22:39,670 --> 00:22:44,020
something new

00:22:42,010 --> 00:22:46,360
from the pool request number it will

00:22:44,020 --> 00:22:47,860
automatically determine the branch name

00:22:46,360 --> 00:22:50,049
so you don't have you don't have to tell

00:22:47,860 --> 00:22:51,190
it it knows it talks to get help what

00:22:50,049 --> 00:22:53,260
was the branch name for this pool

00:22:51,190 --> 00:22:56,320
request it will check that out locally

00:22:53,260 --> 00:22:58,270
again and in a temporary directory it

00:22:56,320 --> 00:23:02,309
will add the file rename do all of that

00:22:58,270 --> 00:23:02,309
stuff again so put it in the right place

00:23:02,640 --> 00:23:06,610
updates the files move it to the right

00:23:04,780 --> 00:23:08,950
location show you an overview so this

00:23:06,610 --> 00:23:12,790
was just changing one line write one

00:23:08,950 --> 00:23:14,470
line removed one line added and then it

00:23:12,790 --> 00:23:16,030
pushes the modified branch to github to

00:23:14,470 --> 00:23:19,480
open the port to update the pull request

00:23:16,030 --> 00:23:20,820
and that's EB update PR again lots of

00:23:19,480 --> 00:23:22,840
stuff going on in the background

00:23:20,820 --> 00:23:24,190
figuring out the branch name checking

00:23:22,840 --> 00:23:26,140
out the local branch going to the right

00:23:24,190 --> 00:23:29,169
place changing the file doing three git

00:23:26,140 --> 00:23:31,630
commands to push it is now just one come

00:23:29,169 --> 00:23:35,020
out again lots of automation you save a

00:23:31,630 --> 00:23:36,460
lot of time one side effect of this is

00:23:35,020 --> 00:23:38,440
that you don't have a local branch

00:23:36,460 --> 00:23:40,360
anymore to clean up because this is done

00:23:38,440 --> 00:23:42,070
in a temporary directory when the update

00:23:40,360 --> 00:23:43,450
is done it blows away the temporary

00:23:42,070 --> 00:23:45,490
directory you don't have never see the

00:23:43,450 --> 00:23:49,059
local branch so there's no cleanup

00:23:45,490 --> 00:23:51,400
either the reverse kind of is to use

00:23:49,059 --> 00:23:53,650
easy config files from a pull request so

00:23:51,400 --> 00:23:55,000
somebody has done a pull request and you

00:23:53,650 --> 00:23:56,679
want to test it you need to pull in

00:23:55,000 --> 00:23:58,780
these easy config files on your system

00:23:56,679 --> 00:24:00,610
to play around with them you don't have

00:23:58,780 --> 00:24:02,679
to do that manually again no get come on

00:24:00,610 --> 00:24:04,540
to do EBE phone Pru give it a pull

00:24:02,679 --> 00:24:05,950
request number it will pull in those

00:24:04,540 --> 00:24:08,980
easy config files you can give them to

00:24:05,950 --> 00:24:12,720
easy build and do the test installation

00:24:08,980 --> 00:24:12,720
is so this is how we test contributions

00:24:14,850 --> 00:24:19,690
you can combine this with upload test

00:24:17,530 --> 00:24:21,220
report from peon a protester put

00:24:19,690 --> 00:24:23,470
together will do the installation and

00:24:21,220 --> 00:24:26,410
push back a test report in the pull

00:24:23,470 --> 00:24:27,580
request to notify the contributor like

00:24:26,410 --> 00:24:30,760
this also worked for me

00:24:27,580 --> 00:24:32,799
and the testers on this system and so on

00:24:30,760 --> 00:24:35,410
so this is what happens it adds the pour

00:24:32,799 --> 00:24:37,150
adds a comment in the pull request with

00:24:35,410 --> 00:24:39,580
your account it uses your github tokens

00:24:37,150 --> 00:24:41,919
with your account so in this case it

00:24:39,580 --> 00:24:45,190
failed for me and a it worked for me and

00:24:41,919 --> 00:24:47,830
it failed for Adam and then inside so it

00:24:45,190 --> 00:24:49,720
has a link here to exist if it was a

00:24:47,830 --> 00:24:52,030
successful test report you get success

00:24:49,720 --> 00:24:53,559
here I get a bunch of details including

00:24:52,030 --> 00:24:55,330
some information about the system like

00:24:53,559 --> 00:24:57,130
which processor which OS

00:24:55,330 --> 00:24:59,470
it collects that and pushes in in this

00:24:57,130 --> 00:25:01,150
test report if it fails you'll get a

00:24:59,470 --> 00:25:02,920
fail here and you'll get a separate link

00:25:01,150 --> 00:25:05,110
with the build block so you can check

00:25:02,920 --> 00:25:07,450
why it actually failed you can check the

00:25:05,110 --> 00:25:08,800
errors of the installation and dive in

00:25:07,450 --> 00:25:10,300
and maybe make a suggestion to the

00:25:08,800 --> 00:25:12,250
contributor okay this didn't work for me

00:25:10,300 --> 00:25:15,780
for this in this region so you'll need

00:25:12,250 --> 00:25:18,430
to make an update to your contribution

00:25:15,780 --> 00:25:19,570
that's all really nice we were quite

00:25:18,430 --> 00:25:22,600
happy with that I was working quite well

00:25:19,570 --> 00:25:25,870
so the github integration got extended

00:25:22,600 --> 00:25:27,520
quite a bit I'm not going to cover all

00:25:25,870 --> 00:25:29,200
of these some of these some of these are

00:25:27,520 --> 00:25:32,470
very detailed but there's a couple that

00:25:29,200 --> 00:25:36,880
I want to go over we have a check github

00:25:32,470 --> 00:25:39,130
so the new PR a bit PR all of this made

00:25:36,880 --> 00:25:40,840
it very easy for people to contribute it

00:25:39,130 --> 00:25:43,570
automated the whole workflow but they

00:25:40,840 --> 00:25:45,760
still had to set up the github token had

00:25:43,570 --> 00:25:47,230
to make sure get Python was there had to

00:25:45,760 --> 00:25:48,880
make sure the keyring Modi was there

00:25:47,230 --> 00:25:50,320
that the token was installed in the

00:25:48,880 --> 00:25:53,650
right location and that they didn't mess

00:25:50,320 --> 00:25:55,000
up copy pasting the token all of these

00:25:53,650 --> 00:25:56,470
things and we were getting many

00:25:55,000 --> 00:25:58,180
questions like I want to set this up but

00:25:56,470 --> 00:25:59,890
I'm not sure if it's actually right is

00:25:58,180 --> 00:26:02,350
there something missing I have no way of

00:25:59,890 --> 00:26:03,940
checking so the added check github that

00:26:02,350 --> 00:26:06,700
does a bunch of checks if all of these

00:26:03,940 --> 00:26:09,220
are okay then we know that the github

00:26:06,700 --> 00:26:11,740
integration works and it basically tells

00:26:09,220 --> 00:26:13,930
you based on these results what it can

00:26:11,740 --> 00:26:16,930
do so in this setup all of these work

00:26:13,930 --> 00:26:19,000
and if it doesn't you'll get a use for

00:26:16,930 --> 00:26:20,410
error message here and at least then

00:26:19,000 --> 00:26:21,700
that way we get more information like

00:26:20,410 --> 00:26:25,630
you have this part missing this is how

00:26:21,700 --> 00:26:27,400
you can fix it review PR this is very

00:26:25,630 --> 00:26:30,540
specific to easy build so you can review

00:26:27,400 --> 00:26:32,920
PRS on github like it gives you a diff

00:26:30,540 --> 00:26:34,840
we get a lot of pull requests with new

00:26:32,920 --> 00:26:36,970
files new easy config files so there's

00:26:34,840 --> 00:26:40,390
no diff that just this big green box on

00:26:36,970 --> 00:26:42,970
github so that means that means that the

00:26:40,390 --> 00:26:46,630
reviewer has to do a visual with your

00:26:42,970 --> 00:26:49,270
review sorry what we expect reviews to

00:26:46,630 --> 00:26:51,040
do what we hope to do is that they

00:26:49,270 --> 00:26:53,080
compare a new easy country files with

00:26:51,040 --> 00:26:54,640
existing ones as if it's just a version

00:26:53,080 --> 00:26:56,590
bump you really want to see ok this is

00:26:54,640 --> 00:26:58,570
just a version bump trivial I can test

00:26:56,590 --> 00:27:00,970
it if it works contribution is good to

00:26:58,570 --> 00:27:02,590
go I'm doing this manually is annoying

00:27:00,970 --> 00:27:03,850
me because you have to find the Z config

00:27:02,590 --> 00:27:05,860
files that are close enough that you can

00:27:03,850 --> 00:27:07,750
compare it have to do the diff manually

00:27:05,860 --> 00:27:09,159
because github doesn't have this concept

00:27:07,750 --> 00:27:11,200
right

00:27:09,159 --> 00:27:13,150
have to figure out what is actually

00:27:11,200 --> 00:27:14,590
relevant so you pick the one with the

00:27:13,150 --> 00:27:17,760
same software version or the same to

00:27:14,590 --> 00:27:21,070
chain or well if none of these are there

00:27:17,760 --> 00:27:22,809
so in both in preview PR and review PR

00:27:21,070 --> 00:27:25,270
we have this this is the output of

00:27:22,809 --> 00:27:27,400
review PR so for a particular public

00:27:25,270 --> 00:27:29,679
quest it will go and find the closest

00:27:27,400 --> 00:27:32,110
matching easy config file so this is it

00:27:29,679 --> 00:27:34,029
one for bomb tools two five one that's

00:27:32,110 --> 00:27:36,220
the contribution we have one four two

00:27:34,029 --> 00:27:37,690
five zero so this is a pretty close

00:27:36,220 --> 00:27:39,190
match right and it shows you the diff

00:27:37,690 --> 00:27:41,140
the version number was bombed the checks

00:27:39,190 --> 00:27:41,409
almost bumped everything else is the

00:27:41,140 --> 00:27:42,970
same

00:27:41,409 --> 00:27:45,640
this looks like a very good contribution

00:27:42,970 --> 00:27:48,520
so you tested if it works contribution

00:27:45,640 --> 00:27:51,130
is good to go contributors can do the

00:27:48,520 --> 00:27:52,690
same thing with preview PR so before

00:27:51,130 --> 00:27:56,169
actually opening the pull request they

00:27:52,690 --> 00:27:57,940
can run this see the diff and then see

00:27:56,169 --> 00:27:59,590
okay this is the only difference by

00:27:57,940 --> 00:28:01,750
version number basically so this is

00:27:59,590 --> 00:28:04,360
probably a good contribution so it

00:28:01,750 --> 00:28:06,370
checks with the current upstream because

00:28:04,360 --> 00:28:08,200
since you have copied the easy config

00:28:06,370 --> 00:28:11,140
file stuff may have changed on our rent

00:28:08,200 --> 00:28:14,470
and you may want to need to see that as

00:28:11,140 --> 00:28:17,080
well also for merging people request we

00:28:14,470 --> 00:28:18,789
have a command or an option at least and

00:28:17,080 --> 00:28:20,679
does a couple of checks so this is for

00:28:18,789 --> 00:28:23,039
maintenance of course and contributor

00:28:20,679 --> 00:28:25,870
cannot do this this is to help ourselves

00:28:23,039 --> 00:28:27,940
it will verify whether contribution is

00:28:25,870 --> 00:28:30,940
good to be merged is it to the right

00:28:27,940 --> 00:28:32,590
develop branch does it pass Travis the

00:28:30,940 --> 00:28:34,179
doesn't have a test report that was

00:28:32,590 --> 00:28:37,299
submitted with upload test report and

00:28:34,179 --> 00:28:39,399
was it successful is that were approved

00:28:37,299 --> 00:28:41,320
review so we still look forced that a

00:28:39,399 --> 00:28:44,409
maintainer doesn't approve the review

00:28:41,320 --> 00:28:45,940
and github a visual check is there a

00:28:44,409 --> 00:28:47,590
milestone set so that's a detailed if

00:28:45,940 --> 00:28:49,240
all of these are okay the pull request

00:28:47,590 --> 00:28:51,340
is good to go and this will actually

00:28:49,240 --> 00:28:52,659
merge the pull request so a maintainer

00:28:51,340 --> 00:28:55,120
doesn't have to do the double click on

00:28:52,659 --> 00:28:56,529
github this can do it for them they

00:28:55,120 --> 00:28:58,929
don't have to do the visual check if all

00:28:56,529 --> 00:29:00,429
of these ticks are there that happens

00:28:58,929 --> 00:29:03,039
automatically so it helps us as well

00:29:00,429 --> 00:29:04,870
we're gonna quickly open very quickly

00:29:03,039 --> 00:29:07,059
merge pull requests at once we think

00:29:04,870 --> 00:29:08,770
everything's ok and a double checks for

00:29:07,059 --> 00:29:12,549
us sorry we can't make any mistakes

00:29:08,770 --> 00:29:16,270
there the the bot that I wrote so this

00:29:12,549 --> 00:29:18,159
happened a lot later so we have Travis

00:29:16,270 --> 00:29:20,679
checking pull requests doing very simple

00:29:18,159 --> 00:29:22,480
test unit tests basically if Travis

00:29:20,679 --> 00:29:24,730
fails you'll see a red cross

00:29:22,480 --> 00:29:26,590
in the poll requests but that's it if

00:29:24,730 --> 00:29:28,300
you don't go to the pool request and

00:29:26,590 --> 00:29:30,280
visually check it you don't see that

00:29:28,300 --> 00:29:32,260
Travis failed there's no there's

00:29:30,280 --> 00:29:36,220
actually as far as I have found no way

00:29:32,260 --> 00:29:38,290
to configure Travis to notify both the

00:29:36,220 --> 00:29:39,820
contributor and the maintainer so then

00:29:38,290 --> 00:29:41,530
it cannot do a comment and the pool

00:29:39,820 --> 00:29:43,390
request or something there's just no way

00:29:41,530 --> 00:29:44,550
to tell it to do that so I wrote the bot

00:29:43,390 --> 00:29:46,600
that does that for me

00:29:44,550 --> 00:29:49,900
there's a bot that keeps an eye on

00:29:46,600 --> 00:29:51,670
Travis every time it sees a test for a

00:29:49,900 --> 00:29:54,340
particular pull request trailing the Bob

00:29:51,670 --> 00:29:56,470
grabs the failing test from Travis and

00:29:54,340 --> 00:29:57,940
adds a comment in the pull request which

00:29:56,470 --> 00:30:00,610
triggers a notification and gets up to

00:29:57,940 --> 00:30:02,820
everybody involved seems to work really

00:30:00,610 --> 00:30:06,010
well the reason we did this is that to

00:30:02,820 --> 00:30:07,900
tighten the review cycle or the update

00:30:06,010 --> 00:30:10,420
cycle you have four contributions if

00:30:07,900 --> 00:30:12,940
somebody does a contribution and they

00:30:10,420 --> 00:30:14,830
never check back then Travis may fail

00:30:12,940 --> 00:30:16,720
but this the to the quest is just

00:30:14,830 --> 00:30:18,970
sitting there it's not happening if the

00:30:16,720 --> 00:30:21,100
bot drops in a comment they get a mail

00:30:18,970 --> 00:30:23,170
they see it failed they check why it

00:30:21,100 --> 00:30:25,690
failed oh this is an easy fix they fix

00:30:23,170 --> 00:30:31,720
it and then Travis triggered again and

00:30:25,690 --> 00:30:35,980
hopefully goes green after okay so I'm

00:30:31,720 --> 00:30:38,070
wrapping up slowly what kind of impact

00:30:35,980 --> 00:30:41,770
has this hat on contribution so we I

00:30:38,070 --> 00:30:44,050
started implementing this in 2015 where

00:30:41,770 --> 00:30:47,170
we had about a thousand pull requests

00:30:44,050 --> 00:30:49,540
and easy conflicts repository at the end

00:30:47,170 --> 00:30:51,400
of this year this was implemented so

00:30:49,540 --> 00:30:54,010
let's say in January it was usable for

00:30:51,400 --> 00:30:56,770
the people that really wanted to and in

00:30:54,010 --> 00:30:59,080
2016 about 500 pull requests were opened

00:30:56,770 --> 00:31:00,700
with UPR so that's pretty good and

00:30:59,080 --> 00:31:03,460
that's pretty much like the difference

00:31:00,700 --> 00:31:05,290
you see here so what did we get more

00:31:03,460 --> 00:31:08,410
contributions thanks to a new PR we

00:31:05,290 --> 00:31:10,960
probably did it's hard to tell but I

00:31:08,410 --> 00:31:13,360
attribute this big race to the

00:31:10,960 --> 00:31:18,160
automation we have the year after that

00:31:13,360 --> 00:31:19,720
almost doubled so today about 63 percent

00:31:18,160 --> 00:31:22,060
of the contributions we get are through

00:31:19,720 --> 00:31:24,730
new PR so people are doing contributions

00:31:22,060 --> 00:31:26,320
manually less and less which was sort of

00:31:24,730 --> 00:31:29,740
the goal right I mean even if you know

00:31:26,320 --> 00:31:31,090
get it helps you a lot because it does a

00:31:29,740 --> 00:31:32,470
whole lot of automation they have a lot

00:31:31,090 --> 00:31:34,750
less things to worry about you don't

00:31:32,470 --> 00:31:35,830
need to juggle branches makes things

00:31:34,750 --> 00:31:37,620
very easy

00:31:35,830 --> 00:31:40,179
even for experienced people so this is

00:31:37,620 --> 00:31:41,649
for myself if I add an easy config file

00:31:40,179 --> 00:31:44,049
this is how I do it I never do a manual

00:31:41,649 --> 00:31:47,580
branch gets any more I use get all the

00:31:44,049 --> 00:31:47,580
time but not for doing contributions

00:31:48,120 --> 00:31:53,230
yeah so we had 80 percent more requests

00:31:51,039 --> 00:31:56,289
and sixteen and seventeen compared to

00:31:53,230 --> 00:31:58,260
2015 I think one of the main factors is

00:31:56,289 --> 00:32:00,909
because of the whole automation we have

00:31:58,260 --> 00:32:04,059
and the same graph with different colors

00:32:00,909 --> 00:32:05,380
this is green is merged red is closed

00:32:04,059 --> 00:32:09,700
pull the request and blue is still open

00:32:05,380 --> 00:32:11,620
so in 2015 we were sort of keeping up

00:32:09,700 --> 00:32:14,769
with incoming pull requests like 85%

00:32:11,620 --> 00:32:17,830
about it's a little bit lower here I was

00:32:14,769 --> 00:32:19,419
actually getting merged let's say 10%

00:32:17,830 --> 00:32:21,250
was getting closed because there were

00:32:19,419 --> 00:32:23,230
good reasons to close them the ones that

00:32:21,250 --> 00:32:25,299
were open out or maybe stale pull

00:32:23,230 --> 00:32:26,919
requests contributors never got back to

00:32:25,299 --> 00:32:29,260
them or there was some issue there that

00:32:26,919 --> 00:32:30,789
we never managed to fix so it stays open

00:32:29,260 --> 00:32:33,010
we should probably close these as well

00:32:30,789 --> 00:32:35,700
and just get them out of the way they're

00:32:33,010 --> 00:32:38,730
probably not important anymore today

00:32:35,700 --> 00:32:41,710
even though contributions were really

00:32:38,730 --> 00:32:45,100
raising quite quickly in 2016 we were

00:32:41,710 --> 00:32:47,139
able to keep up the 80 85 % merged so

00:32:45,100 --> 00:32:50,440
that's thanks to things like EB review

00:32:47,139 --> 00:32:51,880
PR e B merge PR so that automating is a

00:32:50,440 --> 00:32:54,039
lot for maintain us as well and save

00:32:51,880 --> 00:32:56,470
them time that means they have time to

00:32:54,039 --> 00:32:59,110
do more reviews to test more

00:32:56,470 --> 00:33:01,120
contributions pretty much the same thing

00:32:59,110 --> 00:33:04,480
in 17 yeah who knows what happened what

00:33:01,120 --> 00:33:08,590
will happen in 18 so on I'm reasonably

00:33:04,480 --> 00:33:10,059
sure that keeping the 80 85 % merged to

00:33:08,590 --> 00:33:12,610
that level that would have been

00:33:10,059 --> 00:33:14,769
impossible without the automation it

00:33:12,610 --> 00:33:16,179
would have been tough have to close more

00:33:14,769 --> 00:33:18,370
pull requests or just keep em open

00:33:16,179 --> 00:33:22,600
ignore them I don't know what would have

00:33:18,370 --> 00:33:24,279
happened so to conclude yeah I think it

00:33:22,600 --> 00:33:26,799
can be a major hurdle for contributors

00:33:24,279 --> 00:33:28,299
that's what we saw in ez builds people

00:33:26,799 --> 00:33:29,620
that are not software developers but

00:33:28,299 --> 00:33:31,600
that still want to contribute to your

00:33:29,620 --> 00:33:34,260
project and that contributions may be

00:33:31,600 --> 00:33:36,700
very good so you don't want to miss them

00:33:34,260 --> 00:33:38,950
it can be a hurdle there that stops them

00:33:36,700 --> 00:33:40,809
from contributing you can actually

00:33:38,950 --> 00:33:42,970
automate pretty much the whole workflow

00:33:40,809 --> 00:33:45,279
which is good so you should probably do

00:33:42,970 --> 00:33:47,710
it we did it with git peyten and the

00:33:45,279 --> 00:33:49,450
rest rest api of github which is very

00:33:47,710 --> 00:33:51,759
well documented

00:33:49,450 --> 00:33:53,769
today contributed contributors don't

00:33:51,759 --> 00:33:55,809
need to use gate anymore they don't want

00:33:53,769 --> 00:33:56,979
to they still can we still happily

00:33:55,809 --> 00:33:58,179
accept all the requests that were done

00:33:56,979 --> 00:34:00,669
manually we can't really tell the

00:33:58,179 --> 00:34:04,029
difference or maybe we can because we

00:34:00,669 --> 00:34:06,279
need to complain more about them or get

00:34:04,029 --> 00:34:08,289
some more work done even if somebody

00:34:06,279 --> 00:34:10,990
opens the pull request manually we still

00:34:08,289 --> 00:34:12,940
get the benefit of review PR merge PR

00:34:10,990 --> 00:34:14,279
upload test report that still works even

00:34:12,940 --> 00:34:16,569
if it was done manually there's no

00:34:14,279 --> 00:34:18,940
there's no impact there so that's good

00:34:16,569 --> 00:34:21,010
so I think we have gotten more

00:34:18,940 --> 00:34:22,450
contributions thanks to this we've been

00:34:21,010 --> 00:34:23,859
able to keep up with incoming

00:34:22,450 --> 00:34:27,250
contributions even though it has been

00:34:23,859 --> 00:34:29,079
going up quite a lot and yeah there's

00:34:27,250 --> 00:34:32,099
less time wasted overall for everybody

00:34:29,079 --> 00:34:35,649
involved what maintains and considers

00:34:32,099 --> 00:34:39,720
that's what I had so I'm happy to take

00:34:35,649 --> 00:34:39,720
any questions that people have

00:34:42,779 --> 00:34:48,970
how does get scale up with getting many

00:34:45,970 --> 00:34:51,129
contributions really well we're not the

00:34:48,970 --> 00:34:53,409
Linux kernel though the Linux kernel

00:34:51,129 --> 00:35:00,220
gets the ten or a hundred times the

00:34:53,409 --> 00:35:02,319
amount of the folio that we do know so

00:35:00,220 --> 00:35:04,059
it was really built to get lots of

00:35:02,319 --> 00:35:07,170
contributions lots of changes like this

00:35:04,059 --> 00:35:07,170
it handles it perfectly

00:35:13,420 --> 00:35:18,500
that's a very good question so that's

00:35:15,530 --> 00:35:20,240
actually an idea I've had to maybe make

00:35:18,500 --> 00:35:24,440
this a library of some sort that people

00:35:20,240 --> 00:35:26,420
can talk to you it's an option but it's

00:35:24,440 --> 00:35:28,280
not a project I want to start I already

00:35:26,420 --> 00:35:33,170
have too much work with good easy build

00:35:28,280 --> 00:35:35,720
it's not something else I want sure it

00:35:33,170 --> 00:35:38,300
it's all on github so the whole github

00:35:35,720 --> 00:35:40,910
integration implementation is in our

00:35:38,300 --> 00:35:44,180
repository it's a github that PI file

00:35:40,910 --> 00:35:45,380
somewhere gplv2 you can use it you can

00:35:44,180 --> 00:35:46,940
take a look at it how we did it and

00:35:45,380 --> 00:35:49,280
maybe inspire yourself

00:35:46,940 --> 00:35:51,230
like I said I think this is easy to do

00:35:49,280 --> 00:35:52,730
also in other languages if you have the

00:35:51,230 --> 00:35:55,460
right libraries for it you can do it

00:35:52,730 --> 00:35:58,580
there's a bhoot somewhere here at FOSDEM

00:35:55,460 --> 00:36:01,250
get Nate dot IO I should probably take a

00:35:58,580 --> 00:36:03,290
look at they do not this but also a lot

00:36:01,250 --> 00:36:04,970
of automation around this I was talking

00:36:03,290 --> 00:36:07,040
to the guy and he was stuck at his booth

00:36:04,970 --> 00:36:10,120
he couldn't come here and what I hope he

00:36:07,040 --> 00:36:12,380
checks the video if he's watching hi

00:36:10,120 --> 00:36:13,550
they had some ideas like this as well

00:36:12,380 --> 00:36:15,470
and they will probably look at what we

00:36:13,550 --> 00:36:17,570
did then get inspired by this hopefully

00:36:15,470 --> 00:36:21,880
so you may see it as a service even

00:36:17,570 --> 00:36:21,880
somewhere rather than the library yeah

00:36:22,360 --> 00:36:45,800
all right I don't know if you do I mean

00:36:43,610 --> 00:36:47,750
easy build is a Python project so you

00:36:45,800 --> 00:36:50,780
can probably easily access the code

00:36:47,750 --> 00:36:53,360
right the code is always there if you

00:36:50,780 --> 00:36:54,980
find a bug somewhere and sometimes even

00:36:53,360 --> 00:36:58,100
if you don't know biting you can dive in

00:36:54,980 --> 00:36:59,900
and say I think that's wrong this true

00:36:58,100 --> 00:37:02,150
has to be a false whatever something

00:36:59,900 --> 00:37:04,100
like that that's an easy patch but then

00:37:02,150 --> 00:37:05,810
you have this updated gate Python file

00:37:04,100 --> 00:37:08,060
and then you need to learn get to push

00:37:05,810 --> 00:37:11,930
it back now so something we want to do

00:37:08,060 --> 00:37:15,140
an easy build is eb new PR let's say -

00:37:11,930 --> 00:37:16,580
is the PI which lifts somewhere new P or

00:37:15,140 --> 00:37:18,770
could even figure out what it has to be

00:37:16,580 --> 00:37:20,540
because it can check what's in the file

00:37:18,770 --> 00:37:22,370
put it in the right place create the

00:37:20,540 --> 00:37:26,230
branch push the branch to github do the

00:37:22,370 --> 00:37:26,230
pull request why not

00:37:34,240 --> 00:37:39,350
not everybody is a developer if you're

00:37:37,400 --> 00:37:40,940
an active developer I'll use it all the

00:37:39,350 --> 00:37:43,580
time don't get me wrong it's very good

00:37:40,940 --> 00:37:45,080
if you know it and if you need it every

00:37:43,580 --> 00:37:46,760
day you if you're doing software

00:37:45,080 --> 00:37:48,140
development you should learn it don't

00:37:46,760 --> 00:37:50,390
get me wrong if you're a one-time

00:37:48,140 --> 00:37:53,000
contributor that happened to bump into a

00:37:50,390 --> 00:37:55,430
bug that's was easy to fix what you

00:37:53,000 --> 00:37:58,040
don't know get it shouldn't stop you

00:37:55,430 --> 00:38:00,620
from contributing back it's two

00:37:58,040 --> 00:38:03,350
different worlds we have a lot of C's

00:38:00,620 --> 00:38:05,570
that means like people that the user

00:38:03,350 --> 00:38:07,490
support on supercomputers they don't

00:38:05,570 --> 00:38:09,350
develop any software but they have to

00:38:07,490 --> 00:38:11,600
install software so they use easy build

00:38:09,350 --> 00:38:12,920
and then they find bugs and easy build

00:38:11,600 --> 00:38:14,660
and try to fix them because they're

00:38:12,920 --> 00:38:17,060
proud that they can fix through it if

00:38:14,660 --> 00:38:18,320
you fix a bug you could feel very proud

00:38:17,060 --> 00:38:21,370
that you can contribute it back right

00:38:18,320 --> 00:38:31,640
you have to learn it first to be proud

00:38:21,370 --> 00:38:34,010
yeah maybe you want in the back oh yeah

00:38:31,640 --> 00:38:36,670
I can I can I hope you say big problems

00:38:34,010 --> 00:38:36,670
with scientist

00:38:49,710 --> 00:38:54,340
there it gets hairy and we don't at

00:38:52,750 --> 00:39:01,300
least in this there's no solution for

00:38:54,340 --> 00:39:03,940
that easy bill doesn't know no so at the

00:39:01,300 --> 00:39:06,150
time you create a pull request it will

00:39:03,940 --> 00:39:08,350
pull in the latest upstream

00:39:06,150 --> 00:39:10,750
automatically so we'll pull our develop

00:39:08,350 --> 00:39:12,010
branch and base your changes on that so

00:39:10,750 --> 00:39:14,950
at that time there's not going to be a

00:39:12,010 --> 00:39:16,810
merge conflict but of course as the pull

00:39:14,950 --> 00:39:19,450
request is open then suddenly a merge

00:39:16,810 --> 00:39:21,160
conflict may appear and then yeah then

00:39:19,450 --> 00:39:22,750
you're really stuck to gates and there's

00:39:21,160 --> 00:39:24,880
no other option

00:39:22,750 --> 00:39:26,650
what we then tend to do if people don't

00:39:24,880 --> 00:39:28,450
know get is we can grab their branch we

00:39:26,650 --> 00:39:30,670
can fix the pull request the merge

00:39:28,450 --> 00:39:32,320
conflicts for them give them a pull

00:39:30,670 --> 00:39:34,360
request on their branch and tell them

00:39:32,320 --> 00:39:35,500
look this fixes it just merge it even if

00:39:34,360 --> 00:39:37,720
you don't know what's going on merge it

00:39:35,500 --> 00:39:39,040
trust me it will open it will update the

00:39:37,720 --> 00:39:40,480
pull request and they will see still

00:39:39,040 --> 00:39:42,940
what we did which is hopefully nothing

00:39:40,480 --> 00:39:44,890
just fix to fix the merge conflict so

00:39:42,940 --> 00:39:48,250
then we can do that if we really have to

00:39:44,890 --> 00:39:49,450
it's an easy calm fix it's uncommon to

00:39:48,250 --> 00:39:50,980
have merge conflicts because usually

00:39:49,450 --> 00:39:55,860
you're working on new files and then

00:39:50,980 --> 00:39:55,860
you'll never have a merge conflict yes

00:40:00,190 --> 00:40:10,549
yes some people do what we discourage it

00:40:06,700 --> 00:40:12,349
the online editor yeah so some people

00:40:10,549 --> 00:40:13,970
have done it but did he end up with get

00:40:12,349 --> 00:40:18,170
with brands name like patch one patch

00:40:13,970 --> 00:40:21,019
2x3 patch for but 100 and then as as a

00:40:18,170 --> 00:40:23,690
maintainer like practice 100 what was

00:40:21,019 --> 00:40:25,220
this about again it and it still a lot

00:40:23,690 --> 00:40:27,349
of like they still have to do the manual

00:40:25,220 --> 00:40:29,059
pull requests and things like that okay

00:40:27,349 --> 00:40:32,089
clicking around for some people that

00:40:29,059 --> 00:40:34,279
works better people that you ve built

00:40:32,089 --> 00:40:35,809
are used to using a terminal so they're

00:40:34,279 --> 00:40:38,089
happy there and then they're usually

00:40:35,809 --> 00:40:39,920
happy with using one command to do

00:40:38,089 --> 00:40:41,599
something them but it still happens

00:40:39,920 --> 00:40:46,519
through wherever we're not blocking that

00:40:41,599 --> 00:40:48,109
or yeah like in documentation that's

00:40:46,519 --> 00:40:49,999
actually exactly where we see it a lot

00:40:48,109 --> 00:40:52,819
there's a type on the documentation they

00:40:49,999 --> 00:40:54,619
found the file they do an edit and get

00:40:52,819 --> 00:40:57,079
her procreate the branch for them right

00:40:54,619 --> 00:40:59,900
yeah and even make the pull requests for

00:40:57,079 --> 00:41:02,650
them I think yeah so it's very it

00:40:59,900 --> 00:41:02,650
happens sure

00:41:18,710 --> 00:41:28,380
well certainly to true that that was the

00:41:26,820 --> 00:41:36,720
footnote three steps you still have to

00:41:28,380 --> 00:41:40,820
do yeah create an account fork the

00:41:36,720 --> 00:41:43,020
repository do it get club

00:41:40,820 --> 00:41:53,040
well the get close actually not really

00:41:43,020 --> 00:41:55,680
necessarily anymore with not today

00:41:53,040 --> 00:41:58,140
because we pushed a branch to get up and

00:41:55,680 --> 00:42:00,480
we talked to the github API to open the

00:41:58,140 --> 00:42:02,070
portal quest if you have ideas there and

00:42:00,480 --> 00:42:04,520
keen to hear them because we then we can

00:42:02,070 --> 00:42:04,520
get rid of this

00:42:16,530 --> 00:42:23,220
that's what a Linux kernel does so there

00:42:20,050 --> 00:42:23,220
must be something right there

00:42:24,060 --> 00:42:28,960
it would actually be possible if you

00:42:27,160 --> 00:42:31,660
don't have a github account even you PR

00:42:28,960 --> 00:42:33,070
could trigger mail to somebody and you

00:42:31,660 --> 00:42:35,950
could then have like a cron job that

00:42:33,070 --> 00:42:38,980
pulls in the mails and creates a branch

00:42:35,950 --> 00:42:42,460
on somebody else's account yeah it could

00:42:38,980 --> 00:42:44,170
work you could actually make it work but

00:42:42,460 --> 00:42:47,050
is it creating a github account really

00:42:44,170 --> 00:42:48,609
that hard if this is a role for a

00:42:47,050 --> 00:43:05,100
contribution then I don't think you care

00:42:48,609 --> 00:43:05,100
enough to contribute pocket get lab

00:43:10,200 --> 00:43:18,100
maybe people don't want to have a github

00:43:12,640 --> 00:43:20,440
account yeah sure have to agree with

00:43:18,100 --> 00:43:22,630
stuff yeah yeah that's a good point

00:43:20,440 --> 00:43:24,010
yeah and it could be done then I don't

00:43:22,630 --> 00:43:26,910
think there's any technical hurdle there

00:43:24,010 --> 00:43:29,920
you just need some other way to grab the

00:43:26,910 --> 00:43:31,390
patch and somehow still get it on github

00:43:29,920 --> 00:43:38,350
because that's where we're gonna merge

00:43:31,390 --> 00:43:39,640
it but you could do it sure yes because

00:43:38,350 --> 00:43:41,410
we've never had the question from

00:43:39,640 --> 00:43:42,880
somebody I don't want to have a github

00:43:41,410 --> 00:43:45,430
account but still want to contribute

00:43:42,880 --> 00:43:47,020
back and hasn't happened so I don't

00:43:45,430 --> 00:43:53,109
think we'll spend time on it for now but

00:43:47,020 --> 00:43:57,340
in general you could do it yeah any more

00:43:53,109 --> 00:44:00,010
questions okay if not I uploaded my

00:43:57,340 --> 00:44:03,480
slides on the forum website I hope it

00:44:00,010 --> 00:44:06,630
was recorded so show it to your friends

00:44:03,480 --> 00:44:06,630
thank you

00:44:07,460 --> 00:44:09,520

YouTube URL: https://www.youtube.com/watch?v=OcJB_Yc8kFM


