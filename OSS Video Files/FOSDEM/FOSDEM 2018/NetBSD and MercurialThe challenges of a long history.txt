Title: NetBSD and MercurialThe challenges of a long history
Publication date: 2018-02-03
Playlist: FOSDEM 2018
Description: 
	by JÃ¶rg Sonnenberger

At: FOSDEM 2018
Room: K.3.401
Scheduled start: 2018-02-03 11:05:00+01
Captions: 
	00:00:04,779 --> 00:00:16,790
hello everyone what I'm going

00:00:10,370 --> 00:00:19,550
about one of the attempts to get an FPS

00:00:16,790 --> 00:00:27,070
tetouan to a modern version control

00:00:19,550 --> 00:00:29,840
system so neck PST is a very old project

00:00:27,070 --> 00:00:35,899
historically it's the oldest of the new

00:00:29,840 --> 00:00:40,460
PhDs after a UCB basically got suits and

00:00:35,899 --> 00:00:44,780
out of business when we came to software

00:00:40,460 --> 00:00:48,260
development and we are also one of the

00:00:44,780 --> 00:00:51,679
biggest and oldest CVS repository still

00:00:48,260 --> 00:00:54,920
around and all pretty nice to to move to

00:00:51,679 --> 00:00:58,640
something else most of this talk is not

00:00:54,920 --> 00:01:02,600
really about a net BST most of it

00:00:58,640 --> 00:01:06,380
applies to every other big project as

00:01:02,600 --> 00:01:11,030
well so it would work just as well for

00:01:06,380 --> 00:01:13,370
tdst Atwood with some changes apply to

00:01:11,030 --> 00:01:17,710
FreeBSD as well if they want to get rid

00:01:13,370 --> 00:01:22,070
of subversion so I'm going to talk about

00:01:17,710 --> 00:01:25,820
what happened in the last 25 years since

00:01:22,070 --> 00:01:28,060
we started with CVS I'm going to talk a

00:01:25,820 --> 00:01:33,320
bit about or what we are currently doing

00:01:28,060 --> 00:01:37,220
in in FPS TV together

00:01:33,320 --> 00:01:39,710
- mercurial I'm going to look at a

00:01:37,220 --> 00:01:42,410
couple of issues we have with mercurial

00:01:39,710 --> 00:01:45,380
and what we are going to do to fix them

00:01:42,410 --> 00:01:51,020
in collaboration with mercurial

00:01:45,380 --> 00:01:54,260
developers and I'm also going to take a

00:01:51,020 --> 00:01:57,590
look over what's hopefully going to

00:01:54,260 --> 00:02:06,790
happen in the rest of the year or maybe

00:01:57,590 --> 00:02:13,280
the start of next year so VCS migration

00:02:06,790 --> 00:02:17,000
is very involved project a couple of

00:02:13,280 --> 00:02:19,370
people started to aggressively complain

00:02:17,000 --> 00:02:25,989
about CVS

00:02:19,370 --> 00:02:29,150
in 2005 and one of the results of those

00:02:25,989 --> 00:02:33,319
unstructured complaints was the creation

00:02:29,150 --> 00:02:35,360
of a mailing list so people don't bother

00:02:33,319 --> 00:02:38,230
all the other people that actually try

00:02:35,360 --> 00:02:40,819
to get things done like writing software

00:02:38,230 --> 00:02:44,480
so they they have their own little

00:02:40,819 --> 00:02:51,560
corner where they can be productive or

00:02:44,480 --> 00:02:56,060
not so lots of talks happened no one

00:02:51,560 --> 00:02:58,750
really did anything and this continued

00:02:56,060 --> 00:02:58,750
for quite a while

00:03:00,310 --> 00:03:08,269
sometimes in 2009 to 2010 we have

00:03:05,120 --> 00:03:11,989
basically the situation that a couple of

00:03:08,269 --> 00:03:15,470
tools existed that could do a conversion

00:03:11,989 --> 00:03:21,170
from CVS to subversion or from CVS to

00:03:15,470 --> 00:03:27,260
get the rest sucked all of them so we

00:03:21,170 --> 00:03:31,669
have for example CBS 2's VM and child

00:03:27,260 --> 00:03:34,209
project for converting to get there are

00:03:31,669 --> 00:03:37,280
hopeless slow we are talking about

00:03:34,209 --> 00:03:41,480
converting an FEC source tree and

00:03:37,280 --> 00:03:43,069
something like two days or more that's

00:03:41,480 --> 00:03:48,109
okay if you want to do the conversion

00:03:43,069 --> 00:03:51,290
once but if you actually want to prepare

00:03:48,109 --> 00:03:56,629
migration project you want to have

00:03:51,290 --> 00:04:01,639
something like a life more or less or

00:03:56,629 --> 00:04:06,370
having the lack of a day okay but if you

00:04:01,639 --> 00:04:06,370
have to do a conversion every two days

00:04:07,150 --> 00:04:17,479
that works so well some other tools are

00:04:11,690 --> 00:04:20,859
much faster for example from CVS was

00:04:17,479 --> 00:04:24,979
decently fast at the time the problem is

00:04:20,859 --> 00:04:27,020
it didn't really support CVS that well

00:04:24,979 --> 00:04:30,050
for example

00:04:27,020 --> 00:04:34,280
keyword expansion was completely broken

00:04:30,050 --> 00:04:38,940
branch handling was quite broken imports

00:04:34,280 --> 00:04:47,280
didn't really work that well and so this

00:04:38,940 --> 00:04:48,990
was depressing so well let's open source

00:04:47,280 --> 00:04:51,630
approach if you have a problem with the

00:04:48,990 --> 00:04:54,600
existing things while you invent your

00:04:51,630 --> 00:04:57,840
own so that's basically what I did in

00:04:54,600 --> 00:05:02,430
2010 I sat down and wrote a conversion

00:04:57,840 --> 00:05:05,280
tool from CVS to fossil the primary

00:05:02,430 --> 00:05:08,400
reason for going with fossil was well it

00:05:05,280 --> 00:05:13,070
was new at the time it was BSD license

00:05:08,400 --> 00:05:16,530
which would be attractive it's been

00:05:13,070 --> 00:05:20,880
designed I want database what makes it

00:05:16,530 --> 00:05:23,730
actually quite attractive for crying and

00:05:20,880 --> 00:05:26,790
reporting so if you want to analyze

00:05:23,730 --> 00:05:29,640
what's going to happen in your tree and

00:05:26,790 --> 00:05:32,550
maybe fix up things like that it's very

00:05:29,640 --> 00:05:36,420
handy to have an actual secret database

00:05:32,550 --> 00:05:39,360
and not just a couple of very special

00:05:36,420 --> 00:05:42,380
purpose to it you have to deal with so

00:05:39,360 --> 00:05:46,770
this conversion to live vote was also

00:05:42,380 --> 00:05:51,510
based and using the database because

00:05:46,770 --> 00:05:55,170
while it was a well at the time fifty

00:05:51,510 --> 00:05:58,680
fifteen years of history in CVS you're

00:05:55,170 --> 00:06:03,030
going to run into lots of historical

00:05:58,680 --> 00:06:08,790
garbage like box and CVS that creates

00:06:03,030 --> 00:06:14,070
strange things and people that misuse -

00:06:08,790 --> 00:06:17,040
things like that and again this is an

00:06:14,070 --> 00:06:19,380
ongoing project so you want to fix up

00:06:17,040 --> 00:06:24,690
those things so you don't have to do it

00:06:19,380 --> 00:06:27,900
again and again and again some of the

00:06:24,690 --> 00:06:32,760
requirements for me was I wanted to have

00:06:27,900 --> 00:06:37,410
a conversion tour that s faithful to the

00:06:32,760 --> 00:06:39,420
original repository as possible so he if

00:06:37,410 --> 00:06:43,590
I do a CVS check out and

00:06:39,420 --> 00:06:45,450
given approval and state in the new

00:06:43,590 --> 00:06:49,820
version control system they should be

00:06:45,450 --> 00:06:54,290
exactly the same no differences at all

00:06:49,820 --> 00:06:59,430
it doesn't exactly work their view there

00:06:54,290 --> 00:07:03,870
few special cases where I see what

00:06:59,430 --> 00:07:06,660
expansion can be tricky and like do you

00:07:03,870 --> 00:07:08,940
do a basically a check out of a specific

00:07:06,660 --> 00:07:13,170
provision or a check out of a branch

00:07:08,940 --> 00:07:18,780
that can sometimes be different but for

00:07:13,170 --> 00:07:23,010
every case I have that's a definition of

00:07:18,780 --> 00:07:26,580
the behavior and you could get the same

00:07:23,010 --> 00:07:32,640
output with the right flags from RCS or

00:07:26,580 --> 00:07:37,770
CVS so that's good enough I want you

00:07:32,640 --> 00:07:41,180
also deal with things like vendor

00:07:37,770 --> 00:07:45,060
branches in a way that makes sense

00:07:41,180 --> 00:07:48,510
historically so it's quite tricky if you

00:07:45,060 --> 00:07:52,440
want to deal with CVS to get the state

00:07:48,510 --> 00:07:55,110
of a vendor branch last month or two

00:07:52,440 --> 00:07:56,640
month ago especially if they're local

00:07:55,110 --> 00:07:58,470
changes on top of it

00:07:56,640 --> 00:08:03,900
let's see US doesn't really provide a

00:07:58,470 --> 00:08:07,320
way to extract that bad data but what we

00:08:03,900 --> 00:08:11,010
can do is we pretend we are in a time

00:08:07,320 --> 00:08:13,080
machine and provide a which what you

00:08:11,010 --> 00:08:16,140
would have gotten or if you checked out

00:08:13,080 --> 00:08:19,310
the tree like two months ago that works

00:08:16,140 --> 00:08:25,320
very well but it's also quite effective

00:08:19,310 --> 00:08:28,590
I also want to have a well a crazy

00:08:25,320 --> 00:08:29,760
incremental output totally incremental

00:08:28,590 --> 00:08:33,890
because I'm actually doing a full

00:08:29,760 --> 00:08:39,390
conversion but the output is stable so

00:08:33,890 --> 00:08:44,070
what you get is before repository

00:08:39,390 --> 00:08:48,450
conversion but all the old stuff gets us

00:08:44,070 --> 00:08:51,120
the accepts and get revisions or fossil

00:08:48,450 --> 00:08:53,190
revisions whatever you want to call it

00:08:51,120 --> 00:08:57,570
you are basically only adding a couple

00:08:53,190 --> 00:09:00,230
of new new things on top that couple of

00:08:57,570 --> 00:09:04,460
optimizations to makes us faster but

00:09:00,230 --> 00:09:09,990
it's just like that it's an optimization

00:09:04,460 --> 00:09:13,529
so at the moment modern hardware we have

00:09:09,990 --> 00:09:16,830
a conversion cycle for the source treif

00:09:13,529 --> 00:09:20,490
of about two hours for packaged chairs

00:09:16,830 --> 00:09:23,520
about one hour there's some somewhat

00:09:20,490 --> 00:09:25,350
lettin see added at the beginning to

00:09:23,520 --> 00:09:27,839
make sure that the tree is in a

00:09:25,350 --> 00:09:30,210
consistent state like no one is

00:09:27,839 --> 00:09:34,260
currently committing to a hundred

00:09:30,210 --> 00:09:38,040
thousand files and so you you want to

00:09:34,260 --> 00:09:40,770
avoid getting into a middle of the

00:09:38,040 --> 00:09:43,140
commit part or beyond that and you

00:09:40,770 --> 00:09:45,800
basically get our twelve updates of the

00:09:43,140 --> 00:09:45,800
source tree

00:09:57,390 --> 00:10:00,959
okay Wyatt's

00:10:09,620 --> 00:10:50,810
I hit take the technology yes okay it's

00:10:45,110 --> 00:10:53,900
just wait a minute for that so as I said

00:10:50,810 --> 00:10:54,500
we have an update cycle off about every

00:10:53,900 --> 00:10:58,580
two hours

00:10:54,500 --> 00:11:02,180
this includes updating the more on

00:10:58,580 --> 00:11:05,390
github and updating them they are on bit

00:11:02,180 --> 00:11:08,410
packet so that's actually quite quite a

00:11:05,390 --> 00:11:11,180
bit more work than just converting the

00:11:08,410 --> 00:11:16,480
repository to one system it includes all

00:11:11,180 --> 00:11:20,260
three or three of them the result

00:11:16,480 --> 00:11:20,260
consumptions also quite low

00:11:35,580 --> 00:11:42,680
the the truths are with me to work in

00:11:38,670 --> 00:11:45,420
less than 40 a bite of one and on the

00:11:42,680 --> 00:11:48,630
official nepia steam machine that's

00:11:45,420 --> 00:11:52,560
really the conversion we also have a 32

00:11:48,630 --> 00:11:54,810
gigabyte memory file system for all the

00:11:52,560 --> 00:11:59,040
the things that are we've written all

00:11:54,810 --> 00:12:03,540
the time to keep the the channel on the

00:11:59,040 --> 00:12:16,020
SS SSD slow but if you compare that for

00:12:03,540 --> 00:12:21,600
example with Reaper surgeon from Eric he

00:12:16,020 --> 00:12:25,350
complained recently that he's running

00:12:21,600 --> 00:12:29,010
out of swap space on machines with 64

00:12:25,350 --> 00:12:32,150
gigabyte one and more for projects that

00:12:29,010 --> 00:12:44,490
are essentially comparable in size so

00:12:32,150 --> 00:12:48,320
next Ricky so the the first mercurial

00:12:44,490 --> 00:12:53,220
experiments were based on CBS 2's VN and

00:12:48,320 --> 00:12:55,860
they were not very encouraging so asking

00:12:53,220 --> 00:12:59,990
for the mock entry of the latest

00:12:55,860 --> 00:12:59,990
revision took something like 30 seconds

00:13:00,140 --> 00:13:08,340
because mercurial was trying to do was

00:13:05,340 --> 00:13:11,910
figure out which text exists for the

00:13:08,340 --> 00:13:14,880
supervision and this involved or poverty

00:13:11,910 --> 00:13:17,310
pausing the tech file for every single

00:13:14,880 --> 00:13:20,160
branch in the system and well at the

00:13:17,310 --> 00:13:23,550
moment we have some we have 399 branches

00:13:20,160 --> 00:13:27,450
it was a bit less at the time but the

00:13:23,550 --> 00:13:28,480
the poverty 100 times in the world was

00:13:27,450 --> 00:13:32,560
still

00:13:28,480 --> 00:13:35,079
very slow and there was no tech cache at

00:13:32,560 --> 00:13:38,230
the time so it would have been done over

00:13:35,079 --> 00:13:42,370
and over and over again well it turns

00:13:38,230 --> 00:13:46,959
out this doesn't work so well a couple

00:13:42,370 --> 00:13:49,630
of years later in 2014 Alistair did

00:13:46,959 --> 00:13:53,350
another try based on my conversion true

00:13:49,630 --> 00:13:56,670
and then basically taking the the get

00:13:53,350 --> 00:14:04,000
fast import or output from fossil and

00:13:56,670 --> 00:14:07,089
importing that into a mercurial Wow it

00:14:04,000 --> 00:14:10,540
helped on the material side to get the

00:14:07,089 --> 00:14:15,250
general data support documented properly

00:14:10,540 --> 00:14:18,600
and this reduced the size of the

00:14:15,250 --> 00:14:24,070
mercurial repository from something like

00:14:18,600 --> 00:14:28,600
25 gigabytes to 20 half gigabyte which

00:14:24,070 --> 00:14:31,089
was okay at the time we didn't really

00:14:28,600 --> 00:14:34,149
get branches because well we are going

00:14:31,089 --> 00:14:38,350
via the deeper format and the gif format

00:14:34,149 --> 00:14:43,630
means well you take that they had bats

00:14:38,350 --> 00:14:45,430
of each branch and so since we have

00:14:43,630 --> 00:14:49,290
turned into bookmarks which is not

00:14:45,430 --> 00:14:51,069
really what we wanted this was also

00:14:49,290 --> 00:14:54,610
quite slow

00:14:51,069 --> 00:14:57,220
that's what took two days or so because

00:14:54,610 --> 00:15:07,529
we're the twigs didn't exactly scale and

00:14:57,220 --> 00:15:07,529
sing stop that right so what happened

00:15:07,800 --> 00:15:15,430
another group that wanted to discuss

00:15:12,089 --> 00:15:18,339
well how can you finally get you get and

00:15:15,430 --> 00:15:20,889
because well of course we only have have

00:15:18,339 --> 00:15:27,220
the choice of of taking get because get

00:15:20,889 --> 00:15:31,600
one and everyone is using it so the same

00:15:27,220 --> 00:15:35,410
happened as before nothing lots of talks

00:15:31,600 --> 00:15:39,790
or nothing that actually produced

00:15:35,410 --> 00:15:43,000
something and well I got annoyed by that

00:15:39,790 --> 00:15:49,410
so I kept the Smurfs

00:15:43,000 --> 00:15:52,750
or forbid Ronnie for years and it works

00:15:49,410 --> 00:15:54,760
people still continue we must use get

00:15:52,750 --> 00:15:59,290
but we aren't willing to actually do

00:15:54,760 --> 00:16:03,610
anything so I was I was sitting down and

00:15:59,290 --> 00:16:05,920
see oh well I don't really want get I'm

00:16:03,610 --> 00:16:09,250
quite okay with mercurial but our last

00:16:05,920 --> 00:16:12,100
time didn't work so well so let let's

00:16:09,250 --> 00:16:16,300
sit down and see what changed on the

00:16:12,100 --> 00:16:21,399
material side of things and well let's

00:16:16,300 --> 00:16:23,949
let's take a look there was this famous

00:16:21,399 --> 00:16:26,290
Microsoft guy with developers developers

00:16:23,949 --> 00:16:29,339
to develop a so what what do we actually

00:16:26,290 --> 00:16:33,430
need if you want to switch what are our

00:16:29,339 --> 00:16:34,899
requirements the first one are always

00:16:33,430 --> 00:16:37,389
whilst we should have the version

00:16:34,899 --> 00:16:42,720
control system in the base system you

00:16:37,389 --> 00:16:45,699
know screw that I don't care I don't see

00:16:42,720 --> 00:16:47,740
the point for having any version control

00:16:45,699 --> 00:16:50,980
system in the base in the base system

00:16:47,740 --> 00:16:54,760
it's not really required it shouldn't be

00:16:50,980 --> 00:16:58,740
required to do sensible things like

00:16:54,760 --> 00:17:01,779
updating your system so ignore that

00:16:58,740 --> 00:17:04,929
which also sidesteps a real discussion

00:17:01,779 --> 00:17:08,020
about all we need to import or Python or

00:17:04,929 --> 00:17:11,020
we need to import or Paul or we need to

00:17:08,020 --> 00:17:13,000
import - or whatever dependency the

00:17:11,020 --> 00:17:17,079
version control system has so let's

00:17:13,000 --> 00:17:23,369
ignore that we don't want to have proper

00:17:17,079 --> 00:17:24,750
branches simply because doing any

00:17:23,369 --> 00:17:27,010
[Music]

00:17:24,750 --> 00:17:28,870
operating system project without

00:17:27,010 --> 00:17:33,100
branches especially for release

00:17:28,870 --> 00:17:35,200
management and so on is just insane so

00:17:33,100 --> 00:17:38,260
well you need to check out if it works

00:17:35,200 --> 00:17:41,590
or not and what if it doesn't work what

00:17:38,260 --> 00:17:43,390
is necessary of course we still want to

00:17:41,590 --> 00:17:47,140
have the incremental conversion during

00:17:43,390 --> 00:17:49,160
the test phase and it's also quite

00:17:47,140 --> 00:17:53,030
important to work on

00:17:49,160 --> 00:17:56,840
or smaller machines for example West

00:17:53,030 --> 00:18:00,770
Park West patio pie only has so much

00:17:56,840 --> 00:18:02,210
memory and also not necessarily the

00:18:00,770 --> 00:18:05,840
fastest when it comes to disk

00:18:02,210 --> 00:18:10,190
performance and a lot of other all the

00:18:05,840 --> 00:18:13,910
machines have quite similar restrictions

00:18:10,190 --> 00:18:20,900
it doesn't mean that I care about doing

00:18:13,910 --> 00:18:24,520
development on things like that was

00:18:20,900 --> 00:18:27,860
maybe 32 or 64 megabyte of RAM but

00:18:24,520 --> 00:18:36,050
should still be possible to get the tree

00:18:27,860 --> 00:18:43,160
on a decently machine so what's the

00:18:36,050 --> 00:18:46,550
current state to passing projects one is

00:18:43,160 --> 00:18:50,240
for handling the the fast imports

00:18:46,550 --> 00:18:52,790
tooling or from get and passing it and

00:18:50,240 --> 00:18:56,540
providing an interface and acting with

00:18:52,790 --> 00:18:59,710
it and there's a mercurial extension on

00:18:56,540 --> 00:19:08,530
top of that which basically provides a

00:18:59,710 --> 00:19:11,500
convert sauce it works for branches just

00:19:08,530 --> 00:19:14,480
like it wants to so it basically turns

00:19:11,500 --> 00:19:18,010
the git branch into real mercurial

00:19:14,480 --> 00:19:23,840
branch by delaying some stuff and then

00:19:18,010 --> 00:19:29,390
perfect the material first imported

00:19:23,840 --> 00:19:34,850
pension works not very fast and more

00:19:29,390 --> 00:19:37,580
importantly whenever saw a blob command

00:19:34,850 --> 00:19:39,790
and we get a fast import stream it would

00:19:37,580 --> 00:19:43,700
create a file in a temporary directory

00:19:39,790 --> 00:19:47,750
this is okay if you have like 50,000

00:19:43,700 --> 00:19:48,290
changes in India repository it doesn't

00:19:47,750 --> 00:19:50,080
scale

00:19:48,290 --> 00:19:52,570
if you

00:19:50,080 --> 00:19:56,289
have a million changes and what secured

00:19:52,570 --> 00:20:00,039
a million files in fact one directory so

00:19:56,289 --> 00:20:04,570
first first attempts where to basically

00:20:00,039 --> 00:20:09,580
create a hash tree and later I just went

00:20:04,570 --> 00:20:11,590
with a secure database again it's just

00:20:09,580 --> 00:20:17,860
so much easier to have only a single

00:20:11,590 --> 00:20:21,299
file once you have that it's also quite

00:20:17,860 --> 00:20:24,519
easy to fix it with many problems to get

00:20:21,299 --> 00:20:29,429
incremental operations working the

00:20:24,519 --> 00:20:35,549
biggest problem was that was originally

00:20:29,429 --> 00:20:35,549
the extension was preserving the

00:20:35,610 --> 00:20:43,809
modifier in the fast import stream for

00:20:41,399 --> 00:20:46,059
revision based ends or some true that

00:20:43,809 --> 00:20:51,370
while this is something stable on the

00:20:46,059 --> 00:20:54,190
south side but FSA is actually creating

00:20:51,370 --> 00:20:57,010
this one as a ghost based on the current

00:20:54,190 --> 00:20:59,500
database name so if you recreated the

00:20:57,010 --> 00:21:01,779
original repository you would get

00:20:59,500 --> 00:21:03,909
different identifiers this different

00:21:01,779 --> 00:21:07,240
identifiers would leak onto the

00:21:03,909 --> 00:21:10,750
mercurial side as metadata of the

00:21:07,240 --> 00:21:14,740
commits and therefore the commit IDs

00:21:10,750 --> 00:21:17,380
would end up being different and turns

00:21:14,740 --> 00:21:22,149
out packet is not very happy if you have

00:21:17,380 --> 00:21:28,179
more than a couple of thousand pet

00:21:22,149 --> 00:21:32,460
revisions and branches because HTTP

00:21:28,179 --> 00:21:34,600
header sizes are sometimes limited by

00:21:32,460 --> 00:21:38,889
proxy components and things like that

00:21:34,600 --> 00:21:43,600
and if you have too many hats they will

00:21:38,889 --> 00:21:49,840
blow up when you try to catch something

00:21:43,600 --> 00:21:52,990
and not very happy but what we are now

00:21:49,840 --> 00:21:57,220
at the point where all 399 branches and

00:21:52,990 --> 00:21:59,350
at PST can be found on bit packet you

00:21:57,220 --> 00:22:00,340
can actually look at them which is

00:21:59,350 --> 00:22:03,400
something that

00:22:00,340 --> 00:22:06,580
work for a couple of years on DTaP you

00:22:03,400 --> 00:22:10,750
would always get a timeout when you open

00:22:06,580 --> 00:22:13,330
the branch page and they fixed it in the

00:22:10,750 --> 00:22:18,520
meantime by actually offering pagination

00:22:13,330 --> 00:22:20,950
but that chips surprisingly long estate

00:22:18,520 --> 00:22:22,900
since I don't have a pagination for

00:22:20,950 --> 00:22:27,179
directory listings which is a problem

00:22:22,900 --> 00:22:27,179
for packaged source in some cases but

00:22:27,960 --> 00:22:36,399
the repository we have now is comparable

00:22:31,740 --> 00:22:42,390
in size and complexity toward Mozilla

00:22:36,399 --> 00:22:45,279
house which is the biggest mainstream

00:22:42,390 --> 00:22:45,970
open source repository in mercurial

00:22:45,279 --> 00:22:52,690
right now

00:22:45,970 --> 00:22:56,529
so we had pretty similar issues in some

00:22:52,690 --> 00:23:00,370
cases so there are also quite happy if

00:22:56,529 --> 00:23:03,899
we are fixing things there are a couple

00:23:00,370 --> 00:23:06,640
of larger repositories with mercurial

00:23:03,899 --> 00:23:10,830
Facebook for example but Facebook also

00:23:06,640 --> 00:23:15,429
has its own server implementation so

00:23:10,830 --> 00:23:22,179
things a bit different but what we can

00:23:15,429 --> 00:23:26,080
do with this tree how does it work so

00:23:22,179 --> 00:23:27,190
let's take a look at cloning well not

00:23:26,080 --> 00:23:29,440
really

00:23:27,190 --> 00:23:34,690
the interesting part about the mercurial

00:23:29,440 --> 00:23:38,980
design is a couple of things that share

00:23:34,690 --> 00:23:42,039
the same code and just have a bit

00:23:38,980 --> 00:23:44,850
different plumbing and clone is one of

00:23:42,039 --> 00:23:49,260
them so basically cloning and pulling

00:23:44,850 --> 00:23:53,080
goes through almost the same code and

00:23:49,260 --> 00:23:58,360
for changes you can basically simulate

00:23:53,080 --> 00:24:00,159
what the the network based communication

00:23:58,360 --> 00:24:05,350
is doing they're just creating a bundle

00:24:00,159 --> 00:24:08,549
and asking if the system was unbundle to

00:24:05,350 --> 00:24:09,990
apply it locally the only difference is

00:24:08,549 --> 00:24:12,900
differences

00:24:09,990 --> 00:24:15,360
clone or poor which creates a spangled

00:24:12,900 --> 00:24:19,590
dynamically whereas we can actually

00:24:15,360 --> 00:24:22,130
create it offline and this has the very

00:24:19,590 --> 00:24:25,410
nice advantage that you have a easy

00:24:22,130 --> 00:24:29,150
reproduce ability which is very

00:24:25,410 --> 00:24:32,300
important if you want to benchmark sings

00:24:29,150 --> 00:24:38,490
this thing's I'm well there's one

00:24:32,300 --> 00:24:42,270
exception if you do streaming clones it

00:24:38,490 --> 00:24:48,360
will not create an actual in the normal

00:24:42,270 --> 00:24:50,070
way but basically tar up the repository

00:24:48,360 --> 00:24:54,830
on the server side send it to the client

00:24:50,070 --> 00:24:57,450
and the kind just extracted which has a

00:24:54,830 --> 00:25:00,420
number of implications we'll come back

00:24:57,450 --> 00:25:03,480
to that later so the primary sense of

00:25:00,420 --> 00:25:06,780
interest for me are the memory use on

00:25:03,480 --> 00:25:10,320
the client because that's the one

00:25:06,780 --> 00:25:13,350
resource that we can't fix I'm in CPU

00:25:10,320 --> 00:25:16,020
time you can always wait a bit longer if

00:25:13,350 --> 00:25:19,290
it needs too much run and goes into

00:25:16,020 --> 00:25:22,800
heavy swapping or you don't want to wait

00:25:19,290 --> 00:25:24,800
that long and the other important part

00:25:22,800 --> 00:25:28,080
of course is network bandwidth because

00:25:24,800 --> 00:25:31,650
while we are not Facebook we are not to

00:25:28,080 --> 00:25:34,950
do we have quite a few constraints on

00:25:31,650 --> 00:25:39,120
how much all servers can actually send

00:25:34,950 --> 00:25:42,780
our what is only of secondary interest

00:25:39,120 --> 00:25:46,830
is CPU load on client and server on the

00:25:42,780 --> 00:25:50,130
client or get a faster machine if you

00:25:46,830 --> 00:25:53,160
don't want to wait on the server right

00:25:50,130 --> 00:25:55,550
now we hope that it simply won't matter

00:25:53,160 --> 00:25:55,550
enough

00:25:59,340 --> 00:26:08,509
so as baseline I'm creating a bundle of

00:26:03,990 --> 00:26:14,970
the repository compress it with

00:26:08,509 --> 00:26:18,659
Facebook's and SST level 2022 so pretty

00:26:14,970 --> 00:26:24,240
much the biggest possible use whatever

00:26:18,659 --> 00:26:26,549
large we know you can and this

00:26:24,240 --> 00:26:30,509
compresses all pretty well I mean we get

00:26:26,549 --> 00:26:33,450
a bundle size of 840 megabyte or which

00:26:30,509 --> 00:26:37,409
is quite good especially if you compare

00:26:33,450 --> 00:26:39,539
to simply compressing or the OCS files

00:26:37,409 --> 00:26:45,320
for example it's those are actually

00:26:39,539 --> 00:26:49,619
larger and trying to apply that bundle

00:26:45,320 --> 00:26:53,129
for the the old release version of

00:26:49,619 --> 00:26:57,899
Mercurio required something like 827

00:26:53,129 --> 00:27:00,570
megabyte on AMD 64 needed something like

00:26:57,899 --> 00:27:04,440
eight and a half minutes and that was

00:27:00,570 --> 00:27:07,340
okay so what's going on here let's try

00:27:04,440 --> 00:27:11,909
to take a look and turns out there was

00:27:07,340 --> 00:27:14,730
an index being kept off the but deficits

00:27:11,909 --> 00:27:18,389
in the bundle for every commit and every

00:27:14,730 --> 00:27:19,470
file and so on and nothing really used

00:27:18,389 --> 00:27:24,629
that index

00:27:19,470 --> 00:27:28,369
so this 118 megabyte a completely

00:27:24,629 --> 00:27:32,039
useless data and that was fixed and

00:27:28,369 --> 00:27:36,450
since then we had just a bit over six

00:27:32,039 --> 00:27:39,299
hundred megabyte of pic memory use it

00:27:36,450 --> 00:27:40,999
even got a bit faster so that was very

00:27:39,299 --> 00:27:44,759
good

00:27:40,999 --> 00:27:48,809
one of this one of the concerns were

00:27:44,759 --> 00:27:51,090
that the large window and from the

00:27:48,809 --> 00:27:53,700
compression algorithm is also going to

00:27:51,090 --> 00:27:55,110
increase memory use patterns order it

00:27:53,700 --> 00:27:59,179
has almost no impact

00:27:55,110 --> 00:27:59,179
so our perfect

00:28:01,480 --> 00:28:08,769
so let's take a more detailed look into

00:28:04,929 --> 00:28:12,279
what happened a linear increase

00:28:08,769 --> 00:28:14,860
of the the process size over time so it

00:28:12,279 --> 00:28:17,370
definitely the bookkeeping or things

00:28:14,860 --> 00:28:17,370
going on

00:28:17,760 --> 00:28:24,720
once you find very soon as that person

00:28:21,340 --> 00:28:29,350
has a surprisingly large overhead for

00:28:24,720 --> 00:28:32,260
objects any number any string or

00:28:29,350 --> 00:28:35,710
basically requires at least thirty to

00:28:32,260 --> 00:28:39,639
five bytes of memory or integers

00:28:35,710 --> 00:28:41,679
sometimes go into 24 bite but it's still

00:28:39,639 --> 00:28:47,950
much higher overhead than you would

00:28:41,679 --> 00:28:50,940
expect in C and the main memory hawk

00:28:47,950 --> 00:28:55,000
that remains as a transaction object

00:28:50,940 --> 00:28:58,059
itself we're basically a mercurial keeps

00:28:55,000 --> 00:29:01,360
track of the changes it's currently

00:28:58,059 --> 00:29:04,570
trying to apply so if it has to abort it

00:29:01,360 --> 00:29:06,970
can be reset everything and also our

00:29:04,570 --> 00:29:10,179
various extensions use this transaction

00:29:06,970 --> 00:29:14,049
object to figure out what what changed

00:29:10,179 --> 00:29:16,840
so you can for example sent sent an

00:29:14,049 --> 00:29:19,179
email on incoming changes things like

00:29:16,840 --> 00:29:22,840
that and they need to know of course

00:29:19,179 --> 00:29:25,360
what happened as well and this

00:29:22,840 --> 00:29:28,779
transaction object uses something like

00:29:25,360 --> 00:29:30,880
200 megabyte or out of the 600 so

00:29:28,779 --> 00:29:36,809
there's quite a lot of potential for

00:29:30,880 --> 00:29:40,380
fixing that the the phase transitions

00:29:36,809 --> 00:29:45,130
take about 40 megabytes

00:29:40,380 --> 00:29:49,029
I'm looking at almost completely

00:29:45,130 --> 00:29:51,549
eliminating this the truncation Maps

00:29:49,029 --> 00:29:55,240
where we're basically keeps track of or

00:29:51,549 --> 00:29:58,389
with which repository file got new data

00:29:55,240 --> 00:30:02,799
and where was before need something like

00:29:58,389 --> 00:30:06,010
17 megabytes packed parts read where

00:30:02,799 --> 00:30:08,500
mercurial would stop using one file for

00:30:06,010 --> 00:30:11,879
every person the repository would help

00:30:08,500 --> 00:30:14,250
to remove most of that it's tricky and

00:30:11,879 --> 00:30:18,090
going directly to the on this

00:30:14,250 --> 00:30:23,080
for the files would also have help but

00:30:18,090 --> 00:30:26,650
they all have some implications for that

00:30:23,080 --> 00:30:28,660
are very deep so this is nothing easy

00:30:26,650 --> 00:30:35,049
thing to fix but it's something we are

00:30:28,660 --> 00:30:37,240
looking at one thing I was testing is

00:30:35,049 --> 00:30:41,470
what what happened if we don't applied

00:30:37,240 --> 00:30:46,720
the history in one go but basically

00:30:41,470 --> 00:30:50,679
slice up the history into yearly changes

00:30:46,720 --> 00:30:54,450
what this overhead of course and less

00:30:50,679 --> 00:30:59,049
redundancy for the compression to remove

00:30:54,450 --> 00:31:03,880
it also helps a lot to reduce the memory

00:30:59,049 --> 00:31:08,549
use so with that we are a bit slower but

00:31:03,880 --> 00:31:11,320
take only about 360 megabyte of memory

00:31:08,549 --> 00:31:18,070
this is mostly because the transactions

00:31:11,320 --> 00:31:20,590
themselves are smaller I mentioned

00:31:18,070 --> 00:31:24,700
earlier there's a special options for

00:31:20,590 --> 00:31:29,020
cloning or the streaming clones for

00:31:24,700 --> 00:31:32,350
testing this was done over the local the

00:31:29,020 --> 00:31:35,049
local interface it has to transfer all

00:31:32,350 --> 00:31:38,710
the files all without removing

00:31:35,049 --> 00:31:41,830
redundancy between the fight so it it's

00:31:38,710 --> 00:31:46,679
going to transfer a lot more at the same

00:31:41,830 --> 00:31:48,460
at the same time it's also quite dumb so

00:31:46,679 --> 00:31:51,730
for the client

00:31:48,460 --> 00:31:55,990
he's only having 60 megabyte which is

00:31:51,730 --> 00:32:02,890
much better than did if you ask it to

00:31:55,990 --> 00:32:05,830
ignore all the history and this is

00:32:02,890 --> 00:32:07,960
normally only attractive if you are for

00:32:05,830 --> 00:32:11,440
a very fast network connection to the

00:32:07,960 --> 00:32:16,820
server well it turns out it's also

00:32:11,440 --> 00:32:20,990
helpful or if you want to reduce with

00:32:16,820 --> 00:32:22,940
or on the client and it hasn't all or

00:32:20,990 --> 00:32:25,070
nothing selectivity you can base you

00:32:22,940 --> 00:32:29,440
can't basically say I want only one

00:32:25,070 --> 00:32:32,600
branch or so which is a restriction and

00:32:29,440 --> 00:32:36,170
the server the client has have to be

00:32:32,600 --> 00:32:39,530
pretty pretty much comfortable in the

00:32:36,170 --> 00:32:43,790
repository for month they are using so

00:32:39,530 --> 00:32:51,380
this would also mean keeping them mostly

00:32:43,790 --> 00:32:54,140
and think this was actually actually a

00:32:51,380 --> 00:32:58,070
bit annoying when I was doing the

00:32:54,140 --> 00:33:00,380
testing and preparation for this talk so

00:32:58,070 --> 00:33:04,580
we are talking about the fully cache

00:33:00,380 --> 00:33:07,510
case and we are looking at the

00:33:04,580 --> 00:33:09,800
differences between two new PST branches

00:33:07,510 --> 00:33:13,130
that actually do for something like

00:33:09,800 --> 00:33:18,170
eight hundred megabytes so it's expected

00:33:13,130 --> 00:33:22,640
to take a bit but turns out mercurial

00:33:18,170 --> 00:33:27,380
was surprisingly slow yeah like it took

00:33:22,640 --> 00:33:31,970
three times as long as CVS and yes

00:33:27,380 --> 00:33:34,520
compared to get deep primal primary wins

00:33:31,970 --> 00:33:38,120
here because it has to do very few

00:33:34,520 --> 00:33:41,360
operations on the DFS layer the only has

00:33:38,120 --> 00:33:44,920
to open a handful of files and then use

00:33:41,360 --> 00:33:48,140
memory mapping faxing accessing them

00:33:44,920 --> 00:33:51,710
mercurial doesn't have that benefit at

00:33:48,140 --> 00:33:54,830
the moment we are looking at how it

00:33:51,710 --> 00:33:59,510
could be done but it's not there yet

00:33:54,830 --> 00:34:05,500
CVS has one advantage here that the the

00:33:59,510 --> 00:34:05,500
RCS format basically keeps the diffs in

00:34:05,530 --> 00:34:16,250
line base so it can actually a sidestep

00:34:09,669 --> 00:34:21,350
quite a few computations here let's go

00:34:16,250 --> 00:34:24,590
file it oh wow so terms of mercurial

00:34:21,350 --> 00:34:26,919
spends about seventy percent of the

00:34:24,590 --> 00:34:32,740
execution time of the

00:34:26,919 --> 00:34:37,990
of command writing output one of the

00:34:32,740 --> 00:34:42,700
fixes was to basically clustered write

00:34:37,990 --> 00:34:49,569
more aggressively so instead of doing

00:34:42,700 --> 00:34:57,760
one write output it's going to do that

00:34:49,569 --> 00:34:59,859
for 500,000 lines and this matters

00:34:57,760 --> 00:35:01,809
because while we had we are doing output

00:34:59,859 --> 00:35:04,180
buffering that output buffering is line

00:35:01,809 --> 00:35:06,970
based and if you are sending one line

00:35:04,180 --> 00:35:07,569
provide it's effectively not bothering

00:35:06,970 --> 00:35:11,079
at all

00:35:07,569 --> 00:35:17,079
so this basically cut the time almost in

00:35:11,079 --> 00:35:20,200
half it helps mercurial are also

00:35:17,079 --> 00:35:22,119
important to do a join of the buffer you

00:35:20,200 --> 00:35:24,670
want to write and then I'll write it in

00:35:22,119 --> 00:35:26,710
one go so basically you had doing one

00:35:24,670 --> 00:35:30,880
allocation and one right instead of

00:35:26,710 --> 00:35:33,180
doing many small writes and we also did

00:35:30,880 --> 00:35:38,010
a couple of optimizations to the

00:35:33,180 --> 00:35:41,650
algorithm that's creating the dips so

00:35:38,010 --> 00:35:46,720
we're not exactly at the CVS time yet

00:35:41,650 --> 00:35:50,170
but it's getting better and now the time

00:35:46,720 --> 00:35:52,839
is spent on things like pausing the

00:35:50,170 --> 00:35:53,799
repository which again it's not that

00:35:52,839 --> 00:35:56,700
easy to fix

00:35:53,799 --> 00:36:03,880
so the low-hanging fruits are gone but

00:35:56,700 --> 00:36:06,720
we know what's work on right the ref log

00:36:03,880 --> 00:36:11,349
handling is basically the new hotspot

00:36:06,720 --> 00:36:16,780
I'm looking at doing proper indexing of

00:36:11,349 --> 00:36:19,990
the defaults but it's difficult and of

00:36:16,780 --> 00:36:22,000
course it's a bit annoying that the

00:36:19,990 --> 00:36:23,920
profiling output will still show a

00:36:22,000 --> 00:36:26,980
couple of functions that are no longer

00:36:23,920 --> 00:36:30,119
performance relevant simply because

00:36:26,980 --> 00:36:37,319
the instrumentation over had changes

00:36:30,119 --> 00:36:39,730
performance the last big item is

00:36:37,319 --> 00:36:42,460
mercurial has this feature called clone

00:36:39,730 --> 00:36:45,819
bundles well when you do a clone or a

00:36:42,460 --> 00:36:48,940
server basically tells you you know my

00:36:45,819 --> 00:36:51,579
administrator has prepared with nice

00:36:48,940 --> 00:36:56,380
bundles for you in advance you can find

00:36:51,579 --> 00:36:58,710
them at the following locations and you

00:36:56,380 --> 00:37:02,589
can put put them for example on the CDN

00:36:58,710 --> 00:37:05,710
instead of the main server the problem

00:37:02,589 --> 00:37:09,460
is all this clone bundle support at the

00:37:05,710 --> 00:37:12,369
moment assumes you have a second second

00:37:09,460 --> 00:37:17,200
server that you are connecting to out of

00:37:12,369 --> 00:37:20,260
band there's a large file extensions

00:37:17,200 --> 00:37:25,059
some support for in-stream or 10 minutes

00:37:20,260 --> 00:37:28,359
now but it's not what we really want to

00:37:25,059 --> 00:37:32,140
have part of the problem from that PSD

00:37:28,359 --> 00:37:37,210
is that CDN appears to dot or is hosted

00:37:32,140 --> 00:37:40,210
by a third party so we don't really

00:37:37,210 --> 00:37:43,390
believe that fastly wants to hack us but

00:37:40,210 --> 00:37:47,559
we don't really put too much face into

00:37:43,390 --> 00:37:51,490
them either so it's a bit difficult to

00:37:47,559 --> 00:37:54,690
verify that the cloning has actually

00:37:51,490 --> 00:37:58,109
gotten or this stated should have gotten

00:37:54,690 --> 00:38:01,569
it's somewhat possible to do it with

00:37:58,109 --> 00:38:04,059
incoming and outgoing or commands to

00:38:01,569 --> 00:38:08,230
basically see if we got more or less

00:38:04,059 --> 00:38:12,280
than we should have but it's not perfect

00:38:08,230 --> 00:38:20,109
it doesn't work well or with absolution

00:38:12,280 --> 00:38:25,750
markers and things like that so one idea

00:38:20,109 --> 00:38:28,270
to fix out as the operation on the the

00:38:25,750 --> 00:38:33,970
wire protocol of Mercurio basically

00:38:28,270 --> 00:38:36,240
could just use a precomputed fire this

00:38:33,970 --> 00:38:41,460
is essentially what

00:38:36,240 --> 00:38:43,770
vandals do and the server already knows

00:38:41,460 --> 00:38:46,020
what the client wants the server already

00:38:43,770 --> 00:38:49,740
knows what the sort of what the client

00:38:46,020 --> 00:38:53,040
has so it could select a matching bundle

00:38:49,740 --> 00:38:57,150
the only problem if the client might get

00:38:53,040 --> 00:38:58,770
a lesson it asked for and at the moment

00:38:57,150 --> 00:39:02,960
or the current is not very happy with

00:38:58,770 --> 00:39:07,740
Saturday so the client has to be fixed -

00:39:02,960 --> 00:39:10,020
to deal with that Petrus for that are on

00:39:07,740 --> 00:39:12,869
the review or the performance is

00:39:10,020 --> 00:39:18,060
actually or very promising so the

00:39:12,869 --> 00:39:23,190
overheads is very low and I'm hoping to

00:39:18,060 --> 00:39:27,359
get that in soon so what's going to

00:39:23,190 --> 00:39:29,690
happen in the future on the mercurial

00:39:27,359 --> 00:39:29,690
side

00:39:29,839 --> 00:39:36,380
primarily reduced memory overhead of

00:39:32,940 --> 00:39:41,520
transactions that's going to help

00:39:36,380 --> 00:39:46,560
everyone looking at implementing pack

00:39:41,520 --> 00:39:49,080
parts it's definitely also very useful

00:39:46,560 --> 00:39:50,970
and of course to not profiling there are

00:39:49,080 --> 00:39:53,160
a lot of other commands or I haven't

00:39:50,970 --> 00:39:56,010
looked at yet because they are not as

00:39:53,160 --> 00:39:59,940
crucial but I expect there are still

00:39:56,010 --> 00:40:01,740
quite a few and low hanging fruits so if

00:39:59,940 --> 00:40:05,940
someone wants to work on it for example

00:40:01,740 --> 00:40:10,200
for the sum of codes be my guest come to

00:40:05,940 --> 00:40:15,570
me on the net PSD side

00:40:10,200 --> 00:40:18,480
it's basically finishing documentation

00:40:15,570 --> 00:40:22,260
for good workflow so how are developers

00:40:18,480 --> 00:40:25,080
supposed to use a system and how are

00:40:22,260 --> 00:40:26,969
they supposed to do you think they are

00:40:25,080 --> 00:40:29,819
doing and see us now

00:40:26,969 --> 00:40:34,679
because things are of course different

00:40:29,819 --> 00:40:38,219
so it's a couple of adjustment and we

00:40:34,679 --> 00:40:41,369
have some tooling like the big cluster

00:40:38,219 --> 00:40:44,699
the automatic progression testing and

00:40:41,369 --> 00:40:47,910
and so on and they either need to be

00:40:44,699 --> 00:40:50,849
adjusted to not use CVS anymore but

00:40:47,910 --> 00:40:54,239
mercurial or what we need to look at new

00:40:50,849 --> 00:40:58,289
tools that serves the same purpose

00:40:54,239 --> 00:41:01,380
but can use mercurial and what the final

00:40:58,289 --> 00:41:05,219
point is of course convince the other

00:41:01,380 --> 00:41:10,289
developers that they no longer want to

00:41:05,219 --> 00:41:16,289
have CVS and which color the budget

00:41:10,289 --> 00:41:23,369
should have so do you have any questions

00:41:16,289 --> 00:41:25,060
for me and that is thanks for your

00:41:23,369 --> 00:41:31,329
attention

00:41:25,060 --> 00:41:31,329

YouTube URL: https://www.youtube.com/watch?v=6i6CirmO0Gs


