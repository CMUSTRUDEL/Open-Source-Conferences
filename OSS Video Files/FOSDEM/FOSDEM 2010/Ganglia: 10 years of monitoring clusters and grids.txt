Title: Ganglia: 10 years of monitoring clusters and grids
Publication date: 2011-12-22
Playlist: FOSDEM 2010
Description: 
	By Bernard Li

During the talk Bernard will give an overview of Ganglia's strong points and it's technical architecture.

This talk will start off with a brief overview of the early beginnings of the project and how it has become the de facto standard for monitoring clusters and grids. The talk will then dive into the technical architecture of the system, discuss scalability issues, challenges ahead in adapting the software for cloud environments and other future developments. If you work with a lot of computers, then this talk is for you.

Ganglia is a scalable system performance monitoring software started by Matt Massie in 1999 while he was at the University of California, Berkeley working on the Millennium Project. Since the inception of the project, it has seen 40+ releases and 299,208 total downloads recorded by SourceForge.net. Ganglia is simple to install and use and is available on most UNIX platforms. 30+ system metrics such as CPU load, memory usage, network traffic are collected by default and can be further extended via a command line metric reporting tool or pluggable modules written in C or Python. Ganglia is being used extensively all over the world by organizations large and small.

FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:13,040 --> 00:00:19,720
okay so I'm

00:00:15,460 --> 00:00:21,910
get started so hello everyone my name is

00:00:19,720 --> 00:00:24,430
Bernard Lee I'm one of the project

00:00:21,910 --> 00:00:25,810
administrators of the Gangu project so

00:00:24,430 --> 00:00:29,079
today I'm going to talk to you about

00:00:25,810 --> 00:00:31,360
gang glue which is a monitoring software

00:00:29,079 --> 00:00:34,059
and the project has been around you know

00:00:31,360 --> 00:00:35,830
for for 10 years so we're going to tell

00:00:34,059 --> 00:00:38,500
you about what you know what the

00:00:35,830 --> 00:00:41,339
software does and how why you will want

00:00:38,500 --> 00:00:43,780
to use it to monitor your computers

00:00:41,339 --> 00:00:48,729
specifically you know clusters grades or

00:00:43,780 --> 00:00:50,440
just web farms so actually before we

00:00:48,729 --> 00:00:54,670
begin I just wanted to have a quick poll

00:00:50,440 --> 00:00:58,629
so who has heard of tangra okay so who

00:00:54,670 --> 00:01:02,439
has actually used it okay so it seems

00:00:58,629 --> 00:01:04,299
like a fair amount so maybe you guys

00:01:02,439 --> 00:01:09,340
know you know quite a bit about it

00:01:04,299 --> 00:01:11,710
already so okay so well actually let me

00:01:09,340 --> 00:01:14,110
just briefly introduce myself so I mean

00:01:11,710 --> 00:01:16,540
I'm Bernard so I've been working on high

00:01:14,110 --> 00:01:18,729
performance computing related open

00:01:16,540 --> 00:01:20,980
source software so I've worked on

00:01:18,729 --> 00:01:23,230
provisioning tools like system imager

00:01:20,980 --> 00:01:26,830
Oscar and monitoring side you know

00:01:23,230 --> 00:01:28,300
working on ganglia so that's for the

00:01:26,830 --> 00:01:30,400
past few years that's what I've been

00:01:28,300 --> 00:01:34,500
working you know just getting a Volvo a

00:01:30,400 --> 00:01:34,500
lot of the open source software so

00:01:35,850 --> 00:01:43,290
ganglia so what is ganglia so the goal

00:01:39,520 --> 00:01:46,500
is basically this software is to gather

00:01:43,290 --> 00:01:48,970
system resource metrics in real time and

00:01:46,500 --> 00:01:52,150
so that you can like figure out what

00:01:48,970 --> 00:01:56,080
your your your hose is doing so you know

00:01:52,150 --> 00:01:58,420
you have a you know even like one hose

00:01:56,080 --> 00:01:59,890
to hundreds or thousands of computers

00:01:58,420 --> 00:02:01,870
you know you had you set it up and

00:01:59,890 --> 00:02:04,270
they're running but you want to find out

00:02:01,870 --> 00:02:06,600
like what you know what the system

00:02:04,270 --> 00:02:09,129
resource is like and what is doing so

00:02:06,600 --> 00:02:11,519
when you have such a system you know you

00:02:09,129 --> 00:02:13,720
want to have a software that gives you a

00:02:11,519 --> 00:02:20,470
centralized view of what's going on

00:02:13,720 --> 00:02:24,400
so that's what danglers go is so the

00:02:20,470 --> 00:02:27,370
project started around 1999 by masse so

00:02:24,400 --> 00:02:28,580
it started at University of California

00:02:27,370 --> 00:02:31,130
at Berkeley so

00:02:28,580 --> 00:02:34,160
part of the millennium project so it's a

00:02:31,130 --> 00:02:37,100
project you know that was involved with

00:02:34,160 --> 00:02:39,470
building clusters and they want to find

00:02:37,100 --> 00:02:42,410
out what's you know what the clusters

00:02:39,470 --> 00:02:44,210
you know doing like you know how how is

00:02:42,410 --> 00:02:46,820
system load is and things like that so

00:02:44,210 --> 00:02:50,150
Matt wrote this software and you know

00:02:46,820 --> 00:02:52,580
for the test ten years basically you

00:02:50,150 --> 00:02:54,650
think of monitoring for cluster you know

00:02:52,580 --> 00:02:57,400
you think of ganglia is somewhat become

00:02:54,650 --> 00:03:02,360
the de facto standard for for monitoring

00:02:57,400 --> 00:03:04,580
system resources so it's a very

00:03:02,360 --> 00:03:06,950
lightweight process so when you monitor

00:03:04,580 --> 00:03:09,260
like you know these systems you don't

00:03:06,950 --> 00:03:10,880
want your monitoring daemon to actually

00:03:09,260 --> 00:03:12,709
take up a lot of resources because that

00:03:10,880 --> 00:03:15,620
you know that would be very wasteful you

00:03:12,709 --> 00:03:17,750
actually want to do real work on on your

00:03:15,620 --> 00:03:19,850
computer so I mean if you're if you're

00:03:17,750 --> 00:03:21,560
monitoring software's in the way of that

00:03:19,850 --> 00:03:23,570
that sort of defeats the purpose so it's

00:03:21,560 --> 00:03:26,420
very lightweight in terms of like CPU

00:03:23,570 --> 00:03:29,660
and memory usage is doesn't doesn't use

00:03:26,420 --> 00:03:31,640
that much resources and basically you

00:03:29,660 --> 00:03:35,180
have a monitoring daemon called G Mon D

00:03:31,640 --> 00:03:37,430
and you run it on every node and there's

00:03:35,180 --> 00:03:39,890
a basically all the metrics that's

00:03:37,430 --> 00:03:41,720
collected on each hose is aggregated on

00:03:39,890 --> 00:03:45,560
a separate server which runs the G

00:03:41,720 --> 00:03:47,780
melody daemon and you know these metrics

00:03:45,560 --> 00:03:50,690
are aggregated into round-robin database

00:03:47,780 --> 00:03:53,959
table so our D files are basically x

00:03:50,690 --> 00:03:56,150
slice data so it's it's good for like

00:03:53,959 --> 00:03:57,950
storing these metric data so that you

00:03:56,150 --> 00:04:00,860
can go back in time and look at you know

00:03:57,950 --> 00:04:06,380
what what's what your sister has to be

00:04:00,860 --> 00:04:09,220
doing in in the past again you know it's

00:04:06,380 --> 00:04:12,500
a very lightweight agent it supports

00:04:09,220 --> 00:04:16,669
most you know Unix Linux systems and

00:04:12,500 --> 00:04:20,000
even Windows via sequinned so basically

00:04:16,669 --> 00:04:22,370
the code you know it you can run it on

00:04:20,000 --> 00:04:26,030
anything and and it doesn't matter

00:04:22,370 --> 00:04:28,340
whether you're running the ganglia on

00:04:26,030 --> 00:04:30,380
like these different OSS they will all

00:04:28,340 --> 00:04:33,740
work with each other so you can have a

00:04:30,380 --> 00:04:35,780
mix sort of hybrid system as in many

00:04:33,740 --> 00:04:37,289
large corporations you would run

00:04:35,780 --> 00:04:41,599
different OSS and then you can

00:04:37,289 --> 00:04:41,599
use 1 2 to basically monitor everything

00:04:43,309 --> 00:04:53,749
keep pressing the wrong button okay so

00:04:46,529 --> 00:04:58,199
it's BSD license open source license so

00:04:53,749 --> 00:05:00,240
so what I'm going to talk about so

00:04:58,199 --> 00:05:02,610
basically what you can do with this

00:05:00,240 --> 00:05:05,009
software you know what does it look like

00:05:02,610 --> 00:05:07,860
when you actually use it as a user and a

00:05:05,009 --> 00:05:10,499
bit about the architecture and some you

00:05:07,860 --> 00:05:14,639
know advanced topics like so by default

00:05:10,499 --> 00:05:16,860
ganglia would collect 30 or so metrics

00:05:14,639 --> 00:05:20,490
about your hosts like you know CPU load

00:05:16,860 --> 00:05:22,649
memory network and all that stuff so

00:05:20,490 --> 00:05:25,050
that's the default one that's you know

00:05:22,649 --> 00:05:27,149
collected by default but if he wants to

00:05:25,050 --> 00:05:29,550
collect your own metrics like how your

00:05:27,149 --> 00:05:31,740
Apache server is doing you know your mam

00:05:29,550 --> 00:05:35,699
cache D or like just basically anything

00:05:31,740 --> 00:05:37,259
you can somehow collect from the

00:05:35,699 --> 00:05:39,990
operating system you can plug these

00:05:37,259 --> 00:05:44,959
information into into canvas so I'll go

00:05:39,990 --> 00:05:48,779
into it a little bit in detail how what

00:05:44,959 --> 00:05:51,300
you know ganglia is very scalable but so

00:05:48,779 --> 00:05:53,370
we're going to talk about some some

00:05:51,300 --> 00:05:55,649
issues when you when you run into like

00:05:53,370 --> 00:05:58,919
you know thousands of hoes and or tens

00:05:55,649 --> 00:06:00,959
of thousands of hoes and you know cloud

00:05:58,919 --> 00:06:04,099
computing is quite a hot topic nowadays

00:06:00,959 --> 00:06:08,519
so just just to give you some brief

00:06:04,099 --> 00:06:10,169
notes about what you know the

00:06:08,519 --> 00:06:12,930
environment is like if you want to use

00:06:10,169 --> 00:06:17,219
gangly to monitor and then we'll have

00:06:12,930 --> 00:06:19,469
Daniel Pocock just come up and give some

00:06:17,219 --> 00:06:22,199
user testimonial and then you know

00:06:19,469 --> 00:06:24,089
basically oh and with you know how you

00:06:22,199 --> 00:06:30,059
can get started and get involved with

00:06:24,089 --> 00:06:31,949
the project so typical users you know

00:06:30,059 --> 00:06:33,869
the project came about with from

00:06:31,949 --> 00:06:36,180
high-performance computing so these are

00:06:33,869 --> 00:06:38,490
clusters of computers basically have one

00:06:36,180 --> 00:06:40,680
go and it's just to crunch a lot of

00:06:38,490 --> 00:06:43,649
numbers you know run a lot of parallel

00:06:40,680 --> 00:06:46,409
code and and gangly

00:06:43,649 --> 00:06:48,509
came about and it it makes it very easy

00:06:46,409 --> 00:06:50,319
to like figure out like what your

00:06:48,509 --> 00:06:52,990
cluster is doing so you

00:06:50,319 --> 00:06:57,249
we has this hierarchy of like a grid and

00:06:52,990 --> 00:07:00,669
a cluster so that you can find out like

00:06:57,249 --> 00:07:02,559
you know your if your clusters doing how

00:07:00,669 --> 00:07:04,719
your clusters doing on one end and then

00:07:02,559 --> 00:07:08,189
on the other clusters like you can sort

00:07:04,719 --> 00:07:08,189
of aggregate all the different data and

00:07:08,249 --> 00:07:13,300
you know lunch and surprises you know

00:07:10,689 --> 00:07:15,460
you will have you know different servers

00:07:13,300 --> 00:07:17,169
like web servers database servers you

00:07:15,460 --> 00:07:18,699
know you have a large corporation that

00:07:17,169 --> 00:07:20,770
you have many computers that do

00:07:18,699 --> 00:07:24,580
different things so you can use ganglia

00:07:20,770 --> 00:07:28,089
to you know check how these servers are

00:07:24,580 --> 00:07:30,099
performing and then you can you know go

00:07:28,089 --> 00:07:31,869
back in time look at the history and you

00:07:30,099 --> 00:07:34,379
know figure out you know what's what's

00:07:31,869 --> 00:07:40,990
going on so it's pretty pretty similar

00:07:34,379 --> 00:07:43,119
abuses and like you know in your IT

00:07:40,990 --> 00:07:45,309
environment you know you have support

00:07:43,119 --> 00:07:48,039
issues and like why is your system not

00:07:45,309 --> 00:07:50,139
performing as you think it should so you

00:07:48,039 --> 00:07:54,069
can look at you can also use it to look

00:07:50,139 --> 00:07:55,990
at like memory utilization and and you

00:07:54,069 --> 00:07:58,120
know when when your servers reach a

00:07:55,990 --> 00:08:00,009
certain load and you maybe it's time to

00:07:58,120 --> 00:08:01,599
buy like new computers or actually

00:08:00,009 --> 00:08:04,059
upgrade your memory whatever so you can

00:08:01,599 --> 00:08:05,439
use ganglia to look at all these you

00:08:04,059 --> 00:08:08,759
know pretty graphs and give you an idea

00:08:05,439 --> 00:08:13,629
of how your error systems are performing

00:08:08,759 --> 00:08:16,959
and then you know you can see okay if ho

00:08:13,629 --> 00:08:18,580
pinch of like servers are have really

00:08:16,959 --> 00:08:20,110
high load maybe you can like shift the

00:08:18,580 --> 00:08:25,719
load around and maybe likely even

00:08:20,110 --> 00:08:28,059
fertilize it so and you can use it to

00:08:25,719 --> 00:08:29,860
troubleshoot applications so like you

00:08:28,059 --> 00:08:31,479
have different users running you know

00:08:29,860 --> 00:08:33,760
different code on your computer and

00:08:31,479 --> 00:08:37,180
maybe you're trying to figure out like

00:08:33,760 --> 00:08:39,579
why is tossings like first of all you

00:08:37,180 --> 00:08:41,500
need to know that your your systems

00:08:39,579 --> 00:08:42,939
having high i/o load but how would you

00:08:41,500 --> 00:08:44,260
tell it like if you have a thousand

00:08:42,939 --> 00:08:46,720
computer you're not going to log into

00:08:44,260 --> 00:08:47,019
each one to do at top and like figure it

00:08:46,720 --> 00:08:48,639
out

00:08:47,019 --> 00:08:51,040
so we're something like ganglia it's

00:08:48,639 --> 00:08:53,620
like as this graph with aggregated like

00:08:51,040 --> 00:08:55,600
information so you know basically you

00:08:53,620 --> 00:08:58,079
can see very quickly that you know what

00:08:55,600 --> 00:08:59,920
your systems are doing and with that

00:08:58,079 --> 00:09:02,649
information that helps you troubleshoot

00:08:59,920 --> 00:09:09,009
you know application problems and

00:09:02,649 --> 00:09:10,720
like that and you know when you're

00:09:09,009 --> 00:09:14,740
writing new software sometimes you don't

00:09:10,720 --> 00:09:17,170
know like how how it performs and you

00:09:14,740 --> 00:09:19,059
know you use it like you don't know how

00:09:17,170 --> 00:09:26,439
much resources use it so again you know

00:09:19,059 --> 00:09:28,300
gangly is useful for these kind of so

00:09:26,439 --> 00:09:31,029
just give you an example of like some

00:09:28,300 --> 00:09:32,829
people who uses ganglia so these are

00:09:31,029 --> 00:09:34,899
just like names you can find out from

00:09:32,829 --> 00:09:37,329
our website there's a like a little bar

00:09:34,899 --> 00:09:41,439
on the side that tells you like who uses

00:09:37,329 --> 00:09:44,619
ganglia so I'd like to point out

00:09:41,439 --> 00:09:46,389
especially about flickers so I know the

00:09:44,619 --> 00:09:48,189
previous operations manager here was

00:09:46,389 --> 00:09:49,929
always say like you know you scan glare

00:09:48,189 --> 00:09:51,970
what does he use it for it is for

00:09:49,929 --> 00:09:53,619
capacity planning it's like you have

00:09:51,970 --> 00:09:55,240
these graphs that tells you okay well we

00:09:53,619 --> 00:09:57,999
hit sort of hitting the resource boys

00:09:55,240 --> 00:10:01,329
maybe it's time to to buy like new

00:09:57,999 --> 00:10:03,850
computers so so you would go up go to

00:10:01,329 --> 00:10:06,339
your your supervisor your manager and

00:10:03,850 --> 00:10:08,800
say okay well I mean this is the real

00:10:06,339 --> 00:10:10,689
node and you know we need more computers

00:10:08,800 --> 00:10:20,550
to handle these loads so it's it's it's

00:10:10,689 --> 00:10:25,179
good for that so let me give you a quick

00:10:20,550 --> 00:10:30,519
demo of what angle it looks like so this

00:10:25,179 --> 00:10:33,249
is you know Berkeley grid so is divided

00:10:30,519 --> 00:10:36,160
into different so you see here you have

00:10:33,249 --> 00:10:37,779
a main grid so this is sort of like the

00:10:36,160 --> 00:10:42,670
top level

00:10:37,779 --> 00:10:44,949
it aggregates all the other metrics you

00:10:42,670 --> 00:10:50,069
see at the bottom here so this is this

00:10:44,949 --> 00:10:50,069
is one cluster which you can click into

00:10:51,149 --> 00:10:56,410
so this red line just tells you okay

00:10:53,679 --> 00:11:01,569
this is the next number of CPUs in this

00:10:56,410 --> 00:11:03,549
cluster and so you know is the number of

00:11:01,569 --> 00:11:09,339
running processes here this is the gray

00:11:03,549 --> 00:11:12,069
stuff is like the load so it's a whole

00:11:09,339 --> 00:11:16,110
bunch of different type of charts that

00:11:12,069 --> 00:11:18,810
you can see so it's like memory network

00:11:16,110 --> 00:11:21,790
so down here these are individual hosts

00:11:18,810 --> 00:11:24,220
so red here means is sort of a high load

00:11:21,790 --> 00:11:26,680
and green means it's not that busy so

00:11:24,220 --> 00:11:32,170
again you can click into it here and see

00:11:26,680 --> 00:11:35,890
what each individual hose is doing so

00:11:32,170 --> 00:11:39,250
this is one post and it says you know

00:11:35,890 --> 00:11:41,620
it's been up since this time and gives

00:11:39,250 --> 00:11:43,420
you a whole lot of information but so

00:11:41,620 --> 00:11:45,550
basically all these metrics is collected

00:11:43,420 --> 00:11:47,860
on the host level and aggregated up to

00:11:45,550 --> 00:11:50,890
the top so so a collection of hoses a

00:11:47,860 --> 00:11:52,720
cluster and a collection of clusters at

00:11:50,890 --> 00:11:54,880
grid so you can actually even have like

00:11:52,720 --> 00:11:56,500
a grid of grids so that you know you can

00:11:54,880 --> 00:12:02,890
sort of aggregate it you know all the

00:11:56,500 --> 00:12:08,070
way up so these are stats of individual

00:12:02,890 --> 00:12:08,070
hose so it's pretty self-explanatory

00:12:10,530 --> 00:12:13,530
okay

00:12:21,130 --> 00:12:34,930
okay so let's talk a bit about

00:12:24,630 --> 00:12:37,360
architecture so so every node runs the

00:12:34,930 --> 00:12:42,430
gimon D agent so that's like what you

00:12:37,360 --> 00:12:44,650
run on individual hoes and so it doesn't

00:12:42,430 --> 00:12:49,000
keep any like historic data locally so

00:12:44,650 --> 00:12:52,660
it's just just the data just sent Center

00:12:49,000 --> 00:12:55,240
out so the data is transmitted so the

00:12:52,660 --> 00:12:58,300
metric data is transmitted by default it

00:12:55,240 --> 00:13:00,550
uses multicast so in environments where

00:12:58,300 --> 00:13:02,110
like multicast could be considered like

00:13:00,550 --> 00:13:04,510
chatty like you don't want to send too

00:13:02,110 --> 00:13:10,150
many packets what you could do is you

00:13:04,510 --> 00:13:13,030
can use so you can use unicast UDP

00:13:10,150 --> 00:13:17,710
packets so that you know reduces the

00:13:13,030 --> 00:13:19,630
amount of like network traffic and then

00:13:17,710 --> 00:13:21,550
basically you have this G melody server

00:13:19,630 --> 00:13:23,470
that aggregates all the data and soars

00:13:21,550 --> 00:13:27,880
in our default so I think I mentioned

00:13:23,470 --> 00:13:29,830
that previously already and then all

00:13:27,880 --> 00:13:32,050
this information is that presented on

00:13:29,830 --> 00:13:35,440
the web server which basically you know

00:13:32,050 --> 00:13:36,850
the serves the web page you saw and you

00:13:35,440 --> 00:13:40,030
know you install that web server like

00:13:36,850 --> 00:13:43,150
Apache or like lightning or whatever and

00:13:40,030 --> 00:13:47,170
and you basically runs on the same

00:13:43,150 --> 00:13:50,320
servers through G meda T process and as

00:13:47,170 --> 00:13:54,070
used to like create the graphs and the

00:13:50,320 --> 00:13:57,220
charts that you see so let's just run

00:13:54,070 --> 00:13:59,200
through what it looks like so by default

00:13:57,220 --> 00:14:01,990
it uses multicast because it's very easy

00:13:59,200 --> 00:14:03,970
to set up is basically setting up is

00:14:01,990 --> 00:14:05,560
just you know just start the daemon the

00:14:03,970 --> 00:14:10,030
configuration body thought we use

00:14:05,560 --> 00:14:11,890
multicast so every node would transmit

00:14:10,030 --> 00:14:15,240
its own metrics to the multicast group

00:14:11,890 --> 00:14:18,790
so you don't need to do anything special

00:14:15,240 --> 00:14:21,970
and every node would receive metric from

00:14:18,790 --> 00:14:24,160
each other so essentially you talk to

00:14:21,970 --> 00:14:26,520
one know it would know the metrics

00:14:24,160 --> 00:14:29,290
information of the entire everything

00:14:26,520 --> 00:14:33,850
every node from that from that multicast

00:14:29,290 --> 00:14:36,220
group and you know it has yeah again it

00:14:33,850 --> 00:14:38,649
every no would already know like what

00:14:36,220 --> 00:14:42,430
the the metric information of the other

00:14:38,649 --> 00:14:44,949
guys and the node can actually be pulled

00:14:42,430 --> 00:14:48,579
by a specific port and then it will give

00:14:44,949 --> 00:14:51,100
you like an XML sort of output of what

00:14:48,579 --> 00:14:53,920
like the metric looks like and that's

00:14:51,100 --> 00:14:59,410
what we use sort of to send the

00:14:53,920 --> 00:15:00,970
information around so then we have the G

00:14:59,410 --> 00:15:04,149
melody server and the web server that

00:15:00,970 --> 00:15:06,310
aggregates all the data so the G melody

00:15:04,149 --> 00:15:09,100
server pose in the multicast environment

00:15:06,310 --> 00:15:11,230
opposed any one of them so if for those

00:15:09,100 --> 00:15:13,990
of you who have used it in the example

00:15:11,230 --> 00:15:17,740
is sort of alludes to that you have to

00:15:13,990 --> 00:15:19,540
add each hose like so there's a data

00:15:17,740 --> 00:15:21,759
source that points to like a particular

00:15:19,540 --> 00:15:24,009
Giovanni ho so the confirmation so it

00:15:21,759 --> 00:15:25,779
leads that you have to put every hose in

00:15:24,009 --> 00:15:28,029
the multicast group but it's not

00:15:25,779 --> 00:15:30,880
necessary because actually is mainly for

00:15:28,029 --> 00:15:32,769
redundancy so in case like if your

00:15:30,880 --> 00:15:35,110
multicast group one hose goes down you

00:15:32,769 --> 00:15:36,940
can go to the other guys but basically

00:15:35,110 --> 00:15:39,009
you just pull one hose in the group and

00:15:36,940 --> 00:15:46,060
then you get you know you get all the

00:15:39,009 --> 00:15:49,630
information of all the hosts and so Rd

00:15:46,060 --> 00:15:52,720
files are created and you know to to

00:15:49,630 --> 00:15:55,120
store the metrics and then from the web

00:15:52,720 --> 00:15:57,069
browser you can see the graphs and the

00:15:55,120 --> 00:16:02,439
charts and to see what what your

00:15:57,069 --> 00:16:09,220
installation is doing so I'm just going

00:16:02,439 --> 00:16:12,750
to talk about some advanced topics so I

00:16:09,220 --> 00:16:15,160
mentioned previously there 5e for its

00:16:12,750 --> 00:16:16,930
ganglia collects all these standard

00:16:15,160 --> 00:16:18,910
metrics but what if you will have your

00:16:16,930 --> 00:16:20,709
own like metric that you want to collect

00:16:18,910 --> 00:16:24,069
that's not part of the standard metric

00:16:20,709 --> 00:16:26,980
so we have this command line to ecology

00:16:24,069 --> 00:16:31,180
metric that that you can basically feed

00:16:26,980 --> 00:16:33,160
it metrics and typically you run it you

00:16:31,180 --> 00:16:36,310
either write a script that you know gets

00:16:33,160 --> 00:16:38,410
all this data like you write a program

00:16:36,310 --> 00:16:39,759
to get like the temperature reading of

00:16:38,410 --> 00:16:41,800
your hose like usually there's some

00:16:39,759 --> 00:16:44,110
command that you can run and you would

00:16:41,800 --> 00:16:46,059
feed it to geometric and then your con

00:16:44,110 --> 00:16:47,260
job would run it like every couple

00:16:46,059 --> 00:16:53,140
minutes just to

00:16:47,260 --> 00:16:58,390
that information so in newer versions of

00:16:53,140 --> 00:17:00,670
ganglia there's a we wrote module

00:16:58,390 --> 00:17:03,280
interface to G Maundy so you don't need

00:17:00,670 --> 00:17:06,100
to use geometric anymore so basically

00:17:03,280 --> 00:17:09,480
you could write C or Python code that

00:17:06,100 --> 00:17:12,459
and then the modules has callback and

00:17:09,480 --> 00:17:15,280
basically you set the value for like how

00:17:12,459 --> 00:17:17,110
often you know G Maundy would get the

00:17:15,280 --> 00:17:21,790
metric and just snippets of code that

00:17:17,110 --> 00:17:24,370
that you write to basically collect the

00:17:21,790 --> 00:17:28,480
data so I'll show I think the next slide

00:17:24,370 --> 00:17:30,190
shows you how works so in this case you

00:17:28,480 --> 00:17:33,610
don't need to worry about like having a

00:17:30,190 --> 00:17:35,890
con job so so the G Mundy process would

00:17:33,610 --> 00:17:37,180
you know be in charge of like

00:17:35,890 --> 00:17:43,240
periodically getting all this

00:17:37,180 --> 00:17:46,830
information so this is just a pretty

00:17:43,240 --> 00:17:49,480
stripped-down example of what this

00:17:46,830 --> 00:17:51,100
module interface looks like so the first

00:17:49,480 --> 00:17:52,840
definition is basically well this

00:17:51,100 --> 00:17:55,150
basically what this does is you know it

00:17:52,840 --> 00:17:57,760
generates a random number and it feeds

00:17:55,150 --> 00:18:00,300
it into G Monte so the first one

00:17:57,760 --> 00:18:03,790
basically does all your your work so

00:18:00,300 --> 00:18:06,640
back to the temperature example you

00:18:03,790 --> 00:18:08,800
would write some code to get the

00:18:06,640 --> 00:18:11,170
temperature reading and I mean you would

00:18:08,800 --> 00:18:15,910
have a you will make your metric and

00:18:11,170 --> 00:18:17,830
just feed it in so the team the time max

00:18:15,910 --> 00:18:22,590
here is just like how long it takes

00:18:17,830 --> 00:18:24,820
before you would feed it the data and

00:18:22,590 --> 00:18:26,770
unit here is like you know it's just

00:18:24,820 --> 00:18:28,690
integer it's actually pretty

00:18:26,770 --> 00:18:30,520
straightforward so there's in the wiki

00:18:28,690 --> 00:18:40,480
page we have some document on how to

00:18:30,520 --> 00:18:43,570
write these these modules so like so

00:18:40,480 --> 00:18:47,740
Candler is designed to to monitor a lot

00:18:43,570 --> 00:18:50,140
of computers so we notice that you know

00:18:47,740 --> 00:18:52,330
when it when you have a thousand

00:18:50,140 --> 00:18:55,630
computers you start to have this

00:18:52,330 --> 00:18:57,520
scalability issue so what the problem is

00:18:55,630 --> 00:18:59,830
is that by default you have like 30

00:18:57,520 --> 00:19:00,450
metrics and if you have a thousand

00:18:59,830 --> 00:19:03,150
computer

00:19:00,450 --> 00:19:05,160
that's like 30,000 metrics so all these

00:19:03,150 --> 00:19:07,590
each metrics when it's collected you

00:19:05,160 --> 00:19:08,940
have to write it out to our default so

00:19:07,590 --> 00:19:13,530
that means there's a lot of like IO

00:19:08,940 --> 00:19:16,650
happening so previously what we did was

00:19:13,530 --> 00:19:18,780
to put already fouls on temp FS so it's

00:19:16,650 --> 00:19:20,450
basically just just wrapped so it's

00:19:18,780 --> 00:19:22,890
really speeding so that sort of

00:19:20,450 --> 00:19:25,290
alleviate the problem so you know it

00:19:22,890 --> 00:19:27,720
could still continue functioning but the

00:19:25,290 --> 00:19:29,730
problem is if you put your Rd falls in

00:19:27,720 --> 00:19:32,070
temp at first then you know once the

00:19:29,730 --> 00:19:33,720
gmail ad server reboots and it's all

00:19:32,070 --> 00:19:38,450
gone so you basically you need to sync

00:19:33,720 --> 00:19:41,970
it to this so that you keep this

00:19:38,450 --> 00:19:45,660
historic data so in the new version of

00:19:41,970 --> 00:19:49,200
Rd 2 there's a new daemon car D cash D

00:19:45,660 --> 00:19:52,770
so basically what it does is it it hangs

00:19:49,200 --> 00:19:56,400
on to so on it hangs on to write

00:19:52,770 --> 00:19:58,920
processes of these Rd files so that

00:19:56,400 --> 00:20:02,130
you're like you'll hang on to a couple

00:19:58,920 --> 00:20:03,780
updates until it's specific time has

00:20:02,130 --> 00:20:05,970
passed or that you know there's enough

00:20:03,780 --> 00:20:07,850
like updates and write it out at once so

00:20:05,970 --> 00:20:10,830
in that case it sort of buffers the

00:20:07,850 --> 00:20:12,930
right so it reduces the isle lovers by

00:20:10,830 --> 00:20:15,440
quite a bit so so if you have like you

00:20:12,930 --> 00:20:18,420
know if you're if you're G melody is

00:20:15,440 --> 00:20:20,460
monitoring like over you know a thousand

00:20:18,420 --> 00:20:23,670
and hosts and then this is something

00:20:20,460 --> 00:20:25,440
that you can consider so it's better

00:20:23,670 --> 00:20:27,660
than the tempo FS approach because you

00:20:25,440 --> 00:20:31,530
don't need to you know sort of sank the

00:20:27,660 --> 00:20:35,150
thousand and it's just a better

00:20:31,530 --> 00:20:35,150
well-rounded solution

00:20:39,559 --> 00:20:45,679
okay so I'm not gonna try to like give

00:20:43,879 --> 00:20:47,749
my own definition of call computing

00:20:45,679 --> 00:20:52,100
because there's already like so many but

00:20:47,749 --> 00:20:55,429
I guess I was just talk briefly about

00:20:52,100 --> 00:20:59,419
like how we as you know the ganglia

00:20:55,429 --> 00:21:02,240
project one to justice so basically for

00:20:59,419 --> 00:21:05,690
us like ganglia the clock environments

00:21:02,240 --> 00:21:08,210
are dynamic so fanger was designed to

00:21:05,690 --> 00:21:09,769
monitor clusters grids which are pretty

00:21:08,210 --> 00:21:13,100
static so you provision at once

00:21:09,769 --> 00:21:16,100
basically you don't you know you don't

00:21:13,100 --> 00:21:20,409
think of like you know going away is

00:21:16,100 --> 00:21:22,820
just you just keep adding more hosts so

00:21:20,409 --> 00:21:25,340
so yeah so basically we need to figure

00:21:22,820 --> 00:21:27,409
out how to handle this dynamic nature so

00:21:25,340 --> 00:21:29,749
in terms of like networking

00:21:27,409 --> 00:21:31,330
there's no multicast support so by

00:21:29,749 --> 00:21:33,830
default can glide uses multicast

00:21:31,330 --> 00:21:36,970
obviously you can use unicast which I've

00:21:33,830 --> 00:21:40,730
mentioned but you know if you can't use

00:21:36,970 --> 00:21:42,769
multicast it changes like how you you

00:21:40,730 --> 00:21:46,039
set it up and all these guys basically

00:21:42,769 --> 00:21:48,080
have like all these cloud computers

00:21:46,039 --> 00:21:51,350
basically they have when IP addresses so

00:21:48,080 --> 00:21:54,019
when you configure it you need to like

00:21:51,350 --> 00:21:55,850
for load balancing purposes you need to

00:21:54,019 --> 00:21:58,249
have some way of bootstrapping the

00:21:55,850 --> 00:22:01,700
configuration so you would maybe when

00:21:58,249 --> 00:22:03,139
you your your host boots out may be able

00:22:01,700 --> 00:22:06,350
to talk to a centralized server to

00:22:03,139 --> 00:22:08,119
figure out okay well which which host I

00:22:06,350 --> 00:22:10,039
should like send my metric data to so

00:22:08,119 --> 00:22:13,340
these are some things that we need to

00:22:10,039 --> 00:22:16,279
think about and in going back to the

00:22:13,340 --> 00:22:19,159
dynamic nature so you have this host

00:22:16,279 --> 00:22:24,200
d-max which basically tells ganglia how

00:22:19,159 --> 00:22:27,200
long to hang on to to a host so in

00:22:24,200 --> 00:22:28,970
typical cluster environment you actually

00:22:27,200 --> 00:22:31,429
do want to know when the house goes down

00:22:28,970 --> 00:22:33,679
but then like because you know in claw

00:22:31,429 --> 00:22:36,499
environments you ramp up and round down

00:22:33,679 --> 00:22:38,690
like pretty pretty quickly so do you do

00:22:36,499 --> 00:22:40,940
you really want to like you know keep

00:22:38,690 --> 00:22:42,889
track of it that way so basically if the

00:22:40,940 --> 00:22:46,070
host d-max you adjust it and you know

00:22:42,889 --> 00:22:50,400
just sort of it ignores that the hose is

00:22:46,070 --> 00:22:55,320
gone so

00:22:50,400 --> 00:22:57,690
okay so I'm gonna now hand off over to

00:22:55,320 --> 00:23:25,860
Daniel who's gonna you know give someone

00:22:57,690 --> 00:23:29,429
user testimonial okay and my name is

00:23:25,860 --> 00:23:31,980
Daniel Pocock I'm working at a large

00:23:29,429 --> 00:23:35,130
bank in London and I've been deploying

00:23:31,980 --> 00:23:37,620
ganglia I've also been involved with the

00:23:35,130 --> 00:23:39,240
ganglia open source project for

00:23:37,620 --> 00:23:41,550
virtually the whole time I've been

00:23:39,240 --> 00:23:44,610
working on this project for my employer

00:23:41,550 --> 00:23:49,860
and I'm currently working as the release

00:23:44,610 --> 00:23:52,170
manager in the project as well I've been

00:23:49,860 --> 00:23:55,950
doing that for about 18 months

00:23:52,170 --> 00:23:58,140
using open source methods is a key part

00:23:55,950 --> 00:23:59,820
of the job it's something that was

00:23:58,140 --> 00:24:03,120
discussed right at the beginning at the

00:23:59,820 --> 00:24:05,190
at the interview stage no indicated that

00:24:03,120 --> 00:24:07,470
this is a way that I that I work and

00:24:05,190 --> 00:24:09,179
then they were quite keen to pursue that

00:24:07,470 --> 00:24:11,760
with me and so we're just going to talk

00:24:09,179 --> 00:24:14,400
a little bit about both what we've done

00:24:11,760 --> 00:24:18,750
with ganglia the challenges we've faced

00:24:14,400 --> 00:24:21,480
and also you know the aspects of working

00:24:18,750 --> 00:24:27,929
on an open source project in a corporate

00:24:21,480 --> 00:24:30,809
environment so every every big company

00:24:27,929 --> 00:24:33,360
has a different attitude to open source

00:24:30,809 --> 00:24:36,540
software and then you've probably seen

00:24:33,360 --> 00:24:38,910
this that some companies talk openly

00:24:36,540 --> 00:24:41,160
about their involvement with with open

00:24:38,910 --> 00:24:44,910
source and with Linux and other

00:24:41,160 --> 00:24:51,929
companies are very sort of wedded to

00:24:44,910 --> 00:24:53,970
Microsoft in in a big way so there's

00:24:51,929 --> 00:24:55,980
obviously distinctions between the

00:24:53,970 --> 00:24:59,429
meaning of a free software and open

00:24:55,980 --> 00:25:02,440
source software and you know business

00:24:59,429 --> 00:25:04,870
and particularly in a bank financial can

00:25:02,440 --> 00:25:09,399
are important and so will this talk

00:25:04,870 --> 00:25:12,190
about free as in no price tag there in

00:25:09,399 --> 00:25:14,320
the good old days people didn't have to

00:25:12,190 --> 00:25:17,019
worry too much about the cost of

00:25:14,320 --> 00:25:20,289
software they'd often buy things based

00:25:17,019 --> 00:25:24,820
on the support contracts the size of the

00:25:20,289 --> 00:25:27,100
vendor and various other factors these

00:25:24,820 --> 00:25:29,590
days people are looking at a wider range

00:25:27,100 --> 00:25:32,200
of options and I don't think I need to

00:25:29,590 --> 00:25:34,179
go into the reasons behind that and that

00:25:32,200 --> 00:25:37,299
open source software is being looked at

00:25:34,179 --> 00:25:40,059
a lot more seriously and and where open

00:25:37,299 --> 00:25:42,850
source software provides like a credible

00:25:40,059 --> 00:25:49,509
alternative and people have to look at

00:25:42,850 --> 00:25:55,179
it on the other hand using public email

00:25:49,509 --> 00:25:57,220
lists IRC chat and sharing code on the

00:25:55,179 --> 00:26:00,990
public Internet these create issues for

00:25:57,220 --> 00:26:04,240
many organizations they create issues of

00:26:00,990 --> 00:26:08,350
how their company has been portrayed

00:26:04,240 --> 00:26:10,570
like on the Internet in the sharing of

00:26:08,350 --> 00:26:12,879
intellectual property and these are all

00:26:10,570 --> 00:26:14,950
challenges for different people in the

00:26:12,879 --> 00:26:16,149
company some of them who are not you

00:26:14,950 --> 00:26:21,909
know from a software development

00:26:16,149 --> 00:26:24,730
background to put it mildly gangly has

00:26:21,909 --> 00:26:27,669
had a it's provided a compelling reason

00:26:24,730 --> 00:26:30,879
to have those debates in the

00:26:27,669 --> 00:26:33,850
organization where I'm working and it

00:26:30,879 --> 00:26:37,080
has a relatively unique status and we'll

00:26:33,850 --> 00:26:40,570
look at some of the reasons for that

00:26:37,080 --> 00:26:43,389
it's not highly controversial and it's a

00:26:40,570 --> 00:26:45,879
monitoring tool so it's not the core

00:26:43,389 --> 00:26:47,830
business of the of the company and the

00:26:45,879 --> 00:26:51,070
core businesses is banking and not

00:26:47,830 --> 00:26:54,789
system monitoring so it's not a big loss

00:26:51,070 --> 00:26:59,769
if you know if we're collaborating on an

00:26:54,789 --> 00:27:02,080
honor system monitoring tool and so we

00:26:59,769 --> 00:27:04,539
can do that and with the ganglia project

00:27:02,080 --> 00:27:07,000
quite effectively because of the modular

00:27:04,539 --> 00:27:09,519
nature of the project and there's

00:27:07,000 --> 00:27:13,029
Barnard mentioned before with version

00:27:09,519 --> 00:27:14,010
3.1 of ganglia you can develop your own

00:27:13,029 --> 00:27:18,690
metrics

00:27:14,010 --> 00:27:22,320
as modules in C or Python and you can

00:27:18,690 --> 00:27:26,240
feed metrics in with geometric so if we

00:27:22,320 --> 00:27:29,700
have a need to develop a metric that

00:27:26,240 --> 00:27:33,090
uses proprietary code and we can do that

00:27:29,700 --> 00:27:37,050
and that code can be separated using the

00:27:33,090 --> 00:27:40,230
module interface so if we want to share

00:27:37,050 --> 00:27:43,520
parts of the of the common agent code as

00:27:40,230 --> 00:27:46,200
long as that module interface is stable

00:27:43,520 --> 00:27:53,520
then we can we can separate those things

00:27:46,200 --> 00:27:57,840
very easily just looking at the large

00:27:53,520 --> 00:28:00,240
enterprise environment you've got a mix

00:27:57,840 --> 00:28:02,820
of different platforms we've got

00:28:00,240 --> 00:28:05,010
platforms from different generations so

00:28:02,820 --> 00:28:06,960
you have some machines running recent

00:28:05,010 --> 00:28:10,440
versions of Red Hat you'll have other

00:28:06,960 --> 00:28:12,540
machines running say Windows NT 4 for

00:28:10,440 --> 00:28:14,610
example which is quite an old system so

00:28:12,540 --> 00:28:16,560
if you if you look around in an

00:28:14,610 --> 00:28:18,600
organization that's large enough yet you

00:28:16,560 --> 00:28:21,120
will find a little bit of everything I

00:28:18,600 --> 00:28:29,100
mean you'll find mainframes if you if

00:28:21,120 --> 00:28:32,100
you look around the users you have a

00:28:29,100 --> 00:28:34,140
whole range of different concerns they

00:28:32,100 --> 00:28:35,880
they're particularly concerned about

00:28:34,140 --> 00:28:38,700
something that might make their system

00:28:35,880 --> 00:28:44,460
less stable that might steal resources

00:28:38,700 --> 00:28:47,280
from their application or that might you

00:28:44,460 --> 00:28:53,100
know add complexity to managing their

00:28:47,280 --> 00:28:55,950
hosts fortunately the big angler agent

00:28:53,100 --> 00:29:00,090
is lightweight it runs on many of the

00:28:55,950 --> 00:29:02,160
platforms in a big environment the

00:29:00,090 --> 00:29:04,680
source code can be tweaked if necessary

00:29:02,160 --> 00:29:06,930
because it's open source and if you have

00:29:04,680 --> 00:29:09,600
a particular need we can recompile it

00:29:06,930 --> 00:29:12,120
for a particular platform if we don't

00:29:09,600 --> 00:29:14,220
want to use a particular library or

00:29:12,120 --> 00:29:16,980
something some of the libraries can be

00:29:14,220 --> 00:29:21,780
can be taken some of the libraries can

00:29:16,980 --> 00:29:24,120
be disabled to the pcre support which

00:29:21,780 --> 00:29:27,180
has been added recently is a purely

00:29:24,120 --> 00:29:28,700
optional feature and so we can disable

00:29:27,180 --> 00:29:31,679
that

00:29:28,700 --> 00:29:34,369
and some of the challenges that we face

00:29:31,679 --> 00:29:38,580
using the ganglia product in particular

00:29:34,369 --> 00:29:41,190
it's heavily reliant on DNS and once

00:29:38,580 --> 00:29:43,830
again you have big organizations have a

00:29:41,190 --> 00:29:45,629
range of DNS problems they're not you

00:29:43,830 --> 00:29:49,230
know connected directly to a public

00:29:45,629 --> 00:29:51,629
internet DNS servers if you've had a lot

00:29:49,230 --> 00:29:53,549
of mergers and other corporate activity

00:29:51,629 --> 00:29:56,159
then you may have several different DNS

00:29:53,549 --> 00:29:58,289
zones within the organization and they

00:29:56,159 --> 00:30:02,580
might be separated over different

00:29:58,289 --> 00:30:04,919
firewalls that may be overlapping IP

00:30:02,580 --> 00:30:07,710
space and a whole range of things their

00:30:04,919 --> 00:30:11,700
ganglia relies on reverse DNS lookups

00:30:07,710 --> 00:30:14,460
and it relies on on the host names to

00:30:11,700 --> 00:30:16,529
generate file names for the graphs and

00:30:14,460 --> 00:30:20,669
to generate the URLs for looking at

00:30:16,529 --> 00:30:22,559
those graphs so when when you have a lot

00:30:20,669 --> 00:30:25,769
of DNS related issues in your network

00:30:22,559 --> 00:30:31,139
and then those will be reflected in how

00:30:25,769 --> 00:30:33,720
you manage ganglia and it's not clear

00:30:31,139 --> 00:30:37,080
how ganglia is intended to perform with

00:30:33,720 --> 00:30:39,690
short poling intervals while looking

00:30:37,080 --> 00:30:43,499
through the J meta decode recently I

00:30:39,690 --> 00:30:46,379
found some cases where whole intervals

00:30:43,499 --> 00:30:50,100
been randomized by five seconds either

00:30:46,379 --> 00:30:52,799
way but if your polling interval is say

00:30:50,100 --> 00:30:54,419
five seconds and you randomized by five

00:30:52,799 --> 00:30:56,220
seconds then you could reduce the

00:30:54,419 --> 00:31:00,119
interval to zero or you could increase

00:30:56,220 --> 00:31:02,850
it to ten so I found that wasn't very

00:31:00,119 --> 00:31:05,610
effective so we decided to tweak some

00:31:02,850 --> 00:31:07,679
parts of the code to handle that but

00:31:05,610 --> 00:31:14,519
there may be more attention needed to

00:31:07,679 --> 00:31:16,980
deal with that you've seen the example

00:31:14,519 --> 00:31:20,129
before with the hosts grouped into

00:31:16,980 --> 00:31:23,460
clusters and grids but when you install

00:31:20,129 --> 00:31:26,490
the ganglia package on the host how does

00:31:23,460 --> 00:31:28,230
it know which cluster to join the

00:31:26,490 --> 00:31:31,049
current version of the agent is

00:31:28,230 --> 00:31:33,480
configured using a static text file and

00:31:31,049 --> 00:31:37,980
so you can include a text file in the

00:31:33,480 --> 00:31:38,930
package and you can also use a tool like

00:31:37,980 --> 00:31:41,390
puppet

00:31:38,930 --> 00:31:43,640
have a UNIX platform and you have puppet

00:31:41,390 --> 00:31:46,040
across your whole network you can use

00:31:43,640 --> 00:31:49,760
that to to join different hosts to

00:31:46,040 --> 00:31:51,830
different clusters but in in an

00:31:49,760 --> 00:31:53,660
organization that has Windows and that

00:31:51,830 --> 00:31:54,500
has you know some posters that are quite

00:31:53,660 --> 00:31:57,590
old

00:31:54,500 --> 00:31:59,660
you know deploying puppet would you know

00:31:57,590 --> 00:32:01,940
significantly magnify the effort of

00:31:59,660 --> 00:32:03,830
installing ganglia because then you've

00:32:01,940 --> 00:32:07,040
got to install to products and not just

00:32:03,830 --> 00:32:08,540
one so that's another challenge that

00:32:07,040 --> 00:32:14,570
that we're looking at in the ganglia

00:32:08,540 --> 00:32:17,750
project to run ganglia on Windows you

00:32:14,570 --> 00:32:20,630
currently need cygwin the good news is

00:32:17,750 --> 00:32:23,810
using cygwin it does work and it's quite

00:32:20,630 --> 00:32:26,030
effective and the bad news is that there

00:32:23,810 --> 00:32:30,290
are issues with having multiple cygwin

00:32:26,030 --> 00:32:31,970
applications on a on the same host so

00:32:30,290 --> 00:32:34,640
once again if you've got a lot of

00:32:31,970 --> 00:32:36,530
Windows hosts and if some of them have

00:32:34,640 --> 00:32:38,300
been around for a long time and some of

00:32:36,530 --> 00:32:41,330
them are quite new and they're all

00:32:38,300 --> 00:32:43,310
running different applications you may

00:32:41,330 --> 00:32:45,290
not know if some of them already have

00:32:43,310 --> 00:32:47,030
cygwin and so when you put the ganglia

00:32:45,290 --> 00:32:51,110
agent on there you could break something

00:32:47,030 --> 00:32:56,000
else so once again the cygwin dll is a

00:32:51,110 --> 00:32:57,590
challenge we had need to deal with with

00:32:56,000 --> 00:32:59,600
the project that I've been working on

00:32:57,590 --> 00:33:01,640
and participating with the open source

00:32:59,600 --> 00:33:04,940
community we've been able to discuss

00:33:01,640 --> 00:33:08,000
many of these issues and to find ways to

00:33:04,940 --> 00:33:10,160
manage them and some of that work has

00:33:08,000 --> 00:33:17,360
been contributed back to the open source

00:33:10,160 --> 00:33:19,670
project so just I'll just bring Bernard

00:33:17,360 --> 00:33:21,500
back now to wrap things up and then we

00:33:19,670 --> 00:33:24,700
can go into some questions or some

00:33:21,500 --> 00:33:24,700
further demonstrations

00:33:34,750 --> 00:33:41,750
okay so thanks Daniel so yeah so how can

00:33:39,860 --> 00:33:43,880
you guys get started so if you want to

00:33:41,750 --> 00:33:46,010
try it out so I guess the easiest way to

00:33:43,880 --> 00:33:50,120
just use the prepackaged stuff so you

00:33:46,010 --> 00:33:51,920
know Debian packages like rahat fateh or

00:33:50,120 --> 00:33:55,400
Suzy I mean they're all like you know

00:33:51,920 --> 00:33:58,250
been around for for some time and even

00:33:55,400 --> 00:34:00,950
on Solaris I think recently standard did

00:33:58,250 --> 00:34:03,200
a lot of work actually works now right

00:34:00,950 --> 00:34:07,070
the open csw so so you can get a free

00:34:03,200 --> 00:34:09,110
Solaris even so yeah as I mentioned

00:34:07,070 --> 00:34:11,780
before like even though you have

00:34:09,110 --> 00:34:15,050
different distributions you know you

00:34:11,780 --> 00:34:17,600
just install the packages they should

00:34:15,050 --> 00:34:20,750
just work the only issue is sometimes

00:34:17,600 --> 00:34:22,370
like with the free one version you can't

00:34:20,750 --> 00:34:26,210
really mix it with Rio but that's just

00:34:22,370 --> 00:34:28,399
like some sort of issues so yeah again

00:34:26,210 --> 00:34:31,010
just install g mandy on all the

00:34:28,399 --> 00:34:33,770
computers you want to monitor the four

00:34:31,010 --> 00:34:35,840
metrics and dedicate one server for g

00:34:33,770 --> 00:34:38,600
melody and the web server and basically

00:34:35,840 --> 00:34:40,429
done so you don't inferior you don't

00:34:38,600 --> 00:34:45,560
really need even a configuration file

00:34:40,429 --> 00:34:48,230
for g monte but you know if you want so

00:34:45,560 --> 00:34:51,050
if if you want the bleeding edge stuff

00:34:48,230 --> 00:34:54,140
or somehow like you know there are no

00:34:51,050 --> 00:34:56,659
prepackaged packages then you can

00:34:54,140 --> 00:35:00,700
download the source turbo or even from

00:34:56,659 --> 00:35:03,290
our repository and then just build it so

00:35:00,700 --> 00:35:06,140
you know website ganglia that info you

00:35:03,290 --> 00:35:08,840
can you know see what we've been doing

00:35:06,140 --> 00:35:14,300
and there's a wiki and a source forged

00:35:08,840 --> 00:35:16,820
web page and there's so we we provided

00:35:14,300 --> 00:35:19,910
this framework for you to monitor your

00:35:16,820 --> 00:35:21,680
systems and and and also these custom

00:35:19,910 --> 00:35:23,720
ways of like feeding these metrics so

00:35:21,680 --> 00:35:26,300
there actually is a community around it

00:35:23,720 --> 00:35:27,920
to sort of write their own metrics so

00:35:26,300 --> 00:35:30,980
you don't have to reinvent the wheel so

00:35:27,920 --> 00:35:33,020
you know there's people writing as i

00:35:30,980 --> 00:35:35,570
mentioned before like you know monitor

00:35:33,020 --> 00:35:38,210
apache or mam cache de or you know

00:35:35,570 --> 00:35:40,520
there's a whole bunch of like these

00:35:38,210 --> 00:35:42,750
custom metrics that has been

00:35:40,520 --> 00:35:46,080
created already so you can check it out

00:35:42,750 --> 00:35:48,240
before you you you write it so finally

00:35:46,080 --> 00:35:49,800
to you know there are a couple mailing

00:35:48,240 --> 00:35:52,770
lists ganglia generalities are all

00:35:49,800 --> 00:35:55,170
hosted on SourceForge ganga developers

00:35:52,770 --> 00:35:59,220
is developer man lists and you know we

00:35:55,170 --> 00:36:03,900
are RC freenode there's a twitter sort

00:35:59,220 --> 00:36:07,740
of aggregation feed you know so actually

00:36:03,900 --> 00:36:10,410
one one group of people on you know

00:36:07,740 --> 00:36:12,360
particularly interested in inviting to

00:36:10,410 --> 00:36:15,000
sort of join the project i guess you

00:36:12,360 --> 00:36:16,650
have seen though you know front-end I

00:36:15,000 --> 00:36:19,320
mean it's been it's been like that since

00:36:16,650 --> 00:36:20,730
you know probably the fast past five to

00:36:19,320 --> 00:36:23,730
ten years I mean it's pretty functional

00:36:20,730 --> 00:36:25,620
but you know what I you know as the

00:36:23,730 --> 00:36:28,410
project goes on what will be nice is a

00:36:25,620 --> 00:36:31,080
way to customize you know what you know

00:36:28,410 --> 00:36:33,300
you see on the front end so there's

00:36:31,080 --> 00:36:34,890
there's already work done to make the

00:36:33,300 --> 00:36:37,140
fun and more modular eyes so that you

00:36:34,890 --> 00:36:39,300
can customize it because some like

00:36:37,140 --> 00:36:41,220
depending on your your company's

00:36:39,300 --> 00:36:43,830
organization some group of people we

00:36:41,220 --> 00:36:45,480
want to see like your gangly graphs in

00:36:43,830 --> 00:36:47,250
one way and then another group may want

00:36:45,480 --> 00:36:49,020
to see a different way so it would be

00:36:47,250 --> 00:36:51,150
nice to sort of provide some mechanism

00:36:49,020 --> 00:36:53,310
so that it's very easy to customize

00:36:51,150 --> 00:36:55,920
before even like writing any code or

00:36:53,310 --> 00:36:58,470
anything so so if there any like Ajax or

00:36:55,920 --> 00:37:01,470
you know sort of JavaScript gurus who

00:36:58,470 --> 00:37:04,860
are interested in working on a front-end

00:37:01,470 --> 00:37:07,710
project let us know so I think with this

00:37:04,860 --> 00:37:09,960
I like to thank Daniel for helping me

00:37:07,710 --> 00:37:12,240
prepare this lights I mean it it you

00:37:09,960 --> 00:37:14,490
know all the stuff and thank you for

00:37:12,240 --> 00:37:17,870
stem for inviting us to to get this talk

00:37:14,490 --> 00:37:17,870
so thank you

00:37:20,839 --> 00:37:28,010
so I think we have you know if you want

00:37:25,020 --> 00:37:28,010
to have any questions

00:37:39,140 --> 00:37:43,559
maybe I should be looking at the mailing

00:37:41,730 --> 00:37:46,440
list that we're using ganglia with IP

00:37:43,559 --> 00:37:50,460
beat by pv4 are there any issues moving

00:37:46,440 --> 00:37:53,940
to ipv6 sorry say that again we're using

00:37:50,460 --> 00:37:59,369
ganglia with ipv4 okay are there any

00:37:53,940 --> 00:38:04,769
issues in moving to ipv6 you said our

00:37:59,369 --> 00:38:06,450
Oryx okay so are there any issues are

00:38:04,769 --> 00:38:11,999
moving to ipv6 have you seen

00:38:06,450 --> 00:38:14,670
installations using ipv6 yeah actually

00:38:11,999 --> 00:38:21,299
that's a very good question I don't I'm

00:38:14,670 --> 00:38:23,819
not aware of any I would assume that as

00:38:21,299 --> 00:38:26,190
long as your network you know the you

00:38:23,819 --> 00:38:29,339
know your operating system supports I'm

00:38:26,190 --> 00:38:31,170
not sure if we need to make any any

00:38:29,339 --> 00:38:34,680
modifications to the code because it's

00:38:31,170 --> 00:38:37,769
just actually if there's anybody you

00:38:34,680 --> 00:38:39,569
guys know have you guys yeah so yeah

00:38:37,769 --> 00:38:41,430
maybe take this you can take this

00:38:39,569 --> 00:38:46,190
offline because I haven't I'm not aware

00:38:41,430 --> 00:38:46,190
of anybody sort of needing this

00:38:53,369 --> 00:39:00,479
I know v6 does at least somewhat work

00:38:57,719 --> 00:39:02,309
because it broke broke bsd fairly badly

00:39:00,479 --> 00:39:02,700
when the port waited so I know it's in

00:39:02,309 --> 00:39:05,130
there

00:39:02,700 --> 00:39:10,859
so like you're saying that it works with

00:39:05,130 --> 00:39:12,479
with ganglia just by default yeah yeah

00:39:10,859 --> 00:39:13,920
because I haven't I haven't tested it I

00:39:12,479 --> 00:39:17,160
have actually haven't seen much traffic

00:39:13,920 --> 00:39:19,519
about it so but I mean definitely try it

00:39:17,160 --> 00:39:19,519

YouTube URL: https://www.youtube.com/watch?v=RfvghKzVF_w


