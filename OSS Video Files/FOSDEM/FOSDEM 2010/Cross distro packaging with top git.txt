Title: Cross distro packaging with top git
Publication date: 2011-12-22
Playlist: FOSDEM 2010
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,000 --> 00:00:14,790
hey hello I once want us to become a

00:00:11,460 --> 00:00:17,940
teacher so I'm using the laptop now no

00:00:14,790 --> 00:00:20,039
it's because it's to talk about get and

00:00:17,940 --> 00:00:22,170
normally you will have to make many

00:00:20,039 --> 00:00:26,220
drawings to explain things and I was

00:00:22,170 --> 00:00:29,039
rust too lazy to make the drawing on the

00:00:26,220 --> 00:00:33,360
computer I know gravity don't know how

00:00:29,039 --> 00:00:37,020
to do this it's about packaging software

00:00:33,360 --> 00:00:39,690
for Debian in my case but I hope that

00:00:37,020 --> 00:00:42,239
it's also useful for other distributions

00:00:39,690 --> 00:00:47,510
and especially for cooperation between

00:00:42,239 --> 00:00:52,440
distributions and it's about get but and

00:00:47,510 --> 00:00:56,640
a tool and tools on top of gifts but the

00:00:52,440 --> 00:01:00,030
ideas should be usable also for material

00:00:56,640 --> 00:01:07,140
bazaar or other distributed version

00:01:00,030 --> 00:01:10,890
control systems ok I've done deviant

00:01:07,140 --> 00:01:13,590
packages now for something around the

00:01:10,890 --> 00:01:19,580
year and try to become a DP developer

00:01:13,590 --> 00:01:22,439
once working for a small vet company and

00:01:19,580 --> 00:01:26,130
Eastern Switzerland and at this company

00:01:22,439 --> 00:01:29,520
we are using Debian packages for

00:01:26,130 --> 00:01:31,290
deployment so if we want to deploy a web

00:01:29,520 --> 00:01:33,720
application padded in the deep in

00:01:31,290 --> 00:01:36,810
package up get installed and it's up

00:01:33,720 --> 00:01:38,939
there and every web developer in-house

00:01:36,810 --> 00:01:43,020
can also make up get installed on his

00:01:38,939 --> 00:01:45,479
developer mentioned at hazard 1 i'm

00:01:43,020 --> 00:01:47,850
interested in who are you what's your

00:01:45,479 --> 00:01:53,460
experience who has ever used get or as

00:01:47,850 --> 00:01:57,450
actively using it fine other distributed

00:01:53,460 --> 00:01:59,070
version control systems so everybody is

00:01:57,450 --> 00:02:01,530
familiar with distributed version

00:01:59,070 --> 00:02:04,520
control that's fine who is dumb date

00:02:01,530 --> 00:02:04,520
deviant packages

00:02:05,120 --> 00:02:13,050
but about half a few or four other

00:02:08,270 --> 00:02:16,020
distributions rpms also very fine so I

00:02:13,050 --> 00:02:21,390
don't and to top this anybody has used

00:02:16,020 --> 00:02:27,900
chocolate okay I'll talk about it so you

00:02:21,390 --> 00:02:31,470
know the about packaging only what you

00:02:27,900 --> 00:02:34,640
do is we us you have the sauce topple of

00:02:31,470 --> 00:02:38,730
the upstream software you download it

00:02:34,640 --> 00:02:41,370
unpack it and cut the deviant folder

00:02:38,730 --> 00:02:43,830
inside and let us also magic which

00:02:41,370 --> 00:02:48,959
builds a package and has also the meta

00:02:43,830 --> 00:02:53,870
information for dbl and eventually you

00:02:48,959 --> 00:03:00,200
have to patch the upstream code also and

00:02:53,870 --> 00:03:00,200
that's what you are doing for packaging

00:03:00,500 --> 00:03:07,040
so we have three things now we have

00:03:09,050 --> 00:03:30,510
upswing tahoe we have the unpacked

00:03:17,090 --> 00:03:33,750
upstream and we have even flesh and it

00:03:30,510 --> 00:03:38,370
would be best to track all these three

00:03:33,750 --> 00:03:41,459
things and it's also good to have all

00:03:38,370 --> 00:03:45,630
these three things in the motion control

00:03:41,459 --> 00:03:48,450
system i'd like to have the tarball in

00:03:45,630 --> 00:03:50,880
my version control system so that every

00:03:48,450 --> 00:03:54,570
on everybody else working on this

00:03:50,880 --> 00:03:57,720
package doesn't need to go to the

00:03:54,570 --> 00:04:00,900
upstream homepage finds a tarball even

00:03:57,720 --> 00:04:02,519
if i have you scanned the automatic

00:04:00,900 --> 00:04:06,019
system for detail which downloads the

00:04:02,519 --> 00:04:09,510
terrible there's always a chance that

00:04:06,019 --> 00:04:14,160
decides is down right now or i've also

00:04:09,510 --> 00:04:17,280
encountered obsoletes who distribute to

00:04:14,160 --> 00:04:18,579
release another source tamper with the

00:04:17,280 --> 00:04:25,060
same version number

00:04:18,579 --> 00:04:27,430
and you have no no way to know that you

00:04:25,060 --> 00:04:31,360
have got another up straight up or now

00:04:27,430 --> 00:04:33,330
than the other developer so it's a good

00:04:31,360 --> 00:04:38,860
idea to have it available in your

00:04:33,330 --> 00:04:44,710
repository and you have a big back up of

00:04:38,860 --> 00:04:49,270
it and if you're offline you can still

00:04:44,710 --> 00:04:52,120
work on you can you make a gift clone of

00:04:49,270 --> 00:04:54,819
the packaging repository when you're

00:04:52,120 --> 00:04:56,530
online and can still work with it when

00:04:54,819 --> 00:05:05,110
you're offline you have the tarball

00:04:56,530 --> 00:05:09,400
available and the unpacked our upstream

00:05:05,110 --> 00:05:14,560
their our packaging roots and deviant

00:05:09,400 --> 00:05:17,740
for example Java which use subversion

00:05:14,560 --> 00:05:22,090
and most of the time they have only the

00:05:17,740 --> 00:05:26,460
dbm directory in the subversion and when

00:05:22,090 --> 00:05:31,000
I want to work on a package I have a

00:05:26,460 --> 00:05:33,940
make targets get auric or something like

00:05:31,000 --> 00:05:36,190
that and this goes to the home page

00:05:33,940 --> 00:05:38,589
downloads up screen and for Java

00:05:36,190 --> 00:05:42,129
packages normally you have to repackage

00:05:38,589 --> 00:05:45,520
because I have binary things inside thus

00:05:42,129 --> 00:05:48,580
the Rebecca tree and makes this every

00:05:45,520 --> 00:05:53,379
time somebody else wants to work on the

00:05:48,580 --> 00:05:56,110
mation on the package and of course this

00:05:53,379 --> 00:06:02,680
could go wrong it would be fine to have

00:05:56,110 --> 00:06:04,810
a canonical upstream in my repository so

00:06:02,680 --> 00:06:07,029
that I know that somebody else working

00:06:04,810 --> 00:06:13,199
on this package has buys to buy

00:06:07,029 --> 00:06:19,300
identical the upstream directory um so

00:06:13,199 --> 00:06:24,099
the app strict are bored how can pat it

00:06:19,300 --> 00:06:28,840
in my repository I could of course

00:06:24,099 --> 00:06:36,449
commit the tarball as it as 15

00:06:28,840 --> 00:06:40,060
that would be a waste of space and it

00:06:36,449 --> 00:06:45,460
doesn't really help me much because if I

00:06:40,060 --> 00:06:50,590
want if I want to inspect it I have to

00:06:45,460 --> 00:06:54,430
go to this commit get fine to fire there

00:06:50,590 --> 00:07:08,889
is a nicer to first that this um I write

00:06:54,430 --> 00:07:16,410
the tools down its pristine tongue who

00:07:08,889 --> 00:07:21,610
did it joy hands yeah deviant developer

00:07:16,410 --> 00:07:25,389
so the magic of prestigo is that you

00:07:21,610 --> 00:07:28,680
unpack the tarball commit everything

00:07:25,389 --> 00:07:32,050
what's in the towel to one branch and

00:07:28,680 --> 00:07:34,630
then tell christine tarr okay look at

00:07:32,050 --> 00:07:40,270
this branch there you have all the files

00:07:34,630 --> 00:07:43,330
and now I want you to save all the other

00:07:40,270 --> 00:07:45,580
meta informations that are also in the

00:07:43,330 --> 00:07:48,940
table but could not be represented in

00:07:45,580 --> 00:07:51,849
this branch partly is meta information

00:07:48,940 --> 00:07:54,370
somewhere when I asked you you will get

00:07:51,849 --> 00:07:56,770
me back the original tarball bite espite

00:07:54,370 --> 00:07:59,440
as it was but I do not commit the

00:07:56,770 --> 00:08:01,660
tarball I do commit the files inside the

00:07:59,440 --> 00:08:05,800
tower board and some additional

00:08:01,660 --> 00:08:09,490
informations I think permissions time

00:08:05,800 --> 00:08:13,720
stands some informations that could not

00:08:09,490 --> 00:08:18,280
be represented well in the git

00:08:13,720 --> 00:08:23,289
repository when the term prescriptive

00:08:18,280 --> 00:08:25,570
all makes a separate branch in the git

00:08:23,289 --> 00:08:29,380
repository also called christine tarr

00:08:25,570 --> 00:08:32,529
and there are it makes for each tab all

00:08:29,380 --> 00:08:33,140
I commit there is one fire with all the

00:08:32,529 --> 00:08:35,930
metal

00:08:33,140 --> 00:08:48,770
nations that precedes our needs to

00:08:35,930 --> 00:08:58,460
recreate my tab or so I have now three

00:08:48,770 --> 00:09:02,590
branches this is I call this ranch where

00:08:58,460 --> 00:09:12,650
I touch the unpacked up spring sauce

00:09:02,590 --> 00:09:18,650
Upsy there is this protein bra christine

00:09:12,650 --> 00:09:21,170
tarr branch ranch the mecca informations

00:09:18,650 --> 00:09:27,620
normally adult excesses it's directly

00:09:21,170 --> 00:09:32,810
but only with christine tarr and by

00:09:27,620 --> 00:09:36,380
convention the deionization branch with

00:09:32,810 --> 00:09:42,500
the deviant directory is called the

00:09:36,380 --> 00:09:46,040
master branch okay and that's a groin I

00:09:42,500 --> 00:09:49,910
wanted to make I start my new repository

00:09:46,040 --> 00:09:59,230
and first I start with the upstream

00:09:49,910 --> 00:09:59,230
branch commit oh oh if the apt in men

00:10:00,100 --> 00:10:11,150
make attack of the booklet with the

00:10:04,190 --> 00:10:14,590
version number called art scream / 0.1

00:10:11,150 --> 00:10:18,410
is the upstream version of the software

00:10:14,590 --> 00:10:24,170
altium there are all the files from the

00:10:18,410 --> 00:10:30,530
tarball em should make this and from

00:10:24,170 --> 00:10:34,880
this I make a branch and call this my

00:10:30,530 --> 00:10:39,190
Martha branch where I put my deviant

00:10:34,880 --> 00:10:43,310
directory and do all the DVR

00:10:39,190 --> 00:10:44,490
deionization now when the next up screen

00:10:43,310 --> 00:10:49,180
version comes

00:10:44,490 --> 00:10:53,970
I do not commit here or with a new app

00:10:49,180 --> 00:10:58,350
script on board and do a brush in my

00:10:53,970 --> 00:11:03,870
master branch my GD anization branch and

00:10:58,350 --> 00:11:07,870
in the most ideal case I only need to

00:11:03,870 --> 00:11:10,150
update the change log here in the dimion

00:11:07,870 --> 00:11:14,680
directory and Kemp could make another

00:11:10,150 --> 00:11:18,220
upload and the nice things also now I

00:11:14,680 --> 00:11:20,260
can use all the to chain of gifts to

00:11:18,220 --> 00:11:24,670
inspect the differences between the two

00:11:20,260 --> 00:11:27,490
upstream tar balls I have the difference

00:11:24,670 --> 00:11:34,240
is also available on my master branch

00:11:27,490 --> 00:11:39,820
and here i also have the DD anization

00:11:34,240 --> 00:11:45,100
commits there is another tool which can

00:11:39,820 --> 00:11:48,400
use this commits on deviant to create

00:11:45,100 --> 00:11:50,320
change log entries so that when

00:11:48,400 --> 00:11:56,890
committing I off already bright work

00:11:50,320 --> 00:12:00,250
will end up in the change look so um for

00:11:56,890 --> 00:12:03,760
this things there's also a tool that

00:12:00,250 --> 00:12:17,940
helps me with it this is it's built

00:12:03,760 --> 00:12:17,940
package and get this package

00:12:20,380 --> 00:12:29,180
sorry now get these packages as well as

00:12:26,360 --> 00:12:37,190
the name of the tool and the name of the

00:12:29,180 --> 00:12:42,259
tool set the toolkit built package uses

00:12:37,190 --> 00:12:45,560
this repository now to build the dbm

00:12:42,259 --> 00:12:50,240
source package which i will upload so

00:12:45,560 --> 00:12:55,100
get built package codes prestigo give me

00:12:50,240 --> 00:13:00,440
the Arak tar.gz then starboard which i

00:12:55,100 --> 00:13:05,600
need to upload to debian then it's

00:13:00,440 --> 00:13:08,089
creates the diff fight between the

00:13:05,600 --> 00:13:11,420
upstream branch and the master branch

00:13:08,089 --> 00:13:18,589
which by convention should only contain

00:13:11,420 --> 00:13:23,149
the deviant directory and ok one and it

00:13:18,589 --> 00:13:27,500
runs of course the DVR to chain with all

00:13:23,149 --> 00:13:39,290
the deviant tools which build packages

00:13:27,500 --> 00:13:42,139
and work on the video directory so with

00:13:39,290 --> 00:13:47,690
the help of give get built package and

00:13:42,139 --> 00:13:50,389
this standard layout of a repository I

00:13:47,690 --> 00:13:56,800
could now collaborate for example with

00:13:50,389 --> 00:14:00,560
my sponsor and instead of uploading

00:13:56,800 --> 00:14:04,970
source packages somewhere on my server

00:14:00,560 --> 00:14:07,930
or on Mentos deviant or I can just point

00:14:04,970 --> 00:14:10,699
him to my gift repository and look there

00:14:07,930 --> 00:14:15,350
everything is inside there is the tab or

00:14:10,699 --> 00:14:18,199
you just want it built package hyphen

00:14:15,350 --> 00:14:24,470
asked to build the source package and

00:14:18,199 --> 00:14:26,839
you are done and this way he not only

00:14:24,470 --> 00:14:29,660
has the source package but also the

00:14:26,839 --> 00:14:32,720
history and you can also make

00:14:29,660 --> 00:14:35,240
comets so when he wants to correct

00:14:32,720 --> 00:14:38,000
something on my package just make this a

00:14:35,240 --> 00:14:44,720
common sense it back to me as in

00:14:38,000 --> 00:14:47,930
distributed version control and so the

00:14:44,720 --> 00:15:01,730
other tool another tool from the get

00:14:47,930 --> 00:15:05,600
food page sleep it's import all right so

00:15:01,730 --> 00:15:08,360
that's the tool which I fire up when a

00:15:05,600 --> 00:15:12,620
new and you are the first up speed

00:15:08,360 --> 00:15:18,920
version comes dip import or it unpacks

00:15:12,620 --> 00:15:21,830
the upstream taobao commits the contents

00:15:18,920 --> 00:15:24,380
to the upstream branch makes enough a

00:15:21,830 --> 00:15:29,830
lot of tech at the upstream branch with

00:15:24,380 --> 00:15:29,830
a net with the version numbers name and

00:15:30,550 --> 00:15:36,650
permits the turbo with christine tarr

00:15:33,470 --> 00:15:44,930
and makes this much to the debian branch

00:15:36,650 --> 00:15:47,630
and i can continue to work there is a

00:15:44,930 --> 00:15:51,200
nice feature with urn which helps a lot

00:15:47,630 --> 00:15:55,130
firm or Java packages for example with

00:15:51,200 --> 00:15:57,560
Java you have every time a lip directory

00:15:55,130 --> 00:16:00,830
containing the jar files of all the

00:15:57,560 --> 00:16:03,380
dependencies that's a custom in the Java

00:16:00,830 --> 00:16:06,350
world and it's hard to teach upstream

00:16:03,380 --> 00:16:09,320
not to do it or to them distribute the

00:16:06,350 --> 00:16:11,900
pure source terrible habla con

00:16:09,320 --> 00:16:14,390
cocktailing source files and snots

00:16:11,900 --> 00:16:19,490
containing binary or free comply stuff

00:16:14,390 --> 00:16:24,860
so every time I need to repack it my

00:16:19,490 --> 00:16:28,550
upstream so what I do is I make a normal

00:16:24,860 --> 00:16:34,360
get input or without any new packaging

00:16:28,550 --> 00:16:37,370
and have the original tab on here and

00:16:34,360 --> 00:16:40,620
immediate immediately afterwards my I

00:16:37,370 --> 00:16:43,680
make another import of this time

00:16:40,620 --> 00:16:47,460
use the filter option of get import or

00:16:43,680 --> 00:16:51,650
it and tells it filter out all jar files

00:16:47,460 --> 00:16:56,960
fill out the docs directory because it's

00:16:51,650 --> 00:17:02,220
pre-compiled filter out compiles

00:16:56,960 --> 00:17:05,370
generated source code and I made and I

00:17:02,220 --> 00:17:08,010
tell he had the first commit I tell get

00:17:05,370 --> 00:17:11,840
important Eric don't do the net much to

00:17:08,010 --> 00:17:23,220
master this time just make a commit I

00:17:11,840 --> 00:17:30,450
make another commits upstream near

00:17:23,220 --> 00:17:34,710
result 1 plus G and sg-1 indicating that

00:17:30,450 --> 00:17:38,010
it's a repackaged tarball and this is

00:17:34,710 --> 00:17:42,600
then merged to master so I have not only

00:17:38,010 --> 00:17:45,270
the repackaged to test our Bowl I for

00:17:42,600 --> 00:17:49,230
reference I also have the upstream tab

00:17:45,270 --> 00:17:51,990
or aunt if I like I also have a disk

00:17:49,230 --> 00:17:59,810
between these two so that I can just

00:17:51,990 --> 00:17:59,810
look up what's did I filled out yeah

00:18:01,190 --> 00:18:08,180
for example this filters tab oh it's

00:18:04,970 --> 00:18:10,880
also a work to go through the big

00:18:08,180 --> 00:18:13,190
project and find all the precompiled

00:18:10,880 --> 00:18:20,840
files if they're see stuff inside there

00:18:13,190 --> 00:18:25,010
are cash automates stuff sighs and so I

00:18:20,840 --> 00:18:28,820
end up to repackage DFS g two and three

00:18:25,010 --> 00:18:30,880
and four have all these and this work

00:18:28,820 --> 00:18:35,570
could also be used by other

00:18:30,880 --> 00:18:39,940
distributions by federer 20 and just

00:18:35,570 --> 00:18:39,940
take the tarball from the git repository

00:18:43,330 --> 00:18:55,580
so next tool and the package to change I

00:18:50,500 --> 00:19:00,830
already meant is this debian change of

00:18:55,580 --> 00:19:05,450
hell upon which this just takes this

00:19:00,830 --> 00:19:08,750
Kunitz here and generates a change of

00:19:05,450 --> 00:19:11,540
file in eagan / change on fire for of it

00:19:08,750 --> 00:19:15,050
you may have seen packages when the

00:19:11,540 --> 00:19:20,180
changelog very nicely is indicated offer

00:19:15,050 --> 00:19:23,090
in square brackets some commits next

00:19:20,180 --> 00:19:29,380
also spray breaker square babe breakers

00:19:23,090 --> 00:19:29,380
and this is normally done with gets dch

00:19:30,400 --> 00:19:37,820
ok that's until now that's a nice

00:19:35,180 --> 00:19:41,270
packaging nothing so complicated

00:19:37,820 --> 00:19:44,410
complicated now we have packages where

00:19:41,270 --> 00:19:48,910
we need to patch up scream and their

00:19:44,410 --> 00:19:48,910
swear I'll Tapia to

00:19:54,720 --> 00:20:04,929
target is created by a chest guy who

00:20:00,100 --> 00:20:11,259
also runs repo dogs see our CSS Kootra

00:20:04,929 --> 00:20:19,809
Borgese a gift contributor and what top

00:20:11,259 --> 00:20:24,399
gets does it saves and every branch know

00:20:19,809 --> 00:20:27,549
once it more targets managers patches in

00:20:24,399 --> 00:20:31,299
the form of branches every pitch is real

00:20:27,549 --> 00:20:34,389
presented in a git branch and these get

00:20:31,299 --> 00:20:37,479
branches are in some kind special

00:20:34,389 --> 00:20:44,669
because they have two additional files

00:20:37,479 --> 00:20:51,460
the first file in these branches is so

00:20:44,669 --> 00:20:55,869
this top deck is just a plain text file

00:20:51,460 --> 00:21:01,539
with the names of all branches this

00:20:55,869 --> 00:21:04,419
branch cheap pants on so normally if I

00:21:01,539 --> 00:21:13,179
base my pitch directly on the swimmer

00:21:04,419 --> 00:21:15,639
this will just be asked you but if I

00:21:13,179 --> 00:21:19,509
have a patch which intends on another

00:21:15,639 --> 00:21:22,509
patch there will be in the top that fire

00:21:19,509 --> 00:21:27,820
the name of the branch representing the

00:21:22,509 --> 00:21:30,849
the dependency catch or i could say

00:21:27,820 --> 00:21:33,399
there are three patches that needs to

00:21:30,849 --> 00:21:35,769
get be applied for us before this can be

00:21:33,399 --> 00:21:43,059
applied then there are three lines with

00:21:35,769 --> 00:21:49,989
ranch names and so top get can apply an

00:21:43,059 --> 00:21:54,999
algorithm to look up well my my patch

00:21:49,989 --> 00:21:59,070
branch is space on up screen and it

00:21:54,999 --> 00:22:02,019
looks in the history ice cream when I

00:21:59,070 --> 00:22:04,340
make the branch from upstream upstream

00:22:02,019 --> 00:22:11,570
was at commits

00:22:04,340 --> 00:22:14,600
ABC now our shrimp is at commits dch so

00:22:11,570 --> 00:22:17,870
us that something happened at upstream

00:22:14,600 --> 00:22:25,159
which is not merged back in the patch

00:22:17,870 --> 00:22:28,340
badge my patch isn't this isn't current

00:22:25,159 --> 00:22:33,470
anymore isn't actual anymore it needs to

00:22:28,340 --> 00:22:37,340
be updated so i can see with top get

00:22:33,470 --> 00:22:41,470
summary it gives me a list of all the

00:22:37,340 --> 00:22:45,559
patches and tells me which patch has

00:22:41,470 --> 00:22:48,860
dependency branches but whose changes

00:22:45,559 --> 00:22:52,000
are not yet much in the edge and this

00:22:48,860 --> 00:22:57,140
comes in very handy when I have a set of

00:22:52,000 --> 00:23:00,020
10 20 30 patches against upstream a new

00:22:57,140 --> 00:23:05,570
upstream version comes and I need to

00:23:00,020 --> 00:23:11,840
update all these 30 catches and so I

00:23:05,570 --> 00:23:16,490
don't I don't miss any patch and it

00:23:11,840 --> 00:23:21,470
tells me and I can use the git commands

00:23:16,490 --> 00:23:24,140
to do awesome merging work and I think

00:23:21,470 --> 00:23:28,700
it is very good at there's to help me

00:23:24,140 --> 00:23:32,390
with merging another nice thing of

00:23:28,700 --> 00:23:35,809
target is it eases the collaboration

00:23:32,390 --> 00:23:44,779
with upstream because there's another 50

00:23:35,809 --> 00:23:50,299
second one so I message where I can

00:23:44,779 --> 00:23:54,710
write like in an email the name of

00:23:50,299 --> 00:23:59,179
whether the subject of a patch and the

00:23:54,710 --> 00:24:03,289
description and with one commands top

00:23:59,179 --> 00:24:05,860
get made and patch name I can just send

00:24:03,289 --> 00:24:09,320
this patch to an email address

00:24:05,860 --> 00:24:11,960
presumably the address of the upstream

00:24:09,320 --> 00:24:15,500
next mailing list and stock it will

00:24:11,960 --> 00:24:17,420
create an email from the subject

00:24:15,500 --> 00:24:22,450
message from the comp from the

00:24:17,420 --> 00:24:27,980
description and take the patches as

00:24:22,450 --> 00:24:37,580
patch files and send it to the mailing

00:24:27,980 --> 00:24:41,060
list so now to one step how do i use the

00:24:37,580 --> 00:24:45,070
patches now in my deviant package we

00:24:41,060 --> 00:24:49,300
have a new source format and Indian

00:24:45,070 --> 00:24:54,610
version 3 which allows me to use kills

00:24:49,300 --> 00:24:58,400
as a patch manager and not top kit

00:24:54,610 --> 00:25:03,080
allows me to export all the pictures in

00:24:58,400 --> 00:25:13,220
the same format as killed users so there

00:25:03,080 --> 00:25:15,650
is teeny top its export I say which

00:25:13,220 --> 00:25:18,260
branches who I want to export because

00:25:15,650 --> 00:25:20,960
sometimes their attachés which are my

00:25:18,260 --> 00:25:23,270
repository but which I do not want to

00:25:20,960 --> 00:25:26,120
end in my package right now or which are

00:25:23,270 --> 00:25:30,230
outdated not yet ready yet I indicate

00:25:26,120 --> 00:25:33,530
which messes I want give it a directory

00:25:30,230 --> 00:25:37,760
and topped it will write in this

00:25:33,530 --> 00:25:43,160
directory one patch file for each branch

00:25:37,760 --> 00:25:46,730
and the series serious fire that killed

00:25:43,160 --> 00:25:49,940
needs to apply all the speeches and this

00:25:46,730 --> 00:25:59,050
is compatible to the new Libyan source

00:25:49,940 --> 00:26:04,370
format so i can just use it as it okay

00:25:59,050 --> 00:26:08,840
all this staff here is now my personal

00:26:04,370 --> 00:26:13,430
workflow to do packages but there are

00:26:08,840 --> 00:26:16,760
many others with slight modifications

00:26:13,430 --> 00:26:22,640
there are people who base their patches

00:26:16,760 --> 00:26:25,840
on the master branch for example or make

00:26:22,640 --> 00:26:29,860
a third branch to

00:26:25,840 --> 00:26:32,799
were to merge all the patches in one

00:26:29,860 --> 00:26:36,520
branch and merge this wrench into the

00:26:32,799 --> 00:26:41,340
master branch and for this reason and

00:26:36,520 --> 00:26:41,340
for other reasons there is a back page

00:26:41,370 --> 00:26:55,059
we need cs5 package dot org which was

00:26:51,190 --> 00:27:00,429
started by Martin craft also a deviant

00:26:55,059 --> 00:27:05,830
develop the deegan developer and his

00:27:00,429 --> 00:27:11,760
idea is that distributions should cook

00:27:05,830 --> 00:27:14,470
collaborate more and use at best one

00:27:11,760 --> 00:27:17,799
distributed version control system and

00:27:14,470 --> 00:27:22,210
share pictures from one distribution to

00:27:17,799 --> 00:27:25,779
another distribution and make it easier

00:27:22,210 --> 00:27:29,799
this way to do all the work with

00:27:25,779 --> 00:27:35,020
packaging and on this peg page and the

00:27:29,799 --> 00:27:38,409
mailing list of this page so there are

00:27:35,020 --> 00:27:42,279
discussions on how to this could be

00:27:38,409 --> 00:27:48,220
achieved because the stuff is still

00:27:42,279 --> 00:27:52,390
fairly new and there is no canonical

00:27:48,220 --> 00:28:04,320
workflow know which is recommended as as

00:27:52,390 --> 00:28:08,049
best practice and therefore okay my aim

00:28:04,320 --> 00:28:13,140
now with this talk is to get you a

00:28:08,049 --> 00:28:16,649
little bit curious about the topic of

00:28:13,140 --> 00:28:21,700
sharing version control with

00:28:16,649 --> 00:28:24,789
distributions and of using a distributed

00:28:21,700 --> 00:28:28,210
version control especially get to do

00:28:24,789 --> 00:28:30,370
packaging I've seen most of you already

00:28:28,210 --> 00:28:33,580
use different butyl version control so

00:28:30,370 --> 00:28:38,049
the same is already reached the next

00:28:33,580 --> 00:28:39,120
step would then be to just check out top

00:28:38,049 --> 00:28:46,230
gear see what

00:28:39,120 --> 00:28:49,880
can try the workflow see if it works out

00:28:46,230 --> 00:28:53,910
even with up screams even if I have to

00:28:49,880 --> 00:28:55,980
maintain two different versions and to

00:28:53,910 --> 00:28:57,809
maintain pitches against two different

00:28:55,980 --> 00:28:59,640
versions because my business in old

00:28:57,809 --> 00:29:04,350
stables that the other one is in stable

00:28:59,640 --> 00:29:07,710
the next fantastic so that we could come

00:29:04,350 --> 00:29:11,670
up in the next year with a workflow

00:29:07,710 --> 00:29:30,240
which is tested tribe works simply to

00:29:11,670 --> 00:29:33,630
understand thank you questions yeah

00:29:30,240 --> 00:29:36,780
because this is also the aim of VCS

00:29:33,630 --> 00:29:39,030
package that it the workflow should work

00:29:36,780 --> 00:29:43,950
with all the distributed version control

00:29:39,030 --> 00:29:46,320
systems because mostly all the

00:29:43,950 --> 00:29:50,130
distributed version control systems now

00:29:46,320 --> 00:29:52,890
share the same feature set they all have

00:29:50,130 --> 00:29:57,179
branches they all can merge easily they

00:29:52,890 --> 00:30:00,090
all have text so if the workflow works

00:29:57,179 --> 00:30:03,270
on this it should also work on material

00:30:00,090 --> 00:30:08,490
or bizarre it's only that I know only

00:30:03,270 --> 00:30:10,920
get and I know only of top get but I

00:30:08,490 --> 00:30:13,890
don't know if there are similar tools

00:30:10,920 --> 00:30:16,980
for material or bizarre to manage

00:30:13,890 --> 00:30:20,790
patches in the form of branches but that

00:30:16,980 --> 00:30:24,870
would be ideal if I could use also the

00:30:20,790 --> 00:30:29,100
tools that do merging between different

00:30:24,870 --> 00:30:33,420
systems so that I as a deviant package i

00:30:29,100 --> 00:30:35,850
use gift but the ubuntu guy uses father

00:30:33,420 --> 00:30:39,590
but we could still share our commits

00:30:35,850 --> 00:30:39,590
that would be idea

00:30:41,230 --> 00:30:44,460
the defender

00:30:52,489 --> 00:31:01,019
with naming conventions so you name the

00:30:56,929 --> 00:31:06,629
branches that are distribution specific

00:31:01,019 --> 00:31:10,709
for example libyan /h name or if you

00:31:06,629 --> 00:31:16,349
have a feature that you have added and

00:31:10,709 --> 00:31:19,139
you want to be meters up scream the best

00:31:16,349 --> 00:31:24,149
feature / somewhat if there is a bug fix

00:31:19,139 --> 00:31:28,379
that you want to share with HP back /

00:31:24,149 --> 00:31:30,989
and that's only convention that some

00:31:28,379 --> 00:31:35,039
names indicators for deviance some names

00:31:30,989 --> 00:31:37,649
that for packaging there is also still a

00:31:35,039 --> 00:31:52,919
need to come up with a set of common

00:31:37,649 --> 00:31:56,099
name spaces which are mr. they how much

00:31:52,919 --> 00:31:59,099
of these things I've described are

00:31:56,099 --> 00:32:02,059
already in practice between different

00:31:59,099 --> 00:32:04,829
distributions I don't know of any

00:32:02,059 --> 00:32:09,839
collaboration between distribution using

00:32:04,829 --> 00:32:14,279
such a system it's i know that i'm using

00:32:09,839 --> 00:32:17,219
this workflow and that it works but i

00:32:14,279 --> 00:32:25,709
don't know if there is any collaboration

00:32:17,219 --> 00:32:27,359
it may be but um that's something not

00:32:25,709 --> 00:32:32,099
sure but i don't know exactly how it

00:32:27,359 --> 00:32:36,329
works ubuntu takes the source packages

00:32:32,099 --> 00:32:39,299
of debian and either takes it as a are

00:32:36,329 --> 00:32:43,259
or patches them they import everything

00:32:39,299 --> 00:32:49,169
in bizarre hulu bunch o is managed with

00:32:43,259 --> 00:32:51,869
bizarre and yeah they also submit

00:32:49,169 --> 00:32:55,019
patches back but not with the help of

00:32:51,869 --> 00:32:56,950
version control with the help of bug

00:32:55,019 --> 00:33:04,830
tracker h files man

00:32:56,950 --> 00:33:04,830
this so my distribution based on your

00:33:06,539 --> 00:33:11,470
construction we have implemented kick

00:33:08,679 --> 00:33:14,740
belt package on our side absolutely love

00:33:11,470 --> 00:33:17,529
it but in essence what we've done is

00:33:14,740 --> 00:33:19,149
report your debian branch into our own

00:33:17,529 --> 00:33:22,570
branch so those three different or

00:33:19,149 --> 00:33:25,120
upstream debian and our crash what's

00:33:22,570 --> 00:33:30,360
good to shoot ocean so sorry what's your

00:33:25,120 --> 00:33:33,700
distribution jelica usual jelica nothing

00:33:30,360 --> 00:33:35,620
basically different languages that we

00:33:33,700 --> 00:33:37,769
modified with two hundred small plus we

00:33:35,620 --> 00:33:40,960
completely women can't build package and

00:33:37,769 --> 00:33:44,559
made some alterations to get t th etc

00:33:40,960 --> 00:33:47,490
and working very well but what issued

00:33:44,559 --> 00:33:49,450
every cloud is with all Debian packages

00:33:47,490 --> 00:33:53,860
infrastructure that you bunch intends to

00:33:49,450 --> 00:33:55,360
use is there any way of importing Debian

00:33:53,860 --> 00:33:57,070
packages so they actually cures get

00:33:55,360 --> 00:34:01,149
connects which will make it easier for

00:33:57,070 --> 00:34:02,049
meetings here manage I guess and then so

00:34:01,149 --> 00:34:03,190
it's going to convert them back

00:34:02,049 --> 00:34:05,260
obviously you can convert them back

00:34:03,190 --> 00:34:10,810
through the top yet but is there any way

00:34:05,260 --> 00:34:17,230
very men of course somebody could write

00:34:10,810 --> 00:34:19,240
such tool and could run it over the big

00:34:17,230 --> 00:34:21,730
in pictures but there isn't the answer

00:34:19,240 --> 00:34:25,359
but doesn't know you're gonna get

00:34:21,730 --> 00:34:26,109
package makes the legacy demion

00:34:25,359 --> 00:34:32,649
packaging

00:34:26,109 --> 00:34:36,819
oh yeah there's also a discussion for

00:34:32,649 --> 00:34:40,359
example to use git repositories directly

00:34:36,819 --> 00:34:44,730
instead of deviant source packages there

00:34:40,359 --> 00:34:49,119
is even I think there is an

00:34:44,730 --> 00:34:52,539
implementation and DP k g sauce so that

00:34:49,119 --> 00:34:55,389
i can use git repositories directly but

00:34:52,539 --> 00:34:58,539
this is still experimental and as i

00:34:55,389 --> 00:35:01,900
recall when I discussed this they said

00:34:58,539 --> 00:35:04,420
that Z implement implementation dpkg

00:35:01,900 --> 00:35:07,150
sauce is already obsolete because the

00:35:04,420 --> 00:35:11,319
discussion is already about some other

00:35:07,150 --> 00:35:22,380
former a but it's an indiscretion

00:35:11,319 --> 00:35:22,380

YouTube URL: https://www.youtube.com/watch?v=cR5oNolo7hg


