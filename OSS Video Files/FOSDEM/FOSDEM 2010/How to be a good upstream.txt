Title: How to be a good upstream
Publication date: 2011-12-22
Playlist: FOSDEM 2010
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,000 --> 00:00:05,790
um the title of this talk is how to be a

00:00:02,669 --> 00:00:08,370
good upstream well it could be as well

00:00:05,790 --> 00:00:13,920
labeled as how to be a good open source

00:00:08,370 --> 00:00:18,779
project in terms of distributions okay

00:00:13,920 --> 00:00:20,760
but myself is my Irish team Nick magento

00:00:18,779 --> 00:00:24,180
developer a member of the General

00:00:20,760 --> 00:00:27,240
Council and among other things lead of

00:00:24,180 --> 00:00:31,080
the job on recruiting projects or last

00:00:27,240 --> 00:00:35,660
things like 007 I've done a good share

00:00:31,080 --> 00:00:37,829
of packaging with for Java projects or a

00:00:35,660 --> 00:00:43,950
traditional all those rules based

00:00:37,829 --> 00:00:50,460
projects myself the goal here today is

00:00:43,950 --> 00:00:54,390
to give you a couple models if we start

00:00:50,460 --> 00:01:00,000
with how you don't want to be here's a

00:00:54,390 --> 00:01:02,910
tower and we want to move from the tower

00:01:00,000 --> 00:01:06,900
to a more community-based model where

00:01:02,910 --> 00:01:08,850
you get input from Ellison get better

00:01:06,900 --> 00:01:10,979
driving things going on how many of you

00:01:08,850 --> 00:01:13,500
here are involved in releasing open

00:01:10,979 --> 00:01:15,060
source projects are involved in I've

00:01:13,500 --> 00:01:22,710
actually something to release okay

00:01:15,060 --> 00:01:25,650
that's good applies to you then anyway

00:01:22,710 --> 00:01:28,350
ah how generally for people who don't

00:01:25,650 --> 00:01:31,710
know our staff on linux distributions

00:01:28,350 --> 00:01:34,579
and job on a user's machines first we

00:01:31,710 --> 00:01:38,189
have a code monkey coding at home and

00:01:34,579 --> 00:01:41,880
then they committed to hopefully a

00:01:38,189 --> 00:01:44,189
version control system and upstream

00:01:41,880 --> 00:01:46,649
makes a release at this point they

00:01:44,189 --> 00:01:48,149
hopefully do some quality issues or some

00:01:46,649 --> 00:01:51,299
kind of control that it at least

00:01:48,149 --> 00:01:54,540
compiles and then the distribution

00:01:51,299 --> 00:01:57,060
packager is able to package it and they

00:01:54,540 --> 00:01:59,430
have their own rules for what stable and

00:01:57,060 --> 00:02:02,700
what's not well your upstream considers

00:01:59,430 --> 00:02:04,560
or the project the hackers themselves

00:02:02,700 --> 00:02:06,719
considered stable it's not maybe

00:02:04,560 --> 00:02:10,349
something that they bein main consider

00:02:06,719 --> 00:02:12,390
stable at the day of the release and in

00:02:10,349 --> 00:02:22,020
the end it's

00:02:12,390 --> 00:02:24,900
hmm okay and in the end it ends up to a

00:02:22,020 --> 00:02:28,230
user running a linux distribution what a

00:02:24,900 --> 00:02:32,760
packager does most of this time you have

00:02:28,230 --> 00:02:36,090
a release start with building making

00:02:32,760 --> 00:02:39,180
their distribution packages out of trunk

00:02:36,090 --> 00:02:42,480
or head or whatever is not really

00:02:39,180 --> 00:02:44,910
something to strive for so hopefully you

00:02:42,480 --> 00:02:48,510
have a release to start with and you try

00:02:44,910 --> 00:02:51,870
building it if it works you committed

00:02:48,510 --> 00:02:54,720
and you usually have a packaging script

00:02:51,870 --> 00:02:57,150
from the last version to start your base

00:02:54,720 --> 00:02:59,670
your work on of course if you're a good

00:02:57,150 --> 00:03:01,470
upstream it's an instant success and

00:02:59,670 --> 00:03:03,810
everyone's happy and the end users get

00:03:01,470 --> 00:03:06,540
the latest version if it's not it

00:03:03,810 --> 00:03:09,390
doesn't build it has problems then you

00:03:06,540 --> 00:03:11,760
start to iterate and you need to modify

00:03:09,390 --> 00:03:13,680
the build script if you have four

00:03:11,760 --> 00:03:16,500
examples which your build system from

00:03:13,680 --> 00:03:18,239
all the tools to see make it might need

00:03:16,500 --> 00:03:21,709
a considerable amount of work for

00:03:18,239 --> 00:03:29,940
distribution packager instead of just

00:03:21,709 --> 00:03:36,090
pumping the version okay so all of these

00:03:29,940 --> 00:03:39,299
guys sit down game what should be a goal

00:03:36,090 --> 00:03:41,220
yoko if you want your stuff in

00:03:39,299 --> 00:03:43,079
distributions the easier it is for the

00:03:41,220 --> 00:03:46,160
packages the more likely it is to end up

00:03:43,079 --> 00:03:49,709
and then use your systems and of course

00:03:46,160 --> 00:03:52,769
if it doesn't build it takes a while and

00:03:49,709 --> 00:03:54,959
if it needs patches it takes even more

00:03:52,769 --> 00:03:56,820
time to get in the end user system so to

00:03:54,959 --> 00:03:59,340
where the goal if you want someone to

00:03:56,820 --> 00:04:02,130
actually use your code of course if

00:03:59,340 --> 00:04:05,310
you'll find that it's all or only sits

00:04:02,130 --> 00:04:09,600
in your GT repository and cheat hub then

00:04:05,310 --> 00:04:12,150
well that's your choice ok so how to get

00:04:09,600 --> 00:04:14,549
your project packages you don't need to

00:04:12,150 --> 00:04:16,890
be writing the build scripts yourselves

00:04:14,549 --> 00:04:19,410
most distributions have some kind of a

00:04:16,890 --> 00:04:22,229
bug tracking system which at least for

00:04:19,410 --> 00:04:25,140
gen 2 doubles as a feature request and

00:04:22,229 --> 00:04:26,460
whatever I have a problem database not

00:04:25,140 --> 00:04:30,870
general interest

00:04:26,460 --> 00:04:32,940
but you can just go there and just type

00:04:30,870 --> 00:04:34,530
in the URL if your project and I would

00:04:32,940 --> 00:04:36,449
like this package of course that

00:04:34,530 --> 00:04:39,180
guarantees you nothing someone has to

00:04:36,449 --> 00:04:40,860
actually do the work and but if people

00:04:39,180 --> 00:04:43,349
find your code useful then someone

00:04:40,860 --> 00:04:45,210
probably wants to use it and a developer

00:04:43,349 --> 00:04:49,650
who wants to use it usually packages it

00:04:45,210 --> 00:04:51,660
too but if it's weird science projects

00:04:49,650 --> 00:04:54,479
for calculating something in a nuclear

00:04:51,660 --> 00:05:00,900
reactor and then perhaps there's no one

00:04:54,479 --> 00:05:04,530
interested okay so about this trope

00:05:00,900 --> 00:05:07,680
practices well behaving all the tools

00:05:04,530 --> 00:05:11,190
you can use auto tools in many ways but

00:05:07,680 --> 00:05:13,380
let's say you use it in standard way and

00:05:11,190 --> 00:05:16,860
you the configure script works and

00:05:13,380 --> 00:05:19,080
there's no matter who do involved which

00:05:16,860 --> 00:05:21,150
you would have to account for in the

00:05:19,080 --> 00:05:23,009
packaging script then most ricci

00:05:21,150 --> 00:05:25,620
patients have done these kind of

00:05:23,009 --> 00:05:27,930
projects like it's a package for these

00:05:25,620 --> 00:05:29,220
comes poses so many times that they know

00:05:27,930 --> 00:05:35,520
what they're doing and it's quite

00:05:29,220 --> 00:05:37,919
straightforward and also it's not just

00:05:35,520 --> 00:05:39,750
all tools but not everything common if

00:05:37,919 --> 00:05:43,409
the distribution is doing job at all

00:05:39,750 --> 00:05:50,130
they know and quite well or C make if

00:05:43,409 --> 00:05:52,440
their packaging KD at all okay so we are

00:05:50,130 --> 00:05:56,340
going to the actual tool tip section

00:05:52,440 --> 00:05:59,300
this time when you release something the

00:05:56,340 --> 00:06:02,789
distribution storage section I like s

00:05:59,300 --> 00:06:06,389
sha or md5 but probably not these days

00:06:02,789 --> 00:06:09,659
that much anymore but if you see there's

00:06:06,389 --> 00:06:12,120
a problem with your release you never

00:06:09,659 --> 00:06:16,680
ever change your release horrible it's

00:06:12,120 --> 00:06:19,349
that it's again because it well the hash

00:06:16,680 --> 00:06:22,680
doesn't apply anymore and it's for

00:06:19,349 --> 00:06:25,139
example in terms of 10 to the usual gets

00:06:22,680 --> 00:06:29,030
the same terrible on their system that's

00:06:25,139 --> 00:06:32,430
what you release to your ftp servers so

00:06:29,030 --> 00:06:34,169
if they download it directly from ft be

00:06:32,430 --> 00:06:36,690
0 of course you have a mirroring system

00:06:34,169 --> 00:06:38,909
that you change the file then they get a

00:06:36,690 --> 00:06:40,380
failure and you get the angry users

00:06:38,909 --> 00:06:44,700
because they don't

00:06:40,380 --> 00:06:46,860
can't build it anymore hmm i'm already

00:06:44,700 --> 00:06:49,710
binary like debian or fedora stuff like

00:06:46,860 --> 00:06:51,660
that and if the file name doesn't change

00:06:49,710 --> 00:06:53,130
then the maintainer will probably not

00:06:51,660 --> 00:06:54,840
notice that this a new release that or

00:06:53,130 --> 00:06:56,700
that something's changed and the change

00:06:54,840 --> 00:07:01,740
doesn't propagate the distribution at

00:06:56,700 --> 00:07:04,080
all at least in case of 10 to it

00:07:01,740 --> 00:07:07,110
practice checksum bad yeah that's a good

00:07:04,080 --> 00:07:10,380
point for binary distributions the user

00:07:07,110 --> 00:07:14,550
never downloads directly the distribute

00:07:10,380 --> 00:07:16,470
the turbo which up train releases the

00:07:14,550 --> 00:07:20,010
second bullet bonded as if you are

00:07:16,470 --> 00:07:22,470
releasing a trouble many protests have

00:07:20,010 --> 00:07:24,630
different build settings for maintainer

00:07:22,470 --> 00:07:27,210
builds and developer builds or release

00:07:24,630 --> 00:07:29,280
builds and you should have your settings

00:07:27,210 --> 00:07:32,190
in such a way that when you go and die

00:07:29,280 --> 00:07:34,620
adult configure make it builds doesn't

00:07:32,190 --> 00:07:41,520
build your debug binaries or anything

00:07:34,620 --> 00:07:43,350
like that by default so you get a when

00:07:41,520 --> 00:07:44,670
they end use room at least on gentoo

00:07:43,350 --> 00:07:46,560
they usually want to build it with

00:07:44,670 --> 00:07:49,020
optimized binaries and not things like

00:07:46,560 --> 00:07:53,580
that so we get the second point we have

00:07:49,020 --> 00:07:57,180
cflags don't use w error because in a

00:07:53,580 --> 00:07:59,340
new TCC release we don't sense the build

00:07:57,180 --> 00:08:01,980
script but in New TCC release they

00:07:59,340 --> 00:08:03,810
usually add lot more warnings and your

00:08:01,980 --> 00:08:07,890
self propelled pol it doesn't build any

00:08:03,810 --> 00:08:09,390
more and getting a new TCC release into

00:08:07,890 --> 00:08:12,660
gen 2 it takes quite a while before

00:08:09,390 --> 00:08:13,710
everything is migrated and without a lot

00:08:12,660 --> 00:08:19,110
of work it would have and we'd never

00:08:13,710 --> 00:08:20,370
happen and some people think that the

00:08:19,110 --> 00:08:23,010
usual don't know what they're doing with

00:08:20,370 --> 00:08:26,850
cflags but actually it does have a lot

00:08:23,010 --> 00:08:28,860
of legitimate uses for example on if

00:08:26,850 --> 00:08:31,200
we're gonna play about x86 you might

00:08:28,860 --> 00:08:34,680
want to control the fitness of your

00:08:31,200 --> 00:08:37,969
binaries like 30 to 10 64 bits and

00:08:34,680 --> 00:08:41,310
things like that so things are actually

00:08:37,969 --> 00:08:43,200
needed you need to way to pass in flags

00:08:41,310 --> 00:08:46,650
to compilers and things like that to be

00:08:43,200 --> 00:08:49,650
able to get it work at all and of course

00:08:46,650 --> 00:08:53,130
you want to actually document what

00:08:49,650 --> 00:08:55,320
you're doing in change logs

00:08:53,130 --> 00:08:57,240
reading for example jit blocks of a

00:08:55,320 --> 00:09:01,410
thousand comets to find out that their

00:08:57,240 --> 00:09:03,360
security fix in comets 563 of the

00:09:01,410 --> 00:09:05,490
changelog is probably not something that

00:09:03,360 --> 00:09:07,110
gets noticed but if you change locks

00:09:05,490 --> 00:09:09,960
saying there's a security fix here

00:09:07,110 --> 00:09:13,410
someone might actually notice and do the

00:09:09,960 --> 00:09:17,250
appropriate things needed to get a

00:09:13,410 --> 00:09:22,460
security releases and faster stabling

00:09:17,250 --> 00:09:28,320
and things like that when to release

00:09:22,460 --> 00:09:31,170
producer lee lees often so hopefully a

00:09:28,320 --> 00:09:35,370
lot of you have already faced before but

00:09:31,170 --> 00:09:38,640
yeah if you release often it means that

00:09:35,370 --> 00:09:41,640
end users get your goat faster and you

00:09:38,640 --> 00:09:43,110
get more testers and then you get more

00:09:41,640 --> 00:09:47,120
testers to get more bucks and you

00:09:43,110 --> 00:09:47,120
improve your code and cycle continues

00:09:47,510 --> 00:09:54,720
release early well of course the same

00:09:50,310 --> 00:09:57,210
thing applies and the distributions even

00:09:54,720 --> 00:09:59,850
if you release often they're not all the

00:09:57,210 --> 00:10:02,400
versions end up from like in debian that

00:09:59,850 --> 00:10:04,620
it goes down from what's a unstable

00:10:02,400 --> 00:10:08,370
testing and things like that not all of

00:10:04,620 --> 00:10:10,680
the releases will end up in met in maine

00:10:08,370 --> 00:10:13,410
or intend to there's two stages from

00:10:10,680 --> 00:10:15,630
testing two main but they do still have

00:10:13,410 --> 00:10:17,850
a considerable user base to find out

00:10:15,630 --> 00:10:19,550
which of those versions work well so

00:10:17,850 --> 00:10:21,570
even if you release often you don't

00:10:19,550 --> 00:10:24,260
necessarily have to make sure that

00:10:21,570 --> 00:10:27,090
they're all of the best possible quality

00:10:24,260 --> 00:10:29,250
because there's and there's people

00:10:27,090 --> 00:10:32,810
testing in between before it ends up in

00:10:29,250 --> 00:10:32,810
like ubuntu 9.04

00:10:40,800 --> 00:10:48,550
yeah true bad it's a trade off faster

00:10:45,700 --> 00:10:50,890
you put it in that stable the more

00:10:48,550 --> 00:10:52,600
likely there's to be bugs and of course

00:10:50,890 --> 00:10:58,660
the maintainer has to care in the first

00:10:52,600 --> 00:11:01,060
place if you want something that's

00:10:58,660 --> 00:11:04,140
guaranteed and certifiable probably

00:11:01,060 --> 00:11:07,870
Enterprise distributions are much more

00:11:04,140 --> 00:11:09,310
slower moving target so you know have

00:11:07,870 --> 00:11:11,710
been tested for a couple of years before

00:11:09,310 --> 00:11:14,310
release but of course how first the

00:11:11,710 --> 00:11:18,580
software there is another question okay

00:11:14,310 --> 00:11:20,230
so dependency is a nice issue what

00:11:18,580 --> 00:11:23,680
distributions actually do with the state

00:11:20,230 --> 00:11:25,630
handle dependencies for you so it's an

00:11:23,680 --> 00:11:28,870
important part of a packet from a

00:11:25,630 --> 00:11:31,900
packages perspective so if you have

00:11:28,870 --> 00:11:36,130
optional dependencies we want to be able

00:11:31,900 --> 00:11:40,000
to configure them and disable them not

00:11:36,130 --> 00:11:42,610
all users want or if you have a database

00:11:40,000 --> 00:11:45,360
abstraction layer so not all you just

00:11:42,610 --> 00:11:48,850
want to install MySQL post-crescent

00:11:45,360 --> 00:11:50,680
Firebird and things like that as part of

00:11:48,850 --> 00:11:52,930
the dependency graph if they all they

00:11:50,680 --> 00:11:55,959
want to do is use a music player which

00:11:52,930 --> 00:12:01,690
has some as a library to store their

00:11:55,959 --> 00:12:04,959
albums and don't bundle anything if you

00:12:01,690 --> 00:12:07,540
have a libraries like Zeb liebe and you

00:12:04,959 --> 00:12:11,620
have a copy of the source code in your

00:12:07,540 --> 00:12:15,790
repository well it's now has had quite a

00:12:11,620 --> 00:12:18,550
few security problems lately so if you

00:12:15,790 --> 00:12:20,980
have a static copy will you remember to

00:12:18,550 --> 00:12:24,010
update it and follow the app upstream

00:12:20,980 --> 00:12:26,140
releases and it's not even your job in

00:12:24,010 --> 00:12:27,970
the first place the distributions are

00:12:26,140 --> 00:12:33,690
supposed to be handling just so you're

00:12:27,970 --> 00:12:36,339
just doubling the work link dependencies

00:12:33,690 --> 00:12:39,310
dependencies dynamically dynamic and

00:12:36,339 --> 00:12:41,110
dynamically if you link if you do static

00:12:39,310 --> 00:12:43,240
linking for everything it's still the

00:12:41,110 --> 00:12:46,510
same security problem and people don't

00:12:43,240 --> 00:12:49,750
pull like the huge size of the binaries

00:12:46,510 --> 00:12:53,140
on their systems

00:12:49,750 --> 00:12:57,190
using lip tool can help you with share

00:12:53,140 --> 00:13:03,880
type libraries in Oregon if you want to

00:12:57,190 --> 00:13:06,870
go that way versioning okay don't

00:13:03,880 --> 00:13:10,240
reinvent the wheel there's probably

00:13:06,870 --> 00:13:12,340
quite a few guidelines out there and

00:13:10,240 --> 00:13:13,900
once you have taken something don't

00:13:12,340 --> 00:13:18,960
change it and think something else is

00:13:13,900 --> 00:13:24,220
better be dice and you with an all from

00:13:18,960 --> 00:13:27,070
basic rules 0.9 is newer than 0.8 49 and

00:13:24,220 --> 00:13:30,820
if you do usually there should be some

00:13:27,070 --> 00:13:33,910
kind of a mature pneus relation between

00:13:30,820 --> 00:13:36,750
the versions if you release 1.0 1.0

00:13:33,910 --> 00:13:39,550
point 1 and the next version is 10.0

00:13:36,750 --> 00:13:42,120
well it's kind of hard to figure out

00:13:39,550 --> 00:13:44,550
where where your project is going and

00:13:42,120 --> 00:13:50,830
some of you might recognize the

00:13:44,550 --> 00:13:59,710
reference to 4.0 namely one desktop

00:13:50,830 --> 00:14:01,480
environment releasing a while ago even

00:13:59,710 --> 00:14:04,780
if you try to communicate people have

00:14:01,480 --> 00:14:07,750
some perspex perceptions of whether

00:14:04,780 --> 00:14:10,180
other release numbers work and you can't

00:14:07,750 --> 00:14:15,339
just work around them with PR which of

00:14:10,180 --> 00:14:20,920
the people I don't you read okay build

00:14:15,339 --> 00:14:25,960
systems I totally do mês calls boot

00:14:20,920 --> 00:14:28,060
thank you okay so in the beginning when

00:14:25,960 --> 00:14:31,960
you start coding writing your make file

00:14:28,060 --> 00:14:34,480
by hand it seems easy but when I have

00:14:31,960 --> 00:14:37,780
one file might actually work but when he

00:14:34,480 --> 00:14:41,800
is releasing something that's a little

00:14:37,780 --> 00:14:45,190
bit more complex you might want to be

00:14:41,800 --> 00:14:48,040
using anything more sophisticated like

00:14:45,190 --> 00:14:49,780
all the tools or whatever is standard

00:14:48,040 --> 00:14:51,880
for language your approach is reading

00:14:49,780 --> 00:14:54,880
that if you're a distribution package

00:14:51,880 --> 00:14:56,770
there it's not all C and C++ it's

00:14:54,880 --> 00:14:59,680
there's a lot of other languages which

00:14:56,770 --> 00:15:02,680
is just fine but if you're writing a

00:14:59,680 --> 00:15:08,320
ruby gem I wouldn't be using ends

00:15:02,680 --> 00:15:12,730
or how many of you know what Andy's yeah

00:15:08,320 --> 00:15:15,190
okay most of you okay good if you think

00:15:12,730 --> 00:15:17,260
about the other developer dependencies

00:15:15,190 --> 00:15:19,300
24 a source page distribution if you

00:15:17,260 --> 00:15:22,089
write things in ant it means you need to

00:15:19,300 --> 00:15:23,980
install Java to build it and if you're

00:15:22,089 --> 00:15:26,740
from service if you'd need to install

00:15:23,980 --> 00:15:30,700
Java to build your ruby gem which

00:15:26,740 --> 00:15:32,320
usually don't like they pretty much like

00:15:30,700 --> 00:15:38,649
to keep a minimal system instead of

00:15:32,320 --> 00:15:40,540
installing a half of possible compilers

00:15:38,649 --> 00:15:42,580
and things they can think of to install

00:15:40,540 --> 00:15:44,620
something they want to use they don't

00:15:42,580 --> 00:15:47,950
really care how it's built as long as

00:15:44,620 --> 00:15:53,140
installs and installs fast and with as

00:15:47,950 --> 00:15:57,130
little dependencies as possible build

00:15:53,140 --> 00:16:01,380
systems lerna so troubles when you make

00:15:57,130 --> 00:16:04,870
a release I've seen plenty of releases

00:16:01,380 --> 00:16:07,230
in Java world where you have a zip file

00:16:04,870 --> 00:16:10,300
usually window so you make a zip and

00:16:07,230 --> 00:16:12,550
inside it you can have bundled

00:16:10,300 --> 00:16:14,560
dependencies and version control

00:16:12,550 --> 00:16:16,990
directories so we have like them 20

00:16:14,560 --> 00:16:18,850
megabytes per raise when you go and

00:16:16,990 --> 00:16:23,140
strip out all the stuff there's maybe

00:16:18,850 --> 00:16:25,660
one megabyte left so it the vial gets

00:16:23,140 --> 00:16:30,760
released mirrored everywhere mirrored on

00:16:25,660 --> 00:16:36,190
distributions it it multiplies refasten

00:16:30,760 --> 00:16:39,490
usual space gets used consistent yeah

00:16:36,190 --> 00:16:42,220
i'm looking at you mozilla Mozilla

00:16:39,490 --> 00:16:46,829
Firefox does this yeah and all the other

00:16:42,220 --> 00:16:50,440
Mozilla projects include CVS directories

00:16:46,829 --> 00:16:56,110
doesn't version the directory under the

00:16:50,440 --> 00:16:58,150
Taobao it's just it doesn't look like a

00:16:56,110 --> 00:17:01,290
release I just took the CVS check out

00:16:58,150 --> 00:17:01,290
and package it but

00:17:08,100 --> 00:17:18,309
it's very very annoying yeah if you're

00:17:16,480 --> 00:17:21,789
building it manually it's very annoying

00:17:18,309 --> 00:17:23,230
but for gentle you don't I didn't think

00:17:21,789 --> 00:17:24,640
about it because you have a temporary

00:17:23,230 --> 00:17:27,970
directory in the first place where

00:17:24,640 --> 00:17:29,950
you're doing all the work so it doesn't

00:17:27,970 --> 00:17:35,049
doesn't come up but yeah that's annoying

00:17:29,950 --> 00:17:39,159
too yeah you do it in a home directory

00:17:35,049 --> 00:17:42,640
or someone I guess so what else

00:17:39,159 --> 00:17:45,039
unfucking consistently mean well if you

00:17:42,640 --> 00:17:47,169
have a first version you have a fubar

00:17:45,039 --> 00:17:49,630
hyphen your version and the next version

00:17:47,169 --> 00:17:52,870
is full power underscore your version

00:17:49,630 --> 00:17:55,870
like that it doesn't build the first

00:17:52,870 --> 00:17:58,059
time actually with sqlite their

00:17:55,870 --> 00:18:00,250
documentation variables I think they add

00:17:58,059 --> 00:18:02,230
two scripts for making them so every

00:18:00,250 --> 00:18:06,490
other release it was underscore and

00:18:02,230 --> 00:18:08,650
every other releases hyphen so it kept

00:18:06,490 --> 00:18:12,150
breaking for me which I didn't like that

00:18:08,650 --> 00:18:26,860
much but these days it seems to be fixed

00:18:12,150 --> 00:18:30,070
alright if you yeah yeah I'm want to

00:18:26,860 --> 00:18:31,780
repeat it further I said listen for

00:18:30,070 --> 00:18:33,159
those dreams when that happens to you

00:18:31,780 --> 00:18:35,289
engage with your upstream and tell them

00:18:33,159 --> 00:18:39,730
what's wrong yeah it's coming later in

00:18:35,289 --> 00:18:41,830
the show stable URLs mom if you release

00:18:39,730 --> 00:18:45,370
something when you then you go download

00:18:41,830 --> 00:18:47,650
it the next version you want to keep you

00:18:45,370 --> 00:18:50,890
around for first and if you haven't like

00:18:47,650 --> 00:18:53,470
an archive site you want to move it not

00:18:50,890 --> 00:18:55,720
like right after the next release but

00:18:53,470 --> 00:18:57,250
after that because for example if your

00:18:55,720 --> 00:18:58,600
packaging something and you notice

00:18:57,250 --> 00:19:00,870
you're like a couple versions behind

00:18:58,600 --> 00:19:03,250
then you take the latest release and

00:19:00,870 --> 00:19:04,870
well it doesn't build its bugs and

00:19:03,250 --> 00:19:07,900
whatever you might but to actually try

00:19:04,870 --> 00:19:09,580
to build Vlad release before and if you

00:19:07,900 --> 00:19:12,610
can't find it gets a little bit tricky

00:19:09,580 --> 00:19:15,750
and it's extra work they're all slackers

00:19:12,610 --> 00:19:15,750
on one I avoid work

00:19:20,379 --> 00:19:29,179
first for me to the world in general

00:19:27,100 --> 00:19:31,279
distributions don't like systems that

00:19:29,179 --> 00:19:36,309
download dependencies automatically

00:19:31,279 --> 00:19:36,309
installed to home directories and our oh

00:19:36,340 --> 00:19:41,830
yeah but that's um that's from my world

00:19:42,970 --> 00:19:50,479
but you're solving that problem aren't

00:19:45,109 --> 00:19:52,669
you and if you release you want to

00:19:50,479 --> 00:19:54,499
release binary and don't want to release

00:19:52,669 --> 00:19:56,869
binary about actual source code releases

00:19:54,499 --> 00:19:58,849
in the Java world it's when income like

00:19:56,869 --> 00:20:03,679
commentary is only binaries with a

00:19:58,849 --> 00:20:05,299
precompiled jar file and so you want to

00:20:03,679 --> 00:20:07,460
make sure that your source is actually

00:20:05,299 --> 00:20:09,529
available and not releasing all the key

00:20:07,460 --> 00:20:13,210
tax and github and things like that

00:20:09,529 --> 00:20:17,119
doesn't really work raise actual files

00:20:13,210 --> 00:20:19,820
so project management turn when you have

00:20:17,119 --> 00:20:22,549
a downstream project you want to be

00:20:19,820 --> 00:20:26,840
available so we can actually relate

00:20:22,549 --> 00:20:30,139
things back to you if you make release

00:20:26,840 --> 00:20:33,590
announcements a good thing is that

00:20:30,139 --> 00:20:36,259
release only mailing list so if if it's

00:20:33,590 --> 00:20:40,820
done on CBS commit mailing lists where

00:20:36,259 --> 00:20:42,340
there's like 10 emails a day that's kind

00:20:40,820 --> 00:20:44,450
of hard to pick up but if you have a

00:20:42,340 --> 00:20:47,779
announcement only the packages can

00:20:44,450 --> 00:20:50,149
supply subscribe to the announcement

00:20:47,779 --> 00:20:51,919
mailing list and actually follow it more

00:20:50,149 --> 00:20:53,450
easily then I might not be interested in

00:20:51,919 --> 00:20:59,899
your day-to-day work but when you make a

00:20:53,450 --> 00:21:01,970
release they're very industry and make

00:20:59,899 --> 00:21:10,629
it easy to file box mantis sucks and

00:21:01,970 --> 00:21:13,609
things like that so backflow we do and

00:21:10,629 --> 00:21:16,489
act as a filter between upstream bug

00:21:13,609 --> 00:21:20,090
trackers and so you might not see

00:21:16,489 --> 00:21:23,259
everything that we do try to file things

00:21:20,090 --> 00:21:28,429
back upstream which makes sense

00:21:23,259 --> 00:21:30,470
hopefully we it's for end users it's

00:21:28,429 --> 00:21:31,610
kind of hard to know where every bug

00:21:30,470 --> 00:21:33,440
tracker is

00:21:31,610 --> 00:21:35,210
so we just try to encourage them to file

00:21:33,440 --> 00:21:37,929
everything our chucker I don't know how

00:21:35,210 --> 00:22:03,679
other distributions do it but probably

00:21:37,929 --> 00:22:06,440
anyone know here debian ubuntu all right

00:22:03,679 --> 00:22:10,340
a lost pet which is the go to a bug

00:22:06,440 --> 00:22:13,730
tracker it's just we just linked bucks

00:22:10,340 --> 00:22:15,950
to upstream and yeah whenever burke

00:22:13,730 --> 00:22:18,470
comes in we try to see if there's an

00:22:15,950 --> 00:22:23,120
upstream link after dark available and

00:22:18,470 --> 00:22:25,970
if not without them and yeah the same

00:22:23,120 --> 00:22:28,370
just probably several dozen as well so i

00:22:25,970 --> 00:22:30,890
don't think that's very different if i

00:22:28,370 --> 00:22:35,480
may picking on debian i'm in that in the

00:22:30,890 --> 00:22:39,380
case usually that depends on the package

00:22:35,480 --> 00:22:41,270
our packages that prefer where you file

00:22:39,380 --> 00:22:43,270
it yourself in the upstream mode or you

00:22:41,270 --> 00:22:46,730
can actually there are many that that

00:22:43,270 --> 00:22:51,380
for what dr. irrelevant cool depends a

00:22:46,730 --> 00:22:53,299
bit but we have some upstream bug

00:22:51,380 --> 00:22:57,140
tracker thing that will compare our box

00:22:53,299 --> 00:22:59,890
against bug the upstream back but mainly

00:22:57,140 --> 00:23:03,850
it's it's a manual process yeah it's a

00:22:59,890 --> 00:23:03,850
saver in large metal

00:23:05,480 --> 00:23:12,929
I'm speaking from upstream perspective

00:23:09,919 --> 00:23:14,820
we get the bugs users come users may

00:23:12,929 --> 00:23:16,790
report them to your bug but other users

00:23:14,820 --> 00:23:18,780
will report them to us we get them

00:23:16,790 --> 00:23:20,250
sometimes we get them when they're bugs

00:23:18,780 --> 00:23:24,210
in the distribution rather than in our

00:23:20,250 --> 00:23:25,890
product too yeah that's true it's kind

00:23:24,210 --> 00:23:29,730
of hard for users sometimes to figure

00:23:25,890 --> 00:23:31,770
out where to file things and even if you

00:23:29,730 --> 00:23:35,220
have automated tools people will still

00:23:31,770 --> 00:23:38,429
eat ignore them so it's very hard to

00:23:35,220 --> 00:23:41,070
make a full bulletproof process for that

00:23:38,429 --> 00:23:47,850
but if anyone has ideas feel free to

00:23:41,070 --> 00:23:49,410
propose so what did I forget hopefully

00:23:47,850 --> 00:23:52,830
we have here a lot of people who are

00:23:49,410 --> 00:23:56,460
doing packaging or upstream work so it's

00:23:52,830 --> 00:24:02,720
a good time to give suggestions and get

00:23:56,460 --> 00:24:05,700
a discussion going on more ideas yeah

00:24:02,720 --> 00:24:08,220
one thing I really absolutely hate is

00:24:05,700 --> 00:24:10,679
for example sourceforge because when you

00:24:08,220 --> 00:24:13,260
try to download a file you usually get a

00:24:10,679 --> 00:24:18,330
30 to permanently moved and you get a

00:24:13,260 --> 00:24:21,179
301 temporarily moved then you get a 200

00:24:18,330 --> 00:24:24,450
file found but even if the file is not

00:24:21,179 --> 00:24:27,929
found you get a reply which is a stupid

00:24:24,450 --> 00:24:30,450
index dot HTML which means that I try to

00:24:27,929 --> 00:24:34,110
unpack it and I think oh wait that's not

00:24:30,450 --> 00:24:37,080
even an archive and then I'm quite upset

00:24:34,110 --> 00:24:40,740
because I have to find the file the only

00:24:37,080 --> 00:24:43,470
one that's worse as failures and i

00:24:40,740 --> 00:24:52,350
think--not project should post anything

00:24:43,470 --> 00:24:55,970
there because I mean it's a cougar how

00:24:52,350 --> 00:25:00,799
does launch pad help it's better than

00:24:55,970 --> 00:25:00,799
source points or various

00:25:07,730 --> 00:25:14,940
I'd like to gather opinions for how do

00:25:13,409 --> 00:25:17,610
other people manage if you have a

00:25:14,940 --> 00:25:21,270
project that has a it's a really popular

00:25:17,610 --> 00:25:23,070
project produces a lot of box report

00:25:21,270 --> 00:25:24,870
back to the distribution of trigger but

00:25:23,070 --> 00:25:29,039
the packager is not able to handle the

00:25:24,870 --> 00:25:31,220
back flow and time passes and you know

00:25:29,039 --> 00:25:33,750
that most of the bugs in your district

00:25:31,220 --> 00:25:35,730
package in your district trigger is

00:25:33,750 --> 00:25:38,730
probably fixed in the new release but

00:25:35,730 --> 00:25:41,309
you just don't know what do people think

00:25:38,730 --> 00:25:43,860
it's acceptable is it acceptable to just

00:25:41,309 --> 00:25:48,630
close the book and say a user please try

00:25:43,860 --> 00:25:50,880
a new version or what guidelines to

00:25:48,630 --> 00:25:54,360
people have for that well at least we

00:25:50,880 --> 00:25:57,419
have a status resolving status of test

00:25:54,360 --> 00:25:59,520
request if the user is actually active

00:25:57,419 --> 00:26:02,490
and they will probably test it and

00:25:59,520 --> 00:26:04,260
finally works and if you if the buck

00:26:02,490 --> 00:26:10,140
manifests itself again someone will

00:26:04,260 --> 00:26:14,190
probably file a new bug hmm yeah that

00:26:10,140 --> 00:26:16,590
works tuba it's a question of individual

00:26:14,190 --> 00:26:18,390
maintainer what he wants to do probably

00:26:16,590 --> 00:26:20,970
it's a very old one test request goes

00:26:18,390 --> 00:26:22,980
fine but if it's a if it's filed in last

00:26:20,970 --> 00:26:25,049
like month may be opening its more

00:26:22,980 --> 00:26:27,390
prudent but at least in the gentoo book

00:26:25,049 --> 00:26:29,220
tracker there's open box from like years

00:26:27,390 --> 00:26:32,730
and years have passed and no one has

00:26:29,220 --> 00:26:38,490
looked at them you know I would like to

00:26:32,730 --> 00:26:41,730
make a comment about a lot about a

00:26:38,490 --> 00:26:43,950
successful and that's what we're all the

00:26:41,730 --> 00:26:46,740
blocks pretty well and then you get

00:26:43,950 --> 00:26:49,590
ortho fall without any content its

00:26:46,740 --> 00:26:53,309
standards start start start but not /

00:26:49,590 --> 00:26:56,549
then the UNIX account name of the

00:26:53,309 --> 00:27:02,570
project and then the turbo so maybe use

00:26:56,549 --> 00:27:02,570
this Kotetsu

00:27:03,210 --> 00:27:20,950
yes well your talk is called how to be a

00:27:18,429 --> 00:27:22,059
good upstream I also like to make some

00:27:20,950 --> 00:27:26,950
comments about how to be a good

00:27:22,059 --> 00:27:29,139
downstream yeah feel free yeah so um so

00:27:26,950 --> 00:27:32,010
we're also so I'm ffmpeg upstream and

00:27:29,139 --> 00:27:35,230
he's the debian ubuntu packages so he's

00:27:32,010 --> 00:27:37,179
we know about this from firsthand and a

00:27:35,230 --> 00:27:40,929
few comments i'd like to make is for

00:27:37,179 --> 00:27:44,500
four packages not to patch packages but

00:27:40,929 --> 00:27:48,210
instead patch the upstream directly and

00:27:44,500 --> 00:27:50,679
tell the upstream about their problems

00:27:48,210 --> 00:27:52,570
because sometimes i go go hunting

00:27:50,679 --> 00:27:54,730
through distribution packages and see

00:27:52,570 --> 00:28:00,639
how they they patch ffmpeg or em play or

00:27:54,730 --> 00:28:05,470
whatever and of course they all do ksb

00:28:00,639 --> 00:28:09,250
speak up video and he'll know if its own

00:28:05,470 --> 00:28:25,299
but they're on the phone is dot and m11

00:28:09,250 --> 00:28:28,750
isn't okay okay i'm trying to speak up

00:28:25,299 --> 00:28:31,120
is that better yes okay yeah don't

00:28:28,750 --> 00:28:33,659
please don't don't patch the packages

00:28:31,120 --> 00:28:35,980
instead talk with your upstream and

00:28:33,659 --> 00:28:41,769
forward the package is there or have it

00:28:35,980 --> 00:28:45,130
fixed there in a clean way so what if

00:28:41,769 --> 00:28:48,010
i'm a comment on that there it all works

00:28:45,130 --> 00:28:50,169
very nice in theory but the practice is

00:28:48,010 --> 00:28:52,090
that sometimes as a distribution

00:28:50,169 --> 00:28:54,010
maintain you will find that you have a

00:28:52,090 --> 00:28:55,899
patch that makes a lot of sense for your

00:28:54,010 --> 00:28:59,169
distribution that doesn't necessarily

00:28:55,899 --> 00:29:01,570
make sense for the upstream or that bf

00:28:59,169 --> 00:29:03,580
seen doesn't agree with because phase

00:29:01,570 --> 00:29:05,110
you're trying to get everything to look

00:29:03,580 --> 00:29:06,970
the same in your distribution and that

00:29:05,110 --> 00:29:09,010
means you need to patch this particular

00:29:06,970 --> 00:29:10,240
it so that looks the same as all the

00:29:09,010 --> 00:29:12,070
other package i do the same thing but

00:29:10,240 --> 00:29:14,470
your option doesn't like that so you

00:29:12,070 --> 00:29:16,419
need to carry patch to you to do that in

00:29:14,470 --> 00:29:18,010
theory I agree that yes most patches

00:29:16,419 --> 00:29:19,330
should be sent up stream but there are

00:29:18,010 --> 00:29:21,580
patches that just doesn't don't belong

00:29:19,330 --> 00:29:24,039
there and that patches that cases where

00:29:21,580 --> 00:29:25,960
it it it doesn't make sense to do that I

00:29:24,039 --> 00:29:28,510
know that there are some patches that

00:29:25,960 --> 00:29:30,730
will stay local but my experience is

00:29:28,510 --> 00:29:33,340
that most of the patches should not stay

00:29:30,730 --> 00:29:35,440
local for the ffmpeg so when when why

00:29:33,340 --> 00:29:38,620
not took over and we finally had in a

00:29:35,440 --> 00:29:40,750
good interaction before because before

00:29:38,620 --> 00:29:43,840
the packager was just not very active

00:29:40,750 --> 00:29:48,610
and then there was a dozen patches I

00:29:43,840 --> 00:29:51,940
reviewed them and i applied 11 state and

00:29:48,610 --> 00:29:55,030
the other 10 we threw away well I'm not

00:29:51,940 --> 00:29:57,760
saying it's going well in all the case

00:29:55,030 --> 00:30:00,100
you're dying if i can add something and

00:29:57,760 --> 00:30:03,640
into the better I've been upstream

00:30:00,100 --> 00:30:06,039
vaccine for a while and yeah sometimes

00:30:03,640 --> 00:30:08,890
you have patches that it's not easy to

00:30:06,039 --> 00:30:14,020
match upstream when I first took over

00:30:08,890 --> 00:30:16,679
scene I had 14 kilobyte patch but just

00:30:14,020 --> 00:30:18,700
went to fix the problems with the

00:30:16,679 --> 00:30:21,039
dependencies and with the libraries at

00:30:18,700 --> 00:30:24,460
bunbury internally and extremely

00:30:21,039 --> 00:30:26,710
rejected it but I didn't know that I had

00:30:24,460 --> 00:30:29,409
to keep it local to be gentle I actually

00:30:26,710 --> 00:30:32,260
was able to just take it make it

00:30:29,409 --> 00:30:34,659
optional left the default behavior just

00:30:32,260 --> 00:30:37,080
what's up soon moms and then added a

00:30:34,659 --> 00:30:41,080
simple switch to move to what we need

00:30:37,080 --> 00:30:42,789
mmm for what I can see in gentoo almost

00:30:41,080 --> 00:30:46,120
all the patches just need to have a

00:30:42,789 --> 00:30:48,070
conditional part but can be enabled just

00:30:46,120 --> 00:30:50,530
when it is needed by the distribution

00:30:48,070 --> 00:30:52,720
and that would be an extreme problem if

00:30:50,530 --> 00:30:54,309
such a touch wouldn't be a it wouldn't

00:30:52,720 --> 00:30:57,850
be murdered even if it's just

00:30:54,309 --> 00:31:00,460
conditional or even it's just something

00:30:57,850 --> 00:31:03,039
that the distribution enables as long as

00:31:00,460 --> 00:31:04,600
the default is what I've seen ones i

00:31:03,039 --> 00:31:10,059
think i should let me clarify that i'm

00:31:04,600 --> 00:31:13,270
not saying that it's always a good thing

00:31:10,059 --> 00:31:15,970
that our patches or something I agree in

00:31:13,270 --> 00:31:17,710
many cases patches that are kept in in

00:31:15,970 --> 00:31:19,360
distribution shouldn't be there and

00:31:17,710 --> 00:31:20,650
should be send upstream there are there

00:31:19,360 --> 00:31:22,000
are cases there's definitely case where

00:31:20,650 --> 00:31:24,090
it's going wrong and I certainly agree

00:31:22,000 --> 00:31:27,970
there I'm just saying that in some cases

00:31:24,090 --> 00:31:29,920
merging patches upstream just on

00:31:27,970 --> 00:31:31,660
because in some case our case where it

00:31:29,920 --> 00:31:33,510
is a little bit legitimate Patchett does

00:31:31,660 --> 00:31:35,680
need to be kept in the distribution

00:31:33,510 --> 00:31:38,500
level that's what I'm saying I'm not

00:31:35,680 --> 00:31:39,820
saying that works used but that you're

00:31:38,500 --> 00:31:42,400
not right I certainly there are cases

00:31:39,820 --> 00:31:44,260
and eating the case of ever been packin

00:31:42,400 --> 00:31:45,670
em play that's a good example whether it

00:31:44,260 --> 00:31:47,260
started have been many patches in

00:31:45,670 --> 00:31:50,920
distributions that really didn't belong

00:31:47,260 --> 00:31:54,010
there but yeah it's a bit of it's a bit

00:31:50,920 --> 00:31:55,240
of an education in some cases shoot do

00:31:54,010 --> 00:31:59,740
we sent this upstream new keep this

00:31:55,240 --> 00:32:02,410
locally and I think in many cases it's

00:31:59,740 --> 00:32:03,700
not being done right currently and yeah

00:32:02,410 --> 00:32:05,830
definitely the destination for

00:32:03,700 --> 00:32:07,930
improvement I have to say in my history

00:32:05,830 --> 00:32:10,480
of five years working in turn to the

00:32:07,930 --> 00:32:12,930
only true upstream patches I couldn't

00:32:10,480 --> 00:32:17,230
send up where I one for academics

00:32:12,930 --> 00:32:21,670
because I actually wrote it twice it was

00:32:17,230 --> 00:32:25,360
a 40 kilobyte patch upstream seen it oh

00:32:21,670 --> 00:32:28,780
I just will take a couple of lines of it

00:32:25,360 --> 00:32:31,480
changes completely my code for it better

00:32:28,780 --> 00:32:33,610
be don't apply change it again upstream

00:32:31,480 --> 00:32:37,330
still doesn't care did bundle zapathon

00:32:33,610 --> 00:32:41,710
tag did I just eat ffmpeg over and over

00:32:37,330 --> 00:32:46,150
and the other is related to the mono

00:32:41,710 --> 00:32:49,870
project Fedora engine to the I think

00:32:46,150 --> 00:32:55,270
Federer as well install mono only be 64

00:32:49,870 --> 00:32:57,640
for a 64-bit install and no lo lo

00:32:55,270 --> 00:33:00,850
actively refused to even make it

00:32:57,640 --> 00:33:05,250
conditional Prince alert but that's one

00:33:00,850 --> 00:33:09,640
very very edge of a other problem and

00:33:05,250 --> 00:33:11,620
two small remarks to that first the

00:33:09,640 --> 00:33:14,440
issue is different when you are dealing

00:33:11,620 --> 00:33:17,770
with a temporary distribution page so

00:33:14,440 --> 00:33:19,960
you fix something so for example like a

00:33:17,770 --> 00:33:22,090
package builds correctly you submit the

00:33:19,960 --> 00:33:25,750
patch upstream and then it sits there

00:33:22,090 --> 00:33:28,030
just months without any activity so in

00:33:25,750 --> 00:33:31,330
this case I think it's it's needed to

00:33:28,030 --> 00:33:35,560
have distribution patches and one other

00:33:31,330 --> 00:33:38,320
thing was also needed is I'm downstream

00:33:35,560 --> 00:33:40,440
for a PSD project more BST which is a

00:33:38,320 --> 00:33:43,530
relatively exotic platform

00:33:40,440 --> 00:33:46,320
and sometimes when I submit patches just

00:33:43,530 --> 00:33:48,180
to fix the build on our systems I get

00:33:46,320 --> 00:33:54,470
told to upstream your platforms

00:33:48,180 --> 00:33:54,470
irrelevant go away what should i do then

00:33:55,250 --> 00:34:00,150
yeah it's just one one more remark to

00:33:58,200 --> 00:34:02,220
that so I was just saying that or trying

00:34:00,150 --> 00:34:04,860
to say that the default should be don't

00:34:02,220 --> 00:34:07,020
patch of course if the upstream is is

00:34:04,860 --> 00:34:08,490
vacant or inactive for stuff then you

00:34:07,020 --> 00:34:10,860
have to patch but you should by all

00:34:08,490 --> 00:34:13,800
means try not to patch also because I

00:34:10,860 --> 00:34:15,840
saw like I saw all the people doing the

00:34:13,800 --> 00:34:17,730
same patches doing the same stuff and in

00:34:15,840 --> 00:34:19,590
if instead they had told me what they

00:34:17,730 --> 00:34:21,450
needed for example reinhardt made some

00:34:19,590 --> 00:34:24,030
patch and he looked at it said oh wait

00:34:21,450 --> 00:34:26,370
half an hour later I had fixed it in a

00:34:24,030 --> 00:34:30,270
better way and was just really I did I

00:34:26,370 --> 00:34:34,770
gave him what he needed what was seen as

00:34:30,270 --> 00:34:41,340
well as when we were bundling just to

00:34:34,770 --> 00:34:44,310
you right over agree that that you would

00:34:41,340 --> 00:34:46,560
really be that of all the damn streams

00:34:44,310 --> 00:34:48,690
actually contact upstream I think it's

00:34:46,560 --> 00:34:50,550
not realistic to require us to wait

00:34:48,690 --> 00:34:52,470
before you apply it and made a new

00:34:50,550 --> 00:34:55,920
release because you know the release and

00:34:52,470 --> 00:34:58,320
then we are going to have to release it

00:34:55,920 --> 00:35:00,210
and we have to have it photo ID I'm not

00:34:58,320 --> 00:35:01,800
saying that well it looked to me like

00:35:00,210 --> 00:35:04,170
you said that we should not apply

00:35:01,800 --> 00:35:06,900
patches so we should wait before you did

00:35:04,170 --> 00:35:09,000
it so I think that's not that's not

00:35:06,900 --> 00:35:12,450
working of course we should cooperate

00:35:09,000 --> 00:35:14,370
but I think we will have to have our

00:35:12,450 --> 00:35:17,280
local patches before you will release

00:35:14,370 --> 00:35:19,140
them well it's um it depends on the on

00:35:17,280 --> 00:35:21,450
the kind of patch but if it's if

00:35:19,140 --> 00:35:23,700
upstream rejects it or doesn't want it

00:35:21,450 --> 00:35:28,440
or so then maybe the distribution should

00:35:23,700 --> 00:35:30,750
also not try to do it okay but we do

00:35:28,440 --> 00:35:32,820
meet certain and also also helping set

00:35:30,750 --> 00:35:34,560
me up also the the upstream you know the

00:35:32,820 --> 00:35:36,660
package is much better and usually can

00:35:34,560 --> 00:35:41,070
come up with better solutions and doing

00:35:36,660 --> 00:35:44,610
quicker and not yeah I think the great

00:35:41,070 --> 00:35:46,350
lesson has to be communicate and I'm

00:35:44,610 --> 00:35:49,530
having this discussion i have to mention

00:35:46,350 --> 00:35:55,430
this the famous case of debian and open

00:35:49,530 --> 00:35:55,430
SSL and yes and all those in a bikini

00:35:55,880 --> 00:36:04,290
yeah it needed for communication yeah

00:36:00,320 --> 00:36:07,410
are we I speak I best known for my role

00:36:04,290 --> 00:36:08,880
in Apache we have a issue of Debian

00:36:07,410 --> 00:36:10,730
there because they bein repackage Apache

00:36:08,880 --> 00:36:13,859
in such a way that it's virtually

00:36:10,730 --> 00:36:15,119
unrecognizable all the users of Debian

00:36:13,859 --> 00:36:16,650
come to us for support because our

00:36:15,119 --> 00:36:19,710
documentation doesn't correspond to what

00:36:16,650 --> 00:36:23,400
they get and of course bibian

00:36:19,710 --> 00:36:27,030
derivatives you wouldn't to etc and

00:36:23,400 --> 00:36:29,190
that's it yep what I can keep what I

00:36:27,030 --> 00:36:30,930
keep saying we need from them is is to

00:36:29,190 --> 00:36:32,849
engage with us so we can come up with

00:36:30,930 --> 00:36:40,290
something that works for both us and

00:36:32,849 --> 00:36:43,290
them yeah I didn't understand what you

00:36:40,290 --> 00:36:46,530
said dress no interesting the same one

00:36:43,290 --> 00:36:49,619
thing five strings is just try to listen

00:36:46,530 --> 00:36:51,869
try to avoid and don't think air

00:36:49,619 --> 00:36:56,670
distribution all your system is the only

00:36:51,869 --> 00:37:00,270
one I really often had it with upstream

00:36:56,670 --> 00:37:04,440
step said Oh John to is brought in any

00:37:00,270 --> 00:37:07,260
way things like that or who cares about

00:37:04,440 --> 00:37:10,320
your strange linka flags or things like

00:37:07,260 --> 00:37:13,770
that try to really understand if someone

00:37:10,320 --> 00:37:18,089
sends you a patch what his problem is

00:37:13,770 --> 00:37:20,160
and like with the guy from obsd it's

00:37:18,089 --> 00:37:22,770
only good for your project if it runs on

00:37:20,160 --> 00:37:25,380
mel b SD or any other strange system so

00:37:22,770 --> 00:37:27,540
cooperate with all the down streams and

00:37:25,380 --> 00:37:34,200
not just the one from your favorite

00:37:27,540 --> 00:37:36,990
distribution just wanted to snoop which

00:37:34,200 --> 00:37:38,670
were that there is i've run into some up

00:37:36,990 --> 00:37:41,190
streams that sign I don't want you to

00:37:38,670 --> 00:37:43,080
package it they've literally said that

00:37:41,190 --> 00:37:52,950
no don't package that that violates I'm

00:37:43,080 --> 00:38:00,260
by GPL on it no you said do not packaged

00:37:52,950 --> 00:38:00,260
it whatsoever there's a questionnaire

00:38:04,670 --> 00:38:09,390
same same dumb question as before I'm

00:38:07,440 --> 00:38:12,450
afraid what's the best way to announce

00:38:09,390 --> 00:38:14,550
new packages announce new packages well

00:38:12,450 --> 00:38:17,040
i didn't i dunno fresh meat is followed

00:38:14,550 --> 00:38:20,750
by some people but the best way is to

00:38:17,040 --> 00:38:23,130
just go and fight a fire box to each

00:38:20,750 --> 00:38:25,470
distribution striker for which you want

00:38:23,130 --> 00:38:27,270
it included and if it gets popular

00:38:25,470 --> 00:38:29,340
enough the minor ones will follow most

00:38:27,270 --> 00:38:34,140
likely i don't have any better way in

00:38:29,340 --> 00:38:36,750
mind but this diego have there i I've

00:38:34,140 --> 00:38:39,450
had a little bit of an idea because of a

00:38:36,750 --> 00:38:40,950
relief notification before so instead we

00:38:39,450 --> 00:38:43,859
think the best way to announce the new

00:38:40,950 --> 00:38:47,180
package is to have a project management

00:38:43,859 --> 00:38:49,650
system that automatically once the

00:38:47,180 --> 00:38:53,280
interested parties but a new files

00:38:49,650 --> 00:38:55,619
released surcharge used to have a very

00:38:53,280 --> 00:38:59,430
nice main notification system probably

00:38:55,619 --> 00:39:03,180
one of the few nice things but it but we

00:38:59,430 --> 00:39:05,820
were available my own project and they

00:39:03,180 --> 00:39:11,520
actually broke it lately because we now

00:39:05,820 --> 00:39:14,670
have an RSS feed of all files and you

00:39:11,520 --> 00:39:16,830
get still projects like launch pad that

00:39:14,670 --> 00:39:19,890
still has no way to subscribe to new

00:39:16,830 --> 00:39:23,849
release of the other package and relies

00:39:19,890 --> 00:39:26,730
on the upstream packages to upstream or

00:39:23,849 --> 00:39:30,890
laser to actually send out an

00:39:26,730 --> 00:39:37,589
announcement the best way is to just

00:39:30,890 --> 00:39:40,230
take the the procedure of realism it

00:39:37,589 --> 00:39:42,480
might be upload to a project site upload

00:39:40,230 --> 00:39:44,720
for revisions it's uploading to jump

00:39:42,480 --> 00:39:47,760
pattern nowadays a gem cutter has a

00:39:44,720 --> 00:39:50,040
configurable feed but allows you to see

00:39:47,760 --> 00:39:53,310
when a new journey is released and it's

00:39:50,040 --> 00:39:55,700
part of the relay system having an

00:39:53,310 --> 00:39:58,589
external announcement relies on

00:39:55,700 --> 00:40:00,869
developers remembering to do something

00:39:58,589 --> 00:40:04,140
extra so anything that can be automated

00:40:00,869 --> 00:40:07,349
maybe mail fresh meat for me to use to

00:40:04,140 --> 00:40:11,460
have an API to updated by your data

00:40:07,349 --> 00:40:12,570
automatically and the integrated systems

00:40:11,460 --> 00:40:15,780
like Bardot still

00:40:12,570 --> 00:40:18,120
should have it and to send a mail one

00:40:15,780 --> 00:40:21,120
very latest down it's the fastest way

00:40:18,120 --> 00:40:24,630
keep its way to have relief notification

00:40:21,120 --> 00:40:27,240
push due to the packages just not a new

00:40:24,630 --> 00:40:31,800
releases announcing new packages to you

00:40:27,240 --> 00:40:34,020
packages from scratch the most simple

00:40:31,800 --> 00:40:36,510
ways to contact some up some dumb stream

00:40:34,020 --> 00:40:41,580
developer or make a little bit of a pass

00:40:36,510 --> 00:40:46,800
around so for instance I can take one I

00:40:41,580 --> 00:40:48,690
added lately goes not seriously right

00:40:46,800 --> 00:40:51,960
way to pronounce it it was named the

00:40:48,690 --> 00:40:54,950
quite a few times in the planet sir last

00:40:51,960 --> 00:40:58,680
month source source code management

00:40:54,950 --> 00:41:02,520
visualization tool I read about it I

00:40:58,680 --> 00:41:06,080
package it and what's this simple play

00:41:02,520 --> 00:41:06,080
make it pass about it

00:41:10,220 --> 00:41:18,590
yeah and a question about licenses and

00:41:14,930 --> 00:41:20,990
well the point about licenses and

00:41:18,590 --> 00:41:25,580
complaining this oh you're awful outer

00:41:20,990 --> 00:41:30,790
package this reminds me that that's

00:41:25,580 --> 00:41:33,830
pretty extreme but it but that up screen

00:41:30,790 --> 00:41:35,359
developers need to choose their license

00:41:33,830 --> 00:41:38,000
carefully make sure they understand what

00:41:35,359 --> 00:41:43,390
it means especially in terms of what

00:41:38,000 --> 00:41:46,099
they can depend on what what libraries

00:41:43,390 --> 00:41:50,630
or other licenses are compatible with

00:41:46,099 --> 00:41:53,930
that and make sure they label their code

00:41:50,630 --> 00:41:56,660
with the license properly I actually

00:41:53,930 --> 00:41:58,910
just had one of my packages kicked out

00:41:56,660 --> 00:42:02,390
of Debian because it depended on a perl

00:41:58,910 --> 00:42:04,520
module which unfortunately had been left

00:42:02,390 --> 00:42:07,070
with a boilerplate license statement and

00:42:04,520 --> 00:42:12,490
didn't say it didn't actually state the

00:42:07,070 --> 00:42:16,070
correct copyright and license and

00:42:12,490 --> 00:42:19,580
absolutely presumably went to release it

00:42:16,070 --> 00:42:23,450
under GPL plus artistic but we don't we

00:42:19,580 --> 00:42:25,520
don't have this clearly stated yeah you

00:42:23,450 --> 00:42:27,500
do our point in the earlier comment that

00:42:25,520 --> 00:42:30,140
denouncing new packages to distribution

00:42:27,500 --> 00:42:33,520
systems optimal at the moment you need

00:42:30,140 --> 00:42:36,080
to do manual work but if it's something

00:42:33,520 --> 00:42:38,930
many people want to use then probably

00:42:36,080 --> 00:42:40,730
the users themselves will file box to

00:42:38,930 --> 00:42:45,380
their distribution trackage that I want

00:42:40,730 --> 00:42:47,599
to use this and this that it's already

00:42:45,380 --> 00:42:50,450
been set but the upstream developers

00:42:47,599 --> 00:42:52,490
please use fresh meat because it allows

00:42:50,450 --> 00:42:54,290
the downstream people to subscribe to

00:42:52,490 --> 00:42:58,130
releases and you really do get mail when

00:42:54,290 --> 00:43:02,170
new releases are there so it's very

00:42:58,130 --> 00:43:02,170
useful please fill it in

00:43:07,569 --> 00:43:13,279
SOS prepare for the patches discussion a

00:43:10,609 --> 00:43:16,430
few moments before in Damien there is a

00:43:13,279 --> 00:43:20,599
new development with these meter data

00:43:16,430 --> 00:43:24,049
for patch files so this is a it create

00:43:20,599 --> 00:43:26,720
some common core vocabulary how to write

00:43:24,049 --> 00:43:28,460
down the status about the barky has it

00:43:26,720 --> 00:43:30,380
been discussed somewhere else what's

00:43:28,460 --> 00:43:32,150
relevant back trackers to a Heather and

00:43:30,380 --> 00:43:34,099
I think it's a really good idea it's not

00:43:32,150 --> 00:43:36,400
that deployed in debian yet but i do

00:43:34,099 --> 00:43:39,470
hope that it gets some more extended and

00:43:36,400 --> 00:43:41,630
I'd really love to see if we could

00:43:39,470 --> 00:43:44,299
perhaps agree on some common set of

00:43:41,630 --> 00:43:56,740
vocabulary across distributions so that

00:43:44,299 --> 00:44:00,069
we can more easily talk about patches so

00:43:56,740 --> 00:44:06,529
anyone have comments or is it time for

00:44:00,069 --> 00:44:08,589
dinner seems like it is alright thank

00:44:06,529 --> 00:44:08,589

YouTube URL: https://www.youtube.com/watch?v=XBKwPeKLa4Q


