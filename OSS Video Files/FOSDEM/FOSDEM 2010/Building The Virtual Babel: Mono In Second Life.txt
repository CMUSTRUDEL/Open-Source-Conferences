Title: Building The Virtual Babel: Mono In Second Life
Publication date: 2011-12-22
Playlist: FOSDEM 2010
Description: 
	By Jim Purbrick

Second Life is a large, on-line virtual world where avatars dance, fly, shop, play, meet, work, fall in love... and program.

This giant, collaborative development environment is run on a grid of over 30,000 CPUs that simulate the land of Second Life. Since August 2008 Mono has been available as a scripting engine for running interactive content in Second Life and over 27 million user created scripts are now running on Mono in Second Life. This talk will discuss our experiences using Mono in Second Life and our plans for the future.

FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:01,250 --> 00:00:06,839
so I hope you talk about that I'm going

00:00:04,350 --> 00:00:09,630
to talk about that yeah thanks Miguel so

00:00:06,839 --> 00:00:11,160
when I was looking at the schedule i was

00:00:09,630 --> 00:00:12,929
like yeah i've got let's talk about what

00:00:11,160 --> 00:00:13,920
now give me an hour it's going to be

00:00:12,929 --> 00:00:15,030
great we can talk about load of stuff

00:00:13,920 --> 00:00:16,710
and then I saw the schedule and all the

00:00:15,030 --> 00:00:18,600
other talks these you know squeezed in

00:00:16,710 --> 00:00:20,520
around the place so i apologize for kind

00:00:18,600 --> 00:00:23,070
of stealing all the time i've been i've

00:00:20,520 --> 00:00:25,980
been working on this mono in second life

00:00:23,070 --> 00:00:29,699
for about five years now so you know

00:00:25,980 --> 00:00:32,189
given that the star date is now 2010 and

00:00:29,699 --> 00:00:33,660
we've been boldly going for 45 years

00:00:32,189 --> 00:00:36,329
there's quite a lot of stuff in the

00:00:33,660 --> 00:00:37,620
Captain's Log these days so I'm Jim per

00:00:36,329 --> 00:00:39,660
brick I am going to be talking about

00:00:37,620 --> 00:00:42,059
second life and more particularly i'm

00:00:39,660 --> 00:00:47,850
going to be talking about scripting in

00:00:42,059 --> 00:00:53,219
second life so so the second life is now

00:00:47,850 --> 00:00:55,590
six second life is a is a online user

00:00:53,219 --> 00:00:58,620
generated virtual world it was launched

00:00:55,590 --> 00:01:01,140
in 2003 it's now six it's going to have

00:00:58,620 --> 00:01:02,879
its seventh birthday this summer and

00:01:01,140 --> 00:01:05,309
it's a user-generated virtual world so

00:01:02,879 --> 00:01:07,560
you have you have people in the virtual

00:01:05,309 --> 00:01:09,119
world they're embodied as avatars their

00:01:07,560 --> 00:01:10,920
avatars are built by themselves or their

00:01:09,119 --> 00:01:13,350
friends you can buy and sell clothing

00:01:10,920 --> 00:01:14,850
and items in second life see you go in

00:01:13,350 --> 00:01:16,350
second life you go right I want to be an

00:01:14,850 --> 00:01:18,420
elephant so you can go and buy an

00:01:16,350 --> 00:01:19,950
elephant avatar and be an elephant walk

00:01:18,420 --> 00:01:21,600
around or you can go and make one and

00:01:19,950 --> 00:01:23,820
being a user-generated virtual world

00:01:21,600 --> 00:01:27,840
this is a user-generated birthday cake

00:01:23,820 --> 00:01:30,869
at the at the 6th birthday party so when

00:01:27,840 --> 00:01:34,740
Second Life launched in 2003 the world

00:01:30,869 --> 00:01:37,560
look like this so these there's about 50

00:01:34,740 --> 00:01:42,060
regions on this map here each of these

00:01:37,560 --> 00:01:45,540
regions is 256 meters on a side each of

00:01:42,060 --> 00:01:47,909
the regions is being simulated on a core

00:01:45,540 --> 00:01:49,439
of a server originally they're all in

00:01:47,909 --> 00:01:51,360
San Francisco we're currently just

00:01:49,439 --> 00:01:54,329
escaping from San Francisco we have

00:01:51,360 --> 00:01:55,500
kolos all around the place but and the

00:01:54,329 --> 00:01:57,659
reason one of the reasons that the

00:01:55,500 --> 00:01:59,250
system scales is that if you have this

00:01:57,659 --> 00:02:01,020
region here which is being simulated in

00:01:59,250 --> 00:02:03,719
a single process it's only ever talking

00:02:01,020 --> 00:02:06,899
to the the regions north south east and

00:02:03,719 --> 00:02:09,390
west of it so so you can as more people

00:02:06,899 --> 00:02:11,220
turn up to second life and more people

00:02:09,390 --> 00:02:12,599
want land to build castles or shops or

00:02:11,220 --> 00:02:13,530
dance clubs or whatever it is they're

00:02:12,599 --> 00:02:15,690
building

00:02:13,530 --> 00:02:17,130
we buy some more racks we built into the

00:02:15,690 --> 00:02:19,230
floor we plugged them in they download

00:02:17,130 --> 00:02:20,670
the software they say which regions do

00:02:19,230 --> 00:02:22,950
want me to run and they start running a

00:02:20,670 --> 00:02:24,900
region so unlike most virtual worlds

00:02:22,950 --> 00:02:27,060
most virtual worlds like things like

00:02:24,900 --> 00:02:30,000
World of Warcraft I like theme parks you

00:02:27,060 --> 00:02:31,590
basically work out I've got 200 content

00:02:30,000 --> 00:02:33,600
creators and they're going to fill the

00:02:31,590 --> 00:02:35,190
world with stuff for three years and

00:02:33,600 --> 00:02:37,050
they're going to make me about this much

00:02:35,190 --> 00:02:39,300
stuff and that's going to make this much

00:02:37,050 --> 00:02:40,560
size and we want to make it so there's

00:02:39,300 --> 00:02:43,590
only 10 minutes walk between each

00:02:40,560 --> 00:02:45,209
interesting thing so this world can fill

00:02:43,590 --> 00:02:46,530
you know you can have maybe five

00:02:45,209 --> 00:02:48,269
thousand people in this world at any one

00:02:46,530 --> 00:02:49,830
time before it feels so full and the

00:02:48,269 --> 00:02:51,420
keys and the theme park is so long that

00:02:49,830 --> 00:02:53,400
it gets boring so what you do because

00:02:51,420 --> 00:02:55,709
this is computers and not a real theme

00:02:53,400 --> 00:02:56,880
park is you poor people in until it

00:02:55,709 --> 00:02:59,220
feels nice and full and there's lots of

00:02:56,880 --> 00:03:00,660
people to meet but not so far that the

00:02:59,220 --> 00:03:02,430
lines are too long and then you make

00:03:00,660 --> 00:03:04,680
another copy of the world so when you

00:03:02,430 --> 00:03:06,150
play World of Warcraft if you're go and

00:03:04,680 --> 00:03:08,459
get a user account and play World of

00:03:06,150 --> 00:03:10,319
Warcraft you'll choose a server and that

00:03:08,459 --> 00:03:12,690
will define the people that you get to

00:03:10,319 --> 00:03:14,040
meet in your world of warcraft existence

00:03:12,690 --> 00:03:15,959
if someone else is on a different server

00:03:14,040 --> 00:03:17,150
it's just kind of tough you can't hang

00:03:15,959 --> 00:03:19,350
out you can't meet with each other

00:03:17,150 --> 00:03:20,910
whereas in Second Life what happens is

00:03:19,350 --> 00:03:22,739
the world constantly gets bigger around

00:03:20,910 --> 00:03:24,090
the edges so as more and more people

00:03:22,739 --> 00:03:26,250
turn up they want more and more stuff

00:03:24,090 --> 00:03:27,900
they want more room to do things we bolt

00:03:26,250 --> 00:03:30,239
more service to the ground and this map

00:03:27,900 --> 00:03:31,829
gets bigger and that means that if you

00:03:30,239 --> 00:03:33,810
create a shop in second life and you

00:03:31,829 --> 00:03:35,370
start selling stuff that means your

00:03:33,810 --> 00:03:36,840
market places everybody in second life

00:03:35,370 --> 00:03:38,459
everybody can come to your shop everyone

00:03:36,840 --> 00:03:40,260
can come to a nightclub your market is

00:03:38,459 --> 00:03:41,970
everybody in second life it's not this

00:03:40,260 --> 00:03:45,780
is not a subset so this is what it

00:03:41,970 --> 00:03:47,609
looked like in 2003 and oh I'm going to

00:03:45,780 --> 00:03:50,160
point at the computer and not screen

00:03:47,609 --> 00:03:52,079
this is what it looks like today so

00:03:50,160 --> 00:03:54,690
remember those squares on the first map

00:03:52,079 --> 00:03:56,959
each one of these dots on this map is

00:03:54,690 --> 00:03:59,310
one of those squares so we now have

00:03:56,959 --> 00:04:00,930
25,000 cause running simulators in

00:03:59,310 --> 00:04:03,239
second life plus loads of other servers

00:04:00,930 --> 00:04:05,340
running other stuff there's 600 square

00:04:03,239 --> 00:04:08,010
miles of land so that's about the same

00:04:05,340 --> 00:04:10,230
size as Hong Kong and it's about as

00:04:08,010 --> 00:04:12,180
densely packed as Manhattan right there

00:04:10,230 --> 00:04:13,709
aren't many rolling fields full of wheat

00:04:12,180 --> 00:04:15,299
because you don't need wheat because you

00:04:13,709 --> 00:04:17,640
don't eat things but you do need

00:04:15,299 --> 00:04:19,320
nightclubs so you squash loads and those

00:04:17,640 --> 00:04:20,370
nightclubs together and so you end up

00:04:19,320 --> 00:04:22,940
with something that's the size of Hong

00:04:20,370 --> 00:04:25,860
Kong but as densely populated Manhattan

00:04:22,940 --> 00:04:27,250
so there are a hundred fifty people 150

00:04:25,860 --> 00:04:29,740
countries represented in

00:04:27,250 --> 00:04:32,350
second life there's 40 million user

00:04:29,740 --> 00:04:34,840
hours per month there are about you know

00:04:32,350 --> 00:04:36,520
nearly 800,000 repeat logins a month so

00:04:34,840 --> 00:04:38,260
that's kind of the population now this

00:04:36,520 --> 00:04:40,420
is interesting the peak in currency of

00:04:38,260 --> 00:04:42,640
second life is 87,000 that's the biggest

00:04:40,420 --> 00:04:44,470
single virtual world that the world has

00:04:42,640 --> 00:04:46,600
ever seen but there are 80 million

00:04:44,470 --> 00:04:48,370
running scripts and second life so a

00:04:46,600 --> 00:04:50,440
script is something in Second Life which

00:04:48,370 --> 00:04:52,120
is in an object and makes it interactive

00:04:50,440 --> 00:04:53,140
right so in second life you and make

00:04:52,120 --> 00:04:55,330
something you point at the florence they

00:04:53,140 --> 00:04:56,680
make a cube and it pops up and then you

00:04:55,330 --> 00:04:59,170
say out a script and now you've got a

00:04:56,680 --> 00:05:01,900
box with a brain and so you can poke it

00:04:59,170 --> 00:05:03,070
and the Box growl when you poke it so

00:05:01,900 --> 00:05:04,270
that's the script in second life and

00:05:03,070 --> 00:05:06,250
they used for everything from like

00:05:04,270 --> 00:05:07,840
making it so that you sit nicely on a

00:05:06,250 --> 00:05:11,200
chair making it so that you can open a

00:05:07,840 --> 00:05:12,700
door make it so you can dance but there

00:05:11,200 --> 00:05:14,890
are 80 million scripts running a second

00:05:12,700 --> 00:05:16,660
life there's roughly a thousand scripts

00:05:14,890 --> 00:05:19,300
for every person so you can look at

00:05:16,660 --> 00:05:22,210
second life as this huge simulated

00:05:19,300 --> 00:05:24,280
environment which humans occasionally

00:05:22,210 --> 00:05:27,460
visit but most of the stuff that's going

00:05:24,280 --> 00:05:28,840
on is scripts so other numbers there are

00:05:27,460 --> 00:05:31,479
eight hundred gigabytes of new content

00:05:28,840 --> 00:05:33,550
created a day there's 390 terabytes of

00:05:31,479 --> 00:05:36,880
content that we store in our servers and

00:05:33,550 --> 00:05:38,919
our switches transmit 12 gigabits a

00:05:36,880 --> 00:05:40,620
second data so second last pretty big

00:05:38,919 --> 00:05:45,310
you can also make money in second life

00:05:40,620 --> 00:05:47,380
so last year there were 47 million u.s.

00:05:45,310 --> 00:05:50,680
dollars transferred between residents

00:05:47,380 --> 00:05:52,510
every month and 10 million u.s. dollars

00:05:50,680 --> 00:05:54,790
transferred across the boundary between

00:05:52,510 --> 00:05:56,860
second life in real life every month so

00:05:54,790 --> 00:05:58,630
you go to second life with ten dollars

00:05:56,860 --> 00:06:00,580
you convert it into linden dollars and

00:05:58,630 --> 00:06:02,110
then you can go and buy shoes and hats

00:06:00,580 --> 00:06:03,669
and cars and whatever it is that you

00:06:02,110 --> 00:06:06,430
want to buy in second life so that's

00:06:03,669 --> 00:06:08,680
second life so today I'm going to be

00:06:06,430 --> 00:06:11,080
talking about the pixie dust the secret

00:06:08,680 --> 00:06:12,640
scripted pixie dust that you sprinkle

00:06:11,080 --> 00:06:14,410
over stuff in second life to make it do

00:06:12,640 --> 00:06:16,450
things and this is what turns second

00:06:14,410 --> 00:06:17,979
life from a kind of 3d environment with

00:06:16,450 --> 00:06:19,660
people that can kind of walk around and

00:06:17,979 --> 00:06:21,970
say hi to each other to an environment

00:06:19,660 --> 00:06:24,430
where you can go skydiving or skiing or

00:06:21,970 --> 00:06:25,510
sailing or dancing or whatever it is

00:06:24,430 --> 00:06:28,270
that you want to do so as I said before

00:06:25,510 --> 00:06:30,580
use use scripts and second life to

00:06:28,270 --> 00:06:33,250
animate your avatar so you get this kind

00:06:30,580 --> 00:06:34,620
of like standard duct walk when you log

00:06:33,250 --> 00:06:36,870
into second life if you want to have a

00:06:34,620 --> 00:06:38,979
humanoid that animates differently

00:06:36,870 --> 00:06:40,390
you're going new scripts to do that if

00:06:38,979 --> 00:06:40,750
you want to make a tiny avatar this is

00:06:40,390 --> 00:06:43,000
in G

00:06:40,750 --> 00:06:45,460
right we have this range of mostly the

00:06:43,000 --> 00:06:48,040
normal Second Life advertiser within a

00:06:45,460 --> 00:06:49,270
sort of reasonable range they tend to be

00:06:48,040 --> 00:06:50,800
big because most people won't be tall

00:06:49,270 --> 00:06:52,660
when they when they joined so they tend

00:06:50,800 --> 00:06:54,490
to be big humanoids but some people have

00:06:52,660 --> 00:06:57,160
worked out that if you use special

00:06:54,490 --> 00:06:58,900
animations you can kind of make an

00:06:57,160 --> 00:07:00,760
avatar that kind of crushes his arms

00:06:58,900 --> 00:07:03,190
into his body and then folds his legs up

00:07:00,760 --> 00:07:05,080
so he's kind of sticky sitting in a tiny

00:07:03,190 --> 00:07:07,540
ball and then has his head sticking out

00:07:05,080 --> 00:07:09,160
the top and then you can like plug bits

00:07:07,540 --> 00:07:10,840
on so you can make it have like a mouse

00:07:09,160 --> 00:07:12,580
face and then you have a tiny cute

00:07:10,840 --> 00:07:14,169
little mouse of tarts running around but

00:07:12,580 --> 00:07:16,000
the way that works is you have to have

00:07:14,169 --> 00:07:17,380
an animation you have to have scripts

00:07:16,000 --> 00:07:19,450
that control your animations because

00:07:17,380 --> 00:07:20,950
your avatar is no longer walking like

00:07:19,450 --> 00:07:22,570
this your avatars kind of start up into

00:07:20,950 --> 00:07:24,100
a ball and kind of flapping his hands

00:07:22,570 --> 00:07:25,510
and feet around so you have to use

00:07:24,100 --> 00:07:26,919
scripts for that and also if you want to

00:07:25,510 --> 00:07:28,810
make if you want to be a dragon or you

00:07:26,919 --> 00:07:31,150
want to be a nonhumanoid you have to use

00:07:28,810 --> 00:07:32,530
scripts your animations scripts used for

00:07:31,150 --> 00:07:35,620
dancing which is a huge thing a second

00:07:32,530 --> 00:07:38,440
life they use vehicle seats games and

00:07:35,620 --> 00:07:40,900
guns doors elevators teleporters as I

00:07:38,440 --> 00:07:42,490
said non-human avatars chickens is a

00:07:40,900 --> 00:07:44,290
walls a really big thing in Second Life

00:07:42,490 --> 00:07:45,850
side I talk to Miguel about the chickens

00:07:44,290 --> 00:07:47,080
in second life you could you know my

00:07:45,850 --> 00:07:48,940
chickens and you can breed them in each

00:07:47,080 --> 00:07:50,140
other and they have jeans and they kind

00:07:48,940 --> 00:07:55,390
of pass on traits to each other with

00:07:50,140 --> 00:07:58,440
generics and with generics there with

00:07:55,390 --> 00:08:01,570
them with kind of with what's the word

00:07:58,440 --> 00:08:05,130
in inheritance so they inherit genes

00:08:01,570 --> 00:08:08,890
from each other and so collision of

00:08:05,130 --> 00:08:10,090
namespace is there and so you can like

00:08:08,890 --> 00:08:11,169
go and buy chickens and you can breed

00:08:10,090 --> 00:08:12,910
them and you can say I want to get a

00:08:11,169 --> 00:08:14,320
chicken that's that's red or green or

00:08:12,910 --> 00:08:15,850
purple or has tiger stripes or whatever

00:08:14,320 --> 00:08:17,919
and you can breed them together and that

00:08:15,850 --> 00:08:19,270
was a big thing but but after the

00:08:17,919 --> 00:08:21,040
chickens were turtles and now the big

00:08:19,270 --> 00:08:23,530
things in second life is bunnies but

00:08:21,040 --> 00:08:27,250
none of this wildlife would would exist

00:08:23,530 --> 00:08:28,540
in second life without scripts you'll

00:08:27,250 --> 00:08:30,280
see scripts for selling stuff to each

00:08:28,540 --> 00:08:31,960
other so you have instead of being in

00:08:30,280 --> 00:08:33,789
second life to sell stuff you'll make a

00:08:31,960 --> 00:08:35,169
vendor like a vending machine except

00:08:33,789 --> 00:08:37,960
instead of selling cans of coke it's

00:08:35,169 --> 00:08:40,990
selling cars or or you know teleporting

00:08:37,960 --> 00:08:43,060
objects or whatever so the way scripts

00:08:40,990 --> 00:08:44,530
work in second life is as I said you put

00:08:43,060 --> 00:08:46,510
scripts in prims you make a box you put

00:08:44,530 --> 00:08:48,100
a script in it and you link them

00:08:46,510 --> 00:08:49,750
together to make objects of cars are

00:08:48,100 --> 00:08:53,620
like many boxes and cylinders stuck

00:08:49,750 --> 00:08:54,670
together you have sensors V events so

00:08:53,620 --> 00:08:56,350
you say I'm going to

00:08:54,670 --> 00:08:58,720
eventhandler for this thing being

00:08:56,350 --> 00:09:00,790
touched and then you have effectors

00:08:58,720 --> 00:09:01,990
vehicles so if you want to make a box

00:09:00,790 --> 00:09:03,670
that when you touch it jumps up in the

00:09:01,990 --> 00:09:04,900
air you would have an event handler for

00:09:03,670 --> 00:09:07,200
the touch event and then you'd have a

00:09:04,900 --> 00:09:09,670
library called so move me up in the air

00:09:07,200 --> 00:09:11,620
you can communicate between scripts you

00:09:09,670 --> 00:09:14,590
can send instant messages to avatars or

00:09:11,620 --> 00:09:16,750
other scripts you can send email to the

00:09:14,590 --> 00:09:18,640
outside world you can receive email you

00:09:16,750 --> 00:09:20,470
can use xml-rpc to communicate you can

00:09:18,640 --> 00:09:22,360
use HTTP to communicate so you can wire

00:09:20,470 --> 00:09:24,100
second life applications up to the web

00:09:22,360 --> 00:09:26,380
and people have done call mash ups for

00:09:24,100 --> 00:09:27,850
that in terms of the platform all this

00:09:26,380 --> 00:09:29,500
is untrusted code so we're running it on

00:09:27,850 --> 00:09:31,900
our servers so we really don't want you

00:09:29,500 --> 00:09:33,550
to be able to you know wander around our

00:09:31,900 --> 00:09:35,590
memory and do stuff and exercise file

00:09:33,550 --> 00:09:37,980
system another interesting thing is that

00:09:35,590 --> 00:09:40,450
there are two thousand scripts / process

00:09:37,980 --> 00:09:41,680
so in order to get 80 million running

00:09:40,450 --> 00:09:43,630
scripts in second life you have to have

00:09:41,680 --> 00:09:45,820
many many scripts in every region and so

00:09:43,630 --> 00:09:47,740
every door every seed every you know

00:09:45,820 --> 00:09:49,450
haircut every pair of shoes will have

00:09:47,740 --> 00:09:52,840
scripts in and that adds up to many many

00:09:49,450 --> 00:09:54,820
scripts and you know as alamos laying

00:09:52,840 --> 00:09:56,650
the correct number of threads is one we

00:09:54,820 --> 00:09:58,870
use a single single thread and we run

00:09:56,650 --> 00:10:00,880
all these scripts on a single thread but

00:09:58,870 --> 00:10:01,990
this is untrusted code we allow people

00:10:00,880 --> 00:10:03,970
to have four loops so how do we do that

00:10:01,990 --> 00:10:04,900
we'll talk about that later and the

00:10:03,970 --> 00:10:06,370
other thing is you need to be able to

00:10:04,900 --> 00:10:07,450
migrate these scripts between processes

00:10:06,370 --> 00:10:09,610
you need to be able to put your foot

00:10:07,450 --> 00:10:11,560
down and drive a car across a boundary

00:10:09,610 --> 00:10:13,150
and all the scripts in your car need to

00:10:11,560 --> 00:10:14,710
move from one process to another process

00:10:13,150 --> 00:10:17,440
so it's kind of some interesting

00:10:14,710 --> 00:10:19,540
interesting things going on there so so

00:10:17,440 --> 00:10:21,550
the language we use currently in second

00:10:19,540 --> 00:10:23,740
life is LOL which is the language i'm

00:10:21,550 --> 00:10:26,470
wearing at the moment it's a celite

00:10:23,740 --> 00:10:29,350
language it has vectors and rotations so

00:10:26,470 --> 00:10:31,720
it's kind of a DSL it has like language

00:10:29,350 --> 00:10:34,450
features for 3d built into it so that's

00:10:31,720 --> 00:10:35,980
quite exciting kind of it has it

00:10:34,450 --> 00:10:37,720
statically typed and there are six of

00:10:35,980 --> 00:10:39,190
them you can't make anymore there are

00:10:37,720 --> 00:10:41,560
six static types you better like them

00:10:39,190 --> 00:10:45,310
the only collection is heterogeneous

00:10:41,560 --> 00:10:47,440
lists it has states which is kind of

00:10:45,310 --> 00:10:49,960
interesting is borrowed from various

00:10:47,440 --> 00:10:51,340
other game scripting engines it means

00:10:49,960 --> 00:10:52,690
that you can do stuff like if you click

00:10:51,340 --> 00:10:54,310
on a door and it opens it can switch

00:10:52,690 --> 00:10:56,590
into a time open state and you click on

00:10:54,310 --> 00:10:59,530
door again it closes so you can do that

00:10:56,590 --> 00:11:02,650
kind of thing so the way LSL is

00:10:59,530 --> 00:11:05,740
implemented originally on the original

00:11:02,650 --> 00:11:07,630
vm it's a textbook 16k bytecode vm so

00:11:05,740 --> 00:11:08,529
you have 16 kilobyte block and it will

00:11:07,630 --> 00:11:10,269
have a bunch of register

00:11:08,529 --> 00:11:11,860
at the top and then it will have a stack

00:11:10,269 --> 00:11:13,029
and heap and they grow up and down they

00:11:11,860 --> 00:11:14,410
meet each other in the middle and have a

00:11:13,029 --> 00:11:17,290
collision and explode and you run out

00:11:14,410 --> 00:11:18,579
memory so it's a textbook implantation

00:11:17,290 --> 00:11:20,319
which means it's really easy to migrate

00:11:18,579 --> 00:11:21,970
you just take these 16k blocks and you

00:11:20,319 --> 00:11:23,019
throw them down a network connection and

00:11:21,970 --> 00:11:24,189
they appear at the other end and they've

00:11:23,019 --> 00:11:27,430
got the registers and their memory and

00:11:24,189 --> 00:11:29,170
everything's everything's done it's kind

00:11:27,430 --> 00:11:30,879
of relatively easy to schedule them

00:11:29,170 --> 00:11:32,559
because the way the way the original

00:11:30,879 --> 00:11:34,689
virtual machine works as it goes through

00:11:32,559 --> 00:11:37,059
every opcode and checks the time between

00:11:34,689 --> 00:11:38,860
each one so it goes you know opcode get

00:11:37,059 --> 00:11:40,059
time of day opcode get time of day okay

00:11:38,860 --> 00:11:42,939
get time at eight ball I've run out of

00:11:40,059 --> 00:11:45,699
time I'm going to stop executing and

00:11:42,939 --> 00:11:47,829
it's easy sandboxing because although it

00:11:45,699 --> 00:11:49,629
has references within itself two

00:11:47,829 --> 00:11:50,740
variables basically you just need to

00:11:49,629 --> 00:11:54,509
check that all the pointers don't go

00:11:50,740 --> 00:11:57,490
outside that 16k box hopefully is okay

00:11:54,509 --> 00:11:58,839
we still occasionally have bugs with

00:11:57,490 --> 00:12:00,910
this virtual machine so we don't know

00:11:58,839 --> 00:12:02,769
how safe this is it was built we run it

00:12:00,910 --> 00:12:05,589
we don't really know how safe it is it

00:12:02,769 --> 00:12:07,029
wasn't designed like verification in the

00:12:05,589 --> 00:12:08,199
clr for example by people who actually

00:12:07,029 --> 00:12:10,600
thought about it for more than 10

00:12:08,199 --> 00:12:12,759
minutes so it's really really really

00:12:10,600 --> 00:12:15,309
slow it's interpreted it's not doing any

00:12:12,759 --> 00:12:19,180
optimizations and it's it's very very

00:12:15,309 --> 00:12:20,410
broken so for example we accidentally

00:12:19,180 --> 00:12:23,519
got the recursion in the gram around the

00:12:20,410 --> 00:12:25,720
wrong way so if you make an if-else

00:12:23,519 --> 00:12:26,920
statement it fails chain that's too long

00:12:25,720 --> 00:12:28,660
and you kind of have to because you

00:12:26,920 --> 00:12:30,790
don't have switch statements then either

00:12:28,660 --> 00:12:31,689
parser contra curse so it just gets

00:12:30,790 --> 00:12:33,879
bigger and bigger and bigger and then

00:12:31,689 --> 00:12:35,050
your compiler crashes that's kind of one

00:12:33,879 --> 00:12:36,250
of the ways it's broken another

00:12:35,050 --> 00:12:39,339
interesting way we found one we were

00:12:36,250 --> 00:12:42,759
implementing this stuff or mono is that

00:12:39,339 --> 00:12:44,290
returns are optional so you can have you

00:12:42,759 --> 00:12:46,089
can have a function which has to control

00:12:44,290 --> 00:12:47,410
flows one of them returns a value and

00:12:46,089 --> 00:12:49,839
the other one doesn't and that's okay

00:12:47,410 --> 00:12:52,420
that will compile and run in LSL so this

00:12:49,839 --> 00:12:55,990
is there's some quite scary features in

00:12:52,420 --> 00:12:57,309
the language so the thing I've been

00:12:55,990 --> 00:12:58,870
doing for ages and the reason I'm here

00:12:57,309 --> 00:13:00,730
in the reason I know you all and to them

00:12:58,870 --> 00:13:03,100
the reason I've had lots of fun over the

00:13:00,730 --> 00:13:04,540
last few years is that we decided it

00:13:03,100 --> 00:13:05,980
would be a great idea to run LS ala

00:13:04,540 --> 00:13:08,379
moana right because mono is coming out

00:13:05,980 --> 00:13:11,350
and it wasn't Java which no one was a

00:13:08,379 --> 00:13:13,720
friend fan of linden lab and it had a

00:13:11,350 --> 00:13:15,129
jit and you know it was designed by a

00:13:13,720 --> 00:13:16,120
bunch of people who kind of knew what

00:13:15,129 --> 00:13:17,829
they were doing more than we did and

00:13:16,120 --> 00:13:20,230
have more time than we did so we're like

00:13:17,829 --> 00:13:22,180
okay let's see if we can run ela

00:13:20,230 --> 00:13:25,589
Solomonic so this this

00:13:22,180 --> 00:13:28,779
slide here is the talk I gave in Madrid

00:13:25,589 --> 00:13:30,640
and it's available online I also gave it

00:13:28,779 --> 00:13:33,100
a lang net so if you want to go and see

00:13:30,640 --> 00:13:34,360
that talk go and find it go and find the

00:13:33,100 --> 00:13:36,040
video I'm going to quickly run through

00:13:34,360 --> 00:13:37,720
it because it because we talk about this

00:13:36,040 --> 00:13:39,250
stuff but it's there is another talk

00:13:37,720 --> 00:13:42,550
that you can go and get more detail on

00:13:39,250 --> 00:13:48,940
this stuff so the big problem with

00:13:42,550 --> 00:13:50,529
running LOL on my is that well so a lot

00:13:48,940 --> 00:13:52,300
of the things about the environment in

00:13:50,529 --> 00:13:53,680
second life aren't easy to do when

00:13:52,300 --> 00:13:55,570
you're running a script on monarch for

00:13:53,680 --> 00:13:57,130
example it's not easy to take a running

00:13:55,570 --> 00:13:59,649
program which is in the middle of for

00:13:57,130 --> 00:14:01,000
loop and move it from one mono virtual

00:13:59,649 --> 00:14:02,760
machine to another virtual machine which

00:14:01,000 --> 00:14:05,560
is what we need to do it's also not

00:14:02,760 --> 00:14:07,330
particularly easy to have two thousand

00:14:05,560 --> 00:14:11,709
threads running at the same time on mono

00:14:07,330 --> 00:14:13,570
in and all in a single process so so the

00:14:11,709 --> 00:14:15,370
big thing that we did is that we rewrite

00:14:13,570 --> 00:14:18,370
assemblies for concurrency and mobility

00:14:15,370 --> 00:14:19,779
so in Miguel's talked earlier on he said

00:14:18,370 --> 00:14:21,220
that you know you've got these two

00:14:19,779 --> 00:14:23,290
things you can either you can either

00:14:21,220 --> 00:14:25,180
make a function and then when you look

00:14:23,290 --> 00:14:26,589
at it it's just a blob of code or you

00:14:25,180 --> 00:14:27,730
can make an expression tree and then you

00:14:26,589 --> 00:14:29,350
can look at the expression tree and that

00:14:27,730 --> 00:14:30,730
is totally awesome but it's not

00:14:29,350 --> 00:14:32,320
completely true that when you end up

00:14:30,730 --> 00:14:33,640
with a block of cil code that's the end

00:14:32,320 --> 00:14:34,930
because you can get the block of cil

00:14:33,640 --> 00:14:36,490
code and then you can just pull it apart

00:14:34,930 --> 00:14:37,900
again and you can shove a new bits into

00:14:36,490 --> 00:14:39,310
it and you can make it do things and you

00:14:37,900 --> 00:14:42,940
can kind try and figure out what it's

00:14:39,310 --> 00:14:44,500
doing so what we did is we induce the

00:14:42,940 --> 00:14:47,920
stack state which is actually the same

00:14:44,500 --> 00:14:49,420
the same process that I should have

00:14:47,920 --> 00:14:51,339
moved all these bullets to the top so

00:14:49,420 --> 00:14:53,529
brothers so it's the same process you

00:14:51,339 --> 00:14:56,230
use when you verify an assembly and you

00:14:53,529 --> 00:14:58,330
start off at the top of the method then

00:14:56,230 --> 00:14:59,950
you go there's nothing on the stack and

00:14:58,330 --> 00:15:02,220
then you get like a push into gpush

00:14:59,950 --> 00:15:04,720
integer and you go ok between these two

00:15:02,220 --> 00:15:06,250
op codes there are now two integers on

00:15:04,720 --> 00:15:07,600
the stack and you can keep doing this

00:15:06,250 --> 00:15:09,490
through all the control flows through

00:15:07,600 --> 00:15:10,839
the entire method and so what that means

00:15:09,490 --> 00:15:12,279
is once you've done that process you

00:15:10,839 --> 00:15:14,440
know all the types that are on the stack

00:15:12,279 --> 00:15:16,720
at every point in the in the function

00:15:14,440 --> 00:15:19,510
and it means that if you decide that you

00:15:16,720 --> 00:15:21,070
want to pause execution at that point in

00:15:19,510 --> 00:15:24,820
the function you know what's on top of

00:15:21,070 --> 00:15:26,800
the stack you can make a heap object you

00:15:24,820 --> 00:15:28,300
can make a heap object and copy those

00:15:26,800 --> 00:15:30,010
values from the stack into the heap

00:15:28,300 --> 00:15:31,930
object and then you can make a chain of

00:15:30,010 --> 00:15:35,020
these heap objects so what effectively

00:15:31,930 --> 00:15:35,830
you're doing is making a chain of stack

00:15:35,020 --> 00:15:37,510
frames on the

00:15:35,830 --> 00:15:40,210
that contained all the information that

00:15:37,510 --> 00:15:42,850
was on the stack in the actual in the

00:15:40,210 --> 00:15:44,530
answering machine so you basically and

00:15:42,850 --> 00:15:45,730
in order to make sure that this you can

00:15:44,530 --> 00:15:47,590
in order to make sure that none of these

00:15:45,730 --> 00:15:50,650
things get caught in a tight loop you

00:15:47,590 --> 00:15:52,390
make sure that you do that test at every

00:15:50,650 --> 00:15:54,130
backwards jump or every function call so

00:15:52,390 --> 00:15:56,080
you avoid infinite looping an infinite

00:15:54,130 --> 00:15:58,090
recursion by going okay there's a

00:15:56,080 --> 00:15:59,890
backwards jump here so before I do this

00:15:58,090 --> 00:16:01,360
backwards jump see if I've run out of

00:15:59,890 --> 00:16:03,250
time i'll see if i need to migrate to a

00:16:01,360 --> 00:16:05,140
different process if I do then instead

00:16:03,250 --> 00:16:07,300
of doing the backwards jump to a jump to

00:16:05,140 --> 00:16:09,340
a postfix which we've injected which

00:16:07,300 --> 00:16:11,680
goes right call a constructor for a heap

00:16:09,340 --> 00:16:13,420
of consume all the things off the stack

00:16:11,680 --> 00:16:14,950
store them in a heap object and then

00:16:13,420 --> 00:16:16,870
return and then the calling function

00:16:14,950 --> 00:16:19,090
will go is there any other any of these

00:16:16,870 --> 00:16:20,830
heap stack frames on the heap stack and

00:16:19,090 --> 00:16:22,840
if there are okay okay I need to stop as

00:16:20,830 --> 00:16:24,760
well and so it will return and unwind

00:16:22,840 --> 00:16:27,190
the whole call stack and it will

00:16:24,760 --> 00:16:29,710
effectively turn the call stack in mono

00:16:27,190 --> 00:16:31,480
into into a chain of heap objects and

00:16:29,710 --> 00:16:33,640
then you can go ok I've got script which

00:16:31,480 --> 00:16:35,020
is a serializable class and I've got the

00:16:33,640 --> 00:16:37,570
t pop jects which are a chain of

00:16:35,020 --> 00:16:39,820
serializable objects so now my entire

00:16:37,570 --> 00:16:41,770
state the stack and the heap they're all

00:16:39,820 --> 00:16:42,940
in a serializable object form and then I

00:16:41,770 --> 00:16:43,870
can shove them down their network can

00:16:42,940 --> 00:16:45,610
actually move into a different machine

00:16:43,870 --> 00:16:47,830
or I can shed you all another script to

00:16:45,610 --> 00:16:50,980
run alright so that's basically what we

00:16:47,830 --> 00:16:53,020
did that was the big thing and it wasn't

00:16:50,980 --> 00:16:54,820
you no it wasn't it wasn't actually knew

00:16:53,020 --> 00:16:56,530
it was kind of borrowed so this is the

00:16:54,820 --> 00:16:59,650
same thing that happens in Java go x and

00:16:56,530 --> 00:17:02,110
breaks on java so several years ago when

00:16:59,650 --> 00:17:03,940
when mobile agents were a big thing

00:17:02,110 --> 00:17:05,320
people did this kind of stuff to build

00:17:03,940 --> 00:17:07,510
mobile agent systems that could wander

00:17:05,320 --> 00:17:11,470
around the internet but we did it in

00:17:07,510 --> 00:17:13,180
dotnet which no one else had done so so

00:17:11,470 --> 00:17:14,350
the other thing we did the other two

00:17:13,180 --> 00:17:15,640
things that were difficult is that we

00:17:14,350 --> 00:17:17,709
have a server process and when you're

00:17:15,640 --> 00:17:18,880
you're creating these objects on the

00:17:17,709 --> 00:17:21,970
ground and you're adding scripts to them

00:17:18,880 --> 00:17:24,190
and then you're deleting the object well

00:17:21,970 --> 00:17:25,750
you've created own you've created a an

00:17:24,190 --> 00:17:27,370
assembly and you've loaded it into mono

00:17:25,750 --> 00:17:29,950
and then you delete the box you want to

00:17:27,370 --> 00:17:32,410
unload it but you can't so what we did

00:17:29,950 --> 00:17:34,420
there is that we load to application

00:17:32,410 --> 00:17:35,680
domains and we keep track of how many of

00:17:34,420 --> 00:17:37,030
these junk assemblies have been loaded

00:17:35,680 --> 00:17:39,130
into each and when it hits a level

00:17:37,030 --> 00:17:42,580
mogera cares 100 junk assemblies in this

00:17:39,130 --> 00:17:45,010
application domain then we will will

00:17:42,580 --> 00:17:46,660
move using the same migration thing will

00:17:45,010 --> 00:17:48,640
move all the running scripts that still

00:17:46,660 --> 00:17:49,390
exist in that application domain over to

00:17:48,640 --> 00:17:51,310
the the other

00:17:49,390 --> 00:17:52,810
one in our process and then we've got an

00:17:51,310 --> 00:17:54,730
application domain that just contains

00:17:52,810 --> 00:17:55,990
junk coat and then we can delete that

00:17:54,730 --> 00:17:58,990
application to may and create a new one

00:17:55,990 --> 00:18:00,370
and then start the process again so

00:17:58,990 --> 00:18:02,700
that's how we do code unloading and that

00:18:00,370 --> 00:18:05,440
allows us to run simulators indefinitely

00:18:02,700 --> 00:18:07,750
without them filling up with pals of

00:18:05,440 --> 00:18:09,550
junk assemblies and the other thing we

00:18:07,750 --> 00:18:12,250
did is we subverted the profiler to do

00:18:09,550 --> 00:18:14,320
resource limitations so we want to make

00:18:12,250 --> 00:18:15,820
sure that you can't just allocate 2

00:18:14,320 --> 00:18:17,650
gigabytes of memory in our in our

00:18:15,820 --> 00:18:18,820
simulator from a single script we want

00:18:17,650 --> 00:18:20,170
to ration it between the different

00:18:18,820 --> 00:18:22,540
scripts and different people look own

00:18:20,170 --> 00:18:25,060
land in that region so we subvert the

00:18:22,540 --> 00:18:26,620
profiler and every time we have a heap

00:18:25,060 --> 00:18:28,720
profiler that isn't actually doing

00:18:26,620 --> 00:18:30,640
profiling it's actually tracking

00:18:28,720 --> 00:18:32,830
allocations and then when an allocation

00:18:30,640 --> 00:18:34,480
reaches a limit we use Miguel's code to

00:18:32,830 --> 00:18:36,670
walk the object tree figure out how big

00:18:34,480 --> 00:18:38,110
the object actually is because the

00:18:36,670 --> 00:18:40,900
allocation size may be way bigger than

00:18:38,110 --> 00:18:42,040
the the actual residents eyes and then

00:18:40,900 --> 00:18:43,180
we'll reset the memory down to the

00:18:42,040 --> 00:18:44,710
residents eyes and then it will grow

00:18:43,180 --> 00:18:46,300
again and we'll measure its size will

00:18:44,710 --> 00:18:47,890
reset it will grow again more measure

00:18:46,300 --> 00:18:49,240
its size and eventually if we measure

00:18:47,890 --> 00:18:50,440
its residents eyes and it's above its

00:18:49,240 --> 00:18:53,140
limit will go sorry you've had too much

00:18:50,440 --> 00:18:55,210
memory and we we stop the execution so

00:18:53,140 --> 00:18:56,800
if you want more on that go and see the

00:18:55,210 --> 00:18:59,190
other talk which is available online so

00:18:56,800 --> 00:19:01,720
I'm going talk about a few details which

00:18:59,190 --> 00:19:03,820
which kind of came out in the sort of

00:19:01,720 --> 00:19:05,560
last year or so before we ship this

00:19:03,820 --> 00:19:08,440
which we haven't talked about to the

00:19:05,560 --> 00:19:10,360
mono and community so one of the big

00:19:08,440 --> 00:19:16,900
problems one of the big differences

00:19:10,360 --> 00:19:19,330
between the the clr and the Java Virtual

00:19:16,900 --> 00:19:21,700
Machine is the clr has managed pointers

00:19:19,330 --> 00:19:24,850
so managed pointers are when you pass an

00:19:21,700 --> 00:19:26,170
object by value it will copy the object

00:19:24,850 --> 00:19:28,600
so you'll end up with a whole object a

00:19:26,170 --> 00:19:30,550
complex object on the stack but then if

00:19:28,600 --> 00:19:32,830
you want to call a method on that object

00:19:30,550 --> 00:19:33,970
and you'll end up with you'll end up

00:19:32,830 --> 00:19:36,010
cracking manage pointer which is a

00:19:33,970 --> 00:19:39,490
pointer on the stack which points to an

00:19:36,010 --> 00:19:41,860
object on the stack right so with Java

00:19:39,490 --> 00:19:43,600
you can go through you can go through

00:19:41,860 --> 00:19:45,640
the whole stack and you can go ok these

00:19:43,600 --> 00:19:47,620
r objects so when I'm serializing this

00:19:45,640 --> 00:19:48,910
object to this other process I need to

00:19:47,620 --> 00:19:51,190
remember to take all these objects as

00:19:48,910 --> 00:19:53,980
well in mono you can end up with a

00:19:51,190 --> 00:19:55,900
pointer which points two points to a

00:19:53,980 --> 00:19:58,500
value type that's on the stack so what

00:19:55,900 --> 00:20:01,060
do you do about that you can't you can't

00:19:58,500 --> 00:20:02,770
persist a managed pointer between the

00:20:01,060 --> 00:20:04,540
function invocation because when you

00:20:02,770 --> 00:20:07,180
from the function the stack will will

00:20:04,540 --> 00:20:09,280
will go go back to where it was and the

00:20:07,180 --> 00:20:13,440
the point will be invalid so you can't

00:20:09,280 --> 00:20:16,390
do that so what we did here is that we

00:20:13,440 --> 00:20:17,950
is that we step backwards so we've done

00:20:16,390 --> 00:20:20,620
this stack we've induced the stack and

00:20:17,950 --> 00:20:22,810
we've gone okay don't know in it in okay

00:20:20,620 --> 00:20:23,770
manage pointer right we want to yield at

00:20:22,810 --> 00:20:25,000
this point where there's a managed

00:20:23,770 --> 00:20:26,080
pointer on the stack well that managed

00:20:25,000 --> 00:20:27,910
point it must have been generated

00:20:26,080 --> 00:20:30,070
somewhere in the code so actually step

00:20:27,910 --> 00:20:31,630
backwards through the CIL until we get

00:20:30,070 --> 00:20:35,230
to a point where there's no managed

00:20:31,630 --> 00:20:37,450
pointers in the in the type stack and we

00:20:35,230 --> 00:20:40,270
go where I ok so we actually in order to

00:20:37,450 --> 00:20:41,980
resynthesizer at managed pointer we need

00:20:40,270 --> 00:20:44,770
to have these objects and we're going to

00:20:41,980 --> 00:20:46,600
apply this set of op codes to these

00:20:44,770 --> 00:20:49,300
objects in order to generate the managed

00:20:46,600 --> 00:20:51,280
pointer so instead we're going to copy

00:20:49,300 --> 00:20:52,780
these objects with this script and we're

00:20:51,280 --> 00:20:54,760
also going to copy this small slice of

00:20:52,780 --> 00:20:55,810
CIL and then when we get it over to the

00:20:54,760 --> 00:20:57,910
other side we're going to take these two

00:20:55,810 --> 00:21:00,310
objects we're going to reply those IL up

00:20:57,910 --> 00:21:02,260
codes to the objects to resynthesizer

00:21:00,310 --> 00:21:04,420
manage pointer on the other side so this

00:21:02,260 --> 00:21:06,610
is like the big thing that we've added

00:21:04,420 --> 00:21:11,410
to the whole lung the whole kind of

00:21:06,610 --> 00:21:15,190
stack kind of storage and restoring

00:21:11,410 --> 00:21:17,580
stuff so yeah I talked a bit about the

00:21:15,190 --> 00:21:19,510
memory allocation monitoring that's

00:21:17,580 --> 00:21:22,870
that's one of the kind of big things

00:21:19,510 --> 00:21:24,040
we've we've been working on recently but

00:21:22,870 --> 00:21:25,240
I've mostly touched on it so I'm going

00:21:24,040 --> 00:21:28,060
to keep going because I want to talk

00:21:25,240 --> 00:21:29,380
about new things and so with the

00:21:28,060 --> 00:21:30,670
scheduling thing this is one of the

00:21:29,380 --> 00:21:32,080
things we found in Madrid so I Madrid

00:21:30,670 --> 00:21:35,440
the monastery in Madrid was totally

00:21:32,080 --> 00:21:37,150
awesome because we turned up and and and

00:21:35,440 --> 00:21:38,800
we left like three or four days later

00:21:37,150 --> 00:21:42,880
with our code running 10 times faster

00:21:38,800 --> 00:21:45,820
and this is why because as I said before

00:21:42,880 --> 00:21:49,480
the Alisal interpreter would check the

00:21:45,820 --> 00:21:52,540
time between each instruction and it

00:21:49,480 --> 00:21:56,890
turns out it's so slow nobody really

00:21:52,540 --> 00:21:58,810
cares but the what we were doing with

00:21:56,890 --> 00:22:02,230
the the mono stuff is that we were

00:21:58,810 --> 00:22:03,460
checking the time every backwards jumper

00:22:02,230 --> 00:22:05,470
of a function call when we were doing

00:22:03,460 --> 00:22:07,360
this do i need to yield and it turned

00:22:05,470 --> 00:22:08,950
out that because we were running

00:22:07,360 --> 00:22:10,630
jittered code this thing was so quick

00:22:08,950 --> 00:22:12,910
that our performance was very quickly

00:22:10,630 --> 00:22:15,660
gated by get time of day system calls

00:22:12,910 --> 00:22:18,690
and so what we did to

00:22:15,660 --> 00:22:20,910
at the 10 summit to to fix this after

00:22:18,690 --> 00:22:25,290
lots of talking about the stuff is that

00:22:20,910 --> 00:22:27,810
we we allow every script to adapt to

00:22:25,290 --> 00:22:29,940
have an adaptive timer check skip value

00:22:27,810 --> 00:22:32,120
it starts off with zero so your script

00:22:29,940 --> 00:22:34,590
will start off calling get time of day

00:22:32,120 --> 00:22:36,480
after every backers jump a function call

00:22:34,590 --> 00:22:40,290
and then if it turns out that we're

00:22:36,480 --> 00:22:42,570
doing we knit we nearly always calling

00:22:40,290 --> 00:22:45,180
that function before we've run out of

00:22:42,570 --> 00:22:46,890
time we'll go okay let's skip the next

00:22:45,180 --> 00:22:48,630
one so then we'll we'll skip the next

00:22:46,890 --> 00:22:50,310
check and if we're still missing will

00:22:48,630 --> 00:22:51,810
starts giving more checks and that can

00:22:50,310 --> 00:22:53,670
go get bigger and bigger and bigger and

00:22:51,810 --> 00:22:55,290
so this makes our code go much faster we

00:22:53,670 --> 00:22:56,700
left the mono summit Madrid with our

00:22:55,290 --> 00:22:58,890
card game 10 times faster we were very

00:22:56,700 --> 00:23:00,990
happy but then when we release this

00:22:58,890 --> 00:23:02,190
stuff we realized that actually people

00:23:00,990 --> 00:23:03,390
figuring out what was going on they

00:23:02,190 --> 00:23:05,190
reverse engineered our scheduler and

00:23:03,390 --> 00:23:06,960
this algorithm basically and went right

00:23:05,190 --> 00:23:09,390
okay that means I can sit in a tight

00:23:06,960 --> 00:23:11,220
loop building up an enormous timer skip

00:23:09,390 --> 00:23:12,810
value by basically sitting in a tightly

00:23:11,220 --> 00:23:14,550
but does nothing in between it build up

00:23:12,810 --> 00:23:16,350
a time skip for like 200 climate check

00:23:14,550 --> 00:23:18,030
skips and then launch into this massive

00:23:16,350 --> 00:23:19,710
thing where I'm sorting lists and

00:23:18,030 --> 00:23:22,230
calling these expensive operations and I

00:23:19,710 --> 00:23:24,000
get to skip over 200 of them before the

00:23:22,230 --> 00:23:26,490
schedule will check time again and so a

00:23:24,000 --> 00:23:27,540
kind of like ah yes very clever we need

00:23:26,490 --> 00:23:29,580
to figure out what we're gonna do about

00:23:27,540 --> 00:23:30,510
that and so probably what we'd what

00:23:29,580 --> 00:23:31,740
we're going to do about that is we're

00:23:30,510 --> 00:23:34,140
going to them we're going to make sure

00:23:31,740 --> 00:23:38,490
we check the time after every expensive

00:23:34,140 --> 00:23:39,510
operation for every all when we've run

00:23:38,490 --> 00:23:40,950
out of time I check so this means that

00:23:39,510 --> 00:23:43,140
you'll still be able to get the speed up

00:23:40,950 --> 00:23:45,030
when you're doing math and calculations

00:23:43,140 --> 00:23:46,860
where you want to stay in the legit it

00:23:45,030 --> 00:23:48,450
code and not call back without into into

00:23:46,860 --> 00:23:50,130
system calls but if you start doing

00:23:48,450 --> 00:23:51,210
things like sorting lists and so on then

00:23:50,130 --> 00:23:52,950
we're going to say right we're checking

00:23:51,210 --> 00:23:58,080
the time every time so that was kind of

00:23:52,950 --> 00:23:59,940
interesting this was a fun one so about

00:23:58,080 --> 00:24:03,000
two weeks before we shipped mono in

00:23:59,940 --> 00:24:05,970
Second Life one of our engineers came to

00:24:03,000 --> 00:24:09,270
us and said huh I just had a crash and

00:24:05,970 --> 00:24:11,700
when I had a crash the simulator didn't

00:24:09,270 --> 00:24:12,900
do its emergency sim state safe so it

00:24:11,700 --> 00:24:15,150
turns out that what we were doing before

00:24:12,900 --> 00:24:17,820
is that when our simulators would crash

00:24:15,150 --> 00:24:19,860
they'd go ah try not to lose any data so

00:24:17,820 --> 00:24:22,140
they would they would try to basically

00:24:19,860 --> 00:24:24,240
spool all of the content of the

00:24:22,140 --> 00:24:26,550
simulator out to a disk in an emergency

00:24:24,240 --> 00:24:28,790
since state file before been crashing

00:24:26,550 --> 00:24:30,590
properly right now this is

00:24:28,790 --> 00:24:33,800
is arguably not a good thing to do after

00:24:30,590 --> 00:24:36,530
you've had a Segway you can kind of get

00:24:33,800 --> 00:24:40,460
away with it if your scripts are 16 k

00:24:36,530 --> 00:24:41,570
blocks but what was happening is well so

00:24:40,460 --> 00:24:42,830
first of all we were like okay what's

00:24:41,570 --> 00:24:44,660
happened to our signal handler it turned

00:24:42,830 --> 00:24:46,700
out that when you embed mono it steals a

00:24:44,660 --> 00:24:48,650
ton of your signal handlers so you're

00:24:46,700 --> 00:24:49,700
you have a sec v and mono catches it and

00:24:48,650 --> 00:24:51,380
goes yeah this is not a

00:24:49,700 --> 00:24:53,570
nullreferenceexception so i'll just do

00:24:51,380 --> 00:24:54,860
nothing so this is a couple weeks before

00:24:53,570 --> 00:24:57,470
he wanted to ship so we were like I'll

00:24:54,860 --> 00:24:59,390
 we looked at the code and we ended

00:24:57,470 --> 00:25:02,900
up implementing signal chaining in mono

00:24:59,390 --> 00:25:05,000
so so what would happen we made it so

00:25:02,900 --> 00:25:06,680
that mono would go when it when you

00:25:05,000 --> 00:25:08,090
embedded it would go are there any

00:25:06,680 --> 00:25:10,610
signal handles already installed if

00:25:08,090 --> 00:25:12,560
there are save them away and then if a

00:25:10,610 --> 00:25:17,270
signal happens and we determine that

00:25:12,560 --> 00:25:18,740
it's not managed is not a mono exception

00:25:17,270 --> 00:25:20,630
it's not a nullreferenceexception in

00:25:18,740 --> 00:25:22,400
Amman at runtime it must be you know

00:25:20,630 --> 00:25:25,430
some exception in this huge pile of

00:25:22,400 --> 00:25:27,500
horrible unmanaged code over here that's

00:25:25,430 --> 00:25:28,610
embedding me then it will go right what

00:25:27,500 --> 00:25:30,740
was the signal handle that it had

00:25:28,610 --> 00:25:32,390
installed and it would call that one so

00:25:30,740 --> 00:25:34,010
so we made it we made it do signal

00:25:32,390 --> 00:25:35,180
training so if if you have a

00:25:34,010 --> 00:25:37,700
nullreferenceexception when you're

00:25:35,180 --> 00:25:38,990
running dotnet code then mono will

00:25:37,700 --> 00:25:42,920
handle it generated no reference

00:25:38,990 --> 00:25:45,020
exception if the if the instruction

00:25:42,920 --> 00:25:46,640
pointer is outside managed code and it

00:25:45,020 --> 00:25:48,080
just going over cases I manage stuff

00:25:46,640 --> 00:25:49,190
that's going wrong here then it will do

00:25:48,080 --> 00:25:51,650
signal training and it'll call the

00:25:49,190 --> 00:25:54,290
original signal handler so we did that

00:25:51,650 --> 00:25:56,120
then we realized that well things are

00:25:54,290 --> 00:25:57,770
still a bit different because it used to

00:25:56,120 --> 00:25:59,030
be that all of our scripts were just 16

00:25:57,770 --> 00:26:01,460
k blocks of memory so when we're doing

00:25:59,030 --> 00:26:04,550
this emergency save we would go take a

00:26:01,460 --> 00:26:05,840
16k block and saves disk and this line

00:26:04,550 --> 00:26:07,610
on this on this on the missile and this

00:26:05,840 --> 00:26:10,430
on now we have mono scripts running

00:26:07,610 --> 00:26:11,900
there so we've had a seg v it's gone

00:26:10,430 --> 00:26:13,730
through mono signal handlers and gone

00:26:11,900 --> 00:26:15,200
right this is not only managed problem

00:26:13,730 --> 00:26:16,400
so we're going to call the unmanaged

00:26:15,200 --> 00:26:18,020
signal handler and the amount of signal

00:26:16,400 --> 00:26:19,790
handler is going right ok I need to save

00:26:18,020 --> 00:26:21,590
this mono script so I need to go and I

00:26:19,790 --> 00:26:23,300
need to go serialize it right so we've

00:26:21,590 --> 00:26:24,980
had a seg v we've gone through the mono

00:26:23,300 --> 00:26:26,600
signal handler we've gone in back into

00:26:24,980 --> 00:26:28,730
the unmanaged signal handler now we need

00:26:26,600 --> 00:26:32,060
to call back in tomorrow after a seg v

00:26:28,730 --> 00:26:33,860
to say all right we need to we need to

00:26:32,060 --> 00:26:35,480
serialize this object so we can save it

00:26:33,860 --> 00:26:36,620
to disk turns out mono really does it

00:26:35,480 --> 00:26:39,650
like that I mean we're like totally

00:26:36,620 --> 00:26:41,600
operating past armaano warranty now

00:26:39,650 --> 00:26:42,680
where you know this is we voided our

00:26:41,600 --> 00:26:43,970
warranty there's already been

00:26:42,680 --> 00:26:48,260
zeg V and we're trying to continue to

00:26:43,970 --> 00:26:49,490
use mono so it turns out the garbage

00:26:48,260 --> 00:26:51,050
collector really doesn't like running

00:26:49,490 --> 00:26:53,150
after a segment it's like what the hell

00:26:51,050 --> 00:26:54,350
are you doing you're you're busted you

00:26:53,150 --> 00:26:57,110
see this should be going over you should

00:26:54,350 --> 00:26:58,550
already be dead but we're crashing so we

00:26:57,110 --> 00:27:00,590
kind of don't care about garbage

00:26:58,550 --> 00:27:02,600
collection because we're going to crash

00:27:00,590 --> 00:27:03,980
in a minute so it turns out that we were

00:27:02,600 --> 00:27:05,990
able to just turn off the garbage

00:27:03,980 --> 00:27:08,420
collector turn off lots of bits of mono

00:27:05,990 --> 00:27:10,220
and just so please try and do it just

00:27:08,420 --> 00:27:12,290
see realize this just call this

00:27:10,220 --> 00:27:15,170
serialization function and then we'll

00:27:12,290 --> 00:27:16,520
we'll die so that was kind of funny and

00:27:15,170 --> 00:27:17,570
and this is like this is one of the

00:27:16,520 --> 00:27:19,160
great things about open source code

00:27:17,570 --> 00:27:21,100
right we were able to two weeks before

00:27:19,160 --> 00:27:23,420
we were going to ship we were able to go

00:27:21,100 --> 00:27:24,860
mano doesn't do what we wanted we should

00:27:23,420 --> 00:27:28,220
have realized this earlier but we didn't

00:27:24,860 --> 00:27:29,960
but it's just C code and it's open

00:27:28,220 --> 00:27:33,110
source and so we were able to implement

00:27:29,960 --> 00:27:34,700
sigma training Monaco to really nice it

00:27:33,110 --> 00:27:37,970
was a pleasure to work with and then we

00:27:34,700 --> 00:27:41,030
submit the patch which lived in like

00:27:37,970 --> 00:27:42,440
lived in the mono bugzilla for about 18

00:27:41,030 --> 00:27:44,120
months and he got to the point where

00:27:42,440 --> 00:27:46,070
people what people were patching our

00:27:44,120 --> 00:27:49,100
patch in bugzilla because it hadn't been

00:27:46,070 --> 00:27:50,570
submitted to tamano but now so it was

00:27:49,100 --> 00:27:52,040
like we had this little mini for living

00:27:50,570 --> 00:27:54,140
in bugzilla for about 18 months of our

00:27:52,040 --> 00:27:56,840
signature alien code but I'm pleased to

00:27:54,140 --> 00:27:58,070
say it's now finally in mono and so so

00:27:56,840 --> 00:28:00,200
we were able to upgrade mono again

00:27:58,070 --> 00:28:02,030
because you know we had this fork of

00:28:00,200 --> 00:28:04,720
mono for 18 months and now now our codes

00:28:02,030 --> 00:28:07,160
in we can go and get a new version so

00:28:04,720 --> 00:28:08,630
that was kind of fun this is where we

00:28:07,160 --> 00:28:09,530
got to so I'm going to pause for a

00:28:08,630 --> 00:28:13,870
minute because this song is really

00:28:09,530 --> 00:28:13,870
awesome so this is an

00:28:14,920 --> 00:28:22,960
on the left hand side the flux i'm on

00:28:20,360 --> 00:28:22,960
it's running on me

00:28:25,620 --> 00:28:33,390
pictures and also it's but

00:28:29,890 --> 00:28:33,390
what we can get kind of a close

00:28:49,289 --> 00:28:52,529
the gamma

00:28:54,690 --> 00:29:02,600
what they're talking about

00:29:04,330 --> 00:29:10,789
so no this is Jonathan Hilton is the guy

00:29:08,750 --> 00:29:12,620
who did read your brains he's like a

00:29:10,789 --> 00:29:14,570
geek rock guy is really funny but yeah

00:29:12,620 --> 00:29:16,789
this this song is really funny i

00:29:14,570 --> 00:29:18,890
recommend you going listen to it see ya

00:29:16,789 --> 00:29:20,510
and what's actually happening here is I

00:29:18,890 --> 00:29:22,309
said you know everything in second life

00:29:20,510 --> 00:29:24,350
is a box that you put scripts on well

00:29:22,309 --> 00:29:26,000
each of these pixels is a box in second

00:29:24,350 --> 00:29:27,860
life it's been made really tiny so

00:29:26,000 --> 00:29:29,960
they've made a kind of pixelated raster

00:29:27,860 --> 00:29:31,549
screen by just putting boxes together in

00:29:29,960 --> 00:29:33,169
second life and then changing changing

00:29:31,549 --> 00:29:35,710
the color of it so it's completely

00:29:33,169 --> 00:29:40,010
ridiculous but it makes for a good demo

00:29:35,710 --> 00:29:41,210
so so yeah i'll skip boards go and watch

00:29:40,010 --> 00:29:44,000
the video going this is a song it's

00:29:41,210 --> 00:29:45,770
loads of fun so that could have been the

00:29:44,000 --> 00:29:47,270
end right victory we've shipped it we've

00:29:45,770 --> 00:29:48,529
got mono running a second life after

00:29:47,270 --> 00:29:50,149
doing all this crazy stuff for years and

00:29:48,529 --> 00:29:51,460
years and years oh my god thank goodness

00:29:50,149 --> 00:29:53,960
we've done it right we can go home

00:29:51,460 --> 00:29:55,909
scripts run faster in Second Life the

00:29:53,960 --> 00:29:58,399
descriptors are happy we mostly fix all

00:29:55,909 --> 00:30:00,110
the bugs it's mostly a good thing and

00:29:58,399 --> 00:30:02,029
when I said there's 80 million scripts

00:30:00,110 --> 00:30:03,260
running in second life earlier 40

00:30:02,029 --> 00:30:07,370
million of them are now running on mono

00:30:03,260 --> 00:30:09,500
so hooray people like it so so that's

00:30:07,370 --> 00:30:10,820
good news so that kid up in the end we

00:30:09,500 --> 00:30:12,289
could have gone right okay job done

00:30:10,820 --> 00:30:15,230
let's kind of go and do something else

00:30:12,289 --> 00:30:16,940
and that's what we did for about 12 to

00:30:15,230 --> 00:30:18,919
18 months though is like second life is

00:30:16,940 --> 00:30:20,270
growing we had scalability issues we

00:30:18,919 --> 00:30:22,309
went and did some web services for a

00:30:20,270 --> 00:30:24,169
while it's kind of nice break you know

00:30:22,309 --> 00:30:26,809
from all this kind of fiddling about the

00:30:24,169 --> 00:30:30,289
virtual machines but but the thing is

00:30:26,809 --> 00:30:32,600
we've now got second life with this

00:30:30,289 --> 00:30:33,770
crafty scripting language celite

00:30:32,600 --> 00:30:37,760
scripting language that's really broken

00:30:33,770 --> 00:30:40,070
and doesn't have many features and we've

00:30:37,760 --> 00:30:42,020
got it running on mono so it goes faster

00:30:40,070 --> 00:30:44,210
on mono but you know mono is a lot more

00:30:42,020 --> 00:30:45,740
than a lot more than a jit it's a lot

00:30:44,210 --> 00:30:48,559
more than an efficient virtual machine

00:30:45,740 --> 00:30:51,470
so what we really really wanted to do

00:30:48,559 --> 00:30:53,299
was to add some of the features that

00:30:51,470 --> 00:30:56,360
mono allows to our scripting environment

00:30:53,299 --> 00:30:57,649
to take take advantage of money so after

00:30:56,360 --> 00:30:59,720
doing some scalability stuff and some

00:30:57,649 --> 00:31:00,980
web service stuff for a while we went

00:30:59,720 --> 00:31:02,000
right ok we're going to fix this so

00:31:00,980 --> 00:31:02,990
we're going to make our scripting

00:31:02,000 --> 00:31:04,520
environment better we're going to

00:31:02,990 --> 00:31:06,590
exploit mono this is going to be great

00:31:04,520 --> 00:31:10,090
so the first thing we're tackling is the

00:31:06,590 --> 00:31:12,440
memory model so remember I said earlier

00:31:10,090 --> 00:31:14,389
alisal scripts of this 16k block of

00:31:12,440 --> 00:31:16,220
memory and they're 16 k and that's the

00:31:14,389 --> 00:31:17,149
end of it they're 16 k no can maybe

00:31:16,220 --> 00:31:19,609
bigger know

00:31:17,149 --> 00:31:21,649
can they can no can meet no we can't do

00:31:19,609 --> 00:31:23,929
anything with other cell 16 k block it

00:31:21,649 --> 00:31:25,339
will always be a 16k block and it turns

00:31:23,929 --> 00:31:28,489
out that's fine when you're writing a

00:31:25,339 --> 00:31:29,450
script which is like I want to make it

00:31:28,489 --> 00:31:31,159
so that when people sit on this chair

00:31:29,450 --> 00:31:32,570
they sit in the right place or you know

00:31:31,159 --> 00:31:34,159
make sure there's door opens and closes

00:31:32,570 --> 00:31:37,690
it's really great for that kind of stuff

00:31:34,159 --> 00:31:41,119
but we've added features like email and

00:31:37,690 --> 00:31:42,529
HTTP interaction and it turns out 16 k

00:31:41,119 --> 00:31:44,089
is a real pain in the ass when a web

00:31:42,529 --> 00:31:46,849
service wants to give you a pile of XML

00:31:44,089 --> 00:31:49,239
it also turns out that having a

00:31:46,849 --> 00:31:51,859
heterogeneous list as your only way of

00:31:49,239 --> 00:31:53,509
storing dynamic amounts of data is also

00:31:51,859 --> 00:31:56,059
a really big pain if someone gives you a

00:31:53,509 --> 00:31:57,259
huge pile of XML so so when you're

00:31:56,059 --> 00:32:00,019
creating scripts that interact with

00:31:57,259 --> 00:32:01,309
second lives the LSL and 16 k and dsl's

00:32:00,019 --> 00:32:03,919
are all right but when you want to open

00:32:01,309 --> 00:32:05,450
second life up to the outside world 16k

00:32:03,919 --> 00:32:07,580
is a real pain and it turns out that

00:32:05,450 --> 00:32:08,839
what happens is lots of people go lots

00:32:07,580 --> 00:32:11,179
of people build a script in second life

00:32:08,839 --> 00:32:14,210
that acts on second life then they'll

00:32:11,179 --> 00:32:16,580
build a web server whose sole purpose is

00:32:14,210 --> 00:32:18,710
to proxy requests from that script get a

00:32:16,580 --> 00:32:20,989
huge slab of XML in from the internet

00:32:18,710 --> 00:32:23,659
turn it into a comma separated value

00:32:20,989 --> 00:32:26,330
list so that it can be sent back to the

00:32:23,659 --> 00:32:28,070
script and kind of squeeze functionality

00:32:26,330 --> 00:32:30,169
out this tiny little amount of memory

00:32:28,070 --> 00:32:31,429
that we have so it's really not good so

00:32:30,169 --> 00:32:34,070
especially for breaking down walls

00:32:31,429 --> 00:32:36,169
between second life in the web 16 codes

00:32:34,070 --> 00:32:37,580
of real pain so we wanted to get away

00:32:36,169 --> 00:32:40,119
from that and there's no reason that

00:32:37,580 --> 00:32:42,889
mono scripts need to be 16 k right there

00:32:40,119 --> 00:32:45,559
they're not 16 k block their a graph of

00:32:42,889 --> 00:32:47,869
object references that grow like within

00:32:45,559 --> 00:32:49,070
reason so one of the projects were

00:32:47,869 --> 00:32:51,679
working on the moment is the script

00:32:49,070 --> 00:32:54,710
script limits project and what this is

00:32:51,679 --> 00:32:57,830
doing is it's saying for every square

00:32:54,710 --> 00:32:58,940
meter of land or for every avatar or for

00:32:57,830 --> 00:33:01,339
every whatever you want to think about

00:32:58,940 --> 00:33:03,499
it we're going to give you X kilobytes

00:33:01,339 --> 00:33:06,109
of memory and that's going to be a pool

00:33:03,499 --> 00:33:09,320
that your script can can draw from and

00:33:06,109 --> 00:33:10,609
what that means is that all that means

00:33:09,320 --> 00:33:12,830
is your script can say I don't want to

00:33:10,609 --> 00:33:14,960
be 16 k i wanna be 128 k or want to be

00:33:12,830 --> 00:33:16,849
4k or we want to be four megabytes and

00:33:14,960 --> 00:33:18,559
depending on the amount resources you

00:33:16,849 --> 00:33:19,909
bought in second life or the amount of

00:33:18,559 --> 00:33:21,649
resources you have available on your

00:33:19,909 --> 00:33:22,820
avatar your script will be able to say I

00:33:21,649 --> 00:33:25,849
want to be bigger or I want to be

00:33:22,820 --> 00:33:26,960
smaller and and that's doing really

00:33:25,849 --> 00:33:28,279
great it's going to mean that lots of

00:33:26,960 --> 00:33:29,599
these proxies is going to be able to go

00:33:28,279 --> 00:33:30,770
away you're going to be able to go I

00:33:29,599 --> 00:33:32,180
want to reach out to the web

00:33:30,770 --> 00:33:33,800
get a huge pile of XML I don't care

00:33:32,180 --> 00:33:35,570
that's a megabyte I'm going to you know

00:33:33,800 --> 00:33:37,910
work my way through it find the data I

00:33:35,570 --> 00:33:39,440
needin and and I can just then build an

00:33:37,910 --> 00:33:41,540
application in Second Life of talk to

00:33:39,440 --> 00:33:43,190
the web without without having to be a

00:33:41,540 --> 00:33:44,720
web admin without having to run a server

00:33:43,190 --> 00:33:47,300
without having to run all the external

00:33:44,720 --> 00:33:49,010
stuff which would be great so that's

00:33:47,300 --> 00:33:50,510
what the script limits resource pools

00:33:49,010 --> 00:33:52,550
and big scripts is about efficient

00:33:50,510 --> 00:33:54,500
scripts is kind of just an optimization

00:33:52,550 --> 00:33:57,350
in a model which is which was that

00:33:54,500 --> 00:33:59,180
previously if you wanted to make an

00:33:57,350 --> 00:34:01,010
object which would resize itself you

00:33:59,180 --> 00:34:03,320
have to put script in every single every

00:34:01,010 --> 00:34:05,120
single part of that object now you have

00:34:03,320 --> 00:34:06,950
to send messages between this kind of

00:34:05,120 --> 00:34:08,960
graph of scripts to say okay everyone

00:34:06,950 --> 00:34:10,640
make yourself eighty percent smaller and

00:34:08,960 --> 00:34:12,230
kind of reset yourself so efficient

00:34:10,640 --> 00:34:13,730
scripts is just saying look we're going

00:34:12,230 --> 00:34:16,520
to make it possible for a single script

00:34:13,730 --> 00:34:19,010
in an object to operate on all of the

00:34:16,520 --> 00:34:20,810
linked objects in that in that in that

00:34:19,010 --> 00:34:21,919
object in second life so the first thing

00:34:20,810 --> 00:34:23,090
we're going to do is we're going to sort

00:34:21,919 --> 00:34:25,130
memory model out this is going to be a

00:34:23,090 --> 00:34:27,020
huge huge win one of the problems at the

00:34:25,130 --> 00:34:30,649
moment is although every script is

00:34:27,020 --> 00:34:32,780
limited 16k the amount of memory that

00:34:30,649 --> 00:34:34,760
scripts in as a whole can use in the

00:34:32,780 --> 00:34:36,800
simulator is unlimited so what happens

00:34:34,760 --> 00:34:38,780
is that people go up I've run out of

00:34:36,800 --> 00:34:41,030
memory in my 16 k script so I'm going to

00:34:38,780 --> 00:34:42,860
make four hundred thousand of them and

00:34:41,030 --> 00:34:44,540
then you end up with the simulator just

00:34:42,860 --> 00:34:45,830
kind of bogging down and using you know

00:34:44,540 --> 00:34:47,510
going into virtual memory and swapping

00:34:45,830 --> 00:34:48,649
and it's all just totally horrible so

00:34:47,510 --> 00:34:49,970
this is going to set a hard limit on the

00:34:48,649 --> 00:34:52,429
amount script memory in the entire

00:34:49,970 --> 00:34:54,290
simulator but within that within that

00:34:52,429 --> 00:34:56,510
block of memory scripts will be free to

00:34:54,290 --> 00:34:57,590
say i want you know half a megabyte or a

00:34:56,510 --> 00:34:59,560
megabyte or whatever it is they need

00:34:57,590 --> 00:35:01,970
such thing we're working at the moment

00:34:59,560 --> 00:35:06,170
the next thing we're going to work on is

00:35:01,970 --> 00:35:07,900
C sharp hurry finally a proper a proper

00:35:06,170 --> 00:35:09,890
programming language in second life

00:35:07,900 --> 00:35:11,570
somewhat c-sharp going to give us that

00:35:09,890 --> 00:35:13,250
LSO doesn't have welfare starts going to

00:35:11,570 --> 00:35:14,690
give us a raise we haven't even got a

00:35:13,250 --> 00:35:16,910
razor now cell it's going to give us

00:35:14,690 --> 00:35:18,410
primitive types so having a byte array

00:35:16,910 --> 00:35:20,570
when you want to be able to do like

00:35:18,410 --> 00:35:22,700
cryptography or talk to the web is quite

00:35:20,570 --> 00:35:24,200
handy enumerations use define types

00:35:22,700 --> 00:35:25,430
exceptions all these things you take for

00:35:24,200 --> 00:35:27,110
granted that people know i sell-- don't

00:35:25,430 --> 00:35:28,550
have and they have to kind of scratch

00:35:27,110 --> 00:35:30,440
the head and kind of jump through hoops

00:35:28,550 --> 00:35:32,420
to my work and also as a big ecosystem

00:35:30,440 --> 00:35:34,040
right there's a there's a there's a room

00:35:32,420 --> 00:35:37,580
full of people here at Nova source

00:35:34,040 --> 00:35:39,140
conference talking about C sharp at you

00:35:37,580 --> 00:35:41,090
know Microsoft conferences that we tons

00:35:39,140 --> 00:35:43,760
of people talking about c-sharp there

00:35:41,090 --> 00:35:44,570
isn't an NSL developer room in at for

00:35:43,760 --> 00:35:46,970
stem and

00:35:44,570 --> 00:35:49,700
there aren't huge amounts of L&SL code

00:35:46,970 --> 00:35:51,110
out on the web i did the you've probably

00:35:49,700 --> 00:35:53,330
seen the kind of programming language

00:35:51,110 --> 00:35:54,800
popularity thing which goes you know

00:35:53,330 --> 00:35:57,560
basically do a search for programming

00:35:54,800 --> 00:35:59,030
web pages and then and then figure out

00:35:57,560 --> 00:36:02,510
which is the most popular language and

00:35:59,030 --> 00:36:03,800
and you know c sharp is like has five

00:36:02,510 --> 00:36:05,150
percent of the hits on the web which is

00:36:03,800 --> 00:36:07,550
pretty good it's the same as Python not

00:36:05,150 --> 00:36:09,230
as many as java not as many as a couple

00:36:07,550 --> 00:36:11,540
of other languages c and stuff if you

00:36:09,230 --> 00:36:12,860
sir if you do the same job with LSL you

00:36:11,540 --> 00:36:14,300
find that LSL is around about the

00:36:12,860 --> 00:36:16,700
hundredth most popular language in the

00:36:14,300 --> 00:36:18,590
world now that's pretty good because you

00:36:16,700 --> 00:36:20,870
know second i spin around five or six

00:36:18,590 --> 00:36:23,120
years whatever there's not that many

00:36:20,870 --> 00:36:24,590
people who program LSL having 100th most

00:36:23,120 --> 00:36:26,840
popular language in the world is pretty

00:36:24,590 --> 00:36:29,270
good but it means that you can't just do

00:36:26,840 --> 00:36:30,410
the kind of goo code code by googling

00:36:29,270 --> 00:36:31,820
that we were already used to write you

00:36:30,410 --> 00:36:33,350
want to be able to go I've got this job

00:36:31,820 --> 00:36:34,580
i want to do i'm going to google for the

00:36:33,350 --> 00:36:36,080
are right there's a block of code i'm

00:36:34,580 --> 00:36:37,130
going to base my code on that or if it's

00:36:36,080 --> 00:36:39,260
open saw something to use that code

00:36:37,130 --> 00:36:41,630
that's great you can't easily do that

00:36:39,260 --> 00:36:43,310
with other cell so the ecosystem is a

00:36:41,630 --> 00:36:45,470
big thing videos amazon search there's

00:36:43,310 --> 00:36:48,980
like 800 books on C sharp on amazon and

00:36:45,470 --> 00:36:49,790
there's 28 books on ala sell on amazon

00:36:48,980 --> 00:36:51,350
and most of those are kind of

00:36:49,790 --> 00:36:52,430
general-purpose guides to second life so

00:36:51,350 --> 00:36:55,430
this is gonna be a big deal the

00:36:52,430 --> 00:36:58,190
ecosystem is a big deal so what do we

00:36:55,430 --> 00:37:00,170
need to do to make c-sharp work well

00:36:58,190 --> 00:37:01,850
you'll notice in this part of my talk I

00:37:00,170 --> 00:37:03,410
have lots of question marks because I

00:37:01,850 --> 00:37:04,730
don't completely know and one of the

00:37:03,410 --> 00:37:06,140
reasons I'm here is to find out so if

00:37:04,730 --> 00:37:07,640
you know if you can get rid of a

00:37:06,140 --> 00:37:09,140
question mark for me then that would be

00:37:07,640 --> 00:37:10,790
great so first of all we need to

00:37:09,140 --> 00:37:13,100
complete our youth or an injector so at

00:37:10,790 --> 00:37:14,570
the moment we've implemented this the

00:37:13,100 --> 00:37:16,190
tool which takes an assembly and

00:37:14,570 --> 00:37:18,620
rewrites it to put these yield points in

00:37:16,190 --> 00:37:20,690
and these post fixes that go and save

00:37:18,620 --> 00:37:22,310
code we've implemented enough of that to

00:37:20,690 --> 00:37:23,960
support LSL if we're going to support

00:37:22,310 --> 00:37:26,450
c-sharp we pretty much need to support

00:37:23,960 --> 00:37:28,130
the whole of the CIL instruction set so

00:37:26,450 --> 00:37:30,230
we need to complete the user injector so

00:37:28,130 --> 00:37:31,580
first of all other you know is that how

00:37:30,230 --> 00:37:33,200
big of a job is that going to be we're

00:37:31,580 --> 00:37:35,120
going to hit more manage pointer horrors

00:37:33,200 --> 00:37:37,550
you know are there going to be is like

00:37:35,120 --> 00:37:39,170
op codes which go and execute delegates

00:37:37,550 --> 00:37:40,910
are there going to be a pain to kind of

00:37:39,170 --> 00:37:43,460
deal with I don't know hopefully not the

00:37:40,910 --> 00:37:47,390
next big question is are we going to

00:37:43,460 --> 00:37:49,340
continue using the abandonware academic

00:37:47,390 --> 00:37:51,110
framework rail which we currently build

00:37:49,340 --> 00:37:53,720
are you threaten jacks are on or are we

00:37:51,110 --> 00:37:55,070
going to use sessle which in the time

00:37:53,720 --> 00:37:56,630
we've been doing this has come on from

00:37:55,070 --> 00:37:58,190
kind of you know a nice idea to

00:37:56,630 --> 00:37:59,840
something that's being used for a lot

00:37:58,190 --> 00:38:01,550
stuffin mono so are we going to move to

00:37:59,840 --> 00:38:04,010
sessle how big of a deal is that going

00:38:01,550 --> 00:38:05,600
to be Miguel please ask somebody to

00:38:04,010 --> 00:38:09,470
write some documentation of sessle

00:38:05,600 --> 00:38:11,120
because it's I've done some googling I

00:38:09,470 --> 00:38:12,620
couldn't find you know I was like how do

00:38:11,120 --> 00:38:14,120
we how do we how do we how do i use

00:38:12,620 --> 00:38:16,520
sessle that would be good I would like

00:38:14,120 --> 00:38:18,560
to know I liked how know how i use

00:38:16,520 --> 00:38:19,850
sessle and how much you know how much

00:38:18,560 --> 00:38:21,290
different it is from rail so we can

00:38:19,850 --> 00:38:22,670
decide what we're going to move and one

00:38:21,290 --> 00:38:24,380
of the big deals there is are we going

00:38:22,670 --> 00:38:28,970
to support generics are not so rail

00:38:24,380 --> 00:38:30,170
doesn't rail will rewrite version 1 dot

00:38:28,970 --> 00:38:32,120
net assemblies but it won't write

00:38:30,170 --> 00:38:34,760
rewrite assemblies that have generics

00:38:32,120 --> 00:38:36,710
and so if we don't move to settle we're

00:38:34,760 --> 00:38:38,300
going to be sporting see shop 1 which

00:38:36,710 --> 00:38:40,550
means we won't get all the a lot of the

00:38:38,300 --> 00:38:42,680
cool shiny stuff that you that may get

00:38:40,550 --> 00:38:44,840
up early we'll get lots of benefits over

00:38:42,680 --> 00:38:49,220
LSL but we won't get won't get the whole

00:38:44,840 --> 00:38:50,420
the whole shooting match so the next

00:38:49,220 --> 00:38:52,640
thing we need to do is we need to build

00:38:50,420 --> 00:38:54,740
a sandbox so one of the reasons we're

00:38:52,640 --> 00:39:01,850
doing this now is that finally mano has

00:38:54,740 --> 00:39:03,590
a a bytecode verifier and and a ana call

00:39:01,850 --> 00:39:05,600
seal off security sandbox right it's

00:39:03,590 --> 00:39:07,130
built for moonlight but but we're a lot

00:39:05,600 --> 00:39:10,730
like moonlight in the sense that we are

00:39:07,130 --> 00:39:12,860
we're a we're a we're embedding mano in

00:39:10,730 --> 00:39:14,270
a different process and we are running

00:39:12,860 --> 00:39:15,500
untrusted code so we need to do a lot

00:39:14,270 --> 00:39:18,110
the same things that moonlight needs to

00:39:15,500 --> 00:39:19,850
do so how is that done how do we how do

00:39:18,110 --> 00:39:22,670
we hook into it how do we we embed mano

00:39:19,850 --> 00:39:25,940
at the moment i have c sharp assemblies

00:39:22,670 --> 00:39:27,650
that make internal calls manos totally

00:39:25,940 --> 00:39:30,680
happy with that I need to be able to

00:39:27,650 --> 00:39:33,470
flick a switch somehow to say don't be

00:39:30,680 --> 00:39:35,810
okay with with transparent code that

00:39:33,470 --> 00:39:37,700
makes internal calls and I expect my

00:39:35,810 --> 00:39:39,440
simulator to not start up I expected to

00:39:37,700 --> 00:39:41,390
get to the point where it loads this

00:39:39,440 --> 00:39:43,520
assembly that has internal calls and to

00:39:41,390 --> 00:39:45,110
go bar this is not this is not marked

00:39:43,520 --> 00:39:48,530
security critical so I'm going explodes

00:39:45,110 --> 00:39:51,290
how do I do that so its course a lot

00:39:48,530 --> 00:39:53,150
security going to be enough how do i do

00:39:51,290 --> 00:39:55,610
the assembly markup right how do i I

00:39:53,150 --> 00:39:58,970
need to effectively define another

00:39:55,610 --> 00:40:00,740
profile which is like the moonlight the

00:39:58,970 --> 00:40:02,090
Silverlight profile which goes these are

00:40:00,740 --> 00:40:03,410
the things that you can use these are

00:40:02,090 --> 00:40:04,970
the assemblies that it's okay for

00:40:03,410 --> 00:40:06,770
scripts to access these are the things

00:40:04,970 --> 00:40:08,030
it's not okay excuse to access I want to

00:40:06,770 --> 00:40:10,420
be able to take the whole of the.net

00:40:08,030 --> 00:40:12,140
framework put it through a big sausage

00:40:10,420 --> 00:40:13,790
factory in

00:40:12,140 --> 00:40:15,230
at the other end this tiny little thing

00:40:13,790 --> 00:40:16,970
that goes you're allowed to you know you

00:40:15,230 --> 00:40:19,340
have these four assemblies these ones

00:40:16,970 --> 00:40:22,610
are these ones are security critical

00:40:19,340 --> 00:40:24,340
these ones are transparent and whatever

00:40:22,610 --> 00:40:26,600
so how do I do that I need to find out

00:40:24,340 --> 00:40:27,590
and some of this i can read docs on but

00:40:26,600 --> 00:40:30,260
you know if you tell me it's easier

00:40:27,590 --> 00:40:32,870
because it's just just tell me he'll be

00:40:30,260 --> 00:40:34,220
easier so another thing we need to do is

00:40:32,870 --> 00:40:36,770
figure out what r c sharp api is going

00:40:34,220 --> 00:40:38,690
to look like so for a start we're going

00:40:36,770 --> 00:40:40,580
to have all of the methods available to

00:40:38,690 --> 00:40:42,230
scripts that currently are available to

00:40:40,580 --> 00:40:44,030
Ellis our scripts and in fact a lot of

00:40:42,230 --> 00:40:46,700
this already exists right a lot of this

00:40:44,030 --> 00:40:49,130
API already exists we compile error cell

00:40:46,700 --> 00:40:50,900
scripts down to il but then we have a

00:40:49,130 --> 00:40:52,250
bunch of C sharp API that those scripts

00:40:50,900 --> 00:40:54,350
called call back into the simulator

00:40:52,250 --> 00:40:57,590
right so we already have our library of

00:40:54,350 --> 00:40:59,810
ll foo methods like ll say ll you know

00:40:57,590 --> 00:41:02,270
set texture or whatever they already

00:40:59,810 --> 00:41:03,710
exist it would be great to give people

00:41:02,270 --> 00:41:06,220
systems or collections I don't see why

00:41:03,710 --> 00:41:07,940
not hash tables would be great you know

00:41:06,220 --> 00:41:09,410
arraylist would be great to people

00:41:07,940 --> 00:41:11,320
who've only had hex genius lists for a

00:41:09,410 --> 00:41:13,550
while this is going to be awesome and

00:41:11,320 --> 00:41:15,140
systems that security cryptography is a

00:41:13,550 --> 00:41:16,100
really good one I'll show you hopefully

00:41:15,140 --> 00:41:18,590
if I have time I'll show you a demo

00:41:16,100 --> 00:41:19,850
later of using that it means that you

00:41:18,590 --> 00:41:21,860
can just go you know you've got byte

00:41:19,850 --> 00:41:24,350
arrays system security cryptography you

00:41:21,860 --> 00:41:27,050
can go burn a few calls you can then go

00:41:24,350 --> 00:41:29,030
and talk to you know secure websites

00:41:27,050 --> 00:41:30,410
using old and it's like 10 lines of code

00:41:29,030 --> 00:41:32,900
so we'd like to have that it would also

00:41:30,410 --> 00:41:34,040
like be nice to have some xml stuff so

00:41:32,900 --> 00:41:35,510
which XML things should we make

00:41:34,040 --> 00:41:38,510
available to scripts it'd be nice to

00:41:35,510 --> 00:41:40,280
make some some more web functionality

00:41:38,510 --> 00:41:41,990
available scripts which one should we do

00:41:40,280 --> 00:41:43,250
there do you want to you know we

00:41:41,990 --> 00:41:45,050
probably don't want have remoting but

00:41:43,250 --> 00:41:47,840
you know anything anything which you can

00:41:45,050 --> 00:41:49,580
go and talk to the web would be great so

00:41:47,840 --> 00:41:51,290
talks about the dotnet Silverlight

00:41:49,580 --> 00:41:52,370
machinery how do we how does mon i turn

00:41:51,290 --> 00:41:53,390
the dotnet framework into the

00:41:52,370 --> 00:41:55,880
silverlight framework and how do we

00:41:53,390 --> 00:41:59,920
offer the stuff we need to offer to make

00:41:55,880 --> 00:42:02,210
our own our own profile effectively and

00:41:59,920 --> 00:42:04,610
so types are kind of interesting because

00:42:02,210 --> 00:42:07,010
as i said earlier alle sales of dsl so

00:42:04,610 --> 00:42:08,510
you can do and i'll sell a list is one

00:42:07,010 --> 00:42:11,390
of the six magical types there will only

00:42:08,510 --> 00:42:13,190
be six so you can go i want a list l

00:42:11,390 --> 00:42:14,780
equals food 42 right I'll crack your

00:42:13,190 --> 00:42:16,910
head jeans list it's pretty nice syntax

00:42:14,780 --> 00:42:20,000
it's a lot nicer than what we currently

00:42:16,910 --> 00:42:21,650
have here which is on an ArrayList l

00:42:20,000 --> 00:42:22,940
which is new arraylist which is in which

00:42:21,650 --> 00:42:24,500
is made from a new object array which

00:42:22,940 --> 00:42:25,329
contains foo and 42 that's pretty

00:42:24,500 --> 00:42:27,579
horrible

00:42:25,329 --> 00:42:29,920
so maybe we want to do some of the kind

00:42:27,579 --> 00:42:31,660
of funky API you know chainable API

00:42:29,920 --> 00:42:33,969
calls so you can say okay I want a new

00:42:31,660 --> 00:42:35,709
list out of fear and out of 42 this

00:42:33,969 --> 00:42:38,099
stuff gets interesting when you get to

00:42:35,709 --> 00:42:40,420
we have lots of method calls which take

00:42:38,099 --> 00:42:42,150
heterogenous list as parameters which is

00:42:40,420 --> 00:42:45,039
really horrible I don't like it but

00:42:42,150 --> 00:42:48,609
Alice L is so limited that sometimes you

00:42:45,039 --> 00:42:51,009
have to for example in LSL when you want

00:42:48,609 --> 00:42:52,450
to make an HTTP record request you go LH

00:42:51,009 --> 00:42:54,459
to be request you give it URL then you

00:42:52,450 --> 00:42:56,469
give it a list of optional stuff like

00:42:54,459 --> 00:42:57,849
HTTP method equals post well like this

00:42:56,469 --> 00:42:59,589
turns this gets really horrible in the

00:42:57,849 --> 00:43:01,269
currency sharp version because you same

00:42:59,589 --> 00:43:02,289
problem here you go ok I can give it

00:43:01,269 --> 00:43:04,029
your L but then need to give it a new

00:43:02,289 --> 00:43:07,119
arraylist of a new object or over HTTP

00:43:04,029 --> 00:43:08,349
method post so but we can potentially do

00:43:07,119 --> 00:43:11,890
better than that by making kind of

00:43:08,349 --> 00:43:13,690
specialized builders for particular

00:43:11,890 --> 00:43:17,289
functions right so we can make a we can

00:43:13,690 --> 00:43:19,900
make an HTTP builder class in c-sharp

00:43:17,289 --> 00:43:23,349
where we'll go ok I want a new HTTP

00:43:19,900 --> 00:43:24,999
request URL here is a URL that thing can

00:43:23,349 --> 00:43:27,849
throw an exception if the URL is wrong

00:43:24,999 --> 00:43:29,380
or malformed dot method post this thing

00:43:27,849 --> 00:43:31,779
can throw an exception if post is not a

00:43:29,380 --> 00:43:32,979
valid method top make the request so at

00:43:31,779 --> 00:43:36,009
the moment what happens is you give a

00:43:32,979 --> 00:43:38,049
you give a list of objects to a library

00:43:36,009 --> 00:43:39,789
call and if you get it wrong most of

00:43:38,049 --> 00:43:41,589
time I'll just silently fail whereas if

00:43:39,789 --> 00:43:42,940
we use builders we can say these are the

00:43:41,589 --> 00:43:44,229
parameters these are the types of the

00:43:42,940 --> 00:43:46,150
parameters we can strongly type each

00:43:44,229 --> 00:43:48,459
parameter so that you don't for example

00:43:46,150 --> 00:43:50,109
pass you know this is a string when it

00:43:48,459 --> 00:43:51,699
actually is a constant and we can make

00:43:50,109 --> 00:43:53,859
it throw exceptions at the right time so

00:43:51,699 --> 00:43:56,199
we kind of we need to decide about that

00:43:53,859 --> 00:43:59,170
kind of stuff c-sharp event handling

00:43:56,199 --> 00:44:00,910
this is what Miguel designed in Madrid

00:43:59,170 --> 00:44:03,579
which we currently still have and it's

00:44:00,910 --> 00:44:05,709
working quite nicely so one of the ways

00:44:03,579 --> 00:44:08,049
things work in in second life is that

00:44:05,709 --> 00:44:10,599
the set of events you handle control the

00:44:08,049 --> 00:44:12,459
UI to the scripted object right so if

00:44:10,599 --> 00:44:14,170
you add a touch handler then if you

00:44:12,459 --> 00:44:15,430
hover over the object your mouse will

00:44:14,170 --> 00:44:17,890
turn into a finger because you can touch

00:44:15,430 --> 00:44:19,479
it and the way this is handling Alice

00:44:17,890 --> 00:44:21,400
ours you do these state changes so you

00:44:19,479 --> 00:44:22,930
can go from a state which doesn't handle

00:44:21,400 --> 00:44:25,239
an event to a state which does handle an

00:44:22,930 --> 00:44:27,369
event it's but it's a bit it's a bit

00:44:25,239 --> 00:44:28,719
icky so the way we're currently planning

00:44:27,369 --> 00:44:32,619
on doing this and C sharp is that will

00:44:28,719 --> 00:44:34,569
go right I've got script it it can

00:44:32,619 --> 00:44:36,489
either override or it can use delegates

00:44:34,569 --> 00:44:38,019
for event handlers so I can override the

00:44:36,489 --> 00:44:39,250
on res event which is called when my

00:44:38,019 --> 00:44:41,020
object gets res

00:44:39,250 --> 00:44:43,570
which is a term from Tron out of my

00:44:41,020 --> 00:44:45,910
inventory so that's just a straight over

00:44:43,570 --> 00:44:48,130
right but then i can say touch which is

00:44:45,910 --> 00:44:50,500
a delegate in the in the parent class i

00:44:48,130 --> 00:44:52,330
guess i touch is a is a new strip touch

00:44:50,500 --> 00:44:54,130
target which points to the touch method

00:44:52,330 --> 00:44:57,070
and then the touch method can just go

00:44:54,130 --> 00:44:58,630
hey I'm setting myself off and then it

00:44:57,070 --> 00:45:00,370
can say set the touch delegate in the

00:44:58,630 --> 00:45:02,470
parent to null so then you cannot you

00:45:00,370 --> 00:45:04,150
can have like straight override event

00:45:02,470 --> 00:45:05,440
handlers which is what you expect plus

00:45:04,150 --> 00:45:06,850
you can use delegates to do the kind of

00:45:05,440 --> 00:45:08,860
dynamic event handlers which you need to

00:45:06,850 --> 00:45:10,300
control the UI so is that the right

00:45:08,860 --> 00:45:12,010
model I'd like to know should these

00:45:10,300 --> 00:45:13,600
instead of these being delegates should

00:45:12,010 --> 00:45:15,550
they be event should we be going you

00:45:13,600 --> 00:45:17,650
know plus equals some event handler

00:45:15,550 --> 00:45:18,880
what's the overhead of events rather

00:45:17,650 --> 00:45:22,270
than delegates this is the kind of thing

00:45:18,880 --> 00:45:23,680
we're currently thinking about but I see

00:45:22,270 --> 00:45:25,840
shop libraries that moment in ela so you

00:45:23,680 --> 00:45:27,580
don't have libraries so if you want to

00:45:25,840 --> 00:45:28,870
add some functionality someone's existed

00:45:27,580 --> 00:45:30,280
to announce a scripture if you copy and

00:45:28,870 --> 00:45:31,900
paste it into your script and compile it

00:45:30,280 --> 00:45:34,900
which is just horrible it would be much

00:45:31,900 --> 00:45:36,790
nicer to be able to to be able to

00:45:34,900 --> 00:45:38,710
distribute inside Second Life c-sharp

00:45:36,790 --> 00:45:41,410
libraries which I can just import and

00:45:38,710 --> 00:45:42,850
then just cool but if i'm going to do

00:45:41,410 --> 00:45:44,740
that what's the scope how does that how

00:45:42,850 --> 00:45:46,240
do I build the command line in second

00:45:44,740 --> 00:45:48,880
life when I don't have a command-line

00:45:46,240 --> 00:45:50,770
interface how's naming work if I create

00:45:48,880 --> 00:45:52,210
a map if I create a class called foo and

00:45:50,770 --> 00:45:53,860
then i create different class called for

00:45:52,210 --> 00:45:55,930
somebody else greats class life called

00:45:53,860 --> 00:45:58,120
foo how do we how do we use namespaces

00:45:55,930 --> 00:45:59,290
to total difference and also highlight

00:45:58,120 --> 00:46:00,670
version these things and choose which

00:45:59,290 --> 00:46:04,780
version i'm going to compile against so

00:46:00,670 --> 00:46:05,710
lots of questions there no answers so

00:46:04,780 --> 00:46:06,880
that's the stuff we're working on the

00:46:05,710 --> 00:46:08,800
moment we'd like answers to those

00:46:06,880 --> 00:46:11,110
questions then in the even more glorious

00:46:08,800 --> 00:46:13,180
future maybe we can get to F sharp boo

00:46:11,110 --> 00:46:15,130
and Haskell on the static side it would

00:46:13,180 --> 00:46:18,580
be great to get to ironpython 9 Ruby but

00:46:15,130 --> 00:46:21,130
at the moment we only can inject our

00:46:18,580 --> 00:46:22,840
youth red code into into assemblies that

00:46:21,130 --> 00:46:25,570
been generated from static languages so

00:46:22,840 --> 00:46:27,520
the languages like I'm Python and I'm

00:46:25,570 --> 00:46:29,560
Ruby generate code at runtime and we

00:46:27,520 --> 00:46:30,880
need some some hook to be able to go ok

00:46:29,560 --> 00:46:33,430
we're going to rewrite that code as well

00:46:30,880 --> 00:46:35,560
IDE integration would be great so we

00:46:33,430 --> 00:46:36,940
currently have like a little text box it

00:46:35,560 --> 00:46:40,030
would be great to have monodevelop or

00:46:36,940 --> 00:46:42,850
your visual studio be able to be able to

00:46:40,030 --> 00:46:44,380
use these Second Life scripts and create

00:46:42,850 --> 00:46:45,520
Second Life scopes and potentially debug

00:46:44,380 --> 00:46:46,360
them as well because I'm not sure we're

00:46:45,520 --> 00:46:47,980
gonna get to the point where we can

00:46:46,360 --> 00:46:50,260
debug scripts live running in second

00:46:47,980 --> 00:46:52,970
life but if you could create a script in

00:46:50,260 --> 00:46:55,119
visual studio and have a bunch of mark

00:46:52,970 --> 00:46:57,349
frameworks that can mock this stuff up

00:46:55,119 --> 00:46:58,700
then you could kind of you know unit

00:46:57,349 --> 00:46:59,960
test and debug your script in visual

00:46:58,700 --> 00:47:01,310
studio and then press a button and have

00:46:59,960 --> 00:47:04,130
it uploaded Second Life which would be

00:47:01,310 --> 00:47:07,880
great so how can you help we are going

00:47:04,130 --> 00:47:09,320
to publish the c-sharp API soon so I'd

00:47:07,880 --> 00:47:11,210
love you to have a look at that CTR baby

00:47:09,320 --> 00:47:13,880
i have seen shot programmers and just go

00:47:11,210 --> 00:47:15,680
mmm that smells a bit that's not good

00:47:13,880 --> 00:47:17,210
that should be something else all some

00:47:15,680 --> 00:47:18,380
of the questions i've asked here have a

00:47:17,210 --> 00:47:19,940
look at that tell us if we're going to

00:47:18,380 --> 00:47:22,040
do something wrong we're hopefully going

00:47:19,940 --> 00:47:24,740
to have a public beta this summer if we

00:47:22,040 --> 00:47:27,140
get all these questions are answered if

00:47:24,740 --> 00:47:28,310
you would like to as an open-source

00:47:27,140 --> 00:47:30,290
developer if you'd like to hack on

00:47:28,310 --> 00:47:32,270
second life more extensively we have a

00:47:30,290 --> 00:47:33,500
snow globe open source viewer that's

00:47:32,270 --> 00:47:36,020
been open source for the last year or so

00:47:33,500 --> 00:47:37,880
and that is our open source fork of the

00:47:36,020 --> 00:47:40,400
viewer which people can add features to

00:47:37,880 --> 00:47:42,080
and we kind of have very quick releases

00:47:40,400 --> 00:47:43,790
of snow globe and then those features

00:47:42,080 --> 00:47:45,170
eventually migrate into the main line

00:47:43,790 --> 00:47:46,220
view but it's kind of a it's a work

00:47:45,170 --> 00:47:48,380
place for people to do experimental

00:47:46,220 --> 00:47:50,000
features in so please play around with

00:47:48,380 --> 00:47:52,460
download snow globe build it play around

00:47:50,000 --> 00:47:53,830
with it and hopefully we can talk now or

00:47:52,460 --> 00:47:56,950
later because I'm running out of time

00:47:53,830 --> 00:47:59,599
but hopefully we can get some questions

00:47:56,950 --> 00:48:02,420
so thank you very much I'm Jim per brick

00:47:59,599 --> 00:48:05,080
in second life I'm Babbage linden I blog

00:48:02,420 --> 00:48:07,280
at linden lab calm I also blog at home

00:48:05,080 --> 00:48:09,380
we've got a couple of minutes so we got

00:48:07,280 --> 00:48:12,320
time for a demo I'm looking for Ruben

00:48:09,380 --> 00:48:13,880
now yeah well we're running 10 minutes

00:48:12,320 --> 00:48:18,369
behind schedule right service points

00:48:13,880 --> 00:48:21,650
yeah that fast all right it's not butter

00:48:18,369 --> 00:48:22,970
yeah so Tim it ok so let me do a quick

00:48:21,650 --> 00:48:24,770
let me do a quick demo show you where we

00:48:22,970 --> 00:48:27,470
are because it wouldn't be a proper for

00:48:24,770 --> 00:48:29,420
stone talk without a demo I did try this

00:48:27,470 --> 00:48:31,839
earlier and it mostly worked so let's

00:48:29,420 --> 00:48:31,839
give it a go on

00:48:34,040 --> 00:48:37,980
so if you try doing this at Microsoft it

00:48:36,450 --> 00:48:39,300
doesn't work because they have firewalls

00:48:37,980 --> 00:48:41,130
but this is kind of free and open source

00:48:39,300 --> 00:48:43,230
and everyone's got their got their

00:48:41,130 --> 00:48:46,559
networks hanging outside so I tried to

00:48:43,230 --> 00:48:48,569
early on it did work since the Second

00:48:46,559 --> 00:48:58,559
Life viewer I'm going to connect to the

00:48:48,569 --> 00:49:11,700
region that was last in and hopefully

00:48:58,559 --> 00:49:13,020
this will work looking promising so I

00:49:11,700 --> 00:49:14,880
was telling Miguel about this group I

00:49:13,020 --> 00:49:16,619
created yesterday I have a mano equals

00:49:14,880 --> 00:49:18,000
monkey group in second life which I have

00:49:16,619 --> 00:49:20,460
above my avatars head because if you

00:49:18,000 --> 00:49:24,030
talked in America as a disease so I'm

00:49:20,460 --> 00:49:26,280
doing my bit to try and to try and tell

00:49:24,030 --> 00:49:28,099
people what mono actually means so this

00:49:26,280 --> 00:49:31,800
is a second life this is my avatar and

00:49:28,099 --> 00:49:34,530
so this is a this is a slot machine in

00:49:31,800 --> 00:49:37,589
second life I've got a couple of scripts

00:49:34,530 --> 00:49:40,530
on it let's have a quick look at them so

00:49:37,589 --> 00:49:41,880
the first one is a twitter oauth client

00:49:40,530 --> 00:49:43,770
so this is kind of how you do libraries

00:49:41,880 --> 00:49:47,839
this is Alice L this is how you do

00:49:43,770 --> 00:49:50,549
libraries in second life currently and

00:49:47,839 --> 00:49:52,250
so you basically have to have you define

00:49:50,549 --> 00:49:54,660
a protocol so you define a bunch of

00:49:52,250 --> 00:49:58,530
integers and then you know I've got some

00:49:54,660 --> 00:50:01,079
helper functions there which you're

00:49:58,530 --> 00:50:03,980
going to build my message and then so

00:50:01,079 --> 00:50:06,030
when I wear my object gets created or

00:50:03,980 --> 00:50:08,970
wedged into the world I called the init

00:50:06,030 --> 00:50:13,380
function which sets up the OAuth

00:50:08,970 --> 00:50:16,020
consumer keys and and such and then and

00:50:13,380 --> 00:50:17,640
then when you touch the object it's

00:50:16,020 --> 00:50:19,920
going to send them a link message it's

00:50:17,640 --> 00:50:21,270
kind of like an internal message bus

00:50:19,920 --> 00:50:24,690
within the object so it's going to say

00:50:21,270 --> 00:50:26,490
tell this primitive their method message

00:50:24,690 --> 00:50:28,290
9990 3 which ought to find at top and

00:50:26,490 --> 00:50:29,640
I'm going to give it a string which is

00:50:28,290 --> 00:50:31,290
the message I want to send to Twitter

00:50:29,640 --> 00:50:34,140
and I'm going to give it a touch of

00:50:31,290 --> 00:50:36,530
which is the avatar so let's see if this

00:50:34,140 --> 00:50:40,700
works if you have twitter available

00:50:36,530 --> 00:50:40,700
follow SL tester

00:50:40,749 --> 00:50:48,529
alright so so that's all you're doing

00:50:45,349 --> 00:50:50,210
that I'm going to close this so that's

00:50:48,529 --> 00:50:52,039
the LSL script and it's sending

00:50:50,210 --> 00:50:55,069
effectively a message to the other

00:50:52,039 --> 00:50:59,210
script in the object now the other

00:50:55,069 --> 00:51:03,469
script in the object is a c-sharp script

00:50:59,210 --> 00:51:05,239
hey so and so this is the nice thing so

00:51:03,469 --> 00:51:06,829
the moat we've got no sandboxing this is

00:51:05,239 --> 00:51:09,559
an internal prototype so I can do things

00:51:06,829 --> 00:51:11,410
like use whatever I likes i'm using

00:51:09,559 --> 00:51:14,150
system using system.collections hooray

00:51:11,410 --> 00:51:16,670
i'm using system security or

00:51:14,150 --> 00:51:18,950
cryptography hooray i'm defining my own

00:51:16,670 --> 00:51:20,869
types for tokens and caches of tokens

00:51:18,950 --> 00:51:23,089
this is all awesome that you do what you

00:51:20,869 --> 00:51:24,380
just I mean you know if you ever script

00:51:23,089 --> 00:51:28,249
in earning a second life you'll be quite

00:51:24,380 --> 00:51:29,660
excited at this point so so I've got a

00:51:28,249 --> 00:51:34,239
load of code now there's one other bit

00:51:29,660 --> 00:51:34,239
of this code I want to show you which is

00:51:34,359 --> 00:51:38,839
tensile internal in taylor as you can

00:51:36,619 --> 00:51:40,460
see this is our wonderful ide please

00:51:38,839 --> 00:51:41,509
replace it with something else so this

00:51:40,460 --> 00:51:45,920
is the other bit of code that want to

00:51:41,509 --> 00:51:47,900
show you so this is just you know this

00:51:45,920 --> 00:51:50,690
is this is how to do h mark which you

00:51:47,900 --> 00:51:54,799
need to talk Oh off in.net you can just

00:51:50,690 --> 00:51:56,509
go you know I want a system text ascii

00:51:54,799 --> 00:51:59,509
encoding i want some bites from my

00:51:56,509 --> 00:52:01,640
string using that encoding i want to get

00:51:59,509 --> 00:52:04,190
a signature bytes which is my message in

00:52:01,640 --> 00:52:06,109
the same way then i want just an HR one

00:52:04,190 --> 00:52:08,450
object which is defined by the dotnet

00:52:06,109 --> 00:52:10,069
framework and then i want a bike array

00:52:08,450 --> 00:52:12,170
which is the hash of that message and i

00:52:10,069 --> 00:52:14,779
want you to compute the hash on those on

00:52:12,170 --> 00:52:18,640
this message using this key right so

00:52:14,779 --> 00:52:22,819
this is five lines of code and I

00:52:18,640 --> 00:52:26,529
borrowed it from the internet doing that

00:52:22,819 --> 00:52:29,390
in LSL took the whole LSL community

00:52:26,529 --> 00:52:32,420
about two months so I started trying to

00:52:29,390 --> 00:52:35,719
build this in LSL at Christmas and I

00:52:32,420 --> 00:52:37,039
spent three days on it and it turned for

00:52:35,719 --> 00:52:39,069
whatever reason it turns out you can't

00:52:37,039 --> 00:52:42,469
use our library functions for sure one

00:52:39,069 --> 00:52:43,670
it there's no byte array objects you

00:52:42,469 --> 00:52:45,739
have to store things in lists of

00:52:43,670 --> 00:52:47,329
integers you have to convert between

00:52:45,739 --> 00:52:50,029
strings and list of integers and back

00:52:47,329 --> 00:52:51,259
again and and base64 strings and so on I

00:52:50,029 --> 00:52:52,670
spent three days on it and they went

00:52:51,259 --> 00:52:53,930
right okay this is my Christmas holiday

00:52:52,670 --> 00:52:56,510
I am

00:52:53,930 --> 00:52:58,849
I am going to have a have a glass of

00:52:56,510 --> 00:53:01,160
wine and do something else so then I

00:52:58,849 --> 00:53:03,710
told the else I'll community you know

00:53:01,160 --> 00:53:05,030
the LSL scriptures when I got back to

00:53:03,710 --> 00:53:07,520
work said look I've tried to do this

00:53:05,030 --> 00:53:08,869
this is the code I've got to the whole

00:53:07,520 --> 00:53:10,849
la salle community's been hacking on it

00:53:08,869 --> 00:53:12,380
for the last two months and last week

00:53:10,849 --> 00:53:14,510
they got a version of it that worked

00:53:12,380 --> 00:53:16,700
right so so that's the difference here

00:53:14,510 --> 00:53:19,130
okay you get a load more functionality

00:53:16,700 --> 00:53:20,630
in c-sharp but you can go I want to

00:53:19,130 --> 00:53:22,730
build a noble's library you can find the

00:53:20,630 --> 00:53:25,210
code and you can write five lines of c

00:53:22,730 --> 00:53:28,280
sharp instead of having to re-implement

00:53:25,210 --> 00:53:30,619
char one in a language which is

00:53:28,280 --> 00:53:32,869
relatively slow and doesn't have byte

00:53:30,619 --> 00:53:34,790
arrays and then implement H Mac on top

00:53:32,869 --> 00:53:37,700
of shell one in an inner language that

00:53:34,790 --> 00:53:39,589
doesn't have doesn't have by trays and

00:53:37,700 --> 00:53:40,940
doesn't have any way of converting you

00:53:39,589 --> 00:53:43,490
know between strings and binary values

00:53:40,940 --> 00:53:45,319
it's absolutely it's just it's

00:53:43,490 --> 00:53:46,430
unbelievable that people have made the

00:53:45,319 --> 00:53:47,690
incredible things that they've made in

00:53:46,430 --> 00:53:48,500
second life with these tools and I'm

00:53:47,690 --> 00:53:50,359
really glad that we're going to give

00:53:48,500 --> 00:53:54,380
them seat up so anyway that's the code

00:53:50,359 --> 00:54:01,609
let's show you working ah so hopefully

00:53:54,380 --> 00:54:06,559
this will work so I'm going to touch a

00:54:01,609 --> 00:54:12,410
cell tester yeah all lowercase tester t

00:54:06,559 --> 00:54:13,640
that is a t SL tester so so I'm going to

00:54:12,410 --> 00:54:15,589
click on the i'm gonna click on the box

00:54:13,640 --> 00:54:17,329
the LSL script is going to get the touch

00:54:15,589 --> 00:54:19,430
event it's going to send a message to

00:54:17,329 --> 00:54:21,740
the c-sharp script the sea shell scripts

00:54:19,430 --> 00:54:23,180
going to go and talk to Twitter and it's

00:54:21,740 --> 00:54:25,819
kind of interesting because this box is

00:54:23,180 --> 00:54:28,490
acting as a HTTP client because it's

00:54:25,819 --> 00:54:30,260
talking to Twitter web services HTTP

00:54:28,490 --> 00:54:32,150
server because it's registering a URL

00:54:30,260 --> 00:54:35,359
that's been called back by Twitter and

00:54:32,150 --> 00:54:37,130
and an HTML browser because it's going

00:54:35,359 --> 00:54:38,809
to open up a page to say you know is

00:54:37,130 --> 00:54:40,400
this okay so it's quite funky scripts

00:54:38,809 --> 00:54:43,930
anyway but it's much much easier in

00:54:40,400 --> 00:54:46,339
seashell so I click on the box it says

00:54:43,930 --> 00:54:50,150
load this web page to authorize Twitter

00:54:46,339 --> 00:54:51,770
access so I open the webpage and you

00:54:50,150 --> 00:54:53,240
know you will know about OAuth the

00:54:51,770 --> 00:54:55,490
important thing here is that I'm Torchic

00:54:53,240 --> 00:54:56,960
talking to twitter com I'm not talking

00:54:55,490 --> 00:54:58,670
to my other cell script so I'm avoiding

00:54:56,960 --> 00:55:01,460
the password anti-pattern I'm not giving

00:54:58,670 --> 00:55:03,319
my twitter username and password to

00:55:01,460 --> 00:55:04,760
anybody apart from Twitter right that's

00:55:03,319 --> 00:55:06,470
the whole point people have built stuff

00:55:04,760 --> 00:55:07,859
that talks to Twitter from second life

00:55:06,470 --> 00:55:10,230
before

00:55:07,859 --> 00:55:12,210
but they've used the password

00:55:10,230 --> 00:55:16,380
anti-pattern which is not a good idea so

00:55:12,210 --> 00:55:18,329
there's my username there's my password

00:55:16,380 --> 00:55:20,819
so i can choose to deny or allow this

00:55:18,329 --> 00:55:23,359
thing so i'm going to allow it then

00:55:20,819 --> 00:55:25,079
twitter is going to call back my script

00:55:23,359 --> 00:55:27,539
redirecting me back to the application

00:55:25,079 --> 00:55:29,910
this lovely webpage today was produced

00:55:27,539 --> 00:55:31,170
by it by my LSL script and then it's

00:55:29,910 --> 00:55:35,130
asking me do you want to show the status

00:55:31,170 --> 00:55:36,960
update so if i say go to page barrage

00:55:35,130 --> 00:55:41,269
linden gave a demo at foster mins second

00:55:36,960 --> 00:55:41,269
life here hooray we've talked to Twitter

00:55:43,940 --> 00:55:48,210
so then so the other nice thing about

00:55:46,170 --> 00:55:50,430
this is if I click on this link that

00:55:48,210 --> 00:55:52,460
it's going to go to slow calm slow calm

00:55:50,430 --> 00:55:54,839
is the service we provide that gives you

00:55:52,460 --> 00:55:56,970
teleport locations into second life on

00:55:54,839 --> 00:56:06,089
the web so if I click on this link

00:55:56,970 --> 00:56:09,390
hopefully so anyway let's doesn't seems

00:56:06,089 --> 00:56:11,039
you're working so if you go to Twitter

00:56:09,390 --> 00:56:12,809
if you click on that link then it will

00:56:11,039 --> 00:56:14,749
give you a map of Second Life pointing

00:56:12,809 --> 00:56:16,739
back to the location I'm in second life

00:56:14,749 --> 00:56:18,480
which means you could come and join me

00:56:16,739 --> 00:56:19,799
alright so Twitter's real time so I can

00:56:18,480 --> 00:56:22,410
be doing some cool stuff in second life

00:56:19,799 --> 00:56:23,670
that the thing in second life can go hey

00:56:22,410 --> 00:56:24,869
your friend did something cool in second

00:56:23,670 --> 00:56:26,309
life and tell your friends on Twitter

00:56:24,869 --> 00:56:27,869
then you can click on a link and you can

00:56:26,309 --> 00:56:29,369
come back in second life say this is

00:56:27,869 --> 00:56:31,650
quite fun anyway but it's also a good

00:56:29,369 --> 00:56:34,319
demo of Y C sharp in second life is a

00:56:31,650 --> 00:56:37,739
good thing right now so already the demo

00:56:34,319 --> 00:56:40,160
worked any questions we have three

00:56:37,739 --> 00:56:40,160
minutes I think

00:56:42,170 --> 00:56:50,880
of course okay please send me an email

00:56:47,450 --> 00:56:52,830
hey that's one ? done any more question

00:56:50,880 --> 00:56:54,420
marks we can get rid of does this API

00:56:52,830 --> 00:56:56,700
look reasonable was it look terrible is

00:56:54,420 --> 00:56:57,840
there anything that's as a c-sharp

00:56:56,700 --> 00:57:00,060
developer is there anything that makes

00:56:57,840 --> 00:57:01,560
you go it's horrible please fix it right

00:57:00,060 --> 00:57:14,250
it was designed by Miguel so it may be

00:57:01,560 --> 00:57:20,970
terrible visualizes any open embrace

00:57:14,250 --> 00:57:24,150
data so that one vs so if we can support

00:57:20,970 --> 00:57:25,650
c-sharp three if we knew sessle's well

00:57:24,150 --> 00:57:28,290
I'd like to but we'd need to you settle

00:57:25,650 --> 00:57:30,360
so then we need to like I'll make sure

00:57:28,290 --> 00:57:36,000
that we documented yeah that'll become

00:57:30,360 --> 00:57:39,300
somebody very happy next week or you can

00:57:36,000 --> 00:57:44,640
you thank you in your life yeah this is

00:57:39,300 --> 00:57:46,740
mad enough already yeah yeah there we go

00:57:44,640 --> 00:57:48,180
I mean sasal looks tightly awesome and

00:57:46,740 --> 00:57:57,480
all the conversations are how is JB in

00:57:48,180 --> 00:58:08,310
really good so I mean well change it

00:57:57,480 --> 00:58:10,710
will be document so why why why is not

00:58:08,310 --> 00:58:13,339
everything running a model yet thank you

00:58:10,710 --> 00:58:16,630
mention that the most of the stuff is no

00:58:13,339 --> 00:58:18,979
mmm stuff still use your old legacy

00:58:16,630 --> 00:58:21,259
interpret hopefully yeah yeah I mean so

00:58:18,979 --> 00:58:24,650
the way we implemented it is we didn't

00:58:21,259 --> 00:58:27,109
just to be conservative we didn't

00:58:24,650 --> 00:58:29,660
automatically convert old scripts over

00:58:27,109 --> 00:58:31,729
to the new VM ok so if the script is

00:58:29,660 --> 00:58:33,079
running on the old vm and you wanted it

00:58:31,729 --> 00:58:35,479
to run faster or you were doing new

00:58:33,079 --> 00:58:36,349
version but you can open source code and

00:58:35,479 --> 00:58:38,900
you could say all it compile this

00:58:36,349 --> 00:58:40,099
tomorrow but we didn't automatically

00:58:38,900 --> 00:58:41,749
convert things with running a second

00:58:40,099 --> 00:58:42,920
local rebel so there's lots of there are

00:58:41,749 --> 00:58:44,509
lots of scripts the Second Life which

00:58:42,920 --> 00:58:48,049
are running tough on fire on the old vm

00:58:44,509 --> 00:58:51,859
and you know the people who are using

00:58:48,049 --> 00:58:54,440
them don't you know maybe can't edit

00:58:51,859 --> 00:58:55,819
them and so you know those those will

00:58:54,440 --> 00:58:57,680
continue running on ourselves we

00:58:55,819 --> 00:58:59,450
specifically made detroit's that only

00:58:57,680 --> 00:59:01,219
people who could open lipid source code

00:58:59,450 --> 00:59:02,869
and we're developing the script could

00:59:01,219 --> 00:59:05,269
convert these demonic because otherwise

00:59:02,869 --> 00:59:06,499
you'd like clearly you especially when

00:59:05,269 --> 00:59:08,239
we when we still have bugs and

00:59:06,499 --> 00:59:11,059
monitoring function you might have a car

00:59:08,239 --> 00:59:12,289
in second life it works fine you bought

00:59:11,059 --> 00:59:14,119
it for like you know five hundred

00:59:12,289 --> 00:59:15,380
million dollars you say all right

00:59:14,119 --> 00:59:16,609
convergent amanha I've heard that's a

00:59:15,380 --> 00:59:19,009
good vibe here you convert the mono any

00:59:16,609 --> 00:59:20,359
exploits and then your car broken and

00:59:19,009 --> 00:59:21,529
you go back from person who sold it and

00:59:20,359 --> 00:59:24,950
they say why the hell did you commence

00:59:21,529 --> 00:59:27,019
mono and so so we encourage people to

00:59:24,950 --> 00:59:28,729
create new versions of their objects

00:59:27,019 --> 00:59:32,029
running a monitoring sell the new

00:59:28,729 --> 00:59:32,869
commercials from our efficient but but

00:59:32,029 --> 00:59:34,460
you know that haven't happened

00:59:32,869 --> 00:59:35,599
everywhere and even where it has

00:59:34,460 --> 00:59:38,059
happened there are people who are

00:59:35,599 --> 00:59:40,210
happily using their own scripts from

00:59:38,059 --> 00:59:42,410
from

00:59:40,210 --> 00:59:44,330
so that you are like three year old

00:59:42,410 --> 00:59:46,640
scripts well there are some people who

00:59:44,330 --> 00:59:49,640
are using still using some some palace

00:59:46,640 --> 00:59:51,950
Oscars so if you because of the memory

00:59:49,640 --> 00:59:56,270
model there are some things where if

00:59:51,950 --> 00:59:59,180
you're using a hash genius list it uses

00:59:56,270 --> 01:00:01,190
up less memory if you do that run it on

00:59:59,180 --> 01:00:02,750
Palace up than if you run it on more

01:00:01,190 --> 01:00:05,780
than because more is using 32-bit

01:00:02,750 --> 01:00:08,660
pointers and 64-bit console whereas the

01:00:05,780 --> 01:00:10,700
internal pointers are 16 go there are

01:00:08,660 --> 01:00:13,130
some verra corner cases where al-assad

01:00:10,700 --> 01:00:15,170
is more efficient but generally mono is

01:00:13,130 --> 01:00:18,410
more efficient and that's generally

01:00:15,170 --> 01:00:19,940
because that each LSL script is the 16k

01:00:18,410 --> 01:00:22,460
plot so even if it's using to cave

01:00:19,940 --> 01:00:25,010
memory its allocating 16k memory from

01:00:22,460 --> 01:00:26,960
the signals just going to speak up from

01:00:25,010 --> 01:00:30,760
zero isn't presently working on a script

01:00:26,960 --> 01:00:30,760
edition has to go memory it would just

01:00:40,420 --> 01:00:46,510
I would like to allow people to use as

01:00:44,050 --> 01:00:48,640
much awesome policy shop and a lot of

01:00:46,510 --> 01:00:51,160
what I'm done a lot of what we're doing

01:00:48,640 --> 01:00:58,750
now is going to be defining what can we

01:00:51,160 --> 01:01:00,790
possibly where they so there will be

01:00:58,750 --> 01:01:02,770
there may be some things that we can't

01:01:00,790 --> 01:01:06,520
allow because of the way we rewrite

01:01:02,770 --> 01:01:08,470
sentence yes okay you'll probably not

01:01:06,520 --> 01:01:10,470
going to be able to go you know have

01:01:08,470 --> 01:01:13,570
this to the worker pool because

01:01:10,470 --> 01:01:14,650
instantly you've just created a lot of

01:01:13,570 --> 01:01:19,270
work somewhere that we should work

01:01:14,650 --> 01:01:21,160
traffic so some things right sorry and I

01:01:19,270 --> 01:01:23,520
don't stop you know thank you for going

01:01:21,160 --> 01:01:23,520

YouTube URL: https://www.youtube.com/watch?v=QGneU76KuSY


