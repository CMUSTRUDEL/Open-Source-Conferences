Title: Scaling Facebook with OpenSource tools
Publication date: 2011-12-22
Playlist: FOSDEM 2010
Description: 
	By David Recordon

This talk will give you a better idea of what it takes to scale Facebook.

From the day that Mark Zuckerberg started building Facebook in his Harvard dorm room in 2004 to today, the site has been built on common open source software such as Linux, Apache, MySQL, and PHP. Today Facebook reaches over 350 million people per month, is the largest PHP site in the World, and has released major pieces of our infrastructure as open source.

It's not possible to scale a site like Facebook simply by sharding your databases, rather we've developed and contributed to a series of open source infrastructure technologies. Some of these projects include Cassandra, Hive, Haystack, memcached, and Scribe, where each focuses on solving a specific problem with Thrift allowing them to communicate across languages. This talk will give you a better idea of what it takes to scale Facebook, a look into the infrastructure we use to do so, and dive into performance work we're focused on in order to scale PHP to over 350 billion page views per month.

FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:06,020 --> 00:00:11,190
they able to come and speak at FOSDEM

00:00:08,400 --> 00:00:12,509
about how much open-source we use inside

00:00:11,190 --> 00:00:14,099
a Facebook the open source

00:00:12,509 --> 00:00:16,440
infrastructure that we've created and

00:00:14,099 --> 00:00:18,750
released as well I sort of give a bit of

00:00:16,440 --> 00:00:20,850
an idea into what goes into scaling the

00:00:18,750 --> 00:00:22,890
site like Facebook so I'm David recordin

00:00:20,850 --> 00:00:26,369
I spend my time at Facebook focused on

00:00:22,890 --> 00:00:28,619
open source and web standards and my

00:00:26,369 --> 00:00:31,080
name's got my vicar and I work on

00:00:28,619 --> 00:00:33,329
anything open source that PHP related

00:00:31,080 --> 00:00:35,969
within Facebook so the recently released

00:00:33,329 --> 00:00:43,050
hip hop is a my little baby at the

00:00:35,969 --> 00:00:44,430
moment so first I'm just so first we

00:00:43,050 --> 00:00:46,079
should really talk about what do people

00:00:44,430 --> 00:00:48,329
do on Facebook so you can start getting

00:00:46,079 --> 00:00:52,410
the idea of the scaling challenges that

00:00:48,329 --> 00:00:54,870
we sort of have there for example 8

00:00:52,410 --> 00:00:58,559
billion minutes every day or spent on

00:00:54,870 --> 00:01:00,300
Facebook and it's over 3.5 billion

00:00:58,559 --> 00:01:03,650
pieces of content is shared every week

00:01:00,300 --> 00:01:06,960
be it photos writing on the walls

00:01:03,650 --> 00:01:09,090
talking and actually 2.5 billion photos

00:01:06,960 --> 00:01:11,130
every month or add it it actually makes

00:01:09,090 --> 00:01:15,030
us bigger than the biggest photo sharing

00:01:11,130 --> 00:01:16,920
website out there and there's over and

00:01:15,030 --> 00:01:19,229
it's more than just the actual website

00:01:16,920 --> 00:01:21,210
there's also the API and the platform

00:01:19,229 --> 00:01:24,990
that people build with Facebook there's

00:01:21,210 --> 00:01:27,479
a million users of that and so that's

00:01:24,990 --> 00:01:29,159
sort of an idea of some of the amount of

00:01:27,479 --> 00:01:30,570
content that's being shared on Facebook

00:01:29,159 --> 00:01:32,100
the amount of developers that are going

00:01:30,570 --> 00:01:34,439
and building with Facebook but Facebook

00:01:32,100 --> 00:01:36,329
is also incredibly international over

00:01:34,439 --> 00:01:38,159
70% of our traffic and our users come

00:01:36,329 --> 00:01:39,750
from outside of the United States we've

00:01:38,159 --> 00:01:42,450
gone and built a translation system

00:01:39,750 --> 00:01:44,610
which is focused on going and engaging

00:01:42,450 --> 00:01:46,680
the user base on translating the site I

00:01:44,610 --> 00:01:49,560
think we translated Facebook into French

00:01:46,680 --> 00:01:50,939
in just under 24 hours and so you can

00:01:49,560 --> 00:01:52,560
sort of see how we've gone to spread

00:01:50,939 --> 00:01:54,119
around the world which all has also

00:01:52,560 --> 00:01:56,130
presented a set of scaling challenge

00:01:54,119 --> 00:01:59,189
challenges in terms of how do we go and

00:01:56,130 --> 00:02:01,020
serve all this information quickly with

00:01:59,189 --> 00:02:03,600
only having a small number of data

00:02:01,020 --> 00:02:05,579
centers so when you think about scaling

00:02:03,600 --> 00:02:07,409
a traditional website you're able to go

00:02:05,579 --> 00:02:09,209
and sort of break up that information so

00:02:07,409 --> 00:02:10,560
if you have an email application that

00:02:09,209 --> 00:02:11,440
user is generally interacting with their

00:02:10,560 --> 00:02:13,030
own email there

00:02:11,440 --> 00:02:14,710
interacting with email from lots of

00:02:13,030 --> 00:02:16,420
different places so you're able to go

00:02:14,710 --> 00:02:18,970
and shard your databases you're able to

00:02:16,420 --> 00:02:20,680
go and break this apart by your users of

00:02:18,970 --> 00:02:22,210
saying Oh Bob's interacting with data

00:02:20,680 --> 00:02:23,800
here Felicia's interacting with data

00:02:22,210 --> 00:02:25,690
there and sort of continued just to

00:02:23,800 --> 00:02:27,700
break that apart as you have more users

00:02:25,690 --> 00:02:32,740
you add more databases and you scale

00:02:27,700 --> 00:02:33,700
from that perspective and so when

00:02:32,740 --> 00:02:35,380
Facebook started

00:02:33,700 --> 00:02:36,790
Mark Zuckerberg created it in his

00:02:35,380 --> 00:02:39,190
Harvard dorm room and it was sort of

00:02:36,790 --> 00:02:41,200
pretty similar in terms of all the users

00:02:39,190 --> 00:02:43,570
were on a Harvard server and then as

00:02:41,200 --> 00:02:45,880
more colleges were added you were able

00:02:43,570 --> 00:02:48,640
to go and shard your databases based on

00:02:45,880 --> 00:02:50,080
each college so students at Harvard

00:02:48,640 --> 00:02:51,550
would interact with other students at

00:02:50,080 --> 00:02:53,590
Harvard at Stanford they would interact

00:02:51,550 --> 00:02:55,630
with other students at Stanford but then

00:02:53,590 --> 00:02:57,210
in 2006 Facebook sort of opened this up

00:02:55,630 --> 00:02:59,710
so you could go and have friend

00:02:57,210 --> 00:03:01,420
relationships across these schools and

00:02:59,710 --> 00:03:02,710
pretty soon you got to the point where

00:03:01,420 --> 00:03:04,210
it didn't matter whether you're on the

00:03:02,710 --> 00:03:06,130
Harvard server you're on the Stanford

00:03:04,210 --> 00:03:07,990
server or you're on the University of

00:03:06,130 --> 00:03:09,580
Washington server but you were going and

00:03:07,990 --> 00:03:12,430
interacting with people from college

00:03:09,580 --> 00:03:14,080
campuses all over the country and so you

00:03:12,430 --> 00:03:15,280
might think oh well you could just go

00:03:14,080 --> 00:03:16,930
and scale Facebook from a country

00:03:15,280 --> 00:03:18,550
perspective put all of the users in the

00:03:16,930 --> 00:03:20,500
United States in one place put all the

00:03:18,550 --> 00:03:22,360
users in United Kingdom in another put

00:03:20,500 --> 00:03:24,220
another server for Belgium but pretty

00:03:22,360 --> 00:03:26,170
quickly Facebook got to the point where

00:03:24,220 --> 00:03:28,360
you couldn't even do that and so this is

00:03:26,170 --> 00:03:30,100
a visualization showing live friend

00:03:28,360 --> 00:03:32,620
requests around the world from a few

00:03:30,100 --> 00:03:34,450
years ago really going and illustrating

00:03:32,620 --> 00:03:36,010
that point then on Facebook everyone is

00:03:34,450 --> 00:03:38,110
connecting to people all over the world

00:03:36,010 --> 00:03:41,320
it's not a site where you can go and

00:03:38,110 --> 00:03:43,030
then scale broken up based on where your

00:03:41,320 --> 00:03:47,050
users are or just what information

00:03:43,030 --> 00:03:48,760
they're interacting with and so this is

00:03:47,050 --> 00:03:50,440
really that idea of that to go and

00:03:48,760 --> 00:03:51,850
render any page on Facebook we're

00:03:50,440 --> 00:03:54,040
pulling data from many different places

00:03:51,850 --> 00:03:55,900
on average a user has about a hundred

00:03:54,040 --> 00:03:57,730
and fifty different friends and so to go

00:03:55,900 --> 00:03:59,170
and render a page like that we're going

00:03:57,730 --> 00:04:01,300
and talking to all sorts of different

00:03:59,170 --> 00:04:02,890
pieces of our infrastructure without

00:04:01,300 --> 00:04:07,600
being able to go and sort of separate it

00:04:02,890 --> 00:04:09,459
apart by user so if we take like a

00:04:07,600 --> 00:04:12,940
standard page on Facebook say the

00:04:09,459 --> 00:04:15,550
newsfeed and on average person will have

00:04:12,940 --> 00:04:18,280
about 150 friends so to construct that

00:04:15,550 --> 00:04:21,010
we need to go grab data from 150

00:04:18,280 --> 00:04:23,710
different friends and that's a split

00:04:21,010 --> 00:04:24,540
across multiple servers so we have to

00:04:23,710 --> 00:04:26,640
that in like

00:04:24,540 --> 00:04:28,610
less than milliseconds it has to be done

00:04:26,640 --> 00:04:32,070
in so we go do that grab all the data

00:04:28,610 --> 00:04:33,480
but it's not just your direct friends if

00:04:32,070 --> 00:04:36,060
other friend their friends have

00:04:33,480 --> 00:04:37,410
commented on their photos or the

00:04:36,060 --> 00:04:39,450
comments or any of their status updates

00:04:37,410 --> 00:04:40,770
that has to be pulled as well so we're

00:04:39,450 --> 00:04:42,780
pulling from tens of thousands of

00:04:40,770 --> 00:04:46,800
different sources oh just to render that

00:04:42,780 --> 00:04:47,940
one single page and it's also that every

00:04:46,800 --> 00:04:49,470
single page that we go and render is

00:04:47,940 --> 00:04:51,420
different not just per person but at

00:04:49,470 --> 00:04:53,010
what time they saw it but the graph has

00:04:51,420 --> 00:04:54,600
also been evolving I mean Facebook has

00:04:53,010 --> 00:04:56,280
always been based on this idea of that

00:04:54,600 --> 00:04:58,170
you're connected to other people and to

00:04:56,280 --> 00:04:59,310
other things you have relationships and

00:04:58,170 --> 00:05:01,200
so from a math perspective we think

00:04:59,310 --> 00:05:03,240
about it as a graph so we have nodes

00:05:01,200 --> 00:05:04,740
which are the people or the things and

00:05:03,240 --> 00:05:06,720
then we have edges which represent the

00:05:04,740 --> 00:05:08,670
relationships between them but we've

00:05:06,720 --> 00:05:11,490
also seen Facebook grow to no longer

00:05:08,670 --> 00:05:14,070
just be relationships between people but

00:05:11,490 --> 00:05:16,080
you might become a fan of a company or a

00:05:14,070 --> 00:05:17,970
person and it's a very different scaling

00:05:16,080 --> 00:05:20,070
challenge if going and connecting a

00:05:17,970 --> 00:05:22,470
person to a few hundred other people

00:05:20,070 --> 00:05:24,150
versus going and serving Michael

00:05:22,470 --> 00:05:26,430
Jackson's fan page which has over ten

00:05:24,150 --> 00:05:27,810
million people connected to it so that's

00:05:26,430 --> 00:05:31,700
also presented some different scaling

00:05:27,810 --> 00:05:31,700
challenges as the sites continue to grow

00:05:32,270 --> 00:05:38,550
so this is Facebook's architecture our

00:05:35,090 --> 00:05:39,990
architecture at high level and that more

00:05:38,550 --> 00:05:42,600
or less looks like this there's a load

00:05:39,990 --> 00:05:44,070
balancer on top and requests comment

00:05:42,600 --> 00:05:46,470
there and the requests are spread

00:05:44,070 --> 00:05:48,510
amongst a pillar of web servers and then

00:05:46,470 --> 00:05:50,700
these web servers will either use one of

00:05:48,510 --> 00:05:53,130
our services to fetch data or it'll fall

00:05:50,700 --> 00:05:55,890
into memcache which is our in-memory

00:05:53,130 --> 00:05:58,020
fast database X data access before

00:05:55,890 --> 00:06:00,780
eventually falling back to the database

00:05:58,020 --> 00:06:02,220
and I mean this looks like pretty much

00:06:00,780 --> 00:06:03,450
any website that you're going in

00:06:02,220 --> 00:06:05,400
building today in terms of you have your

00:06:03,450 --> 00:06:07,260
web servers you have your PHP stack you

00:06:05,400 --> 00:06:09,210
have your services so at a high level

00:06:07,260 --> 00:06:10,710
Facebook isn't architected very

00:06:09,210 --> 00:06:14,190
differently than any other site that you

00:06:10,710 --> 00:06:16,460
would go and build so first we're going

00:06:14,190 --> 00:06:18,840
to look at the web server stack are

00:06:16,460 --> 00:06:21,630
essentially what PHP is built on and

00:06:18,840 --> 00:06:25,110
that's a Facebook Facebook what Facebook

00:06:21,630 --> 00:06:26,940
is built on which is PHP and we like PHP

00:06:25,110 --> 00:06:30,210
for a number of reasons the first being

00:06:26,940 --> 00:06:32,370
it's simple to learn there's not very

00:06:30,210 --> 00:06:34,740
much barrier to entry to learn PHP so if

00:06:32,370 --> 00:06:36,660
we hire new developers then we can teach

00:06:34,740 --> 00:06:37,110
them PHP relatively quickly because the

00:06:36,660 --> 00:06:42,150
center

00:06:37,110 --> 00:06:44,129
is very similar to that of see and it's

00:06:42,150 --> 00:06:45,810
an interpreted language so if you want

00:06:44,129 --> 00:06:48,060
to make changes to you make your changes

00:06:45,810 --> 00:06:49,800
you apply them or save them and you can

00:06:48,060 --> 00:06:51,810
see them live it's not compelling you're

00:06:49,800 --> 00:06:54,240
not waiting five 10 15 minutes for

00:06:51,810 --> 00:06:56,430
things to compile so you can see it and

00:06:54,240 --> 00:06:59,159
one of the nice things about PHP is the

00:06:56,430 --> 00:07:01,110
Hubbell world example the whole world

00:06:59,159 --> 00:07:03,300
example and PHP doesn't actually require

00:07:01,110 --> 00:07:05,280
any opening times or closing tags

00:07:03,300 --> 00:07:08,490
because PHP itself is a templating

00:07:05,280 --> 00:07:10,500
language so this is sort of the nice

00:07:08,490 --> 00:07:12,659
things that make pH be good for Facebook

00:07:10,500 --> 00:07:15,270
since we have to develop fast and serve

00:07:12,659 --> 00:07:20,219
we move fast so we can't spend time

00:07:15,270 --> 00:07:22,080
waiting for other languages so there's a

00:07:20,219 --> 00:07:23,879
couple of things that are peach-pit

00:07:22,080 --> 00:07:26,580
problematic for facebook the first being

00:07:23,879 --> 00:07:28,020
high CPU usage because we do a lot of

00:07:26,580 --> 00:07:29,879
data assembly pulling from multiple

00:07:28,020 --> 00:07:32,400
sources and actually building it within

00:07:29,879 --> 00:07:34,050
the application server then we actually

00:07:32,400 --> 00:07:36,419
spend a lot of time doing that with CPU

00:07:34,050 --> 00:07:38,550
we use a lot of CPU for that as well as

00:07:36,419 --> 00:07:40,560
memory usage memory is quite high

00:07:38,550 --> 00:07:42,599
because of the way PHP works it's sort

00:07:40,560 --> 00:07:44,130
of loosely typed which is well one of

00:07:42,599 --> 00:07:45,449
its benefits it also uses a lot of

00:07:44,130 --> 00:07:47,279
memory for each variable because it has

00:07:45,449 --> 00:07:50,759
to represent a collection of six types

00:07:47,279 --> 00:07:53,759
so every variable gets 140 bytes of

00:07:50,759 --> 00:07:56,669
memory allocated for it we also

00:07:53,759 --> 00:07:58,139
potentially like to use a logic between

00:07:56,669 --> 00:08:01,199
multiple services we have things written

00:07:58,139 --> 00:08:04,020
in C++ and Python and Erlang as well as

00:08:01,199 --> 00:08:05,639
PHP so if it's just written in solder in

00:08:04,020 --> 00:08:09,139
PHP we're gonna have to duplicate that

00:08:05,639 --> 00:08:11,099
logic across multiple services and

00:08:09,139 --> 00:08:12,449
finally if you want to sort of move this

00:08:11,099 --> 00:08:14,969
into PHP extension to get the speed

00:08:12,449 --> 00:08:16,020
benefit then it's sort of hard to write

00:08:14,969 --> 00:08:19,529
because the macros aren't well

00:08:16,020 --> 00:08:21,210
documented for the Zend engine so to

00:08:19,529 --> 00:08:22,319
solve these issues especially the first

00:08:21,210 --> 00:08:25,500
two we come up with this thing called

00:08:22,319 --> 00:08:27,599
hip hop and hip hop for PHP was this

00:08:25,500 --> 00:08:29,699
thing that we sort of start announced

00:08:27,599 --> 00:08:32,940
last Tuesday and tend to open source

00:08:29,699 --> 00:08:35,760
quite soon and what it does is it you

00:08:32,940 --> 00:08:37,260
point hip hop at a girl a platoon

00:08:35,760 --> 00:08:39,329
framework and what it will do is will

00:08:37,260 --> 00:08:43,409
translate your PHP and to how they

00:08:39,329 --> 00:08:45,360
optimize C++ code and then from that we

00:08:43,409 --> 00:08:47,089
can just pass into the normal G plus

00:08:45,360 --> 00:08:48,990
plus compiler and it'll just

00:08:47,089 --> 00:08:50,100
self-contained binary with the web

00:08:48,990 --> 00:08:51,600
server

00:08:50,100 --> 00:08:56,279
your application and all the library

00:08:51,600 --> 00:08:57,690
logics built-in and hip-hop's really

00:08:56,279 --> 00:08:59,790
designed to give us sort of the best of

00:08:57,690 --> 00:09:01,680
both worlds in terms of the speed that

00:08:59,790 --> 00:09:03,209
we can go and move with an interpreted

00:09:01,680 --> 00:09:05,730
language so that we can go and make

00:09:03,209 --> 00:09:07,319
changes really quickly from a

00:09:05,730 --> 00:09:08,639
development perspective but then also

00:09:07,319 --> 00:09:11,370
the speed from a performance perspective

00:09:08,639 --> 00:09:12,630
of a language like C++ as one of the

00:09:11,370 --> 00:09:14,430
ways that we think about the different

00:09:12,630 --> 00:09:16,529
types of PHP code you'll find is sort of

00:09:14,430 --> 00:09:20,100
this breakdown between the common stuff

00:09:16,529 --> 00:09:22,709
of like if-else or the magic in terms of

00:09:20,100 --> 00:09:25,620
going and doing like variable in terms

00:09:22,709 --> 00:09:27,630
like evaluation and like dynamic

00:09:25,620 --> 00:09:29,670
variable and function assignment and so

00:09:27,630 --> 00:09:31,769
when you look at a PHP code base you

00:09:29,670 --> 00:09:33,120
actually generally find much more of the

00:09:31,769 --> 00:09:35,310
more mundane things

00:09:33,120 --> 00:09:36,569
it's very rare at least inside of our

00:09:35,310 --> 00:09:39,319
code base that we use things like a

00:09:36,569 --> 00:09:41,399
vowel or some of those other

00:09:39,319 --> 00:09:43,019
functionality and so this is some of

00:09:41,399 --> 00:09:44,670
what makes hip-hop work really well is

00:09:43,019 --> 00:09:47,100
that we can go and take the majority of

00:09:44,670 --> 00:09:48,660
our code base and greatly speed it up in

00:09:47,100 --> 00:09:50,610
terms of going and looking at static

00:09:48,660 --> 00:09:51,839
function calls and stack variables and

00:09:50,610 --> 00:09:53,880
then taking advantage of a lot of the

00:09:51,839 --> 00:09:56,550
optimizations that already exists inside

00:09:53,880 --> 00:09:57,839
of G plus plus the stuff that's magic is

00:09:56,550 --> 00:09:59,189
a little bit harder it's not going to

00:09:57,839 --> 00:10:00,630
give us as much of a performance

00:09:59,189 --> 00:10:02,399
optimization won't give you as much of a

00:10:00,630 --> 00:10:05,839
performance optimization but there's

00:10:02,399 --> 00:10:05,839
definitely some benefit there as well so

00:10:06,110 --> 00:10:10,709
roughly how hip-hop works as it performs

00:10:08,939 --> 00:10:13,829
a static analysis on your entire code

00:10:10,709 --> 00:10:15,180
base looking to see what function what

00:10:13,829 --> 00:10:17,459
class is declared where and what

00:10:15,180 --> 00:10:18,569
variables are declared and from that

00:10:17,459 --> 00:10:21,389
thing goes into our type inference

00:10:18,569 --> 00:10:23,970
engine which looks at the data types for

00:10:21,389 --> 00:10:25,560
each of the variables so if something

00:10:23,970 --> 00:10:27,209
was an integer it was always the same as

00:10:25,560 --> 00:10:29,250
an insurance as always acted like it was

00:10:27,209 --> 00:10:30,569
an integer then at that point we can

00:10:29,250 --> 00:10:32,160
just say well this is always going to be

00:10:30,569 --> 00:10:34,380
an integer so let's generate just a

00:10:32,160 --> 00:10:37,980
straight integer rather than our variant

00:10:34,380 --> 00:10:39,839
type so we required support all right

00:10:37,980 --> 00:10:42,240
this is for all available so integers

00:10:39,839 --> 00:10:44,880
map - of integers and C++ strings Maps

00:10:42,240 --> 00:10:47,370
strings arrays map to the STL like the

00:10:44,880 --> 00:10:50,040
standard array types and classes mapped

00:10:47,370 --> 00:10:52,350
to actual C++ classes and it's only when

00:10:50,040 --> 00:10:54,180
we have a bit of the magic stuff orbán

00:10:52,350 --> 00:10:55,439
types are indeed a favorite variables

00:10:54,180 --> 00:10:57,509
and integers then it becomes a string

00:10:55,439 --> 00:11:00,750
then back to an integer again that will

00:10:57,509 --> 00:11:02,620
use the variant type and then eventually

00:11:00,750 --> 00:11:04,780
go to the chord generation

00:11:02,620 --> 00:11:07,300
and the cogeneration is what it's actual

00:11:04,780 --> 00:11:11,350
C++ files and the transformation process

00:11:07,300 --> 00:11:12,790
for this looks a little like this so it

00:11:11,350 --> 00:11:15,040
goes through the parser that's very

00:11:12,790 --> 00:11:17,230
similar to the standard PHP parser and

00:11:15,040 --> 00:11:19,360
then former static analysis on it and

00:11:17,230 --> 00:11:20,740
then a pre optimizer and the pre

00:11:19,360 --> 00:11:23,110
optimizer tries to remove things like

00:11:20,740 --> 00:11:26,650
dead code branches that won't be used or

00:11:23,110 --> 00:11:28,030
change change some of the semantics when

00:11:26,650 --> 00:11:30,430
it knows that the executions could just

00:11:28,030 --> 00:11:33,940
the exact same code regardless of the

00:11:30,430 --> 00:11:35,380
order so see you're doing a post

00:11:33,940 --> 00:11:37,420
optimization it's actually easier to do

00:11:35,380 --> 00:11:38,830
pre Inc sorry post increment is actually

00:11:37,420 --> 00:11:39,760
easier to do pre increment because then

00:11:38,830 --> 00:11:42,070
you don't have to use this third

00:11:39,760 --> 00:11:44,020
variable to store the result so just

00:11:42,070 --> 00:11:45,940
like little optimizations like that for

00:11:44,020 --> 00:11:47,080
exams the type inference engine and

00:11:45,940 --> 00:11:48,460
eventually there's more post

00:11:47,080 --> 00:11:51,400
optimization to remove any more dead

00:11:48,460 --> 00:11:53,800
codes they could find and it's just

00:11:51,400 --> 00:11:56,830
cogeneration and then compiling it's

00:11:53,800 --> 00:12:00,130
normal so we have some plans for a hip

00:11:56,830 --> 00:12:02,770
hop over the next next year and at the

00:12:00,130 --> 00:12:04,420
moment it only supports PHP 5.2 so we

00:12:02,770 --> 00:12:06,460
intend to get that back up to speed with

00:12:04,420 --> 00:12:07,540
the latest five to release before

00:12:06,460 --> 00:12:13,000
eventually having some of the new

00:12:07,540 --> 00:12:14,350
features from PHP 5.3 and there were a

00:12:13,000 --> 00:12:16,180
few things that we're thinking about

00:12:14,350 --> 00:12:17,800
that aren't currently planned for PHP

00:12:16,180 --> 00:12:20,920
but we want to sort of make sure it gets

00:12:17,800 --> 00:12:23,350
in there as well as in hip hop so one of

00:12:20,920 --> 00:12:25,930
the things we're sort of dedicated to is

00:12:23,350 --> 00:12:27,010
making sure that the features in PHP in

00:12:25,930 --> 00:12:28,420
the future and hip hop don't

00:12:27,010 --> 00:12:31,200
differentiate too much so you can

00:12:28,420 --> 00:12:33,460
actually use either we plan to add

00:12:31,200 --> 00:12:35,230
multi-threading support through a

00:12:33,460 --> 00:12:36,880
synchronous function execution so you

00:12:35,230 --> 00:12:39,400
can execute multiple functions at the

00:12:36,880 --> 00:12:40,630
same time and eventually support for a

00:12:39,400 --> 00:12:43,900
patch you will come and probably be a

00:12:40,630 --> 00:12:45,310
fast CGI and hopefully from that point

00:12:43,900 --> 00:12:47,740
on we start to encourage people other

00:12:45,310 --> 00:12:48,940
say to Facebook to sort of use hip hop

00:12:47,740 --> 00:12:52,420
we're sort of eager to create a

00:12:48,940 --> 00:12:54,130
community around that yeah

00:12:52,420 --> 00:12:56,320
and so we announced hip hop a little bit

00:12:54,130 --> 00:12:58,030
earlier this week we've been working on

00:12:56,320 --> 00:12:59,230
continuing to release that even a few

00:12:58,030 --> 00:13:01,960
hours before we got here

00:12:59,230 --> 00:13:04,750
and so definitely look for that on

00:13:01,960 --> 00:13:06,310
Facebook's github account as well so we

00:13:04,750 --> 00:13:08,230
want to take a look at our services

00:13:06,310 --> 00:13:09,940
layer a little bit and give you a better

00:13:08,230 --> 00:13:12,070
idea of a few of the different back-end

00:13:09,940 --> 00:13:14,260
services that we both use and have

00:13:12,070 --> 00:13:16,490
created to scale different aspects of

00:13:14,260 --> 00:13:18,440
Facebook and so from a philosophical

00:13:16,490 --> 00:13:20,330
perspective we sort of think about this

00:13:18,440 --> 00:13:22,580
question of when do we need a service so

00:13:20,330 --> 00:13:25,520
is it something that needs to be really

00:13:22,580 --> 00:13:27,020
quick is it something that currently has

00:13:25,520 --> 00:13:29,180
a big overhead in terms of our

00:13:27,020 --> 00:13:31,850
application layer around deployment and

00:13:29,180 --> 00:13:33,529
maintenance is it yet and do we want yet

00:13:31,850 --> 00:13:35,089
another failure point from our

00:13:33,529 --> 00:13:36,830
infrastructure sort of balancing some of

00:13:35,089 --> 00:13:39,380
those trade-offs and we try to go and

00:13:36,830 --> 00:13:41,360
take advantage of as many bits of common

00:13:39,380 --> 00:13:42,620
functionality as we can between all

00:13:41,360 --> 00:13:44,450
these different services and that's

00:13:42,620 --> 00:13:46,040
another reason why hip hop is really

00:13:44,450 --> 00:13:48,200
interesting to us in terms of being able

00:13:46,040 --> 00:13:51,980
to go and reuse logic we've already

00:13:48,200 --> 00:13:53,180
written in PHP compiled into C++ and be

00:13:51,980 --> 00:13:54,830
able to pull that into our back-end

00:13:53,180 --> 00:13:57,050
services which are written in a variety

00:13:54,830 --> 00:13:59,630
of languages and so this is another

00:13:57,050 --> 00:14:01,370
piece from full philosophy perspective

00:13:59,630 --> 00:14:03,649
is that we don't go and choose a single

00:14:01,370 --> 00:14:05,660
language when we're going and building

00:14:03,649 --> 00:14:07,880
out facebook infrastructure our entire

00:14:05,660 --> 00:14:09,589
web server infrastructure is PHP but we

00:14:07,880 --> 00:14:10,630
use many different languages from a

00:14:09,589 --> 00:14:12,080
back-end infrastructure perspective

00:14:10,630 --> 00:14:13,940
depending on what we're building

00:14:12,080 --> 00:14:15,520
depending on who's involved depending on

00:14:13,940 --> 00:14:17,450
when and some of the different

00:14:15,520 --> 00:14:19,270
characteristics of these languages for

00:14:17,450 --> 00:14:21,380
what we're doing

00:14:19,270 --> 00:14:23,240
so to communicate between all the

00:14:21,380 --> 00:14:26,149
different services that we have we use

00:14:23,240 --> 00:14:29,089
this technology called drift & Stift is

00:14:26,149 --> 00:14:32,930
something that we open sourced and it's

00:14:29,089 --> 00:14:35,420
essentially an RPC server the low

00:14:32,930 --> 00:14:38,060
generate it's an RPC server and you

00:14:35,420 --> 00:14:40,670
provide it with a language agnostic RPC

00:14:38,060 --> 00:14:42,020
server so you provide it with fail of

00:14:40,670 --> 00:14:44,570
your thrift service and it's able to

00:14:42,020 --> 00:14:47,990
generate code for you in C++ PHP or

00:14:44,570 --> 00:14:49,550
Python Java Ruby so it generates all of

00:14:47,990 --> 00:14:51,110
these for you and it also deals with

00:14:49,550 --> 00:14:52,940
communication between each of the

00:14:51,110 --> 00:14:55,190
services as well as is the actual

00:14:52,940 --> 00:14:57,200
structure so the structure of the

00:14:55,190 --> 00:14:58,730
communication so LLL do the serializing

00:14:57,200 --> 00:15:01,070
and the underutilizing of the data to

00:14:58,730 --> 00:15:03,079
pass it along the wire so to speak and

00:15:01,070 --> 00:15:06,260
the wire protocols it supports is there

00:15:03,079 --> 00:15:08,779
like socket the fail transport and then

00:15:06,260 --> 00:15:11,750
just standard in memory buffers so you

00:15:08,779 --> 00:15:14,839
can write something in C++ serialize it

00:15:11,750 --> 00:15:16,579
with drift and then talk to a PHP thrift

00:15:14,839 --> 00:15:18,170
server and then it'll unseal eyes for

00:15:16,579 --> 00:15:19,790
you so it's a sort of how we pass data

00:15:18,170 --> 00:15:24,920
amongst our different services at

00:15:19,790 --> 00:15:27,050
Facebook and thrift is actually in the

00:15:24,920 --> 00:15:28,820
Apache Incubator so anyway I can go

00:15:27,050 --> 00:15:30,470
download it and use it and that's one of

00:15:28,820 --> 00:15:32,090
the things that we gave back to

00:15:30,470 --> 00:15:34,580
the open-source community I'm not

00:15:32,090 --> 00:15:36,440
exactly sure when thrift is also used in

00:15:34,580 --> 00:15:38,420
a variety different projects both I

00:15:36,440 --> 00:15:40,460
think companies like recapture making

00:15:38,420 --> 00:15:43,610
use of it as well as other projects so

00:15:40,460 --> 00:15:46,730
like thrift is I'm used by some of some

00:15:43,610 --> 00:15:47,690
bits of Hadoop as well so one of the

00:15:46,730 --> 00:15:49,880
other services that we want to talk

00:15:47,690 --> 00:15:56,420
about is logging how many people here

00:15:49,880 --> 00:15:58,520
have used syslog yeah we did - and I

00:15:56,420 --> 00:16:01,510
mean so I think this is one of those

00:15:58,520 --> 00:16:04,730
themes of like we we always start with

00:16:01,510 --> 00:16:06,140
what is looking at outside of Facebook

00:16:04,730 --> 00:16:07,820
what is either a really great open

00:16:06,140 --> 00:16:10,160
source solution or what is a good

00:16:07,820 --> 00:16:12,170
commercial solution and then ultimately

00:16:10,160 --> 00:16:14,390
going in building on top of it and so we

00:16:12,170 --> 00:16:16,490
were using syslog for logging all of our

00:16:14,390 --> 00:16:18,860
data and as you saw behind me the

00:16:16,490 --> 00:16:20,390
logging servers sort of exploded because

00:16:18,860 --> 00:16:23,060
we were going and logging so much

00:16:20,390 --> 00:16:24,770
information from all these pageviews at

00:16:23,060 --> 00:16:27,760
this point I think we do about 400

00:16:24,770 --> 00:16:31,460
billion page views per month on Facebook

00:16:27,760 --> 00:16:33,740
and we log about 25 terabytes a day so

00:16:31,460 --> 00:16:35,570
we went and created scribe and the basic

00:16:33,740 --> 00:16:37,250
idea behind scribe is that we're able to

00:16:35,570 --> 00:16:39,290
go and sort of break up this funnel from

00:16:37,250 --> 00:16:41,570
a logging perspective so you'll have

00:16:39,290 --> 00:16:43,610
this information coming from our web

00:16:41,570 --> 00:16:45,410
servers are coming from other back-end

00:16:43,610 --> 00:16:47,720
services that will get routed into

00:16:45,410 --> 00:16:49,370
scribe servers which sort of work at

00:16:47,720 --> 00:16:50,720
funneling it down and condensing it and

00:16:49,370 --> 00:16:52,610
then we ultimately go and store this

00:16:50,720 --> 00:16:54,440
information inside of our Hadoop and

00:16:52,610 --> 00:16:56,800
hive cluster so we can go and look at it

00:16:54,440 --> 00:16:58,580
from an analysis perspective later on

00:16:56,800 --> 00:17:01,460
and subscribe is one of those

00:16:58,580 --> 00:17:03,860
technologies where logging is a common

00:17:01,460 --> 00:17:05,690
problem everyone goes and it has to have

00:17:03,860 --> 00:17:08,540
logging inside of any site that they

00:17:05,690 --> 00:17:10,370
build and we got to the point where we

00:17:08,540 --> 00:17:11,810
just weren't able to work within the

00:17:10,370 --> 00:17:13,970
scale of some of the other solutions

00:17:11,810 --> 00:17:16,130
that were there so we also open-source

00:17:13,970 --> 00:17:17,600
describe it's also being used by Twitter

00:17:16,130 --> 00:17:19,550
right now and they're contributing back

00:17:17,600 --> 00:17:21,199
to the project and I think it's actually

00:17:19,550 --> 00:17:24,110
one of our projects that sort of the

00:17:21,199 --> 00:17:26,660
least known about but compared to sort

00:17:24,110 --> 00:17:31,250
of what it does and how much of a common

00:17:26,660 --> 00:17:33,440
problem it is so one of the more popular

00:17:31,250 --> 00:17:36,170
things today on Facebook is that her to

00:17:33,440 --> 00:17:37,820
upload photos and at the moment there's

00:17:36,170 --> 00:17:39,830
40 billion photos that have been

00:17:37,820 --> 00:17:41,330
actually uploaded to Facebook and we

00:17:39,830 --> 00:17:43,010
store that in four different resolutions

00:17:41,330 --> 00:17:43,460
for each of the area so there's the

00:17:43,010 --> 00:17:45,110
thumbnail

00:17:43,460 --> 00:17:47,990
for the wall there's a thumbnail within

00:17:45,110 --> 00:17:49,940
the actual gallery overview then there's

00:17:47,990 --> 00:17:51,730
the actual photo that you look at and

00:17:49,940 --> 00:17:54,919
there's a fourth one as well because

00:17:51,730 --> 00:17:57,020
original larger size is kept so we store

00:17:54,919 --> 00:18:00,169
four different photos for different

00:17:57,020 --> 00:18:04,220
variants for every single photo and we

00:18:00,169 --> 00:18:06,559
have to let me serve that it's 1.2

00:18:04,220 --> 00:18:08,510
million photos or seconds or served so

00:18:06,559 --> 00:18:10,100
that's how many photos were serving it

00:18:08,510 --> 00:18:11,779
every second that people browse around

00:18:10,100 --> 00:18:14,000
the site because you've seen the

00:18:11,779 --> 00:18:19,370
Facebook homepage it's pretty photo

00:18:14,000 --> 00:18:21,470
intensive okay and one of the problems

00:18:19,370 --> 00:18:24,169
that our how you would normally try and

00:18:21,470 --> 00:18:25,970
scale photos over ms is so largely based

00:18:24,169 --> 00:18:28,460
sort of like an NFS share so you set up

00:18:25,970 --> 00:18:30,230
a central NFS share and then multiple

00:18:28,460 --> 00:18:32,450
servers we then read and write to that

00:18:30,230 --> 00:18:34,809
NFS share and you would use HTTP just to

00:18:32,450 --> 00:18:36,860
serve the photos directly from NFS and

00:18:34,809 --> 00:18:38,960
the first thing we actually did was a

00:18:36,860 --> 00:18:40,070
commercial solution because you have to

00:18:38,960 --> 00:18:42,980
choose the battles that you're going to

00:18:40,070 --> 00:18:44,659
fight with and what will take more time

00:18:42,980 --> 00:18:47,270
to do so we went for the easy solution

00:18:44,659 --> 00:18:50,059
where just to get commercial vendors to

00:18:47,270 --> 00:18:52,669
come in and get them set up NFS and use

00:18:50,059 --> 00:18:54,200
their technology but unfortunately it

00:18:52,669 --> 00:18:56,120
just didn't scale and the reason it

00:18:54,200 --> 00:18:58,549
didn't scale wasn't because the

00:18:56,120 --> 00:19:00,440
commercial technology was bad we just

00:18:58,549 --> 00:19:02,390
had so much i OB just trying to read so

00:19:00,440 --> 00:19:04,610
much and write so much that it just

00:19:02,390 --> 00:19:06,950
simply didn't work so we had to look for

00:19:04,610 --> 00:19:10,159
another solution and so then we started

00:19:06,950 --> 00:19:12,649
optimising so I mean we went and broke

00:19:10,159 --> 00:19:14,210
up in terms of where we're caching

00:19:12,649 --> 00:19:16,250
images so make sure that images that are

00:19:14,210 --> 00:19:17,600
more recent that are smaller that we're

00:19:16,250 --> 00:19:19,580
being able to serve those out of a cache

00:19:17,600 --> 00:19:21,649
versus having to go back to disk every

00:19:19,580 --> 00:19:23,240
time starting to use content delivery

00:19:21,649 --> 00:19:25,070
networks to go and spread across this

00:19:23,240 --> 00:19:27,529
load even pull some of that caching

00:19:25,070 --> 00:19:29,270
outside of our own infrastructure as

00:19:27,529 --> 00:19:31,039
well as then did some actual I'm caching

00:19:29,270 --> 00:19:32,510
around the NFS infrastructure as well

00:19:31,039 --> 00:19:34,760
trying to remove some more of that

00:19:32,510 --> 00:19:36,470
metadata but fundamentally part of the

00:19:34,760 --> 00:19:38,720
challenge that we were running into was

00:19:36,470 --> 00:19:41,000
just looking at how an operating storage

00:19:38,720 --> 00:19:42,500
system stores information on disk so in

00:19:41,000 --> 00:19:44,600
order to root to serve one of these

00:19:42,500 --> 00:19:46,640
files we were having to look up about

00:19:44,600 --> 00:19:48,470
three pieces of metadata for every file

00:19:46,640 --> 00:19:50,299
so you had to go and look at the

00:19:48,470 --> 00:19:52,039
directory I know the data inside of that

00:19:50,299 --> 00:19:54,080
then the file inode and then actually

00:19:52,039 --> 00:19:55,789
get at the data itself and so what we

00:19:54,080 --> 00:19:56,550
wanted to try to do was go and do this

00:19:55,789 --> 00:19:58,320
in one

00:19:56,550 --> 00:20:01,080
to seek and so we developed a system

00:19:58,320 --> 00:20:02,730
called haystack and what it does is it

00:20:01,080 --> 00:20:04,950
allows us for any photo that we're going

00:20:02,730 --> 00:20:07,010
and looking up to go and serve it in

00:20:04,950 --> 00:20:09,600
terms of one physical read on the disc

00:20:07,010 --> 00:20:11,130
so it doesn't matter from a random data

00:20:09,600 --> 00:20:13,800
access perspective it's always a

00:20:11,130 --> 00:20:16,380
consistent time of one physical read in

00:20:13,800 --> 00:20:18,420
order to serve a file overall it takes

00:20:16,380 --> 00:20:20,220
about 300 megabytes of RAM to store this

00:20:18,420 --> 00:20:22,680
index for every terabyte of photo

00:20:20,220 --> 00:20:24,420
information that we store and so you're

00:20:22,680 --> 00:20:25,920
able to sort of see how this compares to

00:20:24,420 --> 00:20:28,200
some of the other solutions we started

00:20:25,920 --> 00:20:30,150
at a system which was about ten physical

00:20:28,200 --> 00:20:32,310
disk seeks to serve a photo we got down

00:20:30,150 --> 00:20:34,560
to three and then haystack ultimately

00:20:32,310 --> 00:20:36,270
got us to one and I think one of the

00:20:34,560 --> 00:20:38,460
other really interesting parts parts of

00:20:36,270 --> 00:20:39,930
a technology like haystack and this is

00:20:38,460 --> 00:20:43,230
true for a lot of our infrastructure is

00:20:39,930 --> 00:20:44,970
that was built by three people so it's

00:20:43,230 --> 00:20:46,770
really one of those which is interesting

00:20:44,970 --> 00:20:48,690
for us in terms of being able to go and

00:20:46,770 --> 00:20:50,580
have an engineering culture where small

00:20:48,690 --> 00:20:52,650
teams are really able to have a large

00:20:50,580 --> 00:20:54,930
impact are able to go and ship things

00:20:52,650 --> 00:20:57,120
and so haystack is a technology which

00:20:54,930 --> 00:20:58,740
isn't currently open-source but we're

00:20:57,120 --> 00:21:00,030
working on open sourcing it because it's

00:20:58,740 --> 00:21:02,040
one of those that we really think is

00:21:00,030 --> 00:21:05,670
useful to all sorts of different sites

00:21:02,040 --> 00:21:10,110
from a variety of sizes and not just for

00:21:05,670 --> 00:21:11,910
Facebook as well so like talk another

00:21:10,110 --> 00:21:13,830
bit about what a part of our

00:21:11,910 --> 00:21:15,510
infrastructure and that's hive which

00:21:13,830 --> 00:21:17,520
builds on top of Hadoop so I'll talk a

00:21:15,510 --> 00:21:20,550
little bit hit it first this is some of

00:21:17,520 --> 00:21:22,740
the hidden loop is MapReduce so the

00:21:20,550 --> 00:21:25,080
first thing here that this example runs

00:21:22,740 --> 00:21:27,000
at the top is the map query which looks

00:21:25,080 --> 00:21:28,860
for any key that's greater than 100 and

00:21:27,000 --> 00:21:31,440
just outfits whatever that key was and

00:21:28,860 --> 00:21:33,090
then next the example is the actual

00:21:31,440 --> 00:21:34,620
reducer which looked for the count of

00:21:33,090 --> 00:21:37,260
unique items that were in there put from

00:21:34,620 --> 00:21:40,170
the map script and then actually prints

00:21:37,260 --> 00:21:42,930
the value so the key then the count know

00:21:40,170 --> 00:21:45,180
the problem with Hadoop is it's just not

00:21:42,930 --> 00:21:46,980
simple to use it's very hard to

00:21:45,180 --> 00:21:48,830
understand and we come up with another

00:21:46,980 --> 00:21:51,810
solution for that we should be hive and

00:21:48,830 --> 00:21:53,700
hive is a very much an SQL syntax and

00:21:51,810 --> 00:21:56,820
what it does is it builds on top of we

00:21:53,700 --> 00:21:58,470
can't quite see that there mmm the

00:21:56,820 --> 00:22:00,120
people here can't on the Left okay if

00:21:58,470 --> 00:22:02,100
you can stand up you can see that hive

00:22:00,120 --> 00:22:04,470
is very much in SQL syntax so you can

00:22:02,100 --> 00:22:06,240
just like key Kent from Vow we're key

00:22:04,470 --> 00:22:07,530
greater than 100 and grouped by the key

00:22:06,240 --> 00:22:09,240
and then the background that will

00:22:07,530 --> 00:22:10,320
actually translate it into Hadoop query

00:22:09,240 --> 00:22:12,429
and run it on your back

00:22:10,320 --> 00:22:17,980
mapreduce request and then run it on

00:22:12,429 --> 00:22:19,720
your behalf so hive is actually in the

00:22:17,980 --> 00:22:21,639
Apache and keep that chalene Apache

00:22:19,720 --> 00:22:23,499
project then we open source that again

00:22:21,639 --> 00:22:26,110
put it into the incubator and Apache

00:22:23,499 --> 00:22:27,190
picked up and the support and

00:22:26,110 --> 00:22:29,710
development is actually happening

00:22:27,190 --> 00:22:36,580
outside of Facebook now we are still one

00:22:29,710 --> 00:22:39,129
of the main contributors to yeah and the

00:22:36,580 --> 00:22:41,919
interesting thing about Hadoop is Hadoop

00:22:39,129 --> 00:22:44,139
actually came from Yahoo so and that

00:22:41,919 --> 00:22:46,659
actually came from papers that Google

00:22:44,139 --> 00:22:48,369
would put so the interesting thing here

00:22:46,659 --> 00:22:49,809
is that lots of different corporations

00:22:48,369 --> 00:22:51,700
are building the top of each other's

00:22:49,809 --> 00:22:52,990
open-source technology and that's

00:22:51,700 --> 00:22:54,399
something we're kind of big on we want

00:22:52,990 --> 00:22:55,990
to make sure we can open source the

00:22:54,399 --> 00:22:59,769
things that we are finding useful within

00:22:55,990 --> 00:23:01,629
Facebook and I think like we really love

00:22:59,769 --> 00:23:03,519
Hadoop in terms of like what it's able

00:23:01,629 --> 00:23:05,490
to let us do being able to Scott said to

00:23:03,519 --> 00:23:07,749
go and build infrastructure on top of it

00:23:05,490 --> 00:23:09,279
but I think some of it when you go back

00:23:07,749 --> 00:23:13,149
to like that syntax bit it's just

00:23:09,279 --> 00:23:14,320
looking at the who's using it and so one

00:23:13,149 --> 00:23:17,049
of the things that we were really trying

00:23:14,320 --> 00:23:18,730
to do was make Hadoop much more

00:23:17,049 --> 00:23:20,080
accessible inside of the company so that

00:23:18,730 --> 00:23:23,350
more people were able to go and work

00:23:20,080 --> 00:23:25,600
with it and sort of use hive as a layer

00:23:23,350 --> 00:23:28,240
on top of the underlying hadoop

00:23:25,600 --> 00:23:29,529
infrastructure as well and so this is

00:23:28,240 --> 00:23:31,869
sort of what our dataflow architecture

00:23:29,529 --> 00:23:33,309
looks like this relates back to what we

00:23:31,869 --> 00:23:35,320
were talking about with scribe a bit in

00:23:33,309 --> 00:23:37,450
terms of we have our web servers going

00:23:35,320 --> 00:23:38,950
and sending data and describe going and

00:23:37,450 --> 00:23:41,789
figuring out where to file that putting

00:23:38,950 --> 00:23:44,169
that into our high of an Hadoop cluster

00:23:41,789 --> 00:23:46,720
replicating that and allowing people go

00:23:44,169 --> 00:23:49,059
and run jobs on top of this and so you

00:23:46,720 --> 00:23:50,200
also saw a picture in the previous slide

00:23:49,059 --> 00:23:51,879
which might look familiar

00:23:50,200 --> 00:23:56,619
and so this is what our hive and Hadoop

00:23:51,879 --> 00:23:59,080
cluster looks like for that but I mean

00:23:56,619 --> 00:24:00,879
overall we have a lot of information

00:23:59,080 --> 00:24:02,980
going into this cluster we couldn't have

00:24:00,879 --> 00:24:04,269
done it without Hadoop coming before us

00:24:02,980 --> 00:24:05,529
and I think that's really one of these

00:24:04,269 --> 00:24:07,539
important points from an open source

00:24:05,529 --> 00:24:10,450
perspective is being able to go and

00:24:07,539 --> 00:24:13,509
build on top of software that others

00:24:10,450 --> 00:24:15,009
have released going and changing in and

00:24:13,509 --> 00:24:16,840
being able to make itself your use cases

00:24:15,009 --> 00:24:18,460
a little bit better going and releasing

00:24:16,840 --> 00:24:20,940
it again for others to continue to build

00:24:18,460 --> 00:24:23,630
on to make better to innovate together

00:24:20,940 --> 00:24:26,210
and really with the idea with hive was

00:24:23,630 --> 00:24:27,620
and simplifying Hadoop because we wanted

00:24:26,210 --> 00:24:29,780
people other than engineers to start

00:24:27,620 --> 00:24:32,030
working with it at this point about 250

00:24:29,780 --> 00:24:34,669
people throughout the company use hive

00:24:32,030 --> 00:24:37,730
every month we're running about 7,500

00:24:34,669 --> 00:24:39,410
jobs every single day on that and a lot

00:24:37,730 --> 00:24:42,140
of people who aren't engineers are

00:24:39,410 --> 00:24:43,789
actually doing this so you have we have

00:24:42,140 --> 00:24:45,470
data analysts all throughout the company

00:24:43,789 --> 00:24:48,110
in different parts which are going and

00:24:45,470 --> 00:24:50,690
taking advantage of hive syntax as well

00:24:48,110 --> 00:24:52,070
as some other web tools on top of it to

00:24:50,690 --> 00:24:54,049
really access this information which

00:24:52,070 --> 00:24:54,919
Hadoop is going and crunching for us so

00:24:54,049 --> 00:24:56,960
I think this is one of those really

00:24:54,919 --> 00:24:58,520
great cases of you have a technology

00:24:56,960 --> 00:25:00,230
like Hadoop which is awesome it's a

00:24:58,520 --> 00:25:02,690
great piece of infrastructure and then

00:25:00,230 --> 00:25:04,580
being able to go and use open source to

00:25:02,690 --> 00:25:05,990
continue to build another layer on top

00:25:04,580 --> 00:25:10,070
of that which makes it more accessible

00:25:05,990 --> 00:25:11,510
to more people so one of the other

00:25:10,070 --> 00:25:13,220
pieces of infrastructure that we want to

00:25:11,510 --> 00:25:14,299
talk about is memcache I'm guessing if I

00:25:13,220 --> 00:25:16,580
ask how many people here have used

00:25:14,299 --> 00:25:18,380
memcache they will be about the same as

00:25:16,580 --> 00:25:20,240
syslog of time yeah exactly

00:25:18,380 --> 00:25:22,190
so like memcache is awesome we love

00:25:20,240 --> 00:25:23,809
memcache it was one of those

00:25:22,190 --> 00:25:25,640
technologies where when you go back and

00:25:23,809 --> 00:25:27,289
start thinking about how his Facebook

00:25:25,640 --> 00:25:29,330
built from the beginning I mean it was

00:25:27,289 --> 00:25:31,400
built on top of Linux and Apache and my

00:25:29,330 --> 00:25:33,049
sequel and PHP and then if we could we

00:25:31,400 --> 00:25:34,880
would add like one more M after that so

00:25:33,049 --> 00:25:37,100
it would be like the lamp amat a stack

00:25:34,880 --> 00:25:38,900
with memcache in there in terms of it's

00:25:37,100 --> 00:25:42,380
one of those technologies that's really

00:25:38,900 --> 00:25:45,140
robust its scalable it lets you get a

00:25:42,380 --> 00:25:48,440
lot more out of your site if you're

00:25:45,140 --> 00:25:50,570
going and using it in a smart way and so

00:25:48,440 --> 00:25:53,000
overall I mean memcache was developed by

00:25:50,570 --> 00:25:54,620
brad fitzpatrick at danga originally for

00:25:53,000 --> 00:25:55,909
live journal it's being used by just

00:25:54,620 --> 00:25:58,220
about any dynamic site that you can

00:25:55,909 --> 00:25:59,990
think about and it's something that

00:25:58,220 --> 00:26:02,870
gives us a lot of performance benefit

00:25:59,990 --> 00:26:04,370
but you it's also up to our engineers in

00:26:02,870 --> 00:26:05,900
terms of making sure that they use it

00:26:04,370 --> 00:26:07,130
and that they use it in a smart manner

00:26:05,900 --> 00:26:09,679
and so we'll talk about that a little

00:26:07,130 --> 00:26:11,360
bit more so this is a slide which i

00:26:09,679 --> 00:26:13,010
think was originally created to just try

00:26:11,360 --> 00:26:16,370
to describe caches to a non-technical

00:26:13,010 --> 00:26:18,470
audience and so it's sort of interesting

00:26:16,370 --> 00:26:19,820
from that perspective but I think it's a

00:26:18,470 --> 00:26:21,289
little bit more interesting we currently

00:26:19,820 --> 00:26:24,740
serve about a hundred and twenty million

00:26:21,289 --> 00:26:26,780
memcache requests every second so we're

00:26:24,740 --> 00:26:29,090
incredibly reliant on memcache in order

00:26:26,780 --> 00:26:31,309
for to make Facebook work and so if you

00:26:29,090 --> 00:26:32,510
go and think about that from how these

00:26:31,309 --> 00:26:33,710
different pieces of the stack come

00:26:32,510 --> 00:26:35,450
together which is Scott will talk about

00:26:33,710 --> 00:26:37,309
a little bit a little bit memcache is

00:26:35,450 --> 00:26:39,169
really a critical piece of it we

00:26:37,309 --> 00:26:42,590
done some performance work around it as

00:26:39,169 --> 00:26:44,929
well one of the good examples of how we

00:26:42,590 --> 00:26:47,090
use memcache and how we how we do use it

00:26:44,929 --> 00:26:48,620
was when we launched user names I think

00:26:47,090 --> 00:26:49,940
this was a little bit over a year ago I

00:26:48,620 --> 00:26:52,330
think there were about 200 million

00:26:49,940 --> 00:26:54,440
active users at the time on Facebook and

00:26:52,330 --> 00:26:56,389
we were trying to figure out what would

00:26:54,440 --> 00:26:58,490
be a fair way to go and give everyone a

00:26:56,389 --> 00:27:00,080
user name so we've thought about a few

00:26:58,490 --> 00:27:02,330
different options and ultimately we

00:27:00,080 --> 00:27:03,799
decided that the most fair way to do

00:27:02,330 --> 00:27:06,799
this would be just whoever got there

00:27:03,799 --> 00:27:08,840
first so we went and asked 200 million

00:27:06,799 --> 00:27:12,980
people to go in access Facebook at

00:27:08,840 --> 00:27:14,149
exactly the same time so I think a lot

00:27:12,980 --> 00:27:16,369
of people probably are thinking of this

00:27:14,149 --> 00:27:18,409
is like a denial of service attack that

00:27:16,369 --> 00:27:21,830
you bring upon yourself but for us it

00:27:18,409 --> 00:27:23,149
was really a product launch and so the

00:27:21,830 --> 00:27:26,149
team got together they tweaked things

00:27:23,149 --> 00:27:28,340
they tuned things and we served and it

00:27:26,149 --> 00:27:30,320
gave away over 200,000 user names in the

00:27:28,340 --> 00:27:31,669
first three minutes and a million user

00:27:30,320 --> 00:27:33,649
names were assigned in that first hour

00:27:31,669 --> 00:27:36,619
and so really that graph before was

00:27:33,649 --> 00:27:39,169
going and showing our memcache hit hits

00:27:36,619 --> 00:27:41,480
in terms of leading up to this release

00:27:39,169 --> 00:27:44,149
and then at that point as well so

00:27:41,480 --> 00:27:45,889
memcache is an incredibly important

00:27:44,149 --> 00:27:48,200
piece of technology for us and something

00:27:45,889 --> 00:27:52,340
that has a huge impact in terms of how

00:27:48,200 --> 00:27:53,919
we go and scale memcached itself is

00:27:52,340 --> 00:27:56,779
generally quite robust that feel of

00:27:53,919 --> 00:27:58,820
really nice features but we wanted to

00:27:56,779 --> 00:28:01,309
make it better so a couple of things we

00:27:58,820 --> 00:28:04,519
did with add the memcache at Facebook is

00:28:01,309 --> 00:28:06,980
we've made a 64-bit port because most of

00:28:04,519 --> 00:28:08,929
our memcache machines have about 16 gigs

00:28:06,980 --> 00:28:10,730
of ram and before we used to have to

00:28:08,929 --> 00:28:12,470
actually run three main four memcache

00:28:10,730 --> 00:28:13,730
processes so we could actually allocate

00:28:12,470 --> 00:28:16,490
all of the memory because it was only a

00:28:13,730 --> 00:28:18,799
32-bit port so what we did is report it

00:28:16,490 --> 00:28:22,309
to 64-bit and we open sourced that and

00:28:18,799 --> 00:28:24,470
that's been the main mmmm most

00:28:22,309 --> 00:28:25,940
distributions we added their multi

00:28:24,470 --> 00:28:27,470
threading so we could actually give to

00:28:25,940 --> 00:28:29,119
guys all of the cores that were on the

00:28:27,470 --> 00:28:30,919
processors as all the cores and

00:28:29,119 --> 00:28:32,419
processors around the machine so we

00:28:30,919 --> 00:28:34,879
could fetch data and get it out there

00:28:32,419 --> 00:28:36,860
quicker and one of the more interesting

00:28:34,879 --> 00:28:39,590
things was actually adding UDP support

00:28:36,860 --> 00:28:41,090
now when you add UDP support it means we

00:28:39,590 --> 00:28:43,580
actually have to do packet assembly on

00:28:41,090 --> 00:28:45,440
the memcache client rather than relying

00:28:43,580 --> 00:28:46,879
on the network stack to do it and that

00:28:45,440 --> 00:28:48,590
was mainly because there was so much

00:28:46,879 --> 00:28:49,440
merrymaking allocated to the buffers

00:28:48,590 --> 00:28:51,960
within the kernel

00:28:49,440 --> 00:28:54,149
that uses more memory on the machine in

00:28:51,960 --> 00:28:56,190
a bit like to so be changing to UDP and

00:28:54,149 --> 00:28:59,700
then we adjusted the memcache client so

00:28:56,190 --> 00:29:01,320
it kept assembled UDP packets itself at

00:28:59,700 --> 00:29:03,929
the moment we haven't got around we

00:29:01,320 --> 00:29:04,379
released about a year ago maybe a bit

00:29:03,929 --> 00:29:05,700
more

00:29:04,379 --> 00:29:07,500
we released all the changes we had up

00:29:05,700 --> 00:29:09,090
until that point and some of them have

00:29:07,500 --> 00:29:12,240
made it back into the actual memcache

00:29:09,090 --> 00:29:14,190
server and sometime this year we're

00:29:12,240 --> 00:29:16,889
gonna do another release of the memcache

00:29:14,190 --> 00:29:18,570
server and hopefully they'll get marish

00:29:16,889 --> 00:29:20,070
back into the upstream version again

00:29:18,570 --> 00:29:22,889
yeah I mean crash is one of those

00:29:20,070 --> 00:29:25,320
examples where it works really great in

00:29:22,889 --> 00:29:26,759
terms of core memcache for most site

00:29:25,320 --> 00:29:27,809
that you go and build and there are

00:29:26,759 --> 00:29:30,210
actually some of these things that we've

00:29:27,809 --> 00:29:32,519
gone and done which won't be as useful

00:29:30,210 --> 00:29:33,570
at a smaller scale and we're going and

00:29:32,519 --> 00:29:36,149
making some of those trade-offs between

00:29:33,570 --> 00:29:37,950
performance and features as well but

00:29:36,149 --> 00:29:39,960
overall like memcache is I think another

00:29:37,950 --> 00:29:41,690
one of those examples of a incredible

00:29:39,960 --> 00:29:44,850
open source technology that came before

00:29:41,690 --> 00:29:46,080
anyone the King before Facebook that we

00:29:44,850 --> 00:29:47,879
were able to go and really take

00:29:46,080 --> 00:29:51,750
advantage of as well as then contribute

00:29:47,879 --> 00:29:53,789
back to and evolve so next I'm going to

00:29:51,750 --> 00:29:58,110
look a little bit at the database part

00:29:53,789 --> 00:30:01,649
of a Facebook and here Facebook we use

00:29:58,110 --> 00:30:03,690
MySQL MySQL is our database of choice

00:30:01,649 --> 00:30:06,059
and mainly because it's the this year

00:30:03,690 --> 00:30:07,889
nothing architecture we have lots of

00:30:06,059 --> 00:30:10,169
master master databases that replicate

00:30:07,889 --> 00:30:12,629
them self around and you can sort of

00:30:10,169 --> 00:30:14,820
think of this is like if one an army and

00:30:12,629 --> 00:30:16,409
if one sort of soldier loses its head

00:30:14,820 --> 00:30:17,850
like we have an example here at the top

00:30:16,409 --> 00:30:20,429
of the photo then it doesn't matter

00:30:17,850 --> 00:30:24,929
because it'll keep going forward and at

00:30:20,429 --> 00:30:26,490
Facebook matter if a single server

00:30:24,929 --> 00:30:30,269
disappears we have other servers little

00:30:26,490 --> 00:30:31,409
backup that's really one of those

00:30:30,269 --> 00:30:33,960
choices that you make when you're

00:30:31,409 --> 00:30:35,940
thinking about how you scale is you go

00:30:33,960 --> 00:30:38,250
and invest in technologies or you sort

00:30:35,940 --> 00:30:40,169
of like grow one piece of your

00:30:38,250 --> 00:30:41,370
infrastructure really large or do you go

00:30:40,169 --> 00:30:42,659
and find a way where you're able to sort

00:30:41,370 --> 00:30:43,889
of break that up and I think that's

00:30:42,659 --> 00:30:45,659
really what we've done with our

00:30:43,889 --> 00:30:47,940
databases with my sequel in terms of

00:30:45,659 --> 00:30:50,129
being able to go and have a lot of more

00:30:47,940 --> 00:30:51,840
independent database clusters that were

00:30:50,129 --> 00:30:54,110
able to continue growing that entire

00:30:51,840 --> 00:30:59,100
pool rather than having one really large

00:30:54,110 --> 00:31:01,230
database cluster by itself and overall I

00:30:59,100 --> 00:31:02,590
mean we really like my sequel we found

00:31:01,230 --> 00:31:04,390
it to be a simple

00:31:02,590 --> 00:31:06,039
fast and reliable and normally when we

00:31:04,390 --> 00:31:07,870
go and break our databases it's because

00:31:06,039 --> 00:31:09,100
one of us did something stupid not

00:31:07,870 --> 00:31:11,169
because the software wasn't working

00:31:09,100 --> 00:31:12,520
right and so we I mean we really think

00:31:11,169 --> 00:31:13,929
about my sequel is like that freight

00:31:12,520 --> 00:31:15,640
train which is like really solid it

00:31:13,929 --> 00:31:17,919
keeps on running and a lot of that sort

00:31:15,640 --> 00:31:20,140
of is also based on how we go and use

00:31:17,919 --> 00:31:21,490
our databases in terms of we don't take

00:31:20,140 --> 00:31:23,350
advantage of a lot of the relational

00:31:21,490 --> 00:31:26,260
aspects we don't go and use joins inside

00:31:23,350 --> 00:31:27,970
of our database but in but in general we

00:31:26,260 --> 00:31:30,909
found my sequel to be an incredibly

00:31:27,970 --> 00:31:33,669
reliable piece of storage infrastructure

00:31:30,909 --> 00:31:35,230
and definitely is a good example of what

00:31:33,669 --> 00:31:41,260
you can go and build from an open source

00:31:35,230 --> 00:31:44,529
perspective I see the the database that

00:31:41,260 --> 00:31:46,149
we actually use the nodb engine engine

00:31:44,529 --> 00:31:47,620
because it's only one that's got fill

00:31:46,149 --> 00:31:49,320
transactional support and we can make

00:31:47,620 --> 00:31:54,100
sure everything makes its way to disk

00:31:49,320 --> 00:31:55,809
but this is overall okay so this is sort

00:31:54,100 --> 00:31:57,730
of the high-level look of how the

00:31:55,809 --> 00:31:59,830
architecture is at Facebook and we'll

00:31:57,730 --> 00:32:01,720
look at databases again so most people

00:31:59,830 --> 00:32:03,669
see databases is sort of a secondary and

00:32:01,720 --> 00:32:04,570
a collection of second indices that's

00:32:03,669 --> 00:32:06,840
where you got all your relational

00:32:04,570 --> 00:32:09,700
features this is where you do your joins

00:32:06,840 --> 00:32:12,010
but here it we more or less use it as a

00:32:09,700 --> 00:32:13,510
way to keep data is where we store the

00:32:12,010 --> 00:32:15,460
data writes its disk that's our

00:32:13,510 --> 00:32:16,960
persistence layer and if you want to do

00:32:15,460 --> 00:32:19,210
any sort of joins then the joins are

00:32:16,960 --> 00:32:20,679
actually done within the web servers and

00:32:19,210 --> 00:32:22,380
that's why hip hop is important because

00:32:20,679 --> 00:32:24,309
we do a lot of processing there and

00:32:22,380 --> 00:32:27,640
reassembling the data from its different

00:32:24,309 --> 00:32:30,279
sources and then once we have that sort

00:32:27,640 --> 00:32:31,809
of put into memcache and memcache could

00:32:30,279 --> 00:32:33,880
be seen as a sort of our second index

00:32:31,809 --> 00:32:37,899
it's our secondary index that's where

00:32:33,880 --> 00:32:43,210
our data is stored so really it looks a

00:32:37,899 --> 00:32:44,980
little more like this yeah so that's

00:32:43,210 --> 00:32:47,740
probably a more true representation of

00:32:44,980 --> 00:32:49,779
our stack where the web server look

00:32:47,740 --> 00:32:51,789
Center distributed index to see if this

00:32:49,779 --> 00:32:54,340
is there and then if that fails it'll

00:32:51,789 --> 00:32:56,110
look in their persistent storage but

00:32:54,340 --> 00:32:59,289
it's more than just our web servers that

00:32:56,110 --> 00:33:00,779
look within both memcache and MySQL we

00:32:59,289 --> 00:33:03,340
also have other search services

00:33:00,779 --> 00:33:06,640
themselves we'll look and the various

00:33:03,340 --> 00:33:09,039
data applications yeah and so hopefully

00:33:06,640 --> 00:33:10,299
we gave you sort of a pretty good

00:33:09,039 --> 00:33:12,309
overview of a few of the different

00:33:10,299 --> 00:33:15,130
services and technologies that go into

00:33:12,309 --> 00:33:16,179
scaling Facebook both in terms of open

00:33:15,130 --> 00:33:17,769
source software which are you

00:33:16,179 --> 00:33:20,649
some of the things that we've built on

00:33:17,769 --> 00:33:21,940
top of that as well and so that was

00:33:20,649 --> 00:33:23,110
really our goal in terms of going and

00:33:21,940 --> 00:33:25,869
looking at a few of these different

00:33:23,110 --> 00:33:28,119
places of our architecture and really

00:33:25,869 --> 00:33:30,279
how important open-source software is to

00:33:28,119 --> 00:33:32,080
go and scale Facebook since the

00:33:30,279 --> 00:33:33,039
beginning of the site I think one of the

00:33:32,080 --> 00:33:34,600
other things and we talked about this a

00:33:33,039 --> 00:33:36,070
little bit with haystack

00:33:34,600 --> 00:33:38,559
was that a lot of this actually starts

00:33:36,070 --> 00:33:40,059
as a hack project so it's not

00:33:38,559 --> 00:33:42,340
necessarily that we're going and set out

00:33:40,059 --> 00:33:43,960
trying to solve this specific problem

00:33:42,340 --> 00:33:46,360
and have a lot of people thinking about

00:33:43,960 --> 00:33:47,710
it and how to do it but rather a few

00:33:46,360 --> 00:33:48,999
people will just like sit down or a

00:33:47,710 --> 00:33:52,029
single person I mean haystack was

00:33:48,999 --> 00:33:54,369
started by one engineer hi ping

00:33:52,029 --> 00:33:57,159
sorry that was hip hop haystack was

00:33:54,369 --> 00:33:58,149
started by adjacent sobel and it's

00:33:57,159 --> 00:33:59,950
really getting to a point where we

00:33:58,149 --> 00:34:01,600
prototype something and we're also from

00:33:59,950 --> 00:34:02,860
an infrastructure perspective when we're

00:34:01,600 --> 00:34:04,360
trying to solve a problem we might go

00:34:02,860 --> 00:34:06,249
and try two or three different things at

00:34:04,360 --> 00:34:08,079
the same time prototype them out for a

00:34:06,249 --> 00:34:09,730
few months and then throw two of them

00:34:08,079 --> 00:34:10,629
away and move forward with the third one

00:34:09,730 --> 00:34:12,940
and I think that's something that's

00:34:10,629 --> 00:34:14,260
really important and it's sort of a

00:34:12,940 --> 00:34:16,210
piece of our culture as well from an

00:34:14,260 --> 00:34:18,639
engineering and company perspective in

00:34:16,210 --> 00:34:20,740
terms of really how these technologies

00:34:18,639 --> 00:34:22,899
help us go and do things like move fast

00:34:20,740 --> 00:34:25,210
and so that's a really important piece

00:34:22,899 --> 00:34:26,919
of hip hop in terms of it allows us from

00:34:25,210 --> 00:34:29,260
an engineering perspective to go and

00:34:26,919 --> 00:34:31,240
make changes for with the development

00:34:29,260 --> 00:34:32,770
speed of PHP being able to go and sort

00:34:31,240 --> 00:34:34,030
of save something and refresh that

00:34:32,770 --> 00:34:36,190
immediately on your on your development

00:34:34,030 --> 00:34:37,569
server but then going and having a lot

00:34:36,190 --> 00:34:40,179
of the operational performance of a

00:34:37,569 --> 00:34:41,980
compiled language like C++ being able to

00:34:40,179 --> 00:34:43,809
go and develop technologies sort of in a

00:34:41,980 --> 00:34:46,089
small team and actually have them scale

00:34:43,809 --> 00:34:47,889
out to the entire site releases open

00:34:46,089 --> 00:34:50,049
source and really that idea of

00:34:47,889 --> 00:34:52,089
continuing to be bold and innovating

00:34:50,049 --> 00:34:54,280
goes into our engineering culture as

00:34:52,089 --> 00:34:56,020
well so everything that we talked about

00:34:54,280 --> 00:34:58,180
you can go and find at facebook.com

00:34:56,020 --> 00:35:00,250
slash open source we also have a variety

00:34:58,180 --> 00:35:02,740
of developer tools there so libraries

00:35:00,250 --> 00:35:04,809
such as 320 which are a lot of the UI

00:35:02,740 --> 00:35:07,390
aspects and some of the data ax aspects

00:35:04,809 --> 00:35:09,010
we are behind our iPhone app so let's

00:35:07,390 --> 00:35:10,599
you go and do things such as like have a

00:35:09,010 --> 00:35:11,890
list that which you scroll through which

00:35:10,599 --> 00:35:13,930
is actually going and pulling images

00:35:11,890 --> 00:35:16,329
from a server instead of having all of

00:35:13,930 --> 00:35:19,180
that information being stored locally as

00:35:16,329 --> 00:35:20,650
well as tools like tornado which is

00:35:19,180 --> 00:35:23,079
another prefix of infrastructure which

00:35:20,650 --> 00:35:24,520
powers friend feeds web server it's

00:35:23,079 --> 00:35:26,559
designed to be a really like high-speed

00:35:24,520 --> 00:35:29,020
web server because they have a

00:35:26,559 --> 00:35:29,960
connection to open for every user that's

00:35:29,020 --> 00:35:32,359
actually on the side of

00:35:29,960 --> 00:35:35,119
time as well as other development tools

00:35:32,359 --> 00:35:36,550
things like PHP shell for going and

00:35:35,119 --> 00:35:39,650
doing autocomplete and stuff like that

00:35:36,550 --> 00:35:41,089
so overall we're really excited to be

00:35:39,650 --> 00:35:43,280
here and have a little bit of time for

00:35:41,089 --> 00:35:44,810
questions as well as a bit of a pile of

00:35:43,280 --> 00:35:48,010
schwag down at the front you want to

00:35:44,810 --> 00:35:48,010
come in grab any so thank you

00:35:58,810 --> 00:36:04,880
yeah my question is about hip-hop

00:36:01,940 --> 00:36:13,190
why are you translating PHP to C++

00:36:04,880 --> 00:36:15,380
instead of silently developing in C++ so

00:36:13,190 --> 00:36:17,600
what was the last bit sorry yeah

00:36:15,380 --> 00:36:21,590
why aren't you not developing their

00:36:17,600 --> 00:36:25,340
website in C++ diary instead of

00:36:21,590 --> 00:36:28,070
developing PHP then translating the C++

00:36:25,340 --> 00:36:29,960
optimizing and doing a lot of stuff ok

00:36:28,070 --> 00:36:35,930
the question was why are we just

00:36:29,960 --> 00:36:37,820
developing in straight C++ okay so the

00:36:35,930 --> 00:36:40,010
current code base at Facebook is about 4

00:36:37,820 --> 00:36:41,600
million lines of code so the first

00:36:40,010 --> 00:36:43,580
problem with 4 million lines of PHP

00:36:41,600 --> 00:36:46,010
codes so the first problem would be how

00:36:43,580 --> 00:36:47,630
do we translate all of that into C++ as

00:36:46,010 --> 00:36:48,890
well as allowing people to keep

00:36:47,630 --> 00:36:50,600
developing with the site we can't

00:36:48,890 --> 00:36:53,390
exactly hold up development

00:36:50,600 --> 00:36:55,640
well that's being done and we it comes

00:36:53,390 --> 00:36:58,010
back to how long does it take a C+ C++

00:36:55,640 --> 00:36:59,630
project to compile we like the fact that

00:36:58,010 --> 00:37:01,520
we can move fast people to make little

00:36:59,630 --> 00:37:04,840
changes save it and then look onto the

00:37:01,520 --> 00:37:06,740
web server and the changes right there

00:37:04,840 --> 00:37:08,170
yeah so a lot of it is just that

00:37:06,740 --> 00:37:10,850
development speed of being able like

00:37:08,170 --> 00:37:12,740
more people know PHP it's easier to work

00:37:10,850 --> 00:37:14,270
inside a PHP so we really want to keep

00:37:12,740 --> 00:37:17,450
it as a language from a development

00:37:14,270 --> 00:37:18,200
perspective hi thanks for the

00:37:17,450 --> 00:37:20,960
presentation

00:37:18,200 --> 00:37:26,090
what eventual consistency do you

00:37:20,960 --> 00:37:31,330
tolerate so how much is so consistency

00:37:26,090 --> 00:37:31,330
do we tolerate so I mean we tried it

00:37:31,390 --> 00:37:37,790
mm-hmm I don't know the exact answer to

00:37:35,690 --> 00:37:40,100
that question I mean so like we really

00:37:37,790 --> 00:37:41,810
try it for I mean anything that you post

00:37:40,100 --> 00:37:44,030
any comment that you comment on like as

00:37:41,810 --> 00:37:46,070
soon as it comes in we record it we make

00:37:44,030 --> 00:37:48,140
sure that it we go and serve it again I

00:37:46,070 --> 00:37:49,730
think with services like News Feed that

00:37:48,140 --> 00:37:51,500
you have the two views now so you have

00:37:49,730 --> 00:37:52,880
one which is going and showing that most

00:37:51,500 --> 00:37:54,560
recent view everything that's come in

00:37:52,880 --> 00:37:56,210
but then you also have a view which goes

00:37:54,560 --> 00:37:57,530
and sort of looks at what do we think is

00:37:56,210 --> 00:37:58,010
the most relevant thing for you to see

00:37:57,530 --> 00:37:59,510
right now

00:37:58,010 --> 00:38:01,130
so I actually think it's probably a

00:37:59,510 --> 00:38:02,540
little bit less from a data storage

00:38:01,130 --> 00:38:04,700
perspective and more from a presentation

00:38:02,540 --> 00:38:05,750
perspective in terms of what specific

00:38:04,700 --> 00:38:07,730
feature on the side of you

00:38:05,750 --> 00:38:11,930
and looking at and how we're going and

00:38:07,730 --> 00:38:14,960
optimizing that at the time you guys

00:38:11,930 --> 00:38:17,180
were talking about you chose to put the

00:38:14,960 --> 00:38:18,770
joins and all the filters in the website

00:38:17,180 --> 00:38:20,300
in the webserver level

00:38:18,770 --> 00:38:22,820
I suspect you guys did a lot of

00:38:20,300 --> 00:38:25,490
benchmarking and checks at what point

00:38:22,820 --> 00:38:27,230
that would be an advantage by doing it

00:38:25,490 --> 00:38:29,330
because for smaller size it probably

00:38:27,230 --> 00:38:30,740
won't be do you have figures for that

00:38:29,330 --> 00:38:32,330
can you distribute them because those

00:38:30,740 --> 00:38:34,520
would be really interesting to see and

00:38:32,330 --> 00:38:37,790
at what point it would finally be an

00:38:34,520 --> 00:38:39,859
advantage to do it yeah so in terms of

00:38:37,790 --> 00:38:42,890
like at what point do different pieces

00:38:39,859 --> 00:38:44,570
these technologies make sense I yeah I

00:38:42,890 --> 00:38:46,070
don't think we necessarily have a lot of

00:38:44,570 --> 00:38:47,570
benchmarks in terms of something like do

00:38:46,070 --> 00:38:50,119
you do joins in your database or do you

00:38:47,570 --> 00:38:52,160
go just pull data together and join it

00:38:50,119 --> 00:38:54,230
together your application level your

00:38:52,160 --> 00:38:55,970
application layer some of that tolerance

00:38:54,230 --> 00:38:57,109
is also probably depending on how large

00:38:55,970 --> 00:38:58,910
do you want to scale your database

00:38:57,109 --> 00:39:07,520
cluster and where are you wanting to

00:38:58,910 --> 00:39:10,880
spend some of that CPU time date is very

00:39:07,520 --> 00:39:13,970
crucial Facebook so how do you prevent

00:39:10,880 --> 00:39:16,550
the loss of the data and probably you

00:39:13,970 --> 00:39:19,580
use the mechanism like duplicate and etc

00:39:16,550 --> 00:39:23,839
and the second question here about the

00:39:19,580 --> 00:39:25,820
data did you have already the problems

00:39:23,839 --> 00:39:28,609
with it and how do you solve them if you

00:39:25,820 --> 00:39:29,960
had so I think your question your first

00:39:28,609 --> 00:39:36,170
question was about replication and then

00:39:29,960 --> 00:39:40,400
what was it second the second was if you

00:39:36,170 --> 00:39:44,270
if you had some data losses in the past

00:39:40,400 --> 00:39:46,609
and if you had how did you solve it to

00:39:44,270 --> 00:39:47,750
not have it in the future yeah I mean I

00:39:46,609 --> 00:39:50,210
think from it like a data loss

00:39:47,750 --> 00:39:51,560
perspective a lot of those things that

00:39:50,210 --> 00:39:54,050
you learn about how do you go and run

00:39:51,560 --> 00:39:55,849
database clusters apply the same for us

00:39:54,050 --> 00:39:57,650
as well in terms of going and making

00:39:55,849 --> 00:39:59,420
sure that you're having backups that

00:39:57,650 --> 00:40:00,950
your replication is working that you're

00:39:59,420 --> 00:40:03,589
keeping your bin logs so that you go and

00:40:00,950 --> 00:40:06,050
can replay some of that information so a

00:40:03,589 --> 00:40:07,400
lot of I think the scaling lessons that

00:40:06,050 --> 00:40:09,490
you learn at least in terms of how you

00:40:07,400 --> 00:40:12,200
go and run databases are pretty similar

00:40:09,490 --> 00:40:14,030
whether your Facebook scale or smaller

00:40:12,200 --> 00:40:16,099
than that as well it's really a lot of

00:40:14,030 --> 00:40:17,270
those best practices applied at a much

00:40:16,099 --> 00:40:19,220
larger scale

00:40:17,270 --> 00:40:21,280
oh you've talked about scaling at

00:40:19,220 --> 00:40:23,180
technology level how do you scale

00:40:21,280 --> 00:40:25,370
internally with your developers and

00:40:23,180 --> 00:40:26,840
you've got Philly high-velocity releases

00:40:25,370 --> 00:40:29,480
so how do you ensure all your developers

00:40:26,840 --> 00:40:31,310
on a consistent frame of reference when

00:40:29,480 --> 00:40:34,220
they're developing new features yeah so

00:40:31,310 --> 00:40:35,660
really scaling is more than technology

00:40:34,220 --> 00:40:37,870
as you said it's also about scaling an

00:40:35,660 --> 00:40:40,070
organization scaling an engineering team

00:40:37,870 --> 00:40:41,690
and so we've developed I mean we've

00:40:40,070 --> 00:40:43,280
developed a variety of internal tools

00:40:41,690 --> 00:40:45,800
which also helped us do that so we've

00:40:43,280 --> 00:40:47,780
gone in layered things on top of our

00:40:45,800 --> 00:40:49,670
version control repositories so have

00:40:47,780 --> 00:40:51,410
tools to go and do things like code

00:40:49,670 --> 00:40:53,690
reviews to be able to go and trace a

00:40:51,410 --> 00:40:55,850
code review all the way back from that

00:40:53,690 --> 00:40:57,470
release that we're doing - when was the

00:40:55,850 --> 00:40:59,510
code committed who reviewed it what was

00:40:57,470 --> 00:41:00,980
happening inside of that every single

00:40:59,510 --> 00:41:04,490
commit at Facebook is reviewed by

00:41:00,980 --> 00:41:07,160
someone else and so it's definitely one

00:41:04,490 --> 00:41:08,480
of those challenges that we focus on as

00:41:07,160 --> 00:41:12,940
well in terms of how do we continue

00:41:08,480 --> 00:41:17,240
growing and moving at this pace I know

00:41:12,940 --> 00:41:20,540
yeah over an excellent presentation by

00:41:17,240 --> 00:41:25,130
the way love it really interesting in

00:41:20,540 --> 00:41:27,260
haystack so I guess the average size of

00:41:25,130 --> 00:41:29,780
a photo how big is that like a few

00:41:27,260 --> 00:41:31,760
hundred K or less yeah I mean I think an

00:41:29,780 --> 00:41:34,040
average size is certainly under 500 K

00:41:31,760 --> 00:41:36,530
yeah generally the site is a larger size

00:41:34,040 --> 00:41:38,330
that we store is 640 by 480 and what we

00:41:36,530 --> 00:41:39,830
actually do is our photo uploader so

00:41:38,330 --> 00:41:41,360
when it's occurring on your computer is

00:41:39,830 --> 00:41:43,280
going and resizing that photo before

00:41:41,360 --> 00:41:46,160
it's even sent over the network but my

00:41:43,280 --> 00:41:48,830
question is then how will the could this

00:41:46,160 --> 00:41:51,740
scale for I don't know say all gorebyss

00:41:48,830 --> 00:41:55,760
standard 4 megabyte file or even movies

00:41:51,740 --> 00:41:58,010
or how do you how many disk reads per

00:41:55,760 --> 00:42:00,200
megabytes or so I think one of the

00:41:58,010 --> 00:42:03,140
things that to keep in mind there is

00:42:00,200 --> 00:42:04,820
that that percentage in terms of the

00:42:03,140 --> 00:42:06,380
amount of time you spend going reading

00:42:04,820 --> 00:42:07,970
metadata compared to the file size is

00:42:06,380 --> 00:42:10,280
really important and so when you have a

00:42:07,970 --> 00:42:11,510
smaller file then the amount of time

00:42:10,280 --> 00:42:13,790
that you spend going and looking for

00:42:11,510 --> 00:42:15,140
that metadata is actually much larger if

00:42:13,790 --> 00:42:17,210
you go and start to get into something

00:42:15,140 --> 00:42:19,130
like videos then it becomes a much

00:42:17,210 --> 00:42:20,660
smaller fraction achieve the time that

00:42:19,130 --> 00:42:23,270
you spend overall so we don't actually

00:42:20,660 --> 00:42:27,040
use haystack to store videos but only

00:42:23,270 --> 00:42:27,040
for for photos right now

00:42:27,280 --> 00:42:38,119
yeah yes up here up here okay um I was

00:42:36,290 --> 00:42:40,640
wondering can you give us some numbers

00:42:38,119 --> 00:42:42,740
on the breakdown of how many servers our

00:42:40,640 --> 00:42:46,369
web servers how many servers our

00:42:42,740 --> 00:42:50,480
memcache and how many servers are the

00:42:46,369 --> 00:42:51,800
database no I actually can't but I can

00:42:50,480 --> 00:42:54,580
tell you we have tens of thousands of

00:42:51,800 --> 00:42:54,580
servers overall

00:43:06,030 --> 00:43:11,819
what language is it's hip-hop written in

00:43:10,290 --> 00:43:14,970
and what's your plans for growing a

00:43:11,819 --> 00:43:16,800
community around it what is the second

00:43:14,970 --> 00:43:17,640
the written in C++ and what was the

00:43:16,800 --> 00:43:19,200
second question

00:43:17,640 --> 00:43:21,750
and what's your plans for growing a

00:43:19,200 --> 00:43:23,180
community around hip-hop what's our

00:43:21,750 --> 00:43:26,040
plans for creating a community around it

00:43:23,180 --> 00:43:27,000
at the moment we've open sourced it we

00:43:26,040 --> 00:43:28,619
haven't released the code yet that's

00:43:27,000 --> 00:43:30,359
good happening soon a couple hours

00:43:28,619 --> 00:43:32,880
before this I was finishing the last of

00:43:30,359 --> 00:43:34,800
that with there see make and making sure

00:43:32,880 --> 00:43:37,230
it could build on non Facebook platforms

00:43:34,800 --> 00:43:38,609
we've created the mailing list and we've

00:43:37,230 --> 00:43:40,050
had a couple of thousand people join the

00:43:38,609 --> 00:43:41,550
mill and that's already is that right

00:43:40,050 --> 00:43:43,140
yeah it's about a couple of thousand

00:43:41,550 --> 00:43:44,849
people join the mailing list already and

00:43:43,140 --> 00:43:46,500
we're hoping if people start using it

00:43:44,849 --> 00:43:49,109
and the community will just naturally

00:43:46,500 --> 00:43:51,089
develop around it you have to remember

00:43:49,109 --> 00:43:53,579
that hip hop isn't designed for everyone

00:43:51,089 --> 00:43:54,809
to use it's the kind of lis one but

00:43:53,579 --> 00:43:55,890
doesn't really make sense for the small

00:43:54,809 --> 00:43:58,050
person writing their own shared

00:43:55,890 --> 00:43:59,880
wordpress blog it's more for those

00:43:58,050 --> 00:44:01,380
larger sites so we're hoping that

00:43:59,880 --> 00:44:02,550
they'll realize performance benefits

00:44:01,380 --> 00:44:03,960
that come from it and they'll start

00:44:02,550 --> 00:44:09,559
adopting it and from there or just

00:44:03,960 --> 00:44:13,410
hopefully just snowball yep hi yeah

00:44:09,559 --> 00:44:16,170
thanks for the talk and what about HTTP

00:44:13,410 --> 00:44:23,190
service do you war with pots and jeans

00:44:16,170 --> 00:44:25,950
or multiple so we've generally been

00:44:23,190 --> 00:44:28,170
using Apache in PHP but hip-hop actually

00:44:25,950 --> 00:44:30,089
has its own embedded web server which is

00:44:28,170 --> 00:44:32,819
sort of really simple web server built

00:44:30,089 --> 00:44:36,839
on top of live event and so we've now

00:44:32,819 --> 00:44:41,240
been moving to using that how hard it is

00:44:36,839 --> 00:44:41,240
support has and extension to hip hop

00:44:41,660 --> 00:44:51,089
high to change an extension to hip hop

00:44:48,900 --> 00:44:53,099
to basically just write as C++ classes

00:44:51,089 --> 00:44:54,690
normal and then it's got this similar

00:44:53,099 --> 00:44:56,369
parts of the PHP extensions an

00:44:54,690 --> 00:44:58,410
initialization function there's a

00:44:56,369 --> 00:44:59,309
request initialization request destroyer

00:44:58,410 --> 00:45:03,030
and request

00:44:59,309 --> 00:45:04,950
sorry module unload and again it's some

00:45:03,030 --> 00:45:08,010
more glue code with macros to expose

00:45:04,950 --> 00:45:10,349
your C++ class back into hip-hop so it's

00:45:08,010 --> 00:45:16,309
similar to the PHP extensions but less

00:45:10,349 --> 00:45:16,309
random macros it may not understand hi

00:45:16,520 --> 00:45:22,079
thank you for the presentation first of

00:45:18,839 --> 00:45:24,420
all and my question was where exactly do

00:45:22,079 --> 00:45:26,819
you use air lung and do you make use of

00:45:24,420 --> 00:45:29,790
Nietzsche and the concurrency that the

00:45:26,819 --> 00:45:34,230
airline provides so we use Erlang for

00:45:29,790 --> 00:45:36,900
our chat service so for facebook chat is

00:45:34,230 --> 00:45:39,359
your generated C++ code using a boost

00:45:36,900 --> 00:45:43,140
library and what libraries do you use in

00:45:39,359 --> 00:45:45,290
the generate the C++ code yeah we missed

00:45:43,140 --> 00:45:49,680
that completely sorry we couldn't

00:45:45,290 --> 00:45:54,089
understand here you issuer generate C++

00:45:49,680 --> 00:45:55,920
code using the boost library yes

00:45:54,089 --> 00:45:58,380
our generation C++ code uses the best

00:45:55,920 --> 00:46:00,690
libraries it uses file system system and

00:45:58,380 --> 00:46:04,280
a couple of the muta Xing and the

00:46:00,690 --> 00:46:06,510
concurrent execution the threading ones

00:46:04,280 --> 00:46:12,210
if you have more questions come down and

00:46:06,510 --> 00:46:15,329
ask afterwards hello thank you for the

00:46:12,210 --> 00:46:18,780
presentation but when will we get a

00:46:15,329 --> 00:46:25,680
dislike button when will we get what a

00:46:18,780 --> 00:46:26,390
dislike button we let's talk about that

00:46:25,680 --> 00:46:28,109
later

00:46:26,390 --> 00:46:31,609
let me know if there's specific

00:46:28,109 --> 00:46:31,609
information you want off of them

00:46:38,789 --> 00:46:44,839
it depends on what you like

00:46:42,140 --> 00:46:47,960
okay I have another question about

00:46:44,839 --> 00:46:50,359
hip-hop is it currently possible to

00:46:47,960 --> 00:46:52,519
cross compile it for example to get a

00:46:50,359 --> 00:46:54,650
Windows binary and if that's not

00:46:52,519 --> 00:46:57,950
possible would that be easy to implement

00:46:54,650 --> 00:47:01,309
that function at the moment it only

00:46:57,950 --> 00:47:03,859
compiles on linux specifically last week

00:47:01,309 --> 00:47:05,480
only compiled on st. OS we've now got it

00:47:03,859 --> 00:47:08,210
to the point that should compile on all

00:47:05,480 --> 00:47:09,410
Linux distributions it uses sima can see

00:47:08,210 --> 00:47:11,900
me it has support for a cross

00:47:09,410 --> 00:47:14,420
compilation at the moment there's no

00:47:11,900 --> 00:47:16,279
support on OS X or Windows but we're

00:47:14,420 --> 00:47:17,599
hoping it's something from Microsoft has

00:47:16,279 --> 00:47:19,059
contacted us and hopefully they'll

00:47:17,599 --> 00:47:20,809
contribute the Windows part and

00:47:19,059 --> 00:47:22,579
hopefully something the community will

00:47:20,809 --> 00:47:28,609
either contribute the Mac or our I

00:47:22,579 --> 00:47:30,470
myself will do hi my understanding is

00:47:28,609 --> 00:47:35,809
that you only have data centers in the

00:47:30,470 --> 00:47:38,779
US right no what are you asking we're

00:47:35,809 --> 00:47:40,940
servers are now my question is how do

00:47:38,779 --> 00:47:43,430
you deal with the highlighted C from the

00:47:40,940 --> 00:47:47,029
US for users that are outside of the US

00:47:43,430 --> 00:47:48,349
so dealing with latency so I mean we in

00:47:47,029 --> 00:47:49,999
the u.s. we have data centers on both

00:47:48,349 --> 00:47:52,190
the west coast and the East Coast we

00:47:49,999 --> 00:47:56,359
also used CD ends to help distribute

00:47:52,190 --> 00:47:59,480
some of the like things like images and

00:47:56,359 --> 00:48:00,739
CSS and JavaScript around the world I

00:47:59,480 --> 00:48:02,539
think that's been something that our

00:48:00,739 --> 00:48:04,130
operations team continues to work on as

00:48:02,539 --> 00:48:09,849
this site continues to grow

00:48:04,130 --> 00:48:13,190
internationally as well so there's still

00:48:09,849 --> 00:48:14,690
any more questions and we'll stick

00:48:13,190 --> 00:48:16,489
around as well if you want to come ask

00:48:14,690 --> 00:48:19,430
down here we might be able to hear you

00:48:16,489 --> 00:48:21,499
better - yeah hi you mentioned that you

00:48:19,430 --> 00:48:24,529
use CD ends do you use other people's CD

00:48:21,499 --> 00:48:27,680
ends or do you have your own CDN

00:48:24,529 --> 00:48:33,230
deployed around the world so we use echo

00:48:27,680 --> 00:48:34,700
my for a lot of our CD ends hi I was

00:48:33,230 --> 00:48:36,829
wondering what kind of open source

00:48:34,700 --> 00:48:38,839
software you guys used for monitoring

00:48:36,829 --> 00:48:40,940
capacity planning and trending and if

00:48:38,839 --> 00:48:42,319
you experienced issues scaling with

00:48:40,940 --> 00:48:44,839
those as well as the Facebook

00:48:42,319 --> 00:48:47,480
application yeah we know a little bit

00:48:44,839 --> 00:48:49,609
less about the monitoring technologies

00:48:47,480 --> 00:48:51,920
that we use I know that we use ganglia I

00:48:49,609 --> 00:48:52,759
think we also use cacti we also have

00:48:51,920 --> 00:48:54,380
some tools that we've developed

00:48:52,759 --> 00:48:56,710
internally and

00:48:54,380 --> 00:48:59,600
of managing or overall infrastructure

00:48:56,710 --> 00:49:00,950
but I honestly know a little bit less

00:48:59,600 --> 00:49:05,270
about the scaling challenges that we've

00:49:00,950 --> 00:49:08,470
run into those you talked that you're

00:49:05,270 --> 00:49:12,230
using revision control systems for

00:49:08,470 --> 00:49:15,080
fastly developing your site but what

00:49:12,230 --> 00:49:16,820
kind of software are using are using

00:49:15,080 --> 00:49:18,440
currently single revision control system

00:49:16,820 --> 00:49:21,830
or different teams with different

00:49:18,440 --> 00:49:23,090
revision control systems so I think

00:49:21,830 --> 00:49:27,530
you're asking about like what software

00:49:23,090 --> 00:49:30,740
are developers use I mean in what so

00:49:27,530 --> 00:49:33,200
yeah I mean we have a variety of like we

00:49:30,740 --> 00:49:35,630
use then for a lot of our development

00:49:33,200 --> 00:49:38,030
environments engineers then use I mean

00:49:35,630 --> 00:49:40,460
Emacs or VI or whatever insert favorite

00:49:38,030 --> 00:49:41,870
text editor here and then we will have

00:49:40,460 --> 00:49:44,420
some other tools built on top of

00:49:41,870 --> 00:49:45,980
subversion and get our main repositories

00:49:44,420 --> 00:49:47,750
our subversion over half of our

00:49:45,980 --> 00:49:49,850
engineering team now uses get on top of

00:49:47,750 --> 00:49:51,590
that and then we have some tools built

00:49:49,850 --> 00:49:55,340
on around that in terms of things like

00:49:51,590 --> 00:49:56,230
code review and and documentation and

00:49:55,340 --> 00:49:59,570
things like that

00:49:56,230 --> 00:50:02,360
HIDA can you say a little bit about

00:49:59,570 --> 00:50:05,450
Cassandra and what using Oracle for

00:50:02,360 --> 00:50:07,550
please thank you so Cassandra um yeah so

00:50:05,450 --> 00:50:09,830
we team at Facebook developed Cassandra

00:50:07,550 --> 00:50:12,800
a few years ago it's also in the Apache

00:50:09,830 --> 00:50:16,220
Incubator right now we use it for inbox

00:50:12,800 --> 00:50:17,720
search on Facebook and we haven't really

00:50:16,220 --> 00:50:20,390
been developing it actively in the past

00:50:17,720 --> 00:50:21,830
year but at this point I think Digg and

00:50:20,390 --> 00:50:24,620
Twitter and Rackspace are really the

00:50:21,830 --> 00:50:27,200
largest contributors to Cassandra inside

00:50:24,620 --> 00:50:28,820
of the Apache project and so I mean I

00:50:27,200 --> 00:50:31,190
think from our perspective it's really

00:50:28,820 --> 00:50:33,080
great to continue to see it develop and

00:50:31,190 --> 00:50:34,760
have a community around it that's going

00:50:33,080 --> 00:50:36,290
in continuing to push it forward even

00:50:34,760 --> 00:50:42,920
though we're not actively developing it

00:50:36,290 --> 00:50:47,750
as well how do you manage to deployment

00:50:42,920 --> 00:50:50,360
software so software deployments I mean

00:50:47,750 --> 00:50:52,280
we have a variety of tools built around

00:50:50,360 --> 00:50:54,560
that as well in terms of being able to

00:50:52,280 --> 00:50:56,120
go and push out information to different

00:50:54,560 --> 00:50:59,990
hosts going and running jobs on those

00:50:56,120 --> 00:51:01,010
hosts distributing information and I

00:50:59,990 --> 00:51:03,320
mean I think that's something that we'll

00:51:01,010 --> 00:51:08,240
talk about a little bit more this summer

00:51:03,320 --> 00:51:12,800
hopefully at the velocity conference are

00:51:08,240 --> 00:51:16,990
there any more questions okay I think

00:51:12,800 --> 00:51:16,990

YouTube URL: https://www.youtube.com/watch?v=HAzeJTgFwDc


