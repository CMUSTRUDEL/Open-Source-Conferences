Title: Continuous Packaging with Project Builder org
Publication date: 2011-12-22
Playlist: FOSDEM 2010
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,000 --> 00:00:05,940
hello everybody so I'm here to speak to

00:00:03,300 --> 00:00:09,830
you about a new project I'm working on

00:00:05,940 --> 00:00:13,860
what's called project builder which is

00:00:09,830 --> 00:00:15,780
trying to provide a tool to support

00:00:13,860 --> 00:00:20,490
mechanisms that I call continues

00:00:15,780 --> 00:00:23,070
packaging so I will try to explain in

00:00:20,490 --> 00:00:26,640
the next slides just to introduce myself

00:00:23,070 --> 00:00:28,260
i'm working at HP i've been involved in

00:00:26,640 --> 00:00:30,900
software engineering since isn't the

00:00:28,260 --> 00:00:36,149
number of yours and also unique systems

00:00:30,900 --> 00:00:38,460
and i'm developing two main open source

00:00:36,149 --> 00:00:40,020
projects so the one which is presented

00:00:38,460 --> 00:00:41,460
today called project builder and another

00:00:40,020 --> 00:00:45,030
one which is mondo rescue which is a

00:00:41,460 --> 00:00:49,170
disaster recovery solution for linux and

00:00:45,030 --> 00:00:54,620
i'm also packaging software from man

00:00:49,170 --> 00:00:57,420
river bit for fedora trying to be useful

00:00:54,620 --> 00:00:59,850
so what what is the problem i had and

00:00:57,420 --> 00:01:03,149
one of the problem i'm not alone to do

00:00:59,850 --> 00:01:07,080
you have in fact that you have linux

00:01:03,149 --> 00:01:08,250
users will try to use software and most

00:01:07,080 --> 00:01:10,049
of the time there are much more

00:01:08,250 --> 00:01:12,360
interested by using packages because

00:01:10,049 --> 00:01:14,310
it's much easier for them to download

00:01:12,360 --> 00:01:16,080
the package and to install it and the

00:01:14,310 --> 00:01:18,710
distribution most most of the people do

00:01:16,080 --> 00:01:21,270
not know how to build the software just

00:01:18,710 --> 00:01:23,430
barely know how to use it so they don't

00:01:21,270 --> 00:01:25,140
know how to build it so most of the

00:01:23,430 --> 00:01:27,680
people would prefer to use their

00:01:25,140 --> 00:01:30,689
packages RPM package is jen two packages

00:01:27,680 --> 00:01:34,500
whatever you have on your underlying

00:01:30,689 --> 00:01:36,509
operating system it's convenient because

00:01:34,500 --> 00:01:38,490
also its respects a convention of your

00:01:36,509 --> 00:01:41,310
distribution so it puts the files in the

00:01:38,490 --> 00:01:42,930
right place it's uninstalled cleanly so

00:01:41,310 --> 00:01:44,549
when you uninstall the package you know

00:01:42,930 --> 00:01:48,570
that you have removed everything which

00:01:44,549 --> 00:01:50,610
was bowled by this package so it's easy

00:01:48,570 --> 00:01:52,649
for users it's easy for administrators

00:01:50,610 --> 00:01:54,899
as well because its remaining compliance

00:01:52,649 --> 00:01:57,659
with the way 0 insulin the distribution

00:01:54,899 --> 00:02:00,750
they can put it in a yum repository

00:01:57,659 --> 00:02:03,960
apt-get repository and get channels or

00:02:00,750 --> 00:02:07,560
however you call them of packages and

00:02:03,960 --> 00:02:09,259
pull packages from that channel such a

00:02:07,560 --> 00:02:12,030
smooth integration introduce

00:02:09,259 --> 00:02:13,290
administration time I mean I did as

00:02:12,030 --> 00:02:15,750
everybody

00:02:13,290 --> 00:02:19,230
was a slacker distribution and I did my

00:02:15,750 --> 00:02:21,150
share of configure mag make install

00:02:19,230 --> 00:02:22,890
stuff and it's funny for a couple of

00:02:21,150 --> 00:02:26,189
years but after that you want to use the

00:02:22,890 --> 00:02:27,989
software more than compile it so it's

00:02:26,189 --> 00:02:30,450
much easier to use packages sudden

00:02:27,989 --> 00:02:32,549
number of people still like to use tall

00:02:30,450 --> 00:02:34,849
balls and comprise our own packages

00:02:32,549 --> 00:02:36,750
either for optimization performances

00:02:34,849 --> 00:02:39,420
because the distribution does not

00:02:36,750 --> 00:02:40,709
provide a packaging system because they

00:02:39,420 --> 00:02:42,480
want to use the latest and greatest

00:02:40,709 --> 00:02:44,219
version of the software and software

00:02:42,480 --> 00:02:47,040
does not provide any package for them so

00:02:44,219 --> 00:02:50,069
they want to use that and very few

00:02:47,040 --> 00:02:51,959
people are in fact using the

00:02:50,069 --> 00:02:54,689
configuration management system provided

00:02:51,959 --> 00:02:56,939
by the project because they don't know

00:02:54,689 --> 00:03:00,180
how to do it I don't know where it is

00:02:56,939 --> 00:03:02,669
it's complicated to extract data from it

00:03:00,180 --> 00:03:05,280
to rebuild from it each project at its

00:03:02,669 --> 00:03:07,230
own way of dealing with that so you

00:03:05,280 --> 00:03:09,810
don't have a lot of people and users

00:03:07,230 --> 00:03:15,299
testing the current state of development

00:03:09,810 --> 00:03:18,269
of the software when we're going on the

00:03:15,299 --> 00:03:20,489
developer mindset they don't really care

00:03:18,269 --> 00:03:22,519
about packages what what is their

00:03:20,489 --> 00:03:24,720
interests is they are grouped around

00:03:22,519 --> 00:03:26,940
configuration management system could be

00:03:24,720 --> 00:03:29,780
whatever they have subversion git

00:03:26,940 --> 00:03:33,150
mercurial better and the one who produce

00:03:29,780 --> 00:03:35,879
software and our format which is

00:03:33,150 --> 00:03:39,180
generally a file that it uploaded on a

00:03:35,879 --> 00:03:40,829
website or an ftp server to give the

00:03:39,180 --> 00:03:44,400
availability of the software to desire

00:03:40,829 --> 00:03:46,290
users and you don't really know how they

00:03:44,400 --> 00:03:48,090
are working what type of software

00:03:46,290 --> 00:03:49,949
engineering tools are trying to put in

00:03:48,090 --> 00:03:52,889
place to improve the quality of the

00:03:49,949 --> 00:03:54,540
software are you using auto tools for

00:03:52,889 --> 00:03:57,359
example to make the software independent

00:03:54,540 --> 00:03:59,430
from the underlying platform do they

00:03:57,359 --> 00:04:01,139
have an installation procedure a clean

00:03:59,430 --> 00:04:04,319
one which integrates correctly with the

00:04:01,139 --> 00:04:07,199
package system was they using any

00:04:04,319 --> 00:04:09,419
quality tools or engineering tools also

00:04:07,199 --> 00:04:11,040
afraid about distribution picking their

00:04:09,419 --> 00:04:15,269
application doing stuff that don't want

00:04:11,040 --> 00:04:17,729
with it that's a environment and then

00:04:15,269 --> 00:04:20,070
you have a certain area of people people

00:04:17,729 --> 00:04:22,620
were packaged herbs sleeping in the room

00:04:20,070 --> 00:04:24,840
for example and those people are already

00:04:22,620 --> 00:04:25,460
strange beasts because the texture

00:04:24,840 --> 00:04:29,319
results

00:04:25,460 --> 00:04:32,449
the developers the work was sometimes a

00:04:29,319 --> 00:04:34,520
configuration management system most of

00:04:32,449 --> 00:04:35,930
the time today and I want to produce

00:04:34,520 --> 00:04:39,169
packages for their preferred

00:04:35,930 --> 00:04:40,610
distribution but sometimes those people

00:04:39,169 --> 00:04:41,840
do not exist so you don't have the

00:04:40,610 --> 00:04:44,509
software package for your distribution

00:04:41,840 --> 00:04:45,949
so I'm missing sometimes are not on

00:04:44,509 --> 00:04:47,870
times they have a life that have

00:04:45,949 --> 00:04:50,240
children's do something else have their

00:04:47,870 --> 00:04:53,150
own projects whatever so the lag behind

00:04:50,240 --> 00:04:54,620
the version that exists second lag

00:04:53,150 --> 00:04:56,690
behind the main version but you could

00:04:54,620 --> 00:04:59,960
like behind in term of intermediate

00:04:56,690 --> 00:05:02,720
version and sometimes they don't want to

00:04:59,960 --> 00:05:04,940
package all the time all the night so

00:05:02,720 --> 00:05:06,320
they don't they're just release stable

00:05:04,940 --> 00:05:07,940
version but they don't want to release

00:05:06,320 --> 00:05:09,699
intermediate version so that people can

00:05:07,940 --> 00:05:12,740
test them so it's very difficult to have

00:05:09,699 --> 00:05:14,530
except for very famous project you don't

00:05:12,740 --> 00:05:16,580
have generally is possibility to taste

00:05:14,530 --> 00:05:19,039
intermediate versions for for

00:05:16,580 --> 00:05:20,360
applications and they also have some

00:05:19,039 --> 00:05:23,509
tools it could use to improve the

00:05:20,360 --> 00:05:26,599
quality of their production so rpm lint

00:05:23,509 --> 00:05:28,849
for RPM systems the Indian for Debian

00:05:26,599 --> 00:05:30,110
packages but sometimes they use it

00:05:28,849 --> 00:05:31,610
sometimes they don't use it some

00:05:30,110 --> 00:05:35,030
distribution I've guidelines some other

00:05:31,610 --> 00:05:40,270
not so again the quality of the the

00:05:35,030 --> 00:05:43,669
resulting packages is not insured so

00:05:40,270 --> 00:05:45,620
what is the solution so it's wrong it's

00:05:43,669 --> 00:05:48,560
wrong header I should write what is our

00:05:45,620 --> 00:05:51,919
solution I mean that's my view on the

00:05:48,560 --> 00:05:55,909
subject as packaging should be a project

00:05:51,919 --> 00:05:58,580
concern it should not be just a concern

00:05:55,909 --> 00:06:00,139
from people making daily packages for

00:05:58,580 --> 00:06:03,020
their preferred distribution and

00:06:00,139 --> 00:06:06,620
especially for a smaller project it's

00:06:03,020 --> 00:06:07,940
its formula mandatory step as all the

00:06:06,620 --> 00:06:10,550
other step in the development of the

00:06:07,940 --> 00:06:11,630
projects just testing the installation

00:06:10,550 --> 00:06:13,490
procedure should be part of that

00:06:11,630 --> 00:06:15,440
sometimes it's not people should be

00:06:13,490 --> 00:06:18,190
really concerned inside the project

00:06:15,440 --> 00:06:21,469
about the fact that their software will

00:06:18,190 --> 00:06:23,479
insured and in a distribution and should

00:06:21,469 --> 00:06:25,099
be packaged in the distribution so they

00:06:23,479 --> 00:06:28,130
should make it easy for people to

00:06:25,099 --> 00:06:30,469
package the distribution my opinions as

00:06:28,130 --> 00:06:32,960
it should do that probably themselves or

00:06:30,469 --> 00:06:34,610
at least helping a lot to make it

00:06:32,960 --> 00:06:36,080
possible

00:06:34,610 --> 00:06:38,240
but they should make it as easy as

00:06:36,080 --> 00:06:40,939
possible and my mantra personally is

00:06:38,240 --> 00:06:44,900
packaged early package always not even

00:06:40,939 --> 00:06:47,599
often but always I am fed up installing

00:06:44,900 --> 00:06:50,780
tar files on the system each time I do

00:06:47,599 --> 00:06:53,330
that I regret it later on because I have

00:06:50,780 --> 00:06:55,460
to clean stuff manually I don't have my

00:06:53,330 --> 00:06:57,409
dependency tree anymore I don't know to

00:06:55,460 --> 00:06:59,060
which file up belongs to what package I

00:06:57,409 --> 00:07:01,430
cannot query the database to have

00:06:59,060 --> 00:07:03,680
information on it so so it's it's always

00:07:01,430 --> 00:07:05,719
a nightmare so rather than doing that I

00:07:03,680 --> 00:07:07,639
really prefer to package the application

00:07:05,719 --> 00:07:09,080
before using it even if I do a test of

00:07:07,639 --> 00:07:11,840
an application takes a bit of time but

00:07:09,080 --> 00:07:15,620
it's really much more interesting at the

00:07:11,840 --> 00:07:17,539
end so my my personal approach is to say

00:07:15,620 --> 00:07:22,550
packaging should be your only way to

00:07:17,539 --> 00:07:25,580
deliver software to your users and users

00:07:22,550 --> 00:07:27,050
could be internal users external users

00:07:25,580 --> 00:07:30,020
depending on where you are working and

00:07:27,050 --> 00:07:32,870
for whom you're you're working it really

00:07:30,020 --> 00:07:35,599
I mean it's not a dream because that's

00:07:32,870 --> 00:07:37,580
the way I am working now all the

00:07:35,599 --> 00:07:39,379
projects I'm working on so it's really

00:07:37,580 --> 00:07:42,229
such that you can really achieve it's

00:07:39,379 --> 00:07:43,940
possible there is a hopper read I don't

00:07:42,229 --> 00:07:45,500
want to say there is no over else or is

00:07:43,940 --> 00:07:49,789
of course on overhead but it's really

00:07:45,500 --> 00:07:51,379
minimal it's not much longer to produce

00:07:49,789 --> 00:07:53,240
the package that you produce the top

00:07:51,379 --> 00:07:55,639
files that you will give to your users

00:07:53,240 --> 00:07:59,000
but it brings much more information in

00:07:55,639 --> 00:08:01,400
terms of metadata and coherency there

00:07:59,000 --> 00:08:04,039
was a maximum benefit because the

00:08:01,400 --> 00:08:06,349
problem if you use tools to produce your

00:08:04,039 --> 00:08:08,449
packages that will be consistent that

00:08:06,349 --> 00:08:10,550
will be reproducible they will get all

00:08:08,449 --> 00:08:12,740
the benefits of having packages to erase

00:08:10,550 --> 00:08:14,479
the database etc it's easy to integrate

00:08:12,740 --> 00:08:16,639
your packages in your distribution so if

00:08:14,479 --> 00:08:18,169
your upstream and you care about it you

00:08:16,639 --> 00:08:20,180
will make it easy for distribution to

00:08:18,169 --> 00:08:22,430
pick your projects and integrate it and

00:08:20,180 --> 00:08:25,060
so you will have more coverage so you

00:08:22,430 --> 00:08:28,460
will have more users more test cases etc

00:08:25,060 --> 00:08:30,830
so for me in fact if you think about

00:08:28,460 --> 00:08:33,380
packaging you could think of it as a

00:08:30,830 --> 00:08:35,719
marketing activity for your project you

00:08:33,380 --> 00:08:38,539
make it easy for people to use your

00:08:35,719 --> 00:08:40,789
software you communicate better you have

00:08:38,539 --> 00:08:42,680
more testers you have more users more

00:08:40,789 --> 00:08:44,630
return and your project is attracting

00:08:42,680 --> 00:08:47,360
more people and it's much more easy for

00:08:44,630 --> 00:08:47,810
everybody to deal with it so for me is

00:08:47,360 --> 00:08:50,570
so

00:08:47,810 --> 00:08:57,440
Shin is trying to adopt a continuous

00:08:50,570 --> 00:08:59,390
packaging approach which means generally

00:08:57,440 --> 00:09:02,029
you don't if you if you look at the

00:08:59,390 --> 00:09:03,860
classical V cycle approach I don't want

00:09:02,029 --> 00:09:07,490
to set the better one but that's one

00:09:03,860 --> 00:09:10,040
example you design your software you

00:09:07,490 --> 00:09:11,600
have the user requirement functional

00:09:10,040 --> 00:09:13,520
specification design specification and

00:09:11,600 --> 00:09:14,779
you start to code generally you start

00:09:13,520 --> 00:09:17,779
just here because you don't care about

00:09:14,779 --> 00:09:19,370
that and you produce code you produce

00:09:17,779 --> 00:09:21,710
code in your software configuration

00:09:19,370 --> 00:09:24,230
management system and at that point at

00:09:21,710 --> 00:09:26,089
the unit tests level you can already

00:09:24,230 --> 00:09:28,580
produce packages instead of producing

00:09:26,089 --> 00:09:31,250
troubles that you give to the unit test

00:09:28,580 --> 00:09:33,350
team if it exists or to yourself on

00:09:31,250 --> 00:09:35,750
another platform if you want to test on

00:09:33,350 --> 00:09:37,250
separate platforms but instead of you of

00:09:35,750 --> 00:09:40,040
using troubles at that level you can

00:09:37,250 --> 00:09:41,839
already produce packages and I put here

00:09:40,040 --> 00:09:44,240
three lines because I'm working on a

00:09:41,839 --> 00:09:46,250
project which in which we try to address

00:09:44,240 --> 00:09:49,610
multiple providing system so not only a

00:09:46,250 --> 00:09:51,350
difference is supporting different Linux

00:09:49,610 --> 00:09:53,210
operating the Linux distributions but

00:09:51,350 --> 00:09:56,600
also supporting other type of operating

00:09:53,210 --> 00:10:01,070
systems just as a proof of validation so

00:09:56,600 --> 00:10:02,510
i'm working with as an example now solar

00:10:01,070 --> 00:10:05,360
arrays because that's what my customers

00:10:02,510 --> 00:10:06,770
are interested in in parallel to linux

00:10:05,360 --> 00:10:08,690
because we want to be able to deliver

00:10:06,770 --> 00:10:12,020
packages for multiple type of operating

00:10:08,690 --> 00:10:13,820
systems but sharing the sources on one

00:10:12,020 --> 00:10:16,640
side for the project but also trying to

00:10:13,820 --> 00:10:19,190
share to metadata around package

00:10:16,640 --> 00:10:20,750
management when you create a package you

00:10:19,190 --> 00:10:23,390
have a certain number of informations

00:10:20,750 --> 00:10:25,850
which are similar whatever the package

00:10:23,390 --> 00:10:29,060
format you have so similar between

00:10:25,850 --> 00:10:31,640
debian between RPM between series you

00:10:29,060 --> 00:10:34,970
have a name you have a version you have

00:10:31,640 --> 00:10:37,010
a restock you have a header line you

00:10:34,970 --> 00:10:39,410
have a description and even some people

00:10:37,010 --> 00:10:41,810
try to join to make to share the

00:10:39,410 --> 00:10:44,120
description and the header to translate

00:10:41,810 --> 00:10:46,790
them all together I think it's very good

00:10:44,120 --> 00:10:48,740
ID but you can share a lot of metadata

00:10:46,790 --> 00:10:50,360
if you are producing your software

00:10:48,740 --> 00:10:53,180
between all the package management

00:10:50,360 --> 00:10:56,720
system and even in part of the build of

00:10:53,180 --> 00:10:59,770
your software is the same on different

00:10:56,720 --> 00:11:02,270
platforms so you could also be able to

00:10:59,770 --> 00:11:04,580
group that information

00:11:02,270 --> 00:11:07,520
not duplicate information that my part

00:11:04,580 --> 00:11:09,530
of my my points here is to avoid

00:11:07,520 --> 00:11:12,380
duplication of reformation maintaining

00:11:09,530 --> 00:11:14,180
it only in one place to produce all

00:11:12,380 --> 00:11:18,020
those packages and those packages can

00:11:14,180 --> 00:11:21,230
make the life themselves along the it's

00:11:18,020 --> 00:11:23,150
a reason cycles so you pass some of them

00:11:21,230 --> 00:11:24,920
to unit tests they give you feedback you

00:11:23,150 --> 00:11:27,380
fix them then you pass an integration

00:11:24,920 --> 00:11:30,290
test your packages validation up to your

00:11:27,380 --> 00:11:32,630
customer and the good stuff is that

00:11:30,290 --> 00:11:34,040
package you're producing here could be

00:11:32,630 --> 00:11:40,130
exactly the same as the one you will

00:11:34,040 --> 00:11:43,850
deliver to your end customer so my

00:11:40,130 --> 00:11:46,160
personal also to that problem analyzes

00:11:43,850 --> 00:11:48,500
it I'm a system administrator on some of

00:11:46,160 --> 00:11:50,360
the system I managing so I just want to

00:11:48,500 --> 00:11:52,880
use packages I don't want to mess up my

00:11:50,360 --> 00:11:54,770
system by installing something else and

00:11:52,880 --> 00:11:56,540
I have a deployment server so I just

00:11:54,770 --> 00:11:59,750
want to put my packages in my deployment

00:11:56,540 --> 00:12:02,000
server and benefit from that I'm also

00:11:59,750 --> 00:12:04,100
developing a Prince's project so I want

00:12:02,000 --> 00:12:06,110
to make tests easy for me so when I

00:12:04,100 --> 00:12:07,940
install a test version of my package I

00:12:06,110 --> 00:12:11,170
don't want to have multiple versions and

00:12:07,940 --> 00:12:12,950
multiple directories having the risk of

00:12:11,170 --> 00:12:15,590
interdependency between themselves

00:12:12,950 --> 00:12:17,660
making the test failing for not good

00:12:15,590 --> 00:12:19,640
reasons so I don't want to screw up my

00:12:17,660 --> 00:12:21,590
system and I prefer to install a package

00:12:19,640 --> 00:12:24,380
remove a package inch time and I want to

00:12:21,590 --> 00:12:26,420
make tests on my own application I'm

00:12:24,380 --> 00:12:29,330
also packaging software for distribution

00:12:26,420 --> 00:12:31,430
so I want to make it easy until you have

00:12:29,330 --> 00:12:33,620
a tool for me to help me produce package

00:12:31,430 --> 00:12:36,800
much more easy for further distribution

00:12:33,620 --> 00:12:39,230
I'm dealing with and of course I'm the

00:12:36,800 --> 00:12:41,780
I'm the only developer of the project on

00:12:39,230 --> 00:12:44,300
which I'm working mostly we are very few

00:12:41,780 --> 00:12:46,550
so I'm also marketing department of my

00:12:44,300 --> 00:12:49,250
project so producing packages from your

00:12:46,550 --> 00:12:51,530
way to say to people hey my project is

00:12:49,250 --> 00:12:53,720
great just it's easy to use for you just

00:12:51,530 --> 00:12:55,310
grab the package install it very easily

00:12:53,720 --> 00:12:59,300
in your package management system and

00:12:55,310 --> 00:13:00,890
you have access to my application I have

00:12:59,300 --> 00:13:02,660
a background of software engineering so

00:13:00,890 --> 00:13:04,930
I don't want to duplicate anything as

00:13:02,660 --> 00:13:07,790
well as possible if you can avoid it so

00:13:04,930 --> 00:13:10,940
including made a data around package

00:13:07,790 --> 00:13:12,920
management and I found no real tool to

00:13:10,940 --> 00:13:14,990
to do what I wanted to do at that time

00:13:12,920 --> 00:13:16,010
so I stopped writing my own in fact I

00:13:14,990 --> 00:13:18,380
started

00:13:16,010 --> 00:13:20,900
everybody writing set of script to

00:13:18,380 --> 00:13:24,170
support my first project and finding out

00:13:20,900 --> 00:13:26,270
that some other project especially I had

00:13:24,170 --> 00:13:28,970
colleagues in HP wanting to package some

00:13:26,270 --> 00:13:30,680
other applications and we thought it

00:13:28,970 --> 00:13:33,140
could be useful to reuse mad scripts

00:13:30,680 --> 00:13:35,930
with my script or not adaptable easily

00:13:33,140 --> 00:13:37,940
so I rewrote the project completely from

00:13:35,930 --> 00:13:40,340
scratch in order to be able to make it

00:13:37,940 --> 00:13:43,490
project independent in fact as most as

00:13:40,340 --> 00:13:45,470
possible so there are other number of

00:13:43,490 --> 00:13:47,750
goals along around the development and

00:13:45,470 --> 00:13:49,430
the goal to support your continuous

00:13:47,750 --> 00:13:51,290
packaging approaches to be agnostic

00:13:49,430 --> 00:13:54,020
because you don't know what people want

00:13:51,290 --> 00:13:56,450
to use in term of tooling to develop

00:13:54,020 --> 00:13:58,820
that project so it should be

00:13:56,450 --> 00:14:02,150
configuration management system agnostic

00:13:58,820 --> 00:14:06,020
it can support flat files if you have

00:14:02,150 --> 00:14:08,830
flat files but as I said we are in the

00:14:06,020 --> 00:14:11,900
21st century so now it's time to use

00:14:08,830 --> 00:14:14,960
subversion CVS mercurial get better or

00:14:11,900 --> 00:14:17,560
whatever you want an project builder as

00:14:14,960 --> 00:14:20,180
current this is supporting those five

00:14:17,560 --> 00:14:22,700
configuration management system but you

00:14:20,180 --> 00:14:24,650
may add easily more if you need it

00:14:22,700 --> 00:14:26,660
should also be agnostic in the way it's

00:14:24,650 --> 00:14:28,400
working for generating packages so it

00:14:26,660 --> 00:14:32,030
should be able to generate rpm debs

00:14:28,400 --> 00:14:35,270
ebuild slackware packages currently I'm

00:14:32,030 --> 00:14:37,540
building packages for my projects for

00:14:35,270 --> 00:14:39,950
something like more than 60 different

00:14:37,540 --> 00:14:44,120
distribution so distribution being

00:14:39,950 --> 00:14:46,760
something like federer version 74 I 386

00:14:44,120 --> 00:14:51,140
so this is one distribution 1201

00:14:46,760 --> 00:14:53,540
combination of a distribution it support

00:14:51,140 --> 00:14:55,910
also the repositories linked to those

00:14:53,540 --> 00:15:00,020
distribution so it creates indexes for

00:14:55,910 --> 00:15:02,210
young for you a PMI for apt it also

00:15:00,020 --> 00:15:04,940
supports solaris packaging since the

00:15:02,210 --> 00:15:07,400
last version and it's now its effect it

00:15:04,940 --> 00:15:10,340
has always been but it's much more easy

00:15:07,400 --> 00:15:12,950
to prove it it's easy to adapt it to new

00:15:10,340 --> 00:15:15,140
package management system appearing so I

00:15:12,950 --> 00:15:18,710
have requests working for HP to have

00:15:15,140 --> 00:15:21,530
support for the package format of HP

00:15:18,710 --> 00:15:26,060
wigs that I could very easily add two to

00:15:21,530 --> 00:15:28,190
the system without any problem one of my

00:15:26,060 --> 00:15:29,720
my issue personally was also it should

00:15:28,190 --> 00:15:31,910
be built environment agonal see

00:15:29,720 --> 00:15:35,269
so I want to build packages locally on

00:15:31,910 --> 00:15:37,759
my laptop or on my build machine and I

00:15:35,269 --> 00:15:39,680
want to be able also to build cross bill

00:15:37,759 --> 00:15:42,680
for other systems which I don't have

00:15:39,680 --> 00:15:44,449
which I'm not running locally and there

00:15:42,680 --> 00:15:47,389
are multiple way to do that so either

00:15:44,449 --> 00:15:48,980
you are using fruit and you have some

00:15:47,389 --> 00:15:52,160
tools depending on the distribution to

00:15:48,980 --> 00:15:55,279
generate those fruits so rinse mark for

00:15:52,160 --> 00:15:57,199
mainly rpm systems that bootstrap for

00:15:55,279 --> 00:15:58,610
debian based systems that you can use to

00:15:57,199 --> 00:16:01,459
generate the Schrute and villainville

00:15:58,610 --> 00:16:03,740
into those fruit another way for me

00:16:01,459 --> 00:16:06,889
which was more convenient in my opinion

00:16:03,740 --> 00:16:10,009
was to use a virtual machine so the tool

00:16:06,889 --> 00:16:12,050
is about you pre builds the Schrute of

00:16:10,009 --> 00:16:14,720
privileges virtual machine for you and

00:16:12,050 --> 00:16:17,449
then use it as a way to build the

00:16:14,720 --> 00:16:19,819
packages which are seen as native

00:16:17,449 --> 00:16:21,680
packages for that build environment be

00:16:19,819 --> 00:16:24,860
to virtual machine or virtual

00:16:21,680 --> 00:16:28,430
environments schruted so supported right

00:16:24,860 --> 00:16:30,889
now qame kvm it's not leave that we're

00:16:28,430 --> 00:16:33,680
up to now so it should it's part of the

00:16:30,889 --> 00:16:35,089
evolution and still need to work on to

00:16:33,680 --> 00:16:39,079
support other type of virtualization

00:16:35,089 --> 00:16:41,269
mechanism mechanism more easily and one

00:16:39,079 --> 00:16:46,129
of sort of the goal was to have no

00:16:41,269 --> 00:16:48,170
impact on the original project so you

00:16:46,129 --> 00:16:50,660
don't want to put more pressure on

00:16:48,170 --> 00:16:52,910
upstream you want to be able to package

00:16:50,660 --> 00:16:54,589
them so if upstream want to package you

00:16:52,910 --> 00:16:56,990
can use a tool to do it and it's very

00:16:54,589 --> 00:16:58,459
nice for that that's one of the goal but

00:16:56,990 --> 00:17:00,889
if you want to package for another

00:16:58,459 --> 00:17:02,800
upstream project and you don't want to

00:17:00,889 --> 00:17:04,760
make an impact on them you have your own

00:17:02,800 --> 00:17:07,610
configuration management system

00:17:04,760 --> 00:17:09,740
separated at which you keep all the meta

00:17:07,610 --> 00:17:12,140
data you need to build your packages and

00:17:09,740 --> 00:17:14,510
you can do that for that project without

00:17:12,140 --> 00:17:17,030
themselves not knowing our package in

00:17:14,510 --> 00:17:19,250
any way and you can just take the tar

00:17:17,030 --> 00:17:22,039
file with the md5 sum of the original

00:17:19,250 --> 00:17:24,740
project and use that as an input to your

00:17:22,039 --> 00:17:26,949
tool and it will package it from it

00:17:24,740 --> 00:17:26,949
completely

00:17:30,720 --> 00:17:36,010
so what we're done recently is we have

00:17:33,640 --> 00:17:38,850
used a tool to show to some of our

00:17:36,010 --> 00:17:43,900
customers how to realize a

00:17:38,850 --> 00:17:47,320
multi-platform development cycle as easy

00:17:43,900 --> 00:17:50,580
as possible as I don't pretend it's an

00:17:47,320 --> 00:17:52,780
easy way and energy and easy stuff to do

00:17:50,580 --> 00:17:56,710
so it's mostly interesting for people

00:17:52,780 --> 00:17:58,450
developing in C C++ people developing in

00:17:56,710 --> 00:18:01,120
chav are also type of applications may

00:17:58,450 --> 00:18:03,160
have different problems to solve the

00:18:01,120 --> 00:18:06,190
idea is to say you have a lot of code in

00:18:03,160 --> 00:18:08,140
common and you produce that code you can

00:18:06,190 --> 00:18:10,540
produce it for multiple operating system

00:18:08,140 --> 00:18:12,670
in parallel by sharing a lot of common

00:18:10,540 --> 00:18:14,740
source code having only a minimal set of

00:18:12,670 --> 00:18:18,100
differences between so for example here

00:18:14,740 --> 00:18:21,429
at solaris on spot salaries on x86 and

00:18:18,100 --> 00:18:23,110
linux on x86 and the idea is to say

00:18:21,429 --> 00:18:24,640
generally people are concerned in the

00:18:23,110 --> 00:18:28,630
development up to that point so

00:18:24,640 --> 00:18:31,440
producing executables so we have tools

00:18:28,630 --> 00:18:34,950
inside HP to help them trying to share

00:18:31,440 --> 00:18:37,840
as much as possible common code and to

00:18:34,950 --> 00:18:40,720
isolate in small libraries what is

00:18:37,840 --> 00:18:42,970
different and we provide some tools to

00:18:40,720 --> 00:18:45,610
help them have the missing system called

00:18:42,970 --> 00:18:47,559
in the environment compared to to for

00:18:45,610 --> 00:18:49,660
example a service environment but the

00:18:47,559 --> 00:18:52,000
idea is to say we can go one step

00:18:49,660 --> 00:18:54,130
further and adding project builder in

00:18:52,000 --> 00:18:55,990
the loop we can go to produce the

00:18:54,130 --> 00:18:58,920
executables and then from those

00:18:55,990 --> 00:19:01,809
executables data file man pages

00:18:58,920 --> 00:19:04,270
configuration files or what is needed

00:19:01,809 --> 00:19:06,910
for a project work you can package them

00:19:04,270 --> 00:19:09,520
using the native package system and

00:19:06,910 --> 00:19:12,370
produce local packages just from a

00:19:09,520 --> 00:19:14,470
single repository containing all those

00:19:12,370 --> 00:19:17,410
information plus some metadata

00:19:14,470 --> 00:19:21,220
information and it will be clear in a in

00:19:17,410 --> 00:19:24,130
the next slide so in addition of what

00:19:21,220 --> 00:19:26,440
I've described up to now there are some

00:19:24,130 --> 00:19:28,360
goodies coming with the tool I have a

00:19:26,440 --> 00:19:31,750
set of existing virtual machines so

00:19:28,360 --> 00:19:35,410
currently on one of my desk at work I

00:19:31,750 --> 00:19:38,290
have 120 gigabytes of virtual machines

00:19:35,410 --> 00:19:40,300
ready for me to be called to build

00:19:38,290 --> 00:19:42,730
packages for all those distributions

00:19:40,300 --> 00:19:43,360
that I've built during time so since

00:19:42,730 --> 00:19:46,990
federer

00:19:43,360 --> 00:19:50,740
five since Monday I've attend one since

00:19:46,990 --> 00:19:54,340
D bn3 et cetera et cetera so I keep all

00:19:50,740 --> 00:19:57,070
my virtual machines because one problem

00:19:54,340 --> 00:19:59,140
the distribution are not so good to deal

00:19:57,070 --> 00:20:01,210
with is that distributions are looking

00:19:59,140 --> 00:20:03,429
at the future so they want to produce

00:20:01,210 --> 00:20:06,130
packages for the current distribution

00:20:03,429 --> 00:20:09,100
and the future distributions they are

00:20:06,130 --> 00:20:11,799
not very concerned by the past but

00:20:09,100 --> 00:20:13,809
customers our customers are often

00:20:11,799 --> 00:20:15,730
running all the distributions at what

00:20:13,809 --> 00:20:18,610
people are developing on and the need

00:20:15,730 --> 00:20:20,290
and you have projects as backport

00:20:18,610 --> 00:20:22,929
initiatives for Vice distribution they

00:20:20,290 --> 00:20:25,570
need to have packages also for the

00:20:22,929 --> 00:20:31,360
running systems which are sometimes late

00:20:25,570 --> 00:20:33,640
in there in the evolution of the

00:20:31,360 --> 00:20:35,760
distribution itself so they have to be

00:20:33,640 --> 00:20:39,340
able to produce packages for an old IBM

00:20:35,760 --> 00:20:41,790
old stable for a former mon travail

00:20:39,340 --> 00:20:44,590
federal whatever distribution read for

00:20:41,790 --> 00:20:46,299
who still is using I mean I don't know

00:20:44,590 --> 00:20:48,669
if you are working for customers or

00:20:46,299 --> 00:20:53,230
yourself are you still using read for

00:20:48,669 --> 00:20:58,090
any environment one two three customers

00:20:53,230 --> 00:20:59,799
for okay not a lot personally the

00:20:58,090 --> 00:21:02,080
customers in front of which I'm working

00:20:59,799 --> 00:21:05,350
with they have a lot of old stuff like

00:21:02,080 --> 00:21:07,570
that and so having forgotten an easy way

00:21:05,350 --> 00:21:09,400
to produce packages not only for the

00:21:07,570 --> 00:21:11,350
latest and greatest version of the

00:21:09,400 --> 00:21:13,059
distribution but also for all the

00:21:11,350 --> 00:21:15,669
version is something which is quite

00:21:13,059 --> 00:21:19,000
important so I have my VMS to do that

00:21:15,669 --> 00:21:21,790
myself and the tool is helping you if

00:21:19,000 --> 00:21:24,000
you give it the ISO image to recreate

00:21:21,790 --> 00:21:26,650
the build environment for whatever of

00:21:24,000 --> 00:21:29,850
older version that you want to package

00:21:26,650 --> 00:21:31,990
for there is a certain number of macro

00:21:29,850 --> 00:21:34,840
available inside the system and you can

00:21:31,990 --> 00:21:37,990
define your own macro in order to share

00:21:34,840 --> 00:21:40,900
the metadata so for example i define one

00:21:37,990 --> 00:21:42,880
macro falls the header of the package

00:21:40,900 --> 00:21:46,960
which is a line describing what the

00:21:42,880 --> 00:21:49,299
package does that macro is stored in a

00:21:46,960 --> 00:21:51,730
single configuration file and every

00:21:49,299 --> 00:21:55,290
package i met is referring to that macro

00:21:51,730 --> 00:21:58,140
so i don't have to update the macro

00:21:55,290 --> 00:22:00,390
all my packages when I change as I had a

00:21:58,140 --> 00:22:03,750
line or whether change description etc

00:22:00,390 --> 00:22:07,200
etc so I try to concentrate in a single

00:22:03,750 --> 00:22:09,570
place the metadata and to reuse them

00:22:07,200 --> 00:22:12,030
through that micro-mechanism across the

00:22:09,570 --> 00:22:14,760
packages I use and I was very pleased

00:22:12,030 --> 00:22:17,700
with that because when I added solari

00:22:14,760 --> 00:22:21,300
support to the tool I didn't have to

00:22:17,700 --> 00:22:23,250
change anything in my in my tool or in

00:22:21,300 --> 00:22:25,320
my description of existing packages i

00:22:23,250 --> 00:22:28,260
just created a template for the new

00:22:25,320 --> 00:22:30,240
service package referring the macro that

00:22:28,260 --> 00:22:32,700
were already existing and the package

00:22:30,240 --> 00:22:35,070
were just right out of the box so it's

00:22:32,700 --> 00:22:37,410
quite interesting when we create a new

00:22:35,070 --> 00:22:40,380
project the tool will create a skeleton

00:22:37,410 --> 00:22:43,410
for you providing you with templates for

00:22:40,380 --> 00:22:46,620
an RPM type of build a data type of

00:22:43,410 --> 00:22:48,990
build a gentle type of build and a sore

00:22:46,620 --> 00:22:52,590
eyes now type of build so it gives you a

00:22:48,990 --> 00:22:54,840
skeleton of course it does not have seen

00:22:52,590 --> 00:22:56,940
the open suse build system

00:22:54,840 --> 00:22:59,970
demonstrations they have nice GUI so I

00:22:56,940 --> 00:23:03,210
don't have the GUI and they have some

00:22:59,970 --> 00:23:05,250
automatic way of creating the build part

00:23:03,210 --> 00:23:07,950
of the package I don't deal with that

00:23:05,250 --> 00:23:12,240
it's up to you to deal with a build part

00:23:07,950 --> 00:23:14,040
but the rest can be helped a lot and it

00:23:12,240 --> 00:23:15,540
brought some goodies for money which I

00:23:14,040 --> 00:23:17,070
find useful for me i don't know if it's

00:23:15,540 --> 00:23:20,100
useful for other people but i mentioned

00:23:17,070 --> 00:23:21,990
them anyway i do the delivery of my

00:23:20,100 --> 00:23:25,920
packages on my ftp server directly

00:23:21,990 --> 00:23:28,950
through ssh and I rebuild the indexes on

00:23:25,920 --> 00:23:31,860
the SFTP server so as soon as I publish

00:23:28,950 --> 00:23:34,380
a new version of my project people doing

00:23:31,860 --> 00:23:36,480
yell up that will get a new version on

00:23:34,380 --> 00:23:38,910
their server if they use my repository

00:23:36,480 --> 00:23:41,400
as as a main repository to get packages

00:23:38,910 --> 00:23:43,230
again when I do a new version I have a

00:23:41,400 --> 00:23:47,130
way to make announcement to the mailing

00:23:43,230 --> 00:23:48,870
list automatically printing the list of

00:23:47,130 --> 00:23:53,040
new packages that have built bend etc

00:23:48,870 --> 00:23:55,500
etc I use snapchat features of VM and

00:23:53,040 --> 00:23:57,600
virtual environments if possible I'm

00:23:55,500 --> 00:23:59,340
working on integrating test because

00:23:57,600 --> 00:24:01,350
either have the infrastructure now it's

00:23:59,340 --> 00:24:03,180
very easy if you launch a virtual

00:24:01,350 --> 00:24:05,700
machine for example to build a software

00:24:03,180 --> 00:24:07,800
it's as easy to launch a virtual machine

00:24:05,700 --> 00:24:08,370
and to do something else such as testing

00:24:07,800 --> 00:24:10,440
that

00:24:08,370 --> 00:24:12,120
selling correctly and that it works

00:24:10,440 --> 00:24:15,770
where you want so you can add a certain

00:24:12,120 --> 00:24:18,780
number of test script 22 to the tool

00:24:15,770 --> 00:24:20,250
it's about patches if you are not an

00:24:18,780 --> 00:24:23,580
upstream project so that you can

00:24:20,250 --> 00:24:25,890
integrate the patches into into the

00:24:23,580 --> 00:24:28,380
packages your you are making it launches

00:24:25,890 --> 00:24:31,260
automatically Lynchian an RPM lint at

00:24:28,380 --> 00:24:34,770
the end so if you want to check the

00:24:31,260 --> 00:24:37,410
currency of your packages it's easy for

00:24:34,770 --> 00:24:40,460
you don't want to pass too much time on

00:24:37,410 --> 00:24:44,220
that so this is a big picture at the end

00:24:40,460 --> 00:24:46,020
you have the users were the developers

00:24:44,220 --> 00:24:48,120
were producing the projects through the

00:24:46,020 --> 00:24:50,880
configuration management system and then

00:24:48,120 --> 00:24:52,950
provide one top five for you and you

00:24:50,880 --> 00:24:55,200
have the packages with which general

00:24:52,950 --> 00:25:00,179
would generally are providing metadata

00:24:55,200 --> 00:25:01,740
around project and create other files so

00:25:00,179 --> 00:25:05,300
project builder what it does it

00:25:01,740 --> 00:25:07,890
instantiates all the metadata and create

00:25:05,300 --> 00:25:10,410
at are another type file containing

00:25:07,890 --> 00:25:12,690
multiple build files for all the

00:25:10,410 --> 00:25:15,540
distribution supported so it creates one

00:25:12,690 --> 00:25:17,280
spec file / RPM distributions that you

00:25:15,540 --> 00:25:19,230
need it creates one DB on directory

00:25:17,280 --> 00:25:22,260
containing all the files needed for

00:25:19,230 --> 00:25:24,660
Debian / debian ubuntu type of

00:25:22,260 --> 00:25:27,510
distribution it creates one e build file

00:25:24,660 --> 00:25:29,460
for gen 2 etc etc and then we can build

00:25:27,510 --> 00:25:31,559
locally and generate your packages on

00:25:29,460 --> 00:25:34,770
your running machine or you can sell

00:25:31,559 --> 00:25:37,200
those to tar files into your vm and the

00:25:34,770 --> 00:25:39,059
vm is also using the tool and generates

00:25:37,200 --> 00:25:41,610
a package is the same way and at the end

00:25:39,059 --> 00:25:43,770
you can push all that to the ftp server

00:25:41,610 --> 00:25:47,880
and have it delivered to to your

00:25:43,770 --> 00:25:49,980
community here is a list of commands so

00:25:47,880 --> 00:25:53,940
i don't know how it's working during the

00:25:49,980 --> 00:25:56,460
event there is a possibility so the

00:25:53,940 --> 00:26:00,059
slide set will be is all stood on the

00:25:56,460 --> 00:26:01,530
project subversion so you can have

00:26:00,059 --> 00:26:03,600
access to it and i suppose that the

00:26:01,530 --> 00:26:05,309
presentation will be available so i will

00:26:03,600 --> 00:26:07,679
not necessarily detail all those

00:26:05,309 --> 00:26:09,900
commands one by one I'm not sure it's

00:26:07,679 --> 00:26:11,880
interesting for you you will have access

00:26:09,900 --> 00:26:13,800
to to the presentation so you can look

00:26:11,880 --> 00:26:16,380
at it and ask me question if you are

00:26:13,800 --> 00:26:18,990
interested with it globally you have

00:26:16,380 --> 00:26:20,820
comments to take from the configuration

00:26:18,990 --> 00:26:22,020
management system information creates

00:26:20,820 --> 00:26:24,450
the top files

00:26:22,020 --> 00:26:27,900
from the top files created packages sent

00:26:24,450 --> 00:26:30,060
them to the ssh send them through

00:26:27,900 --> 00:26:33,510
buildings through a vm or of your

00:26:30,060 --> 00:26:35,090
environment etc etc so southern number

00:26:33,510 --> 00:26:40,530
of so it's a command line interface tool

00:26:35,090 --> 00:26:42,630
it's like a an svn or are a mercurial

00:26:40,530 --> 00:26:46,260
type of syntax you have PBS and the

00:26:42,630 --> 00:26:49,820
commands and the parameters I find it

00:26:46,260 --> 00:26:52,610
easy to use but of course I rolled it so

00:26:49,820 --> 00:26:56,570
so if you if you look back at the

00:26:52,610 --> 00:27:00,300
building software so I have customers

00:26:56,570 --> 00:27:04,290
currently big ones that i can not

00:27:00,300 --> 00:27:07,110
necessary name we're very interested by

00:27:04,290 --> 00:27:10,550
migrating from solaris to linux and I

00:27:07,110 --> 00:27:12,660
say way but how to do that and how to

00:27:10,550 --> 00:27:14,490
another another problem is that their

00:27:12,660 --> 00:27:17,040
own custom suits are producing software

00:27:14,490 --> 00:27:18,510
for and customers and those end

00:27:17,040 --> 00:27:20,580
customers I don't necessarily want to

00:27:18,510 --> 00:27:22,290
abandon the sort of a spat form that

00:27:20,580 --> 00:27:26,760
that bold in the past was fast back

00:27:22,290 --> 00:27:29,340
platform so my customers needs to

00:27:26,760 --> 00:27:30,810
maintain in parallel different version

00:27:29,340 --> 00:27:34,320
of software during certain amount of

00:27:30,810 --> 00:27:38,520
time and so they need to have the

00:27:34,320 --> 00:27:41,100
capacity to easily build for multiple

00:27:38,520 --> 00:27:43,500
targets reducing the cost as much as

00:27:41,100 --> 00:27:44,850
possible because if they go to linux is

00:27:43,500 --> 00:27:47,790
because they want to reduce the cost of

00:27:44,850 --> 00:27:49,830
the Ender lying platform and of the

00:27:47,790 --> 00:27:53,130
software subscription contracts cetera

00:27:49,830 --> 00:27:54,720
so if they if it come from old hp-ux AIX

00:27:53,130 --> 00:27:56,850
are erased you go to the next because

00:27:54,720 --> 00:27:59,220
the cost is interesting so at the end it

00:27:56,850 --> 00:28:03,030
should cost less but if you duplicate

00:27:59,220 --> 00:28:05,850
the build and the maintenance load on

00:28:03,030 --> 00:28:07,950
that they will not gain the money they

00:28:05,850 --> 00:28:10,080
expect to gain in the process so their

00:28:07,950 --> 00:28:11,580
idea is to say okay we will have for a

00:28:10,080 --> 00:28:14,700
certain amount of time to maintain in

00:28:11,580 --> 00:28:17,190
parallel to development trees one on our

00:28:14,700 --> 00:28:19,470
existing platform and one which we are

00:28:17,190 --> 00:28:20,880
promoting on Linux for the future but we

00:28:19,470 --> 00:28:22,560
will have to deal with that in Prada

00:28:20,880 --> 00:28:25,800
during a certain amount of time so

00:28:22,560 --> 00:28:27,720
developers will still work around the

00:28:25,800 --> 00:28:30,480
configuration management system and they

00:28:27,720 --> 00:28:32,980
will produce roughly most of the code

00:28:30,480 --> 00:28:34,809
will be just generate enough to run on

00:28:32,980 --> 00:28:36,340
unique systems that they want to deal

00:28:34,809 --> 00:28:39,460
with and I'm not dealing with something

00:28:36,340 --> 00:28:41,440
other than a unique type of systems and

00:28:39,460 --> 00:28:44,410
then we have to generate some of the

00:28:41,440 --> 00:28:46,360
files which are different providing as a

00:28:44,410 --> 00:28:48,429
missing system calls for example or

00:28:46,360 --> 00:28:51,070
stuff like that which are not compatible

00:28:48,429 --> 00:28:54,520
between different version of UNIX type

00:28:51,070 --> 00:28:56,860
of operating systems and the people on

00:28:54,520 --> 00:28:58,960
top of the development people working on

00:28:56,860 --> 00:29:02,020
the packaging of the software they can

00:28:58,960 --> 00:29:04,210
store in a single database also made a

00:29:02,020 --> 00:29:06,669
data wrong all the packages that those

00:29:04,210 --> 00:29:08,530
team have to produce the will generate

00:29:06,669 --> 00:29:10,510
sort of files and the development team

00:29:08,530 --> 00:29:11,980
will generate our own tar files which

00:29:10,510 --> 00:29:15,010
will be in fact the same in that case

00:29:11,980 --> 00:29:16,240
and south always contain again all the

00:29:15,010 --> 00:29:19,179
information for the multiple

00:29:16,240 --> 00:29:21,010
distributions and using a built form so

00:29:19,179 --> 00:29:23,350
they will probably not use vm as I do

00:29:21,010 --> 00:29:25,990
but they will probably rather you have a

00:29:23,350 --> 00:29:28,179
build environment so dedicated machine

00:29:25,990 --> 00:29:30,370
to build software so there will you to

00:29:28,179 --> 00:29:35,110
be a build farm to produce packages for

00:29:30,370 --> 00:29:36,610
the values project and sub projects that

00:29:35,110 --> 00:29:41,020
they want you to deal with and they

00:29:36,610 --> 00:29:42,640
could have a build form using x86 type

00:29:41,020 --> 00:29:44,620
of platform learning easier linux

00:29:42,640 --> 00:29:47,070
install solar rays they could have spark

00:29:44,620 --> 00:29:55,510
platform to build for four days Parker

00:29:47,070 --> 00:29:57,970
application um so the tool is I've

00:29:55,510 --> 00:30:01,690
worked on the tool since three years now

00:29:57,970 --> 00:30:04,630
I use it to regularly every day for my

00:30:01,690 --> 00:30:08,070
own upstream project so I know it's at

00:30:04,630 --> 00:30:10,510
least working for what I do with it it's

00:30:08,070 --> 00:30:12,460
release under the GPL you can download

00:30:10,510 --> 00:30:14,799
it you can test it I have other

00:30:12,460 --> 00:30:17,080
colleagues in HP working on it a bed so

00:30:14,799 --> 00:30:19,990
begin to receive some feedbacks and some

00:30:17,080 --> 00:30:22,240
improvements there was something I use a

00:30:19,990 --> 00:30:24,130
lot of VMs myself to build a software so

00:30:22,240 --> 00:30:26,559
more tests needs to be done on veteran

00:30:24,130 --> 00:30:29,410
violence I have added the bootstrap very

00:30:26,559 --> 00:30:31,480
recently for my deviant collegues inside

00:30:29,410 --> 00:30:34,059
HP so I'm a manner if I contributor I'm

00:30:31,480 --> 00:30:36,309
much more used to OPM myself but the

00:30:34,059 --> 00:30:38,110
tool the goal of the tools to be really

00:30:36,309 --> 00:30:40,179
independent from that I don't want to

00:30:38,110 --> 00:30:41,650
create a tool which has a flavor of one

00:30:40,179 --> 00:30:44,799
distribution I prefer to make it

00:30:41,650 --> 00:30:46,680
generate enough and and integrates all

00:30:44,799 --> 00:30:49,410
the tool which are needed so that boots

00:30:46,680 --> 00:30:51,690
app is not at the same level as what i

00:30:49,410 --> 00:30:53,280
have for the other distributions so at

00:30:51,690 --> 00:30:55,710
something I need to work on including

00:30:53,280 --> 00:30:58,020
rinse and muck I've met some patches for

00:30:55,710 --> 00:31:00,150
rents because it was not able to work

00:30:58,020 --> 00:31:03,810
correctly rinse is nice because rinse is

00:31:00,150 --> 00:31:05,820
working as well on rpm base distribution

00:31:03,810 --> 00:31:08,790
and all that best distribution so you

00:31:05,820 --> 00:31:11,960
can because what is it strange in that

00:31:08,790 --> 00:31:13,620
native platform if you think about that

00:31:11,960 --> 00:31:16,170
environment when you are building

00:31:13,620 --> 00:31:18,450
packages locally people can build

00:31:16,170 --> 00:31:20,130
packages on their own distribution but

00:31:18,450 --> 00:31:21,870
it could be a large set of different

00:31:20,130 --> 00:31:24,540
distributions themselves so the tool

00:31:21,870 --> 00:31:29,160
needs to run on two different type of

00:31:24,540 --> 00:31:31,230
distribution very easy so we can second

00:31:29,160 --> 00:31:32,790
use a Schrute which are different from

00:31:31,230 --> 00:31:34,560
one distribution to another and shoot

00:31:32,790 --> 00:31:36,390
mechanism which are different from what

00:31:34,560 --> 00:31:38,550
distribution to another what I need to

00:31:36,390 --> 00:31:40,620
work on us and I have seen that also in

00:31:38,550 --> 00:31:44,130
the one of the previous presentation is

00:31:40,620 --> 00:31:46,020
LSB schrutes report knowing that the LSB

00:31:44,130 --> 00:31:49,440
Schrute that is provided by the linux

00:31:46,020 --> 00:31:51,270
foundation is a bit insufficient in

00:31:49,440 --> 00:31:55,080
terms of the tools are providing so

00:31:51,270 --> 00:31:57,330
there are a lot of libraries and modules

00:31:55,080 --> 00:31:58,730
that are not available in the LSB fruits

00:31:57,330 --> 00:32:01,410
that we'd need to be added before

00:31:58,730 --> 00:32:02,970
project builder is about to run in CLS

00:32:01,410 --> 00:32:06,180
be fruit itself which is not the case

00:32:02,970 --> 00:32:08,430
with a fully a complete distribution

00:32:06,180 --> 00:32:09,840
because even if it's there is something

00:32:08,430 --> 00:32:12,240
missing project builder will download

00:32:09,840 --> 00:32:15,090
what is missing to have it working

00:32:12,240 --> 00:32:17,730
automatically I need to work on making

00:32:15,090 --> 00:32:20,640
more generic and supporting libvirt and

00:32:17,730 --> 00:32:23,970
virg to make the interaction with

00:32:20,640 --> 00:32:25,410
virtual machine more capable of handling

00:32:23,970 --> 00:32:27,900
all other type of virtualization

00:32:25,410 --> 00:32:32,280
mechanism it will add an abstraction

00:32:27,900 --> 00:32:34,740
layer in Enzo tool for that we can add

00:32:32,280 --> 00:32:38,190
also CMS all the virtual machine systems

00:32:34,740 --> 00:32:40,560
but as every open suse developer I'm

00:32:38,190 --> 00:32:42,600
working for myself so I put in the tool

00:32:40,560 --> 00:32:45,150
what is interesting for me if some other

00:32:42,600 --> 00:32:47,790
people need something else I welcome

00:32:45,150 --> 00:32:50,610
patches of course so for example basara

00:32:47,790 --> 00:32:54,930
is not yet here VMware exam are not

00:32:50,610 --> 00:32:57,480
tested currently need to support Mel

00:32:54,930 --> 00:33:00,300
deliveries and just SSH even if SSH is

00:32:57,480 --> 00:33:03,780
quite generic

00:33:00,300 --> 00:33:07,080
enough for me but and people wanting to

00:33:03,780 --> 00:33:09,900
use build farm the reason need to look

00:33:07,080 --> 00:33:13,590
at how to interface that too with Bill

00:33:09,900 --> 00:33:15,900
boat which is a tool to monitor a build

00:33:13,590 --> 00:33:17,610
farm and what is interesting it in bill

00:33:15,900 --> 00:33:19,860
ball is a queuing mechanism which I

00:33:17,610 --> 00:33:21,450
don't have in in project builder and I

00:33:19,860 --> 00:33:23,610
don't want to mess with that I prefer to

00:33:21,450 --> 00:33:25,830
rely on another tool and we'll go load

00:33:23,610 --> 00:33:28,860
the boat is also very interesting in the

00:33:25,830 --> 00:33:30,930
reporting it provides to you which what

00:33:28,860 --> 00:33:33,090
has been built what has been done it

00:33:30,930 --> 00:33:35,460
creates a web page is dynamically

00:33:33,090 --> 00:33:37,800
containing information whatever you have

00:33:35,460 --> 00:33:39,960
you have produced in term of packages so

00:33:37,800 --> 00:33:42,750
this this interaction is something I

00:33:39,960 --> 00:33:44,790
need to work on a signature support is

00:33:42,750 --> 00:33:47,250
currently not provided because I had

00:33:44,790 --> 00:33:49,560
problems with RPM on debian it's simpler

00:33:47,250 --> 00:33:52,230
on RPM it does not work correctly with

00:33:49,560 --> 00:33:54,510
the gpg agents for example and I want to

00:33:52,230 --> 00:33:56,070
make it automatically available so if

00:33:54,510 --> 00:33:58,620
you don't have the g PG agent running

00:33:56,070 --> 00:34:00,750
its you don't want to sign every package

00:33:58,620 --> 00:34:03,090
sure manually it's not possible when you

00:34:00,750 --> 00:34:05,520
build a large set of packages a

00:34:03,090 --> 00:34:07,350
documentation is improving especially

00:34:05,520 --> 00:34:12,090
since the time I metal slide that I have

00:34:07,350 --> 00:34:14,520
made an internal lab in HP for my

00:34:12,090 --> 00:34:16,350
colleagues so now i have a lab document

00:34:14,520 --> 00:34:18,810
which describe how to start with a

00:34:16,350 --> 00:34:22,200
project from scratch which is available

00:34:18,810 --> 00:34:23,970
on the website of the project so it

00:34:22,200 --> 00:34:25,950
really gives you all the steps to do

00:34:23,970 --> 00:34:28,950
packaging of your application from

00:34:25,950 --> 00:34:31,950
nothing up to producing packages for DBN

00:34:28,950 --> 00:34:35,520
or PM using virtual machines and virtual

00:34:31,950 --> 00:34:36,900
environments SoDo make is not here i

00:34:35,520 --> 00:34:39,000
think anymore but because you had a

00:34:36,900 --> 00:34:40,950
train to catch but one of the

00:34:39,000 --> 00:34:43,500
possibilities so the tool is written in

00:34:40,950 --> 00:34:46,230
perl and the break is written a config

00:34:43,500 --> 00:34:48,810
model module for pearl which allows you

00:34:46,230 --> 00:34:51,390
to easily manage configuration

00:34:48,810 --> 00:34:52,410
management files and one of the problem

00:34:51,390 --> 00:34:55,380
current is that I don't have any

00:34:52,410 --> 00:34:57,450
graphical interface including too many

00:34:55,380 --> 00:34:59,070
plates configuration files and I have a

00:34:57,450 --> 00:35:01,740
certain number of configuration files

00:34:59,070 --> 00:35:04,710
and items so config model will be would

00:35:01,740 --> 00:35:07,950
be a very good tool to provide help

00:35:04,710 --> 00:35:12,190
information on how to fill the

00:35:07,950 --> 00:35:18,450
configuration file content some links

00:35:12,190 --> 00:35:25,810
on it and I'm done just on time

00:35:18,450 --> 00:35:35,920
exceptionally okay I have one minute for

00:35:25,810 --> 00:35:38,349
questions great you have some ways to

00:35:35,920 --> 00:35:42,849
get feedbacks when the build fails on

00:35:38,349 --> 00:35:44,290
one of the VMS um when a bold-faced

00:35:42,849 --> 00:35:47,859
generally you don't get the packages

00:35:44,290 --> 00:35:52,540
back okay so let's get back we are

00:35:47,859 --> 00:35:54,579
because my my you're not able to know if

00:35:52,540 --> 00:35:59,380
this package doesn't work on this

00:35:54,579 --> 00:36:01,990
version of this OS well generally you

00:35:59,380 --> 00:36:03,420
will know at least as a atusa first when

00:36:01,990 --> 00:36:06,910
you when I create for example the

00:36:03,420 --> 00:36:09,609
federal 13 is out tomorrow Oh in two

00:36:06,910 --> 00:36:11,770
months I don't know i will create my new

00:36:09,609 --> 00:36:13,839
vm for federal certain we set it up and

00:36:11,770 --> 00:36:15,910
then i will launch my build on federal a

00:36:13,839 --> 00:36:17,650
certain most of the time it will work

00:36:15,910 --> 00:36:19,750
just fine because there is no big change

00:36:17,650 --> 00:36:22,060
between fedora 12 which is already built

00:36:19,750 --> 00:36:24,609
for and pharaoh uncertain if there are

00:36:22,060 --> 00:36:25,810
some problems in the bill mechanism then

00:36:24,609 --> 00:36:29,829
i will look at them and i will have to

00:36:25,810 --> 00:36:31,329
solve them in my metadata is a set of

00:36:29,829 --> 00:36:33,579
the media that i am managing so it could

00:36:31,329 --> 00:36:36,430
be a problem with respect fire it could

00:36:33,579 --> 00:36:38,050
be a dependency which is not manage the

00:36:36,430 --> 00:36:42,400
same way between also distribution etc

00:36:38,050 --> 00:36:44,500
so so do you reinstall from scratch your

00:36:42,400 --> 00:36:46,780
VMS every time you install a you build

00:36:44,500 --> 00:36:50,530
or installer package so a good idea is

00:36:46,780 --> 00:36:53,440
to use snapshot so you create your vm at

00:36:50,530 --> 00:36:55,690
first you snapshot it the way you have

00:36:53,440 --> 00:36:57,609
created it and then you always restart

00:36:55,690 --> 00:37:01,390
from the snapshot project builder will

00:36:57,609 --> 00:37:05,319
upload from the main sow seeds fedora 13

00:37:01,390 --> 00:37:06,970
they will take the young account is in

00:37:05,319 --> 00:37:10,119
package missing for building your

00:37:06,970 --> 00:37:13,270
package it's analyzed so we are looking

00:37:10,119 --> 00:37:15,819
at bill requires and requires lines and

00:37:13,270 --> 00:37:17,349
for begin as well and we install

00:37:15,819 --> 00:37:19,390
dynamically the packages which are

00:37:17,349 --> 00:37:22,240
missing inside a vm or the virtual

00:37:19,390 --> 00:37:25,040
environment and then we try to build

00:37:22,240 --> 00:37:27,170
inside that environment and I

00:37:25,040 --> 00:37:29,780
the end if it's a snapshot your revert

00:37:27,170 --> 00:37:38,090
to the original virtual machine that you

00:37:29,780 --> 00:37:42,520
had to your safe I have one more in

00:37:38,090 --> 00:37:48,320
number do you handle security on the VMS

00:37:42,520 --> 00:37:50,420
let's say if a package tries to reach

00:37:48,320 --> 00:37:53,180
the network of stuff like that do you

00:37:50,420 --> 00:37:55,940
cut the network or you don't really

00:37:53,180 --> 00:37:59,060
handle that part now I don't really

00:37:55,940 --> 00:38:00,980
under the pub because for me it's it's a

00:37:59,060 --> 00:38:05,630
sort of sandbox I mean I'm building

00:38:00,980 --> 00:38:09,980
myself a vm so I trust it mmm as much as

00:38:05,630 --> 00:38:12,950
I trust myself to behave it correctly so

00:38:09,980 --> 00:38:15,170
building the package so tool has been

00:38:12,950 --> 00:38:18,050
designed for upstream people wanting to

00:38:15,170 --> 00:38:19,220
package easily for because up some

00:38:18,050 --> 00:38:21,350
people general I don't know how to

00:38:19,220 --> 00:38:23,090
package so having a tool for them to

00:38:21,350 --> 00:38:26,270
have them making package more easily and

00:38:23,090 --> 00:38:27,410
for beta version is very interesting so

00:38:26,270 --> 00:38:30,800
the general I know what the application

00:38:27,410 --> 00:38:33,530
is doing and there is no good reason to

00:38:30,800 --> 00:38:36,650
make to put more security in the build

00:38:33,530 --> 00:38:40,940
process and then it also contacts I mean

00:38:36,650 --> 00:38:42,860
and in a in any case in the most case if

00:38:40,940 --> 00:38:44,750
the vm is completely trashed because

00:38:42,860 --> 00:38:47,330
package made something is business the

00:38:44,750 --> 00:38:50,810
bold steps make something completely

00:38:47,330 --> 00:38:53,020
ugly inside your vm you crush the vm

00:38:50,810 --> 00:38:55,010
your build one and you fix your build

00:38:53,020 --> 00:38:58,000
step because there is something wrong

00:38:55,010 --> 00:39:00,680
with your build instructions somewhere

00:38:58,000 --> 00:39:02,420
but there is no reason there is an ssh

00:39:00,680 --> 00:39:06,260
communication between the host and the

00:39:02,420 --> 00:39:08,150
guest is the way i'm communicating and i

00:39:06,260 --> 00:39:12,830
create a dedicated account inside the vm

00:39:08,150 --> 00:39:17,480
called PB which and i always build nan

00:39:12,830 --> 00:39:19,820
rout inside the vm so it's quite limited

00:39:17,480 --> 00:39:21,830
in terms of damages that you can create

00:39:19,820 --> 00:39:23,810
inside the vm because you can erase

00:39:21,830 --> 00:39:25,820
everything home by your own account

00:39:23,810 --> 00:39:27,970
which is not a lot inside the vm just

00:39:25,820 --> 00:39:32,170
have your home directory mainly so

00:39:27,970 --> 00:39:32,170

YouTube URL: https://www.youtube.com/watch?v=G7TShN-XFbU


