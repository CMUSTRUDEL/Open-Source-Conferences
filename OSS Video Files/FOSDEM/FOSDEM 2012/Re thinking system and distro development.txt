Title: Re thinking system and distro development
Publication date: 2013-02-05
Playlist: FOSDEM 2012
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,800 --> 00:00:06,990
ladies and gentlemen may I have your

00:00:03,600 --> 00:00:21,300
attention for our next speaker less

00:00:06,990 --> 00:00:25,080
busyness how many of you are involved in

00:00:21,300 --> 00:00:33,420
the development of a linux or bsd or her

00:00:25,080 --> 00:00:36,690
distribution or has ever been I want to

00:00:33,420 --> 00:00:41,879
apologize beforehand because I might say

00:00:36,690 --> 00:00:43,320
something stupid about you however I

00:00:41,879 --> 00:00:45,149
would also like everyone else to give

00:00:43,320 --> 00:00:47,750
these people & applause because they're

00:00:45,149 --> 00:00:47,750
doing an awesome job

00:00:51,769 --> 00:01:01,850
without people who develop distributions

00:00:55,219 --> 00:01:06,270
most of us wouldn't be running linux or

00:01:01,850 --> 00:01:08,270
basely or heard etc I'm going to be

00:01:06,270 --> 00:01:13,350
mentioning a linux a lot in this big

00:01:08,270 --> 00:01:16,229
speech or talk but I believe most of the

00:01:13,350 --> 00:01:25,380
things I say will apply to all this

00:01:16,229 --> 00:01:30,990
regardless of Colonel the current way we

00:01:25,380 --> 00:01:35,149
developed distributions is okay the end

00:01:30,990 --> 00:01:38,369
product that we create works people

00:01:35,149 --> 00:01:44,880
successfully run linux for for all sorts

00:01:38,369 --> 00:01:47,039
of purposes and so there's no huge

00:01:44,880 --> 00:01:48,569
problem there that immediately requires

00:01:47,039 --> 00:01:52,140
everyone to drop what they're doing and

00:01:48,569 --> 00:01:54,780
fix things however I believe we can do

00:01:52,140 --> 00:01:57,450
much better and if you can do much

00:01:54,780 --> 00:02:04,140
better i believe the end product will be

00:01:57,450 --> 00:02:06,989
a whole lot better as well in 1991 about

00:02:04,140 --> 00:02:11,640
august if i remember correctly my

00:02:06,989 --> 00:02:14,510
computer a 386 pc was the first one in

00:02:11,640 --> 00:02:17,400
the world to get linux installed on it

00:02:14,510 --> 00:02:19,290
Lina's had been growing his his Linux

00:02:17,400 --> 00:02:22,260
system on top of an existing minix

00:02:19,290 --> 00:02:24,840
install and he was about ready to start

00:02:22,260 --> 00:02:29,069
making a release for other people to use

00:02:24,840 --> 00:02:32,459
and acquire them requiring them to first

00:02:29,069 --> 00:02:34,459
by minix and then install minix and then

00:02:32,459 --> 00:02:39,450
fiddle with it on the electrons linux

00:02:34,459 --> 00:02:42,360
seem like a bad idea so he borrowed my

00:02:39,450 --> 00:02:45,540
computer in order to create an

00:02:42,360 --> 00:02:49,800
installation method which he ingeniously

00:02:45,540 --> 00:02:53,069
named the boot floppy and the boot

00:02:49,800 --> 00:02:55,590
floppy was the default way of installing

00:02:53,069 --> 00:02:58,410
linux for for some years until real

00:02:55,590 --> 00:03:00,750
linux distributions came along with the

00:02:58,410 --> 00:03:01,720
boot floppy installation was quite easy

00:03:00,750 --> 00:03:05,700
and smooth

00:03:01,720 --> 00:03:10,090
you booted off the floppy and then you

00:03:05,700 --> 00:03:12,730
fiddle with your text editor in hex mode

00:03:10,090 --> 00:03:16,690
if possible in order to modify your

00:03:12,730 --> 00:03:18,820
master boot record and specify where the

00:03:16,690 --> 00:03:22,240
root file system is and then you copied

00:03:18,820 --> 00:03:25,690
the files here and there and you did a

00:03:22,240 --> 00:03:29,140
lot of things some of which were

00:03:25,690 --> 00:03:31,630
documented and if you were really lucky

00:03:29,140 --> 00:03:33,870
and you knew exactly what to do after

00:03:31,630 --> 00:03:36,970
you had gone through all of this work

00:03:33,870 --> 00:03:40,540
what you could do with your system was

00:03:36,970 --> 00:03:42,910
to compile more software and in order to

00:03:40,540 --> 00:03:45,850
get the software on the machine you

00:03:42,910 --> 00:03:48,670
might have to feel some more recourse

00:03:45,850 --> 00:03:51,790
there was no networking so you went to

00:03:48,670 --> 00:03:53,770
somewhere that had networking downloaded

00:03:51,790 --> 00:03:58,320
some files put them on floppies copied

00:03:53,770 --> 00:04:01,630
them over to your machine unpacked ran

00:03:58,320 --> 00:04:05,140
well if you were lucky you've run than

00:04:01,630 --> 00:04:07,300
the slash dot slash configure and make

00:04:05,140 --> 00:04:12,250
and make install but most of that stuff

00:04:07,300 --> 00:04:15,450
was invented later so the process was

00:04:12,250 --> 00:04:18,070
not so smooth as it should have been

00:04:15,450 --> 00:04:22,150
however for those of us who were living

00:04:18,070 --> 00:04:26,260
through that period it was smoother than

00:04:22,150 --> 00:04:29,229
than we expected management of

00:04:26,260 --> 00:04:32,370
expectations is very important or so

00:04:29,229 --> 00:04:32,370
marketing people tell me

00:04:37,370 --> 00:04:49,200
after a while some real distributions

00:04:42,300 --> 00:04:54,080
happened there was SLS MCC and all sorts

00:04:49,200 --> 00:04:56,880
of things SLS became slack there in 1993

00:04:54,080 --> 00:04:58,950
to details that you may have heard of

00:04:56,880 --> 00:05:04,350
started one is called debian the other

00:04:58,950 --> 00:05:07,710
is called Red Hat and the this list

00:05:04,350 --> 00:05:10,820
shows both eventually developed a

00:05:07,710 --> 00:05:16,680
packaging manager that of their own

00:05:10,820 --> 00:05:20,040
couldn't share code what that made

00:05:16,680 --> 00:05:22,500
things better the difference between

00:05:20,040 --> 00:05:26,850
something like the package and apt

00:05:22,500 --> 00:05:32,580
versus rpn and yum or or other from

00:05:26,850 --> 00:05:36,630
transfer RPM isn't big it's more it's

00:05:32,580 --> 00:05:40,320
tiny all the mainstream disclose linux

00:05:36,630 --> 00:05:42,930
distros these days essentially use it

00:05:40,320 --> 00:05:45,690
vivillon's technology to produce

00:05:42,930 --> 00:05:51,050
something that the differences between

00:05:45,690 --> 00:05:54,750
the end results are to also very big and

00:05:51,050 --> 00:05:56,910
what this means is not automatically

00:05:54,750 --> 00:06:01,260
distros they look completely different

00:05:56,910 --> 00:06:04,310
but they're not so different it's a

00:06:01,260 --> 00:06:04,310
black horse and white horse

00:06:05,600 --> 00:06:15,500
so I became a debian developer in 1996 I

00:06:09,740 --> 00:06:17,630
work for ubuntu for two years and i'm

00:06:15,500 --> 00:06:19,840
fiddling with bits here and there

00:06:17,630 --> 00:06:22,250
elsewhere as well so have some

00:06:19,840 --> 00:06:26,150
background in how these trees are

00:06:22,250 --> 00:06:30,530
created and i'm not going to be telling

00:06:26,150 --> 00:06:31,640
everyone what we are doing wrong but

00:06:30,530 --> 00:06:35,020
actually i'm going to be telling two

00:06:31,640 --> 00:06:40,490
things that we could be better instead

00:06:35,020 --> 00:06:45,340
the point of distributions is sometimes

00:06:40,490 --> 00:06:48,170
hard to get especially for people who

00:06:45,340 --> 00:06:51,560
have no involvement in this in

00:06:48,170 --> 00:06:54,260
developing distributions it seems like a

00:06:51,560 --> 00:06:57,530
distribution is there so that end-user's

00:06:54,260 --> 00:06:59,300
don't have to compile anything but

00:06:57,530 --> 00:07:02,000
actually distributions do a little bit

00:06:59,300 --> 00:07:06,290
more they provide the tools to do an

00:07:02,000 --> 00:07:09,170
initial install and trust me if you have

00:07:06,290 --> 00:07:12,170
to use a text editor in order to modify

00:07:09,170 --> 00:07:17,110
Master Boot Record then you want a tool

00:07:12,170 --> 00:07:17,110
to do that for it's not fun

00:07:18,040 --> 00:07:22,540
distributions also provide tools for

00:07:20,120 --> 00:07:26,360
managing and installing and upgrading

00:07:22,540 --> 00:07:28,940
more software a distribution is not just

00:07:26,360 --> 00:07:31,100
the initial install it's also installing

00:07:28,940 --> 00:07:35,980
additional software and making sure that

00:07:31,100 --> 00:07:35,980
everything goes well in that process

00:07:36,910 --> 00:07:45,770
anyone here who has not used one of of

00:07:40,660 --> 00:07:48,590
any distress packaging manager but so

00:07:45,770 --> 00:07:51,020
you know you know the feeling of it

00:07:48,590 --> 00:07:52,820
being very nice to install you hear

00:07:51,020 --> 00:07:57,640
about a new program so you just install

00:07:52,820 --> 00:08:00,710
it and it's there this is crucial for

00:07:57,640 --> 00:08:03,200
distributions if you had to go to the

00:08:00,710 --> 00:08:04,730
internet and find that random website

00:08:03,200 --> 00:08:09,140
that may have a binary for your

00:08:04,730 --> 00:08:11,180
distributions things would fall apart we

00:08:09,140 --> 00:08:13,630
might want that as well but it should be

00:08:11,180 --> 00:08:16,070
the primary my way of doing things

00:08:13,630 --> 00:08:16,940
distributions make sure that upgrades

00:08:16,070 --> 00:08:22,100
work

00:08:16,940 --> 00:08:25,280
if you install something a new pc and

00:08:22,100 --> 00:08:27,730
later on the distribution as a new

00:08:25,280 --> 00:08:30,170
version it should be possible to upgrade

00:08:27,730 --> 00:08:31,760
if updates are difficult then you have

00:08:30,170 --> 00:08:37,370
to do a reinstall all the time and that

00:08:31,760 --> 00:08:44,240
gets tedious but that's the simple

00:08:37,370 --> 00:08:47,030
technical part of distributions the next

00:08:44,240 --> 00:08:50,810
thing I want to talk about this is not a

00:08:47,030 --> 00:08:54,320
technical distributions need to choose

00:08:50,810 --> 00:08:56,900
the software that include the choice

00:08:54,320 --> 00:08:58,850
might be made based on license which is

00:08:56,900 --> 00:09:02,210
basically what they be end of if it's

00:08:58,850 --> 00:09:06,410
free software debian included or wants

00:09:02,210 --> 00:09:08,030
to include it if you have a distribution

00:09:06,410 --> 00:09:11,260
that is more specialized it might choose

00:09:08,030 --> 00:09:13,790
only software for a particular purpose

00:09:11,260 --> 00:09:16,130
it might be a distributions that's meant

00:09:13,790 --> 00:09:19,250
for one corporation only so they only

00:09:16,130 --> 00:09:22,790
include software for that corporation

00:09:19,250 --> 00:09:24,590
what they need and there's all sorts of

00:09:22,790 --> 00:09:27,020
different kinds of criteria you might

00:09:24,590 --> 00:09:28,970
use but the point is that you have to

00:09:27,020 --> 00:09:31,610
choose there's two men too much software

00:09:28,970 --> 00:09:34,370
that that you might include there's no

00:09:31,610 --> 00:09:37,250
point in including everything and then

00:09:34,370 --> 00:09:39,350
the big one all the software that's in a

00:09:37,250 --> 00:09:42,110
distribution needs to be integrated so

00:09:39,350 --> 00:09:45,980
it works together the integration might

00:09:42,110 --> 00:09:50,720
be simple like deciding that all manual

00:09:45,980 --> 00:09:53,300
pages go into same directory which is

00:09:50,720 --> 00:09:55,810
surprisingly difficult sometime and it

00:09:53,300 --> 00:10:00,080
might be more complicated it might be

00:09:55,810 --> 00:10:03,740
that you want to provide an integration

00:10:00,080 --> 00:10:07,100
method by which a web application has

00:10:03,740 --> 00:10:11,089
access to a web server and a database

00:10:07,100 --> 00:10:14,180
engine and possibly some other things so

00:10:11,089 --> 00:10:16,130
that the people who create the package

00:10:14,180 --> 00:10:18,200
for web packages for web applications

00:10:16,130 --> 00:10:21,080
don't all need to invent the same things

00:10:18,200 --> 00:10:24,710
and the people who install things don't

00:10:21,080 --> 00:10:27,080
all need to go then and configure 47

00:10:24,710 --> 00:10:29,209
different configuration files in order

00:10:27,080 --> 00:10:32,730
to get Apache to start

00:10:29,209 --> 00:10:37,110
all of this work is something that tends

00:10:32,730 --> 00:10:38,610
to be hidden up streams don't see it

00:10:37,110 --> 00:10:42,360
because it happens within the district

00:10:38,610 --> 00:10:45,120
and down story users don't see much of

00:10:42,360 --> 00:10:51,750
it because or they don't realize that

00:10:45,120 --> 00:10:56,370
it's there because it just works and all

00:10:51,750 --> 00:10:58,620
of these things are things that I think

00:10:56,370 --> 00:11:02,279
distributions as they currently exist do

00:10:58,620 --> 00:11:09,690
reasonably well but I think we can be

00:11:02,279 --> 00:11:12,060
truly awesome and it should be the big

00:11:09,690 --> 00:11:14,610
problem I see with modern mainstream

00:11:12,060 --> 00:11:17,790
distributions is that they are a little

00:11:14,610 --> 00:11:24,269
bit too big meaning they are little bit

00:11:17,790 --> 00:11:28,199
too complex Debbie ins apt to has a

00:11:24,269 --> 00:11:30,410
command which can produce a graph which

00:11:28,199 --> 00:11:32,630
shows the dependencies and

00:11:30,410 --> 00:11:39,329
interconnections between different

00:11:32,630 --> 00:11:41,279
packages this is not the whole graph the

00:11:39,329 --> 00:11:47,550
whole graph is too big for my laptop to

00:11:41,279 --> 00:11:49,410
compute this graph is for the set of

00:11:47,550 --> 00:11:53,360
packages that belonging to the Debian

00:11:49,410 --> 00:11:58,680
build-essential group namely basically

00:11:53,360 --> 00:12:01,920
GCC for C and C++ make and a few other

00:11:58,680 --> 00:12:10,079
things this is only enough to compile a

00:12:01,920 --> 00:12:12,630
few simple programs all the the mature

00:12:10,079 --> 00:12:16,610
if you can see it but there's different

00:12:12,630 --> 00:12:18,720
kinds of of symbols there that

00:12:16,610 --> 00:12:21,420
correspond to packages and then there

00:12:18,720 --> 00:12:25,610
are errors between them that correspond

00:12:21,420 --> 00:12:25,610
the dependencies and and so on

00:12:28,060 --> 00:12:37,060
this is horrible I don't think anyone

00:12:33,260 --> 00:12:42,470
here is able to manage this manually

00:12:37,060 --> 00:12:45,170
much of that is for shared libraries for

00:12:42,470 --> 00:12:48,920
shared libraries we have tools for

00:12:45,170 --> 00:12:52,120
managing things automatically if you

00:12:48,920 --> 00:12:55,520
have an executive all a binary program

00:12:52,120 --> 00:12:57,620
the elf headers telling you which shared

00:12:55,520 --> 00:12:59,540
libraries it needs and then you can

00:12:57,620 --> 00:13:02,000
write a tool to find you find out which

00:12:59,540 --> 00:13:05,090
packages you need to have those there's

00:13:02,000 --> 00:13:09,290
libraries shared libraries are easy in

00:13:05,090 --> 00:13:12,110
this valley however it's not possible to

00:13:09,290 --> 00:13:14,270
write to do this for every gas for

00:13:12,110 --> 00:13:17,840
example if you have a package that

00:13:14,270 --> 00:13:20,270
includes a shell script and your

00:13:17,840 --> 00:13:24,130
distribution happens to provide two

00:13:20,270 --> 00:13:28,750
different implementations of shell

00:13:24,130 --> 00:13:32,720
debian has has a tiny POSIX compliant

00:13:28,750 --> 00:13:37,520
implementation and bash which is not

00:13:32,720 --> 00:13:39,890
tiny how do you decide which one you

00:13:37,520 --> 00:13:42,140
want to depend on if possible you want

00:13:39,890 --> 00:13:44,480
to depend on the smaller one because

00:13:42,140 --> 00:13:48,620
this makes it possible for people who do

00:13:44,480 --> 00:13:51,980
embedded systems based on debian to use

00:13:48,620 --> 00:13:53,840
the smaller shell if you want to be safe

00:13:51,980 --> 00:13:56,630
you can always just depend on bash but

00:13:53,840 --> 00:13:59,720
then the end resolve this works we want

00:13:56,630 --> 00:14:06,320
to choose and if you can write a program

00:13:59,720 --> 00:14:09,260
that can certifiably able be able to

00:14:06,320 --> 00:14:10,760
decide whether dash is better than is

00:14:09,260 --> 00:14:13,970
sufficient this more one is the

00:14:10,760 --> 00:14:16,120
sufficient then I think there are people

00:14:13,970 --> 00:14:20,030
who would like to give you a PhD

00:14:16,120 --> 00:14:28,490
possibly during a lot the halting

00:14:20,030 --> 00:14:31,460
problem is not fun debian currently has

00:14:28,490 --> 00:14:36,680
about 35,000 packages binary packages

00:14:31,460 --> 00:14:41,590
about 17,000 source packages a graph

00:14:36,680 --> 00:14:44,570
like this if i could compute it

00:14:41,590 --> 00:14:46,850
would have so much information in it

00:14:44,570 --> 00:14:50,450
that it's useless nobody can actually

00:14:46,850 --> 00:14:52,720
make use of it in order to be able to

00:14:50,450 --> 00:14:55,880
manage all of this it would be nice if

00:14:52,720 --> 00:14:59,420
things were simpler I'm going to come

00:14:55,880 --> 00:15:02,180
back to that in a moment but it's not

00:14:59,420 --> 00:15:07,460
just about the complexity of the depends

00:15:02,180 --> 00:15:11,240
fields or requires fields for rpm if you

00:15:07,460 --> 00:15:13,250
have 35,000 binary packages and you're a

00:15:11,240 --> 00:15:16,490
user what do you do when you need to

00:15:13,250 --> 00:15:18,110
install something if someone gives you

00:15:16,490 --> 00:15:19,970
the name of the petition store it's easy

00:15:18,110 --> 00:15:24,080
because you don't need to decide

00:15:19,970 --> 00:15:26,870
anything but if you hear that there's a

00:15:24,080 --> 00:15:31,910
nice program for finding duplicate files

00:15:26,870 --> 00:15:34,990
somewhere in debian what do you do but

00:15:31,910 --> 00:15:37,850
you can do some searches and stuff and

00:15:34,990 --> 00:15:42,620
most people what they do is they enter a

00:15:37,850 --> 00:15:45,850
state called decision paralysis I get

00:15:42,620 --> 00:15:50,630
this in restaurants with large menus

00:15:45,850 --> 00:15:53,660
however geeks who love their computers

00:15:50,630 --> 00:15:55,910
than to be able to overcome this because

00:15:53,660 --> 00:15:57,230
it's a familiar ground for them if I go

00:15:55,910 --> 00:16:01,160
to a restaurant that I've been to before

00:15:57,230 --> 00:16:05,900
it's easy for me to choose something new

00:16:01,160 --> 00:16:07,250
restaurants are a bit harder this is

00:16:05,900 --> 00:16:08,660
imperiled I see this is not the joke

00:16:07,250 --> 00:16:10,190
it's something that actually happens to

00:16:08,660 --> 00:16:12,040
people and it's one of the fundamental

00:16:10,190 --> 00:16:16,610
things you have to know when you make

00:16:12,040 --> 00:16:18,880
user interface designs not that I'm very

00:16:16,610 --> 00:16:24,020
good at that but I hear it's important

00:16:18,880 --> 00:16:27,350
the presenting the user with too many

00:16:24,020 --> 00:16:31,700
options is not good it's difficult to

00:16:27,350 --> 00:16:36,170
choose the case of duplicate file finder

00:16:31,700 --> 00:16:38,240
in debian we have so many tools for that

00:16:36,170 --> 00:16:40,310
now that people are wanting to right

00:16:38,240 --> 00:16:45,470
tools for finding duplicate files

00:16:40,310 --> 00:16:47,690
whiners this was probably a joke by the

00:16:45,470 --> 00:16:51,160
person who suggested it but i think it's

00:16:47,690 --> 00:16:51,160
a viable to ultimate

00:16:59,520 --> 00:17:06,910
the complexity graph isn't so big yet

00:17:03,790 --> 00:17:09,430
that we can't manage we are doing a

00:17:06,910 --> 00:17:12,790
reasonable job of making sure that

00:17:09,430 --> 00:17:14,470
everyone has the right dependences but

00:17:12,790 --> 00:17:17,320
it's only getting worse and worse by the

00:17:14,470 --> 00:17:19,240
time when i became a debian developer i

00:17:17,320 --> 00:17:26,079
knew by heart what every packaged men

00:17:19,240 --> 00:17:28,449
did what's purpose of aero package i had

00:17:26,079 --> 00:17:32,590
installed most of them manually about

00:17:28,449 --> 00:17:37,120
all 200 of them manually at some point

00:17:32,590 --> 00:17:38,590
and other today it's not possible but

00:17:37,120 --> 00:17:43,780
it's not just dependencies that are

00:17:38,590 --> 00:17:48,390
wrong that are too big it's also affect

00:17:43,780 --> 00:17:54,340
things like transitions if you have

00:17:48,390 --> 00:17:57,460
35,000 packages and some of them say say

00:17:54,340 --> 00:17:59,320
the GDK libraries which are there's a

00:17:57,460 --> 00:18:01,810
bunch of them and you're going to

00:17:59,320 --> 00:18:03,490
upgrade those to a new version this

00:18:01,810 --> 00:18:05,530
basically means you have to rebuild

00:18:03,490 --> 00:18:09,190
everything that depends on gtk so all of

00:18:05,530 --> 00:18:13,710
comb and all of xfce and probably a lot

00:18:09,190 --> 00:18:15,760
of other stuff some of that will fail

00:18:13,710 --> 00:18:18,190
sometimes it's a built failure sometimes

00:18:15,760 --> 00:18:22,840
it's another runtime failure that you

00:18:18,190 --> 00:18:25,780
will find about later while you're doing

00:18:22,840 --> 00:18:31,630
this transition somebody starts a

00:18:25,780 --> 00:18:34,570
different one what you get is two groups

00:18:31,630 --> 00:18:39,010
of people working on different sets of

00:18:34,570 --> 00:18:43,270
packages that sometimes overlap I mean

00:18:39,010 --> 00:18:46,770
that case what you get is what I would

00:18:43,270 --> 00:18:49,840
like to use the technical term chaos for

00:18:46,770 --> 00:18:52,630
you have people who make changes in one

00:18:49,840 --> 00:18:55,570
set of packages and in order to fix

00:18:52,630 --> 00:18:58,570
their problems and then cause problems

00:18:55,570 --> 00:19:00,400
for other people who then fix that and

00:18:58,570 --> 00:19:02,530
cause problems back to the first group

00:19:00,400 --> 00:19:05,200
of people and while they're doing this

00:19:02,530 --> 00:19:06,430
ping-pong you get a third group of

00:19:05,200 --> 00:19:08,679
people who want to touch the same

00:19:06,430 --> 00:19:11,590
packages

00:19:08,679 --> 00:19:14,860
so in order to avoid this you have to do

00:19:11,590 --> 00:19:17,289
something and one way of doing this is

00:19:14,860 --> 00:19:21,759
to serialize things you do one

00:19:17,289 --> 00:19:26,350
transition at the time with 17,000

00:19:21,759 --> 00:19:30,039
source packages if we do one transition

00:19:26,350 --> 00:19:34,240
/ source package your releases are going

00:19:30,039 --> 00:19:35,860
to get very long debian has been doing

00:19:34,240 --> 00:19:40,480
doing less than two years per release

00:19:35,860 --> 00:19:44,830
for the past three releases which is

00:19:40,480 --> 00:19:47,230
very very lucky and hard to achieve we

00:19:44,830 --> 00:19:49,990
don't want to make that harder we want

00:19:47,230 --> 00:19:55,299
to make it slower correct you want to

00:19:49,990 --> 00:19:57,249
make it easier of course it's also not

00:19:55,299 --> 00:20:06,190
just about development it's also what

00:19:57,249 --> 00:20:09,549
things like testing and support there's

00:20:06,190 --> 00:20:14,980
hundreds of people in this room how many

00:20:09,549 --> 00:20:18,309
of you are running debian a for the

00:20:14,980 --> 00:20:21,059
number i would suspect that each of you

00:20:18,309 --> 00:20:24,039
has a unique set of packages installed

00:20:21,059 --> 00:20:27,279
nobody else in this room has the same

00:20:24,039 --> 00:20:29,320
set of packages installed even if

00:20:27,279 --> 00:20:31,809
there's two people having the same

00:20:29,320 --> 00:20:35,950
packages they're very likely to have

00:20:31,809 --> 00:20:37,240
different versions how do we test when

00:20:35,950 --> 00:20:39,100
you're developing a distribution how do

00:20:37,240 --> 00:20:43,529
we test so that all these combinations

00:20:39,100 --> 00:20:43,529
of packages and versions actually work I

00:20:43,769 --> 00:20:50,409
think there were a third combinatorial

00:20:46,480 --> 00:20:54,190
explosion applies here it also applies

00:20:50,409 --> 00:20:56,529
when when when your grandfather calls

00:20:54,190 --> 00:20:59,860
you have tells you that my linux laptop

00:20:56,529 --> 00:21:03,519
doesn't boot anymore or the browser

00:20:59,860 --> 00:21:06,460
crashes all the time how do you fix this

00:21:03,519 --> 00:21:08,740
now you might try to reproduce it on

00:21:06,460 --> 00:21:11,759
your own laptop which is running a

00:21:08,740 --> 00:21:13,929
different version of everything and

00:21:11,759 --> 00:21:16,570
doesn't have some of the packages

00:21:13,929 --> 00:21:20,100
installed because he didn't tell you

00:21:16,570 --> 00:21:20,100
that he installed flash himself

00:21:21,810 --> 00:21:30,280
so you get the situation where testing

00:21:25,060 --> 00:21:34,950
is not meaningless but but almost and

00:21:30,280 --> 00:21:34,950
that support is is unnecessarily hard

00:21:38,100 --> 00:21:45,760
for things like transitions basically

00:21:41,890 --> 00:21:49,360
what we want is to be able to branch and

00:21:45,760 --> 00:21:52,540
merge an entire distribution and we want

00:21:49,360 --> 00:21:53,920
to do it with get not with our CS if the

00:21:52,540 --> 00:21:56,920
serialized transitions that's

00:21:53,920 --> 00:22:01,060
essentially be using our cs4 at the

00:21:56,920 --> 00:22:02,650
district level RCS has a global log that

00:22:01,060 --> 00:22:05,010
everyone on earth you have to have that

00:22:02,650 --> 00:22:08,550
work before you can make a change

00:22:05,010 --> 00:22:11,350
exactly like Sierra lysing in transition

00:22:08,550 --> 00:22:16,270
however distributed version control

00:22:11,350 --> 00:22:18,940
systems like it have shown that if you

00:22:16,270 --> 00:22:24,160
have good merging then it's okay for

00:22:18,940 --> 00:22:26,320
people to do parallel development and if

00:22:24,160 --> 00:22:28,450
you can branch an entire entire

00:22:26,320 --> 00:22:33,400
distribution in order to make all sorts

00:22:28,450 --> 00:22:37,440
of wild changes like replacing one

00:22:33,400 --> 00:22:40,450
version of gloom with another or

00:22:37,440 --> 00:22:45,490
replacing gtk bit cutie if that's what

00:22:40,450 --> 00:22:49,440
you prefer then you can and you can do

00:22:45,490 --> 00:22:49,440
that without hurting anyone else

00:22:56,840 --> 00:23:04,470
all of this leads me to think that in

00:23:00,740 --> 00:23:08,549
2012 binary packages the way we know

00:23:04,470 --> 00:23:12,480
them currently are a bad idea I think we

00:23:08,549 --> 00:23:16,260
should do away with them we should

00:23:12,480 --> 00:23:18,740
instead of having a separate tiny binary

00:23:16,260 --> 00:23:23,010
package for every upstream project

00:23:18,740 --> 00:23:27,240
collect these packages into larger sets

00:23:23,010 --> 00:23:30,120
of packages a collection of software if

00:23:27,240 --> 00:23:34,679
you wish the purpose of this will be

00:23:30,120 --> 00:23:39,210
then to have a set of packages that you

00:23:34,679 --> 00:23:40,770
know work together so that if you are

00:23:39,210 --> 00:23:43,160
doing web services you know that you

00:23:40,770 --> 00:23:45,630
install this set of software and this

00:23:43,160 --> 00:23:48,380
set of software has been known and

00:23:45,630 --> 00:23:52,100
proven to work or shown to work together

00:23:48,380 --> 00:23:57,179
it's not a mathematical proof is just a

00:23:52,100 --> 00:23:59,160
software developer group the all sorts

00:23:57,179 --> 00:24:00,720
of things become easier then you have

00:23:59,160 --> 00:24:03,840
larger collections of software you don't

00:24:00,720 --> 00:24:06,540
need to depend individually on every

00:24:03,840 --> 00:24:11,520
little bit every time the little binary

00:24:06,540 --> 00:24:13,980
package you can just depend on on on a

00:24:11,520 --> 00:24:20,850
larger collection software making this

00:24:13,980 --> 00:24:25,500
graph manageable by humans again it also

00:24:20,850 --> 00:24:28,650
means that people who do testing have an

00:24:25,500 --> 00:24:30,059
actually meaningful job because they are

00:24:28,650 --> 00:24:33,120
testing something that people will

00:24:30,059 --> 00:24:35,520
actually be running all the people who

00:24:33,120 --> 00:24:38,190
want you know have the same set of

00:24:35,520 --> 00:24:42,450
packages same set of software installed

00:24:38,190 --> 00:24:49,290
and this leads to all sort of

00:24:42,450 --> 00:24:51,419
simplifications everyone went very quiet

00:24:49,290 --> 00:24:58,559
must have sent said something that the

00:24:51,419 --> 00:25:02,040
mad agrees with in 1993 1994 Debian had

00:24:58,559 --> 00:25:06,419
and I believe red also had a few hundred

00:25:02,040 --> 00:25:06,860
packages we have grown 100 times since

00:25:06,419 --> 00:25:10,970
then

00:25:06,860 --> 00:25:13,490
and with the scale of of gray with all

00:25:10,970 --> 00:25:19,220
sorts of problems at the other things

00:25:13,490 --> 00:25:22,070
that were small problems in the 90s have

00:25:19,220 --> 00:25:23,920
grown be it's like if you go on a walk

00:25:22,070 --> 00:25:28,100
and you have a small pebble in the issue

00:25:23,920 --> 00:25:30,290
if you're walking 100 meters you don't

00:25:28,100 --> 00:25:32,299
care because you're about to stop and

00:25:30,290 --> 00:25:34,280
you can take off your shoe then if

00:25:32,299 --> 00:25:37,700
you're walking 10 kilometres a hundred

00:25:34,280 --> 00:25:39,410
times longer then if you don't take the

00:25:37,700 --> 00:25:44,540
pedal out your feet are going to be

00:25:39,410 --> 00:25:46,220
blunt and that's not enjoyable if

00:25:44,540 --> 00:25:48,110
there's something that the Finnish army

00:25:46,220 --> 00:25:58,240
taught me is that bloody feet are not

00:25:48,110 --> 00:26:01,240
fun as an example of a pebble in debian

00:25:58,240 --> 00:26:04,960
a package that includes shared libraries

00:26:01,240 --> 00:26:07,270
needs to arrange for LD config to be run

00:26:04,960 --> 00:26:09,679
after the libraries have been installed

00:26:07,270 --> 00:26:13,400
if it doesn't do this than then things

00:26:09,679 --> 00:26:16,940
break so everyone who packages a Debian

00:26:13,400 --> 00:26:19,910
shared library needs to arrange for this

00:26:16,940 --> 00:26:24,080
to happen that's thousands of packages

00:26:19,910 --> 00:26:26,860
hundreds of people if instead we had the

00:26:24,080 --> 00:26:29,570
package manager automatically do this

00:26:26,860 --> 00:26:32,450
things would be simpler it would be one

00:26:29,570 --> 00:26:36,290
tiny pebble less and it's not like it's

00:26:32,450 --> 00:26:39,650
difficult to call LD config in your

00:26:36,290 --> 00:26:43,540
posting script but it's unnecessary work

00:26:39,650 --> 00:26:43,540
and should go away

00:26:46,960 --> 00:26:54,670
collecting software into bigger

00:26:50,650 --> 00:26:59,030
collections of course means that we

00:26:54,670 --> 00:27:02,480
reduce flexibility a little bit you

00:26:59,030 --> 00:27:05,090
don't when you're installing a machine

00:27:02,480 --> 00:27:08,240
you don't get to pick and choose all the

00:27:05,090 --> 00:27:13,040
packages yourself you don't forget to do

00:27:08,240 --> 00:27:14,930
choose that I want these bits of KDE but

00:27:13,040 --> 00:27:20,830
not these other bits of Katie I want to

00:27:14,930 --> 00:27:24,020
escape the ground bits instead with some

00:27:20,830 --> 00:27:26,810
if it is if you decide to do this than

00:27:24,020 --> 00:27:29,630
then with some ingenuity we would be

00:27:26,810 --> 00:27:32,750
able to still make this possible with

00:27:29,630 --> 00:27:34,940
some extra work but for the majority of

00:27:32,750 --> 00:27:38,020
people who don't want to do this things

00:27:34,940 --> 00:27:38,020
will be massively simpler

00:27:43,960 --> 00:27:50,200
does anyone else think this is a good

00:27:46,540 --> 00:27:56,320
idea does anyone else does anyone think

00:27:50,200 --> 00:27:57,880
that is a bad idea I have a Debbie a

00:27:56,320 --> 00:28:06,130
release manager in the front row who

00:27:57,880 --> 00:28:11,440
keeps scowling at me anyway I think this

00:28:06,130 --> 00:28:14,640
would make the life of destroyed

00:28:11,440 --> 00:28:18,880
development developers much easier and

00:28:14,640 --> 00:28:21,700
should be experimented with I'm not

00:28:18,880 --> 00:28:24,670
saying this is something that will make

00:28:21,700 --> 00:28:28,810
life better nobody knows until it has

00:28:24,670 --> 00:28:38,830
been quite so we need to find a way to

00:28:28,810 --> 00:28:42,910
try that the other thing I think destroy

00:28:38,830 --> 00:28:47,860
developer should embrace and possibly

00:28:42,910 --> 00:28:54,580
extend is continuous integration and

00:28:47,860 --> 00:28:57,340
deliver the software world software

00:28:54,580 --> 00:29:00,810
development world in the past about 15

00:28:57,340 --> 00:29:03,190
years has learned a lot of new things

00:29:00,810 --> 00:29:07,600
not everyone agrees that they are all

00:29:03,190 --> 00:29:10,180
good but the group of methodology is

00:29:07,600 --> 00:29:13,450
known as agile development have

00:29:10,180 --> 00:29:17,920
increased the quality of software

00:29:13,450 --> 00:29:21,520
products quite a lot few people talk

00:29:17,920 --> 00:29:27,460
anymore about the software crisis unless

00:29:21,520 --> 00:29:30,640
they want you to pay them more money one

00:29:27,460 --> 00:29:33,810
thing that especially has started to

00:29:30,640 --> 00:29:37,150
happen in the past 15 years a lot is

00:29:33,810 --> 00:29:39,550
that if you are writing a new piece of

00:29:37,150 --> 00:29:43,270
software you're expected to provide an

00:29:39,550 --> 00:29:47,080
automated test suite which would consist

00:29:43,270 --> 00:29:50,710
of things like unit tests for individual

00:29:47,080 --> 00:29:54,120
functions and classes and integration

00:29:50,710 --> 00:29:57,170
tests for for the entire software and

00:29:54,120 --> 00:30:02,450
deployment test for the install software

00:29:57,170 --> 00:30:07,130
it's actually running and possibly all

00:30:02,450 --> 00:30:09,410
sorts of other kinds of of testing agile

00:30:07,130 --> 00:30:12,440
development and extended programming

00:30:09,410 --> 00:30:17,060
before that did not invent automated

00:30:12,440 --> 00:30:18,950
testing however they have gone in for

00:30:17,060 --> 00:30:24,740
automated testing in a way that nobody

00:30:18,950 --> 00:30:28,220
else did before and I think this is a

00:30:24,740 --> 00:30:30,760
good idea we should have more of it and

00:30:28,220 --> 00:30:34,550
we should have it at the district level

00:30:30,760 --> 00:30:37,280
we should be able to verify that when we

00:30:34,550 --> 00:30:42,170
upload any package or a change to a

00:30:37,280 --> 00:30:44,840
package and that the end result the

00:30:42,170 --> 00:30:51,410
disturb actually still works and it

00:30:44,840 --> 00:30:53,870
passes all its automated tests some of

00:30:51,410 --> 00:30:56,960
this exists some especially embedded

00:30:53,870 --> 00:31:00,500
developers are using continuous

00:30:56,960 --> 00:31:06,500
integration I don't think the big ones

00:31:00,500 --> 00:31:09,500
weekly stress too much or not

00:31:06,500 --> 00:31:14,330
systematically the idea of automated

00:31:09,500 --> 00:31:17,180
testing is separate and independent from

00:31:14,330 --> 00:31:20,660
from the idea of abandoning binary

00:31:17,180 --> 00:31:24,310
packages as we know them but I think

00:31:20,660 --> 00:31:28,300
they would work together well so the

00:31:24,310 --> 00:31:30,470
flowchart I would like to have is that

00:31:28,300 --> 00:31:32,540
everything starts from a developer

00:31:30,470 --> 00:31:34,940
committing some source code into a

00:31:32,540 --> 00:31:38,380
version control system which they could

00:31:34,940 --> 00:31:43,550
choose freely as long as it's called it

00:31:38,380 --> 00:31:47,750
because I've decided that it wins but

00:31:43,550 --> 00:31:51,260
does that really matter after this that

00:31:47,750 --> 00:31:55,400
will push and then some automated build

00:31:51,260 --> 00:31:58,670
demons create the binaries it might be

00:31:55,400 --> 00:32:03,280
binary packages as we know them or some

00:31:58,670 --> 00:32:08,330
other form and then these boundaries are

00:32:03,280 --> 00:32:09,180
joined into system images which can be

00:32:08,330 --> 00:32:13,640
tested

00:32:09,180 --> 00:32:16,350
you don't just have a binary package for

00:32:13,640 --> 00:32:19,410
network manager you create a system

00:32:16,350 --> 00:32:22,830
image which includes network manager and

00:32:19,410 --> 00:32:26,850
then you verify that it works so you

00:32:22,830 --> 00:32:30,630
might have a system image we might need

00:32:26,850 --> 00:32:35,340
many many flavors of this and then have

00:32:30,630 --> 00:32:38,930
a system image which you boot under a

00:32:35,340 --> 00:32:42,990
virtual machine and verify that it gets

00:32:38,930 --> 00:32:48,170
network up and if it doesn't you fail

00:32:42,990 --> 00:32:50,700
the test and you failed the upload and

00:32:48,170 --> 00:32:51,660
people do not get to use this version of

00:32:50,700 --> 00:32:58,580
the software because it obviously

00:32:51,660 --> 00:33:02,400
doesn't work the benefit of this is that

00:32:58,580 --> 00:33:05,880
the developers get quick feedback that

00:33:02,400 --> 00:33:10,710
something went wrong and when I mean

00:33:05,880 --> 00:33:12,600
quick I mean minutes possibly hours we

00:33:10,710 --> 00:33:15,570
do not want to make the feedback loop so

00:33:12,600 --> 00:33:18,810
long that that you do an upload in the

00:33:15,570 --> 00:33:20,100
Debian unstable i'm using debian as an

00:33:18,810 --> 00:33:22,920
example because that's what on your best

00:33:20,100 --> 00:33:25,260
and then you wait at least 10 days

00:33:22,920 --> 00:33:27,810
before the upload gets into testing and

00:33:25,260 --> 00:33:30,180
lots more people get to use it and then

00:33:27,810 --> 00:33:33,570
you wait for a while because people are

00:33:30,180 --> 00:33:36,150
slow to upgrade and then a few weeks

00:33:33,570 --> 00:33:41,480
later you get a bug report saying that

00:33:36,150 --> 00:33:43,920
Oh network manager crushes on on startup

00:33:41,480 --> 00:33:49,920
which would of course never happen but

00:33:43,920 --> 00:33:52,830
hypothetically and by the time these

00:33:49,920 --> 00:33:55,830
three weeks four weeks have gone you've

00:33:52,830 --> 00:33:57,480
entirely forgotten what you did you

00:33:55,830 --> 00:33:59,190
might have done an uploader network

00:33:57,480 --> 00:34:04,680
manager and entirely forgotten that you

00:33:59,190 --> 00:34:06,480
have ever touched it and this slows down

00:34:04,680 --> 00:34:09,690
development quite a lot if you can make

00:34:06,480 --> 00:34:11,760
it minutes possibly an hour or two all

00:34:09,690 --> 00:34:13,500
the things that you did where are still

00:34:11,760 --> 00:34:16,710
fresh in your memory and it's easier to

00:34:13,500 --> 00:34:21,470
fix the problem if necessary you can

00:34:16,710 --> 00:34:26,700
back out of the change and then get

00:34:21,470 --> 00:34:28,169
figure out what to do instead so the

00:34:26,700 --> 00:34:30,740
development process cut because more

00:34:28,169 --> 00:34:35,579
efficient it also gives a lot more

00:34:30,740 --> 00:34:37,919
confidence to the developers because the

00:34:35,579 --> 00:34:41,579
developers know that okay I mainly

00:34:37,919 --> 00:34:44,790
changed all automatic tests still run a

00:34:41,579 --> 00:34:47,369
nun pass so I probably didn't break

00:34:44,790 --> 00:34:48,960
anything much and this becomes

00:34:47,369 --> 00:34:51,450
especially important if you want to make

00:34:48,960 --> 00:34:55,649
big changes if you want to replace or

00:34:51,450 --> 00:35:00,270
upgrade the KDE libraries to a newer

00:34:55,649 --> 00:35:05,549
version you in a few hours you will know

00:35:00,270 --> 00:35:08,660
if you broke anything really bad so that

00:35:05,549 --> 00:35:11,910
would be the functional system test if

00:35:08,660 --> 00:35:17,030
we do this we can then also start adding

00:35:11,910 --> 00:35:19,680
more non functional tests if you wish

00:35:17,030 --> 00:35:22,520
tests for example to verify that would

00:35:19,680 --> 00:35:26,609
speed hasn't suddenly increased a lot or

00:35:22,520 --> 00:35:29,700
that the size of your system image isn't

00:35:26,609 --> 00:35:34,410
suddenly several gigabytes larger than

00:35:29,700 --> 00:35:38,700
you wanted it to be or that your Apache

00:35:34,410 --> 00:35:41,940
web application performs still performs

00:35:38,700 --> 00:35:45,470
well under stress testing we should also

00:35:41,940 --> 00:35:49,440
never forget that automated tests don't

00:35:45,470 --> 00:35:52,140
automatically find everything you need

00:35:49,440 --> 00:35:57,869
human testing as well but human testing

00:35:52,140 --> 00:36:01,319
becomes much more efficient if you can

00:35:57,869 --> 00:36:04,230
concentrate on things when testing that

00:36:01,319 --> 00:36:06,510
a computer wouldn't find any way at

00:36:04,230 --> 00:36:12,359
least not until we have working

00:36:06,510 --> 00:36:14,460
artificial intelligence anyone here who

00:36:12,359 --> 00:36:19,349
has worked with the professional tester

00:36:14,460 --> 00:36:24,150
during software development a few people

00:36:19,349 --> 00:36:27,119
i have worked with with a view and it's

00:36:24,150 --> 00:36:29,069
an eye-opening experience to see them

00:36:27,119 --> 00:36:30,340
find problems in your code that you

00:36:29,069 --> 00:36:36,960
didn't exist no

00:36:30,340 --> 00:36:40,150
could exist theoretically a good tester

00:36:36,960 --> 00:36:45,280
might not be a programmer at all but an

00:36:40,150 --> 00:36:48,610
excellent intuitive way of figuring out

00:36:45,280 --> 00:36:53,470
areas of the program where Boggs will

00:36:48,610 --> 00:36:59,310
exist and I don't know how they do this

00:36:53,470 --> 00:37:03,100
because if I did I would fix my code but

00:36:59,310 --> 00:37:07,570
now as a simple example I would not have

00:37:03,100 --> 00:37:09,520
expected a tester to test the input form

00:37:07,570 --> 00:37:13,750
of a program i once wrote with his

00:37:09,520 --> 00:37:15,370
forehead he kept banging the keyboard

00:37:13,750 --> 00:37:21,490
with his forehead until my program

00:37:15,370 --> 00:37:23,170
crashed this would actually be possible

00:37:21,490 --> 00:37:25,950
to automate this test but you have to

00:37:23,170 --> 00:37:33,670
have someone who can tell you this that

00:37:25,950 --> 00:37:35,620
yes simulate head banging so we will

00:37:33,670 --> 00:37:37,450
always need manual testing but we

00:37:35,620 --> 00:37:43,090
shouldn't make people do work that

00:37:37,450 --> 00:37:47,560
computers do well the goal of this

00:37:43,090 --> 00:37:51,940
entire flow chart is to get to the

00:37:47,560 --> 00:37:56,620
bottom box the release and if we have

00:37:51,940 --> 00:37:59,950
automated testing and a group of people

00:37:56,620 --> 00:38:04,090
doing testing and who say that that they

00:37:59,950 --> 00:38:08,280
can't find anything too bad then the

00:38:04,090 --> 00:38:10,600
release can happen by pushing a button

00:38:08,280 --> 00:38:13,930
in an ideal world there will always be

00:38:10,600 --> 00:38:15,880
some complications however the

00:38:13,930 --> 00:38:18,640
confidence of making that release will

00:38:15,880 --> 00:38:22,230
go up if we have a continuous

00:38:18,640 --> 00:38:22,230
integration and delivery pipeline

00:38:30,090 --> 00:38:40,000
so an executive is executive summary for

00:38:33,370 --> 00:38:42,190
those who came in late we have a very

00:38:40,000 --> 00:38:43,900
complicated Linux system currently and

00:38:42,190 --> 00:38:49,360
it would be nice to be able to simplify

00:38:43,900 --> 00:38:51,310
that I have one idea for doing that and

00:38:49,360 --> 00:38:53,560
continuous integration and automated

00:38:51,310 --> 00:38:56,220
testing will will save the world and

00:38:53,560 --> 00:39:04,260
then we have bunnies and puppies and

00:38:56,220 --> 00:39:04,260
ponies and everything any questions

00:39:04,830 --> 00:39:11,170
there's three microphones one in front

00:39:07,710 --> 00:39:14,580
one at the the static case is over over

00:39:11,170 --> 00:39:14,580
there if anyone has a question

00:39:25,130 --> 00:39:30,840
so what happened with your continuous

00:39:28,200 --> 00:39:33,960
integration normal scale of a distro how

00:39:30,840 --> 00:39:37,109
are you going to do a to do that without

00:39:33,960 --> 00:39:38,430
actually serializing development in

00:39:37,109 --> 00:39:43,380
exactly the same way that you've already

00:39:38,430 --> 00:39:45,599
worried about in order to avoid

00:39:43,380 --> 00:39:47,490
theorizing development with continuous

00:39:45,599 --> 00:39:51,150
integration you have to have a

00:39:47,490 --> 00:39:57,830
continuous integration system that works

00:39:51,150 --> 00:39:57,830
really fast and can react to enough

00:39:58,310 --> 00:40:05,340
changes per day that does it it can be

00:40:01,800 --> 00:40:17,580
done continuous one way for this is the

00:40:05,340 --> 00:40:21,990
break to break this box down into

00:40:17,580 --> 00:40:25,910
smaller pieces where one the first box

00:40:21,990 --> 00:40:30,540
runs very fast it's a set of smoke tests

00:40:25,910 --> 00:40:34,260
and these can be run well in debian

00:40:30,540 --> 00:40:38,970
terms for every d install run and then

00:40:34,260 --> 00:40:40,980
you have larger tests a sequence of

00:40:38,970 --> 00:40:43,710
tests that are larger and larger and a

00:40:40,980 --> 00:40:46,650
longer a longer and to do until you get

00:40:43,710 --> 00:40:49,560
to the end running a stress test for

00:40:46,650 --> 00:40:51,300
example might take a day or two it's not

00:40:49,560 --> 00:40:56,510
possible to do for every package upload

00:40:51,300 --> 00:41:00,380
but you can do smaller test faster tests

00:40:56,510 --> 00:41:03,240
for for much smaller groups of packages

00:41:00,380 --> 00:41:08,630
you also are going to be needing a lot

00:41:03,240 --> 00:41:13,500
of hardware and for some architectures

00:41:08,630 --> 00:41:16,560
they might not be able to keep up this

00:41:13,500 --> 00:41:21,320
is not necessarily necessarily a really

00:41:16,560 --> 00:41:25,560
bad thing because most programs work

00:41:21,320 --> 00:41:28,010
reasonably well with regardless of where

00:41:25,560 --> 00:41:31,079
you run down there will always be

00:41:28,010 --> 00:41:34,499
architecture specific complications but

00:41:31,079 --> 00:41:36,839
you get most of the benefit just by

00:41:34,499 --> 00:41:41,910
running these tests on a 4th

00:41:36,839 --> 00:41:45,140
architecture next person nurse thank you

00:41:41,910 --> 00:41:47,099
for that do you realize that the

00:41:45,140 --> 00:41:50,489
existing system that has been doing this

00:41:47,099 --> 00:41:53,489
for years now will be including the

00:41:50,489 --> 00:41:55,529
testing including the package management

00:41:53,489 --> 00:42:00,180
including the host of the complaint

00:41:55,529 --> 00:42:04,859
package management the the robeks it's

00:42:00,180 --> 00:42:06,599
called next packages yes there are non

00:42:04,859 --> 00:42:09,269
mainstream distributions that we at

00:42:06,599 --> 00:42:10,650
least amo physics yeah the Debian people

00:42:09,269 --> 00:42:13,499
have looked at nick's packages but it's

00:42:10,650 --> 00:42:17,729
since it doesn't align with the most of

00:42:13,499 --> 00:42:19,469
the FHS and they decided not to go for

00:42:17,729 --> 00:42:24,809
it but actually it solves a lot of the

00:42:19,469 --> 00:42:30,119
problems yes I did not mention leaks and

00:42:24,809 --> 00:42:32,309
other alternatives by name not because I

00:42:30,119 --> 00:42:33,630
don't think they have any value I think

00:42:32,309 --> 00:42:36,869
they have great value and should be

00:42:33,630 --> 00:42:38,699
should be explored but because I wanted

00:42:36,869 --> 00:42:43,140
to concentrate on on these two things

00:42:38,699 --> 00:42:49,849
and I have I hope Knicks will help

00:42:43,140 --> 00:42:52,880
debian see the light so and did I

00:42:49,849 --> 00:42:58,499
understand you correctly that you were

00:42:52,880 --> 00:43:00,569
proposing another layer just on a for

00:42:58,499 --> 00:43:02,969
example task select or making task

00:43:00,569 --> 00:43:04,859
select more fine-grained or do you want

00:43:02,969 --> 00:43:06,839
to make the binary package go away

00:43:04,859 --> 00:43:09,479
completely I want to make one where

00:43:06,839 --> 00:43:13,859
packages go away completely okay and

00:43:09,479 --> 00:43:18,180
what speaking against having a layered

00:43:13,859 --> 00:43:21,119
task select IT tech chure we just say

00:43:18,180 --> 00:43:23,690
okay we have some tasks which are or

00:43:21,119 --> 00:43:28,619
binary packages which are combined in

00:43:23,690 --> 00:43:32,249
any way or we pretty much have that in

00:43:28,619 --> 00:43:34,259
debian with tasks and meta packages and

00:43:32,249 --> 00:43:37,229
it's not working very well in my opinion

00:43:34,259 --> 00:43:39,539
well but probably these tasks are not

00:43:37,229 --> 00:43:42,960
fine grained enough for because they

00:43:39,539 --> 00:43:44,670
just install a really large

00:43:42,960 --> 00:43:48,150
so if you just you have something like

00:43:44,670 --> 00:43:52,230
desktop user and server and stuff like

00:43:48,150 --> 00:43:54,120
that and I think if this would be a

00:43:52,230 --> 00:43:56,700
little bit more fine-grained it probably

00:43:54,120 --> 00:43:59,010
would also solve a lot of problems where

00:43:56,700 --> 00:44:04,430
you can just say okay we focus on these

00:43:59,010 --> 00:44:07,860
tasks and use our existing binary

00:44:04,430 --> 00:44:09,470
package grading system and so on you're

00:44:07,860 --> 00:44:12,870
right it's possible that it would work

00:44:09,470 --> 00:44:16,580
my intuition is that it doesn't but

00:44:12,870 --> 00:44:22,620
until I have working out I'm full of air

00:44:16,580 --> 00:44:25,080
okay hi I'm just curious what do you

00:44:22,620 --> 00:44:27,810
think about Debian rolling release and

00:44:25,080 --> 00:44:30,930
in future how much do you see this

00:44:27,810 --> 00:44:34,020
principle being used in all of the Linux

00:44:30,930 --> 00:44:37,830
distributions and how successful it

00:44:34,020 --> 00:44:40,860
could be actually the debian rolling

00:44:37,830 --> 00:44:45,510
release is not something i have much

00:44:40,860 --> 00:44:47,190
experience with i believe i personally

00:44:45,510 --> 00:44:50,700
would not like to run a system that

00:44:47,190 --> 00:44:52,470
changes every day right now as a concept

00:44:50,700 --> 00:44:58,830
what do you think I want to hear your

00:44:52,470 --> 00:45:00,990
opinion arm if if my ideas and further

00:44:58,830 --> 00:45:03,990
ideas I get implemented properly then I

00:45:00,990 --> 00:45:07,950
think a rolling release will will work

00:45:03,990 --> 00:45:12,870
much better you instead of just grabbing

00:45:07,950 --> 00:45:14,250
every day's new packages you can grab

00:45:12,870 --> 00:45:17,280
those packages that don't break

00:45:14,250 --> 00:45:20,610
automated testing and I think that would

00:45:17,280 --> 00:45:23,400
be something that a lot of people would

00:45:20,610 --> 00:45:25,350
like to run yeah because I see a lot of

00:45:23,400 --> 00:45:28,530
potential what you're saying here in

00:45:25,350 --> 00:45:30,150
that kind of thing rolling release but

00:45:28,530 --> 00:45:33,140
what do you think about rolling release

00:45:30,150 --> 00:45:36,270
as in future well linux distribution

00:45:33,140 --> 00:45:38,870
headed towards that goal or they're

00:45:36,270 --> 00:45:41,490
going to spread to something else or I

00:45:38,870 --> 00:45:44,130
think the future of linux distributions

00:45:41,490 --> 00:45:47,520
is has at least three different

00:45:44,130 --> 00:45:49,200
directions simultaneously one is to have

00:45:47,520 --> 00:45:51,330
something like rolling releases or

00:45:49,200 --> 00:45:56,230
extremely frequent releases like once

00:45:51,330 --> 00:45:58,300
per month because these lets people run

00:45:56,230 --> 00:46:01,770
the latest software in a reasonably

00:45:58,300 --> 00:46:10,240
stable environment the the other

00:46:01,770 --> 00:46:12,250
direction is yearly or by yearly stable

00:46:10,240 --> 00:46:14,230
releases the way for example debian is

00:46:12,250 --> 00:46:16,390
doing them or Ubuntu is doing them or

00:46:14,230 --> 00:46:18,580
federal rights during them basically

00:46:16,390 --> 00:46:24,130
continuing existing practice and the

00:46:18,580 --> 00:46:32,280
third one is long-term releases that

00:46:24,130 --> 00:46:35,640
happen how to reproduce that happened

00:46:32,280 --> 00:46:39,160
quite infrequently because people who

00:46:35,640 --> 00:46:42,609
want to run a decade / release get very

00:46:39,160 --> 00:46:46,630
anxious about this five-year very short

00:46:42,609 --> 00:46:49,960
lease period but these really long

00:46:46,630 --> 00:46:54,340
release cycles for for these would

00:46:49,960 --> 00:46:56,410
include updates like brenell does 444

00:46:54,340 --> 00:46:59,850
hardware dependent stuff so that you can

00:46:56,410 --> 00:47:03,490
continue run your five-year-old

00:46:59,850 --> 00:47:11,290
destroyed release on modern our web okay

00:47:03,490 --> 00:47:16,480
okay thanks anyone else in that case I

00:47:11,290 --> 00:47:18,780
think we have done I thank you have a

00:47:16,480 --> 00:47:18,780

YouTube URL: https://www.youtube.com/watch?v=4ExhZwPGtyo


