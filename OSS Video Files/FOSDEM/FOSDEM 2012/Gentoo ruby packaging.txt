Title: Gentoo ruby packaging
Publication date: 2013-02-05
Playlist: FOSDEM 2012
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,140 --> 00:00:05,879
so the talk was originally supposed to

00:00:03,300 --> 00:00:07,890
be done by hans de Graaff when i emailed

00:00:05,879 --> 00:00:11,040
me on friday that he has a family

00:00:07,890 --> 00:00:15,269
emergency and he had some a set of

00:00:11,040 --> 00:00:17,490
slides mobile almost finished oh we did

00:00:15,269 --> 00:00:20,369
why we queued and but we have the guy

00:00:17,490 --> 00:00:22,470
here Diego baron who actually wrote the

00:00:20,369 --> 00:00:24,000
stuff that we are talking about so I'm

00:00:22,470 --> 00:00:26,240
guessing he hasn't enough knowledge to

00:00:24,000 --> 00:00:32,009
fill in the planks if the slides are not

00:00:26,240 --> 00:00:34,320
good so for myself or if you want to

00:00:32,009 --> 00:00:38,340
introduce ourselves with Oliver Barrett

00:00:34,320 --> 00:00:40,469
um I'm gentle ever since 05 I I don't do

00:00:38,340 --> 00:00:43,620
Ruby stuff myself but I sit on the

00:00:40,469 --> 00:00:45,539
council dude arrow and recruitment let's

00:00:43,620 --> 00:00:49,350
head over to Diego who actually has a

00:00:45,539 --> 00:00:53,610
ruby stuff hi ho I'm Diego patina from

00:00:49,350 --> 00:00:55,920
jen to play nice and I take care of Ruby

00:00:53,610 --> 00:00:59,609
packaging engine two together with

00:00:55,920 --> 00:01:02,969
hounds and Alex mostly and I designed

00:00:59,609 --> 00:01:06,570
the new way we are using since two years

00:01:02,969 --> 00:01:12,299
ago duplicate rubygems engine to it is

00:01:06,570 --> 00:01:17,299
the fake jam method and well we can go

00:01:12,299 --> 00:01:20,790
from you so how many of you use gent you

00:01:17,299 --> 00:01:26,430
most how many of you know how to write e

00:01:20,790 --> 00:01:29,400
bills okay laughs so basically it's our

00:01:26,430 --> 00:01:32,939
packaging format their shell scripts

00:01:29,400 --> 00:01:34,619
written in bash that there is the Debian

00:01:32,939 --> 00:01:38,270
talk awhile ago using a lot of make but

00:01:34,619 --> 00:01:41,280
so basically wrap all the ruby gem

00:01:38,270 --> 00:01:42,659
operations in balance operations and

00:01:41,280 --> 00:01:44,549
there's a lot of logic going on that's

00:01:42,659 --> 00:01:49,200
mostly reinvestment we'll get to that

00:01:44,549 --> 00:01:52,680
once we show actual source code so the

00:01:49,200 --> 00:01:57,070
statistics support implementations that

00:01:52,680 --> 00:01:59,979
we have our Ruby 18 Ruby 19

00:01:57,070 --> 00:02:02,530
then Jay Ruby Ruby enterprise position

00:01:59,979 --> 00:02:06,190
which is 18 basically and Ruby knees but

00:02:02,530 --> 00:02:08,080
not that many packages for it so Diego

00:02:06,190 --> 00:02:12,310
what is the plan for Ruby 19 it's not

00:02:08,080 --> 00:02:14,980
stable yet but when would we find it we

00:02:12,310 --> 00:02:19,120
have quite a bit of trouble to get the

00:02:14,980 --> 00:02:21,790
ruby 1.9 to work the main issue has been

00:02:19,120 --> 00:02:24,790
but wild upstream considered it very

00:02:21,790 --> 00:02:28,240
stable already a lot of the extensions

00:02:24,790 --> 00:02:32,800
didn't work with Ruby 19 I had to be

00:02:28,240 --> 00:02:37,239
tested thoroughly one by one as an

00:02:32,800 --> 00:02:39,520
example we found that the FG g I ruby

00:02:37,239 --> 00:02:42,700
gem that was supposed to be compatible

00:02:39,520 --> 00:02:45,220
with Ruby 19 from the version you get

00:02:42,700 --> 00:02:48,670
from Ruby jensen it couldn't be loaded

00:02:45,220 --> 00:02:51,250
it will fail to load one suit ride and

00:02:48,670 --> 00:02:53,980
if you try to execute it anyway it ended

00:02:51,250 --> 00:02:56,610
up missing something else and closing

00:02:53,980 --> 00:03:01,000
down your Ruby application all together

00:02:56,610 --> 00:03:06,820
so we had been testing with since about

00:03:01,000 --> 00:03:15,010
thousand ten should that be in major

00:03:06,820 --> 00:03:16,540
doesn't and around the time it's it's a

00:03:15,010 --> 00:03:19,030
bit important in the context because we

00:03:16,540 --> 00:03:22,720
just now have been able to provide you

00:03:19,030 --> 00:03:25,959
with 1.9 I'm master so for a general

00:03:22,720 --> 00:03:28,890
availability on gentoo it took us two

00:03:25,959 --> 00:03:33,220
years to come to this point it was a

00:03:28,890 --> 00:03:37,299
difficult process and we hope to get it

00:03:33,220 --> 00:03:40,090
stable doing this year the most of the

00:03:37,299 --> 00:03:43,209
work has been done most of the Ruby

00:03:40,090 --> 00:03:45,880
Johnson right now are developed for 1.9

00:03:43,209 --> 00:03:49,750
and there are inter so much too many

00:03:45,880 --> 00:03:52,959
legacy packages as we had before and we

00:03:49,750 --> 00:03:56,620
can probably consider it least a year we

00:03:52,959 --> 00:04:00,940
can get really one point unstable we

00:03:56,620 --> 00:04:04,720
have j google has been actually updated

00:04:00,940 --> 00:04:08,230
it's no longer 1.5 in do we have the 1.6

00:04:04,720 --> 00:04:11,110
so since two weeks ago about and we're

00:04:08,230 --> 00:04:13,300
doing our best to get Ruby

00:04:11,110 --> 00:04:16,930
jerry rubin and ruby 1.9 to the same

00:04:13,300 --> 00:04:19,150
coverage as ruby 1.8 point 8 Ruby news

00:04:16,930 --> 00:04:20,950
has been a very recent addition so we

00:04:19,150 --> 00:04:24,610
haven't been able to test much of this

00:04:20,950 --> 00:04:27,340
it's mostly problem with related

00:04:24,610 --> 00:04:29,830
dependencies as you'll see later we have

00:04:27,340 --> 00:04:37,150
many steps to take to package a ruby gem

00:04:29,830 --> 00:04:39,790
in a gin to a deal so the the common

00:04:37,150 --> 00:04:43,000
problem we have with Ruby gems usually

00:04:39,790 --> 00:04:45,220
stem from a fact that it's a different

00:04:43,000 --> 00:04:48,520
word rubygems is being designed to work

00:04:45,220 --> 00:04:50,590
on rubygems is designed to give that the

00:04:48,520 --> 00:04:52,330
developers the latest my greatest of

00:04:50,590 --> 00:04:55,740
some code but we want to give them

00:04:52,330 --> 00:04:58,419
something stable so we end up having to

00:04:55,740 --> 00:05:01,060
integrate dependencies that can be

00:04:58,419 --> 00:05:05,350
integrated in Ruby gems for instance our

00:05:01,060 --> 00:05:08,770
magic is a ruby gem that wraps around

00:05:05,350 --> 00:05:12,880
imagemagick for conversion reduction

00:05:08,770 --> 00:05:15,550
resizing the gem can't tell your package

00:05:12,880 --> 00:05:17,979
manager but it needs imagemagick to be

00:05:15,550 --> 00:05:20,650
present we can do that in very build so

00:05:17,979 --> 00:05:24,280
we have a dependency on it and we also

00:05:20,650 --> 00:05:27,040
know but it can't work if hdri support

00:05:24,280 --> 00:05:32,560
is enabled so we can provide that while

00:05:27,040 --> 00:05:35,290
Regina itself can't we also have most of

00:05:32,560 --> 00:05:38,610
the time to apply some patch either to

00:05:35,290 --> 00:05:41,979
the jumps back itself or to virgin code

00:05:38,610 --> 00:05:44,110
usually it's a matter of brown rational

00:05:41,979 --> 00:05:47,650
investor condenses where invention in

00:05:44,110 --> 00:05:50,440
the library file sometimes you can be

00:05:47,650 --> 00:05:52,390
something words like it doesn't work if

00:05:50,440 --> 00:05:55,120
the file system is case sensitive

00:05:52,390 --> 00:05:58,030
because the ruby gem have been developed

00:05:55,120 --> 00:06:01,900
and tested only on OS 10 or windows on

00:05:58,030 --> 00:06:04,690
both of which are case-insensitive and

00:06:01,900 --> 00:06:07,090
the gem will never run on unix we have

00:06:04,690 --> 00:06:09,820
to fix back to or we have to fix our

00:06:07,090 --> 00:06:13,120
specs so that it knows what it is trying

00:06:09,820 --> 00:06:14,530
to find a particular file in the file

00:06:13,120 --> 00:06:18,040
system it might be at a different

00:06:14,530 --> 00:06:20,950
location engine too because we have side

00:06:18,040 --> 00:06:23,980
by side installation of ruby 1.8 point 9

00:06:20,950 --> 00:06:28,550
enterprise ruby news and so on

00:06:23,980 --> 00:06:32,360
Plus James by themselves usually don't

00:06:28,550 --> 00:06:36,770
run tests gentlebeings can optionally

00:06:32,360 --> 00:06:39,860
run tests to check whether the code just

00:06:36,770 --> 00:06:42,260
built just installed is working on the

00:06:39,860 --> 00:06:45,640
system if the dependencies are all okay

00:06:42,260 --> 00:06:48,470
or if there is something wrong with them

00:06:45,640 --> 00:06:51,350
louboutins has an option to run the test

00:06:48,470 --> 00:06:54,590
but most of the jumpsuit where are not

00:06:51,350 --> 00:06:57,740
covering the test to reduce the size of

00:06:54,590 --> 00:07:01,460
gem file they scratch out most of a test

00:06:57,740 --> 00:07:03,110
data most of the test files sometimes I

00:07:01,460 --> 00:07:05,300
keep the test files but not the test

00:07:03,110 --> 00:07:07,100
data so you can't run tests from from

00:07:05,300 --> 00:07:10,340
which encode alone even if you are

00:07:07,100 --> 00:07:12,590
installed instead we ran that in doing

00:07:10,340 --> 00:07:14,240
the build phase and then we scratch when

00:07:12,590 --> 00:07:16,450
we don't even install that most of the

00:07:14,240 --> 00:07:16,450
time

00:07:18,669 --> 00:07:25,479
there are a few more problems with with

00:07:21,770 --> 00:07:28,160
Ruby gems but don't stem from web design

00:07:25,479 --> 00:07:29,900
one obvious thing is a very easy no

00:07:28,160 --> 00:07:32,539
validation of the gems that are uploaded

00:07:29,900 --> 00:07:35,000
on rubygems.org there is no way to check

00:07:32,539 --> 00:07:38,110
whether the license is valid whether the

00:07:35,000 --> 00:07:40,789
files are all covered by a good license

00:07:38,110 --> 00:07:42,500
lately hands has been fighting with

00:07:40,789 --> 00:07:45,350
various upstream because we prototype

00:07:42,500 --> 00:07:48,199
raised gem but provides the

00:07:45,350 --> 00:07:53,030
compatibility layer between raised 3.2

00:07:48,199 --> 00:07:55,910
and raised 3.1 sins and I don't remember

00:07:53,030 --> 00:07:57,830
if it's also from three-point Oh since

00:07:55,910 --> 00:08:00,199
the default installed no longer uses

00:07:57,830 --> 00:08:02,479
prototype but you're acquiring and you

00:08:00,199 --> 00:08:04,720
need to install a separate them a

00:08:02,479 --> 00:08:07,940
separate library for a prototype

00:08:04,720 --> 00:08:11,150
JavaScript library but Jen doesn't have

00:08:07,940 --> 00:08:13,940
a license there is no way to know under

00:08:11,150 --> 00:08:16,550
which terms prototype is released for

00:08:13,940 --> 00:08:19,009
virgin end result is we are not

00:08:16,550 --> 00:08:22,750
packaging prototype raised because we

00:08:19,009 --> 00:08:27,490
are not sure if we can distribute it

00:08:22,750 --> 00:08:31,150
other things usually coming form of bugs

00:08:27,490 --> 00:08:34,190
as I say the sometimes it's just the

00:08:31,150 --> 00:08:36,169
library is not designed to work in case

00:08:34,190 --> 00:08:40,010
a sensitive system so you have to patch

00:08:36,169 --> 00:08:44,029
it out many other times we have trouble

00:08:40,010 --> 00:08:48,350
because really the code is not tested

00:08:44,029 --> 00:08:50,600
not well tested at least and we have too

00:08:48,350 --> 00:08:52,550
much work to do to find out why doesn't

00:08:50,600 --> 00:08:54,080
work and it doesn't work not only engine

00:08:52,550 --> 00:08:57,560
too but order in also in other

00:08:54,080 --> 00:09:00,970
distributions as well so we move back to

00:08:57,560 --> 00:09:03,709
upstream and we have to skip every day's

00:09:00,970 --> 00:09:05,839
some other time so we end up patching it

00:09:03,709 --> 00:09:07,640
so we have a fixed version engine too

00:09:05,839 --> 00:09:11,110
but we have to wait till upstream early

00:09:07,640 --> 00:09:16,420
days new one to have it patch it already

00:09:11,110 --> 00:09:19,490
the end result oh yeah for not for all

00:09:16,420 --> 00:09:22,520
packages but for many we have to keep

00:09:19,490 --> 00:09:25,860
one two versions because we haven't

00:09:22,520 --> 00:09:29,110
fixed our problems yet

00:09:25,860 --> 00:09:32,080
when the user want to install gems from

00:09:29,110 --> 00:09:34,210
rubygems.org repository without the

00:09:32,080 --> 00:09:36,720
validation function to without our

00:09:34,210 --> 00:09:40,510
version restriction without our test

00:09:36,720 --> 00:09:44,050
engine to regions are still usable very

00:09:40,510 --> 00:09:46,840
buff usable as system level by using us

00:09:44,050 --> 00:09:49,720
our local so but if they don't overwrite

00:09:46,840 --> 00:09:52,540
the stuff installed burger by part of a

00:09:49,720 --> 00:09:54,340
package manager in general or we can be

00:09:52,540 --> 00:09:59,590
installed in the home directory of the

00:09:54,340 --> 00:10:01,930
user so you can still have both the nice

00:09:59,590 --> 00:10:04,810
things about revisions but we just work

00:10:01,930 --> 00:10:08,170
out of a box and the packages version

00:10:04,810 --> 00:10:16,230
from gentle that is tested and usually

00:10:08,170 --> 00:10:16,230
safe but later

00:10:18,390 --> 00:10:24,150
we have as I said multiple

00:10:21,770 --> 00:10:26,880
interpretation engine to of Ruby we have

00:10:24,150 --> 00:10:30,750
ruby 1.8 m arrived original

00:10:26,880 --> 00:10:35,040
implementation then we have ruby 1.9 as

00:10:30,750 --> 00:10:39,630
i said we have unmasked beta last 12

00:10:35,040 --> 00:10:42,480
month ago because ruby 1.8 is at its end

00:10:39,630 --> 00:10:46,670
of life starting from june but won't be

00:10:42,480 --> 00:10:50,280
any more release there is no security

00:10:46,670 --> 00:10:53,850
how's it going on with 1.8 so it's

00:10:50,280 --> 00:10:56,670
totally dead we are moving to 1.9 we

00:10:53,850 --> 00:10:59,370
have been very slow to move to 1.9

00:10:56,670 --> 00:11:02,250
because we had a lot of trouble with it

00:10:59,370 --> 00:11:06,840
nowadays it's almost ready so we are

00:11:02,250 --> 00:11:13,500
moving to 1.9 just fine we have both 1.9

00:11:06,840 --> 00:11:16,530
and 1.9 / 22 and 23 we also have jerry

00:11:13,500 --> 00:11:19,050
rubin for systems with cameron java it's

00:11:16,530 --> 00:11:23,490
an interpretation of to be over java

00:11:19,050 --> 00:11:27,120
super suave 1.8 1.9 syntax and it's much

00:11:23,490 --> 00:11:33,390
faster in execution i'll be quite slower

00:11:27,120 --> 00:11:35,610
in ram your time we have the ability for

00:11:33,390 --> 00:11:37,650
the user to change with a fault ruby

00:11:35,610 --> 00:11:40,710
implementation on the system's where

00:11:37,650 --> 00:11:42,960
will be common the IRB command which

00:11:40,710 --> 00:11:47,160
Ruby will execute the comments the

00:11:42,960 --> 00:11:50,520
script installed in u.s. bean we support

00:11:47,160 --> 00:11:52,620
using a ruby 1.8 oh 1.9 or the

00:11:50,520 --> 00:11:55,140
enterprise edition although we don't

00:11:52,620 --> 00:11:57,780
guarantee will support enterprise

00:11:55,140 --> 00:12:00,240
addiction much longer because currently

00:11:57,780 --> 00:12:03,690
there is no security relays about it so

00:12:00,240 --> 00:12:06,720
it's we know Ruby Enterprise Edition is

00:12:03,690 --> 00:12:09,300
currently vulnerable to a few

00:12:06,720 --> 00:12:12,180
vulnerabilities that were in ruby 1.8 l

00:12:09,300 --> 00:12:16,500
and we're fix they are not in enterprise

00:12:12,180 --> 00:12:18,480
edition because the code is devoured you

00:12:16,500 --> 00:12:21,630
can still run any of the implementation

00:12:18,480 --> 00:12:27,590
directly with very name so Ruby 118 Ruby

00:12:21,630 --> 00:12:27,590
19 J Ruby Ruby 19 vaa 18

00:12:30,050 --> 00:12:40,110
unless you and you can continue that way

00:12:34,230 --> 00:12:44,100
you are not it so engine two we have a

00:12:40,110 --> 00:12:46,380
stage at approach to the installation of

00:12:44,100 --> 00:12:49,710
packages do we have an ampeg phase where

00:12:46,380 --> 00:12:52,910
the terrible is expanded the preparation

00:12:49,710 --> 00:12:55,650
phase where but the co dispatched

00:12:52,910 --> 00:12:57,480
configuration phase including where you

00:12:55,650 --> 00:13:00,330
usually rounded the flash configures the

00:12:57,480 --> 00:13:02,670
script on altitudes project you have

00:13:00,330 --> 00:13:04,590
something similar for Ruby extensions

00:13:02,670 --> 00:13:07,140
for Ruby native extensions so since you

00:13:04,590 --> 00:13:09,930
have an excellent far be five that is

00:13:07,140 --> 00:13:13,320
you to generate the make files when you

00:13:09,930 --> 00:13:16,350
have the computer but usually for

00:13:13,320 --> 00:13:19,440
non-native Ruby packages doesn't exist

00:13:16,350 --> 00:13:25,380
but for our exceptions a test phase and

00:13:19,440 --> 00:13:30,510
uninstall phase to handle multiple Ruby

00:13:25,380 --> 00:13:34,050
implementations what I designed it to be

00:13:30,510 --> 00:13:37,410
we split the step into two main types

00:13:34,050 --> 00:13:41,040
you have a single step Leticia's the

00:13:37,410 --> 00:13:43,950
acute advance for each package and then

00:13:41,040 --> 00:13:47,190
as per implementation step that is

00:13:43,950 --> 00:13:51,360
executed once for each implementation so

00:13:47,190 --> 00:13:55,230
where is in the case of hanbok that is

00:13:51,360 --> 00:13:57,360
only the already unpack phaser but is

00:13:55,230 --> 00:14:00,450
not executed won the West system

00:13:57,360 --> 00:14:02,889
configured will be or they only will be

00:14:00,450 --> 00:14:07,600
supported package

00:14:02,889 --> 00:14:09,579
and then doing preparation phase you

00:14:07,600 --> 00:14:12,279
first go through the over we prepare you

00:14:09,579 --> 00:14:14,019
where you apply the patches what has to

00:14:12,279 --> 00:14:17,379
be applied to all the implementations

00:14:14,019 --> 00:14:22,660
and then move on to apply patches in

00:14:17,379 --> 00:14:24,790
specific for ruby 1.8 1.9 gubbeen you

00:14:22,660 --> 00:14:28,329
fix them as you need them to be fixed

00:14:24,790 --> 00:14:31,540
sometimes we have to remove a file add

00:14:28,329 --> 00:14:33,730
the file side the file to get it working

00:14:31,540 --> 00:14:38,769
with just one implementation usually

00:14:33,730 --> 00:14:41,589
JRuby we try our best not to make these

00:14:38,769 --> 00:14:44,889
changes because we prefer making the

00:14:41,589 --> 00:14:47,259
change Wow which is one time and have it

00:14:44,889 --> 00:14:50,470
working with all of them so that we

00:14:47,259 --> 00:14:57,189
don't make implementation-specific fixes

00:14:50,470 --> 00:15:00,699
but sometimes it's needed so we are also

00:14:57,189 --> 00:15:03,220
using has the don't cover is not much

00:15:00,699 --> 00:15:07,419
but we have two main interfaces for this

00:15:03,220 --> 00:15:12,040
setup one if there will be Angie but the

00:15:07,419 --> 00:15:14,619
any class library for ideals Ruby Angie

00:15:12,040 --> 00:15:18,689
covers the execution of the multi phases

00:15:14,619 --> 00:15:23,230
for molding presentations fake gem is

00:15:18,689 --> 00:15:26,850
best a poem will be Angie it takes the

00:15:23,230 --> 00:15:29,559
default so that you can you can cover

00:15:26,850 --> 00:15:32,829
most of the details of a ruby gem

00:15:29,559 --> 00:15:35,169
without having to set one at all so for

00:15:32,829 --> 00:15:39,629
instance in this case this is a simple

00:15:35,169 --> 00:15:42,279
jam it only has the list of

00:15:39,629 --> 00:15:44,499
implementations it works with the

00:15:42,279 --> 00:15:46,299
documentation is present on that

00:15:44,499 --> 00:15:49,089
particular deal in this case the doctor

00:15:46,299 --> 00:15:53,139
since each gem has a different gear to

00:15:49,089 --> 00:15:57,160
get its API documentation it can be

00:15:53,139 --> 00:16:00,609
darker talk oh yeah doc various tones of

00:15:57,160 --> 00:16:03,489
different directors were used there is a

00:16:00,609 --> 00:16:06,609
simple variable to tell which files to

00:16:03,489 --> 00:16:10,290
install from the documentation of the

00:16:06,609 --> 00:16:12,720
jam as well as the code of a jam

00:16:10,290 --> 00:16:15,810
you have description homepage there is

00:16:12,720 --> 00:16:18,300
no source you where you are I since all

00:16:15,810 --> 00:16:22,139
the whole gems should be found on Ruby

00:16:18,300 --> 00:16:26,100
tons if you don't set it explicitly it

00:16:22,139 --> 00:16:29,040
will go looking for the name of the able

00:16:26,100 --> 00:16:30,930
file as very obedient name and version

00:16:29,040 --> 00:16:34,649
they're actually on the Ruby gents

00:16:30,930 --> 00:16:39,740
repository we usually override but with

00:16:34,649 --> 00:16:42,240
github by the Jones a bill for gems

00:16:39,740 --> 00:16:44,819
because sometimes we have to take the

00:16:42,240 --> 00:16:46,980
Tarble rather than which and file itself

00:16:44,819 --> 00:16:50,100
because the tights are missing or over

00:16:46,980 --> 00:16:54,649
data files are missing plane have a user

00:16:50,100 --> 00:16:54,649
stuff for Jen to a bills

00:16:59,209 --> 00:17:02,410
yep too annoyed

00:17:05,020 --> 00:17:14,050
okay we have here a newer more complex a

00:17:09,880 --> 00:17:20,230
build for I did that's an active

00:17:14,050 --> 00:17:22,360
model wrapper for mongodb it's a AP for

00:17:20,230 --> 00:17:23,950
and supports only one implementation

00:17:22,360 --> 00:17:28,180
right now because we are having trouble

00:17:23,950 --> 00:17:33,070
with the back end on ruby 1.9 so that's

00:17:28,180 --> 00:17:35,740
problem we have sometimes even if this

00:17:33,070 --> 00:17:38,530
dam is designed to work with ruby 1.9 we

00:17:35,740 --> 00:17:41,410
are finding trouble with a dependency of

00:17:38,530 --> 00:17:44,550
this it doesn't work right or exactly as

00:17:41,410 --> 00:17:47,890
it should on 1.9 so we're not the

00:17:44,550 --> 00:17:49,690
supporting this on 1.9 yet will support

00:17:47,890 --> 00:17:52,240
it as soon as with fix in this case is

00:17:49,690 --> 00:17:57,190
this on the design implementation that

00:17:52,240 --> 00:17:59,890
is not working correctly on ruby 1.9 in

00:17:57,190 --> 00:18:02,680
this case you there is no documentation

00:17:59,890 --> 00:18:05,590
installed api documentation installed

00:18:02,680 --> 00:18:08,230
directly from the a builder because we

00:18:05,590 --> 00:18:11,890
can't rebuild it correctly we don't run

00:18:08,230 --> 00:18:14,490
the usual test command is not a rake

00:18:11,890 --> 00:18:17,890
test in this case but it's rex pack unit

00:18:14,490 --> 00:18:20,700
we install some documentation and varies

00:18:17,890 --> 00:18:22,980
with line here but tells us not to use

00:18:20,700 --> 00:18:25,799
the

00:18:22,980 --> 00:18:29,700
meta data fetch it from aruba John but

00:18:25,799 --> 00:18:33,450
we instead get it directly from the from

00:18:29,700 --> 00:18:36,780
the terrible itself in this case this

00:18:33,450 --> 00:18:39,090
one is a gem but it has to be fetched

00:18:36,780 --> 00:18:42,720
from github because it doesn't work

00:18:39,090 --> 00:18:45,950
otherwise it missing some data so we

00:18:42,720 --> 00:18:49,080
simply said these are only conveniences

00:18:45,950 --> 00:18:50,669
variables and you we set a ruby ass so

00:18:49,080 --> 00:18:52,799
we don't have to care about the

00:18:50,669 --> 00:18:56,970
extension but the Tarble from github

00:18:52,799 --> 00:19:01,770
give us as if the user uses the small

00:18:56,970 --> 00:19:05,970
harsh of the comet for a target we tell

00:19:01,770 --> 00:19:10,049
it to fetch without a from github go

00:19:05,970 --> 00:19:12,330
down we add the dependencies for visa

00:19:10,049 --> 00:19:15,780
build will be at the earth defender is

00:19:12,330 --> 00:19:18,419
used to apply the dependencies for the

00:19:15,780 --> 00:19:21,059
implementation so what it will be

00:19:18,419 --> 00:19:23,309
running at we will be requiring at field

00:19:21,059 --> 00:19:25,230
model for the target that is selected in

00:19:23,309 --> 00:19:26,880
this case will be 1.8 because it doesn't

00:19:25,230 --> 00:19:28,950
support anything else but if there are

00:19:26,880 --> 00:19:30,900
multiple implementations supported by

00:19:28,950 --> 00:19:32,970
the dependencies it makes you but varies

00:19:30,900 --> 00:19:35,040
the dependences install it for that

00:19:32,970 --> 00:19:38,730
implementation for the one we are

00:19:35,040 --> 00:19:40,950
looking for be dependent is for rebuild

00:19:38,730 --> 00:19:47,520
time dependences in this case the test

00:19:40,950 --> 00:19:49,890
data analysis and her start trouble

00:19:47,520 --> 00:19:53,070
although we prepare we condition the

00:19:49,890 --> 00:19:55,080
system the sources to work we removed

00:19:53,070 --> 00:19:57,620
the references to bandar because

00:19:55,080 --> 00:20:00,780
otherwise we have trouble bundle is a

00:19:57,620 --> 00:20:03,450
tentative to fix Ruby dependencies on

00:20:00,780 --> 00:20:06,540
doing and it's making it more

00:20:03,450 --> 00:20:08,669
troublesome for us so we remove any

00:20:06,540 --> 00:20:13,520
references to bandar we remove the gem

00:20:08,669 --> 00:20:16,440
file and we go on normally down again

00:20:13,520 --> 00:20:19,290
when for tests running we have to start

00:20:16,440 --> 00:20:21,650
our own MongoDB instance so in this case

00:20:19,290 --> 00:20:24,260
we have a very complex

00:20:21,650 --> 00:20:28,460
function that is executed once for each

00:20:24,260 --> 00:20:30,140
Ruby target each Ruby target is executed

00:20:28,460 --> 00:20:37,370
in a different directory because this

00:20:30,140 --> 00:20:41,900
one will go how can I that builds for

00:20:37,370 --> 00:20:45,490
native native extensions API

00:20:41,900 --> 00:20:50,120
documentation most of the tests dirty

00:20:45,490 --> 00:20:54,500
the directory so you can't really use it

00:20:50,120 --> 00:20:57,290
from ruby 1.8 and 1.9 so each step 4 by

00:20:54,500 --> 00:21:00,980
each function is executed in a different

00:20:57,290 --> 00:21:03,560
directory for each implementation then

00:21:00,980 --> 00:21:07,130
we simply called Ruby to execute a rake

00:21:03,560 --> 00:21:09,370
speculate once we set up a ball MongoDB

00:21:07,130 --> 00:21:09,370
stuff

00:21:25,930 --> 00:21:32,420
our main problems are now are handling

00:21:28,700 --> 00:21:36,110
of language bindings in xrm project so

00:21:32,420 --> 00:21:41,300
for instance veen bindings for Reuben I

00:21:36,110 --> 00:21:43,910
in the KD a building bending for binding

00:21:41,300 --> 00:21:46,910
for Ruby because we haven't solved that

00:21:43,910 --> 00:21:50,330
problem yet at all we have no way right

00:21:46,910 --> 00:21:52,970
now to to build bindings for any project

00:21:50,330 --> 00:21:55,460
with ruby 1.9 and we have to deal with

00:21:52,970 --> 00:21:57,850
that doing this year because we want to

00:21:55,460 --> 00:22:01,700
make ruby 1.9 the default engine too

00:21:57,850 --> 00:22:04,550
since that's what upstream is doing and

00:22:01,700 --> 00:22:06,380
we have a trouble with bandler as I said

00:22:04,550 --> 00:22:10,280
it's giving us more trouble than it

00:22:06,380 --> 00:22:12,950
should be solving because not every gems

00:22:10,280 --> 00:22:15,380
back not every specification of a jam is

00:22:12,950 --> 00:22:17,960
providing the correct dependences so we

00:22:15,380 --> 00:22:21,290
had to either fix one or find a way

00:22:17,960 --> 00:22:23,900
around one usually the former we tried

00:22:21,290 --> 00:22:27,710
our best to do a former but sometimes

00:22:23,900 --> 00:22:30,470
upstream is intentionally not specifying

00:22:27,710 --> 00:22:32,000
where correct dependences invite inspect

00:22:30,470 --> 00:22:40,010
files so we have to get around one

00:22:32,000 --> 00:22:43,990
entirely and that's quite a problem you

00:22:40,010 --> 00:22:43,990
have any questions about packaging

00:22:51,690 --> 00:23:02,700
I'm encoded by monday was there are p.m.

00:22:57,940 --> 00:23:08,650
developer and well we have a pretty

00:23:02,700 --> 00:23:13,200
about in my bias opinion or Ruby

00:23:08,650 --> 00:23:17,620
packaging is quite very very very nice

00:23:13,200 --> 00:23:19,809
easy state-of-the-art they're not no

00:23:17,620 --> 00:23:25,720
problem yeah it's just very simple to

00:23:19,809 --> 00:23:31,929
maintain everything but later on when I

00:23:25,720 --> 00:23:34,920
was going the package you're rushing

00:23:31,929 --> 00:23:43,420
saugat aureus identity sniffing named

00:23:34,920 --> 00:23:47,740
humble bundles manner then yeah and what

00:23:43,420 --> 00:23:52,630
 yeah how do you give you deal with

00:23:47,740 --> 00:23:56,500
this crap yeah okay for Banda we solved

00:23:52,630 --> 00:23:59,740
it with Ruby victim the library on top

00:23:56,500 --> 00:24:02,110
of the simple packaging fortune to will

00:23:59,740 --> 00:24:04,120
be fake gem install specification on the

00:24:02,110 --> 00:24:08,530
vehicle with the dependency of the

00:24:04,120 --> 00:24:10,600
package so that if there if a given

00:24:08,530 --> 00:24:12,880
library requires another free libraries

00:24:10,600 --> 00:24:15,130
we make sure that the specification we

00:24:12,880 --> 00:24:18,610
install also this fall's free

00:24:15,130 --> 00:24:21,880
dependences if we were so I it was like

00:24:18,610 --> 00:24:25,840
exist on no I really want to have my dog

00:24:21,880 --> 00:24:27,880
for Colbert sorry no I am but their most

00:24:25,840 --> 00:24:32,110
annoying thing yeah we'd been there I

00:24:27,880 --> 00:24:35,520
know their son well if I wanted to Karen

00:24:32,110 --> 00:24:39,880
afflicted I figure out that I had to

00:24:35,520 --> 00:24:43,620
they were modified bender to not its

00:24:39,880 --> 00:24:47,590
eastern coping the gems hopefully Oh

00:24:43,620 --> 00:24:51,370
Vandor has actually from few versions

00:24:47,590 --> 00:24:54,160
back a local option bundler amusements

00:24:51,370 --> 00:24:55,820
local for instant update so it won't

00:24:54,160 --> 00:24:59,450
copy the file

00:24:55,820 --> 00:25:02,990
oh and I solved that a few months back

00:24:59,450 --> 00:25:05,120
now it's much nicer to work with and you

00:25:02,990 --> 00:25:06,830
only need to help to make sure that the

00:25:05,120 --> 00:25:08,690
specification of the gem install it in

00:25:06,830 --> 00:25:10,820
the system from the packaging system

00:25:08,690 --> 00:25:13,480
actually represent the dependences of

00:25:10,820 --> 00:25:16,130
we're done as it only loads the

00:25:13,480 --> 00:25:19,250
libraries but they are listed very

00:25:16,130 --> 00:25:24,230
definite sister okay because yeah I just

00:25:19,250 --> 00:25:27,200
hate Ruby but I ever needed and banjo

00:25:24,230 --> 00:25:29,750
1.1 if i remember correctly spell action

00:25:27,200 --> 00:25:34,300
that fixes okay yeah and also do you

00:25:29,750 --> 00:25:38,150
know if if there are in a class at the

00:25:34,300 --> 00:25:42,440
license back to the metadata sorry the

00:25:38,150 --> 00:25:46,460
meta the gym meta data yeah it lacked a

00:25:42,440 --> 00:25:48,350
license tag i have suggested it to the

00:25:46,460 --> 00:25:50,000
region's developers before they weren't

00:25:48,350 --> 00:25:53,270
much interested because it doesn't cover

00:25:50,000 --> 00:25:56,210
by use case you can do there will be

00:25:53,270 --> 00:25:58,190
people you can try Moby man for it

00:25:56,210 --> 00:26:01,760
probably they will do if it's not just

00:25:58,190 --> 00:26:04,070
me asking yeah because I'm but would it

00:26:01,760 --> 00:26:06,590
it will be terrific for us to come back

00:26:04,070 --> 00:26:09,200
the region in goes our iphones jim was a

00:26:06,590 --> 00:26:13,220
crappy vacation sistema for haiti will

00:26:09,200 --> 00:26:17,530
be but the metadata made it oh ok i can

00:26:13,220 --> 00:26:20,840
i can make dispatchers in like ya in a

00:26:17,530 --> 00:26:22,670
second and it's easy to automatically

00:26:20,840 --> 00:26:24,560
maintained by just connecting the

00:26:22,670 --> 00:26:26,780
offenses in the hole as i said we have

00:26:24,560 --> 00:26:29,300
been having trouble with licenses

00:26:26,780 --> 00:26:31,370
because a radius prototype doesn't have

00:26:29,300 --> 00:26:33,620
a license neither in meta data nor in

00:26:31,370 --> 00:26:39,290
the files so we know which life with

00:26:33,620 --> 00:26:43,070
slight chance to use for red.mike model

00:26:39,290 --> 00:26:46,620
questions please raise your hand so i

00:26:43,070 --> 00:26:51,270
can see who is has the question

00:26:46,620 --> 00:26:53,670
no other questions ok so that was whole

00:26:51,270 --> 00:26:57,260
please a big round of applause or web

00:26:53,670 --> 00:26:57,260

YouTube URL: https://www.youtube.com/watch?v=-pTg5APLVTQ


