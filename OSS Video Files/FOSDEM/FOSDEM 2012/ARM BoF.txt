Title: ARM BoF
Publication date: 2013-02-05
Playlist: FOSDEM 2012
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,000 --> 00:00:07,529
what I will its wake lock so welcome to

00:00:03,720 --> 00:00:09,809
the cross district arm buff I'm Steve

00:00:07,529 --> 00:00:14,420
MacIntyre I've been doing debian

00:00:09,809 --> 00:00:16,710
development for Christ's lots of years

00:00:14,420 --> 00:00:21,330
I'm currently employed by armed I'm

00:00:16,710 --> 00:00:25,380
working on in linaro lots of hats lots

00:00:21,330 --> 00:00:27,180
of things I know some stuff about are my

00:00:25,380 --> 00:00:35,489
hope you love do as well let's see what

00:00:27,180 --> 00:00:37,590
we can talk about so I'm linux is a good

00:00:35,489 --> 00:00:39,840
thing i want to talk about the whole

00:00:37,590 --> 00:00:41,370
flow to api because the number of people

00:00:39,840 --> 00:00:43,649
have been asking me about it I thought

00:00:41,370 --> 00:00:46,110
we'd already push the message out I'm

00:00:43,649 --> 00:00:48,780
happy to do it some more if we can see

00:00:46,110 --> 00:00:51,030
where the the different linux distros

00:00:48,780 --> 00:00:52,410
are up to with our arm ports I mean some

00:00:51,030 --> 00:00:54,920
of us have been doing a few years some

00:00:52,410 --> 00:00:58,730
have just started on it recently and

00:00:54,920 --> 00:01:03,359
it'll be lovely to get working together

00:00:58,730 --> 00:01:07,140
so why do we have arm linux well because

00:01:03,359 --> 00:01:09,930
it's good no I'm assuming most of people

00:01:07,140 --> 00:01:11,490
in the room here like Linux many people

00:01:09,930 --> 00:01:16,710
in the room here Polly like arm they

00:01:11,490 --> 00:01:20,670
work really really well together who's

00:01:16,710 --> 00:01:23,280
involved arm themselves now have a quite

00:01:20,670 --> 00:01:24,630
a large team of software people many of

00:01:23,280 --> 00:01:29,970
whom are working on linux and free

00:01:24,630 --> 00:01:32,250
software that's the new ish nonprofit

00:01:29,970 --> 00:01:37,049
group linaro does anyone here not heard

00:01:32,250 --> 00:01:40,380
of lenovo ok i'll explain linaro is a

00:01:37,049 --> 00:01:44,070
consortium started by armed and some of

00:01:40,380 --> 00:01:48,540
their silicon partners about 18 months

00:01:44,070 --> 00:01:51,270
ago now and their stated goal is to work

00:01:48,540 --> 00:01:53,939
together to make Lennox and other free

00:01:51,270 --> 00:01:57,689
software work better on arm in much the

00:01:53,939 --> 00:01:59,610
same way as arm hardware is shared

00:01:57,689 --> 00:02:01,520
amongst all of those silicon partners

00:01:59,610 --> 00:02:04,229
you know they come to arm and license

00:02:01,520 --> 00:02:05,820
CPU designs because it's easier and

00:02:04,229 --> 00:02:10,259
cheaper to do it to do it that way than

00:02:05,820 --> 00:02:11,940
to invent everything themselves um they

00:02:10,259 --> 00:02:13,360
you know this is a brand-new fascinating

00:02:11,940 --> 00:02:15,400
idea will tell you what let's

00:02:13,360 --> 00:02:16,960
together on the software for the

00:02:15,400 --> 00:02:18,490
betterment of everybody instead of

00:02:16,960 --> 00:02:20,950
everybody doing all of their own limits

00:02:18,490 --> 00:02:23,710
colonel ports all of their own distro

00:02:20,950 --> 00:02:27,490
development it seems to be going quite

00:02:23,710 --> 00:02:31,720
well so far armed samsung Texas

00:02:27,490 --> 00:02:35,020
Instruments freescale IBM and canonical

00:02:31,720 --> 00:02:36,730
and are amongst the many companies

00:02:35,020 --> 00:02:38,380
you'll have heard of the question number

00:02:36,730 --> 00:02:42,820
of other companies involved at various

00:02:38,380 --> 00:02:44,910
levels in linaro and we do a load of

00:02:42,820 --> 00:02:48,430
work basically in the open source model

00:02:44,910 --> 00:02:50,800
working work from home working in

00:02:48,430 --> 00:02:54,550
offices but mainly communicating by

00:02:50,800 --> 00:02:56,650
email by IRC and just working on cool

00:02:54,550 --> 00:03:00,340
stuff in the Linux environment it's

00:02:56,650 --> 00:03:03,160
great we've got our next big

00:03:00,340 --> 00:03:04,540
get-together starts tomorrow in San

00:03:03,160 --> 00:03:08,200
Francisco I'm going to be flying out

00:03:04,540 --> 00:03:10,060
there tomorrow morning we have full of

00:03:08,200 --> 00:03:12,340
those every year there's lots and lots

00:03:10,060 --> 00:03:18,970
of cool stuff going on Lin our dog if

00:03:12,340 --> 00:03:23,140
you're interested where are we up to we

00:03:18,970 --> 00:03:25,330
have in the past the herders hasn't been

00:03:23,140 --> 00:03:29,470
a huge amount of interest in arm for

00:03:25,330 --> 00:03:32,830
generic linux distributions that's

00:03:29,470 --> 00:03:35,890
becoming less and less the case as time

00:03:32,830 --> 00:03:39,880
goes on as the newer arm cpus are that

00:03:35,890 --> 00:03:42,580
much more powerful and capable of

00:03:39,880 --> 00:03:46,000
running the full standard Linux software

00:03:42,580 --> 00:03:49,150
stack it used to be the case that of

00:03:46,000 --> 00:03:52,480
course people new arms were arm CPUs

00:03:49,150 --> 00:03:54,070
were in mobile phones but that mobile

00:03:52,480 --> 00:03:57,730
phones were always running some very

00:03:54,070 --> 00:03:59,890
specialized software stack which

00:03:57,730 --> 00:04:01,690
typically most most end-users will never

00:03:59,890 --> 00:04:04,959
even know about let alone be able to

00:04:01,690 --> 00:04:07,720
work on in the next few years you're

00:04:04,959 --> 00:04:10,329
going to see arm CPUs in everything all

00:04:07,720 --> 00:04:14,170
the way up from smartphones desktops

00:04:10,329 --> 00:04:16,630
hopefully notebooks and servers there's

00:04:14,170 --> 00:04:19,239
a lot more use and a lot more well

00:04:16,630 --> 00:04:21,250
demand now to have generic linux

00:04:19,239 --> 00:04:23,400
distributions running on arm that's why

00:04:21,250 --> 00:04:23,400
I'm here

00:04:24,060 --> 00:04:32,650
so the hard float a bi um um in the past

00:04:29,800 --> 00:04:37,289
has suffered from a variety of different

00:04:32,650 --> 00:04:39,430
standards in terms of how software works

00:04:37,289 --> 00:04:41,349
I'll go through go through the details

00:04:39,430 --> 00:04:46,060
very briefly I don't know poor people

00:04:41,349 --> 00:04:48,129
please shout if you think I am in the

00:04:46,060 --> 00:04:52,030
dim and distant past the Merc the first

00:04:48,129 --> 00:04:54,490
really common arm linux ABI assumed that

00:04:52,030 --> 00:04:56,379
always your arm CPU would have a

00:04:54,490 --> 00:04:58,449
floating-point unit although that was

00:04:56,379 --> 00:05:04,750
approximately never the case in a really

00:04:58,449 --> 00:05:07,590
good design so when you an software that

00:05:04,750 --> 00:05:09,969
depended on floating point operations

00:05:07,590 --> 00:05:11,849
the colonel would have to catch an

00:05:09,969 --> 00:05:15,250
exception for an illegal instruction

00:05:11,849 --> 00:05:19,509
spend loads and loads of CPU cycles and

00:05:15,250 --> 00:05:21,279
virile time fixing up the the the

00:05:19,509 --> 00:05:23,699
exception state to work out what

00:05:21,279 --> 00:05:26,800
instruction you just tried to execute

00:05:23,699 --> 00:05:29,500
emulate that instruction and then return

00:05:26,800 --> 00:05:34,000
back to your usual and program that did

00:05:29,500 --> 00:05:38,020
work but by god was it slow so we moved

00:05:34,000 --> 00:05:41,050
on to a newer version of neuro design of

00:05:38,020 --> 00:05:44,650
API form Oh quite a number of years ago

00:05:41,050 --> 00:05:46,569
called the e ABI which actually allowed

00:05:44,650 --> 00:05:50,979
for use of hot of hardware floating

00:05:46,569 --> 00:05:52,949
point but by default didn't expect it so

00:05:50,979 --> 00:05:55,810
this is a much more sane way of working

00:05:52,949 --> 00:05:57,550
in case you didn't have a hardware

00:05:55,810 --> 00:06:01,199
floating point unit you would copy all

00:05:57,550 --> 00:06:04,539
of your floating point arguments and

00:06:01,199 --> 00:06:09,729
return values into and out of integer

00:06:04,539 --> 00:06:12,759
registers so emulate floating point you

00:06:09,729 --> 00:06:14,919
Hardware in New Zealand without having

00:06:12,759 --> 00:06:16,810
to take the colonel exception cost it

00:06:14,919 --> 00:06:20,289
was good it was fine and people were

00:06:16,810 --> 00:06:23,529
generally happy with it so we get

00:06:20,289 --> 00:06:26,879
forward to today with the latest version

00:06:23,529 --> 00:06:29,710
of the 32-bit on processor the v7

00:06:26,879 --> 00:06:31,750
actually now everything does have

00:06:29,710 --> 00:06:33,669
hardware floating point not absolutely

00:06:31,750 --> 00:06:37,120
everything it's still possible to do a

00:06:33,669 --> 00:06:37,340
v7 are without but again approximately

00:06:37,120 --> 00:06:39,740
no

00:06:37,340 --> 00:06:42,669
what he does so we've now got this API

00:06:39,740 --> 00:06:46,330
that's designed and optimized for a

00:06:42,669 --> 00:06:48,560
software implementation floating point

00:06:46,330 --> 00:06:51,620
even though we now have a hardware that

00:06:48,560 --> 00:06:56,930
makes that obsolete the cost of doing

00:06:51,620 --> 00:06:59,210
the copying in so if you have a function

00:06:56,930 --> 00:07:01,669
call into a library at the moment that

00:06:59,210 --> 00:07:03,620
does floating-point arguments you end up

00:07:01,669 --> 00:07:06,229
having to copy all of the arguments from

00:07:03,620 --> 00:07:07,760
the floating point register into in

00:07:06,229 --> 00:07:10,850
floating point registers into integer

00:07:07,760 --> 00:07:13,220
registers do your call in the function

00:07:10,850 --> 00:07:14,810
call the in the corlee you have to copy

00:07:13,220 --> 00:07:16,820
them out and back into floating point

00:07:14,810 --> 00:07:18,260
registers do all the what whatever work

00:07:16,820 --> 00:07:21,010
you wanted to do which might just be a

00:07:18,260 --> 00:07:24,139
single intention a single instruction

00:07:21,010 --> 00:07:26,510
when you finished copy the result back

00:07:24,139 --> 00:07:28,580
into the interview registers return to

00:07:26,510 --> 00:07:30,530
your caller the call of an has to copy

00:07:28,580 --> 00:07:32,479
the results back out of the interior

00:07:30,530 --> 00:07:34,160
integer registers into the floating

00:07:32,479 --> 00:07:36,949
point register where it was working on

00:07:34,160 --> 00:07:39,250
them in the first place so that's four

00:07:36,949 --> 00:07:42,260
complete copies of all of those um

00:07:39,250 --> 00:07:47,990
that's not very efficient if you don't

00:07:42,260 --> 00:07:50,570
have to do it so what we what we've done

00:07:47,990 --> 00:07:53,300
with the whole flow ABI is purely and

00:07:50,570 --> 00:07:56,620
simply say well let's use the floating

00:07:53,300 --> 00:07:59,300
point registers it's really good

00:07:56,620 --> 00:08:01,039
performance depends very much on your

00:07:59,300 --> 00:08:03,380
workload if you're doing a whole load of

00:08:01,039 --> 00:08:06,169
integer calculations if you're just

00:08:03,380 --> 00:08:08,270
doing a compiler on or you know typical

00:08:06,169 --> 00:08:10,849
general code you may never see any any

00:08:08,270 --> 00:08:15,139
benefit from this it will admit if

00:08:10,849 --> 00:08:18,950
you're doing things like pas vrai you

00:08:15,139 --> 00:08:21,020
know the vendor that's a particularly

00:08:18,950 --> 00:08:23,539
good example of a difference it can make

00:08:21,020 --> 00:08:26,599
it very recursive using floating point

00:08:23,539 --> 00:08:28,910
everywhere we have benchmarks that show

00:08:26,599 --> 00:08:30,710
that you can see like a factor of three

00:08:28,910 --> 00:08:34,219
or even four times performance speed up

00:08:30,710 --> 00:08:36,349
doing that doing the hard float that's a

00:08:34,219 --> 00:08:38,930
really big win now of course that's one

00:08:36,349 --> 00:08:41,839
extreme what we're finding in terms of

00:08:38,930 --> 00:08:45,170
more general benchmarks is that current

00:08:41,839 --> 00:08:48,170
graphics libraries gtk libraries and

00:08:45,170 --> 00:08:49,850
related stuff actually can see fifteen

00:08:48,170 --> 00:08:53,389
maybe twenty percent performance and for

00:08:49,850 --> 00:08:54,560
on common cases because of course that

00:08:53,389 --> 00:08:57,649
if they're simply they're passing around

00:08:54,560 --> 00:09:00,949
floating point values internally it

00:08:57,649 --> 00:09:02,509
makes a lot of sense to do this on the

00:09:00,949 --> 00:09:03,800
desktop it might not sound like much

00:09:02,509 --> 00:09:05,630
about fifteen to twenty percent

00:09:03,800 --> 00:09:08,000
performance improvement actually can

00:09:05,630 --> 00:09:10,639
make can be really quite noticeable it

00:09:08,000 --> 00:09:14,480
means that you know moving windows

00:09:10,639 --> 00:09:16,190
around starting programs everything can

00:09:14,480 --> 00:09:20,779
actually be noticeably quicker it feels

00:09:16,190 --> 00:09:23,589
smoother it's good to have performance

00:09:20,779 --> 00:09:28,910
is the reason we started the rhf work

00:09:23,589 --> 00:09:30,730
however the the thing that's actually

00:09:28,910 --> 00:09:34,730
really now driving it forward is

00:09:30,730 --> 00:09:37,279
standardization um over the years we've

00:09:34,730 --> 00:09:39,560
had many many many different variations

00:09:37,279 --> 00:09:43,279
on a theme in the arm world in terms of

00:09:39,560 --> 00:09:45,290
how people build their programs and for

00:09:43,279 --> 00:09:48,769
devices like like cell phones where

00:09:45,290 --> 00:09:50,480
you're you go to ship one one drop of

00:09:48,769 --> 00:09:52,040
software with the device it's never

00:09:50,480 --> 00:09:54,500
going to be uploaded it's never going to

00:09:52,040 --> 00:09:57,470
be fiddled with nobody wants to be able

00:09:54,500 --> 00:09:58,730
to tweak it that's fine but of course

00:09:57,470 --> 00:10:01,069
now we want if we're getting to the

00:09:58,730 --> 00:10:02,930
stage where we want arm devices to be

00:10:01,069 --> 00:10:05,959
general-purpose computers whether their

00:10:02,930 --> 00:10:07,610
servers or desktops or whatever um it

00:10:05,959 --> 00:10:09,889
now helps if you can actually have one

00:10:07,610 --> 00:10:12,829
style of software one set of standards

00:10:09,889 --> 00:10:14,149
so that your binary for any one of those

00:10:12,829 --> 00:10:16,459
machines will work on any other

00:10:14,149 --> 00:10:18,470
obviously modulo you actually having

00:10:16,459 --> 00:10:20,720
libraries installed and so on but at

00:10:18,470 --> 00:10:24,819
least this way we actually we want to

00:10:20,720 --> 00:10:24,819
have one standard API going forwards

00:10:25,060 --> 00:10:29,449
specifically the most common thing and

00:10:27,439 --> 00:10:31,339
again you'll see this in the press and

00:10:29,449 --> 00:10:34,759
whatever arm servers are coming real

00:10:31,339 --> 00:10:37,250
soon now people who want to run arm

00:10:34,759 --> 00:10:38,810
servers in the data center what we'll

00:10:37,250 --> 00:10:42,970
want to have the choice of installing

00:10:38,810 --> 00:10:45,290
debian or red hat or 12 or Souza and

00:10:42,970 --> 00:10:49,009
they'll also want to be able to go to

00:10:45,290 --> 00:10:51,529
their stamp to their preferred software

00:10:49,009 --> 00:10:53,480
vendor to go and install whatever

00:10:51,529 --> 00:10:55,250
whatever other binary programs are

00:10:53,480 --> 00:10:57,649
available to be able to run their

00:10:55,250 --> 00:10:59,930
business without having a standard ABI

00:10:57,649 --> 00:11:01,730
then again you would have to have

00:10:59,930 --> 00:11:04,040
completely different build for each

00:11:01,730 --> 00:11:06,170
different distro at which point out the

00:11:04,040 --> 00:11:10,970
isv market would never take off we want

00:11:06,170 --> 00:11:13,540
to get something standardized so moving

00:11:10,970 --> 00:11:16,130
on I'll get to your be in a moment in

00:11:13,540 --> 00:11:18,140
debian we've had three different arm

00:11:16,130 --> 00:11:19,910
ports over the years just basically

00:11:18,140 --> 00:11:22,130
following exactly the same maybe eyes as

00:11:19,910 --> 00:11:27,560
I've already mentioned we have the

00:11:22,130 --> 00:11:32,120
original arm port which supported on on

00:11:27,560 --> 00:11:35,870
version 3 of words using the old API arm

00:11:32,120 --> 00:11:38,870
linux new is the standard canoe trip put

00:11:35,870 --> 00:11:41,270
that describes that port and that worked

00:11:38,870 --> 00:11:44,540
very well it we know we did it for a

00:11:41,270 --> 00:11:48,950
number of years and it's now dead we

00:11:44,540 --> 00:11:51,730
then moved on to our me L which supports

00:11:48,950 --> 00:11:54,320
v40 which is version for the ARM

00:11:51,730 --> 00:11:57,200
processor including thumb instructions

00:11:54,320 --> 00:11:59,920
and using the new EAB I as I mentioned

00:11:57,200 --> 00:12:03,910
earlier so that's a soft float ABI and

00:11:59,920 --> 00:12:07,520
there's the canoe triplet to go with and

00:12:03,910 --> 00:12:11,120
then just literally in the last couple

00:12:07,520 --> 00:12:14,110
of months we've got on hf which is the

00:12:11,120 --> 00:12:17,900
new hard float version of the ER bi and

00:12:14,110 --> 00:12:20,540
using thumb to its targeting arm v7

00:12:17,900 --> 00:12:22,459
processes so that's anything that most

00:12:20,540 --> 00:12:26,080
of the big lenders are now selling so

00:12:22,459 --> 00:12:29,540
all of the panda boards beagle boards

00:12:26,080 --> 00:12:33,140
the freescale MX series the latest ones

00:12:29,540 --> 00:12:35,870
a wall arm forearm v7 it's you know the

00:12:33,140 --> 00:12:38,839
cortex a8 cortex a9 and all of the

00:12:35,870 --> 00:12:41,779
current working arm is on going on new

00:12:38,839 --> 00:12:46,010
versions of these processors so we've

00:12:41,779 --> 00:12:51,940
come up with a new new triplet arm then

00:12:46,010 --> 00:12:51,940
it's new EAB i hf i just said go on been

00:12:52,000 --> 00:12:58,940
right what about marvel marvel until

00:12:55,730 --> 00:13:02,149
very recently have not released any v7

00:12:58,940 --> 00:13:04,220
processors so a lot of the common things

00:13:02,149 --> 00:13:08,390
out l'oeuf they go a plug the drain plug

00:13:04,220 --> 00:13:11,120
are still running v5 they have just

00:13:08,390 --> 00:13:14,089
started chipping some v 7s which should

00:13:11,120 --> 00:13:16,529
work just fine with with on hf

00:13:14,089 --> 00:13:21,119
as soon as assume that we people start

00:13:16,529 --> 00:13:25,619
testing on them so in debian this have

00:13:21,119 --> 00:13:30,689
we're up to and i'll show hopefully that

00:13:25,619 --> 00:13:32,519
comes out so this is showing the status

00:13:30,689 --> 00:13:35,819
of the different architectures in debian

00:13:32,519 --> 00:13:37,110
and you can see all of the the existing

00:13:35,819 --> 00:13:39,660
architectures are basically up at the

00:13:37,110 --> 00:13:41,519
top of the graph that this shows how

00:13:39,660 --> 00:13:45,509
much of the archive has been built on

00:13:41,519 --> 00:13:47,459
those on those architectures we can see

00:13:45,509 --> 00:13:48,929
heard bundling along at about seventy

00:13:47,459 --> 00:13:53,639
percent I can't see it ever getting

00:13:48,929 --> 00:13:56,249
beyond that sorry miner dig and back in

00:13:53,639 --> 00:13:57,959
the bit at the beginning of december we

00:13:56,249 --> 00:14:01,649
see down here there's two new lines

00:13:57,959 --> 00:14:04,019
joining in one of those is s390x which

00:14:01,649 --> 00:14:07,019
is a new port to the IBM Zed series

00:14:04,019 --> 00:14:09,660
mainframe but using again a new ABI

00:14:07,019 --> 00:14:11,850
that's now 64 bit and that's the green

00:14:09,660 --> 00:14:14,699
line and the red line that goes next to

00:14:11,850 --> 00:14:19,139
it and now is well up into the ninety

00:14:14,699 --> 00:14:22,129
percent range is on hf we've don't we've

00:14:19,139 --> 00:14:24,899
had some incredible success so far

00:14:22,129 --> 00:14:27,769
basically based on the huge amount of

00:14:24,899 --> 00:14:30,720
work done by konstantinos margaritas in

00:14:27,769 --> 00:14:33,929
work work another Debian developer who

00:14:30,720 --> 00:14:35,879
works for genessy who also sell on

00:14:33,929 --> 00:14:39,480
powered devices you know obviously

00:14:35,879 --> 00:14:41,549
they're keen to see this work he did a

00:14:39,480 --> 00:14:44,309
huge amount of port work in the

00:14:41,549 --> 00:14:45,899
unofficial Debian ports archive he and I

00:14:44,309 --> 00:14:50,249
have been working to transfer that over

00:14:45,899 --> 00:14:52,049
into the main Debian archive and it's

00:14:50,249 --> 00:14:53,999
gone very well we're quite happy there's

00:14:52,049 --> 00:14:56,490
still a few things to go we still got

00:14:53,999 --> 00:14:58,470
bugs to fix um I've got a lovely one at

00:14:56,490 --> 00:15:01,740
the moment where Ruby or P threads or

00:14:58,470 --> 00:15:05,309
maybe both conspire to cause test suite

00:15:01,740 --> 00:15:07,589
failures Libre Office has a few issues

00:15:05,309 --> 00:15:10,049
of stockers building it at the moment we

00:15:07,589 --> 00:15:12,029
need to fix those we've got some

00:15:10,049 --> 00:15:15,860
language bootstraps remaining we need to

00:15:12,029 --> 00:15:19,139
bring your common lisp the mono

00:15:15,860 --> 00:15:21,480
developers are asking for help in doing

00:15:19,139 --> 00:15:23,819
it on in doing a small amount of port

00:15:21,480 --> 00:15:25,610
work to make our met Jeff work on for

00:15:23,819 --> 00:15:27,860
mono

00:15:25,610 --> 00:15:29,600
and basically literally just in the last

00:15:27,860 --> 00:15:32,839
couple of weeks we've started migrating

00:15:29,600 --> 00:15:34,880
into debian testing along with the other

00:15:32,839 --> 00:15:36,380
architectures so there's a very good

00:15:34,880 --> 00:15:38,029
chance and we're really hoping that

00:15:36,380 --> 00:15:46,310
we're going to ship on which F with

00:15:38,029 --> 00:15:49,130
weezy in a bun to there have been two on

00:15:46,310 --> 00:15:52,490
ports they only came into doing arm work

00:15:49,130 --> 00:15:54,709
but quite recently the first one they

00:15:52,490 --> 00:15:58,240
did was army l but it's different to our

00:15:54,709 --> 00:15:58,240
meal in debian just to cause confusion

00:15:58,779 --> 00:16:08,120
they have basically done version 7 e ABI

00:16:03,410 --> 00:16:11,570
soft float again with from two and but

00:16:08,120 --> 00:16:15,399
they've called it it's just exactly the

00:16:11,570 --> 00:16:19,190
soft float version of arm hf in the last

00:16:15,399 --> 00:16:20,779
few months on hf has also been

00:16:19,190 --> 00:16:22,690
bootstrapped and abantu they ought to a

00:16:20,779 --> 00:16:26,450
similar pointers we are in debian

00:16:22,690 --> 00:16:28,430
obviously as we're quite close that the

00:16:26,450 --> 00:16:31,070
two teams are working together to get

00:16:28,430 --> 00:16:33,980
the last same last few bugs fixed again

00:16:31,070 --> 00:16:38,480
we're hoping that the next Ubuntu

00:16:33,980 --> 00:16:41,839
release precise pangolin in April will

00:16:38,480 --> 00:16:43,490
also ship with arm hf it will be night

00:16:41,839 --> 00:16:48,800
lovely to get into that because that's

00:16:43,490 --> 00:16:50,930
going to be an LTS release so that's

00:16:48,800 --> 00:16:52,670
where we're up to I'm not going to talk

00:16:50,930 --> 00:16:55,220
much longer because I'm getting bored of

00:16:52,670 --> 00:16:58,640
my own voice than mighty lot so where's

00:16:55,220 --> 00:17:05,980
everybody else up to Suzhou he wants to

00:16:58,640 --> 00:17:05,980
talk pass it back

00:17:09,390 --> 00:17:16,209
yeah sousa started their port

00:17:12,909 --> 00:17:19,480
effectively from scratch end of sep

00:17:16,209 --> 00:17:22,120
tember we're now sitting at just under

00:17:19,480 --> 00:17:28,750
eighty-six percent the full distribution

00:17:22,120 --> 00:17:34,260
ported over using arm hf as a primary

00:17:28,750 --> 00:17:37,210
target we do have a 35 soft load-pull

00:17:34,260 --> 00:17:39,070
sitting there as well but that's not our

00:17:37,210 --> 00:17:41,340
focus that's predominately for people

00:17:39,070 --> 00:17:45,970
that have but like the Guru plugs and

00:17:41,340 --> 00:17:48,580
such like so if anybody wants to chip in

00:17:45,970 --> 00:17:52,740
and move that along bal means come and

00:17:48,580 --> 00:17:58,360
join in but yeah no II predominately

00:17:52,740 --> 00:18:01,960
targeting 37 upwards hard float so I

00:17:58,360 --> 00:18:04,559
were slowly getting there biggest issues

00:18:01,960 --> 00:18:09,730
for us are predominately the Colonel's

00:18:04,559 --> 00:18:13,360
wide variety of them with some spurious

00:18:09,730 --> 00:18:16,299
sources and obviously accelerated

00:18:13,360 --> 00:18:19,149
graphics and for that matter even basic

00:18:16,299 --> 00:18:22,390
2d graphics as a result of colonel

00:18:19,149 --> 00:18:25,799
issues are one of the issues as well

00:18:22,390 --> 00:18:29,880
then we're encountering okay fedora

00:18:25,799 --> 00:18:29,880
anybody here know about Fodor arm

00:18:30,000 --> 00:18:38,679
deathly silence okay I'll chip in I'm

00:18:36,340 --> 00:18:41,020
not a fedora developer never have been

00:18:38,679 --> 00:18:43,000
but I have been following along a number

00:18:41,020 --> 00:18:46,240
of the other distros including Souza and

00:18:43,000 --> 00:18:48,039
Fedora builds Fedora basically at a

00:18:46,240 --> 00:18:52,630
similar kind of situation they've got

00:18:48,039 --> 00:18:57,850
again to arm ports softlock v5 and hog

00:18:52,630 --> 00:18:59,580
float v7 again they're hoping to be able

00:18:57,850 --> 00:19:03,429
to get stuff into the next release

00:18:59,580 --> 00:19:05,830
there's a lot of work to be done not

00:19:03,429 --> 00:19:07,870
necessarily in terms of building forearm

00:19:05,830 --> 00:19:09,880
but also actually getting in sync with

00:19:07,870 --> 00:19:11,559
the rest of fedora cause of course you

00:19:09,880 --> 00:19:13,179
know it's always it's always a moving

00:19:11,559 --> 00:19:14,350
target you never know until you get

00:19:13,179 --> 00:19:17,830
close to a release if you're actually

00:19:14,350 --> 00:19:20,460
going to be shipping with it and gently

00:19:17,830 --> 00:19:20,460
folks around

00:19:21,200 --> 00:19:26,790
well okay I honestly I'm not really the

00:19:23,940 --> 00:19:29,730
most active member of the Armed team but

00:19:26,790 --> 00:19:32,460
I mean being a source based distribution

00:19:29,730 --> 00:19:37,980
makes things easier in some ways and we

00:19:32,460 --> 00:19:41,790
have stages on the the arm v7 and we

00:19:37,980 --> 00:19:43,290
have re 5 based systems and that seems

00:19:41,790 --> 00:19:45,630
to be working just fine a number of

00:19:43,290 --> 00:19:47,100
keywords in the number of packages that

00:19:45,630 --> 00:19:52,260
are actually keyword forearm is

00:19:47,100 --> 00:19:54,120
increasing whoo so I I see it kind of

00:19:52,260 --> 00:19:58,770
working i even have unconfirmed reports

00:19:54,120 --> 00:20:01,610
of people running KDE so who are they

00:19:58,770 --> 00:20:04,380
the v7 is that soft local hot fudge I

00:20:01,610 --> 00:20:06,180
blow up I'll try to figure out I don't

00:20:04,380 --> 00:20:12,090
know I just have an open Roddy ultimate

00:20:06,180 --> 00:20:19,080
silk okay sorry you can use both okay of

00:20:12,090 --> 00:20:21,810
course yep um what what I know the Magi

00:20:19,080 --> 00:20:24,000
folks were all quite interested in arm

00:20:21,810 --> 00:20:25,980
or at least a couple of their developers

00:20:24,000 --> 00:20:30,270
of me making a lot of noise but I don't

00:20:25,980 --> 00:20:41,010
know is anybody around okay Jana pass

00:20:30,270 --> 00:20:44,280
the mic forward I it's on I know some of

00:20:41,010 --> 00:20:49,560
the arch linux guys have arm ports

00:20:44,280 --> 00:20:53,640
working I think it's on b7 but not sure

00:20:49,560 --> 00:20:56,160
they would have to do okay I'm from

00:20:53,640 --> 00:20:58,830
Algeria we are currently starting a reef

00:20:56,160 --> 00:21:03,300
ice bath but we plan to do also am a

00:20:58,830 --> 00:21:07,560
football okay excellent um so fingers

00:21:03,300 --> 00:21:11,430
crossed you know um the what what we've

00:21:07,560 --> 00:21:13,470
been pushing as i said in linaro and in

00:21:11,430 --> 00:21:15,030
arm which is to go for the hot float

00:21:13,470 --> 00:21:21,120
port that does seem to be working or

00:21:15,030 --> 00:21:27,620
land android yes of course isn't is

00:21:21,120 --> 00:21:27,620
another interesting use case we've had

00:21:28,460 --> 00:21:32,970
some contact with the art with the

00:21:30,900 --> 00:21:34,720
android folks I mean there's an Android

00:21:32,970 --> 00:21:37,870
team in linaro as well and they've been

00:21:34,720 --> 00:21:39,370
exploring building as hot float just for

00:21:37,870 --> 00:21:40,600
the sake of the extra performance the

00:21:39,370 --> 00:21:43,120
Android team seemed to be quite

00:21:40,600 --> 00:21:45,100
interested but of course they have that

00:21:43,120 --> 00:21:46,990
they have next to no interest in

00:21:45,100 --> 00:21:49,120
following standards for the sake of

00:21:46,990 --> 00:21:57,370
sharing binaries I'm sure that will come

00:21:49,120 --> 00:21:59,740
as a shock the thing about hard float is

00:21:57,370 --> 00:22:01,240
again I shall should explain is it

00:21:59,740 --> 00:22:03,190
doesn't matter about what Colonel you

00:22:01,240 --> 00:22:06,220
run you can run soft loads and hot float

00:22:03,190 --> 00:22:07,539
binaries on top of the same kernel it's

00:22:06,220 --> 00:22:09,880
just entirely about users based

00:22:07,539 --> 00:22:11,740
interfaces and that's the place where

00:22:09,880 --> 00:22:13,710
Android is so totally different from it

00:22:11,740 --> 00:22:15,760
from all of the other Linux distros but

00:22:13,710 --> 00:22:27,580
there isn't a huge amount of sharing

00:22:15,760 --> 00:22:29,740
going on been gone I just wanted a

00:22:27,580 --> 00:22:32,409
couple of questions first see what is

00:22:29,740 --> 00:22:35,049
the recommended lifetime of the v5 ports

00:22:32,409 --> 00:22:37,750
are they going to disappear anytime soon

00:22:35,049 --> 00:22:40,750
to be honest it ill depend on a lot on

00:22:37,750 --> 00:22:42,490
community support I mean in debian we're

00:22:40,750 --> 00:22:44,530
still willing with v40 and we have been

00:22:42,490 --> 00:22:47,620
for a number of years we've got so many

00:22:44,530 --> 00:22:49,480
people out there with 34 and 35 devices

00:22:47,620 --> 00:22:51,280
that we're not going to the plan is very

00:22:49,480 --> 00:22:55,260
much we're going to keep army l and arm

00:22:51,280 --> 00:22:57,789
hf going in parallel for the foreseeable

00:22:55,260 --> 00:22:58,960
what exactly does what he says a lot of

00:22:57,789 --> 00:23:00,250
people have gone out and bought shiva

00:22:58,960 --> 00:23:02,020
plugs with her own money they're going

00:23:00,250 --> 00:23:06,299
to be very upset if we suddenly say oh

00:23:02,020 --> 00:23:10,690
no we don't care about you anymore who's

00:23:06,299 --> 00:23:12,610
so he's trying to bring me joy in the

00:23:10,690 --> 00:23:15,010
other distributions i guess it'll be a

00:23:12,610 --> 00:23:16,600
similar story the people who've been out

00:23:15,010 --> 00:23:18,640
and bought you know the shiva plugs

00:23:16,600 --> 00:23:21,130
agora plugs whatever to be able to do

00:23:18,640 --> 00:23:23,169
their own small home servers based on

00:23:21,130 --> 00:23:26,770
those well of course they're going to

00:23:23,169 --> 00:23:30,159
want to get wanted to continue arm and

00:23:26,770 --> 00:23:33,820
linaro explicitly of course are

00:23:30,159 --> 00:23:35,350
targeting by new devices and all of the

00:23:33,820 --> 00:23:38,590
limo remember companies are they are

00:23:35,350 --> 00:23:41,230
more interested in v7 than v5 so that's

00:23:38,590 --> 00:23:48,030
why we've had most of the posh has been

00:23:41,230 --> 00:23:48,030
for the hot flow API as we go forward

00:23:48,650 --> 00:23:56,970
of course I don't know as anybody heard

00:23:52,049 --> 00:24:00,360
about on v8 what is anybody not heard

00:23:56,970 --> 00:24:06,770
about on v8 fine will be some basically

00:24:00,360 --> 00:24:10,049
arm v7 is the last so far arm ABI or arm

00:24:06,770 --> 00:24:12,809
processor design that is only 32 bits on

00:24:10,049 --> 00:24:17,159
v8 is the point where arm will finally

00:24:12,809 --> 00:24:18,480
be producing a fully 64-bit machine so

00:24:17,159 --> 00:24:20,600
you'll get all the all of the usual

00:24:18,480 --> 00:24:22,770
benefits of larger address space

00:24:20,600 --> 00:24:24,780
potentially more registers more

00:24:22,770 --> 00:24:28,770
instructions all kinds of good things

00:24:24,780 --> 00:24:32,190
and it's seen as critical as arm moves

00:24:28,770 --> 00:24:34,409
into into service the important thing

00:24:32,190 --> 00:24:36,030
about v8 is of course it'll also

00:24:34,409 --> 00:24:38,130
continue to run all of these seven

00:24:36,030 --> 00:24:40,020
instructions and hopefully should be

00:24:38,130 --> 00:24:44,100
just as fast at running those as as the

00:24:40,020 --> 00:24:47,940
previous 37 machines were on hf is very

00:24:44,100 --> 00:24:52,470
much the solution to willing 32-bit

00:24:47,940 --> 00:24:53,730
systems on v8 but that's one of the

00:24:52,470 --> 00:24:56,010
reasons what we're standardizing it

00:24:53,730 --> 00:24:58,710
we're even hoping that we might be able

00:24:56,010 --> 00:25:01,200
to get through LSP certification and

00:24:58,710 --> 00:25:03,120
have arm added as an LSP architecture

00:25:01,200 --> 00:25:13,890
it's not there yet the still work to be

00:25:03,120 --> 00:25:20,970
done but we're hoping for it yes you'll

00:25:13,890 --> 00:25:24,059
pass the mic back bend so still back to

00:25:20,970 --> 00:25:28,860
arm v8 wet what if applications want to

00:25:24,059 --> 00:25:32,429
use a more than 64 g girl from in that

00:25:28,860 --> 00:25:34,080
situation well they will a single

00:25:32,429 --> 00:25:36,630
application using more than four gigs

00:25:34,080 --> 00:25:38,580
will need to be written to be v8 so

00:25:36,630 --> 00:25:40,169
it'll need to be compiled to run you

00:25:38,580 --> 00:25:44,820
know the new instruction set the new

00:25:40,169 --> 00:25:46,860
architecture in terms of machine of

00:25:44,820 --> 00:25:49,980
systems where you may want more memory

00:25:46,860 --> 00:25:52,049
than 16 than four gig but you you're not

00:25:49,980 --> 00:25:56,580
necessarily bothered about I'm running

00:25:52,049 --> 00:25:59,250
that then the latest cortex a15

00:25:56,580 --> 00:26:00,269
processor will include virtualization

00:25:59,250 --> 00:26:03,899
extensions

00:26:00,269 --> 00:26:06,239
and LP AE so you can have large amounts

00:26:03,899 --> 00:26:08,839
of memory available similarly to what

00:26:06,239 --> 00:26:11,399
Intel did before they went fully 64-bit

00:26:08,839 --> 00:26:14,129
you'll be able to have many many

00:26:11,399 --> 00:26:16,139
processes or threads all running with

00:26:14,129 --> 00:26:17,969
large with in a reasonable amount of

00:26:16,139 --> 00:26:19,559
memory but you'll be able to have one

00:26:17,969 --> 00:26:28,349
single machine supporting all of them

00:26:19,559 --> 00:26:30,299
are once you're past them across so this

00:26:28,349 --> 00:26:32,519
is maybe slightly less of a distro

00:26:30,299 --> 00:26:34,259
related point but yeah since I'm here

00:26:32,519 --> 00:26:37,289
with Zen dog I thought I'd mention that

00:26:34,259 --> 00:26:40,079
we've got Zen working now more or less

00:26:37,289 --> 00:26:41,909
on arm we haven't got any tool or guest

00:26:40,079 --> 00:26:45,269
support yet but we do have a Dom North

00:26:41,909 --> 00:26:47,190
the boots to a shell prompt and we're

00:26:45,269 --> 00:26:51,299
expecting to get that stuff into our

00:26:47,190 --> 00:26:53,609
tree very soon and in the next few

00:26:51,299 --> 00:26:58,679
months we should expect to have a

00:26:53,609 --> 00:27:01,669
working arm proper pool but you can run

00:26:58,679 --> 00:27:05,099
everything you like on that works

00:27:01,669 --> 00:27:06,690
however only on hardware that doesn't

00:27:05,099 --> 00:27:09,629
exist yet so it's slightly ahead of the

00:27:06,690 --> 00:27:12,659
curve that's the virtualization

00:27:09,629 --> 00:27:17,159
extensions that i'm steve was just

00:27:12,659 --> 00:27:19,649
talking about yeah on a 15 a kvm i

00:27:17,159 --> 00:27:21,929
believe is meant to be up on up and

00:27:19,649 --> 00:27:24,989
running on a 15 in models at the moment

00:27:21,929 --> 00:27:29,999
but i could be wrong the qme folks are

00:27:24,989 --> 00:27:34,349
also looking at a 15 and virtualization

00:27:29,999 --> 00:27:38,239
and extend an expanded memory there's a

00:27:34,349 --> 00:27:43,829
lot of work still to be done there sorry

00:27:38,239 --> 00:27:45,329
yes PV ops no actually I mean you say PV

00:27:43,829 --> 00:27:47,639
ops where we're talking about

00:27:45,329 --> 00:27:50,789
essentially upstream linux kernel's here

00:27:47,639 --> 00:27:57,419
the changes you need to make to get it

00:27:50,789 --> 00:27:59,759
to run as adam not a trivial okay what

00:27:57,419 --> 00:28:01,229
we have any other updates many of you

00:27:59,759 --> 00:28:08,249
love this rose I might not fault or any

00:28:01,229 --> 00:28:10,279
other questions please so i I'm I'm both

00:28:08,249 --> 00:28:13,830
Doug and developer and Mozilla developer

00:28:10,279 --> 00:28:18,710
so my interest is

00:28:13,830 --> 00:28:21,360
to know your experiences with testing so

00:28:18,710 --> 00:28:23,070
one of the problems with arm is that

00:28:21,360 --> 00:28:25,610
there are so many different levels and

00:28:23,070 --> 00:28:28,470
different socks and stuff like that and

00:28:25,610 --> 00:28:30,750
for example in debian i've had the

00:28:28,470 --> 00:28:33,380
problem that some packages would

00:28:30,750 --> 00:28:36,510
wouldn't really work on none before

00:28:33,380 --> 00:28:39,360
while we target in it and we're actually

00:28:36,510 --> 00:28:41,820
building on arm v5 so we have some

00:28:39,360 --> 00:28:44,840
problem testing it to actually know if

00:28:41,820 --> 00:28:49,230
it works in on on um before and

00:28:44,840 --> 00:28:52,590
relatedly at mozilla we have we are

00:28:49,230 --> 00:28:57,210
trying to get firefox running on Ombey 6

00:28:52,590 --> 00:29:00,799
and while the bills we have run on rb7

00:28:57,210 --> 00:29:04,080
they don't on actual arm v6 because of

00:29:00,799 --> 00:29:06,720
fancy stuff like page coloring so yeah

00:29:04,080 --> 00:29:09,929
so i would like to hear about your

00:29:06,720 --> 00:29:12,360
experiences on tests showing on various

00:29:09,929 --> 00:29:15,059
architecture yeah i mean of course the

00:29:12,360 --> 00:29:18,450
fun thing in debian the reason that

00:29:15,059 --> 00:29:20,549
we're still supporting v40 is big is as

00:29:18,450 --> 00:29:23,159
far as i understand basically the open

00:29:20,549 --> 00:29:25,549
moco is the last v2 340 processor

00:29:23,159 --> 00:29:27,659
outward that people really care about

00:29:25,549 --> 00:29:30,870
unfortunately it's also a really really

00:29:27,659 --> 00:29:36,389
small machine were the prospect of

00:29:30,870 --> 00:29:40,019
building or running Firefox is scary um

00:29:36,389 --> 00:29:42,620
actually runs on each used to shop I

00:29:40,019 --> 00:29:46,649
mean I guess you Mike yeah yeah yeah I

00:29:42,620 --> 00:29:49,470
think we actually met before but of

00:29:46,649 --> 00:29:52,799
course the problem is that building for

00:29:49,470 --> 00:29:56,100
v4 and testing on v4 are two different

00:29:52,799 --> 00:29:58,529
things so while we can have the tool

00:29:56,100 --> 00:30:00,480
chain running on v5 and targeting v4 and

00:29:58,529 --> 00:30:02,659
it it we're happy it mostly works just

00:30:00,480 --> 00:30:05,070
fine you know modular the occasional bug

00:30:02,659 --> 00:30:09,389
running actually finding v4 tease that

00:30:05,070 --> 00:30:11,519
we can test on is very difficult equally

00:30:09,389 --> 00:30:14,480
for even more so funding v40 that's big

00:30:11,519 --> 00:30:16,950
enough to be able to do useful testing I

00:30:14,480 --> 00:30:20,179
don't really have a solution to that if

00:30:16,950 --> 00:30:20,179
you have any suggestions

00:30:22,050 --> 00:30:30,310
and again a similar thing with v7v 600 a

00:30:27,970 --> 00:30:32,740
lot of on v6 devices out there but most

00:30:30,310 --> 00:30:34,810
of them are fairly locked down and built

00:30:32,740 --> 00:30:38,380
into my internet mobile phones and so on

00:30:34,810 --> 00:30:43,420
in terms of finding a generic accessible

00:30:38,380 --> 00:30:44,920
v6 it's not so easy so yes the Raspberry

00:30:43,420 --> 00:30:49,600
Pi is actually one of the fat one of the

00:30:44,920 --> 00:30:55,150
very few that i'm aware of at the beagle

00:30:49,600 --> 00:30:59,320
is v7 so of course at the moment we've

00:30:55,150 --> 00:31:01,930
got the the big split almost from v5 to

00:30:59,320 --> 00:31:04,060
v7 the raspberry pi is a v6 and it's

00:31:01,930 --> 00:31:05,440
fairly well-known off the top of my head

00:31:04,060 --> 00:31:08,860
I mean I work for them but I couldn't

00:31:05,440 --> 00:31:10,810
tell you all the v6 CPUs out there it

00:31:08,860 --> 00:31:12,340
all depends on what the silicon partners

00:31:10,810 --> 00:31:23,230
have done I don't know what key can you

00:31:12,340 --> 00:31:25,570
think of any notice v5 ok there are a

00:31:23,230 --> 00:31:27,040
few SOC s but actually getting hold of

00:31:25,570 --> 00:31:30,360
them to be able to do useful testing

00:31:27,040 --> 00:31:30,360
whatever with them is difficult i

00:31:35,010 --> 00:31:39,610
believe all just about all of them are

00:31:37,660 --> 00:31:41,290
valves until very recently were v5 i'm

00:31:39,610 --> 00:31:47,050
not i don't know of any more velvety

00:31:41,290 --> 00:31:48,670
sixes yeah so yes Mike it's a you have

00:31:47,050 --> 00:31:53,020
good questions and I wish I could give

00:31:48,670 --> 00:31:54,640
you an answer basically v5 v 7 seemed to

00:31:53,020 --> 00:31:57,880
be the sweet spots in terms of building

00:31:54,640 --> 00:32:00,600
and targeting just because of the sheer

00:31:57,880 --> 00:32:02,860
number of different associés available

00:32:00,600 --> 00:32:05,080
it's the best thing I can suggest I mean

00:32:02,860 --> 00:32:08,220
to be honest actually quick show of

00:32:05,080 --> 00:32:10,810
hands does anyone here have an open moco

00:32:08,220 --> 00:32:12,780
does anyone here actually use their open

00:32:10,810 --> 00:32:15,120
mocha

00:32:12,780 --> 00:32:16,590
right wiki he knows how to build his own

00:32:15,120 --> 00:32:20,580
stuff would anybody that would anybody

00:32:16,590 --> 00:32:29,040
here see what he here care much if

00:32:20,580 --> 00:32:31,230
debian stopped supporting v40 1234 ok

00:32:29,040 --> 00:32:33,630
not that I'm suggesting we're going to

00:32:31,230 --> 00:32:35,430
do I'm just curiously curious because it

00:32:33,630 --> 00:32:46,070
is a question that comes up where you

00:32:35,430 --> 00:32:46,070
Lily as why are we doing it sure yeah

00:32:49,700 --> 00:32:55,290
yeah wonderful okay we will end up at

00:32:53,490 --> 00:32:57,060
some point in the future dropping v40 I

00:32:55,290 --> 00:33:06,390
think we can guarantee that we have

00:32:57,060 --> 00:33:09,120
another question at the back okay can we

00:33:06,390 --> 00:33:19,230
pass the mic back I said I couldn't hear

00:33:09,120 --> 00:33:22,140
that either yes as I was seeing very

00:33:19,230 --> 00:33:26,520
pretty quite all our devices running

00:33:22,140 --> 00:33:29,130
cirrus logic EP 9 3 x.x SOC s okay those

00:33:26,520 --> 00:33:31,760
days OCS also have vga display most of

00:33:29,130 --> 00:33:36,330
the time so having a full-blown deaveon

00:33:31,760 --> 00:33:41,190
can make sense okay now what you can get

00:33:36,330 --> 00:33:43,950
as a mouse I mean as an individual it's

00:33:41,190 --> 00:33:46,770
just be simple simple machines in one

00:33:43,950 --> 00:33:49,910
board or something like that so if you

00:33:46,770 --> 00:33:58,890
drop it I you I won't beat you okay

00:33:49,910 --> 00:34:00,480
thank you what sorry Bob Oxford semi

00:33:58,890 --> 00:34:08,540
have some be sexist as well apparently

00:34:00,480 --> 00:34:14,100
fine they don't exist anymore i'm told

00:34:08,540 --> 00:34:20,669
okay what do we have any questions about

00:34:14,100 --> 00:34:23,570
actually putting things to arm yeah uh

00:34:20,669 --> 00:34:23,570
Andrew

00:34:25,840 --> 00:34:33,130
one of like makes one of the issues that

00:34:28,640 --> 00:34:39,050
we have with porting Suzie's farm is the

00:34:33,130 --> 00:34:43,399
breadth of kernels for each SOC what's

00:34:39,050 --> 00:34:48,500
the status of device tree for trying to

00:34:43,399 --> 00:34:58,130
flatten Ben seems to be keen to answer

00:34:48,500 --> 00:34:59,600
that I think there's a big actually that

00:34:58,130 --> 00:35:00,920
sort of the question is slightly wrong

00:34:59,600 --> 00:35:02,630
it's not the device tree that's

00:35:00,920 --> 00:35:04,700
important he's actually getting the

00:35:02,630 --> 00:35:07,400
colonel to build for multiple different

00:35:04,700 --> 00:35:11,060
systems because there we got the v4 v5

00:35:07,400 --> 00:35:13,990
v6 v7 problems and we got a whole pile

00:35:11,060 --> 00:35:18,290
of soc spot which doesn't quite yet all

00:35:13,990 --> 00:35:20,600
exists all exists happily together I

00:35:18,290 --> 00:35:23,000
mean linaro have been doing up to work

00:35:20,600 --> 00:35:25,550
the community in this with trying to get

00:35:23,000 --> 00:35:27,200
it so you can compile a kernel but the

00:35:25,550 --> 00:35:29,420
existing booting weight should still

00:35:27,200 --> 00:35:30,950
work for the existing machines it's

00:35:29,420 --> 00:35:34,040
you're getting the colonel to support it

00:35:30,950 --> 00:35:35,690
as we move forward on v7 one of the

00:35:34,040 --> 00:35:37,310
biggest targets for the Lenovo Colonel

00:35:35,690 --> 00:35:41,090
team is to have the singles ad image

00:35:37,310 --> 00:35:43,550
that will boot on any v7 frankly being

00:35:41,090 --> 00:35:45,440
brutally honest make it beat not for

00:35:43,550 --> 00:35:47,630
saying this it's probably never going to

00:35:45,440 --> 00:35:49,760
happen that will support all of them but

00:35:47,630 --> 00:35:52,010
at least for the commodity devices that

00:35:49,760 --> 00:35:55,850
all of the current silicon vendors are

00:35:52,010 --> 00:35:58,400
pushing now the landing teams are trying

00:35:55,850 --> 00:36:00,560
to get together to get using device tree

00:35:58,400 --> 00:36:02,690
you should be able to get at all of

00:36:00,560 --> 00:36:05,510
those systems running on a single that

00:36:02,690 --> 00:36:06,920
image that is the Holy Grail it's

00:36:05,510 --> 00:36:08,270
exactly where we want to get to for

00:36:06,920 --> 00:36:10,250
example for servers we don't want to

00:36:08,270 --> 00:36:11,900
have to have 15 different kernel flavors

00:36:10,250 --> 00:36:18,200
to be able to support the machines

00:36:11,900 --> 00:36:20,720
because frankly that's a mess yeah

00:36:18,200 --> 00:36:22,460
device treba produces a very useful

00:36:20,720 --> 00:36:24,230
thing of actually not having to keep

00:36:22,460 --> 00:36:26,390
changing a colonel but the old booting

00:36:24,230 --> 00:36:28,390
mefferd with a member is actually quite

00:36:26,390 --> 00:36:33,430
valid even for a multi-image colonel

00:36:28,390 --> 00:36:36,040
whose own yeah um

00:36:33,430 --> 00:36:38,109
I said the I'm curious actually is

00:36:36,040 --> 00:36:39,760
anybody else you know actually being

00:36:38,109 --> 00:36:50,790
entirely selfish is anybody else seen

00:36:39,760 --> 00:36:52,960
any problems with movie alarm no yay I

00:36:50,790 --> 00:36:54,490
just said I met a man last night who

00:36:52,960 --> 00:36:56,319
seemed a very keen ruby developer who

00:36:54,490 --> 00:36:58,599
was was remarkably keen to help solve

00:36:56,319 --> 00:37:00,280
this issue ok cool I think we should

00:36:58,599 --> 00:37:01,420
just talk to them yeah apparently

00:37:00,280 --> 00:37:02,980
there's all sorts of problems with

00:37:01,420 --> 00:37:07,210
Ruby's threading so it might not just

00:37:02,980 --> 00:37:09,700
feels sure equally the one thing that I

00:37:07,210 --> 00:37:13,900
was quite surprised to find actually was

00:37:09,700 --> 00:37:16,809
I could not find any P threads torture

00:37:13,900 --> 00:37:18,579
tests out though available there's a

00:37:16,809 --> 00:37:20,500
number of area of test suites available

00:37:18,579 --> 00:37:22,690
for testing different bits of P threads

00:37:20,500 --> 00:37:24,760
and make sure it meets the spec but in

00:37:22,690 --> 00:37:26,920
terms of doing really evil nasty

00:37:24,760 --> 00:37:28,869
you know like spawn ten thousand threads

00:37:26,920 --> 00:37:30,550
and have them do all kinds of things in

00:37:28,869 --> 00:37:32,859
the wrong order and make sure that white

00:37:30,550 --> 00:37:35,109
hunters still come out I am not aware of

00:37:32,859 --> 00:37:36,369
any please I'd love for one of you to be

00:37:35,109 --> 00:37:54,819
able to tell me I'm wrong number there's

00:37:36,369 --> 00:37:55,980
one out there please Oh us right what

00:37:54,819 --> 00:37:58,900
keys Mike doesn't seem to be working

00:37:55,980 --> 00:38:00,579
what if what he says there was a gut

00:37:58,900 --> 00:38:03,700
there was a person from Fedora wants to

00:38:00,579 --> 00:38:05,380
talk to him about multi arch if so it

00:38:03,700 --> 00:38:07,270
doesn't know who you are please grab him

00:38:05,380 --> 00:38:12,730
now because he's going to be leaving and

00:38:07,270 --> 00:38:14,559
running away in an hour multi arch is a

00:38:12,730 --> 00:38:17,859
big thing with in debian and ubuntu at

00:38:14,559 --> 00:38:19,839
the moment it's a major technical goal

00:38:17,859 --> 00:38:22,119
that we've been working on for far

00:38:19,839 --> 00:38:23,619
longer than it should have taken but it

00:38:22,119 --> 00:38:25,660
is very much the white answer in the

00:38:23,619 --> 00:38:28,450
future we feel for supporting multiple

00:38:25,660 --> 00:38:30,280
architectures and maybe multiple flavors

00:38:28,450 --> 00:38:33,790
of multiple architectures on the same

00:38:30,280 --> 00:38:35,829
system at once I know that I've had

00:38:33,790 --> 00:38:37,569
dealings with a number of the Fedora

00:38:35,829 --> 00:38:40,930
folks who were very keen on following

00:38:37,569 --> 00:38:43,930
the same path doing how many feelings

00:38:40,930 --> 00:38:46,589
feelings on it from the sousa arch

00:38:43,930 --> 00:38:46,589
anyone

00:38:55,109 --> 00:39:09,519
I've seen that yes yeah okay cool so yay

00:39:04,539 --> 00:39:11,549
okay fine if people would like to know

00:39:09,519 --> 00:39:13,930
more about multi Archer why it's useful

00:39:11,549 --> 00:39:15,640
there's a whole bunch of information on

00:39:13,930 --> 00:39:18,459
the Debian wiki the bunt a wiki the

00:39:15,640 --> 00:39:22,589
lenovo wiki and generally it's good

00:39:18,459 --> 00:39:27,989
please do it one of the interesting

00:39:22,589 --> 00:39:32,890
parts of art of hf is that due to the

00:39:27,989 --> 00:39:35,700
existing EAB i spec mhf demands that at

00:39:32,890 --> 00:39:39,959
least some of the base basic system is

00:39:35,700 --> 00:39:43,150
following the multi arch conventions

00:39:39,959 --> 00:39:47,589
i'll explain that slightly more in that

00:39:43,150 --> 00:39:51,660
the the name of the path to the runtime

00:39:47,589 --> 00:39:58,359
linker LDS o on arm hf and army hell is

00:39:51,660 --> 00:40:01,239
exactly the same that is quite scary if

00:39:58,359 --> 00:40:04,569
you manage to mix them up in that if you

00:40:01,239 --> 00:40:06,249
try to run a binary with the wrong one

00:40:04,569 --> 00:40:08,469
time linker and potentially the wrong

00:40:06,249 --> 00:40:11,019
wrong libraries with arielle and rh f

00:40:08,469 --> 00:40:13,089
you won't necessarily know that you've

00:40:11,019 --> 00:40:15,549
got it wrong it's not like if you're

00:40:13,089 --> 00:40:18,309
trying to run a spark binary on a 93 86

00:40:15,549 --> 00:40:21,009
where it'll just say one architecture or

00:40:18,309 --> 00:40:26,199
if you or if you're trying to run a

00:40:21,009 --> 00:40:27,999
64-bit intel binary on the 32-bit i386

00:40:26,199 --> 00:40:29,799
well again it will tell you that you're

00:40:27,999 --> 00:40:32,699
trying to run an invalid elf program

00:40:29,799 --> 00:40:36,430
I'll me Eleanor HFR close enough that

00:40:32,699 --> 00:40:38,109
the programs will run unless you're very

00:40:36,430 --> 00:40:42,430
careful but just give you the wrong

00:40:38,109 --> 00:40:44,709
answers be aware of this so what we've

00:40:42,430 --> 00:40:50,799
done from hf is we have explicitly

00:40:44,709 --> 00:40:54,069
changed in the GCC configuration the the

00:40:50,799 --> 00:40:55,869
path to that one time linker so that in

00:40:54,069 --> 00:40:58,539
the elf headers of all the programs that

00:40:55,869 --> 00:41:00,940
you build form hf it will actually point

00:40:58,539 --> 00:41:03,790
instead of 2 / lib /

00:41:00,940 --> 00:41:08,619
LD Linux ISO dot three it will point to

00:41:03,790 --> 00:41:14,619
slash lib / arm linux new here be a new

00:41:08,619 --> 00:41:18,460
EAB IHF / LD linux daso dot 3 that is

00:41:14,619 --> 00:41:21,280
going to is a major change be aware of

00:41:18,460 --> 00:41:23,970
it although you shouldn't need to be

00:41:21,280 --> 00:41:27,880
aware of it sorry I'm confusing things

00:41:23,970 --> 00:41:29,500
in that you your system if you're going

00:41:27,880 --> 00:41:32,530
to run are met Jeff boundaries will need

00:41:29,500 --> 00:41:34,390
to have something in that location but

00:41:32,530 --> 00:41:35,740
so long as either you're running a

00:41:34,390 --> 00:41:38,470
multihull chest and like that be a

00:41:35,740 --> 00:41:41,319
little bun to or you have assembling to

00:41:38,470 --> 00:41:44,530
the correct linker in that path your

00:41:41,319 --> 00:41:46,450
system will just work we would love if

00:41:44,530 --> 00:41:48,880
the rest of the distros followers and do

00:41:46,450 --> 00:41:51,730
multi arch fall in it for the system as

00:41:48,880 --> 00:41:53,560
a whole but be aware this is a place

00:41:51,730 --> 00:42:04,660
where if you're not careful you might be

00:41:53,560 --> 00:42:08,650
bitten where are we caught at us we are

00:42:04,660 --> 00:42:15,750
in lenoir oh very interesting so we have

00:42:08,650 --> 00:42:19,359
questioned the back Mike Mike's dead is

00:42:15,750 --> 00:42:21,960
it turned on is there a red light would

00:42:19,359 --> 00:42:21,960
your hold down the button

00:42:33,319 --> 00:42:38,910
um since you just came back to mhf the

00:42:37,589 --> 00:42:41,369
ang marks that you mentioned in the

00:42:38,910 --> 00:42:44,339
beginning like on average thirty percent

00:42:41,369 --> 00:42:46,770
faster was that done on your arm hf

00:42:44,339 --> 00:42:52,500
versus the old army l or was it done on

00:42:46,770 --> 00:42:57,829
basically arm v7 neon and vfp and then

00:42:52,500 --> 00:43:01,079
just if friends as as in floating point

00:42:57,829 --> 00:43:07,500
versus integer registers or was it just

00:43:01,079 --> 00:43:10,799
a majaz vs army l we have a mix of

00:43:07,500 --> 00:43:14,040
different benchmarks on the fight direct

00:43:10,799 --> 00:43:17,609
benchmarks of most of this were done

00:43:14,040 --> 00:43:21,210
using debian are we l against a bun to

00:43:17,609 --> 00:43:23,280
our might jeff at the time there's work

00:43:21,210 --> 00:43:26,220
going on right now to redo all of those

00:43:23,280 --> 00:43:28,049
benchmarks to do directly still v7 with

00:43:26,220 --> 00:43:30,450
all of the other with you all of the

00:43:28,049 --> 00:43:33,240
other enhancements and direct just

00:43:30,450 --> 00:43:39,510
comparing a be ice watch this space

00:43:33,240 --> 00:43:45,030
they're coming soon okay in terms of and

00:43:39,510 --> 00:43:47,430
got a quick question does arm hf require

00:43:45,030 --> 00:43:49,530
many lipsy changes for instance in open

00:43:47,430 --> 00:43:52,589
wrt we use you celeb see a lot and would

00:43:49,530 --> 00:43:57,000
it be a large effort to adjust it for hf

00:43:52,589 --> 00:43:58,500
um in theory just about nothing also the

00:43:57,000 --> 00:44:00,119
only thing you will need to do is put

00:43:58,500 --> 00:44:05,339
the same link in place so that you find

00:44:00,119 --> 00:44:06,660
the one time linker most of our major i

00:44:05,339 --> 00:44:09,260
mean fundamentally the difference

00:44:06,660 --> 00:44:11,910
between e are we l and r hf is just in

00:44:09,260 --> 00:44:15,030
the conventions of passing

00:44:11,910 --> 00:44:17,670
floating-point arguments so long if your

00:44:15,030 --> 00:44:19,740
if your program is doing nothing special

00:44:17,670 --> 00:44:22,049
does not do anything particularly low

00:44:19,740 --> 00:44:23,910
level it'll literally just be we compile

00:44:22,049 --> 00:44:28,650
if it works on army a little work on arm

00:44:23,910 --> 00:44:30,240
hf if you are doing something low level

00:44:28,650 --> 00:44:33,599
and horrible and Gotti and yes i'm

00:44:30,240 --> 00:44:37,700
thinking a ruby here or do so there's

00:44:33,599 --> 00:44:40,260
bits and pieces of libre office which do

00:44:37,700 --> 00:44:42,450
does a bridge in the middle called uno

00:44:40,260 --> 00:44:44,010
which needs to know huge amounts of

00:44:42,450 --> 00:44:46,260
detail about your platform and your

00:44:44,010 --> 00:44:47,520
binary formats then absolutely those are

00:44:46,260 --> 00:44:49,770
the places where you're going work

00:44:47,520 --> 00:44:52,230
people are going to need help to make

00:44:49,770 --> 00:44:55,200
armor Jeff work if you allow on a

00:44:52,230 --> 00:44:59,220
compiler to get it white it will go just

00:44:55,200 --> 00:45:01,289
remember that with EA bi vs 0 ABI there

00:44:59,220 --> 00:45:03,539
were quite a few differences that had to

00:45:01,289 --> 00:45:05,069
be taken care of in you subsea and it

00:45:03,539 --> 00:45:06,690
had to implement some stubs here and

00:45:05,069 --> 00:45:08,460
there that would have provided by lib

00:45:06,690 --> 00:45:10,559
GCC and I'm just wondering if something

00:45:08,460 --> 00:45:13,859
similar is going to come up for hf um I

00:45:10,559 --> 00:45:16,380
don't expect anything like that you know

00:45:13,859 --> 00:45:19,890
existing al is already working fine on

00:45:16,380 --> 00:45:23,010
v7 with exactly the same setup on hf is

00:45:19,890 --> 00:45:32,510
literally just the change of floating

00:45:23,010 --> 00:45:32,510
point ok what microphone for words yes

00:45:35,390 --> 00:45:43,770
uh boost Fred library has 7000 light of

00:45:40,589 --> 00:45:46,380
cause of Fred testing and they are based

00:45:43,770 --> 00:45:48,420
on be free life asara ok awesome thank

00:45:46,380 --> 00:45:57,079
you perhaps it's applicable I'll give

00:45:48,420 --> 00:46:01,170
valetroy um and across here sorry um

00:45:57,079 --> 00:46:04,109
both gold and the normal new length you

00:46:01,170 --> 00:46:07,140
know binutils link i should work again

00:46:04,109 --> 00:46:08,819
as there isn't anything particularly

00:46:07,140 --> 00:46:12,690
special at this point that they care

00:46:08,819 --> 00:46:16,529
about we in debian we just been

00:46:12,690 --> 00:46:19,440
following this the same build built as

00:46:16,529 --> 00:46:22,819
for me L so unless a package specifies

00:46:19,440 --> 00:46:27,539
one of the other you know it comes out

00:46:22,819 --> 00:46:31,020
right ok undo it just a quick question

00:46:27,539 --> 00:46:36,170
with regards to the neuro evaluation

00:46:31,020 --> 00:46:41,640
builds are all the source packages

00:46:36,170 --> 00:46:46,950
available for the likes of primarily the

00:46:41,640 --> 00:46:51,260
colonel so that we can test our Colonel

00:46:46,950 --> 00:46:56,750
build using the same source as ones that

00:46:51,260 --> 00:46:58,650
so we've got a decent reference point

00:46:56,750 --> 00:47:02,670
rather than just doing a git checkout

00:46:58,650 --> 00:47:05,789
right I cast supposedly the trailer was

00:47:02,670 --> 00:47:08,039
usual etcetera unfortunately I don't

00:47:05,789 --> 00:47:09,690
think they are all available packaged in

00:47:08,039 --> 00:47:11,490
the same way that we might expect in

00:47:09,690 --> 00:47:13,019
debian ubuntu there's a lot of

00:47:11,490 --> 00:47:15,180
discussion going on about that right now

00:47:13,019 --> 00:47:19,109
at the moment the best way of getting

00:47:15,180 --> 00:47:21,920
lenovo kernel source is it and i wish it

00:47:19,109 --> 00:47:29,069
was different but it's an ongoing debate

00:47:21,920 --> 00:47:33,119
sorry so we have a whole bunch of people

00:47:29,069 --> 00:47:36,930
in lenovo whose job is to help with our

00:47:33,119 --> 00:47:40,440
knowledge and help reporting software if

00:47:36,930 --> 00:47:43,740
very echoey if you have any any

00:47:40,440 --> 00:47:48,119
questions about on you know whether in

00:47:43,740 --> 00:47:49,680
its detailed tips on how to get the best

00:47:48,119 --> 00:47:51,599
out of the cpu if you're wasting

00:47:49,680 --> 00:47:54,960
software for it or how to port your

00:47:51,599 --> 00:47:56,700
existing software especially so if you

00:47:54,960 --> 00:47:58,529
involved in the distro and your yield

00:47:56,700 --> 00:48:00,900
you're looking for help guidance

00:47:58,529 --> 00:48:04,980
whatever please there is a there's the

00:48:00,900 --> 00:48:06,990
cross distro our you know come join us

00:48:04,980 --> 00:48:10,380
there we try to have regular get

00:48:06,990 --> 00:48:12,920
togethers at various events I mean I

00:48:10,380 --> 00:48:16,410
said this is part of what we want to do

00:48:12,920 --> 00:48:18,599
we'll have another cross distro arm both

00:48:16,410 --> 00:48:21,990
at the Lenovo session this coming week

00:48:18,599 --> 00:48:24,420
in California if there's anything you

00:48:21,990 --> 00:48:26,789
want to know about please ask we might

00:48:24,420 --> 00:48:28,470
say we're not sure but we bought the

00:48:26,789 --> 00:48:35,970
chapters are it's the best place you're

00:48:28,470 --> 00:48:37,920
going to find expert help um unless

00:48:35,970 --> 00:48:40,039
there's any more questions I think we're

00:48:37,920 --> 00:48:40,039
done

00:48:42,950 --> 00:48:47,880
in the narrow project what's your

00:48:45,330 --> 00:48:49,800
experience of platform support drivers

00:48:47,880 --> 00:48:57,599
are poured from from the vendors that

00:48:49,800 --> 00:49:02,430
your SOC winners um its ferried um the

00:48:57,599 --> 00:49:06,000
little row plat members as i said TI

00:49:02,430 --> 00:49:08,490
freescale and you know and so on they're

00:49:06,000 --> 00:49:12,030
all committed to providing better

00:49:08,490 --> 00:49:16,530
support up streamable support for all of

00:49:12,030 --> 00:49:17,700
their system on chip products some are

00:49:16,530 --> 00:49:19,020
further along than others which is

00:49:17,700 --> 00:49:23,190
because they've had more experience in

00:49:19,020 --> 00:49:24,650
the past will a masking because for some

00:49:23,190 --> 00:49:28,290
of the vendors I don't see that heaven

00:49:24,650 --> 00:49:30,840
so we're into embedded systems mmm small

00:49:28,290 --> 00:49:32,160
company I work it and we decided for one

00:49:30,840 --> 00:49:38,490
specific manner because the window

00:49:32,160 --> 00:49:40,680
claimed is he'll provide anything to put

00:49:38,490 --> 00:49:42,450
things back upstream and takes care in

00:49:40,680 --> 00:49:45,780
it but nothing of that was true

00:49:42,450 --> 00:49:48,150
basically and I chase it's one of the

00:49:45,780 --> 00:49:53,550
largest window of our mercy so that is

00:49:48,150 --> 00:49:56,130
really again okay I'm wait trying all

00:49:53,550 --> 00:49:59,670
Mirza company wants to be seen as a good

00:49:56,130 --> 00:50:01,740
outsource set a citizen you know we've

00:49:59,670 --> 00:50:03,750
got lots of really good free software

00:50:01,740 --> 00:50:06,330
developers involved to try and help with

00:50:03,750 --> 00:50:08,609
that one of the reasons for lenovo to

00:50:06,330 --> 00:50:11,570
happen is to help the rest of the arm

00:50:08,609 --> 00:50:14,310
ecosystem do that it's taking a while

00:50:11,570 --> 00:50:18,000
lots of what we have done already is

00:50:14,310 --> 00:50:19,080
starting to go upstream I mean there's

00:50:18,000 --> 00:50:21,540
lots of people in the room will have

00:50:19,080 --> 00:50:23,970
seen the various complaints minus over

00:50:21,540 --> 00:50:26,780
the last 12 months about what a mess the

00:50:23,970 --> 00:50:29,280
arm at you know part of the world is

00:50:26,780 --> 00:50:31,530
we're working on that we're working on

00:50:29,280 --> 00:50:34,260
instead of just having the previous

00:50:31,530 --> 00:50:36,990
setup were most of yours SOC vendors

00:50:34,260 --> 00:50:39,089
might never ship the drivers upstream or

00:50:36,990 --> 00:50:41,640
were too because they try to put them up

00:50:39,089 --> 00:50:43,950
stream but they were just awful code and

00:50:41,640 --> 00:50:46,950
would never be accepted part of the

00:50:43,950 --> 00:50:49,500
long-term goal is to get them to work

00:50:46,950 --> 00:50:52,260
together so instead of having individual

00:50:49,500 --> 00:50:54,180
serial port drivers like 25 orphan which

00:50:52,260 --> 00:50:54,730
all work identically except for the tiny

00:50:54,180 --> 00:50:57,100
bit that

00:50:54,730 --> 00:51:00,700
and which wine to get common core and

00:50:57,100 --> 00:51:02,200
it's taking a while we've got really

00:51:00,700 --> 00:51:06,460
white people on it fingers crossed we'll

00:51:02,200 --> 00:51:08,260
get there I was just wondering at the

00:51:06,460 --> 00:51:10,630
point where you claimed that I'm getting

00:51:08,260 --> 00:51:13,150
Petrus back upstream as one of the prime

00:51:10,630 --> 00:51:15,070
goals of linaria because then I've been

00:51:13,150 --> 00:51:17,410
told by that winery directly that they

00:51:15,070 --> 00:51:22,750
don't plan doing anything like that so

00:51:17,410 --> 00:51:24,640
it's one weird yeah that's again I've

00:51:22,750 --> 00:51:27,430
heard there's some other people too with

00:51:24,640 --> 00:51:29,170
a lot of the silicon vendors it also

00:51:27,430 --> 00:51:30,790
depends on who you talk to there's

00:51:29,170 --> 00:51:32,830
debate that is the whole big company

00:51:30,790 --> 00:51:34,390
syndrome were there might be a thousand

00:51:32,830 --> 00:51:36,369
people are working in what we consider

00:51:34,390 --> 00:51:37,630
the right direction but unfortunately

00:51:36,369 --> 00:51:38,890
you found one of a hundred who are

00:51:37,630 --> 00:51:40,750
pulling the other way because he thinks

00:51:38,890 --> 00:51:46,210
that this open-source thing is you

00:51:40,750 --> 00:51:51,600
know it happens in the long term really

00:51:46,210 --> 00:52:00,160
we're hoping which 1i hard ok thanks ok

00:51:51,600 --> 00:52:02,200
ok and one more question earlier this

00:52:00,160 --> 00:52:07,990
week warren east you in the earnings

00:52:02,200 --> 00:52:11,170
report said that arm wanted to react or

00:52:07,990 --> 00:52:13,359
adapt to the large demand in free and

00:52:11,170 --> 00:52:14,560
open tools do you have any details on

00:52:13,359 --> 00:52:21,480
that is there anything in particular

00:52:14,560 --> 00:52:24,550
coming up um so Adam yeah um we have

00:52:21,480 --> 00:52:26,740
quite a number of people in arm already

00:52:24,550 --> 00:52:29,350
working on that's at the free software

00:52:26,740 --> 00:52:32,830
ecosystem so as well as i said i've been

00:52:29,350 --> 00:52:34,240
working on norm hf in debian ubuntu we

00:52:32,830 --> 00:52:36,580
also have a number people who are

00:52:34,240 --> 00:52:38,890
working on not just improving on

00:52:36,580 --> 00:52:41,470
supporting GCC for example you know the

00:52:38,890 --> 00:52:44,650
other tool chains but also actively

00:52:41,470 --> 00:52:45,880
becoming part of the upstream so we're

00:52:44,650 --> 00:52:48,840
doing the gatekeeper thing we're doing

00:52:45,880 --> 00:52:51,640
the generally be good with the community

00:52:48,840 --> 00:52:53,109
there's a lot of that going on and the

00:52:51,640 --> 00:52:55,000
teams involved are still growing

00:52:53,109 --> 00:52:59,470
continually we're hiring in fact if

00:52:55,000 --> 00:53:01,630
anyone's interested so that was just in

00:52:59,470 --> 00:53:04,180
your opinion and general reference to

00:53:01,630 --> 00:53:06,790
the Lynn our efforts and no big thing

00:53:04,180 --> 00:53:08,130
coming up um if there is a really big

00:53:06,790 --> 00:53:10,650
thing coming up I'm

00:53:08,130 --> 00:53:12,330
fight I don't know about it well so one

00:53:10,650 --> 00:53:14,670
other thing that's going on is that the

00:53:12,330 --> 00:53:16,170
consumer and elect an embedded working

00:53:14,670 --> 00:53:19,050
group at the linux foundation that used

00:53:16,170 --> 00:53:20,250
to be the sea linux forum is been

00:53:19,050 --> 00:53:22,200
working on this thing's you've probably

00:53:20,250 --> 00:53:23,880
heard of the long-term stable Colonel

00:53:22,200 --> 00:53:29,190
initiative there's going to be an update

00:53:23,880 --> 00:53:30,510
on the progress of LTS I at on the

00:53:29,190 --> 00:53:32,250
afternoon before the start of the

00:53:30,510 --> 00:53:34,290
embedded Linux conference overlapping

00:53:32,250 --> 00:53:37,890
the tail end of the Android builders

00:53:34,290 --> 00:53:39,810
summer summit the sorry out in San

00:53:37,890 --> 00:53:42,060
Francisco a week and a half hence or

00:53:39,810 --> 00:53:44,850
something yeah and there's been lots of

00:53:42,060 --> 00:53:47,760
discussion going on with our men with

00:53:44,850 --> 00:53:50,580
various silicon vendors in addition to

00:53:47,760 --> 00:53:52,710
the various siiii companies I don't

00:53:50,580 --> 00:53:54,540
actually know what the group is going to

00:53:52,710 --> 00:53:56,180
specifically be announcing in the way of

00:53:54,540 --> 00:53:59,600
progress that afternoon but with a

00:53:56,180 --> 00:54:02,610
combination of Greg KH is moved to the

00:53:59,600 --> 00:54:05,220
foundation as a as a new fellow to work

00:54:02,610 --> 00:54:06,810
among other things on the stable colonel

00:54:05,220 --> 00:54:08,790
initiatives I wouldn't be surprised if

00:54:06,810 --> 00:54:11,130
there isn't some sense that you know

00:54:08,790 --> 00:54:14,120
that's part of this whorl of increasing

00:54:11,130 --> 00:54:17,400
support for because a lot of the cce

00:54:14,120 --> 00:54:19,590
working group companies products or

00:54:17,400 --> 00:54:20,880
arm-based so I would be surprised if

00:54:19,590 --> 00:54:28,260
there isn't some correlation there as

00:54:20,880 --> 00:54:30,390
well sure thanks and I'm being told that

00:54:28,260 --> 00:54:31,710
we're at the time thanks all for turning

00:54:30,390 --> 00:54:35,630
up if you do have any more questions

00:54:31,710 --> 00:54:35,630
please contact me

00:54:35,750 --> 00:54:37,810

YouTube URL: https://www.youtube.com/watch?v=FmoOgZNgjfI


