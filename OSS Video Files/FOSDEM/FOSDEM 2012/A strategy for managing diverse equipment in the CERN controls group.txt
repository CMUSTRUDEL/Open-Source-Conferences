Title: A strategy for managing diverse equipment in the CERN controls group
Publication date: 2013-02-05
Playlist: FOSDEM 2012
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,000 --> 00:00:04,650
okay good afternoon it's a great

00:00:02,190 --> 00:00:06,569
pleasure to be here to talk about how we

00:00:04,650 --> 00:00:10,620
control particle accelerators with

00:00:06,569 --> 00:00:12,420
open-source software and hardware I will

00:00:10,620 --> 00:00:14,340
start with a quick introduction to CERN

00:00:12,420 --> 00:00:17,760
and two particles particle accelerators

00:00:14,340 --> 00:00:21,689
in general then move on to an overview

00:00:17,760 --> 00:00:23,730
of how we control them and then some

00:00:21,689 --> 00:00:25,769
words on some standards we have chosen

00:00:23,730 --> 00:00:27,779
for new designs in the frame of a big

00:00:25,769 --> 00:00:29,310
renovation project of the control system

00:00:27,779 --> 00:00:34,469
of all accelerators at certain except

00:00:29,310 --> 00:00:38,040
LHC these among these choices we have

00:00:34,469 --> 00:00:39,809
made one very important choice is moving

00:00:38,040 --> 00:00:41,730
to open hardware practices so I will

00:00:39,809 --> 00:00:45,090
describe what we mean by that and what

00:00:41,730 --> 00:00:47,340
our choices were in that realm and the

00:00:45,090 --> 00:00:50,309
most important open source hardware

00:00:47,340 --> 00:00:52,170
project at CERN currently is the white

00:00:50,309 --> 00:00:57,239
rabbit project which is an extension of

00:00:52,170 --> 00:01:00,329
Ethernet to deal with needs of highly

00:00:57,239 --> 00:01:03,449
distributed real-time systems then I

00:01:00,329 --> 00:01:06,210
will describe some applications of the

00:01:03,449 --> 00:01:07,950
hardware kit that we're developing and

00:01:06,210 --> 00:01:10,500
I'll hand it over to David who will

00:01:07,950 --> 00:01:12,560
speak about software software coverage

00:01:10,500 --> 00:01:14,939
software support for all this gear and

00:01:12,560 --> 00:01:19,140
some conclusions on time for for

00:01:14,939 --> 00:01:21,320
questions okay so why do people want to

00:01:19,140 --> 00:01:24,020
build particle accelerators I have

00:01:21,320 --> 00:01:25,920
mainly chosen three types of

00:01:24,020 --> 00:01:27,720
applications of particle accelerators

00:01:25,920 --> 00:01:32,250
but mainly at CERN what we're concerned

00:01:27,720 --> 00:01:36,659
with is the study of the finest

00:01:32,250 --> 00:01:39,450
constituents of matter and here you see

00:01:36,659 --> 00:01:41,189
a quick simplified cartoon of the

00:01:39,450 --> 00:01:43,590
so-called Standard Model of particle

00:01:41,189 --> 00:01:46,680
physics so you have all these particles

00:01:43,590 --> 00:01:48,899
and the first line is what ordinary

00:01:46,680 --> 00:01:50,939
matter is made of so you have protons

00:01:48,899 --> 00:01:53,250
and neutrons made up of up and down

00:01:50,939 --> 00:01:55,649
quarks and you have electrons around

00:01:53,250 --> 00:01:57,509
them and with them you build atoms and

00:01:55,649 --> 00:01:58,890
of course when you collect particles at

00:01:57,509 --> 00:02:01,200
CERN there's also these guys which are

00:01:58,890 --> 00:02:02,670
the antimatter's or anti particles of

00:02:01,200 --> 00:02:04,560
each one's or the other particles in the

00:02:02,670 --> 00:02:07,079
standard model and they all show up

00:02:04,560 --> 00:02:11,879
during collisions for a brief moment of

00:02:07,079 --> 00:02:13,920
time second family of applications of

00:02:11,879 --> 00:02:17,610
particle accelerators deals with

00:02:13,920 --> 00:02:20,220
exploring matter with microscope type

00:02:17,610 --> 00:02:22,230
machines so when you have charged

00:02:20,220 --> 00:02:24,480
particles and you shake them they

00:02:22,230 --> 00:02:27,090
produce light they produce photons and

00:02:24,480 --> 00:02:29,120
the wavelength of that light is related

00:02:27,090 --> 00:02:33,380
to the energy of the particles you shake

00:02:29,120 --> 00:02:36,600
and in a microscope type application the

00:02:33,380 --> 00:02:39,000
detail you can see of the thing you're

00:02:36,600 --> 00:02:40,560
probing depends on the wavelength so you

00:02:39,000 --> 00:02:42,989
with these accelerators you can generate

00:02:40,560 --> 00:02:45,200
light a very short wavelength that lets

00:02:42,989 --> 00:02:48,180
you see very fine detail of many things

00:02:45,200 --> 00:02:52,739
like for example these brain of a mouse

00:02:48,180 --> 00:02:54,660
to study Alzheimer and these nucleosome

00:02:52,739 --> 00:02:55,590
core so those are two examples a week

00:02:54,660 --> 00:02:58,470
where you can see with these

00:02:55,590 --> 00:03:01,319
accelerators then the third family of

00:02:58,470 --> 00:03:05,220
applications I want to describe deals

00:03:01,319 --> 00:03:08,370
with helping people who have a cancer so

00:03:05,220 --> 00:03:13,530
how to kill these tumor cells here and

00:03:08,370 --> 00:03:15,720
the challenge is to damage these cells

00:03:13,530 --> 00:03:19,109
without damaging the intervening issue

00:03:15,720 --> 00:03:22,950
here close to the skin and it turns out

00:03:19,109 --> 00:03:24,540
that by using certain types of particles

00:03:22,950 --> 00:03:27,350
you can do better than the typical

00:03:24,540 --> 00:03:32,160
x-rays a traditional x-rays so here's a

00:03:27,350 --> 00:03:36,269
plot of energy deposition as a function

00:03:32,160 --> 00:03:39,000
of depth after the skin and you can see

00:03:36,269 --> 00:03:42,120
that for example if you use these 200

00:03:39,000 --> 00:03:44,400
mega electron volts protons you can buy

00:03:42,120 --> 00:03:46,200
feeling the energy of these proteins you

00:03:44,400 --> 00:03:47,910
can tune the place where they deposit

00:03:46,200 --> 00:03:49,620
all these energy without harming too

00:03:47,910 --> 00:03:51,390
much this issue and you compare you can

00:03:49,620 --> 00:03:56,400
compare that with the traditional x-ray

00:03:51,390 --> 00:03:59,660
approach okay so that was why people

00:03:56,400 --> 00:04:02,880
want accelerators let's have a quick

00:03:59,660 --> 00:04:05,250
glimpse of how people build accelerator

00:04:02,880 --> 00:04:09,030
so how you accelerate particles this is

00:04:05,250 --> 00:04:10,769
a simple depiction of a synchrotron so

00:04:09,030 --> 00:04:13,530
you have protons going in and then they

00:04:10,769 --> 00:04:15,359
get accelerated I turn after turn they

00:04:13,530 --> 00:04:18,000
get a kick of energy in these

00:04:15,359 --> 00:04:20,010
radiofrequency cavities so cavities are

00:04:18,000 --> 00:04:23,010
pieces of metal in which there's a

00:04:20,010 --> 00:04:25,950
standing wave inside and if you

00:04:23,010 --> 00:04:27,920
synchronize things so that the particles

00:04:25,950 --> 00:04:30,260
get to the cavity

00:04:27,920 --> 00:04:33,830
a moment where the field is in the half

00:04:30,260 --> 00:04:35,660
positive period then they get the

00:04:33,830 --> 00:04:37,520
experience again in energy and if you do

00:04:35,660 --> 00:04:39,560
this continuously they gain more and

00:04:37,520 --> 00:04:42,380
more energy at some point they don't

00:04:39,560 --> 00:04:44,030
earn they don't gain any speed anymore

00:04:42,380 --> 00:04:48,130
they close to the speed of light but

00:04:44,030 --> 00:04:51,350
they still gain energy and in order to

00:04:48,130 --> 00:04:53,570
constrain them in the beam pipe you need

00:04:51,350 --> 00:04:56,120
a magnetic field which is made by these

00:04:53,570 --> 00:04:58,190
electromagnets which goes vertically

00:04:56,120 --> 00:05:00,080
down so that particles that go

00:04:58,190 --> 00:05:01,940
tangentially experience an accelerator

00:05:00,080 --> 00:05:04,280
and acceleration towards the middle of

00:05:01,940 --> 00:05:06,860
the circle and in such a way that they

00:05:04,280 --> 00:05:11,480
are constrained to follow the vacuum

00:05:06,860 --> 00:05:14,770
pipe so you see here you begin to see

00:05:11,480 --> 00:05:16,910
that this is a highly distributed

00:05:14,770 --> 00:05:18,290
control system that you need and data

00:05:16,910 --> 00:05:21,440
acquisition system to deal with the

00:05:18,290 --> 00:05:23,330
control of these complex machines here's

00:05:21,440 --> 00:05:25,400
an example of a radiofrequency cavity

00:05:23,330 --> 00:05:28,340
from the lab years superconducting

00:05:25,400 --> 00:05:31,960
cavity here's a smaller cavity for

00:05:28,340 --> 00:05:35,180
higher frequency machines these are all

00:05:31,960 --> 00:05:36,800
you know structures that ensure that

00:05:35,180 --> 00:05:38,930
there is a standing wave and you can

00:05:36,800 --> 00:05:40,940
accelerate here's a an example when

00:05:38,930 --> 00:05:42,500
particles are inside they don't see the

00:05:40,940 --> 00:05:44,270
negative half period and when they are

00:05:42,500 --> 00:05:48,050
in between these two structures they get

00:05:44,270 --> 00:05:51,050
an acceleration okay that was cavities

00:05:48,050 --> 00:05:54,410
electromagnets these are simplified view

00:05:51,050 --> 00:05:56,540
again here's a coil with current going

00:05:54,410 --> 00:05:59,420
around it and these are the magnetic

00:05:56,540 --> 00:06:01,070
field lines vertically and you need a

00:05:59,420 --> 00:06:03,050
lot of current to generate the magnetic

00:06:01,070 --> 00:06:06,260
fields needed in the order of eight

00:06:03,050 --> 00:06:09,050
Tesla for operation of the LHC of the

00:06:06,260 --> 00:06:13,340
Large Hadron Collider here's a more

00:06:09,050 --> 00:06:15,080
complex view closer to reality so you

00:06:13,340 --> 00:06:17,330
can see the coils here and they are

00:06:15,080 --> 00:06:20,030
sitting in a bath of liquid helium

00:06:17,330 --> 00:06:22,370
because they this material of the coils

00:06:20,030 --> 00:06:24,530
gets super conducting at very low

00:06:22,370 --> 00:06:27,410
temperatures and for power-saving

00:06:24,530 --> 00:06:29,990
reasons it makes sense to have this 27

00:06:27,410 --> 00:06:32,060
kilometers long circuit of liquid helium

00:06:29,990 --> 00:06:36,410
which is in fact the biggest cryogenic

00:06:32,060 --> 00:06:39,170
installation in the world and the leads

00:06:36,410 --> 00:06:41,540
the D coils sitting on it becomes

00:06:39,170 --> 00:06:45,530
superconducting so you spend

00:06:41,540 --> 00:06:49,450
energy cooling down but not too much on

00:06:45,530 --> 00:06:52,490
our losses in the conducting material

00:06:49,450 --> 00:06:55,580
okay so when these particles are

00:06:52,490 --> 00:06:57,760
accelerated at some point we make them

00:06:55,580 --> 00:07:00,410
collide in four points of the LHC and

00:06:57,760 --> 00:07:02,900
around those collision points there are

00:07:00,410 --> 00:07:05,690
detectors to see what happened and the

00:07:02,900 --> 00:07:08,660
detectors they have an onion type

00:07:05,690 --> 00:07:10,940
structure with layers and different

00:07:08,660 --> 00:07:12,590
layers devoted to different things so in

00:07:10,940 --> 00:07:14,750
the innermost layer there are silicon

00:07:12,590 --> 00:07:17,840
vertex detectors to figure out what the

00:07:14,750 --> 00:07:20,870
trajectory was and as you move out more

00:07:17,840 --> 00:07:23,270
and more towards the outer side there

00:07:20,870 --> 00:07:24,830
are detectors dealing more with less

00:07:23,270 --> 00:07:28,610
precise things like measuring the energy

00:07:24,830 --> 00:07:30,560
deposition here's a more realistic view

00:07:28,610 --> 00:07:33,290
of Atlas one of the detectors in the LHC

00:07:30,560 --> 00:07:35,150
before filling these up with electronics

00:07:33,290 --> 00:07:38,300
started but you can appreciate the

00:07:35,150 --> 00:07:41,150
complexity and this is the final result

00:07:38,300 --> 00:07:43,000
of all these things so hundreds of

00:07:41,150 --> 00:07:46,010
thousands of data acquisition channels

00:07:43,000 --> 00:07:48,020
are digested by several layers of

00:07:46,010 --> 00:07:50,270
hardware and software and generate these

00:07:48,020 --> 00:07:52,520
nice events where you can study what

00:07:50,270 --> 00:07:55,040
happened after those collisions and look

00:07:52,520 --> 00:07:58,690
for new particles and generally study

00:07:55,040 --> 00:08:02,750
study the constituents of matter okay so

00:07:58,690 --> 00:08:04,760
that was just LHC but CERN is more

00:08:02,750 --> 00:08:08,060
complex than that this is LHC 27 kilo

00:08:04,760 --> 00:08:10,520
meter long but the particles they

00:08:08,060 --> 00:08:12,140
actually depart from a little bottle of

00:08:10,520 --> 00:08:14,840
hydrogen here and they go through a

00:08:12,140 --> 00:08:18,520
complex circuit before reaching LHC so

00:08:14,840 --> 00:08:21,380
you can see that there is a need for a

00:08:18,520 --> 00:08:23,720
controls and data acquisition kit that

00:08:21,380 --> 00:08:29,720
will let us deal with this highly

00:08:23,720 --> 00:08:32,900
distributed system okay so how do we go

00:08:29,720 --> 00:08:35,060
about controlling these accelerators we

00:08:32,900 --> 00:08:38,300
come from the beam beam controls group

00:08:35,060 --> 00:08:40,370
and we're responsible for supplying a

00:08:38,300 --> 00:08:42,770
kit of solutions both in hardware and

00:08:40,370 --> 00:08:45,050
software that will let other people

00:08:42,770 --> 00:08:46,910
build the controls and data acquisition

00:08:45,050 --> 00:08:48,130
solutions and among those people we have

00:08:46,910 --> 00:08:53,020
the beam instrumentation people

00:08:48,130 --> 00:08:55,269
cryogenics experts power converters

00:08:53,020 --> 00:08:59,180
designers and

00:08:55,269 --> 00:09:01,730
other people like the engineers in the

00:08:59,180 --> 00:09:03,170
experiments they all need this common

00:09:01,730 --> 00:09:05,209
kit to build their solutions so that

00:09:03,170 --> 00:09:07,339
they can focus on their application so

00:09:05,209 --> 00:09:11,779
we're like an internal shop of controls

00:09:07,339 --> 00:09:13,160
and data acquisition solutions more

00:09:11,779 --> 00:09:15,320
precisely in the hardware and timing

00:09:13,160 --> 00:09:18,320
section within the controls group we

00:09:15,320 --> 00:09:20,839
deal with the lower layer aspects so we

00:09:18,320 --> 00:09:22,430
provide a hardware kit that lets use of

00:09:20,839 --> 00:09:24,829
common controls and data acquisition

00:09:22,430 --> 00:09:27,050
problems like analog and digital i/o at

00:09:24,829 --> 00:09:29,779
different sampling rates different

00:09:27,050 --> 00:09:31,930
resolutions level converters repeaters

00:09:29,779 --> 00:09:36,230
serial links for communication

00:09:31,930 --> 00:09:39,260
synchronization is our specialty and all

00:09:36,230 --> 00:09:42,709
these come with software support in the

00:09:39,260 --> 00:09:48,920
form of linux device drivers libraries

00:09:42,709 --> 00:09:51,889
and test programs so in the context of

00:09:48,920 --> 00:09:53,449
this big renovation project for the

00:09:51,889 --> 00:09:56,029
control systems of all the injectors of

00:09:53,449 --> 00:09:57,860
LHC we've made a number of choices like

00:09:56,029 --> 00:10:00,889
which standards to support for the

00:09:57,860 --> 00:10:03,139
hardware we have these vme 64 X bus

00:10:00,889 --> 00:10:07,010
which is a legacy bus very much used in

00:10:03,139 --> 00:10:09,709
big physics facilities and for the newer

00:10:07,010 --> 00:10:15,470
stuff we support pcs with pci and pci

00:10:09,709 --> 00:10:18,370
express slots and we decided very very

00:10:15,470 --> 00:10:21,410
early on to split the work and use a

00:10:18,370 --> 00:10:24,980
carrier and nestling approach for the

00:10:21,410 --> 00:10:27,920
hardware so functions like a dcs and

00:10:24,980 --> 00:10:30,490
time to digital converters they sit in a

00:10:27,920 --> 00:10:34,010
mezzanine in a plug-in module and then

00:10:30,490 --> 00:10:36,170
the digital stuff the fpgas they are in

00:10:34,010 --> 00:10:38,449
carrier boards in pci express another

00:10:36,170 --> 00:10:40,519
formats as we as we will see and the

00:10:38,449 --> 00:10:42,079
main reason was to be able to reuse

00:10:40,519 --> 00:10:44,360
these mezzanine in different form

00:10:42,079 --> 00:10:47,480
factors without redesigning a complete

00:10:44,360 --> 00:10:49,519
board so here's what i mean by couriers

00:10:47,480 --> 00:10:52,370
and mezzanine this is a typical VMA

00:10:49,519 --> 00:10:55,279
carrier and with two types of machines a

00:10:52,370 --> 00:10:58,310
single width fmc this is a standard we

00:10:55,279 --> 00:11:01,069
chose from vita fmc stands for fpga

00:10:58,310 --> 00:11:04,149
mezzanine card this is a single wait one

00:11:01,069 --> 00:11:04,149
this is a double with one

00:11:05,180 --> 00:11:11,240
so the reasons to go for a career

00:11:07,970 --> 00:11:13,670
mezzanine approach are a very first one

00:11:11,240 --> 00:11:15,350
is reused as I said the second one is

00:11:13,670 --> 00:11:18,080
reactivity couriers are typically

00:11:15,350 --> 00:11:20,870
complex digital systems that take quite

00:11:18,080 --> 00:11:24,530
a long time to design produce tests etc

00:11:20,870 --> 00:11:27,830
with BGA packages difficult to solder

00:11:24,530 --> 00:11:30,440
etc so these carriers it will be nicely

00:11:27,830 --> 00:11:31,910
they were reusable and then when

00:11:30,440 --> 00:11:35,210
somebody comes along with an you need

00:11:31,910 --> 00:11:36,980
you just need in principle to design a

00:11:35,210 --> 00:11:41,240
mezzanine which is a smaller piece of

00:11:36,980 --> 00:11:44,030
hardware simpler with the analog part of

00:11:41,240 --> 00:11:46,580
the design and then reconfigure the FPGA

00:11:44,030 --> 00:11:50,990
and of you go so that's the idea gives

00:11:46,580 --> 00:11:53,420
you a quicker response or faster

00:11:50,990 --> 00:11:56,570
response time to new needs and then

00:11:53,420 --> 00:11:58,940
third and also very important a rational

00:11:56,570 --> 00:12:00,620
speed of work so we've seen in the past

00:11:58,940 --> 00:12:04,370
that people make mistakes when they are

00:12:00,620 --> 00:12:06,770
out of their specialty so for example if

00:12:04,370 --> 00:12:08,960
we split things in carriers and

00:12:06,770 --> 00:12:11,260
mezzanine is a control group which is

00:12:08,960 --> 00:12:15,170
has more specialists in the digital

00:12:11,260 --> 00:12:16,820
design area come to the carrier and then

00:12:15,170 --> 00:12:23,180
people like the instrumentation or the

00:12:16,820 --> 00:12:25,670
RF group can do the analog mezzanine so

00:12:23,180 --> 00:12:28,010
here's an example of a carrier pci

00:12:25,670 --> 00:12:31,310
express courier simple pci express

00:12:28,010 --> 00:12:33,140
courier it has an fmc slot the front

00:12:31,310 --> 00:12:36,260
panel of the fmc is the front panel of

00:12:33,140 --> 00:12:41,050
the PCI Express at its at its heart lies

00:12:36,260 --> 00:12:43,270
this fpga and then an sfp socket to plug

00:12:41,050 --> 00:12:45,020
communication modules like optical

00:12:43,270 --> 00:12:48,440
communication in the case of I

00:12:45,020 --> 00:12:51,980
Providence we shall see and which can

00:12:48,440 --> 00:12:55,580
play the role of data exchange circuit

00:12:51,980 --> 00:12:57,560
and also synchronization circuit here's

00:12:55,580 --> 00:13:00,410
an example of a mezzanine this is a four

00:12:57,560 --> 00:13:03,320
channel ADC 100 mega sample per second

00:13:00,410 --> 00:13:07,490
14 bit resolution and all this is open

00:13:03,320 --> 00:13:10,430
hardware as we shall see here's another

00:13:07,490 --> 00:13:15,370
example of a courier a vm a 64 X courier

00:13:10,430 --> 00:13:17,420
with to fmc slots to fpgas to SF ps4

00:13:15,370 --> 00:13:19,070
outside communication and

00:13:17,420 --> 00:13:21,050
synchronization

00:13:19,070 --> 00:13:22,970
and here's a one last example of a

00:13:21,050 --> 00:13:25,610
mezzanine which is a time to digital

00:13:22,970 --> 00:13:27,770
converter so you provide pulses and you

00:13:25,610 --> 00:13:35,150
get a UTC time tag precisely within a

00:13:27,770 --> 00:13:37,370
nanosecond so so we for this renovation

00:13:35,150 --> 00:13:39,320
project we took a number of choices as

00:13:37,370 --> 00:13:40,970
we saw one was the split between

00:13:39,320 --> 00:13:42,410
couriers and mezzanine and the fact that

00:13:40,970 --> 00:13:45,230
we chose open hardware that I will

00:13:42,410 --> 00:13:48,050
detail later and another important

00:13:45,230 --> 00:13:50,780
choice was the way of structuring FPGA

00:13:48,050 --> 00:13:54,770
gate where so HDL that's going to become

00:13:50,780 --> 00:13:56,800
gates in the FPGA and we also wanted to

00:13:54,770 --> 00:14:00,590
ensure a certain degree of reusability

00:13:56,800 --> 00:14:03,680
so we chose a standard open bus called

00:14:00,590 --> 00:14:08,020
wishbone which is also the most common

00:14:03,680 --> 00:14:11,000
choice in open court org and the

00:14:08,020 --> 00:14:14,720
strategy is to build to cast all our

00:14:11,000 --> 00:14:16,760
design needs in terms of interconnected

00:14:14,720 --> 00:14:19,360
wishbone course so which one masters

00:14:16,760 --> 00:14:22,490
which one slaves which one interconnect

00:14:19,360 --> 00:14:25,600
so the main reasons the main reason is

00:14:22,490 --> 00:14:29,630
that it's an open standard it's simple

00:14:25,600 --> 00:14:31,010
it can be extended so we had a need for

00:14:29,630 --> 00:14:34,640
dealing with high throughput high

00:14:31,010 --> 00:14:37,040
latency devices like ddr and we proposed

00:14:34,640 --> 00:14:41,030
a collaboration with the open course or

00:14:37,040 --> 00:14:43,780
so people to extend to other am owed to

00:14:41,030 --> 00:14:47,420
the wishbone spec called pipeline

00:14:43,780 --> 00:14:49,790
pipeline mode and there's also already

00:14:47,420 --> 00:14:52,220
many cores available in places like open

00:14:49,790 --> 00:14:53,540
course org and around this strategic

00:14:52,220 --> 00:14:55,730
choice we built an infrastructure that

00:14:53,540 --> 00:14:59,030
would make a life easier for developing

00:14:55,730 --> 00:15:01,850
all these course so we have a WB gin

00:14:59,030 --> 00:15:04,040
which is a wishbone slave generator so

00:15:01,850 --> 00:15:05,480
you type in the your registers or five

00:15:04,040 --> 00:15:08,240
phones your memories and it spits out

00:15:05,480 --> 00:15:10,580
the ACL and very low code for the slave

00:15:08,240 --> 00:15:15,410
part of the wishbone core plus h files

00:15:10,580 --> 00:15:17,960
and documentation then for those worthy

00:15:15,410 --> 00:15:19,760
there was a talk yesterday about the

00:15:17,960 --> 00:15:23,330
self-describing wishbone bus so this is

00:15:19,760 --> 00:15:26,270
a mechanism developed by Manohar Vanga

00:15:23,330 --> 00:15:28,640
to enumerate which one bus so that

00:15:26,270 --> 00:15:30,470
software is able to discover dynamically

00:15:28,640 --> 00:15:32,900
these wishbone cores and the idea is to

00:15:30,470 --> 00:15:33,170
declare wishbone as a box bus in the

00:15:32,900 --> 00:15:35,779
linear

00:15:33,170 --> 00:15:38,029
colonel so that it can be enumerated as

00:15:35,779 --> 00:15:39,680
PCI or USB and you can load appropriate

00:15:38,029 --> 00:15:41,300
kernel modules to support each one of

00:15:39,680 --> 00:15:43,240
the wishbone course and so you can reuse

00:15:41,300 --> 00:15:47,240
not only these HDL but also the

00:15:43,240 --> 00:15:50,990
supporting colonel software HCL make

00:15:47,240 --> 00:15:53,149
which is a tool that makes integration

00:15:50,990 --> 00:15:54,139
of all these cores easier by going and

00:15:53,149 --> 00:15:56,300
fetching in different repositories

00:15:54,139 --> 00:15:59,060
different course you can specify the

00:15:56,300 --> 00:16:01,040
version so if the thing moves you can be

00:15:59,060 --> 00:16:05,600
sure which version you are working with

00:16:01,040 --> 00:16:07,490
and it makes for a nice make based flow

00:16:05,600 --> 00:16:09,589
as a software people i have to say that

00:16:07,490 --> 00:16:14,240
our main source of inspiration for the

00:16:09,589 --> 00:16:15,949
hardware development subsection was the

00:16:14,240 --> 00:16:17,389
part of the section that deals with

00:16:15,949 --> 00:16:18,980
linux device drivers so we wanted to

00:16:17,389 --> 00:16:21,350
have a development flow which is as nice

00:16:18,980 --> 00:16:23,750
as theirs and this is part of it HDL

00:16:21,350 --> 00:16:28,010
make and then there is also a core

00:16:23,750 --> 00:16:29,990
specific core for communicating between

00:16:28,010 --> 00:16:35,060
to which one bus is across ethernet and

00:16:29,990 --> 00:16:36,529
let's call this a bone and you can also

00:16:35,060 --> 00:16:39,519
communicate between a laptop and your

00:16:36,529 --> 00:16:42,949
wishbone bus this is a software and

00:16:39,519 --> 00:16:47,180
software library and hard work or for

00:16:42,949 --> 00:16:49,310
Easter boon okay so some words about

00:16:47,180 --> 00:16:52,370
open hardware now this is also a

00:16:49,310 --> 00:16:55,310
strategic choice up to now so we've been

00:16:52,370 --> 00:16:56,630
doing it for roughly three years designs

00:16:55,310 --> 00:16:58,850
were already in the public domain at

00:16:56,630 --> 00:17:00,440
CERN but we've been consciously making

00:16:58,850 --> 00:17:03,800
things easier for people to share with

00:17:00,440 --> 00:17:06,589
us all this hardware since three years

00:17:03,800 --> 00:17:08,299
now and during these three years we've

00:17:06,589 --> 00:17:09,709
seen a lot of people speak about open

00:17:08,299 --> 00:17:11,540
hardware meaning many different things

00:17:09,709 --> 00:17:13,699
and now we're lucky enough to have a

00:17:11,540 --> 00:17:16,280
standard definition of what open source

00:17:13,699 --> 00:17:20,540
hardware is so the fine falls in freedom

00:17:16,280 --> 00:17:21,980
defiant org worked it out mainly getting

00:17:20,540 --> 00:17:25,419
inspiration from the open source

00:17:21,980 --> 00:17:28,160
software definition so there's no

00:17:25,419 --> 00:17:29,480
ambiguity anymore when somebody says

00:17:28,160 --> 00:17:30,980
something is open source hardware

00:17:29,480 --> 00:17:34,760
there's an official definition and i

00:17:30,980 --> 00:17:36,710
invite you to visit it and sorry i just

00:17:34,760 --> 00:17:38,330
wanted to say basically focuses on

00:17:36,710 --> 00:17:39,620
giving freedom to the users so it's

00:17:38,330 --> 00:17:44,179
exactly as the open source software

00:17:39,620 --> 00:17:45,500
definition so why do we use open

00:17:44,179 --> 00:17:48,700
hardware

00:17:45,500 --> 00:17:51,230
this is an unordered list of reasons

00:17:48,700 --> 00:17:53,840
peer review of course you can get peer

00:17:51,230 --> 00:17:55,730
reviewed even without open hardware but

00:17:53,840 --> 00:17:59,000
you get more a peer review when you

00:17:55,730 --> 00:18:01,180
publish things design reuse people are

00:17:59,000 --> 00:18:06,920
more likely to adopt it and to find bugs

00:18:01,180 --> 00:18:10,040
if if if it's open then very important

00:18:06,920 --> 00:18:12,800
this is a point about freedom there is

00:18:10,040 --> 00:18:14,480
no vendor locked situations so companies

00:18:12,800 --> 00:18:16,280
which are by the way an essential

00:18:14,480 --> 00:18:18,620
ingredient in open hardware as opposed

00:18:16,280 --> 00:18:20,350
to maybe you could do free and open

00:18:18,620 --> 00:18:22,430
source software without companies

00:18:20,350 --> 00:18:23,960
certain doesn't do it certain works with

00:18:22,430 --> 00:18:26,390
companies for for open source software

00:18:23,960 --> 00:18:29,060
as well but you can it's an option for

00:18:26,390 --> 00:18:30,380
open hardware is no option you really

00:18:29,060 --> 00:18:32,780
have to have at least a company that

00:18:30,380 --> 00:18:34,820
builds these things for you so and

00:18:32,780 --> 00:18:38,150
companies play an integral role as we

00:18:34,820 --> 00:18:40,160
shall see later but they can be selected

00:18:38,150 --> 00:18:42,470
solely on the days of technical

00:18:40,160 --> 00:18:46,250
excellence good support and a good

00:18:42,470 --> 00:18:48,860
price-quality ratio and last but not

00:18:46,250 --> 00:18:51,110
least dissemination of knowledge is one

00:18:48,860 --> 00:18:54,110
of the core missions absurd not only for

00:18:51,110 --> 00:18:56,150
the physics results but also for

00:18:54,110 --> 00:19:01,550
everything we do including software and

00:18:56,150 --> 00:19:03,590
hardware design so when we started doing

00:19:01,550 --> 00:19:05,330
open hardware we found there was a

00:19:03,590 --> 00:19:07,360
number of things that we were missing to

00:19:05,330 --> 00:19:11,420
effectively share one of them was a

00:19:07,360 --> 00:19:13,490
proper place on the web to design

00:19:11,420 --> 00:19:16,370
together with other friends from other

00:19:13,490 --> 00:19:19,400
labs and with companies and with

00:19:16,370 --> 00:19:26,060
institutes in universities so we built

00:19:19,400 --> 00:19:28,600
this Forge type website with support for

00:19:26,060 --> 00:19:31,670
sharing all types of files for

00:19:28,600 --> 00:19:33,320
communicating effectively etc we chose

00:19:31,670 --> 00:19:36,290
to base it on Chile project which is a

00:19:33,320 --> 00:19:37,910
fork of red nine and we developed a

00:19:36,290 --> 00:19:40,600
number of plugins which are also false

00:19:37,910 --> 00:19:42,830
so they are shared with the GPL license

00:19:40,600 --> 00:19:46,370
for the rest of the people to use them

00:19:42,830 --> 00:19:48,110
and among those the most important ones

00:19:46,370 --> 00:19:52,280
were integration of version management

00:19:48,110 --> 00:19:56,540
systems like svn and get with with chile

00:19:52,280 --> 00:19:58,010
project okay so some example projects in

00:19:56,540 --> 00:19:59,059
the open hardware depository we have

00:19:58,010 --> 00:20:02,960
this fmc car

00:19:59,059 --> 00:20:04,490
years vme 64 x pci express and AMC v XS

00:20:02,960 --> 00:20:06,850
these are different form factors there's

00:20:04,490 --> 00:20:09,169
a px I express courier in the pipeline

00:20:06,850 --> 00:20:12,080
then different types of mezzanine is

00:20:09,169 --> 00:20:14,360
like a DC's of different sampling speeds

00:20:12,080 --> 00:20:16,909
number of bits time to digital converter

00:20:14,360 --> 00:20:18,559
and it's complimentary module I find

00:20:16,909 --> 00:20:21,379
delayed generator with a resolution of

00:20:18,559 --> 00:20:22,990
100 second and then digital i/o boards

00:20:21,379 --> 00:20:25,340
with different number of channels and

00:20:22,990 --> 00:20:27,070
all of these this is very important will

00:20:25,340 --> 00:20:31,509
be commercially available from companies

00:20:27,070 --> 00:20:35,059
in a completely free of completely free

00:20:31,509 --> 00:20:36,649
licensing terms and non-exclusive so

00:20:35,059 --> 00:20:38,840
more than one company can commercialize

00:20:36,649 --> 00:20:43,240
these things even without informing us

00:20:38,840 --> 00:20:45,909
and this is very important for us and

00:20:43,240 --> 00:20:49,940
one of the reasons it's important for us

00:20:45,909 --> 00:20:52,460
it is because if we practice and this is

00:20:49,940 --> 00:20:54,889
a very important slide because it

00:20:52,460 --> 00:20:56,809
illustrates a common misconception some

00:20:54,889 --> 00:20:59,419
people say commercial hardware to mean

00:20:56,809 --> 00:21:01,190
in fact commercial and proprietary so

00:20:59,419 --> 00:21:04,669
things are slightly more complex there

00:21:01,190 --> 00:21:06,230
is two dimensions to this problem so on

00:21:04,669 --> 00:21:07,999
the one dimension you can have

00:21:06,230 --> 00:21:10,639
commercial versus non-commercial and

00:21:07,999 --> 00:21:12,619
then another dimension you can have open

00:21:10,639 --> 00:21:14,210
or proprietary and there are four

00:21:12,619 --> 00:21:17,809
possible combinations of these two

00:21:14,210 --> 00:21:21,139
things so so far traditionally we have

00:21:17,809 --> 00:21:24,429
explored two cells in this matrix we

00:21:21,139 --> 00:21:27,440
have explored proprietary and commercial

00:21:24,429 --> 00:21:30,129
with several disadvantages one of which

00:21:27,440 --> 00:21:32,749
is vendor lock-in as I explained and

00:21:30,129 --> 00:21:37,399
another one is how to deal with

00:21:32,749 --> 00:21:41,960
obsolescence and we have also explored

00:21:37,399 --> 00:21:44,960
in the past noncommercial and open so we

00:21:41,960 --> 00:21:47,960
developing on our own stuff just for our

00:21:44,960 --> 00:21:50,690
needs the problem with this is that if

00:21:47,960 --> 00:21:52,090
what you design is successful and other

00:21:50,690 --> 00:21:54,940
people like it and want to use it

00:21:52,090 --> 00:21:57,139
developers are quickly swamped with

00:21:54,940 --> 00:22:00,139
requests for support and it doesn't

00:21:57,139 --> 00:22:01,909
scale very well so we think you can get

00:22:00,139 --> 00:22:04,549
the best of both worlds by being

00:22:01,909 --> 00:22:06,889
commercial and open so that companies

00:22:04,549 --> 00:22:09,740
take a large chunk of the support load

00:22:06,889 --> 00:22:12,330
and people pay them for that without

00:22:09,740 --> 00:22:14,549
releasing any of their freedoms

00:22:12,330 --> 00:22:16,860
and we have already seen this work so

00:22:14,549 --> 00:22:18,929
there's at least two of the hardware

00:22:16,860 --> 00:22:20,940
modules I pointed to which are already

00:22:18,929 --> 00:22:23,370
commercialized and the rest is in the

00:22:20,940 --> 00:22:28,519
pipeline just because the design is not

00:22:23,370 --> 00:22:31,230
over yet so the second piece of

00:22:28,519 --> 00:22:34,320
infrastructure we needed to efficiently

00:22:31,230 --> 00:22:39,990
share at least from certain point of

00:22:34,320 --> 00:22:44,039
view was a hardware an open hardware

00:22:39,990 --> 00:22:46,559
license that would make it very clear to

00:22:44,039 --> 00:22:53,399
our partners about what the conditions

00:22:46,559 --> 00:22:56,639
were and what what we had in mind is a

00:22:53,399 --> 00:23:00,299
license that would be persistent like

00:22:56,639 --> 00:23:03,210
the GPL family but that would deal with

00:23:00,299 --> 00:23:04,889
a number of issues that arise when

00:23:03,210 --> 00:23:06,870
you're talking about hardware and not

00:23:04,889 --> 00:23:09,029
software so there was no such license

00:23:06,870 --> 00:23:11,730
that we could use at the time and now we

00:23:09,029 --> 00:23:13,919
and we came up in collaboration with the

00:23:11,730 --> 00:23:15,389
knowledge transfer group at CERN with

00:23:13,919 --> 00:23:17,789
these certain open how to license that's

00:23:15,389 --> 00:23:22,350
already being used in many places it's

00:23:17,789 --> 00:23:24,149
inspired by false licenses it talks not

00:23:22,350 --> 00:23:25,889
only about the design files but about

00:23:24,149 --> 00:23:28,799
products that you make based on those

00:23:25,889 --> 00:23:30,690
designs and if I had to compare it with

00:23:28,799 --> 00:23:33,419
one existing license although it's very

00:23:30,690 --> 00:23:35,669
very tricky because this is hardware not

00:23:33,419 --> 00:23:37,350
software it will be something like lgpl

00:23:35,669 --> 00:23:39,299
so if you modify some of the design

00:23:37,350 --> 00:23:40,470
files of a given design and you publish

00:23:39,299 --> 00:23:43,080
them you're supposed to publish them

00:23:40,470 --> 00:23:44,880
with the same license but it's not just

00:23:43,080 --> 00:23:46,169
because you hook a design to something

00:23:44,880 --> 00:23:50,340
else that that something else has to be

00:23:46,169 --> 00:23:53,279
released so it makes it really easier to

00:23:50,340 --> 00:23:56,700
work with others specifically because

00:23:53,279 --> 00:23:58,139
some companies really like and

00:23:56,700 --> 00:24:00,960
especially those with big legal

00:23:58,139 --> 00:24:04,669
departments really like clarity and this

00:24:00,960 --> 00:24:09,179
is a very clear easy-to-read license

00:24:04,669 --> 00:24:12,809
okay so as I said very much inspired by

00:24:09,179 --> 00:24:15,120
force anybody can see the source but

00:24:12,809 --> 00:24:17,669
also studied modified share it and make

00:24:15,120 --> 00:24:21,330
products based on it there is no

00:24:17,669 --> 00:24:23,039
constraint on that and modifications if

00:24:21,330 --> 00:24:24,630
they are distributed they should be

00:24:23,039 --> 00:24:26,220
distributed under the same license and

00:24:24,630 --> 00:24:27,990
this persistence

00:24:26,220 --> 00:24:29,940
make sure that everybody profits from

00:24:27,990 --> 00:24:33,570
these improvements and then there's a

00:24:29,940 --> 00:24:35,909
kind request if you produce things based

00:24:33,570 --> 00:24:37,520
on that documentation is not compulsory

00:24:35,909 --> 00:24:39,900
because that would be a non-free closed

00:24:37,520 --> 00:24:42,270
it's a kind request to inform the

00:24:39,900 --> 00:24:44,640
license or so that people like cern and

00:24:42,270 --> 00:24:47,549
others can track impact on society of

00:24:44,640 --> 00:24:51,240
the released designs but this is no not

00:24:47,549 --> 00:24:53,250
compulsory some examples of what people

00:24:51,240 --> 00:24:54,630
are licensing using this urn open

00:24:53,250 --> 00:24:56,700
hardware license just illustrate that is

00:24:54,630 --> 00:24:58,350
for hardware any kind of hardware not

00:24:56,700 --> 00:25:00,690
necessarily electronics and not

00:24:58,350 --> 00:25:04,350
necessarily from cern so this is a worm

00:25:00,690 --> 00:25:07,669
farm used for turning shredded paper

00:25:04,350 --> 00:25:12,000
into waste that you can use a sterilizer

00:25:07,669 --> 00:25:13,320
with the help of tiger worms and this is

00:25:12,000 --> 00:25:16,380
a roto castor that you can use for

00:25:13,320 --> 00:25:22,860
making things like hollow rabbits in

00:25:16,380 --> 00:25:25,020
chocolate for Easter okay so we have one

00:25:22,860 --> 00:25:28,380
last hurdle for efficient sharing of

00:25:25,020 --> 00:25:33,030
hardware designs which is the tools

00:25:28,380 --> 00:25:35,520
themselves so unfortunately tools to do

00:25:33,030 --> 00:25:38,549
PCB design and to be especially those

00:25:35,520 --> 00:25:40,559
for PCB design they have non-compatible

00:25:38,549 --> 00:25:44,100
formats so it's very difficult to share

00:25:40,559 --> 00:25:47,010
and the free options that exist for PCB

00:25:44,100 --> 00:25:49,080
design they are not yet on par in terms

00:25:47,010 --> 00:25:52,710
of features and quality with the

00:25:49,080 --> 00:25:56,250
proprietary of rings so insane thing

00:25:52,710 --> 00:26:00,059
could be said for the ACL very low

00:25:56,250 --> 00:26:01,830
simulators so we think that this is the

00:26:00,059 --> 00:26:03,360
last thing we need to do to share

00:26:01,830 --> 00:26:07,110
effectively and we've taken a number of

00:26:03,360 --> 00:26:10,380
decisions as well to team up with two

00:26:07,110 --> 00:26:12,780
projects to force projects one is equals

00:26:10,380 --> 00:26:14,610
very long which is a very nice very log

00:26:12,780 --> 00:26:18,330
simulator but lacking the ability to

00:26:14,610 --> 00:26:21,630
simulate the HCL RTL code and to support

00:26:18,330 --> 00:26:23,130
system very look for test benches so we

00:26:21,630 --> 00:26:25,320
would like to help in fact we're already

00:26:23,130 --> 00:26:27,720
helping adding VHDL and system verilog

00:26:25,320 --> 00:26:29,820
support triggers very long and the

00:26:27,720 --> 00:26:32,789
second one is a PCB design tool called

00:26:29,820 --> 00:26:35,960
kick add you can see more here about

00:26:32,789 --> 00:26:38,399
what we think it's missing and we will

00:26:35,960 --> 00:26:41,059
very soon start to contribute to that

00:26:38,399 --> 00:26:41,059
project as well

00:26:41,330 --> 00:26:47,250
okay so all these Hardware boards they

00:26:44,310 --> 00:26:50,010
are designed and they will they some of

00:26:47,250 --> 00:26:52,230
them are commercialized and some others

00:26:50,010 --> 00:26:54,090
will also be commercialized soon and

00:26:52,230 --> 00:26:56,280
then we will install them and we will

00:26:54,090 --> 00:26:57,720
need to interconnect them and as I

00:26:56,280 --> 00:27:00,840
showed earlier this is a highly

00:26:57,720 --> 00:27:04,290
distributed real-time system and we need

00:27:00,840 --> 00:27:06,720
a way of connecting these boards to make

00:27:04,290 --> 00:27:09,840
them share a common notion of time so

00:27:06,720 --> 00:27:11,400
this is very important and since we're

00:27:09,840 --> 00:27:13,220
going open about this as well we made a

00:27:11,400 --> 00:27:16,380
special effort to raise all our stuff on

00:27:13,220 --> 00:27:18,540
established standards so for

00:27:16,380 --> 00:27:20,250
synchronization we use something called

00:27:18,540 --> 00:27:22,680
white rabbit which is an extension of

00:27:20,250 --> 00:27:23,940
Ethernet and by extension me I mean that

00:27:22,680 --> 00:27:25,560
anything you can do with ethernet you

00:27:23,940 --> 00:27:27,750
can do with white rabbit it's also an

00:27:25,560 --> 00:27:30,120
extension of PTP for those who know it I

00:27:27,750 --> 00:27:33,210
Tripoli 1588 which is a standard for

00:27:30,120 --> 00:27:34,970
doing synchronization over ethernet so

00:27:33,210 --> 00:27:38,670
we add two things two ethernet

00:27:34,970 --> 00:27:41,790
synchronism and determinism and by

00:27:38,670 --> 00:27:43,470
synchronism I mean common notion of time

00:27:41,790 --> 00:27:46,440
everywhere just by the fact that you

00:27:43,470 --> 00:27:49,380
plug these modules together we will see

00:27:46,440 --> 00:27:53,010
how that works and by determinism I mean

00:27:49,380 --> 00:27:54,630
a guarantee for the worst-case latency

00:27:53,010 --> 00:27:56,730
through the network so that people can

00:27:54,630 --> 00:27:58,340
do worst case analysis and design and be

00:27:56,730 --> 00:28:00,930
sure that things will always work out

00:27:58,340 --> 00:28:03,180
it's a multi laboratory multi-company

00:28:00,930 --> 00:28:04,920
project based on open hardware we will

00:28:03,180 --> 00:28:06,510
see later the white rabbit switch which

00:28:04,920 --> 00:28:09,390
is a full-featured switch made from

00:28:06,510 --> 00:28:14,190
scratch and with an expanding user base

00:28:09,390 --> 00:28:16,860
in many places like cern big european or

00:28:14,190 --> 00:28:18,750
other scientific projects like the

00:28:16,860 --> 00:28:21,330
cherenkov telescope array is considering

00:28:18,750 --> 00:28:23,550
using it a chinese group to study the

00:28:21,330 --> 00:28:26,580
higher layers of the atmosphere is also

00:28:23,550 --> 00:28:29,810
using it and the the user bay is

00:28:26,580 --> 00:28:32,550
expanding by the week oh there's also

00:28:29,810 --> 00:28:36,330
commercial and industrial applications

00:28:32,550 --> 00:28:38,190
as well for scene 4 for white rabbit so

00:28:36,330 --> 00:28:40,200
the goals on our side when we started

00:28:38,190 --> 00:28:42,150
working on this design were to

00:28:40,200 --> 00:28:43,980
synchronize up to 2000 nodes with

00:28:42,150 --> 00:28:46,500
typical fiber lengths of 10 kilometers

00:28:43,980 --> 00:28:50,370
and the precision in the synchronization

00:28:46,500 --> 00:28:51,900
with a 1 100 second accuracy and a

00:28:50,370 --> 00:28:53,790
recovered clock with typically 20

00:28:51,900 --> 00:28:57,580
picoseconds of Jeter

00:28:53,790 --> 00:28:59,740
and this is the way we go about it so

00:28:57,580 --> 00:29:01,840
this is a typical a block diagram of a

00:28:59,740 --> 00:29:06,070
switch with the uplink port and many

00:29:01,840 --> 00:29:08,350
downlink ports and the main trick is to

00:29:06,070 --> 00:29:11,500
use as in synchronous ethernet and under

00:29:08,350 --> 00:29:13,960
standard that we support to use the

00:29:11,500 --> 00:29:16,210
clock that encodes the data so when you

00:29:13,960 --> 00:29:18,040
receive in the switch here you extract

00:29:16,210 --> 00:29:21,100
the data the Phi gives you this received

00:29:18,040 --> 00:29:23,350
clock for free and then you use it to

00:29:21,100 --> 00:29:25,830
clock all the data streams including the

00:29:23,350 --> 00:29:28,180
one going back to this master node and

00:29:25,830 --> 00:29:30,880
all the downstream traffic all the

00:29:28,180 --> 00:29:33,700
encoding on these transmitters in that

00:29:30,880 --> 00:29:35,080
way that frequency that me in the case

00:29:33,700 --> 00:29:36,430
of certain comes from a very precise

00:29:35,080 --> 00:29:40,210
source of frequency and comic clock

00:29:36,430 --> 00:29:41,890
synchronized with GPS that frequency

00:29:40,210 --> 00:29:44,860
very stable frequency very high quality

00:29:41,890 --> 00:29:46,630
is propagated and transparently to all

00:29:44,860 --> 00:29:48,910
the nodes because this happens at the

00:29:46,630 --> 00:29:50,260
physical layer without any traffic in

00:29:48,910 --> 00:29:51,730
fact even with the when there's no

00:29:50,260 --> 00:29:53,860
traffic in an Ethernet link there is

00:29:51,730 --> 00:29:55,870
commas and there's stuff going on always

00:29:53,860 --> 00:29:59,410
to keep the PLL the phase lock loop

00:29:55,870 --> 00:30:01,150
receiver in the receiver happy so you

00:29:59,410 --> 00:30:06,910
always have a very solid clock signal

00:30:01,150 --> 00:30:09,310
here transparently and then once you've

00:30:06,910 --> 00:30:11,830
done that if you put a phase detector

00:30:09,310 --> 00:30:13,330
here and you measure the phase between

00:30:11,830 --> 00:30:15,550
the reference clock you used for

00:30:13,330 --> 00:30:18,640
encoding and they bounce back bounce

00:30:15,550 --> 00:30:21,010
back clock here after doing these two

00:30:18,640 --> 00:30:25,180
way trip forwards and then back once

00:30:21,010 --> 00:30:28,000
again you can have a very precise

00:30:25,180 --> 00:30:29,560
measurement of what this delay the

00:30:28,000 --> 00:30:32,290
induced delay by the fiber connection

00:30:29,560 --> 00:30:35,110
was and then you can inform this node on

00:30:32,290 --> 00:30:37,090
the other end of the link so that this

00:30:35,110 --> 00:30:38,950
node can compensate for that phase

00:30:37,090 --> 00:30:41,740
difference and recover a clock here

00:30:38,950 --> 00:30:43,510
which is perfectly in phase with the

00:30:41,740 --> 00:30:47,550
original reference clock to within the

00:30:43,510 --> 00:30:47,550
accuracy figures I I mentioned earlier

00:30:48,450 --> 00:30:55,210
so this is the version 2 white rabbits

00:30:51,760 --> 00:30:57,190
which it says I said open hardware open

00:30:55,210 --> 00:31:00,310
software as we will see there's an

00:30:57,190 --> 00:31:02,260
embedded Linux system in it and we're

00:31:00,310 --> 00:31:05,440
already now doing version 3 which has 18

00:31:02,260 --> 00:31:06,740
ports so this will be obsoleted but this

00:31:05,440 --> 00:31:10,840
has proven to be the most

00:31:06,740 --> 00:31:13,550
precise btp implementation in the world

00:31:10,840 --> 00:31:16,010
here's a quick sketch of what's inside

00:31:13,550 --> 00:31:19,429
so basically all the time critical stuff

00:31:16,010 --> 00:31:21,710
like figuring out from an ethernet frame

00:31:19,429 --> 00:31:24,410
what the destination port is is done in

00:31:21,710 --> 00:31:26,179
an fpga and routing that frame to the

00:31:24,410 --> 00:31:27,710
appropriate output port is all done in

00:31:26,179 --> 00:31:31,510
the fpga in a very deterministic

00:31:27,710 --> 00:31:34,720
hardware based setting and then all the

00:31:31,510 --> 00:31:37,160
non-critical stuff runs in this Linux

00:31:34,720 --> 00:31:39,650
system embedded Linux system in an arm

00:31:37,160 --> 00:31:41,960
computer in an arm CPU and that includes

00:31:39,650 --> 00:31:47,300
for example SNMP for management spanning

00:31:41,960 --> 00:31:49,040
tree protocol etc so to illustrate the

00:31:47,300 --> 00:31:51,679
place of why travel insurance hardware

00:31:49,040 --> 00:31:53,990
kit we have this carrier that we showed

00:31:51,679 --> 00:31:56,240
earlier it has an FM SI saket you put

00:31:53,990 --> 00:31:57,950
these different types of methylenes IDC

00:31:56,240 --> 00:32:00,080
stacks time to digital finding a

00:31:57,950 --> 00:32:02,390
generator thanks to the White Rabbit

00:32:00,080 --> 00:32:04,760
port they can be synchronized and all of

00:32:02,390 --> 00:32:07,010
them benefit in different ways from the

00:32:04,760 --> 00:32:08,780
White Rabbit connection remember this is

00:32:07,010 --> 00:32:11,809
just an Ethernet there's nothing white

00:32:08,780 --> 00:32:14,030
rabbit specific in this board unless you

00:32:11,809 --> 00:32:16,700
instantiate inside the FPGA I white

00:32:14,030 --> 00:32:20,030
rabbit core which is also a licensed

00:32:16,700 --> 00:32:26,600
under lgpl like course in open court org

00:32:20,030 --> 00:32:29,300
and with this kit you can build systems

00:32:26,600 --> 00:32:31,400
like this distributed oscilloscope where

00:32:29,300 --> 00:32:34,910
you can have a dcs all around these 27

00:32:31,400 --> 00:32:36,440
kilometers accelerator there hook to

00:32:34,910 --> 00:32:38,179
White Rabbit switches you can have time

00:32:36,440 --> 00:32:41,330
to digital converter to timestamp

00:32:38,179 --> 00:32:44,210
trigger pulses and then once you have a

00:32:41,330 --> 00:32:46,070
trigger you can get all the data from

00:32:44,210 --> 00:32:48,710
the adcs which is also time-stamped

00:32:46,070 --> 00:32:51,140
select the subset of data that you're

00:32:48,710 --> 00:32:52,610
interested in and display them in an

00:32:51,140 --> 00:32:53,630
oscilloscope as if they were all

00:32:52,610 --> 00:32:54,770
connected to the same physical

00:32:53,630 --> 00:32:57,410
oscilloscope with a graphical

00:32:54,770 --> 00:32:58,490
application so this distributed

00:32:57,410 --> 00:33:02,000
oscilloscope is a very useful

00:32:58,490 --> 00:33:04,370
application at CERN okay so that's the

00:33:02,000 --> 00:33:07,490
end of my part of the talk I will now

00:33:04,370 --> 00:33:09,760
hand it over to David for the software

00:33:07,490 --> 00:33:09,760
part

00:33:18,609 --> 00:33:31,389
we've in thanks hmm can everybody hear

00:33:26,690 --> 00:33:36,139
me it's okay look at the bottom also

00:33:31,389 --> 00:33:39,619
okay so after Javier's talk we are very

00:33:36,139 --> 00:33:42,289
aware of the great world of hardware

00:33:39,619 --> 00:33:46,129
design and how the open hardware designs

00:33:42,289 --> 00:33:47,629
make things easy for Howard designers my

00:33:46,129 --> 00:33:51,349
mission here is to talk about the

00:33:47,629 --> 00:33:53,629
software part and i would say that after

00:33:51,349 --> 00:33:56,899
the magnificent work that Hardware

00:33:53,629 --> 00:33:59,809
designers do we get ourselves a very

00:33:56,899 --> 00:34:02,450
complex ecosystem well system is a

00:33:59,809 --> 00:34:06,759
forbidden word in some contexts so I

00:34:02,450 --> 00:34:09,490
would say that we got a zoo of different

00:34:06,759 --> 00:34:13,399
very a Taylor genius hardware devices

00:34:09,490 --> 00:34:15,500
that we have to cater for for which we

00:34:13,399 --> 00:34:18,980
have to write software that are very

00:34:15,500 --> 00:34:21,770
complex very different among them so for

00:34:18,980 --> 00:34:25,220
example we get lots of hardware animals

00:34:21,770 --> 00:34:27,470
created by our heart engineers that

00:34:25,220 --> 00:34:29,960
belong to different species like for

00:34:27,470 --> 00:34:32,359
example typically analog i/o devices

00:34:29,960 --> 00:34:38,079
like a disease ducks other boards like

00:34:32,359 --> 00:34:41,179
pure digital i/o like these serial links

00:34:38,079 --> 00:34:43,669
timing boards timing receivers find

00:34:41,179 --> 00:34:45,740
delays time time to digital converters

00:34:43,669 --> 00:34:49,940
and many others that don't fit quite

00:34:45,740 --> 00:34:52,129
accurately in all those categories apart

00:34:49,940 --> 00:34:55,010
from the diversity that we have here we

00:34:52,129 --> 00:34:58,130
have also different breeds different

00:34:55,010 --> 00:35:00,890
origins different families the those

00:34:58,130 --> 00:35:02,619
device proceed from we have those

00:35:00,890 --> 00:35:05,390
developments that have yer described a

00:35:02,619 --> 00:35:08,150
shiny brand-new fmc boards that we are

00:35:05,390 --> 00:35:11,720
developing that half full bells and

00:35:08,150 --> 00:35:14,750
whistles and many fancy features but

00:35:11,720 --> 00:35:17,089
attend we got lots of legacy commercial

00:35:14,750 --> 00:35:19,369
off-the-shelf solutions and very old

00:35:17,089 --> 00:35:21,410
stuff that is very difficult to handle

00:35:19,369 --> 00:35:24,079
very difficult to deal with and very a

00:35:21,410 --> 00:35:25,160
taro genius so from the software point

00:35:24,079 --> 00:35:29,420
of view

00:35:25,160 --> 00:35:32,299
we have to put some order in that so how

00:35:29,420 --> 00:35:35,869
do we do it well that's what I'm trying

00:35:32,299 --> 00:35:38,599
to explain in this part of the talk to

00:35:35,869 --> 00:35:41,660
focus it I would like to speak to you

00:35:38,599 --> 00:35:44,630
about two different unifying themes both

00:35:41,660 --> 00:35:47,630
of them very well rooted in the culture

00:35:44,630 --> 00:35:50,510
of the force community the first one is

00:35:47,630 --> 00:35:52,579
how we develop drivers for the fmc

00:35:50,510 --> 00:35:54,260
boards that are which one based and

00:35:52,579 --> 00:35:56,089
which one centric have you already

00:35:54,260 --> 00:35:58,190
explained what the wishbone bus is it's

00:35:56,089 --> 00:36:00,079
a women of interconnecting IP cores

00:35:58,190 --> 00:36:02,390
inside the framework of these fine

00:36:00,079 --> 00:36:03,890
boards that we are developing and the

00:36:02,390 --> 00:36:06,650
design of these drivers is based

00:36:03,890 --> 00:36:09,470
essentially on covering that familiar

00:36:06,650 --> 00:36:12,020
move boards design around that bus and

00:36:09,470 --> 00:36:14,720
most importantly being able to

00:36:12,020 --> 00:36:16,900
auto-detect and enumerate properly the

00:36:14,720 --> 00:36:19,520
device that are interconnected during

00:36:16,900 --> 00:36:22,309
another unifying theme that I want to

00:36:19,520 --> 00:36:25,490
talk about is the 0 framework zo the

00:36:22,309 --> 00:36:28,309
ultimate IO is a framework for analog

00:36:25,490 --> 00:36:32,779
and digital i/o colonel framework that

00:36:28,309 --> 00:36:34,339
was developed with mainly the

00:36:32,779 --> 00:36:36,619
application that is most concerning at

00:36:34,339 --> 00:36:39,670
cern high bandwidth applications for

00:36:36,619 --> 00:36:42,680
data acquisition or wait for playing so

00:36:39,670 --> 00:36:45,140
let's go directly to the first to the

00:36:42,680 --> 00:36:48,230
first aspect in this talk how do we

00:36:45,140 --> 00:36:50,900
develop these drivers for the smc family

00:36:48,230 --> 00:36:52,700
of boards first of all to give you a

00:36:50,900 --> 00:36:56,359
clear picture of what software has to

00:36:52,700 --> 00:36:59,180
deal with recall from happier stock that

00:36:56,359 --> 00:37:01,640
we have two types of boards that fit

00:36:59,180 --> 00:37:04,670
into the applications first carriers in

00:37:01,640 --> 00:37:07,700
pci or via me from factors that provide

00:37:04,670 --> 00:37:09,710
so to speak the intelligence of the

00:37:07,700 --> 00:37:12,140
application and second medicines that

00:37:09,710 --> 00:37:14,559
are plugged in them that provide the

00:37:12,140 --> 00:37:17,240
electronics for a particular application

00:37:14,559 --> 00:37:18,799
the true intelligence is not in the

00:37:17,240 --> 00:37:21,230
medicine in the mezzanine only provides

00:37:18,799 --> 00:37:23,270
circuitry it's the carrier or more

00:37:21,230 --> 00:37:25,250
precisely firmware in the fpga of the

00:37:23,270 --> 00:37:26,990
carrier that contains hardly all the

00:37:25,250 --> 00:37:30,890
intelligence and all the things that

00:37:26,990 --> 00:37:32,839
drive that maintaining board so as the

00:37:30,890 --> 00:37:36,380
logic in the fpga is organized around

00:37:32,839 --> 00:37:38,150
the wishbone interconnection bus we have

00:37:36,380 --> 00:37:38,960
to deal with all those cores that

00:37:38,150 --> 00:37:40,310
perform the

00:37:38,960 --> 00:37:42,410
different functions of a particular

00:37:40,310 --> 00:37:44,570
application when I say the word

00:37:42,410 --> 00:37:47,000
application I'm always referring to a

00:37:44,570 --> 00:37:49,430
particular combo of carrier plus

00:37:47,000 --> 00:37:51,500
mezzanine and also a framework that

00:37:49,430 --> 00:37:54,080
could do different things even for the

00:37:51,500 --> 00:37:56,330
same physical layout of carrier plasmids

00:37:54,080 --> 00:37:58,099
I mean so for example an 80 cements an

00:37:56,330 --> 00:38:00,980
implant in the spec carrier would

00:37:58,099 --> 00:38:03,109
perform different functions not only the

00:38:00,980 --> 00:38:05,830
ordinary function of an ADC but some

00:38:03,109 --> 00:38:09,170
others depending on the framer load

00:38:05,830 --> 00:38:11,180
sorry to repeat this picture I just only

00:38:09,170 --> 00:38:13,160
have to add the URL so that if you want

00:38:11,180 --> 00:38:14,630
to know more about this peg board you

00:38:13,160 --> 00:38:17,450
have all the details in the open how the

00:38:14,630 --> 00:38:19,460
repository this is the spec carrier have

00:38:17,450 --> 00:38:22,310
you mentioned before there is the slot

00:38:19,460 --> 00:38:26,660
for connecting an smc board and to focus

00:38:22,310 --> 00:38:30,170
our explanation I would like to speak

00:38:26,660 --> 00:38:33,380
about this carrier porting this

00:38:30,170 --> 00:38:36,290
application board and the end CADC that

00:38:33,380 --> 00:38:38,839
hundreds 100 mega samples per second has

00:38:36,290 --> 00:38:40,700
four channels and 14 bit resolution you

00:38:38,839 --> 00:38:43,700
also have their the URL that allows you

00:38:40,700 --> 00:38:45,740
to investigate what we're up to okay so

00:38:43,700 --> 00:38:48,950
you plug this mentioning into the

00:38:45,740 --> 00:38:51,560
carrier board and then you have to write

00:38:48,950 --> 00:38:55,369
a driver for it how do you go about it

00:38:51,560 --> 00:38:58,820
well sorry if the if the size of the

00:38:55,369 --> 00:39:01,099
font is quite unreadable but the data

00:38:58,820 --> 00:39:03,109
else are irrelevant you only have to

00:39:01,099 --> 00:39:05,119
keep in mind that in the internal

00:39:03,109 --> 00:39:06,680
construction of the firmware you have

00:39:05,119 --> 00:39:08,869
several IP cores that implement

00:39:06,680 --> 00:39:12,800
different functionalities as the font

00:39:08,869 --> 00:39:15,170
size is quite small you can not see that

00:39:12,800 --> 00:39:18,349
those blocks provide for example by

00:39:15,170 --> 00:39:20,060
basic square i square c interfacing so

00:39:18,349 --> 00:39:21,770
that for example we can read a small

00:39:20,060 --> 00:39:24,440
eeprom in the midst I mean that allows

00:39:21,770 --> 00:39:27,050
us to identify it you have wishbone

00:39:24,440 --> 00:39:28,250
mastering you have also of course DMA

00:39:27,050 --> 00:39:30,470
access so that we can perform

00:39:28,250 --> 00:39:32,780
acquisitions and recover the data in the

00:39:30,470 --> 00:39:34,640
buffer is very fast into the recovery

00:39:32,780 --> 00:39:37,880
relating to the buffers of the carrier

00:39:34,640 --> 00:39:39,589
quite quickly methylene specific control

00:39:37,880 --> 00:39:41,900
logic for controlling the ADC and

00:39:39,589 --> 00:39:43,760
interrupt control each one of these

00:39:41,900 --> 00:39:46,160
blocks provides some of these functions

00:39:43,760 --> 00:39:48,770
okay so what we have in the firmware is

00:39:46,160 --> 00:39:51,600
this how do we handle this at the driver

00:39:48,770 --> 00:39:53,280
level well the

00:39:51,600 --> 00:39:55,260
Thank concepts for the drivers and I

00:39:53,280 --> 00:39:58,860
will explain shortly how they work are

00:39:55,260 --> 00:40:01,200
the following first of all the structure

00:39:58,860 --> 00:40:03,990
of the drivers is modular just as the

00:40:01,200 --> 00:40:08,670
design of the set of course and of the

00:40:03,990 --> 00:40:11,700
firmware of the board is second there is

00:40:08,670 --> 00:40:14,010
usually a by jective mapping between the

00:40:11,700 --> 00:40:16,710
IP cores inside the framework of the

00:40:14,010 --> 00:40:18,450
application and the colonel models and

00:40:16,710 --> 00:40:20,760
the drivers that are built for dealing

00:40:18,450 --> 00:40:22,890
with them so that if we reuse some

00:40:20,760 --> 00:40:24,780
course for different applications or

00:40:22,890 --> 00:40:26,880
even four different medicines we don't

00:40:24,780 --> 00:40:30,950
have to rewrite the same thing again and

00:40:26,880 --> 00:40:34,110
again first of all we should be able to

00:40:30,950 --> 00:40:36,330
dynamically load firmware depending on

00:40:34,110 --> 00:40:38,340
the application we have and on the

00:40:36,330 --> 00:40:40,280
physical boards that are available so

00:40:38,340 --> 00:40:43,220
those are the three principal

00:40:40,280 --> 00:40:45,360
requirements that we have to fulfil

00:40:43,220 --> 00:40:47,940
actually we can do this without

00:40:45,360 --> 00:40:51,060
inventing nothing really new nothing

00:40:47,940 --> 00:40:53,850
that is not already in the floating in

00:40:51,060 --> 00:40:57,630
the midst of the force community first

00:40:53,850 --> 00:41:00,180
of all the drivers will act as something

00:40:57,630 --> 00:41:03,060
that has two main functions the first

00:41:00,180 --> 00:41:06,390
one is drivers for the carrier's frame

00:41:03,060 --> 00:41:07,560
were loading the driver will load the

00:41:06,390 --> 00:41:09,990
appropriate framework for the

00:41:07,560 --> 00:41:12,420
application at hand so this is one basic

00:41:09,990 --> 00:41:16,260
component for it second the driver will

00:41:12,420 --> 00:41:20,850
act as a bridge driver between the

00:41:16,260 --> 00:41:22,950
native host local bus bit pci or via me

00:41:20,850 --> 00:41:24,450
and the wishbone busted in click on that

00:41:22,950 --> 00:41:27,240
it incorrect all the calls in the

00:41:24,450 --> 00:41:29,430
application we hope that this is will be

00:41:27,240 --> 00:41:30,810
the first wishbone bus driver that will

00:41:29,430 --> 00:41:33,840
be integrated into the mainstream

00:41:30,810 --> 00:41:38,940
colonel but this is not yet done at the

00:41:33,840 --> 00:41:41,880
moment so how does it work to understand

00:41:38,940 --> 00:41:44,550
this better I think that going through

00:41:41,880 --> 00:41:46,620
the process of the boot of one of this

00:41:44,550 --> 00:41:49,470
driver will be quite instructive it will

00:41:46,620 --> 00:41:52,020
leave a very clear picture of how do we

00:41:49,470 --> 00:41:55,050
go about this first of all there is

00:41:52,020 --> 00:41:57,570
nothing okay well there is one thing

00:41:55,050 --> 00:42:00,840
there's the board the board contains the

00:41:57,570 --> 00:42:03,300
board is a carrier it has an fpga inside

00:42:00,840 --> 00:42:04,780
it that is initially empty well it

00:42:03,300 --> 00:42:06,520
contains something but it's

00:42:04,780 --> 00:42:08,680
irrelevant data and we've have a

00:42:06,520 --> 00:42:11,260
mezzanine that contains an EEPROM that

00:42:08,680 --> 00:42:14,700
allows to identify what type of physical

00:42:11,260 --> 00:42:17,710
thing is plugged into the carrier of

00:42:14,700 --> 00:42:21,280
course the driver for day for the

00:42:17,710 --> 00:42:23,770
carrier has to be loaded and then it

00:42:21,280 --> 00:42:26,710
establishes some communication with the

00:42:23,770 --> 00:42:31,390
carrier board and it identifies the

00:42:26,710 --> 00:42:33,070
carrier and initialize it then the

00:42:31,390 --> 00:42:35,440
identification for the mezzanine and

00:42:33,070 --> 00:42:36,730
possibly some external data are red so

00:42:35,440 --> 00:42:38,830
that we can know exactly what

00:42:36,730 --> 00:42:40,480
application is the one we need what

00:42:38,830 --> 00:42:44,010
application is required for this board

00:42:40,480 --> 00:42:46,720
to perform there will be a set of

00:42:44,010 --> 00:42:48,640
application cord or sorry of application

00:42:46,720 --> 00:42:51,010
bit streams that you can see here

00:42:48,640 --> 00:42:53,890
probably the fine print is not quite

00:42:51,010 --> 00:42:56,140
readable but you can see or you will see

00:42:53,890 --> 00:42:58,360
very soon that among them there are

00:42:56,140 --> 00:43:00,820
different sets of course and only one of

00:42:58,360 --> 00:43:03,100
them matches the application that this

00:43:00,820 --> 00:43:05,440
is intended for this board so the driver

00:43:03,100 --> 00:43:09,220
decides what is the right one and loads

00:43:05,440 --> 00:43:11,560
the framework into the FPGA at this very

00:43:09,220 --> 00:43:13,930
moment inside the FPGA we have

00:43:11,560 --> 00:43:15,640
instantiated the precise cores that are

00:43:13,930 --> 00:43:18,400
needed for the functionality that is

00:43:15,640 --> 00:43:21,870
required for this type of board in our

00:43:18,400 --> 00:43:24,430
particular example we could have an ADC

00:43:21,870 --> 00:43:26,710
application and then those are the

00:43:24,430 --> 00:43:28,900
course that we saw in the completely

00:43:26,710 --> 00:43:36,600
unreadable block diagram that I showed

00:43:28,900 --> 00:43:39,970
before then SD WB kicks in STW b is the

00:43:36,600 --> 00:43:42,310
self-described envision bus that was

00:43:39,970 --> 00:43:43,840
developed by manual Vanga and was very

00:43:42,310 --> 00:43:45,790
well described in one of the lightning

00:43:43,840 --> 00:43:47,800
talks yesterday it's a pity that this

00:43:45,790 --> 00:43:50,440
doesn't come later but that's the way it

00:43:47,800 --> 00:43:52,810
is manoir is she here in the audience is

00:43:50,440 --> 00:43:54,850
there thanks so he's the guy that

00:43:52,810 --> 00:43:56,830
developed this self discovery mechanism

00:43:54,850 --> 00:43:59,080
that allows the driver to discover a

00:43:56,830 --> 00:44:02,560
what course are there where are they

00:43:59,080 --> 00:44:08,220
were they and what do I have to load to

00:44:02,560 --> 00:44:10,710
drive them then it decides sorry decides

00:44:08,220 --> 00:44:12,850
what color mode is hard to be driver

00:44:10,710 --> 00:44:14,520
registers a wishbone bus which is

00:44:12,850 --> 00:44:17,170
completely analogous in the

00:44:14,520 --> 00:44:19,150
self-description mechanism to a pci bus

00:44:17,170 --> 00:44:22,430
for example

00:44:19,150 --> 00:44:25,250
unload the kernel modules the drivers

00:44:22,430 --> 00:44:27,710
that deal with each one of those IP

00:44:25,250 --> 00:44:32,270
cores or probably less but that's an 11

00:44:27,710 --> 00:44:35,390
detail finally the drivers we sorry the

00:44:32,270 --> 00:44:38,180
drivers register each of the devices and

00:44:35,390 --> 00:44:40,580
that's how it boots up so we got a

00:44:38,180 --> 00:44:43,520
mechanism that self describes an

00:44:40,580 --> 00:44:45,650
application within the FPGA and allows

00:44:43,520 --> 00:44:48,970
us to deal with the division bus exactly

00:44:45,650 --> 00:44:51,500
as if it was another pci bus or USB bus

00:44:48,970 --> 00:44:54,260
that's one of the aspects that allows to

00:44:51,500 --> 00:44:56,180
unify these quite heterogeneous family

00:44:54,260 --> 00:44:59,360
of applications that will be supported

00:44:56,180 --> 00:45:01,250
in the fmc set of boards the second

00:44:59,360 --> 00:45:04,280
unifying theme that I would like to talk

00:45:01,250 --> 00:45:06,200
about is the zo framework yesterday

00:45:04,280 --> 00:45:09,050
there was another quite technical talk

00:45:06,200 --> 00:45:12,110
by the authors of this framework and I

00:45:09,050 --> 00:45:13,640
will refer to them later but first of

00:45:12,110 --> 00:45:16,340
all what we need because most of the

00:45:13,640 --> 00:45:19,190
boards we deal with our data acquisition

00:45:16,340 --> 00:45:21,290
way more players etc etc in general

00:45:19,190 --> 00:45:25,670
industrial or other applications for I

00:45:21,290 --> 00:45:29,330
oh sorry this wasn't planned but I hope

00:45:25,670 --> 00:45:31,880
it stands is that Z that your framework

00:45:29,330 --> 00:45:34,610
it's a current framework for digital

00:45:31,880 --> 00:45:35,540
input/output analog input I put in the

00:45:34,610 --> 00:45:38,120
kernel there are currently two

00:45:35,540 --> 00:45:41,060
frameworks one is comedy and the other

00:45:38,120 --> 00:45:43,610
is iio when we study the possibility of

00:45:41,060 --> 00:45:45,890
adopting them comedy seem to have a very

00:45:43,610 --> 00:45:47,960
cumbersome interface and in the case of

00:45:45,890 --> 00:45:51,920
heiio many of the features we need are

00:45:47,960 --> 00:45:55,430
not supported so we decided to develop

00:45:51,920 --> 00:45:57,410
our own and Alexandra Rubin and Federico

00:45:55,430 --> 00:45:59,360
Vega became the main developers of this

00:45:57,410 --> 00:46:01,940
framework this is designed to be

00:45:59,360 --> 00:46:06,350
integrated in the colonel well Alexandra

00:46:01,940 --> 00:46:08,330
Federico are over there too high and you

00:46:06,350 --> 00:46:13,310
can consult all the details under that

00:46:08,330 --> 00:46:15,170
URL okay a zero is based well it's

00:46:13,310 --> 00:46:16,880
designed with many features in mind

00:46:15,170 --> 00:46:19,520
because our requirements are quite

00:46:16,880 --> 00:46:22,430
demanding we have to support digital and

00:46:19,520 --> 00:46:25,520
analog input and output and also for one

00:46:22,430 --> 00:46:27,710
shot on streaming buffered applications

00:46:25,520 --> 00:46:31,580
so it has to support buffer management

00:46:27,710 --> 00:46:32,349
and also timing for time stamping data

00:46:31,580 --> 00:46:34,869
that are being

00:46:32,349 --> 00:46:37,180
quired it has to deal with the issues of

00:46:34,869 --> 00:46:40,210
resolution sampling rate and time

00:46:37,180 --> 00:46:43,599
stamping it has it also has to do with

00:46:40,210 --> 00:46:45,509
calibration offset and gain for each of

00:46:43,599 --> 00:46:48,089
the channels of an input output device

00:46:45,509 --> 00:46:50,859
bit grouping in digital i/o and

00:46:48,089 --> 00:46:54,609
triggering or acquisition or output

00:46:50,859 --> 00:46:57,489
finally not last but not least support

00:46:54,609 --> 00:46:59,259
for dma because this is to be fast we

00:46:57,489 --> 00:47:01,390
can talk of Giga samples per second and

00:46:59,259 --> 00:47:04,690
things like that and potential to

00:47:01,390 --> 00:47:06,910
integrate in the mainstream colonel what

00:47:04,690 --> 00:47:09,400
are the abstractions on with zero is

00:47:06,910 --> 00:47:11,920
based it would seem that it doesn t very

00:47:09,400 --> 00:47:16,239
much from iio but actually it's far more

00:47:11,920 --> 00:47:18,910
ambitious and the concepts look similar

00:47:16,239 --> 00:47:20,950
but well they are not quite the same

00:47:18,910 --> 00:47:22,749
first of all the devices which are the

00:47:20,950 --> 00:47:25,049
victims of our device drivers and

00:47:22,749 --> 00:47:28,239
contain channels for acquisition of date

00:47:25,049 --> 00:47:30,940
second those basic I only units that are

00:47:28,239 --> 00:47:32,920
the channels channel sets that group

00:47:30,940 --> 00:47:34,839
that group channels so that they can be

00:47:32,920 --> 00:47:38,170
buffered together or better trigger

00:47:34,839 --> 00:47:39,609
together of course to accept data we

00:47:38,170 --> 00:47:42,759
need buffers that are quite more

00:47:39,609 --> 00:47:45,999
flexible than in IO and finally triggers

00:47:42,759 --> 00:47:49,779
that unleash the acquisitions or the

00:47:45,999 --> 00:47:52,359
wave front plane we plan to integrate

00:47:49,779 --> 00:47:54,729
this mainstream and also we have all

00:47:52,359 --> 00:48:00,640
those legacy devices that I talked about

00:47:54,729 --> 00:48:03,519
before so our current plans are to

00:48:00,640 --> 00:48:05,680
integrate a fine delay the 100 mega

00:48:03,519 --> 00:48:09,450
sample a DC and the time to digital

00:48:05,680 --> 00:48:11,529
converter very soon at those times and

00:48:09,450 --> 00:48:14,049
certain develop drivers that were

00:48:11,529 --> 00:48:16,089
developed long time ago for devices that

00:48:14,049 --> 00:48:19,390
are old or not at all like the stroke

00:48:16,089 --> 00:48:21,190
sis familiar of a DC converters some

00:48:19,390 --> 00:48:24,579
serial link boards that were developed

00:48:21,190 --> 00:48:26,499
by tues and other another companies and

00:48:24,579 --> 00:48:28,930
now we're taking all taken over by

00:48:26,499 --> 00:48:32,099
General Electric timing receivers White

00:48:28,930 --> 00:48:34,630
Rabbit receivers etc to summarize and

00:48:32,099 --> 00:48:36,640
summarize have your stock and mind I

00:48:34,630 --> 00:48:39,400
would like to say that in the

00:48:36,640 --> 00:48:41,920
accelerator community we have many

00:48:39,400 --> 00:48:45,060
problems of heterogeneity of legacy etc

00:48:41,920 --> 00:48:49,960
etc and they force

00:48:45,060 --> 00:48:51,580
approach is very very official and many

00:48:49,960 --> 00:48:53,410
of the problems we have are shared also

00:48:51,580 --> 00:48:55,780
by the Linux community for example so we

00:48:53,410 --> 00:48:57,760
modeled our developments after that and

00:48:55,780 --> 00:49:01,330
that proved to be proved to be very

00:48:57,760 --> 00:49:04,480
beneficial the approach of having open

00:49:01,330 --> 00:49:07,630
hardware proved to be very good for our

00:49:04,480 --> 00:49:10,180
designs very efficient and actually

00:49:07,630 --> 00:49:12,970
allowed to produce real hardware and

00:49:10,180 --> 00:49:14,859
real applications like for example White

00:49:12,970 --> 00:49:16,780
Rabbit which is a really big project

00:49:14,859 --> 00:49:19,630
that is producing real hard work now and

00:49:16,780 --> 00:49:22,420
produced by companies where what you can

00:49:19,630 --> 00:49:23,500
buy the hard work commercially on the

00:49:22,420 --> 00:49:26,140
software side there is no need to

00:49:23,500 --> 00:49:28,810
justify what we did force is a very well

00:49:26,140 --> 00:49:30,160
proven concept especially when the Linux

00:49:28,810 --> 00:49:32,440
community and the Linux kernel provides

00:49:30,160 --> 00:49:34,720
so many models so that we can model our

00:49:32,440 --> 00:49:37,720
developments in a very easy way like

00:49:34,720 --> 00:49:40,330
that two ways I explained here so that's

00:49:37,720 --> 00:49:44,340
for my talk and have yours and I'm open

00:49:40,330 --> 00:49:44,340
to questions and Javier too thanks

00:49:49,030 --> 00:49:55,690
any questions I off

00:49:59,130 --> 00:50:18,550
that's a mic there yeah yes I was

00:50:15,310 --> 00:50:21,730
interested in there I think it works

00:50:18,550 --> 00:50:23,650
hello hello yeah that wishbone generator

00:50:21,730 --> 00:50:30,369
you're talking about it's that

00:50:23,650 --> 00:50:32,020
integrated with the IPX act now it's a

00:50:30,369 --> 00:50:34,990
it's a simple tool where you just

00:50:32,020 --> 00:50:36,940
specify with a text file the input what

00:50:34,990 --> 00:50:40,420
is so the question was about which one

00:50:36,940 --> 00:50:45,010
generator sorry and you just specify in

00:50:40,420 --> 00:50:47,560
a text file with an easy format what

00:50:45,010 --> 00:50:52,330
your registers memories and five holes

00:50:47,560 --> 00:50:54,130
are and it spits out a very long VHDL h

00:50:52,330 --> 00:50:56,530
and documentation but there's no

00:50:54,130 --> 00:51:00,520
integration with other tools did you

00:50:56,530 --> 00:51:04,359
consider using IP exact no I don't know

00:51:00,520 --> 00:51:07,330
what it is so we can have a chat later

00:51:04,359 --> 00:51:11,050
and could be may be useful but yeah this

00:51:07,330 --> 00:51:15,869
was just to avoid duplication of efforts

00:51:11,050 --> 00:51:15,869
in development of slave which one course

00:51:23,310 --> 00:51:26,460

YouTube URL: https://www.youtube.com/watch?v=BQavy6IO3bQ


