Title: fosdem2012  anders rundgren open security hardware
Publication date: 2013-02-05
Playlist: FOSDEM 2012
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,000 --> 00:00:04,980
I'm not going to summarize a product

00:00:02,250 --> 00:00:06,690
that has been going on on off for four

00:00:04,980 --> 00:00:09,150
and a half year and I'm going to do it

00:00:06,690 --> 00:00:13,380
in 30 minutes that is of course

00:00:09,150 --> 00:00:16,199
completely impossible so you're free to

00:00:13,380 --> 00:00:20,730
harass me with questions and the things

00:00:16,199 --> 00:00:23,460
that have won't be I call it Bernard

00:00:20,730 --> 00:00:25,859
level presentation that means that I

00:00:23,460 --> 00:00:28,580
will try to explain some of the

00:00:25,859 --> 00:00:31,859
technique so techniques used in this

00:00:28,580 --> 00:00:38,520
project and also of course motivation

00:00:31,859 --> 00:00:44,280
and things like that okay we're talking

00:00:38,520 --> 00:00:46,110
about tokens like smart cards and if

00:00:44,280 --> 00:00:48,120
you're going to do something with small

00:00:46,110 --> 00:00:51,059
shorts and particularly as we're going

00:00:48,120 --> 00:00:55,289
to do enrollment that means putting keys

00:00:51,059 --> 00:00:59,460
on all smart cards you have to be a true

00:00:55,289 --> 00:01:03,059
experts in and know a lot of standards

00:00:59,460 --> 00:01:05,189
we have people here in this room that or

00:01:03,059 --> 00:01:08,250
expert on smoke or demean where I think

00:01:05,189 --> 00:01:11,369
more thing is one of this is expert here

00:01:08,250 --> 00:01:14,840
and smart for me to wear anyway this is

00:01:11,369 --> 00:01:17,189
fairly complex and the state of

00:01:14,840 --> 00:01:20,040
standardization is not the best in the

00:01:17,189 --> 00:01:21,250
world Princeton if you buy a smart card

00:01:20,040 --> 00:01:25,390
and then you would

00:01:21,250 --> 00:01:28,510
to connect yourself to Assyria and get

00:01:25,390 --> 00:01:30,430
it involved you run into the presidency

00:01:28,510 --> 00:01:34,000
because the browser vendors haven't

00:01:30,430 --> 00:01:36,720
decided exactly what protocol to use you

00:01:34,000 --> 00:01:39,430
also have military issues you have

00:01:36,720 --> 00:01:42,460
initialization issues like polygons

00:01:39,430 --> 00:01:44,680
deceptive in code that typically not

00:01:42,460 --> 00:01:48,100
something is powered by these protocols

00:01:44,680 --> 00:01:51,640
that's where I snorted some food a half

00:01:48,100 --> 00:01:54,100
year ago doing a new protocol after a

00:01:51,640 --> 00:01:58,240
while I saw that a protocol wouldn't

00:01:54,100 --> 00:02:01,630
really solve the problem so the project

00:01:58,240 --> 00:02:05,050
has grown quite a bit even if you have a

00:02:01,630 --> 00:02:07,450
nice protocol you still have so many

00:02:05,050 --> 00:02:10,149
differences at the middleware or

00:02:07,450 --> 00:02:12,400
hardware level so that the protocol

00:02:10,149 --> 00:02:16,060
would have to be very large and to

00:02:12,400 --> 00:02:19,330
accommodate for those differences so I

00:02:16,060 --> 00:02:22,870
took a more radically radical approach

00:02:19,330 --> 00:02:26,950
to this why not define a hardware level

00:02:22,870 --> 00:02:31,209
as well which is sort of matching the

00:02:26,950 --> 00:02:33,100
protocol one to one that's of course and

00:02:31,209 --> 00:02:35,230
if it's Dukes you could say because that

00:02:33,100 --> 00:02:37,989
means it would be incompatible for

00:02:35,230 --> 00:02:40,660
instance with existing smartphones it's

00:02:37,989 --> 00:02:43,090
incompatible with phones that's true but

00:02:40,660 --> 00:02:45,190
phones is really something you I

00:02:43,090 --> 00:02:49,870
consider the phones that are out there

00:02:45,190 --> 00:02:53,470
today as a sort of a version 1.5 when it

00:02:49,870 --> 00:02:56,170
comes to former security so there is

00:02:53,470 --> 00:02:58,530
still room to actually establish new

00:02:56,170 --> 00:02:58,530
things

00:02:58,750 --> 00:03:07,900
I also pretend it the problem with all

00:03:05,080 --> 00:03:11,080
kinds of standards or efforts in that is

00:03:07,900 --> 00:03:15,209
to reach a critical mass that means it

00:03:11,080 --> 00:03:18,070
must be applicable for many things and

00:03:15,209 --> 00:03:20,530
we all know that pig why is sort of

00:03:18,070 --> 00:03:23,620
that's the powerhouse for two factor

00:03:20,530 --> 00:03:25,870
authentication put it also some people

00:03:23,620 --> 00:03:28,450
who use long time passwords so I felt

00:03:25,870 --> 00:03:31,840
that if you do something it should be

00:03:28,450 --> 00:03:33,940
able to cover that as well Microsoft

00:03:31,840 --> 00:03:36,640
some years ago tried to learn something

00:03:33,940 --> 00:03:39,820
called information cards which is sort

00:03:36,640 --> 00:03:41,350
of an open ID on steroids and I still

00:03:39,820 --> 00:03:43,840
think it's a good thing they have

00:03:41,350 --> 00:03:47,080
shelled it because they didn't make any

00:03:43,840 --> 00:03:49,000
money on information cards this is not

00:03:47,080 --> 00:03:51,580
deal about making money it's creating

00:03:49,000 --> 00:03:56,830
something useful which is not exactly

00:03:51,580 --> 00:04:00,160
the same thing no the thing with with

00:03:56,830 --> 00:04:02,170
Hardware cryptography like smart cards

00:04:00,160 --> 00:04:05,590
is that you know that the key is

00:04:02,170 --> 00:04:07,630
protected with in some way and none of

00:04:05,590 --> 00:04:10,060
the protocols out there that are in

00:04:07,630 --> 00:04:12,100
browsers can preserve that that means

00:04:10,060 --> 00:04:14,350
that the issue cannot see the difference

00:04:12,100 --> 00:04:17,440
between a software generated key or a

00:04:14,350 --> 00:04:19,330
hardware generated key and that sort of

00:04:17,440 --> 00:04:21,760
destroys the whole idea this nor

00:04:19,330 --> 00:04:23,500
thoughts yes the user knows that if the

00:04:21,760 --> 00:04:25,419
key problem is is near North outlet

00:04:23,500 --> 00:04:28,540
issue doesn't know that and the issue a

00:04:25,419 --> 00:04:29,660
tip is your bank your employee aerial

00:04:28,540 --> 00:04:32,060
government for some

00:04:29,660 --> 00:04:34,850
like that and they are those who care

00:04:32,060 --> 00:04:40,730
most about the security and they send

00:04:34,850 --> 00:04:42,530
the policy so what I I I so to revise

00:04:40,730 --> 00:04:44,360
the project somewhere in middle and

00:04:42,530 --> 00:04:48,320
introduce what I call end-to-end

00:04:44,360 --> 00:04:52,670
security mm security means is that it's

00:04:48,320 --> 00:04:54,800
issue that talks to the container then

00:04:52,670 --> 00:04:57,080
there can be spaced in between but that

00:04:54,800 --> 00:04:59,720
should not change the thing it's really

00:04:57,080 --> 00:05:01,550
a connection some kind of virtuous

00:04:59,720 --> 00:05:06,050
channel between the container that

00:05:01,550 --> 00:05:08,150
contains key and an issue for that you

00:05:06,050 --> 00:05:12,200
could for instance start manipulating

00:05:08,150 --> 00:05:14,270
people CS 11 add extension for that I

00:05:12,200 --> 00:05:16,670
feel that okay there were so many

00:05:14,270 --> 00:05:19,070
cryptographic vaporizer if I would do

00:05:16,670 --> 00:05:21,140
the changes in all those I wouldn't get

00:05:19,070 --> 00:05:24,470
anywhere it would take forever and no

00:05:21,140 --> 00:05:27,890
one would agree on anything so i created

00:05:24,470 --> 00:05:31,490
a parallel i play that is only intended

00:05:27,890 --> 00:05:34,580
for position and kept the let's say

00:05:31,490 --> 00:05:36,830
juicer side as it is i don't think i

00:05:34,580 --> 00:05:39,260
have anything innovative to offer on the

00:05:36,830 --> 00:05:40,850
user side because when you authenticate

00:05:39,260 --> 00:05:43,940
what you do well you do something like

00:05:40,850 --> 00:05:45,440
an RSA signature maybe you give a pink

00:05:43,940 --> 00:05:47,570
oh this is very hard to do with

00:05:45,440 --> 00:05:50,450
something else that's essentially what

00:05:47,570 --> 00:05:52,830
you need the provisioning is what i

00:05:50,450 --> 00:05:56,670
would say virgin territory

00:05:52,830 --> 00:06:00,600
debaser know in order to do this end and

00:05:56,670 --> 00:06:02,970
security you need a container and that

00:06:00,600 --> 00:06:04,920
has some special characteristics if

00:06:02,970 --> 00:06:08,100
you're going to do this remotely you are

00:06:04,920 --> 00:06:10,260
not going to produce a smart cards in a

00:06:08,100 --> 00:06:13,740
specific special facility you are going

00:06:10,260 --> 00:06:16,560
to tradition keys remotely maybe two

00:06:13,740 --> 00:06:19,100
phones maybe too smart cards directly by

00:06:16,560 --> 00:06:21,480
end users you must have some way of

00:06:19,100 --> 00:06:24,030
authenticating the container itself

00:06:21,480 --> 00:06:26,610
otherwise you can't say really that I

00:06:24,030 --> 00:06:30,540
provision the key in this container for

00:06:26,610 --> 00:06:34,500
that you need a device certificate and a

00:06:30,540 --> 00:06:37,670
suitable key that can attest that for

00:06:34,500 --> 00:06:40,890
instance this container is made by a

00:06:37,670 --> 00:06:43,770
famous smartphone manufacturer it has a

00:06:40,890 --> 00:06:46,320
serial number then the issue can be sort

00:06:43,770 --> 00:06:48,930
of discriminating if it wants and say we

00:06:46,320 --> 00:06:51,210
only accept containers of that brown or

00:06:48,930 --> 00:06:55,530
it can accept anything marriage anything

00:06:51,210 --> 00:06:57,870
is possible in between there well no I'm

00:06:55,530 --> 00:07:02,270
going to go a little bit deeper down

00:06:57,870 --> 00:07:02,270
into the obvious design

00:07:02,370 --> 00:07:08,430
if you're going to do end-to-end

00:07:04,919 --> 00:07:11,699
security and you're going to do it

00:07:08,430 --> 00:07:14,900
multi-step because if you come to an

00:07:11,699 --> 00:07:18,300
issue of big why it's not just one step

00:07:14,900 --> 00:07:20,880
because you create a key you set a key

00:07:18,300 --> 00:07:23,250
pair you send the public key to a CEO

00:07:20,880 --> 00:07:25,290
you get a certificate back there are

00:07:23,250 --> 00:07:26,760
other things as well that can be a part

00:07:25,290 --> 00:07:29,370
of the process that means it's a

00:07:26,760 --> 00:07:33,840
multi-step process if you're going to do

00:07:29,370 --> 00:07:38,880
a multi-step process efficiently do you

00:07:33,840 --> 00:07:41,039
should use a session for you and this i

00:07:38,880 --> 00:07:44,460
will just describe it with how this

00:07:41,039 --> 00:07:46,620
session key system works a session key

00:07:44,460 --> 00:07:49,010
is a symmetric key and then the

00:07:46,620 --> 00:07:51,570
somatically can be used to do mac

00:07:49,010 --> 00:07:53,310
authentication and encrypt data that is

00:07:51,570 --> 00:07:57,180
sent back and forth between the

00:07:53,310 --> 00:07:59,880
container and the issue and in this

00:07:57,180 --> 00:08:01,770
system you would like the session key to

00:07:59,880 --> 00:08:05,460
have high entropy because that's

00:08:01,770 --> 00:08:07,860
important for in cryptography and you

00:08:05,460 --> 00:08:09,930
would like both part is there are two

00:08:07,860 --> 00:08:12,500
parties involved in this to contribute

00:08:09,930 --> 00:08:16,500
to this entropy as much as possible

00:08:12,500 --> 00:08:20,340
therefore we have ephemeral keys that

00:08:16,500 --> 00:08:24,690
means random keys in both the server and

00:08:20,340 --> 00:08:29,280
with issue m and the client m using an

00:08:24,690 --> 00:08:32,820
elliptic curve difficult man and that's

00:08:29,280 --> 00:08:35,209
a way to create a shared key however

00:08:32,820 --> 00:08:37,519
that's an unauthenticated

00:08:35,209 --> 00:08:39,679
you don't know anything about who has

00:08:37,519 --> 00:08:43,579
done that but do you know that it has

00:08:39,679 --> 00:08:45,529
high it's random and nobody can take a

00:08:43,579 --> 00:08:50,119
still that on way if the keys are

00:08:45,529 --> 00:08:52,819
properly identified but here we have

00:08:50,119 --> 00:08:57,019
this device certificate em the

00:08:52,819 --> 00:09:02,329
attestation key of the container in one

00:08:57,019 --> 00:09:04,300
atomic operation the container reads the

00:09:02,329 --> 00:09:10,790
public key for the diffie-hellman

00:09:04,300 --> 00:09:14,389
creates a cape air signs the public key

00:09:10,790 --> 00:09:17,480
that is heresy and its own generated

00:09:14,389 --> 00:09:20,360
publicly and well a session ID a session

00:09:17,480 --> 00:09:25,360
ID is needed to have some kind of handle

00:09:20,360 --> 00:09:29,449
to the session going on by doing that a

00:09:25,360 --> 00:09:33,110
man-in-the-middle cannot actually change

00:09:29,449 --> 00:09:36,079
anything as long as you you know your

00:09:33,110 --> 00:09:40,069
own public key issue no sir the public

00:09:36,079 --> 00:09:42,889
key and it also of course must trust the

00:09:40,069 --> 00:09:44,860
attestation signature from the container

00:09:42,889 --> 00:09:48,290
otherwise the screen doesn't work

00:09:44,860 --> 00:09:51,610
exactly how you trade is just that you

00:09:48,290 --> 00:09:55,870
can go on at some other time I don't

00:09:51,610 --> 00:09:58,930
into that okay the protocol I'm talking

00:09:55,870 --> 00:10:02,170
about what she until it uses xml is not

00:09:58,930 --> 00:10:04,990
for the interesting but when the service

00:10:02,170 --> 00:10:07,149
ends down a publicly is an ephemeral

00:10:04,990 --> 00:10:10,390
public key it's just a standard XML

00:10:07,149 --> 00:10:13,660
representation of a public key and then

00:10:10,390 --> 00:10:18,459
the thing sent back from the container

00:10:13,660 --> 00:10:21,640
is the containers own public key that is

00:10:18,459 --> 00:10:23,430
created the device certificate and evil

00:10:21,640 --> 00:10:28,329
is important this is the attestation

00:10:23,430 --> 00:10:31,779
signature so which together with the

00:10:28,329 --> 00:10:35,230
device signature is sort of them the

00:10:31,779 --> 00:10:41,829
prove the issue needs to have that it's

00:10:35,230 --> 00:10:45,040
talking to the container an interesting

00:10:41,829 --> 00:10:48,480
thing is the trust model as traditional

00:10:45,040 --> 00:10:52,120
smart thought the issue the issue

00:10:48,480 --> 00:10:54,459
authenticates to the container that's

00:10:52,120 --> 00:10:56,260
not a part of the scheme i'm working

00:10:54,459 --> 00:10:58,540
with because that's not an internet

00:10:56,260 --> 00:11:00,010
model in an intimate model when you have

00:10:58,540 --> 00:11:03,279
a phony phrase that you should be able

00:11:00,010 --> 00:11:06,160
to connect to any issue and move then

00:11:03,279 --> 00:11:09,310
Ruiz then introducing the trust well

00:11:06,160 --> 00:11:11,980
it's you that decide what issues you

00:11:09,310 --> 00:11:16,060
want to go you don't go to your employer

00:11:11,980 --> 00:11:20,680
you are bank or whatever so that part is

00:11:16,060 --> 00:11:23,890
you the trust and the issue trusts

00:11:20,680 --> 00:11:25,030
hopefully the container and I guess you

00:11:23,890 --> 00:11:27,550
as well since

00:11:25,030 --> 00:11:29,470
going to get her key then they

00:11:27,550 --> 00:11:32,650
interesting veneer what does the

00:11:29,470 --> 00:11:34,840
container trust the only the nietzsche

00:11:32,650 --> 00:11:40,630
face creating the provisional session

00:11:34,840 --> 00:11:43,900
the session key it has really that left

00:11:40,630 --> 00:11:47,050
the issue to the user to the side with

00:11:43,900 --> 00:11:50,470
them everything that comes after that is

00:11:47,050 --> 00:11:54,130
bound to this session key is checked so

00:11:50,470 --> 00:11:56,650
that it won't do anything but if it

00:11:54,130 --> 00:11:59,350
doesn't match the session key that was

00:11:56,650 --> 00:12:04,140
agreed that with the trust model that

00:11:59,350 --> 00:12:04,140
means it only trust itself you can say

00:12:05,790 --> 00:12:11,550
now we have an a sort of typical

00:12:08,820 --> 00:12:14,940
scenario here we want to provision a

00:12:11,550 --> 00:12:17,850
couple of keys and we want to assign a

00:12:14,940 --> 00:12:21,420
clean policy to them we also have a pot

00:12:17,850 --> 00:12:23,430
value if you know have an ero the simple

00:12:21,420 --> 00:12:25,530
container that's a very important it is

00:12:23,430 --> 00:12:29,090
going to work the container should be

00:12:25,530 --> 00:12:32,040
being aged me to read xml for instance

00:12:29,090 --> 00:12:34,790
very few people graphical air contains

00:12:32,040 --> 00:12:38,490
of that and it shouldn't have to do

00:12:34,790 --> 00:12:40,140
networking it should be as existing

00:12:38,490 --> 00:12:44,850
cryptographic containers pretty

00:12:40,140 --> 00:12:47,910
primitive and here we have something

00:12:44,850 --> 00:12:51,390
that basic it requires four different

00:12:47,910 --> 00:12:53,610
objects if you do that on a network you

00:12:51,390 --> 00:12:55,890
would typically create an object sender

00:12:53,610 --> 00:12:59,100
single create an object and then you

00:12:55,890 --> 00:13:01,140
would get the handle back and if you're

00:12:59,100 --> 00:13:03,870
going to leave that to another object

00:13:01,140 --> 00:13:05,790
here we have a pin policy of it

00:13:03,870 --> 00:13:08,760
obviously is connected to this pot

00:13:05,790 --> 00:13:12,540
policy of it then you have to give that

00:13:08,760 --> 00:13:15,540
handles input send the crate and then

00:13:12,540 --> 00:13:18,210
get a new handle back and you would have

00:13:15,540 --> 00:13:21,450
to do the same for these key objects

00:13:18,210 --> 00:13:24,860
that means you have one network round

00:13:21,450 --> 00:13:27,510
trip for each object that's very

00:13:24,860 --> 00:13:32,360
inefficient

00:13:27,510 --> 00:13:38,340
I hope I'm not talking much too hastily

00:13:32,360 --> 00:13:40,740
checking time yet now this is probably

00:13:38,340 --> 00:13:43,560
the most complex part of this system

00:13:40,740 --> 00:13:46,740
that is also in my opinion most

00:13:43,560 --> 00:13:50,880
interesting how this actually work with

00:13:46,740 --> 00:13:53,280
these objects we have a proxy that's a

00:13:50,880 --> 00:13:55,170
requirement the proxy does what i call

00:13:53,280 --> 00:13:58,080
the heavy lifting that means it doesn't

00:13:55,170 --> 00:14:00,060
networking I cryptographic contain the

00:13:58,080 --> 00:14:03,450
dozens of network in normal it just have

00:14:00,060 --> 00:14:07,470
a simple enjoy that encode it also does

00:14:03,450 --> 00:14:10,530
XML processing that I could of course

00:14:07,470 --> 00:14:13,200
has selected a binary protocol but I

00:14:10,530 --> 00:14:15,060
felt that it was not so nice and then

00:14:13,200 --> 00:14:19,530
the interesting thing is content

00:14:15,060 --> 00:14:22,880
aggregation and object link that means

00:14:19,530 --> 00:14:30,770
that you can do more efficient things so

00:14:22,880 --> 00:14:37,280
the thing I showed on this page actually

00:14:30,770 --> 00:14:40,860
translates into for specific API OS

00:14:37,280 --> 00:14:44,930
which first is a great apart and we

00:14:40,860 --> 00:14:48,480
create a pin and then pray to a kiss and

00:14:44,930 --> 00:14:55,230
they can be aggregated I mean collected

00:14:48,480 --> 00:14:58,160
as one unit and then the return is just

00:14:55,230 --> 00:15:00,829
one object that means one network

00:14:58,160 --> 00:15:08,629
boundary and still it is won't work in

00:15:00,829 --> 00:15:11,569
security always this working I will now

00:15:08,629 --> 00:15:15,589
try to the most competent anything

00:15:11,569 --> 00:15:19,430
explain all the XML actually is

00:15:15,589 --> 00:15:23,930
converted into a very low-level API and

00:15:19,430 --> 00:15:28,670
that it still is a wonder and then

00:15:23,930 --> 00:15:31,009
security protocol this is XML needed to

00:15:28,670 --> 00:15:34,420
create this structure with a puppy that

00:15:31,009 --> 00:15:38,810
o is a thin object which in turn of a

00:15:34,420 --> 00:15:44,079
home's two keys so this is a sequence

00:15:38,810 --> 00:15:47,660
for creating this structure in the token

00:15:44,079 --> 00:15:52,639
for that the session key is involved

00:15:47,660 --> 00:15:56,629
each XML fragment here represents a

00:15:52,639 --> 00:16:00,769
specific low-level operation this one is

00:15:56,629 --> 00:16:05,060
called great key entry and in order to

00:16:00,769 --> 00:16:09,889
make sure that we're still on track the

00:16:05,060 --> 00:16:12,949
session key is node with the name of

00:16:09,889 --> 00:16:16,009
action API a sequence concert the

00:16:12,949 --> 00:16:20,779
sequence counter is something which is

00:16:16,009 --> 00:16:23,029
incremented for each low-level chord the

00:16:20,779 --> 00:16:25,899
point with that is that if for instance

00:16:23,029 --> 00:16:29,089
this proxy is doing something wrong

00:16:25,899 --> 00:16:31,759
maybe it's completely corrupted so it

00:16:29,089 --> 00:16:35,089
forgets one of the fragments or tries to

00:16:31,759 --> 00:16:38,569
insert something with shane's order this

00:16:35,089 --> 00:16:43,220
match will not match because that is

00:16:38,569 --> 00:16:47,010
read by the container so here you have

00:16:43,220 --> 00:16:49,110
the session key the API name

00:16:47,010 --> 00:16:53,610
sequence counter and then all the

00:16:49,110 --> 00:16:58,890
parameters that the issue have asked for

00:16:53,610 --> 00:17:01,920
or Mac and this is checked when the

00:16:58,890 --> 00:17:05,130
container is called the interesting

00:17:01,920 --> 00:17:08,730
thing here is how the linking is working

00:17:05,130 --> 00:17:11,880
if you remember the picture the boss i

00:17:08,730 --> 00:17:15,540
Heidi arrow from the key to the pin

00:17:11,880 --> 00:17:19,320
policy object but you don't see any

00:17:15,540 --> 00:17:22,860
arrows here because this system is the

00:17:19,320 --> 00:17:25,020
XML level is using a objectin bedding

00:17:22,860 --> 00:17:29,160
that means here you have an Impala

00:17:25,020 --> 00:17:31,710
object it embeds to kill objects that's

00:17:29,160 --> 00:17:34,610
an indirect way saying but they are

00:17:31,710 --> 00:17:39,390
owned by this object which in turn is

00:17:34,610 --> 00:17:44,010
embedded by a poke policy object how is

00:17:39,390 --> 00:17:50,690
this linky perform well here we have the

00:17:44,010 --> 00:17:50,690
name which is matched and no

00:17:51,559 --> 00:18:00,950
how it actually works when you create an

00:17:55,159 --> 00:18:03,620
object locally you use low-level handles

00:18:00,950 --> 00:18:06,559
but you never send them on the wire

00:18:03,620 --> 00:18:10,549
because that would be stupid when you

00:18:06,559 --> 00:18:14,480
create a pin you get a handle and that

00:18:10,549 --> 00:18:19,399
handle is used as input to in this case

00:18:14,480 --> 00:18:26,029
the crate key entry and then decree key

00:18:19,399 --> 00:18:28,220
entry a API checks that it this handle

00:18:26,029 --> 00:18:30,499
actually points14 volleys of it

00:18:28,220 --> 00:18:34,549
otherwise the sort of a syntax error and

00:18:30,499 --> 00:18:37,090
it takes the idea that is associated

00:18:34,549 --> 00:18:42,019
with this already created object and

00:18:37,090 --> 00:18:44,480
does the mac operation so if not if

00:18:42,019 --> 00:18:49,399
anything is wrong here that's a wrong

00:18:44,480 --> 00:18:51,980
type to Mac doesn't matches it will just

00:18:49,399 --> 00:18:55,340
abort the entire session and go back to

00:18:51,980 --> 00:18:59,509
square one that is whole end-to-end

00:18:55,340 --> 00:19:02,389
security is working and this is I call

00:18:59,509 --> 00:19:06,499
that then object activation and object

00:19:02,389 --> 00:19:11,379
linking so here you can see some

00:19:06,499 --> 00:19:11,379
extracts of his provisioning API

00:19:15,179 --> 00:19:21,250
okay all strategic patience go back to

00:19:19,539 --> 00:19:25,150
one

00:19:21,250 --> 00:19:28,600
when you have created the keys you must

00:19:25,150 --> 00:19:30,730
you have the public keys which won't

00:19:28,600 --> 00:19:35,260
have certificates work and you send them

00:19:30,730 --> 00:19:38,140
to this year and do add an attestation

00:19:35,260 --> 00:19:40,780
the things that comes from the container

00:19:38,140 --> 00:19:43,750
is called a tests so you have an

00:19:40,780 --> 00:19:45,910
attestation that uses and the right

00:19:43,750 --> 00:19:48,760
version of the session key is not used

00:19:45,910 --> 00:19:52,120
all the time and the session counter as

00:19:48,760 --> 00:19:54,420
well and it it then doesn't my

00:19:52,120 --> 00:19:57,940
cooperation with the name of the key and

00:19:54,420 --> 00:20:00,630
the public key if we have the name and

00:19:57,940 --> 00:20:04,540
here we have an action public key value

00:20:00,630 --> 00:20:07,090
so that issue can verify that it got

00:20:04,540 --> 00:20:09,460
first must verify that it got the number

00:20:07,090 --> 00:20:12,460
of public image requested that they have

00:20:09,460 --> 00:20:15,780
the name and then it can be verified

00:20:12,460 --> 00:20:19,630
that at the station which is a Mac

00:20:15,780 --> 00:20:22,000
actually his great so this now we have

00:20:19,630 --> 00:20:24,490
done two step first it was the issue

00:20:22,000 --> 00:20:29,230
that also from keys to be created and

00:20:24,490 --> 00:20:32,770
now as a response we get to a tested

00:20:29,230 --> 00:20:35,200
public keys that means that sort of a

00:20:32,770 --> 00:20:38,560
lot of traditional stuff like to for

00:20:35,200 --> 00:20:41,380
possession it doesn't really is not

00:20:38,560 --> 00:20:45,370
needed here assuming that the trust the

00:20:41,380 --> 00:20:47,860
container and the hose ID with session

00:20:45,370 --> 00:20:50,560
Keys and at the station is better

00:20:47,860 --> 00:20:53,560
because it says well like i made this

00:20:50,560 --> 00:20:56,570
case that's what it says so you don't

00:20:53,560 --> 00:21:00,980
have to the web try to kill your prey

00:20:56,570 --> 00:21:06,269
add anything as long as you trust the

00:21:00,980 --> 00:21:10,979
container so

00:21:06,269 --> 00:21:14,279
and then the last step is that you get

00:21:10,979 --> 00:21:17,849
the actual certificates and the

00:21:14,279 --> 00:21:20,820
certificates in the sort of traditional

00:21:17,849 --> 00:21:23,519
way see you just fit the certificates to

00:21:20,820 --> 00:21:25,769
the matching publication that would

00:21:23,519 --> 00:21:27,959
break the end-to-end security scheme

00:21:25,769 --> 00:21:30,359
it's very important that everything is

00:21:27,959 --> 00:21:33,450
kept in one session because if there is

00:21:30,359 --> 00:21:37,379
something wrong here the idea is to do a

00:21:33,450 --> 00:21:39,570
full rollback so only if you succeed

00:21:37,379 --> 00:21:41,909
with all operations you should have done

00:21:39,570 --> 00:21:45,329
something in containing otherwise it

00:21:41,909 --> 00:21:47,940
should go back to its original state and

00:21:45,329 --> 00:21:49,829
that is for instance the situation where

00:21:47,940 --> 00:21:52,529
you have when you get a new credit card

00:21:49,829 --> 00:21:55,169
you suppose to cut the old one and put

00:21:52,529 --> 00:21:57,599
the new one in the wallet do you do it

00:21:55,169 --> 00:21:59,609
virtually and either you succeed with

00:21:57,599 --> 00:22:01,519
that operation to get a new credit card

00:21:59,609 --> 00:22:04,499
or you still have your own credit card

00:22:01,519 --> 00:22:11,519
left which may be important so you know

00:22:04,499 --> 00:22:16,589
there this also it is yes so the Mac

00:22:11,519 --> 00:22:20,820
here is a s then gone over the

00:22:16,589 --> 00:22:24,629
certificates and over the key and the

00:22:20,820 --> 00:22:27,690
public key that is supposed to match so

00:22:24,629 --> 00:22:31,469
that the certificates not accepted

00:22:27,690 --> 00:22:34,379
without only a math test then you can

00:22:31,469 --> 00:22:36,809
see that there is a it says finalization

00:22:34,379 --> 00:22:39,209
request we are not done you must have

00:22:36,809 --> 00:22:42,679
some way of saying no I'm ready I

00:22:39,209 --> 00:22:46,860
provision all that the piece I wanted so

00:22:42,679 --> 00:22:49,530
the last thing you do is close

00:22:46,860 --> 00:22:54,049
the hand that you always use a low level

00:22:49,530 --> 00:22:58,440
hand that's done by the middleware and

00:22:54,049 --> 00:23:02,690
it's like as well that means that the

00:22:58,440 --> 00:23:05,970
loss no I'm ready is also has a mac and

00:23:02,690 --> 00:23:09,150
if it's successful it generates a

00:23:05,970 --> 00:23:11,040
receipt which is a sin to the issue so

00:23:09,150 --> 00:23:14,040
that the issue action gets a receipt

00:23:11,040 --> 00:23:15,870
well the provision is succeeded if there

00:23:14,040 --> 00:23:18,030
is something failed something fails

00:23:15,870 --> 00:23:21,030
ready to the issue won't get anything

00:23:18,030 --> 00:23:22,860
look that the sort of a quality control

00:23:21,030 --> 00:23:28,230
let's draw the interest in here it will

00:23:22,860 --> 00:23:30,809
have sort of a only nine out of ten of

00:23:28,230 --> 00:23:33,000
requests actually generates a receipt

00:23:30,809 --> 00:23:35,549
you probably have a quality problem

00:23:33,000 --> 00:23:38,040
somewhere and be anything it can be a

00:23:35,549 --> 00:23:43,470
software problem word user don't

00:23:38,040 --> 00:23:45,660
understand the process or whatever what

00:23:43,470 --> 00:23:48,650
if the receipt gets lost if the

00:23:45,660 --> 00:23:51,510
recipient of that says situation where

00:23:48,650 --> 00:23:54,720
the issue don't know if the process has

00:23:51,510 --> 00:23:58,350
worked and of course there are no

00:23:54,720 --> 00:24:01,650
fantastic thing you can do i would say

00:23:58,350 --> 00:24:04,890
that an issue should considered a old

00:24:01,650 --> 00:24:09,750
credentials as invalid until it has

00:24:04,890 --> 00:24:12,750
received a successful receipt that is a

00:24:09,750 --> 00:24:14,929
strategy but this is a very valid

00:24:12,750 --> 00:24:14,929
question

00:24:17,280 --> 00:24:27,210
okay since I said that some people like

00:24:21,720 --> 00:24:32,850
one time password you must have that as

00:24:27,210 --> 00:24:35,790
well and here is an example this also

00:24:32,850 --> 00:24:40,770
uses a project embedding that means that

00:24:35,790 --> 00:24:43,590
do hang things on the certificate in

00:24:40,770 --> 00:24:48,030
fact the certificate or the key entry

00:24:43,590 --> 00:24:50,390
holds all stuff even symmetric keys that

00:24:48,030 --> 00:24:52,440
sounds probably very strange that a

00:24:50,390 --> 00:24:55,680
symmetric key would have a certificate

00:24:52,440 --> 00:24:59,040
that has to do with that I didn't want

00:24:55,680 --> 00:25:02,010
to add do a specific API for symmetric

00:24:59,040 --> 00:25:04,350
key that would be favorite when I had

00:25:02,010 --> 00:25:06,810
everything else running and they're also

00:25:04,350 --> 00:25:11,790
key management operations that means

00:25:06,810 --> 00:25:14,490
that we have 11 way of giving kids a

00:25:11,790 --> 00:25:17,130
name yes it is particularly that works

00:25:14,490 --> 00:25:19,190
for anything it even works for symmetric

00:25:17,130 --> 00:25:21,570
case and then you get a very high

00:25:19,190 --> 00:25:24,180
symmetry and that's important because

00:25:21,570 --> 00:25:26,160
you want to contain it is want to talk

00:25:24,180 --> 00:25:28,140
about everything to be as simple as

00:25:26,160 --> 00:25:32,310
technical portion I haven't tried to

00:25:28,140 --> 00:25:34,380
sort of to do a special I to know you

00:25:32,310 --> 00:25:38,160
will trade let's say a key pair

00:25:34,380 --> 00:25:40,920
symmetric key estimating deeper but the

00:25:38,160 --> 00:25:44,670
private key will never be you so what it

00:25:40,920 --> 00:25:47,970
doesn't matter anyway we have symmetric

00:25:44,670 --> 00:25:50,790
keys that you have properties a lot of

00:25:47,970 --> 00:25:53,890
things like one time password but also

00:25:50,790 --> 00:25:56,500
VPN connections need properties

00:25:53,890 --> 00:25:59,290
you can have arbitrary properties in

00:25:56,500 --> 00:26:04,930
associated with keys let's go check the

00:25:59,290 --> 00:26:08,710
time on your good m and to make things a

00:26:04,930 --> 00:26:11,950
little bit more user-friendly there are

00:26:08,710 --> 00:26:16,570
logotypes as well that is a hope that

00:26:11,950 --> 00:26:19,180
they will be better a TLS you ice where

00:26:16,570 --> 00:26:21,070
you will see things like a credit card

00:26:19,180 --> 00:26:23,830
or something like that rather than the

00:26:21,070 --> 00:26:26,830
ugly c and e equals blah blah blah that

00:26:23,830 --> 00:26:29,340
doesn't say too much too deep and accept

00:26:26,830 --> 00:26:32,230
also possibly know everything about

00:26:29,340 --> 00:26:39,300
certificate attributes and not what you

00:26:32,230 --> 00:26:39,300
read them but not everyone else does yes

00:26:41,570 --> 00:26:47,480
yeah okay this seminar was called open

00:26:45,350 --> 00:26:51,950
security hardware and you haven't seen

00:26:47,480 --> 00:26:57,110
much of that and the whole bar doesn't

00:26:51,950 --> 00:27:03,320
exist yet what does exist is a mule an

00:26:57,110 --> 00:27:05,720
emulator a specification JUnit tests a

00:27:03,320 --> 00:27:08,480
lot of things the next step is

00:27:05,720 --> 00:27:10,310
converting is into oakland city with the

00:27:08,480 --> 00:27:14,690
harbor there will be a guy actually

00:27:10,310 --> 00:27:18,170
presenting a token which is very similar

00:27:14,690 --> 00:27:21,290
to what will be needed I think it was

00:27:18,170 --> 00:27:24,200
fifteen hundreds a day the glute token

00:27:21,290 --> 00:27:28,820
and that's it well very close to what i

00:27:24,200 --> 00:27:31,220
am trying to accomplish I think that the

00:27:28,820 --> 00:27:34,100
group token could actually implement the

00:27:31,220 --> 00:27:36,470
sks API event will be possible it's a

00:27:34,100 --> 00:27:38,950
little bit maybe you need click with

00:27:36,470 --> 00:27:38,950
more memory

00:27:39,429 --> 00:27:45,470
because the idea is creating a reference

00:27:43,120 --> 00:27:48,799
implementation that the great benders of

00:27:45,470 --> 00:27:52,549
smart cars can use as much as I want one

00:27:48,799 --> 00:27:59,779
of the outcomes of course which I sort

00:27:52,549 --> 00:28:04,309
of started with this this one is the SPS

00:27:59,779 --> 00:28:07,669
API would require a single rival because

00:28:04,309 --> 00:28:10,399
it's so pitch it's not very flexible it

00:28:07,669 --> 00:28:13,750
does this and nothing more so the idea

00:28:10,399 --> 00:28:15,950
was that instead of you having

00:28:13,750 --> 00:28:17,899
qualifying different software for

00:28:15,950 --> 00:28:21,019
different hardware the hardware vendors

00:28:17,899 --> 00:28:25,070
would rather qualify against a software

00:28:21,019 --> 00:28:28,730
package that implements SPS a guy is

00:28:25,070 --> 00:28:30,889
sort of turning things upside down if

00:28:28,730 --> 00:28:33,919
that will work or not that depends of

00:28:30,889 --> 00:28:38,210
course called successfully would be and

00:28:33,919 --> 00:28:42,049
that's why I try to make make it as

00:28:38,210 --> 00:28:45,250
generic as possible security hardware in

00:28:42,049 --> 00:28:48,769
devices or is coming in a big way and

00:28:45,250 --> 00:28:52,010
the standards are not yet established so

00:28:48,769 --> 00:28:54,020
there is room for doing something and I

00:28:52,010 --> 00:28:56,840
don't see a point of having

00:28:54,020 --> 00:29:01,480
lots of new enrollment for Coulson that

00:28:56,840 --> 00:29:07,330
our proprietary to the very expensive

00:29:01,480 --> 00:29:11,300
that is essentially my present

00:29:07,330 --> 00:29:15,580
lot of things yes yes I can take one

00:29:11,300 --> 00:29:19,010
thing and one of the early reviewers

00:29:15,580 --> 00:29:22,100
wondered why i didn't use TLS because

00:29:19,010 --> 00:29:24,650
this scheme with session key is very

00:29:22,100 --> 00:29:26,720
much like TLS which is based on that the

00:29:24,650 --> 00:29:30,260
first played a session key and then you

00:29:26,720 --> 00:29:32,330
do everything in using that thing where

00:29:30,260 --> 00:29:35,720
there are two keys actually and you use

00:29:32,330 --> 00:29:37,910
your only max as well but why do they

00:29:35,720 --> 00:29:40,940
didn't I us pls which is sort of

00:29:37,910 --> 00:29:43,250
established and that is because let's

00:29:40,940 --> 00:29:46,010
say that you wanted the issue to say

00:29:43,250 --> 00:29:49,850
well create Mickey and let the user

00:29:46,010 --> 00:29:52,970
setup in according to this policy how is

00:29:49,850 --> 00:29:55,730
use going to interact if you have a TLS

00:29:52,970 --> 00:29:57,620
tunnel between the container and the

00:29:55,730 --> 00:29:59,900
issue there is no way you can break into

00:29:57,620 --> 00:30:02,390
that then you will add a side channel

00:29:59,900 --> 00:30:04,330
and that sounds like a horrible idea to

00:30:02,390 --> 00:30:06,890
add in another channel between do I

00:30:04,330 --> 00:30:08,960
operations and that's just one of the

00:30:06,890 --> 00:30:11,960
many things then we have this xml stuff

00:30:08,960 --> 00:30:14,780
that you want to have a fairly that

00:30:11,960 --> 00:30:17,360
program that does the xml processing and

00:30:14,780 --> 00:30:20,590
keep the container if you don't you

00:30:17,360 --> 00:30:22,740
understand simple binary choice and that

00:30:20,590 --> 00:30:26,070
doesn't work if you have

00:30:22,740 --> 00:30:27,630
a complete and friend securement without

00:30:26,070 --> 00:30:30,410
the proxy because then the container

00:30:27,630 --> 00:30:34,710
would need to read xml and understand

00:30:30,410 --> 00:30:37,830
complex structure like this embedded in

00:30:34,710 --> 00:30:41,340
objects that would be a very complex

00:30:37,830 --> 00:30:44,670
their container and it would be no

00:30:41,340 --> 00:30:49,320
better than this one i will save the

00:30:44,670 --> 00:30:51,520
opposite okay I think I'm done and if

00:30:49,320 --> 00:30:53,770
you're interested

00:30:51,520 --> 00:30:57,310
today do you have the time client

00:30:53,770 --> 00:31:00,850
already yes the third point is this one

00:30:57,310 --> 00:31:08,140
I don't have the things contained in

00:31:00,850 --> 00:31:12,540
order yes you know any other efforts to

00:31:08,140 --> 00:31:15,610
make this key at the station yes I've

00:31:12,540 --> 00:31:18,910
more of the beach from the TPM we work

00:31:15,610 --> 00:31:20,970
from PCB and it's also similar to global

00:31:18,910 --> 00:31:24,520
climate warm as well they have something

00:31:20,970 --> 00:31:27,520
and what global typhoon have not gone

00:31:24,520 --> 00:31:31,000
the bull away and they created the

00:31:27,520 --> 00:31:33,520
protocols and webs and they are talking

00:31:31,000 --> 00:31:39,750
about they haven't gone yesterday effect

00:31:33,520 --> 00:31:42,370
and of time and so the only to manage

00:31:39,750 --> 00:31:45,690
but typically competition and we're

00:31:42,370 --> 00:31:45,690
about your shaman

00:31:46,930 --> 00:31:50,370
so turn again soon this

00:31:51,919 --> 00:31:54,919

YouTube URL: https://www.youtube.com/watch?v=VVW6b7QrXMw


