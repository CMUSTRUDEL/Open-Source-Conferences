Title: EFL
Publication date: 2013-02-05
Playlist: FOSDEM 2012
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:13,440 --> 00:00:17,010
with the video of people

00:00:17,960 --> 00:00:20,960
ok

00:00:35,310 --> 00:00:47,770
all right hello everyone thank you very

00:00:43,750 --> 00:00:50,290
much um first I'd like to say thank you

00:00:47,770 --> 00:00:55,300
everyone for turning up it's much better

00:00:50,290 --> 00:00:58,409
than empty auditorium secondly I have a

00:00:55,300 --> 00:01:01,449
really bad habit of speaking quickly

00:00:58,409 --> 00:01:03,790
i'll happily go through all my slides in

00:01:01,449 --> 00:01:08,140
about 16 seconds if you don't slow me

00:01:03,790 --> 00:01:09,640
down um so if I'm going too fast someone

00:01:08,140 --> 00:01:12,760
just wave your hand in the air and go

00:01:09,640 --> 00:01:17,430
slow down I will try and remember to go

00:01:12,760 --> 00:01:20,440
more slowly if you have any questions

00:01:17,430 --> 00:01:22,030
during the presentation it's actually

00:01:20,440 --> 00:01:23,920
probably better that you asked the

00:01:22,030 --> 00:01:27,009
question at that time otherwise you'll

00:01:23,920 --> 00:01:28,420
forget it by the end or something if I

00:01:27,009 --> 00:01:29,710
have an answer for your question i'll

00:01:28,420 --> 00:01:32,380
tell you the answers coming in a few

00:01:29,710 --> 00:01:34,180
slides so just if you have a question

00:01:32,380 --> 00:01:38,229
put your hand in the air and wave it

00:01:34,180 --> 00:01:40,079
around and get my attention oh yeah up

00:01:38,229 --> 00:01:42,520
actually I'll just repeat the questions

00:01:40,079 --> 00:01:47,350
yeah so if you ask question I'll repeat

00:01:42,520 --> 00:01:52,359
it so the recordings get it so anyway um

00:01:47,350 --> 00:01:56,950
how many of you are new to linux or open

00:01:52,359 --> 00:01:59,680
source this is a new thing hands up wow

00:01:56,950 --> 00:02:01,570
you're all old time open source Linux

00:01:59,680 --> 00:02:04,799
see people now you should all be how she

00:02:01,570 --> 00:02:07,689
will have beards by now shouldn't you um

00:02:04,799 --> 00:02:09,250
there's some of you do it's lisa lee ann

00:02:07,689 --> 00:02:14,080
egner down to the neck that's what you'd

00:02:09,250 --> 00:02:15,930
be it should go um anyway um I'm just

00:02:14,080 --> 00:02:19,150
filling in time letting people come in

00:02:15,930 --> 00:02:24,280
so but I should actually start about now

00:02:19,150 --> 00:02:29,890
um okay who here has not heard of efl or

00:02:24,280 --> 00:02:31,959
enlightenment new okay so about one

00:02:29,890 --> 00:02:33,710
percent okay some very small percentage

00:02:31,959 --> 00:02:38,860
of you don't know what it is

00:02:33,710 --> 00:02:45,430
um who here does not have a mobile phone

00:02:38,860 --> 00:02:47,960
Wow who here does not have a smartphone

00:02:45,430 --> 00:02:52,370
okay all right that's actually a fair

00:02:47,960 --> 00:02:54,560
number um I'll keep that in mind for the

00:02:52,370 --> 00:02:58,130
next few minutes anyway um I'm here to

00:02:54,560 --> 00:03:00,470
talk about efl efl is the set of

00:02:58,130 --> 00:03:02,900
libraries that are behind enlightenment

00:03:00,470 --> 00:03:04,520
a lot of people go why do you guys don't

00:03:02,900 --> 00:03:07,640
release a new version of enlightenment

00:03:04,520 --> 00:03:09,560
well we had this thing where we got

00:03:07,640 --> 00:03:12,010
distracted into writing tool kits

00:03:09,560 --> 00:03:14,990
instead of writing window managers so

00:03:12,010 --> 00:03:17,720
I'll get into that a bit later but efl

00:03:14,990 --> 00:03:19,040
is the toolkit behind enlightenment and

00:03:17,720 --> 00:03:21,950
we working on it for quite a while now

00:03:19,040 --> 00:03:24,680
so let me launch into that anyway um

00:03:21,950 --> 00:03:26,750
before I launch into that the last time

00:03:24,680 --> 00:03:28,250
I was at fuzzed in here was made about

00:03:26,750 --> 00:03:29,600
10 years ago at the very first Falls

00:03:28,250 --> 00:03:30,800
demand I'm actually very very happy to

00:03:29,600 --> 00:03:34,690
be back haven't been back tomorrow so

00:03:30,800 --> 00:03:38,180
thank you very much for having me I

00:03:34,690 --> 00:03:39,830
these days hang out at a company a small

00:03:38,180 --> 00:03:42,830
company some of you may have heard of

00:03:39,830 --> 00:03:45,980
before it's called Samsung they they

00:03:42,830 --> 00:03:47,690
make these little things like phones and

00:03:45,980 --> 00:03:51,470
televisions that like one or two people

00:03:47,690 --> 00:03:54,770
use and one of the things they use now

00:03:51,470 --> 00:03:57,530
is efl so I'm there to help out and

00:03:54,770 --> 00:03:59,890
create lots of trouble if you have any

00:03:57,530 --> 00:04:03,890
questions about that go ahead and ask

00:03:59,890 --> 00:04:06,950
anyway what is e FL for those who don't

00:04:03,890 --> 00:04:08,360
know um it's a bunch of libraries it's

00:04:06,950 --> 00:04:10,610
not just one library in fact that's

00:04:08,360 --> 00:04:12,470
actually a bit of a marketing mistake on

00:04:10,610 --> 00:04:14,960
our part the fact that we have so many

00:04:12,470 --> 00:04:18,799
libraries confuses people so we end up

00:04:14,960 --> 00:04:21,530
calling them efl arm they are done by

00:04:18,799 --> 00:04:23,810
the same group of people um some of

00:04:21,530 --> 00:04:25,340
those people to blame for efl are

00:04:23,810 --> 00:04:27,560
sitting right there and that little

00:04:25,340 --> 00:04:30,500
group there so if you want to blame them

00:04:27,560 --> 00:04:32,420
for something just throw like rotten

00:04:30,500 --> 00:04:34,190
tomatoes and stuff about down there I'll

00:04:32,420 --> 00:04:37,370
get out of the way so you don't have to

00:04:34,190 --> 00:04:40,760
hit me so there there's several sitting

00:04:37,370 --> 00:04:42,590
here arm they were built for the purpose

00:04:40,760 --> 00:04:46,760
of working on the next version of

00:04:42,590 --> 00:04:47,580
enlightenment I e17 and in the process

00:04:46,760 --> 00:04:49,620
we got on for

00:04:47,580 --> 00:04:52,229
a bit distracted and just started liking

00:04:49,620 --> 00:04:54,090
more and more and more libraries may

00:04:52,229 --> 00:04:56,340
grew and grew and the window manager

00:04:54,090 --> 00:04:57,810
kind of took a backseat to writing lab

00:04:56,340 --> 00:05:00,330
it's actually a bit what happened to gtk

00:04:57,810 --> 00:05:05,099
and at some point but it's split

00:05:00,330 --> 00:05:08,639
we're still the same group one of the

00:05:05,099 --> 00:05:11,340
things that we focused on that was very

00:05:08,639 --> 00:05:13,379
very interesting was to make a set of

00:05:11,340 --> 00:05:17,250
libraries that were small and efficient

00:05:13,379 --> 00:05:22,319
and lean way way back when dinosaurs

00:05:17,250 --> 00:05:24,659
roamed the earth and I I was still

00:05:22,319 --> 00:05:27,629
working for a Silicon Valley startup at

00:05:24,659 --> 00:05:31,139
the time um you know com boom that thing

00:05:27,629 --> 00:05:33,479
I realized that the future of Linux

00:05:31,139 --> 00:05:36,419
despite the fact that every year for the

00:05:33,479 --> 00:05:39,449
last decade or almost 2 has been

00:05:36,419 --> 00:05:41,490
declared year of the Linux desktop has

00:05:39,449 --> 00:05:43,889
not happened the yearlings desktop

00:05:41,490 --> 00:05:46,919
happen and I realized that the desktop

00:05:43,889 --> 00:05:48,539
wasn't going to happen um because it was

00:05:46,919 --> 00:05:52,770
really a niche market the place where

00:05:48,539 --> 00:05:54,870
Linux is strong and has strengths is in

00:05:52,770 --> 00:05:56,909
embedded so as of that very day I was

00:05:54,870 --> 00:05:58,680
very interested in embedded that things

00:05:56,909 --> 00:06:00,150
had to be small lean and mean so they

00:05:58,680 --> 00:06:02,550
could run on these tiny little arm

00:06:00,150 --> 00:06:05,250
devices and whatever else you had and so

00:06:02,550 --> 00:06:08,599
that's why being small and efficient is

00:06:05,250 --> 00:06:12,539
very important to FL so we can do that

00:06:08,599 --> 00:06:14,940
and unfortunately we also got distracted

00:06:12,539 --> 00:06:17,969
into just working on efl literally arm

00:06:14,940 --> 00:06:20,219
the vast majority of our code in sv amy

00:06:17,969 --> 00:06:24,330
is actually efl only a tiny little bit

00:06:20,219 --> 00:06:27,539
is the window manager these days and of

00:06:24,330 --> 00:06:29,370
course in trying to make a whole window

00:06:27,539 --> 00:06:32,129
manager and all its configuration tools

00:06:29,370 --> 00:06:33,870
and everything else along the way the

00:06:32,129 --> 00:06:36,659
libraries tend to cover a very wide

00:06:33,870 --> 00:06:38,789
range of things not because they were

00:06:36,659 --> 00:06:40,800
designed to do it just because they had

00:06:38,789 --> 00:06:42,949
to it was a matter of necessity so

00:06:40,800 --> 00:06:46,529
they've been basically scratching itches

00:06:42,949 --> 00:06:49,710
solving problems as they need solving

00:06:46,529 --> 00:06:51,960
arm rather than designing to be like a

00:06:49,710 --> 00:06:53,879
toolkit for everyone and everything but

00:06:51,960 --> 00:06:55,830
in the process they tend to solve the

00:06:53,879 --> 00:06:57,889
same problems that most programmers have

00:06:55,830 --> 00:07:01,249
been writing applications

00:06:57,889 --> 00:07:03,560
these days out of just the choreo fill

00:07:01,249 --> 00:07:06,409
only about twenty six percent is actual

00:07:03,560 --> 00:07:07,580
enlightenment the rest is libraries in

00:07:06,409 --> 00:07:09,199
fact we actually even more libraries

00:07:07,580 --> 00:07:14,300
beyond that but I'm not even covering

00:07:09,199 --> 00:07:16,159
and even of that set only about half the

00:07:14,300 --> 00:07:17,960
code in svn is enlightenment plus core

00:07:16,159 --> 00:07:19,810
libraries the rest of it is all sorts of

00:07:17,960 --> 00:07:23,710
other wondrous interesting things

00:07:19,810 --> 00:07:23,710
that'll keep you interested for a while

00:07:24,279 --> 00:07:33,080
so the actual history long back was back

00:07:30,050 --> 00:07:36,639
in 1996 when dinosaurs roamed the earth

00:07:33,080 --> 00:07:38,810
and I started writing stuff for linux

00:07:36,639 --> 00:07:41,120
enlightenment was just that it was just

00:07:38,810 --> 00:07:43,069
a window manager and nothing else at

00:07:41,120 --> 00:07:44,719
that time I hated the library called the

00:07:43,069 --> 00:07:47,090
becks p.m. mostly because I just hated

00:07:44,719 --> 00:07:49,339
xpm there were horrible little text

00:07:47,090 --> 00:07:51,620
files that were meant to be images and I

00:07:49,339 --> 00:07:54,860
started writing code to load other image

00:07:51,620 --> 00:07:58,819
formats and to render them much better

00:07:54,860 --> 00:08:01,249
than xpm that code became em lib panas

00:07:58,819 --> 00:08:04,189
separate library and then eventually

00:08:01,249 --> 00:08:06,500
became in lib to arm which has actually

00:08:04,189 --> 00:08:08,330
been deprecated and we now do everything

00:08:06,500 --> 00:08:10,430
with ever sandy core and edge and a

00:08:08,330 --> 00:08:13,699
whole bunch of other libraries so these

00:08:10,430 --> 00:08:16,490
days in svn on the right-hand side efl

00:08:13,699 --> 00:08:21,979
is that big yellow blob enlightenment

00:08:16,490 --> 00:08:24,139
the little blue one and really just the

00:08:21,979 --> 00:08:27,319
old legacy stuff e 16 is the rest we

00:08:24,139 --> 00:08:28,520
actually still do maintain a 16 Kim Kim

00:08:27,319 --> 00:08:30,469
Walder's dudes does actually an

00:08:28,520 --> 00:08:38,060
interesting job of working on that all

00:08:30,469 --> 00:08:40,969
the time quite impressive so we're

00:08:38,060 --> 00:08:44,269
actually quite old arms we've been

00:08:40,969 --> 00:08:46,820
around since 96 um a lot of people may

00:08:44,269 --> 00:08:48,470
not have heard of the work we do but

00:08:46,820 --> 00:08:50,750
we've been sitting in the background and

00:08:48,470 --> 00:08:52,760
actually creating a lot of things that's

00:08:50,750 --> 00:08:55,850
kind of the on the screen the timeline

00:08:52,760 --> 00:08:58,160
there's no point me reading it out all

00:08:55,850 --> 00:09:00,949
the things we've done but we have

00:08:58,160 --> 00:09:04,820
actually supported good home and gtk in

00:09:00,949 --> 00:09:07,190
the past arm we have written code that's

00:09:04,820 --> 00:09:10,519
generally usable in lib to has been used

00:09:07,190 --> 00:09:11,750
a lot in many places and these days efl

00:09:10,519 --> 00:09:13,610
is being used

00:09:11,750 --> 00:09:18,170
increasingly in the embedded space which

00:09:13,610 --> 00:09:20,150
is becoming very interesting so a small

00:09:18,170 --> 00:09:22,160
list of libraries is there like we've

00:09:20,150 --> 00:09:25,670
got ena which apparently means tool in

00:09:22,160 --> 00:09:28,040
Spanish and embryo which is a small

00:09:25,670 --> 00:09:30,800
virtual machine that actually is thanks

00:09:28,040 --> 00:09:33,260
to work done by a Dutch company arm on a

00:09:30,800 --> 00:09:36,170
program language called small or these

00:09:33,260 --> 00:09:41,260
days called porn and that's PA WN with a

00:09:36,170 --> 00:09:44,360
W and that was a small virtual machine

00:09:41,260 --> 00:09:46,220
interpreting engine and compiler we got

00:09:44,360 --> 00:09:50,330
d-bus bindings to support free desktop

00:09:46,220 --> 00:09:52,520
and linux standards i'm a thumb d

00:09:50,330 --> 00:09:55,190
bus-based thumbnail emotion is whole

00:09:52,520 --> 00:09:59,960
video layer arm it supports both it

00:09:55,190 --> 00:10:03,920
supports gstreamer sign and VLC as

00:09:59,960 --> 00:10:05,510
backends for doing the video and many

00:10:03,920 --> 00:10:09,620
many other things elementary is in fact

00:10:05,510 --> 00:10:11,270
today the more interesting element

00:10:09,620 --> 00:10:13,160
because it is actually the widget set

00:10:11,270 --> 00:10:14,960
and toolkit everything else is lower

00:10:13,160 --> 00:10:21,050
level libraries to help you build tool

00:10:14,960 --> 00:10:26,560
kits so one of the core interesting

00:10:21,050 --> 00:10:29,870
things is ever ever is a scene graph

00:10:26,560 --> 00:10:32,839
canvas library that means you don't draw

00:10:29,870 --> 00:10:35,570
anything you create so you create an

00:10:32,839 --> 00:10:39,560
image you create a rectangle a blob of

00:10:35,570 --> 00:10:41,650
text and then you manipulate that you

00:10:39,560 --> 00:10:44,150
move it you resize it show it hide it

00:10:41,650 --> 00:10:47,150
you stack objects on top of each other

00:10:44,150 --> 00:10:49,070
um change their colors fade them in and

00:10:47,150 --> 00:10:51,620
out with this you can actually create

00:10:49,070 --> 00:10:54,440
almost anything the advantage of it

00:10:51,620 --> 00:10:55,880
being a scene graph is that the

00:10:54,440 --> 00:10:57,920
programmer doesn't actually have to know

00:10:55,880 --> 00:11:00,550
how to draw or render anything he just

00:10:57,920 --> 00:11:03,110
puts the things together the scene graph

00:11:00,550 --> 00:11:04,940
can optimize all your rendering by

00:11:03,110 --> 00:11:07,220
throwing up lots of work that it just

00:11:04,940 --> 00:11:08,720
doesn't need to do because it has one

00:11:07,220 --> 00:11:11,600
big advantage over an immediate mode

00:11:08,720 --> 00:11:13,280
rendering system like OpenGL or Cairo or

00:11:11,600 --> 00:11:16,190
anything like that it's because it has

00:11:13,280 --> 00:11:18,230
the whole scene in memory already before

00:11:16,190 --> 00:11:20,600
it starts rendering so it knows what it

00:11:18,230 --> 00:11:22,339
has to do in future and therefore it can

00:11:20,600 --> 00:11:25,209
avoid doing work it knows it's going to

00:11:22,339 --> 00:11:29,510
throw out along the way

00:11:25,209 --> 00:11:31,880
it supports software rendering there is

00:11:29,510 --> 00:11:34,970
some kyden code in there to support pics

00:11:31,880 --> 00:11:37,880
man they used to be a chiro engine at

00:11:34,970 --> 00:11:40,430
one point unfortunately that cairo

00:11:37,880 --> 00:11:43,850
engine was a bit too slow to continue

00:11:40,430 --> 00:11:46,070
working on me was actually benchmarks

00:11:43,850 --> 00:11:48,529
rant about one-twentieth of the speed of

00:11:46,070 --> 00:11:51,980
Elvis's software engine so there was

00:11:48,529 --> 00:11:53,690
almost no point in working on it but

00:11:51,980 --> 00:11:56,660
there is support for pics man which is

00:11:53,690 --> 00:11:59,300
the back end of both cairo and x render

00:11:56,660 --> 00:12:02,510
when doing software in addition it also

00:11:59,300 --> 00:12:05,600
supports opengl desktop open GL GL x and

00:12:02,510 --> 00:12:08,390
e GL and opengl ES which means if you

00:12:05,600 --> 00:12:10,700
have a GPU with an appropriate GL

00:12:08,390 --> 00:12:12,079
library it will actually be accelerated

00:12:10,700 --> 00:12:14,360
and it will actually accelerate

00:12:12,079 --> 00:12:17,630
everything through opengl rendering all

00:12:14,360 --> 00:12:18,920
text rendering every rectangle every

00:12:17,630 --> 00:12:22,880
image everything will be rendered as a

00:12:18,920 --> 00:12:23,959
texture as a set of triangles and

00:12:22,880 --> 00:12:27,380
polygons actually is quite an

00:12:23,959 --> 00:12:30,260
interesting little engine to try and

00:12:27,380 --> 00:12:34,579
batch the vertices together and as few

00:12:30,260 --> 00:12:36,950
GL operations as possible we also have a

00:12:34,579 --> 00:12:39,290
main loop library ecor it also handles

00:12:36,950 --> 00:12:41,899
things like network connections arm

00:12:39,290 --> 00:12:45,140
other abstractions and it glues together

00:12:41,899 --> 00:12:46,550
ever annual display system to make life

00:12:45,140 --> 00:12:48,800
easier so you don't have to do it for

00:12:46,550 --> 00:12:51,589
you was originally everse was written so

00:12:48,800 --> 00:12:54,500
it could actually work with any tool kit

00:12:51,589 --> 00:12:57,740
it didn't have a main loop linkage of

00:12:54,500 --> 00:12:59,420
its own it had an obstructed rendering

00:12:57,740 --> 00:13:01,579
engine so you could render to any

00:12:59,420 --> 00:13:06,079
toolkit surface whether it's QT gtk

00:13:01,579 --> 00:13:08,120
windows etc arm but these days it mostly

00:13:06,079 --> 00:13:09,800
doesn't use that abstraction although

00:13:08,120 --> 00:13:11,750
the advantages we actually also have

00:13:09,800 --> 00:13:15,740
ports to windows we have Wincy window

00:13:11,750 --> 00:13:17,390
see win32 rendering direct FB they used

00:13:15,740 --> 00:13:22,310
to be a coup topia one as well arm

00:13:17,390 --> 00:13:26,600
that's been deprecated oh yeah OpenGL of

00:13:22,310 --> 00:13:28,459
GL es x 11 and for anyone turning up to

00:13:26,600 --> 00:13:30,949
the talk that's not after this for the

00:13:28,459 --> 00:13:35,899
one after that we in fact also now have

00:13:30,949 --> 00:13:37,730
Wayland support we support both GL and

00:13:35,899 --> 00:13:38,390
software rendering in Wayland so

00:13:37,730 --> 00:13:42,740
software via

00:13:38,390 --> 00:13:45,890
shared memory buffers the efl clients

00:13:42,740 --> 00:13:47,030
now also support client side frames so

00:13:45,890 --> 00:13:48,290
you'll actually get title bars and

00:13:47,030 --> 00:13:51,380
borders in your resize your windows

00:13:48,290 --> 00:13:53,240
it'll actually work and in fact as of

00:13:51,380 --> 00:13:55,220
just recently we also have Wayland

00:13:53,240 --> 00:13:57,110
compositor support in enlightenment in

00:13:55,220 --> 00:13:59,330
the window manager so Wayland clients

00:13:57,110 --> 00:14:02,000
should work inside of enlightenment as

00:13:59,330 --> 00:14:04,580
well so he just added that at this stage

00:14:02,000 --> 00:14:06,470
my believe that the FL port to Wayland

00:14:04,580 --> 00:14:09,470
is actually the most complete port of

00:14:06,470 --> 00:14:12,620
all the toolkits so we actually have a

00:14:09,470 --> 00:14:13,580
lot of Wayland support happening in

00:14:12,620 --> 00:14:16,840
addition we have this cool little

00:14:13,580 --> 00:14:19,760
library called eat nothing I know of is

00:14:16,840 --> 00:14:22,100
like eat it's basically a data structure

00:14:19,760 --> 00:14:24,110
serialization library it can take any

00:14:22,100 --> 00:14:27,320
data structure in memory from C or C++

00:14:24,110 --> 00:14:31,340
and just walk through memory dump it to

00:14:27,320 --> 00:14:33,080
disk as a portable blob of data and it

00:14:31,340 --> 00:14:35,300
can do the reverse it can read the back

00:14:33,080 --> 00:14:37,100
from disk and it's extremely fast and

00:14:35,300 --> 00:14:39,440
doing it this is in fact the back end

00:14:37,100 --> 00:14:41,540
that is used for edge which I'll talk

00:14:39,440 --> 00:14:43,160
about later that at run time to build

00:14:41,540 --> 00:14:45,230
every single widget you load a bunch of

00:14:43,160 --> 00:14:47,180
data from desk and then generate objects

00:14:45,230 --> 00:14:51,500
out of etc and all of its encoded and

00:14:47,180 --> 00:14:53,600
decoded using eat there's embryo by code

00:14:51,500 --> 00:14:55,550
virtual machine not that interesting

00:14:53,600 --> 00:14:57,620
except is actually extremely small the

00:14:55,550 --> 00:15:00,980
core code for the vm is like two

00:14:57,620 --> 00:15:03,470
thousand lines of see it's like a 35

00:15:00,980 --> 00:15:05,630
kilobyte shared library in total for

00:15:03,470 --> 00:15:11,480
everything so it's very very small in

00:15:05,630 --> 00:15:14,870
sandboxed and very fast our edge is the

00:15:11,480 --> 00:15:17,150
way you can store pre-designed graphics

00:15:14,870 --> 00:15:20,750
on disk in a very very very small

00:15:17,150 --> 00:15:23,540
efficient way a lot of you are probably

00:15:20,750 --> 00:15:25,850
familiar with HTML and CSS will you type

00:15:23,540 --> 00:15:27,650
out a bunch of XML style stuff and a

00:15:25,850 --> 00:15:29,390
bunch of CSS and you google it all

00:15:27,650 --> 00:15:31,430
together and you pass that then you load

00:15:29,390 --> 00:15:36,290
a bunch of images you refer to the mixer

00:15:31,430 --> 00:15:38,720
etc edges like that except the source

00:15:36,290 --> 00:15:41,450
code I the text files are compiled into

00:15:38,720 --> 00:15:43,040
binary all the source data is also put

00:15:41,450 --> 00:15:45,320
into the same file that means images

00:15:43,040 --> 00:15:46,760
fonts anything else you want and when

00:15:45,320 --> 00:15:49,640
it's loaded it's all sourced from the

00:15:46,760 --> 00:15:51,970
same single file so it is in fact very

00:15:49,640 --> 00:15:54,189
very small efficient and fast so it's

00:15:51,970 --> 00:15:56,920
you just put one file on disk and it

00:15:54,189 --> 00:16:00,730
just works you don't have to unpack or

00:15:56,920 --> 00:16:02,529
download multiple things etc we also

00:16:00,730 --> 00:16:05,290
support free desktop double standards

00:16:02,529 --> 00:16:08,319
with the freight arm like desktop files

00:16:05,290 --> 00:16:11,860
the free desktop tool or menu standards

00:16:08,319 --> 00:16:16,079
etc etc I'm Andy Freitas a library to

00:16:11,860 --> 00:16:16,079
help support that to pass the files etc

00:16:16,439 --> 00:16:22,089
ena is kind of a bit like a G lib thing

00:16:19,810 --> 00:16:24,310
arm which does some basic data

00:16:22,089 --> 00:16:27,910
structures and it's now adding some

00:16:24,310 --> 00:16:31,959
object model things etc um it's really

00:16:27,910 --> 00:16:33,279
used to core to make it easier to write

00:16:31,959 --> 00:16:35,350
our code a lot of these data structures

00:16:33,279 --> 00:16:37,209
used to exist actually inside of Ephesus

00:16:35,350 --> 00:16:39,129
and they got removed and moved out so

00:16:37,209 --> 00:16:42,209
that's why that exists the d-bus

00:16:39,129 --> 00:16:45,129
integration library arm the dbar stuff

00:16:42,209 --> 00:16:46,810
we have asynchronous i/o with e io

00:16:45,129 --> 00:16:49,029
that's being added we've got video

00:16:46,810 --> 00:16:50,620
playback with emotion which is really

00:16:49,029 --> 00:16:52,300
simple you just create an object put it

00:16:50,620 --> 00:16:53,350
somewhere say play and it just sits

00:16:52,300 --> 00:16:55,540
there in place you don't have to do

00:16:53,350 --> 00:16:56,980
anything else you can take that object

00:16:55,540 --> 00:17:00,639
and rotate it and do also other things

00:16:56,980 --> 00:17:03,730
with it there's a you dev support

00:17:00,639 --> 00:17:05,620
library arm called ease for trying to

00:17:03,730 --> 00:17:08,350
replace howl and stuff like that we got

00:17:05,620 --> 00:17:10,720
thumbnailing things for emotion okay um

00:17:08,350 --> 00:17:12,189
nailing from a thumb that supports the

00:17:10,720 --> 00:17:14,770
thumbnail standards from feeders up the

00:17:12,189 --> 00:17:16,240
dog and elementary which is a really

00:17:14,770 --> 00:17:20,610
interesting bit which is all the widgets

00:17:16,240 --> 00:17:23,049
so lists buttons checkboxes scrollers

00:17:20,610 --> 00:17:26,260
pop-up thingies everything else that

00:17:23,049 --> 00:17:27,939
lives in elementary and something that

00:17:26,260 --> 00:17:29,409
is actually a real interest coming on

00:17:27,939 --> 00:17:31,030
its way and is actually in sv and

00:17:29,409 --> 00:17:34,240
already we've something got elevate

00:17:31,030 --> 00:17:37,150
elevate is a JavaScript runtime um I

00:17:34,240 --> 00:17:40,570
guess you can think of it a bit like qml

00:17:37,150 --> 00:17:44,830
or you can think of it as some crafts

00:17:40,570 --> 00:17:46,510
pre and Python and the efl bindings for

00:17:44,830 --> 00:17:48,700
Python it allows you to write

00:17:46,510 --> 00:17:52,150
applications in JavaScript you actually

00:17:48,700 --> 00:17:53,679
declare the user interface in Jason at

00:17:52,150 --> 00:17:55,330
the beginning of a JavaScript and just

00:17:53,679 --> 00:17:59,530
say here create my interface out of that

00:17:55,330 --> 00:18:01,929
and it works it's quite easy to use um

00:17:59,530 --> 00:18:04,230
but it's still on its way it's still a

00:18:01,929 --> 00:18:09,190
bit immature

00:18:04,230 --> 00:18:11,170
so why does the FL matter why does

00:18:09,190 --> 00:18:14,740
anyone care why don't we just all use KD

00:18:11,170 --> 00:18:17,470
or just use cutie well on QT or gtk

00:18:14,740 --> 00:18:22,260
organ ohm or something else the reason

00:18:17,470 --> 00:18:26,050
it matters is that at Samsung for a

00:18:22,260 --> 00:18:28,480
while we've been using efl the reason

00:18:26,050 --> 00:18:30,790
we're using FL is we were using gtk at

00:18:28,480 --> 00:18:33,100
some point this is before I joined but

00:18:30,790 --> 00:18:35,530
apparently the performance was not that

00:18:33,100 --> 00:18:37,570
good and they try to FL and it just

00:18:35,530 --> 00:18:40,120
worked out of the box performance was

00:18:37,570 --> 00:18:42,070
good it was easy to use and now as a

00:18:40,120 --> 00:18:45,820
result earful is actually being used in

00:18:42,070 --> 00:18:47,800
Tizen Tizen is some people might think

00:18:45,820 --> 00:18:51,400
of it a replacement for me go who he

00:18:47,800 --> 00:18:54,850
knows about me go wow that's pretty good

00:18:51,400 --> 00:18:58,690
coverage for third amigo Pelotonia who

00:18:54,850 --> 00:19:02,050
knows about Tizen wow that's pretty good

00:18:58,690 --> 00:19:03,730
um so efl is the cut is the toolkit

00:19:02,050 --> 00:19:06,970
being used in Tizen but course it

00:19:03,730 --> 00:19:08,590
supports OpenGL OpenGL ES it will work

00:19:06,970 --> 00:19:10,120
without OpenGL if you just have pure

00:19:08,590 --> 00:19:13,090
software rendering it'll work and

00:19:10,120 --> 00:19:15,010
actually be fast and usable so it's

00:19:13,090 --> 00:19:17,650
being used because it actually delivers

00:19:15,010 --> 00:19:21,970
all these things it actually works how

00:19:17,650 --> 00:19:23,680
do the box and works well so seeing you

00:19:21,970 --> 00:19:26,590
all know what Tizen is I don't have to

00:19:23,680 --> 00:19:28,960
really tell you much about that but efl

00:19:26,590 --> 00:19:30,970
is also open Tizen is intended to be

00:19:28,960 --> 00:19:33,070
open the source code was actually

00:19:30,970 --> 00:19:36,160
released I mean git repositories

00:19:33,070 --> 00:19:38,500
recently so you can actually get most of

00:19:36,160 --> 00:19:39,940
the code and if you want to write native

00:19:38,500 --> 00:19:43,870
applications as opposed to web

00:19:39,940 --> 00:19:45,430
applications you can you efl is going to

00:19:43,870 --> 00:19:47,140
be your easiest way of writing those

00:19:45,430 --> 00:19:48,820
applications because otherwise you'll

00:19:47,140 --> 00:19:52,530
probably have to like write your own

00:19:48,820 --> 00:19:57,010
toolkit or include in your application

00:19:52,530 --> 00:19:59,470
so all the API is in the FL rcap is um I

00:19:57,010 --> 00:20:03,850
guess in that way like gtk that makes it

00:19:59,470 --> 00:20:05,980
easy for to use from both C and C++ so

00:20:03,850 --> 00:20:08,710
you don't have to particularly choose

00:20:05,980 --> 00:20:11,380
just see philosophy applications or just

00:20:08,710 --> 00:20:14,010
see you can use either that also makes

00:20:11,380 --> 00:20:16,330
it very easy to bind to other languages

00:20:14,010 --> 00:20:16,930
there are already an extensive set of

00:20:16,330 --> 00:20:20,440
Python

00:20:16,930 --> 00:20:22,840
earnings 3fl that will allow you to

00:20:20,440 --> 00:20:24,670
python although at this stage I know of

00:20:22,840 --> 00:20:30,100
no Python interpreter being added to the

00:20:24,670 --> 00:20:33,310
Tizen platform buddy full so why do we

00:20:30,100 --> 00:20:37,840
need another mobile is who here has an

00:20:33,310 --> 00:20:40,270
android phone who here would prefer

00:20:37,840 --> 00:20:42,750
their phone to let's say have a proper

00:20:40,270 --> 00:20:46,090
full linux stack and not be Android I

00:20:42,750 --> 00:20:49,060
see very good and that's why Tizen

00:20:46,090 --> 00:20:52,000
exists to basically make a better open

00:20:49,060 --> 00:20:56,080
OS that uses a full Linux stack

00:20:52,000 --> 00:20:59,800
underneath not just a colonel geely bc d

00:20:56,080 --> 00:21:02,170
bas x blah blah blah blah blah that's

00:20:59,800 --> 00:21:04,510
what Tizen is here for so you can have a

00:21:02,170 --> 00:21:06,790
proper open platform that you all know

00:21:04,510 --> 00:21:11,740
how to already program for and use and

00:21:06,790 --> 00:21:15,850
customize etc etc Android is only partly

00:21:11,740 --> 00:21:18,850
open android the Android 3-series the

00:21:15,850 --> 00:21:21,910
source code was not released by Google

00:21:18,850 --> 00:21:23,590
so at their discretion they chose not to

00:21:21,910 --> 00:21:26,800
release it which doesn't exactly make it

00:21:23,590 --> 00:21:30,190
open windows phone 7 well that's about

00:21:26,800 --> 00:21:33,040
as open as a brick and the same with iOS

00:21:30,190 --> 00:21:35,410
you know dude I'm so the world really

00:21:33,040 --> 00:21:38,140
needs an open solution that will be open

00:21:35,410 --> 00:21:40,570
and will stay open and it will not be at

00:21:38,140 --> 00:21:42,550
the discretion of the originator just be

00:21:40,570 --> 00:21:47,800
closed up and not released course you

00:21:42,550 --> 00:21:50,770
don't want to but why don't we just use

00:21:47,800 --> 00:21:52,660
mer or some one of these open operating

00:21:50,770 --> 00:21:55,060
systems and stick them on phones the

00:21:52,660 --> 00:21:58,210
reality is unfortunately in the hardware

00:21:55,060 --> 00:21:59,920
world to put an operating system on an

00:21:58,210 --> 00:22:02,800
existing tablet or phone is extremely

00:21:59,920 --> 00:22:05,230
difficult unless you are in OEM you will

00:22:02,800 --> 00:22:07,420
need access to drivers to binaries to

00:22:05,230 --> 00:22:10,390
things that you will not get in the open

00:22:07,420 --> 00:22:14,140
so to ship something out of the box on a

00:22:10,390 --> 00:22:16,330
device needs om and telco support and

00:22:14,140 --> 00:22:18,910
that's actually what Tizen has armed it

00:22:16,330 --> 00:22:23,380
has a support of these entities so if

00:22:18,910 --> 00:22:26,520
there is a good capability of it

00:22:23,380 --> 00:22:26,520
actually succeeding in future

00:22:28,600 --> 00:22:43,400
so next they're armed so who here

00:22:38,660 --> 00:22:47,510
actually doesn't know what's in tyson ok

00:22:43,400 --> 00:22:49,040
that's what's in it um really and I've

00:22:47,510 --> 00:22:51,740
heard lots of questions about it before

00:22:49,040 --> 00:22:54,280
it's really just G lib zeg Lib C which

00:22:51,740 --> 00:22:58,030
is the embedded variant of G Lib C

00:22:54,280 --> 00:23:01,220
standard d-bus stuff x and so on etc etc

00:22:58,030 --> 00:23:03,230
all of that stuff's in there and there's

00:23:01,220 --> 00:23:06,110
efl floating around in there which is

00:23:03,230 --> 00:23:09,530
one of the major components in fact in a

00:23:06,110 --> 00:23:13,070
recent look at most of the you know

00:23:09,530 --> 00:23:16,490
usable AP is in the Tizen platform C

00:23:13,070 --> 00:23:19,880
api's efl is like about two-thirds of

00:23:16,490 --> 00:23:23,330
the AP is from the libraries so it has a

00:23:19,880 --> 00:23:30,110
very very very vast number of API calls

00:23:23,330 --> 00:23:32,210
of L so I've already explained that efl

00:23:30,110 --> 00:23:34,790
is the core we're using that because it

00:23:32,210 --> 00:23:37,220
works the compositor and window managers

00:23:34,790 --> 00:23:39,800
enlightenment all of the applications

00:23:37,220 --> 00:23:41,810
even the web browser they use the FL to

00:23:39,800 --> 00:23:48,830
render and display and do widgets etc

00:23:41,810 --> 00:23:51,650
etc everything is open or as openers

00:23:48,830 --> 00:23:53,510
allows unfortunately some things like GL

00:23:51,650 --> 00:23:57,320
drivers are not open you'll have to talk

00:23:53,510 --> 00:24:01,130
to OEMs monarto am sorry to GPU vendors

00:23:57,320 --> 00:24:03,590
about those kind of things etc if you

00:24:01,130 --> 00:24:07,490
want to write native apps FL is the

00:24:03,590 --> 00:24:09,110
easiest thing to do and it will allow

00:24:07,490 --> 00:24:12,080
you to pretty much create anything you

00:24:09,110 --> 00:24:15,380
want from games through two things with

00:24:12,080 --> 00:24:16,910
lists and buttons etc etc it has almost

00:24:15,380 --> 00:24:18,290
everything you need and if you don't

00:24:16,910 --> 00:24:20,660
have it you can always use some other

00:24:18,290 --> 00:24:21,980
library it's designed to work with

00:24:20,660 --> 00:24:24,020
shared libraries and with other

00:24:21,980 --> 00:24:27,040
libraries not to totally wrap them and

00:24:24,020 --> 00:24:27,040
replace them at every opportunity

00:24:30,110 --> 00:24:39,080
so a lot of people ask the question is

00:24:34,010 --> 00:24:40,370
why FL instead of gtk or cutie um since

00:24:39,080 --> 00:24:45,799
it's a common question I'll have to

00:24:40,370 --> 00:24:48,530
answer here gtk in our experience when

00:24:45,799 --> 00:24:50,690
running on actual devices just didn't

00:24:48,530 --> 00:24:54,920
end up being smooth it didn't give the

00:24:50,690 --> 00:24:57,350
performance we wanted or needed um so we

00:24:54,920 --> 00:25:01,700
didn't really like that and efl was

00:24:57,350 --> 00:25:04,309
chosen to replace that because before we

00:25:01,700 --> 00:25:05,900
were using gtk and we tried direct FB

00:25:04,309 --> 00:25:07,640
and it just had no performance even

00:25:05,900 --> 00:25:13,040
without directive be it didn't work too

00:25:07,640 --> 00:25:15,080
well efl was fast without any GPU

00:25:13,040 --> 00:25:18,650
acceleration with zero g with just the

00:25:15,080 --> 00:25:22,460
cpu it was already fast and that's why

00:25:18,650 --> 00:25:25,630
it attracted attention um the OpenGL

00:25:22,460 --> 00:25:28,040
support nefl is actually pretty good

00:25:25,630 --> 00:25:32,059
it's been around for a very long time

00:25:28,040 --> 00:25:34,100
and it got extended to OpenGL ES and it

00:25:32,059 --> 00:25:36,860
is actually proven to work on many many

00:25:34,100 --> 00:25:40,130
platforms from desktop you know until

00:25:36,860 --> 00:25:43,370
nvidia ati and everything else all the

00:25:40,130 --> 00:25:47,240
way through to like sgx and Molly and

00:25:43,370 --> 00:25:48,679
all the embedded variants and one of the

00:25:47,240 --> 00:25:52,520
things that's very important is that

00:25:48,679 --> 00:25:53,900
your applications will tend to work very

00:25:52,520 --> 00:25:55,940
very smoothly you'll be scrolling around

00:25:53,900 --> 00:25:58,220
at 60 frames a second you know your

00:25:55,940 --> 00:26:02,059
animations will stay smooth and that

00:25:58,220 --> 00:26:04,370
actually works one of the other reasons

00:26:02,059 --> 00:26:07,940
is memory footprint efl has a fairly

00:26:04,370 --> 00:26:11,540
small memory footprint just as a very

00:26:07,940 --> 00:26:13,580
very simple example comparing unity and

00:26:11,540 --> 00:26:19,010
enlightenment which actually do the same

00:26:13,580 --> 00:26:22,190
thing there's about a about a 60

00:26:19,010 --> 00:26:24,530
something megabyte difference in memory

00:26:22,190 --> 00:26:27,320
footprint and that really matters when

00:26:24,530 --> 00:26:30,530
you have phones that only have like 128

00:26:27,320 --> 00:26:34,010
or 256 megabytes of RAM when you have to

00:26:30,530 --> 00:26:37,520
pay such large prices for your footprint

00:26:34,010 --> 00:26:41,169
and both of those have roughly similar

00:26:37,520 --> 00:26:41,169
features for that memory footprint

00:26:41,669 --> 00:26:47,140
so phones and tablets they really don't

00:26:45,760 --> 00:26:49,929
have any they can't afford to have swap

00:26:47,140 --> 00:26:53,049
either swap is not something you can

00:26:49,929 --> 00:26:54,820
easily do on a device where if you write

00:26:53,049 --> 00:26:57,429
to disk more than a certain number of

00:26:54,820 --> 00:27:02,320
times it breaks and that's actually

00:26:57,429 --> 00:27:03,940
what's what does yes I know it did well

00:27:02,320 --> 00:27:09,940
actually it had it as an option i

00:27:03,940 --> 00:27:11,950
believe right I I could I could have

00:27:09,940 --> 00:27:16,030
sworn it was a knot it was an option you

00:27:11,950 --> 00:27:20,760
had to turn on right I could have sworn

00:27:16,030 --> 00:27:20,760
that was there an option to turn on yeah

00:27:26,340 --> 00:27:32,980
okay because i said so it was an option

00:27:28,299 --> 00:27:34,090
in my mo five this one no what was an

00:27:32,980 --> 00:27:35,740
option maybe those options to turn it

00:27:34,090 --> 00:27:42,309
off then though so I remember an option

00:27:35,740 --> 00:27:46,210
being there anyway okay but that only

00:27:42,309 --> 00:27:50,919
had 128 mega RAM was it maybe wasn't

00:27:46,210 --> 00:27:55,750
only 1 128 maybe well maybe it was their

00:27:50,919 --> 00:27:58,150
sinking the n810 anyway um no I hadn't n

00:27:55,750 --> 00:28:00,250
800 and 900 as well and I get confused

00:27:58,150 --> 00:28:03,280
which one was what huh I can't remember

00:28:00,250 --> 00:28:05,590
anymore um but yeah with very little

00:28:03,280 --> 00:28:07,540
memory you tend to begin to have

00:28:05,590 --> 00:28:09,520
problems and so lowering your memory

00:28:07,540 --> 00:28:12,460
footprint makes the difference between a

00:28:09,520 --> 00:28:14,140
platform that can run your dialer and

00:28:12,460 --> 00:28:16,179
nothing else you can make a phone call

00:28:14,140 --> 00:28:17,500
and do nothing I'm versus you can do

00:28:16,179 --> 00:28:19,510
like 20 different things at the same

00:28:17,500 --> 00:28:21,490
time because you really don't have the

00:28:19,510 --> 00:28:24,280
luxury of swap generally speaking in

00:28:21,490 --> 00:28:28,390
theory it's possible but um it's kind of

00:28:24,280 --> 00:28:31,059
difficult so for everyone who likes

00:28:28,390 --> 00:28:32,679
block diagrams here's a block diagram we

00:28:31,059 --> 00:28:34,990
created for you I keep being asked for

00:28:32,679 --> 00:28:36,790
block diagrams all the time I don't

00:28:34,990 --> 00:28:38,440
understand why but I made a block

00:28:36,790 --> 00:28:42,130
diagram it looks like that or at least

00:28:38,440 --> 00:28:44,440
some of the components and reality is it

00:28:42,130 --> 00:28:47,470
looks more like that with all these

00:28:44,440 --> 00:28:48,730
little things joining something else and

00:28:47,470 --> 00:28:50,700
something plugged into something else

00:28:48,730 --> 00:28:52,830
this diagram is actually quite old

00:28:50,700 --> 00:28:54,690
I did this diagram again when someone

00:28:52,830 --> 00:28:57,600
asks I went well the block diagrams not

00:28:54,690 --> 00:29:00,930
right this is correct but yeah much

00:28:57,600 --> 00:29:01,950
harder to understand so FL does look a

00:29:00,930 --> 00:29:04,320
bit like that with everything

00:29:01,950 --> 00:29:06,360
interconnected generally speaking if

00:29:04,320 --> 00:29:08,300
you're to equate it to cutie cutie is

00:29:06,360 --> 00:29:10,410
just a big blob that is cutie arm

00:29:08,300 --> 00:29:13,620
internally well internally it split up

00:29:10,410 --> 00:29:15,630
but yours is my and gtk would be vaguely

00:29:13,620 --> 00:29:17,760
similar internally but you tend to get

00:29:15,630 --> 00:29:22,590
one blob whereas efl we explode it even

00:29:17,760 --> 00:29:26,160
we expose our internals so the real

00:29:22,590 --> 00:29:28,230
question is if you have heard about efl

00:29:26,160 --> 00:29:31,920
and you want to use it where do you

00:29:28,230 --> 00:29:37,020
start well several distributions package

00:29:31,920 --> 00:29:40,560
efl arm there's Bodhi there's pc linux

00:29:37,020 --> 00:29:42,630
OS i think um gentoo has had a builds

00:29:40,560 --> 00:29:44,460
forever in a day arch linux and so on um

00:29:42,630 --> 00:29:46,770
if you look around you'll find packages

00:29:44,460 --> 00:29:48,000
arm although i generally don't tend to

00:29:46,770 --> 00:29:50,100
use them i just check the thing out of

00:29:48,000 --> 00:29:54,630
svn and build it funny that i write the

00:29:50,100 --> 00:29:56,010
code so there's lots of information as

00:29:54,630 --> 00:29:58,620
to how to download it where to get it

00:29:56,010 --> 00:30:00,930
from you can use the tarball downloads

00:29:58,620 --> 00:30:05,280
we actually have done releases the VFL

00:30:00,930 --> 00:30:06,810
funny that and you can compile it from

00:30:05,280 --> 00:30:08,280
there that's not very hard configure

00:30:06,810 --> 00:30:10,650
make make install / thing there's

00:30:08,280 --> 00:30:12,600
nothing really magic about it you can

00:30:10,650 --> 00:30:14,730
check it out from SVM it's pretty much

00:30:12,600 --> 00:30:18,750
the same it's auto gendered SH make make

00:30:14,730 --> 00:30:21,690
install and someone nicely wrote a

00:30:18,750 --> 00:30:25,350
beautiful script there his name's more

00:30:21,690 --> 00:30:27,450
Linux or mall in exes and he maintains

00:30:25,350 --> 00:30:29,460
that and a lot of people use the easy 17

00:30:27,450 --> 00:30:31,110
shell script that goes and installs

00:30:29,460 --> 00:30:33,560
dependencies and other things for you

00:30:31,110 --> 00:30:37,290
and builds everything in correct order

00:30:33,560 --> 00:30:41,040
so one of the things that's probably

00:30:37,290 --> 00:30:42,570
useful to know is how it all works one

00:30:41,040 --> 00:30:44,760
of the things that tends to be a bit

00:30:42,570 --> 00:30:46,050
mysterious is things magically display

00:30:44,760 --> 00:30:48,750
and render without you having to do

00:30:46,050 --> 00:30:50,490
anything so to understand how that works

00:30:48,750 --> 00:30:53,820
you've got to know that there is a main

00:30:50,490 --> 00:30:56,040
loop and how that functions so we have a

00:30:53,820 --> 00:30:57,930
main loop the idea of a main loop is you

00:30:56,040 --> 00:31:00,630
keep all your applications state in the

00:30:57,930 --> 00:31:02,070
main loop you try and avoid doing work

00:31:00,630 --> 00:31:04,620
in the main loop that means going a

00:31:02,070 --> 00:31:06,150
reading files from disk pausing stuff

00:31:04,620 --> 00:31:09,210
going and doing network things or like

00:31:06,150 --> 00:31:11,420
doing complex calculations you mostly

00:31:09,210 --> 00:31:13,890
try and keep your state in the main loop

00:31:11,420 --> 00:31:18,690
that means you have one place we have a

00:31:13,890 --> 00:31:20,370
consistent state machine you can do

00:31:18,690 --> 00:31:24,390
small little bits of work but make sure

00:31:20,370 --> 00:31:25,530
they're small and they don't block one

00:31:24,390 --> 00:31:27,360
of the big questions I keep getting

00:31:25,530 --> 00:31:29,370
asked is thread support efl is not

00:31:27,360 --> 00:31:31,920
thread-safe is in fact actually kind of

00:31:29,370 --> 00:31:33,840
hard to make it thread safe but course

00:31:31,920 --> 00:31:35,730
will not thread-safe but work really

00:31:33,840 --> 00:31:37,440
well threads because there's a main loop

00:31:35,730 --> 00:31:39,540
that maintains state and when you finish

00:31:37,440 --> 00:31:42,030
changing state at renders the question

00:31:39,540 --> 00:31:43,980
is when a thread changes your state when

00:31:42,030 --> 00:31:45,720
does that finish so you need to add

00:31:43,980 --> 00:31:47,220
things like you have to add functions

00:31:45,720 --> 00:31:49,080
that wake up the main loop and say hey

00:31:47,220 --> 00:31:50,730
main loop wake up and please rerender

00:31:49,080 --> 00:31:53,460
and change your state because I change

00:31:50,730 --> 00:31:54,900
things for you and that makes a little

00:31:53,460 --> 00:31:57,780
bit more complicated and using threads

00:31:54,900 --> 00:32:01,110
so we have actual primitives to help you

00:31:57,780 --> 00:32:02,820
do that but they still run all the logic

00:32:01,110 --> 00:32:03,960
in the main loop but you can still do

00:32:02,820 --> 00:32:06,300
all your calculations and other stuff

00:32:03,960 --> 00:32:08,400
often threads and that's actually kind

00:32:06,300 --> 00:32:09,870
of useful considering a lot of modern

00:32:08,400 --> 00:32:11,970
smartphones these days have like two

00:32:09,870 --> 00:32:14,820
processes they are even coming out with

00:32:11,970 --> 00:32:16,530
quad pro cog cores now but we do have a

00:32:14,820 --> 00:32:18,000
lot of support for the threads the main

00:32:16,530 --> 00:32:21,600
look learn loop looks something like

00:32:18,000 --> 00:32:23,010
that um it's pretty simple um you just

00:32:21,600 --> 00:32:25,020
sit around and wait for something to

00:32:23,010 --> 00:32:27,480
happen when it happens you go and read

00:32:25,020 --> 00:32:30,000
data generate events handle your vents

00:32:27,480 --> 00:32:32,040
change your state and just before you go

00:32:30,000 --> 00:32:34,050
to sleep just before you finish changing

00:32:32,040 --> 00:32:36,750
a state of the world you go and update

00:32:34,050 --> 00:32:38,190
all your screen you do your rendering so

00:32:36,750 --> 00:32:41,700
all the rendering happens there or just

00:32:38,190 --> 00:32:43,950
about go to sleep ecor equus glues that

00:32:41,700 --> 00:32:45,750
in for you and sets it up this means you

00:32:43,950 --> 00:32:47,580
don't need to know about rendering ever

00:32:45,750 --> 00:32:49,590
all you do is you sit there you change

00:32:47,580 --> 00:32:51,390
your state create your buttons you know

00:32:49,590 --> 00:32:53,490
move your objects around change your

00:32:51,390 --> 00:32:54,960
color and magically everything updates

00:32:53,490 --> 00:33:01,080
because when you're finished changing it

00:32:54,960 --> 00:33:02,940
it just goes and renders one of the

00:33:01,080 --> 00:33:04,590
things that is very important in making

00:33:02,940 --> 00:33:06,990
really good products and really good

00:33:04,590 --> 00:33:09,090
software is keeping things smooth I have

00:33:06,990 --> 00:33:12,450
to say this is something that the mac

00:33:09,090 --> 00:33:13,980
and iphone developers really really care

00:33:12,450 --> 00:33:15,150
a lot about they go to a lot of effort

00:33:13,980 --> 00:33:16,890
to make sure the applications are smooth

00:33:15,150 --> 00:33:18,809
they don't always get it right but they

00:33:16,890 --> 00:33:22,100
tend to do a very very good job

00:33:18,809 --> 00:33:24,450
it's something that most other

00:33:22,100 --> 00:33:26,159
developers tend to spend less effort on

00:33:24,450 --> 00:33:27,740
so one of the things that's going to

00:33:26,159 --> 00:33:30,419
help you make sure you have smooth

00:33:27,740 --> 00:33:35,100
interfaces and a nice experience for

00:33:30,419 --> 00:33:36,690
users is to keep heavy io work or heavy

00:33:35,100 --> 00:33:39,659
computation work outside of the main

00:33:36,690 --> 00:33:41,730
loop put in the thread go and put in a

00:33:39,659 --> 00:33:46,860
child process wait till sun collect the

00:33:41,730 --> 00:33:49,230
results and then update your UI this

00:33:46,860 --> 00:33:51,710
also tends to lead to nicer design with

00:33:49,230 --> 00:33:56,210
your application where you will isolate

00:33:51,710 --> 00:34:00,899
certain work units into their own areas

00:33:56,210 --> 00:34:02,820
if you use the equal thread and other

00:34:00,899 --> 00:34:04,379
things in equal that are there to make

00:34:02,820 --> 00:34:05,879
that happen this is actually very very

00:34:04,379 --> 00:34:07,200
very easy you don't have to go and

00:34:05,879 --> 00:34:09,419
create your own threads with P thread

00:34:07,200 --> 00:34:11,310
and great little pthread conditions and

00:34:09,419 --> 00:34:13,169
have things block and wait and wake

00:34:11,310 --> 00:34:14,760
things up and mutexes everywhere it

00:34:13,169 --> 00:34:16,440
actually tends to handle at all for you

00:34:14,760 --> 00:34:17,909
by piping things through file

00:34:16,440 --> 00:34:22,139
descriptors and waking the main loop up

00:34:17,909 --> 00:34:24,270
for you when a result comes in so by

00:34:22,139 --> 00:34:26,099
doing this you also keep the state of

00:34:24,270 --> 00:34:28,379
the application consistent so while

00:34:26,099 --> 00:34:30,210
something is busy off generating some

00:34:28,379 --> 00:34:32,339
new data or loading something in disk

00:34:30,210 --> 00:34:34,379
downloading it from the network your

00:34:32,339 --> 00:34:36,810
main state stays exactly the same

00:34:34,379 --> 00:34:38,909
nothing is half done and when it's

00:34:36,810 --> 00:34:43,740
finished it can send the results back to

00:34:38,909 --> 00:34:45,659
the main loop to update the GUI efl has

00:34:43,740 --> 00:34:49,109
an actual very interesting concept that

00:34:45,659 --> 00:34:52,980
I believe only got recently added to gtk

00:34:49,109 --> 00:34:56,010
right and 2g lib it's the idea of an

00:34:52,980 --> 00:34:59,640
animator from way back when when I was

00:34:56,010 --> 00:35:02,400
doing work on gnome and gtk one of the

00:34:59,640 --> 00:35:04,560
things that was the only way to do

00:35:02,400 --> 00:35:06,270
animation is you create a Geo timeout

00:35:04,560 --> 00:35:09,000
and that means there's a little timer

00:35:06,270 --> 00:35:10,980
that continuously loops and runs again

00:35:09,000 --> 00:35:13,140
and again and again and then changes

00:35:10,980 --> 00:35:14,819
your animation um generates a new frame

00:35:13,140 --> 00:35:18,329
moves an object changes the state of

00:35:14,819 --> 00:35:21,180
something what actually happened was

00:35:18,329 --> 00:35:22,950
that people had to set the actual

00:35:21,180 --> 00:35:26,339
timeout themselves so you decide that

00:35:22,950 --> 00:35:28,410
this timeout will repeat at 30 frames a

00:35:26,339 --> 00:35:30,960
second or 60 frames a second or 40 or 10

00:35:28,410 --> 00:35:32,460
or whatever and everyone would generate

00:35:30,960 --> 00:35:35,310
a new timeout for each

00:35:32,460 --> 00:35:36,930
animation on the screen efl has one

00:35:35,310 --> 00:35:39,000
single way of doing this it's called

00:35:36,930 --> 00:35:40,230
animators with an animator you just say

00:35:39,000 --> 00:35:42,960
whenever you have to animate and

00:35:40,230 --> 00:35:44,700
generate a frame call this function and

00:35:42,960 --> 00:35:46,500
it will animate at a given frame rate

00:35:44,700 --> 00:35:48,119
for the whole application in fact

00:35:46,500 --> 00:35:49,859
actually equal will try and synchronize

00:35:48,119 --> 00:35:51,810
all applications to start their frames

00:35:49,859 --> 00:35:53,160
at exactly the same point in time so

00:35:51,810 --> 00:35:55,140
even different applications will

00:35:53,160 --> 00:35:56,640
synchronize with each other and this

00:35:55,140 --> 00:35:59,700
makes life a lot easier where you don't

00:35:56,640 --> 00:36:01,020
have to handle knowing different frame

00:35:59,700 --> 00:36:03,089
rates for different parts of application

00:36:01,020 --> 00:36:05,130
but it also leads to much smoother and

00:36:03,089 --> 00:36:07,470
more synchronized apple arm animations

00:36:05,130 --> 00:36:11,460
at the same time so use those instead of

00:36:07,470 --> 00:36:14,940
timers it definitely helps so if you

00:36:11,460 --> 00:36:17,849
want to use threads turn to try and

00:36:14,940 --> 00:36:20,280
offload stuff it's really easy efl or ii

00:36:17,849 --> 00:36:21,839
corps has a they're equal threads and

00:36:20,280 --> 00:36:25,050
equal threads is basically a worker q a

00:36:21,839 --> 00:36:28,099
lot of this really looks I've this

00:36:25,050 --> 00:36:31,200
entire big fat articles about the mac OS

00:36:28,099 --> 00:36:32,730
grandcentral are threading the equal

00:36:31,200 --> 00:36:34,430
threading stuff is very very similar in

00:36:32,730 --> 00:36:36,780
that way from an API point of view

00:36:34,430 --> 00:36:38,940
unfortunately we don't have the same

00:36:36,780 --> 00:36:40,470
support at the kernel level for knowing

00:36:38,940 --> 00:36:43,170
how many cores are busy at any one time

00:36:40,470 --> 00:36:45,390
and scheduling appropriately because

00:36:43,170 --> 00:36:48,960
it's being done off in userspace but if

00:36:45,390 --> 00:36:50,700
such information is made available from

00:36:48,960 --> 00:36:53,160
the colonel in a way that we can use it

00:36:50,700 --> 00:36:54,900
nicely we could do that too but the API

00:36:53,160 --> 00:36:57,300
hides all of that so all you do is you

00:36:54,900 --> 00:36:58,980
put a job on a queue and all the worker

00:36:57,300 --> 00:37:00,720
threads happily go off and look at that

00:36:58,980 --> 00:37:03,210
it'll actually allocate as many worker

00:37:00,720 --> 00:37:07,430
threads as you have caused so it tries

00:37:03,210 --> 00:37:11,280
vaguely to not overload your machine um

00:37:07,430 --> 00:37:13,920
so that's in now here's the here's a

00:37:11,280 --> 00:37:17,160
hello world thing in efl if you want to

00:37:13,920 --> 00:37:20,580
write applications it's not very hard so

00:37:17,160 --> 00:37:24,180
if you start you just include elementary

00:37:20,580 --> 00:37:28,200
dot H create a main function yes that

00:37:24,180 --> 00:37:29,820
little weird thing here um is it that's

00:37:28,200 --> 00:37:32,310
thing there that's actually a macro that

00:37:29,820 --> 00:37:34,800
allows you to compile your application

00:37:32,310 --> 00:37:36,359
whereas both a binary and as a shared

00:37:34,800 --> 00:37:38,130
library so you can actually deal open

00:37:36,359 --> 00:37:40,589
the shared library and run it as an

00:37:38,130 --> 00:37:42,210
application it allows you to run write

00:37:40,589 --> 00:37:45,780
applications at star faster yes you

00:37:42,210 --> 00:37:48,360
could compile a binary with minus P

00:37:45,780 --> 00:37:51,000
ye or whatever it is arm to make it a

00:37:48,360 --> 00:37:53,610
also executable that said you could do

00:37:51,000 --> 00:37:55,320
that as well so it allows both of those

00:37:53,610 --> 00:37:57,150
methods but the macro basically hides

00:37:55,320 --> 00:37:59,670
that and creates a new entry point over

00:37:57,150 --> 00:38:02,070
there and so you just create a window

00:37:59,670 --> 00:38:07,470
show it and run it's as really as easy

00:38:02,070 --> 00:38:09,920
as that it's not very hard so if you

00:38:07,470 --> 00:38:12,300
want to handle your window being deleted

00:38:09,920 --> 00:38:14,850
just add a call back to handle a dear

00:38:12,300 --> 00:38:17,160
old delete request and a function on a

00:38:14,850 --> 00:38:25,170
request to delete just to exit really

00:38:17,160 --> 00:38:27,840
really easy and so now if we want to

00:38:25,170 --> 00:38:32,040
fill the window or something just create

00:38:27,840 --> 00:38:33,450
a box put a label in it hello world pack

00:38:32,040 --> 00:38:34,680
it at the end of the box because the box

00:38:33,450 --> 00:38:37,230
that's nothing in the end and just show

00:38:34,680 --> 00:38:39,900
up and then if you want the button again

00:38:37,230 --> 00:38:41,910
create button set text put at the end

00:38:39,900 --> 00:38:44,130
show it and if you click on the object

00:38:41,910 --> 00:38:46,230
call you on okay function which is that

00:38:44,130 --> 00:38:48,990
just to exit and that's how it that's as

00:38:46,230 --> 00:38:51,780
easy as it is and compiling is also very

00:38:48,990 --> 00:38:54,510
easy and you can do this in JavaScript

00:38:51,780 --> 00:38:58,050
to this is what elevate looks like um

00:38:54,510 --> 00:39:01,260
you just declare your window label I

00:38:58,050 --> 00:39:02,760
hello is a title you put a background in

00:39:01,260 --> 00:39:04,620
the previous example there was no

00:39:02,760 --> 00:39:09,000
background corsa utility function headed

00:39:04,620 --> 00:39:11,160
it for you um you had a box resize means

00:39:09,000 --> 00:39:12,990
the resize object part of the window you

00:39:11,160 --> 00:39:14,910
add an element a label you add a button

00:39:12,990 --> 00:39:18,270
the label and that's it here's in fact

00:39:14,910 --> 00:39:20,400
no code to this program at all zero code

00:39:18,270 --> 00:39:22,380
well actually there is on click function

00:39:20,400 --> 00:39:24,810
um but there's really no other code you

00:39:22,380 --> 00:39:27,660
just declare your GUI it looks a lot

00:39:24,810 --> 00:39:29,940
like HTML in that way um great bunch of

00:39:27,660 --> 00:39:32,760
divs and so on it's very easy to do very

00:39:29,940 --> 00:39:35,460
compact and it's a good way to rapidly

00:39:32,760 --> 00:39:37,470
create applications and running it it's

00:39:35,460 --> 00:39:39,900
really easy to I'm in fact actually you

00:39:37,470 --> 00:39:42,240
can put a hash bang you know hash bang

00:39:39,900 --> 00:39:44,840
user bin elevate or whatever at the top

00:39:42,240 --> 00:39:48,720
and that will also work just like a show

00:39:44,840 --> 00:39:50,840
that's it so one of the things the EFL

00:39:48,720 --> 00:39:54,330
is very good at is not just regular

00:39:50,840 --> 00:39:57,210
interfaces it's actually doing something

00:39:54,330 --> 00:39:59,579
interesting and fancy every single

00:39:57,210 --> 00:40:02,459
widget is an object you can

00:39:59,579 --> 00:40:04,499
sighs rotate you can fade in and out you

00:40:02,459 --> 00:40:05,849
can layer widgets on top of each other

00:40:04,499 --> 00:40:09,539
so they can be stacked and

00:40:05,849 --> 00:40:13,920
semi-transparent etc etc so this is an

00:40:09,539 --> 00:40:16,170
example of using an existing widget that

00:40:13,920 --> 00:40:19,349
does fancy things for you armed with

00:40:16,170 --> 00:40:24,839
widgets so create a window set a title

00:40:19,349 --> 00:40:26,849
on delete handle exiting now this adds a

00:40:24,839 --> 00:40:29,609
custom background which is in fact quite

00:40:26,849 --> 00:40:32,940
easy um you tell it the JPEG and it'll

00:40:29,609 --> 00:40:35,249
automatically scale it in size it um I

00:40:32,940 --> 00:40:37,380
will add a box a little slip button in

00:40:35,249 --> 00:40:40,799
the middle and you can see the preview

00:40:37,380 --> 00:40:42,839
up there then we'll add some text in

00:40:40,799 --> 00:40:45,479
there where it allows a bit of markup in

00:40:42,839 --> 00:40:49,559
your text people have asked for yes the

00:40:45,479 --> 00:40:53,700
text all supports arm complex texts so

00:40:49,559 --> 00:40:56,069
you can do Hebrew and Arabic as well as

00:40:53,700 --> 00:40:57,690
Hindi so it'll do complain um text

00:40:56,069 --> 00:40:59,999
composition and everything else I'm it

00:40:57,690 --> 00:41:02,160
uses half buzzed and free bitty and

00:40:59,999 --> 00:41:03,989
rearm lid line break and all sorts of

00:41:02,160 --> 00:41:06,119
other funky things Tom over there is to

00:41:03,989 --> 00:41:12,079
blame for that he's not a lot of that

00:41:06,119 --> 00:41:14,369
work um so now we'll create a list and

00:41:12,079 --> 00:41:15,809
just put a bunch of items list all these

00:41:14,369 --> 00:41:17,969
actually just these are just call back

00:41:15,809 --> 00:41:19,529
some parameters the the basic list

00:41:17,969 --> 00:41:22,680
widget is just designed to be very very

00:41:19,529 --> 00:41:26,400
simple and easy to use not very fancy so

00:41:22,680 --> 00:41:30,029
create a bunch of list items and then if

00:41:26,400 --> 00:41:34,529
you click on the flip button it'll

00:41:30,029 --> 00:41:37,319
literally flip like that so it literally

00:41:34,529 --> 00:41:39,839
flip around the cube it's that easy to

00:41:37,319 --> 00:41:44,160
do that so you can just have two widgets

00:41:39,839 --> 00:41:45,299
flip between each other so that's really

00:41:44,160 --> 00:41:49,680
what the code looks like at the end of

00:41:45,299 --> 00:41:54,209
the day it's not very much um well in

00:41:49,680 --> 00:41:56,699
you items it's not very much so a lot of

00:41:54,209 --> 00:41:58,319
people ask well what really is a scene

00:41:56,699 --> 00:41:59,759
graph how do you work with this one of

00:41:58,319 --> 00:42:03,269
the things you have to remember is that

00:41:59,759 --> 00:42:05,819
you don't draw you create you position

00:42:03,269 --> 00:42:07,469
objects one object can control the

00:42:05,819 --> 00:42:08,849
position and size and location of other

00:42:07,469 --> 00:42:11,670
objects so you can pack them in each

00:42:08,849 --> 00:42:13,470
other you just change properties and

00:42:11,670 --> 00:42:15,869
when you finish changing the proper

00:42:13,470 --> 00:42:18,660
the canvas evaluates the current state

00:42:15,869 --> 00:42:20,670
of the world and renders the changes so

00:42:18,660 --> 00:42:22,619
if actually nothing visually changed it

00:42:20,670 --> 00:42:25,619
actually goes and does nothing it just

00:42:22,619 --> 00:42:28,109
says nothing changed and avoids

00:42:25,619 --> 00:42:30,119
rendering it handles all the loading of

00:42:28,109 --> 00:42:32,130
fonts for you it handles rendering those

00:42:30,119 --> 00:42:35,099
fonts to glyphs it handles loading

00:42:32,130 --> 00:42:38,310
images and rendering all of those it

00:42:35,099 --> 00:42:40,380
handles trying to remove rendering so if

00:42:38,310 --> 00:42:41,730
you've got a big solid object covering

00:42:40,380 --> 00:42:44,250
another object and that object

00:42:41,730 --> 00:42:46,440
underneath moves or changes or fades in

00:42:44,250 --> 00:42:49,290
and out it will actually do nothing

00:42:46,440 --> 00:42:52,040
it'll convert that to a no-op um so you

00:42:49,290 --> 00:42:53,760
can avoid doing that yourself and

00:42:52,040 --> 00:42:55,710
because it's a very high level

00:42:53,760 --> 00:42:58,859
abstraction it makes it very easy for it

00:42:55,710 --> 00:43:01,080
to abstract to things like OpenGL so

00:42:58,859 --> 00:43:02,550
that's why there is a full OpenGL back

00:43:01,080 --> 00:43:05,640
in that puts everything for OpenGL

00:43:02,550 --> 00:43:08,849
textures every text is everything glyphs

00:43:05,640 --> 00:43:10,140
a whole bunch of vertices etc um so you

00:43:08,849 --> 00:43:15,180
don't have to know or care about that

00:43:10,140 --> 00:43:18,869
and it handles that for you so when you

00:43:15,180 --> 00:43:20,339
have a scene graph ok the reason why

00:43:18,869 --> 00:43:24,270
originally started seeing graph was

00:43:20,339 --> 00:43:28,230
actually thanks to Fredi co tragic omena

00:43:24,270 --> 00:43:30,000
from the groom team he wrote a known

00:43:28,230 --> 00:43:32,580
Kansas thing and I was really kind of

00:43:30,000 --> 00:43:35,369
cool and when I was writing a file

00:43:32,580 --> 00:43:39,270
manager way back when for enlightenment

00:43:35,369 --> 00:43:41,880
that was meant to be 4e 17 I discovered

00:43:39,270 --> 00:43:43,230
that really a canvas was a much better

00:43:41,880 --> 00:43:45,180
abstraction model for doing things like

00:43:43,230 --> 00:43:46,800
writing a file manager cuz really all

00:43:45,180 --> 00:43:49,619
your widgets were really a collection of

00:43:46,800 --> 00:43:50,849
icons and text and you know rectangles

00:43:49,619 --> 00:43:53,910
and so on and screen that you just moved

00:43:50,849 --> 00:43:55,500
around and manipulated so a canvas

00:43:53,910 --> 00:43:56,970
really is just an area in which you

00:43:55,500 --> 00:43:59,250
stick these objects and you move them

00:43:56,970 --> 00:44:03,330
resize them and impolite them widgets I

00:43:59,250 --> 00:44:05,160
really just pre-made sections of obvious

00:44:03,330 --> 00:44:08,280
elections of objects group together that

00:44:05,160 --> 00:44:10,020
automatically organized for you so

00:44:08,280 --> 00:44:12,359
generally speaking a canvas look

00:44:10,020 --> 00:44:13,920
something like that you have you know a

00:44:12,359 --> 00:44:16,170
bunch you have might have an icon the

00:44:13,920 --> 00:44:18,900
label I can leave a big nerd button

00:44:16,170 --> 00:44:20,339
widget here etc etc and a scroll bar or

00:44:18,900 --> 00:44:24,500
whatever on the side and the background

00:44:20,339 --> 00:44:24,500
canvas just as full of this stuff

00:44:25,840 --> 00:44:31,610
so you put all these together you can

00:44:28,250 --> 00:44:35,300
create anything a button is really loud

00:44:31,610 --> 00:44:36,770
background some text some overlay a bit

00:44:35,300 --> 00:44:38,840
more shiny stuff on top unfortunately

00:44:36,770 --> 00:44:40,880
Libre Office does a really horrible job

00:44:38,840 --> 00:44:42,950
of interpolating colors that's why the

00:44:40,880 --> 00:44:46,400
little black outline that's a bug should

00:44:42,950 --> 00:44:48,200
be fixed and all of those put together

00:44:46,400 --> 00:44:50,000
you end up with a button okay that's a

00:44:48,200 --> 00:44:52,430
really poor horrible representation of

00:44:50,000 --> 00:44:53,930
it but you just place one object on top

00:44:52,430 --> 00:44:57,290
of the other and you can make anything

00:44:53,930 --> 00:45:00,050
this actually allows a lot of freedom so

00:44:57,290 --> 00:45:02,780
designers and artists can if they can

00:45:00,050 --> 00:45:04,580
break up something into many layers and

00:45:02,780 --> 00:45:06,710
place them together which artists

00:45:04,580 --> 00:45:08,870
actually do moda most artists spent

00:45:06,710 --> 00:45:10,370
their days in Photoshop or as we'd

00:45:08,870 --> 00:45:12,020
like them to spend their days and they

00:45:10,370 --> 00:45:14,150
just divide all these you eyes into all

00:45:12,020 --> 00:45:16,490
these layers of objects or put on top of

00:45:14,150 --> 00:45:17,900
each other and every widget and every

00:45:16,490 --> 00:45:20,180
button and every check box and

00:45:17,900 --> 00:45:22,430
everything is just made up of these so

00:45:20,180 --> 00:45:24,080
for your artists to actually design new

00:45:22,430 --> 00:45:27,700
things actually very easy they work in

00:45:24,080 --> 00:45:31,430
the same paradigm they already work in

00:45:27,700 --> 00:45:34,310
so one library that helps you make these

00:45:31,430 --> 00:45:36,230
pre-made objects is called edge it

00:45:34,310 --> 00:45:38,360
allows you to design these objects in a

00:45:36,230 --> 00:45:43,970
text file unfortunately these text files

00:45:38,360 --> 00:45:45,740
and were never really intended to be the

00:45:43,970 --> 00:45:47,660
ultimate expression to love a designer

00:45:45,740 --> 00:45:50,240
artist they were really an intermediate

00:45:47,660 --> 00:45:53,870
stage of us getting data into a file so

00:45:50,240 --> 00:45:55,580
we could do something but unfortunately

00:45:53,870 --> 00:45:57,170
they've stuck around just like most

00:45:55,580 --> 00:45:58,580
technology you create something it works

00:45:57,170 --> 00:46:00,140
and everyone keeps using it and they

00:45:58,580 --> 00:46:01,910
extend it and use it and extend it and

00:46:00,140 --> 00:46:04,430
use it and there's really just no end to

00:46:01,910 --> 00:46:06,740
it but the edge files might be a bit

00:46:04,430 --> 00:46:10,490
verbose but they do allow you to design

00:46:06,740 --> 00:46:13,160
all this into a data file so all these

00:46:10,490 --> 00:46:15,800
data files have rules as to how this

00:46:13,160 --> 00:46:18,290
resizes how it scales where thing aligns

00:46:15,800 --> 00:46:20,000
and fits and what happens you know when

00:46:18,290 --> 00:46:22,310
you set a different scaling factor etc

00:46:20,000 --> 00:46:24,620
etc you can even put in scripting in

00:46:22,310 --> 00:46:27,830
their arm you can create the little

00:46:24,620 --> 00:46:33,920
circular dial things which roll down

00:46:27,830 --> 00:46:35,900
maybe we roll them oh there you are he's

00:46:33,920 --> 00:46:37,310
going create a little circular sliders

00:46:35,900 --> 00:46:39,060
so there's a widget in elementary a

00:46:37,310 --> 00:46:41,190
slider which which is like horizontal

00:46:39,060 --> 00:46:42,480
with just a change of the edge file on

00:46:41,190 --> 00:46:46,110
the theme you can make a little circular

00:46:42,480 --> 00:46:48,360
dial out of the same thing so really one

00:46:46,110 --> 00:46:51,810
of our crazy French people did that um

00:46:48,360 --> 00:46:57,450
as I all our French people are crazy but

00:46:51,810 --> 00:46:59,670
by definition yes and they're proud of

00:46:57,450 --> 00:47:04,110
being crazy which is actually kind of

00:46:59,670 --> 00:47:06,000
scary so you know all these edge files

00:47:04,110 --> 00:47:07,740
store all of this and data files so the

00:47:06,000 --> 00:47:09,090
entire look of your isn't user interface

00:47:07,740 --> 00:47:10,650
all your theme is just a data file

00:47:09,090 --> 00:47:13,110
somewhere on disk you just point to it

00:47:10,650 --> 00:47:14,670
it's not like 20 data files you go go

00:47:13,110 --> 00:47:16,920
hunting through it's actually quite

00:47:14,670 --> 00:47:19,050
simple um it's very very fast to load

00:47:16,920 --> 00:47:22,500
these files they're designed for runtime

00:47:19,050 --> 00:47:24,810
speed their design for the idea that

00:47:22,500 --> 00:47:27,000
your designer can design your look of

00:47:24,810 --> 00:47:28,950
you user interface not necessarily to

00:47:27,000 --> 00:47:30,750
layer exact layout of applications but

00:47:28,950 --> 00:47:32,400
what a button looks like what sliders

00:47:30,750 --> 00:47:33,660
look like how they behave they can do

00:47:32,400 --> 00:47:35,670
that completely separately to the

00:47:33,660 --> 00:47:37,260
programmer and later on when you're

00:47:35,670 --> 00:47:39,600
ready you just put the DA files together

00:47:37,260 --> 00:47:41,940
in presto at any point in time the data

00:47:39,600 --> 00:47:43,500
files can be replaced even by third

00:47:41,940 --> 00:47:45,450
parties as users they can create their

00:47:43,500 --> 00:47:49,080
own themes and so on it was specifically

00:47:45,450 --> 00:47:50,940
designed to make this easy so your

00:47:49,080 --> 00:47:53,040
entire s can look entirely different

00:47:50,940 --> 00:47:59,820
just with a theme file change and it's

00:47:53,040 --> 00:48:03,000
very very easy to do yeah um edge files

00:47:59,820 --> 00:48:09,200
look like this um they look somewhere in

00:48:03,000 --> 00:48:12,120
between CSS Jason and I guess HTML / XML

00:48:09,200 --> 00:48:15,300
it's really just a matter a bunch of

00:48:12,120 --> 00:48:17,340
properties you create a group you can

00:48:15,300 --> 00:48:20,280
say with what your resources are a bunch

00:48:17,340 --> 00:48:22,770
of images a background this tells the

00:48:20,280 --> 00:48:25,140
background to have an aspect ratio of 1

00:48:22,770 --> 00:48:28,470
i'm minimum maximum aspect ratio it

00:48:25,140 --> 00:48:31,230
allows a bit of fuzziness and it what is

00:48:28,470 --> 00:48:34,080
actually from what doesn't know what

00:48:31,230 --> 00:48:36,210
drives the aspect or the sizing in the

00:48:34,080 --> 00:48:38,460
image and then put a text label on top

00:48:36,210 --> 00:48:41,070
and text and then I can put a shadow

00:48:38,460 --> 00:48:44,640
thing and your result is something like

00:48:41,070 --> 00:48:46,890
that you notice that the same file looks

00:48:44,640 --> 00:48:49,170
like this but when it's small or

00:48:46,890 --> 00:48:51,150
horizontally the background doesn't get

00:48:49,170 --> 00:48:52,349
stretched it stays the correct aspect

00:48:51,150 --> 00:48:54,119
ratio the tech

00:48:52,349 --> 00:48:56,220
remain same but the shadows stretches

00:48:54,119 --> 00:49:00,470
and exactly the same here so one file

00:48:56,220 --> 00:49:07,499
can scale and resize to almost any arm

00:49:00,470 --> 00:49:11,160
state did also support scaling scalable

00:49:07,499 --> 00:49:12,900
you is so just by setting scaling factor

00:49:11,160 --> 00:49:14,160
the text of course it was set to scale

00:49:12,900 --> 00:49:18,239
or scale and the other things won't

00:49:14,160 --> 00:49:20,009
change so putting these all together in

00:49:18,239 --> 00:49:22,769
something like elementary which uses

00:49:20,009 --> 00:49:24,900
edge / theming you literally will get

00:49:22,769 --> 00:49:26,460
widgets the button looks like that

00:49:24,900 --> 00:49:28,259
versus button there that's actually

00:49:26,460 --> 00:49:30,839
multiple different layers the this

00:49:28,259 --> 00:49:32,160
widget and this frame look different the

00:49:30,839 --> 00:49:35,160
borders look different to the window

00:49:32,160 --> 00:49:38,279
manager etc etc just with some theme

00:49:35,160 --> 00:49:40,979
changes and scaling literally works like

00:49:38,279 --> 00:49:42,539
that interestingly the button is always

00:49:40,979 --> 00:49:43,829
large because there's something else in

00:49:42,539 --> 00:49:46,049
Elementary which enforces which call

00:49:43,829 --> 00:49:47,549
finger size and finger size is designed

00:49:46,049 --> 00:49:49,499
to always keep an element you're meant

00:49:47,549 --> 00:49:51,420
to touch with your finger or a mouse at

00:49:49,499 --> 00:49:55,859
least a certain size so it's easy to

00:49:51,420 --> 00:49:59,609
easy to hit elementary is the widget set

00:49:55,859 --> 00:50:02,819
that actually pulls this all together it

00:49:59,609 --> 00:50:05,009
just enforces certain policies to make

00:50:02,819 --> 00:50:06,569
things easier to save programmers having

00:50:05,009 --> 00:50:08,700
to implement that policy again and again

00:50:06,569 --> 00:50:10,349
themselves sometimes programmers don't

00:50:08,700 --> 00:50:11,969
realize how much policy it implements

00:50:10,349 --> 00:50:13,440
and go and try and implement those

00:50:11,969 --> 00:50:15,180
policies themselves repeatedly

00:50:13,440 --> 00:50:18,479
unfortunately it ends up conflicting

00:50:15,180 --> 00:50:20,130
with what elementary does it means that

00:50:18,479 --> 00:50:22,140
all your applications use the same theme

00:50:20,130 --> 00:50:24,690
same look well actually don't have to

00:50:22,140 --> 00:50:28,200
but they can arm it handles all the

00:50:24,690 --> 00:50:30,210
scalability set up etc etc and gives you

00:50:28,200 --> 00:50:32,339
all the widgets by default all the

00:50:30,210 --> 00:50:34,380
standard widgets you'd like to use and

00:50:32,339 --> 00:50:36,569
it's actually touch screen and finger

00:50:34,380 --> 00:50:38,089
friendly out of the box it also works

00:50:36,569 --> 00:50:43,700
with keyboard mouse and everything else

00:50:38,089 --> 00:50:46,369
um so that saves you a lot of work um

00:50:43,700 --> 00:50:48,930
the good thing here is that suddenly

00:50:46,369 --> 00:50:51,509
because everything is built on top of

00:50:48,930 --> 00:50:53,390
ever sand edge and all these layers your

00:50:51,509 --> 00:50:55,950
application will be able to render

00:50:53,390 --> 00:50:57,450
magically using opengl you change zero

00:50:55,950 --> 00:50:58,769
lines of code and suddenly application

00:50:57,450 --> 00:51:00,779
users opengl to render everything

00:50:58,769 --> 00:51:04,710
because it's handled all the way to the

00:51:00,779 --> 00:51:05,940
bottom it enforces finger size and all

00:51:04,710 --> 00:51:11,799
the other things as well

00:51:05,940 --> 00:51:14,049
oh look at that actually I got to the

00:51:11,799 --> 00:51:15,910
end um I think I was meaning to put next

00:51:14,049 --> 00:51:19,269
to slide at the end saying thank you but

00:51:15,910 --> 00:51:20,410
I think I forgot um I did it it was

00:51:19,269 --> 00:51:22,319
meant to be another sliding in and looks

00:51:20,410 --> 00:51:24,819
like a good exactly my 50 minutes um

00:51:22,319 --> 00:51:27,279
thank you very much I missed my question

00:51:24,819 --> 00:51:30,249
and answer slide um I hope I didn't bore

00:51:27,279 --> 00:51:35,740
you too much if you're any questions go

00:51:30,249 --> 00:51:39,309
stick your hand in the air now there

00:51:35,740 --> 00:51:41,470
will be any 17 release we we promised to

00:51:39,309 --> 00:51:44,049
release tfl and we did released earful

00:51:41,470 --> 00:51:45,999
10 last year in January we're at least

00:51:44,049 --> 00:51:48,999
one dot one only like about two months

00:51:45,999 --> 00:51:52,119
ago and we even did a 101 in a mean so

00:51:48,999 --> 00:51:54,430
we will do it but we will not tell you

00:51:52,119 --> 00:51:56,559
in it's meant to be magic it it's like a

00:51:54,430 --> 00:51:59,769
present everyone tells you when it's

00:51:56,559 --> 00:52:02,319
going to happen it's not a surprise so

00:51:59,769 --> 00:52:03,640
it will happen just trust us but in the

00:52:02,319 --> 00:52:06,369
meantime we do what we call rolling

00:52:03,640 --> 00:52:10,420
releases and Aurora in Greece you do svn

00:52:06,369 --> 00:52:13,329
check out blah presto and every new

00:52:10,420 --> 00:52:16,329
release is just svn update actually but

00:52:13,329 --> 00:52:18,160
in all seriousness it's something that

00:52:16,329 --> 00:52:20,890
most people don't understand about

00:52:18,160 --> 00:52:23,410
earful development RS again tends to be

00:52:20,890 --> 00:52:26,380
more stable than a lot of open source

00:52:23,410 --> 00:52:28,749
releases like release projects so a lot

00:52:26,380 --> 00:52:30,819
of projects released our balls our daily

00:52:28,749 --> 00:52:33,099
svn checkouts and it check out in time

00:52:30,819 --> 00:52:35,170
tend to be about the same level of

00:52:33,099 --> 00:52:36,700
stability yes we do actually add bugs

00:52:35,170 --> 00:52:38,619
every now and again it does happen and

00:52:36,700 --> 00:52:41,499
but they do actually get fixed fairly

00:52:38,619 --> 00:52:43,269
quickly um because all of us actually

00:52:41,499 --> 00:52:46,390
eat our own dog food we live obviously

00:52:43,269 --> 00:52:48,099
and we SP and check out rebuild and we

00:52:46,390 --> 00:52:50,769
use that window manager we use those

00:52:48,099 --> 00:52:52,839
libraries every single day so if there's

00:52:50,769 --> 00:52:55,690
a bug that we suffer from we fix it

00:52:52,839 --> 00:52:57,299
because it's bothering us so our s we

00:52:55,690 --> 00:52:59,829
intend to be very very stable arm

00:52:57,299 --> 00:53:03,910
compared to a lot of people's trunk or

00:52:59,829 --> 00:53:06,480
head projects so anyway it'll happen

00:53:03,910 --> 00:53:10,410
when it happens we're working on it oh

00:53:06,480 --> 00:53:10,410
yeah um yes

00:53:19,630 --> 00:53:25,730
okay question was about should i

00:53:23,240 --> 00:53:28,190
elaborate on samsung working on e FL and

00:53:25,730 --> 00:53:37,070
Tizen just to give the world an open

00:53:28,190 --> 00:53:43,190
phone in what way um no is it ok we're

00:53:37,070 --> 00:53:44,750
we're doing it because when no we're not

00:53:43,190 --> 00:53:47,630
doing because Android is evil enclosed

00:53:44,750 --> 00:53:50,030
it's because we don't have many options

00:53:47,630 --> 00:53:52,610
in this world right now for an OS that

00:53:50,030 --> 00:53:56,090
is open there's not very much I'm

00:53:52,610 --> 00:54:00,140
Android is partly open its open at

00:53:56,090 --> 00:54:02,390
Google's discretion that's the reality

00:54:00,140 --> 00:54:06,620
of it um they have done that as of

00:54:02,390 --> 00:54:08,330
Android three armed so Tizen is an

00:54:06,620 --> 00:54:12,050
opportunity to actually have a much more

00:54:08,330 --> 00:54:14,480
open platform and reality is choice is

00:54:12,050 --> 00:54:16,640
good it is good for you the consumer is

00:54:14,480 --> 00:54:18,920
good for under the OEM it is good for

00:54:16,640 --> 00:54:20,690
the manufacturer if there is only one

00:54:18,920 --> 00:54:22,910
operating system in one software stack

00:54:20,690 --> 00:54:24,590
guess who controls the world and who

00:54:22,910 --> 00:54:26,600
tells you what to do the people who run

00:54:24,590 --> 00:54:30,950
that so having choices good it's good

00:54:26,600 --> 00:54:35,710
for everybody um no matter what so yeah

00:54:30,950 --> 00:54:40,390
um it's good for us it's good for you oh

00:54:35,710 --> 00:54:43,390
hehe was here first kiss oh yeah okay

00:54:40,390 --> 00:54:43,390
Chris

00:54:45,250 --> 00:54:52,070
you can expect a Tizen device when it is

00:54:48,110 --> 00:54:53,600
a publicly announced no I'll put it I

00:54:52,070 --> 00:54:55,430
will never ever tell you a product

00:54:53,600 --> 00:54:57,560
release date I will tell you many things

00:54:55,430 --> 00:54:59,120
that are pertinent and a technical and a

00:54:57,560 --> 00:55:00,770
useful you will never get a product

00:54:59,120 --> 00:55:01,790
release data out of me until it's

00:55:00,770 --> 00:55:04,940
already been splashed out in the

00:55:01,790 --> 00:55:07,880
internet and public anyway so yeah right

00:55:04,940 --> 00:55:17,510
oh I think we have about two minutes

00:55:07,880 --> 00:55:19,700
quick no they don't um the elevat-- is

00:55:17,510 --> 00:55:23,000
very very specifically written to make

00:55:19,700 --> 00:55:25,400
it look like JavaScript like Jason and

00:55:23,000 --> 00:55:27,290
jars from declarative set up it's very

00:55:25,400 --> 00:55:31,010
very specifically set up that way the

00:55:27,290 --> 00:55:32,360
python bindings you psyphon um so it's a

00:55:31,010 --> 00:55:33,650
very very very different set of

00:55:32,360 --> 00:55:35,510
instruction no we don't have anything

00:55:33,650 --> 00:55:38,600
general and that is actually something

00:55:35,510 --> 00:55:40,460
someone has suggested that we tag our

00:55:38,600 --> 00:55:46,120
api's and everything else so we can also

00:55:40,460 --> 00:55:55,850
generate much more easily so okay right

00:55:46,120 --> 00:55:57,530
quick yes embryo the question is that he

00:55:55,850 --> 00:55:59,510
read on the wiki page ad embryos based

00:55:57,530 --> 00:56:01,640
on small yes embryos based on small

00:55:59,510 --> 00:56:04,070
which is actually what it was called the

00:56:01,640 --> 00:56:05,870
four was called porn and small is

00:56:04,070 --> 00:56:07,870
actually a derivative of what was

00:56:05,870 --> 00:56:11,710
originally a see interpreter and

00:56:07,870 --> 00:56:13,820
actually would interpret see and yeah

00:56:11,710 --> 00:56:15,530
because it was really really small

00:56:13,820 --> 00:56:17,180
actually really what I wanted is I want

00:56:15,530 --> 00:56:21,050
something that's small didn't use much

00:56:17,180 --> 00:56:24,560
was small in code was small in memory

00:56:21,050 --> 00:56:27,440
footprint ah end was completely

00:56:24,560 --> 00:56:29,360
sandboxed out of the box small had zero

00:56:27,440 --> 00:56:31,670
access to anything at all in system ii

00:56:29,360 --> 00:56:33,350
couldn't mal Alec memory it couldn't

00:56:31,670 --> 00:56:36,020
load a file it could do nothing unless

00:56:33,350 --> 00:56:38,660
you expose that to it so therefore for

00:56:36,020 --> 00:56:40,310
security reasons it means a theme can't

00:56:38,660 --> 00:56:43,190
do anything unless you expose that to

00:56:40,310 --> 00:56:46,750
the script so it's basically as secure

00:56:43,190 --> 00:56:46,750
as your bindings are so to speak

00:56:49,050 --> 00:56:57,240
I have spent like zero effort was

00:56:54,030 --> 00:56:59,670
already fast as it came was already fast

00:56:57,240 --> 00:57:02,400
so embryo is just a fork of that where

00:56:59,670 --> 00:57:05,310
the original small code was not 64 bit

00:57:02,400 --> 00:57:06,720
clean it barely worked on Linux it was

00:57:05,310 --> 00:57:09,150
basically pretty much a window centric

00:57:06,720 --> 00:57:11,780
project so anyway thank you very much

00:57:09,150 --> 00:57:11,780

YouTube URL: https://www.youtube.com/watch?v=HfcFbHQWqu8


