Title: Debian packaging for beginners
Publication date: 2013-02-05
Playlist: FOSDEM 2012
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,920 --> 00:00:07,710
okay can the people on the back row can

00:00:04,170 --> 00:00:11,490
hear me yes okay most of the

00:00:07,710 --> 00:00:14,580
presentation will be hands-on usually my

00:00:11,490 --> 00:00:17,010
hands on the keyboard the idea is to

00:00:14,580 --> 00:00:20,130
show you how to build a very trivial

00:00:17,010 --> 00:00:22,699
debian package so you could later try

00:00:20,130 --> 00:00:25,800
that at home I will do the bare minimum

00:00:22,699 --> 00:00:29,189
intentionally in order to keep it as

00:00:25,800 --> 00:00:31,050
simple as possible I decided to go

00:00:29,189 --> 00:00:33,930
through the process with a lot of trial

00:00:31,050 --> 00:00:35,430
and error so you'll learn something

00:00:33,930 --> 00:00:37,200
you're not allowed to show you the end

00:00:35,430 --> 00:00:43,500
result which is sometimes hard to

00:00:37,200 --> 00:00:45,210
understand with all the details if you

00:00:43,500 --> 00:00:47,460
have if you have questions in the middle

00:00:45,210 --> 00:00:49,079
you're welcome to raise your hand at the

00:00:47,460 --> 00:00:53,789
end if time allows we'll do a Q&A

00:00:49,079 --> 00:00:57,320
session so what is the depth file in

00:00:53,789 --> 00:01:01,500
essence it's a sophisticated way to

00:00:57,320 --> 00:01:05,610
distribute software the idea is it for

00:01:01,500 --> 00:01:08,159
it to also be simple as not only we

00:01:05,610 --> 00:01:09,750
don't want it to be too complex so we

00:01:08,159 --> 00:01:12,530
try to keep it simple but still

00:01:09,750 --> 00:01:16,350
sophisticated it's a delicate balance

00:01:12,530 --> 00:01:19,170
it's simple because it's just an archive

00:01:16,350 --> 00:01:22,350
very similar to Tao ball but Debian

00:01:19,170 --> 00:01:24,689
decided to use our which if you know

00:01:22,350 --> 00:01:27,119
tower the tower is tape archive and our

00:01:24,689 --> 00:01:29,340
ingestion archive the differences are

00:01:27,119 --> 00:01:33,030
has an index so it's easier to extract

00:01:29,340 --> 00:01:36,540
bigger files the sophisticated part is

00:01:33,030 --> 00:01:39,000
the dev files also hold metadata about

00:01:36,540 --> 00:01:41,310
the software they provide so it's not

00:01:39,000 --> 00:01:44,189
only dumping files on your filesystem it

00:01:41,310 --> 00:01:48,149
actually has a metadata which tells them

00:01:44,189 --> 00:01:50,790
about dependencies what you should do

00:01:48,149 --> 00:01:54,329
with certain files they have triggers to

00:01:50,790 --> 00:01:55,740
other software it's important for the

00:01:54,329 --> 00:01:57,899
integration with the whole operation

00:01:55,740 --> 00:02:00,869
system all the whole packaging system

00:01:57,899 --> 00:02:04,579
and we of course see the sophisticated

00:02:00,869 --> 00:02:04,579
part for this slide

00:02:05,799 --> 00:02:11,360
how do we create one well the very short

00:02:08,780 --> 00:02:14,470
version is a utility called check

00:02:11,360 --> 00:02:17,030
install it's actually a wrapper behind

00:02:14,470 --> 00:02:19,730
configure and make make install it

00:02:17,030 --> 00:02:23,150
registers which files were installed it

00:02:19,730 --> 00:02:26,660
knows automatically to create a Debian

00:02:23,150 --> 00:02:30,050
package from that it's it does its work

00:02:26,660 --> 00:02:35,660
so you can use it but it doesn't really

00:02:30,050 --> 00:02:38,150
create a very standard ik Deb file in

00:02:35,660 --> 00:02:41,390
the eyes of Debian developers because

00:02:38,150 --> 00:02:43,790
Debian has a lot of policies and quality

00:02:41,390 --> 00:02:46,370
checks and usually they've been check

00:02:43,790 --> 00:02:49,400
install only produces the basic stuff

00:02:46,370 --> 00:02:52,459
and has a lot of problems so it does

00:02:49,400 --> 00:02:55,580
work but you will never be able to take

00:02:52,459 --> 00:02:57,860
that Deb and put it into the Debian

00:02:55,580 --> 00:02:59,750
official distribution you can install it

00:02:57,860 --> 00:03:01,519
on your own machine but Debian will

00:02:59,750 --> 00:03:05,230
reject it would they would say you

00:03:01,519 --> 00:03:09,140
didn't do any QA checks forget about it

00:03:05,230 --> 00:03:12,620
the short answer would be to use the deg

00:03:09,140 --> 00:03:14,900
build package utility it's a wrapper

00:03:12,620 --> 00:03:17,959
around other utilities which already

00:03:14,900 --> 00:03:20,180
provided by Debian but it makes our life

00:03:17,959 --> 00:03:24,590
very easy just of course more high-level

00:03:20,180 --> 00:03:26,900
wrappers around that as well and the

00:03:24,590 --> 00:03:32,030
long answer will do it during the

00:03:26,900 --> 00:03:33,650
presentation and this presentation isn't

00:03:32,030 --> 00:03:35,750
a replacement for the Debian

00:03:33,650 --> 00:03:39,410
documentation it's just a short intro

00:03:35,750 --> 00:03:42,920
when I wanted to become became become a

00:03:39,410 --> 00:03:44,780
Debian developer seven years ago I

00:03:42,920 --> 00:03:47,690
started with going to someone that will

00:03:44,780 --> 00:03:49,850
actually show me some of these stuff

00:03:47,690 --> 00:03:52,010
instead of just reading the whole

00:03:49,850 --> 00:03:54,140
documentation so reading is good but

00:03:52,010 --> 00:03:56,620
sometimes you just need a real world

00:03:54,140 --> 00:03:56,620
example

00:03:58,220 --> 00:04:05,040
okay um before that we're going to

00:04:03,510 --> 00:04:07,730
switch a little bit between screens

00:04:05,040 --> 00:04:07,730
today

00:04:35,889 --> 00:04:44,469
do we have a stand for the mic any idea

00:04:40,689 --> 00:04:44,469
something to put the mic on

00:04:49,769 --> 00:05:02,019
thank you very much but now okay so will

00:04:59,229 --> 00:05:05,789
imitate the process of really from the

00:05:02,019 --> 00:05:05,789
beginning we have

00:05:16,950 --> 00:05:26,280
okay so we have download a terrible of

00:05:23,130 --> 00:05:28,020
some kind of software I'm using a

00:05:26,280 --> 00:05:30,540
utility someone built for the same

00:05:28,020 --> 00:05:33,690
lecture and the last debian cough it's

00:05:30,540 --> 00:05:36,540
called the pony and you will see what it

00:05:33,690 --> 00:05:39,210
does in a second the idea is that most

00:05:36,540 --> 00:05:42,450
files you download if it's source code

00:05:39,210 --> 00:05:45,810
it will be at RG Zed or eight-hour the

00:05:42,450 --> 00:05:47,970
visible image usually you have the name

00:05:45,810 --> 00:05:51,500
of the package and the version okay

00:05:47,970 --> 00:05:51,500
we later see what it's useful

00:06:03,319 --> 00:06:08,139
and of course we get a directory by the

00:06:05,689 --> 00:06:08,139
same name

00:06:15,460 --> 00:06:19,000
so we'll do the regular process just to

00:06:17,800 --> 00:06:22,590
see what the program does

00:06:19,000 --> 00:06:22,590
so that's configure and make

00:06:27,890 --> 00:06:33,410
and that's all this software does okay

00:06:30,110 --> 00:06:36,980
so that's that dummy utility too so

00:06:33,410 --> 00:06:42,350
we'll have a good example okay so we'll

00:06:36,980 --> 00:06:44,690
start with running dpkg build package

00:06:42,350 --> 00:06:46,820
and it will start to shutting us because

00:06:44,690 --> 00:06:52,040
we actually didn't do anything except

00:06:46,820 --> 00:06:54,830
extracting the original software and

00:06:52,040 --> 00:06:56,750
we'll get oh we can't open Debian

00:06:54,830 --> 00:07:00,350
changelog file for reading no such

00:06:56,750 --> 00:07:04,790
filing directory so we'll do the

00:07:00,350 --> 00:07:07,840
directory which for general knowledge is

00:07:04,790 --> 00:07:11,510
where all the Debian stuff is going to

00:07:07,840 --> 00:07:13,250
even we try to even put patches over

00:07:11,510 --> 00:07:15,500
there instead of changing the original

00:07:13,250 --> 00:07:18,200
code so they'll be a total separation

00:07:15,500 --> 00:07:20,870
between what's what come from upstream

00:07:18,200 --> 00:07:23,420
and what is part of the package okay so

00:07:20,870 --> 00:07:25,550
it and it's also useful because if you

00:07:23,420 --> 00:07:28,370
want to take a package from it from a

00:07:25,550 --> 00:07:29,690
debian source package it's easy if you

00:07:28,370 --> 00:07:34,250
don't have to diff the sauce you just

00:07:29,690 --> 00:07:37,250
take the patch it's much easier and for

00:07:34,250 --> 00:07:42,340
creating the change log file we use a

00:07:37,250 --> 00:07:42,340
utility that's called dch

00:07:47,440 --> 00:07:52,780
and we'll get something like that

00:07:49,050 --> 00:07:55,030
there's the all the bold letters the

00:07:52,780 --> 00:07:57,490
upper letters are some kind of variables

00:07:55,030 --> 00:07:59,560
we'll replace him in a second but the

00:07:57,490 --> 00:08:01,870
idea he is to have the name of the

00:07:59,560 --> 00:08:03,430
package the version the part of Debian

00:08:01,870 --> 00:08:07,780
you want to upload to which usually

00:08:03,430 --> 00:08:09,910
unstable in the changelog usually

00:08:07,780 --> 00:08:12,970
initial releases for Debian our closing

00:08:09,910 --> 00:08:14,830
bug which declares I'm going to I'm

00:08:12,970 --> 00:08:19,060
going to package this and this software

00:08:14,830 --> 00:08:21,700
from this website so it's used to we're

00:08:19,060 --> 00:08:25,000
used to close these bugs on the first

00:08:21,700 --> 00:08:27,790
upload this also prevents a case where

00:08:25,000 --> 00:08:29,950
two people try to package the same

00:08:27,790 --> 00:08:33,070
software for Debian so the first one

00:08:29,950 --> 00:08:35,320
that's the own the bug is the one that's

00:08:33,070 --> 00:08:37,150
going to maintain that package and you

00:08:35,320 --> 00:08:39,970
get your name email and of course the

00:08:37,150 --> 00:08:45,240
date of the change log entry this is why

00:08:39,970 --> 00:08:45,240
dch is considered to be your best friend

00:08:46,470 --> 00:08:53,530
and I'll just save it in a second

00:08:50,620 --> 00:08:58,810
I want to show you another option of

00:08:53,530 --> 00:09:01,150
this eh so for the next item we want to

00:08:58,810 --> 00:09:02,980
add we get a new line and it of course

00:09:01,150 --> 00:09:04,930
update the time step it's very useful

00:09:02,980 --> 00:09:06,820
when you want to edit files and

00:09:04,930 --> 00:09:10,800
especially it keeps the right format of

00:09:06,820 --> 00:09:14,590
the change log file and saves you from

00:09:10,800 --> 00:09:16,750
counting spaces or thinking well should

00:09:14,590 --> 00:09:18,700
be a space before the double - or after

00:09:16,750 --> 00:09:24,400
and things like that just use this eh

00:09:18,700 --> 00:09:27,840
it's very easy and of course we can I'm

00:09:24,400 --> 00:09:27,840
jumping ahead a little bit

00:09:36,650 --> 00:09:39,250
nope

00:09:39,840 --> 00:09:45,650
yes I should put some kind of version

00:09:42,240 --> 00:09:45,650
before trying to upgrade it

00:10:01,380 --> 00:10:06,430
so for example for the next version I

00:10:04,150 --> 00:10:09,640
only gave the version number and I get

00:10:06,430 --> 00:10:17,470
the whole template as a gift so that's

00:10:09,640 --> 00:10:23,020
easy okay so we did a debian change log

00:10:17,470 --> 00:10:25,810
file and we try to build again okay

00:10:23,020 --> 00:10:28,990
they BN control no such file in the

00:10:25,810 --> 00:10:32,110
directory so we create this file just

00:10:28,990 --> 00:10:34,350
for you to understand what this file is

00:10:32,110 --> 00:10:34,350
about

00:10:37,900 --> 00:10:44,529
so that's the LibreOffice presenters

00:10:41,620 --> 00:10:46,390
Console extension but it triggers only

00:10:44,529 --> 00:10:48,940
when you have more than one screen but

00:10:46,390 --> 00:10:52,720
if you double the mirror I say this but

00:10:48,940 --> 00:10:54,370
you you as well usually I should only

00:10:52,720 --> 00:10:56,440
see one of them and you should just see

00:10:54,370 --> 00:11:00,180
the presentation so I'm going to switch

00:10:56,440 --> 00:11:00,180
to show you like this

00:11:06,060 --> 00:11:12,690
okay so essentially the Debian control

00:11:09,510 --> 00:11:16,470
files controls what we create it has the

00:11:12,690 --> 00:11:20,640
information of the source package and

00:11:16,470 --> 00:11:23,100
the binary package the idea is that

00:11:20,640 --> 00:11:26,370
binary packages are things you install

00:11:23,100 --> 00:11:27,960
in order to get a program or different

00:11:26,370 --> 00:11:30,570
files they don't have to be big Maori

00:11:27,960 --> 00:11:32,960
files and the source program is of

00:11:30,570 --> 00:11:37,440
course the source

00:11:32,960 --> 00:11:39,660
notice that binary a package doesn't

00:11:37,440 --> 00:11:42,120
necessarily contains B now if files okay

00:11:39,660 --> 00:11:46,410
just a general concept we'll get to it

00:11:42,120 --> 00:11:50,040
later so it has what to create which

00:11:46,410 --> 00:11:53,100
architecture and and what is needed to

00:11:50,040 --> 00:11:54,840
do for building your package and of

00:11:53,100 --> 00:11:59,760
course who is the maintainer which is

00:11:54,840 --> 00:12:01,400
probably you and of course the name of

00:11:59,760 --> 00:12:04,500
the sauce package should be identical

00:12:01,400 --> 00:12:07,170
today to that part in the change log

00:12:04,500 --> 00:12:10,260
file otherwise you'll get a complaint so

00:12:07,170 --> 00:12:12,530
we'll try to create a very quote a quick

00:12:10,260 --> 00:12:12,530
file

00:13:18,390 --> 00:13:26,020
let's see if that's enough any question

00:13:23,440 --> 00:13:29,310
about the fields in the file they quite

00:13:26,020 --> 00:13:30,520
they are usually self-explanatory

00:13:29,310 --> 00:13:34,360
architecture

00:13:30,520 --> 00:13:37,900
any means we will build to every binary

00:13:34,360 --> 00:13:41,170
architecture so that's I free 86 amd64

00:13:37,900 --> 00:13:43,000
in whatever we have our Keturah

00:13:41,170 --> 00:13:45,100
independent which is usually used for

00:13:43,000 --> 00:13:48,820
documentation or scripts or anything

00:13:45,100 --> 00:13:50,290
that is not binary the name of the

00:13:48,820 --> 00:13:52,930
source package and the name of the

00:13:50,290 --> 00:13:56,790
binary package our Anton usually aren't

00:13:52,930 --> 00:14:00,070
identical this could have been leap pony

00:13:56,790 --> 00:14:02,460
pony - PHP depends on what the package

00:14:00,070 --> 00:14:02,460
holds

00:14:18,080 --> 00:14:21,430
yeah my mistake

00:14:28,860 --> 00:14:38,190
okay so we move a step closer so we see

00:14:34,830 --> 00:14:41,270
the wrapper of the de package typically

00:14:38,190 --> 00:14:44,460
build packets started using others other

00:14:41,270 --> 00:14:46,320
de package commands Inc noticed I

00:14:44,460 --> 00:14:48,570
installed a better version of Libre

00:14:46,320 --> 00:14:50,820
Office and it's no part of Debian so it

00:14:48,570 --> 00:14:54,360
get complaints about it but just ignore

00:14:50,820 --> 00:14:56,700
it we clean we try to clean the our

00:14:54,360 --> 00:14:58,680
environment in order to start the build

00:14:56,700 --> 00:15:06,840
and I get a complaint about daredevil

00:14:58,680 --> 00:15:09,870
rule files which is missing the raw

00:15:06,840 --> 00:15:12,240
files is indeed one rule to fight to

00:15:09,870 --> 00:15:13,950
rule them all one file to rule them all

00:15:12,240 --> 00:15:16,860
the idea is this is the file that

00:15:13,950 --> 00:15:21,930
actually does this see actually includes

00:15:16,860 --> 00:15:24,900
the series of instructions so that's the

00:15:21,930 --> 00:15:26,820
heart of the building process it has the

00:15:24,900 --> 00:15:30,000
it calls all the other scripts and

00:15:26,820 --> 00:15:34,500
commands which are used in the process

00:15:30,000 --> 00:15:37,740
of the creation we'll go over them later

00:15:34,500 --> 00:15:42,390
at the moment I'll use a very short

00:15:37,740 --> 00:15:44,820
version of it the idea behind it is to

00:15:42,390 --> 00:15:49,170
save you a lot of time and dealing with

00:15:44,820 --> 00:15:53,480
this file it's very short and on the way

00:15:49,170 --> 00:15:53,480
I'll show you a useful template for that

00:16:15,580 --> 00:16:23,120
so if we will take the comments just to

00:16:19,100 --> 00:16:29,589
show you how short it is that's the

00:16:23,120 --> 00:16:29,589
whole file and it of course

00:16:34,130 --> 00:16:39,649
and of course a very short file but this

00:16:36,949 --> 00:16:43,399
will later be expanded to a lot of

00:16:39,649 --> 00:16:46,759
commands if we times aloud will go over

00:16:43,399 --> 00:16:49,509
the longer longer version and the

00:16:46,759 --> 00:16:49,509
previous one actually

00:16:57,140 --> 00:17:04,339
which looks something like this with a

00:17:01,820 --> 00:17:06,320
lot of steps so if we want to clean if

00:17:04,339 --> 00:17:10,730
you want to install if you want to build

00:17:06,320 --> 00:17:12,950
there's more instructions usually for

00:17:10,730 --> 00:17:16,790
simple packages you don't really need to

00:17:12,950 --> 00:17:20,570
know what's going behind the scenes it

00:17:16,790 --> 00:17:24,470
follows the regular step of configure

00:17:20,570 --> 00:17:28,100
make make install unless you want to add

00:17:24,470 --> 00:17:31,580
something you can use for now the

00:17:28,100 --> 00:17:33,800
shortened version you can find it within

00:17:31,580 --> 00:17:35,330
the Debian documentation how to add

00:17:33,800 --> 00:17:38,960
parts to the old version to the new

00:17:35,330 --> 00:17:41,060
version it's easy at the Mon I think we

00:17:38,960 --> 00:17:45,790
can skip it and go forward and to in

00:17:41,060 --> 00:17:45,790
order to get some kind of result yes

00:18:04,190 --> 00:18:12,700
okay so the question was our project is

00:18:08,330 --> 00:18:16,640
using Simic files what do we do

00:18:12,700 --> 00:18:20,450
so usually you can have Bill dependency

00:18:16,640 --> 00:18:24,260
on Simic files rewrite the whole tool it

00:18:20,450 --> 00:18:30,140
doesn't really matter the Debian rules

00:18:24,260 --> 00:18:32,390
file at the beginning his mark is just

00:18:30,140 --> 00:18:34,610
make file but if you change the line you

00:18:32,390 --> 00:18:36,320
can run a Simic script or whatever it

00:18:34,610 --> 00:18:37,940
could be been a fight or Python script

00:18:36,320 --> 00:18:39,800
we don't care okay

00:18:37,940 --> 00:18:42,070
so just put your instructions here

00:18:39,800 --> 00:18:47,750
everything will be fine

00:18:42,070 --> 00:18:50,990
there's the script does looks look for

00:18:47,750 --> 00:18:52,880
some of these make targets but you can

00:18:50,990 --> 00:18:57,130
easily replicate it with C make or any

00:18:52,880 --> 00:18:57,130
other scripting language okay

00:18:59,980 --> 00:19:03,280
vector trying

00:19:09,320 --> 00:19:17,420
okay so we get a lot of warnings first

00:19:12,920 --> 00:19:19,250
of all we almost have a DEP file in the

00:19:17,420 --> 00:19:21,410
process we got a lot of warnings and

00:19:19,250 --> 00:19:26,750
because I want to go over here over the

00:19:21,410 --> 00:19:29,000
output we see that the main reason is we

00:19:26,750 --> 00:19:31,940
forgot the Debian compat file debian

00:19:29,000 --> 00:19:36,650
copepod file is a file that says to the

00:19:31,940 --> 00:19:41,540
dev helper scripts which deliverin rules

00:19:36,650 --> 00:19:44,600
files starts you see a lot of helper

00:19:41,540 --> 00:19:46,850
scripts here so the idea of the compact

00:19:44,600 --> 00:19:48,680
file to tell these scripts which

00:19:46,850 --> 00:19:51,590
compatibility level you're running of

00:19:48,680 --> 00:19:54,280
and Debian always changed just changes

00:19:51,590 --> 00:19:56,660
and increases the compatibility level

00:19:54,280 --> 00:20:01,100
we'll use version eight at the moment

00:19:56,660 --> 00:20:02,750
because of the new script it works fine

00:20:01,100 --> 00:20:05,810
even with version five but then you have

00:20:02,750 --> 00:20:08,380
to use the old versions file the all the

00:20:05,810 --> 00:20:08,380
rules file

00:20:16,130 --> 00:20:19,520
19 a second

00:20:37,130 --> 00:20:41,840
the question was about compatibility

00:20:39,140 --> 00:20:47,809
levels so this is from the dev helperman

00:20:41,840 --> 00:20:50,179
page you go to newer versions so you see

00:20:47,809 --> 00:20:53,660
that each compatibility level has a few

00:20:50,179 --> 00:20:56,419
changes and in order to support them all

00:20:53,660 --> 00:20:59,299
the maintainer says I'm at compat level

00:20:56,419 --> 00:21:01,490
5 so I know this script will behave in a

00:20:59,299 --> 00:21:02,929
certain manner and if I want the new

00:21:01,490 --> 00:21:03,470
behavior I'll just change the version

00:21:02,929 --> 00:21:11,630
here

00:21:03,470 --> 00:21:14,380
it's answer your question great so we

00:21:11,630 --> 00:21:14,380
try to build again

00:21:19,940 --> 00:21:24,490
okay let's roll with this back up

00:21:25,440 --> 00:21:34,980
okay so we started here and we see it

00:21:32,060 --> 00:21:37,320
understands what it what it should do

00:21:34,980 --> 00:21:40,530
because it's read the world's files and

00:21:37,320 --> 00:21:44,670
the control files and it starts by

00:21:40,530 --> 00:21:48,600
cleaning our environment okay

00:21:44,670 --> 00:21:51,630
faker is a utility usually based usually

00:21:48,600 --> 00:21:54,120
used in order for these scripts to think

00:21:51,630 --> 00:21:57,630
your route which is really needed for

00:21:54,120 --> 00:21:59,490
making stall part most making store

00:21:57,630 --> 00:22:03,270
scripts checks if your route because

00:21:59,490 --> 00:22:07,920
they try to write into /usr and other

00:22:03,270 --> 00:22:09,960
system library directories so this

00:22:07,920 --> 00:22:11,580
script says well it's okay don't worry

00:22:09,960 --> 00:22:14,400
don't check that you actually written

00:22:11,580 --> 00:22:16,890
files there assume everything is okay

00:22:14,400 --> 00:22:19,080
and write to a temporary directory which

00:22:16,890 --> 00:22:21,870
will later in the depth file will show

00:22:19,080 --> 00:22:26,000
as the real directory slash to sow beam

00:22:21,870 --> 00:22:28,950
for example and this is the way we can

00:22:26,000 --> 00:22:30,420
build packages is the normal user and

00:22:28,950 --> 00:22:31,020
not route and write to our home

00:22:30,420 --> 00:22:33,210
directory

00:22:31,020 --> 00:22:36,540
whatever directory are in instead of

00:22:33,210 --> 00:22:39,870
actually tweaking the system we are

00:22:36,540 --> 00:22:45,350
building on so this is a really helpful

00:22:39,870 --> 00:22:45,350
script so after we clean the environment

00:22:45,590 --> 00:22:57,240
there's a run of configure second so

00:22:54,840 --> 00:23:02,900
this is the output of the configure

00:22:57,240 --> 00:23:06,150
strip script and later we'll have make

00:23:02,900 --> 00:23:10,800
okay the make is very short over here

00:23:06,150 --> 00:23:12,900
it's just one compile command and then

00:23:10,800 --> 00:23:17,760
we started with the debian package which

00:23:12,900 --> 00:23:21,750
are short script is actually expanded to

00:23:17,760 --> 00:23:27,450
a lot of Deb helpers each developer does

00:23:21,750 --> 00:23:31,560
a minor tasks like installing an in

00:23:27,450 --> 00:23:33,690
escape if we had one it's all a lot

00:23:31,560 --> 00:23:35,550
rotate if we had one because we have a

00:23:33,690 --> 00:23:38,880
very simple package it does very matter

00:23:35,550 --> 00:23:48,980
man pages documentation just

00:23:38,880 --> 00:23:51,720
a general copying of files links

00:23:48,980 --> 00:23:55,080
compression permissions Debian has a lot

00:23:51,720 --> 00:24:00,350
of behind the scenes scripts which help

00:23:55,080 --> 00:24:06,900
you prepare your package and at the end

00:24:00,350 --> 00:24:12,090
or skipping we get warning phone to sign

00:24:06,900 --> 00:24:13,380
the these files because I'm not I don't

00:24:12,090 --> 00:24:16,140
want to sign it right now because I'm

00:24:13,380 --> 00:24:18,210
not going to upload this to Debian we'll

00:24:16,140 --> 00:24:20,780
just keep the signing part so we'll get

00:24:18,210 --> 00:24:20,780
valid files

00:24:27,120 --> 00:24:31,740
okay so the result I'm right now in the

00:24:30,180 --> 00:24:34,320
pond directory deep under actor isn't

00:24:31,740 --> 00:24:37,560
change except for the build process so

00:24:34,320 --> 00:24:40,380
when you write a make or the copulation

00:24:37,560 --> 00:24:47,520
is done in this folder but the results

00:24:40,380 --> 00:24:50,870
of the Debian files are one directory

00:24:47,520 --> 00:24:57,710
above so at this stage we already have a

00:24:50,870 --> 00:25:01,500
DEP file ok another thing we have is the

00:24:57,710 --> 00:25:03,420
table all of the software we had into

00:25:01,500 --> 00:25:06,380
for two more five which I'll explain in

00:25:03,420 --> 00:25:06,380
a second what they are

00:25:19,630 --> 00:25:25,720
okay so the idea is that we have a

00:25:23,080 --> 00:25:27,429
source package which you can set to

00:25:25,720 --> 00:25:31,240
other people so they will do their own

00:25:27,429 --> 00:25:34,090
build a good example of that will be the

00:25:31,240 --> 00:25:36,280
Debian build servers so I build on amd64

00:25:34,090 --> 00:25:38,380
because this is what I have installed

00:25:36,280 --> 00:25:40,480
here and I send a source package back to

00:25:38,380 --> 00:25:42,429
Debian and then build it for the whole

00:25:40,480 --> 00:25:47,410
architecture architectures the Debian

00:25:42,429 --> 00:25:50,200
supports the idea is a description file

00:25:47,410 --> 00:25:52,169
the soft format which is the new one

00:25:50,200 --> 00:25:55,570
I'll show you in a second how you do it

00:25:52,169 --> 00:25:58,750
builds the Debian changes and they're

00:25:55,570 --> 00:26:02,169
rigged tarball if you don't have the

00:25:58,750 --> 00:26:06,130
original trouble it creates one but what

00:26:02,169 --> 00:26:09,130
we have here so at the beginning of the

00:26:06,130 --> 00:26:12,549
before the build we run we ran clean and

00:26:09,130 --> 00:26:16,659
then a utility took the whole directory

00:26:12,549 --> 00:26:18,900
and compress it into a terrible ok so

00:26:16,659 --> 00:26:25,150
this is what we begin with and this is

00:26:18,900 --> 00:26:27,940
the original towel so the idea is for

00:26:25,150 --> 00:26:31,360
people to to verify what the Debian do

00:26:27,940 --> 00:26:34,230
we try to keep the original from taobao

00:26:31,360 --> 00:26:37,150
from upstream not to change it not to

00:26:34,230 --> 00:26:41,740
open in repack it just use it the same

00:26:37,150 --> 00:26:45,039
so for example I can verify the md5 on

00:26:41,740 --> 00:26:47,860
the upstream website with the source

00:26:45,039 --> 00:26:49,870
file from Debian if we do change we

00:26:47,860 --> 00:26:52,000
usually indicate it either in the

00:26:49,870 --> 00:26:54,580
changelog or in the name of the file or

00:26:52,000 --> 00:26:57,120
in the version so for a lot of software

00:26:54,580 --> 00:26:59,830
you can go to the up to the upstream

00:26:57,120 --> 00:27:02,350
verify you got there a real program of

00:26:59,830 --> 00:27:04,240
course the ban will sometimes patch the

00:27:02,350 --> 00:27:06,120
software because it fails to build or

00:27:04,240 --> 00:27:08,650
fails to do something else bugs whatever

00:27:06,120 --> 00:27:10,480
but you know the starting point is the

00:27:08,650 --> 00:27:12,730
same as upstream you know one try to

00:27:10,480 --> 00:27:15,010
inject you with a software named Pony

00:27:12,730 --> 00:27:17,620
version one and took it from somewhere

00:27:15,010 --> 00:27:21,250
else so it easier to track changes this

00:27:17,620 --> 00:27:24,539
way so what we'll do just a second you

00:27:21,250 --> 00:27:24,539
will see the command it will be easier

00:27:48,720 --> 00:27:54,870
so in this case I just renamed or copied

00:27:52,410 --> 00:27:58,280
and renamed the file from upstream and

00:27:54,870 --> 00:27:58,280
we try to build it again

00:28:15,780 --> 00:28:21,050
and I'll show you the contents of the

00:28:18,030 --> 00:28:21,050
description file

00:28:29,100 --> 00:28:35,880
so this files usually says gives you the

00:28:32,519 --> 00:28:38,100
information about the source package the

00:28:35,880 --> 00:28:40,320
format of the package the name of the

00:28:38,100 --> 00:28:42,059
source in the binary architecture these

00:28:40,320 --> 00:28:43,440
fields look quite familiar for you

00:28:42,059 --> 00:28:46,529
because we just put them into the

00:28:43,440 --> 00:28:49,799
control files and the change log files

00:28:46,529 --> 00:28:54,409
the name of maintainer and gives you a

00:28:49,799 --> 00:28:56,820
signature of all the files we created

00:28:54,409 --> 00:29:00,470
here we have the original file in the

00:28:56,820 --> 00:29:03,000
Debian diff Debian diff is the format

00:29:00,470 --> 00:29:07,470
will is the file related to Debian

00:29:03,000 --> 00:29:10,320
source format one will change the format

00:29:07,470 --> 00:29:14,029
and then we'll do a rebuild and you see

00:29:10,320 --> 00:29:14,029
their new output just a second

00:29:42,480 --> 00:29:49,230
okay and just to explain what I got

00:29:44,940 --> 00:29:52,350
right now is I get an error message just

00:29:49,230 --> 00:29:54,930
says well you change the contents of

00:29:52,350 --> 00:29:57,750
your current library comparing to the

00:29:54,930 --> 00:30:00,360
original tarball if you want to put

00:29:57,750 --> 00:30:03,300
changes put them in patches otherwise I

00:30:00,360 --> 00:30:05,280
don't want to bill your package so in

00:30:03,300 --> 00:30:08,130
order to do that I'll move this

00:30:05,280 --> 00:30:12,240
directory side we open the tab or and

00:30:08,130 --> 00:30:15,480
start cleanly another problem is that

00:30:12,240 --> 00:30:22,980
this software doesn't have the clean

00:30:15,480 --> 00:30:27,390
target of the make file so in instead of

00:30:22,980 --> 00:30:33,950
just deleting the files over again I'll

00:30:27,390 --> 00:30:33,950
do a shortcut and return to version 1

00:30:42,770 --> 00:30:49,190
and I hope for the next demonstration

00:30:44,780 --> 00:30:52,450
I'll have a example a software that can

00:30:49,190 --> 00:30:52,450
actually clean after it's built

00:31:13,540 --> 00:31:18,420
and the changes file is used to tell

00:31:19,110 --> 00:31:26,260
whoever gets the package for rebuilding

00:31:21,880 --> 00:31:28,450
it what was change it used in the Debian

00:31:26,260 --> 00:31:31,210
build servers so we see the files were

00:31:28,450 --> 00:31:34,450
sending which this times includes the

00:31:31,210 --> 00:31:37,900
binary result not only the source the

00:31:34,450 --> 00:31:40,600
relevant change log entry the details

00:31:37,900 --> 00:31:43,260
about the package and also who change it

00:31:40,600 --> 00:31:45,370
comparing to who is the maintainer

00:31:43,260 --> 00:31:48,610
because in Debian people can change

00:31:45,370 --> 00:31:50,740
packages they don't maintain usually

00:31:48,610 --> 00:31:55,000
it's called non maintainer uploads QA

00:31:50,740 --> 00:32:02,160
uploads and has a variety of names how

00:31:55,000 --> 00:32:02,160
much time do I have 25 minutes okay

00:32:04,890 --> 00:32:12,990
another thing will we want to look a

00:32:08,630 --> 00:32:15,630
little bit about our package and we use

00:32:12,990 --> 00:32:23,880
D package - I capitalized for

00:32:15,630 --> 00:32:26,220
information yeah okay so again we see

00:32:23,880 --> 00:32:29,220
it's a very small package you know

00:32:26,220 --> 00:32:32,279
already you already know the details

00:32:29,220 --> 00:32:34,470
the installable the size of the package

00:32:32,279 --> 00:32:38,490
after you install it and we see the

00:32:34,470 --> 00:32:42,330
contents of the package has additional

00:32:38,490 --> 00:32:46,740
two files control a control file in md5

00:32:42,330 --> 00:32:48,529
some file which are used this is for

00:32:46,740 --> 00:32:51,120
verifying the contents of the package

00:32:48,529 --> 00:32:54,360
after the installation so if someone

00:32:51,120 --> 00:32:56,730
wants to go over his machine and see

00:32:54,360 --> 00:32:58,590
that none of the of the files were

00:32:56,730 --> 00:33:01,139
change we can compare it to the md5

00:32:58,590 --> 00:33:04,350
files and the code for control files

00:33:01,139 --> 00:33:06,740
used for dependencies we will do an

00:33:04,350 --> 00:33:06,740
installation

00:33:49,639 --> 00:33:55,789
you know we wanted cone utility with

00:33:53,359 --> 00:34:00,559
just right pony okay so this is the idea

00:33:55,789 --> 00:34:02,690
how we take a small binary package file

00:34:00,559 --> 00:34:05,950
and get it to the right location in

00:34:02,690 --> 00:34:09,529
Debian we'll go over a few more things

00:34:05,950 --> 00:34:12,049
but this is the idea of basic packaging

00:34:09,529 --> 00:34:13,879
when you'll try it yourself of course I

00:34:12,049 --> 00:34:17,629
guess you'll find a harder example

00:34:13,879 --> 00:34:20,059
because the pony utility is

00:34:17,629 --> 00:34:24,169
intentionally very very easy and very

00:34:20,059 --> 00:34:26,389
simple the documentation will cover a

00:34:24,169 --> 00:34:28,639
lot of the harder cases don't be worried

00:34:26,389 --> 00:34:30,950
if you get some of problems at the

00:34:28,639 --> 00:34:33,859
beginning usually as you saw the scripts

00:34:30,950 --> 00:34:36,799
are quite easy and tell you what's the

00:34:33,859 --> 00:34:39,260
problem and they're quite direct so you

00:34:36,799 --> 00:34:42,159
don't have to figure out weird stuff

00:34:39,260 --> 00:34:50,750
like I'm using that file but errors is

00:34:42,159 --> 00:34:56,829
saying something about that and for the

00:34:50,750 --> 00:34:56,829
next step what - another thing first

00:35:11,160 --> 00:35:14,569
yeah for the Internet's

00:35:16,390 --> 00:35:23,890
okay so we'll talk about checking your

00:35:19,539 --> 00:35:29,950
packages in the meanwhile the idea is

00:35:23,890 --> 00:35:32,829
that you can use a script called Indian

00:35:29,950 --> 00:35:35,859
in order to check the packages you did

00:35:32,829 --> 00:35:38,160
it would give you a lot of warnings

00:35:35,859 --> 00:35:40,900
about what is wrong with your package

00:35:38,160 --> 00:35:45,749
which is actually a good way to make

00:35:40,900 --> 00:35:45,749
sure your packaging is a good State

00:35:47,849 --> 00:35:52,989
and the second thing I wanted to show

00:35:51,460 --> 00:35:56,470
you and just want to run it so it will

00:35:52,989 --> 00:35:59,319
do something in background he's learning

00:35:56,470 --> 00:36:02,319
by example so I'm downloading the source

00:35:59,319 --> 00:36:04,920
package of PHP and Debian will take a

00:36:02,319 --> 00:36:04,920
few minutes

00:36:34,010 --> 00:36:41,090
okay so we intentionally did a very

00:36:37,900 --> 00:36:46,250
minimal minimal package so we get a lot

00:36:41,090 --> 00:36:49,820
of warnings and errors usually you must

00:36:46,250 --> 00:36:52,340
have in order for a package to enter

00:36:49,820 --> 00:36:55,750
Debian especially a new package no one

00:36:52,340 --> 00:36:56,930
accepted if it has errors warnings are

00:36:55,750 --> 00:36:59,960
debatable

00:36:56,930 --> 00:37:02,150
preferably Linton will say everything is

00:36:59,960 --> 00:37:04,160
okay and this is the best way to send a

00:37:02,150 --> 00:37:08,030
package if you want to want it to get

00:37:04,160 --> 00:37:11,600
into Debian officially so let's go over

00:37:08,030 --> 00:37:14,900
some of the problems we have no section

00:37:11,600 --> 00:37:17,090
filled we have non native package with

00:37:14,900 --> 00:37:23,030
native version we'll go over that in a

00:37:17,090 --> 00:37:26,500
second what else is important we are

00:37:23,030 --> 00:37:26,500
lacking build depends

00:37:54,800 --> 00:38:02,800
okay let's see bill depends so Lincoln

00:38:00,410 --> 00:38:11,720
has a very good explanation about

00:38:02,800 --> 00:38:14,270
anything that is missing okay so you get

00:38:11,720 --> 00:38:16,490
an explanation what is the problem and

00:38:14,270 --> 00:38:21,440
some of them actually contain how can

00:38:16,490 --> 00:38:24,470
you fix it it's very useful it should be

00:38:21,440 --> 00:38:27,110
ran by default on every package or that

00:38:24,470 --> 00:38:29,930
you make for Debian because it really

00:38:27,110 --> 00:38:32,330
catches all the common mistakes and

00:38:29,930 --> 00:38:34,310
everyone does common mistakes even

00:38:32,330 --> 00:38:35,810
people with experience it might be a

00:38:34,310 --> 00:38:40,280
typo it might be something more serious

00:38:35,810 --> 00:38:43,070
something we didn't think of and that's

00:38:40,280 --> 00:38:45,440
really important and of course as a

00:38:43,070 --> 00:38:49,220
Debian user I really want my packages to

00:38:45,440 --> 00:38:51,320
be in a good state for me to use for

00:38:49,220 --> 00:38:54,200
example this this is one of the reasons

00:38:51,320 --> 00:38:58,100
they be an unstable isn't not necessary

00:38:54,200 --> 00:38:59,930
unstable as this a bit of the state of

00:38:58,100 --> 00:39:03,200
the software it usually means the

00:38:59,930 --> 00:39:05,630
software changes a lot for example my

00:39:03,200 --> 00:39:08,540
home machine uses Debian stable all the

00:39:05,630 --> 00:39:12,460
time in update one once a day and it's

00:39:08,540 --> 00:39:14,990
very rarely the computer stops working

00:39:12,460 --> 00:39:17,570
because I know people not only check the

00:39:14,990 --> 00:39:21,400
software also check their packages and a

00:39:17,570 --> 00:39:21,400
lot of these tests are not only about

00:39:21,640 --> 00:39:26,000
quality in general but integration

00:39:23,870 --> 00:39:29,210
quality with the system and other

00:39:26,000 --> 00:39:31,640
packages so this will really helps you

00:39:29,210 --> 00:39:34,330
make sure everything in your package

00:39:31,640 --> 00:39:34,330
plays nicely

00:39:39,240 --> 00:39:45,450
okay at the mean time I want to go over

00:39:42,780 --> 00:39:48,720
with you about learning from examples

00:39:45,450 --> 00:39:50,520
especially by others which is always the

00:39:48,720 --> 00:39:57,030
best option

00:39:50,520 --> 00:40:02,089
I used apt-get source option to get the

00:39:57,030 --> 00:40:02,089
Peach Pit package in order to do that

00:40:08,320 --> 00:40:15,369
we need to have in the saw Swift's file

00:40:11,859 --> 00:40:17,260
a line that begins with Deb SRC so it

00:40:15,369 --> 00:40:19,530
knows where to get this or sick package

00:40:17,260 --> 00:40:19,530
from

00:40:27,089 --> 00:40:29,749
sorry

00:40:37,090 --> 00:40:45,290
this is a more complete control file so

00:40:42,080 --> 00:40:49,460
we saw this source already this section

00:40:45,290 --> 00:40:54,260
David the Debian archives is splitted

00:40:49,460 --> 00:40:56,990
into a few sections it's mainly for easy

00:40:54,260 --> 00:40:58,820
of maintaining it and finding suffered

00:40:56,990 --> 00:41:02,210
understanding when the surface is in the

00:40:58,820 --> 00:41:05,480
archive it doesn't affect the Benari

00:41:02,210 --> 00:41:07,610
itself so the content of the DEP package

00:41:05,480 --> 00:41:10,100
is the same regardless of the section it

00:41:07,610 --> 00:41:12,680
just gives you a hint to what this order

00:41:10,100 --> 00:41:17,180
is related oh where could it be found in

00:41:12,680 --> 00:41:19,369
the archive priority we have a few

00:41:17,180 --> 00:41:22,369
priorities one that says well that's the

00:41:19,369 --> 00:41:24,740
basic core package in Debian if you want

00:41:22,369 --> 00:41:27,530
to remove it you will have to remove

00:41:24,740 --> 00:41:32,600
half your machine be careful we'd go to

00:41:27,530 --> 00:41:37,660
optional extra and so on it's again used

00:41:32,600 --> 00:41:41,570
to decide what you want one minute okay

00:41:37,660 --> 00:41:43,190
it's again again used to decide what

00:41:41,570 --> 00:41:45,859
packages are are mandatory in what are

00:41:43,190 --> 00:41:47,600
not maintained we saw we can have a few

00:41:45,859 --> 00:41:51,320
uploaders of the package people that

00:41:47,600 --> 00:41:54,170
have maintaining it bill depends is the

00:41:51,320 --> 00:41:56,930
list of others packages that we need in

00:41:54,170 --> 00:41:59,330
order to compile our package in the

00:41:56,930 --> 00:42:01,609
previous example pony was very simple

00:41:59,330 --> 00:42:04,250
but some other software might require a

00:42:01,609 --> 00:42:07,040
lot of packages to build if for example

00:42:04,250 --> 00:42:10,490
you need Simek to build your package

00:42:07,040 --> 00:42:13,480
just put it here if needed you can put a

00:42:10,490 --> 00:42:13,480
certain version of it

00:42:15,860 --> 00:42:23,690
as you see PHP needs a lot of stuff to

00:42:18,020 --> 00:42:26,180
get built we also have the Debian

00:42:23,690 --> 00:42:28,330
standards version so this is the version

00:42:26,180 --> 00:42:31,580
of the Debian policy which the package

00:42:28,330 --> 00:42:34,850
conforms to some information when you

00:42:31,580 --> 00:42:39,290
can find the sources for these packages

00:42:34,850 --> 00:42:41,240
usually a git repo the home page the

00:42:39,290 --> 00:42:43,790
package itself so this was the source

00:42:41,240 --> 00:42:45,890
package this is the binary one we see we

00:42:43,790 --> 00:42:49,250
have in architecture all so the package

00:42:45,890 --> 00:42:51,020
in the files in this package are not

00:42:49,250 --> 00:42:53,750
relevant to the type of CPU you have and

00:42:51,020 --> 00:42:56,960
are shared between architectures we can

00:42:53,750 --> 00:43:01,180
have depends we have a variable which is

00:42:56,960 --> 00:43:03,830
changed during the build process to the

00:43:01,180 --> 00:43:12,920
Benari packages which are needed in

00:43:03,830 --> 00:43:14,900
order to run we have a description and

00:43:12,920 --> 00:43:17,900
as you can see we can have more than one

00:43:14,900 --> 00:43:21,740
in our packages built from the same

00:43:17,900 --> 00:43:25,220
source package so in this case we will

00:43:21,740 --> 00:43:28,430
have PHP five common and leave Apache to

00:43:25,220 --> 00:43:32,210
mod PHP built from the same sources this

00:43:28,430 --> 00:43:34,790
is useful to keep the Debian to be

00:43:32,210 --> 00:43:38,780
modular so you can install only what you

00:43:34,790 --> 00:43:41,300
need just don't forget to put the

00:43:38,780 --> 00:43:43,970
relevant dependencies between these

00:43:41,300 --> 00:43:46,910
packages if you need a good example will

00:43:43,970 --> 00:43:49,310
be a library in a binary that uses this

00:43:46,910 --> 00:43:50,870
library you could use the library for

00:43:49,310 --> 00:43:55,900
whatever you want but if you want the

00:43:50,870 --> 00:43:55,900
binary you depend on the library itself

00:43:56,680 --> 00:44:04,760
and in the half minute I've left I'll go

00:44:02,570 --> 00:44:08,330
over it with you a utility that's called

00:44:04,760 --> 00:44:11,030
depth if the idea is you can compare

00:44:08,330 --> 00:44:13,190
depth files for example if you build

00:44:11,030 --> 00:44:16,280
this your second version of the package

00:44:13,190 --> 00:44:19,040
you can compare it to the first either

00:44:16,280 --> 00:44:22,510
by comparing the depth files themselves

00:44:19,040 --> 00:44:27,110
or by comparing the source package

00:44:22,510 --> 00:44:28,310
comparing the DS C files so it will show

00:44:27,110 --> 00:44:31,130
you what was changed

00:44:28,310 --> 00:44:33,020
in the source or end in the package in

00:44:31,130 --> 00:44:34,940
the packaging you did which is another

00:44:33,020 --> 00:44:39,230
good way to make sure you only change

00:44:34,940 --> 00:44:41,870
what you wanted and not have mistakenly

00:44:39,230 --> 00:44:45,610
inserted and other changes think for

00:44:41,870 --> 00:44:48,020
example about a security update or

00:44:45,610 --> 00:44:49,700
specific patch you want to put and by

00:44:48,020 --> 00:44:55,730
mistake you put a lot of other stuff

00:44:49,700 --> 00:45:00,320
this is a good way to catch it we did

00:44:55,730 --> 00:45:02,870
learn by an example so we did the app

00:45:00,320 --> 00:45:05,210
gate source package name issue and

00:45:02,870 --> 00:45:10,250
there's an error utility called D get

00:45:05,210 --> 00:45:13,850
which get a URL of DSC package DSC file

00:45:10,250 --> 00:45:15,860
and knows how to pull the rest of the

00:45:13,850 --> 00:45:23,750
source package in order in order for you

00:45:15,860 --> 00:45:26,690
to inspect and of course Debian has a

00:45:23,750 --> 00:45:28,940
few very good references for a mean

00:45:26,690 --> 00:45:31,430
Tanners and the package developers

00:45:28,940 --> 00:45:33,440
there's the new maintenance guide which

00:45:31,430 --> 00:45:36,740
is available in this URL also is a

00:45:33,440 --> 00:45:39,050
package called mayn't guide the Debian

00:45:36,740 --> 00:45:41,030
developer reference which has a package

00:45:39,050 --> 00:45:44,000
of its own and of course the Debian

00:45:41,030 --> 00:45:46,070
policy which is more technical but if

00:45:44,000 --> 00:45:48,440
you don't sure if you're not sure what a

00:45:46,070 --> 00:45:51,290
certain field can which value can

00:45:48,440 --> 00:45:57,770
certain field home just check the policy

00:45:51,290 --> 00:46:05,690
and you will get your answer and I'm

00:45:57,770 --> 00:46:10,940
done questions yes wait wait for the mic

00:46:05,690 --> 00:46:13,510
we have one where's your hand so we will

00:46:10,940 --> 00:46:13,510
give you the mic

00:46:20,280 --> 00:46:26,610
so any specific issue with Java

00:46:24,240 --> 00:46:29,190
packaging if you want to do package with

00:46:26,610 --> 00:46:33,990
an application is there some other -

00:46:29,190 --> 00:46:37,710
some other issue I may run into well

00:46:33,990 --> 00:46:39,990
usually if you need Java to build your

00:46:37,710 --> 00:46:42,870
application you could use the open JDK

00:46:39,990 --> 00:46:46,800
it usually works of course depends on

00:46:42,870 --> 00:46:49,260
your software itself otherwise than that

00:46:46,800 --> 00:46:55,260
there shouldn't be any issue that's the

00:46:49,260 --> 00:47:00,630
main bank big thing more questions in a

00:46:55,260 --> 00:47:03,060
second I want to ask about dealing with

00:47:00,630 --> 00:47:04,740
configuration files so you know this you

00:47:03,060 --> 00:47:07,320
install one package then user changed us

00:47:04,740 --> 00:47:09,660
and install again then there is problem

00:47:07,320 --> 00:47:12,390
because they are compatible and I mean

00:47:09,660 --> 00:47:14,370
you want to merge new version what is

00:47:12,390 --> 00:47:16,860
the best way to deal with configuration

00:47:14,370 --> 00:47:19,170
files okay in general first you have to

00:47:16,860 --> 00:47:20,850
mark a file by the question I do

00:47:19,170 --> 00:47:25,080
understand you already package something

00:47:20,850 --> 00:47:28,230
or try to okay so in Debian you have a

00:47:25,080 --> 00:47:31,290
file inside the package itself this this

00:47:28,230 --> 00:47:33,360
and this our configuration files don't

00:47:31,290 --> 00:47:37,110
overwrite them without asking the user

00:47:33,360 --> 00:47:41,010
what to do because you've might then

00:47:37,110 --> 00:47:46,050
changes to these files there's a utility

00:47:41,010 --> 00:47:48,740
called UCF user configuration I forgot

00:47:46,050 --> 00:47:52,050
what's the last me letter means for

00:47:48,740 --> 00:47:54,330
which helps you do the thief and merge

00:47:52,050 --> 00:47:57,240
between the files and if it can't it's

00:47:54,330 --> 00:47:59,160
asking is at the user questions do you

00:47:57,240 --> 00:48:01,320
want to get the maintenance version keep

00:47:59,160 --> 00:48:04,230
your own version or see the diff okay

00:48:01,320 --> 00:48:06,830
it's very useful you'll have to add it

00:48:04,230 --> 00:48:09,540
to the bill depends and also to the

00:48:06,830 --> 00:48:12,330
dependency of the package because it's

00:48:09,540 --> 00:48:14,090
part of the maintainer scripts this

00:48:12,330 --> 00:48:16,410
leads me to another comment which says

00:48:14,090 --> 00:48:19,020
one of the best thing we have in

00:48:16,410 --> 00:48:21,060
packages comparing to just toggling the

00:48:19,020 --> 00:48:23,100
files and send them to the user we can

00:48:21,060 --> 00:48:25,110
have maintainer screen we can do

00:48:23,100 --> 00:48:27,810
whatever you want after the files were

00:48:25,110 --> 00:48:31,440
copied before they were copied in this

00:48:27,810 --> 00:48:34,430
way control upgrades of your package

00:48:31,440 --> 00:48:36,660
yes is there any possibility for

00:48:34,430 --> 00:48:39,990
commercial developed software to be

00:48:36,660 --> 00:48:43,799
backed in Debian packages and had some

00:48:39,990 --> 00:48:49,289
sort of licensing so it's kind of let's

00:48:43,799 --> 00:48:53,130
say not stolen well technically you can

00:48:49,289 --> 00:48:54,660
take you can skip the build process in

00:48:53,130 --> 00:48:57,750
the rule file just copy

00:48:54,660 --> 00:49:00,270
skip to the installed part and supply

00:48:57,750 --> 00:49:03,030
with already and with binary files

00:49:00,270 --> 00:49:05,430
already compiled as part of course it

00:49:03,030 --> 00:49:08,010
wouldn't go into Debian it's probably

00:49:05,430 --> 00:49:12,270
not free software but technically it can

00:49:08,010 --> 00:49:14,730
be done a lot of commercial a lot of

00:49:12,270 --> 00:49:17,240
companies does that when they want to

00:49:14,730 --> 00:49:20,940
package they use the final bill just

00:49:17,240 --> 00:49:22,980
repackaged into a DEP file or RPM or

00:49:20,940 --> 00:49:25,559
whatever instead of recompiling from

00:49:22,980 --> 00:49:28,140
sources and usually you won't find sauce

00:49:25,559 --> 00:49:29,420
packages from commercial products only

00:49:28,140 --> 00:49:33,839
for free software

00:49:29,420 --> 00:49:36,869
yeah but what about this license like

00:49:33,839 --> 00:49:38,420
you you you get the package you cannot

00:49:36,869 --> 00:49:41,880
deploy it unless you have some sort of

00:49:38,420 --> 00:49:45,539
let's say a string or some key file or

00:49:41,880 --> 00:49:48,240
stuff like that you ask in general one

00:49:45,539 --> 00:49:51,799
or continue continue your person on the

00:49:48,240 --> 00:49:51,799
ok on Debian

00:50:12,030 --> 00:50:18,250
in the main we have a file called Debian

00:50:15,310 --> 00:50:21,190
copyright in this case the peach PP will

00:50:18,250 --> 00:50:22,840
use this template which will during the

00:50:21,190 --> 00:50:25,330
build process copy to the right place

00:50:22,840 --> 00:50:29,410
but it says who is the maintainer of the

00:50:25,330 --> 00:50:31,510
packages who is the copyright holder and

00:50:29,410 --> 00:50:34,030
gives you all the corporate and license

00:50:31,510 --> 00:50:37,620
information this file is of course

00:50:34,030 --> 00:50:37,620
available on the target machine

00:50:51,390 --> 00:50:56,850
so on the target machine you can see for

00:50:53,940 --> 00:51:00,060
example for debhelper the changelog and

00:50:56,850 --> 00:51:02,130
the copyright file so if you want to

00:51:00,060 --> 00:51:06,420
know the status of each package just go

00:51:02,130 --> 00:51:09,090
to /u us our share dock the name of the

00:51:06,420 --> 00:51:14,010
package and then to be copyright file

00:51:09,090 --> 00:51:17,040
someone here at the question yes the dot

00:51:14,010 --> 00:51:21,440
auric top target reset mm-hmm is it

00:51:17,040 --> 00:51:21,440
always tar.gz no

00:51:44,970 --> 00:51:51,680
try to give you a short example in

00:51:48,510 --> 00:51:51,680
addition to answering you

00:51:56,420 --> 00:52:02,359
well but at our adopt ORAC Daktari that

00:52:00,170 --> 00:52:04,759
gets created during bills right yeah it

00:52:02,359 --> 00:52:08,269
could be created but that's not the best

00:52:04,759 --> 00:52:13,720
practice in recent years debian also

00:52:08,269 --> 00:52:17,329
accept or a gay busy - and oh rig is a

00:52:13,720 --> 00:52:20,299
ma I think for months you can read about

00:52:17,329 --> 00:52:23,269
it in a the debhelper month page but I

00:52:20,299 --> 00:52:25,849
think that busy - extension is the

00:52:23,269 --> 00:52:28,759
common one except a gzip file yeah my

00:52:25,849 --> 00:52:32,299
question is more about I built a package

00:52:28,759 --> 00:52:35,029
okay and at that state it creates reset

00:52:32,299 --> 00:52:38,150
archive mm-hmm even if the sauce was

00:52:35,029 --> 00:52:40,249
pizza - and how do i do then verify the

00:52:38,150 --> 00:52:43,309
integrity of the source code okay you

00:52:40,249 --> 00:52:48,190
can take your original busied file and

00:52:43,309 --> 00:52:51,230
change it to rig a busy and busy - and

00:52:48,190 --> 00:52:55,369
same as we did with the rig touches that

00:52:51,230 --> 00:52:59,019
and have it be recognized as the rig

00:52:55,369 --> 00:52:59,019
file and it wouldn't create a second one

00:53:04,530 --> 00:53:09,350
could you talk louder or wait for the

00:53:07,140 --> 00:53:09,350
mic

00:53:16,700 --> 00:53:23,780
the next lecture is in five minutes

00:53:18,800 --> 00:53:26,710
oh sorry sorry I thought we have time

00:53:23,780 --> 00:53:26,710

YouTube URL: https://www.youtube.com/watch?v=05fHGfwT73c


