Title: fosdem2012  chris conlon yassl
Publication date: 2013-02-05
Playlist: FOSDEM 2012
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,000 --> 00:00:05,040
and then go over some of the things that

00:00:02,850 --> 00:00:10,170
set see as little apart from other ssl

00:00:05,040 --> 00:00:14,940
implementation so yes allows a company

00:00:10,170 --> 00:00:17,670
was founded in 2004 it was first out of

00:00:14,940 --> 00:00:20,939
a need or a clean room ssl with exploit

00:00:17,670 --> 00:00:23,760
license one that can be embedded into

00:00:20,939 --> 00:00:27,359
both commercial projects as well as open

00:00:23,760 --> 00:00:30,210
source projects we're based in Bozeman

00:00:27,359 --> 00:00:34,079
Montana portland oregon and seattle

00:00:30,210 --> 00:00:37,050
washington our focus is on open source

00:00:34,079 --> 00:00:39,120
embedded security and we're used

00:00:37,050 --> 00:00:41,160
everywhere from cloud applications all

00:00:39,120 --> 00:00:44,760
the way down to small resources and

00:00:41,160 --> 00:00:47,309
strained embedded devices and our main

00:00:44,760 --> 00:00:50,489
products are our two ssl libraries see

00:00:47,309 --> 00:00:54,239
azle and hazel hazel is written in c++

00:00:50,489 --> 00:00:58,920
where seattle is written in c as well as

00:00:54,239 --> 00:01:00,960
the as embedded web server so if you're

00:00:58,920 --> 00:01:02,699
wondering where goes on portland and

00:01:00,960 --> 00:01:05,600
seattle are you can see them in the

00:01:02,699 --> 00:01:08,939
northwestern part of the United States

00:01:05,600 --> 00:01:11,070
although our geographic coverage is

00:01:08,939 --> 00:01:13,560
pretty small our products are used all

00:01:11,070 --> 00:01:16,710
over the world these are some of our

00:01:13,560 --> 00:01:20,159
estimates for our product usage so we

00:01:16,710 --> 00:01:22,320
think there's about 5 million units that

00:01:20,159 --> 00:01:24,810
have been distributed and used in

00:01:22,320 --> 00:01:26,720
commercial projects and anywhere from 10

00:01:24,810 --> 00:01:29,420
to 20 million and opens

00:01:26,720 --> 00:01:31,700
projects and those numbers are growing

00:01:29,420 --> 00:01:37,100
every year this last year we've had

00:01:31,700 --> 00:01:40,330
especially good here so what are some of

00:01:37,100 --> 00:01:43,490
the things that sets see a little part

00:01:40,330 --> 00:01:45,320
these are 8 items they're not all of the

00:01:43,490 --> 00:01:47,840
items but some of the top ones that we

00:01:45,320 --> 00:01:50,960
consider so the first one is standard

00:01:47,840 --> 00:01:54,370
support we support all the current SSL

00:01:50,960 --> 00:01:59,290
and TLS standards ssl three point of TLS

00:01:54,370 --> 00:02:01,400
1.1 and 1.2 and will continue to support

00:01:59,290 --> 00:02:06,110
the current standards if they come out

00:02:01,400 --> 00:02:08,149
in few years as well you're one of the

00:02:06,110 --> 00:02:12,040
first implementations to support TLS 1.2

00:02:08,149 --> 00:02:12,040
one with the new TLS

00:02:14,000 --> 00:02:21,650
the second item is memory usage so see a

00:02:18,680 --> 00:02:25,010
little foot print sizes anywhere from 30

00:02:21,650 --> 00:02:26,630
to 100 kilobytes standard see how the

00:02:25,010 --> 00:02:29,960
bill usually comes in around 60

00:02:26,630 --> 00:02:35,780
kilobytes and that will include a full

00:02:29,960 --> 00:02:38,600
TLS 1.2 client answer and then looking

00:02:35,780 --> 00:02:41,390
at ram sizes you are from 32 36

00:02:38,600 --> 00:02:43,670
kilobytes of runtime memory the library

00:02:41,390 --> 00:02:44,840
itself uses three kilobytes and then on

00:02:43,670 --> 00:02:48,110
top of that you're gonna have your input

00:02:44,840 --> 00:02:49,970
and output buffers which defaults using

00:02:48,110 --> 00:02:52,580
small static peppers of hundred twenty

00:02:49,970 --> 00:02:54,140
eight bytes and then you can get a cell

00:02:52,580 --> 00:02:58,340
record greater than that it will go up

00:02:54,140 --> 00:03:02,510
to 16 k / buffer by default so that's a

00:02:58,340 --> 00:03:04,190
step to the 36 killed by Max and so

00:03:02,510 --> 00:03:06,230
because of our size we have users

00:03:04,190 --> 00:03:08,810
anywhere from hobby projects running

00:03:06,230 --> 00:03:11,420
just a couple connections per server all

00:03:08,810 --> 00:03:13,130
the way up to cloud services and really

00:03:11,420 --> 00:03:14,450
balancing environments who have anywhere

00:03:13,130 --> 00:03:18,230
from hundreds of thousands to millions

00:03:14,450 --> 00:03:21,220
of connections and we've seen several

00:03:18,230 --> 00:03:21,220
wasn't last year too

00:03:23,210 --> 00:03:28,040
the third point is our simple API it's

00:03:26,960 --> 00:03:30,490
one of the things we really like to

00:03:28,040 --> 00:03:33,230
focus on its simplicity and ease abuse

00:03:30,490 --> 00:03:35,840
and so we've done a hardest from the

00:03:33,230 --> 00:03:38,120
beginning to keep things simple I can

00:03:35,840 --> 00:03:40,070
prepare to open us sell some of you

00:03:38,120 --> 00:03:44,210
probably not get kind of funky and

00:03:40,070 --> 00:03:46,010
complex to use and to support our simple

00:03:44,210 --> 00:03:48,980
API we've also really enhanced our

00:03:46,010 --> 00:03:51,800
documentation in the last year and so we

00:03:48,980 --> 00:03:54,110
came out with a sea has a manual CL API

00:03:51,800 --> 00:03:56,900
reference and then we also came out with

00:03:54,110 --> 00:03:58,700
an SSL tutorial which would help people

00:03:56,900 --> 00:04:00,490
new to SSL if people wanting to know how

00:03:58,700 --> 00:04:04,630
to easily have that to their project

00:04:00,490 --> 00:04:04,630
that's what stepped in through a fairly

00:04:07,710 --> 00:04:13,160
the fourth item is our openssl

00:04:10,140 --> 00:04:16,590
compatibility layer and so this contains

00:04:13,160 --> 00:04:18,990
about 300 openssl as most commonly used

00:04:16,590 --> 00:04:21,150
functions and so this is kind of dual

00:04:18,990 --> 00:04:24,930
purpose the first purpose is for people

00:04:21,150 --> 00:04:27,180
who are used to using openssl so it'll

00:04:24,930 --> 00:04:30,060
be the same function names as their he's

00:04:27,180 --> 00:04:33,180
teasing with that library the second

00:04:30,060 --> 00:04:35,790
option or second purpose is for ease of

00:04:33,180 --> 00:04:37,740
hoarding and so because you have the

00:04:35,790 --> 00:04:40,980
same functions you can usually easily

00:04:37,740 --> 00:04:43,070
just replace openssl with seattle and it

00:04:40,980 --> 00:04:47,090
usually requires very little work

00:04:43,070 --> 00:04:47,090
depending on the usage focus

00:04:49,860 --> 00:04:56,400
fifth item is highly portable and so out

00:04:53,610 --> 00:04:57,990
of the box platform support really we

00:04:56,400 --> 00:05:00,449
have a lot of platforms will see a few

00:04:57,990 --> 00:05:02,340
slides that we support by default and

00:05:00,449 --> 00:05:04,189
those are anywhere from desktop in bed

00:05:02,340 --> 00:05:06,120
environments desktop and enterprise

00:05:04,189 --> 00:05:09,360
environments all the way down to buy the

00:05:06,120 --> 00:05:11,430
dock racism and then we also offer

00:05:09,360 --> 00:05:15,240
several abstraction layers which been

00:05:11,430 --> 00:05:18,169
built in to see dazzle for your 140 s so

00:05:15,240 --> 00:05:21,419
easily pour it to your operating system

00:05:18,169 --> 00:05:25,110
14 custom input/output so if you want to

00:05:21,419 --> 00:05:27,479
run ssl over pretty much any transport

00:05:25,110 --> 00:05:29,039
medium that you would desire for example

00:05:27,479 --> 00:05:32,639
if you got around over bluetooth it'd be

00:05:29,039 --> 00:05:34,379
simple to do that and then standard c

00:05:32,639 --> 00:05:36,930
library abstraction layer if you have a

00:05:34,379 --> 00:05:39,289
different seat library weather is so

00:05:36,930 --> 00:05:39,289
library

00:05:40,289 --> 00:05:46,680
the next one is hardware optimizations

00:05:43,430 --> 00:05:50,490
so about three years ago I think we

00:05:46,680 --> 00:05:54,270
added support for Intel's AES ni and so

00:05:50,490 --> 00:05:56,639
that's a yes hardware acceleration built

00:05:54,270 --> 00:05:58,740
into some of Intel's newer chips and

00:05:56,639 --> 00:06:01,770
they climate can provide speeds up to

00:05:58,740 --> 00:06:05,909
three to ten times over to standard our

00:06:01,770 --> 00:06:07,710
standard aes so we have that currently

00:06:05,909 --> 00:06:12,050
when we got some assembly optimizations

00:06:07,710 --> 00:06:12,050
that you can take advantage of as well

00:06:12,590 --> 00:06:16,970
and then if you have hardware crypto

00:06:14,900 --> 00:06:21,020
modules we can pretty easily plug into

00:06:16,970 --> 00:06:23,450
your crypto hardware it is kind of on a

00:06:21,020 --> 00:06:25,400
time time time by time basis right now

00:06:23,450 --> 00:06:27,350
but that's one thing we want to work on

00:06:25,400 --> 00:06:30,340
the future it's getting more generic

00:06:27,350 --> 00:06:30,340
crypto extraction

00:06:32,889 --> 00:06:37,360
the seventh item is our licensed model

00:06:35,080 --> 00:06:40,810
and so we're doing a licensed under the

00:06:37,360 --> 00:06:42,969
GPL as well as a commercial license so

00:06:40,810 --> 00:06:44,379
this is provides an easy way to just

00:06:42,969 --> 00:06:46,990
download and use it for free end of the

00:06:44,379 --> 00:06:50,110
GPL Persia two and then signaling move

00:06:46,990 --> 00:06:51,610
into a commercial license if need be we

00:06:50,110 --> 00:06:54,159
kind of followed the same have this

00:06:51,610 --> 00:06:57,789
mysql and sulli is the same license

00:06:54,159 --> 00:07:00,219
model and then we just add a new support

00:06:57,789 --> 00:07:02,169
series this year so people who are

00:07:00,219 --> 00:07:05,189
looking for commercial support you get

00:07:02,169 --> 00:07:05,189
that promotion as well

00:07:07,150 --> 00:07:13,210
and then the last point is the project's

00:07:09,550 --> 00:07:15,310
maturity so many open-source projects

00:07:13,210 --> 00:07:17,380
change hands throughout their lifetime

00:07:15,310 --> 00:07:19,300
but we're proud to say that Seattle's

00:07:17,380 --> 00:07:21,400
still has the same developers on board

00:07:19,300 --> 00:07:24,610
that they did when when we started at

00:07:21,400 --> 00:07:28,360
2004 so the vision has been consistent

00:07:24,610 --> 00:07:32,230
all the way from the beginning we're on

00:07:28,360 --> 00:07:36,330
our 33rd release i believe and it's

00:07:32,230 --> 00:07:39,160
written two point zero point six and

00:07:36,330 --> 00:07:40,480
we've been tests it's been tested out in

00:07:39,160 --> 00:07:43,570
the open source community for the last

00:07:40,480 --> 00:07:49,630
seven years and so it's not it's not

00:07:43,570 --> 00:07:51,700
brand new and it's phineas and pretty

00:07:49,630 --> 00:07:55,000
much everything ranging from home

00:07:51,700 --> 00:07:57,370
automation two games routers cloud

00:07:55,000 --> 00:07:59,850
services and lots and lots of embedded

00:07:57,370 --> 00:07:59,850
devices

00:08:01,940 --> 00:08:06,830
this is a list of ciphers that see how

00:08:04,580 --> 00:08:08,960
the supports always pretty much all of

00:08:06,830 --> 00:08:14,500
your standard Cypress including at some

00:08:08,960 --> 00:08:18,650
stream ciphers rc4 rabbit and HD 128 and

00:08:14,500 --> 00:08:23,000
so the default screams I prefer SSL is

00:08:18,650 --> 00:08:24,590
art form or rc4 and that's a pretty good

00:08:23,000 --> 00:08:26,750
one but we said it was getting a little

00:08:24,590 --> 00:08:29,780
bit old so three years ago we introduced

00:08:26,750 --> 00:08:33,260
the rabbit and HD 128 stream ciphers

00:08:29,780 --> 00:08:36,310
from the East Room project with someone

00:08:33,260 --> 00:08:40,430
you might have heard of i'm not sure but

00:08:36,310 --> 00:08:44,480
rabbit is i believe about twice as fast

00:08:40,430 --> 00:08:48,010
as our core and HT 128 is about five

00:08:44,480 --> 00:08:48,010
times in our support

00:08:50,279 --> 00:08:54,600
this is a list of our currently

00:08:51,870 --> 00:08:57,449
supported operating systems anywhere

00:08:54,600 --> 00:09:01,499
from running it out of bare metal up to

00:08:57,449 --> 00:09:03,899
a wide variety here and if you don't see

00:09:01,499 --> 00:09:05,519
your one you're looking for on that list

00:09:03,899 --> 00:09:10,040
it's there's a very good chance it's

00:09:05,519 --> 00:09:10,040
planned future I compatibility

00:09:13,920 --> 00:09:17,010
so that kind of wraps up our section on

00:09:15,570 --> 00:09:19,500
what is he has little how it stands

00:09:17,010 --> 00:09:22,490
apart from some of our other competitors

00:09:19,500 --> 00:09:22,490
such as openssl

00:09:23,059 --> 00:09:27,439
and so now we'll move into part two

00:09:25,849 --> 00:09:29,029
which is what's happened in the last

00:09:27,439 --> 00:09:31,759
year with the household what kind of

00:09:29,029 --> 00:09:35,449
progress have you made and we've done

00:09:31,759 --> 00:09:38,719
lots in last year both technical and in

00:09:35,449 --> 00:09:41,269
our community so looking at some of the

00:09:38,719 --> 00:09:43,669
technical stuff that we've changed I've

00:09:41,269 --> 00:09:47,979
invented a couple new cipher suites with

00:09:43,669 --> 00:09:50,979
an ECC support gar library as well as

00:09:47,979 --> 00:09:50,979
sha256

00:09:53,170 --> 00:09:58,630
we have partnered with a company called

00:09:55,420 --> 00:10:01,720
security innovation to bring the end

00:09:58,630 --> 00:10:07,180
true sweets to see an awesome and enter

00:10:01,720 --> 00:10:09,670
is similar to RSA a public key method

00:10:07,180 --> 00:10:11,560
that i can go it can provide you to

00:10:09,670 --> 00:10:14,170
speed increases anywhere from 20 to 25

00:10:11,560 --> 00:10:16,570
200 times faster than our essay and

00:10:14,170 --> 00:10:19,810
that's depending on your key size so

00:10:16,570 --> 00:10:22,000
it's it's less of a prude mode on your

00:10:19,810 --> 00:10:23,709
key sizes small pea-sized increases

00:10:22,000 --> 00:10:27,730
you're going to see more of a perfect

00:10:23,709 --> 00:10:30,130
over our site this is a graph down here

00:10:27,730 --> 00:10:34,060
showing the performance of initiating a

00:10:30,130 --> 00:10:36,339
new ssl connection on the y-axis is and

00:10:34,060 --> 00:10:38,880
that the maximum asymmetric transactions

00:10:36,339 --> 00:10:41,560
per second and on the x-axis is

00:10:38,880 --> 00:10:45,490
different libraries with combinations of

00:10:41,560 --> 00:10:47,519
public-key algorithms so you have open

00:10:45,490 --> 00:10:50,829
this cell with RSA at the far left

00:10:47,519 --> 00:10:55,079
seattle with RSA in the middle and then

00:10:50,829 --> 00:10:55,079
see as will enter the part right

00:10:58,810 --> 00:11:04,560
we've got a member of the V helm support

00:11:01,560 --> 00:11:04,560
client-server

00:11:06,579 --> 00:11:12,459
we have added aes counter mode support

00:11:09,420 --> 00:11:16,689
as well as sha-256 certificate

00:11:12,459 --> 00:11:19,149
signatures and so regarding sha-256 we

00:11:16,689 --> 00:11:22,600
we've seen a few certificate showing up

00:11:19,149 --> 00:11:24,549
in the wild sha256 but it's been kind of

00:11:22,600 --> 00:11:26,829
rare so far we see that growing in the

00:11:24,549 --> 00:11:29,379
future I'm something that this to kind

00:11:26,829 --> 00:11:32,579
of stay ahead of the curve and kind of

00:11:29,379 --> 00:11:32,579
progressive drilling

00:11:35,000 --> 00:11:41,060
we've hadded see chakra runtime library

00:11:37,850 --> 00:11:48,400
detection and so this is a check to make

00:11:41,060 --> 00:11:50,300
sure that you're using Sam public key

00:11:48,400 --> 00:11:52,820
options that you built a library with

00:11:50,300 --> 00:11:54,560
this will run when you are at runtime

00:11:52,820 --> 00:11:57,770
library since then you build an

00:11:54,560 --> 00:11:58,760
application with normal math and then

00:11:57,770 --> 00:12:02,000
when you're running at you're running

00:11:58,760 --> 00:12:04,610
with the cs shared library that is with

00:12:02,000 --> 00:12:06,770
using fast math this will provide a

00:12:04,610 --> 00:12:10,390
check to kinda let you acknowledge that

00:12:06,770 --> 00:12:10,390
that inconsistency

00:12:12,130 --> 00:12:17,050
we changed a few things regarding

00:12:13,930 --> 00:12:20,230
certificate processing we have a UID

00:12:17,050 --> 00:12:23,230
parsing for x.509 certificates and so

00:12:20,230 --> 00:12:26,260
you ID will be contained in the subject

00:12:23,230 --> 00:12:30,030
field i believe and then you can use

00:12:26,260 --> 00:12:30,030
that through seen as well as he has lapi

00:12:30,090 --> 00:12:36,370
we had a serial number serial number

00:12:32,710 --> 00:12:38,080
retrieval and we improved our CA

00:12:36,370 --> 00:12:40,990
certificate processing in several ways

00:12:38,080 --> 00:12:43,840
you can now load multiple CA

00:12:40,990 --> 00:12:46,210
certificates profile which can simplify

00:12:43,840 --> 00:12:51,220
your initialization of clients and

00:12:46,210 --> 00:12:53,590
servers as well as a lot of things you

00:12:51,220 --> 00:12:55,060
poured into are expecting a single file

00:12:53,590 --> 00:12:57,340
and so I think age allowed multiple

00:12:55,060 --> 00:12:59,910
certain CA certificates it's helpful to

00:12:57,340 --> 00:13:01,830
have this

00:12:59,910 --> 00:13:04,140
we have changed our root certificate

00:13:01,830 --> 00:13:06,270
verification we used to require that all

00:13:04,140 --> 00:13:08,280
the certs in the chain we're loaded as

00:13:06,270 --> 00:13:10,860
trusted certificates in order to do

00:13:08,280 --> 00:13:13,560
verification now only the top of the

00:13:10,860 --> 00:13:16,020
root certificate needs to be trusted and

00:13:13,560 --> 00:13:19,140
then now we check to see a basic

00:13:16,020 --> 00:13:22,080
constraint field of their soda 509

00:13:19,140 --> 00:13:24,380
standard which is this an extra security

00:13:22,080 --> 00:13:24,380
check

00:13:26,860 --> 00:13:31,510
we've got a better tool s 1 point to

00:13:28,840 --> 00:13:35,110
support through more comprehensive in or

00:13:31,510 --> 00:13:37,390
out the interoperability testing we spur

00:13:35,110 --> 00:13:39,910
to us for about 20 consuming ones now I

00:13:37,390 --> 00:13:42,220
think and so we think we have one of the

00:13:39,910 --> 00:13:45,480
best and most test implementations of

00:13:42,220 --> 00:13:45,480
that available today

00:13:47,860 --> 00:13:55,470
we have improved our p kc s support good

00:13:51,790 --> 00:13:58,990
p kc s 48 private key encryption support

00:13:55,470 --> 00:14:03,060
supporting versions one and two p kc s

00:13:58,990 --> 00:14:06,010
number five as well as PK acs number 12

00:14:03,060 --> 00:14:08,620
we had we had password-based key

00:14:06,010 --> 00:14:10,990
derivation function to which previously

00:14:08,620 --> 00:14:13,810
only had the first one of those

00:14:10,990 --> 00:14:15,399
functions and then we also had the

00:14:13,810 --> 00:14:19,320
password base key derivation function

00:14:15,399 --> 00:14:19,320
from p kc s number 12

00:14:22,150 --> 00:14:27,580
we met a few days to our package design

00:14:25,170 --> 00:14:30,040
as far as headers we simplified our

00:14:27,580 --> 00:14:32,440
header structure so we used to install

00:14:30,040 --> 00:14:36,580
see Aslan dirt he's our local sea hasil

00:14:32,440 --> 00:14:39,040
which made it very simpler usage but

00:14:36,580 --> 00:14:42,100
sometimes more complex in building some

00:14:39,040 --> 00:14:43,540
with a programmer application so now we

00:14:42,100 --> 00:14:45,250
move the two more standard standard

00:14:43,540 --> 00:14:48,910
installation location with these are

00:14:45,250 --> 00:14:52,360
local but changes how you need to use it

00:14:48,910 --> 00:14:54,100
for them so you should be aware about

00:14:52,360 --> 00:14:59,190
here can upgrade to see a little

00:14:54,100 --> 00:14:59,190
versions above 2.0 point2

00:15:00,509 --> 00:15:06,040
we do have changed our make file usage

00:15:04,209 --> 00:15:07,870
we used to use recursive make files one

00:15:06,040 --> 00:15:10,209
for each directory and now we use a

00:15:07,870 --> 00:15:14,259
single make file which is simpler and

00:15:10,209 --> 00:15:17,050
faster and CEOs and I uses compiler

00:15:14,259 --> 00:15:20,589
visibility if it's supported to

00:15:17,050 --> 00:15:22,689
explosively exposure hi anon static

00:15:20,589 --> 00:15:24,610
functions so this going to reduce the

00:15:22,689 --> 00:15:27,389
global language a solution as well as

00:15:24,610 --> 00:15:27,389
possible collisions

00:15:29,570 --> 00:15:33,620
we gotta make test support which runs

00:15:31,640 --> 00:15:36,610
our test suite our unit tests and our

00:15:33,620 --> 00:15:36,610
see top trip tests

00:15:38,570 --> 00:15:42,980
we met a little bit more affordable be

00:15:40,430 --> 00:15:46,220
customizable by adding dynamic memory

00:15:42,980 --> 00:15:48,440
read ten books and so we've had a memory

00:15:46,220 --> 00:15:51,080
abstraction quite some time what's the

00:15:48,440 --> 00:15:53,270
user control time at been up memory the

00:15:51,080 --> 00:15:58,940
night you can do it at runtime there's

00:15:53,270 --> 00:16:01,160
kind of nice same thing with logging for

00:15:58,940 --> 00:16:03,740
a while with that support employer debug

00:16:01,160 --> 00:16:06,230
mode to configure your own custom

00:16:03,740 --> 00:16:09,040
logging tell backs and now you can get

00:16:06,230 --> 00:16:09,040
that run time as well

00:16:12,460 --> 00:16:17,170
regarding this is our embedded web

00:16:14,650 --> 00:16:19,810
server we put out a new release of our

00:16:17,170 --> 00:16:21,210
bed Webster from last year just with

00:16:19,810 --> 00:16:25,150
some bug fixes feature enhancements

00:16:21,210 --> 00:16:26,560
their documentation examples and this is

00:16:25,150 --> 00:16:28,870
one thing we've gotta concentrate on the

00:16:26,560 --> 00:16:31,500
next year is making more improvements to

00:16:28,870 --> 00:16:31,500
our web server

00:16:34,720 --> 00:16:39,550
and then in regard to technicals at our

00:16:38,079 --> 00:16:42,660
in addition to technical stuff we've

00:16:39,550 --> 00:16:47,889
done a lot of ports new ships and

00:16:42,660 --> 00:16:52,240
software packages see you as well is now

00:16:47,889 --> 00:16:56,410
a build option in curl and we imported

00:16:52,240 --> 00:16:58,180
CLTV embed prototyping board and so it's

00:16:56,410 --> 00:17:00,660
available for their cloud compiler both

00:16:58,180 --> 00:17:02,860
the library as well as I client example

00:17:00,660 --> 00:17:05,910
both of those you can download off with

00:17:02,860 --> 00:17:05,910
me in bed website

00:17:08,990 --> 00:17:18,110
mmm couch is a dynamic memory caching

00:17:14,410 --> 00:17:21,660
memory object caching system used to

00:17:18,110 --> 00:17:24,450
alleviate server load you're using

00:17:21,660 --> 00:17:27,870
applications and so we made a patch to

00:17:24,450 --> 00:17:29,580
enable clz news and that and we call

00:17:27,870 --> 00:17:32,010
that secure memcache and I'll be

00:17:29,580 --> 00:17:35,250
released sometime probably in the next

00:17:32,010 --> 00:17:37,530
couple months I would say we added some

00:17:35,250 --> 00:17:41,690
operating system support for free art SI

00:17:37,530 --> 00:17:44,340
q freescale's mq x and then you can run

00:17:41,690 --> 00:17:50,940
whole CSL in webster run your apple TV

00:17:44,340 --> 00:17:54,840
now if you want we support l WIP

00:17:50,940 --> 00:17:59,210
lightweight tcp/ip stack and we also

00:17:54,840 --> 00:17:59,210
support microchips pic32 platform now

00:18:00,740 --> 00:18:05,720
we support the clone web application

00:18:02,720 --> 00:18:09,230
framework it's a CSS fill option when

00:18:05,720 --> 00:18:12,710
you're building clone and I point is a

00:18:09,230 --> 00:18:14,360
web application framework that kind of

00:18:12,710 --> 00:18:18,410
making that includes the server and an

00:18:14,360 --> 00:18:20,240
SDK for building dynamic or static web

00:18:18,410 --> 00:18:24,280
content and it bundles it into a single

00:18:20,240 --> 00:18:24,280
binary after you build your website

00:18:25,440 --> 00:18:30,480
we're in SS openssh now has a Billiken

00:18:31,080 --> 00:18:38,440
wpa supplicant is used for controlling

00:18:35,370 --> 00:18:41,340
network connections and so that's going

00:18:38,440 --> 00:18:45,779
to be a config file option Percy ezell

00:18:41,340 --> 00:18:48,490
hostapd he is used for authentication

00:18:45,779 --> 00:18:52,059
about networks and that will also make

00:18:48,490 --> 00:18:55,120
file option these easty will be coming

00:18:52,059 --> 00:19:01,149
in the next couple months roughly kbbe

00:18:55,120 --> 00:19:03,850
and EAP TLS so PPP is a point-to-point

00:19:01,149 --> 00:19:07,450
protocol for making on a network

00:19:03,850 --> 00:19:10,539
connection over a serial link and EAP

00:19:07,450 --> 00:19:13,360
TLS is a patch I sense the

00:19:10,539 --> 00:19:15,399
authentication protocol using TLS so

00:19:13,360 --> 00:19:18,240
previously is open s itself and now you

00:19:15,399 --> 00:19:18,240
will see you

00:19:21,789 --> 00:19:27,820
we're in three readiness no one of the

00:19:25,370 --> 00:19:29,840
most widely deployed radius servers and

00:19:27,820 --> 00:19:32,659
that's going to be a build option as

00:19:29,840 --> 00:19:37,870
well see house will be hashing as well

00:19:32,659 --> 00:19:37,870
as provide authentication three btls

00:19:40,000 --> 00:19:46,150
we are not a kirpan provider for MIT

00:19:42,070 --> 00:19:50,380
kerberos along with NSS openssl and then

00:19:46,150 --> 00:19:52,510
MIT is built in crypto and so we just

00:19:50,380 --> 00:19:54,690
finished this up along with the port

00:19:52,510 --> 00:19:58,210
wiberg Kerberos server to Android and

00:19:54,690 --> 00:20:00,370
the gssapi jamboree which were

00:19:58,210 --> 00:20:02,710
previously lacking from every platform

00:20:00,370 --> 00:20:04,840
which is that should help see a million

00:20:02,710 --> 00:20:08,400
developer point2 security their android

00:20:04,840 --> 00:20:13,330
applications that does that thing became

00:20:08,400 --> 00:20:19,090
not in it leaves out a nerd I mean the

00:20:13,330 --> 00:20:20,560
crs cell support on this I think I think

00:20:19,090 --> 00:20:23,190
that our craft of a writer doesn't

00:20:20,560 --> 00:20:24,840
currently support

00:20:23,190 --> 00:20:27,149
because that was that one thing that

00:20:24,840 --> 00:20:28,619
heavily used openssl

00:20:27,149 --> 00:20:32,869
and so that's something we'll have to go

00:20:28,619 --> 00:20:32,869
back at work sensibly to rewrite

00:20:36,210 --> 00:20:42,450
you know how three options for using CSL

00:20:38,730 --> 00:20:44,820
on Android you can plug it in as a Java

00:20:42,450 --> 00:20:46,770
as a cell provider so this is this

00:20:44,820 --> 00:20:50,220
requires rebuilding the entire Android

00:20:46,770 --> 00:20:54,960
operating system and adding see dazzle

00:20:50,220 --> 00:20:57,930
as one of those provider blue thanks at

00:20:54,960 --> 00:20:59,760
the bottom and so when you use Java xmf

00:20:57,930 --> 00:21:04,230
ssl package you'll actually be using

00:20:59,760 --> 00:21:06,660
seat housing it's just a diagram of the

00:21:04,230 --> 00:21:09,090
android framework so when you do that

00:21:06,660 --> 00:21:13,250
you're modifying both the library

00:21:09,090 --> 00:21:13,250
section and the Android runtime section

00:21:14,090 --> 00:21:20,930
the second option is to use our C hasil

00:21:17,850 --> 00:21:23,430
NGK package so this is an Android NDK

00:21:20,930 --> 00:21:26,100
application that shows you how to both

00:21:23,430 --> 00:21:30,170
use Seattle in the end okay as well as

00:21:26,100 --> 00:21:33,360
provide a seat after example application

00:21:30,170 --> 00:21:36,300
and this is not github so you can go

00:21:33,360 --> 00:21:40,800
grab it off of this is the URL you can

00:21:36,300 --> 00:21:42,540
all spend on our blog in the website and

00:21:40,800 --> 00:21:44,790
then your third option is just to just

00:21:42,540 --> 00:21:46,020
cross compile C as a parameter it so

00:21:44,790 --> 00:21:46,950
this is going to do pretty much the same

00:21:46,020 --> 00:21:49,590
thing as the ending

00:21:46,950 --> 00:21:53,510
package but I'm we've seen smaller

00:21:49,590 --> 00:21:53,510
library sizes doing it this way

00:21:58,610 --> 00:22:02,960
and then now looking at what we've done

00:22:00,410 --> 00:22:06,590
as far as our code repositories and

00:22:02,960 --> 00:22:09,950
community we moved all our code to

00:22:06,590 --> 00:22:12,530
github from sourceforge before we were

00:22:09,950 --> 00:22:14,190
just really impressed with how slick it

00:22:12,530 --> 00:22:17,309
was to use

00:22:14,190 --> 00:22:21,240
you I was really easy to collaborate

00:22:17,309 --> 00:22:23,779
between people it's a now Oliver set

00:22:21,240 --> 00:22:23,779
design get up

00:22:26,630 --> 00:22:30,860
when you introduced some support forum

00:22:29,060 --> 00:22:33,350
so you know if you have questions about

00:22:30,860 --> 00:22:36,820
SSL or see azle please feel free to go

00:22:33,350 --> 00:22:36,820
close to our support forum

00:22:38,720 --> 00:22:42,950
we formed some new partnerships we're in

00:22:41,059 --> 00:22:46,299
the arm and ABNA to bed at software

00:22:42,950 --> 00:22:49,730
store now we're part of skype kill

00:22:46,299 --> 00:22:52,760
security innovation is Greg o'clock the

00:22:49,730 --> 00:22:54,860
entry cyprus sweets we're in the intel

00:22:52,760 --> 00:22:57,470
vendor line snow and partnered with co n

00:22:54,860 --> 00:23:00,340
logic which it makes the phone web

00:22:57,470 --> 00:23:00,340
application framework

00:23:01,740 --> 00:23:07,290
so that does pretty much all of our new

00:23:03,870 --> 00:23:09,090
news in the last year we have a lot

00:23:07,290 --> 00:23:11,670
planned for the next year too we brought

00:23:09,090 --> 00:23:14,940
two more people on board for this last

00:23:11,670 --> 00:23:19,309
year so we've got a more engineering and

00:23:14,940 --> 00:23:19,309
business resources to use

00:23:19,850 --> 00:23:25,460
we always offer a free support for open

00:23:22,700 --> 00:23:26,720
source projects so if you work in an

00:23:25,460 --> 00:23:29,360
open source project and you want it

00:23:26,720 --> 00:23:32,210
meant you're at CES into it I would

00:23:29,360 --> 00:23:33,890
gladly support you or if you thinks he

00:23:32,210 --> 00:23:36,590
has it should be in an open source

00:23:33,890 --> 00:23:38,360
project I feel free to give us give us a

00:23:36,590 --> 00:23:42,950
shout and we'll try to help you the best

00:23:38,360 --> 00:23:46,510
as you can is there any any questions

00:23:42,950 --> 00:23:46,510
about our products

00:23:46,880 --> 00:23:54,929
Oh

00:23:48,799 --> 00:23:56,520
we have been asked that one thing we

00:23:54,929 --> 00:23:59,130
haven't really gone forward with that

00:23:56,520 --> 00:24:03,450
yet just because we're not sure you know

00:23:59,130 --> 00:24:05,760
sometimes people use tor 4 for non

00:24:03,450 --> 00:24:08,120
epical uses and so it's just a business

00:24:05,760 --> 00:24:13,140
decision that we haven't met yet

00:24:08,120 --> 00:24:14,909
departed to poison shesh anyone other

00:24:13,140 --> 00:24:19,140
than the one point of doing the NT

00:24:14,909 --> 00:24:22,110
everything get requested for the key

00:24:19,140 --> 00:24:25,950
scheme or not is it actually use

00:24:22,110 --> 00:24:28,350
somewhere I'm not exactly sure on the

00:24:25,950 --> 00:24:29,730
usage of it it's kind of unique that you

00:24:28,350 --> 00:24:32,070
have to control both your client and

00:24:29,730 --> 00:24:34,559
server rooms because you know most

00:24:32,070 --> 00:24:37,320
existing servers I think support the

00:24:34,559 --> 00:24:41,340
interns I prefer if it's this whitish

00:24:37,320 --> 00:24:45,900
like do you know any usage users with

00:24:41,340 --> 00:24:47,549
ish outside of damage I know that we

00:24:45,900 --> 00:24:49,140
haven't had in our library for too long

00:24:47,549 --> 00:24:52,350
and so we haven't personally gotten any

00:24:49,140 --> 00:24:55,500
users / are signs security innovation a

00:24:52,350 --> 00:24:57,539
lot for licenses as well and I I can't

00:24:55,500 --> 00:24:58,970
speak to how what their usage stats are

00:24:57,539 --> 00:25:00,919
I'm

00:24:58,970 --> 00:25:04,400
okay and the other question is the porch

00:25:00,919 --> 00:25:08,659
you describe do they mostly make use of

00:25:04,400 --> 00:25:10,850
the openssl API thing basically it's

00:25:08,659 --> 00:25:12,679
just to make sure that we compiled in

00:25:10,850 --> 00:25:15,770
the orphanage compatibility mode oh you

00:25:12,679 --> 00:25:19,760
actually reported it to a new provider

00:25:15,770 --> 00:25:26,260
or you you know some some of our it

00:25:19,760 --> 00:25:29,179
really varies so most of them will use

00:25:26,260 --> 00:25:30,590
dopeness talking about Billie Blair just

00:25:29,179 --> 00:25:33,020
goes you know when it's already existing

00:25:30,590 --> 00:25:35,780
in there it's a lot easier to just over

00:25:33,020 --> 00:25:37,220
layer stuff on top of that and it's a

00:25:35,780 --> 00:25:42,110
lot easier for projects to accept our

00:25:37,220 --> 00:25:44,179
patches but like some examples like the

00:25:42,110 --> 00:25:48,620
Kerberos crypto provider that was from

00:25:44,179 --> 00:25:50,570
the ground up ecce hasil of the biggest

00:25:48,620 --> 00:25:53,419
deletion of the applications that do

00:25:50,570 --> 00:25:57,710
open and as a server that can confide to

00:25:53,419 --> 00:26:01,309
that she has she said in a compatibility

00:25:57,710 --> 00:26:05,020
mode that can be compiled yet all right

00:26:01,309 --> 00:26:05,020
just the list of projects yeah

00:26:08,000 --> 00:26:11,710
that probably 20 to 30 is that we've

00:26:10,340 --> 00:26:13,610
done

00:26:11,710 --> 00:26:15,740
there's a lot of projects we haven't

00:26:13,610 --> 00:26:18,080
tried I can't really speak to until the

00:26:15,740 --> 00:26:22,280
trial but has happened that just works

00:26:18,080 --> 00:26:23,630
the first time you try or not tweaking

00:26:22,280 --> 00:26:25,160
sometimes it works sometimes there's

00:26:23,630 --> 00:26:27,770
like two or three functions that are

00:26:25,160 --> 00:26:30,230
massaging my life but we usually just

00:26:27,770 --> 00:26:32,060
add those to our archival air let me

00:26:30,230 --> 00:26:33,560
encounter that have you had any failures

00:26:32,060 --> 00:26:38,990
to try to pour something but it was too

00:26:33,560 --> 00:26:40,310
much work not really if it's too much

00:26:38,990 --> 00:26:43,430
work will usually just try to reschedule

00:26:40,310 --> 00:26:45,410
it when we have a larger block of time

00:26:43,430 --> 00:26:48,320
available because I will just say it

00:26:45,410 --> 00:26:50,450
will take our art dev team longer to

00:26:48,320 --> 00:26:55,640
rewrite those functions and add that to

00:26:50,450 --> 00:26:59,450
our compatibility layer no we don't fail

00:26:55,640 --> 00:27:01,840
we just that it just takes longer that's

00:26:59,450 --> 00:27:01,840
a part

00:27:03,910 --> 00:27:12,550
okay openssl occasionally will not be

00:27:10,340 --> 00:27:12,550
possible

00:27:13,280 --> 00:27:18,680
we'd have to look at it like like I said

00:27:16,220 --> 00:27:21,530
we don't have our car crypto abstraction

00:27:18,680 --> 00:27:24,080
layer in place it so it's not going to

00:27:21,530 --> 00:27:25,820
be an easy easy replacement like just

00:27:24,080 --> 00:27:27,680
like a you're going to see they'll pop

00:27:25,820 --> 00:27:29,540
it down and get going right off the

00:27:27,680 --> 00:27:32,080
ground I didn't take a little bit of

00:27:29,540 --> 00:27:35,260
work but it shouldn't be too I

00:27:32,080 --> 00:27:38,270
meaningfulness of dishes I think wishing

00:27:35,260 --> 00:27:43,460
the meaningfulness of using the open

00:27:38,270 --> 00:27:45,850
isolation thing oh did you know if it's

00:27:43,460 --> 00:27:48,590
not the best thing for fish fish

00:27:45,850 --> 00:27:50,270
using the open a salon or little bear

00:27:48,590 --> 00:27:57,820
openssl interface is never the best

00:27:50,270 --> 00:27:57,820
interest yeah mutation

00:27:58,630 --> 00:28:05,430
yes following on and do you have a

00:28:00,700 --> 00:28:05,430
similar abstraction layer for fabric

00:28:06,300 --> 00:28:11,059
right

00:28:08,540 --> 00:28:14,659
about

00:28:11,059 --> 00:28:17,059
we don't we don't currently have a you

00:28:14,659 --> 00:28:18,649
can definitely look into for Ellis Ross

00:28:17,059 --> 00:28:23,230
games looking into things you don't have

00:28:18,649 --> 00:28:27,570
to so what we could do

00:28:23,230 --> 00:28:30,480
follow I would understand

00:28:27,570 --> 00:28:32,250
is it everything's kind of prey

00:28:30,480 --> 00:28:33,950
you have all these priorities you want

00:28:32,250 --> 00:28:36,570
to evolve

00:28:33,950 --> 00:28:39,200
it's constant positive

00:28:36,570 --> 00:28:39,200
you talk about

00:28:50,419 --> 00:28:54,600
so I brought up as a bunch of the Ozil

00:28:52,740 --> 00:28:57,019
stickers if not a sticker I'll leave

00:28:54,600 --> 00:28:57,019

YouTube URL: https://www.youtube.com/watch?v=SFvpP-JBL-Q


