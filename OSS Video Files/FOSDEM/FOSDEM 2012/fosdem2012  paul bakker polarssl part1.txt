Title: fosdem2012  paul bakker polarssl part1
Publication date: 2013-02-05
Playlist: FOSDEM 2012
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,000 --> 00:00:04,680
agile talk well it was scheduled a week

00:00:02,040 --> 00:00:07,230
ago but the guide at the range this room

00:00:04,680 --> 00:00:08,970
has disappeared from the grid and nobody

00:00:07,230 --> 00:00:12,710
knows where years and nobody can contact

00:00:08,970 --> 00:00:15,870
them so I'm still going to do my talk

00:00:12,710 --> 00:00:19,199
it's about polarizes le it does anybody

00:00:15,870 --> 00:00:23,269
know poderes no that's here ready that's

00:00:19,199 --> 00:00:28,769
does it actually have used Powter self

00:00:23,269 --> 00:00:31,230
part of it okay well what I'm going to

00:00:28,769 --> 00:00:33,270
talk about is about polarized ill in

00:00:31,230 --> 00:00:35,219
general a bit of what it does what the

00:00:33,270 --> 00:00:36,899
philosophy behind it is but also about

00:00:35,219 --> 00:00:39,870
something specific that happened last

00:00:36,899 --> 00:00:43,170
year and then that polarizes l was

00:00:39,870 --> 00:00:45,360
integrated into openvpn and was

00:00:43,170 --> 00:00:48,800
accredited for dutch governmental use

00:00:45,360 --> 00:00:50,820
for the restricted level of VPN

00:00:48,800 --> 00:00:53,340
communication and was a first in the

00:00:50,820 --> 00:00:56,070
netherlands that and as far as i know a

00:00:53,340 --> 00:00:58,289
first for such a mainstream project to

00:00:56,070 --> 00:01:00,149
actually become government accredited

00:00:58,289 --> 00:01:02,940
for just regularly used within the

00:01:00,149 --> 00:01:05,689
government so first a little bit about

00:01:02,940 --> 00:01:08,729
me I have a background in IT security

00:01:05,689 --> 00:01:11,150
cryptography I did a lot of development

00:01:08,729 --> 00:01:13,830
for security products for Dutch state

00:01:11,150 --> 00:01:18,570
for making conversations between

00:01:13,830 --> 00:01:22,229
embassies between navy ships and what

00:01:18,570 --> 00:01:25,320
whatever i'm an avid software developer

00:01:22,229 --> 00:01:26,909
i do some angel investment in a number

00:01:25,320 --> 00:01:31,890
of small startups in the social scene

00:01:26,909 --> 00:01:33,420
and I just this was my hobby polar so it

00:01:31,890 --> 00:01:37,320
still is my hobby it's not my full-time

00:01:33,420 --> 00:01:39,509
job but I'm trying to at least get it

00:01:37,320 --> 00:01:44,250
better known because it was my favorite

00:01:39,509 --> 00:01:46,439
project for the past time I am here this

00:01:44,250 --> 00:01:49,290
is viewable from the back but I am

00:01:46,439 --> 00:01:51,060
realistically paranoid a meaning that I

00:01:49,290 --> 00:01:55,200
know that you can't get everything right

00:01:51,060 --> 00:01:57,060
and everything secure but I do think

00:01:55,200 --> 00:02:01,290
that you actually should do as much as

00:01:57,060 --> 00:02:02,820
possible to make stuff secure and usable

00:02:01,290 --> 00:02:06,079
because if you make it really secure and

00:02:02,820 --> 00:02:10,039
unusable nobody's ever going to

00:02:06,079 --> 00:02:13,920
do it so po'd ours is l it's a

00:02:10,039 --> 00:02:15,540
cryptography and ssl/tls library so that

00:02:13,920 --> 00:02:17,730
means that it does all the basic

00:02:15,540 --> 00:02:20,010
cryptography it does all the

00:02:17,730 --> 00:02:23,580
standard symmetric algorithms I es

00:02:20,010 --> 00:02:26,849
camellia which is the more Eastern

00:02:23,580 --> 00:02:29,700
variant of AES of them the older

00:02:26,849 --> 00:02:33,390
versions desk Triple DES XTS and smaller

00:02:29,700 --> 00:02:35,370
ones all the standard hashing and it

00:02:33,390 --> 00:02:39,750
does ssl so that means it does

00:02:35,370 --> 00:02:41,970
x509certificate parsing certificate in

00:02:39,750 --> 00:02:46,350
this parsing verification of the other

00:02:41,970 --> 00:02:47,970
chains is in one parsing the things you

00:02:46,350 --> 00:02:50,849
actually don't want to do if you want to

00:02:47,970 --> 00:02:57,360
make security application it started out

00:02:50,849 --> 00:02:59,430
in 2009 I was an avid user of XY SSL

00:02:57,360 --> 00:03:01,500
which was my favorite project to use for

00:02:59,430 --> 00:03:04,739
cryptography insecurity but the

00:03:01,500 --> 00:03:06,780
maintainer of XY made as L stopped he

00:03:04,739 --> 00:03:09,390
didn't want to continue anymore and I

00:03:06,780 --> 00:03:12,650
asked him if I could continue and he

00:03:09,390 --> 00:03:14,579
gave me all the source code under the

00:03:12,650 --> 00:03:17,100
limitation that I had to change the name

00:03:14,579 --> 00:03:19,980
so I wanted to have a related name

00:03:17,100 --> 00:03:24,390
something that were related with X I XY

00:03:19,980 --> 00:03:27,840
SSL which was a cool name so I took the

00:03:24,390 --> 00:03:29,579
coordinate systems and from the XY that

00:03:27,840 --> 00:03:32,430
went to polar and then we had a cool

00:03:29,579 --> 00:03:35,519
coordinate system so we were ready to

00:03:32,430 --> 00:03:38,940
get started it's GPL so it's open source

00:03:35,519 --> 00:03:40,440
it's dual licensed because the open

00:03:38,940 --> 00:03:42,420
source community for these kind of niche

00:03:40,440 --> 00:03:45,060
markets is not large enough to actually

00:03:42,420 --> 00:03:47,209
maintain so there has to be some cash

00:03:45,060 --> 00:03:49,799
flow to actually sometimes be able to

00:03:47,209 --> 00:03:51,239
pay developers or do some development

00:03:49,799 --> 00:03:53,910
myself instead of doing my regular job

00:03:51,239 --> 00:03:58,650
and it works there are some major

00:03:53,910 --> 00:04:00,480
companies worldwide using polar seas el

00:03:58,650 --> 00:04:03,569
and they pay limited amounts to help

00:04:00,480 --> 00:04:06,569
software development which is great it's

00:04:03,569 --> 00:04:10,560
really really small so it's seventy

00:04:06,569 --> 00:04:13,439
thousand lines of code compared to

00:04:10,560 --> 00:04:17,370
openssl which is the de facto standard

00:04:13,439 --> 00:04:20,970
for SSL which is around 150,000 lines

00:04:17,370 --> 00:04:23,669
code it's ten times as small it does for

00:04:20,970 --> 00:04:26,190
the core apart nearly everything that

00:04:23,669 --> 00:04:29,940
openssl does but it doesn't have all the

00:04:26,190 --> 00:04:32,400
gimmicks the virtualization layers the

00:04:29,940 --> 00:04:34,860
generalization they are the everything

00:04:32,400 --> 00:04:39,260
that opens l tries to abstract from you

00:04:34,860 --> 00:04:41,669
and thereby is unusable for most users

00:04:39,260 --> 00:04:44,430
it's really smaller memory as well it

00:04:41,669 --> 00:04:47,940
fits if you compile it right in embedded

00:04:44,430 --> 00:04:50,039
memory in within 30 kilobytes you can do

00:04:47,940 --> 00:04:54,180
basic functionality and if you go up to

00:04:50,039 --> 00:04:56,880
about 120 150 k Dubb bites you can do

00:04:54,180 --> 00:04:59,699
full ssl server with old functionality

00:04:56,880 --> 00:05:04,500
or not same goes for your storage you

00:04:59,699 --> 00:05:06,479
need well there's more tests than the

00:05:04,500 --> 00:05:08,400
there's actual code test code is

00:05:06,479 --> 00:05:10,740
generated but there's more tests and

00:05:08,400 --> 00:05:12,150
there's extra code from the open source

00:05:10,740 --> 00:05:15,030
point of view there is a number of large

00:05:12,150 --> 00:05:18,630
project using it openvpn I'll dive into

00:05:15,030 --> 00:05:22,530
layer 2 UK which was at a presentation

00:05:18,630 --> 00:05:25,410
yesterday I believe hi okay well perfect

00:05:22,530 --> 00:05:26,820
not nice to me and power DNS I don't

00:05:25,410 --> 00:05:29,639
have people no power in s but it's

00:05:26,820 --> 00:05:34,099
actually one of the largest DNS services

00:05:29,639 --> 00:05:37,349
in the world it holds two total a dutch

00:05:34,099 --> 00:05:40,470
namespace but it was the first one to

00:05:37,349 --> 00:05:44,310
actually implement DNS SEC and for DNS

00:05:40,470 --> 00:05:47,849
SEC it used skoda SSL and a number of

00:05:44,310 --> 00:05:50,760
smaller murmurs mumble server and web

00:05:47,849 --> 00:05:53,639
server and a large number of other

00:05:50,760 --> 00:05:59,099
projects it is by default integrated

00:05:53,639 --> 00:06:02,010
into some of the larger distributions so

00:05:59,099 --> 00:06:04,500
it's probably easy to get of course you

00:06:02,010 --> 00:06:07,830
can go to the website and it virtually

00:06:04,500 --> 00:06:10,020
runs on all operating systems to both

00:06:07,830 --> 00:06:12,570
tested it on sometimes with a few

00:06:10,020 --> 00:06:14,669
modifications but I normally get them

00:06:12,570 --> 00:06:16,830
back on in the old standard

00:06:14,669 --> 00:06:19,889
architectures because it's written to be

00:06:16,830 --> 00:06:21,570
really really portable and if you have

00:06:19,889 --> 00:06:22,979
systems that are not on this list if

00:06:21,570 --> 00:06:23,620
you're using it please let me know

00:06:22,979 --> 00:06:26,710
because

00:06:23,620 --> 00:06:32,380
I always want to add them if possible

00:06:26,710 --> 00:06:37,330
and philosophy behind polar cell is that

00:06:32,380 --> 00:06:39,729
it is to be easy it's the only easy ssl

00:06:37,330 --> 00:06:43,030
in cryptography library available as far

00:06:39,729 --> 00:06:45,400
as i know it is very loosely coupled

00:06:43,030 --> 00:06:46,660
meaning it's a very drag-and-drop if you

00:06:45,400 --> 00:06:48,729
want to integrate it with your own pro

00:06:46,660 --> 00:06:52,479
with your own products and it's very

00:06:48,729 --> 00:06:56,169
easy to separate if documented it tested

00:06:52,479 --> 00:07:00,180
and it's portable so on the easy hot

00:06:56,169 --> 00:07:02,770
site it has an easy-to-understand API it

00:07:00,180 --> 00:07:06,039
all the function names are normally

00:07:02,770 --> 00:07:09,789
readable there are no short short hands

00:07:06,039 --> 00:07:12,039
for for code it doesn't use microbes

00:07:09,789 --> 00:07:15,039
unless it's really really necessary to

00:07:12,039 --> 00:07:17,860
make clean code but it doesn't have

00:07:15,039 --> 00:07:21,070
layers on layers on layers of macros I

00:07:17,860 --> 00:07:23,770
don't think there's any to macaroni or

00:07:21,070 --> 00:07:29,169
macro in the entire code say for the

00:07:23,770 --> 00:07:31,180
expansion of a translation table for AES

00:07:29,169 --> 00:07:33,970
which is easier to do with a double

00:07:31,180 --> 00:07:38,740
macro but that's not normal coated in

00:07:33,970 --> 00:07:41,260
that user would probably look at and has

00:07:38,740 --> 00:07:45,460
to read so normal code there's no macros

00:07:41,260 --> 00:07:48,610
if if needed and it has a number of

00:07:45,460 --> 00:07:50,200
examples that should make it easy for

00:07:48,610 --> 00:07:54,340
people to actually integrate it into

00:07:50,200 --> 00:07:56,740
existing projects I add as much as

00:07:54,340 --> 00:07:58,539
possible whenever needed so if anybody

00:07:56,740 --> 00:07:59,889
needs help just let me know there's a

00:07:58,539 --> 00:08:04,180
lot of people that try to help people

00:07:59,889 --> 00:08:06,849
integrate photos so it is very loosely

00:08:04,180 --> 00:08:09,610
coupled and that's something I'm really

00:08:06,849 --> 00:08:13,090
a fan of and it means there's no global

00:08:09,610 --> 00:08:16,599
code the only global foul there is is

00:08:13,090 --> 00:08:19,060
the config page header file which sets

00:08:16,599 --> 00:08:21,010
the defines on which parts are enabled

00:08:19,060 --> 00:08:22,660
for for bill time but if you want to

00:08:21,010 --> 00:08:24,010
make your own or want to integrate that

00:08:22,660 --> 00:08:27,760
into command line that's your choice

00:08:24,010 --> 00:08:29,620
there's no global code and it has some

00:08:27,760 --> 00:08:30,529
disadvantages as well we'll dive into

00:08:29,620 --> 00:08:32,810
that bit

00:08:30,529 --> 00:08:34,879
but it does you need that if you want to

00:08:32,810 --> 00:08:38,149
integrate AES you can just take a sec

00:08:34,879 --> 00:08:40,669
aah you're done you don't need anything

00:08:38,149 --> 00:08:42,560
else from the library and that goes for

00:08:40,669 --> 00:08:45,079
all the symmetric ciphers for all the

00:08:42,560 --> 00:08:49,269
hashes that are available and of course

00:08:45,079 --> 00:08:52,279
also for a is in one parsing for base64

00:08:49,269 --> 00:08:54,680
but if you want to do some more complex

00:08:52,279 --> 00:08:57,079
stuff like ours a which does require a

00:08:54,680 --> 00:09:00,319
number library which we have internally

00:08:57,079 --> 00:09:01,999
but that also requires a yes then yes of

00:09:00,319 --> 00:09:05,449
course you need all those in the package

00:09:01,999 --> 00:09:07,249
for the modules to to actually work but

00:09:05,449 --> 00:09:12,499
you can just grab all the agency files

00:09:07,249 --> 00:09:14,829
and you're done it uses a lot of

00:09:12,499 --> 00:09:18,259
function pointers in hooks where

00:09:14,829 --> 00:09:21,019
required as far as we know to make it

00:09:18,259 --> 00:09:23,209
easy to adapt the flow and or add new

00:09:21,019 --> 00:09:28,069
modules to assisting without having to

00:09:23,209 --> 00:09:31,009
actually change any code so the IP stack

00:09:28,069 --> 00:09:33,800
you can switch out and in standardly it

00:09:31,009 --> 00:09:38,209
uses to be these be the linux unix stack

00:09:33,800 --> 00:09:41,089
but if you want to use L WIP or micro IP

00:09:38,209 --> 00:09:42,920
it's very easy to just change one module

00:09:41,089 --> 00:09:47,029
or to function pointers and you have a

00:09:42,920 --> 00:09:50,209
new you can work folders on top of that

00:09:47,029 --> 00:09:52,250
network layer you can change the flow of

00:09:50,209 --> 00:09:55,339
verifications where you can actually

00:09:52,250 --> 00:09:57,620
hook into certificate verification and

00:09:55,339 --> 00:09:59,569
have you implement your own blacklist

00:09:57,620 --> 00:10:03,290
system on top of what's already

00:09:59,569 --> 00:10:05,000
available within x509 you can add random

00:10:03,290 --> 00:10:07,759
entropy source if you don't trust your

00:10:05,000 --> 00:10:11,240
own dev random enough and you want to

00:10:07,759 --> 00:10:15,639
add some extra sources to to loosen it

00:10:11,240 --> 00:10:15,639
up and well there's much more

00:10:15,740 --> 00:10:19,980
it's documented for an open source

00:10:18,450 --> 00:10:21,690
project I have to be I'm proud of the

00:10:19,980 --> 00:10:23,940
fact that it's actually documented it

00:10:21,690 --> 00:10:27,570
has source code documentation from the

00:10:23,940 --> 00:10:29,910
entire code its doctrine Duxton document

00:10:27,570 --> 00:10:32,400
document adduction it doesn't complain

00:10:29,910 --> 00:10:35,760
about any variable RLS anywhere in the

00:10:32,400 --> 00:10:38,760
code it has a lot of extra documentation

00:10:35,760 --> 00:10:41,190
for evaluation purposes I'll dive into

00:10:38,760 --> 00:10:43,860
that a bit later it has a tutorial

00:10:41,190 --> 00:10:46,310
example code so it tries to make it as

00:10:43,860 --> 00:10:51,360
easy as possible to actually use and

00:10:46,310 --> 00:10:57,420
it's tested it actually has an

00:10:51,360 --> 00:10:59,160
integrated test system thanks to a unit

00:10:57,420 --> 00:11:02,640
test framework made by I'm blue wall

00:10:59,160 --> 00:11:05,160
which is a very very simple test

00:11:02,640 --> 00:11:06,900
framework just a single had a foul but

00:11:05,160 --> 00:11:09,140
in combination with pro it makes for a

00:11:06,900 --> 00:11:13,320
fantastic testing framework that allows

00:11:09,140 --> 00:11:16,440
photocell to do over 1600 runtime or

00:11:13,320 --> 00:11:18,690
after compile time tests for regressions

00:11:16,440 --> 00:11:20,340
code coverage and most important of all

00:11:18,690 --> 00:11:21,960
active validation of all the

00:11:20,340 --> 00:11:24,589
cryptographic code that it does what

00:11:21,960 --> 00:11:28,589
it's supposed to do

00:11:24,589 --> 00:11:33,239
it's portable it's written as much as

00:11:28,589 --> 00:11:36,149
possible in an SI SE C 89 as much as

00:11:33,239 --> 00:11:39,660
possible because that actually most

00:11:36,149 --> 00:11:47,449
compilers actually support that fully of

00:11:39,660 --> 00:11:51,839
course your visual studio horrible but

00:11:47,449 --> 00:11:54,480
I'm trying to make it at the easiest

00:11:51,839 --> 00:11:55,529
possible to use on every compiler that

00:11:54,480 --> 00:11:58,319
doesn't mean that there are some issues

00:11:55,529 --> 00:12:02,429
because all the all the good stuff for

00:11:58,319 --> 00:12:06,389
portability like standardized types it

00:12:02,429 --> 00:12:08,189
only came with c99 and that's for some

00:12:06,389 --> 00:12:11,610
compilers to a problem but I'm moving to

00:12:08,189 --> 00:12:13,679
see 99 most likely to have photos of

00:12:11,610 --> 00:12:16,470
better in typing over more of a more

00:12:13,679 --> 00:12:18,389
systems as most group ID as far as an

00:12:16,470 --> 00:12:22,410
hour now supports you not accept visual

00:12:18,389 --> 00:12:24,959
studio there is no global code so that

00:12:22,410 --> 00:12:27,089
does mean that all the portability code

00:12:24,959 --> 00:12:30,089
that's available so code that's really

00:12:27,089 --> 00:12:34,049
specific for freebsd or windows or your

00:12:30,089 --> 00:12:36,689
arm environment is module specific so

00:12:34,049 --> 00:12:39,059
that doesn't mean there's double code in

00:12:36,689 --> 00:12:42,540
the system it doesn't mean that there is

00:12:39,059 --> 00:12:45,299
a standard mini part of code for

00:12:42,540 --> 00:12:46,919
defining how SN printf works on the

00:12:45,299 --> 00:12:49,799
windows and it's in all the files that

00:12:46,919 --> 00:12:54,299
use as in printf because they have to

00:12:49,799 --> 00:12:59,399
have a portability code but I try to

00:12:54,299 --> 00:13:01,049
adhere to to to to to dry principle as

00:12:59,399 --> 00:13:03,449
much as possible but the loose coupling

00:13:01,049 --> 00:13:07,230
for boaters I was more important so if

00:13:03,449 --> 00:13:09,480
possible i do drive if not then I'll do

00:13:07,230 --> 00:13:12,239
duplicate code and i'll try to make sure

00:13:09,480 --> 00:13:14,759
that there's enough tests to make sure

00:13:12,239 --> 00:13:19,860
that if I changed something that changes

00:13:14,759 --> 00:13:21,600
everywhere so just for people that don't

00:13:19,860 --> 00:13:24,959
have any experience with polar cell how

00:13:21,600 --> 00:13:27,779
simple is to make something that has a

00:13:24,959 --> 00:13:30,029
network connection SSL eyes and you

00:13:27,779 --> 00:13:32,999
include some headers which is just basic

00:13:30,029 --> 00:13:33,930
stuff you do a little bit of variable

00:13:32,999 --> 00:13:36,810
declaration but

00:13:33,930 --> 00:13:38,970
so much you do mainly this is the most

00:13:36,810 --> 00:13:42,240
important part of making this as L

00:13:38,970 --> 00:13:44,670
saying if it's a client or server saying

00:13:42,240 --> 00:13:46,770
if it has to verify certificates it has

00:13:44,670 --> 00:13:49,440
to guarantee those difficult passage

00:13:46,770 --> 00:13:51,930
entire chain and which random number

00:13:49,440 --> 00:13:53,730
generator it has to use with debug

00:13:51,930 --> 00:13:58,680
function it has to use so you can get

00:13:53,730 --> 00:14:00,720
your output which network input/output

00:13:58,680 --> 00:14:02,370
functions as you to send and receive so

00:14:00,720 --> 00:14:05,459
there you can change your network stack

00:14:02,370 --> 00:14:09,270
when possible with cipher suites for SSL

00:14:05,459 --> 00:14:12,060
are accepted but your own certificate is

00:14:09,270 --> 00:14:13,860
and what your ch changes the last two

00:14:12,060 --> 00:14:15,180
aren't even need is if you just make a

00:14:13,860 --> 00:14:18,860
client that doesn't need to do any

00:14:15,180 --> 00:14:21,209
authentication and aside from dit dis

00:14:18,860 --> 00:14:23,339
changing the Kinect code it's just

00:14:21,209 --> 00:14:26,399
changing the normal except to and

00:14:23,339 --> 00:14:28,890
netconnect and doing these two changes

00:14:26,399 --> 00:14:30,510
in your service namely changing the

00:14:28,890 --> 00:14:33,570
right to an ssl right and the really

00:14:30,510 --> 00:14:37,040
necessary you're done you have a fully

00:14:33,570 --> 00:14:37,040
functional and self right at the moment

00:14:37,440 --> 00:14:45,900
it can be that simple but it doesn't

00:14:43,350 --> 00:14:47,820
work that way always as if you are have

00:14:45,900 --> 00:14:49,170
harder code or you have multi-threaded

00:14:47,820 --> 00:14:52,110
code then you have to do a little bit

00:14:49,170 --> 00:14:53,850
more because Polar's L is single

00:14:52,110 --> 00:14:57,980
threaded and it expects to be running

00:14:53,850 --> 00:15:00,980
single thread at least for all its

00:14:57,980 --> 00:15:00,980

YouTube URL: https://www.youtube.com/watch?v=262BXGIiRj8


