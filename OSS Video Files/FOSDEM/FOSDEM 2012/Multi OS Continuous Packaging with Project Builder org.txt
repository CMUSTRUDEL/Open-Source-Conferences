Title: Multi OS Continuous Packaging with Project Builder org
Publication date: 2013-02-05
Playlist: FOSDEM 2012
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:01,070 --> 00:00:06,569
so everybody thank you for attending

00:00:04,560 --> 00:00:10,830
this session despite the snow these

00:00:06,569 --> 00:00:12,719
points a lunchtime and welcome to the

00:00:10,830 --> 00:00:17,400
presentation around continuous packaging

00:00:12,719 --> 00:00:19,859
so my name is bulacan i'm working for HP

00:00:17,400 --> 00:00:22,350
my background is around configuration

00:00:19,859 --> 00:00:27,119
management systems around the building

00:00:22,350 --> 00:00:30,390
software packages and also disaster

00:00:27,119 --> 00:00:32,489
recovery I'm acting as a solution

00:00:30,390 --> 00:00:36,030
architect for HP during the day and

00:00:32,489 --> 00:00:37,710
coding hard during the night and I'm

00:00:36,030 --> 00:00:40,489
involved in certain number of project

00:00:37,710 --> 00:00:42,989
easier as a contributor or project lead

00:00:40,489 --> 00:00:45,989
including some some distributions such

00:00:42,989 --> 00:00:48,870
as measure for example and that's one of

00:00:45,989 --> 00:00:54,270
the reason of the interest for packaging

00:00:48,870 --> 00:00:58,250
software so let me first try to give you

00:00:54,270 --> 00:01:03,359
an idea of the ecosystem in which we are

00:00:58,250 --> 00:01:07,200
working now I have multiple hats myself

00:01:03,359 --> 00:01:09,330
and as a system administrator of my

00:01:07,200 --> 00:01:12,090
linux systems i don't want to mess up

00:01:09,330 --> 00:01:14,270
with installing software manually this

00:01:12,090 --> 00:01:16,530
is too cumbersome it creates a lot of

00:01:14,270 --> 00:01:19,280
files everywhere it's not consistent

00:01:16,530 --> 00:01:22,439
it's not reproducible you cannot use

00:01:19,280 --> 00:01:24,360
deployment server etc etc so well and

00:01:22,439 --> 00:01:27,000
when you look at sourceforge statistics

00:01:24,360 --> 00:01:29,130
and you get the 10 most downloaded

00:01:27,000 --> 00:01:31,680
software you see that people also tend

00:01:29,130 --> 00:01:34,320
to prefer packages software packages for

00:01:31,680 --> 00:01:37,700
their operating system instead of using

00:01:34,320 --> 00:01:40,500
tar files or instead of trying the

00:01:37,700 --> 00:01:43,320
version from the subversion repository

00:01:40,500 --> 00:01:46,979
or git repository very few people in

00:01:43,320 --> 00:01:49,079
fact or using in development software

00:01:46,979 --> 00:01:51,750
most of the people use stable software

00:01:49,079 --> 00:01:53,460
package software that they want you to

00:01:51,750 --> 00:01:55,380
test on the system install and test on

00:01:53,460 --> 00:01:58,060
the system

00:01:55,380 --> 00:02:00,040
when we look at the rapper's developers

00:01:58,060 --> 00:02:02,680
are organized around a configuration

00:02:00,040 --> 00:02:05,770
management system or a version control

00:02:02,680 --> 00:02:09,220
system call it as you want which could

00:02:05,770 --> 00:02:12,280
be whatever at the bottom and their main

00:02:09,220 --> 00:02:15,400
goal is to produce software so there are

00:02:12,280 --> 00:02:17,410
organized to produce regularly tall

00:02:15,400 --> 00:02:21,850
balls that they upload to an ftp site

00:02:17,410 --> 00:02:23,980
your website very rarely upstream

00:02:21,850 --> 00:02:26,910
projects or producing packages for their

00:02:23,980 --> 00:02:29,050
own software and which creates sometimes

00:02:26,910 --> 00:02:32,980
relationship issues between themselves

00:02:29,050 --> 00:02:34,660
and packagers because typically they

00:02:32,980 --> 00:02:37,269
don't necessary use the tools that the

00:02:34,660 --> 00:02:39,760
packager would like to have around the

00:02:37,269 --> 00:02:42,580
project for example a clean installation

00:02:39,760 --> 00:02:45,160
procedure which is easy to use to

00:02:42,580 --> 00:02:46,989
relocate for examples files or to build

00:02:45,160 --> 00:02:48,910
if you build rpm files you know that you

00:02:46,989 --> 00:02:51,760
want to build in a subdirectory of your

00:02:48,910 --> 00:02:54,100
tree so everything which makes it easy

00:02:51,760 --> 00:02:56,650
for them to package the software is nice

00:02:54,100 --> 00:03:00,359
and not all projects especially smaller

00:02:56,650 --> 00:03:03,250
one organized to support that correctly

00:03:00,359 --> 00:03:05,019
and then you have a third type of person

00:03:03,250 --> 00:03:07,870
which is a packager for a distribution

00:03:05,019 --> 00:03:09,670
this guy is taking in fact exactly the

00:03:07,870 --> 00:03:11,290
results of the software which is

00:03:09,670 --> 00:03:12,910
produced in the previous slide but by

00:03:11,290 --> 00:03:16,450
the previous guys from the project

00:03:12,910 --> 00:03:17,769
upstream and he's working probably

00:03:16,450 --> 00:03:20,320
around the configuration management

00:03:17,769 --> 00:03:24,310
system and he is goal is to produce

00:03:20,320 --> 00:03:26,170
packages and apply some conformity tools

00:03:24,310 --> 00:03:28,840
on it to check that the packages or or

00:03:26,170 --> 00:03:33,310
coherent and pump contains too much

00:03:28,840 --> 00:03:35,590
heroes the issue here is that those guy

00:03:33,310 --> 00:03:37,930
may not exist at all you may you have

00:03:35,590 --> 00:03:41,170
tons of upstream project which will

00:03:37,930 --> 00:03:43,690
never package for distributions and when

00:03:41,170 --> 00:03:48,010
it exists when this guy exists or this

00:03:43,690 --> 00:03:50,140
girl exists he or she may not want to

00:03:48,010 --> 00:03:52,060
pass hold his time producing software

00:03:50,140 --> 00:03:54,609
for all the intermediate versions for

00:03:52,060 --> 00:03:56,680
alpha beta versions or whatever so it

00:03:54,609 --> 00:03:59,370
tends to concentrate on only the stable

00:03:56,680 --> 00:04:02,260
version and that does not really help

00:03:59,370 --> 00:04:06,310
the upstream projects being tested more

00:04:02,260 --> 00:04:08,600
and being used more so that's one of the

00:04:06,310 --> 00:04:12,170
of the issues that I

00:04:08,600 --> 00:04:15,890
exists in our ecosystem so when looking

00:04:12,170 --> 00:04:17,660
at all those points in fact being I mean

00:04:15,890 --> 00:04:20,000
taking different hats depending on the

00:04:17,660 --> 00:04:22,100
role I have during my activity or on

00:04:20,000 --> 00:04:23,750
Linux I could be either a sysadmin and I

00:04:22,100 --> 00:04:26,360
want to use only packages because it's

00:04:23,750 --> 00:04:28,190
much easier I'm a developer of some open

00:04:26,360 --> 00:04:31,520
source software so I want to ease my

00:04:28,190 --> 00:04:34,250
test I don't want to mess up my laptop

00:04:31,520 --> 00:04:35,900
or my workstation by installing software

00:04:34,250 --> 00:04:37,880
in every places and then not knowing

00:04:35,900 --> 00:04:40,130
exactly what I'm launching what I am

00:04:37,880 --> 00:04:42,530
doing my test so I want to install stuff

00:04:40,130 --> 00:04:45,650
cleanly remove stuff cleaning out of my

00:04:42,530 --> 00:04:47,810
system I don't want to duplicate a fault

00:04:45,650 --> 00:04:51,020
and when you are dealing with packaging

00:04:47,810 --> 00:04:52,850
software you realize that even if all

00:04:51,020 --> 00:04:55,250
the distribution may have different way

00:04:52,850 --> 00:04:56,870
of doing it they all have the same

00:04:55,250 --> 00:04:59,450
requirements they all need the same type

00:04:56,870 --> 00:05:01,160
of information you need a summary in the

00:04:59,450 --> 00:05:03,770
description you need an installation

00:05:01,160 --> 00:05:05,420
procedure you need dependencies you need

00:05:03,770 --> 00:05:07,460
a list of files that you would install

00:05:05,420 --> 00:05:09,890
all those information or duplicated

00:05:07,460 --> 00:05:12,290
across distribution today and an

00:05:09,890 --> 00:05:15,140
upstream project may want to centralize

00:05:12,290 --> 00:05:17,450
that type of information I'm packaging

00:05:15,140 --> 00:05:20,570
software so of course that topic is of

00:05:17,450 --> 00:05:22,130
interest to me and having a packages for

00:05:20,570 --> 00:05:25,820
its own software if you're on upstream

00:05:22,130 --> 00:05:28,460
project is very useful as a marketing

00:05:25,820 --> 00:05:31,880
activity because you will make it very

00:05:28,460 --> 00:05:34,100
easy for your consumers to try your

00:05:31,880 --> 00:05:37,310
software because for them will just

00:05:34,100 --> 00:05:39,890
double-click on your HTTP or ftp link

00:05:37,310 --> 00:05:41,870
and their package manager will just grab

00:05:39,890 --> 00:05:44,120
the package and try to install it on the

00:05:41,870 --> 00:05:46,160
distribution so it makes it very easy

00:05:44,120 --> 00:05:47,900
for people to use your software and to

00:05:46,160 --> 00:05:50,090
install it so producing not only top

00:05:47,900 --> 00:05:51,710
files but going up to the package level

00:05:50,090 --> 00:05:53,780
is something which is very useful for

00:05:51,710 --> 00:05:55,940
upstream projects it's more a marketing

00:05:53,780 --> 00:05:59,390
activity because you extend potentially

00:05:55,940 --> 00:06:00,890
the number of users of your environment

00:05:59,390 --> 00:06:03,160
and that's generally when you are

00:06:00,890 --> 00:06:05,720
developing that's what you try to do and

00:06:03,160 --> 00:06:08,480
there was no specific tool when I look

00:06:05,720 --> 00:06:10,700
at it in 2005's I was so for my own

00:06:08,480 --> 00:06:13,250
project to give you a bigger background

00:06:10,700 --> 00:06:14,810
I'm and I was developing and I'm I took

00:06:13,250 --> 00:06:16,100
over also maintenance of a project

00:06:14,810 --> 00:06:18,919
called mondo rescue which is a disaster

00:06:16,100 --> 00:06:21,710
recovery solution and that project was

00:06:18,919 --> 00:06:22,350
just producing tar files for four people

00:06:21,710 --> 00:06:25,440
and was very

00:06:22,350 --> 00:06:27,510
difficult for me to make make

00:06:25,440 --> 00:06:29,910
intermediate versions for seaside

00:06:27,510 --> 00:06:32,100
meanwhile not packagers who don't want

00:06:29,910 --> 00:06:34,500
to package the software so I made a

00:06:32,100 --> 00:06:37,230
small set of scripts to help myself and

00:06:34,500 --> 00:06:39,270
then it became obvious that I was in

00:06:37,230 --> 00:06:42,200
need of a tool I look around and I

00:06:39,270 --> 00:06:44,880
didn't find anything suitable for my

00:06:42,200 --> 00:06:46,980
supporting my activity so I started to

00:06:44,880 --> 00:06:48,810
write a set of script which became in

00:06:46,980 --> 00:06:52,710
fact this separated project called

00:06:48,810 --> 00:06:54,960
project builder a talk now so for me

00:06:52,710 --> 00:06:57,180
really packaging should be a concern of

00:06:54,960 --> 00:06:58,890
upstream projects that should not be

00:06:57,180 --> 00:07:01,320
only a concern of people making

00:06:58,890 --> 00:07:02,670
distributions and there should be much

00:07:01,320 --> 00:07:04,470
more relationship between upstream

00:07:02,670 --> 00:07:06,840
projects and packages inside the

00:07:04,470 --> 00:07:09,360
distribution and it's even more true for

00:07:06,840 --> 00:07:12,390
smaller projects helps a lot being

00:07:09,360 --> 00:07:16,200
cleaner and also being having more

00:07:12,390 --> 00:07:18,800
exposure to to to consumers so my new

00:07:16,200 --> 00:07:22,170
mantra is packaged early package always

00:07:18,800 --> 00:07:24,720
really using the packaging and the

00:07:22,170 --> 00:07:27,600
packages at the only way to provide a

00:07:24,720 --> 00:07:30,350
software piece to another team if you

00:07:27,600 --> 00:07:34,770
are in a large development organization

00:07:30,350 --> 00:07:37,440
and you have a test team integration

00:07:34,770 --> 00:07:39,390
team validation team what you want to

00:07:37,440 --> 00:07:40,770
pass from one level to another as

00:07:39,390 --> 00:07:42,390
something which is already packaged

00:07:40,770 --> 00:07:47,100
because if not you have no traceability

00:07:42,390 --> 00:07:49,170
at all it's really not to dream to to

00:07:47,100 --> 00:07:51,720
just use packages and not install a

00:07:49,170 --> 00:07:53,910
tarball extract etc etc and do the test

00:07:51,720 --> 00:07:57,570
like that and the other right exists of

00:07:53,910 --> 00:08:02,790
course but it's not much more loans and

00:07:57,570 --> 00:08:05,610
providing a traditional top file to your

00:08:02,790 --> 00:08:08,640
consumers it brings it adds a bit more

00:08:05,610 --> 00:08:10,260
because you have a bit more operation to

00:08:08,640 --> 00:08:12,060
doing the way to produce a package

00:08:10,260 --> 00:08:14,760
compared to two in fact you produce the

00:08:12,060 --> 00:08:16,650
top file and also you are producing

00:08:14,760 --> 00:08:19,080
prick generally for the virus

00:08:16,650 --> 00:08:21,120
distributions maybe not gentoo but for

00:08:19,080 --> 00:08:23,280
the others you're producing pre compiled

00:08:21,120 --> 00:08:26,280
binaries so you you do on your side a

00:08:23,280 --> 00:08:27,600
part of the job that you don't let you

00:08:26,280 --> 00:08:31,140
choose a constitute to the end consumer

00:08:27,600 --> 00:08:33,660
and of course there is a lot of benefits

00:08:31,140 --> 00:08:35,870
of doing that because if you if you

00:08:33,660 --> 00:08:38,270
produce packages you will integrate

00:08:35,870 --> 00:08:40,640
in a repository you will manage

00:08:38,270 --> 00:08:43,880
dependencies automatically you will

00:08:40,640 --> 00:08:46,130
manage the versioning of packages the

00:08:43,880 --> 00:08:47,390
tagging of packages during time it

00:08:46,130 --> 00:08:49,790
improves the teamwork because you're

00:08:47,390 --> 00:08:51,589
delivering pointer to repository to

00:08:49,790 --> 00:08:53,420
other team so integration team point to

00:08:51,589 --> 00:08:55,400
that repository validation team to

00:08:53,420 --> 00:08:58,070
another repository and each time you

00:08:55,400 --> 00:09:01,040
improve the software you change just a

00:08:58,070 --> 00:09:03,529
link to to the right software to use and

00:09:01,040 --> 00:09:06,100
again I said that packaging is also a

00:09:03,529 --> 00:09:10,070
marketing activity and it helps you

00:09:06,100 --> 00:09:13,720
extend your community so as an upstream

00:09:10,070 --> 00:09:16,250
project if you really want to be able to

00:09:13,720 --> 00:09:18,740
integrate the packaging as part of your

00:09:16,250 --> 00:09:20,150
deliveries the approach which I will

00:09:18,740 --> 00:09:22,250
recommend is ready to do continues

00:09:20,150 --> 00:09:25,880
packaging as there are the framework to

00:09:22,250 --> 00:09:30,320
do continuous testing already in place

00:09:25,880 --> 00:09:31,730
so how does it look like so I had to to

00:09:30,320 --> 00:09:33,860
put the world cloud somewhere because

00:09:31,730 --> 00:09:35,330
today if you have a a 90 presentation

00:09:33,860 --> 00:09:37,940
without the word cloud it's not an IT

00:09:35,330 --> 00:09:40,070
presentation so consider it as a cloud

00:09:37,940 --> 00:09:43,850
so but it's useful one that's not a fake

00:09:40,070 --> 00:09:45,980
one so if we if we think about the

00:09:43,850 --> 00:09:48,110
previous slides where we had the

00:09:45,980 --> 00:09:51,920
packages and the developers producing

00:09:48,110 --> 00:09:54,350
information we keep that and and the

00:09:51,920 --> 00:09:56,839
developers still produce that are by the

00:09:54,350 --> 00:10:01,040
Tarble here because that's what they are

00:09:56,839 --> 00:10:02,990
paid for are happy to do for free the

00:10:01,040 --> 00:10:04,970
packager is producing the same type of

00:10:02,990 --> 00:10:08,720
information but instead of just

00:10:04,970 --> 00:10:11,060
producing 1541 distribution it will use

00:10:08,720 --> 00:10:12,620
the tool to produce a set of files which

00:10:11,060 --> 00:10:16,040
correspond to the multiple distribution

00:10:12,620 --> 00:10:19,490
they want to support and using those two

00:10:16,040 --> 00:10:22,670
set of information we can inject that in

00:10:19,490 --> 00:10:25,310
the build cloud which is a set of

00:10:22,670 --> 00:10:27,589
virtual machines or what I call virtual

00:10:25,310 --> 00:10:30,050
environments so take them as fruits

00:10:27,589 --> 00:10:31,580
build schrutes typically or remote

00:10:30,050 --> 00:10:33,440
machines if you want to do cross

00:10:31,580 --> 00:10:35,230
compilation on other platforms that you

00:10:33,440 --> 00:10:39,050
don't have or if you cannot use

00:10:35,230 --> 00:10:40,550
virtualization or native hosting to

00:10:39,050 --> 00:10:42,650
support the Builder of your of your

00:10:40,550 --> 00:10:45,079
software and at the end of the operation

00:10:42,650 --> 00:10:46,370
what you get once you have built you get

00:10:45,079 --> 00:10:47,870
your package is for your target

00:10:46,370 --> 00:10:48,499
distribution which could be Debian

00:10:47,870 --> 00:10:51,439
packages

00:10:48,499 --> 00:10:53,269
pm gen 2 e build or stuff like that or

00:10:51,439 --> 00:10:56,869
Sarai's packages that we will see later

00:10:53,269 --> 00:10:59,719
on and you can then push those packages

00:10:56,869 --> 00:11:01,579
once built to a repository server which

00:10:59,719 --> 00:11:04,449
is your general is a repository server

00:11:01,579 --> 00:11:06,799
of the of the project and you can build

00:11:04,449 --> 00:11:12,339
automatically on that server all the

00:11:06,799 --> 00:11:15,349
indexes that are useful for OPM yum

00:11:12,339 --> 00:11:20,259
commands or you rpmi commands or zipper

00:11:15,349 --> 00:11:24,259
commands or apt environment for Debian

00:11:20,259 --> 00:11:27,079
so to really have it working as a cloud

00:11:24,259 --> 00:11:29,959
you you need to be able also to manage

00:11:27,079 --> 00:11:31,369
correctly the systems because you will

00:11:29,959 --> 00:11:34,089
have to create a large number of

00:11:31,369 --> 00:11:36,439
machines virtual machines physical

00:11:34,089 --> 00:11:37,849
machines or virtual environments

00:11:36,439 --> 00:11:40,519
depending on how you want to build and

00:11:37,849 --> 00:11:43,009
you can mix and match all of them we

00:11:40,519 --> 00:11:45,199
have an HP two local linux ue which is

00:11:43,009 --> 00:11:47,869
also an open-source software under the

00:11:45,199 --> 00:11:51,679
GPL you can can download from linux we

00:11:47,869 --> 00:11:53,779
dot org that tool is helping us to build

00:11:51,679 --> 00:11:56,839
initially although system automatically

00:11:53,779 --> 00:11:59,209
so it's a it's a generator of automatic

00:11:56,839 --> 00:12:01,609
installare for the values distribution

00:11:59,209 --> 00:12:03,559
we want to support and it creates a

00:12:01,609 --> 00:12:05,569
small ISO image from which you can boot

00:12:03,559 --> 00:12:07,519
the system and so you have all the

00:12:05,569 --> 00:12:10,129
process of installing all the system

00:12:07,519 --> 00:12:13,539
which is taken in account by that tool

00:12:10,129 --> 00:12:15,919
and then you can once you have your

00:12:13,539 --> 00:12:18,559
target systems which are prepared which

00:12:15,919 --> 00:12:20,359
are installed you just have to set them

00:12:18,559 --> 00:12:22,309
up so there is an operation to set up

00:12:20,359 --> 00:12:23,869
the environment in the virtual machine

00:12:22,309 --> 00:12:26,029
virtual environment or the remote

00:12:23,869 --> 00:12:28,039
machine which consists in installing the

00:12:26,029 --> 00:12:30,859
client part i would say of the project

00:12:28,039 --> 00:12:32,509
builder that org software and once you

00:12:30,859 --> 00:12:34,639
have that ready you can communicate

00:12:32,509 --> 00:12:36,169
between the development environment and

00:12:34,639 --> 00:12:38,589
the target system to produce the

00:12:36,169 --> 00:12:38,589
software

00:12:42,149 --> 00:12:48,790
so when I created the software i had

00:12:46,299 --> 00:12:52,809
some goals in mind because i wanted to

00:12:48,790 --> 00:12:54,309
be as generic as i was in my interceptor

00:12:52,809 --> 00:12:55,779
was developing some on the rescue for

00:12:54,309 --> 00:12:58,569
example is working on a large set of

00:12:55,779 --> 00:13:01,359
linux distributions and I didn't want to

00:12:58,569 --> 00:13:03,609
restrict the way project builder was

00:13:01,359 --> 00:13:06,269
helping me building packages so it

00:13:03,609 --> 00:13:09,220
should be able to support a large set of

00:13:06,269 --> 00:13:11,290
linux distribution and more moreover it

00:13:09,220 --> 00:13:14,980
could be really a operating system

00:13:11,290 --> 00:13:18,249
independent so today it's reports both

00:13:14,980 --> 00:13:21,309
the RPM dep type of build i build the

00:13:18,249 --> 00:13:23,709
slack is still not done and it also

00:13:21,309 --> 00:13:26,919
supports our arrays packaging and there

00:13:23,709 --> 00:13:29,439
is an HP ux development in progress it

00:13:26,919 --> 00:13:31,059
also support the values repository

00:13:29,439 --> 00:13:34,689
mechanism that exists for the various

00:13:31,059 --> 00:13:36,939
linux distributions and use tools to

00:13:34,689 --> 00:13:38,290
create a repository accordingly it

00:13:36,939 --> 00:13:40,209
should be able also to work with

00:13:38,290 --> 00:13:44,230
different configuration management

00:13:40,209 --> 00:13:46,919
system of russian control system i'm

00:13:44,230 --> 00:13:50,110
using it regularly with subversion and

00:13:46,919 --> 00:13:53,199
sv k which is a distributed version of

00:13:50,110 --> 00:13:56,259
subversion it works also for CVS

00:13:53,199 --> 00:13:58,660
mercurial and get I think I have some

00:13:56,259 --> 00:14:02,139
back to fix for orkut recently but

00:13:58,660 --> 00:14:04,269
that's there is no dependency on a

00:14:02,139 --> 00:14:06,699
specific configuration management system

00:14:04,269 --> 00:14:09,399
or a specific build environment and then

00:14:06,699 --> 00:14:11,860
also we want to be able to build in a in

00:14:09,399 --> 00:14:17,019
a quite large or quite small environment

00:14:11,860 --> 00:14:18,879
so at home my my desktop machine is able

00:14:17,019 --> 00:14:21,249
to build for all the distribution I'm

00:14:18,879 --> 00:14:24,939
supporting and I have more than 100

00:14:21,249 --> 00:14:26,730
virtual machines in a directory and I

00:14:24,939 --> 00:14:30,339
cycle through all those virtual machines

00:14:26,730 --> 00:14:33,129
launching them by pairs or by three of

00:14:30,339 --> 00:14:35,019
them at a time and I'm building for all

00:14:33,129 --> 00:14:37,089
these virtual machines on a single

00:14:35,019 --> 00:14:38,980
system so it could be self-contained but

00:14:37,089 --> 00:14:41,350
you may also want to be able to have a

00:14:38,980 --> 00:14:42,819
distributed as we said in the cloud

00:14:41,350 --> 00:14:44,589
approach where I want to have a more

00:14:42,819 --> 00:14:46,480
distributed approach so having a large

00:14:44,589 --> 00:14:49,209
set of machines already on your network

00:14:46,480 --> 00:14:51,009
and connect to those machine use them as

00:14:49,209 --> 00:14:53,619
a build environment and get back the

00:14:51,009 --> 00:14:55,420
results which is a remote machine

00:14:53,619 --> 00:14:59,050
approach

00:14:55,420 --> 00:15:02,440
to do that and so we are supporting

00:14:59,050 --> 00:15:05,170
virtual machine based on qemu kvm right

00:15:02,440 --> 00:15:07,990
now for virtual environments there are

00:15:05,170 --> 00:15:10,240
multiple tools which are working of

00:15:07,990 --> 00:15:11,950
course for DPN it's using dead bootstrap

00:15:10,240 --> 00:15:13,750
because that's a standard in the DB on

00:15:11,950 --> 00:15:17,200
world is a 4 DB not going to base

00:15:13,750 --> 00:15:19,330
distributions and on OPM based

00:15:17,200 --> 00:15:21,220
distribution I try to use rings rinse

00:15:19,330 --> 00:15:24,460
and Mark with those tool are not

00:15:21,220 --> 00:15:26,860
necessarily updated regularly and do not

00:15:24,460 --> 00:15:28,570
support all the RPM distribution so the

00:15:26,860 --> 00:15:31,960
project is also providing an RPM

00:15:28,570 --> 00:15:34,780
bootstrap command which helps you build

00:15:31,960 --> 00:15:37,120
Schrute for values RPM distribution and

00:15:34,780 --> 00:15:39,910
this one is working for Federal Open

00:15:37,120 --> 00:15:43,540
Susie measurement River distributions

00:15:39,910 --> 00:15:45,040
it's tested with those and the goal

00:15:43,540 --> 00:15:46,990
should also be to be completely

00:15:45,040 --> 00:15:49,990
independent from the upstream project so

00:15:46,990 --> 00:15:51,250
you can use the best usage I would serve

00:15:49,990 --> 00:15:53,650
the tool is probably when you are

00:15:51,250 --> 00:15:55,870
abstract and you want to build your own

00:15:53,650 --> 00:15:58,060
packages for your project but you can

00:15:55,870 --> 00:15:59,890
also use the tool as a packager for a

00:15:58,060 --> 00:16:02,470
project with which you don't have a

00:15:59,890 --> 00:16:04,180
direct relationship and and you are not

00:16:02,470 --> 00:16:07,750
part of the upstream community of that

00:16:04,180 --> 00:16:09,670
project so you take the deliveries of

00:16:07,750 --> 00:16:13,000
that project you you take them and

00:16:09,670 --> 00:16:15,190
change including the md5 sum of the of

00:16:13,000 --> 00:16:16,810
the tarball and you are able to inject

00:16:15,190 --> 00:16:17,890
them in the tool and build package is

00:16:16,810 --> 00:16:22,060
based on top of it so it should be

00:16:17,890 --> 00:16:23,650
really completely innocuous around

00:16:22,060 --> 00:16:30,310
around the project should not put any

00:16:23,650 --> 00:16:32,230
impact on the upstream project so in

00:16:30,310 --> 00:16:34,060
order to help you because not everybody

00:16:32,230 --> 00:16:36,250
is literally apps in upstream project

00:16:34,060 --> 00:16:38,950
not everybody is about to package for

00:16:36,250 --> 00:16:41,860
different linux distributions so or four

00:16:38,950 --> 00:16:44,490
different operating systems anyway so in

00:16:41,860 --> 00:16:46,870
order to help upstream project with that

00:16:44,490 --> 00:16:48,610
when you are creating a project in

00:16:46,870 --> 00:16:50,140
project builder you can have the

00:16:48,610 --> 00:16:51,850
generation of skeleton which is done

00:16:50,140 --> 00:16:54,310
automatically so it gives for you

00:16:51,850 --> 00:16:57,040
already as a template of spec file the

00:16:54,310 --> 00:16:59,890
template of Debian directory a template

00:16:57,040 --> 00:17:02,080
of a build file and a sudden onset of

00:16:59,890 --> 00:17:04,420
macros which are also created around it

00:17:02,080 --> 00:17:06,250
to help you have something which is

00:17:04,420 --> 00:17:10,450
nearly working out of the box so you

00:17:06,250 --> 00:17:13,270
just have to tune it a bit of course you

00:17:10,450 --> 00:17:15,160
have to to teach to your builder system

00:17:13,270 --> 00:17:17,710
which all the files that you want to

00:17:15,160 --> 00:17:21,130
package and how is the software built

00:17:17,710 --> 00:17:22,660
but except from that all the structure

00:17:21,130 --> 00:17:25,450
is already provided to you to help you

00:17:22,660 --> 00:17:28,750
to speed up the adoption of of the

00:17:25,450 --> 00:17:31,240
package creation it also helps you with

00:17:28,750 --> 00:17:33,220
the creation and the management of the

00:17:31,240 --> 00:17:35,650
virtual environment to build so

00:17:33,220 --> 00:17:37,930
typically today when I want to add a new

00:17:35,650 --> 00:17:41,320
distribution so each time a new federal

00:17:37,930 --> 00:17:45,100
version is out I download the east is

00:17:41,320 --> 00:17:47,770
386 and x86 64 version of the iso and I

00:17:45,100 --> 00:17:50,350
pass them to project builder and and I

00:17:47,770 --> 00:17:52,480
would say 10 minutes later i have my

00:17:50,350 --> 00:17:55,120
veteran machine up and running set up

00:17:52,480 --> 00:17:57,370
correctly so it's really a quick process

00:17:55,120 --> 00:18:01,660
and a tool process so that you don't

00:17:57,370 --> 00:18:03,760
have a lot to do with it and it's also

00:18:01,660 --> 00:18:07,210
provided certain number of other nice

00:18:03,760 --> 00:18:09,430
features such as managing the upload of

00:18:07,210 --> 00:18:12,610
your software on on the repository some

00:18:09,430 --> 00:18:15,100
mailing these announcements etc if you

00:18:12,610 --> 00:18:17,980
are not an upstream project in here just

00:18:15,100 --> 00:18:20,710
a packager for a software you may have

00:18:17,980 --> 00:18:23,200
to create patches on top of the software

00:18:20,710 --> 00:18:24,880
to make it more distribution compliant

00:18:23,200 --> 00:18:26,830
and if you are not upstream you can not

00:18:24,880 --> 00:18:29,190
necessarily put those patches in the

00:18:26,830 --> 00:18:32,680
upstream taobao so there are ways to

00:18:29,190 --> 00:18:34,480
manage the external patches that you

00:18:32,680 --> 00:18:37,360
have on on top of the project the nice

00:18:34,480 --> 00:18:39,580
thing also in my opinion is that those

00:18:37,360 --> 00:18:42,670
patches generally are valid for more

00:18:39,580 --> 00:18:44,290
than one distribution in general there

00:18:42,670 --> 00:18:46,960
are there are pretty useful for

00:18:44,290 --> 00:18:48,850
different contacts so you write them

00:18:46,960 --> 00:18:50,500
once and you can apply to multiple

00:18:48,850 --> 00:18:53,950
distribution when you our packaging

00:18:50,500 --> 00:18:56,320
directly it's calling also the Lindsey

00:18:53,950 --> 00:18:58,300
and opium into leaves are available to

00:18:56,320 --> 00:19:00,900
improve the quality of the other package

00:18:58,300 --> 00:19:00,900
is produced

00:19:08,169 --> 00:19:15,009
so when we deal with the build

00:19:11,529 --> 00:19:16,929
environment management when we are in a

00:19:15,009 --> 00:19:20,350
photo shrewd approach or the virtual

00:19:16,929 --> 00:19:22,299
environment approach the project

00:19:20,350 --> 00:19:24,249
provides rpm bootstrap as a command

00:19:22,299 --> 00:19:26,859
which is really modeled after that

00:19:24,249 --> 00:19:29,109
bootstrap to create routes for the

00:19:26,859 --> 00:19:31,690
different rpm bases submissions that are

00:19:29,109 --> 00:19:34,149
mentioned here and if you are on a

00:19:31,690 --> 00:19:36,909
debian ubuntu distribution of course

00:19:34,149 --> 00:19:41,169
it's just calling that bootstrap which

00:19:36,909 --> 00:19:43,149
works very well for that base work here

00:19:41,169 --> 00:19:45,009
is that it downloads all the packages

00:19:43,149 --> 00:19:47,919
from the software repositories the

00:19:45,009 --> 00:19:50,679
distribution repository it RPM to cpio

00:19:47,919 --> 00:19:54,129
all the software in the head of the

00:19:50,679 --> 00:19:55,929
fruit and then it reapplies installation

00:19:54,129 --> 00:19:58,450
of the packages so that you have a clean

00:19:55,929 --> 00:20:01,450
from an RPM perspective you have a clean

00:19:58,450 --> 00:20:03,700
environment in the Schrute and and after

00:20:01,450 --> 00:20:05,409
that it provides so it gives you the

00:20:03,700 --> 00:20:07,629
list the minimal list of all the

00:20:05,409 --> 00:20:10,419
packages that you need to launch the

00:20:07,629 --> 00:20:12,309
first command which is a repository

00:20:10,419 --> 00:20:15,399
management command so typically if we

00:20:12,309 --> 00:20:17,200
save federer we have the list of all the

00:20:15,399 --> 00:20:21,159
packages which are required to be able

00:20:17,200 --> 00:20:24,549
to launch em and once everything is

00:20:21,159 --> 00:20:26,830
installed throughout pm-2 cpio all the

00:20:24,549 --> 00:20:28,840
packages or install again was the RPM

00:20:26,830 --> 00:20:32,440
command and then you can launch yum

00:20:28,840 --> 00:20:34,600
install whatever to augment the content

00:20:32,440 --> 00:20:36,309
of the fruit with additional packages if

00:20:34,600 --> 00:20:38,710
you need them and at the same for zipper

00:20:36,309 --> 00:20:43,989
at the same for you rpmi for the other

00:20:38,710 --> 00:20:46,749
opium bases submissions so vm and remote

00:20:43,989 --> 00:20:49,149
machines or as well as support it was

00:20:46,749 --> 00:20:51,789
and with vm you pass general is the iso

00:20:49,149 --> 00:20:53,739
image and you use the iso image to to

00:20:51,789 --> 00:20:55,179
install first your your virtual

00:20:53,739 --> 00:20:57,159
environment if you use a tool like a

00:20:55,179 --> 00:20:59,320
longneck theory you will get the

00:20:57,159 --> 00:21:02,259
automatic installations you we have a no

00:20:59,320 --> 00:21:04,539
media no no keyboard attached type of

00:21:02,259 --> 00:21:07,299
installation it will be completely fully

00:21:04,539 --> 00:21:09,580
optimized and then once you have set up

00:21:07,299 --> 00:21:11,080
your two virtual environments either the

00:21:09,580 --> 00:21:13,059
virtual environment or the virtual

00:21:11,080 --> 00:21:16,259
machines or remote machines there is a

00:21:13,059 --> 00:21:19,779
final setup phase which consists in

00:21:16,259 --> 00:21:23,499
installing the the

00:21:19,779 --> 00:21:26,139
the TB tool inside that environment and

00:21:23,499 --> 00:21:27,489
the p/b to liz is a tool which is called

00:21:26,139 --> 00:21:30,749
from the outside and which is also

00:21:27,489 --> 00:21:33,489
called from the inside in fact from a

00:21:30,749 --> 00:21:37,389
build perspective the project builder

00:21:33,489 --> 00:21:39,940
tool is always building natively so if

00:21:37,389 --> 00:21:42,039
you want to build for in a virtual

00:21:39,940 --> 00:21:44,229
machine or in a virtual environment the

00:21:42,039 --> 00:21:46,179
project builder to outside call the

00:21:44,229 --> 00:21:48,129
project builder tool inside the virtual

00:21:46,179 --> 00:21:50,409
machine also theater environment and it

00:21:48,129 --> 00:21:52,629
is always building locally natively and

00:21:50,409 --> 00:21:55,389
then at the end all the packages which

00:21:52,629 --> 00:21:57,249
have been produced or taken out of the

00:21:55,389 --> 00:22:00,460
gutter environment and bring brought

00:21:57,249 --> 00:22:03,249
back on on the on the main system on

00:22:00,460 --> 00:22:04,779
which you are developing you have the

00:22:03,249 --> 00:22:06,549
possibility to create snap shops and

00:22:04,779 --> 00:22:11,349
manage snapshots of VMs or virtual

00:22:06,549 --> 00:22:13,539
environment and the communication

00:22:11,349 --> 00:22:15,249
between those environments for the

00:22:13,539 --> 00:22:17,769
virtual machine and remote machine or

00:22:15,249 --> 00:22:20,739
based on ssh with it so we are creating

00:22:17,769 --> 00:22:21,999
specific keys for a build account inside

00:22:20,739 --> 00:22:25,059
the virtual machine or the remote

00:22:21,999 --> 00:22:29,529
machine and those keys are used by your

00:22:25,059 --> 00:22:32,499
environment to do automatic copy and

00:22:29,529 --> 00:22:34,719
activation of command ssh on the veteran

00:22:32,499 --> 00:22:36,669
environment and for the views for on the

00:22:34,719 --> 00:22:39,009
Virtual Machine remote machine for the

00:22:36,669 --> 00:22:41,289
virtual environment is as you are based

00:22:39,009 --> 00:22:43,690
on the same system it's easy to just

00:22:41,289 --> 00:22:47,940
copy the files back and forth between

00:22:43,690 --> 00:22:47,940
the systems you don't need SSH for that

00:22:50,909 --> 00:22:58,059
so here is to give you an idea of how

00:22:55,690 --> 00:23:02,589
its organized from from a directory tree

00:22:58,059 --> 00:23:06,580
perspective you have a project which

00:23:02,589 --> 00:23:09,399
exists and that project has its own

00:23:06,580 --> 00:23:11,440
layout so generally you have a directory

00:23:09,399 --> 00:23:14,200
fall for the values project you have a

00:23:11,440 --> 00:23:16,419
development area that you may tag some

00:23:14,200 --> 00:23:18,700
version and have different versions this

00:23:16,419 --> 00:23:22,899
is more for a subversion approach of the

00:23:18,700 --> 00:23:26,649
world and in project builder if you want

00:23:22,899 --> 00:23:28,149
to be if you want to create as the tool

00:23:26,649 --> 00:23:29,859
will create a structure which is similar

00:23:28,149 --> 00:23:32,109
to the structure of the development tree

00:23:29,859 --> 00:23:34,029
and there is a PB conf directory so you

00:23:32,109 --> 00:23:36,519
will find again the development on the

00:23:34,029 --> 00:23:38,950
tag directory and in those directory you

00:23:36,519 --> 00:23:41,169
will have all the configuration files

00:23:38,950 --> 00:23:44,169
that are useful for project builder so

00:23:41,169 --> 00:23:46,989
you will find one directory per package

00:23:44,169 --> 00:23:50,049
which will contain one directory / type

00:23:46,989 --> 00:23:51,759
of build and under those directory you

00:23:50,049 --> 00:23:53,289
will have here the spec file here are

00:23:51,759 --> 00:23:55,720
the content of the DB and directory and

00:23:53,289 --> 00:23:57,970
you may have at each level some filters

00:23:55,720 --> 00:24:01,320
that you want to apply in order to try

00:23:57,970 --> 00:24:03,669
to keep in common as much as possible

00:24:01,320 --> 00:24:05,259
information which needs to remain to

00:24:03,669 --> 00:24:08,349
command you we will have a detail on the

00:24:05,259 --> 00:24:11,529
macarons on the next slide we are also

00:24:08,349 --> 00:24:14,349
managing change logs as part of the of

00:24:11,529 --> 00:24:16,509
the project here which I'll change look

00:24:14,349 --> 00:24:19,690
for the packages and which I'll use

00:24:16,509 --> 00:24:22,749
again across all package format so if

00:24:19,690 --> 00:24:24,339
you feel following our hours and there

00:24:22,749 --> 00:24:26,440
is no specific standard in the open

00:24:24,339 --> 00:24:28,539
source world for describing changelogs

00:24:26,440 --> 00:24:30,729
that's that's really something which is

00:24:28,539 --> 00:24:33,099
missing in my opinion right now so we

00:24:30,729 --> 00:24:35,080
have again created one format here for

00:24:33,099 --> 00:24:37,419
the change log and from that format we

00:24:35,080 --> 00:24:40,809
can generate the format for the RPM over

00:24:37,419 --> 00:24:44,259
the format for the Deb very easily and

00:24:40,809 --> 00:24:46,690
in cells we are sharing between the

00:24:44,259 --> 00:24:49,299
packages at that type of information and

00:24:46,690 --> 00:24:51,039
the main dot PB file here is a file

00:24:49,299 --> 00:24:54,899
containing all the metadata information

00:24:51,039 --> 00:24:54,899
around around the project

00:24:58,400 --> 00:25:06,150
one feature which is interesting to try

00:25:01,590 --> 00:25:11,040
to share meta data between packages is a

00:25:06,150 --> 00:25:15,360
macro feature available so you can

00:25:11,040 --> 00:25:17,010
create for each package you can crawl

00:25:15,360 --> 00:25:20,100
globally depending on how you want to

00:25:17,010 --> 00:25:22,710
architecture it you may want to create

00:25:20,100 --> 00:25:25,470
one micro for example PB summary macro

00:25:22,710 --> 00:25:28,680
which gives you the lines a single line

00:25:25,470 --> 00:25:30,360
that you want to put in a package to

00:25:28,680 --> 00:25:31,800
describe what this package is for in

00:25:30,360 --> 00:25:33,540
general in your graphical tool when you

00:25:31,800 --> 00:25:36,120
click on the package you would have that

00:25:33,540 --> 00:25:39,150
information written for you so you

00:25:36,120 --> 00:25:42,660
create it once and you specify its it's

00:25:39,150 --> 00:25:45,540
an ole DB filter so it's a it's valid

00:25:42,660 --> 00:25:48,780
for all type of systems that you want to

00:25:45,540 --> 00:25:50,820
to deal with and then in your spec file

00:25:48,780 --> 00:25:54,000
or in your control file for Debian or

00:25:50,820 --> 00:25:56,310
your pic EG info for salaries you can

00:25:54,000 --> 00:26:00,210
use that macro each time where you need

00:25:56,310 --> 00:26:02,520
it so the goal is really to centralized

00:26:00,210 --> 00:26:04,590
in one place so may the data that you

00:26:02,520 --> 00:26:07,230
want to manage around your your software

00:26:04,590 --> 00:26:08,880
and if you modify here's the description

00:26:07,230 --> 00:26:10,650
line these are the description of the

00:26:08,880 --> 00:26:13,680
summary or whatever also type of macro

00:26:10,650 --> 00:26:15,840
you are using you modify it once and all

00:26:13,680 --> 00:26:18,750
your packages in the next generation

00:26:15,840 --> 00:26:21,690
will inherit from this modification and

00:26:18,750 --> 00:26:24,030
we'll get a coherent set of information

00:26:21,690 --> 00:26:26,820
across all the type of packages you are

00:26:24,030 --> 00:26:29,070
you are using so here I show you

00:26:26,820 --> 00:26:33,090
something which generally is applicable

00:26:29,070 --> 00:26:35,850
for all type of generation packages but

00:26:33,090 --> 00:26:37,680
you can be more or less specific so you

00:26:35,850 --> 00:26:39,630
can create macros for example which are

00:26:37,680 --> 00:26:41,790
only valid across RPM type of

00:26:39,630 --> 00:26:44,610
distributions or you can create one

00:26:41,790 --> 00:26:47,130
macro or one information which is only

00:26:44,610 --> 00:26:49,410
valid for one distribution one version

00:26:47,130 --> 00:26:53,190
one architecture if it's as precise as

00:26:49,410 --> 00:26:55,980
that so all the possibility of macro you

00:26:53,190 --> 00:26:59,190
can have an overloading of macro very

00:26:55,980 --> 00:27:01,620
easily and that's a way to try to Center

00:26:59,190 --> 00:27:03,570
to keep in central as a meta data and to

00:27:01,620 --> 00:27:05,330
not duplicate information across the

00:27:03,570 --> 00:27:07,460
different packages

00:27:05,330 --> 00:27:09,290
and if you look at the man page of the

00:27:07,460 --> 00:27:13,070
year particular that come file you will

00:27:09,290 --> 00:27:16,700
have more information on the how to use

00:27:13,070 --> 00:27:19,370
these mechanisms so here are the list of

00:27:16,700 --> 00:27:22,430
commands that you can pass on the tool I

00:27:19,370 --> 00:27:23,540
want don't want to tell that part of the

00:27:22,430 --> 00:27:26,000
presentation you will have on the

00:27:23,540 --> 00:27:28,670
website some of them are mentioned here

00:27:26,000 --> 00:27:33,050
as well so if we go back to to the big

00:27:28,670 --> 00:27:35,330
picture when you are starting you create

00:27:33,050 --> 00:27:37,010
a new project typically and the new

00:27:35,330 --> 00:27:40,370
project will create for you a certain

00:27:37,010 --> 00:27:42,980
number of templates for your daily an

00:27:40,370 --> 00:27:45,290
environment or spec spec file etc etc so

00:27:42,980 --> 00:27:48,860
macro by default will be also created

00:27:45,290 --> 00:27:52,490
then you will have to add information to

00:27:48,860 --> 00:27:54,830
it you have the project which could be

00:27:52,490 --> 00:27:56,840
an upstream project or a pointer to a

00:27:54,830 --> 00:27:59,600
file somewhere on the web depending on

00:27:56,840 --> 00:28:01,400
how you are either if you are upstream

00:27:59,600 --> 00:28:03,980
and packaging for upstream or if you are

00:28:01,400 --> 00:28:05,750
packaging for an upstream project to

00:28:03,980 --> 00:28:08,480
which you do not belong and you have no

00:28:05,750 --> 00:28:10,400
way to modify it and then you can pass

00:28:08,480 --> 00:28:13,250
command such as as Biggs to build so

00:28:10,400 --> 00:28:15,950
sandbox to build or CMS to build if you

00:28:13,250 --> 00:28:18,760
are talking directly to the CMS system

00:28:15,950 --> 00:28:22,250
so either you have extracted from the

00:28:18,760 --> 00:28:24,380
VCS and you have a local instance for

00:28:22,250 --> 00:28:26,390
the project and if you do as beings it

00:28:24,380 --> 00:28:29,540
will take that sandbox version so if you

00:28:26,390 --> 00:28:31,610
are making modifications you do for

00:28:29,540 --> 00:28:34,340
example let's say we use a subversion

00:28:31,610 --> 00:28:36,920
you do an extract of the subversion tree

00:28:34,340 --> 00:28:38,960
locally you make modification and you

00:28:36,920 --> 00:28:41,660
want to tell those modification so you

00:28:38,960 --> 00:28:43,550
will use the sbx to build and and then

00:28:41,660 --> 00:28:45,890
build to package to create packages

00:28:43,550 --> 00:28:48,740
which will contain the code that you

00:28:45,890 --> 00:28:50,210
have extracted if you do the CMS to

00:28:48,740 --> 00:28:52,580
build it which contains the code the

00:28:50,210 --> 00:28:54,920
code which is inside so subversion tree

00:28:52,580 --> 00:28:56,660
so you have you have two ways to to

00:28:54,920 --> 00:28:57,860
build depending on what you want to test

00:28:56,660 --> 00:28:59,990
but if you are making modifications

00:28:57,860 --> 00:29:02,450
locally and that's how I'm working with

00:28:59,990 --> 00:29:06,140
the tool in fact I'll always do some box

00:29:02,450 --> 00:29:08,240
building in order to create the packages

00:29:06,140 --> 00:29:10,790
from my current modification install

00:29:08,240 --> 00:29:12,140
them test modification and once it's

00:29:10,790 --> 00:29:15,470
very that I can

00:29:12,140 --> 00:29:18,560
update my my subversion tree and push

00:29:15,470 --> 00:29:20,990
back my modifications and so it's in two

00:29:18,560 --> 00:29:23,410
steps the first step is creating a set

00:29:20,990 --> 00:29:27,980
of tar balls here one towel for the

00:29:23,410 --> 00:29:30,710
metadata and one tarball for the project

00:29:27,980 --> 00:29:32,330
data and then once you have those two

00:29:30,710 --> 00:29:35,180
tar balls you can call project builder

00:29:32,330 --> 00:29:37,940
with built PKG to create native packages

00:29:35,180 --> 00:29:40,160
on your system but you can also call

00:29:37,940 --> 00:29:43,490
bill to vm or build to v or build to a

00:29:40,160 --> 00:29:45,800
ram to be able to build across a remote

00:29:43,490 --> 00:29:48,350
system a better environment or a virtual

00:29:45,800 --> 00:29:49,820
machine and you will get back the

00:29:48,350 --> 00:29:52,460
packages and they will be pushed

00:29:49,820 --> 00:29:55,910
automatically to your repository and

00:29:52,460 --> 00:29:57,530
index is created on the fly and you also

00:29:55,910 --> 00:29:59,930
have a set of commands of course to

00:29:57,530 --> 00:30:03,430
create and set up the virtual

00:29:59,930 --> 00:30:03,430
environment and the virtual machines

00:30:07,450 --> 00:30:14,169
so what one of the that work has been

00:30:10,899 --> 00:30:17,080
done initially on my on my own time for

00:30:14,169 --> 00:30:19,750
my own pleasure to to help me build

00:30:17,080 --> 00:30:21,850
packages for another project I'm working

00:30:19,750 --> 00:30:24,130
on but it's something which can be very

00:30:21,850 --> 00:30:26,590
useful for other other usages and

00:30:24,130 --> 00:30:28,870
typically have customers i have a HP

00:30:26,590 --> 00:30:32,380
customers while building software for

00:30:28,870 --> 00:30:34,419
different type of platforms and and they

00:30:32,380 --> 00:30:37,149
really want to be able to have a single

00:30:34,419 --> 00:30:40,630
base of code and throughout the

00:30:37,149 --> 00:30:42,909
different phases of if we think about a

00:30:40,630 --> 00:30:44,610
vivir cycle approach for the software

00:30:42,909 --> 00:30:47,380
development which may or may not be

00:30:44,610 --> 00:30:51,340
convenient today but if we think about

00:30:47,380 --> 00:30:54,549
it the teams using unit doing unit test

00:30:51,340 --> 00:30:57,730
integration test or validation and up to

00:30:54,549 --> 00:30:59,860
the delivery to the end customer my own

00:30:57,730 --> 00:31:02,649
customers are building software in those

00:30:59,860 --> 00:31:04,389
contexts and most of them we are we are

00:31:02,649 --> 00:31:06,549
interacting with them because they are

00:31:04,389 --> 00:31:07,960
existing salaries customer and they want

00:31:06,549 --> 00:31:11,649
to migrate to Linux so they come to us

00:31:07,960 --> 00:31:14,230
to for help and one way for us to help

00:31:11,649 --> 00:31:16,450
them is also to say today you have a

00:31:14,230 --> 00:31:18,580
build process in place generally you are

00:31:16,450 --> 00:31:21,100
not free packaging software correctly or

00:31:18,580 --> 00:31:22,750
very fuel for the customer Isaac do the

00:31:21,100 --> 00:31:25,510
packaging correctly on answer our eyes

00:31:22,750 --> 00:31:28,750
and probably because also service does

00:31:25,510 --> 00:31:31,960
not manage dependencies correctly with

00:31:28,750 --> 00:31:34,840
an automatic tools such as a yam and I

00:31:31,960 --> 00:31:36,279
apt system to compute all the

00:31:34,840 --> 00:31:39,250
dependencies and make all the

00:31:36,279 --> 00:31:41,799
installation in one shot so as that does

00:31:39,250 --> 00:31:45,070
not exist ready on solaris yet most

00:31:41,799 --> 00:31:49,570
customary do a packaging of poor quality

00:31:45,070 --> 00:31:52,149
would say and a way to to help them is

00:31:49,570 --> 00:31:53,980
to say if you add linux you will not

00:31:52,149 --> 00:31:55,870
remove what you are doing and salaries

00:31:53,980 --> 00:31:59,730
and you you may work on solaris sparc

00:31:55,870 --> 00:32:03,039
you may work on service x86 you will not

00:31:59,730 --> 00:32:05,049
remove those development in one day you

00:32:03,039 --> 00:32:07,210
will keep maintenance for a very long

00:32:05,049 --> 00:32:09,760
time I'm working with telco customers

00:32:07,210 --> 00:32:12,010
those guys tend to have projects living

00:32:09,760 --> 00:32:15,220
for more than 10 years so they need to

00:32:12,010 --> 00:32:17,470
have an infrastructure which is in place

00:32:15,220 --> 00:32:19,720
and still working and they need to add

00:32:17,470 --> 00:32:20,679
Linux as a development track in their

00:32:19,720 --> 00:32:23,139
environment

00:32:20,679 --> 00:32:26,710
and using a tool like that is a way for

00:32:23,139 --> 00:32:30,700
them to introduce a better packaging on

00:32:26,710 --> 00:32:33,460
zest park or x86 arrays environments as

00:32:30,700 --> 00:32:35,440
well as supporting better the packaging

00:32:33,460 --> 00:32:39,070
on Linux which is a new track for them

00:32:35,440 --> 00:32:41,379
and if we introduce these practices very

00:32:39,070 --> 00:32:44,649
early in the life cycle it helps them a

00:32:41,379 --> 00:32:47,440
lot producing and more controlling more

00:32:44,649 --> 00:32:50,190
more finally the production of software

00:32:47,440 --> 00:32:55,450
to to their customers which is always a

00:32:50,190 --> 00:32:58,779
concern for for telco customers we have

00:32:55,450 --> 00:33:00,519
done a white paper on this on this for

00:32:58,779 --> 00:33:06,779
for our own customers which is available

00:33:00,519 --> 00:33:09,610
on the web and if you look at it from a

00:33:06,779 --> 00:33:13,480
multi-target perspective multi-platform

00:33:09,610 --> 00:33:16,450
perspective in general tso's customers

00:33:13,480 --> 00:33:18,730
looking at we have an existing software

00:33:16,450 --> 00:33:21,820
on solaris and we want to add linux to

00:33:18,730 --> 00:33:24,610
the to say year picture they have this

00:33:21,820 --> 00:33:27,730
very strong set of files if they are

00:33:24,610 --> 00:33:29,799
developing using c c++ type of code

00:33:27,730 --> 00:33:32,440
which is the majority of the of the

00:33:29,799 --> 00:33:35,169
telco environment those guy have a large

00:33:32,440 --> 00:33:38,259
code base which is unchanged in fact

00:33:35,169 --> 00:33:40,059
when they are migrating to linux so the

00:33:38,259 --> 00:33:41,830
number of files a number of functions

00:33:40,059 --> 00:33:44,559
that needs adaptation exists but it's

00:33:41,830 --> 00:33:48,129
not a large one so they really have to

00:33:44,559 --> 00:33:50,619
map what is not exist on solaris on to

00:33:48,129 --> 00:33:52,659
linux and they can they can package a

00:33:50,619 --> 00:33:55,659
software in a way it's also helping them

00:33:52,659 --> 00:33:58,149
keeping the core common for for a long

00:33:55,659 --> 00:34:00,549
time and and again and do not duplicate

00:33:58,149 --> 00:34:02,200
the information and share that

00:34:00,549 --> 00:34:05,529
information across the various branches

00:34:02,200 --> 00:34:08,619
and the tool help them build different

00:34:05,529 --> 00:34:12,899
packages for different platform using

00:34:08,619 --> 00:34:12,899
that set split of of software

00:34:16,210 --> 00:34:18,419
um

00:34:22,069 --> 00:34:27,419
what i can do is i can show you a small

00:34:25,409 --> 00:34:30,200
example of how it works correct

00:34:27,419 --> 00:34:30,200
concretely

00:34:40,230 --> 00:34:43,159
sooo

00:34:46,899 --> 00:34:54,279
so bear with me my machine is an at-home

00:34:50,669 --> 00:34:57,720
laptop it's not very quick I at home I

00:34:54,279 --> 00:35:01,779
have an exam based system which is

00:34:57,720 --> 00:35:04,990
showing 12 12 threads on the system here

00:35:01,779 --> 00:35:07,180
I just have one core so the build is is

00:35:04,990 --> 00:35:11,789
Laurel slower than what you are probably

00:35:07,180 --> 00:35:11,789
experiencing omnia on your environment

00:35:12,779 --> 00:35:19,059
so what does a tool here I I asked him

00:35:16,960 --> 00:35:21,640
to build from the sandbox and to build

00:35:19,059 --> 00:35:23,470
packages directly so there's a warning

00:35:21,640 --> 00:35:26,559
that you see are coming from svk not

00:35:23,470 --> 00:35:29,049
from the software itself so it tries to

00:35:26,559 --> 00:35:30,849
to identify which is a project what

00:35:29,049 --> 00:35:32,799
actually does it has to do and which

00:35:30,849 --> 00:35:35,740
other packages it needs to build for and

00:35:32,799 --> 00:35:37,450
then for each of the software bricks I

00:35:35,740 --> 00:35:40,299
want to build so I have four packages

00:35:37,450 --> 00:35:43,690
here identified in my mobile environment

00:35:40,299 --> 00:35:45,910
it will first do an export for each of

00:35:43,690 --> 00:35:49,180
the of the bricks it will do an export

00:35:45,910 --> 00:35:52,900
from sudesh so my local submersion svk

00:35:49,180 --> 00:35:54,520
into temporary directory it will deal

00:35:52,900 --> 00:35:56,470
with it was a changelog and it will

00:35:54,520 --> 00:35:58,720
prepare the delivery so here it's quite

00:35:56,470 --> 00:36:00,609
long because I'm so the tool is

00:35:58,720 --> 00:36:03,339
parallelizing if you have a multi-core

00:36:00,609 --> 00:36:06,819
system here you will you will have a

00:36:03,339 --> 00:36:09,400
very quick work because at that point

00:36:06,819 --> 00:36:11,440
it's generating all the build

00:36:09,400 --> 00:36:13,299
information for all the distribution I

00:36:11,440 --> 00:36:17,020
am supporting so it's generating more

00:36:13,299 --> 00:36:19,329
than 100 set of files for all the

00:36:17,020 --> 00:36:22,569
distribution I'm supporting so it takes

00:36:19,329 --> 00:36:25,539
a bit of time on that at home system it

00:36:22,569 --> 00:36:27,849
will do it four times potentially it

00:36:25,539 --> 00:36:29,950
will apply patches if there are patches

00:36:27,849 --> 00:36:32,500
but here I'm I'm upstream so I don't

00:36:29,950 --> 00:36:35,109
have patches to apply and it will create

00:36:32,500 --> 00:36:37,510
for me to tar files 1 / 5 for the

00:36:35,109 --> 00:36:39,279
upstream project that I can also push to

00:36:37,510 --> 00:36:42,520
my ftp server if i want people to use

00:36:39,279 --> 00:36:47,410
that and another tar file for the

00:36:42,520 --> 00:36:49,660
configuration via the build files in

00:36:47,410 --> 00:36:53,670
fact all the metadata so if you look at

00:36:49,660 --> 00:36:53,670
it for example in another

00:37:04,090 --> 00:37:08,390
so you will see that this tar file in

00:37:07,040 --> 00:37:11,420
fact and that's what was long to

00:37:08,390 --> 00:37:13,100
generate contains a certain number so

00:37:11,420 --> 00:37:17,000
everything will be put in a specific

00:37:13,100 --> 00:37:18,740
subdirectory alongside your your project

00:37:17,000 --> 00:37:20,780
information and then for each

00:37:18,740 --> 00:37:22,760
distribution I am supporting it will

00:37:20,780 --> 00:37:26,620
create one sub directory which is at

00:37:22,760 --> 00:37:28,310
Apple which is sorry so name of the

00:37:26,620 --> 00:37:29,720
distributions version of the

00:37:28,310 --> 00:37:31,760
distribution and the architecture on

00:37:29,720 --> 00:37:33,470
which you are working and then under

00:37:31,760 --> 00:37:36,530
that subdirectory you will find

00:37:33,470 --> 00:37:39,440
everything that that distribution needs

00:37:36,530 --> 00:37:42,680
to build a software so spec file if it's

00:37:39,440 --> 00:37:45,650
an RPM if it's a new going to like here

00:37:42,680 --> 00:37:48,860
you have a different files such as the

00:37:45,650 --> 00:37:51,710
control rules some docs or whatever

00:37:48,860 --> 00:37:53,330
compat files changelog etc so the change

00:37:51,710 --> 00:37:55,490
log for example here is generated from

00:37:53,330 --> 00:37:59,300
the change log which is in the project

00:37:55,490 --> 00:38:01,340
and so here you have a certain number of

00:37:59,300 --> 00:38:05,150
a various distribution for which is

00:38:01,340 --> 00:38:08,960
building and then afterwards so if I go

00:38:05,150 --> 00:38:11,240
back to my other window so it's still

00:38:08,960 --> 00:38:13,700
not done here so it has done that for

00:38:11,240 --> 00:38:16,430
the first one second one there's a third

00:38:13,700 --> 00:38:18,500
one and then afterwards it will call so

00:38:16,430 --> 00:38:22,880
here I'm building locally natively on my

00:38:18,500 --> 00:38:25,400
laptop so I have shortcuts here I do it

00:38:22,880 --> 00:38:27,230
like that to show to you that the second

00:38:25,400 --> 00:38:29,390
file contains everything normally when I

00:38:27,230 --> 00:38:31,940
build it on that machine I just

00:38:29,390 --> 00:38:35,480
restricted built for my local system in

00:38:31,940 --> 00:38:37,400
order to avoid to wait five minutes each

00:38:35,480 --> 00:38:41,720
time because on this system it's quite

00:38:37,400 --> 00:38:44,770
slow and once all the tar files have

00:38:41,720 --> 00:38:48,230
been created for all the packages then

00:38:44,770 --> 00:38:49,880
it calls normally the next one it will

00:38:48,230 --> 00:38:52,370
call the the build of the package is

00:38:49,880 --> 00:38:54,410
locally for photo distribution so here I

00:38:52,370 --> 00:38:58,430
am on madrea distribution so it will

00:38:54,410 --> 00:39:01,250
call RPM build pack using the spec file

00:38:58,430 --> 00:39:04,820
which is from the local but all those

00:39:01,250 --> 00:39:06,710
tar files contain everything in a single

00:39:04,820 --> 00:39:09,560
instance everything which is needed to

00:39:06,710 --> 00:39:12,200
build for 100 different distributions so

00:39:09,560 --> 00:39:14,390
I can just move the past those files

00:39:12,200 --> 00:39:17,400
along into my virtual environments

00:39:14,390 --> 00:39:19,200
without removing machines and I will get

00:39:17,400 --> 00:39:22,820
you need everything I need to build for

00:39:19,200 --> 00:39:22,820
the local distribution I am building for

00:39:30,740 --> 00:39:38,330
okay so once once it has created all my

00:39:35,900 --> 00:39:40,670
photo file then it create packages so

00:39:38,330 --> 00:39:43,280
for packages I am asking to create then

00:39:40,670 --> 00:39:45,950
it's extracting the spec file from the

00:39:43,280 --> 00:39:48,860
tazo PB computer file because it knows

00:39:45,950 --> 00:39:51,260
it's a an RPM base distribution and then

00:39:48,860 --> 00:39:53,750
it's creating it's calling the RPM built

00:39:51,260 --> 00:39:55,580
for each of the of the packages it

00:39:53,750 --> 00:39:57,080
applies patches if there are patches to

00:39:55,580 --> 00:40:00,850
apply which is not the case because I'm

00:39:57,080 --> 00:40:03,110
upstream potentially source files from

00:40:00,850 --> 00:40:05,060
additional source file if the additional

00:40:03,110 --> 00:40:07,670
source files could be either patch files

00:40:05,060 --> 00:40:13,970
of source files and then it builds at

00:40:07,670 --> 00:40:15,680
its turn each of the packages so

00:40:13,970 --> 00:40:20,390
software is written in perl it it takes

00:40:15,680 --> 00:40:22,640
also in the counter lasted some rules

00:40:20,390 --> 00:40:26,330
naming rules for example the pearl build

00:40:22,640 --> 00:40:28,760
of packages is really specific on debian

00:40:26,330 --> 00:40:30,619
and all RPM systems or certain rules the

00:40:28,760 --> 00:40:33,380
tool is also able to apply those rules

00:40:30,619 --> 00:40:35,750
to have a bell dash something name of

00:40:33,380 --> 00:40:39,020
packages on RPM based system or leave

00:40:35,750 --> 00:40:41,270
something dash pearl on debian it takes

00:40:39,020 --> 00:40:43,340
into account that type of stuff it can

00:40:41,270 --> 00:40:45,170
also sign packages so here i don't have

00:40:43,340 --> 00:40:46,900
my keys on that laptop so I'm not

00:40:45,170 --> 00:40:52,700
signing but it tries to call the

00:40:46,900 --> 00:40:54,650
signature system then it calls the RPM

00:40:52,700 --> 00:40:55,850
lint which is not working here in my

00:40:54,650 --> 00:40:57,470
environment because i have a special

00:40:55,850 --> 00:41:01,340
character in one of the files which

00:40:57,470 --> 00:41:03,140
makes it fail and it builds for me a

00:41:01,340 --> 00:41:06,140
certain number of packages which are

00:41:03,140 --> 00:41:08,600
mentioned here source packages or PM

00:41:06,140 --> 00:41:12,500
packages i have the list i can just pass

00:41:08,600 --> 00:41:14,150
through europe emi of that line and i

00:41:12,500 --> 00:41:17,290
will have an installation of those

00:41:14,150 --> 00:41:17,290
packages on my system

00:41:36,160 --> 00:41:42,010
and here I'm working on the development

00:41:38,559 --> 00:41:45,880
version of project builder so this is a

00:41:42,010 --> 00:41:48,609
development branch and the tagging you

00:41:45,880 --> 00:41:50,770
can ISM put in place is also done by

00:41:48,609 --> 00:41:55,329
project builder automatically in order

00:41:50,770 --> 00:41:57,339
to help with the tags it's easy to

00:41:55,329 --> 00:41:59,049
install a new version because it's based

00:41:57,339 --> 00:42:01,930
on the date so each time the track will

00:41:59,049 --> 00:42:03,549
increase you will be able to do that

00:42:01,930 --> 00:42:05,289
command it will not cause any problem

00:42:03,549 --> 00:42:07,630
and once you have the final version

00:42:05,289 --> 00:42:12,130
anyway it will not be the same tag not

00:42:07,630 --> 00:42:17,200
the same version now I've done that the

00:42:12,130 --> 00:42:19,329
natively I can do that so I will not

00:42:17,200 --> 00:42:21,099
restart from the from the sandbox

00:42:19,329 --> 00:42:23,230
because i already have built my miter

00:42:21,099 --> 00:42:26,200
file so we'll start from the build

00:42:23,230 --> 00:42:29,109
environment and this time i will build

00:42:26,200 --> 00:42:36,539
to a virtual machine which is for

00:42:29,109 --> 00:42:36,539
example some 2s 5s 386

00:42:43,150 --> 00:42:49,690
so it starts from the fact that it

00:42:45,940 --> 00:42:53,230
already has the sitar file and this time

00:42:49,690 --> 00:42:56,230
it's moving all those sources into the

00:42:53,230 --> 00:42:58,780
virtual environment and it's calling a

00:42:56,230 --> 00:43:00,850
script in the virtual environment so the

00:42:58,780 --> 00:43:04,120
Schrute which is located here of p.m.

00:43:00,850 --> 00:43:07,630
bootstraps and two as five i386 so this

00:43:04,120 --> 00:43:13,210
is my my major Schrute and then it's

00:43:07,630 --> 00:43:16,750
calling ok so maybe we can go back a bit

00:43:13,210 --> 00:43:18,700
to explain that so then it's calling a

00:43:16,750 --> 00:43:21,010
project builder in size of Schrute and

00:43:18,700 --> 00:43:23,770
inside the Schrute project builder is

00:43:21,010 --> 00:43:26,950
building again or PM packages but this

00:43:23,770 --> 00:43:34,630
time for sent OS system then it gets the

00:43:26,950 --> 00:43:37,390
packages from the Schrute environment it

00:43:34,630 --> 00:43:40,390
tries to sign them which is still cannot

00:43:37,390 --> 00:43:46,150
do but it could on my real build system

00:43:40,390 --> 00:43:49,000
and then it does local so here I'm doing

00:43:46,150 --> 00:43:52,650
a local delivery so all those packages

00:43:49,000 --> 00:43:55,330
are sent into my home ftp test

00:43:52,650 --> 00:43:57,790
environment so i have a local ftp server

00:43:55,330 --> 00:44:04,300
that i am populating with the content of

00:43:57,790 --> 00:44:06,970
those packages and i can execute also ok

00:44:04,300 --> 00:44:08,770
so the credit repos so I'm moving to

00:44:06,970 --> 00:44:10,660
measure yet not all the tools are yet

00:44:08,770 --> 00:44:12,310
available on my idea to build for all

00:44:10,660 --> 00:44:14,260
the other distribution because the

00:44:12,310 --> 00:44:16,210
interesting topic I have to solve that I

00:44:14,260 --> 00:44:19,360
need to be able to launch debian tools

00:44:16,210 --> 00:44:20,650
on magia federal tools of course the

00:44:19,360 --> 00:44:22,720
native tools are working but once you

00:44:20,650 --> 00:44:24,430
have chosen one distribution you also

00:44:22,720 --> 00:44:25,990
need to provide all the other build

00:44:24,430 --> 00:44:28,930
tools available for the other

00:44:25,990 --> 00:44:31,240
distribution as well and so this one is

00:44:28,930 --> 00:44:34,950
not building correctly the secure a

00:44:31,240 --> 00:44:34,950
triple STUFT but if we look at

00:44:51,970 --> 00:44:58,140
so here if I go up I've I just built for

00:44:58,170 --> 00:45:08,440
sin to s5 so here this is a local law

00:45:02,710 --> 00:45:14,070
also this is my ftp server locally and I

00:45:08,440 --> 00:45:20,910
can see that I've just built normally

00:45:14,070 --> 00:45:20,910
from 930 no not shown here

00:45:48,530 --> 00:45:53,410
all this fresh

00:45:50,410 --> 00:45:56,950
ok so the packages are correctly

00:45:53,410 --> 00:45:59,190
uploaded just at the time expected in

00:45:56,950 --> 00:46:02,680
the directory so you have my I have my

00:45:59,190 --> 00:46:05,880
sets of two souls and binary packages

00:46:02,680 --> 00:46:08,740
for my my environment i don't know why

00:46:05,880 --> 00:46:16,510
browser does not see them and of course

00:46:08,740 --> 00:46:18,809
i can also build now for something more

00:46:16,510 --> 00:46:18,809
interesting

00:46:29,370 --> 00:46:36,510
so I have us also a Schrute for the

00:46:32,160 --> 00:46:39,270
Ubuntu 1110 available and so because

00:46:36,510 --> 00:46:42,540
here I had just shown for to you to

00:46:39,270 --> 00:46:45,330
build just rpm packages which is already

00:46:42,540 --> 00:46:47,550
interesting but not sufficient in my

00:46:45,330 --> 00:46:51,890
opinion so the goal is really to build

00:46:47,550 --> 00:46:54,150
for a different type of environments and

00:46:51,890 --> 00:46:58,170
here we are building for an Ubuntu

00:46:54,150 --> 00:47:00,150
distribution so the same we are passing

00:46:58,170 --> 00:47:02,640
all the files required in the Schrute

00:47:00,150 --> 00:47:05,430
environment here coding project builder

00:47:02,640 --> 00:47:07,470
in size of Schrute environment so it's

00:47:05,430 --> 00:47:09,780
building the packages and once it's done

00:47:07,470 --> 00:47:13,650
it will provide to me a set of packages

00:47:09,780 --> 00:47:16,770
and also try to call the tool to build

00:47:13,650 --> 00:47:19,320
the apt repository which won't work on

00:47:16,770 --> 00:47:21,890
the on that version because they are not

00:47:19,320 --> 00:47:21,890
yet available

00:47:26,570 --> 00:47:29,560
any question

00:47:30,140 --> 00:47:32,769
yes

00:47:35,830 --> 00:47:40,360
so is that release use the microphone

00:47:38,560 --> 00:47:44,050
and I raised a question so that people

00:47:40,360 --> 00:47:45,910
from abroad may hear the questions so

00:47:44,050 --> 00:47:51,790
the question is is there a Mac or

00:47:45,910 --> 00:47:53,500
Windows built rude somehow not yet not

00:47:51,790 --> 00:47:55,110
yet because I don't have any Mac ham I'm

00:47:53,500 --> 00:47:59,800
working for HP so it's a bit difficult

00:47:55,110 --> 00:48:03,820
it's a politically difficult topic so I

00:47:59,800 --> 00:48:05,830
I don't have a mac and i'm not

00:48:03,820 --> 00:48:09,760
interested by windows so that's another

00:48:05,830 --> 00:48:11,170
problem so so i mean in the ways of the

00:48:09,760 --> 00:48:14,620
tool is designed there is nothing

00:48:11,170 --> 00:48:16,630
preventing you to do it now I need

00:48:14,620 --> 00:48:18,400
information I need input from people for

00:48:16,630 --> 00:48:20,890
four words really important so that I

00:48:18,400 --> 00:48:25,270
can put the right entry in the software

00:48:20,890 --> 00:48:29,710
and make it available but ok so this

00:48:25,270 --> 00:48:36,220
time it asked me to we'll just cancel it

00:48:29,710 --> 00:48:38,620
because I don't want so yeah why not so

00:48:36,220 --> 00:48:40,300
the mechanism or similar as long as I

00:48:38,620 --> 00:48:42,250
can communicate with the windows machine

00:48:40,300 --> 00:48:45,790
through an SSH mechanism which is a

00:48:42,250 --> 00:48:48,690
variable same for the mac and so

00:48:45,790 --> 00:48:51,910
software is written in perl there is i

00:48:48,690 --> 00:48:54,640
am reap cautious about not not having

00:48:51,910 --> 00:48:57,250
external dependencies as much as

00:48:54,640 --> 00:48:59,830
possible so i just rely on three perl

00:48:57,250 --> 00:49:03,580
modules on top of what Perl provides in

00:48:59,830 --> 00:49:05,260
five dot eight and i tried because I

00:49:03,580 --> 00:49:07,150
want to keep also compatibility with

00:49:05,260 --> 00:49:11,680
very old type of environment to build

00:49:07,150 --> 00:49:13,240
for stuff which are ages old I want to

00:49:11,680 --> 00:49:14,950
reduce the number of dependency as much

00:49:13,240 --> 00:49:16,900
as possible to be as portable as

00:49:14,950 --> 00:49:18,850
possible across different environments

00:49:16,900 --> 00:49:23,370
so it should be fairly easy to do that

00:49:18,850 --> 00:49:27,040
it on Mike and Mike Western and windows

00:49:23,370 --> 00:49:28,930
okay so here i have i have the co2 to

00:49:27,040 --> 00:49:33,730
the dpkg scan packages which is working

00:49:28,930 --> 00:49:36,070
but not to the ftp aft ftp a PT ftp

00:49:33,730 --> 00:49:40,440
archive is not working but i got i got

00:49:36,070 --> 00:49:40,440
my my packages and if i go into my

00:49:41,160 --> 00:49:46,170
directory where i'm uploading

00:49:53,509 --> 00:50:06,259
so I can see that I've just uploaded my

00:49:57,039 --> 00:50:08,829
content for Debian packages here any

00:50:06,259 --> 00:50:08,829
other question

00:50:11,920 --> 00:50:19,579
why do use custom untruth insulation for

00:50:16,099 --> 00:50:24,410
fedora the RPM bootstrap banderas native

00:50:19,579 --> 00:50:26,630
truth initialization called mock mock so

00:50:24,410 --> 00:50:28,130
you can call Mauch the stuff with

00:50:26,630 --> 00:50:31,180
markets it's been limited compared to

00:50:28,130 --> 00:50:34,460
what i'm doing with with RPM bootstrap

00:50:31,180 --> 00:50:37,099
mark is to the last time I tried it and

00:50:34,460 --> 00:50:39,140
it's quite some months ago I must

00:50:37,099 --> 00:50:40,930
confess but the last time I tried it it

00:50:39,140 --> 00:50:44,119
was not able to work with autumn Susie

00:50:40,930 --> 00:50:46,130
Norway's monterey by correctly sure it

00:50:44,119 --> 00:50:48,410
is only nineteen eighty four per darlin

00:50:46,130 --> 00:50:50,839
but when you are building for federal

00:50:48,410 --> 00:50:52,369
packages I think you can you smoke there

00:50:50,839 --> 00:50:53,930
is no problem you can call Mauch I

00:50:52,369 --> 00:50:56,329
haven't read points for work as well as

00:50:53,930 --> 00:50:59,089
for rpm bootstrap as well as for rinse

00:50:56,329 --> 00:51:02,390
rinse is quite is a bit more portable

00:50:59,089 --> 00:51:04,369
than mark but it's it has not moved a

00:51:02,390 --> 00:51:05,960
lot recently as well so it's not

00:51:04,369 --> 00:51:09,440
supporting correctly the latest version

00:51:05,960 --> 00:51:11,690
of distribution as well but you can use

00:51:09,440 --> 00:51:18,470
mark if you prefer nope no problem with

00:51:11,690 --> 00:51:22,099
that I you said that solaris is missing

00:51:18,470 --> 00:51:24,619
a tool for automatic dependency tracking

00:51:22,099 --> 00:51:26,930
an installation like apt may I point

00:51:24,619 --> 00:51:29,390
your interest to PKG you tell from the

00:51:26,930 --> 00:51:34,700
open cashew project which does exactly

00:51:29,390 --> 00:51:36,499
that for solaris okay good so i need to

00:51:34,700 --> 00:51:38,480
point my customers to that tool because

00:51:36,499 --> 00:51:42,400
that's more useful for them that for me

00:51:38,480 --> 00:51:42,400
meta okay

00:51:48,720 --> 00:51:57,720
purporting to some new platform which

00:51:53,190 --> 00:52:07,710
are the files I need to touch when a at

00:51:57,720 --> 00:52:10,390
supports a4a x that's a good question so

00:52:07,710 --> 00:52:12,640
you need to look at the at the source

00:52:10,390 --> 00:52:14,770
code for for project builder and you

00:52:12,640 --> 00:52:17,560
need the best way would be to look at

00:52:14,770 --> 00:52:20,470
the Solaris entry points and to create

00:52:17,560 --> 00:52:21,970
branches for AIX similarly to what has

00:52:20,470 --> 00:52:23,620
been done for solar resource there are

00:52:21,970 --> 00:52:28,150
also many pots for HP weeks but it's not

00:52:23,620 --> 00:52:33,010
completely supported yet and there are

00:52:28,150 --> 00:52:35,140
not a lot of aspects to do this the

00:52:33,010 --> 00:52:38,020
major one is how to package for that

00:52:35,140 --> 00:52:40,690
platform that operating system so there

00:52:38,020 --> 00:52:42,670
is a point where you call the right tool

00:52:40,690 --> 00:52:44,770
which is in charge of building the

00:52:42,670 --> 00:52:47,980
native package and that's a section

00:52:44,770 --> 00:52:51,190
Union really need to develop for AIX for

00:52:47,980 --> 00:52:54,400
the rest it's much more matter of a

00:52:51,190 --> 00:52:57,460
certain number of configuration file so

00:52:54,400 --> 00:52:59,790
I have not shown to you but most of the

00:52:57,460 --> 00:53:03,850
software is working through

00:52:59,790 --> 00:53:07,000
configuration file and not through I try

00:53:03,850 --> 00:53:12,160
to avoid to out code too much stuff so

00:53:07,000 --> 00:53:15,250
for example you you have the way to

00:53:12,160 --> 00:53:16,480
detect automatically the distribution on

00:53:15,250 --> 00:53:20,670
which are the US on which you are

00:53:16,480 --> 00:53:24,010
working is mentioned here you have the

00:53:20,670 --> 00:53:27,250
UFO if you want to do it for AIX you

00:53:24,010 --> 00:53:29,710
would have to create a hierarchy like

00:53:27,250 --> 00:53:31,390
that of information which could be very

00:53:29,710 --> 00:53:36,100
simple for eh because you may not have

00:53:31,390 --> 00:53:39,190
as many sub categories as we have for

00:53:36,100 --> 00:53:43,060
for linux typically then you need to

00:53:39,190 --> 00:53:44,470
create a type which is associated to

00:53:43,060 --> 00:53:46,680
that new operating system which is

00:53:44,470 --> 00:53:49,450
generally the name of the package format

00:53:46,680 --> 00:53:52,420
and then there are there are certain

00:53:49,450 --> 00:53:55,470
number of commands to deal with updates

00:53:52,420 --> 00:53:59,020
and stuff installation of packages

00:53:55,470 --> 00:54:01,509
extensions that you want to use and then

00:53:59,020 --> 00:54:03,579
for example for rpm bootstrap

00:54:01,509 --> 00:54:06,249
here you have the minimum set of

00:54:03,579 --> 00:54:07,630
packages that needs to be installed in

00:54:06,249 --> 00:54:09,369
order to have a working Schrute

00:54:07,630 --> 00:54:12,819
environment but that may not be what you

00:54:09,369 --> 00:54:16,869
want to do first anyway for ax okay

00:54:12,819 --> 00:54:19,089
given the platform support is done

00:54:16,869 --> 00:54:21,999
invincible what do I need to touch in

00:54:19,089 --> 00:54:25,630
the in the package definition to support

00:54:21,999 --> 00:54:27,999
the new platform so in the package

00:54:25,630 --> 00:54:31,979
definition what you would need to to add

00:54:27,999 --> 00:54:37,059
is generating a template a skeleton of

00:54:31,979 --> 00:54:39,279
build file for AIX so typically a

00:54:37,059 --> 00:54:42,219
project builder when I when I added the

00:54:39,279 --> 00:54:44,769
support for solaris when you create a

00:54:42,219 --> 00:54:47,619
new project it will automatically a PKG

00:54:44,769 --> 00:54:50,849
info for you so you would have to create

00:54:47,619 --> 00:54:54,639
also the basic template for an AIX build

00:54:50,849 --> 00:54:57,099
was the right macros in it and and that

00:54:54,639 --> 00:54:59,199
will be used by here's a section of the

00:54:57,099 --> 00:55:00,880
tool which called the build for your

00:54:59,199 --> 00:55:03,369
specific format but we can discuss that

00:55:00,880 --> 00:55:07,809
may be a more offline because it's not

00:55:03,369 --> 00:55:10,169
as very easy to transplant but this is

00:55:07,809 --> 00:55:12,849
necessary for each package to be done

00:55:10,169 --> 00:55:16,809
it's no it's it's necessary for each

00:55:12,849 --> 00:55:18,939
package type to be done so once once you

00:55:16,809 --> 00:55:20,589
are able to bid for AIX whatever

00:55:18,939 --> 00:55:22,899
application you want to build for AIX

00:55:20,589 --> 00:55:24,579
will be will be worried it will work out

00:55:22,899 --> 00:55:27,279
of the box but what you need is to

00:55:24,579 --> 00:55:29,259
support a new package format and a new

00:55:27,279 --> 00:55:32,469
package type so so you need to provide

00:55:29,259 --> 00:55:34,959
those information for it but Sir RS it

00:55:32,469 --> 00:55:37,389
took me it took me two and a half day to

00:55:34,959 --> 00:55:40,119
understand how salaries packaging was

00:55:37,389 --> 00:55:42,549
working with a background of nooks

00:55:40,119 --> 00:55:45,219
packager and it took me half a day to

00:55:42,549 --> 00:55:48,039
add the code in it to make it really

00:55:45,219 --> 00:55:50,589
work but it's much more understanding

00:55:48,039 --> 00:55:52,539
how a new operating system is packaging

00:55:50,589 --> 00:55:55,509
software and generally that's where you

00:55:52,539 --> 00:55:56,799
have if you are if you're used to that

00:55:55,509 --> 00:55:58,419
that's that's a good point because

00:55:56,799 --> 00:56:00,719
that's where I need to ask question

00:55:58,419 --> 00:56:00,719
engine

00:56:06,619 --> 00:56:13,579
I noticed that there's quite a big

00:56:10,880 --> 00:56:16,849
overlap between project Leda and what

00:56:13,579 --> 00:56:18,680
the open-bolt service does this building

00:56:16,849 --> 00:56:23,049
for multiple distributions publishing

00:56:18,680 --> 00:56:28,059
ripples and such are there plans to

00:56:23,049 --> 00:56:31,009
cooperate somewhere share tools things

00:56:28,059 --> 00:56:32,569
wine why not I would say the problem is

00:56:31,009 --> 00:56:34,819
the code base is not written in the same

00:56:32,569 --> 00:56:39,249
language it makes probably exchange a

00:56:34,819 --> 00:56:39,249

YouTube URL: https://www.youtube.com/watch?v=rwFs8-M-_3k


