Title: Multiarch - why it's important
Publication date: 2013-02-05
Playlist: FOSDEM 2012
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,000 --> 00:00:05,279
is for those of you with no idea what

00:00:02,220 --> 00:00:07,560
you can do with it and then some more

00:00:05,279 --> 00:00:09,059
detail and how it actually works and why

00:00:07,560 --> 00:00:12,210
this is important and what I really like

00:00:09,059 --> 00:00:15,210
to get to hopefully is that people think

00:00:12,210 --> 00:00:17,100
it's useful and some discussion of

00:00:15,210 --> 00:00:18,480
whether this is useful beyond the world

00:00:17,100 --> 00:00:25,490
of debian ubuntu where it currently

00:00:18,480 --> 00:00:27,840
exists so multi arch fundamentally is

00:00:25,490 --> 00:00:30,510
quite a simple thing it's just a way of

00:00:27,840 --> 00:00:32,460
installing libraries for more than what

00:00:30,510 --> 00:00:35,690
architecture on the same system or

00:00:32,460 --> 00:00:38,430
within the same file system obviously

00:00:35,690 --> 00:00:42,030
this problem was sort of solved when

00:00:38,430 --> 00:00:46,620
amd64 came along with liban lib 64 which

00:00:42,030 --> 00:00:47,489
is what Susan Red Hat did the problem

00:00:46,620 --> 00:00:51,600
with that is that you have to special

00:00:47,489 --> 00:00:55,530
case amd64 and Debian didn't like that

00:00:51,600 --> 00:00:59,520
much so we didn't and instead produced

00:00:55,530 --> 00:01:00,960
the abomination that is ia32 libs so a

00:00:59,520 --> 00:01:05,519
few packages in debian are built for

00:01:00,960 --> 00:01:07,500
both 32-bit 64-bit but most aren't and

00:01:05,519 --> 00:01:10,080
so all the things that you actually need

00:01:07,500 --> 00:01:12,360
in order to run 32-bit apps on 64-bit

00:01:10,080 --> 00:01:16,890
system go into one joint mungus passing

00:01:12,360 --> 00:01:22,200
package I 32 libs which is installed in

00:01:16,890 --> 00:01:23,759
/ ml ie 32 the problem with that is that

00:01:22,200 --> 00:01:25,229
it's maintenance nightmare because every

00:01:23,759 --> 00:01:28,369
time any of those packages change you

00:01:25,229 --> 00:01:36,360
have to upload a new version of this

00:01:28,369 --> 00:01:39,150
totally stupendous package so multi arch

00:01:36,360 --> 00:01:42,390
is fundamentally not complicated the

00:01:39,150 --> 00:01:44,310
basic concept is astonishingly simple in

00:01:42,390 --> 00:01:46,500
order to install multiple architecture

00:01:44,310 --> 00:01:49,970
libraries on one system you need them

00:01:46,500 --> 00:01:53,490
not to have the same file names so

00:01:49,970 --> 00:01:55,110
instead of putting lib who for whatever

00:01:53,490 --> 00:01:58,110
architects you happen to be using and

00:01:55,110 --> 00:01:59,659
use a lib you put all libraries in

00:01:58,110 --> 00:02:04,229
architecture qualified directories

00:01:59,659 --> 00:02:05,939
that's it no I won't go home now the

00:02:04,229 --> 00:02:08,190
problem is that changing that from where

00:02:05,939 --> 00:02:10,350
we are is a big deal everything

00:02:08,190 --> 00:02:11,700
everywhere where the ladies are he's got

00:02:10,350 --> 00:02:14,760
just get moving things around expect

00:02:11,700 --> 00:02:17,580
everything to work and the advantages of

00:02:14,760 --> 00:02:20,310
this are significant it's quite a

00:02:17,580 --> 00:02:21,750
fundamental change so that the way I

00:02:20,310 --> 00:02:24,210
found is most useful to think about it

00:02:21,750 --> 00:02:26,190
is that now libraries have a canonical

00:02:24,210 --> 00:02:29,600
path for whatever architecture they are

00:02:26,190 --> 00:02:33,660
so there's just one place where the arm

00:02:29,600 --> 00:02:35,550
Yale version of live whatever will be

00:02:33,660 --> 00:02:38,400
always and it doesn't matter whether

00:02:35,550 --> 00:02:41,160
you're running under qemu or Uranus this

00:02:38,400 --> 00:02:42,630
route or Iran native system or your

00:02:41,160 --> 00:02:45,090
cross building it's always in the same

00:02:42,630 --> 00:02:47,070
place path so that the paths don't

00:02:45,090 --> 00:02:48,390
change so especially if you've done a

00:02:47,070 --> 00:02:49,410
lot of cross building you'll know it's a

00:02:48,390 --> 00:02:50,880
right pain in the ass when you're trying

00:02:49,410 --> 00:02:52,530
to link against the library over here

00:02:50,880 --> 00:02:53,730
but when you install it it's going to be

00:02:52,530 --> 00:02:55,830
somewhere different and you've got to

00:02:53,730 --> 00:03:00,300
get libtool do the right thing all that

00:02:55,830 --> 00:03:02,990
just goes away it's marvelous at least

00:03:00,300 --> 00:03:07,560
in principle this can also cover the

00:03:02,990 --> 00:03:09,450
cases of running things like Solaris on

00:03:07,560 --> 00:03:11,910
Linux which I don't guess anybody does

00:03:09,450 --> 00:03:13,470
much anymore but there is a special

00:03:11,910 --> 00:03:15,750
directory to install stuff in if you

00:03:13,470 --> 00:03:21,900
want to do that and you could just use

00:03:15,750 --> 00:03:23,640
multi arch so most of the driver for

00:03:21,900 --> 00:03:27,930
actually doing this has come from the

00:03:23,640 --> 00:03:30,780
fact that I e32 lives is horrible and a

00:03:27,930 --> 00:03:32,640
massive pain in the bum so as taluk

00:03:30,780 --> 00:03:34,709
pointed out it's now the biggest source

00:03:32,640 --> 00:03:37,500
package in debian and he pointed that

00:03:34,709 --> 00:03:40,260
out in 2005 and it hasn't got any better

00:03:37,500 --> 00:03:45,360
since then as people keep adding wine

00:03:40,260 --> 00:03:47,370
libs two things so this was a temporary

00:03:45,360 --> 00:03:53,459
scheme to deal with the fact that we

00:03:47,370 --> 00:03:57,180
weren't using the lib 64 mechanism but

00:03:53,459 --> 00:03:59,870
it's taken quite a long time to fix it

00:03:57,180 --> 00:03:59,870
and do it properly

00:04:00,210 --> 00:04:08,319
just some idea of of how this went so

00:04:03,460 --> 00:04:10,060
back in 2004 tolly fog he wrote a nice

00:04:08,319 --> 00:04:12,130
specification saying this is Hamilton

00:04:10,060 --> 00:04:14,970
art should work there were a few ifs and

00:04:12,130 --> 00:04:17,109
buts but basically that was the plan

00:04:14,970 --> 00:04:20,590
move things into architecture qualified

00:04:17,109 --> 00:04:22,660
directories and then there was a talk at

00:04:20,590 --> 00:04:25,120
DEFCON 5 and people went yeah okay

00:04:22,660 --> 00:04:27,430
that's a good idea and there was a

00:04:25,120 --> 00:04:29,230
significant meeting here and everyone

00:04:27,430 --> 00:04:31,180
went yeah yes let's let's do this thing

00:04:29,230 --> 00:04:32,830
you know a couple of years after that

00:04:31,180 --> 00:04:34,419
finally some patches for D package

00:04:32,830 --> 00:04:36,960
turned up not many people like a candy

00:04:34,419 --> 00:04:40,390
package it's not a very satisfactory

00:04:36,960 --> 00:04:43,720
pleasing activity and any patches for

00:04:40,390 --> 00:04:46,390
GCC and a whole lot of work and so one

00:04:43,720 --> 00:04:48,910
of the things we realized during this

00:04:46,390 --> 00:04:52,150
process was that you have to scale down

00:04:48,910 --> 00:04:53,860
the size of your plan if you want to fix

00:04:52,150 --> 00:04:55,650
everything in the whole world at the

00:04:53,860 --> 00:04:59,500
beginning you'll never get it done ever

00:04:55,650 --> 00:05:01,180
so by restricting the process to just

00:04:59,500 --> 00:05:02,470
the library part of this and not

00:05:01,180 --> 00:05:04,090
worrying too much about the cross

00:05:02,470 --> 00:05:05,500
building part or the running multiple

00:05:04,090 --> 00:05:07,660
binaries all the other things you could

00:05:05,500 --> 00:05:09,850
cool things you could do we did

00:05:07,660 --> 00:05:12,280
eventually get it done and I must

00:05:09,850 --> 00:05:13,690
congratulate Steve langa sec for for

00:05:12,280 --> 00:05:15,669
driving that process for about the last

00:05:13,690 --> 00:05:17,650
four years and banging heads together

00:05:15,669 --> 00:05:19,720
and saying no we're not worrying about

00:05:17,650 --> 00:05:22,270
that part just do the bit we do know

00:05:19,720 --> 00:05:27,880
understand don't try and everything at

00:05:22,270 --> 00:05:30,370
once so as of about a year ago and this

00:05:27,880 --> 00:05:31,660
was working in ubuntu it turns out this

00:05:30,370 --> 00:05:34,120
sort of thing is easier to get done the

00:05:31,660 --> 00:05:35,350
bun to than it is in debian because if

00:05:34,120 --> 00:05:37,810
you can persuade the powers that be that

00:05:35,350 --> 00:05:39,460
this is what we're going to do then you

00:05:37,810 --> 00:05:40,570
can just tell people to stop arguing and

00:05:39,460 --> 00:05:44,950
get on with it whereas because it's

00:05:40,570 --> 00:05:47,740
slightly hard to do it w and in fact we

00:05:44,950 --> 00:05:49,600
still don't have multi arch d package in

00:05:47,740 --> 00:05:51,430
debian but it looks like that problem is

00:05:49,600 --> 00:05:54,270
being fixed as we speak and you'll

00:05:51,430 --> 00:05:54,270
probably get it on monday

00:05:57,120 --> 00:06:03,169
so once the infrastructure was in place

00:05:59,389 --> 00:06:06,510
you can fix every library in the world

00:06:03,169 --> 00:06:08,550
so the current state of play is that all

00:06:06,510 --> 00:06:12,150
the core stuff in a Bunter is done

00:06:08,550 --> 00:06:17,160
basically and we've done quite a lot of

00:06:12,150 --> 00:06:19,169
packages in the whole of Debian but

00:06:17,160 --> 00:06:20,699
there's still quite a lot to go it's a

00:06:19,169 --> 00:06:22,380
nicely parallelizable task once you've

00:06:20,699 --> 00:06:23,460
set up the stuff all you have to do is

00:06:22,380 --> 00:06:26,280
Kelly package of what they need to

00:06:23,460 --> 00:06:29,550
change ideally have the tools do it for

00:06:26,280 --> 00:06:32,220
them in general library fixing is not

00:06:29,550 --> 00:06:33,000
difficult so if you've got a library and

00:06:32,220 --> 00:06:35,130
you want to make it multi-touch

00:06:33,000 --> 00:06:37,710
compatible there's a web page just do

00:06:35,130 --> 00:06:40,949
what it says you'll be fine dev packages

00:06:37,710 --> 00:06:46,470
are a little bit more complicated so

00:06:40,949 --> 00:06:48,870
that's the basic what is it what you can

00:06:46,470 --> 00:06:50,880
do with it I've mentioned a couple of

00:06:48,870 --> 00:06:53,699
these things already but we'll have a

00:06:50,880 --> 00:06:57,600
little bit more detail so it's now very

00:06:53,699 --> 00:07:00,810
easy to just install a few or one random

00:06:57,600 --> 00:07:04,050
are binary in your system and have it

00:07:00,810 --> 00:07:05,849
run under qemu generally up till now it

00:07:04,050 --> 00:07:08,940
was much easier to make a whole chroot

00:07:05,849 --> 00:07:11,729
and run that under an emulator where's

00:07:08,940 --> 00:07:13,460
now you just take a package in and it'll

00:07:11,729 --> 00:07:16,560
automatically bringing its own libraries

00:07:13,460 --> 00:07:21,330
so it should just work if you point qemu

00:07:16,560 --> 00:07:23,250
attic cross-compilation is dramatically

00:07:21,330 --> 00:07:25,440
improved from being a massive pain in

00:07:23,250 --> 00:07:28,680
the ass too much less of a pain in the

00:07:25,440 --> 00:07:30,240
ass to solve all your problems and I'll

00:07:28,680 --> 00:07:32,760
cover that new more detail later but it

00:07:30,240 --> 00:07:34,349
does help enormously because of the

00:07:32,760 --> 00:07:37,110
canonical path location thing you know

00:07:34,349 --> 00:07:38,460
there is a place where the file is and

00:07:37,110 --> 00:07:40,460
it's not going to move about it's not

00:07:38,460 --> 00:07:42,780
going to be different later and so on

00:07:40,460 --> 00:07:44,849
you can cross grade this has always been

00:07:42,780 --> 00:07:46,800
a problem when people improve their AV

00:07:44,849 --> 00:07:50,340
is especially those armed people that's

00:07:46,800 --> 00:07:51,570
me every couple of years or three we go

00:07:50,340 --> 00:07:53,270
no no we don't like that anymore it's

00:07:51,570 --> 00:07:56,340
all changed you have to do like this now

00:07:53,270 --> 00:07:59,820
and so all the poor people with

00:07:56,340 --> 00:08:02,550
slugs I guess running old arm it's quite

00:07:59,820 --> 00:08:06,060
hard to upgrade it to army l and not get

00:08:02,550 --> 00:08:09,960
left behind as it just gets abandoned in

00:08:06,060 --> 00:08:11,430
fact it's more or less impossible multi

00:08:09,960 --> 00:08:13,380
arch makes that fairly straightforward

00:08:11,430 --> 00:08:14,699
so long as d package doesn't explode in

00:08:13,380 --> 00:08:16,050
the process of changing its native

00:08:14,699 --> 00:08:18,870
architecture from the old one to the new

00:08:16,050 --> 00:08:20,580
one you can stall the whole system all

00:08:18,870 --> 00:08:22,350
the new stuff and then just switch over

00:08:20,580 --> 00:08:26,810
d package to say my native architecture

00:08:22,350 --> 00:08:28,680
changed carry on as before to be fair

00:08:26,810 --> 00:08:31,590
there are still some wrinkles around

00:08:28,680 --> 00:08:33,960
that if you actually try it today but it

00:08:31,590 --> 00:08:37,680
clearly it can work and it will work

00:08:33,960 --> 00:08:39,510
smoothly quite soon the other reason

00:08:37,680 --> 00:08:41,010
it's actually again it's one of the main

00:08:39,510 --> 00:08:42,240
drivers even though obviously as free

00:08:41,010 --> 00:08:44,460
software people really don't care very

00:08:42,240 --> 00:08:46,589
much the main reason people want to

00:08:44,460 --> 00:08:48,630
install 32-bit stuff on 64-bit systems

00:08:46,589 --> 00:08:51,270
is because all they got was a binary off

00:08:48,630 --> 00:08:53,970
the internet and they can't fix it they

00:08:51,270 --> 00:09:00,330
can't rebuild it and it needs 32-bit

00:08:53,970 --> 00:09:03,720
libraries so Flash plugin skype design

00:09:00,330 --> 00:09:06,029
links tools all that even software is in

00:09:03,720 --> 00:09:07,980
fact been quite a significant driver for

00:09:06,029 --> 00:09:11,670
making lists of work and now it's dead

00:09:07,980 --> 00:09:14,580
easy so in fact the first set of

00:09:11,670 --> 00:09:16,890
packages to be multi arched in the bun

00:09:14,580 --> 00:09:19,140
to was the set of libraries you need to

00:09:16,890 --> 00:09:22,380
install 32 bit flash player on a 64-bit

00:09:19,140 --> 00:09:25,800
system just because that was a useful

00:09:22,380 --> 00:09:29,640
and not too enormous target I think it

00:09:25,800 --> 00:09:33,300
was 83 packages so just to be clear

00:09:29,640 --> 00:09:36,690
about what multi arch isn't it's not

00:09:33,300 --> 00:09:40,110
about running more than installing more

00:09:36,690 --> 00:09:41,730
than one binary tool of different

00:09:40,110 --> 00:09:44,760
architectures it's just about libraries

00:09:41,730 --> 00:09:47,209
so you can't have both the arm and the

00:09:44,760 --> 00:09:50,199
x86 versions of not Silla install

00:09:47,209 --> 00:09:52,459
and then decide which when you are a run

00:09:50,199 --> 00:09:55,009
now that would actually be useful but

00:09:52,459 --> 00:09:56,209
that's not what the spec deals with that

00:09:55,009 --> 00:09:57,139
was one of the things he went no we're

00:09:56,209 --> 00:09:58,490
not going to worry about the blender

00:09:57,139 --> 00:10:00,170
part of this we just ended the library

00:09:58,490 --> 00:10:04,369
part of this we can move on to the

00:10:00,170 --> 00:10:07,660
binary part of this later so if anybody

00:10:04,369 --> 00:10:12,860
is really keen to see that functionality

00:10:07,660 --> 00:10:16,990
see me actually see see Steve Lang shape

00:10:12,860 --> 00:10:16,990
because he is the man really

00:10:18,910 --> 00:10:24,610
the architectures which are split our

00:10:21,570 --> 00:10:26,470
API incompatible architectures so

00:10:24,610 --> 00:10:29,800
there's lots of variations you can have

00:10:26,470 --> 00:10:32,380
within an ABI which is usually about

00:10:29,800 --> 00:10:35,710
does my cpu have this extra bit or Bob

00:10:32,380 --> 00:10:39,160
or floating point unit or simdi unit or

00:10:35,710 --> 00:10:42,420
whatever those are ABI compatible

00:10:39,160 --> 00:10:45,340
they're just hardware capabilities so

00:10:42,420 --> 00:10:47,340
triplets and canoe in general have been

00:10:45,340 --> 00:10:53,440
a bit vague about distinguishing between

00:10:47,340 --> 00:10:56,130
ABI differences and hardware how by

00:10:53,440 --> 00:10:58,900
functionality differences in terms of

00:10:56,130 --> 00:11:00,130
exactly what a triplet means but multi

00:10:58,900 --> 00:11:02,950
arch is just about stuff which is

00:11:00,130 --> 00:11:05,680
fundamentally incompatible so it needs a

00:11:02,950 --> 00:11:07,900
new architecture and so the multi lib

00:11:05,680 --> 00:11:09,490
thing in GCC is different for multi arch

00:11:07,900 --> 00:11:11,440
and that's about having multiple

00:11:09,490 --> 00:11:13,690
libraries you know and neon library or

00:11:11,440 --> 00:11:16,930
an omni on library or an MMX librarian

00:11:13,690 --> 00:11:20,560
dynamics and so on oh that makes sense I

00:11:16,930 --> 00:11:21,580
do shower if I'm talking nonsense but if

00:11:20,560 --> 00:11:25,110
you have to really hard questions I

00:11:21,580 --> 00:11:31,240
probably don't know the answers sorry

00:11:25,110 --> 00:11:32,890
closer right we'll do some of the other

00:11:31,240 --> 00:11:34,690
things you can do because of the

00:11:32,890 --> 00:11:37,990
existence of this technology is partial

00:11:34,690 --> 00:11:40,030
architectures so for example a PowerPC

00:11:37,990 --> 00:11:42,220
64 i think is quite a good example i got

00:11:40,030 --> 00:11:44,590
that right because it's no faster

00:11:42,220 --> 00:11:46,120
running the 64-bit stuff 32-bit stuff so

00:11:44,590 --> 00:11:47,590
most of the time you just wanted to do

00:11:46,120 --> 00:11:51,790
bit versions but for a few apps you'll

00:11:47,590 --> 00:11:53,650
need 64-bit stuff so it's now possible

00:11:51,790 --> 00:11:55,780
to have an architecture which is mostly

00:11:53,650 --> 00:11:57,460
composed of the 32-bit version and you

00:11:55,780 --> 00:11:59,230
can just have a few packages built for

00:11:57,460 --> 00:12:02,140
the extra architecture and you will just

00:11:59,230 --> 00:12:03,910
install it together and just works we're

00:12:02,140 --> 00:12:05,500
not doing that in debian yet but we do

00:12:03,910 --> 00:12:07,600
now have the technology to do that if it

00:12:05,500 --> 00:12:09,520
proves sensible yeah and it saves you

00:12:07,600 --> 00:12:11,290
having to build another 20 gigabytes of

00:12:09,520 --> 00:12:13,800
software just to get a few things you

00:12:11,290 --> 00:12:13,800
really cared about

00:12:15,860 --> 00:12:22,620
cross dependencies is so you can have

00:12:20,250 --> 00:12:25,170
dependencies between architectures now

00:12:22,620 --> 00:12:28,010
so the canonical example is cross

00:12:25,170 --> 00:12:30,060
compilers in order to build a GCC

00:12:28,010 --> 00:12:33,540
targeting arm you need the ARM version

00:12:30,060 --> 00:12:36,180
of Lib C so it has a build dependency on

00:12:33,540 --> 00:12:38,460
the ARM version of Lib C at the moment

00:12:36,180 --> 00:12:40,770
you can't do that in debian you just

00:12:38,460 --> 00:12:41,910
have to have some horrible package that

00:12:40,770 --> 00:12:44,400
downloads all the sources and does a

00:12:41,910 --> 00:12:46,040
bootstrap in place or you upload you

00:12:44,400 --> 00:12:48,470
build it yourself magically and just

00:12:46,040 --> 00:12:50,520
upload you to the system so that the

00:12:48,470 --> 00:12:54,150
build the infrastructure can't do that

00:12:50,520 --> 00:12:55,260
all it couldn't until now again we still

00:12:54,150 --> 00:12:58,230
don't actually allow this in the archive

00:12:55,260 --> 00:12:59,310
yet but we will do any minute now and in

00:12:58,230 --> 00:13:00,870
principle you could have grass build

00:12:59,310 --> 00:13:02,850
architectures if you really wanted and

00:13:00,870 --> 00:13:06,720
you could probably have done that before

00:13:02,850 --> 00:13:09,000
but it gets easier so that's all what

00:13:06,720 --> 00:13:18,260
it's for a little bit about how it

00:13:09,000 --> 00:13:21,240
actually works so we move libraries into

00:13:18,260 --> 00:13:22,920
qualified paths by architecture now the

00:13:21,240 --> 00:13:25,380
only problem is that you have to pick a

00:13:22,920 --> 00:13:27,330
path and you have to pick a path once

00:13:25,380 --> 00:13:30,990
and not change your mind later because

00:13:27,330 --> 00:13:35,070
every single binary has the loader the

00:13:30,990 --> 00:13:37,110
lipsy loader well see winery has loaded

00:13:35,070 --> 00:13:38,250
path baked into it so you can't go

00:13:37,110 --> 00:13:41,610
around changing it afterwards because

00:13:38,250 --> 00:13:43,050
nothing will work and so this resulted

00:13:41,610 --> 00:13:45,300
in about two years of arguments about

00:13:43,050 --> 00:13:48,210
what paths should be and should we use

00:13:45,300 --> 00:13:49,890
new triplets or not so as I said the

00:13:48,210 --> 00:13:53,400
problem with new triplets is that they

00:13:49,890 --> 00:13:56,870
don't quite map to avi incompatible

00:13:53,400 --> 00:13:59,670
architectures so most of the i386 people

00:13:56,870 --> 00:14:02,880
who've invented for different triplets

00:13:59,670 --> 00:14:05,040
for the same thing so I 360 4605 869 686

00:14:02,880 --> 00:14:06,839
are all fundamentally the same thing

00:14:05,040 --> 00:14:11,780
it's just like have I got some extra

00:14:06,839 --> 00:14:11,780
instructions or not ABI doesn't change

00:14:12,810 --> 00:14:16,590
so we invented a new scheme which looks

00:14:15,270 --> 00:14:18,630
very similar to this just not exactly

00:14:16,590 --> 00:14:21,930
the same and then had a long argument

00:14:18,630 --> 00:14:26,610
and then decided to use the new triplets

00:14:21,930 --> 00:14:30,570
as is with just a bodge to deal with the

00:14:26,610 --> 00:14:32,100
i386 nests so it's always I create so

00:14:30,570 --> 00:14:38,790
its limits no because that's the ABI

00:14:32,100 --> 00:14:41,310
whatever actual CPU you've got there's

00:14:38,790 --> 00:14:44,310
one tool which gives you the canonical

00:14:41,310 --> 00:14:46,110
path for a specified architecture Saudi

00:14:44,310 --> 00:14:48,960
package architecture is responsible for

00:14:46,110 --> 00:14:50,610
knowing the mappings between debian

00:14:48,960 --> 00:14:53,790
architecture names new triplets and

00:14:50,610 --> 00:14:55,740
multi arch paths that's good because

00:14:53,790 --> 00:14:57,720
it's all in one place you can't get

00:14:55,740 --> 00:15:01,620
different things having different

00:14:57,720 --> 00:15:04,710
answers sorry the only problem is that

00:15:01,620 --> 00:15:06,420
that's a debian specific mechanism so

00:15:04,710 --> 00:15:09,589
for up streams you need to do this and

00:15:06,420 --> 00:15:11,670
for other distros we need a proper LSB

00:15:09,589 --> 00:15:13,860
mechanism to provide the same

00:15:11,670 --> 00:15:16,320
information I don't that's difficult but

00:15:13,860 --> 00:15:17,580
only else I didn't get either and they

00:15:16,320 --> 00:15:19,770
probably won't until somebody outside

00:15:17,580 --> 00:15:22,190
debian decides this is worth

00:15:19,770 --> 00:15:22,190
implementing

00:15:24,880 --> 00:15:28,900
so the way this works so that's that's

00:15:27,130 --> 00:15:30,910
where you put the files and how you find

00:15:28,900 --> 00:15:34,480
out where to put the files the other

00:15:30,910 --> 00:15:36,850
part of this is how dependencies work in

00:15:34,480 --> 00:15:39,100
a multiple architecture view of the

00:15:36,850 --> 00:15:40,780
world so for years and years apt only

00:15:39,100 --> 00:15:42,820
ever looked the dependency set is closed

00:15:40,780 --> 00:15:44,020
within an architecture and it didn't

00:15:42,820 --> 00:15:46,000
have to worry about other architectures

00:15:44,020 --> 00:15:48,370
you could you could change it and say

00:15:46,000 --> 00:15:49,540
just just look at the whole file set for

00:15:48,370 --> 00:15:51,730
different architecture and solve it

00:15:49,540 --> 00:15:56,770
there and but you couldn't look at two

00:15:51,730 --> 00:15:58,180
at once so fun minister at this the

00:15:56,770 --> 00:15:59,560
terminology for all this is confusing

00:15:58,180 --> 00:16:01,930
i'm going to have any of you use to the

00:15:59,560 --> 00:16:06,340
new build and host you know where host

00:16:01,930 --> 00:16:08,880
means target not build and so on if you

00:16:06,340 --> 00:16:11,230
don't do it all day it's very confusing

00:16:08,880 --> 00:16:12,910
similarly the multi arch terminology if

00:16:11,230 --> 00:16:15,850
you don't look at it on a regular basis

00:16:12,910 --> 00:16:17,740
it does your head in so i prefer to

00:16:15,850 --> 00:16:22,090
think things packages fundamentally fall

00:16:17,740 --> 00:16:23,650
into two groups libraries or tools so

00:16:22,090 --> 00:16:25,180
libraries are things which are co

00:16:23,650 --> 00:16:27,340
installable you can have lots of them

00:16:25,180 --> 00:16:29,410
for different architectures and tools is

00:16:27,340 --> 00:16:31,030
you know any binary which isn't co

00:16:29,410 --> 00:16:32,980
installable you just want one of it it

00:16:31,030 --> 00:16:35,800
really doesn't matter whether your xml

00:16:32,980 --> 00:16:38,230
processor is the ARM version or the x86

00:16:35,800 --> 00:16:40,480
version or the amd64 version that'll

00:16:38,230 --> 00:16:47,560
work and they'll all produce the same

00:16:40,480 --> 00:16:50,740
output notice they should do so every

00:16:47,560 --> 00:16:52,120
package gets this field multi arch not

00:16:50,740 --> 00:16:56,380
every package actually just packages

00:16:52,120 --> 00:16:59,920
which are multi-arts ready or needed for

00:16:56,380 --> 00:17:01,300
other reasons and you just say yes this

00:16:59,920 --> 00:17:03,130
is a multi large same package which

00:17:01,300 --> 00:17:05,040
means it is co installable with other

00:17:03,130 --> 00:17:07,270
architecture packages of the same name

00:17:05,040 --> 00:17:11,709
but it'll only satisfy dependencies

00:17:07,270 --> 00:17:13,810
within that architecture or it's a

00:17:11,709 --> 00:17:14,920
foreign package which means it's just a

00:17:13,810 --> 00:17:16,240
tool it doesn't matter which

00:17:14,920 --> 00:17:18,930
architecture anything that will run on

00:17:16,240 --> 00:17:21,699
this machine is fine just it get me one

00:17:18,930 --> 00:17:23,589
we also have to have allowed for some

00:17:21,699 --> 00:17:25,959
things which are both so python is the

00:17:23,589 --> 00:17:30,340
canonical example it's got library parts

00:17:25,959 --> 00:17:33,640
in it and it's just a tool so it depends

00:17:30,340 --> 00:17:35,080
what you want to use it for whether how

00:17:33,640 --> 00:17:37,750
you want the dependencies to work do you

00:17:35,080 --> 00:17:38,250
need Python at the same architecture or

00:17:37,750 --> 00:17:39,780
do you

00:17:38,250 --> 00:17:44,910
you just want any Python because it will

00:17:39,780 --> 00:17:46,470
run Python stuff and so in that case the

00:17:44,910 --> 00:17:48,840
dependency depends on the thing which is

00:17:46,470 --> 00:17:50,010
doing the depending whether it wants the

00:17:48,840 --> 00:17:52,860
same architecture or a different

00:17:50,010 --> 00:17:55,080
architecture and this all works fine

00:17:52,860 --> 00:17:56,550
except that every package as well as

00:17:55,080 --> 00:17:59,310
having libraries in it you love your

00:17:56,550 --> 00:18:01,350
package has at least documentation

00:17:59,310 --> 00:18:03,030
copyright file and that's not

00:18:01,350 --> 00:18:05,760
architecture dependent and it will be

00:18:03,030 --> 00:18:09,990
daft to have a copy of it for every

00:18:05,760 --> 00:18:11,550
architecture in a special path saudi

00:18:09,990 --> 00:18:15,420
package has reference counting to deal

00:18:11,550 --> 00:18:18,180
with stuff which is the same files which

00:18:15,420 --> 00:18:19,470
is the same across every architecture so

00:18:18,180 --> 00:18:22,920
when you take the last version package

00:18:19,470 --> 00:18:24,300
way then it removes the file but each

00:18:22,920 --> 00:18:26,730
time you install the new one it just

00:18:24,300 --> 00:18:30,720
says yay okay we've got in theory three

00:18:26,730 --> 00:18:34,950
copies of that now so this is how you

00:18:30,720 --> 00:18:38,010
use it in practice it's very simple you

00:18:34,950 --> 00:18:40,260
say so let's say you're on amd64 machine

00:18:38,010 --> 00:18:42,740
so you say d packaged ad architecture

00:18:40,260 --> 00:18:45,000
i386 and now you've got both and

00:18:42,740 --> 00:18:46,350
strictly speaking that's the command you

00:18:45,000 --> 00:18:48,120
will get in Debian in about two days

00:18:46,350 --> 00:18:50,460
time at the moment if you're in a bun to

00:18:48,120 --> 00:18:55,560
use the bottom one which has exactly the

00:18:50,460 --> 00:18:57,510
same effect it just means that it is

00:18:55,560 --> 00:18:59,340
nicely organized in terms of adding and

00:18:57,510 --> 00:19:01,290
removing architectures with tools

00:18:59,340 --> 00:19:04,590
because you might overwrite whatever it

00:19:01,290 --> 00:19:05,550
is it before or have six copies of the

00:19:04,590 --> 00:19:09,690
same thing because you've run the

00:19:05,550 --> 00:19:14,190
program six times now so that now means

00:19:09,690 --> 00:19:16,200
that D package will consider allow

00:19:14,190 --> 00:19:19,080
packages of another architecture to be

00:19:16,200 --> 00:19:21,540
installed and practice use this through

00:19:19,080 --> 00:19:23,910
apt so you have to tell it where it can

00:19:21,540 --> 00:19:28,380
get packages from so I imagine most of

00:19:23,910 --> 00:19:29,640
you are familiar with the apt source

00:19:28,380 --> 00:19:31,470
lines telling you where you can get

00:19:29,640 --> 00:19:33,120
stuff from and now you just qualify them

00:19:31,470 --> 00:19:34,830
with which architectures available from

00:19:33,120 --> 00:19:36,180
which sources particularly important in

00:19:34,830 --> 00:19:38,070
a bun to world where they put all the

00:19:36,180 --> 00:19:41,640
arm stuff a different repo from the x86

00:19:38,070 --> 00:19:44,430
stuff just to annoy me and the release

00:19:41,640 --> 00:19:45,580
files claim that both archives have all

00:19:44,430 --> 00:19:49,570
of the architectures

00:19:45,580 --> 00:19:54,100
wrong very and it's too hard to fix

00:19:49,570 --> 00:19:56,860
apparently apt for many years has had an

00:19:54,100 --> 00:19:58,390
architecture flag which as I said just

00:19:56,860 --> 00:19:59,770
let you switch between what is the

00:19:58,390 --> 00:20:03,190
architecture I'm considering when trying

00:19:59,770 --> 00:20:04,840
to solve this package dependency set and

00:20:03,190 --> 00:20:07,540
that's been very useful for a long time

00:20:04,840 --> 00:20:09,880
but now it has the ability to make a

00:20:07,540 --> 00:20:13,290
list which is the set it's going to

00:20:09,880 --> 00:20:15,910
solve over right now which in practice

00:20:13,290 --> 00:20:18,730
it gets from D packages configuration

00:20:15,910 --> 00:20:20,140
and is invariably the native

00:20:18,730 --> 00:20:23,340
architecture and all the foreign

00:20:20,140 --> 00:20:26,440
architectures which you wish to consider

00:20:23,340 --> 00:20:28,810
so once you've set that stuff up which

00:20:26,440 --> 00:20:30,610
wasn't very hard now you do an update

00:20:28,810 --> 00:20:32,500
and you can just install packages and

00:20:30,610 --> 00:20:33,670
qualify them with architecture names so

00:20:32,500 --> 00:20:36,070
as long as that's no architecture you've

00:20:33,670 --> 00:20:38,400
said as a foreign architecture or a

00:20:36,070 --> 00:20:43,030
native architecture just install stuff

00:20:38,400 --> 00:20:45,010
and apt solves the dependencies and goes

00:20:43,030 --> 00:20:47,350
our that's live at a dev will need a

00:20:45,010 --> 00:20:50,340
live at or outcall on our mail as well

00:20:47,350 --> 00:20:53,020
and so i'll into the work for you and

00:20:50,340 --> 00:20:54,280
get selections obviously now this so

00:20:53,020 --> 00:20:56,710
basically everything in the whole

00:20:54,280 --> 00:20:59,380
interface now has colon architecture on

00:20:56,710 --> 00:21:05,590
the end optionally if you don't put it

00:20:59,380 --> 00:21:08,680
in you mean the native architecture so

00:21:05,590 --> 00:21:15,010
that all works now i've been working for

00:21:08,680 --> 00:21:17,590
a year or so in a bun tube cross

00:21:15,010 --> 00:21:20,760
building so this is actually the area

00:21:17,590 --> 00:21:26,110
i've been mostly using this in there's

00:21:20,760 --> 00:21:27,430
three major pains in the bum installing

00:21:26,110 --> 00:21:29,770
things so and also cross build anything

00:21:27,430 --> 00:21:32,800
you need to have all the tools you need

00:21:29,770 --> 00:21:34,270
and you need to have the cross libraries

00:21:32,800 --> 00:21:38,740
and headers for whatever it is you want

00:21:34,270 --> 00:21:42,010
to build we have not had a complete way

00:21:38,740 --> 00:21:43,330
of doing that automatically in the last

00:21:42,010 --> 00:21:45,610
10 years we've had all sorts of

00:21:43,330 --> 00:21:47,260
mechanisms and ba jury and hackery you

00:21:45,610 --> 00:21:49,840
have a look at how ex dev works it's got

00:21:47,260 --> 00:21:52,300
a great big list of things called lib

00:21:49,840 --> 00:21:54,970
that aren't libraries and things that

00:21:52,300 --> 00:21:56,200
aren't called lid but our libraries in

00:21:54,970 --> 00:21:57,460
order to try and work out whether it

00:21:56,200 --> 00:21:58,390
should install the native version of

00:21:57,460 --> 00:21:58,720
something on the cross version or

00:21:58,390 --> 00:22:01,840
something

00:21:58,720 --> 00:22:05,770
that's about the level of how swish this

00:22:01,840 --> 00:22:10,679
has all been all this just evaporates

00:22:05,770 --> 00:22:13,030
with multi arch the Ashley next slide

00:22:10,679 --> 00:22:15,400
you also need to find the library's nas

00:22:13,030 --> 00:22:17,530
link to them and you need to run tools

00:22:15,400 --> 00:22:19,600
of Bill time which may or may not be for

00:22:17,530 --> 00:22:24,130
the right architecture you've got you're

00:22:19,600 --> 00:22:27,070
trying to build on so yes the dependency

00:22:24,130 --> 00:22:30,210
thing generally everything you need to

00:22:27,070 --> 00:22:33,730
install is either a library or at all

00:22:30,210 --> 00:22:35,500
sometimes they can be either now the

00:22:33,730 --> 00:22:38,289
obvious way to fix this is just to

00:22:35,500 --> 00:22:40,240
annotate your bill dependency list in

00:22:38,289 --> 00:22:42,070
everything and say whether this is a

00:22:40,240 --> 00:22:44,890
cross dependency or a native dependency

00:22:42,070 --> 00:22:46,299
that's simple but you would have to you

00:22:44,890 --> 00:22:47,679
know make your dependency list in every

00:22:46,299 --> 00:22:51,820
package in the world twice as long and

00:22:47,679 --> 00:22:54,429
then it became clear a couple years ago

00:22:51,820 --> 00:22:57,010
that the multi arch information is

00:22:54,429 --> 00:22:59,950
almost exactly the same information not

00:22:57,010 --> 00:23:01,360
quite but basically you know where

00:22:59,950 --> 00:23:02,890
everything's our library and satisfies

00:23:01,360 --> 00:23:04,900
dependencies within the architecture or

00:23:02,890 --> 00:23:08,049
it isn't and will satisfy dependencies

00:23:04,900 --> 00:23:10,450
for any architecture the thing is that

00:23:08,049 --> 00:23:12,429
that information is specified in the

00:23:10,450 --> 00:23:14,260
package whereas the dependency

00:23:12,429 --> 00:23:15,820
relationship is from the thing you're

00:23:14,260 --> 00:23:19,480
trying to build on to what it's going to

00:23:15,820 --> 00:23:20,860
install IE the other way in practice

00:23:19,480 --> 00:23:23,919
this just means that all you have to do

00:23:20,860 --> 00:23:26,559
is annotate the exceptions to the rule

00:23:23,919 --> 00:23:28,120
so where it's a library but actually you

00:23:26,559 --> 00:23:31,179
want the build version rather than the

00:23:28,120 --> 00:23:33,730
host version and we have in fact found

00:23:31,179 --> 00:23:36,220
almost no instances of this yet and

00:23:33,730 --> 00:23:37,990
where you do it's usually easier to

00:23:36,220 --> 00:23:40,360
split the offending packs like flex as a

00:23:37,990 --> 00:23:43,630
good example flex is both a tool and a

00:23:40,360 --> 00:23:45,460
library and it's actually easier to just

00:23:43,630 --> 00:23:47,950
split it into the lib flex and flex and

00:23:45,460 --> 00:23:49,510
then if everything will just work than

00:23:47,950 --> 00:23:51,059
it is to annotate all the instances of

00:23:49,510 --> 00:23:55,440
it to say which one of what you wanted

00:23:51,059 --> 00:23:55,440
or if in fact you wanted both

00:23:56,480 --> 00:24:06,090
so this is a great improvement run time

00:24:02,760 --> 00:24:08,100
and build time library paths on now the

00:24:06,090 --> 00:24:09,630
same so if you've done much cross

00:24:08,100 --> 00:24:11,910
building you'll discover the great joy

00:24:09,630 --> 00:24:13,680
of trying to get libtool to understand

00:24:11,910 --> 00:24:15,900
that you want to link against your

00:24:13,680 --> 00:24:19,800
library here run time is going to be

00:24:15,900 --> 00:24:24,360
somewhere else and please don't screw it

00:24:19,800 --> 00:24:27,330
up um littles very clever if you really

00:24:24,360 --> 00:24:31,080
need to build for hp-ux circa some time

00:24:27,330 --> 00:24:32,910
ago right but mostly it's pending us and

00:24:31,080 --> 00:24:34,170
if you ever tried to fix it when it's

00:24:32,910 --> 00:24:37,020
not doing the right thing it's even more

00:24:34,170 --> 00:24:38,490
of a painting us so this problem pretty

00:24:37,020 --> 00:24:40,170
much just evaporates from multi arch

00:24:38,490 --> 00:24:41,310
because the path is in the same place at

00:24:40,170 --> 00:24:44,280
build time as it's going to be at

00:24:41,310 --> 00:24:47,550
runtime and install time it's just the

00:24:44,280 --> 00:24:49,770
path so suddenly it's very easy if your

00:24:47,550 --> 00:24:51,750
tools to get it right and millions of

00:24:49,770 --> 00:24:53,180
instances of dash dash libdir equals

00:24:51,750 --> 00:24:55,560
this down the other when cross building

00:24:53,180 --> 00:25:00,450
become unnecessary because it's the

00:24:55,560 --> 00:25:02,280
standard system path there's also this

00:25:00,450 --> 00:25:03,990
problem of tools that get built at build

00:25:02,280 --> 00:25:07,020
time and might for the wrong

00:25:03,990 --> 00:25:11,010
architecture we can mostly just cheat

00:25:07,020 --> 00:25:13,590
and use qemu now you could do that

00:25:11,010 --> 00:25:14,940
before but it you know in practice

00:25:13,590 --> 00:25:18,240
people tended to use things like scratch

00:25:14,940 --> 00:25:22,080
box which was a whole load of complexity

00:25:18,240 --> 00:25:23,640
or abs to make this work reliably and

00:25:22,080 --> 00:25:29,130
reasonably sure it's all just going to

00:25:23,640 --> 00:25:31,350
become easy but we'll see so apt gets

00:25:29,130 --> 00:25:32,790
built DEP is how you just say please and

00:25:31,350 --> 00:25:36,150
still built dependencies for this

00:25:32,790 --> 00:25:37,590
package now you can say app get for a

00:25:36,150 --> 00:25:40,980
particular architecture install the

00:25:37,590 --> 00:25:43,590
dependencies this package so or across

00:25:40,980 --> 00:25:45,510
architecture so apt will just solve your

00:25:43,590 --> 00:25:47,340
stuff from work out that it needs you

00:25:45,510 --> 00:25:49,920
know the are male version of various

00:25:47,340 --> 00:25:52,290
libraries but all the tools it just

00:25:49,920 --> 00:25:53,910
needs the normal version and when stall

00:25:52,290 --> 00:25:57,030
things that's a real run I did two days

00:25:53,910 --> 00:25:59,760
ago actually works pretty I know to be

00:25:57,030 --> 00:26:03,830
fair of the 400 packages I built about

00:25:59,760 --> 00:26:03,830
25 of them did the right thing you know

00:26:04,510 --> 00:26:11,030
we can fix that there's an auto builder

00:26:08,270 --> 00:26:17,570
online now that's so you can all see

00:26:11,030 --> 00:26:19,310
whether your packages don't work for a

00:26:17,570 --> 00:26:21,050
complete solution for this we actually

00:26:19,310 --> 00:26:23,060
need to deal with dev packages and

00:26:21,050 --> 00:26:25,730
headers as well as just libraries so as

00:26:23,060 --> 00:26:30,290
I say we restricted the scope of multi

00:26:25,730 --> 00:26:32,000
arch for years to get it done so the the

00:26:30,290 --> 00:26:33,790
dev packaged stuff and headers was put

00:26:32,000 --> 00:26:36,500
to one side now there is a spec for that

00:26:33,790 --> 00:26:38,480
but it's not a requirement to make the

00:26:36,500 --> 00:26:40,340
multi out libraries that work it is a

00:26:38,480 --> 00:26:41,900
requirement and it's not even a

00:26:40,340 --> 00:26:45,890
requirement to make cross building work

00:26:41,900 --> 00:26:47,900
because you can just install either one

00:26:45,890 --> 00:26:49,220
dev package or another you generally

00:26:47,900 --> 00:26:51,880
don't need both there's only a few

00:26:49,220 --> 00:26:55,310
packages where that's actually the case

00:26:51,880 --> 00:26:56,750
but in long term with like all the dev

00:26:55,310 --> 00:27:00,350
packages to match up and do the right

00:26:56,750 --> 00:27:02,210
things so that basically means that you

00:27:00,350 --> 00:27:05,930
can't have binaries in your def package

00:27:02,210 --> 00:27:07,670
anymore because if you can stall one for

00:27:05,930 --> 00:27:09,920
some other architecture that binary

00:27:07,670 --> 00:27:11,810
won't work binary the dev packages tend

00:27:09,920 --> 00:27:13,460
to just be random config scripts that do

00:27:11,810 --> 00:27:16,070
crazy config ship when they really ought

00:27:13,460 --> 00:27:18,350
to be using package config then you've

00:27:16,070 --> 00:27:22,070
ever looked at live APR which is the

00:27:18,350 --> 00:27:24,890
Apache configuration system it's amazing

00:27:22,070 --> 00:27:26,660
invented all this Marlys stuff to try

00:27:24,890 --> 00:27:28,580
and do cross building right but they've

00:27:26,660 --> 00:27:29,180
done it wrong it doesn't work and I

00:27:28,580 --> 00:27:32,870
don't know what the hell they were

00:27:29,180 --> 00:27:34,400
thinking I've got a really long mail was

00:27:32,870 --> 00:27:37,130
late I don't know it's about 20k of

00:27:34,400 --> 00:27:42,440
stuff saying what on earth were you

00:27:37,130 --> 00:27:47,270
thinking so to make all this work we had

00:27:42,440 --> 00:27:50,330
to do cual of stuff anything which knows

00:27:47,270 --> 00:27:53,180
where libraries are needs to be changed

00:27:50,330 --> 00:27:57,260
to understand multi-arts world so

00:27:53,180 --> 00:28:00,590
obviously lipsy and GCC and d package

00:27:57,260 --> 00:28:04,930
and apt are the core things but it turns

00:28:00,590 --> 00:28:07,070
out so for example the the system

00:28:04,930 --> 00:28:08,360
librarian header path you get when you

00:28:07,070 --> 00:28:10,280
put you know squiggly brackets around

00:28:08,360 --> 00:28:12,860
things and dash and don't specify our

00:28:10,280 --> 00:28:14,169
library need to include the multi-touch

00:28:12,860 --> 00:28:16,279
path now

00:28:14,169 --> 00:28:18,860
it turns out as a hold of other things

00:28:16,279 --> 00:28:21,049
that know where stuff are so if you've

00:28:18,860 --> 00:28:24,289
ever used the old fashioned make target

00:28:21,049 --> 00:28:26,630
dat little l library name that doesn't

00:28:24,289 --> 00:28:28,730
use the compiler or lipsy or anything to

00:28:26,630 --> 00:28:32,000
find out where that libraries are it

00:28:28,730 --> 00:28:33,710
just knows and it's wrong so you have to

00:28:32,000 --> 00:28:36,429
fix that and packaged confer guys need

00:28:33,710 --> 00:28:38,750
understand that any other make systems

00:28:36,429 --> 00:28:41,000
seem a I guess it's auto tool should be

00:28:38,750 --> 00:28:44,390
in this list but maybe they just did the

00:28:41,000 --> 00:28:46,220
right thing so anyway and OpenJDK needs

00:28:44,390 --> 00:28:47,690
to know when it's using the J stuff

00:28:46,220 --> 00:28:51,200
because that links to native libraries

00:28:47,690 --> 00:28:52,700
needs to know where they are even d

00:28:51,200 --> 00:28:54,860
packed cross which in principle is now

00:28:52,700 --> 00:28:56,659
irrelevant in this new Gloria's multi

00:28:54,860 --> 00:28:58,070
arch world where pretty much everything

00:28:56,659 --> 00:29:00,679
it did is stuff we don't want to do

00:28:58,070 --> 00:29:01,940
anymore it still needs to know where the

00:29:00,679 --> 00:29:07,610
libraries are in case you use it in the

00:29:01,940 --> 00:29:10,250
meantime so all of this got done about a

00:29:07,610 --> 00:29:13,820
year and a half ago so that you could

00:29:10,250 --> 00:29:16,010
start uploading packages we've got a

00:29:13,820 --> 00:29:19,159
load of information online for people

00:29:16,010 --> 00:29:22,340
who for packages because as I say this

00:29:19,159 --> 00:29:24,289
is highly parallelizable you just have

00:29:22,340 --> 00:29:26,960
to get all your packages to do what they

00:29:24,289 --> 00:29:28,850
need to do some useful tools have been

00:29:26,960 --> 00:29:30,440
added so that the interesting difference

00:29:28,850 --> 00:29:33,440
is that if you look at the Debian

00:29:30,440 --> 00:29:37,100
package files to date never generally in

00:29:33,440 --> 00:29:39,529
all the install files debian new stuff

00:29:37,100 --> 00:29:43,909
never used to have to specify variable

00:29:39,529 --> 00:29:45,890
paths they were just paths and until now

00:29:43,909 --> 00:29:47,510
where every library needs to say use a

00:29:45,890 --> 00:29:51,830
lib well whatever architecture and

00:29:47,510 --> 00:29:54,049
building for today so some mechanism has

00:29:51,830 --> 00:29:56,500
been stuck into Deb helper to make that

00:29:54,049 --> 00:29:56,500
easy

00:29:59,710 --> 00:30:03,330
nothing else a great interest there

00:30:04,000 --> 00:30:09,850
so one of the things which we as I say

00:30:06,250 --> 00:30:13,480
we didn't do was arrange for co

00:30:09,850 --> 00:30:14,710
installable applications I've already

00:30:13,480 --> 00:30:15,970
come across various instances where

00:30:14,710 --> 00:30:17,590
people would like to do that they go oh

00:30:15,970 --> 00:30:19,030
well I'm go it's nice multi art system

00:30:17,590 --> 00:30:20,470
but I can't stall both versions of this

00:30:19,030 --> 00:30:22,120
and then just benchmark them and you

00:30:20,470 --> 00:30:23,530
know you left me install one and then

00:30:22,120 --> 00:30:28,810
remove it and still the other I mean

00:30:23,530 --> 00:30:30,130
okay it's not very hard but so for

00:30:28,810 --> 00:30:31,450
people who need that will have to work

00:30:30,130 --> 00:30:34,690
out a scheme you know are we going to

00:30:31,450 --> 00:30:38,020
make all the bin paths architecture

00:30:34,690 --> 00:30:39,340
qualified quite scary are we going to do

00:30:38,020 --> 00:30:43,710
something clever with bin format misc

00:30:39,340 --> 00:30:47,980
there's various possibilities and

00:30:43,710 --> 00:30:51,070
finally why is this important what are

00:30:47,980 --> 00:30:53,170
you next and what did we learn so this

00:30:51,070 --> 00:30:55,240
is i miss the talk earlier unfortunately

00:30:53,170 --> 00:30:58,870
about major changes in distros but this

00:30:55,240 --> 00:31:01,150
is another one it's really quite hard to

00:30:58,870 --> 00:31:02,740
change fundamental infrastructure in

00:31:01,150 --> 00:31:06,220
something that's already been running 15

00:31:02,740 --> 00:31:08,350
years but if you've got a good reason

00:31:06,220 --> 00:31:09,970
and some competent people and enough

00:31:08,350 --> 00:31:14,440
people who actually care it is possible

00:31:09,970 --> 00:31:17,260
and perhaps the most important thing is

00:31:14,440 --> 00:31:19,870
to write down a detailed spec if you

00:31:17,260 --> 00:31:22,060
read the multi on spec page is really

00:31:19,870 --> 00:31:24,250
boring because on and on and on and on

00:31:22,060 --> 00:31:27,160
and incredibly detailed an impenetrable

00:31:24,250 --> 00:31:28,570
language to actually specify what needs

00:31:27,160 --> 00:31:32,140
to happen in all sorts of obscure

00:31:28,570 --> 00:31:33,700
circumstances and so part of the reason

00:31:32,140 --> 00:31:35,680
this took years was because we had a

00:31:33,700 --> 00:31:37,320
sort of proposal saying we could do this

00:31:35,680 --> 00:31:39,790
and this and this and this and this but

00:31:37,320 --> 00:31:41,740
that's not the same as saying you need

00:31:39,790 --> 00:31:43,600
to do exactly this and exactly that and

00:31:41,740 --> 00:31:44,830
exactly that and if you specify this it

00:31:43,600 --> 00:31:46,500
needs to be like this and there's no

00:31:44,830 --> 00:31:49,630
space after the colon all that rubbish

00:31:46,500 --> 00:31:51,130
that made a huge difference once we'd

00:31:49,630 --> 00:31:52,690
actually got that specified everyone

00:31:51,130 --> 00:31:55,960
went oh okay we'll do that we can do

00:31:52,690 --> 00:31:58,150
that so that's probably the most

00:31:55,960 --> 00:32:02,020
important learning from this this long

00:31:58,150 --> 00:32:04,029
process is right detailed spec and then

00:32:02,020 --> 00:32:06,969
point at it

00:32:04,029 --> 00:32:08,229
and also the bit about controlling the

00:32:06,969 --> 00:32:11,320
scope to not try and do everything

00:32:08,229 --> 00:32:14,440
that's possible at once pick apart which

00:32:11,320 --> 00:32:19,029
can be done independently and then just

00:32:14,440 --> 00:32:20,379
do that and of course designed to avoid

00:32:19,029 --> 00:32:21,460
flag days if you possibly can we

00:32:20,379 --> 00:32:24,580
slightly screwed that up you still

00:32:21,460 --> 00:32:28,690
actually have to depend on multi arch

00:32:24,580 --> 00:32:30,879
support package because of lips eNOS

00:32:28,690 --> 00:32:35,559
which we were hoping we wouldn't have to

00:32:30,879 --> 00:32:38,979
do so um this is quite a significant

00:32:35,559 --> 00:32:40,599
change slide able to convey how

00:32:38,979 --> 00:32:42,580
marvelous it is until you actually try

00:32:40,599 --> 00:32:43,749
it you know I have been really quite

00:32:42,580 --> 00:32:46,119
impressed by all this now that I've

00:32:43,749 --> 00:32:48,399
started using it it is correct it's nice

00:32:46,119 --> 00:32:50,019
that 10 years later we have a proper

00:32:48,399 --> 00:32:54,129
solution to the multiple architecture

00:32:50,019 --> 00:32:57,669
library thing and we've done it it works

00:32:54,129 --> 00:32:59,409
people are using it but only in debian

00:32:57,669 --> 00:33:03,249
and ubuntu and derivatives at the logan

00:32:59,409 --> 00:33:06,399
so this is cross destroy world I have no

00:33:03,249 --> 00:33:08,559
idea whether the Fedora people are

00:33:06,399 --> 00:33:10,210
interested in doing this or not or quite

00:33:08,559 --> 00:33:11,950
happy with their their world at the

00:33:10,210 --> 00:33:14,499
moment it's not too bad everything works

00:33:11,950 --> 00:33:15,789
long as you've got x86 and AMD 64 but

00:33:14,499 --> 00:33:18,399
like it's a lot more complicated once

00:33:15,789 --> 00:33:23,919
you've got a arch 64 which is the arm

00:33:18,399 --> 00:33:26,769
64-bit stuff and army al an arm hf and

00:33:23,919 --> 00:33:28,179
all the other stuff so debbie has always

00:33:26,769 --> 00:33:29,950
lived in this world having loads of

00:33:28,179 --> 00:33:32,080
supported architectures other distros

00:33:29,950 --> 00:33:34,029
less so but i guess they're all

00:33:32,080 --> 00:33:39,700
supporting arm so the beginning to

00:33:34,029 --> 00:33:41,109
notice so that's all I've got to say I'd

00:33:39,700 --> 00:33:43,029
be interested to know if anyone here

00:33:41,109 --> 00:33:48,009
does think this is something they'd like

00:33:43,029 --> 00:33:51,330
to do outside debian and if so how we

00:33:48,009 --> 00:33:51,330
might do that

00:33:53,680 --> 00:33:57,240
or if you've got any sensible questions

00:34:07,590 --> 00:34:11,250
people would find it useful tow that

00:34:09,690 --> 00:34:12,690
wants to know about the code installable

00:34:11,250 --> 00:34:13,530
binaries part of this is always happens

00:34:12,690 --> 00:34:14,970
you get look we've done all this cool

00:34:13,530 --> 00:34:16,530
stuff for the library yeah yeah it's

00:34:14,970 --> 00:34:19,879
nice we want boom come as little

00:34:16,530 --> 00:34:19,879
everything yeah well

00:34:27,260 --> 00:34:33,139
but because they're loading stuff over

00:34:30,590 --> 00:34:35,090
the net so they might get binaries for

00:34:33,139 --> 00:34:38,740
wellness it might for example be in

00:34:35,090 --> 00:34:38,740
people's home directories or you know

00:34:47,510 --> 00:34:53,300
yeah I mean I think it will be useful

00:34:49,820 --> 00:34:57,470
but somebody needs to sit down and think

00:34:53,300 --> 00:34:59,300
about the details of where you know what

00:34:57,470 --> 00:35:04,010
does the path layout look like pass

00:34:59,300 --> 00:35:05,960
structure and how how do we deal with

00:35:04,010 --> 00:35:13,550
that when people have got the wrong

00:35:05,960 --> 00:35:16,010
binaries and you know it relying on the

00:35:13,550 --> 00:35:18,620
mix of emulations Ursa's compatible

00:35:16,010 --> 00:35:19,820
architectures and so on so yeah I mean

00:35:18,620 --> 00:35:22,340
there's quite a lot of compatible

00:35:19,820 --> 00:35:24,740
architectures most 3264 things within an

00:35:22,340 --> 00:35:25,700
architecture where this just works as

00:35:24,740 --> 00:35:30,470
long as you've got somewhere to put the

00:35:25,700 --> 00:35:32,450
files so and how many things do we have

00:35:30,470 --> 00:35:35,420
to just change the bin here if we just

00:35:32,450 --> 00:35:38,570
add another qualifier to bin and leave a

00:35:35,420 --> 00:35:40,970
sibling there for the old compatibility

00:35:38,570 --> 00:35:42,680
does that just work in fact I haven't

00:35:40,970 --> 00:35:43,940
thought the worst in detail and this is

00:35:42,680 --> 00:35:45,710
where Steve Lyons that will be a better

00:35:43,940 --> 00:35:48,530
man to stand here because he has thought

00:35:45,710 --> 00:35:50,720
about it some degree yes I think people

00:35:48,530 --> 00:35:55,160
want to see this happen that is kind of

00:35:50,720 --> 00:35:56,540
part two of this process I don't have a

00:35:55,160 --> 00:35:58,600
detailed plan I care that the cross

00:35:56,540 --> 00:36:00,740
building part works at the moment and

00:35:58,600 --> 00:36:02,030
we've done all the infrastructure work

00:36:00,740 --> 00:36:05,870
but now there's a whole load of work

00:36:02,030 --> 00:36:10,060
work to do but yeah if anybody cares

00:36:05,870 --> 00:36:10,060
please write specification

00:36:21,680 --> 00:36:26,840
so yeah so he's asking how long it will

00:36:24,800 --> 00:36:28,820
be before we get all the headers and dev

00:36:26,840 --> 00:36:30,740
packages done as well as just Larry

00:36:28,820 --> 00:36:33,080
packages it's being done at the moment

00:36:30,740 --> 00:36:35,420
it's just that if you read the specs it

00:36:33,080 --> 00:36:37,040
just says various places you as a

00:36:35,420 --> 00:36:39,380
package you don't have to move all your

00:36:37,040 --> 00:36:43,180
headers even if their architecture

00:36:39,380 --> 00:36:46,310
dependent yet because it's not decreed

00:36:43,180 --> 00:36:47,480
but the cross built the art spec says

00:36:46,310 --> 00:36:50,750
please move your head as if their

00:36:47,480 --> 00:36:53,510
architecture dependent and you do need

00:36:50,750 --> 00:36:54,680
to test that thing's still build with

00:36:53,510 --> 00:36:56,750
these gives you sometimes you move the

00:36:54,680 --> 00:37:02,120
libraries and you're dead package breaks

00:36:56,750 --> 00:37:04,150
anyway so in general we are fixing all

00:37:02,120 --> 00:37:06,800
the dev packages are the timeline I mean

00:37:04,150 --> 00:37:09,290
there's six thousand packages other know

00:37:06,800 --> 00:37:11,540
how many dev packages there are a couple

00:37:09,290 --> 00:37:16,310
of thousands we've probably done about

00:37:11,540 --> 00:37:17,750
40 so far or something so it's just an

00:37:16,310 --> 00:37:19,040
ongoing process in practice you can

00:37:17,750 --> 00:37:21,980
build an awful lot of the system with a

00:37:19,040 --> 00:37:23,690
relatively small subset of the system so

00:37:21,980 --> 00:37:27,290
you know once we've done 200 of the most

00:37:23,690 --> 00:37:31,840
awful probably work I imagine we will

00:37:27,290 --> 00:37:31,840
have a good chunk of it done this year

00:37:53,970 --> 00:38:00,119
so asking whether this is important for

00:37:57,570 --> 00:38:03,390
small systems as well as desktop site

00:38:00,119 --> 00:38:05,369
systems mostly from the cross building

00:38:03,390 --> 00:38:07,230
aspect you know if your system is

00:38:05,369 --> 00:38:09,750
constrained you don't generally want to

00:38:07,230 --> 00:38:16,830
be installing multiple architectures of

00:38:09,750 --> 00:38:21,810
stuff yes so it's really useful for

00:38:16,830 --> 00:38:23,250
building stuff and for testing stuff you

00:38:21,810 --> 00:38:25,800
know it's now trivial to just install

00:38:23,250 --> 00:38:27,780
your entire wall the package you've got

00:38:25,800 --> 00:38:30,210
your system and you can just install the

00:38:27,780 --> 00:38:32,490
arm binary you just built and run it

00:38:30,210 --> 00:38:35,070
here you don't need a special

00:38:32,490 --> 00:38:37,770
environment anymore you've got the

00:38:35,070 --> 00:38:39,230
environment to be with the qualification

00:38:37,770 --> 00:38:42,540
which is important to understand that

00:38:39,230 --> 00:38:45,420
everything is in version lock so all

00:38:42,540 --> 00:38:46,770
this multi art stuff only works for the

00:38:45,420 --> 00:38:49,410
same version that's installed on your

00:38:46,770 --> 00:38:51,570
system now if you're building off your

00:38:49,410 --> 00:38:55,230
embedded stuff is all either randomly

00:38:51,570 --> 00:38:58,250
ancient or randomly brand-new and you

00:38:55,230 --> 00:39:01,589
can't just cross install the libraries

00:38:58,250 --> 00:39:04,560
without also installing all these having

00:39:01,589 --> 00:39:07,050
the same versions built for your build

00:39:04,560 --> 00:39:11,280
system but as long as you're prepared to

00:39:07,050 --> 00:39:12,210
live in a version locked dev world then

00:39:11,280 --> 00:39:13,250
you can just run everything on your

00:39:12,210 --> 00:39:15,330
system without having to do anything

00:39:13,250 --> 00:39:16,859
obviously it's not difficult do you have

00:39:15,330 --> 00:39:19,050
a chroot and just do the multi out stuff

00:39:16,859 --> 00:39:21,320
in there but you don't need another

00:39:19,050 --> 00:39:21,320
layer

00:39:28,650 --> 00:39:33,940
well that's all

00:39:31,960 --> 00:39:36,490
so we're having anyone here from from

00:39:33,940 --> 00:39:37,540
fedora and Souza going that's a

00:39:36,490 --> 00:39:44,890
brilliant idea we should do that as well

00:39:37,540 --> 00:39:46,240
then I don't know thank you much talk to

00:39:44,890 --> 00:39:49,290
me afterwards if you need to know

00:39:46,240 --> 00:39:49,290

YouTube URL: https://www.youtube.com/watch?v=5Cn5ptT-ePQ


