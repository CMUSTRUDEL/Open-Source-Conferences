Title: FOSDEM 2009 OpenAMQ
Publication date: 2011-12-22
Playlist: FOSDEM 2009
Description: 
	By Pieter Hintjens

I'll speak about a new messaging protocol called AMQP, and the iMatix projects that implement this protocol.

AMQP makes it possible to make cheap, fast distributed applications, for pubsub, cloud computing, telecoms, etc.. I'll explain our OpenAMQ implementation of AMQP, and also our web-based RESTful messaging project, Zyre, which makes AMQP work over plain HTTP. This talk is aimed at FOSS developers with interest in new protocols. AMQP is a good example of how large businesses are promoting and investing in FOSS today.

FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:07,180 --> 00:00:11,290
and someone came up with what SOA

00:00:08,440 --> 00:00:12,500
actually means so there was state of the

00:00:11,290 --> 00:00:14,510
art

00:00:12,500 --> 00:00:17,270
one option

00:00:14,510 --> 00:00:19,970
Cervantes Oxley Act state of Alaska you

00:00:17,270 --> 00:00:23,420
betcha six wheel over the dark bar on

00:00:19,970 --> 00:00:24,860
tuning and Sega of America and I mean

00:00:23,420 --> 00:00:28,189
who here knows what SEO actually means

00:00:24,860 --> 00:00:30,349
take a hand up if you know this right I

00:00:28,189 --> 00:00:31,490
mean a few and it should be really well

00:00:30,349 --> 00:00:33,980
known because it's the Internet I mean

00:00:31,490 --> 00:00:36,379
you know service-oriented architecture

00:00:33,980 --> 00:00:39,590
you put stuff somewhere you find it it's

00:00:36,379 --> 00:00:40,820
like you want to buy a pizza so you call

00:00:39,590 --> 00:00:42,080
someone and say where's the best pizza

00:00:40,820 --> 00:00:43,970
shop and someone says I'll put you

00:00:42,080 --> 00:00:47,030
through and they put you through and it

00:00:43,970 --> 00:00:48,379
pizza arrives except it's all digital so

00:00:47,030 --> 00:00:50,030
should be really easy to do because

00:00:48,379 --> 00:00:53,269
there's no pizza it's just like you know

00:00:50,030 --> 00:00:56,030
a package of data and interception come

00:00:53,269 --> 00:00:57,500
and go anytime and since intense all

00:00:56,030 --> 00:00:59,600
about information communication it's a

00:00:57,500 --> 00:01:01,729
real shame that messaging which is the

00:00:59,600 --> 00:01:04,460
the core of this is so poorly understood

00:01:01,729 --> 00:01:06,020
and so poorly made it's really really

00:01:04,460 --> 00:01:07,400
expensive in most cases it's mostly

00:01:06,020 --> 00:01:09,620
proprietary and close and lock down

00:01:07,400 --> 00:01:13,610
there are some open source projects and

00:01:09,620 --> 00:01:14,780
mostly they're kind of black and there

00:01:13,610 --> 00:01:17,600
are some protocols and they're kind of

00:01:14,780 --> 00:01:20,480
black and it really is like the last big

00:01:17,600 --> 00:01:22,100
boring complex and painful area of

00:01:20,480 --> 00:01:24,470
computer science I think we solve

00:01:22,100 --> 00:01:26,690
databases about 10 years ago and now

00:01:24,470 --> 00:01:28,790
everyone can do SQL is it's a child's

00:01:26,690 --> 00:01:30,590
play no problem so messaging is in that

00:01:28,790 --> 00:01:32,210
stage of moving from enterprise

00:01:30,590 --> 00:01:35,420
technology to something that anyone can

00:01:32,210 --> 00:01:37,340
use and today if you can't connect

00:01:35,420 --> 00:01:38,840
pieces together across the internet

00:01:37,340 --> 00:01:40,310
you're an incompetent developer you

00:01:38,840 --> 00:01:43,670
can't actually make big applications

00:01:40,310 --> 00:01:49,600
this is what our job is it's connecting

00:01:43,670 --> 00:01:49,600
thesis in interesting ways so

00:01:51,020 --> 00:01:54,619
I think big companies actually like it

00:01:53,179 --> 00:01:56,659
to be complex and painful and boring

00:01:54,619 --> 00:01:58,729
it's actually in their interest it keeps

00:01:56,659 --> 00:02:00,710
you a competition it does you lock in

00:01:58,729 --> 00:02:02,990
customers it lets you charge profits

00:02:00,710 --> 00:02:05,179
consultants love it in a big fat books

00:02:02,990 --> 00:02:07,069
on web services architecture and you

00:02:05,179 --> 00:02:08,989
have 55 protocols to learn and they're

00:02:07,069 --> 00:02:11,690
all complex and they're all really huge

00:02:08,989 --> 00:02:12,950
and of course it's expensive but open

00:02:11,690 --> 00:02:15,049
source doesn't work that way open source

00:02:12,950 --> 00:02:18,049
works by making things simple and open

00:02:15,049 --> 00:02:20,959
and cheap and reusable and generic and

00:02:18,049 --> 00:02:23,209
you know everywhere it doesn't work by

00:02:20,959 --> 00:02:24,730
making things complicated so this is the

00:02:23,209 --> 00:02:31,000
thing how do you make things simple

00:02:24,730 --> 00:02:33,290
simplicity is very hard it's a common

00:02:31,000 --> 00:02:34,489
idea people have that you start simple

00:02:33,290 --> 00:02:36,049
and you end up complex it's actually

00:02:34,489 --> 00:02:38,540
i'll be around you start complex and if

00:02:36,049 --> 00:02:41,870
very lucky after years of work you are

00:02:38,540 --> 00:02:45,620
not very simple and look at SQL a good

00:02:41,870 --> 00:02:48,530
example you know SQL systems from the

00:02:45,620 --> 00:02:50,599
90s were big complex you have Oracle

00:02:48,530 --> 00:02:52,310
which is a nightmare today it's sq lib

00:02:50,599 --> 00:02:54,769
you know it's a plug-in library which

00:02:52,310 --> 00:02:57,019
you just you just call it just works

00:02:54,769 --> 00:03:00,709
that's what technology should do it

00:02:57,019 --> 00:03:01,579
takes a long time though so messaging is

00:03:00,709 --> 00:03:04,220
something that every single project

00:03:01,579 --> 00:03:06,590
infants and my company we do custom

00:03:04,220 --> 00:03:07,910
projects for a long time and we find

00:03:06,590 --> 00:03:11,389
ourselves every time reinventing

00:03:07,910 --> 00:03:13,130
messaging there's a factory receiving

00:03:11,389 --> 00:03:15,470
orders from an essay p system well

00:03:13,130 --> 00:03:17,150
there's some software that exports or

00:03:15,470 --> 00:03:18,170
just messy p and then since the factory

00:03:17,150 --> 00:03:20,030
and then put system and sends out

00:03:18,170 --> 00:03:22,400
confirmations losing messaging all the

00:03:20,030 --> 00:03:24,410
time and every team does this i think

00:03:22,400 --> 00:03:26,870
and we all do it badly that's the funny

00:03:24,410 --> 00:03:29,540
thing it's a very easy problem to try to

00:03:26,870 --> 00:03:32,450
explain the question is very simple it's

00:03:29,540 --> 00:03:35,329
i want peace a to talk to peace be I'm

00:03:32,450 --> 00:03:36,980
pc-bsd that's easy but actually doing it

00:03:35,329 --> 00:03:40,849
is very very hard thing it properly it's

00:03:36,980 --> 00:03:42,260
very hard and it's hard because you've

00:03:40,849 --> 00:03:44,450
got to get the addressing right you know

00:03:42,260 --> 00:03:46,579
where is P say where is PCB what if they

00:03:44,450 --> 00:03:48,019
move what if what are they called you're

00:03:46,579 --> 00:03:50,090
going to get the cue in the right what

00:03:48,019 --> 00:03:52,040
if piece B is gone temporarily what

00:03:50,090 --> 00:03:53,900
happens to its messages you know what if

00:03:52,040 --> 00:03:55,849
i have several peace bees how do they

00:03:53,900 --> 00:03:58,780
share the work these things are subtle

00:03:55,849 --> 00:04:01,340
and the answers take time to develop

00:03:58,780 --> 00:04:03,739
reliability Transport Systems what

00:04:01,340 --> 00:04:04,640
protocol to our users at TCT is sctp is

00:04:03,739 --> 00:04:06,920
that multicast

00:04:04,640 --> 00:04:09,530
see you know what what I used to connect

00:04:06,920 --> 00:04:12,290
the piece is the lower level so the

00:04:09,530 --> 00:04:13,700
right answers are hard to get and in

00:04:12,290 --> 00:04:16,250
fact until recently no one had the right

00:04:13,700 --> 00:04:18,410
answers as my theory lots of wrong

00:04:16,250 --> 00:04:25,190
answers big expensive wrong answers

00:04:18,410 --> 00:04:27,140
fantastic so a few years ago I think

00:04:25,190 --> 00:04:28,790
because people got really set up by this

00:04:27,140 --> 00:04:31,730
and by people I mean large companies

00:04:28,790 --> 00:04:33,320
users of middleware messaging actually

00:04:31,730 --> 00:04:36,230
began to push develop a new standard

00:04:33,320 --> 00:04:38,180
called amqp an MVP is very interesting

00:04:36,230 --> 00:04:41,390
it's worth studying I think it's the

00:04:38,180 --> 00:04:43,040
first open standard that actually tries

00:04:41,390 --> 00:04:44,390
to address the generic problem of

00:04:43,040 --> 00:04:45,650
messaging and it's a very generic

00:04:44,390 --> 00:04:47,690
solution you could use this for anything

00:04:45,650 --> 00:04:49,550
almost it is general answer to

00:04:47,690 --> 00:04:51,290
addressing a general answer to killing

00:04:49,550 --> 00:04:55,340
which are not answer to naming pieces

00:04:51,290 --> 00:04:57,200
it's it's portable it has no no hang-ups

00:04:55,340 --> 00:04:59,480
about what language to use or what data

00:04:57,200 --> 00:05:05,330
format its blob is to move from A to B

00:04:59,480 --> 00:05:06,919
to C I guess I was the first author of

00:05:05,330 --> 00:05:09,220
NGP so I kind of love it but I think it

00:05:06,919 --> 00:05:12,169
was really an interesting protocol and

00:05:09,220 --> 00:05:13,940
it's been adapted opted by by several

00:05:12,169 --> 00:05:16,070
companies there are I think five or six

00:05:13,940 --> 00:05:18,470
implementations now and they're being

00:05:16,070 --> 00:05:20,810
used in anger in real in large

00:05:18,470 --> 00:05:22,280
deployments one of our customers is Dow

00:05:20,810 --> 00:05:24,880
Jones company which now moved there

00:05:22,280 --> 00:05:26,990
Industrial Average onto mqp backbone

00:05:24,880 --> 00:05:29,660
which is quite impressive they're doing

00:05:26,990 --> 00:05:30,940
something like I think it's 100,000

00:05:29,660 --> 00:05:33,410
emissions is a second and that's

00:05:30,940 --> 00:05:37,220
constant the whole time full time on and

00:05:33,410 --> 00:05:39,710
on and on so they pull in data from from

00:05:37,220 --> 00:05:41,660
Reuters from from Nasdaq from Chicago

00:05:39,710 --> 00:05:43,790
Options Exchange and it goes through a

00:05:41,660 --> 00:05:44,870
server which filters it selects it and

00:05:43,790 --> 00:05:46,910
then it gets published at two different

00:05:44,870 --> 00:05:48,410
clients which then bring it down it

00:05:46,910 --> 00:05:54,680
computes amongst other things these

00:05:48,410 --> 00:05:56,780
these averages so you have a protocol

00:05:54,680 --> 00:05:59,090
designed by users and small IT firms

00:05:56,780 --> 00:06:01,400
which is very good it makes it quite you

00:05:59,090 --> 00:06:05,180
know reasonably reasonably nice the

00:06:01,400 --> 00:06:09,289
website is amqp dot org websites kind of

00:06:05,180 --> 00:06:11,060
disappointing as you'll see now open amq

00:06:09,289 --> 00:06:12,260
which is what this talk is going to be a

00:06:11,060 --> 00:06:14,870
bad but you know that's a very small

00:06:12,260 --> 00:06:17,600
part of the whole thing is our amqp

00:06:14,870 --> 00:06:19,700
server and clients it's

00:06:17,600 --> 00:06:22,730
we began making this together with amqp

00:06:19,700 --> 00:06:24,590
about four years ago it's i would say

00:06:22,730 --> 00:06:27,230
industrial quality software very you

00:06:24,590 --> 00:06:29,120
know serious stuff it's easy to use but

00:06:27,230 --> 00:06:31,700
it's also reasonably painful to build

00:06:29,120 --> 00:06:34,460
large build system multi-threaded

00:06:31,700 --> 00:06:36,770
designed for you know for big use but

00:06:34,460 --> 00:06:39,260
yeah download build compile run fairly

00:06:36,770 --> 00:06:43,220
straightforward it's fast it could be

00:06:39,260 --> 00:06:45,260
much faster but mqp has issues there and

00:06:43,220 --> 00:06:47,090
it's it's reliable like i say it runs

00:06:45,260 --> 00:06:48,380
and runs and runs and we spent something

00:06:47,090 --> 00:06:49,730
like three or four years just making

00:06:48,380 --> 00:06:51,410
that work very hard to make reliable

00:06:49,730 --> 00:06:53,420
software you know you get memory leaks

00:06:51,410 --> 00:06:55,340
you get little race conditions if it's

00:06:53,420 --> 00:06:59,000
multi-threading it's horribly difficult

00:06:55,340 --> 00:07:00,830
but we got that we have a whole toolkit

00:06:59,000 --> 00:07:02,630
in fact we had this crazy idea of

00:07:00,830 --> 00:07:05,530
writing it and see c is the worst

00:07:02,630 --> 00:07:07,700
possible language for serious program

00:07:05,530 --> 00:07:09,500
it's really a terrible language i love

00:07:07,700 --> 00:07:12,050
it in fact but it's really terrible it's

00:07:09,500 --> 00:07:13,580
very simple it's not like pearl pearl

00:07:12,050 --> 00:07:15,170
you you learn perl you write your

00:07:13,580 --> 00:07:16,370
program you forget pearl and you go

00:07:15,170 --> 00:07:17,540
through this learn and right and forget

00:07:16,370 --> 00:07:19,430
cycle every time and it's really painful

00:07:17,540 --> 00:07:21,470
see you remember see it's very simple

00:07:19,430 --> 00:07:23,630
but when you write see every line of

00:07:21,470 --> 00:07:26,750
code is really painful to write to write

00:07:23,630 --> 00:07:29,780
a huge amounts of code i think that the

00:07:26,750 --> 00:07:32,450
size of open mq in lines of c code is

00:07:29,780 --> 00:07:35,390
approaching 1 million and that's a lot

00:07:32,450 --> 00:07:36,800
of code for small team to maintain so we

00:07:35,390 --> 00:07:38,420
use a toolkit which is a meta

00:07:36,800 --> 00:07:40,310
programming toolkit which is really

00:07:38,420 --> 00:07:41,630
funky metaprogramming means that you

00:07:40,310 --> 00:07:43,940
actually write code that then writes

00:07:41,630 --> 00:07:45,290
code and what we do is we write code

00:07:43,940 --> 00:07:46,610
that writes code the right scored the

00:07:45,290 --> 00:07:48,890
right code the writes code that writes

00:07:46,610 --> 00:07:50,840
code it gets really crazy does that this

00:07:48,890 --> 00:07:54,380
actually produce a lot of code very very

00:07:50,840 --> 00:07:57,580
cheaply the actual so a million lines of

00:07:54,380 --> 00:08:01,120
code 44 open mq the meta code is about

00:07:57,580 --> 00:08:03,590
150,000 lines of code and of that i

00:08:01,120 --> 00:08:05,060
think only about 70,000 is really

00:08:03,590 --> 00:08:08,170
written by hand and half is generated

00:08:05,060 --> 00:08:11,120
and then that produces all the seacord

00:08:08,170 --> 00:08:13,640
metaprogramming is a way to write very

00:08:11,120 --> 00:08:16,280
very large systems which have a kind of

00:08:13,640 --> 00:08:18,350
a you know guaranteed level of

00:08:16,280 --> 00:08:20,150
reliability when you generate code you

00:08:18,350 --> 00:08:21,350
know what's in there there's still

00:08:20,150 --> 00:08:23,180
handmade code in there so there's still

00:08:21,350 --> 00:08:28,470
issues of course but they can be fixed

00:08:23,180 --> 00:08:31,890
so that's on ww open mq org now

00:08:28,470 --> 00:08:33,300
we we built it mkp for jpmorgan we then

00:08:31,890 --> 00:08:34,590
built open mq for several clients we

00:08:33,300 --> 00:08:36,030
delivered that and then we look this for

00:08:34,590 --> 00:08:38,610
a while and then we said this is still

00:08:36,030 --> 00:08:42,300
too complex people aren't adopting it

00:08:38,610 --> 00:08:44,490
it's look at amqp org look at am cute

00:08:42,300 --> 00:08:46,980
look at open amq try it you'll find the

00:08:44,490 --> 00:08:49,560
too complex try to write a client that

00:08:46,980 --> 00:08:52,890
speaks amqp it's a protocol it's written

00:08:49,560 --> 00:08:57,540
is documented it takes months that's not

00:08:52,890 --> 00:09:00,300
good I don't like that for me the target

00:08:57,540 --> 00:09:02,970
audience for technology and products

00:09:00,300 --> 00:09:04,680
isn't the guy sitting in a bank with a

00:09:02,970 --> 00:09:05,910
year and a half to write a product you

00:09:04,680 --> 00:09:08,430
know to write an application that's not

00:09:05,910 --> 00:09:09,900
fun my target audience are people like

00:09:08,430 --> 00:09:12,480
me open source developers who have no

00:09:09,900 --> 00:09:15,180
time who want to download try it and it

00:09:12,480 --> 00:09:18,930
works the same day or L to give up and

00:09:15,180 --> 00:09:20,970
for me if you don't get amqp and stuff

00:09:18,930 --> 00:09:24,150
like it and this way of doing messaging

00:09:20,970 --> 00:09:26,370
into the hands of you know developers

00:09:24,150 --> 00:09:28,860
without a you know an enterprise you

00:09:26,370 --> 00:09:30,630
know financial system to back them which

00:09:28,860 --> 00:09:32,970
is their own time and effort then it

00:09:30,630 --> 00:09:34,470
won't work and we will see the

00:09:32,970 --> 00:09:36,470
domination of messaging by proprietary

00:09:34,470 --> 00:09:40,680
products and by really second-class

00:09:36,470 --> 00:09:42,930
answers so I've been working with some

00:09:40,680 --> 00:09:44,940
guys since August on making MTP simpler

00:09:42,930 --> 00:09:48,030
simpler simpler simpler which is quite

00:09:44,940 --> 00:09:49,650
quite a fun project there are other

00:09:48,030 --> 00:09:50,850
problems with amqp that it has some

00:09:49,650 --> 00:09:53,540
flaws but we were still learning where

00:09:50,850 --> 00:09:57,000
they made this you know it's not perfect

00:09:53,540 --> 00:09:59,339
we discovered something called rest now

00:09:57,000 --> 00:10:01,110
rest is fun rest is something which has

00:09:59,339 --> 00:10:02,940
become very fashionable in the last year

00:10:01,110 --> 00:10:05,520
or so but in fact it's the it's the

00:10:02,940 --> 00:10:08,190
underpinning of of HTTP it's a very

00:10:05,520 --> 00:10:11,339
straightforward way of working with

00:10:08,190 --> 00:10:14,010
resources what rest does is it says look

00:10:11,339 --> 00:10:16,860
we have a server with stuff and clients

00:10:14,010 --> 00:10:18,750
and the clients can use create read

00:10:16,860 --> 00:10:21,240
update delete patterns to work with the

00:10:18,750 --> 00:10:23,370
server resources it's very simple it's

00:10:21,240 --> 00:10:25,020
not complicated there is the state is

00:10:23,370 --> 00:10:27,870
very clear you know where things are any

00:10:25,020 --> 00:10:30,120
point you can redo if you not sure you

00:10:27,870 --> 00:10:32,670
can try again you delete ok delete again

00:10:30,120 --> 00:10:34,350
no problem so that's a very robust

00:10:32,670 --> 00:10:37,470
protocol where's most particles are very

00:10:34,350 --> 00:10:41,400
fragile if you get it wrong at brix rest

00:10:37,470 --> 00:10:42,660
is very tough it's it's a it's a pattern

00:10:41,400 --> 00:10:44,399
which works over

00:10:42,660 --> 00:10:45,449
you know large scales and which is easy

00:10:44,399 --> 00:10:50,459
to use by people who don't have much

00:10:45,449 --> 00:10:53,040
time for the fine stuff I quote from a

00:10:50,459 --> 00:10:55,949
user who was comparing rest to soap an

00:10:53,040 --> 00:10:58,199
xml RPC he said moving to pure HTTP

00:10:55,949 --> 00:11:00,629
allowed us to throw away the code for

00:10:58,199 --> 00:11:03,779
the xml RPC service in brackets i love

00:11:00,629 --> 00:11:05,189
throwing away old code and so I was

00:11:03,779 --> 00:11:09,089
saying look you know let's try and make

00:11:05,189 --> 00:11:12,360
mqp work over HTTP it's obvious i mean

00:11:09,089 --> 00:11:14,160
the patterns don't quite fit but HTTP

00:11:12,360 --> 00:11:17,850
has the you know everyone can program

00:11:14,160 --> 00:11:21,540
HTTP i go in perl i say i pull down WP

00:11:17,850 --> 00:11:22,949
and i say you know you a request click

00:11:21,540 --> 00:11:26,699
response and i get something and i do it

00:11:22,949 --> 00:11:32,060
in the five minutes so okay this was the

00:11:26,699 --> 00:11:37,709
challenge getting amqp working with HTTP

00:11:32,060 --> 00:11:42,180
it took us some time it's now there it's

00:11:37,709 --> 00:11:44,610
called rest ms and what this is is it's

00:11:42,180 --> 00:11:46,680
a very clean rest restful implementation

00:11:44,610 --> 00:11:50,250
of messaging protocol which actually

00:11:46,680 --> 00:11:52,880
maps purely on to amqp so your clients

00:11:50,250 --> 00:11:57,209
your applications speak rest ms which is

00:11:52,880 --> 00:12:00,269
HTTP with put get certain resources

00:11:57,209 --> 00:12:03,180
which i'll explain in a second and it's

00:12:00,269 --> 00:12:04,800
just HTTP it's just the web client could

00:12:03,180 --> 00:12:07,199
be in javascript could be in perl could

00:12:04,800 --> 00:12:10,860
be in python ruby whatever and speaks to

00:12:07,199 --> 00:12:12,959
a server which then maps that onto mqp

00:12:10,860 --> 00:12:14,310
and then speaks on ftp server and back

00:12:12,959 --> 00:12:17,490
and forward so it's like a proxy between

00:12:14,310 --> 00:12:20,759
mqp and HTTP what this means is that you

00:12:17,490 --> 00:12:22,319
can basically get from bare metal well

00:12:20,759 --> 00:12:24,420
bear programming language metal if you

00:12:22,319 --> 00:12:32,040
like onto working messaging application

00:12:24,420 --> 00:12:35,899
in a matter of a few hours less that's

00:12:32,040 --> 00:12:35,899
on ww rest ms org

00:12:37,040 --> 00:12:42,570
that's an open protocol spec which

00:12:40,110 --> 00:12:43,800
anyone can contribute to you know some

00:12:42,570 --> 00:12:45,180
things with a mkp I don't like is that

00:12:43,800 --> 00:12:47,160
the protocol is managed by a small group

00:12:45,180 --> 00:12:48,240
of people it's very exclusive if you

00:12:47,160 --> 00:12:49,860
want to contribute to it you can't

00:12:48,240 --> 00:12:51,720
forget it they won't accept

00:12:49,860 --> 00:12:53,070
contributions I don't even know what's

00:12:51,720 --> 00:12:54,510
happening in version 10 is happening

00:12:53,070 --> 00:12:56,640
behind the scenes this is kind of

00:12:54,510 --> 00:12:58,100
annoying if it's an open protocol it

00:12:56,640 --> 00:13:00,839
should be open to anyone to contribute

00:12:58,100 --> 00:13:02,100
so with rest that's the way it is if you

00:13:00,839 --> 00:13:03,959
want to have a you know opinion on it

00:13:02,100 --> 00:13:08,459
come with fixes it's all there it's all

00:13:03,959 --> 00:13:15,300
online I was going to show an example

00:13:08,459 --> 00:13:16,860
but very small basically it's it's it's

00:13:15,300 --> 00:13:18,540
it's six lines I'll read it at you

00:13:16,860 --> 00:13:22,380
because who doesn't who does not know

00:13:18,540 --> 00:13:23,790
HTTP in a modest sense okay no hands

00:13:22,380 --> 00:13:27,029
that's good so it starts and it says

00:13:23,790 --> 00:13:31,160
post you know what post is right so it

00:13:27,029 --> 00:13:34,170
says post / rest ms / the main / default

00:13:31,160 --> 00:13:36,779
this is saying speak to my default

00:13:34,170 --> 00:13:38,339
domain object and make it create

00:13:36,779 --> 00:13:41,520
something so the default domain is like

00:13:38,339 --> 00:13:44,790
the factory for other objects content

00:13:41,520 --> 00:13:47,040
type application slapped / rest MX dot

00:13:44,790 --> 00:13:48,480
plus XML that's just saying I'm going to

00:13:47,040 --> 00:13:51,480
send you an XML document hang on a

00:13:48,480 --> 00:13:54,330
second then it gives a slug a slug is

00:13:51,480 --> 00:13:55,700
like a name it's a slug 2 points fortune

00:13:54,330 --> 00:13:58,380
that's the header three lines of header

00:13:55,700 --> 00:14:03,750
and then comes in an XML document rough

00:13:58,380 --> 00:14:06,060
which has brackets rest ms feed type

00:14:03,750 --> 00:14:08,339
equals service close brackets rest ms

00:14:06,060 --> 00:14:10,560
that's it so it's a little xml document

00:14:08,339 --> 00:14:12,870
being sent to a factory which is the

00:14:10,560 --> 00:14:15,360
domain Alex thing is words in a second

00:14:12,870 --> 00:14:18,480
this tells an object on the server to

00:14:15,360 --> 00:14:20,640
create a new object so the server goes

00:14:18,480 --> 00:14:23,850
the creation of objects and then it

00:14:20,640 --> 00:14:25,529
comes back with an HTTP 201 created with

00:14:23,850 --> 00:14:28,079
the location which is the address of the

00:14:25,529 --> 00:14:30,209
object so you are right and now they are

00:14:28,079 --> 00:14:33,270
now the client application takes it you

00:14:30,209 --> 00:14:34,350
are i does stuff with it when it's

00:14:33,270 --> 00:14:37,260
finished it says delete on that object

00:14:34,350 --> 00:14:39,300
so we can do read update delete on that

00:14:37,260 --> 00:14:43,230
object and just got created so the whole

00:14:39,300 --> 00:14:45,600
structure is self navigating created

00:14:43,230 --> 00:14:48,870
dynamically and navigating through you

00:14:45,600 --> 00:14:50,400
our eyes this is very very very nice it

00:14:48,870 --> 00:14:50,700
means that you can completely partition

00:14:50,400 --> 00:14:53,070
work

00:14:50,700 --> 00:14:56,400
applications that any kind of notion of

00:14:53,070 --> 00:14:57,750
security or you know Trenton if you know

00:14:56,400 --> 00:15:00,270
you do I awry you can access if you

00:14:57,750 --> 00:15:03,750
don't you can't access it you can have

00:15:00,270 --> 00:15:05,040
public and private resources and clients

00:15:03,750 --> 00:15:06,390
and have to invent anything clients get

00:15:05,040 --> 00:15:09,000
information from the server they use it

00:15:06,390 --> 00:15:12,390
and they give it away okay now I'll

00:15:09,000 --> 00:15:15,510
explain very briefly mqp and and rest ms

00:15:12,390 --> 00:15:20,610
as architectures how they work it's

00:15:15,510 --> 00:15:25,980
actually quite simple you have a board

00:15:20,610 --> 00:15:28,950
and you have chalk so the problem is you

00:15:25,980 --> 00:15:31,050
have applications here they wanted that

00:15:28,950 --> 00:15:33,510
one some kind of a service they want to

00:15:31,050 --> 00:15:41,420
get pizza and you've got restaurants

00:15:33,510 --> 00:15:43,530
here that have pizza they all have pizza

00:15:41,420 --> 00:15:45,750
it's digital pizza so there's no real

00:15:43,530 --> 00:15:48,300
pizza and there's someone in the middle

00:15:45,750 --> 00:15:49,470
that can actually tell you where the

00:15:48,300 --> 00:15:53,010
restaurants are and had to get the pizza

00:15:49,470 --> 00:16:00,780
backwards and forwards so you kind of

00:15:53,010 --> 00:16:03,800
say like okay I want a pizza that's like

00:16:00,780 --> 00:16:12,360
your address and someone here says like

00:16:03,800 --> 00:16:15,870
yes we have pizza and in the middle the

00:16:12,360 --> 00:16:18,000
request and someone's statements of we

00:16:15,870 --> 00:16:21,540
have pizza get matched up and the

00:16:18,000 --> 00:16:28,670
request for pizza comes through and it's

00:16:21,540 --> 00:16:34,790
pepperoni and then packets sent back a

00:16:28,670 --> 00:16:38,370
pepperoni pizza so a few instants later

00:16:34,790 --> 00:16:39,900
this pizza restaurant burns down in a

00:16:38,370 --> 00:16:41,010
ball of fire because the guy left the

00:16:39,900 --> 00:16:45,620
stove on too long and his wife was

00:16:41,010 --> 00:16:47,760
shouting at him and this one is now

00:16:45,620 --> 00:16:50,070
visible or it was visible before but

00:16:47,760 --> 00:16:51,750
didn't get you know pay attention to so

00:16:50,070 --> 00:16:53,900
the thing about services is that they

00:16:51,750 --> 00:16:56,370
come and go completely randomly

00:16:53,900 --> 00:17:00,420
certainly as a user here you have no

00:16:56,370 --> 00:17:02,130
idea who you're talking to it's indirect

00:17:00,420 --> 00:17:04,010
it's abstracted this is very very

00:17:02,130 --> 00:17:06,980
important it's

00:17:04,010 --> 00:17:09,860
to make architectures problem is things

00:17:06,980 --> 00:17:11,810
change and then all I T its change which

00:17:09,860 --> 00:17:14,240
is the big enemy you know the ability is

00:17:11,810 --> 00:17:16,160
not an issue anyone can write you know a

00:17:14,240 --> 00:17:17,900
programmer and so a compiler for correct

00:17:16,160 --> 00:17:19,940
code in 15 systems don't accept change

00:17:17,900 --> 00:17:21,410
but change happens a lot here you can

00:17:19,940 --> 00:17:23,360
change stuff completely arbitrarily and

00:17:21,410 --> 00:17:26,720
that's the magic of of messaging you can

00:17:23,360 --> 00:17:28,970
add and remove pieces and they find each

00:17:26,720 --> 00:17:31,880
other dynamically they do their work and

00:17:28,970 --> 00:17:34,430
it's it's that's it no state necessarily

00:17:31,880 --> 00:17:36,710
shared between them and there are

00:17:34,430 --> 00:17:39,080
different patterns for example in this

00:17:36,710 --> 00:17:41,480
pattern the message goes back through

00:17:39,080 --> 00:17:43,190
this central route or but in fact that's

00:17:41,480 --> 00:17:45,290
not necessary you can actually do very

00:17:43,190 --> 00:17:46,790
nice peer-to-peer messaging where you

00:17:45,290 --> 00:17:51,950
use the central point for address lookup

00:17:46,790 --> 00:17:53,420
and then they talk directly and if you

00:17:51,950 --> 00:17:54,920
know something like sift which is the

00:17:53,420 --> 00:17:57,560
voice over IP application it works like

00:17:54,920 --> 00:17:59,410
that a central registrar for who's

00:17:57,560 --> 00:18:02,360
online and where they are and then

00:17:59,410 --> 00:18:03,530
peer-to-peer communications and we do

00:18:02,360 --> 00:18:05,120
this in some of our in some of our

00:18:03,530 --> 00:18:06,800
products there's one called zeromq which

00:18:05,120 --> 00:18:09,110
works like this is very nice much much

00:18:06,800 --> 00:18:10,190
faster than amqp but mkp insists on I've

00:18:09,110 --> 00:18:13,670
been going through one single central

00:18:10,190 --> 00:18:16,760
point okay now the key concepts that M

00:18:13,670 --> 00:18:19,720
cutie I think introduced and which work

00:18:16,760 --> 00:18:23,000
very very well are the concepts of an

00:18:19,720 --> 00:18:33,560
addressing thing here which we call an

00:18:23,000 --> 00:18:39,290
exchange and queues which connect to

00:18:33,560 --> 00:18:44,240
exchange it's through bindings is a ques

00:18:39,290 --> 00:18:47,180
I don't know how many easier okay that

00:18:44,240 --> 00:18:50,300
sounds about right so Q binding exchange

00:18:47,180 --> 00:18:52,280
lets you create a cue that takes care of

00:18:50,300 --> 00:18:54,410
the asynchronous aspect if there's no

00:18:52,280 --> 00:18:56,090
pizza restaurants for a second it'll

00:18:54,410 --> 00:18:58,640
wait Nick you when one comes it'll get

00:18:56,090 --> 00:19:02,060
its work so queuing is essential to any

00:18:58,640 --> 00:19:04,940
kind of a robust system and the exchange

00:19:02,060 --> 00:19:06,950
lets you then have a fixed point to talk

00:19:04,940 --> 00:19:09,260
to but which then we'll handle the

00:19:06,950 --> 00:19:11,480
things that come and go so you talk to a

00:19:09,260 --> 00:19:13,790
fixed point you say look I want these in

00:19:11,480 --> 00:19:16,600
these messages when they arrive you get

00:19:13,790 --> 00:19:16,600
them in a queue

00:19:16,760 --> 00:19:21,720
this makes sense okay this certainly

00:19:19,740 --> 00:19:23,820
works very well but in mqp there's a few

00:19:21,720 --> 00:19:25,380
gotchas in there for example we have

00:19:23,820 --> 00:19:28,230
different kinds of cues we have q's

00:19:25,380 --> 00:19:31,710
which are shared cues where you

00:19:28,230 --> 00:19:33,390
basically say look all my pizza orders

00:19:31,710 --> 00:19:34,530
will come on this queue I get the one by

00:19:33,390 --> 00:19:37,110
one I show them different pizza

00:19:34,530 --> 00:19:39,300
restaurants they're big important cues

00:19:37,110 --> 00:19:41,670
we also have little private cues like I

00:19:39,300 --> 00:19:43,290
am subscribing to all you know the gold

00:19:41,670 --> 00:19:44,760
price I want these prices in some little

00:19:43,290 --> 00:19:48,510
private you for me they're in the same

00:19:44,760 --> 00:19:52,220
space which is kind of messy the few

00:19:48,510 --> 00:19:55,140
other problems with that as well but ok

00:19:52,220 --> 00:19:56,940
rest time s works very in a very similar

00:19:55,140 --> 00:20:03,690
fashion but we we use different names

00:19:56,940 --> 00:20:09,750
just to be annoying we called we call

00:20:03,690 --> 00:20:15,990
these feeds we call these pipes let me

00:20:09,750 --> 00:20:19,380
call these joints so a pipe is like a

00:20:15,990 --> 00:20:22,160
unix pipe you create pipes you consume

00:20:19,380 --> 00:20:24,720
from pipes it's a very simple metaphor

00:20:22,160 --> 00:20:27,000
they have names but the server generated

00:20:24,720 --> 00:20:29,460
names you say I want to pipe server

00:20:27,000 --> 00:20:32,640
gives you a URI as we saw on a restful

00:20:29,460 --> 00:20:34,800
example you then say get which gives you

00:20:32,640 --> 00:20:36,690
a message you say delete which deletes

00:20:34,800 --> 00:20:38,100
the pipe you get a message message

00:20:36,690 --> 00:20:40,590
content so you can access the Python

00:20:38,100 --> 00:20:43,710
what it has the feed is where you send

00:20:40,590 --> 00:20:45,720
stuff so feed would be for publishing

00:20:43,710 --> 00:20:48,570
information for sending requests for

00:20:45,720 --> 00:20:50,640
pizza anything and then you connect the

00:20:48,570 --> 00:20:53,130
pipes to feed it's a very simple

00:20:50,640 --> 00:20:54,570
metaphor networks and it actually maps

00:20:53,130 --> 00:20:56,220
onto mqp in their kind of a nice way

00:20:54,570 --> 00:20:59,130
it's not quite one to one because in

00:20:56,220 --> 00:21:01,710
some of the feeds or exchanges and some

00:20:59,130 --> 00:21:03,560
actually are cues and that's where n QP

00:21:01,710 --> 00:21:05,760
got it wrong is that it actually mixes

00:21:03,560 --> 00:21:06,900
things which have the same basic

00:21:05,760 --> 00:21:11,460
semantics in two different places it

00:21:06,900 --> 00:21:15,480
separates the match okay enough of the

00:21:11,460 --> 00:21:18,210
lecture on that it gets very detailed we

00:21:15,480 --> 00:21:20,940
made a implementation of rest ms called

00:21:18,210 --> 00:21:24,120
zire so if you were online i would say

00:21:20,940 --> 00:21:27,120
look at sire calm now but you can't but

00:21:24,120 --> 00:21:29,110
i'm sure you love when you go home sir

00:21:27,120 --> 00:21:31,600
calm has a

00:21:29,110 --> 00:21:33,490
zire is the messaging server it's open

00:21:31,600 --> 00:21:35,620
source of course we began this last year

00:21:33,490 --> 00:21:45,809
together with rest ms and it's basically

00:21:35,620 --> 00:21:45,809
a proxy for i'll show you how it works

00:21:49,080 --> 00:21:54,540
typically you have a name cutie network

00:21:54,929 --> 00:22:02,040
the big broker in the middle and

00:21:57,780 --> 00:22:02,040
applications hanging off it all around

00:22:03,120 --> 00:22:10,120
doing heavy stuff and then you have an

00:22:06,130 --> 00:22:12,340
internet network on the outside public

00:22:10,120 --> 00:22:14,309
internet network you have clients here

00:22:12,340 --> 00:22:26,890
they want to access something in that

00:22:14,309 --> 00:22:37,590
Network zire sits here speaks mqp and

00:22:26,890 --> 00:22:47,740
here speaks HTTP you know post get

00:22:37,590 --> 00:22:52,000
delete put so basically you can use sire

00:22:47,740 --> 00:22:54,460
in several ways you can use it to create

00:22:52,000 --> 00:22:56,500
a web frontend for an existing amqp

00:22:54,460 --> 00:22:57,700
application which is unlikely to insert

00:22:56,500 --> 00:23:01,440
anyone here because i doubt any of you

00:22:57,700 --> 00:23:06,520
do that more interestingly is just

00:23:01,440 --> 00:23:09,490
completely ignore this part and just use

00:23:06,520 --> 00:23:11,020
it as a messaging server and just

00:23:09,490 --> 00:23:15,340
pretend it doesn't know just there's an

00:23:11,020 --> 00:23:18,280
amqp engine at the back not relevant

00:23:15,340 --> 00:23:20,350
it's basically a very simple accessible

00:23:18,280 --> 00:23:23,070
messaging system which speaks HTTP

00:23:20,350 --> 00:23:23,070
that's all

00:23:24,160 --> 00:23:32,340
I think the again it's also do with the

00:23:28,540 --> 00:23:35,740
cost yeah the cost of learning amqp

00:23:32,340 --> 00:23:38,320
writing an MP application it's weeks and

00:23:35,740 --> 00:23:40,180
months this is a big improvement over

00:23:38,320 --> 00:23:45,240
previous systems already which used to

00:23:40,180 --> 00:23:45,240
be six months to a year getting you know

00:23:45,450 --> 00:23:51,990
JMS reasonably good still very very

00:23:48,550 --> 00:23:54,250
complex doesn't do much more basically

00:23:51,990 --> 00:23:57,820
mqp is good but it's still too complex

00:23:54,250 --> 00:24:00,310
in the rest ms you pick it up you should

00:23:57,820 --> 00:24:02,860
be you should be up and running in a few

00:24:00,310 --> 00:24:05,290
hours if you're using one of the

00:24:02,860 --> 00:24:10,030
libraries that we have less time a few

00:24:05,290 --> 00:24:11,020
minutes and that's really the goal I

00:24:10,030 --> 00:24:13,090
mean the goal is to get this to be

00:24:11,020 --> 00:24:14,200
really really accessible really easy to

00:24:13,090 --> 00:24:17,050
use and still deliver the same

00:24:14,200 --> 00:24:19,030
functionality we lose a few things here

00:24:17,050 --> 00:24:21,670
and there some things we chopped off not

00:24:19,030 --> 00:24:24,390
interesting maybe they come back later

00:24:21,670 --> 00:24:24,390
when we actually need them

00:24:30,140 --> 00:24:36,980
desire is actually built on something

00:24:32,900 --> 00:24:38,780
called x 5 which is a redesign of an old

00:24:36,980 --> 00:24:40,670
thing that we made years ago called

00:24:38,780 --> 00:24:43,160
Tami which is a web server a very

00:24:40,670 --> 00:24:45,350
popular tough little web server I once

00:24:43,160 --> 00:24:48,260
saw on slashdot a guy who had a windows

00:24:45,350 --> 00:24:50,480
95 machine with 26 hard drives and he

00:24:48,260 --> 00:24:51,770
had the site running on slashdot that

00:24:50,480 --> 00:24:53,840
was being slashed dotted and running

00:24:51,770 --> 00:24:56,300
 Amin was just taking it very tough

00:24:53,840 --> 00:24:59,720
this was one of our early experiments in

00:24:56,300 --> 00:25:01,790
multi-threading in code it's now being

00:24:59,720 --> 00:25:04,100
rewritten to use our new or new engine

00:25:01,790 --> 00:25:06,110
and that's doing the HTTP workforce are

00:25:04,100 --> 00:25:08,300
in fact so we'll also make a new web

00:25:06,110 --> 00:25:12,290
server which which as a kind of a side

00:25:08,300 --> 00:25:15,020
product to give you some examples of how

00:25:12,290 --> 00:25:19,490
big this is actually about three and a

00:25:15,020 --> 00:25:23,740
half k lines of code metal lines of code

00:25:19,490 --> 00:25:26,600
if you like desire is about the same

00:25:23,740 --> 00:25:30,140
they're tiny in terms of actual code

00:25:26,600 --> 00:25:32,590
work the meta programming is very very

00:25:30,140 --> 00:25:32,590
efficient

00:25:36,190 --> 00:25:40,440
so

00:25:38,250 --> 00:25:42,120
then we were saying well that's fine we

00:25:40,440 --> 00:25:44,190
have this software it's a little bit

00:25:42,120 --> 00:25:46,620
complex to install we don't yet have

00:25:44,190 --> 00:25:48,000
nice binary packaging does my friend

00:25:46,620 --> 00:25:49,380
Benjamin who's been working for like six

00:25:48,000 --> 00:25:52,290
months where's Benjamin he's not there

00:25:49,380 --> 00:25:53,790
here huh to try an get deviant packaging

00:25:52,290 --> 00:25:55,380
working it's very difficult this is all

00:25:53,790 --> 00:25:57,210
it's all fudz work and it takes time and

00:25:55,380 --> 00:25:59,390
stuff so we just we still deliver source

00:25:57,210 --> 00:26:01,860
code it's annoying for many people

00:25:59,390 --> 00:26:03,630
especially on Windows where you know

00:26:01,860 --> 00:26:09,690
with Microsoft compiler to manage is so

00:26:03,630 --> 00:26:18,870
bad so we made a live site this is fun

00:26:09,690 --> 00:26:20,250
it's called live dire calm and again if

00:26:18,870 --> 00:26:21,900
you had Wi-Fi you could go and try it

00:26:20,250 --> 00:26:23,670
right away but you can't so just imagine

00:26:21,900 --> 00:26:25,740
it basically it's a running it's a

00:26:23,670 --> 00:26:27,840
running as a rest ms server is running

00:26:25,740 --> 00:26:29,640
online you can access it it's an open

00:26:27,840 --> 00:26:32,400
server you can use it to publish stuff

00:26:29,640 --> 00:26:34,350
receive stuff and I had some demo

00:26:32,400 --> 00:26:35,790
programs which you can see if you go to

00:26:34,350 --> 00:26:38,760
zaire com you can look at them and try

00:26:35,790 --> 00:26:41,460
them and they're there is a 7 line perl

00:26:38,760 --> 00:26:43,680
script basically and it is doing

00:26:41,460 --> 00:26:45,180
microblogging so you publish to a feed

00:26:43,680 --> 00:26:46,950
with your name and a comment and you can

00:26:45,180 --> 00:26:48,120
receive from from a feed and you

00:26:46,950 --> 00:26:50,060
basically just do micro blogging like

00:26:48,120 --> 00:26:53,550
that and it's really really simple to do

00:26:50,060 --> 00:26:54,810
so you're probably asking by now you

00:26:53,550 --> 00:26:56,730
know what's what's actually different

00:26:54,810 --> 00:26:58,620
here you know what's-what's you know we

00:26:56,730 --> 00:27:01,740
know a lot of stuff we have RSS we have

00:26:58,620 --> 00:27:03,840
atompub what's different now what am I

00:27:01,740 --> 00:27:05,370
getting if I try this out so i'll try

00:27:03,840 --> 00:27:08,220
some sales I don't know you to do sales

00:27:05,370 --> 00:27:10,920
i'm using a programmer but okay i think

00:27:08,220 --> 00:27:14,790
the biggest thing is that stuff's

00:27:10,920 --> 00:27:16,290
happening here interesting stuff useful

00:27:14,790 --> 00:27:20,030
stuff happening on the server on your

00:27:16,290 --> 00:27:22,800
behalf the most interesting is queuing

00:27:20,030 --> 00:27:25,080
now if you look at RSS RSS biscay says

00:27:22,800 --> 00:27:26,460
here's a feed and every now and then you

00:27:25,080 --> 00:27:28,230
you go and look at your feet again you

00:27:26,460 --> 00:27:30,750
pull and you say where's my feet it's

00:27:28,230 --> 00:27:32,670
very slow and you can maybe get 10 or 15

00:27:30,750 --> 00:27:34,500
or 20 items then they know things things

00:27:32,670 --> 00:27:36,330
the things hang and it's horribly slow

00:27:34,500 --> 00:27:40,110
for a little bunch of data it's like

00:27:36,330 --> 00:27:42,180
that's incredible and it's all pulling

00:27:40,110 --> 00:27:43,110
so you have to pull pull pull pull and

00:27:42,180 --> 00:27:44,700
your question you're asking the server

00:27:43,110 --> 00:27:45,930
has something changed has something

00:27:44,700 --> 00:27:47,310
changed has something changed you

00:27:45,930 --> 00:27:49,620
couldn't imagine a less efficient way of

00:27:47,310 --> 00:27:51,310
doing messaging it's the worst possible

00:27:49,620 --> 00:27:55,340
design

00:27:51,310 --> 00:27:56,960
Adam pub is better it's definitely got

00:27:55,340 --> 00:27:59,480
better pattern it's very restful if you

00:27:56,960 --> 00:28:01,640
look at atompub the spec how they work

00:27:59,480 --> 00:28:03,350
it it's very nice in terms of rest but

00:28:01,640 --> 00:28:05,960
it's still pulling you're still saying

00:28:03,350 --> 00:28:08,030
here's my feet get my feet look at my

00:28:05,960 --> 00:28:09,230
feet okay fine get my feet look at my

00:28:08,030 --> 00:28:11,180
feet so new messages you have to go and

00:28:09,230 --> 00:28:12,590
ask them when do they arrive this is a

00:28:11,180 --> 00:28:14,120
really bad way of making the i/o system

00:28:12,590 --> 00:28:15,740
so system should be asynchronous you

00:28:14,120 --> 00:28:20,180
should be event driven that means that

00:28:15,740 --> 00:28:22,190
oh it arrived thanks and most time

00:28:20,180 --> 00:28:29,330
you're waiting on stuff so you say I

00:28:22,190 --> 00:28:31,280
wait when it arrives I continue what we

00:28:29,330 --> 00:28:34,130
do in rest ms is we have what's called a

00:28:31,280 --> 00:28:37,130
long pole a long pole says get a message

00:28:34,130 --> 00:28:40,160
it's not there yet when it arrives I get

00:28:37,130 --> 00:28:41,720
it so the get the get action the get

00:28:40,160 --> 00:28:44,600
method actually can be an asynchronous

00:28:41,720 --> 00:28:46,280
get it's kind of weird the URI exist

00:28:44,600 --> 00:28:49,130
before the object exists that works very

00:28:46,280 --> 00:28:51,080
nicely so you can have q's which are

00:28:49,130 --> 00:28:54,380
sitting on the server waiting for you

00:28:51,080 --> 00:28:56,690
private queues and then when you at your

00:28:54,380 --> 00:28:58,340
leisure you collect your messages it's

00:28:56,690 --> 00:29:02,240
really like a mailbox a little bit like

00:28:58,340 --> 00:29:09,290
email but much simpler than email much

00:29:02,240 --> 00:29:11,690
much simpler addressing so again

00:29:09,290 --> 00:29:13,100
protocols like atompub are very nice but

00:29:11,690 --> 00:29:15,260
there's no abstraction there's no

00:29:13,100 --> 00:29:20,090
addressing you publish to the feet you

00:29:15,260 --> 00:29:22,600
read from a feed well it's better than

00:29:20,090 --> 00:29:28,820
publishing to it directly point-to-point

00:29:22,600 --> 00:29:30,830
but it's still very tightly coupled with

00:29:28,820 --> 00:29:32,870
rest ms you can say look i have a pipe

00:29:30,830 --> 00:29:34,010
and my pipe collects data from these and

00:29:32,870 --> 00:29:35,330
these and these feeds with these

00:29:34,010 --> 00:29:37,430
conditions clock like like like like

00:29:35,330 --> 00:29:42,470
like like I get my stuff in my pipe and

00:29:37,430 --> 00:29:44,360
I read it when I want so the pipe is

00:29:42,470 --> 00:29:46,400
actually doing a little bit like

00:29:44,360 --> 00:29:49,010
searching on feeds of data in real time

00:29:46,400 --> 00:29:50,420
and whatever its matching it picks up

00:29:49,010 --> 00:29:53,180
and puts aside and then you can pick up

00:29:50,420 --> 00:29:55,340
in your application so you can imagine

00:29:53,180 --> 00:29:58,670
new ways of doing information processing

00:29:55,340 --> 00:30:00,290
let's say you want to monitor IRC

00:29:58,670 --> 00:30:01,520
channels on free net which is by the way

00:30:00,290 --> 00:30:03,450
not allowed I tried it and they're like

00:30:01,520 --> 00:30:04,889
you can't do that okay fine

00:30:03,450 --> 00:30:06,330
whatever and you will see when they

00:30:04,889 --> 00:30:07,500
mention your product or your name you

00:30:06,330 --> 00:30:09,269
know you have all these channels talking

00:30:07,500 --> 00:30:11,940
maybe talking about you it's a great

00:30:09,269 --> 00:30:14,190
paranoid too so you can search of course

00:30:11,940 --> 00:30:15,570
means you can export IRC logs you can

00:30:14,190 --> 00:30:17,730
index them and you can search them

00:30:15,570 --> 00:30:19,950
that's useless you know you want to get

00:30:17,730 --> 00:30:20,970
in on the chat you want to come in when

00:30:19,950 --> 00:30:22,139
they're talking about you and say yeah

00:30:20,970 --> 00:30:24,179
that's true that's great he's a great

00:30:22,139 --> 00:30:25,590
guy I know him personally or yeah that's

00:30:24,179 --> 00:30:26,760
a great product or no no it's all lies

00:30:25,590 --> 00:30:28,620
all lies but you want to be there in

00:30:26,760 --> 00:30:30,389
real-time information when it's all this

00:30:28,620 --> 00:30:33,000
useless this is the really the way it

00:30:30,389 --> 00:30:35,700
goes information the value decays really

00:30:33,000 --> 00:30:38,549
quickly so you want to be able to

00:30:35,700 --> 00:30:42,090
monitor the whole of free net in real

00:30:38,549 --> 00:30:43,860
time well you take you subscribe to all

00:30:42,090 --> 00:30:44,789
of the channels don't do this is by

00:30:43,860 --> 00:30:47,730
they're not allowed but it's what you

00:30:44,789 --> 00:30:50,850
would do if it was allowed subscribe to

00:30:47,730 --> 00:30:53,039
all the channels publish all of the

00:30:50,850 --> 00:30:56,610
content little channels on to a feed on

00:30:53,039 --> 00:30:57,809
live sire calm create a pipe and say on

00:30:56,610 --> 00:31:00,960
this part I want to match on these in

00:30:57,809 --> 00:31:03,830
these in these words read your pipe

00:31:00,960 --> 00:31:03,830
that's it that simple

00:31:06,790 --> 00:31:14,860
so conclusions messaging can be fun and

00:31:11,820 --> 00:31:17,080
it should be fun it's communication what

00:31:14,860 --> 00:31:19,030
we like doing best of all so intense all

00:31:17,080 --> 00:31:20,980
about is communicating making pieces

00:31:19,030 --> 00:31:23,080
work together the fact that it's really

00:31:20,980 --> 00:31:24,550
boring and complex in painful is because

00:31:23,080 --> 00:31:26,020
it's been done by big companies who are

00:31:24,550 --> 00:31:33,100
basically incompetent or greedy or

00:31:26,020 --> 00:31:35,050
stupid or all three we have new open

00:31:33,100 --> 00:31:36,640
protocols that change the game they

00:31:35,050 --> 00:31:39,390
really change the game the messaging has

00:31:36,640 --> 00:31:43,090
been dominated by products first of all

00:31:39,390 --> 00:31:45,940
api's secondly and protocols really it's

00:31:43,090 --> 00:31:47,710
a very recent phenomenon api's are

00:31:45,940 --> 00:31:49,150
useless that's odbc you know it didn't

00:31:47,710 --> 00:31:52,450
get us anywhere you want standard

00:31:49,150 --> 00:31:53,650
protocols for anyone can compete you

00:31:52,450 --> 00:31:57,190
want open source products anyone can

00:31:53,650 --> 00:31:59,950
improve you want competition you want

00:31:57,190 --> 00:32:01,630
freedom from locking you want the

00:31:59,950 --> 00:32:04,780
programmers actually fighting to make a

00:32:01,630 --> 00:32:09,640
better product so for example with with

00:32:04,780 --> 00:32:12,010
open amq and mqp you know we find it was

00:32:09,640 --> 00:32:18,250
too slow so we have some some guys in

00:32:12,010 --> 00:32:21,160
Slovakia friends of ours fast mq and

00:32:18,250 --> 00:32:23,350
they make a product called 0 and Q which

00:32:21,160 --> 00:32:24,970
is basically doing a lot of this work

00:32:23,350 --> 00:32:28,060
with no broker and they're hitting 4

00:32:24,970 --> 00:32:30,550
million messages a second with Layton

00:32:28,060 --> 00:32:32,800
sees of about 10 microseconds just in

00:32:30,550 --> 00:32:34,780
software really extraordinary this is

00:32:32,800 --> 00:32:38,110
competition people saying I can do

00:32:34,780 --> 00:32:39,700
better and it's all open source so you

00:32:38,110 --> 00:32:41,920
get the input from you know if we input

00:32:39,700 --> 00:32:45,490
from Intel from other people helping us

00:32:41,920 --> 00:32:49,060
with that mqp is good it's still too

00:32:45,490 --> 00:32:51,100
complex for me it's failed in its

00:32:49,060 --> 00:32:52,900
mission of being simple and accessible

00:32:51,100 --> 00:32:54,970
its enterprise technology which is no

00:32:52,900 --> 00:32:56,770
which is really no no good that all that

00:32:54,970 --> 00:33:03,850
means is that it's a problem you want it

00:32:56,770 --> 00:33:07,030
to be web technology for me so my advice

00:33:03,850 --> 00:33:10,840
is to try have a look at rest ms try

00:33:07,030 --> 00:33:12,430
that if you're a pearl programmer you're

00:33:10,840 --> 00:33:14,320
lucky because I made pro classes which

00:33:12,430 --> 00:33:16,930
wrap up the basic objects in Perl if

00:33:14,320 --> 00:33:19,810
you're a Python or Ruby or lure

00:33:16,930 --> 00:33:20,320
programmer and you you feel like it then

00:33:19,810 --> 00:33:22,090
you know

00:33:20,320 --> 00:33:23,500
right in my class my pro class and

00:33:22,090 --> 00:33:27,009
contribute us a class in other languages

00:33:23,500 --> 00:33:31,750
go for it try that tell us what you

00:33:27,009 --> 00:33:34,090
think it should in theory be simpler to

00:33:31,750 --> 00:33:36,100
use an xml RPC much much simpler than

00:33:34,090 --> 00:33:37,570
soap and it should be very close to

00:33:36,100 --> 00:33:41,200
production ready we're talking about

00:33:37,570 --> 00:33:42,279
code it's been you know there's here's

00:33:41,200 --> 00:33:44,350
three and a half scale lines of code

00:33:42,279 --> 00:33:45,399
that is new and is running on a name

00:33:44,350 --> 00:33:47,230
keep backbone which has been running for

00:33:45,399 --> 00:33:48,730
years and years in production so it's

00:33:47,230 --> 00:33:57,120
very close production ready the whole

00:33:48,730 --> 00:33:57,120
thing that's it I'll take questions now

00:34:06,720 --> 00:34:12,819
it's a good question the way I see it so

00:34:11,710 --> 00:34:16,720
with this different points of units my

00:34:12,819 --> 00:34:21,329
point of view standards is a work of the

00:34:16,720 --> 00:34:23,950
community and that it's a matter of

00:34:21,329 --> 00:34:25,510
selection as in natural selection in

00:34:23,950 --> 00:34:28,060
other words standards for me should

00:34:25,510 --> 00:34:30,040
developed by an organic process why

00:34:28,060 --> 00:34:31,359
people propose small improvements and

00:34:30,040 --> 00:34:32,919
the good ones get adopted the balance

00:34:31,359 --> 00:34:34,540
gets run away so for me the best

00:34:32,919 --> 00:34:37,569
approach is hannah's I've seen ever an

00:34:34,540 --> 00:34:38,889
IT is the RFC model where there are lots

00:34:37,569 --> 00:34:42,369
and lots and lots and lots of small

00:34:38,889 --> 00:34:43,720
standards an interval t is a matter of

00:34:42,369 --> 00:34:45,250
that one that one that one that one that

00:34:43,720 --> 00:34:48,460
one and that one you know I implement

00:34:45,250 --> 00:34:50,290
RFC 1218 I implement RFC this and this

00:34:48,460 --> 00:34:52,089
and they're all very formal they're all

00:34:50,290 --> 00:34:55,030
easy to verify because the standard is a

00:34:52,089 --> 00:34:58,089
small piece of specification that's my

00:34:55,030 --> 00:35:00,550
view amqp doesn't really do that mqp is

00:34:58,089 --> 00:35:02,890
getting very big monolithic standard so

00:35:00,550 --> 00:35:05,140
inter bility with amqp as it stands is a

00:35:02,890 --> 00:35:10,660
difficult thing to even prove let alone

00:35:05,140 --> 00:35:13,599
achieve what I've been working on apart

00:35:10,660 --> 00:35:15,700
from software is a process around mkp to

00:35:13,599 --> 00:35:18,550
encourage community driven standards

00:35:15,700 --> 00:35:20,020
development and rest ms is part of that

00:35:18,550 --> 00:35:21,460
there are a bunch of other stands that

00:35:20,020 --> 00:35:23,440
we've been developing small standards

00:35:21,460 --> 00:35:26,970
which i call supporting specifications

00:35:23,440 --> 00:35:26,970
and there's a wiki site

00:35:39,070 --> 00:35:50,330
iris gorilla gorilla standards

00:35:47,900 --> 00:35:51,650
development it's how to do it without a

00:35:50,330 --> 00:35:54,080
top-down structure without committees

00:35:51,650 --> 00:35:55,430
without meetings without that it is it's

00:35:54,080 --> 00:35:58,400
based on what we did in other

00:35:55,430 --> 00:36:01,990
organizations like digi Stan how to make

00:35:58,400 --> 00:36:04,160
good simple accessible open standards if

00:36:01,990 --> 00:36:06,230
you're doing any kind of sinus work it's

00:36:04,160 --> 00:36:09,050
fun to look at that and that's in

00:36:06,230 --> 00:36:11,150
turbidity it's based on people trying

00:36:09,050 --> 00:36:12,800
specs implementing them saying it's good

00:36:11,150 --> 00:36:14,330
it's not good and if it's good and you

00:36:12,800 --> 00:36:15,680
get two or three companies implementing

00:36:14,330 --> 00:36:18,650
it teams inventing it you have inter

00:36:15,680 --> 00:36:22,970
polity you don't interpret with products

00:36:18,650 --> 00:36:24,470
only with standards yeah otherwise you

00:36:22,970 --> 00:36:25,730
get this business where well my product

00:36:24,470 --> 00:36:27,500
doing this well i'll change mine to make

00:36:25,730 --> 00:36:29,540
work with yours that's crap you

00:36:27,500 --> 00:36:31,340
interpret with written specifications

00:36:29,540 --> 00:36:32,390
and if they're not simple and small you

00:36:31,340 --> 00:36:36,700
can't do that and therefore you don't

00:36:32,390 --> 00:36:36,700
get infertility next question

00:36:45,070 --> 00:36:51,130
regular developers regular developers

00:36:48,120 --> 00:36:53,760
yes so the question was is the messaging

00:36:51,130 --> 00:37:00,760
for regular developers or for enterprise

00:36:53,760 --> 00:37:02,350
roughly well there's not there's no

00:37:00,760 --> 00:37:04,810
contradiction the thing is that

00:37:02,350 --> 00:37:06,910
enterprises an enterprise's we mean big

00:37:04,810 --> 00:37:10,090
companies with you know with many staff

00:37:06,910 --> 00:37:12,430
have a very high tolerance for pain they

00:37:10,090 --> 00:37:13,750
don't mind using really complicated

00:37:12,430 --> 00:37:14,770
technologies to take a long time to

00:37:13,750 --> 00:37:17,110
learn they don't mind paying a

00:37:14,770 --> 00:37:18,400
specialist full time just to learn what

00:37:17,110 --> 00:37:21,400
the heck soap is I mean they don't mind

00:37:18,400 --> 00:37:22,870
that little companies do mind that so

00:37:21,400 --> 00:37:24,220
little companies needed to be very cheap

00:37:22,870 --> 00:37:30,340
very simple and very effective very

00:37:24,220 --> 00:37:31,990
quickly actually they're quite small to

00:37:30,340 --> 00:37:34,300
be honest they're well known but they're

00:37:31,990 --> 00:37:36,640
actually the team there is like four or

00:37:34,300 --> 00:37:39,040
five people and they're very very good

00:37:36,640 --> 00:37:42,210
and they actually push us to make things

00:37:39,040 --> 00:37:45,490
a lot simpler which was interesting

00:37:42,210 --> 00:37:46,660
exceptional that's very unusual in large

00:37:45,490 --> 00:37:48,190
businesses of that good team but they

00:37:46,660 --> 00:37:50,380
were in fact a team that used to work at

00:37:48,190 --> 00:37:51,610
a small internet startup called

00:37:50,380 --> 00:37:53,530
MarketWatch which was bought and so

00:37:51,610 --> 00:37:55,780
they're very competent people it's

00:37:53,530 --> 00:37:58,060
unusual most big companies are filled

00:37:55,780 --> 00:38:00,490
with very incompetent people I don't

00:37:58,060 --> 00:38:03,150
want to be unkind but that's the truth

00:38:00,490 --> 00:38:06,030
and they don't they don't really want

00:38:03,150 --> 00:38:08,740
you know is the one things to be

00:38:06,030 --> 00:38:10,570
comfortably difficult you know native

00:38:08,740 --> 00:38:13,390
runs life in a certain way easy you know

00:38:10,570 --> 00:38:15,400
big budgets big projects not necessary

00:38:13,390 --> 00:38:17,230
so my goal is to really make this easy

00:38:15,400 --> 00:38:19,900
for people like me who are basically

00:38:17,230 --> 00:38:21,370
lazy I don't like having to be really

00:38:19,900 --> 00:38:22,690
concentrated to understand something I

00:38:21,370 --> 00:38:25,260
wanted to be simple to work

00:38:22,690 --> 00:38:27,610
automatically to be you know foolproof

00:38:25,260 --> 00:38:29,770
it's more fun and it's also part of the

00:38:27,610 --> 00:38:33,040
art if you make software that good that

00:38:29,770 --> 00:38:38,940
it works for anybody you know that's an

00:38:33,040 --> 00:38:38,940
achievement next question dieter

00:38:42,300 --> 00:38:52,090
right yeah so there are the volumes that

00:38:50,920 --> 00:38:53,470
we talked about so the volumes talk

00:38:52,090 --> 00:38:58,390
about the go for anything from one

00:38:53,470 --> 00:39:03,910
message a second up to five million

00:38:58,390 --> 00:39:06,040
messages a second that's the volumes you

00:39:03,910 --> 00:39:09,840
talk about in real life use that we see

00:39:06,040 --> 00:39:12,430
if you're doing a if you're picking

00:39:09,840 --> 00:39:13,750
stories from the BBC it's one per second

00:39:12,430 --> 00:39:17,500
if you're lucky if they're working

00:39:13,750 --> 00:39:19,660
really hard if you are processing orders

00:39:17,500 --> 00:39:25,150
on the Chicago options exchanges 5

00:39:19,660 --> 00:39:26,080
million per second so obviously there

00:39:25,150 --> 00:39:30,310
are trade-offs and different in

00:39:26,080 --> 00:39:34,420
different ways of doing things this guy

00:39:30,310 --> 00:39:37,000
here aims at that level so if you want

00:39:34,420 --> 00:39:38,080
to see how to make stuff very early if

00:39:37,000 --> 00:39:39,880
you want to see at make stuff that can

00:39:38,080 --> 00:39:42,540
process millions per second look at

00:39:39,880 --> 00:39:45,130
zeromq it takes a different approach

00:39:42,540 --> 00:39:46,330
there's no broker is basically as a

00:39:45,130 --> 00:39:48,430
library which you plug in your

00:39:46,330 --> 00:39:50,110
application and you're trapped occations

00:39:48,430 --> 00:39:51,310
very very very carefully because if you

00:39:50,110 --> 00:39:53,470
make mistakes applications it slows

00:39:51,310 --> 00:40:00,250
everything down and then the other end

00:39:53,470 --> 00:40:01,330
my breasts ms which i don't think it's

00:40:00,250 --> 00:40:03,280
one a second i think is probably about a

00:40:01,330 --> 00:40:05,980
hundred or 500 a second but it's very

00:40:03,280 --> 00:40:09,430
chatty or SMS and rest is very chatty

00:40:05,980 --> 00:40:11,200
it's get my message delete my message

00:40:09,430 --> 00:40:14,320
get my should treat my message one by

00:40:11,200 --> 00:40:15,970
one now you can bat so I'm not

00:40:14,320 --> 00:40:17,590
really worried about it if I 102nd I can

00:40:15,970 --> 00:40:19,630
make it ten thousand per second by

00:40:17,590 --> 00:40:22,330
batching messages which we do a lot also

00:40:19,630 --> 00:40:24,880
an amqp so the trick is you make it

00:40:22,330 --> 00:40:27,100
simple you make it work you find out

00:40:24,880 --> 00:40:29,830
where is too slow you make it better you

00:40:27,100 --> 00:40:31,270
don't start by making it fantastic start

00:40:29,830 --> 00:40:33,430
making it simple and making it work and

00:40:31,270 --> 00:40:38,500
then when people say look it's too slow

00:40:33,430 --> 00:40:41,710
for me make it better M cutie is

00:40:38,500 --> 00:40:46,740
somewhere here it can do something like

00:40:41,710 --> 00:40:49,130
100,000 to about 500,000 a second

00:40:46,740 --> 00:40:50,900
depending on the implementation

00:40:49,130 --> 00:41:04,009
which is more than anyone needs an

00:40:50,900 --> 00:41:10,670
outside of certain large companies you

00:41:04,009 --> 00:41:21,289
mean like choreography use the net

00:41:10,670 --> 00:41:23,680
voices sure I would say not my problem

00:41:21,289 --> 00:41:26,269
the thing is that we work in layers and

00:41:23,680 --> 00:41:28,970
this layer is about shoving blobs of

00:41:26,269 --> 00:41:31,009
data around the network between peers

00:41:28,970 --> 00:41:33,589
we're doing addressing we're doing

00:41:31,009 --> 00:41:35,089
queuing we're doing simple ap is we're

00:41:33,589 --> 00:41:37,369
doing simple patterns for reliability

00:41:35,089 --> 00:41:41,740
that's it on top of that you can build

00:41:37,369 --> 00:41:41,740
all kinds of services including right

00:41:42,789 --> 00:41:56,960
right know what's going to say was it'll

00:41:53,720 --> 00:41:59,410
come so when you have layers at work and

00:41:56,960 --> 00:42:01,759
our trusted people will build on that

00:41:59,410 --> 00:42:03,589
company like typical need to always

00:42:01,759 --> 00:42:05,450
raise the bar because they're selling

00:42:03,589 --> 00:42:06,950
stuff open source we don't care we can

00:42:05,450 --> 00:42:10,210
stay quite happily at one level make it

00:42:06,950 --> 00:42:12,829
better and better but it'll happen

00:42:10,210 --> 00:42:15,319
people using tibco will say well why am

00:42:12,829 --> 00:42:16,339
I paying you know 10,000 per core per

00:42:15,319 --> 00:42:23,569
year for this and I can make it myself

00:42:16,339 --> 00:42:26,340
top of open mq okay go make it at the

00:42:23,569 --> 00:42:35,850
back a question no at the front

00:42:26,340 --> 00:42:40,370
messaging solution no and there are many

00:42:35,850 --> 00:42:42,420
many messaging products many thousands

00:42:40,370 --> 00:42:45,000
but and there are many open-source

00:42:42,420 --> 00:42:47,580
products the trick is what are you

00:42:45,000 --> 00:43:00,060
actually buying and this is the this is

00:42:47,580 --> 00:43:09,600
the thing it is we have product we have

00:43:00,060 --> 00:43:13,140
api we have protocol and again you

00:43:09,600 --> 00:43:14,790
compared to SQL you can be buying oracle

00:43:13,140 --> 00:43:16,680
you're buying a product well if you're

00:43:14,790 --> 00:43:18,780
comparing oracle to sybase to informix

00:43:16,680 --> 00:43:20,220
you're not winning anything it is

00:43:18,780 --> 00:43:22,050
choosing which lock in you you know

00:43:20,220 --> 00:43:23,910
you're going to get now open source it's

00:43:22,050 --> 00:43:26,970
better but it's still a product you're

00:43:23,910 --> 00:43:28,620
still locked in ok you have api's api's

00:43:26,970 --> 00:43:29,700
are better but if you guys don't

00:43:28,620 --> 00:43:31,380
actually guarantee you very much because

00:43:29,700 --> 00:43:34,100
if you guys are always extended modified

00:43:31,380 --> 00:43:39,600
and changed odbc again a good example

00:43:34,100 --> 00:43:41,430
now so you want to standard SQL 92 this

00:43:39,600 --> 00:43:42,510
is the way I select statement works if

00:43:41,430 --> 00:43:43,800
you stick to that it's going to be

00:43:42,510 --> 00:43:47,550
portable and now you're suddenly you're

00:43:43,800 --> 00:43:49,470
free and now you can take Oracle put in

00:43:47,550 --> 00:43:52,200
mysql and if you start to that SQL

00:43:49,470 --> 00:43:53,730
statement it'll work so actually when

00:43:52,200 --> 00:43:56,580
you when you're by technology solutions

00:43:53,730 --> 00:43:59,570
if you're buying products you're just

00:43:56,580 --> 00:44:02,100
choosing a way to be locked in

00:43:59,570 --> 00:44:03,570
unfortunately api is it's better but

00:44:02,100 --> 00:44:05,490
it's still not enough this is the

00:44:03,570 --> 00:44:07,680
problem in Java is java's all api's you

00:44:05,490 --> 00:44:08,790
have JMS messaging it's an API and every

00:44:07,680 --> 00:44:09,870
single provider is different in all

00:44:08,790 --> 00:44:12,210
extended different ways so you're just

00:44:09,870 --> 00:44:17,999
choosing from kind of lock in so it's

00:44:12,210 --> 00:44:21,809
about standard sounds very important dds

00:44:17,999 --> 00:44:25,769
yes it's it's a it's a protocol its

00:44:21,809 --> 00:44:31,139
patented and it's not well documented

00:44:25,769 --> 00:44:34,849
and yeah okay what can i say i'm not a

00:44:31,139 --> 00:44:42,389
fan of dds not a fan of patents indeed

00:44:34,849 --> 00:44:45,749
how long do we have still did anyone get

00:44:42,389 --> 00:44:48,029
Wi-Fi working in the meantime no I mean

00:44:45,749 --> 00:44:54,569
did you get wise Wi-Fi working no sorry

00:44:48,029 --> 00:44:58,649
okay then you're in trouble now I'm just

00:44:54,569 --> 00:45:00,539
joking brokers fail there are different

00:44:58,649 --> 00:45:05,099
answer to that question the one I like

00:45:00,539 --> 00:45:06,269
best is the broker shouldn't fail and in

00:45:05,099 --> 00:45:08,219
fact we put our effort into making a

00:45:06,269 --> 00:45:09,809
broker that doesn't fail which is more

00:45:08,219 --> 00:45:11,489
fun than making a solution for when the

00:45:09,809 --> 00:45:13,729
broker does fail so it's like you know I

00:45:11,489 --> 00:45:16,259
have a car what happens if my car breaks

00:45:13,729 --> 00:45:18,899
well we'll do is we'll sell you two cars

00:45:16,259 --> 00:45:20,729
and then we'll drive behind you the

00:45:18,899 --> 00:45:22,169
second car all the time the first car

00:45:20,729 --> 00:45:25,349
breaks you jump in the second car your

00:45:22,169 --> 00:45:26,969
carry-on it's fantastic this is what

00:45:25,349 --> 00:45:28,499
they do I'm serious okay is this called

00:45:26,969 --> 00:45:29,609
it's called the backup broker and you

00:45:28,499 --> 00:45:31,499
actually have two brokers running and

00:45:29,609 --> 00:45:33,389
two big machines and the one is going

00:45:31,499 --> 00:45:34,889
route that one's braver and this one's

00:45:33,389 --> 00:45:36,439
died so then you switch off the backup

00:45:34,889 --> 00:45:40,199
broker and then you hope it all works

00:45:36,439 --> 00:45:42,029
now useless this is what enterprise

00:45:40,199 --> 00:45:48,299
likes but it's useless it's it's really

00:45:42,029 --> 00:45:53,129
a bad way of making rye ability yes

00:45:48,299 --> 00:45:55,409
machine could break down so backup

00:45:53,129 --> 00:45:56,369
machine possibly a good idea possibly

00:45:55,409 --> 00:45:57,749
two machines if you're worried about

00:45:56,369 --> 00:45:59,729
your machines but today machines don't

00:45:57,749 --> 00:46:01,619
break down anymore again machines are

00:45:59,729 --> 00:46:04,169
very reliable they have failsafe power

00:46:01,619 --> 00:46:07,079
supplies their failsafe disks okay your

00:46:04,169 --> 00:46:08,609
data center could burn down okay you're

00:46:07,079 --> 00:46:10,259
building could explode sure it could

00:46:08,609 --> 00:46:13,079
it's really a matter of how paranoid you

00:46:10,259 --> 00:46:15,659
are what we discovered in the end was

00:46:13,079 --> 00:46:17,819
that you can actually make a software

00:46:15,659 --> 00:46:20,849
completely not really reliable within

00:46:17,819 --> 00:46:22,199
the parameters of your application now

00:46:20,849 --> 00:46:26,369
you can always crash it doing different

00:46:22,199 --> 00:46:29,099
things we have stuff that runs day and

00:46:26,369 --> 00:46:31,049
night in company a and some are guy says

00:46:29,099 --> 00:46:31,480
look I dusan it dies like wow it's

00:46:31,049 --> 00:46:34,140
something new

00:46:31,480 --> 00:46:36,220
leaders so software is never reliable

00:46:34,140 --> 00:46:37,210
without limit but within the limit of

00:46:36,220 --> 00:46:39,010
particular environment it can be

00:46:37,210 --> 00:46:43,119
conscious competent reliable that point

00:46:39,010 --> 00:46:44,770
it never crashes and then after six

00:46:43,119 --> 00:46:46,810
months or a year the customer says well

00:46:44,770 --> 00:46:49,750
they never crashes and if it does crash

00:46:46,810 --> 00:46:51,520
it restarts really quickly and if you

00:46:49,750 --> 00:46:52,869
take an example like diode Jones they

00:46:51,520 --> 00:46:55,690
don't mind if it crashes in fact as long

00:46:52,869 --> 00:46:58,770
as they get the data back within one

00:46:55,690 --> 00:47:00,910
minute along as they get no duplicates

00:46:58,770 --> 00:47:03,100
they don't mind if they lose data in

00:47:00,910 --> 00:47:04,720
fact but they hate getting data twice

00:47:03,100 --> 00:47:06,250
imagine that the stock price of

00:47:04,720 --> 00:47:07,960
microsoft is going up and suddenly

00:47:06,250 --> 00:47:11,890
because my cup you know there would be

00:47:07,960 --> 00:47:13,780
crazy so a gap is fine data later in the

00:47:11,890 --> 00:47:14,710
wrong order or double is really bad so

00:47:13,780 --> 00:47:21,460
companies have all different

00:47:14,710 --> 00:47:23,619
requirements there are different answers

00:47:21,460 --> 00:47:26,010
to that question basically and my answer

00:47:23,619 --> 00:47:28,480
is make it really reliable and you know

00:47:26,010 --> 00:47:30,840
try not to make it crash try to stop it

00:47:28,480 --> 00:47:30,840
crashing

00:47:40,479 --> 00:47:45,859
yeah unfortunately we've been doing this

00:47:43,039 --> 00:47:47,269
for something like 15 years now Co

00:47:45,859 --> 00:47:49,489
generations we have our own tools for

00:47:47,269 --> 00:47:52,009
that we have code generators we have one

00:47:49,489 --> 00:47:53,239
called gsl I mean it gets really really

00:47:52,009 --> 00:47:55,819
complex I don't want to talk about it

00:47:53,239 --> 00:47:59,809
too much because it's this is not simple

00:47:55,819 --> 00:48:03,709
but it's a code generator we have

00:47:59,809 --> 00:48:05,989
frameworks bill trans men called xnf

00:48:03,709 --> 00:48:08,660
which is a again a modeling a modeling

00:48:05,989 --> 00:48:09,640
tool and if you look at I mattox calm

00:48:08,660 --> 00:48:13,459
you'll find some reference to this

00:48:09,640 --> 00:48:15,469
cogeneration is unfortunately very it's

00:48:13,459 --> 00:48:18,739
very leveraged so it gets very abstract

00:48:15,469 --> 00:48:19,910
very quickly and that's that's a bit of

00:48:18,739 --> 00:48:22,670
a shame it means that people don't

00:48:19,910 --> 00:48:25,609
understand what we do in fact when we

00:48:22,670 --> 00:48:27,229
write when we write software we we

00:48:25,609 --> 00:48:29,200
invent new languages metal languages

00:48:27,229 --> 00:48:31,279
modeling languages which describe

00:48:29,200 --> 00:48:33,229
protocols describe state machines

00:48:31,279 --> 00:48:35,569
described classes then we generate from

00:48:33,229 --> 00:48:37,219
that mean turn the generators it lets us

00:48:35,569 --> 00:48:38,719
work very quickly but also means if you

00:48:37,219 --> 00:48:40,279
look at the code you'll be like what the

00:48:38,719 --> 00:48:41,660
 this is impossibly complicated code

00:48:40,279 --> 00:48:44,359
the generated code is really really

00:48:41,660 --> 00:48:48,289
complex the the meta code is very

00:48:44,359 --> 00:48:50,299
abstract so it's a bit of a difficulty

00:48:48,289 --> 00:48:53,170
for for participation it does address

00:48:50,299 --> 00:48:55,880
right very good software very quickly no

00:48:53,170 --> 00:48:58,219
it's open source yes oh all open source

00:48:55,880 --> 00:49:02,289
it's all automatic code is GPL and

00:48:58,219 --> 00:49:02,289
although generated code is I think bsd

00:49:08,199 --> 00:49:16,160
okay hands up who hears for the next

00:49:10,309 --> 00:49:18,609
speech not my speech just to see okay

00:49:16,160 --> 00:49:18,609

YouTube URL: https://www.youtube.com/watch?v=bQgPArfbXm4


