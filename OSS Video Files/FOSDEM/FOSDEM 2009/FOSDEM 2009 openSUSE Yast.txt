Title: FOSDEM 2009 openSUSE Yast
Publication date: 2011-12-22
Playlist: FOSDEM 2009
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:04,430 --> 00:00:15,210
so a stick right okay it works so hello

00:00:12,090 --> 00:00:18,770
everybody nice to see you again thanks

00:00:15,210 --> 00:00:21,689
for being interested about you asked I

00:00:18,770 --> 00:00:25,050
can introduce myself my name is duncan

00:00:21,689 --> 00:00:28,529
mac beaker I work for Susie as a team

00:00:25,050 --> 00:00:31,230
lead for the US team in number yeah we

00:00:28,529 --> 00:00:33,420
are in charge of all the installation

00:00:31,230 --> 00:00:36,320
configuration modules and also quite a

00:00:33,420 --> 00:00:39,170
lot of bass libraries for the system

00:00:36,320 --> 00:00:42,300
what I want to share with you today is

00:00:39,170 --> 00:00:45,059
mostly what are we going what are we

00:00:42,300 --> 00:00:48,440
working out working on right now last

00:00:45,059 --> 00:00:51,989
year we added also presentation here and

00:00:48,440 --> 00:00:53,969
I share with you mostly improvements we

00:00:51,989 --> 00:00:56,239
did across the distributions we are

00:00:53,969 --> 00:00:58,559
going to do a quick review of of those

00:00:56,239 --> 00:01:00,239
in case you were not here last year and

00:00:58,559 --> 00:01:02,550
then I will show you what we are working

00:01:00,239 --> 00:01:07,619
on and let's see if you can get excited

00:01:02,550 --> 00:01:10,290
to also help us so the talk is mostly

00:01:07,619 --> 00:01:11,610
three parts I think you can ignore the

00:01:10,290 --> 00:01:15,470
timings there because I'm really bad

00:01:11,610 --> 00:01:19,020
with timing so I'm future it won't work

00:01:15,470 --> 00:01:21,780
I'm going to talk about where are we now

00:01:19,020 --> 00:01:26,400
what were the latest improvements in the

00:01:21,780 --> 00:01:28,080
development and then later so what were

00:01:26,400 --> 00:01:30,180
they what are the challenge and

00:01:28,080 --> 00:01:32,729
opportunities we have and what are we

00:01:30,180 --> 00:01:36,659
doing about that and then I will do a

00:01:32,729 --> 00:01:39,299
small demo about one small technology we

00:01:36,659 --> 00:01:43,130
plan to release I hope in the next

00:01:39,299 --> 00:01:50,240
version at least as a preview or first

00:01:43,130 --> 00:01:50,240
early version so where is just right now

00:01:50,630 --> 00:01:55,680
is the it's difficult to define just

00:01:53,340 --> 00:01:58,710
because it's not is a program it's also

00:01:55,680 --> 00:02:02,670
development environment is also a

00:01:58,710 --> 00:02:05,430
knowledge and is tied to almost every

00:02:02,670 --> 00:02:08,489
part of the distribution but today you

00:02:05,430 --> 00:02:11,220
have basically an environment where you

00:02:08,489 --> 00:02:13,680
can configure the system in almost any

00:02:11,220 --> 00:02:16,409
area not all the modules

00:02:13,680 --> 00:02:18,510
unknown by the people because quite a

00:02:16,409 --> 00:02:22,379
lot of them are shipped only for example

00:02:18,510 --> 00:02:24,060
first less while they are still open

00:02:22,379 --> 00:02:27,090
source and their cell is still in a

00:02:24,060 --> 00:02:31,379
repository not much users cares about

00:02:27,090 --> 00:02:33,870
that about them the areas we have

00:02:31,379 --> 00:02:38,370
include file sharing we can configure

00:02:33,870 --> 00:02:40,829
clients and server NFS samba I'm going

00:02:38,370 --> 00:02:44,189
to talk about a problem about for

00:02:40,829 --> 00:02:46,169
example these modules we have quite

00:02:44,189 --> 00:02:47,370
advanced partitioning that means we are

00:02:46,169 --> 00:02:49,379
able to partition the system and

00:02:47,370 --> 00:02:52,319
installation and also we provide a tool

00:02:49,379 --> 00:02:55,590
to do quite advanced partitioning with

00:02:52,319 --> 00:02:58,889
lvm cryptographic you can basically

00:02:55,590 --> 00:03:01,500
build your own stack storage with it we

00:02:58,889 --> 00:03:03,389
have of course really really important

00:03:01,500 --> 00:03:08,060
one of the most used task software

00:03:03,389 --> 00:03:10,500
management all the modules are

00:03:08,060 --> 00:03:12,599
integrated between them and that's what

00:03:10,500 --> 00:03:14,730
makes different approach Suzy has for

00:03:12,599 --> 00:03:16,379
configuration to what for example Fedora

00:03:14,730 --> 00:03:18,299
is doing I was just Audrina talked about

00:03:16,379 --> 00:03:20,729
the August project and they want to

00:03:18,299 --> 00:03:22,500
expose this service for configuration

00:03:20,729 --> 00:03:24,629
but they are exposing the configuration

00:03:22,500 --> 00:03:27,780
files to the applications that means you

00:03:24,629 --> 00:03:29,909
get the knowledge among all applications

00:03:27,780 --> 00:03:32,599
and doesn't knowledge just captures for

00:03:29,909 --> 00:03:34,949
example if you configure a web server

00:03:32,599 --> 00:03:37,199
the web server module will be called you

00:03:34,949 --> 00:03:39,269
will be asked to if you don't have the

00:03:37,199 --> 00:03:40,919
apache installed it will talk with the

00:03:39,269 --> 00:03:43,199
software module to actually get the

00:03:40,919 --> 00:03:44,909
package there first and once the Apaches

00:03:43,199 --> 00:03:48,000
configure it will talk with a security

00:03:44,909 --> 00:03:50,729
firewall module to open the port so you

00:03:48,000 --> 00:03:53,009
make sure that the port 80 is open so

00:03:50,729 --> 00:03:55,109
and that's quite important in Linux we

00:03:53,009 --> 00:03:56,519
can't see configuration as just let's

00:03:55,109 --> 00:03:57,689
open this configuration file and let's

00:03:56,519 --> 00:04:01,099
change the value because that usually

00:03:57,689 --> 00:04:03,449
doesn't work a part of that we have

00:04:01,099 --> 00:04:05,009
support to configure hardware this is

00:04:03,449 --> 00:04:09,090
actually becoming less important because

00:04:05,009 --> 00:04:10,859
in the latest time this like a commodity

00:04:09,090 --> 00:04:12,720
almost everything work out of the box

00:04:10,859 --> 00:04:15,930
things like Britney configuration is

00:04:12,720 --> 00:04:18,329
also not much needed anymore but there

00:04:15,930 --> 00:04:20,310
are stuff that needs also knowledge from

00:04:18,329 --> 00:04:22,500
different parts for example if you want

00:04:20,310 --> 00:04:25,200
to configure fingerprint scanner then

00:04:22,500 --> 00:04:26,669
yeah you need to set up the desktop

00:04:25,200 --> 00:04:27,180
environment so it actually uses the

00:04:26,669 --> 00:04:30,949
password

00:04:27,180 --> 00:04:34,139
or something with their fingers tire and

00:04:30,949 --> 00:04:36,660
we also got a new model this is new in

00:04:34,139 --> 00:04:38,130
the last release we had a nice overview

00:04:36,660 --> 00:04:40,710
of all the security so you don't need to

00:04:38,130 --> 00:04:42,060
know be a security expert yes can tell

00:04:40,710 --> 00:04:43,740
you more or less how secure is your

00:04:42,060 --> 00:04:46,919
system and what settings you can't

00:04:43,740 --> 00:04:49,500
change so that's where we are now here i

00:04:46,919 --> 00:04:51,060
put a special part of hell why this does

00:04:49,500 --> 00:04:53,460
important because we maintained so many

00:04:51,060 --> 00:04:55,590
modules a lot of model doesn't have much

00:04:53,460 --> 00:04:57,810
audience but they are for specific

00:04:55,590 --> 00:04:59,910
customers that need some solution in the

00:04:57,810 --> 00:05:01,349
case of heard wit we are we need more

00:04:59,910 --> 00:05:03,690
people involved with the use cases

00:05:01,349 --> 00:05:05,729
because some people campaign that is not

00:05:03,690 --> 00:05:07,500
very complete but we don't have actually

00:05:05,729 --> 00:05:09,270
the knowledge to say what kind of

00:05:07,500 --> 00:05:10,919
features the people using herb it needs

00:05:09,270 --> 00:05:13,789
so that's a nice project if you're

00:05:10,919 --> 00:05:17,759
interested in clustering and monitoring

00:05:13,789 --> 00:05:19,860
so what are the things we accomplished

00:05:17,759 --> 00:05:22,650
last year will be completed some

00:05:19,860 --> 00:05:24,660
magazine even said we we are like the

00:05:22,650 --> 00:05:27,210
most sexy installation and stuff like

00:05:24,660 --> 00:05:28,590
that and actually if you windows 7

00:05:27,210 --> 00:05:31,020
installation we are still pretty also

00:05:28,590 --> 00:05:33,120
the nice things here is that we are not

00:05:31,020 --> 00:05:35,460
pretty by default but you can if you are

00:05:33,120 --> 00:05:37,470
building appliances for example you can

00:05:35,460 --> 00:05:38,639
see Susan studio Sue's is going in a

00:05:37,470 --> 00:05:40,440
direction where you can build your own

00:05:38,639 --> 00:05:42,180
distribution and we make all so easy

00:05:40,440 --> 00:05:44,669
that if you want to set up your own

00:05:42,180 --> 00:05:50,039
branding here in installation is quite

00:05:44,669 --> 00:05:53,520
easy to do oh this is patients here says

00:05:50,039 --> 00:05:55,500
qt4 so it's quite standard statute you

00:05:53,520 --> 00:05:59,370
don't need to be a developer to change

00:05:55,500 --> 00:06:01,830
this we got a little bit simpler that

00:05:59,370 --> 00:06:03,810
means if you look at the installation

00:06:01,830 --> 00:06:05,970
this is the code 10 or the tenth series

00:06:03,810 --> 00:06:08,610
installation steps to get this revision

00:06:05,970 --> 00:06:11,759
installed and this is how the 11 looks

00:06:08,610 --> 00:06:16,320
like it was accomplished by different

00:06:11,759 --> 00:06:18,810
ways like mixing a lot of screens in one

00:06:16,320 --> 00:06:20,460
screen like you don't want to screen

00:06:18,810 --> 00:06:22,530
just to agree the license and then to

00:06:20,460 --> 00:06:24,509
select where you are and then to select

00:06:22,530 --> 00:06:27,000
what's your language you can just ask

00:06:24,509 --> 00:06:28,740
those in one screen but also a lot of

00:06:27,000 --> 00:06:32,400
the functionality was moved to the

00:06:28,740 --> 00:06:34,710
desktop like registering together an

00:06:32,400 --> 00:06:37,650
avid repository was really not something

00:06:34,710 --> 00:06:39,389
you it's you can discuss about this

00:06:37,650 --> 00:06:41,100
better to do the installation but we

00:06:39,389 --> 00:06:42,900
wanted to orgo us to get simp

00:06:41,100 --> 00:06:44,700
insulation so we move everything to the

00:06:42,900 --> 00:06:46,830
runtime the first time you log into the

00:06:44,700 --> 00:06:48,930
desktop the distribution will ask you a

00:06:46,830 --> 00:06:51,660
if you want update please click here

00:06:48,930 --> 00:06:57,750
open your browser and get the US open

00:06:51,660 --> 00:07:00,510
and reduce it you system also other

00:06:57,750 --> 00:07:02,070
things like what's mold was not there

00:07:00,510 --> 00:07:04,290
but smolt was also moved to the desktop

00:07:02,070 --> 00:07:07,700
so if you want to submit your hardware

00:07:04,290 --> 00:07:09,870
so to contribute to this small community

00:07:07,700 --> 00:07:11,100
the first time you log in you will ask

00:07:09,870 --> 00:07:12,810
if you want to continue to the small

00:07:11,100 --> 00:07:15,060
community and send your hyper profile

00:07:12,810 --> 00:07:16,800
which is quite important to for business

00:07:15,060 --> 00:07:20,700
actually to prioritize which drivers

00:07:16,800 --> 00:07:23,480
should we invest in we also got simpler

00:07:20,700 --> 00:07:27,290
not only bit installation but also doing

00:07:23,480 --> 00:07:30,330
modules that get permanently reviewed

00:07:27,290 --> 00:07:32,850
like I think the most important or case

00:07:30,330 --> 00:07:34,560
was the partitioner also some other

00:07:32,850 --> 00:07:37,620
modules are being continuously by

00:07:34,560 --> 00:07:39,390
usability people reviewed and and doing

00:07:37,620 --> 00:07:41,070
drastic redesigns in the case of the

00:07:39,390 --> 00:07:43,260
partitioner people liked the new

00:07:41,070 --> 00:07:46,320
redesign I think because the old one was

00:07:43,260 --> 00:07:47,280
not very not much love still we are not

00:07:46,320 --> 00:07:49,320
even perfect there are a lot of

00:07:47,280 --> 00:07:55,380
complaints about some small details but

00:07:49,320 --> 00:07:59,100
much more progress as the first ones and

00:07:55,380 --> 00:08:02,010
we got fast or worst nightmare from

00:07:59,100 --> 00:08:06,690
Colton was about speed and then we got

00:08:02,010 --> 00:08:08,940
fast and and I think 11 one was a stage

00:08:06,690 --> 00:08:10,530
of maturity of the package management we

00:08:08,940 --> 00:08:13,290
were fast already was nice to use and

00:08:10,530 --> 00:08:15,690
that allows us to focus not in basic

00:08:13,290 --> 00:08:17,820
things but on differentiations and

00:08:15,690 --> 00:08:20,520
that's the stage where we are now in 11

00:08:17,820 --> 00:08:22,380
1 we introduce a little bit of new

00:08:20,520 --> 00:08:25,290
infrastructure we were not able to

00:08:22,380 --> 00:08:27,180
finish all the final features actually

00:08:25,290 --> 00:08:30,150
present them to the user but it was

00:08:27,180 --> 00:08:31,860
we're going to release less 10 ss11 we

00:08:30,150 --> 00:08:33,630
had to put all infrastructure for

00:08:31,860 --> 00:08:35,849
product management other management and

00:08:33,630 --> 00:08:36,870
decide those things before so for

00:08:35,849 --> 00:08:38,910
opensuse is not that critical

00:08:36,870 --> 00:08:41,039
infrastructures there and now for 11 to

00:08:38,910 --> 00:08:45,900
we want to actually introduce some value

00:08:41,039 --> 00:08:47,610
in there they SAT solver also as was

00:08:45,900 --> 00:08:49,200
mentioned at the talk is not only used

00:08:47,610 --> 00:08:51,540
by leaf shape now but is also used in

00:08:49,200 --> 00:08:54,900
Susa studio so you switch the studio

00:08:51,540 --> 00:08:59,910
hansa like a real-time rest server that

00:08:54,900 --> 00:09:02,760
dependency resolution actually there was

00:08:59,910 --> 00:09:04,170
a kind of Fedora was also trying to do a

00:09:02,760 --> 00:09:06,750
project in the same direction called

00:09:04,170 --> 00:09:08,640
razor but it's really really underground

00:09:06,750 --> 00:09:10,860
because they also have this political

00:09:08,640 --> 00:09:12,870
problem that yam is official one so they

00:09:10,860 --> 00:09:15,210
have some break externally but they are

00:09:12,870 --> 00:09:17,670
I haven't seen much activity there it

00:09:15,210 --> 00:09:22,380
will be nice if they also will leverage

00:09:17,670 --> 00:09:23,730
this project as you can see the

00:09:22,380 --> 00:09:27,240
difference in some things like memory

00:09:23,730 --> 00:09:29,610
usage we are continuing a much better I

00:09:27,240 --> 00:09:30,780
don't put debian here to compare because

00:09:29,610 --> 00:09:32,460
the again is a complete different use

00:09:30,780 --> 00:09:34,530
case they they do dependency resolution

00:09:32,460 --> 00:09:36,060
a complete different way they depend on

00:09:34,530 --> 00:09:38,640
in packages they don't depend on binary

00:09:36,060 --> 00:09:41,670
libraries for example so if a package

00:09:38,640 --> 00:09:44,040
breaks the library provides indigent it

00:09:41,670 --> 00:09:45,060
will just break why and that the

00:09:44,040 --> 00:09:47,180
difference the problem you are solving

00:09:45,060 --> 00:09:48,810
is darian in solving thousand of

00:09:47,180 --> 00:09:51,030
dependencies while we are solving

00:09:48,810 --> 00:09:53,550
millions that's why it's better to

00:09:51,030 --> 00:09:56,690
compare with other rpms solution that

00:09:53,550 --> 00:09:56,690
are basically is having the same problem

00:09:57,890 --> 00:10:04,590
and we are integrated yes it's not a

00:10:01,470 --> 00:10:08,700
program but it's all actually a citizen

00:10:04,590 --> 00:10:11,370
of the distribution we are present from

00:10:08,700 --> 00:10:13,860
the moment you take a CD you use yes to

00:10:11,370 --> 00:10:16,440
install this vision your computer and

00:10:13,860 --> 00:10:20,130
from there you can create a profile to

00:10:16,440 --> 00:10:23,100
clone clone installation and use a

00:10:20,130 --> 00:10:25,650
normal web server and use out of us to

00:10:23,100 --> 00:10:27,980
and define profiles for every department

00:10:25,650 --> 00:10:31,460
or every son of your company and

00:10:27,980 --> 00:10:34,920
automatically install if these

00:10:31,460 --> 00:10:36,570
distribution in computers but even if

00:10:34,920 --> 00:10:38,460
you don't want to get the computer

00:10:36,570 --> 00:10:39,930
compete install and you will like people

00:10:38,460 --> 00:10:42,120
in not laptops for example to

00:10:39,930 --> 00:10:44,150
personalize some aspect of the out

00:10:42,120 --> 00:10:46,650
installation you can also use first boot

00:10:44,150 --> 00:10:49,530
to allow them in the first boot to set

00:10:46,650 --> 00:10:52,050
up more things opensuse has made

00:10:49,530 --> 00:10:53,810
enormous progress wait for example the

00:10:52,050 --> 00:10:57,450
build service now sushi studio also

00:10:53,810 --> 00:10:59,870
providing repositories and we also

00:10:57,450 --> 00:11:02,910
integrate somehow in this chain because

00:10:59,870 --> 00:11:05,340
novel customer center provides supported

00:11:02,910 --> 00:11:07,470
updates for enterprise product we are

00:11:05,340 --> 00:11:08,790
now nove listen T which is novel

00:11:07,470 --> 00:11:10,380
customer center as a proxy

00:11:08,790 --> 00:11:13,020
you can use inside your enterprise is

00:11:10,380 --> 00:11:17,000
also GPL it's not packaging up in suits

00:11:13,020 --> 00:11:20,070
I think but this GPL code also with and

00:11:17,000 --> 00:11:21,990
we allow with the gas producer also to

00:11:20,070 --> 00:11:26,190
take robusto from opensuse define

00:11:21,990 --> 00:11:28,890
products and get the updates back to the

00:11:26,190 --> 00:11:30,930
enterprise so we are not a program we

00:11:28,890 --> 00:11:35,100
are in every place and that's the

00:11:30,930 --> 00:11:39,410
complexity so what are the challenges

00:11:35,100 --> 00:11:49,590
and opportunities we have let me

00:11:39,410 --> 00:11:51,870
synchronize myself with my okay so there

00:11:49,590 --> 00:11:53,670
is really three kind of challenge one

00:11:51,870 --> 00:11:55,560
was we are introducing a lot of

00:11:53,670 --> 00:11:57,900
functionality in the basis and that is

00:11:55,560 --> 00:11:59,040
not visible user sometimes because as I

00:11:57,900 --> 00:12:00,420
say we have needs like we have to

00:11:59,040 --> 00:12:03,570
release less and this infrastructure has

00:12:00,420 --> 00:12:05,990
to be there some time is because the

00:12:03,570 --> 00:12:08,790
opensuse cycles are really short when

00:12:05,990 --> 00:12:12,300
the next release is coming and we have a

00:12:08,790 --> 00:12:16,830
lot of things to do and then the other

00:12:12,300 --> 00:12:18,510
challenge is a community we would like

00:12:16,830 --> 00:12:21,120
he has to be used as a platform for

00:12:18,510 --> 00:12:24,840
development people actually consuming

00:12:21,120 --> 00:12:27,420
and contributing to it also we would

00:12:24,840 --> 00:12:29,220
like to outsource everything that we

00:12:27,420 --> 00:12:31,890
don't want to focus on I mean a lot of

00:12:29,220 --> 00:12:33,660
modules we're really inside the team we

00:12:31,890 --> 00:12:35,820
don't have anyone interested in those

00:12:33,660 --> 00:12:37,650
modules because nobody i don't know i

00:12:35,820 --> 00:12:39,930
don't i don't have a mainframe in my

00:12:37,650 --> 00:12:41,250
office I we sell me if we sell

00:12:39,930 --> 00:12:43,380
mainframes configuration to other

00:12:41,250 --> 00:12:44,760
companies so we cool that actually the

00:12:43,380 --> 00:12:47,040
same people that use the mainframes

00:12:44,760 --> 00:12:48,660
contribute to us to add more expertise

00:12:47,040 --> 00:12:50,490
otherwise the features only come

00:12:48,660 --> 00:12:54,420
directly from the customers and nobody

00:12:50,490 --> 00:12:56,430
else so we need to enhance the community

00:12:54,420 --> 00:13:00,180
another topic is distributions to make

00:12:56,430 --> 00:13:04,170
us part citizen of also all other

00:13:00,180 --> 00:13:06,120
distributions we set a lot of rules like

00:13:04,170 --> 00:13:09,720
in the past especially in a package

00:13:06,120 --> 00:13:12,540
management area to leverage technologies

00:13:09,720 --> 00:13:16,170
used by others for example the patch if

00:13:12,540 --> 00:13:18,960
format is not the same as fedora uses we

00:13:16,170 --> 00:13:22,560
have package kit provider that works

00:13:18,960 --> 00:13:24,630
pretty well and this makes release is

00:13:22,560 --> 00:13:27,180
more straightforward to use the last

00:13:24,630 --> 00:13:29,520
pieces of us in our distributions but

00:13:27,180 --> 00:13:31,200
there is still a lot of problems because

00:13:29,520 --> 00:13:32,940
you have three stages where you I need

00:13:31,200 --> 00:13:35,820
to get the code built which is already

00:13:32,940 --> 00:13:37,380
hard I mean try to compile lip zip on on

00:13:35,820 --> 00:13:39,210
man trivia and they use a complete

00:13:37,380 --> 00:13:41,190
different rpm headers and it just

00:13:39,210 --> 00:13:43,680
doesn't build and we don't have the time

00:13:41,190 --> 00:13:44,970
to every time we do make in your system

00:13:43,680 --> 00:13:47,550
to actually test if you build Salmon

00:13:44,970 --> 00:13:49,860
River but we can solve that with some

00:13:47,550 --> 00:13:52,080
automation and quality assurance like we

00:13:49,860 --> 00:13:57,480
have for example now automated builds

00:13:52,080 --> 00:13:59,880
for the software stack and when when a

00:13:57,480 --> 00:14:01,950
developer makes a change in the code we

00:13:59,880 --> 00:14:03,450
automatically triggered a rebuild run

00:14:01,950 --> 00:14:04,980
the complete test case and if the test

00:14:03,450 --> 00:14:06,750
kid passed we create an hour p.m. and

00:14:04,980 --> 00:14:08,930
send it to the build service so in the

00:14:06,750 --> 00:14:11,460
build service the sheephead project has

00:14:08,930 --> 00:14:12,930
rpms that are from the latest chicken of

00:14:11,460 --> 00:14:15,180
a developer that didn't break anything

00:14:12,930 --> 00:14:17,190
that's good we think we can follow the

00:14:15,180 --> 00:14:20,730
same approach to integrate with other

00:14:17,190 --> 00:14:22,920
distributions once it builds you need to

00:14:20,730 --> 00:14:25,800
actually work that things work and ya

00:14:22,920 --> 00:14:27,420
still has a lot of code that assumes a

00:14:25,800 --> 00:14:29,010
lot of things about the system and you

00:14:27,420 --> 00:14:30,930
don't want to end in a position like web

00:14:29,010 --> 00:14:32,970
mean with that claims to support every

00:14:30,930 --> 00:14:38,310
distribution but nobody dares to try

00:14:32,970 --> 00:14:41,970
because it can break everything so one

00:14:38,310 --> 00:14:44,430
of the things we have to we can add

00:14:41,970 --> 00:14:46,470
value for example we introduce package

00:14:44,430 --> 00:14:48,300
history and this is a quite interesting

00:14:46,470 --> 00:14:51,210
feature because the infrastructure is

00:14:48,300 --> 00:14:53,040
really really simple yes lips it right

00:14:51,210 --> 00:14:54,630
the Easter II of everything that is

00:14:53,040 --> 00:14:57,990
happening to you system like installing

00:14:54,630 --> 00:14:59,550
packages removing and why is so

00:14:57,990 --> 00:15:02,330
important why you can just look at their

00:14:59,550 --> 00:15:07,200
p.m. database and see the timestamp

00:15:02,330 --> 00:15:08,520
because the infrastructure is there we

00:15:07,200 --> 00:15:10,080
are missing the viewer which is

00:15:08,520 --> 00:15:12,750
something probably general will

00:15:10,080 --> 00:15:17,370
implement for cheaper I'm not from me

00:15:12,750 --> 00:15:18,839
promising for you but will also get in

00:15:17,370 --> 00:15:20,640
the packet selector some kind of viewer

00:15:18,839 --> 00:15:26,270
to see what have you done to this system

00:15:20,640 --> 00:15:26,270
and oops sorry

00:15:27,430 --> 00:15:33,800
and also it's the first step to try to

00:15:31,460 --> 00:15:36,320
do a road back we have dreamed with well

00:15:33,800 --> 00:15:38,750
dug for ages it has been a feature that

00:15:36,320 --> 00:15:40,550
is every cycle over we want roll back

00:15:38,750 --> 00:15:43,940
we're going to try to approach it with

00:15:40,550 --> 00:15:45,560
realize that is really hard but then why

00:15:43,940 --> 00:15:48,200
try to solve the heart problem let's try

00:15:45,560 --> 00:15:50,420
to start with a simple one let's why not

00:15:48,200 --> 00:15:52,370
roll back the last packet you stall or

00:15:50,420 --> 00:15:55,580
the last installation last group of

00:15:52,370 --> 00:16:00,260
transactions you did so we are going to

00:15:55,580 --> 00:16:02,720
try that and also there is some feature

00:16:00,260 --> 00:16:04,490
which is called system cleanup you

00:16:02,720 --> 00:16:06,860
install things to try and especially

00:16:04,490 --> 00:16:09,140
Linux is just install install install

00:16:06,860 --> 00:16:10,580
and then you don't know what what is in

00:16:09,140 --> 00:16:14,720
there that actually you need what not

00:16:10,580 --> 00:16:16,460
and getting rid of things you don't need

00:16:14,720 --> 00:16:20,050
is basically looking all the packages

00:16:16,460 --> 00:16:22,790
that are not required by other packages

00:16:20,050 --> 00:16:24,560
which is called the lift packages but

00:16:22,790 --> 00:16:25,940
it's not true that every leaf packages

00:16:24,560 --> 00:16:28,340
and use because they are you can have a

00:16:25,940 --> 00:16:30,170
program that you install yourself so you

00:16:28,340 --> 00:16:32,390
need to know if actually you install the

00:16:30,170 --> 00:16:35,270
program or the program was triggered by

00:16:32,390 --> 00:16:36,890
as a requirement for other for other so

00:16:35,270 --> 00:16:39,410
that information is actually there when

00:16:36,890 --> 00:16:41,300
we write this lock we know that if what

00:16:39,410 --> 00:16:45,980
it was the user or if it was a soldier

00:16:41,300 --> 00:16:48,650
who triggered them the request so if

00:16:45,980 --> 00:16:51,320
Michael further thoughts / outdoor thus

00:16:48,650 --> 00:16:53,330
the algorithm he told he will do we

00:16:51,320 --> 00:16:55,460
couldn't we could fit disorder with this

00:16:53,330 --> 00:16:57,110
information and actually create some

00:16:55,460 --> 00:16:59,780
kind of algorithm to clean up the system

00:16:57,110 --> 00:17:01,520
that would be really really nice just in

00:16:59,780 --> 00:17:04,040
case the lock is now there is a simple

00:17:01,520 --> 00:17:06,319
text log so you can use it as a sysadmin

00:17:04,040 --> 00:17:08,060
to see what happened to you system all

00:17:06,319 --> 00:17:14,360
they also all the output of the scripts

00:17:08,060 --> 00:17:15,890
is there we will invest a little bit in

00:17:14,360 --> 00:17:19,010
the practitioner because we already

00:17:15,890 --> 00:17:22,310
starting missing it and is a the storage

00:17:19,010 --> 00:17:26,000
area is growing quite fast and people

00:17:22,310 --> 00:17:29,150
need to understand what the complex

00:17:26,000 --> 00:17:32,570
stack of how the storage system is built

00:17:29,150 --> 00:17:35,660
they need understanding easily so from

00:17:32,570 --> 00:17:38,510
the code from select students we will

00:17:35,660 --> 00:17:40,370
learn what will be the feedback of the

00:17:38,510 --> 00:17:43,040
customers about the new

00:17:40,370 --> 00:17:45,290
design we will work a little bit there

00:17:43,040 --> 00:17:48,710
especially with some less features using

00:17:45,290 --> 00:17:50,840
temp affairs probably extra for FS we oh

00:17:48,710 --> 00:17:52,610
we will be also that even if we don't

00:17:50,840 --> 00:17:54,440
have to do it it will be in even if we

00:17:52,610 --> 00:17:59,270
will need to do it at some point because

00:17:54,440 --> 00:18:02,000
everyone else will have it that's very

00:17:59,270 --> 00:18:05,240
sample how it looks at storage now in

00:18:02,000 --> 00:18:08,840
trunk which is already much nicer with

00:18:05,240 --> 00:18:11,870
all the difference icons for them for

00:18:08,840 --> 00:18:14,420
every kind of storage device and also

00:18:11,870 --> 00:18:17,450
some kind of overviews we are doing

00:18:14,420 --> 00:18:19,460
usability tests there with user ed

00:18:17,450 --> 00:18:21,110
equipment to follow the eyes of people

00:18:19,460 --> 00:18:23,120
how much they need to switch the eyes

00:18:21,110 --> 00:18:25,760
from here to here and try to adapt that

00:18:23,120 --> 00:18:28,730
is mostly I think the area where most

00:18:25,760 --> 00:18:29,990
investing in usability what about the

00:18:28,730 --> 00:18:36,080
community I present you the Yass

00:18:29,990 --> 00:18:39,350
community the current situation is

00:18:36,080 --> 00:18:42,740
actually not good they mailing list a

00:18:39,350 --> 00:18:44,510
lot of people participating it we have a

00:18:42,740 --> 00:18:47,620
lot of bug reporters I think that

00:18:44,510 --> 00:18:50,000
position is completely filled already

00:18:47,620 --> 00:18:52,280
and we have a couple of people that do

00:18:50,000 --> 00:18:54,110
pretty nice contributions like Benjamin

00:18:52,280 --> 00:18:57,050
Beverly men today one click install and

00:18:54,110 --> 00:18:59,330
other guys doing modules we have people

00:18:57,050 --> 00:19:01,640
contributing to the leap Yui which is

00:18:59,330 --> 00:19:04,550
you know that yes has this library can

00:19:01,640 --> 00:19:05,780
you do cutie and curses ttk and you can

00:19:04,550 --> 00:19:07,190
use that library in your software

00:19:05,780 --> 00:19:09,410
development if you need to do software

00:19:07,190 --> 00:19:11,300
without depending on us compete

00:19:09,410 --> 00:19:13,760
independent of just and we have some

00:19:11,300 --> 00:19:19,250
people using this library in the company

00:19:13,760 --> 00:19:22,940
to create multi multi you I software we

00:19:19,250 --> 00:19:26,950
need to grow that part and I think that

00:19:22,940 --> 00:19:29,390
can be can be done also moving just

00:19:26,950 --> 00:19:31,580
stopping thinking that opensuse is the

00:19:29,390 --> 00:19:33,590
world and moving us more to other

00:19:31,580 --> 00:19:35,179
distributions also then you will get

00:19:33,590 --> 00:19:37,790
people automatically be consequences is

00:19:35,179 --> 00:19:39,740
also not the biggest community out there

00:19:37,790 --> 00:19:41,990
I mean if you look at davion Ubuntu

00:19:39,740 --> 00:19:46,850
Fedora they are also quite big so if we

00:19:41,990 --> 00:19:48,550
move there we might get people and we

00:19:46,850 --> 00:19:53,360
need to actually lower the barrier

00:19:48,550 --> 00:19:54,140
because we can't expect people to help

00:19:53,360 --> 00:19:57,560
if they

00:19:54,140 --> 00:19:59,570
and if they need to learn I mean they

00:19:57,560 --> 00:20:00,830
are predict that people doesn't help you

00:19:59,570 --> 00:20:02,060
doesn't mean that you suffer is bad

00:20:00,830 --> 00:20:03,560
there are a lot of communities are they

00:20:02,060 --> 00:20:05,540
are including openoffice for example

00:20:03,560 --> 00:20:06,950
it's a great software but they also

00:20:05,540 --> 00:20:09,170
contain that they don't have developers

00:20:06,950 --> 00:20:10,970
try to build up an office you need a day

00:20:09,170 --> 00:20:13,160
if you want to learn how to just how to

00:20:10,970 --> 00:20:16,190
build it you want to do a change you

00:20:13,160 --> 00:20:18,440
need probably more time but if you look

00:20:16,190 --> 00:20:20,630
other projects like Firefox in Firefox

00:20:18,440 --> 00:20:22,310
you can create an extension in five

00:20:20,630 --> 00:20:24,860
minutes by reusing the same knowledge

00:20:22,310 --> 00:20:26,510
about HTML and JavaScript you have so

00:20:24,860 --> 00:20:28,750
they did really nice there I haven't

00:20:26,510 --> 00:20:31,850
seen for example as many extensions for

00:20:28,750 --> 00:20:34,190
Conqueror even if I am I KD developer I

00:20:31,850 --> 00:20:36,080
would prefer to use conquer but why do I

00:20:34,190 --> 00:20:38,930
need to learn all this stuff just to

00:20:36,080 --> 00:20:41,300
make extension this you are not that

00:20:38,930 --> 00:20:43,010
important to waste my time with that and

00:20:41,300 --> 00:20:46,610
we have to learn also that we are not so

00:20:43,010 --> 00:20:49,760
important to actually get all the people

00:20:46,610 --> 00:20:57,290
to learn or api's or ycp languages and

00:20:49,760 --> 00:21:00,320
so on so we are doing we need to open

00:20:57,290 --> 00:21:04,760
the last four other kind of knowledge

00:21:00,320 --> 00:21:06,680
out there and also help participation

00:21:04,760 --> 00:21:08,600
using the build service we moved some

00:21:06,680 --> 00:21:11,240
praise to the git repositories to allow

00:21:08,600 --> 00:21:15,200
easily cloning and forking over project

00:21:11,240 --> 00:21:17,210
let's see if that works and we need to

00:21:15,200 --> 00:21:21,020
reduce complexity I don't know if anyone

00:21:17,210 --> 00:21:22,790
has seen this complexity with all the

00:21:21,020 --> 00:21:25,250
build service repositories for us is a

00:21:22,790 --> 00:21:27,140
nightmare I mean we have repositories

00:21:25,250 --> 00:21:30,650
that build any kind of unstable and

00:21:27,140 --> 00:21:32,660
stable project on every architecture or

00:21:30,650 --> 00:21:34,760
Eddie distributions well the first the

00:21:32,660 --> 00:21:37,760
for example is actually fake I made it

00:21:34,760 --> 00:21:39,800
up but the second one is actually real

00:21:37,760 --> 00:21:42,140
there is a repository called level

00:21:39,800 --> 00:21:44,600
language Ruby extensions compiled for

00:21:42,140 --> 00:21:46,250
opensuse 11-1 built on top of the

00:21:44,600 --> 00:21:48,350
repository level language Ruby which is

00:21:46,250 --> 00:21:52,670
not the official Ruby that you find the

00:21:48,350 --> 00:21:54,050
distribution and if people that has to

00:21:52,670 --> 00:21:55,730
do long with users in long time they

00:21:54,050 --> 00:21:57,830
understand what that means and they can

00:21:55,730 --> 00:22:01,160
they can turn the distribution but other

00:21:57,830 --> 00:22:05,060
people don't and they just report backs

00:22:01,160 --> 00:22:07,160
like I have a user I got Katie for in

00:22:05,060 --> 00:22:07,879
with Suzie I don't like it i want the

00:22:07,160 --> 00:22:09,769
new one

00:22:07,879 --> 00:22:14,299
out there and I install it and it

00:22:09,769 --> 00:22:16,039
doesn't work so what was the problem it

00:22:14,299 --> 00:22:18,199
needs another repository to be added to

00:22:16,039 --> 00:22:19,819
fulfill dependencies but why do we need

00:22:18,199 --> 00:22:21,859
to waste time explaining that it should

00:22:19,819 --> 00:22:25,999
work out of the boat for that we can

00:22:21,859 --> 00:22:28,489
leverage some new infrastructure we have

00:22:25,999 --> 00:22:30,440
also seen the last version like yon

00:22:28,489 --> 00:22:35,079
explain it we have the sieve services

00:22:30,440 --> 00:22:41,899
cheap services i use how I'm with time

00:22:35,079 --> 00:22:44,269
okay we have is less uses that because

00:22:41,899 --> 00:22:47,239
it's less talk with a novel customer

00:22:44,269 --> 00:22:50,089
center and knows which customer has

00:22:47,239 --> 00:22:52,609
which products so when you add another

00:22:50,089 --> 00:22:55,669
epi depository in the enterprise Suzy it

00:22:52,609 --> 00:22:57,589
sends the the idea of the client and in

00:22:55,669 --> 00:22:59,269
the server side we know which customer

00:22:57,589 --> 00:23:01,849
is and which rapist he can use for

00:22:59,269 --> 00:23:03,619
updates so we send him a service totally

00:23:01,849 --> 00:23:05,359
customized from him that has a list of

00:23:03,619 --> 00:23:07,369
rebels that changes every time he

00:23:05,359 --> 00:23:09,229
refreshed this list and if we someday we

00:23:07,369 --> 00:23:11,149
want to merge two repos we can do it on

00:23:09,229 --> 00:23:13,159
the server side this can be using

00:23:11,149 --> 00:23:14,989
opensuse to Australia reduce a lot of

00:23:13,159 --> 00:23:16,579
complexity of repositories because the

00:23:14,989 --> 00:23:18,589
user also read interacting with the

00:23:16,579 --> 00:23:21,949
build service he has an account there he

00:23:18,589 --> 00:23:23,269
has a list of favorite repositories so

00:23:21,949 --> 00:23:25,459
he could put all this information in the

00:23:23,269 --> 00:23:28,099
server which already is and then the

00:23:25,459 --> 00:23:31,729
machine could just say other service URL

00:23:28,099 --> 00:23:33,440
from the build service that has a login

00:23:31,729 --> 00:23:35,539
of the user or something like that and

00:23:33,440 --> 00:23:38,809
also passes ahead of the distribution

00:23:35,539 --> 00:23:42,229
and get back all the reciprocal he needs

00:23:38,809 --> 00:23:45,589
even with dependencies then key if you

00:23:42,229 --> 00:23:47,779
want to go more risky and say I want one

00:23:45,589 --> 00:23:49,909
more level of instability he could just

00:23:47,779 --> 00:23:51,379
set it in his account and he could get

00:23:49,909 --> 00:23:55,549
back a different less of repose the next

00:23:51,379 --> 00:23:57,049
time and at least will also solve

00:23:55,549 --> 00:23:58,999
problems for example of this division

00:23:57,049 --> 00:24:01,039
operate right now we do this vision

00:23:58,999 --> 00:24:03,349
upgrade and we need to disable all the

00:24:01,039 --> 00:24:05,479
repositories and try to see which one

00:24:03,349 --> 00:24:08,209
will work in the next version and then

00:24:05,479 --> 00:24:09,469
readd them again after it's a mess we

00:24:08,209 --> 00:24:11,449
can solve with infrastructure we have

00:24:09,469 --> 00:24:14,149
now I'm not sure if this well if this

00:24:11,449 --> 00:24:15,919
one will be a priority for the next

00:24:14,149 --> 00:24:18,589
version but we will surely work on it

00:24:15,919 --> 00:24:21,440
later and then we have this problem i

00:24:18,589 --> 00:24:23,539
mean i'm pretty sure more than

00:24:21,440 --> 00:24:28,759
one of you had this problem with trying

00:24:23,539 --> 00:24:30,409
to operate of inclusive the problem is a

00:24:28,759 --> 00:24:33,110
different community to actually get

00:24:30,409 --> 00:24:35,960
involved they need to easily follow the

00:24:33,110 --> 00:24:37,759
follow the distribution in the latest

00:24:35,960 --> 00:24:39,649
state and if he's frustrating they just

00:24:37,759 --> 00:24:41,750
will say or in debian everything works

00:24:39,649 --> 00:24:43,039
and i will go to stu darien actually

00:24:41,750 --> 00:24:48,860
intervene doesn't work i have used alien

00:24:43,039 --> 00:24:53,049
but we can still make it easy there are

00:24:48,860 --> 00:24:56,659
a lot of reasons why this doesn't work

00:24:53,049 --> 00:24:58,639
one of the reason is of course as Peter

00:24:56,659 --> 00:25:01,100
mentioned in his talk before not

00:24:58,639 --> 00:25:03,590
everybody has ADD connectivity that

00:25:01,100 --> 00:25:06,139
allows you to download the terabytes we

00:25:03,590 --> 00:25:09,019
mentioned before so we are working on

00:25:06,139 --> 00:25:11,059
this right now and it will be proposed

00:25:09,019 --> 00:25:14,059
sure in the next version which is

00:25:11,059 --> 00:25:16,820
leveraging the mirror brain we have in

00:25:14,059 --> 00:25:20,210
opensuse and we are going to switch lips

00:25:16,820 --> 00:25:22,159
tip to stop using kurla it stupid HTTP

00:25:20,210 --> 00:25:24,950
client to use area which actually

00:25:22,159 --> 00:25:26,570
understand these metal links can record

00:25:24,950 --> 00:25:28,070
information about how was your

00:25:26,570 --> 00:25:30,799
connections using the path so this

00:25:28,070 --> 00:25:33,710
mirror was faster and can then reload

00:25:30,799 --> 00:25:35,750
these these rankings of viewers and

00:25:33,710 --> 00:25:38,480
reuse them again combine it with the

00:25:35,750 --> 00:25:40,730
rankings the mirror brain suggest and so

00:25:38,480 --> 00:25:43,340
on always download the most efficient

00:25:40,730 --> 00:25:45,230
things also if it fails it doesn't tell

00:25:43,340 --> 00:25:47,570
you merely this failed presscon

00:25:45,230 --> 00:25:50,649
cancelcontinue but he will try a little

00:25:47,570 --> 00:25:54,769
bit harder to get the stuff down so

00:25:50,649 --> 00:25:57,080
that's one of the things that can make a

00:25:54,769 --> 00:26:00,620
better experience for people and the

00:25:57,080 --> 00:26:02,840
next things are factory has been pushed

00:26:00,620 --> 00:26:04,789
less rpms if your PM doesn't change it

00:26:02,840 --> 00:26:07,129
doesn't make any sense to send out an

00:26:04,789 --> 00:26:08,809
RPM with a time stamp by the same

00:26:07,129 --> 00:26:10,039
content and this is mostly done it was

00:26:08,809 --> 00:26:13,220
not done in last week you can see the

00:26:10,039 --> 00:26:14,929
blocks out there we could use delta p.m.

00:26:13,220 --> 00:26:17,779
seen factory and that's part of

00:26:14,929 --> 00:26:19,669
infrastructure we have since 11 0 you

00:26:17,779 --> 00:26:21,529
can use steldor kim's in any repository

00:26:19,669 --> 00:26:23,779
even if you don't have patches in that

00:26:21,529 --> 00:26:26,389
repository and we could use that for

00:26:23,779 --> 00:26:28,490
delta at least from the latest factory

00:26:26,389 --> 00:26:30,649
state we could offer Delta's for the

00:26:28,490 --> 00:26:33,590
people and this thing we are also

00:26:30,649 --> 00:26:35,280
working on right now which is change the

00:26:33,590 --> 00:26:37,680
commit policy of leaf subpoena mark

00:26:35,280 --> 00:26:40,080
flexible way you're installing is fine

00:26:37,680 --> 00:26:42,090
to download one rpm install it down

00:26:40,080 --> 00:26:43,800
download one RPM and install it if you

00:26:42,090 --> 00:26:45,990
are doing like this upgrade maybe you

00:26:43,800 --> 00:26:47,730
want first to get all their pms and then

00:26:45,990 --> 00:26:50,130
start because it fails in the middle or

00:26:47,730 --> 00:26:53,400
if you are in some place where you don't

00:26:50,130 --> 00:26:54,960
have a good connectivity or something

00:26:53,400 --> 00:26:57,780
you can basically scrub your machine and

00:26:54,960 --> 00:27:00,960
then you are this is for sure coming for

00:26:57,780 --> 00:27:02,610
the next one we also have bargain I'm

00:27:00,960 --> 00:27:06,750
going to be a little faster so i can

00:27:02,610 --> 00:27:08,340
show you the demo of the next part Bagon

00:27:06,750 --> 00:27:10,230
is a tool to do the leafs upgrade the

00:27:08,340 --> 00:27:12,810
same same as the same thing as super at

00:27:10,230 --> 00:27:14,670
this upgrade but in graphically ask and

00:27:12,810 --> 00:27:17,340
it will be used also in this less for

00:27:14,670 --> 00:27:19,440
doing the migration from one is to the

00:27:17,340 --> 00:27:24,030
next service pack it's basically this

00:27:19,440 --> 00:27:28,920
upgrade in a graphical way and then it's

00:27:24,030 --> 00:27:32,190
the old a yes use cases we have yes

00:27:28,920 --> 00:27:34,890
folks people want to use a yes insanity

00:27:32,190 --> 00:27:36,210
from lot of different scenarios and

00:27:34,890 --> 00:27:39,030
that's what we are trying to find a

00:27:36,210 --> 00:27:41,850
common way for developers to use just we

00:27:39,030 --> 00:27:45,960
have for example the d-bus desktop evil

00:27:41,850 --> 00:27:47,550
example and that this example of the

00:27:45,960 --> 00:27:49,440
samba sharing if you want to share a

00:27:47,550 --> 00:27:51,590
folder with the network what do you

00:27:49,440 --> 00:27:54,810
where do you expect to find the

00:27:51,590 --> 00:27:56,850
functionality that says in a share this

00:27:54,810 --> 00:27:59,060
folder you expect us to right-click on

00:27:56,850 --> 00:28:01,860
the folder and find share this folder

00:27:59,060 --> 00:28:03,990
but nobody respects to open you asked as

00:28:01,860 --> 00:28:07,050
root and then go to samba client and

00:28:03,990 --> 00:28:08,940
other share folder so that's the use

00:28:07,050 --> 00:28:10,710
case we work we are trying to enable for

00:28:08,940 --> 00:28:12,780
the desktop people which is basically

00:28:10,710 --> 00:28:16,550
provides some functionality like sharing

00:28:12,780 --> 00:28:19,590
a folder or open a file port beardy bus

00:28:16,550 --> 00:28:23,910
you can see similar interfaces like

00:28:19,590 --> 00:28:25,650
package kit for example in the

00:28:23,910 --> 00:28:27,210
enterprise we have different

00:28:25,650 --> 00:28:31,250
requirements people want to talk with

00:28:27,210 --> 00:28:35,250
gas bill sim anybody knows what tim is

00:28:31,250 --> 00:28:38,550
ok if who doesn't have heard about it

00:28:35,250 --> 00:28:40,290
you don't need to know about it but it's

00:28:38,550 --> 00:28:43,160
a really complex enterprise language

00:28:40,290 --> 00:28:46,950
which is used by some really proprietary

00:28:43,160 --> 00:28:49,140
stuff storage they claim to be open but

00:28:46,950 --> 00:28:51,150
it's a committee design technology

00:28:49,140 --> 00:28:52,860
we need to support it and we have to use

00:28:51,150 --> 00:28:55,980
they have the use cases for them and we

00:28:52,860 --> 00:28:58,230
will support it so what do we have in

00:28:55,980 --> 00:29:00,810
common if you want to you people as

00:28:58,230 --> 00:29:02,820
developers to help us what do you know

00:29:00,810 --> 00:29:06,510
that everybody actually knows anybody

00:29:02,820 --> 00:29:12,870
has a hint I mentioned the five for

00:29:06,510 --> 00:29:14,480
example before I think the only way that

00:29:12,870 --> 00:29:17,520
we could talk in common when developing

00:29:14,480 --> 00:29:20,070
is actually the web is the only thing

00:29:17,520 --> 00:29:22,890
everyone knows every language we have

00:29:20,070 --> 00:29:25,620
out there knows how to use HTTP almost

00:29:22,890 --> 00:29:29,250
every people can write HTML or some

00:29:25,620 --> 00:29:30,990
JavaScript and not everyone wants to get

00:29:29,250 --> 00:29:33,090
involved in just in the deeps inside of

00:29:30,990 --> 00:29:34,680
us some people just want to make a cool

00:29:33,090 --> 00:29:37,290
program that uses you have to do some

00:29:34,680 --> 00:29:38,640
proofing so that's something we are

00:29:37,290 --> 00:29:41,430
working on there is already a prototype

00:29:38,640 --> 00:29:44,100
is a last web service it runs in the

00:29:41,430 --> 00:29:45,540
system provides a rest style API the

00:29:44,100 --> 00:29:49,260
same kind of API you find on Twitter

00:29:45,540 --> 00:29:55,230
Flickr and all these nice website that

00:29:49,260 --> 00:29:56,910
will be bankrupt in one year this

00:29:55,230 --> 00:29:59,190
running your system as a normal user

00:29:56,910 --> 00:30:02,280
doesn't require root and uses palm and

00:29:59,190 --> 00:30:05,160
policy kit to actually you can set up

00:30:02,280 --> 00:30:08,670
different access right for different

00:30:05,160 --> 00:30:10,830
tasks and it also uses packet kit for

00:30:08,670 --> 00:30:14,220
the software management and using some

00:30:10,830 --> 00:30:18,420
other yes functionality using the ACR of

00:30:14,220 --> 00:30:20,850
just as a d bus service this allows you

00:30:18,420 --> 00:30:24,110
basically to configure yes using curl if

00:30:20,850 --> 00:30:27,720
you want i will show a small example and

00:30:24,110 --> 00:30:31,020
also we are working in a web UI that is

00:30:27,720 --> 00:30:32,670
a radius application this template is we

00:30:31,020 --> 00:30:35,070
look in google for free templates and

00:30:32,670 --> 00:30:38,310
that's why we got so if you want to help

00:30:35,070 --> 00:30:40,170
us to create a nice UI you are welcome

00:30:38,310 --> 00:30:41,820
this is not something finished we wanted

00:30:40,170 --> 00:30:44,490
to show that we could write this all

00:30:41,820 --> 00:30:49,140
these functionality with 600 line of

00:30:44,490 --> 00:30:51,060
code and that's what it has so that

00:30:49,140 --> 00:30:54,720
sorts today g for the next versions we

00:30:51,060 --> 00:30:57,510
want to provide for all the people to

00:30:54,720 --> 00:31:00,390
have different requirements we are using

00:30:57,510 --> 00:31:01,800
all think those technologies access to

00:31:00,390 --> 00:31:02,880
the use cases and i think the most

00:31:01,800 --> 00:31:05,090
important for us

00:31:02,880 --> 00:31:08,280
will be the web in the next time to

00:31:05,090 --> 00:31:09,510
leverage the same success other tools

00:31:08,280 --> 00:31:12,330
shot for example the bin service

00:31:09,510 --> 00:31:15,360
providing rest api is you know the OSC

00:31:12,330 --> 00:31:17,850
client and all those tools so let's see

00:31:15,360 --> 00:31:21,450
if week we are of course wanting help

00:31:17,850 --> 00:31:24,300
any people with web skills can also help

00:31:21,450 --> 00:31:26,670
us now and you all the code is in the

00:31:24,300 --> 00:31:29,670
git repository i'm going to show a small

00:31:26,670 --> 00:31:38,010
demo how this works if still have the

00:31:29,670 --> 00:31:39,240
time so if you pop the yes Rep savage

00:31:38,010 --> 00:31:42,000
inside and running you just go to

00:31:39,240 --> 00:31:43,860
localhost and this port and you find the

00:31:42,000 --> 00:31:46,560
documentation it shows all the modules

00:31:43,860 --> 00:31:48,840
that are available and you have some

00:31:46,560 --> 00:31:51,690
documentation about how you can

00:31:48,840 --> 00:31:53,460
configure it how you can log in you can

00:31:51,690 --> 00:31:55,140
login using a normal account of the

00:31:53,460 --> 00:31:56,850
system normally you will use root

00:31:55,140 --> 00:31:59,520
because it does all the power but if you

00:31:56,850 --> 00:32:01,980
want to use your own account you only

00:31:59,520 --> 00:32:03,270
need to set up some political rights if

00:32:01,980 --> 00:32:07,050
you want to allow some tests to be done

00:32:03,270 --> 00:32:08,850
it uses ssl to protect the logging I

00:32:07,050 --> 00:32:14,790
don't have SSL configure so we'll just

00:32:08,850 --> 00:32:17,550
do our normal HTTP authentication so for

00:32:14,790 --> 00:32:22,680
example the logging request I will show

00:32:17,550 --> 00:32:27,420
they've this is how a login request

00:32:22,680 --> 00:32:28,980
looks like you need to pass this I'm not

00:32:27,420 --> 00:32:34,650
going to pass the false one because this

00:32:28,980 --> 00:32:40,290
is not my password but so let me find

00:32:34,650 --> 00:32:44,910
the right yeah so this will be how I can

00:32:40,290 --> 00:32:49,170
do a curl post request to the local

00:32:44,910 --> 00:32:51,480
server and I'm passing their the XML you

00:32:49,170 --> 00:32:55,590
saw before with my password if you do

00:32:51,480 --> 00:33:00,180
this just will try to create a cookie

00:32:55,590 --> 00:33:03,060
with political and will give me back all

00:33:00,180 --> 00:33:09,750
the vacation talking in a cookie and

00:33:03,060 --> 00:33:12,890
then i can i can use this cookie for

00:33:09,750 --> 00:33:12,890
example let's show

00:33:14,740 --> 00:33:20,380
if we post this to the user name space

00:33:18,460 --> 00:33:21,970
of HTTP we can create a new user for

00:33:20,380 --> 00:33:29,260
example I will show you that I don't

00:33:21,970 --> 00:33:36,130
have a tux to user in etc password there

00:33:29,260 --> 00:33:38,620
is nobody and if everything right news

00:33:36,130 --> 00:33:40,600
user so if i pay this and i passed the

00:33:38,620 --> 00:33:50,890
same cookie i got before i'm passing the

00:33:40,600 --> 00:33:52,630
cookie there that's identification don't

00:33:50,890 --> 00:33:54,040
worry about the speed because of course

00:33:52,630 --> 00:33:55,929
is a prototype right now we are using

00:33:54,040 --> 00:34:00,730
race without even with a database to you

00:33:55,929 --> 00:34:02,080
to get use of some XML functions but we

00:34:00,730 --> 00:34:06,100
are working on our much faster

00:34:02,080 --> 00:34:08,139
implementation usually the post requests

00:34:06,100 --> 00:34:14,590
are quite slow they get requests are

00:34:08,139 --> 00:34:20,859
quite fast so we did we got any we got I

00:34:14,590 --> 00:34:23,800
think everything ok so now there is a

00:34:20,859 --> 00:34:26,230
new user for example and you can do user

00:34:23,800 --> 00:34:27,790
normal user this will be cool when for

00:34:26,230 --> 00:34:29,800
example Susan studio could configure an

00:34:27,790 --> 00:34:31,510
appliance without even using their own

00:34:29,800 --> 00:34:33,340
UI or you could write command line

00:34:31,510 --> 00:34:34,990
client so that's the presentation and

00:34:33,340 --> 00:34:38,100
now let's use the five minutes for some

00:34:34,990 --> 00:34:38,100
questions thank

00:34:49,829 --> 00:35:01,990
sorry sir how how mature is that this

00:34:58,000 --> 00:35:04,630
right how much is a web client hole how

00:35:01,990 --> 00:35:08,079
long do you think it will take to to be

00:35:04,630 --> 00:35:09,339
stable okay I do I have the novel

00:35:08,079 --> 00:35:11,380
disclaimer here because everything I

00:35:09,339 --> 00:35:17,290
said is not scheduled promise we are

00:35:11,380 --> 00:35:19,470
targeting it for the 11-2 and sp1 ups

00:35:17,290 --> 00:35:22,780
less as a preview technology preview

00:35:19,470 --> 00:35:26,079
that means from till that moment the API

00:35:22,780 --> 00:35:28,119
will probably change a lot but after

00:35:26,079 --> 00:35:29,410
that we will at least release system

00:35:28,119 --> 00:35:33,190
time configuration language

00:35:29,410 --> 00:35:34,329
configuration patch management and what

00:35:33,190 --> 00:35:41,170
else you here you can see all the

00:35:34,329 --> 00:35:43,780
modules all those modules will be

00:35:41,170 --> 00:35:46,180
probably the next version users

00:35:43,780 --> 00:35:49,300
permissions patches language system time

00:35:46,180 --> 00:35:51,250
service enable and disabling and logging

00:35:49,300 --> 00:35:54,460
of course we are going to focus in the

00:35:51,250 --> 00:35:56,349
small things appliance need and then we

00:35:54,460 --> 00:35:58,480
will we will not probably develop audio

00:35:56,349 --> 00:36:03,839
configuration played in a long time it's

00:35:58,480 --> 00:36:09,400
not our priority I have just a question

00:36:03,839 --> 00:36:11,980
this ways of sort of web front could be

00:36:09,400 --> 00:36:16,119
the base for a future remote automated

00:36:11,980 --> 00:36:18,099
management that's a year that once you

00:36:16,119 --> 00:36:19,780
have a rest interval from one system you

00:36:18,099 --> 00:36:21,910
can create another rest interface that

00:36:19,780 --> 00:36:24,460
actually talks to a lot of systems which

00:36:21,910 --> 00:36:26,140
is the same that seemed aims to but the

00:36:24,460 --> 00:36:29,500
only thing is that everyone here is pigs

00:36:26,140 --> 00:36:30,940
web bo buddies pig seems here right my

00:36:29,500 --> 00:36:33,040
question my next question was that one

00:36:30,940 --> 00:36:36,190
because I I knew that sim tries to do

00:36:33,040 --> 00:36:40,079
some sort of like this and my next

00:36:36,190 --> 00:36:43,030
question was if I you are starting a

00:36:40,079 --> 00:36:46,480
alternate way for non-corporate user so

00:36:43,030 --> 00:36:49,390
i would say let's see how much a succeed

00:36:46,480 --> 00:36:51,730
with success we have with with the first

00:36:49,390 --> 00:36:55,900
version and maybe it becomes a standard

00:36:51,730 --> 00:36:58,569
by default as linux management a cheap

00:36:55,900 --> 00:37:00,099
way to do it we are not competing

00:36:58,569 --> 00:37:01,690
against in because we also support team

00:37:00,099 --> 00:37:02,150
we are writing providers for storage and

00:37:01,690 --> 00:37:04,549
suffer

00:37:02,150 --> 00:37:07,039
judgment but this is for the community

00:37:04,549 --> 00:37:10,099
we want everyone to be able to configure

00:37:07,039 --> 00:37:15,410
the system not only experts basically

00:37:10,099 --> 00:37:17,450
all right action if we I only have one

00:37:15,410 --> 00:37:19,460
minute left so I can answer one more

00:37:17,450 --> 00:37:20,720
question and then someone has any

00:37:19,460 --> 00:37:24,529
questions you can reach me at the booth

00:37:20,720 --> 00:37:26,859
outside well ok I'm going to ask you

00:37:24,529 --> 00:37:29,630
something about the package management

00:37:26,859 --> 00:37:33,529
you said something about implementing

00:37:29,630 --> 00:37:36,140
cleanup functionality that would enable

00:37:33,529 --> 00:37:40,549
the user to to get rid of leaf nodes he

00:37:36,140 --> 00:37:42,020
doesn't need I think I don't think I get

00:37:40,549 --> 00:37:43,760
the question yeah I said about

00:37:42,020 --> 00:37:45,619
implemented functionality in the packet

00:37:43,760 --> 00:37:47,720
McLean a functionary yeah we have the

00:37:45,619 --> 00:37:51,440
enable users to together get rid of

00:37:47,720 --> 00:37:53,839
leaves he doesn't need the information

00:37:51,440 --> 00:37:57,619
whether a package was installed by the

00:37:53,839 --> 00:38:03,799
user or it was installed to satisfy

00:37:57,619 --> 00:38:07,250
dependency will be kept in some logs how

00:38:03,799 --> 00:38:12,849
about if I if I write my own program to

00:38:07,250 --> 00:38:16,640
to install rpms it wouldn't be able to

00:38:12,849 --> 00:38:19,400
to to use the I mean wouldn't it be

00:38:16,640 --> 00:38:22,190
better to this information to be to be

00:38:19,400 --> 00:38:27,410
in the very RPM database so that any

00:38:22,190 --> 00:38:29,839
tool could use it and not in the logs ok

00:38:27,410 --> 00:38:32,450
ready but I understand your question the

00:38:29,839 --> 00:38:34,520
the c-block of the household information

00:38:32,450 --> 00:38:35,900
for programs going through lipsett if

00:38:34,520 --> 00:38:37,700
you use another program that just color

00:38:35,900 --> 00:38:38,990
p.m. or you use our user p.m. in a

00:38:37,700 --> 00:38:40,760
comment line we don't have the

00:38:38,990 --> 00:38:43,430
information going to the log that's true

00:38:40,760 --> 00:38:45,380
we discuss about using the RPN database

00:38:43,430 --> 00:38:47,750
but the problem is that the RPM projects

00:38:45,380 --> 00:38:50,839
in a really strange situation they have

00:38:47,750 --> 00:38:52,250
like two forks conflicting people the

00:38:50,839 --> 00:38:54,260
main developers of someone and people

00:38:52,250 --> 00:38:57,559
that is not famous to be nice and so on

00:38:54,260 --> 00:39:00,710
so too short to answer if Ron you

00:38:57,559 --> 00:39:03,049
install a program with RPM we we

00:39:00,710 --> 00:39:04,460
actually realize that but we assume that

00:39:03,049 --> 00:39:06,559
that program was installed by the user

00:39:04,460 --> 00:39:08,510
that which actually you too because in

00:39:06,559 --> 00:39:13,369
rpm you cannot get the program installed

00:39:08,510 --> 00:39:17,799
by dependencies okay the time is over

00:39:13,369 --> 00:39:17,799

YouTube URL: https://www.youtube.com/watch?v=YiW1bOlFzdQ


