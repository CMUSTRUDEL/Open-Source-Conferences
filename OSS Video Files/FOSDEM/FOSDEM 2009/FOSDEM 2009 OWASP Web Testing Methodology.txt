Title: FOSDEM 2009 OWASP Web Testing Methodology
Publication date: 2011-12-22
Playlist: FOSDEM 2009
Description: 
	The speech goal is to show the OWASP testing methodology and how you can implement a software development lifecycle that permit to develop more secure applications.

The Open Web Application Security Project (OWASP) wants to deliver free tools and documentation for the Web Application Security. The talk will present the new OWASP Testing Guide v3 that includes a "best practice" penetration testing framework which users can implement in their own organizations and a "low level" penetration testing guide that describes techniques for testing most common web application and web service security issues. OWASP Testing Guide v3 is a 349 page book; we have split the set of active tests in 9 sub-categories for a total of 66 controls to test during the Web Application Testing activity.

FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:06,770 --> 00:00:14,830
okay good morning i'ma tell me who chief

00:00:10,070 --> 00:00:14,830
Rojas planned thank you for

00:00:15,210 --> 00:00:22,619
it's my first time here in phos them and

00:00:17,900 --> 00:00:25,230
I think it's a congratulation for your

00:00:22,619 --> 00:00:27,960
university because it's very nice and I

00:00:25,230 --> 00:00:33,329
would like to study here but I studied

00:00:27,960 --> 00:00:36,480
in Italy in Bologna so this is the

00:00:33,329 --> 00:00:40,440
agenda I would like to introduce you the

00:00:36,480 --> 00:00:43,590
OVAs project and the new August testing

00:00:40,440 --> 00:00:47,910
guide that is a methodology to test the

00:00:43,590 --> 00:00:49,530
security of a web application so I

00:00:47,910 --> 00:00:53,670
introduce how to test a web application

00:00:49,530 --> 00:00:56,160
a short introduction and then i would

00:00:53,670 --> 00:00:58,859
like to introduce our improved software

00:00:56,160 --> 00:01:02,039
security in yours software development

00:00:58,859 --> 00:01:07,890
lifecycle and then a question and out

00:01:02,039 --> 00:01:11,190
answers ok two words about me i found

00:01:07,890 --> 00:01:13,050
that the OWASP italy in chapter in 2005

00:01:11,190 --> 00:01:15,240
and I leave the testing guide the

00:01:13,050 --> 00:01:17,130
project from two years and in the spare

00:01:15,240 --> 00:01:21,450
time I work for mine and security that

00:01:17,130 --> 00:01:27,930
is an application security company so

00:01:21,450 --> 00:01:29,700
who knows about Horace grave ok so what

00:01:27,930 --> 00:01:32,280
was the stands for the open web

00:01:29,700 --> 00:01:35,189
application security project and is a

00:01:32,280 --> 00:01:38,969
project dedicated to find and fighting

00:01:35,189 --> 00:01:42,450
the causes of insecure software so we we

00:01:38,969 --> 00:01:44,969
have a Noah's foundation and everyone is

00:01:42,450 --> 00:01:49,079
a volunteer inside of us / everyone can

00:01:44,969 --> 00:01:52,469
participate so everything we do is free

00:01:49,079 --> 00:01:57,990
and open source so maybe is that for

00:01:52,469 --> 00:02:00,509
reason that we are here now I mean ok so

00:01:57,990 --> 00:02:03,600
the main object of OSP is developing

00:02:00,509 --> 00:02:06,630
tools standard and the documentation

00:02:03,600 --> 00:02:08,789
related to web application security we

00:02:06,630 --> 00:02:11,720
have a thousand of active members all

00:02:08,789 --> 00:02:16,140
around the world we have more than 100

00:02:11,720 --> 00:02:21,930
chapters around the world and millions

00:02:16,140 --> 00:02:24,460
of it on our site so if we think at all

00:02:21,930 --> 00:02:27,280
ways we have a four areas

00:02:24,460 --> 00:02:31,810
if we have an area a college education

00:02:27,280 --> 00:02:34,360
in which we developed the first tool for

00:02:31,810 --> 00:02:35,980
the education of people on the web

00:02:34,360 --> 00:02:41,350
application security for example the

00:02:35,980 --> 00:02:45,850
August top ten tell you about the 10

00:02:41,350 --> 00:02:47,470
most the 10 vulnerability of the web

00:02:45,850 --> 00:02:49,180
application so for example from

00:02:47,470 --> 00:02:51,850
cross-site scripting signal injections

00:02:49,180 --> 00:02:54,280
own tell you what what are these

00:02:51,850 --> 00:02:57,700
vulnerability and owl you can protect

00:02:54,280 --> 00:03:01,090
about it then we do training we do

00:02:57,700 --> 00:03:05,350
conferences so we next conferences in

00:03:01,090 --> 00:03:08,020
Poland means with the confidence and we

00:03:05,350 --> 00:03:11,110
develop what God that is an application

00:03:08,020 --> 00:03:13,780
that is vulnerable to web applications

00:03:11,110 --> 00:03:17,590
and security so you can test on your own

00:03:13,780 --> 00:03:23,380
the vulnerability and this software also

00:03:17,590 --> 00:03:27,730
the other is free available on w-w-w dot

00:03:23,380 --> 00:03:29,800
dot dot org then we have a community we

00:03:27,730 --> 00:03:32,560
have a lot of chapters and we have a lot

00:03:29,800 --> 00:03:36,940
of project incubator and we have a

00:03:32,560 --> 00:03:40,510
weekly portal so everyone can edit the

00:03:36,940 --> 00:03:44,680
contents of the ad the wiki the wiki

00:03:40,510 --> 00:03:47,500
portal then we have a building area and

00:03:44,680 --> 00:03:50,500
we have a deal was building guide that

00:03:47,500 --> 00:03:53,710
is a guide that tells you how they

00:03:50,500 --> 00:03:55,380
develop secure software there is a code

00:03:53,710 --> 00:03:59,410
review guide that tells you how to

00:03:55,380 --> 00:04:01,690
review the code for the security then

00:03:59,410 --> 00:04:06,730
there is there are other project like

00:04:01,690 --> 00:04:09,730
Orizon that is a tool that do static

00:04:06,730 --> 00:04:11,920
analysis of the code and then for the

00:04:09,730 --> 00:04:14,230
verification area we have the testing

00:04:11,920 --> 00:04:17,140
guide that is the core of the

00:04:14,230 --> 00:04:22,000
presentation and we have a word scarab

00:04:17,140 --> 00:04:26,200
that is a tool is an HTTP proxy that run

00:04:22,000 --> 00:04:28,810
runs on your local machine and can

00:04:26,200 --> 00:04:30,970
intercept all the HTTP request from the

00:04:28,810 --> 00:04:34,210
client to the burner to the server so

00:04:30,970 --> 00:04:36,689
you can see all the requests and edit it

00:04:34,210 --> 00:04:39,239
and see how the server can

00:04:36,689 --> 00:04:43,860
response so what Scarab and the testing

00:04:39,239 --> 00:04:45,689
guide are together the framework for the

00:04:43,860 --> 00:04:47,610
testing the testing guide is a

00:04:45,689 --> 00:04:51,709
methodology and the web scarab is a king

00:04:47,610 --> 00:04:54,389
tool for for the worse for the tester

00:04:51,709 --> 00:04:58,860
then we do validation and certification

00:04:54,389 --> 00:05:01,739
but there are new new item so the

00:04:58,860 --> 00:05:06,089
testing guide is free and open we use

00:05:01,739 --> 00:05:07,649
the Creative Commons so everything is

00:05:06,089 --> 00:05:12,869
open and free you can download

00:05:07,649 --> 00:05:15,029
everything we do it's just a puzzle of

00:05:12,869 --> 00:05:17,849
the piece it's just a piece of a puzzle

00:05:15,029 --> 00:05:20,489
so you can see there there are a lot of

00:05:17,849 --> 00:05:22,499
tools and there is the building guide

00:05:20,489 --> 00:05:28,589
the code review guide and the testing

00:05:22,499 --> 00:05:31,559
guide here the OVAs community we have a

00:05:28,589 --> 00:05:34,259
lot of chapters all around the world in

00:05:31,559 --> 00:05:37,069
which we can debate the web application

00:05:34,259 --> 00:05:42,360
security and we organize conferences

00:05:37,069 --> 00:05:48,149
locally etc now the total projects in

00:05:42,360 --> 00:05:53,159
august are 88 and 42 related to tools

00:05:48,149 --> 00:05:54,869
and 32 related to the documentation and

00:05:53,159 --> 00:05:57,019
nine for technology and five for the

00:05:54,869 --> 00:06:01,169
activities inside the air was the

00:05:57,019 --> 00:06:03,360
foundation so all these projects are

00:06:01,169 --> 00:06:06,149
sponsored by the US foundation because

00:06:03,360 --> 00:06:11,129
we collect the money from the

00:06:06,149 --> 00:06:14,429
conferences and may maybe from from the

00:06:11,129 --> 00:06:17,099
conferences and so we always / now give

00:06:14,429 --> 00:06:22,949
some some money to the the leader that

00:06:17,099 --> 00:06:28,439
developed a documented documentation or

00:06:22,949 --> 00:06:31,619
tool now the goal is to improve our the

00:06:28,439 --> 00:06:34,559
quality of our projects so now all the

00:06:31,619 --> 00:06:36,839
project are labeled alpha beta or

00:06:34,559 --> 00:06:41,249
release for example they always chasing

00:06:36,839 --> 00:06:43,800
guys is a release project and so now the

00:06:41,249 --> 00:06:47,129
our goal is to increase the quality and

00:06:43,800 --> 00:06:48,030
create professional ovis books so you

00:06:47,129 --> 00:06:51,180
can download

00:06:48,030 --> 00:06:53,190
the from the side the PDF for example of

00:06:51,180 --> 00:06:57,630
the testing guide or you can buy from

00:06:53,190 --> 00:07:00,840
Lulu calm the the the book that is a at

00:06:57,630 --> 00:07:04,580
the price of the printing so it's less

00:07:00,840 --> 00:07:10,740
than ten dollars something like that

00:07:04,580 --> 00:07:13,820
okay so this is now we will talk about

00:07:10,740 --> 00:07:16,910
the testing guide just a little history

00:07:13,820 --> 00:07:20,630
the testing guide start from january

00:07:16,910 --> 00:07:24,500
2004 from danea capper that deliver the

00:07:20,630 --> 00:07:28,230
right the first testing guide that was

00:07:24,500 --> 00:07:32,910
20 pages in which he collects all the

00:07:28,230 --> 00:07:37,400
tests to do on the application and then

00:07:32,910 --> 00:07:42,120
in july the four teeth we develop the

00:07:37,400 --> 00:07:45,120
version 1.2 2.1 and in december two

00:07:42,120 --> 00:07:48,540
thousand six we decide to develop a new

00:07:45,120 --> 00:07:50,430
project that is the version 2 that is

00:07:48,540 --> 00:07:54,540
more more bigger than than the other

00:07:50,430 --> 00:07:58,440
version and now in last december we

00:07:54,540 --> 00:08:02,250
developed the darshan tree you can you

00:07:58,440 --> 00:08:05,010
can see from here that the complex the

00:08:02,250 --> 00:08:08,280
complexity of the project from from the

00:08:05,010 --> 00:08:13,190
beginner we release a document document

00:08:08,280 --> 00:08:18,000
over 10 20 pages then 30 then more than

00:08:13,190 --> 00:08:21,420
250 and now we are nearly 350 so the

00:08:18,000 --> 00:08:25,580
complexity of the articles and the and

00:08:21,420 --> 00:08:25,580
the methodology is growing which growing

00:08:28,310 --> 00:08:34,230
what what are the goals of the was i was

00:08:31,770 --> 00:08:36,570
testing we would like to create a

00:08:34,230 --> 00:08:39,870
complete new project focus on web

00:08:36,570 --> 00:08:44,970
application penetration testing and the

00:08:39,870 --> 00:08:47,700
goal is to we don't like to to see the

00:08:44,970 --> 00:08:50,130
security as a back a black heart so we

00:08:47,700 --> 00:08:51,990
would like to share with the tester and

00:08:50,130 --> 00:08:53,760
with the whole detour and with each

00:08:51,990 --> 00:08:56,550
other

00:08:53,760 --> 00:09:00,120
involved in the in the whole date of the

00:08:56,550 --> 00:09:05,670
application a common methodology so the

00:09:00,120 --> 00:09:10,430
the question is here to try to develop

00:09:05,670 --> 00:09:10,430
in a methodology that is completely open

00:09:11,690 --> 00:09:19,230
okay here the action plan the last

00:09:16,110 --> 00:09:21,780
version so the version 2 takes about

00:09:19,230 --> 00:09:25,140
three four month to devote to the

00:09:21,780 --> 00:09:27,810
develop and we begin to with a very

00:09:25,140 --> 00:09:31,280
brainstorming to understand which which

00:09:27,810 --> 00:09:34,130
is the methodology so we collect all the

00:09:31,280 --> 00:09:39,210
web application penetration test and

00:09:34,130 --> 00:09:42,540
experts and we decide to together to

00:09:39,210 --> 00:09:44,850
develop a common methodology so the

00:09:42,540 --> 00:09:46,830
first stage is very complex because we

00:09:44,850 --> 00:09:49,530
have to collect all the ideas of the

00:09:46,830 --> 00:09:53,250
other and create the methodology because

00:09:49,530 --> 00:09:55,500
we don't like to we didn't want to

00:09:53,250 --> 00:09:57,780
create the my methodology on your

00:09:55,500 --> 00:10:02,430
methodology but the community

00:09:57,780 --> 00:10:04,770
methodology so it's not so easy then

00:10:02,430 --> 00:10:07,110
when we decide the index and the

00:10:04,770 --> 00:10:10,260
templates we write down the articles on

00:10:07,110 --> 00:10:12,990
the wiki model we review the articles

00:10:10,260 --> 00:10:17,070
review all the guides and then we write

00:10:12,990 --> 00:10:20,310
the in doc format and PDF and then we

00:10:17,070 --> 00:10:23,180
release the candidate and so on the

00:10:20,310 --> 00:10:28,290
testing guide version 3 started on every

00:10:23,180 --> 00:10:31,140
2008 and firstly we do a most leaders

00:10:28,290 --> 00:10:33,660
brainstorming about how to improve the

00:10:31,140 --> 00:10:38,700
version 2 and we do a call for

00:10:33,660 --> 00:10:41,730
participation we had 21 holders and in

00:10:38,700 --> 00:10:45,960
the version 2 we had nearly 50 holders

00:10:41,730 --> 00:10:48,830
so we the authors are less then we

00:10:45,960 --> 00:10:51,660
describe we discuss out the article and

00:10:48,830 --> 00:10:56,670
here you can see that there is an action

00:10:51,660 --> 00:10:59,550
plan about this guide so here is the

00:10:56,670 --> 00:11:02,550
book that you can download from the site

00:10:59,550 --> 00:11:05,220
and the PDF you can see there is

00:11:02,550 --> 00:11:05,970
introduction etc and the chapter 4 is

00:11:05,220 --> 00:11:08,519
the core

00:11:05,970 --> 00:11:09,959
of the book in which we describe the web

00:11:08,519 --> 00:11:14,399
application penetration testing

00:11:09,959 --> 00:11:17,310
methodology and then we focus on how to

00:11:14,399 --> 00:11:19,879
write the reports now when you find all

00:11:17,310 --> 00:11:23,449
the vulnerabilities on a web application

00:11:19,879 --> 00:11:26,430
we decide also to write a methodology in

00:11:23,449 --> 00:11:28,740
describe I'll write a report out to

00:11:26,430 --> 00:11:31,079
collect the vulnerability out value with

00:11:28,740 --> 00:11:34,019
the risk associated with each

00:11:31,079 --> 00:11:37,319
vulnerability etc because it's

00:11:34,019 --> 00:11:41,100
fundamental to present the result in the

00:11:37,319 --> 00:11:44,220
right manner then we have a four

00:11:41,100 --> 00:11:47,819
appendix we describe all the testing

00:11:44,220 --> 00:11:50,100
tools that we use web scarab is the King

00:11:47,819 --> 00:11:52,079
the king tool but there are a lot of

00:11:50,100 --> 00:11:54,029
other tool for example for sequel

00:11:52,079 --> 00:11:58,319
injection we have signal ninja we have a

00:11:54,029 --> 00:12:00,000
sequel map and so on then the reading

00:11:58,319 --> 00:12:05,399
The Phantom vector and include an

00:12:00,000 --> 00:12:07,079
injection now we go to see a better the

00:12:05,399 --> 00:12:10,759
difference from the version 2 and the

00:12:07,079 --> 00:12:14,189
version 3 and verse ensure we had eight

00:12:10,759 --> 00:12:16,800
subcategories and now we have 10 sub

00:12:14,189 --> 00:12:19,379
categories we create configuration

00:12:16,800 --> 00:12:23,059
management testing and the authorization

00:12:19,379 --> 00:12:34,550
testing and and the encoded appendix so

00:12:23,059 --> 00:12:34,550
here i would like to shop the index

00:12:37,330 --> 00:12:46,940
okay yet we describe the other states in

00:12:44,120 --> 00:12:50,270
framework and so on and here you can see

00:12:46,940 --> 00:12:52,640
that we start from the information

00:12:50,270 --> 00:12:56,450
gathering that is the first category of

00:12:52,640 --> 00:12:58,550
the test and these the passive test is

00:12:56,450 --> 00:13:00,340
not an active test in the information

00:12:58,550 --> 00:13:03,290
gathering we collect all the information

00:13:00,340 --> 00:13:06,440
about the application so we understand

00:13:03,290 --> 00:13:09,650
all the entry points where is the

00:13:06,440 --> 00:13:11,840
application because maybe we the the

00:13:09,650 --> 00:13:14,660
target is only an IP address so we have

00:13:11,840 --> 00:13:20,980
to understand where is a the application

00:13:14,660 --> 00:13:23,720
in which part is running and so on okay

00:13:20,980 --> 00:13:27,050
then we we do configuration management

00:13:23,720 --> 00:13:30,640
testing for example we go to see the

00:13:27,050 --> 00:13:35,150
strength of the SSL protocol implemented

00:13:30,640 --> 00:13:37,190
we go to to implement the infrastructure

00:13:35,150 --> 00:13:43,430
configuration management testing and so

00:13:37,190 --> 00:13:48,640
on and then we go for the authentication

00:13:43,430 --> 00:13:53,330
testing near we are splitted in ten and

00:13:48,640 --> 00:13:55,760
controls 22 to perform the first one is

00:13:53,330 --> 00:13:57,980
to perform at the credential transport

00:13:55,760 --> 00:14:01,400
over an encrypted channel for example if

00:13:57,980 --> 00:14:05,270
the when you have a username and

00:14:01,400 --> 00:14:09,230
password to verify if the user name and

00:14:05,270 --> 00:14:12,650
password information goes over in an

00:14:09,230 --> 00:14:14,780
encrypted Channel and then we go for

00:14:12,650 --> 00:14:19,970
testing for user numeration for example

00:14:14,780 --> 00:14:22,940
if you know a valid user and if you try

00:14:19,970 --> 00:14:24,890
not valid user with the wrong password

00:14:22,940 --> 00:14:27,110
maybe the application respond in a

00:14:24,890 --> 00:14:29,960
different manner so you can understand

00:14:27,110 --> 00:14:32,660
that the user is available on the

00:14:29,960 --> 00:14:36,530
application and you can enumerate a lot

00:14:32,660 --> 00:14:38,560
of the user then we can we can do the

00:14:36,530 --> 00:14:41,020
default or gets of all our town attack

00:14:38,560 --> 00:14:45,110
okay

00:14:41,020 --> 00:14:49,850
just a flash in the second part I will

00:14:45,110 --> 00:14:52,580
show some examples so a I go a little

00:14:49,850 --> 00:14:54,650
bit fast then we do the session

00:14:52,580 --> 00:14:58,490
management testing you know that web

00:14:54,650 --> 00:15:01,100
application running on over HTTP that

00:14:58,490 --> 00:15:03,350
and the HTTP protocol is a statelets a

00:15:01,100 --> 00:15:06,830
stateless protocol so you have to

00:15:03,350 --> 00:15:10,240
implement your own state or you use the

00:15:06,830 --> 00:15:12,590
framework for example from je or.net

00:15:10,240 --> 00:15:16,760
there is a session management mechanism

00:15:12,590 --> 00:15:21,230
so we here we test the strength of this

00:15:16,760 --> 00:15:24,440
mechanism of the session management then

00:15:21,230 --> 00:15:26,840
we do authorization testing when a user

00:15:24,440 --> 00:15:29,860
is authenticated on my application I

00:15:26,840 --> 00:15:32,060
have to test if the user can do

00:15:29,860 --> 00:15:36,560
something that is not authorized for

00:15:32,060 --> 00:15:39,290
maybe you can read a PDF that is private

00:15:36,560 --> 00:15:43,510
or you can do some action that is varied

00:15:39,290 --> 00:15:46,430
from only from the administration and so

00:15:43,510 --> 00:15:52,390
then we do data validation testing that

00:15:46,430 --> 00:15:55,610
validation testing is the big one I

00:15:52,390 --> 00:15:57,500
maybe I didn't find an application that

00:15:55,610 --> 00:16:00,160
suffer from a data validation of

00:15:57,500 --> 00:16:05,480
vulnerabilities is quite impossible

00:16:00,160 --> 00:16:07,370
because here we test all the entry point

00:16:05,480 --> 00:16:11,330
of the application and we understand if

00:16:07,370 --> 00:16:13,970
the ow the application validate this

00:16:11,330 --> 00:16:17,420
information before doing a particular

00:16:13,970 --> 00:16:20,660
action for example create a sequel query

00:16:17,420 --> 00:16:23,030
on the database or create an output on

00:16:20,660 --> 00:16:25,550
the browser so if the validation is not

00:16:23,030 --> 00:16:27,740
correct we can perform a cross-site

00:16:25,550 --> 00:16:31,070
scripting or a sequel injection and so

00:16:27,740 --> 00:16:33,770
on so here we describe also for the

00:16:31,070 --> 00:16:36,410
sequel injection how to test the oracle

00:16:33,770 --> 00:16:43,640
how to test my sequel sequel server and

00:16:36,410 --> 00:16:47,680
so on here are all the other data

00:16:43,640 --> 00:16:50,410
validation testing then

00:16:47,680 --> 00:16:53,350
we describe but then your service

00:16:50,410 --> 00:16:57,220
testing usually in the we don't we

00:16:53,350 --> 00:17:01,500
didn't perform the Daniel service

00:16:57,220 --> 00:17:04,750
testing because we we touch the

00:17:01,500 --> 00:17:08,679
application in I'm not in the

00:17:04,750 --> 00:17:11,650
environment and the application is

00:17:08,679 --> 00:17:13,780
running so it's not very important to

00:17:11,650 --> 00:17:18,189
one to understand if software of Daniel

00:17:13,780 --> 00:17:20,829
service then when there is a web when we

00:17:18,189 --> 00:17:23,530
are web service we test also the web

00:17:20,829 --> 00:17:26,400
services so here we describe how to test

00:17:23,530 --> 00:17:29,500
web services and if we have an Aegis

00:17:26,400 --> 00:17:34,000
application we describe our to test the

00:17:29,500 --> 00:17:36,910
Ajax and then chapter 5 describe out to

00:17:34,000 --> 00:17:41,950
write reports and evaluate evaluate the

00:17:36,910 --> 00:17:46,809
real risk so here is the index of of the

00:17:41,950 --> 00:17:50,050
methodology so what is a web application

00:17:46,809 --> 00:17:53,740
penetration testing it's a process it's

00:17:50,050 --> 00:17:55,720
a process that involve an active

00:17:53,740 --> 00:17:58,720
analysis of the application to find the

00:17:55,720 --> 00:18:03,190
weakness and the vulnerabilities it's a

00:17:58,720 --> 00:18:05,020
black a black box process so we don't

00:18:03,190 --> 00:18:08,260
know and the source code of the

00:18:05,020 --> 00:18:10,630
application we know only the URL on the

00:18:08,260 --> 00:18:14,380
PA da address where the application is

00:18:10,630 --> 00:18:18,760
running so this approach is a black box

00:18:14,380 --> 00:18:21,730
approach and for example the code review

00:18:18,760 --> 00:18:23,740
testing is a white box approach when

00:18:21,730 --> 00:18:26,770
that means that you know everything

00:18:23,740 --> 00:18:31,120
about the code so you can read the code

00:18:26,770 --> 00:18:33,760
understand when a call is fun when the

00:18:31,120 --> 00:18:35,260
function is called at the etc you can

00:18:33,760 --> 00:18:39,280
understand everything about the code

00:18:35,260 --> 00:18:43,600
here we don't know nothing so the

00:18:39,280 --> 00:18:47,500
methodology described the earth with the

00:18:43,600 --> 00:18:50,230
tool is together web application testing

00:18:47,500 --> 00:18:53,590
our approach in writing the guide is

00:18:50,230 --> 00:18:55,750
open and collaborative so you know

00:18:53,590 --> 00:18:59,130
everything can give the East

00:18:55,750 --> 00:19:01,040
contribution and collaborative because

00:18:59,130 --> 00:19:06,730
we decide together

00:19:01,040 --> 00:19:10,160
what right and is not it's a community

00:19:06,730 --> 00:19:12,920
methodology then we would like to create

00:19:10,160 --> 00:19:15,440
a taxi mythology that was a consistent

00:19:12,920 --> 00:19:18,140
repeatable and at the time so if I test

00:19:15,440 --> 00:19:20,690
an application with this methodology we

00:19:18,140 --> 00:19:25,060
would like to have the same results from

00:19:20,690 --> 00:19:29,060
another tester and yeah the quality is

00:19:25,060 --> 00:19:32,230
another target here for example a

00:19:29,060 --> 00:19:35,600
testing paragraph template with you

00:19:32,230 --> 00:19:38,920
initially we describe we have a brief

00:19:35,600 --> 00:19:42,020
summary of the of what we want to test

00:19:38,920 --> 00:19:44,060
we describe the issue and we describe

00:19:42,020 --> 00:19:48,020
from a black box testing example and

00:19:44,060 --> 00:19:49,850
gray box texting example and then we we

00:19:48,020 --> 00:19:52,700
collect all the references and the tool

00:19:49,850 --> 00:20:01,700
that are useful for this kind of test

00:19:52,700 --> 00:20:04,430
for example for example here is one of

00:20:01,700 --> 00:20:06,980
the paragraph about the cross-site

00:20:04,430 --> 00:20:09,530
scripting and here we describe what is a

00:20:06,980 --> 00:20:12,680
cross-site scripting with inside the

00:20:09,530 --> 00:20:18,230
brief summary we describe the issue so

00:20:12,680 --> 00:20:23,450
and how you can test for the cross-site

00:20:18,230 --> 00:20:25,970
scripting and here black box taxing the

00:20:23,450 --> 00:20:29,330
methodology so you have to detect the

00:20:25,970 --> 00:20:31,450
input vector and to inject some script

00:20:29,330 --> 00:20:34,340
to understand how the application

00:20:31,450 --> 00:20:38,990
reflect your information on your browser

00:20:34,340 --> 00:20:41,930
and for example yeah excellent here is

00:20:38,990 --> 00:20:46,010
an example where for example you have

00:20:41,930 --> 00:20:49,330
the you URL where user equal mr. Smith

00:20:46,010 --> 00:20:53,600
and mr. Smith is reflected on the

00:20:49,330 --> 00:20:57,460
browser so for example you can write

00:20:53,600 --> 00:21:01,130
down script alert one two three /script

00:20:57,460 --> 00:21:04,370
instead mr. Smith and if you collect

00:21:01,130 --> 00:21:06,500
this kind of screenshot you understand

00:21:04,370 --> 00:21:12,500
that the application doesn't correct

00:21:06,500 --> 00:21:13,910
validate the output so you can create as

00:21:12,500 --> 00:21:20,120
a reflected

00:21:13,910 --> 00:21:24,980
cross-site scripting okay there are

00:21:20,120 --> 00:21:28,010
other example and here are references so

00:21:24,980 --> 00:21:32,060
you can read the white paper and the

00:21:28,010 --> 00:21:36,500
tools here again webs caliber and all

00:21:32,060 --> 00:21:39,050
was called 9000 is a another free tool

00:21:36,500 --> 00:21:41,120
that is a collection of web applications

00:21:39,050 --> 00:21:48,610
with testing for the cross-site

00:21:41,120 --> 00:21:48,610
scripting so you can use it etc okay

00:21:51,370 --> 00:21:58,070
okay here difference because we we

00:21:54,980 --> 00:22:00,500
describe also the great blog box testing

00:21:58,070 --> 00:22:02,720
for example with if we know the session

00:22:00,500 --> 00:22:05,000
ID generation algorithm we know

00:22:02,720 --> 00:22:09,590
something about the application so it's

00:22:05,000 --> 00:22:12,470
a something of a Bray box texting okay

00:22:09,590 --> 00:22:15,560
but again the whiteboard texting is not

00:22:12,470 --> 00:22:17,150
our the target of this guide but the

00:22:15,560 --> 00:22:20,900
code review guide that is another guide

00:22:17,150 --> 00:22:25,280
of what was / is focusing on the white

00:22:20,900 --> 00:22:29,210
box testing so now I introduce the

00:22:25,280 --> 00:22:31,370
methodology with some examples we start

00:22:29,210 --> 00:22:33,470
I say that we start from the information

00:22:31,370 --> 00:22:35,840
gathering so the first phase in the

00:22:33,470 --> 00:22:38,870
security assessment is to play with the

00:22:35,840 --> 00:22:41,510
application with a tool like wat scarab

00:22:38,870 --> 00:22:45,590
or idle tool and understand how the

00:22:41,510 --> 00:22:48,020
application answer to you and and to

00:22:45,590 --> 00:22:51,950
find all the tree of the application so

00:22:48,020 --> 00:22:55,570
all the directory accessible from the

00:22:51,950 --> 00:22:58,010
public etc so you can write down all the

00:22:55,570 --> 00:23:02,390
entry points of the application and

00:22:58,010 --> 00:23:04,340
three points it's me I mean the entry

00:23:02,390 --> 00:23:08,810
points for example when there is a

00:23:04,340 --> 00:23:10,610
former on the web page when you insert

00:23:08,810 --> 00:23:12,320
username a password username and

00:23:10,610 --> 00:23:15,200
password are two entry points of the

00:23:12,320 --> 00:23:16,940
application then these are something

00:23:15,200 --> 00:23:19,700
that you have to test for example for

00:23:16,940 --> 00:23:22,850
data validation so you can understand

00:23:19,700 --> 00:23:25,670
out the application is functioning

00:23:22,850 --> 00:23:28,940
during the information gathering and

00:23:25,670 --> 00:23:31,820
that you use a spider and robots and

00:23:28,940 --> 00:23:35,420
crawlers to understand everything about

00:23:31,820 --> 00:23:37,700
the application and then a once

00:23:35,420 --> 00:23:39,350
identified the implication in three

00:23:37,700 --> 00:23:41,390
points we do web application

00:23:39,350 --> 00:23:43,160
fingerprinting to understand that which

00:23:41,390 --> 00:23:46,630
are the web server the application

00:23:43,160 --> 00:23:49,130
server running on the application and

00:23:46,630 --> 00:23:51,740
then we do application discovery and

00:23:49,130 --> 00:23:54,410
analysis of error codes that are

00:23:51,740 --> 00:23:56,930
interesting for example when you often

00:23:54,410 --> 00:23:58,910
try to request something particular and

00:23:56,930 --> 00:24:02,180
the application respond with the for

00:23:58,910 --> 00:24:06,230
example Microsoft DB all all error you

00:24:02,180 --> 00:24:09,680
understand that there is some kind of

00:24:06,230 --> 00:24:11,480
database at the back end and maybe you

00:24:09,680 --> 00:24:14,450
can collect information about the name

00:24:11,480 --> 00:24:17,390
of the table and you can write down for

00:24:14,450 --> 00:24:21,230
the test for the sequel injection so

00:24:17,390 --> 00:24:23,480
yeah you collect many many information

00:24:21,230 --> 00:24:29,120
about the your application here for

00:24:23,480 --> 00:24:32,260
example if you if you perform an HTTP

00:24:29,120 --> 00:24:34,970
header request from from your target you

00:24:32,260 --> 00:24:36,710
the answer is something like that and

00:24:34,970 --> 00:24:40,730
here for example you can understand that

00:24:36,710 --> 00:24:42,680
there is a pc version 1.3 point 3 and

00:24:40,730 --> 00:24:47,900
there is a unique server and there is a

00:24:42,680 --> 00:24:52,880
read at a setter but for example what is

00:24:47,900 --> 00:24:55,880
what if i do the same request and the

00:24:52,880 --> 00:24:57,590
heater of the server is obfuscated for

00:24:55,880 --> 00:25:02,420
example here you can see on the third

00:24:57,590 --> 00:25:06,920
line of foo skated and skaters etc also

00:25:02,420 --> 00:25:11,930
we can understand that which is the

00:25:06,920 --> 00:25:14,510
server because the the heater is in a

00:25:11,930 --> 00:25:18,310
different manner so for example a paw a

00:25:14,510 --> 00:25:21,520
pc one point three point two three you a

00:25:18,310 --> 00:25:24,530
response words answer with date as

00:25:21,520 --> 00:25:27,760
fertile as fairfield inn the inn de der

00:25:24,530 --> 00:25:32,990
and and so on so you can understand

00:25:27,760 --> 00:25:34,820
which are the platform then we do

00:25:32,990 --> 00:25:37,520
configuration management testing so for

00:25:34,820 --> 00:25:40,610
example this is the ssl strand

00:25:37,520 --> 00:25:42,800
of the Euro application we do DB listen

00:25:40,610 --> 00:25:46,370
testing infrastructure configuration

00:25:42,800 --> 00:25:49,190
management for example we do also the

00:25:46,370 --> 00:25:52,610
old the capital and reference ice that

00:25:49,190 --> 00:25:56,000
we find quite a lot on the application

00:25:52,610 --> 00:26:01,130
for example if they login is login dot

00:25:56,000 --> 00:26:04,520
JSP if you try to request login dot back

00:26:01,130 --> 00:26:06,590
or login dot halt maybe you can find

00:26:04,520 --> 00:26:09,440
these information and maybe there are

00:26:06,590 --> 00:26:14,090
some information confidential inside

00:26:09,440 --> 00:26:19,790
these these are references file so you

00:26:14,090 --> 00:26:23,480
can and and once again found useful

00:26:19,790 --> 00:26:26,840
information for the test then we test

00:26:23,480 --> 00:26:30,080
for example for HTTP methods for example

00:26:26,840 --> 00:26:33,770
if put or delete is admitted on your web

00:26:30,080 --> 00:26:37,670
application and maybe you can do a other

00:26:33,770 --> 00:26:39,890
kind of test here for example we can

00:26:37,670 --> 00:26:41,600
find an access to tomcat have been

00:26:39,890 --> 00:26:46,660
interface from there from the internet

00:26:41,600 --> 00:26:52,760
maybe or hear from nexus output we can

00:26:46,660 --> 00:26:55,160
extract all the ciphers that the server

00:26:52,760 --> 00:27:00,310
and meet here for example you can see

00:26:55,160 --> 00:27:02,420
that there is a death and md5

00:27:00,310 --> 00:27:06,680
cryptography algorithm and hashing

00:27:02,420 --> 00:27:12,020
algorithm that are quite hold and it's

00:27:06,680 --> 00:27:14,390
not it's better don't don't use it then

00:27:12,020 --> 00:27:16,070
we test the session management session

00:27:14,390 --> 00:27:19,760
management is a critical part of

00:27:16,070 --> 00:27:21,500
security test because the HTTP is the

00:27:19,760 --> 00:27:24,950
stateless and so you have to understand

00:27:21,500 --> 00:27:27,650
how the application implement the state

00:27:24,950 --> 00:27:30,110
of the other user that is authenticated

00:27:27,650 --> 00:27:32,750
on the application so we test for the

00:27:30,110 --> 00:27:35,410
session management schemes for the Q key

00:27:32,750 --> 00:27:37,910
attributes for example if when I

00:27:35,410 --> 00:27:41,090
authenticate on an application I

00:27:37,910 --> 00:27:44,090
understand if I go to see if when the

00:27:41,090 --> 00:27:47,360
dairy the directive said cookie I I go

00:27:44,090 --> 00:27:50,070
to see if the cookies secure is HTTP

00:27:47,360 --> 00:27:52,380
only if there is a date of

00:27:50,070 --> 00:27:55,770
in which is valid or not and these are

00:27:52,380 --> 00:27:58,260
all attributes that you have to put on

00:27:55,770 --> 00:28:00,900
your cooking then we test for session

00:27:58,260 --> 00:28:03,210
fixation for exposed variable and

00:28:00,900 --> 00:28:06,900
cross-site request forgery now we see

00:28:03,210 --> 00:28:09,000
some example here for example on the

00:28:06,900 --> 00:28:14,400
right we have a web application and on

00:28:09,000 --> 00:28:18,930
the left there is a user a wee that hold

00:28:14,400 --> 00:28:22,820
these username and password here and I

00:28:18,930 --> 00:28:26,430
post my username and password via HTTPS

00:28:22,820 --> 00:28:30,000
on the application and on the bottom you

00:28:26,430 --> 00:28:33,450
can see this the perimeter username and

00:28:30,000 --> 00:28:36,750
password then the web application verify

00:28:33,450 --> 00:28:40,970
the credential and if is ok he the web

00:28:36,750 --> 00:28:45,360
application will generate a cookie and

00:28:40,970 --> 00:28:49,170
say is welcome to Mario Rossi and if you

00:28:45,360 --> 00:28:51,120
look at either of the the answer of the

00:28:49,170 --> 00:28:53,640
web application you can see something

00:28:51,120 --> 00:28:56,330
like that a set cookie authentication

00:28:53,640 --> 00:29:00,840
equals something is a string of

00:28:56,330 --> 00:29:05,370
characters that will be set on the

00:29:00,840 --> 00:29:11,010
browser of the user so for example if I

00:29:05,370 --> 00:29:14,730
request many many cookies of the

00:29:11,010 --> 00:29:17,840
application and for example using web

00:29:14,730 --> 00:29:20,970
scarab you can collect a lot of cookies

00:29:17,840 --> 00:29:23,220
101,000 of the application so you can

00:29:20,970 --> 00:29:26,300
understand how the application generate

00:29:23,220 --> 00:29:29,850
the cooking maybe the application

00:29:26,300 --> 00:29:32,460
generate the same cookie every time we

00:29:29,850 --> 00:29:35,340
don't find it but or there is a

00:29:32,460 --> 00:29:38,430
linearity in the generation here for

00:29:35,340 --> 00:29:41,250
example is it a simple very simple

00:29:38,430 --> 00:29:43,740
example you can understand that if I

00:29:41,250 --> 00:29:46,280
collect a lot of cookie I can understand

00:29:43,740 --> 00:29:49,740
that there is a lien linearity in the

00:29:46,280 --> 00:29:54,420
generation so I can understand that the

00:29:49,740 --> 00:29:57,690
next cookie is that one just used to so

00:29:54,420 --> 00:30:00,930
for example if I am authenticated on the

00:29:57,690 --> 00:30:03,299
web application and they request my

00:30:00,930 --> 00:30:07,519
money how much money I have

00:30:03,299 --> 00:30:10,440
the bank if if I understand the

00:30:07,519 --> 00:30:15,869
mechanism of the session I can modify

00:30:10,440 --> 00:30:19,049
that with the web scarab so here I send

00:30:15,869 --> 00:30:21,629
to the web application not my cookies no

00:30:19,049 --> 00:30:23,759
not my ticket AMA the ticket that i

00:30:21,629 --> 00:30:26,399
understand that is from from another

00:30:23,759 --> 00:30:28,379
person i don't know which person is but

00:30:26,399 --> 00:30:32,809
i know that maybe there is an open

00:30:28,379 --> 00:30:32,809
session so i can do a session hijacking

00:30:32,840 --> 00:30:38,820
so the develop l'occasion now verify my

00:30:36,269 --> 00:30:42,269
identity not from my username a password

00:30:38,820 --> 00:30:44,129
but from the ticket and the ticket is

00:30:42,269 --> 00:30:48,769
related to mario where they are not

00:30:44,129 --> 00:30:52,559
mario see so my euros you can see the

00:30:48,769 --> 00:30:56,009
the account of malware d this is an

00:30:52,559 --> 00:30:59,460
example of a session hijacking ok

00:30:56,009 --> 00:31:02,159
another example here for example and a

00:30:59,460 --> 00:31:08,100
web application where you can create

00:31:02,159 --> 00:31:17,220
your own mms and then send it to an to a

00:31:08,100 --> 00:31:20,279
user via a network mobile phone yeah I

00:31:17,220 --> 00:31:23,429
don't describe everything but the

00:31:20,279 --> 00:31:28,440
attacker as is the first one on the left

00:31:23,429 --> 00:31:32,639
and as a laptop and if the mobile phone

00:31:28,440 --> 00:31:34,499
and there is a spoof it we spoof that

00:31:32,639 --> 00:31:36,629
identity with another phone and there is

00:31:34,499 --> 00:31:40,590
a receiver with a with another phone

00:31:36,629 --> 00:31:44,190
here we can see that there is a stupid

00:31:40,590 --> 00:31:47,460
arrow a stupid logic error in which when

00:31:44,190 --> 00:31:51,749
i call the server the servlet for the

00:31:47,460 --> 00:31:56,940
payment a here you can see that i send a

00:31:51,749 --> 00:32:00,690
cookie that there is inside my m SI es

00:31:56,940 --> 00:32:04,529
the end so my telephone number so i send

00:32:00,690 --> 00:32:09,869
in a session ID and my telephone number

00:32:04,529 --> 00:32:14,009
what if I modify that number with

00:32:09,869 --> 00:32:15,760
another number and we we saw that the

00:32:14,009 --> 00:32:18,970
application

00:32:15,760 --> 00:32:27,040
doesn't correct validate the session ID

00:32:18,970 --> 00:32:29,140
but validator only the MS sdn so the

00:32:27,040 --> 00:32:32,590
result is that the application charged

00:32:29,140 --> 00:32:37,090
another user and not me so i can send

00:32:32,590 --> 00:32:41,920
spoof at the mms to another person MP s

00:32:37,090 --> 00:32:43,540
proof identity another test very

00:32:41,920 --> 00:32:46,450
interesting is the cross right cross

00:32:43,540 --> 00:32:53,500
site request forgery that is a quite new

00:32:46,450 --> 00:32:55,860
vulnerability that is not so we found a

00:32:53,500 --> 00:33:00,670
lot of cross-site request forgery and

00:32:55,860 --> 00:33:04,750
and I don't find they okay I described

00:33:00,670 --> 00:33:06,520
the the tests we find the cross request

00:33:04,750 --> 00:33:09,850
forgery when the application permits to

00:33:06,520 --> 00:33:13,150
send a note in now Theresa an authorized

00:33:09,850 --> 00:33:17,620
I'd function without authorized every

00:33:13,150 --> 00:33:21,640
time the user and we use the image tag

00:33:17,620 --> 00:33:25,950
attacker to create and force the user to

00:33:21,640 --> 00:33:28,000
commit that action now we receive better

00:33:25,950 --> 00:33:30,070
the first step is to find a

00:33:28,000 --> 00:33:32,110
vulnerability function for example if an

00:33:30,070 --> 00:33:36,550
application as a function to create a

00:33:32,110 --> 00:33:39,760
new user or there is a and this is only

00:33:36,550 --> 00:33:42,820
for the admin for example or there is a

00:33:39,760 --> 00:33:48,070
farm transfer for example of all the

00:33:42,820 --> 00:33:52,330
online banking site permit you to create

00:33:48,070 --> 00:33:55,060
a found transfer we we understand that

00:33:52,330 --> 00:33:59,650
there are these this function then we

00:33:55,060 --> 00:34:02,440
analyze how our send this information to

00:33:59,650 --> 00:34:05,230
the server for example when I click

00:34:02,440 --> 00:34:07,540
Submit I want to create a family

00:34:05,230 --> 00:34:13,679
transfer found from my newly found to

00:34:07,540 --> 00:34:17,830
another fun with the 1000 euro of fond I

00:34:13,679 --> 00:34:21,040
I understand which which is the request

00:34:17,830 --> 00:34:23,649
so i can create a malicious email or

00:34:21,040 --> 00:34:26,960
malicious site in which I force the

00:34:23,649 --> 00:34:32,000
browser of the of another user to do

00:34:26,960 --> 00:34:35,419
that that action the result is a not

00:34:32,000 --> 00:34:39,320
ultras ejection executed but the user

00:34:35,419 --> 00:34:43,820
don't understand that another example so

00:34:39,320 --> 00:34:46,399
for example on online banking here is

00:34:43,820 --> 00:34:50,690
the transfer fund mechanism you can see

00:34:46,399 --> 00:34:55,940
the HTTPS example bank calm the transfer

00:34:50,690 --> 00:35:00,349
function in which is the variable r IE

00:34:55,940 --> 00:35:02,480
you and the two this is very very simple

00:35:00,349 --> 00:35:06,080
to understand the vulnerability for

00:35:02,480 --> 00:35:09,770
example if i am out indicated and create

00:35:06,080 --> 00:35:13,430
a transfer to the count one two three

00:35:09,770 --> 00:35:21,650
four and this is the amount the request

00:35:13,430 --> 00:35:23,750
is something like that and I the second

00:35:21,650 --> 00:35:25,400
step is that the user must be

00:35:23,750 --> 00:35:28,339
authenticated on the application the

00:35:25,400 --> 00:35:29,900
user which is subject to the attack must

00:35:28,339 --> 00:35:36,680
be out in ticket on the application and

00:35:29,900 --> 00:35:41,210
then I force him to request these this

00:35:36,680 --> 00:35:44,119
HTTP request using the image tag here

00:35:41,210 --> 00:35:47,260
here isn't the example if I create a

00:35:44,119 --> 00:35:53,180
page like that in which inside the HTML

00:35:47,260 --> 00:35:56,560
HTML I inside insert a the exit request

00:35:53,180 --> 00:36:00,490
that I I understand that the application

00:35:56,560 --> 00:36:08,180
used for for a transfer money I can

00:36:00,490 --> 00:36:13,670
enforce a user to to request this one so

00:36:08,180 --> 00:36:17,690
for example if i send an email to 2

00:36:13,670 --> 00:36:22,900
1,000,000 user and maybe 1 1 user is

00:36:17,690 --> 00:36:26,119
reading these these this email and

00:36:22,900 --> 00:36:27,890
consequently if it is authenticated on

00:36:26,119 --> 00:36:34,070
the web application the browser will

00:36:27,890 --> 00:36:37,400
execute this command so the user don't

00:36:34,070 --> 00:36:38,309
understand that is doing that and the

00:36:37,400 --> 00:36:41,939
application see

00:36:38,309 --> 00:36:47,160
that the correct user is doing that so

00:36:41,939 --> 00:36:49,680
it's a big problem for for say I I

00:36:47,160 --> 00:36:52,499
didn't do that but the application sees

00:36:49,680 --> 00:36:54,779
that you are authenticated and you are

00:36:52,499 --> 00:36:57,989
performing detection so it's a big

00:36:54,779 --> 00:37:03,619
problem to understand that you are not

00:36:57,989 --> 00:37:03,619
request the this kind of transfer fund

00:37:04,099 --> 00:37:10,619
so the cross request forgery is not is a

00:37:07,380 --> 00:37:14,849
big vulnerability to to test and to

00:37:10,619 --> 00:37:18,420
understand then Alton occasion testing

00:37:14,849 --> 00:37:23,519
if you have question please because I

00:37:18,420 --> 00:37:26,549
see okay authentication testing we we go

00:37:23,519 --> 00:37:29,819
to see how the authentication tell the

00:37:26,549 --> 00:37:32,819
authentication mechanism is robust and

00:37:29,819 --> 00:37:35,579
so on so we test the credential we test

00:37:32,819 --> 00:37:38,339
for user numeration for user account for

00:37:35,579 --> 00:37:40,799
the brute force of the web application

00:37:38,339 --> 00:37:43,229
for bypassing the authentication schema

00:37:40,799 --> 00:37:47,640
here we can see some example for example

00:37:43,229 --> 00:37:50,569
here there is an application with move

00:37:47,640 --> 00:37:53,400
12 digital digital certification

00:37:50,569 --> 00:37:55,979
certificate and you can see the user

00:37:53,400 --> 00:38:01,769
with the his own public key certificate

00:37:55,979 --> 00:38:04,920
and the application install a public key

00:38:01,769 --> 00:38:10,140
certificate on the proxy being behind

00:38:04,920 --> 00:38:12,839
the the application so here we found for

00:38:10,140 --> 00:38:14,849
example that the handshake SSL and motor

00:38:12,839 --> 00:38:20,699
authentication is from the user browser

00:38:14,849 --> 00:38:24,839
and the proxy so on the layer beside the

00:38:20,699 --> 00:38:27,329
application layer and then we we

00:38:24,839 --> 00:38:29,369
analyzed that there is a script client

00:38:27,329 --> 00:38:32,699
that collected information of the user

00:38:29,369 --> 00:38:36,509
certificate so there is something inside

00:38:32,699 --> 00:38:38,689
the browser that go to see the user

00:38:36,509 --> 00:38:41,519
certificate and send the user

00:38:38,689 --> 00:38:43,650
distinguished name to the web

00:38:41,519 --> 00:38:47,929
application so here you can see that

00:38:43,650 --> 00:38:47,929
there is a narrow a logic error because

00:38:48,349 --> 00:38:55,769
here is the authentication post

00:38:52,049 --> 00:38:58,529
and when I send from my browser to the

00:38:55,769 --> 00:39:02,339
server my user distinguished name you

00:38:58,529 --> 00:39:08,880
can see in the last row user

00:39:02,339 --> 00:39:12,390
distinguished name equal 100 so I do and

00:39:08,880 --> 00:39:15,059
shake as a cell with the proxy but from

00:39:12,390 --> 00:39:17,880
an application layer point of view the

00:39:15,059 --> 00:39:20,400
client send to the application is a

00:39:17,880 --> 00:39:25,109
distinguished name and this is a bigger

00:39:20,400 --> 00:39:29,219
because the application verify with ssl

00:39:25,109 --> 00:39:33,679
the wii with the user and the

00:39:29,219 --> 00:39:37,049
application must see inside the the

00:39:33,679 --> 00:39:41,039
certificate of the user once that the

00:39:37,049 --> 00:39:47,039
certificate is well verified who is the

00:39:41,039 --> 00:39:53,759
user but not asking to the user which

00:39:47,039 --> 00:39:57,390
user are you so so here there is a there

00:39:53,759 --> 00:39:59,729
is a big problem because everyone here I

00:39:57,390 --> 00:40:03,349
think that the application is very

00:39:59,729 --> 00:40:07,170
secure because I give to every user

00:40:03,349 --> 00:40:10,140
digital certificate so I I think that i

00:40:07,170 --> 00:40:12,420
implement a very secure mechanical 10th

00:40:10,140 --> 00:40:15,959
occasion mechanism but if you go inside

00:40:12,420 --> 00:40:18,079
understand all the requests that the

00:40:15,959 --> 00:40:20,910
application is doing with the browser

00:40:18,079 --> 00:40:29,099
you can understand that there is a big

00:40:20,910 --> 00:40:31,769
security flaw okay then we do

00:40:29,099 --> 00:40:33,839
authorization testing we test for pat

00:40:31,769 --> 00:40:35,459
reversal for bypassing go to relational

00:40:33,839 --> 00:40:38,549
schema and testing for privilege

00:40:35,459 --> 00:40:40,189
escalation here for example here you can

00:40:38,549 --> 00:40:44,249
see a site where you can download

00:40:40,189 --> 00:40:49,259
something from for example from the file

00:40:44,249 --> 00:40:53,189
system of the observer and what if you

00:40:49,259 --> 00:40:56,910
do something like that the ID parameter

00:40:53,189 --> 00:40:59,849
area is validated or you can insert

00:40:56,910 --> 00:41:02,069
everything and maybe navigate inside the

00:40:59,849 --> 00:41:05,039
file system of the web application here

00:41:02,069 --> 00:41:08,069
for example you can see the achieve

00:41:05,039 --> 00:41:16,140
pass foodie so all the random process

00:41:08,069 --> 00:41:18,390
etc here you can see out to bypass the

00:41:16,140 --> 00:41:23,189
optimization schema so for example there

00:41:18,390 --> 00:41:27,229
is a and ed user JSP is part of an ad

00:41:23,189 --> 00:41:33,679
missed an administrative main menu and

00:41:27,229 --> 00:41:37,109
you can see that an admin can user I can

00:41:33,679 --> 00:41:41,880
create a new fake user with role 3 and

00:41:37,109 --> 00:41:45,119
group 001 and you have to test if

00:41:41,880 --> 00:41:47,640
another user that has no not the

00:41:45,119 --> 00:41:50,999
privilege of an admin can do the same

00:41:47,640 --> 00:41:53,130
for example if you understand that there

00:41:50,999 --> 00:41:57,449
is there are some administrative

00:41:53,130 --> 00:42:00,959
function this test want to verify if I

00:41:57,449 --> 00:42:02,819
do the same with no privileges what what

00:42:00,959 --> 00:42:05,369
the what is the answer of the

00:42:02,819 --> 00:42:08,279
application the application is correctly

00:42:05,369 --> 00:42:12,419
validate the utilisation mechanism or or

00:42:08,279 --> 00:42:17,459
or not if you test it maybe you can find

00:42:12,419 --> 00:42:19,380
a lot of surprise another test is

00:42:17,459 --> 00:42:21,569
testing for privilege escalation for

00:42:19,380 --> 00:42:24,659
example here the server responds after

00:42:21,569 --> 00:42:29,339
the user authentication here we the

00:42:24,659 --> 00:42:33,239
application user they needn't a needin a

00:42:29,339 --> 00:42:38,279
field with the profile value you can see

00:42:33,239 --> 00:42:40,349
cyst in one and this this value is the

00:42:38,279 --> 00:42:44,939
authorization parameter and once again

00:42:40,349 --> 00:42:47,309
is given on the client that you know

00:42:44,939 --> 00:42:50,909
everything that is on the client is able

00:42:47,309 --> 00:42:54,839
so you have to verify that before using

00:42:50,909 --> 00:42:58,380
this information and what if the user

00:42:54,839 --> 00:43:02,130
modify modify the value from system for

00:42:58,380 --> 00:43:05,519
12 16 3 and in this case we understand

00:43:02,130 --> 00:43:08,729
that we begin we become administrator of

00:43:05,519 --> 00:43:11,369
the application so once again the

00:43:08,729 --> 00:43:16,259
authorization must be on the server side

00:43:11,369 --> 00:43:17,970
not on the client side then we perform a

00:43:16,259 --> 00:43:26,670
business logic testing that

00:43:17,970 --> 00:43:29,220
is it okay iran iran a little bit that

00:43:26,670 --> 00:43:31,080
is a test where we understand for

00:43:29,220 --> 00:43:35,520
example if there is a war flow inside

00:43:31,080 --> 00:43:39,240
the application and for to execute a

00:43:35,520 --> 00:43:42,390
particular function i have to go through

00:43:39,240 --> 00:43:45,540
out step 1 step 2 and step 3 what if

00:43:42,390 --> 00:43:48,090
from the state step one go directly to

00:43:45,540 --> 00:43:49,650
step 3 there is some some mechanism

00:43:48,090 --> 00:43:52,530
inside the application that verify that

00:43:49,650 --> 00:43:55,530
i have to do the step to that yet

00:43:52,530 --> 00:44:00,810
another test then we got for that

00:43:55,530 --> 00:44:03,210
validation testing in euro as I say

00:44:00,810 --> 00:44:04,980
there are the main will never be you can

00:44:03,210 --> 00:44:06,990
find a memuna bit inside application

00:44:04,980 --> 00:44:09,420
because the application are full of

00:44:06,990 --> 00:44:13,460
entry points and is very difficult to

00:44:09,420 --> 00:44:17,430
verify all the entry point and and

00:44:13,460 --> 00:44:19,650
validate correctly the output of the the

00:44:17,430 --> 00:44:24,119
sequel query on the hell adapt query and

00:44:19,650 --> 00:44:26,400
so on so here for example is a reflected

00:44:24,119 --> 00:44:29,670
cross-site scripting we're in the site

00:44:26,400 --> 00:44:33,839
there is a search field at the bottom

00:44:29,670 --> 00:44:37,290
and the what if i write something like

00:44:33,839 --> 00:44:39,359
that instead of home I research for home

00:44:37,290 --> 00:44:42,150
or something like that maybe I can

00:44:39,359 --> 00:44:43,830
insert the script and if the output is

00:44:42,150 --> 00:44:45,480
something like that I understand that

00:44:43,830 --> 00:44:48,300
the day of the application doesn't

00:44:45,480 --> 00:44:51,150
validate the output the storied cross a

00:44:48,300 --> 00:44:53,640
script in here for example we have a

00:44:51,150 --> 00:44:56,070
chart where you can see when you can

00:44:53,640 --> 00:44:58,440
insert a title and message what if the

00:44:56,070 --> 00:45:01,740
application permit you to write an HTML

00:44:58,440 --> 00:45:05,220
and then you post something like that

00:45:01,740 --> 00:45:08,670
and then when I user click on test

00:45:05,220 --> 00:45:11,700
cross-site scripting we will execute on

00:45:08,670 --> 00:45:16,410
the browser the discrete so for example

00:45:11,700 --> 00:45:19,200
I can stall the I can steal the cookie

00:45:16,410 --> 00:45:23,180
of the dough and the the user or I can

00:45:19,200 --> 00:45:26,730
manipulate all the browser of the user

00:45:23,180 --> 00:45:29,860
okay common injection here an example

00:45:26,730 --> 00:45:32,860
from away from a god

00:45:29,860 --> 00:45:36,580
what if there is something like that in

00:45:32,860 --> 00:45:40,330
which I request and a file on the file

00:45:36,580 --> 00:45:43,420
system and simply add something like

00:45:40,330 --> 00:45:46,000
that the result here is something like

00:45:43,420 --> 00:45:50,020
that you you access to the file but you

00:45:46,000 --> 00:45:53,710
can access also to the volume of the

00:45:50,020 --> 00:45:57,070
hard disk then we do web services

00:45:53,710 --> 00:46:00,720
testing there is a a plug-in inside web

00:45:57,070 --> 00:46:05,950
scarab that is very useful for the view

00:46:00,720 --> 00:46:08,560
wsdl so when you find the service you

00:46:05,950 --> 00:46:11,560
can use this plug-in and you can insert

00:46:08,560 --> 00:46:14,680
maybe you can see here something inside

00:46:11,560 --> 00:46:18,010
the and the web service understand how

00:46:14,680 --> 00:46:22,000
the web service can can answer to your

00:46:18,010 --> 00:46:25,360
request here are some some XML

00:46:22,000 --> 00:46:31,210
structural texting for example if I I in

00:46:25,360 --> 00:46:33,880
that the tag of the TV xml request URI

00:46:31,210 --> 00:46:36,760
faints at Law a large payload of the

00:46:33,880 --> 00:46:44,560
inside the XML what what is the answer

00:46:36,760 --> 00:46:48,310
of the service then I shortly introduce

00:46:44,560 --> 00:46:50,950
you the the web application testing then

00:46:48,310 --> 00:46:55,000
it's important to have a testing report

00:46:50,950 --> 00:46:57,820
model so we we created always risk

00:46:55,000 --> 00:47:00,970
rating model it's a very easy it's a

00:46:57,820 --> 00:47:04,450
risk is equal likelihood for the input

00:47:00,970 --> 00:47:06,190
and we need to identify a risk getting

00:47:04,450 --> 00:47:08,830
information about the invulnerability

00:47:06,190 --> 00:47:12,040
their trade Hajin and then understand

00:47:08,830 --> 00:47:16,120
the impact of the sax fell successful

00:47:12,040 --> 00:47:18,340
exploit on the business okay so we can

00:47:16,120 --> 00:47:20,500
understand what what to fix what are the

00:47:18,340 --> 00:47:23,890
risk mode is check etc so here you can

00:47:20,500 --> 00:47:27,190
see that the writing report that we can

00:47:23,890 --> 00:47:29,170
suggest is something like that a in

00:47:27,190 --> 00:47:31,570
exactly summary a technical management

00:47:29,170 --> 00:47:35,380
of review and assessment findings and

00:47:31,570 --> 00:47:38,260
and a table where for each category of

00:47:35,380 --> 00:47:40,390
test you can see all the vulnerabilities

00:47:38,260 --> 00:47:41,140
the name of the vulnerabilities and

00:47:40,390 --> 00:47:43,630
where

00:47:41,140 --> 00:47:46,299
the effort the effect icon we're at the

00:47:43,630 --> 00:47:51,329
finding in the solution and the

00:47:46,299 --> 00:47:51,329
evaluated risk about the vulnerability

00:47:51,359 --> 00:47:59,049
okay so how can you improve the software

00:47:54,579 --> 00:48:02,589
in software development lifecycle the

00:47:59,049 --> 00:48:04,930
ovas guidelines and can help you to

00:48:02,589 --> 00:48:07,599
develop web application in a more secure

00:48:04,930 --> 00:48:10,390
manner for the building guide tell you

00:48:07,599 --> 00:48:12,010
how to develop the web application to

00:48:10,390 --> 00:48:14,230
protect for a sequel injection for

00:48:12,010 --> 00:48:16,569
example the code review guide tell you

00:48:14,230 --> 00:48:19,599
from a white box text the point of view

00:48:16,569 --> 00:48:21,990
how to test the function that you are

00:48:19,599 --> 00:48:24,279
implementing so reviewing the code

00:48:21,990 --> 00:48:26,740
understand that there are security risk

00:48:24,279 --> 00:48:29,140
and the testing I tell you how to

00:48:26,740 --> 00:48:31,000
perform a sequel injection once that you

00:48:29,140 --> 00:48:33,150
have developed the web application and

00:48:31,000 --> 00:48:38,559
you don't know nothing about your

00:48:33,150 --> 00:48:40,930
application so inside the software

00:48:38,559 --> 00:48:43,299
development lifecycle we can divide in

00:48:40,930 --> 00:48:46,450
five phases from the define design

00:48:43,299 --> 00:48:49,390
develop deploy in maintenance phase the

00:48:46,450 --> 00:48:53,079
controls to implement our training on

00:48:49,390 --> 00:48:55,329
the under you on the the user to do

00:48:53,079 --> 00:48:58,900
policy review guidelines adopt

00:48:55,329 --> 00:49:02,049
guidelines do in code review and doing

00:48:58,900 --> 00:49:05,440
web application penetration testing so

00:49:02,049 --> 00:49:08,289
here is a big picture about the sdlc

00:49:05,440 --> 00:49:12,069
inovas guidelines on the left you can

00:49:08,289 --> 00:49:14,319
see that before the SDS is improved the

00:49:12,069 --> 00:49:19,660
august guidelines can give you an alp on

00:49:14,319 --> 00:49:22,539
how you can create the your development

00:49:19,660 --> 00:49:24,730
lifecycle and then in the define and

00:49:22,539 --> 00:49:26,589
design phases you can use the building

00:49:24,730 --> 00:49:30,069
guided to develop a secure software and

00:49:26,589 --> 00:49:32,890
that in the development phase you can

00:49:30,069 --> 00:49:35,799
use the code review guide and before the

00:49:32,890 --> 00:49:41,470
deploy using the testing guy that just

00:49:35,799 --> 00:49:46,150
described sdlc is not a by two bucks to

00:49:41,470 --> 00:49:52,140
buy because you know the it's a very

00:49:46,150 --> 00:49:52,140
complex process and okay

00:49:52,710 --> 00:49:59,250
just a flash about the the PCI standard

00:49:55,810 --> 00:50:04,060
and the OWASP you can see that the

00:49:59,250 --> 00:50:06,370
control 6.5 the PCI standard tell you to

00:50:04,060 --> 00:50:08,920
use the over standard inside your

00:50:06,370 --> 00:50:11,830
application that you're collecting

00:50:08,920 --> 00:50:17,890
information about credit card number and

00:50:11,830 --> 00:50:19,540
so on so this guide is useful we think

00:50:17,890 --> 00:50:21,460
that this guide is useful for the

00:50:19,540 --> 00:50:25,210
industry for the pen test for the pen

00:50:21,460 --> 00:50:27,370
testers so the company that do audit of

00:50:25,210 --> 00:50:31,750
the web application and for the clients

00:50:27,370 --> 00:50:35,790
so we have a methodology that is open

00:50:31,750 --> 00:50:43,000
and share it between the client and the

00:50:35,790 --> 00:50:45,610
shaman and they ended the audit future

00:50:43,000 --> 00:50:47,500
steps and you know what we would like to

00:50:45,610 --> 00:50:50,350
integrate better to develop the code

00:50:47,500 --> 00:50:56,410
review and the testing guide and improve

00:50:50,350 --> 00:50:58,480
the client side security and okay so I

00:50:56,410 --> 00:51:02,200
thanks all the authors of the veteran

00:50:58,480 --> 00:51:29,470
three of the testing guide and we have

00:51:02,200 --> 00:51:32,890
one minute for the answer yeah inside an

00:51:29,470 --> 00:51:35,470
organization yeah we we saw that many

00:51:32,890 --> 00:51:37,330
companies require web application

00:51:35,470 --> 00:51:40,900
penetration tests so the black box

00:51:37,330 --> 00:51:45,460
approach but we know that is the last

00:51:40,900 --> 00:51:49,600
step that we have to do so our idea is

00:51:45,460 --> 00:51:52,420
to begin to implement the control in the

00:51:49,600 --> 00:51:54,370
first phase of the software developers I

00:51:52,420 --> 00:51:57,880
call so from the guidelines and the

00:51:54,370 --> 00:51:59,569
photo code review so we know that doing

00:51:57,880 --> 00:52:02,809
code review is

00:51:59,569 --> 00:52:05,059
is more effective that doing web

00:52:02,809 --> 00:52:09,219
application penetration testing so your

00:52:05,059 --> 00:52:13,880
answer is correct the code review is a

00:52:09,219 --> 00:52:16,819
it's better it's better for because you

00:52:13,880 --> 00:52:19,190
can see the code you can see everything

00:52:16,819 --> 00:52:21,529
about the codon see ok in this line in

00:52:19,190 --> 00:52:26,900
this component you have a problem and

00:52:21,529 --> 00:52:30,079
you can write down the remediation

00:52:26,900 --> 00:52:33,759
immediately and instead if you do a

00:52:30,079 --> 00:52:36,259
black box code a black box assessment

00:52:33,759 --> 00:52:38,959
you know that there is a vulnerability

00:52:36,259 --> 00:52:41,630
but maybe you don't know where inside

00:52:38,959 --> 00:52:44,119
your software and it's more complicated

00:52:41,630 --> 00:52:46,609
and it's another phase of the

00:52:44,119 --> 00:52:56,559
development so more coastal and the eyes

00:52:46,609 --> 00:52:56,559
okay other questions thank you

00:52:59,690 --> 00:53:01,750

YouTube URL: https://www.youtube.com/watch?v=aOcgiTaujQE


