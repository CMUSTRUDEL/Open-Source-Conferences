Title: FOSDEM 2009 Usbpicprog
Publication date: 2011-12-22
Playlist: FOSDEM 2009
Description: 
	FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:08,080 --> 00:00:14,780
okay I hope everyone can hear me my name

00:00:12,020 --> 00:00:19,730
is Franz Clara I'm from the Netherlands

00:00:14,780 --> 00:00:22,550
I deafening I work for the KPI it's a

00:00:19,730 --> 00:00:25,070
particle accelerator but in my spare

00:00:22,550 --> 00:00:27,590
time I work on this nice open source

00:00:25,070 --> 00:00:36,140
project it's called USB Pig product it's

00:00:27,590 --> 00:00:38,690
an open-source USB big programmer before

00:00:36,140 --> 00:00:41,780
I tell you what USB picked progress I

00:00:38,690 --> 00:00:46,070
should first explain what a pig really

00:00:41,780 --> 00:00:51,800
is pic you write it P I see is a

00:00:46,070 --> 00:00:53,899
microcontroller made by microchip and a

00:00:51,800 --> 00:00:56,899
microcontroller is actually a small

00:00:53,899 --> 00:01:01,670
processor but it's it's embedded in one

00:00:56,899 --> 00:01:05,270
chip together with some flash some

00:01:01,670 --> 00:01:09,710
memory and some other functions like IO

00:01:05,270 --> 00:01:13,220
but can be the kind of serial ports a

00:01:09,710 --> 00:01:15,430
analog to digital converters and things

00:01:13,220 --> 00:01:15,430
like that

00:01:18,250 --> 00:01:22,400
well already the front of

00:01:20,210 --> 00:01:25,100
microcontrollers you can find them for

00:01:22,400 --> 00:01:28,009
example in a remote control which I have

00:01:25,100 --> 00:01:31,700
here but you can find them in a

00:01:28,009 --> 00:01:36,290
telephone but in almost every digital

00:01:31,700 --> 00:01:39,890
device and some of them can be pigs USB

00:01:36,290 --> 00:01:41,930
pet progress is an interface to write

00:01:39,890 --> 00:01:45,350
your embedded software which needs to

00:01:41,930 --> 00:01:49,220
run on the on a microprocessor into the

00:01:45,350 --> 00:01:52,340
big device and it consists of shrink

00:01:49,220 --> 00:01:55,880
upon three components one is the

00:01:52,340 --> 00:01:58,220
hardware which well you see it here this

00:01:55,880 --> 00:02:02,479
is the bottom side but the top side you

00:01:58,220 --> 00:02:05,240
see it here well it's actually this big

00:02:02,479 --> 00:02:11,200
you probably can't see it from behind

00:02:05,240 --> 00:02:11,200
and I also still have my first one

00:02:12,730 --> 00:02:17,930
the hardware is also built around to

00:02:16,370 --> 00:02:21,260
take microcontroller so it needs

00:02:17,930 --> 00:02:25,340
firmware so that's also a component and

00:02:21,260 --> 00:02:28,459
there is also a computer program to

00:02:25,340 --> 00:02:37,239
write your compiled program in the into

00:02:28,459 --> 00:02:41,120
the microcontroller the key features of

00:02:37,239 --> 00:02:44,569
USB big proc well I wouldn't be here if

00:02:41,120 --> 00:02:46,400
it wasn't open source but the it is also

00:02:44,569 --> 00:02:49,430
open hardware so that the hardware

00:02:46,400 --> 00:02:52,909
design is freely available and there's

00:02:49,430 --> 00:02:56,480
even a different design which is easier

00:02:52,909 --> 00:03:02,150
to make by yourself because this one you

00:02:56,480 --> 00:03:08,359
will have to be a little bit practiced

00:03:02,150 --> 00:03:12,019
in soldiering well as the name already

00:03:08,359 --> 00:03:15,949
implies it uses USB it's a compact

00:03:12,019 --> 00:03:19,549
design but a nice thing is that it

00:03:15,949 --> 00:03:25,609
doesn't need any external power supply

00:03:19,549 --> 00:03:28,910
to to operate well USB can as you know

00:03:25,609 --> 00:03:33,410
power a lot of give a lot of power like

00:03:28,910 --> 00:03:37,160
100 milliamps by 5 volts and that's

00:03:33,410 --> 00:03:39,410
enough to to power the USB big proc but

00:03:37,160 --> 00:03:42,019
also the target processor that you want

00:03:39,410 --> 00:03:47,260
to program and even some surrounding

00:03:42,019 --> 00:03:50,959
components and the interface is cheap

00:03:47,260 --> 00:03:54,919
well I'll talk about that and it

00:03:50,959 --> 00:03:59,419
supports many devices for example the 10

00:03:54,919 --> 00:04:03,470
F device is 12 f16 f-18 F - well I think

00:03:59,419 --> 00:04:05,810
over 100 device is now supported so

00:04:03,470 --> 00:04:09,740
these are just series

00:04:05,810 --> 00:04:11,540
and a lot more are coming and well I'm

00:04:09,740 --> 00:04:13,310
really putting too much time in this so

00:04:11,540 --> 00:04:16,840
I think I can say it's actively

00:04:13,310 --> 00:04:23,419
developed there are three developers now

00:04:16,840 --> 00:04:27,530
actively busy with the project well you

00:04:23,419 --> 00:04:31,370
can buy this interface for for $20 of 20

00:04:27,530 --> 00:04:33,680
euros but you can make it you can build

00:04:31,370 --> 00:04:36,889
one yourself you can at your own PCB and

00:04:33,680 --> 00:04:45,380
make one for well maybe what less than

00:04:36,889 --> 00:04:48,650
10 euros why would you use USB pay prop

00:04:45,380 --> 00:04:51,800
because there are many other programmers

00:04:48,650 --> 00:04:53,600
available for example microchip has

00:04:51,800 --> 00:04:57,080
their own programmer

00:04:53,600 --> 00:05:00,710
it's called ICD - they have more but

00:04:57,080 --> 00:05:02,900
this is a common one it's not only a

00:05:00,710 --> 00:05:09,410
programmer but also an instructor

00:05:02,900 --> 00:05:13,610
debugger but as you can see it's $160

00:05:09,410 --> 00:05:16,490
and well the firmware of it and even the

00:05:13,610 --> 00:05:18,530
hardware are not open source there are

00:05:16,490 --> 00:05:20,840
some open source tools available to

00:05:18,530 --> 00:05:23,620
communicate with it but I have not found

00:05:20,840 --> 00:05:23,620
a very stable

00:05:23,710 --> 00:05:29,750
there's also another cheap alternative

00:05:27,140 --> 00:05:31,870
available which you can also make

00:05:29,750 --> 00:05:36,169
yourself it's called the JDM programmer

00:05:31,870 --> 00:05:39,050
this one is a serial programmer and well

00:05:36,169 --> 00:05:45,860
that's your laptop still have one well

00:05:39,050 --> 00:05:47,539
mine doesn't and for most of the serial

00:05:45,860 --> 00:05:50,270
ports you will need an external power

00:05:47,539 --> 00:05:54,050
supply you can go out they say on their

00:05:50,270 --> 00:05:56,660
website that you can use it with better

00:05:54,050 --> 00:06:00,979
power that's your serial port supplies

00:05:56,660 --> 00:06:04,370
but some well on some ports it works you

00:06:00,979 --> 00:06:08,990
know some computers it won't and it is

00:06:04,370 --> 00:06:11,740
very slow so it's cheap but I wouldn't

00:06:08,990 --> 00:06:11,740
prefer this one

00:06:12,340 --> 00:06:19,900
let's talk about what the hardware looks

00:06:16,030 --> 00:06:22,150
like it's a very simple design I wanted

00:06:19,900 --> 00:06:28,930
to keep it keep it as cheap as possible

00:06:22,150 --> 00:06:33,539
it's built around pic18 f 25 50 this is

00:06:28,930 --> 00:06:37,300
a pic microcontroller which has native

00:06:33,539 --> 00:06:39,430
USB support so you just need to write

00:06:37,300 --> 00:06:41,979
firmware in order to communicate through

00:06:39,430 --> 00:06:46,419
USB there's no external chip needed or

00:06:41,979 --> 00:06:51,669
whatever and what you see here there's a

00:06:46,419 --> 00:06:53,580
5 4 to 12 volt pump to program this pic

00:06:51,669 --> 00:06:58,419
microcontroller you need a 12 volt

00:06:53,580 --> 00:07:00,400
programming voltage and there's a pump

00:06:58,419 --> 00:07:02,259
which are just a couple of diodes and

00:07:00,400 --> 00:07:06,580
some capacitors which is controlled by

00:07:02,259 --> 00:07:10,569
the main controller to pump the fivefold

00:07:06,580 --> 00:07:14,379
from the USB port up to 12 volt for the

00:07:10,569 --> 00:07:18,849
program in voltage besides that you see

00:07:14,379 --> 00:07:22,210
some status LEDs two jumpers connected

00:07:18,849 --> 00:07:23,710
to those pins a programming header and

00:07:22,210 --> 00:07:29,589
you will need to connect the cable to

00:07:23,710 --> 00:07:31,690
the target device for those who are

00:07:29,589 --> 00:07:33,729
interested in it you probably can't read

00:07:31,690 --> 00:07:37,120
the text but this is the whole schematic

00:07:33,729 --> 00:07:40,710
to see the voltage pump here there this

00:07:37,120 --> 00:07:43,960
is the 5 volt and there are some diodes

00:07:40,710 --> 00:07:45,819
and those two pins are talked out in

00:07:43,960 --> 00:07:49,419
order to create a higher voltage and

00:07:45,819 --> 00:07:52,719
some transistors to switch the to switch

00:07:49,419 --> 00:07:55,029
the the programming voltage these are

00:07:52,719 --> 00:07:59,550
the status LEDs a USB connector and the

00:07:55,029 --> 00:07:59,550
programming interface really that's it

00:07:59,789 --> 00:08:08,229
the hardware has been designed in a

00:08:02,710 --> 00:08:13,210
using key card that's a fully open

00:08:08,229 --> 00:08:16,710
source PCB suite which is well as you

00:08:13,210 --> 00:08:21,410
can see very rich feature rich features

00:08:16,710 --> 00:08:24,930
you can design boards up to 16 layers

00:08:21,410 --> 00:08:28,979
and that it has a rich library and a

00:08:24,930 --> 00:08:31,530
very unused for function but nice for

00:08:28,979 --> 00:08:37,589
for presentations like this it's a it

00:08:31,530 --> 00:08:41,640
even has a 3d viewer the firmware of the

00:08:37,589 --> 00:08:49,050
USB peg block is based on the microchip

00:08:41,640 --> 00:08:52,950
USB framework this is just a bundle of

00:08:49,050 --> 00:08:55,140
short code with some examples to which

00:08:52,950 --> 00:08:58,470
you can compile and you can write it

00:08:55,140 --> 00:09:01,350
into your microcontroller and it will

00:08:58,470 --> 00:09:05,100
have some basic USB functionality like

00:09:01,350 --> 00:09:08,580
book read and writes and you can just

00:09:05,100 --> 00:09:12,300
continue using that framework and well

00:09:08,580 --> 00:09:14,640
make you on your own tasks in it there's

00:09:12,300 --> 00:09:17,640
one little problem with this one it is

00:09:14,640 --> 00:09:20,810
an open-source framework but a premium

00:09:17,640 --> 00:09:27,420
would have preferred to use a GPIO

00:09:20,810 --> 00:09:30,690
framework there are some of them on the

00:09:27,420 --> 00:09:34,890
internet but I haven't managed to get my

00:09:30,690 --> 00:09:39,260
coat compatible with the GPL frameworks

00:09:34,890 --> 00:09:39,260
I will work on that later

00:09:39,410 --> 00:09:44,160
it is also compiled with a microchip

00:09:42,120 --> 00:09:48,870
compiler which is a closed source

00:09:44,160 --> 00:09:51,330
compiler and I'm working on porting the

00:09:48,870 --> 00:09:56,190
code to a small device C compiler which

00:09:51,330 --> 00:09:59,550
is a GCC based compiler so the main

00:09:56,190 --> 00:10:02,430
tasks of the firmware are to communicate

00:09:59,550 --> 00:10:07,350
with the PC application of course the

00:10:02,430 --> 00:10:10,980
the PC application lots some some some

00:10:07,350 --> 00:10:16,140
data compiled firmware and it just sends

00:10:10,980 --> 00:10:18,379
it in strings to the firmware or to the

00:10:16,140 --> 00:10:21,489
hardware

00:10:18,379 --> 00:10:27,049
but other programming algorithms are

00:10:21,489 --> 00:10:29,449
implemented in the firmware so the pin

00:10:27,049 --> 00:10:32,660
this the serial signals in order to

00:10:29,449 --> 00:10:35,720
program the target board are really

00:10:32,660 --> 00:10:37,939
implemented or in the firmware and the

00:10:35,720 --> 00:10:41,269
heart that the PC software is kept very

00:10:37,939 --> 00:10:43,939
simple this is because it is faster to

00:10:41,269 --> 00:10:46,279
implement it in a real-time Nick

00:10:43,939 --> 00:10:50,149
microcontroller faster than on a patient

00:10:46,279 --> 00:10:56,629
a small task is to control the voltage

00:10:50,149 --> 00:10:59,749
bump affair of the controller the PC

00:10:56,629 --> 00:11:02,869
software the PC software is unlike the

00:10:59,749 --> 00:11:07,189
other big programs you find on the

00:11:02,869 --> 00:11:11,470
internet really cross-platform so it

00:11:07,189 --> 00:11:15,949
works on Linux Mac OS 10 and Windows and

00:11:11,470 --> 00:11:19,459
this is well thanks to the WH widgets

00:11:15,949 --> 00:11:27,529
library and dep USB those two libraries

00:11:19,459 --> 00:11:29,839
about the cross platform of course the

00:11:27,529 --> 00:11:32,360
software communicates with you two USB

00:11:29,839 --> 00:11:35,209
picked Rock hardware but also with the

00:11:32,360 --> 00:11:37,429
pic 10 bootloader which is a bootloader

00:11:35,209 --> 00:11:39,470
which a piece of firmware which is

00:11:37,429 --> 00:11:42,649
loaded in a hardware and you have to

00:11:39,470 --> 00:11:44,329
program that once and once it's in there

00:11:42,649 --> 00:11:51,350
you can just upgrade the firmware

00:11:44,329 --> 00:11:54,019
through USB and you can also a USB peg

00:11:51,350 --> 00:11:55,999
pro can communicate with any device

00:11:54,019 --> 00:12:03,199
which has low that you pick them

00:11:55,999 --> 00:12:06,110
bootloader nice things about open source

00:12:03,199 --> 00:12:08,049
software is that you can see that that

00:12:06,110 --> 00:12:12,259
people actually use it because they

00:12:08,049 --> 00:12:15,499
start translating your software the the

00:12:12,259 --> 00:12:17,929
main language is English but well

00:12:15,499 --> 00:12:20,230
actually the first translation I got was

00:12:17,929 --> 00:12:22,570
Arabic surprisingly enough

00:12:20,230 --> 00:12:25,770
but it has now been translated into

00:12:22,570 --> 00:12:28,120
Greek Spanish French Dutch by myself a

00:12:25,770 --> 00:12:37,510
Punjabi even I didn't even know the

00:12:28,120 --> 00:12:41,050
language and Portuguese I want to to

00:12:37,510 --> 00:12:44,350
thank some people the main developer is

00:12:41,050 --> 00:12:48,790
that's me so I want to give some credits

00:12:44,350 --> 00:12:52,270
to myself as well somewhere over there

00:12:48,790 --> 00:12:53,790
right in the back is young pop Ozma is

00:12:52,270 --> 00:12:57,450
has written the bootloader

00:12:53,790 --> 00:13:01,140
implementation in the PC software and

00:12:57,450 --> 00:13:06,100
but he has also made the application

00:13:01,140 --> 00:13:09,340
Macintosh compatible some two or three

00:13:06,100 --> 00:13:13,930
months ago francesco montages someone

00:13:09,340 --> 00:13:17,620
from Italy joined the club of developers

00:13:13,930 --> 00:13:20,920
and he did a lot of GUI improvements and

00:13:17,620 --> 00:13:25,210
he made implementation the application

00:13:20,920 --> 00:13:29,770
multi-threaded Francesco is also are

00:13:25,210 --> 00:13:32,890
working on wxwidgets I also wanted to

00:13:29,770 --> 00:13:37,960
thank the translators Christian Jim

00:13:32,890 --> 00:13:39,640
Patrick had a convoy it and Fabio and I

00:13:37,960 --> 00:13:41,040
couldn't have done the project without

00:13:39,640 --> 00:13:44,800
Big Love

00:13:41,040 --> 00:13:47,320
so I want to thank Nicolas and also kick

00:13:44,800 --> 00:13:51,870
out is very important so I want to thank

00:13:47,320 --> 00:13:56,050
Chompy Chompy air for this nice project

00:13:51,870 --> 00:13:57,850
and well also imported the coffee has

00:13:56,050 --> 00:14:03,820
been provided by our no phone effect

00:13:57,850 --> 00:14:06,070
when I was developing lately so do you

00:14:03,820 --> 00:14:11,190
have any questions I still have two

00:14:06,070 --> 00:14:11,190
minutes yes

00:14:12,120 --> 00:14:16,529
could you talk a bit louder I can't

00:14:25,810 --> 00:14:39,620
I'm sorry I can't understand okay well I

00:14:35,570 --> 00:14:45,649
could have done that actually that was

00:14:39,620 --> 00:14:48,890
my first plan but the the prayer the

00:14:45,649 --> 00:14:51,829
problem is that as serial ports are

00:14:48,890 --> 00:14:56,660
rather slow to control the their lines

00:14:51,829 --> 00:14:59,000
if you want to if you really want to

00:14:56,660 --> 00:15:00,230
make a direct program like that or do

00:14:59,000 --> 00:15:03,589
you mean that you want to communicate

00:15:00,230 --> 00:15:07,640
with the FTDI chip to a pig in order to

00:15:03,589 --> 00:15:11,860
program well why would you because the

00:15:07,640 --> 00:15:11,860
pig that I used already has USB

00:15:27,930 --> 00:15:34,690
okay well yes I could have implemented

00:15:31,800 --> 00:15:40,240
and something like that but I just

00:15:34,690 --> 00:15:43,300
didn't well we can discuss that later

00:15:40,240 --> 00:15:53,410
maybe it's it's long in our story anyone

00:15:43,300 --> 00:15:55,750
else yes the released version is very

00:15:53,410 --> 00:15:58,120
unstable what are some snapshots and are

00:15:55,750 --> 00:16:04,300
getting better all the time that's it's

00:15:58,120 --> 00:16:08,610
very poor still sorry yeah that's why

00:16:04,300 --> 00:16:08,610

YouTube URL: https://www.youtube.com/watch?v=OUcBjViK8bw


