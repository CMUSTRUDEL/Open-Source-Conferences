Title: FOSDEM 2009 Upstart
Publication date: 2011-12-22
Playlist: FOSDEM 2009
Description: 
	By Scott James Remnant

This talk takes a trip along the Roadmap for Upstart 1.0, introducing what features will be available.

Linux has always traditionally lacked good service management facilities, so much so that the typical daemon doesn't use what ones we have and instead relies on hokey shell scripts.

Upstart is being developed to not only solve this problem but also how it, through integration with D-Bus, DeviceKit and similar frameworks, allows service lifecycles to be tied to hardware and system state.

FOSDEM (Free and Open Source Development European Meeting) is a European event centered around Free and Open Source software development. It is aimed at developers and all interested in the Free and Open Source news in the world. Its goals are to enable developers to meet and to promote the awareness and use of free and open source software. More info at http://fosdem.org
Captions: 
	00:00:00,000 --> 00:00:02,030
I

00:00:04,460 --> 00:00:06,520
you

00:00:07,580 --> 00:00:13,400
okay good afternoon everybody and so my

00:00:11,269 --> 00:00:14,820
name is scott james Roman time I've met

00:00:13,400 --> 00:00:16,550
a few of you before I'm sure

00:00:14,820 --> 00:00:19,080
sir I'm going to be talking today about

00:00:16,550 --> 00:00:21,449
upstart and which is a sort of personal

00:00:19,080 --> 00:00:25,700
project of mine and one neptr canonical

00:00:21,449 --> 00:00:27,689
has been sponsoring for urban to and and

00:00:25,700 --> 00:00:31,080
more particular i'm going to be talking

00:00:27,689 --> 00:00:33,629
about the roadmap to upstart 1.0 which

00:00:31,080 --> 00:00:36,830
is going to be the next major version i

00:00:33,629 --> 00:00:39,570
hope so just want to start off by

00:00:36,830 --> 00:00:42,629
talking a little bit about the purpose

00:00:39,570 --> 00:00:45,320
of upstart and so if something to talk

00:00:42,629 --> 00:00:49,020
about a little bit of its history the

00:00:45,320 --> 00:00:51,660
there's a lot of common misconception

00:00:49,020 --> 00:00:53,280
about why we did up style the first one

00:00:51,660 --> 00:00:56,309
of those is that we did it because of

00:00:53,280 --> 00:00:58,140
boot performance and and there's a sort

00:00:56,309 --> 00:01:00,270
of with some of the recent push towards

00:00:58,140 --> 00:01:02,340
throughout the five second boot and so

00:01:00,270 --> 00:01:03,899
on there is well upstart doesn't help

00:01:02,340 --> 00:01:05,160
there well that's true because that's

00:01:03,899 --> 00:01:07,979
never been one of the purposes of

00:01:05,160 --> 00:01:10,080
upstart and so what terms will go a

00:01:07,979 --> 00:01:12,899
little bit over again why why you meet

00:01:10,080 --> 00:01:15,119
at worry did it well the first and

00:01:12,899 --> 00:01:18,509
obvious things upstart is designed to do

00:01:15,119 --> 00:01:20,850
it provides a true service manager we

00:01:18,509 --> 00:01:23,430
don't have one at the moment in linux if

00:01:20,850 --> 00:01:26,549
you go and boot up solaris you'll find

00:01:23,430 --> 00:01:29,159
you've got solaris SMF in there which

00:01:26,549 --> 00:01:30,420
gives you a true service manager and if

00:01:29,159 --> 00:01:32,939
you look at apple they even have

00:01:30,420 --> 00:01:37,229
launched d if you look at windows ypsi

00:01:32,939 --> 00:01:39,570
windows has it's a very very well sort

00:01:37,229 --> 00:01:41,400
of stabilized and service manager in

00:01:39,570 --> 00:01:42,810
there but we don't have one at all in

00:01:41,400 --> 00:01:45,899
fact if you look at your linux box

00:01:42,810 --> 00:01:47,430
you'll see that you what will you think

00:01:45,899 --> 00:01:50,250
of the services are actually just shell

00:01:47,430 --> 00:01:51,930
scripts that do a bunch of commands to

00:01:50,250 --> 00:01:53,579
try and start a particular process and

00:01:51,930 --> 00:01:54,960
when you want to stop it there shell

00:01:53,579 --> 00:01:56,399
scripts that go and try and find that

00:01:54,960 --> 00:01:59,490
process and the process list and then

00:01:56,399 --> 00:02:01,469
try and kill it it's not really doing

00:01:59,490 --> 00:02:06,090
service management at all we recently

00:02:01,469 --> 00:02:08,519
added the status command to a lot of our

00:02:06,090 --> 00:02:09,929
init scripts in a bun too and we found

00:02:08,519 --> 00:02:11,549
that to do this we had to edit every

00:02:09,929 --> 00:02:12,989
single init script we had to add the

00:02:11,549 --> 00:02:14,880
status command to every single init

00:02:12,989 --> 00:02:16,470
script and that status command was

00:02:14,880 --> 00:02:18,180
different for just about every single

00:02:16,470 --> 00:02:20,070
init scripts because you know different

00:02:18,180 --> 00:02:22,590
different processes what we have could

00:02:20,070 --> 00:02:25,560
be found differently so there's no sort

00:02:22,590 --> 00:02:27,030
of service manager what i mean by

00:02:25,560 --> 00:02:27,600
service manager is just off work it's

00:02:27,030 --> 00:02:29,520
probably for

00:02:27,600 --> 00:02:31,200
basic commands and you should get a

00:02:29,520 --> 00:02:33,240
starter service you should be able to

00:02:31,200 --> 00:02:35,580
stop a service you should go to restart

00:02:33,240 --> 00:02:37,140
the service obviously and restarts not

00:02:35,580 --> 00:02:39,660
quite the same as stop and start because

00:02:37,140 --> 00:02:41,490
restart has to be atomic a when do we

00:02:39,660 --> 00:02:44,010
start finishes it should be started

00:02:41,490 --> 00:02:45,720
again and then status you should be able

00:02:44,010 --> 00:02:47,400
to see the status of a running service

00:02:45,720 --> 00:02:48,540
you should be up say you know is squid

00:02:47,400 --> 00:02:50,250
running it should be or tell you yes

00:02:48,540 --> 00:02:52,220
should be able to tell you and it's

00:02:50,250 --> 00:02:54,270
process ID and various things like that

00:02:52,220 --> 00:02:57,030
so that's sort of one of the first girls

00:02:54,270 --> 00:02:58,770
providing that we don't have today well

00:02:57,030 --> 00:03:00,330
plaintiff we're on utley the dis this

00:02:58,770 --> 00:03:02,400
five-minute demon kind of has some of

00:03:00,330 --> 00:03:04,620
these functionality but we don't use it

00:03:02,400 --> 00:03:08,790
in others probably because it's quite

00:03:04,620 --> 00:03:10,470
hard to do another kind of main goal of

00:03:08,790 --> 00:03:12,060
upstart was actually to provide an API

00:03:10,470 --> 00:03:13,890
for other processes to communicate with

00:03:12,060 --> 00:03:16,530
unit demon it's all very well and good

00:03:13,890 --> 00:03:18,450
having a service manager but if your

00:03:16,530 --> 00:03:20,460
service manager kind of keeps itself to

00:03:18,450 --> 00:03:22,980
itself and doesn't really talk to the

00:03:20,460 --> 00:03:26,400
rest of the system then you know it's

00:03:22,980 --> 00:03:28,260
not really that useful so one of the

00:03:26,400 --> 00:03:30,360
mingols all-star game was not only does

00:03:28,260 --> 00:03:33,990
it provide unity the service management

00:03:30,360 --> 00:03:35,760
commands it actually provides them in a

00:03:33,990 --> 00:03:37,500
way that other processes can access

00:03:35,760 --> 00:03:40,020
those commands without having to just

00:03:37,500 --> 00:03:43,290
fork in exactly at the start and command

00:03:40,020 --> 00:03:45,420
on disk and posits output the earliest

00:03:43,290 --> 00:03:47,430
versions that upstart used of private

00:03:45,420 --> 00:03:49,890
api for this the later versions of

00:03:47,430 --> 00:03:52,380
upstart just simply use d bus so you can

00:03:49,890 --> 00:03:55,980
communicate with the service manager / d

00:03:52,380 --> 00:03:57,810
bus and particularly you've got sort of

00:03:55,980 --> 00:03:59,520
various commands you know you can you

00:03:57,810 --> 00:04:00,810
can record tell up start to get a job by

00:03:59,520 --> 00:04:02,600
the name so you can say give me the

00:04:00,810 --> 00:04:05,370
Apache service give me the squid service

00:04:02,600 --> 00:04:07,260
you can list all the jobs this is the

00:04:05,370 --> 00:04:09,000
earliest small district lines oh so you

00:04:07,260 --> 00:04:11,370
can start the job and you can stop a job

00:04:09,000 --> 00:04:13,560
and you can restart a job and query it

00:04:11,370 --> 00:04:17,160
status and so on from from the d-bus in

00:04:13,560 --> 00:04:18,600
space and most usefully of course you

00:04:17,160 --> 00:04:21,030
can create a job from the deepest

00:04:18,600 --> 00:04:22,320
interface and one of the things upstart

00:04:21,030 --> 00:04:24,780
doesn't require us doesn't require that

00:04:22,320 --> 00:04:26,910
the configuration is on the disk so if

00:04:24,780 --> 00:04:28,050
you want to just create a service and

00:04:26,910 --> 00:04:29,910
have it maintained by the service

00:04:28,050 --> 00:04:30,960
manager you can provide all the details

00:04:29,910 --> 00:04:32,009
of that service over the d las

00:04:30,960 --> 00:04:35,059
interfacing

00:04:32,009 --> 00:04:37,020
and start and stop it and so on and

00:04:35,059 --> 00:04:38,789
particularly it's for example if you

00:04:37,020 --> 00:04:41,729
need a long-running F Soaker a

00:04:38,789 --> 00:04:43,379
long-running sort of monitoring service

00:04:41,729 --> 00:04:44,789
you can use upstart to actually manage

00:04:43,379 --> 00:04:47,219
that for you so you don't have to worry

00:04:44,789 --> 00:04:51,719
about the details of it the details of

00:04:47,219 --> 00:04:54,180
service management and also this is kind

00:04:51,719 --> 00:04:55,289
of where the confusion comes from why we

00:04:54,180 --> 00:04:57,180
come to talk about when we're talking

00:04:55,289 --> 00:04:59,249
about boot performance work we always

00:04:57,180 --> 00:05:00,779
talk about upstart in boot performance

00:04:59,249 --> 00:05:03,869
work but that doesn't mean upstart

00:05:00,779 --> 00:05:07,020
itself makes you boot faster what up

00:05:03,869 --> 00:05:08,879
start instead does is many of the the

00:05:07,020 --> 00:05:10,529
perimeters it provides and you have a

00:05:08,879 --> 00:05:13,349
providing a tree service manager it

00:05:10,529 --> 00:05:15,870
allows you to eliminate busy loops sleep

00:05:13,349 --> 00:05:19,259
loops wake race conditions and so on

00:05:15,870 --> 00:05:20,939
from your boot process typically clear

00:05:19,259 --> 00:05:24,569
example for this kind of thing is that

00:05:20,939 --> 00:05:26,279
we have in the in a boot sequence a loop

00:05:24,569 --> 00:05:28,860
which waits for the root filesystem

00:05:26,279 --> 00:05:30,270
device node to appear on disk and then

00:05:28,860 --> 00:05:32,819
another loop after that which actually

00:05:30,270 --> 00:05:35,009
waits for that device mode to be set up

00:05:32,819 --> 00:05:36,270
as if that device and lvm enrage and so

00:05:35,009 --> 00:05:38,659
on we actually need to keep spinning

00:05:36,270 --> 00:05:41,669
until the raid is actually activated

00:05:38,659 --> 00:05:44,069
with upstart the idea is that some you

00:05:41,669 --> 00:05:46,620
can by doing these things and services

00:05:44,069 --> 00:05:48,539
by managing the tasks you can get

00:05:46,620 --> 00:05:50,159
notification that it's complete you can

00:05:48,539 --> 00:05:53,129
you know have an atomic status a

00:05:50,159 --> 00:05:55,019
notification and you can sort of change

00:05:53,129 --> 00:05:57,029
things off each other and services can

00:05:55,019 --> 00:05:58,939
chain off each other so you know you can

00:05:57,029 --> 00:06:01,529
perfect a million in a tool to sleep

00:05:58,939 --> 00:06:04,110
statements or busy loops and so on

00:06:01,529 --> 00:06:06,360
active boot sequence and by stating what

00:06:04,110 --> 00:06:08,370
the requirements of a particular service

00:06:06,360 --> 00:06:12,089
argue can get rid of me trace conditions

00:06:08,370 --> 00:06:13,680
which nobody likes race conditions on

00:06:12,089 --> 00:06:15,120
the other Cal point about upstart which

00:06:13,680 --> 00:06:18,149
is of wasn't quite in its original

00:06:15,120 --> 00:06:20,249
design but that's because the it didn't

00:06:18,149 --> 00:06:21,930
really exist in its original design as

00:06:20,249 --> 00:06:26,219
upstarts intending to be a part of what

00:06:21,930 --> 00:06:28,379
we call the plumbing layer which is

00:06:26,219 --> 00:06:29,909
quite dayglo and colorful here and I do

00:06:28,379 --> 00:06:31,529
apologize because I'm sure that there

00:06:29,909 --> 00:06:34,349
are areas of the plumbing layer which

00:06:31,529 --> 00:06:36,899
have been missed out of this graph and

00:06:34,349 --> 00:06:39,020
but this is kind of the stack that I

00:06:36,899 --> 00:06:41,000
need to bring up an X server and

00:06:39,020 --> 00:06:44,110
use the desktop session right now on

00:06:41,000 --> 00:06:47,060
this let honor on this laptop so

00:06:44,110 --> 00:06:49,250
plumbing layer it's a sort of new term I

00:06:47,060 --> 00:06:50,900
had the first time I really heard this

00:06:49,250 --> 00:06:53,090
term being used was last year so

00:06:50,900 --> 00:06:57,409
upstarts come to in a bit years old now

00:06:53,090 --> 00:06:59,389
so we're so that's why it's not really

00:06:57,409 --> 00:07:00,560
part of its original design the plumbing

00:06:59,389 --> 00:07:03,129
layer symptoms only really been

00:07:00,560 --> 00:07:07,159
described as a single group of processes

00:07:03,129 --> 00:07:08,870
in the last year or so you starts off

00:07:07,159 --> 00:07:10,550
the Colonel's beneath the plumbing layer

00:07:08,870 --> 00:07:12,319
your desktop sessions above the plumbing

00:07:10,550 --> 00:07:15,770
layer it's all of the individual pieces

00:07:12,319 --> 00:07:17,060
that allow you to have a I have a

00:07:15,770 --> 00:07:20,449
desktop running is an ordinary user

00:07:17,060 --> 00:07:22,729
while system hardware and it's always

00:07:20,449 --> 00:07:27,199
been controlled by privileged processes

00:07:22,729 --> 00:07:28,610
and so you have you dev sitting up it

00:07:27,199 --> 00:07:30,139
runs talks to the colonel receives

00:07:28,610 --> 00:07:32,060
notification of changes to the hardware

00:07:30,139 --> 00:07:34,969
and changes to the system state from the

00:07:32,060 --> 00:07:38,750
colonel you def feeds this information

00:07:34,969 --> 00:07:41,930
to how or device kit I don't think

00:07:38,750 --> 00:07:43,370
David's weapons here and but if it was

00:07:41,930 --> 00:07:45,650
you could ask him about the busket and

00:07:43,370 --> 00:07:48,710
it's a replacement for how coming in the

00:07:45,650 --> 00:07:50,389
next couple years those talk and

00:07:48,710 --> 00:07:52,909
announce and provide services and

00:07:50,389 --> 00:07:55,610
objects for peace and huddle new machine

00:07:52,909 --> 00:07:58,159
or the d-bus which allows some of their

00:07:55,610 --> 00:08:02,000
assistant demons like to talk over d-bus

00:07:58,159 --> 00:08:03,949
as well and to provide service

00:08:02,000 --> 00:08:05,779
information avahi provides information

00:08:03,949 --> 00:08:08,990
about services available on the network

00:08:05,779 --> 00:08:11,090
printers other machines safe services

00:08:08,990 --> 00:08:12,680
for HTTP servers iTunes and so on over

00:08:11,090 --> 00:08:14,960
the network network manager asst

00:08:12,680 --> 00:08:17,840
obviously uses the hardware information

00:08:14,960 --> 00:08:19,659
from how to gain networking information

00:08:17,840 --> 00:08:22,430
you bring up network card set those up

00:08:19,659 --> 00:08:24,919
pulseaudio allows you to manage multiple

00:08:22,430 --> 00:08:27,409
sound cards multiple channels and those

00:08:24,919 --> 00:08:30,169
sound cards and allow multiple

00:08:27,409 --> 00:08:32,329
applications to talk to them so it's

00:08:30,169 --> 00:08:34,550
ax-cut is a soft sound mixer but one

00:08:32,329 --> 00:08:37,250
that has awareness of multiplicity in

00:08:34,550 --> 00:08:39,829
both directions these use the console

00:08:37,250 --> 00:08:42,409
karbala thicket libraries to to do

00:08:39,829 --> 00:08:43,610
authorization and allows us to worry

00:08:42,409 --> 00:08:46,640
about you know systems which have

00:08:43,610 --> 00:08:48,240
multiple seats or even multiple cpus so

00:08:46,640 --> 00:08:51,450
we can we can deal with systems that

00:08:48,240 --> 00:08:53,430
so have you know five consoles each of

00:08:51,450 --> 00:08:55,950
which has three cables of mice and so on

00:08:53,430 --> 00:08:58,500
and that we actually know then when a

00:08:55,950 --> 00:09:00,870
USB stick is plugged in which seats of

00:08:58,500 --> 00:09:02,580
which which console which sees the USB

00:09:00,870 --> 00:09:04,470
stick was plugged into and can actually

00:09:02,580 --> 00:09:06,839
provide authorization only for the user

00:09:04,470 --> 00:09:09,959
logged in at that seat and all of these

00:09:06,839 --> 00:09:12,450
services aware of it an upstart

00:09:09,959 --> 00:09:15,450
naturally fits into this plumbing layer

00:09:12,450 --> 00:09:16,860
and in particular the point when

00:09:15,450 --> 00:09:19,589
committing out there saying I'm in

00:09:16,860 --> 00:09:23,010
particular the point at which upstart

00:09:19,589 --> 00:09:28,770
appears OOP in it I have the worst

00:09:23,010 --> 00:09:30,270
clicker in the world sorry then okay and

00:09:28,770 --> 00:09:33,779
the polymer chops are kind of appears is

00:09:30,270 --> 00:09:35,580
alongside the lot and it's of its job it

00:09:33,779 --> 00:09:39,420
doesn't really kind of it doesn't

00:09:35,580 --> 00:09:41,310
provide services it doesn't provide the

00:09:39,420 --> 00:09:43,020
sort of networking dump right hardware

00:09:41,310 --> 00:09:45,450
but what it does do is keep the rest of

00:09:43,020 --> 00:09:47,970
the the system running so upstart would

00:09:45,450 --> 00:09:49,950
be supervising the yudof demon making

00:09:47,970 --> 00:09:51,890
sure it's working supervising hallowed

00:09:49,950 --> 00:09:54,870
vitac it supervising the d-bus demon

00:09:51,890 --> 00:09:56,760
supervising the others'll and policy

00:09:54,870 --> 00:09:58,529
demons and in effect it actually kind of

00:09:56,760 --> 00:10:00,690
does and it's communicating of a debuff

00:09:58,529 --> 00:10:03,420
that provides a plumbing layer service

00:10:00,690 --> 00:10:06,510
for services so you can you can use it

00:10:03,420 --> 00:10:07,829
start and stop services on demand one of

00:10:06,510 --> 00:10:09,839
you is this kind of comes in useful is

00:10:07,829 --> 00:10:12,329
you can start doing things like having

00:10:09,839 --> 00:10:14,010
only having plumbing web components like

00:10:12,329 --> 00:10:15,690
the bluetooth staff only started if

00:10:14,010 --> 00:10:18,360
you've got a Bluetooth device and so on

00:10:15,690 --> 00:10:22,950
so it fits in with this lot somewhere

00:10:18,360 --> 00:10:26,130
along side a lot of it um can talk

00:10:22,950 --> 00:10:27,660
I so that's coming from wait that's kind

00:10:26,130 --> 00:10:29,610
of what upstarts forum where it fits

00:10:27,660 --> 00:10:31,050
into the ecosystem as the moment so I

00:10:29,610 --> 00:10:32,940
just want to give a little bit of a talk

00:10:31,050 --> 00:10:39,450
over the history about start up until

00:10:32,940 --> 00:10:40,860
this point in time so the first first

00:10:39,450 --> 00:10:43,770
version of upstart came out in august

00:10:40,860 --> 00:10:46,800
two thousand six so that's two and a bit

00:10:43,770 --> 00:10:49,950
years ago now i thought it kind of never

00:10:46,800 --> 00:10:51,780
really came out we didn't put her put

00:10:49,950 --> 00:10:53,550
the sort of the packages many places

00:10:51,780 --> 00:10:54,720
that never went into a release it was

00:10:53,550 --> 00:10:57,240
actually developed at the ubuntu

00:10:54,720 --> 00:10:58,950
developer spring team wiesbaden just i

00:10:57,240 --> 00:11:01,920
think i was prior to the knots cog walk

00:10:58,950 --> 00:11:03,840
to start the london stock it was quite

00:11:01,920 --> 00:11:05,400
simple in the terms of jobs jobs

00:11:03,840 --> 00:11:08,580
themselves didn't really you couldn't

00:11:05,400 --> 00:11:10,650
define a service by much more than so

00:11:08,580 --> 00:11:11,880
very command to run and maybe some

00:11:10,650 --> 00:11:15,540
scripts to tear it up and tear it down

00:11:11,880 --> 00:11:18,300
but the events part of it is quite

00:11:15,540 --> 00:11:19,350
complicated and there was it was

00:11:18,300 --> 00:11:22,560
actually turned out to be far too

00:11:19,350 --> 00:11:24,180
complicated at the time and he

00:11:22,560 --> 00:11:26,520
maintained the history of events and so

00:11:24,180 --> 00:11:29,880
on and they it was from had a thought

00:11:26,520 --> 00:11:32,370
syntax hand which what which come would

00:11:29,880 --> 00:11:33,690
be older by today's standards what the

00:11:32,370 --> 00:11:37,020
version we actually first really

00:11:33,690 --> 00:11:40,680
released in oven to was in oven to 610

00:11:37,020 --> 00:11:43,080
and that was 027 and the event system

00:11:40,680 --> 00:11:45,120
was vastly simplified so the event

00:11:43,080 --> 00:11:46,830
system is kind of the core of obstacle

00:11:45,120 --> 00:11:51,660
or the cause of upstart you you have a

00:11:46,830 --> 00:11:53,010
service manager which can be sorry you

00:11:51,660 --> 00:11:55,200
have a service manager which can start

00:11:53,010 --> 00:11:57,150
and stop him and so on your jobs and you

00:11:55,200 --> 00:12:00,000
have an event system that can

00:11:57,150 --> 00:12:01,590
automatically start and stop jobs so the

00:12:00,000 --> 00:12:03,480
you can start and stop jobs and events

00:12:01,590 --> 00:12:05,070
starts the events are generated by

00:12:03,480 --> 00:12:07,650
hardware on your machine by software on

00:12:05,070 --> 00:12:09,990
your machine and thus you can build up

00:12:07,650 --> 00:12:12,420
her as a service management and a mesh

00:12:09,990 --> 00:12:13,950
and services which communicate with each

00:12:12,420 --> 00:12:16,410
other as well as with the rest of the

00:12:13,950 --> 00:12:18,510
system and start and stop themselves and

00:12:16,410 --> 00:12:20,900
the IPC the actual communication with

00:12:18,510 --> 00:12:23,670
app start was very home-brewed it was a

00:12:20,900 --> 00:12:25,030
phoenix domain socket and you talk to it

00:12:23,670 --> 00:12:27,250
and

00:12:25,030 --> 00:12:30,220
you had their as messages you expect

00:12:27,250 --> 00:12:33,430
stars and I it was kind of never really

00:12:30,220 --> 00:12:36,160
adopted it was very ordenar cane cane

00:12:33,430 --> 00:12:37,540
and very much designed for the unit

00:12:36,160 --> 00:12:39,730
control process which comes without

00:12:37,540 --> 00:12:42,220
start and it turned out to be quite

00:12:39,730 --> 00:12:43,540
difficult we tried writing a simple gtk

00:12:42,220 --> 00:12:46,030
front end it turned out that the

00:12:43,540 --> 00:12:48,070
asynchronous on foot message out of all

00:12:46,030 --> 00:12:50,530
the messages it tended to deliver we're

00:12:48,070 --> 00:12:52,450
really not suitable for a graphical

00:12:50,530 --> 00:12:55,300
program which was also expected to be

00:12:52,450 --> 00:12:56,710
out of order and it synchronous blood

00:12:55,300 --> 00:12:58,710
stops naught to was probably the first

00:12:56,710 --> 00:13:01,090
version they've got the start on stop on

00:12:58,710 --> 00:13:06,280
syntax that upstart still carries to

00:13:01,090 --> 00:13:07,720
this day the kind of the main major

00:13:06,280 --> 00:13:09,160
milestone is up sorts of early

00:13:07,720 --> 00:13:13,360
development would be the not three

00:13:09,160 --> 00:13:16,750
series naught 38 was in urban 274 and

00:13:13,360 --> 00:13:19,750
710 and naught 39 which is it was in

00:13:16,750 --> 00:13:23,040
ubuntu 804 and open to 810 the last two

00:13:19,750 --> 00:13:24,970
releases and also in fedora 10 and 11 I

00:13:23,040 --> 00:13:26,260
think it was food or attend that it

00:13:24,970 --> 00:13:28,630
first went in in fedora levinus

00:13:26,260 --> 00:13:32,590
obviously the next release which is an

00:13:28,630 --> 00:13:35,700
hour for now this is the very stable

00:13:32,590 --> 00:13:41,050
version of upstart it was intended for

00:13:35,700 --> 00:13:43,930
distributions to be able to get a deploy

00:13:41,050 --> 00:13:45,880
and test out and experiment with one of

00:13:43,930 --> 00:13:51,790
the kind of key things about which bout

00:13:45,880 --> 00:13:53,770
it is that it's a it's it kind of

00:13:51,790 --> 00:13:56,110
completely backwards he emulates this

00:13:53,770 --> 00:13:59,500
five-minute the the actual surviving it

00:13:56,110 --> 00:14:01,270
demon not the theater scripts but by

00:13:59,500 --> 00:14:03,460
doing that it can run the screw at the

00:14:01,270 --> 00:14:04,990
edge will survive RC script just as

00:14:03,460 --> 00:14:07,300
they're well as the system five demon

00:14:04,990 --> 00:14:08,740
camp this has allowed us to deploy it

00:14:07,300 --> 00:14:10,810
keep it deployed for a couple of years

00:14:08,740 --> 00:14:13,720
making small changes to the code making

00:14:10,810 --> 00:14:16,410
experiments we have experimental kind of

00:14:13,720 --> 00:14:20,080
complete upside based boots and so on

00:14:16,410 --> 00:14:22,270
without actually worrying about having

00:14:20,080 --> 00:14:23,920
to have a flag day we at no point in its

00:14:22,270 --> 00:14:25,780
development do we need a flag day to say

00:14:23,920 --> 00:14:27,280
this is the day with everything switches

00:14:25,780 --> 00:14:29,230
drop start we can always keep support

00:14:27,280 --> 00:14:32,100
for init scripts around forever we just

00:14:29,230 --> 00:14:34,550
would gradually phase them out over time

00:14:32,100 --> 00:14:36,470
so that's kind of allowed us to do this

00:14:34,550 --> 00:14:38,899
and fedoras operating much the same way

00:14:36,470 --> 00:14:41,089
they've they've replace this is five any

00:14:38,899 --> 00:14:42,560
demon with upstart I haven't yet

00:14:41,089 --> 00:14:47,089
replaced their init scripts with upstart

00:14:42,560 --> 00:14:48,769
jobs and this was a description there

00:14:47,089 --> 00:14:51,040
are some of the changes there's actually

00:14:48,769 --> 00:14:53,810
been a major nice art style since then

00:14:51,040 --> 00:14:57,440
upstart naught five came out last year

00:14:53,810 --> 00:14:59,720
this was a fairly large rewrite of

00:14:57,440 --> 00:15:06,649
upstart and this was basing it around

00:14:59,720 --> 00:15:08,060
divas the d-bus version was the kind of

00:15:06,649 --> 00:15:09,680
realization that in the plumbing Blair

00:15:08,060 --> 00:15:11,899
d-bus was really becoming the central

00:15:09,680 --> 00:15:14,420
process it was now it's now no longer

00:15:11,899 --> 00:15:16,089
really conceivable that you would have a

00:15:14,420 --> 00:15:18,560
machine without divas installed on it

00:15:16,089 --> 00:15:20,720
minimal servers and so on may do but

00:15:18,560 --> 00:15:22,720
even in the embedded space the boss has

00:15:20,720 --> 00:15:24,380
become the standard demon for

00:15:22,720 --> 00:15:26,510
communication between the different

00:15:24,380 --> 00:15:30,529
parts of an embedded mobile device and

00:15:26,510 --> 00:15:32,000
so on and so this had kind of a large

00:15:30,529 --> 00:15:34,519
effect on the belt stata me I

00:15:32,000 --> 00:15:37,250
reengineered it to be based on d bus so

00:15:34,519 --> 00:15:40,070
it uses d but internally between its

00:15:37,250 --> 00:15:42,430
limit ctrl and D upstart and also all

00:15:40,070 --> 00:15:44,300
jobs and properties available verde bus

00:15:42,430 --> 00:15:46,730
there was kind of a controversial

00:15:44,300 --> 00:15:49,459
feature of not five and one of the

00:15:46,730 --> 00:15:52,670
things I've been trying to work out is

00:15:49,459 --> 00:15:54,110
how to supervise demons demon processes

00:15:52,670 --> 00:15:55,779
have an annoying habit of for kink and

00:15:54,110 --> 00:15:58,310
going off into the background

00:15:55,779 --> 00:16:01,459
disconnecting them from the process that

00:15:58,310 --> 00:16:03,230
runs them and this is this is kind of

00:16:01,459 --> 00:16:05,930
annoying because you can't really

00:16:03,230 --> 00:16:07,550
supervise them now many other for Vinick

00:16:05,930 --> 00:16:09,230
demons have kind of said well don't fall

00:16:07,550 --> 00:16:10,940
off at the background but that doesn't

00:16:09,230 --> 00:16:13,430
work either because then you don't know

00:16:10,940 --> 00:16:15,620
that the demons actually running if you

00:16:13,430 --> 00:16:17,360
if you take most servers they actually

00:16:15,620 --> 00:16:19,370
don't fall off into the background until

00:16:17,360 --> 00:16:20,870
they're listening on their well-known

00:16:19,370 --> 00:16:24,050
port or they've got their well-known

00:16:20,870 --> 00:16:26,360
name registered on the bus and this is

00:16:24,050 --> 00:16:28,130
very useful because you can you know use

00:16:26,360 --> 00:16:31,279
the before has a notification of

00:16:28,130 --> 00:16:33,680
readiness so we kind of wanted o be able

00:16:31,279 --> 00:16:35,000
to just supervise these and the colonel

00:16:33,680 --> 00:16:37,790
doesn't really provide many interfaces

00:16:35,000 --> 00:16:39,589
for this anyone who follows okay now now

00:16:37,790 --> 00:16:41,720
I've sent a few patches over the years

00:16:39,589 --> 00:16:44,529
to try and remedy this the latest one

00:16:41,720 --> 00:16:47,430
that is needs to be rewritten the game

00:16:44,529 --> 00:16:49,050
the non-stop not five has a feature

00:16:47,430 --> 00:16:52,200
do this from user space using the ptrace

00:16:49,050 --> 00:16:54,510
at Cisco so it can ptrace demons and

00:16:52,200 --> 00:16:56,399
follow their forts and execs and then

00:16:54,510 --> 00:16:58,050
shortly tends to hang in crash your

00:16:56,399 --> 00:17:01,920
machine it turns out Patriots isn't

00:16:58,050 --> 00:17:03,270
really that reliable well and then one

00:17:01,920 --> 00:17:06,569
of the main changes as well that came in

00:17:03,270 --> 00:17:10,800
not five was this operators for event so

00:17:06,569 --> 00:17:13,800
you can say or and and in its and kind

00:17:10,800 --> 00:17:15,449
of in its expressions for sin taxes but

00:17:13,800 --> 00:17:17,760
this doesn't work out so well which I'll

00:17:15,449 --> 00:17:20,250
go into in a bit so that's kind of the

00:17:17,760 --> 00:17:21,929
history of where we went the other thing

00:17:20,250 --> 00:17:23,670
about at door five is it's not actually

00:17:21,929 --> 00:17:25,170
being deployed anywhere yet we've

00:17:23,670 --> 00:17:27,600
deliberately not deployed it in a bun

00:17:25,170 --> 00:17:30,330
too because it's not as stable as naught

00:17:27,600 --> 00:17:33,480
3 and I know Fedora has deliberately not

00:17:30,330 --> 00:17:36,120
deployed it because fedora 11 is going

00:17:33,480 --> 00:17:37,830
to be the base for rel six so they'd

00:17:36,120 --> 00:17:41,429
again they don't want a relatively

00:17:37,830 --> 00:17:42,990
unstable demon being being part of you

00:17:41,429 --> 00:17:45,480
as a chorus the process one on the

00:17:42,990 --> 00:17:48,960
system but it's the sort of the base for

00:17:45,480 --> 00:17:50,760
the current or future development so one

00:17:48,960 --> 00:17:53,100
of the problems without start which I'll

00:17:50,760 --> 00:17:54,090
kind of want to talk about is that well

00:17:53,100 --> 00:17:57,179
we've got the kind of the service

00:17:54,090 --> 00:18:00,000
manager part of it very very stable and

00:17:57,179 --> 00:18:02,760
very secure we haven't really got the

00:18:00,000 --> 00:18:05,730
the syntax for defining when services

00:18:02,760 --> 00:18:07,140
run very well insist by vinnie is easy

00:18:05,730 --> 00:18:10,140
you just put the init script in

00:18:07,140 --> 00:18:12,660
particular directory RC 2 or RC 5

00:18:10,140 --> 00:18:14,130
depending whether you using a debian

00:18:12,660 --> 00:18:17,070
based system or a red hat based system

00:18:14,130 --> 00:18:20,580
in upstart you kind of have to define it

00:18:17,070 --> 00:18:22,320
using events and a simple sort of multi

00:18:20,580 --> 00:18:23,910
user service that well that's not more

00:18:22,320 --> 00:18:25,830
to user if you are red hat but so a

00:18:23,910 --> 00:18:27,750
simple service that runs in many run

00:18:25,830 --> 00:18:29,850
levels would an upstart be defined with

00:18:27,750 --> 00:18:32,130
something like that it's kind of a start

00:18:29,850 --> 00:18:34,170
on runlevel event two three or four or

00:18:32,130 --> 00:18:36,570
five but stop on a run level event

00:18:34,170 --> 00:18:38,370
changing the run level to something not

00:18:36,570 --> 00:18:40,500
two three four or five so it's kind of

00:18:38,370 --> 00:18:42,360
you know it's there's lots and lots of

00:18:40,500 --> 00:18:44,700
problems with that that you can easily

00:18:42,360 --> 00:18:47,010
get it wrong you can easily mismatch the

00:18:44,700 --> 00:18:48,690
two sets of arguments if you do mismatch

00:18:47,010 --> 00:18:50,659
the 20 arguments deliberately it's often

00:18:48,690 --> 00:18:52,099
not obvious why you did that

00:18:50,659 --> 00:18:55,519
you know there's there's a lot of kind

00:18:52,099 --> 00:18:56,659
of ways that isn't really the nicest in

00:18:55,519 --> 00:18:59,749
tights about a dirt and that's the

00:18:56,659 --> 00:19:01,549
simplest possible example so one of the

00:18:59,749 --> 00:19:03,859
big changes we're going to be making pro

00:19:01,549 --> 00:19:07,940
upstart 10 is in this chemist in tax and

00:19:03,859 --> 00:19:11,359
the upstart 10 the syntax for that will

00:19:07,940 --> 00:19:13,070
be just while run level 2 3 4 or 5 you

00:19:11,359 --> 00:19:16,070
can express that wand over to or run

00:19:13,070 --> 00:19:19,159
level 3 that's it merges the two kind of

00:19:16,070 --> 00:19:23,749
the syntax lines into one and matches on

00:19:19,159 --> 00:19:27,529
the run level today another example is

00:19:23,749 --> 00:19:29,840
the the single dependency of the other

00:19:27,529 --> 00:19:33,470
service this would be a service probably

00:19:29,840 --> 00:19:35,269
much like how it would be a service

00:19:33,470 --> 00:19:37,009
that's just depended on d bus to need to

00:19:35,269 --> 00:19:41,149
be running well the d-bus demon is

00:19:37,009 --> 00:19:43,070
running and we would right now you'd

00:19:41,149 --> 00:19:46,190
have to say it started started d bus

00:19:43,070 --> 00:19:48,379
started as an event that d bus the d bus

00:19:46,190 --> 00:19:49,489
service would admit when it started it's

00:19:48,379 --> 00:19:51,559
one of the stuff internal don't stop

00:19:49,489 --> 00:19:54,349
start and the attacks a stop on stopping

00:19:51,559 --> 00:19:56,570
divas which is an event emitted Wendy

00:19:54,349 --> 00:19:59,269
bus is about to be stopped but or has

00:19:56,570 --> 00:20:00,289
been detected that it's died again

00:19:59,269 --> 00:20:02,330
there's build lots of little problems

00:20:00,289 --> 00:20:04,190
for this the difference between started

00:20:02,330 --> 00:20:06,320
and stopped pink is not entirely obvious

00:20:04,190 --> 00:20:10,669
and this openoffice throws a coding

00:20:06,320 --> 00:20:11,929
error into the slide and the it's if you

00:20:10,669 --> 00:20:13,340
had don't you want to start a stop on

00:20:11,929 --> 00:20:16,789
different services again it's kind of

00:20:13,340 --> 00:20:19,309
tricky to it's worse so one point out is

00:20:16,789 --> 00:20:21,830
a much simpler syntax again just wild

00:20:19,309 --> 00:20:26,389
divas while the d-bus demon is actually

00:20:21,830 --> 00:20:30,349
running you want to be run as far as a

00:20:26,389 --> 00:20:32,359
neat feature you can insert depend you

00:20:30,349 --> 00:20:34,759
can insert things dependencies of other

00:20:32,359 --> 00:20:37,249
things an example of this kind of job is

00:20:34,759 --> 00:20:38,869
tom cat if the Tomcat service is

00:20:37,249 --> 00:20:41,239
installed it needs to be running while

00:20:38,869 --> 00:20:43,940
Apache is running as a dependency of

00:20:41,239 --> 00:20:45,169
Apache it's something that most I don't

00:20:43,940 --> 00:20:47,389
think there's another demon allows you

00:20:45,169 --> 00:20:49,549
to do this but in the Tomcat job you can

00:20:47,389 --> 00:20:51,529
actually define it to say that it is

00:20:49,549 --> 00:20:53,599
running all the time that Apache itself

00:20:51,529 --> 00:20:55,159
is actually running if you started

00:20:53,599 --> 00:20:57,090
apache tomcat would get started

00:20:55,159 --> 00:20:59,010
automatically and

00:20:57,090 --> 00:21:00,450
to be running before Apaches running if

00:20:59,010 --> 00:21:02,810
you stopped Apache or stop Tomcat

00:21:00,450 --> 00:21:05,070
perhaps you would come back down again

00:21:02,810 --> 00:21:09,420
now the interesting thing about this is

00:21:05,070 --> 00:21:12,330
if the syntax is very slightly different

00:21:09,420 --> 00:21:14,310
to the syntax for a normal dependency

00:21:12,330 --> 00:21:16,710
quite confusing me so you actually just

00:21:14,310 --> 00:21:19,140
reversed the ink and Ed on the starting

00:21:16,710 --> 00:21:22,890
to started to starting stopping stopped

00:21:19,140 --> 00:21:24,780
and that's not exactly the most and

00:21:22,890 --> 00:21:28,950
easiest syntax to in the world to use

00:21:24,780 --> 00:21:32,010
and so one point 0 introduces before

00:21:28,950 --> 00:21:33,330
cedar st. before actually energy a

00:21:32,010 --> 00:21:36,180
slight competition not entirely

00:21:33,330 --> 00:21:38,310
convinced before is the right key word

00:21:36,180 --> 00:21:41,490
for that but it surprises for now and

00:21:38,310 --> 00:21:45,300
and it you just simply put Tomcat job

00:21:41,490 --> 00:21:46,710
before Apache it hasn't it has an

00:21:45,300 --> 00:21:49,530
interesting sort of side effects which

00:21:46,710 --> 00:21:51,780
are introduced later but it does make

00:21:49,530 --> 00:21:55,560
the service your defining a dependency

00:21:51,780 --> 00:21:57,360
of the service Apache I want to show you

00:21:55,560 --> 00:21:58,620
the difference where if you used to wear

00:21:57,360 --> 00:22:00,840
the current version of upstart where the

00:21:58,620 --> 00:22:03,240
difference runs and jobs kind of have a

00:22:00,840 --> 00:22:04,650
waiting state and running state waiting

00:22:03,240 --> 00:22:06,450
to running when the started running to

00:22:04,650 --> 00:22:08,400
waiting the stopped starting is

00:22:06,450 --> 00:22:12,050
submitted when they're moving waiting to

00:22:08,400 --> 00:22:13,920
running started when they're at running

00:22:12,050 --> 00:22:16,710
stopping limited run into waiting

00:22:13,920 --> 00:22:18,240
stopped when the back waiting you so you

00:22:16,710 --> 00:22:21,330
kind of have this this four-step process

00:22:18,240 --> 00:22:23,250
and the starting and stopping events are

00:22:21,330 --> 00:22:24,780
kind of interesting because they can

00:22:23,250 --> 00:22:28,110
they actually block the service so if

00:22:24,780 --> 00:22:29,850
you start a service and you the starting

00:22:28,110 --> 00:22:31,770
event has to complete before the service

00:22:29,850 --> 00:22:35,040
actually starts so this is what makes

00:22:31,770 --> 00:22:39,540
that the inverse dependency case work so

00:22:35,040 --> 00:22:41,880
the while part of the world part of the

00:22:39,540 --> 00:22:43,830
syntax matches when it's actually the

00:22:41,880 --> 00:22:45,210
running state and the before part

00:22:43,830 --> 00:22:47,640
matches when it's in the waiting state

00:22:45,210 --> 00:22:50,400
I'm going to game with the blocking so a

00:22:47,640 --> 00:22:53,550
process in before would if your process

00:22:50,400 --> 00:22:56,220
if you start process and house has

00:22:53,550 --> 00:22:57,810
things listed as before and then it

00:22:56,220 --> 00:23:03,510
think it waits for those things to be

00:22:57,810 --> 00:23:06,030
started first there's also if you don't

00:23:03,510 --> 00:23:06,410
want if you want to define your own kind

00:23:06,030 --> 00:23:12,020
of

00:23:06,410 --> 00:23:13,700
pieces if you wanted a something running

00:23:12,020 --> 00:23:16,730
from when something starting to stopping

00:23:13,700 --> 00:23:18,920
I when something's first started to when

00:23:16,730 --> 00:23:22,880
it's first stopped you could you can do

00:23:18,920 --> 00:23:25,430
this with from until and it's kind of

00:23:22,880 --> 00:23:26,840
easy way to do but i don't really know

00:23:25,430 --> 00:23:29,420
of any reason you don't want to do that

00:23:26,840 --> 00:23:32,750
but there might be people won't might

00:23:29,420 --> 00:23:34,310
want to do that so this brings us all to

00:23:32,750 --> 00:23:36,020
one of the bugs have not five which is

00:23:34,310 --> 00:23:38,750
one of the main reasons not five never

00:23:36,020 --> 00:23:41,570
got really deployed they if you wanted

00:23:38,750 --> 00:23:43,160
to do a multiple dependency dependency

00:23:41,570 --> 00:23:45,020
on d barson you do this would actually

00:23:43,160 --> 00:23:47,630
be more like what how would look like

00:23:45,020 --> 00:23:49,580
today tens of both d bus on univ and you

00:23:47,630 --> 00:23:54,110
different debose have no into dependency

00:23:49,580 --> 00:23:56,240
and you you might try something like

00:23:54,110 --> 00:23:58,790
start on started d bus and started you

00:23:56,240 --> 00:24:01,520
do and you might try something like stop

00:23:58,790 --> 00:24:03,350
on stopping d bus or stopping you Dev so

00:24:01,520 --> 00:24:05,960
actually it would work you'd put that on

00:24:03,350 --> 00:24:07,760
your system you'd boot up how would wait

00:24:05,960 --> 00:24:09,770
d bus and you def would both be started

00:24:07,760 --> 00:24:11,180
then how would start and then when you

00:24:09,770 --> 00:24:12,830
shut down again it would look like how

00:24:11,180 --> 00:24:15,410
got stopped first he wasn't you'd have

00:24:12,830 --> 00:24:17,390
got stopped first the point which it

00:24:15,410 --> 00:24:19,730
doesn't work is if he then restarted d

00:24:17,390 --> 00:24:22,370
bus or restarted you dev if you actually

00:24:19,730 --> 00:24:27,010
with this job restart d bus how would

00:24:22,370 --> 00:24:31,520
stop it would look is dropping the thing

00:24:27,010 --> 00:24:34,130
yeah how would stop how would actually

00:24:31,520 --> 00:24:35,930
do exactly what you expect d boss would

00:24:34,130 --> 00:24:38,180
start back up again how would not start

00:24:35,930 --> 00:24:39,680
and this this turned out not just to be

00:24:38,180 --> 00:24:42,170
just a bug but he actually turns out to

00:24:39,680 --> 00:24:44,090
be am a basic problem with the way up

00:24:42,170 --> 00:24:45,290
start was processing events in fact

00:24:44,090 --> 00:24:46,640
wouldn't help reason how wasn't

00:24:45,290 --> 00:24:49,850
restarted again it was waiting for you

00:24:46,640 --> 00:24:51,590
dev to start it didn't know that you dev

00:24:49,850 --> 00:24:53,750
was already running because it was

00:24:51,590 --> 00:24:56,450
waiting for an event it wasn't working

00:24:53,750 --> 00:24:58,040
as a state so it was just sit there

00:24:56,450 --> 00:25:01,250
waiting if he restarted diba thank you

00:24:58,040 --> 00:25:04,790
deaf how would we start but you very

00:25:01,250 --> 00:25:07,450
very rarely want to do that now the

00:25:04,790 --> 00:25:09,860
syntax wise one point 0 is obviously

00:25:07,450 --> 00:25:11,220
exactly what you'd expect here it does

00:25:09,860 --> 00:25:14,100
the wild deer us a hand will you

00:25:11,220 --> 00:25:17,190
so you get a nut Jesus intact but

00:25:14,100 --> 00:25:20,520
without the actual the bark of having

00:25:17,190 --> 00:25:24,450
this restart problem with wild works on

00:25:20,520 --> 00:25:26,100
the state while actually make sure that

00:25:24,450 --> 00:25:30,750
dibiasio you make sure the d-bus is

00:25:26,100 --> 00:25:33,210
running it matches the d-bus job time to

00:25:30,750 --> 00:25:36,179
dry throat matches the d-bus job inside

00:25:33,210 --> 00:25:38,760
upstarts so if you were now to restart

00:25:36,179 --> 00:25:42,000
d-bus well d bar son uddhav gives false

00:25:38,760 --> 00:25:44,940
because d boss isn't running d bus

00:25:42,000 --> 00:25:46,830
restarts d-bus becomes true you dev has

00:25:44,940 --> 00:25:49,590
always remained true so the while

00:25:46,830 --> 00:25:52,590
condition is again satisfied so it it

00:25:49,590 --> 00:25:55,980
restarts which is what we actually

00:25:52,590 --> 00:25:59,460
wanted to do and you can combine these

00:25:55,980 --> 00:26:02,220
in kind of quite interesting ways so

00:25:59,460 --> 00:26:04,200
that's a very silly job it once while

00:26:02,220 --> 00:26:07,190
you'd over and before how will before

00:26:04,200 --> 00:26:10,980
device get and from sunrise to sunset

00:26:07,190 --> 00:26:13,320
although I was writing this and as the

00:26:10,980 --> 00:26:15,179
silly example and I realized that

00:26:13,320 --> 00:26:17,340
there's a interesting side effect to the

00:26:15,179 --> 00:26:18,990
before because Howland device came down

00:26:17,340 --> 00:26:20,789
to paintball needa as a result of this

00:26:18,990 --> 00:26:22,830
because you've inserted your job as a

00:26:20,789 --> 00:26:25,289
dependency of howell device get and your

00:26:22,830 --> 00:26:27,900
job depends on you deaf so scenarios out

00:26:25,289 --> 00:26:30,350
so now I'm Highland device kit and you

00:26:27,900 --> 00:26:33,630
can't run either of them at night either

00:26:30,350 --> 00:26:35,580
yeah you can create a very interesting

00:26:33,630 --> 00:26:37,169
things and they actually turned out as

00:26:35,580 --> 00:26:38,669
soon as i did this someone came up with

00:26:37,169 --> 00:26:41,700
a user case exactly why you would want

00:26:38,669 --> 00:26:45,059
to do this so comes up for the battery

00:26:41,700 --> 00:26:46,799
power status talk about it and that you

00:26:45,059 --> 00:26:49,980
can kind of create their interesting

00:26:46,799 --> 00:26:52,110
side effects with us but it it was so i

00:26:49,980 --> 00:26:54,960
cant want to just just go on a kind of

00:26:52,110 --> 00:26:57,240
basic example of what you might do as a

00:26:54,960 --> 00:27:00,990
server administrator so if you've got a

00:26:57,240 --> 00:27:03,419
job in upstart north 5 which is run on

00:27:00,990 --> 00:27:05,730
apache run on my sequel stopped when

00:27:03,419 --> 00:27:08,419
either of them stops you would actually

00:27:05,730 --> 00:27:10,789
about unity that might be a lamp job now

00:27:08,419 --> 00:27:12,080
this is kind of something you can't

00:27:10,789 --> 00:27:15,289
really do you want you want to define a

00:27:12,080 --> 00:27:17,269
rung level but only a run level for your

00:27:15,289 --> 00:27:18,950
service you know your lamp server so

00:27:17,269 --> 00:27:21,859
you'd might define it like this it

00:27:18,950 --> 00:27:24,590
Apache my sequel stops on Apache of my

00:27:21,859 --> 00:27:26,899
seagull you'd actually not start not

00:27:24,590 --> 00:27:29,179
walk through five to start laughs it'll

00:27:26,899 --> 00:27:30,889
tell you lamp is now running but

00:27:29,179 --> 00:27:33,980
annoyingly neither is a patent neither

00:27:30,889 --> 00:27:36,379
Apache or my sequel actually running and

00:27:33,980 --> 00:27:38,239
this is because but not yeah the current

00:27:36,379 --> 00:27:42,559
versions of upstart are very much

00:27:38,239 --> 00:27:44,840
event-based with by design they entirely

00:27:42,559 --> 00:27:47,499
rely on the the knowledge of events and

00:27:44,840 --> 00:27:50,570
passage of events to process things and

00:27:47,499 --> 00:27:52,220
when you started lamp you can you know

00:27:50,570 --> 00:27:53,989
provide it as a system administrator so

00:27:52,220 --> 00:27:56,450
when you started lamp you started this

00:27:53,989 --> 00:27:59,149
lamp service you effect over road it's

00:27:56,450 --> 00:28:01,519
start on condition so it would actually

00:27:59,149 --> 00:28:03,590
stop if a patch on my sequel start but

00:28:01,519 --> 00:28:05,600
it doesn't do anything that makes them

00:28:03,590 --> 00:28:07,340
start in fact I make them start you need

00:28:05,600 --> 00:28:09,739
to go and edit the Apache and my secret

00:28:07,340 --> 00:28:12,320
jobs to put in start on starting lamp

00:28:09,739 --> 00:28:16,129
and so on in there it doesn't quite do

00:28:12,320 --> 00:28:19,309
what you want it to do at all so one

00:28:16,129 --> 00:28:21,259
point of a bit more interesting in our

00:28:19,309 --> 00:28:24,350
lamp job we could put wall Apache my

00:28:21,259 --> 00:28:28,309
land my sequel run wild both of those

00:28:24,350 --> 00:28:30,710
are running and if you try to start lamp

00:28:28,309 --> 00:28:32,960
cannot start lampard not running Apache

00:28:30,710 --> 00:28:34,549
of my secret well that was the first

00:28:32,960 --> 00:28:37,149
idea that's actually completely wrong

00:28:34,549 --> 00:28:39,590
you don't want to do that at all you I

00:28:37,149 --> 00:28:41,809
tend to think any software which tells

00:28:39,590 --> 00:28:43,399
the system administrator off for doing

00:28:41,809 --> 00:28:45,409
something wrong or complains that it

00:28:43,399 --> 00:28:47,330
can't do something and then gives exact

00:28:45,409 --> 00:28:49,609
details of what it can't do and why and

00:28:47,330 --> 00:28:52,489
how to fix the problem is being just

00:28:49,609 --> 00:28:55,039
annoying and in fact you actually yeah

00:28:52,489 --> 00:28:56,659
if if the upstart can tell you exactly

00:28:55,039 --> 00:28:58,999
what commands you effectively need to

00:28:56,659 --> 00:29:00,919
run it and it's just being annoying at

00:28:58,999 --> 00:29:03,859
you it's telling you what well it won't

00:29:00,919 --> 00:29:06,590
do itself so what we actually want see

00:29:03,859 --> 00:29:09,200
is lamp running we want to see if we

00:29:06,590 --> 00:29:12,940
we've got a job called lamp defining on

00:29:09,200 --> 00:29:15,769
actually my sequel then we try to start

00:29:12,940 --> 00:29:18,220
apache try and start yet so to try and

00:29:15,769 --> 00:29:20,799
start lamp we want to see it running

00:29:18,220 --> 00:29:23,980
and we want to see Apache in my sequel

00:29:20,799 --> 00:29:25,840
running as a result this is something

00:29:23,980 --> 00:29:27,460
that a dependency bassist intensity very

00:29:25,840 --> 00:29:29,919
well but event based system doesn't do

00:29:27,460 --> 00:29:33,669
and this is something that does work in

00:29:29,919 --> 00:29:36,520
our start one point up it works because

00:29:33,669 --> 00:29:38,500
the the wild condition works in both

00:29:36,520 --> 00:29:40,480
directions basically if you start trying

00:29:38,500 --> 00:29:42,460
to stop the lamp service it knows the

00:29:40,480 --> 00:29:44,230
Apaches false it knows my sequels this

00:29:42,460 --> 00:29:46,270
false but it knows that there are

00:29:44,230 --> 00:29:48,549
upstart defined jobs it knows how to

00:29:46,270 --> 00:29:50,559
start those so it can start those for

00:29:48,549 --> 00:29:53,049
you and so you start lamp it brings

00:29:50,559 --> 00:29:54,970
Apache my sequel up but the events of

00:29:53,049 --> 00:29:57,130
the vent of lamp coming out starts

00:29:54,970 --> 00:29:58,929
Apache starts my sequel and if you were

00:29:57,130 --> 00:30:01,000
to stop lamp again subsequently they

00:29:58,929 --> 00:30:02,970
would go back down again because the

00:30:01,000 --> 00:30:05,140
service the broad the map has gone away

00:30:02,970 --> 00:30:07,150
there's also most interesting what's the

00:30:05,140 --> 00:30:08,950
other way up as well if you if you bring

00:30:07,150 --> 00:30:11,770
you if you bring if you started which is

00:30:08,950 --> 00:30:14,440
about one yeah if you start apache and

00:30:11,770 --> 00:30:17,710
start my sequel without lamp actually

00:30:14,440 --> 00:30:20,799
started it would actually still say lamp

00:30:17,710 --> 00:30:22,780
is running so you the the system works

00:30:20,799 --> 00:30:24,610
in both directions you if you started

00:30:22,780 --> 00:30:26,679
lamp it would start my sequel a for you

00:30:24,610 --> 00:30:28,870
will start apache for you if you start

00:30:26,679 --> 00:30:30,760
apache my sequel separately the system

00:30:28,870 --> 00:30:32,679
administrator the lamp service would

00:30:30,760 --> 00:30:35,530
also be running because it's conditions

00:30:32,679 --> 00:30:38,860
to be run are also fulfilled so you can

00:30:35,530 --> 00:30:41,860
kind of define little statuses like this

00:30:38,860 --> 00:30:44,080
oh this has a nice side of it run levels

00:30:41,860 --> 00:30:46,809
now can go go just go away you don't

00:30:44,080 --> 00:30:48,669
need this or two three four and five

00:30:46,809 --> 00:30:52,299
with some arbitrary difference you can

00:30:48,669 --> 00:30:54,429
define specific states that you want if

00:30:52,299 --> 00:30:55,960
you if you want to have a lamp state

00:30:54,429 --> 00:30:57,580
that is when your lamp service is

00:30:55,960 --> 00:31:00,130
running or you know customer facing

00:30:57,580 --> 00:31:01,780
website state for your customer facing

00:31:00,130 --> 00:31:03,460
websites in its service dependencies you

00:31:01,780 --> 00:31:06,190
just define that as a file called

00:31:03,460 --> 00:31:07,960
customer facing website and missed in

00:31:06,190 --> 00:31:09,309
its dependencies and it works in both

00:31:07,960 --> 00:31:10,720
directions if you assist an

00:31:09,309 --> 00:31:12,850
administrator to start those individual

00:31:10,720 --> 00:31:14,789
services it will say your customer

00:31:12,850 --> 00:31:17,049
facing website is running if you stop

00:31:14,789 --> 00:31:20,260
customer-facing websites will also stop

00:31:17,049 --> 00:31:21,940
those particular services again so you

00:31:20,260 --> 00:31:23,799
can kind of get rid of this you can

00:31:21,940 --> 00:31:25,270
comply easily would get rid of the run

00:31:23,799 --> 00:31:27,159
level to render authorial them before

00:31:25,270 --> 00:31:27,700
around them five except for that was

00:31:27,159 --> 00:31:30,770
compelled

00:31:27,700 --> 00:31:31,940
you can define we've sort of playing

00:31:30,770 --> 00:31:35,300
with this you can define arbitrary

00:31:31,940 --> 00:31:36,770
states i mean the system state start to

00:31:35,300 --> 00:31:40,100
become easier then if you define them as

00:31:36,770 --> 00:31:42,050
this just this list of dependencies you

00:31:40,100 --> 00:31:44,390
can define a battery state so the

00:31:42,050 --> 00:31:45,980
battery state or a power state would

00:31:44,390 --> 00:31:47,330
define what services could be running

00:31:45,980 --> 00:31:48,650
when you're a battery power what

00:31:47,330 --> 00:31:52,100
services can be running when you're on

00:31:48,650 --> 00:31:53,570
AC power and to make up service not run

00:31:52,100 --> 00:31:55,430
a battery power you simply admit it from

00:31:53,570 --> 00:31:57,830
the battery state and then when you

00:31:55,430 --> 00:31:59,840
switch from battery to power there's did

00:31:57,830 --> 00:32:02,030
the dependency goes away only the

00:31:59,840 --> 00:32:04,100
service would stop so if you don't want

00:32:02,030 --> 00:32:07,220
to your database server battery you only

00:32:04,100 --> 00:32:10,270
have it mr. AC power and then the AC

00:32:07,220 --> 00:32:13,280
power and battery power objects can

00:32:10,270 --> 00:32:19,160
themselves depend on network and

00:32:13,280 --> 00:32:22,280
hardware and all sorts of soliciting so

00:32:19,160 --> 00:32:24,290
other things coming into at one point

00:32:22,280 --> 00:32:28,610
Sarah are some changes since the way the

00:32:24,290 --> 00:32:32,420
events work and then kind of get used in

00:32:28,610 --> 00:32:34,130
in various in various ways for what

00:32:32,420 --> 00:32:36,260
turned start off as just a simple string

00:32:34,130 --> 00:32:38,030
and grew arguments environmental that

00:32:36,260 --> 00:32:43,429
went along with turns out you can do a

00:32:38,030 --> 00:32:46,250
lot with them so you you have sort of

00:32:43,429 --> 00:32:47,510
insolent signal events these signal that

00:32:46,250 --> 00:32:49,400
something has occurred that's all they

00:32:47,510 --> 00:32:50,510
do there they seem that has occurred you

00:32:49,400 --> 00:32:54,890
don't have to remember it occurred

00:32:50,510 --> 00:32:56,660
afterwards it's a transitory event the

00:32:54,890 --> 00:32:59,540
typical example of this is the ctrl Alt

00:32:56,660 --> 00:33:02,900
Delete key it that sends the colonel

00:32:59,540 --> 00:33:04,280
sends a signal to it in it in it in the

00:33:02,900 --> 00:33:07,910
dress of upstart emits this as an

00:33:04,280 --> 00:33:10,520
upstart event and allows you to 21 hook

00:33:07,910 --> 00:33:11,809
onto it so every time you press ctrl

00:33:10,520 --> 00:33:14,000
delete you get a control up to lead to

00:33:11,809 --> 00:33:15,590
it now interesting about this is you

00:33:14,000 --> 00:33:17,450
don't really if you don't really care

00:33:15,590 --> 00:33:19,220
how they use of press ctrl alt delete at

00:33:17,450 --> 00:33:23,240
some point in the past you just you want

00:33:19,220 --> 00:33:24,920
to do something when it's pressed so if

00:33:23,240 --> 00:33:26,690
you were to find quite a simple up

00:33:24,920 --> 00:33:28,970
starts at one point no job there it's

00:33:26,690 --> 00:33:30,470
running well multi-user is a kind of a

00:33:28,970 --> 00:33:33,620
run devil staplers just talking about

00:33:30,470 --> 00:33:35,030
and just uncontrollable eat so well

00:33:33,620 --> 00:33:36,890
you're in the Maltesers age of control

00:33:35,030 --> 00:33:37,700
with the liters pressed it would go are

00:33:36,890 --> 00:33:42,019
two

00:33:37,700 --> 00:33:43,519
so people users more interesting if you

00:33:42,019 --> 00:33:45,320
just keep holding down ctrl delete you'd

00:33:43,519 --> 00:33:47,750
get incrementally more and more wall

00:33:45,320 --> 00:33:50,179
messages you know but it wouldn't stop

00:33:47,750 --> 00:33:51,769
the first time it's run and you might

00:33:50,179 --> 00:33:53,240
get overlapping wall messages if you

00:33:51,769 --> 00:33:55,789
manage to get it really fast each

00:33:53,240 --> 00:33:58,429
individual control delete press spawns a

00:33:55,789 --> 00:34:00,470
new one of these so few round d-bus

00:33:58,429 --> 00:34:01,820
Demon's Run you or ctrl delete how down

00:34:00,470 --> 00:34:06,380
ctrl delete you to get a lot of demo's

00:34:01,820 --> 00:34:09,139
demons yeah so don't do that another

00:34:06,380 --> 00:34:10,730
type of event we tend to get used this

00:34:09,139 --> 00:34:12,980
this relies on the property that when

00:34:10,730 --> 00:34:16,970
you ask upstart to omit event on your

00:34:12,980 --> 00:34:19,399
behalf it doesn't reply to say that the

00:34:16,970 --> 00:34:21,050
event is complete until services have

00:34:19,399 --> 00:34:23,290
been stopped until any tasks have

00:34:21,050 --> 00:34:26,839
completed that are run on these events

00:34:23,290 --> 00:34:29,210
then this is allow so many demons to use

00:34:26,839 --> 00:34:31,790
up starters dispatch team illusion now

00:34:29,210 --> 00:34:34,399
what manager can say the the interface

00:34:31,790 --> 00:34:37,010
is up upstart will then respond when any

00:34:34,399 --> 00:34:39,889
changes to the system as a results the

00:34:37,010 --> 00:34:41,599
interface coming up a complete at PD is

00:34:39,889 --> 00:34:43,700
another example here right now has a dot

00:34:41,599 --> 00:34:46,280
d directory that runs barrister shell

00:34:43,700 --> 00:34:48,560
scripts you can quite trivially turn

00:34:46,280 --> 00:34:50,300
that into an upstart event when have

00:34:48,560 --> 00:34:52,909
those shell scripts inside up inside out

00:34:50,300 --> 00:34:56,329
starts configurations with instead and

00:34:52,909 --> 00:34:59,720
then you can come you want to know about

00:34:56,329 --> 00:35:02,750
the completion age completion completion

00:34:59,720 --> 00:35:03,859
of these rather than ctrl delete you

00:35:02,750 --> 00:35:07,160
don't really care that the events

00:35:03,859 --> 00:35:09,890
completed it's just run every time

00:35:07,160 --> 00:35:12,200
Couture's leads but please you the ACT

00:35:09,890 --> 00:35:15,680
PD is probably emitting a suspender vent

00:35:12,200 --> 00:35:17,480
from 22 upstarts its weight I'll start

00:35:15,680 --> 00:35:19,010
runs very shell scripts various tasks he

00:35:17,480 --> 00:35:21,050
might stop services it might start

00:35:19,010 --> 00:35:23,420
services the high-wage won't start

00:35:21,050 --> 00:35:24,440
survey service suspend boot chart that's

00:35:23,420 --> 00:35:26,960
why you want to start service and the

00:35:24,440 --> 00:35:28,490
suspect it will start and stop services

00:35:26,960 --> 00:35:31,130
and then it can tell some reports to act

00:35:28,490 --> 00:35:34,910
PD when all of the side effects of us

00:35:31,130 --> 00:35:38,180
has been Deventer complete and then but

00:35:34,910 --> 00:35:39,650
now is at PD to take further action in

00:35:38,180 --> 00:35:41,300
fact I think in this case at PD doesn't

00:35:39,650 --> 00:35:44,420
do much more now than run the script

00:35:41,300 --> 00:35:46,369
splitter reboots and shut down a typical

00:35:44,420 --> 00:35:48,980
example these convince you run reboot

00:35:46,369 --> 00:35:50,000
from the reboot command it's a reboot

00:35:48,980 --> 00:35:52,130
into up star

00:35:50,000 --> 00:35:53,630
there's a whole bunch of processing when

00:35:52,130 --> 00:35:56,090
up stock comes back and say the reboot

00:35:53,630 --> 00:35:58,840
effects have been completed the reboot

00:35:56,090 --> 00:36:01,700
command actually calls the reboot Cisco

00:35:58,840 --> 00:36:03,980
so that's sort of how it can you

00:36:01,700 --> 00:36:07,700
just--can convince and then you kind of

00:36:03,980 --> 00:36:10,160
have these state change events which

00:36:07,700 --> 00:36:11,860
indicate that a service has changed data

00:36:10,160 --> 00:36:15,200
or a network card has changed date or

00:36:11,860 --> 00:36:16,610
something else and and probably one of

00:36:15,200 --> 00:36:19,430
the biggest changes again in one point o

00:36:16,610 --> 00:36:23,300
is that these got reversed from not

00:36:19,430 --> 00:36:24,740
point five so you won what used to be

00:36:23,300 --> 00:36:26,450
stopping postgresql changed back to

00:36:24,740 --> 00:36:29,120
postgres will stop inc which was how it

00:36:26,450 --> 00:36:30,740
was before so one of my biggest

00:36:29,120 --> 00:36:32,240
complaint so is gay bar upstart is that

00:36:30,740 --> 00:36:33,440
it's not very well-documented it's not

00:36:32,240 --> 00:36:36,050
very well-documented because I change

00:36:33,440 --> 00:36:38,510
these two often it's still not point O

00:36:36,050 --> 00:36:40,040
so we've still never deliberately asked

00:36:38,510 --> 00:36:41,900
people to move over to up star jobs

00:36:40,040 --> 00:36:45,590
because we kind of want to get things

00:36:41,900 --> 00:36:49,040
right first so this allows you to for

00:36:45,590 --> 00:36:52,310
example in this case when the postgresql

00:36:49,040 --> 00:36:54,530
server stops and has a failed result

00:36:52,310 --> 00:36:56,780
failed means that the demon crashed if

00:36:54,530 --> 00:37:00,350
you can obtain the reason the Democrat

00:36:56,780 --> 00:37:03,380
and xx ignore exit status you actually

00:37:00,350 --> 00:37:04,760
want to run some other command you might

00:37:03,380 --> 00:37:06,350
want to back up your database you might

00:37:04,760 --> 00:37:09,200
only grip for logs you might want to

00:37:06,350 --> 00:37:11,930
vacuum it restore a backup who knows but

00:37:09,200 --> 00:37:14,300
it allows you to run things when other

00:37:11,930 --> 00:37:15,920
things change state and again if

00:37:14,300 --> 00:37:17,150
postgres was repeatedly stopping you'd

00:37:15,920 --> 00:37:21,470
get multiple copies of the script

00:37:17,150 --> 00:37:22,850
running so the you can kind of do that

00:37:21,470 --> 00:37:24,830
you can kind of do other things as well

00:37:22,850 --> 00:37:28,250
you can do this when something starts so

00:37:24,830 --> 00:37:32,000
you could have on Exim starting do some

00:37:28,250 --> 00:37:33,890
script which it may be delivers fail you

00:37:32,000 --> 00:37:36,590
know previously held messages or so on

00:37:33,890 --> 00:37:37,850
or beyond started and but again that's

00:37:36,590 --> 00:37:40,460
not the difference between that and

00:37:37,850 --> 00:37:42,230
doing this is while XM is that if X it

00:37:40,460 --> 00:37:44,060
was to stop your script keeps running

00:37:42,230 --> 00:37:46,160
courage may or may not be what you want

00:37:44,060 --> 00:37:48,200
if it's not what you want use wireless

00:37:46,160 --> 00:37:51,950
and a bomb kind of the difference

00:37:48,200 --> 00:37:54,020
between the toilet another one list of

00:37:51,950 --> 00:37:55,820
things we have finally introduced we

00:37:54,020 --> 00:37:59,060
talking about it for quite a long time

00:37:55,820 --> 00:38:00,620
and it's we've been talking about it

00:37:59,060 --> 00:38:02,750
because it's never been clear it's what

00:38:00,620 --> 00:38:04,310
we actually want to do or not but we

00:38:02,750 --> 00:38:06,620
have taken a decision that is what i

00:38:04,310 --> 00:38:09,290
want to do which is to replace cron when

00:38:06,620 --> 00:38:11,420
at d properly at the moment we've been

00:38:09,290 --> 00:38:14,270
that just kind of leaving chrononaut d

00:38:11,420 --> 00:38:16,700
running and not integrating with up star

00:38:14,270 --> 00:38:19,430
we considered integrating them without

00:38:16,700 --> 00:38:22,580
start to so they'd been used up some

00:38:19,430 --> 00:38:23,930
services on timers but we've now made a

00:38:22,580 --> 00:38:25,910
decision that's actually they're going

00:38:23,930 --> 00:38:29,510
to go away at the end in itself will run

00:38:25,910 --> 00:38:31,160
these features there turns out to be a

00:38:29,510 --> 00:38:33,470
lot of good reasons why you would want

00:38:31,160 --> 00:38:36,470
to get rid of these two demons and fold

00:38:33,470 --> 00:38:37,880
them into in it the behavior well it

00:38:36,470 --> 00:38:39,830
doesn't seem to overlap initially when

00:38:37,880 --> 00:38:41,840
you actually look at it krone hands

00:38:39,830 --> 00:38:43,040
behaviors you want in it to have in your

00:38:41,840 --> 00:38:47,290
house behaviors that you want chrome to

00:38:43,040 --> 00:38:50,810
have so you know they're timed event

00:38:47,290 --> 00:38:53,150
you'll get is the sort of daily hourly

00:38:50,810 --> 00:38:56,270
weekly monthly kind of event that

00:38:53,150 --> 00:38:57,920
upstart will generate so you would be

00:38:56,270 --> 00:39:00,110
able to sort of having something run

00:38:57,920 --> 00:39:03,920
daily just in that sort of job it's a

00:39:00,110 --> 00:39:07,550
daily scrapes whatever you can have a

00:39:03,920 --> 00:39:10,010
specific time events and the syntax for

00:39:07,550 --> 00:39:12,650
that isn't quite worked out yet but you

00:39:10,010 --> 00:39:13,970
can squeeze on people at 8pm is a good

00:39:12,650 --> 00:39:17,300
example if you want something run bailey

00:39:13,970 --> 00:39:20,840
at 8pm you just say that you've got at

00:39:17,300 --> 00:39:23,390
like behavior as well the in two hours

00:39:20,840 --> 00:39:26,210
kind of behavior these of this i want

00:39:23,390 --> 00:39:28,670
this to run in two hours time every two

00:39:26,210 --> 00:39:32,660
hours step like behavior repeatedly

00:39:28,670 --> 00:39:34,520
repeat behavior you can also then start

00:39:32,660 --> 00:39:36,260
off setting events from each other and

00:39:34,520 --> 00:39:38,510
this is where it of the Aksumite

00:39:36,260 --> 00:39:39,860
behavior you want an upstart you want to

00:39:38,510 --> 00:39:42,170
be able to say in it i want to run

00:39:39,860 --> 00:39:43,460
something 45 seconds after startup you

00:39:42,170 --> 00:39:45,260
know you don't have any at startup you

00:39:43,460 --> 00:39:47,180
don't really the boot sequence but you

00:39:45,260 --> 00:39:49,130
know 45 seconds later might be about

00:39:47,180 --> 00:39:51,670
right and you might you know assumably

00:39:49,130 --> 00:39:53,990
you run very i own i stand very nice so

00:39:51,670 --> 00:39:56,330
whatever processing process you're

00:39:53,990 --> 00:39:58,940
running doesn't take up any particularly

00:39:56,330 --> 00:40:00,230
use of cpu and you can run you can

00:39:58,940 --> 00:40:01,930
combine them with all the while states

00:40:00,230 --> 00:40:03,790
like every 10 minutes while a network

00:40:01,930 --> 00:40:07,150
sup you want to run the state over now

00:40:03,790 --> 00:40:10,690
an event a job over over again so you

00:40:07,150 --> 00:40:13,180
can kind of do I build up on on these

00:40:10,690 --> 00:40:15,460
and when I was about brothers overlap

00:40:13,180 --> 00:40:19,450
chrome for example at reboot command

00:40:15,460 --> 00:40:21,490
which is on boot and cron also sends

00:40:19,450 --> 00:40:23,319
males on failure and on Bad which own

00:40:21,490 --> 00:40:25,690
codes well it would be really nice i

00:40:23,319 --> 00:40:27,880
think if in it saintly where male with

00:40:25,690 --> 00:40:29,740
Apaches output when apache crashes so i

00:40:27,880 --> 00:40:32,290
think there's a lot of overlap between

00:40:29,740 --> 00:40:34,420
those two things and just going to

00:40:32,290 --> 00:40:36,250
quickly jump through actions here this

00:40:34,420 --> 00:40:40,119
is the minutes or this or less well

00:40:36,250 --> 00:40:41,380
defined is an action would be for

00:40:40,119 --> 00:40:45,369
example we want to better support

00:40:41,380 --> 00:40:47,589
reloading the syslog demons so when you

00:40:45,369 --> 00:40:50,650
go starts this long reload you when it

00:40:47,589 --> 00:40:52,930
send a hop to the master demon you want

00:40:50,650 --> 00:40:55,480
to better execute another process so you

00:40:52,930 --> 00:40:58,390
want to do a nap apache graceful we do

00:40:55,480 --> 00:40:59,859
send Apache to mask a graceful when you

00:40:58,390 --> 00:41:02,260
run that these are to find inside the

00:40:59,859 --> 00:41:04,540
Apache job for you might want to have a

00:41:02,260 --> 00:41:07,690
rotate logs having a kind of sub job

00:41:04,540 --> 00:41:09,160
action and that's run daily so you can

00:41:07,690 --> 00:41:11,680
define chrome events inside the same

00:41:09,160 --> 00:41:13,690
file that defines your service and you

00:41:11,680 --> 00:41:15,760
can define for example remote sync sub

00:41:13,690 --> 00:41:17,770
demon which runs while there's a network

00:41:15,760 --> 00:41:20,049
device so you can have a demon running

00:41:17,770 --> 00:41:21,730
when it's a network by self up you start

00:41:20,049 --> 00:41:25,210
up a second demon the runs and pears

00:41:21,730 --> 00:41:27,730
with it you can you can actually have

00:41:25,210 --> 00:41:29,230
them on the tap so right now those can

00:41:27,730 --> 00:41:31,450
only run but the parent demon is running

00:41:29,230 --> 00:41:33,760
unattached actions can run at any time

00:41:31,450 --> 00:41:36,069
so even if a patch is stopped Apache

00:41:33,760 --> 00:41:38,349
backup or Apache test configured still

00:41:36,069 --> 00:41:39,790
work when you can even to find

00:41:38,349 --> 00:41:41,920
completely separate services in this

00:41:39,790 --> 00:41:43,900
manner there's there's an argument

00:41:41,920 --> 00:41:47,410
whether Samba should be defined as two

00:41:43,900 --> 00:41:50,319
jobs smbdy MBD or just one job with to

00:41:47,410 --> 00:41:54,150
sort of SMB D&N in BD blocks inside that

00:41:50,319 --> 00:41:56,589
so because they're sufficiently related

00:41:54,150 --> 00:41:58,299
so that's kind of the actions that just

00:41:56,589 --> 00:42:01,740
jumped over that quickly but it's not

00:41:58,299 --> 00:42:05,109
well defined enough yet that's a plan

00:42:01,740 --> 00:42:07,569
i'll stop not 5x this so plans to do

00:42:05,109 --> 00:42:08,200
very rapid releases least monthly from

00:42:07,569 --> 00:42:10,960
now until

00:42:08,200 --> 00:42:12,250
at one point I was ready maybe weekly if

00:42:10,960 --> 00:42:14,980
there's particular things land quick

00:42:12,250 --> 00:42:16,720
enough so 0 5 1 was released couple

00:42:14,980 --> 00:42:18,970
weeks ago and this is a feature

00:42:16,720 --> 00:42:21,730
identical 2500 but it has some major and

00:42:18,970 --> 00:42:23,260
code based improvements and these will

00:42:21,730 --> 00:42:24,730
we have to be signed to bring in the

00:42:23,260 --> 00:42:27,339
color based improvements to devote the

00:42:24,730 --> 00:42:30,130
development north 52 is intended to

00:42:27,339 --> 00:42:32,770
arrive this month and that brings some

00:42:30,130 --> 00:42:34,089
major changes the d-bus API allowing you

00:42:32,770 --> 00:42:36,280
to get sort of there's properties on the

00:42:34,089 --> 00:42:37,810
objects you can't get right now then

00:42:36,280 --> 00:42:40,660
there's milk for three when so unplanned

00:42:37,810 --> 00:42:42,700
after that with whatever changes occur

00:42:40,660 --> 00:42:44,440
there's no particular full kind of list

00:42:42,700 --> 00:42:47,520
of changes in a particular order we're

00:42:44,440 --> 00:42:51,369
just developing their as and when

00:42:47,520 --> 00:42:53,050
upstart are not ten will be the first

00:42:51,369 --> 00:42:55,720
with the new job syntax and I cannot

00:42:53,050 --> 00:42:57,250
expect that around june 2009 so that

00:42:55,720 --> 00:43:00,400
probably four or five releases lot seven

00:42:57,250 --> 00:43:02,200
or five before full then and then we'll

00:43:00,400 --> 00:43:04,390
switch to a North 10 development series

00:43:02,200 --> 00:43:07,030
for bugs and everything it comes up and

00:43:04,390 --> 00:43:10,390
this is intended to arrive in the next

00:43:07,030 --> 00:43:11,470
version of urban too so it's so we will

00:43:10,390 --> 00:43:13,089
see that if you want to sort of play

00:43:11,470 --> 00:43:15,869
with this version stuff you just use

00:43:13,089 --> 00:43:18,670
it's going to be a bunch of karmic so

00:43:15,869 --> 00:43:19,930
you can use that my suspect fedora 12

00:43:18,670 --> 00:43:23,170
will probably pick that up as well in

00:43:19,930 --> 00:43:25,480
its development process and then upstart

00:43:23,170 --> 00:43:27,010
1.0 the current target release date is

00:43:25,480 --> 00:43:31,150
for the notes promised conference in

00:43:27,010 --> 00:43:33,069
September that's important and if I wimp

00:43:31,150 --> 00:43:34,359
out before them and decide it's not 1.0

00:43:33,069 --> 00:43:37,990
cuz it's not feature complete so it

00:43:34,359 --> 00:43:39,730
might be deflecting 1.5 but rather but a

00:43:37,990 --> 00:43:43,180
lot of these features should be ready in

00:43:39,730 --> 00:43:45,790
time for plumbers later this year okay

00:43:43,180 --> 00:43:49,410
so that's a quick tour taught so just a

00:43:45,790 --> 00:43:52,410
any Q&A for about five minutes left so

00:43:49,410 --> 00:43:52,410
yes

00:44:00,110 --> 00:44:08,270
if sorry I didn't catch the last bit big

00:44:02,210 --> 00:44:09,710
so question there would it be easier to

00:44:08,270 --> 00:44:12,320
get it integrated into the distributions

00:44:09,710 --> 00:44:16,760
if we didn't keep futzing the syntax yes

00:44:12,320 --> 00:44:18,290
probably it's one of the reason one of

00:44:16,760 --> 00:44:19,940
the reasons that there's no much

00:44:18,290 --> 00:44:22,460
documentation on the currents in taxes

00:44:19,940 --> 00:44:24,220
because we recommend that any

00:44:22,460 --> 00:44:27,170
distribution that wants to pick it up

00:44:24,220 --> 00:44:29,540
doesn't deploy upstart jobs just yet and

00:44:27,170 --> 00:44:32,000
that they only kind of they stay up very

00:44:29,540 --> 00:44:35,780
close to upstream and and we do it as

00:44:32,000 --> 00:44:36,890
step releases this this does cause some

00:44:35,780 --> 00:44:38,480
problems because there are some

00:44:36,890 --> 00:44:40,570
distributions which aren't yet happy to

00:44:38,480 --> 00:44:42,620
to deploy it because it might change

00:44:40,570 --> 00:44:44,030
especially cause there's some problems

00:44:42,620 --> 00:44:45,650
when some up streams want to go shave

00:44:44,030 --> 00:44:48,740
outside job for something they come to

00:44:45,650 --> 00:44:50,450
me to find out how and I told not to it

00:44:48,740 --> 00:44:52,370
would probably be easier but at the same

00:44:50,450 --> 00:44:55,160
time it's release early and release

00:44:52,370 --> 00:44:57,230
often if we if we stopped the jobs in

00:44:55,160 --> 00:44:59,930
taxing stone when we did no upon one

00:44:57,230 --> 00:45:02,090
then we would right now have something

00:44:59,930 --> 00:45:03,680
that didn't work so it would seems

00:45:02,090 --> 00:45:05,300
better to release it early when it's in

00:45:03,680 --> 00:45:07,760
naught point you know it's still now for

00:45:05,300 --> 00:45:10,910
really its test code it's beta code

00:45:07,760 --> 00:45:13,190
alpha code the intent when we actually

00:45:10,910 --> 00:45:15,500
declare a beta release later on or even

00:45:13,190 --> 00:45:17,780
a final one point 0 then the job syntax

00:45:15,500 --> 00:45:19,550
will be in stone so it's over yeah it

00:45:17,780 --> 00:45:21,350
will be easy to get integrated yes but

00:45:19,550 --> 00:45:23,090
it would be much harder to develop it

00:45:21,350 --> 00:45:24,770
and get it right if if the jobs and tax

00:45:23,090 --> 00:45:27,080
was stayed in stone all the time but

00:45:24,770 --> 00:45:29,120
yeah once I've start 1.0 the intent is

00:45:27,080 --> 00:45:31,190
that so that is it justified jobs and

00:45:29,120 --> 00:45:32,780
tax that be documented and that won't

00:45:31,190 --> 00:45:34,730
change then if it changes after that

00:45:32,780 --> 00:45:40,810
we'll be up start to point o in a major

00:45:34,730 --> 00:45:40,810
rev to make it obvious yep

00:45:42,290 --> 00:45:45,740
so how's that

00:45:56,400 --> 00:46:05,610
so right so it's a question there how do

00:46:03,870 --> 00:46:07,500
you know so if you start tomcat how do

00:46:05,610 --> 00:46:09,240
you know that tom cat is running before

00:46:07,500 --> 00:46:22,470
you start apache is that the question

00:46:09,240 --> 00:46:23,970
you say right so how do you know when

00:46:22,470 --> 00:46:25,950
tom cat isn't really starting it's

00:46:23,970 --> 00:46:34,410
actually started but it can be used by

00:46:25,950 --> 00:46:37,470
Apache all right yeah assuming that if

00:46:34,410 --> 00:46:39,420
you most demons most services aren't

00:46:37,470 --> 00:46:41,790
ready when they just run the process and

00:46:39,420 --> 00:46:44,010
they they need to listen they need to

00:46:41,790 --> 00:46:46,290
set up the state to have a socket open

00:46:44,010 --> 00:46:48,450
or they need to will need to connect

00:46:46,290 --> 00:46:51,480
something how do you know them actually

00:46:48,450 --> 00:46:53,370
running there's various traits first of

00:46:51,480 --> 00:46:54,600
all many of them if they demonize don't

00:46:53,370 --> 00:46:57,150
demonize until after they've done all

00:46:54,600 --> 00:46:58,320
this it allows very good there seem to

00:46:57,150 --> 00:47:00,270
be two thoughts but most people

00:46:58,320 --> 00:47:01,290
processes don't do this because so do

00:47:00,270 --> 00:47:04,410
this because then it allows them to

00:47:01,290 --> 00:47:06,060
report errors of their problems so this

00:47:04,410 --> 00:47:08,610
is one reason why I've been very keen to

00:47:06,060 --> 00:47:10,740
get tracking of demonizing process is

00:47:08,610 --> 00:47:12,150
working because then you just tell it to

00:47:10,740 --> 00:47:13,650
tell tom cat it can fork off into the

00:47:12,150 --> 00:47:15,150
background it can be a demon and it

00:47:13,650 --> 00:47:16,950
won't do that until it's actually ready

00:47:15,150 --> 00:47:18,840
to be wrong otherwise if you rank tom

00:47:16,950 --> 00:47:21,900
cokes and become a patchy that wouldn't

00:47:18,840 --> 00:47:23,670
work either the you can look for a

00:47:21,900 --> 00:47:24,840
socket so you can actually do lists and

00:47:23,670 --> 00:47:27,500
monitoring if when it's actually

00:47:24,840 --> 00:47:29,910
listening on a port you can do that

00:47:27,500 --> 00:47:31,260
tomcat might do the set of socket up

00:47:29,910 --> 00:47:32,910
before it's ready but it's not going to

00:47:31,260 --> 00:47:34,670
be calling except till it's ready so

00:47:32,910 --> 00:47:37,050
anything connecting would block anyway

00:47:34,670 --> 00:47:38,820
in the case of D bus services and other

00:47:37,050 --> 00:47:41,490
parts of the plumbing you can wait for d

00:47:38,820 --> 00:47:43,560
bust names so you can say expect d bus

00:47:41,490 --> 00:47:44,820
name and you can no wait for it so

00:47:43,560 --> 00:47:46,620
they're going to publish its name on the

00:47:44,820 --> 00:47:47,490
bus might not be ready but it's not

00:47:46,620 --> 00:47:50,280
going to be accepting and processing

00:47:47,490 --> 00:47:52,200
d-bus messages till it is ready so go

00:47:50,280 --> 00:47:54,720
get way that many processes might not be

00:47:52,200 --> 00:47:56,880
fully United but there yeah fortunately

00:47:54,720 --> 00:47:59,359
most syscalls tend to block so it's not

00:47:56,880 --> 00:48:03,960
so much for a broad

00:47:59,359 --> 00:48:16,500
look time probably one more question yes

00:48:03,960 --> 00:48:18,060
Daniel yes so question that how if we

00:48:16,500 --> 00:48:20,400
place out and crow on how do we tend to

00:48:18,060 --> 00:48:23,700
do user partitioning so you can set up

00:48:20,400 --> 00:48:27,090
your own rules up as a normal user it's

00:48:23,700 --> 00:48:28,980
actually relatively easy and we we

00:48:27,090 --> 00:48:30,599
actually allow users to do any kind of

00:48:28,980 --> 00:48:32,340
job and service allows users to find

00:48:30,599 --> 00:48:33,900
their own services the users can define

00:48:32,340 --> 00:48:35,340
them in Apache jobs their own everything

00:48:33,900 --> 00:48:36,660
else provided they've got permission to

00:48:35,340 --> 00:48:39,560
run those you know it doesn't run them

00:48:36,660 --> 00:48:42,300
as root it runs them as the user the

00:48:39,560 --> 00:48:44,910
Divas tells us the user name of somebody

00:48:42,300 --> 00:48:46,349
making a user request policy it tells us

00:48:44,910 --> 00:48:48,750
whether they're authorized to make that

00:48:46,349 --> 00:48:51,930
request so we can we can provide very

00:48:48,750 --> 00:48:53,369
simple authorizations for jobs so there

00:48:51,930 --> 00:48:55,830
is probably most likely there'll be a

00:48:53,369 --> 00:48:58,380
dot in it directory and users home

00:48:55,830 --> 00:49:00,150
directories are available in it either

00:48:58,380 --> 00:49:02,400
one of the two both have advantages and

00:49:00,150 --> 00:49:11,369
disadvantages and anything in theirs run

00:49:02,400 --> 00:49:13,170
as that user so groupings up yes exactly

00:49:11,369 --> 00:49:14,400
the point where we would prevent politic

00:49:13,170 --> 00:49:16,260
it's there to prevent to user from it

00:49:14,400 --> 00:49:17,700
and controllers elite event and if the

00:49:16,260 --> 00:49:20,520
user was authorized to do the ctrl alt

00:49:17,700 --> 00:49:22,230
delete event only so if the policy kit

00:49:20,520 --> 00:49:25,050
allows you to break breach the user

00:49:22,230 --> 00:49:26,400
barrier and if you go if a user in its

00:49:25,050 --> 00:49:28,830
control of delete event they're allowed

00:49:26,400 --> 00:49:32,730
to do that however it would only start

00:49:28,830 --> 00:49:34,470
and stop their services how well if if

00:49:32,730 --> 00:49:36,660
they're defined by policy kit they can

00:49:34,470 --> 00:49:38,820
that control the event could start and

00:49:36,660 --> 00:49:40,040
stop users at root services as well so

00:49:38,820 --> 00:49:41,609
that allows us to have sub

00:49:40,040 --> 00:49:43,170
non-privileged parts of the system

00:49:41,609 --> 00:49:44,880
sending events to privileged parts of

00:49:43,170 --> 00:49:47,700
the system so it doesn't deal authorize

00:49:44,880 --> 00:49:50,339
it it doesn't you refuse it it just only

00:49:47,700 --> 00:49:51,359
only affects your services so you can

00:49:50,339 --> 00:49:53,339
you can muck around with your own

00:49:51,359 --> 00:49:54,420
services it doesn't then it doesn't let

00:49:53,339 --> 00:49:59,190
you do anything you couldn't do with a

00:49:54,420 --> 00:50:02,570
shell anyway so yeah yeah I think so got

00:49:59,190 --> 00:50:02,570

YouTube URL: https://www.youtube.com/watch?v=ggwHqY2bLik


