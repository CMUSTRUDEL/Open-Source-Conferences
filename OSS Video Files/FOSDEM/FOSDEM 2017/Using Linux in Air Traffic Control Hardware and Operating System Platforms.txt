Title: Using Linux in Air Traffic Control Hardware and Operating System Platforms
Publication date: 2018-03-06
Playlist: FOSDEM 2017
Description: 
	by Gerolf Ziegenhain

At: FOSDEM 2017

How can Open Source Software and safety critical systems work together? DFSGmbH relies on Linux for its core air traffic control systems. We havesuccessfully managed to standardize a highly reliable, modular operatingsystem and hardware platform at DFS.

In a brief overview we explain the challenges, technical and non-technicalones, we have faced getting to the modular platforms. What approaches did wetake and why? Which ones did work out in the long end? We will cover a broadrange of aspects ranging from hardware life cycles, application lifecycles,regulations, deployment solutions, user acceptance, cost cutting and testing.


Room: Janson
Scheduled start: 2017-02-05 16:00:00
Captions: 
	00:00:00,030 --> 00:00:03,260
so I hope you can

00:00:04,500 --> 00:00:11,639
you're me right no you cannot hear me

00:00:09,410 --> 00:00:14,520
okay so that's better I can't go away

00:00:11,639 --> 00:00:17,670
have you ever imagined how to use Linux

00:00:14,520 --> 00:00:19,170
in mission critical systems like air

00:00:17,670 --> 00:00:21,269
traffic control imagine you're sitting

00:00:19,170 --> 00:00:23,279
in a plane looking outside and probably

00:00:21,269 --> 00:00:25,740
you're wondering are these guys doing

00:00:23,279 --> 00:00:28,199
their job and maybe my code is used

00:00:25,740 --> 00:00:31,109
somewhere in the plane in the core

00:00:28,199 --> 00:00:32,189
systems for air traffic control my name

00:00:31,109 --> 00:00:35,070
is Gayle Hough singing I'm I'm

00:00:32,189 --> 00:00:36,600
responsible at DFS for the operating

00:00:35,070 --> 00:00:40,080
system development and half of

00:00:36,600 --> 00:00:42,540
standardizations and in the next 50

00:00:40,080 --> 00:00:44,400
minutes I will try to introduce you into

00:00:42,540 --> 00:00:46,770
the world of air traffic control and

00:00:44,400 --> 00:00:49,310
Linux software developments in air

00:00:46,770 --> 00:00:49,310
traffic control

00:01:24,460 --> 00:01:34,630
so I try to improvise while they find

00:01:28,220 --> 00:01:34,630
the technical solution ok so let's go on

00:01:36,470 --> 00:01:39,549
[Music]

00:01:44,289 --> 00:01:49,880
let's continue this one it doesn't

00:01:46,520 --> 00:01:52,250
matter so we can improvise we actually

00:01:49,880 --> 00:01:53,810
write into the topic the integration of

00:01:52,250 --> 00:01:57,979
hardware and software is very important

00:01:53,810 --> 00:02:00,080
to us this talk is a memory of my former

00:01:57,979 --> 00:02:05,119
boss and mentor who happened to pass

00:02:00,080 --> 00:02:08,390
away just two weeks ago so the title of

00:02:05,119 --> 00:02:11,660
my talk using air traffic using using

00:02:08,390 --> 00:02:15,019
Linux in air traffic control hardware

00:02:11,660 --> 00:02:17,030
and software platforms the agenda for

00:02:15,019 --> 00:02:20,390
today is quite packed so I try to catch

00:02:17,030 --> 00:02:22,370
up at first we start off with an air

00:02:20,390 --> 00:02:24,170
traffic control for dummies of course we

00:02:22,370 --> 00:02:28,010
need to know what's the world I'm living

00:02:24,170 --> 00:02:30,440
in what are my perspectives on Linux the

00:02:28,010 --> 00:02:32,739
history of Linux in DFS how long do we

00:02:30,440 --> 00:02:35,930
use it what did we learn on the way and

00:02:32,739 --> 00:02:37,940
then I want to show you what are the

00:02:35,930 --> 00:02:40,370
current challenges and what are the do's

00:02:37,940 --> 00:02:45,010
and don'ts we learned in the past ten

00:02:40,370 --> 00:02:48,470
years using Linux for core systems

00:02:45,010 --> 00:02:50,930
finally I show you how the structure of

00:02:48,470 --> 00:02:54,769
all modular platforms look like today

00:02:50,930 --> 00:02:55,459
and finally I try to show you what will

00:02:54,769 --> 00:03:02,420
come next

00:02:55,459 --> 00:03:05,030
what's the view for the future so ATC

00:03:02,420 --> 00:03:07,519
for dummies the domain I'm living in is

00:03:05,030 --> 00:03:09,950
quite different from anything else you

00:03:07,519 --> 00:03:12,709
know probably I'm living in the world

00:03:09,950 --> 00:03:15,620
where radar systems are 30 years old

00:03:12,709 --> 00:03:18,890
where we have floppy disks still running

00:03:15,620 --> 00:03:21,650
the software for ADA systems and they

00:03:18,890 --> 00:03:24,050
still run fine and on good shape we have

00:03:21,650 --> 00:03:25,160
departments taking care for on these

00:03:24,050 --> 00:03:27,890
parts

00:03:25,160 --> 00:03:31,730
and they actually can dissolve their

00:03:27,890 --> 00:03:34,220
chips and exchange them with FPGAs and

00:03:31,730 --> 00:03:36,800
stuff like that so this is the world I'm

00:03:34,220 --> 00:03:39,080
living in what is the air traffic

00:03:36,800 --> 00:03:40,970
control by the way what is your core

00:03:39,080 --> 00:03:44,170
business probably you think of these

00:03:40,970 --> 00:03:47,840
guys sitting around doing some gestures

00:03:44,170 --> 00:03:51,320
showing the plane where to go yes this

00:03:47,840 --> 00:03:54,890
is the air traffic control - but our

00:03:51,320 --> 00:03:56,720
systems look more like that so we have

00:03:54,890 --> 00:03:59,360
one guys sitting in front of a radar

00:03:56,720 --> 00:04:02,570
display he's seeing a lots of planes

00:03:59,360 --> 00:04:04,730
he's seeing information on these planes

00:04:02,570 --> 00:04:06,430
and he's talking to the pilots and

00:04:04,730 --> 00:04:09,380
giving him commands where to go

00:04:06,430 --> 00:04:12,140
sounds easy these people are always

00:04:09,380 --> 00:04:14,300
working in pairs one is the controller

00:04:12,140 --> 00:04:17,030
who's actually doing the talking to the

00:04:14,300 --> 00:04:19,820
pilot and the other one is organizing

00:04:17,030 --> 00:04:24,020
all the interfaces to other air blocks

00:04:19,820 --> 00:04:26,240
to other air-traffic centers etc etc and

00:04:24,020 --> 00:04:30,020
as you can see there are lots of systems

00:04:26,240 --> 00:04:31,850
behind and our job is of course to

00:04:30,020 --> 00:04:35,180
provide these systems to build these

00:04:31,850 --> 00:04:40,070
systems and nowadays most of them run

00:04:35,180 --> 00:04:43,760
under Linux if you take a look in the

00:04:40,070 --> 00:04:46,850
sky for one day you can see sorry over

00:04:43,760 --> 00:04:49,730
Germany as you can see roughly 10,000

00:04:46,850 --> 00:04:53,240
flights per day going up and down flying

00:04:49,730 --> 00:04:56,720
around and in order to understand this

00:04:53,240 --> 00:04:59,900
big mess a short introduction in air

00:04:56,720 --> 00:05:01,460
blocks we have roughly two different

00:04:59,900 --> 00:05:02,150
kinds of air blocks we have upper

00:05:01,460 --> 00:05:03,830
airspace

00:05:02,150 --> 00:05:06,380
this is everything flying around over

00:05:03,830 --> 00:05:08,270
countries and we have the lower airspace

00:05:06,380 --> 00:05:11,810
this is everything starting and

00:05:08,270 --> 00:05:14,060
descending sounds easy why should you

00:05:11,810 --> 00:05:17,750
set a separate these two kinds of

00:05:14,060 --> 00:05:19,730
systems because the speeds and the

00:05:17,750 --> 00:05:22,460
movements the planes make are quite

00:05:19,730 --> 00:05:25,130
different as you can imagine if a plane

00:05:22,460 --> 00:05:27,050
is flying over country it will not so

00:05:25,130 --> 00:05:29,900
often change its direction but we'll go

00:05:27,050 --> 00:05:34,390
with a very high speed in contrast if

00:05:29,900 --> 00:05:34,390
it's starting or landing sounds easy

00:05:35,840 --> 00:05:42,000
so what are the systems behind the

00:05:39,060 --> 00:05:45,840
systems behind our core infrastructure a

00:05:42,000 --> 00:05:50,460
safety critical infrastructure and one

00:05:45,840 --> 00:05:53,600
important aspect just in advance we are

00:05:50,460 --> 00:05:56,070
not into security safety is the topic

00:05:53,600 --> 00:05:59,520
safety is more important safety means

00:05:56,070 --> 00:06:02,669
our systems have more or less direct

00:05:59,520 --> 00:06:05,040
impact on the lives of others so we have

00:06:02,669 --> 00:06:08,570
to take care that the safety of the

00:06:05,040 --> 00:06:11,250
systems is guaranteed in case of doubt

00:06:08,570 --> 00:06:14,150
we have no problem if the system fails

00:06:11,250 --> 00:06:18,720
but it should be a determined fail in

00:06:14,150 --> 00:06:21,479
contrast to security topics so we have

00:06:18,720 --> 00:06:23,729
special requirements for example some of

00:06:21,479 --> 00:06:25,500
our integration requirements we could

00:06:23,729 --> 00:06:27,540
not take a microphone like this this is

00:06:25,500 --> 00:06:29,430
bad imagine you want to talk to a pilot

00:06:27,540 --> 00:06:31,160
and your microphone stops working this

00:06:29,430 --> 00:06:34,050
is bad

00:06:31,160 --> 00:06:36,720
so we need application support for the

00:06:34,050 --> 00:06:38,160
whole life cycle of the system ok sounds

00:06:36,720 --> 00:06:41,760
easy what's the life cycle of the system

00:06:38,160 --> 00:06:45,750
the life cycle of a system is easily

00:06:41,760 --> 00:06:48,240
between updates eight years example the

00:06:45,750 --> 00:06:50,880
current system for Europe which is

00:06:48,240 --> 00:06:53,580
developed in cooperation with TFS is in

00:06:50,880 --> 00:06:57,630
development since 15 years in a legal

00:06:53,580 --> 00:07:00,120
life end of this year so this is what

00:06:57,630 --> 00:07:03,060
I'm talking about by application support

00:07:00,120 --> 00:07:05,610
for the whole life cycle of course we

00:07:03,060 --> 00:07:09,870
have high quality standards we will jump

00:07:05,610 --> 00:07:13,770
into them later on and we need proofs

00:07:09,870 --> 00:07:16,620
that actually the systems work paperwork

00:07:13,770 --> 00:07:18,930
alone a certificate or a document yes

00:07:16,620 --> 00:07:22,289
yes we can fulfill this is not enough we

00:07:18,930 --> 00:07:24,740
actually do tests even if there's enough

00:07:22,289 --> 00:07:27,690
paperwork and certificates existence and

00:07:24,740 --> 00:07:30,510
reality shows that we are right we

00:07:27,690 --> 00:07:33,440
discover failures what these failures

00:07:30,510 --> 00:07:37,229
are I will show you some small examples

00:07:33,440 --> 00:07:39,300
of course you can bet we don't need any

00:07:37,229 --> 00:07:41,940
single point of failure and we need

00:07:39,300 --> 00:07:43,860
fallback systems or system architectures

00:07:41,940 --> 00:07:46,380
are we have redundant systems of course

00:07:43,860 --> 00:07:49,710
and these redundant systems have

00:07:46,380 --> 00:07:51,420
systems so if the primary system will go

00:07:49,710 --> 00:07:55,560
down we have a fallback system which

00:07:51,420 --> 00:07:58,440
will take over this has implications for

00:07:55,560 --> 00:08:00,420
the architecture of the systems if you

00:07:58,440 --> 00:08:04,140
want to have a fallback system you

00:08:00,420 --> 00:08:06,210
should have the most you should have

00:08:04,140 --> 00:08:08,580
something which is completely dissimilar

00:08:06,210 --> 00:08:10,860
to the primary system means we use

00:08:08,580 --> 00:08:13,320
different CPU architectures use

00:08:10,860 --> 00:08:14,970
different operating systems we use

00:08:13,320 --> 00:08:17,100
different applications and even

00:08:14,970 --> 00:08:19,140
different requirements heads and

00:08:17,100 --> 00:08:24,530
engineers developing these applications

00:08:19,140 --> 00:08:24,530
in order to avoid any systemic failures

00:08:27,080 --> 00:08:31,230
what kind of environment are we

00:08:29,700 --> 00:08:32,099
operating in maybe this is also

00:08:31,230 --> 00:08:35,099
interesting

00:08:32,099 --> 00:08:37,320
of course air traffic control is

00:08:35,099 --> 00:08:39,840
something controlled by the governments

00:08:37,320 --> 00:08:42,300
because if you control the air spaces

00:08:39,840 --> 00:08:45,210
over a country clearly this is a

00:08:42,300 --> 00:08:47,640
governmental task but it has been

00:08:45,210 --> 00:08:50,460
regulated by the European Union that

00:08:47,640 --> 00:08:52,770
private companies nowaday DFS is a

00:08:50,460 --> 00:08:56,940
private company can take over these

00:08:52,770 --> 00:08:59,910
tasks and we have a lot of abbreviations

00:08:56,940 --> 00:09:01,710
here welcome to my world in DFS we have

00:08:59,910 --> 00:09:06,770
a lot of abbreviations I will try to

00:09:01,710 --> 00:09:09,330
explain them to you fabric means one

00:09:06,770 --> 00:09:11,760
aspect of cost-saving

00:09:09,330 --> 00:09:14,430
of increasing the efficiency in air

00:09:11,760 --> 00:09:18,270
space is organizing the air blocks in a

00:09:14,430 --> 00:09:21,930
more efficient way in the old times air

00:09:18,270 --> 00:09:24,570
traffic control was governmental and if

00:09:21,930 --> 00:09:26,160
a plane flies from here to the United

00:09:24,570 --> 00:09:27,780
States you will cross different

00:09:26,160 --> 00:09:29,220
countries and every time a different

00:09:27,780 --> 00:09:32,100
Center will take over this is not

00:09:29,220 --> 00:09:34,680
efficient it is better to create the air

00:09:32,100 --> 00:09:37,020
blocks in a manner that they follow the

00:09:34,680 --> 00:09:40,350
routes of the actual airplanes this is

00:09:37,020 --> 00:09:42,950
what Harbach nearly means we have other

00:09:40,350 --> 00:09:46,080
programs and regulations like these are

00:09:42,950 --> 00:09:48,960
stating that please guys sit together

00:09:46,080 --> 00:09:51,500
and no it's more like a command sit

00:09:48,960 --> 00:09:53,640
together and find a way to create

00:09:51,500 --> 00:09:56,640
homogeneous systems develop them

00:09:53,640 --> 00:09:58,320
together create system-wide information

00:09:56,640 --> 00:10:00,199
management don't create your own

00:09:58,320 --> 00:10:03,269
solutions

00:10:00,199 --> 00:10:05,220
we have a free market nowadays we can

00:10:03,269 --> 00:10:07,410
take over air spaces in different

00:10:05,220 --> 00:10:09,540
countries and other aeronautical service

00:10:07,410 --> 00:10:13,199
providers also can take off air blocks

00:10:09,540 --> 00:10:15,120
in Germany and of course last but not

00:10:13,199 --> 00:10:17,490
least we have coast regulation by the

00:10:15,120 --> 00:10:20,730
European Union and this has a strong

00:10:17,490 --> 00:10:23,639
impact on our daily work in the last one

00:10:20,730 --> 00:10:25,610
and a half years we were able at DFS to

00:10:23,639 --> 00:10:30,930
reduce the costs for the customers by

00:10:25,610 --> 00:10:32,879
23% and Linux is one important point the

00:10:30,930 --> 00:10:37,800
Linux platforms how we say how we

00:10:32,879 --> 00:10:40,610
achieved to who save this money so what

00:10:37,800 --> 00:10:45,139
about the history of Linux and DFS now

00:10:40,610 --> 00:10:48,569
we started using Linux in in a time

00:10:45,139 --> 00:10:51,149
where the systems currently in

00:10:48,569 --> 00:10:55,709
development we are still developed for

00:10:51,149 --> 00:10:58,439
systems with alpha and through 64 when I

00:10:55,709 --> 00:11:00,870
started at DFS in 2010 we had the last

00:10:58,439 --> 00:11:04,920
big goal life of a big primary system

00:11:00,870 --> 00:11:06,180
running on alpha through 64 at that time

00:11:04,920 --> 00:11:08,009
you couldn't even buy the machines

00:11:06,180 --> 00:11:09,959
anymore we had stocks of machines and

00:11:08,009 --> 00:11:13,620
this is the time we are living in but

00:11:09,959 --> 00:11:16,980
even 5 years before DFS thought about

00:11:13,620 --> 00:11:19,170
that we have to think how we create the

00:11:16,980 --> 00:11:21,480
systems after alpha doesn't exist

00:11:19,170 --> 00:11:25,199
anymore this architecture what can we do

00:11:21,480 --> 00:11:27,720
and at that time the Linux competence

00:11:25,199 --> 00:11:30,480
center has been formed and the idea was

00:11:27,720 --> 00:11:33,720
to provide centralized knowledge for

00:11:30,480 --> 00:11:35,370
Linux and Linux related topics hardware

00:11:33,720 --> 00:11:39,569
and so on and so on

00:11:35,370 --> 00:11:43,019
centralized in DFS at that time we also

00:11:39,569 --> 00:11:47,269
established a partnership with both big

00:11:43,019 --> 00:11:51,420
enterprise providers redheads and Susan

00:11:47,269 --> 00:11:55,699
why Enterprise Linux it's quite simple I

00:11:51,420 --> 00:12:00,240
will explain to you later in the talk

00:11:55,699 --> 00:12:03,449
what the what exactly we need from these

00:12:00,240 --> 00:12:04,800
Enterprise distributors because ok if

00:12:03,449 --> 00:12:07,170
you first think yeah ok it's a big

00:12:04,800 --> 00:12:09,480
company safety something yeah ok

00:12:07,170 --> 00:12:11,790
Enterprise is great but what can we

00:12:09,480 --> 00:12:15,790
really get

00:12:11,790 --> 00:12:17,950
in reality considering these life cycles

00:12:15,790 --> 00:12:20,410
these development life cycles you can

00:12:17,950 --> 00:12:23,610
already imagine that if we go live with

00:12:20,410 --> 00:12:25,900
their systems it's it's out of support

00:12:23,610 --> 00:12:28,510
so we have something else from these

00:12:25,900 --> 00:12:32,950
distributors what that is I will explain

00:12:28,510 --> 00:12:35,680
it later in 2008 the first system

00:12:32,950 --> 00:12:37,930
started growing and we thought okay we

00:12:35,680 --> 00:12:41,230
should create a unified solution the so

00:12:37,930 --> 00:12:43,120
called DFS UNIX the vessel a Linux the

00:12:41,230 --> 00:12:45,550
idea was to implement the requirements

00:12:43,120 --> 00:12:47,680
of our customers for the various

00:12:45,550 --> 00:12:48,850
products we have news to implement these

00:12:47,680 --> 00:12:51,730
requirements only once

00:12:48,850 --> 00:12:53,890
of course the operational processes for

00:12:51,730 --> 00:12:55,960
all of the products are the same so we

00:12:53,890 --> 00:13:03,220
should implement the requirements only

00:12:55,960 --> 00:13:06,460
once in 2010 the idea was to extend this

00:13:03,220 --> 00:13:10,120
first solution to a platform with a main

00:13:06,460 --> 00:13:13,780
goal to harmonize the configurations at

00:13:10,120 --> 00:13:15,840
that time we had roughly 1500 systems in

00:13:13,780 --> 00:13:19,060
october's Ennis running under Linux and

00:13:15,840 --> 00:13:21,760
as what it was already foreseeable that

00:13:19,060 --> 00:13:24,520
the amount will increase tremendously in

00:13:21,760 --> 00:13:27,400
the upcoming years and the question was

00:13:24,520 --> 00:13:29,740
how to react on that and at that point

00:13:27,400 --> 00:13:32,860
it was I think a very fast Farsight

00:13:29,740 --> 00:13:35,620
solution to to set on this published

00:13:32,860 --> 00:13:38,860
stuff and to say we are going to use

00:13:35,620 --> 00:13:42,270
this kind of concept and enable the

00:13:38,860 --> 00:13:46,240
users to write their own configurations

00:13:42,270 --> 00:13:48,990
besides this standards we created we we

00:13:46,240 --> 00:13:51,940
thought about how to get our hardware

00:13:48,990 --> 00:13:56,650
the systems before they were bought as

00:13:51,940 --> 00:13:58,060
appliances so appliance means we buy the

00:13:56,650 --> 00:14:00,280
Alpha Hardware with the operating system

00:13:58,060 --> 00:14:02,290
together this is not possible anymore so

00:14:00,280 --> 00:14:03,790
we have to provide something here and

00:14:02,290 --> 00:14:06,220
the solution was create a standard

00:14:03,790 --> 00:14:08,110
create a hardware standard and make sure

00:14:06,220 --> 00:14:11,070
that these systems in the standard can

00:14:08,110 --> 00:14:16,060
run under Linux sounds easy

00:14:11,070 --> 00:14:19,020
in 2015 the number increased the number

00:14:16,060 --> 00:14:22,870
of systems that complexity increased and

00:14:19,020 --> 00:14:25,420
the cost pressure increased and this

00:14:22,870 --> 00:14:27,850
forced us to think in different ways so

00:14:25,420 --> 00:14:30,820
we extended this hardware standards to

00:14:27,850 --> 00:14:34,630
hardware platform what that means I will

00:14:30,820 --> 00:14:37,330
show you by end of the talk finally in

00:14:34,630 --> 00:14:40,870
in the last year we cracked the mark

00:14:37,330 --> 00:14:44,230
10th 10,000 operative systems running

00:14:40,870 --> 00:14:46,480
under the Linux platform at TFS and all

00:14:44,230 --> 00:14:49,510
of them are using or modular Hardware

00:14:46,480 --> 00:14:52,680
standard and this is why it's something

00:14:49,510 --> 00:14:52,680
away what that means

00:15:06,120 --> 00:15:10,890
100 systems we buy a factor 10 more

00:15:09,090 --> 00:15:13,500
systems for testing development and so

00:15:10,890 --> 00:15:20,370
on and so on this is my for one platform

00:15:13,500 --> 00:15:22,800
instance we easily buy 1000 systems so

00:15:20,370 --> 00:15:24,570
what did we learn on our way tools and

00:15:22,800 --> 00:15:28,380
don'ts and the following slides I

00:15:24,570 --> 00:15:30,750
present you some examples and I try to

00:15:28,380 --> 00:15:33,690
explain them in as detailed as possible

00:15:30,750 --> 00:15:35,850
but I think it will not be possible to

00:15:33,690 --> 00:15:37,800
dive into every detail so if you have

00:15:35,850 --> 00:15:41,600
questions please write them down come

00:15:37,800 --> 00:15:41,600
back to me later we can talk about that

00:15:41,870 --> 00:15:50,040
ct1 what does it mean welcome to the

00:15:47,550 --> 00:15:52,110
world of TFS we introduce abbreviations

00:15:50,040 --> 00:15:54,480
for everything challenge technical

00:15:52,110 --> 00:15:57,680
number one so you have the real DFS

00:15:54,480 --> 00:16:01,230
feeling the first technical challenge a

00:15:57,680 --> 00:16:04,110
vacuum driver well ok that's easy

00:16:01,230 --> 00:16:06,480
Wacom tablets maybe most of you know

00:16:04,110 --> 00:16:09,480
what a Wacom tablet is it's used

00:16:06,480 --> 00:16:13,410
everywhere and so also we use it in DFS

00:16:09,480 --> 00:16:16,950
easy but the use case in DFS is quite

00:16:13,410 --> 00:16:18,360
different this is where I have a problem

00:16:16,950 --> 00:16:22,650
with a microphone but it doesn't matter

00:16:18,360 --> 00:16:29,550
I will show it to you an artist makes

00:16:22,650 --> 00:16:36,740
movement like this and DFS will make

00:16:29,550 --> 00:16:39,510
movement like this so this is a problem

00:16:36,740 --> 00:16:41,520
this is a problem when you consider that

00:16:39,510 --> 00:16:44,220
both the driver and the firmware is of

00:16:41,520 --> 00:16:48,510
course optimized for the usage of the

00:16:44,220 --> 00:16:51,420
general purpose what happened is we had

00:16:48,510 --> 00:16:55,200
a major observation three years ago four

00:16:51,420 --> 00:16:57,150
years ago already where some of the air

00:16:55,200 --> 00:16:59,730
traffic controllers found the buck and

00:16:57,150 --> 00:17:02,430
the buck was if you place the pen in a

00:16:59,730 --> 00:17:04,230
specific angle at a specific point the

00:17:02,430 --> 00:17:07,740
press events was released in the middle

00:17:04,230 --> 00:17:12,570
of the screen nobody found us why should

00:17:07,740 --> 00:17:14,670
you do that and as you know the people

00:17:12,570 --> 00:17:17,070
who are working as a traffic controllers

00:17:14,670 --> 00:17:19,200
under high stress and once you detect

00:17:17,070 --> 00:17:19,880
one of these failures they show up

00:17:19,200 --> 00:17:22,470
everywhere

00:17:19,880 --> 00:17:28,170
so this is high critical we have to fix

00:17:22,470 --> 00:17:32,030
it don't wonder if your standard driver

00:17:28,170 --> 00:17:35,220
and the standard firmware doesn't work

00:17:32,030 --> 00:17:37,380
luckily we didn't wander we have

00:17:35,220 --> 00:17:39,720
customer tests for this and of course

00:17:37,380 --> 00:17:43,650
this passed the customer test the pack

00:17:39,720 --> 00:17:47,490
arise later but we planned ahead for the

00:17:43,650 --> 00:17:49,590
support in a case like that if you don't

00:17:47,490 --> 00:17:51,960
have established connections to your

00:17:49,590 --> 00:17:53,490
providers and can ask them what's the

00:17:51,960 --> 00:17:54,870
problem with us firmware what's the

00:17:53,490 --> 00:17:57,810
problem with this driver can you please

00:17:54,870 --> 00:18:00,180
come over you're in deep trouble the

00:17:57,810 --> 00:18:02,580
solution here was actually fixing both

00:18:00,180 --> 00:18:06,480
something in the driver and something in

00:18:02,580 --> 00:18:10,080
the firmware and we had to update we had

00:18:06,480 --> 00:18:15,720
a firmware update roughly 240 of these

00:18:10,080 --> 00:18:17,610
welcome displays in the night what makes

00:18:15,720 --> 00:18:20,250
it different what makes it complicated

00:18:17,610 --> 00:18:22,740
to update something like that in in a

00:18:20,250 --> 00:18:24,960
mission-critical system you cannot just

00:18:22,740 --> 00:18:28,260
take down the streets there are fixed

00:18:24,960 --> 00:18:31,430
intervals which are harmonized worldwide

00:18:28,260 --> 00:18:33,780
where is allowed to play in updates and

00:18:31,430 --> 00:18:38,370
you have so synchronized to that and

00:18:33,780 --> 00:18:41,610
this increases the cost even more second

00:18:38,370 --> 00:18:44,490
example of a technical challenge into

00:18:41,610 --> 00:18:48,780
IMT may be better known under the name

00:18:44,490 --> 00:18:52,110
of v4 this is a technology probably

00:18:48,780 --> 00:18:54,270
existent in all of your clients and it

00:18:52,110 --> 00:18:57,060
provides remote accessibility to your

00:18:54,270 --> 00:18:59,910
client systems a very nice feature and

00:18:57,060 --> 00:19:02,610
there's also linux support and the linux

00:18:59,910 --> 00:19:05,250
support is a port of a Windows tool

00:19:02,610 --> 00:19:09,350
written in a bad programming language

00:19:05,250 --> 00:19:13,470
and it's profit and it's rotting around

00:19:09,350 --> 00:19:15,030
so we bought the hardware in 2014 we

00:19:13,470 --> 00:19:16,590
want to go live this is actually the

00:19:15,030 --> 00:19:18,420
system we built for the future we want

00:19:16,590 --> 00:19:22,140
to be live by the end of this year in

00:19:18,420 --> 00:19:23,820
the 2016 until todos ok the supporters

00:19:22,140 --> 00:19:27,230
dropped there's nobody anymore we sector

00:19:23,820 --> 00:19:27,230
people oh that's bad

00:19:27,249 --> 00:19:33,379
so don't rely maybe this is obvious

00:19:30,769 --> 00:19:35,509
don't rely on binary drivers even if

00:19:33,379 --> 00:19:38,749
they are provided for free just don't do

00:19:35,509 --> 00:19:41,799
it well you end up with a door it's it's

00:19:38,749 --> 00:19:44,229
closed there's nothing behind anymore

00:19:41,799 --> 00:19:48,409
what you want to do is you want to do

00:19:44,229 --> 00:19:50,479
use open source tools you want to have

00:19:48,409 --> 00:19:53,329
established connections again with your

00:19:50,479 --> 00:19:56,959
providers so they can they have a real

00:19:53,329 --> 00:19:58,489
chance providing your solution you want

00:19:56,959 --> 00:20:00,619
to assert the life cycle for the

00:19:58,489 --> 00:20:03,999
complete life cycle of the application

00:20:00,619 --> 00:20:08,209
of course this did fail in that case and

00:20:03,999 --> 00:20:10,099
you want to have alternatives luckily we

00:20:08,209 --> 00:20:12,169
had alternatives and we could figure out

00:20:10,099 --> 00:20:16,009
a workaround using a different

00:20:12,169 --> 00:20:19,029
technology so we can go live a small

00:20:16,009 --> 00:20:21,379
blocker but this is a very serious topic

00:20:19,029 --> 00:20:23,239
imagine we have everything ready for go

00:20:21,379 --> 00:20:28,639
life and we cannot access the machines

00:20:23,239 --> 00:20:31,669
remotely this is bad that technical

00:20:28,639 --> 00:20:34,159
challenge deployment solution of course

00:20:31,669 --> 00:20:37,219
obviously if we have 10,000 systems we

00:20:34,159 --> 00:20:39,639
need some kind of deployments ok that's

00:20:37,219 --> 00:20:43,969
nice deployment that's easy

00:20:39,639 --> 00:20:45,859
if you consider that we have two very

00:20:43,969 --> 00:20:48,799
different cultures in air traffic

00:20:45,859 --> 00:20:51,769
control one of them is the guys living

00:20:48,799 --> 00:20:54,049
in a tower system this is what you see

00:20:51,769 --> 00:20:55,909
at all the airports and the other guys

00:20:54,049 --> 00:20:58,929
are sitting in the centers doing the

00:20:55,909 --> 00:21:01,609
control of this lower and upper airspace

00:20:58,929 --> 00:21:03,199
the systems obviously are completely

00:21:01,609 --> 00:21:05,749
different tower systems are

00:21:03,199 --> 00:21:07,239
decentralized and central systems it's

00:21:05,749 --> 00:21:09,859
already in the name they are centralized

00:21:07,239 --> 00:21:13,609
how can the deployment solution look the

00:21:09,859 --> 00:21:16,129
same it doesn't work so the challenge

00:21:13,609 --> 00:21:19,969
here is we need a deployment solution

00:21:16,129 --> 00:21:24,679
and we have a lot of legacy code where

00:21:19,969 --> 00:21:28,639
does this legacy code from very easy all

00:21:24,679 --> 00:21:30,240
of you know DevOps DFS does exactly this

00:21:28,639 --> 00:21:33,390
not

00:21:30,240 --> 00:21:35,010
we do it completely different we do the

00:21:33,390 --> 00:21:37,950
development we test and test and test

00:21:35,010 --> 00:21:41,190
and once everything is finished it goes

00:21:37,950 --> 00:21:43,350
live the people working in first and

00:21:41,190 --> 00:21:46,110
second level support have kind of

00:21:43,350 --> 00:21:49,170
driver's licenses for all of their

00:21:46,110 --> 00:21:51,180
actions they take or they take in the

00:21:49,170 --> 00:21:55,590
systems for each system there's a

00:21:51,180 --> 00:21:57,450
driver's license and obviously finally

00:21:55,590 --> 00:22:00,750
they are personally responsible if

00:21:57,450 --> 00:22:03,840
something goes wrong so this is a source

00:22:00,750 --> 00:22:05,850
of drivers of this is a source of tools

00:22:03,840 --> 00:22:07,860
of course if these guys are responsible

00:22:05,850 --> 00:22:10,740
they start writing their own tools in

00:22:07,860 --> 00:22:13,230
the years now these tools exists and you

00:22:10,740 --> 00:22:16,740
provide them a new solution the

00:22:13,230 --> 00:22:18,570
challenges we know the better way we

00:22:16,740 --> 00:22:19,590
know state-of-the-art technologies we

00:22:18,570 --> 00:22:24,350
know how it's really done

00:22:19,590 --> 00:22:29,040
in the customer has their own solution

00:22:24,350 --> 00:22:31,110
so don't use puppet master don't use

00:22:29,040 --> 00:22:32,960
life free configuration even though it's

00:22:31,110 --> 00:22:36,080
possible and very nice don't use it

00:22:32,960 --> 00:22:39,990
don't use all the nice features existent

00:22:36,080 --> 00:22:42,270
it doesn't make sense you can if if the

00:22:39,990 --> 00:22:44,760
person want to chess boards you can

00:22:42,270 --> 00:22:47,540
write an application on an iPad it's

00:22:44,760 --> 00:22:50,220
nice and expensive but it doesn't work

00:22:47,540 --> 00:22:52,590
if the user wants to stick with this old

00:22:50,220 --> 00:22:56,100
Lada don't provide him a portion very

00:22:52,590 --> 00:22:58,080
easy so what you really want to do is he

00:22:56,100 --> 00:22:59,940
wants to go to the people who are

00:22:58,080 --> 00:23:02,640
responsible for the first and let the

00:22:59,940 --> 00:23:04,500
second level support with a completely

00:23:02,640 --> 00:23:06,390
different mindset than any developer

00:23:04,500 --> 00:23:08,760
because their personal responsible and

00:23:06,390 --> 00:23:10,500
they feel that way you want to go to

00:23:08,760 --> 00:23:14,820
them ask them what do you really need

00:23:10,500 --> 00:23:17,550
and just implement that this means focus

00:23:14,820 --> 00:23:20,040
on the real customer value the real

00:23:17,550 --> 00:23:21,960
customer value is in our case of course

00:23:20,040 --> 00:23:25,740
the people who are doing the operations

00:23:21,960 --> 00:23:27,990
and understand that even though you have

00:23:25,740 --> 00:23:30,720
all these nice ideas which is very nice

00:23:27,990 --> 00:23:36,110
and of course they are better but we

00:23:30,720 --> 00:23:39,630
only create costs we create no value and

00:23:36,110 --> 00:23:43,270
we did take a wrong path in the in the

00:23:39,630 --> 00:23:45,669
beginning we tried to force

00:23:43,270 --> 00:23:48,220
the system management to use a different

00:23:45,669 --> 00:23:51,100
way of deployment and of course it was

00:23:48,220 --> 00:23:52,710
better but it didn't work out because of

00:23:51,100 --> 00:23:56,470
cultural problems interestingly

00:23:52,710 --> 00:23:58,539
interestingly as soon as we started

00:23:56,470 --> 00:24:01,960
providing them the solutions they needed

00:23:58,539 --> 00:24:07,419
they asked can you please provide us a

00:24:01,960 --> 00:24:13,659
better solution ok it was two years work

00:24:07,419 --> 00:24:16,029
and then take over at the old point now

00:24:13,659 --> 00:24:20,679
let's start diving into the real

00:24:16,029 --> 00:24:23,350
challenges the first real challenge you

00:24:20,679 --> 00:24:24,600
can see see one no technical challenge

00:24:23,350 --> 00:24:27,789
anymore

00:24:24,600 --> 00:24:28,620
the real challenge there's a gap in the

00:24:27,789 --> 00:24:32,860
delivery

00:24:28,620 --> 00:24:36,580
what kind of gap could the speed as I

00:24:32,860 --> 00:24:38,799
mentioned earlier our job is to do the

00:24:36,580 --> 00:24:43,090
integration of the operating system and

00:24:38,799 --> 00:24:44,890
the hardware challenges the hardware's

00:24:43,090 --> 00:24:47,350
delivered by somebody else then the

00:24:44,890 --> 00:24:49,510
operating system so we have to take care

00:24:47,350 --> 00:24:53,559
on the integration somehow okay that's

00:24:49,510 --> 00:24:56,890
fine easy what's in the gap what do we

00:24:53,559 --> 00:25:00,130
have to consider for a specific Linux

00:24:56,890 --> 00:25:03,250
version Linux versions in my terms is

00:25:00,130 --> 00:25:06,549
something like l7 not a kernel version

00:25:03,250 --> 00:25:10,029
in enterprise linux version for specific

00:25:06,549 --> 00:25:12,850
linux version we have a hardware and

00:25:10,029 --> 00:25:15,030
driver hardware and firmware version for

00:25:12,850 --> 00:25:19,170
every hardware component

00:25:15,030 --> 00:25:21,720
can this work together obviously this is

00:25:19,170 --> 00:25:24,210
difficult because the operating system

00:25:21,720 --> 00:25:28,580
has been released in an earlier date in

00:25:24,210 --> 00:25:31,080
the firmware later who will test it

00:25:28,580 --> 00:25:35,340
drivers and modules you have seen an

00:25:31,080 --> 00:25:36,930
example vacum driver and obviously also

00:25:35,340 --> 00:25:40,920
tools you need for the hardware

00:25:36,930 --> 00:25:44,040
functionality like IMT these tools and

00:25:40,920 --> 00:25:48,720
these problems with hardware revisions

00:25:44,040 --> 00:25:52,350
are in kind of a gap how does this gap

00:25:48,720 --> 00:25:55,620
feel for DFS and this is where we jump

00:25:52,350 --> 00:25:59,700
into the development processes a short

00:25:55,620 --> 00:26:01,680
introduction into my world so structured

00:25:59,700 --> 00:26:04,110
software developments obviously uses

00:26:01,680 --> 00:26:05,670
some kind of model like the V model and

00:26:04,110 --> 00:26:07,470
you start up with a high level

00:26:05,670 --> 00:26:10,620
requirement and you say there's a

00:26:07,470 --> 00:26:12,570
hardware unit it's named X and it shall

00:26:10,620 --> 00:26:13,980
boot and it's provided by some

00:26:12,570 --> 00:26:16,770
independent hardware vendors somebody

00:26:13,980 --> 00:26:19,800
has produced it fine and it shall boot

00:26:16,770 --> 00:26:21,540
with Linux why ok that's very easy to

00:26:19,800 --> 00:26:24,720
understand and then it should work

00:26:21,540 --> 00:26:26,400
shouldn't it ok and we know some more

00:26:24,720 --> 00:26:28,140
details we know the low level

00:26:26,400 --> 00:26:30,390
requirements the low level requirement

00:26:28,140 --> 00:26:32,610
would be okay we have a driver set for

00:26:30,390 --> 00:26:35,430
this module included somehow in this

00:26:32,610 --> 00:26:39,270
hardware units and this shell boot with

00:26:35,430 --> 00:26:40,920
Linux why easy this is the world of BFS

00:26:39,270 --> 00:26:44,490
we write the requirements we say what we

00:26:40,920 --> 00:26:47,850
want and then any distributor will say

00:26:44,490 --> 00:26:51,890
ok fine the drivers included and it is

00:26:47,850 --> 00:26:55,800
included for Linux X because it's newer

00:26:51,890 --> 00:26:57,480
hmm nice but we need it for the old

00:26:55,800 --> 00:27:00,510
version ok we can make a bet backward

00:26:57,480 --> 00:27:04,530
fine ok we take the back port we try it

00:27:00,510 --> 00:27:07,020
out and maybe there's a buck we ask them

00:27:04,530 --> 00:27:09,720
by the way how did you test them oh we

00:27:07,020 --> 00:27:13,080
did only compile it what do you mean by

00:27:09,720 --> 00:27:15,270
test this is the test we did do it well

00:27:13,080 --> 00:27:17,910
ok we mean something like you use the

00:27:15,270 --> 00:27:21,840
actual hardware and find out whether the

00:27:17,910 --> 00:27:24,000
driver really works ah no this is not

00:27:21,840 --> 00:27:25,620
our responsibility this is of course we

00:27:24,000 --> 00:27:27,780
don't have every hardware this is where

00:27:25,620 --> 00:27:28,290
the independent hardware's independent

00:27:27,780 --> 00:27:30,360
half of and

00:27:28,290 --> 00:27:33,000
coming to the game they should do it

00:27:30,360 --> 00:27:36,540
okay fine we have support contracts we

00:27:33,000 --> 00:27:40,680
ask them okay yes okay we test it and

00:27:36,540 --> 00:27:42,150
our specific problem is not tested yeah

00:27:40,680 --> 00:27:48,450
because there's no business case you

00:27:42,150 --> 00:27:50,220
have to do it yourself so you end up

00:27:48,450 --> 00:27:53,520
with something like this this is a

00:27:50,220 --> 00:27:54,750
visualization of a Lorenz attractor the

00:27:53,520 --> 00:27:57,480
people laughing are probably also

00:27:54,750 --> 00:28:00,510
physicists is a chaotic system and

00:27:57,480 --> 00:28:02,310
everybody moves around in a chaotic way

00:28:00,510 --> 00:28:05,940
everybody points in all directions and

00:28:02,310 --> 00:28:09,300
there's no solution coming so this is

00:28:05,940 --> 00:28:13,680
where the gap is how can we fix

00:28:09,300 --> 00:28:15,570
something like this actually what you

00:28:13,680 --> 00:28:19,020
don't want to do is you don't want to

00:28:15,570 --> 00:28:23,600
blindly blue eyed you want to you don't

00:28:19,020 --> 00:28:25,760
want to rely on what the contractors say

00:28:23,600 --> 00:28:28,080
you're talking in different languages

00:28:25,760 --> 00:28:31,170
it's not bad will it's just different

00:28:28,080 --> 00:28:35,790
languages you have to somehow make the

00:28:31,170 --> 00:28:37,500
languages compatible at first what you

00:28:35,790 --> 00:28:41,040
want to create as you want to create

00:28:37,500 --> 00:28:42,810
specific customer tests and provide them

00:28:41,040 --> 00:28:45,750
provide these test cases to your

00:28:42,810 --> 00:28:47,810
manufacturers so they have a good chance

00:28:45,750 --> 00:28:50,370
to understand what you really need and

00:28:47,810 --> 00:28:53,730
the best way where to put this is

00:28:50,370 --> 00:28:56,310
obviously in frame contracts so they can

00:28:53,730 --> 00:28:59,010
even see in advance do I want to take

00:28:56,310 --> 00:29:02,850
this bit or maybe I'm the wrong partner

00:28:59,010 --> 00:29:05,130
maybe I want a 1/2 it the second thing

00:29:02,850 --> 00:29:08,400
you want to do is he wants to create an

00:29:05,130 --> 00:29:11,460
internal document for the company an ICD

00:29:08,400 --> 00:29:13,560
interface control document writing down

00:29:11,460 --> 00:29:14,970
all the software come all the hopper

00:29:13,560 --> 00:29:17,760
components you have and all the

00:29:14,970 --> 00:29:20,190
operating systems you have and test them

00:29:17,760 --> 00:29:22,700
using your acceptance tests and make a

00:29:20,190 --> 00:29:26,610
matrix what works what doesn't work and

00:29:22,700 --> 00:29:30,340
if you do that in a modular way you can

00:29:26,610 --> 00:29:32,800
save in a tremendous amount of costs

00:29:30,340 --> 00:29:35,500
the third thing you want to do is

00:29:32,800 --> 00:29:38,110
obviously to steer and control the

00:29:35,500 --> 00:29:40,810
support if you want to escape this

00:29:38,110 --> 00:29:43,410
Lorenz extractor somewhere you have to

00:29:40,810 --> 00:29:45,760
manage to talk to your providers and

00:29:43,410 --> 00:29:51,520
help them understand what you really

00:29:45,760 --> 00:29:53,410
want and the last point obviously you

00:29:51,520 --> 00:29:58,240
need developers in-house and external

00:29:53,410 --> 00:30:00,910
ones who do the actual work what's

00:29:58,240 --> 00:30:04,930
really the point here the point here is

00:30:00,910 --> 00:30:07,300
that results are only there if you can

00:30:04,930 --> 00:30:09,790
understand them even though the

00:30:07,300 --> 00:30:13,720
technical solution may exist and may

00:30:09,790 --> 00:30:16,900
work out perfectly if there is no

00:30:13,720 --> 00:30:18,820
understanding and customer sight what

00:30:16,900 --> 00:30:21,520
this means the solution doesn't exist

00:30:18,820 --> 00:30:24,460
and in order to make the solution

00:30:21,520 --> 00:30:26,770
visible to a company like DFS we need

00:30:24,460 --> 00:30:29,500
these test documents we need these

00:30:26,770 --> 00:30:36,880
requirements anywhere else it's not

00:30:29,500 --> 00:30:38,890
their second challenge lifecycle okay I

00:30:36,880 --> 00:30:41,410
told about that before we have eight

00:30:38,890 --> 00:30:43,390
years of application lifecycle and we

00:30:41,410 --> 00:30:45,820
buy hardware we buy operating systems

00:30:43,390 --> 00:30:47,860
and we need support and once we go live

00:30:45,820 --> 00:30:49,720
with the systems there the operating

00:30:47,860 --> 00:30:53,250
systems out of support okay that's bad

00:30:49,720 --> 00:30:55,990
and we have lots of safety requirements

00:30:53,250 --> 00:30:57,450
hindering us even if there's a patch and

00:30:55,990 --> 00:31:00,730
even if all the documentation is there

00:30:57,450 --> 00:31:03,460
we have to safety prove the system and

00:31:00,730 --> 00:31:06,310
this will take at least half a year so

00:31:03,460 --> 00:31:10,990
that's a problem we have service level 1

00:31:06,310 --> 00:31:12,880
& 2 with these drivers licenses and how

00:31:10,990 --> 00:31:16,150
can we deal with with something like

00:31:12,880 --> 00:31:19,390
this obviously you cannot rely on

00:31:16,150 --> 00:31:22,150
manufacturer support even if they

00:31:19,390 --> 00:31:23,710
understand what you want to do they will

00:31:22,150 --> 00:31:24,850
they will put a price tag that's

00:31:23,710 --> 00:31:27,850
incredible

00:31:24,850 --> 00:31:31,060
ridiculous it doesn't work so you have

00:31:27,850 --> 00:31:35,290
to find another way to make sure that

00:31:31,060 --> 00:31:39,700
the life cycle works so what do we do in

00:31:35,290 --> 00:31:41,320
DFS to get a grip on that at first we

00:31:39,700 --> 00:31:42,440
need revision control down to the

00:31:41,320 --> 00:31:44,690
firmware levels

00:31:42,440 --> 00:31:47,320
we needed to in order to reduce the

00:31:44,690 --> 00:31:50,660
complexity if we don't have control

00:31:47,320 --> 00:31:54,020
about what hardware is in use and this

00:31:50,660 --> 00:31:57,440
means Hardware number of the revision

00:31:54,020 --> 00:31:59,540
number on the PCB and the exact number

00:31:57,440 --> 00:32:04,970
of the firmware version we are in deep

00:31:59,540 --> 00:32:08,270
problems a real example we bought 90

00:32:04,970 --> 00:32:10,400
Network hearts and we do a test for

00:32:08,270 --> 00:32:14,090
switch over and two of them don't work

00:32:10,400 --> 00:32:18,080
probably they have different different

00:32:14,090 --> 00:32:21,050
time interval for takeover so what was

00:32:18,080 --> 00:32:23,090
the problem here we found out that the

00:32:21,050 --> 00:32:25,610
two network hearts were manufactured in

00:32:23,090 --> 00:32:28,600
different country Taiwan versus China

00:32:25,610 --> 00:32:30,710
this was the only difference and

00:32:28,600 --> 00:32:35,660
obviously you want to know that in

00:32:30,710 --> 00:32:37,910
advance the second thing you really want

00:32:35,660 --> 00:32:40,160
to do is create a modular standard what

00:32:37,910 --> 00:32:42,980
that means I will show you in the next

00:32:40,160 --> 00:32:47,090
part of the talk and this includes also

00:32:42,980 --> 00:32:49,910
the repairs what means repairs if you

00:32:47,090 --> 00:32:51,560
know that you buy hardware and for

00:32:49,910 --> 00:32:54,140
example but could be anything else in

00:32:51,560 --> 00:32:56,210
video cards and you you know that the

00:32:54,140 --> 00:33:00,380
diodes of the Nvidia cards at the

00:32:56,210 --> 00:33:02,660
graphics port they break regularly it's

00:33:00,380 --> 00:33:04,970
better to take all the graphics cards

00:33:02,660 --> 00:33:08,480
solder them out and replace them with

00:33:04,970 --> 00:33:09,980
better ones so this is the level we have

00:33:08,480 --> 00:33:14,080
the knowledge about the systems and what

00:33:09,980 --> 00:33:16,640
we do and last but not least in order

00:33:14,080 --> 00:33:18,500
not to make a big stock of hardware

00:33:16,640 --> 00:33:21,680
which you never use you have to know

00:33:18,500 --> 00:33:27,260
what is your failure rate and you have

00:33:21,680 --> 00:33:31,160
to know how this evolves over time third

00:33:27,260 --> 00:33:34,040
challenge the regulations and this is

00:33:31,160 --> 00:33:35,340
really a big one easy to solve but it's

00:33:34,040 --> 00:33:37,610
a big one

00:33:35,340 --> 00:33:40,860
in DFS we have lots of regulations

00:33:37,610 --> 00:33:44,700
considering the software for example we

00:33:40,860 --> 00:33:48,330
have either six and eighty-one whatever

00:33:44,700 --> 00:33:51,320
and ISO and blah and of course we also

00:33:48,330 --> 00:33:53,850
use the the state-of-the-art processes

00:33:51,320 --> 00:33:55,470
what does it really boil - please make

00:33:53,850 --> 00:33:56,970
you software structured and write the

00:33:55,470 --> 00:33:59,220
requirements document and stuff like

00:33:56,970 --> 00:33:59,870
that and write good acceptance tests and

00:33:59,220 --> 00:34:02,880
so on and so on

00:33:59,870 --> 00:34:04,830
okay that's fine and finally we have the

00:34:02,880 --> 00:34:07,230
DFS core processes nobody can know them

00:34:04,830 --> 00:34:09,419
only us can know them and somehow we

00:34:07,230 --> 00:34:13,010
have to make this comfortable with the

00:34:09,419 --> 00:34:13,010
outside world we look like this

00:34:17,020 --> 00:34:21,520
so quick introduction for dummies and if

00:34:19,480 --> 00:34:26,440
you can take one thing home this would

00:34:21,520 --> 00:34:28,950
be the thing how does a software

00:34:26,440 --> 00:34:30,790
development process look like for

00:34:28,950 --> 00:34:33,520
safety-critical systems

00:34:30,790 --> 00:34:35,290
you remember this V model on the left

00:34:33,520 --> 00:34:37,690
hand side you have the requirements down

00:34:35,290 --> 00:34:40,780
to the code on the right hand side you

00:34:37,690 --> 00:34:43,540
have the test cases if you start linking

00:34:40,780 --> 00:34:45,220
the requirements to the test cases high

00:34:43,540 --> 00:34:48,550
level tests and high level requirements

00:34:45,220 --> 00:34:50,830
you have Software Assurance level 4 if

00:34:48,550 --> 00:34:52,119
you can link down to the lower level

00:34:50,830 --> 00:34:53,950
requirements and link them to other

00:34:52,119 --> 00:34:57,250
tests you have Software Assurance level

00:34:53,950 --> 00:35:00,130
3 and you link it down to the code then

00:34:57,250 --> 00:35:02,860
you have a current level 1 through the

00:35:00,130 --> 00:35:04,720
code means every code num every code

00:35:02,860 --> 00:35:10,270
part has its requirement every

00:35:04,720 --> 00:35:11,950
requirement has its call and this is how

00:35:10,270 --> 00:35:15,180
the open source community looks like

00:35:11,950 --> 00:35:15,180
from our perspective

00:35:15,980 --> 00:35:21,119
what to do there's no common development

00:35:18,780 --> 00:35:23,369
process how can we accept the results

00:35:21,119 --> 00:35:26,270
the technical solutions are there but we

00:35:23,369 --> 00:35:28,920
cannot take them what to do

00:35:26,270 --> 00:35:30,240
don't underestimate and this is very

00:35:28,920 --> 00:35:32,369
important don't underestimate the

00:35:30,240 --> 00:35:34,200
differences in cultures and development

00:35:32,369 --> 00:35:38,280
processes which is has on your results

00:35:34,200 --> 00:35:41,220
the solution is quite easy we just agree

00:35:38,280 --> 00:35:44,790
on the deliverables that's easy

00:35:41,220 --> 00:35:46,710
and once we agree on the deliverables we

00:35:44,790 --> 00:35:49,320
can use our distributors rather than

00:35:46,710 --> 00:35:51,990
suzer we can ask them to shield us

00:35:49,320 --> 00:35:54,150
against these open source community by

00:35:51,990 --> 00:35:56,820
telling us how do you develop how do you

00:35:54,150 --> 00:36:00,690
test we write down the interfaces how we

00:35:56,820 --> 00:36:05,280
interact with them and we are fine this

00:36:00,690 --> 00:36:08,280
is the trick the fourth challenge is

00:36:05,280 --> 00:36:10,859
customer acceptance when you think of a

00:36:08,280 --> 00:36:14,910
platform obviously you think at first of

00:36:10,859 --> 00:36:17,220
course the problem here is we don't own

00:36:14,910 --> 00:36:19,589
the production line because we have

00:36:17,220 --> 00:36:22,410
separated the first second level support

00:36:19,589 --> 00:36:24,330
from the development so in the end the

00:36:22,410 --> 00:36:27,750
guys responsible they have to like our

00:36:24,330 --> 00:36:29,490
solution so if we build a standard in a

00:36:27,750 --> 00:36:32,390
manner that we say we know the better

00:36:29,490 --> 00:36:35,490
way we end up with something like this

00:36:32,390 --> 00:36:36,690
obviously not what we want if we want

00:36:35,490 --> 00:36:39,390
the customers to build something like

00:36:36,690 --> 00:36:41,820
this we need to provide them the right

00:36:39,390 --> 00:36:45,839
modules we need to provide them the

00:36:41,820 --> 00:36:48,290
results that they can do that work how

00:36:45,839 --> 00:36:48,290
do we do it

00:36:49,160 --> 00:36:53,130
we built a flexible modular standards

00:36:51,720 --> 00:36:55,890
and this is what I will show you now how

00:36:53,130 --> 00:36:57,570
it looks like we have to document it we

00:36:55,890 --> 00:37:00,599
have to keep it simple and we have to

00:36:57,570 --> 00:37:03,470
empower your users and our customers to

00:37:00,599 --> 00:37:03,470
use the standard

00:37:04,900 --> 00:37:10,180
last but not least challenge testing we

00:37:08,259 --> 00:37:14,769
just talked about this in the beginning

00:37:10,180 --> 00:37:16,779
of the talk yes you can automate and if

00:37:14,769 --> 00:37:20,289
you automate everything you have great

00:37:16,779 --> 00:37:22,809
tests but never forget what your test

00:37:20,289 --> 00:37:25,150
coverage should be if you don't test

00:37:22,809 --> 00:37:27,130
what the customer wants to have this is

00:37:25,150 --> 00:37:28,930
the problem and if you know your

00:37:27,130 --> 00:37:30,910
customer test two goods you end up with

00:37:28,930 --> 00:37:36,099
something like this this is maybe not so

00:37:30,910 --> 00:37:39,549
good so how do the modular platforms

00:37:36,099 --> 00:37:41,380
look like today we have on the one hand

00:37:39,549 --> 00:37:43,420
side we have a hardware platform which

00:37:41,380 --> 00:37:46,420
includes all the server systems the

00:37:43,420 --> 00:37:49,569
client systems this place KVM monitors

00:37:46,420 --> 00:37:51,579
etc etc we have shared common

00:37:49,569 --> 00:37:55,119
requirements we agree upon in a board

00:37:51,579 --> 00:37:57,940
and we provide service for the frame

00:37:55,119 --> 00:37:59,469
contracts we have different persons not

00:37:57,940 --> 00:38:01,059
only us but different persons and

00:37:59,469 --> 00:38:02,979
product management who take over

00:38:01,059 --> 00:38:06,249
responsibility for these frame contracts

00:38:02,979 --> 00:38:07,660
and help if there's a support case on

00:38:06,249 --> 00:38:09,729
the other side we have the Linux

00:38:07,660 --> 00:38:11,979
platform of course it uses this

00:38:09,729 --> 00:38:14,289
Enterprise Linux and implements specific

00:38:11,979 --> 00:38:16,200
ATC requirements I won't go into details

00:38:14,289 --> 00:38:19,059
here if you have questions ask me later

00:38:16,200 --> 00:38:21,400
the point here is we have to provide the

00:38:19,059 --> 00:38:23,289
same modularity here on that level as we

00:38:21,400 --> 00:38:25,930
have for the hardware because the how

00:38:23,289 --> 00:38:28,479
that drives the operating system and

00:38:25,930 --> 00:38:31,410
obviously our job in the Linux platform

00:38:28,479 --> 00:38:34,839
is to make sure the integration works

00:38:31,410 --> 00:38:36,759
all of these standards are agreed upon

00:38:34,839 --> 00:38:38,259
in an architecture board and I think

00:38:36,759 --> 00:38:41,140
this is unique for a big company like

00:38:38,259 --> 00:38:43,029
DFS we have an architecture book where

00:38:41,140 --> 00:38:44,680
we sit together in every month and

00:38:43,029 --> 00:38:46,900
discuss what's coming on in the

00:38:44,680 --> 00:38:49,239
architectures in the near future and we

00:38:46,900 --> 00:38:50,829
agree upon our standards and we talk

00:38:49,239 --> 00:38:55,200
about exceptions and why these

00:38:50,829 --> 00:38:55,200
exceptions should be accepted so

00:38:56,009 --> 00:39:00,339
actually how does the system

00:38:58,359 --> 00:39:05,680
architecture look like what means

00:39:00,339 --> 00:39:07,180
modular modular means if we consider if

00:39:05,680 --> 00:39:08,619
we keep in mind that in the end

00:39:07,180 --> 00:39:10,660
everything together should work

00:39:08,619 --> 00:39:13,749
including firmware and and so on and so

00:39:10,660 --> 00:39:16,239
on obviously a hardware system includes

00:39:13,749 --> 00:39:17,560
the hardware units and the concrete

00:39:16,239 --> 00:39:19,780
adaptation like

00:39:17,560 --> 00:39:22,990
her liver bio settings its and so on and

00:39:19,780 --> 00:39:25,420
so on and in order to reduce the coast

00:39:22,990 --> 00:39:28,690
and make it a platform and not single

00:39:25,420 --> 00:39:31,690
towers which don't interact with other

00:39:28,690 --> 00:39:33,280
people in DFS we have components inside

00:39:31,690 --> 00:39:35,500
and modules the component could be a

00:39:33,280 --> 00:39:37,450
monitor the module could be a graphics

00:39:35,500 --> 00:39:39,340
card networks cards if we have once

00:39:37,450 --> 00:39:42,790
approved it if we have someone certified

00:39:39,340 --> 00:39:44,890
it you can plug it into any solution the

00:39:42,790 --> 00:39:48,510
same holds true obviously for the Linux

00:39:44,890 --> 00:39:51,760
platform it should not be something like

00:39:48,510 --> 00:39:53,800
like a legacy code it should be very

00:39:51,760 --> 00:39:55,780
modular and if there are two different

00:39:53,800 --> 00:39:59,710
kind of deployment solutions okay that's

00:39:55,780 --> 00:40:03,210
fine we provide the modules the customer

00:39:59,710 --> 00:40:03,210
can use it or he can leave it

00:40:06,880 --> 00:40:14,440
okay maybe I'll skip that considering

00:40:09,310 --> 00:40:16,600
the time so actually what is inside what

00:40:14,440 --> 00:40:21,520
is inside the core components of our

00:40:16,600 --> 00:40:23,710
Linux platform the first thing is in the

00:40:21,520 --> 00:40:26,230
core components we have to provide the

00:40:23,710 --> 00:40:28,780
basic functionality the basic

00:40:26,230 --> 00:40:30,580
functionality would be we have to have a

00:40:28,780 --> 00:40:33,520
stage one we want to boot and install

00:40:30,580 --> 00:40:35,890
the system obviously then we want to

00:40:33,520 --> 00:40:38,440
configure the system okay that's fine we

00:40:35,890 --> 00:40:41,470
can use puppet but not everywhere if

00:40:38,440 --> 00:40:44,170
some customers in some tower systems

00:40:41,470 --> 00:40:46,540
don't like to use puppet because they

00:40:44,170 --> 00:40:48,880
have a real reason for that they have

00:40:46,540 --> 00:40:52,090
non UNIX systems Windows systems running

00:40:48,880 --> 00:40:54,880
and they cannot use our puppet

00:40:52,090 --> 00:40:56,770
deployment in a puppet configuration for

00:40:54,880 --> 00:41:00,240
doing their job okay we provide them

00:40:56,770 --> 00:41:03,550
some something else and two years later

00:41:00,240 --> 00:41:05,410
they see oh there's other tower he

00:41:03,550 --> 00:41:07,750
starts using puppets and he is going

00:41:05,410 --> 00:41:09,670
better I want to have a tool so we

00:41:07,750 --> 00:41:12,460
provide this flexibility on that level

00:41:09,670 --> 00:41:14,680
and last but not least we have an

00:41:12,460 --> 00:41:17,110
operational mode where we can do stuff

00:41:14,680 --> 00:41:18,550
like reconfiguration of the systems and

00:41:17,110 --> 00:41:21,810
where we can do something like

00:41:18,550 --> 00:41:24,340
monitoring and so on and so on

00:41:21,810 --> 00:41:26,470
these are the core components which are

00:41:24,340 --> 00:41:28,780
coming every time with a platform and

00:41:26,470 --> 00:41:31,240
then we have some kind of optional stuff

00:41:28,780 --> 00:41:34,330
which you can use but you don't you are

00:41:31,240 --> 00:41:38,020
not forced to use it is one thing to

00:41:34,330 --> 00:41:40,390
create a platform and say okay if I want

00:41:38,020 --> 00:41:43,000
to have something like I want to boot

00:41:40,390 --> 00:41:44,800
suza and read it so I write my own boot

00:41:43,000 --> 00:41:47,710
loader I write my own code yes you can

00:41:44,800 --> 00:41:50,890
do it but in the end you cannot make a

00:41:47,710 --> 00:41:52,210
better job with limited manpower you

00:41:50,890 --> 00:41:53,890
cannot make a better job than the

00:41:52,210 --> 00:41:55,390
distributors it's better to lower the

00:41:53,890 --> 00:41:58,000
light and rely on the distributor's

00:41:55,390 --> 00:42:01,450
solution and write your own binary code

00:41:58,000 --> 00:42:02,980
which comes after that and then we can

00:42:01,450 --> 00:42:05,530
provide these modules so what are the

00:42:02,980 --> 00:42:08,380
technologies we have inside this would

00:42:05,530 --> 00:42:12,040
be a completely different talk we use

00:42:08,380 --> 00:42:15,230
puppet and over the long term maybe two

00:42:12,040 --> 00:42:18,500
words on that over the long term

00:42:15,230 --> 00:42:22,040
there are big pitfalls if you use puppet

00:42:18,500 --> 00:42:24,800
if you start using puppets and consider

00:42:22,040 --> 00:42:26,930
that the idea of capitis you write a

00:42:24,800 --> 00:42:31,550
nice configuration and afterwards it's

00:42:26,930 --> 00:42:34,550
very portable ok nice a lifecycle of 80s

00:42:31,550 --> 00:42:37,460
is not too long you you should consider

00:42:34,550 --> 00:42:39,410
that maybe maybe you expect that

00:42:37,460 --> 00:42:41,540
everything works the same with the new

00:42:39,410 --> 00:42:43,640
distribution you just make an update but

00:42:41,540 --> 00:42:49,220
the configuration in fact stays the same

00:42:43,640 --> 00:42:53,480
it is not so what we did now is we said

00:42:49,220 --> 00:42:56,000
we we reduce the allowed command set to

00:42:53,480 --> 00:42:58,970
the basic stuff with what we really can

00:42:56,000 --> 00:43:01,490
control which will not change and the

00:42:58,970 --> 00:43:04,190
things like like templates stuff and so

00:43:01,490 --> 00:43:06,590
on and so on we create our own solutions

00:43:04,190 --> 00:43:10,060
because over the long term they are more

00:43:06,590 --> 00:43:13,880
stable when it comes to the interfaces

00:43:10,060 --> 00:43:16,970
so finally one different view on those

00:43:13,880 --> 00:43:20,180
platforms how can you make this platform

00:43:16,970 --> 00:43:23,090
and it's on the one hand side it is

00:43:20,180 --> 00:43:25,850
safety and on the other hand side it is

00:43:23,090 --> 00:43:28,400
flexible you have to use the language of

00:43:25,850 --> 00:43:31,280
your customer and the language of the

00:43:28,400 --> 00:43:33,140
customer is like that we use

00:43:31,280 --> 00:43:34,940
requirements documents and test

00:43:33,140 --> 00:43:37,010
documents but here I show the

00:43:34,940 --> 00:43:39,800
requirements documents if you want to

00:43:37,010 --> 00:43:41,420
make it modular you describe the

00:43:39,800 --> 00:43:45,590
hardware standard in one set of

00:43:41,420 --> 00:43:47,780
requirements the blue ones here you

00:43:45,590 --> 00:43:49,550
describe the Linux platform part in

00:43:47,780 --> 00:43:52,400
another set of requirements high level

00:43:49,550 --> 00:43:55,970
low level design document and so on the

00:43:52,400 --> 00:43:58,190
green ones and the customer brings his

00:43:55,970 --> 00:44:00,410
own configuration his own requirements

00:43:58,190 --> 00:44:03,850
and says ok I'm compatible with this

00:44:00,410 --> 00:44:07,400
platform and I use these interfaces

00:44:03,850 --> 00:44:11,359
what's the big difference here we only

00:44:07,400 --> 00:44:14,330
have to agree with all roughly 70

00:44:11,359 --> 00:44:17,210
customers 70 different products we only

00:44:14,330 --> 00:44:19,250
have to agree upon these interfaces and

00:44:17,210 --> 00:44:21,410
we can creat our requirements very

00:44:19,250 --> 00:44:23,570
stable and they are not touch even as if

00:44:21,410 --> 00:44:26,230
the customer comes up with some fancy

00:44:23,570 --> 00:44:26,230
requirements

00:44:26,779 --> 00:44:36,029
so what's next the next steps for us are

00:44:32,099 --> 00:44:41,099
when it comes to platform we continue to

00:44:36,029 --> 00:44:43,499
shrink the core platform even more we

00:44:41,099 --> 00:44:47,490
have reached the number of 10,000

00:44:43,499 --> 00:44:49,829
systems and we have such a good user

00:44:47,490 --> 00:44:51,119
acceptance of our puppet configurations

00:44:49,829 --> 00:44:52,650
that we were able to give the

00:44:51,119 --> 00:44:55,319
configurations away to the product

00:44:52,650 --> 00:44:58,920
management and to the first and second

00:44:55,319 --> 00:45:01,829
level support so we can take a step back

00:44:58,920 --> 00:45:05,160
and redesign our platform focus it on

00:45:01,829 --> 00:45:07,999
the core concepts when it comes to

00:45:05,160 --> 00:45:11,039
hardware platform what is the next step

00:45:07,999 --> 00:45:13,589
obviously we want to include include

00:45:11,039 --> 00:45:17,579
more modules there are a lot of legacy

00:45:13,589 --> 00:45:20,369
legacy systems and they continue to be

00:45:17,579 --> 00:45:22,230
replaced and all the new hardware we

00:45:20,369 --> 00:45:28,819
want to include in our standard

00:45:22,230 --> 00:45:32,009
obviously when it comes to technologies

00:45:28,819 --> 00:45:35,819
we are currently developing the first

00:45:32,009 --> 00:45:38,640
ATC the first ATC application using

00:45:35,819 --> 00:45:42,690
container technology in in that case it

00:45:38,640 --> 00:45:45,769
is docker and it is the core component

00:45:42,690 --> 00:45:48,059
for networking so quite important

00:45:45,769 --> 00:45:53,940
technology and of course we will also

00:45:48,059 --> 00:45:55,619
include this in our platform and when it

00:45:53,940 --> 00:45:57,660
really comes to software developments

00:45:55,619 --> 00:46:01,859
the biggest challenge for us currently

00:45:57,660 --> 00:46:04,200
is the security requirements so far

00:46:01,859 --> 00:46:09,089
everything atolls all the problems we

00:46:04,200 --> 00:46:10,829
solve the safety requirements in the

00:46:09,089 --> 00:46:14,069
world we are living now security becomes

00:46:10,829 --> 00:46:17,730
more important and we are rated as a

00:46:14,069 --> 00:46:21,859
critical infrastructure this means we

00:46:17,730 --> 00:46:25,079
have completely different requirements

00:46:21,859 --> 00:46:27,809
demanding security and the problem here

00:46:25,079 --> 00:46:30,040
is that security and safety are

00:46:27,809 --> 00:46:32,500
completely different things

00:46:30,040 --> 00:46:34,150
there's a completely different thing to

00:46:32,500 --> 00:46:36,390
say I want to create a safe system I

00:46:34,150 --> 00:46:38,320
love failure and it's somehow

00:46:36,390 --> 00:46:40,900
encapsulated in a box and nobody can

00:46:38,320 --> 00:46:42,640
access it then if you say I wants to

00:46:40,900 --> 00:46:44,230
secure my system I want to have secure

00:46:42,640 --> 00:46:47,620
software I want to do for example life

00:46:44,230 --> 00:46:50,280
patching I want to include software

00:46:47,620 --> 00:46:53,110
updates half a year rate is not enough

00:46:50,280 --> 00:46:57,240
so how to solve that this is really a

00:46:53,110 --> 00:46:59,560
big challenge for us so to sum it up

00:46:57,240 --> 00:47:01,480
what did we achieve in the last ten

00:46:59,560 --> 00:47:05,290
years we successfully built this

00:47:01,480 --> 00:47:09,190
platform and it's widely accepted in our

00:47:05,290 --> 00:47:10,690
business and not even in DFS we are

00:47:09,190 --> 00:47:13,270
currently providing the operating

00:47:10,690 --> 00:47:16,960
systems for the European system for Ike

00:47:13,270 --> 00:47:20,440
us and this is relevance for the whole

00:47:16,960 --> 00:47:22,720
uu European Union we have shown

00:47:20,440 --> 00:47:24,940
successfully that is possible to create

00:47:22,720 --> 00:47:27,940
mission critical systems and fulfill

00:47:24,940 --> 00:47:31,060
these safety requirements with Linux it

00:47:27,940 --> 00:47:33,340
works and in the end we achieved the

00:47:31,060 --> 00:47:37,090
results and we had a lots of fun on our

00:47:33,340 --> 00:47:41,050
way so what is my main point our main

00:47:37,090 --> 00:47:44,620
point is here if I really understand the

00:47:41,050 --> 00:47:47,020
core the core processes and the core

00:47:44,620 --> 00:47:49,630
results I want to achieve both

00:47:47,020 --> 00:47:51,430
internally of my customer and if I

00:47:49,630 --> 00:47:53,440
understand the community that means you

00:47:51,430 --> 00:47:55,810
you are actually contributing to our

00:47:53,440 --> 00:47:57,670
stuff if I understand that it is

00:47:55,810 --> 00:48:00,670
possible to use Linux in a

00:47:57,670 --> 00:48:04,090
mission-critical system thank you

00:48:00,670 --> 00:48:04,090
[Applause]

00:48:07,260 --> 00:48:14,159
[Music]

00:48:09,960 --> 00:48:14,159

YouTube URL: https://www.youtube.com/watch?v=w1SUCdK-mSQ


