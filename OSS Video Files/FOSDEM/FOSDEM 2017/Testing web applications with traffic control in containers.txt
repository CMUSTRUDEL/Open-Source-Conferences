Title: Testing web applications with traffic control in containers
Publication date: 2018-03-06
Playlist: FOSDEM 2017
Description: 
	by Alban Crequy

At: FOSDEM 2017

Testing applications is important, as shows the rise of continuous integrationand automated testing. In this talk, I will focus on one area of testing thatis difficult to automate: poor network connectivity. Developers usually workwithin reliable networking conditions so they might not notice issues thatarise in other networking conditions. I will explain how traffic control onLinux can help to simulate various network connectivity. I will run a demowith Weave Scope showing how an application running in Kubernetes behaves whenchanging network parameters.


Room: H.2213
Scheduled start: 2017-02-05 11:20:00
Captions: 
	00:00:04,670 --> 00:00:09,070
so thanks for coming I will talk about

00:00:06,649 --> 00:00:11,299
testing web app with traffic control

00:00:09,070 --> 00:00:13,190
when I mean traffic control actually I

00:00:11,299 --> 00:00:15,410
mean only network traffic control like

00:00:13,190 --> 00:00:19,730
adding some latency or limiting the

00:00:15,410 --> 00:00:22,490
bandwidth and I will do a short

00:00:19,730 --> 00:00:25,039
presentation of myself worked with

00:00:22,490 --> 00:00:28,429
container before I work on Orkut and I'm

00:00:25,039 --> 00:00:30,619
doing work on weave scope on EB PF and

00:00:28,429 --> 00:00:35,060
before I did some work with traffic

00:00:30,619 --> 00:00:37,789
control for different use case I work at

00:00:35,060 --> 00:00:40,250
kinfolk where one of the confronter and

00:00:37,789 --> 00:00:43,460
we like to work on new level and Linux

00:00:40,250 --> 00:00:48,320
software like this example I work at

00:00:43,460 --> 00:00:52,750
system D we like Enix okay we can find

00:00:48,320 --> 00:00:56,359
out how we start really with the demo so

00:00:52,750 --> 00:00:59,120
the demo I will show you today is this

00:00:56,359 --> 00:01:03,109
application application that's a website

00:00:59,120 --> 00:01:06,110
that sock shop you can buy salts on it

00:01:03,109 --> 00:01:09,140
and I will just quickly go through the

00:01:06,110 --> 00:01:11,509
future to to show you so there is a home

00:01:09,140 --> 00:01:16,189
page there is a catalog

00:01:11,509 --> 00:01:19,250
I will is it big enough yes

00:01:16,189 --> 00:01:22,270
and then you can add things to the cart

00:01:19,250 --> 00:01:25,520
and then there are your products there

00:01:22,270 --> 00:01:28,729
so this application this website has

00:01:25,520 --> 00:01:32,469
been implemented using micro service

00:01:28,729 --> 00:01:34,729
architecture what it means it's it has

00:01:32,469 --> 00:01:37,219
its running in a lot of different

00:01:34,729 --> 00:01:39,590
containers on each container has a

00:01:37,219 --> 00:01:42,320
different purpose there is the front end

00:01:39,590 --> 00:01:43,880
I think is running in PHP and there and

00:01:42,320 --> 00:01:45,710
there is a lot of different backgrounds

00:01:43,880 --> 00:01:52,340
from different database on different

00:01:45,710 --> 00:01:57,100
services so I will show you now we've

00:01:52,340 --> 00:01:57,100
scope should I make it a bit smaller

00:01:59,320 --> 00:02:05,330
we have scopes that's monitoring on

00:02:02,720 --> 00:02:07,100
visualization tool you can see all the

00:02:05,330 --> 00:02:08,720
content running on your cluster in my

00:02:07,100 --> 00:02:10,640
case I have only one node putting in a

00:02:08,720 --> 00:02:14,180
virtual machine on my laptop but the

00:02:10,640 --> 00:02:16,370
idea is the same for more nodes on here

00:02:14,180 --> 00:02:18,590
I can see for example I have front-end

00:02:16,370 --> 00:02:21,530
and what's interesting is instead of

00:02:18,590 --> 00:02:23,420
seeing things in the list you can see a

00:02:21,530 --> 00:02:24,770
graph you can see what kind of

00:02:23,420 --> 00:02:28,610
communication happens between the

00:02:24,770 --> 00:02:31,130
different containers so in this example

00:02:28,610 --> 00:02:33,740
I have the fronton and I have a link to

00:02:31,130 --> 00:02:36,350
the user container talking to the user

00:02:33,740 --> 00:02:39,100
of database container so I see

00:02:36,350 --> 00:02:41,630
in fact seek and then I shall be able to

00:02:39,100 --> 00:02:44,410
see the list of containers the list of

00:02:41,630 --> 00:02:46,610
courses in that and then I can explore

00:02:44,410 --> 00:02:50,239
the container and I can see the

00:02:46,610 --> 00:02:55,030
different connections that happened

00:02:50,239 --> 00:02:59,030
there so what I want to test with that

00:02:55,030 --> 00:03:02,000
is a scenario where the network does not

00:02:59,030 --> 00:03:03,890
behave really correctly as a developer

00:03:02,000 --> 00:03:05,360
usually we have a good internet

00:03:03,890 --> 00:03:08,690
connection so there is a low latency

00:03:05,360 --> 00:03:10,430
good bandwidth and especially when

00:03:08,690 --> 00:03:11,989
things are running in a virtual machine

00:03:10,430 --> 00:03:14,600
on your laptop there is a good

00:03:11,989 --> 00:03:17,290
connection between Firefox on the

00:03:14,600 --> 00:03:18,410
virtual machine so it's not easy to see

00:03:17,290 --> 00:03:21,920
bergs

00:03:18,410 --> 00:03:24,310
in in the UI that could happen with bad

00:03:21,920 --> 00:03:27,730
internet connection

00:03:24,310 --> 00:03:27,730
for example

00:03:29,110 --> 00:03:36,070
here I go to to cut just to see what I

00:03:33,850 --> 00:03:39,520
have just refresh the page but it looks

00:03:36,070 --> 00:03:43,630
fine it looks the items seems to appear

00:03:39,520 --> 00:03:49,270
pretty fast so to be able to tell that

00:03:43,630 --> 00:03:51,820
we have developed a plugin on a weave

00:03:49,270 --> 00:03:55,390
scope to be able to charge the network

00:03:51,820 --> 00:04:00,600
setting to add some latency and if I go

00:03:55,390 --> 00:04:00,600
for example to the catalog container

00:04:03,030 --> 00:04:10,000
here it is here I have some controls

00:04:07,780 --> 00:04:14,290
which come with a scope for example I

00:04:10,000 --> 00:04:15,670
have something to get the logs to get a

00:04:14,290 --> 00:04:21,190
shell inside the container

00:04:15,670 --> 00:04:23,980
I could oppose or stop the container but

00:04:21,190 --> 00:04:27,550
what the traffic control plugin added to

00:04:23,980 --> 00:04:30,820
that was to add a more buttons to make

00:04:27,550 --> 00:04:33,220
it slower and here I have a button to

00:04:30,820 --> 00:04:38,680
add a two-second latency if I click on

00:04:33,220 --> 00:04:42,010
it then things will be slower so let me

00:04:38,680 --> 00:04:44,800
go back to weave socks do and I will

00:04:42,010 --> 00:04:47,919
press f12 if you don't know of Firefox

00:04:44,800 --> 00:04:50,290
when you press f12 you have Network

00:04:47,919 --> 00:04:52,540
console and then when you reload the

00:04:50,290 --> 00:04:55,330
page you should be able to see the

00:04:52,540 --> 00:04:59,440
different connection the different HTTP

00:04:55,330 --> 00:05:01,290
connection to the web page and yeah most

00:04:59,440 --> 00:05:03,640
of them should be quite fast but

00:05:01,290 --> 00:05:05,050
actually what you see here the page

00:05:03,640 --> 00:05:08,500
seems fully loaded but there was no

00:05:05,050 --> 00:05:13,540
items in the cat on here it seems to be

00:05:08,500 --> 00:05:14,910
only one yeah something doesn't work

00:05:13,540 --> 00:05:18,330
well yeah as expected

00:05:14,910 --> 00:05:21,480
yeah the image doesn't come very quickly

00:05:18,330 --> 00:05:23,770
and that's something you can see here in

00:05:21,480 --> 00:05:27,640
in Firefox there should be some

00:05:23,770 --> 00:05:30,460
connections most of connection HTTP

00:05:27,640 --> 00:05:33,130
requests are quite fast but like one of

00:05:30,460 --> 00:05:35,110
them this one like eight seven more than

00:05:33,130 --> 00:05:37,200
eight second that's because I did a lot

00:05:35,110 --> 00:05:40,030
of latency to the

00:05:37,200 --> 00:05:41,500
to the catalogue containers and here we

00:05:40,030 --> 00:05:45,070
can see the request was actually to the

00:05:41,500 --> 00:05:47,680
catalog URL and that's because the

00:05:45,070 --> 00:05:52,660
fronton need to contact the catalog to

00:05:47,680 --> 00:05:54,250
be able to fulfill that request so I

00:05:52,660 --> 00:05:58,930
will do it again I will refresh again

00:05:54,250 --> 00:06:01,750
and so you can see what happened here so

00:05:58,930 --> 00:06:04,750
the file the page looks fully loaded but

00:06:01,750 --> 00:06:07,660
it's actually there is no spinning wheel

00:06:04,750 --> 00:06:10,780
on Firefox to say still loading there is

00:06:07,660 --> 00:06:13,780
the wrong sum here it's $0 and you see

00:06:10,780 --> 00:06:17,440
one items here instead of two and there

00:06:13,780 --> 00:06:20,560
is nothing there and it takes a while to

00:06:17,440 --> 00:06:23,140
come so a good user interface will have

00:06:20,560 --> 00:06:25,870
some user feedback to say it's still

00:06:23,140 --> 00:06:28,750
loading to not confuse the user by

00:06:25,870 --> 00:06:31,570
saying there is nothing in a cut because

00:06:28,750 --> 00:06:34,800
the user may be prompted to say okay I

00:06:31,570 --> 00:06:38,140
lost everything I will try to buy again

00:06:34,800 --> 00:06:41,020
so that something can test with traffic

00:06:38,140 --> 00:06:44,560
control by using web scope with the

00:06:41,020 --> 00:06:48,910
traffic control beginner here I will

00:06:44,560 --> 00:06:53,020
waste all the settings so now if i

00:06:48,910 --> 00:06:55,660
refresh again it should work fine yeah

00:06:53,020 --> 00:06:58,440
no it works fine again and if I go to

00:06:55,660 --> 00:07:03,790
the catalog page there is a similar word

00:06:58,440 --> 00:07:07,050
if I make it slow again and I have some

00:07:03,790 --> 00:07:09,550
demo effect that is supposed to work

00:07:07,050 --> 00:07:12,640
and refresh the page and click on

00:07:09,550 --> 00:07:16,780
refresh and here it does not look really

00:07:12,640 --> 00:07:19,390
good UI in that case so there is a lot

00:07:16,780 --> 00:07:22,450
of UI issues that would be benefit from

00:07:19,390 --> 00:07:25,690
testing with traffic control to see what

00:07:22,450 --> 00:07:30,360
happened in that case okay that's it for

00:07:25,690 --> 00:07:30,360
the demo I will go back to the slides

00:07:30,480 --> 00:07:37,000
just say a few words about the scope

00:07:33,610 --> 00:07:39,550
architecture so in my case I tested only

00:07:37,000 --> 00:07:41,920
on one node and in a virtual machine on

00:07:39,550 --> 00:07:43,840
my laptop but that's something which if

00:07:41,920 --> 00:07:45,970
you have a website that scale on money

00:07:43,840 --> 00:07:49,470
not you can use something like unities

00:07:45,970 --> 00:07:52,530
to scaler that's what I have actually

00:07:49,470 --> 00:07:54,330
my laptop and then you can have a scope

00:07:52,530 --> 00:07:58,320
deployed on all the nodes of the cluster

00:07:54,330 --> 00:08:01,140
and you have typically one agent on each

00:07:58,320 --> 00:08:02,580
node that will inspect the different

00:08:01,140 --> 00:08:04,290
connection if we did get the list of

00:08:02,580 --> 00:08:07,440
process the restart container the list

00:08:04,290 --> 00:08:10,200
of TCP connections and then the agent

00:08:07,440 --> 00:08:12,210
will report that to the web drop we get

00:08:10,200 --> 00:08:15,750
all the report and merge them and be

00:08:12,210 --> 00:08:18,840
able to display them to Firefox so

00:08:15,750 --> 00:08:22,830
that's why here I see sorry

00:08:18,840 --> 00:08:28,080
here I can see all the nodes on all the

00:08:22,830 --> 00:08:29,730
process of the conditions in this case I

00:08:28,080 --> 00:08:32,159
add the traffic control plug-in that's

00:08:29,730 --> 00:08:34,650
one on each node and the traffic control

00:08:32,159 --> 00:08:36,960
bragini will be able to receive orders

00:08:34,650 --> 00:08:39,659
from the command when we click on the

00:08:36,960 --> 00:08:43,620
buttons and it will offer us the traffic

00:08:39,659 --> 00:08:47,240
control like two seconds latency how

00:08:43,620 --> 00:08:51,450
does traffic control works he choose

00:08:47,240 --> 00:08:53,820
queueing discipline and local network

00:08:51,450 --> 00:08:57,150
scheduler he choose the network emulator

00:08:53,820 --> 00:08:59,370
one which is available in Linux since

00:08:57,150 --> 00:09:02,610
Linux 2.2 so that's really all done

00:08:59,370 --> 00:09:05,339
available I think everywhere and it has

00:09:02,610 --> 00:09:06,990
some parameter you can define a limit on

00:09:05,339 --> 00:09:09,060
the bandwidth you can increase the

00:09:06,990 --> 00:09:10,920
latency you can drop some packet you can

00:09:09,060 --> 00:09:12,900
say I want to drop two percent of the

00:09:10,920 --> 00:09:15,000
packet and you can call it packet you

00:09:12,900 --> 00:09:16,890
can do a lot of things here in this talk

00:09:15,000 --> 00:09:20,730
I just focus on the latency I just add

00:09:16,890 --> 00:09:25,339
some latency to see what happened is

00:09:20,730 --> 00:09:28,339
there any questions so far

00:09:25,339 --> 00:09:28,339
yes

00:09:33,129 --> 00:09:40,100
yes that's a camera module in Linux and

00:09:37,310 --> 00:09:43,310
usually all the distributions package it

00:09:40,100 --> 00:09:45,889
so it's a single favor you need to

00:09:43,310 --> 00:09:48,980
install I don't remember the name of the

00:09:45,889 --> 00:09:49,699
RPM but is like kernel module extra or

00:09:48,980 --> 00:09:54,019
something like that

00:09:49,699 --> 00:09:56,089
and then when it's installed it just

00:09:54,019 --> 00:10:02,300
worked the module get charged and loaded

00:09:56,089 --> 00:10:04,569
automatically okay

00:10:02,300 --> 00:10:08,180
so when we want to test we don't want to

00:10:04,569 --> 00:10:09,889
change the traffic control like a tansy

00:10:08,180 --> 00:10:11,779
on everything we want to do it on only

00:10:09,889 --> 00:10:13,309
one container the one we want to test

00:10:11,779 --> 00:10:17,300
like in this example a test in our

00:10:13,309 --> 00:10:19,069
catalog and it's possible to do that

00:10:17,300 --> 00:10:20,949
because the queuing discipline or

00:10:19,069 --> 00:10:23,089
network emulator is installed not

00:10:20,949 --> 00:10:25,670
globally but only on one network

00:10:23,089 --> 00:10:27,499
interface on each container are their

00:10:25,670 --> 00:10:31,009
own network interface so here I can

00:10:27,499 --> 00:10:33,559
apply the settings only on one container

00:10:31,009 --> 00:10:39,769
or two container or I can choose I don't

00:10:33,559 --> 00:10:43,990
have to have this setting globally you

00:10:39,769 --> 00:10:43,990
have any other occasions this

00:10:48,070 --> 00:10:52,840
the question is can I run this

00:10:49,540 --> 00:10:56,050
automatically automatically in CI in

00:10:52,840 --> 00:10:58,990
with this exactly and now but internally

00:10:56,050 --> 00:11:01,630
it shows the command line tool TC for

00:10:58,990 --> 00:11:05,830
traffic control and this thing can be

00:11:01,630 --> 00:11:09,240
used in CIO or in script and I can show

00:11:05,830 --> 00:11:12,010
you the code actually if I refine it so

00:11:09,240 --> 00:11:14,410
here is the github repository on we've

00:11:12,010 --> 00:11:20,440
work plugins and it's traffic control

00:11:14,410 --> 00:11:22,390
plugin here because you can see and hear

00:11:20,440 --> 00:11:23,530
it called a function apply lands on C

00:11:22,390 --> 00:11:29,530
but what I do

00:11:23,530 --> 00:11:30,940
sorry what it does yeah it's in another

00:11:29,530 --> 00:11:33,280
file but what he does it just do a

00:11:30,940 --> 00:11:35,560
system exec to execute the TC command

00:11:33,280 --> 00:11:37,780
with the correct diameter on the correct

00:11:35,560 --> 00:11:45,490
network interface but something can

00:11:37,780 --> 00:11:47,800
script yes it's possible to do in this

00:11:45,490 --> 00:11:50,800
sorry the question is what about

00:11:47,800 --> 00:11:53,830
incoming traffic as opposed to outgoing

00:11:50,800 --> 00:11:55,830
traffic in this traffic control plugin I

00:11:53,830 --> 00:11:58,750
will only care about outgoing traffic

00:11:55,830 --> 00:12:00,370
but it's possible to do incoming traffic

00:11:58,750 --> 00:12:02,590
that's a bit more difficult because you

00:12:00,370 --> 00:12:05,850
can more easily regulate what you send

00:12:02,590 --> 00:12:10,240
rather than what other people's on you

00:12:05,850 --> 00:12:16,960
but there is a kernel module called IFB

00:12:10,240 --> 00:12:19,330
for I'm not sure what it means in IRB

00:12:16,960 --> 00:12:20,680
I'm not sure what he means but right you

00:12:19,330 --> 00:12:23,410
can you can redirect the incoming

00:12:20,680 --> 00:12:25,570
traffic to that IFB network interface

00:12:23,410 --> 00:12:28,060
and then you can apply the setting there

00:12:25,570 --> 00:12:31,570
and then you can it will cue the

00:12:28,060 --> 00:12:34,990
incoming traffic so if you use TCP right

00:12:31,570 --> 00:12:38,260
you'll automatically adapt to the

00:12:34,990 --> 00:12:39,610
bandwidth or the latency and then in

00:12:38,260 --> 00:12:46,320
practice the application will see the

00:12:39,610 --> 00:12:46,320
correct latency another location

00:12:55,720 --> 00:12:59,880
[Music]

00:12:57,139 --> 00:13:02,329
I've not fight it but it should work as

00:12:59,880 --> 00:13:07,260
well because it's just continued on

00:13:02,329 --> 00:13:12,269
network interface in the end I guess so

00:13:07,260 --> 00:13:14,670
with scope it rely evilly I think on

00:13:12,269 --> 00:13:17,639
docker but if it is cottony or not based

00:13:14,670 --> 00:13:21,690
on the car we cannot use at the moment

00:13:17,639 --> 00:13:25,160
scope JIT but the internal things the TC

00:13:21,690 --> 00:13:28,140
command-line tool can be Jackie used

00:13:25,160 --> 00:13:32,769
thanks

00:13:28,140 --> 00:13:32,769

YouTube URL: https://www.youtube.com/watch?v=Te2PAwWUGSU


