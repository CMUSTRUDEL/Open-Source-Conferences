Title: The Making of a Secure Open Source Password Keeper From the Electronics to the High Level Software.â€¦
Publication date: 2018-03-06
Playlist: FOSDEM 2017
Description: 
	The Making of a Secure Open Source Password Keeper From the Electronics to the High Level Software...
by Mathieu Stephan

At: FOSDEM 2017

The Mooltipass Offline Password Keeper project was started three years ago bya small community to provide a safe and offline way of storing credentials.

Since then, about 50 individuals from around the globe have contributed to theproject, bringing two models of the Mooltipass device to market.

Mooltipass devices are currently used by thousands of people, several majorcompanies, and government agencies. This talk will describe the Mooltipasshardware, firmware and software architectures with a focus on what it took tomove from idea to commercial product, while having all the development andproduction files publicly available on GitHub.

While writing for Hack-a-Day, in December 2013 project creator Mathieu Stephanhad the crazy idea of creating an open hardware device using a team spread allover the globe. He posted a call for developers on hackaday.com, whichresulted in a team of 20 individuals. Over the course of three years, using avariety of free (Trello, Google groups, IRC) and open source (KiCad, Gimp,GCC) tools the Mooltipass team developed a complete solution composed of:

  * Firmware for the devices (AES encryption, storage management, graphics, random number generation, smartcard management)

  * Two models of physical device each composed of a PCB, case, screen, usb and smartcard connectors

  * Several open source software solutions to provide computer integration with the device, depending on the users' preferences: a cross platform daemon (Windows, Linux, Mac) [moolticute], a python management tool [mooltipy], a chrome and firefox extension, and a chrome app to provide native integration with websites

Having a complete, unremunerated teamworking on the Mooltipass project duringtheir spare time created interesting management challenges, particularly withrespect to establishing and enforcing coding rules and commenting practices.The first crowdfunding campaign successfully raised $125k in December 2014,which was more than sufficient to start the ball rolling. The secondcrowdfunding campgin for the Mooltipass Mini raised $168k last October.


Room: Janson
Scheduled start: 2017-02-05 10:00:00
Captions: 
	00:00:00,000 --> 00:00:03,530
thanks for coming here

00:00:04,609 --> 00:00:09,809
thanks for being interested in fast food

00:00:07,379 --> 00:00:11,670
management solutions I know that most of

00:00:09,809 --> 00:00:14,760
us have poor ones trying to remember

00:00:11,670 --> 00:00:17,490
passwords that are secure enough or easy

00:00:14,760 --> 00:00:20,460
to remember so this talk is going to be

00:00:17,490 --> 00:00:24,779
about that so first I'm going to present

00:00:20,460 --> 00:00:27,390
myself my name is Mathieu Stefan I'm an

00:00:24,779 --> 00:00:29,909
embedded systems engineer I'm a former

00:00:27,390 --> 00:00:32,310
writer for hacker.com for pretty sure

00:00:29,909 --> 00:00:34,770
than most of you know what hacker.com is

00:00:32,310 --> 00:00:37,830
it's a electronics content gathering

00:00:34,770 --> 00:00:39,300
websites so basically so website that

00:00:37,830 --> 00:00:41,970
explains the different projects of

00:00:39,300 --> 00:00:44,820
different open-source enthusiasts I also

00:00:41,970 --> 00:00:47,550
have my website and I'm the founder of

00:00:44,820 --> 00:00:50,250
the multipass open-source projects so

00:00:47,550 --> 00:00:54,390
quick show of hands who here knows about

00:00:50,250 --> 00:00:56,610
the multipass it's not too bad ok cool

00:00:54,390 --> 00:00:59,100
so hopefully at the end of this talk you

00:00:56,610 --> 00:01:02,940
will know a bit more about it so what is

00:00:59,100 --> 00:01:05,250
the multi pass so multi pass is an are

00:01:02,940 --> 00:01:06,900
way approach of storing logins and

00:01:05,250 --> 00:01:09,450
passwords so it's a dedicated device

00:01:06,900 --> 00:01:11,520
that we store for you all your

00:01:09,450 --> 00:01:15,659
credentials and also some small files

00:01:11,520 --> 00:01:17,850
it's it is natively supported by Chrome

00:01:15,659 --> 00:01:20,190
and Firefox we developed some extension

00:01:17,850 --> 00:01:23,760
I will detail on this point later

00:01:20,190 --> 00:01:25,320
and what is great is it is recognized as

00:01:23,760 --> 00:01:26,909
a keyboard so basically it is going to

00:01:25,320 --> 00:01:28,920
type your logins and passwords for you

00:01:26,909 --> 00:01:31,500
so it will be compatible with any

00:01:28,920 --> 00:01:35,310
application on any operating system and

00:01:31,500 --> 00:01:37,650
even on smartphones it is made of an

00:01:35,310 --> 00:01:39,900
aluminum case it allows multiple users

00:01:37,650 --> 00:01:48,869
and of course it's open software and

00:01:39,900 --> 00:01:51,090
open hardware and I'm French you know so

00:01:48,869 --> 00:01:53,340
internally I will detail on this point

00:01:51,090 --> 00:01:55,380
later it's basically a small box with a

00:01:53,340 --> 00:01:57,630
microcontroller some flash memory to

00:01:55,380 --> 00:02:00,450
store your logins and passwords which

00:01:57,630 --> 00:02:01,920
are encrypted of course some LED screen

00:02:00,450 --> 00:02:04,680
and a clickable wheel for user

00:02:01,920 --> 00:02:07,409
interaction the increment key encryption

00:02:04,680 --> 00:02:09,090
key that is used to encrypt your logins

00:02:07,409 --> 00:02:11,849
and password is taught on a dedicated

00:02:09,090 --> 00:02:16,240
smart card so basically every user is

00:02:11,849 --> 00:02:18,520
uniquely identified using this smart car

00:02:16,240 --> 00:02:19,930
so it's cool I know so what does it look

00:02:18,520 --> 00:02:21,940
like actually so you will have this

00:02:19,930 --> 00:02:24,580
small device every time you need to

00:02:21,940 --> 00:02:27,310
login on the on the on the website it's

00:02:24,580 --> 00:02:29,620
going to light up asks you do you want

00:02:27,310 --> 00:02:31,780
to login on that website here we have

00:02:29,620 --> 00:02:34,150
implemented some NOC detection but you

00:02:31,780 --> 00:02:36,340
can also improve on the wheel itself so

00:02:34,150 --> 00:02:39,880
this is native browser integration on

00:02:36,340 --> 00:02:42,100
Chrome or Firefox but we also have an

00:02:39,880 --> 00:02:43,810
active way of entering logins and

00:02:42,100 --> 00:02:45,760
passwords so basically you use your

00:02:43,810 --> 00:02:48,280
multi pass you say I want to login on

00:02:45,760 --> 00:02:51,280
that website here you can see it is

00:02:48,280 --> 00:02:53,680
connected to my phone using an USB

00:02:51,280 --> 00:02:56,250
on-the-go cable so just browse to the

00:02:53,680 --> 00:02:58,690
login and password you want to enter and

00:02:56,250 --> 00:03:03,310
you can improve the prompts on the

00:02:58,690 --> 00:03:05,560
device itself so wipe this talks on this

00:03:03,310 --> 00:03:07,720
complete project has been made from a

00:03:05,560 --> 00:03:10,030
communica mmunity located all over the

00:03:07,720 --> 00:03:12,820
globe so the goal of this talk is to

00:03:10,030 --> 00:03:15,760
describe how we started from nothing how

00:03:12,820 --> 00:03:18,100
we created a project from scratch how 20

00:03:15,760 --> 00:03:19,660
people collaborated together how we

00:03:18,100 --> 00:03:21,720
could communicate even though we were

00:03:19,660 --> 00:03:24,700
literally on the other side of the globe

00:03:21,720 --> 00:03:27,430
how we created two devices from the

00:03:24,700 --> 00:03:29,410
ground up and how we also created the

00:03:27,430 --> 00:03:31,180
different applications the different

00:03:29,410 --> 00:03:34,210
software running on the computer itself

00:03:31,180 --> 00:03:37,750
and also how we raised around 300 K

00:03:34,210 --> 00:03:40,470
using IndieGoGo or Kickstarter so I'm

00:03:37,750 --> 00:03:43,480
going to start by the beginning how we

00:03:40,470 --> 00:03:47,890
managed to get a lot of contributors how

00:03:43,480 --> 00:03:50,230
we set up the project infrastructure as

00:03:47,890 --> 00:03:52,330
I mentioned at the time I was a writer

00:03:50,230 --> 00:03:54,790
for hacker.com so I figured okay let's

00:03:52,330 --> 00:03:56,890
try to create a device that everyone can

00:03:54,790 --> 00:03:57,700
work on we wanted it to be everyone from

00:03:56,890 --> 00:04:00,400
all over the globe

00:03:57,700 --> 00:04:02,380
so I created I made a quick article

00:04:00,400 --> 00:04:04,060
which is only 150 words something like

00:04:02,380 --> 00:04:05,980
that saying ok I want to create this

00:04:04,060 --> 00:04:07,450
device is there anyone else that wants

00:04:05,980 --> 00:04:09,790
to work on it

00:04:07,450 --> 00:04:13,600
luckily enough Hockaday was kind enough

00:04:09,790 --> 00:04:15,430
to allow me to use the hackaday name not

00:04:13,600 --> 00:04:17,410
exactly saying it is made by hackaday

00:04:15,430 --> 00:04:19,540
but it is developed developed on

00:04:17,410 --> 00:04:23,860
hackaday so had a few papers to sign

00:04:19,540 --> 00:04:28,759
also so we made a call for contributors

00:04:23,860 --> 00:04:30,800
we receive I think 30 40 applications

00:04:28,759 --> 00:04:33,169
and of course because we wanted to get

00:04:30,800 --> 00:04:35,360
the applicants interested in what they

00:04:33,169 --> 00:04:37,279
would be doing the tasks were assigned

00:04:35,360 --> 00:04:39,559
of what they wanted to do

00:04:37,279 --> 00:04:45,319
how much spare time they had and there

00:04:39,559 --> 00:04:47,150
we are of expertise in that order so as

00:04:45,319 --> 00:04:48,589
I mentioned the contributors are located

00:04:47,150 --> 00:04:52,039
all over the globe so this is a quick

00:04:48,589 --> 00:04:54,979
map of where they are of course me I'm

00:04:52,039 --> 00:04:56,629
located in Switzerland hardest guy to

00:04:54,979 --> 00:05:00,319
work with was located in New Zealand

00:04:56,629 --> 00:05:04,279
which is 12 hours so we had to go to bed

00:05:00,319 --> 00:05:06,649
quite late at this time anyway so first

00:05:04,279 --> 00:05:08,719
first step first you have 30

00:05:06,649 --> 00:05:11,870
contributors how do you try to work

00:05:08,719 --> 00:05:14,389
together so it took us I think one month

00:05:11,870 --> 00:05:16,490
and a half to lead up to agree on some

00:05:14,389 --> 00:05:19,490
ground rules as you may know everyone

00:05:16,490 --> 00:05:22,639
has their own way of creating code tabs

00:05:19,490 --> 00:05:25,009
versus spaces or if do I want to put my

00:05:22,639 --> 00:05:27,770
bracket on the dedicated line these are

00:05:25,009 --> 00:05:29,539
points that seem quite trivial but when

00:05:27,770 --> 00:05:31,699
you have 30 contributors from all over

00:05:29,539 --> 00:05:35,449
the globe that have their own and unique

00:05:31,699 --> 00:05:39,709
way of doing stuff it can get messy so

00:05:35,449 --> 00:05:41,149
we used some emails who try to find a

00:05:39,709 --> 00:05:42,879
consensus to find the rules that

00:05:41,149 --> 00:05:45,409
everyone could agree on

00:05:42,879 --> 00:05:47,839
we used get up for code version in

00:05:45,409 --> 00:05:49,580
control one of the calls was to document

00:05:47,839 --> 00:05:51,620
all source code

00:05:49,580 --> 00:05:53,029
mainly because if someone was to leave

00:05:51,620 --> 00:05:55,520
the project we want to have some

00:05:53,029 --> 00:05:58,099
documentation of what he has done so the

00:05:55,520 --> 00:05:59,779
guy that would pick up on his work would

00:05:58,099 --> 00:06:00,860
be able to continue working without

00:05:59,779 --> 00:06:02,770
spending I don't know how many days

00:06:00,860 --> 00:06:05,029
trying to understand what he has done

00:06:02,770 --> 00:06:06,979
everyone is working on the DK did on a

00:06:05,029 --> 00:06:09,379
dedicated file of order so we don't

00:06:06,979 --> 00:06:11,779
spend hours or days trying to merge

00:06:09,379 --> 00:06:13,819
files together depending on how the code

00:06:11,779 --> 00:06:15,080
is made of course and as I mentioned the

00:06:13,819 --> 00:06:17,860
colleague convention was quite a

00:06:15,080 --> 00:06:22,490
friction point between the contributors

00:06:17,860 --> 00:06:24,709
so how to talk with each other we all

00:06:22,490 --> 00:06:26,990
have different availabilities people are

00:06:24,709 --> 00:06:29,779
not paid and not paid by this project so

00:06:26,990 --> 00:06:32,059
basically it all depends on our wives

00:06:29,779 --> 00:06:35,689
children's to others allowance on the

00:06:32,059 --> 00:06:38,149
project we want so some contributors

00:06:35,689 --> 00:06:41,120
will not be able to work on the code for

00:06:38,149 --> 00:06:44,330
not for a week two weeks so how do we

00:06:41,120 --> 00:06:47,150
Keifer trace of what has been done so we

00:06:44,330 --> 00:06:49,820
chose to use Google Groups mainly

00:06:47,150 --> 00:06:52,550
because it was easy all the traces

00:06:49,820 --> 00:06:55,010
related all the discussions related to

00:06:52,550 --> 00:06:58,760
the development can be found there we

00:06:55,010 --> 00:07:00,440
didn't want to use Skype or any direct

00:06:58,760 --> 00:07:02,060
conversion conversation bin

00:07:00,440 --> 00:07:04,550
mainly because it would not leave a

00:07:02,060 --> 00:07:06,440
trace and it would lead to developers

00:07:04,550 --> 00:07:08,900
being out of the loop so as much as

00:07:06,440 --> 00:07:12,410
possible use mailing lists or sometimes

00:07:08,900 --> 00:07:14,300
IRC the main challenge as you can guess

00:07:12,410 --> 00:07:16,550
is to keep the momentum going if you

00:07:14,300 --> 00:07:18,860
have a project people are working on

00:07:16,550 --> 00:07:21,320
their own time in different places so

00:07:18,860 --> 00:07:23,630
you never realize what you have done so

00:07:21,320 --> 00:07:25,280
far but to where the project is at you

00:07:23,630 --> 00:07:27,320
don't know okay where are we now what

00:07:25,280 --> 00:07:30,470
are we going to do and you might lose

00:07:27,320 --> 00:07:32,780
motivation so every time every I think

00:07:30,470 --> 00:07:35,090
one or two weeks we said okay this guy

00:07:32,780 --> 00:07:36,380
has done that the project is close to

00:07:35,090 --> 00:07:40,600
the end we are close to having a

00:07:36,380 --> 00:07:40,600
password manager that is working well so

00:07:40,870 --> 00:07:46,310
as I mentioned keeping keeping everyone

00:07:43,850 --> 00:07:48,680
involved this project is open source and

00:07:46,310 --> 00:07:51,560
the name itself has not been chosen by

00:07:48,680 --> 00:07:54,229
me we kept the hackaday community

00:07:51,560 --> 00:07:57,349
involved at at all times so every month

00:07:54,229 --> 00:07:59,500
or so we were saying okay for example we

00:07:57,349 --> 00:08:02,330
have done we have done the hardware case

00:07:59,500 --> 00:08:04,250
there what do you think of it we still

00:08:02,330 --> 00:08:06,830
don't have a name for the project itself

00:08:04,250 --> 00:08:09,169
so several readers suggested some names

00:08:06,830 --> 00:08:12,349
you can see spark base key multipaths

00:08:09,169 --> 00:08:15,620
and seems a multipass was a good success

00:08:12,349 --> 00:08:18,889
we had 33 percents in a vote we

00:08:15,620 --> 00:08:20,900
organized on Hockaday itself so this way

00:08:18,889 --> 00:08:24,110
we could keep the readers involved and

00:08:20,900 --> 00:08:26,510
more importantly get their opinions on

00:08:24,110 --> 00:08:30,889
what the project was at and what we

00:08:26,510 --> 00:08:32,060
should do and what we shouldn't do I was

00:08:30,889 --> 00:08:36,020
saying it's hard to know where the

00:08:32,060 --> 00:08:38,380
project is at so we used Trello before

00:08:36,020 --> 00:08:40,969
it was bought by Atlassian information

00:08:38,380 --> 00:08:42,650
so we use Trello to keep a nice view of

00:08:40,969 --> 00:08:44,330
who is doing what and what is the

00:08:42,650 --> 00:08:50,570
current state so it's a very nice way to

00:08:44,330 --> 00:08:52,730
see if this task is is is done if we if

00:08:50,570 --> 00:08:54,829
you are behind on some for example the

00:08:52,730 --> 00:08:54,980
graphics and all that so you can see if

00:08:54,829 --> 00:08:56,329
I

00:08:54,980 --> 00:08:58,880
and what he different tasks that were

00:08:56,329 --> 00:09:00,980
assigned to different people and who

00:08:58,880 --> 00:09:03,199
what are the tasks that needs to be done

00:09:00,980 --> 00:09:05,630
which ones are done it's a nice way to

00:09:03,199 --> 00:09:10,300
see where the project is at in a quick

00:09:05,630 --> 00:09:14,779
glance so everyone is working for free

00:09:10,300 --> 00:09:16,970
how do you try to have some products

00:09:14,779 --> 00:09:19,850
commercialized and ready to go to

00:09:16,970 --> 00:09:21,620
IndieGoGo or Kickstarter you whether you

00:09:19,850 --> 00:09:23,420
want it or not you have deadlines you

00:09:21,620 --> 00:09:24,800
want you have an objective which is for

00:09:23,420 --> 00:09:26,750
example to go on Kickstarter in two

00:09:24,800 --> 00:09:28,279
months or three month and of course if

00:09:26,750 --> 00:09:30,980
there is one part of the firmware that

00:09:28,279 --> 00:09:33,620
is late you want to talk with that guy

00:09:30,980 --> 00:09:36,230
see what he needs what can be done so

00:09:33,620 --> 00:09:38,540
you can arrive at the final at the

00:09:36,230 --> 00:09:41,959
firmware version one as soon as possible

00:09:38,540 --> 00:09:44,149
so we encouraged the develop the

00:09:41,959 --> 00:09:46,310
different developers to try to find

00:09:44,149 --> 00:09:48,740
solutions by themselves we encourage

00:09:46,310 --> 00:09:51,199
innovation as I said in the beginning

00:09:48,740 --> 00:09:53,420
the tasks were assigned on what they

00:09:51,199 --> 00:09:55,610
wanted to do so motivation usually was

00:09:53,420 --> 00:09:57,980
not a problem but in some cases life

00:09:55,610 --> 00:10:01,399
gets in a way I don't know someone had

00:09:57,980 --> 00:10:05,319
babies we had to replace that guy so

00:10:01,399 --> 00:10:08,949
anyway we we try to motivate people by

00:10:05,319 --> 00:10:11,480
showing their work to the community

00:10:08,949 --> 00:10:13,940
estimated time of arrival for tasks

00:10:11,480 --> 00:10:16,910
always a tricky subject you want to try

00:10:13,940 --> 00:10:19,940
to see with the contributor what what's

00:10:16,910 --> 00:10:22,519
his what he needs what what needs to be

00:10:19,940 --> 00:10:24,500
done and how you can help and sometimes

00:10:22,519 --> 00:10:26,360
all the contributors will go play and

00:10:24,500 --> 00:10:27,399
we'll try to help them as well so it can

00:10:26,360 --> 00:10:29,899
be spontaneous

00:10:27,399 --> 00:10:31,459
so now we've talked about the community

00:10:29,899 --> 00:10:33,199
I'm going to dig into the hardware I

00:10:31,459 --> 00:10:34,940
will stuff from the hardware firmware

00:10:33,199 --> 00:10:37,399
and software so at the very low level

00:10:34,940 --> 00:10:39,529
this is what the multi path looks like

00:10:37,399 --> 00:10:42,410
this was the very first photo prototype

00:10:39,529 --> 00:10:44,690
hand-assembled actually soldered I think

00:10:42,410 --> 00:10:46,190
10 or 15 prototypes myself that were

00:10:44,690 --> 00:10:48,589
directly shipped to the contributors it

00:10:46,190 --> 00:10:53,019
does not look pretty but at least you

00:10:48,589 --> 00:10:55,850
can start coding on it cases I mentioned

00:10:53,019 --> 00:10:59,569
every major decision was made by the

00:10:55,850 --> 00:11:01,339
hackaday leadership so we hashed for for

00:10:59,569 --> 00:11:05,480
design ideas we had these different

00:11:01,339 --> 00:11:08,029
designs and we organized a new vote for

00:11:05,480 --> 00:11:11,889
the new vote it was this final

00:11:08,029 --> 00:11:16,099
look that was chosen it was in December

00:11:11,889 --> 00:11:22,069
2014 we went on IndieGoGo

00:11:16,099 --> 00:11:24,979
we raised I think 130k in December then

00:11:22,069 --> 00:11:28,009
because the multipass project started to

00:11:24,979 --> 00:11:29,599
have some success people was starting to

00:11:28,009 --> 00:11:31,909
warm up to the idea of having a

00:11:29,599 --> 00:11:34,729
dedicated device for sewing their logins

00:11:31,909 --> 00:11:37,939
and passwords also many because LastPass

00:11:34,729 --> 00:11:40,639
was compromised or there are always news

00:11:37,939 --> 00:11:43,189
that try to promote all way of storing

00:11:40,639 --> 00:11:44,720
logins and passwords so after the

00:11:43,189 --> 00:11:47,029
multipass standard put in cheapest

00:11:44,720 --> 00:11:48,739
original we chose to continue on a

00:11:47,029 --> 00:11:50,539
smaller version of the multi pass which

00:11:48,739 --> 00:11:52,999
could be easily carried inside your

00:11:50,539 --> 00:11:55,639
pocket something that is easier to carry

00:11:52,999 --> 00:11:58,129
around which is cheaper sturdier the

00:11:55,639 --> 00:11:59,869
first version was also and assembled by

00:11:58,129 --> 00:12:02,029
myself I think I've sold it 20

00:11:59,869 --> 00:12:05,689
prototypes shipped two testers

00:12:02,029 --> 00:12:08,389
contributors we received some feedback

00:12:05,689 --> 00:12:11,509
and finally we went from an aluminum

00:12:08,389 --> 00:12:13,459
case which is the final look and why

00:12:11,509 --> 00:12:15,229
aluminium so we could make sure that it

00:12:13,459 --> 00:12:18,289
would be tamper evident so this is me

00:12:15,229 --> 00:12:21,829
trying to to test the robustness of the

00:12:18,289 --> 00:12:23,659
adhesive that keeps the case together so

00:12:21,829 --> 00:12:27,529
VG's me standing up on the case trying

00:12:23,659 --> 00:12:29,239
to tear it apart I didn't succeed so

00:12:27,529 --> 00:12:31,369
just to make sure that our device is

00:12:29,239 --> 00:12:33,259
robust enough so someone opening the

00:12:31,369 --> 00:12:36,499
device implementing a sniffer whatever

00:12:33,259 --> 00:12:39,049
would be evident of course I've done it

00:12:36,499 --> 00:12:40,429
myself but other people wanted to make

00:12:39,049 --> 00:12:44,209
sure for themself so this is a

00:12:40,429 --> 00:12:46,879
disassembly test my someone friends of

00:12:44,209 --> 00:12:48,829
someone who is in the audience I want to

00:12:46,879 --> 00:12:50,869
make sure that actually his device could

00:12:48,829 --> 00:12:54,589
not be opened without him noticing as

00:12:50,869 --> 00:12:59,749
you can imagine it's quite evident that

00:12:54,589 --> 00:13:04,579
it has been opened then yeah I'm going

00:12:59,749 --> 00:13:06,679
to put a few few slides about organizing

00:13:04,579 --> 00:13:09,470
the mass production so you have a

00:13:06,679 --> 00:13:13,699
hardware how are you going to to produce

00:13:09,470 --> 00:13:16,009
1000 of the n4 4000 of them so I went to

00:13:13,699 --> 00:13:18,150
China just to meet the different guys I

00:13:16,009 --> 00:13:19,380
met on the internet too

00:13:18,150 --> 00:13:21,990
reduce the multipath finding a

00:13:19,380 --> 00:13:24,570
manufacturer can be quite tricky

00:13:21,990 --> 00:13:26,070
this particular manufacturer it's a

00:13:24,570 --> 00:13:28,380
funny story basically I ordered some

00:13:26,070 --> 00:13:30,930
power supply on the internet plugged it

00:13:28,380 --> 00:13:32,610
plugged it into my my power socket and

00:13:30,930 --> 00:13:35,400
the complete fuse of the building blew

00:13:32,610 --> 00:13:37,050
up I contacted the guy and then I

00:13:35,400 --> 00:13:39,120
learned that actually offered

00:13:37,050 --> 00:13:40,560
manufacturing services and this is the

00:13:39,120 --> 00:13:42,090
guy and actually the multipass of

00:13:40,560 --> 00:13:43,890
working well so it was just the

00:13:42,090 --> 00:13:48,930
exception that's one way of getting in

00:13:43,890 --> 00:13:51,330
touch with us numbers the case

00:13:48,930 --> 00:13:53,490
manufacturers or cnc shops so i

00:13:51,330 --> 00:13:55,770
mentioned we have an iminium casing so

00:13:53,490 --> 00:13:59,730
you want to have it manufactures this

00:13:55,770 --> 00:14:03,390
was an even stupider choice I look on

00:13:59,730 --> 00:14:05,550
Alibaba for cnc shops we see several

00:14:03,390 --> 00:14:07,500
quotes and I took the cheaper one like

00:14:05,550 --> 00:14:09,150
we need the cheapest I figured okay it'd

00:14:07,500 --> 00:14:11,610
be at least I will have some prototypes

00:14:09,150 --> 00:14:15,090
and let's see if they are reliable turns

00:14:11,610 --> 00:14:17,730
out it's the he he is extremely reliable

00:14:15,090 --> 00:14:19,470
is one of the guys in China next to

00:14:17,730 --> 00:14:21,080
Shenzhen that basic I can stand the

00:14:19,470 --> 00:14:23,330
design I can trust him to have it done

00:14:21,080 --> 00:14:26,520
communication is always a tricky subject

00:14:23,330 --> 00:14:28,680
I speak a little Chinese but not too

00:14:26,520 --> 00:14:30,360
much so I kind of cheated haha the

00:14:28,680 --> 00:14:35,610
Chinese wife that was doing the

00:14:30,360 --> 00:14:37,380
translation job so communication how are

00:14:35,610 --> 00:14:39,690
you going to teach your manufacturer how

00:14:37,380 --> 00:14:41,490
to assemble the multipass the is a

00:14:39,690 --> 00:14:43,440
security device so this can be quite

00:14:41,490 --> 00:14:45,990
tricky we have tight tolerances for the

00:14:43,440 --> 00:14:48,810
case you're a functional test so it

00:14:45,990 --> 00:14:50,640
turns out for me the most easy way to

00:14:48,810 --> 00:14:52,350
get him to do stuff is to make a youtube

00:14:50,640 --> 00:14:54,630
video as stupid as it sounds

00:14:52,350 --> 00:14:57,090
basically I have a camera on top of me

00:14:54,630 --> 00:14:58,410
filming what I'm doing so for example

00:14:57,090 --> 00:15:00,260
here so functional testing on the

00:14:58,410 --> 00:15:01,710
multipath say okay connect the multipath

00:15:00,260 --> 00:15:03,030
renderscript

00:15:01,710 --> 00:15:04,740
then you will have a label which is

00:15:03,030 --> 00:15:07,740
printed out it means that the device is

00:15:04,740 --> 00:15:09,750
ready to be assembled the good the

00:15:07,740 --> 00:15:12,000
advantage of that is that the assembler

00:15:09,750 --> 00:15:13,620
can look at the video I don't know four

00:15:12,000 --> 00:15:16,170
or five times trying to see what he

00:15:13,620 --> 00:15:21,210
didn't understand and then my wife would

00:15:16,170 --> 00:15:22,590
call him to make sure he understood so

00:15:21,210 --> 00:15:23,790
of course Panetta control is always

00:15:22,590 --> 00:15:27,350
tricky

00:15:23,790 --> 00:15:30,300
so you want to make a prototype run of

00:15:27,350 --> 00:15:31,980
51 of the units and so you can make sure

00:15:30,300 --> 00:15:33,900
that the assembler can do his job

00:15:31,980 --> 00:15:36,450
properly as you can see there is a few

00:15:33,900 --> 00:15:39,450
marks of additives there so this is

00:15:36,450 --> 00:15:41,520
actually not a bigfoot of his basically

00:15:39,450 --> 00:15:45,180
forgot to let the glue dry for 24 hours

00:15:41,520 --> 00:15:47,220
so as the more prototype prints you make

00:15:45,180 --> 00:15:48,870
the more data you will have on what

00:15:47,220 --> 00:15:50,730
mistakes can be done things you never

00:15:48,870 --> 00:15:52,800
thought would be possible because you

00:15:50,730 --> 00:15:56,370
can't see everything going anyway so at

00:15:52,800 --> 00:15:59,040
least make 1020 put a top strand send it

00:15:56,370 --> 00:16:00,990
to distribute to testers send it to

00:15:59,040 --> 00:16:02,700
multipath enthusiasts so you can get

00:16:00,990 --> 00:16:06,120
feedback as much as quickly as possible

00:16:02,700 --> 00:16:08,550
so you can add some features for example

00:16:06,120 --> 00:16:10,080
on the multi pass itself I guess 30 or

00:16:08,550 --> 00:16:12,330
40 percent of the features were

00:16:10,080 --> 00:16:14,760
suggested by the tester themself you're

00:16:12,330 --> 00:16:16,260
I'm a geek I can't think of everything I

00:16:14,760 --> 00:16:18,510
can't think of what is really needed by

00:16:16,260 --> 00:16:20,250
most people so actually a big prototype

00:16:18,510 --> 00:16:25,140
strands send it out there and then I get

00:16:20,250 --> 00:16:27,360
ideas so firmware

00:16:25,140 --> 00:16:29,340
let's start with the tricky part it's a

00:16:27,360 --> 00:16:33,090
security device all the passwords I

00:16:29,340 --> 00:16:34,980
encrypted using AES so even if you are

00:16:33,090 --> 00:16:36,180
creating a security device we don't we

00:16:34,980 --> 00:16:38,430
want to create all the source code

00:16:36,180 --> 00:16:41,780
ourselves but it is one exception which

00:16:38,430 --> 00:16:45,570
is the the encryption would be routines

00:16:41,780 --> 00:16:47,880
so for that we chose to some library

00:16:45,570 --> 00:16:50,130
which is called AVR crypto Lib but we

00:16:47,880 --> 00:16:52,560
checked it we checked it against Nessa

00:16:50,130 --> 00:16:55,470
vector sets so basically we use the code

00:16:52,560 --> 00:16:58,650
implemented a few securities so we don't

00:16:55,470 --> 00:17:01,410
have side channel attacks and we use it

00:16:58,650 --> 00:17:02,790
you checked it against some vector sets

00:17:01,410 --> 00:17:05,370
to make sure that the encryption which

00:17:02,790 --> 00:17:07,530
is lead to the good output so this is

00:17:05,370 --> 00:17:09,660
the only part of the code we did not

00:17:07,530 --> 00:17:12,000
create ourselves but at least we checked

00:17:09,660 --> 00:17:14,280
it as I mentioned we have encrypted

00:17:12,000 --> 00:17:16,140
storage inside the multi pass you have a

00:17:14,280 --> 00:17:19,140
flash that will store your logins

00:17:16,140 --> 00:17:20,340
passwords small files we have two types

00:17:19,140 --> 00:17:22,830
of the attacker in our souls

00:17:20,340 --> 00:17:24,750
encrypted blobs so if you have a quick

00:17:22,830 --> 00:17:27,410
text file you want to store also SSH

00:17:24,750 --> 00:17:31,740
keys also this is possible on our new

00:17:27,410 --> 00:17:34,380
application we have a some sorted linked

00:17:31,740 --> 00:17:36,150
linked list data structure so basically

00:17:34,380 --> 00:17:37,650
when you scroll through your financials

00:17:36,150 --> 00:17:40,049
there are alphabetically so

00:17:37,650 --> 00:17:42,960
which makes sense and the equipment P

00:17:40,049 --> 00:17:45,870
for all your credentials are stored int

00:17:42,960 --> 00:17:47,940
into a dedicated smart card talking

00:17:45,870 --> 00:17:51,270
about smart cards how do you find a

00:17:47,940 --> 00:17:52,919
smart card er a smart card is extremely

00:17:51,270 --> 00:17:55,740
hard to find a smart card and can do

00:17:52,919 --> 00:17:57,780
what you want because manufacturers they

00:17:55,740 --> 00:18:00,900
are not interested in sending one

00:17:57,780 --> 00:18:03,179
hundred thousand or ten thousand smart

00:18:00,900 --> 00:18:07,890
cards to some people they don't know

00:18:03,179 --> 00:18:09,360
especially open-source enthusiasts so it

00:18:07,890 --> 00:18:11,159
took me I think one month or two months

00:18:09,360 --> 00:18:13,080
trying to find a smart car that could

00:18:11,159 --> 00:18:15,330
fit the beer so basically what we need

00:18:13,080 --> 00:18:18,030
is just a read protected memory that

00:18:15,330 --> 00:18:20,580
could store your encryption key so we

00:18:18,030 --> 00:18:22,679
found some smart card on the internet it

00:18:20,580 --> 00:18:24,929
is an atmel one I think it is already

00:18:22,679 --> 00:18:29,130
ten years old something like that but at

00:18:24,929 --> 00:18:32,610
least it will it uses sixteen bits in

00:18:29,130 --> 00:18:34,350
code so from 0 to FFF we chose to offer

00:18:32,610 --> 00:18:38,130
the possibility to enter a tunnel some

00:18:34,350 --> 00:18:40,049
da d pin code so you can go crazy on for

00:18:38,130 --> 00:18:42,539
your for your pin code is permitted

00:18:40,049 --> 00:18:44,880
permanently clocked after four incorrect

00:18:42,539 --> 00:18:47,610
pins so at least if someone gets a hold

00:18:44,880 --> 00:18:50,190
of your multi pass device or smart card

00:18:47,610 --> 00:18:53,190
you can try four times so good luck

00:18:50,190 --> 00:18:55,140
and more importantly is very cheap less

00:18:53,190 --> 00:18:57,480
than a dollar I think less than the 50

00:18:55,140 --> 00:19:01,289
cent now so quite easy to source and to

00:18:57,480 --> 00:19:02,789
offer to different customers random

00:19:01,289 --> 00:19:04,350
number generation so you have an

00:19:02,789 --> 00:19:05,610
encryption key you want this encryption

00:19:04,350 --> 00:19:08,370
key to be completely random

00:19:05,610 --> 00:19:10,260
of course the resources when you store a

00:19:08,370 --> 00:19:12,059
password you want to add some padding to

00:19:10,260 --> 00:19:15,330
make sure that you are not in creating

00:19:12,059 --> 00:19:17,370
the same encryption function does not

00:19:15,330 --> 00:19:20,700
lead to the same result even if we are

00:19:17,370 --> 00:19:22,140
using CTR mode inside the AES routine so

00:19:20,700 --> 00:19:24,000
what we are using for wonder number

00:19:22,140 --> 00:19:26,549
generation also use for password

00:19:24,000 --> 00:19:28,049
generation it is the jitter is based on

00:19:26,549 --> 00:19:30,600
the jitter between the watchdog timer

00:19:28,049 --> 00:19:34,590
which is basically an RC oscillator and

00:19:30,600 --> 00:19:36,809
the crystal so this only generates 8

00:19:34,590 --> 00:19:38,039
bytes per second it's not great it's

00:19:36,809 --> 00:19:40,110
actually perfect for what we need

00:19:38,039 --> 00:19:42,270
because we are just you are going to

00:19:40,110 --> 00:19:42,600
generate a password once every 10

00:19:42,270 --> 00:19:44,760
minutes

00:19:42,600 --> 00:19:48,809
so it's actually quite nice for what we

00:19:44,760 --> 00:19:50,860
need it bites the second USB as I said

00:19:48,809 --> 00:19:52,750
we often ID native

00:19:50,860 --> 00:19:54,730
aggression in the browser itself you go

00:19:52,750 --> 00:19:56,380
to a website the multipath lights up and

00:19:54,730 --> 00:19:59,559
you approve the request this is done

00:19:56,380 --> 00:20:01,270
through a hid proprietary channel which

00:19:59,559 --> 00:20:03,580
is just a fancy way of saying that I'm

00:20:01,270 --> 00:20:05,980
sending 64 bytes every millisecond and

00:20:03,580 --> 00:20:08,410
you also have manual pass what we call

00:20:05,980 --> 00:20:10,960
when you go on the device itself go to I

00:20:08,410 --> 00:20:14,140
don't know the login github.com then you

00:20:10,960 --> 00:20:16,090
press and login and password is their

00:20:14,140 --> 00:20:19,840
weekly press for you so basically the

00:20:16,090 --> 00:20:22,809
multi pass simulates key prices so this

00:20:19,840 --> 00:20:25,990
is dance with the hid keyboard channel

00:20:22,809 --> 00:20:29,020
so it's a composite device so keyboards

00:20:25,990 --> 00:20:31,690
are supported by all computers

00:20:29,020 --> 00:20:32,980
smartphones tablets out there but the

00:20:31,690 --> 00:20:35,740
problem is that I don't know if you know

00:20:32,980 --> 00:20:38,559
if you have a keyboard you press the ABC

00:20:35,740 --> 00:20:41,200
key the keyboard is not saying is not

00:20:38,559 --> 00:20:44,860
sending a to a computer it is saying to

00:20:41,200 --> 00:20:48,070
the to the computer and the user has

00:20:44,860 --> 00:20:50,380
pressed a key whose unique code is 52

00:20:48,070 --> 00:20:54,100
then your computer is going to match

00:20:50,380 --> 00:20:57,130
this number to a or B depending on your

00:20:54,100 --> 00:20:59,290
local so which locale I think is the

00:20:57,130 --> 00:21:01,570
correct word so this means that you need

00:20:59,290 --> 00:21:03,760
to generate a lookup table for every

00:21:01,570 --> 00:21:05,950
keyboard out there these took quite a

00:21:03,760 --> 00:21:07,450
while we have a few Python scripts on

00:21:05,950 --> 00:21:09,850
our repository and one of them is

00:21:07,450 --> 00:21:12,460
actually to do a brute force on all the

00:21:09,850 --> 00:21:15,490
key codes to see which key code maps to

00:21:12,460 --> 00:21:20,559
which ASCII character this was a painful

00:21:15,490 --> 00:21:23,380
process but it worked at least graphics

00:21:20,559 --> 00:21:26,380
library we didn't use any library out

00:21:23,380 --> 00:21:29,350
there because we wanted some very quick

00:21:26,380 --> 00:21:31,330
refresh time on the display itself for

00:21:29,350 --> 00:21:33,400
the multi pass original we use run

00:21:31,330 --> 00:21:35,799
length encoding compressions to make

00:21:33,400 --> 00:21:38,679
sure that the memory dedicated to the

00:21:35,799 --> 00:21:41,440
graphics is as small and used in an

00:21:38,679 --> 00:21:45,210
optimal manner we have many different

00:21:41,440 --> 00:21:47,799
scripts to convert bitmaps fonts into

00:21:45,210 --> 00:21:50,190
binary blobs that are stored inside the

00:21:47,799 --> 00:21:53,140
external flash of the multi pass and

00:21:50,190 --> 00:21:56,559
this particular flash and your former

00:21:53,140 --> 00:21:59,140
can be updated securely so this means we

00:21:56,559 --> 00:22:01,300
had to this is the part I created

00:21:59,140 --> 00:22:02,050
actually we have a bootloader that

00:22:01,300 --> 00:22:03,850
allows

00:22:02,050 --> 00:22:07,990
signed formal dates

00:22:03,850 --> 00:22:11,350
we are using AES to do some to generate

00:22:07,990 --> 00:22:13,720
the hashes so for every multi pass

00:22:11,350 --> 00:22:16,180
device out there there is a there are

00:22:13,720 --> 00:22:19,000
several unique an immense joy inside

00:22:16,180 --> 00:22:21,340
their memory we have a unique IES key

00:22:19,000 --> 00:22:23,770
which is used to sign the firmware

00:22:21,340 --> 00:22:25,200
updates there is a unique IES key for

00:22:23,770 --> 00:22:27,250
harsh innovations so basically you

00:22:25,200 --> 00:22:29,260
connect your Muji pass you insert your

00:22:27,250 --> 00:22:30,790
card is going to display a hash so if

00:22:29,260 --> 00:22:32,290
the hash is the same as you have seen

00:22:30,790 --> 00:22:35,500
before you know that your device has not

00:22:32,290 --> 00:22:38,800
been compromised we also have some read

00:22:35,500 --> 00:22:40,810
product we protected Universal indentify

00:22:38,800 --> 00:22:43,600
this is used to make sure that your

00:22:40,810 --> 00:22:45,100
device has not been tampered with during

00:22:43,600 --> 00:22:47,050
shipping so if you want more details

00:22:45,100 --> 00:22:50,860
about that I can answer during the Q&A

00:22:47,050 --> 00:22:53,110
so unique signing keys for every multi

00:22:50,860 --> 00:22:56,110
pass out there means genuine generating

00:22:53,110 --> 00:22:58,990
a unique firmware to be flashed into the

00:22:56,110 --> 00:23:00,850
device for the mass production so you

00:22:58,990 --> 00:23:02,950
never trust your assembler so what we

00:23:00,850 --> 00:23:05,440
have what we have done is create created

00:23:02,950 --> 00:23:07,450
our own mass programming week it looks a

00:23:05,440 --> 00:23:09,670
bit crude but it works perfectly so will

00:23:07,450 --> 00:23:12,010
you have nine different sockets on which

00:23:09,670 --> 00:23:14,650
you put your microcontroller we have

00:23:12,010 --> 00:23:17,410
also a complete set of scripts that we

00:23:14,650 --> 00:23:19,990
generate a unique X file to be flashed

00:23:17,410 --> 00:23:21,760
on the microcontroller and program a

00:23:19,990 --> 00:23:23,650
unique serial number so all the

00:23:21,760 --> 00:23:25,780
programming of the microcontrollers is

00:23:23,650 --> 00:23:28,180
done by ourselves we didn't want to

00:23:25,780 --> 00:23:29,500
trust the August humbler even if you

00:23:28,180 --> 00:23:32,080
have been working with in for a couple

00:23:29,500 --> 00:23:35,050
of years so we want to make sure that

00:23:32,080 --> 00:23:37,690
the critical parts are programmed by us

00:23:35,050 --> 00:23:42,670
so this is why we this cute programming

00:23:37,690 --> 00:23:45,160
rig was was made now to the to the multi

00:23:42,670 --> 00:23:48,460
path software so I've started very low

00:23:45,160 --> 00:23:50,200
I'm going to talk about what is running

00:23:48,460 --> 00:23:56,070
on the computer for example to implement

00:23:50,200 --> 00:24:00,340
a native browser integration so first we

00:23:56,070 --> 00:24:01,810
developed Chrome App and extension why

00:24:00,340 --> 00:24:04,450
we chose to go this Way's that is

00:24:01,810 --> 00:24:06,370
already cross-platform compatible the

00:24:04,450 --> 00:24:09,490
installation process is really as simple

00:24:06,370 --> 00:24:11,740
as two clicks so you if you use from if

00:24:09,490 --> 00:24:13,600
we also support Firefox I will talk

00:24:11,740 --> 00:24:15,760
about that later if you use Chrome you

00:24:13,600 --> 00:24:16,029
basically go to our web web page click

00:24:15,760 --> 00:24:17,739
on

00:24:16,029 --> 00:24:19,899
- links it will install an extension

00:24:17,739 --> 00:24:21,789
that is used to detect whenever you need

00:24:19,899 --> 00:24:24,129
to log in so basically on the webpage

00:24:21,789 --> 00:24:26,229
you visit and if you'll also install an

00:24:24,129 --> 00:24:28,210
application the application is may is

00:24:26,229 --> 00:24:30,609
here to make the interface between the

00:24:28,210 --> 00:24:33,429
extension and the multipass hardware so

00:24:30,609 --> 00:24:35,559
every time the extension the text login

00:24:33,429 --> 00:24:38,289
form it will ask the app to create a

00:24:35,559 --> 00:24:42,249
multipass for the login for this given

00:24:38,289 --> 00:24:44,019
website so why through apps the natively

00:24:42,249 --> 00:24:46,029
support will be hid

00:24:44,019 --> 00:24:48,909
so you don't need to install a program

00:24:46,029 --> 00:24:51,159
you don't need to add support drivers is

00:24:48,909 --> 00:24:54,129
as simple as connect the multi pass

00:24:51,159 --> 00:24:56,229
click twice and it works of course for

00:24:54,129 --> 00:24:57,849
linux users you mean either you Dev rule

00:24:56,229 --> 00:24:59,429
but there is nothing we can do about

00:24:57,849 --> 00:25:01,509
that

00:24:59,429 --> 00:25:04,479
so this is the management interface

00:25:01,509 --> 00:25:06,609
multi pass multi pass app as I mentioned

00:25:04,479 --> 00:25:09,909
you want to see when your multiple your

00:25:06,609 --> 00:25:11,619
your credentials where last used what

00:25:09,909 --> 00:25:13,479
you have now what you want to what is

00:25:11,619 --> 00:25:14,349
the password thought is given website if

00:25:13,479 --> 00:25:16,359
you want to change it

00:25:14,349 --> 00:25:19,659
so this is some nice management

00:25:16,359 --> 00:25:22,599
interface interestingly enough this is

00:25:19,659 --> 00:25:24,479
the only bit of the multipath ecosystem

00:25:22,599 --> 00:25:26,440
that was not made by your contributor

00:25:24,479 --> 00:25:28,929
apparently it's very hard to find

00:25:26,440 --> 00:25:32,320
JavaScript developers that want to do

00:25:28,929 --> 00:25:33,580
that for free anyway so if you're

00:25:32,320 --> 00:25:37,529
jealous with developer and want to work

00:25:33,580 --> 00:25:40,210
on it contact me but yes we found civil

00:25:37,529 --> 00:25:42,759
through freelancers working with

00:25:40,210 --> 00:25:45,249
finances is always interesting you

00:25:42,759 --> 00:25:47,129
should never know what motivates him so

00:25:45,249 --> 00:25:49,659
it's a bit is harder to to manage

00:25:47,129 --> 00:25:51,070
financier than the contributor but

00:25:49,659 --> 00:25:53,879
anyway at the end we have a nice

00:25:51,070 --> 00:25:56,859
application that is working like we want

00:25:53,879 --> 00:25:58,529
we also have a Python tool so in case

00:25:56,859 --> 00:26:01,269
you're not into Chrome apps or

00:25:58,529 --> 00:26:02,559
extensions you can recall your logins

00:26:01,269 --> 00:26:05,739
and passwords directly using a

00:26:02,559 --> 00:26:08,999
command-line tool based on Python you

00:26:05,739 --> 00:26:11,649
can also use small file storage we call

00:26:08,999 --> 00:26:13,330
do a crystal on the device itself what

00:26:11,649 --> 00:26:15,580
is nice is that it can interface with

00:26:13,330 --> 00:26:19,119
multiple application one application can

00:26:15,580 --> 00:26:21,009
call this utility to we call your login

00:26:19,119 --> 00:26:22,809
and password so quite convenient if you

00:26:21,009 --> 00:26:24,249
are developing your own app and want to

00:26:22,809 --> 00:26:25,550
create your credentials on the multipass

00:26:24,249 --> 00:26:30,500
itself

00:26:25,550 --> 00:26:32,780
and also we are currently working on a

00:26:30,500 --> 00:26:36,550
cross-platform tool so the main reason

00:26:32,780 --> 00:26:39,679
for that is that chrome announced in

00:26:36,550 --> 00:26:41,470
2018 that it is going to grow to drop

00:26:39,679 --> 00:26:46,670
the chrome apps so we are currently

00:26:41,470 --> 00:26:49,040
actively working on C++ and Qt troll

00:26:46,670 --> 00:26:53,150
which is named multi cute his Creator is

00:26:49,040 --> 00:26:56,330
here first time I meet him by the way so

00:26:53,150 --> 00:26:58,820
basically it's here to do the job of the

00:26:56,330 --> 00:27:02,330
Chrome App interface between the multi

00:26:58,820 --> 00:27:03,890
pass Hardware Chrome Safari Firefox for

00:27:02,330 --> 00:27:07,550
example I'm using it with Firefox right

00:27:03,890 --> 00:27:11,450
now we also also created using go and

00:27:07,550 --> 00:27:14,000
SSH agent so every time you need to log

00:27:11,450 --> 00:27:16,400
into a server using your SSH key you

00:27:14,000 --> 00:27:18,530
basically have this SSH SSH agent

00:27:16,400 --> 00:27:21,830
running that will create your SSH key

00:27:18,530 --> 00:27:25,309
from the multipass and as the Chrome App

00:27:21,830 --> 00:27:27,260
we have a management interface that we

00:27:25,309 --> 00:27:29,840
also working on to provide smart

00:27:27,260 --> 00:27:32,600
database synchronizations across your

00:27:29,840 --> 00:27:35,380
multi pass units and also a command line

00:27:32,600 --> 00:27:40,280
interface because we are geeks after all

00:27:35,380 --> 00:27:42,920
and so what's next as I mentioned we

00:27:40,280 --> 00:27:45,740
only started working I think six months

00:27:42,920 --> 00:27:47,620
ago and this new tool if your C++ QT

00:27:45,740 --> 00:27:50,000
developer and want to work on something

00:27:47,620 --> 00:27:52,010
security related contact me I've

00:27:50,000 --> 00:27:54,110
actually seven units right now to give

00:27:52,010 --> 00:27:57,970
up for free if you want to have fun at

00:27:54,110 --> 00:28:00,850
our ecosystem the file storage

00:27:57,970 --> 00:28:04,010
functionality is not yet present its

00:28:00,850 --> 00:28:05,800
present command line based on multi cute

00:28:04,010 --> 00:28:08,600
but we would like to have a nice

00:28:05,800 --> 00:28:11,510
graphical user interface to store your

00:28:08,600 --> 00:28:14,210
files and we call them and we also want

00:28:11,510 --> 00:28:16,250
to create two factor only firmware for

00:28:14,210 --> 00:28:18,410
the multi pass so as I mention multi

00:28:16,250 --> 00:28:21,080
pass is only made to store your logins

00:28:18,410 --> 00:28:23,330
and passwords but we will not implement

00:28:21,080 --> 00:28:26,179
second factor attic authentication on

00:28:23,330 --> 00:28:28,010
the mainframe at the main reason is that

00:28:26,179 --> 00:28:29,960
you would have one device for logins

00:28:28,010 --> 00:28:32,150
passwords and two-factor authentication

00:28:29,960 --> 00:28:33,559
related functionalities which doesn't

00:28:32,150 --> 00:28:35,660
really make sense but so we are

00:28:33,559 --> 00:28:37,640
currently working we would like to work

00:28:35,660 --> 00:28:40,360
on a second factor authentication

00:28:37,640 --> 00:28:40,360
firmware

00:28:40,389 --> 00:28:46,149
and if you have questions please go on

00:28:42,710 --> 00:28:46,149
I will ice up in a bit fast

00:28:46,960 --> 00:28:58,339
[Applause]

00:29:05,360 --> 00:29:15,350
so just a question on the AAS keys are

00:29:12,080 --> 00:29:18,110
you as if I buy a device am I entitled

00:29:15,350 --> 00:29:20,120
to flash my it's closer to the

00:29:18,110 --> 00:29:23,960
microphone online sorry I'm allowed to

00:29:20,120 --> 00:29:27,920
update my own is keys on the device if

00:29:23,960 --> 00:29:31,880
you buy one how do you manage the PAS

00:29:27,920 --> 00:29:34,340
security chain for getting new updates

00:29:31,880 --> 00:29:36,650
for firmware on my device okay so you're

00:29:34,340 --> 00:29:39,110
asking how the how the firmware is a

00:29:36,650 --> 00:29:42,410
daisy using data using the boot order

00:29:39,110 --> 00:29:44,120
are you asking about oh right so I can

00:29:42,410 --> 00:29:46,610
go into details about that so to update

00:29:44,120 --> 00:29:48,080
the firmware is quite simple on our

00:29:46,610 --> 00:29:50,630
application it's as simple as selecting

00:29:48,080 --> 00:29:53,390
a file that will be temporarily stored

00:29:50,630 --> 00:29:56,050
into our external flash then the device

00:29:53,390 --> 00:29:59,120
will reboot it will look at the flash

00:29:56,050 --> 00:30:01,580
computer hash a given hash on this

00:29:59,120 --> 00:30:03,380
complete file if the hash is correct and

00:30:01,580 --> 00:30:06,560
it is going to update the firmware self

00:30:03,380 --> 00:30:08,660
so it is in a to pass process first the

00:30:06,560 --> 00:30:11,270
first pass is going to check the the

00:30:08,660 --> 00:30:13,430
checksum then it is going to do a second

00:30:11,270 --> 00:30:16,220
pass basically is going to see each

00:30:13,430 --> 00:30:17,930
block flash it to the firmware but still

00:30:16,220 --> 00:30:19,610
set a given boolean that will prevent

00:30:17,930 --> 00:30:22,460
the device from booting so we are

00:30:19,610 --> 00:30:24,950
deliberately breaking the device until

00:30:22,460 --> 00:30:29,050
it is completely flashed and the check

00:30:24,950 --> 00:30:32,440
has been the hash has been checked again

00:30:29,050 --> 00:30:32,440
thank you very much

00:30:34,279 --> 00:30:39,590
hi thanks for a great talk I was

00:30:37,549 --> 00:30:41,330
wondering what have you done to stop the

00:30:39,590 --> 00:30:43,909
hardware manufacturers putting backdoors

00:30:41,330 --> 00:30:45,499
into your devices so you've got all

00:30:43,909 --> 00:30:47,419
these random people involved in your

00:30:45,499 --> 00:30:50,119
manufacturing chain how how can you make

00:30:47,419 --> 00:30:51,499
sure that the device is it's secure if

00:30:50,119 --> 00:30:55,119
I'm gonna store all my passwords on this

00:30:51,499 --> 00:30:58,129
it has to be absolutely right secure so

00:30:55,119 --> 00:31:01,309
the security of our device relies on its

00:30:58,129 --> 00:31:02,749
physical integrity right so we know for

00:31:01,309 --> 00:31:04,460
sure because of the firm right we have

00:31:02,749 --> 00:31:06,200
flashed that the firm has not been

00:31:04,460 --> 00:31:09,109
tampered with this is a guarantee we

00:31:06,200 --> 00:31:10,759
provide so the only way the only attack

00:31:09,109 --> 00:31:12,440
where that could be done during the

00:31:10,759 --> 00:31:14,929
manufacturing process is to implement a

00:31:12,440 --> 00:31:18,049
sniffer in the Indo hardware itself but

00:31:14,929 --> 00:31:19,759
this basically because most of the units

00:31:18,049 --> 00:31:21,409
we go through Switzerland where I live

00:31:19,759 --> 00:31:22,669
and I will just add some more some of

00:31:21,409 --> 00:31:26,450
them so actually this could be easily

00:31:22,669 --> 00:31:28,969
detected and even if there was a sniffer

00:31:26,450 --> 00:31:31,339
the case is made of an anemic aluminium

00:31:28,969 --> 00:31:33,200
so it might be a bit tricky too it's not

00:31:31,339 --> 00:31:35,119
a perfect Faraday cage of course but at

00:31:33,200 --> 00:31:36,889
least is something and the tolerances

00:31:35,119 --> 00:31:39,559
are quite tight so the sniffer you would

00:31:36,889 --> 00:31:42,039
have to put there would be happy would

00:31:39,559 --> 00:31:42,039
be quite small

00:31:45,650 --> 00:31:49,700
great work can you tell us a bit about

00:31:47,630 --> 00:31:51,590
certification and notice various marks

00:31:49,700 --> 00:31:55,940
from the back indicating that has passed

00:31:51,590 --> 00:31:57,830
some certification like C sorry can you

00:31:55,940 --> 00:31:59,630
tell us a bit about the certification of

00:31:57,830 --> 00:32:03,640
the device I noticed there was a CE mark

00:31:59,630 --> 00:32:06,080
and so on getting C FCC certification

00:32:03,640 --> 00:32:07,520
contrary to most Kickstarter campaigns

00:32:06,080 --> 00:32:10,930
out there we have done it before the

00:32:07,520 --> 00:32:13,940
Kickstarter once we were sure that the

00:32:10,930 --> 00:32:15,950
the hardware was final I know a couple

00:32:13,940 --> 00:32:18,200
of certification centers in Shenzhen

00:32:15,950 --> 00:32:20,270
directly you think that Chinese

00:32:18,200 --> 00:32:22,100
certification centers are not reliable

00:32:20,270 --> 00:32:24,430
and actually they're not joking at all

00:32:22,100 --> 00:32:26,990
so basically you send all your your

00:32:24,430 --> 00:32:29,560
schematics lay out a quick description

00:32:26,990 --> 00:32:30,890
of the project a quick getting started

00:32:29,560 --> 00:32:34,040
guide

00:32:30,890 --> 00:32:37,970
so the manufacturing the certification

00:32:34,040 --> 00:32:39,770
center can try make sure that the device

00:32:37,970 --> 00:32:43,310
is working and it will characterize the

00:32:39,770 --> 00:32:44,870
RF emissions interestingly enough they

00:32:43,310 --> 00:32:46,670
need to take pictures of the device and

00:32:44,870 --> 00:32:48,650
they need to take pictures of inside the

00:32:46,670 --> 00:32:50,990
device so this means that they had to

00:32:48,650 --> 00:32:52,340
tear open the case I didn't include the

00:32:50,990 --> 00:32:53,930
picture in the presentation that they

00:32:52,340 --> 00:32:54,620
also try to open the case and it was not

00:32:53,930 --> 00:33:02,030
ready at all

00:32:54,620 --> 00:33:05,450
yeah have you considered making a

00:33:02,030 --> 00:33:08,300
Bluetooth version in what are security

00:33:05,450 --> 00:33:10,570
implications of that yeah so this is a

00:33:08,300 --> 00:33:13,910
bit of a tricky subject so we want this

00:33:10,570 --> 00:33:14,510
device to is a hardware device to store

00:33:13,910 --> 00:33:16,900
passwords

00:33:14,510 --> 00:33:18,950
the problem with Bluetooth and any

00:33:16,900 --> 00:33:22,070
protocol is that you will need to move

00:33:18,950 --> 00:33:23,450
in certain litem ion battery and then

00:33:22,070 --> 00:33:25,280
you will have to add the transceivers

00:33:23,450 --> 00:33:29,000
you have additional certifications you

00:33:25,280 --> 00:33:31,220
need to fast shipping products with

00:33:29,000 --> 00:33:34,040
lithium batteries it's not easy it's a

00:33:31,220 --> 00:33:36,410
bit of a pain so we preferred designing

00:33:34,040 --> 00:33:39,590
a device which is as simple as possible

00:33:36,410 --> 00:33:42,020
to reduce the cost and but we are

00:33:39,590 --> 00:33:44,410
actually thinking of making a graded

00:33:42,020 --> 00:33:47,600
version of the multipath with different

00:33:44,410 --> 00:33:49,880
protocols but then Bluetooth security

00:33:47,600 --> 00:33:51,170
and all that and we start to have you

00:33:49,880 --> 00:33:53,720
would like to implement some secure

00:33:51,170 --> 00:33:55,490
layer on top of Bluetooth depending on

00:33:53,720 --> 00:33:57,110
if you trust that first action so it's a

00:33:55,490 --> 00:33:58,870
bit of a tricky subject at least with

00:33:57,110 --> 00:34:02,590
USB you make sure that

00:33:58,870 --> 00:34:07,840
in the wire and using the air yes

00:34:02,590 --> 00:34:10,330
depends on people hello

00:34:07,840 --> 00:34:12,610
yes thank you that's a very interesting

00:34:10,330 --> 00:34:15,820
product I really like the idea question

00:34:12,610 --> 00:34:18,820
is what steps have you taken to protect

00:34:15,820 --> 00:34:27,820
it from attacks by the host attack by

00:34:18,820 --> 00:34:30,790
what the host so the device itself has a

00:34:27,820 --> 00:34:34,629
universal identifier this indeed

00:34:30,790 --> 00:34:36,730
identifier can only be requested by

00:34:34,629 --> 00:34:39,610
entering a password on our app so

00:34:36,730 --> 00:34:41,020
basically say okay give me the unique

00:34:39,610 --> 00:34:43,629
and need to fire at each is the password

00:34:41,020 --> 00:34:45,580
so you can make sure that the indeed to

00:34:43,629 --> 00:34:46,810
fire is a correct one because what I

00:34:45,580 --> 00:34:48,580
didn't mention I should have mentioned

00:34:46,810 --> 00:34:50,560
is that any tampering with a firmware

00:34:48,580 --> 00:34:52,690
will lead to a completely erased device

00:34:50,560 --> 00:34:55,510
this isn't protection mechanism but the

00:34:52,690 --> 00:34:57,670
microcontroller itself so if someone was

00:34:55,510 --> 00:35:00,010
to tamper with the firmware all your

00:34:57,670 --> 00:35:01,720
identifiers would be erased so this is

00:35:00,010 --> 00:35:04,660
often I was the reason why we need to

00:35:01,720 --> 00:35:06,670
know who purchased what so when you

00:35:04,660 --> 00:35:08,500
receive your device you contact me

00:35:06,670 --> 00:35:11,710
directly I can make sure I can identify

00:35:08,500 --> 00:35:14,140
you using I guess your your postal

00:35:11,710 --> 00:35:16,120
address or some some elements that could

00:35:14,140 --> 00:35:17,830
not be be traced so I can make sure that

00:35:16,120 --> 00:35:19,900
I'm sending you the correct password

00:35:17,830 --> 00:35:21,610
then you can tell me okay this is the

00:35:19,900 --> 00:35:23,350
indy to fire that i have is it the

00:35:21,610 --> 00:35:24,730
correct one so i can tell you yes so you

00:35:23,350 --> 00:35:27,640
can make sure the firmware itself has

00:35:24,730 --> 00:35:31,000
not been tampered with yes but what

00:35:27,640 --> 00:35:33,370
about seems like buffer overflows power

00:35:31,000 --> 00:35:34,300
attacks things like that this is the

00:35:33,370 --> 00:35:35,860
perfect thing actually

00:35:34,300 --> 00:35:37,270
so buffer overflows so i didn't mention

00:35:35,860 --> 00:35:39,520
the name of the microcontroller the

00:35:37,270 --> 00:35:43,030
microcontroller we are using is a simple

00:35:39,520 --> 00:35:45,820
8 bit 16 megahertz microcontroller from

00:35:43,030 --> 00:35:48,400
Atmel and it has an harvard architecture

00:35:45,820 --> 00:35:54,780
so buffer overflows and all that are not

00:35:48,400 --> 00:35:54,780
going to lead to executed code thank you

00:35:55,780 --> 00:36:00,760
thanks for a great day you said like

00:35:58,480 --> 00:36:03,580
you're having a smart car please

00:36:00,760 --> 00:36:05,830
record accurate memory so then you're

00:36:03,580 --> 00:36:08,560
use encryption and decryption on the

00:36:05,830 --> 00:36:14,530
smart card or are you extracting the key

00:36:08,560 --> 00:36:16,600
when correct penises present extracting

00:36:14,530 --> 00:36:21,670
the encryption key once the card is

00:36:16,600 --> 00:36:24,790
unlocked so if you're saying that

00:36:21,670 --> 00:36:26,560
someone that could decap recap the the

00:36:24,790 --> 00:36:28,630
smart card and with the microscope look

00:36:26,560 --> 00:36:31,300
at the bits yes you would be able to get

00:36:28,630 --> 00:36:33,430
your encryption key but not if one

00:36:31,300 --> 00:36:37,410
hasn't know how much money to to decap

00:36:33,430 --> 00:36:39,880
smart cards make sense thank you

00:36:37,410 --> 00:36:42,930
what kind of yield do you get in

00:36:39,880 --> 00:36:46,150
manufacturing and have you had any

00:36:42,930 --> 00:36:49,060
defects or chips replaced without your

00:36:46,150 --> 00:36:51,010
knowledge so this is why I mentioned

00:36:49,060 --> 00:36:53,020
that you need to have as many prototypes

00:36:51,010 --> 00:36:55,600
run as possible to make sure that all

00:36:53,020 --> 00:36:59,800
the potential mistakes from the mass

00:36:55,600 --> 00:37:01,450
production run can be anticipated so for

00:36:59,800 --> 00:37:04,450
example we are the mass production one

00:37:01,450 --> 00:37:07,240
of the multipass minis ongoing but we

00:37:04,450 --> 00:37:09,360
think right now if you just take the

00:37:07,240 --> 00:37:14,260
mistakes from the assembler we are at

00:37:09,360 --> 00:37:17,440
94% but there is an additional 15%

00:37:14,260 --> 00:37:19,420
because of small error that means you

00:37:17,440 --> 00:37:21,520
have seen the programming rig so I'm

00:37:19,420 --> 00:37:23,110
making some checks to make sure that the

00:37:21,520 --> 00:37:24,850
firmware is correctly flashed but

00:37:23,110 --> 00:37:27,070
apparently there are some silent errors

00:37:24,850 --> 00:37:30,400
we are using AVR dude to program the

00:37:27,070 --> 00:37:32,710
micro microcontrollers so on 10 units of

00:37:30,400 --> 00:37:35,890
the one of the unit's we receive I think

00:37:32,710 --> 00:37:37,870
a bit mode for up units the the EEPROM

00:37:35,890 --> 00:37:39,700
was not programmed so it's quite

00:37:37,870 --> 00:37:41,980
interesting quite interesting because

00:37:39,700 --> 00:37:44,200
during the functional test the assembly

00:37:41,980 --> 00:37:45,970
is going to do all the tests the the

00:37:44,200 --> 00:37:47,800
screen lights up the label is printed

00:37:45,970 --> 00:37:49,600
everything is alright but when you when

00:37:47,800 --> 00:37:51,040
we receive the device we connected the

00:37:49,600 --> 00:37:53,680
device and nothing was lighting up

00:37:51,040 --> 00:37:55,150
nothing was happening you know I spent I

00:37:53,680 --> 00:37:56,890
think three days trying to see what was

00:37:55,150 --> 00:37:59,290
the problem and it was an a problem so

00:37:56,890 --> 00:38:01,060
they will be still unknowns that will

00:37:59,290 --> 00:38:02,680
happen so unfortunately this happened

00:38:01,060 --> 00:38:04,720
because it will change the process from

00:38:02,680 --> 00:38:08,110
programming the microcontrollers but

00:38:04,720 --> 00:38:09,170
from once you have made another 2 or 3

00:38:08,110 --> 00:38:11,059
prototype rounds

00:38:09,170 --> 00:38:14,240
it will be alright because your quality

00:38:11,059 --> 00:38:17,510
control document will be as low thorough

00:38:14,240 --> 00:38:19,910
thorough as possible and it should be

00:38:17,510 --> 00:38:21,710
all right yeah we had any components

00:38:19,910 --> 00:38:25,339
replaced without you knowledge like for

00:38:21,710 --> 00:38:26,990
cheaper components so you are asking if

00:38:25,339 --> 00:38:29,710
it's possible to find cheaper components

00:38:26,990 --> 00:38:32,180
if you manufacture replace components

00:38:29,710 --> 00:38:33,740
during the manufacturing process for

00:38:32,180 --> 00:38:36,349
once the data and cheaper for example

00:38:33,740 --> 00:38:39,020
it's it's possible for the assembler to

00:38:36,349 --> 00:38:42,200
replace some 40 components for example

00:38:39,020 --> 00:38:44,839
in the 10-12 percents 12 units I

00:38:42,200 --> 00:38:46,640
mentioned this reprogramming will

00:38:44,839 --> 00:38:47,900
consist in removing two components

00:38:46,640 --> 00:38:50,450
putting on a mass programming link

00:38:47,900 --> 00:38:52,099
custom-made to some additional rig we

00:38:50,450 --> 00:38:54,260
need to make but at least we don't need

00:38:52,099 --> 00:38:56,089
to disorder and we saw everything the

00:38:54,260 --> 00:38:58,160
manufacturer can do that on prototype

00:38:56,089 --> 00:39:00,230
friends it will not be a problem if you

00:38:58,160 --> 00:39:02,059
see a mistake in the layout something in

00:39:00,230 --> 00:39:03,740
the last minute he will be able to do

00:39:02,059 --> 00:39:04,730
that you be not be super happy but you

00:39:03,740 --> 00:39:06,319
can do it

00:39:04,730 --> 00:39:08,390
mass production forget about it's just

00:39:06,319 --> 00:39:10,640
not possible you will not do that on say

00:39:08,390 --> 00:39:12,410
1,000 components especially because the

00:39:10,640 --> 00:39:18,559
manufacturing manufacturing process is

00:39:12,410 --> 00:39:21,410
completely different thank you hi did

00:39:18,559 --> 00:39:26,359
you run any security audit from an

00:39:21,410 --> 00:39:28,869
independent security expert so asking if

00:39:26,359 --> 00:39:32,690
it was our code source was checked by

00:39:28,869 --> 00:39:36,950
external parties yes it has been checked

00:39:32,690 --> 00:39:39,680
by 3 or 4 different organisms all the

00:39:36,950 --> 00:39:41,210
times static analysis so we have the

00:39:39,680 --> 00:39:44,480
reports online if you're interested to

00:39:41,210 --> 00:39:47,329
see what the output is we passed all

00:39:44,480 --> 00:39:49,130
three checks you might have seen that

00:39:47,329 --> 00:39:51,020
some people working in some national

00:39:49,130 --> 00:39:53,299
agencies are working using the multi

00:39:51,020 --> 00:39:55,579
pass they they were the first one to

00:39:53,299 --> 00:39:58,280
make sure that the code was not we

00:39:55,579 --> 00:40:01,220
didn't hide any easter easter instead

00:39:58,280 --> 00:40:03,829
bags but anyway but I think they

00:40:01,220 --> 00:40:06,710
appreciate quite well is that no one is

00:40:03,829 --> 00:40:09,200
paid we do this for fun we don't have

00:40:06,710 --> 00:40:11,720
any ulterior motive we just do this to

00:40:09,200 --> 00:40:13,609
try to promote a nice way to store all

00:40:11,720 --> 00:40:16,369
login and password we are we don't have

00:40:13,609 --> 00:40:18,319
the best way but it's not the perfect

00:40:16,369 --> 00:40:19,730
way of storing logins and passwords but

00:40:18,319 --> 00:40:21,180
is still better than software based

00:40:19,730 --> 00:40:23,220
password keepers we will have your

00:40:21,180 --> 00:40:26,940
main password and your database inside

00:40:23,220 --> 00:40:34,260
your computer memory and at the hardware

00:40:26,940 --> 00:40:36,960
level did someone there is a risk talk

00:40:34,260 --> 00:40:38,160
the open source processor talk I think

00:40:36,960 --> 00:40:40,349
in two hours that would be quite

00:40:38,160 --> 00:40:41,930
interested firstly we are forced to

00:40:40,349 --> 00:40:47,579
trust the microcontroller Mac

00:40:41,930 --> 00:40:51,329
manufacturer we accept the risk risk 5

00:40:47,579 --> 00:40:53,609
with the processor thirdly you have to

00:40:51,329 --> 00:40:54,079
trust the silicon this is there's no way

00:40:53,609 --> 00:41:01,770
around that

00:40:54,079 --> 00:41:04,530
ok thank you how do you under backup

00:41:01,770 --> 00:41:06,000
memory stores ok yes should have

00:41:04,530 --> 00:41:07,920
mentioned it as well so it is possible

00:41:06,000 --> 00:41:09,690
the smart card that stores your

00:41:07,920 --> 00:41:12,839
encryption key can be cloned under these

00:41:09,690 --> 00:41:14,460
device itself so you have your device

00:41:12,839 --> 00:41:16,260
you're going to the settings menu say ok

00:41:14,460 --> 00:41:17,910
I want to clone my smart card and set

00:41:16,260 --> 00:41:19,440
your smart card we move it put a blank

00:41:17,910 --> 00:41:21,780
one it would be clone so this is a way

00:41:19,440 --> 00:41:23,670
to making clones of your smart card the

00:41:21,780 --> 00:41:25,380
database itself can be exported to the

00:41:23,670 --> 00:41:27,960
computer anyway the database is

00:41:25,380 --> 00:41:29,819
encrypted so we don't care if it gets

00:41:27,960 --> 00:41:31,890
exported anywhere you can do what you

00:41:29,819 --> 00:41:34,619
can try to encrypt it if we not work so

00:41:31,890 --> 00:41:36,390
you if you use your card luckily we have

00:41:34,619 --> 00:41:39,780
made you will have made a clone before

00:41:36,390 --> 00:41:41,369
and if you lose your device either you

00:41:39,780 --> 00:41:43,559
make a new one from the different files

00:41:41,369 --> 00:41:45,450
we haven't github or you purchase a new

00:41:43,559 --> 00:41:50,809
one from us and you restore your

00:41:45,450 --> 00:41:50,809
database thank you all right

00:41:52,590 --> 00:41:55,860
seems to be good

00:41:58,250 --> 00:42:06,170
I think thank you very much

00:41:59,930 --> 00:42:06,170

YouTube URL: https://www.youtube.com/watch?v=99yHTyA95Ow


