Title: Reproducible HPC Software Installation on Cray Systems with EasyBuild
Publication date: 2018-03-06
Playlist: FOSDEM 2017
Description: 
	by Guilherme Peretti-Pezzi

At: FOSDEM 2017

EasyBuild is a framework for building and installing (scientific) software onHPC clusters, implemented in Python and available under the GPLv2 FOSSlicense. It has served HPC support teams well on standard Linux/x86 systemssince 2012.

More recently, interest has grown to also employ EasyBuild on Cray systems,where the Cray Programming Environment (PE) not only provides common tools(compilers, ...) and libraries (MPI, BLAS/LAPACK, FFTW, ...), but also tunedinstallations of 3rd party libraries like HDF5, netCDF and PETSc. The Cray PEconsists of an extensive stack of environment modules, providing a familiaryet complex working environment of users.

To leverage the Cray PE a couple of enhancements had to be made to EasyBuild,including support for using 'external' modules, and defining Cray-specificcompiler toolchains. In addition, the way in which EasyBuild deals withenvironment modules had to be carefully revisited, since standard operationslike 'module purge' are not supported by the Cray PE.

This work has led to the use of EasyBuild in production on the largest Craysupercomputer in Europe, the Piz Daint system at the Swiss NationalSupercomputing Centre.

In this talk, we will outline how Cray systems are different from standard HPCsystems, motivate the need for a tool like EasyBuild despite the presence ofCray PE, and show how EasyBuild was tweaked to support reproducible softwareinstallations on Cray systems.

We believe this is interesting success story of how FOSS has significantlyenhanced the software environment on a multi-million dollar production system.


Room: H.2213
Scheduled start: 2017-02-04 11:00:00
Captions: 
	00:00:00,030 --> 00:00:03,469
so I'll start by

00:00:04,610 --> 00:00:10,340
thanking Peter and Kenneth who are the

00:00:08,389 --> 00:00:12,710
ones who actually implemented all the

00:00:10,340 --> 00:00:14,960
back end for this for this work what I

00:00:12,710 --> 00:00:18,470
what I did and I'm presenting here is

00:00:14,960 --> 00:00:21,410
just the the deployment of this and the

00:00:18,470 --> 00:00:24,199
testing of the framework so big thanks

00:00:21,410 --> 00:00:27,560
to Kenneth and and Peter and also all

00:00:24,199 --> 00:00:31,099
the team at cscs who work on this on

00:00:27,560 --> 00:00:33,800
this project so we do claim we have

00:00:31,099 --> 00:00:38,120
reproducible HPCC software installations

00:00:33,800 --> 00:00:41,390
the gigs are saying that we have we are

00:00:38,120 --> 00:00:45,920
not giving that we do we do think that

00:00:41,390 --> 00:00:47,830
we can achieve reproducibility so I just

00:00:45,920 --> 00:00:50,239
one more that I think we do have

00:00:47,830 --> 00:00:52,070
problems with bootstrapping sometimes

00:00:50,239 --> 00:00:52,640
when we move from one operational system

00:00:52,070 --> 00:00:55,670
to the other

00:00:52,640 --> 00:00:58,159
but then it's that's where the Dockers

00:00:55,670 --> 00:01:01,040
and containers they can then hook in but

00:00:58,159 --> 00:01:03,890
after that I can assure you that we can

00:01:01,040 --> 00:01:06,110
have reproducibility with is abused and

00:01:03,890 --> 00:01:07,430
that's why we chose easy build and we

00:01:06,110 --> 00:01:10,610
are going to present so this is the

00:01:07,430 --> 00:01:12,170
outline of the talk I will first start

00:01:10,610 --> 00:01:14,690
with the background I think if you're

00:01:12,170 --> 00:01:17,270
here you already know how hard is

00:01:14,690 --> 00:01:19,640
installing software on HPC so I won't

00:01:17,270 --> 00:01:23,960
spend much time explaining all the

00:01:19,640 --> 00:01:26,840
troubles that we ran into then I will

00:01:23,960 --> 00:01:29,180
talk about the easy build the framework

00:01:26,840 --> 00:01:32,270
as an implementation on Cray so this is

00:01:29,180 --> 00:01:35,360
the work from Kenneth and and Peter and

00:01:32,270 --> 00:01:37,850
yeah and the last part I will present

00:01:35,360 --> 00:01:40,190
two use cases so all the the two

00:01:37,850 --> 00:01:41,930
deployments on our main systems at GSEs

00:01:40,190 --> 00:01:44,180
with easy Beauty have many other systems

00:01:41,930 --> 00:01:46,310
we don't have time to talk about them

00:01:44,180 --> 00:01:49,850
here so I'll focus on two systems that

00:01:46,310 --> 00:01:52,610
are crate based and how we managed to

00:01:49,850 --> 00:01:54,530
solve the the installation problem with

00:01:52,610 --> 00:01:57,530
easy build so in the end I will also

00:01:54,530 --> 00:01:59,830
show some integration we have now with

00:01:57,530 --> 00:02:02,600
github for doing continuous integration

00:01:59,830 --> 00:02:08,110
for testing the de beautÃ© software and

00:02:02,600 --> 00:02:11,659
also for archiving the recipes so the

00:02:08,110 --> 00:02:15,140
the problem of building HPC software in

00:02:11,659 --> 00:02:17,990
HPC as I already mentioned it's it's I

00:02:15,140 --> 00:02:18,410
think it's known from you so we had the

00:02:17,990 --> 00:02:21,710
same

00:02:18,410 --> 00:02:24,580
on Cray systems because users we have

00:02:21,710 --> 00:02:28,040
many requests from users and they have

00:02:24,580 --> 00:02:30,140
requirements of software that depend on

00:02:28,040 --> 00:02:32,600
specific versions so you cannot just do

00:02:30,140 --> 00:02:35,570
a ticket install on the software that

00:02:32,600 --> 00:02:37,190
they need they depend really on specific

00:02:35,570 --> 00:02:39,710
versions and these versions need to

00:02:37,190 --> 00:02:42,980
coexist so this is a huge problem for

00:02:39,710 --> 00:02:49,550
the teams maintaining the software and

00:02:42,980 --> 00:02:53,360
not always these people asking using the

00:02:49,550 --> 00:02:55,220
HPC systems they are scientists so so

00:02:53,360 --> 00:02:56,750
they are not developers or see that

00:02:55,220 --> 00:02:58,850
means they don't have all the background

00:02:56,750 --> 00:03:00,530
for installing software so they need

00:02:58,850 --> 00:03:02,180
help from from people with this

00:03:00,530 --> 00:03:04,220
background and with experiencing

00:03:02,180 --> 00:03:06,140
installing system also the people

00:03:04,220 --> 00:03:09,320
developing this science scientific

00:03:06,140 --> 00:03:11,780
software they are not they are not

00:03:09,320 --> 00:03:15,010
formed on computer sciences our

00:03:11,780 --> 00:03:18,260
development so when they produce new

00:03:15,010 --> 00:03:20,540
packages they often they don't use

00:03:18,260 --> 00:03:22,970
correctly the beauty tools Jesus just to

00:03:20,540 --> 00:03:25,160
name a few of the problems we see when

00:03:22,970 --> 00:03:27,320
using scientific software that you don't

00:03:25,160 --> 00:03:30,590
see in common soft common let's say

00:03:27,320 --> 00:03:33,380
software outside the scientific world so

00:03:30,590 --> 00:03:35,209
we have incomplete built procedure that

00:03:33,380 --> 00:03:37,790
you don't have configured or installed

00:03:35,209 --> 00:03:40,100
and you have tweaked the to tweak the

00:03:37,790 --> 00:03:41,990
files manually then this is my my

00:03:40,100 --> 00:03:44,720
favourite interactive installation

00:03:41,990 --> 00:03:48,580
scripts this is really the thing that

00:03:44,720 --> 00:03:50,690
you shouldn't do when you're when you're

00:03:48,580 --> 00:03:53,270
packaging a software you should really

00:03:50,690 --> 00:03:54,770
provide a way that where people can

00:03:53,270 --> 00:03:56,690
install it automatically and not

00:03:54,770 --> 00:03:59,239
answering questions which is your

00:03:56,690 --> 00:04:02,150
favorite color please install it here or

00:03:59,239 --> 00:04:05,570
not so please don't do that automation

00:04:02,150 --> 00:04:07,580
is not a new thing so it's we should

00:04:05,570 --> 00:04:09,560
think that there are people working on

00:04:07,580 --> 00:04:13,340
installing the software at full time so

00:04:09,560 --> 00:04:15,709
then the other things are missing

00:04:13,340 --> 00:04:19,130
documentation and also the dependency

00:04:15,709 --> 00:04:22,100
Helders our slides from kenneth that i'm

00:04:19,130 --> 00:04:25,220
just quoting here so the dependency hell

00:04:22,100 --> 00:04:28,100
we can see many software packages that

00:04:25,220 --> 00:04:30,140
you have you can have up to 40 or 50

00:04:28,100 --> 00:04:32,370
dependencies in only one software and

00:04:30,140 --> 00:04:36,870
then if you need to upgrade the

00:04:32,370 --> 00:04:40,770
good luck so this is the big picture so

00:04:36,870 --> 00:04:43,440
we have we have a problem so this the

00:04:40,770 --> 00:04:45,840
request for HPC user is always growing

00:04:43,440 --> 00:04:47,760
and unfortunately the quality of

00:04:45,840 --> 00:04:50,930
software isn't of packaging this

00:04:47,760 --> 00:04:54,990
software is not improving so we have

00:04:50,930 --> 00:04:56,870
solutions out there for foreign for

00:04:54,990 --> 00:05:02,760
installing regular software but not

00:04:56,870 --> 00:05:06,150
specific for HPC so we have the speaker

00:05:02,760 --> 00:05:08,760
before just mention about specs so and

00:05:06,150 --> 00:05:10,560
we have also easy viewed by the the

00:05:08,760 --> 00:05:15,330
other tools they don't really focus on

00:05:10,560 --> 00:05:17,310
HPC so the impact of the lack of this

00:05:15,330 --> 00:05:19,410
these tools is that when they have this

00:05:17,310 --> 00:05:22,620
the request for new software the

00:05:19,410 --> 00:05:25,110
researchers the they spend a lot of time

00:05:22,620 --> 00:05:30,240
they lose a lot of time waiting and then

00:05:25,110 --> 00:05:32,850
we also spend a lot a lot of time as HPC

00:05:30,240 --> 00:05:34,889
staff trying to fix that the other main

00:05:32,850 --> 00:05:36,419
problem is that it has been already

00:05:34,889 --> 00:05:39,599
mention here is the very little

00:05:36,419 --> 00:05:41,550
collaboration among HPC side so everyone

00:05:39,599 --> 00:05:43,950
is doing their own views on their own

00:05:41,550 --> 00:05:47,490
sites and then people are solving the

00:05:43,950 --> 00:05:49,680
same problem everywhere and this is the

00:05:47,490 --> 00:05:52,970
this is not good in the sense that we

00:05:49,680 --> 00:05:56,250
don't have a common two or a forum for

00:05:52,970 --> 00:05:58,710
sharing so some sites they do they do

00:05:56,250 --> 00:06:02,699
they do work together but there is no

00:05:58,710 --> 00:06:05,580
common ground for the for describing a

00:06:02,699 --> 00:06:08,039
beaut so people are basically redoing

00:06:05,580 --> 00:06:12,330
the same stuff on all sides and there's

00:06:08,039 --> 00:06:15,000
very little collaboration so this is

00:06:12,330 --> 00:06:21,030
also true on Cray systems so that's why

00:06:15,000 --> 00:06:22,889
the way we are just moving the just it's

00:06:21,030 --> 00:06:26,370
just a news case the create system for

00:06:22,889 --> 00:06:28,320
the easy build and the HPC buttes offer

00:06:26,370 --> 00:06:29,660
problems so we have the same problem on

00:06:28,320 --> 00:06:33,990
cray

00:06:29,660 --> 00:06:36,750
so just one slide on uneasy butte for

00:06:33,990 --> 00:06:39,810
those who do not know yet is framework

00:06:36,750 --> 00:06:42,270
for installing a specifically scientific

00:06:39,810 --> 00:06:45,210
software so is not for every kind of

00:06:42,270 --> 00:06:46,200
software so it's focused and then the

00:06:45,210 --> 00:06:49,290
idea is to

00:06:46,200 --> 00:06:52,110
to to group all those people who have

00:06:49,290 --> 00:06:54,630
this experience in HPC and the know-how

00:06:52,110 --> 00:06:56,850
of these people they should be in a

00:06:54,630 --> 00:06:58,920
single place so people can reuse that's

00:06:56,850 --> 00:07:01,260
the advantage when someone spends hours

00:06:58,920 --> 00:07:03,120
and hours preparing a beauty rest

00:07:01,260 --> 00:07:05,760
then someone else can just take this

00:07:03,120 --> 00:07:09,450
recipe and reuse all this time that

00:07:05,760 --> 00:07:12,150
someone who's an expert has an extra

00:07:09,450 --> 00:07:15,330
span worked and then you can just reuse

00:07:12,150 --> 00:07:18,480
this through your local case so it's

00:07:15,330 --> 00:07:22,260
raising Python it started at Ghent

00:07:18,480 --> 00:07:26,090
University in 2009 and it is open since

00:07:22,260 --> 00:07:30,360
it's open source since 2012 now we have

00:07:26,090 --> 00:07:33,150
community we have a stable version that

00:07:30,360 --> 00:07:37,410
is released every two weeks so for my

00:07:33,150 --> 00:07:39,930
from my experience we can always use the

00:07:37,410 --> 00:07:42,630
the new version and we we don't I don't

00:07:39,930 --> 00:07:44,760
say we had zero regression so far but

00:07:42,630 --> 00:07:47,910
every time we had it was very small and

00:07:44,760 --> 00:07:49,500
fixed very quickly so it is something

00:07:47,910 --> 00:07:53,730
that you can really use on production

00:07:49,500 --> 00:07:56,580
even for a large scale system so this is

00:07:53,730 --> 00:07:59,280
my world as a group lead of scientific

00:07:56,580 --> 00:08:01,710
computing support at CSCS we have more

00:07:59,280 --> 00:08:03,960
than 500 users and we have easy building

00:08:01,710 --> 00:08:07,860
production since more than one year so

00:08:03,960 --> 00:08:10,050
there are many the well-known scientific

00:08:07,860 --> 00:08:13,230
software that are already included you

00:08:10,050 --> 00:08:15,720
might not find everything but every

00:08:13,230 --> 00:08:18,600
package manager is giving the figures

00:08:15,720 --> 00:08:20,070
with with how many software you have but

00:08:18,600 --> 00:08:22,170
the thing that you need to do is go

00:08:20,070 --> 00:08:24,690
there and see if how many of your

00:08:22,170 --> 00:08:27,000
software you can find it so I encourage

00:08:24,690 --> 00:08:29,610
you to go there to the website and check

00:08:27,000 --> 00:08:31,680
if you find our software there and then

00:08:29,610 --> 00:08:35,580
you can have an idea if it's if it's

00:08:31,680 --> 00:08:39,690
useful for your use case or not so the

00:08:35,580 --> 00:08:42,570
main features of easy view you have

00:08:39,690 --> 00:08:46,680
autonomous building and installing of

00:08:42,570 --> 00:08:49,050
the software you also have the logging

00:08:46,680 --> 00:08:50,640
so you don't need to care about saving

00:08:49,050 --> 00:08:52,560
the output you are going to find the

00:08:50,640 --> 00:08:55,260
logs of the installation somewhere and

00:08:52,560 --> 00:08:56,670
you don't need to worry about that you

00:08:55,260 --> 00:08:59,459
have archiving of the beauty

00:08:56,670 --> 00:09:01,649
specification so every time you build

00:08:59,459 --> 00:09:03,449
recipe you have a copy of this recipe

00:09:01,649 --> 00:09:06,439
somewhere so that you know that you can

00:09:03,449 --> 00:09:10,559
redo it so this is one step for

00:09:06,439 --> 00:09:12,809
achieving reproducibility it's highly

00:09:10,559 --> 00:09:14,730
configurable on command lines or files

00:09:12,809 --> 00:09:19,019
it's up to you or site-wide

00:09:14,730 --> 00:09:21,300
configurations it is dynamically

00:09:19,019 --> 00:09:23,699
extendable so you have the recipes but

00:09:21,300 --> 00:09:26,790
you can write your own so it you can

00:09:23,699 --> 00:09:30,029
just extend existing classes and then

00:09:26,790 --> 00:09:33,420
write the the things that are specific

00:09:30,029 --> 00:09:37,559
through your software so it was it is

00:09:33,420 --> 00:09:39,569
tested and it is actively developing so

00:09:37,559 --> 00:09:44,179
you can just go to github too to see

00:09:39,569 --> 00:09:47,519
that this is just a graphic to show the

00:09:44,179 --> 00:09:49,769
the community that is same so it is

00:09:47,519 --> 00:09:52,619
growing so for the moment is growing I

00:09:49,769 --> 00:09:54,329
think by the moment when stops growing

00:09:52,619 --> 00:09:56,129
you're going just to show the figure the

00:09:54,329 --> 00:09:58,589
numbers and not the graph so for the

00:09:56,129 --> 00:10:02,279
moment you can't show the dress it is

00:09:58,589 --> 00:10:03,749
growing and just you can just look at

00:10:02,279 --> 00:10:06,329
the mailing list and you can see that

00:10:03,749 --> 00:10:08,189
it's very reactive and also on github so

00:10:06,329 --> 00:10:10,829
there are usually there aren't people

00:10:08,189 --> 00:10:14,129
who have problems that will remain open

00:10:10,829 --> 00:10:16,319
usually typically people have find a

00:10:14,129 --> 00:10:20,490
solution when they need to contact the

00:10:16,319 --> 00:10:22,920
community so just one slide and I would

00:10:20,490 --> 00:10:25,499
try to avoid getting too technical here

00:10:22,920 --> 00:10:28,350
because I I think it's better to discuss

00:10:25,499 --> 00:10:30,299
the ideas here so just I will present a

00:10:28,350 --> 00:10:33,269
quickly determine knowledge of the of

00:10:30,299 --> 00:10:36,920
easy Butte so the lazy Butte framework

00:10:33,269 --> 00:10:40,410
is the part that takes care of of

00:10:36,920 --> 00:10:42,540
writing is installing downloading the

00:10:40,410 --> 00:10:44,939
the packages creating the module files

00:10:42,540 --> 00:10:47,459
and provides all the functionalities for

00:10:44,939 --> 00:10:50,160
the that are common let's say for all

00:10:47,459 --> 00:10:52,709
the builds for all the software then we

00:10:50,160 --> 00:10:57,689
have easy blocks that are specific for

00:10:52,709 --> 00:10:59,790
our they can be specific for a software

00:10:57,689 --> 00:11:02,999
or mostly they are generic so you have

00:10:59,790 --> 00:11:05,639
an easy block for for applications that

00:11:02,999 --> 00:11:07,290
use configure make for example you have

00:11:05,639 --> 00:11:09,029
one easy block for that and then

00:11:07,290 --> 00:11:11,699
depending on the application you might

00:11:09,029 --> 00:11:13,919
need one as well but mostly you

00:11:11,699 --> 00:11:16,589
is only the easy config file which which

00:11:13,919 --> 00:11:19,439
is a recipe that is that's not generic

00:11:16,589 --> 00:11:22,079
you have the version and that's one of

00:11:19,439 --> 00:11:24,089
the key ideas of easy Butte that you

00:11:22,079 --> 00:11:26,339
have the versions of the software

00:11:24,089 --> 00:11:28,769
everywhere in a recipe so that you know

00:11:26,339 --> 00:11:31,529
someone else's she's if someone else

00:11:28,769 --> 00:11:33,989
takes this recipe and tries to reboot

00:11:31,529 --> 00:11:38,989
it's going to use the exactly the same

00:11:33,989 --> 00:11:42,359
versions and while other software

00:11:38,989 --> 00:11:44,669
packages like easy Beauty they are more

00:11:42,359 --> 00:11:46,290
open more flexible but then there's no

00:11:44,669 --> 00:11:48,509
guarantee that you are going to use the

00:11:46,290 --> 00:11:51,749
same versions and that you're going to

00:11:48,509 --> 00:11:53,910
achieve reproducibility less concept is

00:11:51,749 --> 00:11:59,910
the to chain which is very important is

00:11:53,910 --> 00:12:03,089
the base for for a for for any easy

00:11:59,910 --> 00:12:06,149
config file it it's actually the

00:12:03,089 --> 00:12:09,089
compiler and also the basic libraries

00:12:06,149 --> 00:12:12,329
that that are used so typically it's MPI

00:12:09,089 --> 00:12:16,139
blah slapbox Kalibak this is the basic

00:12:12,329 --> 00:12:18,539
things that we see that is used on on

00:12:16,139 --> 00:12:20,730
HPC so it's called the two chain and

00:12:18,539 --> 00:12:24,689
it's grouped together so it's done in a

00:12:20,730 --> 00:12:27,929
way that you it is a base to chain for

00:12:24,689 --> 00:12:30,359
building the software so I moved to the

00:12:27,929 --> 00:12:32,789
next part now which is the

00:12:30,359 --> 00:12:34,739
implementation for for Cray so what was

00:12:32,789 --> 00:12:39,149
missing to use on the Cray system and

00:12:34,739 --> 00:12:42,209
why so this is a typical example on of

00:12:39,149 --> 00:12:44,129
an an easy config file what what we have

00:12:42,209 --> 00:12:47,579
inside for a build for example this is

00:12:44,129 --> 00:12:49,829
one software called GMP it relies on the

00:12:47,579 --> 00:12:52,980
this tool chain this is a tool chain

00:12:49,829 --> 00:12:55,499
which has GCC of an MPI open blast a1

00:12:52,980 --> 00:12:58,619
and it uses the configure make easy

00:12:55,499 --> 00:13:01,619
block and then typically with easy view

00:12:58,619 --> 00:13:03,569
you are going to rebuild everything from

00:13:01,619 --> 00:13:05,759
scratch you are going to rebuild all the

00:13:03,569 --> 00:13:09,209
to chain that you need because you're

00:13:05,759 --> 00:13:11,069
not we don't want to use the things that

00:13:09,209 --> 00:13:13,519
you have already available on the system

00:13:11,069 --> 00:13:16,679
because we might not achieve

00:13:13,519 --> 00:13:19,169
reproducibility and then the difference

00:13:16,679 --> 00:13:22,499
on Cray is that the programming

00:13:19,169 --> 00:13:24,629
environment it's already there so since

00:13:22,499 --> 00:13:24,990
it's provided by Cray in this case we do

00:13:24,629 --> 00:13:28,380
one

00:13:24,990 --> 00:13:31,589
to reuse the existing software because

00:13:28,380 --> 00:13:34,110
they have the optimized version of of

00:13:31,589 --> 00:13:36,740
scientific libraries libraries and also

00:13:34,110 --> 00:13:39,390
NPI for that is optimized for the

00:13:36,740 --> 00:13:42,420
interconnect so in the in the case of

00:13:39,390 --> 00:13:46,950
Cray we do want to reuse this these

00:13:42,420 --> 00:13:51,480
libraries in this compilers and and so

00:13:46,950 --> 00:13:54,750
on so we just created a actually Peter

00:13:51,480 --> 00:13:58,680
and can it created the easy block and

00:13:54,750 --> 00:14:00,630
the to chain for for new for a Cray for

00:13:58,680 --> 00:14:03,600
the new compilers Intel and the others

00:14:00,630 --> 00:14:05,700
mapping the the programming environment

00:14:03,600 --> 00:14:08,279
available on create to easy boots so

00:14:05,700 --> 00:14:11,760
that we can use the creative chain as

00:14:08,279 --> 00:14:16,339
any other tool chain that it was already

00:14:11,760 --> 00:14:18,990
existing on easy build so the three main

00:14:16,339 --> 00:14:22,170
features that had to be implemented are

00:14:18,990 --> 00:14:24,089
the support for external module files

00:14:22,170 --> 00:14:27,300
than the definition of the two chains

00:14:24,089 --> 00:14:29,940
and the custom easy block I I want I

00:14:27,300 --> 00:14:32,310
want to thank again Peter and Kenneth

00:14:29,940 --> 00:14:34,500
but I won't go into details with this

00:14:32,310 --> 00:14:39,589
implementation because we don't have

00:14:34,500 --> 00:14:43,579
time here so this is a key feature for

00:14:39,589 --> 00:14:47,040
for the Cray support so the support for

00:14:43,579 --> 00:14:48,390
external module files so before easy

00:14:47,040 --> 00:14:51,180
build was creating and building

00:14:48,390 --> 00:14:53,820
everything from from scratch and

00:14:51,180 --> 00:14:57,600
creating the module files here on Craney

00:14:53,820 --> 00:15:00,980
to reuse this module file so so there's

00:14:57,600 --> 00:15:03,300
the support for a file where you map the

00:15:00,980 --> 00:15:05,690
existing modules through a way that easy

00:15:03,300 --> 00:15:08,610
beaut can read so this is useful for

00:15:05,690 --> 00:15:10,290
it's needed for Cray but it can also be

00:15:08,610 --> 00:15:15,270
used elsewhere if you have already

00:15:10,290 --> 00:15:18,270
modules that you want to reuse so also

00:15:15,270 --> 00:15:20,040
the the easy Block III will speed up a

00:15:18,270 --> 00:15:22,890
little bit here because of the time so

00:15:20,040 --> 00:15:26,640
the easy block are specific for the for

00:15:22,890 --> 00:15:29,130
for the the cray two chains you can go

00:15:26,640 --> 00:15:30,959
on the onion on github if you want to

00:15:29,130 --> 00:15:34,440
see the details then here is just to

00:15:30,959 --> 00:15:36,270
mention that we have one two chain for

00:15:34,440 --> 00:15:38,520
each programming environment available

00:15:36,270 --> 00:15:40,370
on Cray that we automatically

00:15:38,520 --> 00:15:43,140
the variables that you need for

00:15:40,370 --> 00:15:45,270
violating software on the Cray because

00:15:43,140 --> 00:15:48,750
they we have a rappers on Cray we don't

00:15:45,270 --> 00:15:52,290
use GCC or the compilers directly so we

00:15:48,750 --> 00:15:55,620
use the Cray compilers I move now for

00:15:52,290 --> 00:15:57,209
the last part which is I would say it's

00:15:55,620 --> 00:16:01,500
more interesting from my side because

00:15:57,209 --> 00:16:05,190
it's where we manage to use this all

00:16:01,500 --> 00:16:07,910
this infrastructure to deploy software

00:16:05,190 --> 00:16:12,140
and production so the two use cases that

00:16:07,910 --> 00:16:15,390
I'm going to present here it's first the

00:16:12,140 --> 00:16:21,170
machine from NATO Swiss which is the

00:16:15,390 --> 00:16:26,070
weather forecast service of Switzerland

00:16:21,170 --> 00:16:28,050
they have production systems itself it's

00:16:26,070 --> 00:16:31,490
two cabinets with the production and

00:16:28,050 --> 00:16:35,130
failover with a very GPU dense system

00:16:31,490 --> 00:16:40,560
with eight Tests k-8 is per node so

00:16:35,130 --> 00:16:45,510
sixteen GPUs per node and this is a CS

00:16:40,560 --> 00:16:47,550
storm serious so just to me I explained

00:16:45,510 --> 00:16:50,760
what we had in the Cray programming

00:16:47,550 --> 00:16:52,890
environment typically this machine is

00:16:50,760 --> 00:16:56,370
it's already different from the rest

00:16:52,890 --> 00:16:58,320
this is a new series that they provide

00:16:56,370 --> 00:17:00,380
only partial support for the programming

00:16:58,320 --> 00:17:03,600
environment so they provide only

00:17:00,380 --> 00:17:07,230
programming environment Cray and not new

00:17:03,600 --> 00:17:10,079
and Intel so we had to to rebuild our

00:17:07,230 --> 00:17:11,939
software from scratch and this in this

00:17:10,079 --> 00:17:16,920
case even the GCC that they provided

00:17:11,939 --> 00:17:19,350
they it was not able to compile AVX

00:17:16,920 --> 00:17:21,270
instructions so they give you the harder

00:17:19,350 --> 00:17:23,970
and they don't provide you a working

00:17:21,270 --> 00:17:26,220
compiler so we open a bug and meanwhile

00:17:23,970 --> 00:17:28,050
they took a long time to give an answer

00:17:26,220 --> 00:17:30,330
and then meanwhile we rebooted

00:17:28,050 --> 00:17:32,760
everything with easy beauty took us a

00:17:30,330 --> 00:17:34,170
couple of weeks and now this software

00:17:32,760 --> 00:17:40,530
the software stack is in production

00:17:34,170 --> 00:17:42,960
since more than one years old our main

00:17:40,530 --> 00:17:46,559
use case have move on to pits dine twist

00:17:42,960 --> 00:17:50,940
which is a our main flagship system so

00:17:46,559 --> 00:17:52,230
it's a GPU based system it has two

00:17:50,940 --> 00:17:55,650
partitions so

00:17:52,230 --> 00:17:59,760
here it's our largest partition with the

00:17:55,650 --> 00:18:03,620
TEL Tesla Pascal P 100 GPUs and then we

00:17:59,760 --> 00:18:06,830
have the broader partition so it's then

00:18:03,620 --> 00:18:09,929
according to the top 500 is number 8

00:18:06,830 --> 00:18:14,450
fastest supercomputing in the world and

00:18:09,929 --> 00:18:18,090
according to the green 500 is the second

00:18:14,450 --> 00:18:23,040
most efficient supercomputing with

00:18:18,090 --> 00:18:25,290
respect to energy consumption so this is

00:18:23,040 --> 00:18:27,990
the list of software that we you can

00:18:25,290 --> 00:18:29,640
find it for cray on the stock easy with

00:18:27,990 --> 00:18:32,220
repository meaning that we have already

00:18:29,640 --> 00:18:35,250
contributed back and we also have our

00:18:32,220 --> 00:18:39,150
github repository where we have our

00:18:35,250 --> 00:18:42,750
recipes and and then here is is just the

00:18:39,150 --> 00:18:47,640
least if we want to find look for your

00:18:42,750 --> 00:18:49,530
software so so here is just to mention

00:18:47,640 --> 00:18:53,070
that we have we have this github

00:18:49,530 --> 00:18:57,179
repository where people can can can also

00:18:53,070 --> 00:19:00,840
open for requests and contribute back

00:18:57,179 --> 00:19:03,090
it's for for pits lines specifically we

00:19:00,840 --> 00:19:06,440
have not also automatic checking of the

00:19:03,090 --> 00:19:08,880
recipes using the github pull requests

00:19:06,440 --> 00:19:12,030
beuter plugin so we check everything

00:19:08,880 --> 00:19:14,250
before merging to the master we check

00:19:12,030 --> 00:19:17,340
everything and then the last thing is

00:19:14,250 --> 00:19:21,450
that we have the autonomous deployment

00:19:17,340 --> 00:19:25,100
of this software on the on the system so

00:19:21,450 --> 00:19:28,440
the final final comments here is that

00:19:25,100 --> 00:19:32,340
proprietary and open source software can

00:19:28,440 --> 00:19:34,919
coexist so we had the case where we used

00:19:32,340 --> 00:19:37,320
open source to in order to better

00:19:34,919 --> 00:19:39,540
exploit our system and what we had

00:19:37,320 --> 00:19:41,130
available and in this case we had the

00:19:39,540 --> 00:19:43,530
best of towards because we have an

00:19:41,130 --> 00:19:45,780
optimum optimized software stack and we

00:19:43,530 --> 00:19:48,720
also had support from community both

00:19:45,780 --> 00:19:52,049
community and from from the from the

00:19:48,720 --> 00:19:54,240
vendor and also many minimizes the risks

00:19:52,049 --> 00:19:57,120
of vendor lock-in meaning that we have

00:19:54,240 --> 00:19:59,460
an alternative it was the case when we

00:19:57,120 --> 00:20:01,530
had a problem with a software shipped by

00:19:59,460 --> 00:20:03,650
the vendor we managed just to rebuild

00:20:01,530 --> 00:20:05,760
everything with open source and then

00:20:03,650 --> 00:20:07,440
actually don't need the software

00:20:05,760 --> 00:20:10,350
layers of the stack anymore in that case

00:20:07,440 --> 00:20:13,740
so it's a it's the best of two words as

00:20:10,350 --> 00:20:16,590
I said okay one slides with links that I

00:20:13,740 --> 00:20:18,570
will be available on the web and then we

00:20:16,590 --> 00:20:41,700
have time for questions thank you very

00:20:18,570 --> 00:20:43,710
much so regarding vendor lock-in how

00:20:41,700 --> 00:20:47,310
many career providing a platoon were

00:20:43,710 --> 00:20:49,860
replaced for the CS storm series we

00:20:47,310 --> 00:20:53,580
replaced all the software sexo meaning

00:20:49,860 --> 00:20:55,470
that we don't count on we count on them

00:20:53,580 --> 00:20:58,830
only for the operational system and then

00:20:55,470 --> 00:21:01,370
we replaced from MPI GCC up to all the

00:20:58,830 --> 00:21:04,890
things that matter Swiss needed for

00:21:01,370 --> 00:21:07,860
post-processing the all the data so out

00:21:04,890 --> 00:21:10,860
say here at least 20 software for all

00:21:07,860 --> 00:21:14,010
the netcdf HD HD or/5 all of this came

00:21:10,860 --> 00:21:16,380
from from easy view then we didn't have

00:21:14,010 --> 00:21:18,570
to change much all the defaults work for

00:21:16,380 --> 00:21:21,120
them so I would say 20 software on this

00:21:18,570 --> 00:21:25,020
case and then in the future maybe for

00:21:21,120 --> 00:21:28,980
the XC series where you we might start

00:21:25,020 --> 00:21:32,280
looking in now and also using the open

00:21:28,980 --> 00:21:34,230
source only and then we know that others

00:21:32,280 --> 00:21:37,110
see other plays like tech they just

00:21:34,230 --> 00:21:40,380
dropped all the software stack from Cray

00:21:37,110 --> 00:21:43,200
so they use Intel compilers and MPI and

00:21:40,380 --> 00:21:45,840
then with easy beauty could think about

00:21:43,200 --> 00:21:49,940
doing the same the same in the future so

00:21:45,840 --> 00:21:49,940
this now we have the possibilities

00:21:54,190 --> 00:22:02,500
I have a question how is this being

00:21:59,320 --> 00:22:04,480
received by create itself because it

00:22:02,500 --> 00:22:06,190
seems like it or we are getting the

00:22:04,480 --> 00:22:08,050
signal to create that they're not doing

00:22:06,190 --> 00:22:10,030
a good enough job in terms of softer

00:22:08,050 --> 00:22:13,680
stack and you have to put something on

00:22:10,030 --> 00:22:16,840
top to actually make it fit so for the

00:22:13,680 --> 00:22:18,400
for the CES storm series the feeling

00:22:16,840 --> 00:22:20,470
that I have is that they don't really

00:22:18,400 --> 00:22:23,320
care is not important for them it's the

00:22:20,470 --> 00:22:27,370
series that they are focusing on the

00:22:23,320 --> 00:22:29,320
it's the blow and how not harder by the

00:22:27,370 --> 00:22:31,770
version that they for the support they

00:22:29,320 --> 00:22:38,590
don't really get care that's my feeling

00:22:31,770 --> 00:22:40,060
as for XE they not only because of the

00:22:38,590 --> 00:22:43,260
efforts on easy buta

00:22:40,060 --> 00:22:47,080
from the complaints that we have open

00:22:43,260 --> 00:22:50,620
tickets that took so much so much time

00:22:47,080 --> 00:22:52,030
to resolve then I think they they

00:22:50,620 --> 00:22:54,520
realize they are not doing a good job

00:22:52,030 --> 00:22:56,260
but they don't give any feedback to us

00:22:54,520 --> 00:22:58,660
so but they know because we have people

00:22:56,260 --> 00:23:01,180
inside from crate they know that we are

00:22:58,660 --> 00:23:03,790
using less and less their software every

00:23:01,180 --> 00:23:05,830
time you have an error before or at the

00:23:03,790 --> 00:23:08,290
same time we open a ticket we build

00:23:05,830 --> 00:23:11,680
software with easy build so if they

00:23:08,290 --> 00:23:15,010
don't realize that if we continue like

00:23:11,680 --> 00:23:17,080
this we might not needing their software

00:23:15,010 --> 00:23:22,170
any more of it it's bad for them then

00:23:17,080 --> 00:23:22,170
it's it's the free market oh that's

00:23:25,790 --> 00:23:28,900
that's it

00:23:29,130 --> 00:23:34,859

YouTube URL: https://www.youtube.com/watch?v=jEaoS0GOxiA


