Title: GitLab CI: (almost) effortless Open Source CI an introduction at how testing with gitlab CI is advaâ€¦
Publication date: 2018-03-06
Playlist: FOSDEM 2017
Description: 
	GitLab CI: (almost) effortless Open Source CI an introduction at how testing with gitlab CI is advanced, yet simple to manage
by 

At: FOSDEM 2017

Since version 8.0 GitLab has been including GitLab CI as a core functionality.Doing this made the open source project one of the top contenders for self-hosted (often on-premise) environments. Making the integration between gitlaband gitlab CI so strong has allowed the project to take away much of thetraditional pain of setting up CI. In this talk we'll look at what GitLab CIhas to offer these days.

We'll look through how to set up a simple job in a git repository all the waythrough making it a pipeline that runs jobs in parallel on remote machines indocker containers. We'll look at what the strengths and the weaknesses are andgive some tips for running a GitLab CI environment in production.


Room: H.2213
Scheduled start: 2017-02-05 09:50:00
Captions: 
	00:00:11,250 --> 00:00:19,500
with a request and a few other things

00:00:16,550 --> 00:00:22,650
biggest difference for me is that they

00:00:19,500 --> 00:00:24,539
are fully open source so the Community

00:00:22,650 --> 00:00:28,590
Edition you can install by yourself and

00:00:24,539 --> 00:00:32,930
you have a fully open source version

00:00:28,590 --> 00:00:37,200
control software it's very nice for

00:00:32,930 --> 00:00:39,510
on-premise environments where companies

00:00:37,200 --> 00:00:41,969
are not necessarily very happy about

00:00:39,510 --> 00:00:45,149
pushing their code to various cloud

00:00:41,969 --> 00:00:48,949
environments or SAS products get lab

00:00:45,149 --> 00:00:53,129
makes a very nice on-prem alternative

00:00:48,949 --> 00:00:56,039
there's a Community Edition and the

00:00:53,129 --> 00:00:57,600
Enterprise Edition if you are at a

00:00:56,039 --> 00:00:58,739
company that has the financial means I

00:00:57,600 --> 00:01:01,229
would recommend you to go with the

00:00:58,739 --> 00:01:03,120
Enterprise Edition simply because in

00:01:01,229 --> 00:01:04,860
order for the Community Edition to exist

00:01:03,120 --> 00:01:09,240
people need to pay for the Enterprise

00:01:04,860 --> 00:01:11,880
Edition so we all benefit from that we

00:01:09,240 --> 00:01:14,850
are an enterprise user as well but we

00:01:11,880 --> 00:01:19,260
also use open source for the clients

00:01:14,850 --> 00:01:22,830
where that is the better option good lab

00:01:19,260 --> 00:01:24,450
CI is a continuous integration service

00:01:22,830 --> 00:01:26,840
the nice thing is that it's fully

00:01:24,450 --> 00:01:29,220
integrated with with gate lab itself so

00:01:26,840 --> 00:01:31,230
because of the fact that most of the

00:01:29,220 --> 00:01:35,010
time when you're doing some kind of CI

00:01:31,230 --> 00:01:36,680
it's very tightly coupled to your to the

00:01:35,010 --> 00:01:41,730
source code that you want to do CI on

00:01:36,680 --> 00:01:46,500
it's quite nice that Ghaleb CI is so

00:01:41,730 --> 00:01:49,020
closely closely coupled it's fully open

00:01:46,500 --> 00:01:51,090
source as I already said if you are

00:01:49,020 --> 00:01:53,490
already using gate lab SIA a good lab

00:01:51,090 --> 00:01:56,810
Community Edition all you need to do is

00:01:53,490 --> 00:02:02,070
check in and get get lab CID mo file and

00:01:56,810 --> 00:02:04,200
presto you're getting started it's not

00:02:02,070 --> 00:02:09,959
actually true you also need a runner but

00:02:04,200 --> 00:02:12,000
we'll get to that in a minute this

00:02:09,959 --> 00:02:15,930
minute

00:02:12,000 --> 00:02:18,570
and get lab CI runners are what is

00:02:15,930 --> 00:02:22,610
referred to as machines or environments

00:02:18,570 --> 00:02:26,930
that run your is a you guys okay yeah

00:02:22,610 --> 00:02:30,810
green shirts is uh they fixed trouble

00:02:26,930 --> 00:02:33,210
so the runners they they run your your

00:02:30,810 --> 00:02:35,220
builds there are many different

00:02:33,210 --> 00:02:37,260
different types of runners but basically

00:02:35,220 --> 00:02:40,230
a runner is some kind of environment

00:02:37,260 --> 00:02:45,180
that that picks up builds from get lab

00:02:40,230 --> 00:02:48,780
CI through the internal api's it can be

00:02:45,180 --> 00:02:51,480
specific to a to a project or serve any

00:02:48,780 --> 00:02:53,610
project so specific to a project is for

00:02:51,480 --> 00:02:55,260
instance if you have a certain code that

00:02:53,610 --> 00:02:56,880
has the condone Li works for Windows

00:02:55,260 --> 00:02:59,220
then you will have a runner that runs

00:02:56,880 --> 00:03:02,340
Windows and you won't want to run your

00:02:59,220 --> 00:03:06,840
other projects on them so see later on

00:03:02,340 --> 00:03:09,660
how we can determine which projects get

00:03:06,840 --> 00:03:12,150
run on which runners but in general

00:03:09,660 --> 00:03:15,600
runners are the isolated environments

00:03:12,150 --> 00:03:17,730
where you run your code there are a ton

00:03:15,600 --> 00:03:21,600
of different runners you can look them

00:03:17,730 --> 00:03:23,400
up but most useful at the moment

00:03:21,600 --> 00:03:27,420
depending on your project of course is a

00:03:23,400 --> 00:03:29,820
docker runner it just runs one or more

00:03:27,420 --> 00:03:31,709
docker containers that pick up builds

00:03:29,820 --> 00:03:35,670
execute a bunch of stuff and then throw

00:03:31,709 --> 00:03:40,709
it all away after it's done it's very

00:03:35,670 --> 00:03:43,500
easy to get started the the way the the

00:03:40,709 --> 00:03:46,739
standard Runner is set up with the gate

00:03:43,500 --> 00:03:47,880
lab is very easy to run however if

00:03:46,739 --> 00:03:50,100
you're going to run this in production

00:03:47,880 --> 00:03:53,459
for a longer period of time look into

00:03:50,100 --> 00:03:56,910
the actual docker installations

00:03:53,459 --> 00:03:58,170
underneath we had one problem where by

00:03:56,910 --> 00:04:00,120
default it was using one of those

00:03:58,170 --> 00:04:04,010
storage drivers where it can only eat

00:04:00,120 --> 00:04:07,709
space and it can never release space I

00:04:04,010 --> 00:04:10,410
won't get into that here but yeah so

00:04:07,709 --> 00:04:12,709
it's a it's useful to look into that

00:04:10,410 --> 00:04:15,750
I'd recommend running your runners on a

00:04:12,709 --> 00:04:17,970
separate VM so you have a one VM that

00:04:15,750 --> 00:04:20,039
runs the gate lab see get lab

00:04:17,970 --> 00:04:23,030
installation including get lab CI and

00:04:20,039 --> 00:04:23,030
then one VM that

00:04:23,199 --> 00:04:30,860
runners that's the easiest so the doctor

00:04:28,069 --> 00:04:34,430
runner basically goes against what the

00:04:30,860 --> 00:04:38,360
real idea of docker was and abuses all

00:04:34,430 --> 00:04:41,300
your your dhaka runners as throw away

00:04:38,360 --> 00:04:43,400
VMs which feels a bit awkward at first

00:04:41,300 --> 00:04:45,440
but it's actually quite nice after you

00:04:43,400 --> 00:04:50,599
get used to it because it just simply

00:04:45,440 --> 00:04:54,020
works I currently do a lot of operations

00:04:50,599 --> 00:04:57,139
stuff so a lot of puppet code and we use

00:04:54,020 --> 00:04:58,280
a lot of gillip CI for testing puppet

00:04:57,139 --> 00:05:00,440
code and it's actually really nice

00:04:58,280 --> 00:05:02,660
because the thing with puppet code is

00:05:00,440 --> 00:05:03,949
that it actually makes changes to a

00:05:02,660 --> 00:05:07,400
system if you're going to run anything

00:05:03,949 --> 00:05:09,139
so you want these kind of throwaway

00:05:07,400 --> 00:05:10,639
environments because you don't want to

00:05:09,139 --> 00:05:12,710
use it twice you want to start with the

00:05:10,639 --> 00:05:13,909
same baseline every time for I guess for

00:05:12,710 --> 00:05:15,320
web applications that's a little bit

00:05:13,909 --> 00:05:17,570
different because they usually don't

00:05:15,320 --> 00:05:20,240
make that many changes to the actual

00:05:17,570 --> 00:05:26,180
system underneath but yeah in our case

00:05:20,240 --> 00:05:27,440
it's quite important so as I said the

00:05:26,180 --> 00:05:31,880
only thing you need to do is in your

00:05:27,440 --> 00:05:35,000
gate lab project which is the same as a

00:05:31,880 --> 00:05:38,300
as a how to set at a github project or a

00:05:35,000 --> 00:05:39,620
bitbucket project whatever so in your

00:05:38,300 --> 00:05:41,479
project in a root of your project you

00:05:39,620 --> 00:05:45,680
check in a file called git lab

00:05:41,479 --> 00:05:49,009
CI ml and here on the right we see the

00:05:45,680 --> 00:05:52,490
simplest one of the simplest versions of

00:05:49,009 --> 00:05:53,870
what you could be doing so we're we're

00:05:52,490 --> 00:05:55,610
choosing a docker image here this

00:05:53,870 --> 00:05:58,509
specifies which image where we're

00:05:55,610 --> 00:06:02,440
running just comes from the docker hub

00:05:58,509 --> 00:06:04,940
and then we have one job called test

00:06:02,440 --> 00:06:07,699
here this label can be anything you want

00:06:04,940 --> 00:06:10,729
so if you wanted to be your mother's

00:06:07,699 --> 00:06:12,229
name that's totally fine it's probably

00:06:10,729 --> 00:06:15,530
more convenient to use something that

00:06:12,229 --> 00:06:18,159
actually means anything but hey and then

00:06:15,530 --> 00:06:21,380
in its simplest form it has a script

00:06:18,159 --> 00:06:22,550
parameter and that just has a number of

00:06:21,380 --> 00:06:24,820
statements that you want it to execute

00:06:22,550 --> 00:06:28,460
in this case we'll do a bundle install

00:06:24,820 --> 00:06:31,370
and then a bundle animal do a rake lint

00:06:28,460 --> 00:06:33,199
and a rake syntax tasks this was taken

00:06:31,370 --> 00:06:35,330
from one of our puppet projects but you

00:06:33,199 --> 00:06:38,910
get the point

00:06:35,330 --> 00:06:42,810
so once you've checked this into your

00:06:38,910 --> 00:06:47,370
repository from that moment on for every

00:06:42,810 --> 00:06:50,880
push to the branch that has this a file

00:06:47,370 --> 00:06:54,090
in it it'll run your billed for every

00:06:50,880 --> 00:06:57,389
merge request it will also run but you

00:06:54,090 --> 00:06:59,880
have to be understanding that your gait

00:06:57,389 --> 00:07:01,380
lab CI can be different between branches

00:06:59,880 --> 00:07:04,470
I wouldn't necessarily recommend doing

00:07:01,380 --> 00:07:06,810
that but you'll notice it when you make

00:07:04,470 --> 00:07:08,580
changes to a gait lab CI file and you'll

00:07:06,810 --> 00:07:10,860
probably have it sitting in a topic

00:07:08,580 --> 00:07:12,720
branch first which gets gets a merge

00:07:10,860 --> 00:07:16,130
request and until that is merged you

00:07:12,720 --> 00:07:18,389
have two different and gillip CI files

00:07:16,130 --> 00:07:20,190
so you have to be a bit aware of what

00:07:18,389 --> 00:07:23,610
it's actually running it's not a big

00:07:20,190 --> 00:07:24,930
deal but you could intentionally abuse

00:07:23,610 --> 00:07:27,330
that if you wanted to if you have some

00:07:24,930 --> 00:07:32,610
kind of a specific situation but I

00:07:27,330 --> 00:07:35,520
haven't really run into that so jobs

00:07:32,610 --> 00:07:40,380
this little test here is a basically a

00:07:35,520 --> 00:07:42,690
job name so the jobs can be run in all

00:07:40,380 --> 00:07:44,490
of these different ways as I said these

00:07:42,690 --> 00:07:45,870
are these are basically the runners you

00:07:44,490 --> 00:07:49,200
could run it locally but then you're

00:07:45,870 --> 00:07:50,910
screwing with your gait lab the VM that

00:07:49,200 --> 00:07:52,289
get lab runs on so I wouldn't recommend

00:07:50,910 --> 00:07:56,430
that

00:07:52,289 --> 00:08:00,360
and then varying degrees of complexity

00:07:56,430 --> 00:08:02,280
that also provide flexibility you can

00:08:00,360 --> 00:08:03,660
even connect to a remote SSH server if

00:08:02,280 --> 00:08:05,430
you really need to run it on that

00:08:03,660 --> 00:08:06,930
specific machine because I don't know it

00:08:05,430 --> 00:08:09,210
has an IP address or it has something

00:08:06,930 --> 00:08:12,740
else that it has to be running on that

00:08:09,210 --> 00:08:17,039
machine and that's also totally possible

00:08:12,740 --> 00:08:21,660
as you see here though we have now split

00:08:17,039 --> 00:08:27,720
up our our git lab CI file into multiple

00:08:21,660 --> 00:08:29,220
jobs so it's doing exactly the same as

00:08:27,720 --> 00:08:32,099
what it was doing here a bundle install

00:08:29,220 --> 00:08:34,709
a rake lint and a rake syntax there are

00:08:32,099 --> 00:08:37,940
two good reasons why you want to keep

00:08:34,709 --> 00:08:41,080
your jobs as small as possible

00:08:37,940 --> 00:08:45,010
the first one is because you

00:08:41,080 --> 00:08:47,590
can then how to say that parallel these

00:08:45,010 --> 00:08:49,900
jobs can now run in parallel so if you

00:08:47,590 --> 00:08:51,490
have multiple runners available these

00:08:49,900 --> 00:08:53,830
jobs can run in parallel cutting your

00:08:51,490 --> 00:08:55,780
build time in theoretically half it

00:08:53,830 --> 00:08:57,700
won't be exactly half but cutting your

00:08:55,780 --> 00:09:01,200
build time and if you multiply this by a

00:08:57,700 --> 00:09:04,960
lot that will save you a bunch of time

00:09:01,200 --> 00:09:10,480
so the first reason is to enable

00:09:04,960 --> 00:09:12,580
parallel parallelization and the second

00:09:10,480 --> 00:09:14,890
reason is that if something goes wrong

00:09:12,580 --> 00:09:18,160
with a with a job it's much nicer to

00:09:14,890 --> 00:09:21,340
have a very specific place to go in

00:09:18,160 --> 00:09:23,950
search you'll have to dive into the the

00:09:21,340 --> 00:09:26,290
build log anyway but if you already know

00:09:23,950 --> 00:09:28,360
that you failed against rakes in text

00:09:26,290 --> 00:09:32,800
and you know exactly like this is where

00:09:28,360 --> 00:09:34,330
the the problem is going to be one more

00:09:32,800 --> 00:09:38,770
thing that we see here is the before

00:09:34,330 --> 00:09:40,720
script section where before script is a

00:09:38,770 --> 00:09:45,190
special it's not a job this is a special

00:09:40,720 --> 00:09:47,110
configuration parameter which runs a

00:09:45,190 --> 00:09:49,480
bundle install or actually whatever is

00:09:47,110 --> 00:09:52,210
in the before script is run before the

00:09:49,480 --> 00:09:57,760
script of every job it's unimaginable

00:09:52,210 --> 00:09:59,830
how how difficult this is but it's kind

00:09:57,760 --> 00:10:02,860
of self-explanatory and the before

00:09:59,830 --> 00:10:05,650
script runs before every job you see

00:10:02,860 --> 00:10:09,460
that I created the names of the jobs

00:10:05,650 --> 00:10:10,840
here using job : test : syntax it's not

00:10:09,460 --> 00:10:13,780
actually necessary you could just call

00:10:10,840 --> 00:10:15,910
this job syntax but because we have

00:10:13,780 --> 00:10:18,580
things that are jobs and things that are

00:10:15,910 --> 00:10:22,000
not jobs in the gate lab CI file I find

00:10:18,580 --> 00:10:24,760
it very convenient to prefix all the

00:10:22,000 --> 00:10:28,320
jobs with job and later on we'll see

00:10:24,760 --> 00:10:31,630
that this syntax job runs in the test

00:10:28,320 --> 00:10:35,170
environment so I like to call my jobs

00:10:31,630 --> 00:10:36,340
job like literally the word job then the

00:10:35,170 --> 00:10:37,900
name of the environment and then the

00:10:36,340 --> 00:10:40,300
name of the job so that it becomes more

00:10:37,900 --> 00:10:45,780
easy to for you to grasp what runs where

00:10:40,300 --> 00:10:45,780
and and when

00:10:47,670 --> 00:10:53,619
so if you do that you can create a nice

00:10:51,670 --> 00:10:55,660
little pipeline so you have multiple

00:10:53,619 --> 00:10:58,059
jobs and you can create a nice little

00:10:55,660 --> 00:11:00,699
pipeline so these are all individual

00:10:58,059 --> 00:11:03,910
jobs and get lab creates this overview

00:11:00,699 --> 00:11:05,529
for you automatically we'll see in a

00:11:03,910 --> 00:11:09,699
minute how these are different stages

00:11:05,529 --> 00:11:13,959
and how to match all of these together

00:11:09,699 --> 00:11:15,819
but after a build has passed you you get

00:11:13,959 --> 00:11:17,110
your pipeline actually while it's

00:11:15,819 --> 00:11:18,339
running you can see this pipeline as

00:11:17,110 --> 00:11:20,470
well you can see the progress and you

00:11:18,339 --> 00:11:24,490
can see the jobs completing or not

00:11:20,470 --> 00:11:26,319
completing and you'll see little green

00:11:24,490 --> 00:11:27,670
checkmarks once a build has been

00:11:26,319 --> 00:11:29,499
completed you can see that it's in

00:11:27,670 --> 00:11:35,129
progress you can click on it and see the

00:11:29,499 --> 00:11:38,709
build log getting created all of that

00:11:35,129 --> 00:11:44,949
the this is a link to the commits that

00:11:38,709 --> 00:11:46,509
created the that's being tested here you

00:11:44,949 --> 00:11:50,019
see one special thing that you probably

00:11:46,509 --> 00:11:52,689
noticed a red cross but it's continuing

00:11:50,019 --> 00:11:54,309
anyway it's a special feature I won't

00:11:52,689 --> 00:11:57,910
dive into too much but you can set

00:11:54,309 --> 00:11:59,439
certain jobs to allow them to fail so

00:11:57,910 --> 00:12:01,019
it's okay that it doesn't build on

00:11:59,439 --> 00:12:03,850
Windows because who wants to know wait

00:12:01,019 --> 00:12:05,470
it's okay there's a fails on Windows for

00:12:03,850 --> 00:12:10,439
whatever the specific reason is this is

00:12:05,470 --> 00:12:12,910
actually the pipeline of the gate lab CI

00:12:10,439 --> 00:12:15,279
multi Runner I think the docker runner

00:12:12,910 --> 00:12:16,569
for a gate lab see I just made a

00:12:15,279 --> 00:12:22,029
screenshot of that to show you how

00:12:16,569 --> 00:12:24,100
pipeline looks so this was really nice

00:12:22,029 --> 00:12:24,879
this bundle install thing but it has a

00:12:24,100 --> 00:12:28,259
problem

00:12:24,879 --> 00:12:28,259
does anybody know what the problem is

00:12:30,569 --> 00:12:35,369
imagine we're running this a thousand

00:12:32,860 --> 00:12:35,369
times a day

00:12:37,480 --> 00:12:40,320
sorry

00:12:41,790 --> 00:12:47,260
exactly so we're doing this bundle

00:12:44,350 --> 00:12:50,410
install before this job before this job

00:12:47,260 --> 00:12:53,230
times a thousand that just adds up

00:12:50,410 --> 00:12:55,930
we could easily reduce that amount of

00:12:53,230 --> 00:13:01,810
time and spent on that by using what is

00:12:55,930 --> 00:13:05,110
called artifacts and dependencies so an

00:13:01,810 --> 00:13:07,090
artifact a job can export an artifact

00:13:05,110 --> 00:13:09,460
which is just a bunch of files that are

00:13:07,090 --> 00:13:11,560
created by that job or maybe not created

00:13:09,460 --> 00:13:16,170
by their job but usually created by that

00:13:11,560 --> 00:13:20,380
job that can then be used in subsequent

00:13:16,170 --> 00:13:22,000
jobs throughout the pipeline so exactly

00:13:20,380 --> 00:13:23,920
why would we run bundle install every

00:13:22,000 --> 00:13:26,050
time it doesn't really make any sense

00:13:23,920 --> 00:13:30,610
if you run bundle install with - -

00:13:26,050 --> 00:13:34,240
deployment it'll install all the gems in

00:13:30,610 --> 00:13:37,960
the directory where your gem file is in

00:13:34,240 --> 00:13:39,760
a subdirectory called vendor so we've

00:13:37,960 --> 00:13:41,620
changed the script a little bit we make

00:13:39,760 --> 00:13:48,640
it bundle install - - deployment and

00:13:41,620 --> 00:13:50,200
then we create artifacts from the vendor

00:13:48,640 --> 00:13:52,510
path so everything is in the vendor path

00:13:50,200 --> 00:13:57,580
well after this job is done we zipped up

00:13:52,510 --> 00:13:59,830
and sent to the ticket lab where this

00:13:57,580 --> 00:14:01,330
job then downloads it because these jobs

00:13:59,830 --> 00:14:03,190
can actually be running on different

00:14:01,330 --> 00:14:04,810
runners on different physical machines

00:14:03,190 --> 00:14:07,500
and if acun different virtual machines

00:14:04,810 --> 00:14:11,760
on different docker ho docker instances

00:14:07,500 --> 00:14:11,760
so they're communicated back and forth

00:14:12,030 --> 00:14:19,120
you want to make sure that you set this

00:14:14,350 --> 00:14:23,800
expire in flag because by default expiry

00:14:19,120 --> 00:14:25,690
is never and that means that all your

00:14:23,800 --> 00:14:28,480
artifacts are going to be on your gate

00:14:25,690 --> 00:14:32,370
lab server forever and ever eternally

00:14:28,480 --> 00:14:35,250
and I just use a bunch of space so

00:14:32,370 --> 00:14:38,380
expired them in whatever is convenient

00:14:35,250 --> 00:14:40,090
after this time it would be deleted but

00:14:38,380 --> 00:14:42,280
this is a vendor it's a bunch of

00:14:40,090 --> 00:14:43,990
downloaded gem so nobody really cares

00:14:42,280 --> 00:14:46,930
about them after the pipeline has been

00:14:43,990 --> 00:14:48,940
completed it does mean that the pipeline

00:14:46,930 --> 00:14:51,340
has to complete within a day but I'm

00:14:48,940 --> 00:14:53,670
willing to gamble that that is actually

00:14:51,340 --> 00:14:53,670
happening

00:14:54,810 --> 00:15:02,200
so this job exports the artifacts but

00:15:00,460 --> 00:15:04,830
then obviously we need to say in these

00:15:02,200 --> 00:15:08,320
jobs that they are actually depending on

00:15:04,830 --> 00:15:11,700
the original on the artifacts job so we

00:15:08,320 --> 00:15:15,220
see that now I've created a job in the

00:15:11,700 --> 00:15:18,279
called job build artifacts and now here

00:15:15,220 --> 00:15:20,320
the other two jobs have a dependency on

00:15:18,279 --> 00:15:22,150
job build artifacts and because of the

00:15:20,320 --> 00:15:24,310
dependency they automatically download

00:15:22,150 --> 00:15:29,050
the artifacts from the job that they are

00:15:24,310 --> 00:15:35,200
depending on and the first line is

00:15:29,050 --> 00:15:36,700
bundle install - deployment which wants

00:15:35,200 --> 00:15:38,470
to go through my gem file and download

00:15:36,700 --> 00:15:40,420
all the gems that are in there except

00:15:38,470 --> 00:15:44,470
that it sees it's getting this vendor

00:15:40,420 --> 00:15:48,160
directory from the from the artifacts

00:15:44,470 --> 00:15:49,779
job so it automatically sees that all of

00:15:48,160 --> 00:15:52,480
the gems are already there and it

00:15:49,779 --> 00:15:54,700
doesn't need to do anything and then we

00:15:52,480 --> 00:15:58,570
can continue as normal with the with the

00:15:54,700 --> 00:16:00,459
other jobs this example is obviously

00:15:58,570 --> 00:16:03,160
specific to ruby but you can hopefully

00:16:00,459 --> 00:16:06,130
imagine how this works for whatever

00:16:03,160 --> 00:16:07,540
language you're in whatever situation

00:16:06,130 --> 00:16:16,720
you're in it's a very very flexible

00:16:07,540 --> 00:16:19,660
system so stages allow you to create

00:16:16,720 --> 00:16:22,180
different you know stages of a of a

00:16:19,660 --> 00:16:23,500
pipeline it's what you saw here these

00:16:22,180 --> 00:16:28,060
are stages pre-built

00:16:23,500 --> 00:16:29,200
just bill package release and we define

00:16:28,060 --> 00:16:30,760
them like this these are actually the

00:16:29,200 --> 00:16:32,950
default stages but we've mentioned them

00:16:30,760 --> 00:16:36,610
here for clarity and you can add as many

00:16:32,950 --> 00:16:39,730
stages as you want the stages will be

00:16:36,610 --> 00:16:41,140
run through in the order that you define

00:16:39,730 --> 00:16:42,940
them here so if you put test before

00:16:41,140 --> 00:16:45,339
build then that's the then first all the

00:16:42,940 --> 00:16:50,230
jobs in test stage will be done and then

00:16:45,339 --> 00:16:52,300
all the ones in the build stage jobs of

00:16:50,230 --> 00:16:57,330
the same stage that don't have

00:16:52,300 --> 00:17:00,130
dependencies can run in parallel so

00:16:57,330 --> 00:17:03,339
again referring back to this these four

00:17:00,130 --> 00:17:05,360
jobs will all run in parallel if they

00:17:03,339 --> 00:17:09,059
can

00:17:05,360 --> 00:17:13,490
which reduces our our time significantly

00:17:09,059 --> 00:17:15,240
from running them all in sequence so

00:17:13,490 --> 00:17:17,339
it's very simple

00:17:15,240 --> 00:17:20,419
all we need to do is in each job

00:17:17,339 --> 00:17:26,429
determine the stage that it's in build

00:17:20,419 --> 00:17:29,610
test test the deploy stage I left it out

00:17:26,429 --> 00:17:32,779
because it's short enough already

00:17:29,610 --> 00:17:34,830
is it readable for the guys in the back

00:17:32,779 --> 00:17:37,230
yeah I was wondering while I was making

00:17:34,830 --> 00:17:42,389
the slides it's gonna depend on the size

00:17:37,230 --> 00:17:46,049
of the screen all I put up the slides in

00:17:42,389 --> 00:17:48,769
the Fossum website as well after this so

00:17:46,049 --> 00:17:52,860
he can take a look there

00:17:48,769 --> 00:17:57,600
so that's stages fairly straightforward

00:17:52,860 --> 00:18:05,940
also limiting builds I don't know how am

00:17:57,600 --> 00:18:08,549
i doing on time what's perfect so

00:18:05,940 --> 00:18:12,169
sometimes you want certain builds to not

00:18:08,549 --> 00:18:16,139
run sorry certain jobs to not always run

00:18:12,169 --> 00:18:18,779
you can think of jobs that take a lot of

00:18:16,139 --> 00:18:21,509
resources either lots of time or lots of

00:18:18,779 --> 00:18:24,649
processing power and then you might want

00:18:21,509 --> 00:18:27,899
to think hey I only want to run these

00:18:24,649 --> 00:18:30,120
when I'm actually deploying to do in a

00:18:27,899 --> 00:18:32,210
staging or a production environment or I

00:18:30,120 --> 00:18:36,389
want to only run these for the master

00:18:32,210 --> 00:18:39,870
branch for that we have two options we

00:18:36,389 --> 00:18:43,169
have only and we have accept and as you

00:18:39,870 --> 00:18:45,389
might expect only defines a list of get

00:18:43,169 --> 00:18:48,779
reps for which the build is created and

00:18:45,389 --> 00:18:57,299
accept a list of get reps for which it's

00:18:48,779 --> 00:19:02,000
not created so in this case we will only

00:18:57,299 --> 00:19:05,850
run this for the for the master branch

00:19:02,000 --> 00:19:10,950
except you wouldn't actually use this

00:19:05,850 --> 00:19:13,139
combination like this together but so

00:19:10,950 --> 00:19:15,570
you can actually so it works on git ref

00:19:13,139 --> 00:19:18,349
so it works on tags as well as on branch

00:19:15,570 --> 00:19:20,659
names so you could actually have

00:19:18,349 --> 00:19:22,159
branch is a branch name here so you run

00:19:20,659 --> 00:19:25,700
it only for master branch

00:19:22,159 --> 00:19:32,119
except for bills that are tagged as

00:19:25,700 --> 00:19:33,889
developed there is also a special key

00:19:32,119 --> 00:19:38,049
that you can put here and I forget what

00:19:33,889 --> 00:19:41,059
it's called a special key which only

00:19:38,049 --> 00:19:46,839
runs this job had specifically requested

00:19:41,059 --> 00:19:49,429
through the API triggers that's the one

00:19:46,839 --> 00:19:53,269
thank you

00:19:49,429 --> 00:19:55,039
so the use case for that and my pain is

00:19:53,269 --> 00:19:57,709
relatively limited but I presume it's

00:19:55,039 --> 00:20:01,129
there because that's why it's built but

00:19:57,709 --> 00:20:02,839
yeah we also see here allow failure this

00:20:01,129 --> 00:20:06,049
is that tag that I was mentioning that

00:20:02,839 --> 00:20:08,419
allows this windows build this windows a

00:20:06,049 --> 00:20:16,609
job to finish and the rest of the

00:20:08,419 --> 00:20:23,419
pipeline can continue anyway selecting

00:20:16,609 --> 00:20:27,649
specific runners so you can use tags in

00:20:23,419 --> 00:20:29,809
a job to make sure that a job only runs

00:20:27,649 --> 00:20:33,409
on a specific runner

00:20:29,809 --> 00:20:34,879
so as you're registering a runner for

00:20:33,409 --> 00:20:37,309
instance if you're registering a Windows

00:20:34,879 --> 00:20:39,169
machine or sorry a Windows runner

00:20:37,309 --> 00:20:42,589
you can say hey you can tag it with

00:20:39,169 --> 00:20:44,479
Windows and then in your jobs you can

00:20:42,589 --> 00:20:46,519
tag your Windows jobs with Windows and

00:20:44,479 --> 00:20:49,700
nothing else will run on those Machir on

00:20:46,519 --> 00:20:55,789
those runners except for jobs that have

00:20:49,700 --> 00:20:58,549
been tagged Windows now you can have

00:20:55,789 --> 00:21:00,679
multiple tags so whatever you it's

00:20:58,549 --> 00:21:03,159
fairly a flexible system you see them

00:21:00,679 --> 00:21:03,159
here as well

00:21:07,370 --> 00:21:15,120
using this system you can you can do

00:21:10,830 --> 00:21:19,190
things that not only for for Windows and

00:21:15,120 --> 00:21:22,289
non Windows but also for if you have

00:21:19,190 --> 00:21:23,669
runners running in in different cloud

00:21:22,289 --> 00:21:25,950
environments for instance they won't

00:21:23,669 --> 00:21:29,669
necessarily always be able to run the

00:21:25,950 --> 00:21:32,789
same kind of jobs so you can you can

00:21:29,669 --> 00:21:39,570
very fairly flexible define here which

00:21:32,789 --> 00:21:42,779
jobs can run where manual build a small

00:21:39,570 --> 00:21:44,580
but very important introduction and that

00:21:42,779 --> 00:21:49,039
makes for a nice finish

00:21:44,580 --> 00:21:53,100
so manual builds are very simple but

00:21:49,039 --> 00:21:56,309
they will create this little play button

00:21:53,100 --> 00:22:00,390
here and the only way to run this build

00:21:56,309 --> 00:22:02,460
this job is by clicking that button this

00:22:00,390 --> 00:22:03,690
can be very useful for this kind of

00:22:02,460 --> 00:22:05,490
setup where you want to test and build

00:22:03,690 --> 00:22:07,380
and deploy to staging you don't care as

00:22:05,490 --> 00:22:09,860
as long as the previous jobs all

00:22:07,380 --> 00:22:13,950
complete successfully then let's go and

00:22:09,860 --> 00:22:16,380
deploy to staging but the actual deploy

00:22:13,950 --> 00:22:18,360
to production you want a human being to

00:22:16,380 --> 00:22:21,090
actually press that button and say hey

00:22:18,360 --> 00:22:24,720
let's go and deploy this

00:22:21,090 --> 00:22:28,620
so you said manual to true I didn't

00:22:24,720 --> 00:22:30,419
actually include the I'd say that the

00:22:28,620 --> 00:22:32,760
the parameter but it's literally called

00:22:30,419 --> 00:22:34,789
manual and you set it to true I think

00:22:32,760 --> 00:22:38,909
you can figure it out

00:22:34,789 --> 00:22:42,720
if you set that up then your build will

00:22:38,909 --> 00:22:45,000
be manually deployed only so your job

00:22:42,720 --> 00:22:48,090
will only be executed when you manually

00:22:45,000 --> 00:22:51,960
press that red button we use that for

00:22:48,090 --> 00:22:54,390
exactly this this set up so we have some

00:22:51,960 --> 00:22:56,909
some puppet repositories and we don't

00:22:54,390 --> 00:23:00,090
care about puppet code going to staging

00:22:56,909 --> 00:23:02,429
server and that's totally fine but for

00:23:00,090 --> 00:23:06,570
puppet code to go to production server

00:23:02,429 --> 00:23:10,620
requires all kinds of unfortunate

00:23:06,570 --> 00:23:13,200
approvals from people but once they are

00:23:10,620 --> 00:23:14,580
there then somebody can simply press

00:23:13,200 --> 00:23:17,520
this button so that nobody has to

00:23:14,580 --> 00:23:19,860
actually touch the production server

00:23:17,520 --> 00:23:24,050
and it becomes really nice if you couple

00:23:19,860 --> 00:23:26,670
this with for instance LDAP

00:23:24,050 --> 00:23:29,970
authentication for gitlab then you can

00:23:26,670 --> 00:23:36,600
really closely determine who can deploy

00:23:29,970 --> 00:23:39,900
to your production environments secret

00:23:36,600 --> 00:23:44,340
variables needs a little bit of work in

00:23:39,900 --> 00:23:46,620
my opinion but it's already there so

00:23:44,340 --> 00:23:55,050
sometimes you have things that you want

00:23:46,620 --> 00:23:58,620
to not show in your gait lab CI Yama

00:23:55,050 --> 00:24:02,730
file so for instance passwords to places

00:23:58,620 --> 00:24:05,160
or API keys etc etc you can have your

00:24:02,730 --> 00:24:06,929
whole project be open source but it's

00:24:05,160 --> 00:24:10,670
really did would be convenient to not

00:24:06,929 --> 00:24:15,540
have your AWS access secrets

00:24:10,670 --> 00:24:18,750
checked into your gait lab CI file for

00:24:15,540 --> 00:24:21,450
this there are secret variables there on

00:24:18,750 --> 00:24:23,670
the on the get lab project level so in

00:24:21,450 --> 00:24:27,059
your project you determine you define

00:24:23,670 --> 00:24:31,020
this variable has this value and then in

00:24:27,059 --> 00:24:35,400
your gait lab CI llamo you can just use

00:24:31,020 --> 00:24:36,809
them as a variable to that will

00:24:35,400 --> 00:24:39,330
automatically get the value from the

00:24:36,809 --> 00:24:42,809
from the secret variable from the

00:24:39,330 --> 00:24:46,020
project the downside is that currently

00:24:42,809 --> 00:24:48,030
they are not masked and will just show

00:24:46,020 --> 00:24:49,860
up in the build log so if you are using

00:24:48,030 --> 00:24:51,929
I don't know when it'll be ask

00:24:49,860 --> 00:24:54,420
credentials in your that are actually a

00:24:51,929 --> 00:24:58,950
secret variable in your project if

00:24:54,420 --> 00:25:02,940
something in your build prints those

00:24:58,950 --> 00:25:06,150
variables so to the log they will just

00:25:02,940 --> 00:25:07,800
show up so it's kind of a dangerous

00:25:06,150 --> 00:25:10,740
thing at the moment you have to be

00:25:07,800 --> 00:25:14,280
really careful about this there is a an

00:25:10,740 --> 00:25:17,490
issue open for this which is developing

00:25:14,280 --> 00:25:18,900
slowly but nicely and I'm sure that not

00:25:17,490 --> 00:25:21,660
too

00:25:18,900 --> 00:25:23,490
long in the future we will have a

00:25:21,660 --> 00:25:27,150
solution for this we're automatically

00:25:23,490 --> 00:25:35,390
the build log will not contain and these

00:25:27,150 --> 00:25:39,000
things to go a little bit more advanced

00:25:35,390 --> 00:25:41,550
you'll fairly quickly probably run into

00:25:39,000 --> 00:25:44,960
a place where you say hey but I want

00:25:41,550 --> 00:25:49,290
access to this private repository and

00:25:44,960 --> 00:25:51,540
the to get the docker runner or the

00:25:49,290 --> 00:25:54,210
runner the gillip CI runner does not

00:25:51,540 --> 00:25:58,170
have special privileges to access your

00:25:54,210 --> 00:26:03,780
gait lab instance it only has the

00:25:58,170 --> 00:26:07,170
specific commits that you are testing at

00:26:03,780 --> 00:26:11,460
that moment so if you want to do things

00:26:07,170 --> 00:26:13,320
with in this case SSH for instance

00:26:11,460 --> 00:26:17,310
private repositories then you'll have to

00:26:13,320 --> 00:26:20,720
get a bit creative to be able to to get

00:26:17,310 --> 00:26:24,080
that working how does it work

00:26:20,720 --> 00:26:29,250
so first you create a new message keeper

00:26:24,080 --> 00:26:34,100
and at the private key as a secret

00:26:29,250 --> 00:26:39,830
variable inside the the project the the

00:26:34,100 --> 00:26:42,450
public key and you will how to say that

00:26:39,830 --> 00:26:44,460
put it here where are you

00:26:42,450 --> 00:26:47,190
and then in a before script before the

00:26:44,460 --> 00:26:48,990
job so we have a very simple test job

00:26:47,190 --> 00:26:51,330
here that this SSH is to get at gitlab

00:26:48,990 --> 00:26:54,360
dot-com and it does it get clone just

00:26:51,330 --> 00:26:57,810
simply to show how it works it does it

00:26:54,360 --> 00:26:59,220
get clone of a private repository so the

00:26:57,810 --> 00:27:00,510
only thing you need to do in your before

00:26:59,220 --> 00:27:02,490
script is make sure that whatever

00:27:00,510 --> 00:27:06,090
environment you're running in actually

00:27:02,490 --> 00:27:12,000
has SSH agent installed and has the

00:27:06,090 --> 00:27:15,450
private key how to say that creates the

00:27:12,000 --> 00:27:16,680
private key on the on them on the build

00:27:15,450 --> 00:27:19,740
environment that you're running at that

00:27:16,680 --> 00:27:21,090
moment so we just in this case we're

00:27:19,740 --> 00:27:24,150
gonna add get update and I've got

00:27:21,090 --> 00:27:26,310
install of open SSH client we SSH add

00:27:24,150 --> 00:27:30,240
the private key see this is the dollar

00:27:26,310 --> 00:27:32,490
SSH private key is the reference to the

00:27:30,240 --> 00:27:39,480
secret variable that lives in the

00:27:32,490 --> 00:27:42,620
object-level we created ssh directory we

00:27:39,480 --> 00:27:45,750
said hole strict host key checking off

00:27:42,620 --> 00:27:48,809
in the SSH config file this is all

00:27:45,750 --> 00:27:52,410
mumbo-jumbo that just boils down to get

00:27:48,809 --> 00:27:55,230
this environment ready to to do a check

00:27:52,410 --> 00:27:58,140
out of private repository and then here

00:27:55,230 --> 00:28:00,210
you can actually do the gate clone with

00:27:58,140 --> 00:28:02,160
a private repository the nice thing is

00:28:00,210 --> 00:28:08,130
that this will be destroyed the moment

00:28:02,160 --> 00:28:09,780
after the build is done however you have

00:28:08,130 --> 00:28:12,210
to be careful to not somewhere

00:28:09,780 --> 00:28:14,790
accidentally print this private key to

00:28:12,210 --> 00:28:17,220
your build log because then your private

00:28:14,790 --> 00:28:20,250
key is there especially if you're doing

00:28:17,220 --> 00:28:23,970
open source projects this becomes a bit

00:28:20,250 --> 00:28:25,620
more of a challenge because you want to

00:28:23,970 --> 00:28:28,470
make sure that nobody ever accidentally

00:28:25,620 --> 00:28:35,490
does something in your in your build log

00:28:28,470 --> 00:28:38,820
that prints that key so as for the use

00:28:35,490 --> 00:28:43,850
case of this so one is to check out

00:28:38,820 --> 00:28:47,610
private repositories the other one is to

00:28:43,850 --> 00:28:50,070
to deploy to production servers or any

00:28:47,610 --> 00:28:54,240
kind of server that is not in the same

00:28:50,070 --> 00:28:59,429
that's not easily accessible so if you

00:28:54,240 --> 00:29:02,429
have a deploy job like here for instance

00:28:59,429 --> 00:29:06,570
in this deploy job you could have here

00:29:02,429 --> 00:29:09,210
some some commands that actually SSH

00:29:06,570 --> 00:29:14,070
into your production machine and run a

00:29:09,210 --> 00:29:16,470
command there or run a command over SSH

00:29:14,070 --> 00:29:21,929
on your production and instance whatever

00:29:16,470 --> 00:29:23,580
you you prefer either way this looks a

00:29:21,929 --> 00:29:25,559
bit complicated but it's a really a one

00:29:23,580 --> 00:29:27,330
one-time thing and it's fairly well

00:29:25,559 --> 00:29:30,630
documented what you need to have there

00:29:27,330 --> 00:29:34,910
and once you do that it becomes very

00:29:30,630 --> 00:29:41,940
easy to do secure communication with

00:29:34,910 --> 00:29:50,500
different places is that clear

00:29:41,940 --> 00:29:52,600
everybody awake one of the last things I

00:29:50,500 --> 00:29:54,430
want to show is the the yellow anchors

00:29:52,600 --> 00:29:57,400
this is not actually a good lab see I

00:29:54,430 --> 00:30:03,070
feature this is some deep dark corner of

00:29:57,400 --> 00:30:05,050
Gamal that allows this stuff we don't

00:30:03,070 --> 00:30:11,230
actually use it because I find it to be

00:30:05,050 --> 00:30:15,460
a fairly how to say that complicated way

00:30:11,230 --> 00:30:16,300
of accomplishing things but depending on

00:30:15,460 --> 00:30:18,430
what you're doing and how much

00:30:16,300 --> 00:30:19,990
duplication of stuff you have in your

00:30:18,430 --> 00:30:23,890
get lab see I file this might become

00:30:19,990 --> 00:30:26,350
useful so this stuff here on the left is

00:30:23,890 --> 00:30:28,210
equal to this stuff on the right and

00:30:26,350 --> 00:30:29,350
this is purely on a llamÃ³ level so good

00:30:28,210 --> 00:30:31,210
lap see I doesn't really have anything

00:30:29,350 --> 00:30:32,830
to do with this it's just a trick that

00:30:31,210 --> 00:30:37,960
you can use to have some deduplication

00:30:32,830 --> 00:30:41,040
in your in your gait lab see I file so

00:30:37,960 --> 00:30:44,800
to run through it real quickly so we

00:30:41,040 --> 00:30:47,440
define this this hidden key called job

00:30:44,800 --> 00:30:49,540
template and then we assign all of these

00:30:47,440 --> 00:30:53,410
things to it and then everywhere where

00:30:49,540 --> 00:30:55,570
we use it we just these are less than

00:30:53,410 --> 00:30:59,530
signs they are actually merging and this

00:30:55,570 --> 00:31:03,340
is the the job definition that refers to

00:30:59,530 --> 00:31:08,590
this job definition and it gets merged

00:31:03,340 --> 00:31:11,920
into this test test one job so what we

00:31:08,590 --> 00:31:13,720
see is that this stuff is equal for job

00:31:11,920 --> 00:31:17,340
one and job two

00:31:13,720 --> 00:31:20,710
so we might as well extract it here so

00:31:17,340 --> 00:31:25,180
this actually expands on a llamÃ³ level

00:31:20,710 --> 00:31:30,670
two to this where we have two jobs one

00:31:25,180 --> 00:31:32,740
called test one which uses ruby two one

00:31:30,670 --> 00:31:34,990
and Postgres and read this and you see

00:31:32,740 --> 00:31:37,060
the say the exact same thing here so you

00:31:34,990 --> 00:31:40,420
could just as well use this or actually

00:31:37,060 --> 00:31:43,150
this but this has the deduplication

00:31:40,420 --> 00:31:45,640
especially if this becomes if n becomes

00:31:43,150 --> 00:31:47,770
larger than two that becomes more useful

00:31:45,640 --> 00:31:52,659
to have that that kind of

00:31:47,770 --> 00:31:55,899
deduplication use it with care because

00:31:52,659 --> 00:31:57,549
it has a tendency to get really rough

00:31:55,899 --> 00:31:59,200
really quickly

00:31:57,549 --> 00:32:04,360
we've played around with it and then

00:31:59,200 --> 00:32:04,690
decided not to not to use it that's kind

00:32:04,360 --> 00:32:07,090
of it

00:32:04,690 --> 00:32:10,299
I was going to do a demo but I was smart

00:32:07,090 --> 00:32:13,149
enough to buy a new MacBook Pro 2016

00:32:10,299 --> 00:32:15,370
kind of thing and it has use BC only so

00:32:13,149 --> 00:32:18,520
I thought ok I'll buy every connector

00:32:15,370 --> 00:32:21,760
Under the Sun except for VGA because

00:32:18,520 --> 00:32:25,350
that's kind of a 1996 thing and of

00:32:21,760 --> 00:32:31,480
course Fossum runs everything on VGA so

00:32:25,350 --> 00:32:34,299
I'm graciously borrowing Tyler's laptop

00:32:31,480 --> 00:32:38,080
and therefore demoing is going to be a

00:32:34,299 --> 00:32:38,590
little bit tricky however are there any

00:32:38,080 --> 00:32:44,429
questions

00:32:38,590 --> 00:32:44,429
Oh a bunch of questions

00:32:58,289 --> 00:33:02,850
sorry coming in

00:33:11,510 --> 00:33:17,790
so the question is so that the the

00:33:15,620 --> 00:33:20,520
imagine that you have jobs that are not

00:33:17,790 --> 00:33:21,990
necessarily pass or fail and but do you

00:33:20,520 --> 00:33:25,200
have some kind of metric that you want

00:33:21,990 --> 00:33:28,560
to use not directly that I am aware of

00:33:25,200 --> 00:33:30,750
but there is for instance for code

00:33:28,560 --> 00:33:33,290
coverage which is one of the use cases I

00:33:30,750 --> 00:33:37,620
could imagine this a you'd want this for

00:33:33,290 --> 00:33:40,980
there is a I would almost call the hack

00:33:37,620 --> 00:33:44,490
that allows you to define a regular

00:33:40,980 --> 00:33:47,610
expression on the get lab level that

00:33:44,490 --> 00:33:49,760
will be searched in the build log for

00:33:47,610 --> 00:33:54,090
the output of the code coverage

00:33:49,760 --> 00:33:56,580
percentage but other than that right now

00:33:54,090 --> 00:33:58,980
it's a binary thing I'm also looking at

00:33:56,580 --> 00:34:00,800
our gate lab friend over there and so if

00:33:58,980 --> 00:34:02,910
I'm incorrect it's something you have to

00:34:00,800 --> 00:34:06,630
tell me that I mean correct but I think

00:34:02,910 --> 00:34:09,650
that's the way it is right yeah and

00:34:06,630 --> 00:34:09,650
there are more questions yeah

00:34:26,650 --> 00:34:46,310
so the question is logged with the G or

00:34:39,860 --> 00:34:49,100
log luck with the CK so the question is

00:34:46,310 --> 00:34:51,890
that can can get lepsy I lock other

00:34:49,100 --> 00:34:54,710
resources than then the runner I'm not

00:34:51,890 --> 00:34:56,780
aware of it so the you can do this in

00:34:54,710 --> 00:34:59,780
scripts if you can find a creative way

00:34:56,780 --> 00:35:03,650
to do that but I'm not aware of it being

00:34:59,780 --> 00:35:05,950
able to do other external things at the

00:35:03,650 --> 00:35:05,950
moment

00:35:18,340 --> 00:35:25,550
so the artifacts how are they kept so

00:35:22,460 --> 00:35:28,010
you refer to them so by default they're

00:35:25,550 --> 00:35:29,990
available within the same build of the

00:35:28,010 --> 00:35:33,860
pipeline but you can make some changes

00:35:29,990 --> 00:35:36,110
to that by having a de keyed with which

00:35:33,860 --> 00:35:38,390
they are stored and you can change that

00:35:36,110 --> 00:35:39,920
so that you can use them across builds

00:35:38,390 --> 00:35:41,300
as well I haven't personally played with

00:35:39,920 --> 00:35:43,490
that so I cannot tell you the details

00:35:41,300 --> 00:35:55,700
but I have seen that that is indeed

00:35:43,490 --> 00:35:58,130
possible yeah so you have to the

00:35:55,700 --> 00:36:02,690
question is do you need to update them

00:35:58,130 --> 00:36:04,790
so what we do to do because this comes

00:36:02,690 --> 00:36:08,030
actually straight from an actual CID

00:36:04,790 --> 00:36:09,740
that we are using so what we're doing is

00:36:08,030 --> 00:36:12,230
here we do a bundle install - -

00:36:09,740 --> 00:36:14,600
deployment which stores everything in

00:36:12,230 --> 00:36:17,170
the vendor subdirectory and then here we

00:36:14,600 --> 00:36:20,360
do a bundle install - - deployment again

00:36:17,170 --> 00:36:22,700
it might have changed its super unlucky

00:36:20,360 --> 00:36:23,750
for our use case at the moment but this

00:36:22,700 --> 00:36:25,340
is how you would do it if you have a

00:36:23,750 --> 00:36:27,890
longer cache time or you want to use

00:36:25,340 --> 00:36:30,230
them across builds and then you you can

00:36:27,890 --> 00:36:32,630
do a construction like this to make sure

00:36:30,230 --> 00:36:34,280
that hey nothing should have changed but

00:36:32,630 --> 00:36:42,200
please go and check that that is

00:36:34,280 --> 00:36:44,780
actually the case can you use Dockers

00:36:42,200 --> 00:36:48,880
layered file system for artifacts to be

00:36:44,780 --> 00:36:48,880
honest I have no answer to that question

00:36:49,030 --> 00:36:52,900
you'd have to look at I was sorry

00:37:07,279 --> 00:37:10,699
sorry I didn't get your second question

00:37:09,079 --> 00:37:12,229
let me ask let me answer the first

00:37:10,699 --> 00:37:14,390
question first and so the first question

00:37:12,229 --> 00:37:16,729
was where did the logs go

00:37:14,390 --> 00:37:18,709
the logs go back to gate lab CI itself

00:37:16,729 --> 00:37:21,109
so they're not stored on the runner so

00:37:18,709 --> 00:37:23,839
you you can access your logs as far back

00:37:21,109 --> 00:37:26,179
as your as your history of pipeline goes

00:37:23,839 --> 00:37:38,419
so you can always look back at your logs

00:37:26,179 --> 00:37:40,459
in your second question code review yeah

00:37:38,419 --> 00:37:45,109
so the question is can you integrate

00:37:40,459 --> 00:37:46,849
code review theoretically you would

00:37:45,109 --> 00:37:48,259
solve that problem on the get lab side

00:37:46,849 --> 00:37:52,689
and not necessarily on the gate live CI

00:37:48,259 --> 00:37:55,789
side so what we do for instance is that

00:37:52,689 --> 00:37:58,579
somebody creates code does a merge

00:37:55,789 --> 00:38:02,419
request with the with the upstream and

00:37:58,579 --> 00:38:04,009
then that needs to be reviewed before

00:38:02,419 --> 00:38:06,049
the merge request gets merged and then

00:38:04,009 --> 00:38:08,979
because then you also have the ability

00:38:06,049 --> 00:38:11,419
in get lab to do to use commenting and

00:38:08,979 --> 00:38:15,049
push further commits to the to the build

00:38:11,419 --> 00:38:17,539
so the the the testing is what is done

00:38:15,049 --> 00:38:19,489
on the on the gate Lab CI side and the

00:38:17,539 --> 00:38:26,769
the human aspect of the code review that

00:38:19,489 --> 00:38:28,909
happens on the on the gate Lab side so

00:38:26,769 --> 00:38:29,869
the question is can you pass a docker

00:38:28,909 --> 00:38:32,269
file instead of an image

00:38:29,869 --> 00:38:34,489
you cannot theoretically directly pass

00:38:32,269 --> 00:38:36,380
the docker file but since one of the

00:38:34,489 --> 00:38:38,479
last couple of versions there's an

00:38:36,380 --> 00:38:41,900
internal docker registry built in to get

00:38:38,479 --> 00:38:44,599
labs see a CI itself so you can actually

00:38:41,900 --> 00:38:47,630
build your own doctor instances and push

00:38:44,599 --> 00:38:49,130
them to to get lab CI and then refer to

00:38:47,630 --> 00:38:50,630
them here so they don't ever need to see

00:38:49,130 --> 00:38:54,039
the outside world they just all

00:38:50,630 --> 00:38:54,039
everything lives in github

00:38:59,690 --> 00:39:05,610
yeah that's come and talk to me after

00:39:03,840 --> 00:39:07,160
the session because that's exactly one

00:39:05,610 --> 00:39:10,620
of the things that I wanted to look into

00:39:07,160 --> 00:39:13,170
and some time soon so you can actually

00:39:10,620 --> 00:39:14,900
build a docker image from a docker image

00:39:13,170 --> 00:39:20,480
and then use that in the rest of your

00:39:14,900 --> 00:39:20,480
pipeline which is quite a nice solution

00:39:42,880 --> 00:39:47,209
so the question is what if you have

00:39:45,019 --> 00:39:51,019
multiple source repositories that depend

00:39:47,209 --> 00:39:54,319
on each other and you want to do CI on a

00:39:51,019 --> 00:39:55,689
combination of these deployments so this

00:39:54,319 --> 00:40:00,079
has been a problem for us as well

00:39:55,689 --> 00:40:03,139
specifically we had two repositories one

00:40:00,079 --> 00:40:05,929
is a puppet control repository and the

00:40:03,139 --> 00:40:07,999
other one is a puppet module the gitlab

00:40:05,929 --> 00:40:11,089
CI whenever you push to the puppet

00:40:07,999 --> 00:40:12,679
module so the control repository is kind

00:40:11,089 --> 00:40:14,329
of what sits at the top and it checks

00:40:12,679 --> 00:40:16,159
out a bunch of modules including this

00:40:14,329 --> 00:40:19,219
one that we were making changes to the

00:40:16,159 --> 00:40:20,929
module had its own CI process and the

00:40:19,219 --> 00:40:23,809
control repository had its own CI

00:40:20,929 --> 00:40:26,329
process what happened is that if you

00:40:23,809 --> 00:40:27,739
push nearly simultaneous because

00:40:26,329 --> 00:40:30,009
sometimes it happens you made a bunch of

00:40:27,739 --> 00:40:36,199
changes and it touches both of those

00:40:30,009 --> 00:40:38,119
repositories so we would push to one

00:40:36,199 --> 00:40:40,339
repository which has an automatic deploy

00:40:38,119 --> 00:40:41,599
to staging environment or both of them

00:40:40,339 --> 00:40:42,829
have an automatic deploy to staging

00:40:41,599 --> 00:40:44,630
environment if everything is green you

00:40:42,829 --> 00:40:47,689
push to them simultaneously this

00:40:44,630 --> 00:40:50,449
pipeline completes fine and pushes

00:40:47,689 --> 00:40:52,579
through to your staging environment this

00:40:50,449 --> 00:40:57,649
pipeline does not complete complete fine

00:40:52,579 --> 00:40:59,599
and actually breaks to the code base so

00:40:57,649 --> 00:41:01,849
as this one is deploying to your staging

00:40:59,599 --> 00:41:03,349
environment you are now deploying broken

00:41:01,849 --> 00:41:06,289
code because it actually checks out the

00:41:03,349 --> 00:41:08,829
the other job as well and we've had some

00:41:06,289 --> 00:41:11,449
let's say unfortunate side effects I

00:41:08,829 --> 00:41:15,639
mean we didn't just we didn't actually

00:41:11,449 --> 00:41:15,639
drop any production databases so we're

00:41:18,519 --> 00:41:24,529
sorry I couldn't resist making a joke at

00:41:21,469 --> 00:41:27,939
least once I do command you if you

00:41:24,529 --> 00:41:31,519
haven't looked into it so get lab

00:41:27,939 --> 00:41:33,079
accidentally dropped a or destroyed a

00:41:31,519 --> 00:41:36,979
production database this week and had a

00:41:33,079 --> 00:41:38,959
massive outage firmness but if you want

00:41:36,979 --> 00:41:42,829
to see how you want to do operations the

00:41:38,959 --> 00:41:44,449
it is absolutely exemplary how they were

00:41:42,829 --> 00:41:46,519
public about this there's a Google Doc

00:41:44,449 --> 00:41:48,450
that you could openly access that has

00:41:46,519 --> 00:41:51,240
older

00:41:48,450 --> 00:41:54,090
the details in it what happened who

00:41:51,240 --> 00:41:55,830
fixed what who went where what are the

00:41:54,090 --> 00:41:57,810
consequences how are we learning from

00:41:55,830 --> 00:42:00,660
this at some point there was even a

00:41:57,810 --> 00:42:05,120
YouTube live feed where you could just

00:42:00,660 --> 00:42:09,600
watch engineers fix get labs production

00:42:05,120 --> 00:42:14,850
environment just I'm really impressed by

00:42:09,600 --> 00:42:16,650
that and really it's an unfortunate turn

00:42:14,850 --> 00:42:17,610
of events where somebody made a mistake

00:42:16,650 --> 00:42:19,220
and then it turned out that all the

00:42:17,610 --> 00:42:21,840
fail-safes didn't really actually work

00:42:19,220 --> 00:42:23,700
I've been there and it's not a great

00:42:21,840 --> 00:42:27,990
place it doesn't make you a bad engineer

00:42:23,700 --> 00:42:30,630
just it's that one unfortunate one in a

00:42:27,990 --> 00:42:32,730
gazillion cases that it happens to

00:42:30,630 --> 00:42:35,630
everyone at some point anyway I digress

00:42:32,730 --> 00:42:35,630
any more questions

00:42:40,590 --> 00:42:45,190
do you have any notifications if a job

00:42:43,330 --> 00:42:45,970
succeeds or fails yes so first of all

00:42:45,190 --> 00:42:47,470
there's email

00:42:45,970 --> 00:42:49,630
I think it's enabled by default if you

00:42:47,470 --> 00:42:51,130
enable the the email said SMTP settings

00:42:49,630 --> 00:42:53,380
and get lapped and it automatically

00:42:51,130 --> 00:42:57,670
starts emailing you and when jobs when

00:42:53,380 --> 00:43:01,990
pipelines fail or succeed secondly

00:42:57,670 --> 00:43:03,460
gitlab also comes packaged with a an

00:43:01,990 --> 00:43:05,350
open-source slack alternative called

00:43:03,460 --> 00:43:07,510
matter most if you haven't looked into

00:43:05,350 --> 00:43:10,590
it do look into it because it's really

00:43:07,510 --> 00:43:13,660
really a great communication platform

00:43:10,590 --> 00:43:17,890
fully open source it is already deployed

00:43:13,660 --> 00:43:20,040
if you have gitlab seee installed with

00:43:17,890 --> 00:43:22,150
the omnibus installer it's already there

00:43:20,040 --> 00:43:25,420
literally one line and you can start

00:43:22,150 --> 00:43:28,810
using it and get lepsy I will post

00:43:25,420 --> 00:43:32,770
notifications to matter most channels if

00:43:28,810 --> 00:43:34,180
you wanted to you can also do wet web

00:43:32,770 --> 00:43:36,750
hooks and a whole bunch of other stuff

00:43:34,180 --> 00:43:39,760
it's all good lab level and stuff

00:43:36,750 --> 00:43:42,690
somebody in the back has a really urgent

00:43:39,760 --> 00:43:42,690
question

00:44:02,680 --> 00:44:07,940
so their plans

00:44:06,170 --> 00:44:10,849
I don't know anything about it I have no

00:44:07,940 --> 00:44:12,349
official ties to get lab other than we

00:44:10,849 --> 00:44:14,660
buy some licenses from them

00:44:12,349 --> 00:44:16,519
but so the question is a build matrix is

00:44:14,660 --> 00:44:18,140
where you say hey what I want to run all

00:44:16,519 --> 00:44:20,930
versions of this against all versions of

00:44:18,140 --> 00:44:32,539
that I can honestly say that I don't

00:44:20,930 --> 00:44:35,269
know if that currently exists yeah yeah

00:44:32,539 --> 00:44:37,359
so then you get into dirty ugly mo for

00:44:35,269 --> 00:44:37,359
now

00:44:38,950 --> 00:44:42,050
[Music]

00:44:52,740 --> 00:44:55,820

YouTube URL: https://www.youtube.com/watch?v=yYNbBWD72XA


