Title: Kubernetes on the road to GIFEE
Publication date: 2018-03-06
Playlist: FOSDEM 2017
Description: 
	by Brandon Philips

At: FOSDEM 2017

Kubernetes enables teams to focus on developing innovative applications bysimplifying deployment, scaling, and configuration through a simple yetflexible API. The system can support all types of applications: web apps,databases, distributed systems, or even VMs; and can do it on any cloud orbare-metal platform. Our vision is that every organization has access to thisinfrastructure technology, a mission we call #GIFEE: Google Infrastructure ForEveryone.

But, as Kubernetesâ€™s reach grows, what do real production applications looklike? Where does Kubernetes need to go to continue supporting an ever-widerrange?

Join Brandon Philips for a look at the status of Kubernetes and at the roadmapfor its future, including automated Kubernetes upgrades, management of complexapplications, integration with cloud providers, and multi-cluster federation.


Room: Janson
Scheduled start: 2017-02-04 09:00:00
Captions: 
	00:00:00,000 --> 00:00:02,030
I

00:00:19,070 --> 00:00:26,700
test one to test test test one to test

00:00:23,700 --> 00:00:29,189
test a little my name is Brandon

00:00:26,700 --> 00:00:35,580
Phillips I'm a little teapot short and

00:00:29,189 --> 00:00:38,300
stout I'm a little teapot Brandon

00:00:35,580 --> 00:00:40,730
Phillips test one two

00:00:38,300 --> 00:00:44,040
test one two

00:00:40,730 --> 00:00:55,130
hello I am Brandon Phillips testing 1 2

00:00:44,040 --> 00:00:55,130
s 1 2 to s 1 - 2 - 1 - hello

00:00:58,809 --> 00:01:03,870
sorry I didn't use one of these district

00:01:04,910 --> 00:01:19,530
yeah I turned it off you I turned it off

00:01:09,570 --> 00:01:23,160
hello test one two hello it's good okay

00:01:19,530 --> 00:01:25,110
all right we're gonna get started there

00:01:23,160 --> 00:01:27,800
are people outside this room that must

00:01:25,110 --> 00:01:28,950
have their livestream so we will begin

00:01:27,800 --> 00:01:31,290
hello

00:01:28,950 --> 00:01:33,650
I am Brandon Phillips I am the CTO and

00:01:31,290 --> 00:01:36,229
co-founder of a company called core OS

00:01:33,650 --> 00:01:38,040
we build a lot of open source software

00:01:36,229 --> 00:01:40,080
particularly around server

00:01:38,040 --> 00:01:43,350
infrastructure and I'm gonna be talking

00:01:40,080 --> 00:01:46,500
through kind of the motivations behind a

00:01:43,350 --> 00:01:48,210
lot of what we're building and what

00:01:46,500 --> 00:01:49,320
we've learned over the last few years

00:01:48,210 --> 00:01:53,250
about building this sort of

00:01:49,320 --> 00:01:54,960
infrastructure so oh and we are supposed

00:01:53,250 --> 00:01:56,760
to have a nice little gift for you okay

00:01:54,960 --> 00:01:58,220
excellent you and would welcome you all

00:01:56,760 --> 00:02:01,519
to give him a round of applause

00:01:58,220 --> 00:02:01,519
[Applause]

00:02:04,150 --> 00:02:10,340
you may just watch me eat biscuits for

00:02:06,800 --> 00:02:12,200
the next 50 minutes so what I'm going to

00:02:10,340 --> 00:02:13,760
do is talk through sort of some of our

00:02:12,200 --> 00:02:16,459
motivations on building the stuff that

00:02:13,760 --> 00:02:20,350
we've been building and give you kind of

00:02:16,459 --> 00:02:23,840
a hint at where all this stuff is going

00:02:20,350 --> 00:02:28,010
all right so there are 3.5 billion

00:02:23,840 --> 00:02:30,110
Internet users today and this is a

00:02:28,010 --> 00:02:32,930
pretty overwhelming number it's a little

00:02:30,110 --> 00:02:34,910
less than a majority of the world about

00:02:32,930 --> 00:02:37,459
like 48 percent of the world's

00:02:34,910 --> 00:02:40,610
population is able to get access to the

00:02:37,459 --> 00:02:42,860
Internet and there are about 29 million

00:02:40,610 --> 00:02:46,130
people in the world that are in software

00:02:42,860 --> 00:02:50,989
engineering or the IT industry that's us

00:02:46,130 --> 00:02:54,340
and so 3.5 billion versus 29 million

00:02:50,989 --> 00:02:56,900
means that we are extremely outnumbered

00:02:54,340 --> 00:03:00,500
there are a lot of people out there who

00:02:56,900 --> 00:03:04,190
do not speak the language that we speak

00:03:00,500 --> 00:03:05,959
of technology and software what they

00:03:04,190 --> 00:03:07,850
care about is they care about their

00:03:05,959 --> 00:03:11,540
communications they care about their

00:03:07,850 --> 00:03:13,190
commerce and largely it's our

00:03:11,540 --> 00:03:17,269
responsibility to take care of those

00:03:13,190 --> 00:03:19,540
things for them and it's not like this

00:03:17,269 --> 00:03:22,640
problem of us being outnumbered as

00:03:19,540 --> 00:03:26,860
people in the computer industry is going

00:03:22,640 --> 00:03:31,820
to improve over time last year 238

00:03:26,860 --> 00:03:34,130
million new people came online all right

00:03:31,820 --> 00:03:36,140
so what are these people doing largely

00:03:34,130 --> 00:03:39,440
what they're doing is they are taking

00:03:36,140 --> 00:03:42,799
their data their billions and billions

00:03:39,440 --> 00:03:44,690
of phones and laptops in the world and

00:03:42,799 --> 00:03:47,420
they're taking that data and they're

00:03:44,690 --> 00:03:50,140
putting onto servers I know a lot of us

00:03:47,420 --> 00:03:52,489
as people in the technology industry

00:03:50,140 --> 00:03:55,310
don't feel that the client-server model

00:03:52,489 --> 00:03:57,590
is necessarily fair for for people's

00:03:55,310 --> 00:04:00,230
rights for the way that people should

00:03:57,590 --> 00:04:02,780
have freedoms and freedom from tracking

00:04:00,230 --> 00:04:05,900
but it is the dominant paradigm of the

00:04:02,780 --> 00:04:08,329
world the reason that we have companies

00:04:05,900 --> 00:04:10,010
like Google and Facebook and Twitter is

00:04:08,329 --> 00:04:13,699
because this model works extremely well

00:04:10,010 --> 00:04:14,900
for the consumer the 3.5 billion users

00:04:13,699 --> 00:04:17,389
out there

00:04:14,900 --> 00:04:19,130
and so these people like I said are

00:04:17,389 --> 00:04:21,590
putting their documents commerce and

00:04:19,130 --> 00:04:24,020
communications into these servers and

00:04:21,590 --> 00:04:25,699
it's our responsibility to take care of

00:04:24,020 --> 00:04:31,639
that data as responsibly as we possibly

00:04:25,699 --> 00:04:35,180
can so best estimates is there's on the

00:04:31,639 --> 00:04:38,030
order of a hundred million servers in

00:04:35,180 --> 00:04:39,680
the world pieces of hardware connected

00:04:38,030 --> 00:04:42,760
the internet that are taking in all this

00:04:39,680 --> 00:04:44,750
data storing it securing it hopefully

00:04:42,760 --> 00:04:50,060
giving it back to people on their

00:04:44,750 --> 00:04:52,760
request which means that with 29 million

00:04:50,060 --> 00:04:54,590
of us 100 million servers it's about

00:04:52,760 --> 00:04:57,860
three per person in the software and IT

00:04:54,590 --> 00:05:01,940
industry how many people here maintain a

00:04:57,860 --> 00:05:03,680
server themselves all right how many

00:05:01,940 --> 00:05:07,970
people in here maintain over three

00:05:03,680 --> 00:05:11,570
servers themselves all right and over a

00:05:07,970 --> 00:05:13,520
hundred servers themselves all right

00:05:11,570 --> 00:05:15,289
vanishingly small I'm gonna guess that

00:05:13,520 --> 00:05:15,949
these people work at an Internet giant

00:05:15,289 --> 00:05:18,289
of some sort

00:05:15,949 --> 00:05:20,450
the Internet giants are the people like

00:05:18,289 --> 00:05:22,729
Google the people like Twitter that

00:05:20,450 --> 00:05:25,760
people like Amazon the people who

00:05:22,729 --> 00:05:27,440
largely their businesses have one way or

00:05:25,760 --> 00:05:29,720
the other being transformed by

00:05:27,440 --> 00:05:31,910
technology we're seeing this all over

00:05:29,720 --> 00:05:34,669
the place your neighborhood grocery

00:05:31,910 --> 00:05:37,460
store is now having to compete with with

00:05:34,669 --> 00:05:40,720
every single online retailer who wants

00:05:37,460 --> 00:05:44,539
to deliver you things via bicycle via

00:05:40,720 --> 00:05:47,300
van by a guy walking your groceries from

00:05:44,539 --> 00:05:48,860
the grocery store to your house but

00:05:47,300 --> 00:05:51,680
every single company in the world one

00:05:48,860 --> 00:05:56,510
way or the other is having to compete in

00:05:51,680 --> 00:05:59,830
this way so how do these companies that

00:05:56,510 --> 00:06:05,419
are maintaining a hundred or more

00:05:59,830 --> 00:06:07,190
servers per person doing it we saw that

00:06:05,419 --> 00:06:08,479
when everyone raised their hand in here

00:06:07,190 --> 00:06:11,030
we saw the majority of people were

00:06:08,479 --> 00:06:12,650
comfortable you know managing under a

00:06:11,030 --> 00:06:15,380
hundred servers and then they got

00:06:12,650 --> 00:06:18,130
vanishingly small as he started to talk

00:06:15,380 --> 00:06:21,229
about managing over a hundred servers

00:06:18,130 --> 00:06:23,840
and largely there's been a lot of best

00:06:21,229 --> 00:06:26,360
practices and ideas developed over the

00:06:23,840 --> 00:06:27,560
years at a lot of these companies this

00:06:26,360 --> 00:06:28,790
is a book I

00:06:27,560 --> 00:06:30,260
I didn't know that O'Reilly was a

00:06:28,790 --> 00:06:34,760
sponsor but you should purchase this

00:06:30,260 --> 00:06:38,810
book from our sponsor O'Reilly also the

00:06:34,760 --> 00:06:40,100
book is under Creative Commons too so if

00:06:38,810 --> 00:06:44,780
you don't want to support the sponsor

00:06:40,100 --> 00:06:48,410
you can do that as well but what what

00:06:44,780 --> 00:06:50,270
this what this book describes is the

00:06:48,410 --> 00:06:53,480
perspective of Google and Google's

00:06:50,270 --> 00:06:56,060
engineers they have a set of Engineers

00:06:53,480 --> 00:06:58,760
called site reliability engineers which

00:06:56,060 --> 00:07:01,450
are kind of a hybrid between software

00:06:58,760 --> 00:07:04,250
engineering and system administration

00:07:01,450 --> 00:07:05,780
where they spend some of their time on

00:07:04,250 --> 00:07:07,820
call but they spend a lot of their time

00:07:05,780 --> 00:07:11,090
thinking about how to better organize

00:07:07,820 --> 00:07:14,990
how to create better processes how to

00:07:11,090 --> 00:07:16,639
make the application more reliable for

00:07:14,990 --> 00:07:19,850
both the people who are building it and

00:07:16,639 --> 00:07:23,270
for the people who are using it and so

00:07:19,850 --> 00:07:26,630
in in this book it's about enabling

00:07:23,270 --> 00:07:28,729
teams to organize better to specialize

00:07:26,630 --> 00:07:31,669
so that people are able to focus on

00:07:28,729 --> 00:07:33,289
problems people work best when they have

00:07:31,669 --> 00:07:35,750
a handful of things that are responsible

00:07:33,289 --> 00:07:38,120
for improving instead of a massive

00:07:35,750 --> 00:07:39,890
overwhelming wall of everything is

00:07:38,120 --> 00:07:42,380
broken I think we've all been in that

00:07:39,890 --> 00:07:46,940
situation it's not very motivating when

00:07:42,380 --> 00:07:49,580
everything is broken and take risks if

00:07:46,940 --> 00:07:52,039
you have if you have people are focused

00:07:49,580 --> 00:07:53,750
on things and you're able to measure it

00:07:52,039 --> 00:07:57,229
and you're well-organized you're able to

00:07:53,750 --> 00:08:00,139
take calculated risks and largely they

00:07:57,229 --> 00:08:03,530
do this they're able to effectively ship

00:08:00,139 --> 00:08:05,330
software because they have a bunch of

00:08:03,530 --> 00:08:07,700
technologies that they've built as well

00:08:05,330 --> 00:08:11,560
it's not just people in process but also

00:08:07,700 --> 00:08:13,550
smarter technologies that enable this so

00:08:11,560 --> 00:08:15,410
those technologies that we're going to

00:08:13,550 --> 00:08:19,130
be talking through here our containers

00:08:15,410 --> 00:08:20,840
clustering and monitoring so who here is

00:08:19,130 --> 00:08:22,639
familiar with the concept of a container

00:08:20,840 --> 00:08:25,610
or docker anything like that

00:08:22,639 --> 00:08:28,340
great it's about half so I'll do a quick

00:08:25,610 --> 00:08:29,450
review and then we'll dive into some of

00:08:28,340 --> 00:08:32,599
the interesting things that have been

00:08:29,450 --> 00:08:34,099
built around kubernetes so containers

00:08:32,599 --> 00:08:36,890
are pretty straightforward if you aren't

00:08:34,099 --> 00:08:39,860
familiar with them it begins with you

00:08:36,890 --> 00:08:40,960
and you are software engineer so we'll

00:08:39,860 --> 00:08:43,180
go through a couple

00:08:40,960 --> 00:08:45,310
use a software engineer you take your

00:08:43,180 --> 00:08:47,770
source code you turn that source code

00:08:45,310 --> 00:08:49,720
into a container image a container image

00:08:47,770 --> 00:08:51,910
really is just a file system like a

00:08:49,720 --> 00:08:54,220
tarball with everything inside of it

00:08:51,910 --> 00:08:56,170
that is required to run your program so

00:08:54,220 --> 00:08:58,000
if it's java application at my avid jar

00:08:56,170 --> 00:09:01,450
there's a Python application it might

00:08:58,000 --> 00:09:04,420
have a Python file and then you give it

00:09:01,450 --> 00:09:07,060
a name so this name is how you'll be

00:09:04,420 --> 00:09:09,070
able to tell other people to download it

00:09:07,060 --> 00:09:11,950
it'll be the place that you upload it so

00:09:09,070 --> 00:09:15,010
think of something like github only this

00:09:11,950 --> 00:09:17,260
is for container images so you know in

00:09:15,010 --> 00:09:20,020
that chorus we have a thing called Kwai

00:09:17,260 --> 00:09:24,070
dot IO it's called Kwai cuz that's how

00:09:20,020 --> 00:09:26,770
we pronounce it a lot of people may

00:09:24,070 --> 00:09:28,150
pronounce it ki I'm sorry we we've

00:09:26,770 --> 00:09:29,770
looked it up in a dictionary and we

00:09:28,150 --> 00:09:34,000
didn't know how to pronounce now it's

00:09:29,770 --> 00:09:37,110
quite and so you you upload and download

00:09:34,000 --> 00:09:39,640
the containers from Kwai hopefully you

00:09:37,110 --> 00:09:41,380
find the digests maybe you take that

00:09:39,640 --> 00:09:44,770
digest and you create a signature and

00:09:41,380 --> 00:09:46,390
move the signature around as well all

00:09:44,770 --> 00:09:49,120
right so now you have this little piece

00:09:46,390 --> 00:09:51,490
of thing this little asset that you can

00:09:49,120 --> 00:09:53,320
move around and host on the internet

00:09:51,490 --> 00:09:55,390
somewhere and then you as an Operations

00:09:53,320 --> 00:09:58,180
engineer the person who actually wants

00:09:55,390 --> 00:09:58,810
to run the application your world looks

00:09:58,180 --> 00:10:00,820
like this

00:09:58,810 --> 00:10:02,500
you have your three servers I want to

00:10:00,820 --> 00:10:04,200
make it comfortable for everybody didn't

00:10:02,500 --> 00:10:07,690
want to have too many servers up there

00:10:04,200 --> 00:10:08,290
you have your three servers you say one

00:10:07,690 --> 00:10:10,810
way or the other

00:10:08,290 --> 00:10:14,860
I want those I want that container

00:10:10,810 --> 00:10:16,630
running on my three servers three three

00:10:14,860 --> 00:10:19,570
copies of the application show up maybe

00:10:16,630 --> 00:10:23,350
SSH tin and maybe you ran a fab file

00:10:19,570 --> 00:10:25,360
maybe use configuration management maybe

00:10:23,350 --> 00:10:27,970
you said I want to run this particular

00:10:25,360 --> 00:10:29,290
container on this other server maybe you

00:10:27,970 --> 00:10:32,380
want to run this other container on this

00:10:29,290 --> 00:10:33,670
other server a couple of times and so

00:10:32,380 --> 00:10:36,880
the neat thing is that you're able to

00:10:33,670 --> 00:10:38,260
deploy lots of little programs on top of

00:10:36,880 --> 00:10:39,580
the same servers and not really worry

00:10:38,260 --> 00:10:42,070
about the conflicting with each other

00:10:39,580 --> 00:10:43,750
not necessarily taking up the same ports

00:10:42,070 --> 00:10:47,140
you don't have to worry about packages

00:10:43,750 --> 00:10:49,510
installed etc so containers are really

00:10:47,140 --> 00:10:52,270
about application packaging and it

00:10:49,510 --> 00:10:54,870
allows you to kind of ship around App

00:10:52,270 --> 00:10:58,230
Store style pieces of

00:10:54,870 --> 00:11:02,769
all right so we have this source code

00:10:58,230 --> 00:11:04,509
and what we've done is we've we've

00:11:02,769 --> 00:11:07,870
transformed it into this container image

00:11:04,509 --> 00:11:09,459
so what what was actually the process

00:11:07,870 --> 00:11:10,600
that happened there what what happened

00:11:09,459 --> 00:11:13,180
to green source code to contain our

00:11:10,600 --> 00:11:14,980
Ridge so let's just run through a quick

00:11:13,180 --> 00:11:19,509
example I download this particular

00:11:14,980 --> 00:11:22,240
repository I tell every pause the

00:11:19,509 --> 00:11:23,620
tutorial this container image for me I'm

00:11:22,240 --> 00:11:27,180
gonna name it like this with this

00:11:23,620 --> 00:11:29,889
version number and then I push it off to

00:11:27,180 --> 00:11:31,629
the quite hosting service so it feels

00:11:29,889 --> 00:11:33,819
very similar if you're familiar with git

00:11:31,629 --> 00:11:36,490
or any sort of distributed version

00:11:33,819 --> 00:11:38,379
control system feels very similar only

00:11:36,490 --> 00:11:39,759
there's a build step in there and then

00:11:38,379 --> 00:11:41,589
what's happening behind the scene is

00:11:39,759 --> 00:11:44,470
that similar to a make file there's a

00:11:41,589 --> 00:11:46,720
little DSL that describes how to build

00:11:44,470 --> 00:11:50,709
the thing and then you can push it off

00:11:46,720 --> 00:11:52,629
after it's built alright so you end up

00:11:50,709 --> 00:11:54,490
with this little container image at the

00:11:52,629 --> 00:11:56,889
end of that process you've taken your

00:11:54,490 --> 00:11:59,139
source code and transformed it and then

00:11:56,889 --> 00:12:02,939
inside of this one because the program

00:11:59,139 --> 00:12:06,189
is written in go all we have is Lib C

00:12:02,939 --> 00:12:09,370
gives of some little reasons and then

00:12:06,189 --> 00:12:12,279
FTD which for the most part is

00:12:09,370 --> 00:12:16,240
statically compiled and then we push it

00:12:12,279 --> 00:12:18,040
off the claim and then you know similar

00:12:16,240 --> 00:12:20,439
to github or whatever you can look at it

00:12:18,040 --> 00:12:24,879
and see it and share it with friends and

00:12:20,439 --> 00:12:28,410
store it etc alright so the next bit is

00:12:24,879 --> 00:12:30,850
about actually running the container so

00:12:28,410 --> 00:12:34,300
how does that happen what is the process

00:12:30,850 --> 00:12:36,610
there so containers are just normal

00:12:34,300 --> 00:12:39,579
Linux processes that happen to live

00:12:36,610 --> 00:12:42,009
inside of their own file system so when

00:12:39,579 --> 00:12:45,639
I do something like this where I say run

00:12:42,009 --> 00:12:50,009
the container what happens is that a

00:12:45,639 --> 00:12:52,389
normal Linux process is created that is

00:12:50,009 --> 00:12:54,519
talking to the normal Linux interface

00:12:52,389 --> 00:12:55,899
really the main difference at the end of

00:12:54,519 --> 00:12:57,879
it is it lives in this thing called the

00:12:55,899 --> 00:13:00,009
namespace which isolates it from the

00:12:57,879 --> 00:13:03,490
rest of the system meaning that it has

00:13:00,009 --> 00:13:05,170
its own root filesystem and so it only

00:13:03,490 --> 00:13:06,180
sees the things that were in the

00:13:05,170 --> 00:13:10,080
container image

00:13:06,180 --> 00:13:11,660
that it was built-in okay so pretty

00:13:10,080 --> 00:13:14,670
straightforward not a lot has changed

00:13:11,660 --> 00:13:17,250
essentially just like you would hop get

00:13:14,670 --> 00:13:19,640
install something or young install or

00:13:17,250 --> 00:13:23,700
DNF or whatever they're calling it now

00:13:19,640 --> 00:13:25,260
the thing and putting it on a big shared

00:13:23,700 --> 00:13:28,470
file system you create all these little

00:13:25,260 --> 00:13:30,000
file systems and so what it allows you

00:13:28,470 --> 00:13:32,100
to do is abstract away the operating

00:13:30,000 --> 00:13:35,250
system from the application and this is

00:13:32,100 --> 00:13:37,320
really really powerful because who here

00:13:35,250 --> 00:13:40,100
likes to maintain really really large

00:13:37,320 --> 00:13:43,620
api's with sprawling in dependencies

00:13:40,100 --> 00:13:45,959
there's one guy in the back I just need

00:13:43,620 --> 00:13:49,170
to point that out so though nobody likes

00:13:45,959 --> 00:13:51,120
doing that engineers like engineers I

00:13:49,170 --> 00:13:52,320
feel like all want to maintain something

00:13:51,120 --> 00:13:54,120
that looks like Unix

00:13:52,320 --> 00:13:56,880
it's like I take some bytes I send some

00:13:54,120 --> 00:13:59,130
bytes I don't care that's that's my life

00:13:56,880 --> 00:14:00,959
I don't want to interpret them if I read

00:13:59,130 --> 00:14:04,440
I want to buffer them I don't want to do

00:14:00,959 --> 00:14:06,000
anything with them but the reality is is

00:14:04,440 --> 00:14:07,709
that our world is very complicated and

00:14:06,000 --> 00:14:10,170
we're asking these Linux distros to do

00:14:07,709 --> 00:14:12,270
something really hard when we're talking

00:14:10,170 --> 00:14:15,089
about server software where they have to

00:14:12,270 --> 00:14:16,770
maintain as the stability of our

00:14:15,089 --> 00:14:18,420
databases and our web servers and

00:14:16,770 --> 00:14:20,520
everything else and then at the same

00:14:18,420 --> 00:14:22,680
time we're asking them to make sure that

00:14:20,520 --> 00:14:25,290
all the latest security patches get

00:14:22,680 --> 00:14:27,029
applied as well and then also I want to

00:14:25,290 --> 00:14:29,760
make sure that the piece of software

00:14:27,029 --> 00:14:31,470
that I need is installed but it doesn't

00:14:29,760 --> 00:14:33,480
conflict with anything else so it

00:14:31,470 --> 00:14:35,370
absolutely must be Python 2 installed

00:14:33,480 --> 00:14:38,430
where it absolutely must be Python 3

00:14:35,370 --> 00:14:39,959
installed on the boss it's a lot of

00:14:38,430 --> 00:14:43,890
interdependencies and I think we all

00:14:39,959 --> 00:14:45,959
kind of hate to have that job can you

00:14:43,890 --> 00:14:49,589
know show Han sook who is a distro

00:14:45,959 --> 00:14:53,370
maintainer in the room yeah it's it's

00:14:49,589 --> 00:14:56,010
it's hard work and so what we've done

00:14:53,370 --> 00:14:58,260
I'm what containers enable is they

00:14:56,010 --> 00:15:01,079
enable you to ship a lot less code in

00:14:58,260 --> 00:15:04,560
the actual Linux distro the the thing

00:15:01,079 --> 00:15:06,329
that's running the kernel and push a lot

00:15:04,560 --> 00:15:07,529
of that complexity and managing the

00:15:06,329 --> 00:15:11,510
interdependencies for particular

00:15:07,529 --> 00:15:11,510
applications into the container images

00:15:11,839 --> 00:15:17,510
alright so now what we have with all

00:15:14,820 --> 00:15:19,769
these pieces is that we have a way of

00:15:17,510 --> 00:15:22,619
developing software and

00:15:19,769 --> 00:15:25,350
getting into a unit a really nice kind

00:15:22,619 --> 00:15:28,110
of sealed unit and then we have a way of

00:15:25,350 --> 00:15:30,749
running that on top of regular Linux

00:15:28,110 --> 00:15:32,249
servers but isolating it from the rest

00:15:30,749 --> 00:15:36,509
of the software that's running on that

00:15:32,249 --> 00:15:39,480
server so we have a really really nice

00:15:36,509 --> 00:15:41,670
way of organizing people together you

00:15:39,480 --> 00:15:44,069
can now start to imagine that me as a

00:15:41,670 --> 00:15:45,720
operations person only really cares

00:15:44,069 --> 00:15:47,009
about the container I don't have to

00:15:45,720 --> 00:15:48,720
worry about really what's in there I

00:15:47,009 --> 00:15:50,489
just have to know that it'll be a file

00:15:48,720 --> 00:15:52,559
system and then a Linux process will

00:15:50,489 --> 00:15:54,569
come out and then me is somebody who's

00:15:52,559 --> 00:15:57,059
building a CI system I don't really have

00:15:54,569 --> 00:15:59,129
to think about as a Java or Python or

00:15:57,059 --> 00:16:00,959
whatever everything is kind of sealed

00:15:59,129 --> 00:16:02,309
together and then me as a software

00:16:00,959 --> 00:16:04,439
engineer I don't have to really think

00:16:02,309 --> 00:16:06,209
about the underlying kernel or what

00:16:04,439 --> 00:16:07,769
software is going to be available on the

00:16:06,209 --> 00:16:09,480
server when it gets there so I'm

00:16:07,769 --> 00:16:13,949
stealing my software in together with

00:16:09,480 --> 00:16:15,899
everything eight needs all right so we

00:16:13,949 --> 00:16:18,839
have this unit that can be shipped

00:16:15,899 --> 00:16:23,489
around and so what naturally it leads to

00:16:18,839 --> 00:16:26,269
is this concept of clustering and I like

00:16:23,489 --> 00:16:28,740
to think of clustering as botnets so

00:16:26,269 --> 00:16:31,350
we've had this idea of clustering

00:16:28,740 --> 00:16:34,019
servers together for a long time but

00:16:31,350 --> 00:16:35,699
it's usually been in in the context at

00:16:34,019 --> 00:16:38,399
least in the media and for a lot of us

00:16:35,699 --> 00:16:40,019
in the context of somebody maliciously

00:16:38,399 --> 00:16:42,179
taking you over thousands of machines

00:16:40,019 --> 00:16:43,999
and then they have an IRC network or

00:16:42,179 --> 00:16:46,740
something that they control them from

00:16:43,999 --> 00:16:48,920
we're we're creating essentially through

00:16:46,740 --> 00:16:52,949
clustering and all these technologies

00:16:48,920 --> 00:16:54,269
the I don't know what the right term is

00:16:52,949 --> 00:16:57,449
but we're creating like the polite

00:16:54,269 --> 00:17:01,019
botnet so if you're going to manage

00:16:57,449 --> 00:17:05,189
hundreds of servers per person as these

00:17:01,019 --> 00:17:06,779
internet giants do what do you do you

00:17:05,189 --> 00:17:08,850
have way too many servers for manual

00:17:06,779 --> 00:17:10,799
placement so are you gonna remember that

00:17:08,850 --> 00:17:14,449
oh yeah yesterday I deployed two server

00:17:10,799 --> 00:17:16,709
90 today I deployed the 80

00:17:14,449 --> 00:17:19,980
shoot what did I deploy a few weeks ago

00:17:16,709 --> 00:17:21,630
on server 7 and so it's just kind of an

00:17:19,980 --> 00:17:23,250
intractable problem like we're joking

00:17:21,630 --> 00:17:26,610
ourselves if you think that the human

00:17:23,250 --> 00:17:27,750
can do this maybe you'll get cute and

00:17:26,610 --> 00:17:29,580
you'll be like oh I'll just write a

00:17:27,750 --> 00:17:31,350
while loop and I'll track it in a file

00:17:29,580 --> 00:17:34,600
and I'll check it in to get

00:17:31,350 --> 00:17:37,540
but then when you start to think about

00:17:34,600 --> 00:17:40,510
statistics and realize that computers

00:17:37,540 --> 00:17:44,170
actually fail pretty regularly and

00:17:40,510 --> 00:17:45,940
whether for hardware reasons or you hire

00:17:44,170 --> 00:17:48,730
the new intern and he tripped over the

00:17:45,940 --> 00:17:50,590
cable whatever the reason is inevitably

00:17:48,730 --> 00:17:53,170
you're going to have machines that go

00:17:50,590 --> 00:17:55,450
away and now you have to remember

00:17:53,170 --> 00:18:00,450
actually something was running on that

00:17:55,450 --> 00:18:02,740
server what was it running etc and so

00:18:00,450 --> 00:18:04,750
the problems here is that there's really

00:18:02,740 --> 00:18:06,820
no monitoring if you're just placing

00:18:04,750 --> 00:18:10,750
things randomly and there's no state to

00:18:06,820 --> 00:18:13,780
recover when something goes sideways so

00:18:10,750 --> 00:18:15,040
a common pattern and what we're gonna do

00:18:13,780 --> 00:18:17,140
is we're gonna create our kind of

00:18:15,040 --> 00:18:19,840
control network so we're going to take a

00:18:17,140 --> 00:18:21,429
couple of machines from our hundreds

00:18:19,840 --> 00:18:24,580
that we're having to maintain and we're

00:18:21,429 --> 00:18:26,920
going to set those aside and what we'll

00:18:24,580 --> 00:18:28,870
do is we'll run an API on here and we'll

00:18:26,920 --> 00:18:33,040
run a couple of little databases on here

00:18:28,870 --> 00:18:36,490
and we'll use this API in this database

00:18:33,040 --> 00:18:40,270
to be able to control the other machines

00:18:36,490 --> 00:18:42,550
in the cluster and so with this we're

00:18:40,270 --> 00:18:44,920
able to have a centralized place to

00:18:42,550 --> 00:18:47,740
start to monitor the system we're able

00:18:44,920 --> 00:18:51,010
to entrust the state of the system to a

00:18:47,740 --> 00:18:53,410
number of computers and computers are

00:18:51,010 --> 00:18:56,440
really really good at horribly boring

00:18:53,410 --> 00:18:57,429
work like looking and seeing if

00:18:56,440 --> 00:18:58,809
somebody's doing what they're supposed

00:18:57,429 --> 00:18:59,950
to be doing if they're not supposed to

00:18:58,809 --> 00:19:02,080
be if they're doing something they're

00:18:59,950 --> 00:19:04,240
not supposed to be doing reconciling

00:19:02,080 --> 00:19:06,070
that and sort of sitting there and just

00:19:04,240 --> 00:19:09,760
saying are you doing realist we're doing

00:19:06,070 --> 00:19:12,640
every five seconds so what we actually

00:19:09,760 --> 00:19:14,679
end up with is these sets of servers

00:19:12,640 --> 00:19:17,620
telling these other servers what to be

00:19:14,679 --> 00:19:19,179
doing and then these sets of servers are

00:19:17,620 --> 00:19:21,309
actively sitting there checking them

00:19:19,179 --> 00:19:22,330
every few seconds seeing if they're

00:19:21,309 --> 00:19:25,900
actually doing what they should be doing

00:19:22,330 --> 00:19:27,580
and maybe the intern trips over another

00:19:25,900 --> 00:19:32,920
server you really need to fire the

00:19:27,580 --> 00:19:35,410
intern the the the software will notice

00:19:32,920 --> 00:19:37,120
hey that instance the application isn't

00:19:35,410 --> 00:19:41,440
running I'll schedule it to a new

00:19:37,120 --> 00:19:44,380
machine alright so it's a pretty simple

00:19:41,440 --> 00:19:44,710
concept reserve a couple of machines to

00:19:44,380 --> 00:19:47,919
control

00:19:44,710 --> 00:19:50,140
the rest of the machines so what's

00:19:47,919 --> 00:19:53,520
actually running on these machines so

00:19:50,140 --> 00:19:56,559
this is where we get to kubernetes and

00:19:53,520 --> 00:19:58,299
kubernetes is a open-source project

00:19:56,559 --> 00:20:00,330
actually see a couple of kubernetes

00:19:58,299 --> 00:20:03,429
speakers in the audience which is great

00:20:00,330 --> 00:20:05,919
it's an open-source project that was

00:20:03,429 --> 00:20:07,659
introduced by Google has now been moved

00:20:05,919 --> 00:20:10,000
to the cloud native computing foundation

00:20:07,659 --> 00:20:11,559
which is one of our sponsors I'm really

00:20:10,000 --> 00:20:16,059
hitting the sponsors I can't wait to get

00:20:11,559 --> 00:20:18,490
my kick back and it's been donated to

00:20:16,059 --> 00:20:21,659
the CN CF and it's a project that is

00:20:18,490 --> 00:20:26,440
about 18 months old since its wand ATO

00:20:21,659 --> 00:20:29,799
and what it does is it is an API and a

00:20:26,440 --> 00:20:33,159
set of services to create this this

00:20:29,799 --> 00:20:36,789
control cluster and what it looks like

00:20:33,159 --> 00:20:38,440
when you dive into it you can think of

00:20:36,789 --> 00:20:40,029
it just as this high-level abstract

00:20:38,440 --> 00:20:41,860
pretty logo and not think about the

00:20:40,029 --> 00:20:44,289
details but when we get into the details

00:20:41,860 --> 00:20:47,080
really what it is is it's a couple of

00:20:44,289 --> 00:20:49,510
components it's a primary data store and

00:20:47,080 --> 00:20:52,750
this data store is special and that it's

00:20:49,510 --> 00:20:56,679
replicated again because no server is

00:20:52,750 --> 00:20:58,390
safe from the intern you you have those

00:20:56,679 --> 00:21:00,460
three special servers that are running

00:20:58,390 --> 00:21:02,590
kubernetes but what if the intern trips

00:21:00,460 --> 00:21:05,350
over one of those you make sure that the

00:21:02,590 --> 00:21:07,480
data is backed up so it's a replicated

00:21:05,350 --> 00:21:09,299
database and then you have an API server

00:21:07,480 --> 00:21:11,200
which is what everyone interacts with

00:21:09,299 --> 00:21:13,299
that's where the command line tools

00:21:11,200 --> 00:21:16,929
interact with it's what the server's

00:21:13,299 --> 00:21:20,529
actually check in and the monitoring

00:21:16,929 --> 00:21:22,330
happens there etc so pretty simple you

00:21:20,529 --> 00:21:23,679
know if I was to draw this diagram it

00:21:22,330 --> 00:21:26,320
like identical to something like

00:21:23,679 --> 00:21:28,720
WordPress you have a database you have

00:21:26,320 --> 00:21:30,850
an API server and in this case we have a

00:21:28,720 --> 00:21:32,620
database and then API server pretty

00:21:30,850 --> 00:21:37,720
approachable architecture nothing really

00:21:32,620 --> 00:21:39,610
fancy all right so as discussed one of

00:21:37,720 --> 00:21:41,169
the things that we need to do when

00:21:39,610 --> 00:21:45,159
building these systems is we have to

00:21:41,169 --> 00:21:46,840
face failure failure becomes more and

00:21:45,159 --> 00:21:50,919
more common as you start to maintain

00:21:46,840 --> 00:21:53,919
more and more servers and with 3.5

00:21:50,919 --> 00:21:56,440
billion users and only a handful of

00:21:53,919 --> 00:21:58,300
people in the software and IT industry

00:21:56,440 --> 00:22:00,760
you better be

00:21:58,300 --> 00:22:02,560
really effective at facing failure it's

00:22:00,760 --> 00:22:04,030
not going to be great for you if you

00:22:02,560 --> 00:22:05,680
have to care every time a server goes

00:22:04,030 --> 00:22:06,160
down and it's not going to be great for

00:22:05,680 --> 00:22:09,250
the user

00:22:06,160 --> 00:22:13,090
think about 3.5 billion users and then

00:22:09,250 --> 00:22:15,010
100 million servers that's a lot of

00:22:13,090 --> 00:22:17,080
users per server you're gonna make a lot

00:22:15,010 --> 00:22:19,360
of people unhappy if one of those

00:22:17,080 --> 00:22:21,370
servers goes down for 24 hours and

00:22:19,360 --> 00:22:24,070
you're sitting there trying to

00:22:21,370 --> 00:22:26,170
desperately get the hard drive back or

00:22:24,070 --> 00:22:28,270
switch out the power supply

00:22:26,170 --> 00:22:30,520
you've taken thousands and thousands of

00:22:28,270 --> 00:22:36,490
people offline from accessing their data

00:22:30,520 --> 00:22:40,150
and services so what were what we built

00:22:36,490 --> 00:22:42,070
is this thing called @ Ã§d FTD is this

00:22:40,150 --> 00:22:45,340
special database that kubernetes uses

00:22:42,070 --> 00:22:48,130
and so it was introduced by core OS

00:22:45,340 --> 00:22:51,340
which is the company that I founded and

00:22:48,130 --> 00:22:53,400
work for in 2013 it's the primary data

00:22:51,340 --> 00:22:56,410
store and it does this interesting thing

00:22:53,400 --> 00:22:58,180
where without human intervention

00:22:56,410 --> 00:23:00,220
it essentially runs the little

00:22:58,180 --> 00:23:04,380
democratic system an algorithm called

00:23:00,220 --> 00:23:06,730
raft where if the machines go down

00:23:04,380 --> 00:23:08,650
somebody reacts themselves as the leader

00:23:06,730 --> 00:23:11,320
of the cluster and work can continue

00:23:08,650 --> 00:23:15,880
with no human involved and this is for

00:23:11,320 --> 00:23:18,070
you we've put in thousands and thousands

00:23:15,880 --> 00:23:19,780
and thousands of engineering hours to do

00:23:18,070 --> 00:23:21,940
this little fancy trick where computers

00:23:19,780 --> 00:23:25,210
run their own voting system and elect

00:23:21,940 --> 00:23:27,670
new leaders for one simple reason

00:23:25,210 --> 00:23:30,610
getting woken up at night sucks is

00:23:27,670 --> 00:23:32,380
really the worst if you're on call you

00:23:30,610 --> 00:23:35,080
don't want just because one server to go

00:23:32,380 --> 00:23:37,480
goes down to be woken up and have to

00:23:35,080 --> 00:23:38,890
take care of logging into the machine

00:23:37,480 --> 00:23:39,570
and deciding which one's the leader

00:23:38,890 --> 00:23:42,790
today

00:23:39,570 --> 00:23:48,360
so what we're gonna do here and as an

00:23:42,790 --> 00:23:50,800
introduction to @cd come on internet is

00:23:48,360 --> 00:23:53,710
there's a service that we run called

00:23:50,800 --> 00:23:58,300
played at CDI oh this is like an MMORPG

00:23:53,710 --> 00:24:00,340
for computer failures so what inevitably

00:23:58,300 --> 00:24:02,350
happens here is that a few people will

00:24:00,340 --> 00:24:06,340
pull up this site if not I'll run it

00:24:02,350 --> 00:24:09,000
myself but this is a TD cluster so we

00:24:06,340 --> 00:24:11,810
have five machines in this cluster and

00:24:09,000 --> 00:24:15,590
we're able to arbitrarily at any

00:24:11,810 --> 00:24:18,950
tell them one of them to stop so right

00:24:15,590 --> 00:24:21,320
now the little circle in green there is

00:24:18,950 --> 00:24:23,120
the leader and so I'm gonna test this

00:24:21,320 --> 00:24:25,340
idea that the servers are running their

00:24:23,120 --> 00:24:29,510
own democratic system and will elect new

00:24:25,340 --> 00:24:33,110
leaders by clicking stop and hopefully

00:24:29,510 --> 00:24:34,700
within a few seconds because computers

00:24:33,110 --> 00:24:37,270
are much faster at voting than human

00:24:34,700 --> 00:24:39,800
beings are the votes are counted and a

00:24:37,270 --> 00:24:42,590
new leader has been elected and what

00:24:39,800 --> 00:24:45,440
this means is that I'm able to write

00:24:42,590 --> 00:24:47,090
data into the database and what you'll

00:24:45,440 --> 00:24:50,690
notice is that all the little hashes

00:24:47,090 --> 00:24:54,620
here ha until somebody takes too many

00:24:50,690 --> 00:24:56,270
offline so as as a community I would ask

00:24:54,620 --> 00:24:59,510
that somebody turn on at least one more

00:24:56,270 --> 00:25:01,970
server the democracy kind of breaks down

00:24:59,510 --> 00:25:05,030
once you have less than 50% of people

00:25:01,970 --> 00:25:14,090
voting all right thank you

00:25:05,030 --> 00:25:17,180
so I'll restart that one just give me a

00:25:14,090 --> 00:25:18,800
second all right so what will happen is

00:25:17,180 --> 00:25:20,450
that I'm able to actually put data into

00:25:18,800 --> 00:25:24,260
the database and you'll notice that the

00:25:20,450 --> 00:25:29,390
hash will actually update hopefully rate

00:25:24,260 --> 00:25:30,530
limit exceeded I love you guys so what

00:25:29,390 --> 00:25:33,050
will happen is that you're able to write

00:25:30,530 --> 00:25:35,420
into the database once the rate limits

00:25:33,050 --> 00:25:37,580
not like C did I have to back off for 3

00:25:35,420 --> 00:25:38,840
seconds what will happen is that it'll

00:25:37,580 --> 00:25:43,130
write into the database

00:25:38,840 --> 00:25:45,350
it'll get replicated around and then the

00:25:43,130 --> 00:25:48,080
the database will ensure that that data

00:25:45,350 --> 00:25:49,100
is available for reads later all right

00:25:48,080 --> 00:25:50,630
you guys are having a lot of fun with

00:25:49,100 --> 00:25:51,320
this I'll let you got it you get the

00:25:50,630 --> 00:25:53,960
basic idea

00:25:51,320 --> 00:25:56,930
computers are able to elect and take

00:25:53,960 --> 00:25:59,960
care of the database on their own ok so

00:25:56,930 --> 00:26:02,420
what should happen is that if you have

00:25:59,960 --> 00:26:05,660
the database saying up is that you're

00:26:02,420 --> 00:26:07,720
able to restart individual machines

00:26:05,660 --> 00:26:12,880
you're able to write into the database

00:26:07,720 --> 00:26:16,010
and then you'll see the value stored

00:26:12,880 --> 00:26:17,810
okay and then one final thing I'd like

00:26:16,010 --> 00:26:22,490
to mention about Ed CD before we move on

00:26:17,810 --> 00:26:24,200
is that this happened so I hadn't really

00:26:22,490 --> 00:26:25,400
been aware of FOSDEM until a couple of

00:26:24,200 --> 00:26:30,460
years ago

00:26:25,400 --> 00:26:40,100
we design the logo for @cd in 2013

00:26:30,460 --> 00:26:41,600
awkward it's okay I think I think

00:26:40,100 --> 00:26:43,720
they're just really good friends or

00:26:41,600 --> 00:26:45,170
maybe relatives cousins or something

00:26:43,720 --> 00:26:50,240
it's fine

00:26:45,170 --> 00:26:52,610
so that's the data sort of kubernetes is

00:26:50,240 --> 00:26:54,320
that CD and then I wanted to talk

00:26:52,610 --> 00:26:55,730
through more about what kubernetes

00:26:54,320 --> 00:26:58,040
actually does and why it's an

00:26:55,730 --> 00:27:00,470
interesting project and why we've seen

00:26:58,040 --> 00:27:02,750
such rapid adoption of it in such a

00:27:00,470 --> 00:27:05,240
short period of time and really what

00:27:02,750 --> 00:27:07,270
what what kubernetes is doing is it's

00:27:05,240 --> 00:27:12,230
creating really really consistent

00:27:07,270 --> 00:27:14,000
infrastructure api's everywhere so this

00:27:12,230 --> 00:27:17,090
is kind of what kubernetes looks like in

00:27:14,000 --> 00:27:19,580
the abstract you have maybe you're

00:27:17,090 --> 00:27:22,400
running on some on Amazon so you have

00:27:19,580 --> 00:27:24,950
the Amazon API so you talk to the Amazon

00:27:22,400 --> 00:27:26,929
API as you create some virtual machine

00:27:24,950 --> 00:27:29,570
instances and then on top of that you

00:27:26,929 --> 00:27:31,760
put kubernetes and kubernetes behaves

00:27:29,570 --> 00:27:34,160
like kubernetes and kind of abstract

00:27:31,760 --> 00:27:36,559
away the underlying infrastructure and

00:27:34,160 --> 00:27:40,870
kubernetes works well on Microsoft Azure

00:27:36,559 --> 00:27:44,120
or maybe on top of the Google API is

00:27:40,870 --> 00:27:47,510
works on top of the digital ocean api's

00:27:44,120 --> 00:27:50,380
and so essentially on top of any sort of

00:27:47,510 --> 00:27:54,860
cloud infrastructure it works fine

00:27:50,380 --> 00:27:57,679
OpenStack api's and then also its able

00:27:54,860 --> 00:28:00,380
to run perfectly fine on top of bare

00:27:57,679 --> 00:28:02,900
metal machines as well so what you have

00:28:00,380 --> 00:28:04,940
is this way of shipping and talking

00:28:02,900 --> 00:28:07,340
about infrastructure that's really

00:28:04,940 --> 00:28:11,059
really consistent and can be ran pretty

00:28:07,340 --> 00:28:14,260
much anywhere and this has a few

00:28:11,059 --> 00:28:18,140
advantages that we've really never seen

00:28:14,260 --> 00:28:21,110
so one of the problems that we've had as

00:28:18,140 --> 00:28:23,600
kind of an open-source community for a

00:28:21,110 --> 00:28:29,030
long time as fragmentation can I get a

00:28:23,600 --> 00:28:32,030
BIM can I get an e max and fragmentation

00:28:29,030 --> 00:28:35,000
is hit us hard in the cloud environments

00:28:32,030 --> 00:28:36,700
as well you really when you choose a

00:28:35,000 --> 00:28:38,760
particular cloud

00:28:36,700 --> 00:28:42,160
you have to program against their api's

00:28:38,760 --> 00:28:44,920
open sack made a valiant effort to you

00:28:42,160 --> 00:28:46,540
know create a single standard API didn't

00:28:44,920 --> 00:28:48,700
work out so well it's okay

00:28:46,540 --> 00:28:51,100
but kubernetes kind of moves up the

00:28:48,700 --> 00:28:53,220
stack and we're creating a single API to

00:28:51,100 --> 00:28:56,410
talk to any sort of infrastructure and

00:28:53,220 --> 00:28:58,390
so what kubernetes is creating

00:28:56,410 --> 00:29:00,400
consistency for was creating an API for

00:28:58,390 --> 00:29:02,440
this is essentially all major components

00:29:00,400 --> 00:29:04,870
of what we think of as computing at

00:29:02,440 --> 00:29:06,640
least back-end server computing so

00:29:04,870 --> 00:29:08,220
compute it's able to run on all these

00:29:06,640 --> 00:29:11,530
different compute environments

00:29:08,220 --> 00:29:12,820
networking it is able to be flexible and

00:29:11,530 --> 00:29:16,120
work inside of any networking

00:29:12,820 --> 00:29:18,160
environment whether it's you know top of

00:29:16,120 --> 00:29:21,550
rack switches that are smart or vx LAN

00:29:18,160 --> 00:29:25,120
or etc it can talk to different storage

00:29:21,550 --> 00:29:27,580
systems so you can mount disks whether

00:29:25,120 --> 00:29:32,020
they're from Amazon's EBS or in a best

00:29:27,580 --> 00:29:34,840
mount or cluster FS and then it can do

00:29:32,020 --> 00:29:36,580
load balancing you know the piece of

00:29:34,840 --> 00:29:39,670
software that's actually routing the

00:29:36,580 --> 00:29:42,940
requests down to your application down

00:29:39,670 --> 00:29:45,280
to your container and so across all of

00:29:42,940 --> 00:29:47,550
these sort of foundational pieces of

00:29:45,280 --> 00:29:50,380
what is back-end in an infrastructure

00:29:47,550 --> 00:29:52,660
kubernetes has created a consistent API

00:29:50,380 --> 00:29:54,130
where I don't necessarily know what I'm

00:29:52,660 --> 00:29:56,410
talking to the kubernetes api whether

00:29:54,130 --> 00:29:59,170
that api is being served on AWS or

00:29:56,410 --> 00:30:04,150
OpenStack or bare metal pretty useful

00:29:59,170 --> 00:30:06,100
pretty useful property and so one of the

00:30:04,150 --> 00:30:08,590
things that's interesting with this is

00:30:06,100 --> 00:30:11,620
this idea of Federation which the

00:30:08,590 --> 00:30:14,620
kubernetes community has been marching

00:30:11,620 --> 00:30:18,010
towards so if you imagine that this API

00:30:14,620 --> 00:30:20,770
can run against any compute and that all

00:30:18,010 --> 00:30:22,870
of us are having to maintain lots and

00:30:20,770 --> 00:30:26,190
lots of servers so you have a single

00:30:22,870 --> 00:30:28,660
kubernetes cluster here and the boss or

00:30:26,190 --> 00:30:30,310
your company decides you know what

00:30:28,660 --> 00:30:34,000
you've been so effective at managing

00:30:30,310 --> 00:30:35,830
hundreds of servers with kubernetes we

00:30:34,000 --> 00:30:38,110
actually are just gonna double our

00:30:35,830 --> 00:30:39,910
capacity so if you just manage you know

00:30:38,110 --> 00:30:42,220
a couple under more that'd be great for

00:30:39,910 --> 00:30:44,680
the company if you could handle that and

00:30:42,220 --> 00:30:47,710
then a few months later this is going

00:30:44,680 --> 00:30:51,550
well and so just a few hundred more in

00:30:47,710 --> 00:30:53,260
another data center and so this is

00:30:51,550 --> 00:30:55,120
actually possible and something that's

00:30:53,260 --> 00:30:56,920
been worked on inside of kubernetes it's

00:30:55,120 --> 00:30:59,470
called Federation and it's this

00:30:56,920 --> 00:31:01,630
interesting concept that we take the

00:30:59,470 --> 00:31:04,540
exact same thing that kubernetes is

00:31:01,630 --> 00:31:07,170
doing today with individual machines and

00:31:04,540 --> 00:31:09,310
then we click it up to the idea that we

00:31:07,170 --> 00:31:14,380
run that exact same infrastructure

00:31:09,310 --> 00:31:16,180
against against entire clusters so

00:31:14,380 --> 00:31:16,780
you'll notice the architecture is very

00:31:16,180 --> 00:31:20,470
similar

00:31:16,780 --> 00:31:22,750
we have kubernetes running by itself

00:31:20,470 --> 00:31:24,250
inside of a san francisco data center in

00:31:22,750 --> 00:31:27,610
new york data center in a berlin data

00:31:24,250 --> 00:31:31,180
center and then at the top we're running

00:31:27,610 --> 00:31:33,550
kubernetes again with SED datastore only

00:31:31,180 --> 00:31:35,920
it's that that API is spread out over

00:31:33,550 --> 00:31:37,630
all three data centers and controlling

00:31:35,920 --> 00:31:39,690
the individual data centers so it's

00:31:37,630 --> 00:31:42,400
thinking about a data center instead of

00:31:39,690 --> 00:31:45,250
individual hosts so a pretty interesting

00:31:42,400 --> 00:31:47,830
concept and something that eventually

00:31:45,250 --> 00:31:49,960
allows for this thing where you could

00:31:47,830 --> 00:31:52,300
actually be running applications a

00:31:49,960 --> 00:31:54,790
single application across multiple

00:31:52,300 --> 00:31:59,410
different cloud providers or physical

00:31:54,790 --> 00:32:02,950
networks this is all work in progress

00:31:59,410 --> 00:32:05,800
about 40% of the kubernetes api today is

00:32:02,950 --> 00:32:07,540
able to do this thing where you have

00:32:05,800 --> 00:32:09,250
federated api that then talks to

00:32:07,540 --> 00:32:13,690
clusters the clusters and talk to

00:32:09,250 --> 00:32:17,530
individual machines okay so

00:32:13,690 --> 00:32:19,600
kubernetes has this API and what is this

00:32:17,530 --> 00:32:21,160
API actually do well it does a number of

00:32:19,600 --> 00:32:23,350
things you can tell it to run a

00:32:21,160 --> 00:32:25,480
container and it'll go off and run that

00:32:23,350 --> 00:32:27,840
container for you but a really important

00:32:25,480 --> 00:32:30,160
thing that it does is it allows you to

00:32:27,840 --> 00:32:34,780
connect pieces of the infrastructure

00:32:30,160 --> 00:32:36,400
together using a concept of labels so in

00:32:34,780 --> 00:32:38,500
a lot of infrastructure we think of

00:32:36,400 --> 00:32:40,360
hierarchies we think of the front end

00:32:38,500 --> 00:32:42,580
and the back end we think of the load

00:32:40,360 --> 00:32:45,400
balancer and then then then the scale

00:32:42,580 --> 00:32:47,530
out tear but kubernetes has a little bit

00:32:45,400 --> 00:32:49,570
of a different opinion on how service

00:32:47,530 --> 00:32:52,150
discovery and the overall system works

00:32:49,570 --> 00:32:55,000
so you may have different objects these

00:32:52,150 --> 00:32:56,800
objects are here in these gray boxes on

00:32:55,000 --> 00:32:59,080
these might be individual containers

00:32:56,800 --> 00:33:00,100
they might be services that represent

00:32:59,080 --> 00:33:03,280
load balance

00:33:00,100 --> 00:33:06,220
etc I mean what kubernetes does is it

00:33:03,280 --> 00:33:07,809
allows you to label and group these

00:33:06,220 --> 00:33:10,660
things in arbitrary different ways which

00:33:07,809 --> 00:33:14,140
we'll see in a second so perhaps you're

00:33:10,660 --> 00:33:16,540
interested in separating out the parts

00:33:14,140 --> 00:33:19,900
of the infrastructure as their component

00:33:16,540 --> 00:33:21,520
parts front end versus back end or

00:33:19,900 --> 00:33:24,550
perhaps you're interested in figuring

00:33:21,520 --> 00:33:26,890
out who deployed the infrastructure so

00:33:24,550 --> 00:33:29,500
was it my colleague reethu did she

00:33:26,890 --> 00:33:32,860
deploy these containers or was it me who

00:33:29,500 --> 00:33:34,480
deployed the containers or maybe in a

00:33:32,860 --> 00:33:36,340
different way you would like to look at

00:33:34,480 --> 00:33:38,740
the infrastructure as a separation

00:33:36,340 --> 00:33:41,679
between the production side and the dev

00:33:38,740 --> 00:33:43,630
side and so kubernetes has this really

00:33:41,679 --> 00:33:45,330
flexible system where there's actually a

00:33:43,630 --> 00:33:48,000
lot of different perspectives on how

00:33:45,330 --> 00:33:49,660
infrastructure is organized

00:33:48,000 --> 00:33:51,910
sometimes we'll think of it in

00:33:49,660 --> 00:33:53,679
hierarchical terms but it is really

00:33:51,910 --> 00:33:58,809
really convenient to have this idea of

00:33:53,679 --> 00:34:01,510
different groupings in a query and so

00:33:58,809 --> 00:34:02,980
this grouping in this query system is

00:34:01,510 --> 00:34:05,260
really at the core of what kubernetes

00:34:02,980 --> 00:34:08,800
does and it's throughout the entire way

00:34:05,260 --> 00:34:10,149
that the API works and so one really

00:34:08,800 --> 00:34:12,340
interesting thing is we end up with

00:34:10,149 --> 00:34:17,470
these really decoupled systems where we

00:34:12,340 --> 00:34:20,350
can start to think of the system as a

00:34:17,470 --> 00:34:24,700
set of control loops acting on top of

00:34:20,350 --> 00:34:26,770
these queries looking for what the users

00:34:24,700 --> 00:34:27,850
asks us to do and then making a query

00:34:26,770 --> 00:34:29,859
and finding out what's actually

00:34:27,850 --> 00:34:32,260
happening in the cluster so this is a

00:34:29,859 --> 00:34:35,050
really practical example so you're

00:34:32,260 --> 00:34:36,520
running an application we'll look at

00:34:35,050 --> 00:34:38,619
this in a second you're running an

00:34:36,520 --> 00:34:40,629
application you say that the application

00:34:38,619 --> 00:34:42,730
is going to be labeled in this way it's

00:34:40,629 --> 00:34:44,470
going to be called a people app equals

00:34:42,730 --> 00:34:47,619
web and it's going to be environment

00:34:44,470 --> 00:34:49,270
equals prod and then the system is

00:34:47,619 --> 00:34:51,940
constantly looking like a thermostat

00:34:49,270 --> 00:34:54,010
looks at the temperature and talks to

00:34:51,940 --> 00:34:56,080
your thermos or your talk to your

00:34:54,010 --> 00:34:58,090
furnace what is going to be doing is

00:34:56,080 --> 00:35:02,230
this constantly looking saying well are

00:34:58,090 --> 00:35:05,350
are the is the state of the system in

00:35:02,230 --> 00:35:07,390
this case the state of the system is one

00:35:05,350 --> 00:35:09,340
running container is the state of the

00:35:07,390 --> 00:35:12,310
system matching the desired state of the

00:35:09,340 --> 00:35:13,630
system the user has asked for and it's

00:35:12,310 --> 00:35:17,589
constantly checking the state

00:35:13,630 --> 00:35:19,990
as using these labels to do that and if

00:35:17,589 --> 00:35:22,240
it finds that it's actually not matching

00:35:19,990 --> 00:35:24,369
the state what it'll do is it'll ask the

00:35:22,240 --> 00:35:29,559
system to schedule new instances of the

00:35:24,369 --> 00:35:31,660
containers pretty powerful concept we're

00:35:29,559 --> 00:35:33,250
able to kind of be couple these concepts

00:35:31,660 --> 00:35:37,750
of what's running versus what would I

00:35:33,250 --> 00:35:40,839
like to have running so this is a

00:35:37,750 --> 00:35:42,490
demonstration of that happening so it

00:35:40,839 --> 00:35:45,250
happens really fast because kubernetes

00:35:42,490 --> 00:35:47,769
is very very responsive so what I'll be

00:35:45,250 --> 00:35:50,799
doing is I go into the console this is a

00:35:47,769 --> 00:35:51,880
console for kubernetes I say I want to

00:35:50,799 --> 00:35:54,910
have two copies of this application

00:35:51,880 --> 00:35:57,099
running and boom within about one second

00:35:54,910 --> 00:35:58,900
I have two copies running and I can

00:35:57,099 --> 00:36:00,789
drill in and start to look at metrics of

00:35:58,900 --> 00:36:03,549
that cup that running copy of the

00:36:00,789 --> 00:36:05,380
application and this happens because

00:36:03,549 --> 00:36:09,670
I've essentially set the thermostatic to

00:36:05,380 --> 00:36:11,619
and the system responds now that works

00:36:09,670 --> 00:36:15,039
fine for really simple applications the

00:36:11,619 --> 00:36:16,269
scale-out web applications it gets more

00:36:15,039 --> 00:36:18,460
interesting when you have to think about

00:36:16,269 --> 00:36:21,519
databases or running other sorts of

00:36:18,460 --> 00:36:23,440
applications on top of kubernetes so

00:36:21,519 --> 00:36:27,279
what you'd love to be able to do is say

00:36:23,440 --> 00:36:30,329
run my database on top of kubernetes and

00:36:27,279 --> 00:36:32,740
make it really really simple but

00:36:30,329 --> 00:36:35,819
databases are harder because they store

00:36:32,740 --> 00:36:39,069
state they need to replicate state etc

00:36:35,819 --> 00:36:44,259
and so you have to worry about resizes

00:36:39,069 --> 00:36:46,690
upgrades reconfigurations backup healing

00:36:44,259 --> 00:36:48,640
what happens when instances fail and

00:36:46,690 --> 00:36:50,349
these are concerns that you really don't

00:36:48,640 --> 00:36:53,559
have in a horizontally scaled

00:36:50,349 --> 00:36:58,480
application if your web back in fails

00:36:53,559 --> 00:37:00,250
just start up a new one and so earlier

00:36:58,480 --> 00:37:02,470
or late last year we introduced this

00:37:00,250 --> 00:37:04,539
idea of kubernetes operators and what

00:37:02,470 --> 00:37:06,970
they enabled you to do is start to

00:37:04,539 --> 00:37:10,569
specify really complex applications that

00:37:06,970 --> 00:37:12,549
require active specific management at a

00:37:10,569 --> 00:37:14,980
high level so what you'd like to be able

00:37:12,549 --> 00:37:16,660
to do is say I want to have a Postgres

00:37:14,980 --> 00:37:18,670
database I want it to be in a cluster of

00:37:16,660 --> 00:37:23,100
three maybe I want a couple of read

00:37:18,670 --> 00:37:25,620
replicas and one write replicas

00:37:23,100 --> 00:37:27,360
and so what these pieces of software

00:37:25,620 --> 00:37:28,590
that we call operators are doing are

00:37:27,360 --> 00:37:30,210
they're representing the human knowledge

00:37:28,590 --> 00:37:34,710
of how to scale and back out these

00:37:30,210 --> 00:37:36,480
systems in software and so we've done

00:37:34,710 --> 00:37:39,540
this initially for the database that

00:37:36,480 --> 00:37:41,400
backs kubernetes call that CD where you

00:37:39,540 --> 00:37:43,920
can actually just ask the cluster give

00:37:41,400 --> 00:37:46,080
me a net CD cluster you ask kubernetes

00:37:43,920 --> 00:37:48,500
give me an app at CD cluster of three

00:37:46,080 --> 00:37:51,270
and it'll handle all the backup and

00:37:48,500 --> 00:37:54,270
recovery and healing of that cluster

00:37:51,270 --> 00:37:56,550
over time so it essentially goes through

00:37:54,270 --> 00:37:58,350
this constant loop of is cluster healthy

00:37:56,550 --> 00:38:00,420
if it's not what should I be doing to

00:37:58,350 --> 00:38:02,700
make it a healthy I'll take those

00:38:00,420 --> 00:38:03,330
actions is the cluster healthy what

00:38:02,700 --> 00:38:08,310
should I be doing

00:38:03,330 --> 00:38:10,020
etc in a constant loop now the final

00:38:08,310 --> 00:38:12,150
kind of bit of this is we have the

00:38:10,020 --> 00:38:13,920
ability to scale our application we have

00:38:12,150 --> 00:38:15,840
the ability to run the application over

00:38:13,920 --> 00:38:18,510
lots of different different disparate

00:38:15,840 --> 00:38:20,760
pieces of back-end infrastructure and

00:38:18,510 --> 00:38:22,800
server compute infrastructure on the

00:38:20,760 --> 00:38:24,240
last bit is monitoring without

00:38:22,800 --> 00:38:28,620
monitoring you really have no idea

00:38:24,240 --> 00:38:30,660
whether you're serving the users and you

00:38:28,620 --> 00:38:33,930
have really no idea whether the system

00:38:30,660 --> 00:38:36,930
is working at all so we build this thing

00:38:33,930 --> 00:38:40,470
called prometheus operator Prometheus is

00:38:36,930 --> 00:38:43,070
a monitoring system inspired by the

00:38:40,470 --> 00:38:45,780
system Boardman that comes out of Google

00:38:43,070 --> 00:38:47,760
but what we've done is we've used this

00:38:45,780 --> 00:38:50,100
idea of labels in kubernetes and applied

00:38:47,760 --> 00:38:52,470
it to monitoring systems so I'll show

00:38:50,100 --> 00:38:54,120
you an example of this so I have this

00:38:52,470 --> 00:38:59,520
little application called host info

00:38:54,120 --> 00:39:02,160
running and host info is deployed on my

00:38:59,520 --> 00:39:03,570
cluster and we have Prometheus going and

00:39:02,160 --> 00:39:07,620
actually just scraping a lot of the

00:39:03,570 --> 00:39:09,570
basic metrics about host info so what we

00:39:07,620 --> 00:39:11,220
can do with kubernetes and these

00:39:09,570 --> 00:39:13,740
monitoring systems is we can go all the

00:39:11,220 --> 00:39:15,540
way from the load balancer down to the

00:39:13,740 --> 00:39:17,250
individual container down to the server

00:39:15,540 --> 00:39:21,930
that's running that container so I'll

00:39:17,250 --> 00:39:25,590
show you that live here so we go into a

00:39:21,930 --> 00:39:27,480
service we go into this service for host

00:39:25,590 --> 00:39:29,490
info try to make this bigger

00:39:27,480 --> 00:39:32,220
I'm going to the service for host info

00:39:29,490 --> 00:39:35,280
inside of post info service we have this

00:39:32,220 --> 00:39:36,480
label selector this label selector finds

00:39:35,280 --> 00:39:38,430
that there's one

00:39:36,480 --> 00:39:41,490
we have application running I drill in

00:39:38,430 --> 00:39:43,800
that I can find out you know how much

00:39:41,490 --> 00:39:45,869
RAM and CPU has been used there I can

00:39:43,800 --> 00:39:48,690
drill down again and find out which

00:39:45,869 --> 00:39:51,270
machine is this running on what what

00:39:48,690 --> 00:39:52,830
labels are on this machine what version

00:39:51,270 --> 00:39:54,960
of software is it running what kernel

00:39:52,830 --> 00:39:55,859
version is is running this is really

00:39:54,960 --> 00:39:57,690
powerful stuff

00:39:55,859 --> 00:39:58,859
we've gone from all the way from the

00:39:57,690 --> 00:40:00,810
load balancer through the running

00:39:58,859 --> 00:40:02,880
process down to the running machine I'm

00:40:00,810 --> 00:40:05,730
in a few clicks and the whole way

00:40:02,880 --> 00:40:09,119
through we have live up-to-date

00:40:05,730 --> 00:40:11,790
statistics on the the process on the

00:40:09,119 --> 00:40:16,920
machine pretty pretty powerful concepts

00:40:11,790 --> 00:40:18,780
and then I also would like you to try

00:40:16,920 --> 00:40:22,040
out so I'm running this application host

00:40:18,780 --> 00:40:25,290
F up org F ups my personal domain and

00:40:22,040 --> 00:40:28,530
this application is essentially just

00:40:25,290 --> 00:40:30,480
keeping a visitor account and then at

00:40:28,530 --> 00:40:32,869
the same time I have Prometheus

00:40:30,480 --> 00:40:35,730
monitoring the application directly

00:40:32,869 --> 00:40:38,520
so getting application specific metrics

00:40:35,730 --> 00:40:41,280
so what I can do now is I can come in to

00:40:38,520 --> 00:40:46,609
the application I can say I want to

00:40:41,280 --> 00:40:49,320
scale it up to maybe five copies and

00:40:46,609 --> 00:40:51,150
Prometheus will immediately respond to

00:40:49,320 --> 00:40:54,119
that as those applications are deployed

00:40:51,150 --> 00:40:56,430
and start to pick them out and then we

00:40:54,119 --> 00:40:59,310
can start to do useful things like say I

00:40:56,430 --> 00:41:01,380
want to find all HTTP requests that have

00:40:59,310 --> 00:41:04,680
happened in five second intervals and

00:41:01,380 --> 00:41:06,660
get the rate of that and make a graph

00:41:04,680 --> 00:41:09,150
and maybe give it for the last two

00:41:06,660 --> 00:41:10,920
minutes and so we started to see all the

00:41:09,150 --> 00:41:12,060
live statistics of what's happening

00:41:10,920 --> 00:41:16,320
inside the cluster and for this

00:41:12,060 --> 00:41:18,780
particular application so what's next

00:41:16,320 --> 00:41:20,910
for kubernetes there's a bunch of

00:41:18,780 --> 00:41:24,020
different work going on kubernetes is

00:41:20,910 --> 00:41:28,260
one of the most the most active github

00:41:24,020 --> 00:41:29,790
repo right now today in the world so

00:41:28,260 --> 00:41:32,400
there's a really huge healthy growth of

00:41:29,790 --> 00:41:35,640
open-source community better metrics of

00:41:32,400 --> 00:41:38,040
monitoring across the entire system ever

00:41:35,640 --> 00:41:39,540
improving security defaults we have role

00:41:38,040 --> 00:41:41,990
based access control and we can use

00:41:39,540 --> 00:41:43,830
internet identities like Open ID Connect

00:41:41,990 --> 00:41:46,710
support for more and more cloud

00:41:43,830 --> 00:41:48,660
platforms more prepackaged applications

00:41:46,710 --> 00:41:50,040
so you can just deploy a wordpress or

00:41:48,660 --> 00:41:51,540
deploy whatever

00:41:50,040 --> 00:41:55,410
and if you're interested we have this

00:41:51,540 --> 00:41:56,820
entire tracking repo of features now the

00:41:55,410 --> 00:42:00,120
last thing I want to touch on before I

00:41:56,820 --> 00:42:03,330
go is why I'm here what drives me to

00:42:00,120 --> 00:42:05,970
build all this crazy technology so core

00:42:03,330 --> 00:42:07,830
OS has a really clear mission it's a

00:42:05,970 --> 00:42:09,360
pretty straightforward one secure the

00:42:07,830 --> 00:42:11,450
Internet I think we'll be done here any

00:42:09,360 --> 00:42:11,450
day

00:42:11,520 --> 00:42:15,900
so what coriolis is trying to do and why

00:42:14,070 --> 00:42:17,550
we build this stuff and why we think all

00:42:15,900 --> 00:42:20,190
this stuff is important to securing the

00:42:17,550 --> 00:42:23,280
Internet is if we go back to our 3.5

00:42:20,190 --> 00:42:26,940
billion users these people are pouring

00:42:23,280 --> 00:42:29,100
their lives into these servers and it's

00:42:26,940 --> 00:42:30,810
our responsibility to take care of them

00:42:29,100 --> 00:42:33,690
in the best way possible using the best

00:42:30,810 --> 00:42:35,310
possible technology again it's it's

00:42:33,690 --> 00:42:36,780
their commerce that's documents with

00:42:35,310 --> 00:42:38,960
their personal photos

00:42:36,780 --> 00:42:43,380
it's everything they've communicated and

00:42:38,960 --> 00:42:45,570
so with all these servers we need to

00:42:43,380 --> 00:42:50,490
take responsibility this is a heavy

00:42:45,570 --> 00:42:52,110
heavy responsibility and so we like to

00:42:50,490 --> 00:42:54,600
think of ourselves as building what is

00:42:52,110 --> 00:42:56,730
self-driving infrastructure essentially

00:42:54,600 --> 00:42:58,860
taking away a lot of the toil and

00:42:56,730 --> 00:43:02,070
concerns that all of us have and

00:42:58,860 --> 00:43:04,230
maintaining infrastructure and making it

00:43:02,070 --> 00:43:08,190
more like a set of applications where

00:43:04,230 --> 00:43:09,840
you don't have to be an expert you don't

00:43:08,190 --> 00:43:11,930
have to be an expert in patching every

00:43:09,840 --> 00:43:14,270
single component these these

00:43:11,930 --> 00:43:16,920
infrastructure is giving dizzyingly

00:43:14,270 --> 00:43:20,520
complicated and it's impossible for us

00:43:16,920 --> 00:43:23,120
to be both kernel experts database

00:43:20,520 --> 00:43:26,760
experts experts in our own applications

00:43:23,120 --> 00:43:28,080
at the same time and so we need help in

00:43:26,760 --> 00:43:31,470
automation to make all this stuff

00:43:28,080 --> 00:43:33,450
successful and the reason there's

00:43:31,470 --> 00:43:35,760
urgency here and the reason this is

00:43:33,450 --> 00:43:38,460
important is because without expertise

00:43:35,760 --> 00:43:41,670
we will inevitably miss the latest

00:43:38,460 --> 00:43:44,220
security update we have as engineers

00:43:41,670 --> 00:43:46,410
inside the Linux kernel across the

00:43:44,220 --> 00:43:50,610
entire ecosystem we have at any given

00:43:46,410 --> 00:43:53,520
time about you know maybe a month maybe

00:43:50,610 --> 00:43:54,810
two or three months time period where

00:43:53,520 --> 00:43:57,750
there's not an entire panic on the

00:43:54,810 --> 00:43:59,940
internet where some horrible security

00:43:57,750 --> 00:44:02,880
vulnerability comes out and we have to

00:43:59,940 --> 00:44:03,780
all respond to it who had to respond to

00:44:02,880 --> 00:44:07,350
dirty cow

00:44:03,780 --> 00:44:10,050
who had to respond to heartbleed these

00:44:07,350 --> 00:44:12,150
are things that happen constantly and we

00:44:10,050 --> 00:44:15,870
need automation in order to ensure that

00:44:12,150 --> 00:44:19,260
our software systems are caught fixed

00:44:15,870 --> 00:44:21,720
and that our users are secured because

00:44:19,260 --> 00:44:23,550
remember we're responsible for more and

00:44:21,720 --> 00:44:26,730
more millions and millions of users when

00:44:23,550 --> 00:44:28,620
we run these servers and we know how to

00:44:26,730 --> 00:44:30,870
make really really secure systems right

00:44:28,620 --> 00:44:34,020
this is the most secure computer in the

00:44:30,870 --> 00:44:35,640
world but it's not interesting it's not

00:44:34,020 --> 00:44:38,760
interesting because it's not connected

00:44:35,640 --> 00:44:41,400
and so we have to we have to worry about

00:44:38,760 --> 00:44:44,850
these vulnerabilities because connected

00:44:41,400 --> 00:44:47,370
systems are the interesting ones and so

00:44:44,850 --> 00:44:49,380
I wanted to like create a diagram for

00:44:47,370 --> 00:44:51,210
the internet and just looking for

00:44:49,380 --> 00:44:52,500
creative common images of Internet is

00:44:51,210 --> 00:44:57,570
great so I wanted to just share a couple

00:44:52,500 --> 00:45:00,660
of these with you oh actually this so we

00:44:57,570 --> 00:45:03,150
talked about we talked about this time

00:45:00,660 --> 00:45:05,670
window where security vulnerabilities

00:45:03,150 --> 00:45:07,590
are disclosed to where we fix them this

00:45:05,670 --> 00:45:10,140
is not something that's in the popular

00:45:07,590 --> 00:45:11,670
culture of our world and if there's

00:45:10,140 --> 00:45:13,530
anything that I hope that you take away

00:45:11,670 --> 00:45:15,180
from this it's the importance of

00:45:13,530 --> 00:45:18,240
patching and keeping our software

00:45:15,180 --> 00:45:20,550
infrastructure up-to-date John Oliver if

00:45:18,240 --> 00:45:24,420
you haven't seen him he has a great show

00:45:20,550 --> 00:45:27,540
he gave this talk on the safety and

00:45:24,420 --> 00:45:30,930
security of mobile devices and he had

00:45:27,540 --> 00:45:33,990
this great moment where this is a bunch

00:45:30,930 --> 00:45:36,780
of Apple engineers supposedly finding

00:45:33,990 --> 00:45:39,060
out of a new zero-day and iPhone and

00:45:36,780 --> 00:45:44,670
having to respond to it in a responsible

00:45:39,060 --> 00:45:46,650
manner but at any given time all of our

00:45:44,670 --> 00:45:49,530
computer systems as they say here in

00:45:46,650 --> 00:45:53,010
this clip are dancing madly on the edge

00:45:49,530 --> 00:45:56,070
of this volcano this bitter edge of

00:45:53,010 --> 00:45:58,860
systems being secured and insecure and

00:45:56,070 --> 00:46:02,250
the only thing that ever is able to

00:45:58,860 --> 00:46:03,840
guarantee that security over time with

00:46:02,250 --> 00:46:05,670
this idea that the next heartbleed is

00:46:03,840 --> 00:46:08,100
just around the corner is our ability to

00:46:05,670 --> 00:46:09,810
patch and update these systems that's

00:46:08,100 --> 00:46:11,690
what keeps us from falling inside the

00:46:09,810 --> 00:46:15,589
volcano

00:46:11,690 --> 00:46:17,900
so we run software we automate the

00:46:15,589 --> 00:46:20,990
updates of it no matter what it is and

00:46:17,900 --> 00:46:23,180
that's what we do at Koro s if you want

00:46:20,990 --> 00:46:25,339
to get free stuff get kubernetes for

00:46:23,180 --> 00:46:27,710
yourself run it on your laptop with mini

00:46:25,339 --> 00:46:29,630
tube we have a tectonic free tier

00:46:27,710 --> 00:46:31,280
tectonics is our kubernetes product you

00:46:29,630 --> 00:46:33,950
can find it at chorus comm slash

00:46:31,280 --> 00:46:35,539
tectonic you can join us in the

00:46:33,950 --> 00:46:37,700
community that helped us build great

00:46:35,539 --> 00:46:39,530
code there's cool stuff under github

00:46:37,700 --> 00:46:42,799
column slash core OS whether you like

00:46:39,530 --> 00:46:45,349
operating systems databases identity or

00:46:42,799 --> 00:46:49,250
anything else github.com slash core OS

00:46:45,349 --> 00:46:51,710
Gabe comm slash kubernetes largest

00:46:49,250 --> 00:46:54,109
growing cubit or open source community

00:46:51,710 --> 00:46:56,480
on github

00:46:54,109 --> 00:47:00,020
lots of charge to showing you you should

00:46:56,480 --> 00:47:02,359
join up with this stuff it's exploding

00:47:00,020 --> 00:47:04,160
we're core us and we're helping to run

00:47:02,359 --> 00:47:06,049
the world servers we have offices in

00:47:04,160 --> 00:47:09,380
Berlin San Francisco New York if you

00:47:06,049 --> 00:47:12,230
want to join us directly and we have an

00:47:09,380 --> 00:47:12,859
event in May in San Francisco and that's

00:47:12,230 --> 00:47:14,450
all I got

00:47:12,859 --> 00:47:27,820
thank you for your attention

00:47:14,450 --> 00:47:27,820
[Applause]

00:47:29,310 --> 00:47:33,080
so if you want questions we have five

00:47:32,160 --> 00:47:36,590
minutes

00:47:33,080 --> 00:47:36,590
but it's cool

00:47:37,610 --> 00:47:43,370

YouTube URL: https://www.youtube.com/watch?v=N4Cd-WuVKyA


