Title: Portability of containers across diverse HPC resources with Singularity
Publication date: 2018-03-06
Playlist: FOSDEM 2017
Description: 
	by Michael Bauer and César Gómez-Martín

At: FOSDEM 2017

Traditional container technology (i.e. Docker) was not meant for thedeployment of HPC applications among large computing clusters. New containertechnology like Singularity focuses on the portability of compute, allowing usto ease deployment, reducing administrative overhead and user support.However, some issues still need special attention, for example how to handledifferent MPI configurations (e.g. over Infiniband), and how to handle specialresources like GPUs.

Today, there is no need to have applications installed on any cluster orHPC/scientific resource; we can use container technology to encapsulate allthe software and libraries of any specific application, ensuring the operationthereof in any possible operating system, software, and hardware architecture,avoiding incompatibilities and retaining native or near-native performance.Our design strategy makes the container agnostic to the queue system i.e. thecontainer works with SLURM, TORQUE and stand alone.

This talk will cover creating such portable containers using multipleresources, and showing how simple is to deploy a complex MPI dependantapplication across multiple TOP500 supercomputer with only a regular useraccount, including the ability to exploit existing resources like Infinibandand GPGPUs.

Also we’ll show how to add open source profiling tools to the container. Weare going to show execution profiling samples of critical HPC/ML applicationslike VASP, Amber, Seismic Imaging and Chainer running on portable containersacross different HPC systems.


Room: H.2213
Scheduled start: 2017-02-04 09:35:00
Captions: 
	00:00:15,890 --> 00:00:22,380
okay we good okay so we're gonna be

00:00:19,890 --> 00:00:24,150
talking in my part of the talk at least

00:00:22,380 --> 00:00:26,820
briefly just a quick introduction to

00:00:24,150 --> 00:00:30,300
singularity which is the software that

00:00:26,820 --> 00:00:32,009
I'm a developer on here's our website so

00:00:30,300 --> 00:00:34,350
singularities developed as a container

00:00:32,009 --> 00:00:36,320
solution for high performance scientific

00:00:34,350 --> 00:00:38,490
computing as opposed to docker where

00:00:36,320 --> 00:00:41,580
they mainly developed for industry

00:00:38,490 --> 00:00:43,140
solutions they're kind of three main

00:00:41,580 --> 00:00:46,590
reasons that we've been finding it

00:00:43,140 --> 00:00:48,530
useful to have containers in scientific

00:00:46,590 --> 00:00:51,000
computing one escaped dependency how

00:00:48,530 --> 00:00:52,650
somebody having to you know go around

00:00:51,000 --> 00:00:55,550
and manage everybody's versions of their

00:00:52,650 --> 00:00:58,920
libraries for every single scientist

00:00:55,550 --> 00:01:00,870
number two is that you can ensure that

00:00:58,920 --> 00:01:04,110
your code is gonna work on your laptop

00:01:00,870 --> 00:01:06,509
the same way that it's gonna work on the

00:01:04,110 --> 00:01:11,179
cluster every time and that's a huge

00:01:06,509 --> 00:01:13,649
benefit and a third also very important

00:01:11,179 --> 00:01:16,590
kind of point for scientific computing

00:01:13,649 --> 00:01:21,929
is we can take one file and we can send

00:01:16,590 --> 00:01:23,159
it we can send it everywhere and you

00:01:21,929 --> 00:01:25,079
know that's really great for repre doose

00:01:23,159 --> 00:01:26,479
ability of your research you can take

00:01:25,079 --> 00:01:28,409
that file send it to some other

00:01:26,479 --> 00:01:33,119
supercomputer and have somebody verify

00:01:28,409 --> 00:01:35,399
your results so I'm sure many people who

00:01:33,119 --> 00:01:37,049
have worked on at HPC are familiar with

00:01:35,399 --> 00:01:39,179
the scenario you know on the Left you're

00:01:37,049 --> 00:01:42,289
working on your computer you run some

00:01:39,179 --> 00:01:45,270
code and it works you send it over to

00:01:42,289 --> 00:01:51,149
you know run on the HPC and all of a

00:01:45,270 --> 00:01:54,119
sudden nothing works anymore so that's

00:01:51,149 --> 00:01:57,389
what we developed singularity for so

00:01:54,119 --> 00:01:58,859
singularity anything any user on the

00:01:57,389 --> 00:02:01,289
cluster they can run a container without

00:01:58,859 --> 00:02:02,340
any special privileges as opposed to

00:02:01,289 --> 00:02:04,850
docker where they're kind of always

00:02:02,340 --> 00:02:07,700
having a root level daemon running

00:02:04,850 --> 00:02:10,170
singularity integrates right into an HPC

00:02:07,700 --> 00:02:11,940
infrastructure so when you would

00:02:10,170 --> 00:02:13,890
normally run whatever code that you've

00:02:11,940 --> 00:02:16,099
built you can instead just run a

00:02:13,890 --> 00:02:18,450
singularity container as an executable

00:02:16,099 --> 00:02:22,349
but instead you're executing now

00:02:18,450 --> 00:02:25,890
inside of a container singularities

00:02:22,349 --> 00:02:27,450
portable between systems we allow you to

00:02:25,890 --> 00:02:28,980
run your singularity container on

00:02:27,450 --> 00:02:31,379
essentially any system that can support

00:02:28,980 --> 00:02:33,420
singularity and we actually have users

00:02:31,379 --> 00:02:35,190
that are running on you know incredibly

00:02:33,420 --> 00:02:37,230
old kernels we don't require any new

00:02:35,190 --> 00:02:39,000
features so you don't have to take use

00:02:37,230 --> 00:02:43,430
of namespaces if you don't want to and

00:02:39,000 --> 00:02:47,580
I'll run back on you know kernel to even

00:02:43,430 --> 00:02:49,769
and then any user can bring any

00:02:47,580 --> 00:02:51,209
container onto the HPC and so you don't

00:02:49,769 --> 00:02:52,739
have to worry about screening a user's

00:02:51,209 --> 00:02:54,480
container for malicious content you

00:02:52,739 --> 00:02:55,950
don't have to worry about security

00:02:54,480 --> 00:02:57,930
implications of people bringing any

00:02:55,950 --> 00:03:00,720
container that they want to onto your

00:02:57,930 --> 00:03:02,280
HPC system and that makes the job a lot

00:03:00,720 --> 00:03:04,849
easier for administrators and IT

00:03:02,280 --> 00:03:09,060
security people who are worried about

00:03:04,849 --> 00:03:11,510
malicious code being run again here I

00:03:09,060 --> 00:03:13,620
kind of reiterate the same points

00:03:11,510 --> 00:03:15,299
something really important to note is

00:03:13,620 --> 00:03:18,840
the concept that we have one single

00:03:15,299 --> 00:03:20,400
image file and for you know scientific

00:03:18,840 --> 00:03:21,959
work that's we found that's really

00:03:20,400 --> 00:03:23,340
important one of the things that we

00:03:21,959 --> 00:03:24,389
talked about in a paper that we

00:03:23,340 --> 00:03:27,120
submitted for publishing about

00:03:24,389 --> 00:03:29,579
singularity is the fact that we can now

00:03:27,120 --> 00:03:31,680
use just an image file to distribute not

00:03:29,579 --> 00:03:33,959
only the code that you've used to run

00:03:31,680 --> 00:03:35,700
your experiments but also the

00:03:33,959 --> 00:03:37,980
environment you use to run it in and

00:03:35,700 --> 00:03:39,989
data that you used to generate and so

00:03:37,980 --> 00:03:42,120
you can you know ensure that somebody

00:03:39,989 --> 00:03:46,730
who wants to reproduce your results has

00:03:42,120 --> 00:03:48,630
the means to do so so here's a list

00:03:46,730 --> 00:03:50,940
incomplete list of some of the places

00:03:48,630 --> 00:03:53,790
that have installed singularity there's

00:03:50,940 --> 00:03:58,170
a couple places I think in the top 10

00:03:53,790 --> 00:04:02,280
from the top 500 list like impede is on

00:03:58,170 --> 00:04:06,239
their GSI which they're still working on

00:04:02,280 --> 00:04:08,130
their cluster there so the basic usage

00:04:06,239 --> 00:04:11,310
of singularity kind of falls into three

00:04:08,130 --> 00:04:12,540
main parts for the work flow your first

00:04:11,310 --> 00:04:14,099
part you're gonna be working you're

00:04:12,540 --> 00:04:15,630
gonna create an image file so that's

00:04:14,099 --> 00:04:18,209
usually done with pseudo singularity

00:04:15,630 --> 00:04:20,519
image singularity create and you give it

00:04:18,209 --> 00:04:24,240
a name and that creates a physical dot

00:04:20,519 --> 00:04:26,490
IMG file on the disk and then the second

00:04:24,240 --> 00:04:27,990
part is to bootstrap it and that's the

00:04:26,490 --> 00:04:31,650
process of installing whatever software

00:04:27,990 --> 00:04:32,340
you want on your image you know

00:04:31,650 --> 00:04:34,110
configuring

00:04:32,340 --> 00:04:36,180
inside the image your operating system

00:04:34,110 --> 00:04:38,100
and then you're gonna run it and we can

00:04:36,180 --> 00:04:39,720
run it in you know three separate ways

00:04:38,100 --> 00:04:41,930
singularity shell just opens up an

00:04:39,720 --> 00:04:43,380
interactive shell inside the container

00:04:41,930 --> 00:04:46,710
singularity exec

00:04:43,380 --> 00:04:48,510
will open up any executive or will

00:04:46,710 --> 00:04:50,850
execute any file inside the container

00:04:48,510 --> 00:04:52,860
that you want it to and then singularity

00:04:50,850 --> 00:04:55,110
run is sort of a special command we can

00:04:52,860 --> 00:04:56,760
on the bootstrapping process we can

00:04:55,110 --> 00:04:58,830
actually generate a script inside the

00:04:56,760 --> 00:05:01,229
container that will do anything you want

00:04:58,830 --> 00:05:03,270
when you do singularity run and that's

00:05:01,229 --> 00:05:06,450
actually what happens when you just

00:05:03,270 --> 00:05:08,070
directly execute the image file is that

00:05:06,450 --> 00:05:10,110
it will execute that run script and

00:05:08,070 --> 00:05:14,850
allow you you know to just execute the

00:05:10,110 --> 00:05:17,790
image as an executable so this is kind

00:05:14,850 --> 00:05:20,310
of a just a small comparison in contrast

00:05:17,790 --> 00:05:26,180
between a couple other container

00:05:20,310 --> 00:05:28,590
solutions so as far as HPC goes

00:05:26,180 --> 00:05:29,910
singularity fulfills what we had

00:05:28,590 --> 00:05:32,430
determined were some very important

00:05:29,910 --> 00:05:33,960
points and you can kind of see that

00:05:32,430 --> 00:05:36,600
docker doesn't fulfill a lot of things

00:05:33,960 --> 00:05:38,729
and stalker is is developed with a

00:05:36,600 --> 00:05:41,729
totally different kind of goal in mind

00:05:38,729 --> 00:05:44,100
and shifter and Charlie cloud are

00:05:41,729 --> 00:05:47,030
similar to singularity and that they're

00:05:44,100 --> 00:05:49,979
both developed also for HPC environments

00:05:47,030 --> 00:05:54,060
however we do have some slight

00:05:49,979 --> 00:05:56,970
differences between them and this is

00:05:54,060 --> 00:06:01,979
just just an overview of a couple of the

00:05:56,970 --> 00:06:04,260
commands and what we are able to run as

00:06:01,979 --> 00:06:08,599
far as container formats and so now I'll

00:06:04,260 --> 00:06:08,599
turn it over to you

00:06:18,800 --> 00:06:30,450
okay what a full-size please so I would

00:06:28,410 --> 00:06:37,100
normally to everyone I hope you enjoyed

00:06:30,450 --> 00:06:39,900
last night I'm this guy sets our

00:06:37,100 --> 00:06:44,190
government which is the guy that appears

00:06:39,900 --> 00:06:47,070
in every on the website and every other

00:06:44,190 --> 00:06:48,390
place had a medical issue his well I

00:06:47,070 --> 00:06:53,040
don't mind on him

00:06:48,390 --> 00:06:55,800
but we will have a little secret between

00:06:53,040 --> 00:06:56,880
all of the room and me and this talk was

00:06:55,800 --> 00:07:01,140
given by say sir

00:06:56,880 --> 00:07:05,640
so if anyone asked you I'm say sir are

00:07:01,140 --> 00:07:09,210
we talking about given the introduction

00:07:05,640 --> 00:07:13,140
Michael gave a sensing variety I'll be

00:07:09,210 --> 00:07:18,780
talking about a specific HPC use case

00:07:13,140 --> 00:07:21,300
for a singularity for those of you that

00:07:18,780 --> 00:07:23,780
hadn't work as systems of many as

00:07:21,300 --> 00:07:28,530
administrator on a supercomputing Center

00:07:23,780 --> 00:07:32,970
the real pain is done when one user

00:07:28,530 --> 00:07:35,900
opens a ticket pushing you to upgrade

00:07:32,970 --> 00:07:39,620
some kind of library it's a the hull

00:07:35,900 --> 00:07:43,010
there's there's no worst thing than that

00:07:39,620 --> 00:07:46,040
you have a very stable configuration

00:07:43,010 --> 00:07:48,360
very well performant configuration and

00:07:46,040 --> 00:07:51,270
the trickiest part of that is

00:07:48,360 --> 00:07:54,930
maintaining it over time so as long as

00:07:51,270 --> 00:07:58,080
you don't I upgrade anything everything

00:07:54,930 --> 00:08:04,110
will be well so by the time you ask

00:07:58,080 --> 00:08:05,310
someone to install this 1.0.0 p4 of

00:08:04,110 --> 00:08:07,919
OpenSSL

00:08:05,310 --> 00:08:10,140
because you need that for that Python

00:08:07,919 --> 00:08:12,960
library that connects to any other place

00:08:10,140 --> 00:08:16,919
you are totally screwing them up so

00:08:12,960 --> 00:08:20,340
don't do please but given that we have

00:08:16,919 --> 00:08:23,590
singularity to rescue us

00:08:20,340 --> 00:08:26,050
I'll be talking about I will to be

00:08:23,590 --> 00:08:28,660
talking about the creation of a portable

00:08:26,050 --> 00:08:32,980
container because Michael did better

00:08:28,660 --> 00:08:35,350
than me so I'll be talking about two use

00:08:32,980 --> 00:08:38,890
cases for singularity in the HPC

00:08:35,350 --> 00:08:41,820
environment one of them is having access

00:08:38,890 --> 00:08:44,920
to InfiniBand interconnection and

00:08:41,820 --> 00:08:48,640
actually using that and the other one is

00:08:44,920 --> 00:08:51,280
having very expensive gpgpu cards

00:08:48,640 --> 00:08:55,240
installed on the machines and actually

00:08:51,280 --> 00:08:57,700
using them with the same software stack

00:08:55,240 --> 00:09:05,650
you are used to in jury room - or in

00:08:57,700 --> 00:09:07,210
your Debian laptop so well text is very

00:09:05,650 --> 00:09:10,330
small because I didn't do the

00:09:07,210 --> 00:09:12,460
presentation I'd do it very but it's

00:09:10,330 --> 00:09:16,030
uploaded to the website one of my slaves

00:09:12,460 --> 00:09:18,550
uploaded like five minutes ago so the

00:09:16,030 --> 00:09:21,130
finishing files will be available to all

00:09:18,550 --> 00:09:24,730
of you so you don't get blind by having

00:09:21,130 --> 00:09:29,740
to look at this small text size in this

00:09:24,730 --> 00:09:32,050
part are the basic comments of creating

00:09:29,740 --> 00:09:34,180
a container do you select this as

00:09:32,050 --> 00:09:36,630
parameter is important as you select the

00:09:34,180 --> 00:09:39,280
size for the container you can have

00:09:36,630 --> 00:09:41,470
container as big as you need because it

00:09:39,280 --> 00:09:44,230
creates a dispersed file on the file

00:09:41,470 --> 00:09:47,800
system so let's say you need 32

00:09:44,230 --> 00:09:50,410
gigabytes but maybe you want to be using

00:09:47,800 --> 00:09:54,370
them since the beginning of your

00:09:50,410 --> 00:09:58,470
development you will create an actual 32

00:09:54,370 --> 00:10:01,930
gigabyte file but it will be like maybe

00:09:58,470 --> 00:10:04,390
200 megabyte um on the file system so it

00:10:01,930 --> 00:10:07,120
can grow us as you're putting things

00:10:04,390 --> 00:10:09,670
inside the container the bootstrap

00:10:07,120 --> 00:10:14,020
definition is the secret sauce for

00:10:09,670 --> 00:10:15,700
singularity it's all of all of the work

00:10:14,020 --> 00:10:21,310
we singularity will belong in the

00:10:15,700 --> 00:10:24,670
definition files it's where you have a

00:10:21,310 --> 00:10:26,650
minimal set up of them of the language

00:10:24,670 --> 00:10:30,190
distribution you are going to use within

00:10:26,650 --> 00:10:33,460
the container and then you add as many

00:10:30,190 --> 00:10:33,910
software as you need and as many stages

00:10:33,460 --> 00:10:35,680
for

00:10:33,910 --> 00:10:37,840
building the software or installing any

00:10:35,680 --> 00:10:45,250
code you need to install inside the

00:10:37,840 --> 00:10:47,680
container and one of the options is

00:10:45,250 --> 00:10:49,600
expanding the container given you're

00:10:47,680 --> 00:10:52,390
running out of space because you have to

00:10:49,600 --> 00:10:55,390
download those Nvidia drivers that take

00:10:52,390 --> 00:10:58,510
one gigabyte compressed and like five

00:10:55,390 --> 00:11:02,800
uncompressed you will have to expand

00:10:58,510 --> 00:11:06,580
your container the easiest definition

00:11:02,800 --> 00:11:08,650
file is in this form the breakfasting

00:11:06,580 --> 00:11:12,250
just specifies the bootstrap method you

00:11:08,650 --> 00:11:15,610
are going to use it almost all of our

00:11:12,250 --> 00:11:18,340
work has been done on John with center

00:11:15,610 --> 00:11:21,280
ways or the bootstrap with Debian where

00:11:18,340 --> 00:11:22,960
you want to you select the operating

00:11:21,280 --> 00:11:26,020
system version and the mirror you are

00:11:22,960 --> 00:11:28,420
going to download that there's a very

00:11:26,020 --> 00:11:31,750
clever solution for that given you can

00:11:28,420 --> 00:11:33,430
install a PT catcher ng thing the

00:11:31,750 --> 00:11:38,110
Machine you are creating the containers

00:11:33,430 --> 00:11:41,350
and you only download the RPM or DEP

00:11:38,110 --> 00:11:43,840
files once and the container creation

00:11:41,350 --> 00:11:47,500
will speed up over time on the running

00:11:43,840 --> 00:11:49,000
script section it's you write the code

00:11:47,500 --> 00:11:51,910
that will be executed when you call

00:11:49,000 --> 00:11:55,420
singularity run or slash dot slash a

00:11:51,910 --> 00:11:58,840
container name and in the post section

00:11:55,420 --> 00:12:01,270
is the secret sauce part for your

00:11:58,840 --> 00:12:06,870
reproducibility as Michael was talking

00:12:01,270 --> 00:12:10,630
to us let's have a look at the example

00:12:06,870 --> 00:12:13,980
these guys have been working in a blind

00:12:10,630 --> 00:12:18,670
association in Spain so they do so tiny

00:12:13,980 --> 00:12:23,470
text in order to push you to our

00:12:18,670 --> 00:12:26,620
association of blind people we all have

00:12:23,470 --> 00:12:30,730
to concentrate on this part we are

00:12:26,620 --> 00:12:34,300
creating a bunch of directories for the

00:12:30,730 --> 00:12:37,450
paths we are going to bind between

00:12:34,300 --> 00:12:40,420
outside world given the machine and

00:12:37,450 --> 00:12:42,760
insect world given the container so

00:12:40,420 --> 00:12:44,590
let's say we have a parallel a very high

00:12:42,760 --> 00:12:47,089
speed parallel file system for scratch

00:12:44,590 --> 00:12:50,569
we can bind a

00:12:47,089 --> 00:12:53,329
this scratch inside the container so

00:12:50,569 --> 00:12:56,240
when our application running inside our

00:12:53,329 --> 00:13:01,209
environment needs to write local files

00:12:56,240 --> 00:13:06,050
per node they can be written in the

00:13:01,209 --> 00:13:09,350
fanciest hardware available and if you

00:13:06,050 --> 00:13:12,769
need to dump some of your partial

00:13:09,350 --> 00:13:16,129
results in a shared file system you can

00:13:12,769 --> 00:13:19,100
point them to a scratch file system that

00:13:16,129 --> 00:13:26,089
is shared among the machines so it gives

00:13:19,100 --> 00:13:29,420
you access to the actual enjoyable part

00:13:26,089 --> 00:13:31,850
of running code on a supercomputer on a

00:13:29,420 --> 00:13:36,920
supercomputer which is everything is

00:13:31,850 --> 00:13:40,579
faster than interrupted and by this part

00:13:36,920 --> 00:13:43,670
of the definition file you are

00:13:40,579 --> 00:13:46,279
installing every dependence you are

00:13:43,670 --> 00:13:48,589
going to need this step it is run on

00:13:46,279 --> 00:13:51,920
your local machine so the root

00:13:48,589 --> 00:13:54,379
privileges you're needing are more or

00:13:51,920 --> 00:13:56,360
less granted or can be run inside a

00:13:54,379 --> 00:13:58,399
virtual machine that you have stalled in

00:13:56,360 --> 00:14:03,949
a machine you don't have root access

00:13:58,399 --> 00:14:09,199
let's say for the run script you are

00:14:03,949 --> 00:14:14,509
loading as many environment variables

00:14:09,199 --> 00:14:17,480
you're going to need as possible so in

00:14:14,509 --> 00:14:22,660
the case of the examples you are going

00:14:17,480 --> 00:14:27,259
to it won't be there you are going to

00:14:22,660 --> 00:14:30,769
use openmpi libraries with InfiniBand

00:14:27,259 --> 00:14:34,420
with local InfiniBand drivers bind it to

00:14:30,769 --> 00:14:38,269
the image and you are going to use the

00:14:34,420 --> 00:14:41,240
openmpi version that sweets must your

00:14:38,269 --> 00:14:45,019
code so you are not limited to the

00:14:41,240 --> 00:14:47,589
openmpi version or internal MPI version

00:14:45,019 --> 00:14:51,470
available at the supercomputing Center

00:14:47,589 --> 00:14:53,929
given that we have almost magical

00:14:51,470 --> 00:14:58,160
example as Gregg told us yesterday of

00:14:53,929 --> 00:15:00,230
what can be wrong with containers this

00:14:58,160 --> 00:15:01,269
is actual coding and Spanish super

00:15:00,230 --> 00:15:08,389
computer

00:15:01,269 --> 00:15:11,509
this is native code it's a longing Saval

00:15:08,389 --> 00:15:13,999
you it's the same code run inside a

00:15:11,509 --> 00:15:17,839
saint always singularity container and

00:15:13,999 --> 00:15:21,459
the same honor you want to singularity

00:15:17,839 --> 00:15:24,799
container as you can see there's our

00:15:21,459 --> 00:15:29,689
improvement only by objecting the

00:15:24,799 --> 00:15:32,540
version of the operating system on the

00:15:29,689 --> 00:15:36,679
other hand if you follow the path of

00:15:32,540 --> 00:15:39,319
center weighs 7.3 within singularity

00:15:36,679 --> 00:15:41,480
you're not going to have so much

00:15:39,319 --> 00:15:44,359
bandwidth and the scale doesn't make

00:15:41,480 --> 00:15:48,859
sense because there's no such difference

00:15:44,359 --> 00:15:53,929
between the parts but the general idea

00:15:48,859 --> 00:15:58,389
is a container is performing better than

00:15:53,929 --> 00:16:02,449
negative code for this specific use case

00:15:58,389 --> 00:16:05,779
in terms of bandwidth a container is

00:16:02,449 --> 00:16:11,749
performing almost equal that native code

00:16:05,779 --> 00:16:14,899
within the cluster now this is the setup

00:16:11,749 --> 00:16:19,899
for the benchmarks will be uploaded with

00:16:14,899 --> 00:16:19,899
the with the presentation to the webpage

00:16:20,589 --> 00:16:30,279
another example of trying to make you

00:16:23,480 --> 00:16:35,269
blind as you as you cannot see how I

00:16:30,279 --> 00:16:37,610
will tell we are installing a DQ'd

00:16:35,269 --> 00:16:40,069
abrasion we are going to need within the

00:16:37,610 --> 00:16:43,699
container and the only thing we have to

00:16:40,069 --> 00:16:46,639
have is the driver available at the

00:16:43,699 --> 00:16:50,199
external file system given it can be

00:16:46,639 --> 00:16:54,350
loaded as a model to the kernel we can

00:16:50,199 --> 00:16:57,559
run this code with the libraries we are

00:16:54,350 --> 00:17:00,739
needing and we can take the advantage of

00:16:57,559 --> 00:17:04,760
having a very powerful DP GPU card in

00:17:00,739 --> 00:17:10,650
the in the host and we have all all of

00:17:04,760 --> 00:17:16,510
our stock values to outside the host

00:17:10,650 --> 00:17:20,679
so another example this time is with

00:17:16,510 --> 00:17:23,490
China it will be hard if you thought the

00:17:20,679 --> 00:17:30,700
other slides were the difficult ones

00:17:23,490 --> 00:17:33,880
this it's Pablo's fault now we are the

00:17:30,700 --> 00:17:37,809
bootstrapping the last person last LTS

00:17:33,880 --> 00:17:42,570
version of you want to and for the post

00:17:37,809 --> 00:17:45,880
part you can see we are compiling

00:17:42,570 --> 00:17:48,130
openmpi installing cuda inside the

00:17:45,880 --> 00:17:50,350
container so it will have much in

00:17:48,130 --> 00:17:52,179
versions of the cutest AK and killer

00:17:50,350 --> 00:17:57,240
drivers inside and outside the container

00:17:52,179 --> 00:18:00,520
and you are loading this those libraries

00:17:57,240 --> 00:18:03,700
when running the container so you don't

00:18:00,520 --> 00:18:07,000
have to take care about running some

00:18:03,700 --> 00:18:09,820
script just before calling as much or

00:18:07,000 --> 00:18:11,830
any other queue manager you are going to

00:18:09,820 --> 00:18:13,870
use because the container will take care

00:18:11,830 --> 00:18:21,040
for itself of setting up the correct

00:18:13,870 --> 00:18:22,900
environment more crappy small text now

00:18:21,040 --> 00:18:25,270
you are compiling actual actually

00:18:22,900 --> 00:18:30,490
downloading and compiling the source

00:18:25,270 --> 00:18:33,790
code for change and by the time you need

00:18:30,490 --> 00:18:36,660
to run that you are going to call the

00:18:33,790 --> 00:18:40,780
python executable inside the container

00:18:36,660 --> 00:18:44,670
with the channel example code the blacks

00:18:40,780 --> 00:18:49,210
inside the container in case you need to

00:18:44,670 --> 00:18:51,850
write your home directory will be binded

00:18:49,210 --> 00:18:55,390
directly inside the containers way so

00:18:51,850 --> 00:18:57,850
anything you are writing in the home

00:18:55,390 --> 00:19:02,340
directory inside the container will be

00:18:57,850 --> 00:19:06,420
outside also and if you need to bind the

00:19:02,340 --> 00:19:10,620
special folders for let's say drivers or

00:19:06,420 --> 00:19:15,460
libraries that for the InfiniBand stuff

00:19:10,620 --> 00:19:19,450
you combine them by passing outside path

00:19:15,460 --> 00:19:21,280
and inside path and the container run

00:19:19,450 --> 00:19:23,760
script will set up the environment for

00:19:21,280 --> 00:19:23,760
using this

00:19:24,630 --> 00:19:32,350
I'm a bit long on time so I will give

00:19:27,940 --> 00:19:34,350
you some time for questions and thank

00:19:32,350 --> 00:19:39,590
you very much for the presentation

00:19:34,350 --> 00:19:40,679
[Applause]

00:19:39,590 --> 00:19:56,470
[Music]

00:19:40,679 --> 00:19:59,500
somebody has to act something we were

00:19:56,470 --> 00:20:04,299
guessing about newer based versions of

00:19:59,500 --> 00:20:08,350
the of GCC compiling the libraries

00:20:04,299 --> 00:20:10,690
inside the container but we didn't

00:20:08,350 --> 00:20:15,220
profile that that's something we found

00:20:10,690 --> 00:20:19,600
but it's more likely that you want to

00:20:15,220 --> 00:20:23,080
sixteen is using GCC five and and sent

00:20:19,600 --> 00:20:25,210
always is using a bit older Bastion so

00:20:23,080 --> 00:20:28,419
it's it's likely it could be like that

00:20:25,210 --> 00:20:30,960
but we don't have data it's just

00:20:28,419 --> 00:20:30,960
guessing

00:20:34,500 --> 00:20:51,800
oh you will have the same permissions oh

00:20:49,120 --> 00:20:56,460
[Music]

00:20:51,800 --> 00:20:59,120
he was asking if you are binding host

00:20:56,460 --> 00:21:01,590
director is inside the container you can

00:20:59,120 --> 00:21:03,270
skylight privileges inside the container

00:21:01,590 --> 00:21:05,670
for actual file system outside the

00:21:03,270 --> 00:21:07,500
container when you are running the

00:21:05,670 --> 00:21:09,840
container for the creation part you need

00:21:07,500 --> 00:21:11,160
root privileges in the machine but by

00:21:09,840 --> 00:21:14,130
the time you are run in the container

00:21:11,160 --> 00:21:17,040
you will be running them with the actual

00:21:14,130 --> 00:21:21,060
user privileges that is running the

00:21:17,040 --> 00:21:23,040
container so in a short supercomputing

00:21:21,060 --> 00:21:28,440
environment it's likely an unprivileged

00:21:23,040 --> 00:21:30,990
user let's say you have to bind some et

00:21:28,440 --> 00:21:33,570
saliva bugs for infinite ball libraries

00:21:30,990 --> 00:21:35,820
and those files are all borrowed and

00:21:33,570 --> 00:21:37,590
only right below a root inside the

00:21:35,820 --> 00:21:40,800
container you will have the same

00:21:37,590 --> 00:21:43,020
permissions for this file so you you can

00:21:40,800 --> 00:21:46,440
not do anything inside the container

00:21:43,020 --> 00:22:10,980
that won't be allowed to you inside the

00:21:46,440 --> 00:22:12,960
country outside the container yeah you

00:22:10,980 --> 00:22:15,380
have to have module installed inside the

00:22:12,960 --> 00:22:15,380
container

00:22:45,929 --> 00:22:56,649
okay I'll just with it yeah and so the

00:22:52,269 --> 00:22:58,419
answer is essentially yes so that's the

00:22:56,649 --> 00:23:00,340
entirety of how singularities working is

00:22:58,419 --> 00:23:01,929
we're either having a set UID binary in

00:23:00,340 --> 00:23:03,850
which case all privileges are dropped

00:23:01,929 --> 00:23:06,100
before any user code is run we only use

00:23:03,850 --> 00:23:09,370
it to do certain things like that

00:23:06,100 --> 00:23:10,779
require you root privileges or on some

00:23:09,370 --> 00:23:12,850
newer kernels you can do it entirely in

00:23:10,779 --> 00:23:16,260
user space and in which case then you're

00:23:12,850 --> 00:23:16,260
using user name spaces instead

00:23:20,240 --> 00:23:28,339
[Applause]

00:24:10,280 --> 00:24:13,730
those green hats

00:24:45,690 --> 00:24:48,690

YouTube URL: https://www.youtube.com/watch?v=Kzps58hn9pM


