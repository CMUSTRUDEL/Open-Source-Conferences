Title: Resurrecting dinosaurs, what can possibly go wrong? How Containerised Applications could eat our usâ€¦
Publication date: 2018-03-06
Playlist: FOSDEM 2017
Description: 
	Resurrecting dinosaurs, what can possibly go wrong? How Containerised Applications could eat our users.
by Richard Brown

At: FOSDEM 2017

Containerised Application technologies like AppImage, Snappy and Flatpakpromise a brave new world for Linux applications, free from the worries ofshared libraries and dependency issues. Just one problem, this is a road longtravelled before, such as in the application dark ages of Win32 applicationsand DLLs. And it worked out so wonderfully there... Do we risk a future where,like the resurrected dinosaurs of Jurassic Park, this family of applicationswill break their containment and start eating our users? This session will tryto present a balanced argument about the situation, frankly discussing thebenefits promised by these technologies, but highlighting the very real issuesand risks their widespread adoption could, and in some cases are, alreadybringing to the table.

The talk with cover the promised benefits of application containers, such asAppImage, Snappy and Flatpak. It will detail the empowerment of developers whouse the technologies, the ability for upstream projects to have a much closerrole in delivering their software, and the benefits that brings to both theupstream projects and their users. But as a counter to those benefits, thesession will detail some of the risks and responsibilities that come with thattechnology. The complexities of library integration, the risk of introducingnew forms of dependency issues, and the transference of responsibility forthose issues, plus security, away from the current Distributions deliveringupstream projects towards those upstream projects directly. As a conclusion,the session will present some suggestions to upstream projects adopting thesetechnologies to start them down the road of accepting those responsibilitiesdirectly, or working more closely with existing Distribution projects to sharethe burdens these technologies now provide.


Room: Janson
Scheduled start: 2017-02-04 12:00:00
Captions: 
	00:00:00,740 --> 00:00:03,740
hello

00:00:04,650 --> 00:00:14,910
everyone so next up we have Richard

00:00:12,210 --> 00:00:17,520
Roehm and she's going to resurrect some

00:00:14,910 --> 00:00:18,510
dinosaurs for us and let's see what can

00:00:17,520 --> 00:00:27,330
go wrong with that

00:00:18,510 --> 00:00:30,060
thank you Thank You Emma yeah so I'm

00:00:27,330 --> 00:00:33,450
here from the openSUSE project to talk

00:00:30,060 --> 00:00:36,750
about our containerized applications or

00:00:33,450 --> 00:00:38,820
things like snappy flap back etc like

00:00:36,750 --> 00:00:40,770
resurrecting dinosaurs Jurassic Park

00:00:38,820 --> 00:00:44,280
eating our users how it's all going to

00:00:40,770 --> 00:00:45,660
be terrible so yeah those who can't

00:00:44,280 --> 00:00:47,160
remember the past are doomed to repeat

00:00:45,660 --> 00:00:48,480
it so before I get into the history

00:00:47,160 --> 00:00:51,390
lesson we're gonna talk a little bit

00:00:48,480 --> 00:00:54,420
about my history I've been working in in

00:00:51,390 --> 00:00:55,680
Linux now for oh let's say 12 years

00:00:54,420 --> 00:00:57,630
maybe even a little bit longer

00:00:55,680 --> 00:01:01,470
mostly contributing to the openSUSE

00:00:57,630 --> 00:01:03,930
project QA distribution building package

00:01:01,470 --> 00:01:05,339
building so I'm a you know a real distro

00:01:03,930 --> 00:01:07,140
guy you know a really interested in

00:01:05,339 --> 00:01:09,990
dealing with all of these upstream

00:01:07,140 --> 00:01:11,760
projects how those how to then package

00:01:09,990 --> 00:01:13,470
that software and then redistribute it

00:01:11,760 --> 00:01:15,120
to users you know traditionally in the

00:01:13,470 --> 00:01:17,550
form of a distribution you know consumer

00:01:15,120 --> 00:01:18,900
and so and so I have kind of been

00:01:17,550 --> 00:01:21,720
looking at this problem from from very

00:01:18,900 --> 00:01:23,490
much that perspective before that so you

00:01:21,720 --> 00:01:24,540
know alongside that I have also been you

00:01:23,490 --> 00:01:27,600
know working as a system administrator

00:01:24,540 --> 00:01:29,640
so I've been actually dealing on the you

00:01:27,600 --> 00:01:31,950
know how hard end of things with users

00:01:29,640 --> 00:01:34,830
in the real world dealing with software

00:01:31,950 --> 00:01:36,120
and dealing with operating systems other

00:01:34,830 --> 00:01:38,790
than the wonderful ones that work in

00:01:36,120 --> 00:01:40,530
open source so starting at the very

00:01:38,790 --> 00:01:41,970
beginning I never thought I'd be

00:01:40,530 --> 00:01:43,830
presenting at FOSDEM and having an

00:01:41,970 --> 00:01:47,700
opening slide of a Windows 95

00:01:43,830 --> 00:01:50,159
architecture diagram but this is a place

00:01:47,700 --> 00:01:54,810
to start with really back in Windows 95

00:01:50,159 --> 00:01:56,610
windows Windows 3.1 the traditional

00:01:54,810 --> 00:02:01,260
dependency problem is best exemplified

00:01:56,610 --> 00:02:03,270
by DLL hell you know Windows $19.00

00:02:01,260 --> 00:02:04,590
trying to you know so all these

00:02:03,270 --> 00:02:06,299
wonderful dependency problems and their

00:02:04,590 --> 00:02:07,799
solution was pretty much okay let's have

00:02:06,299 --> 00:02:09,720
these things called dll's

00:02:07,799 --> 00:02:11,730
and let's shove all these libraries and

00:02:09,720 --> 00:02:14,279
dump them in see windows or see windows

00:02:11,730 --> 00:02:16,319
system and every application will just

00:02:14,279 --> 00:02:17,340
consume them from there and everything

00:02:16,319 --> 00:02:19,230
will be wonderful

00:02:17,340 --> 00:02:23,060
but of course it's windows so it wasn't

00:02:19,230 --> 00:02:25,860
you know it's even even down to

00:02:23,060 --> 00:02:27,720
absolutely nobody not even Microsoft

00:02:25,860 --> 00:02:29,760
taking care of any kind of ABI

00:02:27,720 --> 00:02:31,650
backwards-compatibility every single

00:02:29,760 --> 00:02:33,989
update either from an application or

00:02:31,650 --> 00:02:36,780
from the system goes into our Cheetos

00:02:33,989 --> 00:02:38,280
dll's and then every application that

00:02:36,780 --> 00:02:41,310
work ID on it all end up magically

00:02:38,280 --> 00:02:42,810
breaking even if you had people who took

00:02:41,310 --> 00:02:45,480
care of that and dealt with that and

00:02:42,810 --> 00:02:47,730
actually had certain runtimes and

00:02:45,480 --> 00:02:49,769
libraries you know taken me up well

00:02:47,730 --> 00:02:52,950
maintained and patched carefully and

00:02:49,769 --> 00:02:56,040
reservedly you still had nonsense like

00:02:52,950 --> 00:02:58,440
the global klom come class IDs so you

00:02:56,040 --> 00:03:01,230
know a single application ends up

00:02:58,440 --> 00:03:02,549
stealing the resources from another if

00:03:01,230 --> 00:03:04,290
any program we wanted to create an

00:03:02,549 --> 00:03:07,129
instance of that class it just always

00:03:04,290 --> 00:03:11,970
broke it was a mess it was a nightmare

00:03:07,129 --> 00:03:15,510
and as a developer working with that

00:03:11,970 --> 00:03:17,519
stuff in real terms it was a nightmare

00:03:15,510 --> 00:03:20,579
to work with you know every single

00:03:17,519 --> 00:03:22,829
application had to be developed with

00:03:20,579 --> 00:03:24,780
every single combination of every single

00:03:22,829 --> 00:03:26,730
set of libraries that every user might

00:03:24,780 --> 00:03:29,700
have and whichever version combination

00:03:26,730 --> 00:03:31,859
they might have and then dev that way

00:03:29,700 --> 00:03:33,120
and tested that way and then of course

00:03:31,859 --> 00:03:34,950
you need to do an upgrade to your

00:03:33,120 --> 00:03:37,170
application so your patch you have to

00:03:34,950 --> 00:03:39,359
then retest everything and then of

00:03:37,170 --> 00:03:41,459
course your various upstream and other

00:03:39,359 --> 00:03:42,930
projects are changing their D allows and

00:03:41,459 --> 00:03:44,250
there haven't you every patch all of

00:03:42,930 --> 00:03:45,989
that and then even if you did everything

00:03:44,250 --> 00:03:48,299
perfectly you still end up crying

00:03:45,989 --> 00:03:51,260
because it's still ended up breaking and

00:03:48,299 --> 00:03:54,419
then Windows 2000 came along and

00:03:51,260 --> 00:03:57,690
Microsoft claimed they fixed it and in

00:03:54,419 --> 00:03:59,940
many ways they did it came along and

00:03:57,690 --> 00:04:01,950
they said ok we realized this is a mess

00:03:59,940 --> 00:04:03,989
we're gonna stop putting all of our

00:04:01,950 --> 00:04:05,790
shared libraries in one big dumping

00:04:03,989 --> 00:04:08,459
ground in the system in the you know the

00:04:05,790 --> 00:04:10,410
root filesystem in C windows or C Window

00:04:08,459 --> 00:04:13,620
System and we've got this wonderful

00:04:10,410 --> 00:04:16,620
thing called side by side assembly which

00:04:13,620 --> 00:04:19,070
is basically containerization I mean

00:04:16,620 --> 00:04:22,260
obviously the lack of Sam boxing but

00:04:19,070 --> 00:04:24,030
generally speaking it completely changed

00:04:22,260 --> 00:04:25,800
how you practically delivered

00:04:24,030 --> 00:04:28,229
applications on a Windows fast on a

00:04:25,800 --> 00:04:30,210
weight on a Windows system then all the

00:04:28,229 --> 00:04:32,759
develop had to do was take

00:04:30,210 --> 00:04:35,130
Exe and the DLLs that they cared about

00:04:32,759 --> 00:04:37,590
and they deliver them in an earth

00:04:35,130 --> 00:04:39,930
application folder on the user system

00:04:37,590 --> 00:04:41,699
and windows would give it a nice

00:04:39,930 --> 00:04:44,069
separate memory space load up those

00:04:41,699 --> 00:04:46,319
tlo's only in that memory space private

00:04:44,069 --> 00:04:47,819
to that application so you didn't have

00:04:46,319 --> 00:04:48,930
to worry about what the system dll's

00:04:47,819 --> 00:04:51,720
were going to do a mess around with that

00:04:48,930 --> 00:04:53,580
if you were relying on the system D

00:04:51,720 --> 00:04:55,590
allows you could be way more certain

00:04:53,580 --> 00:04:57,330
that no third party was going to go

00:04:55,590 --> 00:04:59,550
messing around and breaking them on your

00:04:57,330 --> 00:05:02,849
users machines because Windows was now

00:04:59,550 --> 00:05:08,550
protecting every single system diello

00:05:02,849 --> 00:05:10,020
with their WS f feet o WF P and for

00:05:08,550 --> 00:05:13,289
those handling the whole transition

00:05:10,020 --> 00:05:16,320
between 95 and 2000 they even had this

00:05:13,289 --> 00:05:18,240
wonderful tool ducts so you could take a

00:05:16,320 --> 00:05:19,680
nasty old school application with

00:05:18,240 --> 00:05:22,590
everything scattered all over the place

00:05:19,680 --> 00:05:24,270
and run ups against it it'll figure out

00:05:22,590 --> 00:05:26,250
where all those dll's hooks are and then

00:05:24,270 --> 00:05:28,979
you could just bundle all of that into

00:05:26,250 --> 00:05:30,330
your application folder mmm migrate

00:05:28,979 --> 00:05:32,310
everything along and everything was

00:05:30,330 --> 00:05:34,080
happy and everything was wonderful and

00:05:32,310 --> 00:05:36,750
you didn't even have to do it

00:05:34,080 --> 00:05:39,870
necessarily whether a Windows 32

00:05:36,750 --> 00:05:42,900
application had run time is in there for

00:05:39,870 --> 00:05:44,280
POSIX runtimes in there for os/2 I don't

00:05:42,900 --> 00:05:46,020
know anyone who ever really used him in

00:05:44,280 --> 00:05:49,139
anger but you know they were there this

00:05:46,020 --> 00:05:51,659
is the Windows 2000 diagram so the

00:05:49,139 --> 00:05:55,320
problem is solved right nonsense this is

00:05:51,659 --> 00:05:57,539
Microsoft we're talking about it was and

00:05:55,320 --> 00:06:00,750
is and remains an absolute security

00:05:57,539 --> 00:06:02,669
nightmare from meet you know how many

00:06:00,750 --> 00:06:05,909
exploits are out there that are some

00:06:02,669 --> 00:06:08,280
random security DLL sitting in some

00:06:05,909 --> 00:06:10,229
random application folder that security

00:06:08,280 --> 00:06:11,699
relevant that everybody is having a

00:06:10,229 --> 00:06:14,340
wonderful time exploiting because

00:06:11,699 --> 00:06:17,159
so-and-so hasn't updated that dll in

00:06:14,340 --> 00:06:19,199
their application it's constantly

00:06:17,159 --> 00:06:21,900
constantly happening and it's happening

00:06:19,199 --> 00:06:24,960
because also there is no centralized way

00:06:21,900 --> 00:06:26,460
of updating these applications so every

00:06:24,960 --> 00:06:28,169
single Windows application developer

00:06:26,460 --> 00:06:29,520
then has to worry about okay how are we

00:06:28,169 --> 00:06:31,560
good we've got it okay we've got the

00:06:29,520 --> 00:06:34,020
security issue we fix this DLL

00:06:31,560 --> 00:06:36,509
we fix our own application how do we

00:06:34,020 --> 00:06:37,889
then deliver that to our users Oh fine

00:06:36,509 --> 00:06:39,870
we'll just make an update him and then

00:06:37,889 --> 00:06:41,199
you end up with the Adobe updater and

00:06:39,870 --> 00:06:44,949
steam and

00:06:41,199 --> 00:06:47,139
and one issue that doesn't get talked

00:06:44,949 --> 00:06:50,349
about a lot but especially in the open

00:06:47,139 --> 00:06:52,150
source side of things I think gets ya at

00:06:50,349 --> 00:06:53,889
least far more lights depend on it as

00:06:52,150 --> 00:06:57,159
well is when you're bundling these

00:06:53,889 --> 00:07:01,419
libraries do the licenses actually

00:06:57,159 --> 00:07:03,900
permit that use we how many how many how

00:07:01,419 --> 00:07:06,279
many GPL cases do we have if some

00:07:03,900 --> 00:07:08,439
license just bundled in with application

00:07:06,279 --> 00:07:11,080
but nobody realized actually that can't

00:07:08,439 --> 00:07:13,270
be thrown away in there and this is

00:07:11,080 --> 00:07:15,699
something happened more more often in

00:07:13,270 --> 00:07:18,189
the windows world of course it wasn't

00:07:15,699 --> 00:07:20,499
terrible storage vendors love it because

00:07:18,189 --> 00:07:21,849
this ended up needing to be used more

00:07:20,499 --> 00:07:24,509
and more and more because you're putting

00:07:21,849 --> 00:07:26,740
on a whole bunch of TLS on the system

00:07:24,509 --> 00:07:28,810
but you know they're the only people who

00:07:26,740 --> 00:07:32,249
are happy and you know I guess people

00:07:28,810 --> 00:07:35,020
like spending money on more hard disks

00:07:32,249 --> 00:07:39,879
meanwhile at the same time in Linux land

00:07:35,020 --> 00:07:42,550
we were looking on smugly because we

00:07:39,879 --> 00:07:45,069
thought we'd already fix this kind of

00:07:42,550 --> 00:07:47,439
and we'd fixed it because we delivered

00:07:45,069 --> 00:07:48,789
our software in distributions and I

00:07:47,439 --> 00:07:50,289
could talk about all the technical

00:07:48,789 --> 00:07:53,259
details of which distributions better

00:07:50,289 --> 00:07:55,000
and bla bla bla but purely from sort of

00:07:53,259 --> 00:07:58,149
a philosophical and organizational

00:07:55,000 --> 00:08:00,819
perspective every distribution dealt

00:07:58,149 --> 00:08:02,770
with these issues and actually resolved

00:08:00,819 --> 00:08:04,629
them just by doing the work they were

00:08:02,770 --> 00:08:06,310
doing regardless of the technical

00:08:04,629 --> 00:08:11,080
choices of package manager and build

00:08:06,310 --> 00:08:13,569
tool and other such things because any

00:08:11,080 --> 00:08:15,819
responsible distribution at least had a

00:08:13,569 --> 00:08:17,439
care about the security of the software

00:08:15,819 --> 00:08:19,539
they were delivering to their users they

00:08:17,439 --> 00:08:21,069
have security teams they're auditing the

00:08:19,539 --> 00:08:23,919
packages they're putting in their

00:08:21,069 --> 00:08:25,180
distribution they're monitoring CVEs for

00:08:23,919 --> 00:08:26,710
the packages they're putting in their

00:08:25,180 --> 00:08:28,870
distribution they're rolling out

00:08:26,710 --> 00:08:31,240
security updates when it goes wrong in

00:08:28,870 --> 00:08:32,680
the case of enterprise or commercially

00:08:31,240 --> 00:08:33,940
linked distributions you know you're

00:08:32,680 --> 00:08:35,529
also likely to have them on the

00:08:33,940 --> 00:08:38,349
embargoed security list and therefore

00:08:35,529 --> 00:08:40,360
getting information about those CVEs

00:08:38,349 --> 00:08:42,130
before they end up being public so

00:08:40,360 --> 00:08:43,719
you've got a chance of at least getting

00:08:42,130 --> 00:08:45,510
an update out on the day of the

00:08:43,719 --> 00:08:47,770
announcement

00:08:45,510 --> 00:08:49,360
broader than that just not worrying

00:08:47,770 --> 00:08:51,910
about the security side of things

00:08:49,360 --> 00:08:53,380
you've got package maintainer who were

00:08:51,910 --> 00:08:55,590
you know they're out in the community

00:08:53,380 --> 00:08:58,000
wanting to package their software

00:08:55,590 --> 00:09:00,580
keeping it updated putting it in the

00:08:58,000 --> 00:09:03,520
distribution so the whole how do we

00:09:00,580 --> 00:09:05,050
maintain this stuff is partly handled by

00:09:03,520 --> 00:09:06,400
these maintainer x' doing it just

00:09:05,050 --> 00:09:10,330
because they want to run their software

00:09:06,400 --> 00:09:11,650
on their distribution of choice and of

00:09:10,330 --> 00:09:13,660
course like I said any responsible

00:09:11,650 --> 00:09:15,820
distribution as well also has a legal

00:09:13,660 --> 00:09:17,980
team looking at their packages making

00:09:15,820 --> 00:09:20,290
sure that the license the licenses of

00:09:17,980 --> 00:09:21,730
the software that they're delivering are

00:09:20,290 --> 00:09:22,870
compatible with each other

00:09:21,730 --> 00:09:25,060
so you're not delivering it in a way

00:09:22,870 --> 00:09:27,250
that is invalid with the require the

00:09:25,060 --> 00:09:29,560
desires of the requirements of the

00:09:27,250 --> 00:09:31,330
developer in question and just you know

00:09:29,560 --> 00:09:34,030
generally compliant you're not out you

00:09:31,330 --> 00:09:38,170
know awfully breaking laws by bundling

00:09:34,030 --> 00:09:40,210
stuff in the breaks licenses so even

00:09:38,170 --> 00:09:42,100
though we're kind of doing the Windows

00:09:40,210 --> 00:09:43,750
3.1 dumping everything in one shared

00:09:42,100 --> 00:09:47,440
bundle and generally live machette like

00:09:43,750 --> 00:09:49,800
these things aren't too bad and when

00:09:47,440 --> 00:09:52,090
we're talking about containerization and

00:09:49,800 --> 00:09:54,010
yeah container waster tools like flat

00:09:52,090 --> 00:09:55,510
back and snappy you know everyone so

00:09:54,010 --> 00:09:57,190
let's kill off shared libraries that's

00:09:55,510 --> 00:09:59,110
just you know it's a it's a mess

00:09:57,190 --> 00:10:02,260
you know this space doesn't matter now

00:09:59,110 --> 00:10:03,640
anyway everyone's got bigger discs but

00:10:02,260 --> 00:10:06,550
when you start looking at the real work

00:10:03,640 --> 00:10:08,140
of maintaining everything shared

00:10:06,550 --> 00:10:09,690
libraries have another benefit you know

00:10:08,140 --> 00:10:11,620
it's not just about the disk space

00:10:09,690 --> 00:10:13,750
distributing fewer libraries means

00:10:11,620 --> 00:10:15,340
you've got less work worrying about that

00:10:13,750 --> 00:10:16,960
security the security implications

00:10:15,340 --> 00:10:18,610
you've got one set of libraries to worry

00:10:16,960 --> 00:10:20,770
about auditing one sort of lobbies to

00:10:18,610 --> 00:10:22,990
worry about patching less manpower to

00:10:20,770 --> 00:10:25,720
maintain it and it's easy to view that

00:10:22,990 --> 00:10:27,130
legal compliance especially when despite

00:10:25,720 --> 00:10:29,440
everybody's best efforts you know

00:10:27,130 --> 00:10:32,290
projects love changing their licenses

00:10:29,440 --> 00:10:34,540
and there is nothing worse than one

00:10:32,290 --> 00:10:36,130
version of a product being project of on

00:10:34,540 --> 00:10:37,870
being on one license and then changing

00:10:36,130 --> 00:10:40,660
to another and figuring out okay can we

00:10:37,870 --> 00:10:42,400
can we ship both are they compatible you

00:10:40,660 --> 00:10:43,780
know we've we've seen that before where

00:10:42,400 --> 00:10:45,520
project ended up actually you know we

00:10:43,780 --> 00:10:46,810
have to move because their license isn't

00:10:45,520 --> 00:10:51,130
actually compatible with their old one

00:10:46,810 --> 00:10:52,780
it's it's yeah so shared libraries do

00:10:51,130 --> 00:10:55,060
solve a lot of those issues by at least

00:10:52,780 --> 00:10:56,920
giving you one contain you know one

00:10:55,060 --> 00:10:57,570
integrated base once you've done the

00:10:56,920 --> 00:11:00,660
work to actually

00:10:57,570 --> 00:11:02,520
that base together so mission

00:11:00,660 --> 00:11:04,380
accomplished well no you know the

00:11:02,520 --> 00:11:06,570
traditional distribution model also has

00:11:04,380 --> 00:11:09,390
its flaws and these are the flaws which

00:11:06,570 --> 00:11:11,430
containerized apps really sell promises

00:11:09,390 --> 00:11:13,050
trying to fix you know improving the

00:11:11,430 --> 00:11:14,430
compatibility so developers don't have

00:11:13,050 --> 00:11:16,620
to rewrite their application for all

00:11:14,430 --> 00:11:17,600
these different shows and bases of the

00:11:16,620 --> 00:11:19,950
distribution

00:11:17,600 --> 00:11:21,780
obviously portability also so you can

00:11:19,950 --> 00:11:26,100
just do it once and then have it work

00:11:21,780 --> 00:11:27,660
everywhere and distributions typically

00:11:26,100 --> 00:11:30,810
like to do that work at a certain

00:11:27,660 --> 00:11:32,160
cadence and that cadence is unlikely to

00:11:30,810 --> 00:11:34,860
actually match the application

00:11:32,160 --> 00:11:36,510
developers cadence so therefore the

00:11:34,860 --> 00:11:38,640
issue of pace of change comes up of you

00:11:36,510 --> 00:11:41,340
know a new upstream release has happened

00:11:38,640 --> 00:11:42,720
and no distribution is shipping that new

00:11:41,340 --> 00:11:44,520
version because you know they've

00:11:42,720 --> 00:11:47,190
released a tool says they'll do it in 8

00:11:44,520 --> 00:11:48,570
months or whatever but the reason they

00:11:47,190 --> 00:11:51,690
do that is because it doesn't yeah they

00:11:48,570 --> 00:11:54,870
want to make sure it works so there we

00:11:51,690 --> 00:11:58,250
are like I said a little bit like the

00:11:54,870 --> 00:11:58,250
Windows 3.1 situation

00:12:00,360 --> 00:12:04,230
the compatibility problem the

00:12:02,939 --> 00:12:06,389
containerized apps are trying to solve

00:12:04,230 --> 00:12:08,129
really both down to these simple points

00:12:06,389 --> 00:12:08,910
you know we we have lots of

00:12:08,129 --> 00:12:12,360
distributions

00:12:08,910 --> 00:12:13,829
you know maybe too many of them with

00:12:12,360 --> 00:12:16,889
many different libraries different apps

00:12:13,829 --> 00:12:18,149
and different modifications in their the

00:12:16,889 --> 00:12:20,819
applications themselves require

00:12:18,149 --> 00:12:23,369
different libraries and application

00:12:20,819 --> 00:12:24,959
developers don't care and they don't

00:12:23,369 --> 00:12:26,759
want to care and they're never going to

00:12:24,959 --> 00:12:28,319
want the care they just want to build

00:12:26,759 --> 00:12:35,100
something that works and push it out

00:12:28,319 --> 00:12:36,989
there which is fine but most people but

00:12:35,100 --> 00:12:39,029
we've solved this problem in the in the

00:12:36,989 --> 00:12:40,379
distribution world already we have

00:12:39,029 --> 00:12:42,660
maintained errs who deal with all that

00:12:40,379 --> 00:12:43,999
work it's not upstream packages putting

00:12:42,660 --> 00:12:46,799
stuff in distribution first at the time

00:12:43,999 --> 00:12:48,540
its distribution packages figuring out

00:12:46,799 --> 00:12:50,040
what crazy stuff upstream have done and

00:12:48,540 --> 00:12:53,459
then distributing it in the distribution

00:12:50,040 --> 00:12:55,199
and it works wonderfully when it comes

00:12:53,459 --> 00:12:58,709
to free and open source license

00:12:55,199 --> 00:13:02,399
applications obviously proprietary

00:12:58,709 --> 00:13:04,589
applications whole different story on

00:13:02,399 --> 00:13:06,449
the portability side of things much the

00:13:04,589 --> 00:13:07,980
same story much the same problem you

00:13:06,449 --> 00:13:09,629
know if you're doing all of this work to

00:13:07,980 --> 00:13:11,129
get the thing working you only want to

00:13:09,629 --> 00:13:12,869
do it once you don't want to have to

00:13:11,129 --> 00:13:15,079
repeat this three times four times five

00:13:12,869 --> 00:13:18,389
times and with a very diverse

00:13:15,079 --> 00:13:20,910
distribution ecosystem having a nice

00:13:18,389 --> 00:13:22,860
application that open and built ones and

00:13:20,910 --> 00:13:28,919
runs everywhere definitely has a certain

00:13:22,860 --> 00:13:32,569
appeal but again does it really matter

00:13:28,919 --> 00:13:32,569
if somebody's rebuilding it anyway

00:13:35,870 --> 00:13:40,970
and then the pace of change problem like

00:13:39,140 --> 00:13:44,360
I say distributions generally have fixed

00:13:40,970 --> 00:13:45,830
release schedules and those release

00:13:44,360 --> 00:13:48,020
schedules generally mean the package

00:13:45,830 --> 00:13:49,580
versions are frozen in there any changes

00:13:48,020 --> 00:13:52,070
are very reluctant if they are going to

00:13:49,580 --> 00:13:53,710
be in there so that holds back the new

00:13:52,070 --> 00:13:56,630
versions new innovations new things

00:13:53,710 --> 00:14:01,130
project is released from users that's a

00:13:56,630 --> 00:14:03,529
bad thing rolling distributions are

00:14:01,130 --> 00:14:05,180
becoming more and more of a trend in my

00:14:03,529 --> 00:14:06,080
in the case of openSUSE we're now

00:14:05,180 --> 00:14:07,490
running you know we're now doing

00:14:06,080 --> 00:14:10,970
tumbleweed as one of our main

00:14:07,490 --> 00:14:12,770
distributions and this totally solves

00:14:10,970 --> 00:14:14,750
that problem in fact in many cases we're

00:14:12,770 --> 00:14:16,730
now not only keeping pace with upstream

00:14:14,750 --> 00:14:18,290
projects in some cases we sometimes

00:14:16,730 --> 00:14:19,670
outpace it and then have to actually

00:14:18,290 --> 00:14:21,670
slow things down so we're not shipping

00:14:19,670 --> 00:14:25,010
their next release before they are

00:14:21,670 --> 00:14:26,839
because it's all and get so we just tell

00:14:25,010 --> 00:14:31,480
plug build service and to get and

00:14:26,839 --> 00:14:35,110
everything's fine and wonderful kind of

00:14:31,480 --> 00:14:37,750
but that's the distro side of things

00:14:35,110 --> 00:14:40,000
containerized applications want to solve

00:14:37,750 --> 00:14:41,890
the same problems and when I'm talking

00:14:40,000 --> 00:14:44,560
about this I'm talking really about app

00:14:41,890 --> 00:14:48,220
image flat-pack and snapping of course

00:14:44,560 --> 00:14:50,860
app image started in 2003 flat-pack 2013

00:14:48,220 --> 00:14:52,810
and snappy so yeah flat-pack has been

00:14:50,860 --> 00:14:56,680
doing this for a very happy much have

00:14:52,810 --> 00:14:58,240
been doing this for a very long time I'm

00:14:56,680 --> 00:15:00,550
not going to go into the ins and outs of

00:14:58,240 --> 00:15:02,800
you know how they all individually work

00:15:00,550 --> 00:15:04,690
or compare them talking in general terms

00:15:02,800 --> 00:15:06,130
because these issues are shared across

00:15:04,690 --> 00:15:09,160
all of them so you know generally

00:15:06,130 --> 00:15:12,040
speaking their bunt they produce a

00:15:09,160 --> 00:15:14,410
bundle be at a tarball or some other way

00:15:12,040 --> 00:15:16,149
of packaging things up containing an

00:15:14,410 --> 00:15:18,579
application and all the dependencies or

00:15:16,149 --> 00:15:20,589
the likely to dip requires and then they

00:15:18,579 --> 00:15:25,209
run it in some kind of container or

00:15:20,589 --> 00:15:27,040
chroot or sandbox and they make huge

00:15:25,209 --> 00:15:28,720
promises these are all ripped straight

00:15:27,040 --> 00:15:30,220
from their web sites straight from their

00:15:28,720 --> 00:15:31,779
documentation you know all the

00:15:30,220 --> 00:15:32,829
compatibility problems are solved she

00:15:31,779 --> 00:15:34,779
just put everything in there

00:15:32,829 --> 00:15:36,579
everything's going to work fine

00:15:34,779 --> 00:15:37,779
you know the portability problems

00:15:36,579 --> 00:15:39,190
herself you just put everything there

00:15:37,779 --> 00:15:40,720
you can run out on every distribution

00:15:39,190 --> 00:15:43,480
everything is absolutely fine and

00:15:40,720 --> 00:15:44,950
wonderful pace of change Bob you're the

00:15:43,480 --> 00:15:47,110
one doing it you're doing the the

00:15:44,950 --> 00:15:49,060
upstream source you then can do your app

00:15:47,110 --> 00:15:50,410
image your flat back everything's fine

00:15:49,060 --> 00:15:55,329
and it's just gonna work everything's

00:15:50,410 --> 00:15:58,540
perfect and then you get architecture

00:15:55,329 --> 00:16:00,630
diagrams like this or like this one from

00:15:58,540 --> 00:16:04,200
flat back

00:16:00,630 --> 00:16:08,690
and it's a bit too fuzzy so I'll stick

00:16:04,200 --> 00:16:12,030
with this one what you end up with these

00:16:08,690 --> 00:16:13,830
tool sets actually doing is taking the

00:16:12,030 --> 00:16:16,380
application the set of dependencies

00:16:13,830 --> 00:16:19,260
which in the case of snappy and flat

00:16:16,380 --> 00:16:23,160
pack actually include frameworks or run

00:16:19,260 --> 00:16:24,870
times where there's effectively pre pre

00:16:23,160 --> 00:16:27,030
pre curated bundles of these

00:16:24,870 --> 00:16:28,350
applications or sitting there and then

00:16:27,030 --> 00:16:29,940
below that there's just the operating

00:16:28,350 --> 00:16:31,380
system and you don't have to worry about

00:16:29,940 --> 00:16:32,640
that you know the case of snappy it's

00:16:31,380 --> 00:16:34,500
you know they're always going to say a

00:16:32,640 --> 00:16:36,390
bun - I quite like flat pack because

00:16:34,500 --> 00:16:37,980
they just say an operating system which

00:16:36,390 --> 00:16:42,960
is if you're going to do this that's how

00:16:37,980 --> 00:16:44,460
it should be the problem is you're

00:16:42,960 --> 00:16:48,120
making assumptions about what is

00:16:44,460 --> 00:16:49,860
actually below that line soon you know

00:16:48,120 --> 00:16:51,690
you've taken the dependency problem of

00:16:49,860 --> 00:16:54,240
okay my application needed this library

00:16:51,690 --> 00:16:56,910
and now it's my application and all of

00:16:54,240 --> 00:17:01,860
its dependencies need this version of G

00:16:56,910 --> 00:17:03,330
Lipsy or this kernel or whatever and no

00:17:01,860 --> 00:17:08,939
one's quite defined where that line is

00:17:03,330 --> 00:17:11,939
yet and there's no common base every

00:17:08,939 --> 00:17:13,439
distribution is different even debian

00:17:11,939 --> 00:17:14,910
distributions in that family are

00:17:13,439 --> 00:17:16,439
different rpm distributions in that

00:17:14,910 --> 00:17:17,880
family are different we package things

00:17:16,439 --> 00:17:19,079
in different ways because we've solved

00:17:17,880 --> 00:17:22,020
these problems differently in our in

00:17:19,079 --> 00:17:23,459
environments over the years so sooner or

00:17:22,020 --> 00:17:26,010
later as you start crossing that line

00:17:23,459 --> 00:17:29,160
between the containerized application

00:17:26,010 --> 00:17:31,890
and it's run times and whatever it's

00:17:29,160 --> 00:17:34,530
getting from the base system it's gonna

00:17:31,890 --> 00:17:37,260
start breaking and like I said app image

00:17:34,530 --> 00:17:38,850
have been doing this since 2003 and they

00:17:37,260 --> 00:17:40,430
know this problem they don't lie about

00:17:38,850 --> 00:17:43,500
this they don't do graphs like this

00:17:40,430 --> 00:17:46,110
instead in their documentation they

00:17:43,500 --> 00:17:47,910
outright say that the only way you can

00:17:46,110 --> 00:17:50,280
build a portable image with that image

00:17:47,910 --> 00:17:53,070
is decide which distributions you're

00:17:50,280 --> 00:17:55,290
targeting and then look at every

00:17:53,070 --> 00:17:59,790
dependency you need that not in any of

00:17:55,290 --> 00:18:03,040
those and put them all in there it'll

00:17:59,790 --> 00:18:05,200
work but that's a huge amount of work

00:18:03,040 --> 00:18:07,720
but that's what you have to do to

00:18:05,200 --> 00:18:09,700
actually avoid this issue we're seeing

00:18:07,720 --> 00:18:11,410
this in openSUSE who is like steam which

00:18:09,700 --> 00:18:13,600
is doesn't quite fit into this model but

00:18:11,410 --> 00:18:15,790
you know steam is effectively delivered

00:18:13,600 --> 00:18:17,380
on on Linux as a bun to one time with

00:18:15,790 --> 00:18:19,930
steam running on top so I mean kind of

00:18:17,380 --> 00:18:21,640
following this same model again that

00:18:19,930 --> 00:18:23,020
runtime makes assumptions as soon as we

00:18:21,640 --> 00:18:24,580
change something in our base system that

00:18:23,020 --> 00:18:25,930
is incompatible with what they're

00:18:24,580 --> 00:18:28,980
expecting from a you know they're

00:18:25,930 --> 00:18:31,660
bunching 1 times expecting it all breaks

00:18:28,980 --> 00:18:33,010
you need to worry about the dependencies

00:18:31,660 --> 00:18:34,330
you've just shifted the problem from

00:18:33,010 --> 00:18:40,300
higher up the stack to lower down the

00:18:34,330 --> 00:18:42,130
stack so if you really want to make a

00:18:40,300 --> 00:18:44,490
portable application you have to put in

00:18:42,130 --> 00:18:47,980
every single dependency you might need

00:18:44,490 --> 00:18:51,790
if not expect trashes your users will

00:18:47,980 --> 00:18:53,430
not be able to use your application so

00:18:51,790 --> 00:18:56,020
what's the point

00:18:53,430 --> 00:18:58,150
well like I said in the case of flat

00:18:56,020 --> 00:19:00,580
pack and snappy they're trying to

00:18:58,150 --> 00:19:03,130
mitigate this problem by doing one time

00:19:00,580 --> 00:19:04,870
so at least you say with flat pack you

00:19:03,130 --> 00:19:06,580
have like the G together known runtime

00:19:04,870 --> 00:19:08,230
in there you effectively have all of the

00:19:06,580 --> 00:19:10,360
libraries all of the dependencies to do

00:19:08,230 --> 00:19:12,370
a gnome application sitting in that one

00:19:10,360 --> 00:19:14,830
time so as a developer you can at least

00:19:12,370 --> 00:19:17,410
target that runtime know that's going to

00:19:14,830 --> 00:19:19,390
be there generally hope that everything

00:19:17,410 --> 00:19:22,570
further down the stack is sane and ok

00:19:19,390 --> 00:19:24,850
and just get on and do the work and it

00:19:22,570 --> 00:19:26,830
does mitigate the problem but at the

00:19:24,850 --> 00:19:28,030
same time even you've generated a whole

00:19:26,830 --> 00:19:31,270
nother one which I'll talk about in a

00:19:28,030 --> 00:19:34,480
minute and the responsibility of that

00:19:31,270 --> 00:19:36,070
kind of middle distro becomes you know

00:19:34,480 --> 00:19:37,840
really hard to do their job right they

00:19:36,070 --> 00:19:39,310
have to then make sure that runtime is

00:19:37,840 --> 00:19:41,440
keeping up-to-date with everything that

00:19:39,310 --> 00:19:44,440
that one time is secure at runtime is

00:19:41,440 --> 00:19:45,310
all patched and those answers are

00:19:44,440 --> 00:19:49,270
something which is still in a very

00:19:45,310 --> 00:19:52,360
jessica state at the moment I'm not sure

00:19:49,270 --> 00:19:53,770
about the real solution but looking at

00:19:52,360 --> 00:19:55,510
it from a district perspective you know

00:19:53,770 --> 00:19:57,430
way back when we had this concept of a

00:19:55,510 --> 00:19:59,710
Linux tended base of you know a common

00:19:57,430 --> 00:20:02,590
Linux that every developer could just

00:19:59,710 --> 00:20:04,570
assume is underneath there of course

00:20:02,590 --> 00:20:07,210
that was a pretty hard and pretty

00:20:04,570 --> 00:20:08,590
impossible agreement to make but now

00:20:07,210 --> 00:20:10,390
with these applications with

00:20:08,590 --> 00:20:12,220
containerization becoming more maybe

00:20:10,390 --> 00:20:13,750
it's time to revisit that idea because

00:20:12,220 --> 00:20:15,360
like I say the dependency problem gets

00:20:13,750 --> 00:20:17,080
shifted around by these technologies

00:20:15,360 --> 00:20:18,670
maybe collect

00:20:17,080 --> 00:20:20,110
the distributions should be to get

00:20:18,670 --> 00:20:22,570
around the table and find out okay

00:20:20,110 --> 00:20:24,790
you know here's the new line is where

00:20:22,570 --> 00:20:26,470
we're gonna tell every contain a

00:20:24,790 --> 00:20:28,360
developer you know we'll worry about

00:20:26,470 --> 00:20:31,210
this and we'll do this in a roughly

00:20:28,360 --> 00:20:32,860
standard kind of way and then work on

00:20:31,210 --> 00:20:37,870
from there so you know maybe we need a

00:20:32,860 --> 00:20:39,310
new LSB that actually works so the

00:20:37,870 --> 00:20:41,200
reality of the big promises of

00:20:39,310 --> 00:20:43,240
containerized applications is well

00:20:41,200 --> 00:20:44,890
they're not going to be compatible you

00:20:43,240 --> 00:20:47,020
do you know unless you're going to worry

00:20:44,890 --> 00:20:49,270
about every single dependency it's not

00:20:47,020 --> 00:20:50,710
going to necessarily work they're not

00:20:49,270 --> 00:20:52,360
going to be portable unless you do every

00:20:50,710 --> 00:20:53,770
dependencies every district which you

00:20:52,360 --> 00:20:56,020
might possibly want to have a user

00:20:53,770 --> 00:20:58,150
running it on the pace of change thing

00:20:56,020 --> 00:21:00,730
that's solved it does solve that real

00:20:58,150 --> 00:21:02,950
problem but you can't say it's just

00:21:00,730 --> 00:21:04,480
going to work now you can maybe say it's

00:21:02,950 --> 00:21:06,250
going to work on certain distributions

00:21:04,480 --> 00:21:08,620
like app image suggests you should be

00:21:06,250 --> 00:21:11,250
saying but you can't guarantee it's

00:21:08,620 --> 00:21:11,250
going to work everywhere

00:21:14,250 --> 00:21:22,610
and this is just like we had in Windows

00:21:17,370 --> 00:21:25,410
2000 we're repeating history with this

00:21:22,610 --> 00:21:26,990
because even if you say this is still

00:21:25,410 --> 00:21:29,340
worth it and still worth going ahead

00:21:26,990 --> 00:21:32,400
with these technologies and still doing

00:21:29,340 --> 00:21:34,710
that way we're going to end up with

00:21:32,400 --> 00:21:35,670
security relevant libraries in all of

00:21:34,710 --> 00:21:36,900
these containers you know you're

00:21:35,670 --> 00:21:40,020
bundling all those dependencies in there

00:21:36,900 --> 00:21:41,310
to make this work who's gonna be making

00:21:40,020 --> 00:21:42,390
sure they're valid who's gonna be making

00:21:41,310 --> 00:21:46,500
sure they're secure who's gonna be

00:21:42,390 --> 00:21:48,660
patching them when they're in there how

00:21:46,500 --> 00:21:51,060
are you gonna patch them you know okay

00:21:48,660 --> 00:21:52,890
most you know snappy does have the

00:21:51,060 --> 00:21:54,690
concept of app stores but how do you

00:21:52,890 --> 00:21:56,430
guarantee then that everybody with your

00:21:54,690 --> 00:21:58,020
snap from every app store gets the right

00:21:56,430 --> 00:22:01,260
version at the right time I mean that's

00:21:58,020 --> 00:22:02,430
gonna be a bit of a mess you know how do

00:22:01,260 --> 00:22:03,720
you how do you handle the package

00:22:02,430 --> 00:22:06,030
management for a flat pack with app

00:22:03,720 --> 00:22:07,590
image they don't even have a rough

00:22:06,030 --> 00:22:09,390
answer for that now as far as I can tell

00:22:07,590 --> 00:22:12,030
it's you know just download a new bundle

00:22:09,390 --> 00:22:13,140
from the website it's you know they're

00:22:12,030 --> 00:22:16,080
gonna have to have people creating

00:22:13,140 --> 00:22:17,790
updated apps for this thing who's doing

00:22:16,080 --> 00:22:20,640
the legal review for all of these but

00:22:17,790 --> 00:22:23,340
all these these dependencies in these

00:22:20,640 --> 00:22:25,050
bundles who's making sure that they all

00:22:23,340 --> 00:22:26,700
can be distribute at the same time

00:22:25,050 --> 00:22:30,300
especially when you look at certain

00:22:26,700 --> 00:22:31,800
licenses where the the runtime aspect of

00:22:30,300 --> 00:22:33,690
the license is final you know we can

00:22:31,800 --> 00:22:36,720
plug into anything and everything's fine

00:22:33,690 --> 00:22:39,330
but we care about how you distribute or

00:22:36,720 --> 00:22:42,210
redistribute the software that's where

00:22:39,330 --> 00:22:43,200
our lawyers inside openSUSE really spend

00:22:42,210 --> 00:22:44,400
a lot of time and effort paying

00:22:43,200 --> 00:22:46,350
attention to of you know making sure

00:22:44,400 --> 00:22:48,270
that we can legally redistribute this

00:22:46,350 --> 00:22:50,520
software who's going to be doing that

00:22:48,270 --> 00:22:52,650
for your application develop it for

00:22:50,520 --> 00:22:53,910
these containerized applications you

00:22:52,650 --> 00:22:55,710
know if you've got thousands of people

00:22:53,910 --> 00:22:57,960
using these tools to build all these

00:22:55,710 --> 00:23:00,840
applications do you need thousands more

00:22:57,960 --> 00:23:02,340
lawyers but of course it's not all bad

00:23:00,840 --> 00:23:03,450
storage vendors they're going to be even

00:23:02,340 --> 00:23:08,250
happier because you're gonna be buying

00:23:03,450 --> 00:23:12,600
even bigger discs these tools are really

00:23:08,250 --> 00:23:14,720
powerful they are really cool but with

00:23:12,600 --> 00:23:17,790
great power comes great responsibilities

00:23:14,720 --> 00:23:19,260
and I think with with these athletes

00:23:17,790 --> 00:23:20,920
with these tools like slits snapback and

00:23:19,260 --> 00:23:25,760
floppy

00:23:20,920 --> 00:23:29,690
flat-pack and snappy the the only real

00:23:25,760 --> 00:23:31,550
solution if you're using them is to

00:23:29,690 --> 00:23:34,070
start thinking like a distribution

00:23:31,550 --> 00:23:35,990
developer and maintainer

00:23:34,070 --> 00:23:37,670
you're gonna have to deal with the same

00:23:35,990 --> 00:23:40,700
responsibilities that we deal with in

00:23:37,670 --> 00:23:43,940
the distribution world you're gonna have

00:23:40,700 --> 00:23:45,920
to consider how you bundle this how you

00:23:43,940 --> 00:23:47,360
maintain it what is your update cadence

00:23:45,920 --> 00:23:49,510
how can you how do you deal with the

00:23:47,360 --> 00:23:52,340
update cadence of all your dependencies

00:23:49,510 --> 00:23:55,010
do you therefore end up doing regular

00:23:52,340 --> 00:23:57,340
releases every few months are you you

00:23:55,010 --> 00:23:59,930
you bundle them into your application

00:23:57,340 --> 00:24:01,370
you know where do you bundle them where

00:23:59,930 --> 00:24:04,010
do you draw that line which of course is

00:24:01,370 --> 00:24:07,490
something like I say the the new base

00:24:04,010 --> 00:24:09,320
might be an answer for you're still

00:24:07,490 --> 00:24:11,230
gonna have to develop and test

00:24:09,320 --> 00:24:13,730
everything on every possible distro

00:24:11,230 --> 00:24:15,500
unless you bundle every dependency that

00:24:13,730 --> 00:24:16,910
you need for anywhere you're still going

00:24:15,500 --> 00:24:18,910
to have this problem of making sure that

00:24:16,910 --> 00:24:21,020
does your bundle work on these districts

00:24:18,910 --> 00:24:23,450
you're still gonna have to if you if

00:24:21,020 --> 00:24:24,470
you're doing some kind of regular update

00:24:23,450 --> 00:24:25,880
cadence you're gonna have to worry about

00:24:24,470 --> 00:24:27,980
all your patches and making sure they

00:24:25,880 --> 00:24:29,390
all work again and I suspect you're

00:24:27,980 --> 00:24:33,530
gonna end up crying because it's all

00:24:29,390 --> 00:24:35,030
kind of break anyway and you're gonna

00:24:33,530 --> 00:24:37,540
have to worry about the security side of

00:24:35,030 --> 00:24:40,790
things you're gonna have to worry about

00:24:37,540 --> 00:24:42,290
auditing all not just your code but all

00:24:40,790 --> 00:24:44,510
of the code of every dependency you've

00:24:42,290 --> 00:24:45,560
chosen to put in your bundle and you're

00:24:44,510 --> 00:24:47,480
gonna be mother to have to monitor the

00:24:45,560 --> 00:24:50,810
CVEs for those bundles you're gonna have

00:24:47,480 --> 00:24:53,270
to audit those libraries and as you

00:24:50,810 --> 00:24:55,130
heard in the previous talk you can't

00:24:53,270 --> 00:24:57,350
necessarily assume sandboxing is going

00:24:55,130 --> 00:24:58,730
to be enough you know Sam boxing is a

00:24:57,350 --> 00:25:01,550
great safety net with some of these

00:24:58,730 --> 00:25:03,080
tools do you recommend and do use but it

00:25:01,550 --> 00:25:05,660
should be thought of as a safety net not

00:25:03,080 --> 00:25:06,650
as a solution to these problems security

00:25:05,660 --> 00:25:09,380
is something that should be integrated

00:25:06,650 --> 00:25:12,310
by design and then you have a safety net

00:25:09,380 --> 00:25:14,510
to cover your ass when it screws up

00:25:12,310 --> 00:25:16,310
you're gonna have to have a nice fast

00:25:14,510 --> 00:25:18,860
way of getting that update through and

00:25:16,310 --> 00:25:20,570
out to users very very quickly and in a

00:25:18,860 --> 00:25:21,920
relatively efficient way and of course

00:25:20,570 --> 00:25:23,750
that gets tricky if you've got all these

00:25:21,920 --> 00:25:26,570
big bundles full of all of these big

00:25:23,750 --> 00:25:27,860
libraries many many times over and you

00:25:26,570 --> 00:25:29,840
know let's just imagine you know

00:25:27,860 --> 00:25:30,769
everybody's got a copy of OpenSSL inside

00:25:29,840 --> 00:25:34,529
there

00:25:30,769 --> 00:25:35,880
inside their container how many times

00:25:34,529 --> 00:25:37,350
you're gonna have to download a whole

00:25:35,880 --> 00:25:38,730
new bundle you know on on the same

00:25:37,350 --> 00:25:41,039
machine does a user really want to

00:25:38,730 --> 00:25:42,750
download 40 gig just because you know we

00:25:41,039 --> 00:25:43,799
fixed one issue in one Lib but it has

00:25:42,750 --> 00:25:48,049
happened to be in 40 different

00:25:43,799 --> 00:25:51,539
applications it's gonna be painful and

00:25:48,049 --> 00:25:53,009
yeah legal side of things we're gonna

00:25:51,539 --> 00:25:54,299
have to you know get anyone using these

00:25:53,009 --> 00:25:55,679
tools is gonna have to review the

00:25:54,299 --> 00:25:57,899
license is gonna have to make sure that

00:25:55,679 --> 00:26:00,389
what they're doing is aboveboard is work

00:25:57,899 --> 00:26:03,090
is compatible and it's compliant with

00:26:00,389 --> 00:26:04,740
the licenses that not just the original

00:26:03,090 --> 00:26:08,179
software is included but all of the

00:26:04,740 --> 00:26:08,179
penalties and like we saw involved I

00:26:08,389 --> 00:26:13,259
think distributions can and should be

00:26:10,679 --> 00:26:15,059
part of this solution you know I've been

00:26:13,259 --> 00:26:16,799
up here now I've been ranting about why

00:26:15,059 --> 00:26:19,019
all this technology is bad I actually

00:26:16,799 --> 00:26:20,879
like this idea I like the idea of

00:26:19,019 --> 00:26:22,500
containerized applications because from

00:26:20,879 --> 00:26:25,529
a distribution point of view I'm gonna

00:26:22,500 --> 00:26:26,820
have less work you know if application

00:26:25,529 --> 00:26:28,139
developers are doing all of this stuff

00:26:26,820 --> 00:26:30,029
and worrying about all of this stuff and

00:26:28,139 --> 00:26:31,950
distributing it I have less packages to

00:26:30,029 --> 00:26:34,399
worry about in my distribution I have

00:26:31,950 --> 00:26:36,720
less responsibility for those packages I

00:26:34,399 --> 00:26:39,210
actually want to encourage this idea

00:26:36,720 --> 00:26:42,029
because I think it is if done moderately

00:26:39,210 --> 00:26:43,590
and sensibly a more sustainable model

00:26:42,029 --> 00:26:46,169
than everything being centralized in a

00:26:43,590 --> 00:26:48,000
distribution but I just want to make

00:26:46,169 --> 00:26:51,870
sure my users don't get eaten by broken

00:26:48,000 --> 00:26:53,929
dangerous apps in the process so like I

00:26:51,870 --> 00:26:57,059
said I think distribution should be

00:26:53,929 --> 00:27:00,440
coming together thinking about a common

00:26:57,059 --> 00:27:02,580
base for where that line is between the

00:27:00,440 --> 00:27:04,610
underlying distribution side of things

00:27:02,580 --> 00:27:07,350
and all of the libraries on top

00:27:04,610 --> 00:27:08,610
otherwise the portability promise is

00:27:07,350 --> 00:27:11,220
never going to be achievable

00:27:08,610 --> 00:27:12,929
unless that exists I don't really see

00:27:11,220 --> 00:27:16,649
everybody bundling everything in every

00:27:12,929 --> 00:27:19,049
application that will just be crazy and

00:27:16,649 --> 00:27:21,720
I also think this you know with some of

00:27:19,049 --> 00:27:23,220
these tools there's kind of a tendency

00:27:21,720 --> 00:27:25,110
to kind of paint the distributions azure

00:27:23,220 --> 00:27:26,519
width this is the evil that the tool is

00:27:25,110 --> 00:27:28,019
expecting I try to get rid of oh you

00:27:26,519 --> 00:27:29,820
don't have to worry about sending your

00:27:28,019 --> 00:27:31,679
package submission anymore you don't

00:27:29,820 --> 00:27:34,279
have to worry about this crazy verb you

00:27:31,679 --> 00:27:36,720
don't have to worry about that

00:27:34,279 --> 00:27:38,519
distributions have these tools and these

00:27:36,720 --> 00:27:39,720
processes and these techniques because

00:27:38,519 --> 00:27:41,750
we've been dealing with these problems

00:27:39,720 --> 00:27:44,270
in the real world for years

00:27:41,750 --> 00:27:45,710
so actually looking at our tools looking

00:27:44,270 --> 00:27:47,450
at how for example the openSUSE build

00:27:45,710 --> 00:27:50,810
service works looking at how open QA

00:27:47,450 --> 00:27:53,240
works has a surprising relevance to

00:27:50,810 --> 00:27:55,520
these technologies and you don't have to

00:27:53,240 --> 00:27:57,130
necessarily reinvent every will the

00:27:55,520 --> 00:27:59,630
solution might be a simple case of

00:27:57,130 --> 00:28:11,590
patching in a new package format into

00:27:59,630 --> 00:28:16,400
those tools to then handle yeah one last

00:28:11,590 --> 00:28:18,710
final thing for this I'm not sure

00:28:16,400 --> 00:28:20,410
despite me liking the idea and thinking

00:28:18,710 --> 00:28:23,330
you know I like the idea of less work

00:28:20,410 --> 00:28:26,620
I'm not necessarily sure it's actually

00:28:23,330 --> 00:28:28,760
is that a sensible way of going along

00:28:26,620 --> 00:28:30,350
because it comes from this concept of

00:28:28,760 --> 00:28:34,520
like a same traditional distributions

00:28:30,350 --> 00:28:37,640
are too slow but they're not if it's a

00:28:34,520 --> 00:28:39,170
rolling release and in the case of

00:28:37,640 --> 00:28:42,050
openSUSE with tumbleweed we have a

00:28:39,170 --> 00:28:43,970
rolling release now that isn't just some

00:28:42,050 --> 00:28:45,710
nice fancy dev branch with anybody can

00:28:43,970 --> 00:28:48,020
go on and play but is actually usable

00:28:45,710 --> 00:28:49,670
for real work it gets tested and only

00:28:48,020 --> 00:28:52,070
gets updated when the thing has been

00:28:49,670 --> 00:28:54,830
tested and not just tested from a crazy

00:28:52,070 --> 00:28:57,380
code perspective but actually automation

00:28:54,830 --> 00:28:59,000
tools firing up VMs and on real hardware

00:28:57,380 --> 00:29:00,620
and running the thing like a real user

00:28:59,000 --> 00:29:02,120
will use it so you know it installs

00:29:00,620 --> 00:29:05,000
right and you know the applications work

00:29:02,120 --> 00:29:06,740
right and we do all of that at a pace

00:29:05,000 --> 00:29:08,870
where we can still deliver the upstream

00:29:06,740 --> 00:29:11,390
projects on top at the same pace as

00:29:08,870 --> 00:29:13,880
upstream projects work KDE plasma on the

00:29:11,390 --> 00:29:17,630
same day as release no 48 hours that

00:29:13,880 --> 00:29:19,930
kind of thing maybe that's the better

00:29:17,630 --> 00:29:22,460
model to actually fix this app delivery

00:29:19,930 --> 00:29:23,990
maybe rolling releases are the way to

00:29:22,460 --> 00:29:26,360
actually go with all of this and just

00:29:23,990 --> 00:29:28,370
you know reuse that knowledge we already

00:29:26,360 --> 00:29:30,080
have we use the tools we already have we

00:29:28,370 --> 00:29:31,730
use the infrastructure we already have

00:29:30,080 --> 00:29:34,880
in these communities in these

00:29:31,730 --> 00:29:38,420
distributions and just angle them way

00:29:34,880 --> 00:29:40,040
faster and yeah way more mate way we're

00:29:38,420 --> 00:29:43,550
an awful lot faster than we've ever been

00:29:40,040 --> 00:29:45,910
in the past and with that I have time

00:29:43,550 --> 00:29:45,910
for questions

00:29:48,980 --> 00:29:52,910
there there's one guy here

00:29:57,160 --> 00:29:59,190
Oh

00:30:04,710 --> 00:30:08,519
Vega

00:30:06,700 --> 00:30:13,440
No

00:30:08,519 --> 00:30:18,359
but they're keeping the base of a

00:30:13,440 --> 00:30:21,419
distribution static and keeping the

00:30:18,359 --> 00:30:24,629
applications updated only might be good

00:30:21,419 --> 00:30:28,739
middle ground for example let's imagine

00:30:24,629 --> 00:30:30,719
using Ubuntu with a bunch of PPS to

00:30:28,739 --> 00:30:34,139
update just the applications and keeping

00:30:30,719 --> 00:30:36,779
a stable core so that we avoid big

00:30:34,139 --> 00:30:37,889
differences and big changes break the

00:30:36,779 --> 00:30:39,809
users experience

00:30:37,889 --> 00:30:41,009
I really wish you've been in my earlier

00:30:39,809 --> 00:30:43,619
talk in the district dev room this

00:30:41,009 --> 00:30:46,259
morning because yeah I basically

00:30:43,619 --> 00:30:49,950
discussed that the problem I see with

00:30:46,259 --> 00:30:54,149
that idea is you end up with that same

00:30:49,950 --> 00:30:55,859
problem with the you know that line you

00:30:54,149 --> 00:30:58,079
know the line between the fast-moving

00:30:55,859 --> 00:31:00,539
containerized thing just becomes a line

00:30:58,079 --> 00:31:03,029
between the fast-moving applications and

00:31:00,539 --> 00:31:04,499
a static distro below and you end up

00:31:03,029 --> 00:31:07,469
with compatibility and reliability

00:31:04,499 --> 00:31:08,429
problems with that line in reality if

00:31:07,469 --> 00:31:10,889
you want to do a rolling release

00:31:08,429 --> 00:31:13,529
properly you have to be prepared to move

00:31:10,889 --> 00:31:15,089
everything your application is going to

00:31:13,529 --> 00:31:17,159
want to change dependencies right down

00:31:15,089 --> 00:31:19,979
the stack have the tools to change

00:31:17,159 --> 00:31:21,419
everything right down the stack and yeah

00:31:19,979 --> 00:31:25,079
you have to find some way of preserving

00:31:21,419 --> 00:31:27,299
its stability but you can do that so on

00:31:25,079 --> 00:31:28,799
when we're talking about moving the line

00:31:27,299 --> 00:31:32,729
why don't you just move the line down

00:31:28,799 --> 00:31:34,889
and include the distribution with the

00:31:32,729 --> 00:31:38,999
whole container so actually is really a

00:31:34,889 --> 00:31:40,889
virtual machine yep then you end up with

00:31:38,999 --> 00:31:43,559
the issues of you know nice big

00:31:40,889 --> 00:31:46,229
applications lots of patching I mean you

00:31:43,559 --> 00:31:51,389
can but it's not exactly a very

00:31:46,229 --> 00:31:56,969
efficient way of doing things yeah yeah

00:31:51,389 --> 00:31:58,799
Irish so in the past we've had several

00:31:56,969 --> 00:32:02,519
libraries and things like that but and

00:31:58,799 --> 00:32:07,469
with the binary couple mostly wire

00:32:02,519 --> 00:32:09,629
related issues especially with one

00:32:07,469 --> 00:32:11,459
application using one version not being

00:32:09,629 --> 00:32:13,879
able to load files or talk over the

00:32:11,459 --> 00:32:16,469
sockets within the other application

00:32:13,879 --> 00:32:19,289
this is not something that containers as

00:32:16,469 --> 00:32:23,429
always just making it worse

00:32:19,289 --> 00:32:25,079
is it something we can fix I'm not

00:32:23,429 --> 00:32:27,389
asking for the fix I'm asking if we

00:32:25,079 --> 00:32:28,409
actually can fix it I don't think it's

00:32:27,389 --> 00:32:31,349
something we can fix

00:32:28,409 --> 00:32:34,169
and I mean basically that example you

00:32:31,349 --> 00:32:36,719
just gave and the example of non

00:32:34,169 --> 00:32:38,820
open-source software are two examples

00:32:36,719 --> 00:32:40,739
where I think this technology is awesome

00:32:38,820 --> 00:32:42,869
and should be used to full stop no

00:32:40,739 --> 00:32:44,219
caveats you know as long as somebody

00:32:42,869 --> 00:32:46,079
takes care of all the responsibilities

00:32:44,219 --> 00:32:49,259
you know that that's where these

00:32:46,079 --> 00:32:50,940
actually solve a real problem but using

00:32:49,259 --> 00:32:55,309
saying this is a universal packaging

00:32:50,940 --> 00:33:00,130
tool for everything I am not convinced

00:32:55,309 --> 00:33:05,049
here but the question I don't see where

00:33:00,130 --> 00:33:10,150
the rolling release model how the really

00:33:05,049 --> 00:33:12,370
rolling release model could fix the test

00:33:10,150 --> 00:33:14,679
matrix problem this is one of the

00:33:12,370 --> 00:33:18,429
problems we have in distributions is

00:33:14,679 --> 00:33:20,289
that an application may rely on several

00:33:18,429 --> 00:33:21,610
libraries with different versions and

00:33:20,289 --> 00:33:24,220
another one

00:33:21,610 --> 00:33:26,380
another application would rely on other

00:33:24,220 --> 00:33:29,799
versions you can test everything

00:33:26,380 --> 00:33:32,710
it increases complexity and that's why

00:33:29,799 --> 00:33:34,539
this is all put in containers because

00:33:32,710 --> 00:33:37,620
you have the control as an application

00:33:34,539 --> 00:33:41,580
developer on which versions I are used

00:33:37,620 --> 00:33:46,390
so I don't see how the rolling release

00:33:41,580 --> 00:33:52,090
solves the problem is it supposed to

00:33:46,390 --> 00:33:55,539
solve that problem I don't know some way

00:33:52,090 --> 00:33:57,340
to solve that problem because they so

00:33:55,539 --> 00:34:00,669
assuming assuming you're rolling release

00:33:57,340 --> 00:34:03,520
isn't just a collection of packages but

00:34:00,669 --> 00:34:07,210
is a distribution that it's like built

00:34:03,520 --> 00:34:08,889
with for example you know dependency

00:34:07,210 --> 00:34:10,980
consistency and you know you make sure

00:34:08,889 --> 00:34:13,270
to actually work so like with openSUSE

00:34:10,980 --> 00:34:14,379
OBS make sure all the dependencies

00:34:13,270 --> 00:34:16,359
actually work together and the

00:34:14,379 --> 00:34:18,460
distribution you know is cohesive and

00:34:16,359 --> 00:34:20,679
works but not just random packages all

00:34:18,460 --> 00:34:23,260
over the place yeah so so in that case

00:34:20,679 --> 00:34:24,730
your build processes found will find out

00:34:23,260 --> 00:34:26,940
where you have these you know multiple

00:34:24,730 --> 00:34:30,129
applications fighting for different libs

00:34:26,940 --> 00:34:32,409
and then it's a case of either packaging

00:34:30,129 --> 00:34:33,700
or dealing with those upstream it's okay

00:34:32,409 --> 00:34:35,590
this might hope this was tender the

00:34:33,700 --> 00:34:37,300
example he gave there you know there are

00:34:35,590 --> 00:34:39,760
there are cases where these tools helped

00:34:37,300 --> 00:34:42,250
but I don't think they Universal yeah

00:34:39,760 --> 00:34:46,040
but for example in the non project we

00:34:42,250 --> 00:34:50,920
had some problems with changes the end

00:34:46,040 --> 00:34:56,030
CSS management and different gtk free

00:34:50,920 --> 00:34:59,810
versions and so several versions of gta3

00:34:56,030 --> 00:35:02,840
are not come to be installed in parallel

00:34:59,810 --> 00:35:05,390
so one application may rely on an older

00:35:02,840 --> 00:35:08,480
version and their more recent and

00:35:05,390 --> 00:35:11,320
another version of JDK and you have to

00:35:08,480 --> 00:35:14,450
choose which version you will install so

00:35:11,320 --> 00:35:16,910
if you rely on a distribution model you

00:35:14,450 --> 00:35:19,790
only have one of those versions

00:35:16,910 --> 00:35:24,650
installed and I don't see how it can

00:35:19,790 --> 00:35:26,750
solve without containers I don't I think

00:35:24,650 --> 00:35:28,370
the problem needs to be library

00:35:26,750 --> 00:35:30,410
maintainer x' need to stop actively

00:35:28,370 --> 00:35:38,390
supporting multiple versions that can't

00:35:30,410 --> 00:35:41,650
be installed in powerlifting the blames

00:35:38,390 --> 00:35:46,370
slightly I know hello

00:35:41,650 --> 00:35:48,800
so on the first slide I think the first

00:35:46,370 --> 00:35:52,250
valid point you wrote was that with

00:35:48,800 --> 00:35:54,530
Windows 3.1 and the shared library model

00:35:52,250 --> 00:35:57,350
system or libraries thumb sushi Window

00:35:54,530 --> 00:36:01,100
System one of the major problems with it

00:35:57,350 --> 00:36:03,800
was and it really was in fact one of the

00:36:01,100 --> 00:36:07,970
major problems the missing backward

00:36:03,800 --> 00:36:11,750
compatibility of the api's but the idea

00:36:07,970 --> 00:36:14,570
of that concept even back then was that

00:36:11,750 --> 00:36:17,870
you have backward compatibility as long

00:36:14,570 --> 00:36:20,540
as the DLL name stays the same so if you

00:36:17,870 --> 00:36:24,020
just use the newest DLL with the same

00:36:20,540 --> 00:36:26,840
name or in Linux uses newest share

00:36:24,020 --> 00:36:32,230
object the same as Oh name it should be

00:36:26,840 --> 00:36:35,090
a bi compatible yep so and as you said

00:36:32,230 --> 00:36:40,780
things break and we use this container

00:36:35,090 --> 00:36:43,840
stuff because we have a bi breakages

00:36:40,780 --> 00:36:48,010
although there should be none

00:36:43,840 --> 00:36:51,950
so how but how is defining a new

00:36:48,010 --> 00:36:52,940
standard base helping against nor in my

00:36:51,950 --> 00:36:56,170
opinion

00:36:52,940 --> 00:36:59,630
cause of the problem that we have

00:36:56,170 --> 00:37:02,030
applications relying on properties of

00:36:59,630 --> 00:37:04,810
the API that are not guaranteed and

00:37:02,030 --> 00:37:09,010
specified or live or rewrite us

00:37:04,810 --> 00:37:12,440
unintentionally breaking their api's

00:37:09,010 --> 00:37:14,540
well the idea my idea for the standard

00:37:12,440 --> 00:37:16,220
base would be when you had those ABI

00:37:14,540 --> 00:37:18,770
breaking changes you know that would

00:37:16,220 --> 00:37:19,970
require a new standard base version so

00:37:18,770 --> 00:37:21,560
at least you're tracking when those

00:37:19,970 --> 00:37:23,569
changes are you know around

00:37:21,560 --> 00:37:26,450
it's another dependency problem I admit

00:37:23,569 --> 00:37:28,940
it but you know we we need to spend a

00:37:26,450 --> 00:37:30,770
bit of time thinking about this and you

00:37:28,940 --> 00:37:32,210
know oh

00:37:30,770 --> 00:37:34,069
the alternative is every single

00:37:32,210 --> 00:37:37,339
application developer using these tools

00:37:34,069 --> 00:37:39,859
has a lot more work to do and I'm not

00:37:37,339 --> 00:37:41,810
sure either solution is wonderful but I

00:37:39,859 --> 00:37:43,490
don't think people really realized how

00:37:41,810 --> 00:37:45,290
much extra work they're putting on their

00:37:43,490 --> 00:37:49,819
shoulders just throwing everything into

00:37:45,290 --> 00:37:51,740
these tools so do you have already a

00:37:49,819 --> 00:37:54,170
plan to go forward like we shove the

00:37:51,740 --> 00:37:57,140
suggestions that you propose you think

00:37:54,170 --> 00:37:58,730
is the best way forward like is openSUSE

00:37:57,140 --> 00:38:01,640
is like trying to propose a new

00:37:58,730 --> 00:38:03,170
universal standard base well this is the

00:38:01,640 --> 00:38:04,819
first I've said about it so every

00:38:03,170 --> 00:38:07,550
distribution that starts talking to me

00:38:04,819 --> 00:38:09,560
now they've seen this presentation I'm

00:38:07,550 --> 00:38:12,020
not fussy I mean you know it needs as

00:38:09,560 --> 00:38:15,130
many from as many places I wanted to

00:38:12,020 --> 00:38:15,130
start the conversation here first

00:38:16,510 --> 00:38:23,250
guys no more questions thank you thank

00:38:22,089 --> 00:38:31,699
you thank you very much

00:38:23,250 --> 00:38:31,699

YouTube URL: https://www.youtube.com/watch?v=Reo85AC6JjA


