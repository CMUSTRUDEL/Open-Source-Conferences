Title: Optimized and reproducible HPC Software deployment with free software and GNU Guix
Publication date: 2018-03-06
Playlist: FOSDEM 2017
Description: 
	by Ludovic CourtÃ¨s and Pjotr Prins

At: FOSDEM 2017

HPC computing environment and especially super computing has its bag ofchallenges when it comes to software deployment. As scientists we often do notget root access which means that we either depend on what software isavailable or we build software in a dedicated directory using tools such asBrew, Conda or even from source. Unfortunately these solutions depend onalready installed tools from an underlying distribution, often proprietary ordated compilers, and, for example, modules. Any binary that gets produced,therefore, tends to be totally unique, both in the generated binary and itsset of dependencies. This is bad, both for trouble shooting and for pursuingreproducible science. With GNU Guix we are developing a fully reproduciblefree software stack including all dependencies targeting cross-builds forheterogeneous computing environments, such as the Beacon Intel PHI-basedsupercomputer, without having a requirement for containers. In this talk Iwill describe the challenges we are overcoming and what it will mean for theHPC community to have architecture optimized and fully reproducible buildtargets that can be deployed in a non-root, non-container environment.


Room: H.2213
Scheduled start: 2017-02-04 10:30:00
Captions: 
	00:00:01,340 --> 00:00:09,000
so the next clock is about using the new

00:00:05,250 --> 00:00:11,940
geeks on HPC systems so my little bit

00:00:09,000 --> 00:00:13,800
cambiado right so good morning everyone

00:00:11,940 --> 00:00:16,890
so this is again going to be one of

00:00:13,800 --> 00:00:19,230
these two people talks and so I'm little

00:00:16,890 --> 00:00:22,140
bit contests and prints is going to talk

00:00:19,230 --> 00:00:24,509
afterwards about how we can use geeks on

00:00:22,140 --> 00:00:28,679
HPC systems where we don't have root

00:00:24,509 --> 00:00:31,109
access so before I go into the details

00:00:28,679 --> 00:00:33,960
about what geeks is and all that let me

00:00:31,109 --> 00:00:37,200
first recap what the situation is on HPC

00:00:33,960 --> 00:00:38,970
systems so I'm guessing that many people

00:00:37,200 --> 00:00:41,430
here are familiar with what the

00:00:38,970 --> 00:00:44,280
situation is on HPC systems is not that

00:00:41,430 --> 00:00:47,580
great we already had a talk this morning

00:00:44,280 --> 00:00:50,280
about how to improve things let me just

00:00:47,580 --> 00:00:52,770
describe a few key ingredients of what

00:00:50,280 --> 00:00:56,030
you can find on most systems nowadays so

00:00:52,770 --> 00:00:59,100
this is a recipe so the first ingredient

00:00:56,030 --> 00:01:01,470
is you have your you know supercomputer

00:00:59,100 --> 00:01:03,540
it's superfast it's wonderful and so

00:01:01,470 --> 00:01:06,570
first thing you do is you you install an

00:01:03,540 --> 00:01:08,579
old new Linux distribution right it's

00:01:06,570 --> 00:01:11,130
outdated so people are going to complain

00:01:08,579 --> 00:01:14,039
you know that so right from the start

00:01:11,130 --> 00:01:16,079
and it's also inflexible right if you're

00:01:14,039 --> 00:01:18,090
not roots on that machine you're not

00:01:16,079 --> 00:01:21,179
going to be able to do sudo apt-get

00:01:18,090 --> 00:01:23,310
install blah blah right so at the as an

00:01:21,179 --> 00:01:26,579
HPC user you're not going to be

00:01:23,310 --> 00:01:28,859
satisfied right so sis admins have come

00:01:26,579 --> 00:01:32,429
up with solutions to try on and improve

00:01:28,859 --> 00:01:35,100
on that situation so the main solution

00:01:32,429 --> 00:01:38,039
that we're seeing so far is to add a

00:01:35,100 --> 00:01:39,450
layer of homemade modules so if you're

00:01:38,039 --> 00:01:42,600
not familiar with modules

00:01:39,450 --> 00:01:44,069
it's dating so it's you know it's a set

00:01:42,600 --> 00:01:46,259
of commands that you can use from the

00:01:44,069 --> 00:01:48,840
shell and you can say okay I wanna load

00:01:46,259 --> 00:01:52,200
this specific package like GCC at that

00:01:48,840 --> 00:01:53,069
version yeah you can you know select

00:01:52,200 --> 00:01:56,009
what you want to have in your

00:01:53,069 --> 00:01:57,840
environments so that's already a great

00:01:56,009 --> 00:02:00,329
improvement because it brings a lot of

00:01:57,840 --> 00:02:03,049
flexibility that HPC users actually need

00:02:00,329 --> 00:02:05,729
right you know you have a machine with

00:02:03,049 --> 00:02:08,039
tens of users they have different needs

00:02:05,729 --> 00:02:09,539
in terms of libraries tools and versions

00:02:08,039 --> 00:02:13,110
and so you want them to be able to

00:02:09,539 --> 00:02:14,520
choose that now the problem is that to

00:02:13,110 --> 00:02:16,710
actually achieve that

00:02:14,520 --> 00:02:19,410
that means our essentially making a

00:02:16,710 --> 00:02:22,470
distribution of their own and doing that

00:02:19,410 --> 00:02:24,510
by hand all right so they're compiling

00:02:22,470 --> 00:02:25,710
lots of packages by themselves

00:02:24,510 --> 00:02:28,980
installing them in those special

00:02:25,710 --> 00:02:30,360
directories and so on and so forth so I

00:02:28,980 --> 00:02:32,280
know if it's the same for you but my

00:02:30,360 --> 00:02:34,940
experience with modules on the cluster

00:02:32,280 --> 00:02:37,860
at work has been pretty much like this

00:02:34,940 --> 00:02:40,590
so first thing you know sis admins are

00:02:37,860 --> 00:02:41,760
kind and they produce new modules you

00:02:40,590 --> 00:02:44,820
know with packages that you actually

00:02:41,760 --> 00:02:46,740
need but it doesn't work right from the

00:02:44,820 --> 00:02:49,370
start right so they first need to treat

00:02:46,740 --> 00:02:52,610
the modules until it kind of works and

00:02:49,370 --> 00:02:55,890
then it's like all right there is a

00:02:52,610 --> 00:02:58,230
there is a runtime linker error like I

00:02:55,890 --> 00:02:59,700
cannot you know when this command I get

00:02:58,230 --> 00:03:02,910
an undefined reference error or

00:02:59,700 --> 00:03:05,790
something and so they tweak things again

00:03:02,910 --> 00:03:07,740
and you know some user complains that

00:03:05,790 --> 00:03:09,480
this particular piece of software needs

00:03:07,740 --> 00:03:13,500
to be compared with different Flags so

00:03:09,480 --> 00:03:15,510
you know they tweak that module and then

00:03:13,500 --> 00:03:17,940
new versions are out so they need to

00:03:15,510 --> 00:03:20,340
rebuild everything and then some user is

00:03:17,940 --> 00:03:22,709
unhappy you know like you have a

00:03:20,340 --> 00:03:24,270
deadline for a paper submission and just

00:03:22,709 --> 00:03:25,830
check before the deadline they decide to

00:03:24,270 --> 00:03:27,840
upgrade everything and to remove the old

00:03:25,830 --> 00:03:31,170
versions and you're like wow I'm screwed

00:03:27,840 --> 00:03:33,420
and so that happens in reality right so

00:03:31,170 --> 00:03:37,110
we have flexibility but still the users

00:03:33,420 --> 00:03:39,630
can be in a hard situation and so on and

00:03:37,110 --> 00:03:42,120
so forth so that's not so great right

00:03:39,630 --> 00:03:44,880
and of course you can have user build

00:03:42,120 --> 00:03:46,500
software on top of that especially with

00:03:44,880 --> 00:03:49,860
all the language specific package

00:03:46,500 --> 00:03:52,110
managers so chris webber yesterday was

00:03:49,860 --> 00:03:54,030
saying this is one package manager per

00:03:52,110 --> 00:03:57,450
child it looks like it you know there is

00:03:54,030 --> 00:04:02,130
so many tools available so it's becoming

00:03:57,450 --> 00:04:04,200
a real mess so fortunately people have

00:04:02,130 --> 00:04:06,090
started to consider you know changing

00:04:04,200 --> 00:04:08,910
the status quo and we had to talk about

00:04:06,090 --> 00:04:12,060
singularity this morning and we'll have

00:04:08,910 --> 00:04:15,090
talked about EasyBib right after and so

00:04:12,060 --> 00:04:18,780
let's see how we can fix HPC cluster

00:04:15,090 --> 00:04:21,840
environments so essentially there are

00:04:18,780 --> 00:04:24,150
two approaches in use so the first

00:04:21,840 --> 00:04:26,729
approach is to write specific package

00:04:24,150 --> 00:04:27,919
managers for HPC that address those

00:04:26,729 --> 00:04:30,530
problems

00:04:27,919 --> 00:04:34,069
the main ones I know of our easy build

00:04:30,530 --> 00:04:35,990
and spark right and so these are package

00:04:34,069 --> 00:04:38,300
managers which are designed to be used

00:04:35,990 --> 00:04:39,560
on top of your you know old inflexible

00:04:38,300 --> 00:04:44,419
this tool that you have in the first

00:04:39,560 --> 00:04:46,129
place that's very good because it solves

00:04:44,419 --> 00:04:48,110
quite a number of the problems I

00:04:46,129 --> 00:04:50,870
mentioned so first of all people can

00:04:48,110 --> 00:04:53,210
actually share their packaged recipes as

00:04:50,870 --> 00:04:55,340
opposed to having each sysadmin of each

00:04:53,210 --> 00:04:59,090
machine building things by themselves

00:04:55,340 --> 00:05:01,490
just for their specific machine right so

00:04:59,090 --> 00:05:04,669
people can actually share their recipe

00:05:01,490 --> 00:05:07,490
their packages and it provides easy ways

00:05:04,669 --> 00:05:09,979
to deploy software because anyone can

00:05:07,490 --> 00:05:12,409
install these buildings back on on the

00:05:09,979 --> 00:05:14,680
machine without being routes so if you

00:05:12,409 --> 00:05:17,930
install easy build then you can you know

00:05:14,680 --> 00:05:20,469
install your favourite packages on that

00:05:17,930 --> 00:05:25,669
particular cluster and it works alright

00:05:20,469 --> 00:05:27,139
so that's that's a great improvement now

00:05:25,669 --> 00:05:31,189
there is some limitation with this

00:05:27,139 --> 00:05:33,349
approach I think I'm going to maybe not

00:05:31,189 --> 00:05:36,710
make friends with the next speaker but

00:05:33,349 --> 00:05:40,099
okay we'll discuss that so one of the

00:05:36,710 --> 00:05:42,229
main issues I can see that well so first

00:05:40,099 --> 00:05:43,669
of all as I said it's these are tools

00:05:42,229 --> 00:05:45,349
that are meant to be used on top of the

00:05:43,669 --> 00:05:47,899
distro that's that's available in the

00:05:45,349 --> 00:05:49,909
system right so every user is going to

00:05:47,899 --> 00:05:52,279
recompile software in their home

00:05:49,909 --> 00:05:53,779
directory and that can be kind of

00:05:52,279 --> 00:05:56,539
annoying you know that's that's kind of

00:05:53,779 --> 00:05:59,870
a waste of resources and you know CPU

00:05:56,539 --> 00:06:01,460
and storage the second issue is this one

00:05:59,870 --> 00:06:05,330
I don't know if you can read it from the

00:06:01,460 --> 00:06:08,000
back of the room but this is a you know

00:06:05,330 --> 00:06:11,509
a sample back report from easy build I

00:06:08,000 --> 00:06:14,360
think where people are saying well

00:06:11,509 --> 00:06:16,669
jesusÃ­ libraries sometimes end up being

00:06:14,360 --> 00:06:20,210
you know built with this flag and

00:06:16,669 --> 00:06:22,129
sometimes not you know that's not a

00:06:20,210 --> 00:06:25,699
great situation to be in right we'd

00:06:22,129 --> 00:06:28,610
rather have something reproducible this

00:06:25,699 --> 00:06:32,000
is kind of unavoidable because you know

00:06:28,610 --> 00:06:34,849
as a non-word user on new linux there is

00:06:32,000 --> 00:06:37,219
simply no way you can get a fully

00:06:34,849 --> 00:06:41,419
isolated build environment so that's

00:06:37,219 --> 00:06:41,770
what you end up with right okay and for

00:06:41,419 --> 00:06:43,900
good

00:06:41,770 --> 00:06:46,569
this is the same kind of big report but

00:06:43,900 --> 00:06:48,610
falls back this time and again you see

00:06:46,569 --> 00:06:50,379
on some computers we have this behavior

00:06:48,610 --> 00:06:52,750
and on some computers we have these

00:06:50,379 --> 00:06:56,770
different behavior that's not a great

00:06:52,750 --> 00:06:59,110
situation to be in so that was the first

00:06:56,770 --> 00:07:01,539
approach to fixing the HPC cluster

00:06:59,110 --> 00:07:05,530
environment issue second approach is to

00:07:01,539 --> 00:07:06,310
I would say give up on packaging so what

00:07:05,530 --> 00:07:08,259
does that mean

00:07:06,310 --> 00:07:11,710
have you heard of that thing called

00:07:08,259 --> 00:07:13,990
docker well that's the story you

00:07:11,710 --> 00:07:15,970
basically make an app bundle with docker

00:07:13,990 --> 00:07:18,970
or a singularity like we saw this

00:07:15,970 --> 00:07:20,710
morning but were you what you're doing

00:07:18,970 --> 00:07:22,690
when you're using an app bundle is

00:07:20,710 --> 00:07:25,750
essentially you're you're telling people

00:07:22,690 --> 00:07:26,680
okay this is my application right this

00:07:25,750 --> 00:07:30,639
all shrink-wrapped

00:07:26,680 --> 00:07:32,620
like Ricardo said yesterday essentially

00:07:30,639 --> 00:07:34,360
you're providing a complete image that

00:07:32,620 --> 00:07:36,430
contains you know all your dependencies

00:07:34,360 --> 00:07:39,909
plus your applications plus you know

00:07:36,430 --> 00:07:43,569
everything and that's not so great

00:07:39,909 --> 00:07:46,330
because it prevents experimentation like

00:07:43,569 --> 00:07:48,550
from a reproducible science viewpoint

00:07:46,330 --> 00:07:51,159
you not only want to be able to run the

00:07:48,550 --> 00:07:53,530
software as these you also want to like

00:07:51,159 --> 00:07:56,650
fiddle with that that particular box

00:07:53,530 --> 00:07:58,930
here right and how do you do that see

00:07:56,650 --> 00:08:01,150
that's not if if all you have are the

00:07:58,930 --> 00:08:04,150
the bits of this app bundle well that's

00:08:01,150 --> 00:08:06,279
not very helpful and also what if

00:08:04,150 --> 00:08:08,050
somebody comes and say hey look I have

00:08:06,279 --> 00:08:10,599
my application also available as a

00:08:08,050 --> 00:08:12,669
bundle right and now how do you compute

00:08:10,599 --> 00:08:14,620
them right you end up with you know

00:08:12,669 --> 00:08:16,210
maybe this box and this box is the same

00:08:14,620 --> 00:08:21,699
but there's nothing you can do right

00:08:16,210 --> 00:08:24,069
they are not shared at all so I think

00:08:21,699 --> 00:08:27,969
this solution is the wrong one

00:08:24,069 --> 00:08:29,800
to put it simply so this one the

00:08:27,969 --> 00:08:33,510
question is can we have our cake and eat

00:08:29,800 --> 00:08:36,010
it too and that's where geeks comes in

00:08:33,510 --> 00:08:38,159
so how many people in the room have

00:08:36,010 --> 00:08:41,849
heard about geeks

00:08:38,159 --> 00:08:45,430
ok that's yeah like half of the room

00:08:41,849 --> 00:08:47,260
so essentially geeks is a package

00:08:45,430 --> 00:08:49,540
manager

00:08:47,260 --> 00:08:52,060
it's a transactional package managers

00:08:49,540 --> 00:08:53,140
like that can be used as non-root it

00:08:52,060 --> 00:08:55,060
allows you to manage software

00:08:53,140 --> 00:08:55,570
environments it provides lots of tools

00:08:55,060 --> 00:08:57,460
and ap

00:08:55,570 --> 00:09:00,880
is to feed always you know packages

00:08:57,460 --> 00:09:04,300
environments and so on it has like

00:09:00,880 --> 00:09:06,150
almost 5,000 packages available on four

00:09:04,300 --> 00:09:09,090
architectures and we are providing

00:09:06,150 --> 00:09:12,220
binaries through continuous integration

00:09:09,090 --> 00:09:14,680
so when you're using gigs and if you

00:09:12,220 --> 00:09:16,810
want to trust the binaries you we

00:09:14,680 --> 00:09:21,280
provide from our server you can simply

00:09:16,810 --> 00:09:24,550
use them it has a pretty active

00:09:21,280 --> 00:09:26,710
community with roughly 40 contributors

00:09:24,550 --> 00:09:30,010
every month so I would say yeah it's

00:09:26,710 --> 00:09:34,030
pretty active so how does that work how

00:09:30,010 --> 00:09:38,580
much things like two minutes okay so let

00:09:34,030 --> 00:09:40,300
me see just a very quick demo

00:09:38,580 --> 00:09:42,040
essentially you have a command-line

00:09:40,300 --> 00:09:45,130
interface that allows you to search for

00:09:42,040 --> 00:09:48,900
packages to install packages and this is

00:09:45,130 --> 00:09:52,060
this is happening as non-root right okay

00:09:48,900 --> 00:09:54,160
it tells you what environment variables

00:09:52,060 --> 00:09:55,630
you may need to set in your in your

00:09:54,160 --> 00:09:59,950
environment if you want to be able to

00:09:55,630 --> 00:10:01,750
use the software and this is all

00:09:59,950 --> 00:10:04,360
transactional so in a single transaction

00:10:01,750 --> 00:10:09,490
you can say I want to install something

00:10:04,360 --> 00:10:11,800
and we move something else right that's

00:10:09,490 --> 00:10:14,320
a single transaction and if you're

00:10:11,800 --> 00:10:18,040
unhappy then you can always roll back

00:10:14,320 --> 00:10:19,990
and this is all per user so if you're on

00:10:18,040 --> 00:10:21,960
an HPC cluster that means that everyone

00:10:19,990 --> 00:10:26,020
can run these commands for themselves

00:10:21,960 --> 00:10:28,600
which is pretty pretty nice okay you can

00:10:26,020 --> 00:10:32,310
list the generations and finally wall

00:10:28,600 --> 00:10:36,520
back if you're happy with the new setup

00:10:32,310 --> 00:10:39,130
okay so how did it work well under the

00:10:36,520 --> 00:10:41,290
hood all the packages are built in

00:10:39,130 --> 00:10:44,260
isolated environments so this is really

00:10:41,290 --> 00:10:47,110
the crucial part here so we're building

00:10:44,260 --> 00:10:49,260
packages in NCH routes with separate

00:10:47,110 --> 00:10:52,840
namespaces and so on and so forth so

00:10:49,260 --> 00:10:56,920
containers and what we get as a result

00:10:52,840 --> 00:11:02,530
is a unique file name in in that store

00:10:56,920 --> 00:11:04,600
directory with that long hash right and

00:11:02,530 --> 00:11:06,820
essentially everything is going to be

00:11:04,600 --> 00:11:08,620
well almost everything is going to be

00:11:06,820 --> 00:11:11,290
bit identical for every

00:11:08,620 --> 00:11:12,670
like if I build this package and shots

00:11:11,290 --> 00:11:14,980
build this package on a different

00:11:12,670 --> 00:11:20,610
machine we're going to get the very same

00:11:14,980 --> 00:11:23,560
beats most of the time so in in a paper

00:11:20,610 --> 00:11:26,490
Ricardo Ramos and myself wrote we

00:11:23,560 --> 00:11:30,550
explain how this kind of tool can be

00:11:26,490 --> 00:11:33,790
useful in an HPC setup and what you know

00:11:30,550 --> 00:11:35,470
what kind of goodies provides and so for

00:11:33,790 --> 00:11:38,710
from an experimentation viewpoint it

00:11:35,470 --> 00:11:41,770
means it has tools to create package

00:11:38,710 --> 00:11:43,450
variants you know you can say I want to

00:11:41,770 --> 00:11:46,360
use this package between different

00:11:43,450 --> 00:11:47,710
source I want to use this MEMS package

00:11:46,360 --> 00:11:50,350
but I want to use the different

00:11:47,710 --> 00:11:52,390
dependencies and so on and so forth and

00:11:50,350 --> 00:11:53,640
you can have your personal packages as

00:11:52,390 --> 00:11:57,070
well

00:11:53,640 --> 00:11:59,790
okay so pure is going to talk about non

00:11:57,070 --> 00:11:59,790
root usage

00:12:18,130 --> 00:12:22,430
so just wanna I think so

00:12:20,510 --> 00:12:25,250
I was talking about isolated build

00:12:22,430 --> 00:12:27,440
environments right and essentially we

00:12:25,250 --> 00:12:30,019
have a build demon here and that's what

00:12:27,440 --> 00:12:32,209
provides isolated build environments but

00:12:30,019 --> 00:12:35,480
that demon needs to run as root which is

00:12:32,209 --> 00:12:37,339
you know a source of problem on HPC

00:12:35,480 --> 00:12:41,149
machines where you cannot have this

00:12:37,339 --> 00:12:51,519
demon running as wolves right I mean I

00:12:41,149 --> 00:12:51,519
have a solution this is work

00:12:53,860 --> 00:12:57,800
alright so taking off we're a little

00:12:57,139 --> 00:13:00,500
left off

00:12:57,800 --> 00:13:02,690
yeah geeks basically installs in a path

00:13:00,500 --> 00:13:04,519
called new slash store yeah and this is

00:13:02,690 --> 00:13:06,589
done for reasons reproducibility we want

00:13:04,519 --> 00:13:10,550
everything to be exactly the same in

00:13:06,589 --> 00:13:12,529
every environment but on the typical HPC

00:13:10,550 --> 00:13:15,290
setup and I'm using a supercomputer at

00:13:12,529 --> 00:13:17,240
Oakridge yeah we're not allowed to run a

00:13:15,290 --> 00:13:19,279
demon with root privileges you know so

00:13:17,240 --> 00:13:23,360
the build system running on oak reaches

00:13:19,279 --> 00:13:25,209
out one solution we have which is also

00:13:23,360 --> 00:13:28,339
described by Ricardo is he who is here

00:13:25,209 --> 00:13:30,230
you could mount a new store through NFS

00:13:28,339 --> 00:13:33,339
and have to have a build demon sitting

00:13:30,230 --> 00:13:35,209
on a separate note somewhere which is a

00:13:33,339 --> 00:13:36,440
possibility of creating these packages

00:13:35,209 --> 00:13:38,930
download these packages installing these

00:13:36,440 --> 00:13:40,699
packages and making them available in

00:13:38,930 --> 00:13:42,260
the cluster so if you gave a slightly

00:13:40,699 --> 00:13:46,160
enlightened system minister this is a

00:13:42,260 --> 00:13:49,040
possibility but if you don't what what

00:13:46,160 --> 00:13:52,130
do you do right so some years back with

00:13:49,040 --> 00:13:53,269
the next set right and this is this is a

00:13:52,130 --> 00:13:55,670
link actually this these slides are

00:13:53,269 --> 00:13:56,779
online you can you can download them if

00:13:55,670 --> 00:13:57,980
you click on this link it will take you

00:13:56,779 --> 00:13:59,779
to the next distribution which is

00:13:57,980 --> 00:14:03,529
assisted distribution of geeks geeks was

00:13:59,779 --> 00:14:04,910
forked of Nyx five years ago and I try

00:14:03,529 --> 00:14:07,940
to use P route and people it worked

00:14:04,910 --> 00:14:10,610
great yeah so it actually slams in you

00:14:07,940 --> 00:14:13,430
know a local directory for a global

00:14:10,610 --> 00:14:15,290
directory yeah so the new store actually

00:14:13,430 --> 00:14:17,120
goats remounted somewhere in my home

00:14:15,290 --> 00:14:18,120
directory and that way I could run this

00:14:17,120 --> 00:14:19,710
over with

00:14:18,120 --> 00:14:22,880
every time this direct it needs to be

00:14:19,710 --> 00:14:28,950
resolved yeah it slows down the process

00:14:22,880 --> 00:14:31,500
so a couple years back with a local Dora

00:14:28,950 --> 00:14:33,029
I'm all set for them here I had a

00:14:31,500 --> 00:14:34,650
discussion he said okay you know you

00:14:33,029 --> 00:14:35,010
have actually pretty unique path here

00:14:34,650 --> 00:14:37,100
right

00:14:35,010 --> 00:14:39,870
so for glitzy two point two point three

00:14:37,100 --> 00:14:41,150
the Lipsy library the shared library we

00:14:39,870 --> 00:14:44,100
have a path and it looks like this

00:14:41,150 --> 00:14:45,240
includes a hash value and if you would

00:14:44,100 --> 00:14:50,430
scan the software you could actually

00:14:45,240 --> 00:14:52,529
find this hash value yes if you do look

00:14:50,430 --> 00:14:54,180
for this you know the LinkedIn shared

00:14:52,529 --> 00:14:57,390
libraries of the LDC cope island

00:14:54,180 --> 00:14:59,790
decompiler you will see something like

00:14:57,390 --> 00:15:02,850
this yeah so this also explains the way

00:14:59,790 --> 00:15:05,580
what what gigs actually does right yeah

00:15:02,850 --> 00:15:07,490
it's it it hard links all these

00:15:05,580 --> 00:15:12,839
libraries yes so they are found

00:15:07,490 --> 00:15:14,190
separately on your system so one thing

00:15:12,839 --> 00:15:15,660
you could do is try to rewrite these

00:15:14,190 --> 00:15:18,600
targets inside the files

00:15:15,660 --> 00:15:21,839
yeah and Conda actually does this - in

00:15:18,600 --> 00:15:23,820
some cases yeah and only dependency you

00:15:21,839 --> 00:15:25,200
actually is left is the Linux kernel

00:15:23,820 --> 00:15:28,050
itself because actually when we when we

00:15:25,200 --> 00:15:30,120
ship this Eclipse is included and the

00:15:28,050 --> 00:15:31,830
Linnet loader the shared library loader

00:15:30,120 --> 00:15:39,450
is also included there which is this one

00:15:31,830 --> 00:15:41,339
load Linux so what happened here yeah

00:15:39,450 --> 00:15:42,720
the path is a fingerprint we scan all

00:15:41,339 --> 00:15:44,279
the files replace the fingerprints with

00:15:42,720 --> 00:15:46,110
something else which has a relative path

00:15:44,279 --> 00:15:48,290
so this is good news left store and here

00:15:46,110 --> 00:15:50,250
I have a home directory up to lbc test

00:15:48,290 --> 00:15:52,080
yeah and it worked

00:15:50,250 --> 00:15:53,850
yeah and there's a tool written by Elka

00:15:52,080 --> 00:15:57,930
called pad shelf which actually can do

00:15:53,850 --> 00:16:01,080
this for you on elf files and the link

00:15:57,930 --> 00:16:02,520
is here and in textual files like in

00:16:01,080 --> 00:16:04,680
Ruby and Perl there's also these these

00:16:02,520 --> 00:16:05,910
these long file names these have these

00:16:04,680 --> 00:16:07,740
fingerprints which could also be

00:16:05,910 --> 00:16:09,750
replaced easily of course unfortunately

00:16:07,740 --> 00:16:12,089
when it comes to Python and JVM it

00:16:09,750 --> 00:16:14,220
doesn't work that well mostly because

00:16:12,089 --> 00:16:15,690
they're not zero terminated yeah and you

00:16:14,220 --> 00:16:17,100
cannot just without knowing their

00:16:15,690 --> 00:16:21,110
internal file format description we

00:16:17,100 --> 00:16:24,029
cannot just expand these files yeah so

00:16:21,110 --> 00:16:25,620
so one night I had an idea I said well

00:16:24,029 --> 00:16:28,380
why don't we keep the file path exactly

00:16:25,620 --> 00:16:31,410
the same size and patch everything yeah

00:16:28,380 --> 00:16:33,300
so basically there's a second insight

00:16:31,410 --> 00:16:35,190
yes a the end of is something that has

00:16:33,300 --> 00:16:37,730
the exact same fine length so yeah

00:16:35,190 --> 00:16:40,560
string length it's the home user opt

00:16:37,730 --> 00:16:43,319
gets replaced and the hashed value

00:16:40,560 --> 00:16:50,100
basically it gets cannibalized yet to

00:16:43,319 --> 00:16:51,810
make it the same size okay and it works

00:16:50,100 --> 00:16:53,399
the only downside is that you know the

00:16:51,810 --> 00:16:56,069
prefix can have to be up to 40 letters

00:16:53,399 --> 00:17:00,209
long yeah because then your hash values

00:16:56,069 --> 00:17:01,709
going on the and the prefix so I've put

00:17:00,209 --> 00:17:04,679
in an example it's online you can do it

00:17:01,709 --> 00:17:06,059
yeah so you can download the latest D

00:17:04,679 --> 00:17:09,390
compiler which was released only a few

00:17:06,059 --> 00:17:12,089
days ago it's a 24 megabyte downloads it

00:17:09,390 --> 00:17:16,409
unpacks into 140 megabyte and installs

00:17:12,089 --> 00:17:19,789
in 3 seconds yeah so in the installation

00:17:16,409 --> 00:17:19,789
of course is the rewriting of the path

00:17:20,780 --> 00:17:24,569
and it comes with the batteries included

00:17:23,220 --> 00:17:27,299
right because all the shared libraries

00:17:24,569 --> 00:17:28,470
are with it and Eclipse e included so

00:17:27,299 --> 00:17:30,090
you don't have this typical problem that

00:17:28,470 --> 00:17:32,940
you get these glitzy incompatibilities

00:17:30,090 --> 00:17:34,500
or LLVM incompatible included in

00:17:32,940 --> 00:17:40,860
compatibility is because the kitchen

00:17:34,500 --> 00:17:43,140
sink is sink it's just included yeah so

00:17:40,860 --> 00:17:45,150
so far i've tried elysee i've tried ruby

00:17:43,140 --> 00:17:48,720
with SSL and nokogiri which also

00:17:45,150 --> 00:17:51,809
notorious and then a some bombuh tool

00:17:48,720 --> 00:17:53,309
which is a tool that is written in indy

00:17:51,809 --> 00:17:55,799
in the D language and it's actually

00:17:53,309 --> 00:17:59,220
deployed among many HBC's around the

00:17:55,799 --> 00:18:00,929
world yeah and this tool at the until

00:17:59,220 --> 00:18:02,610
today we've actually done you know by

00:18:00,929 --> 00:18:04,980
statically linking in the libraries yeah

00:18:02,610 --> 00:18:07,260
so it's a binary without any references

00:18:04,980 --> 00:18:09,059
to outside with the current version is

00:18:07,260 --> 00:18:13,070
actually were using now to debug

00:18:09,059 --> 00:18:14,760
problems comes with the shared libraries

00:18:13,070 --> 00:18:17,220
and more is coming

00:18:14,760 --> 00:18:19,380
yes our Oakridge actually takes a great

00:18:17,220 --> 00:18:22,980
interest in this project so maybe that

00:18:19,380 --> 00:18:24,690
we get some support from them so gigs

00:18:22,980 --> 00:18:26,280
all says cross copulation it's built in

00:18:24,690 --> 00:18:28,049
like Ludo said you know she could say

00:18:26,280 --> 00:18:29,370
something add like these builds and

00:18:28,049 --> 00:18:32,970
instead of target for the bits in this

00:18:29,370 --> 00:18:33,990
case and then compile something and then

00:18:32,970 --> 00:18:39,360
you moved to to the new architecture

00:18:33,990 --> 00:18:41,130
Nouveau just runs yeah so I think in the

00:18:39,360 --> 00:18:44,539
foreseeable future we will have fire

00:18:41,130 --> 00:18:44,539
support and also Nvidia

00:18:45,320 --> 00:18:49,259
so what does this actually gives us yeah

00:18:47,669 --> 00:18:51,360
the thing is to understand really

00:18:49,259 --> 00:18:53,100
clearly is that X is an existing

00:18:51,360 --> 00:18:54,899
distribution here so people are are

00:18:53,100 --> 00:18:57,059
using these packages everyday and

00:18:54,899 --> 00:18:58,320
there's thousands of people who deploy

00:18:57,059 --> 00:18:59,580
these packages as maybe a hundred

00:18:58,320 --> 00:19:02,370
thousand people who use these packages

00:18:59,580 --> 00:19:03,929
yeah so unlike many other systems like

00:19:02,370 --> 00:19:06,559
easy built which is you know kind of ad

00:19:03,929 --> 00:19:09,809
hoc you've actually completely

00:19:06,559 --> 00:19:11,159
reproducible and tested environment the

00:19:09,809 --> 00:19:13,860
only thing on this trick that I'm doing

00:19:11,159 --> 00:19:15,330
is rewriting the prefix yeah so if

00:19:13,860 --> 00:19:16,590
there's any issue with the software it

00:19:15,330 --> 00:19:19,590
could be it could have to do with the

00:19:16,590 --> 00:19:22,529
prefix itself but so far we've not hit

00:19:19,590 --> 00:19:23,970
any problems and I want to conclude that

00:19:22,529 --> 00:19:29,789
two simple ideas which happened at

00:19:23,970 --> 00:19:31,320
folsom can come a long way then we can

00:19:29,789 --> 00:19:33,419
carry built HPC you know I can easily

00:19:31,320 --> 00:19:35,370
see this happen you can create a

00:19:33,419 --> 00:19:37,529
repository of binary packages and this

00:19:35,370 --> 00:19:39,389
can be 1-click installs in essentially

00:19:37,529 --> 00:19:41,399
there already but the install script is

00:19:39,389 --> 00:19:43,019
inside the Tarble at this point you can

00:19:41,399 --> 00:19:44,970
have it outside you can ships over

00:19:43,019 --> 00:19:59,220
easily yeah

00:19:44,970 --> 00:20:07,350
maybe we get it in Linux thank you any

00:19:59,220 --> 00:20:15,629
questions I actually have a question one

00:20:07,350 --> 00:20:19,440
of the people actually you're hitting

00:20:15,629 --> 00:20:22,320
good points isolation is a big issue and

00:20:19,440 --> 00:20:25,730
there are actually people now combined

00:20:22,320 --> 00:20:25,730
easy builds with Nix

00:20:34,030 --> 00:20:39,920
don't talk to build all the scientific

00:20:37,640 --> 00:20:41,540
sort of it is that a use case that makes

00:20:39,920 --> 00:20:43,610
sense to you or do you say you just

00:20:41,540 --> 00:20:51,530
throw all these people up and go the

00:20:43,610 --> 00:20:53,300
geeks or next week yeah so about using

00:20:51,530 --> 00:20:56,090
geeks as a back-end for easy build I

00:20:53,300 --> 00:20:57,320
don't know exactly how that could work I

00:20:56,090 --> 00:21:00,150
guess I don't know is easy bit

00:20:57,320 --> 00:21:02,340
sufficiently well

00:21:00,150 --> 00:21:03,900
yeah I don't know I mean maybe it would

00:21:02,340 --> 00:21:05,430
make sense do you want to come in

00:21:03,900 --> 00:21:09,090
yeah I think calm down we've seen the

00:21:05,430 --> 00:21:10,650
same thing right so and I think with

00:21:09,090 --> 00:21:12,300
both these systems you have real prom

00:21:10,650 --> 00:21:13,440
with bootstrapping yeah because you you

00:21:12,300 --> 00:21:15,930
have to bootstrap from the underlying

00:21:13,440 --> 00:21:17,970
distribution all right so one thing

00:21:15,930 --> 00:21:20,400
these can do immediately is create the

00:21:17,970 --> 00:21:22,560
bootstrap environment and from and build

00:21:20,400 --> 00:21:24,690
up from there and then slowly you know

00:21:22,560 --> 00:21:26,790
when you have geeks it available you can

00:21:24,690 --> 00:21:27,900
start replacing you know the stuff

00:21:26,790 --> 00:21:29,840
that's already there you don't have to

00:21:27,900 --> 00:21:32,670
do again an easy build

00:21:29,840 --> 00:21:43,670
how much scientific software is now

00:21:32,670 --> 00:21:43,670
supported Ricardo yes Prince

00:21:50,039 --> 00:21:55,629
there are a few HPC deployments already

00:21:53,679 --> 00:21:58,169
and people mostly by you info people

00:21:55,629 --> 00:22:01,299
like this these two people have been

00:21:58,169 --> 00:22:04,600
packaging a lot of value in four plus HP

00:22:01,299 --> 00:22:06,279
c plus algebra software to the yeah i

00:22:04,600 --> 00:22:19,120
think about forunate are packages in

00:22:06,279 --> 00:22:21,279
there well geek sexy also has a

00:22:19,120 --> 00:22:22,869
generator for packages yeah so of an

00:22:21,279 --> 00:22:34,450
existing art packaging you want to pull

00:22:22,869 --> 00:22:37,029
it in most of it is generator there's

00:22:34,450 --> 00:22:38,950
other stuff in easy both reasonably sure

00:22:37,029 --> 00:22:41,470
it's nothing deep sets it just really

00:22:38,950 --> 00:22:46,299
really nicely just like interactive

00:22:41,470 --> 00:22:52,929
configurations right if you package

00:22:46,299 --> 00:22:54,700
denotes a package manager npm we found

00:22:52,929 --> 00:23:01,080
already at two people died on the way

00:22:54,700 --> 00:23:01,080
right yes

00:23:06,340 --> 00:23:17,349
that's pretty what if they're if they

00:23:15,849 --> 00:23:22,769
don't to use our studio at this point I

00:23:17,349 --> 00:23:34,330
would suggest geeks yeah sorry

00:23:22,769 --> 00:23:36,129
why leader should answer this right so

00:23:34,330 --> 00:23:39,369
yeah I mean obviously you should be

00:23:36,129 --> 00:23:41,499
using geeks that's I mean the reason is

00:23:39,369 --> 00:23:43,359
that you would get so the advantage you

00:23:41,499 --> 00:23:45,940
would get with geeks ovaries abilities

00:23:43,359 --> 00:23:47,979
that reproducibility thing right so we

00:23:45,940 --> 00:23:49,929
have we have our plus lots of our

00:23:47,979 --> 00:23:51,879
packages and if you install them with

00:23:49,929 --> 00:23:53,440
geeks it's gonna be reproducible you

00:23:51,879 --> 00:23:55,809
know that it's gonna work just like on

00:23:53,440 --> 00:23:58,839
every other machine of geeks users right

00:23:55,809 --> 00:24:01,960
there's not gonna be bad surprises just

00:23:58,839 --> 00:24:04,749
on your specific machine now you will

00:24:01,960 --> 00:24:06,849
also I mean as it is now you'll have

00:24:04,749 --> 00:24:09,009
probably to run that that build demon

00:24:06,849 --> 00:24:11,529
has rules which may or may not be a

00:24:09,009 --> 00:24:13,869
problem in your case but the solution

00:24:11,529 --> 00:24:15,729
that Pietro DS is precisely one of the

00:24:13,869 --> 00:24:19,349
options we want to offer for people who

00:24:15,729 --> 00:24:19,349
cannot run the demon ass words

00:24:28,550 --> 00:24:33,320
Yeah right yeah you can't get twister

00:24:30,710 --> 00:24:35,120
right yeah so so we have a couple of

00:24:33,320 --> 00:24:38,030
more gig stops tomorrow in the guard EV

00:24:35,120 --> 00:24:39,590
room yeah so if you're interesting the

00:24:38,030 --> 00:24:41,950
technology that you'll get a lot more

00:24:39,590 --> 00:24:41,950
out of that

00:24:59,590 --> 00:25:14,409
say Sunday please everyone that's all we

00:25:12,879 --> 00:25:15,480
have time for in terms of questions if

00:25:14,409 --> 00:25:18,279
you want if you have further questions

00:25:15,480 --> 00:25:20,559
ok meet up with little bit comes open

00:25:18,279 --> 00:25:22,860
outside keep the discussion going

00:25:20,559 --> 00:25:26,110
thank you very much

00:25:22,860 --> 00:25:26,110

YouTube URL: https://www.youtube.com/watch?v=w4nl94fU39o


