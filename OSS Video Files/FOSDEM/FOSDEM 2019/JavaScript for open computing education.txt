Title: JavaScript for open computing education
Publication date: 2019-02-08
Playlist: FOSDEM 2019
Description: 
	by Evan Cole

At: FOSDEM 2019
https://video.fosdem.org/2019/H.1308/js_teaching_tool.webm


Prof. dr. Edsger W. Dijkstra says that the only true way to teach programming is by writing proofs by hand, on paper, approaching coding like a purely mathematical skill.  Only then, he claims, can students truly understand the "radical novelty" of programming.  He's onto something, analogies or high-level understanding are appealing and rewarding but ineffective for true learning.  What if there were a way to introduce key concepts of computer science in an honest way without scaring away even the above-average student? There are certain sticking points in introductory computer science that are difficult to teach and to learn.  Many efforts are moving towards visual programming environments, simplified languages, and AI tutors.  The problem with these approaches are open accessiblity &amp; skill transfer from learning environments to professional environments.  Using just JavaScript, devtools, and some clever study techniques it is possible to get many of the same benefits you see in custom learning environments while still providing a fluid transition to substantial CS concepts. 

Stop by to see how CS concepts integrate with every-day programming &amp; languages with some fun hands-on exercises. 

Room: H.1308 (Rolin)
Scheduled start: 2019-02-03 13:30:00+01
Captions: 
	00:00:04,680 --> 00:00:08,850
i adapter because that's what we have

00:00:06,480 --> 00:00:12,059
you don't even need the laptop so yeah

00:00:08,850 --> 00:00:14,759
come come actually close your eyes

00:00:12,059 --> 00:00:16,500
everybody close your eyes like this do

00:00:14,759 --> 00:00:18,150
you think you have a talk if you do then

00:00:16,500 --> 00:00:19,290
just raise your hand I can see when

00:00:18,150 --> 00:00:22,259
you're not closing your eyes so

00:00:19,290 --> 00:00:24,329
everybody close their eyes I'm not

00:00:22,259 --> 00:00:26,340
paying attention if you think you have

00:00:24,329 --> 00:00:28,649
it close your eyes close your eyes

00:00:26,340 --> 00:00:30,239
raise your hand if you have potentially

00:00:28,649 --> 00:00:35,550
you talk nobody else need to know just

00:00:30,239 --> 00:00:37,980
me okay you're pretty shy I will find a

00:00:35,550 --> 00:00:39,960
solution if you don't if nobody shows up

00:00:37,980 --> 00:00:43,019
that will be me again so we don't want

00:00:39,960 --> 00:00:47,789
to go there please find a finer talk at

00:00:43,019 --> 00:00:50,249
about 4:00 4:30 so we start about now as

00:00:47,789 --> 00:00:53,159
soon as everybody's sitting it was spots

00:00:50,249 --> 00:00:54,929
there if everyone has their computers

00:00:53,159 --> 00:00:57,839
pull them out because there are

00:00:54,929 --> 00:01:00,149
exercises you can follow along with and

00:00:57,839 --> 00:01:03,179
you now be pausing in between to see if

00:01:00,149 --> 00:01:04,800
anyone has questions along the way so

00:01:03,179 --> 00:01:07,290
take a moment if you can go to the

00:01:04,800 --> 00:01:09,240
FOSDEM page for this presentation go to

00:01:07,290 --> 00:01:10,710
the presentation link at the bottom and

00:01:09,240 --> 00:01:15,840
you can get to all the examples from the

00:01:10,710 --> 00:01:18,000
slides now is the moment to make noise

00:01:15,840 --> 00:01:20,790
with your laptop take your laptop out

00:01:18,000 --> 00:01:24,510
now you don't learn if you just listen

00:01:20,790 --> 00:01:28,890
plus it's not fun so it's mandatory if

00:01:24,510 --> 00:01:31,640
you have a laptop take it out they're

00:01:28,890 --> 00:01:31,640
going to hate me

00:01:35,290 --> 00:01:38,190
that's fine

00:01:43,770 --> 00:01:46,770
nope

00:01:58,510 --> 00:02:03,010
Oh javascript is not funny if you do it

00:02:01,210 --> 00:02:04,840
alone so you need to help others to get

00:02:03,010 --> 00:02:07,270
it for this all right

00:02:04,840 --> 00:02:08,950
this talk is a little less technical and

00:02:07,270 --> 00:02:12,040
it's actually about how do we make the

00:02:08,950 --> 00:02:13,390
technical approachable so I would like

00:02:12,040 --> 00:02:15,730
to show you some ways that we can use

00:02:13,390 --> 00:02:18,940
JavaScript as maybe possibly the best

00:02:15,730 --> 00:02:20,800
language for effective learning so how

00:02:18,940 --> 00:02:21,880
not only then can you teach with

00:02:20,800 --> 00:02:24,190
JavaScript but how do you teach

00:02:21,880 --> 00:02:25,570
programming at all what are the best

00:02:24,190 --> 00:02:28,060
practices for that and how can

00:02:25,570 --> 00:02:31,240
JavaScript fit very well with those best

00:02:28,060 --> 00:02:33,250
practices how does JavaScript fit very

00:02:31,240 --> 00:02:35,530
well with open education and we're gonna

00:02:33,250 --> 00:02:37,450
look at open education as a slightly

00:02:35,530 --> 00:02:38,740
different thing from open source and see

00:02:37,450 --> 00:02:40,600
that javascript is really the best

00:02:38,740 --> 00:02:43,210
option for fully open computing

00:02:40,600 --> 00:02:44,950
education and finally we're going to

00:02:43,210 --> 00:02:47,580
look at what is computing literacy how

00:02:44,950 --> 00:02:49,660
can we teach it and how does the

00:02:47,580 --> 00:02:51,730
single-pane nature of the JavaScript

00:02:49,660 --> 00:02:53,440
browser where you can inspect have the

00:02:51,730 --> 00:02:56,260
UI and all of this sort of back-end

00:02:53,440 --> 00:02:58,240
front-end together at the same time make

00:02:56,260 --> 00:03:01,510
it the best language for computing

00:02:58,240 --> 00:03:03,700
literacy so each one there's a little

00:03:01,510 --> 00:03:05,770
link of exercises within each slide I'll

00:03:03,700 --> 00:03:07,510
talk over them I'll give you guys a

00:03:05,770 --> 00:03:09,550
minute or two to look at them and then

00:03:07,510 --> 00:03:13,300
questions so we'll be pausing three

00:03:09,550 --> 00:03:15,040
times for questions and answers first

00:03:13,300 --> 00:03:16,870
we're gonna think instructional design

00:03:15,040 --> 00:03:20,200
how do you teach programming

00:03:16,870 --> 00:03:22,150
I think the first sort of not

00:03:20,200 --> 00:03:23,739
necessarily intuitive thing is that you

00:03:22,150 --> 00:03:26,830
need to explicitly teach the implicit

00:03:23,739 --> 00:03:28,420
the general knowledge you here is to get

00:03:26,830 --> 00:03:29,590
people to think like a programmer tell

00:03:28,420 --> 00:03:31,360
people what you're thinking get the

00:03:29,590 --> 00:03:34,060
students to think along the same

00:03:31,360 --> 00:03:36,310
processes as you that is of course the

00:03:34,060 --> 00:03:38,620
end goal but between the beginning and

00:03:36,310 --> 00:03:40,090
that phase there's a lot of implicit

00:03:38,620 --> 00:03:42,430
knowledge that you as a programmer

00:03:40,090 --> 00:03:43,720
already have when there's an error why

00:03:42,430 --> 00:03:45,280
do you look at the line that you looked

00:03:43,720 --> 00:03:47,200
at why did you move your mouse to the

00:03:45,280 --> 00:03:48,910
file you move the - why did you scroll

00:03:47,200 --> 00:03:50,170
where you did all of these little tiny

00:03:48,910 --> 00:03:52,630
things that you don't even think about

00:03:50,170 --> 00:03:54,190
or actually what a student needs to

00:03:52,630 --> 00:03:55,900
learn before they can get to the

00:03:54,190 --> 00:03:58,000
interesting the strategy stuff that you

00:03:55,900 --> 00:04:00,580
would like to teach so find ways to

00:03:58,000 --> 00:04:03,520
teach people what you're doing not what

00:04:00,580 --> 00:04:05,560
you're thinking the second is to

00:04:03,520 --> 00:04:08,079
emphasize the process over the product

00:04:05,560 --> 00:04:08,859
so this is along the same lines but now

00:04:08,079 --> 00:04:10,600
we're going to think how do you

00:04:08,859 --> 00:04:11,730
explicitly structure a series of

00:04:10,600 --> 00:04:13,500
exercises to

00:04:11,730 --> 00:04:15,750
emphasize the process over the product

00:04:13,500 --> 00:04:17,780
it's one thing to just say all right

00:04:15,750 --> 00:04:19,799
build me a recursive merge sort and

00:04:17,780 --> 00:04:22,169
while you're at it think about what

00:04:19,799 --> 00:04:24,900
you're doing the focus of that exercise

00:04:22,169 --> 00:04:27,330
is still the finished working code the

00:04:24,900 --> 00:04:29,490
tests pass or they don't and it's really

00:04:27,330 --> 00:04:31,410
up to the students personal discipline

00:04:29,490 --> 00:04:33,660
and experience whether or not they can

00:04:31,410 --> 00:04:36,180
document and keep track of what they

00:04:33,660 --> 00:04:38,010
learned along the way so the type of

00:04:36,180 --> 00:04:40,440
solution for this would be to assign

00:04:38,010 --> 00:04:42,419
steps instead of a final product say I

00:04:40,440 --> 00:04:44,370
don't care if your code works but I want

00:04:42,419 --> 00:04:46,590
your best attempt at these eight steps

00:04:44,370 --> 00:04:50,789
on the law along the way to a recursive

00:04:46,590 --> 00:04:52,350
solution context is content this one is

00:04:50,789 --> 00:04:54,600
something that's often overlooked

00:04:52,350 --> 00:04:56,400
usually with things like free code camp

00:04:54,600 --> 00:04:58,740
or Khan Academy the thought is let's

00:04:56,400 --> 00:05:01,620
simplify the programming environment so

00:04:58,740 --> 00:05:03,630
students can focus on code but that is

00:05:01,620 --> 00:05:06,000
absolutely unhelpful I believe in the

00:05:03,630 --> 00:05:08,970
long run because coding does not happen

00:05:06,000 --> 00:05:10,620
in a protective environment coding

00:05:08,970 --> 00:05:12,120
happens in a real environment it happens

00:05:10,620 --> 00:05:13,830
with real browsers it happens with real

00:05:12,120 --> 00:05:17,280
errors it happens with other people's

00:05:13,830 --> 00:05:19,530
code so context is content when wherever

00:05:17,280 --> 00:05:21,090
you place an exercise the student is

00:05:19,530 --> 00:05:22,889
explicitly learning what you told them

00:05:21,090 --> 00:05:24,780
to and implicitly learning how to

00:05:22,889 --> 00:05:26,639
navigate that environment if they're

00:05:24,780 --> 00:05:28,680
spending six months on free code camp

00:05:26,639 --> 00:05:31,470
that's six months that they not only

00:05:28,680 --> 00:05:33,479
didn't learn how to use the browser but

00:05:31,470 --> 00:05:36,240
didn't learn how to integrate JavaScript

00:05:33,479 --> 00:05:37,860
into their use of the browser so when

00:05:36,240 --> 00:05:39,599
you're designing exercises or projects

00:05:37,860 --> 00:05:41,820
think very carefully about what's the

00:05:39,599 --> 00:05:43,800
level of my student where would they be

00:05:41,820 --> 00:05:47,310
using the skills I'm trying to teach

00:05:43,800 --> 00:05:50,270
them and how do I embed the the skills I

00:05:47,310 --> 00:05:53,490
want in a simple example in context

00:05:50,270 --> 00:05:56,280
which brings to the last point full

00:05:53,490 --> 00:05:57,960
complexity max simplicity when you're

00:05:56,280 --> 00:05:59,039
designing an exercise you're helping

00:05:57,960 --> 00:06:01,800
someone you're coming up with a little

00:05:59,039 --> 00:06:03,870
snippet think what is the entire

00:06:01,800 --> 00:06:06,150
complete task that the student will have

00:06:03,870 --> 00:06:09,120
to deal with and how do I reduce that to

00:06:06,150 --> 00:06:10,650
its absolute most simplest form so I

00:06:09,120 --> 00:06:14,760
have an example for this we'll go over

00:06:10,650 --> 00:06:18,240
together quickly and it is an example

00:06:14,760 --> 00:06:19,919
that helps teach this and binding so

00:06:18,240 --> 00:06:22,620
what I have here is an example of an

00:06:19,919 --> 00:06:24,380
embedded resource it's what I call it I

00:06:22,620 --> 00:06:26,810
don't know what they're actually called

00:06:24,380 --> 00:06:29,750
the idea here is that the context is the

00:06:26,810 --> 00:06:32,270
content not only did I write a series of

00:06:29,750 --> 00:06:34,940
explanations on how this works and how

00:06:32,270 --> 00:06:37,190
binding works and how events work my

00:06:34,940 --> 00:06:38,720
example is written in code and it runs

00:06:37,190 --> 00:06:40,580
and the student is going to be

00:06:38,720 --> 00:06:45,020
interacting with that the same way oh

00:06:40,580 --> 00:06:46,820
this is weird in presentation mode yeah

00:06:45,020 --> 00:06:48,170
the students going to be interacting

00:06:46,820 --> 00:06:52,210
with this in the same way that they

00:06:48,170 --> 00:06:52,210
would generally interact with real code

00:06:53,080 --> 00:06:58,280
so let's say that that you're interested

00:06:55,730 --> 00:07:00,350
in what happens when we use a free

00:06:58,280 --> 00:07:02,750
variable vary of free variable by

00:07:00,350 --> 00:07:04,820
context so we have a callback function

00:07:02,750 --> 00:07:07,720
for an event inside that callback

00:07:04,820 --> 00:07:11,540
function is a free variable using this I

00:07:07,720 --> 00:07:14,530
want to set that by doing vine so we can

00:07:11,540 --> 00:07:17,830
use this little helper function load

00:07:14,530 --> 00:07:17,830
that's too

00:07:27,009 --> 00:07:29,009
Oh

00:07:32,439 --> 00:07:43,749
a binding so the student has now loaded

00:07:41,919 --> 00:07:46,449
just the lesson they wanted but that

00:07:43,749 --> 00:07:48,999
lesson is actually written in code but

00:07:46,449 --> 00:07:51,309
it also has a helpful log that explains

00:07:48,999 --> 00:07:53,619
in English what happened as the code

00:07:51,309 --> 00:07:57,039
executed so the student can study the

00:07:53,619 --> 00:07:59,589
code itself they can additionally study

00:07:57,039 --> 00:08:00,999
how did it log itself so can see not

00:07:59,589 --> 00:08:03,339
only what happened what was the source

00:08:00,999 --> 00:08:05,619
code but how did the code write its own

00:08:03,339 --> 00:08:09,849
description what was the outcome on the

00:08:05,619 --> 00:08:13,779
screen and what is happening inside of

00:08:09,849 --> 00:08:17,789
all of this every time they click the

00:08:13,779 --> 00:08:19,899
button its clicking bound a Dom element

00:08:17,789 --> 00:08:30,879
but we can see that the button they're

00:08:19,899 --> 00:08:33,370
actually clicking is host Dom element so

00:08:30,879 --> 00:08:36,519
when I click it it prints the

00:08:33,370 --> 00:08:38,919
information from my bound function so

00:08:36,519 --> 00:08:40,509
the bound callback on the host element

00:08:38,919 --> 00:08:42,399
if you want to see how exactly that was

00:08:40,509 --> 00:08:44,620
implemented you're not reading an

00:08:42,399 --> 00:08:46,209
unmarked down looking at code back and

00:08:44,620 --> 00:08:48,100
forth trying to string it together you

00:08:46,209 --> 00:08:49,630
are in context seeing the simplest

00:08:48,100 --> 00:08:53,439
possible example that will teach this

00:08:49,630 --> 00:08:55,180
concept the first step here is even to

00:08:53,439 --> 00:08:57,459
make it simpler and demonstrate the

00:08:55,180 --> 00:09:00,490
exact same mechanism taking place with a

00:08:57,459 --> 00:09:02,829
simple plain JavaScript object so that

00:09:00,490 --> 00:09:04,990
is the first bit how can we make good

00:09:02,829 --> 00:09:07,769
exercises for teaching programming and

00:09:04,990 --> 00:09:10,389
how is JavaScript very useful for that

00:09:07,769 --> 00:09:12,939
we had to explicitly teach the implicit

00:09:10,389 --> 00:09:14,649
it's not only about teaching the thought

00:09:12,939 --> 00:09:16,600
process it's about teaching the implicit

00:09:14,649 --> 00:09:18,990
skills that allow you to focus on the

00:09:16,600 --> 00:09:21,250
thought process and not every single bug

00:09:18,990 --> 00:09:24,009
focus on the process over the product

00:09:21,250 --> 00:09:26,139
you have exercises you have words you

00:09:24,009 --> 00:09:28,180
have projects where the explicit goals

00:09:26,139 --> 00:09:30,519
are to complete a series of steps rather

00:09:28,180 --> 00:09:33,100
than produce working code you have

00:09:30,519 --> 00:09:35,800
contexts as content carefully pairing

00:09:33,100 --> 00:09:38,079
exercises and projects with a specific

00:09:35,800 --> 00:09:39,730
learning environment so that where they

00:09:38,079 --> 00:09:42,519
are studying the code becomes part of

00:09:39,730 --> 00:09:44,319
the learning objective and finally put

00:09:42,519 --> 00:09:45,490
all that together and you have full

00:09:44,319 --> 00:09:48,940
complexity Max and

00:09:45,490 --> 00:09:53,740
city teach the full complex task in the

00:09:48,940 --> 00:09:58,990
simplest possible way questions now I

00:09:53,740 --> 00:10:00,580
can just go on we can look at a couple

00:09:58,990 --> 00:10:04,260
more examples of each step if you like

00:10:00,580 --> 00:10:06,459
yes so explicitly teaching the implicit

00:10:04,260 --> 00:10:09,640
for that I have an example of what I

00:10:06,459 --> 00:10:12,550
call expanding one of the most important

00:10:09,640 --> 00:10:14,649
skills that we experienced programmers

00:10:12,550 --> 00:10:16,450
have is the ability to step through code

00:10:14,649 --> 00:10:17,860
in our head know which line is going to

00:10:16,450 --> 00:10:19,870
be executed where did each value

00:10:17,860 --> 00:10:22,000
variable get its value how is that

00:10:19,870 --> 00:10:24,100
changing over time that is extremely

00:10:22,000 --> 00:10:25,899
difficult to teach especially because

00:10:24,100 --> 00:10:27,610
it's not usually explicitly taught

00:10:25,899 --> 00:10:29,080
people just say read the code and figure

00:10:27,610 --> 00:10:31,720
out what's happening and then people

00:10:29,080 --> 00:10:33,940
don't and what javascript has it so

00:10:31,720 --> 00:10:36,670
special is the flexibility of how many

00:10:33,940 --> 00:10:39,730
ways you can write the same code so this

00:10:36,670 --> 00:10:42,490
expanding is a form of refactoring that

00:10:39,730 --> 00:10:44,830
follows very strict rules so students

00:10:42,490 --> 00:10:46,690
don't have to focus on how they're going

00:10:44,830 --> 00:10:49,570
to do it they know exactly what's the

00:10:46,690 --> 00:10:51,670
next step in the process the first thing

00:10:49,570 --> 00:10:54,450
you expand any control flow statements

00:10:51,670 --> 00:10:57,220
so you're going to remove the conditions

00:10:54,450 --> 00:10:59,740
from directly within the ifs so that you

00:10:57,220 --> 00:11:01,209
can later assert them there's an example

00:10:59,740 --> 00:11:03,130
of a while loop below it's a very

00:11:01,209 --> 00:11:05,820
similar process then you're going to

00:11:03,130 --> 00:11:09,640
expand the expressions using block scope

00:11:05,820 --> 00:11:12,430
you split a one-line expression into a

00:11:09,640 --> 00:11:16,540
series of proper order of operation

00:11:12,430 --> 00:11:18,070
single operation on one line so your

00:11:16,540 --> 00:11:20,370
code is becoming a lot longer and

00:11:18,070 --> 00:11:22,420
possibly more difficult to reason with

00:11:20,370 --> 00:11:23,440
until you get used to it then you see

00:11:22,420 --> 00:11:25,630
that this is actually an incredibly

00:11:23,440 --> 00:11:28,420
powerful tool because you can start to

00:11:25,630 --> 00:11:29,950
build exercises and even you are not

00:11:28,420 --> 00:11:31,750
building exercises the student

00:11:29,950 --> 00:11:34,180
themselves can build their own feedback

00:11:31,750 --> 00:11:37,720
mechanisms just by simply putting on the

00:11:34,180 --> 00:11:39,220
same line a little log push so now what

00:11:37,720 --> 00:11:41,140
the student has is a step by step

00:11:39,220 --> 00:11:44,649
process of what happened as this code

00:11:41,140 --> 00:11:45,220
executed because it's all JavaScript in

00:11:44,649 --> 00:11:47,410
the browser

00:11:45,220 --> 00:11:53,079
they can just simply copy paste it from

00:11:47,410 --> 00:11:55,180
the markdown into the console they fill

00:11:53,079 --> 00:12:02,490
in some values

00:11:55,180 --> 00:12:06,340
and they expect it to be false oh yeah

00:12:02,490 --> 00:12:11,530
where was that this is an error I forgot

00:12:06,340 --> 00:12:18,520
to fix in the push version that one

00:12:11,530 --> 00:12:21,040
let's go to the while loop it works so

00:12:18,520 --> 00:12:24,430
for the looping it's a very similar

00:12:21,040 --> 00:12:27,190
process you start with a loop a for loop

00:12:24,430 --> 00:12:30,700
but for loops can always be expanded

00:12:27,190 --> 00:12:32,980
into a while loop you put it inside of a

00:12:30,700 --> 00:12:35,380
block to preserve the integrity of the

00:12:32,980 --> 00:12:37,860
let or the the block scope variable in

00:12:35,380 --> 00:12:40,900
your for loop block the whole while

00:12:37,860 --> 00:12:43,030
check the condition I'm sorry set the

00:12:40,900 --> 00:12:45,250
initial value check the condition at

00:12:43,030 --> 00:12:50,550
every loop update according to the same

00:12:45,250 --> 00:12:53,880
rule expand all the expressions and

00:12:50,550 --> 00:12:53,880
finally log it

00:13:01,190 --> 00:13:05,110
we'll just set some expected values

00:13:11,910 --> 00:13:16,800
so we failed we did not have the correct

00:13:14,220 --> 00:13:19,050
prediction so here you are emphasizing

00:13:16,800 --> 00:13:20,940
what is the behavior of the code versus

00:13:19,050 --> 00:13:23,550
the implementation what did you expect

00:13:20,940 --> 00:13:26,940
the code to return and how exactly did

00:13:23,550 --> 00:13:29,310
it get there so now what a student has

00:13:26,940 --> 00:13:32,760
oh yeah Firefox isn't always the best

00:13:29,310 --> 00:13:35,400
for this they can step through the code

00:13:32,760 --> 00:13:37,380
what value did every line of code have

00:13:35,400 --> 00:13:39,060
at every step and this allows you to

00:13:37,380 --> 00:13:43,290
make very good sense of what is

00:13:39,060 --> 00:13:46,020
otherwise rather opaque code so that is

00:13:43,290 --> 00:13:49,350
making the explicit making the implicit

00:13:46,020 --> 00:13:52,380
explicit an example of teaching process

00:13:49,350 --> 00:13:54,540
over a product I have a recursion here

00:13:52,380 --> 00:13:56,760
so rather than saying recursion works

00:13:54,540 --> 00:13:59,040
like this draw some diagrams expect them

00:13:56,760 --> 00:14:01,590
to write working code say no recursion

00:13:59,040 --> 00:14:03,420
is built up of these steps these pieces

00:14:01,590 --> 00:14:05,460
every recursive solution has the same

00:14:03,420 --> 00:14:07,980
pieces and when you're planning a

00:14:05,460 --> 00:14:09,450
recursive solution build the pieces in

00:14:07,980 --> 00:14:11,550
this order and you can later assemble

00:14:09,450 --> 00:14:13,530
them back together to a solid solution

00:14:11,550 --> 00:14:14,550
this gives students something that they

00:14:13,530 --> 00:14:17,730
can work on small manageable

00:14:14,550 --> 00:14:20,370
understandable pieces so I've given an

00:14:17,730 --> 00:14:24,720
open end test an open end strategy a

00:14:20,370 --> 00:14:27,330
challenge but then the steps first test

00:14:24,720 --> 00:14:31,020
cases without even running the code how

00:14:27,330 --> 00:14:32,460
do you expect that it will behave you

00:14:31,020 --> 00:14:34,830
could also provide those as part of the

00:14:32,460 --> 00:14:36,630
exercise base case write a function that

00:14:34,830 --> 00:14:40,560
determines if the argument is a base

00:14:36,630 --> 00:14:42,180
case focusing on one piece only what do

00:14:40,560 --> 00:14:45,510
I do if it is a base case what do I do

00:14:42,180 --> 00:14:48,180
to the operation or to the argument so I

00:14:45,510 --> 00:14:50,460
came to build back up the breakdown if

00:14:48,180 --> 00:14:52,590
it's not a base case how do I move the

00:14:50,460 --> 00:14:54,240
argument closer to a base case write a

00:14:52,590 --> 00:14:56,580
function that does that you'll notice

00:14:54,240 --> 00:14:57,960
that each point there are tests along

00:14:56,580 --> 00:15:01,800
I'll get to the helper function at the

00:14:57,960 --> 00:15:04,080
bottom build up I have to recurse

00:15:01,800 --> 00:15:07,100
partial solutions what do I do to get

00:15:04,080 --> 00:15:10,500
them closer to a full solution finally

00:15:07,100 --> 00:15:13,590
simply call them in a scaffold it's a

00:15:10,500 --> 00:15:16,230
recursive solution if it's a base case

00:15:13,590 --> 00:15:19,230
turn around if not we're going to break

00:15:16,230 --> 00:15:23,670
it down we will recurse and we'll build

00:15:19,230 --> 00:15:25,740
back up and return students can now then

00:15:23,670 --> 00:15:27,360
factor out their functions

00:15:25,740 --> 00:15:29,720
just copy pacing the body of their

00:15:27,360 --> 00:15:32,990
functions where the function call was

00:15:29,720 --> 00:15:35,190
they can collapse it if they like and

00:15:32,990 --> 00:15:37,350
convert it into a formal recursive

00:15:35,190 --> 00:15:39,690
definition and the step from here to

00:15:37,350 --> 00:15:41,190
here is actually relatively simple so

00:15:39,690 --> 00:15:42,570
what you have also is not only a good

00:15:41,190 --> 00:15:45,300
way to teach students the process of

00:15:42,570 --> 00:15:47,790
solving a problem but you're making a

00:15:45,300 --> 00:15:49,350
manageable step from the practice to the

00:15:47,790 --> 00:15:50,700
theory and the mathematical theory is

00:15:49,350 --> 00:15:53,820
often very difficult to get students

00:15:50,700 --> 00:15:55,170
interested in and to even understand if

00:15:53,820 --> 00:15:58,620
you want a nice little challenge step

00:15:55,170 --> 00:16:01,710
you can see how to compose those

00:15:58,620 --> 00:16:02,210
solutions so I'm actually taking longer

00:16:01,710 --> 00:16:04,650
than I thought

00:16:02,210 --> 00:16:07,740
context is context look at these on

00:16:04,650 --> 00:16:09,990
yourself I took a simple exercise from

00:16:07,740 --> 00:16:10,650
free code camp and just set it up in a

00:16:09,990 --> 00:16:14,700
whole bunch of different learning

00:16:10,650 --> 00:16:18,000
environments open source does not equal

00:16:14,700 --> 00:16:20,340
open education open source is open

00:16:18,000 --> 00:16:23,820
access to source code open education is

00:16:20,340 --> 00:16:25,980
open access to education open source

00:16:23,820 --> 00:16:27,690
educational resources is anything built

00:16:25,980 --> 00:16:30,450
for education that has an open source

00:16:27,690 --> 00:16:32,580
license but that doesn't mean that it's

00:16:30,450 --> 00:16:34,650
easily adaptable by the people who will

00:16:32,580 --> 00:16:39,300
be using it to learn so for a simple

00:16:34,650 --> 00:16:41,760
example I made here's a j/s parsons it

00:16:39,300 --> 00:16:43,800
builds parsons problems for students and

00:16:41,760 --> 00:16:45,360
it's actually the teacher that has to

00:16:43,800 --> 00:16:47,460
build it there's full documentation on

00:16:45,360 --> 00:16:49,020
how to use it and it's not immediately

00:16:47,460 --> 00:16:50,790
obvious how a student would be able to

00:16:49,020 --> 00:16:52,620
build their own parsons problem so this

00:16:50,790 --> 00:16:54,570
is an open source educational resource

00:16:52,620 --> 00:16:57,150
that I would claim is not fully open

00:16:54,570 --> 00:16:59,910
education however with a little bit of

00:16:57,150 --> 00:17:02,250
reworking you can end up with the parson

00:16:59,910 --> 00:17:04,380
Iser where a student simply types in

00:17:02,250 --> 00:17:07,410
whatever they can copy paste the code

00:17:04,380 --> 00:17:09,630
from whatever exercises they're looking

00:17:07,410 --> 00:17:11,580
on and all of a sudden they build their

00:17:09,630 --> 00:17:13,320
own Parsons project so the difference

00:17:11,580 --> 00:17:15,750
now between open education and open

00:17:13,320 --> 00:17:17,940
source is how readily can the students

00:17:15,750 --> 00:17:22,200
and teachers who are actually learning

00:17:17,940 --> 00:17:24,510
adapt their content for themselves so

00:17:22,200 --> 00:17:26,730
open source is not open education we had

00:17:24,510 --> 00:17:30,180
an example there the Parsons library

00:17:26,730 --> 00:17:31,500
versus the copy/paste parson Iser so

00:17:30,180 --> 00:17:33,300
what does example something that's open

00:17:31,500 --> 00:17:35,880
source but not open education I would

00:17:33,300 --> 00:17:39,600
say free code camp yes the source code

00:17:35,880 --> 00:17:41,550
is open anyone can in principle rebuild

00:17:39,600 --> 00:17:43,260
their own free code camp and run it but

00:17:41,550 --> 00:17:45,510
practically speaking it's not only

00:17:43,260 --> 00:17:47,310
completely out of range for any student

00:17:45,510 --> 00:17:48,960
but most teachers probably don't even

00:17:47,310 --> 00:17:51,600
have the technical knowledge or the time

00:17:48,960 --> 00:17:53,580
to fit and adjust free code camp to

00:17:51,600 --> 00:17:55,470
match their own needs so it is open

00:17:53,580 --> 00:17:57,450
source great open source educational

00:17:55,470 --> 00:18:00,510
resource it is great free education but

00:17:57,450 --> 00:18:03,450
it's not open education not open source

00:18:00,510 --> 00:18:05,610
but open education is repli'd repli'd

00:18:03,450 --> 00:18:06,630
does not open source it's code but the

00:18:05,610 --> 00:18:08,520
tools that they have for teachers

00:18:06,630 --> 00:18:10,260
classroom management exercise creation

00:18:08,520 --> 00:18:13,590
running code in a zero install

00:18:10,260 --> 00:18:15,660
environment is outstanding so repla is

00:18:13,590 --> 00:18:20,130
an example of closed source open

00:18:15,660 --> 00:18:22,290
education resource the perhaps best one

00:18:20,130 --> 00:18:24,480
I believe that is both open source and

00:18:22,290 --> 00:18:26,310
open education is a tool called Python

00:18:24,480 --> 00:18:28,230
tutor that you can also use to study

00:18:26,310 --> 00:18:29,760
JavaScript that teaches the notional

00:18:28,230 --> 00:18:32,460
machine I'll talk about that in the next

00:18:29,760 --> 00:18:35,460
step so what is a quick example of

00:18:32,460 --> 00:18:38,070
something that is both open source open

00:18:35,460 --> 00:18:43,530
education and realistically accessible

00:18:38,070 --> 00:18:46,530
to a student it is this a student can

00:18:43,530 --> 00:18:47,880
inspect they want to study coercion

00:18:46,530 --> 00:18:49,920
because that's difficult

00:18:47,880 --> 00:18:56,580
so let's what happens if we take a

00:18:49,920 --> 00:18:58,410
string negative for a number for we add

00:18:56,580 --> 00:19:05,520
them I expect the result of this

00:18:58,410 --> 00:19:10,890
operation to be boolean true I got it

00:19:05,520 --> 00:19:12,840
right what if I said false I would get

00:19:10,890 --> 00:19:16,980
it wrong and what if that's not a

00:19:12,840 --> 00:19:18,330
boolean it would tell me so I'm

00:19:16,980 --> 00:19:20,130
constantly getting feedback in the

00:19:18,330 --> 00:19:22,170
console students are learning how to

00:19:20,130 --> 00:19:24,540
read the dev console look at the code

00:19:22,170 --> 00:19:27,060
they're learning how to in their heads

00:19:24,540 --> 00:19:29,400
break down long expressions to debug

00:19:27,060 --> 00:19:32,390
them and furthermore the source code

00:19:29,400 --> 00:19:35,250
itself is very accessible to a student

00:19:32,390 --> 00:19:39,540
there's a simple function that casts two

00:19:35,250 --> 00:19:41,790
types there's a simple clear func table

00:19:39,540 --> 00:19:44,100
and a slightly more complicated handler

00:19:41,790 --> 00:19:46,470
function that's long but has nothing

00:19:44,100 --> 00:19:48,750
extremely difficult in it and this over

00:19:46,470 --> 00:19:50,520
here is simply an HTML table so this is

00:19:48,750 --> 00:19:51,160
an example of a very powerful open

00:19:50,520 --> 00:19:53,710
education

00:19:51,160 --> 00:19:55,750
resource tool that is also realistically

00:19:53,710 --> 00:19:57,190
open-source to students you can imagine

00:19:55,750 --> 00:19:59,260
a student after a couple months getting

00:19:57,190 --> 00:20:00,880
the confidence to build their own tables

00:19:59,260 --> 00:20:02,920
for expressions that are troubling them

00:20:00,880 --> 00:20:05,770
or to make their own little courses and

00:20:02,920 --> 00:20:08,260
remix and share between themselves so

00:20:05,770 --> 00:20:12,280
open source is not strictly equal to

00:20:08,260 --> 00:20:14,410
open education finally computing

00:20:12,280 --> 00:20:17,050
literacy what is this how do we teach it

00:20:14,410 --> 00:20:18,640
so I'm gonna skip defining exactly what

00:20:17,050 --> 00:20:21,520
it is I'll do that in a second by

00:20:18,640 --> 00:20:23,620
showing not a sentence but a project

00:20:21,520 --> 00:20:25,420
that a computationally literate student

00:20:23,620 --> 00:20:28,510
should be able to build realistically

00:20:25,420 --> 00:20:30,400
after maybe a year of study first step

00:20:28,510 --> 00:20:32,400
though is honesty this is intellectual

00:20:30,400 --> 00:20:34,570
honesty if you want to truly teach

00:20:32,400 --> 00:20:37,390
computational literacy you need to teach

00:20:34,570 --> 00:20:39,280
students that of what is actually

00:20:37,390 --> 00:20:41,500
happening do not put it in any other

00:20:39,280 --> 00:20:44,050
words do not use analogies teach what is

00:20:41,500 --> 00:20:45,550
and expect that students can learn it so

00:20:44,050 --> 00:20:46,960
this goes to Python tutor teaching

00:20:45,550 --> 00:20:49,270
programming first from a notional

00:20:46,960 --> 00:20:51,460
machine not using analogies not using

00:20:49,270 --> 00:20:55,770
custom environments let's teach students

00:20:51,460 --> 00:20:57,730
in place using clever methods agency

00:20:55,770 --> 00:20:59,830
students should learn that they have

00:20:57,730 --> 00:21:02,320
agency over the digital tools that they

00:20:59,830 --> 00:21:03,490
use of course you're not going to have

00:21:02,320 --> 00:21:05,470
it over everything but they should learn

00:21:03,490 --> 00:21:07,060
that is possible and so that's why in

00:21:05,470 --> 00:21:10,390
the previous slide I was advocating for

00:21:07,060 --> 00:21:12,040
open source resources that are also open

00:21:10,390 --> 00:21:14,130
education students can modify them

00:21:12,040 --> 00:21:17,110
themselves adapt their own courses

00:21:14,130 --> 00:21:18,880
ownership so this is now beyond the

00:21:17,110 --> 00:21:20,890
student to the whole community the

00:21:18,880 --> 00:21:23,650
school's the teachers they should all be

00:21:20,890 --> 00:21:25,300
able to easily adapt whatever content

00:21:23,650 --> 00:21:27,190
whatever courses to their own needs so

00:21:25,300 --> 00:21:29,590
this is again where free code camp is an

00:21:27,190 --> 00:21:31,330
ideally open education it is a very good

00:21:29,590 --> 00:21:33,400
course but is very long and it's very

00:21:31,330 --> 00:21:34,720
prescribed it be difficult to adjust

00:21:33,400 --> 00:21:37,350
that to different lengths to slightly

00:21:34,720 --> 00:21:39,880
different needs different levels

00:21:37,350 --> 00:21:42,220
integration students can't just learn

00:21:39,880 --> 00:21:44,800
programming they need to learn how the

00:21:42,220 --> 00:21:47,020
user how the computer itself how the

00:21:44,800 --> 00:21:48,850
source code how the developer how

00:21:47,020 --> 00:21:50,950
there's an entire sort of space a

00:21:48,850 --> 00:21:52,690
communication space built around a

00:21:50,950 --> 00:21:55,750
running application that has real-world

00:21:52,690 --> 00:21:57,610
impacts javascript is exceptionally good

00:21:55,750 --> 00:21:59,320
at teaching this through what I'll show

00:21:57,610 --> 00:22:01,240
you in the final project the ability to

00:21:59,320 --> 00:22:03,940
have a working application in the Dom

00:22:01,240 --> 00:22:04,780
the dev inspector tools source code

00:22:03,940 --> 00:22:06,910
printout

00:22:04,780 --> 00:22:09,850
all simply live on an open-source

00:22:06,910 --> 00:22:12,820
hosting like this github do finally

00:22:09,850 --> 00:22:14,500
preparation the goal of computational

00:22:12,820 --> 00:22:17,260
literacy isn't to create professional

00:22:14,500 --> 00:22:18,760
ready students it's to create students

00:22:17,260 --> 00:22:20,800
who are prepared to go on and learn

00:22:18,760 --> 00:22:22,300
whichever path bill later need whether

00:22:20,800 --> 00:22:26,020
that is to be a developer whether it's

00:22:22,300 --> 00:22:27,790
to simply be an artist anything but to

00:22:26,020 --> 00:22:29,770
be living in the world with a basic

00:22:27,790 --> 00:22:32,530
understanding of what is computational

00:22:29,770 --> 00:22:34,030
literacy and how does it work why why

00:22:32,530 --> 00:22:38,050
does that relevant and that they do have

00:22:34,030 --> 00:22:39,490
some say here is an example of a final

00:22:38,050 --> 00:22:43,600
project that I believe a student could

00:22:39,490 --> 00:22:48,070
be able to build after one year it

00:22:43,600 --> 00:22:50,590
contains dynamic documentation automated

00:22:48,070 --> 00:22:52,870
testing and feedback through a simple

00:22:50,590 --> 00:22:55,090
run tests function that can easily be

00:22:52,870 --> 00:22:56,650
understood by them this is the only

00:22:55,090 --> 00:22:59,590
source code that they also didn't write

00:22:56,650 --> 00:23:01,180
for the whole project it just reads it

00:22:59,590 --> 00:23:03,070
just takes in a function arguments

00:23:01,180 --> 00:23:08,500
passes them through compares them and

00:23:03,070 --> 00:23:10,540
logs a student can see which one's

00:23:08,500 --> 00:23:14,170
failed which test cases failed what are

00:23:10,540 --> 00:23:17,710
all the functions available let's see I

00:23:14,170 --> 00:23:20,340
want to cheat we can now check our log

00:23:17,710 --> 00:23:23,650
and we can see that someone cheated

00:23:20,340 --> 00:23:26,590
cheating input one scheduled blah blah

00:23:23,650 --> 00:23:28,300
blah what is also super super important

00:23:26,590 --> 00:23:30,490
as far as computational literacy goes is

00:23:28,300 --> 00:23:32,230
the idea of applied computing and how do

00:23:30,490 --> 00:23:35,440
you embed a problem from the real world

00:23:32,230 --> 00:23:37,300
into the computational space and here we

00:23:35,440 --> 00:23:41,620
see that with embedding and D betting if

00:23:37,300 --> 00:23:45,630
we look at the model we can see this

00:23:41,620 --> 00:23:45,630
here the challenges

00:23:49,490 --> 00:23:53,059
we can look at the way students have

00:23:51,080 --> 00:23:56,600
organized their database they have two

00:23:53,059 --> 00:23:59,149
functions embed and Abed that map from

00:23:56,600 --> 00:24:01,250
strings to array of char codes they

00:23:59,149 --> 00:24:03,590
perform all of their sorting and all of

00:24:01,250 --> 00:24:05,630
their removing extra elements on the

00:24:03,590 --> 00:24:07,460
array of numbers and map it back to a

00:24:05,630 --> 00:24:09,470
string when the user wants to see what's

00:24:07,460 --> 00:24:11,750
stored in memory so it's super simple

00:24:09,470 --> 00:24:13,850
it's things that can easily be done

00:24:11,750 --> 00:24:15,080
right within the first couple months but

00:24:13,850 --> 00:24:17,390
it's the fact that you're having people

00:24:15,080 --> 00:24:18,200
do this instead of something else that

00:24:17,390 --> 00:24:20,120
sets them up

00:24:18,200 --> 00:24:21,470
none of these concepts are impossible to

00:24:20,120 --> 00:24:27,130
understand but they need to be

00:24:21,470 --> 00:24:37,330
simplified and explicitly top questions

00:24:27,130 --> 00:24:37,330
or is it time one question

00:24:45,970 --> 00:24:50,830
thank you I are using a debugger in one

00:24:49,120 --> 00:24:52,690
of your teaching examples because every

00:24:50,830 --> 00:24:53,980
everything it's always the built-in

00:24:52,690 --> 00:24:56,559
debugger and so that's one of the whole

00:24:53,980 --> 00:24:58,330
things is you have zero install openly

00:24:56,559 --> 00:25:01,330
available tools so all of the exercises

00:24:58,330 --> 00:25:02,860
are built in just the Chrome or Firefox

00:25:01,330 --> 00:25:06,899
okay sorry then I meant specifically

00:25:02,860 --> 00:25:06,899

YouTube URL: https://www.youtube.com/watch?v=GvFREMsI5AI


