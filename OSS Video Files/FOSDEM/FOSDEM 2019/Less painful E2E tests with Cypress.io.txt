Title: Less painful E2E tests with Cypress.io
Publication date: 2019-02-08
Playlist: FOSDEM 2019
Description: 
	by Pavel Kruhlei

At: FOSDEM 2019
https://video.fosdem.org/2019/H.1308/e2e_tests_cypress.webm


The normal state of things with end-2-end testing is a pain: tests are flaky, slow, verbose and written by some QA guy.
Let's see if I can convince you that it doesn't need to be like that, with an example of Cypress.io framework: a dev-centric open-source tool designed to make our life a little simple. 

Room: H.1308 (Rolin)
Scheduled start: 2019-02-03 13:00:00+01
Captions: 
	00:00:04,690 --> 00:00:13,180
I'm ten years in quality tip five years

00:00:09,460 --> 00:00:15,460
plus in test automation and lately as

00:00:13,180 --> 00:00:18,010
I'm working in small start-up I'm doing

00:00:15,460 --> 00:00:20,290
everything so I'm like developer bit of

00:00:18,010 --> 00:00:22,930
DevOps working is a deployment and

00:00:20,290 --> 00:00:25,630
observability concepts so I'm their

00:00:22,930 --> 00:00:28,450
staff ops whatever guy and I really like

00:00:25,630 --> 00:00:30,790
this kind of multi Health personalities

00:00:28,450 --> 00:00:34,989
that I have and I'm big fan of server

00:00:30,790 --> 00:00:37,450
life in later stages and in free time I

00:00:34,989 --> 00:00:39,700
enjoy climbing which is totally fact if

00:00:37,450 --> 00:00:42,540
you live in Austin in totally flat

00:00:39,700 --> 00:00:45,070
country so I'm going to are Dennis and

00:00:42,540 --> 00:00:47,820
Alps all the time and I like Belgian

00:00:45,070 --> 00:00:52,180
beer too much sometimes

00:00:47,820 --> 00:00:54,670
delirium still have yeah some influence

00:00:52,180 --> 00:00:56,440
on my speech would say okay move on so

00:00:54,670 --> 00:00:59,350
what's wrong about selenium the question

00:00:56,440 --> 00:01:01,870
that I already heard is nothing wrong

00:00:59,350 --> 00:01:02,680
with selenium selenium is like 15 years

00:01:01,870 --> 00:01:07,390
of history

00:01:02,680 --> 00:01:10,719
lots of contributors lots of yeah open

00:01:07,390 --> 00:01:14,170
source different projects like a night

00:01:10,719 --> 00:01:17,020
wash and yeah webdriver IO and stuff so

00:01:14,170 --> 00:01:18,939
I'm not advocating against rhenium I

00:01:17,020 --> 00:01:22,409
just want to show you guys what else is

00:01:18,939 --> 00:01:26,139
available for the choice when I joined

00:01:22,409 --> 00:01:28,359
my recent company I was selecting where

00:01:26,139 --> 00:01:30,159
to go like which way to go and we have a

00:01:28,359 --> 00:01:33,340
lot of GS code base and we have

00:01:30,159 --> 00:01:35,350
developers so so okay let's see what

00:01:33,340 --> 00:01:38,409
kind of available on GS market for the

00:01:35,350 --> 00:01:41,200
test automation except selenium so this

00:01:38,409 --> 00:01:44,079
is like three choices that I have begs

00:01:41,200 --> 00:01:49,659
am the puppeteer do you guys know about

00:01:44,079 --> 00:01:51,880
each year use it okay I think that is

00:01:49,659 --> 00:01:53,679
great tool but it's not test automation

00:01:51,880 --> 00:01:55,270
- its browser automation tool so it's

00:01:53,679 --> 00:01:57,909
good for like making kind of spice and

00:01:55,270 --> 00:02:02,289
crawlers and stuff like that it's done

00:01:57,909 --> 00:02:05,979
by Google guys to test chrome itself so

00:02:02,289 --> 00:02:09,090
yeah very powerful but not very easy to

00:02:05,979 --> 00:02:12,730
use we say the second one is just a fail

00:02:09,090 --> 00:02:16,500
someone used us to fail okay not so much

00:02:12,730 --> 00:02:18,880
it used to be very kind of a big and

00:02:16,500 --> 00:02:23,740
commercial framework they open sources

00:02:18,880 --> 00:02:25,690
also recently it's done by developers

00:02:23,740 --> 00:02:27,760
from quality optimation engineers for

00:02:25,690 --> 00:02:30,880
quality automation engineers so it

00:02:27,760 --> 00:02:33,250
contains a lot of key oriented topics

00:02:30,880 --> 00:02:36,280
and career related kind of things that

00:02:33,250 --> 00:02:40,570
might narrow choices that you can have

00:02:36,280 --> 00:02:43,120
and the last one is Cyprus next then it

00:02:40,570 --> 00:02:45,940
was like 0.2 version or Samsa sorts I

00:02:43,120 --> 00:02:48,820
made a really a bet to go with it and I

00:02:45,940 --> 00:02:52,450
really don't regret for now

00:02:48,820 --> 00:02:55,270
so what Cyprus is is a test automation

00:02:52,450 --> 00:02:57,670
framework JavaScript you can also write

00:02:55,270 --> 00:03:00,700
ice cream of course it's an electron

00:02:57,670 --> 00:03:04,440
runner and debugger application bundled

00:03:00,700 --> 00:03:07,390
and also it's a SAS platform for

00:03:04,440 --> 00:03:11,470
balancing and test recording so it's

00:03:07,390 --> 00:03:14,020
kind of thinking in itself for later you

00:03:11,470 --> 00:03:16,090
you have to pay a bit if you want to use

00:03:14,020 --> 00:03:17,860
it on a scale but for a free open-source

00:03:16,090 --> 00:03:20,680
project is free and you don't need to

00:03:17,860 --> 00:03:22,209
care worry about your selenium grid

00:03:20,680 --> 00:03:26,320
cluster and stuff like that so it's all

00:03:22,209 --> 00:03:30,040
balanced on the south side white Cyprus

00:03:26,320 --> 00:03:32,260
for me I was like one Cray guy in the

00:03:30,040 --> 00:03:34,330
company and in my previous company I

00:03:32,260 --> 00:03:37,780
also want what was one keygen 80

00:03:34,330 --> 00:03:40,450
developers and I wanted to scale I

00:03:37,780 --> 00:03:42,310
wanted not only be a bottleneck so what

00:03:40,450 --> 00:03:44,170
I was choosing the framework or the tool

00:03:42,310 --> 00:03:46,570
or whatever choices I do them my

00:03:44,170 --> 00:03:48,280
professional career I think about who

00:03:46,570 --> 00:03:49,660
gonna use it and most of the cases is

00:03:48,280 --> 00:03:53,350
going to be developers which should be

00:03:49,660 --> 00:03:56,560
developer friendly this decision number

00:03:53,350 --> 00:03:58,630
one that I made and second one in Cyprus

00:03:56,560 --> 00:04:01,299
you can go up and down and test by me so

00:03:58,630 --> 00:04:03,549
you can write a unit test API

00:04:01,299 --> 00:04:06,730
integration test and end-to-end test in

00:04:03,549 --> 00:04:08,350
one two or one framework so you don't

00:04:06,730 --> 00:04:12,510
need to maintain multiple code bases or

00:04:08,350 --> 00:04:12,510
multiple paradigms when you switch

00:04:12,970 --> 00:04:18,250
so what's endeavoring orientals kind of

00:04:16,060 --> 00:04:20,109
what why I think is debri ended it

00:04:18,250 --> 00:04:22,030
contains a lot of tools already bundles

00:04:20,109 --> 00:04:25,570
already prepackaged

00:04:22,030 --> 00:04:27,970
so Cyprus tests are basically mocha

00:04:25,570 --> 00:04:29,129
tests so very similar syntax is for

00:04:27,970 --> 00:04:32,410
everyone

00:04:29,129 --> 00:04:35,229
this is Herschel's with lots of other

00:04:32,410 --> 00:04:37,840
like libraries that very common in

00:04:35,229 --> 00:04:39,879
JavaScript landscape

00:04:37,840 --> 00:04:44,139
it contains already reporters out of the

00:04:39,879 --> 00:04:46,030
box it's multiple tools supported like

00:04:44,139 --> 00:04:48,400
g-unit reporter mocha reporter

00:04:46,030 --> 00:04:50,860
CLI reporter Jason whatever so you can

00:04:48,400 --> 00:04:53,110
plug it into your reporting tools or

00:04:50,860 --> 00:04:55,629
portals to get information about your

00:04:53,110 --> 00:04:58,330
test runs

00:04:55,629 --> 00:05:00,340
it's extendable black plug ins so I know

00:04:58,330 --> 00:05:03,970
that guys were complaining that I we

00:05:00,340 --> 00:05:05,949
don't have gherkin bindings or cucumber

00:05:03,970 --> 00:05:07,449
bindings for the Cypress or someone

00:05:05,949 --> 00:05:11,530
wrote the plugins that now you can use

00:05:07,449 --> 00:05:14,440
the the gherkin language for tests you

00:05:11,530 --> 00:05:17,620
can write you can add your stuff there

00:05:14,440 --> 00:05:21,280
it's very easy to set up for your

00:05:17,620 --> 00:05:25,509
project it's CI ready so by that I mean

00:05:21,280 --> 00:05:29,560
that we have around 20 plus examples for

00:05:25,509 --> 00:05:33,909
almost all of the CIA tools to integrate

00:05:29,560 --> 00:05:38,319
Cypress with it's either like I know we

00:05:33,909 --> 00:05:42,430
develop drum quality or circle CIO

00:05:38,319 --> 00:05:46,539
Travis it has extended debugging

00:05:42,430 --> 00:05:47,770
capabilities you can inspect you test

00:05:46,539 --> 00:05:49,289
really well because your test is

00:05:47,770 --> 00:05:52,060
basically running inside of your browser

00:05:49,289 --> 00:05:54,509
so you have access to everything inside

00:05:52,060 --> 00:05:58,840
of the dome inside of the browser

00:05:54,509 --> 00:06:01,150
yeah spice stops and clocks if you want

00:05:58,840 --> 00:06:05,020
to mock your function for unit tests you

00:06:01,150 --> 00:06:06,729
spice or start if you want to control

00:06:05,020 --> 00:06:09,009
the time and you can control the time in

00:06:06,729 --> 00:06:11,680
Cypress for example you have like

00:06:09,009 --> 00:06:14,620
knowing four seconds spinner around user

00:06:11,680 --> 00:06:16,180
waiting for something to happen in tests

00:06:14,620 --> 00:06:18,039
if you have like more than hundred tests

00:06:16,180 --> 00:06:20,229
it's already four hundred seconds that

00:06:18,039 --> 00:06:21,940
your test run is just delayed so with

00:06:20,229 --> 00:06:24,909
the Cypress you can control time say

00:06:21,940 --> 00:06:26,970
okay now plus four seconds and this will

00:06:24,909 --> 00:06:29,100
be carried on in the browser and in

00:06:26,970 --> 00:06:31,710
in the death so can control time can

00:06:29,100 --> 00:06:34,050
fast-forward for this kind of animation

00:06:31,710 --> 00:06:36,740
purposes and it contains automatic

00:06:34,050 --> 00:06:39,270
weights so in selenium you have to

00:06:36,740 --> 00:06:42,030
assert if element is present if not

00:06:39,270 --> 00:06:43,970
present wait wait wait wait so it's kind

00:06:42,030 --> 00:06:47,340
of a lot of synchronous code in Cyprus

00:06:43,970 --> 00:06:52,020
weights are implicit so if you do any

00:06:47,340 --> 00:06:54,660
kind of action on element it's bill wait

00:06:52,020 --> 00:06:57,180
for default timeout with this element to

00:06:54,660 --> 00:06:58,830
be present on page and that's why there

00:06:57,180 --> 00:06:59,760
is no like style element exceptions as

00:06:58,830 --> 00:07:02,850
you have in selenium

00:06:59,760 --> 00:07:07,830
so let's flakiness for in this way so

00:07:02,850 --> 00:07:10,260
talking about different layers unit

00:07:07,830 --> 00:07:13,440
integration and entrance layers go a

00:07:10,260 --> 00:07:15,990
little bit in depth there so this how

00:07:13,440 --> 00:07:19,410
the tests look like as I said Moka

00:07:15,990 --> 00:07:22,980
syntax you describe your death case

00:07:19,410 --> 00:07:26,100
before each of test execution you visit

00:07:22,980 --> 00:07:28,590
the page you visit in the HTML then you

00:07:26,100 --> 00:07:31,950
start the server the the mock server and

00:07:28,590 --> 00:07:33,570
you say that for any request that

00:07:31,950 --> 00:07:36,420
application will try to make for this

00:07:33,570 --> 00:07:39,180
route a post request I will return to

00:07:36,420 --> 00:07:41,970
100% and you make Lea's as applauded

00:07:39,180 --> 00:07:43,800
function then you prepare your test file

00:07:41,970 --> 00:07:48,300
because you want to say test app file

00:07:43,800 --> 00:07:50,880
upload and on file uploads element you

00:07:48,300 --> 00:07:53,760
trigger change with this file and then

00:07:50,880 --> 00:07:56,490
you just validate that the route was

00:07:53,760 --> 00:08:03,330
called so in this way you kind of yeah

00:07:56,490 --> 00:08:07,260
making stops back ends calls for API

00:08:03,330 --> 00:08:10,050
test or end-to-end test you can either

00:08:07,260 --> 00:08:12,930
go through UI completely so in this case

00:08:10,050 --> 00:08:14,850
the example is user who is not

00:08:12,930 --> 00:08:16,669
authorized try to visit the dashboard

00:08:14,850 --> 00:08:19,260
page and we want to validate that

00:08:16,669 --> 00:08:23,060
unauthorized users should be redirected

00:08:19,260 --> 00:08:25,530
to other page with in this case text

00:08:23,060 --> 00:08:28,440
containing you are not logged in and the

00:08:25,530 --> 00:08:30,560
URL should can have unauthorized so this

00:08:28,440 --> 00:08:33,630
is example number one when you actually

00:08:30,560 --> 00:08:35,279
hitting the web page visiting load in

00:08:33,630 --> 00:08:37,680
everything the render

00:08:35,279 --> 00:08:40,439
everything and check-ins that you will

00:08:37,680 --> 00:08:43,439
be redirected so it's kind of slow and

00:08:40,439 --> 00:08:48,420
be fragile because it's a certain on the

00:08:43,439 --> 00:08:50,430
text on the page so you can do it's in

00:08:48,420 --> 00:08:53,069
the API level so you can use execute the

00:08:50,430 --> 00:08:55,050
request so she I request is API call

00:08:53,069 --> 00:08:57,420
without loading anything you just

00:08:55,050 --> 00:09:02,569
executing a call to the dashboard page

00:08:57,420 --> 00:09:05,189
then you expect that response will be

00:09:02,569 --> 00:09:06,990
three or two so and authorize and you

00:09:05,189 --> 00:09:08,790
also expect that URL will contain out a

00:09:06,990 --> 00:09:11,819
notarized so we have two options either

00:09:08,790 --> 00:09:16,559
go through completely UI or we go

00:09:11,819 --> 00:09:19,370
through API and I do a lot of API parts

00:09:16,559 --> 00:09:22,620
in my test for seeding like user login

00:09:19,370 --> 00:09:26,819
authorization preparing some test data

00:09:22,620 --> 00:09:28,649
and stuff like that and well it's

00:09:26,819 --> 00:09:33,600
end-to-end test here I will show some

00:09:28,649 --> 00:09:36,420
demo so we organized everything that we

00:09:33,600 --> 00:09:38,839
have on our web pages in page object so

00:09:36,420 --> 00:09:41,550
we've got selectors on the page you have

00:09:38,839 --> 00:09:45,240
methods that you can do on the page like

00:09:41,550 --> 00:09:47,850
log in register do something so it's

00:09:45,240 --> 00:09:51,899
bundles and page objects then we split

00:09:47,850 --> 00:09:55,860
our user flow in parts so we have user

00:09:51,899 --> 00:09:58,649
registering user login user making offer

00:09:55,860 --> 00:10:01,290
user applying for this offer and using

00:09:58,649 --> 00:10:06,209
signing him so this is sub flows that

00:10:01,290 --> 00:10:09,629
contains pages inside and the big flow

00:10:06,209 --> 00:10:12,629
is grouping everything I came as this

00:10:09,629 --> 00:10:15,870
idea because I didn't want to make code

00:10:12,629 --> 00:10:19,019
duplication and and I wanted to have

00:10:15,870 --> 00:10:21,240
test very very like short simple instead

00:10:19,019 --> 00:10:23,939
of repeating everything like every time

00:10:21,240 --> 00:10:27,389
I log in or every time I create a user I

00:10:23,939 --> 00:10:32,100
want to have it in test like explicit or

00:10:27,389 --> 00:10:34,559
implicit so I kind of over abstract

00:10:32,100 --> 00:10:38,459
sheet out of my test framework and I

00:10:34,559 --> 00:10:40,379
didn't like it now because it's grew out

00:10:38,459 --> 00:10:42,990
of proportion we were five developers

00:10:40,379 --> 00:10:46,770
when I joined and now is 30 and I will

00:10:42,990 --> 00:10:57,630
show you on example how it looked like

00:10:46,770 --> 00:11:00,750
can you see it on the back so okay maybe

00:10:57,630 --> 00:11:04,110
I should move to them Oh anyway this is

00:11:00,750 --> 00:11:05,760
a test so first I prepare lots of test

00:11:04,110 --> 00:11:08,370
data that will control the test

00:11:05,760 --> 00:11:12,600
execution so I say okay this is user

00:11:08,370 --> 00:11:15,870
parameters different different user

00:11:12,600 --> 00:11:17,850
parameters arguments then before

00:11:15,870 --> 00:11:22,800
execution of the test I load all of the

00:11:17,850 --> 00:11:25,200
data and then I run everything so when

00:11:22,800 --> 00:11:27,180
this test fails and you have to debug it

00:11:25,200 --> 00:11:28,950
as a developer you're gonna come to me

00:11:27,180 --> 00:11:31,050
and say by the way I hate you and you

00:11:28,950 --> 00:11:33,660
will be right because it's completely

00:11:31,050 --> 00:11:36,090
not clear what happens right so the test

00:11:33,660 --> 00:11:38,220
fails and then we open it first okay you

00:11:36,090 --> 00:11:39,930
have this flow and then you go inside

00:11:38,220 --> 00:11:43,620
the flow and there is another nested

00:11:39,930 --> 00:11:46,410
things and you go there as okay again

00:11:43,620 --> 00:11:49,740
another something nested and finally you

00:11:46,410 --> 00:11:51,540
arrive at the point when the reason

00:11:49,740 --> 00:11:54,210
assertion so assertions were also

00:11:51,540 --> 00:11:56,940
outside of the test anti-pattern I think

00:11:54,210 --> 00:11:58,620
this gentleman asked me what you should

00:11:56,940 --> 00:12:02,180
not do you should not make assertions

00:11:58,620 --> 00:12:05,820
things outside of your test I think so

00:12:02,180 --> 00:12:09,240
this is not clear not good at least for

00:12:05,820 --> 00:12:12,360
me and this is how we doing it right now

00:12:09,240 --> 00:12:15,390
so tests are quite long quite explicit

00:12:12,360 --> 00:12:19,110
so you can see on every page what you're

00:12:15,390 --> 00:12:22,320
doing so it's easier to debug if it's

00:12:19,110 --> 00:12:23,790
fails it's very long it's like hundred

00:12:22,320 --> 00:12:25,740
lines and stuff so a lot of code

00:12:23,790 --> 00:12:28,980
duplication but sometimes it's okay to

00:12:25,740 --> 00:12:33,480
make it if you want to increase

00:12:28,980 --> 00:12:36,210
readability of the test so yeah that's

00:12:33,480 --> 00:12:40,700
that's kind of how we do it in a new

00:12:36,210 --> 00:12:43,800
town and few of my suggestions you guys

00:12:40,700 --> 00:12:45,840
Cypress of course have some trade-offs

00:12:43,800 --> 00:12:48,300
it's not a silver bullet whatsoever

00:12:45,840 --> 00:12:49,650
so first trade-off and number one and

00:12:48,300 --> 00:12:53,550
the biggest one for most of the people

00:12:49,650 --> 00:12:55,410
it's only Chrome browser so you cannot

00:12:53,550 --> 00:12:59,730
test multi browsers you cannot test

00:12:55,410 --> 00:13:03,800
Firefox or Internet Explorer or Safari

00:12:59,730 --> 00:13:06,210
lately last few years browsers

00:13:03,800 --> 00:13:10,850
closer and closer in API to each other

00:13:06,210 --> 00:13:14,130
so I kind of trust that in 95% of cases

00:13:10,850 --> 00:13:17,250
it's going to be the same so and the

00:13:14,130 --> 00:13:19,500
other 5% of cases yes you'll be yeah

00:13:17,250 --> 00:13:21,540
difference but then you can also get it

00:13:19,500 --> 00:13:26,280
from your monitoring login or or your

00:13:21,540 --> 00:13:27,990
users so it's only Chrome it's test

00:13:26,280 --> 00:13:32,340
automation tool is not Swiss Army knife

00:13:27,990 --> 00:13:34,800
so don't use Cypress for a lot of people

00:13:32,340 --> 00:13:37,710
use puppeteer for like scrolling

00:13:34,800 --> 00:13:40,770
scanning it's not a API to as well so

00:13:37,710 --> 00:13:44,820
you cannot replace all of the API

00:13:40,770 --> 00:13:47,610
testing these ciphers and of course it's

00:13:44,820 --> 00:13:50,370
not a performance testing tool

00:13:47,610 --> 00:13:52,380
it's runs in single browser on the

00:13:50,370 --> 00:13:55,830
single tab so we have to if you have

00:13:52,380 --> 00:13:57,180
messaging applications that like an you

00:13:55,830 --> 00:13:59,100
know Facebook or whatever when you have

00:13:57,180 --> 00:14:01,980
user a user be talking with each other

00:13:59,100 --> 00:14:05,210
and inside of one test this will not be

00:14:01,980 --> 00:14:09,450
possible so you cannot make multi user

00:14:05,210 --> 00:14:11,820
tests in in Cypress and it works on the

00:14:09,450 --> 00:14:14,930
same super domain pages inside of scope

00:14:11,820 --> 00:14:17,550
of one test so even one test you can use

00:14:14,930 --> 00:14:19,530
start at google.com but you can use

00:14:17,550 --> 00:14:21,990
start at google.com and start out

00:14:19,530 --> 00:14:28,760
facebook.com so you cannot visit super

00:14:21,990 --> 00:14:31,380
domains in one in one test so yeah

00:14:28,760 --> 00:14:32,760
strategies common strategies with

00:14:31,380 --> 00:14:35,070
Cypress you have to define you wanna

00:14:32,760 --> 00:14:36,990
stop backend or not stop backend you

00:14:35,070 --> 00:14:39,810
want to test completely from end to end

00:14:36,990 --> 00:14:42,540
or you can use it you can use the API

00:14:39,810 --> 00:14:44,460
test what I do I have few small tests

00:14:42,540 --> 00:14:47,910
which are completely empty and not

00:14:44,460 --> 00:14:52,440
mocked not stop and rest you know I

00:14:47,910 --> 00:14:56,580
stopped out or mocked out test are

00:14:52,440 --> 00:14:59,180
deterministic means that you don't you

00:14:56,580 --> 00:15:01,830
never should have the casing or

00:14:59,180 --> 00:15:03,510
conditions in your test it means that

00:15:01,830 --> 00:15:06,810
you don't know what you're doing if you

00:15:03,510 --> 00:15:08,520
expect in in some cases element a or

00:15:06,810 --> 00:15:10,980
element be present that means that you

00:15:08,520 --> 00:15:11,590
not do not control your application

00:15:10,980 --> 00:15:13,540
state and

00:15:11,590 --> 00:15:15,790
now cyprus allow you to control

00:15:13,540 --> 00:15:19,890
complication state completely deaths are

00:15:15,790 --> 00:15:22,960
should be independent so you should not

00:15:19,890 --> 00:15:24,610
create a test that first login and then

00:15:22,960 --> 00:15:27,940
another test is that do something on the

00:15:24,610 --> 00:15:29,620
page so because if first fails test

00:15:27,940 --> 00:15:32,260
fails the second will fail because user

00:15:29,620 --> 00:15:34,660
is not logged in so test supposed to be

00:15:32,260 --> 00:15:37,420
completely independent from each other

00:15:34,660 --> 00:15:40,089
Cyprus doesn't have expose locators

00:15:37,420 --> 00:15:41,200
capability so for someone is bad for me

00:15:40,089 --> 00:15:45,010
it's ok

00:15:41,200 --> 00:15:51,730
I never liked Express and I think no one

00:15:45,010 --> 00:15:53,650
likes you shouldn't test third parties

00:15:51,730 --> 00:15:55,779
as you don't control search parties so

00:15:53,650 --> 00:15:56,620
again example of login page if you log

00:15:55,779 --> 00:15:58,870
in this Facebook

00:15:56,620 --> 00:16:04,330
don't go and test how the Facebook works

00:15:58,870 --> 00:16:06,040
just mock it out or stop it up and it's

00:16:04,330 --> 00:16:09,250
fine to have multiple assertions in one

00:16:06,040 --> 00:16:10,990
test so it's fine to visit the page and

00:16:09,250 --> 00:16:13,839
check everything on the page you don't

00:16:10,990 --> 00:16:16,540
need to as in unit test have green or

00:16:13,839 --> 00:16:20,110
desperate search it's all right it's

00:16:16,540 --> 00:16:23,050
kind of also saving time so that's test

00:16:20,110 --> 00:16:26,470
strategies and as I say it in past year

00:16:23,050 --> 00:16:27,970
was testing dev room now it's testing

00:16:26,470 --> 00:16:30,070
the room it's not present so I have to

00:16:27,970 --> 00:16:32,290
say it from face of all of the testers

00:16:30,070 --> 00:16:34,540
guys whatever you do whatever you choose

00:16:32,290 --> 00:16:39,130
whatever framework you choose just go

00:16:34,540 --> 00:16:43,360
and write test testing is great it gives

00:16:39,130 --> 00:16:45,250
you confidence in your code is give you

00:16:43,360 --> 00:16:51,300
confidence when you're refactor stuff so

00:16:45,250 --> 00:16:51,300
just write us that's it

00:16:56,110 --> 00:17:16,130
okay in question time oh really

00:17:06,699 --> 00:17:18,199
we have only two microphones yeah so for

00:17:16,130 --> 00:17:20,240
my company I've been doing some Cypress

00:17:18,199 --> 00:17:22,940
tests were quite new at doing Cypress

00:17:20,240 --> 00:17:26,180
tests so basically we started from

00:17:22,940 --> 00:17:29,300
nothing but what I noticed was what's

00:17:26,180 --> 00:17:32,450
was a kind of a problem is that when you

00:17:29,300 --> 00:17:34,340
decide not to stop and you want to do

00:17:32,450 --> 00:17:36,320
enter and testing you run into problems

00:17:34,340 --> 00:17:38,300
when for example you need to check

00:17:36,320 --> 00:17:41,270
whatever file has been downloaded or you

00:17:38,300 --> 00:17:43,520
want to upload a file that really breaks

00:17:41,270 --> 00:17:45,470
everything because if you download

00:17:43,520 --> 00:17:48,830
something for example you go out of the

00:17:45,470 --> 00:17:50,420
Dom so Cypress gets super confused I was

00:17:48,830 --> 00:17:53,390
wondering maybe you have some solutions

00:17:50,420 --> 00:17:55,190
for that or whatever chickens that file

00:17:53,390 --> 00:17:58,550
was actually downloaded on the backhand

00:17:55,190 --> 00:18:00,200
side yeah for example if you have

00:17:58,550 --> 00:18:02,300
something in the back end that changes

00:18:00,200 --> 00:18:04,100
something in the UI but as well down on

00:18:02,300 --> 00:18:04,640
something that are like breaks to code

00:18:04,100 --> 00:18:06,950
completely

00:18:04,640 --> 00:18:07,970
oh okay so I was wondering maybe you

00:18:06,950 --> 00:18:10,640
have a solution for that

00:18:07,970 --> 00:18:13,400
yeah for this kind of cases I try to use

00:18:10,640 --> 00:18:18,080
a cypress exact so you can execute some

00:18:13,400 --> 00:18:20,360
kind of yeah MPM not functions outside

00:18:18,080 --> 00:18:22,070
of cypress so outside of the browser so

00:18:20,360 --> 00:18:24,020
then you can do of all of this like

00:18:22,070 --> 00:18:27,350
back-end checks and things like that so

00:18:24,020 --> 00:18:29,800
it's might help but yeah don't trust

00:18:27,350 --> 00:18:29,800
backends

00:18:32,290 --> 00:18:40,000
don't just Daniel yeah I'm ki I

00:18:34,940 --> 00:18:40,000
shouldn't trust so more questions yeah

00:18:42,070 --> 00:18:48,530
hey when do you usually run your

00:18:45,950 --> 00:18:51,410
end-to-end test is it like on stage

00:18:48,530 --> 00:18:55,520
server or production well development or

00:18:51,410 --> 00:18:57,170
all the time all the time yeah so we run

00:18:55,520 --> 00:18:58,730
it on deploy to run atomic me through

00:18:57,170 --> 00:19:00,650
rather than pushing quests on merge

00:18:58,730 --> 00:19:02,360
request okay so all the time and you

00:19:00,650 --> 00:19:04,220
received all all the time you receive

00:19:02,360 --> 00:19:07,070
the same result and it should be the

00:19:04,220 --> 00:19:08,360
same result right like one stage server

00:19:07,070 --> 00:19:11,080
unless it's broken

00:19:08,360 --> 00:19:11,080
okay

00:19:24,660 --> 00:19:31,750
how long do your tests run how long

00:19:27,730 --> 00:19:35,260
yes if you put it sequentially I think

00:19:31,750 --> 00:19:45,660
it's around 10 hours if you run it in

00:19:35,260 --> 00:19:48,040
parallel it's eight minutes yeah yeah

00:19:45,660 --> 00:19:50,020
yeah we had the problem really with

00:19:48,040 --> 00:19:52,510
running tests and before the Cypress

00:19:50,020 --> 00:19:55,420
implemented this parallel on the

00:19:52,510 --> 00:19:57,550
dashboard we have to make all sorts of

00:19:55,420 --> 00:20:00,790
like our parallelization and splitting

00:19:57,550 --> 00:20:03,250
so build our like dispatcher so you put

00:20:00,790 --> 00:20:05,560
set of tests and it's great like dr.

00:20:03,250 --> 00:20:07,380
Swan instance examine each instance you

00:20:05,560 --> 00:20:09,790
try to run the tests and stuff but yeah

00:20:07,380 --> 00:20:15,570
it's easier if there is a cypress

00:20:09,790 --> 00:20:15,570
dashboard yeah yeah sure

00:20:25,730 --> 00:20:30,889
yeah it's hard to put everybody on the

00:20:28,789 --> 00:20:35,419
photo I try it yeah

00:20:30,889 --> 00:20:39,340
one two three cheers works yeah

00:20:35,419 --> 00:20:51,470
make three okay no more questions

00:20:39,340 --> 00:20:53,000
um one more oh yeah because if questions

00:20:51,470 --> 00:20:56,059
are not in microphone the people who are

00:20:53,000 --> 00:21:00,260
watching is not here yeah do you have a

00:20:56,059 --> 00:21:04,850
generator for those tests no no no it's

00:21:00,260 --> 00:21:09,799
a really man written you know okay is it

00:21:04,850 --> 00:21:12,649
planned yeah we want to know what we we

00:21:09,799 --> 00:21:14,149
test and we want to make sure that it's

00:21:12,649 --> 00:21:19,760
not automatically checking all of the

00:21:14,149 --> 00:21:19,940
things on the page or something all

00:21:19,760 --> 00:21:23,169
right

00:21:19,940 --> 00:21:23,169
normal questions

00:21:34,679 --> 00:21:43,080
yes alone so in your integration test

00:21:39,100 --> 00:21:47,230
example you showed some promise

00:21:43,080 --> 00:21:49,150
execution and basically there was some

00:21:47,230 --> 00:21:51,370
magic happening I think that it waited

00:21:49,150 --> 00:21:53,830
until the end do you know a bit more

00:21:51,370 --> 00:21:55,450
about those because in my other

00:21:53,830 --> 00:21:57,370
frameworks I still have to be very

00:21:55,450 --> 00:22:00,490
explicit about when I'm downloading

00:21:57,370 --> 00:22:03,790
stuff and so on yeah so on in Cyprus

00:22:00,490 --> 00:22:05,710
it's the code looks like synchronous but

00:22:03,790 --> 00:22:07,419
it's uncie promise you know so they

00:22:05,710 --> 00:22:11,320
implemented their own version of

00:22:07,419 --> 00:22:13,780
promises which magic yeah sometimes it's

00:22:11,320 --> 00:22:17,770
debugging hell magic but in most of the

00:22:13,780 --> 00:22:19,660
cases like 99% is fine so yeah you don't

00:22:17,770 --> 00:22:26,919
have a sink awaits inside of you test

00:22:19,660 --> 00:22:29,380
much okay yeah thanks my question is

00:22:26,919 --> 00:22:33,970
what kind of application can you test

00:22:29,380 --> 00:22:35,919
with the Cypress like just so I know

00:22:33,970 --> 00:22:38,820
that people test web pages I know that

00:22:35,919 --> 00:22:41,559
people test Chrome proud plugins

00:22:38,820 --> 00:22:42,730
extensions that use electron or nor

00:22:41,559 --> 00:22:44,590
webpage

00:22:42,730 --> 00:22:50,799
yeah ever since the trance inside of the

00:22:44,590 --> 00:22:52,720
chrome the the Runner is electron

00:22:50,799 --> 00:22:54,549
application and I forgot to show it good

00:22:52,720 --> 00:22:57,100
good point so this is a Cypress Runner

00:22:54,549 --> 00:22:58,510
so it shows you all of the test sets and

00:22:57,100 --> 00:23:02,200
shows you

00:22:58,510 --> 00:23:04,929
execution of the self test so for

00:23:02,200 --> 00:23:09,040
example they're gonna run one test now I

00:23:04,929 --> 00:23:11,290
hope I'm no I'm not on Wi-Fi no I'm so

00:23:09,040 --> 00:23:14,799
here I'm doing the the API call to seed

00:23:11,290 --> 00:23:18,370
up the the user and after that if I

00:23:14,799 --> 00:23:20,770
fight will be beat faster I will show

00:23:18,370 --> 00:23:22,630
you the test runs but this is just a

00:23:20,770 --> 00:23:27,160
rendering we just render in what happens

00:23:22,630 --> 00:23:31,090
inside of the driver server side with

00:23:27,160 --> 00:23:32,590
driver server what I like us in this

00:23:31,090 --> 00:23:34,210
kind of application when you're

00:23:32,590 --> 00:23:36,970
debugging test on you right and us you

00:23:34,210 --> 00:23:42,040
can go back in history and you can

00:23:36,970 --> 00:23:42,290
expect elements and dome of the past you

00:23:42,040 --> 00:23:44,870
know

00:23:42,290 --> 00:23:47,840
so you can see what happens you can see

00:23:44,870 --> 00:23:50,870
what means you can see some logs during

00:23:47,840 --> 00:23:53,780
the test run so this kind of nice thing

00:23:50,870 --> 00:23:56,300
for me can also debug tests here so

00:23:53,780 --> 00:23:58,880
basically inside of a test you can put

00:23:56,300 --> 00:24:00,890
in between like debug and then if you'll

00:23:58,880 --> 00:24:03,020
stop there and you have full access to

00:24:00,890 --> 00:24:05,180
the the browser State at this moment

00:24:03,020 --> 00:24:06,830
that's where everything is run within

00:24:05,180 --> 00:24:08,480
the browser everything runs this is in

00:24:06,830 --> 00:24:11,930
browser so when you run in test on CI

00:24:08,480 --> 00:24:14,870
its what it does it's boot up the the

00:24:11,930 --> 00:24:16,670
docker image wall you run inside of the

00:24:14,870 --> 00:24:21,140
docker image let's say so let's run it

00:24:16,670 --> 00:24:23,900
then is you it's run the chromium or

00:24:21,140 --> 00:24:24,290
electron actually yeah so it's kind of

00:24:23,900 --> 00:24:26,450
heavy

00:24:24,290 --> 00:24:28,760
you know in this sense so the the

00:24:26,450 --> 00:24:32,990
cypress minimalistic image is around

00:24:28,760 --> 00:24:34,790
four hundred megabytes and if you record

00:24:32,990 --> 00:24:36,800
video of the test so you have options of

00:24:34,790 --> 00:24:38,630
just recording the screenshots of the

00:24:36,800 --> 00:24:40,790
failures or the whole video of test run

00:24:38,630 --> 00:24:43,790
with record video of the test boots also

00:24:40,790 --> 00:24:45,920
there the window manager xvv am/fm

00:24:43,790 --> 00:24:48,220
pixels like really heavy you know it can

00:24:45,920 --> 00:24:51,460
be a bit slow so I would not suggest to

00:24:48,220 --> 00:24:54,230
at least on CI road work these videos

00:24:51,460 --> 00:24:58,580
but if you are making yourself an

00:24:54,230 --> 00:24:59,750
electron application yeah can you even

00:24:58,580 --> 00:25:02,530
the same application

00:24:59,750 --> 00:25:02,530

YouTube URL: https://www.youtube.com/watch?v=daTwEHBRfQE


