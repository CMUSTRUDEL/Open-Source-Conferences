Title: gtk-rs: newest and future developments Progress report on GTK+ Rust bindings
Publication date: 2019-02-08
Playlist: FOSDEM 2019
Description: 
	by Guillaume Gomez

At: FOSDEM 2019
https://video.fosdem.org/2019/UD2.208/rust_gtk_rs.webm


A tour on newest and future developments for gtk-rs, the Rust bindings to GTK+. Agenda

Introduction: 


Small presentation of Gtk-rs project.
Small code demonstration.



Last year developments: 


Add of futures to handle asynchronous function calls.
Generation of union types.
A lot of new types/functions generated.



Next developments: 


Generate bindings for functions/methods taking callbacks as argument.
Long run: being able to "subclass" widgets.
Global API improvements as always!
Generate sys crates documentation on gtk-rs.org as well?



gtk-rs ecosystem: 


A lot of projects are starting to use gtk-rs, two of them are part of the ten most active GNOME projects on gitlab (Fractal - https://wiki.gnome.org/Apps/Fractal - and Podcasts - https://wiki.gnome.org/Apps/Podcasts).
Some (nice) API are built upon it like relm (https://github.com/antoyo/relm).



Question time! 

Room: UD2.208 (Decroly)
Scheduled start: 2019-02-03 14:20:00+01
Captions: 
	00:00:04,780 --> 00:00:18,200
we are waiting for them yeah we want to

00:00:08,000 --> 00:00:20,660
be on time okay yes okay

00:00:18,200 --> 00:00:23,900
so hello once again and thank you once

00:00:20,660 --> 00:00:26,270
again we keep going on the gtk and no

00:00:23,900 --> 00:00:29,270
topics so the next speaker is Guillaume

00:00:26,270 --> 00:00:31,599
is going to talk us about the GTRs

00:00:29,270 --> 00:00:40,910
crates that has been mentioned before so

00:00:31,599 --> 00:00:41,510
applauses for him and let's go so hi

00:00:40,910 --> 00:00:45,620
everyone

00:00:41,510 --> 00:00:47,390
it would be why Jordan made some kind of

00:00:45,620 --> 00:00:50,750
introduction so I will be able to be a

00:00:47,390 --> 00:00:53,720
bit faster at first so let's begin it

00:00:50,750 --> 00:00:55,520
will be about last developments in the

00:00:53,720 --> 00:00:59,390
jig Airways and what we intend to do

00:00:55,520 --> 00:01:03,290
light for many your next year so first

00:00:59,390 --> 00:01:05,689
who I am I so I'm a many arrest reviewer

00:01:03,290 --> 00:01:09,790
and contributor part of two teams there

00:01:05,689 --> 00:01:15,820
and I'm are so the current ojtk always

00:01:09,790 --> 00:01:18,350
organization owner on github so yeah oh

00:01:15,820 --> 00:01:20,840
you have a pretty much good idea for

00:01:18,350 --> 00:01:21,440
what is a gtk arrest but let's go over

00:01:20,840 --> 00:01:25,369
it again

00:01:21,440 --> 00:01:27,860
so the point of gtk arrest is to provide

00:01:25,369 --> 00:01:33,140
the bindings for most phenomenal

00:01:27,860 --> 00:01:36,320
breweries in rest of course the point is

00:01:33,140 --> 00:01:39,640
to bring a safety and more usability

00:01:36,320 --> 00:01:43,549
oversee libraries in rest directly

00:01:39,640 --> 00:01:48,920
pretty it's fun our girl we have we're

00:01:43,549 --> 00:01:51,290
moving for right so let's start with the

00:01:48,920 --> 00:01:53,119
newest developments must be since or

00:01:51,290 --> 00:01:56,509
last for them so if you were there at

00:01:53,119 --> 00:02:02,420
the rest of them maybe it will we have

00:01:56,509 --> 00:02:06,680
some help no so we just talked about ATK

00:02:02,420 --> 00:02:11,540
by Jordan so we added a binding for the

00:02:06,680 --> 00:02:15,050
ATK we felt it was like a Miss so now

00:02:11,540 --> 00:02:17,750
it's fixed just like a job and instead

00:02:15,050 --> 00:02:22,390
it's a accessibility toolkit

00:02:17,750 --> 00:02:25,360
Marie I don't know we hope to be able to

00:02:22,390 --> 00:02:28,100
make it more integrated into triticale

00:02:25,360 --> 00:02:30,140
to be able to have it by defer that at

00:02:28,100 --> 00:02:32,690
some point so people don't have to

00:02:30,140 --> 00:02:38,390
provide the extra efforts to provide

00:02:32,690 --> 00:02:42,410
accessibility to everyone so another big

00:02:38,390 --> 00:02:44,750
thing what I created to test user

00:02:42,410 --> 00:02:47,540
interfaces because we never say it

00:02:44,750 --> 00:02:52,910
enough but this thing is good not that

00:02:47,540 --> 00:02:57,280
thing but we call it a JDK a test it's

00:02:52,910 --> 00:03:00,620
pretty easy to use it was started by

00:02:57,280 --> 00:03:03,760
Anthony at the time it was used to test

00:03:00,620 --> 00:03:06,410
the rain for those we know it so we just

00:03:03,760 --> 00:03:08,780
improved it and modified it a bit in

00:03:06,410 --> 00:03:13,489
order to make it work for DTK a race as

00:03:08,780 --> 00:03:17,930
well so as you can see yeah you see my

00:03:13,489 --> 00:03:20,959
cursor so in here we just create a

00:03:17,930 --> 00:03:24,560
button we give it a level so it will be

00:03:20,959 --> 00:03:26,720
called button because it's nice so when

00:03:24,560 --> 00:03:29,810
you click on the button we will switch

00:03:26,720 --> 00:03:34,400
the thurible to clicked again so much

00:03:29,810 --> 00:03:35,390
for originality so here comes the

00:03:34,400 --> 00:03:39,320
interesting part

00:03:35,390 --> 00:03:41,840
so with adjudicate test great you will

00:03:39,320 --> 00:03:45,500
be able to send the click event to your

00:03:41,840 --> 00:03:47,269
button then because we want to be

00:03:45,500 --> 00:03:50,209
absolutely sure because we'd not know

00:03:47,269 --> 00:03:55,690
what kind of server is running this test

00:03:50,209 --> 00:03:55,690
a partner everything fine

00:03:56,440 --> 00:04:02,150
so we wanted to wait a second to be sure

00:03:59,780 --> 00:04:07,400
that the Ribera has been updated and

00:04:02,150 --> 00:04:10,280
then we just check with a nice micro we

00:04:07,400 --> 00:04:15,650
added as well as that the Britain La

00:04:10,280 --> 00:04:17,239
Bella has been updated we also added the

00:04:15,650 --> 00:04:19,850
continuous integration for Mac OS

00:04:17,239 --> 00:04:23,180
because what we are supposed to suppose

00:04:19,850 --> 00:04:28,460
to support Mac as well and since I'm

00:04:23,180 --> 00:04:30,130
mainly using Mac it's nice to thanks to

00:04:28,460 --> 00:04:33,920
Travis

00:04:30,130 --> 00:04:37,580
so here come the interesting part

00:04:33,920 --> 00:04:40,280
so API improvements so of course we have

00:04:37,580 --> 00:04:43,220
a lot more functions generated IRA me

00:04:40,280 --> 00:04:45,350
maybe go back to that later on we

00:04:43,220 --> 00:04:47,660
improved the debug implementation for

00:04:45,350 --> 00:04:50,750
Inhumans in meeting now we have a

00:04:47,660 --> 00:04:52,340
variant printing correctly which was a

00:04:50,750 --> 00:04:56,210
bit weird before but now it's working

00:04:52,340 --> 00:04:59,240
fine someone last year asked about the

00:04:56,210 --> 00:05:02,300
support of future for asking functions

00:04:59,240 --> 00:05:05,510
in rest and decay res but now it's there

00:05:02,300 --> 00:05:09,550
so if you want to test it it would be

00:05:05,510 --> 00:05:12,770
high fine to have a tilt backs we also

00:05:09,550 --> 00:05:16,760
added huge improvements of G lives

00:05:12,770 --> 00:05:19,880
channels on the main context type and of

00:05:16,760 --> 00:05:23,420
course we had lots of bug fixes and

00:05:19,880 --> 00:05:28,520
everything but that's not everything we

00:05:23,420 --> 00:05:32,480
added more into bones so now you can

00:05:28,520 --> 00:05:34,910
have some nice cars so for those who

00:05:32,480 --> 00:05:38,150
don't know the into trait the point is

00:05:34,910 --> 00:05:40,280
to be able to instead of having to pass

00:05:38,150 --> 00:05:42,620
none and some every time you give

00:05:40,280 --> 00:05:45,770
something you still have to give them

00:05:42,620 --> 00:05:48,590
none but for the Sun should have a right

00:05:45,770 --> 00:05:51,920
cut example but you don't have to give

00:05:48,590 --> 00:05:53,890
to wrap your string into some and the

00:05:51,920 --> 00:05:56,630
same goes for the types

00:05:53,890 --> 00:05:58,610
just like your shoulder in here so the

00:05:56,630 --> 00:06:00,920
parent in here doesn't need this um if

00:05:58,610 --> 00:06:02,240
you give it it will be automatically a

00:06:00,920 --> 00:06:05,870
convert to the inside the function

00:06:02,240 --> 00:06:06,980
directly it's may need to make users

00:06:05,870 --> 00:06:12,140
life

00:06:06,980 --> 00:06:15,310
a bit easier and more fun to use but we

00:06:12,140 --> 00:06:19,550
also added as a dispersed disparate rate

00:06:15,310 --> 00:06:23,780
so it's funny because it's mostly used

00:06:19,550 --> 00:06:26,930
for debug but yeah so now if you create

00:06:23,780 --> 00:06:29,270
a widget in here button again and you

00:06:26,930 --> 00:06:32,240
print a this rejected its type I will be

00:06:29,270 --> 00:06:35,810
shot just like you'll be here you can

00:06:32,240 --> 00:06:40,600
see it here yeah of course

00:06:35,810 --> 00:06:43,520
we since we rely a lot of automatic

00:06:40,600 --> 00:06:46,460
create and code generation things to be

00:06:43,520 --> 00:06:49,730
I'll go back to that later on you can

00:06:46,460 --> 00:06:52,670
absolutely disable as this trait

00:06:49,730 --> 00:06:54,770
implementation I think it's mostly

00:06:52,670 --> 00:06:56,750
gstreamer who is doing that because they

00:06:54,770 --> 00:06:59,630
have some specific display tray

00:06:56,750 --> 00:07:02,710
temperament ations so I will let the

00:06:59,630 --> 00:07:02,710
best don't talk about it later

00:07:03,130 --> 00:07:09,410
yeah just the whole torque of a job done

00:07:07,160 --> 00:07:12,350
was about it so more and more

00:07:09,410 --> 00:07:14,660
applications being your right hand with

00:07:12,350 --> 00:07:17,330
tooth decay racing in here and rest more

00:07:14,660 --> 00:07:21,200
generality so just like he talked about

00:07:17,330 --> 00:07:23,840
fractal podcast G radio which is a still

00:07:21,200 --> 00:07:25,420
a work in progress and news fresh we

00:07:23,840 --> 00:07:28,640
Ratan from a field reader

00:07:25,420 --> 00:07:33,290
work-in-progress again and it was just

00:07:28,640 --> 00:07:37,220
most famous let's say norm application I

00:07:33,290 --> 00:07:38,240
know that there are a lot more

00:07:37,220 --> 00:07:40,970
applications

00:07:38,240 --> 00:07:45,620
it was quite I think it wasn't named a

00:07:40,970 --> 00:07:47,710
lot more so another thing we added

00:07:45,620 --> 00:07:50,870
because code is not everything

00:07:47,710 --> 00:07:56,080
it was a frequently asked questions

00:07:50,870 --> 00:07:59,450
section so we had some questions built

00:07:56,080 --> 00:08:02,090
after quite frequently actually so for

00:07:59,450 --> 00:08:05,830
instance why already Z song so currently

00:08:02,090 --> 00:08:09,620
we have a pace of around to read easier

00:08:05,830 --> 00:08:13,040
so you will have this answer on this

00:08:09,620 --> 00:08:19,090
page I recommend going it to there some

00:08:13,040 --> 00:08:22,240
interesting information are there ok so

00:08:19,090 --> 00:08:28,750
now what will come next year mostly and

00:08:22,240 --> 00:08:32,469
maybe first obviously so of course again

00:08:28,750 --> 00:08:34,900
more API improvements so functions with

00:08:32,469 --> 00:08:36,729
Corbett generation I had to Reno him as

00:08:34,900 --> 00:08:40,750
this feature because my name wasn't

00:08:36,729 --> 00:08:43,570
appreciated less clones offer strings

00:08:40,750 --> 00:08:47,200
that was you can already taste it

00:08:43,570 --> 00:08:49,960
actually thanks to gesturing type the

00:08:47,200 --> 00:08:53,740
whole point of this type is when for

00:08:49,960 --> 00:08:55,720
instance you return you get you we are

00:08:53,740 --> 00:08:57,670
in the example we were checking the

00:08:55,720 --> 00:08:59,170
rabbit over the button so when you get

00:08:57,670 --> 00:09:00,850
the Lebel of the button you don't need

00:08:59,170 --> 00:09:03,520
to modify the string so you just get a

00:09:00,850 --> 00:09:07,300
constant constant pointer so instead of

00:09:03,520 --> 00:09:10,330
cloning it into a into a string in rest

00:09:07,300 --> 00:09:13,270
you would we just keep a reference to it

00:09:10,330 --> 00:09:15,150
and then just provide it to the user as

00:09:13,270 --> 00:09:19,380
long as you don't try to modify it

00:09:15,150 --> 00:09:22,089
since all goes fine and of course it's

00:09:19,380 --> 00:09:25,450
something for the wrong term but object

00:09:22,089 --> 00:09:29,410
inheritance would be will be a big thing

00:09:25,450 --> 00:09:32,140
for now it's I think it's only very nice

00:09:29,410 --> 00:09:34,180
in a separate special binding don't know

00:09:32,140 --> 00:09:39,580
for zero wrong which is maybe a bit on a

00:09:34,180 --> 00:09:42,760
Python as well not a thing we went into

00:09:39,580 --> 00:09:46,060
currently was with a into trait we

00:09:42,760 --> 00:09:48,880
realized that too much into trait usage

00:09:46,060 --> 00:09:52,570
was making user life a bit difficult for

00:09:48,880 --> 00:09:56,680
user kerbecs in for instance so we'll

00:09:52,570 --> 00:10:00,370
talk well in so part as long as the type

00:09:56,680 --> 00:10:03,100
is simple you won't have to worry and

00:10:00,370 --> 00:10:05,380
still have the in two traits but for

00:10:03,100 --> 00:10:07,779
signals and the function we for car

00:10:05,380 --> 00:10:10,089
backs it's very certainly that we will

00:10:07,779 --> 00:10:11,950
remove it because it's complicated in

00:10:10,089 --> 00:10:14,200
time in case you don't want to provide

00:10:11,950 --> 00:10:17,470
the car back it will be known and you

00:10:14,200 --> 00:10:19,690
can't well you need to provide to the

00:10:17,470 --> 00:10:22,600
compiler some information about the type

00:10:19,690 --> 00:10:27,910
you were supposed to give and it doesn't

00:10:22,600 --> 00:10:30,190
work very well and since I was talking

00:10:27,910 --> 00:10:32,930
about functions we've got back so you

00:10:30,190 --> 00:10:36,030
can see the nice sequence

00:10:32,930 --> 00:10:39,930
which becomes the some a nice arrest

00:10:36,030 --> 00:10:43,710
record in here so just like I said there

00:10:39,930 --> 00:10:46,560
is no into very just like I explained

00:10:43,710 --> 00:10:48,810
because you need to tell the compiler

00:10:46,560 --> 00:10:50,790
that you want to give something like

00:10:48,810 --> 00:10:54,120
this which for now is just generic

00:10:50,790 --> 00:10:59,040
because FN is a trait which means that

00:10:54,120 --> 00:11:02,610
its closure or a function actory and you

00:10:59,040 --> 00:11:04,920
can't really give this information if

00:11:02,610 --> 00:11:07,500
you don't have it as simple as that

00:11:04,920 --> 00:11:11,940
so the compiler at least want to know

00:11:07,500 --> 00:11:15,120
people with that so as you can see you

00:11:11,940 --> 00:11:16,800
don't have anymore the data it's since

00:11:15,120 --> 00:11:18,630
we have a closure we don't need it

00:11:16,800 --> 00:11:21,200
because you can just give it to the

00:11:18,630 --> 00:11:23,640
closure directly and the destroy

00:11:21,200 --> 00:11:26,640
parameter is gone as well because it's

00:11:23,640 --> 00:11:29,760
handled internally directly by gtk res

00:11:26,640 --> 00:11:38,550
now the data is destroyed the directly

00:11:29,760 --> 00:11:40,980
bias safely so function we've got back

00:11:38,550 --> 00:11:45,360
so just like I said we don't allow user

00:11:40,980 --> 00:11:47,880
to pass destroy Crozier we remove the

00:11:45,360 --> 00:11:49,620
user data parameters we 100 and

00:11:47,880 --> 00:11:53,490
lifetimes nicely I didn't talk about

00:11:49,620 --> 00:11:55,620
that in here for instance since this

00:11:53,490 --> 00:11:57,720
function can be called the way later in

00:11:55,620 --> 00:11:59,490
the code and you not sure that your

00:11:57,720 --> 00:12:03,150
parameter will be arrived at this time

00:11:59,490 --> 00:12:06,300
you have to make it static so anytime

00:12:03,150 --> 00:12:09,210
the function wants to be called or will

00:12:06,300 --> 00:12:10,230
be called the object will still be alive

00:12:09,210 --> 00:12:14,100
and well

00:12:10,230 --> 00:12:19,740
it's the mostly under the with a

00:12:14,100 --> 00:12:23,130
reference concede and said must be so we

00:12:19,740 --> 00:12:25,530
have multiple handling of this so for

00:12:23,130 --> 00:12:28,380
instance if you have a car back safe one

00:12:25,530 --> 00:12:31,920
day I recur on three views there is a

00:12:28,380 --> 00:12:35,160
sort function so if the phone is the

00:12:31,920 --> 00:12:37,890
sort function the stop function won't

00:12:35,160 --> 00:12:40,140
uses a closure afterwards so you don't

00:12:37,890 --> 00:12:43,440
need something to be static thatís where

00:12:40,140 --> 00:12:46,250
is under mainly by GT carries and the

00:12:43,440 --> 00:12:51,420
type I began FN with

00:12:46,250 --> 00:12:55,560
as simple okay

00:12:51,420 --> 00:12:57,600
so yeah the almighty gear I mentioned it

00:12:55,560 --> 00:13:01,020
a bit earlier

00:12:57,600 --> 00:13:04,530
it became is the cornerstone of the GTRs

00:13:01,020 --> 00:13:06,900
project like we have literally every

00:13:04,530 --> 00:13:10,200
crate we have that I generated the

00:13:06,900 --> 00:13:13,620
thanks to it with the exception of Cairo

00:13:10,200 --> 00:13:17,520
which is because of the gear files not

00:13:13,620 --> 00:13:20,820
being very nice up to date we can

00:13:17,520 --> 00:13:24,000
generate using it since the last year we

00:13:20,820 --> 00:13:27,240
had ten contributors and now it's a bit

00:13:24,000 --> 00:13:29,310
more than 110 commits but that's still

00:13:27,240 --> 00:13:31,080
Arad and more and more projects are

00:13:29,310 --> 00:13:33,450
deepening minute for instance if I

00:13:31,080 --> 00:13:38,100
record correctly or liba errors VG is

00:13:33,450 --> 00:13:40,950
using it as a library that's thanks for

00:13:38,100 --> 00:13:45,660
it maybe I will give a bit context of

00:13:40,950 --> 00:13:48,120
how we gear works so you have a little

00:13:45,660 --> 00:13:52,020
program on the green hand side which

00:13:48,120 --> 00:13:55,430
reads the C the C code as simple as that

00:13:52,020 --> 00:14:02,370
and generate an XML file explaining how

00:13:55,430 --> 00:14:06,360
how and what it is so for instance is

00:14:02,370 --> 00:14:10,410
this function the age thing has to be

00:14:06,360 --> 00:14:14,100
alive for a long time so it has the

00:14:10,410 --> 00:14:16,560
parameter we have a kind of closure will

00:14:14,100 --> 00:14:19,800
be you have three kind its notified I

00:14:16,560 --> 00:14:25,860
think and another one which means that

00:14:19,800 --> 00:14:28,530
you can have it in even longer time you

00:14:25,860 --> 00:14:32,220
have this which is marked as being a

00:14:28,530 --> 00:14:35,490
part of the closure which is important

00:14:32,220 --> 00:14:38,850
and this destroy is marked as being as a

00:14:35,490 --> 00:14:41,160
descriptor of this one and just like

00:14:38,850 --> 00:14:43,290
this you can thanks to this information

00:14:41,160 --> 00:14:47,190
which is quite complete generate

00:14:43,290 --> 00:14:50,210
literally everything we use gear to

00:14:47,190 --> 00:14:53,940
generate the documentation as well so

00:14:50,210 --> 00:14:56,400
when we say almighty gear its literary

00:14:53,940 --> 00:14:58,019
thanks to this project that GT terrorist

00:14:56,400 --> 00:15:03,179
is able to

00:14:58,019 --> 00:15:05,759
No and it starts to get a bit or no

00:15:03,179 --> 00:15:09,329
because it has been starting in 2014 if

00:15:05,759 --> 00:15:14,189
I record correctly so we're starting to

00:15:09,329 --> 00:15:17,939
have already cut the depth which is not

00:15:14,189 --> 00:15:21,660
so good we come back to that so do de

00:15:17,939 --> 00:15:24,119
que eres a environment because God is

00:15:21,660 --> 00:15:29,489
nice and everything but you have also

00:15:24,119 --> 00:15:33,029
humans behind God so a few numbers so

00:15:29,489 --> 00:15:36,869
currently gtk eraser organization has 29

00:15:33,029 --> 00:15:41,549
traits so yeah and we will not continue

00:15:36,869 --> 00:15:44,369
de steamer creates which means that it

00:15:41,549 --> 00:15:46,649
will very certainly I grew up in the

00:15:44,369 --> 00:15:49,920
next year depending on how many current

00:15:46,649 --> 00:15:51,839
new crates will be adding that's

00:15:49,920 --> 00:15:55,290
actually a question that have been asked

00:15:51,839 --> 00:15:57,299
a bit frequently so I go back so

00:15:55,290 --> 00:15:59,699
currently no we don't really have a

00:15:57,299 --> 00:16:04,499
process to accept the new crates and

00:15:59,699 --> 00:16:08,100
stuff so we just go as if people buzzer

00:16:04,499 --> 00:16:12,329
laughs enough with one crate we just end

00:16:08,100 --> 00:16:14,480
up generating it and hunting but as you

00:16:12,329 --> 00:16:17,399
can see it's a lot of crates making

00:16:14,480 --> 00:16:21,209
every really is a very known currently

00:16:17,399 --> 00:16:23,869
it takes almost up to two days because

00:16:21,209 --> 00:16:26,579
you have to confirm that every merger is

00:16:23,869 --> 00:16:29,220
working as expected and you have to wait

00:16:26,579 --> 00:16:31,379
for continuous integration to end up

00:16:29,220 --> 00:16:34,589
with testing everything and when you

00:16:31,379 --> 00:16:35,689
have a 27 repositories it takes hours at

00:16:34,589 --> 00:16:40,379
least

00:16:35,689 --> 00:16:42,869
and yeah those 29 crates are mostly

00:16:40,379 --> 00:16:45,839
shared between 27 repositories but

00:16:42,869 --> 00:16:48,029
that's not all because we also have to

00:16:45,839 --> 00:16:51,990
hunter documentation in its own

00:16:48,029 --> 00:16:55,829
repository so in those 27 repositories

00:16:51,990 --> 00:16:59,610
on just GTRs creates it serviceable also

00:16:55,829 --> 00:17:02,069
tools and very important elements

00:16:59,610 --> 00:17:03,989
required by other projects so for

00:17:02,069 --> 00:17:08,819
instance I was talking about releases

00:17:03,989 --> 00:17:11,260
it's a to run itself and we have to use

00:17:08,819 --> 00:17:14,410
it every six months or something

00:17:11,260 --> 00:17:16,180
and the to test it is quite a nightmare

00:17:14,410 --> 00:17:18,459
for now we don't have a very good

00:17:16,180 --> 00:17:20,439
solution if one has one at some point

00:17:18,459 --> 00:17:23,199
I'm very happy to hear about it

00:17:20,439 --> 00:17:27,010
and since last was then we had the two

00:17:23,199 --> 00:17:32,010
new releases the next one we talked

00:17:27,010 --> 00:17:35,200
about the next one later on so that

00:17:32,010 --> 00:17:39,580
require a lot of automation and we

00:17:35,200 --> 00:17:43,480
really like to have more of it a job I

00:17:39,580 --> 00:17:45,880
had before was to write about 200 merge

00:17:43,480 --> 00:17:49,059
queues and everything and I started

00:17:45,880 --> 00:17:52,030
working on a new one to repeat the same

00:17:49,059 --> 00:17:55,270
thing but this time for GT carries will

00:17:52,030 --> 00:17:58,360
be we have great views of it because for

00:17:55,270 --> 00:18:02,350
now it takes most of my time lately even

00:17:58,360 --> 00:18:06,370
more when doing religious so for

00:18:02,350 --> 00:18:09,070
instance when you have a new gear update

00:18:06,370 --> 00:18:11,890
we have to regenerate most of the crates

00:18:09,070 --> 00:18:14,320
which takes a lot of time so generally

00:18:11,890 --> 00:18:17,920
you end up by reviewing your 14 crates

00:18:14,320 --> 00:18:19,450
or something like that it's it takes a

00:18:17,920 --> 00:18:23,200
long it's of time at two for

00:18:19,450 --> 00:18:25,960
contributors for reviewers for literally

00:18:23,200 --> 00:18:29,470
everyone so this part will be able to

00:18:25,960 --> 00:18:31,450
happen that to run tests to maybe add a

00:18:29,470 --> 00:18:34,600
bit of ingenuity intelligence into it

00:18:31,450 --> 00:18:39,010
and check if something isn't going fine

00:18:34,600 --> 00:18:42,190
but that's mostly me ringing helper to

00:18:39,010 --> 00:18:45,309
new contributors because if we have more

00:18:42,190 --> 00:18:49,030
tutorials and maybe how to where to

00:18:45,309 --> 00:18:51,520
start and everything I hope that will

00:18:49,030 --> 00:18:53,320
bring new contributors we definitely

00:18:51,520 --> 00:18:55,420
need more help on this

00:18:53,320 --> 00:18:57,780
thanks to access that we have already

00:18:55,420 --> 00:19:01,900
some help and I hope it will continue

00:18:57,780 --> 00:19:06,670
and of course much more so we'll see

00:19:01,900 --> 00:19:10,270
what to add in this but for now I think

00:19:06,670 --> 00:19:14,380
it's already listened to have we'll see

00:19:10,270 --> 00:19:16,540
when we do have a start for it so

00:19:14,380 --> 00:19:20,410
continuous integration like I said is

00:19:16,540 --> 00:19:23,200
very bad currently not because of where

00:19:20,410 --> 00:19:23,890
we have a test not as much as I want to

00:19:23,200 --> 00:19:26,640
but

00:19:23,890 --> 00:19:30,160
we have test which is already something

00:19:26,640 --> 00:19:32,140
we have however a big issue when I was

00:19:30,160 --> 00:19:35,710
talking about the gear updates you have

00:19:32,140 --> 00:19:39,790
to regenerate every grades so you have

00:19:35,710 --> 00:19:42,010
to be sure that with a new update of a

00:19:39,790 --> 00:19:44,020
crater or of the other crates are

00:19:42,010 --> 00:19:47,650
rocking so for instance if you update

00:19:44,020 --> 00:19:50,830
your GT but you have to check gtk isn't

00:19:47,650 --> 00:19:55,179
using your other API or have surprised

00:19:50,830 --> 00:19:57,790
and when you updated GD p-- originary

00:19:55,179 --> 00:20:00,669
what happens is that you break literally

00:19:57,790 --> 00:20:02,919
everything so you have to merge

00:20:00,669 --> 00:20:05,110
everything and then very strongly that

00:20:02,919 --> 00:20:07,540
you didn't have a bug that you didn't

00:20:05,110 --> 00:20:11,830
spot and when everything works you just

00:20:07,540 --> 00:20:14,530
check with exam person if examples are

00:20:11,830 --> 00:20:16,450
bidding then congrats we are done on

00:20:14,530 --> 00:20:17,020
this update let's start a new real

00:20:16,450 --> 00:20:20,380
nightmare

00:20:17,020 --> 00:20:22,240
yes so a solution will be to make it

00:20:20,380 --> 00:20:24,820
more clever so instead of a having

00:20:22,240 --> 00:20:29,530
tester running everywhere we will have

00:20:24,820 --> 00:20:34,360
to Center centralize everything into one

00:20:29,530 --> 00:20:40,450
server or something and at this point it

00:20:34,360 --> 00:20:41,890
will be at this point it will be a way

00:20:40,450 --> 00:20:45,700
more faster because you don't have to

00:20:41,890 --> 00:20:50,410
make everything again and it will update

00:20:45,700 --> 00:20:53,049
to have the last version of everything

00:20:50,410 --> 00:20:57,130
and you will just test once and for all

00:20:53,049 --> 00:21:00,429
and you will do a one review but it's

00:20:57,130 --> 00:21:03,490
yeah for now I don't know how to make it

00:21:00,429 --> 00:21:06,640
happen in a multi repository or context

00:21:03,490 --> 00:21:09,130
it's not a lot of things are still up to

00:21:06,640 --> 00:21:12,820
debate if someone has trician very open

00:21:09,130 --> 00:21:15,580
to it so I think that question has been

00:21:12,820 --> 00:21:18,820
asked to me like at every tour caddied

00:21:15,580 --> 00:21:22,900
so now we just skip question and answer

00:21:18,820 --> 00:21:25,990
it for you so seems to be done so before

00:21:22,900 --> 00:21:30,240
having a 1.0 release I'd like to have a

00:21:25,990 --> 00:21:33,190
foreigner written support of course like

00:21:30,240 --> 00:21:34,540
it will just be awesome to be able to

00:21:33,190 --> 00:21:36,820
have something that

00:21:34,540 --> 00:21:38,950
the virus is asleep whispers be nice to

00:21:36,820 --> 00:21:41,050
have your own button doing crazy sing

00:21:38,950 --> 00:21:44,170
like you click and you have a unicorn or

00:21:41,050 --> 00:21:47,770
something continue to work and

00:21:44,170 --> 00:21:51,190
performance before this the last release

00:21:47,770 --> 00:21:54,430
we didn't have much talked about it and

00:21:51,190 --> 00:21:57,580
I think it's a very important part of

00:21:54,430 --> 00:22:01,120
duty Karis and if performance is unhear

00:21:57,580 --> 00:22:04,450
users won't be here as well so not very

00:22:01,120 --> 00:22:06,850
good we definitely needed to improve

00:22:04,450 --> 00:22:10,630
internal so I was talking about a gear

00:22:06,850 --> 00:22:14,380
which was getting old definitely we need

00:22:10,630 --> 00:22:17,800
to improve it at some point because it's

00:22:14,380 --> 00:22:20,320
an inner drug but we have gears

00:22:17,800 --> 00:22:23,740
separated in three parts something that

00:22:20,320 --> 00:22:26,980
passes a gear content then you generate

00:22:23,740 --> 00:22:29,350
some ASD and then from that you generate

00:22:26,980 --> 00:22:31,990
the code and that last part is the

00:22:29,350 --> 00:22:33,670
tricky one because when you add the

00:22:31,990 --> 00:22:36,310
conditions there were conditions where

00:22:33,670 --> 00:22:38,530
no one knows what's happening but if it

00:22:36,310 --> 00:22:40,660
generates oozing looking good you just

00:22:38,530 --> 00:22:45,640
hope it won't be a dark magic anymore

00:22:40,660 --> 00:22:49,080
and of course I think it's currently the

00:22:45,640 --> 00:22:52,180
big the biggest pain point is that

00:22:49,080 --> 00:22:54,100
documentation isn't great because we use

00:22:52,180 --> 00:22:58,000
differently the CD commentation we

00:22:54,100 --> 00:23:01,180
improve it a bit I don't know yet how to

00:22:58,000 --> 00:23:03,640
make maybe automatic commercial of this

00:23:01,180 --> 00:23:06,760
documentation directly for rest we'll

00:23:03,640 --> 00:23:10,450
see I don't know for now but definitely

00:23:06,760 --> 00:23:13,330
more tutorials because some rest

00:23:10,450 --> 00:23:16,270
users don't know genome and some user

00:23:13,330 --> 00:23:18,910
don't know rest so we can make the best

00:23:16,270 --> 00:23:22,330
out of the tool yeah we are getting

00:23:18,910 --> 00:23:26,800
close we're not there yet but let's you

00:23:22,330 --> 00:23:32,020
speak about that last year next year so

00:23:26,800 --> 00:23:34,690
next three is well since we have landed

00:23:32,020 --> 00:23:39,820
there is a big I recorded user callbacks

00:23:34,690 --> 00:23:42,370
but you know it's semester now we can

00:23:39,820 --> 00:23:45,100
have I think the next reason the next

00:23:42,370 --> 00:23:46,350
two weeks we'll see if we have some last

00:23:45,100 --> 00:23:48,360
minute

00:23:46,350 --> 00:23:51,870
Heisenberg's our future someone

00:23:48,360 --> 00:23:55,950
definitely wants the Baris VG wanted

00:23:51,870 --> 00:24:00,140
some synergy we're saying so thanks for

00:23:55,950 --> 00:24:09,939
listening if you have any questions

00:24:00,140 --> 00:24:09,939
[Applause]

00:24:15,460 --> 00:24:22,150
so the question was is there any

00:24:18,730 --> 00:24:25,540
documentation for the code generation

00:24:22,150 --> 00:24:28,520
let's say maybe I don't know how you can

00:24:25,540 --> 00:24:32,180
know it's on the gear repository we have

00:24:28,520 --> 00:24:34,010
a description and I started to write a

00:24:32,180 --> 00:24:36,380
full tutorial on how to do you

00:24:34,010 --> 00:24:39,800
step-by-step how to generate everything

00:24:36,380 --> 00:24:42,950
I didn't finish it yet I don't have much

00:24:39,800 --> 00:24:45,590
time that next accessed I think I will

00:24:42,950 --> 00:24:47,840
do that it will be in April so be a bit

00:24:45,590 --> 00:24:50,059
patient in a human Caesar it will be

00:24:47,840 --> 00:24:56,230
here I will make a big announcement in a

00:24:50,059 --> 00:24:56,230
reddit for that was our question

00:24:59,070 --> 00:25:07,519

YouTube URL: https://www.youtube.com/watch?v=f_vDUs_7zJk


