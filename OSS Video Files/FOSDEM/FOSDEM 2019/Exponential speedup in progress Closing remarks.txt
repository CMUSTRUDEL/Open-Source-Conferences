Title: Exponential speedup in progress Closing remarks
Publication date: 2019-02-08
Playlist: FOSDEM 2019
Description: 
	by Mark Fingerhuth

At: FOSDEM 2019
https://video.fosdem.org/2019/AW1.121/qosf_closing.webm

Room: AW1.121
Scheduled start: 2019-02-02 18:35:00+01
Captions: 
	00:00:04,640 --> 00:00:09,620
so hi everyone thanks for having me I'll

00:00:07,729 --> 00:00:12,200
talk about when open-source meets

00:00:09,620 --> 00:00:13,820
quantum computing and so if you've been

00:00:12,200 --> 00:00:15,530
following some of the talks today or

00:00:13,820 --> 00:00:17,150
even if you just came inside and it's

00:00:15,530 --> 00:00:18,800
the first talk about quantum computing

00:00:17,150 --> 00:00:20,960
that you hear today basically the

00:00:18,800 --> 00:00:23,180
general theme that we hope to convey is

00:00:20,960 --> 00:00:26,390
that quantum computing has moved out of

00:00:23,180 --> 00:00:28,550
this kind of sci-fi world into reality

00:00:26,390 --> 00:00:30,380
it's happening today it's not just in

00:00:28,550 --> 00:00:31,939
some research labs but it's happening in

00:00:30,380 --> 00:00:33,650
startups and some of the big companies

00:00:31,939 --> 00:00:35,360
and the amazing thing it's also

00:00:33,650 --> 00:00:39,049
happening open-source and that's why

00:00:35,360 --> 00:00:41,059
we're here so there is plenty of quantum

00:00:39,049 --> 00:00:44,180
Hardware out there they call them QP use

00:00:41,059 --> 00:00:46,250
quantum processing units and like

00:00:44,180 --> 00:00:48,229
basically we have a lot of the hardware

00:00:46,250 --> 00:00:50,629
providers and today we had all of them

00:00:48,229 --> 00:00:53,170
here who are actually working with open

00:00:50,629 --> 00:00:55,640
source software so I on cue and Intel

00:00:53,170 --> 00:00:59,629
both haven't released any software to

00:00:55,640 --> 00:01:02,059
interact with their QP used so far as

00:00:59,629 --> 00:01:04,489
Thomas just mentioned it is for people

00:01:02,059 --> 00:01:06,380
that are interested a incubator program

00:01:04,489 --> 00:01:07,939
for quantum software startups they is

00:01:06,380 --> 00:01:09,680
basically a nine-month program they

00:01:07,939 --> 00:01:11,630
offer you two months training where you

00:01:09,680 --> 00:01:14,090
actually get to learn how to programs to

00:01:11,630 --> 00:01:16,610
use devices and you also get an initial

00:01:14,090 --> 00:01:20,450
funding of ATK and the applications are

00:01:16,610 --> 00:01:23,750
open now so then in in kind of summery

00:01:20,450 --> 00:01:25,550
like a lot of if you go to conferences

00:01:23,750 --> 00:01:27,380
which are about quantum computing you're

00:01:25,550 --> 00:01:29,810
gonna hear a lot about exponential speed

00:01:27,380 --> 00:01:32,360
ups everyone is trying to come like find

00:01:29,810 --> 00:01:34,220
out like a classical algorithm that can

00:01:32,360 --> 00:01:36,230
be sped up and so I just picked like

00:01:34,220 --> 00:01:38,330
three papers that happen to have the

00:01:36,230 --> 00:01:40,820
words exponential speed-up in their

00:01:38,330 --> 00:01:42,980
titles but there's plenty more and like

00:01:40,820 --> 00:01:44,870
one of the most well known is an

00:01:42,980 --> 00:01:47,659
algorithm to solve a system of linear

00:01:44,870 --> 00:01:48,979
equations where they basically had an

00:01:47,659 --> 00:01:50,930
exponential speed-up and so there's a

00:01:48,979 --> 00:01:52,760
lot of these but the problem is that

00:01:50,930 --> 00:01:53,930
there's still large amounts of software

00:01:52,760 --> 00:01:56,030
engineering that actually needs to be

00:01:53,930 --> 00:01:57,950
done to to really harness these speed

00:01:56,030 --> 00:02:02,240
ups and and actually use them for

00:01:57,950 --> 00:02:05,000
real-world applications so there's

00:02:02,240 --> 00:02:06,710
there's a law that I quite like it's

00:02:05,000 --> 00:02:09,049
called Brookes law and what it basically

00:02:06,710 --> 00:02:12,500
says is that adding human resources to a

00:02:09,049 --> 00:02:14,630
late software project makes it later and

00:02:12,500 --> 00:02:16,580
and that's very much something that I

00:02:14,630 --> 00:02:18,250
can relate to because when we started a

00:02:16,580 --> 00:02:19,270
company we thought that adding and

00:02:18,250 --> 00:02:22,450
is actually going to increase

00:02:19,270 --> 00:02:23,470
productivity linearly but it definitely

00:02:22,450 --> 00:02:25,300
doesn't and it just increases

00:02:23,470 --> 00:02:27,640
communication overheads and so it

00:02:25,300 --> 00:02:29,530
basically returns is the law of

00:02:27,640 --> 00:02:32,500
diminishing returns we're adding

00:02:29,530 --> 00:02:34,120
resources actually starts plateauing and

00:02:32,500 --> 00:02:36,610
then even decreasing productivity at

00:02:34,120 --> 00:02:39,610
some point but when we started working

00:02:36,610 --> 00:02:42,100
on this paper what I find quite

00:02:39,610 --> 00:02:43,480
surprising is there has been a paper in

00:02:42,100 --> 00:02:45,550
some research where they analyzed a lot

00:02:43,480 --> 00:02:47,140
of open source projects and what they

00:02:45,550 --> 00:02:49,000
found is that Brooks law actually

00:02:47,140 --> 00:02:50,620
doesn't hold true for open source

00:02:49,000 --> 00:02:52,360
projects there is an increase in

00:02:50,620 --> 00:02:57,570
productivity with increasing amounts of

00:02:52,360 --> 00:03:00,489
contributors which is quite awesome so

00:02:57,570 --> 00:03:02,709
there's it is an amazing diversity of

00:03:00,489 --> 00:03:05,020
software projects already when it comes

00:03:02,709 --> 00:03:08,800
to quantum computing and a while ago I

00:03:05,020 --> 00:03:11,290
started a list on github that is now

00:03:08,800 --> 00:03:13,810
hosted on the quantum open source

00:03:11,290 --> 00:03:16,450
foundation github page and it basically

00:03:13,810 --> 00:03:17,820
it's I'm trying to keep it up to date as

00:03:16,450 --> 00:03:20,590
much as possible and people are

00:03:17,820 --> 00:03:22,720
submitting pull requests a lot of times

00:03:20,590 --> 00:03:24,760
and it basically is split up into many

00:03:22,720 --> 00:03:26,830
different subcategories that are

00:03:24,760 --> 00:03:29,140
important in the quantum computing space

00:03:26,830 --> 00:03:31,980
and then each sub code category is

00:03:29,140 --> 00:03:34,209
subdivided in programming languages and

00:03:31,980 --> 00:03:36,790
there's a lot of interesting projects

00:03:34,209 --> 00:03:39,040
and I wanted to point out like a couple

00:03:36,790 --> 00:03:41,280
funny ones like in the quantum fun

00:03:39,040 --> 00:03:43,750
section what I found most surprising is

00:03:41,280 --> 00:03:47,410
there's a project where you can compose

00:03:43,750 --> 00:03:50,110
and perform quantum music with actual

00:03:47,410 --> 00:03:51,910
quantum processing units we heard a

00:03:50,110 --> 00:03:53,739
little bit about that board game from

00:03:51,910 --> 00:03:56,110
IBM which is about you basically

00:03:53,739 --> 00:03:57,579
travelling through the galaxy and trying

00:03:56,110 --> 00:03:59,769
to collect parts to build a quantum

00:03:57,579 --> 00:04:01,209
computer it's actually open source that

00:03:59,769 --> 00:04:03,070
board game you can download it on github

00:04:01,209 --> 00:04:04,540
and there's some other like a really

00:04:03,070 --> 00:04:07,060
funny project out there you can even

00:04:04,540 --> 00:04:09,850
play like battleships and cap sweeper on

00:04:07,060 --> 00:04:11,920
queues I think that makes the

00:04:09,850 --> 00:04:14,260
experimentalists really sad if they know

00:04:11,920 --> 00:04:18,669
that all their time is better to just

00:04:14,260 --> 00:04:21,400
play games so yeah as Thomas already

00:04:18,669 --> 00:04:23,740
mentioned we were contacted by a journal

00:04:21,400 --> 00:04:25,960
that is focusing a lot on on open access

00:04:23,740 --> 00:04:28,090
and publishing code open source which is

00:04:25,960 --> 00:04:30,880
+1 and they asked us to write a review

00:04:28,090 --> 00:04:31,990
about the current state of quantum open

00:04:30,880 --> 00:04:34,300
source software

00:04:31,990 --> 00:04:35,830
and I think that kind of really fits

00:04:34,300 --> 00:04:37,870
nicely into the fosston theme and I

00:04:35,830 --> 00:04:40,410
wanted to share with you what we kind of

00:04:37,870 --> 00:04:43,480
found and what what results there were

00:04:40,410 --> 00:04:44,860
as a recap you if you were here this

00:04:43,480 --> 00:04:46,360
morning for tomorrow's talk

00:04:44,860 --> 00:04:47,950
you already saw those slides but I just

00:04:46,360 --> 00:04:49,780
wanted to quickly kind of on a

00:04:47,950 --> 00:04:52,270
high-level point out how the workflow

00:04:49,780 --> 00:04:54,760
looks like when you're trying to program

00:04:52,270 --> 00:04:57,040
a quantum computer you're starting out

00:04:54,760 --> 00:04:59,470
with a problem definition which could be

00:04:57,040 --> 00:05:01,030
at a traveling salesman problem and in

00:04:59,470 --> 00:05:02,740
the first step and that's in the gate

00:05:01,030 --> 00:05:04,510
model paradigm the first step is to

00:05:02,740 --> 00:05:06,220
actually choose a quantum algorithm that

00:05:04,510 --> 00:05:08,080
you want to use to tackle that problem

00:05:06,220 --> 00:05:09,700
and once you have picked an algorithm

00:05:08,080 --> 00:05:11,740
the next step is to actually write down

00:05:09,700 --> 00:05:13,870
a circuit which corresponds to this

00:05:11,740 --> 00:05:15,940
algorithm and specifically with R which

00:05:13,870 --> 00:05:18,190
also incorporates E the problem that

00:05:15,940 --> 00:05:20,590
you're trying to solve and then once you

00:05:18,190 --> 00:05:22,750
have that circuit you need to compile a

00:05:20,590 --> 00:05:24,040
circuit depending on what back-end you

00:05:22,750 --> 00:05:26,740
want to use do you want to use a quantum

00:05:24,040 --> 00:05:29,260
processor if yes which hardware provider

00:05:26,740 --> 00:05:30,730
do you want to target or are you just

00:05:29,260 --> 00:05:33,880
going to use a simulator but in any case

00:05:30,730 --> 00:05:36,160
you need to compile the circuit if you

00:05:33,880 --> 00:05:38,140
look into the annealing framework you

00:05:36,160 --> 00:05:39,610
can do a similar diagram where you start

00:05:38,140 --> 00:05:41,110
with your problem definition but this

00:05:39,610 --> 00:05:43,000
time instead of picking a quantum

00:05:41,110 --> 00:05:46,180
algorithm that has already been done for

00:05:43,000 --> 00:05:48,550
you because annealing basically forces

00:05:46,180 --> 00:05:50,680
you to encode your problem in an icing

00:05:48,550 --> 00:05:52,060
type Hamiltonian and so you basically

00:05:50,680 --> 00:05:53,740
need to encode your problem in the

00:05:52,060 --> 00:05:56,680
parameters of this quadratic equation

00:05:53,740 --> 00:05:59,500
and then the next step is that the

00:05:56,680 --> 00:06:02,410
topology of your of this quadratic

00:05:59,500 --> 00:06:04,150
equation might not correspond to or very

00:06:02,410 --> 00:06:05,860
much we'll probably not correspond to

00:06:04,150 --> 00:06:07,630
the hardware graph so you need to do

00:06:05,860 --> 00:06:09,730
what we call minor graph embedding where

00:06:07,630 --> 00:06:11,860
you're trying to fit that problem onto

00:06:09,730 --> 00:06:13,780
the actual chip and then you can run it

00:06:11,860 --> 00:06:16,450
on the actual d-wave quantum annealer or

00:06:13,780 --> 00:06:19,120
use a classical server to try to find

00:06:16,450 --> 00:06:21,520
the solutions and what I find

00:06:19,120 --> 00:06:23,770
interesting to point out is that if you

00:06:21,520 --> 00:06:24,820
put these two flowcharts next to each

00:06:23,770 --> 00:06:27,310
other you can actually see that

00:06:24,820 --> 00:06:29,050
basically this encoding in an icing type

00:06:27,310 --> 00:06:31,420
Hamiltonian is equivalent to picking a

00:06:29,050 --> 00:06:33,490
quantum algorithm and writing down a

00:06:31,420 --> 00:06:35,530
quantum circuit and the minor graph

00:06:33,490 --> 00:06:39,600
embedding can be pretty much seen as the

00:06:35,530 --> 00:06:39,600
compilation step in the annealing world

00:06:40,680 --> 00:06:46,060
so in terms of the the paper we looked

00:06:43,780 --> 00:06:48,610
at over 60 quantum software

00:06:46,060 --> 00:06:50,440
repositories and we needed to find a way

00:06:48,610 --> 00:06:52,810
of actually narrowing them down and and

00:06:50,440 --> 00:06:55,060
create some criteria and so we've

00:06:52,810 --> 00:06:58,390
selected 26 quantum software projects

00:06:55,060 --> 00:07:00,130
according to this decision tree and the

00:06:58,390 --> 00:07:01,450
main reason why we excluded projects is

00:07:00,130 --> 00:07:03,460
because they were either single

00:07:01,450 --> 00:07:05,800
contributed projects or projects that

00:07:03,460 --> 00:07:09,190
didn't have any issues or pull requests

00:07:05,800 --> 00:07:11,470
which we considered as no traction so we

00:07:09,190 --> 00:07:12,940
basically focus on these 26 and the

00:07:11,470 --> 00:07:14,680
first thing was that we looked at the

00:07:12,940 --> 00:07:17,140
licenses what is out there and what are

00:07:14,680 --> 00:07:19,200
people using and we found that 90% of

00:07:17,140 --> 00:07:24,670
the projects used permissive licenses

00:07:19,200 --> 00:07:26,200
and 65% of those used Apache - and there

00:07:24,670 --> 00:07:27,670
was only two projects that actually used

00:07:26,200 --> 00:07:28,870
copyleft licenses and there was

00:07:27,670 --> 00:07:31,120
something that we found kind of

00:07:28,870 --> 00:07:33,400
surprising and it really shows that the

00:07:31,120 --> 00:07:38,920
community is open with respect to the

00:07:33,400 --> 00:07:40,480
commercial use of their software the

00:07:38,920 --> 00:07:43,330
next thing was that we we looked at

00:07:40,480 --> 00:07:46,660
documentation and we basically did a

00:07:43,330 --> 00:07:48,370
quality analysis of various elements

00:07:46,660 --> 00:07:49,810
that we consider important for

00:07:48,370 --> 00:07:52,090
documentation so we looked at the source

00:07:49,810 --> 00:07:54,760
code documentation at the quality of the

00:07:52,090 --> 00:07:56,470
readme files change locks the user

00:07:54,760 --> 00:07:58,950
documentation which we define as like a

00:07:56,470 --> 00:08:01,060
little bit more in-depth per feature

00:07:58,950 --> 00:08:03,280
documentation and then also tutorials

00:08:01,060 --> 00:08:04,960
that really take you with a specific

00:08:03,280 --> 00:08:08,320
problem all the way through the

00:08:04,960 --> 00:08:10,450
implementation and what we found there

00:08:08,320 --> 00:08:12,910
is that most projects tend to have

00:08:10,450 --> 00:08:14,950
really good source documentation and and

00:08:12,910 --> 00:08:16,390
readme files but there is really

00:08:14,950 --> 00:08:18,720
shortcomings when it comes to change

00:08:16,390 --> 00:08:21,040
locks and extensive per user feature

00:08:18,720 --> 00:08:22,360
documentation as well as there's very

00:08:21,040 --> 00:08:24,340
little tutorials which makes it really

00:08:22,360 --> 00:08:25,870
hard as a newcomer to actually get

00:08:24,340 --> 00:08:28,720
started and understand how to actually

00:08:25,870 --> 00:08:30,670
even start the pipeline and and start

00:08:28,720 --> 00:08:32,970
building so there's definitely a lot of

00:08:30,670 --> 00:08:35,290
room for improvement right there and

00:08:32,970 --> 00:08:38,710
then we looked at the actual code

00:08:35,290 --> 00:08:41,910
quality within those projects as well as

00:08:38,710 --> 00:08:44,920
at the testing components of them and

00:08:41,910 --> 00:08:46,750
we're quite happy to see 23 out of 26

00:08:44,920 --> 00:08:52,270
projects actually used automated test

00:08:46,750 --> 00:08:55,720
suits and the average code coverage was

00:08:52,270 --> 00:08:57,880
found to be 75% just quite good and the

00:08:55,720 --> 00:08:59,230
median was 87 which is actually above

00:08:57,880 --> 00:09:01,150
industry standards so

00:08:59,230 --> 00:09:03,610
we're pretty surprised by that and and

00:09:01,150 --> 00:09:05,200
that's great when it comes to the

00:09:03,610 --> 00:09:07,210
community we also wanted to see how do

00:09:05,200 --> 00:09:11,290
they actually interact with with the

00:09:07,210 --> 00:09:13,270
wider community of developers and I'm

00:09:11,290 --> 00:09:14,920
sure everyone would agree that getting a

00:09:13,270 --> 00:09:16,150
fast response on your issue or pull

00:09:14,920 --> 00:09:17,470
requests is something that is really

00:09:16,150 --> 00:09:18,820
crucial because otherwise you're

00:09:17,470 --> 00:09:21,610
probably going to ditch that project and

00:09:18,820 --> 00:09:23,020
not continue developing on top of it so

00:09:21,610 --> 00:09:25,720
we considered every issue and pull

00:09:23,020 --> 00:09:28,270
request that wasn't responded to within

00:09:25,720 --> 00:09:30,550
30 days as ignored and we defined this

00:09:28,270 --> 00:09:32,620
attention rate which is basically one-

00:09:30,550 --> 00:09:35,680
diffraction of unanswered over total

00:09:32,620 --> 00:09:37,800
issues and pull requests and i don't

00:09:35,680 --> 00:09:39,730
want to dive into the nitty-gritty

00:09:37,800 --> 00:09:42,250
numerix but if you're interested in

00:09:39,730 --> 00:09:44,710
actually seeing the results they're both

00:09:42,250 --> 00:09:47,860
under cures F website as well as in the

00:09:44,710 --> 00:09:49,480
paper but what we found surprising is

00:09:47,860 --> 00:09:52,030
that the commercial 'back projects

00:09:49,480 --> 00:09:53,650
weren't better at replying to issues and

00:09:52,030 --> 00:09:55,600
pull requests than the community driven

00:09:53,650 --> 00:09:57,100
efforts which doesn't mean that any of

00:09:55,600 --> 00:09:59,110
them is worth it's just surprising that

00:09:57,100 --> 00:10:02,110
actually the community projects seem to

00:09:59,110 --> 00:10:04,950
be pretty good as well as handling the

00:10:02,110 --> 00:10:07,870
the influx of issues and pull requests

00:10:04,950 --> 00:10:09,970
so then github has a community profile

00:10:07,870 --> 00:10:12,700
which is basically seven things that you

00:10:09,970 --> 00:10:14,920
should have in your project there was

00:10:12,700 --> 00:10:16,510
only four out of these 26 projects that

00:10:14,920 --> 00:10:19,360
actually scored seven out of seven on

00:10:16,510 --> 00:10:21,310
this metric and we found that 10 out of

00:10:19,360 --> 00:10:22,510
the 26 project didn't actually review

00:10:21,310 --> 00:10:24,730
the code from their own core

00:10:22,510 --> 00:10:26,320
contributors which we thought is it's

00:10:24,730 --> 00:10:28,120
kind of critical because it kind of

00:10:26,320 --> 00:10:30,010
creates like a two-class society so you

00:10:28,120 --> 00:10:33,610
really want to make sure that all of the

00:10:30,010 --> 00:10:35,770
code is being reviewed as well as there

00:10:33,610 --> 00:10:38,440
is a lot of a lot of the hardware

00:10:35,770 --> 00:10:40,480
providers and and projects have user

00:10:38,440 --> 00:10:42,340
centric discussion channels but there's

00:10:40,480 --> 00:10:43,570
little developer centric discussion

00:10:42,340 --> 00:10:46,030
channels where you can actually get

00:10:43,570 --> 00:10:47,800
involved in kind of planning the future

00:10:46,030 --> 00:10:49,810
of the projects as well as kind of

00:10:47,800 --> 00:10:51,760
having a visible public roadmap like

00:10:49,810 --> 00:10:54,940
there was a question earlier on about

00:10:51,760 --> 00:10:56,740
kind of or you were developing something

00:10:54,940 --> 00:10:58,390
and then suddenly like the API broke and

00:10:56,740 --> 00:10:59,560
stuff like that so it would be great to

00:10:58,390 --> 00:11:01,150
actually have a roadmap where these

00:10:59,560 --> 00:11:03,400
things are clearly communicated such

00:11:01,150 --> 00:11:05,080
that developers know exactly how they

00:11:03,400 --> 00:11:07,300
fit in and and how they can do

00:11:05,080 --> 00:11:11,370
meaningful contributions that that are

00:11:07,300 --> 00:11:14,279
actually going to be included and used

00:11:11,370 --> 00:11:15,690
and so the issue that became obvious

00:11:14,279 --> 00:11:18,029
quite quickly is that this is going to

00:11:15,690 --> 00:11:20,279
get outdated it's basically just a

00:11:18,029 --> 00:11:22,650
snapshot in time and so what we did is

00:11:20,279 --> 00:11:24,630
that we automated this evaluation

00:11:22,650 --> 00:11:28,170
process and and publish the results

00:11:24,630 --> 00:11:30,210
online on the QSF website and so the

00:11:28,170 --> 00:11:32,070
idea is to have like a monthly run and

00:11:30,210 --> 00:11:34,110
and give people the chance to actually

00:11:32,070 --> 00:11:39,000
improve and and foster these best

00:11:34,110 --> 00:11:41,279
practices so one thing that that I tend

00:11:39,000 --> 00:11:43,080
to say and I'm happy if people disagree

00:11:41,279 --> 00:11:45,510
but I think physicists are great with

00:11:43,080 --> 00:11:48,029
equations but they generally are not

00:11:45,510 --> 00:11:50,670
that great with code like I myself I

00:11:48,029 --> 00:11:52,800
never learned programming properly at

00:11:50,670 --> 00:11:54,990
university I just wrote scripts and then

00:11:52,800 --> 00:11:57,540
once I got to know Tomas he actually

00:11:54,990 --> 00:11:59,339
showed me how to write proper code so I

00:11:57,540 --> 00:12:01,080
think there is definitely a place for

00:11:59,339 --> 00:12:03,150
skilled software engineers to come in

00:12:01,080 --> 00:12:06,060
and actually help us build these tools

00:12:03,150 --> 00:12:07,710
for the future of quantum computing and

00:12:06,060 --> 00:12:09,540
as it was discussed in the panel like

00:12:07,710 --> 00:12:11,970
there's a lot of classical components

00:12:09,540 --> 00:12:13,860
even where you could help out that don't

00:12:11,970 --> 00:12:16,800
necessarily require the understanding of

00:12:13,860 --> 00:12:18,830
quantum mechanics but I do want to make

00:12:16,800 --> 00:12:22,800
a point because there's a lot of memes

00:12:18,830 --> 00:12:25,170
about how hard it is to learn quantum

00:12:22,800 --> 00:12:28,020
mechanics and and there's many many more

00:12:25,170 --> 00:12:29,910
than that and I kind of want to pose the

00:12:28,020 --> 00:12:31,650
question is it really that hard to learn

00:12:29,910 --> 00:12:32,820
quantum mechanics if you guys want to

00:12:31,650 --> 00:12:35,640
get involved and actually start

00:12:32,820 --> 00:12:38,610
programming on these tools and I

00:12:35,640 --> 00:12:40,380
personally think it's it's not really a

00:12:38,610 --> 00:12:41,880
binary answer I do think there's

00:12:40,380 --> 00:12:42,960
elements of quantum mechanics that are

00:12:41,880 --> 00:12:45,030
hard to understand but you don't

00:12:42,960 --> 00:12:49,170
necessarily need to learn them in order

00:12:45,030 --> 00:12:51,360
to program on a quantum computer and in

00:12:49,170 --> 00:12:54,589
order to to prove that point we're going

00:12:51,360 --> 00:12:57,060
to host a quantum workshop tomorrow

00:12:54,589 --> 00:12:59,250
which you can sign up on this link and

00:12:57,060 --> 00:13:01,230
there's also going to be a lot more

00:12:59,250 --> 00:13:02,790
talks about like individual projects and

00:13:01,230 --> 00:13:04,950
Tamar's laughing because this one of our

00:13:02,790 --> 00:13:10,470
collaborators and I found that on Google

00:13:04,950 --> 00:13:11,700
I didn't make that meme so then I I want

00:13:10,470 --> 00:13:13,560
to make a point that came up earlier in

00:13:11,700 --> 00:13:15,029
the panelist was that each of the

00:13:13,560 --> 00:13:17,820
hardware providers have their own

00:13:15,029 --> 00:13:19,800
open-source software package and that's

00:13:17,820 --> 00:13:23,580
Xanadu Righetti IBM in Google right now

00:13:19,800 --> 00:13:25,390
but then Microsoft is working on

00:13:23,580 --> 00:13:27,220
developing quantum hardware and they

00:13:25,390 --> 00:13:29,890
also have a package called Q sharp

00:13:27,220 --> 00:13:32,350
intel is developing a QP you there's

00:13:29,890 --> 00:13:34,300
lots more startups popping out of the

00:13:32,350 --> 00:13:36,610
ground right now that will probably also

00:13:34,300 --> 00:13:38,200
develop all their own packages and the

00:13:36,610 --> 00:13:40,720
question is that as a software engineer

00:13:38,200 --> 00:13:42,580
it's extremely painful to actually write

00:13:40,720 --> 00:13:44,170
code for each individual framework so

00:13:42,580 --> 00:13:46,240
the question is like is there some way

00:13:44,170 --> 00:13:48,430
of like pulling them together and and

00:13:46,240 --> 00:13:51,100
potentially standardized and there's

00:13:48,430 --> 00:13:53,050
some unifying frameworks there's X ACC

00:13:51,100 --> 00:13:54,820
and there's project Q and what they're

00:13:53,050 --> 00:13:56,830
trying to do is to basically go one

00:13:54,820 --> 00:13:58,780
level higher and and be able to interact

00:13:56,830 --> 00:14:01,600
with all of the different keeping you

00:13:58,780 --> 00:14:03,700
backends so for example X ACC supports

00:14:01,600 --> 00:14:07,270
d-wave as well as IBM and Righetti and

00:14:03,700 --> 00:14:09,010
has a high performance simulator so it's

00:14:07,270 --> 00:14:10,510
those kind of projects that we also want

00:14:09,010 --> 00:14:11,770
to push forward because they're gonna

00:14:10,510 --> 00:14:16,060
it's going to make the life of a

00:14:11,770 --> 00:14:18,100
software engineer much easier so we

00:14:16,060 --> 00:14:20,290
talked about it the reason why this room

00:14:18,100 --> 00:14:21,960
has happened is because of this launch

00:14:20,290 --> 00:14:24,130
of the quantum of the source foundation

00:14:21,960 --> 00:14:26,250
you're welcome to check out the website

00:14:24,130 --> 00:14:28,210
there's a lot of information also for

00:14:26,250 --> 00:14:30,100
that's probably not targeted to this

00:14:28,210 --> 00:14:31,750
room but physicists when I gave a talk

00:14:30,100 --> 00:14:33,400
at a quantum conference the other day

00:14:31,750 --> 00:14:34,870
they were really surprised that you have

00:14:33,400 --> 00:14:38,110
to put a license on your code on github

00:14:34,870 --> 00:14:39,850
and so yeah honestly and that's like we

00:14:38,110 --> 00:14:41,980
basically kept try to make a website

00:14:39,850 --> 00:14:44,080
where people can get informed about what

00:14:41,980 --> 00:14:45,760
does it mean to publish called open

00:14:44,080 --> 00:14:48,070
source as well as why would you do it

00:14:45,760 --> 00:14:50,200
and the list of projects as well as a

00:14:48,070 --> 00:14:53,710
big list of learning resources can be

00:14:50,200 --> 00:14:54,940
found on that page and and really the

00:14:53,710 --> 00:14:57,040
goal is kind of supporting the

00:14:54,940 --> 00:14:59,710
development and standardization of open

00:14:57,040 --> 00:15:01,780
tools for quantum computing and it's

00:14:59,710 --> 00:15:03,310
really meant to be a community effort so

00:15:01,780 --> 00:15:05,230
we don't want to like say this is how it

00:15:03,310 --> 00:15:06,280
should be done it's is really involving

00:15:05,230 --> 00:15:10,540
the community and we're always looking

00:15:06,280 --> 00:15:12,780
for advocates advisers advice just by

00:15:10,540 --> 00:15:16,810
itself and contributors and partners as

00:15:12,780 --> 00:15:20,140
well as funding so in terms of

00:15:16,810 --> 00:15:22,540
conclusions with these Nia intermediate

00:15:20,140 --> 00:15:25,180
scale quantum devices so-called misc

00:15:22,540 --> 00:15:27,160
devices quantum software engineering has

00:15:25,180 --> 00:15:28,990
actually become a thing and there's a

00:15:27,160 --> 00:15:31,720
lot of projects out there and they're

00:15:28,990 --> 00:15:33,040
all accessible and github but the

00:15:31,720 --> 00:15:35,050
problem is that what we found is that

00:15:33,040 --> 00:15:37,089
they lack proper documentation and it is

00:15:35,050 --> 00:15:39,370
it tends to be difficult that if you're

00:15:37,089 --> 00:15:41,230
down in the weeds to actually like

00:15:39,370 --> 00:15:42,999
assume this like neutral role of the

00:15:41,230 --> 00:15:44,860
beginner and write good documentation

00:15:42,999 --> 00:15:46,389
and that's why we think people can

00:15:44,860 --> 00:15:49,029
really contribute meaningful things

00:15:46,389 --> 00:15:50,559
there and there's a lack of these public

00:15:49,029 --> 00:15:52,990
development roadmaps where people can

00:15:50,559 --> 00:15:55,480
really understand how they fit in as

00:15:52,990 --> 00:15:57,370
well as in case someone is interested

00:15:55,480 --> 00:16:00,309
there is a shortage of quantum compiler

00:15:57,370 --> 00:16:02,230
projects especially like I mean this I

00:16:00,309 --> 00:16:04,120
guess a lot of quantum compiler projects

00:16:02,230 --> 00:16:06,790
within the hardware companies but some

00:16:04,120 --> 00:16:09,550
of them are not open sourced so there's

00:16:06,790 --> 00:16:13,389
definitely room to to work on things in

00:16:09,550 --> 00:16:15,100
that area and so overly there is a lack

00:16:13,389 --> 00:16:17,379
of standardization and we think that

00:16:15,100 --> 00:16:18,910
everyone would kind of profit from from

00:16:17,379 --> 00:16:20,740
building like these transpiling tools

00:16:18,910 --> 00:16:22,809
and things that just help making the

00:16:20,740 --> 00:16:26,230
average software developers life easier

00:16:22,809 --> 00:16:28,720
in that space so now I want to conclude

00:16:26,230 --> 00:16:30,639
that there's not going to be a deaf room

00:16:28,720 --> 00:16:33,430
tomorrow but we're going to have I guess

00:16:30,639 --> 00:16:35,709
it's called but it's a workshop so

00:16:33,430 --> 00:16:38,680
there's more talks about community build

00:16:35,709 --> 00:16:39,879
quantum software projects there's going

00:16:38,680 --> 00:16:41,920
to be some talk about actual

00:16:39,879 --> 00:16:43,629
applications and projects that kind of

00:16:41,920 --> 00:16:46,209
implement quantum machine learning

00:16:43,629 --> 00:16:47,949
things and we're gonna have like a

00:16:46,209 --> 00:16:49,389
hackathon type of thing where you can

00:16:47,949 --> 00:16:51,429
actually start working with some of the

00:16:49,389 --> 00:16:53,259
people that run these projects and help

00:16:51,429 --> 00:16:55,629
them fix some issues or help them

00:16:53,259 --> 00:16:58,449
improve the documentation and so on you

00:16:55,629 --> 00:17:00,550
can find the schedule on that website or

00:16:58,449 --> 00:17:05,020
somewhere on the FOSDEM website I just I

00:17:00,550 --> 00:17:06,970
couldn't find it so thanks a lot for

00:17:05,020 --> 00:17:09,010
listening and I hope to see you tomorrow

00:17:06,970 --> 00:17:11,939
and you can actually get started in

00:17:09,010 --> 00:17:11,939
programming a quantum device

00:17:12,680 --> 00:17:14,740

YouTube URL: https://www.youtube.com/watch?v=W8iXl6aowm0


