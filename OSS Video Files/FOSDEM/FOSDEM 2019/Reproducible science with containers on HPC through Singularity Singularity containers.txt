Title: Reproducible science with containers on HPC through Singularity Singularity containers
Publication date: 2019-02-08
Playlist: FOSDEM 2019
Description: 
	by Eduardo Arango

At: FOSDEM 2019
https://video.fosdem.org/2019/UA2.118/containers_hpc_singularity.webm


One of the biggest problems in scientific HPC is ensuring that results are reproducible. That is, the code a scientist runs locally must be able to run identically on any computational resource. Until recently, the job of ensuring that fell to system administrators who needed to manage a complex web of tools and dependencies on those resources. However, with the introduction of HPC containers via Singularity, the ability to mobilize the compute environment has never been easier. Singularity allows anybody to run their own containers on HPC, ushering in a new era of computational mobility, validity, and reproducibility. 

Singularity is the most widely used container solution in high-performance computing (HPC). Enterprise users interested in AI, Deep Learning, compute drive analytics, and IOT are increasingly demanding HPC-like resources. Singularity has many features that make it the preferred container solution for this new type of “Enterprise Performance Computing” (EPC) workload. Instead of a layered filesystem, a Singularity container is stored in a single file. This simplifies the container management lifecycle and facilitates features such as image signing and encryption to produce trusted containers. At runtime, Singularity blurs the lines between the container and the host system allowing users to read and write persistent data and leverage hardware like GPUs and Infiniband with ease. The Singularity security model is also unique among container solutions. Users build containers on resources they control or using a service like the Sylabs Remote Build Service. Then they move their containers to a production environment where they may or may not have administrative access and the Linux kernel enforces privileges as it does with any other application. These features make Singularity a simple, secure container solution perfect for HPC and EPC workloads. One of the biggest problems in scientific HPC is ensuring that results are reproducible. That is, the code a scientist runs locally must be able to run identically on any computational resource. Until recently, the job of ensuring that fell to system administrators who needed to manage a complex web of tools and dependencies on those resources. However, with the introduction of HPC containers via Singularity, the ability to mobilize the compute environment has never been easier. Singularity allows anybody to run their own containers on HPC, ushering in a new era of computational mobility, validity, and reproducibility. 

Singularity is the most widely used container solution in high-performance computing (HPC). Enterprise users interested in AI, Deep Learning, compute drive analytics, and IOT are increasingly demanding HPC-like resources. Singularity has many features that make it the preferred container solution for this new type of “Enterprise Performance Computing” (EPC) workload. Instead of a layered filesystem, a Singularity container is stored in a single file. This simplifies the container management lifecycle and facilitates features such as image signing and encryption to produce trusted containers. At runtime, Singularity blurs the lines between the container and the host system allowing users to read and write persistent data and leverage hardware like GPUs and Infiniband with ease. The Singularity security model is also unique among container solutions. Users build containers on resources they control or using a service like Singularity Hub. Then they move their containers to a production environment where they may or may not have administrative access and the Linux kernel enforces privileges as it does with any other application. These features make Singularity a simple, secure container solution perfect for HPC and EPC workloads. 

Singularity blocks privilege escalation within the container so if a user wants to be root inside the container, it must be root outside the container. This usage paradigm mitigates many of the security concerns that exists with containers on multi-tenant shared resources. You can directly call programs inside the container from outside the container fully incorporating pipes, standard IO, file system access, X11, and MPI.
Keywords HPC, Linux Containers, Singularity, Docker, LXC, portability 

References
Kurtzer, G. M. (2016). Singularity 2.1.2 - Linux application and environment containers for science. Zenodo. http://doi.org/10.5281/zenodo.60736
LinuxContainers.org Infrastructure for container projects. Project sponsored by Canonical Ltd. https://linuxcontainers.org/ 

Room: UA2.118 (Henriot)
Scheduled start: 2019-02-03 11:45:00+01
Captions: 
	00:00:04,920 --> 00:00:11,110
morning my name is Eduardo again I work

00:00:08,109 --> 00:00:14,320
for Scilab and I'm here to give a quick

00:00:11,110 --> 00:00:17,619
update on what nuance singularity since

00:00:14,320 --> 00:00:20,680
last year so we had microbe our last

00:00:17,619 --> 00:00:24,310
year here at Folsom at the HPC track so

00:00:20,680 --> 00:00:28,780
I'm here to talk more about what changed

00:00:24,310 --> 00:00:31,480
she done since that day so a quick brief

00:00:28,780 --> 00:00:33,940
history so for the people that doesn't

00:00:31,480 --> 00:00:37,179
know about celerity it was invented by

00:00:33,940 --> 00:00:42,699
Greg cursor in the National Laboratories

00:00:37,179 --> 00:00:46,120
a back in 2015 in October around

00:00:42,699 --> 00:00:48,039
something about October people asked him

00:00:46,120 --> 00:00:50,079
really how can they take their own

00:00:48,039 --> 00:00:53,199
environment from their desktops their

00:00:50,079 --> 00:00:57,010
workstations today a infrastructure

00:00:53,199 --> 00:01:01,449
cluster the first really released like

00:00:57,010 --> 00:01:05,620
the 1.0 was some point around April 2016

00:01:01,449 --> 00:01:08,470
and thanks to user feedback and open

00:01:05,620 --> 00:01:09,909
source contribution and that kind of

00:01:08,470 --> 00:01:13,360
when I started to contribute to

00:01:09,909 --> 00:01:18,549
singularity also it got into a 2.0 in

00:01:13,360 --> 00:01:21,100
June of 2016 but after that things are

00:01:18,549 --> 00:01:24,490
going pretty pretty fast and Greg

00:01:21,100 --> 00:01:28,289
founded sy labs last year in January and

00:01:24,490 --> 00:01:32,170
we are now around 28 engineers and

00:01:28,289 --> 00:01:34,479
working a day by day making singularity

00:01:32,170 --> 00:01:37,810
better and trying to get user feedback

00:01:34,479 --> 00:01:41,859
on how can singularity help them do

00:01:37,810 --> 00:01:45,549
their work faster and this talk is going

00:01:41,859 --> 00:01:48,549
to be focused around all release 3.0

00:01:45,549 --> 00:01:51,249
that was released in October last year

00:01:48,549 --> 00:01:54,609
and comes with a lot of new features

00:01:51,249 --> 00:01:57,249
modest ability for users and a new

00:01:54,609 --> 00:02:01,090
language update so open source

00:01:57,249 --> 00:02:07,990
contributions can jump in easily than it

00:02:01,090 --> 00:02:10,300
was before 3.0 so a quick thank you to

00:02:07,990 --> 00:02:14,230
all the open source supporters for

00:02:10,300 --> 00:02:17,530
singularity last year we won three X PC

00:02:14,230 --> 00:02:19,900
wire users and a little Choice Award a

00:02:17,530 --> 00:02:23,320
supercomputing and we know that is

00:02:19,900 --> 00:02:25,360
thanks to all you guys so really thanks

00:02:23,320 --> 00:02:28,450
for the support and this is all the

00:02:25,360 --> 00:02:30,340
people and institutions right now using

00:02:28,450 --> 00:02:33,250
singularity on production systems and

00:02:30,340 --> 00:02:36,340
give him back contributions to the open

00:02:33,250 --> 00:02:40,030
source singularity so once again thanks

00:02:36,340 --> 00:02:43,360
to you for this award

00:02:40,030 --> 00:02:47,290
so this is a G R update on singularity

00:02:43,360 --> 00:02:49,510
and the Nexus light is going to hit half

00:02:47,290 --> 00:02:52,060
or more of half of the people here in

00:02:49,510 --> 00:02:55,720
his go so

00:02:52,060 --> 00:02:59,500
singularity last year was monster that

00:02:55,720 --> 00:03:02,890
was like bash Python C and they kind of

00:02:59,500 --> 00:03:05,230
talked each other it was really hard for

00:03:02,890 --> 00:03:08,020
a new open source computer to jump in

00:03:05,230 --> 00:03:10,330
and start contributing to singularity

00:03:08,020 --> 00:03:12,820
from the users point of view from the

00:03:10,330 --> 00:03:15,910
stability point of view Python was

00:03:12,820 --> 00:03:18,040
giving us a lot of dependency issues

00:03:15,910 --> 00:03:21,430
when trying to mob singularity in

00:03:18,040 --> 00:03:23,470
between systems and also the third

00:03:21,430 --> 00:03:26,020
reason was people were asking to

00:03:23,470 --> 00:03:30,160
integrate a singularity with all the

00:03:26,020 --> 00:03:31,870
cloud tools out there that HPC people

00:03:30,160 --> 00:03:34,420
are really trying to leverage things

00:03:31,870 --> 00:03:36,970
like cure natives things like a cloud

00:03:34,420 --> 00:03:40,440
native tools so in order to interact

00:03:36,970 --> 00:03:44,230
easier and more native with those tools

00:03:40,440 --> 00:03:46,810
we'll start to consider moving to go to

00:03:44,230 --> 00:03:49,930
the point on which on some point around

00:03:46,810 --> 00:03:53,620
February last year we started a whole

00:03:49,930 --> 00:03:58,450
reward of the code and now singularity

00:03:53,620 --> 00:04:02,530
is Python free it's a single project so

00:03:58,450 --> 00:04:05,170
it's mostly go code we are only using C

00:04:02,530 --> 00:04:07,540
code for the security base like doing

00:04:05,170 --> 00:04:10,060
the system calls and interactive with

00:04:07,540 --> 00:04:15,580
the kernel but all the rest is mating

00:04:10,060 --> 00:04:17,889
goal so I always try to get new people

00:04:15,580 --> 00:04:18,940
into singularity and I think go it's a

00:04:17,889 --> 00:04:22,390
language for new

00:04:18,940 --> 00:04:25,420
people there is really easy to just jump

00:04:22,390 --> 00:04:27,550
in grid some lines of code understand

00:04:25,420 --> 00:04:31,300
the language of course and start helping

00:04:27,550 --> 00:04:35,230
with open source contributions what do

00:04:31,300 --> 00:04:38,350
we like a a part of the integration with

00:04:35,230 --> 00:04:42,070
the cloud native to so there is a

00:04:38,350 --> 00:04:44,560
concurrency model of go as a developer

00:04:42,070 --> 00:04:47,980
is really easy to track threads and is

00:04:44,560 --> 00:04:52,270
really easy to know what's happening

00:04:47,980 --> 00:04:54,070
with your code at the wrong time and the

00:04:52,270 --> 00:04:55,000
last line I'm going to show you in an

00:04:54,070 --> 00:04:59,250
exit slide

00:04:55,000 --> 00:05:02,620
what is CN CN is the container

00:04:59,250 --> 00:05:05,380
networking interface so right a with the

00:05:02,620 --> 00:05:07,600
3.0 version of singularity you can start

00:05:05,380 --> 00:05:13,180
doing poor mapping and network with to

00:05:07,600 --> 00:05:15,580
allocation we faced some challenges so

00:05:13,180 --> 00:05:16,650
if you are a following the singularity

00:05:15,580 --> 00:05:20,500
open source

00:05:16,650 --> 00:05:23,770
it was quite of a year moving a code

00:05:20,500 --> 00:05:29,200
from bash and python and taking that to

00:05:23,770 --> 00:05:31,810
see so the first main point was using

00:05:29,200 --> 00:05:35,590
civil interface I know in the gold world

00:05:31,810 --> 00:05:38,350
a single is still opinionated but is

00:05:35,590 --> 00:05:41,980
really needed when you're trying to do a

00:05:38,350 --> 00:05:43,900
security bit and system calls and you

00:05:41,980 --> 00:05:46,540
needed to control them from a see point

00:05:43,900 --> 00:05:48,940
of view because all the C colors here

00:05:46,540 --> 00:05:51,850
know that C gives you the entire control

00:05:48,940 --> 00:05:55,690
of the system we are following the gold

00:05:51,850 --> 00:05:57,730
standards on packaging so if you're a

00:05:55,690 --> 00:06:00,700
regular go developer that doesn't know

00:05:57,730 --> 00:06:03,550
anything about container file systems or

00:06:00,700 --> 00:06:06,280
like the underground of how singularity

00:06:03,550 --> 00:06:08,770
works when you jump in into our code

00:06:06,280 --> 00:06:11,950
base you are going to feel familiar in a

00:06:08,770 --> 00:06:14,770
go project we are using bender in so

00:06:11,950 --> 00:06:17,530
this third line is when we say we are

00:06:14,770 --> 00:06:21,669
Python free because right now if you do

00:06:17,530 --> 00:06:24,669
a clean get clone you can start doing

00:06:21,669 --> 00:06:27,310
make making stuff without bothering of

00:06:24,669 --> 00:06:30,640
having all the Python dependencies and

00:06:27,310 --> 00:06:32,849
if you have Python 2 or python 3 and the

00:06:30,640 --> 00:06:35,819
failure that we are we

00:06:32,849 --> 00:06:38,039
having with some users already in a new

00:06:35,819 --> 00:06:40,649
version of Python trying to compile

00:06:38,039 --> 00:06:46,800
singularity some point around two years

00:06:40,649 --> 00:06:49,229
from now and so this is really nice now

00:06:46,800 --> 00:06:50,990
that you can just do a clean git clone

00:06:49,229 --> 00:06:53,399
and start building singularity because

00:06:50,990 --> 00:06:55,860
everything the bender in folder is

00:06:53,399 --> 00:06:59,939
there's all the dependencies are already

00:06:55,860 --> 00:07:03,029
in the repo a package in building a

00:06:59,939 --> 00:07:07,439
single project that complex a

00:07:03,029 --> 00:07:09,839
singularity took us a to overthink how

00:07:07,439 --> 00:07:13,379
altitudes work because outer tools is

00:07:09,839 --> 00:07:15,899
too complicated for things too much

00:07:13,379 --> 00:07:18,809
complicated but not as complicated as a

00:07:15,899 --> 00:07:22,409
go project go is kind of easy to build

00:07:18,809 --> 00:07:28,050
so one of the engineers design make it

00:07:22,409 --> 00:07:30,539
so if home a tool for building RPM and

00:07:28,050 --> 00:07:33,569
their packages the death is still under

00:07:30,539 --> 00:07:35,669
work but you can right now job into the

00:07:33,569 --> 00:07:37,889
singularity project and start building

00:07:35,669 --> 00:07:43,379
your RPM and distributing the RPM

00:07:37,889 --> 00:07:47,729
package differences that we are already

00:07:43,379 --> 00:07:51,360
seeing against pattern is we have a lot

00:07:47,729 --> 00:07:53,939
of api's and ecosystems out there that

00:07:51,360 --> 00:07:58,889
we can start leveraging out of the box

00:07:53,939 --> 00:08:01,099
so one of the main releases this year is

00:07:58,889 --> 00:08:03,749
that singularity right now can interact

00:08:01,099 --> 00:08:06,839
with to an Aries so if you go to the

00:08:03,749 --> 00:08:09,329
scilab agate group you can see a

00:08:06,839 --> 00:08:12,059
co-write report and that's your repo is

00:08:09,329 --> 00:08:14,699
really how similar detect can integrate

00:08:12,059 --> 00:08:18,179
with cure natives so thanks to go

00:08:14,699 --> 00:08:20,339
because it gave us just the native API

00:08:18,179 --> 00:08:24,029
stroke Canaries in which I start talking

00:08:20,339 --> 00:08:27,740
to to analysis go test so I'm part of

00:08:24,029 --> 00:08:32,849
the QA a team of singularity and this is

00:08:27,740 --> 00:08:35,490
really nice how just and we were talking

00:08:32,849 --> 00:08:37,949
about tests and doing just bash tests we

00:08:35,490 --> 00:08:40,500
are moving our simple batch tests from

00:08:37,949 --> 00:08:42,990
the two point in X version into a more

00:08:40,500 --> 00:08:43,880
complex in a more robust way of testing

00:08:42,990 --> 00:08:46,280
singularity

00:08:43,880 --> 00:08:49,070
so if you see singularity right now on

00:08:46,280 --> 00:08:51,320
the test portion we are doing unit

00:08:49,070 --> 00:08:53,300
testing and integration testing things

00:08:51,320 --> 00:08:56,150
that were not happening in the 2.0

00:08:53,300 --> 00:08:58,100
version 2.0 version was only doing

00:08:56,150 --> 00:09:00,620
integration tested but not testing at

00:08:58,100 --> 00:09:04,220
the level of unit per unit testing so by

00:09:00,620 --> 00:09:06,680
leveraging go singularities more robust

00:09:04,220 --> 00:09:11,330
more robust project now because it has a

00:09:06,680 --> 00:09:13,820
bigger and robust test suite is very

00:09:11,330 --> 00:09:16,430
easy and productive as a developer to

00:09:13,820 --> 00:09:19,490
writing go so rather than trying to

00:09:16,430 --> 00:09:22,040
understand how the bash script races

00:09:19,490 --> 00:09:22,970
some environment variables Python rated

00:09:22,040 --> 00:09:25,570
and called

00:09:22,970 --> 00:09:28,100
C which was the two point next person

00:09:25,570 --> 00:09:30,320
right now you can just understand

00:09:28,100 --> 00:09:33,320
everything by reading the goal code so

00:09:30,320 --> 00:09:36,140
it's a single fire of goal versus trying

00:09:33,320 --> 00:09:37,970
to open a bash Python and C file and

00:09:36,140 --> 00:09:41,660
understand what's happening between

00:09:37,970 --> 00:09:45,170
those three files go is very opinionated

00:09:41,660 --> 00:09:47,150
I know I I told you that that that life

00:09:45,170 --> 00:09:49,550
was going to choke some of the people

00:09:47,150 --> 00:09:52,670
here but we are already seeing people

00:09:49,550 --> 00:09:56,650
trying the 3.0 version of singularity on

00:09:52,670 --> 00:10:02,630
production and it's very stable and I

00:09:56,650 --> 00:10:05,510
encourage you to try it one of the big

00:10:02,630 --> 00:10:08,810
changes are part of moving from Python C

00:10:05,510 --> 00:10:12,770
to grow is the image format so right now

00:10:08,810 --> 00:10:15,320
singularity is using its own image

00:10:12,770 --> 00:10:17,900
format called sieve similarity is much

00:10:15,320 --> 00:10:21,590
format versus two point X a people

00:10:17,900 --> 00:10:24,320
familiar with 2.8 it was the curious exe

00:10:21,590 --> 00:10:29,690
treat images or a squash affairs images

00:10:24,320 --> 00:10:33,560
so for 3.0 we are using a homemade image

00:10:29,690 --> 00:10:36,650
format and it that give us a lot of new

00:10:33,560 --> 00:10:40,610
features so you can store metadata in

00:10:36,650 --> 00:10:43,250
the headers so you can see it as a tar

00:10:40,610 --> 00:10:46,220
file but optimized for container usage

00:10:43,250 --> 00:10:49,760
so you can store your squash affairs

00:10:46,220 --> 00:10:54,440
image in the big object in the middle so

00:10:49,760 --> 00:10:56,330
it's a read-only image but rather than

00:10:54,440 --> 00:10:57,760
just storing the squash affair image you

00:10:56,330 --> 00:11:00,550
can also store metadata

00:10:57,760 --> 00:11:05,139
in the in the headers that you can see

00:11:00,550 --> 00:11:07,180
here and upcoming maybe in 3.2 or 3.3

00:11:05,139 --> 00:11:10,149
version of similarity we are going to

00:11:07,180 --> 00:11:13,420
have a writable overlaid that is going

00:11:10,149 --> 00:11:16,389
to be apart from the signature block so

00:11:13,420 --> 00:11:22,709
on the next slide I'm going to show that

00:11:16,389 --> 00:11:25,240
also in 3.0 you can sign with a PGP

00:11:22,709 --> 00:11:27,220
protocols your containers so you can

00:11:25,240 --> 00:11:29,620
sign your containers and saying your

00:11:27,220 --> 00:11:31,959
those keys and the container to a friend

00:11:29,620 --> 00:11:34,600
to a peer reviewer and they can check

00:11:31,959 --> 00:11:37,600
that the image is immutable and hasn't

00:11:34,600 --> 00:11:40,209
changed during the sending or maybe

00:11:37,600 --> 00:11:45,070
someone switched it for for another

00:11:40,209 --> 00:11:49,420
image on the way so we're very proud of

00:11:45,070 --> 00:11:53,139
our new image format and as a developer

00:11:49,420 --> 00:11:56,949
also if you're maybe like ECB or tools

00:11:53,139 --> 00:11:59,769
like that you can start leveraging the

00:11:56,949 --> 00:12:02,199
metadata in the headers to tell the

00:11:59,769 --> 00:12:06,760
scheduler to tell your run time how to

00:12:02,199 --> 00:12:09,699
use that Ruta first root filesystem that

00:12:06,760 --> 00:12:13,990
is in the middle in the squash effete

00:12:09,699 --> 00:12:18,040
format so what you entry point all on

00:12:13,990 --> 00:12:21,130
the cloud side so right now users can

00:12:18,040 --> 00:12:22,930
have a container library so this is a

00:12:21,130 --> 00:12:26,490
part from singularity hub for people

00:12:22,930 --> 00:12:28,870
familiar with similarity hub which is a

00:12:26,490 --> 00:12:34,000
supported and maintained by stamp for

00:12:28,870 --> 00:12:35,829
him I guess you are no benissa a stylist

00:12:34,000 --> 00:12:38,889
right now has a container library which

00:12:35,829 --> 00:12:41,769
is optimized for thief so you can only

00:12:38,889 --> 00:12:45,279
pull and push see if images because it's

00:12:41,769 --> 00:12:49,269
just for the 3.0 in Avadh you cannot

00:12:45,279 --> 00:12:52,480
push images from two point X versions we

00:12:49,269 --> 00:12:54,760
have our remote build service so a lot

00:12:52,480 --> 00:12:56,680
of users will say were telling us yes

00:12:54,760 --> 00:12:58,990
singular it is good I wanna jump into

00:12:56,680 --> 00:13:01,180
singularity by my university my

00:12:58,990 --> 00:13:03,699
institution doesn't allow me to have

00:13:01,180 --> 00:13:06,370
sudo even in my workstation in my laptop

00:13:03,699 --> 00:13:09,220
so how can I start building my own

00:13:06,370 --> 00:13:10,010
images and testing my own images before

00:13:09,220 --> 00:13:12,380
giving them to

00:13:10,010 --> 00:13:14,300
system admin so if you are running into

00:13:12,380 --> 00:13:17,180
this issue you can go into the Scilab

00:13:14,300 --> 00:13:18,890
webpage and give us your definition file

00:13:17,180 --> 00:13:24,440
and we are going to give you back your

00:13:18,890 --> 00:13:27,770
CF file without a suit on it and last

00:13:24,440 --> 00:13:31,010
but not least the keystore service so

00:13:27,770 --> 00:13:33,710
you can now sign your container as I was

00:13:31,010 --> 00:13:36,080
telling you but when you want to move

00:13:33,710 --> 00:13:39,080
those skills between hosts you can use

00:13:36,080 --> 00:13:43,070
the Scilab key store service for free

00:13:39,080 --> 00:13:46,160
and that way you can sign your container

00:13:43,070 --> 00:13:48,140
let's say your workstation your system

00:13:46,160 --> 00:13:50,660
admin about your kids and he is going to

00:13:48,140 --> 00:13:56,870
be able to verify that that container

00:13:50,660 --> 00:14:01,630
comes from XYZ user so I'm going to show

00:13:56,870 --> 00:14:04,990
it here how it looks so this is the

00:14:01,630 --> 00:14:09,410
Scilab webpage and you can see up there

00:14:04,990 --> 00:14:12,260
sorry I'm facing you this is the library

00:14:09,410 --> 00:14:13,940
the remote builder and the key store so

00:14:12,260 --> 00:14:16,900
this is how the library looks I am

00:14:13,940 --> 00:14:20,390
signing as Scilab said this is my login

00:14:16,900 --> 00:14:23,240
and and we have some statistics here

00:14:20,390 --> 00:14:26,360
from different users and how are they

00:14:23,240 --> 00:14:29,000
pulling and pushing their containers and

00:14:26,360 --> 00:14:31,190
this is the remote builder so I was

00:14:29,000 --> 00:14:33,710
telling you you can drag and drop your

00:14:31,190 --> 00:14:35,810
definition file into this black into

00:14:33,710 --> 00:14:38,540
this white box or you can install right

00:14:35,810 --> 00:14:40,730
in your definition file here and you

00:14:38,540 --> 00:14:44,930
build it and we are going to build it

00:14:40,730 --> 00:14:47,780
for you here with a light output from

00:14:44,930 --> 00:14:50,300
the cloud infrastructure where this is

00:14:47,780 --> 00:14:53,330
happening and after all this we're going

00:14:50,300 --> 00:14:54,940
to give users the direct download so you

00:14:53,330 --> 00:14:58,010
can just click and download your

00:14:54,940 --> 00:14:59,840
singularity image and start using it or

00:14:58,010 --> 00:15:02,630
if you don't wanna don't if you don't

00:14:59,840 --> 00:15:05,240
want to click that link we are going to

00:15:02,630 --> 00:15:10,100
give you a library link so your image is

00:15:05,240 --> 00:15:11,960
going to be stored here so you cannot

00:15:10,100 --> 00:15:14,750
download it because you just want to

00:15:11,960 --> 00:15:17,930
build an image and then pull it from the

00:15:14,750 --> 00:15:20,630
cluster of bullets from another host so

00:15:17,930 --> 00:15:23,500
this is how an image looks when stored

00:15:20,630 --> 00:15:26,440
in the container library

00:15:23,500 --> 00:15:29,680
and this is the keystore as you can see

00:15:26,440 --> 00:15:32,050
here I have two keys stored and I can

00:15:29,680 --> 00:15:34,360
use these keys to sign containers on my

00:15:32,050 --> 00:15:38,110
host and then share those containers

00:15:34,360 --> 00:15:40,720
with partners peer reviewers and they

00:15:38,110 --> 00:15:51,910
can verify that that containers comes

00:15:40,720 --> 00:15:54,790
from me with a a PGP vase key okay I was

00:15:51,910 --> 00:15:56,620
showing you this this is how interacting

00:15:54,790 --> 00:16:00,370
with the library looks so it's really

00:15:56,620 --> 00:16:02,340
easy a singularity to point X had the

00:16:00,370 --> 00:16:06,160
the pool

00:16:02,340 --> 00:16:08,890
CLI but not the post so 3.0 introduced

00:16:06,160 --> 00:16:11,470
push commands you can push your

00:16:08,890 --> 00:16:15,040
container into the cloud you can create

00:16:11,470 --> 00:16:18,340
tokens that this will be a web you and I

00:16:15,040 --> 00:16:21,760
and you can also from the CLI search

00:16:18,340 --> 00:16:25,570
containers a public available in the

00:16:21,760 --> 00:16:29,440
library so we have private images and

00:16:25,570 --> 00:16:32,740
public images as github as other hubs

00:16:29,440 --> 00:16:35,110
out there so this search command is only

00:16:32,740 --> 00:16:38,020
going to work for public available

00:16:35,110 --> 00:16:40,150
images so let's say you're interested in

00:16:38,020 --> 00:16:42,400
pulling a quick of wound to a quick

00:16:40,150 --> 00:16:45,240
Fedora image and you don't wanna type

00:16:42,400 --> 00:16:48,190
library that does is large large

00:16:45,240 --> 00:16:50,110
something something Fedora you just go

00:16:48,190 --> 00:16:52,180
in singularity search for me a fedora

00:16:50,110 --> 00:16:54,100
image singularity search for me I want

00:16:52,180 --> 00:16:57,100
to image and we are going to retrieve to

00:16:54,100 --> 00:17:05,020
you all the public available images that

00:16:57,100 --> 00:17:07,120
are a wool - or Fedora a base image this

00:17:05,020 --> 00:17:11,699
is how users can interact with a remote

00:17:07,120 --> 00:17:14,380
builder also from the CLI so rather than

00:17:11,699 --> 00:17:17,949
changing out the CLI we just added a

00:17:14,380 --> 00:17:19,720
small flag is - - remote so if you know

00:17:17,949 --> 00:17:21,970
that you don't have sudo privileges in

00:17:19,720 --> 00:17:25,089
your host you just run singularity build

00:17:21,970 --> 00:17:27,400
- - remote and the rest is the same and

00:17:25,089 --> 00:17:29,470
and you can just point to your

00:17:27,400 --> 00:17:31,929
definition file and we are going to

00:17:29,470 --> 00:17:34,900
build that for you in the cloud from the

00:17:31,929 --> 00:17:36,020
CLI so there's no need on going into the

00:17:34,900 --> 00:17:37,850
web page

00:17:36,020 --> 00:17:40,910
to use their immobility you can use the

00:17:37,850 --> 00:17:45,290
remote building from the CLI for doing

00:17:40,910 --> 00:17:47,809
this you do need one do a step which is

00:17:45,290 --> 00:17:49,460
the create token so you need to go to

00:17:47,809 --> 00:17:53,660
the web page and create your talking

00:17:49,460 --> 00:17:55,880
that's hard to do from the CLI the

00:17:53,660 --> 00:17:58,790
keystore this is how users can interact

00:17:55,880 --> 00:18:01,309
with the keystore from the CLI this is

00:17:58,790 --> 00:18:03,350
really easy if you don't have a keeper

00:18:01,309 --> 00:18:05,420
already in your hosts singularity is

00:18:03,350 --> 00:18:07,040
going to talk with the PDP protocol

00:18:05,420 --> 00:18:09,500
already in your house and create some

00:18:07,040 --> 00:18:11,510
keys for you you can leave keys you have

00:18:09,500 --> 00:18:14,120
several kids not just one kid but

00:18:11,510 --> 00:18:19,070
several kids a store in the singularity

00:18:14,120 --> 00:18:21,470
a a key folder you can pull them and you

00:18:19,070 --> 00:18:27,470
can also search keys as you can search

00:18:21,470 --> 00:18:30,830
for images so I have three minute moving

00:18:27,470 --> 00:18:33,320
away from cloud functionalities a users

00:18:30,830 --> 00:18:36,320
can now do network virtualization so you

00:18:33,320 --> 00:18:40,580
can now do poor mapping set house name

00:18:36,320 --> 00:18:42,650
DNS a create bridges go wire with build

00:18:40,580 --> 00:18:44,600
a network betrayed session with

00:18:42,650 --> 00:18:47,630
singularity containers so we are seeing

00:18:44,600 --> 00:18:51,050
users back in supercomputing eyes I see

00:18:47,630 --> 00:18:53,690
some really nice use cases on deploying

00:18:51,050 --> 00:18:56,450
web services through singularity and

00:18:53,690 --> 00:18:59,270
doing poor mapping to do remote

00:18:56,450 --> 00:19:01,450
visualization over GPO clusters so this

00:18:59,270 --> 00:19:04,610
is a pretty powerful tool for users

00:19:01,450 --> 00:19:06,710
security a this is Molly for system

00:19:04,610 --> 00:19:08,840
admins simulant is always trying to give

00:19:06,710 --> 00:19:12,559
more power to the system admins to

00:19:08,840 --> 00:19:15,170
control the users system admins can now

00:19:12,559 --> 00:19:17,420
add capabilities to remote capabilities

00:19:15,170 --> 00:19:21,320
depending on the user allowed or not

00:19:17,420 --> 00:19:25,340
allow said UID for users in keep

00:19:21,320 --> 00:19:27,530
privilege so this - privilege can make

00:19:25,340 --> 00:19:30,830
users run security inside singularity

00:19:27,530 --> 00:19:33,590
crazy things like that and a security

00:19:30,830 --> 00:19:36,040
bid that encourage you to read the

00:19:33,590 --> 00:19:38,690
documentation on how systemic and

00:19:36,040 --> 00:19:44,480
enhance singularity documentation from

00:19:38,690 --> 00:19:47,809
the CLI also we have serial support this

00:19:44,480 --> 00:19:52,340
feature requires running by school

00:19:47,809 --> 00:19:55,219
but you can now block or limit the CPU

00:19:52,340 --> 00:19:57,619
the memory there are you everything that

00:19:55,219 --> 00:20:00,529
you can block a using C group you can

00:19:57,619 --> 00:20:05,269
now block your singularity processes out

00:20:00,529 --> 00:20:06,789
of the box and one minute a sign I'm

00:20:05,269 --> 00:20:08,899
verified so I was telling you when

00:20:06,789 --> 00:20:10,609
showing you the key store that you can

00:20:08,899 --> 00:20:13,609
now sign and verify so this is how the

00:20:10,609 --> 00:20:16,249
sphere like looks when running a sign in

00:20:13,609 --> 00:20:22,639
and verification on your singularity

00:20:16,249 --> 00:20:29,179
images ok what's going to show them

00:20:22,639 --> 00:20:31,249
about it I mean ok and the last thing

00:20:29,179 --> 00:20:40,460
that I'm going to show which is

00:20:31,249 --> 00:20:42,739
something I really like is this file so

00:20:40,460 --> 00:20:45,289
this file is mostly for sustain all

00:20:42,739 --> 00:20:49,849
means so you can now create whitelist or

00:20:45,289 --> 00:20:52,639
blacklist for keys so you can say in

00:20:49,849 --> 00:20:54,979
this cluster all the singularity images

00:20:52,639 --> 00:20:57,499
must run sign it and you can create

00:20:54,979 --> 00:21:00,320
whitelist and blacklist so you can say

00:20:57,499 --> 00:21:01,759
in this cluster or images sign it with

00:21:00,320 --> 00:21:05,029
this and this and these you can create

00:21:01,759 --> 00:21:07,460
lists keys are going to run and let's

00:21:05,029 --> 00:21:09,739
say you fire some user you fire some

00:21:07,460 --> 00:21:12,320
student from the infrastructure you can

00:21:09,739 --> 00:21:15,469
add them to the blacklist and just say

00:21:12,320 --> 00:21:18,049
ok this is to them a key will not run

00:21:15,469 --> 00:21:20,029
even if he is trying with sudo

00:21:18,049 --> 00:21:22,489
privileges singularity is going to block

00:21:20,029 --> 00:21:24,379
that image from running a be at this

00:21:22,489 --> 00:21:27,109
configuration file so this configuration

00:21:24,379 --> 00:21:29,419
file is really powerful for sustain I

00:21:27,109 --> 00:21:31,820
mean on blocking and leveraging the

00:21:29,419 --> 00:21:38,619
signing and verifying feature of the 3.0

00:21:31,820 --> 00:21:38,619
version and with one minute questions

00:21:42,670 --> 00:21:49,869
[Applause]

00:21:50,040 --> 00:21:55,570
and we are hiring we are really

00:21:53,799 --> 00:21:58,840
interested in getting more developers

00:21:55,570 --> 00:22:00,730
people with HPC knowledge with system

00:21:58,840 --> 00:22:02,880
related knowledge so if you're

00:22:00,730 --> 00:22:06,660
interested in being a container person

00:22:02,880 --> 00:22:06,660
talk to me after this

00:22:18,590 --> 00:22:29,299
oh no the yeah I switched them yeah

00:22:25,340 --> 00:22:32,330
because we already had a singularity one

00:22:29,299 --> 00:22:35,720
one here at toss them so the committee

00:22:32,330 --> 00:22:44,080
really asked me to be more and update

00:22:35,720 --> 00:22:44,080
the data 101 so that that's why

00:22:56,220 --> 00:23:00,350
huh okay

00:23:02,840 --> 00:23:09,710
not yet so a question here is that if

00:23:07,669 --> 00:23:12,289
you can install the cloud services of

00:23:09,710 --> 00:23:15,529
singularity on premise like in your own

00:23:12,289 --> 00:23:17,809
cluster that feature is coming some

00:23:15,529 --> 00:23:20,419
point around let's say after August

00:23:17,809 --> 00:23:22,639
September so we're working on that

00:23:20,419 --> 00:23:24,799
keep keep an eye on the singularity

00:23:22,639 --> 00:23:26,360
report that fissure is coming we're

00:23:24,799 --> 00:23:29,179
working on that so you can install the

00:23:26,360 --> 00:23:31,429
library the Builder the key store in

00:23:29,179 --> 00:23:34,090
your host now depending on our

00:23:31,429 --> 00:23:34,090

YouTube URL: https://www.youtube.com/watch?v=yqgL9cwEx3M


