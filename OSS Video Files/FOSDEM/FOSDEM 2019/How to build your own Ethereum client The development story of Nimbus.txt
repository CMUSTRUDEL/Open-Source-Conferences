Title: How to build your own Ethereum client The development story of Nimbus
Publication date: 2019-02-08
Playlist: FOSDEM 2019
Description: 
	by Jacek Sieka

At: FOSDEM 2019
https://video.fosdem.org/2019/H.1302/nimbus.webm


Early 2018, Nimbus was born - an exciting experimental lightweight client and research project for Serenity - the next major upgrade to Ethereum - and resource-constrained devices, such as mobiles. 

In this talk, we'll go over the anatomy of an Ethereum client - the cryptography, the peer-to-peer networking, the virtual machine, the latest research - as well as the language we're working in, Nim. Nimbus, a research project started by Status.im, is a client for the Ethereum blockchain. Its focus lies on Serenity, the next major update to the network, and resource-restricted devices, and is done in collaboration with the Ethereum Foundation. 

Having developed everything from scratch in a new language, we'd like to share our journey through the early stages of development, talk about current research in the space and future plans for the client. In the talk, we will cover topics such as: 


Cryptography
Peer-to-peer networking
Virtual machines
Proof-of-stake implementation in Ethereum
Sharding and beacon chains
Nim, the programming language we're building the client in



Room: H.1302 (Depage)
Scheduled start: 2019-02-03 11:40:00+01
Captions: 
	00:00:06,970 --> 00:00:12,530
so next speaker will be Josh AK shaker

00:00:10,639 --> 00:00:16,270
on how to build your own a tearoom

00:00:12,530 --> 00:00:20,140
client the development story of nimbus

00:00:16,270 --> 00:00:22,039
actually you can go now it's good

00:00:20,140 --> 00:00:27,890
alright hello everyone

00:00:22,039 --> 00:00:30,019
I mean Isaac come from status and

00:00:27,890 --> 00:00:32,720
working on this it's your own time

00:00:30,019 --> 00:00:35,180
called Nimbus and if you want to follow

00:00:32,720 --> 00:00:37,489
along the presentation on your own

00:00:35,180 --> 00:00:39,559
laptop I think that URL should work so

00:00:37,489 --> 00:00:42,320
you can just skip ahead and do what you

00:00:39,559 --> 00:00:45,080
want right so now we're gonna talk today

00:00:42,320 --> 00:00:47,120
a little bit about what goes into

00:00:45,080 --> 00:00:49,460
building and the theorem client like

00:00:47,120 --> 00:00:51,080
what you need to what should interest

00:00:49,460 --> 00:00:55,460
you if you want to become a client

00:00:51,080 --> 00:00:58,670
developer for it area right and before

00:00:55,460 --> 00:01:01,430
we go there I wanted to look a little

00:00:58,670 --> 00:01:04,549
bit at where we're coming from right as

00:01:01,430 --> 00:01:06,290
as as blockchain developers and I don't

00:01:04,549 --> 00:01:10,880
know if anybody recognizes this anybody

00:01:06,290 --> 00:01:14,240
play that yeah alright cool so I mean

00:01:10,880 --> 00:01:16,520
this is absolutely perfect Sid Meier he

00:01:14,240 --> 00:01:18,380
had such a great thing going here that

00:01:16,520 --> 00:01:20,320
every technology we invent basically

00:01:18,380 --> 00:01:23,690
builds upon stuff that we've already

00:01:20,320 --> 00:01:25,820
done before so in blockchain that would

00:01:23,690 --> 00:01:28,460
be writing mathematics currency code of

00:01:25,820 --> 00:01:30,200
law others engineering all kinds of

00:01:28,460 --> 00:01:32,300
things right but there's one thing in

00:01:30,200 --> 00:01:36,050
particular which which is very important

00:01:32,300 --> 00:01:40,520
to blockchain development and that is

00:01:36,050 --> 00:01:42,860
cryptography and the reason we're

00:01:40,520 --> 00:01:45,820
sitting here today and are able to have

00:01:42,860 --> 00:01:49,850
this conversation is because of some

00:01:45,820 --> 00:01:51,680
very important people that made sure

00:01:49,850 --> 00:01:55,190
that we have cryptography available to

00:01:51,680 --> 00:01:56,810
us as open-source developers as people

00:01:55,190 --> 00:01:59,120
in general right because not long ago

00:01:56,810 --> 00:02:02,659
like around the time when I was learning

00:01:59,120 --> 00:02:05,090
about the internet crypto was considered

00:02:02,659 --> 00:02:07,310
a weapon you wouldn't be able to export

00:02:05,090 --> 00:02:09,440
it you wouldn't be able to use it you

00:02:07,310 --> 00:02:14,270
wouldn't be able to know how it works as

00:02:09,440 --> 00:02:16,820
a private person right and

00:02:14,270 --> 00:02:19,580
back in the day we had these people

00:02:16,820 --> 00:02:21,200
these cypherpunks and they would do

00:02:19,580 --> 00:02:22,820
everything they could in order to make

00:02:21,200 --> 00:02:28,310
sure that this technology would become

00:02:22,820 --> 00:02:31,310
available for people to use and profit

00:02:28,310 --> 00:02:35,000
from they believed that the privacy and

00:02:31,310 --> 00:02:39,470
encryption was so important that they

00:02:35,000 --> 00:02:40,250
would commit civil disobedience in order

00:02:39,470 --> 00:02:43,520
to get us there

00:02:40,250 --> 00:02:45,640
and the funny example of this is like in

00:02:43,520 --> 00:02:47,930
the US for example Phillips Zimmermann

00:02:45,640 --> 00:02:50,600
they had these laws there which said

00:02:47,930 --> 00:02:52,520
that you could not export crypto but if

00:02:50,600 --> 00:02:53,930
you printed a book you could take the

00:02:52,520 --> 00:02:56,420
book with you and that was protected by

00:02:53,930 --> 00:02:58,490
freedom of speech so all kinds of tricks

00:02:56,420 --> 00:03:02,470
like this they would do they would move

00:02:58,490 --> 00:03:04,820
to offshore platforms and and and really

00:03:02,470 --> 00:03:10,430
find ways to make sure that this

00:03:04,820 --> 00:03:11,900
technology spread to us right the other

00:03:10,430 --> 00:03:15,680
big thing that happened when I was

00:03:11,900 --> 00:03:22,220
growing up was this anybody recognize

00:03:15,680 --> 00:03:24,440
these fellows right Freenet immensely

00:03:22,220 --> 00:03:28,810
important project that back in the day

00:03:24,440 --> 00:03:28,810
they started with the idea that

00:03:29,590 --> 00:03:34,520
information should be available on the

00:03:32,210 --> 00:03:36,530
internet for anybody to store upload and

00:03:34,520 --> 00:03:38,810
download without others being able to

00:03:36,530 --> 00:03:41,830
block it you could say that they were

00:03:38,810 --> 00:03:44,270
one of the first people to think about

00:03:41,830 --> 00:03:48,200
not really the first but they thought

00:03:44,270 --> 00:03:49,910
about the Internet as a shared storage

00:03:48,200 --> 00:03:53,870
or shared repository of information

00:03:49,910 --> 00:03:55,760
right followed came lots of other

00:03:53,870 --> 00:03:58,130
projects they each contributed important

00:03:55,760 --> 00:04:00,490
things to blockchain technology as we

00:03:58,130 --> 00:04:03,560
know it today right

00:04:00,490 --> 00:04:07,430
Merkle trees they would use them to

00:04:03,560 --> 00:04:08,960
identify files distributed hash tables

00:04:07,430 --> 00:04:11,060
they would use them in order to

00:04:08,960 --> 00:04:13,130
communicate with lots and lots of nodes

00:04:11,060 --> 00:04:15,020
efficiently and know where to find

00:04:13,130 --> 00:04:22,690
information right peer-to-peer

00:04:15,020 --> 00:04:24,760
networking basically execution

00:04:22,690 --> 00:04:26,500
now this is a little bit more recent

00:04:24,760 --> 00:04:28,120
this is this is an interest of mine I

00:04:26,500 --> 00:04:36,100
don't know if anybody recognizes this

00:04:28,120 --> 00:04:39,190
fellow up LLVM now this is like the

00:04:36,100 --> 00:04:40,930
compiler developers dream it's a tool

00:04:39,190 --> 00:04:42,580
box with all the toys you can imagine

00:04:40,930 --> 00:04:44,680
you can build your own compiler in like

00:04:42,580 --> 00:04:51,040
five minutes

00:04:44,680 --> 00:04:54,490
and the blockchain that we're developing

00:04:51,040 --> 00:04:56,860
for in Nimbus has a virtual machine on

00:04:54,490 --> 00:04:58,800
its own so it's kind of another one of

00:04:56,860 --> 00:05:01,900
those prerequisites that you have to

00:04:58,800 --> 00:05:03,460
have in order to build and the theorem

00:05:01,900 --> 00:05:05,200
client today right you have to know a

00:05:03,460 --> 00:05:07,240
little bit about how virtual machines

00:05:05,200 --> 00:05:10,950
work you have to have the technology

00:05:07,240 --> 00:05:10,950
available to you or build it yourself

00:05:11,910 --> 00:05:19,930
and all these things happen you know

00:05:15,540 --> 00:05:22,600
around the 2000-2010 maybe right and

00:05:19,930 --> 00:05:23,980
then they sort of stagnated and you know

00:05:22,600 --> 00:05:28,030
the machine learning people came and

00:05:23,980 --> 00:05:34,510
become very popular and and all this

00:05:28,030 --> 00:05:36,610
faded a little bit until until one more

00:05:34,510 --> 00:05:39,240
new thing was thrown into the mix of

00:05:36,610 --> 00:05:41,620
these previous technologies right and

00:05:39,240 --> 00:05:48,430
can anybody guess which one is this it

00:05:41,620 --> 00:05:50,620
would be economics yep

00:05:48,430 --> 00:05:55,230
economics very well it wasn't banking

00:05:50,620 --> 00:06:00,210
that died off as well economics and

00:05:55,230 --> 00:06:04,690
incentives I like to use this example

00:06:00,210 --> 00:06:07,690
simply because it's one that everybody

00:06:04,690 --> 00:06:13,180
knows more or less this is basically the

00:06:07,690 --> 00:06:14,919
barter version of a blockchain you give

00:06:13,180 --> 00:06:16,540
files to some pieces of files to

00:06:14,919 --> 00:06:21,700
somebody and the more you give the more

00:06:16,540 --> 00:06:23,590
willing they are to give you the

00:06:21,700 --> 00:06:25,930
important part here is that there is an

00:06:23,590 --> 00:06:28,510
economy involved there are incentives

00:06:25,930 --> 00:06:30,460
that are aligned for you to share a file

00:06:28,510 --> 00:06:33,240
in order to get other pieces of that

00:06:30,460 --> 00:06:33,240
same file right

00:06:33,490 --> 00:06:41,740
so with that we have more or less the

00:06:39,699 --> 00:06:43,780
things that like the basic building

00:06:41,740 --> 00:06:45,940
blocks in order to get going in the a

00:06:43,780 --> 00:06:49,960
theorem client space right

00:06:45,940 --> 00:06:52,539
cryptography networking some form of

00:06:49,960 --> 00:06:54,340
execution specifically in aetherium but

00:06:52,539 --> 00:06:58,560
it's really true for all the chains

00:06:54,340 --> 00:07:04,810
except they're more or less static and

00:06:58,560 --> 00:07:10,020
some form of incentives right so Nimbus

00:07:04,810 --> 00:07:12,520
we started this project early 2018

00:07:10,020 --> 00:07:18,490
around the time a theorem to research

00:07:12,520 --> 00:07:20,110
was still very in his early days not a

00:07:18,490 --> 00:07:21,550
lot was known about it and we knew that

00:07:20,110 --> 00:07:26,080
we have a lot of work to do

00:07:21,550 --> 00:07:28,419
in all these areas that we were working

00:07:26,080 --> 00:07:31,419
in now we chose name which is a language

00:07:28,419 --> 00:07:33,340
that doesn't have very much already done

00:07:31,419 --> 00:07:36,009
it's a fresh language not so many know

00:07:33,340 --> 00:07:39,099
it it's an advantage first because we

00:07:36,009 --> 00:07:41,289
can affect the languages design how it

00:07:39,099 --> 00:07:45,099
is used how it's developed but it also

00:07:41,289 --> 00:07:47,139
means that we had a fairly large amount

00:07:45,099 --> 00:07:50,169
of work to do to develop these base

00:07:47,139 --> 00:07:51,969
components of encryption networking

00:07:50,169 --> 00:07:55,240
these things that I've talked about

00:07:51,969 --> 00:07:57,520
right so we started basically working on

00:07:55,240 --> 00:08:00,219
the theorem 1.0 because at the end of

00:07:57,520 --> 00:08:02,080
the Ramos block chains are roughly the

00:08:00,219 --> 00:08:04,990
same they did like if you look at them

00:08:02,080 --> 00:08:11,190
in the abstract way to do mostly the

00:08:04,990 --> 00:08:15,990
same things so for networking aetherium

00:08:11,190 --> 00:08:20,469
presently uses a protocol called def p2p

00:08:15,990 --> 00:08:23,800
it's a protocol that allows multiplexing

00:08:20,469 --> 00:08:27,159
allows it has a DHT for example to look

00:08:23,800 --> 00:08:29,320
up at the clients it has an encoding so

00:08:27,159 --> 00:08:31,870
that you can send information blocks

00:08:29,320 --> 00:08:34,570
back and forth between clients it's a

00:08:31,870 --> 00:08:39,630
fairly standard peer-to-peer protocol

00:08:34,570 --> 00:08:39,630
but it's specific to the cerium right

00:08:40,040 --> 00:08:45,500
for cryptography a lot of the stuff that

00:08:42,919 --> 00:08:49,610
we do is based on these fellows elliptic

00:08:45,500 --> 00:08:51,980
curves and the theorem one is SEC p25 6k

00:08:49,610 --> 00:08:57,560
one the same one as in Bitcoin we use

00:08:51,980 --> 00:08:59,180
them to sign things mainly there is not

00:08:57,560 --> 00:09:02,390
the cryptography involved as well in the

00:08:59,180 --> 00:09:03,950
Deaf p2p layer which simply encrypts the

00:09:02,390 --> 00:09:08,170
traffic going back and forth between the

00:09:03,950 --> 00:09:10,940
nodes but it's obviously less important

00:09:08,170 --> 00:09:12,790
the important stuff is in the elliptic

00:09:10,940 --> 00:09:15,070
curve cryptography because basically

00:09:12,790 --> 00:09:17,600
when you want to send the transaction

00:09:15,070 --> 00:09:20,420
what you do is that you generate a

00:09:17,600 --> 00:09:24,160
private key for your elliptic curve you

00:09:20,420 --> 00:09:27,110
sign the transaction and you send it to

00:09:24,160 --> 00:09:30,230
the network and the network knows it's

00:09:27,110 --> 00:09:32,480
your transaction by the public key your

00:09:30,230 --> 00:09:40,840
public key is also your identity on the

00:09:32,480 --> 00:09:45,500
network on ethereum execution is pretty

00:09:40,840 --> 00:09:48,080
straightforward for every block that we

00:09:45,500 --> 00:09:51,230
execute on the chain right we start with

00:09:48,080 --> 00:09:54,740
a certain state we receive the block on

00:09:51,230 --> 00:09:57,470
the network we apply the virtual machine

00:09:54,740 --> 00:10:02,780
state transition function and we come

00:09:57,470 --> 00:10:05,180
out with a new state obviously if this

00:10:02,780 --> 00:10:06,460
was done willy-nilly there would be

00:10:05,180 --> 00:10:08,660
problems

00:10:06,460 --> 00:10:10,520
because you could spam the network with

00:10:08,660 --> 00:10:14,090
transactions or execution that would go

00:10:10,520 --> 00:10:17,060
on forever so anything we have this

00:10:14,090 --> 00:10:22,420
concept of gas you pay for what you use

00:10:17,060 --> 00:10:24,590
and what you use is tied to the type of

00:10:22,420 --> 00:10:27,590
instructions that you execute so for

00:10:24,590 --> 00:10:29,600
example an ad will be very cheap because

00:10:27,590 --> 00:10:32,750
it is cheap transaction on them

00:10:29,600 --> 00:10:35,300
ordinary CPU whereas if you do something

00:10:32,750 --> 00:10:38,660
that involves storage it'll be pretty

00:10:35,300 --> 00:10:40,430
expensive because the storage on the

00:10:38,660 --> 00:10:43,160
blockchain stays forever so you're

00:10:40,430 --> 00:10:48,290
basically paying for storage for

00:10:43,160 --> 00:10:50,710
eternity so far at least might change

00:10:48,290 --> 00:10:50,710
soon

00:10:51,870 --> 00:11:00,700
finally we have incentives this is the

00:10:57,850 --> 00:11:03,880
spice that makes blockchains work at all

00:11:00,700 --> 00:11:05,830
right because we have many people trying

00:11:03,880 --> 00:11:08,260
to establish what the present state of

00:11:05,830 --> 00:11:10,090
the network is and since it's a

00:11:08,260 --> 00:11:13,420
distributed network this is a difficult

00:11:10,090 --> 00:11:15,400
problem when people are honest when

00:11:13,420 --> 00:11:18,030
people are not honest it's a very

00:11:15,400 --> 00:11:21,850
difficult problem and the trick lies in

00:11:18,030 --> 00:11:24,640
the lining what your interests are and

00:11:21,850 --> 00:11:26,230
the interests of the community so we try

00:11:24,640 --> 00:11:31,780
to place ourselves somewhere up in this

00:11:26,230 --> 00:11:36,340
quadrant when we design the rules of the

00:11:31,780 --> 00:11:39,250
protocol we try to find something that

00:11:36,340 --> 00:11:46,390
is beneficial to you and beneficial to

00:11:39,250 --> 00:11:48,810
the community basically the economy is

00:11:46,390 --> 00:11:52,410
such that when you follow the protocol

00:11:48,810 --> 00:11:55,180
you benefit from that you get rewarded

00:11:52,410 --> 00:11:56,830
if you try to break the protocol you do

00:11:55,180 --> 00:12:00,040
you don't get rewarded you kicked off

00:11:56,830 --> 00:12:02,380
the network or in the theorem - you will

00:12:00,040 --> 00:12:06,280
also lose money basically you'll be

00:12:02,380 --> 00:12:10,750
punished and we need to do this in order

00:12:06,280 --> 00:12:12,820
to deal with these situations where some

00:12:10,750 --> 00:12:16,540
parts of the network think that we've

00:12:12,820 --> 00:12:18,040
gone along this route other parts think

00:12:16,540 --> 00:12:21,010
that we've gone along this road and

00:12:18,040 --> 00:12:32,970
maybe somebody else thinks that we've

00:12:21,010 --> 00:12:36,010
gone there ok now a theorem - is

00:12:32,970 --> 00:12:39,220
practically all the same and everything

00:12:36,010 --> 00:12:41,530
different if you consider a theorem on a

00:12:39,220 --> 00:12:44,290
prototype when the theorem - is going to

00:12:41,530 --> 00:12:46,450
be the product so it's still a

00:12:44,290 --> 00:12:47,050
blockchain it still does all the same

00:12:46,450 --> 00:12:49,210
things

00:12:47,050 --> 00:12:52,450
great locks you have cryptography

00:12:49,210 --> 00:12:54,760
involved you have incentives and there's

00:12:52,450 --> 00:12:57,790
a peer-to-peer network and at the end of

00:12:54,760 --> 00:13:00,250
the day you have something which looks

00:12:57,790 --> 00:13:03,180
like a computer which emulates a

00:13:00,250 --> 00:13:03,180
computer you could say

00:13:03,520 --> 00:13:09,740
but on the inside everything has changed

00:13:07,360 --> 00:13:12,500
the networking library has gone from

00:13:09,740 --> 00:13:16,820
deaf p2p which is really a prototype of

00:13:12,500 --> 00:13:18,980
a peer-to-peer library we will be most

00:13:16,820 --> 00:13:21,260
likely using lib p2p which gives you

00:13:18,980 --> 00:13:24,040
access to a lot of interesting features

00:13:21,260 --> 00:13:26,780
you can suddenly use the network over

00:13:24,040 --> 00:13:27,470
alternative transports maybe the quic

00:13:26,780 --> 00:13:31,460
protocol

00:13:27,470 --> 00:13:35,060
maybe UDP maybe maybe even the mesh mesh

00:13:31,460 --> 00:13:38,360
network who knows the virtual machine

00:13:35,060 --> 00:13:40,640
what used to be an affair in specific

00:13:38,360 --> 00:13:41,260
virtual machine and quite a quirky one

00:13:40,640 --> 00:13:47,000
at that

00:13:41,260 --> 00:13:49,610
256 bits word length again most likely

00:13:47,000 --> 00:13:51,290
will change into wasum which is

00:13:49,610 --> 00:13:53,690
currently gaining popularity all over

00:13:51,290 --> 00:13:55,580
and this is fantastic this enables a lot

00:13:53,690 --> 00:13:57,830
of new use cases you can run stuff in

00:13:55,580 --> 00:13:59,870
the browser directly you can run stuff

00:13:57,830 --> 00:14:02,480
on a phone maybe we can run stuff

00:13:59,870 --> 00:14:08,600
basically anywhere that you find it was

00:14:02,480 --> 00:14:11,900
an environment we change the curve that

00:14:08,600 --> 00:14:14,270
we use and we change it for a simple

00:14:11,900 --> 00:14:16,250
reason which is linked to the other

00:14:14,270 --> 00:14:20,089
change it there and one is a

00:14:16,250 --> 00:14:22,130
proof-of-work blockchain it's the kind

00:14:20,089 --> 00:14:26,000
of blockchain that uses a lot of energy

00:14:22,130 --> 00:14:27,860
in order to reach consensus you have an

00:14:26,000 --> 00:14:32,960
algorithm which basically loops a hash

00:14:27,860 --> 00:14:35,510
function and it's not useful to do that

00:14:32,960 --> 00:14:38,990
work beyond getting the consensus so it

00:14:35,510 --> 00:14:40,490
wastes a lot of energy right and we're

00:14:38,990 --> 00:14:43,280
hoping to switch that to proof of stake

00:14:40,490 --> 00:14:44,420
and improve of stake what's important is

00:14:43,280 --> 00:14:48,710
that you have a lot of people

00:14:44,420 --> 00:14:52,210
participating and what this new elliptic

00:14:48,710 --> 00:14:56,480
curve does is that it allows you to sign

00:14:52,210 --> 00:14:59,089
some piece of data with multiple

00:14:56,480 --> 00:15:01,670
signatories without growing the size of

00:14:59,089 --> 00:15:03,830
the signature now this is pretty cool

00:15:01,670 --> 00:15:05,450
because it means that we can allow a lot

00:15:03,830 --> 00:15:08,960
more people to participate in the

00:15:05,450 --> 00:15:11,450
network the possibility to participate

00:15:08,960 --> 00:15:14,780
like number of participants in the

00:15:11,450 --> 00:15:16,490
network is no longer tied

00:15:14,780 --> 00:15:19,250
of data that that you need in order to

00:15:16,490 --> 00:15:22,820
sign the transaction around orally your

00:15:19,250 --> 00:15:25,240
vote in the consensus so we can grow the

00:15:22,820 --> 00:15:32,060
number of people that vote without

00:15:25,240 --> 00:15:34,190
losing efficiency oh yeah

00:15:32,060 --> 00:15:40,990
there we go that's what's going to

00:15:34,190 --> 00:15:45,310
happen the design of the theorem to

00:15:40,990 --> 00:15:49,100
network is a little bit more complex in

00:15:45,310 --> 00:15:51,350
the theorem one you can think of the

00:15:49,100 --> 00:15:55,130
blockchain as a single thread of

00:15:51,350 --> 00:15:56,840
execution things happen in order and you

00:15:55,130 --> 00:16:02,240
can execute one thing at a time

00:15:56,840 --> 00:16:04,370
there is no parallelism and one of the

00:16:02,240 --> 00:16:07,100
biggest changes beyond the consensus

00:16:04,370 --> 00:16:09,880
algorithm change in a theorem two is the

00:16:07,100 --> 00:16:12,410
fact that we'll be able to run shards

00:16:09,880 --> 00:16:16,940
and you can think of shards as threads

00:16:12,410 --> 00:16:19,010
basically they're parallel or maybe even

00:16:16,940 --> 00:16:22,130
processes is better you have parallel

00:16:19,010 --> 00:16:24,830
worlds of execution each has its own

00:16:22,130 --> 00:16:29,690
state each has its own memory each has

00:16:24,830 --> 00:16:32,890
its own execution engine and each runs

00:16:29,690 --> 00:16:37,360
completely separate from the other and

00:16:32,890 --> 00:16:41,120
in the middle you have a beacon chain

00:16:37,360 --> 00:16:44,020
that acts as a coordinator to coordinate

00:16:41,120 --> 00:16:49,460
what is the consensus of all these

00:16:44,020 --> 00:16:51,590
different charts so the way it works is

00:16:49,460 --> 00:16:54,170
that the shards report to the beacon

00:16:51,590 --> 00:16:58,550
chain where they are in their own state

00:16:54,170 --> 00:17:01,490
and on the beacon chain we have

00:16:58,550 --> 00:17:03,650
validators those are the entities that

00:17:01,490 --> 00:17:08,420
replace the miners in the traditional

00:17:03,650 --> 00:17:12,080
proof of work network and they attest to

00:17:08,420 --> 00:17:14,990
this state of the charts and the way

00:17:12,080 --> 00:17:16,760
they do that is that they rotate between

00:17:14,990 --> 00:17:21,680
the shards and they look at the shard

00:17:16,760 --> 00:17:24,410
and try to come to agreement on what is

00:17:21,680 --> 00:17:27,350
the current state of the

00:17:24,410 --> 00:17:28,670
chart at this moment in time and it's

00:17:27,350 --> 00:17:31,370
called the beacon chain because this

00:17:28,670 --> 00:17:34,400
happens every sixth second so six

00:17:31,370 --> 00:17:36,260
seconds pass a number of valid lasers go

00:17:34,400 --> 00:17:39,440
to a particular shard they look at that

00:17:36,260 --> 00:17:41,800
shard they determine what is the current

00:17:39,440 --> 00:17:43,940
state what is the longest chain

00:17:41,800 --> 00:17:47,600
according to the rules of the protocol

00:17:43,940 --> 00:17:52,130
and then they sign that information onto

00:17:47,600 --> 00:17:54,740
the beacon chain okay and this is also

00:17:52,130 --> 00:17:57,350
where communication between shards

00:17:54,740 --> 00:17:59,720
happens and is coordinated so basically

00:17:57,350 --> 00:18:03,740
you can think of it as some form of

00:17:59,720 --> 00:18:08,560
inter process communication is this

00:18:03,740 --> 00:18:08,560
coordination mechanism all right

00:18:09,160 --> 00:18:17,930
Nimbus we've developed a couple of

00:18:12,260 --> 00:18:19,700
things as I said the theorem 2.0 project

00:18:17,930 --> 00:18:20,990
is still in heavy research a lot of

00:18:19,700 --> 00:18:22,640
things are changing all the time and

00:18:20,990 --> 00:18:27,230
we're basically following following

00:18:22,640 --> 00:18:29,450
along in the development of the protocol

00:18:27,230 --> 00:18:32,030
and we're implementing it together with

00:18:29,450 --> 00:18:34,760
a couple of other groups that are doing

00:18:32,030 --> 00:18:36,290
the same so the goal here is that one

00:18:34,760 --> 00:18:39,080
city m2 is launched there will be

00:18:36,290 --> 00:18:42,230
several clients running ours is in

00:18:39,080 --> 00:18:45,110
particular is focused on light devices

00:18:42,230 --> 00:18:49,100
such as phones such as routers things

00:18:45,110 --> 00:18:51,080
that don't have that much power if you

00:18:49,100 --> 00:18:56,270
want to try it out we have a simulator

00:18:51,080 --> 00:18:59,330
right now it runs this beacon chain

00:18:56,270 --> 00:19:02,240
process it runs the number of validators

00:18:59,330 --> 00:19:04,550
and it simulates them looking at the

00:19:02,240 --> 00:19:10,340
shards trying to come to consensus about

00:19:04,550 --> 00:19:14,600
the state not a little fun application

00:19:10,340 --> 00:19:17,240
we did was a chat if you're familiar

00:19:14,600 --> 00:19:18,770
with the theorem one part of the theorem

00:19:17,240 --> 00:19:23,300
is is the blockchain but there are two

00:19:18,770 --> 00:19:25,460
other parts whisper and swarm you can

00:19:23,300 --> 00:19:28,070
think of swarm as a big hard drive

00:19:25,460 --> 00:19:30,470
basically free in it but modernized

00:19:28,070 --> 00:19:33,330
right so you can store data there in a

00:19:30,470 --> 00:19:37,410
censorship resistant way

00:19:33,330 --> 00:19:39,150
and the third part is whispers the

00:19:37,410 --> 00:19:43,710
communications protocol basically a

00:19:39,150 --> 00:19:47,070
messaging protocol their aims to make it

00:19:43,710 --> 00:19:51,750
difficult to detect who you're talking

00:19:47,070 --> 00:19:53,310
to and when you're talking and whether

00:19:51,750 --> 00:19:54,870
or not you're the recipient of the

00:19:53,310 --> 00:19:57,000
message right so it gives you anonymity

00:19:54,870 --> 00:20:00,720
on the sender side on the receiver side

00:19:57,000 --> 00:20:02,910
and it does so fairly and efficiently by

00:20:00,720 --> 00:20:05,220
gossiping to everybody so this is a

00:20:02,910 --> 00:20:08,280
little just a fun little test case that

00:20:05,220 --> 00:20:11,700
we built and I wanted to show you a

00:20:08,280 --> 00:20:15,360
snippet of NIMH which is the language

00:20:11,700 --> 00:20:18,390
that we're writing this application in

00:20:15,360 --> 00:20:21,330
now name is a compiled language it's

00:20:18,390 --> 00:20:23,790
statically typed so we compile down the

00:20:21,330 --> 00:20:27,080
statically typed language to machine

00:20:23,790 --> 00:20:29,580
code on the platform that you're running

00:20:27,080 --> 00:20:35,370
you can see that it looks a little bit

00:20:29,580 --> 00:20:41,520
like Python ish uses indentation not

00:20:35,370 --> 00:20:44,220
brackets for those that care there are

00:20:41,520 --> 00:20:47,460
some interesting things in this language

00:20:44,220 --> 00:20:51,870
specifically one is that it has a very

00:20:47,460 --> 00:20:55,200
good meta programming facility and that

00:20:51,870 --> 00:20:57,600
you can use it to generate basically

00:20:55,200 --> 00:21:01,800
code on the fly based on what you pass

00:20:57,600 --> 00:21:05,070
in in in to the functions or macros

00:21:01,800 --> 00:21:07,170
right so for example here we create an

00:21:05,070 --> 00:21:09,240
aetherium node that theorem node is the

00:21:07,170 --> 00:21:11,760
thing that connects to the network and

00:21:09,240 --> 00:21:13,770
deals with all the protocol matters we

00:21:11,760 --> 00:21:16,230
add to it a capability to run the

00:21:13,770 --> 00:21:18,210
whisperer protocol and whisper here is a

00:21:16,230 --> 00:21:21,410
type so we can basically pass a type

00:21:18,210 --> 00:21:24,870
interest function and that function will

00:21:21,410 --> 00:21:26,700
therefore have available all the things

00:21:24,870 --> 00:21:31,560
that are needed in order to run the

00:21:26,700 --> 00:21:33,840
whispered protocol right try to scroll a

00:21:31,560 --> 00:21:37,290
little bit even it works no I'm not

00:21:33,840 --> 00:21:39,390
gonna be able to scroll down here I just

00:21:37,290 --> 00:21:42,149
wanted to show a for loop just for the

00:21:39,390 --> 00:21:48,299
syntax it's very yeah

00:21:42,149 --> 00:21:50,669
okay yeah yeah my mom's down there

00:21:48,299 --> 00:21:55,559
there's a for loop as well I just wanted

00:21:50,669 --> 00:21:57,259
to show the syntax of it right our

00:21:55,559 --> 00:22:01,819
client

00:21:57,259 --> 00:22:05,459
we're sponsored by status which is a

00:22:01,819 --> 00:22:06,899
open source company trying to bring it

00:22:05,459 --> 00:22:08,159
there into mobile and they're doing a

00:22:06,899 --> 00:22:10,079
bunch of other things as well

00:22:08,159 --> 00:22:11,849
we're sponsored by aetherium the

00:22:10,079 --> 00:22:14,999
foundation so we're cooperating with

00:22:11,849 --> 00:22:20,249
them with the researchers there to bring

00:22:14,999 --> 00:22:22,799
this project to the world in turn we are

00:22:20,249 --> 00:22:25,499
sponsoring them and if you want to join

00:22:22,799 --> 00:22:27,509
us we're also using get coin which is

00:22:25,499 --> 00:22:30,119
basically a bounty program where we put

00:22:27,509 --> 00:22:33,599
out work that that we'd like to see done

00:22:30,119 --> 00:22:43,559
and you can very easily participate in

00:22:33,599 --> 00:22:46,289
that work and that's it the big reason

00:22:43,559 --> 00:22:48,209
why I'm working on this is because what

00:22:46,289 --> 00:22:50,729
I started with was technologies from 20

00:22:48,209 --> 00:22:54,419
30 years ago nobody had an idea what

00:22:50,729 --> 00:22:55,889
they would lead to and nobody has an

00:22:54,419 --> 00:22:58,319
idea of what the technologies that we

00:22:55,889 --> 00:23:01,079
developed today will be will lead to in

00:22:58,319 --> 00:23:02,729
the future in 10 or 20 years but I'm

00:23:01,079 --> 00:23:04,409
pretty happy that I'm able to do it open

00:23:02,729 --> 00:23:08,209
source such that it will be available to

00:23:04,409 --> 00:23:08,209
those next generations as well

00:23:14,140 --> 00:23:23,000
we have time for one or two questions

00:23:16,880 --> 00:23:26,150
any questions yes hello very impressive

00:23:23,000 --> 00:23:29,750
so I have two questions the first one is

00:23:26,150 --> 00:23:32,150
for BOS signatures are you using an

00:23:29,750 --> 00:23:36,020
existing library or are you writing your

00:23:32,150 --> 00:23:39,410
own we're currently using Milagro crypto

00:23:36,020 --> 00:23:42,830
which is an existing library it exists a

00:23:39,410 --> 00:23:47,000
number of them one in rust one in always

00:23:42,830 --> 00:23:49,820
being developed you'll likely write our

00:23:47,000 --> 00:23:54,290
own once the research has settled and we

00:23:49,820 --> 00:23:57,350
find it useful right right and then the

00:23:54,290 --> 00:23:59,750
second one is for you awesome I've seen

00:23:57,350 --> 00:24:02,600
a bunch of projects for example parities

00:23:59,750 --> 00:24:04,880
substrate mm-hm to actually interpret

00:24:02,600 --> 00:24:06,770
web assembly rather than compiled to

00:24:04,880 --> 00:24:08,840
machine language because of security

00:24:06,770 --> 00:24:10,960
concerns yeah and that makes a lot of

00:24:08,840 --> 00:24:14,110
sense so my question is are you

00:24:10,960 --> 00:24:17,120
compiling it to machine code or are you

00:24:14,110 --> 00:24:19,640
interpreting it if the remembers we

00:24:17,120 --> 00:24:22,910
haven't yet developed it for a theorem

00:24:19,640 --> 00:24:24,680
in general the plan is that to start

00:24:22,910 --> 00:24:26,510
with pre compiles which are basically

00:24:24,680 --> 00:24:29,600
snippets of code included with the

00:24:26,510 --> 00:24:33,650
client and the way it will be row rolled

00:24:29,600 --> 00:24:36,310
out is gradual so I expect that the

00:24:33,650 --> 00:24:39,830
question of whether to pre compile or

00:24:36,310 --> 00:24:41,150
interpret will settle by then so what

00:24:39,830 --> 00:24:43,690
your smart contracts would be

00:24:41,150 --> 00:24:47,180
interpreted by default and maybe the

00:24:43,690 --> 00:24:53,770
recompiles will be for example yeah all

00:24:47,180 --> 00:24:58,630
right thanks any other questions

00:24:53,770 --> 00:24:58,630
No thank you very much then all right

00:25:10,240 --> 00:25:12,270

YouTube URL: https://www.youtube.com/watch?v=wbpEU_o0dd0


