Title: Tooling for IntelliJ Platform Plugins
Publication date: 2019-02-08
Playlist: FOSDEM 2019
Description: 
	by Yann CÃ©bron

At: FOSDEM 2019
https://video.fosdem.org/2019/UD2.119/intellij_tooling_2019.webm


Open sourced under Apache 2 license, IntelliJ Platform is the base for a number of well-known IDEs. It supports a large variety of languages and technologies via bundled plugins as well as thousands of third-party plugins. 

This talk will showcase the tooling and ecosystem for plugin developers, covering the whole lifecycle of creation and maintenance. 

We'll start by taking a look at the IDE features for development and testing: smart code insight, highlighting, and refactorings. 

How to keep up with the latest platform releases? Plugin Verifier allows you to check for any incompatibilities
locally as well as get reports for already published versions. 

The built-in exception reporter provides the data for the Exception Analyzer, which helps collect and (auto-)triage all user-submitted runtime problems. 

Room: UD2.119
Scheduled start: 2019-02-03 10:15:00+01
Captions: 
	00:00:05,109 --> 00:00:10,580
good morning nice to have so many people

00:00:08,630 --> 00:00:15,199
here on Sunday morning I didn't expect

00:00:10,580 --> 00:00:18,350
it actually so my talk is about the

00:00:15,199 --> 00:00:20,060
IntelliJ platform my name is Yan Simone

00:00:18,350 --> 00:00:22,759
I work as developer advocate for

00:00:20,060 --> 00:00:25,099
JetBrains and I'm responsible for

00:00:22,759 --> 00:00:28,730
everything around - laying helping

00:00:25,099 --> 00:00:31,669
plug-in developers extending our IDs and

00:00:28,730 --> 00:00:33,440
stuff like that please excuse my voice I

00:00:31,669 --> 00:00:36,590
have a pretty bad cold since yesterday

00:00:33,440 --> 00:00:40,120
of course so maybe I need a few breaks

00:00:36,590 --> 00:00:42,680
in between so what does this talk about

00:00:40,120 --> 00:00:44,949
first I want to introduce the IntelliJ

00:00:42,680 --> 00:00:47,840
platform on a very high level basically

00:00:44,949 --> 00:00:49,340
who's using IntelliJ or any of the

00:00:47,840 --> 00:00:52,340
related oh okay

00:00:49,340 --> 00:00:54,230
so that's quite a lot of people who

00:00:52,340 --> 00:00:57,649
doesn't know anything about IntelliJ

00:00:54,230 --> 00:01:01,399
IDEA is okay everyone has heard of their

00:00:57,649 --> 00:01:03,440
fifties that's good so that's that's the

00:01:01,399 --> 00:01:07,280
first part of this talk a couple of

00:01:03,440 --> 00:01:10,070
slides and after that I want to show the

00:01:07,280 --> 00:01:12,799
actual tooling that we provide to plugin

00:01:10,070 --> 00:01:16,040
developers and I will also demonstrate

00:01:12,799 --> 00:01:17,930
or show screenshots at least of some of

00:01:16,040 --> 00:01:20,860
the internal tools we use at reference

00:01:17,930 --> 00:01:23,990
to make sure that plugin developers

00:01:20,860 --> 00:01:26,720
enjoy our platform so we try to help

00:01:23,990 --> 00:01:28,430
them as well by using some internal

00:01:26,720 --> 00:01:33,619
tools and making sure that things work

00:01:28,430 --> 00:01:37,430
smoothly for everyone so the IntelliJ

00:01:33,619 --> 00:01:41,710
platform came out of IntelliJ IDEA the

00:01:37,430 --> 00:01:44,509
IDE which used to be commercial IDE only

00:01:41,710 --> 00:01:46,640
we split that into community edition

00:01:44,509 --> 00:01:51,469
which was completely open source under

00:01:46,640 --> 00:01:53,479
Apache 2 license since 2009 and this of

00:01:51,469 --> 00:01:57,829
course still the promotional IDE or

00:01:53,479 --> 00:01:59,320
other idea is based on the intelligent

00:01:57,829 --> 00:02:03,049
platform

00:01:59,320 --> 00:02:08,240
it's a JVM based IDE just like NetBeans

00:02:03,049 --> 00:02:10,759
and Eclipse so we use mostly cotton so

00:02:08,240 --> 00:02:13,459
if you use mostly Java some Kotlin or

00:02:10,759 --> 00:02:15,520
increasing amount of Kotlin and a few

00:02:13,459 --> 00:02:19,840
bits here and there of movie

00:02:15,520 --> 00:02:22,060
as well the user interface is actually

00:02:19,840 --> 00:02:24,370
built completely on swing and most

00:02:22,060 --> 00:02:27,520
people are like what you can actually

00:02:24,370 --> 00:02:31,660
build like complex swing applications

00:02:27,520 --> 00:02:34,840
yes you can it is quite painful

00:02:31,660 --> 00:02:37,810
sometimes especially when you want to

00:02:34,840 --> 00:02:41,530
support the same level across Mac Linux

00:02:37,810 --> 00:02:45,100
and Windows but we are lucky enough that

00:02:41,530 --> 00:02:48,490
we have actually a couple of very

00:02:45,100 --> 00:02:50,230
talented people from the former swing

00:02:48,490 --> 00:02:55,330
team who will not work for tech brains

00:02:50,230 --> 00:02:58,150
and who built their own openjdk based

00:02:55,330 --> 00:03:00,910
runtime which we use for our IDE smell

00:02:58,150 --> 00:03:03,730
so that's another thing that is somewhat

00:03:00,910 --> 00:03:07,930
related to the IntelliJ platform we use

00:03:03,730 --> 00:03:10,810
our own Java Runtime based on open JDK

00:03:07,930 --> 00:03:12,580
so it's also completely free for

00:03:10,810 --> 00:03:17,980
everyone and we march back to open JDK

00:03:12,580 --> 00:03:22,450
as well one important distinction to

00:03:17,980 --> 00:03:24,640
make between IntelliJ and NetBeans and

00:03:22,450 --> 00:03:29,350
Eclipse is that the intelligent platform

00:03:24,640 --> 00:03:32,080
is not a generic framework or not a

00:03:29,350 --> 00:03:34,200
framework for generic applications so it

00:03:32,080 --> 00:03:36,970
is not intended to be used for like

00:03:34,200 --> 00:03:40,150
customer applications or anything that

00:03:36,970 --> 00:03:45,670
is not an IDE or something that is

00:03:40,150 --> 00:03:47,410
somewhat an IDE and this is a very

00:03:45,670 --> 00:03:49,660
important point to make so please don't

00:03:47,410 --> 00:03:53,110
try to do it it's it is just too

00:03:49,660 --> 00:03:55,480
specialized and it is pretty much

00:03:53,110 --> 00:03:58,210
impossible to rip out the parts which

00:03:55,480 --> 00:03:59,770
would just give you the basic layer for

00:03:58,210 --> 00:04:04,960
running an application and having some

00:03:59,770 --> 00:04:07,390
kind of UI the last line on the slide is

00:04:04,960 --> 00:04:08,950
a link to a presentation which a

00:04:07,390 --> 00:04:11,380
colleague of mine made a couple of years

00:04:08,950 --> 00:04:13,240
ago so it's a bit outdated by the zoo

00:04:11,380 --> 00:04:15,310
shows like the whole evolution of the

00:04:13,240 --> 00:04:16,989
IntelliJ platform and all things we have

00:04:15,310 --> 00:04:20,489
together or developed if you're

00:04:16,989 --> 00:04:20,489
interested in a bit more of history

00:04:22,480 --> 00:04:28,610
so how can you approach writing plug-ins

00:04:24,890 --> 00:04:32,300
for the internship platform so the

00:04:28,610 --> 00:04:35,000
community repository is basically the

00:04:32,300 --> 00:04:36,440
IntelliJ platform we have no distinction

00:04:35,000 --> 00:04:38,930
between the community edition of

00:04:36,440 --> 00:04:42,590
IntelliJ and the platform as such it is

00:04:38,930 --> 00:04:44,960
one repository and one name it's

00:04:42,590 --> 00:04:48,050
published on github as well we accept to

00:04:44,960 --> 00:04:52,070
request any kind of feedback on that as

00:04:48,050 --> 00:04:55,370
well of course the second link is the

00:04:52,070 --> 00:04:57,680
SDK documentation so that's some

00:04:55,370 --> 00:05:00,370
high-level talks around the IntelliJ

00:04:57,680 --> 00:05:02,540
platform which help you learn it

00:05:00,370 --> 00:05:06,560
understand all the different parts of it

00:05:02,540 --> 00:05:09,350
and it also has some tutorials or self

00:05:06,560 --> 00:05:10,520
long trades basically if for example if

00:05:09,350 --> 00:05:13,300
you want to write a custom language

00:05:10,520 --> 00:05:17,320
plug-in there's a nice detailed

00:05:13,300 --> 00:05:17,320
introduction in how to approach this

00:05:19,840 --> 00:05:24,920
JetBrains runs a couple of forums one of

00:05:22,430 --> 00:05:26,840
them is specialized to help plug-in

00:05:24,920 --> 00:05:29,300
developers or anyone building stuff on

00:05:26,840 --> 00:05:32,060
the IntelliJ platform we do monitor

00:05:29,300 --> 00:05:34,940
orders it's actually one of my tasks to

00:05:32,060 --> 00:05:39,200
do this and try to help answer all the

00:05:34,940 --> 00:05:45,020
questions in a timely manner there's

00:05:39,200 --> 00:05:47,120
also a gator community run jet we're

00:05:45,020 --> 00:05:49,880
actually quite a lot of very active

00:05:47,120 --> 00:05:51,950
plugin developers are hanging around as

00:05:49,880 --> 00:05:53,240
well so if you need a quick answer you

00:05:51,950 --> 00:05:57,710
might get lucky there as well

00:05:53,240 --> 00:06:00,110
sometimes I've I looked there as well if

00:05:57,710 --> 00:06:02,870
you want to keep up to date we run a

00:06:00,110 --> 00:06:04,790
blog and Twitter account of course so

00:06:02,870 --> 00:06:08,770
you get all like the high level news

00:06:04,790 --> 00:06:08,770
about the intelligent platform

00:06:10,010 --> 00:06:17,300
so plugins there's actually a quite huge

00:06:14,120 --> 00:06:19,820
number anytime I talk about intelligent

00:06:17,300 --> 00:06:21,890
platform I have to go on our website

00:06:19,820 --> 00:06:24,140
which lists all the plugins and look up

00:06:21,890 --> 00:06:26,870
the new number and it increases more and

00:06:24,140 --> 00:06:28,880
more what kind of plugins can you build

00:06:26,870 --> 00:06:32,770
for IntelliJ well basically anything

00:06:28,880 --> 00:06:36,170
that you can think of so one very

00:06:32,770 --> 00:06:39,380
popular categories of course like custom

00:06:36,170 --> 00:06:42,590
languages any kind of framework support

00:06:39,380 --> 00:06:45,230
so any kind of web application support

00:06:42,590 --> 00:06:47,870
for example there's a lot of little

00:06:45,230 --> 00:06:54,050
tools help us kind of stuff of plugins

00:06:47,870 --> 00:06:56,180
being published as well and yeah so it's

00:06:54,050 --> 00:06:58,430
a very broad offering that you have and

00:06:56,180 --> 00:07:03,620
actually most of them are open source or

00:06:58,430 --> 00:07:06,500
at least free for use the plugins

00:07:03,620 --> 00:07:09,710
website this sort of them so that's one

00:07:06,500 --> 00:07:11,330
way to search for them

00:07:09,710 --> 00:07:12,980
you can see all the different versions

00:07:11,330 --> 00:07:20,510
and stuff of them we are going to take a

00:07:12,980 --> 00:07:22,190
look later marketplace is a thing we are

00:07:20,510 --> 00:07:24,320
currently developing and JetBrains which

00:07:22,190 --> 00:07:26,990
will help plug-in developers to actually

00:07:24,320 --> 00:07:29,150
monetize the plugins if they want to we

00:07:26,990 --> 00:07:32,450
are also considering using this platform

00:07:29,150 --> 00:07:34,070
for donation based plugins so maybe

00:07:32,450 --> 00:07:37,130
there's also something interesting for

00:07:34,070 --> 00:07:39,580
purely open source plugins as well in

00:07:37,130 --> 00:07:39,580
the future

00:07:41,240 --> 00:07:46,499
of course you can build IDs on the

00:07:44,279 --> 00:07:49,379
intelligent a platform so there's a

00:07:46,499 --> 00:07:51,270
couple of them by jetbrains or we try to

00:07:49,379 --> 00:07:54,960
cover all the most popular programming

00:07:51,270 --> 00:07:56,430
languages obviously one of them is very

00:07:54,960 --> 00:07:57,930
interesting from the technical point of

00:07:56,430 --> 00:08:02,879
view which is Rider

00:07:57,930 --> 00:08:05,460
it's a c-sharp net IDE which runs as

00:08:02,879 --> 00:08:07,589
well on Magus on Linux so that's

00:08:05,460 --> 00:08:12,569
something quite unusual in the dotnet

00:08:07,589 --> 00:08:14,939
world and it uses the IntelliJ platform

00:08:12,569 --> 00:08:16,889
just for the front-end so only the user

00:08:14,939 --> 00:08:19,740
interface is run by the intelligent

00:08:16,889 --> 00:08:20,430
platform it feels and looks like one of

00:08:19,740 --> 00:08:22,860
the IDs

00:08:20,430 --> 00:08:24,809
but all the code intelligence and all

00:08:22,860 --> 00:08:28,110
the real functionality is actually run

00:08:24,809 --> 00:08:32,219
by a second process which runs resharper

00:08:28,110 --> 00:08:33,539
and resharper is also product which we

00:08:32,219 --> 00:08:37,259
have developed for a couple of years

00:08:33,539 --> 00:08:40,440
which is originally a plugin for visual

00:08:37,259 --> 00:08:43,079
studio so we kind of combined the two

00:08:40,440 --> 00:08:45,930
worlds into one product which allows us

00:08:43,079 --> 00:08:46,829
now to run a visual studio it's

00:08:45,930 --> 00:08:54,029
extension

00:08:46,829 --> 00:08:58,319
cross-platform on all machines probably

00:08:54,029 --> 00:09:01,410
the most known IDE which is not built by

00:08:58,319 --> 00:09:04,110
JetBrains as Android studio which is

00:09:01,410 --> 00:09:08,399
like the official and we've official IDE

00:09:04,110 --> 00:09:11,430
for anything Android based it was built

00:09:08,399 --> 00:09:15,149
by Google based on the android plug-in

00:09:11,430 --> 00:09:17,940
we did before there's also a couple of

00:09:15,149 --> 00:09:21,139
others one of them is Cuba studio that's

00:09:17,940 --> 00:09:24,510
like web framework and they basically

00:09:21,139 --> 00:09:27,300
provide a plugin but as well a full

00:09:24,510 --> 00:09:32,010
standalone IDE for their specific

00:09:27,300 --> 00:09:33,839
framework building IDE is of course much

00:09:32,010 --> 00:09:35,790
more complicated than building a plugin

00:09:33,839 --> 00:09:38,130
so we usually recommend to build a

00:09:35,790 --> 00:09:40,230
plugin and if the plugin inverse into

00:09:38,130 --> 00:09:42,389
something bigger then think about

00:09:40,230 --> 00:09:44,720
distributing it as a standalone IDE

00:09:42,389 --> 00:09:44,720
later

00:09:47,500 --> 00:09:54,769
so now we come to the interesting

00:09:51,170 --> 00:09:56,529
developing parts these are the points I

00:09:54,769 --> 00:10:00,140
want to show to them today

00:09:56,529 --> 00:10:03,140
so the plugin development kit is of

00:10:00,140 --> 00:10:05,450
course a plugin in IntelliJ which allows

00:10:03,140 --> 00:10:11,390
you or helps you write in plugins in

00:10:05,450 --> 00:10:13,370
IntelliJ the Gradle IntelliJ plug-in is

00:10:11,390 --> 00:10:15,470
actually plugin for a great build system

00:10:13,370 --> 00:10:17,990
which helps you write plug-ins for

00:10:15,470 --> 00:10:21,290
IntelliJ so you can use Gradle and

00:10:17,990 --> 00:10:26,510
actually we highly recommend doing so

00:10:21,290 --> 00:10:28,100
now I will show bit more details later

00:10:26,510 --> 00:10:30,589
the third one gray market is

00:10:28,100 --> 00:10:31,279
specifically targeted at custom language

00:10:30,589 --> 00:10:33,790
development

00:10:31,279 --> 00:10:37,300
so anyone wanting to support a new

00:10:33,790 --> 00:10:42,079
custom language should really try

00:10:37,300 --> 00:10:44,630
building it on grammar kit and the last

00:10:42,079 --> 00:10:47,300
thing is maintenance tool plugin

00:10:44,630 --> 00:10:50,300
verifier which helps you to ensure that

00:10:47,300 --> 00:10:52,820
the compatibility with newer or older

00:10:50,300 --> 00:10:58,310
versions of IntelliJ is actually

00:10:52,820 --> 00:11:02,209
guaranteed so now let's switch to the

00:10:58,310 --> 00:11:06,160
IDE and I want to show some basic

00:11:02,209 --> 00:11:12,410
features of the plug-in development

00:11:06,160 --> 00:11:17,480
plugin itself in the IDE so there's a

00:11:12,410 --> 00:11:20,990
couple of things basically a plug-in is

00:11:17,480 --> 00:11:23,270
built by the code obviously and all the

00:11:20,990 --> 00:11:26,390
components are registered in a plugin

00:11:23,270 --> 00:11:29,449
descriptor file which is basically the

00:11:26,390 --> 00:11:31,279
XML file we are seeing here it has all

00:11:29,449 --> 00:11:33,680
sorts of metadata registration

00:11:31,279 --> 00:11:35,930
information about the actual

00:11:33,680 --> 00:11:38,720
functionality that the plugin exposes

00:11:35,930 --> 00:11:45,680
and we have built a quite sophisticated

00:11:38,720 --> 00:11:49,490
support for editing all this XML so we

00:11:45,680 --> 00:11:51,410
can see all the components here for

00:11:49,490 --> 00:11:54,640
example we have some metadata about the

00:11:51,410 --> 00:11:57,230
plug-in itself like name ID

00:11:54,640 --> 00:12:02,120
compatibility information

00:11:57,230 --> 00:12:06,080
and stuff like that and you have quite a

00:12:02,120 --> 00:12:08,600
nice tooling support in the XML file

00:12:06,080 --> 00:12:10,670
itself so we don't like wizards in the

00:12:08,600 --> 00:12:13,520
intelligent world at all we try to avoid

00:12:10,670 --> 00:12:15,890
them we try to build all the tooling

00:12:13,520 --> 00:12:18,500
based on textual editors because we

00:12:15,890 --> 00:12:20,240
think it's usually faster to type stuff

00:12:18,500 --> 00:12:26,150
or use twitting that helps you type

00:12:20,240 --> 00:12:29,270
faster than using UI driven wizards so

00:12:26,150 --> 00:12:32,180
for example i have two extensions here

00:12:29,270 --> 00:12:33,560
which use the same extension points or

00:12:32,180 --> 00:12:36,620
they provide a similar kind of

00:12:33,560 --> 00:12:39,620
functionality and I have given them some

00:12:36,620 --> 00:12:41,660
kind of IDs and this is interesting

00:12:39,620 --> 00:12:44,000
because then you can actually provide

00:12:41,660 --> 00:12:45,920
some kind of ordering for extensions so

00:12:44,000 --> 00:12:48,470
for example one extension can have

00:12:45,920 --> 00:12:51,320
priority over other extensions your own

00:12:48,470 --> 00:12:53,870
ones or maybe even the built-in ones so

00:12:51,320 --> 00:12:56,030
that's one way of overriding or

00:12:53,870 --> 00:13:00,170
extending existing functionality even

00:12:56,030 --> 00:13:02,420
from the platform and we understand all

00:13:00,170 --> 00:13:06,230
of this so we have Auto completion here

00:13:02,420 --> 00:13:08,480
I can use go target here I can do a find

00:13:06,230 --> 00:13:11,900
usages and stuff like that

00:13:08,480 --> 00:13:15,710
of course all the extension points can

00:13:11,900 --> 00:13:18,080
be auto completed here as well we can

00:13:15,710 --> 00:13:22,220
even go to the Declaration here look at

00:13:18,080 --> 00:13:24,470
the actual interface which provides this

00:13:22,220 --> 00:13:26,600
extension point and stuff like this we

00:13:24,470 --> 00:13:28,520
can then go back to the registration of

00:13:26,600 --> 00:13:31,790
this extension point and stuff like this

00:13:28,520 --> 00:13:36,520
so this is all very nicely integrated in

00:13:31,790 --> 00:13:38,900
the editor and let's talk about

00:13:36,520 --> 00:13:43,520
compatibility because that's one very

00:13:38,900 --> 00:13:45,050
crucial point on which actually cost

00:13:43,520 --> 00:13:47,240
quite a lot of trouble in the recent

00:13:45,050 --> 00:13:51,560
years but I think the tooling we have

00:13:47,240 --> 00:13:54,500
now will help make things better so we

00:13:51,560 --> 00:13:58,030
have three major releases a year now we

00:13:54,500 --> 00:14:01,040
switch to that model sometime ago and

00:13:58,030 --> 00:14:04,070
you can actually see the release date

00:14:01,040 --> 00:14:06,340
from the number so 18 2 is basically the

00:14:04,070 --> 00:14:13,230
second release in 2018

00:14:06,340 --> 00:14:16,110
and 183 of course threat release in 2018

00:14:13,230 --> 00:14:18,400
so if you want a very generic

00:14:16,110 --> 00:14:20,170
compatibility that's very easy to do

00:14:18,400 --> 00:14:22,150
like this but you can also provide the

00:14:20,170 --> 00:14:25,990
full build number if you really need

00:14:22,150 --> 00:14:30,850
some changes in some kind of later

00:14:25,990 --> 00:14:33,370
pointer ease the thing I did know was to

00:14:30,850 --> 00:14:40,390
violate the compiler compatibility so I

00:14:33,370 --> 00:14:43,600
specified 182 here and actually I cannot

00:14:40,390 --> 00:14:45,250
do this it's a bit small to read so

00:14:43,600 --> 00:14:47,640
basically what the message is saying is

00:14:45,250 --> 00:14:50,589
I'm trying to use an extension point

00:14:47,640 --> 00:14:53,800
from a platform release that is newer

00:14:50,589 --> 00:14:56,020
than the minimum version I specified and

00:14:53,800 --> 00:14:57,580
my plugin descriptor so I'm trying to

00:14:56,020 --> 00:15:02,230
use something that is not there

00:14:57,580 --> 00:15:04,120
basically and that's quite easy to fix

00:15:02,230 --> 00:15:07,450
because I can just change now the

00:15:04,120 --> 00:15:09,790
minimum version go back and the warning

00:15:07,450 --> 00:15:15,280
will disappear because now it's okay

00:15:09,790 --> 00:15:17,620
it's now compatible right and another

00:15:15,280 --> 00:15:20,310
thing we edit in the tooling just

00:15:17,620 --> 00:15:26,320
recently is that we have nowadays

00:15:20,310 --> 00:15:29,950
annotations here available sins which

00:15:26,320 --> 00:15:32,980
prints the exact build number when this

00:15:29,950 --> 00:15:35,620
class or even method was added to your

00:15:32,980 --> 00:15:37,450
platform so you can see when it will be

00:15:35,620 --> 00:15:39,250
available what is the minimum version I

00:15:37,450 --> 00:15:43,480
need to specify in my plugin to be able

00:15:39,250 --> 00:15:46,660
to use this class so this information

00:15:43,480 --> 00:15:48,089
and the inspection really helps you to

00:15:46,660 --> 00:15:50,530
ensure compatibility

00:15:48,089 --> 00:15:52,810
even before deploying or trying your

00:15:50,530 --> 00:15:55,810
plugin you will be warned right in the

00:15:52,810 --> 00:15:57,250
editor there's a couple of other

00:15:55,810 --> 00:16:05,500
highlight things in the plugin is some

00:15:57,250 --> 00:16:07,480
error for example we require use for

00:16:05,500 --> 00:16:09,130
descriptions or if you just white one

00:16:07,480 --> 00:16:10,750
word it will highlight this innocent

00:16:09,130 --> 00:16:13,270
error because it's not useful for users

00:16:10,750 --> 00:16:17,820
to browse the plug-in list and have no

00:16:13,270 --> 00:16:17,820
decent description stuff like that

00:16:18,930 --> 00:16:25,149
same if you try to use oh no it actually

00:16:23,440 --> 00:16:26,980
doesn't because I'm running in a special

00:16:25,149 --> 00:16:28,360
mode but you would get the warning that

00:16:26,980 --> 00:16:30,250
you are not checked brain so you

00:16:28,360 --> 00:16:33,459
shouldn't specify jetbrains as plugin

00:16:30,250 --> 00:16:37,149
vendor and stuff like that so we try to

00:16:33,459 --> 00:16:39,459
make all the appearance of plugins a bit

00:16:37,149 --> 00:16:49,449
more uniform and more useful for

00:16:39,459 --> 00:16:51,579
end-users there is a couple of other

00:16:49,449 --> 00:16:55,689
features we have pairs of writing

00:16:51,579 --> 00:16:58,300
plugins of course means writing tests we

00:16:55,689 --> 00:17:01,720
prefer integration tests

00:16:58,300 --> 00:17:05,260
so usually we fire up some kind of

00:17:01,720 --> 00:17:07,120
headless by the II instance and you test

00:17:05,260 --> 00:17:11,679
against this headless IDE instance

00:17:07,120 --> 00:17:14,230
that's the way we usually write tests so

00:17:11,679 --> 00:17:15,850
you need usually some kind of test data

00:17:14,230 --> 00:17:17,530
and then you perform some actions

00:17:15,850 --> 00:17:20,829
against this test data for example you

00:17:17,530 --> 00:17:22,900
have some some file and some Java file

00:17:20,829 --> 00:17:25,689
and you want to test completion you

00:17:22,900 --> 00:17:27,850
write you write this minimum Java file

00:17:25,689 --> 00:17:30,400
you position the cursor at some specific

00:17:27,850 --> 00:17:32,260
point in the file and then you invoke

00:17:30,400 --> 00:17:34,480
completion and then you test the

00:17:32,260 --> 00:17:36,970
completion variants which are shown are

00:17:34,480 --> 00:17:40,360
actually the ones you want to be

00:17:36,970 --> 00:17:42,220
provided so you need some kind of

00:17:40,360 --> 00:17:44,440
navigation between your testing code and

00:17:42,220 --> 00:17:46,450
the test data and that's another feature

00:17:44,440 --> 00:17:48,940
that plugin development kit offers for

00:17:46,450 --> 00:17:52,510
example i we have two special annotation

00:17:48,940 --> 00:17:55,720
here test data pass so we can navigate

00:17:52,510 --> 00:17:59,140
there and see the related test data here

00:17:55,720 --> 00:18:00,909
as well and navigate to the test data

00:17:59,140 --> 00:18:04,110
here okay it's broken this sample of

00:18:00,909 --> 00:18:04,110
course but usually it works

00:18:05,140 --> 00:18:12,270
there's another new feature which we are

00:18:07,720 --> 00:18:16,390
going to announce a bit more publicly

00:18:12,270 --> 00:18:23,170
later this month which is seeming in the

00:18:16,390 --> 00:18:24,880
IDE so the old UI can be basically you

00:18:23,170 --> 00:18:28,059
can provide a custom theme for the UI

00:18:24,880 --> 00:18:30,580
any colors margins and stuff like this

00:18:28,059 --> 00:18:32,170
can now be customized and that's also

00:18:30,580 --> 00:18:35,080
part of the plugin development kit to

00:18:32,170 --> 00:18:38,410
offer tooling support for this

00:18:35,080 --> 00:18:40,120
customization as you can see you get for

00:18:38,410 --> 00:18:44,020
example preview for all the colors in

00:18:40,120 --> 00:18:45,669
your theme but you also get completion

00:18:44,020 --> 00:18:55,419
for all the customization keys for

00:18:45,669 --> 00:18:57,669
example so they that's about some just

00:18:55,419 --> 00:19:00,220
some of the features we have a new

00:18:57,669 --> 00:19:03,210
plugin development kit now I want to

00:19:00,220 --> 00:19:08,710
show a bit of the grammar plug-in

00:19:03,210 --> 00:19:10,030
remarket plug-in sorry so how do you

00:19:08,710 --> 00:19:11,950
write custom language support in

00:19:10,030 --> 00:19:16,799
IntelliJ basically you need a lecture

00:19:11,950 --> 00:19:19,090
which Lexus the file into tokens and

00:19:16,799 --> 00:19:21,370
then you need to pass them which builds

00:19:19,090 --> 00:19:23,260
on top of that and this is what grammar

00:19:21,370 --> 00:19:25,480
kit offers you for tooling so it's very

00:19:23,260 --> 00:19:27,820
easy to write a lecture and as well

00:19:25,480 --> 00:19:32,919
basically generate a parcel based on

00:19:27,820 --> 00:19:34,929
some BNF notation for depositing and I

00:19:32,919 --> 00:19:37,750
will make this part a bit shorter

00:19:34,929 --> 00:19:40,510
because time is tight here but you have

00:19:37,750 --> 00:19:41,950
all sorts of tooling support here for

00:19:40,510 --> 00:19:46,299
writing the powers-that-be in F file

00:19:41,950 --> 00:19:49,240
generate the parser code we can even do

00:19:46,299 --> 00:19:51,340
a live preview of our power without

00:19:49,240 --> 00:19:57,340
actually compiling code or or doing

00:19:51,340 --> 00:19:59,140
anything so now I can test my parcel

00:19:57,340 --> 00:20:01,390
here and as soon as I write something

00:19:59,140 --> 00:20:03,610
illegal I can see that my parser

00:20:01,390 --> 00:20:08,400
actually does what it should do only

00:20:03,610 --> 00:20:08,400
allow numbers and stuff like that

00:20:09,290 --> 00:20:15,740
the lexing is done by j-flex which is a

00:20:12,500 --> 00:20:17,840
very popular framework for that kind and

00:20:15,740 --> 00:20:20,000
we have all sorts of tooling support

00:20:17,840 --> 00:20:22,670
with this as well sorry this is the J

00:20:20,000 --> 00:20:30,380
flex file so custom highlighting here

00:20:22,670 --> 00:20:33,050
and completion as well the technology

00:20:30,380 --> 00:20:34,910
the for deposit is actually yeah it's

00:20:33,050 --> 00:20:37,250
homegrown it's soldered passing is

00:20:34,910 --> 00:20:41,060
implemented we only pass changed parts

00:20:37,250 --> 00:20:42,920
of the file so all the parsing is done

00:20:41,060 --> 00:20:49,730
in real time more or less while you type

00:20:42,920 --> 00:20:51,680
so the parser generator is completely

00:20:49,730 --> 00:20:53,960
home homegrown so that the code

00:20:51,680 --> 00:20:57,230
generated this really built by the

00:20:53,960 --> 00:20:59,660
plug-in itself yep there's no Angela or

00:20:57,230 --> 00:21:03,410
something behind that no you can use

00:20:59,660 --> 00:21:08,240
Android but yeah we prefer our own

00:21:03,410 --> 00:21:09,920
homegrown stuff for very sweet yes the

00:21:08,240 --> 00:21:11,510
grain market is also free it's a

00:21:09,920 --> 00:21:14,120
separate plugin because not many people

00:21:11,510 --> 00:21:18,830
use it obviously but it's free to use of

00:21:14,120 --> 00:21:22,010
course so that's the dry market plug-in

00:21:18,830 --> 00:21:25,130
and the last thing I have on my list

00:21:22,010 --> 00:21:29,270
here is the plugin verifier and we are

00:21:25,130 --> 00:21:30,980
going to take a look at this so the

00:21:29,270 --> 00:21:34,010
plugin verifier runs on the plug-in

00:21:30,980 --> 00:21:38,050
repository which hosts all the plugins

00:21:34,010 --> 00:21:40,400
for downloading and in the IDE directly

00:21:38,050 --> 00:21:42,830
but you can also install it locally and

00:21:40,400 --> 00:21:44,780
run it locally if you really want but we

00:21:42,830 --> 00:21:48,890
are going to take a look at the instance

00:21:44,780 --> 00:21:50,720
on the plugins repository and I'm going

00:21:48,890 --> 00:21:52,900
to open the website because it's a bit

00:21:50,720 --> 00:21:52,900
nicer

00:21:59,470 --> 00:22:04,240
so this is what it looks like I've run a

00:22:02,259 --> 00:22:09,159
compatibility test against a specific

00:22:04,240 --> 00:22:11,500
IDE version and it failed expectedly and

00:22:09,159 --> 00:22:13,570
these are all the kinds of problems we

00:22:11,500 --> 00:22:15,820
we kept lower like the method that's not

00:22:13,570 --> 00:22:20,169
found the class is not existing anymore

00:22:15,820 --> 00:22:22,330
and this platform version incompatible

00:22:20,169 --> 00:22:23,889
binary changes in the platform they

00:22:22,330 --> 00:22:25,539
shouldn't happen but maybe they happen

00:22:23,889 --> 00:22:27,549
for some kind of reasons or you must

00:22:25,539 --> 00:22:30,220
update those references and stuff like

00:22:27,549 --> 00:22:33,100
this you are still using deprecated API

00:22:30,220 --> 00:22:34,899
so you get all these warnings and they

00:22:33,100 --> 00:22:38,019
really help you to make your plug-in

00:22:34,899 --> 00:22:40,330
compatible with newer releases and fix

00:22:38,019 --> 00:22:43,500
all these issues one by one and upload a

00:22:40,330 --> 00:22:47,740
new better or more compatible version

00:22:43,500 --> 00:22:49,659
for the latest releases you can also see

00:22:47,740 --> 00:22:58,179
all the dependencies that your plugin

00:22:49,659 --> 00:22:59,950
really has at runtime for example ok so

00:22:58,179 --> 00:23:04,929
the question is does it work with a

00:22:59,950 --> 00:23:08,409
reflection for internal IP eyes yes and

00:23:04,929 --> 00:23:11,710
no so it's fight cause based analysis

00:23:08,409 --> 00:23:14,740
obviously we cannot catch every dirty

00:23:11,710 --> 00:23:18,039
trick you might or might not do using

00:23:14,740 --> 00:23:20,500
our platform so yeah of course we

00:23:18,039 --> 00:23:23,289
recommend using the API as is and not

00:23:20,500 --> 00:23:26,769
try to hack into package private stuff

00:23:23,289 --> 00:23:28,480
for example or even private stuff if you

00:23:26,769 --> 00:23:34,320
feel the need to please talk to us first

00:23:28,480 --> 00:23:34,320
maybe we will agree opening it instead

00:23:35,940 --> 00:23:42,190
so that that's all the tooling which is

00:23:38,769 --> 00:23:44,320
available for any plug-in developer all

00:23:42,190 --> 00:23:48,820
the tools I just showed are completely

00:23:44,320 --> 00:23:51,669
free and completely open sourced so are

00:23:48,820 --> 00:23:56,320
the SDK Docs we also want and encourage

00:23:51,669 --> 00:24:00,100
contributions to that as well and now

00:23:56,320 --> 00:24:02,379
I'm showing two screenshots of internal

00:24:00,100 --> 00:24:06,399
tools we use and check trends to

00:24:02,379 --> 00:24:09,399
highlight some of the efforts we do to

00:24:06,399 --> 00:24:11,360
ensure stability so the first one is

00:24:09,399 --> 00:24:14,749
IntelliJ API watch

00:24:11,360 --> 00:24:16,129
it is basically a tool will run on all

00:24:14,749 --> 00:24:18,590
the plugins which are hosted on the

00:24:16,129 --> 00:24:22,639
plug-in repository so we know what

00:24:18,590 --> 00:24:24,200
people are using so before we try and

00:24:22,639 --> 00:24:26,960
delete for example some deprecated

00:24:24,200 --> 00:24:29,090
methods we can run this usage check and

00:24:26,960 --> 00:24:32,119
make sure that there are no more plugins

00:24:29,090 --> 00:24:33,499
using it or if we change some method

00:24:32,119 --> 00:24:36,230
tech nature we can ensure that

00:24:33,499 --> 00:24:39,889
compatibility is not broken stuff like

00:24:36,230 --> 00:24:41,629
that so that really prevents us breaking

00:24:39,889 --> 00:24:43,190
the platform and all of a sudden a

00:24:41,629 --> 00:24:51,499
number of plugins just stopped working

00:24:43,190 --> 00:24:54,409
for some binary compatibility issues the

00:24:51,499 --> 00:24:57,230
second tool we use currently only

00:24:54,409 --> 00:24:59,029
internal is exception analyzer so if

00:24:57,230 --> 00:25:01,249
there's some kind of exception in the

00:24:59,029 --> 00:25:04,249
IDE you have the ability to report it to

00:25:01,249 --> 00:25:06,139
us and it includes the exception

00:25:04,249 --> 00:25:07,730
stacktrace some message you can also

00:25:06,139 --> 00:25:12,169
provide some additional details if you

00:25:07,730 --> 00:25:15,289
want in some cases the current file is

00:25:12,169 --> 00:25:18,080
attached to it if you allow it so we can

00:25:15,289 --> 00:25:20,779
use this for diagnosis and this

00:25:18,080 --> 00:25:23,809
exception analyzer helps us to classify

00:25:20,779 --> 00:25:25,580
and assign a group all the exception

00:25:23,809 --> 00:25:29,269
reports and assign them to the

00:25:25,580 --> 00:25:31,249
responsible developer this is currently

00:25:29,269 --> 00:25:33,559
internal only but we are really thinking

00:25:31,249 --> 00:25:35,929
about opening up a similar tool for

00:25:33,559 --> 00:25:38,869
plugin developers as well on the plug-in

00:25:35,929 --> 00:25:44,179
repository so this is something that

00:25:38,869 --> 00:25:46,460
might come in the future there are of

00:25:44,179 --> 00:25:49,100
course a lot more tools than plugin

00:25:46,460 --> 00:25:51,919
developer toolkit then I could show in a

00:25:49,100 --> 00:25:54,289
couple of minutes today we try to

00:25:51,919 --> 00:25:57,139
increase the documentation for orders as

00:25:54,289 --> 00:25:59,269
well one thing that is really important

00:25:57,139 --> 00:26:01,429
is the so-called internal mode in the

00:25:59,269 --> 00:26:07,779
IDE so that's the last thing I want to

00:26:01,429 --> 00:26:10,759
show today and what it gives you is this

00:26:07,779 --> 00:26:15,019
internal menu here which has all sorts

00:26:10,759 --> 00:26:17,480
of debugging and inspection tools for

00:26:15,019 --> 00:26:20,330
you to use and one of them is GUI

00:26:17,480 --> 00:26:24,190
inspector for example which allows you

00:26:20,330 --> 00:26:26,980
to all control click into any UI element

00:26:24,190 --> 00:26:29,350
and navigate the whole swing hierarchy

00:26:26,980 --> 00:26:31,240
of that elements to inspect it for

00:26:29,350 --> 00:26:33,490
example understand what components are

00:26:31,240 --> 00:26:36,909
we using to build this UI so you can use

00:26:33,490 --> 00:26:42,580
the same ones for your UI or debug your

00:26:36,909 --> 00:26:47,679
UI for example there's really a huge

00:26:42,580 --> 00:26:51,399
number of stuff here you can test

00:26:47,679 --> 00:26:54,519
various components you can see so-called

00:26:51,399 --> 00:26:57,129
disposer trees you can see the biggest

00:26:54,519 --> 00:26:58,809
components the biggest chain of UI

00:26:57,129 --> 00:27:01,419
components and stuff like this so it

00:26:58,809 --> 00:27:03,730
really helps you to debug all sorts of

00:27:01,419 --> 00:27:08,850
problems which you might encounter while

00:27:03,730 --> 00:27:11,529
writing plugins ok with that I guess I'm

00:27:08,850 --> 00:27:13,629
done using my time to showcase some

00:27:11,529 --> 00:27:16,960
stuff so I'm happy to take a couple of

00:27:13,629 --> 00:27:19,710
questions if time permits yes so any

00:27:16,960 --> 00:27:19,710
more questions

00:27:24,940 --> 00:27:28,059
[Music]

00:27:41,270 --> 00:27:44,460
[Music]

00:27:52,639 --> 00:27:58,590
yeah so the question is basically how do

00:27:55,979 --> 00:28:00,330
I know which extensions to use and what

00:27:58,590 --> 00:28:04,979
they do actually and how to find out

00:28:00,330 --> 00:28:06,960
more about them yeah so that is actually

00:28:04,979 --> 00:28:08,279
one of the hardest parts for plugging

00:28:06,960 --> 00:28:11,039
brighter because the platform just

00:28:08,279 --> 00:28:14,759
offers so many extension points and

00:28:11,039 --> 00:28:17,039
possibilities usually it's better to ask

00:28:14,759 --> 00:28:19,679
I want to build this and that or look in

00:28:17,039 --> 00:28:22,049
the documentation and then we will also

00:28:19,679 --> 00:28:23,669
guide you to the correct extension

00:28:22,049 --> 00:28:25,019
points you want to use for this for

00:28:23,669 --> 00:28:26,849
example if you want to build a custom

00:28:25,019 --> 00:28:28,859
language there's a set of specific

00:28:26,849 --> 00:28:30,899
extension points you probably want to

00:28:28,859 --> 00:28:34,979
use and they are listed in the

00:28:30,899 --> 00:28:37,739
documentation a number of them have

00:28:34,979 --> 00:28:39,659
Javadoc you can invoke Javadoc even in

00:28:37,739 --> 00:28:42,960
the editor there so you can see some

00:28:39,659 --> 00:28:44,519
things in index and a file when you have

00:28:42,960 --> 00:28:46,590
teary completion open you can invoke

00:28:44,519 --> 00:28:48,210
Javadoc there as well if you are unsure

00:28:46,590 --> 00:28:50,279
navigate through the extension point

00:28:48,210 --> 00:28:53,249
declaration itself to look for more

00:28:50,279 --> 00:28:57,059
documentation or information so but yeah

00:28:53,249 --> 00:28:58,710
we usually prefer if people asked what

00:28:57,059 --> 00:29:00,840
they want to build or look up what they

00:28:58,710 --> 00:29:03,499
want to build and then we guide them to

00:29:00,840 --> 00:29:03,499

YouTube URL: https://www.youtube.com/watch?v=KrAfPAWlAAs


