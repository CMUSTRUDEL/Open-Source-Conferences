Title: LemonLDAP::NG 2.0
Publication date: 2019-02-08
Playlist: FOSDEM 2019
Description: 
	by ClÃ©ment Oudot

At: FOSDEM 2019
https://video.fosdem.org/2019/H.2215/lemonldap.webm


LemonLDAP::NG is a free WebSSO software, implementing CAS, SAML and OpenID Connect protocols The 2.0 version is a major step in LemonLDAP::NG history. It brings brand new features as second factor authentication, SSO as a Service, devops Handler, etc. This talk will present how the software works, and the main new features. 

Room: H.2215 (Ferrer)
Scheduled start: 2019-02-03 15:20:00+01
Captions: 
	00:00:04,580 --> 00:00:14,110
raishin Clemente will present about

00:00:08,559 --> 00:00:14,110
lemon Elda ng to to toe

00:00:19,350 --> 00:00:25,540
hi thank you for being here and very

00:00:22,779 --> 00:00:30,520
happy to to visit ooh and to present

00:00:25,540 --> 00:00:31,720
lemonade FNG 2 to the zero maybe a quick

00:00:30,520 --> 00:00:33,879
question

00:00:31,720 --> 00:00:36,580
who knows about a lemon and up here in

00:00:33,879 --> 00:00:39,820
this room oh great

00:00:36,580 --> 00:00:43,059
some some of these people have I from my

00:00:39,820 --> 00:00:45,840
company shows a new project the cheat

00:00:43,059 --> 00:00:49,390
but I'm happy to see that other paper

00:00:45,840 --> 00:00:52,890
also knew it I'm here to present this

00:00:49,390 --> 00:00:56,980
brand new release because we work your

00:00:52,890 --> 00:01:00,390
three three years to be able to release

00:00:56,980 --> 00:01:04,239
it and we have a lot of new feature

00:01:00,390 --> 00:01:07,960
first I will for people that didn't know

00:01:04,239 --> 00:01:10,990
this project I will present it

00:01:07,960 --> 00:01:13,509
lemon ldap ng is about single sign-on

00:01:10,990 --> 00:01:17,200
and web single sign-on so a smaller

00:01:13,509 --> 00:01:20,950
picture to understand how it works

00:01:17,200 --> 00:01:24,510
the goal is to protect access to a web

00:01:20,950 --> 00:01:28,210
application and to give authentication

00:01:24,510 --> 00:01:30,159
through the application so when a user

00:01:28,210 --> 00:01:33,240
want to connect to the application the

00:01:30,159 --> 00:01:36,700
first time he needs to be able to

00:01:33,240 --> 00:01:39,220
through 20 K so it will be redirected on

00:01:36,700 --> 00:01:42,009
the auto technician portal so lemon LDAP

00:01:39,220 --> 00:01:45,640
ng is a software that implements the

00:01:42,009 --> 00:01:49,479
authentication portal when he logs in he

00:01:45,640 --> 00:01:51,520
will have a single sign-on token and

00:01:49,479 --> 00:01:55,119
security token and this token will be

00:01:51,520 --> 00:01:59,979
used by the application to authenticate

00:01:55,119 --> 00:02:03,520
the users so there is a trust between

00:01:59,979 --> 00:02:09,119
the application and the single sign-on

00:02:03,520 --> 00:02:12,820
system and we see this trust can be used

00:02:09,119 --> 00:02:15,970
with many protocols like maybe you know

00:02:12,820 --> 00:02:20,590
a test protocol sam'l protocol Open ID

00:02:15,970 --> 00:02:23,380
Connect etcetera the goal is when the

00:02:20,590 --> 00:02:25,989
user connect to another application a

00:02:23,380 --> 00:02:27,650
tube twice application fraud application

00:02:25,989 --> 00:02:30,470
as the

00:02:27,650 --> 00:02:33,379
he owns a security token he will be able

00:02:30,470 --> 00:02:36,560
to connect without login again so he

00:02:33,379 --> 00:02:38,989
will just have to enter its password or

00:02:36,560 --> 00:02:46,459
anything else at the first phoenician

00:02:38,989 --> 00:02:51,500
some history it's very old software it

00:02:46,459 --> 00:02:54,769
was a built-in friends it know used in

00:02:51,500 --> 00:02:58,519
other countries of course the POC was

00:02:54,769 --> 00:03:01,280
done with the ng version which is new

00:02:58,519 --> 00:03:04,310
generation but which is also a Shanda on

00:03:01,280 --> 00:03:05,420
marine national in France so the service

00:03:04,310 --> 00:03:07,700
emulators

00:03:05,420 --> 00:03:11,409
it's very used in a administration in

00:03:07,700 --> 00:03:15,349
France but also in a private company and

00:03:11,409 --> 00:03:17,959
we implement a lot of protocols and the

00:03:15,349 --> 00:03:20,060
last one was the OpenID connect and we

00:03:17,959 --> 00:03:24,760
released the last year there's a 2.0

00:03:20,060 --> 00:03:30,829
version with the second factor feature

00:03:24,760 --> 00:03:31,970
so what are the main feature of course

00:03:30,829 --> 00:03:35,660
web single sign-on

00:03:31,970 --> 00:03:38,480
but we also provide access control it

00:03:35,660 --> 00:03:42,859
means that you can configure in the

00:03:38,480 --> 00:03:44,959
centralized database which are the

00:03:42,859 --> 00:03:48,079
access holes to the application so you

00:03:44,959 --> 00:03:51,650
can say this group of user can access to

00:03:48,079 --> 00:03:54,680
an cloud but this other group cannot

00:03:51,650 --> 00:03:58,760
access them can access to the intranet

00:03:54,680 --> 00:04:02,209
etc so you can use any information of

00:03:58,760 --> 00:04:05,599
the users to control the access this

00:04:02,209 --> 00:04:08,419
provide an portal in which you can see

00:04:05,599 --> 00:04:10,669
your application on of course you only

00:04:08,419 --> 00:04:13,909
see the application that should have

00:04:10,669 --> 00:04:17,630
accessed so users cannot click on

00:04:13,909 --> 00:04:19,489
application that they can access and we

00:04:17,630 --> 00:04:22,340
have a lot of Constitution modules we

00:04:19,489 --> 00:04:25,280
will see that we are we have some self

00:04:22,340 --> 00:04:28,520
services so a user can of course change

00:04:25,280 --> 00:04:31,870
password or ask your password rosette or

00:04:28,520 --> 00:04:34,610
ask you an akuna question and a

00:04:31,870 --> 00:04:37,280
multi-factor authentication

00:04:34,610 --> 00:04:40,370
we protect web application on will see

00:04:37,280 --> 00:04:42,289
that we are also able to protect Web

00:04:40,370 --> 00:04:45,500
Services an API

00:04:42,289 --> 00:04:47,780
of course it's open source and free

00:04:45,500 --> 00:04:50,419
software project so you can customize it

00:04:47,780 --> 00:04:55,310
and we provide some packages for

00:04:50,419 --> 00:04:57,740
mainland distribution if GPL it's a

00:04:55,310 --> 00:05:02,300
project from other value to maybe some

00:04:57,740 --> 00:05:06,530
of you know these foundations you can

00:05:02,300 --> 00:05:09,229
access it on our website and we are

00:05:06,530 --> 00:05:10,880
building a full identity and access

00:05:09,229 --> 00:05:14,780
management project which is called

00:05:10,880 --> 00:05:17,389
version I am in which you will find open

00:05:14,780 --> 00:05:20,139
LDAP certain directory the Manalapan G

00:05:17,389 --> 00:05:22,460
LDAP toolbox I see a lot of tools

00:05:20,139 --> 00:05:24,500
open-source tools to build a full

00:05:22,460 --> 00:05:28,520
identity and access management solution

00:05:24,500 --> 00:05:32,389
so Yemen LDAP ng is a single second

00:05:28,520 --> 00:05:36,530
component of this big tools so what

00:05:32,389 --> 00:05:42,110
inside the project I try to to put some

00:05:36,530 --> 00:05:44,110
chorus to make this up here what is

00:05:42,110 --> 00:05:47,870
important if you see that you have

00:05:44,110 --> 00:05:50,750
configuration and session database in

00:05:47,870 --> 00:05:53,900
the center of the project you can use

00:05:50,750 --> 00:05:56,479
anything you want for this just can be

00:05:53,900 --> 00:05:58,669
local files which can be PostgreSQL

00:05:56,479 --> 00:06:01,639
databases can be an ally Observatory it

00:05:58,669 --> 00:06:06,199
can be a register or MongoDB no sequel a

00:06:01,639 --> 00:06:08,690
database and then the portal will be the

00:06:06,199 --> 00:06:11,949
visible part of the project in which the

00:06:08,690 --> 00:06:17,690
user the user will be able to login and

00:06:11,949 --> 00:06:20,750
then to get simulcast open ID tokens to

00:06:17,690 --> 00:06:24,740
use the sub service etc the manager is

00:06:20,750 --> 00:06:28,069
just an initiative interface in which

00:06:24,740 --> 00:06:30,380
you can see the configurations you can

00:06:28,069 --> 00:06:33,349
see the sessions and the Unruh is a

00:06:30,380 --> 00:06:37,969
small agent we will see just after how

00:06:33,349 --> 00:06:41,270
it works which will be protecting the

00:06:37,969 --> 00:06:43,480
web application it is not mandatory to

00:06:41,270 --> 00:06:46,150
use a handler to use

00:06:43,480 --> 00:06:49,090
to do a single sign-on with lemon weapon

00:06:46,150 --> 00:06:51,310
jeep because you see that we support

00:06:49,090 --> 00:06:53,260
just some random panel panel here

00:06:51,310 --> 00:06:55,990
connect protectors this means if your

00:06:53,260 --> 00:06:58,630
application is already compatible with

00:06:55,990 --> 00:07:00,310
this protocols you can directly plug in

00:06:58,630 --> 00:07:02,680
this application to eliminate App Engine

00:07:00,310 --> 00:07:05,740
if you don't have any compatibility with

00:07:02,680 --> 00:07:09,340
these protocols you can use the agent

00:07:05,740 --> 00:07:12,220
which shows a hunger that will be set in

00:07:09,340 --> 00:07:15,580
front of your web application and that

00:07:12,220 --> 00:07:17,920
will intercept all the course and the

00:07:15,580 --> 00:07:20,410
HTTP requests done to the application so

00:07:17,920 --> 00:07:23,640
when the users want to access to your

00:07:20,410 --> 00:07:26,980
applications on now controls the request

00:07:23,640 --> 00:07:30,700
sees if there is a single sign-on token

00:07:26,980 --> 00:07:32,530
which is a cookie it will match this

00:07:30,700 --> 00:07:36,660
cookie with the session in the database

00:07:32,530 --> 00:07:39,550
and if this match you will be able to

00:07:36,660 --> 00:07:42,160
control the access force and then to

00:07:39,550 --> 00:07:45,460
send the identity of the users who and

00:07:42,160 --> 00:07:47,770
HTTP header so you can deliver to web

00:07:45,460 --> 00:07:51,870
applications so I don't have the user

00:07:47,770 --> 00:07:53,980
life you do with a simple Apache

00:07:51,870 --> 00:07:58,000
authentication method maybe some of you

00:07:53,980 --> 00:08:00,880
knows how to setup mode not advocate or

00:07:58,000 --> 00:08:03,190
mod author EL deep and the AP in Apache

00:08:00,880 --> 00:08:04,770
the unlock is the same thing that and a

00:08:03,190 --> 00:08:07,600
bit to Taunton with it so the

00:08:04,770 --> 00:08:09,790
application is just reading in size

00:08:07,600 --> 00:08:15,190
range TTP request so I don't achieve the

00:08:09,790 --> 00:08:17,100
user of course you can use anything else

00:08:15,190 --> 00:08:20,320
if standard protocols

00:08:17,100 --> 00:08:22,990
liminal open G is a client and surrounds

00:08:20,320 --> 00:08:25,120
this protocol so of course it is an

00:08:22,990 --> 00:08:27,460
identity provider so you can connect any

00:08:25,120 --> 00:08:30,370
application that is a class client or

00:08:27,460 --> 00:08:34,090
son or client to the man 11g but if you

00:08:30,370 --> 00:08:35,950
already have a test server on a balance

00:08:34,090 --> 00:08:38,740
clinic server in your generation the

00:08:35,950 --> 00:08:40,300
Manalapan G can also be the client so

00:08:38,740 --> 00:08:44,050
you can delegate your competition to

00:08:40,300 --> 00:08:46,900
your main identity server you do

00:08:44,050 --> 00:08:50,530
actually cheering we do a lot a lot of

00:08:46,900 --> 00:08:52,810
things in these protocols of course we

00:08:50,530 --> 00:08:54,850
manage the public private key private

00:08:52,810 --> 00:08:57,550
keys and we add

00:08:54,850 --> 00:08:59,950
access control over these protocols

00:08:57,550 --> 00:09:02,020
because these protocols are just

00:08:59,950 --> 00:09:04,720
authentication protocols they are just

00:09:02,020 --> 00:09:08,230
designed to tell you the application

00:09:04,720 --> 00:09:11,110
ok this user is penny kid here's here is

00:09:08,230 --> 00:09:14,050
this security token and like another

00:09:11,110 --> 00:09:17,680
application trust the security token but

00:09:14,050 --> 00:09:20,280
we can also Muslim and LDAP ng choose to

00:09:17,680 --> 00:09:23,230
deliver the security token against

00:09:20,280 --> 00:09:25,510
access force so if you don't want a user

00:09:23,230 --> 00:09:27,850
to access this application the Manalapan

00:09:25,510 --> 00:09:31,110
G will refuse the security to deliver

00:09:27,850 --> 00:09:35,560
the security token to this application

00:09:31,110 --> 00:09:37,540
so a good feature is also to be able to

00:09:35,560 --> 00:09:39,190
be a gateway between these protocols you

00:09:37,540 --> 00:09:41,140
can imagine for example you have a

00:09:39,190 --> 00:09:42,850
customer in your organization and you

00:09:41,140 --> 00:09:45,280
have an application with the sam'l

00:09:42,850 --> 00:09:48,940
client you can put the Manalapan G

00:09:45,280 --> 00:09:50,860
between lemon LPG will be the sam'l

00:09:48,940 --> 00:09:53,140
server for your sam'l application and

00:09:50,860 --> 00:09:56,370
will be the cash client for your chest

00:09:53,140 --> 00:09:59,560
server so you will be able to link any

00:09:56,370 --> 00:10:02,290
application with any protocols with it

00:09:59,560 --> 00:10:04,810
and the last point

00:10:02,290 --> 00:10:06,850
single leg out which is very important

00:10:04,810 --> 00:10:09,280
is because single sign-on is just two

00:10:06,850 --> 00:10:12,520
entities or users on all application but

00:10:09,280 --> 00:10:16,690
we want we also want to be able to

00:10:12,520 --> 00:10:20,050
logout the user so single ayat is how I

00:10:16,690 --> 00:10:23,830
tell to all application to negate the

00:10:20,050 --> 00:10:26,790
user so what does the big new feature

00:10:23,830 --> 00:10:29,410
the first is linked it to the

00:10:26,790 --> 00:10:31,110
presentation that was just before me

00:10:29,410 --> 00:10:34,780
which is a second factor authentication

00:10:31,110 --> 00:10:38,290
so if you were there just before

00:10:34,780 --> 00:10:40,720
the guy from on Thursday we can under a

00:10:38,290 --> 00:10:43,660
two-factor authentication wisdom an

00:10:40,720 --> 00:10:46,060
energy and LDAP ng we also we are

00:10:43,660 --> 00:10:48,610
available to under this second factor

00:10:46,060 --> 00:10:50,890
authentication and we are able to

00:10:48,610 --> 00:10:53,500
protect an cloud so you can also do

00:10:50,890 --> 00:10:55,510
second factor authentication on on cloud

00:10:53,500 --> 00:10:58,060
through lemonade appengine this is

00:10:55,510 --> 00:11:04,750
another tradition to to do it so you see

00:10:58,060 --> 00:11:06,900
we were doing qgp you be kid with

00:11:04,750 --> 00:11:09,850
configuration back-end you see that we

00:11:06,900 --> 00:11:13,600
we were able to stir it in files and

00:11:09,850 --> 00:11:16,210
data register you we know use new

00:11:13,600 --> 00:11:20,590
backends like your general file or or

00:11:16,210 --> 00:11:25,080
rested for people that are doing

00:11:20,590 --> 00:11:27,850
JavaScript or not there is a native

00:11:25,080 --> 00:11:30,520
handler native oughtn't additional agent

00:11:27,850 --> 00:11:32,590
foreigner GS because I didn't maybe I

00:11:30,520 --> 00:11:35,620
didn't tell it but all the project is

00:11:32,590 --> 00:11:37,570
written in pair so what people are not

00:11:35,620 --> 00:11:44,620
aware with the very language so you can

00:11:37,570 --> 00:11:46,870
also use the native javascript client we

00:11:44,620 --> 00:11:50,950
wanted to add the developed keyword in

00:11:46,870 --> 00:11:55,030
our product so we did it we are very

00:11:50,950 --> 00:11:58,560
proud of it the goal is to be able to

00:11:55,030 --> 00:12:02,490
deploy an application with a single

00:11:58,560 --> 00:12:06,190
configuration file inside the container

00:12:02,490 --> 00:12:09,220
so you you are you can deploy an

00:12:06,190 --> 00:12:12,460
application without declaring it inside

00:12:09,220 --> 00:12:16,510
the main configuration it will read it

00:12:12,460 --> 00:12:19,210
only words from its container so this is

00:12:16,510 --> 00:12:23,320
the single sign-on as service and also a

00:12:19,210 --> 00:12:27,880
big big new feature is the web service

00:12:23,320 --> 00:12:31,420
protection so we if you are already a

00:12:27,880 --> 00:12:33,940
manager web services or API you know

00:12:31,420 --> 00:12:36,280
that authenticating people to API is not

00:12:33,940 --> 00:12:39,160
easy because the people are not

00:12:36,280 --> 00:12:40,839
accessing directly the API you are

00:12:39,160 --> 00:12:43,350
accessing to a web application on this

00:12:40,839 --> 00:12:46,240
web application will access to the API

00:12:43,350 --> 00:12:48,520
with your credentials but of course you

00:12:46,240 --> 00:12:50,260
don't want to share your password

00:12:48,520 --> 00:12:52,840
the application you don't know you don't

00:12:50,260 --> 00:12:56,020
want that your application resend your

00:12:52,840 --> 00:13:01,240
own password to the API so we found a

00:12:56,020 --> 00:13:03,550
solution you see that we still have the

00:13:01,240 --> 00:13:06,010
unless of the auto station agent in

00:13:03,550 --> 00:13:08,500
front of the web application but we are

00:13:06,010 --> 00:13:11,080
able to put a second

00:13:08,500 --> 00:13:16,180
unruhe between the web application and

00:13:11,080 --> 00:13:20,500
the web services API and the first agent

00:13:16,180 --> 00:13:22,960
is able to generate a token this token

00:13:20,500 --> 00:13:25,590
will be sent to the web application and

00:13:22,960 --> 00:13:28,180
the web application is able to send

00:13:25,590 --> 00:13:31,840
request to the web service so the web

00:13:28,180 --> 00:13:35,200
service with this token this token is a

00:13:31,840 --> 00:13:37,630
link it to is the user session so the

00:13:35,200 --> 00:13:41,860
the service station hundra will be able

00:13:37,630 --> 00:13:44,290
to find we which user is requesting the

00:13:41,860 --> 00:13:47,500
web services and the Western web

00:13:44,290 --> 00:13:49,630
services so you will be able to do to

00:13:47,500 --> 00:13:51,820
two things the first is to do access

00:13:49,630 --> 00:13:56,110
control on the web services you can say

00:13:51,820 --> 00:13:58,600
ok this token is owned by this user on

00:13:56,110 --> 00:14:00,910
this user can access to this web service

00:13:58,600 --> 00:14:02,680
or cannot access to this web service so

00:14:00,910 --> 00:14:07,020
the web service don't don't manage the

00:14:02,680 --> 00:14:10,150
authorization and the unlevel also for a

00:14:07,020 --> 00:14:14,560
forward user identity to the web service

00:14:10,150 --> 00:14:17,830
so the request will be sent to the web

00:14:14,560 --> 00:14:21,070
service with the user login email or

00:14:17,830 --> 00:14:25,140
whatever and all this is configure

00:14:21,070 --> 00:14:25,140
itself inside the eliminative ng

00:14:25,590 --> 00:14:31,750
regarding authentication models we have

00:14:28,540 --> 00:14:35,920
some new models we already have between

00:14:31,750 --> 00:14:40,960
10 and 15 automation modules we add

00:14:35,920 --> 00:14:45,490
these these four models but we can

00:14:40,960 --> 00:14:46,720
already authenticated through njp Active

00:14:45,490 --> 00:14:52,480
Directory

00:14:46,720 --> 00:14:55,690
Kerberos SSL Certificates interested and

00:14:52,480 --> 00:15:01,110
you can write your own auto key

00:14:55,690 --> 00:15:03,930
education modules we we do some

00:15:01,110 --> 00:15:06,620
modification and the managers as an

00:15:03,930 --> 00:15:09,330
assertion interface you can know a

00:15:06,620 --> 00:15:11,760
compare to configuration when you modify

00:15:09,330 --> 00:15:13,770
one one configuration in the Manalapan

00:15:11,760 --> 00:15:15,570
G's in the beginning when you edit the

00:15:13,770 --> 00:15:18,300
configuration we generate a new

00:15:15,570 --> 00:15:20,700
configuration with a new number and now

00:15:18,300 --> 00:15:24,660
you can see with the graphical interface

00:15:20,700 --> 00:15:26,910
what are the difference of course we

00:15:24,660 --> 00:15:30,300
ID'd the second factor so you can know

00:15:26,910 --> 00:15:32,520
manage second factor you can delete the

00:15:30,300 --> 00:15:35,640
second factor for a user for example and

00:15:32,520 --> 00:15:39,570
you can sort a session if you know

00:15:35,640 --> 00:15:41,940
vanity or edge again organization we are

00:15:39,570 --> 00:15:44,370
no fully compatible with this

00:15:41,940 --> 00:15:48,000
organization so you can do identity

00:15:44,370 --> 00:15:50,280
Federation with them an LDAP ng and we

00:15:48,000 --> 00:15:54,480
have a plug-in engine and join so you

00:15:50,280 --> 00:15:57,870
can write any new feature with a simple

00:15:54,480 --> 00:16:00,570
plug-in insider even end up in G so we

00:15:57,870 --> 00:16:02,790
have already some plugins which are in

00:16:00,570 --> 00:16:06,450
the core product but you can write your

00:16:02,790 --> 00:16:10,680
own tagging and to conclude a list of

00:16:06,450 --> 00:16:13,050
new feature we have Westar this year we

00:16:10,680 --> 00:16:16,110
can we have the many translation and you

00:16:13,050 --> 00:16:18,000
can select your language we are known

00:16:16,110 --> 00:16:23,610
with the trough or the graphical

00:16:18,000 --> 00:16:26,030
interface it's a diversity right I'm in

00:16:23,610 --> 00:16:26,030
the time

00:16:29,340 --> 00:16:31,400

YouTube URL: https://www.youtube.com/watch?v=vXTziy9UIsI


