Title: openSUSE Kubic for Distro People exploring the containerised frontiers
Publication date: 2019-02-08
Playlist: FOSDEM 2019
Description: 
	by Richard Brown

At: FOSDEM 2019
https://video.fosdem.org/2019/K.3.401/opensuse_kubic.webm


As the world moves more and more towards containerised solutions, a number of real questions start to appear.
- What is the perfect platform for running containers atop?
- How to use this platform as part of a flexible, scalable, highly available infrastructure fabric?
- How to minimize the maintenance and administration of this platform at scale? 

All of these problems are well answered in an enterprise environment by SUSE CaaS Platform, but for developers more interested in the state of containers &amp; kubernetes upstream, new issues start to appear. With such fast moving upstreams, developers and enthusiasts need a platform that can keep up and is closely involved with those upstream developments. This platform needs to not only be able to run containers at scale, but also on single machine, all the while preserving the attributes of low maintenance so the focus can be on the containers, not the base system beneath them. 

This talk will introduce openSUSE Kubic, and explains how it addresses the above, being the perfect distribution for this modern age. The session will explore in some detail how Kubic is developed in lockstep with the Tumbleweed rolling release and various upstreams including kubeadm and CRI-O. Transactional Updates, Kubic's system update stack will be demonstrated and the benefits from such an atomic update approach discussed in some detail. Finally the kubeadm Kubernetes cluster boostrapping tool will be discussed and some future plans shared for consideration and feedback. 

Attendees should come away from this talk with everything they need to know to get starting using, developing with and contributing to openSUSE Kubic. 

Room: K.3.401
Scheduled start: 2019-02-03 11:55:00+01
Captions: 
	00:00:08,170 --> 00:00:13,420
well thank you very much okay so I'm

00:00:10,490 --> 00:00:15,469
Richard Brown from the openSUSE project

00:00:13,420 --> 00:00:19,280
exactly my second talk of the day on

00:00:15,469 --> 00:00:20,390
this topic which kind of fun I'm I was

00:00:19,280 --> 00:00:21,920
really looking forward to coming to the

00:00:20,390 --> 00:00:23,930
first session in this room because it

00:00:21,920 --> 00:00:25,370
was meant to be you know are in our

00:00:23,930 --> 00:00:27,710
distributions still relevant in a

00:00:25,370 --> 00:00:29,510
container world and but I was too busy

00:00:27,710 --> 00:00:31,310
in the district in the container track

00:00:29,510 --> 00:00:34,160
telling them how distributions are still

00:00:31,310 --> 00:00:35,690
relevant in the container world but yet

00:00:34,160 --> 00:00:38,480
so it's kind of the follow on from that

00:00:35,690 --> 00:00:40,160
of what we're doing with openSUSE what

00:00:38,480 --> 00:00:42,950
we're doing with containers why we're

00:00:40,160 --> 00:00:44,870
doing it um but you know at the

00:00:42,950 --> 00:00:47,960
beginning you know starting really from

00:00:44,870 --> 00:00:50,239
the base level as distributions you know

00:00:47,960 --> 00:00:53,510
we are here to distribute software and

00:00:50,239 --> 00:00:55,130
it doesn't necessarily matter how you

00:00:53,510 --> 00:00:56,480
know people might call in an app we

00:00:55,130 --> 00:00:58,790
might call it a package it might be a

00:00:56,480 --> 00:01:00,500
service it might be a container you know

00:00:58,790 --> 00:01:02,630
when I started you know software was

00:01:00,500 --> 00:01:06,409
distributed on one of these on a

00:01:02,630 --> 00:01:08,570
cassette tape um and yeah I'm getting a

00:01:06,409 --> 00:01:11,600
bit older and I'm realizing you know a

00:01:08,570 --> 00:01:14,900
heck of a lot of the assumptions that I

00:01:11,600 --> 00:01:16,159
carry with my open source stuff come

00:01:14,900 --> 00:01:18,500
from the fact that this is where I

00:01:16,159 --> 00:01:20,570
started you know playing with this

00:01:18,500 --> 00:01:22,250
learning how to code basic learning you

00:01:20,570 --> 00:01:23,630
know then having an IBM PC learning how

00:01:22,250 --> 00:01:26,090
all these little bits and pieces work

00:01:23,630 --> 00:01:28,159
but that's not the world we're living in

00:01:26,090 --> 00:01:29,750
these days you know everybody has and

00:01:28,159 --> 00:01:31,490
might have started on all of these

00:01:29,750 --> 00:01:33,860
interconnected devices if we're lucky

00:01:31,490 --> 00:01:34,280
they might know about these things

00:01:33,860 --> 00:01:35,990
called

00:01:34,280 --> 00:01:37,670
servers but you know there's an entire

00:01:35,990 --> 00:01:40,700
generation of developers of these days

00:01:37,670 --> 00:01:42,560
who have just been born with this cloud

00:01:40,700 --> 00:01:44,420
thing of the internet where you know

00:01:42,560 --> 00:01:48,140
they can go to some web page and start

00:01:44,420 --> 00:01:49,880
doing stuff and that's not necessarily a

00:01:48,140 --> 00:01:52,850
bad thing they don't necessarily need to

00:01:49,880 --> 00:01:56,030
have know all of that stuff going on

00:01:52,850 --> 00:01:57,820
underneath you know but ultimately

00:01:56,030 --> 00:01:59,990
everything's getting more interconnected

00:01:57,820 --> 00:02:02,689
it also means everything's getting more

00:01:59,990 --> 00:02:04,159
more complicated so actually that stuff

00:02:02,689 --> 00:02:06,140
down in the in the deep plumbing

00:02:04,159 --> 00:02:08,750
actually matters even more than it ever

00:02:06,140 --> 00:02:11,180
did before just nobody wants to worry

00:02:08,750 --> 00:02:13,220
about it and when you get all these nice

00:02:11,180 --> 00:02:14,300
complicated interconnected messes you

00:02:13,220 --> 00:02:16,370
know what's the first thing we as

00:02:14,300 --> 00:02:17,880
developers or do we make the whole thing

00:02:16,370 --> 00:02:19,410
modular which

00:02:17,880 --> 00:02:22,410
then causes more connections because

00:02:19,410 --> 00:02:24,060
we've made everything modular but this

00:02:22,410 --> 00:02:25,650
isn't necessarily a new thing you know

00:02:24,060 --> 00:02:27,000
the current word for that is containers

00:02:25,650 --> 00:02:29,340
but you know this is something we were

00:02:27,000 --> 00:02:31,980
doing it back in the day when we started

00:02:29,340 --> 00:02:33,870
packaging and you know it isn't a

00:02:31,980 --> 00:02:36,090
trivial problem you know you you look at

00:02:33,870 --> 00:02:37,890
you know open-source software all these

00:02:36,090 --> 00:02:40,020
different packages and you know things

00:02:37,890 --> 00:02:41,400
up streams you're dealing with you know

00:02:40,020 --> 00:02:43,050
and the kernel is releasing something

00:02:41,400 --> 00:02:45,060
every three months and kubernetes

00:02:43,050 --> 00:02:46,920
releasing every three months and soaps

00:02:45,060 --> 00:02:49,650
next releasing every three to six months

00:02:46,920 --> 00:02:51,210
and like the guy that pod man scorpion

00:02:49,650 --> 00:02:53,010
builder just releasing all the goddamn

00:02:51,210 --> 00:02:54,510
time you know there's no release

00:02:53,010 --> 00:02:58,440
schedule it's just something new

00:02:54,510 --> 00:03:00,390
whenever it's ready and so yeah as a

00:02:58,440 --> 00:03:03,030
Linux distribution we're trying to take

00:03:00,390 --> 00:03:05,130
all of this stuff condense it down to

00:03:03,030 --> 00:03:06,570
something that someone can actually use

00:03:05,130 --> 00:03:09,510
because we're not expecting everybody to

00:03:06,570 --> 00:03:10,830
just fall down get repos and build them

00:03:09,510 --> 00:03:12,750
themselves and you know run it

00:03:10,830 --> 00:03:15,290
themselves and it has to be in a

00:03:12,750 --> 00:03:17,220
coherent consistent and and you know

00:03:15,290 --> 00:03:20,040
operational for the purposes it was

00:03:17,220 --> 00:03:21,210
built for and when you start looking at

00:03:20,040 --> 00:03:23,580
the container world and the cloud world

00:03:21,210 --> 00:03:25,350
you know not just on that one machine in

00:03:23,580 --> 00:03:26,700
your room when your house you know or

00:03:25,350 --> 00:03:29,550
even that couple of servers you know it

00:03:26,700 --> 00:03:31,350
needs to work at scale for large systems

00:03:29,550 --> 00:03:33,840
for large deployments with thousands of

00:03:31,350 --> 00:03:35,850
users and it needs to be totally and

00:03:33,840 --> 00:03:37,500
utterly stable but it needs to have the

00:03:35,850 --> 00:03:39,630
latest of everything because that's also

00:03:37,500 --> 00:03:41,820
what users are expecting you know

00:03:39,630 --> 00:03:43,880
they've got used to having new software

00:03:41,820 --> 00:03:46,860
delivered new quickly with new features

00:03:43,880 --> 00:03:48,330
not just as geeks at first then where

00:03:46,860 --> 00:03:51,240
you know we like all this upstream stuff

00:03:48,330 --> 00:03:52,830
but you know the you know the the

00:03:51,240 --> 00:03:54,890
expectation is something isn't going to

00:03:52,830 --> 00:03:58,140
necessarily be the same as it was for

00:03:54,890 --> 00:04:00,680
ten years all that entire service might

00:03:58,140 --> 00:04:05,040
not even exist if you're a Google+ user

00:04:00,680 --> 00:04:07,410
and so the way people are working with

00:04:05,040 --> 00:04:10,320
their computers is also different you

00:04:07,410 --> 00:04:12,450
know my Commodore 64 was my pet my first

00:04:10,320 --> 00:04:13,740
IBM PC was a pet I cared for it I

00:04:12,450 --> 00:04:15,480
packaged everything on there you know

00:04:13,740 --> 00:04:18,540
install my packages on there really

00:04:15,480 --> 00:04:20,730
carefully and there's nothing wrong with

00:04:18,540 --> 00:04:22,290
that that use case is still valid people

00:04:20,730 --> 00:04:24,990
are still thinking in that way and using

00:04:22,290 --> 00:04:26,610
it that way but you know there's an

00:04:24,990 --> 00:04:28,350
entire generation of people who've been

00:04:26,610 --> 00:04:30,479
using nothing but iPhones and androids

00:04:28,350 --> 00:04:31,439
and you know having yeah you know having

00:04:30,479 --> 00:04:34,139
netbooks and

00:04:31,439 --> 00:04:35,610
dealing with they don't they don't want

00:04:34,139 --> 00:04:36,659
to deal with this they don't know how to

00:04:35,610 --> 00:04:39,239
deal with this they've never been

00:04:36,659 --> 00:04:40,860
exposed to it in the same way that some

00:04:39,239 --> 00:04:42,869
of us have and this is what I thought of

00:04:40,860 --> 00:04:44,489
the pipette versus with Catherine and

00:04:42,869 --> 00:04:46,080
you really come from you know just you

00:04:44,489 --> 00:04:48,629
know if you have a misbehaving machine

00:04:46,080 --> 00:04:52,349
you know throw it away replace it with a

00:04:48,629 --> 00:04:53,819
new one and you know this is this is

00:04:52,349 --> 00:04:55,489
what you see how you see when people are

00:04:53,819 --> 00:04:59,550
talking about clouds you know they're

00:04:55,489 --> 00:05:01,139
you know yeah it's a common analogy but

00:04:59,550 --> 00:05:03,029
when you actually extrapolate it and

00:05:01,139 --> 00:05:05,399
think about it more you know which is

00:05:03,029 --> 00:05:06,569
more important for the world at large

00:05:05,399 --> 00:05:10,679
you know which one has a bigger impact

00:05:06,569 --> 00:05:13,709
on the most people a pet helps you know

00:05:10,679 --> 00:05:16,079
a few people a family you know if your

00:05:13,709 --> 00:05:17,429
cat you know if if a bunch of fear yeah

00:05:16,079 --> 00:05:19,979
I'm British you know if your bunch of

00:05:17,429 --> 00:05:21,899
cows get BSL get mad cow disease you

00:05:19,979 --> 00:05:25,829
know that has a huge impact on a huge

00:05:21,899 --> 00:05:27,989
amount of people so the OS that is

00:05:25,829 --> 00:05:30,929
running your cut your cattle servers is

00:05:27,989 --> 00:05:35,969
more important than the old OS that was

00:05:30,929 --> 00:05:38,159
running your little one server and you

00:05:35,969 --> 00:05:40,169
know developers are users to you know

00:05:38,159 --> 00:05:41,639
developers don't know generally speaking

00:05:40,169 --> 00:05:42,779
some of us care because you know we're

00:05:41,639 --> 00:05:45,149
here in the district every room but you

00:05:42,779 --> 00:05:47,009
know at large fewer and fewer developers

00:05:45,149 --> 00:05:48,719
per fortunately speaking you know are

00:05:47,009 --> 00:05:50,490
caring about the stuff we were caring

00:05:48,719 --> 00:05:52,439
about as we would you know as we've been

00:05:50,490 --> 00:05:54,029
building all of this container stuff you

00:05:52,439 --> 00:05:55,349
know they just want their web service to

00:05:54,029 --> 00:05:57,360
work they just want to deploy their

00:05:55,349 --> 00:06:00,329
micro service and move on and have the

00:05:57,360 --> 00:06:03,089
OS do its thing out of the way so they

00:06:00,329 --> 00:06:05,069
don't have to worry about it you know as

00:06:03,089 --> 00:06:06,839
as always you know new level of

00:06:05,069 --> 00:06:08,069
abstraction they you know they don't

00:06:06,839 --> 00:06:11,879
need to worry about they shouldn't need

00:06:08,069 --> 00:06:15,569
to worry about the OS but they want

00:06:11,879 --> 00:06:18,599
everything even faster a lot of these

00:06:15,569 --> 00:06:21,149
themes I was here two years ago talking

00:06:18,599 --> 00:06:23,309
about in a slightly different context

00:06:21,149 --> 00:06:25,949
because you know in openSUSE we have

00:06:23,309 --> 00:06:28,019
tumbleweed and tumbleweed does try to

00:06:25,949 --> 00:06:29,189
address many of these issues by being

00:06:28,019 --> 00:06:31,139
sort of the traditional Linux

00:06:29,189 --> 00:06:32,699
distribution iterating incredibly

00:06:31,139 --> 00:06:36,989
quickly with good testing and good

00:06:32,699 --> 00:06:38,969
building but it's only part of the story

00:06:36,989 --> 00:06:41,490
and it works really really well for you

00:06:38,969 --> 00:06:42,540
know effectively people thinking like we

00:06:41,490 --> 00:06:45,480
think

00:06:42,540 --> 00:06:47,190
but it doesn't really solve the work the

00:06:45,480 --> 00:06:49,380
problems that you see if you're doing

00:06:47,190 --> 00:06:51,090
everything with containers with you know

00:06:49,380 --> 00:06:56,430
on clouds and you know working that way

00:06:51,090 --> 00:06:59,670
it's it's just a complete mismatch yeah

00:06:56,430 --> 00:07:00,900
so you know I've started looking at this

00:06:59,670 --> 00:07:03,420
problem and trying to figure out you

00:07:00,900 --> 00:07:07,830
know yeah what is the route to the

00:07:03,420 --> 00:07:09,630
solution and despite the fact that you

00:07:07,830 --> 00:07:11,430
know fundamentally deep in my heart I

00:07:09,630 --> 00:07:12,870
still know as a district guy they're

00:07:11,430 --> 00:07:15,900
wrong they'd not they are not built

00:07:12,870 --> 00:07:17,730
correctly you know containers do bring a

00:07:15,900 --> 00:07:20,310
huge amount of opportunity to actually

00:07:17,730 --> 00:07:21,780
solving this problem and not and

00:07:20,310 --> 00:07:22,770
surprisingly and I'm gonna really hate

00:07:21,780 --> 00:07:25,740
saying this because I know people are

00:07:22,770 --> 00:07:27,540
gonna quote me for ages not just in our

00:07:25,740 --> 00:07:30,540
OCI containers like you see with docker

00:07:27,540 --> 00:07:32,400
but you know on the desktop and mobile

00:07:30,540 --> 00:07:33,870
side of Linux you know things like app

00:07:32,400 --> 00:07:35,550
image and flat pack and snappy you know

00:07:33,870 --> 00:07:37,650
they may heat they may have their flaws

00:07:35,550 --> 00:07:39,000
because you know they're the way they're

00:07:37,650 --> 00:07:40,850
bundling things together the way that I

00:07:39,000 --> 00:07:43,230
say ten things you know unnecessarily is

00:07:40,850 --> 00:07:45,480
well engineered is a traditional

00:07:43,230 --> 00:07:47,850
distribution package but they do give a

00:07:45,480 --> 00:07:49,500
huge amount of freedom to users to just

00:07:47,850 --> 00:07:50,940
be able to install what they want to

00:07:49,500 --> 00:07:53,490
developers to just be able to deploy

00:07:50,940 --> 00:07:55,550
what they want without having to have to

00:07:53,490 --> 00:07:58,110
engage quite so much with distributions

00:07:55,550 --> 00:07:59,460
you know yeah and so you know users get

00:07:58,110 --> 00:08:03,140
their stuff fast developers get their

00:07:59,460 --> 00:08:06,870
stuff out there fast and you know

00:08:03,140 --> 00:08:09,570
despite being such a big district fanboy

00:08:06,870 --> 00:08:10,470
that I am like after a while you look at

00:08:09,570 --> 00:08:11,460
this and you think maybe this is

00:08:10,470 --> 00:08:14,280
actually an opportunity for

00:08:11,460 --> 00:08:16,380
distributions maybe we have a chance to

00:08:14,280 --> 00:08:18,030
actually lower the scope of the

00:08:16,380 --> 00:08:19,650
distribution to something that's more

00:08:18,030 --> 00:08:22,290
manageable rather than trying to please

00:08:19,650 --> 00:08:23,520
everybody with everything and come up

00:08:22,290 --> 00:08:26,160
with a solution that can just you know

00:08:23,520 --> 00:08:27,810
deal with what we need to deal with and

00:08:26,160 --> 00:08:29,370
basically leave everything else to be

00:08:27,810 --> 00:08:31,290
everybody else's problem you know just

00:08:29,370 --> 00:08:33,840
leave it to the container framework

00:08:31,290 --> 00:08:35,820
leave it to the application framework to

00:08:33,840 --> 00:08:37,650
you know deal with the user space stuff

00:08:35,820 --> 00:08:39,479
and we're just dealing with the plumbing

00:08:37,650 --> 00:08:45,300
which is our core competence it's our

00:08:39,479 --> 00:08:47,250
main strength so you know looking at

00:08:45,300 --> 00:08:51,330
building the community distro for this

00:08:47,250 --> 00:08:53,220
new age inside openSUSE we started

00:08:51,330 --> 00:08:54,960
looking at this problem kind of yeah

00:08:53,220 --> 00:08:55,720
pretty much the route of just taking you

00:08:54,960 --> 00:08:59,259
in

00:08:55,720 --> 00:09:02,259
the Kubik project started in 2017

00:08:59,259 --> 00:09:03,970
it's a sub-project of openSUSE yeah

00:09:02,259 --> 00:09:06,160
looking at or looking all this stuff

00:09:03,970 --> 00:09:07,750
we've then you know because we have

00:09:06,160 --> 00:09:08,920
tumbleweed because we know how to do all

00:09:07,750 --> 00:09:11,370
of this stuff we've based all our

00:09:08,920 --> 00:09:13,089
efforts on the tumbleweed codebase and

00:09:11,370 --> 00:09:15,730
effectively built in your distribution

00:09:13,089 --> 00:09:19,660
derived from that focused on focused on

00:09:15,730 --> 00:09:23,290
this problem we're using cube ATM for

00:09:19,660 --> 00:09:26,819
kubernetes we're using the the pod man

00:09:23,290 --> 00:09:28,839
cryo family of container tools we have

00:09:26,819 --> 00:09:31,360
transactional atomic operating system

00:09:28,839 --> 00:09:32,889
updates and really heavily customized

00:09:31,360 --> 00:09:34,089
installation routine because you know

00:09:32,889 --> 00:09:36,040
we're a bunch of geeks and we still want

00:09:34,089 --> 00:09:38,800
to do like 500 things differently rather

00:09:36,040 --> 00:09:42,040
than just deploying the same thing all

00:09:38,800 --> 00:09:43,509
the time but it's a community project

00:09:42,040 --> 00:09:45,220
you know that's list of what we've been

00:09:43,509 --> 00:09:47,439
looking at right now we will look at

00:09:45,220 --> 00:09:49,470
anything else that anybody else wants

00:09:47,439 --> 00:09:51,430
and in fact there's some examples of

00:09:49,470 --> 00:09:53,319
stuff that's changed lately that I

00:09:51,430 --> 00:09:54,639
honestly had no idea what's happening

00:09:53,319 --> 00:09:55,959
until suddenly I had a release

00:09:54,639 --> 00:09:58,180
announcement for this really cool new

00:09:55,959 --> 00:10:01,540
feature and that's yeah it's an open

00:09:58,180 --> 00:10:04,059
SUSE project is how we do everything the

00:10:01,540 --> 00:10:06,430
base layer of cubic we call Micro OS and

00:10:04,059 --> 00:10:09,009
that's sort of the aiming to be the

00:10:06,430 --> 00:10:12,430
perfect container host it has a

00:10:09,009 --> 00:10:14,709
read-only route FS using but two FS for

00:10:12,430 --> 00:10:16,809
reasons I'll explain later and exec

00:10:14,709 --> 00:10:18,399
using part the cry Padma and cryo as its

00:10:16,809 --> 00:10:23,350
container one-time based on tumbleweed

00:10:18,399 --> 00:10:25,269
and the code of the general use cases

00:10:23,350 --> 00:10:27,759
for micro s on its own without something

00:10:25,269 --> 00:10:30,339
like kubernetes on top is like as a

00:10:27,759 --> 00:10:32,889
single container single server a single

00:10:30,339 --> 00:10:35,709
machine container hose you know so your

00:10:32,889 --> 00:10:36,970
typical sort of developers machine for

00:10:35,709 --> 00:10:37,990
you know running containers testing

00:10:36,970 --> 00:10:40,839
containing this building containers

00:10:37,990 --> 00:10:42,040
stuff like that you know using the

00:10:40,839 --> 00:10:43,750
features of like being completely

00:10:42,040 --> 00:10:45,639
roughly automated for updates so you

00:10:43,750 --> 00:10:46,300
know patches itself reboots itself takes

00:10:45,639 --> 00:10:48,819
care of itself

00:10:46,300 --> 00:10:51,129
rolls back if something goes wrong we're

00:10:48,819 --> 00:10:53,199
currently using cloud in it or probably

00:10:51,129 --> 00:10:54,550
moving to ignition soon for actually

00:10:53,199 --> 00:10:56,740
handling things like bootstrapping the

00:10:54,550 --> 00:10:58,300
machine initially I think things like

00:10:56,740 --> 00:11:02,559
SSH keys and the like so there's even

00:10:58,300 --> 00:11:04,600
less effort and the general idea

00:11:02,559 --> 00:11:06,939
conceptually is to have all services

00:11:04,600 --> 00:11:08,620
provided by containers that's a lie you

00:11:06,939 --> 00:11:10,180
need to have a bunch of services

00:11:08,620 --> 00:11:12,640
they're so the containers can do stuff

00:11:10,180 --> 00:11:15,220
but you know in terms of story that's

00:11:12,640 --> 00:11:17,620
the story and also we've started looking

00:11:15,220 --> 00:11:18,910
at other architectures so this is one of

00:11:17,620 --> 00:11:20,890
those features that I had no idea was

00:11:18,910 --> 00:11:23,050
coming until I had the blog post but

00:11:20,890 --> 00:11:25,510
like we have a fully working out 64 port

00:11:23,050 --> 00:11:36,970
now with all of this stuff rolling

00:11:25,510 --> 00:11:38,800
moving forward on AR 64 is it true you

00:11:36,970 --> 00:11:40,300
know generally speaking sis admins never

00:11:38,800 --> 00:11:43,840
want to touch a running system and yet

00:11:40,300 --> 00:11:45,400
almost every distribution we do forces

00:11:43,840 --> 00:11:47,620
them to touch their running system you

00:11:45,400 --> 00:11:49,330
know we apply updates binaries change

00:11:47,620 --> 00:11:50,890
libraries change conflicts files change

00:11:49,330 --> 00:11:52,360
and the Machine starts changing its

00:11:50,890 --> 00:11:53,740
behavior of yeah

00:11:52,360 --> 00:11:56,380
immediately after the point of that

00:11:53,740 --> 00:11:58,960
Patrick this ends up being a huge

00:11:56,380 --> 00:12:00,820
problem you know it's a dangerous

00:11:58,960 --> 00:12:02,650
problem you know services are running

00:12:00,820 --> 00:12:04,030
users are doing things and you know uses

00:12:02,650 --> 00:12:05,710
a half the problem most of the time it's

00:12:04,030 --> 00:12:07,120
what they've done ends up breaking you

00:12:05,710 --> 00:12:10,180
know what we've upgraded on what we've

00:12:07,120 --> 00:12:12,370
patched software changes things

00:12:10,180 --> 00:12:14,440
sometimes on purpose and you know as

00:12:12,370 --> 00:12:17,260
packages we don't necessarily always get

00:12:14,440 --> 00:12:19,150
it right and that's really bad when

00:12:17,260 --> 00:12:21,070
you've just done an update and yeah some

00:12:19,150 --> 00:12:26,800
rpm PostScript is accidentally deleted a

00:12:21,070 --> 00:12:28,150
database or something like that rolling

00:12:26,800 --> 00:12:29,230
releases make it even more complicated

00:12:28,150 --> 00:12:30,280
this is what we've learnt with

00:12:29,230 --> 00:12:31,990
tumbleweed you know things like

00:12:30,280 --> 00:12:34,090
intrusive updates changing from from

00:12:31,990 --> 00:12:36,880
system D to assist V in it to system D

00:12:34,090 --> 00:12:38,500
you know it's a huge big change and you

00:12:36,880 --> 00:12:40,180
know if you're just pushing out the

00:12:38,500 --> 00:12:42,760
updates in a rolling fashion you know

00:12:40,180 --> 00:12:44,470
you yeah you know suddenly Sisyphean it

00:12:42,760 --> 00:12:45,640
not being there because system DS are

00:12:44,470 --> 00:12:47,110
placed it that's going to have really

00:12:45,640 --> 00:12:48,610
weird side effects on your machine while

00:12:47,110 --> 00:12:50,230
it's running

00:12:48,610 --> 00:12:53,140
you know major version to update stacks

00:12:50,230 --> 00:12:55,390
to it you know and you know you what can

00:12:53,140 --> 00:12:57,280
users do if their system suddenly breaks

00:12:55,390 --> 00:12:59,080
you know if they're literally in the

00:12:57,280 --> 00:13:00,420
middle of doing work and G Lib C

00:12:59,080 --> 00:13:05,920
suddenly isn't there anymore

00:13:00,420 --> 00:13:07,300
most things stop working it's even worse

00:13:05,920 --> 00:13:08,830
when you start looking at the enterprise

00:13:07,300 --> 00:13:10,210
side of things you know on critical

00:13:08,830 --> 00:13:12,250
mission systems you know where you've

00:13:10,210 --> 00:13:14,710
got like large clouds of thing systems

00:13:12,250 --> 00:13:18,310
high availability some kind of service

00:13:14,710 --> 00:13:20,320
moving things around you know they know

00:13:18,310 --> 00:13:21,270
no one wants to have their service

00:13:20,320 --> 00:13:22,860
interrupted

00:13:21,270 --> 00:13:24,750
in reality they normally have enough

00:13:22,860 --> 00:13:27,000
redundancy that they don't care if the

00:13:24,750 --> 00:13:28,560
system is interrupted you know the this

00:13:27,000 --> 00:13:30,090
server itself can turn off because

00:13:28,560 --> 00:13:33,900
there's three other servers during that

00:13:30,090 --> 00:13:35,370
job as well but still we at the moment

00:13:33,900 --> 00:13:38,970
just push everything out and break all

00:13:35,370 --> 00:13:41,220
of them at the same time and you know

00:13:38,970 --> 00:13:44,040
you need to make sure that everything is

00:13:41,220 --> 00:13:45,690
upgraded in one consistent change now if

00:13:44,040 --> 00:13:47,130
you have a bunch of new packages do you

00:13:45,690 --> 00:13:49,320
know are they all applied are they all

00:13:47,130 --> 00:13:51,330
applied the same way and then if it

00:13:49,320 --> 00:13:54,000
don't you know in rpm Pro scripts are

00:13:51,330 --> 00:13:55,230
like the the kind of enemy number one to

00:13:54,000 --> 00:13:57,690
that idea you know it could very easily

00:13:55,230 --> 00:13:59,550
leave a system in a very undefined state

00:13:57,690 --> 00:14:00,750
it might be working it might not it

00:13:59,550 --> 00:14:03,900
might have done the same thing on every

00:14:00,750 --> 00:14:07,580
system it might not have yeah how do you

00:14:03,900 --> 00:14:09,570
deal with that in a safe in the same way

00:14:07,580 --> 00:14:11,700
so we were looking at this and couldn't

00:14:09,570 --> 00:14:14,040
call the the problem or the solution to

00:14:11,700 --> 00:14:16,470
the problem you know the transactional

00:14:14,040 --> 00:14:18,720
update as in database transaction you

00:14:16,470 --> 00:14:21,420
know one thing to have a system update

00:14:18,720 --> 00:14:23,250
that is atomic you know either it fully

00:14:21,420 --> 00:14:25,890
gets applied or none of it gets applied

00:14:23,250 --> 00:14:27,840
at all and we didn't want it to touch

00:14:25,890 --> 00:14:31,080
the running system in any way manner or

00:14:27,840 --> 00:14:32,910
form once it does touch the system once

00:14:31,080 --> 00:14:34,230
you have applied the update we also

00:14:32,910 --> 00:14:36,900
needed to be of course able to rollback

00:14:34,230 --> 00:14:40,380
that entire change in its entirety just

00:14:36,900 --> 00:14:42,180
in case something went wrong with Susan

00:14:40,380 --> 00:14:43,740
openSUSE we've been kind of trying to

00:14:42,180 --> 00:14:45,720
tackle this problem on one level for

00:14:43,740 --> 00:14:48,870
like 15 years with all of the work we do

00:14:45,720 --> 00:14:50,610
with butter FS and snapper so like on

00:14:48,870 --> 00:14:53,100
any Suzie distribution by default we

00:14:50,610 --> 00:14:54,510
install butter effects a package manager

00:14:53,100 --> 00:14:57,000
is tied to a snapshotting tool called

00:14:54,510 --> 00:14:58,650
snapper and whenever you patch the

00:14:57,000 --> 00:15:00,030
system which of course is touching the

00:14:58,650 --> 00:15:03,090
running system we do take a snapshot

00:15:00,030 --> 00:15:04,500
before and after so you know have a

00:15:03,090 --> 00:15:05,640
snapshot before so you know exactly what

00:15:04,500 --> 00:15:06,690
the state was before the past the

00:15:05,640 --> 00:15:09,420
changements are applied you have the

00:15:06,690 --> 00:15:11,610
snapshot after which is cool for being

00:15:09,420 --> 00:15:14,730
able to row back I mean that that part

00:15:11,610 --> 00:15:16,680
of the problem gets solved but it isn't

00:15:14,730 --> 00:15:18,360
atomic you know those RPM post scripts

00:15:16,680 --> 00:15:20,010
do change the running system you know

00:15:18,360 --> 00:15:22,920
the system changes in flux though in

00:15:20,010 --> 00:15:28,170
ablate it solves only half of the

00:15:22,920 --> 00:15:30,600
problem with transactional update

00:15:28,170 --> 00:15:33,180
basically what we did was realized that

00:15:30,600 --> 00:15:33,860
we kind of over engineered the solution

00:15:33,180 --> 00:15:36,560
in some respect

00:15:33,860 --> 00:15:39,290
you know beat the btrfs zipper and

00:15:36,560 --> 00:15:40,550
snapshots were you know because the

00:15:39,290 --> 00:15:42,380
system was running we're patching the

00:15:40,550 --> 00:15:43,970
running system you know we would in some

00:15:42,380 --> 00:15:49,400
respects doing twice as much work as we

00:15:43,970 --> 00:15:51,140
needed to what we do instead is we have

00:15:49,400 --> 00:15:53,210
the running system and that is actually

00:15:51,140 --> 00:15:54,770
a read-only root filesystem so no

00:15:53,210 --> 00:15:56,740
package manager can make any change to

00:15:54,770 --> 00:15:59,420
that system even if it wanted to

00:15:56,740 --> 00:16:01,760
then with btrfs we make a sub volume

00:15:59,420 --> 00:16:03,680
that's or staff shot that snapshot is

00:16:01,760 --> 00:16:05,780
therefore you know overlaying over that

00:16:03,680 --> 00:16:09,260
over overlaying over the root file

00:16:05,780 --> 00:16:10,670
system but that snapshot is readwrite we

00:16:09,260 --> 00:16:13,790
then effectively just redirect the

00:16:10,670 --> 00:16:16,040
output of the package manager to that

00:16:13,790 --> 00:16:17,630
snapshot so the snapshot gets patched

00:16:16,040 --> 00:16:19,190
not the running system the running

00:16:17,630 --> 00:16:20,780
system is running and every binary is

00:16:19,190 --> 00:16:22,370
untouched and every library is untouched

00:16:20,780 --> 00:16:24,920
and everything is clean clear and

00:16:22,370 --> 00:16:26,690
pristine but all of the changes no

00:16:24,920 --> 00:16:28,340
matter yeah no matter what they are with

00:16:26,690 --> 00:16:30,790
like rpm post scripts and what-have-you

00:16:28,340 --> 00:16:33,050
or get redirected into that snapshot

00:16:30,790 --> 00:16:35,660
which then when the update is finished

00:16:33,050 --> 00:16:37,790
we close and we set that to be the next

00:16:35,660 --> 00:16:39,980
boot target so when your system then

00:16:37,790 --> 00:16:42,950
reboots you're moving in one single jump

00:16:39,980 --> 00:16:45,710
to the new state of the system so it's

00:16:42,950 --> 00:16:47,240
kind of a effectively a hybrid model of

00:16:45,710 --> 00:16:48,440
you know where like you know with

00:16:47,240 --> 00:16:50,480
embedded devices you have all these

00:16:48,440 --> 00:16:53,060
images going out you deploy the image on

00:16:50,480 --> 00:16:55,910
you know the next boot but the really

00:16:53,060 --> 00:16:58,040
nice really nice thing with this is of

00:16:55,910 --> 00:17:00,050
course it's way more it's way more space

00:16:58,040 --> 00:17:01,340
efficient because you know but your FS

00:17:00,050 --> 00:17:03,380
and applets are only covering the diff

00:17:01,340 --> 00:17:05,480
of what to change so we don't have to

00:17:03,380 --> 00:17:08,000
carry like a whole second image of of

00:17:05,480 --> 00:17:10,010
the OS and you know flipping partitions

00:17:08,000 --> 00:17:12,530
or anything like that we can do two

00:17:10,010 --> 00:17:14,180
duplication over the whole thing there's

00:17:12,530 --> 00:17:16,339
also potential for sort of like

00:17:14,180 --> 00:17:17,780
over-the-air updates of sending the the

00:17:16,339 --> 00:17:19,339
snapshot to a different machine so you

00:17:17,780 --> 00:17:22,070
make sure everything's getting exactly

00:17:19,339 --> 00:17:23,060
the same update from an RPM point of

00:17:22,070 --> 00:17:24,470
view packaging point of view it also

00:17:23,060 --> 00:17:26,000
means we don't we haven't had to

00:17:24,470 --> 00:17:28,459
reinvent the packaging wheel you know we

00:17:26,000 --> 00:17:30,170
don't have to you know use some ornate

00:17:28,459 --> 00:17:32,540
new format we've developed and get it

00:17:30,170 --> 00:17:34,700
mature and get it using you know we can

00:17:32,540 --> 00:17:36,590
use the existing packages the existing

00:17:34,700 --> 00:17:38,900
way with minimal modifications isn't

00:17:36,590 --> 00:17:40,280
hopefully not at all so we don't have to

00:17:38,900 --> 00:17:41,630
learn new tools we don't have to learn

00:17:40,280 --> 00:17:43,580
new processes you know we can basically

00:17:41,630 --> 00:17:44,870
take all of the skills we've had and all

00:17:43,580 --> 00:17:47,480
the benefits we've learned from doing

00:17:44,870 --> 00:17:48,169
this stuff for four decades and apply it

00:17:47,480 --> 00:17:49,399
to this new world

00:17:48,169 --> 00:17:51,619
where people just want to have a system

00:17:49,399 --> 00:17:54,649
that you know moves immutably from one

00:17:51,619 --> 00:17:55,730
state to another doing it this way means

00:17:54,649 --> 00:17:58,190
of course you also had the benefit of

00:17:55,730 --> 00:18:00,169
like a normal boot time there isn't you

00:17:58,190 --> 00:18:01,489
know Pro handling things like processing

00:18:00,169 --> 00:18:04,249
OS trees we're figuring out you know

00:18:01,489 --> 00:18:06,019
what am i booting to and you have the

00:18:04,249 --> 00:18:07,730
benefit of incredibly quick rollback you

00:18:06,019 --> 00:18:09,440
know when when you boot up if that

00:18:07,730 --> 00:18:11,480
snapshot does not work the way from into

00:18:09,440 --> 00:18:12,889
you just throw the snapshot away and you

00:18:11,480 --> 00:18:15,529
boot again and you're back to exactly

00:18:12,889 --> 00:18:19,009
where you were so it's a very nice clean

00:18:15,529 --> 00:18:21,679
way of doing things does anybody want to

00:18:19,009 --> 00:18:26,409
see a demo of this working or I can move

00:18:21,679 --> 00:18:26,409
on ok fine let's see if this works

00:18:34,600 --> 00:18:37,980
this is fun doing it backwards over my

00:18:36,730 --> 00:18:44,220
head there we go

00:18:37,980 --> 00:18:44,220
nope thank you LibreOffice

00:18:54,309 --> 00:19:03,690
oh come on I love this demo a 13-4 for

00:19:04,619 --> 00:19:10,799
now sorry

00:19:20,130 --> 00:19:33,660
there we go does that look okay yeah

00:19:29,100 --> 00:19:36,510
kind of alright so this is a standard

00:19:33,660 --> 00:19:39,030
cubic machine installed with micro s so

00:19:36,510 --> 00:19:40,080
you know we've got things like hotman

00:19:39,030 --> 00:19:44,010
installed on there for running

00:19:40,080 --> 00:19:47,480
containers but we've got VI on there as

00:19:44,010 --> 00:19:50,160
well which is what I was not expecting

00:19:47,480 --> 00:19:52,679
but we don't have hey stop so you know

00:19:50,160 --> 00:19:54,090
we want to install a package for

00:19:52,679 --> 00:19:57,570
whatever reason to have a stop to

00:19:54,090 --> 00:20:02,150
monitor the system if I try and do an

00:19:57,570 --> 00:20:03,750
old-fashioned Zipit install a page top

00:20:02,150 --> 00:20:05,280
it's not going to work

00:20:03,750 --> 00:20:06,419
it's a transactional server which yeah

00:20:05,280 --> 00:20:08,610
unfortunately accommodates it it's a

00:20:06,419 --> 00:20:14,250
nice big red error message that faded at

00:20:08,610 --> 00:20:18,570
the bottom not really because this is a

00:20:14,250 --> 00:20:19,770
VM and this is a really dumb shell and I

00:20:18,570 --> 00:20:21,419
haven't installed anything that can

00:20:19,770 --> 00:20:45,059
increase the font because it's kind of a

00:20:21,419 --> 00:20:46,100
very minimal just now that's not gonna

00:20:45,059 --> 00:20:51,090
work

00:20:46,100 --> 00:20:53,789
there we go so yeah Haeju tops not found

00:20:51,090 --> 00:21:00,419
I can't install it cuz it's a

00:20:53,789 --> 00:21:04,549
transactional server there we go so

00:21:00,419 --> 00:21:07,700
instead I run our transactional update

00:21:04,549 --> 00:21:10,740
and hope the Wi-Fi is working one enough

00:21:07,700 --> 00:21:14,340
so this is just downloading creating the

00:21:10,740 --> 00:21:16,650
snapshot preparing the update and so you

00:21:14,340 --> 00:21:18,330
know now I'm getting the output from

00:21:16,650 --> 00:21:20,400
zipper so it's running our usual package

00:21:18,330 --> 00:21:21,409
manager saying you know do I want to

00:21:20,400 --> 00:21:26,130
install hey stop

00:21:21,409 --> 00:21:30,600
indeed I do it's installed aged up and

00:21:26,130 --> 00:21:32,040
now I type H stop and page stop isn't

00:21:30,600 --> 00:21:33,230
there because it hasn't touched the

00:21:32,040 --> 00:21:34,730
running system

00:21:33,230 --> 00:21:36,200
you know the running system is exactly

00:21:34,730 --> 00:21:39,590
the same state it was before I ran any

00:21:36,200 --> 00:21:40,940
of these commands which yeah it's kind

00:21:39,590 --> 00:21:42,159
of the point so the only way now getting

00:21:40,940 --> 00:21:44,659
hitched up on this machine is actually

00:21:42,159 --> 00:21:46,549
rebooting normally we have a service

00:21:44,659 --> 00:21:49,820
called Ruby manager which literally has

00:21:46,549 --> 00:21:51,139
a has a jewel it also can be set up to

00:21:49,820 --> 00:21:52,639
do stuff like checking for maintenance

00:21:51,139 --> 00:21:55,010
windows so you know your nodes only

00:21:52,639 --> 00:22:08,029
reboot when you want them to in this

00:21:55,010 --> 00:22:09,529
case so I'm just going to reboot not

00:22:08,029 --> 00:22:11,120
every action because you know you're

00:22:09,529 --> 00:22:12,679
gonna get stuff like you container apps

00:22:11,120 --> 00:22:14,769
don't apply to this you know so it's

00:22:12,679 --> 00:22:18,500
only when you're changing the OS beneath

00:22:14,769 --> 00:22:20,000
so yeah yeah so for the recording the

00:22:18,500 --> 00:22:22,580
question was yeah congratulations you've

00:22:20,000 --> 00:22:24,950
repeated the windows experience and my

00:22:22,580 --> 00:22:27,260
point was yeah you know not really

00:22:24,950 --> 00:22:28,850
because it is scoped you know with focus

00:22:27,260 --> 00:22:30,169
of just being for the OS with your

00:22:28,850 --> 00:22:33,740
applications coming from some other

00:22:30,169 --> 00:22:35,659
layer like containers so it's yeah on

00:22:33,740 --> 00:22:37,519
that level it's different and then the

00:22:35,659 --> 00:22:39,980
second one of course windows isn't

00:22:37,519 --> 00:22:41,990
atomic you know your your MSI runs

00:22:39,980 --> 00:22:44,389
screws your current system up and then

00:22:41,990 --> 00:22:46,909
you reboot at least this way you know

00:22:44,389 --> 00:22:49,340
your current systems fine and you reboot

00:22:46,909 --> 00:22:54,380
whenever it suits you so it's it's yeah

00:22:49,340 --> 00:22:56,360
a better model for that and there we go

00:22:54,380 --> 00:23:00,070
now we have a Cheeto so that's yeah

00:22:56,360 --> 00:23:00,070
transactional updates in a nutshell

00:23:14,360 --> 00:23:18,090
and as he saw then like the boot time

00:23:16,860 --> 00:23:22,640
was that sorry

00:23:18,090 --> 00:23:25,110
completely there we go

00:23:22,640 --> 00:23:27,570
so if you're interested in using it the

00:23:25,110 --> 00:23:30,270
commands yeah you need to to all their

00:23:27,570 --> 00:23:33,060
and very closely most of what we used to

00:23:30,270 --> 00:23:36,270
in a trans activist upper environment so

00:23:33,060 --> 00:23:38,190
things like zipper up zipper updates the

00:23:36,270 --> 00:23:40,550
entire package yeah transsexual update

00:23:38,190 --> 00:23:43,020
dumping up update the entire system

00:23:40,550 --> 00:23:44,970
there's also really nifty like debug

00:23:43,020 --> 00:23:47,490
style features like transactional update

00:23:44,970 --> 00:23:49,320
show where it will create the snapshot

00:23:47,490 --> 00:23:50,970
and then transaction update will just

00:23:49,320 --> 00:23:52,470
dump you into a shell in there so you

00:23:50,970 --> 00:23:54,690
can do whatever the heck you want then

00:23:52,470 --> 00:23:57,240
you exit it and you know that's your

00:23:54,690 --> 00:23:58,890
your single atomic updates so so the

00:23:57,240 --> 00:24:00,480
nice nice flexible way of doing it and

00:23:58,890 --> 00:24:03,390
then like rolling back just

00:24:00,480 --> 00:24:05,940
transactional update rollback this isn't

00:24:03,390 --> 00:24:07,800
an exclusively cubic thing so you know

00:24:05,940 --> 00:24:09,300
it's used also in Sousa cows platform

00:24:07,800 --> 00:24:11,310
for updating their their enterprise

00:24:09,300 --> 00:24:13,500
kubernetes distribution we use it of

00:24:11,310 --> 00:24:14,910
course in cubic and it's also available

00:24:13,500 --> 00:24:16,440
in the traditional openSUSE

00:24:14,910 --> 00:24:19,170
distributions suppose tumbleweed and

00:24:16,440 --> 00:24:21,480
leap have transactional server as an

00:24:19,170 --> 00:24:24,360
option so you kind of get everything in

00:24:21,480 --> 00:24:26,160
the the standard tumble yeah standard

00:24:24,360 --> 00:24:30,390
opens user distributions but with that

00:24:26,160 --> 00:24:34,830
mechanism for updating and also coming

00:24:30,390 --> 00:24:38,790
soon in the 315 Service Pack 1 as a tech

00:24:34,830 --> 00:24:40,830
preview in as a module in there and with

00:24:38,790 --> 00:24:42,420
some kind of known issues because you

00:24:40,830 --> 00:24:43,950
know there are some packages which do

00:24:42,420 --> 00:24:47,220
stuff that's just you know a little bit

00:24:43,950 --> 00:24:49,110
unfriendly like PHP myadmin writing to

00:24:47,220 --> 00:24:50,640
SRV where you know that of course isn't

00:24:49,110 --> 00:24:51,750
necessarily going to be directed because

00:24:50,640 --> 00:24:53,700
that's read right that's gonna change

00:24:51,750 --> 00:24:56,070
your meal time so it'll work it just you

00:24:53,700 --> 00:24:58,200
know might change something that it

00:24:56,070 --> 00:25:04,500
shouldn't change those will have the

00:24:58,200 --> 00:25:06,720
caveat is and avoid those packages cool

00:25:04,500 --> 00:25:08,790
features and and cool ways of delivering

00:25:06,720 --> 00:25:11,250
software kind of part of the story you

00:25:08,790 --> 00:25:12,330
know that we in openSUSE we try to talk

00:25:11,250 --> 00:25:14,150
a lot more about the bit that's really

00:25:12,330 --> 00:25:16,050
important exactly how we build it

00:25:14,150 --> 00:25:17,970
because it doesn't necessarily matter

00:25:16,050 --> 00:25:19,740
how cool it is today you know it matters

00:25:17,970 --> 00:25:21,090
how well is it going to work you know 10

00:25:19,740 --> 00:25:25,170
days you know ten days ten years from

00:25:21,090 --> 00:25:25,530
now whatever I with falling releases you

00:25:25,170 --> 00:25:27,000
know we've

00:25:25,530 --> 00:25:29,520
we've learned this rule which I kind of

00:25:27,000 --> 00:25:30,960
try to summarize here is if you're

00:25:29,520 --> 00:25:33,150
trying to move a complicated software

00:25:30,960 --> 00:25:35,640
stack you know the traditional option is

00:25:33,150 --> 00:25:37,140
you know you you build your thing you

00:25:35,640 --> 00:25:40,020
freeze your thing and then you spend

00:25:37,140 --> 00:25:42,180
ages back porting stuff on top of it

00:25:40,020 --> 00:25:43,170
Regina works but it's a lot of work in

00:25:42,180 --> 00:25:45,030
that work gets bigger and bigger over

00:25:43,170 --> 00:25:46,440
time when you're looking at doing

00:25:45,030 --> 00:25:48,810
something in a moaning release your goal

00:25:46,440 --> 00:25:50,490
should be to be able to effectively

00:25:48,810 --> 00:25:53,070
throw away your entire software

00:25:50,490 --> 00:25:55,020
distribution at will if you need it you

00:25:53,070 --> 00:25:56,640
know if that one library requires you to

00:25:55,020 --> 00:25:59,100
change 100 libraries which requires you

00:25:56,640 --> 00:26:00,480
to change 400 other things you know you

00:25:59,100 --> 00:26:03,000
need to have a process that can actually

00:26:00,480 --> 00:26:05,430
scale to that kind of change so you can

00:26:03,000 --> 00:26:07,020
just you know move the entire universe

00:26:05,430 --> 00:26:09,960
to get that new thing you want in there

00:26:07,020 --> 00:26:12,300
and yet still deliver it in a way that's

00:26:09,960 --> 00:26:13,680
work that's built properly and tested

00:26:12,300 --> 00:26:17,340
properly and works properly for your

00:26:13,680 --> 00:26:18,690
users with openSUSE we've got a few

00:26:17,340 --> 00:26:20,910
tricks up our sleeve you know we've had

00:26:18,690 --> 00:26:23,460
our build service now for well over a

00:26:20,910 --> 00:26:25,770
decade it's what we used to build all of

00:26:23,460 --> 00:26:27,270
our stuff I mean it also can be

00:26:25,770 --> 00:26:29,300
brilliant building packages for anybody

00:26:27,270 --> 00:26:32,220
else it's used by more and more people

00:26:29,300 --> 00:26:34,200
not just like the notes' foundation and

00:26:32,220 --> 00:26:35,970
VLC but also now within the container

00:26:34,200 --> 00:26:38,070
world anybody here used quatre

00:26:35,970 --> 00:26:41,190
containers for anything on any

00:26:38,070 --> 00:26:42,240
distribution nope same I got way more

00:26:41,190 --> 00:26:43,130
hands in the other room when I asked

00:26:42,240 --> 00:26:45,840
that question

00:26:43,130 --> 00:26:47,970
they're all of the category packages for

00:26:45,840 --> 00:26:51,810
every distribution or built on our big

00:26:47,970 --> 00:26:53,490
servers as part of the cubic project and

00:26:51,810 --> 00:26:56,340
now of course we're also using it for

00:26:53,490 --> 00:26:57,840
building containers because it's pretty

00:26:56,340 --> 00:27:00,810
much you know in many respects a lot of

00:26:57,840 --> 00:27:02,250
the problems OBS selves of making sure

00:27:00,810 --> 00:27:04,710
you know if this dependency over here

00:27:02,250 --> 00:27:06,120
changes the entire dependency chain gets

00:27:04,710 --> 00:27:07,890
rebuilt so you have a consistent

00:27:06,120 --> 00:27:09,660
offering you know a lot of container

00:27:07,890 --> 00:27:11,400
solutions don't do that so you end up

00:27:09,660 --> 00:27:14,250
with all these containers looking around

00:27:11,400 --> 00:27:15,360
with stale packages inside them or with

00:27:14,250 --> 00:27:17,130
the build service we know how to do that

00:27:15,360 --> 00:27:18,630
with rpms so we also know do it with

00:27:17,130 --> 00:27:20,640
containers so you know you can build a

00:27:18,630 --> 00:27:22,770
container have whatever packages you

00:27:20,640 --> 00:27:24,540
want in there and when OBS notices those

00:27:22,770 --> 00:27:25,890
packages have changed it will actually

00:27:24,540 --> 00:27:27,540
we bought the container for you and you

00:27:25,890 --> 00:27:30,090
have you know nice fresh containers all

00:27:27,540 --> 00:27:32,310
of the time and that's yeah registry

00:27:30,090 --> 00:27:34,170
openSUSE dorg literally any container

00:27:32,310 --> 00:27:36,360
you build on OBS will appear in there in

00:27:34,170 --> 00:27:37,000
its own namespace so you can start using

00:27:36,360 --> 00:27:39,809
it to play

00:27:37,000 --> 00:27:42,490
with that kind of thing buildings cool

00:27:39,809 --> 00:27:46,360
but you know what doesn't matter unless

00:27:42,490 --> 00:27:49,539
it works so you know we're using open QA

00:27:46,360 --> 00:27:51,520
we've started it it's you know the oh

00:27:49,539 --> 00:27:52,960
yeah it's a bunch of Perl scripts really

00:27:51,520 --> 00:27:56,289
but it's a bunch of Perl scripts we talk

00:27:52,960 --> 00:27:57,070
to to act like a human and I'm not sure

00:27:56,289 --> 00:28:00,190
which is worse

00:27:57,070 --> 00:28:01,900
um but you know it's the only solution

00:28:00,190 --> 00:28:04,030
out there that can really test a

00:28:01,900 --> 00:28:05,500
distributional test anything the same

00:28:04,030 --> 00:28:07,630
way a user's going to use it you can see

00:28:05,500 --> 00:28:10,690
the screen it can see the UI it's aware

00:28:07,630 --> 00:28:12,190
of which areas of the UI it's interested

00:28:10,690 --> 00:28:14,860
in it can move the mouse it can click

00:28:12,190 --> 00:28:16,720
everything so with open QA what we

00:28:14,860 --> 00:28:18,909
basically do is test hundreds of

00:28:16,720 --> 00:28:21,610
different scenarios and digging down

00:28:18,909 --> 00:28:23,500
into those scenarios actually making

00:28:21,610 --> 00:28:24,640
sure that the user experience of using

00:28:23,500 --> 00:28:26,980
that you know using the distribution

00:28:24,640 --> 00:28:28,929
using the tools on the distribution is

00:28:26,980 --> 00:28:32,020
acting the way it's meant to work and

00:28:28,929 --> 00:28:33,669
the slightest deviation like for example

00:28:32,020 --> 00:28:37,240
someone changing the background on grub

00:28:33,669 --> 00:28:38,770
you know will get caught will will stop

00:28:37,240 --> 00:28:40,600
the test so you know you can actually

00:28:38,770 --> 00:28:45,669
make sure was this an intentional change

00:28:40,600 --> 00:28:47,830
or not with these tools tied together we

00:28:45,669 --> 00:28:50,500
basically built what now would be

00:28:47,830 --> 00:28:53,140
trended according a CI pipeline for

00:28:50,500 --> 00:28:55,450
building distributions and this rough

00:28:53,140 --> 00:28:56,919
workflow is what we use for cubic this

00:28:55,450 --> 00:28:58,270
is what we use for tumbleweed this is

00:28:56,919 --> 00:29:01,419
what we use for leap it's what we used

00:28:58,270 --> 00:29:04,000
for Slee in some form where yeah any

00:29:01,419 --> 00:29:05,169
submission gets sent in gets

00:29:04,000 --> 00:29:08,470
automatically checked by a whole bunch

00:29:05,169 --> 00:29:10,710
of scripts and linters in OBS we then do

00:29:08,470 --> 00:29:13,030
sort of one tier of open QA testing

00:29:10,710 --> 00:29:15,100
making sure basically like is this

00:29:13,030 --> 00:29:16,929
admission putting like the entire code

00:29:15,100 --> 00:29:19,330
base at risk like is it is it just gonna

00:29:16,929 --> 00:29:21,820
destroy everything and block us from

00:29:19,330 --> 00:29:24,280
testing anything in the future then at

00:29:21,820 --> 00:29:25,690
that point humans get involved and

00:29:24,280 --> 00:29:27,400
there's a manual view of you know the

00:29:25,690 --> 00:29:30,130
usual kind of checks making sure you

00:29:27,400 --> 00:29:31,539
know is this thing is this change saying

00:29:30,130 --> 00:29:34,360
is it solving the issues we want it to

00:29:31,539 --> 00:29:36,340
self if you mean that gets accepted it

00:29:34,360 --> 00:29:38,919
then gets put into what we call factory

00:29:36,340 --> 00:29:40,390
where basically it's the yeah the

00:29:38,919 --> 00:29:42,580
prototype for the for the the next

00:29:40,390 --> 00:29:43,840
release of the distribution where we

00:29:42,580 --> 00:29:45,669
then build all of that stuff

00:29:43,840 --> 00:29:48,940
consistently and we test all of that

00:29:45,669 --> 00:29:50,470
stuff as an individual distribution in

00:29:48,940 --> 00:29:50,890
the case of tumbleweed and cubic we

00:29:50,470 --> 00:29:52,660
basic

00:29:50,890 --> 00:29:55,150
ooh tumbleweed in cubic in absolute

00:29:52,660 --> 00:29:58,600
lockstep in parallel so we then take the

00:29:55,150 --> 00:30:00,970
the ISOs and the Q the images and and

00:29:58,600 --> 00:30:03,280
the FDP trees that get produced by

00:30:00,970 --> 00:30:05,860
factory and we test them in parallel in

00:30:03,280 --> 00:30:08,650
open QA because they're all based on the

00:30:05,860 --> 00:30:10,540
same codebase ultimately and assuming

00:30:08,650 --> 00:30:13,720
all of the open QA test pass that means

00:30:10,540 --> 00:30:16,390
everything from like KDE and Gnome to

00:30:13,720 --> 00:30:17,830
you know kubernetes and pod man you know

00:30:16,390 --> 00:30:19,720
when they're all when they're all

00:30:17,830 --> 00:30:22,750
sufficiently green they get shipped

00:30:19,720 --> 00:30:24,100
automatically to users so you know it's

00:30:22,750 --> 00:30:27,310
sort of you know DevOps for

00:30:24,100 --> 00:30:28,630
distributions and then I've talked about

00:30:27,310 --> 00:30:29,710
all this testing and all this building

00:30:28,630 --> 00:30:31,150
and then you know people say well yeah

00:30:29,710 --> 00:30:33,220
but I run an arch like I just want

00:30:31,150 --> 00:30:35,460
everything now you know I don't want to

00:30:33,220 --> 00:30:38,020
wait for this building and testing stuff

00:30:35,460 --> 00:30:39,430
looking upstream projects I'd say you

00:30:38,020 --> 00:30:43,140
know we've got kind of a bit of evidence

00:30:39,430 --> 00:30:45,910
that we can keep up so with kubernetes

00:30:43,140 --> 00:30:48,210
they released version 113 December the

00:30:45,910 --> 00:30:51,370
third we shipped just over a week later

00:30:48,210 --> 00:30:53,770
with cryo yeah shipping three days

00:30:51,370 --> 00:30:55,090
afterwards and with pod man I made a

00:30:53,770 --> 00:30:59,110
mistake and shipped it before they

00:30:55,090 --> 00:31:01,150
announced it but yeah it's really the

00:30:59,110 --> 00:31:03,730
process really can keep up we can build

00:31:01,150 --> 00:31:05,050
the stuff test it in you know ship it's

00:31:03,730 --> 00:31:06,640
you know it moves at the pace of

00:31:05,050 --> 00:31:10,630
contribution just like everything else

00:31:06,640 --> 00:31:11,950
in openSUSE now I've managed to go

00:31:10,630 --> 00:31:15,670
through this entire presentation by only

00:31:11,950 --> 00:31:18,550
mentioning the d-word wants docker I'm

00:31:15,670 --> 00:31:20,890
not a huge fan of docker and when not

00:31:18,550 --> 00:31:22,810
huge fans of docker inside the Kubik

00:31:20,890 --> 00:31:25,810
project for a whole host of reasons

00:31:22,810 --> 00:31:27,040
which I haven't got time to go into the

00:31:25,810 --> 00:31:29,260
simple and short ones are just

00:31:27,040 --> 00:31:31,000
architectural II speaking you know

00:31:29,260 --> 00:31:33,670
looking at this container stuff from a

00:31:31,000 --> 00:31:35,980
distribution person's perspective it's

00:31:33,670 --> 00:31:38,560
this massive monolithic daemon which if

00:31:35,980 --> 00:31:39,880
it goes wrong you're completely screwed

00:31:38,560 --> 00:31:41,890
when it comes to all of your containers

00:31:39,880 --> 00:31:43,720
running on top of it you know you can't

00:31:41,890 --> 00:31:45,490
manage your containers if it gets in if

00:31:43,720 --> 00:31:47,860
it gets breached all of your containers

00:31:45,490 --> 00:31:51,130
are exposed you know it's it's a it's a

00:31:47,860 --> 00:31:53,740
just a huge nasty clutch of solving the

00:31:51,130 --> 00:31:56,440
problems they were trying to solve and

00:31:53,740 --> 00:31:58,510
luckily though you know what the docket

00:31:56,440 --> 00:32:02,230
isn't the only answer to really solving

00:31:58,510 --> 00:32:04,870
those problems in the kubernetes land

00:32:02,230 --> 00:32:07,120
there is an alternative one time

00:32:04,870 --> 00:32:09,850
running the same kind of container so

00:32:07,120 --> 00:32:12,760
it's still OCI containers during the

00:32:09,850 --> 00:32:15,870
normal container of stuff but built for

00:32:12,760 --> 00:32:17,559
kubernetes focused on kubernetes white

00:32:15,870 --> 00:32:19,419
ridiculously more lightweight in

00:32:17,559 --> 00:32:21,340
comparison so you know not having huge

00:32:19,419 --> 00:32:24,250
demons running on every machine but just

00:32:21,340 --> 00:32:25,960
kubernetes spawning the cryo process the

00:32:24,250 --> 00:32:27,640
container is a child of that process

00:32:25,960 --> 00:32:29,490
though in a good old fashioned UNIX

00:32:27,640 --> 00:32:31,809
philosophy keeping it simple and that

00:32:29,490 --> 00:32:34,480
also that makes it easier to tie it up

00:32:31,809 --> 00:32:36,460
with you know the other tooling and

00:32:34,480 --> 00:32:37,809
techniques we've been using to secure

00:32:36,460 --> 00:32:39,970
our systems for years

00:32:37,809 --> 00:32:41,440
things like selinux an app armour you

00:32:39,970 --> 00:32:43,510
know with docker you have to if you want

00:32:41,440 --> 00:32:45,070
to try and wrap app arm around docker

00:32:43,510 --> 00:32:46,419
you know it's a complete nightmare

00:32:45,070 --> 00:32:48,190
because you basically just end up poking

00:32:46,419 --> 00:32:50,770
holes for every single container that

00:32:48,190 --> 00:32:52,270
you possibly have just so it can get

00:32:50,770 --> 00:32:54,910
hold of the resources it needs on the

00:32:52,270 --> 00:32:56,679
base operating system well with cryo and

00:32:54,910 --> 00:32:58,510
cryo like runtimes

00:32:56,679 --> 00:33:00,910
you know it's just a single process so

00:32:58,510 --> 00:33:03,429
each container can have their own app

00:33:00,910 --> 00:33:05,440
I'm a profile which gives just that

00:33:03,429 --> 00:33:07,929
container just the access it needs to

00:33:05,440 --> 00:33:08,860
just the bits on the system at once so

00:33:07,929 --> 00:33:11,410
when you think of like a typical

00:33:08,860 --> 00:33:13,240
container being you know some binary

00:33:11,410 --> 00:33:15,280
running some service and you know

00:33:13,240 --> 00:33:17,049
despite the dream of everything being

00:33:15,280 --> 00:33:18,700
stateless that's never true so there's

00:33:17,049 --> 00:33:21,669
always some data somewhere that needs to

00:33:18,700 --> 00:33:23,080
have have some access well with this

00:33:21,669 --> 00:33:25,210
model it's quite easy to have an Apollo

00:33:23,080 --> 00:33:26,620
profile that you know just gives access

00:33:25,210 --> 00:33:28,630
to the bits of the OS that container

00:33:26,620 --> 00:33:30,850
nice to see and that one storage

00:33:28,630 --> 00:33:32,559
location so the container can get to a

00:33:30,850 --> 00:33:34,210
storage and everything else the

00:33:32,559 --> 00:33:37,900
container can't see and you know life is

00:33:34,210 --> 00:33:39,850
nice and safe but like I said cryo is is

00:33:37,900 --> 00:33:41,230
very much kubernetes centric so if you

00:33:39,850 --> 00:33:42,760
run a cube where these cluster cryo is

00:33:41,230 --> 00:33:44,470
under the knee underneath that thing but

00:33:42,760 --> 00:33:45,880
it's sort of abstracted away from really

00:33:44,470 --> 00:33:49,780
interacting with it you're not going to

00:33:45,880 --> 00:33:51,280
see anything interesting for those of us

00:33:49,780 --> 00:33:52,750
just messing around with containers like

00:33:51,280 --> 00:33:55,210
on our workstations or on like a

00:33:52,750 --> 00:33:59,169
standalone server to replace docker

00:33:55,210 --> 00:34:01,240
we're using pod map it's basically a

00:33:59,169 --> 00:34:04,809
drop-in replacement for the command line

00:34:01,240 --> 00:34:06,070
for docker you know it's it's yeah using

00:34:04,809 --> 00:34:06,730
the same containers like I say it's just

00:34:06,070 --> 00:34:08,710
like cryo

00:34:06,730 --> 00:34:11,889
it shares a lot of the same concepts and

00:34:08,710 --> 00:34:13,600
libraries with cryo and in fact at some

00:34:11,889 --> 00:34:14,710
point they're you know going to be

00:34:13,600 --> 00:34:17,609
aligned more than probably merged

00:34:14,710 --> 00:34:20,740
together in at least some form

00:34:17,609 --> 00:34:22,599
the syntax is like practically the same

00:34:20,740 --> 00:34:24,579
you know Padma and run is the same as

00:34:22,599 --> 00:34:25,329
docker run what man pull is the same as

00:34:24,579 --> 00:34:27,220
docker pull

00:34:25,329 --> 00:34:30,970
so in fact on my systems I just use it

00:34:27,220 --> 00:34:35,109
and haven't run docker for a year there

00:34:30,970 --> 00:34:37,409
is kind of one big difference is pod man

00:34:35,109 --> 00:34:40,659
has no equivalent to docker compose

00:34:37,409 --> 00:34:43,599
because being sort of a child of the

00:34:40,659 --> 00:34:45,129
ideas behind cry oh you've got Cuban

00:34:43,599 --> 00:34:46,839
Eddie's in Cuba in Cuba Nettie's land

00:34:45,129 --> 00:34:48,730
when you have a complex container

00:34:46,839 --> 00:34:50,260
service instead of having like a docker

00:34:48,730 --> 00:34:51,779
compose file where you're defining all

00:34:50,260 --> 00:34:54,700
the different containers in some llamo

00:34:51,779 --> 00:34:56,589
you have a kubernetes QB amyl which

00:34:54,700 --> 00:34:58,809
defines all of the containers for you

00:34:56,589 --> 00:35:00,549
your pods for cuban Eddie's so it's

00:34:58,809 --> 00:35:02,140
basically the same concept but you know

00:35:00,549 --> 00:35:05,619
more people are using kubernetes these

00:35:02,140 --> 00:35:08,289
days so that's where pod man gets its

00:35:05,619 --> 00:35:11,079
name it's the manager for pods so it has

00:35:08,289 --> 00:35:13,390
additional functionality for running or

00:35:11,079 --> 00:35:15,279
creating pods by hand if you want to so

00:35:13,390 --> 00:35:17,619
you can literally start a couple of

00:35:15,279 --> 00:35:19,180
containers create a pod you know without

00:35:17,619 --> 00:35:21,339
having to write any llamo which is kind

00:35:19,180 --> 00:35:22,720
of nice you can then have Padma and

00:35:21,339 --> 00:35:24,369
generate that llamo for you which is

00:35:22,720 --> 00:35:27,670
really nice I don't like writing that

00:35:24,369 --> 00:35:29,170
much or you can take existing llamo

00:35:27,670 --> 00:35:32,200
templates for existing kubernetes

00:35:29,170 --> 00:35:34,960
clusters thanks and running it on yeah

00:35:32,200 --> 00:35:36,940
on your pod map machine's dead so dr.

00:35:34,960 --> 00:35:40,359
Campos is missing but to be honest it

00:35:36,940 --> 00:35:42,640
kind of not really needed there's also

00:35:40,359 --> 00:35:44,380
some extra nice features that people

00:35:42,640 --> 00:35:46,630
working with docker kind of really wish

00:35:44,380 --> 00:35:47,950
they could have things like deleting all

00:35:46,630 --> 00:35:50,950
of your containers or deleting all of

00:35:47,950 --> 00:35:54,970
your images that's a kind of another

00:35:50,950 --> 00:35:57,009
reason why these these tools have have

00:35:54,970 --> 00:35:58,859
my heart you know that full requests for

00:35:57,009 --> 00:36:01,890
that have been lurking in in Dockers

00:35:58,859 --> 00:36:04,119
yeah github history for like years

00:36:01,890 --> 00:36:06,009
import map it's there it works

00:36:04,119 --> 00:36:07,779
the downside of all this really cool

00:36:06,009 --> 00:36:09,670
upstream and open source stuff is you

00:36:07,779 --> 00:36:10,960
know when I mount a pod man you know

00:36:09,670 --> 00:36:13,779
they tell me just to fix it because

00:36:10,960 --> 00:36:14,859
they'll accept my pool requests which in

00:36:13,779 --> 00:36:17,289
the past I could just make everything

00:36:14,859 --> 00:36:19,779
doctor's problem yeah it's kind of it's

00:36:17,289 --> 00:36:21,400
a nice problem to have and being more

00:36:19,779 --> 00:36:23,410
lightweight being a simple process

00:36:21,400 --> 00:36:25,390
running on a machine starting container

00:36:23,410 --> 00:36:26,890
it means you can also be very

00:36:25,390 --> 00:36:28,539
interesting sort of orchestration East

00:36:26,890 --> 00:36:29,359
kind of things like tying it up with

00:36:28,539 --> 00:36:32,029
systemd

00:36:29,359 --> 00:36:33,829
so having like you know systemd starting

00:36:32,029 --> 00:36:35,630
your containers stopping them using

00:36:33,829 --> 00:36:36,979
socket activation so the container only

00:36:35,630 --> 00:36:40,309
starts when a user is trying to access

00:36:36,979 --> 00:36:41,719
it which yeah nice features are kind of

00:36:40,309 --> 00:36:44,059
yeah potential I don't think it's been

00:36:41,719 --> 00:36:49,190
fully realized yet but yeah we can see

00:36:44,059 --> 00:36:52,609
see where we go with that one building

00:36:49,190 --> 00:36:54,559
containers Padma and build basically

00:36:52,609 --> 00:36:56,749
emulates exactly the same way docker

00:36:54,559 --> 00:36:59,180
build works but there's more ways of

00:36:56,749 --> 00:37:02,599
building containers so the order

00:36:59,180 --> 00:37:04,519
effectively yeah does all of that in a

00:37:02,599 --> 00:37:07,609
million different ways so yeah building

00:37:04,519 --> 00:37:09,969
from scratch building from images your

00:37:07,609 --> 00:37:12,799
existing images using a docker file I

00:37:09,969 --> 00:37:14,589
can do that the standards-compliant OCI

00:37:12,799 --> 00:37:16,640
format or we can do the docker format

00:37:14,589 --> 00:37:18,109
and you can also do really cool stuff

00:37:16,640 --> 00:37:20,900
like just take an existing container

00:37:18,109 --> 00:37:23,930
mount it make your changes you know

00:37:20,900 --> 00:37:24,979
inner shell unmount it and then actually

00:37:23,930 --> 00:37:28,309
create a new containers from that

00:37:24,979 --> 00:37:29,900
changed instance which is just a far

00:37:28,309 --> 00:37:31,910
nicer way of doing things and trying to

00:37:29,900 --> 00:37:33,259
like manually inject it with you know

00:37:31,910 --> 00:37:36,380
other tools like a lot of other places

00:37:33,259 --> 00:37:37,579
trying to then once you containers built

00:37:36,380 --> 00:37:39,079
you've got to put it somewhere you need

00:37:37,579 --> 00:37:41,509
some registry or you need to you know

00:37:39,079 --> 00:37:44,329
handle that and we have yeah scorpio for

00:37:41,509 --> 00:37:48,309
handling uploading controlling deleting

00:37:44,329 --> 00:37:50,359
the contents of a container registry

00:37:48,309 --> 00:37:53,630
outside of all that sort of stand-alone

00:37:50,359 --> 00:37:56,299
container stuff we have cube ATM which

00:37:53,630 --> 00:37:58,699
is the upstream kubernetes cluster

00:37:56,299 --> 00:37:59,779
bootstrapping tool so you know creating

00:37:58,699 --> 00:38:00,920
a Cuban that is cluster you have the

00:37:59,779 --> 00:38:02,569
issue of you know you need to have at

00:38:00,920 --> 00:38:04,759
least three or four nodes all working in

00:38:02,569 --> 00:38:06,049
conjunction to run your containers how

00:38:04,759 --> 00:38:07,849
do you get those three or four nodes to

00:38:06,049 --> 00:38:10,130
talk to each other lots and lots of

00:38:07,849 --> 00:38:12,859
people have tried home brewing their own

00:38:10,130 --> 00:38:13,849
solutions and it kind of got so messy to

00:38:12,859 --> 00:38:15,319
the point where like Cuban ladies

00:38:13,849 --> 00:38:17,029
upstream like started like okay we're

00:38:15,319 --> 00:38:19,519
just gonna build one tool that like at

00:38:17,029 --> 00:38:21,859
least does the basics so everybody does

00:38:19,519 --> 00:38:23,900
the basics right we've really embraced

00:38:21,859 --> 00:38:26,059
that and we're wanting to use that as

00:38:23,900 --> 00:38:27,319
much as possible you know the issues we

00:38:26,059 --> 00:38:29,299
bump into you know we're working with

00:38:27,319 --> 00:38:30,920
upstream to extend it and then you know

00:38:29,299 --> 00:38:32,449
if people come up with additional third

00:38:30,920 --> 00:38:35,779
party additions which don't work

00:38:32,449 --> 00:38:38,299
upstream we'll look at using them it was

00:38:35,779 --> 00:38:41,209
ga-in kubernetes in version 113 so just

00:38:38,299 --> 00:38:42,740
before December before Christmas and

00:38:41,209 --> 00:38:43,940
from a Cuban idea from a cube

00:38:42,740 --> 00:38:46,010
point of view it's incredibly nice

00:38:43,940 --> 00:38:48,320
because it's completely decoupled from

00:38:46,010 --> 00:38:50,480
the operating system so it creates your

00:38:48,320 --> 00:38:52,940
kubernetes cluster in containers so

00:38:50,480 --> 00:38:55,280
those containers can have their own life

00:38:52,940 --> 00:38:57,230
cycle can be you know replaced when you

00:38:55,280 --> 00:38:59,270
want to replace your containers and the

00:38:57,230 --> 00:39:03,530
operating system can just happily patch

00:38:59,270 --> 00:39:05,089
reboot whenever it wants so yeah it kind

00:39:03,530 --> 00:39:06,619
of fits in perfectly with the whole way

00:39:05,089 --> 00:39:08,180
of thinking of what an operating system

00:39:06,619 --> 00:39:11,750
should do and what the containers should

00:39:08,180 --> 00:39:16,070
be doing on top setting up a cube ATM

00:39:11,750 --> 00:39:19,940
cluster is nice and easy we have all the

00:39:16,070 --> 00:39:23,869
instructions on our wiki basically you

00:39:19,940 --> 00:39:26,180
take the cubic I so start it up say

00:39:23,869 --> 00:39:27,710
you're going to 1 cube ATM doesn't

00:39:26,180 --> 00:39:29,480
matter if it's going to be a master or a

00:39:27,710 --> 00:39:30,770
slave because you know it's all we

00:39:29,480 --> 00:39:32,390
actually going to install it exactly the

00:39:30,770 --> 00:39:35,119
same binaries and then the difference

00:39:32,390 --> 00:39:37,130
will be handled by the containers on the

00:39:35,119 --> 00:39:41,420
machine you want it to be the master

00:39:37,130 --> 00:39:42,980
node you run one simple command to

00:39:41,420 --> 00:39:44,510
initialize that master node they

00:39:42,980 --> 00:39:47,480
basically downloads the control plane

00:39:44,510 --> 00:39:49,070
sets up kubernetes properly yeah

00:39:47,480 --> 00:39:50,810
configures everything the right way at

00:39:49,070 --> 00:39:53,240
the moment you have to actually declare

00:39:50,810 --> 00:39:54,770
the fact that you're using cryo that

00:39:53,240 --> 00:39:57,500
part of the string will disappear in

00:39:54,770 --> 00:39:59,300
1:14 because we need it to disappear 114

00:39:57,500 --> 00:40:02,420
so you can auto detect which runtime

00:39:59,300 --> 00:40:05,660
you're using and then at the end of that

00:40:02,420 --> 00:40:07,580
you get a nice text output of yeah your

00:40:05,660 --> 00:40:10,010
cluster is basically built and done and

00:40:07,580 --> 00:40:11,990
you have this string here which is the

00:40:10,010 --> 00:40:15,530
string you run thanks on the other

00:40:11,990 --> 00:40:17,450
machines so they can join your cluster

00:40:15,530 --> 00:40:23,510
it basically includes their the

00:40:17,450 --> 00:40:24,800
discovery key you need to have some tool

00:40:23,510 --> 00:40:26,420
to manage that cluster you know now

00:40:24,800 --> 00:40:27,680
you've initialized it so there's a

00:40:26,420 --> 00:40:31,130
couple of commands you need to run to

00:40:27,680 --> 00:40:33,080
basically extract to extract the key so

00:40:31,130 --> 00:40:34,910
your machine could be trusted to run the

00:40:33,080 --> 00:40:38,270
cluster so basically set up the admin

00:40:34,910 --> 00:40:40,609
console so yeah normally you'd do that

00:40:38,270 --> 00:40:42,140
well yeah you can very easily do that on

00:40:40,609 --> 00:40:43,430
the machine your company working on but

00:40:42,140 --> 00:40:44,869
if you want to handle it remotely you

00:40:43,430 --> 00:40:47,470
just take those files and you know

00:40:44,869 --> 00:40:50,150
deploy them wherever the hell you like

00:40:47,470 --> 00:40:51,710
you need to network in kubernetes land

00:40:50,150 --> 00:40:55,250
there are tons and tons of different

00:40:51,710 --> 00:40:56,450
network layers or using CNI in the case

00:40:55,250 --> 00:40:58,099
of cubic we're testing

00:40:56,450 --> 00:41:01,369
flannel mostly at the moment from core

00:40:58,099 --> 00:41:02,660
OS so once your network once your class

00:41:01,369 --> 00:41:05,089
has got to that point you just you know

00:41:02,660 --> 00:41:07,339
deploy your your flannel containers or

00:41:05,089 --> 00:41:08,900
your CNI containers of choice and that

00:41:07,339 --> 00:41:10,550
set up the network so the other nodes

00:41:08,900 --> 00:41:11,839
can actually join something you know

00:41:10,550 --> 00:41:16,430
they need to be they need some network

00:41:11,839 --> 00:41:17,720
to actually work together and then once

00:41:16,430 --> 00:41:20,060
that's configured you go to the other

00:41:17,720 --> 00:41:21,589
nodes and you run that string and you

00:41:20,060 --> 00:41:23,630
have a working kubernetes cluster and

00:41:21,589 --> 00:41:25,760
you can start actually running your

00:41:23,630 --> 00:41:26,720
containers on a highly available fabric

00:41:25,760 --> 00:41:27,829
because of things you know

00:41:26,720 --> 00:41:35,240
move along between the different

00:41:27,829 --> 00:41:36,680
machines I was going to try and do a

00:41:35,240 --> 00:41:38,420
demo but you know I don't quite have

00:41:36,680 --> 00:41:42,320
enough RAM on this laptop to run like

00:41:38,420 --> 00:41:44,119
three nodes at the same time yeah and so

00:41:42,320 --> 00:41:45,980
with yeah at the moment we're working

00:41:44,119 --> 00:41:48,470
very closely with upstream Cuba Nettie's

00:41:45,980 --> 00:41:50,270
so you know using their stuff filing

00:41:48,470 --> 00:41:52,310
most of our issues upstream first not

00:41:50,270 --> 00:41:55,160
really carrying any patches for any of

00:41:52,310 --> 00:41:57,220
this stuff in cubic and it's working out

00:41:55,160 --> 00:41:59,810
quite nicely because as of two weeks ago

00:41:57,220 --> 00:42:02,720
cubic actually became the first open

00:41:59,810 --> 00:42:05,390
source community distribution certified

00:42:02,720 --> 00:42:07,010
by the CN CF so you know it's certified

00:42:05,390 --> 00:42:08,329
kubernetes following all of their

00:42:07,010 --> 00:42:11,780
standards passing all of their test

00:42:08,329 --> 00:42:14,420
suites commonly on 113 which is the

00:42:11,780 --> 00:42:17,960
latest upstream release I'm hoping with

00:42:14,420 --> 00:42:19,760
114 to actually use that whole CI

00:42:17,960 --> 00:42:20,630
process of hours of building and testing

00:42:19,760 --> 00:42:22,670
so will actually be the first

00:42:20,630 --> 00:42:25,910
distribution even faster than the other

00:42:22,670 --> 00:42:28,640
all the enterprise ones to have 114 in

00:42:25,910 --> 00:42:31,819
there should work at least over three as

00:42:28,640 --> 00:42:33,380
close as we can and when it comes to

00:42:31,819 --> 00:42:35,660
yeah that comes to everything we're

00:42:33,380 --> 00:42:39,500
doing right now when it comes to what

00:42:35,660 --> 00:42:41,210
next whatever the community wants you

00:42:39,500 --> 00:42:43,550
know this this is working really nicely

00:42:41,210 --> 00:42:45,170
now the container world's moving

00:42:43,550 --> 00:42:48,200
incredibly quickly so if anybody has any

00:42:45,170 --> 00:42:54,579
bright ideas now would be a good time

00:42:48,200 --> 00:42:54,579
for the ideas or for questions thank you

00:42:59,680 --> 00:43:18,680
yes sir yes yep so the question was this

00:43:16,609 --> 00:43:20,420
is yeah is this a container version of

00:43:18,680 --> 00:43:24,260
tumbleweed the answer for that is yes

00:43:20,420 --> 00:43:26,390
and given that is there going to be a

00:43:24,260 --> 00:43:29,960
sort of a longer-term supported version

00:43:26,390 --> 00:43:31,839
of cubic I'm not going to say no because

00:43:29,960 --> 00:43:34,130
when I started working on cubic

00:43:31,839 --> 00:43:36,380
literally the first thing I did was

00:43:34,130 --> 00:43:38,030
change a lot of the structure we were

00:43:36,380 --> 00:43:38,780
doing to kind of make room for that

00:43:38,030 --> 00:43:41,030
possibility

00:43:38,780 --> 00:43:42,800
so like inside the build service we call

00:43:41,030 --> 00:43:44,660
it tumbleweed cubic so you know there

00:43:42,800 --> 00:43:49,220
could be a leap cubic if somebody wanted

00:43:44,660 --> 00:43:52,280
one but the more I look at this stuff in

00:43:49,220 --> 00:43:55,250
the mine packaging this stuff a rolling

00:43:52,280 --> 00:43:57,890
release solves so many problems like I I

00:43:55,250 --> 00:43:59,329
I dread to think the amount of work

00:43:57,890 --> 00:44:02,800
someone would have to do to get

00:43:59,329 --> 00:44:05,060
kubernetes 1 13 or 14 running on leap

00:44:02,800 --> 00:44:06,770
quad man is actually being quite

00:44:05,060 --> 00:44:09,230
portable so like I can see some of that

00:44:06,770 --> 00:44:11,630
stuff translating along like we did with

00:44:09,230 --> 00:44:14,720
transactional updates but generally

00:44:11,630 --> 00:44:16,910
speaking for for container oriented OS I

00:44:14,720 --> 00:44:18,680
think I think the challenge is to

00:44:16,910 --> 00:44:20,930
actually keep up with upstreams keep up

00:44:18,680 --> 00:44:21,980
with where everyone's going but do it in

00:44:20,930 --> 00:44:24,829
a way that's still stable

00:44:21,980 --> 00:44:37,280
I don't see an LTS actually solving any

00:44:24,829 --> 00:44:39,200
problems there yep so that the question

00:44:37,280 --> 00:44:41,290
was are we planning on on putting the

00:44:39,200 --> 00:44:43,310
transactional update stuff into zipper

00:44:41,290 --> 00:44:54,470
Ignace are we still planning on doing

00:44:43,310 --> 00:44:57,890
that yeah he's working on it yes we wish

00:44:54,470 --> 00:44:59,540
yeah soon at least now like in the past

00:44:57,890 --> 00:45:01,460
we didn't used to have that error

00:44:59,540 --> 00:45:03,589
message coming up so exhibit would just

00:45:01,460 --> 00:45:05,900
fail horrific at least zipper now knows

00:45:03,589 --> 00:45:07,130
about transaction updates and doesn't

00:45:05,900 --> 00:45:19,549
let you do stupid stuff

00:45:07,130 --> 00:45:20,630
but five minutes yes okay so the

00:45:19,549 --> 00:45:22,400
question was when you're using

00:45:20,630 --> 00:45:24,380
transactional updates you know is is

00:45:22,400 --> 00:45:33,559
zipper running on the base OS or running

00:45:24,380 --> 00:45:36,259
in like some container yeah ya know

00:45:33,559 --> 00:45:39,920
so we with with this we're basically

00:45:36,259 --> 00:45:42,019
effectively doing a cut-down traditional

00:45:39,920 --> 00:45:44,089
style OS so that is typical zipper

00:45:42,019 --> 00:45:47,900
typically yeah typical packages running

00:45:44,089 --> 00:45:49,880
on a typical disc of choice and then we

00:45:47,900 --> 00:45:51,799
kind of make the container problem you

00:45:49,880 --> 00:45:53,450
know something higher up the stack so

00:45:51,799 --> 00:45:55,220
you know we do the OS part fine we

00:45:53,450 --> 00:45:57,049
didn't we didn't see the benefit of

00:45:55,220 --> 00:45:58,489
front of container as everything you

00:45:57,049 --> 00:46:00,890
know that there has to be some line

00:45:58,489 --> 00:46:02,749
where okay as it in our minds at least

00:46:00,890 --> 00:46:05,690
as a distribution we're responsive

00:46:02,749 --> 00:46:07,549
providing an OS you know that OS has to

00:46:05,690 --> 00:46:08,900
be built properly in done properly and

00:46:07,549 --> 00:46:11,739
containers aren't the right way for

00:46:08,900 --> 00:46:11,739
doing an OS

00:46:25,220 --> 00:46:31,200
okay so yeah so okay so yeah them to

00:46:30,360 --> 00:46:33,240
repeat the question

00:46:31,200 --> 00:46:34,740
thought of yet running running something

00:46:33,240 --> 00:46:36,180
in transactional update like what if

00:46:34,740 --> 00:46:39,140
like a postscript was trying to get hold

00:46:36,180 --> 00:46:41,880
of systems like yeah accessing system D

00:46:39,140 --> 00:46:44,010
we wouldn't allow their users so I don't

00:46:41,880 --> 00:46:45,870
think it's ever come up that's the kind

00:46:44,010 --> 00:46:47,310
of yeah you know which we try and build

00:46:45,870 --> 00:46:52,130
stuff in a way that that would never be

00:46:47,310 --> 00:46:55,050
necessary but yeah that would be fun

00:46:52,130 --> 00:46:57,660
yeah it would it would fail and I'd be

00:46:55,050 --> 00:46:58,860
glad that would fire rather not have

00:46:57,660 --> 00:47:06,060
that package installed in that way

00:46:58,860 --> 00:47:08,400
yes how do we deal with incompatible

00:47:06,060 --> 00:47:11,370
configuration files we do our best to do

00:47:08,400 --> 00:47:13,350
a three-way merge and have snapshots of

00:47:11,370 --> 00:47:22,340
the we double east now should all be at

00:47:13,350 --> 00:47:22,340
the et Cie stuff so he fixed that okay

00:48:12,609 --> 00:48:17,289
okay yeah that's what I meant

00:48:27,099 --> 00:48:30,680
if you want to update if you want to

00:48:29,329 --> 00:48:31,940
snapshot your data so the question was

00:48:30,680 --> 00:48:33,710
you know what if could you snapchat your

00:48:31,940 --> 00:48:35,180
data also if you want to snap your data

00:48:33,710 --> 00:48:37,400
that's something you can already do in

00:48:35,180 --> 00:48:39,890
every openSUSE distribution snapper

00:48:37,400 --> 00:48:42,589
can do that for for anything outside the

00:48:39,890 --> 00:48:44,210
root file system so it's an out of scope

00:48:42,589 --> 00:48:45,589
for the OS because in the same sense of

00:48:44,210 --> 00:48:48,289
like we we don't want to mess with user

00:48:45,589 --> 00:48:50,029
data like we don't want to presume what

00:48:48,289 --> 00:48:52,309
snapshotting policy you want for your

00:48:50,029 --> 00:48:54,529
data but the tool is there so you could

00:48:52,309 --> 00:48:57,200
say you know okay this folder snapshot

00:48:54,529 --> 00:49:17,869
it this often you know and you could

00:48:57,200 --> 00:49:19,369
potentially hook it into r22 the

00:49:17,869 --> 00:49:21,920
argument there was you know yeah

00:49:19,369 --> 00:49:23,930
distributions could know you know that

00:49:21,920 --> 00:49:25,130
they're changing data in openSUSE we had

00:49:23,930 --> 00:49:27,499
a philosophy of like don't mess with

00:49:25,130 --> 00:49:29,390
user data like so like you know when

00:49:27,499 --> 00:49:31,069
when like my sequel is a perfect example

00:49:29,390 --> 00:49:33,859
you know when we're updating my sequel

00:49:31,069 --> 00:49:35,509
you know we expect the the user to run

00:49:33,859 --> 00:49:37,279
the appropriate update scripts we don't

00:49:35,509 --> 00:49:39,680
run them for them because you know that

00:49:37,279 --> 00:49:41,809
it that doesn't seem like our place it

00:49:39,680 --> 00:49:44,089
seems presumptuous I don't yeah I'd

00:49:41,809 --> 00:49:46,460
rather you know I'd rather the next boot

00:49:44,089 --> 00:49:48,249
to have my sequel not work and then the

00:49:46,460 --> 00:49:50,930
user have to fix it there it did

00:49:48,249 --> 00:49:53,180
different philosophy I think I'm done

00:49:50,930 --> 00:49:57,730
for time thank you very much

00:49:53,180 --> 00:49:57,730
[Applause]

00:50:03,290 --> 00:50:05,350

YouTube URL: https://www.youtube.com/watch?v=FoD2Vkj7Nlo


