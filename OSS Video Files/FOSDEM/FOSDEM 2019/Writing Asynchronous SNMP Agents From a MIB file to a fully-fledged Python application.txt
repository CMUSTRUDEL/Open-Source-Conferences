Title: Writing Asynchronous SNMP Agents From a MIB file to a fully-fledged Python application
Publication date: 2019-02-08
Playlist: FOSDEM 2019
Description: 
	by Ilya Etingof

At: FOSDEM 2019
https://video.fosdem.org/2019/UB2.252A/writing_asynchronous_snmp_agents.webm

Room: UB2.252A (Lameere)
Scheduled start: 2019-02-03 16:40:00+01
Captions: 
	00:00:06,380 --> 00:00:10,040
I'm going to present this short talk

00:00:08,210 --> 00:00:12,650
building a synchronization of the agents

00:00:10,040 --> 00:00:14,870
my name is Elliot angle I work for at

00:00:12,650 --> 00:00:18,619
hat I am on the OpenStack team but

00:00:14,870 --> 00:00:22,130
besides that I have this long-term hobby

00:00:18,619 --> 00:00:24,170
also English Olympian in this and this

00:00:22,130 --> 00:00:28,100
talk I'm going to argue that SNMP still

00:00:24,170 --> 00:00:30,890
relevant and present a new tool called

00:00:28,100 --> 00:00:33,309
SNMP responder aimed at simplifying the

00:00:30,890 --> 00:00:37,010
integration of custom data sources with

00:00:33,309 --> 00:00:40,040
SNMP agents and they all try to conclude

00:00:37,010 --> 00:00:42,980
this talk with a simple workflow example

00:00:40,040 --> 00:00:45,739
workflow despite many attempts to

00:00:42,980 --> 00:00:47,900
displace and successful times displaces

00:00:45,739 --> 00:00:50,450
Limpy from the role of the single

00:00:47,900 --> 00:00:53,239
network management protocol SNMP is

00:00:50,450 --> 00:00:58,430
still quite popular in monitoring

00:00:53,239 --> 00:01:00,829
applications perhaps because people

00:00:58,430 --> 00:01:02,000
understand it well because the protocol

00:01:00,829 --> 00:01:04,519
has been around a long time

00:01:02,000 --> 00:01:06,560
the other reason may be because we have

00:01:04,519 --> 00:01:10,540
so many memes so many sources of

00:01:06,560 --> 00:01:10,540
structured information to to reuse

00:01:11,830 --> 00:01:19,760
imagine this use case you have a network

00:01:14,740 --> 00:01:22,220
monitored by an MP and every scene is an

00:01:19,760 --> 00:01:23,960
SNMP and a mess for instance is is

00:01:22,220 --> 00:01:25,700
resonantly based and you've got new

00:01:23,960 --> 00:01:28,190
hardware this new hardware is not

00:01:25,700 --> 00:01:32,240
doesn't doesn't contain a simpie agent

00:01:28,190 --> 00:01:35,990
so you can't monitor it with SNMP but it

00:01:32,240 --> 00:01:39,560
offers REST API so what what can you

00:01:35,990 --> 00:01:42,590
possibly do about this the solution I'm

00:01:39,560 --> 00:01:45,439
trying to propose is to send up a some

00:01:42,590 --> 00:01:48,729
sort of mediation proxy which works as

00:01:45,439 --> 00:01:51,520
an SNMP agent on one side and which can

00:01:48,729 --> 00:01:54,650
feed on the old past and data sources

00:01:51,520 --> 00:01:57,380
the workflow of setting up this

00:01:54,650 --> 00:02:01,130
mediation proxy would be like this you

00:01:57,380 --> 00:02:04,009
you take a mid file you compile it into

00:02:01,130 --> 00:02:08,239
Python code with hoops you populate

00:02:04,009 --> 00:02:10,340
these hoops with your custom code to get

00:02:08,239 --> 00:02:13,580
data from your data source and then you

00:02:10,340 --> 00:02:16,520
feel this person eyes meet to this SNMP

00:02:13,580 --> 00:02:19,820
responder tool and you get it on SNMP

00:02:16,520 --> 00:02:22,040
on a network now the work flow so you

00:02:19,820 --> 00:02:24,950
have you have this REST API let's say

00:02:22,040 --> 00:02:27,560
it's a bare-metal server serving redfish

00:02:24,950 --> 00:02:30,080
protocol you can get the rest call you

00:02:27,560 --> 00:02:33,790
can have a rest call and it returns also

00:02:30,080 --> 00:02:36,860
data let's focus on this host name field

00:02:33,790 --> 00:02:38,900
host name stands for host name so SNMP

00:02:36,860 --> 00:02:44,270
already offers something similar for

00:02:38,900 --> 00:02:47,480
that she's his name managed object from

00:02:44,270 --> 00:02:49,130
the name pivot to me this is how it

00:02:47,480 --> 00:02:52,460
looks like in an amoeba

00:02:49,130 --> 00:02:55,010
now we can use the pious map project to

00:02:52,460 --> 00:02:57,050
compile the meep-meep file and to price

00:02:55,010 --> 00:03:02,600
and snippet the spice and snippet would

00:02:57,050 --> 00:03:05,260
would look like this then you basically

00:03:02,600 --> 00:03:13,280
just add the rest API call into this

00:03:05,260 --> 00:03:17,300
into this into this code and preferably

00:03:13,280 --> 00:03:19,940
do it from thread so that the whole

00:03:17,300 --> 00:03:22,790
thing would be non-blocking and it could

00:03:19,940 --> 00:03:27,260
work I simply asleep and highly

00:03:22,790 --> 00:03:29,530
concurrently next to you just people

00:03:27,260 --> 00:03:32,300
stole the tool list in P responder and

00:03:29,530 --> 00:03:34,880
feed that this personalized leave this

00:03:32,300 --> 00:03:37,190
map implementation to it by just copying

00:03:34,880 --> 00:03:39,710
the Bison file once you have it started

00:03:37,190 --> 00:03:42,410
you can just you know a sniffing at it

00:03:39,710 --> 00:03:47,270
and you get the the the result from the

00:03:42,410 --> 00:03:49,940
REST API code to summarize SNMP is still

00:03:47,270 --> 00:03:52,400
quite quite widely used but getting it

00:03:49,940 --> 00:03:56,300
hooked on the on the custom data data

00:03:52,400 --> 00:04:00,380
sources seems to be a pain this SNMP

00:03:56,300 --> 00:04:03,470
respond responder to this hopefully

00:04:00,380 --> 00:04:07,730
could help help help integrate in this

00:04:03,470 --> 00:04:09,410
custom data sources with standard SNMP

00:04:07,730 --> 00:04:13,250
agents once you have it up and running

00:04:09,410 --> 00:04:15,230
you can use all SNMP features all as

00:04:13,250 --> 00:04:18,530
degree versus encryptions strong

00:04:15,230 --> 00:04:22,790
encryption for forest in p management

00:04:18,530 --> 00:04:26,870
and this stimpy respondent responder

00:04:22,790 --> 00:04:29,240
tool is designed as a simple engine

00:04:26,870 --> 00:04:30,979
therefore is hardly concurrent and

00:04:29,240 --> 00:04:36,009
hopefully would be able to serve

00:04:30,979 --> 00:04:41,290
high-load so that's probably it

00:04:36,009 --> 00:04:48,119
questions there's no time all right

00:04:41,290 --> 00:04:48,119

YouTube URL: https://www.youtube.com/watch?v=h4R_nKnlPSw


