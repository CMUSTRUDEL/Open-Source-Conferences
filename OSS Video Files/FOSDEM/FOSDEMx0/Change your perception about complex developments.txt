Title: Change your perception about complex developments
Publication date: 2018-09-24
Playlist: FOSDEMx0
Description: 
	
Captions: 
	00:00:08,620 --> 00:00:25,359
we do it football okay is everyone great

00:00:20,110 --> 00:00:26,820
let's let's get started okay hello hello

00:00:25,359 --> 00:00:30,150
everyone

00:00:26,820 --> 00:00:33,840
before everything a few few disclaimer

00:00:30,150 --> 00:00:37,120
this is a talk about ambulette system

00:00:33,840 --> 00:00:38,440
I'll see the thing without screen that

00:00:37,120 --> 00:00:40,059
you forget in your basement for two

00:00:38,440 --> 00:00:41,890
years because it's the kind of

00:00:40,059 --> 00:00:47,020
monitoring your actual consumption or

00:00:41,890 --> 00:00:49,090
something it's not that the pattern that

00:00:47,020 --> 00:00:51,280
will be described here won't be varied

00:00:49,090 --> 00:00:53,460
in other uses but just that the

00:00:51,280 --> 00:00:57,699
rationale are not necessarily the same

00:00:53,460 --> 00:01:00,539
so we can argue for one way or the of

00:00:57,699 --> 00:01:04,629
another in the few thing that we follow

00:01:00,539 --> 00:01:11,620
you can do it al-zahraa not necessarily

00:01:04,629 --> 00:01:15,130
a good idea since this evening general

00:01:11,620 --> 00:01:19,300
team revolve around python we will do it

00:01:15,130 --> 00:01:21,630
in Python you can do that basically in

00:01:19,300 --> 00:01:25,570
any language that you want you need a

00:01:21,630 --> 00:01:27,700
big big stronger lip but I know for a

00:01:25,570 --> 00:01:29,920
fact that there are people in this room

00:01:27,700 --> 00:01:32,380
that planning to do that in the GS for

00:01:29,920 --> 00:01:36,430
example I don't know if it's a good idea

00:01:32,380 --> 00:01:39,010
but and most of the code presented here

00:01:36,430 --> 00:01:41,770
is a simplification because there are

00:01:39,010 --> 00:01:45,910
limits of the code you can fit in a

00:01:41,770 --> 00:01:50,170
slider so everything is on github right

00:01:45,910 --> 00:01:53,100
there you you can follow the talk with

00:01:50,170 --> 00:01:56,140
the source before you if you want

00:01:53,100 --> 00:01:58,210
alright so as I said we are going to

00:01:56,140 --> 00:02:00,550
talk about a subset of amulet Systema

00:01:58,210 --> 00:02:03,430
naturae method i created the same sort

00:02:00,550 --> 00:02:05,950
of thing touchscreen in your fridge and

00:02:03,430 --> 00:02:08,800
stuff like that that's not what you are

00:02:05,950 --> 00:02:13,689
going to talk about where it's really

00:02:08,800 --> 00:02:17,939
about stuff that you don't really touch

00:02:13,689 --> 00:02:17,939
you place it somewhere and you forget it

00:02:18,340 --> 00:02:23,650
when you have this kind of system you

00:02:20,490 --> 00:02:26,830
usually need to to choose some existing

00:02:23,650 --> 00:02:27,960
framework when you have computational

00:02:26,830 --> 00:02:31,150
power I'm not talking about

00:02:27,960 --> 00:02:33,850
microcontroller thing for example a

00:02:31,150 --> 00:02:36,550
Raspberry Pi you usually go with a

00:02:33,850 --> 00:02:38,200
distribution like right yeah no you go

00:02:36,550 --> 00:02:41,320
with the Android stack or stuff like

00:02:38,200 --> 00:02:44,770
that and all of the stack were conceived

00:02:41,320 --> 00:02:46,959
with what one big fundamental idea it's

00:02:44,770 --> 00:02:51,100
the user that in that income

00:02:46,959 --> 00:02:55,480
that's is in control for example you

00:02:51,100 --> 00:02:58,390
have you have the stack you see the the

00:02:55,480 --> 00:03:00,760
thing here I just a way for the user to

00:02:58,390 --> 00:03:05,530
to take decision control the other way

00:03:00,760 --> 00:03:08,440
you have the very big stack with some

00:03:05,530 --> 00:03:10,780
camel driver managing you power

00:03:08,440 --> 00:03:13,000
consumption for example and then you

00:03:10,780 --> 00:03:15,220
have some kind of use of space demon

00:03:13,000 --> 00:03:18,010
interacting with the driver and then you

00:03:15,220 --> 00:03:20,650
have some kind of messaging system and

00:03:18,010 --> 00:03:23,799
then you have a graphical UI when the

00:03:20,650 --> 00:03:27,940
user can say okay I would like to pour

00:03:23,799 --> 00:03:31,720
it down or not in IOT we need the

00:03:27,940 --> 00:03:34,180
autonomous system the system they stack

00:03:31,720 --> 00:03:38,590
for example the window stack on doors on

00:03:34,180 --> 00:03:41,500
Roy stack comes really be used in a

00:03:38,590 --> 00:03:44,380
modular way you you can't take some part

00:03:41,500 --> 00:03:49,570
of it and expect it to work very well so

00:03:44,380 --> 00:03:54,130
we choose one put in there and it's not

00:03:49,570 --> 00:03:57,000
pretty when you mix them up so you end

00:03:54,130 --> 00:04:02,910
up kind of simulating the user

00:03:57,000 --> 00:04:02,910
connecting to part of the stack and

00:04:03,150 --> 00:04:12,570
manipulate the device like that it's

00:04:06,579 --> 00:04:12,570
it's usually complex for example

00:04:12,730 --> 00:04:18,639
the idea of system days to boot it as

00:04:16,480 --> 00:04:22,090
quickly as possible so we try to

00:04:18,639 --> 00:04:24,010
paralyze a lot of things in the embedded

00:04:22,090 --> 00:04:26,550
world it's making things difficult

00:04:24,010 --> 00:04:30,310
because it's difficult to debug and

00:04:26,550 --> 00:04:32,800
ability is kind of paramount so you end

00:04:30,310 --> 00:04:35,110
up generic cutting your service file

00:04:32,800 --> 00:04:40,470
depending on one another so you can

00:04:35,110 --> 00:04:42,970
sequence the the whole thing and and

00:04:40,470 --> 00:04:44,260
basically a little batch scripts

00:04:42,970 --> 00:04:48,880
starting everything in the right order

00:04:44,260 --> 00:04:51,010
is way simpler you can you can control

00:04:48,880 --> 00:04:55,690
the timing between the the each step by

00:04:51,010 --> 00:04:57,190
adding a similar simple slip so what I

00:04:55,690 --> 00:04:59,919
would like to show you here is a

00:04:57,190 --> 00:05:02,169
do-it-yourself kind of stack a tailor

00:04:59,919 --> 00:05:05,340
for your need and I would like to argue

00:05:02,169 --> 00:05:08,139
that's it let's work it's simpler and

00:05:05,340 --> 00:05:10,780
it's more robust then started from from

00:05:08,139 --> 00:05:16,690
a standard stack and mutated to fit your

00:05:10,780 --> 00:05:18,610
requirements system the general

00:05:16,690 --> 00:05:22,450
architecture is kind of I have some

00:05:18,610 --> 00:05:26,380
inputs I need to process them I need to

00:05:22,450 --> 00:05:29,229
take decision and take action that has

00:05:26,380 --> 00:05:31,810
impact on the outside world most of the

00:05:29,229 --> 00:05:35,440
time you end up also streaming data

00:05:31,810 --> 00:05:40,030
because a lot of IOT system are complex

00:05:35,440 --> 00:05:43,750
answers the key point is by itself so

00:05:40,030 --> 00:05:45,970
the system should be aware it set where

00:05:43,750 --> 00:05:49,960
I am what's the where I am in my

00:05:45,970 --> 00:05:53,770
computing sequence and what should I do

00:05:49,960 --> 00:05:55,930
next so you have a lot of states so you

00:05:53,770 --> 00:05:57,479
end up thinking about the main dimension

00:05:55,930 --> 00:06:00,010
of your system for example if you have

00:05:57,479 --> 00:06:03,430
you want to do a device that you put in

00:06:00,010 --> 00:06:06,310
your cars to monitor something you

00:06:03,430 --> 00:06:07,960
should check if the engine is running if

00:06:06,310 --> 00:06:10,180
the car is moving something like that

00:06:07,960 --> 00:06:13,570
and then you say okay it's 20 minutes

00:06:10,180 --> 00:06:15,280
since the the engine is down and the car

00:06:13,570 --> 00:06:19,240
is not moving so probably I should pour

00:06:15,280 --> 00:06:21,370
it down so next stage should be shutting

00:06:19,240 --> 00:06:23,710
shut yourself up or shut yourself down

00:06:21,370 --> 00:06:26,490
sorry

00:06:23,710 --> 00:06:29,890
so okay new manager state

00:06:26,490 --> 00:06:33,310
one one way is simply considering that

00:06:29,890 --> 00:06:36,220
you are in one state and dealing dealing

00:06:33,310 --> 00:06:38,230
/ engineering zero that's it generate

00:06:36,220 --> 00:06:40,930
for example if you have a battery in

00:06:38,230 --> 00:06:43,330
your device you can take the hypothesis

00:06:40,930 --> 00:06:46,540
that it always functional and always

00:06:43,330 --> 00:06:48,340
power and sometime it makes sense if you

00:06:46,540 --> 00:06:51,970
have nearly constant power supply and

00:06:48,340 --> 00:06:53,740
the battery is just there to to to do

00:06:51,970 --> 00:06:55,450
the exceptional case so you're just in

00:06:53,740 --> 00:06:57,610
your the the case when there is a

00:06:55,450 --> 00:06:59,830
battery or shoe and when there is no

00:06:57,610 --> 00:07:02,590
power you just crush and the next time

00:06:59,830 --> 00:07:05,050
you boot you try to recover from from

00:07:02,590 --> 00:07:08,800
the this crush but most of the time this

00:07:05,050 --> 00:07:10,300
not it's not sufficient so the first

00:07:08,800 --> 00:07:12,010
thing when you think about that on your

00:07:10,300 --> 00:07:14,230
system you should start with anywhere

00:07:12,010 --> 00:07:16,750
rating the the different state before

00:07:14,230 --> 00:07:21,340
you you start cutting anything I see

00:07:16,750 --> 00:07:23,320
what transition you should have and and

00:07:21,340 --> 00:07:27,510
for example thing that when the which is

00:07:23,320 --> 00:07:27,510
not available you should not run DHCP

00:07:27,780 --> 00:07:32,140
instead of having DHCP running all the

00:07:30,460 --> 00:07:36,760
time and when the which is not a very

00:07:32,140 --> 00:07:41,080
bad showing errors if you do that you

00:07:36,760 --> 00:07:43,630
end up with a more reliable system here

00:07:41,080 --> 00:07:46,480
we are talking about system state not

00:07:43,630 --> 00:07:48,280
the application inside of it so because

00:07:46,480 --> 00:07:51,250
the application inside of it usually as

00:07:48,280 --> 00:07:54,520
other state but I'm mostly focusing on

00:07:51,250 --> 00:07:58,660
our system Wi-Fi network what process to

00:07:54,520 --> 00:08:05,580
learn if I should pour it down stuff

00:07:58,660 --> 00:08:09,370
like that obviously you end up doing

00:08:05,580 --> 00:08:11,410
filtering and your your inputs you need

00:08:09,370 --> 00:08:15,400
probably a big complex event processor

00:08:11,410 --> 00:08:18,780
to do the the big stuff I won't talk

00:08:15,400 --> 00:08:18,780
about that this very interesting

00:08:18,970 --> 00:08:24,580
yes it's very very interesting but I

00:08:21,880 --> 00:08:28,270
won't take this time to talk about the

00:08:24,580 --> 00:08:30,550
platform stuff in detail oh you should

00:08:28,270 --> 00:08:32,740
run your application Oh - boo Oh - shut

00:08:30,550 --> 00:08:39,580
down or to manage logs and stuff like

00:08:32,740 --> 00:08:44,560
that most of the code or as I said it

00:08:39,580 --> 00:08:47,800
but I also put the code in in a build

00:08:44,560 --> 00:08:50,760
route build route layout so a bit rude

00:08:47,800 --> 00:08:53,890
is a build system to generate Enoshima

00:08:50,760 --> 00:08:56,410
so I forget to be a bit rude repository

00:08:53,890 --> 00:09:00,220
this afternoon for the rest will be if

00:08:56,410 --> 00:09:02,830
you want to try it you just clone it tab

00:09:00,220 --> 00:09:04,990
and type main make its pre-configure it

00:09:02,830 --> 00:09:09,100
will generate ephemeral you can play

00:09:04,990 --> 00:09:12,970
with it and for this talk I'm gonna use

00:09:09,100 --> 00:09:16,030
an example to talk about the different

00:09:12,970 --> 00:09:18,790
steps and I'm presenting to you some

00:09:16,030 --> 00:09:21,670
kind of wishy scanner so basically you

00:09:18,790 --> 00:09:24,880
can have your raspberry just plug a GPS

00:09:21,670 --> 00:09:27,850
in that you work with it you know in

00:09:24,880 --> 00:09:30,490
your code or stuff it will log every

00:09:27,850 --> 00:09:33,250
wife new Wi-Fi that it see with a GPS

00:09:30,490 --> 00:09:37,480
position and you can send it to whatever

00:09:33,250 --> 00:09:40,750
you want so the further the first thing

00:09:37,480 --> 00:09:43,810
for the system is to boot in any Linux

00:09:40,750 --> 00:09:47,140
computer the first thing to boot is the

00:09:43,810 --> 00:09:49,450
bootloader in embedded stuff it's only

00:09:47,140 --> 00:09:52,000
you boot raspberry please not like that

00:09:49,450 --> 00:09:56,380
but most of the time your view boot you

00:09:52,000 --> 00:09:57,670
can have grab this program the the the

00:09:56,380 --> 00:10:00,340
responsibility of this program is to

00:09:57,670 --> 00:10:04,930
load the camel and maybe the Anita in it

00:10:00,340 --> 00:10:06,940
from ffs and call it the camera then

00:10:04,930 --> 00:10:09,910
initialize the machine initiative itself

00:10:06,940 --> 00:10:12,160
and then call the user space the user

00:10:09,910 --> 00:10:14,080
space is conceptual space where the user

00:10:12,160 --> 00:10:16,060
program runs by opposition to the camel

00:10:14,080 --> 00:10:17,410
space where the scheduler a memory

00:10:16,060 --> 00:10:22,480
management

00:10:17,410 --> 00:10:25,630
camel driver executes them self this

00:10:22,480 --> 00:10:27,999
program that the the camel called just

00:10:25,630 --> 00:10:32,039
after its

00:10:27,999 --> 00:10:35,049
it's initialize will be our entry points

00:10:32,039 --> 00:10:38,799
the camera can know what what to call

00:10:35,049 --> 00:10:41,529
with several ways you can pass it in

00:10:38,799 --> 00:10:44,259
income online so you can call grab hold

00:10:41,529 --> 00:10:47,109
your camera with an argument and and one

00:10:44,259 --> 00:10:48,909
of these arguments are in its integrals

00:10:47,109 --> 00:10:50,949
something and then you just give it the

00:10:48,909 --> 00:10:54,959
path the path of the program that you

00:10:50,949 --> 00:10:57,519
want the camera to run you can do this

00:10:54,959 --> 00:10:59,859
on your own computer for example you can

00:10:57,519 --> 00:11:02,499
be really cool when your desktop boot

00:10:59,859 --> 00:11:05,139
code with Anita girl being bash and you

00:11:02,499 --> 00:11:08,979
end up with bash and nuts you don't see

00:11:05,139 --> 00:11:11,229
the usual boot sequence and and stuff

00:11:08,979 --> 00:11:13,809
like that also when you compile the

00:11:11,229 --> 00:11:19,720
Camaro you can R code which program to

00:11:13,809 --> 00:11:22,119
to court after the boots they're usually

00:11:19,720 --> 00:11:25,779
the boot sequence would amount some

00:11:22,119 --> 00:11:27,459
partition and mount some virtual device

00:11:25,779 --> 00:11:29,979
on virtual file system or so

00:11:27,459 --> 00:11:34,029
scan for device load the right module

00:11:29,979 --> 00:11:35,919
and firmware and do some others setups

00:11:34,029 --> 00:11:38,799
you know a number Edward you you may

00:11:35,919 --> 00:11:40,599
want to bring up it internet source up

00:11:38,799 --> 00:11:47,289
like that immediately for the beginning

00:11:40,599 --> 00:11:49,299
purposes so the first step you need to

00:11:47,289 --> 00:11:55,149
have some kind of file system in modern

00:11:49,299 --> 00:11:57,970
Linux in the the first system are quite

00:11:55,149 --> 00:12:02,169
complex if you type type mount and in a

00:11:57,970 --> 00:12:05,379
given time you see a lot of them most of

00:12:02,169 --> 00:12:09,489
the time you have one real partition the

00:12:05,379 --> 00:12:11,709
the route FS a mountain slash in

00:12:09,489 --> 00:12:13,839
embedded an embedded system you should

00:12:11,709 --> 00:12:18,189
really have a root root partition that

00:12:13,839 --> 00:12:23,379
it's only read-only because you don't

00:12:18,189 --> 00:12:25,869
really want to edit that and probably

00:12:23,379 --> 00:12:28,119
you need to stop data so you can mount a

00:12:25,869 --> 00:12:32,259
partition in we tried to slash words

00:12:28,119 --> 00:12:34,389
visual pattern you need a partition for

00:12:32,259 --> 00:12:40,250
the proc file system report virtual file

00:12:34,389 --> 00:12:42,020
system you mounted on /proc you can have

00:12:40,250 --> 00:12:43,910
a virtual file system for the /dev

00:12:42,020 --> 00:12:46,040
containing all the device and three

00:12:43,910 --> 00:12:48,590
points everything that you see there

00:12:46,040 --> 00:12:50,690
represent represent a camel driver you

00:12:48,590 --> 00:12:52,730
can open it do read write on them and

00:12:50,690 --> 00:12:56,570
basically you're talking directly to the

00:12:52,730 --> 00:13:00,830
other part you also need some something

00:12:56,570 --> 00:13:06,170
called the PT PT s file system it's the

00:13:00,830 --> 00:13:09,410
pseudo terminal system that I won't go

00:13:06,170 --> 00:13:12,500
into the detail you ever see slash this

00:13:09,410 --> 00:13:14,660
slash this is a file system that

00:13:12,500 --> 00:13:20,840
representing directly big caramel

00:13:14,660 --> 00:13:25,790
objects also you might might want to do

00:13:20,840 --> 00:13:29,720
to have that and tmpfs its file system I

00:13:25,790 --> 00:13:32,360
mean run that can you can you use that

00:13:29,720 --> 00:13:34,190
you know as a general-purpose file

00:13:32,360 --> 00:13:37,400
systems except that it won't write

00:13:34,190 --> 00:13:41,150
anything to the to the disk only in a

00:13:37,400 --> 00:13:42,560
space in in ROM most of the time you you

00:13:41,150 --> 00:13:45,260
use that for the /mt

00:13:42,560 --> 00:13:48,080
and slash run we have some program we

00:13:45,260 --> 00:13:54,140
stir the pit file or lock and stuff like

00:13:48,080 --> 00:13:56,720
that so in Python that's the

00:13:54,140 --> 00:14:02,780
unfortunately the Python steadily don't

00:13:56,720 --> 00:14:08,150
wrap the mount function so so you need

00:14:02,780 --> 00:14:11,390
to go with the the Lib C you can use the

00:14:08,150 --> 00:14:13,810
the C type module for that it's it's a

00:14:11,390 --> 00:14:16,670
module in Python that can open any

00:14:13,810 --> 00:14:20,839
shared library and call any function in

00:14:16,670 --> 00:14:26,540
that so we can use a standard c library

00:14:20,839 --> 00:14:28,790
and call the mountain and then by you

00:14:26,540 --> 00:14:31,630
have your python mounts tuning encode

00:14:28,790 --> 00:14:34,339
may be a good idea to check forever

00:14:31,630 --> 00:14:37,910
and then you simply mount everything

00:14:34,339 --> 00:14:39,800
that you want if you want more more

00:14:37,910 --> 00:14:42,740
partition that are or different scheme

00:14:39,800 --> 00:14:44,330
and supplier you just edit the code you

00:14:42,740 --> 00:14:47,960
don't they've configure you you don't

00:14:44,330 --> 00:14:52,820
need to do configuration file you can

00:14:47,960 --> 00:14:56,310
use simply whatever you want

00:14:52,820 --> 00:14:59,790
after that we talk about loading module

00:14:56,310 --> 00:15:02,850
you should load your module you can you

00:14:59,790 --> 00:15:06,540
can use map you can use modprobe for

00:15:02,850 --> 00:15:09,330
that you have in python a function

00:15:06,540 --> 00:15:13,050
called system that called our program so

00:15:09,330 --> 00:15:14,850
you load your module and you have your

00:15:13,050 --> 00:15:17,400
low-level setup you have a file system

00:15:14,850 --> 00:15:21,300
corrective correctly setup you have some

00:15:17,400 --> 00:15:24,300
model running and you can you can do

00:15:21,300 --> 00:15:28,860
other thing else if you want to split

00:15:24,300 --> 00:15:31,560
your your unit files you need to know

00:15:28,860 --> 00:15:33,750
that the process that the the the the

00:15:31,560 --> 00:15:37,710
the program that the system call first

00:15:33,750 --> 00:15:39,450
will be paid one it's a special page it

00:15:37,710 --> 00:15:41,490
can die we will talk about that later

00:15:39,450 --> 00:15:43,740
but if you want to split the boot

00:15:41,490 --> 00:15:45,000
sequence in several part and send them

00:15:43,740 --> 00:15:49,050
today a to it together

00:15:45,000 --> 00:15:51,330
you can'tyou system or fork at the end

00:15:49,050 --> 00:15:53,820
of the first part to switch to the

00:15:51,330 --> 00:15:58,680
second power for example you can't use

00:15:53,820 --> 00:16:01,110
that you you need to use exit if you use

00:15:58,680 --> 00:16:05,520
Excel you basically switch the current

00:16:01,110 --> 00:16:07,530
program with a new one and and the pit

00:16:05,520 --> 00:16:09,450
stay the same because you are peed one

00:16:07,530 --> 00:16:12,510
you come die so you need to switch

00:16:09,450 --> 00:16:14,550
between the program and not fork a new

00:16:12,510 --> 00:16:21,450
one and that let the param die stuff

00:16:14,550 --> 00:16:24,030
like that all right one other role of in

00:16:21,450 --> 00:16:27,030
it is to rip zombie obviously we have

00:16:24,030 --> 00:16:29,280
analyzed so we cannot launch program in

00:16:27,030 --> 00:16:31,290
it launch itself process themselves

00:16:29,280 --> 00:16:33,720
launching sub process and stuff and

00:16:31,290 --> 00:16:37,010
stuff like that so there is a project

00:16:33,720 --> 00:16:39,990
rule that's when the sip process finish

00:16:37,010 --> 00:16:44,210
its parent should get back its written

00:16:39,990 --> 00:16:47,490
code it's a parent can't or is blocked

00:16:44,210 --> 00:16:49,680
bugs and stuff like that and he don't

00:16:47,490 --> 00:16:52,380
get back the the the status code or the

00:16:49,680 --> 00:16:54,420
written code of the child process the

00:16:52,380 --> 00:16:58,140
child process stay in a state called a

00:16:54,420 --> 00:17:00,720
zombie after a time it comes from

00:16:58,140 --> 00:17:03,120
resources the file descriptor are not

00:17:00,720 --> 00:17:05,459
always always closed at the right time

00:17:03,120 --> 00:17:06,130
and stuff like that so after a time when

00:17:05,459 --> 00:17:08,650
the parent

00:17:06,130 --> 00:17:12,370
so dies the the grandparents should reap

00:17:08,650 --> 00:17:17,350
the the child and if nobody does it

00:17:12,370 --> 00:17:22,180
it's bit one that does the rest when

00:17:17,350 --> 00:17:25,690
that happen bid one get get the

00:17:22,180 --> 00:17:29,170
responsibility to reap everything and oh

00:17:25,690 --> 00:17:31,990
does it work it's kind of easy when you

00:17:29,170 --> 00:17:34,060
should reap a process ride the camel

00:17:31,990 --> 00:17:37,120
send the parent a signal called sick

00:17:34,060 --> 00:17:39,880
child a senior is some kind of software

00:17:37,120 --> 00:17:42,460
interrupt you jump from what you were

00:17:39,880 --> 00:17:46,600
doing to a senior in blue that you

00:17:42,460 --> 00:17:49,450
register earlier in this example in the

00:17:46,600 --> 00:17:54,250
main somewhere you register you even now

00:17:49,450 --> 00:17:57,130
and when a child is when a child should

00:17:54,250 --> 00:17:59,830
be ripped the camera just called the rip

00:17:57,130 --> 00:18:02,830
we process there and then you use a

00:17:59,830 --> 00:18:06,700
Cisco could whip it and basically rip

00:18:02,830 --> 00:18:09,730
the e-reader form sometimes it will fail

00:18:06,700 --> 00:18:12,700
for example if you assist the the system

00:18:09,730 --> 00:18:15,150
command in Python the system will

00:18:12,700 --> 00:18:18,850
correctly wait for the photo sip process

00:18:15,150 --> 00:18:21,610
so there is no need for ripping but the

00:18:18,850 --> 00:18:23,710
colonel sent that sick child anyway so

00:18:21,610 --> 00:18:26,800
the read process will be called but it's

00:18:23,710 --> 00:18:30,190
not needed so you will have an

00:18:26,800 --> 00:18:35,340
exceptional for with pedo and you should

00:18:30,190 --> 00:18:38,020
always use the no hang flag because

00:18:35,340 --> 00:18:40,200
repeat if you don't use that we'd be

00:18:38,020 --> 00:18:42,490
we'd be blocking and it's a bad thing

00:18:40,200 --> 00:18:48,400
you're in it will be will be blocked

00:18:42,490 --> 00:18:50,320
until there is something to rip so we

00:18:48,400 --> 00:18:54,880
have a correct file system everything is

00:18:50,320 --> 00:18:58,060
maintained in one place we we can read

00:18:54,880 --> 00:19:00,280
the process that we already learned some

00:18:58,060 --> 00:19:03,520
modular law that know what so we

00:19:00,280 --> 00:19:05,640
probably need to launch apps so you have

00:19:03,520 --> 00:19:08,530
basically invited three possibilities

00:19:05,640 --> 00:19:12,250
you can use system the common that we

00:19:08,530 --> 00:19:15,310
talked earlier it take the program names

00:19:12,250 --> 00:19:17,920
and launch it the problem is that it's a

00:19:15,310 --> 00:19:19,750
blocking call so when the programmer and

00:19:17,920 --> 00:19:22,690
the parent doesn't and just

00:19:19,750 --> 00:19:25,390
for the child to finish the job so you

00:19:22,690 --> 00:19:27,540
can run several things partner so that's

00:19:25,390 --> 00:19:31,680
not a good thing

00:19:27,540 --> 00:19:34,210
you have the Poppins it's poppin'

00:19:31,680 --> 00:19:37,260
laborious process industry process

00:19:34,210 --> 00:19:39,490
library it's launching the process but

00:19:37,260 --> 00:19:43,030
but doesn't wait for the process to

00:19:39,490 --> 00:19:45,520
finish you just finish it and also the

00:19:43,030 --> 00:19:47,860
API of poppin is quite nice you can set

00:19:45,520 --> 00:19:50,140
the input output you can communicate

00:19:47,860 --> 00:19:54,160
with the process putting is to see if

00:19:50,140 --> 00:19:56,620
it's finish or not stuff like that and

00:19:54,160 --> 00:19:58,840
if the API of poppin doesn't switch you

00:19:56,620 --> 00:20:00,730
you need you can rewrite it you on

00:19:58,840 --> 00:20:04,840
poppin with a combination of fork and

00:20:00,730 --> 00:20:06,910
exact but that's won't be covered here

00:20:04,840 --> 00:20:11,470
so let's write a process manager with

00:20:06,910 --> 00:20:14,170
weapon first we encapsulate the papen

00:20:11,470 --> 00:20:17,530
object in another one that we will do it

00:20:14,170 --> 00:20:21,460
yourself to manage a case for example if

00:20:17,530 --> 00:20:23,500
the process doesn't start also the the

00:20:21,460 --> 00:20:25,990
main goal of the of a process supervisor

00:20:23,500 --> 00:20:28,570
in IOT is to restart the process from

00:20:25,990 --> 00:20:34,300
the crash so we are adding a check

00:20:28,570 --> 00:20:41,860
better if the process is is dead just

00:20:34,300 --> 00:20:44,950
restart it and then you might see

00:20:41,860 --> 00:20:47,410
obviously a flow in a flow year if the

00:20:44,950 --> 00:20:51,250
process crash immediately after boots is

00:20:47,410 --> 00:20:53,140
restarted in in in loop it will consume

00:20:51,250 --> 00:20:55,660
a lot of resource you probably should

00:20:53,140 --> 00:20:58,180
implement something kind of a back of a

00:20:55,660 --> 00:21:02,200
back-office basically you take the time

00:20:58,180 --> 00:21:05,020
when you start the process you count the

00:21:02,200 --> 00:21:06,490
seconds till it's dead and if it's too

00:21:05,020 --> 00:21:11,170
short you wait a little bit before

00:21:06,490 --> 00:21:13,870
restarting it probably you should count

00:21:11,170 --> 00:21:15,880
the number of restart or so and cetera

00:21:13,870 --> 00:21:18,160
and cetera you should maybe add a status

00:21:15,880 --> 00:21:20,290
statistic method on this subject to know

00:21:18,160 --> 00:21:21,880
what's the state of the of the child to

00:21:20,290 --> 00:21:23,640
know how many time you restarted it and

00:21:21,880 --> 00:21:26,230
stuff like that

00:21:23,640 --> 00:21:28,150
the stat method can return some kind of

00:21:26,230 --> 00:21:30,480
dictionary probably containing the

00:21:28,150 --> 00:21:30,480
metrics

00:21:31,610 --> 00:21:36,710
most some of this thing can make sense

00:21:33,860 --> 00:21:39,169
to to your Q skills other doesn't maybe

00:21:36,710 --> 00:21:40,909
you need other things maybe launching

00:21:39,169 --> 00:21:45,289
several outside of the same process in

00:21:40,909 --> 00:21:47,690
piranhas in any case for example backup

00:21:45,289 --> 00:21:52,639
feature it's very simple in Python you

00:21:47,690 --> 00:21:54,350
just get the time and you start get the

00:21:52,639 --> 00:21:56,179
type when you check if they're if

00:21:54,350 --> 00:21:59,360
they're processing that computing the

00:21:56,179 --> 00:22:02,559
Delta and wait or launch if you want it

00:21:59,360 --> 00:22:02,559
just a few line of code

00:22:03,759 --> 00:22:09,679
the the last object was just for one

00:22:07,159 --> 00:22:12,139
process the your system you want

00:22:09,679 --> 00:22:14,659
probably you want to launch a collection

00:22:12,139 --> 00:22:16,549
of of process so you'll probably need

00:22:14,659 --> 00:22:19,879
another object that have a collection of

00:22:16,549 --> 00:22:22,730
of this of this of drag so here is a

00:22:19,879 --> 00:22:25,730
supervisor object with a method for a

00:22:22,730 --> 00:22:28,309
start to process stop a process top all

00:22:25,730 --> 00:22:30,529
process whatever maybe it makes sense

00:22:28,309 --> 00:22:32,659
for your use case to have a single metal

00:22:30,529 --> 00:22:36,609
in there to send the specific senior to

00:22:32,659 --> 00:22:39,590
a specific child based on its name again

00:22:36,609 --> 00:22:47,179
very easy very easy to do there is

00:22:39,590 --> 00:22:48,919
actually on the on this track so you

00:22:47,179 --> 00:22:51,679
have you have kind of super visual

00:22:48,919 --> 00:22:53,929
system you can start with a nice Python

00:22:51,679 --> 00:22:59,539
up here I can start a process check them

00:22:53,929 --> 00:23:02,359
when you need and and the system kind of

00:22:59,539 --> 00:23:04,580
work we are in the boot sequence so you

00:23:02,359 --> 00:23:06,950
have a file system we have module we

00:23:04,580 --> 00:23:09,919
have we can start that so let's start

00:23:06,950 --> 00:23:11,809
application you want to connect to your

00:23:09,919 --> 00:23:15,889
IT device for example so probably you

00:23:11,809 --> 00:23:17,960
need SSH maybe you want to do to connect

00:23:15,889 --> 00:23:20,029
directly so you may need to RIT device

00:23:17,960 --> 00:23:24,440
on a VPN network let's start a VPN

00:23:20,029 --> 00:23:26,090
server let such a VPN client don't

00:23:24,440 --> 00:23:27,409
forget to start some kind of system

00:23:26,090 --> 00:23:30,350
logging we do this one for example

00:23:27,409 --> 00:23:33,289
Callum Kellogg is a camel camel Nagar

00:23:30,350 --> 00:23:35,239
and you want to stop your specific

00:23:33,289 --> 00:23:37,549
business up for example or in our case

00:23:35,239 --> 00:23:42,289
you want to start something that we

00:23:37,549 --> 00:23:45,280
scanned with Wi-Fi and so you have some

00:23:42,289 --> 00:23:47,750
kind of code

00:23:45,280 --> 00:23:52,600
you create a super wizard object in the

00:23:47,750 --> 00:23:52,600
variable V and then start or you process

00:23:56,560 --> 00:24:01,370
again and again people talk about

00:23:58,580 --> 00:24:03,350
modularity so you need to separate stuff

00:24:01,370 --> 00:24:06,050
break down complex thing into simpler

00:24:03,350 --> 00:24:09,980
things so if you want to scan Wi-Fi we

00:24:06,050 --> 00:24:13,550
we probably want to generate a stream of

00:24:09,980 --> 00:24:18,290
Wi-Fi information at one time so we have

00:24:13,550 --> 00:24:20,630
a we fish can just check the wiki status

00:24:18,290 --> 00:24:23,210
every like five second see if there is

00:24:20,630 --> 00:24:27,620
new Wi-Fi detector and if there is just

00:24:23,210 --> 00:24:29,090
an event hey I've got a new Wi-Fi you

00:24:27,620 --> 00:24:34,720
probably want a program that just

00:24:29,090 --> 00:24:37,250
listened to to your GPS GPS chip and

00:24:34,720 --> 00:24:41,420
most of the time the strip talk in the

00:24:37,250 --> 00:24:43,490
language code or enemy a 183 I January

00:24:41,420 --> 00:24:46,400
on the serial device so you just opened

00:24:43,490 --> 00:24:49,610
the device with by serial parse the

00:24:46,400 --> 00:24:52,640
outputs and then generate position

00:24:49,610 --> 00:24:55,430
stream in in the source code on the

00:24:52,640 --> 00:24:58,280
repository it's a fake GPS because I

00:24:55,430 --> 00:25:00,980
don't know the specific of your set up

00:24:58,280 --> 00:25:04,130
so I just generate position frame fixed

00:25:00,980 --> 00:25:06,020
on this building and probably there

00:25:04,130 --> 00:25:08,870
should be a program that kind of merged

00:25:06,020 --> 00:25:11,240
days to stream and associate the last

00:25:08,870 --> 00:25:14,390
position with the the last roofie

00:25:11,240 --> 00:25:16,970
detected or something like that I which

00:25:14,390 --> 00:25:22,010
bring us to another decision to take Oh

00:25:16,970 --> 00:25:23,330
everything communicate together so you

00:25:22,010 --> 00:25:29,150
have the prime of inter process

00:25:23,330 --> 00:25:30,950
communication on a Linux system the the

00:25:29,150 --> 00:25:31,430
most basic primitive available is the

00:25:30,950 --> 00:25:34,040
POSIX

00:25:31,430 --> 00:25:36,410
Pacific communication system so you have

00:25:34,040 --> 00:25:39,410
five four you have signal you have

00:25:36,410 --> 00:25:41,600
shared memory you have specific message

00:25:39,410 --> 00:25:43,460
queue you have you you can write to the

00:25:41,600 --> 00:25:48,980
file system it you can work something

00:25:43,460 --> 00:25:53,750
out directly by fire unfortunately the

00:25:48,980 --> 00:25:55,430
API are quite rough you don't get a lot

00:25:53,750 --> 00:25:58,490
with it

00:25:55,430 --> 00:26:00,860
for example knowing the current state of

00:25:58,490 --> 00:26:04,580
a circuit he's kind of a tricky question

00:26:00,860 --> 00:26:06,590
at any given time so maybe we should

00:26:04,580 --> 00:26:09,430
look around and see what the Python

00:26:06,590 --> 00:26:12,050
library has to offer us

00:26:09,430 --> 00:26:16,010
they are basically built on the POSIX

00:26:12,050 --> 00:26:19,130
stuff so the API a little more photonic

00:26:16,010 --> 00:26:23,030
but they don't provide much much more

00:26:19,130 --> 00:26:25,610
feature and if they fail for some reason

00:26:23,030 --> 00:26:27,590
usually you end up with a deadlock and

00:26:25,610 --> 00:26:30,230
everything is blocked instead of

00:26:27,590 --> 00:26:32,210
crashing and crushing is actually better

00:26:30,230 --> 00:26:35,120
because if they crash you can restart it

00:26:32,210 --> 00:26:37,880
and try to recover if it's blocking you

00:26:35,120 --> 00:26:41,809
need to detect that you have blocked if

00:26:37,880 --> 00:26:43,580
you it's not it's not easy and you have

00:26:41,809 --> 00:26:46,990
also another alternative view is that

00:26:43,580 --> 00:26:49,730
using big big third party system like

00:26:46,990 --> 00:26:53,450
some kind of database or ready some

00:26:49,730 --> 00:26:55,460
stuff like that basically this it's

00:26:53,450 --> 00:26:58,190
taking building block several software

00:26:55,460 --> 00:27:03,590
stack and victim to an IOT system so

00:26:58,190 --> 00:27:05,600
what could possibly go wrong when you

00:27:03,590 --> 00:27:06,679
have to choose is really you discard

00:27:05,600 --> 00:27:08,750
everything that doesn't fit your

00:27:06,679 --> 00:27:10,580
requirements and you end up with several

00:27:08,750 --> 00:27:16,640
possibility no you sure you need to

00:27:10,580 --> 00:27:18,559
select the best fit usually the main

00:27:16,640 --> 00:27:23,870
motion to consider is the simplicity of

00:27:18,559 --> 00:27:27,350
the API the the more you API simple the

00:27:23,870 --> 00:27:30,380
the faster you go the more you can you

00:27:27,350 --> 00:27:32,690
can add testing the the richness of your

00:27:30,380 --> 00:27:34,490
appear is important too for example you

00:27:32,690 --> 00:27:38,030
need a queue knowing how many element is

00:27:34,490 --> 00:27:43,550
in the queue is really sure you can't

00:27:38,030 --> 00:27:48,470
have that on FIFO and stuff like that is

00:27:43,550 --> 00:27:50,650
that you can draw or should should it be

00:27:48,470 --> 00:27:53,360
a little very little fee for staffing

00:27:50,650 --> 00:27:56,179
and another dimension is to take into

00:27:53,360 --> 00:27:59,000
account is easy to test it python is

00:27:56,179 --> 00:28:02,210
really easy to test but if you are

00:27:59,000 --> 00:28:05,500
dependent of art system to test kind of

00:28:02,210 --> 00:28:08,480
destroy that capabilities so that's nice

00:28:05,500 --> 00:28:09,200
so why not ready so for those who don't

00:28:08,480 --> 00:28:11,720
know ready

00:28:09,200 --> 00:28:12,769
no school database which provides a way

00:28:11,720 --> 00:28:15,260
to manipulate list

00:28:12,769 --> 00:28:18,019
dict set and string in a general key

00:28:15,260 --> 00:28:20,690
space it's kind of a lightweight system

00:28:18,019 --> 00:28:22,429
for performance with the list you can

00:28:20,690 --> 00:28:24,919
easily implement a few push to the right

00:28:22,429 --> 00:28:29,059
for example and then put pump from the

00:28:24,919 --> 00:28:31,399
left at basically a FIFO so you have

00:28:29,059 --> 00:28:33,380
your system on the top separating all

00:28:31,399 --> 00:28:35,000
this application system up to the right

00:28:33,380 --> 00:28:36,889
specific application in the middle

00:28:35,000 --> 00:28:40,580
communication communicating between them

00:28:36,889 --> 00:28:42,289
with some rescuing in this example read

00:28:40,580 --> 00:28:44,990
this report from section so if you need

00:28:42,289 --> 00:28:48,309
to to increment a counter and push an

00:28:44,990 --> 00:28:51,919
element to the view you can etcetera

00:28:48,309 --> 00:28:55,220
okay so the Internet of Internet of

00:28:51,919 --> 00:28:58,130
Things usually is under the topic mid

00:28:55,220 --> 00:29:01,519
network so we need some kind of specific

00:28:58,130 --> 00:29:03,350
application to monitor the network you

00:29:01,519 --> 00:29:05,659
should definitely use a state model to

00:29:03,350 --> 00:29:08,779
know what what to start what to stop

00:29:05,659 --> 00:29:11,659
what route to to to to me to pay you

00:29:08,779 --> 00:29:14,419
packets to and stuff like that for that

00:29:11,659 --> 00:29:17,539
the Python standard Lib is unfortunately

00:29:14,419 --> 00:29:21,970
lacking of the right API but fortunately

00:29:17,539 --> 00:29:26,299
there is a very good lip called pivot to

00:29:21,970 --> 00:29:28,519
which with which you can control of the

00:29:26,299 --> 00:29:30,230
low-level network stuff and so you just

00:29:28,519 --> 00:29:34,880
need to concentrate on the higher level

00:29:30,230 --> 00:29:36,830
business logic also for the for the

00:29:34,880 --> 00:29:39,139
streaming of the data you have access to

00:29:36,830 --> 00:29:41,929
a lot of Libre library like request if

00:29:39,139 --> 00:29:44,779
you want to push it to HTTP if you want

00:29:41,929 --> 00:29:47,059
to stream thing from message oriented

00:29:44,779 --> 00:29:50,899
kind of architecture you can use a power

00:29:47,059 --> 00:29:53,330
for MQTT picker for amputee and stuff

00:29:50,899 --> 00:29:57,139
like that depending of what your several

00:29:53,330 --> 00:30:01,179
needle obviously it's very specific to

00:29:57,139 --> 00:30:06,559
what kind of setup you have you have so

00:30:01,179 --> 00:30:08,950
not much to say about that but what I

00:30:06,559 --> 00:30:12,440
can say about it it's

00:30:08,950 --> 00:30:17,690
endian something will fail so you need

00:30:12,440 --> 00:30:20,240
to understand what what happened again

00:30:17,690 --> 00:30:22,320
Python as a nice-lookin with you you can

00:30:20,240 --> 00:30:24,450
define the log image instead

00:30:22,320 --> 00:30:26,790
for example I'll import that file

00:30:24,450 --> 00:30:29,460
everywhere so you have the same settings

00:30:26,790 --> 00:30:31,530
for everything with the Python module

00:30:29,460 --> 00:30:33,030
you can easily store your login valid

00:30:31,530 --> 00:30:34,920
for example rotating them with a

00:30:33,030 --> 00:30:37,950
rotating feel a file on low and stuff

00:30:34,920 --> 00:30:40,170
like that there is a bit of a catch if

00:30:37,950 --> 00:30:43,560
you for example settings module that you

00:30:40,170 --> 00:30:46,950
import everywhere you need to configure

00:30:43,560 --> 00:30:48,690
your logger after the file system is

00:30:46,950 --> 00:30:51,420
correctly constructed because when you

00:30:48,690 --> 00:30:53,100
import a logger it will try to open the

00:30:51,420 --> 00:30:56,520
file and stuff like that if you haven't

00:30:53,100 --> 00:31:01,140
logged month you are you have slash bar

00:30:56,520 --> 00:31:04,950
for example by treaty crash also you

00:31:01,140 --> 00:31:07,140
should really really really lug the the

00:31:04,950 --> 00:31:09,390
system matrix you should let the CPU

00:31:07,140 --> 00:31:12,570
load you should you memories in a given

00:31:09,390 --> 00:31:15,180
time and sending to the server but you

00:31:12,570 --> 00:31:18,140
should not try to send your log directly

00:31:15,180 --> 00:31:20,670
for example if you if you know a century

00:31:18,140 --> 00:31:23,250
and you see I it's a good idea the

00:31:20,670 --> 00:31:30,060
string to stream the log directly from

00:31:23,250 --> 00:31:31,650
the device to sentry it can be it in

00:31:30,060 --> 00:31:35,370
some cases it's not a good idea because

00:31:31,650 --> 00:31:37,590
if you have network issue which is

00:31:35,370 --> 00:31:41,040
generating log you basically generic

00:31:37,590 --> 00:31:43,290
lock that make your network issue worse

00:31:41,040 --> 00:31:47,250
so you have a positive feedback loop and

00:31:43,290 --> 00:31:49,680
and then everything crash again what you

00:31:47,250 --> 00:31:51,620
can do for example is to break that

00:31:49,680 --> 00:31:55,320
feedback loop by counting the error

00:31:51,620 --> 00:31:57,810
sending the there are accounts in with

00:31:55,320 --> 00:32:00,600
the periodic metric and stuff like that

00:31:57,810 --> 00:32:02,880
and if you see that contouring tracing

00:32:00,600 --> 00:32:08,870
you connect to the device and retrieve

00:32:02,880 --> 00:32:10,260
your lab that's that's that's a strategy

00:32:08,870 --> 00:32:14,880
ok

00:32:10,260 --> 00:32:18,750
if you connect to the device usually use

00:32:14,880 --> 00:32:22,050
SSH and as a search after the login your

00:32:18,750 --> 00:32:25,410
very spawn bash or any shape you want

00:32:22,050 --> 00:32:27,030
but it can spawn Python - you can

00:32:25,410 --> 00:32:30,390
connect directly to a Python concern if

00:32:27,030 --> 00:32:32,580
you want there are two things you need

00:32:30,390 --> 00:32:35,670
to do it is redefine the default shell

00:32:32,580 --> 00:32:39,390
in a TC password file

00:32:35,670 --> 00:32:41,160
and you need to authorize the flight and

00:32:39,390 --> 00:32:45,450
three executive as a valid charge which

00:32:41,160 --> 00:32:48,360
is usually not by default if you have a

00:32:45,450 --> 00:32:52,280
collection in API and your device you

00:32:48,360 --> 00:32:55,380
can import that the this API you can ask

00:32:52,280 --> 00:32:58,080
the next like three for example you can

00:32:55,380 --> 00:33:00,809
just import the the step process from

00:32:58,080 --> 00:33:02,970
from from your supervisor supervisor I

00:33:00,809 --> 00:33:07,290
mean just call it and you know

00:33:02,970 --> 00:33:09,230
everything over within run since it's

00:33:07,290 --> 00:33:13,440
valid Python structure you can easily

00:33:09,230 --> 00:33:15,720
manipulate that for loop sleep one

00:33:13,440 --> 00:33:18,720
second and putting some stats and you

00:33:15,720 --> 00:33:24,080
have easier to easier way to debug don't

00:33:18,720 --> 00:33:27,390
use watch and and PS and stuff like that

00:33:24,080 --> 00:33:30,929
so we have we have a system that it's

00:33:27,390 --> 00:33:37,620
booted run application at one point you

00:33:30,929 --> 00:33:40,890
need to shut it down the way it works

00:33:37,620 --> 00:33:43,770
usually is the the alt command or the

00:33:40,890 --> 00:33:47,610
reboot command other shutdown command in

00:33:43,770 --> 00:33:51,240
in a desktop system send a signal to to

00:33:47,610 --> 00:33:57,059
in it and then in it activate the signal

00:33:51,240 --> 00:34:00,559
to to do alt is sick term and to ask me

00:33:57,059 --> 00:34:05,000
to reboot the Machine it's sig user one

00:34:00,559 --> 00:34:08,100
in it needs some kind of children sweet

00:34:05,000 --> 00:34:10,290
basically we stopped all the wraps in a

00:34:08,100 --> 00:34:12,359
good order because you probably don't

00:34:10,290 --> 00:34:14,490
want to shut everything down maybe you

00:34:12,359 --> 00:34:17,460
want to shut your applications

00:34:14,490 --> 00:34:20,070
application apps down first and then

00:34:17,460 --> 00:34:21,869
send some kind of last message rest of

00:34:20,070 --> 00:34:26,159
like that saying I'm shutting down and

00:34:21,869 --> 00:34:28,470
then stopping your system up when

00:34:26,159 --> 00:34:31,409
everything is shut Ashutosh you should

00:34:28,470 --> 00:34:33,300
sync your file system basically writing

00:34:31,409 --> 00:34:36,389
everything that is torrid buffer

00:34:33,300 --> 00:34:39,179
directly to the file system and then you

00:34:36,389 --> 00:34:44,460
have a Cisco to actually arts or reboot

00:34:39,179 --> 00:34:46,429
the board again a patent there's an

00:34:44,460 --> 00:34:49,059
offer

00:34:46,429 --> 00:34:51,919
around the scene Cisco or reboot our

00:34:49,059 --> 00:34:55,790
articles so just open the see library

00:34:51,919 --> 00:34:58,460
with the type and core everything the

00:34:55,790 --> 00:35:00,740
the algae the algae score and the

00:34:58,460 --> 00:35:03,380
reboots or are actually the same

00:35:00,740 --> 00:35:06,920
it's called reboots and they have some

00:35:03,380 --> 00:35:09,190
magic number for if you want to alt or

00:35:06,920 --> 00:35:09,190
reboot

00:35:10,240 --> 00:35:20,599
ok what about what about device if you

00:35:16,849 --> 00:35:25,099
need you'd ever probably that your

00:35:20,599 --> 00:35:27,680
architecture of IOT stuff is one if you

00:35:25,099 --> 00:35:30,800
have for example speculative extension

00:35:27,680 --> 00:35:32,809
maybe some part of the device that

00:35:30,800 --> 00:35:35,960
you're shutting down for power saving or

00:35:32,809 --> 00:35:39,800
stuff like that you actually can declare

00:35:35,960 --> 00:35:43,700
everything from the start and the color

00:35:39,800 --> 00:35:46,069
won't simply use the the thing if they

00:35:43,700 --> 00:35:49,670
are not there that's that's not a

00:35:46,069 --> 00:35:51,920
problem if you really really really

00:35:49,670 --> 00:35:53,990
really need to do it

00:35:51,920 --> 00:35:59,809
you can implement it by listening to you

00:35:53,990 --> 00:36:02,900
isn't it's it's Netflix Mettling socket

00:35:59,809 --> 00:36:07,089
name you opened it and the camel broke

00:36:02,900 --> 00:36:10,490
broadcast to every listener to you event

00:36:07,089 --> 00:36:14,030
some kind of message stupid ass true to

00:36:10,490 --> 00:36:17,180
read message with information of what

00:36:14,030 --> 00:36:18,000
device just get connected what what are

00:36:17,180 --> 00:36:20,109
this vendor ID

00:36:18,000 --> 00:36:23,869
[Music]

00:36:20,109 --> 00:36:28,280
Product ID what class of thing it's it

00:36:23,869 --> 00:36:31,240
sends a lot of information we have that

00:36:28,280 --> 00:36:33,150
act on it with the you dev rules and

00:36:31,240 --> 00:36:36,390
bring the

00:36:33,150 --> 00:36:38,730
myself so you just need to consume or

00:36:36,390 --> 00:36:42,240
this packet with a Python script if you

00:36:38,730 --> 00:36:44,369
recognize your you your the device that

00:36:42,240 --> 00:36:47,730
should appear just act on it any other

00:36:44,369 --> 00:36:52,440
rest also if you don't want to use your

00:36:47,730 --> 00:36:55,289
event because net link is it's not a

00:36:52,440 --> 00:36:58,529
great API and you want to use other

00:36:55,289 --> 00:37:00,930
thing there is another where there is a

00:36:58,529 --> 00:37:06,119
fine of electoral five in the profile

00:37:00,930 --> 00:37:09,510
system you can just echoed a program

00:37:06,119 --> 00:37:12,990
name in in that file and the camera will

00:37:09,510 --> 00:37:15,329
launch that program every time the odd

00:37:12,990 --> 00:37:17,549
plug event is is arriving and this

00:37:15,329 --> 00:37:20,130
program will receive information we are

00:37:17,549 --> 00:37:31,170
argument and environmental variable and

00:37:20,130 --> 00:37:36,569
stuff like that okay one of the other

00:37:31,170 --> 00:37:40,220
thing with speed 1 if bid 1 exceeds the

00:37:36,569 --> 00:37:43,980
capital panic it's not a nice thing

00:37:40,220 --> 00:37:46,619
images in other process there are no

00:37:43,980 --> 00:37:52,230
channel panic but are still annoying so

00:37:46,619 --> 00:37:54,869
you should test test your device so of

00:37:52,230 --> 00:37:59,549
course during development you should do

00:37:54,869 --> 00:38:05,000
unit testing but since there is several

00:37:59,549 --> 00:38:09,480
module interacting in ways unit test

00:38:05,000 --> 00:38:11,520
from fully add up to a point so you need

00:38:09,480 --> 00:38:14,819
at one point you need full integration

00:38:11,520 --> 00:38:17,460
testing so there is this program called

00:38:14,819 --> 00:38:19,940
CMU system and then usually the system

00:38:17,460 --> 00:38:22,500
RM if you are on our mo stuff like that

00:38:19,940 --> 00:38:24,210
but you need to have a good description

00:38:22,500 --> 00:38:27,839
of the Machine you are trying to

00:38:24,210 --> 00:38:31,589
everything and it's very slow so for

00:38:27,839 --> 00:38:35,970
testing needs it's for the worst case

00:38:31,589 --> 00:38:40,049
you should use it but not in not in most

00:38:35,970 --> 00:38:42,630
time and most most of the time there is

00:38:40,049 --> 00:38:45,130
some kind of of middle ground between

00:38:42,630 --> 00:38:48,010
the two you can use too

00:38:45,130 --> 00:38:50,620
but only for the user space program it

00:38:48,010 --> 00:38:54,460
will still use the US colonel

00:38:50,620 --> 00:38:57,040
you fruit in your in your image you use

00:38:54,460 --> 00:38:59,770
unshared that's programmed to separate

00:38:57,040 --> 00:39:00,550
namespace or process process ID space

00:38:59,770 --> 00:39:02,170
and stuff like that

00:39:00,550 --> 00:39:08,400
it's basically Conner container

00:39:02,170 --> 00:39:11,050
technology you can use this tutorial to

00:39:08,400 --> 00:39:15,520
reprogram docker from from scratch with

00:39:11,050 --> 00:39:20,290
shell and and use that to test your you

00:39:15,520 --> 00:39:24,670
RIT image it's quite fast so that's nice

00:39:20,290 --> 00:39:26,350
thing but you don't have access to the

00:39:24,670 --> 00:39:29,140
right hardware so you need to make

00:39:26,350 --> 00:39:31,030
everything a few pointers if you want to

00:39:29,140 --> 00:39:34,030
mock Wi-Fi there is a camel module

00:39:31,030 --> 00:39:36,670
called this one of this thing that can

00:39:34,030 --> 00:39:40,480
do outlaw simulation you can virtual

00:39:36,670 --> 00:39:42,400
Wi-Fi Wi-Fi inter interface bro pop-up

00:39:40,480 --> 00:39:45,520
and you just use whip as applicable on

00:39:42,400 --> 00:39:47,590
that for example if you if you have to

00:39:45,520 --> 00:39:52,150
mock cereal for example because you have

00:39:47,590 --> 00:39:56,590
the GPS chip talking of a serial device

00:39:52,150 --> 00:39:59,590
you can use speed absolute terminal if

00:39:56,590 --> 00:40:01,840
you have to interact with slash this you

00:39:59,590 --> 00:40:04,780
can easily use P fuse making a mock

00:40:01,840 --> 00:40:07,360
filesystem just the the read and the

00:40:04,780 --> 00:40:08,410
write for implementing the open read and

00:40:07,360 --> 00:40:11,320
write

00:40:08,410 --> 00:40:15,760
Cisco Land out putting some kind of

00:40:11,320 --> 00:40:21,010
default value if you need to mark slash

00:40:15,760 --> 00:40:30,700
dev and especially the ioctl code there

00:40:21,010 --> 00:40:34,360
is no anyway some some parting stuff the

00:40:30,700 --> 00:40:37,150
the the main problem with that is you

00:40:34,360 --> 00:40:41,020
can do everything in Python easily but

00:40:37,150 --> 00:40:43,570
it's not necessarily a good idea you

00:40:41,020 --> 00:40:46,660
really when when you want to do it you

00:40:43,570 --> 00:40:49,750
really need to be pragmatic a little bit

00:40:46,660 --> 00:40:54,910
of bash is largely superior to a

00:40:49,750 --> 00:40:56,260
full-blown program in Python sometime

00:40:54,910 --> 00:40:58,950
you simply don't need that feature that

00:40:56,260 --> 00:41:01,750
you want for example in the supervisor

00:40:58,950 --> 00:41:05,859
you would see I redirected some input

00:41:01,750 --> 00:41:08,140
because it's recess sorry but I didn't

00:41:05,859 --> 00:41:13,529
do the output so basically it's always

00:41:08,140 --> 00:41:16,180
printing on the on the on the console

00:41:13,529 --> 00:41:17,289
maybe it's not needed maybe you should

00:41:16,180 --> 00:41:20,619
use your Cisco

00:41:17,289 --> 00:41:22,180
module and not using your Python login

00:41:20,619 --> 00:41:25,569
module for everything maybe you're just

00:41:22,180 --> 00:41:29,529
just use it to some specific application

00:41:25,569 --> 00:41:36,730
and in any case the programs trace is

00:41:29,529 --> 00:41:39,010
your best friend the one last thing

00:41:36,730 --> 00:41:40,740
you're probably thinking in this top row

00:41:39,010 --> 00:41:42,520
this guy recorded a lot of things

00:41:40,740 --> 00:41:43,690
reinventing the wheel and stuff like

00:41:42,520 --> 00:41:48,730
that

00:41:43,690 --> 00:41:51,220
all this fig leaf yoga is is online you

00:41:48,730 --> 00:41:53,770
would see it's less than 1,000 in a line

00:41:51,220 --> 00:41:55,900
of code basically we replace most of the

00:41:53,770 --> 00:41:58,930
thing from boot to art running

00:41:55,900 --> 00:42:02,490
application doing stuff obviously not

00:41:58,930 --> 00:42:05,680
everything because it's leveraging

00:42:02,490 --> 00:42:08,680
libraries tens of thousands of line of

00:42:05,680 --> 00:42:12,190
code with with a little bit of glue what

00:42:08,680 --> 00:42:16,299
I printed is the little bit of glue the

00:42:12,190 --> 00:42:21,400
main shift is the switch from a Bosch

00:42:16,299 --> 00:42:23,890
based system using big stack like system

00:42:21,400 --> 00:42:26,500
the or it's eco system to a python-based

00:42:23,890 --> 00:42:29,140
kind of system using the standard

00:42:26,500 --> 00:42:39,609
stander and other library to do most of

00:42:29,140 --> 00:42:42,760
the stuff alright in summary the key

00:42:39,609 --> 00:42:44,349
point of this talk was energy you should

00:42:42,760 --> 00:42:46,869
really model your system we finished

00:42:44,349 --> 00:42:49,089
state machine don't consider that you

00:42:46,869 --> 00:42:52,390
have only one state and if that failed

00:42:49,089 --> 00:42:54,279
we don't care you can write your own in

00:42:52,390 --> 00:42:56,470
it and supervisor in Python it's quite

00:42:54,279 --> 00:42:58,720
easy the result our user is simpler and

00:42:56,470 --> 00:43:00,730
easier to debug for specific purpose

00:42:58,720 --> 00:43:03,539
system I'm not talking about general

00:43:00,730 --> 00:43:07,020
desktop system issue if you want to

00:43:03,539 --> 00:43:09,220
reuse that system for other projects you

00:43:07,020 --> 00:43:11,680
probably want to generalize it at some

00:43:09,220 --> 00:43:12,760
points but if you want to do it only

00:43:11,680 --> 00:43:14,950
once and

00:43:12,760 --> 00:43:19,450
it evolved with the product it's usually

00:43:14,950 --> 00:43:21,520
a nice nice way you should really avoid

00:43:19,450 --> 00:43:25,300
the possibility of using a level system

00:43:21,520 --> 00:43:28,510
a system to turn under the IPC instead

00:43:25,300 --> 00:43:30,550
of project primitive and container

00:43:28,510 --> 00:43:34,240
technology and emulation is great test

00:43:30,550 --> 00:43:37,350
embedded system so I thank you for

00:43:34,240 --> 00:43:37,350
listening to me

00:43:40,250 --> 00:43:44,690

YouTube URL: https://www.youtube.com/watch?v=XEStDrY5XkQ


