Title: How to Boost your Tensorflow model inference performance using Asyncio
Publication date: 2018-01-01
Playlist: PyCon India 2017
Description: 
	
Captions: 
	00:00:00,140 --> 00:00:07,500
because aha and I'm here to discuss

00:00:05,089 --> 00:00:10,889
boosting texaco influence performance

00:00:07,500 --> 00:00:14,820
using kissing cards and so let's get

00:00:10,889 --> 00:00:19,140
started so like I said I'm working as a

00:00:14,820 --> 00:00:23,100
research and idiom focused on life

00:00:19,140 --> 00:00:26,670
sciences so sama build the life science

00:00:23,100 --> 00:00:27,720
products for Big Pharma's right so one

00:00:26,670 --> 00:00:30,150
of the things that we are trying to do

00:00:27,720 --> 00:00:31,710
is how can we use the latest

00:00:30,150 --> 00:00:34,440
developments and deep learning

00:00:31,710 --> 00:00:38,820
apply such a scenario and everything and

00:00:34,440 --> 00:00:42,090
how can we reduce the you know time to

00:00:38,820 --> 00:00:43,290
market for of cancer pros right that's

00:00:42,090 --> 00:00:45,200
what one of the things that we were

00:00:43,290 --> 00:00:48,329
trying to do so how that happens is like

00:00:45,200 --> 00:00:48,870
there's something called that the govt

00:00:48,329 --> 00:00:51,600
donor

00:00:48,870 --> 00:00:53,879
so when FDA gives our approval for human

00:00:51,600 --> 00:00:58,050
rights on any cancer prevention it's not

00:00:53,879 --> 00:01:03,930
a development what they do is like they

00:00:58,050 --> 00:01:06,090
go to the cancer patients especially

00:01:03,930 --> 00:01:08,280
stage cancer go chiefs

00:01:06,090 --> 00:01:09,929
and over there and they try to match

00:01:08,280 --> 00:01:12,600
that which is the best part of going

00:01:09,929 --> 00:01:15,479
over to solving so which is the best

00:01:12,600 --> 00:01:19,979
match which is profile best matches for

00:01:15,479 --> 00:01:22,399
the given try so this kind of takes a

00:01:19,979 --> 00:01:26,939
lot of time and that's the reason why so

00:01:22,399 --> 00:01:28,979
the time taken correctly 17 is for a

00:01:26,939 --> 00:01:31,679
market or for a drug to reach market

00:01:28,979 --> 00:01:34,409
after vehicle drivers right which is

00:01:31,679 --> 00:01:37,530
something should not be happening

00:01:34,409 --> 00:01:40,560
because we can actually use to relieve

00:01:37,530 --> 00:01:50,939
it two to three years that's what we are

00:01:40,560 --> 00:01:54,209
working on so so so my area of interest

00:01:50,939 --> 00:01:56,099
is how can you best deploy those models

00:01:54,209 --> 00:01:57,929
and if you have obviously decided to

00:01:56,099 --> 00:02:01,879
send everybody and they are pretty good

00:01:57,929 --> 00:02:07,610
at the math and fixing everything and

00:02:01,879 --> 00:02:09,660
everything really good accuracy but

00:02:07,610 --> 00:02:12,269
unfortunately what I get to see is you

00:02:09,660 --> 00:02:15,269
know things are not from the software

00:02:12,269 --> 00:02:18,690
engineers perspective it's not done in

00:02:15,269 --> 00:02:19,079
the most optimal manner and why do I say

00:02:18,690 --> 00:02:23,040
that

00:02:19,079 --> 00:02:24,930
so let's take so deep learning models

00:02:23,040 --> 00:02:28,290
are all filter out of the car tensors

00:02:24,930 --> 00:02:30,329
right and it's a flow itself the name

00:02:28,290 --> 00:02:33,660
itself tensor so let's see what a tensor

00:02:30,329 --> 00:02:37,489
is okay it's basically a mathematical

00:02:33,660 --> 00:02:41,400
structure that groups vectors together

00:02:37,489 --> 00:02:44,430
right I'll show you an example of an

00:02:41,400 --> 00:02:47,609
image example so if you think about it

00:02:44,430 --> 00:02:50,849
and you take let's take an image of

00:02:47,609 --> 00:02:54,750
Korean white where it exists okay that

00:02:50,849 --> 00:02:59,370
went by 28 itself vector of matrix the

00:02:54,750 --> 00:03:03,260
second Matrix right if it's a color if

00:02:59,370 --> 00:03:06,150
it is a color color image RTV 28 by

00:03:03,260 --> 00:03:08,880
right if it's a video of 60

00:03:06,150 --> 00:03:11,310
frames-per-second 28 by 28 by three by

00:03:08,880 --> 00:03:14,700
sixty you get it again so that's the

00:03:11,310 --> 00:03:17,880
reason why you use stencils for deep

00:03:14,700 --> 00:03:19,200
learning right and another advantage of

00:03:17,880 --> 00:03:22,770
using texture so that you can actually

00:03:19,200 --> 00:03:24,900
batch everything so those who work with

00:03:22,770 --> 00:03:25,920
deep learning the rationalization and

00:03:24,900 --> 00:03:27,480
optimization

00:03:25,920 --> 00:03:28,740
it always makes sense so when you retire

00:03:27,480 --> 00:03:30,840
when you were training the data it's

00:03:28,740 --> 00:03:33,209
always better to run it backwards

00:03:30,840 --> 00:03:36,140
so it's actually an advanced the

00:03:33,209 --> 00:03:38,520
readiness object that gives the same

00:03:36,140 --> 00:03:40,410
operations like addition subtraction

00:03:38,520 --> 00:03:44,370
multiplication and I do menu item

00:03:40,410 --> 00:03:47,450
vectors on a big chunk of mitosis right

00:03:44,370 --> 00:03:49,650
that's the basic idea behind it but

00:03:47,450 --> 00:03:50,940
which is fine which is really good when

00:03:49,650 --> 00:03:53,100
you're creating it or not but then the

00:03:50,940 --> 00:03:56,430
problem is when you try to put it in

00:03:53,100 --> 00:03:58,770
production rate and Google actually you

00:03:56,430 --> 00:04:00,239
can read it in tens of you're serving

00:03:58,770 --> 00:04:01,800
there is a small section by Google says

00:04:00,239 --> 00:04:04,650
that it's always it will be better if

00:04:01,800 --> 00:04:06,330
you can actually pass your request right

00:04:04,650 --> 00:04:09,450
and there are other people who actually

00:04:06,330 --> 00:04:12,060
complain that tensorflow is you know

00:04:09,450 --> 00:04:13,590
ETSU is slow in production and all these

00:04:12,060 --> 00:04:16,859
that's because they are actually trying

00:04:13,590 --> 00:04:19,590
to request one sample processing at that

00:04:16,859 --> 00:04:20,729
time the required the thing that is

00:04:19,590 --> 00:04:23,729
required as to you have to actually

00:04:20,729 --> 00:04:27,419
match up together right if you think of

00:04:23,729 --> 00:04:30,240
it in that terms of that state in such

00:04:27,419 --> 00:04:34,640
in battery terms your user experience is

00:04:30,240 --> 00:04:40,470
gonna come along you get it generated so

00:04:34,640 --> 00:04:44,940
that's more that's something so that's

00:04:40,470 --> 00:04:48,390
what we were trying to solve so what we

00:04:44,940 --> 00:04:51,810
figured out of lowers the question was

00:04:48,390 --> 00:04:53,580
how to batch it in production using pure

00:04:51,810 --> 00:04:54,150
by that the alternates were to actually

00:04:53,580 --> 00:04:58,080
use

00:04:54,150 --> 00:04:59,430
so there was this language called go I'm

00:04:58,080 --> 00:05:02,220
sure everybody has heard of it

00:04:59,430 --> 00:05:04,280
it uses CSV so like you have a see

00:05:02,220 --> 00:05:08,600
structural structural programming to see

00:05:04,280 --> 00:05:08,600
object-oriented for for Java and

00:05:09,139 --> 00:05:13,470
hospital and Scala you have something

00:05:12,060 --> 00:05:16,620
called seriously an actor so yes people

00:05:13,470 --> 00:05:19,169
vote so policy is communicating

00:05:16,620 --> 00:05:21,419
sequential processes which if you look

00:05:19,169 --> 00:05:23,130
at the proper or a use case of go right

00:05:21,419 --> 00:05:24,840
you can you have something called guru

00:05:23,130 --> 00:05:27,240
teams right they are essentially

00:05:24,840 --> 00:05:29,310
co-routines itself but I will come to it

00:05:27,240 --> 00:05:37,620
I mean that's very useful when you want

00:05:29,310 --> 00:05:38,970
to do battery and if you are not to go

00:05:37,620 --> 00:05:43,520
routines that you have available in

00:05:38,970 --> 00:05:45,720
Python it's a cigarette right so I

00:05:43,520 --> 00:05:49,020
wanted to actually cover actor as well

00:05:45,720 --> 00:05:50,460
but then in a actors pretty common I

00:05:49,020 --> 00:05:52,800
mean if you think about micro services

00:05:50,460 --> 00:05:54,960
they're actually at the potential so I'm

00:05:52,800 --> 00:05:56,910
not gonna cover what you to get into

00:05:54,960 --> 00:05:58,169
much of the details of that but I have

00:05:56,910 --> 00:06:01,160
been trying to show how you can

00:05:58,169 --> 00:06:03,840
implement GST pattern goes time code

00:06:01,160 --> 00:06:11,720
invite you invite them using is a time

00:06:03,840 --> 00:06:14,700
no external dependencies nothing okay

00:06:11,720 --> 00:06:17,669
the first thing that I so let's just

00:06:14,700 --> 00:06:19,349
quickly cover our fluid items right the

00:06:17,669 --> 00:06:21,230
most common question that I get when I

00:06:19,349 --> 00:06:23,449
talk to people about

00:06:21,230 --> 00:06:25,520
channels and pipes and accessorize there

00:06:23,449 --> 00:06:27,020
is this massive where the first question

00:06:25,520 --> 00:06:30,070
that I get is how is it currently

00:06:27,020 --> 00:06:34,370
different from a submarine or a function

00:06:30,070 --> 00:06:36,229
and cool subroutine is actually a very

00:06:34,370 --> 00:06:41,210
low level of constant that exists in

00:06:36,229 --> 00:06:43,550
assembly it does not return some value

00:06:41,210 --> 00:06:52,100
it really has a return statement that

00:06:43,550 --> 00:06:58,310
says okay go back to the function within

00:06:52,100 --> 00:07:00,110
the language okay one more major one

00:06:58,310 --> 00:07:01,910
major difference between co-routines and

00:07:00,110 --> 00:07:04,010
functions this function is going one and

00:07:01,910 --> 00:07:06,650
it will point at one exit point so your

00:07:04,010 --> 00:07:08,270
you normal Python definition you have

00:07:06,650 --> 00:07:10,210
that calling it statement where you

00:07:08,270 --> 00:07:12,710
enter the function and then you have

00:07:10,210 --> 00:07:14,570
where as if you were to take if you want

00:07:12,710 --> 00:07:20,169
to look at a generator the generator has

00:07:14,570 --> 00:07:23,560
multiple statements and

00:07:20,169 --> 00:07:30,919
okay and one more thing no

00:07:23,560 --> 00:07:34,220
water channels okay so Shannon is our

00:07:30,919 --> 00:07:36,110
essential message passing medium if you

00:07:34,220 --> 00:07:37,789
want to think of operating system pipes

00:07:36,110 --> 00:07:40,250
maybe you can think of that but then

00:07:37,789 --> 00:07:42,620
pipes are like an operating system who

00:07:40,250 --> 00:07:44,840
service operating system there are

00:07:42,620 --> 00:07:47,169
constants so the problem with using

00:07:44,840 --> 00:07:49,930
operating system

00:07:47,169 --> 00:07:53,710
threats or pipes or processes with that

00:07:49,930 --> 00:07:57,789
you have to find the operating system

00:07:53,710 --> 00:08:00,069
services that does the particular thing

00:07:57,789 --> 00:08:01,960
which kind of slows down things right so

00:08:00,069 --> 00:08:04,030
we wanna stay as fit as possible inside

00:08:01,960 --> 00:08:08,889
the Python um itself and use the fight

00:08:04,030 --> 00:08:14,229
earlier for you know always as possible

00:08:08,889 --> 00:08:16,419
use of I to be a bit self and so there

00:08:14,229 --> 00:08:18,460
are certain things inside a CSP it's

00:08:16,419 --> 00:08:24,909
called events then you have channels

00:08:18,460 --> 00:08:27,190
then you have processes technical

00:08:24,909 --> 00:08:29,620
aspects of CSP I'm not gonna cover all

00:08:27,190 --> 00:08:32,700
that because they'll essentially they

00:08:29,620 --> 00:08:35,560
will be unnecessary waste of time plus

00:08:32,700 --> 00:08:36,099
when you suddenly get all this diversity

00:08:35,560 --> 00:08:40,390
face

00:08:36,099 --> 00:08:43,839
so whatever thing is one major

00:08:40,390 --> 00:08:50,500
difference between guru T so I'm sure

00:08:43,839 --> 00:08:52,149
everybody knows that what okay there is

00:08:50,500 --> 00:08:54,209
some this one more things that I like to

00:08:52,149 --> 00:08:57,160
cover that's called an operating system

00:08:54,209 --> 00:09:00,940
services operating system service call

00:08:57,160 --> 00:09:05,050
selectors okay so a selector is nothing

00:09:00,940 --> 00:09:07,390
but a notification manager this

00:09:05,050 --> 00:09:12,339
presentation manager will get into the

00:09:07,390 --> 00:09:18,640
details of them pretty good okay and

00:09:12,339 --> 00:09:22,290
discover this far out so here's the

00:09:18,640 --> 00:09:22,290
thing so if you notice this

00:09:32,930 --> 00:09:37,690
okay wait

00:09:41,080 --> 00:09:46,810
yeah the media twist to ask is I mean

00:09:44,040 --> 00:09:49,899
why am i considering a cool routine or a

00:09:46,810 --> 00:09:50,589
generator as a you know why is it so

00:09:49,899 --> 00:09:54,130
special

00:09:50,589 --> 00:09:55,990
okay the major reason for that is so if

00:09:54,130 --> 00:09:58,000
you think about how the function works a

00:09:55,990 --> 00:09:59,440
function it's pretty normal right you

00:09:58,000 --> 00:10:01,720
call a function it creates the stack

00:09:59,440 --> 00:10:04,089
thing and it does factoring a code

00:10:01,720 --> 00:10:06,579
object or that whatever if my whole

00:10:04,089 --> 00:10:08,649
object is assign a stack frame and then

00:10:06,579 --> 00:10:11,500
the function executes and the statue is

00:10:08,649 --> 00:10:14,829
cooperating that's how the state is

00:10:11,500 --> 00:10:18,760
managed by my clinic if you get a

00:10:14,829 --> 00:10:22,300
generator so if you think about it to me

00:10:18,760 --> 00:10:24,610
the magic with generators is that it

00:10:22,300 --> 00:10:26,430
kind of can you know if you have a heat

00:10:24,610 --> 00:10:29,380
statement in between it returns a value

00:10:26,430 --> 00:10:30,670
but then what if you want to think it

00:10:29,380 --> 00:10:34,329
relational terms you are actually

00:10:30,670 --> 00:10:36,160
popping the stack segment but the

00:10:34,329 --> 00:10:38,500
generator rex may be it is kind of

00:10:36,160 --> 00:10:41,290
mathematical suspended over there so

00:10:38,500 --> 00:10:42,940
that stack frame continues takes it even

00:10:41,290 --> 00:10:45,220
though it's a stack that lastin

00:10:42,940 --> 00:10:49,180
first-out you have to get rid of it if

00:10:45,220 --> 00:10:50,920
you take the idea so there is the small

00:10:49,180 --> 00:10:53,399
carrier and one this is one of the

00:10:50,920 --> 00:10:56,320
points that I always notice that people

00:10:53,399 --> 00:10:58,300
find generators and I think I oh who

00:10:56,320 --> 00:11:01,630
needs to be difficult to grasp because

00:10:58,300 --> 00:11:07,899
they are unaware of the small point

00:11:01,630 --> 00:11:10,480
which is why convenient stack is not

00:11:07,899 --> 00:11:15,070
actually implemented as a stack it's a

00:11:10,480 --> 00:11:17,380
heat that acts like a start right

00:11:15,070 --> 00:11:19,750
I'm showing you how you would have seen

00:11:17,380 --> 00:11:25,240
in your data structure classes it in

00:11:19,750 --> 00:11:26,680
your attic no structure paper and videos

00:11:25,240 --> 00:11:29,680
college that you can have a tree that

00:11:26,680 --> 00:11:31,120
can behave like a snack right so that's

00:11:29,680 --> 00:11:32,350
the same approach that has been done the

00:11:31,120 --> 00:11:34,270
fighting vmstat

00:11:32,350 --> 00:11:35,270
which gives so much do you see the

00:11:34,270 --> 00:11:37,490
opportunity to

00:11:35,270 --> 00:11:40,820
respectfully award that's the reason why

00:11:37,490 --> 00:11:42,560
something like a yield on a weight is

00:11:40,820 --> 00:11:43,190
able to you know suspended state in

00:11:42,560 --> 00:11:45,680
between

00:11:43,190 --> 00:11:47,120
so when whenever you know Michael starts

00:11:45,680 --> 00:11:50,810
executing each saying you don't have

00:11:47,120 --> 00:11:52,190
weight it just returns a value what it

00:11:50,810 --> 00:11:55,220
is supposed to return and the stack

00:11:52,190 --> 00:11:57,830
frame is you know frozen over there that

00:11:55,220 --> 00:12:01,730
the state of the function that should

00:11:57,830 --> 00:12:03,950
generate a function is frozen it

00:12:01,730 --> 00:12:10,400
continues to persist over there that's

00:12:03,950 --> 00:12:14,500
the key point here so okay let's get to

00:12:10,400 --> 00:12:14,500
the point I mean I explain all things

00:12:21,480 --> 00:12:33,120
okay let's get to a something

00:12:24,510 --> 00:12:34,980
so what I see Tiger does is it will some

00:12:33,120 --> 00:12:36,990
generators the only difference between

00:12:34,980 --> 00:12:41,070
enhancer KOCO routine and the generator

00:12:36,990 --> 00:12:43,830
is you have to explicitly call the

00:12:41,070 --> 00:12:45,750
generator for it to continue right you

00:12:43,830 --> 00:12:47,940
call or you do a next on it that's what

00:12:45,750 --> 00:12:48,540
the generator actually continues its

00:12:47,940 --> 00:12:53,040
execution

00:12:48,540 --> 00:12:55,110
whereas what I think I order says with

00:12:53,040 --> 00:12:57,120
that have a statement it's actually

00:12:55,110 --> 00:12:59,700
registering a qualified acumen registry

00:12:57,120 --> 00:13:04,320
with the operating system selector

00:12:59,700 --> 00:13:05,880
service so - you don't notify it so when

00:13:04,320 --> 00:13:08,190
it starts executing - reaches the every

00:13:05,880 --> 00:13:11,130
point and at that point it returns the

00:13:08,190 --> 00:13:13,470
value and it is the operating system to

00:13:11,130 --> 00:13:15,810
notify whenever whatever it's waiting

00:13:13,470 --> 00:13:20,630
for so maybe for an extra term or maybe

00:13:15,810 --> 00:13:24,270
an external input cubic on an input

00:13:20,630 --> 00:13:26,760
signal to Africa that's what is the

00:13:24,270 --> 00:13:29,700
basic structure behind it and that's

00:13:26,760 --> 00:13:33,810
what as I think I have a routine build

00:13:29,700 --> 00:13:37,470
all of them that basic idea that instead

00:13:33,810 --> 00:13:39,270
of using just the just upon by instead

00:13:37,470 --> 00:13:41,940
of using just at all they using an

00:13:39,270 --> 00:13:44,360
operating subsidy treasurers to revoke

00:13:41,940 --> 00:13:44,360
it further

00:13:50,750 --> 00:13:55,339
and so there are two possibilities with

00:13:53,269 --> 00:13:57,319
that okay

00:13:55,339 --> 00:14:02,089
there is this one talk where David

00:13:57,319 --> 00:14:04,819
Beasley power generators you I thought I

00:14:02,089 --> 00:14:07,639
love the off button that is showing how

00:14:04,819 --> 00:14:09,230
we could create AI process by place

00:14:07,639 --> 00:14:12,350
between generators it's a really good

00:14:09,230 --> 00:14:15,290
now those who haven't seen it you should

00:14:12,350 --> 00:14:18,009
see three robots of your mind you know

00:14:15,290 --> 00:14:22,129
more now are possible with just fighter

00:14:18,009 --> 00:14:25,149
so okay there are two possibilities you

00:14:22,129 --> 00:14:27,589
will be better with bodies one is

00:14:25,149 --> 00:14:30,920
co-routines will spawn smaller

00:14:27,589 --> 00:14:32,269
subproblems and two proteins can be

00:14:30,920 --> 00:14:33,769
connected to I have is a specific

00:14:32,269 --> 00:14:36,490
structure data structure language she

00:14:33,769 --> 00:14:36,490
was acting attack

00:14:41,770 --> 00:14:50,410
we see an example of movies morning

00:14:43,899 --> 00:14:52,830
oldie okay if you look at in this

00:14:50,410 --> 00:14:52,830
example

00:14:57,400 --> 00:15:04,810
you see this please baby there's a child

00:15:01,420 --> 00:15:08,260
co-routine and so whenever this is I'm

00:15:04,810 --> 00:15:09,630
using a flavor arsenic it just it's a

00:15:08,260 --> 00:15:12,460
pure SE cayó

00:15:09,630 --> 00:15:14,140
framework that is actually really fast

00:15:12,460 --> 00:15:17,860
when there are reasons to why it is

00:15:14,140 --> 00:15:22,000
actually faster which so they are using

00:15:17,860 --> 00:15:24,610
a custom implementation of the corner

00:15:22,000 --> 00:15:28,650
even to God will you be you and you

00:15:24,610 --> 00:15:32,200
actually dependent live movie which is

00:15:28,650 --> 00:15:33,430
used by DJ's because of which this thing

00:15:32,200 --> 00:15:41,290
is actually it's equal to is actually

00:15:33,430 --> 00:15:43,600
very fast so this is a child

00:15:41,290 --> 00:15:47,680
cootie that the parent is gonna spawn

00:15:43,600 --> 00:15:49,860
okay so for each week and here if you

00:15:47,680 --> 00:15:49,860
notice

00:15:55,839 --> 00:16:02,019
the child quarantine actually cause any

00:15:59,319 --> 00:16:04,319
best processing service in this case it

00:16:02,019 --> 00:16:08,759
could be ten suffer or cervical whatever

00:16:04,319 --> 00:16:12,670
okay so so whenever a request comes in a

00:16:08,759 --> 00:16:14,470
parent will spawn a child so this is

00:16:12,670 --> 00:16:16,569
using their sockets and the child

00:16:14,470 --> 00:16:20,709
reading the bad processing service in

00:16:16,569 --> 00:16:22,629
the spot whenever it responds why our

00:16:20,709 --> 00:16:25,180
web sockets and that will send back the

00:16:22,629 --> 00:16:27,370
responsible user that's the basic Rock

00:16:25,180 --> 00:16:30,269
software okay let's see how this is

00:16:27,370 --> 00:16:30,269
actually happening

00:16:37,190 --> 00:16:45,670
okay this is a parent request a

00:16:42,310 --> 00:16:49,870
parameter it gets a request

00:16:45,670 --> 00:16:49,870
okay and first of all

00:16:54,550 --> 00:17:00,560
this is a bad service this is the future

00:16:57,640 --> 00:17:03,140
and we do it quick and this is the

00:17:00,560 --> 00:17:05,449
constant the biter p.m. call psychics so

00:17:03,140 --> 00:17:07,640
I'm trying to show how it happens behind

00:17:05,449 --> 00:17:11,270
the scenes inside tighten using just a

00:17:07,640 --> 00:17:13,880
simple presentation so the first request

00:17:11,270 --> 00:17:18,350
comes in and ok one more thing is this

00:17:13,880 --> 00:17:21,110
bad sir it's set to start processing

00:17:18,350 --> 00:17:26,480
when the buffer reaches 3 so when it

00:17:21,110 --> 00:17:34,400
gets three samples it starts it starts

00:17:26,480 --> 00:17:41,780
with job so you get the first request it

00:17:34,400 --> 00:17:47,030
spawns a China and okay if you notice

00:17:41,780 --> 00:17:50,240
the difference in the and this one is in

00:17:47,030 --> 00:17:51,290
the call stack section the patent is not

00:17:50,240 --> 00:17:54,260
existing anymore

00:17:51,290 --> 00:17:56,090
the parent is so the parents wants the

00:17:54,260 --> 00:17:57,620
child and it's not anything anymore

00:17:56,090 --> 00:18:00,710
that's how the job of the pack was

00:17:57,620 --> 00:18:03,830
responded that said so the child has

00:18:00,710 --> 00:18:05,360
been spawned and the child reaches so it

00:18:03,830 --> 00:18:07,700
reaches a section where you call awake

00:18:05,360 --> 00:18:10,610
some bad service latch processing

00:18:07,700 --> 00:18:14,270
service it calls the Cossack so this can

00:18:10,610 --> 00:18:17,360
be HTTP forum whatever it creates a

00:18:14,270 --> 00:18:19,250
sample there and the child creates a

00:18:17,360 --> 00:18:20,540
future because it's waiting for that

00:18:19,250 --> 00:18:23,540
response to come back which hasn't

00:18:20,540 --> 00:18:29,840
happened yet because the buffer is set

00:18:23,540 --> 00:18:32,800
to 3 so c1 is for child Mona that's the

00:18:29,840 --> 00:18:39,230
basic nomenclature that our platform

00:18:32,800 --> 00:18:42,070
goes and China suspended so if you see

00:18:39,230 --> 00:18:42,070
in the course

00:18:50,170 --> 00:19:42,230
right okay at this point what happens is

00:19:32,330 --> 00:19:43,700
now you have you have three samples so

00:19:42,230 --> 00:19:47,810
let's take the tensor flow this thing is

00:19:43,700 --> 00:19:50,870
said to process for three requests at

00:19:47,810 --> 00:19:55,160
this point suppose starts working does

00:19:50,870 --> 00:19:58,730
it stop so these futures are now the

00:19:55,160 --> 00:20:00,770
sound right and because they exist in

00:19:58,730 --> 00:20:02,720
the call stack you can actually further

00:20:00,770 --> 00:20:06,620
continue from the point where it was

00:20:02,720 --> 00:20:10,010
cost okay so it takes first c1 c1 we

00:20:06,620 --> 00:20:11,390
give the response next see now you have

00:20:10,010 --> 00:20:17,520
disappeared from the backside because

00:20:11,390 --> 00:20:21,779
job is done again c2 and then

00:20:17,520 --> 00:20:26,510
even c3 and you would see the S III will

00:20:21,779 --> 00:20:26,510
go so let's say my creative process so

00:20:30,380 --> 00:20:39,330
that is that's kind of part of factor

00:20:34,350 --> 00:20:41,340
model called super supervisor pattern

00:20:39,330 --> 00:20:44,130
asset like a parent will spawn multiple

00:20:41,340 --> 00:20:48,470
small movies which is responsible for

00:20:44,130 --> 00:20:48,470
manage to keeping track of the state of

00:20:51,380 --> 00:20:57,980
now next s connect kurudi chase

00:21:10,580 --> 00:21:15,260
I'm not sure of any simple examples so

00:21:12,800 --> 00:21:18,170
if you look at it you have a producer

00:21:15,260 --> 00:21:20,120
and I can see what this is I'm sure many

00:21:18,170 --> 00:21:22,190
of you might have already seen all this

00:21:20,120 --> 00:21:22,610
is nothing specific special happening

00:21:22,190 --> 00:21:24,200
here

00:21:22,610 --> 00:21:31,420
we need to guess I'm passing in a

00:21:24,200 --> 00:21:34,280
parameter called Q and Q is an asset IOT

00:21:31,420 --> 00:21:36,880
the producer will produce some values

00:21:34,280 --> 00:21:36,880
using

00:21:44,400 --> 00:21:49,260
just I trade over it I put the values

00:21:46,740 --> 00:21:51,510
and the consumer will consume and print

00:21:49,260 --> 00:21:53,460
it nothing's he gives happening here so

00:21:51,510 --> 00:21:56,130
the major difference between what I

00:21:53,460 --> 00:21:58,260
showed previously and this one is in the

00:21:56,130 --> 00:21:59,940
previous one they've got multiple small

00:21:58,260 --> 00:22:02,100
small cobalt each being Spock spawn

00:21:59,940 --> 00:22:05,070
right in this one there are already two

00:22:02,100 --> 00:22:06,510
co-routines right one is producing the

00:22:05,070 --> 00:22:08,280
generating the by - I'm putting it down

00:22:06,510 --> 00:22:10,290
with you and the second one is actually

00:22:08,280 --> 00:22:12,420
consuming it and doing whatever possibly

00:22:10,290 --> 00:22:14,580
it's supposed to do right so there are

00:22:12,420 --> 00:22:17,160
many proteins average so instead of C 1

00:22:14,580 --> 00:22:22,400
C 2 C 3 multiple proteins inside is that

00:22:17,160 --> 00:22:22,400
you'll have a B C 1 and C 2 that's all

00:22:24,950 --> 00:22:32,010
it does nothing in this produces and

00:22:27,570 --> 00:22:34,380
produces the value so now let's scale

00:22:32,010 --> 00:22:36,240
what I showed you previously on a much

00:22:34,380 --> 00:22:39,450
bigger level so let's try to form

00:22:36,240 --> 00:22:41,340
co-routine graphs okay this is where as

00:22:39,450 --> 00:22:44,550
things start getting interesting

00:22:41,340 --> 00:22:48,060
so let us say your particular so this I

00:22:44,550 --> 00:22:51,240
started experimenting with this with

00:22:48,060 --> 00:22:52,800
this idea we we are actually trying to

00:22:51,240 --> 00:22:55,170
build a virtual assistant more of like a

00:22:52,800 --> 00:22:57,810
bot so with what's it's like you have to

00:22:55,170 --> 00:22:59,760
be able to manage your states in a

00:22:57,810 --> 00:23:03,360
scalable manner and if you think about

00:22:59,760 --> 00:23:05,700
abroad right each user is having a is

00:23:03,360 --> 00:23:09,710
having a conversation and conversations

00:23:05,700 --> 00:23:09,710
can move in direction which kind of

00:23:10,010 --> 00:23:15,290
simple terms there will be a unique

00:23:12,110 --> 00:23:17,000
pipeline for each yourself right with a

00:23:15,290 --> 00:23:20,870
micro service or whatever you have is

00:23:17,000 --> 00:23:23,720
make you can you'll have a single

00:23:20,870 --> 00:23:25,040
pipeline which is common for everybody

00:23:23,720 --> 00:23:27,830
in this particular case will start

00:23:25,040 --> 00:23:38,299
having multiple pipelines for each user

00:23:27,830 --> 00:23:41,650
so so let's see a user 1 is logged and

00:23:38,299 --> 00:23:44,179
at that point he has his own routine

00:23:41,650 --> 00:23:48,340
having I'll show the code also for this

00:23:44,179 --> 00:23:54,410
after this but I need to put in the idea

00:23:48,340 --> 00:23:56,270
so the input comes in the first so if

00:23:54,410 --> 00:23:57,950
you notice in futures already all the

00:23:56,270 --> 00:24:00,440
nodes are registered inside the futures

00:23:57,950 --> 00:24:04,910
and the existing constant the reason be

00:24:00,440 --> 00:24:12,500
each node is awaiting input from the

00:24:04,910 --> 00:24:16,730
previous move I'll show the request came

00:24:12,500 --> 00:24:18,169
in no one starts processing and at that

00:24:16,730 --> 00:24:21,830
point it's future is gone

00:24:18,169 --> 00:24:28,760
if you notice this and then it passes

00:24:21,830 --> 00:24:31,760
the value to the Securities and to the

00:24:28,760 --> 00:24:33,890
nodes having e are the ones who are

00:24:31,760 --> 00:24:40,250
actually interested who will be calling

00:24:33,890 --> 00:24:42,740
telephone so so it starts this execution

00:24:40,250 --> 00:24:46,360
it reaches the point where it needs to

00:24:42,740 --> 00:24:49,220
power intensive would cost tens of flow

00:24:46,360 --> 00:24:54,410
registers of future suspects itself and

00:24:49,220 --> 00:24:56,750
then it passes the - just me and control

00:24:54,410 --> 00:25:01,900
to the next for routine and to say

00:24:56,750 --> 00:25:01,900
anything happens registers registers

00:25:08,029 --> 00:25:42,409
at this point okay so at this point so

00:25:47,179 --> 00:26:37,399
okay so you know

00:26:40,990 --> 00:26:45,610
so what I ever see is people tend to put

00:26:43,840 --> 00:26:47,920
the state whatever you have to store

00:26:45,610 --> 00:26:49,270
inside your dictionary and then which is

00:26:47,920 --> 00:26:59,590
kind of a risky thing to do

00:26:49,270 --> 00:27:04,920
they'll fire up in the locker so I try

00:26:59,590 --> 00:27:04,920
to package whole take it into frame

00:27:16,520 --> 00:27:22,090
so

00:27:18,610 --> 00:27:25,030
if we're calling this Facebook day is

00:27:22,090 --> 00:27:27,670
short time for an executive manager so

00:27:25,030 --> 00:27:29,320
if you think of it the traffic that Cody

00:27:27,670 --> 00:27:31,480
rocket actually is a directed acyclic

00:27:29,320 --> 00:27:40,990
even based it off because it's waiting

00:27:31,480 --> 00:27:45,700
for events so that no okay this is the

00:27:40,990 --> 00:27:47,410
top you can write any kind of concept

00:27:45,700 --> 00:27:54,240
for one hand only thing is going after

00:27:47,410 --> 00:27:58,150
the voice you have to inherit node and

00:27:54,240 --> 00:28:01,860
and output port to it so each exercise

00:27:58,150 --> 00:28:01,860
the traffic if you

00:28:15,520 --> 00:28:23,590
okay in this one is having three outputs

00:28:19,230 --> 00:28:25,540
302 tennis so that channel so you are

00:28:23,590 --> 00:28:28,000
adding an output channel over here self

00:28:25,540 --> 00:28:29,800
dot outputs dot I have an output port

00:28:28,000 --> 00:28:34,300
you're just nailing it for debugging

00:28:29,800 --> 00:28:36,460
purposes and you write your over

00:28:34,300 --> 00:28:38,500
artistic messing it up

00:28:36,460 --> 00:28:40,500
and you're putting this inside so like

00:28:38,500 --> 00:28:42,760
you saw the producer-consumer example

00:28:40,500 --> 00:28:44,770
like that simple

00:28:42,760 --> 00:28:48,040
sync it up stick you put it inside a

00:28:44,770 --> 00:28:50,110
infinite white moon so I have to work

00:28:48,040 --> 00:28:58,840
out so this is the work still in

00:28:50,110 --> 00:29:00,460
progress actually and so it's a so the

00:28:58,840 --> 00:29:02,710
signal is nothing but that a message

00:29:00,460 --> 00:29:07,300
right the signal object is a message

00:29:02,710 --> 00:29:21,520
that we pass it down to stream so you

00:29:07,300 --> 00:29:23,679
just think of the traffic we're just

00:29:21,520 --> 00:29:29,010
putting it down the valley so there will

00:29:23,679 --> 00:29:31,990
be so I'm initializing a graph object

00:29:29,010 --> 00:29:37,630
and okay and that graph will have two

00:29:31,990 --> 00:29:42,730
random then the third part is an app and

00:29:37,630 --> 00:29:45,490
a nothing just take the two incoming

00:29:42,730 --> 00:29:51,790
values and add it so what I've done is

00:29:45,490 --> 00:29:54,620
so you add two inputs and one output so

00:29:51,790 --> 00:29:58,190
because you have two

00:29:54,620 --> 00:29:58,190
[Music]

00:30:03,630 --> 00:30:09,850
it will take it and here's the thing see

00:30:06,429 --> 00:30:13,240
it's a waiting on the input for the

00:30:09,850 --> 00:30:16,090
input to combine and then it will take

00:30:13,240 --> 00:30:20,590
the C will take the signal value are

00:30:16,090 --> 00:30:21,250
added and then it will send it to the

00:30:20,590 --> 00:30:23,290
printer cover

00:30:21,250 --> 00:30:24,799
how does nothing but we'll just simply

00:30:23,290 --> 00:30:30,179
print it

00:30:24,799 --> 00:30:35,129
that's it so the main advantage of this

00:30:30,179 --> 00:30:37,499
list okay so if you think about

00:30:35,129 --> 00:30:41,279
headaches after he's smart spot it's

00:30:37,499 --> 00:30:42,929
just three small proteins right so what

00:30:41,279 --> 00:30:45,479
you can have so you can have really

00:30:42,929 --> 00:30:49,469
complex logic inside this donor card

00:30:45,479 --> 00:30:51,869
statement better because of so you can

00:30:49,469 --> 00:30:53,940
have dynamic core routine transforming

00:30:51,869 --> 00:30:56,069
depending upon what is your current

00:30:53,940 --> 00:30:58,889
requirement right so if the user say

00:30:56,069 --> 00:31:00,929
something you can have the flow it will

00:30:58,889 --> 00:31:04,109
keep it will modify itself urogram time

00:31:00,929 --> 00:31:17,099
and because it's spawning a routine is

00:31:04,109 --> 00:31:19,769
very light on the so he was explaining

00:31:17,099 --> 00:31:24,089
how it's not very very expensive for

00:31:19,769 --> 00:31:25,709
fighting to create objects and so the

00:31:24,089 --> 00:31:27,839
obvious question is why is this better

00:31:25,709 --> 00:31:29,459
than why is why is the same time factor

00:31:27,839 --> 00:31:32,399
better than creating multiple spawn

00:31:29,459 --> 00:31:34,139
spawn minutes right thread saw at the

00:31:32,399 --> 00:31:36,839
end of the day I know another operating

00:31:34,139 --> 00:31:38,849
system service so when you ask why to

00:31:36,839 --> 00:31:40,559
create a thread it's actually call it

00:31:38,849 --> 00:31:47,159
the operating system respective

00:31:40,559 --> 00:31:50,999
operating system service and at the end

00:31:47,159 --> 00:31:52,649
of the day Python is there's locking

00:31:50,999 --> 00:31:54,889
everything so it doesn't make sense to

00:31:52,649 --> 00:31:54,889

YouTube URL: https://www.youtube.com/watch?v=F9AAZqtViiI


