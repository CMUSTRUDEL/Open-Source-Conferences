Title: avc Geospatial data science and analysis using ArcGIS API for Python
Publication date: 2017-12-27
Playlist: PyCon India 2017
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:02,810
No

00:00:14,210 --> 00:00:20,030
okay I guess we should get started thank

00:00:17,540 --> 00:00:21,850
you guys for your patience for an

00:00:20,030 --> 00:00:24,230
attending this talk we had some

00:00:21,850 --> 00:00:26,150
technical problems in the morning when

00:00:24,230 --> 00:00:28,369
we tried to do it so thankfully we were

00:00:26,150 --> 00:00:30,380
able to find this lot so my name is

00:00:28,369 --> 00:00:33,440
rohit singh i am the lead developer of

00:00:30,380 --> 00:00:36,489
the ArcGIS APR for fight on and i'll be

00:00:33,440 --> 00:00:40,250
showing how you can use this API for

00:00:36,489 --> 00:00:43,580
geospatial data science and analysis so

00:00:40,250 --> 00:00:47,570
what is the arcgis api for python well

00:00:43,580 --> 00:00:50,720
it's a simple and expressive pythonic

00:00:47,570 --> 00:00:54,100
language for making maps doing

00:00:50,720 --> 00:00:57,230
geospatial analysis geocoding routing

00:00:54,100 --> 00:01:00,730
directions all the things that a GIS

00:00:57,230 --> 00:01:03,020
does so what is a GIS GIS is a

00:01:00,730 --> 00:01:04,520
geographic information system and I will

00:01:03,020 --> 00:01:10,009
be showing you how you can bring that

00:01:04,520 --> 00:01:13,280
inside of Jupiter notebook the RGS API

00:01:10,009 --> 00:01:15,800
for Python works wherever Python runs in

00:01:13,280 --> 00:01:17,690
your IDE on the command line what it

00:01:15,800 --> 00:01:19,640
really shines in the Jupiter notebook

00:01:17,690 --> 00:01:21,680
and I'll show you some instances of that

00:01:19,640 --> 00:01:24,170
and this presentation was actually

00:01:21,680 --> 00:01:27,020
originally authored in a Jupiter

00:01:24,170 --> 00:01:28,850
notebook and then I was using the rise

00:01:27,020 --> 00:01:31,520
plug-in to convert it into a revealed

00:01:28,850 --> 00:01:33,140
ojs slideshow and eventually because of

00:01:31,520 --> 00:01:35,689
some technical problems with the network

00:01:33,140 --> 00:01:40,549
it found its way into a PowerPoint

00:01:35,689 --> 00:01:43,670
presentation but okay so this is an API

00:01:40,549 --> 00:01:47,090
overview a module diagram of the ArcGIS

00:01:43,670 --> 00:01:50,450
API and in in the light green color

00:01:47,090 --> 00:01:53,240
you'll find the GIS module that's the

00:01:50,450 --> 00:01:56,030
entry point into this API that's where

00:01:53,240 --> 00:01:58,000
you go to to get to all the data and

00:01:56,030 --> 00:02:01,430
analysis capabilities of the platform

00:01:58,000 --> 00:02:04,329
and in green in the darker green color

00:02:01,430 --> 00:02:07,520
you find modules that let you work with

00:02:04,329 --> 00:02:09,320
geospatial data of different clients so

00:02:07,520 --> 00:02:12,980
there could be feature where it's also

00:02:09,320 --> 00:02:14,600
known as vector data and tools that work

00:02:12,980 --> 00:02:17,329
with feature data live in that module

00:02:14,600 --> 00:02:20,480
the rostral module lets you work with

00:02:17,329 --> 00:02:23,329
imagery layers and do raster analysis

00:02:20,480 --> 00:02:26,800
and similarly we've got modules for

00:02:23,329 --> 00:02:29,980
working with Network datasets real time

00:02:26,800 --> 00:02:32,920
data that's coming in and also big data

00:02:29,980 --> 00:02:35,560
so the API is quite capable lets you do

00:02:32,920 --> 00:02:38,020
all of that and in blue here you find

00:02:35,560 --> 00:02:40,750
those modules that let you perform

00:02:38,020 --> 00:02:42,880
certain workflows so you might want to

00:02:40,750 --> 00:02:45,370
call into the geometry API for example

00:02:42,880 --> 00:02:48,430
or do geocoding which is finding the

00:02:45,370 --> 00:02:50,950
locations of addresses and in orange are

00:02:48,430 --> 00:02:54,550
modules related to mapping and

00:02:50,950 --> 00:02:56,470
visualization that we we used to bring

00:02:54,550 --> 00:03:00,340
in a map widget into the Jupiter and

00:02:56,470 --> 00:03:03,820
notebook so we'll switch to a notebook

00:03:00,340 --> 00:03:05,590
here and this talks about you know how

00:03:03,820 --> 00:03:08,410
you could use this API how does it come

00:03:05,590 --> 00:03:11,110
into you but in notebook so this couple

00:03:08,410 --> 00:03:13,990
of weeks ago I was in Berlin for the s3

00:03:11,110 --> 00:03:16,150
developer summit European developer

00:03:13,990 --> 00:03:19,240
summit and one of the nice things that I

00:03:16,150 --> 00:03:22,480
found in Berlin is that the city is very

00:03:19,240 --> 00:03:25,540
friendly towards cyclists so you find

00:03:22,480 --> 00:03:27,550
that in addition to pedestrians you find

00:03:25,540 --> 00:03:29,260
that there's also a dedicated bike lane

00:03:27,550 --> 00:03:33,460
here where they could could ride and

00:03:29,260 --> 00:03:36,340
that's separate from the road where the

00:03:33,460 --> 00:03:38,200
tram or the vehicles are running so this

00:03:36,340 --> 00:03:40,530
is an introductory notebook you know

00:03:38,200 --> 00:03:43,480
showing how you could do an analysis

00:03:40,530 --> 00:03:46,810
using that so let's bring in a map and

00:03:43,480 --> 00:03:49,870
to start off I'll just apologize to the

00:03:46,810 --> 00:03:52,570
Python esters who are poor that I'm

00:03:49,870 --> 00:03:55,810
importing star but I'm trying to just

00:03:52,570 --> 00:03:58,960
simplify you know how to do the demo and

00:03:55,810 --> 00:04:01,270
you start off by connecting to your GIS

00:03:58,960 --> 00:04:05,290
so you might wonder well I don't have a

00:04:01,270 --> 00:04:08,560
GIS well actually ArcGIS online is a

00:04:05,290 --> 00:04:12,760
web-based GIS that ssv has provided and

00:04:08,560 --> 00:04:16,840
if you don't connect to your particular

00:04:12,760 --> 00:04:19,150
GIS which you can by giving its URL and

00:04:16,840 --> 00:04:21,250
your login credentials you are

00:04:19,150 --> 00:04:23,290
connecting to our GIS online and that

00:04:21,250 --> 00:04:25,810
lets you do a lot of things for instance

00:04:23,290 --> 00:04:27,430
I've brought in a map of Berlin and it

00:04:25,810 --> 00:04:29,830
comes within the notebook it's a live

00:04:27,430 --> 00:04:33,670
map you can pan and zoom around and I

00:04:29,830 --> 00:04:35,440
add layers to it so to me a map doesn't

00:04:33,670 --> 00:04:36,070
really make sense till I know where I'm

00:04:35,440 --> 00:04:38,920
at

00:04:36,070 --> 00:04:41,590
that map so here I had geo coded the

00:04:38,920 --> 00:04:44,920
location of the Berlin Congress center

00:04:41,590 --> 00:04:47,410
where this conference was and taken the

00:04:44,920 --> 00:04:48,250
first result that matches and drawn it

00:04:47,410 --> 00:04:51,130
on the map

00:04:48,250 --> 00:04:52,690
and in addition since the mouthful zoom

00:04:51,130 --> 00:04:56,140
zoomed out quite a bit

00:04:52,690 --> 00:04:58,810
I could also automate this map widget in

00:04:56,140 --> 00:05:02,460
the notebook by setting its extent to

00:04:58,810 --> 00:05:05,950
the location that I had just geo cordon

00:05:02,460 --> 00:05:08,560
now these maps come with several base

00:05:05,950 --> 00:05:09,760
maps so in addition to the topographic

00:05:08,560 --> 00:05:13,180
map that you saw earlier

00:05:09,760 --> 00:05:15,610
here I'm using the f3 world imagery base

00:05:13,180 --> 00:05:18,100
map and that comes with very high

00:05:15,610 --> 00:05:19,840
resolution imagery across the world in

00:05:18,100 --> 00:05:22,120
the case of Berlin it gives 30

00:05:19,840 --> 00:05:25,330
centimeter resolution imagery and you

00:05:22,120 --> 00:05:28,030
are you know you can use all of this

00:05:25,330 --> 00:05:30,610
just for free notice how when I logged

00:05:28,030 --> 00:05:33,370
onto the GIS I didn't give in any any

00:05:30,610 --> 00:05:36,730
credentials of course we give you an API

00:05:33,370 --> 00:05:38,770
and along with it we give you you know

00:05:36,730 --> 00:05:41,830
you can sign up to be a developer and

00:05:38,770 --> 00:05:43,660
get a developer account for free and

00:05:41,830 --> 00:05:45,760
you'll get rolling credits every month

00:05:43,660 --> 00:05:48,640
that lets you do a lot more that we'll

00:05:45,760 --> 00:05:51,010
see later and in addition to developer

00:05:48,640 --> 00:05:54,220
accounts we also have algae as public

00:05:51,010 --> 00:05:57,280
accounts that you can use to consume all

00:05:54,220 --> 00:06:00,730
the datasets that actually and other

00:05:57,280 --> 00:06:03,070
authoritative sources provide for use in

00:06:00,730 --> 00:06:04,630
your analysis and if you have some

00:06:03,070 --> 00:06:06,760
credits then of course you can use a

00:06:04,630 --> 00:06:10,750
subscriber content richard leaders it's

00:06:06,760 --> 00:06:12,220
high resolution imagery more analysis so

00:06:10,750 --> 00:06:14,710
that's one of the base maps that's

00:06:12,220 --> 00:06:18,790
available now talking about these bike

00:06:14,710 --> 00:06:21,070
lanes you know i also found that there

00:06:18,790 --> 00:06:23,470
are also these bike stations spread

00:06:21,070 --> 00:06:25,930
across the city where you could go pick

00:06:23,470 --> 00:06:28,120
up a bike of course you need to pay for

00:06:25,930 --> 00:06:30,490
it but you could do that by either

00:06:28,120 --> 00:06:32,740
calling a number on the bike or in this

00:06:30,490 --> 00:06:35,290
case you you know they've got some apps

00:06:32,740 --> 00:06:36,910
and you just give the bike number and of

00:06:35,290 --> 00:06:38,530
course you have credit card information

00:06:36,910 --> 00:06:41,110
and you'll be able to rent this bike

00:06:38,530 --> 00:06:44,230
ride it on one of those bike lanes drop

00:06:41,110 --> 00:06:47,830
it off at another location so to see you

00:06:44,230 --> 00:06:49,460
know if let's see if obvious online has

00:06:47,830 --> 00:06:53,000
data related to these by

00:06:49,460 --> 00:06:53,990
in Berlin all you need to do is call GIS

00:06:53,000 --> 00:06:56,690
not content

00:06:53,990 --> 00:06:59,479
start search and the content could be

00:06:56,690 --> 00:07:02,990
web maps or layers that you could bring

00:06:59,479 --> 00:07:05,560
in in your analysis so the second and

00:07:02,990 --> 00:07:08,150
the results are returned using a rich

00:07:05,560 --> 00:07:09,740
representations it's not just a textual

00:07:08,150 --> 00:07:12,770
representation it gives you a lot of

00:07:09,740 --> 00:07:15,470
metadata a screenshot so the second

00:07:12,770 --> 00:07:18,530
result we got is a layer of bike lanes

00:07:15,470 --> 00:07:23,330
in Berlin and let's add that to our map

00:07:18,530 --> 00:07:26,810
and here I'm added to this map and I see

00:07:23,330 --> 00:07:28,400
that Berlin has a very rich collection

00:07:26,810 --> 00:07:30,560
of bike lanes that he just saw which

00:07:28,400 --> 00:07:32,539
just disappeared because the network is

00:07:30,560 --> 00:07:38,360
not there but you get the idea I just

00:07:32,539 --> 00:07:41,030
added that layer to my map here so we

00:07:38,360 --> 00:07:43,340
know where the bike lanes are where do

00:07:41,030 --> 00:07:46,460
we go pick up those bikes from and for

00:07:43,340 --> 00:07:50,120
that I was able to find this URL that

00:07:46,460 --> 00:07:53,150
uses a bike's API to give the real-time

00:07:50,120 --> 00:07:56,180
location of the bikes and the bike

00:07:53,150 --> 00:07:59,300
stations that's not a problem we guys

00:07:56,180 --> 00:08:01,930
are Python developers we can use pandas

00:07:59,300 --> 00:08:05,900
to read in data from different sources

00:08:01,930 --> 00:08:09,020
for example you know you could read in

00:08:05,900 --> 00:08:11,120
CSV Excel and so many other formats so

00:08:09,020 --> 00:08:13,370
just look at the potential of sucking up

00:08:11,120 --> 00:08:15,919
data from somewhere else and then doing

00:08:13,370 --> 00:08:18,440
exploratory data analysis within the

00:08:15,919 --> 00:08:21,949
notebook and looking at the data we see

00:08:18,440 --> 00:08:24,560
we've got a timestamp and then the name

00:08:21,949 --> 00:08:27,380
and location of the bike stations how

00:08:24,560 --> 00:08:30,740
many bikes there are at each place and

00:08:27,380 --> 00:08:35,000
how many empty spaces there are and in

00:08:30,740 --> 00:08:38,149
addition to the bike stations it also

00:08:35,000 --> 00:08:41,870
has the location of each individual bike

00:08:38,149 --> 00:08:46,130
in that network now you can do some and

00:08:41,870 --> 00:08:51,200
durable exploratory data analysis and

00:08:46,130 --> 00:08:53,660
filter out the rows where there are more

00:08:51,200 --> 00:08:56,209
you know just see the rows where there

00:08:53,660 --> 00:08:58,230
are more than one bikes so you filtered

00:08:56,209 --> 00:09:01,320
out the bikes and now

00:08:58,230 --> 00:09:04,830
we have 77 bike stations being reported

00:09:01,320 --> 00:09:09,690
by that API so let's try to bring that

00:09:04,830 --> 00:09:13,140
into your GIS and one of the nice things

00:09:09,690 --> 00:09:16,800
we've done is that we let you import any

00:09:13,140 --> 00:09:20,100
pandas dataframe that has a location or

00:09:16,800 --> 00:09:22,320
an address as a layer in your GIS and

00:09:20,100 --> 00:09:25,230
then you can visualize it on a map or do

00:09:22,320 --> 00:09:29,730
analysis on it so here what I've done is

00:09:25,230 --> 00:09:32,450
I've added these locations as a layer to

00:09:29,730 --> 00:09:35,610
my map after importing them and

00:09:32,450 --> 00:09:38,270
additionally have used smart mappings so

00:09:35,610 --> 00:09:41,160
not only am I seeing the bike locations

00:09:38,270 --> 00:09:44,970
I'm also seeing how many bikes there are

00:09:41,160 --> 00:09:47,340
at each location so I can get a pop up

00:09:44,970 --> 00:09:50,910
and you know that gives me that

00:09:47,340 --> 00:09:52,890
information that at this location if the

00:09:50,910 --> 00:09:55,100
network was working right I would know

00:09:52,890 --> 00:09:58,410
exactly how many bikes were there

00:09:55,100 --> 00:10:02,490
apologies for that so going back to our

00:09:58,410 --> 00:10:04,500
presentation we saw that in action let's

00:10:02,490 --> 00:10:06,380
quickly skim through it thankfully we

00:10:04,500 --> 00:10:11,040
didn't have to use PowerPoint that was

00:10:06,380 --> 00:10:13,890
more or less live let's also see what

00:10:11,040 --> 00:10:16,160
how you could do spatial analysis with

00:10:13,890 --> 00:10:19,830
this so we actually give you a lot of

00:10:16,160 --> 00:10:22,140
spatial analysis tools that you can use

00:10:19,830 --> 00:10:24,900
to perform analysis we get you you can

00:10:22,140 --> 00:10:29,070
do point aggregation you can find

00:10:24,900 --> 00:10:32,370
locations nearest locations you can do

00:10:29,070 --> 00:10:34,740
proximity analysis and all of these are

00:10:32,370 --> 00:10:37,620
available through this API and once

00:10:34,740 --> 00:10:40,860
again any analysis starts with your GIS

00:10:37,620 --> 00:10:43,530
and earlier I was using our GS online as

00:10:40,860 --> 00:10:47,160
an anonymous user in this example I'm

00:10:43,530 --> 00:10:51,120
showing it need not be always an

00:10:47,160 --> 00:10:53,280
anonymous user here I'm not logging in

00:10:51,120 --> 00:10:56,010
to an obvious online organization which

00:10:53,280 --> 00:10:59,430
a company or an organization can create

00:10:56,010 --> 00:11:01,530
an account and then if you are a camp

00:10:59,430 --> 00:11:03,780
you know your organization doesn't want

00:11:01,530 --> 00:11:06,750
to be on a public Internet we give you

00:11:03,780 --> 00:11:09,810
our GS enterprise which lets you deploy

00:11:06,750 --> 00:11:12,970
this infrastructure in your own

00:11:09,810 --> 00:11:14,980
so here in this analysis I'm searching

00:11:12,970 --> 00:11:17,200
for content related to San Diego

00:11:14,980 --> 00:11:19,180
and I get back a layer of places to see

00:11:17,200 --> 00:11:22,450
in San Diego that's the first result and

00:11:19,180 --> 00:11:26,320
the third result is the layer of trolley

00:11:22,450 --> 00:11:27,910
stations in San Diego here I'm adding

00:11:26,320 --> 00:11:31,480
these layers to my map

00:11:27,910 --> 00:11:33,310
and I want to do an analysis that if I

00:11:31,480 --> 00:11:35,500
were to just use the public transport

00:11:33,310 --> 00:11:38,320
that is those trolley stations which are

00:11:35,500 --> 00:11:41,170
the places to see which I could go visit

00:11:38,320 --> 00:11:44,680
which are within a 5 minute of walking

00:11:41,170 --> 00:11:48,910
distance from those trolley stations so

00:11:44,680 --> 00:11:52,140
I'm calling 2 tools spatial analysis

00:11:48,910 --> 00:11:56,350
tools provided by this API and first

00:11:52,140 --> 00:12:00,340
creating buffers around those trolley

00:11:56,350 --> 00:12:02,350
stations of 0.5 miles well I could I

00:12:00,340 --> 00:12:04,270
could create buffers but I could also do

00:12:02,350 --> 00:12:06,940
drive time analysis and one of the

00:12:04,270 --> 00:12:08,920
travel modes that supported is walking I

00:12:06,940 --> 00:12:11,260
could have done that as well and then

00:12:08,920 --> 00:12:13,510
I'm overlaying the layers intersecting

00:12:11,260 --> 00:12:16,000
those those walkable areas with the

00:12:13,510 --> 00:12:18,310
attractions to see in San Diego and that

00:12:16,000 --> 00:12:21,040
gives me a shorter list of places that I

00:12:18,310 --> 00:12:24,070
could visit if I just wanted to use

00:12:21,040 --> 00:12:26,680
public transport and the results of your

00:12:24,070 --> 00:12:31,300
analysis you can visualize it on a map

00:12:26,680 --> 00:12:33,340
but you can also use pandas and query

00:12:31,300 --> 00:12:36,910
them as a table so this is showing the

00:12:33,340 --> 00:12:39,040
results as a table let's look at that in

00:12:36,910 --> 00:12:41,860
a little more detail how you could use

00:12:39,040 --> 00:12:45,250
pandas to work with feature or vector

00:12:41,860 --> 00:12:48,370
data and here I'll be working with a

00:12:45,250 --> 00:12:50,530
layer of counties in San Diego and

00:12:48,370 --> 00:12:54,580
notice that it's a feature layer

00:12:50,530 --> 00:12:57,100
collection so it could have one or more

00:12:54,580 --> 00:12:59,590
feature layers in it and I'm just using

00:12:57,100 --> 00:13:01,870
the first layer in this case the

00:12:59,590 --> 00:13:05,710
counties layer just has one layer of

00:13:01,870 --> 00:13:08,410
data and I could do queries using a

00:13:05,710 --> 00:13:11,950
where clause or giving a geometry that's

00:13:08,410 --> 00:13:14,500
what the obvious API lets you do but

00:13:11,950 --> 00:13:17,950
once I've done that query I can also get

00:13:14,500 --> 00:13:19,850
other data as a panda's data frame so

00:13:17,950 --> 00:13:22,640
look at the potential here

00:13:19,850 --> 00:13:26,480
there's so much public data available on

00:13:22,640 --> 00:13:29,120
RGS online you can query those those

00:13:26,480 --> 00:13:31,220
those layers get it in a panda's data

00:13:29,120 --> 00:13:34,100
frame and you can use it in your

00:13:31,220 --> 00:13:36,590
analysis you can bring it into

00:13:34,100 --> 00:13:39,050
matplotlib you can do exploratory data

00:13:36,590 --> 00:13:40,940
analysis you can push it into sighs you

00:13:39,050 --> 00:13:44,240
know scikit-learn do all kinds of

00:13:40,940 --> 00:13:48,680
analysis there so this is showing how I

00:13:44,240 --> 00:13:53,060
can do you know use and durable queries

00:13:48,680 --> 00:13:55,700
like once I have the counties in USA I

00:13:53,060 --> 00:13:58,340
could filter out just the counties in

00:13:55,700 --> 00:14:01,580
San Diego using an expression like that

00:13:58,340 --> 00:14:05,870
and then I can query its attributes like

00:14:01,580 --> 00:14:08,630
the population or since it's a spatial

00:14:05,870 --> 00:14:11,270
data frame we've extended the pandas

00:14:08,630 --> 00:14:13,700
dataframe that in addition to the

00:14:11,270 --> 00:14:16,190
attributes the tabular information it

00:14:13,700 --> 00:14:19,490
also has a geometry that you can plot on

00:14:16,190 --> 00:14:22,130
a map or do some analysis using so here

00:14:19,490 --> 00:14:25,300
I've taken the geometry of that County

00:14:22,130 --> 00:14:27,500
and plotted it on a map

00:14:25,300 --> 00:14:29,390
what are counties counties are

00:14:27,500 --> 00:14:32,030
administrative divisions you could think

00:14:29,390 --> 00:14:35,000
of it as districts in India so that's

00:14:32,030 --> 00:14:37,070
that's what they are referred to here

00:14:35,000 --> 00:14:39,860
I'm showing how you could you know once

00:14:37,070 --> 00:14:41,810
you have a data frame you just need to

00:14:39,860 --> 00:14:45,020
call the plot method and do exploratory

00:14:41,810 --> 00:14:47,180
data analysis and at a glance you start

00:14:45,020 --> 00:14:51,530
getting seeing insights into that data

00:14:47,180 --> 00:14:56,150
that Los Angeles County had by far the

00:14:51,530 --> 00:15:00,680
largest population among all counties of

00:14:56,150 --> 00:15:03,950
California now you can also visualize it

00:15:00,680 --> 00:15:06,380
on a map and all you need to do is add

00:15:03,950 --> 00:15:08,780
that layer and use one of these

00:15:06,380 --> 00:15:12,740
renderers that we give you so this is

00:15:08,780 --> 00:15:15,070
using smart mapping it is able to look

00:15:12,740 --> 00:15:17,660
at the base map that you're using and

00:15:15,070 --> 00:15:20,090
based on that it's able to find the

00:15:17,660 --> 00:15:22,970
right colors to use it looks at the data

00:15:20,090 --> 00:15:25,160
and finds the natural breaks in that

00:15:22,970 --> 00:15:27,620
data you don't need to specify all of

00:15:25,160 --> 00:15:30,320
that yourself but if you wanted to you

00:15:27,620 --> 00:15:31,350
can still do that but very easily you

00:15:30,320 --> 00:15:34,670
can plot this d

00:15:31,350 --> 00:15:37,350
using proportional symbols in this case

00:15:34,670 --> 00:15:40,560
let's take a look at another more

00:15:37,350 --> 00:15:42,420
comprehensive notebook to see you know

00:15:40,560 --> 00:15:46,940
what what kind of things you could do as

00:15:42,420 --> 00:15:49,650
as an analyst using this API

00:15:46,940 --> 00:15:51,990
so this is you know if you've been

00:15:49,650 --> 00:15:54,510
following the news recently you know

00:15:51,990 --> 00:15:57,060
that there are a lot of heavy rainfall

00:15:54,510 --> 00:16:00,000
in Chennai this week in fact it rained

00:15:57,060 --> 00:16:04,260
about like 72 percent of the annual

00:16:00,000 --> 00:16:07,650
rainfall in just the last week and a

00:16:04,260 --> 00:16:10,470
similar thing happened in 2015 and there

00:16:07,650 --> 00:16:12,720
were these floods in Chennai and this

00:16:10,470 --> 00:16:16,590
notebook is an analysis of the Chennai

00:16:12,720 --> 00:16:19,230
floods of 2015 and one of the advantages

00:16:16,590 --> 00:16:23,730
you know of using a notebook is you can

00:16:19,230 --> 00:16:26,340
bring in in rich rich media and and text

00:16:23,730 --> 00:16:28,860
to tell your story to tell your analysis

00:16:26,340 --> 00:16:32,670
and you can intersperse it with Python

00:16:28,860 --> 00:16:35,280
code so this notebook is available as a

00:16:32,670 --> 00:16:37,380
sample that you could play with in the

00:16:35,280 --> 00:16:41,310
API but I just wanted to highlight a few

00:16:37,380 --> 00:16:44,400
things that that make this API truly

00:16:41,310 --> 00:16:48,330
standout and how easy it is to use so to

00:16:44,400 --> 00:16:51,240
start off it it visualizes Chennai and

00:16:48,330 --> 00:16:55,200
it's added a layer of the population

00:16:51,240 --> 00:16:58,350
that's affected now here I have some

00:16:55,200 --> 00:17:00,990
local data that I was able to obtain for

00:16:58,350 --> 00:17:03,690
the metrological Department in Chennai

00:17:00,990 --> 00:17:08,579
and see how I can read it and as a data

00:17:03,690 --> 00:17:12,300
frame import it into my GIS as a layer

00:17:08,579 --> 00:17:16,530
and then I added it to this map to see

00:17:12,300 --> 00:17:20,180
where how much rainfall was recorded at

00:17:16,530 --> 00:17:23,310
those individual weather stations now

00:17:20,180 --> 00:17:26,010
rainfall is a continuous phenomena it's

00:17:23,310 --> 00:17:28,620
not as if only it only rained at the

00:17:26,010 --> 00:17:31,650
weather station not around it so given

00:17:28,620 --> 00:17:34,340
the rainfall at the weather stations how

00:17:31,650 --> 00:17:36,810
do you reduce the rainfall at

00:17:34,340 --> 00:17:39,030
intermediate points you interpolate that

00:17:36,810 --> 00:17:41,430
data so all of those tools are available

00:17:39,030 --> 00:17:44,580
at your disposal Here I am using the

00:17:41,430 --> 00:17:45,050
interpolate points tool from the RTI

00:17:44,580 --> 00:17:48,410
speech

00:17:45,050 --> 00:17:51,580
module two interpolate the rainfall

00:17:48,410 --> 00:17:51,580

YouTube URL: https://www.youtube.com/watch?v=vu78bemil3o


