Title: How import works in Python
Publication date: 2017-12-21
Playlist: PyCon India 2017
Description: 
	
Captions: 
	00:00:00,390 --> 00:00:05,819
I think once you write a normal hollow

00:00:03,540 --> 00:00:06,870
world program in Python after that the

00:00:05,819 --> 00:00:08,639
first thing that you really do it

00:00:06,870 --> 00:00:10,139
anything that you want to use you want

00:00:08,639 --> 00:00:12,420
to import a library right you just

00:00:10,139 --> 00:00:14,820
imported every into the Python right so

00:00:12,420 --> 00:00:16,490
this talk is going to really see how

00:00:14,820 --> 00:00:20,640
what happens when I really import a

00:00:16,490 --> 00:00:24,810
library into the Python little bit of

00:00:20,640 --> 00:00:27,300
history pre are 23.3 Python this whole

00:00:24,810 --> 00:00:30,390
import system was wrapped in a C library

00:00:27,300 --> 00:00:31,769
and was implemented in C so if you want

00:00:30,390 --> 00:00:33,300
to do anything you have to really go

00:00:31,769 --> 00:00:34,980
back and understand the C library and

00:00:33,300 --> 00:00:38,399
you know like go back try doing you know

00:00:34,980 --> 00:00:41,579
debug that piece of the C library but

00:00:38,399 --> 00:00:45,149
after three point three the default

00:00:41,579 --> 00:00:48,450
implementation of importantly base beam

00:00:45,149 --> 00:00:50,039
in Python and that is a that is a defect

00:00:48,450 --> 00:00:51,989
one means like after three point three

00:00:50,039 --> 00:00:53,309
is importantly which is written in

00:00:51,989 --> 00:00:55,649
Python is the one which is going to be

00:00:53,309 --> 00:00:59,039
used in Python for the import system so

00:00:55,649 --> 00:01:00,989
basically what exactly really happened

00:00:59,039 --> 00:01:02,969
is that the C library has been taken and

00:01:00,989 --> 00:01:05,250
then completely rewritten into Python

00:01:02,969 --> 00:01:08,700
and then implemented in 3.3 version

00:01:05,250 --> 00:01:10,290
afterwards so it has exposed lot of

00:01:08,700 --> 00:01:12,510
internals to you so that you can really

00:01:10,290 --> 00:01:14,670
go back and do your customization if I

00:01:12,510 --> 00:01:17,340
really want it so pre-ordered it was

00:01:14,670 --> 00:01:19,290
really difficult to do it conceptually

00:01:17,340 --> 00:01:22,049
nothing has really changed the overall

00:01:19,290 --> 00:01:25,259
orchestration how it was working in 2.5

00:01:22,049 --> 00:01:26,759
non words but in 3.3 the internals are

00:01:25,259 --> 00:01:30,200
only specific to the Python

00:01:26,759 --> 00:01:34,860
implementation okay

00:01:30,200 --> 00:01:36,390
so a bit of terminology here this is

00:01:34,860 --> 00:01:37,890
what I am really going to use third the

00:01:36,390 --> 00:01:42,090
talk so I just thought I will just have

00:01:37,890 --> 00:01:45,450
a quick terminology here finder is the

00:01:42,090 --> 00:01:47,430
one which finds a loader and loader is

00:01:45,450 --> 00:01:51,030
the one which loads a module into your

00:01:47,430 --> 00:01:54,509
namespace so meta Pathfinder is the one

00:01:51,030 --> 00:01:56,610
which you found on sis dot meta path it

00:01:54,509 --> 00:01:59,490
contains the finders or it can see a

00:01:56,610 --> 00:02:01,590
finder path entry finder is the one

00:01:59,490 --> 00:02:04,740
which is going to get you again loader

00:02:01,590 --> 00:02:06,920
but it searches in the SIS path import

00:02:04,740 --> 00:02:06,920
path

00:02:09,069 --> 00:02:20,769
okay before what I think there is a

00:02:17,340 --> 00:02:22,090
let's keep this let's start with the

00:02:20,769 --> 00:02:25,659
first step I think I don't know why it

00:02:22,090 --> 00:02:27,970
is showing different so this is what how

00:02:25,659 --> 00:02:30,459
many have you can import library or you

00:02:27,970 --> 00:02:31,659
can say from dotted bar import bar

00:02:30,459 --> 00:02:34,090
module that's what do you think you are

00:02:31,659 --> 00:02:36,700
going to do it right when you do this it

00:02:34,090 --> 00:02:39,010
is just converted into a function call

00:02:36,700 --> 00:02:42,099
downwards the function is dunder import

00:02:39,010 --> 00:02:43,450
which is part of the import library so

00:02:42,099 --> 00:02:45,730
what are the arguments that we really

00:02:43,450 --> 00:02:49,209
pass for the import that d'ner import

00:02:45,730 --> 00:02:51,220
function the name of the module that you

00:02:49,209 --> 00:02:53,349
are really importing it Global's and

00:02:51,220 --> 00:02:55,689
locals generally is going to be default

00:02:53,349 --> 00:02:57,250
is none and then the list of modules

00:02:55,689 --> 00:02:59,950
that we are really trying to import it

00:02:57,250 --> 00:03:02,409
from that particular this one and then

00:02:59,950 --> 00:03:03,879
the index of it particularly if I really

00:03:02,409 --> 00:03:05,379
know about relative import you are

00:03:03,879 --> 00:03:08,019
trying to say that import this

00:03:05,379 --> 00:03:09,519
particular one from two levels above so

00:03:08,019 --> 00:03:11,290
that is the index that really pass to

00:03:09,519 --> 00:03:13,060
this one so this will do all the magic

00:03:11,290 --> 00:03:15,729
can get you the model into your

00:03:13,060 --> 00:03:18,519
namespace so just try to understand this

00:03:15,729 --> 00:03:20,349
is a just a function call which is when

00:03:18,519 --> 00:03:29,400
you say import some library it is

00:03:20,349 --> 00:03:32,109
converted into a function call down so

00:03:29,400 --> 00:03:35,709
let us talk a little bit of the import

00:03:32,109 --> 00:03:37,359
system so this is the flow I think this

00:03:35,709 --> 00:03:38,769
is in the order this is the flow that

00:03:37,359 --> 00:03:41,709
what really happens when you try to

00:03:38,769 --> 00:03:43,930
import a module there is a module cash

00:03:41,709 --> 00:03:47,139
you have in a system module there is a

00:03:43,930 --> 00:03:49,659
module system modules is a dictionary

00:03:47,139 --> 00:03:51,489
where you store all your module cash so

00:03:49,659 --> 00:03:53,319
as soon as you try to import a library

00:03:51,489 --> 00:03:55,739
it first goes and checks whether this

00:03:53,319 --> 00:03:58,720
module is already is present in the

00:03:55,739 --> 00:04:00,519
module cache in the SIS modules if it is

00:03:58,720 --> 00:04:03,220
not there then it really goes and then

00:04:00,519 --> 00:04:04,930
asks for the meta pathfinders there are

00:04:03,220 --> 00:04:07,629
lists of finders in this meta path fight

00:04:04,930 --> 00:04:09,639
go back and ask each of the finder can

00:04:07,629 --> 00:04:11,590
you find me a loader for this particular

00:04:09,639 --> 00:04:14,290
name of the you know import library that

00:04:11,590 --> 00:04:16,570
module that I am trying to import it if

00:04:14,290 --> 00:04:18,370
it finds a module I think you really

00:04:16,570 --> 00:04:19,359
sorry if it finds a load or it will

00:04:18,370 --> 00:04:21,669
later on the loader and then you can

00:04:19,359 --> 00:04:22,480
load the module if it is not going to

00:04:21,669 --> 00:04:24,130
find

00:04:22,480 --> 00:04:25,390
and Load are there then it goes to the

00:04:24,130 --> 00:04:28,750
next step next step it is the

00:04:25,390 --> 00:04:30,880
Pathfinders so you have a cyst pot I

00:04:28,750 --> 00:04:32,500
think now when you want to really put

00:04:30,880 --> 00:04:34,060
generally if we install the default

00:04:32,500 --> 00:04:36,370
Python it comes all with the libraries

00:04:34,060 --> 00:04:37,810
but you have your one specific library

00:04:36,370 --> 00:04:39,790
what you really do it is go and put a

00:04:37,810 --> 00:04:42,730
Python path which is an external library

00:04:39,790 --> 00:04:44,380
this is what the system is going to have

00:04:42,730 --> 00:04:46,090
all of the default as well as the

00:04:44,380 --> 00:04:48,460
external paths that you really have

00:04:46,090 --> 00:04:50,830
given it so the pathfinder we'll go back

00:04:48,460 --> 00:04:52,870
and see find out can you find out a

00:04:50,830 --> 00:04:54,340
loader for this particular path for all

00:04:52,870 --> 00:04:55,540
the paths it's go back and look at it

00:04:54,340 --> 00:04:58,510
the name that you are really given it

00:04:55,540 --> 00:04:59,830
looks at all of the paths but even

00:04:58,510 --> 00:05:03,730
before going to the paths if there is

00:04:59,830 --> 00:05:05,590
another you know like like path importer

00:05:03,730 --> 00:05:06,940
cache I mean whatever that you have

00:05:05,590 --> 00:05:08,890
already looked at the direct race it is

00:05:06,940 --> 00:05:10,420
going to cache it and then you know it's

00:05:08,890 --> 00:05:12,370
it's it's if it is already available

00:05:10,420 --> 00:05:13,630
there it'll know what is the file finder

00:05:12,370 --> 00:05:15,880
that has to really go back and look at

00:05:13,630 --> 00:05:18,100
it it will not go back and rescan it if

00:05:15,880 --> 00:05:20,080
it is not that then go to path hooks

00:05:18,100 --> 00:05:21,910
PASOK's is a list of you know like again

00:05:20,080 --> 00:05:23,320
importers which will go back and do

00:05:21,910 --> 00:05:26,230
different things will go and a little

00:05:23,320 --> 00:05:27,970
bit get into the what is path hooks once

00:05:26,230 --> 00:05:29,560
you find all these things the first

00:05:27,970 --> 00:05:32,140
piece what are the first three steps is

00:05:29,560 --> 00:05:34,330
to find a loader once I have the loader

00:05:32,140 --> 00:05:36,160
object is available to you then you have

00:05:34,330 --> 00:05:39,100
to really load this load loaded into

00:05:36,160 --> 00:05:40,360
your name services module loader is the

00:05:39,100 --> 00:05:41,920
one and this is very high level

00:05:40,360 --> 00:05:44,260
abstraction of what loader is doing it

00:05:41,920 --> 00:05:46,480
it goes Mac you are now trying to some

00:05:44,260 --> 00:05:48,400
import module one dot module one right

00:05:46,480 --> 00:05:49,810
it goes back and looks where is this

00:05:48,400 --> 00:05:52,180
source code available for this

00:05:49,810 --> 00:05:54,370
particular file somewhere in there file

00:05:52,180 --> 00:05:56,650
system there is a dot py file right go

00:05:54,370 --> 00:05:58,960
back and take the code compile that into

00:05:56,650 --> 00:06:02,320
a bytecode and then once you have a

00:05:58,960 --> 00:06:04,090
bytecode create a module object and then

00:06:02,320 --> 00:06:06,880
once you create a module object execute

00:06:04,090 --> 00:06:09,220
the white code in this module dik-diks

00:06:06,880 --> 00:06:10,780
scope that gives you a module object and

00:06:09,220 --> 00:06:12,490
that is what is going to be available

00:06:10,780 --> 00:06:16,030
for you and then you can start working

00:06:12,490 --> 00:06:17,680
with that so I am not sure how much is

00:06:16,030 --> 00:06:20,020
really content but let us see even few

00:06:17,680 --> 00:06:22,000
more rain are like you know at the end

00:06:20,020 --> 00:06:23,500
of it I have a kind of go through all of

00:06:22,000 --> 00:06:25,660
the demo kind of things of which might

00:06:23,500 --> 00:06:27,370
give you a little bit clarity but this

00:06:25,660 --> 00:06:28,840
is what is the overall flow you go back

00:06:27,370 --> 00:06:30,940
and look at this you know like module

00:06:28,840 --> 00:06:32,140
cache if the module is available just

00:06:30,940 --> 00:06:34,450
written the module if it is not

00:06:32,140 --> 00:06:35,250
available go and ask the meta box finder

00:06:34,450 --> 00:06:37,170
give me the finder

00:06:35,250 --> 00:06:39,030
all the finders each one of the fund

00:06:37,170 --> 00:06:40,950
reveal see if we can find them find a

00:06:39,030 --> 00:06:43,170
loader for you if it's not happening go

00:06:40,950 --> 00:06:46,500
to the Pathfinders if that is if that is

00:06:43,170 --> 00:06:49,080
there then you create a module object

00:06:46,500 --> 00:06:51,470
using the loader so this is what is

00:06:49,080 --> 00:06:51,470
really happening

00:06:51,920 --> 00:06:56,340
actually there is this has gone a little

00:06:54,330 --> 00:07:00,000
and I don't know why here and here so

00:06:56,340 --> 00:07:03,120
module cache so all of the modules are

00:07:00,000 --> 00:07:05,460
cached ins sis dot modules so just a

00:07:03,120 --> 00:07:08,490
dictionary it is a full name if we

00:07:05,460 --> 00:07:10,730
really importing a package dot you know

00:07:08,490 --> 00:07:14,190
if you are importing a package dot ello

00:07:10,730 --> 00:07:16,650
module or a package dot sub package dot

00:07:14,190 --> 00:07:19,140
module the whole full qualified path is

00:07:16,650 --> 00:07:20,580
going to be there here is a dictionary

00:07:19,140 --> 00:07:25,200
and then the module object is going to

00:07:20,580 --> 00:07:27,180
be there ok so again there is only one

00:07:25,200 --> 00:07:30,630
object in Python which is called as

00:07:27,180 --> 00:07:32,220
module we have a little bit higher level

00:07:30,630 --> 00:07:34,290
of that is a packages right we have

00:07:32,220 --> 00:07:36,990
packages right the package is also a

00:07:34,290 --> 00:07:38,669
type of module ok so there is only a

00:07:36,990 --> 00:07:40,650
subtle difference between a module and

00:07:38,669 --> 00:07:41,940
at the package but all of them belongs

00:07:40,650 --> 00:07:50,490
to them all of them are of module

00:07:41,940 --> 00:07:52,110
objects so one difference between the

00:07:50,490 --> 00:07:55,169
earlier version and then the new version

00:07:52,110 --> 00:07:57,000
is the lock is at the module level

00:07:55,169 --> 00:07:58,890
actual earlier it used to be when you

00:07:57,000 --> 00:08:00,300
really try to import a module in Python

00:07:58,890 --> 00:08:03,260
previous it was at the whole process

00:08:00,300 --> 00:08:05,130
level but now in in the new

00:08:03,260 --> 00:08:07,260
three-point-three implementation onwards

00:08:05,130 --> 00:08:09,600
it's at each of the module level so if

00:08:07,260 --> 00:08:11,220
you are importing multiple modules the

00:08:09,600 --> 00:08:14,610
lock is at each of the module level and

00:08:11,220 --> 00:08:16,410
at the process level I think it may not

00:08:14,610 --> 00:08:18,960
really you know make a difference for

00:08:16,410 --> 00:08:20,640
you're really running a single process

00:08:18,960 --> 00:08:21,990
which is another multi-threaded if you

00:08:20,640 --> 00:08:23,729
are real doing multi greater than int

00:08:21,990 --> 00:08:25,169
really have an impact otherwise

00:08:23,729 --> 00:08:27,620
generally it's not going to have any

00:08:25,169 --> 00:08:27,620
impact

00:08:29,750 --> 00:08:35,300
okay so we talked about six dot modules

00:08:34,280 --> 00:08:38,120
there is a module cache which is a

00:08:35,300 --> 00:08:39,979
dictionary so next one is finders so

00:08:38,120 --> 00:08:41,930
there are even actually this list of

00:08:39,979 --> 00:08:43,370
finders is keep increasing as it really

00:08:41,930 --> 00:08:46,340
going through multiple versions of

00:08:43,370 --> 00:08:47,750
Python there are primarily like three

00:08:46,340 --> 00:08:49,400
things are built in modules finder

00:08:47,750 --> 00:08:52,550
frozen module spreaders and default path

00:08:49,400 --> 00:08:54,620
finder so simply if you look at the code

00:08:52,550 --> 00:08:57,830
here it goes to each of the finder

00:08:54,620 --> 00:08:59,960
system meta paths is a list of finders

00:08:57,830 --> 00:09:02,780
okay it goes to each of the finder and

00:08:59,960 --> 00:09:05,390
as the fine just can you find a module

00:09:02,780 --> 00:09:07,310
for me and if the if sorry can you find

00:09:05,390 --> 00:09:09,380
out this module if it finds it it

00:09:07,310 --> 00:09:11,330
already loaded once if the loader is

00:09:09,380 --> 00:09:12,830
there later unload module load module is

00:09:11,330 --> 00:09:14,540
nothing but whatever that I explained is

00:09:12,830 --> 00:09:15,920
that okay now going to the source

00:09:14,540 --> 00:09:17,600
compiling to the bytecode and then

00:09:15,920 --> 00:09:19,280
giving everything object back that

00:09:17,600 --> 00:09:22,100
object is returned back if you don't

00:09:19,280 --> 00:09:23,660
find anything it gives a import error so

00:09:22,100 --> 00:09:25,340
we need write to import something which

00:09:23,660 --> 00:09:28,220
is not there anywhere either in the you

00:09:25,340 --> 00:09:30,740
know like you were not default libraries

00:09:28,220 --> 00:09:32,060
are in the custom custom things then you

00:09:30,740 --> 00:09:34,339
will get an import error saying that

00:09:32,060 --> 00:09:37,880
this module is not fun right so these

00:09:34,339 --> 00:09:39,470
are the three you know like these are

00:09:37,880 --> 00:09:42,320
actually classes there are there in the

00:09:39,470 --> 00:09:43,670
list of in the SIS meta paths it goes it

00:09:42,320 --> 00:09:45,170
goes and I iterates through each one of

00:09:43,670 --> 00:09:51,400
them to find a loader that's the first

00:09:45,170 --> 00:09:54,230
step okay so there is a concept of

00:09:51,400 --> 00:09:59,860
namespace packages anybody's event what

00:09:54,230 --> 00:10:01,820
is the namespace package so in Python 3

00:09:59,860 --> 00:10:03,440
generally what do you really do when you

00:10:01,820 --> 00:10:05,690
create a package you create a directory

00:10:03,440 --> 00:10:06,920
and you put your module there right when

00:10:05,690 --> 00:10:08,030
you put a module the first thing that

00:10:06,920 --> 00:10:10,580
you realize what is the first thing that

00:10:08,030 --> 00:10:12,260
you really write it done per unit dot P

00:10:10,580 --> 00:10:14,000
way right dunder init dot py if it is

00:10:12,260 --> 00:10:17,390
there in the directory it means that is

00:10:14,000 --> 00:10:18,770
a package but in Python 3 you do not

00:10:17,390 --> 00:10:21,320
have to have a dunder init file

00:10:18,770 --> 00:10:24,260
even then Python recognizes that is a

00:10:21,320 --> 00:10:27,710
package but that a little difference is

00:10:24,260 --> 00:10:29,660
that this same directory can be present

00:10:27,710 --> 00:10:31,940
in multiple places in our whole

00:10:29,660 --> 00:10:34,760
operating system in different folders

00:10:31,940 --> 00:10:36,140
ok but python is what is really trying

00:10:34,760 --> 00:10:38,510
to do is in the name stress if it is a

00:10:36,140 --> 00:10:40,670
namespace package it is going to collect

00:10:38,510 --> 00:10:41,839
all this from different for example you

00:10:40,670 --> 00:10:42,960
have one directly where you have a

00:10:41,839 --> 00:10:44,760
module one

00:10:42,960 --> 00:10:47,280
the same created a same diet in another

00:10:44,760 --> 00:10:48,570
place but you have a module to it really

00:10:47,280 --> 00:10:50,790
collates both of them into a single

00:10:48,570 --> 00:10:52,410
package so that is what is the namespace

00:10:50,790 --> 00:10:59,190
package which is new in Python 3 but

00:10:52,410 --> 00:11:03,120
which is not there earlier earlier okay

00:10:59,190 --> 00:11:04,830
so once sis meta path the finder season

00:11:03,120 --> 00:11:10,200
you do not get anything then get into

00:11:04,830 --> 00:11:12,990
the path hooks so basically again this

00:11:10,200 --> 00:11:14,250
is path importer cash is the it is the I

00:11:12,990 --> 00:11:15,870
know like which you have already looked

00:11:14,250 --> 00:11:17,940
at a directory it is going to cash there

00:11:15,870 --> 00:11:20,370
and then first look at it if that is not

00:11:17,940 --> 00:11:23,340
already past it then go to the bath

00:11:20,370 --> 00:11:24,600
looks so I am not sure whether you can

00:11:23,340 --> 00:11:26,400
really look at there only two of them

00:11:24,600 --> 00:11:28,830
are there one is a chip importer rather

00:11:26,400 --> 00:11:32,250
one is a file finder these are the two

00:11:28,830 --> 00:11:34,590
things even in Python 3 you can even

00:11:32,250 --> 00:11:36,630
import a package which is completely

00:11:34,590 --> 00:11:38,640
wrapped in a zip file if you were just a

00:11:36,630 --> 00:11:41,850
zip file you can go back and input that

00:11:38,640 --> 00:11:43,080
as a package so file finder is if you

00:11:41,850 --> 00:11:45,120
have really you know like if we are

00:11:43,080 --> 00:11:47,550
asking for a particular module or a

00:11:45,120 --> 00:11:50,550
package to reloaded it it really goes

00:11:47,550 --> 00:11:53,250
through all of the all of the elements

00:11:50,550 --> 00:11:54,870
in the sister path sister path contains

00:11:53,250 --> 00:11:56,730
all of the paths that you want to look

00:11:54,870 --> 00:11:59,640
at it it goes through each one of them

00:11:56,730 --> 00:12:02,640
and then if you find a module it returns

00:11:59,640 --> 00:12:04,050
back this is the order in which really

00:12:02,640 --> 00:12:08,600
it goes first it looks for the JIP

00:12:04,050 --> 00:12:08,600
import then it goes to the file finder

00:12:14,100 --> 00:12:20,850
so maybe again just take a step back

00:12:18,900 --> 00:12:24,390
so we started we try to import a module

00:12:20,850 --> 00:12:33,620
you are looking at the module cash if it

00:12:24,390 --> 00:12:33,620
is not there you are looking at sorry

00:12:37,990 --> 00:12:43,730
so if it is not there in the module

00:12:41,210 --> 00:12:46,130
cache it will go to go back to this meta

00:12:43,730 --> 00:12:48,020
path to find to ask each of the finder

00:12:46,130 --> 00:12:50,240
whether you can find a module for me it

00:12:48,020 --> 00:12:52,430
is not there it comes to path hooks and

00:12:50,240 --> 00:12:54,410
if it is not if it is not there it will

00:12:52,430 --> 00:12:55,910
give an error so once it finds a loader

00:12:54,410 --> 00:12:57,350
the next thing is to really create a

00:12:55,910 --> 00:12:59,870
module object that's what is really

00:12:57,350 --> 00:13:01,640
happening so module object is take this

00:12:59,870 --> 00:13:04,100
first code compile it compared to a

00:13:01,640 --> 00:13:05,390
bytecode create a module object and then

00:13:04,100 --> 00:13:09,290
execute in that scope of that module

00:13:05,390 --> 00:13:10,850
object you that object back to it so you

00:13:09,290 --> 00:13:12,410
have seen there is a pyc files in your

00:13:10,850 --> 00:13:14,540
directory when you really go back and

00:13:12,410 --> 00:13:16,790
you know when you run some of this code

00:13:14,540 --> 00:13:20,300
you get dot PVAc files you know what are

00:13:16,790 --> 00:13:21,650
these PVC files that is a bytecode that

00:13:20,300 --> 00:13:23,810
is what whatever that we really compiled

00:13:21,650 --> 00:13:24,770
now which is there which is I put into

00:13:23,810 --> 00:13:26,810
the bytecode into the particular

00:13:24,770 --> 00:13:28,730
directory actually before it really

00:13:26,810 --> 00:13:30,590
loaders go and create this file

00:13:28,730 --> 00:13:32,210
it goes back looks into the directory

00:13:30,590 --> 00:13:33,890
where this pervasive all files are

00:13:32,210 --> 00:13:35,300
already available if they are not

00:13:33,890 --> 00:13:36,920
available there then only it will go

00:13:35,300 --> 00:13:39,560
back and do it not only not available

00:13:36,920 --> 00:13:41,270
but even it's changed since lots it's

00:13:39,560 --> 00:13:43,550
been loaded if it changed Larsson's

00:13:41,270 --> 00:13:46,330
loaded again it regenerates the exe

00:13:43,550 --> 00:13:48,560
files there is one difference in 3/3

00:13:46,330 --> 00:13:50,000
earlier it used to have all the PSD

00:13:48,560 --> 00:13:53,000
files generated in the same directory as

00:13:50,000 --> 00:13:54,590
such but now there is a dunder PI cache

00:13:53,000 --> 00:13:57,260
directory will be created inside in

00:13:54,590 --> 00:13:58,850
three I think it is a neat one where you

00:13:57,260 --> 00:14:00,950
have multiple even if you use the same

00:13:58,850 --> 00:14:02,540
code work you know I like worked with

00:14:00,950 --> 00:14:04,340
different live different versions of the

00:14:02,540 --> 00:14:06,290
library or different versions of the

00:14:04,340 --> 00:14:07,880
Python it has all of the libraries in

00:14:06,290 --> 00:14:09,320
that PI cache directory the under

00:14:07,880 --> 00:14:11,240
package directly so that they are

00:14:09,320 --> 00:14:20,150
available they are not I know like over

00:14:11,240 --> 00:14:23,320
return period there are a lot of changes

00:14:20,150 --> 00:14:25,760
is happening actually it took know like

00:14:23,320 --> 00:14:27,610
where Canon is the one who is really a

00:14:25,760 --> 00:14:31,370
cold developer on this you know like

00:14:27,610 --> 00:14:32,900
import library and I think there is

00:14:31,370 --> 00:14:34,700
still changing they are really improving

00:14:32,900 --> 00:14:36,860
this word now they have put into 3.3 but

00:14:34,700 --> 00:14:38,960
they are improving it so they are some

00:14:36,860 --> 00:14:40,550
of them deprecated like a fine module

00:14:38,960 --> 00:14:42,950
and you know like load model the some of

00:14:40,550 --> 00:14:44,030
the methods were there they deprecated

00:14:42,950 --> 00:14:46,550
that then they have created a new

00:14:44,030 --> 00:14:49,070
concept called module spec module spec

00:14:46,550 --> 00:14:51,110
is a specification of the whole module

00:14:49,070 --> 00:14:51,560
I mean look whatever that module where

00:14:51,110 --> 00:14:53,120
it really

00:14:51,560 --> 00:14:54,140
besides I know how to create the loader

00:14:53,120 --> 00:14:55,279
where you really find the lot of

00:14:54,140 --> 00:14:57,050
everything is going to be wrapped up

00:14:55,279 --> 00:14:58,880
until the module spec this is actually

00:14:57,050 --> 00:15:00,529
changing in three point four onwards I

00:14:58,880 --> 00:15:03,020
mean some of the methods that you might

00:15:00,529 --> 00:15:05,630
see find module is deprecated and then

00:15:03,020 --> 00:15:12,380
say they say find spec now instead of

00:15:05,630 --> 00:15:14,589
find module okay so if you I mean this

00:15:12,380 --> 00:15:16,580
is again a simple Python code

00:15:14,589 --> 00:15:18,320
replication of how the module is getting

00:15:16,580 --> 00:15:19,880
created if you look at if I give a name

00:15:18,320 --> 00:15:23,270
of the module is for this particular

00:15:19,880 --> 00:15:25,370
function it goes and finds you know what

00:15:23,270 --> 00:15:27,560
do you know whatever that you give it it

00:15:25,370 --> 00:15:29,779
appends dot P Y to find the file name it

00:15:27,560 --> 00:15:31,640
it opens that file name read the whole

00:15:29,779 --> 00:15:35,210
core and then once you have the whole

00:15:31,640 --> 00:15:37,790
code it creates a module type that is a

00:15:35,210 --> 00:15:39,980
module object and then once you have the

00:15:37,790 --> 00:15:41,630
module object you compile into the byte

00:15:39,980 --> 00:15:43,450
code the code equals to compile these

00:15:41,630 --> 00:15:45,410
are all the default Python you know like

00:15:43,450 --> 00:15:47,870
functions are available to compile

00:15:45,410 --> 00:15:50,000
source code and source path and in the

00:15:47,870 --> 00:15:52,100
execute mode and then once you have the

00:15:50,000 --> 00:15:55,520
byte code you execute that byte code in

00:15:52,100 --> 00:15:57,350
the scope of that module module

00:15:55,520 --> 00:15:58,760
dictionary and then whatever that you

00:15:57,350 --> 00:16:04,420
get an object that is what is returned

00:15:58,760 --> 00:16:04,420
back to the user as a lab as a module

00:16:05,589 --> 00:16:14,030
okay so this is what is changed in 3.6

00:16:10,700 --> 00:16:16,070
so I mean the the whole code whatever is

00:16:14,030 --> 00:16:18,380
written there I was obstructed in two

00:16:16,070 --> 00:16:20,540
steps here so instead of finding a load

00:16:18,380 --> 00:16:22,610
or what it's finding a load or what it

00:16:20,540 --> 00:16:24,110
really does it it's fine a module specs

00:16:22,610 --> 00:16:26,480
to start with once you have a module

00:16:24,110 --> 00:16:28,790
spec create a module object from the

00:16:26,480 --> 00:16:30,890
module spec and then add the module

00:16:28,790 --> 00:16:33,140
objective system modules and then

00:16:30,890 --> 00:16:35,930
execute the module I written the module

00:16:33,140 --> 00:16:38,030
object so why should we really cash is

00:16:35,930 --> 00:16:39,320
cash is required so that you don't have

00:16:38,030 --> 00:16:42,320
to reload everything but there is

00:16:39,320 --> 00:16:45,230
another reason for having system modules

00:16:42,320 --> 00:16:49,370
cashing in this is modules particular is

00:16:45,230 --> 00:16:51,140
solve a problem of circular inputs so I

00:16:49,370 --> 00:16:52,310
mean what happens is I think you can go

00:16:51,140 --> 00:16:54,529
back and write in such a way that I

00:16:52,310 --> 00:16:56,360
import a package this package inputs

00:16:54,529 --> 00:16:57,830
that package and then that package again

00:16:56,360 --> 00:16:59,510
starts importing something from the

00:16:57,830 --> 00:17:02,450
other package so to create a circular

00:16:59,510 --> 00:17:04,220
inputs so as soon as you really even

00:17:02,450 --> 00:17:05,660
before you really create the module you

00:17:04,220 --> 00:17:08,000
are trying to go and then put into

00:17:05,660 --> 00:17:10,430
sister modules so that to avoid the

00:17:08,000 --> 00:17:12,020
problems of circular input as soon as it

00:17:10,430 --> 00:17:13,610
is there it will stop I mean if it is

00:17:12,020 --> 00:17:14,750
already there in the system or else it

00:17:13,610 --> 00:17:16,730
will really pick it from there it will

00:17:14,750 --> 00:17:23,120
not really go or do remaining pieces of

00:17:16,730 --> 00:17:26,210
it so but all these things is okay but

00:17:23,120 --> 00:17:27,590
what is and as a developer how is it

00:17:26,210 --> 00:17:29,990
going to help me at what I can do or

00:17:27,590 --> 00:17:31,640
what I cannot do so what I cannot do is

00:17:29,990 --> 00:17:33,560
you cannot start if I them you cannot

00:17:31,640 --> 00:17:34,460
modify the startup process whatever that

00:17:33,560 --> 00:17:36,590
is really happening

00:17:34,460 --> 00:17:38,540
it happens as it is and then you cannot

00:17:36,590 --> 00:17:40,190
modify the main scope main scope is

00:17:38,540 --> 00:17:42,350
going to be intact and you cannot even

00:17:40,190 --> 00:17:44,360
change any of the language features it's

00:17:42,350 --> 00:17:46,250
only you can do customization of some of

00:17:44,360 --> 00:17:49,430
the import things but not the language

00:17:46,250 --> 00:17:51,830
features are such let us look at what we

00:17:49,430 --> 00:17:53,540
can do let's say you have a you know I

00:17:51,830 --> 00:17:55,310
mean it may may not be the need but you

00:17:53,540 --> 00:17:59,570
have a need to really go back and say in

00:17:55,310 --> 00:18:00,740
your organization to import or log what

00:17:59,570 --> 00:18:02,690
are the inputs are happening in your

00:18:00,740 --> 00:18:04,790
organization you can go back and put a

00:18:02,690 --> 00:18:06,680
custom you know like hook there and then

00:18:04,790 --> 00:18:08,240
it will try to log each time you go and

00:18:06,680 --> 00:18:09,860
run the import it will go and log

00:18:08,240 --> 00:18:11,630
somewhere saying that this is what is

00:18:09,860 --> 00:18:14,150
really happening this is a know like

00:18:11,630 --> 00:18:16,160
model that is being imported if you have

00:18:14,150 --> 00:18:18,440
need to really import something from

00:18:16,160 --> 00:18:20,060
remote host not from your host but

00:18:18,440 --> 00:18:22,580
something is available your remote host

00:18:20,060 --> 00:18:24,590
you can go back and do it so virtual

00:18:22,580 --> 00:18:26,120
import paths it's not really physically

00:18:24,590 --> 00:18:28,310
present virtual import paths you can

00:18:26,120 --> 00:18:32,240
really go and hook them up fixed

00:18:28,310 --> 00:18:35,150
circular imports and lazy imports so

00:18:32,240 --> 00:18:38,090
maybe if you can go on know like there

00:18:35,150 --> 00:18:39,980
is one talk by David Beasley very really

00:18:38,090 --> 00:18:42,320
it will be really implements how you can

00:18:39,980 --> 00:18:44,450
really use the lazy imports generator is

00:18:42,320 --> 00:18:45,740
a lazy ni evaluation right I think it's

00:18:44,450 --> 00:18:47,000
not going to evaluate till you really

00:18:45,740 --> 00:18:49,670
call the next function on top of it

00:18:47,000 --> 00:18:51,170
similarly you can go back and import it

00:18:49,670 --> 00:18:52,340
when you really import it nothing is

00:18:51,170 --> 00:18:54,740
really happening at that point of time

00:18:52,340 --> 00:18:56,360
but really go and call that particular

00:18:54,740 --> 00:18:57,920
module somewhere then you really import

00:18:56,360 --> 00:19:00,620
that module at the point of time it has

00:18:57,920 --> 00:19:02,330
both pros and cons of it but still you

00:19:00,620 --> 00:19:04,070
can go and input the lazy inputs you can

00:19:02,330 --> 00:19:05,200
go any will implement the lazy inputs

00:19:04,070 --> 00:19:09,500
here

00:19:05,200 --> 00:19:10,850
post import hooks I mean once the import

00:19:09,500 --> 00:19:12,980
is happen if you want to do something

00:19:10,850 --> 00:19:14,300
again go back and do that custom module

00:19:12,980 --> 00:19:17,470
types you can create your own custom

00:19:14,300 --> 00:19:17,470
module types if required

00:19:18,490 --> 00:19:23,410
so there are some references here how we

00:19:21,410 --> 00:19:25,340
import works that enough there is a

00:19:23,410 --> 00:19:27,290
actually you know like it's a huge

00:19:25,340 --> 00:19:28,850
flowchart red cannon takes through each

00:19:27,290 --> 00:19:30,710
one of them starting from each

00:19:28,850 --> 00:19:33,200
step-by-step what exactly will really

00:19:30,710 --> 00:19:36,620
happen and David Beasley's modules and

00:19:33,200 --> 00:19:38,360
and packages live and let die so I think

00:19:36,620 --> 00:19:40,100
that's a very good but it's like three

00:19:38,360 --> 00:19:42,200
hour long video but if you have patience

00:19:40,100 --> 00:19:43,820
you can go and watch it but you have he

00:19:42,200 --> 00:19:45,950
has really explains clearly and modules

00:19:43,820 --> 00:19:47,690
packages and all these different things

00:19:45,950 --> 00:19:49,370
there and they're getting the most out

00:19:47,690 --> 00:19:51,500
of Python imports is another talk I

00:19:49,370 --> 00:19:52,940
think which is you know how to do a

00:19:51,500 --> 00:19:56,059
little bit of customization here and

00:19:52,940 --> 00:20:07,820
there so I really have any questions

00:19:56,059 --> 00:20:09,890
anything else questions please sir I

00:20:07,820 --> 00:20:14,750
have a file and I have written some code

00:20:09,890 --> 00:20:17,360
then I use import is actually and then

00:20:14,750 --> 00:20:20,120
the cache will be like full of that file

00:20:17,360 --> 00:20:22,670
what if I change something in my main

00:20:20,120 --> 00:20:25,040
file and Irene put it then it is going

00:20:22,670 --> 00:20:28,970
to compile the complete thing or the

00:20:25,040 --> 00:20:31,340
added pad okay actually if we look at it

00:20:28,970 --> 00:20:33,950
once you import once in your namespace

00:20:31,340 --> 00:20:36,290
it's already cached in the system our

00:20:33,950 --> 00:20:38,660
duals even if you modify the file

00:20:36,290 --> 00:20:40,010
underlying file if you tried any number

00:20:38,660 --> 00:20:42,350
of times it always bring from

00:20:40,010 --> 00:20:44,120
scissor-like module cache it will it

00:20:42,350 --> 00:20:46,429
will never take the new one set as into

00:20:44,120 --> 00:20:49,520
consideration at all the general way is

00:20:46,429 --> 00:20:51,380
people go back terminate the process you

00:20:49,520 --> 00:20:53,450
start the process again re-import it ok

00:20:51,380 --> 00:20:56,240
that's one way of doing it if you want

00:20:53,450 --> 00:20:58,910
to reload the same module back again

00:20:56,240 --> 00:21:00,770
with the changes you can still do it but

00:20:58,910 --> 00:21:02,150
there are lot of you know things that

00:21:00,770 --> 00:21:04,640
you may have to really remember before

00:21:02,150 --> 00:21:06,200
doing it for example if it is a class

00:21:04,640 --> 00:21:07,970
you have created an object of the class

00:21:06,200 --> 00:21:09,440
somewhere and then you change the

00:21:07,970 --> 00:21:10,970
definition of the class the objects are

00:21:09,440 --> 00:21:12,440
going to be there as it is the instances

00:21:10,970 --> 00:21:14,120
of the object are going to be there so

00:21:12,440 --> 00:21:15,890
it can create some zombies kind of thing

00:21:14,120 --> 00:21:17,420
inside your whole system so it's you

00:21:15,890 --> 00:21:20,210
need to be careful when you re important

00:21:17,420 --> 00:21:21,770
it but by default once the model is

00:21:20,210 --> 00:21:23,390
imported you cannot you cannot remember

00:21:21,770 --> 00:21:25,190
the import will not again dream poor

00:21:23,390 --> 00:21:27,050
thing it will always go back and look at

00:21:25,190 --> 00:21:28,700
this is the cache module if it is there

00:21:27,050 --> 00:21:30,260
it will bring from there it will not go

00:21:28,700 --> 00:21:32,679
back to again to the source recompile

00:21:30,260 --> 00:21:35,749
and do all the stuff

00:21:32,679 --> 00:21:37,909
now PVC has also not pyc file is deleted

00:21:35,749 --> 00:21:42,610
healed we generate the PVC fell but it

00:21:37,909 --> 00:21:45,830
is not reload the module next question

00:21:42,610 --> 00:21:48,200
so you mentioned that you can there's

00:21:45,830 --> 00:21:51,529
two methods there one is fine modular

00:21:48,200 --> 00:21:52,879
and one is load module so and in the

00:21:51,529 --> 00:21:55,490
load module layered raised an import

00:21:52,879 --> 00:21:57,049
error but say you actually want to let

00:21:55,490 --> 00:21:58,700
it load so what do you do

00:21:57,049 --> 00:22:00,470
like that's our I think when I say load

00:21:58,700 --> 00:22:02,299
module there are four or five steps now

00:22:00,470 --> 00:22:03,549
what you do is you go back find out the

00:22:02,299 --> 00:22:05,740
source where is the file is available

00:22:03,549 --> 00:22:08,090
take the source read the whole source

00:22:05,740 --> 00:22:10,429
compiled into a byte object create a

00:22:08,090 --> 00:22:11,929
module type and execute that module type

00:22:10,429 --> 00:22:13,129
and create will create a module object

00:22:11,929 --> 00:22:14,779
at the end of there are loaded will

00:22:13,129 --> 00:22:16,820
create a module object and written that

00:22:14,779 --> 00:22:18,200
module object back the loader well if

00:22:16,820 --> 00:22:20,919
you have to really implement of a lot of

00:22:18,200 --> 00:22:20,919

YouTube URL: https://www.youtube.com/watch?v=-mL5WBMseD4


