Title: Building single page javascript apps with Django, Graphql, Relay and React!
Publication date: 2017-12-21
Playlist: PyCon India 2017
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:04,560
I'm from Houston Texas I've been a

00:00:02,070 --> 00:00:09,660
freelance IT consultant for the last few

00:00:04,560 --> 00:00:12,210
years I am the author of reang go in the

00:00:09,660 --> 00:00:15,330
next slide it shows like it started

00:00:12,210 --> 00:00:17,369
about a year ago November 2016 I have

00:00:15,330 --> 00:00:19,800
consulted for one company in Silicon

00:00:17,369 --> 00:00:22,199
Valley they reached out to me about it

00:00:19,800 --> 00:00:24,029
so it was one of those like write an

00:00:22,199 --> 00:00:27,660
open-source thing and you know you might

00:00:24,029 --> 00:00:30,300
get hired so without further ado let's

00:00:27,660 --> 00:00:33,210
get started this presentation is gonna

00:00:30,300 --> 00:00:36,930
cover you know what is a single page app

00:00:33,210 --> 00:00:37,500
why Django just a real quick intro then

00:00:36,930 --> 00:00:39,660
we're going to talk about the

00:00:37,500 --> 00:00:41,879
technologies used because there's a lot

00:00:39,660 --> 00:00:44,789
of them webpack reacts really like graph

00:00:41,879 --> 00:00:46,230
QL what do they all do right and then

00:00:44,789 --> 00:00:49,649
we'll be looking at some code examples

00:00:46,230 --> 00:00:52,800
right because we the kind of the goal of

00:00:49,649 --> 00:00:55,230
reinga was to like reimagine the Django

00:00:52,800 --> 00:00:55,890
pulls app tutorial I don't know have you

00:00:55,230 --> 00:00:57,780
guys ever heard of that

00:00:55,890 --> 00:01:00,510
have you guys ever been to the Django

00:00:57,780 --> 00:01:06,360
Paul's app cool and then just some other

00:01:00,510 --> 00:01:08,369
notes so obviously why we'd want to use

00:01:06,360 --> 00:01:11,220
Django great bracken frustrating to

00:01:08,369 --> 00:01:12,689
build complex front-ends um we want a

00:01:11,220 --> 00:01:14,220
modern front end it feels like a native

00:01:12,689 --> 00:01:16,409
application right even if it's on the

00:01:14,220 --> 00:01:18,990
web and the same starting point for

00:01:16,409 --> 00:01:24,180
other projects that's sort of like why I

00:01:18,990 --> 00:01:24,920
created a Ringo yeah some more I kind of

00:01:24,180 --> 00:01:27,930
told you that already

00:01:24,920 --> 00:01:29,780
so not just a single page application

00:01:27,930 --> 00:01:32,729
but it can also be a progressive web app

00:01:29,780 --> 00:01:36,750
which means it should also work offline

00:01:32,729 --> 00:01:37,770
and on flaky Internet connections some

00:01:36,750 --> 00:01:39,689
interesting things I've seen with that

00:01:37,770 --> 00:01:41,220
like recently like even is like if your

00:01:39,689 --> 00:01:43,530
users are offline you can keep Google

00:01:41,220 --> 00:01:44,759
Analytics running and still track them

00:01:43,530 --> 00:01:46,200
even while they're offline what they're

00:01:44,759 --> 00:01:48,479
doing so that some cool stuff also along

00:01:46,200 --> 00:01:51,180
with like all of your assets are cached

00:01:48,479 --> 00:01:52,140
offline with a serviceworker but we

00:01:51,180 --> 00:01:58,619
don't go into that we're not gonna go

00:01:52,140 --> 00:02:00,750
into that too much yeah so why

00:01:58,619 --> 00:02:03,090
boilerplate you know once again we're

00:02:00,750 --> 00:02:05,070
kind of reiterating this easy starting

00:02:03,090 --> 00:02:08,489
point automated testing and deployment

00:02:05,070 --> 00:02:10,140
like so we want to have us like really

00:02:08,489 --> 00:02:12,010
good examples for how to test the app

00:02:10,140 --> 00:02:14,019
also how to deploy it so it's not

00:02:12,010 --> 00:02:17,370
just you know just the app it's like

00:02:14,019 --> 00:02:19,659
it's the whole stack right you know

00:02:17,370 --> 00:02:22,930
minimum working examples with all the

00:02:19,659 --> 00:02:25,329
dependencies right and like so rain goes

00:02:22,930 --> 00:02:26,530
sorted there to always like make sure

00:02:25,329 --> 00:02:30,250
you can update everything before you

00:02:26,530 --> 00:02:32,829
even touch your own code and project

00:02:30,250 --> 00:02:35,709
consistency so what is a single page

00:02:32,829 --> 00:02:38,440
application code is retrieved with a

00:02:35,709 --> 00:02:41,980
single page load the page doesn't reload

00:02:38,440 --> 00:02:43,030
at any point data and resources can be

00:02:41,980 --> 00:02:45,480
loaded and added to the page as

00:02:43,030 --> 00:02:45,480
necessary

00:02:45,780 --> 00:02:50,409
so as you'll see like you know the first

00:02:49,120 --> 00:02:53,200
thing is we hit the polls app and it

00:02:50,409 --> 00:02:54,970
took us the login screen right and so we

00:02:53,200 --> 00:02:57,840
just logged in and so we can look at all

00:02:54,970 --> 00:03:00,400
these real quick and if you notice

00:02:57,840 --> 00:03:02,590
autocomplete that's actually post Chris

00:03:00,400 --> 00:03:07,629
and Django you don't need anything else

00:03:02,590 --> 00:03:09,849
to do like autocomplete so then we can

00:03:07,629 --> 00:03:11,709
also open up like the vote the results I

00:03:09,849 --> 00:03:13,840
wanted to play around with the charts

00:03:11,709 --> 00:03:15,280
react in case you ever want to do like

00:03:13,840 --> 00:03:17,709
line charts or anything with financial

00:03:15,280 --> 00:03:21,129
data maybe and then we can go and create

00:03:17,709 --> 00:03:23,709
a new poll you can add choices we're

00:03:21,129 --> 00:03:28,359
gonna say like what's the best web

00:03:23,709 --> 00:03:31,120
Python web framework and then you know

00:03:28,359 --> 00:03:31,480
you can keep adding choices blah blah

00:03:31,120 --> 00:03:37,180
blah

00:03:31,480 --> 00:03:38,500
Django flask we can submit it and it'll

00:03:37,180 --> 00:03:40,209
take you right back and so it's like

00:03:38,500 --> 00:03:42,609
real smooth and quick you know there's

00:03:40,209 --> 00:03:46,540
not any loading we vote and it takes you

00:03:42,609 --> 00:03:49,510
over there boom all right so to the

00:03:46,540 --> 00:03:51,280
stack right so the backend Python 3

00:03:49,510 --> 00:03:52,120
right we don't deal with Python 2

00:03:51,280 --> 00:03:54,760
anymore

00:03:52,120 --> 00:03:59,280
Postgres because like who doesn't look

00:03:54,760 --> 00:04:02,829
folks Chris Django graphene is our

00:03:59,280 --> 00:04:06,629
Python graph QL implementation

00:04:02,829 --> 00:04:09,940
Jenko graphene provides you know

00:04:06,629 --> 00:04:12,069
automatic it automatically makes you

00:04:09,940 --> 00:04:14,379
graph QL schema based off your existing

00:04:12,069 --> 00:04:15,909
Django models and they have a package

00:04:14,379 --> 00:04:18,099
for flask as well if you have if you

00:04:15,909 --> 00:04:21,969
just want to use flask for your API

00:04:18,099 --> 00:04:24,190
endpoint we also use a package called a

00:04:21,969 --> 00:04:25,570
web pack loader and what that does is it

00:04:24,190 --> 00:04:28,110
sort of takes our

00:04:25,570 --> 00:04:30,190
development assets when we're working in

00:04:28,110 --> 00:04:33,000
our development environment and loads

00:04:30,190 --> 00:04:34,990
them into the the Django asset pipeline

00:04:33,000 --> 00:04:36,190
and then we have selenium browser

00:04:34,990 --> 00:04:38,320
testing if any of you guys are familiar

00:04:36,190 --> 00:04:42,400
with that that becomes real nice the

00:04:38,320 --> 00:04:45,240
more complex your web app gets once

00:04:42,400 --> 00:04:48,400
again you already know about Django

00:04:45,240 --> 00:04:50,110
Postgres has a bunch of cool stuff like

00:04:48,400 --> 00:04:52,450
I said you can use trigram search to

00:04:50,110 --> 00:04:54,370
build autocomplete real easily H store

00:04:52,450 --> 00:04:57,040
filled you don't actually need no SQL

00:04:54,370 --> 00:04:59,110
you can put key values dynamically into

00:04:57,040 --> 00:05:00,730
an H store field if you've never heard

00:04:59,110 --> 00:05:02,590
of that array field for tagging like

00:05:00,730 --> 00:05:04,510
this is just why I really like to use

00:05:02,590 --> 00:05:05,230
post grits you can also use geo Django

00:05:04,510 --> 00:05:10,750
if you're doing any sort of

00:05:05,230 --> 00:05:13,090
location-based services selenium is a

00:05:10,750 --> 00:05:15,250
software testing framework it allows us

00:05:13,090 --> 00:05:18,310
to automate testing of our client you

00:05:15,250 --> 00:05:20,020
can get it in basically Ruby node or

00:05:18,310 --> 00:05:21,610
JavaScript Python just about every

00:05:20,020 --> 00:05:24,070
language has a very programming language

00:05:21,610 --> 00:05:25,390
yet we can do cool things like take

00:05:24,070 --> 00:05:27,580
pictures of each stage of the test on

00:05:25,390 --> 00:05:29,410
different browsers and form factors that

00:05:27,580 --> 00:05:32,110
becomes a real big issue when you're

00:05:29,410 --> 00:05:33,610
especially with modern JavaScript

00:05:32,110 --> 00:05:35,290
applications if you just never know how

00:05:33,610 --> 00:05:36,670
they're gonna handle on all the

00:05:35,290 --> 00:05:41,760
different browsers so you kind of want

00:05:36,670 --> 00:05:44,410
to do that test graphine like I said

00:05:41,760 --> 00:05:47,080
implements graph qo has support for

00:05:44,410 --> 00:05:53,200
building the schema objects and flask

00:05:47,080 --> 00:05:55,000
from existing models so graph QL is our

00:05:53,200 --> 00:06:00,070
query language how many guys have heard

00:05:55,000 --> 00:06:02,500
of graph killer like used it yeah so it

00:06:00,070 --> 00:06:03,730
replaces a REST API right you don't have

00:06:02,500 --> 00:06:07,480
different versions of your REST API

00:06:03,730 --> 00:06:10,180
you're always making post requests you

00:06:07,480 --> 00:06:11,830
can see here we want the cool we want

00:06:10,180 --> 00:06:13,930
the first question and we just want the

00:06:11,830 --> 00:06:16,590
question text and like it returns it and

00:06:13,930 --> 00:06:18,910
it's like pretty nice it's very simple

00:06:16,590 --> 00:06:20,890
it avoids over fetching and under

00:06:18,910 --> 00:06:22,390
fetching getting data you don't really

00:06:20,890 --> 00:06:24,340
need or want

00:06:22,390 --> 00:06:27,280
once again implemented in multiple

00:06:24,340 --> 00:06:30,160
languages everything under the viewer

00:06:27,280 --> 00:06:32,140
node we can authenticate like that's our

00:06:30,160 --> 00:06:35,710
first point like the viewer is the

00:06:32,140 --> 00:06:36,820
person looking at the app and so by the

00:06:35,710 --> 00:06:38,750
way if you guys have any questions

00:06:36,820 --> 00:06:40,699
please like just raise your hands too

00:06:38,750 --> 00:06:43,280
but so that's how we do the

00:06:40,699 --> 00:06:45,919
authentication anything under the viewer

00:06:43,280 --> 00:06:51,229
app will check for a jot token if you

00:06:45,919 --> 00:06:53,599
guys are familiar with that everybody is

00:06:51,229 --> 00:06:57,020
able to query the viewer node and get

00:06:53,599 --> 00:07:06,050
data off of it and I'll show you guys

00:06:57,020 --> 00:07:08,539
later how that works exactly yeah and so

00:07:06,050 --> 00:07:10,189
like under the viewer we can put we can

00:07:08,539 --> 00:07:11,840
put anything that should be public as

00:07:10,189 --> 00:07:14,150
well right we don't have to authenticate

00:07:11,840 --> 00:07:15,860
under the viewer but we can and and if

00:07:14,150 --> 00:07:18,620
we do authenticate then the user object

00:07:15,860 --> 00:07:20,569
will be the Django user and so what I

00:07:18,620 --> 00:07:23,690
mean by that is like you know if you

00:07:20,569 --> 00:07:26,180
have like say you're like an e-commerce

00:07:23,690 --> 00:07:28,250
store and you just want to like list a

00:07:26,180 --> 00:07:29,330
bunch of products you know that you

00:07:28,250 --> 00:07:30,590
don't need to authenticate for that

00:07:29,330 --> 00:07:34,460
right so that would just be like

00:07:30,590 --> 00:07:36,319
directly under the viewer have you guys

00:07:34,460 --> 00:07:41,060
ever who's worked with react - by the

00:07:36,319 --> 00:07:43,759
way okay we use a higher-order component

00:07:41,060 --> 00:07:46,009
which is just it just wraps another

00:07:43,759 --> 00:07:48,860
react component and like it checks for

00:07:46,009 --> 00:07:57,490
Jade jaw tokens like so we there'll be

00:07:48,860 --> 00:08:00,169
examples about all this later so when we

00:07:57,490 --> 00:08:02,029
change stuff with a mutation write a

00:08:00,169 --> 00:08:07,099
graph QL mutation is like how we're

00:08:02,029 --> 00:08:10,610
changing stuff on the server we can use

00:08:07,099 --> 00:08:12,860
optimist optimistic responses actually

00:08:10,610 --> 00:08:15,469
this slide is a little dense let's just

00:08:12,860 --> 00:08:17,210
get to the good stuff all right I mean

00:08:15,469 --> 00:08:20,779
you guys heard of webpack babel react

00:08:17,210 --> 00:08:25,759
relay reacts have you guys use webpack

00:08:20,779 --> 00:08:32,140
yet how do you like it is it fun is it

00:08:25,759 --> 00:08:36,919
hard to set up at all what

00:08:32,140 --> 00:08:38,419
yeah we use Babel

00:08:36,919 --> 00:08:39,500
to get all the latest JavaScript

00:08:38,419 --> 00:08:43,760
features I don't know if you guys ever

00:08:39,500 --> 00:08:45,320
use that yeah like so you'll see if

00:08:43,760 --> 00:08:48,200
you've never used vanilla jeaious you

00:08:45,320 --> 00:08:49,550
might see like a lot of interesting like

00:08:48,200 --> 00:08:52,940
stateless components we'll talk about

00:08:49,550 --> 00:08:56,540
that in a minute really is a framework

00:08:52,940 --> 00:08:59,210
built on top of graph QL it provides

00:08:56,540 --> 00:09:00,980
things like pagination so if you use

00:08:59,210 --> 00:09:05,089
face like Facebook's the big player here

00:09:00,980 --> 00:09:08,450
like right backing react and graph QL

00:09:05,089 --> 00:09:09,950
and relay and so when you think of

00:09:08,450 --> 00:09:12,290
pagination here's the big gotcha with

00:09:09,950 --> 00:09:16,280
relay is the way that they do it is like

00:09:12,290 --> 00:09:18,980
you get the first ten items and then you

00:09:16,280 --> 00:09:20,540
say like after that after like the last

00:09:18,980 --> 00:09:22,460
ID like I want to fetch another ten

00:09:20,540 --> 00:09:27,290
items it's not like get this page

00:09:22,460 --> 00:09:29,210
usually I'm saying and so all of the

00:09:27,290 --> 00:09:32,870
components are also styled with the

00:09:29,210 --> 00:09:34,460
react MVC web which is a it's actually

00:09:32,870 --> 00:09:36,710
using the official Google material

00:09:34,460 --> 00:09:38,420
library now it's not like some people

00:09:36,710 --> 00:09:41,980
putting it together it's like actually

00:09:38,420 --> 00:09:49,570
backed by official styles and everything

00:09:41,980 --> 00:09:49,570
so web pack is a bundle here we use it

00:09:50,890 --> 00:09:56,150
we use it to bundle almost all of our

00:09:54,290 --> 00:09:58,850
client side assets pretty much that's

00:09:56,150 --> 00:10:01,130
not just JavaScript it's CSS it can be

00:09:58,850 --> 00:10:03,620
images or fonts we can do cool stuff

00:10:01,130 --> 00:10:05,000
like hot reloading things in development

00:10:03,620 --> 00:10:07,370
that makes things really quick you don't

00:10:05,000 --> 00:10:09,170
have to refresh the page code splitting

00:10:07,370 --> 00:10:12,200
is a really cool stuff there's examples

00:10:09,170 --> 00:10:14,270
later you can code split based on you

00:10:12,200 --> 00:10:15,650
know a route you can code split based on

00:10:14,270 --> 00:10:16,910
a component like say you have a button

00:10:15,650 --> 00:10:18,080
that opens another thing like you don't

00:10:16,910 --> 00:10:20,510
even have to load that stuff until you

00:10:18,080 --> 00:10:22,820
hit the button or even the user could

00:10:20,510 --> 00:10:24,410
even just hover over something and it

00:10:22,820 --> 00:10:27,050
could cause like you to the load

00:10:24,410 --> 00:10:30,710
whatever you need next so that's cool

00:10:27,050 --> 00:10:32,780
that keeps your initial load times

00:10:30,710 --> 00:10:34,270
really small especially on mobile which

00:10:32,780 --> 00:10:36,500
is like what we're focusing on nowadays

00:10:34,270 --> 00:10:40,640
because we like really what happens is

00:10:36,500 --> 00:10:42,920
like reacting really are kind of heavy

00:10:40,640 --> 00:10:44,930
so like if you're on mobile it's a lot

00:10:42,920 --> 00:10:47,119
of JavaScript for like maybe like I'm

00:10:44,930 --> 00:10:48,980
anaemic phone to try and render all that

00:10:47,119 --> 00:10:51,769
so you kind of want to keep just as

00:10:48,980 --> 00:10:55,459
little data pulling as you need at a

00:10:51,769 --> 00:10:57,529
time service workers web pack does that

00:10:55,459 --> 00:11:01,790
as well we talked about that a minute

00:10:57,529 --> 00:11:08,990
ago so raise the hands that whose use

00:11:01,790 --> 00:11:10,850
react again all right so just react is a

00:11:08,990 --> 00:11:15,139
JavaScript library for building user

00:11:10,850 --> 00:11:18,230
interfaces you you can see like this is

00:11:15,139 --> 00:11:21,350
a class just like kind of just exactly

00:11:18,230 --> 00:11:24,230
like in Python it's got one method and

00:11:21,350 --> 00:11:26,179
that's render right now just to keep it

00:11:24,230 --> 00:11:28,550
really simple and it's gonna return a

00:11:26,179 --> 00:11:31,100
div with h1 and like in these curly

00:11:28,550 --> 00:11:33,740
brackets we're just adding you know one

00:11:31,100 --> 00:11:36,889
and that's just your super basic react

00:11:33,740 --> 00:11:39,999
intro we'll have some more examples with

00:11:36,889 --> 00:11:42,829
like props and state and all that later

00:11:39,999 --> 00:11:44,420
so what exactly is really you know it's

00:11:42,829 --> 00:11:48,199
a framework for data-driven react

00:11:44,420 --> 00:11:50,480
applications you get to declare your

00:11:48,199 --> 00:11:53,269
data exactly in the same component that

00:11:50,480 --> 00:11:54,949
you write it in so it's not like it's

00:11:53,269 --> 00:11:56,059
not like some person is like doing the

00:11:54,949 --> 00:11:57,230
front end and some person is getting it

00:11:56,059 --> 00:11:58,459
back and it's like you just you

00:11:57,230 --> 00:11:59,629
literally just say like this is the

00:11:58,459 --> 00:12:04,240
stuff I want from the backend and you're

00:11:59,629 --> 00:12:06,949
done with it like it also provides like

00:12:04,240 --> 00:12:09,920
relay also is the client-side store for

00:12:06,949 --> 00:12:12,290
all the data so that's where we can do

00:12:09,920 --> 00:12:13,850
like optimistic updates before the data

00:12:12,290 --> 00:12:17,059
even gets back from the server we can

00:12:13,850 --> 00:12:19,730
say like yeah like you you like voted or

00:12:17,059 --> 00:12:22,269
like yeah you deleted that quote or that

00:12:19,730 --> 00:12:22,269
question

00:12:24,330 --> 00:12:29,400
am I going too fast guys are you guys

00:12:26,730 --> 00:12:29,730
following this is good yeah cool all

00:12:29,400 --> 00:12:33,810
right

00:12:29,730 --> 00:12:35,730
flow is a static type checker I don't

00:12:33,810 --> 00:12:38,910
know if you guys have heard of like type

00:12:35,730 --> 00:12:41,940
checking JavaScript is a dynamic

00:12:38,910 --> 00:12:43,350
language so say like you have a function

00:12:41,940 --> 00:12:45,060
that doesn't get called until you're way

00:12:43,350 --> 00:12:47,100
out in production you may not know about

00:12:45,060 --> 00:12:48,780
that error it like literally could cause

00:12:47,100 --> 00:12:53,580
your whole application to just crash and

00:12:48,780 --> 00:12:54,720
so what we do is we type check we're

00:12:53,580 --> 00:12:56,580
just saying like we're gonna get the

00:12:54,720 --> 00:12:59,430
viewer object like I was saying right

00:12:56,580 --> 00:13:01,440
we know from relay however we get it and

00:12:59,430 --> 00:13:02,760
it's gonna have one object it's gonna be

00:13:01,440 --> 00:13:04,830
a question it's gonna have a question

00:13:02,760 --> 00:13:06,530
text and it's gonna be a string and so

00:13:04,830 --> 00:13:08,820
what flow will always be doing is like

00:13:06,530 --> 00:13:10,890
like say if you have an array of things

00:13:08,820 --> 00:13:13,230
and you want to call like a function

00:13:10,890 --> 00:13:15,570
that's only on an array like map right

00:13:13,230 --> 00:13:16,980
oh I'm trying to think of the Python

00:13:15,570 --> 00:13:18,840
equivalent like a pinned or any of that

00:13:16,980 --> 00:13:21,150
sort of stuff it'll tell you if you're

00:13:18,840 --> 00:13:24,450
trying to call a function that you can't

00:13:21,150 --> 00:13:26,160
use that on right like like if it's if

00:13:24,450 --> 00:13:29,580
it's a string and you try to say like

00:13:26,160 --> 00:13:30,660
you know question text stop map you know

00:13:29,580 --> 00:13:31,980
like something that should be on a list

00:13:30,660 --> 00:13:34,230
it'll tell you right away so you won't

00:13:31,980 --> 00:13:35,880
you don't have to wait to see that

00:13:34,230 --> 00:13:37,500
obviously you really don't want to go

00:13:35,880 --> 00:13:39,180
overboard with float it's kind of like

00:13:37,500 --> 00:13:40,560
testing though you kind of like you only

00:13:39,180 --> 00:13:43,080
want to use it once you start to really

00:13:40,560 --> 00:13:44,850
see like where you're sharing a lot of

00:13:43,080 --> 00:13:47,190
logic or like passing the same object

00:13:44,850 --> 00:13:50,130
around and you just you just define a

00:13:47,190 --> 00:13:52,220
type and once again like babel and

00:13:50,130 --> 00:13:56,240
webpack they sort of make all that stuff

00:13:52,220 --> 00:13:56,240
compiled down to like vanilla JavaScript

00:14:00,170 --> 00:14:07,620
so yeah pipe trim actually has really

00:14:02,610 --> 00:14:09,990
good flow support babel is the one

00:14:07,620 --> 00:14:12,840
that'll take it and like strip it all

00:14:09,990 --> 00:14:14,370
out though towards the end and you you

00:14:12,840 --> 00:14:16,710
can run like flow from the command line

00:14:14,370 --> 00:14:19,200
and it'll it'll point out all the errors

00:14:16,710 --> 00:14:20,880
like I wish we've had a video of it but

00:14:19,200 --> 00:14:23,640
I didn't think you guys would be super

00:14:20,880 --> 00:14:24,780
interested in flow just yet because it's

00:14:23,640 --> 00:14:26,250
kind of it's one of those things you'll

00:14:24,780 --> 00:14:30,210
dig into when you really need it I feel

00:14:26,250 --> 00:14:31,890
like and it's not it by the way if you

00:14:30,210 --> 00:14:33,450
guys look at the reinga application this

00:14:31,890 --> 00:14:35,340
is all there almost all the code that

00:14:33,450 --> 00:14:36,450
i'm sharing you is like from the actual

00:14:35,340 --> 00:14:37,140
application it might be a little cut

00:14:36,450 --> 00:14:41,959
down

00:14:37,140 --> 00:14:44,070
so it's easier to read serviceworker

00:14:41,959 --> 00:14:47,180
like i was saying you can keep tracking

00:14:44,070 --> 00:14:49,410
actions while the user is offline Oh

00:14:47,180 --> 00:14:50,550
honestly though I don't have a service

00:14:49,410 --> 00:14:54,510
but there's a lot of problems with

00:14:50,550 --> 00:14:55,680
service workers right now like I say you

00:14:54,510 --> 00:15:00,680
don't have you guys ever deployed to

00:14:55,680 --> 00:15:02,970
Heroku yeah so every time you deploy

00:15:00,680 --> 00:15:05,459
your assets get like a different hash

00:15:02,970 --> 00:15:08,310
just like a random string buts like if

00:15:05,459 --> 00:15:09,870
those assets aren't there like every

00:15:08,310 --> 00:15:11,519
time you deploy those old cash assets

00:15:09,870 --> 00:15:12,990
aren't there like your service worker is

00:15:11,519 --> 00:15:15,149
gonna try and pull those and it's like

00:15:12,990 --> 00:15:16,769
gonna crash and say like that's it

00:15:15,149 --> 00:15:19,829
that's why I haven't added like complete

00:15:16,769 --> 00:15:21,329
Service Worker support yet and even the

00:15:19,829 --> 00:15:23,610
creator react app which is like sort of

00:15:21,329 --> 00:15:26,010
the official boilerplate starting point

00:15:23,610 --> 00:15:27,240
had some issues when they they like just

00:15:26,010 --> 00:15:28,560
enabled service worker and a lot of

00:15:27,240 --> 00:15:31,140
people didn't even weren't even aware of

00:15:28,560 --> 00:15:33,839
it so next we're just gonna go into the

00:15:31,140 --> 00:15:40,769
rango workflow this is gonna have a lot

00:15:33,839 --> 00:15:42,480
of code examples so yeah like I told you

00:15:40,769 --> 00:15:44,100
we would talk about like state and props

00:15:42,480 --> 00:15:48,149
real quick like I showed you this is a

00:15:44,100 --> 00:15:49,079
class for dialogue as you can see we're

00:15:48,149 --> 00:15:51,990
passing a prompt

00:15:49,079 --> 00:15:56,940
we're just saying like is this dialogue

00:15:51,990 --> 00:15:58,820
open look at the state and so we're

00:15:56,940 --> 00:16:01,769
never actually going to modify props

00:15:58,820 --> 00:16:03,149
props are passed down and then like if

00:16:01,769 --> 00:16:04,800
we want to change something in this

00:16:03,149 --> 00:16:07,589
component we're gonna like define the

00:16:04,800 --> 00:16:09,209
state and so we could press we could

00:16:07,589 --> 00:16:11,910
pass it I can open prompt down into the

00:16:09,209 --> 00:16:15,570
dialogue and if there's not one we're

00:16:11,910 --> 00:16:17,519
gonna just say like true I should

00:16:15,570 --> 00:16:19,170
actually be false the dialogue shouldn't

00:16:17,519 --> 00:16:23,279
be open by default but you see them

00:16:19,170 --> 00:16:25,160
saying client-side authentication this

00:16:23,279 --> 00:16:28,040
is actually the root of our application

00:16:25,160 --> 00:16:30,570
the first thing is the browser router

00:16:28,040 --> 00:16:33,029
then we have an app which is just like a

00:16:30,570 --> 00:16:34,470
style a styled component that's where

00:16:33,029 --> 00:16:37,529
your navbar your footer and everything's

00:16:34,470 --> 00:16:40,140
gonna be and then the route with sub

00:16:37,529 --> 00:16:43,110
routes this is like where you pass in a

00:16:40,140 --> 00:16:46,199
list of routes we pass in the relay

00:16:43,110 --> 00:16:47,760
environment - this is actually a

00:16:46,199 --> 00:16:50,190
function that's in the rienne go app

00:16:47,760 --> 00:16:50,730
like I've tried to avoid using as many

00:16:50,190 --> 00:16:52,410
external

00:16:50,730 --> 00:16:54,240
I've raised as possible so like once you

00:16:52,410 --> 00:16:56,639
check out that Ringo app like you should

00:16:54,240 --> 00:16:58,920
be able to find like any of the like the

00:16:56,639 --> 00:17:04,199
authentication details like even the JA

00:16:58,920 --> 00:17:05,790
logic is in the app itself and once

00:17:04,199 --> 00:17:08,150
again this is higher we have a higher

00:17:05,790 --> 00:17:13,169
order component called is authenticated

00:17:08,150 --> 00:17:15,209
right and so it's gonna check for a ja

00:17:13,169 --> 00:17:15,809
token it's gonna remove an old token if

00:17:15,209 --> 00:17:20,069
expired

00:17:15,809 --> 00:17:21,660
and it returns a prop called the viewer

00:17:20,069 --> 00:17:26,760
is authenticated and there's also a

00:17:21,660 --> 00:17:28,770
viewer is admin and so right away the

00:17:26,760 --> 00:17:31,679
first thing that happens you know

00:17:28,770 --> 00:17:33,419
because like this is authenticated is

00:17:31,679 --> 00:17:35,970
actually going like around this whole

00:17:33,419 --> 00:17:37,590
function and checking and so like we can

00:17:35,970 --> 00:17:45,660
put is authenticated anywhere you'll see

00:17:37,590 --> 00:17:48,870
it later on at the routes so graph key

00:17:45,660 --> 00:17:50,940
authentication happens like say we want

00:17:48,870 --> 00:17:59,690
to get only the current users polls and

00:17:50,940 --> 00:18:02,820
not everybody's polls so here's the user

00:17:59,690 --> 00:18:05,400
the query the user queries kind of get

00:18:02,820 --> 00:18:07,919
pulled in to the the grand graph QL

00:18:05,400 --> 00:18:11,070
schema that Django uses and so like the

00:18:07,919 --> 00:18:13,049
viewer is kind of an artifact of the old

00:18:11,070 --> 00:18:15,030
relay and it's just once again it's the

00:18:13,049 --> 00:18:18,330
idea that the person looking at the app

00:18:15,030 --> 00:18:24,679
is the viewer and so what we're gonna do

00:18:18,330 --> 00:18:28,020
is we're gonna get the user model and

00:18:24,679 --> 00:18:30,480
then we're going to you know get the

00:18:28,020 --> 00:18:33,480
token from to get the token user ID and

00:18:30,480 --> 00:18:35,610
then we're gonna get that user and then

00:18:33,480 --> 00:18:38,070
we're just gonna put that user object on

00:18:35,610 --> 00:18:45,390
the viewer you see what I'm saying and

00:18:38,070 --> 00:18:47,760
so the next thing is is we write a user

00:18:45,390 --> 00:18:51,299
pulls interface and we stick that guy on

00:18:47,760 --> 00:18:57,299
the user node and so now the user object

00:18:51,299 --> 00:19:02,549
will also have questions which are the

00:18:57,299 --> 00:19:04,010
poll questions and so every graph QL

00:19:02,549 --> 00:19:07,730
query has

00:19:04,010 --> 00:19:10,040
a resolver jingo graph cool actually

00:19:07,730 --> 00:19:11,450
does a lot of that for you but you're

00:19:10,040 --> 00:19:13,640
pretty much gonna have to write your own

00:19:11,450 --> 00:19:15,290
resolvers and so what you usually just

00:19:13,640 --> 00:19:18,770
end up doing is like resolve questions

00:19:15,290 --> 00:19:20,930
and since we put this on the user nodes

00:19:18,770 --> 00:19:22,520
self is gonna be user and so it's pretty

00:19:20,930 --> 00:19:29,150
easy we just get the question set all

00:19:22,520 --> 00:19:31,910
and like boom so the entry point of our

00:19:29,150 --> 00:19:36,710
like actual applications code our custom

00:19:31,910 --> 00:19:38,780
is the routes and so what we have is we

00:19:36,710 --> 00:19:40,310
have a file we have a in the client

00:19:38,780 --> 00:19:43,340
directory we have a folder called routes

00:19:40,310 --> 00:19:46,430
and this is off jeaious and it's just

00:19:43,340 --> 00:19:47,780
the sign up and the login route and once

00:19:46,430 --> 00:19:49,910
again we have higher-order components

00:19:47,780 --> 00:19:52,430
that say like is this an authenticated

00:19:49,910 --> 00:19:54,980
route false so what that means is like

00:19:52,430 --> 00:19:56,870
if you are logged in and you try to go

00:19:54,980 --> 00:19:59,960
to these routes it's gonna send you to

00:19:56,870 --> 00:20:01,610
the post login page and so if you don't

00:19:59,960 --> 00:20:04,370
put false then it is an authenticated

00:20:01,610 --> 00:20:05,180
route and so if you try to go to that

00:20:04,370 --> 00:20:08,360
you're not logged then it's going to

00:20:05,180 --> 00:20:10,460
redirect you to the landing page so what

00:20:08,360 --> 00:20:13,280
we do is we we sort of like split like

00:20:10,460 --> 00:20:15,320
just like the Django app is there's like

00:20:13,280 --> 00:20:17,630
Django splits it's logic up into apps we

00:20:15,320 --> 00:20:20,480
can split our logic up in the modules

00:20:17,630 --> 00:20:22,790
folder by the way modules and components

00:20:20,480 --> 00:20:25,100
are a folder in client and we use

00:20:22,790 --> 00:20:27,530
webpack to just let us type in modules

00:20:25,100 --> 00:20:29,840
instead of having to do like you know

00:20:27,530 --> 00:20:31,700
like double period double period to go

00:20:29,840 --> 00:20:33,590
back and directories like it's always

00:20:31,700 --> 00:20:34,220
just modules off off and it's like makes

00:20:33,590 --> 00:20:39,650
it way easier

00:20:34,220 --> 00:20:45,380
and so that routes that we passed a few

00:20:39,650 --> 00:20:46,040
slides ago that's what that's what it is

00:20:45,380 --> 00:20:47,690
like

00:20:46,040 --> 00:20:50,060
so the first object is just a landing

00:20:47,690 --> 00:20:52,430
page the path you know is just like the

00:20:50,060 --> 00:20:53,780
route and then what we do is we spread

00:20:52,430 --> 00:20:55,370
the off the routes I don't know if you

00:20:53,780 --> 00:20:57,650
have you guys ever seen like spreads and

00:20:55,370 --> 00:20:59,840
JavaScript yeah it's good stuff it just

00:20:57,650 --> 00:21:01,550
basically means like take all the

00:20:59,840 --> 00:21:06,160
objects here and spread them into this

00:21:01,550 --> 00:21:06,160
list and so

00:21:08,900 --> 00:21:14,400
we can code split here or at the

00:21:12,150 --> 00:21:15,420
component level later there's gonna be

00:21:14,400 --> 00:21:16,130
an example and code splitting in the

00:21:15,420 --> 00:21:18,210
next slide

00:21:16,130 --> 00:21:22,530
like I said higher-order components

00:21:18,210 --> 00:21:23,610
check for logged in users authenticating

00:21:22,530 --> 00:21:26,520
here also avoids

00:21:23,610 --> 00:21:28,950
us loading any data or even like hitting

00:21:26,520 --> 00:21:29,820
that in point like so we don't like

00:21:28,950 --> 00:21:32,880
since we're code splitting

00:21:29,820 --> 00:21:35,130
after this it's not even gonna load any

00:21:32,880 --> 00:21:37,560
data like you're not logged in you see

00:21:35,130 --> 00:21:41,220
what I'm saying so code splitting is

00:21:37,560 --> 00:21:43,290
pretty easy stuff this isn't the bundle

00:21:41,220 --> 00:21:46,500
component is also just another component

00:21:43,290 --> 00:21:49,470
that's built in to the Wrangell

00:21:46,500 --> 00:21:51,360
application and we actually have a chunk

00:21:49,470 --> 00:21:54,120
called off and so like what happens is

00:21:51,360 --> 00:21:56,420
this comment here like well the function

00:21:54,120 --> 00:22:01,860
says like once we load it you know

00:21:56,420 --> 00:22:03,330
import this module and the idea of what

00:22:01,860 --> 00:22:05,610
back is that you can chunk stuff up and

00:22:03,330 --> 00:22:07,440
so like like I said none of the all the

00:22:05,610 --> 00:22:09,870
auth stuff is gonna be in one chunk that

00:22:07,440 --> 00:22:11,970
the client loads when it's ready so you

00:22:09,870 --> 00:22:15,260
won't get that immediately and you see

00:22:11,970 --> 00:22:18,180
that we just register it at the bottom

00:22:15,260 --> 00:22:24,870
reacts also really cool because we can

00:22:18,180 --> 00:22:26,670
style stuff right and just like this is

00:22:24,870 --> 00:22:28,470
like a blessing of webpack right so

00:22:26,670 --> 00:22:31,260
we're writing JavaScript and we're

00:22:28,470 --> 00:22:33,450
importing like style components and so

00:22:31,260 --> 00:22:35,580
you can see here like it's kind of nice

00:22:33,450 --> 00:22:39,390
to say like alright here's the route and

00:22:35,580 --> 00:22:41,370
here's the route and so this makes it so

00:22:39,390 --> 00:22:44,330
you don't have to style your page every

00:22:41,370 --> 00:22:46,680
single time you want to use that

00:22:44,330 --> 00:22:49,320
anything in the anything where props

00:22:46,680 --> 00:22:51,060
children props children or like is

00:22:49,320 --> 00:22:54,060
anything in between the page component

00:22:51,060 --> 00:22:55,380
you see and so like that that could just

00:22:54,060 --> 00:23:01,530
be the landing page that could be the

00:22:55,380 --> 00:23:04,200
quotes page oh gosh yeah

00:23:01,530 --> 00:23:07,980
so here's the thing about graph queue oh

00:23:04,200 --> 00:23:10,170
how did we get yeah that slides a little

00:23:07,980 --> 00:23:12,090
out of place but we're about to get into

00:23:10,170 --> 00:23:14,190
it like actually doing all the graph QL

00:23:12,090 --> 00:23:15,810
stuff and so I don't know if you guys

00:23:14,190 --> 00:23:19,230
have ever used you ever use like the

00:23:15,810 --> 00:23:19,440
choices on the Django field and like you

00:23:19,230 --> 00:23:21,179
know

00:23:19,440 --> 00:23:22,080
like you start in a like have you guys

00:23:21,179 --> 00:23:24,480
ever heard of this where you make a

00:23:22,080 --> 00:23:26,299
class of the choices and then like

00:23:24,480 --> 00:23:30,570
anywhere in the code like since we put

00:23:26,299 --> 00:23:32,129
this class as like status like anywhere

00:23:30,570 --> 00:23:34,799
we want we can just say order status

00:23:32,129 --> 00:23:36,330
open you see what I'm saying like then

00:23:34,799 --> 00:23:38,490
you just avoid having to like try and

00:23:36,330 --> 00:23:40,019
type this correctly everywhere graph

00:23:38,490 --> 00:23:47,879
people will also complain if your

00:23:40,019 --> 00:23:50,279
numbers are all caps so this is like a

00:23:47,879 --> 00:23:51,659
this is your graph QL node this is like

00:23:50,279 --> 00:23:56,039
oh man

00:23:51,659 --> 00:23:59,460
Coolio so we just registered like the

00:23:56,039 --> 00:24:05,129
question model and then this is the

00:23:59,460 --> 00:24:08,220
question node you see like we we

00:24:05,129 --> 00:24:09,570
register it like to the question and

00:24:08,220 --> 00:24:15,240
then all of these these are the poll

00:24:09,570 --> 00:24:18,419
queries and so we can either just get it

00:24:15,240 --> 00:24:21,360
like just one question or we can get the

00:24:18,419 --> 00:24:23,190
filter and so what that means is we can

00:24:21,360 --> 00:24:26,820
say we can order it you know we can say

00:24:23,190 --> 00:24:34,710
get the first first ten like after the

00:24:26,820 --> 00:24:36,990
first ten and then so after we make that

00:24:34,710 --> 00:24:39,450
pulse query we just import it into the

00:24:36,990 --> 00:24:42,870
the schema and like there's your queries

00:24:39,450 --> 00:24:47,850
here's your mutations and your graphene

00:24:42,870 --> 00:24:50,250
schema a real a fragment is how we reuse

00:24:47,850 --> 00:24:52,019
like a fragment is just saying we just

00:24:50,250 --> 00:24:56,490
want this data on this component it's

00:24:52,019 --> 00:24:59,100
not actually gonna fetch it so you can

00:24:56,490 --> 00:25:00,720
see this is a the question fragment

00:24:59,100 --> 00:25:03,659
wraps around the other thing and passes

00:25:00,720 --> 00:25:05,190
the data in and so here's where that for

00:25:03,659 --> 00:25:08,549
here's like the actual thing that gets

00:25:05,190 --> 00:25:09,840
that data is with real a container it

00:25:08,549 --> 00:25:15,570
uses this thing called a query render

00:25:09,840 --> 00:25:16,950
and so anywhere you want to like fetch

00:25:15,570 --> 00:25:19,950
data that's what you're gonna use you're

00:25:16,950 --> 00:25:22,700
gonna use the query renderer like so say

00:25:19,950 --> 00:25:25,080
say maybe you have like a drop-down and

00:25:22,700 --> 00:25:27,240
you had like the maybe like the user

00:25:25,080 --> 00:25:29,220
addresses like you don't really care

00:25:27,240 --> 00:25:31,230
about the user addresses any other time

00:25:29,220 --> 00:25:33,270
than when that drop-down is open so you

00:25:31,230 --> 00:25:34,980
can say like literally like only fetch

00:25:33,270 --> 00:25:36,930
data like once this component is

00:25:34,980 --> 00:25:39,120
rendered and so that makes it really

00:25:36,930 --> 00:25:41,160
nice you can just dynamically load data

00:25:39,120 --> 00:25:52,410
without having to reload the page and

00:25:41,160 --> 00:25:54,120
all that jazz really variables can come

00:25:52,410 --> 00:25:56,450
from URL params and query strings are

00:25:54,120 --> 00:25:58,620
you guys familiar with ul params at all

00:25:56,450 --> 00:26:00,750
they're kind of ugly they're really ugly

00:25:58,620 --> 00:26:02,340
but the thing is is like if you ever

00:26:00,750 --> 00:26:04,470
have a client that wants to be able to

00:26:02,340 --> 00:26:05,490
bookmark or share links like that's how

00:26:04,470 --> 00:26:08,820
you're gonna do it you're gonna put the

00:26:05,490 --> 00:26:13,440
variables you know in here and the query

00:26:08,820 --> 00:26:14,820
renderer will get that data from all

00:26:13,440 --> 00:26:16,350
over the place I think I'm ready now to

00:26:14,820 --> 00:26:19,860
time guys does anybody any questions

00:26:16,350 --> 00:26:24,870
though like alright we're gonna write a

00:26:19,860 --> 00:26:27,000
simple mutation real quick and a simple

00:26:24,870 --> 00:26:30,900
mutation is really just it's going to

00:26:27,000 --> 00:26:32,550
take the relay environment and we're

00:26:30,900 --> 00:26:34,350
gonna say we want to create a poll and

00:26:32,550 --> 00:26:38,340
this we're gonna pass the input in and

00:26:34,350 --> 00:26:39,480
what we want returned once the mutation

00:26:38,340 --> 00:26:42,960
succeeds is we just want the question

00:26:39,480 --> 00:26:45,570
text and so you know we make this

00:26:42,960 --> 00:26:49,110
mutation and we pass an environment and

00:26:45,570 --> 00:26:52,020
then the mutation is this and then we

00:26:49,110 --> 00:26:54,450
say uncomplete you know make a callback

00:26:52,020 --> 00:26:57,270
and so that could be like redirecting to

00:26:54,450 --> 00:27:01,200
you another page variables are just the

00:26:57,270 --> 00:27:03,390
input a more complex mutation might have

00:27:01,200 --> 00:27:06,930
on error they might have an optimistic

00:27:03,390 --> 00:27:08,910
updater or regular updater and so you

00:27:06,930 --> 00:27:11,190
you might write the shared logic of the

00:27:08,910 --> 00:27:14,610
updating over here something like that

00:27:11,190 --> 00:27:17,190
might be where you open the vote dialog

00:27:14,610 --> 00:27:18,270
and you vote and like you don't want to

00:27:17,190 --> 00:27:21,150
redirect to a new page and you just want

00:27:18,270 --> 00:27:22,410
to update that actual vote count that's

00:27:21,150 --> 00:27:25,440
how you would do it you would say like

00:27:22,410 --> 00:27:28,800
use the updater get the root field vote

00:27:25,440 --> 00:27:32,730
on this tour mutations are kind of

00:27:28,800 --> 00:27:35,520
confusing so we use a cilium browser

00:27:32,730 --> 00:27:38,580
test like all of your components if you

00:27:35,520 --> 00:27:40,890
just write like a class name like we use

00:27:38,580 --> 00:27:42,630
bim styles you just say like alright

00:27:40,890 --> 00:27:45,159
there's a button component that's like

00:27:42,630 --> 00:27:46,960
submitting the signup form and so

00:27:45,159 --> 00:27:49,629
CSS selector if you've never used

00:27:46,960 --> 00:27:51,279
selenium we have this concept it's like

00:27:49,629 --> 00:27:54,940
an implicit weight which just means like

00:27:51,279 --> 00:27:56,019
wait 10 seconds or whatever and if that

00:27:54,940 --> 00:27:58,210
component doesn't show up it's

00:27:56,019 --> 00:28:01,869
considered a failure and so that's nice

00:27:58,210 --> 00:28:03,340
because we don't have to the thing about

00:28:01,869 --> 00:28:04,659
it react is like your components will

00:28:03,340 --> 00:28:05,499
take a second to render so if you're not

00:28:04,659 --> 00:28:08,169
using that

00:28:05,499 --> 00:28:09,700
you can say like explicitly weight or

00:28:08,169 --> 00:28:11,259
implicitly weight but implicit weights

00:28:09,700 --> 00:28:16,499
are a lot faster that might be a little

00:28:11,259 --> 00:28:19,179
confusing some just final notes all of

00:28:16,499 --> 00:28:21,220
rienne go also has some examples for

00:28:19,179 --> 00:28:24,299
factories if you never use factories

00:28:21,220 --> 00:28:27,359
it's a good idea because you want to

00:28:24,299 --> 00:28:29,979
always be able to bring on other devs or

00:28:27,359 --> 00:28:31,659
be in production or testing and you want

00:28:29,979 --> 00:28:33,249
to be able to like have all of your data

00:28:31,659 --> 00:28:34,960
like they're you know there's nothing

00:28:33,249 --> 00:28:36,489
worse than like having to bring on a new

00:28:34,960 --> 00:28:38,529
dev on and like trying to like say like

00:28:36,489 --> 00:28:42,220
oh you got to talk to this API and this

00:28:38,529 --> 00:28:43,779
you know server and do all that allows

00:28:42,220 --> 00:28:45,190
us to reuse the same code while testing

00:28:43,779 --> 00:28:49,389
and staging data in the development

00:28:45,190 --> 00:28:51,129
environment I also have like ceding the

00:28:49,389 --> 00:28:53,679
concept of seeding and syncing we're

00:28:51,129 --> 00:28:55,389
like staging you might wipe out the

00:28:53,679 --> 00:28:57,820
database and restage completely but

00:28:55,389 --> 00:29:01,299
seeding is like you know get or find

00:28:57,820 --> 00:29:02,769
these things and maybe update them so

00:29:01,299 --> 00:29:04,809
they should be able to you should be

00:29:02,769 --> 00:29:10,869
able to run a sync command in prod

00:29:04,809 --> 00:29:12,580
these are just some extra notes testing

00:29:10,869 --> 00:29:14,499
you should be able to you should design

00:29:12,580 --> 00:29:16,690
your test run in parallel test the graph

00:29:14,499 --> 00:29:18,099
QL endpoints then test selenium browsers

00:29:16,690 --> 00:29:21,729
graphical endpoints you can test way

00:29:18,099 --> 00:29:23,919
faster than the browser testing you can

00:29:21,729 --> 00:29:25,509
tag tests so we can actually test them

00:29:23,919 --> 00:29:28,389
as like graph QL or browser and we can

00:29:25,509 --> 00:29:30,279
just run the test that we want you know

00:29:28,389 --> 00:29:31,509
you can also tag remote API tests

00:29:30,279 --> 00:29:34,899
they're like really brittle known to

00:29:31,509 --> 00:29:37,989
fail like I was saying BIM naming it's

00:29:34,899 --> 00:29:39,580
just the idea that there's like oh gosh

00:29:37,989 --> 00:29:41,139
this is not BIM but basically like

00:29:39,580 --> 00:29:44,229
you're just just you're putting a class

00:29:41,139 --> 00:29:45,909
name on the object and telling it like

00:29:44,229 --> 00:29:49,149
we're selenium can find it and click on

00:29:45,909 --> 00:29:52,389
it continuous deployment is nice

00:29:49,149 --> 00:29:54,820
once again reinga actually has testing

00:29:52,389 --> 00:29:57,369
and continuous deployment like examples

00:29:54,820 --> 00:29:59,050
all in there so code is automatically

00:29:57,369 --> 00:30:00,730
deploy to a staging environment

00:29:59,050 --> 00:30:02,860
stage environment that automatically

00:30:00,730 --> 00:30:04,990
resets the database and then stages

00:30:02,860 --> 00:30:07,480
fresh data from the factory's master

00:30:04,990 --> 00:30:09,540
branch pushes to prod Auto backs up the

00:30:07,480 --> 00:30:11,260
database and migrates and syncs models

00:30:09,540 --> 00:30:13,360
see that's what I'm saying this isn't

00:30:11,260 --> 00:30:17,440
just react and relay this is really like

00:30:13,360 --> 00:30:20,490
a full boiler plate when is reacting

00:30:17,440 --> 00:30:22,420
really good choice complex data queries

00:30:20,490 --> 00:30:25,480
when you don't want to load all data

00:30:22,420 --> 00:30:26,380
initially pagination but that's enough

00:30:25,480 --> 00:30:35,350
of the slide do you guys have any

00:30:26,380 --> 00:30:38,850
questions oh gosh redux really is a

00:30:35,350 --> 00:30:41,410
replacement for redux and I'm actually

00:30:38,850 --> 00:30:43,929
I'm a contributor on a couple other

00:30:41,410 --> 00:30:49,059
boiler plates that use Redux I would say

00:30:43,929 --> 00:30:51,940
meteor is a really good one well I guess

00:30:49,059 --> 00:31:00,340
that's not gonna happen I guess this is

00:30:51,940 --> 00:31:03,990
why the mirror so if you want a really

00:31:00,340 --> 00:31:10,210
good Redux example I would use meteor

00:31:03,990 --> 00:31:14,530
it's also got a real-time but any other

00:31:10,210 --> 00:31:16,179
any other questions like reang go the

00:31:14,530 --> 00:31:17,860
meteor is fun I've actually used this

00:31:16,179 --> 00:31:22,780
for a lot of inspiration this is real

00:31:17,860 --> 00:31:25,750
time if you want support once again

00:31:22,780 --> 00:31:31,120
though if you want to find Rango it's

00:31:25,750 --> 00:31:34,330
like right here like I said I committed

00:31:31,120 --> 00:31:35,350
11 hours ago today I work on it I would

00:31:34,330 --> 00:31:36,940
mind I wouldn't mind having some

00:31:35,350 --> 00:31:38,650
contributors too if anybody like wants

00:31:36,940 --> 00:31:39,910
to just like learn how it works and

00:31:38,650 --> 00:31:46,080
everything I know this talk was a little

00:31:39,910 --> 00:31:46,080
rushed but anything else

00:31:48,809 --> 00:32:00,070
excuse me Oh with this so I actually use

00:31:56,890 --> 00:32:01,750
this for a project that one of my

00:32:00,070 --> 00:32:03,309
startups that I've been working on for

00:32:01,750 --> 00:32:05,049
the last few years and to be honest

00:32:03,309 --> 00:32:06,610
that's literally what drives the

00:32:05,049 --> 00:32:08,230
requirements for URI Ingo is it's like

00:32:06,610 --> 00:32:12,630
one of my personal business endeavors

00:32:08,230 --> 00:32:18,340
and like this is just an example of it

00:32:12,630 --> 00:32:24,780
if you guys see that you know show you

00:32:18,340 --> 00:32:55,000
after this but thanks so much guys

00:32:24,780 --> 00:32:56,679
what's up individually I mean I've tried

00:32:55,000 --> 00:32:59,799
to be as opinionated as possible because

00:32:56,679 --> 00:33:01,030
I liked that about Django and that's

00:32:59,799 --> 00:33:02,470
sort of like why I named it a three

00:33:01,030 --> 00:33:07,740
anger but yeah you can actually just

00:33:02,470 --> 00:33:07,740
write like the components

00:33:12,539 --> 00:33:24,070
oh man wait we're looking it has been

00:33:22,049 --> 00:33:33,220
distributed

00:33:24,070 --> 00:33:35,169
hey guys tell them yeah yeah I'm trying

00:33:33,220 --> 00:33:44,460
to find a good example for you real

00:33:35,169 --> 00:33:44,460
quick I can show you this after the talk

00:33:44,580 --> 00:33:50,350
you guys guys's wait for a minute here

00:33:47,320 --> 00:33:54,609
and any questions you can take off

00:33:50,350 --> 00:33:56,950
linear so so the teachers are being

00:33:54,609 --> 00:34:00,029
distributed at their interpreting so

00:33:56,950 --> 00:34:03,489
anybody was a t-shirt they can be in

00:34:00,029 --> 00:34:06,669
don't try to make a curse just go

00:34:03,489 --> 00:34:09,899
I mean in batches probably the rule

00:34:06,669 --> 00:34:12,819
number is triple do for the t-shirts and

00:34:09,899 --> 00:34:15,869
the next stop that I will be starting

00:34:12,819 --> 00:34:15,869

YouTube URL: https://www.youtube.com/watch?v=FLPeOs6owec


