Title: tools to define Machine Learning
Publication date: 2017-12-27
Playlist: PyCon India 2017
Description: 
	
Captions: 
	00:00:00,240 --> 00:00:23,220
the next is whoops hey I'm going to talk

00:00:20,400 --> 00:00:24,660
about some of the tools were built to

00:00:23,220 --> 00:00:29,490
deploy in machine learning applications

00:00:24,660 --> 00:00:31,019
very easily so Milan and I worked with

00:00:29,490 --> 00:00:33,000
startup Colorado data we were trying to

00:00:31,019 --> 00:00:36,420
build $0.08 platform some parts of it

00:00:33,000 --> 00:00:39,120
I'm going to show you now so the problem

00:00:36,420 --> 00:00:42,059
is when it started deploying ml apps was

00:00:39,120 --> 00:00:43,890
really hard so if we actually looked at

00:00:42,059 --> 00:00:47,450
looked at the problem what we raised was

00:00:43,890 --> 00:00:49,739
it's not just deploying ml models but

00:00:47,450 --> 00:00:53,730
deploying any Python function as an API

00:00:49,739 --> 00:00:55,680
is pretty hard so what we did is we

00:00:53,730 --> 00:01:00,899
wrote a tool called Firefly to solve

00:00:55,680 --> 00:01:02,910
that thing so so if you look at writing

00:01:00,899 --> 00:01:05,309
exposing any Python functions an API

00:01:02,910 --> 00:01:07,710
that so many things that you need to

00:01:05,309 --> 00:01:10,049
write some other application and then

00:01:07,710 --> 00:01:12,510
write restful api make sure that data is

00:01:10,049 --> 00:01:14,549
evaluated and then once the API is ready

00:01:12,510 --> 00:01:16,229
to use that you probably end up writing

00:01:14,549 --> 00:01:18,810
a client library

00:01:16,229 --> 00:01:20,610
so what firefighters is all they do is

00:01:18,810 --> 00:01:22,560
write a function that you want let's say

00:01:20,610 --> 00:01:25,770
you have a squared function and then

00:01:22,560 --> 00:01:27,540
start the server with Firefly and the

00:01:25,770 --> 00:01:30,479
module name dot function in that starts

00:01:27,540 --> 00:01:33,060
running a server I'm going to create the

00:01:30,479 --> 00:01:34,409
client and it's a client dot square call

00:01:33,060 --> 00:01:36,840
the same function with passing arguments

00:01:34,409 --> 00:01:38,670
that gets results back so you don't

00:01:36,840 --> 00:01:39,869
really have to do anything else other

00:01:38,670 --> 00:01:42,390
than writing your code and then start

00:01:39,869 --> 00:01:45,240
running it now maybe this means it's a

00:01:42,390 --> 00:01:46,380
RESTful API it sends a post request with

00:01:45,240 --> 00:01:49,950
the parameters and then gets a response

00:01:46,380 --> 00:01:51,720
back as long as your function is working

00:01:49,950 --> 00:01:54,030
with JSON phylidia types that works fine

00:01:51,720 --> 00:01:57,450
now a more part for example you want to

00:01:54,030 --> 00:01:58,680
have deploy machinery model you can load

00:01:57,450 --> 00:02:00,180
the model fast and the rider by each

00:01:58,680 --> 00:02:02,610
function that takes the features that

00:02:00,180 --> 00:02:04,740
you want to is input and then predict it

00:02:02,610 --> 00:02:06,930
and then written the response back and

00:02:04,740 --> 00:02:10,259
then when you want to call it start

00:02:06,930 --> 00:02:11,210
server and then create the client and

00:02:10,259 --> 00:02:13,100
then call

00:02:11,210 --> 00:02:15,260
predict with all the features that you

00:02:13,100 --> 00:02:16,730
want to call it now

00:02:15,260 --> 00:02:19,850
it's an open-source tool can actually

00:02:16,730 --> 00:02:23,000
take go and use it now what it does is

00:02:19,850 --> 00:02:24,290
it starts a server on your computer okay

00:02:23,000 --> 00:02:26,990
but you want shared with other people

00:02:24,290 --> 00:02:29,360
that's not sufficient so how do you

00:02:26,990 --> 00:02:32,150
deploy to the cloud so we built a hit or

00:02:29,360 --> 00:02:34,730
click platform to do that so it's

00:02:32,150 --> 00:02:37,100
available on the relator calm so what

00:02:34,730 --> 00:02:38,870
you do is you write a rotor word yml

00:02:37,100 --> 00:02:40,730
file with specifying the project name

00:02:38,870 --> 00:02:42,830
what ran time to use that basically says

00:02:40,730 --> 00:02:44,120
you need to have Python through site kid

00:02:42,830 --> 00:02:45,620
or fighter in through transit flow and

00:02:44,120 --> 00:02:50,480
then specify the service that you want

00:02:45,620 --> 00:02:51,770
to run but basically is what's the name

00:02:50,480 --> 00:02:54,860
and then what function that you want to

00:02:51,770 --> 00:02:56,870
run so it's a predict predict the module

00:02:54,860 --> 00:03:01,010
name but functionally the two cells that

00:02:56,870 --> 00:03:04,640
you want to run okay and you just ran

00:03:01,010 --> 00:03:05,990
deploy that deploys and that was it to

00:03:04,640 --> 00:03:07,730
the cloud and gives it to you are n

00:03:05,990 --> 00:03:12,710
points where you can actually use it

00:03:07,730 --> 00:03:15,530
hello now it also allows you to run

00:03:12,710 --> 00:03:17,480
different jobs by specifying what type

00:03:15,530 --> 00:03:19,730
of zp instance you want you can say that

00:03:17,480 --> 00:03:24,590
you need to run it on 64 core instance

00:03:19,730 --> 00:03:26,840
or GPU etc now so that's nice if you

00:03:24,590 --> 00:03:28,490
actually without worry you actually can

00:03:26,840 --> 00:03:32,570
run things in the cloud but it actually

00:03:28,490 --> 00:03:36,350
runs on my own it runs on our cloud it's

00:03:32,570 --> 00:03:38,060
it's a pass platform where you run get

00:03:36,350 --> 00:03:40,340
your code to our platform and on it okay

00:03:38,060 --> 00:03:41,810
but lot of people that's not a true

00:03:40,340 --> 00:03:44,930
because they want to run on our own they

00:03:41,810 --> 00:03:46,460
don't serve woods so how to deploy

00:03:44,930 --> 00:03:49,490
things on your network so what we have

00:03:46,460 --> 00:03:52,370
is we have this lite version of a

00:03:49,490 --> 00:03:55,330
platform quadrotor light which allows

00:03:52,370 --> 00:03:57,830
you to deploy the same interface to

00:03:55,330 --> 00:03:59,390
deploy things on your own server so what

00:03:57,830 --> 00:04:00,710
you can do is just like what you have

00:03:59,390 --> 00:04:02,420
done with that order of IML you can

00:04:00,710 --> 00:04:04,490
write that although light dot yml file

00:04:02,420 --> 00:04:05,720
space we want hostname and the I created

00:04:04,490 --> 00:04:09,940
and the username that you want to use

00:04:05,720 --> 00:04:13,250
and then specify the of the name of the

00:04:09,940 --> 00:04:15,800
service and what function to use etc and

00:04:13,250 --> 00:04:17,660
then first time when you run it you said

00:04:15,800 --> 00:04:21,770
oh like provision so that what it does

00:04:17,660 --> 00:04:24,210
is it goes to server insults all the

00:04:21,770 --> 00:04:26,250
requests dependencies insults anaconda

00:04:24,210 --> 00:04:28,680
and then inserts a bunch of things for

00:04:26,250 --> 00:04:30,449
the first time and 4xm are not suggest

00:04:28,680 --> 00:04:32,610
have to say duro and deploy it takes

00:04:30,449 --> 00:04:34,259
your code puts it there and then starts

00:04:32,610 --> 00:04:36,030
all services and then gives you your

00:04:34,259 --> 00:04:37,949
line points where you can actually use

00:04:36,030 --> 00:04:39,630
them if you notice in the a file you

00:04:37,949 --> 00:04:42,960
specify the port number where you want

00:04:39,630 --> 00:04:44,280
to expose the service so just make your

00:04:42,960 --> 00:04:45,840
code changes and say total I'd apply

00:04:44,280 --> 00:04:47,070
that goes to your server deploys

00:04:45,840 --> 00:04:49,919
everything and then you have this two

00:04:47,070 --> 00:04:51,900
endpoints that you can start using let

00:04:49,919 --> 00:04:53,100
me sum if you want to look at the logs

00:04:51,900 --> 00:04:55,350
of any of them you can say total of

00:04:53,100 --> 00:04:57,740
light logs and then say what's the

00:04:55,350 --> 00:04:59,669
service name it will show a lots of that

00:04:57,740 --> 00:05:01,860
let me summarize

00:04:59,669 --> 00:05:03,240
so we have these three tools what is

00:05:01,860 --> 00:05:04,500
Firefly which is in function you can

00:05:03,240 --> 00:05:06,510
deploy function a service it's open

00:05:04,500 --> 00:05:07,620
source now rotate the platform which is

00:05:06,510 --> 00:05:09,900
a cloud platform which is the past

00:05:07,620 --> 00:05:11,070
platform and I wrote a light it's a

00:05:09,900 --> 00:05:13,830
light version of the platform which I

00:05:11,070 --> 00:05:15,630
can open so that he can deploy your

00:05:13,830 --> 00:05:16,680
applications on your own server thank

00:05:15,630 --> 00:05:20,649
you

00:05:16,680 --> 00:05:20,649

YouTube URL: https://www.youtube.com/watch?v=ih8XoeZxVJ4


