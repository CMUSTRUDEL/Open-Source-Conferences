Title: Create flexible Neuroimaging pipelines using nipype - PyCon India 2015
Publication date: 2015-10-11
Playlist: PyCon India 2015
Description: 
	Speaker: Sourav Singh

The objective of the talk is to introduce people to nipype, which is a Python project providing a uniform interface to existing neuroimaging softwares.

The project enables you to design workflows which make use of algorithms from different packages, and reduces the learning necessary to use the packages.We will also be exploring on the code required to create suitable workflows and how the different software tools interact with each other. 

Details: https://in.pycon.org/cfp/pycon-india-2015/proposals/introduction-to-nipype-and-how-do-we-create-flexible-neuroimaging-pipelines-using-it/
Captions: 
	00:00:02,990 --> 00:00:08,670
how then are you sitting on the

00:00:05,490 --> 00:00:20,820
shoulders is the most complicated object

00:00:08,670 --> 00:00:24,359
in the known universe it's actually it

00:00:20,820 --> 00:00:27,900
was complicated I don't know it's

00:00:24,359 --> 00:00:31,109
complicated it is not it's just that we

00:00:27,900 --> 00:00:33,090
haven't solved the mystery of this

00:00:31,109 --> 00:00:34,980
complicated object known as the brain

00:00:33,090 --> 00:00:37,520
that's why you are calling it

00:00:34,980 --> 00:00:41,399
complicated but maybe soon enough as

00:00:37,520 --> 00:00:45,270
technologies grow people it even more

00:00:41,399 --> 00:00:49,500
better in understanding the Mystics

00:00:45,270 --> 00:00:54,000
behind the brain maybe things might

00:00:49,500 --> 00:00:57,590
change so what will be covered do to

00:00:54,000 --> 00:01:03,000
stop so we will be covering what is nigh

00:00:57,590 --> 00:01:07,740
5v5 sorry what is Nephi the overview for

00:01:03,000 --> 00:01:14,220
our workflows for our the packages in e

00:01:07,740 --> 00:01:17,310
pipe what are the other dependencies

00:01:14,220 --> 00:01:19,890
required for me pipe and other things

00:01:17,310 --> 00:01:22,229
like toast and how do we create the

00:01:19,890 --> 00:01:27,689
visible so we'll be looking a bit on the

00:01:22,229 --> 00:01:32,549
poor as how do we work on me by so it's

00:01:27,689 --> 00:01:35,759
one so this is the basic process and

00:01:32,549 --> 00:01:39,119
upper level through and do everything we

00:01:35,759 --> 00:01:45,149
first have a I haven't mentioned it in

00:01:39,119 --> 00:01:48,030
the start but we have a MRI image any

00:01:45,149 --> 00:01:51,240
kind of MRI image will do it's an open

00:01:48,030 --> 00:01:55,829
MRI functional MRI it could be an easy

00:01:51,240 --> 00:01:59,100
with eng image whatever so we start with

00:01:55,829 --> 00:02:01,560
an image if we try to guess what kind of

00:01:59,100 --> 00:02:03,659
parameters are we working on how are we

00:02:01,560 --> 00:02:05,760
working on something which is related to

00:02:03,659 --> 00:02:08,070
autism are we work

00:02:05,760 --> 00:02:12,410
something which is related related to LS

00:02:08,070 --> 00:02:15,960
or availability of onion working on a

00:02:12,410 --> 00:02:18,780
disease or are we working on certain

00:02:15,960 --> 00:02:24,300
connect Oak I will explain what

00:02:18,780 --> 00:02:27,090
connectome is a bit later on so after

00:02:24,300 --> 00:02:30,240
guessing the parameters we later on

00:02:27,090 --> 00:02:32,700
collect images for processing so

00:02:30,240 --> 00:02:36,320
basically we aggregate all the images

00:02:32,700 --> 00:02:40,170
that we want to work on and then later

00:02:36,320 --> 00:02:42,390
we collect them and process them

00:02:40,170 --> 00:02:44,790
together so if you have collected the

00:02:42,390 --> 00:02:48,290
images together then we specify the

00:02:44,790 --> 00:02:52,980
goals ok so I have the images i have my

00:02:48,290 --> 00:02:56,370
parameters what do i need to do next do

00:02:52,980 --> 00:02:59,640
i need to process it do i need to color

00:02:56,370 --> 00:03:04,160
image it or do i need to specify which

00:02:59,640 --> 00:03:10,200
connect tombs are connected to which or

00:03:04,160 --> 00:03:11,940
doing what do it could be many goals or

00:03:10,200 --> 00:03:17,810
it could be a single food anything can

00:03:11,940 --> 00:03:20,700
happen once we specify how amazing goals

00:03:17,810 --> 00:03:25,910
we create some new parameters for our

00:03:20,700 --> 00:03:25,910
poles once we specify the goal

00:03:56,630 --> 00:04:10,020
can you see the text right now all right

00:04:03,150 --> 00:04:12,540
so yeah imaging goals so once we specify

00:04:10,020 --> 00:04:15,450
our imaging pools we want to creating

00:04:12,540 --> 00:04:18,570
some new parameters so what we mean by

00:04:15,450 --> 00:04:22,290
that is ok once okay we have our bonus

00:04:18,570 --> 00:04:26,010
ok we have to create a new connectome

00:04:22,290 --> 00:04:30,450
for abba for autism patients you have to

00:04:26,010 --> 00:04:33,150
create a imaging pipeline over ever so

00:04:30,450 --> 00:04:36,600
we move keep on creating parameters

00:04:33,150 --> 00:04:40,860
until and unless ok we get our final

00:04:36,600 --> 00:04:51,450
output so this is the basic process

00:04:40,860 --> 00:04:54,990
behind the neuroimaging so when we do

00:04:51,450 --> 00:04:58,350
neuroimaging the dilemma with the neuro

00:04:54,990 --> 00:05:01,260
scientists always happens in too many

00:04:58,350 --> 00:05:04,800
choices if too many choices to choose

00:05:01,260 --> 00:05:11,130
from as you can see we have a FN I unit

00:05:04,800 --> 00:05:17,010
f SL here and all of these two separate

00:05:11,130 --> 00:05:23,670
jobs of their own like SPM works on

00:05:17,010 --> 00:05:28,980
functional MRI images the EF and I works

00:05:23,670 --> 00:05:34,380
normally on EEG and other images which

00:05:28,980 --> 00:05:36,570
are taken through the I so we have too

00:05:34,380 --> 00:05:39,300
many options that's the case with

00:05:36,570 --> 00:05:44,240
happens with the neuro scientist or

00:05:39,300 --> 00:05:44,240
neuro informations for that matter and

00:05:44,810 --> 00:05:53,700
another problem which scientists case

00:05:49,500 --> 00:05:57,210
right now is when detectives are

00:05:53,700 --> 00:06:00,960
increasing and we get a lot more data to

00:05:57,210 --> 00:06:05,520
compute so how do we process them how do

00:06:00,960 --> 00:06:06,360
we how do we make it in a format that ok

00:06:05,520 --> 00:06:08,789
the final new

00:06:06,360 --> 00:06:10,590
scientists will understand that he

00:06:08,789 --> 00:06:13,319
doesn't have to you know look look

00:06:10,590 --> 00:06:17,009
through the look through the blinds you

00:06:13,319 --> 00:06:21,750
see what is needed and you can see the

00:06:17,009 --> 00:06:23,340
final point which emphasizes the heading

00:06:21,750 --> 00:06:25,169
with this big data computing the

00:06:23,340 --> 00:06:29,870
thousand functionally correct own

00:06:25,169 --> 00:06:33,590
project so as I mentioned connectome

00:06:29,870 --> 00:06:40,460
before I'll explain it right now

00:06:33,590 --> 00:06:45,449
connectomes are basically you ronal

00:06:40,460 --> 00:06:49,259
parts which connect from one neuron to

00:06:45,449 --> 00:06:51,240
another so basically what you do is you

00:06:49,259 --> 00:06:54,750
connect one you want you for their

00:06:51,240 --> 00:06:56,729
connections in a computer format which a

00:06:54,750 --> 00:07:02,129
programmer or a neuroscientist will

00:06:56,729 --> 00:07:07,229
understand so this functional connectome

00:07:02,129 --> 00:07:10,529
project is basically a pet project by

00:07:07,229 --> 00:07:18,539
one of my mentors and if you working

00:07:10,529 --> 00:07:21,180
order so this is the data from a grenade

00:07:18,539 --> 00:07:24,240
from one of the papers which was

00:07:21,180 --> 00:07:27,990
presented by Raymond thought this

00:07:24,240 --> 00:07:31,169
project started in december 2009 and

00:07:27,990 --> 00:07:34,379
since then there has been an explosion

00:07:31,169 --> 00:07:36,810
in the axis of the data as well as

00:07:34,379 --> 00:07:39,779
sharing of the data like a lot more

00:07:36,810 --> 00:07:42,509
neuroscientist in your limitations are

00:07:39,779 --> 00:07:50,400
taking in the data sharing the data with

00:07:42,509 --> 00:07:55,580
each other and accessing them working on

00:07:50,400 --> 00:07:58,759
them and running them in their own ways

00:07:55,580 --> 00:08:01,430
so as you can see the graph it's eddie

00:07:58,759 --> 00:08:05,669
increasing a peep at around the silver

00:08:01,430 --> 00:08:06,540
2011 which is when our protein result

00:08:05,669 --> 00:08:10,650
came in

00:08:06,540 --> 00:08:15,450
GSG and then it went down again at the

00:08:10,650 --> 00:08:20,190
end of ember 2012 when Abe I'd which is

00:08:15,450 --> 00:08:22,950
a connectome framework for autism

00:08:20,190 --> 00:08:26,730
patients I cannot remember the full form

00:08:22,950 --> 00:08:28,650
but it's for autism patients like the

00:08:26,730 --> 00:08:32,160
project is basically you have

00:08:28,650 --> 00:08:35,370
connectomes which is scanned from the

00:08:32,160 --> 00:08:38,430
autism patients only and it is later

00:08:35,370 --> 00:08:40,680
aggregated and stored inside the FCP I

00:08:38,430 --> 00:08:46,650
and di which is the functional

00:08:40,680 --> 00:08:49,740
connectome project so this leads to

00:08:46,650 --> 00:08:53,400
conflict between the neuro scientists

00:08:49,740 --> 00:08:56,250
and developer neuroscientist things okay

00:08:53,400 --> 00:08:58,830
which package should i use because

00:08:56,250 --> 00:09:01,980
obviously he is not a programmer not a

00:08:58,830 --> 00:09:04,680
full-fledged one at least which package

00:09:01,980 --> 00:09:06,900
should i use how do i use this package

00:09:04,680 --> 00:09:10,530
and why do i why do i need to use the

00:09:06,900 --> 00:09:13,620
package why do i use syfy why do i use

00:09:10,530 --> 00:09:16,530
numpy what the what use will will it

00:09:13,620 --> 00:09:19,290
have in my what what impact will of

00:09:16,530 --> 00:09:22,560
allah travel in my project as for the

00:09:19,290 --> 00:09:24,630
developer part developer will think why

00:09:22,560 --> 00:09:26,700
will I develop my prior project for a

00:09:24,630 --> 00:09:29,460
neuroscientist when I can easily make

00:09:26,700 --> 00:09:32,220
something else something else for let us

00:09:29,460 --> 00:09:35,700
say some corporate developer let us say

00:09:32,220 --> 00:09:37,680
as a freelance may be or how when he

00:09:35,700 --> 00:09:41,040
creates one let us say for a

00:09:37,680 --> 00:09:44,400
neuroscientist how do I share it how do

00:09:41,040 --> 00:09:46,470
I you know upload it online for other

00:09:44,400 --> 00:09:51,710
neuro scientists or other developers to

00:09:46,470 --> 00:09:53,700
use and the final point which is

00:09:51,710 --> 00:09:56,610
creating a package which can support

00:09:53,700 --> 00:09:58,380
multiple computer architectures as we

00:09:56,610 --> 00:10:00,210
all know there are multiple computer

00:09:58,380 --> 00:10:05,100
architecture starting from the low-level

00:10:00,210 --> 00:10:07,500
pcs to bigger supercomputers and as data

00:10:05,100 --> 00:10:09,300
keeps on increasing as processing power

00:10:07,500 --> 00:10:11,670
keeps on increasing we need to create

00:10:09,300 --> 00:10:17,600
packages which can support all the

00:10:11,670 --> 00:10:20,230
architectures uniformly so going on this

00:10:17,600 --> 00:10:25,120
creates the massive conflict among

00:10:20,230 --> 00:10:26,890
the both breeds so we have more

00:10:25,120 --> 00:10:29,530
questions like these like how do we

00:10:26,890 --> 00:10:32,080
train people in using these packages

00:10:29,530 --> 00:10:34,330
these software's how do we train the

00:10:32,080 --> 00:10:37,150
neuro scientist and how do we train the

00:10:34,330 --> 00:10:41,110
new developers who want to work on a

00:10:37,150 --> 00:10:45,420
neuroimaging neurosciences or how do we

00:10:41,110 --> 00:10:47,380
create new tools for research and

00:10:45,420 --> 00:10:50,380
performing research which could be

00:10:47,380 --> 00:10:55,680
reproducible by others reproducible out

00:10:50,380 --> 00:11:00,240
here is a very key point because your

00:10:55,680 --> 00:11:02,560
data or your research whatever data you

00:11:00,240 --> 00:11:05,440
got after your research and you

00:11:02,560 --> 00:11:10,470
inferences you made if another scientist

00:11:05,440 --> 00:11:14,050
thinks okay let me reduce these

00:11:10,470 --> 00:11:16,930
experiments let me take the data let me

00:11:14,050 --> 00:11:19,000
reproduce the experiments it should

00:11:16,930 --> 00:11:24,460
produce the same inference the same

00:11:19,000 --> 00:11:30,840
output no matter whatever happens it

00:11:24,460 --> 00:11:34,900
should produce the same same inference

00:11:30,840 --> 00:11:39,750
wherever whoever kind of scientists

00:11:34,900 --> 00:11:44,050
finally reproduces the kind of

00:11:39,750 --> 00:11:46,570
conditions the research is being done on

00:11:44,050 --> 00:11:48,940
and how to work with different packages

00:11:46,570 --> 00:11:56,290
interfaces file formats as we mentioned

00:11:48,940 --> 00:11:57,970
in our this brain imaging software as we

00:11:56,290 --> 00:12:01,240
all know these software's are all

00:11:57,970 --> 00:12:03,970
different so obviously they all store

00:12:01,240 --> 00:12:06,400
data in different format they all have

00:12:03,970 --> 00:12:10,950
their entire interface differently to

00:12:06,400 --> 00:12:15,370
work on so when you work on something

00:12:10,950 --> 00:12:17,470
which is different which has different

00:12:15,370 --> 00:12:20,680
packages which has different interface

00:12:17,470 --> 00:12:23,800
so how do we link them together how do

00:12:20,680 --> 00:12:25,300
we work on them together so as to you

00:12:23,800 --> 00:12:31,270
know like it doesn't create a conflict

00:12:25,300 --> 00:12:33,939
in in the program itself so this is one

00:12:31,270 --> 00:12:36,549
of the questions which was

00:12:33,939 --> 00:12:41,559
faced by most of the neuro neuro

00:12:36,549 --> 00:12:51,279
scientists as a part of as a part of

00:12:41,559 --> 00:12:57,039
this project so nigh pipe comes into the

00:12:51,279 --> 00:13:01,479
picture in this case so why it helps in

00:12:57,039 --> 00:13:05,609
this case because it brings together all

00:13:01,479 --> 00:13:11,049
the imaging and the pipelining softwares

00:13:05,609 --> 00:13:13,779
together under a single wrapper so like

00:13:11,049 --> 00:13:16,449
you do not have to you know like I have

00:13:13,779 --> 00:13:20,169
to work on SPM separately or FSL

00:13:16,449 --> 00:13:22,299
separately or AFN I separately and you

00:13:20,169 --> 00:13:23,859
know like you have conflicts when you

00:13:22,299 --> 00:13:26,409
are linking them together in a single

00:13:23,859 --> 00:13:28,269
program because the format's of these

00:13:26,409 --> 00:13:31,839
three programs are different altogether

00:13:28,269 --> 00:13:34,509
or you're when you're working on NYE pie

00:13:31,839 --> 00:13:40,839
is it's another package which my pipe

00:13:34,509 --> 00:13:43,479
comes under so all of this packages they

00:13:40,839 --> 00:13:49,269
are linked together under this name me

00:13:43,479 --> 00:13:53,229
pipe so now the question comes why use

00:13:49,269 --> 00:13:56,739
Python because obviously people can make

00:13:53,229 --> 00:14:00,099
a package like this in C++ or maybe in

00:13:56,739 --> 00:14:03,369
another other languages so one answer

00:14:00,099 --> 00:14:07,029
was it was very easy to learn because

00:14:03,369 --> 00:14:10,089
it's being taught in schools right now

00:14:07,029 --> 00:14:12,519
and all over the world I do not know

00:14:10,089 --> 00:14:14,589
about India but in all over the world

00:14:12,519 --> 00:14:17,679
you are being taught by thin as one of

00:14:14,589 --> 00:14:20,979
the primary language in schools in

00:14:17,679 --> 00:14:24,629
colleges high schools and it's

00:14:20,979 --> 00:14:29,589
cross-platform self-explanatory because

00:14:24,629 --> 00:14:32,199
it explains why you can run the same

00:14:29,589 --> 00:14:36,970
power same Python script in Windows and

00:14:32,199 --> 00:14:40,409
if you send it through linux it will run

00:14:36,970 --> 00:14:43,029
the same no matter what the case is our

00:14:40,409 --> 00:14:46,509
whatever your version of a operating

00:14:43,029 --> 00:14:47,560
system is it will run the same extensive

00:14:46,509 --> 00:14:50,860
infrastructure first

00:14:47,560 --> 00:14:54,420
computing it supports all kind of

00:14:50,860 --> 00:15:01,510
infrastructures v8 your small laptops

00:14:54,420 --> 00:15:04,660
pcs or v8 super computers it supports

00:15:01,510 --> 00:15:08,260
all more institutions are adopting it as

00:15:04,660 --> 00:15:11,500
part of the development the institution

00:15:08,260 --> 00:15:13,200
which I am working under which is I ncf

00:15:11,500 --> 00:15:17,140
international neuroinformatics

00:15:13,200 --> 00:15:20,110
coordinating facility is one of the

00:15:17,140 --> 00:15:22,420
organizations which uses Python for all

00:15:20,110 --> 00:15:25,210
of its work except there are some

00:15:22,420 --> 00:15:28,060
projects which are made under C++ but

00:15:25,210 --> 00:15:30,510
most of the time it's mostly done under

00:15:28,060 --> 00:15:32,710
pipe thin and there are other

00:15:30,510 --> 00:15:36,100
organizations like Nathan Perkins

00:15:32,710 --> 00:15:38,440
Institute then we have old rack lab

00:15:36,100 --> 00:15:41,110
which I am currently working under it's

00:15:38,440 --> 00:15:44,020
a Stanford it is a lab which is

00:15:41,110 --> 00:15:52,600
currently under Stanford University all

00:15:44,020 --> 00:15:57,490
of these labs and labs and the

00:15:52,600 --> 00:16:01,060
organizations run you make use of Python

00:15:57,490 --> 00:16:04,950
for all of the projects conduct data

00:16:01,060 --> 00:16:08,800
analysis using our path in octave /i lab

00:16:04,950 --> 00:16:12,790
so basically what this means is you can

00:16:08,800 --> 00:16:15,010
link you can import your package octave

00:16:12,790 --> 00:16:16,870
package you can import our faith in you

00:16:15,010 --> 00:16:19,870
can you import Scilab you can import

00:16:16,870 --> 00:16:24,550
MATLAB or whatever you need for your

00:16:19,870 --> 00:16:30,010
project and after you are done with your

00:16:24,550 --> 00:16:32,830
project in neuroimaging you can then you

00:16:30,010 --> 00:16:37,510
can then do data analysis on it to

00:16:32,830 --> 00:16:40,000
filter certain results then modify those

00:16:37,510 --> 00:16:42,130
results and make them present table for

00:16:40,000 --> 00:16:44,740
the neuro in formatted Nero scientists

00:16:42,130 --> 00:16:47,440
and neuro in fomentations which is my

00:16:44,740 --> 00:16:49,600
next point easily under so which let go

00:16:47,440 --> 00:16:54,690
easily understandable by neuro

00:16:49,600 --> 00:16:58,440
scientists the thing with this point is

00:16:54,690 --> 00:16:59,750
since python is a scripting language and

00:16:58,440 --> 00:17:03,450
it's

00:16:59,750 --> 00:17:08,640
it is one of the easiest to understand

00:17:03,450 --> 00:17:11,970
so even you give you given your student

00:17:08,640 --> 00:17:14,160
to learn okay start the reading some

00:17:11,970 --> 00:17:16,650
commands and Python within one or two

00:17:14,160 --> 00:17:19,050
days you will start to understand okay

00:17:16,650 --> 00:17:22,380
this is how Python works this is how

00:17:19,050 --> 00:17:25,290
Python runs so once within one or two

00:17:22,380 --> 00:17:28,260
days if he learns a bit about Python he

00:17:25,290 --> 00:17:30,300
can understand what what what are these

00:17:28,260 --> 00:17:36,300
functions about what is this class about

00:17:30,300 --> 00:17:38,460
how are these running together so next

00:17:36,300 --> 00:17:40,400
point is neuroscientist can create their

00:17:38,460 --> 00:17:43,260
own packages easily according to their

00:17:40,400 --> 00:17:45,630
requirements so basically what this

00:17:43,260 --> 00:17:48,300
means is since this is linked to my

00:17:45,630 --> 00:17:51,630
first point which is easy to learn since

00:17:48,300 --> 00:17:55,530
it's easy to learn you can create

00:17:51,630 --> 00:17:59,340
program your own packages for your own

00:17:55,530 --> 00:18:02,250
requirements like if I want to make a

00:17:59,340 --> 00:18:06,030
package which runs all the pipeline's in

00:18:02,250 --> 00:18:07,920
a parallel computing architecture neuro

00:18:06,030 --> 00:18:10,200
scientists can easily create one of

00:18:07,920 --> 00:18:13,740
those or if I want to create a package

00:18:10,200 --> 00:18:18,330
which links to matlab and then make then

00:18:13,740 --> 00:18:21,780
mass the filter filters the filters the

00:18:18,330 --> 00:18:28,500
whole image and improves the quality of

00:18:21,780 --> 00:18:30,450
the image it can be done easily so that

00:18:28,500 --> 00:18:36,600
brings to the next slide what is nigh

00:18:30,450 --> 00:18:42,330
pipe so this is the basic architecture

00:18:36,600 --> 00:18:45,450
of nipe it consists of three parts out

00:18:42,330 --> 00:18:50,010
here interfaces execution plugins and

00:18:45,450 --> 00:18:54,560
the workflow engine so our next slides

00:18:50,010 --> 00:19:01,670
will bring us to explaining all of these

00:18:54,560 --> 00:19:07,320
so the first slide is engine so we have

00:19:01,670 --> 00:19:12,990
three parts actually two I'm sorry two

00:19:07,320 --> 00:19:13,500
parts in this in this slide first of all

00:19:12,990 --> 00:19:17,610
is the

00:19:13,500 --> 00:19:21,440
node basically what a node does is you

00:19:17,610 --> 00:19:25,290
have a function it is wrapped inside and

00:19:21,440 --> 00:19:29,660
you can link it to other nodes together

00:19:25,290 --> 00:19:34,170
to run a whole program so it is

00:19:29,660 --> 00:19:37,290
basically what i am saying is about the

00:19:34,170 --> 00:19:39,480
workflow like you have 11 function you

00:19:37,290 --> 00:19:41,370
have another function you wrap them

00:19:39,480 --> 00:19:44,730
together in a node you link them

00:19:41,370 --> 00:19:47,220
together that is one workflow and then a

00:19:44,730 --> 00:19:49,590
workflow is it is a graph whose nodes

00:19:47,220 --> 00:19:52,410
are of type node map node as I explained

00:19:49,590 --> 00:19:54,720
to you you you have two nodes you link

00:19:52,410 --> 00:19:56,640
them together and then you create a

00:19:54,720 --> 00:19:59,220
workflow as it is you can have multiple

00:19:56,640 --> 00:20:03,690
nodes linked together you can have a

00:19:59,220 --> 00:20:07,080
MATLAB script link with the spuyten

00:20:03,690 --> 00:20:11,090
script or you can have an spm program

00:20:07,080 --> 00:20:14,540
link to python script whatever the case

00:20:11,090 --> 00:20:20,270
work you can do all the things in a

00:20:14,540 --> 00:20:27,560
workflow then we have executable plugins

00:20:20,270 --> 00:20:32,490
so basically this is all the packages

00:20:27,560 --> 00:20:35,610
softwares which we require to run the

00:20:32,490 --> 00:20:38,180
program at our convenience so basically

00:20:35,610 --> 00:20:42,540
as you can see right here it's torque I

00:20:38,180 --> 00:20:45,890
pathan linear SSH all of these plugins

00:20:42,540 --> 00:20:48,570
which we require to run our program is

00:20:45,890 --> 00:20:52,290
executable plug comes under executable

00:20:48,570 --> 00:20:55,590
plugins we require ipython so that we

00:20:52,290 --> 00:20:59,520
can share our whatever program we are

00:20:55,590 --> 00:21:04,320
written through a python notebook we

00:20:59,520 --> 00:21:09,900
require a linear to share our share make

00:21:04,320 --> 00:21:14,910
new new pipelines new workflows multi

00:21:09,900 --> 00:21:18,480
proc to run a a single script in a

00:21:14,910 --> 00:21:21,450
multiple process multiple threads ssh to

00:21:18,480 --> 00:21:23,580
link to computers and then we have many

00:21:21,450 --> 00:21:26,790
other packages like these which come

00:21:23,580 --> 00:21:30,600
under executable Paul our plugins

00:21:26,790 --> 00:21:37,960
so then we come with installation of

00:21:30,600 --> 00:21:40,240
knipe so it is readily available as one

00:21:37,960 --> 00:21:44,530
of the packages in neuro debian which is

00:21:40,240 --> 00:21:49,020
made by again I ncf Python package index

00:21:44,530 --> 00:21:54,070
or you can just focus from github and

00:21:49,020 --> 00:21:59,440
run your own deployment currently it's I

00:21:54,070 --> 00:22:03,940
think the version of 95 is 0.11 i am not

00:21:59,440 --> 00:22:08,890
sure i think it's 0.11 so basically we

00:22:03,940 --> 00:22:11,680
require all these dependencies before we

00:22:08,890 --> 00:22:17,890
install nigh pipe in our pas in our

00:22:11,680 --> 00:22:21,610
computer numpy syfy ipython nibib ni

00:22:17,890 --> 00:22:24,130
bubble i think i forgot to add one more

00:22:21,610 --> 00:22:32,500
there is a package called network x i

00:22:24,130 --> 00:22:36,630
forgot to add that one ok so after you

00:22:32,500 --> 00:22:41,080
install all of these packages and you

00:22:36,630 --> 00:22:43,360
you are done with it you have to ensure

00:22:41,080 --> 00:22:47,170
that all tools are installed and

00:22:43,360 --> 00:22:49,090
accessible this basically means that you

00:22:47,170 --> 00:22:51,820
have to check the version of whatever

00:22:49,090 --> 00:22:56,020
tools you have installed what are the

00:22:51,820 --> 00:23:00,220
versions where are they stored the exact

00:22:56,020 --> 00:23:02,710
path of the installation installation

00:23:00,220 --> 00:23:04,780
path so that you can link it later on to

00:23:02,710 --> 00:23:07,660
your script and you have to ensure that

00:23:04,780 --> 00:23:09,340
ok once you have linked these scripts

00:23:07,660 --> 00:23:11,620
together once you have linked these

00:23:09,340 --> 00:23:15,190
installation path together it should not

00:23:11,620 --> 00:23:18,070
happen that ok I write my path ends in

00:23:15,190 --> 00:23:20,470
the program or a scrip and it happens

00:23:18,070 --> 00:23:24,490
that it cannot access it it should not

00:23:20,470 --> 00:23:29,110
happen and one point to be mentioned it

00:23:24,490 --> 00:23:31,420
is very important nie pipe is an

00:23:29,110 --> 00:23:32,950
umbrella project under knife I and it is

00:23:31,420 --> 00:23:37,770
not a substitute for the imaging

00:23:32,950 --> 00:23:37,770
packages like ants FSL or a FN I

00:23:38,580 --> 00:23:44,200
basically what this

00:23:40,240 --> 00:23:49,059
means is it's a sub-project under knife

00:23:44,200 --> 00:23:52,929
I and in no means it is not meant to be

00:23:49,059 --> 00:23:56,440
substituted by a package like ants or

00:23:52,929 --> 00:24:03,010
FSL you still need those packages to run

00:23:56,440 --> 00:24:09,910
your tool or your script and one should

00:24:03,010 --> 00:24:12,190
not use should think that okay so

00:24:09,910 --> 00:24:15,940
basically these are some of the

00:24:12,190 --> 00:24:18,460
software's which are used in knipe one

00:24:15,940 --> 00:24:20,440
of them is free camino it's one of the

00:24:18,460 --> 00:24:25,120
software's which is used for diffusion

00:24:20,440 --> 00:24:28,390
MRI and I learn it's a package which is

00:24:25,120 --> 00:24:31,179
made by Gail Warwick wha who is again

00:24:28,390 --> 00:24:36,120
one of my mentors it is a machine

00:24:31,179 --> 00:24:40,330
learning package for neuroimaging and

00:24:36,120 --> 00:24:44,170
spm for recording the brain activity for

00:24:40,330 --> 00:24:47,860
your experiments then we have mm any for

00:24:44,170 --> 00:24:53,230
magneto in salou silagra fee and electro

00:24:47,860 --> 00:24:56,530
and silagra fee so and then we have a FN

00:24:53,230 --> 00:25:00,160
I which is for processing functional MRI

00:24:56,530 --> 00:25:02,710
images and analyzing them these are just

00:25:00,160 --> 00:25:07,270
some of the few packages we have more

00:25:02,710 --> 00:25:10,870
and not all of these all of the tools

00:25:07,270 --> 00:25:14,440
which are boozing softwares in which are

00:25:10,870 --> 00:25:17,650
there in knee pipe are not necessarily

00:25:14,440 --> 00:25:20,770
updated they are some of them are

00:25:17,650 --> 00:25:25,450
deprecated even so developers keep

00:25:20,770 --> 00:25:28,660
working on that even now so now we move

00:25:25,450 --> 00:25:31,800
on to some of the codes for working with

00:25:28,660 --> 00:25:37,630
nanny pipe so we will take an example

00:25:31,800 --> 00:25:40,450
for new pipe so our example is basically

00:25:37,630 --> 00:25:45,130
we are taking an mi a functional MRI

00:25:40,450 --> 00:25:47,440
scan for of it could be anyone it could

00:25:45,130 --> 00:25:49,660
be a monkey it could be a human it could

00:25:47,440 --> 00:25:54,200
be a walks all rat it could be any

00:25:49,660 --> 00:25:57,440
species and then we realign the

00:25:54,200 --> 00:25:59,780
scan basically this means is okay if we

00:25:57,440 --> 00:26:03,170
have an MRI scan there must there will

00:25:59,780 --> 00:26:06,860
obviously be some kind of head bobbing

00:26:03,170 --> 00:26:08,740
you know when there is a MRI scan there

00:26:06,860 --> 00:26:12,190
will be head bobbing there will be

00:26:08,740 --> 00:26:16,130
shaking in the equipment so we basically

00:26:12,190 --> 00:26:19,880
realign the MRI scan to make those

00:26:16,130 --> 00:26:22,550
Corrections or registration basically

00:26:19,880 --> 00:26:27,350
what this means is we have our MRI scan

00:26:22,550 --> 00:26:29,840
we link it to our anatomical scan the

00:26:27,350 --> 00:26:33,710
basic anatomical scan which is available

00:26:29,840 --> 00:26:38,110
online anywhere normalization to fit the

00:26:33,710 --> 00:26:43,810
brain images since size of each organism

00:26:38,110 --> 00:26:48,020
brain is different vauxhall rat human

00:26:43,810 --> 00:26:50,330
monkey macaque whatever our organism you

00:26:48,020 --> 00:26:53,720
pick up their brain sizes are different

00:26:50,330 --> 00:26:59,420
so we have to fit the fMRI images the

00:26:53,720 --> 00:27:02,210
output of the co-registration to so that

00:26:59,420 --> 00:27:05,750
it fits according to that size and then

00:27:02,210 --> 00:27:09,080
seeding to improve the final quality so

00:27:05,750 --> 00:27:14,240
we basically just filter color filter in

00:27:09,080 --> 00:27:19,130
the process of seeding so the first step

00:27:14,240 --> 00:27:21,020
to every night program is basically we

00:27:19,130 --> 00:27:24,650
first create a workflow of what we want

00:27:21,020 --> 00:27:27,740
to do so workflow is a pipeline to

00:27:24,650 --> 00:27:30,260
process data a directed acyclic graph

00:27:27,740 --> 00:27:33,500
which represents dataflow nodes are

00:27:30,260 --> 00:27:36,290
processes or functions edges so the flow

00:27:33,500 --> 00:27:39,440
of data defining the input and output of

00:27:36,290 --> 00:27:44,420
processing node is a must so basically

00:27:39,440 --> 00:27:48,140
what we mean by saying this is we define

00:27:44,420 --> 00:27:51,550
an input we define an output the lines

00:27:48,140 --> 00:27:54,680
in between define okay this and this

00:27:51,550 --> 00:27:58,340
processes and functions are linked

00:27:54,680 --> 00:28:02,660
together finally and they are directed

00:27:58,340 --> 00:28:07,630
together with a in a sia in an acyclic

00:28:02,660 --> 00:28:10,430
graph sorry so

00:28:07,630 --> 00:28:14,810
actually I made this kind of like a

00:28:10,430 --> 00:28:17,180
flowchart because the acyclic the graph

00:28:14,810 --> 00:28:20,330
wasn't coming properly I am sorry for

00:28:17,180 --> 00:28:24,410
that so I will explain you what the

00:28:20,330 --> 00:28:28,040
start and end over here means the start

00:28:24,410 --> 00:28:29,930
over here is the fri fMRI scan which we

00:28:28,040 --> 00:28:34,520
have in question it could be any

00:28:29,930 --> 00:28:37,910
organism once again so then we realign

00:28:34,520 --> 00:28:40,330
so then we realign the tar we are

00:28:37,910 --> 00:28:43,660
realign it along according to the target

00:28:40,330 --> 00:28:48,190
target image the co registered to an

00:28:43,660 --> 00:28:50,900
anatomical scans smoothen it filter it

00:28:48,190 --> 00:28:54,860
normalize it according to the brain

00:28:50,900 --> 00:28:59,470
brain image seed the final image and

00:28:54,860 --> 00:29:03,260
then we get the output the final output

00:28:59,470 --> 00:29:07,520
so this will be a first time a first

00:29:03,260 --> 00:29:09,650
level fMRI analysis so we first import

00:29:07,520 --> 00:29:13,190
the necessary modules which we require

00:29:09,650 --> 00:29:17,090
for our program as you can see it's a

00:29:13,190 --> 00:29:21,080
lot of import statements out here as you

00:29:17,090 --> 00:29:24,260
can see in the second line right here in

00:29:21,080 --> 00:29:26,000
not in two phases dot AFN I import

00:29:24,260 --> 00:29:29,780
despite these Pike is one of the

00:29:26,000 --> 00:29:32,470
packages which is required to remove all

00:29:29,780 --> 00:29:36,440
those pipes within your fMRI images

00:29:32,470 --> 00:29:39,380
freesurfer to convert your MRI image by

00:29:36,440 --> 00:29:41,450
make it in a binary format applying

00:29:39,380 --> 00:29:45,770
volume transformations making a volume

00:29:41,450 --> 00:29:50,210
to volume matrix and so on we have a lot

00:29:45,770 --> 00:29:53,060
of and then we have the final final

00:29:50,210 --> 00:29:55,700
import statement now five dot pipeline

00:29:53,060 --> 00:29:58,490
dot engine import workflow node map node

00:29:55,700 --> 00:30:01,390
so basically this enables us to create

00:29:58,490 --> 00:30:05,090
our own workflow create our own nodes

00:30:01,390 --> 00:30:09,910
create make a link between the two two

00:30:05,090 --> 00:30:14,410
nodes and mapping them together next and

00:30:09,910 --> 00:30:19,220
then we basically our next step is to

00:30:14,410 --> 00:30:20,630
import some of the statements and script

00:30:19,220 --> 00:30:27,460
locations

00:30:20,630 --> 00:30:30,200
for mac lab and freesurfer so we import

00:30:27,460 --> 00:30:33,260
the necessary package which is matlab

00:30:30,200 --> 00:30:37,850
command and after that we set a default

00:30:33,260 --> 00:30:41,350
path in this case it's spm 12 and then

00:30:37,850 --> 00:30:43,790
we give the necessary options to the

00:30:41,350 --> 00:30:49,040
computer that okay we require this

00:30:43,790 --> 00:30:52,310
option and we have the location for a

00:30:49,040 --> 00:30:55,070
free surfer program in this case at

00:30:52,310 --> 00:30:58,520
sniper / 95 tutorial as priests offer

00:30:55,070 --> 00:31:03,860
and we said that to our default FS

00:30:58,520 --> 00:31:05,870
command command function and then we

00:31:03,860 --> 00:31:08,630
define all the parameters which you

00:31:05,870 --> 00:31:11,120
require in this case our output

00:31:08,630 --> 00:31:13,610
directory will go to this working

00:31:11,120 --> 00:31:19,010
directory is present over here we have

00:31:13,610 --> 00:31:22,310
our fMRI slices should be 40 you can set

00:31:19,010 --> 00:31:25,280
it to 20 / 100 but as you increase the

00:31:22,310 --> 00:31:27,770
number of slices it's obvious that the

00:31:25,280 --> 00:31:30,620
computing process will increase the load

00:31:27,770 --> 00:31:33,770
on the computer will increase and then

00:31:30,620 --> 00:31:38,240
we have time repetition so time as we

00:31:33,770 --> 00:31:40,250
increase time repetition the there will

00:31:38,240 --> 00:31:43,940
be an increase in the computational load

00:31:40,250 --> 00:31:46,220
and the fwhm size so basically this

00:31:43,940 --> 00:31:53,870
tells the computer that this will be the

00:31:46,220 --> 00:31:59,090
size of mice of my final output okay so

00:31:53,870 --> 00:32:02,180
after this we create nodes so basically

00:31:59,090 --> 00:32:05,390
the as a third once again we create

00:32:02,180 --> 00:32:08,450
functions which is again processes for

00:32:05,390 --> 00:32:13,390
our free for the pre-processing of RF

00:32:08,450 --> 00:32:18,940
final for the input Emma fmri image so

00:32:13,390 --> 00:32:22,400
in this case we are first giving order

00:32:18,940 --> 00:32:29,540
order interleaved order basically this

00:32:22,400 --> 00:32:33,140
means to okay so we have a number of

00:32:29,540 --> 00:32:33,980
slices of our script we offer for sorry

00:32:33,140 --> 00:32:37,640
for

00:32:33,980 --> 00:32:40,809
MRI image you slice them and then you

00:32:37,640 --> 00:32:44,299
order them accordingly to whatever the

00:32:40,809 --> 00:32:47,740
area which is required like cingulate

00:32:44,299 --> 00:32:50,000
cortex could be one one of the areas

00:32:47,740 --> 00:32:53,740
neuronal cortex could be one area

00:32:50,000 --> 00:32:57,320
amygdala could be one area and then we

00:32:53,740 --> 00:33:01,010
apply slice timing second one is real

00:32:57,320 --> 00:33:04,000
line which is correcting for motion

00:33:01,010 --> 00:33:10,970
motion problems which happen during the

00:33:04,000 --> 00:33:15,410
MRI scanning process smoothing to smooth

00:33:10,970 --> 00:33:20,090
the curl images with a given colonel in

00:33:15,410 --> 00:33:22,100
the final in this one I actually put

00:33:20,090 --> 00:33:25,790
these two in comments because I will

00:33:22,100 --> 00:33:30,370
explain you later these these these

00:33:25,790 --> 00:33:35,900
things work differently accordingly so

00:33:30,370 --> 00:33:38,240
so smooth so we have so what we

00:33:35,900 --> 00:33:43,880
basically do in smoothing is we smooth

00:33:38,240 --> 00:33:46,850
our image for x by x and so on the last

00:33:43,880 --> 00:33:50,780
line as you can see right here so first

00:33:46,850 --> 00:33:53,890
underscore fwhm four comma 6 comma 8 it

00:33:50,780 --> 00:33:57,500
means that we have to run our sub graph

00:33:53,890 --> 00:34:00,620
several times okay we will run one fMRI

00:33:57,500 --> 00:34:04,160
image and filter it four times will run

00:34:00,620 --> 00:34:06,470
one fMRI mhm run at six times I will run

00:34:04,160 --> 00:34:11,270
it parallely or we can run it serially

00:34:06,470 --> 00:34:13,250
in three ways BB register go register or

00:34:11,270 --> 00:34:15,500
volume to the freesurfer anatomical

00:34:13,250 --> 00:34:19,060
surface basically this means we have an

00:34:15,500 --> 00:34:20,869
anatomical surface then we have our

00:34:19,060 --> 00:34:23,270
output image which we get from

00:34:20,869 --> 00:34:27,169
smoothening we register it to the

00:34:23,270 --> 00:34:32,540
anatomical surface and then finally we

00:34:27,169 --> 00:34:34,280
connect all of these nodes together we

00:34:32,540 --> 00:34:36,859
connect all of these node together in

00:34:34,280 --> 00:34:40,159
the final line which is normalized is

00:34:36,859 --> 00:34:43,190
equal to PE dot node interface SPM dot

00:34:40,159 --> 00:34:46,879
normalize so basically what we are doing

00:34:43,190 --> 00:34:49,579
right here is the VA

00:34:46,879 --> 00:34:54,500
have a package from engine called node

00:34:49,579 --> 00:34:57,049
and we connect this with a function

00:34:54,500 --> 00:35:06,890
called normalized and name it something

00:34:57,049 --> 00:35:10,849
called normalize so this is the

00:35:06,890 --> 00:35:14,900
connection connectivity of workflows so

00:35:10,849 --> 00:35:16,789
we first name our workflow it could be

00:35:14,900 --> 00:35:19,579
anything first level analysis second

00:35:16,789 --> 00:35:22,369
level analysis FSL analysis it could be

00:35:19,579 --> 00:35:26,990
anything then we connect these together

00:35:22,369 --> 00:35:29,240
we realign so you could put any number

00:35:26,990 --> 00:35:32,000
of parameters in workflow rod Knecht

00:35:29,240 --> 00:35:33,799
realigned bv register you can write it

00:35:32,000 --> 00:35:41,720
separately so that you do not want any

00:35:33,799 --> 00:35:44,029
conflicts in your functions then we have

00:35:41,720 --> 00:35:46,220
our next we start with the main

00:35:44,029 --> 00:35:50,720
processing which is the level one design

00:35:46,220 --> 00:35:54,859
analysis so basically this is all

00:35:50,720 --> 00:35:57,980
mathematical processing we we derive

00:35:54,859 --> 00:36:02,539
basically we have a matrix it derives

00:35:57,980 --> 00:36:12,319
based on that and conducts interests

00:36:02,539 --> 00:36:15,769
canning so we apply estimate contrast

00:36:12,319 --> 00:36:22,670
volume transformation converting MRI to

00:36:15,769 --> 00:36:26,329
of a zip file format okay so I guess

00:36:22,670 --> 00:36:29,180
this is it for more information you can

00:36:26,329 --> 00:36:31,640
look on all these resources which I

00:36:29,180 --> 00:36:35,210
aggregated together and as it is I would

00:36:31,640 --> 00:36:37,940
like to mention my special thanks to all

00:36:35,210 --> 00:36:46,100
of these professors whom some of them I

00:36:37,940 --> 00:36:50,730
work under thank you guys any questions

00:36:46,100 --> 00:36:53,369
questions hey I'm Kumar to them yeah I

00:36:50,730 --> 00:36:55,650
have question Python is they were meant

00:36:53,369 --> 00:36:57,990
for high processing and for speed and

00:36:55,650 --> 00:37:00,420
here you are talking about the real data

00:36:57,990 --> 00:37:03,450
like brain were monitoring and the

00:37:00,420 --> 00:37:06,260
neural transmitting so I want to know

00:37:03,450 --> 00:37:09,630
like how it is more accurate than fee or

00:37:06,260 --> 00:37:14,190
so I wonder it's I know it is not

00:37:09,630 --> 00:37:16,440
accurate but again as I said speed and

00:37:14,190 --> 00:37:19,560
accuracy come at a cost like you

00:37:16,440 --> 00:37:21,750
increase speed you decrease accuracy or

00:37:19,560 --> 00:37:25,920
you increase accuracy you decrease speed

00:37:21,750 --> 00:37:30,570
they come both come at a cost so this is

00:37:25,920 --> 00:37:32,670
the this is the sacrifice which some of

00:37:30,570 --> 00:37:36,780
my mentors or developers which have

00:37:32,670 --> 00:37:39,990
which they have to make for running for

00:37:36,780 --> 00:37:44,310
making me pipe so basically they had to

00:37:39,990 --> 00:37:46,380
you know like sacrifice the accuracy it

00:37:44,310 --> 00:37:49,770
will it is not accurate obviously

00:37:46,380 --> 00:37:52,260
because as it is we are using third

00:37:49,770 --> 00:37:54,930
party packages to we have matlab we are

00:37:52,260 --> 00:37:57,180
using matlab we are using FSL these are

00:37:54,930 --> 00:37:58,950
all of these are not updated matlab is

00:37:57,180 --> 00:38:01,619
updated I know but some of these

00:37:58,950 --> 00:38:04,230
packages like free Camino is there we

00:38:01,619 --> 00:38:06,300
have mne mne is there some of them are

00:38:04,230 --> 00:38:08,850
deprecated some of them are not updated

00:38:06,300 --> 00:38:12,300
periodically so there could be problems

00:38:08,850 --> 00:38:14,160
where you have a new image coming in frf

00:38:12,300 --> 00:38:17,369
MRI image coming in and you do not get

00:38:14,160 --> 00:38:19,950
the final output yeah so this happens

00:38:17,369 --> 00:38:23,490
normally so this is the sacrifice which

00:38:19,950 --> 00:38:27,119
they had to make but it has worked so

00:38:23,490 --> 00:38:29,160
far until now no problems no issues so

00:38:27,119 --> 00:38:32,580
what you guys are doing to make that

00:38:29,160 --> 00:38:35,970
improvement basically we are still

00:38:32,580 --> 00:38:38,640
working on that we are slowly removing

00:38:35,970 --> 00:38:41,790
the deprecated packages if possible

00:38:38,640 --> 00:38:44,130
other if there is if it is possible that

00:38:41,790 --> 00:38:47,430
if it's still useful even if it is

00:38:44,130 --> 00:38:49,530
deprecated we do not remove it but if it

00:38:47,430 --> 00:38:51,630
happens that ok it is useless I do not

00:38:49,530 --> 00:38:55,800
still want to use it we remove it

00:38:51,630 --> 00:38:58,250
instantly and we keep on updating the

00:38:55,800 --> 00:39:02,750
packages obviously and

00:38:58,250 --> 00:39:05,150
we still work as a third neuroscientist

00:39:02,750 --> 00:39:07,580
and euro in fermentation work on new

00:39:05,150 --> 00:39:11,140
packages which is aside from this

00:39:07,580 --> 00:39:14,210
project outside of this project domain

00:39:11,140 --> 00:39:17,660
like one of the projects i can mention

00:39:14,210 --> 00:39:20,600
you fancy pipe it is made by one of my

00:39:17,660 --> 00:39:25,850
mentors whom i am currently working

00:39:20,600 --> 00:39:29,660
under it is a package for running serial

00:39:25,850 --> 00:39:31,400
or parallel pipelines like you can you

00:39:29,660 --> 00:39:34,070
have a pipeline you can run it serially

00:39:31,400 --> 00:39:37,430
or you can run it parallel you so this

00:39:34,070 --> 00:39:42,560
is outside the domain of nipe so this is

00:39:37,430 --> 00:39:45,110
what we are doing currently thank you I

00:39:42,560 --> 00:39:46,910
expected this to be very difficult I do

00:39:45,110 --> 00:39:52,480
not I am surprised i am not seeing in

00:39:46,910 --> 00:39:55,940
question so I thank you guys for

00:39:52,480 --> 00:39:58,240
patiently listening to this talk thank

00:39:55,940 --> 00:39:58,240

YouTube URL: https://www.youtube.com/watch?v=dOWVKtZynas


