Title: Python Traceback For Humans! - PyCon India 2015
Publication date: 2015-10-12
Playlist: PyCon India 2015
Description: 
	Speaker: Anand Reddy Pandikunta

Details: https://in.pycon.org/cfp/pycon-india-2015/proposals/python-traceback-for-humans/
Captions: 
	00:00:00,000 --> 00:00:05,580
so the next stroke is Python traced back

00:00:02,939 --> 00:00:08,910
for humans and the speaker for today is

00:00:05,580 --> 00:00:12,210
uh none ready Wendy Kunta so about the

00:00:08,910 --> 00:00:14,730
speaker the speaker is a well-known

00:00:12,210 --> 00:00:17,340
Python developer and today's talk is

00:00:14,730 --> 00:00:20,539
focused for on Python trace back for

00:00:17,340 --> 00:00:26,279
humans I request an end to kindly

00:00:20,539 --> 00:00:28,529
initiate the session Hannah's here okay

00:00:26,279 --> 00:00:31,140
it might take for him two minutes so

00:00:28,529 --> 00:00:33,210
anyone wants to you know tell a joke or

00:00:31,140 --> 00:00:37,110
something you are very much welcomed on

00:00:33,210 --> 00:00:45,649
the dice and it Joker in here Joker I

00:00:37,110 --> 00:00:52,770
mean Joker I am coming ok O'Donnell

00:00:45,649 --> 00:00:58,379
hello is it audible at the end yeah font

00:00:52,770 --> 00:01:00,840
size is visible yeah good so this

00:00:58,379 --> 00:01:03,949
session is mostly about trace back and

00:01:00,840 --> 00:01:07,229
debugging code and stuff like that so

00:01:03,949 --> 00:01:12,420
how many of you seen Python trace back

00:01:07,229 --> 00:01:15,240
or errors Oh are we good so so everybody

00:01:12,420 --> 00:01:17,909
has seen so whenever your code has some

00:01:15,240 --> 00:01:19,890
errors so Python will throw some

00:01:17,909 --> 00:01:22,530
exception and it solves some trace back

00:01:19,890 --> 00:01:24,930
so what we can do is actually we can

00:01:22,530 --> 00:01:27,540
take out whatever traceback python is

00:01:24,930 --> 00:01:29,939
giving and we can bring our own trace

00:01:27,540 --> 00:01:31,770
back and we can plug it in there so how

00:01:29,939 --> 00:01:36,299
many of you know that we can actually do

00:01:31,770 --> 00:01:38,220
that oh okay that is quite good number

00:01:36,299 --> 00:01:43,229
so how many of you actually tried that

00:01:38,220 --> 00:01:48,630
oh that is cool so in this session we

00:01:43,229 --> 00:01:51,180
will try to do that so we will mostly

00:01:48,630 --> 00:01:53,189
see what is a trace back and then we try

00:01:51,180 --> 00:01:54,990
to take away the default race back and

00:01:53,189 --> 00:01:57,420
replace it with the color trace back and

00:01:54,990 --> 00:01:59,340
then we can see what are some useful

00:01:57,420 --> 00:02:01,950
things we can do with a custom trace

00:01:59,340 --> 00:02:04,560
back and then we can see how we can

00:02:01,950 --> 00:02:07,590
customize the trace back to debug our

00:02:04,560 --> 00:02:09,179
code and lastly we will see how we can

00:02:07,590 --> 00:02:14,840
write better code to get better trace

00:02:09,179 --> 00:02:14,840
back sounds good yeah let us get started

00:02:14,870 --> 00:02:21,810
so I am just going to write a simple

00:02:18,600 --> 00:02:26,970
function called do which it takes two

00:02:21,810 --> 00:02:31,890
arguments X and Y and then returns X by

00:02:26,970 --> 00:02:34,620
Y so and I am going to write one more

00:02:31,890 --> 00:02:37,650
function called foo which it takes two

00:02:34,620 --> 00:02:42,060
arguments and just calls div of X comma

00:02:37,650 --> 00:02:46,440
Y now I am just going to call foo with

00:02:42,060 --> 00:02:53,220
arguments 1 comma 1 so is it visible at

00:02:46,440 --> 00:02:55,590
the end okay just a sec yeah yeah yeah

00:02:53,220 --> 00:03:03,380
so can somebody tell me if I execute

00:02:55,590 --> 00:03:06,450
what will be the output one erasure

00:03:03,380 --> 00:03:09,120
nothing yeah exactly so somebody is not

00:03:06,450 --> 00:03:10,680
sleeping I think so actually I need to

00:03:09,120 --> 00:03:15,750
put a print statement otherwise it will

00:03:10,680 --> 00:03:21,570
not show that value so now can somebody

00:03:15,750 --> 00:03:29,250
tell me what will be the output yeah let

00:03:21,570 --> 00:03:34,170
us execute and see that so oh I will

00:03:29,250 --> 00:03:39,630
just increase the font size so it is

00:03:34,170 --> 00:03:42,120
actually one so now what I am going to

00:03:39,630 --> 00:03:46,290
do I will just call the same function

00:03:42,120 --> 00:03:49,620
but I will just call you pass arguments

00:03:46,290 --> 00:03:55,019
as one and 0 now can somebody tell me

00:03:49,620 --> 00:04:00,930
what will be the output 0 division error

00:03:55,019 --> 00:04:04,200
are you sure ok ah ok it is actually

00:04:00,930 --> 00:04:06,840
throwing 0 division error so as you can

00:04:04,200 --> 00:04:10,109
see here this is this entire thing is

00:04:06,840 --> 00:04:13,320
traced back and this is the error type

00:04:10,109 --> 00:04:15,810
and this is the error message so this

00:04:13,320 --> 00:04:17,430
trace back has three frames this is the

00:04:15,810 --> 00:04:20,220
first frame this is second and this is

00:04:17,430 --> 00:04:23,090
the third so first we are calling print

00:04:20,220 --> 00:04:26,849
to pho of 1 x 0 which is calling this

00:04:23,090 --> 00:04:27,780
return give of X comma Y and in that it

00:04:26,849 --> 00:04:30,030
is executing it

00:04:27,780 --> 00:04:35,910
next x y where the actual error is

00:04:30,030 --> 00:04:38,130
occurring so okay so this line of code

00:04:35,910 --> 00:04:40,500
this is what triggered the actual error

00:04:38,130 --> 00:04:43,980
but the actual error has occurred at

00:04:40,500 --> 00:04:46,590
this length which is written X by Y ok

00:04:43,980 --> 00:04:52,290
but this is the default trace back which

00:04:46,590 --> 00:04:55,860
is printed by Python so now we will try

00:04:52,290 --> 00:04:57,840
to remove that error so for that what so

00:04:55,860 --> 00:05:04,410
can somebody tell me how I can remove

00:04:57,840 --> 00:05:07,080
that error okay try catch okay two more

00:05:04,410 --> 00:05:13,320
any more solutions I just need to get

00:05:07,080 --> 00:05:15,210
rid of that error that is it that we are

00:05:13,320 --> 00:05:18,660
already doing that right before that I

00:05:15,210 --> 00:05:22,340
need to have that foo of 1 comma 0 but

00:05:18,660 --> 00:05:25,650
still I need to get rid of that error

00:05:22,340 --> 00:05:29,310
keep why no I need one x 0 that is what

00:05:25,650 --> 00:05:32,790
I am saying so what I am going to do is

00:05:29,310 --> 00:05:35,880
I am going to take away Python exception

00:05:32,790 --> 00:05:42,060
so I am going to define a custom

00:05:35,880 --> 00:05:44,820
function colour custom trays back which

00:05:42,060 --> 00:05:47,640
it takes error exception type exception

00:05:44,820 --> 00:05:52,680
value and dredge back and do nothing and

00:05:47,640 --> 00:05:57,810
then i am going to hook that function to

00:05:52,680 --> 00:06:02,820
system not accept hook let me import

00:05:57,810 --> 00:06:05,970
that sis yep now if I go back and

00:06:02,820 --> 00:06:09,630
execute see there're has just

00:06:05,970 --> 00:06:13,580
disappeared but if you see my code that

00:06:09,630 --> 00:06:13,580
a 1 x 0 is still there

00:06:16,459 --> 00:06:23,300
so what is happening here anybody any

00:06:20,580 --> 00:06:23,300
wild guess

00:06:27,070 --> 00:06:33,250
yeah exactly so whenever some error

00:06:29,980 --> 00:06:35,200
happens Python calls system dot accept

00:06:33,250 --> 00:06:37,570
hook which will have some custom

00:06:35,200 --> 00:06:40,060
function which prints that race back so

00:06:37,570 --> 00:06:42,010
what I am doing here i am defining a

00:06:40,060 --> 00:06:43,810
function called a custom trace back but

00:06:42,010 --> 00:06:45,580
it is doing nothing and i have who put

00:06:43,810 --> 00:06:48,910
that function to system not accept hook

00:06:45,580 --> 00:06:50,550
so now no matter whatever error you have

00:06:48,910 --> 00:06:52,870
your program will execute successfully

00:06:50,550 --> 00:06:55,600
so if you are in college and you are

00:06:52,870 --> 00:06:57,240
doing some demo or Wi-Fi and you can

00:06:55,600 --> 00:07:00,400
just show this to your professor so

00:06:57,240 --> 00:07:06,430
there is you will always get expected

00:07:00,400 --> 00:07:11,440
results to this kind of code okay but

00:07:06,430 --> 00:07:13,960
the thing is we cannot debug the code

00:07:11,440 --> 00:07:16,360
like this right so what I am going to do

00:07:13,960 --> 00:07:21,900
now is I am going to print the actual

00:07:16,360 --> 00:07:21,900
trace back what Python is printing so

00:07:28,370 --> 00:07:40,790
I am using a function called format

00:07:30,830 --> 00:07:44,949
exception from traceback module and I

00:07:40,790 --> 00:07:47,720
will just pass the same arguments and

00:07:44,949 --> 00:07:53,930
then I am just going to print that trace

00:07:47,720 --> 00:07:56,500
back we need to import a traceback

00:07:53,930 --> 00:07:56,500
module

00:08:07,710 --> 00:08:14,680
if you see we are getting the division

00:08:12,070 --> 00:08:16,840
ever again but the thing is the

00:08:14,680 --> 00:08:19,090
traceback whatever it is printing it is

00:08:16,840 --> 00:08:20,940
not being printed by Python but we are

00:08:19,090 --> 00:08:25,720
writing a custom function to print that

00:08:20,940 --> 00:08:28,210
so i can print whatever I want here and

00:08:25,720 --> 00:08:34,409
I can even customize it so for example I

00:08:28,210 --> 00:08:37,630
can just go here and I can say this is

00:08:34,409 --> 00:08:41,020
custom trace back and if I go and

00:08:37,630 --> 00:08:44,320
execute you can see here there is a that

00:08:41,020 --> 00:08:46,029
line is printed here so right now Python

00:08:44,320 --> 00:08:47,910
is not controlling the trace back but we

00:08:46,029 --> 00:08:55,480
are controlling and we are modifying as

00:08:47,910 --> 00:08:57,700
per our needs so press back just trace

00:08:55,480 --> 00:09:01,510
back so we have done this we are trying

00:08:57,700 --> 00:09:07,440
to mimic the Python trace back now we

00:09:01,510 --> 00:09:11,380
will do something cool so there is a

00:09:07,440 --> 00:09:13,630
package called pigments so which does

00:09:11,380 --> 00:09:15,910
syntax highlighting for a given piece of

00:09:13,630 --> 00:09:20,920
code so i am just going to call that

00:09:15,910 --> 00:09:24,220
function so it has a function called

00:09:20,920 --> 00:09:27,040
highlight which takes a code and some

00:09:24,220 --> 00:09:31,540
for matters and just highlights the

00:09:27,040 --> 00:09:34,150
given code so previously was directly

00:09:31,540 --> 00:09:36,370
printing the trace back but now i am

00:09:34,150 --> 00:09:38,200
passing the trace back to a function

00:09:36,370 --> 00:09:40,480
called highlight which it takes the

00:09:38,200 --> 00:09:42,910
trace back and then it needs a lecture

00:09:40,480 --> 00:09:44,410
to format the board since i am printing

00:09:42,910 --> 00:09:46,779
a trace back i am giving python

00:09:44,410 --> 00:09:48,970
traceback lecture and since i am running

00:09:46,779 --> 00:09:53,260
the program in terminal i am giving a

00:09:48,970 --> 00:10:00,310
terminal for matter so if i go ahead and

00:09:53,260 --> 00:10:03,339
run this can you spot the difference

00:10:00,310 --> 00:10:05,740
between previous thing and this yeah

00:10:03,339 --> 00:10:09,550
what is the difference color trace back

00:10:05,740 --> 00:10:14,230
so we are actually trying to customize

00:10:09,550 --> 00:10:18,370
the trays back so to make it better and

00:10:14,230 --> 00:10:21,750
to debug code quickly so this is one

00:10:18,370 --> 00:10:24,700
thing we can do so can somebody tell

00:10:21,750 --> 00:10:27,880
other any users of customizing a

00:10:24,700 --> 00:10:29,529
traceback why do we need to actually

00:10:27,880 --> 00:10:31,120
customize this dress back right we can

00:10:29,529 --> 00:10:38,140
just use the Python trace back why do we

00:10:31,120 --> 00:10:40,839
need all this customization okay like a

00:10:38,140 --> 00:10:47,019
color trace back yeah okay that is one

00:10:40,839 --> 00:10:51,339
use case any others with the normal

00:10:47,019 --> 00:10:56,339
trace back also you can get right yeah

00:10:51,339 --> 00:10:56,339
we can made it more human readable and

00:10:56,730 --> 00:11:07,230
yeah exactly and any others yeah yeah

00:11:08,070 --> 00:11:16,810
yeah yeah yeah so we can do lots of cool

00:11:11,500 --> 00:11:20,649
stuff by customizing the trace back so

00:11:16,810 --> 00:11:24,640
this is a color trace back so hyperlinks

00:11:20,649 --> 00:11:27,579
in IDs so for example if I have some

00:11:24,640 --> 00:11:30,910
error here and if I try to execute this

00:11:27,579 --> 00:11:33,610
code if you see here this trace back it

00:11:30,910 --> 00:11:35,890
has a hyperlink so the guy who has

00:11:33,610 --> 00:11:37,360
designed this thing he has actually

00:11:35,890 --> 00:11:40,089
taking the Python trace back and

00:11:37,360 --> 00:11:42,459
wherever there is a frame and a path is

00:11:40,089 --> 00:11:45,459
actually hyper linking that particular

00:11:42,459 --> 00:11:48,610
path to exact a file and location if I

00:11:45,459 --> 00:11:50,920
actually click this so see it actually

00:11:48,610 --> 00:11:53,980
takes me to the position where the error

00:11:50,920 --> 00:12:02,560
has occurred so this is one use case of

00:11:53,980 --> 00:12:08,589
this geo apps so anybody have you done

00:12:02,560 --> 00:12:10,810
GUI programming with Python so yeah so

00:12:08,589 --> 00:12:13,720
whenever you are running some geo apps

00:12:10,810 --> 00:12:17,829
you just run one main loop which runs

00:12:13,720 --> 00:12:19,899
forever and that will run enter app so

00:12:17,829 --> 00:12:21,880
when you are running a nap and some

00:12:19,899 --> 00:12:24,640
exception occurs you do not want your

00:12:21,880 --> 00:12:26,920
app to crash so what they will do they

00:12:24,640 --> 00:12:29,290
will run one main loop and whenever some

00:12:26,920 --> 00:12:31,180
exception occurs instead of throwing the

00:12:29,290 --> 00:12:32,949
trace back they will silently lock that

00:12:31,180 --> 00:12:34,870
ever somewhere else and they will

00:12:32,949 --> 00:12:37,779
continue execution of main loop

00:12:34,870 --> 00:12:40,570
so by that way even though some error

00:12:37,779 --> 00:12:42,490
occurs the whatever GUI that is there it

00:12:40,570 --> 00:12:44,980
won't cash it will be it will keep

00:12:42,490 --> 00:12:50,710
running on so that is one more use case

00:12:44,980 --> 00:12:56,010
and what Zig so how many of you do web

00:12:50,710 --> 00:13:02,020
development how many of you used words e

00:12:56,010 --> 00:13:04,420
so so what will be the use of this so

00:13:02,020 --> 00:13:05,980
what we can do is here we can go to each

00:13:04,420 --> 00:13:11,140
and every frame and we can debug

00:13:05,980 --> 00:13:14,020
actually so if you see here I have some

00:13:11,140 --> 00:13:16,210
trace back here but the thing is it

00:13:14,020 --> 00:13:19,029
provides interactive debugging for

00:13:16,210 --> 00:13:21,190
example here one frame is there I can go

00:13:19,029 --> 00:13:24,910
to this frame and then i can just

00:13:21,190 --> 00:13:26,920
inspect locals so it prints all the

00:13:24,910 --> 00:13:29,500
locals which are present in that frame

00:13:26,920 --> 00:13:31,210
and i can go to some other frame where I

00:13:29,500 --> 00:13:35,320
think error might be happening and I can

00:13:31,210 --> 00:13:38,110
debug there also but you cannot do the

00:13:35,320 --> 00:13:40,120
this in the terminal here since the

00:13:38,110 --> 00:13:42,220
state of each and every frame is saved

00:13:40,120 --> 00:13:45,250
we can inspect each and every frame

00:13:42,220 --> 00:13:55,350
wherever we want so for interactive

00:13:45,250 --> 00:14:04,540
debugging this will be very useful so

00:13:55,350 --> 00:14:08,680
debugging tool so I have a simple

00:14:04,540 --> 00:14:10,330
notebook here so we need to will do we

00:14:08,680 --> 00:14:12,339
will take the trace back and we'll

00:14:10,330 --> 00:14:16,000
inspect and see what are all the items

00:14:12,339 --> 00:14:18,339
that are present in the trash bag so i

00:14:16,000 --> 00:14:21,209
am just importing the function foo which

00:14:18,339 --> 00:14:21,209
we have defined earlier

00:14:35,120 --> 00:14:44,029
okay the function is imported now I am

00:14:39,220 --> 00:14:51,400
exit can you see the fun is it visible

00:14:44,029 --> 00:14:51,400
at the end yeah now not visible

00:14:55,320 --> 00:15:00,060
now i am trying to run the same function

00:14:57,660 --> 00:15:03,180
with the same arguments but i am trying

00:15:00,060 --> 00:15:05,820
to run that in try except the block so i

00:15:03,180 --> 00:15:08,160
am trying to execute foo of 1 comma 0

00:15:05,820 --> 00:15:12,000
and if some error exception occurs i am

00:15:08,160 --> 00:15:14,310
storing the exception values in it in

00:15:12,000 --> 00:15:16,860
three variables so there is one function

00:15:14,310 --> 00:15:19,440
called Isis not accept info so whenever

00:15:16,860 --> 00:15:21,360
an exception occurs that function has

00:15:19,440 --> 00:15:23,220
all the exception information so

00:15:21,360 --> 00:15:25,470
whatever it is written I am just storing

00:15:23,220 --> 00:15:28,860
in three variables and if I try to

00:15:25,470 --> 00:15:31,770
format and see what is present there so

00:15:28,860 --> 00:15:33,330
the same thing it is present so the

00:15:31,770 --> 00:15:35,820
exact error it is showing that it has

00:15:33,330 --> 00:15:38,250
called a foo and then it has called the

00:15:35,820 --> 00:15:40,470
return div of X by Y and it is returning

00:15:38,250 --> 00:15:44,700
x by y which is throwing 0 division

00:15:40,470 --> 00:15:47,520
error so now we have three variables

00:15:44,700 --> 00:15:50,250
which is nothing but exception type and

00:15:47,520 --> 00:15:51,810
then exception value and a trace back so

00:15:50,250 --> 00:15:54,060
this exception type is nothing but 0

00:15:51,810 --> 00:15:57,510
division error and the exception value

00:15:54,060 --> 00:15:59,220
is division by zero error and we have

00:15:57,510 --> 00:16:02,490
this interesting object which is nothing

00:15:59,220 --> 00:16:04,820
but a traceback object so now we will

00:16:02,490 --> 00:16:07,170
try to see what is present inside that

00:16:04,820 --> 00:16:09,690
so there is one function called a gate

00:16:07,170 --> 00:16:12,870
inner frames which is present in inspect

00:16:09,690 --> 00:16:15,270
module when you pass a traceback object

00:16:12,870 --> 00:16:16,620
to that function it returns all the

00:16:15,270 --> 00:16:20,070
inner frames that are present in the

00:16:16,620 --> 00:16:22,230
trace back so it is returning all the

00:16:20,070 --> 00:16:25,920
three frames and if I see what is

00:16:22,230 --> 00:16:29,160
present in first in the second frame it

00:16:25,920 --> 00:16:31,920
has actually a frame object and then it

00:16:29,160 --> 00:16:33,330
is showing the complete path and then it

00:16:31,920 --> 00:16:35,730
is showing the line number which is

00:16:33,330 --> 00:16:38,100
present and it is showing the function

00:16:35,730 --> 00:16:39,510
where it the error has occurred and it

00:16:38,100 --> 00:16:43,110
is showing the line where it has

00:16:39,510 --> 00:16:47,580
occurred so I am just going to unpack

00:16:43,110 --> 00:16:49,500
that frame record and now I have all the

00:16:47,580 --> 00:16:53,150
frame frame name line number everything

00:16:49,500 --> 00:16:56,850
and now I am going to pass this frame to

00:16:53,150 --> 00:16:58,590
a function called get our values what

00:16:56,850 --> 00:17:00,630
this function does is it takes a frame

00:16:58,590 --> 00:17:08,010
object and gives all the values that are

00:17:00,630 --> 00:17:09,089
present in that frame so you see it is

00:17:08,010 --> 00:17:10,679
actually printing

00:17:09,089 --> 00:17:12,209
all the arguments that are passed to the

00:17:10,679 --> 00:17:14,059
function we have positive arguments

00:17:12,209 --> 00:17:16,409
right so it is giving x and y and

00:17:14,059 --> 00:17:19,020
whereas we have not passed any optional

00:17:16,409 --> 00:17:21,000
arguments so it is returning none and we

00:17:19,020 --> 00:17:24,360
have not passed any keyword arguments so

00:17:21,000 --> 00:17:26,909
it is also none and it is even showing

00:17:24,360 --> 00:17:29,100
local variables this is this will be

00:17:26,909 --> 00:17:31,620
very useful actually so the local

00:17:29,100 --> 00:17:35,730
variables it is showing x and y x is 1

00:17:31,620 --> 00:17:38,490
and y is 0 so we can actually pass the

00:17:35,730 --> 00:17:41,159
frame and local variables to a function

00:17:38,490 --> 00:17:44,580
called scan bars which actually takes a

00:17:41,159 --> 00:17:46,440
piece of code and token eise's the code

00:17:44,580 --> 00:17:48,419
and finds the variable in it and

00:17:46,440 --> 00:17:59,640
actually returns the value of that

00:17:48,419 --> 00:18:02,580
variables so in the line where the error

00:17:59,640 --> 00:18:05,730
has occurred it is written div of X by Y

00:18:02,580 --> 00:18:08,130
the frame we have taken so if we look at

00:18:05,730 --> 00:18:10,169
the object it has returned it has

00:18:08,130 --> 00:18:13,380
returned ado which is nothing but a

00:18:10,169 --> 00:18:15,390
global variable and it is a function and

00:18:13,380 --> 00:18:17,520
it has written the X which is the local

00:18:15,390 --> 00:18:21,929
value and its value is 1 and Y which is

00:18:17,520 --> 00:18:24,630
a local value which is 0 so what we have

00:18:21,929 --> 00:18:27,450
done so far now is we have taken the

00:18:24,630 --> 00:18:30,360
traceback object whenever an exception

00:18:27,450 --> 00:18:32,039
occurred and we are going to inner fence

00:18:30,360 --> 00:18:34,110
and we are inspecting what are all the

00:18:32,039 --> 00:18:36,690
variables that are present in that frame

00:18:34,110 --> 00:18:38,460
in addition to that you have whenever

00:18:36,690 --> 00:18:39,840
some error occurs we are trying to find

00:18:38,460 --> 00:18:44,029
the variables in that line and we are

00:18:39,840 --> 00:18:44,029
trying to get the values back here

00:18:48,520 --> 00:18:53,620
now i am going to show on function

00:18:59,670 --> 00:19:07,890
so I have a small code here so i am just

00:19:05,490 --> 00:19:09,990
importing a module called num and i am

00:19:07,890 --> 00:19:12,270
getting three numbers from that module

00:19:09,990 --> 00:19:14,940
and i am trying to sum the three numbers

00:19:12,270 --> 00:19:16,740
i am trying to print the total so if I

00:19:14,940 --> 00:19:20,760
execute that it should print a total

00:19:16,740 --> 00:19:27,420
right so I am just going to run that

00:19:20,760 --> 00:19:29,340
function so it is throwing some error so

00:19:27,420 --> 00:19:32,640
it is throwing type error and supported

00:19:29,340 --> 00:19:40,070
operand types for intend still so can

00:19:32,640 --> 00:19:40,070
somebody tell me how to debug this so I

00:19:41,960 --> 00:19:48,920
replace now we need to get the total

00:19:46,590 --> 00:19:48,920
right

00:19:53,840 --> 00:20:04,750
know how to check the type of that three

00:20:01,370 --> 00:20:07,940
numbers and then do typecasting okay so

00:20:04,750 --> 00:20:10,850
remember the procedure we are doing we

00:20:07,940 --> 00:20:17,750
are trying to okay we are trying to

00:20:10,850 --> 00:20:20,059
check the type of all this and so it is

00:20:17,750 --> 00:20:24,380
showing the first is into second is

00:20:20,059 --> 00:20:26,510
string and the third is inter so I need

00:20:24,380 --> 00:20:33,890
to go back to my script and then I need

00:20:26,510 --> 00:20:36,830
to typecast these two int and I need to

00:20:33,890 --> 00:20:39,350
remove this print statement now if I go

00:20:36,830 --> 00:20:41,510
back and execute it is the running

00:20:39,350 --> 00:20:47,149
successfully right so this is one way

00:20:41,510 --> 00:20:50,659
off for debugging that code no actually

00:20:47,149 --> 00:20:52,940
that is a module it is returning it is

00:20:50,659 --> 00:20:55,490
some third-party module so it is like

00:20:52,940 --> 00:20:57,350
whenever when you are writing some

00:20:55,490 --> 00:20:59,720
real-life code you won't have like

00:20:57,350 --> 00:21:01,100
everything up and running you will be

00:20:59,720 --> 00:21:02,330
calling some other functions and

00:21:01,100 --> 00:21:03,919
somewhere you are retaining some data

00:21:02,330 --> 00:21:06,080
and somewhere you might be doing

00:21:03,919 --> 00:21:09,919
something else so there is a good chance

00:21:06,080 --> 00:21:11,779
of you getting that type error so where

00:21:09,919 --> 00:21:14,059
you might have to do typecasting but you

00:21:11,779 --> 00:21:19,779
can change the upstream where that the

00:21:14,059 --> 00:21:25,899
error is coming so in such situations so

00:21:19,779 --> 00:21:25,899
what you can do is we can actually print

00:21:28,120 --> 00:21:32,570
so whatever we have seen in the notebook

00:21:30,679 --> 00:21:37,070
i have already packaged that we into a

00:21:32,570 --> 00:21:39,590
simple package called ptb and if I just

00:21:37,070 --> 00:21:44,690
import that module and then I enable

00:21:39,590 --> 00:21:47,000
that and if I execute that module so now

00:21:44,690 --> 00:21:49,520
also we are getting the same error but

00:21:47,000 --> 00:21:51,200
if we look at the trace back so it is

00:21:49,520 --> 00:21:53,870
showing that the error has occurred in

00:21:51,200 --> 00:21:55,700
this particular line where the total

00:21:53,870 --> 00:21:58,370
equal to num 1 plus num2 place number E

00:21:55,700 --> 00:22:00,260
but the interesting thing is just below

00:21:58,370 --> 00:22:03,140
that line it is automatically printing

00:22:00,260 --> 00:22:05,539
all the values of the numbers so it is

00:22:03,140 --> 00:22:07,549
printing that num 1 is 1 num2 is string

00:22:05,539 --> 00:22:09,049
2 number 3 is 3 so we

00:22:07,549 --> 00:22:10,549
need to actually go back to our script

00:22:09,049 --> 00:22:12,590
and then put one print statement and

00:22:10,549 --> 00:22:14,629
then again come back and execute and all

00:22:12,590 --> 00:22:17,299
this so just by looking at the traceback

00:22:14,629 --> 00:22:19,789
we know the value of the objects so we

00:22:17,299 --> 00:22:22,700
can just go back and do typecasting so

00:22:19,789 --> 00:22:24,049
which will be bit easier it will be

00:22:22,700 --> 00:22:27,350
useful only when you are dealing with

00:22:24,049 --> 00:22:34,999
some kind of errors but it will be

00:22:27,350 --> 00:22:40,999
useful so filtering frames so how many

00:22:34,999 --> 00:22:45,379
of you use Jungo here okay so have you

00:22:40,999 --> 00:22:47,330
seen Django trace back so one of the

00:22:45,379 --> 00:22:50,570
interesting thing with Django trace back

00:22:47,330 --> 00:22:53,269
is so here I have some if you look at

00:22:50,570 --> 00:22:55,369
the frames here this frame is actually

00:22:53,269 --> 00:22:57,619
de middle this is dima this is de middle

00:22:55,369 --> 00:23:00,919
this is dimmed but this frame and this

00:22:57,619 --> 00:23:04,850
frame are actually highlighted so the

00:23:00,919 --> 00:23:07,220
reason why django does that is this

00:23:04,850 --> 00:23:10,249
whatever frames these that are present

00:23:07,220 --> 00:23:12,710
here they are part of a core django so

00:23:10,249 --> 00:23:16,129
most likely the error will not be

00:23:12,710 --> 00:23:18,379
present there so junghwa tries to dim

00:23:16,129 --> 00:23:20,869
that frames to make it easy for the user

00:23:18,379 --> 00:23:23,509
to find the bugs so actually there're is

00:23:20,869 --> 00:23:27,169
somewhere here so just by looking at the

00:23:23,509 --> 00:23:29,539
trace back we can get an idea that the

00:23:27,169 --> 00:23:34,609
error will be present only in that these

00:23:29,539 --> 00:23:37,820
frames so when we were actually getting

00:23:34,609 --> 00:23:40,220
the frame of the frame information if we

00:23:37,820 --> 00:23:43,039
see the frame record we actually have

00:23:40,220 --> 00:23:44,659
the frame path here so what we can do is

00:23:43,039 --> 00:23:47,509
whenever we are printing it raised back

00:23:44,659 --> 00:23:49,070
we can actually take the frame path and

00:23:47,509 --> 00:23:51,919
we can check with the standard library

00:23:49,070 --> 00:23:53,929
path and if it is present in that we can

00:23:51,919 --> 00:23:56,690
dim the frame in if it is not present we

00:23:53,929 --> 00:23:59,239
can actually highlight or do something

00:23:56,690 --> 00:24:06,129
else with that frame so it helps to

00:23:59,239 --> 00:24:09,350
distinguish between multiple frames so

00:24:06,129 --> 00:24:15,190
more context so how many of you is

00:24:09,350 --> 00:24:15,190
ipython yeah so if you have used ipython

00:24:15,669 --> 00:24:21,549
when you run some program which has some

00:24:19,309 --> 00:24:21,549
error

00:24:25,100 --> 00:24:34,790
let me run some function so see let me

00:24:31,890 --> 00:24:34,790
turn the same thing

00:24:43,470 --> 00:24:49,980
so when I run function using normal

00:24:46,799 --> 00:24:52,380
Python whenever an error occurs it

00:24:49,980 --> 00:24:55,740
actually shows the line where the error

00:24:52,380 --> 00:24:58,470
has occurred or for each and every frame

00:24:55,740 --> 00:25:00,809
the function or the line which has

00:24:58,470 --> 00:25:04,169
caused the error it shows only that line

00:25:00,809 --> 00:25:08,280
but if you look in ipython it actually

00:25:04,169 --> 00:25:09,630
shows two two lines before where the

00:25:08,280 --> 00:25:12,480
error has occurred and the two lines

00:25:09,630 --> 00:25:14,669
after also so it does the same thing for

00:25:12,480 --> 00:25:16,440
each and every frame when you are doing

00:25:14,669 --> 00:25:20,270
some kind of numerical or scientific

00:25:16,440 --> 00:25:22,740
computation you might be getting errors

00:25:20,270 --> 00:25:24,720
because of previous lines also you might

00:25:22,740 --> 00:25:27,000
be doing some subtraction which might be

00:25:24,720 --> 00:25:29,280
giving some 0 or something else so when

00:25:27,000 --> 00:25:31,380
you have some more context where the

00:25:29,280 --> 00:25:34,860
error is occurring it might be easy for

00:25:31,380 --> 00:25:39,809
you to identify the error so this is one

00:25:34,860 --> 00:25:41,610
of the use case so we have been doing

00:25:39,809 --> 00:25:43,230
all these things like magical print

00:25:41,610 --> 00:25:44,460
whenever some error occurs print some

00:25:43,230 --> 00:25:48,330
variables and then we are doing

00:25:44,460 --> 00:25:50,340
filtering frames and then we are looking

00:25:48,330 --> 00:25:53,340
at the context and we are doing lots of

00:25:50,340 --> 00:25:55,860
other things so do you think is it

00:25:53,340 --> 00:26:01,289
really worth spending time on doing all

00:25:55,860 --> 00:26:03,240
of this stuff yes so to decide whether

00:26:01,289 --> 00:26:06,120
it is the work or not will let us have a

00:26:03,240 --> 00:26:09,120
simple exercise and just going to show

00:26:06,120 --> 00:26:11,760
you a picture which has number five and

00:26:09,120 --> 00:26:13,940
number two we just need to count the

00:26:11,760 --> 00:26:17,909
number of number who's in that picture

00:26:13,940 --> 00:26:21,179
get it just account number of two I am

00:26:17,909 --> 00:26:24,350
just going to give you 10 seconds okay

00:26:21,179 --> 00:26:24,350
let's start

00:26:33,090 --> 00:26:45,660
time of time up 6 5 4 4 5 6 I am hearing

00:26:40,980 --> 00:26:48,990
only did these three answers okay okay I

00:26:45,660 --> 00:26:51,240
got it I got it but you took around more

00:26:48,990 --> 00:26:52,710
than five seconds so almost of you took

00:26:51,240 --> 00:26:55,140
more than five seconds to figure that

00:26:52,710 --> 00:26:57,120
out so i am going to show you one more

00:26:55,140 --> 00:27:05,640
slide just tell me how many of them are

00:26:57,120 --> 00:27:10,850
that i have actually highlighted all the

00:27:05,640 --> 00:27:13,440
tools for you and again you're counting

00:27:10,850 --> 00:27:15,390
so actually in the previous slide it is

00:27:13,440 --> 00:27:18,210
quite difficult right you can you cannot

00:27:15,390 --> 00:27:20,120
make out where the tools are but when

00:27:18,210 --> 00:27:23,250
you differentiate you can actually

00:27:20,120 --> 00:27:25,170
easily see that is the thing we are

00:27:23,250 --> 00:27:27,780
doing with the filtering frames so

00:27:25,170 --> 00:27:29,730
actually whenever we are trying to make

00:27:27,780 --> 00:27:33,630
the things like that it will be quite

00:27:29,730 --> 00:27:36,810
useful and we do spend a good amount of

00:27:33,630 --> 00:27:39,180
time on debugging or code so it will be

00:27:36,810 --> 00:27:41,100
and the thing is it is only like one

00:27:39,180 --> 00:27:43,470
time investment just to customize the

00:27:41,100 --> 00:27:46,590
traceback like whatever you are need and

00:27:43,470 --> 00:27:55,860
it will be there forever so it will be

00:27:46,590 --> 00:27:59,790
quite useful so now let's see so one or

00:27:55,860 --> 00:28:03,810
two tips on writing some code which will

00:27:59,790 --> 00:28:05,550
give us some better trace back so what

00:28:03,810 --> 00:28:08,070
you can do is actually whenever you are

00:28:05,550 --> 00:28:10,100
writing code you can use some custom

00:28:08,070 --> 00:28:13,470
conditionals and custom exceptions to

00:28:10,100 --> 00:28:15,840
catch the errors for example when you

00:28:13,470 --> 00:28:18,390
are opening your file you can just

00:28:15,840 --> 00:28:20,070
actually the file path might not be

00:28:18,390 --> 00:28:21,690
correct or there might be some typos

00:28:20,070 --> 00:28:24,240
like that so there is good chance of

00:28:21,690 --> 00:28:26,040
that file might not be found there so

00:28:24,240 --> 00:28:28,530
what you can do is when you are trying

00:28:26,040 --> 00:28:30,600
to do some task like that you can

00:28:28,530 --> 00:28:34,470
actually catch the exceptions which

00:28:30,600 --> 00:28:37,650
might occur in that case and even when

00:28:34,470 --> 00:28:40,470
you are trying to build some apps which

00:28:37,650 --> 00:28:42,300
will be used by users and some exception

00:28:40,470 --> 00:28:45,180
occurs you do not want to show the trace

00:28:42,300 --> 00:28:46,800
back to users right so you need to give

00:28:45,180 --> 00:28:55,260
them some meaningful message so

00:28:46,800 --> 00:28:57,960
that they can understand better so here

00:28:55,260 --> 00:29:02,840
i have a small script which reads an

00:28:57,960 --> 00:29:02,840
integer so if I execute that

00:29:10,840 --> 00:29:13,840
00:29:15,900 --> 00:29:20,850
so it is just asking for enter an

00:29:18,900 --> 00:29:22,710
integer instead of entering an integer

00:29:20,850 --> 00:29:25,590
if i just type some string or something

00:29:22,710 --> 00:29:27,450
like that it just throw some weird trace

00:29:25,590 --> 00:29:29,910
back if you are actually shipping this

00:29:27,450 --> 00:29:32,400
for to some user who is not a developer

00:29:29,910 --> 00:29:34,410
this might actually confuse them lot

00:29:32,400 --> 00:29:36,090
right so what you can do is you can just

00:29:34,410 --> 00:29:41,010
catch the terror and you can display

00:29:36,090 --> 00:29:43,590
them a good message so now if i enter

00:29:41,010 --> 00:29:46,680
some string or something like that it

00:29:43,590 --> 00:29:48,300
just says please enter integer only so

00:29:46,680 --> 00:29:49,470
and if i enter integer it shows

00:29:48,300 --> 00:29:55,260
congratulations you have successfully

00:29:49,470 --> 00:29:57,360
entered an integer so the thing is you

00:29:55,260 --> 00:30:03,080
you need you do not need to show that

00:29:57,360 --> 00:30:03,080
race back and everything to end users a

00:30:03,590 --> 00:30:12,600
changing exceptions so how many of you

00:30:06,720 --> 00:30:21,270
use the Python 3 Python 3 okay only a

00:30:12,600 --> 00:30:28,140
few hands okay i have a small code and

00:30:21,270 --> 00:30:30,780
just using python to hear so what i am

00:30:28,140 --> 00:30:32,940
trying to do here is I just defined a

00:30:30,780 --> 00:30:35,280
function called compute which it tries

00:30:32,940 --> 00:30:38,100
to divide a number with another number

00:30:35,280 --> 00:30:39,960
and when an exception occurs I am trying

00:30:38,100 --> 00:30:42,750
to lock that exception in a file called

00:30:39,960 --> 00:30:45,060
log file dot txt I am just taking the

00:30:42,750 --> 00:30:47,430
exception and I am trying to write the

00:30:45,060 --> 00:30:48,660
exception to your file and what I am

00:30:47,430 --> 00:30:50,910
trying to do I am just calling the

00:30:48,660 --> 00:30:53,610
compute of 1 x 0 so what will happen

00:30:50,910 --> 00:30:55,860
when i call compute of 1 x 0 it goes

00:30:53,610 --> 00:30:59,550
here and it tries to execute this and

00:30:55,860 --> 00:31:02,220
whenever this happens so it will throw 0

00:30:59,550 --> 00:31:05,250
division error so it tries to lock that

00:31:02,220 --> 00:31:07,380
error so when it tries to lock the error

00:31:05,250 --> 00:31:09,900
has mentioned here that log file is

00:31:07,380 --> 00:31:15,360
actually not present so it will throw

00:31:09,900 --> 00:31:17,820
one more exception if i run this it just

00:31:15,360 --> 00:31:19,980
gives me some ever called io error file

00:31:17,820 --> 00:31:22,740
not found what i am actually trying to

00:31:19,980 --> 00:31:24,990
do here is trying to divide one by zero

00:31:22,740 --> 00:31:27,170
i am getting an error called io error

00:31:24,990 --> 00:31:29,700
file not found this is happening because

00:31:27,170 --> 00:31:29,850
when i am trying to divide one by zero i

00:31:29,700 --> 00:31:32,220
am

00:31:29,850 --> 00:31:34,080
getting 0 division error and I am trying

00:31:32,220 --> 00:31:36,210
to handle the 0 division error by

00:31:34,080 --> 00:31:38,940
logging it into a file and when I am

00:31:36,210 --> 00:31:41,850
logging that into a file I am getting an

00:31:38,940 --> 00:31:43,770
exception here so this exception is

00:31:41,850 --> 00:31:46,650
getting lost and this exception is

00:31:43,770 --> 00:31:49,169
getting printed so it will be difficult

00:31:46,650 --> 00:31:51,870
for developers to figure it what is

00:31:49,169 --> 00:31:56,250
actually happening but if I execute the

00:31:51,870 --> 00:31:58,890
same code in Python 3 see it actually

00:31:56,250 --> 00:32:01,590
shows 0 division error here 0 division

00:31:58,890 --> 00:32:03,780
error 0 division by error and then it

00:32:01,590 --> 00:32:05,610
displays message during handling of

00:32:03,780 --> 00:32:07,230
above exception another exception

00:32:05,610 --> 00:32:10,169
occurred and then it is showing that

00:32:07,230 --> 00:32:12,750
file not found error so Python 3

00:32:10,169 --> 00:32:15,720
actually does exception chaining

00:32:12,750 --> 00:32:17,220
implicitly so whenever one error occurs

00:32:15,720 --> 00:32:20,429
and you are trying to handle error and

00:32:17,220 --> 00:32:22,470
some other error occurs python3 actually

00:32:20,429 --> 00:32:24,809
tries to change the exceptions and print

00:32:22,470 --> 00:32:26,970
it if you want you can actually try to

00:32:24,809 --> 00:32:29,130
manually also you can rise the

00:32:26,970 --> 00:32:31,470
exceptions rises some error from mother

00:32:29,130 --> 00:32:35,850
effer like that so you can do lots of

00:32:31,470 --> 00:32:40,049
stuff with python 3 so try to read it at

00:32:35,850 --> 00:32:42,240
pep 3134 so it teaches about a Python

00:32:40,049 --> 00:32:45,210
exception handling and how it does

00:32:42,240 --> 00:32:47,070
implicit exception chaining so if you

00:32:45,210 --> 00:32:53,490
are very lazy to do that error please

00:32:47,070 --> 00:32:54,900
start using Python 3 so the thing is you

00:32:53,490 --> 00:32:56,580
do not need to stick to whatever

00:32:54,900 --> 00:32:57,960
traceback python is giving you can

00:32:56,580 --> 00:33:01,799
actually customize the trays back

00:32:57,960 --> 00:33:04,710
according to your needs and whenever you

00:33:01,799 --> 00:33:06,870
are getting a trace back you can remove

00:33:04,710 --> 00:33:09,120
all necessary information and you can

00:33:06,870 --> 00:33:14,610
take out whatever information that is

00:33:09,120 --> 00:33:16,260
required for you so so that is it if we

00:33:14,610 --> 00:33:21,270
have time for questions I will take

00:33:16,260 --> 00:33:24,390
otherwise all day so he is asking like

00:33:21,270 --> 00:33:26,070
when I python is showing lot of context

00:33:24,390 --> 00:33:30,570
right where error has occurred two lines

00:33:26,070 --> 00:33:32,960
before and two lines after so let me

00:33:30,570 --> 00:33:32,960
just

00:33:34,899 --> 00:33:39,399
so you can see here here we have only

00:33:37,509 --> 00:33:43,570
one line where the error is occurring in

00:33:39,399 --> 00:33:46,330
the frame record if I go back here here

00:33:43,570 --> 00:33:48,729
when we are calling get inner frames in

00:33:46,330 --> 00:33:50,979
addition to trace back we can also pass

00:33:48,729 --> 00:33:54,249
context if I give context equal to five

00:33:50,979 --> 00:33:56,379
and then execute and then look at the

00:33:54,249 --> 00:33:58,539
frame record now you can see you are

00:33:56,379 --> 00:34:01,210
getting actually file ends previously we

00:33:58,539 --> 00:34:02,619
are actually getting one line so

00:34:01,210 --> 00:34:04,719
whenever you are calling that to get

00:34:02,619 --> 00:34:06,549
inner frames you can actually pass the

00:34:04,719 --> 00:34:09,639
context which you use the amount of

00:34:06,549 --> 00:34:13,869
context view whatever you want local

00:34:09,639 --> 00:34:17,679
variables so when you are when you have

00:34:13,869 --> 00:34:19,899
a frame record you are so you are

00:34:17,679 --> 00:34:22,720
calling that inspect dot get our values

00:34:19,899 --> 00:34:23,799
so it is returning all local variables

00:34:22,720 --> 00:34:28,770
that are present in that particular

00:34:23,799 --> 00:34:31,629
frame this is the transfer your question

00:34:28,770 --> 00:34:33,579
whatever i have told i have written that

00:34:31,629 --> 00:34:36,129
into a package called ptb and i have

00:34:33,579 --> 00:34:47,470
published on pi p i think there are many

00:34:36,129 --> 00:34:49,839
other packages nemo questions one two

00:34:47,470 --> 00:34:51,609
three six guys are sleeping right now so

00:34:49,839 --> 00:34:55,740
wake them up and ask them if they have n

00:34:51,609 --> 00:34:55,740

YouTube URL: https://www.youtube.com/watch?v=EGhG8VEatBE


