Title: How to detect Phishing URLs using PySpark Decision Trees - PyCon India 2015
Publication date: 2015-10-12
Playlist: PyCon India 2015
Description: 
	Speaker: Hitesh Dharmdasani

Credential theft via use of Phishing Pages form a bulk of common-man-incidents in todays Information Security landscape. This talk is aimed at looking at ways to detect Phishing pages by leveraging large quantities of previously seen phishing pages and using machine learning algorithms to predict future phishing pages with a high degree of accuracy.

Details: https://in.pycon.org/cfp/pycon-india-2015/proposals/how-to-detect-phishing-urls-using-pyspark-decision-trees/
Captions: 
	00:00:00,480 --> 00:00:07,259
it's topic is how to detect phishing

00:00:03,210 --> 00:00:09,630
URLs using PI spark by hit H he is an

00:00:07,259 --> 00:00:11,280
independent security researcher his

00:00:09,630 --> 00:00:14,160
interest lies in networking security

00:00:11,280 --> 00:00:17,310
data science in big data so over to you

00:00:14,160 --> 00:00:21,600
Tish hello everyone thanks for showing

00:00:17,310 --> 00:00:24,359
up so I'm going to be talking about I

00:00:21,600 --> 00:00:26,990
mainly do internet threats work on

00:00:24,359 --> 00:00:31,080
around security mail code privacy and

00:00:26,990 --> 00:00:33,360
malware engineering kind of efforts this

00:00:31,080 --> 00:00:34,620
work has been if you if you want access

00:00:33,360 --> 00:00:35,910
to these slides you can actually go to

00:00:34,620 --> 00:00:37,350
the web page now and download them

00:00:35,910 --> 00:00:39,770
yourself in case you can't see them at

00:00:37,350 --> 00:00:42,000
the back so what is this talk about

00:00:39,770 --> 00:00:43,649
essentially this talk is about my

00:00:42,000 --> 00:00:45,660
attempt to solve a problem

00:00:43,649 --> 00:00:47,010
I wouldn't yet say that this was a

00:00:45,660 --> 00:00:51,000
successful attempt because it's still

00:00:47,010 --> 00:00:52,739
ongoing but basically the problem is

00:00:51,000 --> 00:00:55,219
about detecting phishing URLs and what

00:00:52,739 --> 00:00:57,930
has been done until now to detect these

00:00:55,219 --> 00:00:59,940
malicious entities on the web and how to

00:00:57,930 --> 00:01:03,180
protect common people against them

00:00:59,940 --> 00:01:06,180
why I made the choices that I made to

00:01:03,180 --> 00:01:09,510
use PI spark an ml Lib and various other

00:01:06,180 --> 00:01:11,939
things I am by no means a machine

00:01:09,510 --> 00:01:13,560
learning expert so you will have to take

00:01:11,939 --> 00:01:16,530
what I say about machine learning with a

00:01:13,560 --> 00:01:18,150
grain of soil and this is not us talking

00:01:16,530 --> 00:01:19,950
about finding you know a success story

00:01:18,150 --> 00:01:24,000
to find a solution or anything is per se

00:01:19,950 --> 00:01:26,430
so what in the world is phishing right

00:01:24,000 --> 00:01:30,229
typically I find that to be any form of

00:01:26,430 --> 00:01:32,490
credential theft any form of theft where

00:01:30,229 --> 00:01:35,009
intellectual property or personal

00:01:32,490 --> 00:01:36,960
details like usernames and passwords and

00:01:35,009 --> 00:01:38,790
credit card numbers have been taken from

00:01:36,960 --> 00:01:40,710
you when you thought you were giving

00:01:38,790 --> 00:01:44,640
that data out to a legitimate person and

00:01:40,710 --> 00:01:46,049
you were in fact not and why you solve

00:01:44,640 --> 00:01:49,110
this problem and this basically stems

00:01:46,049 --> 00:01:51,390
from a very local issue right in my city

00:01:49,110 --> 00:01:53,820
where I am from the police department

00:01:51,390 --> 00:01:55,950
gets about 50 complains a day regarding

00:01:53,820 --> 00:01:58,140
phishing now whether that is in the form

00:01:55,950 --> 00:01:59,610
of malicious emails or whether that is

00:01:58,140 --> 00:02:00,780
in the form of social engineering and

00:01:59,610 --> 00:02:02,700
someone calling you and telling you that

00:02:00,780 --> 00:02:05,460
I'm calling from a bank and taking your

00:02:02,700 --> 00:02:07,020
credit card number all that ties into

00:02:05,460 --> 00:02:08,670
the phishing problem and this is this is

00:02:07,020 --> 00:02:11,039
a problem that has not been soiled as

00:02:08,670 --> 00:02:12,840
correctly as many of the other problems

00:02:11,039 --> 00:02:13,810
like for example for an T for viruses

00:02:12,840 --> 00:02:17,800
and malware you

00:02:13,810 --> 00:02:19,510
anti-viruses for a PT style threats you

00:02:17,800 --> 00:02:21,400
have a lot of products in the world out

00:02:19,510 --> 00:02:23,880
there that you can go and buy but there

00:02:21,400 --> 00:02:27,510
is not much for for a phishing scam

00:02:23,880 --> 00:02:30,280
stopping to a common man at least and

00:02:27,510 --> 00:02:31,900
that there is also this sort of moral

00:02:30,280 --> 00:02:33,730
side to it right that fishing takes more

00:02:31,900 --> 00:02:35,260
advantage of the gullible rather than

00:02:33,730 --> 00:02:37,090
the tech savvy because I can pretty much

00:02:35,260 --> 00:02:38,470
assume that nobody here is going to get

00:02:37,090 --> 00:02:40,300
affected by fishing because you guys

00:02:38,470 --> 00:02:41,950
know what you're doing but on the other

00:02:40,300 --> 00:02:44,319
hand there is a majority of the populace

00:02:41,950 --> 00:02:47,739
that does not and to whom these problems

00:02:44,319 --> 00:02:50,049
have yet to be solved where it gets even

00:02:47,739 --> 00:02:52,600
more difficult is that is those two news

00:02:50,049 --> 00:02:55,060
articles that came out relatively close

00:02:52,600 --> 00:02:56,290
to each other where the direction

00:02:55,060 --> 00:02:58,120
treasurer of Police of Karnataka

00:02:56,290 --> 00:03:02,319
actually lost money because he fell

00:02:58,120 --> 00:03:03,940
victim to a phishing scam so what what

00:03:02,319 --> 00:03:06,040
do we do in today's world to beat these

00:03:03,940 --> 00:03:07,840
sorts of malicious entities right we

00:03:06,040 --> 00:03:11,130
have these ever prevail in blacklist so

00:03:07,840 --> 00:03:13,810
you can go and download a list of URLs

00:03:11,130 --> 00:03:15,220
every single hour that will tell you

00:03:13,810 --> 00:03:17,769
that you know these URLs are now

00:03:15,220 --> 00:03:19,540
malicious or these URLs are hosting

00:03:17,769 --> 00:03:21,579
content that are that that is not that

00:03:19,540 --> 00:03:24,280
is detrimental to people in a broad

00:03:21,579 --> 00:03:26,890
sense and then there are other people

00:03:24,280 --> 00:03:28,989
who write sort of yarra rules if you

00:03:26,890 --> 00:03:30,970
have ever familiar with them on email

00:03:28,989 --> 00:03:32,829
bodies and say okay you if you if these

00:03:30,970 --> 00:03:34,810
words appear in an email then I can

00:03:32,829 --> 00:03:36,880
assume that this is phishing email or

00:03:34,810 --> 00:03:39,340
something of that sort but there's no

00:03:36,880 --> 00:03:39,970
sort of solution where people are still

00:03:39,340 --> 00:03:42,280
happy with it

00:03:39,970 --> 00:03:44,350
Google actually did a pretty good job at

00:03:42,280 --> 00:03:46,569
the Safe Browsing initiative but the

00:03:44,350 --> 00:03:48,250
problem is that that is only applicable

00:03:46,569 --> 00:03:50,139
if you're using Chrome or if you're

00:03:48,250 --> 00:03:51,760
using some browser bundles that have

00:03:50,139 --> 00:03:54,069
been tied with Google that can offer you

00:03:51,760 --> 00:03:59,500
that sort of protection so for example

00:03:54,069 --> 00:04:01,840
if I get some link to me on my corporate

00:03:59,500 --> 00:04:03,160
account and I have to click on it there

00:04:01,840 --> 00:04:05,650
is no filter there is no Safe Browsing

00:04:03,160 --> 00:04:09,609
that I can leverage at that point to to

00:04:05,650 --> 00:04:11,680
really make a difference also people say

00:04:09,609 --> 00:04:13,930
that okay let's you know let's be strict

00:04:11,680 --> 00:04:17,410
about it and and IV will download this

00:04:13,930 --> 00:04:19,780
list of beautiful Alexa 5-million top

00:04:17,410 --> 00:04:21,970
domains and we will only allow things to

00:04:19,780 --> 00:04:23,650
be clicked only on those five million

00:04:21,970 --> 00:04:25,450
domains and if anyone wants to go to any

00:04:23,650 --> 00:04:27,280
other website then we will sort of you

00:04:25,450 --> 00:04:29,530
know sure small warning before we

00:04:27,280 --> 00:04:32,740
make things go ahead but those are sort

00:04:29,530 --> 00:04:35,230
of only making it a tiny bit harder to

00:04:32,740 --> 00:04:35,500
to get on but not stopping no problem at

00:04:35,230 --> 00:04:39,040
all

00:04:35,500 --> 00:04:40,660
democ does a very great job but you can

00:04:39,040 --> 00:04:43,960
stop spam to a great degree but not

00:04:40,660 --> 00:04:45,760
fishing URLs because typically if when

00:04:43,960 --> 00:04:51,280
if you were if you know about this

00:04:45,760 --> 00:04:53,770
during the were to call it correctly job

00:04:51,280 --> 00:04:55,480
hiring spree that happens every time

00:04:53,770 --> 00:04:57,910
graduates come out of school you will

00:04:55,480 --> 00:05:01,120
notice that people create identities

00:04:57,910 --> 00:05:03,400
like my company job interviews 2015 at

00:05:01,120 --> 00:05:05,200
gmail.com and you can't put you can't

00:05:03,400 --> 00:05:07,150
block gmail.com from sending you email

00:05:05,200 --> 00:05:08,710
right at that point so there is nothing

00:05:07,150 --> 00:05:10,030
you can do until unless you actually

00:05:08,710 --> 00:05:12,010
look at the content that is being

00:05:10,030 --> 00:05:14,669
clicked at that point and then decide

00:05:12,010 --> 00:05:17,200
for yourself whether this is good or bad

00:05:14,669 --> 00:05:19,419
so like any other approach I had to

00:05:17,200 --> 00:05:21,550
start with ground zero my ground zero is

00:05:19,419 --> 00:05:24,160
existing research on detecting phishing

00:05:21,550 --> 00:05:25,900
URLs which led me into the machine

00:05:24,160 --> 00:05:27,940
learning direction for some time because

00:05:25,900 --> 00:05:30,430
I had fondled with these things but I am

00:05:27,940 --> 00:05:34,270
again by no means an expert at machine

00:05:30,430 --> 00:05:36,760
learning per se and the most amount of

00:05:34,270 --> 00:05:38,260
success I had with you know fine getting

00:05:36,760 --> 00:05:41,440
features from these data sets of

00:05:38,260 --> 00:05:43,120
phishing URLs and and emails and I'm

00:05:41,440 --> 00:05:45,130
sort of running them through various

00:05:43,120 --> 00:05:47,560
classifiers was this concept about

00:05:45,130 --> 00:05:49,090
decision trees and it intuitively makes

00:05:47,560 --> 00:05:54,160
sense to anyone who's in the security

00:05:49,090 --> 00:05:57,100
industry because V as Clan tend to think

00:05:54,160 --> 00:05:58,419
of maliciousness and benign activity in

00:05:57,100 --> 00:05:59,740
terms of rules so we say okay this

00:05:58,419 --> 00:06:01,810
happened this happened this happened and

00:05:59,740 --> 00:06:04,539
this happened then it is bad or it does

00:06:01,810 --> 00:06:06,220
not meet my level of comfort and if this

00:06:04,539 --> 00:06:08,970
this this happens then I am relatively

00:06:06,220 --> 00:06:12,490
okay with someone doing anything with it

00:06:08,970 --> 00:06:15,430
also it was pretty expressive in in in

00:06:12,490 --> 00:06:18,370
sort of saying what I wanted to come out

00:06:15,430 --> 00:06:20,470
of such a model was hey if we find a URL

00:06:18,370 --> 00:06:22,870
and the content of the webpage has such

00:06:20,470 --> 00:06:25,630
and such and such entity then we don't

00:06:22,870 --> 00:06:27,370
want we don't like this so testing it

00:06:25,630 --> 00:06:30,820
out and humanly looking at it became

00:06:27,370 --> 00:06:32,560
very very simple and easy to do which

00:06:30,820 --> 00:06:35,140
brings to my second choice about PI

00:06:32,560 --> 00:06:36,940
spark and ml Lib I am tend to be a

00:06:35,140 --> 00:06:40,450
little biased towards spark for my own

00:06:36,940 --> 00:06:42,970
reasons but it allows me to sort of

00:06:40,450 --> 00:06:45,250
Kampf in a lot more web pages than I

00:06:42,970 --> 00:06:46,930
normally can there is a very good

00:06:45,250 --> 00:06:49,900
resource for getting fishing fishing

00:06:46,930 --> 00:06:52,390
URLs called fish tank and you can get

00:06:49,900 --> 00:06:55,270
brand new URLs about fishing from there

00:06:52,390 --> 00:06:57,550
every hour and you just run a crawler

00:06:55,270 --> 00:07:00,220
that fetches the HTML for you or time

00:06:57,550 --> 00:07:03,010
and again this led me to have a pretty

00:07:00,220 --> 00:07:05,590
good data set at this point on a

00:07:03,010 --> 00:07:06,820
parallel note ml use ml abuse is

00:07:05,590 --> 00:07:08,710
something called cycle learn that you

00:07:06,820 --> 00:07:10,660
all know about which made it very easier

00:07:08,710 --> 00:07:12,100
to even find documentation and sort of

00:07:10,660 --> 00:07:15,130
cross-reference and see whether I am on

00:07:12,100 --> 00:07:16,600
the right track so for this tiny

00:07:15,130 --> 00:07:18,430
experiment of mine I gathered about

00:07:16,600 --> 00:07:20,410
twelve gigabytes of web pages which

00:07:18,430 --> 00:07:22,960
doesn't seem like a lot but then I

00:07:20,410 --> 00:07:25,630
realized that it's a pain point to parse

00:07:22,960 --> 00:07:27,550
HTML and extract features out of it for

00:07:25,630 --> 00:07:30,190
every single web page and if you have

00:07:27,550 --> 00:07:32,590
two and a half lakh web pages and about

00:07:30,190 --> 00:07:32,920
five 10,000 being added to them every

00:07:32,590 --> 00:07:35,290
day

00:07:32,920 --> 00:07:37,660
you realize why you now need to do

00:07:35,290 --> 00:07:40,210
something with with cluster computing

00:07:37,660 --> 00:07:45,310
engine like spark and not just write a

00:07:40,210 --> 00:07:47,590
for loop and go to bed so which again

00:07:45,310 --> 00:07:48,790
brings me to the point that I also did

00:07:47,590 --> 00:07:50,440
not want to roll out my own

00:07:48,790 --> 00:07:52,540
multi-processing framework where I say

00:07:50,440 --> 00:07:54,430
okay you consume this process consumes

00:07:52,540 --> 00:07:56,230
these many this section of these web

00:07:54,430 --> 00:07:57,670
pages and this other process consumes

00:07:56,230 --> 00:07:59,620
this section and we sort of bring

00:07:57,670 --> 00:08:01,360
features together at the end not

00:07:59,620 --> 00:08:05,860
something I want to reinvent the wheel

00:08:01,360 --> 00:08:07,720
kind of approach also you can save a

00:08:05,860 --> 00:08:08,950
model in spark can load it anywhere else

00:08:07,720 --> 00:08:11,020
so it that makes it easier for

00:08:08,950 --> 00:08:13,060
deployment now I don't know why they had

00:08:11,020 --> 00:08:15,940
to wait until 1.4 to do that but

00:08:13,060 --> 00:08:18,070
whatever so what are the features that

00:08:15,940 --> 00:08:20,790
sort of work right typically if you get

00:08:18,070 --> 00:08:23,500
go to see people use dynamic DNS domains

00:08:20,790 --> 00:08:25,090
mostly for malicious activity if you see

00:08:23,500 --> 00:08:28,390
any traffic going to a dynamic DNS

00:08:25,090 --> 00:08:31,930
domain which you have explicitly not

00:08:28,390 --> 00:08:33,700
gone to then I can assure you that it is

00:08:31,930 --> 00:08:36,700
not something good it is definitely

00:08:33,700 --> 00:08:38,530
somewhat trying to trying to contact you

00:08:36,700 --> 00:08:40,270
never also tend to go to a direct IP

00:08:38,530 --> 00:08:41,770
address in external situations because

00:08:40,270 --> 00:08:44,680
you would typically go to Google or a

00:08:41,770 --> 00:08:48,190
search engine of your choice and type in

00:08:44,680 --> 00:08:49,870
some search query and go to a link so

00:08:48,190 --> 00:08:52,150
you're never actually interacting with

00:08:49,870 --> 00:08:54,050
IP addresses directly so these are the

00:08:52,150 --> 00:08:56,300
things that I thought was

00:08:54,050 --> 00:08:57,830
would be indicators of phishing URLs

00:08:56,300 --> 00:08:59,930
happening right because these URLs these

00:08:57,830 --> 00:09:01,430
web pages for phishing are very very

00:08:59,930 --> 00:09:03,890
short-lived until the point that the

00:09:01,430 --> 00:09:06,410
hosting provider realizes that hey this

00:09:03,890 --> 00:09:08,360
content is quieting more harm than

00:09:06,410 --> 00:09:11,300
anything else and at this point I have

00:09:08,360 --> 00:09:12,950
to take it down and but the crux of

00:09:11,300 --> 00:09:15,860
everything comes in the dynamic part

00:09:12,950 --> 00:09:17,810
right because the moment the only way

00:09:15,860 --> 00:09:19,700
humans detect phishing pages is by is

00:09:17,810 --> 00:09:22,100
that we look at the web page we look at

00:09:19,700 --> 00:09:25,970
the URL and we say you know what this

00:09:22,100 --> 00:09:27,920
Yahoo logos stopped shipping in 2002 how

00:09:25,970 --> 00:09:30,380
can they still have a web page with that

00:09:27,920 --> 00:09:32,660
logo on or or any such thing you may see

00:09:30,380 --> 00:09:34,910
that the web page doesn't load properly

00:09:32,660 --> 00:09:36,709
you may see certain errors these are the

00:09:34,910 --> 00:09:39,110
thermos takes that that phishing

00:09:36,709 --> 00:09:40,700
attackers make and these are okay for me

00:09:39,110 --> 00:09:43,160
and you to understand but it's very

00:09:40,700 --> 00:09:45,830
difficult to convince an algorithm to

00:09:43,160 --> 00:09:48,350
say look at a logo and say tell me what

00:09:45,830 --> 00:09:51,920
logo it is unless until you go to input

00:09:48,350 --> 00:09:53,600
a separate science of its own to figure

00:09:51,920 --> 00:09:57,320
out whether a particular place is

00:09:53,600 --> 00:09:59,779
genuine or not a little counterpoint to

00:09:57,320 --> 00:10:01,700
this is the fact about SSL and CPU

00:09:59,779 --> 00:10:04,279
pinning but most people don't pay

00:10:01,700 --> 00:10:07,279
attention whether they are on a pin HT

00:10:04,279 --> 00:10:08,899
HTTP site when they go to google.com if

00:10:07,279 --> 00:10:10,910
they see Google's logo and it says enter

00:10:08,899 --> 00:10:14,920
your email address they will happily

00:10:10,910 --> 00:10:17,360
type it out but the sort of bulletproof

00:10:14,920 --> 00:10:19,820
approach came to this when it said if

00:10:17,360 --> 00:10:21,950
you see a form and you say email address

00:10:19,820 --> 00:10:23,870
password the moment you know that that

00:10:21,950 --> 00:10:26,750
the post request of that form is

00:10:23,870 --> 00:10:28,610
actually not going to google.com or or

00:10:26,750 --> 00:10:31,520
any search service then you definitely

00:10:28,610 --> 00:10:33,200
know this is not this is not something

00:10:31,520 --> 00:10:35,630
that is good for anyone for that matter

00:10:33,200 --> 00:10:38,959
of fact and we leverage those kinds of

00:10:35,630 --> 00:10:41,360
features in in in ml Lib and and all we

00:10:38,959 --> 00:10:44,630
do is take about 10 or 12 features put

00:10:41,360 --> 00:10:46,070
them in sort of a true or false sort of

00:10:44,630 --> 00:10:50,240
vector I think that you call it a one

00:10:46,070 --> 00:10:52,220
hot vector and you accept you let the

00:10:50,240 --> 00:10:55,010
model train it gives you a very

00:10:52,220 --> 00:10:57,410
beautiful tree and it says if this then

00:10:55,010 --> 00:11:01,310
malicious if not then for then benign

00:10:57,410 --> 00:11:02,480
and so on and so forth for someone who

00:11:01,310 --> 00:11:05,990
doesn't know a lot about decision trees

00:11:02,480 --> 00:11:07,699
it sort of also tells me what is the

00:11:05,990 --> 00:11:10,910
most useless feature right because

00:11:07,699 --> 00:11:12,499
if I say that having a form with a

00:11:10,910 --> 00:11:14,359
password is a useful feature to

00:11:12,499 --> 00:11:16,699
detecting a phishing page and that

00:11:14,359 --> 00:11:19,459
feature is present in benign pages and

00:11:16,699 --> 00:11:21,949
phishing pages with equal amounts of

00:11:19,459 --> 00:11:23,569
probability then that feature is useless

00:11:21,949 --> 00:11:25,429
because it's not giving me an ability to

00:11:23,569 --> 00:11:27,169
distinguish between any one of those

00:11:25,429 --> 00:11:29,149
those two sets at any given point in

00:11:27,169 --> 00:11:32,749
time in which case I might as well throw

00:11:29,149 --> 00:11:34,069
it out so it does this time and again

00:11:32,749 --> 00:11:35,929
time and again until it finds out that

00:11:34,069 --> 00:11:38,749
okay these these features in this way

00:11:35,929 --> 00:11:42,889
gives me sort of the best fit so to

00:11:38,749 --> 00:11:45,199
speak and whatever does not add value is

00:11:42,889 --> 00:11:46,819
thrown away and what we get sort of is

00:11:45,199 --> 00:11:48,769
is something that sort of surprised me

00:11:46,819 --> 00:11:51,049
at the beginning because once the model

00:11:48,769 --> 00:11:55,639
got trained and I ran it on on the place

00:11:51,049 --> 00:11:57,169
of s data it classified were classified

00:11:55,639 --> 00:11:59,480
about 99 percent of those web pages

00:11:57,169 --> 00:12:00,709
correctly which seem to do good to be

00:11:59,480 --> 00:12:02,779
true if that is what you're thinking

00:12:00,709 --> 00:12:04,309
which is correct because in the real

00:12:02,779 --> 00:12:07,339
world we actually have a lot more

00:12:04,309 --> 00:12:09,439
phishing pages than we have real pages

00:12:07,339 --> 00:12:13,489
because if you want to find out whether

00:12:09,439 --> 00:12:15,350
a gmail login page is real or not you

00:12:13,489 --> 00:12:17,149
will only get one example of it from

00:12:15,350 --> 00:12:18,980
google.com but if you go to find

00:12:17,149 --> 00:12:20,749
phishing pages for the same thing you

00:12:18,980 --> 00:12:22,669
will find hundreds of them so there is

00:12:20,749 --> 00:12:24,559
this problem where you have the data set

00:12:22,669 --> 00:12:26,600
for benign pages is far lesser than the

00:12:24,559 --> 00:12:28,189
data set for malicious pages and you

00:12:26,600 --> 00:12:30,589
cannot actually get more benign pages

00:12:28,189 --> 00:12:32,359
because there is only so many services

00:12:30,589 --> 00:12:34,999
there are in the world that you have to

00:12:32,359 --> 00:12:36,439
defend against but it gave a lot more

00:12:34,999 --> 00:12:38,929
approach there were a lot of false

00:12:36,439 --> 00:12:41,299
positives about 35 37 percent of false

00:12:38,929 --> 00:12:43,009
positives when you used bin when you

00:12:41,299 --> 00:12:46,160
gave it benign URLs and it came back to

00:12:43,009 --> 00:12:48,049
misclassified as as malicious which got

00:12:46,160 --> 00:12:51,769
quickly offset it with some white

00:12:48,049 --> 00:12:54,379
listing right so typically barring some

00:12:51,769 --> 00:12:56,119
edge cases you will be okay if you are

00:12:54,379 --> 00:12:57,350
going to google.com or let's say you

00:12:56,119 --> 00:12:59,509
going to docs.google.com

00:12:57,350 --> 00:13:00,829
you are relatively safer there are cases

00:12:59,509 --> 00:13:03,289
where things might go wrong but

00:13:00,829 --> 00:13:06,259
relatively safer so offsetting these

00:13:03,289 --> 00:13:08,509
kinds of things by by a whitelist by by

00:13:06,259 --> 00:13:13,819
some mechanism of clustered cites can

00:13:08,509 --> 00:13:15,819
give you far better results and if you

00:13:13,819 --> 00:13:18,499
incorporate something like Safe Browsing

00:13:15,819 --> 00:13:20,790
hopefully we get to do that if Google

00:13:18,499 --> 00:13:24,120
releases it as open source

00:13:20,790 --> 00:13:26,730
we can do much much much better so we

00:13:24,120 --> 00:13:29,310
quickly realized that having Alexa as a

00:13:26,730 --> 00:13:32,730
part of the feature meaning if this URL

00:13:29,310 --> 00:13:36,209
is in the Alexa list if that's a feature

00:13:32,730 --> 00:13:38,790
that does not help at all because died

00:13:36,209 --> 00:13:40,769
in DNS dot-org actually appears in the

00:13:38,790 --> 00:13:43,470
Alexa list in which case all the dynamic

00:13:40,769 --> 00:13:45,870
DNS domains go out of the window right

00:13:43,470 --> 00:13:48,839
there also people might say that hey you

00:13:45,870 --> 00:13:50,550
know what these phishing URLs come up on

00:13:48,839 --> 00:13:52,529
very very new domains right like someone

00:13:50,550 --> 00:13:54,240
might register a domain last week and

00:13:52,529 --> 00:13:57,570
then use it to do something malicious

00:13:54,240 --> 00:13:59,790
this week so you can you know say give a

00:13:57,570 --> 00:14:01,260
reputation score to the to the domain

00:13:59,790 --> 00:14:03,180
name and then you can decide whether

00:14:01,260 --> 00:14:05,790
this is a good or a bad domain which

00:14:03,180 --> 00:14:07,800
again does not work because people

00:14:05,790 --> 00:14:09,839
register and keep domain names for a

00:14:07,800 --> 00:14:11,820
long time or use dynamic DNS services or

00:14:09,839 --> 00:14:14,100
typically these attackers might have

00:14:11,820 --> 00:14:16,290
moved from more malware like activity to

00:14:14,100 --> 00:14:18,470
phishing like activity now and you

00:14:16,290 --> 00:14:21,570
cannot really judge just by the

00:14:18,470 --> 00:14:28,050
reputation of the domain about what is

00:14:21,570 --> 00:14:29,670
really going on and there is that there

00:14:28,050 --> 00:14:30,959
is still a tiny problem to this site

00:14:29,670 --> 00:14:33,060
because every time now you need to

00:14:30,959 --> 00:14:35,040
classify web pages you need to actually

00:14:33,060 --> 00:14:37,139
get the HTML for that page and then

00:14:35,040 --> 00:14:38,399
figure out what features it has and then

00:14:37,139 --> 00:14:40,620
send it to a model and send it back

00:14:38,399 --> 00:14:42,959
which is a good and a bad thing because

00:14:40,620 --> 00:14:44,730
if you have a browser extension that can

00:14:42,959 --> 00:14:47,190
compute these features and send them up

00:14:44,730 --> 00:14:49,260
to some service the lookup takes like

00:14:47,190 --> 00:14:51,000
less than a microsecond to do right

00:14:49,260 --> 00:14:53,850
because once you have the model and it's

00:14:51,000 --> 00:14:55,920
listening on some port it's very quick

00:14:53,850 --> 00:14:59,190
to make that decision so the idea is

00:14:55,920 --> 00:15:01,380
sort of to extend this approach where

00:14:59,190 --> 00:15:03,120
the features are computed locally to

00:15:01,380 --> 00:15:05,790
whoever has an extension to stop fishing

00:15:03,120 --> 00:15:07,110
and then do that that sort of only the

00:15:05,790 --> 00:15:09,029
feature vector comes to us and we can

00:15:07,110 --> 00:15:11,459
just reply with hey don't click on this

00:15:09,029 --> 00:15:13,079
or click on this and and it would be a

00:15:11,459 --> 00:15:15,600
it would be beneficial to a lot of

00:15:13,079 --> 00:15:17,100
common people in the world to be

00:15:15,600 --> 00:15:18,529
protected protected against phishing

00:15:17,100 --> 00:15:20,550
attacks

00:15:18,529 --> 00:15:21,899
there are a couple of other problems

00:15:20,550 --> 00:15:23,880
also that that arise out of this

00:15:21,899 --> 00:15:27,389
approach is because once you put this

00:15:23,880 --> 00:15:30,029
out in the wild and this is to do with

00:15:27,389 --> 00:15:31,649
any problem insecurity attacker will

00:15:30,029 --> 00:15:34,180
find other ways to sort of subvert your

00:15:31,649 --> 00:15:37,060
your feature gathering capable

00:15:34,180 --> 00:15:38,890
if you're looking for a password field

00:15:37,060 --> 00:15:41,020
instead of putting a forum they might

00:15:38,890 --> 00:15:43,480
actually put two text inputs and do some

00:15:41,020 --> 00:15:46,240
crazy things where you sort of they sort

00:15:43,480 --> 00:15:48,880
of try to evade your feature scanning

00:15:46,240 --> 00:15:50,950
approach which again brings you back to

00:15:48,880 --> 00:15:53,050
square one because as they rightfully

00:15:50,950 --> 00:15:54,520
say the defender has to be right 100% of

00:15:53,050 --> 00:15:57,280
the time and the attacker needs to get

00:15:54,520 --> 00:15:59,590
lucky just once so that is going to be

00:15:57,280 --> 00:16:01,180
an active problem also getting new pages

00:15:59,590 --> 00:16:02,940
every now and again requires that you

00:16:01,180 --> 00:16:05,950
can now have dedicated infrastructure to

00:16:02,940 --> 00:16:08,080
to fetch these web pages to crawl these

00:16:05,950 --> 00:16:11,260
web pages time and again and to update

00:16:08,080 --> 00:16:14,200
your model every single time it's still

00:16:11,260 --> 00:16:16,660
not as bulletproof as a human looking at

00:16:14,200 --> 00:16:20,710
it but it is better than most approaches

00:16:16,660 --> 00:16:22,300
that are out there also one of the

00:16:20,710 --> 00:16:24,010
problems is that SPARC does not have an

00:16:22,300 --> 00:16:26,200
API face so you can't just take a model

00:16:24,010 --> 00:16:28,720
and say accept any input that comes on

00:16:26,200 --> 00:16:30,340
port 80 and then just tunnel it to to

00:16:28,720 --> 00:16:32,020
this model and then write the response

00:16:30,340 --> 00:16:33,430
to a database or something you still

00:16:32,020 --> 00:16:36,460
can't do that so you have to find like

00:16:33,430 --> 00:16:38,260
hacks around writing tiny pipes between

00:16:36,460 --> 00:16:39,550
things and say okay you communicate with

00:16:38,260 --> 00:16:43,870
this guy you communicate with this guy

00:16:39,550 --> 00:16:46,780
and it gets messy really really fast but

00:16:43,870 --> 00:16:49,210
again we will find problems to such

00:16:46,780 --> 00:16:52,350
things time and again as they happen

00:16:49,210 --> 00:16:55,690
that sort of like a rough sketch about

00:16:52,350 --> 00:16:57,910
about phishing URLs and this technique

00:16:55,690 --> 00:17:00,520
doesn't necessarily apply just to URLs

00:16:57,910 --> 00:17:02,560
but also to emails right because the

00:17:00,520 --> 00:17:05,370
same way you extract features out of

00:17:02,560 --> 00:17:07,570
HTML you can extract features out of

00:17:05,370 --> 00:17:09,550
email communications as well leave it at

00:17:07,570 --> 00:17:13,360
that be an exchange email or or whatever

00:17:09,550 --> 00:17:15,900
that is that's basically sort of the

00:17:13,360 --> 00:17:18,520
approach that that we've had until now

00:17:15,900 --> 00:17:20,830
this is what we got it's sort of a mix

00:17:18,520 --> 00:17:22,690
between static features and dynamic

00:17:20,830 --> 00:17:24,790
features when I say static features I

00:17:22,690 --> 00:17:26,500
mean features that just rely on the URL

00:17:24,790 --> 00:17:27,580
right just the text of the URL nothing

00:17:26,500 --> 00:17:29,350
to do with the content of the webpage

00:17:27,580 --> 00:17:32,080
and then there are some features that

00:17:29,350 --> 00:17:34,570
rely on the URL on the HTML of the page

00:17:32,080 --> 00:17:36,220
which means okay we are actually looking

00:17:34,570 --> 00:17:37,720
at the content of the page and deciding

00:17:36,220 --> 00:17:41,110
for ourselves whether this is a

00:17:37,720 --> 00:17:43,510
legitimate page or not so this is where

00:17:41,110 --> 00:17:45,580
we are now that's all I actually have to

00:17:43,510 --> 00:17:47,500
share if you have any approaches that

00:17:45,580 --> 00:17:49,870
you have tried and tested or if you like

00:17:47,500 --> 00:17:53,140
to contribute to this you are welcome to

00:17:49,870 --> 00:17:55,270
take the data set or take the code once

00:17:53,140 --> 00:17:57,940
this meets sort of some measure of

00:17:55,270 --> 00:18:00,250
quality it will be open source since the

00:17:57,940 --> 00:18:03,370
point is to have it accessible and

00:18:00,250 --> 00:18:06,550
usable by everyone in the world who is

00:18:03,370 --> 00:18:10,180
you know sort of can fall a victim to

00:18:06,550 --> 00:18:12,040
phishing at this point and I can I can

00:18:10,180 --> 00:18:18,670
take any questions you have that are

00:18:12,040 --> 00:18:21,580
based on security or all phishing so as

00:18:18,670 --> 00:18:23,710
you said like so most of the things is

00:18:21,580 --> 00:18:25,660
like so you need to pass the content of

00:18:23,710 --> 00:18:27,340
the page and then decide most of the

00:18:25,660 --> 00:18:29,560
things right so have you tried the

00:18:27,340 --> 00:18:31,270
approach of putting up a like playing

00:18:29,560 --> 00:18:33,820
out with some plugins with reverse

00:18:31,270 --> 00:18:37,810
proxies or some other stuff because that

00:18:33,820 --> 00:18:41,560
helps right so that helps identify so as

00:18:37,810 --> 00:18:43,240
a reverse proxy you are like having all

00:18:41,560 --> 00:18:45,310
the requests which are going through and

00:18:43,240 --> 00:18:47,950
the response which is coming back and it

00:18:45,310 --> 00:18:50,290
it's very easy like a honey pot or

00:18:47,950 --> 00:18:52,660
something to identify the patterns which

00:18:50,290 --> 00:18:56,020
is which you want to which you want to

00:18:52,660 --> 00:18:59,080
learn and then block or this do some

00:18:56,020 --> 00:19:00,400
other stuff so like so there are certain

00:18:59,080 --> 00:19:03,760
things which we have done in past so I

00:19:00,400 --> 00:19:06,700
will be happy to like interact post your

00:19:03,760 --> 00:19:09,250
talk to explain which tools we have used

00:19:06,700 --> 00:19:13,030
which we use in email and other stuff

00:19:09,250 --> 00:19:16,390
which can be used to mark a ham or spam

00:19:13,030 --> 00:19:18,520
kind of stuff in phishing also using

00:19:16,390 --> 00:19:20,320
reverse proxy stuff yes so there's two

00:19:18,520 --> 00:19:22,330
things right the reverse proxy is useful

00:19:20,320 --> 00:19:24,700
only when you know where the traffic is

00:19:22,330 --> 00:19:27,430
going to pass from for example if I am

00:19:24,700 --> 00:19:28,660
here at PyCon I know that all my web

00:19:27,430 --> 00:19:30,310
requests are going to be routed through

00:19:28,660 --> 00:19:32,800
some server right and I can put some

00:19:30,310 --> 00:19:34,420
defensive measures there the also second

00:19:32,800 --> 00:19:36,130
alternative is to do this inside like a

00:19:34,420 --> 00:19:38,590
browser extension or something like that

00:19:36,130 --> 00:19:40,510
because browser extensions are a really

00:19:38,590 --> 00:19:42,400
lightweight they can run per computer

00:19:40,510 --> 00:19:45,160
regardless of where that computer is

00:19:42,400 --> 00:19:47,020
they anyways here I have access to the

00:19:45,160 --> 00:19:49,930
HTML page which means you don't have to

00:19:47,020 --> 00:19:52,120
sort of reexamine the page in transit or

00:19:49,930 --> 00:19:55,210
something like that and again extracting

00:19:52,120 --> 00:19:57,640
features will be simpler per computer on

00:19:55,210 --> 00:19:58,960
the browser rather than like at a at a

00:19:57,640 --> 00:20:01,150
gateway or something of that sort

00:19:58,960 --> 00:20:03,610
you have tried those two approaches and

00:20:01,150 --> 00:20:06,490
so only the learning part I'm saying

00:20:03,610 --> 00:20:08,440
like so like a honey pot you put reverse

00:20:06,490 --> 00:20:10,210
proxy try to learn those things and put

00:20:08,440 --> 00:20:11,590
those features in your browser extension

00:20:10,210 --> 00:20:14,650
or somewhere else true too and yeah

00:20:11,590 --> 00:20:19,540
that'll be a I agree that's definitely

00:20:14,650 --> 00:20:24,070
something that is feature so that you

00:20:19,540 --> 00:20:27,550
are used to it

00:20:24,070 --> 00:20:29,890
mostly about textual content or or

00:20:27,550 --> 00:20:33,280
features of the DNS or which which all

00:20:29,890 --> 00:20:35,320
features so there are all the features

00:20:33,280 --> 00:20:38,200
are our binary except for one

00:20:35,320 --> 00:20:40,179
the features are we see whether the

00:20:38,200 --> 00:20:42,280
domain name that you get in the URL is

00:20:40,179 --> 00:20:44,320
the same domain where the post request

00:20:42,280 --> 00:20:48,490
is going to write so that's one feature

00:20:44,320 --> 00:20:49,690
another feature is to check if normally

00:20:48,490 --> 00:20:52,150
you see is for example if you are

00:20:49,690 --> 00:20:53,770
fishing for ebay credentials rate you

00:20:52,150 --> 00:20:56,460
will traditionally see that the URL will

00:20:53,770 --> 00:21:00,760
look something like Simon dot ebay.com

00:20:56,460 --> 00:21:03,370
dot hello dot XY Z dot some bad domain

00:21:00,760 --> 00:21:04,870
dot are you right and and in that case

00:21:03,370 --> 00:21:07,120
you know that the top-level domain is

00:21:04,870 --> 00:21:09,400
actually not ebay.com and just you know

00:21:07,120 --> 00:21:11,740
sort of fuzzing itself to look like he

00:21:09,400 --> 00:21:14,290
better calm and we try to find these

00:21:11,740 --> 00:21:16,780
brands in the email and say okay if we

00:21:14,290 --> 00:21:18,250
find a legitimate brand in the URL then

00:21:16,780 --> 00:21:21,190
true that so that's that's another

00:21:18,250 --> 00:21:22,420
feature I'd be glad to share this with

00:21:21,190 --> 00:21:23,620
you because I have 15 and I can't

00:21:22,420 --> 00:21:25,809
remember them off the top of my head

00:21:23,620 --> 00:21:27,460
right now so there are a bunch of these

00:21:25,809 --> 00:21:42,340
and we can talk about all the features

00:21:27,460 --> 00:21:44,190
offline I'm sorry but this is machine

00:21:42,340 --> 00:21:46,450
learning question oops

00:21:44,190 --> 00:21:48,940
just out of curiosity which other

00:21:46,450 --> 00:21:51,010
techniques then decision trees have you

00:21:48,940 --> 00:21:53,080
try it out and what made you zero in on

00:21:51,010 --> 00:21:55,179
decision I have tried everything that

00:21:53,080 --> 00:22:00,280
comes in the mail lip package everything

00:21:55,179 --> 00:22:01,330
from logistic regression to they assume

00:22:00,280 --> 00:22:03,070
classifiers all of them

00:22:01,330 --> 00:22:04,900
I found that decision trees are good I

00:22:03,070 --> 00:22:06,280
have just discovered that even random

00:22:04,900 --> 00:22:08,650
forests are giving somewhat similar

00:22:06,280 --> 00:22:11,140
performance but I haven't tried had like

00:22:08,650 --> 00:22:13,440
a chance to deep dive into random forest

00:22:11,140 --> 00:22:18,640
and check out what they do so

00:22:13,440 --> 00:22:19,990
spark actually accepts does not have you

00:22:18,640 --> 00:22:21,640
don't have to change things much between

00:22:19,990 --> 00:22:23,260
changing classifiers so you I could

00:22:21,640 --> 00:22:25,390
basically run all of them and just check

00:22:23,260 --> 00:22:27,370
at the end what's the best sort of

00:22:25,390 --> 00:22:29,550
detection rate that I can get and this

00:22:27,370 --> 00:22:31,420
isn't pleased turned out to be that one

00:22:29,550 --> 00:22:33,400
classification accuracy is the only

00:22:31,420 --> 00:22:36,730
metric that you were looking for when

00:22:33,400 --> 00:22:38,380
deciding between yes I mean that sort of

00:22:36,730 --> 00:22:41,410
what we are aiming I am aiming for as a

00:22:38,380 --> 00:22:44,020
as a detection efficacy point of view

00:22:41,410 --> 00:22:45,820
right because my problem is to classify

00:22:44,020 --> 00:22:47,710
something as malicious when it is

00:22:45,820 --> 00:22:50,110
malicious so to me at least

00:22:47,710 --> 00:22:51,790
classification is is sort of the primary

00:22:50,110 --> 00:22:53,800
motive I realized that there is going to

00:22:51,790 --> 00:22:57,790
be a sort of an F period and there's

00:22:53,800 --> 00:22:59,890
going to be another true F period but it

00:22:57,790 --> 00:23:04,630
doesn't really hurt anyone not to not to

00:22:59,890 --> 00:23:07,150
know I I am NOT doing it at right now

00:23:04,630 --> 00:23:10,900
and I have found why I am not doing that

00:23:07,150 --> 00:23:13,150
it's because typically if you go to say

00:23:10,900 --> 00:23:14,710
you go to login or gmail.com right that

00:23:13,150 --> 00:23:17,470
page actually does not show up

00:23:14,710 --> 00:23:18,820
consistently from time to time it may

00:23:17,470 --> 00:23:21,040
see something today it might be

00:23:18,820 --> 00:23:22,630
something else tomorrow not the not like

00:23:21,040 --> 00:23:25,420
the viewing experience I'm talking about

00:23:22,630 --> 00:23:28,300
the underlying JavaScript and HTML that

00:23:25,420 --> 00:23:30,790
comes with it also this begs the point

00:23:28,300 --> 00:23:32,230
that then I can only protect people

00:23:30,790 --> 00:23:34,840
against web pages that I've previously

00:23:32,230 --> 00:23:36,880
seen benign versions of before so for

00:23:34,840 --> 00:23:39,490
example if I have the page for ICICI

00:23:36,880 --> 00:23:41,980
dot-coms web login interface and I don't

00:23:39,490 --> 00:23:43,510
have it for IDBI Bank then and if I get

00:23:41,980 --> 00:23:45,340
a phishing page for IDBI Bank

00:23:43,510 --> 00:23:47,170
I have no metric to compare that against

00:23:45,340 --> 00:23:50,380
so that sort of seemed like a bottleneck

00:23:47,170 --> 00:23:51,790
that would not be a scalable solution at

00:23:50,380 --> 00:23:54,840
that point but I am happy to be proven

00:23:51,790 --> 00:23:54,840
wrong on this

00:24:03,470 --> 00:24:09,830
and which is the most fascinating for

00:24:05,600 --> 00:24:11,809
you obviously so spot cheats

00:24:09,830 --> 00:24:13,309
a little bit because when you use PI

00:24:11,809 --> 00:24:14,990
spark you're actually not it's not

00:24:13,309 --> 00:24:17,090
implementing everything natively in

00:24:14,990 --> 00:24:19,340
Python so they have a gateway of sorts

00:24:17,090 --> 00:24:20,510
where it's sort of slipping you know

00:24:19,340 --> 00:24:23,179
sort of giving a check to someone

00:24:20,510 --> 00:24:26,000
through a through a channel underneath

00:24:23,179 --> 00:24:27,890
the door and it just just sort of shifts

00:24:26,000 --> 00:24:30,409
tasks underneath and everything actually

00:24:27,890 --> 00:24:32,929
runs on the JVM rather than running on

00:24:30,409 --> 00:24:35,059
the Python interpreter but yes by by far

00:24:32,929 --> 00:24:36,980
the experience to use Python is far

00:24:35,059 --> 00:24:38,809
greater than using I mean I am I don't

00:24:36,980 --> 00:24:42,140
know are for the even the first line so

00:24:38,809 --> 00:24:43,760
yeah the experience to use spark as a

00:24:42,140 --> 00:24:45,890
cluster computing framework and as a

00:24:43,760 --> 00:24:47,870
means of sort of processing large data

00:24:45,890 --> 00:24:50,210
sets very very quickly is is very very

00:24:47,870 --> 00:24:56,289
very easy to do in Python than anything

00:24:50,210 --> 00:24:56,289

YouTube URL: https://www.youtube.com/watch?v=LCI4ay11UBY


