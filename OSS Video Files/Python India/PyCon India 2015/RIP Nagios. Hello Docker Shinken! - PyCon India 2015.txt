Title: RIP Nagios. Hello Docker Shinken! - PyCon India 2015
Publication date: 2015-10-12
Playlist: PyCon India 2015
Description: 
	Speaker: Rohit Gupta

This talk is about how to write "Infrastructure Monitoring as code"

Details: https://in.pycon.org/cfp/pycon-india-2015/proposals/rip-nagios-hello-docker-shinken/
Captions: 
	00:00:00,030 --> 00:00:06,899
stalkers are IP Nagas hello Dockers

00:00:03,830 --> 00:00:10,469
Shinken by Rohit Gupta

00:00:06,899 --> 00:00:13,110
so Rohit is a developer force enthusiast

00:00:10,469 --> 00:00:15,330
an Indian nationalist he's passionate

00:00:13,110 --> 00:00:18,150
about technology and has worked on the

00:00:15,330 --> 00:00:19,340
area of convergence of telephony over

00:00:18,150 --> 00:00:23,609
the web

00:00:19,340 --> 00:00:27,630
hello everyone you can hear me you can

00:00:23,609 --> 00:00:30,210
hear me yeah hello everyone first of all

00:00:27,630 --> 00:00:32,610
thank you for having me here it's a real

00:00:30,210 --> 00:00:37,649
honor to be presenting in front of such

00:00:32,610 --> 00:00:39,600
an awesome audience so the topic which

00:00:37,649 --> 00:00:45,780
I'm going to talk about is resting

00:00:39,600 --> 00:00:49,440
please Nagios hello dr Shinken just for

00:00:45,780 --> 00:00:53,489
Who am I I'm a developer working in the

00:00:49,440 --> 00:00:57,750
area of DevOps I've been involved in a

00:00:53,489 --> 00:01:01,020
lot of automation over AWS working some

00:00:57,750 --> 00:01:02,969
bit on docker as well in terms of

00:01:01,020 --> 00:01:04,920
monitoring I've been working in the area

00:01:02,969 --> 00:01:08,400
of monitoring for more than three years

00:01:04,920 --> 00:01:12,830
now I'll be sharing some of some of my

00:01:08,400 --> 00:01:17,759
experiences with monitoring systems and

00:01:12,830 --> 00:01:23,189
why shinken makes more sense than Nagios

00:01:17,759 --> 00:01:25,590
and what dr. shinken has to offer but

00:01:23,189 --> 00:01:28,979
before I begin let me ask you a quick

00:01:25,590 --> 00:01:32,490
question how many of you over here have

00:01:28,979 --> 00:01:37,200
never used any monitoring system these

00:01:32,490 --> 00:01:40,590
restaurants alright great awesome

00:01:37,200 --> 00:01:45,450
lot of you how many of you have used nag

00:01:40,590 --> 00:01:49,159
use a great so I have one good news for

00:01:45,450 --> 00:01:49,159
both of you let's see

00:01:49,220 --> 00:01:55,820
so for the for the ones who have never

00:01:53,640 --> 00:01:59,460
tried any monitoring systems there's a

00:01:55,820 --> 00:02:03,469
there's a maybe a terrible news but it's

00:01:59,460 --> 00:02:06,439
a news monitoring systems are hard

00:02:03,469 --> 00:02:08,250
it says shrinkin manual basically

00:02:06,439 --> 00:02:12,300
documentation in the documentation

00:02:08,250 --> 00:02:13,460
itself it says relax it takes time why

00:02:12,300 --> 00:02:15,560
because one

00:02:13,460 --> 00:02:19,700
doing system--it's monitoring itself is

00:02:15,560 --> 00:02:24,620
a different domain domain you have lot

00:02:19,700 --> 00:02:26,510
of new concepts and you have to if you

00:02:24,620 --> 00:02:28,790
want to have a proper monitoring setup

00:02:26,510 --> 00:02:33,470
ready you have to take care of a lot of

00:02:28,790 --> 00:02:35,060
things you may get started with few

00:02:33,470 --> 00:02:37,460
monitoring systems but it may not be

00:02:35,060 --> 00:02:41,300
useful like you may get either too many

00:02:37,460 --> 00:02:44,060
alerts or too many too few alerts it may

00:02:41,300 --> 00:02:48,200
not catch the exceptions when required

00:02:44,060 --> 00:02:51,740
or it may catch too many so it's a

00:02:48,200 --> 00:02:53,930
completely new domain and that's what

00:02:51,740 --> 00:02:57,170
that's why I say monitoring systems are

00:02:53,930 --> 00:02:59,560
hard let's talk a bit about negative for

00:02:57,170 --> 00:03:02,900
negative replies you already know but

00:02:59,560 --> 00:03:05,740
nagas is a monitoring system IT

00:03:02,900 --> 00:03:09,400
infrastructure monitoring system and

00:03:05,740 --> 00:03:14,750
kind of a standard tool for monitoring

00:03:09,400 --> 00:03:17,380
servers routers devices in many many in

00:03:14,750 --> 00:03:21,020
the mini companies

00:03:17,380 --> 00:03:22,220
the problem with Nadu's is that it is

00:03:21,020 --> 00:03:26,420
from the development perspective

00:03:22,220 --> 00:03:29,360
perspective it is dead people have for

00:03:26,420 --> 00:03:32,570
nagios and created multiple projects out

00:03:29,360 --> 00:03:34,760
of it there's a kind of love-hate

00:03:32,570 --> 00:03:37,160
relationship over here people love to

00:03:34,760 --> 00:03:45,170
hate nag use but they still use Nagas

00:03:37,160 --> 00:03:46,660
because it is everywhere let's talk a

00:03:45,170 --> 00:03:49,790
bit about shrinking

00:03:46,660 --> 00:03:53,810
what is shrinking shrinking was

00:03:49,790 --> 00:03:57,410
originally proposed as Nagios 4 by gene

00:03:53,810 --> 00:04:01,130
gives its author but it was rejected by

00:03:57,410 --> 00:04:03,650
the Nagios developers and so it became

00:04:01,130 --> 00:04:05,740
an independent project so what's the

00:04:03,650 --> 00:04:08,150
good news for nagios developers

00:04:05,740 --> 00:04:10,910
shrinking supports everything whatever

00:04:08,150 --> 00:04:13,160
negative supports by default you can

00:04:10,910 --> 00:04:17,989
just take your newest configuration and

00:04:13,160 --> 00:04:20,510
use it in shrinking done it supports 99%

00:04:17,989 --> 00:04:23,150
of the configuration as it is the 1% it

00:04:20,510 --> 00:04:26,330
doesn't support is written in their

00:04:23,150 --> 00:04:27,409
documentation why doesn't support

00:04:26,330 --> 00:04:30,999
basically those

00:04:27,409 --> 00:04:34,370
very rarely used modules or the features

00:04:30,999 --> 00:04:37,060
but again if you want to have those you

00:04:34,370 --> 00:04:41,659
can have it with the help of modules I

00:04:37,060 --> 00:04:45,529
have used shrinkin 11.2 and shrinking

00:04:41,659 --> 00:04:49,249
which shrink in 2.2 I - I saw dramatic

00:04:45,529 --> 00:04:52,569
changes in the in the features it

00:04:49,249 --> 00:04:57,620
provides it has a new installer itself

00:04:52,569 --> 00:04:59,930
it has a lot of new modules Shinken is

00:04:57,620 --> 00:05:01,550
completely written in Python so base for

00:04:59,930 --> 00:05:04,150
installation is really simple you can do

00:05:01,550 --> 00:05:07,250
just pip install shrinkin and it's done

00:05:04,150 --> 00:05:11,000
but by default it doesn't even provide

00:05:07,250 --> 00:05:14,029
you a UI a bit surprising right so you

00:05:11,000 --> 00:05:16,219
have to it install each and every module

00:05:14,029 --> 00:05:18,409
yourself by using the Shinken installer

00:05:16,219 --> 00:05:20,449
command Shin can install web UI you have

00:05:18,409 --> 00:05:22,400
a web UI installed Shin can install

00:05:20,449 --> 00:05:25,069
something else you have something else

00:05:22,400 --> 00:05:27,259
installed so you don't have to pay the

00:05:25,069 --> 00:05:34,099
overhead of features you don't want to

00:05:27,259 --> 00:05:35,990
use let's talk a bit about architecture

00:05:34,099 --> 00:05:40,569
I was talking about it is very modular

00:05:35,990 --> 00:05:43,279
in design it is also built for cloud so

00:05:40,569 --> 00:05:45,139
shrinkin is essentially a bunch of

00:05:43,279 --> 00:05:47,870
components or you can say different

00:05:45,139 --> 00:05:50,330
processes this shrink and arbitrary the

00:05:47,870 --> 00:05:52,699
sink and reactional scheduler polar and

00:05:50,330 --> 00:05:54,139
everything by the way let me talk a bit

00:05:52,699 --> 00:05:56,719
about the architecture how does

00:05:54,139 --> 00:05:58,310
monitoring work say you have a you want

00:05:56,719 --> 00:06:03,649
to know the load of your system how will

00:05:58,310 --> 00:06:05,539
you do that anyone so basically you say

00:06:03,649 --> 00:06:07,509
you want to check the load of a remote

00:06:05,539 --> 00:06:09,680
server you can do SSH into the system

00:06:07,509 --> 00:06:14,449
run the uptime command and you have the

00:06:09,680 --> 00:06:15,770
load right so Shinken Nagios and many

00:06:14,449 --> 00:06:18,080
monitoring many of the monitoring

00:06:15,770 --> 00:06:20,060
systems do this polling approach they

00:06:18,080 --> 00:06:23,779
pull the remote servers for the health

00:06:20,060 --> 00:06:25,580
status and you and display it in the UI

00:06:23,779 --> 00:06:30,589
have a loading mechanism and everything

00:06:25,580 --> 00:06:32,060
right so Shinken also does that the the

00:06:30,589 --> 00:06:35,240
component which you can see in the green

00:06:32,060 --> 00:06:39,160
at the bottom the shinken polar actually

00:06:35,240 --> 00:06:41,730
pulls the system at regular intervals

00:06:39,160 --> 00:06:45,760
scheduler is the one who's whose

00:06:41,730 --> 00:06:47,680
instructs polar to perform the check

00:06:45,760 --> 00:06:51,490
whenever required it will shred you late

00:06:47,680 --> 00:06:52,660
every time reactionary is is the

00:06:51,490 --> 00:06:57,040
component which will send you

00:06:52,660 --> 00:07:00,730
notifications alerts events if you want

00:06:57,040 --> 00:07:03,880
to handle something on its own arbitrary

00:07:00,730 --> 00:07:05,980
is a centralized place where you keep

00:07:03,880 --> 00:07:08,350
all your configuration and every and it

00:07:05,980 --> 00:07:10,660
will configure all other components for

00:07:08,350 --> 00:07:13,150
you you don't have to configure each and

00:07:10,660 --> 00:07:15,910
every component broker is something

00:07:13,150 --> 00:07:18,190
which is aware of what is happening in

00:07:15,910 --> 00:07:21,010
all the system and it can provide tools

00:07:18,190 --> 00:07:23,410
on top of it this receiver is an

00:07:21,010 --> 00:07:26,340
optional component for having passive

00:07:23,410 --> 00:07:29,290
checks more of a push base approach

00:07:26,340 --> 00:07:31,450
again when I say it is built for cloud

00:07:29,290 --> 00:07:33,400
each of these modules each of these

00:07:31,450 --> 00:07:35,850
components are independently scalable

00:07:33,400 --> 00:07:39,400
you may have five orbitals ten Polar's

00:07:35,850 --> 00:07:45,670
eleven schedulers all as per you design

00:07:39,400 --> 00:07:48,460
all as per your requirements let's talk

00:07:45,670 --> 00:07:53,110
about a bit about docker Shinken so Daka

00:07:48,460 --> 00:07:57,130
Shinken is a project basically what we

00:07:53,110 --> 00:08:00,690
did was docker eyes shrinking and have

00:07:57,130 --> 00:08:03,430
some of the must-have plugins modules

00:08:00,690 --> 00:08:06,100
pre-installed over here we have three

00:08:03,430 --> 00:08:09,750
varieties of Dokka Shenton one is

00:08:06,100 --> 00:08:13,770
shinken basic shrinking list

00:08:09,750 --> 00:08:16,780
shrinking graphite right so

00:08:13,770 --> 00:08:19,810
basically shrinking basic is just

00:08:16,780 --> 00:08:23,200
providing you the basic UI a shrink and

00:08:19,810 --> 00:08:27,340
web UI and few must have plugins so it

00:08:23,200 --> 00:08:30,490
will provide you another UI again a good

00:08:27,340 --> 00:08:33,820
news for Nagas developers who suck UI is

00:08:30,490 --> 00:08:38,169
a independently developed project and it

00:08:33,820 --> 00:08:40,570
its UI is very similar to nog use so you

00:08:38,169 --> 00:08:44,260
will still feel at home and graphite is

00:08:40,570 --> 00:08:50,860
again providing one more tool for for

00:08:44,260 --> 00:08:53,160
this graph support its do a quick check

00:08:50,860 --> 00:08:56,410
how does it work

00:08:53,160 --> 00:08:58,600
so as I said to the monitoring systems

00:08:56,410 --> 00:09:01,750
are hard so this project aims at

00:08:58,600 --> 00:09:04,149
simplifying the or decreasing the

00:09:01,750 --> 00:09:06,310
learning curve you just have to run

00:09:04,149 --> 00:09:07,690
these three commands and you you are up

00:09:06,310 --> 00:09:11,140
and running with the monitoring system

00:09:07,690 --> 00:09:13,770
let's do it right now the first command

00:09:11,140 --> 00:09:19,290
is just to clone a dhoka dhoka

00:09:13,770 --> 00:09:23,410
repository dakashin can depository and

00:09:19,290 --> 00:09:26,230
i've already in that okay

00:09:23,410 --> 00:09:30,490
the second is to CD to a particular

00:09:26,230 --> 00:09:32,620
directory again let's first check what

00:09:30,490 --> 00:09:35,290
all possible directories are there

00:09:32,620 --> 00:09:37,149
shrinkin basic luck and graphite so

00:09:35,290 --> 00:09:40,209
depending on the image you choose you

00:09:37,149 --> 00:09:44,740
can you can you can CD to the respective

00:09:40,209 --> 00:09:46,570
direct direct creep so let me just do

00:09:44,740 --> 00:09:51,520
that I'm going to choose the third one

00:09:46,570 --> 00:09:56,560
and the third just when the darker

00:09:51,520 --> 00:09:58,420
command bingo my Shinken should be up

00:09:56,560 --> 00:10:01,329
and running the check

00:09:58,420 --> 00:10:03,640
let's check yep so the resolution is a

00:10:01,329 --> 00:10:10,930
bit too small so you cannot see

00:10:03,640 --> 00:10:13,420
everything so the by default to the

00:10:10,930 --> 00:10:17,620
username and password is admin and admin

00:10:13,420 --> 00:10:22,260
which is configurable you can log in

00:10:17,620 --> 00:10:25,600
over here and see the different

00:10:22,260 --> 00:10:28,140
monitoring in place monitoring checks in

00:10:25,600 --> 00:10:30,700
place so I have pre-configured it with

00:10:28,140 --> 00:10:33,550
monitoring docker shrinking the docker

00:10:30,700 --> 00:10:37,510
container itself so you can see a lot of

00:10:33,550 --> 00:10:41,560
different checks I can click on any one

00:10:37,510 --> 00:10:44,170
of them so it gives me a status message

00:10:41,560 --> 00:10:46,300
it also has graph support I have just

00:10:44,170 --> 00:10:50,110
launched the docker container so it

00:10:46,300 --> 00:10:55,180
doesn't have any curves this also

00:10:50,110 --> 00:10:59,500
another UI so I can just type truck and

00:10:55,180 --> 00:11:02,279
over here I get a

00:10:59,500 --> 00:11:02,279
login

00:11:05,589 --> 00:11:12,939
that's it this is very similar to what

00:11:09,069 --> 00:11:15,279
then I guess default UI provides so I

00:11:12,939 --> 00:11:17,589
can click on all the service I can see

00:11:15,279 --> 00:11:20,399
the different services what what is the

00:11:17,589 --> 00:11:20,399
status and everything

00:11:29,149 --> 00:11:35,990
therefore for you to experiment I have

00:11:32,959 --> 00:11:40,930
already set up a demo for you you can

00:11:35,990 --> 00:11:40,930
just log in and play with it if you like

00:11:42,040 --> 00:11:46,959
over here I have not told about told you

00:11:44,990 --> 00:11:52,579
about one thing

00:11:46,959 --> 00:11:54,889
custom conflicts so this is a custom

00:11:52,579 --> 00:11:57,259
conflicts directory is mounted on the

00:11:54,889 --> 00:12:00,860
docker container using the volume

00:11:57,259 --> 00:12:06,319
mounting feature from the daka itself

00:12:00,860 --> 00:12:09,559
right so I have just created different

00:12:06,319 --> 00:12:12,980
folders different hierarchy - to make it

00:12:09,559 --> 00:12:16,850
more understandable so all you have to

00:12:12,980 --> 00:12:19,519
do is just place you configuration file

00:12:16,850 --> 00:12:21,980
over here whenever you want to make any

00:12:19,519 --> 00:12:24,620
change if you want to monitor your hosts

00:12:21,980 --> 00:12:26,480
you can just add you can add your next

00:12:24,620 --> 00:12:28,699
configuration or shrinkin configuration

00:12:26,480 --> 00:12:31,430
over here and you have your good to

00:12:28,699 --> 00:12:34,069
monitor another system now let's check

00:12:31,430 --> 00:12:43,990
what it is required to monitor another

00:12:34,069 --> 00:12:46,699
system till now I was talking about

00:12:43,990 --> 00:12:50,509
shengcún which is an Aggie score

00:12:46,699 --> 00:12:53,240
replacement right now let's talk a bit

00:12:50,509 --> 00:12:56,389
about the client side you want the

00:12:53,240 --> 00:13:00,170
monitor say 20 different hosts or a

00:12:56,389 --> 00:13:04,550
hundred different hosts you will be

00:13:00,170 --> 00:13:09,110
running you will be running an agent on

00:13:04,550 --> 00:13:13,459
those hosts it is nothing new in this is

00:13:09,110 --> 00:13:15,439
nothing about in Candice's this is this

00:13:13,459 --> 00:13:18,259
was there from before I know it P stands

00:13:15,439 --> 00:13:21,139
for negatives remote plug in executor so

00:13:18,259 --> 00:13:24,079
you can install this agent on your

00:13:21,139 --> 00:13:28,040
system and shinken can pull this agent

00:13:24,079 --> 00:13:30,350
for health information and RP is not the

00:13:28,040 --> 00:13:34,220
only way to perform L checks you can do

00:13:30,350 --> 00:13:37,189
L checks via SSH SNMP and others but

00:13:34,220 --> 00:13:39,110
this is the NRP is most commonly used

00:13:37,189 --> 00:13:42,499
for monitoring and I will be talking a

00:13:39,110 --> 00:13:51,939
bit about this so what is required

00:13:42,499 --> 00:13:53,959
for what do you want to monitor so

00:13:51,939 --> 00:13:57,619
generally speaking like you would like

00:13:53,959 --> 00:13:59,239
to monitor system matrixes they're

00:13:57,619 --> 00:14:01,609
basically three three broad categories

00:13:59,239 --> 00:14:06,519
in which you can classify monitoring of

00:14:01,609 --> 00:14:09,859
servers or clients one is system metrics

00:14:06,519 --> 00:14:11,629
second is processing and our processes

00:14:09,859 --> 00:14:16,159
and applications and third one is

00:14:11,629 --> 00:14:20,179
application metrics so for example you

00:14:16,159 --> 00:14:23,509
have system load memory utilization this

00:14:20,179 --> 00:14:26,179
space and all of these you want to keep

00:14:23,509 --> 00:14:31,369
track and these all of these will come

00:14:26,179 --> 00:14:32,809
under applix second is the processes you

00:14:31,369 --> 00:14:34,369
have installed say for example you may

00:14:32,809 --> 00:14:36,469
have installed elasticsearch you may

00:14:34,369 --> 00:14:39,259
have installed Kabana you may have

00:14:36,469 --> 00:14:41,839
installed X Y Z so you want to monitor

00:14:39,259 --> 00:14:45,049
those processes whether they are up and

00:14:41,839 --> 00:14:47,109
running what is the memory CPU

00:14:45,049 --> 00:14:50,029
utilization of those those general

00:14:47,109 --> 00:14:52,789
general monitoring of your application

00:14:50,029 --> 00:14:55,129
is I would say process monitoring third

00:14:52,789 --> 00:14:58,579
is application metrics say you may have

00:14:55,129 --> 00:15:01,149
a master slave set up you want you may

00:14:58,579 --> 00:15:03,829
want to monitor what is the lag

00:15:01,149 --> 00:15:07,689
replication lag you may have elastic

00:15:03,829 --> 00:15:12,489
search setup you may want to monitor the

00:15:07,689 --> 00:15:14,689
different shoutings and so on so

00:15:12,489 --> 00:15:20,029
basically you can classify monitoring

00:15:14,689 --> 00:15:23,899
into three categories let's look at NRP

00:15:20,029 --> 00:15:26,569
and and see how does how can we

00:15:23,899 --> 00:15:29,389
configure a simple monitoring so I can

00:15:26,569 --> 00:15:32,929
just do an LP installation using app or

00:15:29,389 --> 00:15:34,999
jump back jump packaging manager app get

00:15:32,929 --> 00:15:38,769
install negatives and our PE server and

00:15:34,999 --> 00:15:44,299
I am done this is the default

00:15:38,769 --> 00:15:47,149
configuration file and our Piedad CFG if

00:15:44,299 --> 00:15:50,179
you notice there will be a line and

00:15:47,149 --> 00:15:53,149
towards the end include NRP local dot

00:15:50,179 --> 00:15:55,399
CFG so I would recommend you tube modify

00:15:53,149 --> 00:15:57,970
this file instead of modifying the

00:15:55,399 --> 00:15:57,970
original one

00:15:59,350 --> 00:16:08,870
so let's check I have already installed

00:16:03,230 --> 00:16:11,690
and nagisa-san RP server yeah so this is

00:16:08,870 --> 00:16:14,570
a very descriptive an RP configuration

00:16:11,690 --> 00:16:17,529
the default one you have different

00:16:14,570 --> 00:16:20,540
options and everything most of it I

00:16:17,529 --> 00:16:22,130
think you you will you will not have to

00:16:20,540 --> 00:16:24,500
touch test them if you want to change

00:16:22,130 --> 00:16:29,839
the server port by default it is five

00:16:24,500 --> 00:16:32,300
triple six from the shinken server or

00:16:29,839 --> 00:16:36,470
the Nagios you connect to the remote

00:16:32,300 --> 00:16:37,730
server using IP based authentication so

00:16:36,470 --> 00:16:41,630
there will be something called allowed

00:16:37,730 --> 00:16:44,029
host you can see over here so we can add

00:16:41,630 --> 00:16:49,790
different IP addresses comma separated

00:16:44,029 --> 00:16:54,140
IP addresses or cidr and different links

00:16:49,790 --> 00:16:57,110
at the end you can see include NRP local

00:16:54,140 --> 00:16:59,600
dot CFG so whatever is defined is by

00:16:57,110 --> 00:17:00,850
default you include an LP local and it

00:16:59,600 --> 00:17:03,589
will be overwritten

00:17:00,850 --> 00:17:08,170
so what will you what do you want to

00:17:03,589 --> 00:17:11,380
overwrite most common thing is something

00:17:08,170 --> 00:17:14,689
you would you will have to validate you

00:17:11,380 --> 00:17:17,689
shrinking server so allowed host you

00:17:14,689 --> 00:17:21,100
will write to I want to I want to allow

00:17:17,689 --> 00:17:26,240
my shinken host to connect to an LP

00:17:21,100 --> 00:17:28,580
second is like don't plain NRP don't

00:17:26,240 --> 00:17:31,520
blame NRP is option for enabling

00:17:28,580 --> 00:17:35,809
arguments by default it is disabled and

00:17:31,520 --> 00:17:39,260
it is considered as a security risk so

00:17:35,809 --> 00:17:42,350
if if you want to enable it you can

00:17:39,260 --> 00:17:45,530
enable it using the by having the value

00:17:42,350 --> 00:17:48,740
as 1 and the third thing is the most

00:17:45,530 --> 00:17:52,160
important that is NRP commands think of

00:17:48,740 --> 00:17:54,590
it as a key value pair the key being the

00:17:52,160 --> 00:17:58,130
command and the value being the actual

00:17:54,590 --> 00:18:01,910
shell command you want to execute now

00:17:58,130 --> 00:18:04,040
again those commands are called NRP

00:18:01,910 --> 00:18:06,290
plugins which can be written in any

00:18:04,040 --> 00:18:08,890
language including python ruby go

00:18:06,290 --> 00:18:08,890
whatever

00:18:08,960 --> 00:18:15,470
some lot of plugins is already available

00:18:11,920 --> 00:18:19,730
you can install NRP plugins to have a

00:18:15,470 --> 00:18:23,380
bunch of plugins available with you so

00:18:19,730 --> 00:18:25,790
this has a two there are two examples

00:18:23,380 --> 00:18:31,970
now let's look at the server side

00:18:25,790 --> 00:18:38,060
shinken before me here again there are

00:18:31,970 --> 00:18:42,280
three things think of a command you want

00:18:38,060 --> 00:18:44,780
to execute and then the command will be

00:18:42,280 --> 00:18:48,500
will be executed by services and

00:18:44,780 --> 00:18:50,630
services will be services are present in

00:18:48,500 --> 00:18:53,660
a for a particular host right so think

00:18:50,630 --> 00:18:55,460
of this hierarchy Jeff commands which

00:18:53,660 --> 00:18:57,650
can be used by multiple services a

00:18:55,460 --> 00:18:58,480
service which can be imported by

00:18:57,650 --> 00:19:01,910
multiple hosts

00:18:58,480 --> 00:19:04,730
right so command definition comes in the

00:19:01,910 --> 00:19:07,510
beginning I have written to command

00:19:04,730 --> 00:19:09,860
definition which is by default present

00:19:07,510 --> 00:19:12,920
just for the demo purpose I have written

00:19:09,860 --> 00:19:16,940
this checking out P and check an RP with

00:19:12,920 --> 00:19:21,170
optional arguments then you define a

00:19:16,940 --> 00:19:22,730
host just the hostname use generic host

00:19:21,170 --> 00:19:24,560
that is a shinken template you can

00:19:22,730 --> 00:19:25,130
define all your common configuration

00:19:24,560 --> 00:19:27,050
over there

00:19:25,130 --> 00:19:31,660
by default it has a bunch of common

00:19:27,050 --> 00:19:31,660
configuration and finally the address

00:19:33,550 --> 00:19:39,290
service definition service definition is

00:19:36,860 --> 00:19:42,320
the actual CIM actual checks you want to

00:19:39,290 --> 00:19:43,790
perform check the anus and load per CPU

00:19:42,320 --> 00:19:47,180
are the two service definitions have

00:19:43,790 --> 00:19:51,500
defined over here again use generic

00:19:47,180 --> 00:19:55,580
service as a template over there you

00:19:51,500 --> 00:19:57,770
have a bunch of common common attributes

00:19:55,580 --> 00:20:01,400
defined like what is the check interval

00:19:57,770 --> 00:20:05,330
what are the different people who should

00:20:01,400 --> 00:20:08,210
be notified if there's a alert and so on

00:20:05,330 --> 00:20:11,300
host name is shrinkin this was defined

00:20:08,210 --> 00:20:14,810
in my previous previous definition whose

00:20:11,300 --> 00:20:17,270
definition and finally they check check

00:20:14,810 --> 00:20:19,220
NRP the commanding checking our P and

00:20:17,270 --> 00:20:21,290
the actual command name I want to

00:20:19,220 --> 00:20:22,990
execute and the second one is with

00:20:21,290 --> 00:20:32,900
arguments

00:20:22,990 --> 00:20:39,530
like let's do a quick demo of this so as

00:20:32,900 --> 00:20:41,330
I said I have just allowed my object

00:20:39,530 --> 00:20:44,210
added the authentication for different

00:20:41,330 --> 00:20:48,830
hosts including my daughter shinken so I

00:20:44,210 --> 00:20:53,480
can just do so this is the IP of my

00:20:48,830 --> 00:20:56,720
docker container I am trying to I am

00:20:53,480 --> 00:20:59,360
running my docker container to to

00:20:56,720 --> 00:21:01,400
monitor my local host itself the host

00:20:59,360 --> 00:21:04,150
which is running the docker so I'm going

00:21:01,400 --> 00:21:06,680
to use this local IP if you are

00:21:04,150 --> 00:21:08,810
monitoring a remote host with public IP

00:21:06,680 --> 00:21:10,970
maybe you will have you will have to

00:21:08,810 --> 00:21:12,430
write the public IP over here so you

00:21:10,970 --> 00:21:15,680
will have to wait list the public a

00:21:12,430 --> 00:21:18,170
right this is something which I have

00:21:15,680 --> 00:21:26,660
already wait-listed you can see see it

00:21:18,170 --> 00:21:28,790
over here and this one more thing the

00:21:26,660 --> 00:21:32,080
custom convex directory which I have

00:21:28,790 --> 00:21:35,000
talked about you can place your

00:21:32,080 --> 00:21:37,390
configurations you can just modify the

00:21:35,000 --> 00:21:41,150
configuration you can add and remove

00:21:37,390 --> 00:21:42,800
your configuration files and shrinkin

00:21:41,150 --> 00:21:43,970
will automatically detect that docker

00:21:42,800 --> 00:21:46,130
Shinken will actually automatically

00:21:43,970 --> 00:21:48,080
detect that so I am going to just do

00:21:46,130 --> 00:21:54,860
that I have a setup ready

00:21:48,080 --> 00:21:59,780
so def thought local so this is how I am

00:21:54,860 --> 00:22:02,510
defining my host some services these are

00:21:59,780 --> 00:22:06,680
these commands check users and check

00:22:02,510 --> 00:22:10,310
load where are pre pre defined in the

00:22:06,680 --> 00:22:12,110
negative NRP default configuration so I

00:22:10,310 --> 00:22:17,000
am just using those instead of defining

00:22:12,110 --> 00:22:21,560
my own and what I am going to do is just

00:22:17,000 --> 00:22:27,450
copy def dot local to custom conflicts

00:22:21,560 --> 00:22:37,320
directory that's it let's check what's

00:22:27,450 --> 00:22:38,849
oh I forgot one thing all the all the

00:22:37,320 --> 00:22:42,479
configuration file for shrinking should

00:22:38,849 --> 00:22:45,509
be with dot CFG extension so custom

00:22:42,479 --> 00:22:50,820
conflicts def dot local and Krishnam

00:22:45,509 --> 00:22:55,519
conflicts def dot local dot c mg right

00:22:50,820 --> 00:22:55,519
and I can see the fresh over here

00:23:04,720 --> 00:23:13,929
that's it so it is done right now so it

00:23:10,659 --> 00:23:16,989
will take I can just probably just force

00:23:13,929 --> 00:23:25,409
initiate a few checks select all of

00:23:16,989 --> 00:23:25,409
these reach it so ping is okay

00:23:28,220 --> 00:23:35,419
check ht1 is critical because the device

00:23:31,700 --> 00:23:38,929
does not exist in this particular device

00:23:35,419 --> 00:23:40,460
does not exist and it is showing

00:23:38,929 --> 00:23:42,860
critical there are a few others things

00:23:40,460 --> 00:23:51,610
other things like the check load and

00:23:42,860 --> 00:23:56,659
everything we have it to him right so

00:23:51,610 --> 00:23:58,370
again for the UN everything you can have

00:23:56,659 --> 00:24:02,210
you can look at the demo yourself

00:23:58,370 --> 00:24:07,190
shrinkin Detroit dot IO and the project

00:24:02,210 --> 00:24:11,299
is of available open source in Gator so

00:24:07,190 --> 00:24:13,400
let's talk a bit about why how this

00:24:11,299 --> 00:24:15,919
project can help as I said monitoring

00:24:13,400 --> 00:24:19,370
systems are out now you have a basic

00:24:15,919 --> 00:24:26,179
setup ready with graphs and everything

00:24:19,370 --> 00:24:30,049
with you right a lot of plugins is P P

00:24:26,179 --> 00:24:32,510
is already available with you you can

00:24:30,049 --> 00:24:34,909
slowly start understanding monitoring

00:24:32,510 --> 00:24:40,100
systems the learning curve is not like

00:24:34,909 --> 00:24:42,409
this no it is kind of flat and gradually

00:24:40,100 --> 00:24:45,039
build up your understanding on the

00:24:42,409 --> 00:24:48,409
monitoring domain and start learning how

00:24:45,039 --> 00:24:51,470
yes so one experience I would like to

00:24:48,409 --> 00:24:54,799
share about the transition from nagesh

00:24:51,470 --> 00:24:56,780
to shrinkin so one of the experience i

00:24:54,799 --> 00:24:59,539
would like to share is the transition of

00:24:56,780 --> 00:25:02,659
negatives from transition from nagesh to

00:24:59,539 --> 00:25:04,789
shenkin so at Knoll arity I work at

00:25:02,659 --> 00:25:09,140
molarity at molarity we were using the

00:25:04,789 --> 00:25:11,990
use hello at new light II we were using

00:25:09,140 --> 00:25:16,970
NAG use and we had a lot of problems

00:25:11,990 --> 00:25:21,610
with the way it was deployed and the

00:25:16,970 --> 00:25:27,470
features it was providing so we have a

00:25:21,610 --> 00:25:29,299
we have a deployment of cloud plus data

00:25:27,470 --> 00:25:32,330
centers we have a centralized cloud

00:25:29,299 --> 00:25:34,400
platform where we have our applications

00:25:32,330 --> 00:25:38,419
and we have various data centers which

00:25:34,400 --> 00:25:41,600
is required as per our business so some

00:25:38,419 --> 00:25:45,920
may be in some data centers in say Delhi

00:25:41,600 --> 00:25:49,520
Bangalore Dubai and so on so with the

00:25:45,920 --> 00:25:52,910
Shinken as I said it is it is it is

00:25:49,520 --> 00:25:57,320
built for cloud and it's supposed it

00:25:52,910 --> 00:26:01,640
supports distributed architecture I was

00:25:57,320 --> 00:26:04,610
able to I just did one thing the shinken

00:26:01,640 --> 00:26:08,090
polis which actually polls the remote

00:26:04,610 --> 00:26:10,820
systems for health checks just I did one

00:26:08,090 --> 00:26:15,620
in each of the data centers and I am

00:26:10,820 --> 00:26:17,390
done I can I have really distributed

00:26:15,620 --> 00:26:19,610
monitoring system I can monitor each of

00:26:17,390 --> 00:26:22,820
the hosts within then within a data

00:26:19,610 --> 00:26:25,310
center using local IPS but in case of

00:26:22,820 --> 00:26:32,180
Nagios it may be it it is still possible

00:26:25,310 --> 00:26:38,050
but it is not that intuitive so that was

00:26:32,180 --> 00:26:39,380
the use case which I wanted to share and

00:26:38,050 --> 00:26:41,750
that's it

00:26:39,380 --> 00:26:44,600
I think I'm done quite early I have a

00:26:41,750 --> 00:26:47,180
lot of time left I would love to hear

00:26:44,600 --> 00:26:49,790
your questions it should trigger some

00:26:47,180 --> 00:26:52,610
emails or it should triggers some

00:26:49,790 --> 00:26:56,030
instruments to the the person which we

00:26:52,610 --> 00:26:58,100
have configured I mean the mobile number

00:26:56,030 --> 00:27:04,760
we have configured all the email we have

00:26:58,100 --> 00:27:07,970
do we have any any system execution

00:27:04,760 --> 00:27:12,440
engine you can think of like that it is

00:27:07,970 --> 00:27:15,710
scheduling and and executing whatever

00:27:12,440 --> 00:27:20,900
you write you can write whatever you

00:27:15,710 --> 00:27:22,820
want so which I have showed you like so

00:27:20,900 --> 00:27:25,850
he's a shrink in command you can see

00:27:22,820 --> 00:27:28,280
there's a check and RP this is not

00:27:25,850 --> 00:27:31,400
something shrink and specific it is a it

00:27:28,280 --> 00:27:35,330
is a it is an independent program and

00:27:31,400 --> 00:27:38,810
and shinken is doing a system call call

00:27:35,330 --> 00:27:42,770
this to perform a remote truck check in

00:27:38,810 --> 00:27:45,560
the system right once it receives the

00:27:42,770 --> 00:27:47,480
value it will evaluate and I have have

00:27:45,560 --> 00:27:49,600
it in the UI send notifications or

00:27:47,480 --> 00:27:52,850
whatever like this there are lot of

00:27:49,600 --> 00:27:55,040
community plugins available for email

00:27:52,850 --> 00:27:59,570
check for emails

00:27:55,040 --> 00:28:05,630
I've also open sourced one AWS ACS based

00:27:59,570 --> 00:28:09,230
notification plug-in there are many for

00:28:05,630 --> 00:28:11,270
like HipChat there's a saying plug-in I

00:28:09,230 --> 00:28:13,940
guess that is the name which you can use

00:28:11,270 --> 00:28:16,790
to sync if chat notification for SMS you

00:28:13,940 --> 00:28:19,280
can have something like if you are in if

00:28:16,790 --> 00:28:23,960
you have used to video or play vu you

00:28:19,280 --> 00:28:27,440
can use those or you can build your own

00:28:23,960 --> 00:28:32,870
plug-in for way to SMS in India and so

00:28:27,440 --> 00:28:34,790
on that's it like check NRP is making a

00:28:32,870 --> 00:28:38,210
system : this is a very basic command

00:28:34,790 --> 00:28:42,470
right this is also module which can help

00:28:38,210 --> 00:28:44,929
a wide system calls and do the remote

00:28:42,470 --> 00:28:46,669
network call directly from the shrink

00:28:44,929 --> 00:28:48,919
and polar there's a boost in an RP

00:28:46,669 --> 00:28:50,470
module so there may be some an RP Morris

00:28:48,919 --> 00:28:52,820
there may be some shrinking modules

00:28:50,470 --> 00:29:00,020
which can help you do the same without

00:28:52,820 --> 00:29:02,090
making a system call as well I nice

00:29:00,020 --> 00:29:04,400
introduction to Shinken I've been using

00:29:02,090 --> 00:29:06,710
nag years from more than three four

00:29:04,400 --> 00:29:09,919
years one thing I'm annoyed with my

00:29:06,710 --> 00:29:12,020
girls is the way it keeps graphical

00:29:09,919 --> 00:29:15,220
information historical data the shrink

00:29:12,020 --> 00:29:15,220
can do anything better in that area

00:29:15,760 --> 00:29:25,250
built a new relic I talked a bit about

00:29:20,770 --> 00:29:27,500
Qi right yes Qi is an independent

00:29:25,250 --> 00:29:31,990
project which can be integrated saying I

00:29:27,500 --> 00:29:35,900
use shrinking monitoring systems as well

00:29:31,990 --> 00:29:39,559
thank you I can be integrated with

00:29:35,900 --> 00:29:42,290
Chinkin using life status API life

00:29:39,559 --> 00:29:45,830
status API is faster than status dot dot

00:29:42,290 --> 00:29:48,710
dot that passing in Nagas there's a

00:29:45,830 --> 00:29:50,980
status toward that file which is being

00:29:48,710 --> 00:29:55,669
passed for all the status information

00:29:50,980 --> 00:29:59,840
so in that sense it is faster second you

00:29:55,669 --> 00:30:02,120
can have you can enable logging in life

00:29:59,840 --> 00:30:04,370
status API and you can have all your

00:30:02,120 --> 00:30:06,850
historical information you can you can

00:30:04,370 --> 00:30:08,620
check the availability status the

00:30:06,850 --> 00:30:11,200
you can generate all sorts of reports

00:30:08,620 --> 00:30:13,770
and everything alright I'll give it a

00:30:11,200 --> 00:30:13,770
try thank you

00:30:20,280 --> 00:30:25,110
thank you to wait for the session so you

00:30:23,039 --> 00:30:27,270
know this is more of an advice from me I

00:30:25,110 --> 00:30:28,830
mean I must put an address from you you

00:30:27,270 --> 00:30:30,750
know what would be the basic monitor

00:30:28,830 --> 00:30:32,309
recommends for a startup which has

00:30:30,750 --> 00:30:34,590
couple of applications over and one

00:30:32,309 --> 00:30:36,030
database over and has only got you know

00:30:34,590 --> 00:30:38,250
handful of developers and note any

00:30:36,030 --> 00:30:40,350
DevOps person so you know what would you

00:30:38,250 --> 00:30:42,600
what would you suggest that we I mean

00:30:40,350 --> 00:30:45,210
what kind of basic monitoring services

00:30:42,600 --> 00:30:47,789
that we should be using right so that is

00:30:45,210 --> 00:30:50,340
whatever right that's a beautiful

00:30:47,789 --> 00:30:53,700
question I've I've also interacted with

00:30:50,340 --> 00:30:56,520
few people from really small startups

00:30:53,700 --> 00:31:00,360
and when I talk about monitoring they

00:30:56,520 --> 00:31:02,390
say we are not doing it what it is so

00:31:00,360 --> 00:31:04,799
yeah from the developer point of view

00:31:02,390 --> 00:31:07,350
monitoring is something which is often

00:31:04,799 --> 00:31:09,510
ignored and really small startups don't

00:31:07,350 --> 00:31:11,669
do that dude don't do that when

00:31:09,510 --> 00:31:15,299
customers start asking for availability

00:31:11,669 --> 00:31:18,360
they think yeah we have to do it so this

00:31:15,299 --> 00:31:20,429
is one reason docker shinken can help

00:31:18,360 --> 00:31:23,820
reduce the learn learning curve and you

00:31:20,429 --> 00:31:25,409
can have your monitoring system in you

00:31:23,820 --> 00:31:29,370
can have your in-house monitoring system

00:31:25,409 --> 00:31:32,669
a lot of people in startups who use some

00:31:29,370 --> 00:31:37,820
hosted service as well like data dog is

00:31:32,669 --> 00:31:40,380
very popular nowadays for application

00:31:37,820 --> 00:31:42,630
New Relic he is also being used a lot

00:31:40,380 --> 00:31:44,370
but it is more from the app from the

00:31:42,630 --> 00:31:46,770
application from application point of

00:31:44,370 --> 00:31:50,220
view but some people use it for system

00:31:46,770 --> 00:31:52,110
as well I think yeah so I would suggest

00:31:50,220 --> 00:31:54,630
you if you want to have your in-house

00:31:52,110 --> 00:31:56,549
monitoring system you have better

00:31:54,630 --> 00:31:59,640
control of what's happening in your

00:31:56,549 --> 00:32:05,039
infrastructure you can start with docker

00:31:59,640 --> 00:32:06,840
shinken and then as you I joined as your

00:32:05,039 --> 00:32:10,789
requirements crew I so understanding

00:32:06,840 --> 00:32:13,470
becomes better you can probably start

00:32:10,789 --> 00:32:18,059
building on top of it or having maybe a

00:32:13,470 --> 00:32:19,799
dedicated set up all right I think we

00:32:18,059 --> 00:32:22,280
are done thank you for being you know

00:32:19,799 --> 00:32:22,280
some audience

00:32:23,559 --> 00:32:28,429
thank you drew it for such an amazing

00:32:26,510 --> 00:32:31,570
talk Vikon India would like to present

00:32:28,429 --> 00:32:31,570

YouTube URL: https://www.youtube.com/watch?v=piM30OavEdk


