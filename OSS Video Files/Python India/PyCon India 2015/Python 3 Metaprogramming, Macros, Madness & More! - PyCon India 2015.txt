Title: Python 3 Metaprogramming, Macros, Madness & More! - PyCon India 2015
Publication date: 2015-10-11
Playlist: PyCon India 2015
Description: 
	Speaker: Suhas SG

Ever wanted to conquer the world, but just fell short of not knowing how to write code that writes code to conquer the world?

At the end of this talk, you will be able to understand metaprogramming and its different forms, write a decorator, a metaclass, and look more deeper into Python than you ever have!

Details: https://in.pycon.org/cfp/pycon-india-2015/proposals/python-3-metaprogramming-macros-madness-more/
Captions: 
	00:00:00,000 --> 00:00:05,580
is fightin three metaprogramming macros

00:00:02,970 --> 00:00:07,950
madness and more the session will start

00:00:05,580 --> 00:00:11,389
at 4 p.m. so I guess we are like 5

00:00:07,950 --> 00:00:13,860
minutes remaining for the four right yes

00:00:11,389 --> 00:00:16,859
so they'll be starting in 5 minutes

00:00:13,860 --> 00:00:19,050
the I would ask the people who are

00:00:16,859 --> 00:00:20,970
sitting on the first floor if it is

00:00:19,050 --> 00:00:24,029
possible for you you can just come down

00:00:20,970 --> 00:00:26,490
so that the the ppts or the promoters

00:00:24,029 --> 00:00:29,340
this slides or something would be

00:00:26,490 --> 00:00:33,059
visible if you are comfortable in there

00:00:29,340 --> 00:00:35,280
and then it's ok but ok so we are

00:00:33,059 --> 00:00:38,100
starting with the session other session

00:00:35,280 --> 00:00:41,280
is on Python 3 meta programming macros

00:00:38,100 --> 00:00:44,280
madness and more this a speaker for this

00:00:41,280 --> 00:00:46,530
session is soo Hass SG so us is a data

00:00:44,280 --> 00:00:49,379
scientist at grambler and was previously

00:00:46,530 --> 00:00:52,070
an engineer at Verisign so I would like

00:00:49,379 --> 00:00:55,500
a request who has to start the session

00:00:52,070 --> 00:00:57,329
cool thanks for those of you who were

00:00:55,500 --> 00:00:58,859
here five minutes before sorry that you

00:00:57,329 --> 00:01:01,949
caught me red-handed editing the slides

00:00:58,859 --> 00:01:04,710
in the last minute ok let's start

00:01:01,949 --> 00:01:06,540
metaprogramming and all my slides are

00:01:04,710 --> 00:01:09,869
i've given the link to these slides on

00:01:06,540 --> 00:01:12,119
my twitter wall so it's @j AR g and AR

00:01:09,869 --> 00:01:13,470
and if you go to the link and click on

00:01:12,119 --> 00:01:15,299
that link that's on my Twitter wall you

00:01:13,470 --> 00:01:18,390
can follow my presentation live as I

00:01:15,299 --> 00:01:22,979
change the slides and do follow me on

00:01:18,390 --> 00:01:25,100
github as well jay-ar GN AR this talk i

00:01:22,979 --> 00:01:28,470
hope you had good tea and coffee because

00:01:25,100 --> 00:01:31,079
not much slides and a lot of dirty

00:01:28,470 --> 00:01:35,130
coding i hope there will be no errors

00:01:31,079 --> 00:01:37,729
let's go so what is meta programming so

00:01:35,130 --> 00:01:40,250
meta programming is writing code

00:01:37,729 --> 00:01:43,140
notification cool meta programming is

00:01:40,250 --> 00:01:45,869
code that manipulates code so

00:01:43,140 --> 00:01:47,250
traditionally code is you think that

00:01:45,869 --> 00:01:49,799
code is something that manipulates data

00:01:47,250 --> 00:01:53,189
but then meta programs are programs that

00:01:49,799 --> 00:01:54,960
manipulate code themselves so a classic

00:01:53,189 --> 00:01:58,259
example of a meta program is a compiler

00:01:54,960 --> 00:02:00,689
itself so what a compiler does is it

00:01:58,259 --> 00:02:01,799
takes code from one source language and

00:02:00,689 --> 00:02:03,450
converts it into one of the source

00:02:01,799 --> 00:02:05,159
language so compiler is a classic meta

00:02:03,450 --> 00:02:06,750
program anything that involves

00:02:05,159 --> 00:02:08,759
manipulating anything that involves

00:02:06,750 --> 00:02:10,890
inspecting anything that involves doing

00:02:08,759 --> 00:02:12,400
something with code itself and not data

00:02:10,890 --> 00:02:17,980
is a program

00:02:12,400 --> 00:02:19,780
but why do we need to meet a program why

00:02:17,980 --> 00:02:21,760
do we need code that should manipulate

00:02:19,780 --> 00:02:24,819
code can't people do can't people do it

00:02:21,760 --> 00:02:27,939
themselves good question let's look at

00:02:24,819 --> 00:02:30,340
why we can't so the biggest reason is

00:02:27,939 --> 00:02:34,510
people are different and what I mean by

00:02:30,340 --> 00:02:35,859
this is my thinking is invariably

00:02:34,510 --> 00:02:37,930
different from your thinking and let's

00:02:35,859 --> 00:02:40,120
see let's see an example of how people

00:02:37,930 --> 00:02:42,849
can be different cool

00:02:40,120 --> 00:02:44,620
so before going to the tab that's on my

00:02:42,849 --> 00:02:46,629
right they're a good indicator of

00:02:44,620 --> 00:02:50,769
difference in people as Google searches

00:02:46,629 --> 00:02:53,680
right so if I go to google.com and if I

00:02:50,769 --> 00:02:55,750
type how do I type something Google

00:02:53,680 --> 00:03:00,489
gives me Auto suggestions and these auto

00:02:55,750 --> 00:03:01,989
suggestions are Google kind of puts

00:03:00,489 --> 00:03:03,609
these Auto such incidents to the region

00:03:01,989 --> 00:03:05,590
and what people are thinking in that

00:03:03,609 --> 00:03:07,269
region so if I go to google.com kay and

00:03:05,590 --> 00:03:08,230
search how do I do something it's going

00:03:07,269 --> 00:03:12,519
to give me a different set of auto

00:03:08,230 --> 00:03:14,500
suggestions so we kind of did a hook

00:03:12,519 --> 00:03:17,769
into Google and saw what people are

00:03:14,500 --> 00:03:19,840
thinking right so if I type in how to in

00:03:17,769 --> 00:03:23,049
Google Doc or odd and Indians want to

00:03:19,840 --> 00:03:25,510
know how to kiss if I do how to in

00:03:23,049 --> 00:03:28,000
Britain Britain British people want to

00:03:25,510 --> 00:03:29,709
know how to make pancakes the United

00:03:28,000 --> 00:03:32,319
States the Americans want to know how to

00:03:29,709 --> 00:03:34,870
tie a tie you can explore right you can

00:03:32,319 --> 00:03:36,790
see what people are doing Indians want

00:03:34,870 --> 00:03:39,549
to know if Indian girls want to know if

00:03:36,790 --> 00:03:41,620
he loves her and the British is want to

00:03:39,549 --> 00:03:42,699
know how to renew their Passport wow we

00:03:41,620 --> 00:03:48,579
have different priorities in life

00:03:42,699 --> 00:03:51,790
clearly so what people definitely think

00:03:48,579 --> 00:03:54,579
differently right so one of the example

00:03:51,790 --> 00:03:57,639
of how people think differently this is

00:03:54,579 --> 00:03:59,049
a recruiter search that Graham the Aviat

00:03:57,639 --> 00:04:00,699
Graham that have built earlier many of

00:03:59,049 --> 00:04:02,290
you might have seen this in some of our

00:04:00,699 --> 00:04:05,079
earlier talks but let me go through this

00:04:02,290 --> 00:04:07,510
what this is so it's a network graph of

00:04:05,079 --> 00:04:09,010
all the people that are on github in a

00:04:07,510 --> 00:04:10,510
particular region for in this instance

00:04:09,010 --> 00:04:12,220
we've taken a network graph of all the

00:04:10,510 --> 00:04:17,530
people who are in Bangalore right and

00:04:12,220 --> 00:04:19,000
the color here represents in the middle

00:04:17,530 --> 00:04:21,400
a lot of greens in the middle so that's

00:04:19,000 --> 00:04:25,090
a lot of popularity for Python and Ruby

00:04:21,400 --> 00:04:26,500
for example so the software ecosystem is

00:04:25,090 --> 00:04:29,110
diverse

00:04:26,500 --> 00:04:30,820
the choice of languages are diverse the

00:04:29,110 --> 00:04:32,320
choice of ecosystem is different

00:04:30,820 --> 00:04:37,540
everything is different right so people

00:04:32,320 --> 00:04:39,400
are different right why do we meta

00:04:37,540 --> 00:04:40,900
program people are different another

00:04:39,400 --> 00:04:43,480
reason it's ridiculously fun to do and

00:04:40,900 --> 00:04:47,950
let's see how that yesterday let's have

00:04:43,480 --> 00:04:49,990
some fun right cool directly to code now

00:04:47,950 --> 00:04:51,460
functions how many of you have written

00:04:49,990 --> 00:04:52,630
Python functions I'm sure most of you

00:04:51,460 --> 00:04:54,640
have written Python functions this is a

00:04:52,630 --> 00:04:58,060
classic Python function what it does is

00:04:54,640 --> 00:04:59,919
returns sum of two numbers quite an

00:04:58,060 --> 00:05:01,870
simple to understand

00:04:59,919 --> 00:05:04,030
so everything in Python is an object

00:05:01,870 --> 00:05:05,710
when I say everything everything is even

00:05:04,030 --> 00:05:08,140
function is the first class object so

00:05:05,710 --> 00:05:10,390
what this means is regular operations

00:05:08,140 --> 00:05:12,340
that are possible on object like

00:05:10,390 --> 00:05:14,530
addition subtraction everything is

00:05:12,340 --> 00:05:16,270
possible for the function to yes it is

00:05:14,530 --> 00:05:17,410
possible so function is a first-class

00:05:16,270 --> 00:05:21,880
object and we will see how it is

00:05:17,410 --> 00:05:22,900
possible so keywords and arcs to look

00:05:21,880 --> 00:05:25,060
for those of you who aren't aware

00:05:22,900 --> 00:05:27,010
functions accepts odd stars and star

00:05:25,060 --> 00:05:30,190
star quads so what they are basically is

00:05:27,010 --> 00:05:32,410
when you have add 2 comma 2 and ask for

00:05:30,190 --> 00:05:33,940
equal to 2 here basically as float is

00:05:32,410 --> 00:05:36,310
taken as the keyword AAG to come into

00:05:33,940 --> 00:05:38,440
who's taken as the args so you can for

00:05:36,310 --> 00:05:39,970
that same function add if you pass as

00:05:38,440 --> 00:05:41,919
float is equal to true it's going to

00:05:39,970 --> 00:05:44,800
return it in the float so it checks if

00:05:41,919 --> 00:05:46,780
as float if the key ask for so this is

00:05:44,800 --> 00:05:47,860
the key right so it says classic Python

00:05:46,780 --> 00:05:49,900
dictionary this is the key and this is

00:05:47,860 --> 00:05:51,430
the value so it takes if as float is in

00:05:49,900 --> 00:05:53,979
the dictionary keyword ops when we

00:05:51,430 --> 00:05:55,450
return a float of some so some of Arc's

00:05:53,979 --> 00:05:57,300
basically asks is the list so I can just

00:05:55,450 --> 00:05:59,729
do some of hogs and it returns me as sum

00:05:57,300 --> 00:06:02,080
so far so good

00:05:59,729 --> 00:06:05,140
functions can be passed functions can be

00:06:02,080 --> 00:06:06,760
returned so the first example up there

00:06:05,140 --> 00:06:08,740
as apply func which takes a function

00:06:06,760 --> 00:06:11,620
takes a set of arguments and then it

00:06:08,740 --> 00:06:14,440
returns it basically learns that

00:06:11,620 --> 00:06:15,430
function applied on itself and then

00:06:14,440 --> 00:06:17,590
there's closure

00:06:15,430 --> 00:06:18,820
so what's closure so I have a make adder

00:06:17,590 --> 00:06:20,680
and then I define it's a higher-order

00:06:18,820 --> 00:06:22,570
function and then I define a function

00:06:20,680 --> 00:06:23,890
within that function and then return

00:06:22,570 --> 00:06:26,140
that function so you can do some things

00:06:23,890 --> 00:06:29,340
like add 3 equal to make adder 3 and

00:06:26,140 --> 00:06:32,979
then add 3 of 5 add 3 of 10 it keeps on

00:06:29,340 --> 00:06:34,870
adding on to that so if I make add 4 is

00:06:32,979 --> 00:06:36,700
equal to make adder of 4 and then to add

00:06:34,870 --> 00:06:39,990
4 or 5 good it's going to return me 9

00:06:36,700 --> 00:06:41,580
and so on cool quick exercise

00:06:39,990 --> 00:06:43,890
go to coding let's write a function that

00:06:41,580 --> 00:06:48,930
only executes functions whose names are

00:06:43,890 --> 00:06:56,760
cool okay so this keyboard shortcut has

00:06:48,930 --> 00:07:05,610
me windows 10 cool this is a console and

00:06:56,760 --> 00:07:08,040
let me open a quick editor wait let me

00:07:05,610 --> 00:07:17,400
go to the live directory and let's say

00:07:08,040 --> 00:07:18,780
create in you cool alright so what we do

00:07:17,400 --> 00:07:23,040
is define a function

00:07:18,780 --> 00:07:26,550
no cool funks only and which accepts a

00:07:23,040 --> 00:07:30,020
function and arguments you can see that

00:07:26,550 --> 00:07:33,240
right let me increase that point cool

00:07:30,020 --> 00:07:36,990
let's say it accepts these two and then

00:07:33,240 --> 00:07:39,090
there is a property in Python 3 that's

00:07:36,990 --> 00:07:41,790
called underscore underscore call name

00:07:39,090 --> 00:07:48,480
before I go there let me quickly show

00:07:41,790 --> 00:07:51,360
you what call name does right so the sum

00:07:48,480 --> 00:07:56,670
function let's see

00:07:51,360 --> 00:07:58,700
oops I'm not good with a regular Python

00:07:56,670 --> 00:07:58,700
shell

00:08:01,479 --> 00:08:04,620
good so

00:08:06,750 --> 00:08:10,230
what qual name does is basically it

00:08:08,640 --> 00:08:12,150
returns me the name of the function in

00:08:10,230 --> 00:08:13,800
the string format itself now this we are

00:08:12,150 --> 00:08:16,650
starting to meta program already we have

00:08:13,800 --> 00:08:18,570
gotten the name of a function so now we

00:08:16,650 --> 00:08:20,760
can use this to manipulate stuff right

00:08:18,570 --> 00:08:23,910
so I can check the function that is

00:08:20,760 --> 00:08:26,190
passed here but how do we decide if a

00:08:23,910 --> 00:08:31,710
function is cool or not so let's write a

00:08:26,190 --> 00:08:34,169
function for that def is cool it takes

00:08:31,710 --> 00:08:37,289
us func string func name let's say it

00:08:34,169 --> 00:08:45,570
takes a function name and functions are

00:08:37,289 --> 00:08:48,770
only cool if if they start with Python

00:08:45,570 --> 00:08:48,770
as a prefix let's say

00:08:55,490 --> 00:09:00,380
all right so we have a function which

00:08:58,100 --> 00:09:05,990
decides if a function is cool or not so

00:09:00,380 --> 00:09:08,410
I check if is cool function I apply that

00:09:05,990 --> 00:09:08,410
function

00:09:21,290 --> 00:09:25,480
okay so how do I call this function now

00:09:30,120 --> 00:09:37,879
so there's a function called Pike on

00:09:32,399 --> 00:09:40,139
India which takes let's say which prints

00:09:37,879 --> 00:09:42,930
so this is a Python 3 by the way so I'm

00:09:40,139 --> 00:09:46,709
gonna use print as a function by

00:09:42,930 --> 00:09:51,269
Connor's awesome and then this lets say

00:09:46,709 --> 00:09:53,850
another function called some other

00:09:51,269 --> 00:09:58,680
conference which is apparently not cool

00:09:53,850 --> 00:10:03,050
at all some other conference so I want

00:09:58,680 --> 00:10:03,050
to apply only a cool function to end

00:10:11,900 --> 00:10:17,030
let me create a list of functions Vikon

00:10:14,810 --> 00:10:17,570
India is one function and some other

00:10:17,030 --> 00:10:19,250
corner

00:10:17,570 --> 00:10:20,870
so you remember functions are first

00:10:19,250 --> 00:10:26,300
class objects right so they can be part

00:10:20,870 --> 00:10:35,510
of a list too so what I can do is for

00:10:26,300 --> 00:10:37,310
funks in my funks i can say what was my

00:10:35,510 --> 00:10:39,650
cool function applicator again full

00:10:37,310 --> 00:10:44,990
function only can you please increase

00:10:39,650 --> 00:10:46,910
the font size cool I can funks is that

00:10:44,990 --> 00:10:51,590
okay

00:10:46,910 --> 00:10:59,020
oh so this is pi/3 thank or i remember

00:10:51,590 --> 00:10:59,020
that syntax error invalid syntax

00:11:05,270 --> 00:11:14,839
my phone's no it's on line 9 which says

00:11:08,920 --> 00:11:16,640
okay so yeah function object has no

00:11:14,839 --> 00:11:20,330
attribute starts with of course it

00:11:16,640 --> 00:11:23,120
doesn't say it's a string right so I

00:11:20,330 --> 00:11:25,820
have to pass a string name to this so

00:11:23,120 --> 00:11:28,640
it's cool func dot call name

00:11:25,820 --> 00:11:32,350
so remember calling which has a

00:11:28,640 --> 00:11:37,430
qualified name cool soap icon is awesome

00:11:32,350 --> 00:11:40,339
can you see that yeah soap icon is

00:11:37,430 --> 00:11:42,620
awesome the other ones is no sorry dude

00:11:40,339 --> 00:11:44,720
so you you know you're not applying that

00:11:42,620 --> 00:11:46,820
function at all so this is a first step

00:11:44,720 --> 00:11:48,100
to meta program you can do such kind of

00:11:46,820 --> 00:11:50,420
things and we haven't even entered

00:11:48,100 --> 00:11:52,790
decorators and metaclasses so let's go

00:11:50,420 --> 00:11:55,279
to metaclasses no sorry let's go to

00:11:52,790 --> 00:11:57,470
decorators let's just take a while code

00:11:55,279 --> 00:12:05,029
snippet right so we have def add sub

00:11:57,470 --> 00:12:07,459
and dev and let's take that to avoid

00:12:05,029 --> 00:12:15,649
typing I have already created no I

00:12:07,459 --> 00:12:17,839
haven't let me just take let me have a

00:12:15,649 --> 00:12:22,700
function let's say def add a comma B and

00:12:17,839 --> 00:12:28,000
which prints a plus B and let's say 1

00:12:22,700 --> 00:12:33,110
another function called F sub a comma B

00:12:28,000 --> 00:12:34,579
which prints a minus B right so now you

00:12:33,110 --> 00:12:36,110
want to debug this right so this is a

00:12:34,579 --> 00:12:38,810
lot of things that are happening here

00:12:36,110 --> 00:12:40,610
and it's so complicated and you've lost

00:12:38,810 --> 00:12:41,660
yourself in a lot of code you want to

00:12:40,610 --> 00:12:43,640
debug this you want to start debugging

00:12:41,660 --> 00:12:50,500
this how do you do you obviously write

00:12:43,640 --> 00:12:53,209
print I'm here yay and you say print I

00:12:50,500 --> 00:12:55,220
am now here things like there are all

00:12:53,209 --> 00:12:59,420
sorts of things which V developers love

00:12:55,220 --> 00:13:04,190
to use to debug and of course when I

00:12:59,420 --> 00:13:06,730
call them you have so you get where

00:13:04,190 --> 00:13:06,730
things are going

00:13:11,750 --> 00:13:17,510
some reason it has decided not to print

00:13:13,970 --> 00:13:20,600
oh it has decided to print sure so what

00:13:17,510 --> 00:13:22,100
we do now is look at this code and gasp

00:13:20,600 --> 00:13:24,470
but the horror of how horrible it is

00:13:22,100 --> 00:13:27,710
right so this is not the right way to do

00:13:24,470 --> 00:13:30,700
things and that's where decorators come

00:13:27,710 --> 00:13:32,900
in so what a decorator is is it's just a

00:13:30,700 --> 00:13:35,360
where's my presentation here is my

00:13:32,900 --> 00:13:38,090
presentation so a decorator is a

00:13:35,360 --> 00:13:40,220
function that wraps another function and

00:13:38,090 --> 00:13:41,930
returns a function so what this means is

00:13:40,220 --> 00:13:43,880
it takes a function as an argument

00:13:41,930 --> 00:13:46,160
it's a higher-order function and then it

00:13:43,880 --> 00:13:47,450
it you can do things with that function

00:13:46,160 --> 00:13:48,970
and then you apply that function and

00:13:47,450 --> 00:13:50,600
then you return back the same function

00:13:48,970 --> 00:13:52,130
remember we wrote our higher-order

00:13:50,600 --> 00:13:57,310
function earlier so let's just do that

00:13:52,130 --> 00:14:00,650
with this now I'm gonna create a new

00:13:57,310 --> 00:14:07,790
file called de course dot pi where I'm

00:14:00,650 --> 00:14:11,330
going to define the decorators so this

00:14:07,790 --> 00:14:14,540
is my hire or let's say debug which

00:14:11,330 --> 00:14:15,740
takes a function name so because it's a

00:14:14,540 --> 00:14:17,810
higher-order function it takes a

00:14:15,740 --> 00:14:25,010
function as argument and then I write a

00:14:17,810 --> 00:14:32,990
wrapper which takes arguments and then

00:14:25,010 --> 00:14:38,120
what I do is print hey I am here or in

00:14:32,990 --> 00:14:40,390
this sense I could do Here I am in let's

00:14:38,120 --> 00:14:40,390
see

00:14:42,170 --> 00:14:47,390
what's the function is called him

00:14:44,220 --> 00:14:47,390
remember call him it's a cool thing

00:14:51,770 --> 00:15:02,840
now I then apply that function pass that

00:14:55,550 --> 00:15:05,690
odds and star star quarks and return the

00:15:02,840 --> 00:15:08,210
wrapper so we have now defined a

00:15:05,690 --> 00:15:09,680
decorator so all this does is accept the

00:15:08,210 --> 00:15:11,330
function do something and then return

00:15:09,680 --> 00:15:12,710
the same function back now applies that

00:15:11,330 --> 00:15:20,680
function and returns the same function

00:15:12,710 --> 00:15:25,220
back now instead of print here Yi and I

00:15:20,680 --> 00:15:30,340
am going to from the cause I'm gonna

00:15:25,220 --> 00:15:30,340
import what was my decorator debug a

00:15:30,550 --> 00:15:40,970
debug and at deeper so this at is just a

00:15:37,850 --> 00:15:47,770
syntactic sugar for passing the function

00:15:40,970 --> 00:15:47,770
explicitly like funk is equal to debug

00:15:47,780 --> 00:15:51,740
it's just syntactic sugar for this well

00:15:49,670 --> 00:15:53,360
let's not because it's so much cooler to

00:15:51,740 --> 00:15:55,970
write a debug we'll just write a debug

00:15:53,360 --> 00:15:57,650
so yes higher-order function again so

00:15:55,970 --> 00:16:07,310
debug is our function which is accepting

00:15:57,650 --> 00:16:08,060
add as a function now hey I'm an ad as

00:16:07,310 --> 00:16:15,920
simple as that

00:16:08,060 --> 00:16:17,960
and if I do sub of tokomon 3 here I mean

00:16:15,920 --> 00:16:19,550
so so you can just get the function name

00:16:17,960 --> 00:16:22,640
and start debugging like that so it's a

00:16:19,550 --> 00:16:25,070
powerful tool when to avoid code

00:16:22,640 --> 00:16:27,650
repetition and so there's a principle

00:16:25,070 --> 00:16:28,940
called don't repeat yourself and this is

00:16:27,650 --> 00:16:33,500
where we start in not repeating

00:16:28,940 --> 00:16:35,780
ourselves right what it comes next let

00:16:33,500 --> 00:16:36,980
me go back to my presentation cool so

00:16:35,780 --> 00:16:39,470
that's a decorator we've already seen a

00:16:36,980 --> 00:16:41,390
decorator it's a function which takes a

00:16:39,470 --> 00:16:44,530
function wrap certain returns a function

00:16:41,390 --> 00:16:47,480
and that's how decorators are applied

00:16:44,530 --> 00:16:49,900
but the problem with decorators are let

00:16:47,480 --> 00:16:49,900
me

00:16:54,180 --> 00:17:07,380
remember our decorate an impetus debug

00:16:58,410 --> 00:17:07,380
and we had there was our functions

00:17:12,900 --> 00:17:16,910
good so when we want to

00:17:19,980 --> 00:17:25,170
it's getting cut right for some reason

00:17:22,079 --> 00:17:27,540
cool things up so some reason when I do

00:17:25,170 --> 00:17:29,730
help off the whatever function we've

00:17:27,540 --> 00:17:32,280
written since we had added that add D

00:17:29,730 --> 00:17:33,900
well its convoluting namespace and it's

00:17:32,280 --> 00:17:35,700
doing some kind of surgery within and

00:17:33,900 --> 00:17:39,180
then it's messing up all my metadata

00:17:35,700 --> 00:17:41,550
about that function so this is not cool

00:17:39,180 --> 00:17:43,860
I does not help on a function wrap in

00:17:41,550 --> 00:17:45,120
module because rap stars or quads or

00:17:43,860 --> 00:17:47,220
whatever add is a function which adds

00:17:45,120 --> 00:17:49,320
two numbers and this is not cool so what

00:17:47,220 --> 00:17:53,280
I have to do is there's a tool called

00:17:49,320 --> 00:18:00,950
func tools import wraps which if I apply

00:17:53,280 --> 00:18:05,280
let me do that maintains the metadata so

00:18:00,950 --> 00:18:11,070
what I'm doing now is writing the

00:18:05,280 --> 00:18:13,440
decorator for a decorator good so it's

00:18:11,070 --> 00:18:15,510
just I import wraps from funk tools and

00:18:13,440 --> 00:18:19,400
then add this wraps for the wrapper and

00:18:15,510 --> 00:18:19,400
now if I redo the

00:18:22,970 --> 00:18:27,229
good it says help on function Adam what

00:18:25,099 --> 00:18:30,710
do you mean add a convey and so on so we

00:18:27,229 --> 00:18:34,970
are good sort of few nuances in Python

00:18:30,710 --> 00:18:37,340
and we will definitely get over it this

00:18:34,970 --> 00:18:40,460
sort of exposes a powerful set of API is

00:18:37,340 --> 00:18:41,950
now for us to explore what if I want to

00:18:40,460 --> 00:18:45,649
do things like this now obviously

00:18:41,950 --> 00:18:48,289
developers use decorators to follow

00:18:45,649 --> 00:18:53,210
don't repeat yourself that's right at 12

00:18:48,289 --> 00:18:56,690
H R SH V developers love to do things

00:18:53,210 --> 00:18:58,309
like this right so all sorts of crazy

00:18:56,690 --> 00:19:02,479
star star star star plus plus plus plus

00:18:58,309 --> 00:19:05,239
kind of debug messages and now how do we

00:19:02,479 --> 00:19:07,279
handle that right so what if we want to

00:19:05,239 --> 00:19:10,249
have print star star star star here and

00:19:07,279 --> 00:19:12,950
print plus plus plus plus here and our

00:19:10,249 --> 00:19:14,269
decorator will not be able to do star

00:19:12,950 --> 00:19:17,419
star star star or plus plus plus plus

00:19:14,269 --> 00:19:19,249
based on our function name right so we

00:19:17,419 --> 00:19:23,200
have function dot call name here so we

00:19:19,249 --> 00:19:27,349
can do that what we can do is kind of

00:19:23,200 --> 00:19:30,979
write a decorator which accepts except

00:19:27,349 --> 00:19:34,340
some kind of argument so we can do star

00:19:30,979 --> 00:19:38,059
star star star and plus plus plus plus

00:19:34,340 --> 00:19:40,249
here but we haven't implemented this yet

00:19:38,059 --> 00:19:45,019
and how we implement this is a little

00:19:40,249 --> 00:19:47,899
tricky with argument so what we have to

00:19:45,019 --> 00:19:50,239
do is basically wrap the decorator

00:19:47,899 --> 00:19:52,159
itself except the message and then wrap

00:19:50,239 --> 00:19:56,929
the decorator which actually wraps the

00:19:52,159 --> 00:19:59,210
function and oh looks like my

00:19:56,929 --> 00:20:01,309
last-minute edit hadn't come here so I

00:19:59,210 --> 00:20:03,049
was if those of you who saw that

00:20:01,309 --> 00:20:05,539
Inception slide in the last five minutes

00:20:03,049 --> 00:20:06,139
I wanted to put that here doesn't make

00:20:05,539 --> 00:20:09,820
any sense now

00:20:06,139 --> 00:20:09,820
let me do that here

00:20:15,220 --> 00:20:26,520
this is a debug trap which accepts that

00:20:18,190 --> 00:20:26,520
function and now this whole thing is

00:20:27,510 --> 00:20:34,240
encapsulated in diva which accepts a

00:20:30,910 --> 00:20:35,620
message now what I could do is of course

00:20:34,240 --> 00:20:41,080
I have to return the wrapper debug

00:20:35,620 --> 00:20:45,300
repair itself that should do and now I

00:20:41,080 --> 00:20:45,300
can just say hey I'm in whatever

00:20:59,900 --> 00:21:05,000
I'm just gonna form at it and say

00:21:01,970 --> 00:21:10,480
message print message here that should

00:21:05,000 --> 00:21:13,970
probably work and let's see if it does

00:21:10,480 --> 00:21:15,440
yes so we have now almost a

00:21:13,970 --> 00:21:18,020
comprehensive framework to start

00:21:15,440 --> 00:21:20,240
building on your own debugging module

00:21:18,020 --> 00:21:22,220
with your own set of decorators with

00:21:20,240 --> 00:21:23,930
your own set of nuances and there are a

00:21:22,220 --> 00:21:26,060
lot of more possibilities here you can

00:21:23,930 --> 00:21:29,300
start adding more arguments you can

00:21:26,060 --> 00:21:31,310
start accepting special you can probably

00:21:29,300 --> 00:21:33,490
accept a function in your decorator as

00:21:31,310 --> 00:21:38,600
well and the whole universe of

00:21:33,490 --> 00:21:42,230
possibilities are involved 4:20 how are

00:21:38,600 --> 00:21:44,120
we doing on time so let me not code this

00:21:42,230 --> 00:21:46,670
but it is possible to decorate a class

00:21:44,120 --> 00:21:48,980
as well so what if you had add sub model

00:21:46,670 --> 00:21:50,840
and as a part of a class right so you

00:21:48,980 --> 00:21:52,430
had class foo which has add and so when

00:21:50,840 --> 00:21:54,020
you don't want to decorate each and

00:21:52,430 --> 00:21:56,030
every method of that so you could just

00:21:54,020 --> 00:21:56,630
do a debug class let me explain what's

00:21:56,030 --> 00:22:00,590
happening here

00:21:56,630 --> 00:22:02,030
so add debug class is decorator and it

00:22:00,590 --> 00:22:04,010
accepts a class

00:22:02,030 --> 00:22:05,750
so remember decorators are functions

00:22:04,010 --> 00:22:07,790
which accepting the func either

00:22:05,750 --> 00:22:09,410
yeah functions which accepts functions

00:22:07,790 --> 00:22:11,090
or other things so a class is a

00:22:09,410 --> 00:22:13,250
first-class object in Python as well

00:22:11,090 --> 00:22:14,030
we'll see that later class is an object

00:22:13,250 --> 00:22:20,030
- we'll see that later

00:22:14,030 --> 00:22:21,980
and so deeper class is going to accept

00:22:20,030 --> 00:22:24,470
that class and what is going to do is

00:22:21,980 --> 00:22:27,140
four key comma Val inverse of class dot

00:22:24,470 --> 00:22:28,340
items where is an inbuilt Python method

00:22:27,140 --> 00:22:30,080
that's going to give you a class

00:22:28,340 --> 00:22:32,240
dictionary what a class dictionary is

00:22:30,080 --> 00:22:34,010
basically is a set of attributes that

00:22:32,240 --> 00:22:35,810
are part of the class so we will see

00:22:34,010 --> 00:22:38,720
that later - so a class dictionary might

00:22:35,810 --> 00:22:40,760
have add and sub in it it's going to

00:22:38,720 --> 00:22:42,410
take all of those classes dictionary the

00:22:40,760 --> 00:22:44,360
items of that dictionary and it's just

00:22:42,410 --> 00:22:47,270
going to say if that Val is a callable

00:22:44,360 --> 00:22:49,010
that means if my add is a callable or

00:22:47,270 --> 00:22:50,990
sub is a callable I'm going to do

00:22:49,010 --> 00:22:54,200
something they're set at a set at a

00:22:50,990 --> 00:22:55,190
class key and debugger felt so I hope

00:22:54,200 --> 00:23:00,020
you're getting where I'm going

00:22:55,190 --> 00:23:02,330
so debug is my original decorator what I

00:23:00,020 --> 00:23:04,760
had written earlier so debug off Val is

00:23:02,330 --> 00:23:07,610
just going to add debug of add and debug

00:23:04,760 --> 00:23:09,620
of sub so I'm just I am just walking

00:23:07,610 --> 00:23:13,310
through all the methods in the class and

00:23:09,620 --> 00:23:13,770
prepending or wrapping the debug in each

00:23:13,310 --> 00:23:16,050
and every

00:23:13,770 --> 00:23:20,760
method of that class so this is a

00:23:16,050 --> 00:23:24,000
classic example of a class decorator but

00:23:20,760 --> 00:23:25,230
there is a problem with this no actually

00:23:24,000 --> 00:23:29,460
there is no problem with this it's quite

00:23:25,230 --> 00:23:35,550
powerful let's go to metaclasses so

00:23:29,460 --> 00:23:37,679
decorators were one part of probably a

00:23:35,550 --> 00:23:40,470
powerful metaprogramming API so we were

00:23:37,679 --> 00:23:42,750
able to intercept function calls do

00:23:40,470 --> 00:23:45,179
something with the before the function

00:23:42,750 --> 00:23:46,740
after the function and so on now we will

00:23:45,179 --> 00:23:49,290
go to a step now we go a step further

00:23:46,740 --> 00:23:51,050
and try to modify a class itself the

00:23:49,290 --> 00:23:54,120
behavior of a class itself right so

00:23:51,050 --> 00:23:55,710
there comes metaclasses quick

00:23:54,120 --> 00:23:58,640
advertisement again that's my Twitter

00:23:55,710 --> 00:24:00,840
and github handles so this is like those

00:23:58,640 --> 00:24:02,910
mobile apps where and after each level

00:24:00,840 --> 00:24:07,260
you have those advertisements coming in

00:24:02,910 --> 00:24:09,750
so yeah this is a Python class again so

00:24:07,260 --> 00:24:11,429
a classic Python class let's say class

00:24:09,750 --> 00:24:15,600
foo it has an init function it has a do

00:24:11,429 --> 00:24:19,020
something and so on and it's basically a

00:24:15,600 --> 00:24:22,380
set of entities right it has a class

00:24:19,020 --> 00:24:24,570
name the class name is foo it has a set

00:24:22,380 --> 00:24:25,679
of base classes here it's nothing and it

00:24:24,570 --> 00:24:27,420
has a set of methods

00:24:25,679 --> 00:24:29,760
so here it's def in it and def do

00:24:27,420 --> 00:24:31,590
something so a class is basically a

00:24:29,760 --> 00:24:34,860
composition of these three things it's a

00:24:31,590 --> 00:24:36,870
class name self base classes and the set

00:24:34,860 --> 00:24:38,280
of methods or attributes for here we

00:24:36,870 --> 00:24:43,950
don't have any attributes just consider

00:24:38,280 --> 00:24:45,660
the methods now what we have so what we

00:24:43,950 --> 00:24:48,090
do in Python when defining a class is

00:24:45,660 --> 00:24:49,710
very simple right so we just write class

00:24:48,090 --> 00:24:51,210
foo def in and def do something so

00:24:49,710 --> 00:24:55,170
believe it or not this is syntactic

00:24:51,210 --> 00:24:57,120
sugar as well internally Python doesn't

00:24:55,170 --> 00:24:59,550
translate this directly to abstract

00:24:57,120 --> 00:25:03,840
syntax tree what it does is something

00:24:59,550 --> 00:25:06,150
like this it calls the type a type is

00:25:03,840 --> 00:25:08,220
the supreme metaclass that sits on top

00:25:06,150 --> 00:25:10,770
of the python class ecosystem now let's

00:25:08,220 --> 00:25:12,230
see what that means and before we come

00:25:10,770 --> 00:25:17,070
into this slide let's do a little bit of

00:25:12,230 --> 00:25:20,179
live coding things right so we all know

00:25:17,070 --> 00:25:26,390
that we all know about the Python type

00:25:20,179 --> 00:25:26,390
system right so it has an int and then

00:25:27,670 --> 00:25:35,470
visible enough yes

00:25:29,840 --> 00:25:35,470
let's say 3.0 then diapers float oh

00:25:36,310 --> 00:25:39,310
sorry

00:25:39,700 --> 00:25:44,870
wait wait I was coming to that

00:25:42,260 --> 00:25:48,800
so type of a is float but what is the

00:25:44,870 --> 00:25:52,820
type of float itself is a class and the

00:25:48,800 --> 00:25:55,760
type of float is pipe the type of every

00:25:52,820 --> 00:26:00,560
class that you define is basically type

00:25:55,760 --> 00:26:08,110
let's say class foo oh I hate this

00:26:00,560 --> 00:26:16,130
Python thing I Python class foo and

00:26:08,110 --> 00:26:19,460
let's just say pass and type type now

00:26:16,130 --> 00:26:21,380
type of F would be foo because we've

00:26:19,460 --> 00:26:22,820
just defined the class foo and similarly

00:26:21,380 --> 00:26:24,590
int is a class flow to the class

00:26:22,820 --> 00:26:28,250
everything is a class but what is the

00:26:24,590 --> 00:26:31,940
type of food itself it's a type type so

00:26:28,250 --> 00:26:36,530
every class in Python is an object of

00:26:31,940 --> 00:26:39,140
the class type so what this means is

00:26:36,530 --> 00:26:41,030
type is the meta class and all of these

00:26:39,140 --> 00:26:42,010
classes are basically the classes of

00:26:41,030 --> 00:26:44,240
that meta class

00:26:42,010 --> 00:26:46,090
so meta class is just the class of a

00:26:44,240 --> 00:26:51,530
class it's as simple as that

00:26:46,090 --> 00:26:53,720
right so what is happening here foo is

00:26:51,530 --> 00:26:55,550
equal to type of class name basis and

00:26:53,720 --> 00:26:57,170
clastic that's how you instantiate a

00:26:55,550 --> 00:26:58,400
class and that's how Python instantiate

00:26:57,170 --> 00:27:03,220
the class as well let's do something

00:26:58,400 --> 00:27:06,710
let's do a quick let's say our class has

00:27:03,220 --> 00:27:09,800
the class name fool again somehow I like

00:27:06,710 --> 00:27:11,330
the word foo and it has a set of base

00:27:09,800 --> 00:27:15,710
classes I don't want to inherit from

00:27:11,330 --> 00:27:21,800
anything and let me define a function in

00:27:15,710 --> 00:27:25,820
it which has can you see my code sure so

00:27:21,800 --> 00:27:29,620
I'm gonna do self and X or whatever and

00:27:25,820 --> 00:27:31,160
then say self dot X is equal to X and

00:27:29,620 --> 00:27:33,800
that's about it

00:27:31,160 --> 00:27:40,570
and let's say I do something

00:27:33,800 --> 00:27:45,770
I'm gonna see it said come no why and so

00:27:40,570 --> 00:27:48,920
return self dot X minus by something

00:27:45,770 --> 00:27:51,470
like that so these so but these are the

00:27:48,920 --> 00:27:53,270
problem these are the elements of my

00:27:51,470 --> 00:27:56,770
class basically we remember that we

00:27:53,270 --> 00:28:00,830
figured out that a class was basically a

00:27:56,770 --> 00:28:02,540
class name set off basis and then a set

00:28:00,830 --> 00:28:04,280
of functions now we can go ahead and

00:28:02,540 --> 00:28:07,990
create a class from these entities right

00:28:04,280 --> 00:28:16,970
so all I need is to create a class dict

00:28:07,990 --> 00:28:19,910
oops which has a function which takes my

00:28:16,970 --> 00:28:23,120
in it right so in it has the function

00:28:19,910 --> 00:28:28,430
and it is assigned to in it and do

00:28:23,120 --> 00:28:29,900
something is my function name okay so do

00:28:28,430 --> 00:28:34,430
something is my function name and it is

00:28:29,900 --> 00:28:36,650
assigned to do something and there you

00:28:34,430 --> 00:28:40,580
go that's my clastic now we have the

00:28:36,650 --> 00:28:41,510
class name we have the basis and then we

00:28:40,580 --> 00:28:44,390
have the class deck

00:28:41,510 --> 00:28:48,620
so now let's create a class foo from

00:28:44,390 --> 00:28:57,230
type which is a class name basis class

00:28:48,620 --> 00:29:01,460
vector and we have created foo oh we it

00:28:57,230 --> 00:29:03,140
accepts some argument cool now type of f

00:29:01,460 --> 00:29:05,000
it may not foo

00:29:03,140 --> 00:29:07,130
so this is a class and we've created a

00:29:05,000 --> 00:29:13,340
class with how Python does it internally

00:29:07,130 --> 00:29:19,480
so for 30 50 more minutes let's do some

00:29:13,340 --> 00:29:23,060
so we've looked at what type is and now

00:29:19,480 --> 00:29:26,230
essentially if you are not if you're

00:29:23,060 --> 00:29:26,230
defining a class like this

00:29:28,460 --> 00:29:34,049
essentially you are by default the

00:29:31,529 --> 00:29:38,279
metaclasses pipe itself so you can see

00:29:34,049 --> 00:29:41,399
that type of food will be type now it is

00:29:38,279 --> 00:29:43,529
possible to modify the metaclass and

00:29:41,399 --> 00:29:46,799
define your own metaclass right you can

00:29:43,529 --> 00:29:48,889
create your own type in Python and this

00:29:46,799 --> 00:29:52,049
is extremely powerful in let's look at a

00:29:48,889 --> 00:29:55,879
quick set of examples let's do a quick

00:29:52,049 --> 00:29:55,879
exercise let's do some diabolical stuff

00:29:56,539 --> 00:30:02,820
one such a very interesting talk on meta

00:30:01,589 --> 00:30:11,599
programming thank you whoever tweeted

00:30:02,820 --> 00:30:11,599
that okay let me just open a new console

00:30:14,989 --> 00:30:27,690
doc mentor C dot pi who let's say PyCon

00:30:22,289 --> 00:30:37,950
let's create it okay let's let's create

00:30:27,690 --> 00:30:41,519
a clasp icon right so which has but

00:30:37,950 --> 00:30:47,359
let's say the set of talks that were

00:30:41,519 --> 00:30:50,759
initially proposed and let's say

00:30:47,359 --> 00:30:55,999
selected you get selected from the set

00:30:50,759 --> 00:30:59,279
of talks so for some reason let's say

00:30:55,999 --> 00:31:01,619
the Python people decide to choose

00:30:59,279 --> 00:31:06,839
exactly a third of the talks that were

00:31:01,619 --> 00:31:10,619
approved random logic I hope that that

00:31:06,839 --> 00:31:14,580
wasn't how it happened but anyway so

00:31:10,619 --> 00:31:17,789
this is my clasp icon right and I want

00:31:14,580 --> 00:31:22,080
to do something with this and I want to

00:31:17,789 --> 00:31:24,859
make sure that yeah so let's create a

00:31:22,080 --> 00:31:24,859
meta class of

00:31:26,610 --> 00:31:32,910
type conference I mean obviously PyCon

00:31:29,280 --> 00:31:35,340
will be a conference and there are a few

00:31:32,910 --> 00:31:37,440
hooks in Python right magic methods we

00:31:35,340 --> 00:31:39,360
saw underscore underscore qual name like

00:31:37,440 --> 00:31:43,770
that whenever a class is instantiated in

00:31:39,360 --> 00:31:45,450
Python we have the new thing is called

00:31:43,770 --> 00:31:47,880
so whenever a class of in check

00:31:45,450 --> 00:31:49,980
instantiated internally Python calls a

00:31:47,880 --> 00:31:51,990
new method of that class or of that meta

00:31:49,980 --> 00:31:56,130
class every type has basically a new

00:31:51,990 --> 00:32:00,270
method so what we saw new basically

00:31:56,130 --> 00:32:03,090
accepts the class name then it accepts

00:32:00,270 --> 00:32:06,270
the class also known it accept the class

00:32:03,090 --> 00:32:08,700
itself class name and the set of basis

00:32:06,270 --> 00:32:13,680
and the class Nick how do I know this I

00:32:08,700 --> 00:32:17,310
looked up the documentation let's just

00:32:13,680 --> 00:32:21,990
see what happens when this thing let's

00:32:17,310 --> 00:32:24,420
just print the class right and the way

00:32:21,990 --> 00:32:27,480
you do this and the way you do this in

00:32:24,420 --> 00:32:30,480
Python 3 is just say meta class is equal

00:32:27,480 --> 00:32:32,220
to conference now my the metaclass of

00:32:30,480 --> 00:32:38,120
Python won't be type but it will be of

00:32:32,220 --> 00:32:38,120
the type conference on instantiating

00:32:43,389 --> 00:32:48,719
Piper a nun type object is not callable

00:32:51,900 --> 00:32:57,860
where is this happening though correct

00:32:56,909 --> 00:33:03,740
you're right

00:32:57,860 --> 00:33:03,740
brilliant still sees none type is not

00:33:05,179 --> 00:33:09,090
mmm

00:33:06,570 --> 00:33:14,520
Chris Babb filed line P equal Python

00:33:09,090 --> 00:33:20,330
then none type not callable let's see if

00:33:14,520 --> 00:33:24,510
my debugging skills are good oh okay so

00:33:20,330 --> 00:33:25,140
this I think should be of I don't know

00:33:24,510 --> 00:33:33,750
if this would work

00:33:25,140 --> 00:33:36,210
no it's not working brilliant that's

00:33:33,750 --> 00:33:39,570
right so what I have to do is who said

00:33:36,210 --> 00:33:53,029
that brilliant thank you so what I have

00:33:39,570 --> 00:33:56,100
to do is no super dot new class classes

00:33:53,029 --> 00:33:58,409
right so remember that every class is an

00:33:56,100 --> 00:34:00,090
object now when I'm doing of the type

00:33:58,409 --> 00:34:02,039
type I have to return the class object

00:34:00,090 --> 00:34:04,590
itself right so PyCon is an object and

00:34:02,039 --> 00:34:06,929
here it's not callable so that means I

00:34:04,590 --> 00:34:08,879
hadn't the type or the conference

00:34:06,929 --> 00:34:11,760
metaclass had not returned anything so

00:34:08,879 --> 00:34:13,290
it wasn't a callable yet now oh it's

00:34:11,760 --> 00:34:17,510
still not callable no I have got a

00:34:13,290 --> 00:34:17,510
return 'ti no no no I have to return it

00:34:19,700 --> 00:34:24,039
yes

00:34:21,639 --> 00:34:27,220
cool so when I return that class object

00:34:24,039 --> 00:34:28,629
what it does is it shows me what I'm

00:34:27,220 --> 00:34:30,879
doing is just printing the class stick

00:34:28,629 --> 00:34:32,619
whenever instance of PyCon is being

00:34:30,879 --> 00:34:34,149
created so this is the class dict it

00:34:32,619 --> 00:34:35,379
says koala name is PyCon there's a init

00:34:34,149 --> 00:34:38,019
function and doesn't there's a module

00:34:35,379 --> 00:34:41,409
main and then there's a selected thing

00:34:38,019 --> 00:34:45,279
so I could do crazy things here right

00:34:41,409 --> 00:34:46,690
and let let me take cool and uncool

00:34:45,279 --> 00:34:53,740
conference things again

00:34:46,690 --> 00:34:55,299
so in when the beginning of hold on in

00:34:53,740 --> 00:35:03,039
this meta class itself what I could do

00:34:55,299 --> 00:35:06,630
is take the class name cool and check if

00:35:03,039 --> 00:35:06,630
class name dot

00:35:19,520 --> 00:35:28,070
Thanks so yeah do stuff like this and

00:35:24,580 --> 00:35:30,440
I'm I'm intercepting the class name here

00:35:28,070 --> 00:35:34,760
and doing stuff on the class name itself

00:35:30,440 --> 00:35:36,110
and this is extremely powerful again so

00:35:34,760 --> 00:35:43,010
there are a lot of folks that are

00:35:36,110 --> 00:35:46,220
available deaf let's say call so call is

00:35:43,010 --> 00:35:49,130
when your object is instantiated new is

00:35:46,220 --> 00:35:51,890
when the class is defined and call you

00:35:49,130 --> 00:35:55,100
call basically gets called when you do P

00:35:51,890 --> 00:36:01,030
equal to Python of 10 or whatever now a

00:35:55,100 --> 00:36:04,190
call accepts the class and the arguments

00:36:01,030 --> 00:36:08,210
now you do know that the metaclass

00:36:04,190 --> 00:36:11,810
conference if i define for if i had some

00:36:08,210 --> 00:36:14,060
other class called class some other con

00:36:11,810 --> 00:36:15,980
or whatever you could have told any or

00:36:14,060 --> 00:36:17,510
not cool and you could have not created

00:36:15,980 --> 00:36:20,030
the class itself at all you could have

00:36:17,510 --> 00:36:22,040
thrown some error over there so you can

00:36:20,030 --> 00:36:24,680
actually inhibit people from writing

00:36:22,040 --> 00:36:26,869
classes of the type meta class whose

00:36:24,680 --> 00:36:27,290
name is not cool a lot of things are

00:36:26,869 --> 00:36:29,900
possible

00:36:27,290 --> 00:36:31,940
now something that's even more cool is

00:36:29,900 --> 00:36:40,670
the call function which is extremely

00:36:31,940 --> 00:36:42,560
powerful right okay so let me just see

00:36:40,670 --> 00:36:51,080
what's happening there print class

00:36:42,560 --> 00:36:53,690
parent Oggs and print okay so it is do

00:36:51,080 --> 00:36:55,730
you see that it is 10 comma and emptied

00:36:53,690 --> 00:36:57,619
it so that's the odds and quarks that

00:36:55,730 --> 00:37:00,170
are basically being called when I do P

00:36:57,619 --> 00:37:03,260
PI content so when I call 10 so my odds

00:37:00,170 --> 00:37:05,450
are 10 and when I do 100 my abs are 100

00:37:03,260 --> 00:37:10,190
and so on

00:37:05,450 --> 00:37:12,440
so let me intercept this so a very

00:37:10,190 --> 00:37:14,900
important concept of metaprogramming is

00:37:12,440 --> 00:37:16,790
interception so you som someone define

00:37:14,900 --> 00:37:18,530
the class and someone's running it and

00:37:16,790 --> 00:37:20,600
in runtime you intercept stuff when you

00:37:18,530 --> 00:37:25,300
modify the behavior of the code itself

00:37:20,600 --> 00:37:30,470
and what I could do here is check if

00:37:25,300 --> 00:37:35,940
args of 0

00:37:30,470 --> 00:37:42,080
cool conferences okay if odds of zero is

00:37:35,940 --> 00:37:51,330
let's say less than ten I'd say print

00:37:42,080 --> 00:37:56,310
out two less power dissipation oh okay

00:37:51,330 --> 00:37:58,830
so it was 100 right no I say five says

00:37:56,310 --> 00:38:01,500
ouch two less participation ten minutes

00:37:58,830 --> 00:38:05,580
remaining cool yeah so it's quite

00:38:01,500 --> 00:38:08,300
powerful and you can do all sort of

00:38:05,580 --> 00:38:12,260
things like this you can just you know

00:38:08,300 --> 00:38:17,340
create your own class yuck

00:38:12,260 --> 00:38:23,900
too few people and let's say it's

00:38:17,340 --> 00:38:23,900
exception bus and you could just do

00:38:33,730 --> 00:38:38,410
so it says yep too few boo you have too

00:38:36,430 --> 00:38:41,350
few people exception and so on so you

00:38:38,410 --> 00:38:42,970
could do a lot of powerful things now

00:38:41,350 --> 00:38:45,900
one final thing that I'd like to do here

00:38:42,970 --> 00:38:48,760
is oh I deleted the whole thing is it

00:38:45,900 --> 00:38:56,650
it's back thank God for control C and

00:38:48,760 --> 00:38:58,810
control okay no I'll just show you the

00:38:56,650 --> 00:39:00,070
already created ipython notebook so I

00:38:58,810 --> 00:39:06,070
have only ten minutes remaining so I

00:39:00,070 --> 00:39:08,920
could take some questions so by the way

00:39:06,070 --> 00:39:10,630
all this code is on my github and in the

00:39:08,920 --> 00:39:13,210
form of ipython notebooks so you can

00:39:10,630 --> 00:39:15,820
create singleton class as singleton is a

00:39:13,210 --> 00:39:17,590
gang design pattern you could just say

00:39:15,820 --> 00:39:20,890
if you are right as I'm at a class of

00:39:17,590 --> 00:39:25,630
singleton a every instantiation would be

00:39:20,890 --> 00:39:27,340
the same and right so this is something

00:39:25,630 --> 00:39:28,900
extremely powerful so if you've used

00:39:27,340 --> 00:39:34,360
rails it has something called active

00:39:28,900 --> 00:39:36,160
records and arbitrary so even if the

00:39:34,360 --> 00:39:38,680
class does not have any property you

00:39:36,160 --> 00:39:41,200
still basically be able to return

00:39:38,680 --> 00:39:43,660
something for that so get a teraz that

00:39:41,200 --> 00:39:48,790
exactly so when you do class name dot

00:39:43,660 --> 00:39:53,860
property let's say DB dot whatever DV

00:39:48,790 --> 00:39:56,800
dot some random property which does not

00:39:53,860 --> 00:39:59,500
exist clearly here but what will happen

00:39:56,800 --> 00:40:01,180
is DB's metaclass query maker will be

00:39:59,500 --> 00:40:03,340
intercepted and query maker has a get at

00:40:01,180 --> 00:40:05,140
a hook that is going to capture this and

00:40:03,340 --> 00:40:07,030
then it'll it's it's gonna just

00:40:05,140 --> 00:40:09,250
basically return lambda it's going to

00:40:07,030 --> 00:40:11,020
return a function what I'm doing here is

00:40:09,250 --> 00:40:13,390
return a function that basically writes

00:40:11,020 --> 00:40:16,000
that sequel query so what I could the

00:40:13,390 --> 00:40:23,860
idea behind this was let's say DB dot

00:40:16,000 --> 00:40:27,550
column name of ten or whatever shift

00:40:23,860 --> 00:40:29,440
into yeah so just this would give me

00:40:27,550 --> 00:40:31,780
select column name from database limit

00:40:29,440 --> 00:40:34,870
ten so things like that right so I could

00:40:31,780 --> 00:40:41,380
have any arbitrary column here DB dot

00:40:34,870 --> 00:40:43,270
whatever you wish so it would select big

00:40:41,380 --> 00:40:46,510
select whatever you wish from DB limit

00:40:43,270 --> 00:40:47,530
ten so now we are actually going towards

00:40:46,510 --> 00:40:49,780
building some

00:40:47,530 --> 00:40:53,880
kind of domain-specific language so just

00:40:49,780 --> 00:40:56,260
DB dot whatever of whatever and you can

00:40:53,880 --> 00:40:58,840
create powerful construct so it's

00:40:56,260 --> 00:41:00,310
returning a function here returning that

00:40:58,840 --> 00:41:01,750
lambda which is returning a sequel

00:41:00,310 --> 00:41:06,460
statement so you be basically writing

00:41:01,750 --> 00:41:09,010
code that is writing code for us yes

00:41:06,460 --> 00:41:13,780
that's a wait hold on let me get back to

00:41:09,010 --> 00:41:15,430
my presentation function yeah

00:41:13,780 --> 00:41:18,910
and the final frontier would obviously

00:41:15,430 --> 00:41:20,470
be abstract syntax trees and I I thought

00:41:18,910 --> 00:41:23,410
I wouldn't have time to cover that and I

00:41:20,470 --> 00:41:25,390
don't and Python has every language has

00:41:23,410 --> 00:41:28,120
an internal representation of the code

00:41:25,390 --> 00:41:30,640
itself code is translated into abstract

00:41:28,120 --> 00:41:32,350
syntax trees while execution and the

00:41:30,640 --> 00:41:36,100
abstract syntax tree is then converted

00:41:32,350 --> 00:41:39,010
to your low-level language and in Python

00:41:36,100 --> 00:41:40,030
it's so there are two kinds of languages

00:41:39,010 --> 00:41:42,340
right there are for more iconic

00:41:40,030 --> 00:41:46,150
languages whose abstract syntax trees or

00:41:42,340 --> 00:41:48,580
the code itself is basically written in

00:41:46,150 --> 00:41:50,710
the same language as the higher-level

00:41:48,580 --> 00:41:52,330
language so in lists for example the

00:41:50,710 --> 00:41:54,130
abstract syntax tree itself is in Lisp

00:41:52,330 --> 00:41:57,250
so that's something cool that you have

00:41:54,130 --> 00:42:01,450
to explore and a lot of powerful things

00:41:57,250 --> 00:42:03,100
are possible with that yeah thank you

00:42:01,450 --> 00:42:05,910
it's about having fun really that's

00:42:03,100 --> 00:42:08,440
about it Thanks

00:42:05,910 --> 00:42:10,030
okay anyone having any question you can

00:42:08,440 --> 00:42:13,000
raise your hand so that I can get a mic

00:42:10,030 --> 00:42:15,780
for you in a class you gave the demand

00:42:13,000 --> 00:42:18,310
for our meta class so is there a way

00:42:15,780 --> 00:42:21,340
like we can make it default like you

00:42:18,310 --> 00:42:24,130
know module all the classes will use the

00:42:21,340 --> 00:42:26,980
same metaclass yes absolutely so a meta

00:42:24,130 --> 00:42:29,620
class is inheritable that means that if

00:42:26,980 --> 00:42:32,050
you have class a which has meta class is

00:42:29,620 --> 00:42:33,550
equal to some type you have class B

00:42:32,050 --> 00:42:35,910
which are inherits from a class E which

00:42:33,550 --> 00:42:39,970
alerts from B it propagates thinking

00:42:35,910 --> 00:42:43,180
where we can use meta class like what is

00:42:39,970 --> 00:42:45,070
the need to use my have used Jango yeah

00:42:43,180 --> 00:42:46,840
a little bit so you have something

00:42:45,070 --> 00:42:48,070
called models in John yeah completely

00:42:46,840 --> 00:42:50,380
metaclasses you could look up the

00:42:48,070 --> 00:42:51,940
implementation oh so a lot of frameworks

00:42:50,380 --> 00:42:55,950
uses metaclass to make things simpler

00:42:51,940 --> 00:42:58,330
lesser lines of code okay yeah thanks

00:42:55,950 --> 00:43:00,400
producer for functions and the meta

00:42:58,330 --> 00:43:01,339
classes for classes you could write

00:43:00,400 --> 00:43:04,849
decorators for class

00:43:01,339 --> 00:43:07,099
- okay we did that quick example where

00:43:04,849 --> 00:43:09,700
we I we went through all the methods of

00:43:07,099 --> 00:43:11,960
a class so decorators and metaclasses

00:43:09,700 --> 00:43:14,380
different ways of achieving probably the

00:43:11,960 --> 00:43:17,539
same thing seen capturing the hope can

00:43:14,380 --> 00:43:19,460
intercepting code so you intercept at

00:43:17,539 --> 00:43:21,049
runtime or compiled time you intercept

00:43:19,460 --> 00:43:22,299
code and change behavior that's the

00:43:21,049 --> 00:43:24,559
intention

00:43:22,299 --> 00:43:25,940
pardon me Jonah I just need to make a

00:43:24,559 --> 00:43:29,329
small announcement continue with your

00:43:25,940 --> 00:43:31,130
questioning session after that so we are

00:43:29,329 --> 00:43:32,450
having the community discussion that was

00:43:31,130 --> 00:43:36,259
going to happen in the open space at

00:43:32,450 --> 00:43:38,390
4:30 is happening in re 3 at 4:45 so

00:43:36,259 --> 00:43:41,499
those are few who were interested please

00:43:38,390 --> 00:43:43,969
come to order 3 thanks a lot continue

00:43:41,499 --> 00:43:45,950
one more please sure like this

00:43:43,969 --> 00:43:48,109
metaclasses do they reduce the

00:43:45,950 --> 00:43:50,630
complexity like you are reducing lines

00:43:48,109 --> 00:43:53,059
of codes so but we are still writing

00:43:50,630 --> 00:43:56,900
inside a class metaclass so are they

00:43:53,059 --> 00:43:58,969
reducing the efforts or a cost if if you

00:43:56,900 --> 00:44:01,009
are comfortable enough with any concept

00:43:58,969 --> 00:44:02,359
I think it would be a powerful weapon

00:44:01,009 --> 00:44:04,190
metaclass is definitely a powerful

00:44:02,359 --> 00:44:07,369
weapon but if you're not comfortable

00:44:04,190 --> 00:44:09,499
with it your I mean usually meta classes

00:44:07,369 --> 00:44:11,450
are like the far end of Python and

00:44:09,499 --> 00:44:14,900
nobody talk of the tops some of them in

00:44:11,450 --> 00:44:16,969
general so if you look at any language

00:44:14,900 --> 00:44:19,069
meta programming is somewhat similar

00:44:16,969 --> 00:44:21,589
they are a set of principles and they

00:44:19,069 --> 00:44:24,619
are a set of concepts and Python exposes

00:44:21,589 --> 00:44:26,719
some behavior by them expose some API is

00:44:24,619 --> 00:44:28,190
like meta classes for instance but for

00:44:26,719 --> 00:44:30,079
instance you could take Atmos crypt 6 it

00:44:28,190 --> 00:44:31,849
exposes something called proxies and if

00:44:30,079 --> 00:44:35,180
you take a list you can do a whole lot

00:44:31,849 --> 00:44:39,339
of macros within it so it's a set of

00:44:35,180 --> 00:44:39,339
principles again thank you

00:44:41,470 --> 00:44:45,369
so in what cases will you use the call

00:44:43,869 --> 00:44:47,140
instead of an in it considering that

00:44:45,369 --> 00:44:48,849
both of them will be called when you

00:44:47,140 --> 00:44:51,069
initialize it in it is when you

00:44:48,849 --> 00:44:53,589
initialize call is when you so in it

00:44:51,069 --> 00:44:54,309
happens after call that's the only

00:44:53,589 --> 00:44:56,410
difference

00:44:54,309 --> 00:44:58,599
yeah and it happens after the call and

00:44:56,410 --> 00:45:01,420
you define some self dot X equal to X or

00:44:58,599 --> 00:45:04,200
whatever call is when the class object

00:45:01,420 --> 00:45:09,940
is being called is being instantiated

00:45:04,200 --> 00:45:13,329
that transition within the function now

00:45:09,940 --> 00:45:19,329
there are many conditions like many

00:45:13,329 --> 00:45:21,190
calculation how can we debug or using so

00:45:19,329 --> 00:45:23,260
with I understand so you want to modify

00:45:21,190 --> 00:45:24,970
the function code itself within the

00:45:23,260 --> 00:45:27,789
function so you have a set of statements

00:45:24,970 --> 00:45:29,950
within the function and you want weed

00:45:27,789 --> 00:45:31,510
inner state within a function or there

00:45:29,950 --> 00:45:33,519
are the load so condition and

00:45:31,510 --> 00:45:35,470
calculation I won't show debugger we

00:45:33,519 --> 00:45:38,500
didn't know what condition it will be

00:45:35,470 --> 00:45:39,519
sure so two answers to that one is don't

00:45:38,500 --> 00:45:41,680
write functions that have many

00:45:39,519 --> 00:45:43,900
conditions write small functions that's

00:45:41,680 --> 00:45:45,579
a good practice second is if you really

00:45:43,900 --> 00:45:47,380
want to go inside the function and do

00:45:45,579 --> 00:45:48,940
stuff then you have to use abstract

00:45:47,380 --> 00:45:51,039
syntax trees abstract syntax please

00:45:48,940 --> 00:45:54,000
expose you to the code itself so you can

00:45:51,039 --> 00:45:56,799
extract the code and modify each line

00:45:54,000 --> 00:46:04,180
how much of these is specific to Python

00:45:56,799 --> 00:46:06,670
3 quite a lot so for example this in the

00:46:04,180 --> 00:46:08,890
syntax meta class is equal to within the

00:46:06,670 --> 00:46:10,930
class which we did was python 3 so in

00:46:08,890 --> 00:46:12,009
Python 2 you have inside the glass you

00:46:10,930 --> 00:46:13,529
write underscore underscore meta class

00:46:12,009 --> 00:46:16,089
and this condo is equal to something and

00:46:13,529 --> 00:46:20,440
usually you're better off using Python 3

00:46:16,089 --> 00:46:22,450
today and there are a lot of underscores

00:46:20,440 --> 00:46:25,240
could get at ER underscores all those

00:46:22,450 --> 00:46:27,400
new hooks are pythons Pacific the three

00:46:25,240 --> 00:46:29,950
specific so is there any hack if I want

00:46:27,400 --> 00:46:31,509
to do the same in Python do some network

00:46:29,950 --> 00:46:33,460
around or something some code is

00:46:31,509 --> 00:46:36,880
definitely portable so you can there are

00:46:33,460 --> 00:46:38,259
a lot of API is in Python 2 as well you

00:46:36,880 --> 00:46:42,250
look up the documentation I guess you

00:46:38,259 --> 00:46:46,680
have hooks so yeah actually yeah yeah

00:46:42,250 --> 00:46:46,680
that's right thanks

00:46:46,770 --> 00:46:51,970
hello so one question here was what is

00:46:50,710 --> 00:46:57,070
the difference between metaclasses and

00:46:51,970 --> 00:46:58,420
descriptors descriptors okay well I

00:46:57,070 --> 00:47:01,030
won't answer that because I'm really not

00:46:58,420 --> 00:47:04,000
sure yeah I just want to quickly

00:47:01,030 --> 00:47:05,830
understand the metaclass you defined you

00:47:04,000 --> 00:47:07,810
forgot to do the new thing right so what

00:47:05,830 --> 00:47:10,359
was a need for that I mean I started a

00:47:07,810 --> 00:47:11,650
to me I if you don't the superclass

00:47:10,359 --> 00:47:13,750
should our enemies be automatically

00:47:11,650 --> 00:47:15,550
called by your interpreter we know that

00:47:13,750 --> 00:47:18,130
that's a base class so now we're

00:47:15,550 --> 00:47:20,470
defining our own type okay so that won't

00:47:18,130 --> 00:47:21,940
have the object as the root is it no

00:47:20,470 --> 00:47:23,740
it'll have type as the root not object

00:47:21,940 --> 00:47:24,849
as the rule right so the type super

00:47:23,740 --> 00:47:26,290
should have been called automatically

00:47:24,849 --> 00:47:27,820
right so why did you do what we'll need

00:47:26,290 --> 00:47:29,740
for doing a class object equals to

00:47:27,820 --> 00:47:31,630
something dot new and then return the

00:47:29,740 --> 00:47:34,060
class object is that how Python automata

00:47:31,630 --> 00:47:36,339
internally does as well new yes normal

00:47:34,060 --> 00:47:38,800
criticism and we modified the code there

00:47:36,339 --> 00:47:40,630
so we did something else one thing when

00:47:38,800 --> 00:47:43,150
we were doing writing class decorators

00:47:40,630 --> 00:47:45,520
was we did debug of class method and the

00:47:43,150 --> 00:47:47,589
second when we were doing metaclass

00:47:45,520 --> 00:47:49,210
example what we did was we did print

00:47:47,589 --> 00:47:51,520
something and then we returned things

00:47:49,210 --> 00:47:53,230
usually by default so it'll just create

00:47:51,520 --> 00:47:55,540
the class and give you we intercepted

00:47:53,230 --> 00:47:57,910
that we did some other operations there

00:47:55,540 --> 00:48:00,790
and then we instantiated then we

00:47:57,910 --> 00:48:02,680
returned it okay and meta class is more

00:48:00,790 --> 00:48:03,970
close closer to like the introspection

00:48:02,680 --> 00:48:05,890
kind of things at one time you're

00:48:03,970 --> 00:48:07,480
basically figuring out the exact in Java

00:48:05,890 --> 00:48:07,869
also had that introspection some long

00:48:07,480 --> 00:48:10,510
back

00:48:07,869 --> 00:48:12,339
so I think using abstract syntax trees

00:48:10,510 --> 00:48:14,830
I'm just trying to understand like so I

00:48:12,339 --> 00:48:16,960
can actually compare if my earlier

00:48:14,830 --> 00:48:18,280
version of my code and the current

00:48:16,960 --> 00:48:20,770
version logically if they're doing the

00:48:18,280 --> 00:48:23,109
same thing or not is it possible using

00:48:20,770 --> 00:48:25,390
the default abstracts restricts you can

00:48:23,109 --> 00:48:26,890
do that yes so abstracts in that squeeze

00:48:25,390 --> 00:48:28,359
our trees basically and then if you have

00:48:26,890 --> 00:48:30,310
two trees you can compare which nodes

00:48:28,359 --> 00:48:32,859
are different so it's just three

00:48:30,310 --> 00:48:35,740
operations data structures okay thank

00:48:32,859 --> 00:48:38,790
you thank you

00:48:35,740 --> 00:48:38,790

YouTube URL: https://www.youtube.com/watch?v=hPk57osSEgw


