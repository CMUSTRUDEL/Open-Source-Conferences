Title: Test Driven Development with Ansible - PyCon India 2015
Publication date: 2015-10-11
Playlist: PyCon India 2015
Description: 
	Speaker: Pooja Salpekar

When you write your Ansible scripts or any other CM, you are coding, and every code is prone to defects. All of us understand the benefits of test-driving the application code. The same applies to your infrastructure code. Testing becomes even more significant in case of deployments spanning large clusters of nodes.

Details: https://in.pycon.org/cfp/pycon-india-2015/proposals/test-driven-development-with-ansible/
Captions: 
	00:00:00,060 --> 00:00:06,060
so next talk we have for test-driven

00:00:03,149 --> 00:00:08,429
development with Anna's will by puja and

00:00:06,060 --> 00:00:10,920
info about her is like pooja is a

00:00:08,429 --> 00:00:13,080
application developer in Road Runner and

00:00:10,920 --> 00:00:17,760
has been developing software in Ruby on

00:00:13,080 --> 00:00:20,910
Rails and Python Django based web app ok

00:00:17,760 --> 00:00:24,119
hello everyone thanks for attending the

00:00:20,910 --> 00:00:25,800
talk and I in turn I will just try and

00:00:24,119 --> 00:00:27,779
do justice to all the caffeine that you

00:00:25,800 --> 00:00:32,520
have inside you not put you back to the

00:00:27,779 --> 00:00:35,640
sleep I'm currently working with Road

00:00:32,520 --> 00:00:38,579
Runner this is a pretty new startup six

00:00:35,640 --> 00:00:40,829
months old based out of Bangalore it is

00:00:38,579 --> 00:00:42,780
into hyper local delivery I don't know

00:00:40,829 --> 00:00:44,550
how many of you have heard about it

00:00:42,780 --> 00:00:48,059
prior to that I was working with hot wax

00:00:44,550 --> 00:00:50,070
for last three years mostly engaged in

00:00:48,059 --> 00:00:52,949
to developing web apps based on Ruby on

00:00:50,070 --> 00:00:55,430
Rails and Python Django also I've been

00:00:52,949 --> 00:00:58,500
doing on and off DevOps book and today

00:00:55,430 --> 00:01:01,170
presenting on the same how to test drive

00:00:58,500 --> 00:01:03,180
your infrastructure because I think

00:01:01,170 --> 00:01:06,210
mostly Oh most of the a child

00:01:03,180 --> 00:01:08,280
conferences here in there a lot of talks

00:01:06,210 --> 00:01:12,119
we see one how to what are the best

00:01:08,280 --> 00:01:13,770
practices around application code or why

00:01:12,119 --> 00:01:15,240
do we need test-driven development or

00:01:13,770 --> 00:01:16,950
why do we need continuous delivery and

00:01:15,240 --> 00:01:18,330
all that focuses around your app code

00:01:16,950 --> 00:01:20,310
but what about your infrastructure code

00:01:18,330 --> 00:01:21,229
so so that is what I will be presenting

00:01:20,310 --> 00:01:23,580
today

00:01:21,229 --> 00:01:24,960
that's my Twitter handle I would be

00:01:23,580 --> 00:01:28,920
happy to receive any feedback or

00:01:24,960 --> 00:01:30,920
opinions on this all right so so again

00:01:28,920 --> 00:01:35,430
to start with test-driven development

00:01:30,920 --> 00:01:40,829
how many of you have been using this on

00:01:35,430 --> 00:01:43,470
a regular basis okay okay just to just

00:01:40,829 --> 00:01:45,509
to brief about the concept it's a simple

00:01:43,470 --> 00:01:49,710
concept right so it's for developers

00:01:45,509 --> 00:01:52,049
where the feedback cycle is faster so

00:01:49,710 --> 00:01:54,540
before any upcoming feature you just

00:01:52,049 --> 00:01:56,460
start writing test for that feature you

00:01:54,540 --> 00:01:59,040
test the required behavior from that

00:01:56,460 --> 00:02:00,930
feature you you run the test and see

00:01:59,040 --> 00:02:03,689
those tests fearing then you then you

00:02:00,930 --> 00:02:06,509
implement the feature and seed pass so

00:02:03,689 --> 00:02:08,989
as to know what your feature is exactly

00:02:06,509 --> 00:02:11,160
supposed to do what are the benefits

00:02:08,989 --> 00:02:13,020
straightforward right so is receive your

00:02:11,160 --> 00:02:13,590
fearing feedback faster and not late

00:02:13,020 --> 00:02:17,910
interpreter

00:02:13,590 --> 00:02:20,700
or any other pre life environments to to

00:02:17,910 --> 00:02:25,140
give you a clean coat to give to improve

00:02:20,700 --> 00:02:26,989
your overall design and and I think so

00:02:25,140 --> 00:02:29,099
this is just my personal opinion

00:02:26,989 --> 00:02:31,349
along with all these benefits it has

00:02:29,099 --> 00:02:32,819
also some in a way helped us in the

00:02:31,349 --> 00:02:35,280
continuous delivery process of

00:02:32,819 --> 00:02:37,860
application development right so so to

00:02:35,280 --> 00:02:39,989
define or to just explain the regular

00:02:37,860 --> 00:02:42,709
flow path of how app code gets deployed

00:02:39,989 --> 00:02:45,810
to the production that's a developer

00:02:42,709 --> 00:02:50,040
goal from his local machine to some

00:02:45,810 --> 00:02:53,549
version control system server sitting

00:02:50,040 --> 00:02:57,150
and pulling this code on and off and and

00:02:53,549 --> 00:02:58,890
this enforces some practice running the

00:02:57,150 --> 00:03:02,040
tests around the around the artifact

00:02:58,890 --> 00:03:04,260
that is that it has just pull if those

00:03:02,040 --> 00:03:06,630
tests feel right that artifact is

00:03:04,260 --> 00:03:09,090
rejected and not push to production but

00:03:06,630 --> 00:03:10,950
when it passes it goes through series of

00:03:09,090 --> 00:03:14,310
servers and environments and finally

00:03:10,950 --> 00:03:20,130
push to production right this is how it

00:03:14,310 --> 00:03:23,670
goes right okay but when it comes to

00:03:20,130 --> 00:03:26,370
designing infrastructure the usual life

00:03:23,670 --> 00:03:29,040
cycle begins with bootstrapping a server

00:03:26,370 --> 00:03:30,840
manually right I want to develop an

00:03:29,040 --> 00:03:33,090
application which is on Ruby on Rails

00:03:30,840 --> 00:03:35,700
and which needs nginx server and which

00:03:33,090 --> 00:03:36,120
needs my sequel as the database all

00:03:35,700 --> 00:03:38,900
right

00:03:36,120 --> 00:03:41,100
create create a server spin up all this

00:03:38,900 --> 00:03:43,470
install all these things on the server

00:03:41,100 --> 00:03:45,269
and get my thing running on some

00:03:43,470 --> 00:03:47,190
environment some environment I'm not

00:03:45,269 --> 00:03:49,500
calling it production yet and then image

00:03:47,190 --> 00:03:51,299
the same box into multiple servers and

00:03:49,500 --> 00:03:54,480
then built up what is then called as

00:03:51,299 --> 00:03:56,310
production environment why why doesn't

00:03:54,480 --> 00:03:58,049
so right traditionally our

00:03:56,310 --> 00:03:59,700
infrastructure has been lagged far

00:03:58,049 --> 00:04:02,459
behind all these development practices

00:03:59,700 --> 00:04:06,260
in terms of CI in terms of core quality

00:04:02,459 --> 00:04:09,060
in terms of in terms of testing per se

00:04:06,260 --> 00:04:11,670
but but I think thanks to community when

00:04:09,060 --> 00:04:13,560
it when the realization hit them there

00:04:11,670 --> 00:04:18,000
was a pollution of the provisioning tool

00:04:13,560 --> 00:04:19,709
snake and civil chef puppet and and I am

00:04:18,000 --> 00:04:21,870
to say here that it did make the life

00:04:19,709 --> 00:04:23,760
simpler rather than just going and

00:04:21,870 --> 00:04:26,610
installing things manually

00:04:23,760 --> 00:04:28,860
and then then thinking about what did I

00:04:26,610 --> 00:04:30,900
install and what what I need next if I

00:04:28,860 --> 00:04:34,050
want to just duplicate the environment

00:04:30,900 --> 00:04:36,600
this gives an automation script where

00:04:34,050 --> 00:04:38,610
you have where you have proper set of

00:04:36,600 --> 00:04:40,890
knowledge that what I need on my server

00:04:38,610 --> 00:04:43,080
so and civil and all this provisioning

00:04:40,890 --> 00:04:46,620
tools made the life simpler but but

00:04:43,080 --> 00:04:48,510
after after this was introduced Oh what

00:04:46,620 --> 00:04:50,340
is the flow path of infrastructure

00:04:48,510 --> 00:04:52,320
change I am NOT saying that this

00:04:50,340 --> 00:04:54,060
bootstrapping so now your server has

00:04:52,320 --> 00:04:55,350
been bootstrap and now you want to add

00:04:54,060 --> 00:04:57,300
some change to the production

00:04:55,350 --> 00:05:02,100
environment how does that infrastructure

00:04:57,300 --> 00:05:04,170
changes deploy to production it goes

00:05:02,100 --> 00:05:06,060
somewhat like this so a developer just

00:05:04,170 --> 00:05:08,340
sits on his machine pushes the code to

00:05:06,060 --> 00:05:14,580
the to the version control system and

00:05:08,340 --> 00:05:16,680
from there it goes to many of many of

00:05:14,580 --> 00:05:18,990
you will disagree saying that no we we

00:05:16,680 --> 00:05:20,370
do test it manually ohms and some free

00:05:18,990 --> 00:05:21,360
live environments because we don't want

00:05:20,370 --> 00:05:24,960
to screw up the production environment

00:05:21,360 --> 00:05:28,110
right we do but then but then how many

00:05:24,960 --> 00:05:30,180
times we are confident about a simple

00:05:28,110 --> 00:05:32,220
change and there exists a syntactical

00:05:30,180 --> 00:05:36,300
error and unable to start your server

00:05:32,220 --> 00:05:38,250
right how and and this is just a smaller

00:05:36,300 --> 00:05:40,950
picture sitting having one developer and

00:05:38,250 --> 00:05:43,500
one production server think of this and

00:05:40,950 --> 00:05:44,850
scale it to multiple servers having in a

00:05:43,500 --> 00:05:46,680
distributed environment where there are

00:05:44,850 --> 00:05:48,840
multiple devastating can you enforce

00:05:46,680 --> 00:05:51,720
each and everybody to just test their

00:05:48,840 --> 00:05:54,240
infrastructure change no right there

00:05:51,720 --> 00:05:56,130
needs to be some tooling that enforces

00:05:54,240 --> 00:05:59,880
certain practices in this deployment

00:05:56,130 --> 00:06:02,250
process however first I would like to

00:05:59,880 --> 00:06:04,760
give you the demo of how things breaks

00:06:02,250 --> 00:06:04,760
on production

00:06:10,080 --> 00:06:17,580
okay so so this is a static page that I

00:06:15,520 --> 00:06:19,900
have served on an engine X Server and

00:06:17,580 --> 00:06:20,889
this is what I've deployed on our

00:06:19,900 --> 00:06:23,550
vagrant

00:06:20,889 --> 00:06:27,760
I've automated it wine and civil script

00:06:23,550 --> 00:06:29,620
so now to give you the code sample this

00:06:27,760 --> 00:06:31,389
is my bootstrap script bootstrapping

00:06:29,620 --> 00:06:34,870
swift where I have an engineer server

00:06:31,389 --> 00:06:36,520
and I'm copying certain to that the

00:06:34,870 --> 00:06:39,130
conflicts here being there is one server

00:06:36,520 --> 00:06:41,050
listening on port 80 all I have to

00:06:39,130 --> 00:06:44,260
change now is to deploy another

00:06:41,050 --> 00:06:46,150
application on another port right so I

00:06:44,260 --> 00:06:54,820
have already done this I'm just gonna

00:06:46,150 --> 00:06:56,470
check out another branch alright and

00:06:54,820 --> 00:06:59,050
then I'm gonna apply the ansible

00:06:56,470 --> 00:07:00,460
playbook again on oh just a prior

00:06:59,050 --> 00:07:04,540
question how many of you have worked in

00:07:00,460 --> 00:07:06,760
with ansible before for others just a

00:07:04,540 --> 00:07:09,729
quick quick introduction and civil is

00:07:06,760 --> 00:07:12,970
nothing it just gets set of instructions

00:07:09,729 --> 00:07:15,940
and installs whatever you are asking to

00:07:12,970 --> 00:07:22,750
install on a particular environment so

00:07:15,940 --> 00:07:24,729
to show you here so when I say the tasks

00:07:22,750 --> 00:07:27,400
those are just simple tasks that will

00:07:24,729 --> 00:07:29,350
run on on a particular host those are

00:07:27,400 --> 00:07:31,210
the tasks that I'm gonna run on on my

00:07:29,350 --> 00:07:36,550
vagrant machine right now after applying

00:07:31,210 --> 00:07:38,880
this sorry this is just a dynamic IP

00:07:36,550 --> 00:07:38,880
thing

00:07:46,940 --> 00:07:54,320
all right right so it ran set of tasks

00:07:51,500 --> 00:07:55,580
you see the nginx copy config has been

00:07:54,320 --> 00:07:57,800
changed which means there is some change

00:07:55,580 --> 00:07:59,480
in nginx config which also triggered the

00:07:57,800 --> 00:08:01,640
internet restart so it restarted than

00:07:59,480 --> 00:08:03,710
nginx and the output shows that

00:08:01,640 --> 00:08:06,080
everything went through which means now

00:08:03,710 --> 00:08:08,600
my environment should be up and I should

00:08:06,080 --> 00:08:10,550
be able to have two applications one

00:08:08,600 --> 00:08:12,680
deployed which was earlier on port 80

00:08:10,550 --> 00:08:16,400
and the other one which I just just

00:08:12,680 --> 00:08:17,840
added I deployed it on port 3000 all of

00:08:16,400 --> 00:08:19,550
this is port forwarded to the host

00:08:17,840 --> 00:08:22,100
machine I'm just gonna refresh the

00:08:19,550 --> 00:08:24,590
previous application and now it's no

00:08:22,100 --> 00:08:27,100
more there I'm testing whether the new

00:08:24,590 --> 00:08:30,700
one got deployed

00:08:27,100 --> 00:08:32,690
I'm port forwarding it to a 9000 and

00:08:30,700 --> 00:08:35,150
there's something else there's no

00:08:32,690 --> 00:08:36,830
application deployed there right so when

00:08:35,150 --> 00:08:38,960
you see here basically there was

00:08:36,830 --> 00:08:41,599
something else running on my port 3000

00:08:38,960 --> 00:08:43,789
but none of the script told me so right

00:08:41,599 --> 00:08:46,340
so just consider this scenario and and

00:08:43,789 --> 00:08:48,650
changing or adding something on a new

00:08:46,340 --> 00:08:53,210
port is just a simplistic example but it

00:08:48,650 --> 00:08:55,010
did make your engineer stop right so so

00:08:53,210 --> 00:09:01,250
now consider coming back to my

00:08:55,010 --> 00:09:03,920
presentation now consider the test

00:09:01,250 --> 00:09:07,280
around this and and I had run those

00:09:03,920 --> 00:09:08,450
tests on my local environment and and

00:09:07,280 --> 00:09:10,460
that would have given me a failure

00:09:08,450 --> 00:09:12,230
saying no this particular change is not

00:09:10,460 --> 00:09:14,630
ready to go on production and something

00:09:12,230 --> 00:09:15,980
will go wrong let's just say something

00:09:14,630 --> 00:09:19,160
and the test is not giving you feedback

00:09:15,980 --> 00:09:21,920
that what it is what is exactly going

00:09:19,160 --> 00:09:25,940
wrong on the server so would that help a

00:09:21,920 --> 00:09:28,100
little bit right so I started thinking

00:09:25,940 --> 00:09:30,200
in those direction I had spent a lot of

00:09:28,100 --> 00:09:31,580
time developing application code and

00:09:30,200 --> 00:09:33,020
that's why it when I moved to

00:09:31,580 --> 00:09:37,730
infrastructure I started thinking in the

00:09:33,020 --> 00:09:40,040
same lines so so I started reading about

00:09:37,730 --> 00:09:43,520
can we can I write test for my

00:09:40,040 --> 00:09:44,690
infrastructure core and then I learned

00:09:43,520 --> 00:09:50,300
about this term test-driven

00:09:44,690 --> 00:09:52,100
infrastructure so okay so when you there

00:09:50,300 --> 00:09:56,000
are five principles basically that

00:09:52,100 --> 00:10:00,499
define the infrastructure or testing and

00:09:56,000 --> 00:10:02,419
those five principles being one document

00:10:00,499 --> 00:10:05,149
all your system requirements have a high

00:10:02,419 --> 00:10:07,039
level system requirements written

00:10:05,149 --> 00:10:10,069
somewhere so that you know what behavior

00:10:07,039 --> 00:10:11,989
is expected out of your system once you

00:10:10,069 --> 00:10:14,899
know what the what is the system is

00:10:11,989 --> 00:10:17,199
expected to be like then you write tests

00:10:14,899 --> 00:10:21,679
around that behavior right so do I have

00:10:17,199 --> 00:10:23,089
so for example right so I know that in a

00:10:21,679 --> 00:10:24,439
production by a relation environment

00:10:23,089 --> 00:10:26,779
will look like there will be two app

00:10:24,439 --> 00:10:29,269
servers and there will be a there will

00:10:26,779 --> 00:10:30,709
be a my sequel server running so basic

00:10:29,269 --> 00:10:32,419
behavior will be both the app server

00:10:30,709 --> 00:10:34,579
should be up my sequel server should be

00:10:32,419 --> 00:10:37,279
up and all this server should be able to

00:10:34,579 --> 00:10:39,919
talk to do themselves among themselves

00:10:37,279 --> 00:10:43,579
right so this is the simple system

00:10:39,919 --> 00:10:45,349
behavior that I'm setting up run those

00:10:43,579 --> 00:10:47,809
tests see them failing and then you

00:10:45,349 --> 00:10:49,339
implement actual infrastructure code to

00:10:47,809 --> 00:10:51,259
bring those environments up to bring

00:10:49,339 --> 00:10:54,499
those servers up and then see them

00:10:51,259 --> 00:10:56,989
having those behavior being implemented

00:10:54,499 --> 00:11:00,529
and when you see that you run your test

00:10:56,989 --> 00:11:02,029
and you see them passing also obviously

00:11:00,529 --> 00:11:04,639
so you version your infrastructure code

00:11:02,029 --> 00:11:07,849
because like always right it gives you

00:11:04,639 --> 00:11:09,109
easy collaboration the the most

00:11:07,849 --> 00:11:12,470
important point is to do this

00:11:09,109 --> 00:11:14,689
continuously right because if you

00:11:12,470 --> 00:11:15,799
compare the frequency of application

00:11:14,689 --> 00:11:17,359
core being deployed versus

00:11:15,799 --> 00:11:18,679
infrastructure core being deployed you

00:11:17,359 --> 00:11:20,720
would say there's no need right because

00:11:18,679 --> 00:11:23,359
iím probably deploy an infrastructure

00:11:20,720 --> 00:11:25,099
change once in two months now consider

00:11:23,359 --> 00:11:26,449
the probability of application core

00:11:25,099 --> 00:11:28,129
breaking you are in a breaking your

00:11:26,449 --> 00:11:29,659
production environment versus your

00:11:28,129 --> 00:11:32,839
infrastructure for breaking your

00:11:29,659 --> 00:11:35,209
environment the percentage is probably

00:11:32,839 --> 00:11:36,739
high so as I would say there's need of

00:11:35,209 --> 00:11:38,779
doing this continuously so that you

00:11:36,739 --> 00:11:40,970
enforce the practices which will going

00:11:38,779 --> 00:11:44,499
forward which going forward will all

00:11:40,970 --> 00:11:50,089
obviously give a safer environment for

00:11:44,499 --> 00:11:52,399
this development as well okay so so now

00:11:50,089 --> 00:11:54,439
when I read about this this all

00:11:52,399 --> 00:11:56,509
principles and everything in theory it

00:11:54,439 --> 00:11:58,849
looked fine what about implementing them

00:11:56,509 --> 00:12:02,359
so I started writing tests around my own

00:11:58,849 --> 00:12:04,129
Sybil scripts and civil playbook where

00:12:02,359 --> 00:12:06,589
I'm just copying the engineers

00:12:04,129 --> 00:12:09,799
configuration from a template file on

00:12:06,589 --> 00:12:12,919
the remote host so how do I test this so

00:12:09,799 --> 00:12:13,620
I started thinking on can I have tests

00:12:12,919 --> 00:12:16,050
around whether

00:12:13,620 --> 00:12:18,180
the file is being copied whether the

00:12:16,050 --> 00:12:20,910
file contains proper route whether the

00:12:18,180 --> 00:12:23,070
file contains application being deployed

00:12:20,910 --> 00:12:29,010
on so in support right and that's how I

00:12:23,070 --> 00:12:31,589
wrote my test so I just look like this

00:12:29,010 --> 00:12:34,440
particular thing should be a file this

00:12:31,589 --> 00:12:35,160
file should contain so-and-so text so

00:12:34,440 --> 00:12:37,800
that Vince

00:12:35,160 --> 00:12:39,450
whenever someone changed this particular

00:12:37,800 --> 00:12:42,300
line it will fail

00:12:39,450 --> 00:12:44,279
what if someone adds something new it

00:12:42,300 --> 00:12:46,320
won't write so which means then you have

00:12:44,279 --> 00:12:47,820
to test drive your infrastructure where

00:12:46,320 --> 00:12:52,290
you have to add a test before you add a

00:12:47,820 --> 00:12:54,540
file does that make sense to me it did

00:12:52,290 --> 00:12:58,380
but not much because I'm not testing the

00:12:54,540 --> 00:13:00,420
higher-level behavior I'm not testing if

00:12:58,380 --> 00:13:02,550
this file contains blah blah blah

00:13:00,420 --> 00:13:04,320
will give me certain assurances that if

00:13:02,550 --> 00:13:07,500
it changes if my project route changes

00:13:04,320 --> 00:13:09,480
it will show me but will it give me

00:13:07,500 --> 00:13:11,040
error like what I did will it give me a

00:13:09,480 --> 00:13:12,630
hurry when I started something on a new

00:13:11,040 --> 00:13:17,700
port and there was existing something

00:13:12,630 --> 00:13:20,279
this won't right so so I started doing

00:13:17,700 --> 00:13:22,290
research around this and there is a

00:13:20,279 --> 00:13:25,200
there's a big Google group discussion

00:13:22,290 --> 00:13:26,070
around how to whether we should test

00:13:25,200 --> 00:13:28,890
drive your ansible

00:13:26,070 --> 00:13:31,200
or not why specifically around ansible

00:13:28,890 --> 00:13:33,690
all of us know that it's a very

00:13:31,200 --> 00:13:35,940
declarative language unlike chef and

00:13:33,690 --> 00:13:38,400
puppet which claims themself as a very

00:13:35,940 --> 00:13:42,779
declarative one and Simon has just gone

00:13:38,400 --> 00:13:44,040
beyond limits with puppet I have worked

00:13:42,779 --> 00:13:45,959
with power I haven't worked with chef

00:13:44,040 --> 00:13:48,270
but with puppet there is some appliqu

00:13:45,959 --> 00:13:50,160
there is some logic in your code with

00:13:48,270 --> 00:13:54,150
ansible it's plain simple so when I'm

00:13:50,160 --> 00:13:55,620
testing the way I did before I'm doing

00:13:54,150 --> 00:13:57,089
nothing but testing and civil modules

00:13:55,620 --> 00:13:59,810
and I don't want to test because I trust

00:13:57,089 --> 00:14:02,670
the community so when I read those

00:13:59,810 --> 00:14:06,870
Google group discussion something which

00:14:02,670 --> 00:14:08,370
really caught my eyes was I don't want

00:14:06,870 --> 00:14:09,750
to test what what it is being

00:14:08,370 --> 00:14:12,029
implemented but I want to test the

00:14:09,750 --> 00:14:14,430
outcome of this right if I do a

00:14:12,029 --> 00:14:16,230
particular thing what it will result

00:14:14,430 --> 00:14:20,940
into this is something that I want to

00:14:16,230 --> 00:14:21,450
test and and and so these questions were

00:14:20,940 --> 00:14:23,970
right

00:14:21,450 --> 00:14:26,880
that cannot ping this particular website

00:14:23,970 --> 00:14:27,360
is my server up are the server's able to

00:14:26,880 --> 00:14:34,680
talk to

00:14:27,360 --> 00:14:37,829
each other and not this it's so-so in

00:14:34,680 --> 00:14:42,240
the same thing I also came across server

00:14:37,829 --> 00:14:44,730
spec have you heard of this okay so

00:14:42,240 --> 00:14:47,149
server spec is a ruby library which

00:14:44,730 --> 00:14:50,550
gives you a way to test the system

00:14:47,149 --> 00:14:53,459
behavior it's a simple r-spec matches

00:14:50,550 --> 00:14:55,649
but not for your application code where

00:14:53,459 --> 00:14:58,310
you just say one expect one is equal to

00:14:55,649 --> 00:15:01,380
one it gives you matches like expect a

00:14:58,310 --> 00:15:05,370
particular port is listening expect a

00:15:01,380 --> 00:15:07,200
particular expect a particular so when I

00:15:05,370 --> 00:15:10,829
do a curl a particular output is

00:15:07,200 --> 00:15:12,930
received and end this this way so so I

00:15:10,829 --> 00:15:18,450
started writing empower service pack for

00:15:12,930 --> 00:15:22,950
my implementation so to just show you a

00:15:18,450 --> 00:15:26,100
bit of code so this is how the sample

00:15:22,950 --> 00:15:29,130
spec file would look like it just test

00:15:26,100 --> 00:15:32,970
whether port 80 is listening or not and

00:15:29,130 --> 00:15:36,720
and when I do a curl on that what is the

00:15:32,970 --> 00:15:38,850
output and when I added the new when I

00:15:36,720 --> 00:15:42,000
did the new app being deployed on port

00:15:38,850 --> 00:15:44,100
3000 I also added this test so from the

00:15:42,000 --> 00:15:46,320
implement from the demo prior before

00:15:44,100 --> 00:15:48,810
this you would remember that it failed

00:15:46,320 --> 00:15:50,279
right the port 3000 was listening but

00:15:48,810 --> 00:15:53,130
there was something else running on it

00:15:50,279 --> 00:15:55,399
so now when I run my specs on my local

00:15:53,130 --> 00:15:55,399
machine

00:16:09,300 --> 00:16:14,090
all right those filled so

00:16:17,490 --> 00:16:23,670
so if you look at this further it will

00:16:21,029 --> 00:16:26,310
tell me that the unit test that I wrote

00:16:23,670 --> 00:16:28,470
is fine that particular thing is file

00:16:26,310 --> 00:16:31,460
and it has this particular route but

00:16:28,470 --> 00:16:35,130
when I say is port 80 listening know

00:16:31,460 --> 00:16:38,339
when I do look curl localhost 180 it's

00:16:35,130 --> 00:16:40,170
failing but port 3000 is listening so in

00:16:38,339 --> 00:16:42,450
a way my tests are telling me that

00:16:40,170 --> 00:16:46,350
something changed that you mean is

00:16:42,450 --> 00:16:47,940
exactly not is exactly failing because

00:16:46,350 --> 00:16:50,550
there is something else running on board

00:16:47,940 --> 00:16:53,490
3000 right so if you read read the

00:16:50,550 --> 00:16:55,589
failure oh well and if you understand

00:16:53,490 --> 00:16:57,690
how sour spec behaves and what what

00:16:55,589 --> 00:17:00,839
exact behavior are you expecting out of

00:16:57,690 --> 00:17:02,790
your environment I think those can give

00:17:00,839 --> 00:17:04,110
you a proper feedback in a way rather

00:17:02,790 --> 00:17:06,620
than having no test around your

00:17:04,110 --> 00:17:06,620
infrastructure

00:17:13,870 --> 00:17:19,809
so so I started my talk with test-driven

00:17:17,620 --> 00:17:21,459
development where we're a test is

00:17:19,809 --> 00:17:22,569
written first for a feature then it's

00:17:21,459 --> 00:17:25,419
developed and deployed to production

00:17:22,569 --> 00:17:27,339
which looks like this for infrastructure

00:17:25,419 --> 00:17:29,529
I would say the sequence won't matter as

00:17:27,339 --> 00:17:32,190
long as everything is tested so I

00:17:29,529 --> 00:17:35,049
personally was fine if these two swapped

00:17:32,190 --> 00:17:37,650
if I develop the code first and then I

00:17:35,049 --> 00:17:42,309
test that the behavior is still intact

00:17:37,650 --> 00:17:45,250
and then the easiest thing or the main

00:17:42,309 --> 00:17:46,720
thing for me to get the code deployed to

00:17:45,250 --> 00:17:50,409
the production environment

00:17:46,720 --> 00:17:52,450
somewhat looked like this a person

00:17:50,409 --> 00:17:54,340
changing some infrastructure code and

00:17:52,450 --> 00:17:59,669
pushing it to the put to the version

00:17:54,340 --> 00:18:02,770
control was pulled by CI CI running

00:17:59,669 --> 00:18:05,470
forever spec on a vagrant machine right

00:18:02,770 --> 00:18:07,890
so this vagrant machine was introduced

00:18:05,470 --> 00:18:11,169
just for solely for the purpose of

00:18:07,890 --> 00:18:13,960
testing it testing it and being in

00:18:11,169 --> 00:18:15,429
production like right so at the end what

00:18:13,960 --> 00:18:18,610
I'm expecting of my production server

00:18:15,429 --> 00:18:22,480
should be exactly replicated on this

00:18:18,610 --> 00:18:24,909
vagrant box if it fails it fails you

00:18:22,480 --> 00:18:26,169
don't have to push this to do the

00:18:24,909 --> 00:18:31,240
production because you don't want your

00:18:26,169 --> 00:18:34,750
production to to just go down and if it

00:18:31,240 --> 00:18:37,899
passes it gives a fair amount of

00:18:34,750 --> 00:18:39,880
confidence that whatever I did was at

00:18:37,899 --> 00:18:41,919
least right because it was tested if it

00:18:39,880 --> 00:18:43,390
failed maybe it was some something due

00:18:41,919 --> 00:18:45,610
to the hardware failure maybe it was

00:18:43,390 --> 00:18:46,870
because of a network failure but but a

00:18:45,610 --> 00:18:49,419
developer can say that

00:18:46,870 --> 00:18:52,720
I did it and I know that my code doesn't

00:18:49,419 --> 00:18:56,190
break as a developer you would not want

00:18:52,720 --> 00:18:56,190
anything less do you

00:18:57,090 --> 00:19:03,940
so why vagrant why not run it against

00:19:02,110 --> 00:19:06,130
any environment why not run it against

00:19:03,940 --> 00:19:08,649
you wait you're staging right as we do

00:19:06,130 --> 00:19:10,720
now manually test it against under

00:19:08,649 --> 00:19:13,450
running environment and see if it passes

00:19:10,720 --> 00:19:16,240
it push it to the production do you

00:19:13,450 --> 00:19:18,580
really want to mess up your environment

00:19:16,240 --> 00:19:20,460
and then revert your changes and apply

00:19:18,580 --> 00:19:22,570
it again if you have something

00:19:20,460 --> 00:19:23,880
virtualization at your hand why not use

00:19:22,570 --> 00:19:26,890
it

00:19:23,880 --> 00:19:27,490
it does give CI to enforce certain

00:19:26,890 --> 00:19:29,740
practice

00:19:27,490 --> 00:19:32,289
around around your deployment and

00:19:29,740 --> 00:19:34,870
delivery process where where it ensures

00:19:32,289 --> 00:19:37,809
that the set of tests are run against

00:19:34,870 --> 00:19:40,750
some some server and it knows that it

00:19:37,809 --> 00:19:43,990
will pass more than that it also gives

00:19:40,750 --> 00:19:45,940
Liberty to any developer just spin up a

00:19:43,990 --> 00:19:47,830
vagrant box on his local machine and see

00:19:45,940 --> 00:19:50,470
if his changes are working fine why to

00:19:47,830 --> 00:19:52,929
wait for CI to tell you that right so I

00:19:50,470 --> 00:19:56,789
think as long as you get the feedback

00:19:52,929 --> 00:19:59,590
faster in cycle I am fine with with

00:19:56,789 --> 00:20:01,990
vagrant being spend up by a CI server or

00:19:59,590 --> 00:20:06,070
any any local developer writing his code

00:20:01,990 --> 00:20:08,230
there a little bit to talk about server

00:20:06,070 --> 00:20:10,600
spec as I said earlier it's it's a

00:20:08,230 --> 00:20:13,450
simple ruby library and having our spec

00:20:10,600 --> 00:20:15,789
like matches if you haven't looked at it

00:20:13,450 --> 00:20:18,940
I would really suggest to to have a look

00:20:15,789 --> 00:20:21,820
at it it's worth looking at even if you

00:20:18,940 --> 00:20:24,399
have not even automated your servers

00:20:21,820 --> 00:20:26,590
using any provisioning tools it's not

00:20:24,399 --> 00:20:29,080
too late to just try testing it it's

00:20:26,590 --> 00:20:30,580
behavior because if it fails it will it

00:20:29,080 --> 00:20:33,720
will let you know right away that it's

00:20:30,580 --> 00:20:33,720
not working

00:20:37,809 --> 00:20:44,049
so I did all of this and and and all my

00:20:41,710 --> 00:20:47,169
work was just just cruel by these two

00:20:44,049 --> 00:20:49,210
terms kitten ansible which is exactly

00:20:47,169 --> 00:20:51,219
same what I told so I did everything

00:20:49,210 --> 00:20:55,450
manually and then this particular gem

00:20:51,219 --> 00:20:58,389
does everything what I told it it has it

00:20:55,450 --> 00:21:00,940
takes an ansible playbook as input it

00:20:58,389 --> 00:21:03,399
runs that ansible playbook on on a pro

00:21:00,940 --> 00:21:07,059
on our platform it can be vagrant it can

00:21:03,399 --> 00:21:08,919
be docker anything and then it then it

00:21:07,059 --> 00:21:11,529
runs a set of tests on that particular

00:21:08,919 --> 00:21:19,830
platform which is what I just did right

00:21:11,529 --> 00:21:23,169
and it's a Yama file right so it

00:21:19,830 --> 00:21:25,599
everything to configure here is just in

00:21:23,169 --> 00:21:27,279
three blocks one is you give your

00:21:25,599 --> 00:21:28,690
provisioner right so that's the name of

00:21:27,279 --> 00:21:30,580
the PlayBook that you want to apply

00:21:28,690 --> 00:21:32,879
those are the hosts where you want to

00:21:30,580 --> 00:21:32,879
apply it

00:21:33,629 --> 00:21:38,499
that's my provider so it's a vagrant box

00:21:36,580 --> 00:21:40,359
it's an Ubuntu and n set of

00:21:38,499 --> 00:21:43,359
configurations are around it which you

00:21:40,359 --> 00:21:45,789
want to just which are just optional and

00:21:43,359 --> 00:21:48,609
then it takes a block where you just

00:21:45,789 --> 00:21:51,099
gives a name of your test file test file

00:21:48,609 --> 00:21:53,769
is nothing but it could be any any test

00:21:51,099 --> 00:21:55,179
that you wanted could be a service pack

00:21:53,769 --> 00:21:56,889
it could be a Ammal test it could be

00:21:55,179 --> 00:22:01,330
anything it just takes the block and run

00:21:56,889 --> 00:22:03,849
that test fine and and it just so yeah

00:22:01,330 --> 00:22:08,109
so I think Kitchen ansible was something

00:22:03,849 --> 00:22:11,769
with just oh we just made everything

00:22:08,109 --> 00:22:13,749
easy like a breeze to talk about why

00:22:11,769 --> 00:22:15,009
should we do the test driven

00:22:13,749 --> 00:22:17,349
infrastructure right what are the

00:22:15,009 --> 00:22:19,719
benefits of doing this pretty much all

00:22:17,349 --> 00:22:22,779
the previous slides cover this but just

00:22:19,719 --> 00:22:25,359
to just to sum it up it will give you

00:22:22,779 --> 00:22:27,489
readily verifier behavior which means I

00:22:25,359 --> 00:22:29,169
I do some change on my local machine I

00:22:27,489 --> 00:22:31,149
want to verify it right away I don't

00:22:29,169 --> 00:22:33,700
want to apply it to any environment and

00:22:31,149 --> 00:22:36,399
see that so that that gives this is

00:22:33,700 --> 00:22:38,919
available at hand you can feel fast and

00:22:36,399 --> 00:22:41,619
not worry about it you can improve your

00:22:38,919 --> 00:22:44,589
overall architecture and the major one

00:22:41,619 --> 00:22:49,089
you can always always do refactoring

00:22:44,589 --> 00:22:50,770
without worrying what will break awesome

00:22:49,089 --> 00:22:53,080
so so everything is done I

00:22:50,770 --> 00:22:56,470
my server written ansible script I've

00:22:53,080 --> 00:22:58,810
tested it and everything works fine so I

00:22:56,470 --> 00:23:01,750
four notes now and all of them are being

00:22:58,810 --> 00:23:03,700
tested what if one of the node goes down

00:23:01,750 --> 00:23:05,230
not because of any of this it goes down

00:23:03,700 --> 00:23:06,670
because there was a net for failure

00:23:05,230 --> 00:23:09,490
it goes down because there was loaded

00:23:06,670 --> 00:23:11,920
space so it's always suggested to have

00:23:09,490 --> 00:23:14,470
some sort of some sort of system

00:23:11,920 --> 00:23:17,680
monitoring around this the lot of tools

00:23:14,470 --> 00:23:18,730
available at hand but there is a monitor

00:23:17,680 --> 00:23:21,520
there is engineer

00:23:18,730 --> 00:23:24,900
sorry Nagios there is a new relic for

00:23:21,520 --> 00:23:28,060
that matter but but yeah every team

00:23:24,900 --> 00:23:32,680
ensures that this is in place and and

00:23:28,060 --> 00:23:35,560
they should taking the opportunity of

00:23:32,680 --> 00:23:36,880
this I would like to just to share the

00:23:35,560 --> 00:23:39,040
knowledge which I came across while

00:23:36,880 --> 00:23:41,170
doing this presentation this is a new

00:23:39,040 --> 00:23:41,920
tool that has been introduced a couple

00:23:41,170 --> 00:23:45,310
of days ago

00:23:41,920 --> 00:23:49,300
it's called Auto they claim it as being

00:23:45,310 --> 00:23:52,240
a successor of vagrant so it not only

00:23:49,300 --> 00:23:55,660
knows how to develop your application it

00:23:52,240 --> 00:23:59,980
also knows how to deploy it around this

00:23:55,660 --> 00:24:02,890
dev developed with okay so they've

00:23:59,980 --> 00:24:05,770
developed with dependencies being your

00:24:02,890 --> 00:24:08,080
first class feature so you just you just

00:24:05,770 --> 00:24:09,460
name that my Apple my code or the

00:24:08,080 --> 00:24:11,680
application that I'm developing is a

00:24:09,460 --> 00:24:13,810
ruby application and it installs all

00:24:11,680 --> 00:24:15,160
sort of dependencies that it needs so

00:24:13,810 --> 00:24:18,250
it's it's having both a look at it's

00:24:15,160 --> 00:24:23,160
very new but but it's stable I'm giving

00:24:18,250 --> 00:24:25,240
it a try right now all right thanks

00:24:23,160 --> 00:24:27,010
going to provision your vagrant or

00:24:25,240 --> 00:24:28,450
docker and then run set of tests around

00:24:27,010 --> 00:24:30,310
it so it's not going to market its

00:24:28,450 --> 00:24:36,850
actual implementation on a vagrant box

00:24:30,310 --> 00:24:38,250
on a virtual environment right so if

00:24:36,850 --> 00:24:41,050
you're doing it locally

00:24:38,250 --> 00:24:44,200
you may or may not but for CI I would

00:24:41,050 --> 00:24:46,360
suggest not doing it this is better

00:24:44,200 --> 00:24:48,220
because then you have your one server

00:24:46,360 --> 00:24:50,080
running always neck reduction but

00:24:48,220 --> 00:24:52,150
there's no test there's no application

00:24:50,080 --> 00:24:54,430
test around it so you always have that

00:24:52,150 --> 00:24:57,010
vagrant environment up and run set of

00:24:54,430 --> 00:25:02,760
tests around it but you but if it goes

00:24:57,010 --> 00:25:02,760
down nothing is to harm right right

00:25:03,150 --> 00:25:08,890
no you just you just either you revert

00:25:06,430 --> 00:25:12,820
your changes and apply it again or you

00:25:08,890 --> 00:25:14,560
just yeah or you recreate but I think if

00:25:12,820 --> 00:25:23,550
reverting works then you don't have to

00:25:14,560 --> 00:25:23,550
recreate right not by the system yeah

00:25:24,600 --> 00:25:29,110
it's a good question that that was

00:25:27,250 --> 00:25:33,160
continuously on my mind when when I was

00:25:29,110 --> 00:25:35,050
working on it so I think I just as I

00:25:33,160 --> 00:25:37,990
gave the example having unit tests

00:25:35,050 --> 00:25:41,310
around your infrastructure code does not

00:25:37,990 --> 00:25:44,530
really make help you have reaching the

00:25:41,310 --> 00:25:46,930
ultimate goal with testing the actual

00:25:44,530 --> 00:25:48,640
behavior I could test that particular

00:25:46,930 --> 00:25:50,560
template file contains this I could test

00:25:48,640 --> 00:25:51,970
that my particular server is being

00:25:50,560 --> 00:25:55,390
installed I could test my particular

00:25:51,970 --> 00:25:56,890
package is being installed but but but

00:25:55,390 --> 00:25:58,840
that would just mean I'm testing my

00:25:56,890 --> 00:26:00,580
playbook and it will exactly look my

00:25:58,840 --> 00:26:04,510
intro look like as my infrastructure

00:26:00,580 --> 00:26:06,520
provision file versus if you if you have

00:26:04,510 --> 00:26:08,230
a system level test which means a system

00:26:06,520 --> 00:26:10,660
level test will test the system behavior

00:26:08,230 --> 00:26:13,000
it will only come in place when you have

00:26:10,660 --> 00:26:15,040
the system running so you have to

00:26:13,000 --> 00:26:16,870
develop first you have to deploy it on

00:26:15,040 --> 00:26:19,570
an environment and then test the system

00:26:16,870 --> 00:26:20,860
behavior okay so I'm not going against

00:26:19,570 --> 00:26:22,870
unit this I'm just saying it doesn't

00:26:20,860 --> 00:26:27,730
make it it is not relevant in case of

00:26:22,870 --> 00:26:30,010
infrastructure from your experience what

00:26:27,730 --> 00:26:36,700
you see are the limitations of festival

00:26:30,010 --> 00:26:40,450
infrastructure okay as I said right so I

00:26:36,700 --> 00:26:42,760
I did not go for testing with puppet but

00:26:40,450 --> 00:26:46,450
I did with ansible and and what my tests

00:26:42,760 --> 00:26:48,130
look exactly like the playbook to me

00:26:46,450 --> 00:26:49,960
when I was writing tests first

00:26:48,130 --> 00:26:53,710
I I felt like I am writing the PlayBook

00:26:49,960 --> 00:26:57,570
itself one is that two is infrastructure

00:26:53,710 --> 00:27:00,130
is about spinning up a server so you

00:26:57,570 --> 00:27:02,440
won't be able to test lot of things

00:27:00,130 --> 00:27:04,600
unless it's implemented on a particular

00:27:02,440 --> 00:27:06,490
environment that is that is the biggest

00:27:04,600 --> 00:27:09,190
limitation because you can you can test

00:27:06,490 --> 00:27:10,960
that a particular thing has been written

00:27:09,190 --> 00:27:12,430
but you cannot implement it it has been

00:27:10,960 --> 00:27:15,020
installed unless it is actually

00:27:12,430 --> 00:27:19,030
installed or you have to mock it

00:27:15,020 --> 00:27:21,800
so those are the limitations that I face

00:27:19,030 --> 00:27:24,380
yeah hi immortan puppets of religious

00:27:21,800 --> 00:27:28,160
c'mere refund what's a different puppet

00:27:24,380 --> 00:27:34,610
enhancer between in terms of writing

00:27:28,160 --> 00:27:38,840
test cases as well as in terms of okay

00:27:34,610 --> 00:27:41,960
so I did not work on testing the puppet

00:27:38,840 --> 00:27:44,990
thing I was only looking at developing

00:27:41,960 --> 00:27:46,850
it to me it one it's a ruby file it's

00:27:44,990 --> 00:27:49,040
not a yam all right so so there are

00:27:46,850 --> 00:27:51,140
functions there are a passing of

00:27:49,040 --> 00:27:52,670
variables around with answer well it's a

00:27:51,140 --> 00:27:55,580
yeah Mel file so there's a hierarchy

00:27:52,670 --> 00:27:57,620
defined there that's the bigger one in

00:27:55,580 --> 00:27:59,330
terms of how it looks in terms of

00:27:57,620 --> 00:28:01,070
implementation also I think it's pretty

00:27:59,330 --> 00:28:02,900
much same it's works on roles and hosts

00:28:01,070 --> 00:28:03,950
and everything so the implementation

00:28:02,900 --> 00:28:07,610
doesn't change

00:28:03,950 --> 00:28:09,650
mostly also since its function in the

00:28:07,610 --> 00:28:12,050
puppet it gives you Liberty to write

00:28:09,650 --> 00:28:14,210
your logic there with ansible there are

00:28:12,050 --> 00:28:15,920
no function so you have to use existing

00:28:14,210 --> 00:28:23,750
modules or you can create your custom

00:28:15,920 --> 00:28:26,570
modules how would you describe a cloud

00:28:23,750 --> 00:28:29,420
infrastructure such as a aw sir which

00:28:26,570 --> 00:28:34,640
users are simply email service aq

00:28:29,420 --> 00:28:38,030
service and s3 which are you know which

00:28:34,640 --> 00:28:43,130
have been which have been a spin depor

00:28:38,030 --> 00:28:47,780
from from the api from the from the

00:28:43,130 --> 00:28:49,460
amazon line okay okay so to understand

00:28:47,780 --> 00:28:52,580
your question better how do you test in

00:28:49,460 --> 00:28:55,190
case of something like AWS where you we

00:28:52,580 --> 00:28:57,010
just spin up from the from from the AWS

00:28:55,190 --> 00:29:02,000
portal and don't write script for it

00:28:57,010 --> 00:29:05,570
okay yeah I I never came across that

00:29:02,000 --> 00:29:07,640
scenario but but yeah I I would just

00:29:05,570 --> 00:29:10,910
think that whatever is expected out of

00:29:07,640 --> 00:29:13,220
your end system should be should be

00:29:10,910 --> 00:29:17,000
replicated somewhere and tested so if

00:29:13,220 --> 00:29:21,130
you have to have some something AWS if

00:29:17,000 --> 00:29:23,840
you are spinning up with with AWS users

00:29:21,130 --> 00:29:27,080
know your system requirements first and

00:29:23,840 --> 00:29:28,470
and have that system behavior replicated

00:29:27,080 --> 00:29:29,789
in a vagrant environment

00:29:28,470 --> 00:29:31,200
new virtual environment and test it

00:29:29,789 --> 00:29:39,030
first and then use create your

00:29:31,200 --> 00:29:40,440
production environment so just to add to

00:29:39,030 --> 00:29:43,080
the limitations part so now the

00:29:40,440 --> 00:29:45,840
challenges that I see is that yet fine

00:29:43,080 --> 00:29:48,960
runs fine on vagrant and darker when you

00:29:45,840 --> 00:29:51,120
go to AWS or ec2 instances you have

00:29:48,960 --> 00:29:52,500
another layer called routing the boxes

00:29:51,120 --> 00:29:55,320
are different could still be running

00:29:52,500 --> 00:29:57,690
docker but then you have another element

00:29:55,320 --> 00:30:00,600
of routing and all that so you don't

00:29:57,690 --> 00:30:01,950
actually get the same environment in

00:30:00,600 --> 00:30:04,260
production that you can do it locally

00:30:01,950 --> 00:30:06,090
there are quite quite large number of

00:30:04,260 --> 00:30:08,700
differences between what you do on your

00:30:06,090 --> 00:30:13,260
system and what you do aw yeah I I agree

00:30:08,700 --> 00:30:15,510
with that and but but I think somewhere

00:30:13,260 --> 00:30:17,850
it has to start right so why not we we

00:30:15,510 --> 00:30:20,520
start doing testing whatever is present

00:30:17,850 --> 00:30:22,110
at hand and then pub then actually

00:30:20,520 --> 00:30:24,419
talking about the limitation in open

00:30:22,110 --> 00:30:26,039
forums where then it the weather in the

00:30:24,419 --> 00:30:27,600
community can take it forward or via

00:30:26,039 --> 00:30:29,370
ourselves can take it forward to to

00:30:27,600 --> 00:30:30,960
write something around it to make it

00:30:29,370 --> 00:30:33,450
production like and to have something

00:30:30,960 --> 00:30:54,059
virtual available which can be exactly

00:30:33,450 --> 00:31:05,850
as production so your application is in

00:30:54,059 --> 00:31:07,200
Python has Auto file where you just so

00:31:05,850 --> 00:31:08,460
it's again very declarative it's

00:31:07,200 --> 00:31:11,909
something like ansible so you just say

00:31:08,460 --> 00:31:14,549
my app type is Python right so so you

00:31:11,909 --> 00:31:16,260
have a look at it it's Ruby but it's

00:31:14,549 --> 00:31:18,830
it's again bunch declarative then what

00:31:16,260 --> 00:31:18,830

YouTube URL: https://www.youtube.com/watch?v=c21VnhhQYNQ


