Title: Laying out your Django projects - Promises and Pitfalls - PyCon India 2015
Publication date: 2015-10-12
Playlist: PyCon India 2015
Description: 
	Speaker: Arun Ravindran

We don't give much thought to the initial layout that Django creates for us. But many of us stick with it. This talk explores why Django's startproject layout is created the way it is today. What are the important decisions it makes for you? Why these decisions might or might not suit your style of development or application.

This talk will be a guided tour sprinkled with acquired wisdom from several real-life Django web applications, both good and bad. It also covers the speaker's experiences of creating Django Edge, an open source Django project template.

Details: https://in.pycon.org/cfp/pycon-india-2015/proposals/laying-out-your-django-projects-promises-and-pitfalls/
Captions: 
	00:00:00,000 --> 00:00:06,480
and speaker he works in eunice's as a

00:00:03,120 --> 00:00:09,300
poly solutions manager lead solutions

00:00:06,480 --> 00:00:11,670
manager and he has authored a book on

00:00:09,300 --> 00:00:14,190
jango best practices for Django

00:00:11,670 --> 00:00:17,970
beginners and some of the problems that

00:00:14,190 --> 00:00:21,720
they face so I would you are thank you

00:00:17,970 --> 00:00:24,630
nice piece of dubstep there good morning

00:00:21,720 --> 00:00:29,039
everybody I'm going to take a quick

00:00:24,630 --> 00:00:31,080
session on django so when I say quick

00:00:29,039 --> 00:00:32,520
session I am trying to wrap it up in 30

00:00:31,080 --> 00:00:35,910
minutes and hopefully we'll have more

00:00:32,520 --> 00:00:37,770
time for questions that's usually the

00:00:35,910 --> 00:00:40,950
more interesting and more interactive

00:00:37,770 --> 00:00:45,270
part of sessions so I think I'll go

00:00:40,950 --> 00:00:47,930
behind so my name is Aaron ravindran as

00:00:45,270 --> 00:00:51,180
he just explained it started using

00:00:47,930 --> 00:00:53,250
Python in 2001 the CEO keeps changing

00:00:51,180 --> 00:00:55,039
depending on whether it's a younger

00:00:53,250 --> 00:00:57,350
person who am I talking to and this like

00:00:55,039 --> 00:01:01,379
reduce the years of bitter and all that

00:00:57,350 --> 00:01:02,760
so I recently published the book and I'm

00:01:01,379 --> 00:01:05,400
a developer member of the Django

00:01:02,760 --> 00:01:08,700
software foundation I blog at Aaron

00:01:05,400 --> 00:01:10,290
rocks calm and I to eat at a rock so if

00:01:08,700 --> 00:01:13,320
you have any questions after the talk

00:01:10,290 --> 00:01:15,659
you can use the medium of Twitter or

00:01:13,320 --> 00:01:17,970
even later when you go back you can

00:01:15,659 --> 00:01:22,850
treat me about any of the questions you

00:01:17,970 --> 00:01:25,350
have so like I said this talk is about

00:01:22,850 --> 00:01:27,869
Django and how we actually create

00:01:25,350 --> 00:01:31,740
projects the structures of the projects

00:01:27,869 --> 00:01:33,570
so let's have a quick show of hands how

00:01:31,740 --> 00:01:37,170
many of you use the default django

00:01:33,570 --> 00:01:38,939
project like not used any other okay

00:01:37,170 --> 00:01:43,729
great how many of you used any third

00:01:38,939 --> 00:01:46,079
party django project layouts anyone okay

00:01:43,729 --> 00:01:48,470
so how many of you used this awesome

00:01:46,079 --> 00:01:52,829
thing called Jango edge which I wrote

00:01:48,470 --> 00:01:54,240
okay great have one guy fine and how

00:01:52,829 --> 00:01:56,939
many of you don't know Django at all I

00:01:54,240 --> 00:01:58,590
mean they could be fine so don't worry

00:01:56,939 --> 00:02:00,930
this talk I will try to explain

00:01:58,590 --> 00:02:02,369
everything in a in a way that a person

00:02:00,930 --> 00:02:04,530
who doesn't know Django as well as could

00:02:02,369 --> 00:02:06,810
understand because what we are talking

00:02:04,530 --> 00:02:08,849
about is very fundamental to programming

00:02:06,810 --> 00:02:11,099
it's about how we organize code it's

00:02:08,849 --> 00:02:13,230
about project layouts and project

00:02:11,099 --> 00:02:13,680
organization and in general about web

00:02:13,230 --> 00:02:15,719
developer

00:02:13,680 --> 00:02:17,790
so there are a lot of things that a lot

00:02:15,719 --> 00:02:19,920
of I mean a broad audience can

00:02:17,790 --> 00:02:21,750
understand and will not go into you know

00:02:19,920 --> 00:02:25,379
very Django specific things unless it's

00:02:21,750 --> 00:02:26,700
absolutely necessary so like I said in

00:02:25,379 --> 00:02:30,329
the next few minutes I'm going to talk

00:02:26,700 --> 00:02:33,299
about what is the project layout how

00:02:30,329 --> 00:02:35,609
Django processes it project lay out what

00:02:33,299 --> 00:02:38,730
happens in internals in a very neat

00:02:35,609 --> 00:02:40,139
diagram what is the default layout with

00:02:38,730 --> 00:02:43,980
Django gives us and how it has changed

00:02:40,139 --> 00:02:47,280
over version from the early pre one dot

00:02:43,980 --> 00:02:50,040
zero oceans to the new versions what are

00:02:47,280 --> 00:02:52,230
the common pitfalls that we face and

00:02:50,040 --> 00:02:54,389
creating your own layouts and I'll talk

00:02:52,230 --> 00:02:57,659
a bit about my own project Django edge

00:02:54,389 --> 00:03:00,150
which I started about a year back before

00:02:57,659 --> 00:03:02,040
I continue can the people at the last

00:03:00,150 --> 00:03:06,359
row hear me I mean do I need to raise my

00:03:02,040 --> 00:03:07,889
voice it's fine great okay so project

00:03:06,359 --> 00:03:09,359
layouts they are known by different

00:03:07,889 --> 00:03:10,650
names right some people call them

00:03:09,359 --> 00:03:13,650
project lay out some people call them

00:03:10,650 --> 00:03:15,030
project skeletons project templates they

00:03:13,650 --> 00:03:16,709
are not exactly the same but they are

00:03:15,030 --> 00:03:20,129
roughly the same in this particular

00:03:16,709 --> 00:03:23,069
presentation so when you type Django

00:03:20,129 --> 00:03:24,569
start project there is a default set of

00:03:23,069 --> 00:03:26,220
files which are created for you there is

00:03:24,569 --> 00:03:28,260
a simple structure which is created for

00:03:26,220 --> 00:03:30,930
you some directories some files are

00:03:28,260 --> 00:03:34,109
created so that's what I refer to as a

00:03:30,930 --> 00:03:36,689
project layout and if you have noticed

00:03:34,109 --> 00:03:38,669
this is actually defined inside your

00:03:36,689 --> 00:03:42,900
django source code in a place called

00:03:38,669 --> 00:03:44,699
Jango core dot conf conf dot project

00:03:42,900 --> 00:03:46,290
template so if you go to the Django

00:03:44,699 --> 00:03:48,299
saucer posit Ori you'll actually find

00:03:46,290 --> 00:03:50,400
that this project template is sitting

00:03:48,299 --> 00:03:52,739
there and when you actually type the

00:03:50,400 --> 00:03:57,060
command the start project it's actually

00:03:52,739 --> 00:03:59,729
dynamically creating that for you so why

00:03:57,060 --> 00:04:01,280
are this so important I mean most of us

00:03:59,729 --> 00:04:03,870
don't even give a second thought we just

00:04:01,280 --> 00:04:06,599
type this command and it's created for

00:04:03,870 --> 00:04:10,500
us I am a little obsessed about this

00:04:06,599 --> 00:04:12,150
particular layouts thing because once we

00:04:10,500 --> 00:04:15,000
actually create a layout I found that

00:04:12,150 --> 00:04:17,609
many projects don't change their loud

00:04:15,000 --> 00:04:19,739
over time why is this important because

00:04:17,609 --> 00:04:22,830
imagine you started working in Django

00:04:19,739 --> 00:04:24,300
before 1.4 or something like that when

00:04:22,830 --> 00:04:26,850
the layouts are completely different

00:04:24,300 --> 00:04:29,340
from today Django's and 1.8

00:04:26,850 --> 00:04:30,870
and the layouts have changed so if

00:04:29,340 --> 00:04:33,120
somebody looks at your project you will

00:04:30,870 --> 00:04:34,680
notice that you can actually find out it

00:04:33,120 --> 00:04:36,570
is almost like a fossil a dinosaur

00:04:34,680 --> 00:04:37,860
fossil sitting there and a good

00:04:36,570 --> 00:04:39,540
archaeologist can tell you which

00:04:37,860 --> 00:04:41,610
dinosaur it is looking at the bones

00:04:39,540 --> 00:04:43,290
right so you can actually tell from the

00:04:41,610 --> 00:04:44,910
project structure which version it

00:04:43,290 --> 00:04:47,280
actually started because the developers

00:04:44,910 --> 00:04:49,980
never managed to get enough time to

00:04:47,280 --> 00:04:53,130
actually go and do a reorganization or

00:04:49,980 --> 00:04:55,470
the refactoring of the code and update

00:04:53,130 --> 00:04:57,150
it to the new layout so it's always a

00:04:55,470 --> 00:05:00,240
good idea to start with the most modern

00:04:57,150 --> 00:05:03,240
layout and give a bit of time before you

00:05:00,240 --> 00:05:06,000
actually start creating a layout and I

00:05:03,240 --> 00:05:08,700
feel that we don't give much importance

00:05:06,000 --> 00:05:10,560
to code structure because for most

00:05:08,700 --> 00:05:13,170
programmers code structure is a part of

00:05:10,560 --> 00:05:15,150
user experience right it's almost like

00:05:13,170 --> 00:05:18,090
your user interface when you are working

00:05:15,150 --> 00:05:19,770
with code so imagine that a new

00:05:18,090 --> 00:05:22,620
programmer comes to your project or your

00:05:19,770 --> 00:05:25,260
team if they find that it's a very messy

00:05:22,620 --> 00:05:27,990
project or it's not organized in a very

00:05:25,260 --> 00:05:29,730
traditional way they find it they'll

00:05:27,990 --> 00:05:31,560
find it really difficult to understand

00:05:29,730 --> 00:05:33,990
what the priests of source code is or

00:05:31,560 --> 00:05:36,060
your project is and they'll probably

00:05:33,990 --> 00:05:38,160
have a lot of questions the onboarding

00:05:36,060 --> 00:05:40,980
time gets delayed your team ramp up gets

00:05:38,160 --> 00:05:44,310
delayed overall it's going to impact

00:05:40,980 --> 00:05:45,930
your company and also on a day to day

00:05:44,310 --> 00:05:47,970
basis you're working with this code

00:05:45,930 --> 00:05:49,680
right so you would like it to be in a

00:05:47,970 --> 00:05:51,390
form that is highly structured so that

00:05:49,680 --> 00:05:53,310
you don't have to think already

00:05:51,390 --> 00:05:56,610
programming is a highly you know

00:05:53,310 --> 00:05:58,470
mentally taxing activity you don't want

00:05:56,610 --> 00:06:00,480
yourself to really worry about the

00:05:58,470 --> 00:06:01,770
structure part of it so that's one thing

00:06:00,480 --> 00:06:05,550
that you would you don't want to worry

00:06:01,770 --> 00:06:06,990
about in your coding experience and this

00:06:05,550 --> 00:06:09,570
third thing is about increased

00:06:06,990 --> 00:06:11,640
complexity so for many offers who are

00:06:09,570 --> 00:06:13,200
Python programmers Django projects are

00:06:11,640 --> 00:06:15,270
one of the largest code bases that will

00:06:13,200 --> 00:06:17,490
work with right so if you include your

00:06:15,270 --> 00:06:20,160
code which is generated by start project

00:06:17,490 --> 00:06:22,650
which sometimes nobody ever reads I

00:06:20,160 --> 00:06:24,150
suggest reading it by the way and then

00:06:22,650 --> 00:06:26,550
there are third-party projects like

00:06:24,150 --> 00:06:28,710
connecting to amazon coming connecting

00:06:26,550 --> 00:06:31,200
to pay Paul all those things are like

00:06:28,710 --> 00:06:33,330
you know third-party code which even

00:06:31,200 --> 00:06:35,340
runs into thousands of lines and if you

00:06:33,330 --> 00:06:37,290
add all these lines all these moving

00:06:35,340 --> 00:06:39,240
parts together you will actually have

00:06:37,290 --> 00:06:40,380
millions of lines of code and if you

00:06:39,240 --> 00:06:42,420
don't organize it

00:06:40,380 --> 00:06:44,340
trust me it's going to be a big model of

00:06:42,420 --> 00:06:47,100
mess and it's going to be structured all

00:06:44,340 --> 00:06:48,990
over the place so when you are working

00:06:47,100 --> 00:06:51,660
with a large code base it's always very

00:06:48,990 --> 00:06:54,480
useful to have this you know structure

00:06:51,660 --> 00:06:56,850
and you know a good organic code

00:06:54,480 --> 00:06:58,650
organization in place and finally it's a

00:06:56,850 --> 00:07:01,350
hygiene issue it's kind of like you know

00:06:58,650 --> 00:07:03,390
if it's neat it's very easy to work with

00:07:01,350 --> 00:07:05,880
some people are bothered by this whole

00:07:03,390 --> 00:07:09,930
neatness thing like me so if it's neat

00:07:05,880 --> 00:07:12,420
it's kind of cool to work with so like

00:07:09,930 --> 00:07:14,460
somebody said code should be something

00:07:12,420 --> 00:07:15,960
like a library or a bookstore right the

00:07:14,460 --> 00:07:17,280
moment you walk into a bookstore you

00:07:15,960 --> 00:07:18,540
should be able to find out okay this is

00:07:17,280 --> 00:07:20,700
the fiction category this is a non

00:07:18,540 --> 00:07:23,190
fiction category that is the paranormal

00:07:20,700 --> 00:07:25,170
this is the superstitious or whatever it

00:07:23,190 --> 00:07:27,270
is and you should be able to just walk

00:07:25,170 --> 00:07:28,710
in and take your book and the whole

00:07:27,270 --> 00:07:30,870
thing should be very intuitive you

00:07:28,710 --> 00:07:32,520
should not put so much time into it so

00:07:30,870 --> 00:07:34,110
the same thing applies for code right

00:07:32,520 --> 00:07:35,610
the moment you open a piece of source

00:07:34,110 --> 00:07:37,230
code you should know okay this is where

00:07:35,610 --> 00:07:39,150
the documents are this is where the

00:07:37,230 --> 00:07:42,120
source code is this were they assets are

00:07:39,150 --> 00:07:43,920
these are the templates go so these

00:07:42,120 --> 00:07:47,970
things actually help you to you know

00:07:43,920 --> 00:07:50,820
understand the code quite faster so like

00:07:47,970 --> 00:07:53,370
a promised I would like to go into a bit

00:07:50,820 --> 00:07:55,440
of you no explanation into what happens

00:07:53,370 --> 00:07:57,900
when you actually run this command so

00:07:55,440 --> 00:08:00,420
this is a command for using a custom

00:07:57,900 --> 00:08:02,310
template custom project template that I

00:08:00,420 --> 00:08:04,710
have developed called edge it starts

00:08:02,310 --> 00:08:06,300
with Django admin dot pie sometimes you

00:08:04,710 --> 00:08:09,600
use managed or try for management

00:08:06,300 --> 00:08:12,030
commands the start project command which

00:08:09,600 --> 00:08:13,710
is the main key command here and two

00:08:12,030 --> 00:08:15,690
options right the first option is which

00:08:13,710 --> 00:08:18,240
template you want to use I would like to

00:08:15,690 --> 00:08:19,800
use a template which is on github and I

00:08:18,240 --> 00:08:22,020
am just directly going to mention the

00:08:19,800 --> 00:08:23,940
URL on the command line and the second

00:08:22,020 --> 00:08:27,390
thing is which extension should be

00:08:23,940 --> 00:08:29,310
template iced so some of the dot pie

00:08:27,390 --> 00:08:31,350
files might contain some template

00:08:29,310 --> 00:08:32,700
specific values like project name which

00:08:31,350 --> 00:08:36,030
i would like to run through a template

00:08:32,700 --> 00:08:38,940
engine so all those extensions are

00:08:36,030 --> 00:08:43,110
listed after the extension options so

00:08:38,940 --> 00:08:45,690
that's by MD for markdown HTML for HTML

00:08:43,110 --> 00:08:47,970
files and env for us environment

00:08:45,690 --> 00:08:50,400
specific files and finally you have my

00:08:47,970 --> 00:08:51,930
project which is the project name we can

00:08:50,400 --> 00:08:53,290
change that to whatever project name you

00:08:51,930 --> 00:08:55,480
like

00:08:53,290 --> 00:08:58,120
so this is a big diagram which tells you

00:08:55,480 --> 00:09:00,610
what actually happens so I try to keep

00:08:58,120 --> 00:09:03,430
it simple I am NOT going into all the

00:09:00,610 --> 00:09:05,470
detailed aspects of it so at the very

00:09:03,430 --> 00:09:08,050
top you have typed the command you are

00:09:05,470 --> 00:09:10,240
just going to enter into Django code

00:09:08,050 --> 00:09:12,819
base which actually parses the arguments

00:09:10,240 --> 00:09:14,949
right so we use a parser called our

00:09:12,819 --> 00:09:16,750
parser argument passes which is kind of

00:09:14,949 --> 00:09:19,149
become standard as the argument passer

00:09:16,750 --> 00:09:21,250
so when it comes to argument passes we

00:09:19,149 --> 00:09:23,529
are like having a i think in last count

00:09:21,250 --> 00:09:25,540
about a thousand two hundred odd

00:09:23,529 --> 00:09:28,509
argument passes i am just exaggerating

00:09:25,540 --> 00:09:30,130
but there are advantages and

00:09:28,509 --> 00:09:32,199
disadvantages and finally we have a

00:09:30,130 --> 00:09:35,230
rough consensus that argument parser is

00:09:32,199 --> 00:09:36,910
the best of the lot now what does it

00:09:35,230 --> 00:09:39,370
pick it picks up whatever you gave us

00:09:36,910 --> 00:09:41,470
out command-line arguments right so the

00:09:39,370 --> 00:09:43,750
compulsory or the mandatory argument is

00:09:41,470 --> 00:09:45,610
the name the project name the second

00:09:43,750 --> 00:09:48,100
argument which usually picks up is the

00:09:45,610 --> 00:09:49,630
directory so sometimes when you type you

00:09:48,100 --> 00:09:51,910
don't mention the directory it just

00:09:49,630 --> 00:09:54,009
creates a new project project name base

00:09:51,910 --> 00:09:55,779
directory sometimes you want to create

00:09:54,009 --> 00:09:57,399
it in the exact same current directory

00:09:55,779 --> 00:09:59,199
that you are sitting on in that case you

00:09:57,399 --> 00:10:01,870
mentioned dot or you can mention any

00:09:59,199 --> 00:10:03,339
other part and finally the secret key so

00:10:01,870 --> 00:10:05,470
the secret key is not mentioned by the

00:10:03,339 --> 00:10:06,910
user but it's randomly generated

00:10:05,470 --> 00:10:09,490
whenever you actually run the program

00:10:06,910 --> 00:10:12,940
and this is very important you come to

00:10:09,490 --> 00:10:14,350
the secret key in a minute and then it

00:10:12,940 --> 00:10:16,839
populates something called a context

00:10:14,350 --> 00:10:19,260
dictionary so some of us already know

00:10:16,839 --> 00:10:21,699
what a context dictionary is in any case

00:10:19,260 --> 00:10:23,410
whenever you use a template for example

00:10:21,699 --> 00:10:26,290
instead of hello world you are going to

00:10:23,410 --> 00:10:28,720
use hello curly braces name double curly

00:10:26,290 --> 00:10:30,940
braces name so that name comes from a

00:10:28,720 --> 00:10:32,800
context dictionary right so whatever you

00:10:30,940 --> 00:10:35,079
put in that context dictionary name is

00:10:32,800 --> 00:10:36,760
the key and value is say our own it will

00:10:35,079 --> 00:10:39,220
replace that in that template to become

00:10:36,760 --> 00:10:41,230
hollow our own for example so in this

00:10:39,220 --> 00:10:43,930
case the context dictionary is populated

00:10:41,230 --> 00:10:45,760
with a name and a couple of other things

00:10:43,930 --> 00:10:48,399
like which project directory is going to

00:10:45,760 --> 00:10:50,139
be put into and the usual things that

00:10:48,399 --> 00:10:52,300
you would expect there to be which is

00:10:50,139 --> 00:10:54,730
derived from whatever you give to the

00:10:52,300 --> 00:10:56,620
argument parcel and it will also

00:10:54,730 --> 00:11:01,120
validate that the name is consisting of

00:10:56,620 --> 00:11:04,300
letters and numbers so what is happening

00:11:01,120 --> 00:11:05,740
here is a very common to all management

00:11:04,300 --> 00:11:07,059
command so the first two blocks are

00:11:05,740 --> 00:11:08,889
common to all Django managed

00:11:07,059 --> 00:11:11,319
and commands next thing is what is

00:11:08,889 --> 00:11:14,039
specific to this particular start

00:11:11,319 --> 00:11:17,289
project command or start up command so

00:11:14,039 --> 00:11:19,149
some of us know start app is also an

00:11:17,289 --> 00:11:21,339
another command for creating an app

00:11:19,149 --> 00:11:23,019
within a Django project so if you want

00:11:21,339 --> 00:11:26,049
to create a new app which is basically

00:11:23,019 --> 00:11:27,819
doing say user logins you can call it's

00:11:26,049 --> 00:11:29,379
a login app or you want to create

00:11:27,819 --> 00:11:31,869
something for creating profiles you can

00:11:29,379 --> 00:11:34,209
create profile or anything like that so

00:11:31,869 --> 00:11:36,189
when you create an app the whole process

00:11:34,209 --> 00:11:38,169
is exactly similar except instead of

00:11:36,189 --> 00:11:42,339
project just mentally replace it with a

00:11:38,169 --> 00:11:44,799
nap so first thing it will check is if

00:11:42,339 --> 00:11:47,109
you have given a source so source means

00:11:44,799 --> 00:11:49,029
what I gave us a template right so in

00:11:47,109 --> 00:11:50,709
this case the template was coming from

00:11:49,029 --> 00:11:52,779
github so it is actually checking

00:11:50,709 --> 00:11:55,239
whether the source is a URL if it is a

00:11:52,779 --> 00:11:57,789
URL Django actually downloads it using

00:11:55,239 --> 00:12:00,089
URL retrieve by the way this whole thing

00:11:57,789 --> 00:12:02,469
is used using a design pattern which is

00:12:00,089 --> 00:12:05,259
implemented inside a car class called

00:12:02,469 --> 00:12:07,089
template command you can easily read it

00:12:05,259 --> 00:12:10,839
it i think it is in under the code

00:12:07,089 --> 00:12:12,369
management dot base so what we are doing

00:12:10,839 --> 00:12:14,619
here is we are simply downloading that

00:12:12,369 --> 00:12:16,869
file we're extracting that file we are

00:12:14,619 --> 00:12:19,389
getting all the think contents inside

00:12:16,869 --> 00:12:21,909
that zip file and now we are entering a

00:12:19,389 --> 00:12:23,319
loop so this loop is basically walking

00:12:21,909 --> 00:12:25,629
through each of the files and

00:12:23,319 --> 00:12:27,969
directories inside that particular

00:12:25,629 --> 00:12:30,549
archive so first thing it will check is

00:12:27,969 --> 00:12:32,169
whether that extension is something that

00:12:30,549 --> 00:12:34,989
we should template eyes so like I said

00:12:32,169 --> 00:12:36,609
dot pi dot md and all that our template

00:12:34,989 --> 00:12:39,279
eyes which you have explicitly mentioned

00:12:36,609 --> 00:12:42,939
so django runs it through a template

00:12:39,279 --> 00:12:45,069
engine and as we know in Django 1.8 we

00:12:42,939 --> 00:12:47,019
have a choice between which template

00:12:45,069 --> 00:12:49,269
engine to use but remember at this point

00:12:47,019 --> 00:12:52,149
in time the project has not been created

00:12:49,269 --> 00:12:54,159
so there will be a very minimal settings

00:12:52,149 --> 00:12:55,389
not pi which has been created which will

00:12:54,159 --> 00:12:57,879
actually use the default django

00:12:55,389 --> 00:12:59,829
templates now the context dictionary

00:12:57,879 --> 00:13:01,449
which we populated earlier is going to

00:12:59,829 --> 00:13:03,009
be used here we are going to render it

00:13:01,449 --> 00:13:05,349
and we are going to write the file

00:13:03,009 --> 00:13:07,299
similarly next five lengths file next

00:13:05,349 --> 00:13:09,629
file and the whole directory trees

00:13:07,299 --> 00:13:12,009
walked and will actually have the

00:13:09,629 --> 00:13:13,959
initial project structure created and

00:13:12,009 --> 00:13:15,849
finally we have clean up because we

00:13:13,959 --> 00:13:18,560
downloaded and we created couple of

00:13:15,849 --> 00:13:24,140
directories and they are cleaned up

00:13:18,560 --> 00:13:26,570
so some of us have worked in Django in

00:13:24,140 --> 00:13:28,100
the past and we remember that Django

00:13:26,570 --> 00:13:30,560
used to have a very simple directory

00:13:28,100 --> 00:13:32,750
structure there used to be as soon as

00:13:30,560 --> 00:13:34,160
you open the project name you'll

00:13:32,750 --> 00:13:36,230
actually find that there is managed

00:13:34,160 --> 00:13:38,360
taught by settings taught by URLs dot by

00:13:36,230 --> 00:13:39,920
all the project specific things in the

00:13:38,360 --> 00:13:42,410
one folder and then there will be

00:13:39,920 --> 00:13:45,020
probably one you know a small apps

00:13:42,410 --> 00:13:47,450
folder or something like that and a

00:13:45,020 --> 00:13:49,730
major change happened in Django 1.4

00:13:47,450 --> 00:13:52,460
right so some of us remember all these

00:13:49,730 --> 00:13:54,800
settings dot PI urs dot by got put into

00:13:52,460 --> 00:13:56,630
a separate folder called project start

00:13:54,800 --> 00:13:59,330
under the name of the project so for

00:13:56,630 --> 00:14:01,670
example if I named my project my project

00:13:59,330 --> 00:14:03,710
it will be creating one my project at

00:14:01,670 --> 00:14:05,390
the top level and confusingly there will

00:14:03,710 --> 00:14:07,130
be another my project inside that and

00:14:05,390 --> 00:14:10,190
that will contain all these settings

00:14:07,130 --> 00:14:12,770
specific files so why did we do this the

00:14:10,190 --> 00:14:15,650
reason was a couple of paths related

00:14:12,770 --> 00:14:18,170
issues right so we used to create dot in

00:14:15,650 --> 00:14:20,420
at dot x we wanted the top-level thing

00:14:18,170 --> 00:14:22,279
to be a package and inside we wanted to

00:14:20,420 --> 00:14:24,920
create an another package for each app

00:14:22,279 --> 00:14:26,690
so this created a problem double imports

00:14:24,920 --> 00:14:28,790
and the whole thing was like very

00:14:26,690 --> 00:14:31,790
confusing we had to do a couple of hacks

00:14:28,790 --> 00:14:34,520
to make sure that it worked properly so

00:14:31,790 --> 00:14:36,410
just to make things very neat today we

00:14:34,520 --> 00:14:38,510
just have managed taught by outside and

00:14:36,410 --> 00:14:41,180
everything else is neatly organized into

00:14:38,510 --> 00:14:42,620
different directories and some people

00:14:41,180 --> 00:14:45,380
always ask this question where do I put

00:14:42,620 --> 00:14:47,660
the common files so some people create

00:14:45,380 --> 00:14:49,160
an app called core or some people create

00:14:47,660 --> 00:14:51,680
an app called main or something like

00:14:49,160 --> 00:14:54,080
that so it depends on your style but I

00:14:51,680 --> 00:14:56,650
find that the project name folder can be

00:14:54,080 --> 00:14:59,030
used for your common project files

00:14:56,650 --> 00:15:01,400
another interesting change was you can

00:14:59,030 --> 00:15:03,110
specify the template option so what we

00:15:01,400 --> 00:15:06,980
just saw the template option came in

00:15:03,110 --> 00:15:10,220
Django 1.4 and the path can be template

00:15:06,980 --> 00:15:11,839
eyes so as I said if you mention my

00:15:10,220 --> 00:15:14,959
project that my project path will be

00:15:11,839 --> 00:15:17,529
actually created so again because of the

00:15:14,959 --> 00:15:21,040
new template engine flexibility we have

00:15:17,529 --> 00:15:23,930
the whole Django 1.1 settings dot file

00:15:21,040 --> 00:15:25,790
settings dot x file also got changed and

00:15:23,930 --> 00:15:28,040
now we have some changes and the way

00:15:25,790 --> 00:15:29,300
things are configured as well so yeah

00:15:28,040 --> 00:15:30,800
there are a lot of changes which are not

00:15:29,300 --> 00:15:32,050
mentioned here but roughly these are the

00:15:30,800 --> 00:15:35,540
changes

00:15:32,050 --> 00:15:38,269
so now some of you might be wondering i

00:15:35,540 --> 00:15:40,360
have used django and i have not found

00:15:38,269 --> 00:15:42,920
any problems with the default project so

00:15:40,360 --> 00:15:44,600
this is a bit I'm going to change your

00:15:42,920 --> 00:15:46,519
mind so this is like purchasing your new

00:15:44,600 --> 00:15:48,200
iPhone and somebody saying you you know

00:15:46,519 --> 00:15:49,760
what iphone has these problems which you

00:15:48,200 --> 00:15:51,320
didn't know when you're buying and now

00:15:49,760 --> 00:15:53,990
now it sucks right I have this thing

00:15:51,320 --> 00:15:56,240
that has so many problems so probably

00:15:53,990 --> 00:15:58,730
this might hopefully change your mind

00:15:56,240 --> 00:16:02,240
look into what the real net pics are

00:15:58,730 --> 00:16:04,190
about the Django project so imagine if

00:16:02,240 --> 00:16:06,500
some of your experienced developers

00:16:04,190 --> 00:16:08,060
imagine going back in time and thinking

00:16:06,500 --> 00:16:09,829
about what your first experience when

00:16:08,060 --> 00:16:11,779
you're working with Django was probably

00:16:09,829 --> 00:16:13,910
playing with the tutorial the poles

00:16:11,779 --> 00:16:15,800
tutorial for example so remember that

00:16:13,910 --> 00:16:17,120
when you are running run server there

00:16:15,800 --> 00:16:20,240
were a lot of errors which are coming on

00:16:17,120 --> 00:16:22,190
the console like I cannot find favicon

00:16:20,240 --> 00:16:24,350
or you know saw some file is missing or

00:16:22,190 --> 00:16:26,240
something like that so if you are a

00:16:24,350 --> 00:16:28,130
beginner you will actually be worried

00:16:26,240 --> 00:16:30,350
like am i doing something wrong there

00:16:28,130 --> 00:16:31,910
are a lot of errors happening actually

00:16:30,350 --> 00:16:34,160
what is happening behind the scenes is

00:16:31,910 --> 00:16:35,480
the browser is actually checking if you

00:16:34,160 --> 00:16:37,010
know these additional things are there

00:16:35,480 --> 00:16:39,140
and there's nothing wrong with the way

00:16:37,010 --> 00:16:40,610
things are working but you know it puts

00:16:39,140 --> 00:16:42,110
off some people it might seem like a

00:16:40,610 --> 00:16:45,320
minor thing but it actually puts off

00:16:42,110 --> 00:16:47,209
some people and some people don't know

00:16:45,320 --> 00:16:49,850
that you have to login by changing the

00:16:47,209 --> 00:16:51,140
URL to / admin and all that so there are

00:16:49,850 --> 00:16:53,480
a lot of people who actually created an

00:16:51,140 --> 00:16:56,089
entire app and they have still used /

00:16:53,480 --> 00:16:58,579
admin to use the login to enter into

00:16:56,089 --> 00:17:01,430
that particular you know user login

00:16:58,579 --> 00:17:03,110
process and this is sad because Django

00:17:01,430 --> 00:17:05,000
comes with built-in use of models and

00:17:03,110 --> 00:17:07,250
everything is already built in Oh

00:17:05,000 --> 00:17:09,230
authentication is built in logging in as

00:17:07,250 --> 00:17:10,549
built-in everything is built in but you

00:17:09,230 --> 00:17:12,679
don't have to actually go through the

00:17:10,549 --> 00:17:14,959
whole login screen or the admin screen

00:17:12,679 --> 00:17:16,760
and the admin interface for a normal

00:17:14,959 --> 00:17:18,439
average user to actually enter into your

00:17:16,760 --> 00:17:22,040
django website so this is something

00:17:18,439 --> 00:17:23,540
which bothered me as well and in case

00:17:22,040 --> 00:17:25,790
some people actually use the Django

00:17:23,540 --> 00:17:27,290
admin they'll find that it's a whole new

00:17:25,790 --> 00:17:29,570
user interface right I mean it's like

00:17:27,290 --> 00:17:31,669
design some time like 10 years back or

00:17:29,570 --> 00:17:33,169
something like that when you know Django

00:17:31,669 --> 00:17:35,720
is originally created and it has this

00:17:33,169 --> 00:17:37,190
weird looking green bar on top which is

00:17:35,720 --> 00:17:39,140
completely clashing with your color

00:17:37,190 --> 00:17:40,610
schemes and your designer is like you

00:17:39,140 --> 00:17:43,640
know what the hell is this this is not

00:17:40,610 --> 00:17:45,410
what I designed so the whole experience

00:17:43,640 --> 00:17:47,840
can be a bit jarring

00:17:45,410 --> 00:17:49,220
and it should not be right it doesn't

00:17:47,840 --> 00:17:51,920
have to be a completely different

00:17:49,220 --> 00:17:53,360
experience and what happens if there is

00:17:51,920 --> 00:17:56,180
an error page right some of us get

00:17:53,360 --> 00:17:58,040
confused so whenever you actually enter

00:17:56,180 --> 00:18:00,980
a wrong input or whenever you actually

00:17:58,040 --> 00:18:02,330
you visitor wrong you are Django and

00:18:00,980 --> 00:18:04,490
development environment actually she

00:18:02,330 --> 00:18:06,440
throws up something called a django

00:18:04,490 --> 00:18:07,880
error page so there's very little

00:18:06,440 --> 00:18:09,170
debugging you can do that you can

00:18:07,880 --> 00:18:10,670
actually go through the entire stack

00:18:09,170 --> 00:18:13,100
traces a lot of good information there

00:18:10,670 --> 00:18:15,550
but I found that there is nothing to do

00:18:13,100 --> 00:18:17,930
a live debugging kind of a thing and

00:18:15,550 --> 00:18:19,580
finally print statements right print

00:18:17,930 --> 00:18:22,040
statements is the bane of Python

00:18:19,580 --> 00:18:24,650
programming so when we actually do

00:18:22,040 --> 00:18:26,540
Django development if you do pins print

00:18:24,650 --> 00:18:28,460
statements what happens it comes in a

00:18:26,540 --> 00:18:31,100
console and you'll find that okay I've

00:18:28,460 --> 00:18:33,080
found a new way of debugging code great

00:18:31,100 --> 00:18:35,240
let's put a lot of print statements all

00:18:33,080 --> 00:18:37,130
over my code and then your code goes for

00:18:35,240 --> 00:18:39,110
code review and everyone is like oh my

00:18:37,130 --> 00:18:41,480
eyes look look at the amount of print

00:18:39,110 --> 00:18:43,370
statements you put just use logging so

00:18:41,480 --> 00:18:45,980
you're like what is logging nobody told

00:18:43,370 --> 00:18:47,330
me about it and all that so that was an

00:18:45,980 --> 00:18:50,000
another beginner problem which I found

00:18:47,330 --> 00:18:52,460
and now completely different type of

00:18:50,000 --> 00:18:53,900
users what if you are actually a serious

00:18:52,460 --> 00:18:56,360
developer who is using the default

00:18:53,900 --> 00:18:58,250
project template for production use so

00:18:56,360 --> 00:19:00,200
again you have problems right you don't

00:18:58,250 --> 00:19:02,090
have a different settings file for broad

00:19:00,200 --> 00:19:03,770
and for dev and for testing and what

00:19:02,090 --> 00:19:05,270
have you not and you also have different

00:19:03,770 --> 00:19:06,530
requirements files and you have

00:19:05,270 --> 00:19:10,700
different settings for each of these

00:19:06,530 --> 00:19:13,220
things so Django never gives you a good

00:19:10,700 --> 00:19:15,320
you know direction as to you know what

00:19:13,220 --> 00:19:17,780
to do in such scenarios so I thought

00:19:15,320 --> 00:19:19,550
there are a lot of you know tips and

00:19:17,780 --> 00:19:21,140
advices that people tell you like use a

00:19:19,550 --> 00:19:23,240
package and all that I thought it's

00:19:21,140 --> 00:19:29,270
better that that goes into your default

00:19:23,240 --> 00:19:30,980
project template so good developers like

00:19:29,270 --> 00:19:34,520
to do a lot of work and as little time

00:19:30,980 --> 00:19:36,020
as possible and we wanted to use some I

00:19:34,520 --> 00:19:38,090
mean I wanted to create something like a

00:19:36,020 --> 00:19:39,650
default project which is very easy to

00:19:38,090 --> 00:19:41,270
use which is already working out of the

00:19:39,650 --> 00:19:43,070
box you don't have to spend a lot of

00:19:41,270 --> 00:19:45,590
time customizing it every time you

00:19:43,070 --> 00:19:48,290
create a new project cookie cutter was a

00:19:45,590 --> 00:19:50,090
very common solution that many people

00:19:48,290 --> 00:19:52,760
suggested to me but you have to actually

00:19:50,090 --> 00:19:53,870
install an additional dependency and you

00:19:52,760 --> 00:19:56,510
have to go through a series of questions

00:19:53,870 --> 00:19:58,820
I found it too will little cumbersome

00:19:56,510 --> 00:20:00,139
when we already have something called

00:19:58,820 --> 00:20:04,639
tango start project which is already

00:20:00,139 --> 00:20:06,559
built into Django so some of us from the

00:20:04,639 --> 00:20:10,850
rails world understand that you know

00:20:06,559 --> 00:20:12,919
rails also creates a default project

00:20:10,850 --> 00:20:15,679
right so they go by the convention over

00:20:12,919 --> 00:20:18,470
configuration concept and they create

00:20:15,679 --> 00:20:20,299
this huge set of files is about 20 files

00:20:18,470 --> 00:20:21,740
and many many rails developers even

00:20:20,299 --> 00:20:24,289
today do not know what those files are

00:20:21,740 --> 00:20:26,210
so Django is going for a completely

00:20:24,289 --> 00:20:29,269
different approach in which they want to

00:20:26,210 --> 00:20:30,649
give a very minimalistic set of files so

00:20:29,269 --> 00:20:33,019
if you are going to create your own

00:20:30,649 --> 00:20:35,059
custom project layout I would recommend

00:20:33,019 --> 00:20:36,590
that keep the number of dependencies and

00:20:35,059 --> 00:20:38,990
the number of files as less as possible

00:20:36,590 --> 00:20:41,480
so that you know we don't have the whole

00:20:38,990 --> 00:20:43,129
you know there are so many files that I

00:20:41,480 --> 00:20:47,360
don't know what they do kind of a

00:20:43,129 --> 00:20:50,029
problem and again some people go the

00:20:47,360 --> 00:20:51,590
other extreme right like they want to

00:20:50,029 --> 00:20:53,179
create everything modularized they want

00:20:51,590 --> 00:20:55,039
to create a lot of design patterns they

00:20:53,179 --> 00:20:58,279
want to create a lot of classes and the

00:20:55,039 --> 00:21:00,320
whole thing is like Java now so or the

00:20:58,279 --> 00:21:02,240
original and daddy of all that small

00:21:00,320 --> 00:21:04,159
small talk right so we don't want to

00:21:02,240 --> 00:21:06,649
create it in a very elaborate way let's

00:21:04,159 --> 00:21:08,840
keep it pythonic and not go into too

00:21:06,649 --> 00:21:10,610
much of design patterns as such coming

00:21:08,840 --> 00:21:15,799
from a North author was written about

00:21:10,610 --> 00:21:18,049
design patterns right so finally the

00:21:15,799 --> 00:21:20,419
production issue right so if you if you

00:21:18,049 --> 00:21:23,389
remember Django actually has just two

00:21:20,419 --> 00:21:25,309
settings debug through debug falls so

00:21:23,389 --> 00:21:27,080
what happens is when a debug is true

00:21:25,309 --> 00:21:29,480
that's ideal for development environment

00:21:27,080 --> 00:21:31,789
it has a lot of memory usage which is

00:21:29,480 --> 00:21:33,320
associated with debug information it is

00:21:31,789 --> 00:21:35,360
trying to create user friendly error

00:21:33,320 --> 00:21:37,490
messages it reveals a lot of internal

00:21:35,360 --> 00:21:39,080
details to whoever is facing an error

00:21:37,490 --> 00:21:41,029
message all that is great for

00:21:39,080 --> 00:21:42,500
development but immediately when you

00:21:41,029 --> 00:21:44,480
come to production you have to turn off

00:21:42,500 --> 00:21:47,210
the debug setting right here to turn it

00:21:44,480 --> 00:21:49,309
to false and all these optimization all

00:21:47,210 --> 00:21:51,049
these things are optimized away you will

00:21:49,309 --> 00:21:52,730
probably get a very simple error message

00:21:51,049 --> 00:21:54,289
it says that you know whatever you gave

00:21:52,730 --> 00:21:55,879
as the error page will show us an error

00:21:54,289 --> 00:21:58,250
message and we'll say something has

00:21:55,879 --> 00:22:00,019
happened the admins have been contacted

00:21:58,250 --> 00:22:02,960
and things like that but this binary

00:22:00,019 --> 00:22:05,240
thing is a very unrealistic thing right

00:22:02,960 --> 00:22:06,710
so most of us work in real world

00:22:05,240 --> 00:22:09,470
projects which have multiple

00:22:06,710 --> 00:22:11,820
environments we have development staging

00:22:09,470 --> 00:22:15,000
production testing production

00:22:11,820 --> 00:22:16,320
string whatever so these no answers are

00:22:15,000 --> 00:22:19,290
not really captured under the default

00:22:16,320 --> 00:22:20,790
project template and that that is

00:22:19,290 --> 00:22:21,930
something that we have to address when

00:22:20,790 --> 00:22:24,840
you are trying to create a custom

00:22:21,930 --> 00:22:26,160
project template and of course many of

00:22:24,840 --> 00:22:29,850
us know that the settings in each

00:22:26,160 --> 00:22:30,900
production or staging or development

00:22:29,850 --> 00:22:32,820
environment will be different the

00:22:30,900 --> 00:22:34,500
username the passwords and everything

00:22:32,820 --> 00:22:39,210
would be different so that has to be

00:22:34,500 --> 00:22:41,670
captured as well now when you are

00:22:39,210 --> 00:22:44,070
creating your own a project layout what

00:22:41,670 --> 00:22:45,990
are the mandatory things so there are

00:22:44,070 --> 00:22:47,730
only two mandatory things if you look at

00:22:45,990 --> 00:22:50,160
it it's very simple first thing is that

00:22:47,730 --> 00:22:53,160
your django project settings must have a

00:22:50,160 --> 00:22:54,840
secret key so this is the most you know

00:22:53,160 --> 00:22:57,540
mandatory thing that they suggest

00:22:54,840 --> 00:22:59,340
because you know that is key to it will

00:22:57,540 --> 00:23:01,200
come to it in a moment and the second

00:22:59,340 --> 00:23:03,780
thing is the Python path must have all

00:23:01,200 --> 00:23:06,120
your apps defined in it so it's a very

00:23:03,780 --> 00:23:07,620
simple to remember kind of guideline you

00:23:06,120 --> 00:23:09,900
should have a secret key otherwise it

00:23:07,620 --> 00:23:11,580
will throw up an error or you should and

00:23:09,900 --> 00:23:15,210
the next thing is your app should be on

00:23:11,580 --> 00:23:17,240
the Python pot so why do Django

00:23:15,210 --> 00:23:20,040
programmers obsess over the secret thing

00:23:17,240 --> 00:23:21,620
already so secret key is very important

00:23:20,040 --> 00:23:23,910
because it's used in a couple of places

00:23:21,620 --> 00:23:26,370
broadly speaking it's a very important

00:23:23,910 --> 00:23:28,770
part of cryptographic algorithms used in

00:23:26,370 --> 00:23:31,280
Django now what are the cryptographic

00:23:28,770 --> 00:23:34,770
algorithms basically signing and

00:23:31,280 --> 00:23:38,610
password checking and protection of data

00:23:34,770 --> 00:23:40,200
right so form security so see surfky is

00:23:38,610 --> 00:23:43,500
actually generated using a combination

00:23:40,200 --> 00:23:46,190
of the secret key and a randomly

00:23:43,500 --> 00:23:50,070
generated salt or something like that so

00:23:46,190 --> 00:23:52,800
what happens is every time your project

00:23:50,070 --> 00:23:55,020
is a new project is created a randomly

00:23:52,800 --> 00:23:56,640
generated 50 character string is created

00:23:55,020 --> 00:23:58,440
which is consisting of alphabets and

00:23:56,640 --> 00:24:01,230
letters and all that and numbers and

00:23:58,440 --> 00:24:03,270
this is combined with whatever is there

00:24:01,230 --> 00:24:07,380
so that it becomes like your site's

00:24:03,270 --> 00:24:09,390
fingerprint so it is not so what happens

00:24:07,380 --> 00:24:12,180
if you lose or if you if it goes public

00:24:09,390 --> 00:24:14,070
so it is not a very serious problem like

00:24:12,180 --> 00:24:16,440
your password being public or your admin

00:24:14,070 --> 00:24:17,880
password being public but it is kind of

00:24:16,440 --> 00:24:20,340
serious because you can actually guess

00:24:17,880 --> 00:24:22,020
the patterns and a very smart person can

00:24:20,340 --> 00:24:23,640
actually figure out what is the next

00:24:22,020 --> 00:24:25,590
pattern which is going to come out and

00:24:23,640 --> 00:24:27,990
it can expose your site for it

00:24:25,590 --> 00:24:30,480
so ideally you should not leave it lying

00:24:27,990 --> 00:24:32,610
around now the problem with the default

00:24:30,480 --> 00:24:35,309
project layout is it is lying around

00:24:32,610 --> 00:24:36,450
right it is a secret key and it is

00:24:35,309 --> 00:24:38,850
actually a string which is sitting

00:24:36,450 --> 00:24:40,970
inside your source control which is like

00:24:38,850 --> 00:24:44,490
why the hell did they do that so

00:24:40,970 --> 00:24:46,230
unfortunately it should not be putting

00:24:44,490 --> 00:24:47,929
in your cigarette ki should not be

00:24:46,230 --> 00:24:50,279
checked into your source control right

00:24:47,929 --> 00:24:52,740
secret key should be something ideally

00:24:50,279 --> 00:24:54,480
if you are using 12 factors guidelines

00:24:52,740 --> 00:24:56,580
which is a very sad good set of

00:24:54,480 --> 00:24:57,929
guidelines for any web developer

00:24:56,580 --> 00:25:00,510
irrespective of your programming

00:24:57,929 --> 00:25:02,070
language is that your secret key or any

00:25:00,510 --> 00:25:04,620
secret credential should come from your

00:25:02,070 --> 00:25:06,330
programming environment so whatever is

00:25:04,620 --> 00:25:09,240
set in your environment should actually

00:25:06,330 --> 00:25:11,130
be read by your program and if it's your

00:25:09,240 --> 00:25:14,370
password it should be just read from

00:25:11,130 --> 00:25:17,330
your environment as well so we have

00:25:14,370 --> 00:25:19,649
tried to solve this in Django edge and

00:25:17,330 --> 00:25:21,179
yeah this is the problem with the

00:25:19,649 --> 00:25:23,549
checking it into your source code you

00:25:21,179 --> 00:25:25,350
just run a search and you know many of

00:25:23,549 --> 00:25:30,720
these settings dot x file actually have

00:25:25,350 --> 00:25:32,159
a secret key so another pitfall that you

00:25:30,720 --> 00:25:33,830
have to worry about or this is not a

00:25:32,159 --> 00:25:36,690
pitfall this about escaping your

00:25:33,830 --> 00:25:40,020
templates right so imagine that you

00:25:36,690 --> 00:25:41,789
mentioned dot HTML in your start project

00:25:40,020 --> 00:25:44,340
now what will happen is that all your

00:25:41,789 --> 00:25:45,929
templates will be rendered automatically

00:25:44,340 --> 00:25:47,820
when it is actually running through that

00:25:45,929 --> 00:25:49,529
template engine this is a nightmare

00:25:47,820 --> 00:25:51,210
right so you don't want your templates

00:25:49,529 --> 00:25:54,600
to be rendered in the start project

00:25:51,210 --> 00:25:56,730
itself you want it to be you know in the

00:25:54,600 --> 00:25:58,770
template form itself and later when your

00:25:56,730 --> 00:26:01,070
project is actually running you want it

00:25:58,770 --> 00:26:03,450
to be actually rendered so the

00:26:01,070 --> 00:26:05,450
recommended way for this is actually to

00:26:03,450 --> 00:26:09,899
use something called a template tag

00:26:05,450 --> 00:26:12,419
template tag right so template tag

00:26:09,899 --> 00:26:15,390
actually is rendered into a template

00:26:12,419 --> 00:26:17,130
opening tag closing tag or you know

00:26:15,390 --> 00:26:20,299
variable opening tag variable closing

00:26:17,130 --> 00:26:25,380
tag etc so it is a very helpful way of

00:26:20,299 --> 00:26:30,029
you know actually escaping your project

00:26:25,380 --> 00:26:32,909
temp template templates so if you are

00:26:30,029 --> 00:26:35,370
actually going to use a template as your

00:26:32,909 --> 00:26:37,380
parameter what you should do is either

00:26:35,370 --> 00:26:38,240
you should do it manually you should go

00:26:37,380 --> 00:26:40,250
from right

00:26:38,240 --> 00:26:41,990
to left basically any any of those

00:26:40,250 --> 00:26:44,600
opening tag should be replaced by your

00:26:41,990 --> 00:26:45,920
template tag so in your project template

00:26:44,600 --> 00:26:49,220
will look something like this as the

00:26:45,920 --> 00:26:51,559
bottom you will have a template tag open

00:26:49,220 --> 00:26:53,840
block then URL something and then

00:26:51,559 --> 00:26:55,580
template a close block and when it runs

00:26:53,840 --> 00:26:57,530
to start project will be correctly

00:26:55,580 --> 00:27:02,809
converted into what you want which is

00:26:57,530 --> 00:27:04,400
basically the URL tag so I use a script

00:27:02,809 --> 00:27:08,540
for this and I am planning to open

00:27:04,400 --> 00:27:11,780
source the scripts as well so the

00:27:08,540 --> 00:27:13,910
problem with any open source project or

00:27:11,780 --> 00:27:15,740
any solution is that you start out as

00:27:13,910 --> 00:27:17,450
this lightweight alternative to

00:27:15,740 --> 00:27:19,309
something so chrome is a lightweight

00:27:17,450 --> 00:27:21,590
alternative to Internet Explorer or

00:27:19,309 --> 00:27:23,660
something is an alternate thing it

00:27:21,590 --> 00:27:25,400
starts off like that right and then all

00:27:23,660 --> 00:27:27,679
these features get added up and then it

00:27:25,400 --> 00:27:29,990
becomes equally bloated equally bad as

00:27:27,679 --> 00:27:32,000
something so it is a constant struggle

00:27:29,990 --> 00:27:34,190
between deciding what you need to be

00:27:32,000 --> 00:27:37,670
included into your open source project

00:27:34,190 --> 00:27:39,290
as well as a you know constant demands

00:27:37,670 --> 00:27:40,640
from people like you know why don't you

00:27:39,290 --> 00:27:43,700
add this feature burden to add that

00:27:40,640 --> 00:27:45,110
feature so for me the overwhelming

00:27:43,700 --> 00:27:48,500
requirement is that it should be more

00:27:45,110 --> 00:27:52,100
minimal than having more features still

00:27:48,500 --> 00:27:54,050
I ended up with a lot but yeah so how to

00:27:52,100 --> 00:27:56,000
organize these right so these are some

00:27:54,050 --> 00:27:57,740
of the questions that you'll and have to

00:27:56,000 --> 00:27:59,750
answer when you are trying to create a

00:27:57,740 --> 00:28:01,940
default project layout for your company

00:27:59,750 --> 00:28:03,470
or for your team so where do all these

00:28:01,940 --> 00:28:05,200
things go there are log files there are

00:28:03,470 --> 00:28:07,370
documentation the static assets

00:28:05,200 --> 00:28:09,440
sometimes people include the virtual

00:28:07,370 --> 00:28:11,540
environments like as a part of the

00:28:09,440 --> 00:28:13,610
project layout what are your package

00:28:11,540 --> 00:28:16,429
requirements environment specific files

00:28:13,610 --> 00:28:18,170
and now we have deployment scripts as

00:28:16,429 --> 00:28:21,010
well so if you're using ansible puppet

00:28:18,170 --> 00:28:23,300
chef some people include that as well so

00:28:21,010 --> 00:28:24,830
ideally a good project layout should be

00:28:23,300 --> 00:28:26,720
organized in such a way that it should

00:28:24,830 --> 00:28:29,300
be intuitive that where each of these

00:28:26,720 --> 00:28:31,360
things go should be automatically known

00:28:29,300 --> 00:28:37,520
to them the moment you open the project

00:28:31,360 --> 00:28:39,500
and this is one of the things that I am

00:28:37,520 --> 00:28:42,320
bothered about like how can you reduce

00:28:39,500 --> 00:28:43,610
the number of dependencies so I won't be

00:28:42,320 --> 00:28:45,920
surprised if many of you have seen

00:28:43,610 --> 00:28:48,200
projects which have over twenty or

00:28:45,920 --> 00:28:50,929
thirty Django dependencies right so

00:28:48,200 --> 00:28:52,010
Django has a very thriving third-party

00:28:50,929 --> 00:28:53,720
ecosystem

00:28:52,010 --> 00:28:56,240
practical real-world Django projects use

00:28:53,720 --> 00:28:57,920
lots of third-party modules but the

00:28:56,240 --> 00:29:00,380
problem with using each and every third

00:28:57,920 --> 00:29:02,510
party module is that it has a footprint

00:29:00,380 --> 00:29:05,150
it has a memory footprint right so each

00:29:02,510 --> 00:29:07,550
time you invoke or whether you use it or

00:29:05,150 --> 00:29:08,990
not it's actually residing in memory or

00:29:07,550 --> 00:29:10,730
whether it's based out or whether it is

00:29:08,990 --> 00:29:12,290
residing somewhere it's actually going

00:29:10,730 --> 00:29:16,010
to increase the memory consumption of

00:29:12,290 --> 00:29:17,660
your so in my opinion an ideal project

00:29:16,010 --> 00:29:20,540
is the one which uses the minimum number

00:29:17,660 --> 00:29:23,210
of dependencies that it requires and not

00:29:20,540 --> 00:29:25,010
any any anything more so this is one

00:29:23,210 --> 00:29:28,370
another the corollary of this is of

00:29:25,010 --> 00:29:29,660
course that if you have some dependency

00:29:28,370 --> 00:29:31,970
in your project which is lying around

00:29:29,660 --> 00:29:33,830
which you are not used try to prune it

00:29:31,970 --> 00:29:35,600
away I mean try to do a refactoring or

00:29:33,830 --> 00:29:37,400
try to do a code cleanup just try to

00:29:35,600 --> 00:29:39,430
remove that dependency which are not

00:29:37,400 --> 00:29:43,610
using anymore it will actually speed up

00:29:39,430 --> 00:29:44,960
your project and sometimes finally we

00:29:43,610 --> 00:29:46,700
will come to the work which I have been

00:29:44,960 --> 00:29:49,520
doing so this is about the edge project

00:29:46,700 --> 00:29:53,390
so you can find that in github its

00:29:49,520 --> 00:29:56,240
github com Eric's edge and it's just shy

00:29:53,390 --> 00:29:58,070
of 200 stars so I'd recommend all of you

00:29:56,240 --> 00:30:00,890
to go and start it and desperately need

00:29:58,070 --> 00:30:02,780
us to us and this was started last year

00:30:00,890 --> 00:30:05,480
I think in another four days it will

00:30:02,780 --> 00:30:07,910
complete one year anniversary and it has

00:30:05,480 --> 00:30:11,240
been kind of you know picked up quite

00:30:07,910 --> 00:30:12,830
well my idea was to bring a project

00:30:11,240 --> 00:30:14,930
layer which solves lot of minor

00:30:12,830 --> 00:30:17,180
annoyances which I mentioned earlier for

00:30:14,930 --> 00:30:19,130
a newcomer as well as for a experienced

00:30:17,180 --> 00:30:20,390
Bangu programmer to make it better

00:30:19,130 --> 00:30:23,900
organized again it's a very subjective

00:30:20,390 --> 00:30:25,640
thing better and create security best

00:30:23,900 --> 00:30:28,010
practices like i said i am using 12

00:30:25,640 --> 00:30:29,930
factors recommendations your batteries

00:30:28,010 --> 00:30:31,550
included a lot of best practices lot of

00:30:29,930 --> 00:30:33,490
good things like you know logging and

00:30:31,550 --> 00:30:36,260
debugging things are already included

00:30:33,490 --> 00:30:38,510
lives on the cutting edge so when it

00:30:36,260 --> 00:30:41,600
created this I said this is going to be

00:30:38,510 --> 00:30:43,580
Python 3 based forget pie turn to python

00:30:41,600 --> 00:30:45,680
2.7 and all that that's like completely

00:30:43,580 --> 00:30:47,150
outdated i am just going to focus only

00:30:45,680 --> 00:30:48,380
on python 3 because python 3 is the

00:30:47,150 --> 00:30:50,330
future python 3 is going to be

00:30:48,380 --> 00:30:52,910
everywhere unfortunately that was not

00:30:50,330 --> 00:30:54,800
true so people actually forced me to

00:30:52,910 --> 00:30:56,930
convert it to python 2.7 and finally it

00:30:54,800 --> 00:30:59,390
okay guys i am going to do it in both i

00:30:56,930 --> 00:31:01,850
have to maintain a common code base for

00:30:59,390 --> 00:31:02,290
both and today it runs both on 2.7 as

00:31:01,850 --> 00:31:05,050
well as

00:31:02,290 --> 00:31:08,830
point five and fun to start right so

00:31:05,050 --> 00:31:11,380
many offers don't like Django because it

00:31:08,830 --> 00:31:13,930
takes a lot of you know creating a thing

00:31:11,380 --> 00:31:15,970
and finally you create like this very

00:31:13,930 --> 00:31:18,100
simple HTML page which has like a very

00:31:15,970 --> 00:31:20,950
unstyled content and all that it looks

00:31:18,100 --> 00:31:22,660
very i would say uninspiring whereas a

00:31:20,950 --> 00:31:24,210
lot of other frameworks have actually

00:31:22,660 --> 00:31:26,350
caught up and they have this nice

00:31:24,210 --> 00:31:28,030
bootstrap based front page and

00:31:26,350 --> 00:31:30,790
everything looks so beautiful and that

00:31:28,030 --> 00:31:32,890
onboarding experience looks so nice so i

00:31:30,790 --> 00:31:35,800
wanted to replicate that kind of fun

00:31:32,890 --> 00:31:37,750
experience here so the reason I created

00:31:35,800 --> 00:31:39,940
this was I was writing my book and I

00:31:37,750 --> 00:31:42,640
wanted to create a project called

00:31:39,940 --> 00:31:45,100
Superbook which is basically a facebook

00:31:42,640 --> 00:31:46,780
for superheroes so guys in case you

00:31:45,100 --> 00:31:49,540
didn't know day 2 of pycon is based on

00:31:46,780 --> 00:31:52,290
superheroes so based on my last talked I

00:31:49,540 --> 00:31:55,870
don't know as he's joking so it's like

00:31:52,290 --> 00:31:57,700
super book is a kind of a facebook a

00:31:55,870 --> 00:32:01,570
social network kind of a platform which

00:31:57,700 --> 00:32:05,290
I wanted to use for explaining a lot of

00:32:01,570 --> 00:32:07,450
concepts in my book and unfortunately

00:32:05,290 --> 00:32:09,760
whatever i found was not really updated

00:32:07,450 --> 00:32:11,200
for to use simple registration i

00:32:09,760 --> 00:32:12,700
actually wanted to use this project

00:32:11,200 --> 00:32:14,080
called simple registration which i

00:32:12,700 --> 00:32:16,150
believe is maintained was maintained by

00:32:14,080 --> 00:32:19,000
bennett and he is no longer maintaining

00:32:16,150 --> 00:32:21,640
it and then django up devotion to 1.7

00:32:19,000 --> 00:32:24,220
and it's broke simple registration and

00:32:21,640 --> 00:32:26,340
he simply flat-out refused to updated so

00:32:24,220 --> 00:32:29,620
either I could have you know if he had

00:32:26,340 --> 00:32:31,450
if only Bennett had updated it to 1.7

00:32:29,620 --> 00:32:33,880
jong-un should not have happened by the

00:32:31,450 --> 00:32:38,380
way a lot of things are like that so I

00:32:33,880 --> 00:32:40,270
feel it ended up in a good ending so how

00:32:38,380 --> 00:32:42,850
does edge look so when you start your

00:32:40,270 --> 00:32:44,850
edge project start out of the box just

00:32:42,850 --> 00:32:47,080
creating start project and running your

00:32:44,850 --> 00:32:49,000
project it looks like this so it's

00:32:47,080 --> 00:32:51,670
trying to give a very professional a

00:32:49,000 --> 00:32:53,770
very bootstrapping kind of a look that's

00:32:51,670 --> 00:32:56,410
the homepage this is the login page and

00:32:53,770 --> 00:32:58,150
the bottom is a user profile page all

00:32:56,410 --> 00:32:59,830
these things are automatically styled

00:32:58,150 --> 00:33:02,230
based on whatever theme you choose and

00:32:59,830 --> 00:33:06,280
the admin page is also styled in a very

00:33:02,230 --> 00:33:09,370
similar way and this is a very

00:33:06,280 --> 00:33:11,230
controversial slide some of you might

00:33:09,370 --> 00:33:12,850
have different opinion about it there is

00:33:11,230 --> 00:33:14,830
a concept called pinning when it comes

00:33:12,850 --> 00:33:16,960
to writing or requirements dot txt

00:33:14,830 --> 00:33:18,850
so requirement or txt as many Python

00:33:16,960 --> 00:33:21,730
programmers know is where the virtual

00:33:18,850 --> 00:33:24,309
environment of whatever program you use

00:33:21,730 --> 00:33:26,350
actually picks up the dependencies which

00:33:24,309 --> 00:33:28,120
are needed for your project and pinning

00:33:26,350 --> 00:33:29,830
is a concept of mentioning the ocean

00:33:28,120 --> 00:33:32,919
numbers so for example if using Django

00:33:29,830 --> 00:33:35,110
you can write Django equals 1.7 double

00:33:32,919 --> 00:33:36,549
equals 1.7 so this means that you are

00:33:35,110 --> 00:33:38,169
actually pinning that particular version

00:33:36,549 --> 00:33:40,090
or that particular package to that

00:33:38,169 --> 00:33:41,679
particular version now this is highly

00:33:40,090 --> 00:33:43,480
recommended now there is something

00:33:41,679 --> 00:33:45,399
called one ended pinning or open-ended

00:33:43,480 --> 00:33:47,019
pinning so what happens is that I

00:33:45,399 --> 00:33:50,019
usually prefer something called Jango

00:33:47,019 --> 00:33:51,309
greater than or equals 1.7 so I am

00:33:50,019 --> 00:33:53,860
trying to say that there is a minimum

00:33:51,309 --> 00:33:56,200
requirement of 1.7 but in case 2 morrow

00:33:53,860 --> 00:33:58,269
there's a new version of Django coming

00:33:56,200 --> 00:34:01,269
up I do not mind if it gets upgraded to

00:33:58,269 --> 00:34:02,679
the next version so this is something

00:34:01,269 --> 00:34:04,510
that is not recommend definitely

00:34:02,679 --> 00:34:06,039
recommended in production but I strongly

00:34:04,510 --> 00:34:07,899
believe that if you are actually using

00:34:06,039 --> 00:34:09,669
it in development this should be the

00:34:07,899 --> 00:34:11,560
right way to do it because that is the

00:34:09,669 --> 00:34:13,270
best time you can actually start you

00:34:11,560 --> 00:34:14,530
know experimenting with new things and

00:34:13,270 --> 00:34:16,690
you can actually start working with a

00:34:14,530 --> 00:34:17,889
new version of its software and when

00:34:16,690 --> 00:34:19,149
you're actually creating your project

00:34:17,889 --> 00:34:21,490
you should definitely work on the latest

00:34:19,149 --> 00:34:23,530
version of that package rather than some

00:34:21,490 --> 00:34:28,359
outdated version which is still lying in

00:34:23,530 --> 00:34:31,869
that requirement or txt so here's a

00:34:28,359 --> 00:34:33,310
quick list of features I just want to go

00:34:31,869 --> 00:34:35,080
through them very quickly so like I said

00:34:33,310 --> 00:34:37,599
it's bootstrap based you have user

00:34:35,080 --> 00:34:40,030
registrations and sign up you have

00:34:37,599 --> 00:34:41,679
better security logging and debugging so

00:34:40,030 --> 00:34:44,139
there is actually logging and debugging

00:34:41,679 --> 00:34:46,149
already configured into Django edge so

00:34:44,139 --> 00:34:48,520
that when you actually create any kind

00:34:46,149 --> 00:34:52,050
of log messages it has a proper location

00:34:48,520 --> 00:34:54,310
and a directory and a structure to go to

00:34:52,050 --> 00:34:56,430
environment specific config like I said

00:34:54,310 --> 00:34:59,380
we use something called Jango environed

00:34:56,430 --> 00:35:03,010
for which you know environment variables

00:34:59,380 --> 00:35:05,500
are actually used for secret or secret

00:35:03,010 --> 00:35:07,330
key or password specific credentials use

00:35:05,500 --> 00:35:08,920
a look up by email not username this

00:35:07,330 --> 00:35:10,420
have always has been a pet peeve of mine

00:35:08,920 --> 00:35:12,910
how many of you guys wondered like what

00:35:10,420 --> 00:35:15,190
is Django need a username and an email

00:35:12,910 --> 00:35:17,740
when most people actually are fine with

00:35:15,190 --> 00:35:20,890
you know just giving a unique email so I

00:35:17,740 --> 00:35:22,990
wondered that so of course in a web

00:35:20,890 --> 00:35:24,760
application like Twitter or in a forum

00:35:22,990 --> 00:35:26,810
or something like that you actually need

00:35:24,760 --> 00:35:28,520
a username like but

00:35:26,810 --> 00:35:31,040
many people do not remember that their

00:35:28,520 --> 00:35:33,440
username was cool guy 1987 or something

00:35:31,040 --> 00:35:34,850
like that they forgot long back so you

00:35:33,440 --> 00:35:36,700
probably need your email which you

00:35:34,850 --> 00:35:38,810
probably use every day and remember so

00:35:36,700 --> 00:35:42,350
using a custom user model which

00:35:38,810 --> 00:35:43,760
completely eliminates usernames and then

00:35:42,350 --> 00:35:45,950
we have something called user profiles

00:35:43,760 --> 00:35:49,010
which is a separate place to suit store

00:35:45,950 --> 00:35:50,690
user specific information but which is

00:35:49,010 --> 00:35:52,820
not used for authentication things like

00:35:50,690 --> 00:35:54,950
your favorite color your birthday things

00:35:52,820 --> 00:35:57,890
like that which are username specific

00:35:54,950 --> 00:36:00,440
and everything is class-based so lot of

00:35:57,890 --> 00:36:01,970
projects are today not using class-based

00:36:00,440 --> 00:36:04,280
views there's nothing wrong with not

00:36:01,970 --> 00:36:05,990
using classmates use but over a period

00:36:04,280 --> 00:36:07,730
of time you will realize that it becomes

00:36:05,990 --> 00:36:10,280
more easier to reuse your code when it

00:36:07,730 --> 00:36:12,020
is class-based so extensively we have

00:36:10,280 --> 00:36:14,780
used mode mix-ins and class-based views

00:36:12,020 --> 00:36:17,690
in Django edge and like I said it works

00:36:14,780 --> 00:36:19,310
on both two series and three series on

00:36:17,690 --> 00:36:20,690
the right I just want to quickly point

00:36:19,310 --> 00:36:22,820
out that you know this is the structure

00:36:20,690 --> 00:36:24,440
of Django edge as you can see you have

00:36:22,820 --> 00:36:27,110
docs folder requirements folder

00:36:24,440 --> 00:36:29,660
requirements folder will contain dev rod

00:36:27,110 --> 00:36:34,100
staging whatever different environments

00:36:29,660 --> 00:36:36,680
you have in a dot e NV dot txt format

00:36:34,100 --> 00:36:38,480
right so settings is in dot env format

00:36:36,680 --> 00:36:41,120
so again settings is in a separate

00:36:38,480 --> 00:36:44,750
folder that also has different files for

00:36:41,120 --> 00:36:47,120
each environment and there is a set of

00:36:44,750 --> 00:36:49,370
apps which are called accounts and two

00:36:47,120 --> 00:36:51,710
apps you get accounts and profiles which

00:36:49,370 --> 00:36:53,930
actually deals with signing in and you

00:36:51,710 --> 00:36:55,610
know creating user profiles and then you

00:36:53,930 --> 00:37:00,070
have the bootstrap and templates and the

00:36:55,610 --> 00:37:02,480
usual standard stuff which goes into it

00:37:00,070 --> 00:37:05,000
so in case you are interested in other

00:37:02,480 --> 00:37:06,860
start alternatives for starting a

00:37:05,000 --> 00:37:09,500
projects you can use that cookie cutter

00:37:06,860 --> 00:37:12,410
is called something called Jango

00:37:09,500 --> 00:37:14,900
hackathon starter there is Django 1.7

00:37:12,410 --> 00:37:18,560
base template Django project template

00:37:14,900 --> 00:37:20,330
Django started very imaginative names so

00:37:18,560 --> 00:37:23,420
by the way my name was I mean the one

00:37:20,330 --> 00:37:25,100
name I chose was actually chosen because

00:37:23,420 --> 00:37:26,810
I want like I said I wanted something

00:37:25,100 --> 00:37:28,820
which is only working on Python 3 so

00:37:26,810 --> 00:37:31,820
it's like living on the edge kind of a

00:37:28,820 --> 00:37:33,440
thing but then another small company you

00:37:31,820 --> 00:37:35,150
must have heard of it stole the name

00:37:33,440 --> 00:37:39,170
it's called Microsoft they used edge

00:37:35,150 --> 00:37:40,400
browser and to my frustration right so

00:37:39,170 --> 00:37:41,750
they had of all

00:37:40,400 --> 00:37:44,690
the names they have to choose my name

00:37:41,750 --> 00:37:47,630
right and in case you want to check

00:37:44,690 --> 00:37:50,060
other alternatives please go to django

00:37:47,630 --> 00:37:53,060
packages there is a entire page for

00:37:50,060 --> 00:37:55,190
project templates so finally I want to

00:37:53,060 --> 00:37:57,200
leave you with this thought I mean this

00:37:55,190 --> 00:38:00,200
was written by none other than yours

00:37:57,200 --> 00:38:01,820
truly so it's not a code it's like it's

00:38:00,200 --> 00:38:03,170
not about how fast you start your

00:38:01,820 --> 00:38:05,510
project it's about finishing what you

00:38:03,170 --> 00:38:07,280
started right so many people allow to

00:38:05,510 --> 00:38:10,100
start projects and I found that it's

00:38:07,280 --> 00:38:12,230
only important when people actually see

00:38:10,100 --> 00:38:14,480
your project and it's implemented in

00:38:12,230 --> 00:38:17,510
front of others so please finish your

00:38:14,480 --> 00:38:19,690
projects and make sure that you continue

00:38:17,510 --> 00:38:26,540
to work on them and organize the layouts

00:38:19,690 --> 00:38:29,810
that's all thank you i will start with

00:38:26,540 --> 00:38:33,560
the questions hello thanks for your very

00:38:29,810 --> 00:38:35,420
beautiful presentation regarding the

00:38:33,560 --> 00:38:38,660
secrecy part you told about protecting

00:38:35,420 --> 00:38:40,880
the station data right so can we

00:38:38,660 --> 00:38:42,260
elaborate how this mechanism is achieved

00:38:40,880 --> 00:38:45,800
of the algorithm behind that or

00:38:42,260 --> 00:38:47,840
something specific the protecting is

00:38:45,800 --> 00:38:50,630
based on when it connects to the third

00:38:47,840 --> 00:38:51,950
party like amazon or paypal what is the

00:38:50,630 --> 00:38:53,900
concept behind that no it's actually

00:38:51,950 --> 00:38:57,440
very simple it's actually cookie based

00:38:53,900 --> 00:39:01,100
mechanism when you actually log into

00:38:57,440 --> 00:39:03,080
django any django web application your

00:39:01,100 --> 00:39:05,810
cookie said something called a session

00:39:03,080 --> 00:39:07,610
key right so that session key is live is

00:39:05,810 --> 00:39:10,220
valid throughout the user browsing

00:39:07,610 --> 00:39:12,880
session and whenever somebody tampers

00:39:10,220 --> 00:39:17,390
with that session key like some of the

00:39:12,880 --> 00:39:19,010
what do you call it X rsf attacks any of

00:39:17,390 --> 00:39:21,980
the cross browser attacks which are done

00:39:19,010 --> 00:39:25,340
it's very difficult to get that

00:39:21,980 --> 00:39:27,830
particular key so that if you if that is

00:39:25,340 --> 00:39:29,750
not tampered Django realizes that it is

00:39:27,830 --> 00:39:32,180
coming from the right same user it is

00:39:29,750 --> 00:39:33,680
coming from an authenticated user so the

00:39:32,180 --> 00:39:36,680
secret key is actually used for creating

00:39:33,680 --> 00:39:38,480
that session key it's actually a signing

00:39:36,680 --> 00:39:41,630
mechanism which creates it's called a

00:39:38,480 --> 00:39:44,060
nonce so it's just a one-time long

00:39:41,630 --> 00:39:46,930
random character and another thing is

00:39:44,060 --> 00:39:50,360
that regarding the importing of a

00:39:46,930 --> 00:39:52,160
template from github right suppose

00:39:50,360 --> 00:39:56,120
that should be the master template or I

00:39:52,160 --> 00:39:59,450
can create a master template in Python

00:39:56,120 --> 00:40:01,790
train and import templates from cassava

00:39:59,450 --> 00:40:04,460
sub template what is the concept behind

00:40:01,790 --> 00:40:07,010
that so we are talking about two kinds

00:40:04,460 --> 00:40:09,200
of templates right so one is what your

00:40:07,010 --> 00:40:11,840
project layout is so that contains your

00:40:09,200 --> 00:40:13,340
Python files you're you know managed or

00:40:11,840 --> 00:40:15,260
pie and all those kind of things that is

00:40:13,340 --> 00:40:17,480
what i mean by project template so that

00:40:15,260 --> 00:40:19,880
is what is picked up from github now

00:40:17,480 --> 00:40:21,590
your regular templates which are your

00:40:19,880 --> 00:40:23,270
web pages and all those kind of things

00:40:21,590 --> 00:40:25,250
which are written in Django template

00:40:23,270 --> 00:40:27,740
language that can be also completely

00:40:25,250 --> 00:40:29,780
different and that will definitely

00:40:27,740 --> 00:40:31,520
change from project to project or

00:40:29,780 --> 00:40:35,890
application to application okay thanks a

00:40:31,520 --> 00:40:38,540
lot hey thanks for the talk d jungle

00:40:35,890 --> 00:40:40,760
yeah Django is not moving faster than

00:40:38,540 --> 00:40:42,620
way the modern waivers are built I have

00:40:40,760 --> 00:40:45,650
seen some perks on pike on us that the

00:40:42,620 --> 00:40:47,870
Django is like it if five or ten years

00:40:45,650 --> 00:40:51,590
back than other frameworks so how do you

00:40:47,870 --> 00:40:55,360
think this is thinking to make that how

00:40:51,590 --> 00:40:57,260
monomers are built with Django like so

00:40:55,360 --> 00:40:59,660
if I understand your question correctly

00:40:57,260 --> 00:41:01,310
arcing pythoness sorry Django's five or

00:40:59,660 --> 00:41:05,630
ten years behind are behind and the

00:41:01,310 --> 00:41:08,540
frame of slag ok so again I I don't

00:41:05,630 --> 00:41:11,150
think it's a valid claim so if you are

00:41:08,540 --> 00:41:13,640
talking about pike on us this usually a

00:41:11,150 --> 00:41:15,920
talk called why Django sucks it's a

00:41:13,640 --> 00:41:17,570
tradition it's not because they are

00:41:15,920 --> 00:41:19,730
seriously saying that it sucks it's

00:41:17,570 --> 00:41:21,860
because most of the reasons they say

00:41:19,730 --> 00:41:24,830
gets fixed in the next version so it's

00:41:21,860 --> 00:41:27,200
like a very actively developed web

00:41:24,830 --> 00:41:29,330
framework actually so if you if you look

00:41:27,200 --> 00:41:30,980
at 23 years back whatever talk said that

00:41:29,330 --> 00:41:33,350
you know these problems where the web

00:41:30,980 --> 00:41:36,530
Django most of them are rectified by now

00:41:33,350 --> 00:41:37,580
and of course there are some various

00:41:36,530 --> 00:41:40,130
other reasons you're talking about

00:41:37,580 --> 00:41:43,010
probably single page application yeah so

00:41:40,130 --> 00:41:45,170
if you conduct a survey I mean recently

00:41:43,010 --> 00:41:47,540
read a survey which is your most popular

00:41:45,170 --> 00:41:50,330
tools for building a single page app

00:41:47,540 --> 00:41:53,060
most people prefer Django with REST API

00:41:50,330 --> 00:41:55,630
django res framework as the back end and

00:41:53,060 --> 00:41:59,090
the front end they can use angular or

00:41:55,630 --> 00:42:00,980
react days or whatever that is but they

00:41:59,090 --> 00:42:03,109
usually require something which is you

00:42:00,980 --> 00:42:05,630
know very strong very stable and

00:42:03,109 --> 00:42:07,700
very few projects are as capable as

00:42:05,630 --> 00:42:09,799
Django rest framework so some people use

00:42:07,700 --> 00:42:13,279
Django purely for Django rest framework

00:42:09,799 --> 00:42:15,799
as the back end so unless you have some

00:42:13,279 --> 00:42:17,839
specific things which you know a short

00:42:15,799 --> 00:42:21,230
coming with Django I still believe that

00:42:17,839 --> 00:42:23,779
it's a very modern framework TSA is

00:42:21,230 --> 00:42:25,819
planning to included in the jungle

00:42:23,779 --> 00:42:27,380
itself language for free Corps is it no

00:42:25,819 --> 00:42:29,359
I don't think so I don't think it will

00:42:27,380 --> 00:42:31,069
be included as a part of Corps recently

00:42:29,359 --> 00:42:33,559
it went to a major rewrite after a

00:42:31,069 --> 00:42:35,749
kickstart successful Kickstarter so the

00:42:33,559 --> 00:42:37,249
API has changed quite a bit but

00:42:35,749 --> 00:42:38,420
generally all these things are kept

00:42:37,249 --> 00:42:39,739
outside the coat generally they are

00:42:38,420 --> 00:42:42,200
trying to keep the core as clean as

00:42:39,739 --> 00:42:44,119
possible and last few years lot of

00:42:42,200 --> 00:42:45,499
things got removed from poor and that

00:42:44,119 --> 00:42:48,079
will keep on happening they want to keep

00:42:45,499 --> 00:42:49,609
the core as small as possible so there

00:42:48,079 --> 00:42:52,910
is some flying to organize Django Cohen

00:42:49,609 --> 00:42:57,680
India like Jenna cone us or euro I have

00:42:52,910 --> 00:43:00,259
no idea boss I don't know thank hi good

00:42:57,680 --> 00:43:02,269
talk and it's really interesting and I

00:43:00,259 --> 00:43:06,670
follow you and you the jagged edge

00:43:02,269 --> 00:43:09,470
template and I are using Django from

00:43:06,670 --> 00:43:11,960
December last year and i found that

00:43:09,470 --> 00:43:14,089
Django can't ever to utilize all the

00:43:11,960 --> 00:43:17,329
course of the available in the resources

00:43:14,089 --> 00:43:19,749
so do you think that how to use how to

00:43:17,329 --> 00:43:22,759
use the fooled of full the resources and

00:43:19,749 --> 00:43:25,460
get the all the all the possibilities

00:43:22,759 --> 00:43:26,869
that our districts can provide right so

00:43:25,460 --> 00:43:28,460
you are saying in a multi-core machine

00:43:26,869 --> 00:43:30,079
it generally doesn't use all the cores

00:43:28,460 --> 00:43:31,430
or in a multiprocessor it doesn't use

00:43:30,079 --> 00:43:33,950
all the processes that your question is

00:43:31,430 --> 00:43:35,779
yeah so this is a fundamental python

00:43:33,950 --> 00:43:37,609
problem it's not really a django problem

00:43:35,779 --> 00:43:41,059
and most people solve it by using

00:43:37,609 --> 00:43:43,339
multiple processes so they will have you

00:43:41,059 --> 00:43:45,140
know generally if you have a multi

00:43:43,339 --> 00:43:46,579
threading model you will encounter

00:43:45,140 --> 00:43:48,710
something called the global interpreter

00:43:46,579 --> 00:43:50,509
lock which is a python problem right so

00:43:48,710 --> 00:43:52,549
all these threads will be trying to use

00:43:50,509 --> 00:43:54,759
the same processor now if you have

00:43:52,549 --> 00:43:57,140
multiple processes you can actually use

00:43:54,759 --> 00:43:58,670
sorry multiple processes you can

00:43:57,140 --> 00:44:00,980
actually assign each process to a

00:43:58,670 --> 00:44:02,900
processor and you can run you know

00:44:00,980 --> 00:44:04,579
multiple things now this means that you

00:44:02,900 --> 00:44:06,349
have to organize your code in such a way

00:44:04,579 --> 00:44:08,299
that there is more than one Django

00:44:06,349 --> 00:44:10,339
running on one machine right so how do

00:44:08,299 --> 00:44:12,739
people do that people actually run a

00:44:10,339 --> 00:44:14,119
divided clearly divided their project

00:44:12,739 --> 00:44:16,240
into the back end processing and the

00:44:14,119 --> 00:44:17,350
front end processing so

00:44:16,240 --> 00:44:19,060
sorry background tasks and the

00:44:17,350 --> 00:44:21,280
foreground tasks right so something

00:44:19,060 --> 00:44:22,960
which is user facing like rendering

00:44:21,280 --> 00:44:24,820
pages and all will happen in one

00:44:22,960 --> 00:44:26,260
processor whereas some other cell every

00:44:24,820 --> 00:44:27,700
task or something like that will be

00:44:26,260 --> 00:44:29,050
running in the background which will

00:44:27,700 --> 00:44:31,060
actually use all the other processes

00:44:29,050 --> 00:44:32,260
like video encoding or you know

00:44:31,060 --> 00:44:34,840
something which is slow and takes a

00:44:32,260 --> 00:44:36,910
longer time so they generally use up all

00:44:34,840 --> 00:44:38,770
the processor trust me so this is an

00:44:36,910 --> 00:44:41,830
easy way to do that but it's not

00:44:38,770 --> 00:44:44,290
possible because of Python not because

00:44:41,830 --> 00:44:46,120
of a jangle imitation ok and another

00:44:44,290 --> 00:44:48,180
problem is that a younger is single

00:44:46,120 --> 00:44:51,130
threaded that's why I need to is a

00:44:48,180 --> 00:44:53,200
another server for that too going to

00:44:51,130 --> 00:44:57,880
take it to month it material like gonna

00:44:53,200 --> 00:44:59,830
cone I used right so is it a is there

00:44:57,880 --> 00:45:02,800
any solution right in the Django

00:44:59,830 --> 00:45:04,690
foundation to make it as multi-threaded

00:45:02,800 --> 00:45:06,970
or is it will remain single threaded

00:45:04,690 --> 00:45:10,960
allah although the lower no no actually

00:45:06,970 --> 00:45:12,850
a Python 3 already has a alternative for

00:45:10,960 --> 00:45:14,170
unicorn and G went and all that so

00:45:12,850 --> 00:45:15,850
they're they're coming some with the

00:45:14,170 --> 00:45:18,550
module called a sink are you harassing

00:45:15,850 --> 00:45:20,770
code which actually becomes a you know

00:45:18,550 --> 00:45:23,340
abstraction for all these things like GE

00:45:20,770 --> 00:45:26,320
vent or a tornado or whatever it is so

00:45:23,340 --> 00:45:28,060
this whole event model is actually being

00:45:26,320 --> 00:45:31,330
abstracted by the built-in library

00:45:28,060 --> 00:45:32,830
called I think I've so currently we are

00:45:31,330 --> 00:45:36,730
actually trying to figure out how we can

00:45:32,830 --> 00:45:39,480
use you know Django of that run server

00:45:36,730 --> 00:45:42,400
mechanism to actually utilize that so

00:45:39,480 --> 00:45:43,900
ideally a python and django will

00:45:42,400 --> 00:45:46,240
actually work together to solve this

00:45:43,900 --> 00:45:48,250
problem of multi-threading in a very

00:45:46,240 --> 00:45:50,830
clean manner so that all these other

00:45:48,250 --> 00:45:52,930
things if you remember twisted was also

00:45:50,830 --> 00:45:55,240
a solution before so all these guys will

00:45:52,930 --> 00:45:57,700
actually use a common abstraction based

00:45:55,240 --> 00:46:00,730
on Python 3 4 python to guys I'm sorry

00:45:57,700 --> 00:46:02,980
you are on the end of the road I used

00:46:00,730 --> 00:46:08,740
only Python to that side yeah please

00:46:02,980 --> 00:46:11,680
upgrade last push hi yeah I wanted to

00:46:08,740 --> 00:46:14,410
know how easy it is to shift a current

00:46:11,680 --> 00:46:16,600
existing complex project to django at to

00:46:14,410 --> 00:46:18,510
show f2 you the future like the working

00:46:16,600 --> 00:46:22,920
and login and all that how is you too

00:46:18,510 --> 00:46:26,200
what is your existing project in a

00:46:22,920 --> 00:46:28,150
normal lots of modeling or

00:46:26,200 --> 00:46:30,849
I have modified it's not a based

00:46:28,150 --> 00:46:33,910
application yet it may million API

00:46:30,849 --> 00:46:37,030
eccentric project okay and it uses the

00:46:33,910 --> 00:46:39,250
Django admin at customized Django admin

00:46:37,030 --> 00:46:40,630
and Lord okay you already have Django

00:46:39,250 --> 00:46:42,280
but you want to use some of these

00:46:40,630 --> 00:46:45,070
features like BTW i don't have logging

00:46:42,280 --> 00:46:46,660
and debugging right right so so that's

00:46:45,070 --> 00:46:48,130
what i said i mean it's an open source

00:46:46,660 --> 00:46:50,020
project it's basically a couple of

00:46:48,130 --> 00:46:52,000
settings so what happens is that i

00:46:50,020 --> 00:46:54,339
create a branch called a feature branch

00:46:52,000 --> 00:46:56,920
and i actually add logging and then I'm

00:46:54,339 --> 00:46:58,240
merge it back to master branch so if you

00:46:56,920 --> 00:47:00,099
just go back to the history you can

00:46:58,240 --> 00:47:01,960
actually find out what else changes I

00:47:00,099 --> 00:47:04,329
made and that will be maybe five or ten

00:47:01,960 --> 00:47:06,070
lines at the max to add logging or

00:47:04,329 --> 00:47:07,780
debugging or whatever it is that so you

00:47:06,070 --> 00:47:12,450
can incorporate it in your own project

00:47:07,780 --> 00:47:12,450

YouTube URL: https://www.youtube.com/watch?v=dDnpeHzsDs4


