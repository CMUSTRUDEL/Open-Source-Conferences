Title: Lightning Talk - Bitten by Python - PyCon India 2015
Publication date: 2015-10-12
Playlist: PyCon India 2015
Description: 
	Speaker: Vijay Kumar
Captions: 
	00:00:00,000 --> 00:00:06,750
so the next so the next talk is by vijay

00:00:03,659 --> 00:00:12,570
kumar and his topic okay you have got a

00:00:06,750 --> 00:00:15,900
tablet awesome round of applause excuse

00:00:12,570 --> 00:00:21,779
me what is your name thank you are sure

00:00:15,900 --> 00:00:24,300
okay so once more okay okay so the next

00:00:21,779 --> 00:00:28,619
talk is by vijay kumar and his topic is

00:00:24,300 --> 00:00:30,840
bitten by Pythian this talk is gonna be

00:00:28,619 --> 00:00:33,149
a beginner's talk and I hope there is

00:00:30,840 --> 00:00:39,530
some thing to learn for the advanced

00:00:33,149 --> 00:00:42,960
users to the skating talk so all right

00:00:39,530 --> 00:00:45,660
all of you know that python is fun but I

00:00:42,960 --> 00:00:48,570
had this question this python a fun

00:00:45,660 --> 00:00:52,050
language right let's try to answer this

00:00:48,570 --> 00:00:54,000
question now I started using Python when

00:00:52,050 --> 00:00:57,420
his back in college and I used to pry me

00:00:54,000 --> 00:00:59,399
for scripting my date to equities and

00:00:57,420 --> 00:01:02,039
for some of my engineering assignments

00:00:59,399 --> 00:01:03,750
it was fun language to program in most

00:01:02,039 --> 00:01:07,350
of the script I wrote was like 100 lines

00:01:03,750 --> 00:01:10,220
and less maybe and in its implied most

00:01:07,350 --> 00:01:13,260
of my work so it was a fun language yes

00:01:10,220 --> 00:01:18,330
now after graduation I join a company

00:01:13,260 --> 00:01:19,860
and my first day at work I had to there

00:01:18,330 --> 00:01:21,990
was a issue that the people who are

00:01:19,860 --> 00:01:24,180
facing there there was a real issue that

00:01:21,990 --> 00:01:25,650
they want to debug and they had to parse

00:01:24,180 --> 00:01:28,470
the log file that was coming out from

00:01:25,650 --> 00:01:32,130
the system and the existing tool did not

00:01:28,470 --> 00:01:34,680
provide sufficient support to do that so

00:01:32,130 --> 00:01:37,350
I said oh I'll do that for you I know

00:01:34,680 --> 00:01:40,020
python I can do this in 9 of XYZ ours

00:01:37,350 --> 00:01:45,060
and i wrote a code to actually do what

00:01:40,020 --> 00:01:47,040
they want and it worked we tested it and

00:01:45,060 --> 00:01:49,350
then when the script went to the field

00:01:47,040 --> 00:01:52,409
and people who really wanted use a

00:01:49,350 --> 00:01:55,170
script it blew up in the feed and i felt

00:01:52,409 --> 00:01:56,549
bad how things turned out right there

00:01:55,170 --> 00:01:58,979
was first day in office i want to prove

00:01:56,549 --> 00:02:02,430
myself and n things turn out to be bad

00:01:58,979 --> 00:02:04,530
so i checked out the code and saw what

00:02:02,430 --> 00:02:07,890
was the problem now this was the code i

00:02:04,530 --> 00:02:09,660
wanted right right exists some condition

00:02:07,890 --> 00:02:11,879
do some statements and then out sighs if

00:02:09,660 --> 00:02:13,280
block is understatement now after all

00:02:11,879 --> 00:02:15,470
this testing I you know

00:02:13,280 --> 00:02:18,080
i think i have this thing to make things

00:02:15,470 --> 00:02:19,550
perfect and i write commands that

00:02:18,080 --> 00:02:21,890
documentation was trying to clean out

00:02:19,550 --> 00:02:24,650
the code and no they paid compliance

00:02:21,890 --> 00:02:26,420
pilon complaints and then what i found

00:02:24,650 --> 00:02:30,470
was in the actual code that actually was

00:02:26,420 --> 00:02:33,110
shipped to the customer in this was how

00:02:30,470 --> 00:02:34,700
it looked like so in the act of actually

00:02:33,110 --> 00:02:36,620
I'm trying to make my code perfect I

00:02:34,700 --> 00:02:39,950
didn't accidentally inserted a tab over

00:02:36,620 --> 00:02:41,360
here so the thing that was supposed to

00:02:39,950 --> 00:02:43,910
be outside this block when you instead

00:02:41,360 --> 00:02:46,640
of black and in the cold fade now this

00:02:43,910 --> 00:02:49,340
was back somewhere when it does not

00:02:46,640 --> 00:02:52,190
exist we had any CVS and you can you do

00:02:49,340 --> 00:02:56,120
see based on a desktop and so you could

00:02:52,190 --> 00:02:58,610
have been identified it and this kind of

00:02:56,120 --> 00:03:00,590
problems are Co frequently I think even

00:02:58,610 --> 00:03:05,300
experienced programmers sometimes come

00:03:00,590 --> 00:03:07,630
come across as problems and there were

00:03:05,300 --> 00:03:10,220
other problems also a face with Python

00:03:07,630 --> 00:03:13,100
for example this is another problem I

00:03:10,220 --> 00:03:14,540
Jenny come across so there is this class

00:03:13,100 --> 00:03:15,650
where you have this init function where

00:03:14,540 --> 00:03:17,470
you are trying to set up three

00:03:15,650 --> 00:03:20,299
attributes server username password and

00:03:17,470 --> 00:03:22,160
inside this we connect you are setting

00:03:20,299 --> 00:03:23,209
up this attribute again you're saying

00:03:22,160 --> 00:03:24,530
this value to actually bit and then you

00:03:23,209 --> 00:03:27,489
can see there's a spelling mistake over

00:03:24,530 --> 00:03:30,500
there and this will result in creating a

00:03:27,489 --> 00:03:32,090
separate different attribute and this is

00:03:30,500 --> 00:03:37,820
another problem is very very hard to

00:03:32,090 --> 00:03:40,400
debug you know you have to spin ours

00:03:37,820 --> 00:03:43,280
wasting time debugging where you make

00:03:40,400 --> 00:03:44,600
the spelling mistake then there's

00:03:43,280 --> 00:03:47,140
another problem that I generally come

00:03:44,600 --> 00:03:50,359
across even in production area code is

00:03:47,140 --> 00:03:51,650
this so let's say there's a function to

00:03:50,359 --> 00:03:53,810
read a file and you open the file you

00:03:51,650 --> 00:03:55,609
find read it and then you have an

00:03:53,810 --> 00:03:57,709
exception handling very good you're

00:03:55,609 --> 00:03:59,690
checking fire is fine and then once

00:03:57,709 --> 00:04:02,420
you're done with the code you close see

00:03:59,690 --> 00:04:04,579
of five butts in the in the exception

00:04:02,420 --> 00:04:07,519
handling part you are trying to print

00:04:04,579 --> 00:04:11,959
the log message right and your when you

00:04:07,519 --> 00:04:13,609
log into the you specify the filename

00:04:11,959 --> 00:04:16,400
and the variable specifying is incorrect

00:04:13,609 --> 00:04:18,760
now when you testing this manually it

00:04:16,400 --> 00:04:22,099
will always go to the this you know the

00:04:18,760 --> 00:04:24,740
proper nice path and you won't get this

00:04:22,099 --> 00:04:27,290
error scenario at all and this never

00:04:24,740 --> 00:04:30,560
triggers but at some point let's say

00:04:27,290 --> 00:04:33,140
in your code running production it'll go

00:04:30,560 --> 00:04:36,590
to this pot and then if this is server

00:04:33,140 --> 00:04:38,650
program the server will crash right so

00:04:36,590 --> 00:04:41,360
this is something very dangerous because

00:04:38,650 --> 00:04:42,920
that path is something that will occur

00:04:41,360 --> 00:04:45,080
very early and if there's a typo over

00:04:42,920 --> 00:04:48,440
there then things can go bad in a

00:04:45,080 --> 00:04:50,030
production code now problems with this

00:04:48,440 --> 00:04:54,070
made me question whether python is

00:04:50,030 --> 00:04:57,560
really useful for a really complex a

00:04:54,070 --> 00:04:59,600
large team sizes so when the team size

00:04:57,560 --> 00:05:01,130
increases can python scale to

00:04:59,600 --> 00:05:04,550
accommodate multiple members in a single

00:05:01,130 --> 00:05:06,020
team right or is it really required to

00:05:04,550 --> 00:05:08,000
have a safety net of a compiler these

00:05:06,020 --> 00:05:09,350
the kind of issues can be easily I find

00:05:08,000 --> 00:05:13,190
out by it could be found out by

00:05:09,350 --> 00:05:15,080
compilers like the Java compiler if

00:05:13,190 --> 00:05:17,750
you're riding in Java the compiler would

00:05:15,080 --> 00:05:19,130
report such issues to you but with

00:05:17,750 --> 00:05:22,970
Python you don't have a safe to end of

00:05:19,130 --> 00:05:26,030
compiler so I had this questions deep

00:05:22,970 --> 00:05:28,910
down within me it's really Python safe

00:05:26,030 --> 00:05:31,450
is it scalable will it scale with team

00:05:28,910 --> 00:05:34,760
size or will it fall flat on its face I

00:05:31,450 --> 00:05:37,150
race a python has too much power gives

00:05:34,760 --> 00:05:41,060
you too much power gives you too much a

00:05:37,150 --> 00:05:43,610
flexibility and power and like Uncle Ben

00:05:41,060 --> 00:05:46,340
said to Peter Parker with great power

00:05:43,610 --> 00:05:47,690
comes great responsibility so what's

00:05:46,340 --> 00:05:49,790
that responsibility that we need to have

00:05:47,690 --> 00:05:51,800
when you write Python code it gives us

00:05:49,790 --> 00:05:56,500
power but what's the response will be t

00:05:51,800 --> 00:05:59,000
that we have to give back unit testing

00:05:56,500 --> 00:06:01,280
the the testing that we generally do

00:05:59,000 --> 00:06:02,750
with our code is what people call

00:06:01,280 --> 00:06:05,330
integration testing you run your program

00:06:02,750 --> 00:06:07,670
give inputs man you see if it works and

00:06:05,330 --> 00:06:08,780
if it works it's fine that kind of

00:06:07,670 --> 00:06:10,040
testing is what we call integration

00:06:08,780 --> 00:06:12,200
electric the entire application as a

00:06:10,040 --> 00:06:13,610
whole and test it as a whole but that's

00:06:12,200 --> 00:06:16,130
not sufficient python like you seen

00:06:13,610 --> 00:06:17,360
earlier there are problems that can go

00:06:16,130 --> 00:06:23,360
unnoticed when you're doing integration

00:06:17,360 --> 00:06:24,830
testing so unit testing is you test each

00:06:23,360 --> 00:06:26,960
enemy module people know what is unit

00:06:24,830 --> 00:06:28,700
testing important thing of unit testing

00:06:26,960 --> 00:06:30,950
is you walk out all the external

00:06:28,700 --> 00:06:32,690
dependencies networks databases serial

00:06:30,950 --> 00:06:34,970
ports oral knocked out and then you only

00:06:32,690 --> 00:06:38,270
test your code in memory no external

00:06:34,970 --> 00:06:41,590
accesses what's or and since it's once

00:06:38,270 --> 00:06:43,879
in memories blazing fast

00:06:41,590 --> 00:06:45,590
to implement unit testing your code

00:06:43,879 --> 00:06:47,020
should not look like this which you

00:06:45,590 --> 00:06:49,550
never be amazed it should be written

00:06:47,020 --> 00:06:52,310
like this you should have one layer at

00:06:49,550 --> 00:06:53,900
the bottom layer of modules and top of

00:06:52,310 --> 00:06:55,699
that underlay of modules that access the

00:06:53,900 --> 00:06:57,770
layer below it and so on so if you have

00:06:55,699 --> 00:07:01,280
written your code this way it's well in

00:06:57,770 --> 00:07:02,629
good for unit testing or writing code

00:07:01,280 --> 00:07:05,900
like this will you make it really hard

00:07:02,629 --> 00:07:08,629
to write you in test cases but there are

00:07:05,900 --> 00:07:11,000
lots of myths about unit testing I'll

00:07:08,629 --> 00:07:12,889
just mention a few of them over here and

00:07:11,000 --> 00:07:14,990
I give links to where you can find more

00:07:12,889 --> 00:07:16,729
information about them when it's like

00:07:14,990 --> 00:07:17,960
people say that when you interfacing

00:07:16,729 --> 00:07:19,669
silly ports and things like that you

00:07:17,960 --> 00:07:22,430
can't do unit testing you can do in

00:07:19,669 --> 00:07:24,379
testing with them there is some model

00:07:22,430 --> 00:07:26,990
calm walk which is now within the Python

00:07:24,379 --> 00:07:29,270
3 standard library itself and this is a

00:07:26,990 --> 00:07:30,830
link if you want to go and get more

00:07:29,270 --> 00:07:32,599
information about it so when you are

00:07:30,830 --> 00:07:34,520
accessing serial ports reading data from

00:07:32,599 --> 00:07:37,879
sealed ports parsing them and so on you

00:07:34,520 --> 00:07:40,310
can mock the serial port and then inject

00:07:37,879 --> 00:07:42,400
a data into your program rather than

00:07:40,310 --> 00:07:44,210
having to actually quoting serial port

00:07:42,400 --> 00:07:45,710
similarly if you are doing file i know

00:07:44,210 --> 00:07:48,440
some people think file cannot be

00:07:45,710 --> 00:07:52,250
interested for these kinds of scenarios

00:07:48,440 --> 00:07:54,409
you can actually use a python class

00:07:52,250 --> 00:07:56,569
called string i have to do this so if

00:07:54,409 --> 00:07:58,310
you want more informations over here and

00:07:56,569 --> 00:07:59,659
another thing is like file system access

00:07:58,310 --> 00:08:01,729
your listing directories changing

00:07:59,659 --> 00:08:03,500
permissions moving files all those can

00:08:01,729 --> 00:08:07,819
also be unit tested with us a wonderful

00:08:03,500 --> 00:08:09,979
library from google called pi fake FS so

00:08:07,819 --> 00:08:13,069
you can fake a file system in memory

00:08:09,979 --> 00:08:15,800
itself so for more information you can

00:08:13,069 --> 00:08:18,439
link a check out this link and another

00:08:15,800 --> 00:08:19,819
thing is like supposes unit test that

00:08:18,439 --> 00:08:21,620
there's a function that actually has

00:08:19,819 --> 00:08:24,199
infinite loop you call the function he

00:08:21,620 --> 00:08:25,580
never returned even such functions can

00:08:24,199 --> 00:08:28,069
be unit tested there's a blog article

00:08:25,580 --> 00:08:30,620
over here you can check out this article

00:08:28,069 --> 00:08:32,620
they have given you ideas of how you can

00:08:30,620 --> 00:08:34,849
write unit tests for such functions and

00:08:32,620 --> 00:08:37,099
gooey programs up can also be unit

00:08:34,849 --> 00:08:38,959
tested there's another blog article this

00:08:37,099 --> 00:08:40,310
link you can go and check so the lots

00:08:38,959 --> 00:08:41,479
myths surrounding your testing this

00:08:40,310 --> 00:08:43,459
cannot be done with you investing that

00:08:41,479 --> 00:08:45,170
can be Demetrius you start true there

00:08:43,459 --> 00:08:49,550
are a lot of ways we come up with to

00:08:45,170 --> 00:08:51,980
solve those kinds of problems so the

00:08:49,550 --> 00:08:54,050
conclusion is yes python is fun even

00:08:51,980 --> 00:08:56,420
testing makes it even more so

00:08:54,050 --> 00:08:59,110
and I will be publishing the slides and

00:08:56,420 --> 00:09:04,149
links on my twitter handle i'll also

00:08:59,110 --> 00:09:04,149

YouTube URL: https://www.youtube.com/watch?v=dMEDn9XEapQ


