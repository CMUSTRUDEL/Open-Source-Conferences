Title: Simple Hacks to Make Your Django Website Faster - PyCon India 2015
Publication date: 2015-10-11
Playlist: PyCon India 2015
Description: 
	Speaker: Jitendra Agrawal 

You have built an awesome Django website, it's being loved by your early users and you are starting to get some serious traffic. Are you investing more and more time handling alerts, autoscaling and you are starting to get worried about hosting costs? Django framework and Python community has built some great solutions for you.

This talk will introduce various Django caching features (they are easy to use), talk about AJAX, edge side caching (ESI) and discuss when you should offload some of the tasks to an async process queue so that your users continue to experience a super-fast website.

Details: https://in.pycon.org/cfp/pycon-india-2015/proposals/simple-hacks-to-make-your-django-website-faster/
Captions: 
	00:00:00,000 --> 00:00:05,069
these are simple hacks to make your

00:00:02,700 --> 00:00:08,490
django website faster by Jatinder

00:00:05,069 --> 00:00:10,679
aggarwal jeath is the CTO of the slide

00:00:08,490 --> 00:00:13,170
rule he is a graduate from IIT Bombay

00:00:10,679 --> 00:00:18,840
and has been building complex web

00:00:13,170 --> 00:00:20,300
products for 15 years am i audible I was

00:00:18,840 --> 00:00:23,160
very impressed with the last talk

00:00:20,300 --> 00:00:26,910
colorful presentation this is my first

00:00:23,160 --> 00:00:29,910
IOT talk I'll be compared to by an hour

00:00:26,910 --> 00:00:34,680
do you know and Raspberry Pi now that's

00:00:29,910 --> 00:00:38,489
a big hole in my pocket okay so I'm part

00:00:34,680 --> 00:00:39,750
of the slide rule team you will call me

00:00:38,489 --> 00:00:42,050
Jeet

00:00:39,750 --> 00:00:49,250
that's the Python way of renaming

00:00:42,050 --> 00:00:52,230
variables okay let's get down to agenda

00:00:49,250 --> 00:00:54,539
so python or Django will try to since

00:00:52,230 --> 00:00:58,949
it's a Python will sway to our tune I

00:00:54,539 --> 00:01:02,340
know they can't hear but we'll still try

00:00:58,949 --> 00:01:06,030
something I try to say cache 200 maybe

00:01:02,340 --> 00:01:09,930
more times we'll discuss five websites a

00:01:06,030 --> 00:01:12,390
slow we'll look at some optimizations

00:01:09,930 --> 00:01:14,580
basic optimizations that Django queries

00:01:12,390 --> 00:01:19,140
are offered and then we'll get down to

00:01:14,580 --> 00:01:21,299
caching okay and what Django offers what

00:01:19,140 --> 00:01:24,710
other types of caching can you use to

00:01:21,299 --> 00:01:28,439
make your website seem faster okay and

00:01:24,710 --> 00:01:29,759
then we'll get down to Q&A all right why

00:01:28,439 --> 00:01:31,829
if they've sort of screwed these are

00:01:29,759 --> 00:01:35,780
just some of the reasons bad code bad

00:01:31,829 --> 00:01:36,900
indexes bad index is very very common

00:01:35,780 --> 00:01:39,780
surprisingly

00:01:36,900 --> 00:01:43,259
but it is and too much traffic you

00:01:39,780 --> 00:01:45,390
probably have five servers and you you

00:01:43,259 --> 00:01:48,780
are trending on reddit and you need ten

00:01:45,390 --> 00:01:50,850
so yes you may not have ample hardware

00:01:48,780 --> 00:01:53,820
or your architecture just supports one

00:01:50,850 --> 00:01:56,820
server you did not consider distributing

00:01:53,820 --> 00:01:58,560
right and now you're bad host and there

00:01:56,820 --> 00:02:02,040
are many other problems these are some

00:01:58,560 --> 00:02:05,820
of them will try to tackle maybe just

00:02:02,040 --> 00:02:09,179
too much traffic in this talk before

00:02:05,820 --> 00:02:12,750
that yes if you have a site that gets

00:02:09,179 --> 00:02:13,740
like 20,000 maybe a hundred thousand

00:02:12,750 --> 00:02:16,050
visits a day you

00:02:13,740 --> 00:02:17,640
we don't need a lot of caching or

00:02:16,050 --> 00:02:20,340
optimization you can probably even do

00:02:17,640 --> 00:02:23,640
bad code and they still work so I had

00:02:20,340 --> 00:02:27,300
one case where I had a jungle website

00:02:23,640 --> 00:02:29,190
and I was running on our economy three

00:02:27,300 --> 00:02:31,680
point nine eight dollars server on

00:02:29,190 --> 00:02:33,480
GoDaddy and I just decided that it makes

00:02:31,680 --> 00:02:36,510
sense for me to just generate static

00:02:33,480 --> 00:02:38,760
pages from Django and I was take my

00:02:36,510 --> 00:02:41,460
sites and I we could do three hundred to

00:02:38,760 --> 00:02:44,940
one hundred thousand visits per day

00:02:41,460 --> 00:02:49,440
easily without doing much because I

00:02:44,940 --> 00:02:49,740
decided to generate static pages all

00:02:49,440 --> 00:02:51,870
right

00:02:49,740 --> 00:02:55,500
see ya premature optimization is the

00:02:51,870 --> 00:02:57,720
root of all evil if you try to optimize

00:02:55,500 --> 00:03:00,900
your code before your features are

00:02:57,720 --> 00:03:03,540
developed it's not good so let's look at

00:03:00,900 --> 00:03:07,740
some of the SQL optimizations before

00:03:03,540 --> 00:03:09,660
that you want to I can I assume that all

00:03:07,740 --> 00:03:13,710
of you are familiar with Django

00:03:09,660 --> 00:03:16,940
whoever who uses jammu here oh wow nice

00:03:13,710 --> 00:03:21,150
so no converts today you're already

00:03:16,940 --> 00:03:24,000
following jungle yeah so the first thing

00:03:21,150 --> 00:03:26,730
is as I said your SQL queries might be

00:03:24,000 --> 00:03:29,040
slow you wanna find out what SQL queries

00:03:26,730 --> 00:03:30,510
are running and ORM kind of hides it

00:03:29,040 --> 00:03:33,210
from you I read a quote somewhere saying

00:03:30,510 --> 00:03:37,560
Orem basically fools you into believing

00:03:33,210 --> 00:03:40,140
you're coding and you forget SQL so this

00:03:37,560 --> 00:03:42,830
the simple method you just add a login

00:03:40,140 --> 00:03:46,950
configuration in your settings or py and

00:03:42,830 --> 00:03:48,750
you would be able to see the SQL queries

00:03:46,950 --> 00:03:52,200
or there is a easier method you can just

00:03:48,750 --> 00:03:56,130
install Django toolbar and click on the

00:03:52,200 --> 00:03:59,370
SQL queries tab and you will see all the

00:03:56,130 --> 00:04:03,600
queries for a particular pitch all right

00:03:59,370 --> 00:04:07,200
now one of the first problems we can

00:04:03,600 --> 00:04:10,380
solve is double evaluation of a big

00:04:07,200 --> 00:04:13,620
query so you want to get count of a

00:04:10,380 --> 00:04:18,359
product let's say this is a simple model

00:04:13,620 --> 00:04:19,620
with products and it has some fields I

00:04:18,359 --> 00:04:21,780
have not shown them here I didn't have

00:04:19,620 --> 00:04:24,090
enough space I looked at I attend to the

00:04:21,780 --> 00:04:27,180
first talk and I could not see the code

00:04:24,090 --> 00:04:31,880
so I removed a lot of code on the fly

00:04:27,180 --> 00:04:38,070
see ya this is a simple model it has a

00:04:31,880 --> 00:04:41,220
account similar product method this

00:04:38,070 --> 00:04:44,340
return and the space is actually return

00:04:41,220 --> 00:04:46,860
this returns the whole count okay these

00:04:44,340 --> 00:04:49,440
are not two different lines and you'll

00:04:46,860 --> 00:04:51,419
probably do the same thing in in your

00:04:49,440 --> 00:04:56,850
view then you'll probably do the same

00:04:51,419 --> 00:05:00,690
thing in your letter in your templates

00:04:56,850 --> 00:05:03,120
and maybe the count could be printed

00:05:00,690 --> 00:05:05,729
twice in the templates right so your

00:05:03,120 --> 00:05:06,870
query is being evaluated multiple times

00:05:05,729 --> 00:05:08,550
the same query

00:05:06,870 --> 00:05:10,919
unfortunately it's running multiple

00:05:08,550 --> 00:05:14,130
times that's not good so you can

00:05:10,919 --> 00:05:16,860
probably save that simply by using

00:05:14,130 --> 00:05:20,430
something called cash property you can

00:05:16,860 --> 00:05:23,220
cash a property and now when you run the

00:05:20,430 --> 00:05:26,910
same thing the cash property will

00:05:23,220 --> 00:05:30,060
actually come at just above count

00:05:26,910 --> 00:05:32,849
similar products method right

00:05:30,060 --> 00:05:34,500
it's a decorator that will cache the

00:05:32,849 --> 00:05:36,750
property for you for the life of that

00:05:34,500 --> 00:05:39,270
object so every time you call count

00:05:36,750 --> 00:05:42,659
similar products for a product it will

00:05:39,270 --> 00:05:44,580
simply go ahead and return that variable

00:05:42,659 --> 00:05:46,770
to you it will not count again if your

00:05:44,580 --> 00:05:48,690
database changed in between it will not

00:05:46,770 --> 00:05:51,900
get it but for the life of that object

00:05:48,690 --> 00:05:53,909
for that query for the page load if

00:05:51,900 --> 00:05:55,199
you're doing the same query again and

00:05:53,909 --> 00:05:57,530
again which would be very easy to find

00:05:55,199 --> 00:06:00,210
if you are printing your SQL queries

00:05:57,530 --> 00:06:03,840
right so that's the first thing you can

00:06:00,210 --> 00:06:06,539
do you can I don't think and really

00:06:03,840 --> 00:06:08,880
overdo this but yes if you anytime you

00:06:06,539 --> 00:06:10,830
are calling any foreign keys any but

00:06:08,880 --> 00:06:18,050
many too many keys this works

00:06:10,830 --> 00:06:18,050
brilliantly okay then let's say another

00:06:18,139 --> 00:06:25,430
model we have pizza and topping I think

00:06:20,699 --> 00:06:29,180
I copied it directly from the jungle I

00:06:25,430 --> 00:06:32,009
copied it directly from the django

00:06:29,180 --> 00:06:33,810
documentation okay and you have a

00:06:32,009 --> 00:06:38,190
topping and a pizza and you are trying

00:06:33,810 --> 00:06:40,950
to use you know a simple STR method that

00:06:38,190 --> 00:06:43,080
also prints the toppings names

00:06:40,950 --> 00:06:46,110
along with it right every time you are

00:06:43,080 --> 00:06:48,660
trying to print the object pizza you

00:06:46,110 --> 00:06:48,930
will be doing all these queries all over

00:06:48,660 --> 00:06:52,830
again

00:06:48,930 --> 00:06:55,680
in fact what will happen is you will do

00:06:52,830 --> 00:06:57,720
one query for pizza object and you'll do

00:06:55,680 --> 00:07:00,630
say if you have 10 toppings you'll do 10

00:06:57,720 --> 00:07:02,640
queries for toppings object even if you

00:07:00,630 --> 00:07:04,470
do a cash property you have done if

00:07:02,640 --> 00:07:06,900
let's say there is one pizza with ten

00:07:04,470 --> 00:07:09,000
topics you've done 11 queries right so

00:07:06,900 --> 00:07:11,670
even the cash property will not really

00:07:09,000 --> 00:07:13,200
save you much it will just ensure that

00:07:11,670 --> 00:07:16,170
every time you are printing the pizzas

00:07:13,200 --> 00:07:18,360
name you don't do those videos again but

00:07:16,170 --> 00:07:20,760
you are you're doing those 11 queries

00:07:18,360 --> 00:07:23,520
right so what you can simply do is you

00:07:20,760 --> 00:07:25,260
can do select related topics you know

00:07:23,520 --> 00:07:30,510
that you're going to use toppings in

00:07:25,260 --> 00:07:34,260
future so you can select them at at the

00:07:30,510 --> 00:07:36,810
bow itself right so any foreign key if

00:07:34,260 --> 00:07:40,050
you are planning to use the foreign key

00:07:36,810 --> 00:07:42,480
later I recommend doing this any product

00:07:40,050 --> 00:07:47,040
or any order has product products are

00:07:42,480 --> 00:07:48,840
foreign keys I recommend that you do as

00:07:47,040 --> 00:07:51,270
a little later it will basically you do

00:07:48,840 --> 00:07:54,750
it join so there is a joint GUI that'll

00:07:51,270 --> 00:07:59,670
be sent to is your MySQL or a post creat

00:07:54,750 --> 00:08:01,230
and you'll save those 11 queries one for

00:07:59,670 --> 00:08:03,960
pizza 10 for toppings and you will

00:08:01,230 --> 00:08:06,180
compress that to just one query that

00:08:03,960 --> 00:08:09,510
does not work for generate for him yes

00:08:06,180 --> 00:08:12,090
this does not work for many too many

00:08:09,510 --> 00:08:14,610
fields and for that we have prefetch

00:08:12,090 --> 00:08:17,520
related so when you do prefetch related

00:08:14,610 --> 00:08:20,790
it will get those toppings and it will

00:08:17,520 --> 00:08:22,710
actually do the join in Python so will

00:08:20,790 --> 00:08:25,140
do what it will do two queries one for

00:08:22,710 --> 00:08:25,830
the pizza one for all the toppings will

00:08:25,140 --> 00:08:27,450
do the joint

00:08:25,830 --> 00:08:29,580
so yes prefix queries probably should

00:08:27,450 --> 00:08:34,020
not be doing done when you have a whole

00:08:29,580 --> 00:08:37,290
lot of data right but one if you just

00:08:34,020 --> 00:08:40,050
had foreign key 11 queries would get

00:08:37,290 --> 00:08:42,270
reduced to one single SQL query if you

00:08:40,050 --> 00:08:44,880
have many to many queries many many

00:08:42,270 --> 00:08:48,110
fields 11 queries would get reduced to

00:08:44,880 --> 00:08:51,030
just too crazy alright that's that

00:08:48,110 --> 00:08:54,329
simple basic SQL optimization that I

00:08:51,030 --> 00:08:57,989
believe everybody should be doing does

00:08:54,329 --> 00:09:02,759
hurt much okay now let's get to caching

00:08:57,989 --> 00:09:05,100
so we saw that basic SQL could be basic

00:09:02,759 --> 00:09:07,649
SQL queries or large bodies could be

00:09:05,100 --> 00:09:08,899
cached with cache properties the caching

00:09:07,649 --> 00:09:11,339
that I am going to talk about is

00:09:08,899 --> 00:09:14,910
slightly different but yes it is caching

00:09:11,339 --> 00:09:16,980
after all right what is caching it's a

00:09:14,910 --> 00:09:20,759
process of keeping often requested

00:09:16,980 --> 00:09:22,889
objects close right so cache property

00:09:20,759 --> 00:09:25,619
what it does is basically assigns an

00:09:22,889 --> 00:09:27,509
attribute when it is called the first

00:09:25,619 --> 00:09:28,679
time whenever it is called the next time

00:09:27,509 --> 00:09:30,420
it will take you later will basically

00:09:28,679 --> 00:09:32,429
check for that attribute there if that

00:09:30,420 --> 00:09:33,989
if it exists then you'll return that

00:09:32,429 --> 00:09:36,329
value of that attribute instead of

00:09:33,989 --> 00:09:40,679
calling all the queries and the method

00:09:36,329 --> 00:09:44,189
again and again right yeah so one such

00:09:40,679 --> 00:09:46,019
example is Chetan Bhagat books if you go

00:09:44,189 --> 00:09:47,579
to any big store they'll keep them very

00:09:46,019 --> 00:09:49,709
close to the counter and cashier

00:09:47,579 --> 00:09:52,230
including razors and stuff which are

00:09:49,709 --> 00:09:53,910
very frequently requested I'm assuming

00:09:52,230 --> 00:10:00,329
Chetan Bhagat books are very frequently

00:09:53,910 --> 00:10:03,989
requested ok and almost all computer

00:10:00,329 --> 00:10:05,459
systems you'd use caching at many

00:10:03,989 --> 00:10:08,850
different levels your processor would

00:10:05,459 --> 00:10:10,829
have l1 l2 l3 cache or disks would have

00:10:08,850 --> 00:10:13,470
rotating disks would have caching your

00:10:10,829 --> 00:10:16,529
OS uses caching you're stdio library

00:10:13,470 --> 00:10:19,169
user caching dns your cache servers

00:10:16,529 --> 00:10:20,339
databases browsers and websites yes

00:10:19,169 --> 00:10:24,689
that's what we are talking about today

00:10:20,339 --> 00:10:26,399
all right so caching is essentially if

00:10:24,689 --> 00:10:29,249
you are trying to do something again and

00:10:26,399 --> 00:10:32,069
again and you are trying to use

00:10:29,249 --> 00:10:35,009
resources for that process you can

00:10:32,069 --> 00:10:37,319
probably just keep results of that you

00:10:35,009 --> 00:10:40,379
can execute the process one keep result

00:10:37,319 --> 00:10:44,689
of the process saved somewhere which is

00:10:40,379 --> 00:10:48,199
fast or faster than your normal way of

00:10:44,689 --> 00:10:53,519
executing that process and that use that

00:10:48,199 --> 00:10:57,149
saved value next time right let's see

00:10:53,519 --> 00:10:59,519
how jammu can help you with cash Jango

00:10:57,149 --> 00:11:02,029
offers a whole lot of different caching

00:10:59,519 --> 00:11:06,209
mechanisms you can catch the whole site

00:11:02,029 --> 00:11:07,930
you can use a caching middleware you can

00:11:06,209 --> 00:11:10,090
cache

00:11:07,930 --> 00:11:12,280
if you know that your pump is view or

00:11:10,090 --> 00:11:16,810
contact your team you does not really

00:11:12,280 --> 00:11:21,790
change until you fire someone you can

00:11:16,810 --> 00:11:23,500
use caching views right you can if you

00:11:21,790 --> 00:11:25,390
are not happy with caching the whole

00:11:23,500 --> 00:11:28,450
view if every user gets a different

00:11:25,390 --> 00:11:31,030
value then you can catch the print

00:11:28,450 --> 00:11:34,510
template fragments so that a user load

00:11:31,030 --> 00:11:36,310
show site again and again but the values

00:11:34,510 --> 00:11:38,320
are not changing you can serve the same

00:11:36,310 --> 00:11:44,410
value to them by using template

00:11:38,320 --> 00:11:46,930
fragments sessions raw objects and genre

00:11:44,410 --> 00:11:48,910
offers many types of caching backends

00:11:46,930 --> 00:11:49,450
you can use memcache te readers with the

00:11:48,910 --> 00:11:51,220
right

00:11:49,450 --> 00:11:53,560
the library is installed packages

00:11:51,220 --> 00:11:55,960
installed you can also cache in database

00:11:53,560 --> 00:11:57,760
so you can take a full page that took

00:11:55,960 --> 00:11:59,440
two seconds to render you can cache it

00:11:57,760 --> 00:12:03,250
in the database the full rendered page

00:11:59,440 --> 00:12:05,590
that is possible I would prefer caching

00:12:03,250 --> 00:12:11,880
it in memory over databases but yes it

00:12:05,590 --> 00:12:16,990
is possible okay so a simple way to use

00:12:11,880 --> 00:12:20,110
caching you define caches dictionary in

00:12:16,990 --> 00:12:22,180
your settings dot py and you say where

00:12:20,110 --> 00:12:25,440
your caches are lying I am using a

00:12:22,180 --> 00:12:27,550
memcache the example here or you can use

00:12:25,440 --> 00:12:29,230
database caching this there is an

00:12:27,550 --> 00:12:31,630
indentation there earlier there are two

00:12:29,230 --> 00:12:33,520
different examples right so you can use

00:12:31,630 --> 00:12:38,350
memcache to be your radius you can use

00:12:33,520 --> 00:12:39,850
filesystem I've used two here and in

00:12:38,350 --> 00:12:44,020
case of some guides you can use multiple

00:12:39,850 --> 00:12:47,620
locations to work with a MKT cluster

00:12:44,020 --> 00:12:48,460
alright sites caching is like kind of

00:12:47,620 --> 00:12:52,270
useless

00:12:48,460 --> 00:12:54,130
if if you really need sites caching

00:12:52,270 --> 00:12:58,120
you'd probably as I said generate static

00:12:54,130 --> 00:13:02,410
page and that's good enough but yeah a

00:12:58,120 --> 00:13:04,540
per view caching works is usable

00:13:02,410 --> 00:13:06,250
sometimes so for example this popular

00:13:04,540 --> 00:13:09,190
view that I am talking about you can

00:13:06,250 --> 00:13:10,150
just say that this should be cached for

00:13:09,190 --> 00:13:12,940
600 seconds

00:13:10,150 --> 00:13:15,100
that's seconds you can use a variable

00:13:12,940 --> 00:13:16,600
there you can use the setting variable

00:13:15,100 --> 00:13:18,400
can be defined in a settings we use a

00:13:16,600 --> 00:13:21,220
dictionary it's like cool so you can use

00:13:18,400 --> 00:13:23,860
that it's not very useful

00:13:21,220 --> 00:13:26,589
if you want to serve pages based

00:13:23,860 --> 00:13:29,079
different pages same URL it should serve

00:13:26,589 --> 00:13:31,449
different pages to different users we

00:13:29,079 --> 00:13:34,060
get into how you can do that but yes if

00:13:31,449 --> 00:13:36,970
everybody gets the same thing and this

00:13:34,060 --> 00:13:39,250
works very well it also sends expires

00:13:36,970 --> 00:13:41,649
headers it also sends that last modified

00:13:39,250 --> 00:13:43,930
here headers with max age depending on

00:13:41,649 --> 00:13:46,000
the cash value that you've set so it

00:13:43,930 --> 00:13:48,939
also allows you to do some client-side

00:13:46,000 --> 00:13:52,660
caching at this level itself other

00:13:48,939 --> 00:13:55,060
enables clients and cash all right next

00:13:52,660 --> 00:13:57,939
template fragments as I said you can

00:13:55,060 --> 00:14:02,790
have a page say your home page where

00:13:57,939 --> 00:14:05,800
you're probably showing a user's card

00:14:02,790 --> 00:14:07,389
right so everything else remains same

00:14:05,800 --> 00:14:09,790
assuming you're not personalizing your

00:14:07,389 --> 00:14:11,829
home page everything else remains same

00:14:09,790 --> 00:14:14,259
just the users god keep changing with

00:14:11,829 --> 00:14:19,800
every refresh right so you can

00:14:14,259 --> 00:14:23,620
potentially try and say that hey cache

00:14:19,800 --> 00:14:25,839
part of the page which is constant for

00:14:23,620 --> 00:14:27,610
all the users and I'll only calculate

00:14:25,839 --> 00:14:30,189
the part of the page or I'll only V

00:14:27,610 --> 00:14:33,220
render part of the page that is distinct

00:14:30,189 --> 00:14:34,329
for every user you can actually say that

00:14:33,220 --> 00:14:37,269
for this user

00:14:34,329 --> 00:14:41,199
let's cache it so this user refreshes it

00:14:37,269 --> 00:14:44,110
every time so the same fragment is

00:14:41,199 --> 00:14:47,529
cached so probably could be used for

00:14:44,110 --> 00:14:49,689
somebody who is making our email server

00:14:47,529 --> 00:14:51,279
but your number of emails remains same

00:14:49,689 --> 00:14:54,459
unless you get hundreds of emails every

00:14:51,279 --> 00:14:59,559
second so your number of emails could

00:14:54,459 --> 00:15:02,709
also be cached within a fragment are you

00:14:59,559 --> 00:15:04,420
guys with me here so far right so we

00:15:02,709 --> 00:15:07,779
have we have defined two fragments here

00:15:04,420 --> 00:15:10,269
one is a home page footed which remains

00:15:07,779 --> 00:15:12,970
same for all the users the second is a

00:15:10,269 --> 00:15:20,939
footer with a username that changes

00:15:12,970 --> 00:15:20,939
right use them inside blocks

00:15:23,330 --> 00:15:28,019
multiple cache block within a single

00:15:25,800 --> 00:15:29,550
blocker possible if you use template

00:15:28,019 --> 00:15:31,620
inheritance in django you can define

00:15:29,550 --> 00:15:37,070
blocks and each block would have

00:15:31,620 --> 00:15:39,240
multiple cache blocks internally and

00:15:37,070 --> 00:15:41,190
usually the objects because if you are

00:15:39,240 --> 00:15:43,350
not using lazy of lazy objects in your

00:15:41,190 --> 00:15:47,399
view then potentially you are evaluating

00:15:43,350 --> 00:15:50,880
the query anyway right so you want to

00:15:47,399 --> 00:15:54,570
reduce your queries to your database

00:15:50,880 --> 00:15:56,010
server which you after hearing my talk

00:15:54,570 --> 00:15:57,959
you will probably believe that all

00:15:56,010 --> 00:16:02,029
sectors because of because they use

00:15:57,959 --> 00:16:06,329
database that's partially true but yes

00:16:02,029 --> 00:16:09,450
essentially what you need is lazy

00:16:06,329 --> 00:16:12,600
objects that don't get evaluated until

00:16:09,450 --> 00:16:14,940
you hit the templates if you are already

00:16:12,600 --> 00:16:16,500
valuating them in your view then your

00:16:14,940 --> 00:16:22,410
template caching is like more or less

00:16:16,500 --> 00:16:26,220
useless template caching also allows you

00:16:22,410 --> 00:16:29,579
to delete caches which is very nice

00:16:26,220 --> 00:16:31,829
because as I said if you have you know a

00:16:29,579 --> 00:16:35,880
team page and you fire someone then you

00:16:31,829 --> 00:16:37,860
need to refresh your template when you

00:16:35,880 --> 00:16:40,430
delete your team members or when you

00:16:37,860 --> 00:16:45,270
disable your team members profile right

00:16:40,430 --> 00:16:46,829
okay sessions of course so for sessions

00:16:45,270 --> 00:16:49,410
you don't have to write any code if you

00:16:46,829 --> 00:16:51,060
want to cache that just define a session

00:16:49,410 --> 00:16:52,079
engine and that's good enough I'll see

00:16:51,060 --> 00:16:53,970
you later in angel

00:16:52,079 --> 00:16:58,110
assuming you have already defined a

00:16:53,970 --> 00:17:00,120
cache so you have done full site cache

00:16:58,110 --> 00:17:02,370
we have done views we have done template

00:17:00,120 --> 00:17:05,189
fragment sessions let's see how you can

00:17:02,370 --> 00:17:06,540
do individual objects you can you should

00:17:05,189 --> 00:17:09,900
be able to cache individual objects

00:17:06,540 --> 00:17:12,809
something like number of videos on your

00:17:09,900 --> 00:17:15,300
YouTube website number of products on

00:17:12,809 --> 00:17:18,240
your website you probably don't need to

00:17:15,300 --> 00:17:19,829
do you do want to do a select count star

00:17:18,240 --> 00:17:24,990
every single time somebody hits your

00:17:19,829 --> 00:17:26,400
page right number of objects in a

00:17:24,990 --> 00:17:27,569
particular category products in a

00:17:26,400 --> 00:17:31,830
particular category on an e-commerce

00:17:27,569 --> 00:17:34,490
site right so you can cache individual

00:17:31,830 --> 00:17:36,820
objects you can cache any

00:17:34,490 --> 00:17:39,440
key-value pair which is what most

00:17:36,820 --> 00:17:40,790
caching engines like memcache do videos

00:17:39,440 --> 00:17:44,810
would support me this would support much

00:17:40,790 --> 00:17:47,510
more but for now we'll just stick to key

00:17:44,810 --> 00:17:50,300
value pairs you can say Python Django

00:17:47,510 --> 00:17:53,690
you can do get you can do said get

00:17:50,300 --> 00:17:57,230
delete you can do set many not all

00:17:53,690 --> 00:17:59,810
backends may support this and you can

00:17:57,230 --> 00:18:00,860
also do increments and decrements so the

00:17:59,810 --> 00:18:04,720
count that I was talking to you about

00:18:00,860 --> 00:18:06,860
every time you add a new product to your

00:18:04,720 --> 00:18:09,260
database you can probably do a count

00:18:06,860 --> 00:18:16,250
increment instead of calculating the

00:18:09,260 --> 00:18:18,140
count again and again all right now in

00:18:16,250 --> 00:18:22,310
value rating as we discussed you can do

00:18:18,140 --> 00:18:23,720
set get delete or in case of template

00:18:22,310 --> 00:18:26,210
fragments you can find the template

00:18:23,720 --> 00:18:30,710
fragment key and then delete right

00:18:26,210 --> 00:18:33,020
that's called invalidating so you have

00:18:30,710 --> 00:18:35,060
your homepage you uploaded a new video

00:18:33,020 --> 00:18:36,710
you have a YouTube kind of site you

00:18:35,060 --> 00:18:40,940
uploaded a new video you want everybody

00:18:36,710 --> 00:18:42,470
to see new your homepage with the new

00:18:40,940 --> 00:18:43,940
video that you uploaded and that should

00:18:42,470 --> 00:18:46,310
come first right so your template

00:18:43,940 --> 00:18:48,740
fragment that you had made for your home

00:18:46,310 --> 00:18:51,230
page is now invalid you want to make

00:18:48,740 --> 00:18:57,590
sure that your cache fragment that your

00:18:51,230 --> 00:19:00,590
cached should be deleted right and your

00:18:57,590 --> 00:19:04,130
post signals both singles are very handy

00:19:00,590 --> 00:19:06,290
there you can also use periodic krons or

00:19:04,130 --> 00:19:11,540
salary tasks to do that I have seen

00:19:06,290 --> 00:19:15,050
people doing it but signals work very

00:19:11,540 --> 00:19:18,890
well you can just use any create signals

00:19:15,050 --> 00:19:22,730
or delete signals to change counts you

00:19:18,890 --> 00:19:26,050
can use change signals any safe post

00:19:22,730 --> 00:19:29,720
safe signals - yeah I'm using post safe

00:19:26,050 --> 00:19:32,150
to cache objects again or just say that

00:19:29,720 --> 00:19:33,890
this object should not be cached anymore

00:19:32,150 --> 00:19:35,420
and whenever somebody else loads the

00:19:33,890 --> 00:19:38,740
object again the product again you can

00:19:35,420 --> 00:19:42,140
cache it again so invalidating can also

00:19:38,740 --> 00:19:45,020
be invalidate and populate the cache

00:19:42,140 --> 00:19:47,060
again it's your architecture charts but

00:19:45,020 --> 00:19:48,280
invalidating now is not easy in fact

00:19:47,060 --> 00:19:50,170
somebody said that

00:19:48,280 --> 00:19:55,330
one of the two most difficult things in

00:19:50,170 --> 00:19:57,190
computer science okay I'm cashing so

00:19:55,330 --> 00:19:58,900
that's that's all for django django

00:19:57,190 --> 00:20:02,140
offers you a whole lot of caching at

00:19:58,900 --> 00:20:04,690
every single level but you can do more

00:20:02,140 --> 00:20:10,600
your web servers can cash in genex can

00:20:04,690 --> 00:20:10,930
define a simple simple cache object for

00:20:10,600 --> 00:20:14,980
you

00:20:10,930 --> 00:20:17,680
for example flip cards menu the category

00:20:14,980 --> 00:20:20,110
menu that gets shown every on an EVD

00:20:17,680 --> 00:20:22,360
single page every single load if they

00:20:20,110 --> 00:20:26,100
have ten million pageviews every single

00:20:22,360 --> 00:20:28,900
day everyone is accessing that right

00:20:26,100 --> 00:20:30,310
taken probably's are they're probably

00:20:28,900 --> 00:20:32,950
all really doing it they can probably

00:20:30,310 --> 00:20:37,900
just use web server cache too so it's a

00:20:32,950 --> 00:20:41,080
simple JSON right you can use something

00:20:37,900 --> 00:20:45,070
called varnish in front of your machine

00:20:41,080 --> 00:20:47,350
and varnish can cache results you can

00:20:45,070 --> 00:20:50,070
say that one should cache for X number

00:20:47,350 --> 00:20:54,310
of minutes you can use a cron to

00:20:50,070 --> 00:20:56,740
probably you can use a cron to go to all

00:20:54,310 --> 00:21:00,970
your pages bonds and one-ish will have

00:20:56,740 --> 00:21:03,700
you know all your pages in the cache one

00:21:00,970 --> 00:21:06,070
it also allows you to punch holes for

00:21:03,700 --> 00:21:08,890
user personalization we will discuss

00:21:06,070 --> 00:21:13,090
that in next slides you can use Syrians

00:21:08,890 --> 00:21:16,330
they do caching add Syrians food catch

00:21:13,090 --> 00:21:18,550
as close to your customer as possible

00:21:16,330 --> 00:21:21,190
right and browsers use caching if you

00:21:18,550 --> 00:21:22,810
refresh a page your assets are not

00:21:21,190 --> 00:21:25,870
downloaded all the time all the images

00:21:22,810 --> 00:21:27,910
are not downloaded your jquery's are not

00:21:25,870 --> 00:21:30,490
downloaded all the time until use unless

00:21:27,910 --> 00:21:33,280
you say you know get it again definitely

00:21:30,490 --> 00:21:36,010
hear it again so if that's what people

00:21:33,280 --> 00:21:38,950
do you basically ask your browsers to

00:21:36,010 --> 00:21:42,760
cache your images your logo your

00:21:38,950 --> 00:21:45,730
JavaScript your CSS somebody comes on

00:21:42,760 --> 00:21:47,590
your site first time they probably take

00:21:45,730 --> 00:21:49,630
time the next time onwards they don't

00:21:47,590 --> 00:21:53,490
download the same resources again you're

00:21:49,630 --> 00:21:57,550
the browser is caching it all right and

00:21:53,490 --> 00:22:01,240
you can cache in database right my skill

00:21:57,550 --> 00:22:02,230
allows a simple one-line change that

00:22:01,240 --> 00:22:07,650
says

00:22:02,230 --> 00:22:11,140
I want a 500 MB of cache built into

00:22:07,650 --> 00:22:13,120
MySQL any any query in fact you have

00:22:11,140 --> 00:22:15,910
probably seen it 16 MB is probably by

00:22:13,120 --> 00:22:18,490
default you probably seen it that you

00:22:15,910 --> 00:22:19,990
run a query on MySQL root it takes two

00:22:18,490 --> 00:22:22,300
seconds you run the same courier again

00:22:19,990 --> 00:22:25,420
it it gives you a result very quickly

00:22:22,300 --> 00:22:26,230
that's my SQL query in action query

00:22:25,420 --> 00:22:29,380
cache in action

00:22:26,230 --> 00:22:32,620
my school can cache a lot of queries and

00:22:29,380 --> 00:22:34,900
in some cases my school query cache is

00:22:32,620 --> 00:22:38,740
sufficient for a lot of people just do a

00:22:34,900 --> 00:22:41,530
flavor instance my spell slave and just

00:22:38,740 --> 00:22:43,390
do query caching decently big size it

00:22:41,530 --> 00:22:45,580
doesn't work very well if you have a

00:22:43,390 --> 00:22:46,780
site that gets a lot of inserts and a

00:22:45,580 --> 00:22:48,700
lot of updates because every time

00:22:46,780 --> 00:22:50,080
something gets updated you delete the

00:22:48,700 --> 00:22:52,420
whole cache and that's what my still

00:22:50,080 --> 00:22:56,830
does right so invalidation happens very

00:22:52,420 --> 00:22:58,990
fast and that's why we still need to

00:22:56,830 --> 00:23:00,970
worry about cash or caching on our

00:22:58,990 --> 00:23:04,060
instead of MySQL handling it first

00:23:00,970 --> 00:23:05,880
alright then there are other methods you

00:23:04,060 --> 00:23:08,230
can do head side includes

00:23:05,880 --> 00:23:10,900
varnish I talked about varnish and

00:23:08,230 --> 00:23:13,510
akamai both allow you to do it side

00:23:10,900 --> 00:23:15,520
includes you can just like template

00:23:13,510 --> 00:23:17,950
fragments we were able to say that a

00:23:15,520 --> 00:23:18,550
part of the page is unique for every

00:23:17,950 --> 00:23:20,290
user

00:23:18,550 --> 00:23:22,330
different for every user and should not

00:23:20,290 --> 00:23:25,090
be cached with the whole page you can

00:23:22,330 --> 00:23:27,070
also do the same thing with ESI you can

00:23:25,090 --> 00:23:30,280
say that there is one full page that

00:23:27,070 --> 00:23:32,340
Akamai or one you should cache and then

00:23:30,280 --> 00:23:35,020
part of the page should be fetched from

00:23:32,340 --> 00:23:39,700
another location that's outside includes

00:23:35,020 --> 00:23:41,500
for you and then people said hey we are

00:23:39,700 --> 00:23:43,270
putting in a lot of efforts and doing

00:23:41,500 --> 00:23:47,650
this essentially your page gets loaded

00:23:43,270 --> 00:23:50,170
and then Akamai sensors PI requests for

00:23:47,650 --> 00:23:51,430
loading different objects and then they

00:23:50,170 --> 00:23:55,930
realize they can probably do something

00:23:51,430 --> 00:23:59,770
similar in browser and that's how Ajax

00:23:55,930 --> 00:24:03,430
was kind of edge X became popular you

00:23:59,770 --> 00:24:06,810
send HTML template you send a rest query

00:24:03,430 --> 00:24:10,540
or an ajax query and then you render

00:24:06,810 --> 00:24:13,090
your data right so your template is

00:24:10,540 --> 00:24:16,120
still cached a lot of your data can

00:24:13,090 --> 00:24:19,360
still be cached by the browser

00:24:16,120 --> 00:24:21,790
right just the values that you want to

00:24:19,360 --> 00:24:24,700
change for every user can be faced by

00:24:21,790 --> 00:24:26,650
your custom JavaScript and the page can

00:24:24,700 --> 00:24:28,810
be populated and there's this become

00:24:26,650 --> 00:24:30,760
really really popular right almost every

00:24:28,810 --> 00:24:33,130
website does this they will give you

00:24:30,760 --> 00:24:34,930
first HTML really really fast and then

00:24:33,130 --> 00:24:36,970
they'll make you wait for they'll say

00:24:34,930 --> 00:24:39,910
loading and that loading is essentially

00:24:36,970 --> 00:24:44,140
loading the data right that allows them

00:24:39,910 --> 00:24:47,910
to cache the whole template cache the

00:24:44,140 --> 00:24:50,440
commonly used variables at browser level

00:24:47,910 --> 00:24:57,370
the the server doesn't even get hit

00:24:50,440 --> 00:25:01,060
right okay now since you are talking

00:24:57,370 --> 00:25:04,570
about making websites faster caching can

00:25:01,060 --> 00:25:07,930
only do so much for you for inserts big

00:25:04,570 --> 00:25:11,290
inserts big updates caching doesn't look

00:25:07,930 --> 00:25:14,290
right caching is primarily meant for the

00:25:11,290 --> 00:25:16,630
read heavy websites what if you ever

00:25:14,290 --> 00:25:19,660
write heavier that's right and every

00:25:16,630 --> 00:25:22,030
time you make a change you write 10

00:25:19,660 --> 00:25:26,620
different queries so something like

00:25:22,030 --> 00:25:29,740
Twitter which probably writes into 5,000

00:25:26,620 --> 00:25:32,340
different tables when one single twitter

00:25:29,740 --> 00:25:37,720
sent tables belonging to your followers

00:25:32,340 --> 00:25:41,250
that I'll be inside right so what you

00:25:37,720 --> 00:25:44,170
can do is you can do those parts later

00:25:41,250 --> 00:25:46,660
all the operations need not be done

00:25:44,170 --> 00:25:49,360
synchronously you can say yes your tweet

00:25:46,660 --> 00:25:52,390
has been submitted and will now spread

00:25:49,360 --> 00:25:54,730
it to your followers right confirmation

00:25:52,390 --> 00:25:57,670
emails somebody registers on your side

00:25:54,730 --> 00:25:59,320
you want to connect to an SMTP server or

00:25:57,670 --> 00:26:01,840
your reviewing API which in turn is

00:25:59,320 --> 00:26:04,120
connecting to an SMTP server what if

00:26:01,840 --> 00:26:05,530
there's some TP servers down you can

00:26:04,120 --> 00:26:07,660
keep trying maybe two or three times

00:26:05,530 --> 00:26:10,030
your user is waiting I stopped that you

00:26:07,660 --> 00:26:12,250
can say hey we'll send your email you'll

00:26:10,030 --> 00:26:13,570
soon receive anyway the messaging is

00:26:12,250 --> 00:26:18,430
you'll soon receive a confirmation

00:26:13,570 --> 00:26:20,050
message commas it need not be done with

00:26:18,430 --> 00:26:23,140
the request you can just say you can

00:26:20,050 --> 00:26:27,070
schedule a request to send confirmation

00:26:23,140 --> 00:26:29,290
emails later right elasticsearch of

00:26:27,070 --> 00:26:29,830
solar updates if you are using solar or

00:26:29,290 --> 00:26:35,860
elastics

00:26:29,830 --> 00:26:38,260
for for search then every time a product

00:26:35,860 --> 00:26:42,190
changes a description changes you need

00:26:38,260 --> 00:26:44,590
not update solar on the fly you can say

00:26:42,190 --> 00:26:46,600
that Solar gets updated later right

00:26:44,590 --> 00:26:50,110
large report creation I've seen that

00:26:46,600 --> 00:26:52,899
with the paper if you download a huge

00:26:50,110 --> 00:26:55,000
report they literally say that will send

00:26:52,899 --> 00:26:56,620
you an email yet the report may take a

00:26:55,000 --> 00:26:58,929
couple of minutes we'll send you an

00:26:56,620 --> 00:27:01,149
email once the report is ready assuming

00:26:58,929 --> 00:27:03,070
your table story is doing well and you

00:27:01,149 --> 00:27:04,510
get hundreds of transactions if you have

00:27:03,070 --> 00:27:06,610
like ten transaction they'll give you a

00:27:04,510 --> 00:27:08,769
report right away but most of the times

00:27:06,610 --> 00:27:11,049
they'll say hey we'll send your report

00:27:08,769 --> 00:27:14,620
later they understand that report is

00:27:11,049 --> 00:27:17,950
huge users are willing to wait because

00:27:14,620 --> 00:27:19,059
if you just make the browser wait then

00:27:17,950 --> 00:27:21,370
essentially what you're doing is your

00:27:19,059 --> 00:27:23,590
browser will time out right so instead

00:27:21,370 --> 00:27:25,779
of that you can say hey we have taken

00:27:23,590 --> 00:27:30,370
the request we have processing right and

00:27:25,779 --> 00:27:34,210
we'll send you an email later right so

00:27:30,370 --> 00:27:38,080
you can you can use celery or ji vent or

00:27:34,210 --> 00:27:43,409
any such process to schedule your events

00:27:38,080 --> 00:27:43,409
in future just don't make the users rate

00:27:43,860 --> 00:27:50,590
and you've talked all this but you need

00:27:47,200 --> 00:27:54,490
to probably try all this I use a very

00:27:50,590 --> 00:27:56,080
good code here that just by telling you

00:27:54,490 --> 00:27:58,000
that these things exist nothing has

00:27:56,080 --> 00:28:00,730
happened you need to continue you need

00:27:58,000 --> 00:28:03,580
to try these things you need to simply

00:28:00,730 --> 00:28:08,649
configure a cache and do a bit of get

00:28:03,580 --> 00:28:11,940
put and that will make you an expert all

00:28:08,649 --> 00:28:15,130
right these are some of the references a

00:28:11,940 --> 00:28:17,080
lot of django caching documentation you

00:28:15,130 --> 00:28:20,019
can probably see when you go to the site

00:28:17,080 --> 00:28:21,700
you'll see here I use the same examples

00:28:20,019 --> 00:28:24,519
that junghwa's use yes I copy pasted

00:28:21,700 --> 00:28:28,049
from there yeah there are the pretty

00:28:24,519 --> 00:28:34,350
good examples for select related and for

00:28:28,049 --> 00:28:34,350
caching decorators right any questions

00:28:35,330 --> 00:28:40,010
when you are trying to cash in a

00:28:37,730 --> 00:28:42,380
template what there was an issue that I

00:28:40,010 --> 00:28:44,450
faced it was like there's a form which

00:28:42,380 --> 00:28:46,640
is common to everybody right but when

00:28:44,450 --> 00:28:48,710
you cash it the CSRF token remains same

00:28:46,640 --> 00:28:59,510
for everybody

00:28:48,710 --> 00:29:01,910
so you cash it for every user you so

00:28:59,510 --> 00:29:04,160
what you're saying is your request to

00:29:01,910 --> 00:29:06,250
use the name o if you're talking about

00:29:04,160 --> 00:29:09,800
CSRF token you then you probably don't

00:29:06,250 --> 00:29:12,860
you probably have a very small caching

00:29:09,800 --> 00:29:20,180
window or you use Ajax so it's light

00:29:12,860 --> 00:29:22,850
will be used as X for all our forms when

00:29:20,180 --> 00:29:24,170
you include a lot of templates compiled

00:29:22,850 --> 00:29:26,570
templates and all if you'd like to say a

00:29:24,170 --> 00:29:28,280
little bit about time to use compiled

00:29:26,570 --> 00:29:30,170
templates when you are making a template

00:29:28,280 --> 00:29:32,240
by including a lot of smaller templates

00:29:30,170 --> 00:29:34,130
oh I haven't used compiled templates in

00:29:32,240 --> 00:29:41,240
jumbo yet I need to make a note I need

00:29:34,130 --> 00:29:42,710
to learn that Thanks isn't ginger use

00:29:41,240 --> 00:29:45,620
compile temperature I thought Django

00:29:42,710 --> 00:29:51,080
templates are not compiled yet they are

00:29:45,620 --> 00:29:53,630
I learned that mostly you have spoken

00:29:51,080 --> 00:29:56,420
about SQL queries right so what if I

00:29:53,630 --> 00:29:58,340
want to use with no SQL databases why

00:29:56,420 --> 00:30:02,420
not no SQL databases are equally slow I

00:29:58,340 --> 00:30:03,980
mean there's slower than Ram no they're

00:30:02,420 --> 00:30:09,290
pretty good so SQL was probably an

00:30:03,980 --> 00:30:14,000
attempt to make you know databases or I

00:30:09,290 --> 00:30:16,400
will say no SQL our SQL databases that

00:30:14,000 --> 00:30:19,700
are pure indexes you're probably just

00:30:16,400 --> 00:30:22,190
doing index queries but yes if you have

00:30:19,700 --> 00:30:25,390
any large queries that you're doing on

00:30:22,190 --> 00:30:25,390
no SQL you can carry it I

00:30:29,750 --> 00:31:02,210
they will not recognize dude people call

00:30:33,000 --> 00:31:06,300
me if you have a very very volatile data

00:31:02,210 --> 00:31:10,650
use something like a readers which is an

00:31:06,300 --> 00:31:12,360
in-memory database with disk storage if

00:31:10,650 --> 00:31:14,790
your data is very volatile I mean I have

00:31:12,360 --> 00:31:17,190
friends who do gaming api's and gaming

00:31:14,790 --> 00:31:20,730
leaderboards and scoring and all do use

00:31:17,190 --> 00:31:26,450
bidis it just makes sense you don't save

00:31:20,730 --> 00:31:30,330
it in SQL let the architecture point

00:31:26,450 --> 00:31:33,150
hello I in your experience what is the

00:31:30,330 --> 00:31:37,880
best cloud cloud hosting provider for

00:31:33,150 --> 00:31:40,260
Django or for Django for the hosting

00:31:37,880 --> 00:31:41,820
there's no right answer really I have

00:31:40,260 --> 00:31:45,180
used data Lewis I'm pretty happy I

00:31:41,820 --> 00:31:48,570
really like you know their managed

00:31:45,180 --> 00:31:52,080
services we use bitter ocean right now

00:31:48,570 --> 00:31:54,060
we are happy with that I haven't used

00:31:52,080 --> 00:31:57,480
Heroku people are very big fans of

00:31:54,060 --> 00:31:58,140
Heroku but yeah it doesn't really matter

00:31:57,480 --> 00:32:04,830
a whole lot

00:31:58,140 --> 00:32:10,430
almost all big ones are good thanks any

00:32:04,830 --> 00:32:10,430

YouTube URL: https://www.youtube.com/watch?v=XVv_z5q4MC8


