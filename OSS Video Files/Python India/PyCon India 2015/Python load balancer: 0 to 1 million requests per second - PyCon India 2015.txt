Title: Python load balancer: 0 to 1 million requests per second - PyCon India 2015
Publication date: 2015-10-12
Playlist: PyCon India 2015
Description: 
	Speaker: Abishek Kannan

Details: https://in.pycon.org/cfp/pycon-india-2015/proposals/python-load-balancer-0-to-1-million-requests-per-second/
Captions: 
	00:00:00,000 --> 00:00:05,940
so the talk is Python load balancers 0

00:00:03,629 --> 00:00:08,429
to 1 million requests per second it's by

00:00:05,940 --> 00:00:11,670
abhishek abhishek is the undergrad and

00:00:08,429 --> 00:00:13,860
triple I t he is working in robustus R&D

00:00:11,670 --> 00:00:18,029
team where he has built a custom load

00:00:13,860 --> 00:00:25,560
balancer piropos thank you um can you

00:00:18,029 --> 00:00:27,840
guys give me at the back yeah so this is

00:00:25,560 --> 00:00:30,420
my talk it's a Python load balancer

00:00:27,840 --> 00:00:32,969
which I custom built this summer in a

00:00:30,420 --> 00:00:34,410
company called robust test before I get

00:00:32,969 --> 00:00:36,000
into anything I really want to tell you

00:00:34,410 --> 00:00:37,980
guys what an honor it is to present my

00:00:36,000 --> 00:00:40,290
work in front of you all this is my

00:00:37,980 --> 00:00:41,940
first talk and my first conference and

00:00:40,290 --> 00:00:45,660
I'm really glad to share this moment

00:00:41,940 --> 00:00:48,930
with you all before we get into anything

00:00:45,660 --> 00:00:51,510
a little bit about myself I'm a fourth

00:00:48,930 --> 00:00:53,510
year student at triple ID Hyderabad i'm

00:00:51,510 --> 00:00:57,649
doing a dual degree co so i'll be a

00:00:53,510 --> 00:01:00,210
passing out in 2017 with an MS degree my

00:00:57,649 --> 00:01:02,579
areas of research interests lie in NLP

00:01:00,210 --> 00:01:06,330
basically but I've done some other

00:01:02,579 --> 00:01:07,710
projects also i'm part of the language

00:01:06,330 --> 00:01:10,740
technology research center in triple-a

00:01:07,710 --> 00:01:13,159
tea and my other interests include well

00:01:10,740 --> 00:01:16,560
football and i'm a centre-forward for my

00:01:13,159 --> 00:01:18,360
team and triple IT and I'm also part of

00:01:16,560 --> 00:01:24,180
the organizing committee of an adventure

00:01:18,360 --> 00:01:26,299
club after plating Hyderabad well the

00:01:24,180 --> 00:01:29,490
world technical expertise i have is I've

00:01:26,299 --> 00:01:32,610
done a few open source contributions I

00:01:29,490 --> 00:01:34,560
have done a few internships for various

00:01:32,610 --> 00:01:36,630
companies and I've done a few personal

00:01:34,560 --> 00:01:38,310
projects for my yourself and well this

00:01:36,630 --> 00:01:40,229
came about last summer when I was

00:01:38,310 --> 00:01:42,869
working with a company called robust

00:01:40,229 --> 00:01:47,909
test and that's where we built the load

00:01:42,869 --> 00:01:49,500
balancer before before the summer I

00:01:47,909 --> 00:01:51,060
actually had little or no idea to what

00:01:49,500 --> 00:01:53,880
the load balance that is I did not know

00:01:51,060 --> 00:01:55,500
how the term itself was alien to me only

00:01:53,880 --> 00:01:57,299
when I started building it did I realize

00:01:55,500 --> 00:01:59,790
its vast in very necessary applications

00:01:57,299 --> 00:02:01,290
and now I must warn you that this is not

00:01:59,790 --> 00:02:02,700
a technical talk I will not be getting

00:02:01,290 --> 00:02:05,729
too technical details details of it

00:02:02,700 --> 00:02:08,429
because it's still under development but

00:02:05,729 --> 00:02:11,959
I will I will surely make sure that I

00:02:08,429 --> 00:02:11,959
convey as much information as possible

00:02:13,190 --> 00:02:21,240
so what do you get when you hear the

00:02:16,530 --> 00:02:23,570
term load balancer anybody how do you

00:02:21,240 --> 00:02:26,450
guys use a load balancer at all or

00:02:23,570 --> 00:02:28,620
sharing server nodes yeah anybody else

00:02:26,450 --> 00:02:31,470
have you used a load balance before we

00:02:28,620 --> 00:02:34,200
have you heard the concept well as he

00:02:31,470 --> 00:02:36,000
said it's well when you hear load

00:02:34,200 --> 00:02:38,010
balancer with something well it balances

00:02:36,000 --> 00:02:40,680
load that's all it does a load balancer

00:02:38,010 --> 00:02:42,780
balance is load a load balancer balances

00:02:40,680 --> 00:02:44,070
load in such a way that it is

00:02:42,780 --> 00:02:46,170
distributed among all the different

00:02:44,070 --> 00:02:47,820
computing resources here he said that it

00:02:46,170 --> 00:02:49,290
balances load among servers though

00:02:47,820 --> 00:02:52,980
computing resources lead not necessarily

00:02:49,290 --> 00:02:55,710
always be servers because many computing

00:02:52,980 --> 00:02:58,500
components or can be there as the

00:02:55,710 --> 00:03:00,660
servers or other computers computer

00:02:58,500 --> 00:03:02,850
clusters network links or disk drives

00:03:00,660 --> 00:03:04,230
anything the computer the computing

00:03:02,850 --> 00:03:05,880
resources could be anything and the load

00:03:04,230 --> 00:03:07,560
balancer would share resources among all

00:03:05,880 --> 00:03:10,230
these I mean would dispute workload

00:03:07,560 --> 00:03:12,120
among all these it aims aims to optimize

00:03:10,230 --> 00:03:13,710
those use a maximize throughput analyze

00:03:12,120 --> 00:03:16,770
the response time and about abuse of a

00:03:13,710 --> 00:03:18,660
single resource the load balancers

00:03:16,770 --> 00:03:19,830
intelligent in some sense it aims to

00:03:18,660 --> 00:03:22,530
distribute the workload in such a way

00:03:19,830 --> 00:03:24,960
that it optimizes the entire system it

00:03:22,530 --> 00:03:26,610
makes sure that no single use a single

00:03:24,960 --> 00:03:28,620
resources a single resource gets

00:03:26,610 --> 00:03:31,710
overused and it minimizes the entire

00:03:28,620 --> 00:03:32,910
response time of the application using

00:03:31,710 --> 00:03:35,790
multiple components increases

00:03:32,910 --> 00:03:38,070
reliability and availability well this

00:03:35,790 --> 00:03:39,540
is true because well your burden on one

00:03:38,070 --> 00:03:41,250
single component reduces because you

00:03:39,540 --> 00:03:43,770
have multiple components or taking care

00:03:41,250 --> 00:03:45,390
of your entire application so the burden

00:03:43,770 --> 00:03:47,700
on one single component reduces there

00:03:45,390 --> 00:03:49,560
for the entire application becomes more

00:03:47,700 --> 00:03:54,180
available more responsive and more

00:03:49,560 --> 00:03:56,580
reliable to you well load balancers have

00:03:54,180 --> 00:03:57,870
multiple different applications and this

00:03:56,580 --> 00:03:59,510
is the well the basic architecture of

00:03:57,870 --> 00:04:01,320
our load balancer normally looks like

00:03:59,510 --> 00:04:02,940
but they come up with different

00:04:01,320 --> 00:04:05,550
applications different techniques and I

00:04:02,940 --> 00:04:07,610
would go on to show you what load

00:04:05,550 --> 00:04:10,950
bouncers are there and what different

00:04:07,610 --> 00:04:12,690
applications they give you so here is a

00:04:10,950 --> 00:04:14,340
typical architecture of load balancer so

00:04:12,690 --> 00:04:15,780
you have a load balancer which is

00:04:14,340 --> 00:04:17,850
communicating with multiple back-end

00:04:15,780 --> 00:04:19,799
servers and there are multiple clients

00:04:17,850 --> 00:04:22,890
connecting to your load balancer to

00:04:19,799 --> 00:04:26,580
communicate with the server now when I

00:04:22,890 --> 00:04:29,650
began this project or in the summer

00:04:26,580 --> 00:04:31,120
though the way we all start coding is we

00:04:29,650 --> 00:04:32,290
have our local course we have our load

00:04:31,120 --> 00:04:34,030
balancer running on local Lowe's we have

00:04:32,290 --> 00:04:35,590
a server running on localhost and we

00:04:34,030 --> 00:04:37,090
have different boats assigned to them so

00:04:35,590 --> 00:04:38,289
that's basically how we want to explain

00:04:37,090 --> 00:04:40,270
to you guys also because I want to give

00:04:38,289 --> 00:04:44,710
you a small glimpse of the experience of

00:04:40,270 --> 00:04:46,449
how this my summer was spent so here you

00:04:44,710 --> 00:04:48,880
see that the load balancer was on port

00:04:46,449 --> 00:04:52,030
8080 and there are multiple servers so

00:04:48,880 --> 00:04:55,360
12 server for running on ports 80 81 82

00:04:52,030 --> 00:04:57,400
83 and 84 so now for a client to

00:04:55,360 --> 00:04:59,380
communicate with any of these servers he

00:04:57,400 --> 00:05:01,630
has to go through the load balancer what

00:04:59,380 --> 00:05:03,699
we do is the address of these servers

00:05:01,630 --> 00:05:05,680
are not made public the only thing that

00:05:03,699 --> 00:05:07,000
is made public is the address of the

00:05:05,680 --> 00:05:09,280
load balancer and the port number of the

00:05:07,000 --> 00:05:11,740
load balancer so if a client wishes to

00:05:09,280 --> 00:05:13,750
communicate with a server he has to go

00:05:11,740 --> 00:05:15,639
through the load balancer so here client

00:05:13,750 --> 00:05:17,349
will say that ok hit a patch me through

00:05:15,639 --> 00:05:18,729
to s1 our raw you know he wants to

00:05:17,349 --> 00:05:20,530
connect to s1 so then the load balance

00:05:18,729 --> 00:05:22,180
of what he does is well he's intelligent

00:05:20,530 --> 00:05:24,400
so he knows the load balancer knows

00:05:22,180 --> 00:05:27,400
where the s1 is and what address is

00:05:24,400 --> 00:05:29,110
located at so the it manages to create a

00:05:27,400 --> 00:05:34,180
session between the client and the

00:05:29,110 --> 00:05:36,160
server s1 as I told you there are many

00:05:34,180 --> 00:05:38,260
different applications for load balancer

00:05:36,160 --> 00:05:39,460
here are some of the load balancers

00:05:38,260 --> 00:05:41,320
which are there currently in the market

00:05:39,460 --> 00:05:43,990
right now and they all perform

00:05:41,320 --> 00:05:46,419
exceedingly well in their task but well

00:05:43,990 --> 00:05:48,760
what else do they offer because the

00:05:46,419 --> 00:05:50,050
thing is when you're always creating or

00:05:48,760 --> 00:05:51,909
when you're creating application you

00:05:50,050 --> 00:05:54,940
need to make sure that it caters to your

00:05:51,909 --> 00:05:57,490
needs here right now for example here H

00:05:54,940 --> 00:05:59,169
a proxy balance ng f5 are all these load

00:05:57,490 --> 00:06:01,030
balancers perform exceedingly well in

00:05:59,169 --> 00:06:05,320
the task of load balancing but what else

00:06:01,030 --> 00:06:09,400
do they give so H a proxy for example it

00:06:05,320 --> 00:06:11,889
can give you a HTTP or TCP proxying for

00:06:09,400 --> 00:06:14,380
web-based applications so that's where

00:06:11,889 --> 00:06:16,150
offers and then f5 gives you a virtual

00:06:14,380 --> 00:06:18,550
load balancer along with the standard

00:06:16,150 --> 00:06:20,260
load balancer it comes with and eight

00:06:18,550 --> 00:06:22,690
and for example it offers UL

00:06:20,260 --> 00:06:25,120
manipulations and engine XO gives you

00:06:22,690 --> 00:06:27,370
the ability to configure weights for

00:06:25,120 --> 00:06:29,710
each server so as I said like there are

00:06:27,370 --> 00:06:31,449
multiple applications for your load

00:06:29,710 --> 00:06:36,790
balancer and you can tweak it to fit

00:06:31,449 --> 00:06:40,160
your needs arm or

00:06:36,790 --> 00:06:42,590
so when we go on to the uses of the load

00:06:40,160 --> 00:06:45,170
balancer we see that there are multiple

00:06:42,590 --> 00:06:47,930
uses for such an entity people even

00:06:45,170 --> 00:06:50,030
before someone actually I had no idea to

00:06:47,930 --> 00:06:52,130
what to expect or to what to build or

00:06:50,030 --> 00:06:54,380
what how to do this how to go about this

00:06:52,130 --> 00:06:56,930
but when I started using it I realize

00:06:54,380 --> 00:06:58,970
how how important it is in a in any

00:06:56,930 --> 00:07:01,640
growing industry in any application so

00:06:58,970 --> 00:07:04,610
here we see that it increases security

00:07:01,640 --> 00:07:06,290
how does it increase security you could

00:07:04,610 --> 00:07:08,090
see that the client could not directly

00:07:06,290 --> 00:07:09,200
connect to any of the backend servers

00:07:08,090 --> 00:07:12,170
because the address is not made public

00:07:09,200 --> 00:07:14,150
to connect to any one server he has to

00:07:12,170 --> 00:07:16,190
go through the load balancer therefore

00:07:14,150 --> 00:07:18,260
in some sense you you know your

00:07:16,190 --> 00:07:20,360
probating direct connections to the

00:07:18,260 --> 00:07:21,350
servers so for any client to connect to

00:07:20,360 --> 00:07:22,460
a server he has to go through the load

00:07:21,350 --> 00:07:26,000
balancer that way you're increasing

00:07:22,460 --> 00:07:27,230
security of the entire application it

00:07:26,000 --> 00:07:29,750
improves performance of the entire

00:07:27,230 --> 00:07:31,100
system by distributing traffic the

00:07:29,750 --> 00:07:34,550
performance of the entire system is so

00:07:31,100 --> 00:07:36,830
well it's increased because you are

00:07:34,550 --> 00:07:38,090
reducing the burden on the servers which

00:07:36,830 --> 00:07:40,070
are managing and maintaining the

00:07:38,090 --> 00:07:41,510
application level traffic by reducing

00:07:40,070 --> 00:07:42,770
the burden on those servers you make

00:07:41,510 --> 00:07:45,500
sure that your entire system is more

00:07:42,770 --> 00:07:46,580
responsive more available so that's how

00:07:45,500 --> 00:07:49,370
it improves the performance of the

00:07:46,580 --> 00:07:52,460
system now it makes our entire system

00:07:49,370 --> 00:07:54,350
more fault tolerant this is an important

00:07:52,460 --> 00:07:58,430
key concept or actually which you want

00:07:54,350 --> 00:08:00,830
because if you open that ensures that

00:07:58,430 --> 00:08:03,050
there is no one single point of failure

00:08:00,830 --> 00:08:05,150
if you have a server which is

00:08:03,050 --> 00:08:08,720
unresponsive or witches or broken down

00:08:05,150 --> 00:08:10,190
for some reason and you and now the

00:08:08,720 --> 00:08:12,560
entire system is at the collapse but

00:08:10,190 --> 00:08:14,450
with the road balance so all it has to

00:08:12,560 --> 00:08:16,310
do is it has to distribute the traffic

00:08:14,450 --> 00:08:19,370
among various other servers in the pool

00:08:16,310 --> 00:08:23,570
or therefore thereby it's the entire

00:08:19,370 --> 00:08:24,980
system becomes more fault tolerant here

00:08:23,570 --> 00:08:26,540
are some of the examples of like

00:08:24,980 --> 00:08:29,600
existing load balancers and the

00:08:26,540 --> 00:08:31,580
statistics they give the entire traffic

00:08:29,600 --> 00:08:33,920
which is coming in to the application is

00:08:31,580 --> 00:08:35,270
depicted by the green line and the

00:08:33,920 --> 00:08:36,170
server one and server two are depicted

00:08:35,270 --> 00:08:40,610
by the blue line in the red line

00:08:36,170 --> 00:08:42,860
respectively as you can see the sum

00:08:40,610 --> 00:08:45,620
total at any point or let's say five

00:08:42,860 --> 00:08:48,260
am-6 a.m. or is is equal to the total

00:08:45,620 --> 00:08:50,480
traffic coming in so the load balance is

00:08:48,260 --> 00:08:52,490
distributing its load too so

00:08:50,480 --> 00:08:54,980
and sober too now you may be wondering

00:08:52,490 --> 00:08:56,930
why so one gets way more than server to

00:08:54,980 --> 00:08:59,029
it's probably because one is bigger you

00:08:56,930 --> 00:09:01,279
know or maybe because like I told you I

00:08:59,029 --> 00:09:03,170
like a told in engine X you give more

00:09:01,279 --> 00:09:04,880
weight to so on so its preferred more

00:09:03,170 --> 00:09:06,410
than server to probably because so one

00:09:04,880 --> 00:09:08,000
is the lesser response time then server

00:09:06,410 --> 00:09:11,510
to so you prefer server one more than

00:09:08,000 --> 00:09:14,750
server two and one more key concept to

00:09:11,510 --> 00:09:16,730
grasp is that it is not necessary that

00:09:14,750 --> 00:09:20,480
the load balancer all it has to do is to

00:09:16,730 --> 00:09:22,519
balance load because here you have this

00:09:20,480 --> 00:09:24,980
hourly main statistics which a load

00:09:22,519 --> 00:09:27,199
balancer gives is so it's blocked some

00:09:24,980 --> 00:09:29,149
blocked some mail because it says it's

00:09:27,199 --> 00:09:30,860
spam blocked some males because it says

00:09:29,149 --> 00:09:32,389
its virulence allow some other male so

00:09:30,860 --> 00:09:34,430
it also allows some moderation of the

00:09:32,389 --> 00:09:36,620
entire traffic as such so whatever data

00:09:34,430 --> 00:09:38,510
is being put through the robe and so you

00:09:36,620 --> 00:09:41,120
can also moderate it before you can use

00:09:38,510 --> 00:09:43,010
you can tweak your load balancer to like

00:09:41,120 --> 00:09:44,899
fit your needs and this is exactly what

00:09:43,010 --> 00:09:46,459
we did at robust test because we had

00:09:44,899 --> 00:09:48,980
very specific needs we are very specific

00:09:46,459 --> 00:09:51,380
goal and we had to that's why we had to

00:09:48,980 --> 00:09:58,069
build the robots from scratch to fit in

00:09:51,380 --> 00:09:59,660
in our environment well here are well

00:09:58,069 --> 00:10:01,970
the benefits of using load balancer

00:09:59,660 --> 00:10:04,069
scalability that is the most important

00:10:01,970 --> 00:10:06,199
the most foremost thing for any growing

00:10:04,069 --> 00:10:09,319
application as your application demand

00:10:06,199 --> 00:10:10,819
increases you want to be able to satisfy

00:10:09,319 --> 00:10:12,620
all your customers how do you do that

00:10:10,819 --> 00:10:15,920
you can just add new service to your

00:10:12,620 --> 00:10:17,389
server cool so when you all you have to

00:10:15,920 --> 00:10:18,560
do for your scalability of your

00:10:17,389 --> 00:10:20,480
application is that you have to add

00:10:18,560 --> 00:10:22,430
servers to your server pool and just

00:10:20,480 --> 00:10:24,980
update your load balancer now it's going

00:10:22,430 --> 00:10:27,949
to start sending traffic to the new

00:10:24,980 --> 00:10:29,329
server in the server food it improves

00:10:27,949 --> 00:10:30,860
the server approves or server

00:10:29,329 --> 00:10:33,649
utilization and maximize availability

00:10:30,860 --> 00:10:35,089
well this is because well no server is a

00:10:33,649 --> 00:10:37,040
small server that's what that's what the

00:10:35,089 --> 00:10:38,510
load balancer says is because of no

00:10:37,040 --> 00:10:40,370
matter how small or how large your

00:10:38,510 --> 00:10:42,920
server is your load balancer is going to

00:10:40,370 --> 00:10:45,170
make sure that all the traffic is being

00:10:42,920 --> 00:10:46,579
distributed among these multiple servers

00:10:45,170 --> 00:10:49,370
depending proportionate to their sizes

00:10:46,579 --> 00:10:50,690
so if it improves the entire server

00:10:49,370 --> 00:10:53,510
utilization and maximize the

00:10:50,690 --> 00:10:55,190
availability of the system loeb answer

00:10:53,510 --> 00:10:56,540
can do other things than redirecting

00:10:55,190 --> 00:10:59,709
traffic this I've already mentioned or

00:10:56,540 --> 00:11:03,920
because I've told you about balance ng +

00:10:59,709 --> 00:11:06,230
f5 and all those Road balancers

00:11:03,920 --> 00:11:08,149
apartment that I do not know if you guys

00:11:06,230 --> 00:11:10,600
have heard but you might have seen this

00:11:08,149 --> 00:11:13,910
project called Mantid probably on github

00:11:10,600 --> 00:11:15,290
nobody oh well there's another load

00:11:13,910 --> 00:11:17,450
balancer project called mounted up on

00:11:15,290 --> 00:11:19,880
github well what it offers is it offers

00:11:17,450 --> 00:11:21,350
you a place it offers you a scenario

00:11:19,880 --> 00:11:23,149
where you can hold the client when the

00:11:21,350 --> 00:11:25,490
black back in service restart you can

00:11:23,149 --> 00:11:27,139
see how this is useful and also right

00:11:25,490 --> 00:11:29,779
now I'm always talking about well

00:11:27,139 --> 00:11:30,980
servers but in truth where the load

00:11:29,779 --> 00:11:35,000
balancer can communicate with any

00:11:30,980 --> 00:11:37,160
computing resource as such so two years

00:11:35,000 --> 00:11:39,980
ago when i was when i had another

00:11:37,160 --> 00:11:42,680
internship with another company I we had

00:11:39,980 --> 00:11:45,079
to do a disaster recovery or a risk

00:11:42,680 --> 00:11:46,730
management kind of application so what

00:11:45,079 --> 00:11:49,519
we had to do was we had to mimic every

00:11:46,730 --> 00:11:52,279
IO operation on one device on one disk

00:11:49,519 --> 00:11:54,290
to another disk so here also a load

00:11:52,279 --> 00:11:59,120
balancer would come into play because if

00:11:54,290 --> 00:12:00,589
you whatever I operations you're

00:11:59,120 --> 00:12:01,670
performing on one disk all you have to

00:12:00,589 --> 00:12:03,380
do is you have to milk it to the other

00:12:01,670 --> 00:12:04,970
day so if you are performing anything

00:12:03,380 --> 00:12:06,920
through the load buhl load balancer the

00:12:04,970 --> 00:12:08,029
load balancer will be capable of copying

00:12:06,920 --> 00:12:10,100
it and putting it through to the other

00:12:08,029 --> 00:12:11,810
disk thereby creating a backup disk so

00:12:10,100 --> 00:12:15,290
in case of a disaster if you lose one

00:12:11,810 --> 00:12:18,410
disk you always have a backup this and

00:12:15,290 --> 00:12:20,120
also you guys might have heard that well

00:12:18,410 --> 00:12:24,320
a couple of years ago when Michael

00:12:20,120 --> 00:12:27,500
Jackson died Google redirected also all

00:12:24,320 --> 00:12:29,240
queries regarding his or his death or to

00:12:27,500 --> 00:12:32,510
a edit page saying that well your

00:12:29,240 --> 00:12:34,579
request looks like a DDoS attack it it

00:12:32,510 --> 00:12:35,690
was because well though there were so

00:12:34,579 --> 00:12:37,579
many people pouring in for this

00:12:35,690 --> 00:12:40,040
information so many people asking why

00:12:37,579 --> 00:12:42,740
what was the cause of was the reason for

00:12:40,040 --> 00:12:44,839
Michael Jackson's death and so not so so

00:12:42,740 --> 00:12:46,550
you can see that even our load balancers

00:12:44,839 --> 00:12:48,949
have been capable of doing such tasks

00:12:46,550 --> 00:12:50,720
like no you can figure out if there are

00:12:48,949 --> 00:12:52,310
more there's more requests coming in and

00:12:50,720 --> 00:12:54,380
so they could also figure out that your

00:12:52,310 --> 00:12:56,000
system could probably be under attack so

00:12:54,380 --> 00:13:05,149
that way also increases security in that

00:12:56,000 --> 00:13:08,060
sense so to get into my project well the

00:13:05,149 --> 00:13:10,370
thing is we had to build the load

00:13:08,060 --> 00:13:12,500
balancer from scratch because it had to

00:13:10,370 --> 00:13:15,079
fit into our needs so i'll be explaining

00:13:12,500 --> 00:13:17,089
the entire project and i'll be

00:13:15,079 --> 00:13:17,690
talking about how we needed the load

00:13:17,089 --> 00:13:19,190
balancer

00:13:17,690 --> 00:13:23,270
and then i will get into the challenges

00:13:19,190 --> 00:13:24,800
we faced by building one in the

00:13:23,270 --> 00:13:26,450
beginning when we started the project we

00:13:24,800 --> 00:13:28,490
did not actually even know that we need

00:13:26,450 --> 00:13:30,050
the load balancer because initially we

00:13:28,490 --> 00:13:31,160
just thought that big is going to we

00:13:30,050 --> 00:13:33,290
don't need road bansa which is going to

00:13:31,160 --> 00:13:34,430
do some direct connections but when we

00:13:33,290 --> 00:13:36,290
started building only we realized that

00:13:34,430 --> 00:13:38,120
the load balancer is very essential it

00:13:36,290 --> 00:13:42,380
was a very necessary part of the entire

00:13:38,120 --> 00:13:44,060
application so the to understand this I

00:13:42,380 --> 00:13:46,370
let me go through the application as I

00:13:44,060 --> 00:13:48,170
so this is this is robust test this is

00:13:46,370 --> 00:13:51,770
the application which was developed in

00:13:48,170 --> 00:13:54,530
robust or the company itself so this

00:13:51,770 --> 00:13:56,300
basically it offers you a web interface

00:13:54,530 --> 00:13:58,820
and interface where you can test your

00:13:56,300 --> 00:14:00,980
mobile applications on the real Android

00:13:58,820 --> 00:14:02,510
devices so these devices which you see

00:14:00,980 --> 00:14:05,120
here they are real devices which are

00:14:02,510 --> 00:14:08,030
connected to the server back there so

00:14:05,120 --> 00:14:09,410
what you do is when you're how to test

00:14:08,030 --> 00:14:11,960
you test your application is you

00:14:09,410 --> 00:14:12,980
uploaded application or you or choose

00:14:11,960 --> 00:14:14,600
from a list of applications we were

00:14:12,980 --> 00:14:16,370
given already and then you choose the

00:14:14,600 --> 00:14:18,320
mobile device which is present here so

00:14:16,370 --> 00:14:21,620
once you're done with that you get into

00:14:18,320 --> 00:14:24,370
a beginning to another page where you're

00:14:21,620 --> 00:14:26,660
given is small screen which shows a

00:14:24,370 --> 00:14:27,830
emulation of the phone and which the

00:14:26,660 --> 00:14:29,540
real device which is connected to mind

00:14:27,830 --> 00:14:31,640
you so it's a real device whatever going

00:14:29,540 --> 00:14:33,530
to be testing on so and you can control

00:14:31,640 --> 00:14:35,150
these with your with your mouse and with

00:14:33,530 --> 00:14:37,160
your keyboard and you have statistics

00:14:35,150 --> 00:14:41,030
based on like memory usage cpu usage and

00:14:37,160 --> 00:14:44,270
network and etc so what we have here is

00:14:41,030 --> 00:14:46,250
so you may have all developed android

00:14:44,270 --> 00:14:50,510
applications or may not have done 200

00:14:46,250 --> 00:14:52,280
applications but you know that um when

00:14:50,510 --> 00:14:53,600
you develop an application you develop

00:14:52,280 --> 00:14:54,860
it for your phone you develop it further

00:14:53,600 --> 00:14:56,570
you know it works on your friends phone

00:14:54,860 --> 00:14:58,130
books on your phone but not necessary

00:14:56,570 --> 00:15:00,080
that it works on all the phones that are

00:14:58,130 --> 00:15:02,300
present there so well this gives you a

00:15:00,080 --> 00:15:04,520
place for you to like well test it out

00:15:02,300 --> 00:15:06,110
on multiple different phones so that you

00:15:04,520 --> 00:15:09,920
ensure that well your your applications

00:15:06,110 --> 00:15:11,300
working so well you might may I figured

00:15:09,920 --> 00:15:15,080
out like where the load balancer comes

00:15:11,300 --> 00:15:16,190
into play in this scenario because it's

00:15:15,080 --> 00:15:17,180
going to be the one which going to be

00:15:16,190 --> 00:15:21,050
communicating with all the mobile

00:15:17,180 --> 00:15:22,580
devices the back end so when I was not

00:15:21,050 --> 00:15:24,290
part of the content team was only part

00:15:22,580 --> 00:15:26,240
of the back in team so what I

00:15:24,290 --> 00:15:27,740
essentially did was I had my load

00:15:26,240 --> 00:15:29,870
balancer communicating with multiple

00:15:27,740 --> 00:15:31,459
mobile devices the back end and I would

00:15:29,870 --> 00:15:33,679
test it with a

00:15:31,459 --> 00:15:37,369
VNC viewer or something on my own I on

00:15:33,679 --> 00:15:39,709
the computer so what I needed basically

00:15:37,369 --> 00:15:41,929
was I had multiple devices the backend

00:15:39,709 --> 00:15:43,160
and they were all running droid VNC

00:15:41,929 --> 00:15:45,649
server or BM light server which is

00:15:43,160 --> 00:15:47,119
basically a driving server is open

00:15:45,649 --> 00:15:49,189
source if you guys won't look at it

00:15:47,119 --> 00:15:51,230
please go ahead and look at it so the

00:15:49,189 --> 00:15:52,519
droid B&C server our BM light server

00:15:51,230 --> 00:15:54,529
which is running on the boil devices and

00:15:52,519 --> 00:15:56,119
you had a VNC viewer running on your

00:15:54,529 --> 00:15:59,959
computer now if you wanted to emulate

00:15:56,119 --> 00:16:04,009
the phone on your screen or you just had

00:15:59,959 --> 00:16:05,329
to like give it the though where the the

00:16:04,009 --> 00:16:08,290
address of the phone basically the

00:16:05,329 --> 00:16:08,290
address and the port em to the phone

00:16:08,589 --> 00:16:12,860
well in my project although there were

00:16:11,360 --> 00:16:13,819
we had multiple back end or mobile

00:16:12,860 --> 00:16:15,769
device will be connected to the load

00:16:13,819 --> 00:16:18,439
balancer now the road by also had an

00:16:15,769 --> 00:16:21,740
internal database of telling the phone

00:16:18,439 --> 00:16:25,399
type and the various of the addresses of

00:16:21,740 --> 00:16:27,139
each mobile device for each client to to

00:16:25,399 --> 00:16:28,879
connect to one well device he had to

00:16:27,139 --> 00:16:30,860
give in the phone option and the cookie

00:16:28,879 --> 00:16:33,800
I'll tell you the reason for a cookie in

00:16:30,860 --> 00:16:36,110
a while so basically he had to given the

00:16:33,800 --> 00:16:37,040
phone option and then what the load

00:16:36,110 --> 00:16:38,209
balancer would do is it would look

00:16:37,040 --> 00:16:39,589
through the internal database and then

00:16:38,209 --> 00:16:43,279
it would patch it through to the mobile

00:16:39,589 --> 00:16:46,309
device initially when I did the load

00:16:43,279 --> 00:16:48,439
balancer project I was I was confused

00:16:46,309 --> 00:16:50,980
because all i really thought was that

00:16:48,439 --> 00:16:53,149
the load balancer the initial the only

00:16:50,980 --> 00:16:54,920
contribution to it all the other on the

00:16:53,149 --> 00:16:56,779
whole system was that it was hiding the

00:16:54,920 --> 00:16:58,819
information of the backend servers so

00:16:56,779 --> 00:17:00,199
initially when you guys must have also

00:16:58,819 --> 00:17:01,610
figured out that probably it going to be

00:17:00,199 --> 00:17:03,079
acting as a server and a client that is

00:17:01,610 --> 00:17:04,760
it's going to have a service apart and a

00:17:03,079 --> 00:17:06,559
client's apart so that it's going to act

00:17:04,760 --> 00:17:08,539
like a server to the client and then act

00:17:06,559 --> 00:17:10,339
like a client to the server and then

00:17:08,539 --> 00:17:12,949
pass information back but this is not

00:17:10,339 --> 00:17:15,289
true because that means you're actively

00:17:12,949 --> 00:17:16,880
involving your load balancer in the

00:17:15,289 --> 00:17:18,620
communication channel when you're doing

00:17:16,880 --> 00:17:20,659
that when another client comes in and

00:17:18,620 --> 00:17:22,850
asks for a request or the load balancer

00:17:20,659 --> 00:17:26,449
is so it's busy with the initial client

00:17:22,850 --> 00:17:28,669
already so that's why what we decided to

00:17:26,449 --> 00:17:31,279
do was we establish the session between

00:17:28,669 --> 00:17:33,049
the client and the server so now the

00:17:31,279 --> 00:17:34,789
load balancer is out of the

00:17:33,049 --> 00:17:36,649
communication channel and he's able to

00:17:34,789 --> 00:17:39,590
take requests from for like from other

00:17:36,649 --> 00:17:42,169
requests for other clients so here what

00:17:39,590 --> 00:17:44,450
we did was we had a request coming in

00:17:42,169 --> 00:17:44,960
and so depending on water phone type or

00:17:44,450 --> 00:17:47,929
he

00:17:44,960 --> 00:17:49,250
a the client chooses for the the load

00:17:47,929 --> 00:17:52,460
balancer makes the create session

00:17:49,250 --> 00:17:54,950
between the client and the mobile device

00:17:52,460 --> 00:17:57,230
and so you can emulate the mobile device

00:17:54,950 --> 00:17:58,700
on your computer screen and you can do

00:17:57,230 --> 00:18:01,700
whatever you want or whatever you want

00:17:58,700 --> 00:18:04,159
is fine so but the reason for the cookie

00:18:01,700 --> 00:18:05,840
was we had to create a sticky session

00:18:04,159 --> 00:18:07,789
implementation that was all so that's

00:18:05,840 --> 00:18:11,299
what we wanted non-road bandsaw because

00:18:07,789 --> 00:18:14,450
the entire application was built on a

00:18:11,299 --> 00:18:16,279
per device our billing so when when you

00:18:14,450 --> 00:18:18,470
are connected to the device and when you

00:18:16,279 --> 00:18:19,700
lose the when you close the close your

00:18:18,470 --> 00:18:21,590
browser and you come back to it you you

00:18:19,700 --> 00:18:24,890
you're essentially going to be connected

00:18:21,590 --> 00:18:26,029
back to the same device because well

00:18:24,890 --> 00:18:29,210
there was a per-device our building as I

00:18:26,029 --> 00:18:31,640
said so and also the fact that when you

00:18:29,210 --> 00:18:33,440
are connected with one device or the

00:18:31,640 --> 00:18:35,179
other clients cannot connect to that

00:18:33,440 --> 00:18:37,880
device because it's in use with your

00:18:35,179 --> 00:18:39,260
with one client already so when that was

00:18:37,880 --> 00:18:41,149
happening the entire database had to be

00:18:39,260 --> 00:18:43,490
updated saying that well this device is

00:18:41,149 --> 00:18:48,320
being used so well I can't get into it

00:18:43,490 --> 00:18:51,740
right now and also on so this is how we

00:18:48,320 --> 00:18:53,809
well basically built it and this is the

00:18:51,740 --> 00:18:56,210
basic gist of the project and well if

00:18:53,809 --> 00:18:58,640
you guys have any questions or queries

00:18:56,210 --> 00:19:00,440
please feel free to ask me I will answer

00:18:58,640 --> 00:19:04,190
to the best of my requests mmm so my

00:19:00,440 --> 00:19:06,289
knowledge oh sorry and an ideal device

00:19:04,190 --> 00:19:09,260
sorry I didn't get it how mobile device

00:19:06,289 --> 00:19:10,820
so well you have droid VNC server it so

00:19:09,260 --> 00:19:12,230
you have something called a droid VNC

00:19:10,820 --> 00:19:14,809
server a vm light server which is

00:19:12,230 --> 00:19:17,240
running on the mobile devices and what

00:19:14,809 --> 00:19:19,850
you have is essentially you will be

00:19:17,240 --> 00:19:21,230
passing your argument basing on well

00:19:19,850 --> 00:19:23,120
which phone type you want to connect to

00:19:21,230 --> 00:19:25,580
and you have all standard libraries you

00:19:23,120 --> 00:19:28,190
socket or OS re that's all I used for

00:19:25,580 --> 00:19:29,840
the project it was all those only thing

00:19:28,190 --> 00:19:33,200
HTTP represent make the session between

00:19:29,840 --> 00:19:36,350
the client and the device that's all how

00:19:33,200 --> 00:19:37,789
do you mean if there are five instance

00:19:36,350 --> 00:19:41,000
of rider device and you went to connect

00:19:37,789 --> 00:19:42,320
to win two of them are idle and three of

00:19:41,000 --> 00:19:45,080
them are BC how are you route between

00:19:42,320 --> 00:19:48,309
sorry how do you out between them I

00:19:45,080 --> 00:19:48,309
didn't get you

00:19:49,960 --> 00:19:54,559
if two of them were idle and awe and

00:19:52,279 --> 00:19:56,179
three of them are BC and a new request

00:19:54,559 --> 00:19:58,429
comes in yeah the database always

00:19:56,179 --> 00:20:00,890
updated right so suppose to two are busy

00:19:58,429 --> 00:20:04,130
right now so the databases as soon as

00:20:00,890 --> 00:20:06,049
you are you're the your mobile phone is

00:20:04,130 --> 00:20:07,549
in use the database is updated so now

00:20:06,049 --> 00:20:09,470
when the new request comes in it says

00:20:07,549 --> 00:20:11,090
that the data is mobile devices is

00:20:09,470 --> 00:20:13,279
active so it cannot participate in your

00:20:11,090 --> 00:20:20,710
calls so it's a natural database itself

00:20:13,279 --> 00:20:20,710
yeah as actually the database okay yeah

00:20:22,480 --> 00:20:28,540
hello yeah so you mentioned that use you

00:20:26,290 --> 00:20:31,240
give the IP address of the load balancer

00:20:28,540 --> 00:20:32,919
rather than the server's declines so

00:20:31,240 --> 00:20:35,260
let's suppose a client is sending a

00:20:32,919 --> 00:20:37,690
request to my blog yeah and there are 10

00:20:35,260 --> 00:20:39,910
servers in the back end the hosting my

00:20:37,690 --> 00:20:41,950
blog and a load balancer is balancing

00:20:39,910 --> 00:20:44,640
the request okay so a client send the

00:20:41,950 --> 00:20:46,660
request to my blog and the load balancer

00:20:44,640 --> 00:20:48,970
forwards the request back to one of the

00:20:46,660 --> 00:20:50,679
servers how does the load balancer knows

00:20:48,970 --> 00:20:52,419
that it has to again send the request

00:20:50,679 --> 00:20:54,760
back to the plane yeah exactly so that

00:20:52,419 --> 00:20:56,799
that's what the what that's what happens

00:20:54,760 --> 00:20:57,820
is that when the client or when when the

00:20:56,799 --> 00:21:00,220
load bands he gets a request from the

00:20:57,820 --> 00:21:01,809
client and now the load balancer figures

00:21:00,220 --> 00:21:03,730
out that which server it has to done

00:21:01,809 --> 00:21:05,470
that that till there it's done so after

00:21:03,730 --> 00:21:07,690
that's done it has tablish a session

00:21:05,470 --> 00:21:09,280
between the client and the road and the

00:21:07,690 --> 00:21:11,770
server now when you establish session

00:21:09,280 --> 00:21:13,510
again though the address and everything

00:21:11,770 --> 00:21:16,059
of the CEO of the server or anything is

00:21:13,510 --> 00:21:17,740
not given out so security is still

00:21:16,059 --> 00:21:20,740
maintained it's just a cyber session it

00:21:17,740 --> 00:21:26,380
it's also their client in the and the

00:21:20,740 --> 00:21:29,290
backend server yeah yeah yeah okay so I

00:21:26,380 --> 00:21:31,809
had a question regarding if a load

00:21:29,290 --> 00:21:34,090
balancer goes down how does yeah that's

00:21:31,809 --> 00:21:36,400
that's you make sure that load balancers

00:21:34,090 --> 00:21:39,010
always okay so we have lettuce that is

00:21:36,400 --> 00:21:41,140
basically this stuff yeah one more

00:21:39,010 --> 00:21:43,210
question yeah it might be an off topic

00:21:41,140 --> 00:21:45,370
but i want to know how do you implement

00:21:43,210 --> 00:21:47,620
i mean if i have a use case where a

00:21:45,370 --> 00:21:49,480
client needs to always present in one

00:21:47,620 --> 00:21:51,730
particular server for a country i mean

00:21:49,480 --> 00:21:54,100
there is a use case where a client has

00:21:51,730 --> 00:21:57,669
to be connected to a particular so yeah

00:21:54,100 --> 00:21:59,410
okay but the many requests coming up and

00:21:57,669 --> 00:22:01,150
you want to do a round robin but yeah

00:21:59,410 --> 00:22:04,720
along with that you need to have an IP

00:22:01,150 --> 00:22:07,000
hash so I p hash okay IP hash along with

00:22:04,720 --> 00:22:08,980
round room okay so how does that happen

00:22:07,000 --> 00:22:10,450
I mean is it oh I've not have not

00:22:08,980 --> 00:22:12,669
explored such options but I do know that

00:22:10,450 --> 00:22:14,650
there are multiple algorithms which are

00:22:12,669 --> 00:22:15,820
the Lopezes follow like round robin

00:22:14,650 --> 00:22:16,960
technique or least connections time

00:22:15,820 --> 00:22:19,799
least response time but i have not

00:22:16,960 --> 00:22:19,799
explored such options

00:22:28,340 --> 00:22:36,549
hey can you tell me sorry yeah I can

00:22:32,029 --> 00:22:36,549
hear it so have you faced this

00:22:41,660 --> 00:22:45,830
no no we didn't do any of those because

00:22:44,300 --> 00:22:47,420
we didn't have to maintain which is had

00:22:45,830 --> 00:22:49,250
like oh you know it can it into each

00:22:47,420 --> 00:22:51,020
server and we each kind of each mobile

00:22:49,250 --> 00:22:53,990
device and back we didn't know there was

00:22:51,020 --> 00:22:59,900
no reason for us to care about details

00:22:53,990 --> 00:23:01,280
or anything of the thing is the thing is

00:22:59,900 --> 00:23:02,900
it won't be there in our case because

00:23:01,280 --> 00:23:04,940
when one mobile device is connected

00:23:02,900 --> 00:23:06,110
another mobile device another server

00:23:04,940 --> 00:23:07,580
cannot another client cannot even

00:23:06,110 --> 00:23:15,050
request for that mobile device because

00:23:07,580 --> 00:23:16,280
it's already it is yeah yeah but my load

00:23:15,050 --> 00:23:19,340
balancer does not work that my load

00:23:16,280 --> 00:23:22,370
Vance's behind that ah yeah nor the

00:23:19,340 --> 00:23:26,630
application service here so why did you

00:23:22,370 --> 00:23:29,060
need to why did you need to develop your

00:23:26,630 --> 00:23:31,790
own load balancer what do in to work

00:23:29,060 --> 00:23:33,320
with it yeah yeah because we also tried

00:23:31,790 --> 00:23:34,760
actually we actually started with man

00:23:33,320 --> 00:23:36,590
threat we thought we'll put mounted in

00:23:34,760 --> 00:23:39,320
or will because that was open source and

00:23:36,590 --> 00:23:41,870
we thought we'll use mounted as our base

00:23:39,320 --> 00:23:44,600
but the thing was we had to handle data

00:23:41,870 --> 00:23:46,280
off like the mobile phone and what was

00:23:44,600 --> 00:23:48,020
that data had to be handled that data

00:23:46,280 --> 00:23:50,240
was not hydrol so we had to develop our

00:23:48,020 --> 00:23:52,310
own and we also had two implants the key

00:23:50,240 --> 00:23:55,160
session and so we did that sticky

00:23:52,310 --> 00:23:56,770
stations are I mean are handled by many

00:23:55,160 --> 00:23:59,420
of the load balance many other rows on

00:23:56,770 --> 00:24:01,310
balances but we have to handle the data

00:23:59,420 --> 00:24:03,020
or like the data of the phone what phone

00:24:01,310 --> 00:24:07,910
gives in what the VNC viewer gives back

00:24:03,020 --> 00:24:10,460
to the office yeah so to where is the

00:24:07,910 --> 00:24:12,860
response time of like the load balancer

00:24:10,460 --> 00:24:16,310
do you use any type type of caching to

00:24:12,860 --> 00:24:19,100
store like static content or no no no we

00:24:16,310 --> 00:24:21,350
don't response time well it depends on

00:24:19,100 --> 00:24:23,270
will the server response time if like if

00:24:21,350 --> 00:24:25,010
the server is more responsive that means

00:24:23,270 --> 00:24:27,290
your load balancer is going to choose I

00:24:25,010 --> 00:24:29,320
mean you can choose so that if you have

00:24:27,290 --> 00:24:32,240
a least response time protocol as your

00:24:29,320 --> 00:24:34,400
primary algorithm that your logo answer

00:24:32,240 --> 00:24:36,290
follows that means that it would it

00:24:34,400 --> 00:24:37,880
would choose a server which has less

00:24:36,290 --> 00:24:39,320
response time from the others we did not

00:24:37,880 --> 00:24:41,900
do anything particular to this because

00:24:39,320 --> 00:24:43,850
all our points or any particular

00:24:41,900 --> 00:24:45,440
algorithm you follow to distribute the

00:24:43,850 --> 00:24:47,360
load among the servers no they're not

00:24:45,440 --> 00:24:48,740
exactly where this is not exactly a load

00:24:47,360 --> 00:24:50,660
balanced be not exactly distributing a

00:24:48,740 --> 00:24:52,310
load in this novia sending requests

00:24:50,660 --> 00:24:55,940
based on which phone type they want to

00:24:52,310 --> 00:24:57,620
access so there is no balance of load

00:24:55,940 --> 00:24:58,700
such but then we have to we need the

00:24:57,620 --> 00:25:04,129
load balancer nevertheless for a

00:24:58,700 --> 00:25:06,080
disability okay thank you I want to

00:25:04,129 --> 00:25:07,909
understand what design things that you

00:25:06,080 --> 00:25:10,669
used in this one like for example for

00:25:07,909 --> 00:25:12,019
reusing connections or had you know

00:25:10,669 --> 00:25:14,570
taking them remember the connection

00:25:12,019 --> 00:25:17,840
footprint to be very low sorry that you

00:25:14,570 --> 00:25:19,909
so you are your your service or whatever

00:25:17,840 --> 00:25:23,509
they see the apt proxy thing is is

00:25:19,909 --> 00:25:25,700
facing the clients right yeah and you so

00:25:23,509 --> 00:25:29,870
it's kind of a single point and where

00:25:25,700 --> 00:25:31,789
every column so that I so did he any any

00:25:29,870 --> 00:25:33,950
design think that we had different

00:25:31,789 --> 00:25:36,799
threads running for different

00:25:33,950 --> 00:25:38,330
connections and so on I can't get in the

00:25:36,799 --> 00:25:41,389
technical details because the hundred

00:25:38,330 --> 00:25:44,240
development right now and it's a company

00:25:41,389 --> 00:25:46,039
products yeah so it's okay when I asked

00:25:44,240 --> 00:25:48,440
about like design techniques like the

00:25:46,039 --> 00:25:50,539
Apple for example did you use soccer to

00:25:48,440 --> 00:25:52,220
you yeah Oh a socket area actually it's

00:25:50,539 --> 00:25:55,129
very basic or subtle think you are

00:25:52,220 --> 00:25:57,860
reducing the footprint taking or taken

00:25:55,129 --> 00:26:00,200
so you have to respond back very fast

00:25:57,860 --> 00:26:01,759
yes that's the main goal yeah yeah did

00:26:00,200 --> 00:26:03,080
you do any bridges so we just implement

00:26:01,759 --> 00:26:05,210
session between those two and was pretty

00:26:03,080 --> 00:26:12,370
responsive is pretty fast anyway so we

00:26:05,210 --> 00:26:16,290
didn't mind after that sorry but

00:26:12,370 --> 00:26:16,290
yeah yeah Pilot Super Robot

00:26:29,700 --> 00:26:33,779
probably a context / it's still in

00:26:32,130 --> 00:26:35,940
development pace i as i told you so

00:26:33,779 --> 00:26:38,220
there's so much as I XP SP have done I

00:26:35,940 --> 00:26:40,500
have told you I this I did probably in

00:26:38,220 --> 00:26:45,320
2-3 weeks we finish this we finished how

00:26:40,500 --> 00:26:45,320
much I we could and then yeah so that

00:26:47,570 --> 00:26:57,919
engine X no no this is all custom bit

00:26:50,429 --> 00:26:57,919
yeah any more questions

00:27:00,140 --> 00:27:03,580

YouTube URL: https://www.youtube.com/watch?v=5jNQgX-bTeM


