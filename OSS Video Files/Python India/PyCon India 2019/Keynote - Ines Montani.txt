Title: Keynote - Ines Montani
Publication date: 2019-11-16
Playlist: PyCon India 2019
Description: 
	This talk was presented at PyCon India 2019, on Oct 12th - 13th, at the Chennai Trade Centre.
Website: https://in.pycon.org/2019
Captions: 
	00:00:04,680 --> 00:00:12,209
my talk today is called let them write :

00:00:08,309 --> 00:00:15,240
and what I'll be sharing with you is one

00:00:12,209 --> 00:00:17,369
not so weird trick for building awesome

00:00:15,240 --> 00:00:19,050
developer tools which is kind of what we

00:00:17,369 --> 00:00:21,750
do and I guess which is also something

00:00:19,050 --> 00:00:23,310
that many of you do even if you don't

00:00:21,750 --> 00:00:25,680
think of yourself as writing developer

00:00:23,310 --> 00:00:28,230
tools I would say we're all here because

00:00:25,680 --> 00:00:30,419
we either write in code or we somehow

00:00:28,230 --> 00:00:33,690
involved in some process that's about

00:00:30,419 --> 00:00:35,910
writing code and why do we write cold

00:00:33,690 --> 00:00:37,710
well we mostly write code so other

00:00:35,910 --> 00:00:39,899
people can use it maybe it's other

00:00:37,710 --> 00:00:42,149
people on your team maybe the code is

00:00:39,899 --> 00:00:44,399
gonna go into a product they'll be used

00:00:42,149 --> 00:00:47,460
by your customers or maybe you actually

00:00:44,399 --> 00:00:49,289
just writing code for future you who's

00:00:47,460 --> 00:00:52,050
gonna come back to that function you

00:00:49,289 --> 00:00:54,539
wrote in a few months and hope that

00:00:52,050 --> 00:00:58,589
you've documented it properly so you

00:00:54,539 --> 00:01:00,629
still know how to use it and well I also

00:00:58,589 --> 00:01:03,659
write code that's used by other people

00:01:00,629 --> 00:01:06,060
some of you might know me from my work

00:01:03,659 --> 00:01:07,680
on space II Spacey is an open source

00:01:06,060 --> 00:01:09,870
library for natural language processing

00:01:07,680 --> 00:01:11,850
in Python so basically if you have lots

00:01:09,870 --> 00:01:13,740
of text and you want to find out more

00:01:11,850 --> 00:01:16,440
about that text that goes a bit beyond

00:01:13,740 --> 00:01:19,290
just searching for keywords well then

00:01:16,440 --> 00:01:21,420
you can use Spacey and it's it's always

00:01:19,290 --> 00:01:23,730
a bit hard to estimate you search for

00:01:21,420 --> 00:01:26,370
open source projects but we we think

00:01:23,730 --> 00:01:30,060
that we have at least about 100,000

00:01:26,370 --> 00:01:32,550
developers using Spacey and we also have

00:01:30,060 --> 00:01:35,220
a growing ecosystem of plugins and

00:01:32,550 --> 00:01:37,620
extensions that you can use together

00:01:35,220 --> 00:01:39,030
with Spacey to really make the tool more

00:01:37,620 --> 00:01:42,690
powerful and extend it with

00:01:39,030 --> 00:01:44,460
functionality that you want and the

00:01:42,690 --> 00:01:46,800
other piece of software that I'm writing

00:01:44,460 --> 00:01:48,990
is called prodigy which is an annotation

00:01:46,800 --> 00:01:51,240
tool for creating training data for

00:01:48,990 --> 00:01:52,080
machine learning models so basically you

00:01:51,240 --> 00:01:54,630
know if you're training a machine

00:01:52,080 --> 00:01:56,220
learning model you want to or we usually

00:01:54,630 --> 00:01:58,200
want to show it at least some examples

00:01:56,220 --> 00:02:00,270
that kind of encode the behavior that

00:01:58,200 --> 00:02:02,610
you want it to learn and for that you

00:02:00,270 --> 00:02:04,770
typically need to label some examples

00:02:02,610 --> 00:02:06,570
try out a few things and run some

00:02:04,770 --> 00:02:09,530
experiments and prodigy makes that

00:02:06,570 --> 00:02:13,409
easier and we currently have over 2,500

00:02:09,530 --> 00:02:16,469
users of the tool and prodigies kind of

00:02:13,409 --> 00:02:18,180
a hybrid developer tool in that sense

00:02:16,469 --> 00:02:20,010
because it gives you both

00:02:18,180 --> 00:02:21,540
a modern web app that lets you move

00:02:20,010 --> 00:02:24,750
through the examples quickly and try

00:02:21,540 --> 00:02:28,440
lots of things and it also get gives you

00:02:24,750 --> 00:02:30,720
a scriptable back-end so you can you

00:02:28,440 --> 00:02:35,190
know really program custom workflows in

00:02:30,720 --> 00:02:37,680
Python and set up you know your your

00:02:35,190 --> 00:02:42,000
workflow and your annotation projects

00:02:37,680 --> 00:02:44,220
exactly the way you want you um we do

00:02:42,000 --> 00:02:47,190
all of this as part of our company

00:02:44,220 --> 00:02:48,810
explosion we really we a developer tools

00:02:47,190 --> 00:02:52,459
company so we specialize in building

00:02:48,810 --> 00:02:54,630
tools for other software developers and

00:02:52,459 --> 00:02:57,560
this year we've been able to grow our

00:02:54,630 --> 00:03:00,000
team and we currently six developers

00:02:57,560 --> 00:03:05,250
working on you know different parts of

00:03:00,000 --> 00:03:07,230
our stack and when I talk to people um I

00:03:05,250 --> 00:03:08,700
often this is one of the questions I get

00:03:07,230 --> 00:03:10,980
a lot which is like wow you're such a

00:03:08,700 --> 00:03:13,890
small team we used to be only two people

00:03:10,980 --> 00:03:15,420
only me and my co-founder Matt and how

00:03:13,890 --> 00:03:17,549
do you get so much done how do you build

00:03:15,420 --> 00:03:18,720
all these tools and like how do you

00:03:17,549 --> 00:03:21,239
build all these things that are quite

00:03:18,720 --> 00:03:23,420
actually quite useful how do you do it

00:03:21,239 --> 00:03:27,389
and of course they're like different

00:03:23,420 --> 00:03:29,400
sides to it but I would say one big part

00:03:27,389 --> 00:03:31,350
of it is that it's really when you're

00:03:29,400 --> 00:03:33,630
building software it's a lot it's not

00:03:31,350 --> 00:03:35,549
just about building lots of stuff it's

00:03:33,630 --> 00:03:39,060
about what you build and like how you

00:03:35,549 --> 00:03:41,549
choose to build it and in our case by

00:03:39,060 --> 00:03:44,849
making our tools programmable and

00:03:41,549 --> 00:03:48,060
extensible we're able to effectively you

00:03:44,849 --> 00:03:49,919
know get more done write less code while

00:03:48,060 --> 00:03:54,690
at the same time also making the people

00:03:49,919 --> 00:03:57,480
using our software a lot happier and the

00:03:54,690 --> 00:04:00,180
thing is well as developers write code

00:03:57,480 --> 00:04:03,389
and developer tools don't have to

00:04:00,180 --> 00:04:06,030
replace a developer developer tools are

00:04:03,389 --> 00:04:08,459
supposed to help a developer do their

00:04:06,030 --> 00:04:10,290
work better and be more productive and

00:04:08,459 --> 00:04:14,069
ultimately a developer is always going

00:04:10,290 --> 00:04:17,190
to develop but tools can help them and

00:04:14,069 --> 00:04:19,139
in a way actually the worst developer

00:04:17,190 --> 00:04:21,269
experience are these tools that try to

00:04:19,139 --> 00:04:24,000
be a fully integrated solution and kind

00:04:21,269 --> 00:04:25,470
of try to be everything so maybe you've

00:04:24,000 --> 00:04:28,140
experienced this at work where you had

00:04:25,470 --> 00:04:31,470
to use some tool and it you know it

00:04:28,140 --> 00:04:33,150
really try to give you one way to do

00:04:31,470 --> 00:04:35,070
everything and you couldn't customize it

00:04:33,150 --> 00:04:37,080
and when you needed a new feature you

00:04:35,070 --> 00:04:39,990
had to email support and then wait two

00:04:37,080 --> 00:04:42,600
weeks so they added a way to load from

00:04:39,990 --> 00:04:45,270
JSON files instead of CSV even though

00:04:42,600 --> 00:04:46,800
you're like God if I just had me know if

00:04:45,270 --> 00:04:49,770
I could write five lines of Python I

00:04:46,800 --> 00:04:52,320
could have done it myself but no wasn't

00:04:49,770 --> 00:04:54,210
possible and that's usually a type of

00:04:52,320 --> 00:04:56,490
experience that's like not very useful

00:04:54,210 --> 00:04:58,890
if you're building software like you

00:04:56,490 --> 00:05:01,850
know you can write code so you often

00:04:58,890 --> 00:05:04,020
writing code usually makes you happy and

00:05:01,850 --> 00:05:06,690
yeah what you can see is that this sort

00:05:04,020 --> 00:05:08,580
of this type of software isn't only

00:05:06,690 --> 00:05:11,040
better for the developers it's also

00:05:08,580 --> 00:05:13,140
actually significantly cheaper and

00:05:11,040 --> 00:05:16,530
easier to build so it's a win-win for

00:05:13,140 --> 00:05:18,210
both sides we get to you know we get to

00:05:16,530 --> 00:05:20,790
build software in a way that's way

00:05:18,210 --> 00:05:23,130
efficient even with a small team and our

00:05:20,790 --> 00:05:27,090
developers get tools that are actually

00:05:23,130 --> 00:05:29,370
very useful to them and so when you see

00:05:27,090 --> 00:05:31,650
this you might say well but if it's a

00:05:29,370 --> 00:05:33,930
tool for developers sound like all

00:05:31,650 --> 00:05:35,400
developer tools extensible because you

00:05:33,930 --> 00:05:36,720
know you write code with them if you

00:05:35,400 --> 00:05:41,040
could write code you can extend them

00:05:36,720 --> 00:05:44,340
right but the thing is yes in some way

00:05:41,040 --> 00:05:46,620
yes but also um no not all the libraries

00:05:44,340 --> 00:05:48,419
provide you with all the composable

00:05:46,620 --> 00:05:51,419
primitives you need you can still use a

00:05:48,419 --> 00:05:53,100
library and interact with code and still

00:05:51,419 --> 00:05:56,970
kind of have the same problems with

00:05:53,100 --> 00:05:58,890
extensibility and efficiency so I think

00:05:56,970 --> 00:06:03,180
it's maybe maybe it's best to show this

00:05:58,890 --> 00:06:03,720
using a small example so here's a bit of

00:06:03,180 --> 00:06:06,000
code

00:06:03,720 --> 00:06:09,270
imagine you've written a library that

00:06:06,000 --> 00:06:10,950
can take a piece of text and predict the

00:06:09,270 --> 00:06:13,190
part of speech tags in a text so

00:06:10,950 --> 00:06:15,750
basically what's a verb what's a noun

00:06:13,190 --> 00:06:17,550
and can give that back to you and that's

00:06:15,750 --> 00:06:20,130
like you know super useful to find out

00:06:17,550 --> 00:06:22,110
more about your text so you know you

00:06:20,130 --> 00:06:26,550
pass it a text and what you get back

00:06:22,110 --> 00:06:30,210
other verbs are going swimming should

00:06:26,550 --> 00:06:31,919
and go that's pretty nice but also

00:06:30,210 --> 00:06:34,020
looking at this you getting these verbs

00:06:31,919 --> 00:06:34,530
like are and should which are also

00:06:34,020 --> 00:06:36,840
called

00:06:34,530 --> 00:06:38,970
auxiliary verbs that don't really have

00:06:36,840 --> 00:06:40,410
you know don't really express any action

00:06:38,970 --> 00:06:43,140
so they're not very useful so you might

00:06:40,410 --> 00:06:45,310
want to say okay at least I wonder

00:06:43,140 --> 00:06:47,020
setting that lets people exclude these

00:06:45,310 --> 00:06:48,820
so I only have the action verbs that you

00:06:47,020 --> 00:06:50,830
know really tell me what's going on here

00:06:48,820 --> 00:06:53,950
so that's a bit better so we have go

00:06:50,830 --> 00:06:57,280
swimming and go that's nice if we're

00:06:53,950 --> 00:06:59,560
going swimming and go huh so it's kind

00:06:57,280 --> 00:07:01,120
of the same verb twice both going and go

00:06:59,560 --> 00:07:02,830
half the base form goal so it's kind of

00:07:01,120 --> 00:07:06,280
the same thing here so you might as well

00:07:02,830 --> 00:07:09,910
add a little flag that you can set to

00:07:06,280 --> 00:07:11,890
true that resolves over words back to

00:07:09,910 --> 00:07:15,790
their base form so it's a bit more

00:07:11,890 --> 00:07:17,980
useful and now we have go swim go that's

00:07:15,790 --> 00:07:20,200
pretty good but you have the same word

00:07:17,980 --> 00:07:21,880
twice so you might as well have a little

00:07:20,200 --> 00:07:24,760
flag that lets you if you need it

00:07:21,880 --> 00:07:26,440
exclude the duplicates so you know you

00:07:24,760 --> 00:07:29,680
have a useful function that does what

00:07:26,440 --> 00:07:32,980
you want to do but let's just take a

00:07:29,680 --> 00:07:35,650
step back for a second look at your

00:07:32,980 --> 00:07:37,660
function again is this really is this

00:07:35,650 --> 00:07:39,910
really the way you want to do it in your

00:07:37,660 --> 00:07:41,680
library we already have three different

00:07:39,910 --> 00:07:44,200
keyword arguments with like pretty

00:07:41,680 --> 00:07:46,450
cryptic names and also sometimes a bit

00:07:44,200 --> 00:07:50,380
hard to spell I never remember how to

00:07:46,450 --> 00:07:51,970
spell auxiliaries and by committing to

00:07:50,380 --> 00:07:53,890
this sort of API you're also committing

00:07:51,970 --> 00:07:55,450
to adding all other methods you're

00:07:53,890 --> 00:07:57,280
committing to adding something for all

00:07:55,450 --> 00:07:59,140
nouns you're committing to adding all

00:07:57,280 --> 00:08:01,630
kinds of other keyword arguments for

00:07:59,140 --> 00:08:04,990
anything else that you might want to do

00:08:01,630 --> 00:08:07,780
so maybe that's not you know the most

00:08:04,990 --> 00:08:08,740
efficient way you can do this and also

00:08:07,780 --> 00:08:10,570
you're gonna end up with super

00:08:08,740 --> 00:08:12,790
inconsistent API so you have to remember

00:08:10,570 --> 00:08:16,240
which method takes which arguments and

00:08:12,790 --> 00:08:19,600
that's usually pre annoying so here's an

00:08:16,240 --> 00:08:22,240
example of how we do this in Spacey so

00:08:19,600 --> 00:08:24,820
we you know you get you process a text

00:08:22,240 --> 00:08:27,010
you get this dog object back and that

00:08:24,820 --> 00:08:28,900
dog object holds all the annotations so

00:08:27,010 --> 00:08:31,570
all you have to know is how do I access

00:08:28,900 --> 00:08:34,090
a lemma how do I access a part of speech

00:08:31,570 --> 00:08:36,070
tag and you can write a simple list

00:08:34,090 --> 00:08:39,370
comprehension that just gets you all the

00:08:36,070 --> 00:08:40,390
verbs that you want and okay if we want

00:08:39,370 --> 00:08:42,340
to filter duplicates

00:08:40,390 --> 00:08:43,720
well that's luckily something we already

00:08:42,340 --> 00:08:46,180
have in a programming language we use

00:08:43,720 --> 00:08:47,800
because that's called a set so all

00:08:46,180 --> 00:08:51,070
you're doing is you call a set around it

00:08:47,800 --> 00:08:53,170
and what you get is a list of all verbs

00:08:51,070 --> 00:08:55,300
and if you need a list of all nouns well

00:08:53,170 --> 00:08:56,950
you change the part of speech tag here

00:08:55,300 --> 00:08:59,080
and you get the same thing you can

00:08:56,950 --> 00:09:02,850
customize it and you don't have to

00:08:59,080 --> 00:09:02,850
remember a bunch of keyword arguments

00:09:02,970 --> 00:09:07,930
but of course you know you might say

00:09:05,950 --> 00:09:11,920
well but that does mean I have to write

00:09:07,930 --> 00:09:13,390
a lot of the same code and if you know

00:09:11,920 --> 00:09:15,279
if I write myself where that way and do

00:09:13,390 --> 00:09:17,950
it like I do keep having to repeat the

00:09:15,279 --> 00:09:19,750
same call so you know things like that

00:09:17,950 --> 00:09:23,339
why can't the library to do things like

00:09:19,750 --> 00:09:25,390
that well the set of things like that is

00:09:23,339 --> 00:09:27,459
probably bigger than you think and it

00:09:25,390 --> 00:09:29,110
also keeps growing and keeps changing so

00:09:27,459 --> 00:09:31,750
you'll have to think of all of that and

00:09:29,110 --> 00:09:35,260
that's gonna be pretty difficult because

00:09:31,750 --> 00:09:36,370
here's a quick example so another thing

00:09:35,260 --> 00:09:37,839
that might be super common in your

00:09:36,370 --> 00:09:39,760
library is that you need to load data

00:09:37,839 --> 00:09:42,160
you always need to load text and data

00:09:39,760 --> 00:09:45,100
from somewhere so you built this low

00:09:42,160 --> 00:09:47,560
data function you okay the most common

00:09:45,100 --> 00:09:49,360
things are Jason CSV you might as well

00:09:47,560 --> 00:09:52,779
do plain text so you're writing a lotus

00:09:49,360 --> 00:09:55,450
for that pretty easy then okay many

00:09:52,779 --> 00:09:57,839
users also store text in databases so

00:09:55,450 --> 00:10:01,240
you might as well add the most common

00:09:57,839 --> 00:10:02,500
databases that people use but so as

00:10:01,240 --> 00:10:04,480
people start using your tool and it

00:10:02,500 --> 00:10:06,220
becomes more popular inevitably you're

00:10:04,480 --> 00:10:08,200
gonna get some questions like oh does it

00:10:06,220 --> 00:10:10,270
support MongoDB what would it be quite

00:10:08,200 --> 00:10:13,660
popular you know I can only use it if it

00:10:10,270 --> 00:10:15,610
supports so cool you go add a load

00:10:13,660 --> 00:10:16,870
of a now your users happy and they

00:10:15,610 --> 00:10:20,230
can use MongoDB

00:10:16,870 --> 00:10:21,610
but of course you know this space is

00:10:20,230 --> 00:10:23,649
constantly changing and maybe in a

00:10:21,610 --> 00:10:25,180
month's time you have a user asking you

00:10:23,649 --> 00:10:26,709
oh this is really new framework on the

00:10:25,180 --> 00:10:29,950
block it's called unicorn DB it's a

00:10:26,709 --> 00:10:31,420
whole new paradigm for using databases

00:10:29,950 --> 00:10:32,770
and it's like completely different and

00:10:31,420 --> 00:10:34,720
it's what all the cool kids use now

00:10:32,770 --> 00:10:37,899
could you please the integrate unicorn

00:10:34,720 --> 00:10:40,270
DB so you know you start reading your

00:10:37,899 --> 00:10:43,149
Doc's for unicorn DB start like thinking

00:10:40,270 --> 00:10:46,020
about the best practices because as with

00:10:43,149 --> 00:10:48,250
any new framework people you know use

00:10:46,020 --> 00:10:49,480
software that promises a new paradigm

00:10:48,250 --> 00:10:52,089
they often also very very opinionated

00:10:49,480 --> 00:10:53,920
about how you do things and I feel like

00:10:52,089 --> 00:10:55,779
also people are into databases also

00:10:53,920 --> 00:10:57,190
usually quite opinionated about how they

00:10:55,779 --> 00:10:59,260
want their stuff done so you know you

00:10:57,190 --> 00:11:00,339
don't want to disappoint them and while

00:10:59,260 --> 00:11:02,860
you're still reading the docs here

00:11:00,339 --> 00:11:05,050
there's a new and yet another new

00:11:02,860 --> 00:11:08,470
version there's dual core DB now so you

00:11:05,050 --> 00:11:10,000
also have to support that and yeah so if

00:11:08,470 --> 00:11:11,829
we take if we take another step back

00:11:10,000 --> 00:11:12,440
here you know while you're you know

00:11:11,829 --> 00:11:15,170
you're reading the

00:11:12,440 --> 00:11:17,540
for unicorn DB and you only be and you

00:11:15,170 --> 00:11:19,730
get the sinking feeling that like sooner

00:11:17,540 --> 00:11:22,129
or later they'll be tricorn DB that you

00:11:19,730 --> 00:11:24,079
also have to support and you you're

00:11:22,129 --> 00:11:25,730
wasting a lot of time trying to write

00:11:24,079 --> 00:11:27,829
things for all these integrations that

00:11:25,730 --> 00:11:30,529
like you use this one and probably

00:11:27,829 --> 00:11:33,079
afterwards you get a few angry issues on

00:11:30,529 --> 00:11:34,759
github by duo corn users complaining

00:11:33,079 --> 00:11:36,800
that you're not following the best

00:11:34,759 --> 00:11:39,680
practices and they can't use their stuff

00:11:36,800 --> 00:11:43,339
and that your software sucks so if

00:11:39,680 --> 00:11:46,250
instead of doing all of that we did

00:11:43,339 --> 00:11:49,189
something like this that would actually

00:11:46,250 --> 00:11:51,649
mail make the developers much easier and

00:11:49,189 --> 00:11:53,300
solve this problem in a much more

00:11:51,649 --> 00:11:55,160
straightforward way because instead of

00:11:53,300 --> 00:11:57,889
your library taking care of all of this

00:11:55,160 --> 00:11:59,870
loading you can just get let people pass

00:11:57,889 --> 00:12:02,089
in a function and so all the very

00:11:59,870 --> 00:12:04,910
opinionated unicorn DB users can just

00:12:02,089 --> 00:12:08,269
write their own function that loads

00:12:04,910 --> 00:12:10,459
their data and yields data in your

00:12:08,269 --> 00:12:12,920
format that your application can consume

00:12:10,459 --> 00:12:15,050
so it's really a win-win and this is not

00:12:12,920 --> 00:12:16,759
this is not the lazy way like it might

00:12:15,050 --> 00:12:18,110
feel like oh I'm kind of cheating here

00:12:16,759 --> 00:12:19,550
because I'm letting the user do all the

00:12:18,110 --> 00:12:21,649
work but like from the users perspective

00:12:19,550 --> 00:12:24,620
they're like great I don't have to trust

00:12:21,649 --> 00:12:26,899
some person with the implementation I

00:12:24,620 --> 00:12:28,730
can just do it I know how it works I'll

00:12:26,899 --> 00:12:31,189
plug that in and immediately it works

00:12:28,730 --> 00:12:35,269
for any arbitrary thing I might be using

00:12:31,189 --> 00:12:38,689
and if you kind of if you think outside

00:12:35,269 --> 00:12:40,130
of the framework it's really you know

00:12:38,689 --> 00:12:41,480
developers if developers can help

00:12:40,130 --> 00:12:43,399
themselves they're much happier than if

00:12:41,480 --> 00:12:44,959
they have to file a support request like

00:12:43,399 --> 00:12:47,389
if if you know if you can just write a

00:12:44,959 --> 00:12:48,829
few lines of Python to get something

00:12:47,389 --> 00:12:51,079
done that you want that's much easier

00:12:48,829 --> 00:12:54,380
than you know having a framework that

00:12:51,079 --> 00:12:56,930
you use support everything and that also

00:12:54,380 --> 00:12:59,240
means that the question about what does

00:12:56,930 --> 00:13:00,740
it support what can it do kind of shifts

00:12:59,240 --> 00:13:03,920
from the idea of does your tool

00:13:00,740 --> 00:13:06,019
integrate with something towards does

00:13:03,920 --> 00:13:08,389
Bill can you do whatever you want to do

00:13:06,019 --> 00:13:09,980
in Python and that's also often for

00:13:08,389 --> 00:13:11,360
example for tools like prodigy what we

00:13:09,980 --> 00:13:14,329
tell people if they're like oh does it

00:13:11,360 --> 00:13:16,279
support insert some technology here well

00:13:14,329 --> 00:13:17,750
like well can you do whatever you want

00:13:16,279 --> 00:13:19,430
to do in Python and then people are like

00:13:17,750 --> 00:13:21,680
yeah of course I can I do that all the

00:13:19,430 --> 00:13:23,050
time and we're like well then most

00:13:21,680 --> 00:13:25,910
likely you'll be able to use it because

00:13:23,050 --> 00:13:30,710
you can just write a function that does

00:13:25,910 --> 00:13:33,290
and plug it in and put maybe put in a

00:13:30,710 --> 00:13:35,300
slightly different way mostly you know

00:13:33,290 --> 00:13:36,560
when people think about like developing

00:13:35,300 --> 00:13:39,020
new features and building new things

00:13:36,560 --> 00:13:41,690
what people are mostly worried about is

00:13:39,020 --> 00:13:43,280
reinventing the wheel which is you know

00:13:41,690 --> 00:13:44,570
a valid concern you don't want to you

00:13:43,280 --> 00:13:46,910
know keep reinventing the whole thing

00:13:44,570 --> 00:13:49,430
that already exists and make it harder

00:13:46,910 --> 00:13:50,990
and like less maintainable but I think

00:13:49,430 --> 00:13:52,610
what we really you know what's what's

00:13:50,990 --> 00:13:55,550
much worse and much a much much bigger

00:13:52,610 --> 00:13:57,350
problem is reinventing the world you are

00:13:55,550 --> 00:14:00,110
reinventing the way everything is done

00:13:57,350 --> 00:14:02,720
and everyone else has to adapt to how

00:14:00,110 --> 00:14:06,140
you doing it and every question becomes

00:14:02,720 --> 00:14:08,540
about well can I use whatever I want to

00:14:06,140 --> 00:14:09,950
use on your route and you know you're

00:14:08,540 --> 00:14:13,160
defining the constraints and that's

00:14:09,950 --> 00:14:15,230
that's really I think you know one of

00:14:13,160 --> 00:14:17,180
the much bigger concerns that you know

00:14:15,230 --> 00:14:20,570
you should keep in mind when developing

00:14:17,180 --> 00:14:22,910
software and maybe you know this might

00:14:20,570 --> 00:14:24,740
still sound a bit abstract and so I've

00:14:22,910 --> 00:14:26,210
prepared a few small examples that show

00:14:24,740 --> 00:14:28,700
how really you know you quite can quite

00:14:26,210 --> 00:14:31,250
easily program behaviors in the code

00:14:28,700 --> 00:14:34,340
that you write in a way that lets other

00:14:31,250 --> 00:14:37,190
developers program your tool and that

00:14:34,340 --> 00:14:39,980
makes them happy and lets them do what

00:14:37,190 --> 00:14:42,680
any and the most obvious one here is of

00:14:39,980 --> 00:14:44,420
course callback functions I feel like

00:14:42,680 --> 00:14:46,040
all that functions you kind of they kind

00:14:44,420 --> 00:14:47,870
of got a bit of a bad reputation because

00:14:46,040 --> 00:14:49,760
it's it's kind of easy to overdo it and

00:14:47,870 --> 00:14:52,730
make it way too complex and then you end

00:14:49,760 --> 00:14:54,770
up in callback hell and you kind of you

00:14:52,730 --> 00:14:56,570
don't know what's going on anymore but I

00:14:54,770 --> 00:14:59,380
think if it's done well and if it's

00:14:56,570 --> 00:15:02,650
simple it can be a very effective way of

00:14:59,380 --> 00:15:05,180
letting your user do custom stuff within

00:15:02,650 --> 00:15:08,900
the software you're writing so for

00:15:05,180 --> 00:15:10,040
instance here we have a callback for we

00:15:08,900 --> 00:15:11,960
have a function that takes a callback

00:15:10,040 --> 00:15:13,850
that's called an update and it receives

00:15:11,960 --> 00:15:17,090
one argument which is some status and

00:15:13,850 --> 00:15:18,920
lets the user execute any arbitrary code

00:15:17,090 --> 00:15:20,420
that they might want to execute when

00:15:18,920 --> 00:15:25,130
that happens so that's very

00:15:20,420 --> 00:15:26,720
straightforward another example is what

00:15:25,130 --> 00:15:28,220
we call function registries that's

00:15:26,720 --> 00:15:32,510
actually something we've started using

00:15:28,220 --> 00:15:34,190
all across our libraries which is

00:15:32,510 --> 00:15:37,130
basically the idea is that you know you

00:15:34,190 --> 00:15:39,260
can use for example a decorator that's

00:15:37,130 --> 00:15:41,990
provided by a library that you

00:15:39,260 --> 00:15:44,750
and you can register functions like in

00:15:41,990 --> 00:15:47,810
this case a custom loader assign it a

00:15:44,750 --> 00:15:50,560
name and the library knows what to do

00:15:47,810 --> 00:15:53,870
with it and if you want to load from

00:15:50,560 --> 00:15:55,520
unicorn that's all you know you have to

00:15:53,870 --> 00:15:59,030
tell the application you register your

00:15:55,520 --> 00:16:00,830
loader and it could just run whatever

00:15:59,030 --> 00:16:02,450
code and you don't need to you know you

00:16:00,830 --> 00:16:05,300
don't need to monkey pod patch anything

00:16:02,450 --> 00:16:07,490
or you know even submit a pull request

00:16:05,300 --> 00:16:09,560
to hope that someone integrates your

00:16:07,490 --> 00:16:11,810
stuff it just can all happen under the

00:16:09,560 --> 00:16:14,660
hood and it's also very clean and very

00:16:11,810 --> 00:16:16,370
independent so if you can write a unit

00:16:14,660 --> 00:16:17,930
test for that function in your code base

00:16:16,370 --> 00:16:19,880
that's pretty much completely

00:16:17,930 --> 00:16:24,320
independent of the library you use and

00:16:19,880 --> 00:16:25,910
make sure it works and the next one

00:16:24,320 --> 00:16:29,360
that's actually something I've actually

00:16:25,910 --> 00:16:31,520
never used this in any of our tools but

00:16:29,360 --> 00:16:33,770
I'm kind of keen to give it a try and

00:16:31,520 --> 00:16:34,910
it's also something that's yet to go

00:16:33,770 --> 00:16:37,520
it's it's I think it's kind of

00:16:34,910 --> 00:16:39,770
little-known a little known concept even

00:16:37,520 --> 00:16:42,710
though it's been around since Python 3

00:16:39,770 --> 00:16:45,620
for and the idea is that often you have

00:16:42,710 --> 00:16:47,360
functions that take different you know

00:16:45,620 --> 00:16:49,340
different input types it's like yeah you

00:16:47,360 --> 00:16:51,770
know an argument can be an indoor string

00:16:49,340 --> 00:16:53,780
and which I think normally we've maybe

00:16:51,770 --> 00:16:55,100
learned that yeah this is not good and

00:16:53,780 --> 00:16:57,770
it shouldn't but like sometimes you

00:16:55,100 --> 00:16:59,090
can't avoid it and usually what you

00:16:57,770 --> 00:17:01,100
would then do in your function is he

00:16:59,090 --> 00:17:02,600
would write some type checks which again

00:17:01,100 --> 00:17:04,550
also we all know it's kind of difficult

00:17:02,600 --> 00:17:07,100
and annoying and like also something you

00:17:04,550 --> 00:17:09,440
shouldn't be doing so the idea here is

00:17:07,100 --> 00:17:12,530
that we actually you get to define

00:17:09,440 --> 00:17:15,890
different variations for different types

00:17:12,530 --> 00:17:18,260
so in the context of extending an

00:17:15,890 --> 00:17:20,870
application you could use this to

00:17:18,260 --> 00:17:22,880
register your own custom types so of a

00:17:20,870 --> 00:17:24,440
loader you want to take let's say you're

00:17:22,880 --> 00:17:26,840
working with pandas which works with

00:17:24,440 --> 00:17:28,670
data frames and if the tool you're using

00:17:26,840 --> 00:17:31,790
doesn't yet support that you could just

00:17:28,670 --> 00:17:35,510
register add variation for that input

00:17:31,790 --> 00:17:37,700
type you make it load a data frame and

00:17:35,510 --> 00:17:39,350
then even maybe you want to submit a

00:17:37,700 --> 00:17:42,260
pull request and like push that upstream

00:17:39,350 --> 00:17:44,480
maybe you don't but it's basically or

00:17:42,260 --> 00:17:47,930
you know you unicorn DB object it's just

00:17:44,480 --> 00:17:49,880
an easy way for the user to extend by

00:17:47,930 --> 00:17:52,370
writing their own code without having to

00:17:49,880 --> 00:17:54,500
kind of hack into the library

00:17:52,370 --> 00:17:55,880
and the next one that's actually

00:17:54,500 --> 00:17:58,909
something we use a lot and I think it's

00:17:55,880 --> 00:18:02,360
like it's it's a really great way to

00:17:58,909 --> 00:18:03,440
make tools extensible and I don't know

00:18:02,360 --> 00:18:05,450
if you've worked with entry points

00:18:03,440 --> 00:18:08,630
before but the idea is that entry points

00:18:05,450 --> 00:18:10,880
let one pison package advertise a

00:18:08,630 --> 00:18:14,630
function to another package that's

00:18:10,880 --> 00:18:16,010
installed in the same environment so for

00:18:14,630 --> 00:18:19,880
example here we have the entry point

00:18:16,010 --> 00:18:22,460
Spacey factories and that point group

00:18:19,880 --> 00:18:24,649
and we defined a component and a

00:18:22,460 --> 00:18:27,500
function as in our package and in space

00:18:24,649 --> 00:18:29,809
II well when it's basically loads Spacey

00:18:27,500 --> 00:18:32,870
will check what entry points are

00:18:29,809 --> 00:18:34,730
advertised by other packages and if they

00:18:32,870 --> 00:18:35,929
exist they're going to be loaded and

00:18:34,730 --> 00:18:38,059
that's all going to happen automatically

00:18:35,929 --> 00:18:39,260
if you have these packages installed so

00:18:38,059 --> 00:18:41,179
you're basically you don't have to call

00:18:39,260 --> 00:18:42,260
into Spacey you don't have to cook you

00:18:41,179 --> 00:18:44,870
know you don't have to register anything

00:18:42,260 --> 00:18:47,120
it just works and it's also a great way

00:18:44,870 --> 00:18:48,950
for one library to enter easily

00:18:47,120 --> 00:18:52,669
interoperate with a lot of the library

00:18:48,950 --> 00:18:55,220
and probably maybe one you might have

00:18:52,669 --> 00:18:56,990
heard of it by the console scripts which

00:18:55,220 --> 00:18:59,360
is typically how you you know register

00:18:56,990 --> 00:19:01,360
command line scripts but you can also

00:18:59,360 --> 00:19:03,260
use that for like completely custom

00:19:01,360 --> 00:19:06,890
functionality and I think it's pretty

00:19:03,260 --> 00:19:08,899
cool and finally one thing that we see a

00:19:06,890 --> 00:19:12,289
lot which I think introduces a lot of

00:19:08,899 --> 00:19:15,559
unwanted complexity is if your library

00:19:12,289 --> 00:19:18,649
or your code takes completely takes over

00:19:15,559 --> 00:19:21,230
the iOS or loading the data for example

00:19:18,649 --> 00:19:23,809
it takes a file path and opens the file

00:19:21,230 --> 00:19:25,429
and does everything automatically

00:19:23,809 --> 00:19:26,779
because that means you know if you don't

00:19:25,429 --> 00:19:28,220
want to load from a file you have to

00:19:26,779 --> 00:19:29,929
create a temporary file you have to

00:19:28,220 --> 00:19:32,090
write to disk and all of that is pretty

00:19:29,929 --> 00:19:35,179
annoying so instead if you can make it

00:19:32,090 --> 00:19:37,039
either take an open file or if you can

00:19:35,179 --> 00:19:39,350
actually make it take the config you can

00:19:37,039 --> 00:19:41,120
say hey look loading from a JSON file

00:19:39,350 --> 00:19:44,029
loading from a llamó file all of that is

00:19:41,120 --> 00:19:45,470
a solve problem let's let the user open

00:19:44,029 --> 00:19:47,179
a file if they don't know how to do it

00:19:45,470 --> 00:19:49,549
they can probably find an answer online

00:19:47,179 --> 00:19:51,409
by easily and your library doesn't have

00:19:49,549 --> 00:19:53,890
to deal with all of that that can

00:19:51,409 --> 00:19:56,179
potentially you know cause problems and

00:19:53,890 --> 00:19:58,820
to give you you know something an

00:19:56,179 --> 00:20:00,919
example of this in action here's the

00:19:58,820 --> 00:20:03,740
recipe script from our library prodigy

00:20:00,919 --> 00:20:05,460
again and we also one thing we do it

00:20:03,740 --> 00:20:07,320
here's well we have an

00:20:05,460 --> 00:20:09,419
we have a decorator that registers the

00:20:07,320 --> 00:20:12,779
functions of by just adding prodigy

00:20:09,419 --> 00:20:14,580
recipe we can tell prodigy hey this is a

00:20:12,779 --> 00:20:16,169
recipe called my recipe and it'd be

00:20:14,580 --> 00:20:18,570
available on the command line and you

00:20:16,169 --> 00:20:20,429
can also use entry points for that so

00:20:18,570 --> 00:20:22,710
another thing we do is we let the users

00:20:20,429 --> 00:20:24,600
load their files if they need to load

00:20:22,710 --> 00:20:27,539
from CSV maybe they need to load from

00:20:24,600 --> 00:20:29,820
Unicorn dB we don't care we can provide

00:20:27,539 --> 00:20:32,059
some helpers for this but the user the

00:20:29,820 --> 00:20:35,490
user can note for data however they want

00:20:32,059 --> 00:20:36,929
ultimately all we want is an iterable of

00:20:35,490 --> 00:20:40,590
Dix it can be a list it can be a

00:20:36,929 --> 00:20:42,210
generator prodigy doesn't care you just

00:20:40,590 --> 00:20:44,100
yeah you just need to provide it somehow

00:20:42,210 --> 00:20:46,260
and how you create how you provide it is

00:20:44,100 --> 00:20:48,330
up to you if it's a generator function

00:20:46,260 --> 00:20:51,539
you can use a model in the loop you can

00:20:48,330 --> 00:20:54,330
respond to external state and as long as

00:20:51,539 --> 00:20:56,700
you yield dictionaries in the same

00:20:54,330 --> 00:21:00,450
format you can use them and set it up

00:20:56,700 --> 00:21:03,029
how you want and we also give you this

00:21:00,450 --> 00:21:04,649
also a callback function example here so

00:21:03,029 --> 00:21:07,230
this function is called whenever we

00:21:04,649 --> 00:21:09,360
receive new answers or new annotations

00:21:07,230 --> 00:21:12,690
from the server and that's can execute

00:21:09,360 --> 00:21:15,480
anything from logging State to updating

00:21:12,690 --> 00:21:18,000
a model and we just pass that in and if

00:21:15,480 --> 00:21:19,770
it's there and prodigy can use it but

00:21:18,000 --> 00:21:21,029
the aspects of the tool that I think has

00:21:19,770 --> 00:21:22,799
really made it easier to develop these

00:21:21,029 --> 00:21:24,360
things and support a variety of use

00:21:22,799 --> 00:21:26,100
cases and I also think that if you're

00:21:24,360 --> 00:21:28,020
building tools that other people use

00:21:26,100 --> 00:21:29,940
this can really make it easier for you

00:21:28,020 --> 00:21:32,700
to get more done focus on doing the

00:21:29,940 --> 00:21:36,270
actual development work and make the

00:21:32,700 --> 00:21:37,710
users happier but of course there's

00:21:36,270 --> 00:21:39,360
always you know you're usually if you're

00:21:37,710 --> 00:21:41,880
developing software you're usually not

00:21:39,360 --> 00:21:43,649
the only person making the decisions and

00:21:41,880 --> 00:21:45,570
even as few as a developer think hey

00:21:43,649 --> 00:21:47,520
that's how we should do it let's spend

00:21:45,570 --> 00:21:49,919
less time on trying to build every

00:21:47,520 --> 00:21:52,470
little feature and like build something

00:21:49,919 --> 00:21:54,539
that our users can extend program and

00:21:52,470 --> 00:21:56,370
work with there so there might be other

00:21:54,539 --> 00:21:58,350
people you have to convince and you

00:21:56,370 --> 00:22:00,659
might you know get some pushback so how

00:21:58,350 --> 00:22:03,210
do you really convince your company your

00:22:00,659 --> 00:22:05,700
team whoever else other stakeholders

00:22:03,210 --> 00:22:07,860
that like you know you should we should

00:22:05,700 --> 00:22:10,770
be approaching developer tools that way

00:22:07,860 --> 00:22:13,020
oh so one thing one thing you might hear

00:22:10,770 --> 00:22:14,850
like someone might say is like well okay

00:22:13,020 --> 00:22:16,440
so this all like all this cold and stuff

00:22:14,850 --> 00:22:17,820
and all these like writing things it's

00:22:16,440 --> 00:22:19,290
not it's not that much code but like it

00:22:17,820 --> 00:22:20,790
still looks really complicated and

00:22:19,290 --> 00:22:22,860
the system is just easier and we just

00:22:20,790 --> 00:22:24,600
have a few buttons that's just so much

00:22:22,860 --> 00:22:27,360
easier to demo if you you know want to

00:22:24,600 --> 00:22:29,070
demo it internally to your team maybe to

00:22:27,360 --> 00:22:31,110
a customer maybe you're selling software

00:22:29,070 --> 00:22:33,720
so you know why can't we just make it

00:22:31,110 --> 00:22:36,480
easier so it's easier to demo anything

00:22:33,720 --> 00:22:39,570
is if the audience of the tool is

00:22:36,480 --> 00:22:41,040
developers and you can you know get the

00:22:39,570 --> 00:22:42,600
developers involved that's gonna really

00:22:41,040 --> 00:22:45,030
going to be a win-win situation for both

00:22:42,600 --> 00:22:47,790
sides and we we also see this a lot with

00:22:45,030 --> 00:22:50,040
prodigy at like we often you know if we

00:22:47,790 --> 00:22:51,510
do demos or show the tools to developers

00:22:50,040 --> 00:22:53,490
they're like oh great it's finally you

00:22:51,510 --> 00:22:55,020
know I can see how I can program with it

00:22:53,490 --> 00:22:56,700
and I can see how I can use it and

00:22:55,020 --> 00:22:58,500
that's much more valuable than like

00:22:56,700 --> 00:23:00,180
showing something that's really really

00:22:58,500 --> 00:23:01,620
simple to management to things oh yeah

00:23:00,180 --> 00:23:03,750
like our developers can click two

00:23:01,620 --> 00:23:04,440
buttons and then they're done well it's

00:23:03,750 --> 00:23:06,480
never that easy

00:23:04,440 --> 00:23:08,400
so we've already we've heard from many

00:23:06,480 --> 00:23:10,290
developers who are like arthas's who

00:23:08,400 --> 00:23:11,430
ended up going with prodigy and this is

00:23:10,290 --> 00:23:14,130
so much nicer than a lot of other

00:23:11,430 --> 00:23:16,110
solutions they were demoed that really

00:23:14,130 --> 00:23:19,260
focused way too much on the simplicity

00:23:16,110 --> 00:23:21,420
of usage and yeah from a developer

00:23:19,260 --> 00:23:23,280
perspective just look like well can you

00:23:21,420 --> 00:23:25,370
really you know how do I extend them do

00:23:23,280 --> 00:23:29,910
I always have to file support requests

00:23:25,370 --> 00:23:32,850
sounds difficult so if you and if you

00:23:29,910 --> 00:23:34,770
selling software the other thing is well

00:23:32,850 --> 00:23:37,350
um you know you want to you want to win

00:23:34,770 --> 00:23:38,910
customers and you also want to want the

00:23:37,350 --> 00:23:40,890
customers to be happy and your custom is

00:23:38,910 --> 00:23:43,470
always gonna ask for features your

00:23:40,890 --> 00:23:46,260
customers want stuff and the best way to

00:23:43,470 --> 00:23:48,300
make your customers happy is to give

00:23:46,260 --> 00:23:49,530
them the stuff they want right so you

00:23:48,300 --> 00:23:52,760
built if you build everything that you

00:23:49,530 --> 00:23:55,500
customize for they're gonna be happy but

00:23:52,760 --> 00:23:56,850
once you go down that path and say ok

00:23:55,500 --> 00:23:58,740
I'm just gonna you won the future I'm

00:23:56,850 --> 00:24:01,770
gonna build that feature you're really

00:23:58,740 --> 00:24:04,020
selling an all-or-nothing approach and

00:24:01,770 --> 00:24:06,420
you really and if the user says well I

00:24:04,020 --> 00:24:08,070
don't want all I just want like parts of

00:24:06,420 --> 00:24:10,500
it I already have a solution for this I

00:24:08,070 --> 00:24:13,260
already have a solution for that they

00:24:10,500 --> 00:24:14,940
kind of have to go for nothing and yeah

00:24:13,260 --> 00:24:16,500
you can tell them hey look that one part

00:24:14,940 --> 00:24:17,910
that's actually not so important like

00:24:16,500 --> 00:24:20,400
you don't have to use that but that

00:24:17,910 --> 00:24:23,040
sounds pretty bad as well and to the

00:24:20,400 --> 00:24:24,990
user this what this communicates is well

00:24:23,040 --> 00:24:26,730
I'm kind of locked in here and I have to

00:24:24,990 --> 00:24:28,680
go I have to take the whole thing and

00:24:26,730 --> 00:24:30,420
it's really it really wants me to do

00:24:28,680 --> 00:24:32,400
everything on that platform and that's

00:24:30,420 --> 00:24:32,999
actually often for in the developer

00:24:32,400 --> 00:24:39,059
space not

00:24:32,999 --> 00:24:40,619
that I'm desirable and finally well

00:24:39,059 --> 00:24:43,919
another thing you want if you are

00:24:40,619 --> 00:24:46,319
building software is that you want you

00:24:43,919 --> 00:24:48,209
to to be easy to learn you don't want

00:24:46,319 --> 00:24:50,369
people who have to spend forever to try

00:24:48,209 --> 00:24:52,529
to understand what you're doing so if

00:24:50,369 --> 00:24:54,269
you we have all this other you know

00:24:52,529 --> 00:24:56,639
Python stuff and if the user has to

00:24:54,269 --> 00:24:59,999
think about like oh what's a decorator

00:24:56,639 --> 00:25:01,889
and like we'll have to you know return a

00:24:59,999 --> 00:25:04,229
list here how do I do that again doesn't

00:25:01,889 --> 00:25:05,819
doesn't this actually make it harder to

00:25:04,229 --> 00:25:07,859
learn and shouldn't you like you know I

00:25:05,819 --> 00:25:08,189
want to avoid writing your tools that

00:25:07,859 --> 00:25:11,909
way

00:25:08,189 --> 00:25:13,109
well I thing is background knowledge is

00:25:11,909 --> 00:25:14,729
actually background knowledge is not the

00:25:13,109 --> 00:25:16,729
problem the problem what's hard to learn

00:25:14,729 --> 00:25:18,659
is you to is the tool specific stuff

00:25:16,729 --> 00:25:19,829
background knowledge like the

00:25:18,659 --> 00:25:22,169
programming language we're already

00:25:19,829 --> 00:25:24,029
working in nuts actually pretty easy to

00:25:22,169 --> 00:25:26,819
learn and it also generalizes well

00:25:24,029 --> 00:25:30,089
across other tasks and there's lots of

00:25:26,819 --> 00:25:33,329
great resources so you know I'm sure for

00:25:30,089 --> 00:25:35,069
example in in you know in the audience

00:25:33,329 --> 00:25:37,469
he I'm sure they're like something some

00:25:35,069 --> 00:25:38,609
of you have never worked with decorators

00:25:37,469 --> 00:25:40,769
before because it was just never

00:25:38,609 --> 00:25:43,109
relevant to you and I'm also sure there

00:25:40,769 --> 00:25:45,359
lots of you who have never worked with

00:25:43,109 --> 00:25:46,769
any of our software before use Spacey or

00:25:45,359 --> 00:25:48,509
prodigy but totally know what a

00:25:46,769 --> 00:25:50,729
decorator is and could probably explain

00:25:48,509 --> 00:25:51,689
the other group of people what this is

00:25:50,729 --> 00:25:54,509
and how you use it

00:25:51,689 --> 00:25:55,949
same with a generator function or you

00:25:54,509 --> 00:25:57,319
can type that into Google and you'll

00:25:55,949 --> 00:25:59,669
find lots of threads on Stack Overflow

00:25:57,319 --> 00:26:01,289
that explain you that concept and it's

00:25:59,669 --> 00:26:05,429
completely independent of the tool and

00:26:01,289 --> 00:26:07,979
from the developer perspective I it the

00:26:05,429 --> 00:26:09,269
burden of documentation is not on me I

00:26:07,979 --> 00:26:12,509
don't have to explain to you how to

00:26:09,269 --> 00:26:14,399
create an object that my library needs I

00:26:12,509 --> 00:26:17,489
can tell you hey it's this it's a

00:26:14,399 --> 00:26:19,019
function that returns this and however

00:26:17,489 --> 00:26:20,459
you put it together it's up to you if

00:26:19,019 --> 00:26:23,599
you don't understand the concept

00:26:20,459 --> 00:26:26,459
google it ask someone and you'll be able

00:26:23,599 --> 00:26:28,319
to find to learn about it without me

00:26:26,459 --> 00:26:34,229
having to give you every single piece

00:26:28,319 --> 00:26:35,489
and if I don't you're struggling and so

00:26:34,229 --> 00:26:38,669
if we're talking about you know

00:26:35,489 --> 00:26:40,259
programming a you know like one one

00:26:38,669 --> 00:26:42,989
thing people discuss a lot which i think

00:26:40,259 --> 00:26:44,429
is very valid is making technology

00:26:42,989 --> 00:26:47,309
accessible and

00:26:44,429 --> 00:26:48,960
rusev and also you know democratizing

00:26:47,309 --> 00:26:50,730
technology so that like everyone can use

00:26:48,960 --> 00:26:52,529
it and it's not just like reserved for

00:26:50,730 --> 00:26:54,960
like this group of people with like

00:26:52,529 --> 00:26:56,549
certain skills so you know if we if I'm

00:26:54,960 --> 00:26:58,080
actually telling you here like you look

00:26:56,549 --> 00:26:59,789
you people should write more code and

00:26:58,080 --> 00:27:02,909
let you use this right code make you use

00:26:59,789 --> 00:27:05,369
this right code isn't that exclusive and

00:27:02,909 --> 00:27:07,830
doesn't that like you know exclude

00:27:05,369 --> 00:27:11,039
people who can't program what you know

00:27:07,830 --> 00:27:14,009
what are we doing yeah and the thing is

00:27:11,039 --> 00:27:16,710
well even you know people even people

00:27:14,009 --> 00:27:20,549
who can't program can still benefit from

00:27:16,710 --> 00:27:22,409
an ecosystem of tools if they're

00:27:20,549 --> 00:27:23,940
programmable and like if you're talking

00:27:22,409 --> 00:27:26,159
about all people who can't program

00:27:23,940 --> 00:27:28,129
there's always this lots of people see

00:27:26,159 --> 00:27:30,509
this as a as kind of a hierarchy of

00:27:28,129 --> 00:27:32,190
people you know some people can program

00:27:30,509 --> 00:27:33,389
and they can use all these complex tools

00:27:32,190 --> 00:27:35,249
and then there other people who can't

00:27:33,389 --> 00:27:38,220
and they don't deserve like powerful

00:27:35,249 --> 00:27:40,499
tools and of course that's not true

00:27:38,220 --> 00:27:42,809
often people who you know want to use

00:27:40,499 --> 00:27:44,970
these very advanced developer tools and

00:27:42,809 --> 00:27:47,369
maybe haven't blown to program yet

00:27:44,970 --> 00:27:49,110
because whatever they often also they

00:27:47,369 --> 00:27:52,529
experienced professionals in another

00:27:49,110 --> 00:27:54,960
field like medical for example or legal

00:27:52,529 --> 00:27:56,669
digital humanities all these fields you

00:27:54,960 --> 00:27:58,889
have professionals that want to work

00:27:56,669 --> 00:28:01,980
with highly specialized tools and just

00:27:58,889 --> 00:28:03,119
don't happen to know Python and they

00:28:01,980 --> 00:28:05,100
might there might still be people in

00:28:03,119 --> 00:28:07,499
their groups and people in their field

00:28:05,100 --> 00:28:09,840
who can program and in that sense you're

00:28:07,499 --> 00:28:11,850
at allyou right can still be very useful

00:28:09,840 --> 00:28:13,379
for these people in a way that you could

00:28:11,850 --> 00:28:15,809
have never anticipated like you can't

00:28:13,379 --> 00:28:17,129
know every single use case and every

00:28:15,809 --> 00:28:19,799
single thing people are trying to do

00:28:17,129 --> 00:28:21,710
with your software and ultimately you

00:28:19,799 --> 00:28:23,549
know it also comes down to you know you

00:28:21,710 --> 00:28:27,419
realizing that like you're not going to

00:28:23,549 --> 00:28:30,090
think of everything and to have the

00:28:27,419 --> 00:28:33,330
humility to accept that and instead of

00:28:30,090 --> 00:28:38,940
trying to provide one tool to rule them

00:28:33,330 --> 00:28:41,700
all allow people to extend it and accept

00:28:38,940 --> 00:28:45,110
that like you know you can either ship

00:28:41,700 --> 00:28:47,519
them an incomplete version or not and

00:28:45,110 --> 00:28:48,990
you know and there's no for people you

00:28:47,519 --> 00:28:52,080
know if you want to if you if people are

00:28:48,990 --> 00:28:53,879
using your tools just giving people an

00:28:52,080 --> 00:28:55,830
interface that they can click on does

00:28:53,879 --> 00:28:57,309
not solve any of the problems because by

00:28:55,830 --> 00:28:58,690
just putting a button

00:28:57,309 --> 00:29:02,289
top of it of something that's

00:28:58,690 --> 00:29:03,909
fundamentally a tool to program you're

00:29:02,289 --> 00:29:06,759
just giving people in abstraction and

00:29:03,909 --> 00:29:09,429
every abstraction leaks an abstraction

00:29:06,759 --> 00:29:11,110
is always going to be worse than in that

00:29:09,429 --> 00:29:12,309
in that sense this type of abstraction

00:29:11,110 --> 00:29:14,350
is always going to be worse than like

00:29:12,309 --> 00:29:15,909
the actual thing and it's sort of you

00:29:14,350 --> 00:29:17,830
know you're not helping someone who

00:29:15,909 --> 00:29:19,509
can't program by giving them a leaking

00:29:17,830 --> 00:29:23,519
of leaky abstraction over something

00:29:19,509 --> 00:29:26,470
that's fundamentally programmable and

00:29:23,519 --> 00:29:29,139
let's maybe give you you know a simple

00:29:26,470 --> 00:29:32,350
example that actually might even seem

00:29:29,139 --> 00:29:35,230
look a bit appealing at first so here we

00:29:32,350 --> 00:29:36,999
have a machine learning model builder so

00:29:35,230 --> 00:29:39,279
imagine you know your training models

00:29:36,999 --> 00:29:40,690
and me now normally you do that in code

00:29:39,279 --> 00:29:44,259
but you want to make it a bit easier for

00:29:40,690 --> 00:29:46,539
people to use so you've built you know

00:29:44,259 --> 00:29:48,970
this little UI people can select an

00:29:46,539 --> 00:29:51,190
embedding layer an encoding layer people

00:29:48,970 --> 00:29:52,509
can upload their data tune some hyper

00:29:51,190 --> 00:29:55,149
parameters and then they can click a

00:29:52,509 --> 00:29:59,049
button and they can train a model I mean

00:29:55,149 --> 00:30:00,340
looks useful right but you know if you

00:29:59,049 --> 00:30:02,889
kind of if we take a step back again

00:30:00,340 --> 00:30:05,590
here ultimately you know what we've

00:30:02,889 --> 00:30:07,090
built here does not actually solve any

00:30:05,590 --> 00:30:08,470
problem on any level if you're a

00:30:07,090 --> 00:30:10,539
developer and you're writing the code

00:30:08,470 --> 00:30:11,559
this is not going to help you because as

00:30:10,539 --> 00:30:14,110
soon as you want to add a print

00:30:11,559 --> 00:30:16,840
statement or log something or change

00:30:14,110 --> 00:30:18,249
something you can't do that you need to

00:30:16,840 --> 00:30:21,279
add another drop-down you a do not need

00:30:18,249 --> 00:30:22,749
to add another field and if you you know

00:30:21,279 --> 00:30:24,429
if you could just write one line of code

00:30:22,749 --> 00:30:26,110
instead that would be much more

00:30:24,429 --> 00:30:29,379
efficient than working with a tool like

00:30:26,110 --> 00:30:31,840
that and on the other hand if yeah if

00:30:29,379 --> 00:30:34,269
you want people who are maybe not

00:30:31,840 --> 00:30:36,159
machine learning developers to be able

00:30:34,269 --> 00:30:38,590
to train a machine learning model well

00:30:36,159 --> 00:30:40,149
that's I know that's a nice idea and

00:30:38,590 --> 00:30:41,529
that's your thing but giving them

00:30:40,149 --> 00:30:43,269
something giving them kind of this

00:30:41,529 --> 00:30:44,799
simple interface which is just like an

00:30:43,269 --> 00:30:46,029
abstraction over your code that's kind

00:30:44,799 --> 00:30:48,220
that's almost an insult to any

00:30:46,029 --> 00:30:49,929
professional working with you know these

00:30:48,220 --> 00:30:51,610
tools because there's a lot more that

00:30:49,929 --> 00:30:53,679
you need to do in order to really make

00:30:51,610 --> 00:30:55,179
things useful and I would say that maybe

00:30:53,679 --> 00:30:57,879
you know with the technology we might

00:30:55,179 --> 00:31:00,220
not quite be quite there yet to make it

00:30:57,879 --> 00:31:02,649
mere useful enough to offer this kind of

00:31:00,220 --> 00:31:03,940
abstraction so you know a business

00:31:02,649 --> 00:31:06,220
professional shouldn't have to care

00:31:03,940 --> 00:31:07,809
about your encoding layer a business

00:31:06,220 --> 00:31:09,910
professional cares about like very

00:31:07,809 --> 00:31:11,560
different things so this interface

00:31:09,910 --> 00:31:13,980
but this interface and this this kind of

00:31:11,560 --> 00:31:16,690
approach to things doesn't really solve

00:31:13,980 --> 00:31:20,290
any problem and it's just strictly worse

00:31:16,690 --> 00:31:24,730
than letting people program and building

00:31:20,290 --> 00:31:26,880
systems that way and so you know when we

00:31:24,730 --> 00:31:29,770
think about making technology accessible

00:31:26,880 --> 00:31:31,660
making things accessible to people who

00:31:29,770 --> 00:31:33,280
aren't like you is not just trying to

00:31:31,660 --> 00:31:35,170
think of everything they might want and

00:31:33,280 --> 00:31:36,430
then giving it to them again that's what

00:31:35,170 --> 00:31:37,890
I mean it's kind of you know you're

00:31:36,430 --> 00:31:40,900
never going to think of everything

00:31:37,890 --> 00:31:42,480
there's no way you can know what you

00:31:40,900 --> 00:31:47,380
know a specialist in a different field

00:31:42,480 --> 00:31:49,480
might want and so dividing also dividing

00:31:47,380 --> 00:31:51,340
people up into coders and non coders

00:31:49,480 --> 00:31:53,320
really isn't that helpful there many

00:31:51,340 --> 00:31:55,720
professional tools for example just

00:31:53,320 --> 00:31:57,730
think of Excel people use Excel people

00:31:55,720 --> 00:32:00,250
write formulas in Excel and yeah maybe

00:31:57,730 --> 00:32:02,590
that's not coding but it's not something

00:32:00,250 --> 00:32:04,570
people want to use and people use that

00:32:02,590 --> 00:32:04,990
so those sorts of behaviors to get their

00:32:04,570 --> 00:32:08,200
job done

00:32:04,990 --> 00:32:10,300
people want complex systems and people

00:32:08,200 --> 00:32:11,590
want complex behaviors and even if at

00:32:10,300 --> 00:32:13,540
some point it means yeah they have to

00:32:11,590 --> 00:32:15,070
write one or two lines of Python that's

00:32:13,540 --> 00:32:17,410
still more useful than having to rely on

00:32:15,070 --> 00:32:23,070
you to give them a checkbox they can

00:32:17,410 --> 00:32:25,810
click on tome and if we look at this

00:32:23,070 --> 00:32:28,480
from you know the perspective of okay

00:32:25,810 --> 00:32:33,130
what what does this mean for software

00:32:28,480 --> 00:32:34,930
and what like lessons can we learn here

00:32:33,130 --> 00:32:37,210
is if we look at open source software

00:32:34,930 --> 00:32:39,790
it's pretty interesting that like open

00:32:37,210 --> 00:32:43,510
source tools have come again in again

00:32:39,790 --> 00:32:45,330
crushed closed source software in many

00:32:43,510 --> 00:32:48,610
many fields and many many domains and

00:32:45,330 --> 00:32:50,800
that's even those open source has like a

00:32:48,610 --> 00:32:53,110
pretty pretty significant disadvantage

00:32:50,800 --> 00:32:55,990
over closed source proprietary software

00:32:53,110 --> 00:32:58,150
which is often open source tools have a

00:32:55,990 --> 00:32:59,650
lot less money sometimes you know they

00:32:58,150 --> 00:33:01,810
have company like in our case we have a

00:32:59,650 --> 00:33:04,990
company behind it sometimes people will

00:33:01,810 --> 00:33:08,410
take donations many open source tools of

00:33:04,990 --> 00:33:10,180
a community driven and can actually be

00:33:08,410 --> 00:33:11,890
quite unorganized sometimes it's you

00:33:10,180 --> 00:33:14,470
know some guy developing it in his free

00:33:11,890 --> 00:33:18,130
time and still companies are using it

00:33:14,470 --> 00:33:20,230
and why is that well people often talk

00:33:18,130 --> 00:33:21,550
about oh it's because it's free and

00:33:20,230 --> 00:33:23,549
companies you know companies just like

00:33:21,550 --> 00:33:26,129
using free stuff but I think that's not

00:33:23,549 --> 00:33:27,450
that's not true I mean it could be you

00:33:26,129 --> 00:33:30,059
know it can be a motivation and it makes

00:33:27,450 --> 00:33:33,090
the back into the entry barrier easier

00:33:30,059 --> 00:33:35,100
but companies can totally pay for stuff

00:33:33,090 --> 00:33:36,929
but people like the fact that open

00:33:35,100 --> 00:33:38,850
source tools are programmable and

00:33:36,929 --> 00:33:40,950
extensible that's something people

00:33:38,850 --> 00:33:43,769
really value about software in general

00:33:40,950 --> 00:33:45,659
and that's also that's I think a big

00:33:43,769 --> 00:33:47,009
part that contributes to the success of

00:33:45,659 --> 00:33:49,860
open source and this is also something

00:33:47,009 --> 00:33:53,309
we can learn from the success of open

00:33:49,860 --> 00:33:55,200
source software and I'm not saying all

00:33:53,309 --> 00:33:57,600
you need to do is like make your

00:33:55,200 --> 00:33:59,519
software open source it's completely

00:33:57,600 --> 00:34:02,429
fine to make money it's fine to build

00:33:59,519 --> 00:34:05,399
closed source systems but if you want to

00:34:02,429 --> 00:34:06,749
take one lesson away from this when you

00:34:05,399 --> 00:34:08,970
are next time you know you're sitting

00:34:06,749 --> 00:34:10,649
down in building a tool building a piece

00:34:08,970 --> 00:34:14,309
of software that other people are going

00:34:10,649 --> 00:34:17,099
to use learn this lesson make it

00:34:14,309 --> 00:34:19,740
programmable make it extensible try to

00:34:17,099 --> 00:34:23,510
focus less on making things easy and

00:34:19,740 --> 00:34:26,629
instead just let your users right corner

00:34:23,510 --> 00:34:26,629
thank you

00:34:31,920 --> 00:34:38,770
[Applause]

00:34:34,500 --> 00:34:41,080
I'm Silas question I'm here ah hey yeah

00:34:38,770 --> 00:34:42,310
so in your entire talk you were talking

00:34:41,080 --> 00:34:45,330
about how to make it easier for

00:34:42,310 --> 00:34:47,740
developers to add features on the go

00:34:45,330 --> 00:34:50,050
what's your take on high level rappers

00:34:47,740 --> 00:34:52,899
that go on top for API is in this kind

00:34:50,050 --> 00:34:54,340
of an environment I'm sorry I didn't get

00:34:52,899 --> 00:34:57,640
the last part of the question what's

00:34:54,340 --> 00:34:59,710
your take on high level rappers that go

00:34:57,640 --> 00:35:01,960
around API is for example terrorist

00:34:59,710 --> 00:35:05,170
stuff like that how do you think high

00:35:01,960 --> 00:35:10,090
level rappers function plane to making

00:35:05,170 --> 00:35:11,710
your API is easier to use okay so you

00:35:10,090 --> 00:35:14,020
mean you know high level rappers like

00:35:11,710 --> 00:35:16,540
Harris and what they contribute to

00:35:14,020 --> 00:35:18,490
making toast easier to use yeah okay

00:35:16,540 --> 00:35:20,470
good okay no sorry the acoustics are a

00:35:18,490 --> 00:35:23,830
bit difficult and I keep hearing an echo

00:35:20,470 --> 00:35:26,080
so it's not it's not about you so yes

00:35:23,830 --> 00:35:27,250
actually I'm mentioning Karis and also

00:35:26,080 --> 00:35:29,250
tensorflow actually it's a good example

00:35:27,250 --> 00:35:31,750
I didn't mention that in a talk but

00:35:29,250 --> 00:35:33,430
especially with tensorflow - I think

00:35:31,750 --> 00:35:34,750
they really just like PI torch went for

00:35:33,430 --> 00:35:37,390
this concept where you have the low

00:35:34,750 --> 00:35:39,369
level primitives that you can use but

00:35:37,390 --> 00:35:41,650
also you have a more high level API that

00:35:39,369 --> 00:35:43,030
does the more common tasks that people

00:35:41,650 --> 00:35:44,590
might want to do and I do think this is

00:35:43,030 --> 00:35:46,540
if you can maintain it and if you can

00:35:44,590 --> 00:35:48,700
pull it off I think that can be a good

00:35:46,540 --> 00:35:50,260
compromise but but actually you know you

00:35:48,700 --> 00:35:51,609
want to be exposing the primitives for

00:35:50,260 --> 00:35:54,520
people to work with and they actually

00:35:51,609 --> 00:35:56,560
need to be usable and then you can still

00:35:54,520 --> 00:35:59,109
say hey if you know I can give you a fit

00:35:56,560 --> 00:36:01,060
method that trains your model but I also

00:35:59,109 --> 00:36:02,859
give you all the parts you can use for

00:36:01,060 --> 00:36:04,119
your training loop the only thing I

00:36:02,859 --> 00:36:05,530
would say you have to consider there's

00:36:04,119 --> 00:36:07,690
that okay a large library like

00:36:05,530 --> 00:36:09,670
tensorflow can pull this off but if you

00:36:07,690 --> 00:36:11,800
want to do it you know both parts need

00:36:09,670 --> 00:36:13,660
to be good if you primitives are kind of

00:36:11,800 --> 00:36:16,270
hard to use outside of your wrappers

00:36:13,660 --> 00:36:17,230
that's pretty difficult but if you can

00:36:16,270 --> 00:36:19,210
do it

00:36:17,230 --> 00:36:20,770
that's a good way and then that way

00:36:19,210 --> 00:36:22,930
every time you use I need something

00:36:20,770 --> 00:36:25,480
custom you can say okay you like past

00:36:22,930 --> 00:36:27,369
the point of using out of the box now

00:36:25,480 --> 00:36:28,840
here all the primitives now you can put

00:36:27,369 --> 00:36:31,630
them together yourself here's the

00:36:28,840 --> 00:36:34,920
documentation have fun so yes that's I

00:36:31,630 --> 00:36:34,920
think a good example

00:36:35,930 --> 00:36:42,980
so if I understand correctly prodigy is

00:36:38,930 --> 00:36:45,980
then closed source - and yes the no

00:36:42,980 --> 00:36:48,500
support is like prodigy is a commercial

00:36:45,980 --> 00:36:52,130
tool so it's not open source and free

00:36:48,500 --> 00:36:54,140
but we do include parts of the source

00:36:52,130 --> 00:36:56,900
that are not compiled siphoned with the

00:36:54,140 --> 00:36:59,390
library and we also let you write custom

00:36:56,900 --> 00:37:01,609
Python scripts so ideally you can

00:36:59,390 --> 00:37:04,359
interact with a tool via these recipe

00:37:01,609 --> 00:37:19,730
scripts and use the components and

00:37:04,359 --> 00:37:21,289
compose your workflows in code so it's

00:37:19,730 --> 00:37:23,690
still you know you can still you pip

00:37:21,289 --> 00:37:25,640
install the library into your

00:37:23,690 --> 00:37:28,130
environment which means you can import

00:37:25,640 --> 00:37:30,650
its components from your script and

00:37:28,130 --> 00:37:34,279
write your own scripts using the library

00:37:30,650 --> 00:37:37,940
yes yes okay yeah because I think it's a

00:37:34,279 --> 00:37:40,010
high a myself yeah yeah thank you for a

00:37:37,940 --> 00:37:43,609
wonderful session my question is

00:37:40,010 --> 00:37:46,369
regarding space CNEA if the data is in

00:37:43,609 --> 00:37:48,230
sentence form then we can directly go

00:37:46,369 --> 00:37:50,690
ahead and recognize entities based on

00:37:48,230 --> 00:37:53,480
the context but what if my data contains

00:37:50,690 --> 00:37:55,520
single word in each line so how can I

00:37:53,480 --> 00:37:57,440
use any are in that and how does

00:37:55,520 --> 00:37:59,750
Bayesian e'er learns context from it

00:37:57,440 --> 00:38:01,279
okay I mean yeah so that it that's a bit

00:37:59,750 --> 00:38:03,160
more tangential you can probably also

00:38:01,279 --> 00:38:04,970
talk about more details later but

00:38:03,160 --> 00:38:07,789
fundamentally so you just have one

00:38:04,970 --> 00:38:09,140
single word yes I mean in that case the

00:38:07,789 --> 00:38:11,599
thing is if you named entity recognition

00:38:09,140 --> 00:38:13,609
by definition is you know the idea of

00:38:11,599 --> 00:38:16,309
recognizing names in contact their names

00:38:13,609 --> 00:38:19,279
and concepts and usually that happens in

00:38:16,309 --> 00:38:21,170
context and so for context you need

00:38:19,279 --> 00:38:23,329
context and that's also how the models

00:38:21,170 --> 00:38:26,210
are typically designed they decide is

00:38:23,329 --> 00:38:27,799
Apple a company or fruit based on the

00:38:26,210 --> 00:38:30,289
surrounding context if you have no

00:38:27,799 --> 00:38:32,750
surrounding context then any are and

00:38:30,289 --> 00:38:35,930
kind of you know that idea of modeling

00:38:32,750 --> 00:38:38,599
your task is also not very useful okay

00:38:35,930 --> 00:38:40,960
and even in sentence format do the

00:38:38,599 --> 00:38:43,630
number of spaces between words matter

00:38:40,960 --> 00:38:45,279
for recognizing the entities so you mean

00:38:43,630 --> 00:38:47,349
but what to space the number of screens

00:38:45,279 --> 00:38:49,450
so other other words around it yes yes

00:38:47,349 --> 00:38:50,920
yes well yes usually you know what

00:38:49,450 --> 00:38:52,779
models have different windows in our

00:38:50,920 --> 00:38:54,849
case it's like four words on either side

00:38:52,779 --> 00:38:56,470
so that's kind of what the model looks

00:38:54,849 --> 00:38:58,690
like and that's also you know usually

00:38:56,470 --> 00:39:01,059
what you want because that context tells

00:38:58,690 --> 00:39:03,690
you a lot more about you know the what's

00:39:01,059 --> 00:39:08,410
you're looking for so yes okay thank you

00:39:03,690 --> 00:39:09,700
hi so when you are conceptualizing when

00:39:08,410 --> 00:39:12,430
the explosion team is conceptualizing

00:39:09,700 --> 00:39:14,259
Prodigy as a product and through the

00:39:12,430 --> 00:39:16,420
development process how do you decide

00:39:14,259 --> 00:39:19,240
what components to make open source or

00:39:16,420 --> 00:39:22,180
even expose and what components to you

00:39:19,240 --> 00:39:24,549
know to keep as the key points for it as

00:39:22,180 --> 00:39:26,410
a product yeah I mean in our case so one

00:39:24,549 --> 00:39:29,380
part was okay that we also we use we

00:39:26,410 --> 00:39:30,849
compile some of the code so you know if

00:39:29,380 --> 00:39:32,470
it's if it has like C extensions or

00:39:30,849 --> 00:39:34,509
something and needs to be compiled then

00:39:32,470 --> 00:39:37,299
that's a bit harder to just expose and

00:39:34,509 --> 00:39:39,490
have you edit but you know more

00:39:37,299 --> 00:39:42,369
generally we we thought well okay

00:39:39,490 --> 00:39:43,720
there's some debates or all the building

00:39:42,369 --> 00:39:45,999
blocks that basically modify

00:39:43,720 --> 00:39:48,609
functionality that people might change

00:39:45,999 --> 00:39:50,829
or also that we might want to you know

00:39:48,609 --> 00:39:53,559
very like for example how a stream of

00:39:50,829 --> 00:39:55,450
incoming examples is sorted how you know

00:39:53,559 --> 00:39:57,279
certain config options are defined or

00:39:55,450 --> 00:39:59,499
how the model is read in that's all

00:39:57,279 --> 00:40:01,150
something that we know a user might want

00:39:59,499 --> 00:40:03,069
to customize and then there's other

00:40:01,150 --> 00:40:06,210
stuff that just powers some of the

00:40:03,069 --> 00:40:08,619
internals that's also much less relevant

00:40:06,210 --> 00:40:09,579
to change in a sense because that's

00:40:08,619 --> 00:40:11,259
really okay that's the core

00:40:09,579 --> 00:40:13,029
functionality of how the tool all fits

00:40:11,259 --> 00:40:14,559
together that's the stuff that we're

00:40:13,029 --> 00:40:17,650
like well okay we don't need to expose

00:40:14,559 --> 00:40:19,509
all the details or then again stuff also

00:40:17,650 --> 00:40:22,630
actually stuff where we feel like look

00:40:19,509 --> 00:40:25,299
we just I'm not an expert on either you

00:40:22,630 --> 00:40:26,890
know REST API s or databases you know I

00:40:25,299 --> 00:40:28,450
can write that stuff and I would say we

00:40:26,890 --> 00:40:31,150
did a pretty good job in ecology but I

00:40:28,450 --> 00:40:33,099
wouldn't consider myself like especially

00:40:31,150 --> 00:40:35,049
opinionated enough to tell someone how

00:40:33,099 --> 00:40:37,779
to do it so will I call the web server

00:40:35,049 --> 00:40:39,489
and the database we have a pretty good

00:40:37,779 --> 00:40:41,049
implementation but if you don't like it

00:40:39,489 --> 00:40:42,789
we give that to you open source because

00:40:41,049 --> 00:40:44,289
I I can totally imagine that someone

00:40:42,789 --> 00:40:45,999
wants to change that and I think just

00:40:44,289 --> 00:40:47,980
admitting that is fine like look you've

00:40:45,999 --> 00:40:49,089
built something good but I can

00:40:47,980 --> 00:40:51,239
understand you might want to do it

00:40:49,089 --> 00:40:53,500
differently and so here it is

00:40:51,239 --> 00:40:58,490
editor

00:40:53,500 --> 00:41:00,440
hello so hi I wanted to know like when

00:40:58,490 --> 00:41:02,360
writing libraries and sometimes we use

00:41:00,440 --> 00:41:04,430
decorators and all oh and if we want to

00:41:02,360 --> 00:41:06,680
use some protected variable or some

00:41:04,430 --> 00:41:08,000
other class of say some input we are

00:41:06,680 --> 00:41:11,150
getting for example I was working the

00:41:08,000 --> 00:41:13,490
decorator to print logs that your

00:41:11,150 --> 00:41:15,110
function like just logs that entered

00:41:13,490 --> 00:41:17,120
into this function and I wanted to write

00:41:15,110 --> 00:41:18,770
that exit of this function and these are

00:41:17,120 --> 00:41:20,930
the outputs are these are the arguments

00:41:18,770 --> 00:41:23,870
that are passed I needed to use the

00:41:20,930 --> 00:41:27,170
protected variables and dot function

00:41:23,870 --> 00:41:29,180
alone is this okay to use the protected

00:41:27,170 --> 00:41:31,550
variables of a class or not a good

00:41:29,180 --> 00:41:33,110
practice so it can you summarize the

00:41:31,550 --> 00:41:35,810
question again I'm not sure I got the

00:41:33,110 --> 00:41:37,790
whole yeah so like if you pass a class

00:41:35,810 --> 00:41:41,350
or object so yes it okay to use

00:41:37,790 --> 00:41:43,940
protected variables in our library or

00:41:41,350 --> 00:41:47,510
that's not a good practice but what

00:41:43,940 --> 00:41:49,700
variables protected variables like if

00:41:47,510 --> 00:41:52,460
you know object like we define in Python

00:41:49,700 --> 00:41:54,320
by a double underscore mmm so is it okay

00:41:52,460 --> 00:41:57,020
to use it in our library if someone

00:41:54,320 --> 00:41:58,940
else's the user is passing or not a good

00:41:57,020 --> 00:42:00,920
practice I mean oh I mean I don't know

00:41:58,940 --> 00:42:03,590
if a fan opinion or not to be honest

00:42:00,920 --> 00:42:05,270
like I do feel like yeah I don't know in

00:42:03,590 --> 00:42:07,820
general epi you know you'd want to avoid

00:42:05,270 --> 00:42:10,130
too many arbitrary names you hard cold

00:42:07,820 --> 00:42:12,500
because that's just more stuff that a

00:42:10,130 --> 00:42:14,120
user has to you know remember but like I

00:42:12,500 --> 00:42:16,100
don't I don't think I have have an

00:42:14,120 --> 00:42:17,180
opinion on that but you know it does

00:42:16,100 --> 00:42:19,160
sound a bit like you know having

00:42:17,180 --> 00:42:21,410
protected variables itself it it does

00:42:19,160 --> 00:42:22,850
sound a bit inconvenient to have you

00:42:21,410 --> 00:42:25,190
know too many of these conventions that

00:42:22,850 --> 00:42:26,660
you come up with in your own code base

00:42:25,190 --> 00:42:27,950
like wake sample or even you telling me

00:42:26,660 --> 00:42:29,600
that I'm like I'm actually trying to

00:42:27,950 --> 00:42:31,640
imagine like how this would look in code

00:42:29,600 --> 00:42:33,590
and like how I would interact with this

00:42:31,640 --> 00:42:35,390
so that you know that could be a bad

00:42:33,590 --> 00:42:37,370
sign but like honestly I don't think I

00:42:35,390 --> 00:42:40,640
can give you good good advice

00:42:37,370 --> 00:42:41,230
sorry yeah also I wanted to know what is

00:42:40,640 --> 00:42:43,119
a

00:42:41,230 --> 00:42:47,609
in specie what is your work concerning

00:42:43,119 --> 00:42:51,490
how's the work divided and how you guys

00:42:47,609 --> 00:42:54,670
divides the task and work oh so you mean

00:42:51,490 --> 00:42:55,809
how we divide up what we are on I mean

00:42:54,670 --> 00:42:57,250
at this point of course it's a bit

00:42:55,809 --> 00:43:00,069
easier because we already have a library

00:42:57,250 --> 00:43:01,599
we have we validated a lot of the ideas

00:43:00,069 --> 00:43:05,109
we've had about like how to compose

00:43:01,599 --> 00:43:06,549
things so that becomes a bit easier

00:43:05,109 --> 00:43:09,160
because you know we see we have our

00:43:06,549 --> 00:43:11,289
roadmap and then we decide okay we that

00:43:09,160 --> 00:43:13,420
win our team of four developers who are

00:43:11,289 --> 00:43:16,329
on the space equal team everyone kind of

00:43:13,420 --> 00:43:19,299
has their own strengths and like areas

00:43:16,329 --> 00:43:22,000
that they're working on so yeah that's

00:43:19,299 --> 00:43:23,799
that's now I would say relatively easy

00:43:22,000 --> 00:43:25,599
by like just okay talking about it and

00:43:23,799 --> 00:43:28,480
actually another thing we do in Spacey

00:43:25,599 --> 00:43:31,029
is Spacey's way it's sort of driven by a

00:43:28,480 --> 00:43:32,349
very few authors and while we love you

00:43:31,029 --> 00:43:34,390
know community contributions and

00:43:32,349 --> 00:43:36,220
especially in the area of extending the

00:43:34,390 --> 00:43:38,559
languages and really using people's

00:43:36,220 --> 00:43:41,230
expertise we don't necessarily expect

00:43:38,559 --> 00:43:43,720
our community to work in unlike some

00:43:41,230 --> 00:43:45,130
in-depth features and like contribute

00:43:43,720 --> 00:43:47,079
stuff where you know we have a clear

00:43:45,130 --> 00:43:49,210
idea and we think okay we can pull this

00:43:47,079 --> 00:43:52,200
off and develop it so we're like you

00:43:49,210 --> 00:43:55,180
know we talked about it in the open but

00:43:52,200 --> 00:43:58,240
we still ultimately we figure it out and

00:43:55,180 --> 00:44:00,750
do it and present it to the community

00:43:58,240 --> 00:44:00,750
for feedback

00:44:01,400 --> 00:44:08,770
what's your view on you mentioned Mt

00:44:05,099 --> 00:44:11,710
can you speak up a tiny bit yeah hold

00:44:08,770 --> 00:44:13,630
this yeah so you mentioned entry points

00:44:11,710 --> 00:44:17,040
yeah so let's think about it or later

00:44:13,630 --> 00:44:19,180
come on line feel it click click all

00:44:17,040 --> 00:44:21,190
configuration to like that account so

00:44:19,180 --> 00:44:23,740
most of the entry points go through this

00:44:21,190 --> 00:44:26,320
import path head so let's say you have

00:44:23,740 --> 00:44:28,930
nested directions and it's a

00:44:26,320 --> 00:44:31,089
configuration file or the function which

00:44:28,930 --> 00:44:33,049
is in the module which comes into the

00:44:31,089 --> 00:44:37,189
entry point often

00:44:33,049 --> 00:44:39,439
it encounters a problem so you like the

00:44:37,189 --> 00:44:41,299
I missed the last part fine so if your

00:44:39,439 --> 00:44:44,809
package yeah right

00:44:41,299 --> 00:44:48,109
often it enters this input problem right

00:44:44,809 --> 00:44:50,209
through Python path so if you what are

00:44:48,109 --> 00:44:52,819
your opinions on that so we expose entry

00:44:50,209 --> 00:44:54,619
points and then you have modules and

00:44:52,819 --> 00:44:56,989
within modules you got sub modules and

00:44:54,619 --> 00:45:02,089
then specific functions within those a

00:44:56,989 --> 00:45:04,459
moment okay so yeah so you the question

00:45:02,089 --> 00:45:05,959
is well how to deal with black box and

00:45:04,459 --> 00:45:09,409
problems in lines really have you

00:45:05,959 --> 00:45:11,239
encountered anything like this yeah so

00:45:09,409 --> 00:45:13,939
if you you know if you have entry points

00:45:11,239 --> 00:45:15,859
and everything like advertises them you

00:45:13,939 --> 00:45:18,019
kind of end up with these problems with

00:45:15,859 --> 00:45:19,789
like several layers steep or forty

00:45:18,019 --> 00:45:21,109
registers like yes I can see that's a

00:45:19,789 --> 00:45:22,849
valid concern and of course you could

00:45:21,109 --> 00:45:25,729
also you could just publish a package on

00:45:22,849 --> 00:45:27,619
pi PI that like advertises really

00:45:25,729 --> 00:45:29,419
terrible entry points for spacey and

00:45:27,619 --> 00:45:32,179
then like messed up everyone's Spacey

00:45:29,419 --> 00:45:35,149
insulation that's that is true and

00:45:32,179 --> 00:45:37,009
that's I would say get forth with this a

00:45:35,149 --> 00:45:39,409
proper like or potential problem with

00:45:37,009 --> 00:45:41,689
this approach also you know I guess as

00:45:39,409 --> 00:45:43,549
the library developer you probably want

00:45:41,689 --> 00:45:44,869
to do you know some scaffolding around

00:45:43,549 --> 00:45:47,599
it to make sure that you're not loading

00:45:44,869 --> 00:45:49,789
something that's terrible but yes that's

00:45:47,599 --> 00:45:51,769
something you have to consider probably

00:45:49,789 --> 00:45:53,599
writing some good error messages around

00:45:51,769 --> 00:45:55,429
that and maybe also I don't know why

00:45:53,599 --> 00:45:57,949
happening I'm not an expert on like the

00:45:55,429 --> 00:46:01,039
development on entry points but I could

00:45:57,949 --> 00:46:02,809
imagine it maybe also there could be

00:46:01,039 --> 00:46:04,369
something that could maybe be improved

00:46:02,809 --> 00:46:09,009
in a future and have more features

00:46:04,369 --> 00:46:09,009
packet added to the packaging so yeah

00:46:10,170 --> 00:46:16,859
they're in this so that was a great talk

00:46:13,140 --> 00:46:19,890
and I loved all the designs of your

00:46:16,859 --> 00:46:23,009
slides and so my question here is does

00:46:19,890 --> 00:46:27,569
support us prodigies support longer text

00:46:23,009 --> 00:46:29,999
with new lines what soy a Dutch prodigy

00:46:27,569 --> 00:46:33,239
support longer text with new lines

00:46:29,999 --> 00:46:35,609
longer texts with new lines yeah so in

00:46:33,239 --> 00:46:36,930
general yes because whatever you can you

00:46:35,609 --> 00:46:39,299
know window on the screen you can render

00:46:36,930 --> 00:46:42,329
like there's one thing if you if you're

00:46:39,299 --> 00:46:45,029
labeling manually new lines can be kind

00:46:42,329 --> 00:46:47,099
of tricky because the difficult things

00:46:45,029 --> 00:46:49,170
here are that like new lines are Unicode

00:46:47,099 --> 00:46:53,089
characters so you always need to see

00:46:49,170 --> 00:46:54,989
them in your text and one problem with

00:46:53,089 --> 00:46:56,309
visualizing new lines is that well

00:46:54,989 --> 00:46:58,200
they're usually kind of invisible that

00:46:56,309 --> 00:47:01,380
is creating new lines so we have to you

00:46:58,200 --> 00:47:04,079
know add a bit of happiness to actually

00:47:01,380 --> 00:47:06,420
display new lines as new line characters

00:47:04,079 --> 00:47:08,009
because otherwise it's very easy to

00:47:06,420 --> 00:47:10,890
accidentally highlight a new line and

00:47:08,009 --> 00:47:13,710
really mess up your training data that

00:47:10,890 --> 00:47:16,529
way but in general if you're in input

00:47:13,710 --> 00:47:19,230
text has new lines in it at least one

00:47:16,529 --> 00:47:22,339
new line you can visually render and see

00:47:19,230 --> 00:47:25,710
and highlight or avoid highlighting so

00:47:22,339 --> 00:47:27,809
that's typically no problem although you

00:47:25,710 --> 00:47:30,210
know I would often recommend if you text

00:47:27,809 --> 00:47:32,489
of a long have lots of new lines you

00:47:30,210 --> 00:47:34,380
don't always spend it don't always

00:47:32,489 --> 00:47:35,670
benefit from looking at the whole text

00:47:34,380 --> 00:47:37,200
unless you really know what you're doing

00:47:35,670 --> 00:47:39,450
and your model implementation is

00:47:37,200 --> 00:47:41,609
actually sensitive to the whole text

00:47:39,450 --> 00:47:44,309
otherwise you might as well cut it up

00:47:41,609 --> 00:47:46,619
and use shorter pieces but we can also

00:47:44,309 --> 00:47:50,359
talk about some of the details later so

00:47:46,619 --> 00:47:53,309
this is the last question yeah yeah

00:47:50,359 --> 00:47:55,799
thanks for the talk I have a question

00:47:53,309 --> 00:47:57,720
specifically on API design so one

00:47:55,799 --> 00:48:00,359
headache that happens is sometimes your

00:47:57,720 --> 00:48:01,769
API is too low-level and that you know

00:48:00,359 --> 00:48:03,809
you can do everything with it but you

00:48:01,769 --> 00:48:05,339
have to do everything or it's too high

00:48:03,809 --> 00:48:07,739
level where you don't have to everything

00:48:05,339 --> 00:48:09,989
and you can't do anything yeah so have

00:48:07,739 --> 00:48:12,180
you do you have any thoughts on finding

00:48:09,989 --> 00:48:14,099
the right abstraction that's the first

00:48:12,180 --> 00:48:14,819
part the second part is suppose you make

00:48:14,099 --> 00:48:17,460
a mistake

00:48:14,819 --> 00:48:19,260
how do you do version two of the

00:48:17,460 --> 00:48:20,970
without screwing all your customers

00:48:19,260 --> 00:48:23,640
those of us like really good question so

00:48:20,970 --> 00:48:25,829
I mean the first one well it's kind of

00:48:23,640 --> 00:48:28,200
what the two trade offs I try to cover

00:48:25,829 --> 00:48:30,660
in a talk often it of course it helps to

00:48:28,200 --> 00:48:33,000
have users like you know sometimes you

00:48:30,660 --> 00:48:34,950
might see it's always better to start

00:48:33,000 --> 00:48:36,329
maybe a bit too low level and if users

00:48:34,950 --> 00:48:37,200
want more you can gradually add

00:48:36,329 --> 00:48:39,390
something more

00:48:37,200 --> 00:48:41,099
once you have like all of these helpless

00:48:39,390 --> 00:48:42,950
they do everything rolling that back

00:48:41,099 --> 00:48:45,809
into a more low level functionality is

00:48:42,950 --> 00:48:48,329
often a bit too difficult so I do think

00:48:45,809 --> 00:48:51,690
having people use it and then kind of

00:48:48,329 --> 00:48:52,770
slowly move towards like kind of it

00:48:51,690 --> 00:48:54,300
could compromise but that's definitely

00:48:52,770 --> 00:48:56,040
one of the challenges and if you can

00:48:54,300 --> 00:48:57,630
solve that I think you have a good tool

00:48:56,040 --> 00:48:59,790
second yeah backwards compatibility

00:48:57,630 --> 00:49:02,940
that's that's difficult and that's also

00:48:59,790 --> 00:49:06,240
why it's a it's not the best advice but

00:49:02,940 --> 00:49:08,250
try to make good decisions and try to

00:49:06,240 --> 00:49:11,099
make as little mistakes as possible and

00:49:08,250 --> 00:49:13,109
you know you need to be right but also I

00:49:11,099 --> 00:49:16,710
would now when I'm writing API is I'm

00:49:13,109 --> 00:49:18,720
trying to already think about what what

00:49:16,710 --> 00:49:21,210
am I going to do if I ever want to roll

00:49:18,720 --> 00:49:22,619
this back can I easily do that and often

00:49:21,210 --> 00:49:25,440
I feel like if I come up with a design

00:49:22,619 --> 00:49:28,319
that equates easy to manage to backwards

00:49:25,440 --> 00:49:31,559
compatibility it also often means that

00:49:28,319 --> 00:49:33,809
it's overall a better API design or once

00:49:31,559 --> 00:49:36,150
you end up with like random combinations

00:49:33,809 --> 00:49:38,670
of keyword arguments that might not be

00:49:36,150 --> 00:49:40,380
valid anymore in the future that's I

00:49:38,670 --> 00:49:42,960
would say often already kind of a very

00:49:40,380 --> 00:49:45,119
questionable design that you want to

00:49:42,960 --> 00:49:46,380
avoid or you know if you rename

00:49:45,119 --> 00:49:48,470
something want to change something

00:49:46,380 --> 00:49:51,540
can I just raise an error message here

00:49:48,470 --> 00:49:54,119
direct the users to something else and

00:49:51,540 --> 00:49:55,710
it's done but yeah I can deftly I can

00:49:54,119 --> 00:49:57,890
relate to all of these questions of

00:49:55,710 --> 00:49:57,890

YouTube URL: https://www.youtube.com/watch?v=Ivb4AAuj5JY


