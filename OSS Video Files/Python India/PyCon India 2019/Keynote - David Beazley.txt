Title: Keynote - David Beazley
Publication date: 2019-11-16
Playlist: PyCon India 2019
Description: 
	This talk was presented at PyCon India 2019, on Oct 12th - 13th, at the Chennai Trade Centre.
Website: https://in.pycon.org/2019
Captions: 
	00:00:08,490 --> 00:00:17,170
all right a little bit about me so

00:00:11,700 --> 00:00:18,070
February 14th 1983 over Valentine's Day

00:00:17,170 --> 00:00:20,350
yes

00:00:18,070 --> 00:00:22,270
over the weekend I did a lot of work

00:00:20,350 --> 00:00:24,780
with computers I'm working on a simple

00:00:22,270 --> 00:00:27,190
machine language game to Apple to

00:00:24,780 --> 00:00:29,710
machine language is the only language a

00:00:27,190 --> 00:00:31,840
computer understands and is consisted of

00:00:29,710 --> 00:00:33,820
binary number codes probably needed a

00:00:31,840 --> 00:00:37,270
technical editor or copy editor they're

00:00:33,820 --> 00:00:39,550
all other languages are converted to

00:00:37,270 --> 00:00:41,589
this language and I'm gonna make a game

00:00:39,550 --> 00:00:43,899
that's gonna be oh I'm gonna make a game

00:00:41,589 --> 00:00:46,269
that's gonna be trying to move a man

00:00:43,899 --> 00:00:50,469
through a field of moving dots very

00:00:46,269 --> 00:00:55,229
exciting very exciting there's a picture

00:00:50,469 --> 00:00:55,229
of me and my cat about from that year

00:00:56,639 --> 00:01:01,960
and let's write some code I have always

00:01:00,309 --> 00:01:04,570
been kind of fascinated with like the

00:01:01,960 --> 00:01:06,580
workings of machines like like computers

00:01:04,570 --> 00:01:08,920
and kind of low-level details and so

00:01:06,580 --> 00:01:10,600
forth and if you start working with

00:01:08,920 --> 00:01:12,189
machines you start coming across

00:01:10,600 --> 00:01:14,020
different kinds of structures and so

00:01:12,189 --> 00:01:18,119
forth and one of the things that you

00:01:14,020 --> 00:01:20,049
might come across is just like a stack

00:01:18,119 --> 00:01:21,579
stack is actually really easy to

00:01:20,049 --> 00:01:24,009
implement in a Python you can do with a

00:01:21,579 --> 00:01:25,930
list so maybe we make a list and they

00:01:24,009 --> 00:01:27,729
and then that a stack has like two

00:01:25,930 --> 00:01:30,250
operations on it you have like a push

00:01:27,729 --> 00:01:32,770
item where you can just append something

00:01:30,250 --> 00:01:34,570
onto your onto your stack there and you

00:01:32,770 --> 00:01:38,170
have a pop where you just return

00:01:34,570 --> 00:01:39,909
something coming back now stacks are

00:01:38,170 --> 00:01:41,859
actually kind of an amazing thing I

00:01:39,909 --> 00:01:43,420
don't I'm gonna do a demo of that but

00:01:41,859 --> 00:01:46,090
but but you have like that you have a

00:01:43,420 --> 00:01:48,460
stack it turns out that stacks can be

00:01:46,090 --> 00:01:49,899
just used for all sorts of amazing stuff

00:01:48,460 --> 00:01:52,270
like actually making like little

00:01:49,899 --> 00:01:54,100
machines like you can actually make like

00:01:52,270 --> 00:01:56,229
your own like a little machine code or

00:01:54,100 --> 00:01:58,749
your own little executor or something

00:01:56,229 --> 00:02:01,259
like that and so an example of what

00:01:58,749 --> 00:02:04,299
something like that might look like is

00:02:01,259 --> 00:02:06,100
you can basically come up with like your

00:02:04,299 --> 00:02:08,020
own like little like little machine

00:02:06,100 --> 00:02:10,840
language this is an example of kind of a

00:02:08,020 --> 00:02:13,750
stack based machine language that

00:02:10,840 --> 00:02:16,930
computes two point two plus three times

00:02:13,750 --> 00:02:18,670
0.01 and here's how you might here's how

00:02:16,930 --> 00:02:21,220
you might do something like that you can

00:02:18,670 --> 00:02:24,170
take like your stack

00:02:21,220 --> 00:02:25,940
give it an execute function or a method

00:02:24,170 --> 00:02:28,520
like that maybe I'm gonna change this

00:02:25,940 --> 00:02:30,560
into the name machine at this point and

00:02:28,520 --> 00:02:32,360
what you will do is just write a little

00:02:30,560 --> 00:02:34,280
like a little loop where you just

00:02:32,360 --> 00:02:35,930
execute opcodes and this like

00:02:34,280 --> 00:02:37,670
instruction sequence like you can say

00:02:35,930 --> 00:02:40,070
give me an operation and then maybe some

00:02:37,670 --> 00:02:42,620
arguments to the to the instruction and

00:02:40,070 --> 00:02:44,300
then you can write a little like a

00:02:42,620 --> 00:02:46,850
little little machine like you can say

00:02:44,300 --> 00:02:52,940
if op is cons then maybe you push

00:02:46,850 --> 00:02:55,700
something onto the stack if op is add

00:02:52,940 --> 00:02:57,500
for instance maybe you pull things off

00:02:55,700 --> 00:02:59,960
the staff like you get the right thing

00:02:57,500 --> 00:03:03,830
off the stack you get the left thing off

00:02:59,960 --> 00:03:06,680
the stack and then maybe you put the

00:03:03,830 --> 00:03:09,470
result back back onto the stack so self

00:03:06,680 --> 00:03:10,850
push flush plus right you could do the

00:03:09,470 --> 00:03:12,830
same thing for like a multiply

00:03:10,850 --> 00:03:16,520
instruction for instance okay so you can

00:03:12,830 --> 00:03:17,930
take that code do multiply and all of a

00:03:16,520 --> 00:03:19,610
sudden you're kind of you're you can't

00:03:17,930 --> 00:03:22,070
have on the way to making like a little

00:03:19,610 --> 00:03:24,140
like a little machine here I'm gonna put

00:03:22,070 --> 00:03:27,770
a print statement in here just so you

00:03:24,140 --> 00:03:30,050
can see what's happening so maybe print

00:03:27,770 --> 00:03:32,090
the OP the ARDS what the stack is I'm

00:03:30,050 --> 00:03:36,440
also gonna put a little safeguard in

00:03:32,090 --> 00:03:38,450
here just in case I screw up I'll get an

00:03:36,440 --> 00:03:41,630
X an exception message sort of saying

00:03:38,450 --> 00:03:43,580
like a bad operation okay so you might

00:03:41,630 --> 00:03:45,650
start with something like that and I

00:03:43,580 --> 00:03:47,390
used to think this was amazing when I

00:03:45,650 --> 00:03:48,920
learned about this to say I don't know

00:03:47,390 --> 00:03:50,540
where I learned about staff machines it

00:03:48,920 --> 00:03:51,800
probably was not middle school but

00:03:50,540 --> 00:03:53,060
somewhere along the way I learned about

00:03:51,800 --> 00:03:55,070
stacks and the fact you could make

00:03:53,060 --> 00:03:57,380
machines and just like this is like

00:03:55,070 --> 00:03:58,850
totally cool so the way that this works

00:03:57,380 --> 00:04:01,730
is you'd make like a little machine and

00:03:58,850 --> 00:04:03,410
then you'd execute code and then if it

00:04:01,730 --> 00:04:07,400
worked like the result would just be

00:04:03,410 --> 00:04:09,020
there on the top of the stack so let's

00:04:07,400 --> 00:04:11,630
give that a try and actually see if it

00:04:09,020 --> 00:04:16,060
see if it works here so you would say

00:04:11,630 --> 00:04:18,680
Python your Python 3 machine PI and

00:04:16,060 --> 00:04:21,500
nothing happens let me Oh let me let me

00:04:18,680 --> 00:04:24,320
see what happens here good

00:04:21,500 --> 00:04:28,510
execute oh I need a main function okay

00:04:24,320 --> 00:04:31,220
so your job in the front row by the way

00:04:28,510 --> 00:04:33,110
is to do kind of a code review like I

00:04:31,220 --> 00:04:35,720
don't actually use I don't actually use

00:04:33,110 --> 00:04:37,250
syntax like tooltips or anything like

00:04:35,720 --> 00:04:39,170
that so I need more like an audible

00:04:37,250 --> 00:04:41,120
version like kind of the louder and like

00:04:39,170 --> 00:04:44,330
bored yelling that takes place I'll know

00:04:41,120 --> 00:04:58,120
that I'll know that something is wrong

00:04:44,330 --> 00:05:02,270
okay so soft that stack off that bush oh

00:04:58,120 --> 00:05:05,420
I don't I don't okay no okay nothing

00:05:02,270 --> 00:05:07,580
like live debugging - okay okay so okay

00:05:05,420 --> 00:05:09,080
so good this get the stack working here

00:05:07,580 --> 00:05:11,420
what do you say is this on a journey

00:05:09,080 --> 00:05:14,660
through operations and it comes up into

00:05:11,420 --> 00:05:16,070
prints result 2.3 okay awesome you know

00:05:14,660 --> 00:05:19,700
it's like I've got this start of like a

00:05:16,070 --> 00:05:20,750
little like little machine here and if

00:05:19,700 --> 00:05:23,000
you start playing around with these

00:05:20,750 --> 00:05:24,590
machines you start thinking maybe I

00:05:23,000 --> 00:05:26,270
could make this more like a more like a

00:05:24,590 --> 00:05:29,030
CPU or something I could give it more

00:05:26,270 --> 00:05:30,350
features so maybe one of the features

00:05:29,030 --> 00:05:33,320
that you might want to give it is some

00:05:30,350 --> 00:05:34,880
memory I don't know maybe we're gonna

00:05:33,320 --> 00:05:38,300
make like a byte array of some of

00:05:34,880 --> 00:05:39,830
simulated memory of some kind the most

00:05:38,300 --> 00:05:41,960
memory that we'll probably ever need is

00:05:39,830 --> 00:05:44,000
64 K so I'll give it like kind of thing

00:05:41,960 --> 00:05:47,060
you know these default size like like

00:05:44,000 --> 00:05:49,580
that and then maybe I'll start building

00:05:47,060 --> 00:05:53,240
like some functions to kind of load and

00:05:49,580 --> 00:05:54,590
store from memory again I'm thinking

00:05:53,240 --> 00:05:57,770
like you know can I make like a little

00:05:54,590 --> 00:06:00,710
CPU or something like that now the

00:05:57,770 --> 00:06:02,240
problem is loading and storing you said

00:06:00,710 --> 00:06:04,370
I'm gonna have to make some decisions

00:06:02,240 --> 00:06:06,110
about how this memory actually works

00:06:04,370 --> 00:06:08,960
right I mean okay I'm gonna have to pull

00:06:06,110 --> 00:06:11,000
something out of the memory and I have

00:06:08,960 --> 00:06:15,020
to make some like decisions of what's

00:06:11,000 --> 00:06:17,570
what's here so for lack of a better it's

00:06:15,020 --> 00:06:18,740
a better alternative I'm just going to

00:06:17,570 --> 00:06:23,479
assume that everything is a

00:06:18,740 --> 00:06:25,100
floating-point number maybe I've been

00:06:23,479 --> 00:06:27,800
doing too much JavaScript or something

00:06:25,100 --> 00:06:29,150
like that okay so so we're gonna we're

00:06:27,800 --> 00:06:30,540
gonna we're basically going to do like

00:06:29,150 --> 00:06:41,940
some memory unpack

00:06:30,540 --> 00:06:44,130
of value if you ever use the structu

00:06:41,940 --> 00:06:47,400
module in Python before that's that's a

00:06:44,130 --> 00:06:48,810
way of kind of packing values okay so we

00:06:47,400 --> 00:06:51,270
gonna have this machine it has like a

00:06:48,810 --> 00:06:54,690
load in a store or the pack and unpack

00:06:51,270 --> 00:06:56,610
kind of thing in order to use that I got

00:06:54,690 --> 00:06:58,320
an import stock and then I'm gonna give

00:06:56,610 --> 00:07:02,040
that sort of more I'm gonna give myself

00:06:58,320 --> 00:07:03,720
sort of more instructions here okay so

00:07:02,040 --> 00:07:05,400
if there's like a there's like a load

00:07:03,720 --> 00:07:07,500
instruction what I would do is get the

00:07:05,400 --> 00:07:10,650
address by kind of popping that off the

00:07:07,500 --> 00:07:16,740
stack and then pushing on like the value

00:07:10,650 --> 00:07:18,810
of loading it if I wanted to do a store

00:07:16,740 --> 00:07:20,700
I would get a value off the stack and

00:07:18,810 --> 00:07:23,250
then I would get an address off the

00:07:20,700 --> 00:07:26,610
stack and then I would put that into my

00:07:23,250 --> 00:07:28,440
memory okay so store it address value so

00:07:26,610 --> 00:07:30,330
if you add these these kinds of

00:07:28,440 --> 00:07:31,890
instructions suddenly your programs

00:07:30,330 --> 00:07:33,660
become a little bit more powerful you

00:07:31,890 --> 00:07:36,600
can start having the concept of

00:07:33,660 --> 00:07:39,180
variables maybe like you know X is 2 and

00:07:36,600 --> 00:07:41,910
V is 3 and you know maybe I do

00:07:39,180 --> 00:07:45,330
computations like X is equal to X plus V

00:07:41,910 --> 00:07:46,860
times 0.01 or something where I'm now

00:07:45,330 --> 00:07:50,040
like I'm not like reading and writing

00:07:46,860 --> 00:07:52,440
writing data on my machine in order to

00:07:50,040 --> 00:07:54,810
make that work what you have to do is

00:07:52,440 --> 00:07:57,660
basically give like these things a

00:07:54,810 --> 00:07:59,400
memory address I'm actually introducing

00:07:57,660 --> 00:08:01,710
like the concept of a pointer here so I

00:07:59,400 --> 00:08:04,320
have to pick some number like some

00:08:01,710 --> 00:08:06,890
address for this X is gonna live I don't

00:08:04,320 --> 00:08:11,760
know is anybody have a favorite number

00:08:06,890 --> 00:08:16,410
22 okay that can work okay X is gonna be

00:08:11,760 --> 00:08:18,090
at 22 V will be it I don't know 42 okay

00:08:16,410 --> 00:08:20,460
fair fair enough

00:08:18,090 --> 00:08:22,860
so what will happen now if you wanted to

00:08:20,460 --> 00:08:24,690
load from variables is you kind of have

00:08:22,860 --> 00:08:26,340
to you have to put like the address of a

00:08:24,690 --> 00:08:28,200
variable on the stack and then you would

00:08:26,340 --> 00:08:30,070
load it and then you would put the

00:08:28,200 --> 00:08:33,820
address of the other variable on this

00:08:30,070 --> 00:08:35,470
stack and you would load that and then

00:08:33,820 --> 00:08:37,060
at the end what you would have to do is

00:08:35,470 --> 00:08:38,860
store the value now the store is a

00:08:37,060 --> 00:08:40,300
little weird it turns up the way I I

00:08:38,860 --> 00:08:42,010
have this structure it is they have to

00:08:40,300 --> 00:08:44,500
put the address first and then you put

00:08:42,010 --> 00:08:46,330
it do the value afterwards so you kind

00:08:44,500 --> 00:08:49,000
of put these like these like addresses

00:08:46,330 --> 00:08:50,530
on their loads and stores and then the

00:08:49,000 --> 00:08:52,630
way that the machine would work is you'd

00:08:50,530 --> 00:08:55,000
have to set up some variables so like I

00:08:52,630 --> 00:08:58,060
basically say well Oh X address I'm

00:08:55,000 --> 00:09:01,840
going to store - and at the wall at the

00:08:58,060 --> 00:09:03,880
V address I would store 3 and then I

00:09:01,840 --> 00:09:05,820
would execute my code and then at the

00:09:03,880 --> 00:09:08,530
end instead of popping something out I

00:09:05,820 --> 00:09:11,800
would just load it load it out of act

00:09:08,530 --> 00:09:13,390
ok so kind of building up the Machine

00:09:11,800 --> 00:09:16,090
giving it kind of memory here your

00:09:13,390 --> 00:09:18,040
memory address is load in store and I'll

00:09:16,090 --> 00:09:21,220
keep my fingers that this thing that

00:09:18,040 --> 00:09:27,010
this thing still runs here self stored

00:09:21,220 --> 00:09:28,630
value ok I make my cat is cute but I

00:09:27,010 --> 00:09:30,790
don't want to keep looking at that oh I

00:09:28,630 --> 00:09:33,100
just have a typo in the in the variable

00:09:30,790 --> 00:09:38,110
name front row you're letting me down on

00:09:33,100 --> 00:09:39,460
that ok ok so so we do that and it comes

00:09:38,110 --> 00:09:41,500
back with the same you know kind of the

00:09:39,460 --> 00:09:43,240
same result when we're doing load and

00:09:41,500 --> 00:09:46,090
stores kind of stuff

00:09:43,240 --> 00:09:49,330
now somebody's gonna some people look at

00:09:46,090 --> 00:09:52,540
this code and and and they're gonna say

00:09:49,330 --> 00:09:54,370
you know that's that's great I mean you

00:09:52,540 --> 00:09:57,370
know okay you have math operations and

00:09:54,370 --> 00:09:58,810
you have load in store and stuff but you

00:09:57,370 --> 00:10:00,730
really should probably have like some

00:09:58,810 --> 00:10:02,650
functions in here or something you know

00:10:00,730 --> 00:10:05,920
like like could you have like a function

00:10:02,650 --> 00:10:08,320
update position that just computes like

00:10:05,920 --> 00:10:11,100
that result you know X plus you know

00:10:08,320 --> 00:10:14,470
return X plus V times DT or something

00:10:11,100 --> 00:10:15,850
and then use that you know cuz so it

00:10:14,470 --> 00:10:19,150
kind of kind of can I build function

00:10:15,850 --> 00:10:22,300
calls into my machine and it turns out

00:10:19,150 --> 00:10:25,690
that that's not too bad to do as well

00:10:22,300 --> 00:10:27,960
what you can do for functions is maybe

00:10:25,690 --> 00:10:30,460
introduce the concept of a function

00:10:27,960 --> 00:10:32,890
there are a few things that are kind of

00:10:30,460 --> 00:10:35,860
related to functions like how many

00:10:32,890 --> 00:10:37,630
parameters do they take you know doesn't

00:10:35,860 --> 00:10:39,750
return a value to what code is

00:10:37,630 --> 00:10:44,370
associated with it so

00:10:39,750 --> 00:10:48,330
add I'm gonna add these in here typos

00:10:44,370 --> 00:10:50,960
okay I'll come back to that yeah I just

00:10:48,330 --> 00:10:52,950
have just have to make sure that they're

00:10:50,960 --> 00:10:55,530
okay so gonna have a you're gonna have a

00:10:52,950 --> 00:10:57,570
few features like that and then what I

00:10:55,530 --> 00:11:00,120
what I'm gonna need to do is add a

00:10:57,570 --> 00:11:03,000
little bit of stuff to my machine to

00:11:00,120 --> 00:11:05,040
kind of make function calls work well

00:11:03,000 --> 00:11:07,020
one of the ways that I could do that is

00:11:05,040 --> 00:11:08,370
I could add a maybe a call method where

00:11:07,020 --> 00:11:11,430
you give me a function and some

00:11:08,370 --> 00:11:14,820
arguments and then I set up kind of like

00:11:11,430 --> 00:11:15,750
a like a function call now one of the

00:11:14,820 --> 00:11:18,450
things that you're going to need with

00:11:15,750 --> 00:11:21,120
functions are a notion of local

00:11:18,450 --> 00:11:22,110
variables and if like when you call a

00:11:21,120 --> 00:11:24,300
function you get like news local

00:11:22,110 --> 00:11:27,060
variables and parameters and stuff so

00:11:24,300 --> 00:11:29,130
I'm gonna I'm gonna make it look like a

00:11:27,060 --> 00:11:31,230
bunch of local variables that isn't kind

00:11:29,130 --> 00:11:33,810
of a neat little trick there what I'm

00:11:31,230 --> 00:11:38,310
doing is making a mapping between the

00:11:33,810 --> 00:11:40,200
numbers and the arguments don't be a

00:11:38,310 --> 00:11:42,390
quiz on this later okay little little

00:11:40,200 --> 00:11:44,700
trick with the enumerate function and

00:11:42,390 --> 00:11:46,290
then what I'm what I'm gonna do is kind

00:11:44,700 --> 00:11:48,150
of pump this whole thing off to the

00:11:46,290 --> 00:11:51,810
execute function where I'll have some

00:11:48,150 --> 00:11:54,180
I'll pass it the locals and then if the

00:11:51,810 --> 00:11:56,850
function returns something I'll pop

00:11:54,180 --> 00:11:58,080
something off this day okay so I'm sort

00:11:56,850 --> 00:11:59,700
of setting up this this like little

00:11:58,080 --> 00:12:00,510
function call where it's going to set up

00:11:59,700 --> 00:12:02,610
some locals

00:12:00,510 --> 00:12:05,070
I'm gonna go execute the code you know

00:12:02,610 --> 00:12:07,440
pop it off the stack I'm gonna modify my

00:12:05,070 --> 00:12:10,110
my execute code here to take in the

00:12:07,440 --> 00:12:12,330
locals and I'm gonna build some more

00:12:10,110 --> 00:12:14,880
features are added one of the one of the

00:12:12,330 --> 00:12:16,920
one thing I'll build are some operations

00:12:14,880 --> 00:12:18,570
for dealing with the local variables

00:12:16,920 --> 00:12:22,170
like maybe I have an instruction called

00:12:18,570 --> 00:12:25,820
local get and the way that that works is

00:12:22,170 --> 00:12:28,170
it will put something on to the stack I

00:12:25,820 --> 00:12:29,910
kind of like kind of looking it up in

00:12:28,170 --> 00:12:35,070
the locals dictionary and then maybe I

00:12:29,910 --> 00:12:38,240
have another operation local said that

00:12:35,070 --> 00:12:38,240
does the opposite of that

00:12:41,750 --> 00:12:46,410
okay this is kind of like load in store

00:12:44,820 --> 00:12:49,620
but it's kind of manipulating that that

00:12:46,410 --> 00:12:51,180
like vocals thing a little bit and then

00:12:49,620 --> 00:12:54,150
the other thing you're going to need to

00:12:51,180 --> 00:12:56,160
do function is I need to have some way

00:12:54,150 --> 00:12:59,070
to call a function now this is a little

00:12:56,160 --> 00:13:01,140
this is this is a little tricky with the

00:12:59,070 --> 00:13:02,700
call one of the things with the call is

00:13:01,140 --> 00:13:08,040
I need to have some way to like

00:13:02,700 --> 00:13:09,330
reference the function like somehow like

00:13:08,040 --> 00:13:11,100
I need to get like like what am i

00:13:09,330 --> 00:13:15,570
referring to like what is the function

00:13:11,100 --> 00:13:17,820
object in order to do that I'm going to

00:13:15,570 --> 00:13:20,430
extend my machine with like a little

00:13:17,820 --> 00:13:22,170
function table so I'm gonna I'm actually

00:13:20,430 --> 00:13:25,410
going to pass in functions is like a

00:13:22,170 --> 00:13:26,970
little it's an argument here okay so

00:13:25,410 --> 00:13:28,200
we're gonna have like that like think of

00:13:26,970 --> 00:13:31,230
this this is like the function table

00:13:28,200 --> 00:13:33,780
here okay that's coming in and I'm gonna

00:13:31,230 --> 00:13:36,510
have a call operation is essentially

00:13:33,780 --> 00:13:40,580
it's gonna look up what the function is

00:13:36,510 --> 00:13:40,580
so will will will look up the function

00:13:40,670 --> 00:13:47,070
okay look it up and then we have to pull

00:13:44,100 --> 00:13:50,910
some Arden's off the stack so what we'll

00:13:47,070 --> 00:13:54,080
do is we'll pop the arguments off the

00:13:50,910 --> 00:13:54,080
off the stack here

00:13:56,589 --> 00:14:00,949
that underscore by the way is just I'm

00:13:59,060 --> 00:14:04,069
disregarding the variable I'm just like

00:14:00,949 --> 00:14:05,779
a I don't care about that one one one

00:14:04,069 --> 00:14:07,970
little tricky thing with this popping

00:14:05,779 --> 00:14:11,360
off the stack is they're gonna be in

00:14:07,970 --> 00:14:13,009
reverse order so I'm gonna I'm gonna

00:14:11,360 --> 00:14:17,240
flip the reef like I'm gonna reverse it

00:14:13,009 --> 00:14:19,940
and then I'm going to basically call

00:14:17,240 --> 00:14:24,800
myself I would say self call funked with

00:14:19,940 --> 00:14:26,630
the with the arguments and if it returns

00:14:24,800 --> 00:14:31,759
something I'll take the result and put

00:14:26,630 --> 00:14:33,589
it back on this day okay so you got like

00:14:31,759 --> 00:14:35,870
you have function call what that's gonna

00:14:33,589 --> 00:14:38,180
look like in the little machine code

00:14:35,870 --> 00:14:40,579
that I'm working on is that you would

00:14:38,180 --> 00:14:42,110
have to define functions in the machine

00:14:40,579 --> 00:14:44,089
code like I would have to say update

00:14:42,110 --> 00:14:47,930
function is you'll function number

00:14:44,089 --> 00:14:49,550
parameters equals 3 returns equals true

00:14:47,930 --> 00:14:50,990
the returns by the way I'm just treating

00:14:49,550 --> 00:14:53,750
that as a boolean like does it return

00:14:50,990 --> 00:14:57,350
something or not okay so so returns true

00:14:53,750 --> 00:14:59,149
and then you would give it code that

00:14:57,350 --> 00:15:00,800
does the function and so what the code

00:14:59,149 --> 00:15:03,319
might look like for this is I would say

00:15:00,800 --> 00:15:07,670
local get 0 that's basically getting the

00:15:03,319 --> 00:15:10,750
X and then I would do local yet one

00:15:07,670 --> 00:15:10,750
that's the thief

00:15:13,540 --> 00:15:18,430
what we get to that's the the DT and

00:15:16,660 --> 00:15:20,589
then I would do my math calculations

00:15:18,430 --> 00:15:22,389
like multiply together and then add the

00:15:20,589 --> 00:15:26,620
results and then maybe that's just the

00:15:22,389 --> 00:15:30,760
end of my function there and here's my

00:15:26,620 --> 00:15:32,139
function table okay update update

00:15:30,760 --> 00:15:34,660
position okay so I'm gonna have my

00:15:32,139 --> 00:15:36,579
little function table like that and what

00:15:34,660 --> 00:15:37,930
I will what I will do is kind of modify

00:15:36,579 --> 00:15:39,850
many machine now I'll say okay well

00:15:37,930 --> 00:15:42,459
here's here here's your set of functions

00:15:39,850 --> 00:15:44,440
of pass in the function table and then

00:15:42,459 --> 00:15:48,360
if I wanted to call a function instead

00:15:44,440 --> 00:15:50,560
of doing this just stuff at the end here

00:15:48,360 --> 00:15:55,240
so I would replace that with a function

00:15:50,560 --> 00:15:57,760
call I would just say Paul zero that's

00:15:55,240 --> 00:15:59,370
the what was that update position or

00:15:57,760 --> 00:16:01,600
something whatever I called that

00:15:59,370 --> 00:16:04,300
okay so you've kind of added you've

00:16:01,600 --> 00:16:06,670
added things to your add two things to

00:16:04,300 --> 00:16:09,100
your code there if this if this is

00:16:06,670 --> 00:16:12,040
working I'm not sure it will be but

00:16:09,100 --> 00:16:14,740
we'll see it should produce the same the

00:16:12,040 --> 00:16:17,649
same answer as it did before

00:16:14,740 --> 00:16:19,750
oh one but it once the execute takes

00:16:17,649 --> 00:16:22,540
locals you got to pass that third third

00:16:19,750 --> 00:16:24,760
argument in there okay let's let's try

00:16:22,540 --> 00:16:28,899
it okay so we get to get the same answer

00:16:24,760 --> 00:16:31,810
as before one little digression by the

00:16:28,899 --> 00:16:33,160
way in one of the breaks I've talked to

00:16:31,810 --> 00:16:34,540
a lot of people at the conference I was

00:16:33,160 --> 00:16:37,769
and I don't remember who it was but

00:16:34,540 --> 00:16:41,290
somebody asked me how does Python work

00:16:37,769 --> 00:16:42,790
but how does Python take like like

00:16:41,290 --> 00:16:44,440
Python code and turn it into like

00:16:42,790 --> 00:16:48,040
machine instructions or something like

00:16:44,440 --> 00:16:49,329
that it actually does this just this

00:16:48,040 --> 00:16:51,100
might be more than you ever wanted to

00:16:49,329 --> 00:16:53,850
know but like if you write up like a

00:16:51,100 --> 00:16:56,550
Python function like update position

00:16:53,850 --> 00:17:01,089
okay this this is just pure Python code

00:16:56,550 --> 00:17:05,380
your xvd T and you said return X plus V

00:17:01,089 --> 00:17:07,750
times V DT like that what happens

00:17:05,380 --> 00:17:11,490
underneath the hood of that is Python

00:17:07,750 --> 00:17:14,559
turns it into like a little Python

00:17:11,490 --> 00:17:17,890
machine code it's like so you see like

00:17:14,559 --> 00:17:19,900
load X load V load et you can see like

00:17:17,890 --> 00:17:20,700
the numbers there load zero load one

00:17:19,900 --> 00:17:23,550
load 2

00:17:20,700 --> 00:17:25,140
like exactly the same thing that I that

00:17:23,550 --> 00:17:28,860
I did and then and then there's like

00:17:25,140 --> 00:17:30,240
binary x nary and and and and so forth

00:17:28,860 --> 00:17:32,460
it's like this is this is how Python

00:17:30,240 --> 00:17:35,070
works it's like it's it's it's actually

00:17:32,460 --> 00:17:36,180
a little like stack machine kind of what

00:17:35,070 --> 00:17:37,440
I'm what I'm doing now

00:17:36,180 --> 00:17:39,690
now I'm not I'm not actually trying to

00:17:37,440 --> 00:17:42,050
reemployment but if you're if you're

00:17:39,690 --> 00:17:45,360
kind of wondering what Python is doing

00:17:42,050 --> 00:17:47,520
it's doing that it's interpreted okay so

00:17:45,360 --> 00:17:52,920
it's runs runs on a little little little

00:17:47,520 --> 00:17:55,170
machine there all right now continuing

00:17:52,920 --> 00:17:57,690
in this in this machine model for a bit

00:17:55,170 --> 00:17:59,910
okay it's like okay I'm you can it's

00:17:57,690 --> 00:18:01,290
like I'm geeked out about like low-level

00:17:59,910 --> 00:18:02,970
details and it's like I want to know

00:18:01,290 --> 00:18:05,850
like how did CPUs work how do you

00:18:02,970 --> 00:18:08,820
machines work the one thing that my

00:18:05,850 --> 00:18:12,690
machine is missing well it's it's

00:18:08,820 --> 00:18:15,180
missing kind of a critical feature you

00:18:12,690 --> 00:18:16,890
know any not put anybody on the spot any

00:18:15,180 --> 00:18:21,570
thoughts on what it's probably missing

00:18:16,890 --> 00:18:23,940
here and okay well the one thing that

00:18:21,570 --> 00:18:26,010
it's missing is I don't have any way to

00:18:23,940 --> 00:18:28,230
do control flow like I don't have any

00:18:26,010 --> 00:18:32,330
way to do if statements like if tests

00:18:28,230 --> 00:18:34,890
you know consequence you know else

00:18:32,330 --> 00:18:37,680
alternative things like that I also

00:18:34,890 --> 00:18:39,540
don't have any way to do like like loose

00:18:37,680 --> 00:18:40,710
like while loops or anything like that

00:18:39,540 --> 00:18:42,840
this thing is just going through

00:18:40,710 --> 00:18:46,800
instructions and it just like that

00:18:42,840 --> 00:18:48,930
that's it and in order to do that you

00:18:46,800 --> 00:18:51,060
have to introduce some kind of like

00:18:48,930 --> 00:18:53,070
branching instruction or something like

00:18:51,060 --> 00:18:55,350
maybe you have a branch instruction of

00:18:53,070 --> 00:18:58,230
some sort and then maybe you have a

00:18:55,350 --> 00:19:00,300
conditional branch so so all processors

00:18:58,230 --> 00:19:04,820
have this you know they have some way of

00:19:00,300 --> 00:19:07,890
branching but in order to do this branch

00:19:04,820 --> 00:19:09,840
you have you have to do some kind of go

00:19:07,890 --> 00:19:12,090
to stay there I mean you have to

00:19:09,840 --> 00:19:15,510
introduce like some kind of jump or you

00:19:12,090 --> 00:19:18,150
know go to and like go twos have a way

00:19:15,510 --> 00:19:19,740
of sort of offending people not to

00:19:18,150 --> 00:19:24,000
mention that they don't you don't even

00:19:19,740 --> 00:19:25,980
have them in Python but so one question

00:19:24,000 --> 00:19:29,670
that comes up is just with well what do

00:19:25,980 --> 00:19:31,530
you what's the next best thing to a goat

00:19:29,670 --> 00:19:32,300
like if you don't have go to what would

00:19:31,530 --> 00:19:35,630
be the next

00:19:32,300 --> 00:19:37,310
thing that you could do and I would

00:19:35,630 --> 00:19:40,430
claim the next best thing is to simply

00:19:37,310 --> 00:19:42,170
raise an exception this is really gonna

00:19:40,430 --> 00:19:44,270
offend people they're like raise an

00:19:42,170 --> 00:19:46,130
exception like what so so what is what

00:19:44,270 --> 00:19:48,770
is halfway so if you want the program to

00:19:46,130 --> 00:19:52,490
work to stop or branch one way to do

00:19:48,770 --> 00:19:55,550
that is just to stop they're gonna look

00:19:52,490 --> 00:20:00,560
at that same like what is that about the

00:19:55,550 --> 00:20:02,360
conditional branch here is it's going to

00:20:00,560 --> 00:20:04,160
be looks something like that

00:20:02,360 --> 00:20:06,710
like if the top thing on the stack is

00:20:04,160 --> 00:20:14,870
true then we Bray will have to introduce

00:20:06,710 --> 00:20:17,720
an exception for this and this is gonna

00:20:14,870 --> 00:20:19,910
look really weird it's like not only are

00:20:17,720 --> 00:20:21,770
you breaking but it has like a level

00:20:19,910 --> 00:20:23,570
that you can dial up like I don't know

00:20:21,770 --> 00:20:25,190
like the amount that you're breaking so

00:20:23,570 --> 00:20:27,260
you know you'd break zero or you could

00:20:25,190 --> 00:20:28,910
break like ten or something and maybe

00:20:27,260 --> 00:20:30,260
maybe one is more than the other but

00:20:28,910 --> 00:20:33,260
you're gonna have this this kind of

00:20:30,260 --> 00:20:35,600
break statement and then the other thing

00:20:33,260 --> 00:20:37,820
that I'm gonna introduce is the notion

00:20:35,600 --> 00:20:40,100
of a code block now this is gonna be a

00:20:37,820 --> 00:20:45,080
little strange but it's basically like a

00:20:40,100 --> 00:20:47,300
nested set of instruction think if this

00:20:45,080 --> 00:20:49,130
is like curly braces or something or an

00:20:47,300 --> 00:20:53,660
indentation it's basically going to be a

00:20:49,130 --> 00:20:55,340
black of code that's like like nested

00:20:53,660 --> 00:20:57,650
okay so you're gonna have to have this

00:20:55,340 --> 00:21:00,890
code black and what I'm gonna do with

00:20:57,650 --> 00:21:05,920
the code black is essentially just try

00:21:00,890 --> 00:21:08,720
to execute it so like do a recursive

00:21:05,920 --> 00:21:12,200
execution and then I'm gonna catch that

00:21:08,720 --> 00:21:14,090
break exception and then if the level is

00:21:12,200 --> 00:21:16,550
too is still high I'm just gonna

00:21:14,090 --> 00:21:20,060
decrement the level Andry raise the

00:21:16,550 --> 00:21:22,130
exception you're like oh so it was like

00:21:20,060 --> 00:21:24,310
you're looking at that or what it's like

00:21:22,130 --> 00:21:28,310
what is that that is that is like

00:21:24,310 --> 00:21:29,810
crazytown kind of control flow here's

00:21:28,310 --> 00:21:33,230
here's the thing that you get with that

00:21:29,810 --> 00:21:36,380
it turns out that using nothing but the

00:21:33,230 --> 00:21:38,390
black in the end of breaks you can

00:21:36,380 --> 00:21:40,310
implement like an if statement

00:21:38,390 --> 00:21:41,870
this is what it looks like to implement

00:21:40,310 --> 00:21:43,400
an if statement I'll move it I'll move

00:21:41,870 --> 00:21:45,800
it down a little bit so they're kind of

00:21:43,400 --> 00:21:48,320
together what you do is you just kind of

00:21:45,800 --> 00:21:50,720
nest to black since I like a block

00:21:48,320 --> 00:21:52,730
inside of another black you put the test

00:21:50,720 --> 00:21:55,010
in there and then you put these like

00:21:52,730 --> 00:21:56,390
weird branch statements with a zero and

00:21:55,010 --> 00:21:59,450
one and here's how this works

00:21:56,390 --> 00:22:01,640
basically the end of a black gets a

00:21:59,450 --> 00:22:04,190
label attached to it like the end of the

00:22:01,640 --> 00:22:06,590
inner black is label 1 and the end of

00:22:04,190 --> 00:22:08,930
the outer black is label or that's label

00:22:06,590 --> 00:22:10,940
0 and the outer block is label one and

00:22:08,930 --> 00:22:16,640
then this ends up being like a go to

00:22:10,940 --> 00:22:18,560
like go to 1 and go to 0 so you do the

00:22:16,640 --> 00:22:20,450
test and then if the test is true you

00:22:18,560 --> 00:22:22,610
basically just bail on the rest of this

00:22:20,450 --> 00:22:24,680
black and you go to label 0 and then it

00:22:22,610 --> 00:22:26,840
you run the consequence and this thing

00:22:24,680 --> 00:22:29,000
does the alternative and you you kind of

00:22:26,840 --> 00:22:31,100
you kind of branch out again there'll be

00:22:29,000 --> 00:22:33,110
a quiz on that later so you know kind of

00:22:31,100 --> 00:22:36,920
kind of a while and then you could do

00:22:33,110 --> 00:22:41,480
the same thing to two loops it turns out

00:22:36,920 --> 00:22:43,130
if you want to do like a while loop you

00:22:41,480 --> 00:22:44,660
introduce a loop instruction of this

00:22:43,130 --> 00:22:46,460
this thing is it's going to be even

00:22:44,660 --> 00:22:49,640
stranger I'm going to go into an

00:22:46,460 --> 00:22:52,370
infinite loop where I just try to

00:22:49,640 --> 00:22:56,150
execute a bunch of code and then right

00:22:52,370 --> 00:22:58,580
after I execute it I break and then I

00:22:56,150 --> 00:23:01,190
catch this exception and then if the the

00:22:58,580 --> 00:23:04,240
level is greater than zero we do the

00:23:01,190 --> 00:23:04,240
same little trick

00:23:06,520 --> 00:23:12,190
like to play your dad now what it's like

00:23:09,550 --> 00:23:15,760
what is dad basically okay so that that

00:23:12,190 --> 00:23:22,540
is really crazy what is what is going on

00:23:15,760 --> 00:23:24,520
there is a we undo that insert insert I

00:23:22,540 --> 00:23:26,650
have a few things to kind of tie speed

00:23:24,520 --> 00:23:31,810
up typing this is how you would

00:23:26,650 --> 00:23:34,410
basically introduce a while loop so if

00:23:31,810 --> 00:23:38,200
you had a while loop like while test

00:23:34,410 --> 00:23:40,300
body like that you end up doing it with

00:23:38,200 --> 00:23:43,000
like another like like this nested black

00:23:40,300 --> 00:23:45,400
idea and it turns out that these blocks

00:23:43,000 --> 00:23:47,830
basically have magic labels it turns out

00:23:45,400 --> 00:23:52,000
labels 0 is basically the start of a

00:23:47,830 --> 00:23:54,580
loop and label 1 it's like the end of

00:23:52,000 --> 00:23:56,440
the outer black and like this thing here

00:23:54,580 --> 00:24:01,120
is like a go to 0 that's kind of like a

00:23:56,440 --> 00:24:02,650
continued statement and this is go to 1

00:24:01,120 --> 00:24:05,890
and that's kind of like a break

00:24:02,650 --> 00:24:08,530
statement okay so you have this kind of

00:24:05,890 --> 00:24:10,720
very strange kind of control flow going

00:24:08,530 --> 00:24:13,150
on or it's like ouch it like beezly it's

00:24:10,720 --> 00:24:15,610
like raising exceptions and like doing

00:24:13,150 --> 00:24:17,020
this weird blocking and another stuff

00:24:15,610 --> 00:24:20,500
the other thing that I'm going to

00:24:17,020 --> 00:24:23,710
introduce in here is a function return

00:24:20,500 --> 00:24:26,380
statement that just basically tries to

00:24:23,710 --> 00:24:30,180
get out of all that nonsense too so so

00:24:26,380 --> 00:24:30,180
that is also going to be an exception

00:24:30,480 --> 00:24:38,410
and I'm gonna catch that up in my up in

00:24:33,250 --> 00:24:40,540
my call thing here basically that the

00:24:38,410 --> 00:24:42,880
return is just treated as like get out

00:24:40,540 --> 00:24:47,020
of this horrible mess that is has been

00:24:42,880 --> 00:24:48,550
has been created and okay so you're

00:24:47,020 --> 00:24:52,000
gonna have this and it turns out that

00:24:48,550 --> 00:24:54,730
doing that allows me to write much more

00:24:52,000 --> 00:24:57,640
complicated programs involving looping

00:24:54,730 --> 00:25:00,730
and other things I'm not gonna I'm not

00:24:57,640 --> 00:25:03,250
gonna modify the original original code

00:25:00,730 --> 00:25:06,340
per se but this is what it might look

00:25:03,250 --> 00:25:09,130
like to execute a while loop and we kind

00:25:06,340 --> 00:25:11,940
of move this into into position here you

00:25:09,130 --> 00:25:17,760
would have like a much more complicated

00:25:11,940 --> 00:25:19,980
piece of code sorry I kind of put put

00:25:17,760 --> 00:25:21,150
that in a in the wrong spot there but

00:25:19,980 --> 00:25:24,330
you're gonna have like these nested

00:25:21,150 --> 00:25:26,370
blocks and loops and other stuff and

00:25:24,330 --> 00:25:28,380
what this code is doing is it's

00:25:26,370 --> 00:25:30,510
basically doing like a while loop or it

00:25:28,380 --> 00:25:32,040
updates the position and that it's

00:25:30,510 --> 00:25:34,110
checking to see if the position kind of

00:25:32,040 --> 00:25:35,610
got too far to the you know too high up

00:25:34,110 --> 00:25:37,290
and then it's like flipping the

00:25:35,610 --> 00:25:40,560
direction and it's like making it come

00:25:37,290 --> 00:25:43,050
back down in order to make that work I

00:25:40,560 --> 00:25:45,960
need to add a few more instructions to

00:25:43,050 --> 00:25:50,490
the to the Machine let me do that real

00:25:45,960 --> 00:25:52,680
quick it turns out you can't do like if

00:25:50,490 --> 00:25:55,260
statements if you don't have things like

00:25:52,680 --> 00:25:57,030
conditionals like like relations so you

00:25:55,260 --> 00:25:59,670
have to have like less than and look

00:25:57,030 --> 00:26:01,740
greater than and other other things

00:25:59,670 --> 00:26:03,240
here's I'm going to add a few few little

00:26:01,740 --> 00:26:05,720
instructions here like less than or

00:26:03,240 --> 00:26:05,720
equal to

00:26:07,150 --> 00:26:13,940
greater than or equal to like that and

00:26:11,840 --> 00:26:15,230
if this is if this is working famous

00:26:13,940 --> 00:26:18,920
famous last words

00:26:15,230 --> 00:26:20,390
I should know to run the Machine and let

00:26:18,920 --> 00:26:22,190
me okay

00:26:20,390 --> 00:26:28,250
undefined variable okay that's

00:26:22,190 --> 00:26:30,050
interesting oh I think I think I didn't

00:26:28,250 --> 00:26:32,650
get my I didn't get my machine set up

00:26:30,050 --> 00:26:32,650
here okay

00:26:38,220 --> 00:26:45,069
okay let's try this you're okay

00:26:41,990 --> 00:26:45,069
[Music]

00:26:47,049 --> 00:26:50,500
you have to pass the local variants okay

00:26:49,330 --> 00:26:53,610
a little bit a little bit of live

00:26:50,500 --> 00:26:53,610
debugging okay

00:27:02,020 --> 00:27:12,190
oh I know what that is okay least I

00:27:08,620 --> 00:27:13,840
think I know or it's oh yeah okay sorry

00:27:12,190 --> 00:27:17,130
about that okay so yeah I need to I need

00:27:13,840 --> 00:27:20,680
to pass the the locals to locals there

00:27:17,130 --> 00:27:21,670
okay so let's let's let's try this okay

00:27:20,680 --> 00:27:23,290
so now do you see the things like

00:27:21,670 --> 00:27:25,870
generates like a whole whole bunch of

00:27:23,290 --> 00:27:27,820
stuff gonna happen there you know it

00:27:25,870 --> 00:27:29,470
like cycled through a bunch of things it

00:27:27,820 --> 00:27:30,880
happened fairly fast I mean I'm not

00:27:29,470 --> 00:27:32,290
really sure if it's giving the right

00:27:30,880 --> 00:27:34,360
answer but you see the thing kind of

00:27:32,290 --> 00:27:38,050
cycling through through through

00:27:34,360 --> 00:27:41,410
instructions now the problem with this

00:27:38,050 --> 00:27:44,650
is that it's not okay so we've got like

00:27:41,410 --> 00:27:46,780
most of the makings of a machine but

00:27:44,650 --> 00:27:48,370
it's a little bit hard to see it do

00:27:46,780 --> 00:27:51,340
anything like one of the things that I'm

00:27:48,370 --> 00:27:53,080
kind of missing is any kind of output

00:27:51,340 --> 00:27:55,210
from this like this machine like any

00:27:53,080 --> 00:27:59,140
kind of display or anything like that

00:27:55,210 --> 00:28:02,020
and in order to do that maybe it would

00:27:59,140 --> 00:28:04,900
be useful to have like a like a Python

00:28:02,020 --> 00:28:07,120
function like that basically displays

00:28:04,900 --> 00:28:08,530
like the like a player or something I

00:28:07,120 --> 00:28:11,350
mean always like drawing something on

00:28:08,530 --> 00:28:13,240
the screen maybe we want something

00:28:11,350 --> 00:28:15,700
something like that maybe I'll put a

00:28:13,240 --> 00:28:21,460
little time delay on it just to like

00:28:15,700 --> 00:28:24,670
slow it down a little bit okay do that

00:28:21,460 --> 00:28:27,850
and maybe I want to have that something

00:28:24,670 --> 00:28:30,940
that I could but can I execute that in

00:28:27,850 --> 00:28:33,550
my in my little simulated machine this

00:28:30,940 --> 00:28:34,930
is some way to do that and maybe there's

00:28:33,550 --> 00:28:39,160
maybe there's a way I could have like an

00:28:34,930 --> 00:28:41,140
import function this is an idea of

00:28:39,160 --> 00:28:43,600
having like an external function it's

00:28:41,140 --> 00:28:46,930
not written in the machine it's it's

00:28:43,600 --> 00:28:48,820
it's it's like embedding something you

00:28:46,930 --> 00:28:50,620
know something externally you know can I

00:28:48,820 --> 00:28:53,740
have like display player to be like this

00:28:50,620 --> 00:28:59,320
import function of some kind and can I

00:28:53,740 --> 00:29:02,200
have that you know in my view my

00:28:59,320 --> 00:29:04,650
function table or something now can I

00:29:02,200 --> 00:29:07,049
extend my machine

00:29:04,650 --> 00:29:08,340
to do that and maybe maybe I even put

00:29:07,049 --> 00:29:11,970
like some like a little extra

00:29:08,340 --> 00:29:16,380
instruction in there to do that you know

00:29:11,970 --> 00:29:19,140
maybe load axe and then call this

00:29:16,380 --> 00:29:20,610
function to display okay so you're gonna

00:29:19,140 --> 00:29:23,340
maybe you want like a little import

00:29:20,610 --> 00:29:26,730
function like that it turns out that

00:29:23,340 --> 00:29:28,679
that is not not too hard to do I can

00:29:26,730 --> 00:29:33,690
take the existing function thing that I

00:29:28,679 --> 00:29:34,860
just wrote maybe give it like you know

00:29:33,690 --> 00:29:36,720
give it something that you're calling

00:29:34,860 --> 00:29:38,429
and I have like an import function and

00:29:36,720 --> 00:29:42,390
then I'll just make the Machine kind of

00:29:38,429 --> 00:29:47,159
look for it maybe here I'll check you

00:29:42,390 --> 00:29:48,720
know if the function is like a normal

00:29:47,159 --> 00:29:50,700
function that I'll do this thing that I

00:29:48,720 --> 00:29:54,149
had before okay so there's the kind of

00:29:50,700 --> 00:29:58,890
that the normal thing and then if it's

00:29:54,149 --> 00:30:03,360
not the normal thing what I will do is

00:29:58,890 --> 00:30:07,020
just get there I'll get the result on a

00:30:03,360 --> 00:30:09,840
second here okay let me yeah if it if it

00:30:07,020 --> 00:30:11,250
if it returns I'll do that

00:30:09,840 --> 00:30:13,200
and then if it's not the normal thing

00:30:11,250 --> 00:30:17,690
what I'll do is I'll just return the

00:30:13,200 --> 00:30:17,690
value of calling that external thing

00:30:19,590 --> 00:30:25,430
import function okay so I've got this

00:30:23,520 --> 00:30:27,660
look at the little little switch and

00:30:25,430 --> 00:30:30,600
hopefully if this is if this is working

00:30:27,660 --> 00:30:31,770
I will see you like the output now it's

00:30:30,600 --> 00:30:33,360
real messy I don't know that you'll be

00:30:31,770 --> 00:30:34,680
able to see that like with everything

00:30:33,360 --> 00:30:36,920
going out it's like a little thing kind

00:30:34,680 --> 00:30:40,380
of moving across like the bottom like

00:30:36,920 --> 00:30:43,740
bottom of bottom of that it's what kind

00:30:40,380 --> 00:30:47,760
of it kind of went left and right and so

00:30:43,740 --> 00:30:50,460
forth now you can look at this now it's

00:30:47,760 --> 00:30:52,020
a kid I was like you know the thing I'd

00:30:50,460 --> 00:30:53,970
like I don't even have the field of dots

00:30:52,020 --> 00:30:57,020
and I'm already like super excited about

00:30:53,970 --> 00:30:59,130
you know my machine language game but

00:30:57,020 --> 00:31:01,110
what happens is something you know some

00:30:59,130 --> 00:31:04,080
people look at that now and they're just

00:31:01,110 --> 00:31:06,270
like nah you know like my kids like dad

00:31:04,080 --> 00:31:09,090
this game is terrible like what are you

00:31:06,270 --> 00:31:12,090
what what are you doing it's like I mean

00:31:09,090 --> 00:31:14,100
we're gonna play game I mean it's got to

00:31:12,090 --> 00:31:15,960
be I mean it's got to be like rocket

00:31:14,100 --> 00:31:18,420
game you know like in the browser or

00:31:15,960 --> 00:31:21,750
stuff and like you know shooting enemies

00:31:18,420 --> 00:31:24,180
and like we want like we don't want your

00:31:21,750 --> 00:31:26,850
like text thing like go on or you know

00:31:24,180 --> 00:31:29,390
as anyone's dad you know okay so we want

00:31:26,850 --> 00:31:31,770
what we want rocket game and and and so

00:31:29,390 --> 00:31:33,300
let me talk about rocket game for a

00:31:31,770 --> 00:31:36,960
second first of all this is not my

00:31:33,300 --> 00:31:39,870
creation I the link is up on the up on

00:31:36,960 --> 00:31:45,930
the web there and this is kind of a

00:31:39,870 --> 00:31:47,880
brave new thing rocket game is using

00:31:45,930 --> 00:31:49,950
webassembly I how many people have used

00:31:47,880 --> 00:31:52,740
like what have either played with

00:31:49,950 --> 00:31:55,800
webassembly or know what it is like two

00:31:52,740 --> 00:31:57,240
hands okay it's it's it's webassembly

00:31:55,800 --> 00:31:59,310
now the fact that it has web and the

00:31:57,240 --> 00:32:01,440
name already like scares me I was like

00:31:59,310 --> 00:32:03,780
oh wow no okay

00:32:01,440 --> 00:32:05,970
and then the other the other interesting

00:32:03,780 --> 00:32:09,240
thing is that rocket game is written in

00:32:05,970 --> 00:32:11,160
rust so the game is written and Rost

00:32:09,240 --> 00:32:14,520
it's running on webassembly and it's in

00:32:11,160 --> 00:32:17,070
the browser and I kind of you know you

00:32:14,520 --> 00:32:19,590
look at that and I sort of realized that

00:32:17,070 --> 00:32:21,990
the like the web programming class where

00:32:19,590 --> 00:32:25,320
I learned CGI programming is just not

00:32:21,990 --> 00:32:28,200
that is really not what's happening here

00:32:25,320 --> 00:32:30,270
right I think I mean I don't even it's

00:32:28,200 --> 00:32:31,610
hard for me to even like comprehend like

00:32:30,270 --> 00:32:34,190
what is going on with

00:32:31,610 --> 00:32:36,380
like rust and webOS Tilly what is going

00:32:34,190 --> 00:32:38,600
on with that and and there's and you

00:32:36,380 --> 00:32:41,450
might be inclined just like look at that

00:32:38,600 --> 00:32:43,490
it's like it's you know I'm sorry fight

00:32:41,450 --> 00:32:49,000
it's just game over Python I mean like

00:32:43,490 --> 00:32:52,610
time is up you know you know just just

00:32:49,000 --> 00:32:54,830
pack it in I don't you it's like like

00:32:52,610 --> 00:32:58,190
what is pythons story for - for

00:32:54,830 --> 00:32:59,900
something like that and so what I'm

00:32:58,190 --> 00:33:01,970
gonna try to do I'm looking at the timer

00:32:59,900 --> 00:33:06,500
and so then I get some sometimes I guess

00:33:01,970 --> 00:33:10,490
the question is is my time up on on this

00:33:06,500 --> 00:33:14,390
thing and so what I'm going to do or

00:33:10,490 --> 00:33:16,429
attempt to do is run that rust program

00:33:14,390 --> 00:33:18,049
inside the interpreter that I just wrote

00:33:16,429 --> 00:33:21,230
because the thing that I just wrote

00:33:18,049 --> 00:33:23,900
actually is a my is a web assembly

00:33:21,230 --> 00:33:24,650
interpreter you didn't know where I was

00:33:23,900 --> 00:33:29,299
going with that

00:33:24,650 --> 00:33:31,490
but this this this code is is capable of

00:33:29,299 --> 00:33:37,790
running web assembly so let me talk a

00:33:31,490 --> 00:33:39,770
little bit about like this setup here so

00:33:37,790 --> 00:33:41,419
here here's here's the front we're in it

00:33:39,770 --> 00:33:43,429
that the clock is racing your clock

00:33:41,419 --> 00:33:46,040
aside so webassembly looks like that

00:33:43,429 --> 00:33:47,330
there's a program called program asthma

00:33:46,040 --> 00:33:50,210
I did not write this

00:33:47,330 --> 00:33:53,750
this is compiled from rust it is a

00:33:50,210 --> 00:33:56,390
binary file that game that you were

00:33:53,750 --> 00:33:59,450
looking at your rocket game is an HTML

00:33:56,390 --> 00:34:01,850
document with some JavaScript and it's a

00:33:59,450 --> 00:34:04,910
mix of JavaScript and web assembly okay

00:34:01,850 --> 00:34:08,450
so this is kind of the the thing that

00:34:04,910 --> 00:34:12,290
we're gonna try to do and it turns out

00:34:08,450 --> 00:34:14,480
that this this machine that I wrote can

00:34:12,290 --> 00:34:16,669
execute webassembly now in order to do

00:34:14,480 --> 00:34:20,080
that I have to make some changes to it

00:34:16,669 --> 00:34:22,159
okay then they're not huge changes but

00:34:20,080 --> 00:34:26,119
you know let's talk about the changes

00:34:22,159 --> 00:34:28,520
one of the changes that that happens

00:34:26,119 --> 00:34:33,980
with web assembly is that web assembly

00:34:28,520 --> 00:34:37,460
is a very tiny like abstract CPU and it

00:34:33,980 --> 00:34:41,420
only understands for data types in sand

00:34:37,460 --> 00:34:45,450
floats 32 and 64 bits I had

00:34:41,420 --> 00:34:48,300
imported these types from numpy mainly

00:34:45,450 --> 00:34:56,220
because doing so allows me to claim that

00:34:48,300 --> 00:34:59,130
this is a machine learning project so if

00:34:56,220 --> 00:35:00,510
it's of some people people were asking

00:34:59,130 --> 00:35:02,310
me I don't know we were having

00:35:00,510 --> 00:35:03,930
conversations with students and stuff

00:35:02,310 --> 00:35:05,790
they're like I was like oh you should do

00:35:03,930 --> 00:35:08,190
stuff that makes people angry and like

00:35:05,790 --> 00:35:09,420
they're like you're like you're doing

00:35:08,190 --> 00:35:11,790
something like claiming that this is a

00:35:09,420 --> 00:35:15,500
machine learning project by by importing

00:35:11,790 --> 00:35:18,870
numpy is one one way to do that okay so

00:35:15,500 --> 00:35:23,220
and I'm gonna put like a like an

00:35:18,870 --> 00:35:25,080
assertion on the stack push operation to

00:35:23,220 --> 00:35:27,090
assert that those are literally the only

00:35:25,080 --> 00:35:30,450
things that are allowed in the system

00:35:27,090 --> 00:35:31,980
like I mean you only have those times if

00:35:30,450 --> 00:35:35,310
you have anything other than those types

00:35:31,980 --> 00:35:38,400
you are broken okay so web assembly is

00:35:35,310 --> 00:35:41,160
it's a little emulated CPU you know it

00:35:38,400 --> 00:35:43,740
has four data types the other thing that

00:35:41,160 --> 00:35:45,990
you're gonna have is it has a richer set

00:35:43,740 --> 00:35:48,000
of instruction so it has some

00:35:45,990 --> 00:35:49,500
instructions for creating constants this

00:35:48,000 --> 00:35:52,800
is like the constant thing that a head

00:35:49,500 --> 00:35:54,960
before it has instructions for binary

00:35:52,800 --> 00:35:57,090
operations these are things like add and

00:35:54,960 --> 00:35:59,100
subtract and multiply and divide and so

00:35:57,090 --> 00:36:01,620
forth I have defined these it's just a

00:35:59,100 --> 00:36:03,930
big table essentially of lambda function

00:36:01,620 --> 00:36:06,000
there's nothing really magical going on

00:36:03,930 --> 00:36:08,880
here just I'm trying to do in a compact

00:36:06,000 --> 00:36:11,970
way okay so there's a lot of lot of kind

00:36:08,880 --> 00:36:13,830
of binary operations there are some

00:36:11,970 --> 00:36:16,980
unary operations these are things like

00:36:13,830 --> 00:36:19,050
square root calculations comparisons and

00:36:16,980 --> 00:36:21,150
so forth that is not a complete list but

00:36:19,050 --> 00:36:23,370
it's it's some of them so you have some

00:36:21,150 --> 00:36:27,420
unary operations you have some

00:36:23,370 --> 00:36:29,010
operations for loading from memory so it

00:36:27,420 --> 00:36:31,050
turns out that that web is somebody has

00:36:29,010 --> 00:36:33,690
these four data types like int floats

00:36:31,050 --> 00:36:35,460
and you know of different sizes and

00:36:33,690 --> 00:36:36,660
halves it has some different options for

00:36:35,460 --> 00:36:38,940
reading memory and different

00:36:36,660 --> 00:36:43,590
configuration okay so I have some loads

00:36:38,940 --> 00:36:45,900
and stores and it has store operation

00:36:43,590 --> 00:36:47,760
okay so mostly what I'm doing here is

00:36:45,900 --> 00:36:49,690
just inserting tables at like short

00:36:47,760 --> 00:36:52,210
little short little functions

00:36:49,690 --> 00:36:54,099
and the code that I wrote can be

00:36:52,210 --> 00:36:56,049
modified to work with that the way that

00:36:54,099 --> 00:36:58,329
it's going to modify is that instead of

00:36:56,049 --> 00:37:01,029
me with my little minimal set of

00:36:58,329 --> 00:37:04,869
instructions here I'm gonna check for

00:37:01,029 --> 00:37:06,910
some table lookups and I'm just gonna

00:37:04,869 --> 00:37:08,829
dispatch off operations like you know if

00:37:06,910 --> 00:37:11,230
the OP is a constant thing then I look

00:37:08,829 --> 00:37:14,200
up the conversion and I convert a value

00:37:11,230 --> 00:37:16,420
if the operation is a binary operation

00:37:14,200 --> 00:37:18,069
like that I'm going to keep the code the

00:37:16,420 --> 00:37:21,279
same but instead of doing like

00:37:18,069 --> 00:37:25,410
hardwiring it like that I'll look up the

00:37:21,279 --> 00:37:28,900
operation and then pass it some argument

00:37:25,410 --> 00:37:30,940
if the opposite unary I didn't have any

00:37:28,900 --> 00:37:33,190
unary operations and the and the other

00:37:30,940 --> 00:37:36,250
thing but like what you'll do there is

00:37:33,190 --> 00:37:38,259
push in like you know unary ops selfs

00:37:36,250 --> 00:37:40,569
pop okay so I'm kind of I'm kind of

00:37:38,259 --> 00:37:42,849
going through like like by machine and

00:37:40,569 --> 00:37:44,619
just you know filling out filling out

00:37:42,849 --> 00:37:46,960
some stuff do I have a typo there I do

00:37:44,619 --> 00:37:49,089
have a typo there okay I heard the

00:37:46,960 --> 00:37:51,880
rumble that time there was a little okay

00:37:49,089 --> 00:37:53,619
good good very good okay and then you

00:37:51,880 --> 00:37:55,630
know you'd have an operation and like

00:37:53,619 --> 00:37:58,960
you know in the load table if it's in

00:37:55,630 --> 00:38:01,720
the load this is going to be I'm gonna

00:37:58,960 --> 00:38:05,460
do this in kind of a strange way I mean

00:38:01,720 --> 00:38:05,460
I'm gonna basically do load up

00:38:07,619 --> 00:38:12,710
and I'm just gonna pass it like a chunk

00:38:09,930 --> 00:38:15,839
of memory now that this is a total a

00:38:12,710 --> 00:38:18,059
total hack I like because there's

00:38:15,839 --> 00:38:20,609
nothing bigger than a than a 64-bit

00:38:18,059 --> 00:38:23,700
value I'm just gonna pass in like eight

00:38:20,609 --> 00:38:26,099
bytes and like see what happens well

00:38:23,700 --> 00:38:29,400
it's also the other thing with a load is

00:38:26,099 --> 00:38:31,739
they do introduce a an offset

00:38:29,400 --> 00:38:35,489
webassembly has like an address plus an

00:38:31,739 --> 00:38:37,249
offset so I'm gonna introduce that store

00:38:35,489 --> 00:38:39,960
is gonna be kind of the same thing

00:38:37,249 --> 00:38:42,029
okay filo so if you're in store I'll pop

00:38:39,960 --> 00:38:47,940
a value there's an offset that goes with

00:38:42,029 --> 00:38:51,469
that okay that's an added offset might

00:38:47,940 --> 00:38:51,469
missing something here yeah

00:38:53,030 --> 00:39:01,040
Oh oh yeah yeah yeah okay yeah that

00:38:59,360 --> 00:39:03,260
would be bad I would be sitting here

00:39:01,040 --> 00:39:05,510
debugging I've had like nightmares about

00:39:03,260 --> 00:39:09,370
this talk like if it goes wrong it goes

00:39:05,510 --> 00:39:09,370
wrong really badly and it's kind of

00:39:13,480 --> 00:39:17,380
okay so yeah like it's store operation

00:39:15,820 --> 00:39:19,839
turns out that there's a couple of other

00:39:17,380 --> 00:39:22,480
memory operations that are that are in

00:39:19,839 --> 00:39:23,980
the system there's a size operation that

00:39:22,480 --> 00:39:26,250
just tells it like how much memory you

00:39:23,980 --> 00:39:26,250
have

00:39:28,000 --> 00:39:33,099
and it's reported in 64k pages so you

00:39:31,390 --> 00:39:35,109
have like you have an instruction like

00:39:33,099 --> 00:39:38,380
that there's also a memory grow

00:39:35,109 --> 00:39:40,510
operation webassembly is actually kind

00:39:38,380 --> 00:39:43,390
of kind of interesting by the way it

00:39:40,510 --> 00:39:46,150
treats memory literally as a big byte

00:39:43,390 --> 00:39:49,200
array and what you do is you just kind

00:39:46,150 --> 00:39:49,200
of grow it and shrink it

00:39:53,190 --> 00:39:57,839
I mean you might be looking at this

00:39:55,920 --> 00:40:00,750
saying there's no way like that that's

00:39:57,839 --> 00:40:02,490
like like how could it be like so

00:40:00,750 --> 00:40:04,530
minimal like that but like there's like

00:40:02,490 --> 00:40:06,150
a memory growth thing there's a you keep

00:40:04,530 --> 00:40:09,059
we're gonna keep the locals the same

00:40:06,150 --> 00:40:13,260
there is one extra little operation with

00:40:09,059 --> 00:40:15,750
locals called a tea operation where you

00:40:13,260 --> 00:40:18,480
pull off like an item off the stack

00:40:15,750 --> 00:40:20,400
without consuming it okay so you have

00:40:18,480 --> 00:40:24,630
that and there's a few other additional

00:40:20,400 --> 00:40:26,069
little stack operations is a drop where

00:40:24,630 --> 00:40:28,140
you just pop something off and forget

00:40:26,069 --> 00:40:30,990
about it and then and then there's also

00:40:28,140 --> 00:40:35,130
a select operation which is kind of the

00:40:30,990 --> 00:40:38,390
like the ternary operation like a like a

00:40:35,130 --> 00:40:38,390
conditional kind of thing

00:40:43,039 --> 00:40:46,829
like that I'm gonna keep function calls

00:40:46,229 --> 00:40:48,599
the same

00:40:46,829 --> 00:40:50,339
I'm gonna keep my brakes the same all

00:40:48,599 --> 00:40:52,199
that's gonna say and chases say the same

00:40:50,339 --> 00:40:54,619
the black stuff is gonna stay the same I

00:40:52,199 --> 00:40:58,199
actually one thing with the blacks is

00:40:54,619 --> 00:41:00,749
they introduced a block type I'm gonna

00:40:58,199 --> 00:41:06,599
ignore that but it changes the offset

00:41:00,749 --> 00:41:11,130
that I'm using there okay black blight

00:41:06,599 --> 00:41:12,719
side and yeah I think I'm basically more

00:41:11,130 --> 00:41:14,549
or less done with that actually there's

00:41:12,719 --> 00:41:16,559
this there's one other instruction that

00:41:14,549 --> 00:41:19,189
enters the enters the picture there is

00:41:16,559 --> 00:41:21,809
basically a tabled break instruction

00:41:19,189 --> 00:41:24,150
where you give it like a like a like a

00:41:21,809 --> 00:41:26,789
like a table of indexes along with a

00:41:24,150 --> 00:41:28,829
default that is something that is used

00:41:26,789 --> 00:41:33,689
to implement break like switch

00:41:28,829 --> 00:41:36,589
statements so there's there is a like a

00:41:33,689 --> 00:41:36,589
feature for that

00:41:44,240 --> 00:41:49,470
you should be greatly disturbed by the

00:41:46,680 --> 00:41:52,530
lack of testing on this this is awful

00:41:49,470 --> 00:41:54,450
lot of a lot of a lot of LF code okay so

00:41:52,530 --> 00:41:55,890
so we've kind of kind of kind of gone

00:41:54,450 --> 00:41:57,930
through there and modified it a little

00:41:55,890 --> 00:42:02,490
bit but not a lot of changes now the

00:41:57,930 --> 00:42:04,650
claim is that that could run the rocket

00:42:02,490 --> 00:42:08,000
game it could run the rust program okay

00:42:04,650 --> 00:42:11,070
now now in order to in order to do that

00:42:08,000 --> 00:42:13,470
we do still have this kind of problem of

00:42:11,070 --> 00:42:17,840
what like okay that's what webassembly

00:42:13,470 --> 00:42:20,520
looks like how do I turn that into this

00:42:17,840 --> 00:42:24,000
it is gay like how can I make Python

00:42:20,520 --> 00:42:27,570
weird with that okay so it turns out

00:42:24,000 --> 00:42:30,390
that that that that format is very easy

00:42:27,570 --> 00:42:31,800
to decode it's like webassembly it's

00:42:30,390 --> 00:42:34,050
actually really cool because they've

00:42:31,800 --> 00:42:37,890
actually rethought the whole concept of

00:42:34,050 --> 00:42:39,630
a dll that might sound scary like if you

00:42:37,890 --> 00:42:41,250
know about dll's it's like oh good god

00:42:39,630 --> 00:42:42,480
like no like what are you doing like

00:42:41,250 --> 00:42:45,810
they've kind of rethought the whole

00:42:42,480 --> 00:42:48,800
concept of a dll and decide like what

00:42:45,810 --> 00:42:51,390
would we really like to have in there so

00:42:48,800 --> 00:42:55,380
I've written a library - this is

00:42:51,390 --> 00:42:57,540
webassembly decoder this is just in the

00:42:55,380 --> 00:42:59,790
full interest of disclosure I wrote this

00:42:57,540 --> 00:43:01,140
I'm incorporating it by reference

00:42:59,790 --> 00:43:03,570
because I don't have time to talk about

00:43:01,140 --> 00:43:06,000
it but the way that you can work with

00:43:03,570 --> 00:43:07,680
this is you can basically just say okay

00:43:06,000 --> 00:43:10,970
I want to parse like a web assembly

00:43:07,680 --> 00:43:14,370
module you just grab this program

00:43:10,970 --> 00:43:17,340
program dot lazon okay just kind of kind

00:43:14,370 --> 00:43:19,200
of open it up and read it and what

00:43:17,340 --> 00:43:21,420
happens with that is this is gonna it's

00:43:19,200 --> 00:43:22,770
just gonna grab the modules and there's

00:43:21,420 --> 00:43:24,900
like a whole bunch of really useful

00:43:22,770 --> 00:43:27,630
stuff in there let me let me let me kind

00:43:24,900 --> 00:43:29,850
of show you what's in there okay so I'm

00:43:27,630 --> 00:43:31,380
just gonna I'm gonna run that some of

00:43:29,850 --> 00:43:33,000
the stuff that's in the module is

00:43:31,380 --> 00:43:36,360
there's a whole bunch of information

00:43:33,000 --> 00:43:37,800
about type signatures this might be a

00:43:36,360 --> 00:43:39,360
little hard to read but it's like a big

00:43:37,800 --> 00:43:41,700
table telling me all of the type

00:43:39,360 --> 00:43:45,420
signatures of all functions in the

00:43:41,700 --> 00:43:48,000
module this is already awesome like I'd

00:43:45,420 --> 00:43:50,280
like what am i one of my my early things

00:43:48,000 --> 00:43:52,450
in Python was writing the swig utility

00:43:50,280 --> 00:43:54,609
to do C extensions for Python and

00:43:52,450 --> 00:43:57,579
the big complexities with that is that

00:43:54,609 --> 00:44:00,550
see libraries do not encode type

00:43:57,579 --> 00:44:02,530
signatures they're not in there like if

00:44:00,550 --> 00:44:04,210
you make like us like a dll or something

00:44:02,530 --> 00:44:06,460
that there's no type signatures in the

00:44:04,210 --> 00:44:08,530
DLL and you're like well where are they

00:44:06,460 --> 00:44:10,000
they're in the C header file that's

00:44:08,530 --> 00:44:12,130
where they are and like so I have to go

00:44:10,000 --> 00:44:13,990
write this hole parser to do C header

00:44:12,130 --> 00:44:16,089
files and it's horrible and like it's

00:44:13,990 --> 00:44:18,190
it's it's horrible webassembly right

00:44:16,089 --> 00:44:20,829
away all the types of signatures are

00:44:18,190 --> 00:44:22,990
there some other stuff that's really

00:44:20,829 --> 00:44:27,520
interesting about webassembly it will

00:44:22,990 --> 00:44:29,760
tell you what needs to be imported these

00:44:27,520 --> 00:44:32,410
are basically functions that are defined

00:44:29,760 --> 00:44:35,400
outside of web assembly and they have to

00:44:32,410 --> 00:44:37,780
be provided by like Python or JavaScript

00:44:35,400 --> 00:44:39,310
it's kind of like that display player

00:44:37,780 --> 00:44:42,700
thing that I add that's what that's

00:44:39,310 --> 00:44:47,530
what's going on there it has information

00:44:42,700 --> 00:44:49,930
about what is exported and you have to

00:44:47,530 --> 00:44:51,460
type it right okay then that that's it

00:44:49,930 --> 00:44:53,349
will tell you like what functions are

00:44:51,460 --> 00:44:54,609
defined in there that it's exporting to

00:44:53,349 --> 00:44:56,140
you this this is the kind of thing that

00:44:54,609 --> 00:44:57,849
I was again was like doing like this

00:44:56,140 --> 00:45:00,190
swig project it's like oh I want to call

00:44:57,849 --> 00:45:01,869
functions well here are the functions it

00:45:00,190 --> 00:45:04,000
tells me the functions right there that

00:45:01,869 --> 00:45:07,300
it's like that it's exporting to the to

00:45:04,000 --> 00:45:09,130
the environment it has code I mean you

00:45:07,300 --> 00:45:11,859
can you can come in here and pull off

00:45:09,130 --> 00:45:15,280
like like the code for a given function

00:45:11,859 --> 00:45:17,230
like that's not a very interesting line

00:45:15,280 --> 00:45:18,970
here okay it's like like let me just

00:45:17,230 --> 00:45:21,940
kind of pull off some some code okay so

00:45:18,970 --> 00:45:24,839
there's like a fragment of code you're

00:45:21,940 --> 00:45:27,940
like well that's not very readable but

00:45:24,839 --> 00:45:29,680
it turns out to be very easy to parse

00:45:27,940 --> 00:45:31,839
that you can say you know let's let's

00:45:29,680 --> 00:45:33,940
parse code and then all of a sudden it

00:45:31,839 --> 00:45:36,339
turns into this like machine code that I

00:45:33,940 --> 00:45:39,160
just they just wrote so these these

00:45:36,339 --> 00:45:41,109
these wasm modules it basically they

00:45:39,160 --> 00:45:42,970
have all sorts of cool stuff in there

00:45:41,109 --> 00:45:44,829
it's like you know all the imports all

00:45:42,970 --> 00:45:48,310
the exports all the functions all the

00:45:44,829 --> 00:45:50,109
code and I'm gonna use that that's that

00:45:48,310 --> 00:45:52,540
that's basically going to be the basis

00:45:50,109 --> 00:45:55,240
of my little web assembly in encoder

00:45:52,540 --> 00:45:59,079
here so one of the one thing that I can

00:45:55,240 --> 00:46:00,220
do is is build like the imported

00:45:59,079 --> 00:46:02,910
function

00:46:00,220 --> 00:46:04,720
I'm not gonna totally type that in

00:46:02,910 --> 00:46:06,730
because I knew it would take a little

00:46:04,720 --> 00:46:09,640
bit of time but but essentially like the

00:46:06,730 --> 00:46:13,150
imported functions are things that have

00:46:09,640 --> 00:46:14,950
to be implemented in Python or or

00:46:13,150 --> 00:46:18,069
JavaScript actually it's just like what

00:46:14,950 --> 00:46:19,900
functions does it not know about and so

00:46:18,069 --> 00:46:21,339
you're seeing some math functions here

00:46:19,900 --> 00:46:24,040
you're seeing some things with like

00:46:21,339 --> 00:46:26,970
gameplay like clear the screen draw a

00:46:24,040 --> 00:46:29,290
bullet draw enemy and so forth those are

00:46:26,970 --> 00:46:32,349
basically going to go into like a big

00:46:29,290 --> 00:46:33,670
imported functions table this is exactly

00:46:32,349 --> 00:46:35,710
the thing that I did with the player

00:46:33,670 --> 00:46:38,260
thing you know I had like the imported

00:46:35,710 --> 00:46:41,950
function I will have to import machines

00:46:38,260 --> 00:46:45,220
and to do that what I can do after that

00:46:41,950 --> 00:46:50,380
is I can declare all of the defined

00:46:45,220 --> 00:46:52,540
function these are basically functions

00:46:50,380 --> 00:46:54,910
that are in web assembly like what I'm

00:46:52,540 --> 00:46:58,569
going to do here is I'm going to turn

00:46:54,910 --> 00:47:00,250
those into the functions that I did in

00:46:58,569 --> 00:47:01,900
my little hacky this morning you don't

00:47:00,250 --> 00:47:03,640
like before that it was just like it's

00:47:01,900 --> 00:47:05,950
like oh okay let's let's it's like a

00:47:03,640 --> 00:47:10,089
list of defined functions what I'm going

00:47:05,950 --> 00:47:14,440
to do for this is you get a type index a

00:47:10,089 --> 00:47:16,270
block of code just this is just giving

00:47:14,440 --> 00:47:16,990
you kind of an idea of what it what it

00:47:16,270 --> 00:47:18,819
looks like

00:47:16,990 --> 00:47:24,369
okay so I'm going to take that kind of

00:47:18,819 --> 00:47:26,740
two pieces of information here from them

00:47:24,369 --> 00:47:29,880
from the module I'm going to look up the

00:47:26,740 --> 00:47:29,880
type signature

00:47:31,660 --> 00:47:37,329
based on that first value there okay so

00:47:34,059 --> 00:47:38,859
this is looking up the signature and

00:47:37,329 --> 00:47:40,989
again this is the thing that's missing

00:47:38,859 --> 00:47:42,759
from like dll's like like the not having

00:47:40,989 --> 00:47:45,880
the signatures this is awesome I got the

00:47:42,759 --> 00:47:48,819
signature and then I'm going to make a

00:47:45,880 --> 00:47:51,519
function okay here's here's my machine

00:47:48,819 --> 00:47:53,880
function object the number of parameters

00:47:51,519 --> 00:47:58,930
is going to be the length of the

00:47:53,880 --> 00:48:01,720
parameters of this thing and then I'm

00:47:58,930 --> 00:48:03,880
gonna if it returns something I'm gonna

00:48:01,720 --> 00:48:07,710
just do a bool check on that and then

00:48:03,880 --> 00:48:11,069
for the code I'm gonna parse the code

00:48:07,710 --> 00:48:15,549
huazi parse code you know code

00:48:11,069 --> 00:48:20,650
instruction okay so I'm gonna make a

00:48:15,549 --> 00:48:22,900
function I'll pen that I'm gonna make

00:48:20,650 --> 00:48:26,970
like a complete function table here so

00:48:22,900 --> 00:48:26,970
I'm gonna have all my imported functions

00:48:27,749 --> 00:48:33,009
plus all of might defined functions okay

00:48:30,670 --> 00:48:34,900
so you're gonna you're gonna do that so

00:48:33,009 --> 00:48:36,880
now so what I'm what I'm doing is I'm

00:48:34,900 --> 00:48:38,619
kind of making like okay this is all the

00:48:36,880 --> 00:48:40,299
functions that are in this module I have

00:48:38,619 --> 00:48:42,460
two Python one so they're kind of the

00:48:40,299 --> 00:48:44,680
you know they draw enemy and draw a

00:48:42,460 --> 00:48:46,599
particle and stuff and then this thing

00:48:44,680 --> 00:48:48,609
is basically all the this is all the

00:48:46,599 --> 00:48:50,859
rust code that I just did there okay so

00:48:48,609 --> 00:48:54,640
whatever that rust thing was it's turned

00:48:50,859 --> 00:48:56,019
into my into my function objects now

00:48:54,640 --> 00:48:57,700
what I'm going to do is I'm going to get

00:48:56,019 --> 00:49:01,979
all the exported function

00:48:57,700 --> 00:49:01,979
okay just clear exported functions

00:49:02,670 --> 00:49:08,270
do I have a typo and something here

00:49:05,270 --> 00:49:08,270
where

00:49:12,220 --> 00:49:18,800
type oh yeah yeah yeah I kind of like

00:49:16,940 --> 00:49:19,730
this like this highlighting you know

00:49:18,800 --> 00:49:21,230
it's like you know the visual

00:49:19,730 --> 00:49:23,329
highlighting you know that's kind of

00:49:21,230 --> 00:49:26,810
kind of kind of awesome okay so I'm

00:49:23,329 --> 00:49:30,140
gonna make like an export table this is

00:49:26,810 --> 00:49:32,180
maybe a little a little strange but what

00:49:30,140 --> 00:49:35,109
what up what I'm doing here is it's kind

00:49:32,180 --> 00:49:41,359
of going through the the module exports

00:49:35,109 --> 00:49:43,790
and then if they're if they're function

00:49:41,359 --> 00:49:46,460
exports I'm gonna make a little table

00:49:43,790 --> 00:49:47,599
here so what that what that is doing is

00:49:46,460 --> 00:49:50,150
it's kind of just setting up like

00:49:47,599 --> 00:49:54,530
everything that is coming out to out to

00:49:50,150 --> 00:49:56,180
me and at this point you're kind of

00:49:54,530 --> 00:49:58,369
ready to start making a mission like

00:49:56,180 --> 00:49:59,810
making the machine basically I'm gonna

00:49:58,369 --> 00:50:03,079
say we can make the machine with my

00:49:59,810 --> 00:50:04,819
functions oh I'll give it a like some

00:50:03,079 --> 00:50:06,680
memories admittedly that's a bit of a

00:50:04,819 --> 00:50:08,480
hack on the memory I'm just peeing I'm

00:50:06,680 --> 00:50:13,099
just saying well I'll give it like you

00:50:08,480 --> 00:50:14,780
know 20 times 64 K for memory there the

00:50:13,099 --> 00:50:16,280
file actually does indicate how much

00:50:14,780 --> 00:50:17,810
memory is needed but it's don't want to

00:50:16,280 --> 00:50:22,040
deal with it okay so make make a machine

00:50:17,810 --> 00:50:24,619
make some memory it turns out that

00:50:22,040 --> 00:50:28,040
there's a step of initializing memory

00:50:24,619 --> 00:50:30,050
that you have to deal with and that is

00:50:28,040 --> 00:50:31,970
also something that's in that web is

00:50:30,050 --> 00:50:33,550
simply module there's like a little data

00:50:31,970 --> 00:50:36,380
section in there that sort of has like

00:50:33,550 --> 00:50:38,660
initialization kinds of things so the

00:50:36,380 --> 00:50:40,390
way that I'm gonna I'm gonna do that is

00:50:38,660 --> 00:50:45,230
I'm basically going to execute

00:50:40,390 --> 00:50:46,849
instructions to compute an offset I'm

00:50:45,230 --> 00:50:49,460
actually gonna use my machine for that

00:50:46,849 --> 00:50:52,569
and then I'm gonna go into the machine

00:50:49,460 --> 00:50:52,569
and set up some memory

00:50:59,589 --> 00:51:07,059
okay initialize memory now once we've

00:51:04,239 --> 00:51:08,880
done that call something and live

00:51:07,059 --> 00:51:13,180
dangerously okay now I'm absolutely

00:51:08,880 --> 00:51:16,749
terrified of this step here so this this

00:51:13,180 --> 00:51:18,579
this dis game involves like a kind of a

00:51:16,749 --> 00:51:20,890
game board maybe there's a width and a

00:51:18,579 --> 00:51:22,059
height for for instance they have to

00:51:20,890 --> 00:51:24,519
have some data types

00:51:22,059 --> 00:51:26,439
those types are coming from the type

00:51:24,519 --> 00:51:27,699
signatures I'm not showing you that but

00:51:26,439 --> 00:51:30,329
it's it's part of the part of the

00:51:27,699 --> 00:51:30,329
exports

00:51:33,460 --> 00:51:38,950
let me just import the types here what I

00:51:36,280 --> 00:51:42,790
should be able to do is basically just

00:51:38,950 --> 00:51:46,140
call like the export table and pass it

00:51:42,790 --> 00:51:48,880
pass it in the width and the height and

00:51:46,140 --> 00:51:50,890
basically have some kind of prayer that

00:51:48,880 --> 00:51:53,589
this is like gonna work basically okay

00:51:50,890 --> 00:51:55,450
so that so what is happening is that

00:51:53,589 --> 00:51:57,640
that that is gonna try to call this

00:51:55,450 --> 00:52:01,180
there's a resize function in R ah that's

00:51:57,640 --> 00:52:02,890
written in Rost by the way and we're

00:52:01,180 --> 00:52:05,050
just gonna see if it works I mean this

00:52:02,890 --> 00:52:08,579
this I if this works this will be a

00:52:05,050 --> 00:52:08,579
miracle that we'll see if it works

00:52:08,609 --> 00:52:13,089
positional follows keyword are you oh

00:52:11,020 --> 00:52:13,540
well okay that's not okay we can fix

00:52:13,089 --> 00:52:15,670
that

00:52:13,540 --> 00:52:19,930
[Music]

00:52:15,670 --> 00:52:21,190
I think I come on Python you're supposed

00:52:19,930 --> 00:52:24,420
to be let me break the rules there okay

00:52:21,190 --> 00:52:24,420
so let's try it

00:52:25,080 --> 00:52:33,340
this is instance ok little few little

00:52:28,720 --> 00:52:35,680
bugs here and in in in the code it's not

00:52:33,340 --> 00:52:40,170
if we stick not in the machine ok let's

00:52:35,680 --> 00:52:43,330
try that oh no oh no worst fears

00:52:40,170 --> 00:52:46,080
you're real realized here in Const ops

00:52:43,330 --> 00:52:46,080
args

00:52:49,290 --> 00:53:02,980
okay I think like the it was the is

00:52:58,690 --> 00:53:05,140
operator like yeah not is yeah that does

00:53:02,980 --> 00:53:09,250
a very different definite distinction

00:53:05,140 --> 00:53:11,380
between is and okay okay so the thing is

00:53:09,250 --> 00:53:13,420
okay so I don't know what that did but

00:53:11,380 --> 00:53:18,300
it didn't trash okay so I'd like I'm

00:53:13,420 --> 00:53:18,300
looking at like a two minute two minutes

00:53:18,360 --> 00:53:23,520
I'm looking like one minute one minute

00:53:20,410 --> 00:53:27,640
50 seconds on the timer here okay so it

00:53:23,520 --> 00:53:31,770
didn't crash the lack of tests should be

00:53:27,640 --> 00:53:33,670
very disturbing and III on that and

00:53:31,770 --> 00:53:36,190
essentially what you can do from years

00:53:33,670 --> 00:53:37,840
like well maybe we should just maybe we

00:53:36,190 --> 00:53:40,450
should have like a game loop at this boy

00:53:37,840 --> 00:53:42,670
I mean why not let's just go for the

00:53:40,450 --> 00:53:44,560
game loop so it turns out that this

00:53:42,670 --> 00:53:47,200
rocket game the way that it works is

00:53:44,560 --> 00:53:49,330
that you record kind of a time and then

00:53:47,200 --> 00:53:52,480
the game loop records like the current

00:53:49,330 --> 00:53:55,120
time and calculates a delta like what is

00:53:52,480 --> 00:53:59,830
now minus last and then what it does is

00:53:55,120 --> 00:54:02,470
you call like exports on on a like a

00:53:59,830 --> 00:54:08,250
like an update function so you basically

00:54:02,470 --> 00:54:08,250
say update on the time there

00:54:09,020 --> 00:54:15,150
and then after you've done that you

00:54:11,760 --> 00:54:17,900
basically call a draw function with no

00:54:15,150 --> 00:54:20,130
arguments and it keep in mind those

00:54:17,900 --> 00:54:21,359
those functions are written in Ross I

00:54:20,130 --> 00:54:23,670
mean they were written in rust they've

00:54:21,359 --> 00:54:27,270
compiled a web assembly I'm calling them

00:54:23,670 --> 00:54:29,960
just kind of blind from Python and let's

00:54:27,270 --> 00:54:29,960
see what happens

00:54:30,430 --> 00:54:39,640
okay so the the thing is it's looping

00:54:36,630 --> 00:54:41,319
I'm not sure what it's doing exactly but

00:54:39,640 --> 00:54:43,150
it's not trash I think the key thing is

00:54:41,319 --> 00:54:47,890
it's not crashing that's probably the

00:54:43,150 --> 00:54:50,440
the the key part of that now to see what

00:54:47,890 --> 00:54:54,099
it's doing a little bit better I might

00:54:50,440 --> 00:54:55,720
go to my machine and turn off the print

00:54:54,099 --> 00:54:57,309
statement I mean a lot of the output

00:54:55,720 --> 00:54:58,839
there is coming from the print statement

00:54:57,309 --> 00:55:04,089
so let me let me just comment that out

00:54:58,839 --> 00:55:06,819
and then try this again here okay so now

00:55:04,089 --> 00:55:08,559
what you're seeing is it's like it's

00:55:06,819 --> 00:55:10,000
actually calling those Python functions

00:55:08,559 --> 00:55:13,539
the import these are the import

00:55:10,000 --> 00:55:18,369
functions right it's like huh okay draw

00:55:13,539 --> 00:55:20,020
a particle draw and I me so forth maybe

00:55:18,369 --> 00:55:21,730
what I would really like to do is

00:55:20,020 --> 00:55:26,470
something a bit more interesting with

00:55:21,730 --> 00:55:29,170
those okay let me let me come up here

00:55:26,470 --> 00:55:31,660
it's like though those are not not so

00:55:29,170 --> 00:55:34,150
interesting maybe a more interesting

00:55:31,660 --> 00:55:38,230
thing to do would be to pump them over

00:55:34,150 --> 00:55:39,849
to pygame this is what this is this is

00:55:38,230 --> 00:55:42,339
what like kids like to play with in

00:55:39,849 --> 00:55:46,539
school and stuff right so so I'm gonna

00:55:42,339 --> 00:55:48,130
I'm gonna load up PI game I've just

00:55:46,539 --> 00:55:49,569
reimplemented some of the functions in

00:55:48,130 --> 00:55:52,210
PI game but so they like instead of

00:55:49,569 --> 00:55:56,170
printing I'm drawing circles and circles

00:55:52,210 --> 00:55:57,970
and stuff so doing the same just

00:55:56,170 --> 00:55:59,799
replacing those functions okay let's

00:55:57,970 --> 00:56:01,930
let's replace it with PI game if you're

00:55:59,799 --> 00:56:03,490
gonna do with PI game there's a few

00:56:01,930 --> 00:56:04,960
things you need to do in the event loop

00:56:03,490 --> 00:56:09,299
here you've got it you have to do a

00:56:04,960 --> 00:56:09,299
little bit of like event handling

00:56:09,600 --> 00:56:14,580
let's just let's just ignore that for

00:56:11,640 --> 00:56:18,390
now and you also have to do a like a

00:56:14,580 --> 00:56:20,370
like a display flip way that PI game

00:56:18,390 --> 00:56:22,680
works is you draw and you flip the flip

00:56:20,370 --> 00:56:26,460
the display so so let's put that in

00:56:22,680 --> 00:56:29,180
there but don't let's see let's see if

00:56:26,460 --> 00:56:29,180
that does anything

00:56:33,600 --> 00:56:42,510
okay so yeah now now I don't have any

00:56:39,990 --> 00:56:44,610
way to play the game okay so like I mean

00:56:42,510 --> 00:56:47,340
okay like I didn't put any like key

00:56:44,610 --> 00:56:49,490
bindings into the into the game so that

00:56:47,340 --> 00:56:52,950
that is something that you can do with

00:56:49,490 --> 00:56:54,780
that that's that's not easy so it's not

00:56:52,950 --> 00:56:56,460
hard to do but it like wait basically

00:56:54,780 --> 00:57:00,270
what I'll do is just check for likes and

00:56:56,460 --> 00:57:01,890
different keys and I'm calling more rust

00:57:00,270 --> 00:57:03,540
functions there there's some functions

00:57:01,890 --> 00:57:06,300
in there to toggle shooting and turn

00:57:03,540 --> 00:57:10,170
left and so forth so I'm just gonna add

00:57:06,300 --> 00:57:13,440
that in there and then let's let's try

00:57:10,170 --> 00:57:14,940
play in the game again okay so so now

00:57:13,440 --> 00:57:18,810
what's happening this thing's this thing

00:57:14,940 --> 00:57:24,960
is running in Python and I can basically

00:57:18,810 --> 00:57:26,880
fly around and shoot them just to be

00:57:24,960 --> 00:57:28,890
clear I like like what is happened here

00:57:26,880 --> 00:57:32,400
I mean we based this is this is a rust

00:57:28,890 --> 00:57:35,190
program running in a horrible

00:57:32,400 --> 00:57:36,900
interpreter in Python I like don't don't

00:57:35,190 --> 00:57:38,130
don't don't use it I mean though the

00:57:36,900 --> 00:57:39,990
whole thing is just running is this

00:57:38,130 --> 00:57:43,020
interpreted stack machine in Python

00:57:39,990 --> 00:57:45,810
using PI game but the software for it is

00:57:43,020 --> 00:57:47,520
this is this rust thing on the on the

00:57:45,810 --> 00:57:52,580
back yeah there's part of me that just

00:57:47,520 --> 00:57:52,580
wants to say borrow that rust you know

00:57:53,450 --> 00:57:57,270
I'm sorry rusty yeah you're fine you're

00:57:56,220 --> 00:58:00,540
fine I don't want to start a language

00:57:57,270 --> 00:58:03,510
war and the Python Tucker but but you

00:58:00,540 --> 00:58:07,890
you look at that and it's like that is

00:58:03,510 --> 00:58:10,150
that is sort of awesome in a way and it

00:58:07,890 --> 00:58:11,890
kind of brings me

00:58:10,150 --> 00:58:15,640
it kind of brings you to this you know

00:58:11,890 --> 00:58:17,079
this this this like future of Python you

00:58:15,640 --> 00:58:20,319
know I hear people talk about how what

00:58:17,079 --> 00:58:22,450
does pythons future and like it doesn't

00:58:20,319 --> 00:58:24,700
have a webassembly story and like what's

00:58:22,450 --> 00:58:27,460
going on with the types right you know

00:58:24,700 --> 00:58:30,039
all this all this stuff and I think like

00:58:27,460 --> 00:58:33,069
that the only thing that I would throw

00:58:30,039 --> 00:58:36,700
out there is that this webassembly stuff

00:58:33,069 --> 00:58:38,470
is not well known but it is super cool

00:58:36,700 --> 00:58:41,319
like if you are looking for something

00:58:38,470 --> 00:58:45,720
like weird crazy project to work on

00:58:41,319 --> 00:58:48,039
that's like really kind of interesting

00:58:45,720 --> 00:58:49,720
look at the I mean web I mean here's the

00:58:48,039 --> 00:58:52,450
thing that's so amazing a web assembly

00:58:49,720 --> 00:58:54,549
it almost has nothing to do with web

00:58:52,450 --> 00:58:55,900
programming in any kind of conventional

00:58:54,549 --> 00:58:57,700
sense right I mean it's like web

00:58:55,900 --> 00:59:01,299
assembly it's like is that emulated

00:58:57,700 --> 00:59:04,089
machine it's like a target for you know

00:59:01,299 --> 00:59:05,890
for like rust and for C++ and C and like

00:59:04,089 --> 00:59:09,700
you can compile stuff to it and you can

00:59:05,890 --> 00:59:11,019
make extension modules with it and yeah

00:59:09,700 --> 00:59:13,450
you couldn't you can run it in the

00:59:11,019 --> 00:59:15,039
browser if you want but you don't have

00:59:13,450 --> 00:59:16,809
to run it in the browser I mean there's

00:59:15,039 --> 00:59:19,809
actually a lot of kind of projects sort

00:59:16,809 --> 00:59:21,130
of going on right now that are you know

00:59:19,809 --> 00:59:22,509
sort of you know that that are sort of

00:59:21,130 --> 00:59:24,339
very interesting I would have you look

00:59:22,509 --> 00:59:26,410
at I want one thing that that I think

00:59:24,339 --> 00:59:28,509
was kind of a big inspiration on this

00:59:26,410 --> 00:59:30,970
talk is actually all our clients talk

00:59:28,509 --> 00:59:33,130
from Euro Python he actually did

00:59:30,970 --> 00:59:35,349
something with the same game so he did

00:59:33,130 --> 00:59:37,660
something with rocket but also running

00:59:35,349 --> 00:59:39,369
pipe running like wasm and python but he

00:59:37,660 --> 00:59:41,319
was doing like some AI like he hit he

00:59:39,369 --> 00:59:43,420
wrote an AI to play the game

00:59:41,319 --> 00:59:46,059
where he had like a sea program compiled

00:59:43,420 --> 00:59:47,950
a web assembly playing against the rust

00:59:46,059 --> 00:59:49,509
program in web assembly like compiled

00:59:47,950 --> 00:59:51,549
and separate modules and he had like

00:59:49,509 --> 00:59:52,779
some other other stuff so that would

00:59:51,549 --> 00:59:54,819
that was really cool

00:59:52,779 --> 00:59:56,589
there's this pie I like pie Oh died

00:59:54,819 --> 00:59:58,839
project which is somewhat recent which

00:59:56,589 --> 01:00:00,430
is like the complete Python scientific

00:59:58,839 --> 01:00:02,330
stack running in web assembly in the

01:00:00,430 --> 01:00:05,120
browser

01:00:02,330 --> 01:00:08,540
there's this PPC I think it's pure

01:00:05,120 --> 01:00:11,330
Python compiler project has some has

01:00:08,540 --> 01:00:13,490
some Azam's support this way Zoomer

01:00:11,330 --> 01:00:16,430
project this is like a web assembly

01:00:13,490 --> 01:00:18,350
runtime that is not part of the web it's

01:00:16,430 --> 01:00:20,210
actually like a standalone library and

01:00:18,350 --> 01:00:21,560
just like run code and you could run

01:00:20,210 --> 01:00:25,720
that from Python or a whole bunch of

01:00:21,560 --> 01:00:27,830
other languages so I think the thing I

01:00:25,720 --> 01:00:30,380
would just kind of kind of maybe within

01:00:27,830 --> 01:00:33,560
the talk it's like this is like an area

01:00:30,380 --> 01:00:35,870
that it just seems really wild and

01:00:33,560 --> 01:00:38,360
really kind of Awesome and like an

01:00:35,870 --> 01:00:40,430
opportunity for just doing really neat

01:00:38,360 --> 01:00:42,290
fun stuff and I've met a lot of like

01:00:40,430 --> 01:00:43,610
students at the conference and stuff we

01:00:42,290 --> 01:00:44,750
were like Oh Dave what should what

01:00:43,610 --> 01:00:48,490
should I work on or what should I be

01:00:44,750 --> 01:00:50,780
doing this is definitely something cool

01:00:48,490 --> 01:00:52,670
that I think could be worked there's a

01:00:50,780 --> 01:00:54,170
lot of like a lot of interesting

01:00:52,670 --> 01:00:55,670
possibilities I mean engine and just

01:00:54,170 --> 01:00:58,430
like doing it was kind of you know we

01:00:55,670 --> 01:01:00,380
just kind of jumped that hurdle of like

01:00:58,430 --> 01:01:02,390
wait wait it's not maybe it's not that

01:01:00,380 --> 01:01:04,490
complicated you know that's that's kind

01:01:02,390 --> 01:01:06,440
of a very interesting thing so that is

01:01:04,490 --> 01:01:07,910
that's the end of the talk maybe went a

01:01:06,440 --> 01:01:09,020
little bit a little bit over but thank

01:01:07,910 --> 01:01:12,160
you for him I've actually had a great

01:01:09,020 --> 01:01:12,160

YouTube URL: https://www.youtube.com/watch?v=VUT386_GKI8


