Title: Extracting tabular data from PDF'S with Camelot & Excalibur - Vinayak Mehta
Publication date: 2019-11-16
Playlist: PyCon India 2019
Description: 
	This talk was presented at PyCon India 2019, on Oct 12th - 13th, at the Chennai Trade Centre.
Website: https://in.pycon.org/2019
Captions: 
	00:00:04,670 --> 00:00:10,380
so Who am I I'm Ben I've met

00:00:07,770 --> 00:00:13,680
from Bangalore India I'm the author and

00:00:10,380 --> 00:00:15,540
maintainer of Camelot in Excalibur the

00:00:13,680 --> 00:00:18,660
two Python packages that this talk is

00:00:15,540 --> 00:00:20,910
about during the day I work as a data

00:00:18,660 --> 00:00:23,670
engineer at Grover's where I build tools

00:00:20,910 --> 00:00:25,710
and services that help stakeholders in

00:00:23,670 --> 00:00:29,280
the system to take data-driven decisions

00:00:25,710 --> 00:00:34,020
for the business and we deliver 25

00:00:29,280 --> 00:00:37,140
million orders to 16 cities in beer that

00:00:34,020 --> 00:00:38,969
number is growing every month so in like

00:00:37,140 --> 00:00:41,850
we are hiring across roles at both our

00:00:38,969 --> 00:00:43,680
offices in Goodnow in Bangalore so like

00:00:41,850 --> 00:00:46,170
if you want to know more about that you

00:00:43,680 --> 00:00:49,739
can catch us at the poster presentation

00:00:46,170 --> 00:00:52,170
that is happening at 4:15 I'm also an

00:00:49,739 --> 00:00:55,320
organizer at my data Bangalore we just

00:00:52,170 --> 00:00:58,050
started out in June this year and we are

00:00:55,320 --> 00:01:00,300
doing like monthly meetups this month

00:00:58,050 --> 00:01:02,190
our meetup is on October 19th so if

00:01:00,300 --> 00:01:05,040
you're like in and around Bangalore just

00:01:02,190 --> 00:01:09,750
consider submitting a talk by opening an

00:01:05,040 --> 00:01:12,030
issue on that github repo so what does

00:01:09,750 --> 00:01:14,219
this talk about I'm here to talk about

00:01:12,030 --> 00:01:16,889
how you can extract tables from PDFs

00:01:14,219 --> 00:01:18,810
very easily I believe each one of us has

00:01:16,889 --> 00:01:22,639
encountered a PDF at some point in our

00:01:18,810 --> 00:01:24,719
lives like resumes or research papers a

00:01:22,639 --> 00:01:28,950
PDF stands for the Portable Document

00:01:24,719 --> 00:01:30,899
format so this is a high-level overview

00:01:28,950 --> 00:01:32,850
of the talk I'll briefly go through the

00:01:30,899 --> 00:01:35,429
history of the format I'll touch upon

00:01:32,850 --> 00:01:38,219
some basing problems I faced while

00:01:35,429 --> 00:01:40,170
extracting tables from a PDF file then

00:01:38,219 --> 00:01:43,170
demonstrate how you can use Camelot in

00:01:40,170 --> 00:01:44,939
Excalibur to do that and then we'll

00:01:43,170 --> 00:01:47,310
finally discuss the roadmap of these

00:01:44,939 --> 00:01:49,950
projects and maybe do a Q&A if we have

00:01:47,310 --> 00:01:54,929
some time in here there'll be some pies

00:01:49,950 --> 00:01:58,909
and fun facts so Gaius so let's begin

00:01:54,929 --> 00:02:01,859
with van Maus Python coil Python anyone

00:01:58,909 --> 00:02:03,689
yeah correct so while he began

00:02:01,859 --> 00:02:05,579
implementing the language Guido van

00:02:03,689 --> 00:02:07,469
Rossum was also reading the published

00:02:05,579 --> 00:02:10,080
scripts from Monty Python's Holy Grail

00:02:07,469 --> 00:02:12,680
which is a BBC comedy series from the

00:02:10,080 --> 00:02:14,659
70s he wanted Annie

00:02:12,680 --> 00:02:17,870
that was short unique and slightly

00:02:14,659 --> 00:02:20,090
mysterious and thus we have Python you

00:02:17,870 --> 00:02:22,489
know there is a thing that keeps me up

00:02:20,090 --> 00:02:25,670
at night so like what if it was called

00:02:22,489 --> 00:02:27,219
Monty kangaroos Flying Circus like I

00:02:25,670 --> 00:02:32,200
wonder how history would have shaped

00:02:27,219 --> 00:02:32,200
like we might have been at gank on oh

00:02:32,439 --> 00:02:40,189
let's get back to the topic at hand so

00:02:37,879 --> 00:02:42,439
PDF was born out of the Camelot project

00:02:40,189 --> 00:02:45,919
almost thirty years ago this is a six

00:02:42,439 --> 00:02:48,739
page memo by JMO not the co-founder of

00:02:45,919 --> 00:02:51,109
Adobe where he gives an outline outline

00:02:48,739 --> 00:02:52,909
of the Camelot project he describes the

00:02:51,109 --> 00:02:55,480
problems people were facing at the time

00:02:52,909 --> 00:03:01,760
to visualize material between different

00:02:55,480 --> 00:03:03,469
computer systems so the first line is

00:03:01,760 --> 00:03:05,629
kind of like a high-level summary of

00:03:03,469 --> 00:03:07,459
that paper the goal was to make

00:03:05,629 --> 00:03:10,099
documents that look the same of an on

00:03:07,459 --> 00:03:11,989
any operating system you're using to

00:03:10,099 --> 00:03:14,239
look at them and should print the same

00:03:11,989 --> 00:03:18,019
on any printer like as the author

00:03:14,239 --> 00:03:19,729
intended it was created out of a subset

00:03:18,019 --> 00:03:22,129
of PostScript which was a page

00:03:19,729 --> 00:03:23,900
description language which is the page

00:03:22,129 --> 00:03:25,909
description language which had already

00:03:23,900 --> 00:03:30,560
solved this view and print anyway a

00:03:25,909 --> 00:03:35,150
problem psn itself is quite broad like a

00:03:30,560 --> 00:03:37,759
programming language in itself in PDF or

00:03:35,150 --> 00:03:41,060
a PDF is designed to be self-contained

00:03:37,759 --> 00:03:42,729
it encapsulates components required to

00:03:41,060 --> 00:03:46,579
render a document on different systems

00:03:42,729 --> 00:03:49,579
which include text fonts vector graphics

00:03:46,579 --> 00:03:50,959
in raster images all these components

00:03:49,579 --> 00:03:54,409
travel with the document wherever it

00:03:50,959 --> 00:03:56,449
goes some more history or the PDF it was

00:03:54,409 --> 00:03:59,030
created in the early nineties by Adobe

00:03:56,449 --> 00:04:02,000
it predates the world wide web in HTML

00:03:59,030 --> 00:04:06,310
it was a propriety format initially but

00:04:02,000 --> 00:04:09,650
was released as an ISO standard in 2006

00:04:06,310 --> 00:04:12,259
so at a very high level a PDF contains

00:04:09,650 --> 00:04:14,060
instructions to place the components

00:04:12,259 --> 00:04:16,370
that I just mentioned that XY

00:04:14,060 --> 00:04:19,070
coordinates relative to the bottom left

00:04:16,370 --> 00:04:20,709
corner of a page so like think of that

00:04:19,070 --> 00:04:25,419
bottom left corner as

00:04:20,709 --> 00:04:28,060
in origin or a 2d plane which means that

00:04:25,419 --> 00:04:30,850
birds are simulated by placing some

00:04:28,060 --> 00:04:32,830
characters closer together and sentences

00:04:30,850 --> 00:04:36,400
are simulated by placing the voids

00:04:32,830 --> 00:04:38,350
relatively far apart so in this case in

00:04:36,400 --> 00:04:40,660
quick a queue and you would be like

00:04:38,350 --> 00:04:43,060
somewhat closer and then the next word

00:04:40,660 --> 00:04:48,580
begins K and B would be placed somewhat

00:04:43,060 --> 00:04:51,400
apart so how a table simulated by just

00:04:48,580 --> 00:04:52,870
placing words like in lines like they

00:04:51,400 --> 00:04:55,990
would have paired in a spreadsheet a

00:04:52,870 --> 00:04:57,970
spreadsheet in reading order basically

00:04:55,990 --> 00:05:01,120
they just look like tables there's no

00:04:57,970 --> 00:05:03,370
information internally about whether a

00:05:01,120 --> 00:05:05,889
column is the column or a row is a row

00:05:03,370 --> 00:05:10,060
or what relationships are there between

00:05:05,889 --> 00:05:12,039
cells this drawback of PDF having no

00:05:10,060 --> 00:05:14,260
internal representation of a table

00:05:12,039 --> 00:05:15,700
structure makes it difficult to extract

00:05:14,260 --> 00:05:18,490
tables for analysis

00:05:15,700 --> 00:05:22,510
sadly a lot of open data is released as

00:05:18,490 --> 00:05:25,030
PDFs like in millions of PDFs possibly

00:05:22,510 --> 00:05:26,979
billions of periods in like a format

00:05:25,030 --> 00:05:30,490
that wasn't designed for tabular data in

00:05:26,979 --> 00:05:33,870
the first place a better format to store

00:05:30,490 --> 00:05:36,580
tabular data is the CSV which stores

00:05:33,870 --> 00:05:39,490
tabulated and clean text each line of

00:05:36,580 --> 00:05:41,580
the file is the table row and each row

00:05:39,490 --> 00:05:44,200
consists of one or more columns

00:05:41,580 --> 00:05:46,120
separated by commas and hence comma

00:05:44,200 --> 00:05:50,020
separated values which is its full form

00:05:46,120 --> 00:05:52,570
or Jason CSV and JSON files can be

00:05:50,020 --> 00:05:55,300
directly read into like an analyzable

00:05:52,570 --> 00:05:58,960
table structure using maybe pandas or a

00:05:55,300 --> 00:06:03,310
lot of other open-source tools now let's

00:05:58,960 --> 00:06:05,919
go back to tables inside inside PDFs if

00:06:03,310 --> 00:06:08,050
you ever try to copy/paste a table from

00:06:05,919 --> 00:06:10,960
a PDF you might have found it that it's

00:06:08,050 --> 00:06:13,360
not very easy to do like most of the

00:06:10,960 --> 00:06:15,729
times you have to copy itself one by one

00:06:13,360 --> 00:06:20,770
and paste it into a text editor or maybe

00:06:15,729 --> 00:06:24,430
Excel in 2016 I was working on scraping

00:06:20,770 --> 00:06:25,990
open data from PDAs for a start up these

00:06:24,430 --> 00:06:29,080
are some of the PDF tables that I wrote

00:06:25,990 --> 00:06:31,510
with like when an organization wants to

00:06:29,080 --> 00:06:34,930
release open data it comes up

00:06:31,510 --> 00:06:38,170
a bazaar in colorful table format there

00:06:34,930 --> 00:06:40,680
is no set standard try to imagine coffee

00:06:38,170 --> 00:06:43,300
pasting data from hundreds of different

00:06:40,680 --> 00:06:47,140
different of PDFs and with hundreds of

00:06:43,300 --> 00:06:49,300
pages man that's not scalable but there

00:06:47,140 --> 00:06:51,370
should be a better way to get a table

00:06:49,300 --> 00:06:54,280
out of PDFs right without copy pasting

00:06:51,370 --> 00:06:57,280
itself indeed there are a bunch of

00:06:54,280 --> 00:06:59,170
open-source tools oh yeah indeed there

00:06:57,280 --> 00:07:01,960
are a bunch of open source PDF table

00:06:59,170 --> 00:07:04,860
extraction tools tabular is the first

00:07:01,960 --> 00:07:07,690
one that I tried it works really well

00:07:04,860 --> 00:07:10,630
sometimes it has a nice interface it's

00:07:07,690 --> 00:07:13,030
Java based then this PDF plumber' which

00:07:10,630 --> 00:07:15,010
is Python based in open source PDF

00:07:13,030 --> 00:07:16,930
tables which was originally open source

00:07:15,010 --> 00:07:19,480
but now it's proprietary

00:07:16,930 --> 00:07:21,730
PDF table extract which is unfortunately

00:07:19,480 --> 00:07:24,400
no longer maintained and there are

00:07:21,730 --> 00:07:26,770
various other free and paid online

00:07:24,400 --> 00:07:30,670
services small PDF is the one that I had

00:07:26,770 --> 00:07:33,490
tried problems with existing tools let's

00:07:30,670 --> 00:07:35,890
take this PDF for example this is a VG

00:07:33,490 --> 00:07:37,690
weekly disease outbreak report released

00:07:35,890 --> 00:07:40,360
by the Ministry of Health in family

00:07:37,690 --> 00:07:42,310
welfare in the government of India it

00:07:40,360 --> 00:07:45,700
contains weekly read about the number of

00:07:42,310 --> 00:07:48,420
cases in depth for deported for various

00:07:45,700 --> 00:07:50,860
diseases diseases in Indian districts

00:07:48,420 --> 00:07:52,690
with a comment column on like what

00:07:50,860 --> 00:07:55,210
action was taken to prevent that we see

00:07:52,690 --> 00:07:57,370
and for that outbreak looks like a very

00:07:55,210 --> 00:08:00,250
easy table to extract right it has

00:07:57,370 --> 00:08:03,190
clearly defined lines and just has seven

00:08:00,250 --> 00:08:05,100
rows and n columns well this is the

00:08:03,190 --> 00:08:08,410
output when you pass it through tabular

00:08:05,100 --> 00:08:10,870
you can see like the table headers are

00:08:08,410 --> 00:08:14,050
in different rows in the comments column

00:08:10,870 --> 00:08:17,140
is all over the place this is the output

00:08:14,050 --> 00:08:18,640
of PDF tables they have a website where

00:08:17,140 --> 00:08:20,950
you can upload your PDF and then

00:08:18,640 --> 00:08:24,150
download the extracted output it works

00:08:20,950 --> 00:08:26,590
slightly better but it costs money

00:08:24,150 --> 00:08:29,050
when these tools fail you are just left

00:08:26,590 --> 00:08:31,750
with a badly extracted table which you

00:08:29,050 --> 00:08:34,030
not have to clean up adding adding extra

00:08:31,750 --> 00:08:36,340
time between the data and its analysis

00:08:34,030 --> 00:08:39,220
and there's no possibility to get even

00:08:36,340 --> 00:08:41,979
like 80 or 90% of the table out nicely

00:08:39,220 --> 00:08:42,730
by tweaking some knobs or some

00:08:41,979 --> 00:08:45,490
parameters

00:08:42,730 --> 00:08:48,880
so like maybe your data cleaning time is

00:08:45,490 --> 00:08:51,250
short of one solution that I tried when

00:08:48,880 --> 00:08:53,230
these tools didn't work was PDF to text

00:08:51,250 --> 00:08:56,320
which is pre-installed in most Linux

00:08:53,230 --> 00:08:58,060
systems under popular utils this is a

00:08:56,320 --> 00:09:01,690
sample PDF table that I created using

00:08:58,060 --> 00:09:03,850
low-tech you can use PDF to text like

00:09:01,690 --> 00:09:05,830
this PDF to takes filename and you can

00:09:03,850 --> 00:09:09,370
use the - layout option which will

00:09:05,830 --> 00:09:11,380
extract all the text from a PDF using in

00:09:09,370 --> 00:09:15,070
preserve the layout using by white

00:09:11,380 --> 00:09:17,770
spaces but it has its own set of

00:09:15,070 --> 00:09:19,960
problems first of all that was it output

00:09:17,770 --> 00:09:21,910
is a text file and you have to have a

00:09:19,960 --> 00:09:23,530
post extraction step where you have to

00:09:21,910 --> 00:09:25,930
make sense of the underlying data table

00:09:23,530 --> 00:09:28,740
maybe using complex regular expressions

00:09:25,930 --> 00:09:30,990
which is expensive and time-consuming

00:09:28,740 --> 00:09:33,970
imagine having the github repository

00:09:30,990 --> 00:09:36,370
containing hundreds of strips for

00:09:33,970 --> 00:09:40,260
different types of PDF tables that is

00:09:36,370 --> 00:09:43,150
not neither scalable in normanton able

00:09:40,260 --> 00:09:44,890
to overcome some of the problems of not

00:09:43,150 --> 00:09:46,420
having a tool that gives you more

00:09:44,890 --> 00:09:48,970
control over the table extraction

00:09:46,420 --> 00:09:50,920
process by being configurable in the

00:09:48,970 --> 00:09:52,900
developer friendly I've worked on

00:09:50,920 --> 00:09:55,540
developing in open sourcing Camela right

00:09:52,900 --> 00:09:57,580
social cops and I designed this logo

00:09:55,540 --> 00:10:00,160
taking some inspiration from sci-fi and

00:09:57,580 --> 00:10:01,740
Astro PI you can see the snake around a

00:10:00,160 --> 00:10:05,110
table

00:10:01,740 --> 00:10:07,000
well--why Camelot because it works well

00:10:05,110 --> 00:10:09,520
out of works well out of the box pretty

00:10:07,000 --> 00:10:11,830
much for most cases and it auto detects

00:10:09,520 --> 00:10:14,020
that the table is without you having to

00:10:11,830 --> 00:10:15,610
do anything for complex one there is

00:10:14,020 --> 00:10:19,480
some table extraction parameters that

00:10:15,610 --> 00:10:21,250
you can use there at like for example

00:10:19,480 --> 00:10:22,600
you can say that that's not a single

00:10:21,250 --> 00:10:24,340
column that you recognize that's

00:10:22,600 --> 00:10:27,910
actually five different columns that

00:10:24,340 --> 00:10:29,950
these offsets a feature that a lot of

00:10:27,910 --> 00:10:32,620
users like users like as visual

00:10:29,950 --> 00:10:34,960
debugging using matplotlib which lets

00:10:32,620 --> 00:10:38,070
you visualize all the components and

00:10:34,960 --> 00:10:41,950
that the library found on the PDF page

00:10:38,070 --> 00:10:44,050
in like those visualizations can help

00:10:41,950 --> 00:10:46,260
you tweak these different options that a

00:10:44,050 --> 00:10:49,900
library provides to get a better output

00:10:46,260 --> 00:10:52,600
it also exports to all the useful

00:10:49,900 --> 00:10:55,030
formats like CSV Jason Excel HTML and

00:10:52,600 --> 00:10:55,810
even pandas data frames so you can

00:10:55,030 --> 00:10:57,880
direct

00:10:55,810 --> 00:11:01,060
extract a table out of a PDF and use it

00:10:57,880 --> 00:11:02,830
in your data analysis workflows in it's

00:11:01,060 --> 00:11:05,260
written in our favorite programming

00:11:02,830 --> 00:11:08,470
language it's MIT license and it has

00:11:05,260 --> 00:11:10,890
excellent documentation let's do a short

00:11:08,470 --> 00:11:10,890
demo here

00:11:14,490 --> 00:11:19,380
so this is the Jupiter notebook which

00:11:16,960 --> 00:11:19,380
I've written

00:11:21,480 --> 00:11:24,480
oops

00:11:25,460 --> 00:11:31,930
if they can in everyone view it can

00:11:29,270 --> 00:11:36,350
everyone use the code okay

00:11:31,930 --> 00:11:39,230
I'll still make it larger so all you

00:11:36,350 --> 00:11:42,860
have to do is import Camelot

00:11:39,230 --> 00:11:44,390
then you do Camelot read PDF this is it

00:11:42,860 --> 00:11:46,370
has an API that is similar to pandas

00:11:44,390 --> 00:11:49,280
where you do reach the esv or read HTML

00:11:46,370 --> 00:11:51,320
you pass in your file name and you get

00:11:49,280 --> 00:11:54,250
oh wait

00:11:51,320 --> 00:11:55,610
yeah and you get a table list object so

00:11:54,250 --> 00:11:58,490
the wrapper

00:11:55,610 --> 00:12:04,430
there like is showing you that it found

00:11:58,490 --> 00:12:08,360
one table on the PDF page in this is the

00:12:04,430 --> 00:12:13,520
PDF page that I showed earlier oh yeah

00:12:08,360 --> 00:12:19,310
this one oh it's also on the next slide

00:12:13,520 --> 00:12:22,430
so you can access that in attribute

00:12:19,310 --> 00:12:24,820
using a tables not in you can access

00:12:22,430 --> 00:12:28,550
each table within a table is using the

00:12:24,820 --> 00:12:30,260
indices so if we do a tables 0 it will

00:12:28,550 --> 00:12:32,270
show the shape of that table which is

00:12:30,260 --> 00:12:36,050
your seven rows and n columns that are

00:12:32,270 --> 00:12:38,810
actually present on the page you can get

00:12:36,050 --> 00:12:41,480
a parsing report of how the extraction

00:12:38,810 --> 00:12:44,330
process was handled so if it's a good

00:12:41,480 --> 00:12:48,620
accuracy then your table was found like

00:12:44,330 --> 00:12:50,870
your table would was extracted nicely we

00:12:48,620 --> 00:12:53,450
scroll down

00:12:50,870 --> 00:12:56,540
then you can access the table data frame

00:12:53,450 --> 00:12:59,110
using a table 0df and it's the same

00:12:56,540 --> 00:13:03,410
table that was found on the PDF page

00:12:59,110 --> 00:13:07,550
like this after that you can export your

00:13:03,410 --> 00:13:10,370
whole table list into CS B's so if you

00:13:07,550 --> 00:13:13,040
do an export table of CSV and you'll see

00:13:10,370 --> 00:13:15,920
that since one table was found on only

00:13:13,040 --> 00:13:18,110
one page it exported Muncey's me then

00:13:15,920 --> 00:13:19,460
you can plot all the components that

00:13:18,110 --> 00:13:23,870
were found on a PDF page for example

00:13:19,460 --> 00:13:26,720
that text or the grid that the library

00:13:23,870 --> 00:13:29,480
directed the table boundaries that were

00:13:26,720 --> 00:13:31,550
detected the lines that were detected in

00:13:29,480 --> 00:13:33,710
the line intersections that were

00:13:31,550 --> 00:13:34,880
detected so like maybe if you didn't see

00:13:33,710 --> 00:13:36,290
enough intersections you could tweak

00:13:34,880 --> 00:13:38,480
some parameters to get more

00:13:36,290 --> 00:13:40,400
intersections which would mean which

00:13:38,480 --> 00:13:42,170
would signify that your table was

00:13:40,400 --> 00:13:45,890
extracted nicely and it was recognized

00:13:42,170 --> 00:13:49,600
nicely cool let's go back to the demo oh

00:13:45,890 --> 00:13:49,600
the presentation okay

00:13:51,790 --> 00:13:57,100
so also the documentation is on read the

00:13:54,910 --> 00:13:59,110
dots so if you go through the advanced

00:13:57,100 --> 00:14:01,230
use it section you can see all the

00:13:59,110 --> 00:14:05,410
parameters that the library gives you

00:14:01,230 --> 00:14:07,149
and like all of these parameters have

00:14:05,410 --> 00:14:12,940
Illustrated examples so that it's easy

00:14:07,149 --> 00:14:15,010
for you to understand cool so this is a

00:14:12,940 --> 00:14:17,920
slider added just in case the demo

00:14:15,010 --> 00:14:21,010
didn't work camelid also comes with a

00:14:17,920 --> 00:14:23,410
command-line interface which you can see

00:14:21,010 --> 00:14:26,230
by doing camel or - a fennel on your

00:14:23,410 --> 00:14:28,660
shell the easiest way to install camelot

00:14:26,230 --> 00:14:30,430
is using Conda where you do just a

00:14:28,660 --> 00:14:32,670
corner install Camelot - pi and you

00:14:30,430 --> 00:14:35,079
specify the channel which is Conda Forge

00:14:32,670 --> 00:14:36,940
using pip you will have to first install

00:14:35,079 --> 00:14:38,829
the dependencies which are TK and go

00:14:36,940 --> 00:14:41,649
script and then you can simply do a pip

00:14:38,829 --> 00:14:43,959
install Camelot - pi is TV CV because

00:14:41,649 --> 00:14:46,120
that is the most basic flavor that you

00:14:43,959 --> 00:14:48,070
want it also installs open CV on your

00:14:46,120 --> 00:14:51,100
system which is used to recognize lines

00:14:48,070 --> 00:14:53,820
on a page so how it works

00:14:51,100 --> 00:14:56,680
it is built on top of PDF minor which is

00:14:53,820 --> 00:14:59,170
an awesome program Python library that

00:14:56,680 --> 00:15:02,380
gives you all the components from a PDF

00:14:59,170 --> 00:15:04,420
page in they coordinate there are two

00:15:02,380 --> 00:15:06,250
parsing flavors lattice and stream which

00:15:04,420 --> 00:15:08,589
the names of which were inspired from

00:15:06,250 --> 00:15:11,440
tabular lattice looks four lines on a

00:15:08,589 --> 00:15:13,480
page by first converting the page into

00:15:11,440 --> 00:15:16,839
an image using KO script and then using

00:15:13,480 --> 00:15:19,120
OpenCV to get the two it identifies

00:15:16,839 --> 00:15:23,380
those lines on that image in stream

00:15:19,120 --> 00:15:25,750
looks for white spaces and alignment the

00:15:23,380 --> 00:15:28,829
text alignment for example left right

00:15:25,750 --> 00:15:31,600
and center - I guess columns on a page

00:15:28,829 --> 00:15:33,579
and there is a disclaimer the library

00:15:31,600 --> 00:15:37,810
only works with takes base PDS right now

00:15:33,579 --> 00:15:41,500
and not scanned images and documents so

00:15:37,810 --> 00:15:43,089
fun facts ahead as you can already guess

00:15:41,500 --> 00:15:46,209
like you must be wondering why it's

00:15:43,089 --> 00:15:49,180
called Camelot so Camelot is a castle in

00:15:46,209 --> 00:15:52,470
Monty Python and the Holy Grail in its

00:15:49,180 --> 00:15:55,980
and the Arthurian legend affected in

00:15:52,470 --> 00:15:55,980
like in the film

00:15:57,420 --> 00:16:00,870
in another fun fact the pipe I was

00:15:59,550 --> 00:16:03,560
initially called the cheese shop based

00:16:00,870 --> 00:16:06,450
on the Monty Python cheese shop sketch

00:16:03,560 --> 00:16:08,660
but let's get back to the presentation

00:16:06,450 --> 00:16:10,950
but what if you don't want to write code

00:16:08,660 --> 00:16:17,190
Camelot comes with a web interface

00:16:10,950 --> 00:16:20,100
called Excalibur oh wait you can use the

00:16:17,190 --> 00:16:22,110
web interface you just do excalibur rep

00:16:20,100 --> 00:16:31,370
server on your terminal which I'll just

00:16:22,110 --> 00:16:36,750
- cool it's running go to local OS 5,000

00:16:31,370 --> 00:16:41,070
so here you can upload your PDF it's

00:16:36,750 --> 00:16:43,230
upload the first PDF you can specify the

00:16:41,070 --> 00:16:45,620
page numbers that you want to part by

00:16:43,230 --> 00:16:49,829
default it will take the first page and

00:16:45,620 --> 00:16:53,190
Excalibur is a sync by design so you'll

00:16:49,829 --> 00:16:56,880
have to wait for the page to appear now

00:16:53,190 --> 00:17:00,690
you can auto detect tables well that the

00:16:56,880 --> 00:17:03,000
libraries recognized or you can select

00:17:00,690 --> 00:17:04,530
the flavor that you want in this case we

00:17:03,000 --> 00:17:06,419
want lattice because it's a table with

00:17:04,530 --> 00:17:10,500
lines and we just click on View and

00:17:06,419 --> 00:17:12,120
download data again you'll have to

00:17:10,500 --> 00:17:14,809
refresh because it because it starts a

00:17:12,120 --> 00:17:17,280
background job that parses your PDF page

00:17:14,809 --> 00:17:19,799
so we can see the PDF page will sparse

00:17:17,280 --> 00:17:23,329
nicely and now you can download it in

00:17:19,799 --> 00:17:23,329
any format that you want

00:17:25,460 --> 00:17:29,960
Mike's caliber you it's a web interface

00:17:27,740 --> 00:17:34,550
so it offers a sustained extraction it's

00:17:29,960 --> 00:17:36,530
easier than a Python library since like

00:17:34,550 --> 00:17:38,180
it is installed on your machine your

00:17:36,530 --> 00:17:41,360
data is stays on your machine it never

00:17:38,180 --> 00:17:45,320
goes out in like it's a configurable

00:17:41,360 --> 00:17:47,120
with salary for parallel workloads again

00:17:45,320 --> 00:17:49,430
you can install Excalibur using PIP

00:17:47,120 --> 00:17:52,220
after installing the dependencies which

00:17:49,430 --> 00:17:54,710
Artie can go script another fun fact

00:17:52,220 --> 00:17:57,920
sign that's the last one I swear what is

00:17:54,710 --> 00:17:59,930
it you must be wondering why it's called

00:17:57,920 --> 00:18:03,710
Excalibur it's named after the legendary

00:17:59,930 --> 00:18:05,840
sword of King Arthur in another fun fact

00:18:03,710 --> 00:18:08,060
the metasyntactic variables in the

00:18:05,840 --> 00:18:09,860
Python documentation are called spam and

00:18:08,060 --> 00:18:12,020
eggs instead of the traditional foo and

00:18:09,860 --> 00:18:14,360
bar because of the monty python's

00:18:12,020 --> 00:18:16,100
pamphlet you should check out marthy

00:18:14,360 --> 00:18:19,520
Monty Python's Flying Circus if you

00:18:16,100 --> 00:18:21,680
haven't already cool that was most of it

00:18:19,520 --> 00:18:25,070
now this is a road map for these

00:18:21,680 --> 00:18:27,110
projects so a lot of fish users seem to

00:18:25,070 --> 00:18:28,790
face issues where the card install go

00:18:27,110 --> 00:18:32,420
script on their systems because of

00:18:28,790 --> 00:18:34,070
different operating system so the plan

00:18:32,420 --> 00:18:36,740
is to remove go script and open CV all

00:18:34,070 --> 00:18:40,550
together then there are some performance

00:18:36,740 --> 00:18:44,590
enhancements that can be done so like to

00:18:40,550 --> 00:18:47,000
extract a PDF data of hundreds of pages

00:18:44,590 --> 00:18:49,190
then since you looked at the web

00:18:47,000 --> 00:18:51,410
interface you like you you can guess

00:18:49,190 --> 00:18:54,550
that it's very functional right now it

00:18:51,410 --> 00:18:58,520
can be made more nice and beautiful and

00:18:54,550 --> 00:19:00,530
we need to add OCR support to get tables

00:18:58,520 --> 00:19:03,770
out of scanned images and documents and

00:19:00,530 --> 00:19:05,720
maybe your favorite feature if you use

00:19:03,770 --> 00:19:09,130
these packages then we should talk

00:19:05,720 --> 00:19:12,710
afterwards about how you use them you

00:19:09,130 --> 00:19:15,740
can find these packages and these github

00:19:12,710 --> 00:19:18,770
repos if like again if you use them I

00:19:15,740 --> 00:19:20,900
would really appreciate if you would

00:19:18,770 --> 00:19:25,910
donate your time by contributing back to

00:19:20,900 --> 00:19:28,040
these rebels and so we are also doing a

00:19:25,910 --> 00:19:31,670
Camelot in Excalibur def spent on 14th

00:19:28,040 --> 00:19:34,040
and 15th so if you're around just they

00:19:31,670 --> 00:19:36,080
come off there's also act o buffets

00:19:34,040 --> 00:19:37,140
going on so if you open forward pull

00:19:36,080 --> 00:19:38,910
requests on

00:19:37,140 --> 00:19:42,450
open-source labor you will hit a t-shirt

00:19:38,910 --> 00:19:44,310
and I won't give that t-shirt but like

00:19:42,450 --> 00:19:47,250
the companies that are organizing the

00:19:44,310 --> 00:19:49,310
Oktoberfest will and you can find the

00:19:47,250 --> 00:19:51,510
slides afterwards at these lengths and

00:19:49,310 --> 00:19:54,450
like I'll be happy to answer some

00:19:51,510 --> 00:19:55,650
questions now thank you was this one

00:19:54,450 --> 00:19:57,270
yeah thanks

00:19:55,650 --> 00:19:59,190
that was an excellent presentation we

00:19:57,270 --> 00:20:02,760
actually do a lot of that and we've has

00:19:59,190 --> 00:20:03,300
sadly you're not very audible hello yeah

00:20:02,760 --> 00:20:05,850
yeah

00:20:03,300 --> 00:20:07,800
so we face similar problems we actually

00:20:05,850 --> 00:20:10,080
do a lot of that so I'm going to go

00:20:07,800 --> 00:20:13,320
ahead to my room and write this out a

00:20:10,080 --> 00:20:14,130
couple thoughts what if the tables are

00:20:13,320 --> 00:20:16,470
non-regulated

00:20:14,130 --> 00:20:18,150
like one has the first row has four

00:20:16,470 --> 00:20:19,910
columns the second one has two columns

00:20:18,150 --> 00:20:22,440
like they're doing it called spatter

00:20:19,910 --> 00:20:25,020
you mean the cells are spanning across

00:20:22,440 --> 00:20:27,480
multiple columns the if there are lines

00:20:25,020 --> 00:20:29,790
on that table then the library will

00:20:27,480 --> 00:20:32,220
recognize that very nicely and you will

00:20:29,790 --> 00:20:33,600
be able to like the library would

00:20:32,220 --> 00:20:35,880
recognize the spanning cells then put

00:20:33,600 --> 00:20:37,710
the data in such a way that you can copy

00:20:35,880 --> 00:20:46,260
it over those manning cells so that it's

00:20:37,710 --> 00:20:49,700
easy for you to defend me some thoughts

00:20:46,260 --> 00:20:52,700
on those here we'll get the text that's

00:20:49,700 --> 00:20:52,700
English

00:20:54,510 --> 00:20:59,970
and not the table as in the line yeah

00:20:57,600 --> 00:21:01,830
the lines like if we add all your

00:20:59,970 --> 00:21:04,020
support we'll still get the lines out

00:21:01,830 --> 00:21:06,990
using half grunts yeah morphological

00:21:04,020 --> 00:21:09,300
transforms from open severe but we'll do

00:21:06,990 --> 00:21:11,880
OCR to get the text out actually and

00:21:09,300 --> 00:21:13,470
then like assign that text in different

00:21:11,880 --> 00:21:14,010
table cells that were recognized on a

00:21:13,470 --> 00:21:16,620
page

00:21:14,010 --> 00:21:18,450
okay have you done any work maybe we

00:21:16,620 --> 00:21:23,400
should take this off planar oh yeah we

00:21:18,450 --> 00:21:25,920
should totally yeah one question here so

00:21:23,400 --> 00:21:27,330
do you know any limitations terrain or

00:21:25,920 --> 00:21:29,130
like I know there are different type of

00:21:27,330 --> 00:21:31,320
tables that very like stacked about this

00:21:29,130 --> 00:21:33,060
PDF formats yeah so are there any known

00:21:31,320 --> 00:21:35,820
limitations at this point of time which

00:21:33,060 --> 00:21:37,680
is not going to work you mean the

00:21:35,820 --> 00:21:41,490
limitations that I have which we already

00:21:37,680 --> 00:21:44,760
you know yeah so like most of the time

00:21:41,490 --> 00:21:47,130
if the your PDF is takes based in the to

00:21:44,760 --> 00:21:49,110
Unicode map inside your PDF is correct

00:21:47,130 --> 00:21:50,970
the library should be able to get your

00:21:49,110 --> 00:21:52,800
data we're using some parameters or

00:21:50,970 --> 00:21:55,770
without using them but there are cases

00:21:52,800 --> 00:21:58,290
where the encoding inside a PDF is

00:21:55,770 --> 00:22:00,330
broken so you might actually feel points

00:21:58,290 --> 00:22:02,850
that look like English that looks like

00:22:00,330 --> 00:22:04,650
English but it actually it has garbage

00:22:02,850 --> 00:22:08,310
inside it because the MAV is incorrect

00:22:04,650 --> 00:22:11,760
and then again scan documents are again

00:22:08,310 --> 00:22:14,120
a limitation right now any more

00:22:11,760 --> 00:22:16,950
questions I do have one question

00:22:14,120 --> 00:22:19,710
so you mentioned distributed workloads

00:22:16,950 --> 00:22:20,280
using salary what was that for I'm here

00:22:19,710 --> 00:22:23,160
oh yeah

00:22:20,280 --> 00:22:24,540
hi yeah just wanted to understand a

00:22:23,160 --> 00:22:29,100
little bit more about the distributed

00:22:24,540 --> 00:22:31,950
workloads point that you made what is it

00:22:29,100 --> 00:22:34,980
okay so by default it uses multi

00:22:31,950 --> 00:22:38,130
processing to like start those async

00:22:34,980 --> 00:22:40,650
jobs if you're not using like sylheti or

00:22:38,130 --> 00:22:42,840
but there's something called in

00:22:40,650 --> 00:22:46,470
excalibur toward CFG which is a file

00:22:42,840 --> 00:22:49,730
that you can modify with maybe your the

00:22:46,470 --> 00:22:52,350
URL to your rabbitmq and then you can

00:22:49,730 --> 00:22:54,690
start in excalibur web server in an

00:22:52,350 --> 00:22:56,760
Excalibur workers that will make it

00:22:54,690 --> 00:22:59,730
distributed so a single PDF you are

00:22:56,760 --> 00:23:03,150
trying to distribute and so each page

00:22:59,730 --> 00:23:04,769
will become a job or next action job ok

00:23:03,150 --> 00:23:06,480
run in parallel

00:23:04,769 --> 00:23:08,370
and what was the plan for moving away

00:23:06,480 --> 00:23:11,820
from NGO script and OpenCV what's the

00:23:08,370 --> 00:23:14,580
thinking here so that is still very

00:23:11,820 --> 00:23:17,070
shady area like we still explore need to

00:23:14,580 --> 00:23:24,720
like talk more about how to do that ok

00:23:17,070 --> 00:23:28,260
thanks sorry here so yeah good evening

00:23:24,720 --> 00:23:32,429
um I'm I mean I've just done a project

00:23:28,260 --> 00:23:35,309
right now a few months ago I was passing

00:23:32,429 --> 00:23:38,100
a resume project that was a partial

00:23:35,309 --> 00:23:40,049
project so in that the other formats

00:23:38,100 --> 00:23:42,330
were also there like RTF or document

00:23:40,049 --> 00:23:44,580
format or anything of that stuff so we

00:23:42,330 --> 00:23:47,490
were able to extract the data from those

00:23:44,580 --> 00:23:49,440
kind of formats but when it came to PDS

00:23:47,490 --> 00:23:52,139
it was very difficult for us to you know

00:23:49,440 --> 00:23:54,210
extract data from a PDF file so you

00:23:52,139 --> 00:23:57,870
mentioned in your slide right that PDF

00:23:54,210 --> 00:24:00,690
for minor draw you know like 30 so we

00:23:57,870 --> 00:24:02,340
had installed that but it was late kind

00:24:00,690 --> 00:24:04,620
of it was showing some worsening the

00:24:02,340 --> 00:24:08,039
problem because of which we could not

00:24:04,620 --> 00:24:10,980
actually utilize the proper you know

00:24:08,039 --> 00:24:15,720
thing of that PDF - so can you give us

00:24:10,980 --> 00:24:17,279
some solution like how can be done so if

00:24:15,720 --> 00:24:20,370
you're using Python 3 you will have to

00:24:17,279 --> 00:24:23,610
install the previous miner dot 6 which

00:24:20,370 --> 00:24:25,080
if Python see compatible the earlier PDF

00:24:23,610 --> 00:24:27,389
miner has topped its development is

00:24:25,080 --> 00:24:27,870
endless I think can only be used in

00:24:27,389 --> 00:24:30,019
Python

00:24:27,870 --> 00:24:30,019
00:24:34,010 --> 00:24:36,640
yeah

00:24:39,380 --> 00:24:45,790
maybe we can take this offline I have

00:24:44,570 --> 00:24:49,040
another question

00:24:45,790 --> 00:24:51,140
ok so when you're giving the report

00:24:49,040 --> 00:24:53,600
after extracting your table how are you

00:24:51,140 --> 00:24:56,690
exactly calculating the accuracy

00:24:53,600 --> 00:24:58,670
okay so PDF miner would give you the

00:24:56,690 --> 00:25:01,370
text strings that were found on the page

00:24:58,670 --> 00:25:04,360
use in their bounding boxes and then

00:25:01,370 --> 00:25:07,070
Camelot will recognize the table grid in

00:25:04,360 --> 00:25:10,160
like in while assigning those text rings

00:25:07,070 --> 00:25:13,220
into each cell it'll like look into how

00:25:10,160 --> 00:25:16,940
much that takes box overlaps with the

00:25:13,220 --> 00:25:18,440
boundary of that cell so if it like the

00:25:16,940 --> 00:25:20,210
more it lays out the better like the

00:25:18,440 --> 00:25:22,550
less the accuracy will be and the more

00:25:20,210 --> 00:25:26,750
it lies inside the cell the more your

00:25:22,550 --> 00:25:28,760
accuracy yeah hi over here

00:25:26,750 --> 00:25:30,020
so you mentioned at the beginning of

00:25:28,760 --> 00:25:31,700
your talk that one of the motivations

00:25:30,020 --> 00:25:33,530
for you to make this tool was that

00:25:31,700 --> 00:25:36,440
otherwise you would have a very or not

00:25:33,530 --> 00:25:38,150
audible is it better now yeah yeah so I

00:25:36,440 --> 00:25:39,770
said that at the beginning of your talk

00:25:38,150 --> 00:25:41,690
you mentioned that your motivation for

00:25:39,770 --> 00:25:44,000
building Camelot was that otherwise your

00:25:41,690 --> 00:25:46,940
extraction pipeline would be very

00:25:44,000 --> 00:25:49,810
convoluted with too many steps and so my

00:25:46,940 --> 00:25:52,610
question is that I mean so I am doing a

00:25:49,810 --> 00:25:54,980
text mining project and they're in again

00:25:52,610 --> 00:25:57,440
I have to extract PDFs but I don't

00:25:54,980 --> 00:26:00,550
always have to extract tables so does

00:25:57,440 --> 00:26:03,740
Camelot support non table related

00:26:00,550 --> 00:26:06,770
extraction as well or what what would be

00:26:03,740 --> 00:26:09,410
our recommended workflow for when they

00:26:06,770 --> 00:26:10,250
will be tables but not always I didn't

00:26:09,410 --> 00:26:12,290
get the last part

00:26:10,250 --> 00:26:14,210
what doesn't I will have to extract

00:26:12,290 --> 00:26:15,560
tables from PDFs but not on all ages

00:26:14,210 --> 00:26:17,840
there will be a lot of pages when I own

00:26:15,560 --> 00:26:20,120
I only need texts and images so does

00:26:17,840 --> 00:26:23,429
Camelot support that Auto box or do you

00:26:20,120 --> 00:26:25,929
expect it to be run with

00:26:23,429 --> 00:26:28,539
if I got the question I'd you're asking

00:26:25,929 --> 00:26:30,460
if they if there are images on different

00:26:28,539 --> 00:26:32,049
pages then does Camelot recognize those

00:26:30,460 --> 00:26:35,499
and my question is if Camelot

00:26:32,049 --> 00:26:39,149
if Camelot only does tables or it does

00:26:35,499 --> 00:26:41,919
text recognition and on top of that it

00:26:39,149 --> 00:26:43,479
mostly it does tables but you can also

00:26:41,919 --> 00:26:45,879
use it to extract paragraphs and other

00:26:43,479 --> 00:26:47,889
types of things but a PDF miner would be

00:26:45,879 --> 00:26:53,169
a better library to use if you're not

00:26:47,889 --> 00:26:56,679
extracting tables cool so I had two

00:26:53,169 --> 00:26:59,169
questions basically the first wise using

00:26:56,679 --> 00:27:01,389
Camelot you are basically using the

00:26:59,169 --> 00:27:03,429
lines to make the tables right so

00:27:01,389 --> 00:27:06,399
whatever table doesn't contain lines at

00:27:03,429 --> 00:27:08,919
all like just a table without save lines

00:27:06,399 --> 00:27:11,080
in Berea how would you classify it using

00:27:08,919 --> 00:27:12,609
Camelot in that case the second question

00:27:11,080 --> 00:27:15,249
being about the two flavors you

00:27:12,609 --> 00:27:17,169
mentioned lattice and stream I'd like

00:27:15,249 --> 00:27:19,539
some clarification on what kind of

00:27:17,169 --> 00:27:23,499
differences they have and how to use

00:27:19,539 --> 00:27:26,080
them um so for the first question you if

00:27:23,499 --> 00:27:28,210
the table is not constructed using lines

00:27:26,080 --> 00:27:31,450
and it's simulated using spaces then you

00:27:28,210 --> 00:27:33,909
will have to use the stream flavor which

00:27:31,450 --> 00:27:37,479
is which implements the noumenal

00:27:33,909 --> 00:27:40,509
algorithm which is like a paper from the

00:27:37,479 --> 00:27:42,609
2 mm and it like basically tries to

00:27:40,509 --> 00:27:45,369
guess a table structure on a PDF page

00:27:42,609 --> 00:27:49,450
which on on a PDF page mit doesn't have

00:27:45,369 --> 00:27:51,789
lines and like like it like mentioned

00:27:49,450 --> 00:27:53,619
earlier lattice should be used when

00:27:51,789 --> 00:27:56,049
there are lines on the table and a

00:27:53,619 --> 00:28:00,220
stream should be used when table is

00:27:56,049 --> 00:28:01,049
simulated using spaces think it should

00:28:00,220 --> 00:28:03,700
be all of it

00:28:01,049 --> 00:28:06,759
we can totally discuss this afterwards

00:28:03,700 --> 00:28:08,859
you can catch me later like I'm also

00:28:06,759 --> 00:28:10,720
like by the way I'm also doing PI data

00:28:08,859 --> 00:28:12,129
Bangalore poster presentation in 4:15

00:28:10,720 --> 00:28:14,139
p.m. so if you want more information

00:28:12,129 --> 00:28:14,519
about that then you can catch me there

00:28:14,139 --> 00:28:17,639
too

00:28:14,519 --> 00:28:17,639
thank you

00:28:23,929 --> 00:28:25,990

YouTube URL: https://www.youtube.com/watch?v=m6xKhzp54-E


