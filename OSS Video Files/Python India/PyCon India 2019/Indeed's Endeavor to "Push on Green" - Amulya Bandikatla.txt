Title: Indeed's Endeavor to "Push on Green" - Amulya Bandikatla
Publication date: 2019-11-16
Playlist: PyCon India 2019
Description: 
	This talk was presented at PyCon India 2019, on Oct 12th - 13th, at the Chennai Trade Centre.
Website: https://in.pycon.org/2019
Captions: 
	00:00:04,720 --> 00:00:10,480
it's a newer Turkish on green to give

00:00:08,109 --> 00:00:15,070
you a brief on what indeed thus indeed

00:00:10,480 --> 00:00:17,350
is the world sorry am I not audible okay

00:00:15,070 --> 00:00:19,600
I take it I am audible okay

00:00:17,350 --> 00:00:22,210
so indeed is world's number one job site

00:00:19,600 --> 00:00:22,980
we help people get jobs that's our

00:00:22,210 --> 00:00:26,500
mission

00:00:22,980 --> 00:00:30,010
we are spread across 14 countries and 29

00:00:26,500 --> 00:00:32,289
cities over the globe and this is some

00:00:30,010 --> 00:00:34,960
brief stats to give you an estimate of

00:00:32,289 --> 00:00:38,019
the scale that we deal with 250 million

00:00:34,960 --> 00:00:40,780
unique monthly visitors 150 million

00:00:38,019 --> 00:00:46,179
resumes 180 million ratings and reviews

00:00:40,780 --> 00:00:48,519
25 million jobs how different are we

00:00:46,179 --> 00:00:50,350
from the rest of the job portal firstly

00:00:48,519 --> 00:00:52,960
we are not a job portal we are a job

00:00:50,350 --> 00:00:53,440
search engine you search for a job click

00:00:52,960 --> 00:00:55,539
on it

00:00:53,440 --> 00:00:58,629
apply interview hire those are the five

00:00:55,539 --> 00:01:01,019
steps to get a job and we put job seeker

00:00:58,629 --> 00:01:04,809
first before any other thing in our

00:01:01,019 --> 00:01:06,940
organization and what do I do I work

00:01:04,809 --> 00:01:09,310
with the apply block over here so I work

00:01:06,940 --> 00:01:11,230
with indeed apply team where we handle

00:01:09,310 --> 00:01:13,450
the complete flow right from the point a

00:01:11,230 --> 00:01:15,010
job seeker clicks on apply till the

00:01:13,450 --> 00:01:20,440
application has been delivered to the

00:01:15,010 --> 00:01:23,740
employer now coming to today's talk it

00:01:20,440 --> 00:01:27,520
is about push on green the agenda is

00:01:23,740 --> 00:01:30,130
divided into four schedules today one is

00:01:27,520 --> 00:01:33,010
what is push on green why didn't we need

00:01:30,130 --> 00:01:39,060
it how did we do it and what are our key

00:01:33,010 --> 00:01:41,710
takeaways from it what is push on green

00:01:39,060 --> 00:01:43,990
push on green is also known as

00:01:41,710 --> 00:01:45,250
continuous deployment or rather the

00:01:43,990 --> 00:01:48,430
other way around continuous deployment

00:01:45,250 --> 00:01:50,500
is also known as push on green in the CI

00:01:48,430 --> 00:01:53,440
CD world continuous integration

00:01:50,500 --> 00:01:57,070
continuous deployment continuous

00:01:53,440 --> 00:01:59,320
delivery are three different important

00:01:57,070 --> 00:02:00,940
categories or aspects we consider and

00:01:59,320 --> 00:02:05,200
today we are going to talk about

00:02:00,940 --> 00:02:07,450
continuous deployment in this world what

00:02:05,200 --> 00:02:09,369
exactly continuous deployment means if

00:02:07,450 --> 00:02:12,060
you are confident with your code

00:02:09,369 --> 00:02:14,650
deployed without any manual intervention

00:02:12,060 --> 00:02:16,460
that is what exactly continuous

00:02:14,650 --> 00:02:19,080
deployment means

00:02:16,460 --> 00:02:20,610
now why do we need that what is wrong

00:02:19,080 --> 00:02:22,410
with manual testing or what is wrong

00:02:20,610 --> 00:02:25,710
with existing processes that most of us

00:02:22,410 --> 00:02:27,300
follow to give you a context of these

00:02:25,710 --> 00:02:30,030
things let's understand how did we grow

00:02:27,300 --> 00:02:34,410
as an organization we grow from

00:02:30,030 --> 00:02:36,720
somewhere less than 500 past and 2012 to

00:02:34,410 --> 00:02:39,330
somewhere around nine thousand five

00:02:36,720 --> 00:02:42,090
hundred employees today we had an

00:02:39,330 --> 00:02:45,540
explosive growth in terms of the number

00:02:42,090 --> 00:02:48,600
of engineers working for indeed and the

00:02:45,540 --> 00:02:51,960
number of users using indeed now what

00:02:48,600 --> 00:02:55,200
did that get us into we had a long list

00:02:51,960 --> 00:02:58,260
of features to Bedell word or products

00:02:55,200 --> 00:02:59,940
Co to be delivered at the same time the

00:02:58,260 --> 00:03:02,010
number of as the number of members

00:02:59,940 --> 00:03:04,740
increase in a team you will also see

00:03:02,010 --> 00:03:07,470
some issues popping up issues like if

00:03:04,740 --> 00:03:09,300
you merge eight to ten requests feature

00:03:07,470 --> 00:03:11,460
requests into one queue a branch what

00:03:09,300 --> 00:03:13,620
would happen well you're obviously

00:03:11,460 --> 00:03:16,050
getting to conflicts how to resolve that

00:03:13,620 --> 00:03:18,150
how to prioritize that see you are going

00:03:16,050 --> 00:03:20,459
to run into some inevitable issues with

00:03:18,150 --> 00:03:22,890
the large teams now how do we solve that

00:03:20,459 --> 00:03:25,020
we can't have the engineers spend their

00:03:22,890 --> 00:03:27,720
valuable time on this these are mostly

00:03:25,020 --> 00:03:29,940
manual operational tasks that can simply

00:03:27,720 --> 00:03:32,640
be automated though the effort that

00:03:29,940 --> 00:03:34,890
would take to automate this is large in

00:03:32,640 --> 00:03:39,720
the initial stages but we soon see the

00:03:34,890 --> 00:03:42,930
fruitful spiritual responses results of

00:03:39,720 --> 00:03:44,670
it in the future what would happen when

00:03:42,930 --> 00:03:46,590
I automate this obviously it would

00:03:44,670 --> 00:03:48,989
increase our engineering velocity by

00:03:46,590 --> 00:03:50,550
that I mean the more productive work

00:03:48,989 --> 00:03:55,290
that an engineer would be doing is

00:03:50,550 --> 00:03:57,209
increased how does it engineered

00:03:55,290 --> 00:03:59,670
velocity is fine but what is it

00:03:57,209 --> 00:04:01,980
contributing to the product the product

00:03:59,670 --> 00:04:05,090
quality is enhanced when we grow with

00:04:01,980 --> 00:04:08,040
this initiative how does that happen

00:04:05,090 --> 00:04:09,480
manual testing is ultimately a human

00:04:08,040 --> 00:04:12,920
judgment that we are going to rely on

00:04:09,480 --> 00:04:15,630
and human testing is always error from

00:04:12,920 --> 00:04:18,419
error-prone meaning if two people are

00:04:15,630 --> 00:04:20,010
working on the same testing there could

00:04:18,419 --> 00:04:22,470
be different perceptions of the test

00:04:20,010 --> 00:04:25,200
scenario or there could be different

00:04:22,470 --> 00:04:28,860
rigor from deployment and deployment it

00:04:25,200 --> 00:04:29,760
may not be the same rigor that we show

00:04:28,860 --> 00:04:32,960
while testing

00:04:29,760 --> 00:04:36,230
product hence the consistency differs

00:04:32,960 --> 00:04:39,450
now to give you a small sneak peak on

00:04:36,230 --> 00:04:41,520
what did we achieve doing this when our

00:04:39,450 --> 00:04:45,750
project deployment time has come down

00:04:41,520 --> 00:04:48,510
from 98 percent sorry by 98 percent from

00:04:45,750 --> 00:04:50,400
32 hours to 32 minutes though this

00:04:48,510 --> 00:04:52,440
number is very large and we understand

00:04:50,400 --> 00:04:54,450
it's not possible for every project but

00:04:52,440 --> 00:04:56,070
this is something really good that we

00:04:54,450 --> 00:04:58,350
started off with and that we achieved so

00:04:56,070 --> 00:05:00,600
we'd just like to show it off but on an

00:04:58,350 --> 00:05:02,520
average we have observed that teams who

00:05:00,600 --> 00:05:05,310
have taken up with this initiative have

00:05:02,520 --> 00:05:08,580
decreased their deployment times from 30

00:05:05,310 --> 00:05:10,680
percent to 50 percent that's really a

00:05:08,580 --> 00:05:15,120
good number if you consider it in terms

00:05:10,680 --> 00:05:16,950
of the engineers time now we understand

00:05:15,120 --> 00:05:19,680
what is push on green why push on green

00:05:16,950 --> 00:05:21,840
but how do we achieve this how do we get

00:05:19,680 --> 00:05:25,500
it rolling with the existing code base

00:05:21,840 --> 00:05:28,800
with the existing systems in place it's

00:05:25,500 --> 00:05:32,810
all about the conference you need to

00:05:28,800 --> 00:05:35,100
have in your entire deployment change

00:05:32,810 --> 00:05:36,780
deployment change right from when I say

00:05:35,100 --> 00:05:38,910
the deployment chain it means right from

00:05:36,780 --> 00:05:42,870
your coding till the point you put your

00:05:38,910 --> 00:05:45,690
code in production and monitor it how do

00:05:42,870 --> 00:05:48,030
we build that in conference because now

00:05:45,690 --> 00:05:50,340
we are all used to manual testing and we

00:05:48,030 --> 00:05:55,440
are all used to having a human judgment

00:05:50,340 --> 00:05:57,330
in place how do you let go of that

00:05:55,440 --> 00:06:01,110
judgment how do you completely rely on

00:05:57,330 --> 00:06:03,660
your automated systems this is some baby

00:06:01,110 --> 00:06:06,420
steps that we need to be taking for the

00:06:03,660 --> 00:06:08,480
pushin green initiative to gain

00:06:06,420 --> 00:06:11,070
confidence in your continuous deployment

00:06:08,480 --> 00:06:12,930
test coverage is one of the important

00:06:11,070 --> 00:06:15,600
thing and to have the test coverage we

00:06:12,930 --> 00:06:17,820
cannot have large deployables large

00:06:15,600 --> 00:06:18,780
deployables are always time-consuming to

00:06:17,820 --> 00:06:23,010
deploy or

00:06:18,780 --> 00:06:24,810
error-prone so we need to have small

00:06:23,010 --> 00:06:30,450
deployments reasonably small deployables

00:06:24,810 --> 00:06:33,690
and then comes unit tests there's a myth

00:06:30,450 --> 00:06:37,650
or there is a wrong assumption amongst

00:06:33,690 --> 00:06:41,520
most of us engineers having X percentage

00:06:37,650 --> 00:06:43,050
of unit tests will ensure us a good

00:06:41,520 --> 00:06:45,999
stability of the system

00:06:43,050 --> 00:06:48,969
rather from my experience I would say

00:06:45,999 --> 00:06:50,979
any X percentage or any defined

00:06:48,969 --> 00:06:54,129
percentage of unit tests is not going to

00:06:50,979 --> 00:06:59,319
give the conference it is all about how

00:06:54,129 --> 00:07:02,199
confident is an engineer about his or

00:06:59,319 --> 00:07:05,770
her own code and the systems around it

00:07:02,199 --> 00:07:07,749
to monitor your environment some

00:07:05,770 --> 00:07:10,209
projects may need eighty percent of test

00:07:07,749 --> 00:07:13,179
coverage some many ninety-five it is

00:07:10,209 --> 00:07:14,439
here as a team your collective effort

00:07:13,179 --> 00:07:16,959
that you collaborate with each other

00:07:14,439 --> 00:07:19,179
discuss and understand the complexity of

00:07:16,959 --> 00:07:22,509
your product and come up with the number

00:07:19,179 --> 00:07:25,259
that may fit your team better one size

00:07:22,509 --> 00:07:29,289
may not fit all

00:07:25,259 --> 00:07:31,149
integration tests something that in a

00:07:29,289 --> 00:07:34,059
very rapidly changing environment most

00:07:31,149 --> 00:07:37,330
of us let go of this integration tests

00:07:34,059 --> 00:07:41,199
are not mostly used but if you want to

00:07:37,330 --> 00:07:43,089
save time ultimately if you want to do a

00:07:41,199 --> 00:07:45,909
better use of your time integration

00:07:43,089 --> 00:07:48,849
tests are very much needed how do you

00:07:45,909 --> 00:07:50,800
rely on your downstream systems or how

00:07:48,849 --> 00:07:51,759
do you test your failure scenarios it's

00:07:50,800 --> 00:07:56,259
all based on it

00:07:51,759 --> 00:07:59,169
integration tests and then adequate

00:07:56,259 --> 00:08:01,119
logging logging is one common thing that

00:07:59,169 --> 00:08:04,379
I've seen varies from engineer to

00:08:01,119 --> 00:08:07,439
engineer in all my career either we see

00:08:04,379 --> 00:08:10,749
lot of logging excessive logging or

00:08:07,439 --> 00:08:12,699
scarce logging I would say excessive

00:08:10,749 --> 00:08:14,379
logging is still fine if you can afford

00:08:12,699 --> 00:08:17,409
for the infrastructure than scarce

00:08:14,379 --> 00:08:19,449
logging because logs are ultimately the

00:08:17,409 --> 00:08:23,769
only evidence and witness to whatever

00:08:19,449 --> 00:08:26,559
happens within your application now

00:08:23,769 --> 00:08:28,719
having said how to achieve it or how to

00:08:26,559 --> 00:08:32,380
gain the confidence and the deployables

00:08:28,719 --> 00:08:35,380
but how do you verify your changes how

00:08:32,380 --> 00:08:36,519
do you replace what is existing how do

00:08:35,380 --> 00:08:38,519
you change your roles and

00:08:36,519 --> 00:08:40,959
responsibilities within your team

00:08:38,519 --> 00:08:43,029
developer as the name indicates is

00:08:40,959 --> 00:08:47,110
responsible primarily for the feature

00:08:43,029 --> 00:08:49,750
development and then unit this unit us

00:08:47,110 --> 00:08:54,209
are the only way to verify any small

00:08:49,750 --> 00:08:54,209
piece of functionality in isolation

00:08:54,410 --> 00:08:59,150
then come integration tests this is a

00:08:57,230 --> 00:09:01,820
slight change in the existing process

00:08:59,150 --> 00:09:04,370
for most of the teams we want a

00:09:01,820 --> 00:09:07,700
developer to write the integration tests

00:09:04,370 --> 00:09:10,630
meaning get creative write stubs or

00:09:07,700 --> 00:09:13,430
mocks or whatever you think is necessary

00:09:10,630 --> 00:09:17,570
to perform an integration test from an

00:09:13,430 --> 00:09:19,550
end and within your own ecosystem then

00:09:17,570 --> 00:09:22,670
what does a QA do if developer writes

00:09:19,550 --> 00:09:24,410
all the tests and the W the code what is

00:09:22,670 --> 00:09:28,160
the Q is responsibility can we get rid

00:09:24,410 --> 00:09:30,080
of QA no neurons neurons so to this

00:09:28,160 --> 00:09:32,600
question is manual testing is the

00:09:30,080 --> 00:09:35,330
responsibility of QA in the past but

00:09:32,600 --> 00:09:38,030
today it is to improve the robustness of

00:09:35,330 --> 00:09:41,600
the product functional testing can be

00:09:38,030 --> 00:09:43,640
automated by the developer but when it

00:09:41,600 --> 00:09:46,250
comes to load testing performance

00:09:43,640 --> 00:09:48,080
testing or stability testing or

00:09:46,250 --> 00:09:51,890
cross-browser testing there multiple

00:09:48,080 --> 00:09:54,110
other phases to the product they will be

00:09:51,890 --> 00:09:56,030
performed by the QA the q is going to

00:09:54,110 --> 00:09:58,160
improve the robustness of the product

00:09:56,030 --> 00:10:00,260
they are going to be the gatekeepers of

00:09:58,160 --> 00:10:03,260
our product quality there are no more

00:10:00,260 --> 00:10:05,720
the manual testers they the title truly

00:10:03,260 --> 00:10:07,130
indicates such quality assurance so we

00:10:05,720 --> 00:10:13,460
are going to stick to their title as

00:10:07,130 --> 00:10:16,330
Quality Assurance next comes how do we

00:10:13,460 --> 00:10:18,830
verify these deployments

00:10:16,330 --> 00:10:21,140
now that we've divided the

00:10:18,830 --> 00:10:23,360
responsibilities how do we automate the

00:10:21,140 --> 00:10:25,130
verification there are certain basic

00:10:23,360 --> 00:10:26,360
things that you have to inculcate into

00:10:25,130 --> 00:10:30,080
your application

00:10:26,360 --> 00:10:34,250
for it to be completely automated first

00:10:30,080 --> 00:10:36,500
thing is health checks every system may

00:10:34,250 --> 00:10:39,770
depend on one or the other external

00:10:36,500 --> 00:10:42,230
service health checks are a way to

00:10:39,770 --> 00:10:45,500
identify whether your downstream systems

00:10:42,230 --> 00:10:49,190
are working properly or not

00:10:45,500 --> 00:10:51,410
while the startup of all application we

00:10:49,190 --> 00:10:53,180
at indeed have decided to come up with

00:10:51,410 --> 00:10:57,550
three different levels of health checks

00:10:53,180 --> 00:11:00,290
one is weak strong and required weak

00:10:57,550 --> 00:11:02,090
indicate that there is a system there is

00:11:00,290 --> 00:11:04,610
a dependency that has failed but the

00:11:02,090 --> 00:11:06,470
application can still run with it we may

00:11:04,610 --> 00:11:08,150
want to log it and just leave it at

00:11:06,470 --> 00:11:11,450
there for a developer to come back

00:11:08,150 --> 00:11:13,840
see strongest we would send proactive

00:11:11,450 --> 00:11:16,250
alerts to the developer that so-and-so

00:11:13,840 --> 00:11:18,680
dependency has failed but we don't want

00:11:16,250 --> 00:11:21,230
the application to stop we would still

00:11:18,680 --> 00:11:24,140
run the application and then there's the

00:11:21,230 --> 00:11:26,570
thorough level required just fail the

00:11:24,140 --> 00:11:28,310
deployment altogether we can't run the

00:11:26,570 --> 00:11:30,950
application without this downstream

00:11:28,310 --> 00:11:33,320
system so these three levels have really

00:11:30,950 --> 00:11:36,050
helped us in segregating or prioritizing

00:11:33,320 --> 00:11:38,810
our concerns with the deployments I'll

00:11:36,050 --> 00:11:43,130
rather I'd say separate our concerns on

00:11:38,810 --> 00:11:45,200
the level of our dependencies then

00:11:43,130 --> 00:11:47,780
exception in logs as is mentioned

00:11:45,200 --> 00:11:51,140
earlier with adequate logs we are now

00:11:47,780 --> 00:11:52,670
able to understand where an exception

00:11:51,140 --> 00:11:56,690
has occurred or what is that anomaly

00:11:52,670 --> 00:11:59,330
within the deployment now having said

00:11:56,690 --> 00:12:00,890
that we also need some dashboards to

00:11:59,330 --> 00:12:03,020
know the system level metrics the

00:12:00,890 --> 00:12:05,540
application level metrics meaning we

00:12:03,020 --> 00:12:09,550
want to monitor all this CPU utilization

00:12:05,540 --> 00:12:12,560
or memory utilization or response times

00:12:09,550 --> 00:12:14,630
now how do we do that we use data dog

00:12:12,560 --> 00:12:16,970
dashboard for that it is a third-party

00:12:14,630 --> 00:12:18,470
tool that we use to analyze all our

00:12:16,970 --> 00:12:22,460
metrics from system level to the

00:12:18,470 --> 00:12:26,810
application level then we use canary

00:12:22,460 --> 00:12:28,870
analysis for teams which are chain which

00:12:26,810 --> 00:12:31,700
have their product changing very rapidly

00:12:28,870 --> 00:12:32,780
they would want to go with canary

00:12:31,700 --> 00:12:35,210
analysis

00:12:32,780 --> 00:12:37,130
what does cannery analysis mean we

00:12:35,210 --> 00:12:40,220
deploy the latest version of your

00:12:37,130 --> 00:12:42,470
deployable to only very small subset of

00:12:40,220 --> 00:12:45,080
the production receive the light traffic

00:12:42,470 --> 00:12:47,840
onto this latest version and analyze the

00:12:45,080 --> 00:12:50,420
performance of the deployable if you

00:12:47,840 --> 00:12:51,740
think the deploy bell is good to go with

00:12:50,420 --> 00:12:53,360
the rest of the production then we

00:12:51,740 --> 00:12:56,480
promote it to the rest of the production

00:12:53,360 --> 00:12:58,430
but if you think there's an odd behavior

00:12:56,480 --> 00:13:01,480
or there's an unhealthy behavior of the

00:12:58,430 --> 00:13:05,150
application then we would revert back as

00:13:01,480 --> 00:13:07,970
an organization we support this as well

00:13:05,150 --> 00:13:10,910
as Bluegreen deployments for teams which

00:13:07,970 --> 00:13:13,910
undergo changes very rapidly and which

00:13:10,910 --> 00:13:16,040
cannot afford to have a lot of other

00:13:13,910 --> 00:13:18,320
infrastructure which suggests go with

00:13:16,040 --> 00:13:20,920
canary analysis but the teams who have

00:13:18,320 --> 00:13:23,709
stabilized for teams like us

00:13:20,920 --> 00:13:25,510
who do not want to risk any customer

00:13:23,709 --> 00:13:28,930
interfacing products we go with

00:13:25,510 --> 00:13:32,050
Bluegreen deployment now these are ways

00:13:28,930 --> 00:13:35,649
where we perform the verification so if

00:13:32,050 --> 00:13:39,209
any of this verifications fail what do

00:13:35,649 --> 00:13:41,410
we do it is automatically rolled back

00:13:39,209 --> 00:13:43,480
that is all about continuous deployment

00:13:41,410 --> 00:13:45,220
if you fail with one of your

00:13:43,480 --> 00:13:48,910
verifications you're going to roll it

00:13:45,220 --> 00:13:52,540
back now all this is good in theory how

00:13:48,910 --> 00:13:56,620
do we do it we already have a stable

00:13:52,540 --> 00:13:58,899
almost amateur product how do we see at

00:13:56,620 --> 00:14:02,350
this stage that we want to adopt this

00:13:58,899 --> 00:14:07,120
completely automated testing you can do

00:14:02,350 --> 00:14:08,889
it at a full go at one stretch now we

00:14:07,120 --> 00:14:11,320
have to take an incremental approach to

00:14:08,889 --> 00:14:14,320
it so for that reason what we have come

00:14:11,320 --> 00:14:16,570
up with us we rely heavily on JIRA for

00:14:14,320 --> 00:14:18,699
our process so we've said we are going

00:14:16,570 --> 00:14:22,329
to integrate JIRA with a push on green

00:14:18,699 --> 00:14:25,089
initiative any team who wants push on

00:14:22,329 --> 00:14:26,560
green to be taken up can set up their

00:14:25,089 --> 00:14:28,570
deployment pipeline according to the

00:14:26,560 --> 00:14:31,660
standards we have set in place have this

00:14:28,570 --> 00:14:33,940
test come up and then on the ticket you

00:14:31,660 --> 00:14:36,190
can mention a label which would indicate

00:14:33,940 --> 00:14:39,160
the pipeline that this particular ticket

00:14:36,190 --> 00:14:41,890
would be deployed automatically when I

00:14:39,160 --> 00:14:44,980
say that that means whenever I dip the

00:14:41,890 --> 00:14:47,350
developer has coded it tested it if he

00:14:44,980 --> 00:14:49,959
he or she labels the ticket with this

00:14:47,350 --> 00:14:52,300
label and puts it in a pending merged

00:14:49,959 --> 00:14:55,570
State then we are going to initiate an

00:14:52,300 --> 00:14:57,279
automatic deployment once the teams have

00:14:55,570 --> 00:14:59,769
enough confidence that automatic

00:14:57,279 --> 00:15:00,880
deployments are good by that I mean they

00:14:59,769 --> 00:15:02,740
have set up in place all the

00:15:00,880 --> 00:15:04,630
verifications all the required

00:15:02,740 --> 00:15:06,790
verifications all the monitors and

00:15:04,630 --> 00:15:08,860
whatever we have seen earlier in the

00:15:06,790 --> 00:15:12,190
verification steps then we go for push

00:15:08,860 --> 00:15:16,120
all well push on Green what are the key

00:15:12,190 --> 00:15:18,850
takeaways we have increased the product

00:15:16,120 --> 00:15:22,180
quality there's no room for inconsistent

00:15:18,850 --> 00:15:24,550
testing as I mentioned earlier we have

00:15:22,180 --> 00:15:26,290
increased the reliability kennedy

00:15:24,550 --> 00:15:28,269
analysis and other techniques have

00:15:26,290 --> 00:15:31,630
helped us increase the reliability of

00:15:28,269 --> 00:15:32,810
our product and then the operational

00:15:31,630 --> 00:15:35,120
efficiency this is

00:15:32,810 --> 00:15:36,920
very crucial we no more have contention

00:15:35,120 --> 00:15:42,490
to merge to give a we no more have to

00:15:36,920 --> 00:15:44,690
resolve conflicts then the last or the

00:15:42,490 --> 00:15:46,940
ultimate thing that we've achieved is

00:15:44,690 --> 00:15:51,220
engineering velocity has been increased

00:15:46,940 --> 00:15:55,270
drastically thanks for the talk

00:15:51,220 --> 00:15:55,270
anyway anyone any questions

00:16:00,470 --> 00:16:06,400
but instead of tradition

00:16:03,620 --> 00:16:06,400
thank you

00:16:08,710 --> 00:16:11,860
thank you

00:16:17,460 --> 00:16:28,760
like your diploma yeah yeah he's fixing

00:16:25,920 --> 00:16:28,760
the state

00:16:50,600 --> 00:16:53,909
[Music]

00:17:06,150 --> 00:17:09,170
my mom

00:17:26,699 --> 00:17:32,710
hello mom hi so in the process of push

00:17:31,179 --> 00:17:34,750
on green you mentioned that you

00:17:32,710 --> 00:17:38,110
completely removed the manual testing

00:17:34,750 --> 00:17:39,850
process so is it like you completely

00:17:38,110 --> 00:17:42,549
removed because only a human being and

00:17:39,850 --> 00:17:44,529
give new new or new testing scenarios

00:17:42,549 --> 00:17:46,750
and all because automation can do only

00:17:44,529 --> 00:17:49,630
repeated scenarios so how did you

00:17:46,750 --> 00:17:51,909
achieve it yes so as I mentioned earlier

00:17:49,630 --> 00:17:55,120
there two parts to the teams which are

00:17:51,909 --> 00:17:57,789
in process of increasing their push on

00:17:55,120 --> 00:17:59,950
green coverage we still have manual

00:17:57,789 --> 00:18:01,840
intervention where a QA engineer or a

00:17:59,950 --> 00:18:03,789
developer would pitch in and write

00:18:01,840 --> 00:18:05,890
scripts to automate every scenario that

00:18:03,789 --> 00:18:08,049
they would want to execute okay so they

00:18:05,890 --> 00:18:10,659
will produce new scenarios also yes

00:18:08,049 --> 00:18:14,049
so these scripts don't get generated

00:18:10,659 --> 00:18:16,000
automatically right we have QA or the

00:18:14,049 --> 00:18:17,890
developer writing these scripts so any

00:18:16,000 --> 00:18:20,110
any test scenario that you think has to

00:18:17,890 --> 00:18:21,580
be executed has to be in the form of a

00:18:20,110 --> 00:18:21,909
script there's no manual testing over

00:18:21,580 --> 00:18:25,200
there

00:18:21,909 --> 00:18:25,200
sure thank you

00:18:27,770 --> 00:18:33,710
I'm alia am i audible yes okay you sure

00:18:31,010 --> 00:18:37,130
the best practice about the continuous

00:18:33,710 --> 00:18:40,520
deployments in your project experience I

00:18:37,130 --> 00:18:42,860
want to ask do you see any challenges in

00:18:40,520 --> 00:18:45,919
terms of canari deployments and also

00:18:42,860 --> 00:18:48,470
your release cycle I hope you have two

00:18:45,919 --> 00:18:53,539
weeks or three weeks of release cycle of

00:18:48,470 --> 00:18:56,299
your application was to decrease this

00:18:53,539 --> 00:18:59,539
release cycle we now know more have

00:18:56,299 --> 00:19:02,149
fixed release cycles but we in fact have

00:18:59,539 --> 00:19:04,760
teams who do multiple times the

00:19:02,149 --> 00:19:07,640
deployments energy and we have teams at

00:19:04,760 --> 00:19:09,010
least my team does twice a day so that's

00:19:07,640 --> 00:19:11,360
where we've moved to with automatic

00:19:09,010 --> 00:19:13,429
continuous deployment the whole point of

00:19:11,360 --> 00:19:15,110
it is you don't have multiple features

00:19:13,429 --> 00:19:16,970
come going into the same deployment so

00:19:15,110 --> 00:19:18,919
that you don't run into issues if

00:19:16,970 --> 00:19:20,450
there's a deployment failure you'd know

00:19:18,919 --> 00:19:21,559
exactly which feature has failed and

00:19:20,450 --> 00:19:24,350
what to rollback

00:19:21,559 --> 00:19:25,279
so we've now done away with the release

00:19:24,350 --> 00:19:27,980
cycle concept

00:19:25,279 --> 00:19:30,700
sorry can you recollect me the second

00:19:27,980 --> 00:19:30,700
question you had in mind

00:19:32,960 --> 00:19:39,660
it was about the release cycle so yeah

00:19:37,350 --> 00:19:42,960
now we don't have the release cycles

00:19:39,660 --> 00:19:47,490
anymore okay and how did we get to push

00:19:42,960 --> 00:19:49,380
on green the obstacles yes the teams who

00:19:47,490 --> 00:19:50,880
have already who are already in the

00:19:49,380 --> 00:19:53,250
critical path meaning who are

00:19:50,880 --> 00:19:55,710
customer-facing ultimately for teens

00:19:53,250 --> 00:19:58,020
like us any change we make is going to

00:19:55,710 --> 00:20:01,290
be very much principal to the job seeker

00:19:58,020 --> 00:20:02,820
so for teams like this we choose to go

00:20:01,290 --> 00:20:04,710
with blue green deployment rather than

00:20:02,820 --> 00:20:06,540
canary analysis because we don't even

00:20:04,710 --> 00:20:09,150
want that one percentage of users to be

00:20:06,540 --> 00:20:11,220
affected but for the teams who can

00:20:09,150 --> 00:20:14,130
afford that risk or for the teams who

00:20:11,220 --> 00:20:16,740
can take that risk of having a duration

00:20:14,130 --> 00:20:19,380
of test they do go with canary analysis

00:20:16,740 --> 00:20:21,929
so we do that is the reason we support

00:20:19,380 --> 00:20:23,540
both of these deployment techniques does

00:20:21,929 --> 00:20:29,940
that answer your question

00:20:23,540 --> 00:20:33,690
thank you hi hi hi Amelia Addison Oh Pia

00:20:29,940 --> 00:20:35,880
I have a question in the case of a

00:20:33,690 --> 00:20:38,220
Bluegreen deployment and you know you

00:20:35,880 --> 00:20:40,919
push our deployment to the production

00:20:38,220 --> 00:20:43,260
and it in also database change for

00:20:40,919 --> 00:20:46,049
example there's a table entry that you

00:20:43,260 --> 00:20:47,970
make no there's some problem and I want

00:20:46,049 --> 00:20:49,799
to revert it but in the actual

00:20:47,970 --> 00:20:51,660
productions in order you have a few data

00:20:49,799 --> 00:20:53,640
which came into your system during that

00:20:51,660 --> 00:20:55,620
period of time now you want to reward

00:20:53,640 --> 00:20:59,580
the reward those changes how would you

00:20:55,620 --> 00:21:02,280
do that the whole point of Bluegreen

00:20:59,580 --> 00:21:03,990
deployment is to avoid running into the

00:21:02,280 --> 00:21:07,290
situation so let me first define

00:21:03,990 --> 00:21:09,360
Bluegreen deployment blue in in a

00:21:07,290 --> 00:21:13,890
Bluegreen deployment we would deploy to

00:21:09,360 --> 00:21:15,900
us a new set of instances and observe

00:21:13,890 --> 00:21:18,690
the behavior of the deployable for the

00:21:15,900 --> 00:21:20,309
let's say n number of instances this

00:21:18,690 --> 00:21:22,950
would be the same number that our are

00:21:20,309 --> 00:21:24,870
going with the current live traffic now

00:21:22,950 --> 00:21:26,429
once we think that the deployable is

00:21:24,870 --> 00:21:29,460
stable that's when we are going to route

00:21:26,429 --> 00:21:32,580
the traffic to this new set of instances

00:21:29,460 --> 00:21:36,540
and destroy the old instances so in this

00:21:32,580 --> 00:21:38,929
case whenever you make a DB entry there

00:21:36,540 --> 00:21:41,610
is no new traffic coming on to these new

00:21:38,929 --> 00:21:43,270
instances it's only going to be our test

00:21:41,610 --> 00:21:45,460
that we run on these new instances

00:21:43,270 --> 00:21:46,990
observe the behavior had it been a

00:21:45,460 --> 00:21:50,350
canary analysis it would have been a

00:21:46,990 --> 00:21:56,040
different thing to do does it answer

00:21:50,350 --> 00:21:56,040

YouTube URL: https://www.youtube.com/watch?v=wJLizAqy9ak


