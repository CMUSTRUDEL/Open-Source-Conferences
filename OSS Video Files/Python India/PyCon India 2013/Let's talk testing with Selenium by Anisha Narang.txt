Title: Let's talk testing with Selenium by Anisha Narang
Publication date: 2013-09-06
Playlist: PyCon India 2013
Description: 
	
Captions: 
	00:00:02,899 --> 00:00:09,150
good afternoon to all of you I hope you

00:00:06,060 --> 00:00:12,030
had a good lunch so let's stop testing

00:00:09,150 --> 00:00:15,599
with selenium first of all I'd like to

00:00:12,030 --> 00:00:22,590
know that how many of you are developers

00:00:15,599 --> 00:00:25,410
and how many of you are testers ok quite

00:00:22,590 --> 00:00:27,900
a good ratio so the developers can start

00:00:25,410 --> 00:00:31,019
testing and the testers may continue

00:00:27,900 --> 00:00:35,070
testing I guess so my first question to

00:00:31,019 --> 00:00:37,710
all of you is why do you think testing

00:00:35,070 --> 00:00:59,480
is important in any of you from the

00:00:37,710 --> 00:01:03,120
front rows answer this ok ok great so

00:00:59,480 --> 00:01:05,670
all of us use softwares and when you

00:01:03,120 --> 00:01:08,490
first must have experienced that our

00:01:05,670 --> 00:01:10,229
software is not working desirably on an

00:01:08,490 --> 00:01:12,390
individual level it may just lead to a

00:01:10,229 --> 00:01:14,520
little bit of frustration but on an

00:01:12,390 --> 00:01:22,200
organization level it may lead to huge

00:01:14,520 --> 00:01:24,540
losses a human can make mistake or an

00:01:22,200 --> 00:01:26,880
error and when that particular mistake

00:01:24,540 --> 00:01:29,490
or an error is included in a program

00:01:26,880 --> 00:01:32,310
code it becomes a defect and when that

00:01:29,490 --> 00:01:36,229
program code is executed it may lead to

00:01:32,310 --> 00:01:36,229
a failure of the software application

00:01:39,380 --> 00:01:45,990
with the help of testing we measure the

00:01:42,450 --> 00:01:49,920
quality of our software when we test a

00:01:45,990 --> 00:01:52,110
software we find bugs in all and when

00:01:49,920 --> 00:01:52,590
the bugs get fixed the quality of our

00:01:52,110 --> 00:01:55,320
software

00:01:52,590 --> 00:01:57,890
improves now one may think of manual

00:01:55,320 --> 00:02:01,770
testing as an approach for testing a

00:01:57,890 --> 00:02:04,469
manual tester may have to check a lot of

00:02:01,770 --> 00:02:06,960
databases fill in a lot of forms and

00:02:04,469 --> 00:02:09,390
check the outputs on the screen and once

00:02:06,960 --> 00:02:12,450
a project expands the regression testing

00:02:09,390 --> 00:02:13,800
simply becomes uncontrolled so one

00:02:12,450 --> 00:02:17,790
should move to

00:02:13,800 --> 00:02:21,210
test automation test automation is

00:02:17,790 --> 00:02:24,270
nothing but the use of testing tool to

00:02:21,210 --> 00:02:26,790
control the execution of tests to

00:02:24,270 --> 00:02:30,240
compare the actual outcomes against the

00:02:26,790 --> 00:02:32,760
expected outcomes and to report the test

00:02:30,240 --> 00:02:35,700
status whether the test case passed or

00:02:32,760 --> 00:02:37,740
failed automated testing should be

00:02:35,700 --> 00:02:40,050
implied to applications which may

00:02:37,740 --> 00:02:44,700
involve areas that need to be tested

00:02:40,050 --> 00:02:48,000
frequently next automation gives us

00:02:44,700 --> 00:02:50,400
better access to information about the

00:02:48,000 --> 00:02:52,440
test that we have carried on it allows

00:02:50,400 --> 00:02:54,360
us to have better consistency regarding

00:02:52,440 --> 00:02:57,240
the test because the tests are carried

00:02:54,360 --> 00:03:01,230
on by a tool which carries all the tests

00:02:57,240 --> 00:03:04,230
in a sequence we have a lot of tools in

00:03:01,230 --> 00:03:06,800
the market to do test automation but the

00:03:04,230 --> 00:03:11,750
tool that we are going to talk about is

00:03:06,800 --> 00:03:15,180
selenium selenium automates web browsers

00:03:11,750 --> 00:03:21,570
it is an open-source tool and does not

00:03:15,180 --> 00:03:23,520
involve any cost cost selenium can be

00:03:21,570 --> 00:03:28,350
controlled by many programming languages

00:03:23,520 --> 00:03:32,070
such as C sharp Java Perl Ruby and of

00:03:28,350 --> 00:03:36,020
course our favorite Python it it

00:03:32,070 --> 00:03:40,830
supports many browsers as in Firefox ie

00:03:36,020 --> 00:03:42,840
Chrome selenium can be used with

00:03:40,830 --> 00:03:44,610
different testing frameworks now you may

00:03:42,840 --> 00:03:46,440
be wondering why do we need a testing

00:03:44,610 --> 00:03:49,140
framework when selenium is there a

00:03:46,440 --> 00:03:52,800
testing framework is needed to control

00:03:49,140 --> 00:03:54,720
the execution of tests the programming

00:03:52,800 --> 00:03:57,540
language that we will be using is Python

00:03:54,720 --> 00:03:59,310
and the testing framework is unit test

00:03:57,540 --> 00:04:04,140
unit test is the inbuilt

00:03:59,310 --> 00:04:09,720
Python pythons library for a testing

00:04:04,140 --> 00:04:11,340
it's a testing framework now that we've

00:04:09,720 --> 00:04:13,830
talked a little about test automation

00:04:11,340 --> 00:04:16,459
and a little about selenium we'll talk

00:04:13,830 --> 00:04:21,359
about test automation with selenium

00:04:16,459 --> 00:04:23,610
selenium test pages it tests them by

00:04:21,359 --> 00:04:25,790
loading pages and performing certain

00:04:23,610 --> 00:04:27,510
stuff in them just like it's a person

00:04:25,790 --> 00:04:32,910
isn't that really you

00:04:27,510 --> 00:04:35,730
being human selenium helps you in

00:04:32,910 --> 00:04:38,580
regression testing testing if a

00:04:35,730 --> 00:04:41,520
particular bug-fix did not introduce any

00:04:38,580 --> 00:04:45,360
new bugs into our code and that testing

00:04:41,520 --> 00:04:47,700
is called as regression testing selenium

00:04:45,360 --> 00:04:51,690
helps you to validate the application

00:04:47,700 --> 00:04:53,910
flow it allows you to generate to make

00:04:51,690 --> 00:04:57,720
create test suits a test suit is a

00:04:53,910 --> 00:04:59,190
combination of different test cases you

00:04:57,720 --> 00:05:01,650
may have different sections or modules

00:04:59,190 --> 00:05:03,420
in your application and you may need to

00:05:01,650 --> 00:05:06,230
run a particular set of tests together

00:05:03,420 --> 00:05:09,590
and make it as a suit

00:05:06,230 --> 00:05:14,370
selenium allows you to generate reports

00:05:09,590 --> 00:05:20,760
HTML test reports you can generate now

00:05:14,370 --> 00:05:22,290
the first is that how to start the first

00:05:20,760 --> 00:05:26,730
step is that you need to install

00:05:22,290 --> 00:05:28,980
selenium which is very simple you just

00:05:26,730 --> 00:05:32,640
need to do a pip install selenium and

00:05:28,980 --> 00:05:34,890
you're all set to write your scripts but

00:05:32,640 --> 00:05:37,230
if you are new to programming and you

00:05:34,890 --> 00:05:39,630
were a newbie I would say you should

00:05:37,230 --> 00:05:43,380
start with the record and play with

00:05:39,630 --> 00:05:45,720
selenium IDE selenium IDE is a component

00:05:43,380 --> 00:05:48,510
of the selenium project it is an

00:05:45,720 --> 00:05:51,060
integrated development environment it is

00:05:48,510 --> 00:05:55,050
a recording playback tool which allows

00:05:51,060 --> 00:05:58,830
you to record scripts and play them and

00:05:55,050 --> 00:06:02,970
do certain assertions this is a small

00:05:58,830 --> 00:06:05,190
snapshot of the selenium IDE wherein you

00:06:02,970 --> 00:06:07,170
have a click to record button the red

00:06:05,190 --> 00:06:09,720
button that you can see you may browse

00:06:07,170 --> 00:06:12,660
in your application and start recording

00:06:09,720 --> 00:06:15,120
you can open the URL you can type in

00:06:12,660 --> 00:06:19,050
whatever you want to send and you can do

00:06:15,120 --> 00:06:21,120
some assertions you may stop your script

00:06:19,050 --> 00:06:25,340
play it again and will perform all the

00:06:21,120 --> 00:06:29,010
actions and do a and do the assertions

00:06:25,340 --> 00:06:33,000
now the one good thing about selenium is

00:06:29,010 --> 00:06:35,940
that it helps you convert your code the

00:06:33,000 --> 00:06:38,970
default format is HTML convert your code

00:06:35,940 --> 00:06:40,950
into different languages as you can see

00:06:38,970 --> 00:06:44,430
we have support for Ruby

00:06:40,950 --> 00:06:46,140
Java and c-sharp since you were a newbie

00:06:44,430 --> 00:06:48,420
and you don't want to write the

00:06:46,140 --> 00:06:50,250
structure the layout for your code as in

00:06:48,420 --> 00:06:52,740
what all necessary imports you need to

00:06:50,250 --> 00:06:55,410
do how to start with the class how to

00:06:52,740 --> 00:06:58,050
write the setup method so selenium IDE

00:06:55,410 --> 00:07:01,740
helps you with this now we select our

00:06:58,050 --> 00:07:04,020
Python webdriver format and the code

00:07:01,740 --> 00:07:10,770
gets converted with just a click of a

00:07:04,020 --> 00:07:14,250
button now now we look how does a

00:07:10,770 --> 00:07:14,970
selenium script looks like we using

00:07:14,250 --> 00:07:18,840
webdriver

00:07:14,970 --> 00:07:20,700
which is a component of selenium the

00:07:18,840 --> 00:07:23,520
first thing that we need to do is we

00:07:20,700 --> 00:07:26,430
need to import the webdriver module from

00:07:23,520 --> 00:07:28,920
the selenium then we import the unit

00:07:26,430 --> 00:07:31,080
test testing framework which we require

00:07:28,920 --> 00:07:33,120
for the execution of tests that I just

00:07:31,080 --> 00:07:37,560
talked about that will be using the unit

00:07:33,120 --> 00:07:41,520
test testing framework next a test class

00:07:37,560 --> 00:07:44,720
is created by sub-classing the test case

00:07:41,520 --> 00:07:48,030
class for unit tests testing framework

00:07:44,720 --> 00:07:50,430
the test case class is a class of the

00:07:48,030 --> 00:07:53,910
unit test testing framework which allows

00:07:50,430 --> 00:07:56,850
you to which allows you as in the test

00:07:53,910 --> 00:07:59,220
fixtures the basically the

00:07:56,850 --> 00:08:04,820
initializations that are required before

00:07:59,220 --> 00:08:07,710
any tests so you define the setup method

00:08:04,820 --> 00:08:10,380
which is a which is a pre which is a

00:08:07,710 --> 00:08:12,390
method the runner the test runner will

00:08:10,380 --> 00:08:16,410
identify that this is a method which

00:08:12,390 --> 00:08:18,990
needs to be run before the test case in

00:08:16,410 --> 00:08:21,210
the first line in the first step we

00:08:18,990 --> 00:08:24,510
create an instance of the Firefox web

00:08:21,210 --> 00:08:27,740
driver we use in the next we use the get

00:08:24,510 --> 00:08:30,810
method to navigate to a particular URL

00:08:27,740 --> 00:08:33,330
the test case is defined by a living

00:08:30,810 --> 00:08:35,910
naming convention which starts with a

00:08:33,330 --> 00:08:38,820
named test underscore which helps the

00:08:35,910 --> 00:08:41,880
test runner to identify that this is a

00:08:38,820 --> 00:08:44,510
test case you can write your desk is

00:08:41,880 --> 00:08:48,690
here then you have a teardown method

00:08:44,510 --> 00:08:51,330
where you need to close your browser so

00:08:48,690 --> 00:08:54,860
you can use the quit method provided the

00:08:51,330 --> 00:08:58,040
final block represents the

00:08:54,860 --> 00:09:00,320
execution of the test the unit in place

00:08:58,040 --> 00:09:03,649
of unit test odd mean we can also use

00:09:00,320 --> 00:09:08,649
the text Runner and maybe the runner

00:09:03,649 --> 00:09:08,649
provided by the HTML test ran ordered by

00:09:09,700 --> 00:09:16,760
now now we'll see how to build an

00:09:13,880 --> 00:09:19,880
approach towards testing when you given

00:09:16,760 --> 00:09:22,160
away an application to test how should

00:09:19,880 --> 00:09:25,910
you think about that how am I supposed

00:09:22,160 --> 00:09:28,220
to proceed the first thing is understand

00:09:25,910 --> 00:09:31,519
the functionality of the web application

00:09:28,220 --> 00:09:33,320
that you are just about to test make a

00:09:31,519 --> 00:09:35,720
make a run-through through the

00:09:33,320 --> 00:09:39,829
application and understand the behavior

00:09:35,720 --> 00:09:42,170
of your application second you need to

00:09:39,829 --> 00:09:46,850
write a test plan and you need to write

00:09:42,170 --> 00:09:48,350
test cases for your application now once

00:09:46,850 --> 00:09:52,399
you're done with writing all the test

00:09:48,350 --> 00:09:55,519
cases you need to decide which test

00:09:52,399 --> 00:09:57,589
cases to automate there may be certain

00:09:55,519 --> 00:09:59,839
factors that you need to consider while

00:09:57,589 --> 00:10:02,209
you are deciding that which are the test

00:09:59,839 --> 00:10:05,089
cases that you will automate a test case

00:10:02,209 --> 00:10:07,430
may be which involves a lot of test data

00:10:05,089 --> 00:10:10,459
test input data would be required to

00:10:07,430 --> 00:10:12,860
automate a test case which may be

00:10:10,459 --> 00:10:17,029
required to test it frequently would

00:10:12,860 --> 00:10:19,339
require an automation next now you done

00:10:17,029 --> 00:10:21,920
with which all test cases you're going

00:10:19,339 --> 00:10:24,050
to automate will inspect the UI elements

00:10:21,920 --> 00:10:27,140
accordingly now what do you understand

00:10:24,050 --> 00:10:29,480
by inspecting the UI elements supposedly

00:10:27,140 --> 00:10:31,910
you have an application where in some

00:10:29,480 --> 00:10:34,459
text is highlighted on the page and you

00:10:31,910 --> 00:10:36,500
want to make an assertion for that so

00:10:34,459 --> 00:10:40,640
selenium provides you with certain

00:10:36,500 --> 00:10:44,480
methods for assertions as in find

00:10:40,640 --> 00:10:49,579
element by ID XPath class

00:10:44,480 --> 00:10:52,790
CSS tag name and two or three others you

00:10:49,579 --> 00:10:55,850
can also do it you you need to decide

00:10:52,790 --> 00:10:58,190
that which is the attribute or which is

00:10:55,850 --> 00:11:02,060
the tag or how are you going to select

00:10:58,190 --> 00:11:03,920
your element in order to test that now

00:11:02,060 --> 00:11:06,310
once you're done with inspecting the UI

00:11:03,920 --> 00:11:08,720
elements accordingly that word method

00:11:06,310 --> 00:11:10,399
provided by the selenium webdriver you

00:11:08,720 --> 00:11:18,410
going to use you may start writing your

00:11:10,399 --> 00:11:21,829
test script now now you all must have

00:11:18,410 --> 00:11:23,990
used github and must have seen the code

00:11:21,829 --> 00:11:27,319
search functionality provided by github

00:11:23,990 --> 00:11:30,019
wherein you have that you type something

00:11:27,319 --> 00:11:32,449
supposedly you type echo and you get the

00:11:30,019 --> 00:11:35,540
output in a highlighted format where the

00:11:32,449 --> 00:11:38,180
echo keyword is highlighted in all of

00:11:35,540 --> 00:11:42,139
your search so I will show you a sample

00:11:38,180 --> 00:11:53,449
application which which is which is very

00:11:42,139 --> 00:11:56,089
minimal functionality okay so this is my

00:11:53,449 --> 00:11:58,970
sample application which just does away

00:11:56,089 --> 00:12:02,360
a little of stuff it just has one filter

00:11:58,970 --> 00:12:05,509
wherein if I select this filter it will

00:12:02,360 --> 00:12:09,079
filter all the respective labels okay

00:12:05,509 --> 00:12:12,110
and if I search for supposedly

00:12:09,079 --> 00:12:15,790
echo it will give me a result of echo in

00:12:12,110 --> 00:12:20,000
the highlighted format if I search for

00:12:15,790 --> 00:12:22,430
print it will give me a corresponding

00:12:20,000 --> 00:12:26,629
result now we talked about inspecting

00:12:22,430 --> 00:12:29,990
the UI elements so how do we inspect the

00:12:26,629 --> 00:12:32,750
UI elements now I need to verify that in

00:12:29,990 --> 00:12:34,759
this the highlighted keyword needs to be

00:12:32,750 --> 00:12:38,899
there so I right-click on that element

00:12:34,759 --> 00:12:42,620
and I do and inspect with Firebug and

00:12:38,899 --> 00:12:44,540
here I see that this particular element

00:12:42,620 --> 00:12:48,559
is present in a class called

00:12:44,540 --> 00:12:49,569
HL so I hold all these elements with the

00:12:48,559 --> 00:12:53,149
class

00:12:49,569 --> 00:12:57,559
now this is one search box wherein I am

00:12:53,149 --> 00:12:59,660
putting my text the test input data so I

00:12:57,559 --> 00:13:03,920
need to know that what which element of

00:12:59,660 --> 00:13:06,220
the dome it's present with so I again do

00:13:03,920 --> 00:13:08,509
an inspector with element and I find

00:13:06,220 --> 00:13:11,899
different different attributes with the

00:13:08,509 --> 00:13:14,720
input and I ID you all know that each

00:13:11,899 --> 00:13:17,540
element has a unique ID on an HTML page

00:13:14,720 --> 00:13:20,620
so I select ID for this particular

00:13:17,540 --> 00:13:24,260
search box

00:13:20,620 --> 00:13:25,510
this is about this is a sample way this

00:13:24,260 --> 00:13:29,800
has got just the minimal functionality

00:13:25,510 --> 00:13:29,800
so now moving back

00:13:31,790 --> 00:13:37,950
know what we'll talk about certain

00:13:35,700 --> 00:13:40,800
general test cases that you may need to

00:13:37,950 --> 00:13:43,380
automate to verify if the URL of the

00:13:40,800 --> 00:13:45,300
application is correct or not to verify

00:13:43,380 --> 00:13:48,720
if the particular checkbox is selected

00:13:45,300 --> 00:13:51,720
or not you verify if what we searched

00:13:48,720 --> 00:13:54,450
for is gives us the correct results or

00:13:51,720 --> 00:13:56,670
not to verify if pagination which is a

00:13:54,450 --> 00:13:58,710
very common feature in all of the

00:13:56,670 --> 00:14:02,250
applications that web applications that

00:13:58,710 --> 00:14:05,520
we see on web so these aren't common

00:14:02,250 --> 00:14:07,830
test cases that one may come across now

00:14:05,520 --> 00:14:11,130
we'll have a look at some of the sample

00:14:07,830 --> 00:14:15,420
code the first case that we'll consider

00:14:11,130 --> 00:14:17,130
is search what I searched for did I did

00:14:15,420 --> 00:14:20,040
did I get the correct results or not

00:14:17,130 --> 00:14:22,230
what a functionality such as search it

00:14:20,040 --> 00:14:25,650
is very important for you to create an

00:14:22,230 --> 00:14:27,990
input test data it you need to decide

00:14:25,650 --> 00:14:30,990
what is the format that you're going to

00:14:27,990 --> 00:14:34,260
choose for your input test data now your

00:14:30,990 --> 00:14:37,950
I decide right I'll keep my input as

00:14:34,260 --> 00:14:40,950
data in a JSON format and the above is a

00:14:37,950 --> 00:14:44,550
JSON format file which contains my test

00:14:40,950 --> 00:14:50,250
data I have my test data as echo print

00:14:44,550 --> 00:14:52,680
and hello world now you all remember I

00:14:50,250 --> 00:14:55,770
showed you this in selenium script

00:14:52,680 --> 00:14:59,670
layout and this Scott snippet is just

00:14:55,770 --> 00:15:01,530
with the test case for search now before

00:14:59,670 --> 00:15:03,480
you start writing your script it is very

00:15:01,530 --> 00:15:05,430
important for you to import all the

00:15:03,480 --> 00:15:07,770
necessary modules since here we are

00:15:05,430 --> 00:15:09,600
using adjacent format so we'll import

00:15:07,770 --> 00:15:13,260
the JSON module which would be required

00:15:09,600 --> 00:15:17,160
will supposedly using a config file you

00:15:13,260 --> 00:15:18,420
may import the config parser and and you

00:15:17,160 --> 00:15:21,320
need to import the selenium-webdriver

00:15:18,420 --> 00:15:26,130
you need to import the unit test module

00:15:21,320 --> 00:15:27,450
okay start firstly aisle who I load my

00:15:26,130 --> 00:15:31,560
adjacent data file

00:15:27,450 --> 00:15:34,740
I'll hold each element in an array I

00:15:31,560 --> 00:15:37,050
loop through that array this is the

00:15:34,740 --> 00:15:39,300
keyword which search underscore text

00:15:37,050 --> 00:15:43,649
contains all my days theta one by one

00:15:39,300 --> 00:15:45,930
now I find my search box the

00:15:43,649 --> 00:15:50,069
why do I need to feed this data where in

00:15:45,930 --> 00:15:51,930
I find it using fine element by ID now I

00:15:50,069 --> 00:15:53,910
need to ensure that my search box

00:15:51,930 --> 00:15:57,930
needs to be clear so I use the clear

00:15:53,910 --> 00:15:59,970
method to clear out then I say I use the

00:15:57,930 --> 00:16:03,149
method send keys which sends that

00:15:59,970 --> 00:16:05,550
particular data into that search box now

00:16:03,149 --> 00:16:08,279
I click on the search button and I find

00:16:05,550 --> 00:16:10,439
that search button using the method find

00:16:08,279 --> 00:16:14,879
element by name and I perform a click

00:16:10,439 --> 00:16:17,009
action on it now as we just we just saw

00:16:14,879 --> 00:16:20,519
that our elements are present in the

00:16:17,009 --> 00:16:22,439
class HL so I'll use find elements I get

00:16:20,519 --> 00:16:25,769
all the elements which are highlighted I

00:16:22,439 --> 00:16:28,499
hold that into an array I extract the

00:16:25,769 --> 00:16:31,079
texture of that particular object and I

00:16:28,499 --> 00:16:32,790
make it up said said I made it just to

00:16:31,079 --> 00:16:35,429
optimize my code and to reduce the

00:16:32,790 --> 00:16:39,379
computation time now I look through it

00:16:35,429 --> 00:16:42,509
again and I perform an azure equal

00:16:39,379 --> 00:16:45,689
method which is provided by the unit

00:16:42,509 --> 00:16:48,029
test which does an assertion as in what

00:16:45,689 --> 00:16:51,689
I searched for and what I extracted out

00:16:48,029 --> 00:16:54,600
of my by using selenium webdriver API is

00:16:51,689 --> 00:16:56,999
it does it match or not if it does not

00:16:54,600 --> 00:16:59,730
match I get an error and the test case

00:16:56,999 --> 00:17:06,360
fails saying that the search result does

00:16:59,730 --> 00:17:08,939
not match moving on to the next test

00:17:06,360 --> 00:17:12,839
case now I consider is a checkbox

00:17:08,939 --> 00:17:16,860
election whether a particular checkbox

00:17:12,839 --> 00:17:19,380
is selected or not first thing I inspect

00:17:16,860 --> 00:17:22,169
the elements and I find that my checkbox

00:17:19,380 --> 00:17:25,380
is present with an ID it has an ID I

00:17:22,169 --> 00:17:29,429
hold that element with an ID and I say

00:17:25,380 --> 00:17:32,909
fine element by ID now I do I before I

00:17:29,429 --> 00:17:35,399
use the method Azure true of unit test

00:17:32,909 --> 00:17:37,880
module and I check if the condition is

00:17:35,399 --> 00:17:37,880
true or not

00:17:38,470 --> 00:17:42,950
checkbox is selected is a method

00:17:41,240 --> 00:17:46,610
provided that whether that particular

00:17:42,950 --> 00:17:48,950
checkbox is selected or not is enabled

00:17:46,610 --> 00:17:55,310
whether that particular checkbox is

00:17:48,950 --> 00:17:57,590
enabled or disabled now you may look you

00:17:55,310 --> 00:17:59,720
may be figuring out why do I have a try

00:17:57,590 --> 00:18:02,870
block and why did I keep my goat in a

00:17:59,720 --> 00:18:05,120
try except block this is just to give

00:18:02,870 --> 00:18:07,280
you an insight into a newer section that

00:18:05,120 --> 00:18:09,440
it is very important for you to handle

00:18:07,280 --> 00:18:12,680
the selenium errors which may or may not

00:18:09,440 --> 00:18:14,750
occur supposedly there may be a case

00:18:12,680 --> 00:18:17,600
wherein the checkbox element that you're

00:18:14,750 --> 00:18:19,820
trying to find by ID may not be present

00:18:17,600 --> 00:18:21,590
on the page so it is through an

00:18:19,820 --> 00:18:24,410
exception saying no such element

00:18:21,590 --> 00:18:27,080
exception it's very important for you to

00:18:24,410 --> 00:18:29,030
cap catch those exceptions so that your

00:18:27,080 --> 00:18:34,010
test case does not end up giving you

00:18:29,030 --> 00:18:38,720
errors the next that will consider is

00:18:34,010 --> 00:18:41,300
for pagination this is a little

00:18:38,720 --> 00:18:44,570
complicated you may not find all the

00:18:41,300 --> 00:18:47,240
elements present on the page by some

00:18:44,570 --> 00:18:50,180
link text or some tag name so what I do

00:18:47,240 --> 00:18:52,970
for Maya for the sample app that I did I

00:18:50,180 --> 00:18:55,910
hold all the element by a class name I

00:18:52,970 --> 00:18:59,540
define a regular expression wherein with

00:18:55,910 --> 00:19:02,990
that object I extract all the numbers as

00:18:59,540 --> 00:19:05,780
in the previous 1 2 3 the last page

00:19:02,990 --> 00:19:08,270
numbered and the next keyword I hold

00:19:05,780 --> 00:19:10,670
that into an array and the test case

00:19:08,270 --> 00:19:15,680
could be wearing I need to verify if the

00:19:10,670 --> 00:19:18,430
previous button is disabled or not I

00:19:15,680 --> 00:19:21,560
find that it's present by a class name i

00:19:18,430 --> 00:19:24,020
extracted by text the array that I found

00:19:21,560 --> 00:19:28,160
with all the elements and I do an assert

00:19:24,020 --> 00:19:31,280
equal now this could be done where the

00:19:28,160 --> 00:19:33,310
page number 1 is active or not similarly

00:19:31,280 --> 00:19:37,220
you can proceed with the class name

00:19:33,310 --> 00:19:39,920
where your next element is a disturb is

00:19:37,220 --> 00:19:42,170
active or not on the last page you may

00:19:39,920 --> 00:19:44,540
also need to verify if your pagination

00:19:42,170 --> 00:19:46,730
is correct supposedly you have 2200

00:19:44,540 --> 00:19:48,890
results and you decide to display just

00:19:46,730 --> 00:19:51,559
10 results so what is the number of

00:19:48,890 --> 00:19:53,809
pages coming up you may apply a logic

00:19:51,559 --> 00:19:54,649
logic for that where you can extract a

00:19:53,809 --> 00:19:56,840
hole that

00:19:54,649 --> 00:19:58,909
the knock total number of results and

00:19:56,840 --> 00:20:06,860
the last page number which is there and

00:19:58,909 --> 00:20:10,399
with the assertions accordingly moving

00:20:06,860 --> 00:20:12,850
ahead we have how to maintain your

00:20:10,399 --> 00:20:15,740
scripts

00:20:12,850 --> 00:20:19,009
you may go keep on going writing your

00:20:15,740 --> 00:20:20,779
test scripts but you may end up at a

00:20:19,009 --> 00:20:23,090
point where you have a huge number of

00:20:20,779 --> 00:20:27,070
test scripts and it is difficult for you

00:20:23,090 --> 00:20:31,100
to manage there may be a case wherein

00:20:27,070 --> 00:20:32,960
wherein you have a different URL for

00:20:31,100 --> 00:20:35,179
where your application is being deployed

00:20:32,960 --> 00:20:37,220
so you are not going to open each of

00:20:35,179 --> 00:20:39,980
your test script and change the URL in

00:20:37,220 --> 00:20:44,769
order to use the same test script for

00:20:39,980 --> 00:20:48,230
that particular application to be tested

00:20:44,769 --> 00:20:51,980
so I would say it is very important for

00:20:48,230 --> 00:20:55,639
you to structure your code well you must

00:20:51,980 --> 00:20:57,740
have all the scripts structured you

00:20:55,639 --> 00:21:01,909
should have a data folder which will

00:20:57,740 --> 00:21:04,850
contain all your test input data as in

00:21:01,909 --> 00:21:07,850
all the JSON files you must have a lib

00:21:04,850 --> 00:21:10,309
folder which will contain all your test

00:21:07,850 --> 00:21:13,850
scripts the logic that you are defining

00:21:10,309 --> 00:21:16,610
for running your test case you must have

00:21:13,850 --> 00:21:18,769
a main file which will contain which

00:21:16,610 --> 00:21:21,169
will which is basically to execute your

00:21:18,769 --> 00:21:27,590
disk cases and will contain what all

00:21:21,169 --> 00:21:31,629
test cases are there you can use you can

00:21:27,590 --> 00:21:34,639
use a config file to define the URL

00:21:31,629 --> 00:21:36,919
certain things like where do you need to

00:21:34,639 --> 00:21:39,649
keep your logs a parts to a logs folder

00:21:36,919 --> 00:21:41,960
the reports folder certain parts you can

00:21:39,649 --> 00:21:44,059
may specify in your config file you

00:21:41,960 --> 00:21:47,509
should have a logs folder which will

00:21:44,059 --> 00:21:51,139
contain all the logs that you are what

00:21:47,509 --> 00:21:54,980
all actions and events have taken place

00:21:51,139 --> 00:21:56,929
in your test case you must have a

00:21:54,980 --> 00:22:00,470
reports folder which will contain the

00:21:56,929 --> 00:22:02,299
reports a detailed reports for your test

00:22:00,470 --> 00:22:08,070
case

00:22:02,299 --> 00:22:11,009
and always try and follow the DRI

00:22:08,070 --> 00:22:13,830
principle do not repeat yourself it

00:22:11,009 --> 00:22:17,309
helps you maintain your code better make

00:22:13,830 --> 00:22:21,360
smaller functions make smaller methods

00:22:17,309 --> 00:22:23,940
and write your test case use the logging

00:22:21,360 --> 00:22:31,769
module to keep track of the events that

00:22:23,940 --> 00:22:35,700
are taking place in your test run test

00:22:31,769 --> 00:22:38,429
reports you developer writes the code

00:22:35,700 --> 00:22:40,860
the tester tested by the stakeholder the

00:22:38,429 --> 00:22:42,840
project stakeholder may not want to look

00:22:40,860 --> 00:22:45,090
at your code or may not have time to sit

00:22:42,840 --> 00:22:47,279
with you and look at your test run he

00:22:45,090 --> 00:22:50,789
would definitely have liked to have a

00:22:47,279 --> 00:22:52,529
look at your test report so it is very

00:22:50,789 --> 00:22:55,679
important for you to generate test

00:22:52,529 --> 00:22:58,409
reports your you can generate your test

00:22:55,679 --> 00:23:02,450
reports using HTML test on a dot pipe

00:22:58,409 --> 00:23:07,940
this is an extension to the Pythons a

00:23:02,450 --> 00:23:13,139
built-in unit test of testing framework

00:23:07,940 --> 00:23:16,409
this is a sample test report where you

00:23:13,139 --> 00:23:19,379
have a where you have a start time when

00:23:16,409 --> 00:23:21,899
did you conduct your test the duration

00:23:19,379 --> 00:23:24,600
of your desk is how much time did your

00:23:21,899 --> 00:23:27,000
test case take to run the status how

00:23:24,600 --> 00:23:29,879
many test cases passed how many test

00:23:27,000 --> 00:23:32,909
cases failed the URL on which you

00:23:29,879 --> 00:23:34,409
conducted your test in the browser on

00:23:32,909 --> 00:23:37,320
which you conducted your test

00:23:34,409 --> 00:23:39,240
that's Firefox you may have a small

00:23:37,320 --> 00:23:42,360
description about your application on

00:23:39,240 --> 00:23:45,600
the top you may have you should write

00:23:42,360 --> 00:23:47,009
your test case in your desktop or that

00:23:45,600 --> 00:23:49,649
what was the test case that was

00:23:47,009 --> 00:23:51,899
performed by you and should a must is to

00:23:49,649 --> 00:23:54,750
have a status whether your desk is

00:23:51,899 --> 00:23:57,240
passed or your desk is filled and the

00:23:54,750 --> 00:23:59,129
total count is important just to give a

00:23:57,240 --> 00:24:01,919
more clarification and to make it more

00:23:59,129 --> 00:24:04,919
descriptive you can add colors so that

00:24:01,919 --> 00:24:07,830
it's clear to the eye that your past

00:24:04,919 --> 00:24:11,029
test cases are in green and your failed

00:24:07,830 --> 00:24:11,029
ones are in red

00:24:13,140 --> 00:24:19,780
now I will show you a small demo where

00:24:17,020 --> 00:24:22,299
which will which will give you a test

00:24:19,780 --> 00:24:24,820
case for two test cases whether a

00:24:22,299 --> 00:24:27,309
particular filter does the filter

00:24:24,820 --> 00:24:31,210
correctly or not and whether what I

00:24:27,309 --> 00:24:36,910
searched for is gives me the exact

00:24:31,210 --> 00:24:39,160
results or not so firstly we'll have a

00:24:36,910 --> 00:24:42,340
look at the structure of the code which

00:24:39,160 --> 00:24:44,890
I just talked about that you must have a

00:24:42,340 --> 00:24:47,470
config file you must have a data folder

00:24:44,890 --> 00:24:50,380
which will contain all your data I have

00:24:47,470 --> 00:24:52,570
a Lib folder where in my first file is

00:24:50,380 --> 00:24:56,559
filtered out by which contains my desk

00:24:52,570 --> 00:24:59,530
case for the filter think that I've used

00:24:56,559 --> 00:25:03,220
HTML test on hub dot pi in order to be

00:24:59,530 --> 00:25:05,200
able to generate HTML reports then I

00:25:03,220 --> 00:25:06,850
have a report description got PI which

00:25:05,200 --> 00:25:08,710
is a small dictionary that what do I

00:25:06,850 --> 00:25:10,299
need to write in the description of a

00:25:08,710 --> 00:25:13,360
report and I've linked it to my main

00:25:10,299 --> 00:25:15,820
script now I have short start Pi which

00:25:13,360 --> 00:25:17,799
is again my test case then I have test

00:25:15,820 --> 00:25:20,740
cases dot pi which is again a dictionary

00:25:17,799 --> 00:25:23,230
which says that what is my test case and

00:25:20,740 --> 00:25:26,260
I need to insert it into my test report

00:25:23,230 --> 00:25:28,240
I again have a logs folder I have the

00:25:26,260 --> 00:25:35,860
main script and I have the reports

00:25:28,240 --> 00:25:39,820
folder for this particular test case I

00:25:35,860 --> 00:25:41,940
have used the conflict by the argument

00:25:39,820 --> 00:25:46,090
parser thing and we have different

00:25:41,940 --> 00:25:50,230
arguments if I end up doing this it will

00:25:46,090 --> 00:25:55,390
show me what arguments can I used so

00:25:50,230 --> 00:25:57,340
I'll run my desk case as a suit wherein

00:25:55,390 --> 00:26:00,750
they all the two both the cases test

00:25:57,340 --> 00:26:00,750
cases will run

00:26:02,750 --> 00:26:13,049
maybe the firefox is taking some time to

00:26:05,400 --> 00:26:14,880
open I first s case is with what I

00:26:13,049 --> 00:26:18,000
searched for whether it is correct or

00:26:14,880 --> 00:26:20,490
not and the second test case is with the

00:26:18,000 --> 00:26:21,960
filter this is the same demo application

00:26:20,490 --> 00:26:29,700
with which I showed you the inspect

00:26:21,960 --> 00:26:32,400
element thing now our test cases have

00:26:29,700 --> 00:26:36,510
passed and the time taken what the des

00:26:32,400 --> 00:26:40,220
cases was 27 seconds and now we'll have

00:26:36,510 --> 00:26:40,220
a look at the report that was generated

00:26:47,600 --> 00:26:56,940
this is the report sample report that

00:26:51,030 --> 00:27:00,390
was generated for my test case and your

00:26:56,940 --> 00:27:02,340
I see my board the test cases to verify

00:27:00,390 --> 00:27:05,669
the search results match the exact query

00:27:02,340 --> 00:27:08,070
string and I have a detail which says

00:27:05,669 --> 00:27:10,620
what I verified the results for three

00:27:08,070 --> 00:27:14,220
cases that is a KO print and hello world

00:27:10,620 --> 00:27:16,740
and another one if the filter worked for

00:27:14,220 --> 00:27:19,230
the label correctly the label selected

00:27:16,740 --> 00:27:24,590
word filter was label 1 and hence my

00:27:19,230 --> 00:27:24,590
field filter selection was verified

00:27:25,580 --> 00:27:32,220
moving back I would sum up by talking

00:27:29,820 --> 00:27:39,929
about some of the best practices that

00:27:32,220 --> 00:27:42,480
one should follow always create a good

00:27:39,929 --> 00:27:44,250
quality test input data it is very

00:27:42,480 --> 00:27:47,179
important for you to have a good quality

00:27:44,250 --> 00:27:50,910
test data in order to have a complete

00:27:47,179 --> 00:27:53,460
testing of your application to decide

00:27:50,910 --> 00:27:56,299
which format are you going to keep your

00:27:53,460 --> 00:27:56,299
test data in

00:27:57,940 --> 00:28:08,800
follow the dryer principal use the

00:28:00,730 --> 00:28:10,740
logging module - - too hard to capture

00:28:08,800 --> 00:28:13,600
the events are being taking place

00:28:10,740 --> 00:28:16,540
include a code to handle these selenium

00:28:13,600 --> 00:28:18,190
errors which may not occur there are

00:28:16,540 --> 00:28:21,580
different different type of exceptions

00:28:18,190 --> 00:28:23,200
that may come with selenium that is you

00:28:21,580 --> 00:28:26,860
may have a no such element present

00:28:23,200 --> 00:28:28,420
assertion errors stop like that there is

00:28:26,860 --> 00:28:31,480
a big list in the documentation you can

00:28:28,420 --> 00:28:33,880
go through designers table logic for

00:28:31,480 --> 00:28:36,520
your test case which is irresistible to

00:28:33,880 --> 00:28:38,620
the change in you I always think from

00:28:36,520 --> 00:28:41,530
the developers perspective that what

00:28:38,620 --> 00:28:49,300
element could he change prefer using IB

00:28:41,530 --> 00:28:53,740
and for selecting the elements and do

00:28:49,300 --> 00:28:58,990
not forget to generate test reports for

00:28:53,740 --> 00:29:23,440
your test cases that's it and any

00:28:58,990 --> 00:29:27,250
questions if you have hello does it

00:29:23,440 --> 00:29:34,290
support a JavaScript embedded javascript

00:29:27,250 --> 00:29:39,880
in HTML does the the selenium support

00:29:34,290 --> 00:29:42,520
parsing JavaScript execute script and

00:29:39,880 --> 00:29:44,830
you can parse your JavaScript code or

00:29:42,520 --> 00:29:46,480
your jQuery things inside that and you

00:29:44,830 --> 00:29:50,550
can execute any of your JavaScript

00:29:46,480 --> 00:29:50,550
functions if you want thank you

00:29:56,009 --> 00:30:01,690
so does it support only Firefox or it

00:29:59,799 --> 00:30:04,149
supports different browsers you can run

00:30:01,690 --> 00:30:06,580
your tests on Chrome and you can run

00:30:04,149 --> 00:30:09,610
your Destin ie Firefox is the most

00:30:06,580 --> 00:30:11,139
easily supported so they have to be

00:30:09,610 --> 00:30:25,480
installed on the same system right along

00:30:11,139 --> 00:30:28,929
with selenium yeah hello

00:30:25,480 --> 00:30:31,870
nice presentation first of all I have

00:30:28,929 --> 00:30:34,889
two questions first is I mean I have

00:30:31,870 --> 00:30:37,090
worked a little bit in with selenium so

00:30:34,889 --> 00:30:40,090
working with selenium webdriver and

00:30:37,090 --> 00:30:44,350
Python do you have a in build support

00:30:40,090 --> 00:30:48,190
for test framework called as and is that

00:30:44,350 --> 00:30:53,230
something that you have explored I used

00:30:48,190 --> 00:30:56,200
to be and has a support with Java and I

00:30:53,230 --> 00:30:58,269
did not explore it with Python with Java

00:30:56,200 --> 00:31:01,120
I'm sure that it has a support for

00:30:58,269 --> 00:31:03,370
Python I'm not sure I can say get in ok

00:31:01,120 --> 00:31:06,460
ok my second question is I mean it is

00:31:03,370 --> 00:31:09,129
actually a subject in itself called as I

00:31:06,460 --> 00:31:11,470
mean keyword-driven testing so or

00:31:09,129 --> 00:31:13,029
behavior-driven testing so do you know

00:31:11,470 --> 00:31:14,590
any robust framework since you are

00:31:13,029 --> 00:31:17,320
working with selenium webdriver

00:31:14,590 --> 00:31:19,500
which for web testing with Python I mean

00:31:17,320 --> 00:31:30,070
do you know a good robust framework

00:31:19,500 --> 00:31:32,830
which is maybe in gone through that I

00:31:30,070 --> 00:31:35,019
mean apart from that I mean our I mean -

00:31:32,830 --> 00:31:38,019
have you worked or explored any of them

00:31:35,019 --> 00:31:40,659
I have explored as a framework knows

00:31:38,019 --> 00:31:47,110
framework and as a PI dot test framework

00:31:40,659 --> 00:31:50,429
which you can use okay so Robo is a good

00:31:47,110 --> 00:31:55,090
start for keyword even this thing in

00:31:50,429 --> 00:31:57,399
selenium way if you don't wish to make

00:31:55,090 --> 00:31:57,970
separate JSON files in oil it's your

00:31:57,399 --> 00:32:00,340
choice

00:31:57,970 --> 00:32:02,230
ok thanks a lot it has a different

00:32:00,340 --> 00:32:05,560
support varying you can write your

00:32:02,230 --> 00:32:14,290
keywords and all okay yeah thank you

00:32:05,560 --> 00:32:16,870
oh hi my dog is very guarding those

00:32:14,290 --> 00:32:18,790
suppose I have a flasher designer

00:32:16,870 --> 00:32:25,360
website can I come with using that

00:32:18,790 --> 00:32:27,490
selenium reusing the flash website can I

00:32:25,360 --> 00:32:43,540
come with using Shalini no she's not

00:32:27,490 --> 00:32:45,460
supported by selenium Thanks the modern

00:32:43,540 --> 00:32:48,430
browsers they're kind of getting heavier

00:32:45,460 --> 00:32:50,350
like Firefox Chrome like I ran some

00:32:48,430 --> 00:32:52,840
tests with selenium so it had quite some

00:32:50,350 --> 00:32:55,510
latency loading the browsers for each

00:32:52,840 --> 00:32:57,490
test method so is there some kind of a

00:32:55,510 --> 00:33:00,100
lesser like command line browser

00:32:57,490 --> 00:33:03,070
something which will make my tastes run

00:33:00,100 --> 00:33:04,870
faster suddenly that you know maybe you

00:33:03,070 --> 00:33:06,190
can use parallel testing where and you

00:33:04,870 --> 00:33:07,810
can use another component or the

00:33:06,190 --> 00:33:08,770
selenium grid where you can run your

00:33:07,810 --> 00:33:15,090
tests in parallel

00:33:08,770 --> 00:33:15,090
oh yeah you can use a headless browser

00:33:18,120 --> 00:33:30,130
okay okay cool that's high so sometimes

00:33:28,150 --> 00:33:33,580
I don't know how long it will take for

00:33:30,130 --> 00:33:35,440
my users to come so how do I set up so

00:33:33,580 --> 00:33:37,420
how does selenium wait for the timeout

00:33:35,440 --> 00:33:40,270
or how do I deal with those timeouts

00:33:37,420 --> 00:33:51,160
okay dealing with the timeouts you need

00:33:40,270 --> 00:33:55,630
to you need to is not no clean way to do

00:33:51,160 --> 00:33:57,520
this sighs yeah there's a selenium

00:33:55,630 --> 00:34:00,190
supports type method called as execute

00:33:57,520 --> 00:34:02,290
script wherein you can use supposedly

00:34:00,190 --> 00:34:04,630
there a lot of jQuery calls going on so

00:34:02,290 --> 00:34:07,420
what you can do is jQuery you can use

00:34:04,630 --> 00:34:09,880
the method active if it is zero if there

00:34:07,420 --> 00:34:12,250
are no connections going on if it's zero

00:34:09,880 --> 00:34:13,870
and you can break your code and proceed

00:34:12,250 --> 00:34:17,169
or else you can give a sleep ask it

00:34:13,870 --> 00:34:19,419
towards weight more you can put the

00:34:17,169 --> 00:34:21,690
while conditions and all you need to

00:34:19,419 --> 00:34:31,629
make your point that way it's fighting

00:34:21,690 --> 00:34:36,399
thank you how can we have a JavaScript

00:34:31,629 --> 00:34:38,740
error handling logging and then you can

00:34:36,399 --> 00:34:41,320
use the login module in order to capture

00:34:38,740 --> 00:34:43,570
all your events and whenever there's an

00:34:41,320 --> 00:34:45,429
error you put it in a try on except

00:34:43,570 --> 00:34:47,379
block there's a list of exceptions where

00:34:45,429 --> 00:34:49,419
selenium gives no such element exception

00:34:47,379 --> 00:34:53,109
and all such likes of that so you can

00:34:49,419 --> 00:34:54,550
put it in a yacht except and you can you

00:34:53,109 --> 00:34:57,869
can basically structure your code in

00:34:54,550 --> 00:34:59,170
that way but that is for the selenium

00:34:57,869 --> 00:35:02,830
JavaScript errors

00:34:59,170 --> 00:35:07,290
I mean JavaScript errors like what do

00:35:02,830 --> 00:35:07,290
you mean to say error as an avoid kind

00:35:08,550 --> 00:35:19,390
okay yeah hi thank you for a great

00:35:17,020 --> 00:35:21,340
introduction for selenium so I run a

00:35:19,390 --> 00:35:22,780
small IT services shop where we

00:35:21,340 --> 00:35:25,990
specialize on Python and Django

00:35:22,780 --> 00:35:27,880
development and we do a lot of testing

00:35:25,990 --> 00:35:30,700
on the back end and we've not you're not

00:35:27,880 --> 00:35:33,490
doing testing using selenium yet so I

00:35:30,700 --> 00:35:35,260
just wanted to understand that how do we

00:35:33,490 --> 00:35:38,080
think how should we think about defining

00:35:35,260 --> 00:35:40,900
a test between selenium versus back in

00:35:38,080 --> 00:35:42,700
testing and you know what like do you

00:35:40,900 --> 00:35:45,310
have any data from customers or

00:35:42,700 --> 00:35:48,400
real-life test cases like what kind of

00:35:45,310 --> 00:35:51,490
bugs can I do people normally find with

00:35:48,400 --> 00:35:54,400
selenium what kind of bugs yeah what

00:35:51,490 --> 00:35:56,080
kind of bugs do people normally end up

00:35:54,400 --> 00:35:57,280
finding with selenium typically not not

00:35:56,080 --> 00:35:59,140
theoretically like with real-life

00:35:57,280 --> 00:36:02,140
applications what what kind of bugs do

00:35:59,140 --> 00:36:04,750
people find selenium is basically of

00:36:02,140 --> 00:36:07,960
used for testing the web applications

00:36:04,750 --> 00:36:09,910
for back-end disk back in testing you

00:36:07,960 --> 00:36:11,470
need to design your own test cases maybe

00:36:09,910 --> 00:36:13,150
you can use the unit test testing

00:36:11,470 --> 00:36:15,460
framework and you can use different

00:36:13,150 --> 00:36:17,710
libraries corresponding to your

00:36:15,460 --> 00:36:20,170
requirements supposedly if you have an

00:36:17,710 --> 00:36:22,960
application built in using elasticsearch

00:36:20,170 --> 00:36:25,660
so you can use a PI elasticsearch module

00:36:22,960 --> 00:36:27,820
and to extract that whatever is the data

00:36:25,660 --> 00:36:29,349
and test accordingly selenium would not

00:36:27,820 --> 00:36:30,820
help you with the back investing it will

00:36:29,349 --> 00:36:32,630
help you with the web application

00:36:30,820 --> 00:36:35,300
testing selenium is more

00:36:32,630 --> 00:36:39,230
for acceptance testing and functional

00:36:35,300 --> 00:36:41,750
testing so the thing is that back in

00:36:39,230 --> 00:36:44,480
tests are easier to maintain because

00:36:41,750 --> 00:36:47,060
they don't involve all these front-end

00:36:44,480 --> 00:36:49,610
tags and you know front end you know can

00:36:47,060 --> 00:36:52,400
change a lot more than the back end so I

00:36:49,610 --> 00:36:54,080
would my I would prefer to do back in

00:36:52,400 --> 00:36:56,270
testing so you know what I'm really

00:36:54,080 --> 00:36:58,280
trying to get to is that why should I do

00:36:56,270 --> 00:37:01,840
front end testing exactly what type of

00:36:58,280 --> 00:37:04,370
bugs will selenium help me catch that

00:37:01,840 --> 00:37:06,640
back end testing combined with a little

00:37:04,370 --> 00:37:10,670
bit of manual front-end testing will not

00:37:06,640 --> 00:37:12,410
supposedly you have a huge you have a

00:37:10,670 --> 00:37:14,270
huge test it out with respect to a

00:37:12,410 --> 00:37:16,480
sample application that I shown you it

00:37:14,270 --> 00:37:18,560
search there could be a case where in a

00:37:16,480 --> 00:37:20,480
highlighted keyword is not what is

00:37:18,560 --> 00:37:22,640
according to expected so it is not

00:37:20,480 --> 00:37:24,500
possible to do it manually that you loop

00:37:22,640 --> 00:37:26,210
through all your test data and verify

00:37:24,500 --> 00:37:26,540
that whether each highlight is correct

00:37:26,210 --> 00:37:29,060
or not

00:37:26,540 --> 00:37:30,860
so selenium will help you the automated

00:37:29,060 --> 00:37:33,590
testing done using selenium will help

00:37:30,860 --> 00:37:35,840
you find that particular bug that this

00:37:33,590 --> 00:37:38,440
is the highlight where in your result is

00:37:35,840 --> 00:37:38,440
not correct

00:37:50,190 --> 00:37:52,250

YouTube URL: https://www.youtube.com/watch?v=CZsl15aIq2Y


