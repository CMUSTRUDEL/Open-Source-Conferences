Title: Talk: So, You Want to Build an Anti Virus Engine - YuShiang Dang, JunWei Song
Publication date: 2020-12-03
Playlist: PyCon India 2020
Description: 
	This talk was presented at PyCon India 2020 Online.

PyCon India is the largest gathering of Pythonistas in India for the Python programming language. The 12th edition of PyCon India took place online from 2nd October to 5th October 2020.

Talk Detail: https://in.pycon.org/cfp/2020/proposals/so-you-want-to-build-an-anti-virus-engine~bDM6d/

Click here to subscribe to the PyCon India channel: https://www.youtube.com/user/inpycon?sub_confirmation=1
Follow PyCon India on Twitter: https://twitter.com/pyconindia
Follow PyCon India on Facebook: https://www.facebook.com/PyConIndia/
Captions: 
	                              next talk                               is by zoom bay and shine on so you want                               to build antivirus                               engine                               hey guys welcome to join our talk today                               we will be demonstrating                               our engine clock it is a fusication                               neglect                               android malware scoring system                                so my name is jung song i'm a security                                researcher                                and the co-founder of clock engine                                and we also have another speaker yushan                                he is the core member of quark engine                                so this is the online number one we will                                introduce our malware scrolling system                                number two we will show you how we                                design the delphi bytecode loader                                number three we will go through two                                cases of real malware analysis using                                clock engine                                number four we will share our strategy                                of generating                                the detection rules and the last thing                                yes                                the future works we still have lots of                                thing to do                                all right so let's introduce the malware                                scoring system                                as we know when developing a malware                                analysis engine                                it is important to have a scaling system                                however those systems are either                                business secret                                or too complicated therefore we decide                                to create                                a simple but solid one and take that                                as a charger and since we want to design                                a novel schooling system                                we start reading and decoding what other                                people do                                in the field of cyber security because                                we don't want our ideas to be subject to                                the exiting                                systems so we start to find ideas                                in fields other than cyber security                                and luckily we found one yes                                the best practice we found is the                                criminal law                                when sentenced a penalty for a criminal                                the judge with the penalties based on                                the criminal law                                and after decoding the lore                                we find principles behind it and we                                develop                                a scoring system for android malware                                there are only eight principles decoded                                from the criminal law                                and i will go through it in the                                following slides                                now let's see principle number one                                malware crime consists of action and                                target                                in a criminal law the definition of                                crime                                consists of action and target                                for example steal money or                                kill people so with this principle                                in mind we developed a definition of a                                crime                                for android malware and definition                                is the malware crime consists of                                action and target for example                                still photos or steal your banking                                account passwords                                now let's see principle number two we                                consider                                that the loss of fan is greater than                                the loss of wealth in a criminal law                                physical body injury is more serious                                than                                psychological injury so the principle                                with the code here                                is when things are hard to recover                                we consider it a family                                when this principle declared we develop                                our second principle we consider the                                loss of                                fam is greater than the loss of wealth                                because it's easier to make money back                                than reveal your                                reputation okay now                                let's see principle number three                                arithmetic sequence                                in a criminal law when a murderer is                                sentenced                                                                                               is sentenced seven years in prison for                                his crime                                 why twenty and seven years what a number                                 we found no obvious principle                                 we found no obvious principle in a                                 criminal law                                 so we use arithmetic sequence to wear                                 the penalty                                 of each crime for example the penalty                                 weight                                 of y                                           y                                         so now let's see the most important part                                 of the scoring system                                 we create an order theory which consists                                 of                                 three principles principle four                                 five and six let's first look at                                 the principle number four the latter the                                 stage                                 the more we will ensure that the crime                                 is practiced                                 as mentioned in chapter                                             criminal law                                 each client consists of a sequence of                                 behaviors those behavior can be                                 categorized in a specific order                                 let's take murder for example determine                                 means somebody designed to kill someone                                 conspiracy means he or she start                                 a mecca plan for the murder preparation                                 means buying stocks like weapons or                                 arranging a service for a murder plan                                 star means when things are or said                                 the murderer take action and is on the                                 way to kill someone                                 practice means the murderer does pull                                 the trigger                                 and shoot someone so as we can see                                 here the latter stage the more we are                                 sure that                                 the crime is practiced when the                                 principle in mind                                 we develop android malware crying order                                 theory                                 in this theory we also have five stages                                 for a crime for example if a male were                                 trying to send out your location data                                 by using sns in stage one                                 we check we will check if related                                 permission is requested                                 by the malware and then we will check if                                 key native api is code in stage                                   we will see if certain combination of                                 native api exists and then we will check                                 if the                                 apis are code in a specific order                                 finally we will check if apis are                                 handling                                 a send register okay so now you can see                                 from this picture                                 this is a two dimensional map for                                 entering malware crime                                 for the clients we put them in y-axis                                 and for each crime we use x-axis                                 to see the evidence we cover for the                                 crime                                 so x                                                                we have found native apis that are                                 called                                 in a correct sequence and they are                                 handling the send register                                 and x x                                     means in client number five we have                                 found                                 certain combination of native apis                                 that is used in this apk                                 so now let's look at principle number                                 five the more evidence we code                                 the more penalty weight we give so                                 we give stage two more weight                                 than stage one and stage three more                                 weight than stage                                       ok principle number                                                sequence                                 as we decode from the criminal law the                                 latter the stage                                 the more we are sure that a crime is                                 practiced                                 so we consider proportional sequence for                                 example                                                                                                such principle in our scoring system                                 all right principle number seven price                                 are independent events first velocity                                 we assume crimes are independent events                                 and penalty ways can be adr generally                                 so this is the example of adding out two                                 price                                 in the malware we found two clients                                 they are still in photo and still your                                 bank can                                 tell password so the calculation of the                                 total penalty weight                                 is quite simple for each coin we use                                 penalty way to overcrowd to multiply                                 proportion of curve evidence and add up                                 the result of the two the last principle                                 principle number eight threshold                                 generate system                                 after calculating the total penalty way                                 for a                                 malware we need to have the thread level                                 thresholds                                 so that we can tell which straight level                                 does the malware fill in                                 unfortunately we can find land in the                                 criminal law                                 but we know we need to design a                                 threshold generate system                                 for that not just give any number by                                 integration                                 so we decide that threshold for each                                 level                                 is the sum of the same proportion                                 of cap evidence multiply penalty weight                                 of a crime we know it's                                 it is not a perfect one but we are sure                                 that we built                                 a foundation for future optimization                                 all right so now let's talk about the                                 design logic                                 of delphi by code loader                                 our delphi by code loader is actually                                 the implementation                                 of the android malware crime order                                 theory                                 we implement every stage of the theory                                 there are five stages the first stages                                 are easy we simply use api in another                                 open source                                 tool android guide to implement the                                 first three stages                                 as i just mentioned the implementation                                 of first three stages                                 are easy but in stage four we need to do                                 a little bit more so before the                                 implementation                                 we need to do we need to know what does                                 stage                                   do in stage                                           the calling sequence of native apis                                 and check if they are code in a specific                                 order                                 for example if a male will send out your                                 location data                                 by sms then first it will call native                                 api                                 excel location to get your location data                                 and then code native api syntax                                 message to send your location data by                                 sns                                 normally native api are working                                 functions                                 so we trust back to see which function                                 is cross reference                                 from the native apis and we call those                                 functions                                 the parent function and we will keep                                 tracing back                                 until we find mutual parent function for                                 both the                                 negative api here is the example                                 same text message is called by send                                 sns which is the parent function                                 of send text message and guest cell                                 location                                 is called by get location which is the                                 parent function                                 of guest cell location and if if we keep                                 tracing back                                 we will see that both send sns                                 and get location shares the same parent                                 function                                 send message after we find the mutual                                 parent function                                 we will scan through a smally line code                                 of the mutual parent function and check                                 which function                                 is called first so this is the small                                 delight code                                 of send message we can see that                                 get location is called first to get                                 location data                                 of the cell phone and the send sns                                 is code to send out the location data                                 in step                                                            can also overcome the obfuscation                                 techniques                                 used by the malware when implying of                                 citation techniques                                 function except native apis are renamed                                 this has made the compile source curve                                 hard to read for human                                 the machine can still run a tone because                                 the logic of the code                                 remains the same here is the example                                 when applying obfuscation techniques                                 native api                                 set text message is called by function k                                 and function k is called by function f                                 the alternative api sr location                                 is called by function e and both                                 function e                                 and f shares the same parent function                                 a you see if you start reading the                                 decompile source code                                 of a it will be hard to figure out what                                 is going on there                                 by the way since our goal is to find the                                 mutual parent function                                 so it doesn't matter how many layers the                                 workers are                                 now let's see the implementation of                                 stage five                                 yes the most important part in stage                                 five                                 we need to confirm that if the native                                 api                                 are handling the send register let's use                                 the same example                                 send out your location data by using sns                                 so when native api gets cell location is                                 code                                 it will return the location data of the                                 cell phone                                 and what we do in stage                                               if learn other native api send text                                 messages                                 sends out the location data returned                                 from                                 get cell location so                                 in stage                                                       operation we read line by line                                 of the smaller line source code and                                 operate                                 like cpu to get two things                                 first the value of every register                                 second the information like functions                                 who have                                 operate the send register                                 to make this happen we create a                                 self-defined data type                                 we call it register object                                 in each register option we store three                                 kinds of                                 information number one a register name                                 number two the value of the register                                 number three the function who used this                                 from                                 uh use this register let's see the                                 example                                 so the register name is v                                  and the value of the register is a                                 string                                 and the string appends the value of                                 string                                   and the result of function                                             we can see that                                 the register is used as the input                                 resource                                 of the function                                               when filling the value of used by which                                 function                                 in a register object we extend                                 every register by cross referencing of                                 the                                 register object in a table so                                 for example by cross referencing we know                                 that                                 v                                                                   and v                                                             caption                                 as you can see in the lower right corner                                 a result of                                 get location is append to the string                                 user location and the new string is sent                                 out by                                 using function send sns                                 in other words the value of register v                                  is generated by using function                                 getlocation                                 which has native api one in is                                 and the value is used as an input for                                 function                                 send sns which has negative                                 api two in it so now we prove that                                 by using the register objects we can                                 check                                 if the api are handling the send                                 register                                 so after we scan through the source code                                 we produce lots of register object                                 and those register objects will be                                 organized                                 when a two-dimensional python list                                 it is a similar idea like hash table                                 we use it to boost out the read and                                 write                                 of the list so now let's see the table                                 as you can see here register feed                                   has three register objects that mean in                                 a source code we scan                                 v                                                       and every time we when it was used                                 we store the present value of the                                 register                                 and the function who used it if there's                                 one                                 so basically the whole table is the                                 history                                 of the register so when we finish                                 constructing the table                                 we then scan through all register                                 objects                                 in a table to check if the native apis                                 are handling the same register                                 so now let's see how to use clock engine                                 to analyze the malware and zhang will                                 take care                                 of this part                                 okay so in this section we prepare two                                 malware                                 one is non-obfuscated and the other one                                 is obfuscated                                 and for each malware we'll show how we                                 detect behavior of the malware with the                                 detection rule                                 now let's look at first malware this is                                 a non-obfuscated one                                 we will use the rule in quark engine to                                 detect whether if the malware sent out                                 cell phones location data                                 by using sms so this is the detailed                                 report of quark engine                                 in this report the engine shows the                                 detection result of one single malware                                 behavior                                 or you can say one single memory crime                                 so for example                                 we try to find it the malware send out                                 your location data by using sms                                 in this report we list out the evidence                                 we found in                                 each stage of the android malware crime                                 order theory                                 and this report shows we find evidence                                 in every stage                                 which means we have                                                   that the malware has this behavior                                 so let's see in stage                                                    send sms ss course location and find                                 locations are requested                                 in this second stage key native apis                                 like get cell locations and send text                                 messages are used                                 and in stage                                                    combinations of native api                                 exist and in stage                                                     in functions like send message and do                                 byte                                 that the api are called in write                                 sequence                                 and in stage                                                             we found out that those apis are                                 handling the same register                                 so now let's think if you are analyzing                                 this malware                                 and you want to trace the compiled                                 source code see the evidence                                 how do we do it our suggestion is start                                 backwards                                 that means you start from stage five for                                 example                                 in stage five we know that inside                                 function of send message                                 it has two functions that contains the                                 two native apis respectively                                 and they are handling the same register                                 so                                 you start to locate function send                                 message in the compile source code                                 and in stage                                                          functions are called                                 in write sequence so we can start find                                 functions                                 like that contains the native apis and                                 check if they are really called in the                                 right sequence                                 the information of the two functions and                                 sequence will be shown                                 in the next version of clock engine                                 so now let's look at a real example                                 let's locate the function set message                                 and we found out net two functions that                                 contains the two native api respectively                                 there are send assemblies and get                                 locations and if we dive into the                                 function of get location                                 we'll see that it contains the native                                 api get cell locations                                 and if we dive in the function of send                                 sms                                 we'll see that it contains native api                                 send text message                                 so the code here means it first collect                                 your                                 cell phone location data and send it out                                 through                                 sms so now let's dive into the source                                 code of get locations                                 as you can see in the source code it                                 tries to call native apis get their                                 locations                                 and return this information at the end                                 of the code                                 and now let's dive in the source code of                                 send sms                                 native api send text message is used                                 to send out location info quite simple                                 isn't it                                 so now let's look at the second malware                                 this is a obfuscated one                                 we will use the rule in quark engine to                                 find whether if the malware detect                                 wi-fi hotspot by gathering information                                 like active network                                 info and cell phone located a cell phone                                 location                                 okay so as a malware analyst we read                                 report backwards                                 as you can see in stage                                             functions like p.a                                 add view the c and after round                                 has two functions that contains the                                 negative apis respectively and they are                                 handling the same register                                 and in stage four those two functions                                 are also                                 called in write sequence in function p h                                 add view the c and after run so                                 according to this report to this report                                 we can say that the malware has the                                 behavior of                                 wi-fi hotspot detection in three parts                                 of the source code                                 we can pick any part of the further                                 analyst                                 so we pick up function p a                                 so now let's see the source code let's                                 locate function p dot a                                 and we found out that two functions that                                 contains the two native api respectively                                 there are ap dot a and f dot f and if we                                 dive into the function of                                 ap dot a we will see that it contains                                 native api                                 get active network info and if we dive                                 into the function of                                 f.f we'll see that it contains native                                 apis                                 get cell locations so the code here                                 means                                 after collecting information from                                 function ap.a                                 and f.f they send the information as an                                 input for function amwa                                 so now let's dive into the source code                                 of function ap dot a                                 as you can see in the source code it                                 tries to call native api                                 get active network info and return                                 related                                 information at some point and now let's                                 dive into the source code of f.l.f                                 native api get cell locations is used to                                 get the cell phone location data                                 and this information is processed with                                 some                                 other strings at the end of this                                 function                                 it returns the string with the                                 information                                 as mentioned earlier earlier after                                 collecting information from function                                 apt.a                                 and f.f they use the information                                 as an input for function and a                                 and we noticed one thing that function a                                 and dot a                                 used by the ray output string as one of                                 its input parameter                                 and we know when c byte array output                                 string                                 it means the function is probably trying                                 to write the data into a file                                 this is amazing isn't it so with quark                                 engine                                 malware analysts can really boost up                                 their productivity                                 okay so now i'll introduce our detection                                 rule generate strategy                                 so why do we need to develop the                                 detection rule                                 generate strategy because to make our                                 engine practical                                 and easy to use we need to have more                                 detection rules                                 however the speed of rule generated by                                 human is quite slow                                 and the human generated rule is subject                                 to his or her experiences malware                                 analysis so we developed                                 a rule generated strategy to boost up                                 the production                                 of detection rules since our goal is to                                 find all kinds of behavior                                 in the malware so if we use permissions                                 and native apis to generate                                 all possible rules we'll have an amazing                                 amount                                 of rules after generating rules                                 we then use quark engine to find the                                 intersection between those                                 amazing amounts of rules and the malware                                 we prepared                                 in other words we find rules that match                                 the malware behavior however this is not                                 a good way                                 to generate detection rules because it's                                 time                                 and resource consuming so we developed                                 a seven step rule generated strategy so                                 first step one                                 we crawl down all native api information                                 on android offshore                                 api reference for example this is the                                 native api information of send text                                 message                                 you can see the input parameters returns                                 value                                 and the description of this api okay                                 next step two we did a little bit                                 modification                                 to our engine we ignore the permissions                                 checks                                 in stage one of the android malware                                 crime order theory                                 and in step three we find all kinds of                                 api combinations                                 and generate rules without permissions                                 information                                 in step                                                             engine to find the intersection                                 of the rules and the malwares we call                                 rules in intersection the first stage                                 verified rules                                 in other words this rule needs to be                                 verified again                                 and since we don't need to generate                                 rules with permissions and verify the                                 permissions in clock engine the whole                                 process of                                 rule production speed up next                                 in step five we try to generate rules                                 with permissions                                 inside intersection we have first stage                                 verified rules matched                                 with malware we then use the first stage                                 rule and permissions in the matched                                 malware to generate                                 rules with permissions which is the                                 second stage rules                                 in step six we then use the clock engine                                 which is the full function version to                                 find again                                 the intersection of the second stage                                 rule which is                                 which are the one with permissions and                                 the malware we prepared                                 after that for each rules we level the                                 number of                                 matched malware for example the behavior                                 of number one                                 the behavior rule of number one can be                                 found in the                                             so finally step seven after leveling the                                 rules we then sort the rule by number of                                 matched malware                                 we reveal the rules from the highest                                 matched one                                 all right last part future works                                 as i mentioned earlier we still have a                                 lot of thing to do                                 for example we need to have more                                 detection rules                                 and we also need to deal with the exo                                 file and packed apks                                 and we want to have more features of the                                 delve by code loader                                 for example the downloader add applying                                 the scoring system to                                 other binary formats is also in our                                 to-do list                                 and we noticed that api changed in                                 different version of android                                 will also take care of this problem in                                 the next                                 version of quark we probably                                 will change the core library since end                                 regard is quite                                 inactive recently and one more thing                                 actually we are trying to make quark                                 easier to integrate it                                 to other tools for example user can                                 import quark in python library                                 and output the analysis result as a json                                 file                                 and now quark is collected in black r                                 lines                                 and intel all which is the threat                                 intelligence                                 analysis tool and there's one nugget                                 that i want to share we work at the                                 limit of our tools                                 when new tools come come along new                                 things are possible                                 okay that's all for today and if you                                 any question please feel free to dm our                                 twitter account
YouTube URL: https://www.youtube.com/watch?v=v1OccNNfh3Q


