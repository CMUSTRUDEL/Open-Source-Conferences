Title: Talk: A thousand Djangoes within (or Django multi-tenant) - Lorenzo Pe√±a
Publication date: 2020-12-03
Playlist: PyCon India 2020
Description: 
	This talk was presented at PyCon India 2020 Online.

PyCon India is the largest gathering of Pythonistas in India for the Python programming language. The 12th edition of PyCon India took place online from 2nd October to 5th October 2020.

Talk Detail: https://in.pycon.org/cfp/2020/proposals/a-thousand-djangoes-within-or-django-multi-tenant~b4g7a/

Click here to subscribe to the PyCon India channel: https://www.youtube.com/user/inpycon?sub_confirmation=1
Follow PyCon India on Twitter: https://twitter.com/pyconindia
Follow PyCon India on Facebook: https://www.facebook.com/PyConIndia/
Captions: 
	                              the next stock we have is a                               thousand django's within or dang django                               multi-tenant by lorenzo                               or to your level thank you                               okay so hello everybody i'm quite                               honored to be part of this online                               version of python india                                     i hope you are just having a great first                               day of the conference and i hope you're                                going to enjoy this talk as soon as my                                as long as my connection behaves                                properly                                so a thousand zhang goes within or                                django multi-tenants that's exactly the                                title of the talk                                and let's get to it                                well before there is any syntax error                                triggering in your head let me just say                                that django's is my humble attempt                                of pluralizing the word django you know                                the web framework                                apparently it's possible to use both the                                s and es version                                but when you use the es version                                apparently                                you seem to trigger some memories of                                sweet tropical fruits                                in the head of your audience and also it                                gives room                                for some really really bad puns so as                                far as jan goes i hope we can                                move on with this type of pluralization                                anyways hello                                officially hi i'm lorenzo pena i am a                                proud citizen of elgin cuba                                i've been a jungle developer for                                   years now                                and as of late i have this acquired                                taste of being a chaser of multi-tenancy                                challenges now the main question that is                                going to be driving                                this talk is how to fit a thousand                                jungles in a single jungle and most                                importantly                                why does it matter at all so please                                gather around                                because today for you i have a quick                                tale of fitting djangos that is honestly                                a crazy combination between                                housing web development and dungeons and                                dragons so let's get to it                                once upon a time uh customer read had a                                problem                                and our brave hero you developed a                                solution in django                                but then customers blue green and jello                                showed up with exactly the same problem                                so what should our hero do given the                                fact that there is a                                solution already a django solution                                already implemented                                and there are some options the first                                option which is the one that comes first                                when you roll the dice                                is to actually clone that django                                solution into multiple                                different jungles that is what i like to                                call multiple                                single tenancy and while you can do that                                for three or four customers it's going                                to be a very difficult tax                                task if you need to do that for a                                thousand customers                                so if you go on this road well you're                                going to get some tenacity                                strength and patience but let me tell                                you that there is just a better way so                                please take a look at that shiny                                white building to the left and the best                                way to do it is to actually try to fit                                many djangos within a single jungle                                with this my dear audience you'll see                                that you're growing vertically the sky                                is going to be your limit                                and you're going to get a huge deal of                                intelligence charisma                                a mysterious gauntlet and a brand new                                badge which as                                you may have guessed is multi-tenancy                                because                                yes the art of fitting many things into                                something else                                is what is typically called                                multi-tenancy in housing                                software development and yes dungeons                                and dragons too                                so let's get a bit formal now                                multi-tenancy is the software                                architecture in which a single instance                                 of the software is capable of serving                                 multiple tenants for instance uh there                                 you go some examples that of                                 businesses that implement multitenancy                                 dropbox shopify                                 slack and wordpress and then tenants are                                 going to be the isolated spaces in which                                 users with specific privileges interact                                 for example the accounts of dropbox the                                 workspaces at slack blogs at wordpress                                 servers at this core stores at shopify                                 or                                 sites at stack exchange now                                 why is this all relevant why does this                                 matter                                 let me be honest with you i have this                                 firm belief that if you are a web                                 developer                                 at some point in your developer's career                                 you're going to be crossing paths with                                 multi-tenancy                                 and let's say that multi-tenancy it's a                                 medium to complete                                 to complex task it's just not a piece of                                 cake it can be                                 daunting at some point in time so i                                 think it's fair                                 to use the analogy that at some point in                                 your career                                 if it hasn't happened it's gonna happen                                 anytime soon                                 and multitask multitenantanos is gonna                                 be kind of                                 inevitable you know like in the movie                                 but the good news                                 is that we don't have anything to fear                                 because we are jungle developers                                 so far there is no major challenge                                 django hasn't been able to                                 overcome as of now so please whatever                                 you are right now in the world                                 clap your hand let's clap our hands for                                 the framework that turned                                              and as of today in                                                   capable of lifting                                 all the heavy weights of modern web                                 development                                 so awesome yeah this is awesome but                                 how do we actually get to implement                                 multi-tenancy into one of my existing                                 django projects or how do i actually get                                 to fit                                 a thousand djangos into a single general                                 well                                 there is a number of packages available                                 to you and you can just                                 use one of those but truth be told one                                 does not simply add multi-tenancy to the                                 project                                 even if you become an expert in one of                                 those particular packages and you get to                                 learn the nuts and bolts of                                 that there are some underlying                                 principles and some general purpose                                 knowledge that outlast and not leave any                                 existing package                                 that you and i would do a good favor to                                 know because                                 by doing this we wouldn't approach any                                 existing solution out there                                 in the form of a black box and we will                                 be able to understand what's going on                                 and even extend                                 or make our own decisions so in this                                 talk in order to                                 go through the path of a thousand diane                                 goes within what i'm proposing to you                                 here                                 is that uh we're gonna be taking a look                                 at the underlying principles of                                 multi-tenancy in django                                 in general so this is the agenda i have                                 for you today we're gonna be taking a                                 look at the active tenant                                 then the three architectural choices                                 you'll have to make for multi-tenancy                                 and finally the scope of everything else                                 in the framework                                 are you ready i hope you are let's begin                                 with the notion of the active tenant                                 remember we mentioned stack exchange                                 previously so suppose you are in stack a                                 change and you want to run this query                                 question objects all you are expecting                                 to get some questions                                 but where because stack exchange is a                                 big side there are multiple sub sites                                 like stack overflow server fault super                                 user area                                    others so welcome to this new concept of                                 the active tenant this is                                 kind of the cornerstone of multi-tenancy                                 and the idea is that now                                 you're going to be operating in the                                 context of an active tenant in your                                 database access url reversing admin site                                 cache                                 every single part of the framework and                                 notice that                                 it's going to happen even outside the                                 request response cycle because we have                                 things here like management commands                                 and salary tasks where you don't have a                                 request object to interrogate so we have                                 to be ready to be                                 to operate within the context of an                                 active tenant everywhere even if there                                 is no request object                                 django has a couple apis you're probably                                 familiar with                                 where there is already this notion of                                 getting and setting an active something                                 this is what you do when you get and set                                 the time zone                                 and language and therefore we can                                 totally extend this behavior to also                                 get and set an active tenant this is                                 what most packages do                                 and this is a possible code                                 implementation of this pair of functions                                 notice that we're using here as graph                                 local                                 which is a drop-in replacement for                                 threading locals that works good with                                 async eo you know that django as of late                                 is getting more and more async                                 compatibility                                 but if you take a look at the code                                 you'll notice that actually what we are                                 creating here                                 is a global variable and globals are                                 generally discouraged                                 in django this is a pattern that django                                 code base itself hasn't embraced a lot                                 django doesn't use                                 globals too often so while this is a                                 good                                 use case valid use case for using                                 globals is generally not recommended for                                 you to be just creating new globals                                 the reason is that the more you depend                                 in globals the more copper becomes your                                 code the harder to test                                 in isolation and therefore it's not                                 recommended in general                                 now about the active tenant there are                                 two interesting questions to ask                                 ourselves number one                                 what is the type of a tenant object is                                 it always going to be an instance of any                                 particular model                                 not necessarily i'm just gonna leave                                 this open as a food for thought                                 and second question what happens if for                                 some operation there is just                                 no active tenant is this going to be a                                 bug                                 is this a valid use case because you're                                 running an operation that is                                        agnostic                                 or probably is the lack of an active                                 tenant an indication that                                 you want to run the operation in                                 wildcard mode and therefore run it in                                 multiple tenants                                 all interesting questions that we're not                                 going to be answering specifically here                                 but we can discuss about that later so                                 as soon as you get the concept                                 of the active tenant in your head you're                                 not                                 uh you now face three architectural                                 choices that you had to make in order to                                 implement multi-tenancy in your project                                 these are users and tenants database                                 architecture and tenant running let's                                 take a look                                 at each one of those users and tenants                                 we previously mentioned                                 that tenants are the space in which                                 users with specific privileges                                 interact but this relationship between                                 users antennas                                 and tenants can take three different                                 shapes one                                 is that in which users exist outside the                                 context of tenants you can have users                                 you can have tenants there can be a                                 relationship but that relationship is                                 kind of loose non-strict                                 for instance wordpress shopify and                                 discord where                                 each one can exist separately there's                                 another shape in which users exist                                 within the context of tenants that is                                 you cannot imagine a user being taken                                 outside of a tenant and the perfect                                 example for this is luck                                 where you cannot even log in unless you                                 specify a workspace first                                 and thirdly we have that shape in which                                 users and tenants are the same thing and                                 as an example we have gmail dropbox                                 it will depend on you to pick which one                                 of these cases                                 is going to be the most suitable for you                                 because this is going to have some                                 implications in how you model your users                                 and the baseline question to ask is how                                 many tenants do i expect a single user                                 to be                                 associated with that's the first choice                                 second choice is going to be the                                 database architecture itself that is the                                 layout of the database                                 and if you look outside in the internet                                 you're going to find that there are                                 typically three approaches                                 isolated approach in way in which there                                 is multiple databases one per tenant                                 the shared approach with one database                                 and then                                        column on entry level tables and finally                                 the semi isolated approach that takes                                 advantage of postgres                                 schemas in order to do the tenant                                 storing of data                                 let's take a look at each one of those                                 isolated database approach                                 well you know that django is compatible                                 with multi-database configuration so                                 in practice there's nothing stopping you                                 from having the settings like this where                                 you have uh                                 each one of the tenants corresponding to                                 one database in this case                                 you will need to have a translation                                 function from a tenant                                 into a database alias and then you could                                 use these alias                                 for performing all your query operations                                 like saving your                                 objects or running your queries or even                                 creating a scope manager so that all                                 your subsequent queries are already                                 operating in the context of that                                 database                                 if you want to automate things a little                                 bit                                 all this work could be offloaded to                                 database routers and since we have this                                 translation function                                 that converts a tenant into a database                                 alias we could be providing this                                 value as default value for read and for                                 write in your database                                 and therefore you could be offloading                                 some of the work                                 now the good thing of the isolated                                 database approach is that                                 it is optimized for isolation because                                 your tenants are already separated into                                 different databases                                 the bad is that you cannot have                                 relations across databases                                 because django imposed this constraint                                 and that adding tenants will require                                 reconfiguring your project because your                                 tenant catalog is now living in your                                 settings                                 the not so funny part about the isolated                                 database approach                                 is that your costs your operational                                 costs are going to be skyrocketing the                                 more tenants you have                                 so unless you're planning to have a                                 number of tenants in the lower tent or                                 you can afford to have one of these                                 gentlemen                                 as your billing manager then this                                 approach is not generally                                 recommended second approach is the                                 shared                                 database approach in which you have a                                 records mixed and identified by                                 a tenant column in this case entry-level                                 tenant-specific models will require a                                 pointer to the tenant they belong to and                                 notice that i'm saying here                                 tenant specific models because you may                                 have other models that don't                                 don't make sense with inside a tenant                                 those could be tenant agnostic                                 and also notice that i'm saying entry                                 level because you don't have to                                 annotate every single possible model                                 that is tenant specific as long as you                                 can reach to the tenant it belongs to                                 through a reasonable number of joints                                 you could afford to skip this uh tenant                                 annotation on every single tenant                                 specific model                                 now for this approach you will have to                                 be passing your tenant                                 specifically in all your queries for                                 creating objects and for filtering                                 no matter if the tenant is right there                                 in the model you are operating with                                 or you have to make a number of hops in                                 order to get to the tendon through                                 joints                                 you could also do a bit of automation in                                 this process                                 and this is something that some packages                                 already do                                 in order to automatically assign the                                 tenon when saving a model you could use                                 a default value for the field which                                 could be a carbon function                                 in this case get current tenant or you                                 could have a custom implementation                                 of a field in this case a foreign class                                 with a pre-safe hook                                 or you could also resort to using a                                 pre-safe signal on the relevant models                                 as for querying well some let's say                                 magic that                                 performs some of the packages out there                                 is to actually use custom managers and                                 custom queries in order to                                 inject the active tenant as part of the                                 query so that you don't have to do the                                 filtering yourself but on some                                 particular cases like sub queries or                                 certain database annotations it could                                 happen that you still need to                                 pass the tenant specifically so                                 the good thing about the shared database                                 approach is that you are optimized for                                 scalability because adding tenants is                                 just a matter of adding rows into                                 existing tables                                 the bad is that data isolation is going                                 to take extra development                                 for because it's going to be your                                 responsibility to be able to just                                 provide the results that belong to the                                 tenant                                 that is requesting the data and                                 consequently                                 the not so funny part about the shared                                 database approach                                 is that it's super easy extremely easy                                 to just forget to filter and pass the                                 tenon as part of your filter                                 so if you don't want to wake up in the                                 middle of a night with your brain                                 wondering whether or not you have filter                                 by the active tenon                                 my recommendation is that you bookmark                                 all your tenant scope queries                                 that you create automated tests for each                                 one of them and make sure that they are                                 actually returning results of the active                                 tenant                                 and even that you take a step further                                 and tests that you have tested                                 each one of them yes is kind of riddle                                 but it's life-saving in most of the                                 times and please remember tests are the                                 softest pillow you could have in general                                 in software development but especially                                 if you're going the shared database                                 approach                                 and the third approach the final one is                                 the semi-isolated                                 approach in which postgres schemas                                 are used to isolate standards within a                                 single database what are schemas in the                                 concept of                                 postgres well they are a layer of                                 abstraction between database and tables                                 they are equivalent to name spaces and                                 in the face of ambiguity if there is                                 there are multiple tables with the same                                 name in different schemas                                 you can resolve that problem by                                 configuring a precedence                                 through a postgres concept that is                                 called the search path                                 now with this approach queries remain                                 practically unchanged                                 and this is one of the big selling                                 points of this approach but i have to                                 warn you that this comes at the cost of                                 an increased technical challenge                                 somewhere else and this is where under                                 the hood                                 packages that implement the semi                                 isolated database approach and if you're                                 going to do that                                 this is this is the challenges you're                                 going to face you're going to have to                                 implement a custom database backend in                                 order to set the search path                                 in postgres prior to performing all the                                 other queries                                 you're also going to need a custom                                 migrate command to operate with schemas                                 because django knows how to operate with                                 databases but this concept of schemas                                 that is in the middle of databases and                                 tables                                 is something that janko doesn't know how                                 to do so you have to                                 extend the migrate function so that                                 migrate works at the schema level and                                 finally                                 you also need to create a custom                                 database router with the allow migrate                                 hook                                 so that in tandem with the migrate                                 command you can decide                                 and django is capable of determining                                 whether or not                                 a specific model can be migrated in a                                 specific schema                                 now the good thing about this approach                                 is that you are optimized for isolation                                 because you're still using schemas to                                 separate                                 your tenant data but you also have                                 increased scalability because you're                                 still                                 using a single database and therefore                                 adding schemas is easier than just                                 adding databases                                 the bad is that it takes extra effort                                 to understand and control how schemas                                 interact this is like a new dance you                                 have to learn                                 and the not so funny part about the semi                                 isolated database approach                                 is that well let's just say this is one                                 of the not so funny things is that                                 migrations are going to take a lot of                                 time because now you have to be                                 iterating                                 through all your schemas in order to be                                 running migrations and yes                                 this is going to be a very time costly                                 process the more                                 tenants you have that said we can now                                 ask the interesting question which one                                 is the best and let me tell you                                 as you may have guessed that neither is                                 it why well because there are pros and                                 cons in all of them                                 as you have used as you saw and because                                 it will depend on your specific use case                                 and let me just tell you                                 there are going to be use cases in which                                 each one of these databases approaches                                 are going to shine in each one of those                                 so                                 none of those is ruled out out of the                                 box                                 of course if you want to engage in an                                 ice cream fight respectful ice cream                                 fight about all of this                                 i'll be more than happy to take any of                                 your ice cream balls i mean                                 any of your questions later after this                                 talk                                 and the final architectural choice with                                 we've seen users on database now we'll                                 come to see the tenant routing that is                                 how to activate a tenant from an                                 incoming request                                 let me remind you that around                                    of your django operations are going to                                 be happening within the request response                                 cycle so it's very useful to be able to                                 activate a tenant from an incoming                                 request                                 and then half the tenant activated for                                 the rest of the cycle                                 and in general this is perfectly                                 possible as                                 long as your tenant can be inferred from                                 the user session or headers                                 or even better if your tenant can be                                 inferred specifically from the url                                 by through the domain or subdomain or                                 subfolder                                 or query parameters now where is the                                 place to do it well the perfect place to                                 do is our middleware                                 because by creating a middleware you can                                 just                                 use any translation function from any                                 part of your request                                 into a tenant and then you can activate                                 this tenant if there is no tenant                                 already activated                                 if you take a look at this code you will                                 see that there is no major complexity                                 only                                 to just create the function that                                 translates from a session into a tenant                                 and it's up to you to determine what's                                 the meaning of that                                 now if you create multiple retrieval                                 methods if you have multiple translation                                 functions from different parts of the                                 request                                 you can also have multiple middleware                                 that you can then                                 chain under four you could be activating                                 tenths from multiple different methods                                 so you have choices in this case now                                 what if you want to do the opposite what                                 if you are already within the scope of                                 tenant and you just want to generate a                                 canonical url                                 that not just points into a particular                                 path                                 of your project but also into a very                                 specific tenant just by means of the url                                 for some cases this is simply not                                 possible because you know users                                 session and headers are not easily nor                                 securely                                 and i don't recommend you that you try                                 to encode this as part of the url                                 but if you are doing translation from                                 the url itself                                 is perfectly possible and it's going to                                 work really good                                 and if you're doing it via subdomains of                                 folder or query parameter                                 is perfectly possible as you can see you                                 will only have to do some tweaking of                                 the url reversing process and packages                                 will help you with this                                 because you you know that django only                                 reverses the path part                                 of the entire url and therefore you will                                 have to either prepend                                 interpolate or append the tenant you are                                 operating with                                 as a bonus let me just tell you that you                                 can also use different url comes                                 based on the active                                                  interesting on some scenarios                                 django already provides a hook if you                                 assign your outcome module to the                                 your l url conf variable of the request                                 then this module is the one that is                                 going to be used for the rest of the                                 request another default one                                 so as long as you provide jet another                                 translation function and you convert a                                 tenant into a url conf module that you                                 have                                 for instance for a particular tenant you                                 could have different urls for this                                 tenant so these are the three                                 architectural choices you will have to                                 make                                 users and tenants database architecture                                 and tenant routing and you have to make                                 a choice for each one of those                                 some combinations are going to work                                 really nice together while others                                 won't make sense at all so it's up to                                 you to analyze and determine uh what is                                 most appropriate for your project                                 and then decide now there's more to                                 django than just that                                 so let's take a quick look at the scope                                 of everything else and let's see                                 at least five parts of the framework and                                 let's begin by management commands                                 it's going to be extremely useful to run                                 management commands                                 within the scope of a tenant and for new                                 commands                                 you can include a tenant argument in                                 this command so that you can                                 activate the tenant and then perform the                                 regular operation that the command is                                 doing                                 but for existing non-tenant aware                                 command which is everything that chips                                 with django or any other third-party                                 application                                 this is not going to be possible so you                                 will have to define a special command                                 wrapper and this is something that comes                                 with the packages                                 this command wrapper is going to take a                                 tenant argument and also a needed                                 command                                 with its own arguments and the wrapper                                 is only in charge of activating the                                 tenant and then calling the inner                                 command                                 you will find that some packages even do                                 the nice thing of blending the arguments                                 between the wrapped and the wrapper                                 command so it's probably something that                                 you will take advantage of without                                 having to implement yourself                                 but it's good to know that this is                                 happening uh behind the scenes                                 as for file storage well it also it's                                 also going to be                                 useful sometimes to separate files                                 by tenant for instance by prepending a                                 string representation of your tenant to                                 the paths                                 and you can define a custom file storage                                 in order to do that                                 if you need a different a different                                 implementation of that you could                                 always generate a new file storage                                 now in higher security contexts where                                 you cannot afford                                 one tenant accessing files from another                                 tenant                                 you could do a couple of things you                                 could generate pre-signed urls                                 and by using president urls clients are                                 going to have a                                 time limited access and also uh                                 pre-signed access to that specific uh                                 path                                 but even if you cannot afford the chance                                 that during the lifespan of that url and                                 other people accesses that url you could                                 you also use a proxy view                                 that is a view in django that is in                                 charge of determining whether or not the                                 incoming request                                 has the appropriate security clearance                                 in order to                                 return the file this is something you                                 will find in external packages                                 and it comes at the cost with some                                 overhead because all your files are                                 going to be going through                                 this proxy view as for cash                                 let me just tell you that the cash that                                 comes with django out of the box                                 is                                                                      it as                                 is you're going to be having a cash                                 clash                                 because one tenant could be setting us                                 something in your cache and another                                 tenant                                 using the same key could be retrieving                                 uh that or just overwriting that                                 and notice that is a significant                                 security concern here                                 because you could be leaking information                                 uh if you if you                                 if you don't do this tenant aware so                                 the way to solve this problem that comes                                 out of the box                                 uh almost always is to actually                                 incorporate the tenant as part of your                                 key and then as far as you of your key                                 function                                 and then use this function for your cash                                 and therefore                                 your cash becomes                                                    very important consideration for you to                                 know                                 as for salary tasks well is more a                                 matter of discipline                                 than code because uh celery tasks are                                 going to be                                                           but if you pass a tenant identifier as                                 part of your                                 task arguments you will be able to then                                 uh get the tenant from that identifier                                 and then activate the tenant                                 you will find this behavior in other                                 existing packages but as i've been                                 saying for just too long it's just                                 useful to know the underlying principles                                 and finally four channels                                 this is gonna require a little bit more                                 work                                 because you will have to implement a                                 custom middleware to activate tenant                                 from request and for                                 uh most middleware operations channels                                 require                                 different middlewares because it's                                 operating at a different level it's a                                 it's it operates with protocols we have                                 four more minutes                                 okay i'm wrapping up so uh                                 you will also have to name your consumer                                 groups                                 because if you cannot afford messages                                 being leaked across tenants then you                                 need to use a similar approach to what                                 we did with cash                                 and therefore uh provide a strength                                 representation of your tenant as part of                                 the name of your consumer groups                                 and this is something that is not easily                                 found                                 out there in packages so if you're gonna                                 do channels uh websockets through                                 channels                                 this is something that you'll have to                                 implement most of the time yourself                                 but uh you could take inspiration on                                 other on some code uh there is out there                                 now for everything that was not covered                                 uh we left a lot of things                                 uh without covering like uh tenant                                 specific admin perhaps                                 or tenant specific templates or perhaps                                 how to integrate this into the world                                 view of other third-party applications                                 i have the frame believe that principles                                 are generally                                 extensible so uh for everything we have                                 covered here you could extend                                 and apply it to whatever was not                                 specifically covered                                 now let me give you some of the packages                                 just in case you're                                 searching in the market for which                                 package to use in order to implement                                 multi-tenancy                                 notice that the packages are opinionated                                 by                                 the database approach they use and these                                 are the packages i consider to be the                                 most prominent ones                                 and you can find more in the                                 multi-tenancy grid of djangopackages.org                                 and that's it this is how you fit a                                 thousand jain goals within                                 i hope i have answered some general uh                                 questions and i have clarified problem                                 of multi-tenancy in django                                 if not or if you have more questions                                 feel free to hit me in twitter                                 github or email i'll be more than happy                                 to continue the debate there                                 let me just say you as a final remark                                 that in times of global pandemic the new                                 coal is                                 wearing masks so please do it and enjoy                                 the rest of your conference                                 thank you very much thanks a lot laurens                                 it was a great talk
YouTube URL: https://www.youtube.com/watch?v=pmBDoC-d9yw


