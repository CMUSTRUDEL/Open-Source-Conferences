Title: Tallk: Publishing well formed Python packages - Julin S
Publication date: 2020-12-03
Playlist: PyCon India 2020
Description: 
	This talk was presented at PyCon India 2020 Online.

PyCon India is the largest gathering of Pythonistas in India for the Python programming language. The 12th edition of PyCon India took place online from 2nd October to 5th October 2020.

Talk Detail: https://in.pycon.org/cfp/2020/proposals/publishing-well-formed-python-packages~egrrd/

Click here to subscribe to the PyCon India channel: https://www.youtube.com/user/inpycon?sub_confirmation=1
Follow PyCon India on Twitter: https://twitter.com/pyconindia
Follow PyCon India on Facebook: https://www.facebook.com/PyConIndia/
Captions: 
	                              good afternoon everyone                               next talk is publishing well found                               python packages by zillin s                               the yours                               thank you okay hi everyone                               i'm julian welcome to my talk                               so my talk is about uh publishing wealth                               phone python packages                               so so what is the phone package                                uh oh it's a package which has some sort                                of a structure in place                                by following a certain guidelines and                                adopting some practices which makes it                                easier to develop                                and maintain it is done by because it is                                possible                                uh because of a sufficient documentation                                uh                                well written test with a proper test                                coverage                                and it which facilitates a smooth                                collaboration between                                the developers involved in developers                                and the community                                involved in into your project and your                                patent package                                [Music]                                so how can we make our uh package                                well formed so these are some of the                                points that i had in mind which i will                                go through in this talk                                right from and the styling aspect of                                your code                                through testing till packaging                                so let's have a look at each of them one                                by one                                [Music]                                so a good first step towards uh making                                your package a better form                                is by adopting a style and style guide                                and sticking with it                                uh it makes your code better a readable                                with a                                more readable with the consistent                                formatting and                                and by and if you use a lending and                                styling                                tool along with it it can greatly help                                in uh detecting structural bugs so that                                would be                                that would often go unnoticed if it                                wasn't for the usage of such tools                                as as for the style uh style guide                                part of your i mean of your project                                path                                                               point                                [Music]                                but as per paid itself stays it's                                better to take this as guidelines                                instead of a steadfast rules                                you should in short you shouldn't be                                following them blindly just because it                                says so it                                has to be so no it but it's better if                                you don't do it like that                                that paid itself uh advices against that                                for example consider a long uh link a                                link to an external site or something                                that you you                                that you wish to include in in the                                documentation part of your code as a as                                a comment or something                                and say that your style guide i mean                                mandates your                                number of characters in your in per line                                it to be a some lesson say                                          common number                                and your link is too too long it's a                                    characters or something                                if you're following your style guide                                just like that you                                may be tempted to slice up the link or                                something into two lines                                but that would mess up things a little                                bit right i mean                                if you want to follow that link you have                                to either copy paste or join them                                together                                and click on it no that's not doesn't                                sound that good                                all right so it is better to leave it                                like that                                probably so that your editor whichever                                editor that you're using can recognize                                instantly it has                                a link that you and that you can follow                                to that                                link just by clicking on it instead of                                just copy pasting or anything like that                                 so what tools can be used for                                 for styling and lending pylind and                                 flakey                                  are arguably the most prominent uh                                 lending and styling tools that are                                 widely in use by the python community                                 these days                                 they are they they offer configurable                                 options so you need not stick with the                                 defaults                                 although the default options are are can                                 be used as a good starting point and you                                 can                                 configure them as to fit the needs of                                 your project as you go on for instance                                 you can say it's the                                 number of characters per line limit if                                 you wish                                 and then there is black black is                                 an automatic copy formatting tool which                                 is quite popular and getting more                                 important                                 by the day so suppose that                                 you spend too much time uh fixing the                                 styling and formatting uh                                 of your code all the time uh especially                                 if                                 a lot of projects are contributing to                                 your project                                 and you and you're willing to let an                                 external tool take control of our                                 uh the for styling and formatting part                                 uh                                 you can use black it automatically does                                 the                                 i mean in no matter what style that that                                 your                                 code is written in if it is valid python                                 code                                 black will automatically reformat it so                                 that all the                                 files all the source files will look uh                                 in a uniform style                                 to follow a uniform style so black is                                 black thus can uh in big bigger projects                                 and big projects with a lot of people                                 contributing to it                                 black can uh produce i mean considerably                                 save your time                                 uh fixing i mean time spent on fixing                                 the                                 styling and formatting part of it of                                 course it                                 it means that you have to give up some                                 of the fine control over your code                                 formatting part                                 but it is usually worth it                                 another aspect that can be used uh to                                 make your uh                                 package better form is by using type                                 annotations                                 and using some static and doing some                                 static type checking on it on your                                 code python has been supporting uh                                 static type i mean type annotations for                                 quite some time now                                 and it you making taking advantage of it                                 by actually using it in your code and                                 not only improves the readability of                                 your code                                 but also allows us the developers to                                 use static static type checking tools to                                 run                                 type sex on it so in a way using static                                 type checking                                 you can combine the ease of use offered                                 by the dynamic                                 typing of the python along with the                                 static type                                 system in in some way using this                                 static type checking tool so some of the                                 popular type checking tools that we have                                 is included                                 by pi type and pyrae                                 so let's see an example to see how                                 static type checking and                                 type annotations can help improve our                                 code                                 so i have a function here add if which                                 takes two arguments x and y                                 if x boolean value is uh turns out to be                                 true                                 or whatever that value or i is if it's                                 boolean value                                 like true of x turns out to be true                                 the function will turn add                                           value of i and return it otherwise                                 value of y is returned unchanged                                 so just by looking at it uh it's not                                 exactly easy to figure out uh                                 what exactly this add-if function                                 expects as arguments and what exactly                                 returns i mean                                 okay x look at x x could be a number an                                 integer a float                                 a boolean a list a string it could be                                 anything anything that can                                 produce a boolean value if you apply                                 a rule on it it would work but that may                                 not be what you actually expect                                 so let us use the type annotations and                                 see how it looks like afterwards                                 as you can see just by adding typo                                 notations the readability part or alone                                 has been considerably improved now we                                 know that x                                 adif expects x and y as with pool and                                 integer values and returns an end                                 so obviously the add if function as it                                 is used in the                                 line                                                                which should be an error i mean but uh                                 we said in python by itself cannot uh                                 consider it as an error so but if you                                 run                                 a type static type checking tool like a                                 my pi on it you'll get the following                                 error                                 like this it exp additive expected a                                 bool as the first argument but instead                                 got an integer which is two                                 we fix that and return it true i mean                                 past true as the value and the error                                 disappears                                 the it may look simple in this example                                 but                                 in bigger code bases such errors are                                 very difficult to spot                                 another concern is that code it is quite                                 natural for a project to                                 have some dead code accumulated i mean                                 it's not always possible to uh                                 manually find the dead code it use                                 the project will have some debt code                                 over as it evolves                                 so this that code sometimes can                                 interfere with the other                                 i mean the real code and and produce                                 very puzzling errors                                 uh so this is where that code                                 elimination and detection and eliminator                                 comes in                                 uh if you're you're going for a static                                 uh                                 that code identification tool you can                                 use vulture                                 vulture uh is quite fast because it is                                 uh does static analysis                                 uh using abstraction x                                                doesn't actually                                 run the code it can identify that code                                 with a confidence if it's an appropriate                                 confidence level                                 like that                                 of course just for writing your code uh                                 you have okay                                 your code is fine or you think it is                                 fine but it's always a good idea to test                                 right so you can do unit testing to uh                                 to be sure that your uh code works as                                 you expect it to work                                 and doesn't do something anything crazy                                 by mistake or by chance or                                 some features of the language or                                 something like that it's good to do                                 testing                                 in the case of unit testing it is a                                 would be helpful                                 to design your code so that your                                 different functionalities are different                                 in separate functions                                 separate testable functions uh you can                                 use the built-in unit test module of                                 python in its personal standard library                                 to do the testing or you could use an                                 other texture finals like                                 i test between the two i would advise                                 you to use                                 pi test unless you don't have to use                                 unit test because pi test is usually                                 easier to write and easier to understand                                 so let's consider at an example of the                                 advantage of using                                 a unit testing in this case using pi                                 test                                 i have here a function named check which                                 accepts it to                                 two arguments the first name and last                                 name which are strings and returns                                 uh the ratio of the which is supposed to                                 return the ratio of the first name to                                 the last name so the result should be                                 length of first name divided by last                                 name                                 uh you should i guess you will have                                 already spotted it in in the slide i                                 have uh                                 the function does it the other way                                 around it instead of dividing the first                                 name by the last name it divides the                                 last name by the first name but suppose                                 i missed it while writing it                                 so i write but i instead of                                 doing leaving this untested by                                 handwritten the test for it                                 and i check if it works as i expected it                                 to be                                 but no it's not as i expected it to be                                 so i                                 so i i will be prompted to pay closer                                 attention to this                                 and i see it i fix it and it works out                                 all right                                 next now comes test coverage uh                                 having the test alone is not always                                 useful right even it will tell it should                                 test the part of the code that should be                                 tested                                 it should have adequate test coverage it                                 should cover the code base of your                                 project uh well enough so that you test                                 the                                 parts of your relevant element parts of                                 your code that needs to be tested                                 if you you use a coverage uh test                                 coverage tool you would                                 you should be able to see that part of                                 the part of your code                                 which the test have missed and you                                 should also get a test coverage                                 percentage                                 uh tools like coverage.buy and uh                                 which is a standalone third-party module                                 and pythoscore which is a pi test                                 plugin i can help you with this                                 let's kind of consider another example                                 to illustrate uh the coverage                                 test coverage i have in the left i have                                 the                                 function and the right i have the                                 test port this function is very very                                 simple it returns                                 true if the value is an even number                                 otherwise it returns an old                                 i mean otherwise it turns false uh                                 notice that                                 in the test that i have written it's uh                                 it considers only the behavior of the                                 function then it is a passing even                                 number                                 so i run coverage on it and it shows me                                 that one line has been missed then the                                 coverage is not                                 as it should be it's not coverage it's                                 not less                                 i fixed that by adding another test case                                 i mean another                                 to cover that that part of the function                                 as well                                 and i get                                              so now we have got a lot of tests to be                                 run on your project right                                 uh from from pylind my pi vulture                                 you named so it so it's definitely                                 useful to have some sort of a test                                 automation mechanism in place which can                                 run all the tests for you                                 just like that instead of you having to                                 run all these tests manually one by one                                 you can use this test automation tool to                                 run from them all at once or other                                 as per your wishes and you should also                                 be able to                                 run this test in all the supporter                                 environments                                 so right now you probably have tested in                                 iran mission it works                                 well good enough but it should also work                                 in the systems of                                 other people who will be using your                                 python package                                 by the module so these other people may                                 be using                                 using different versions of python                                 language or maybe even different                                 implementation of python language                                 so you need to be sure uh that you your                                 project i mean your module works as you                                 expected on all these environments                                 you can use test automation tools like                                 uh talks and knocks for that                                 these uh uh projects these toxin knocks                                 can                                 i run the test locally or with the use                                 of                                 some continuous integration ci cd to uh                                 environments as well                                 so now let's look at the package layouts                                 which                                 is has some role to play in the testing                                 part some prominent                                 life i may add                                 flat layout is that the                                 way flat layout i have the package which                                 is in here is named                                 package name the package name packages a                                 source code under the package name                                 directory and the                                 tests that are used to test that package                                 name                                 package are present in the same                                 directory level you see                                 package name and test are present in the                                 same directory                                 and without any nesting in it                                 and then there is src layout where the                                 packages                                 source code in the under the package                                 name directory is isolated into an src                                 for another directory by adding another                                 directory level to further separate it                                 from the test directory                                 this has some part to play                                 see running your talks test                                 i mean what talks really does tools like                                 talks what                                 what they really do is that they create                                 a temporary                                 a separate isolated virtual environment                                 and install your project your mobile                                 module into that virtual environment                                 and test it there so that it the testing                                 would happen as it would as the passive                                 the package is                                 uh installed in a different environment                                 and a different fresh environment                                 so it if it works there it should work                                 on other machines as well                                 that is the idea behind running a torx                                 test as in an isolated version beyond it                                 but if you run this test in a flat                                 layout pack                                 using a package with flat layer what                                 really could happen                                 is that if your your test which should                                 be importing we would which would                                 import your package of source code from                                 packet the source code would import from                                 the package itself because they                                 are in the same directory level within                                 the same package                                 it would import the source code your                                 programs                                 from the package and directory itself                                 instead of actually                                 importing from the installed package                                 which is available                                 in the site packages directory in your                                 virtual environment                                 of talks so this a problem of                                 accidental import happens it is not                                 importing what it was expected to import                                 this is a problem with flat layouts                                 but in src layout this problem does not                                 happen                                 because of the way um python imports                                 work                                 and because of this uh further isolation                                 interest                                 a deeper into a nested directory                                 and a problem of accidental import in                                 the test from the package name directory                                 itself                                 is avoided it is not possible usually                                 and                                 it would and and it would install from                                 the site packages directory itself                                 and the test would work as it expected                                 to yes as expected                                 so this is a reason why one of the                                 reasons why                                 a lot of projects moved away from a flat                                 layer to the src layout                                 but that said uh there is no officially                                 recommended layout                                 it's important to say that and the                                 fighter community has not                                 uh reached the consensus about which                                 layout is better or which layout is bad                                 uh you should decide that for yourself                                 check out these links to see some                                 interesting takes                                 on this matter                                 so once your package is ready well                                 tested good cool                                 everything is ready you need to be able                                 to share your package for that                                 share remodel for that you have to                                 package your uh                                 source code into a file or format which                                 can be used                                 to install that module into other                                 systems                                 like wheel or sdist to do this packaging                                 part you can use                                 setup tools from the ipa python                                 packaging authority or                                 newer tools like flit and poetry                                 so once you have the packaged file                                 refiles ready                                 you need to be able to publish it into a                                 server of your choice usually                                 uh commonly pipi.org server uh if you're                                 using setup tools you need                                 another uh package like a twine to do                                 the publishing part to push your                                 uh source column and your package to the                                 server                                 and flip tools like flit and poetry can                                 do this publishing part by themselves                                 these are some of uh some other tools                                 there are a lot of other tools                                 available which can help in managing                                 your project                                 better these are some of them there are                                 a lot of others                                 i use uh read up on them i would advise                                 you to i would recommend you to                                 bring it up on them and to use those                                 tools which you think you can                                 make your uh help your project back                                 maybe that'd be better                                 it's you may not be a good idea to use                                 all of them at once i mean                                 all the tools that you find maybe it's                                 not a good idea maybe                                 but use your judgment and use what you                                 will need                                 so the way forward is uh                                 is that a pipe project or thermal file                                 of your project                                 of your package as will become has                                 become already the center point around                                 which your project                                 package revolves and it's being expanded                                 upon and                                 a lot of tools that i mentioned like                                 flicate talks and all they used to have                                 separate                                 configuration files uh because uh                                 because there was not unified way                                 earlier arguably sometimes                                 uh we can use a configure instead of                                 instead into the pi project or tamil                                 files without needing for another                                 file so this thermal format and the                                 terminal file                                 has will become more important in the                                 future                                 and we can probably expect a thermal                                 module in the standard library                                 right some many like are already uh                                 have become popular because of this                                 [Music]                                 let me download what we saw so far we                                 use so uh style lending and styling                                 uh static type checking using wi-fi and                                 other tools uh                                 that code elimination and identification                                 testing test coverage test automation                                 and finally packaging so uh                                 that's it thank you for listening uh if                                 you have any talks i'd be happy to                                 take them                                 hey uh so we don't really have any                                 questions as far as i                                 have been noticing the talk but we do                                 have one question where can we get to                                 your slides that's the thing that was                                 asked the most                                 uh i will i will share the link uh                                 uh on the chat sometime soon enough yeah                                 sure so yeah folks i guess if you want                                 the slide you'll have to go to zola banu                                 stream and that's where zulin will be                                 sharing it                                 yeah sure all right thanks a lot jason                                 it was a great talk                                 and we really appreciate it have a good                                 day thanks everybody thanks
YouTube URL: https://www.youtube.com/watch?v=EAtYleEk0ig


