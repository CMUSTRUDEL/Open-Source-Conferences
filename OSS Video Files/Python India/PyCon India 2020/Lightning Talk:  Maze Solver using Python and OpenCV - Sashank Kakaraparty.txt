Title: Lightning Talk:  Maze Solver using Python and OpenCV - Sashank Kakaraparty
Publication date: 2020-12-03
Playlist: PyCon India 2020
Description: 
	This talk was presented at PyCon India 2020 Online.

PyCon India is the largest gathering of Pythonistas in India for the Python programming language. The 12th edition of PyCon India took place online from 2nd October to 5th October 2020.

Click here to subscribe to the PyCon India channel: https://www.youtube.com/user/inpycon?sub_confirmation=1
Follow PyCon India on Twitter: https://twitter.com/pyconindia
Follow PyCon India on Facebook: https://www.facebook.com/PyConIndia/
Captions: 
	                              uh hi am i audible                               yep we can hear you                               hello yes you are audible please go                               ahead                               i hope i'm audible                               yes you are audible sushank please go                               ahead okay fantastic                               uh hi uh my name is shashank and it's                               ashankar grippy                                so i'm a python developer i work with                                computer vision deep learning for the                                last couple of years                                so during this lockdown period you know                                apart from growing my hair like a wild                                boar i also decided to go back to the                                basics of computer vision that i                                learned a couple of years ago where it                                was just monotonous i learned what was                                what what was what                                so that why not do some fun stuff with                                all that that i have learned                                so i came about the idea of how we can                                make a small maze solver using                                a python on opencv i had a passion for                                mazes while i was a kid i loved finding                                the path                                all the time from the start of the maze                                to the end of it so i thought it could                                be                                fun to try something out so i'm guessing                                my screen is up right now so                                i'll just uh take you through before we                                go into the actual maze solving part                                i wanted to take you through a couple of                                very important functions that we use in                                this and                                they're important as well as they're                                very very basic so when you are                                working with image processing these are                                extremely basic                                and uh so as you can see so since it's a                                five minute talk i didn't want to delve                                into                                presentations i wanted to get right into                                the code so that i can give you a good                                idea of what i'm doing here                                so to start off with uh we are reporting                                opencv which is cv                                                    importing numpy and also i'm importing                                matplotlib in to be able to display my                                images                                so i'm importing that then i'm just                                importing a sample image so that i can                                show you                                what works so this is the sample image                                this is the output of our sample image                                which is just a j                                which i picked right off of opencv's                                website of course and then the first                                operation that we need to understand                                is called erosion and erosion is exactly                                what it                                sounds like erosion we hear the term                                erosion when it comes to soil erosion                                which means that the top layer of the                                soil is usually                                gone or taken away and happens due to                                several reasons so erosion in image                                processing                                is also the exact same so it removes the                                borders of an image or any object in                                that                                the object that is the that is the focus                                of the image it removes the borders of                                it                                so as you can see when i run this cell                                you are able to you will be able to see                                the difference between the original                                image and the error of the image it                                looks kind of sort of like it's been                                stopped                                then comes dilation dilation is the                                exact opposite of what erosion does                                uh by meaning so they it tries to widen                                the edges                                it tries to basically expand that image                                and we hear the word dilation usually                                when it comes to our eyes our eyes                                dilate                                when you have like eye when light falls                                onto it and things like that                                so this is dilation so when you run the                                cell that contains dilation you will be                                able to compare it with the original                                image it's much                                fatter it's much plumpier than the                                original image which kind of looks like                                it has                                been touched grandma's place or                                 something like that so these are the two                                 important operations that we will                                 uh use in order to serve a motive here                                 so yeah                                 now i'm back to the point of how do we                                 solve these mazes first up i'm going to                                 give the part uh you can ignore this                                 display image                                 cell here which basically is just a                                 small custom function that i've written                                 in order to be able to print them                                 comfortably so that is out of context                                 yeah so here is the original image so                                 this is the image that we get                                 when we are importing it this is the                                 original image and on top of that we                                 apply the binary operation                                 which is basically we use a                                 cv                                                                       we are converting                                 an rgb image into a binary image at this                                 point so this is the output of our                                 binary image                                 and once that is done we move on to the                                 actual most important parts of                                 the operation which is we have to find                                 the contours so what are contours                                 contours can uh contours is not a very                                 easy topic to like                                 to explain quickly but uh you know at a                                 high level contours                                 are outlines you have to pick the                                 outlines of something you use the                                 contour so if i have a can                                 if i have a glass in my hand and i take                                 a picture of it and i look for the                                 contos it's going to give me the ring of                                 the glass                                 so that's that's what contours are and                                 uh now i'm going to look for the                                 contours here                                 this is the function that we use to find                                 the contours it returns                                 two parameter two two variables one is                                 the contours itself and the hierarchy of                                 the contours                                 next comes in the path uh the path to                                 the binary image                                 and then we draw the contours on top of                                 our original image                                 and this is exactly how our output looks                                 like once this is done                                 then we get into the two operations that                                 we learned earlier one is dilation and                                 the other is a version                                 so now i am dilating the same image now                                 you can see that it looks                                 much uh you know it looks filled up                                 now in the contour image you were able                                 to see some cracks                                 now you don't see those it's filled up                                 and then you try                                 erosion and when you erode it you lose                                 all the extra space that was created                                 and once you do them uh the main idea                                 here is to remove the eroded image                                 from the dilated image which                                 uh yeah i'm done i'm just the moment i'm                                 almost done                                 so this is how you once you are once you                                 get this difference                                 you can simply just plot it and i've                                 actually created into                                 it into a small you know web application                                 that you can find at main puzzle                                 solver.heroku i posted it on heroku                                 there you can just click and it's going                                 to solve the puzzle by itself you have a                                 lot of puzzle options which you can                                 choose from                                 and uh it's just a fun project that i                                 worked on so i hope you enjoyed it thank                                 you
YouTube URL: https://www.youtube.com/watch?v=5ieLAZjZekU


