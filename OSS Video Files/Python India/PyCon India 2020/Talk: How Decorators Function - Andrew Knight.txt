Title: Talk: How Decorators Function - Andrew Knight
Publication date: 2020-12-03
Playlist: PyCon India 2020
Description: 
	This talk was presented at PyCon India 2020 Online.

PyCon India is the largest gathering of Pythonistas in India for the Python programming language. The 12th edition of PyCon India took place online from 2nd October to 5th October 2020.

Talk Detail: https://in.pycon.org/cfp/2020/proposals/how-decorators-function~bYEp2/

Click here to subscribe to the PyCon India channel: https://www.youtube.com/user/inpycon?sub_confirmation=1
Follow PyCon India on Twitter: https://twitter.com/pyconindia
Follow PyCon India on Facebook: https://www.facebook.com/PyConIndia/
Captions: 
	                              welcome back python stars                               we are pleased to welcome mr andrew                               knight a very special guest from                               automation panda in his own words andy                               knight is the automation panda                               an engineer consultant and international                               speaker                               who learns all things about the software                               and today                                he will be sharing with us his expert                                insights on how decorators function                                in python with that i ask you that to                                give your full attention to mr andrew                                knight                                and help me in welcoming him to the                                stage over to you andy                                thank you good evening good afternoon                                and good morning around the world                                can everybody hear me okay                                cool so i'm glad to be here                                um streaming to you live from the united                                states                                as you said my name is andy knight i                                also go by pandy for short in the python                                community                                i am the automation panda and i'm a big                                python fan just like y'all                                so have you ever seen those at tags on                                top of python functions                                maybe you've seen them on top of methods                                and classes too                                those are decorators one of python's                                niftiest language features decorators                                are essentially rappers                                they wrap additional code around                                existing definitions                                when used right they clean up your code                                better than oxiclean                                let's learn how to use them today                                so best way to learn is by seeing actual                                code                                here is a regular old hello world                                function                                when we run it it prints hello world                                nothing fancy here                                now let's take that same function                                and bam let's add a decorator                                using this at sign we just added a                                decorator named                                tracer to this hello world function                                so what exactly is this decorator                                tracer is just another function                                but it's special because it takes in                                a function as an argument                                since tracer decorates hello world the                                hello world function is passed into                                tracer as an argument                                wow so what's inside tracer                                this decorator has an inner function                                named wrapper                                can you even do that with python                                yes you can the wrapper function prints                                entering calls the function originally                                passed into the decorator                                and then prints exiting                                when tracer decorates hello world that                                means                                hello world will be wrapped by entering                                and exiting print statements                                finally the decorator returns the new                                wrapper function                                anytime the decorated function is called                                it will effectively be replaced by this                                new wrapper function                                so when we call hello world                                the trace statements are now printed too                                wow                                that's amazing that is how decorators                                work                                decorators wrap functions around                                functions                                think about them like candy bars                                decorator                                is like the foil wrapper and the                                decorated function is like the chocolate                                inside                                but how is this even possible that                                decorator code looks confusing                                decorators are possible because in                                python                                functions are objects in fancy language                                we say functions are first order values                                since functions are just objects                                we can pass them into other functions as                                arguments                                define new functions inside existing                                functions                                and return a function from a function                                this is all part of a paradigm called                                 functional programming                                 python supports functional programming                                 because functions can be treated like                                 objects                                 and that is awesome                                 so using functions as objects decorators                                 change                                 how functions are called                                 decorators create an outer decorator                                 function                                 around an inner decorate's head function                                 remember the outer function is like the                                 foil wrapper                                 and the inner function is like the                                 chocolate                                 creating an outer function lets you add                                 new code around your inner function                                 some people call this type of code                                 advice                                 you can add advice before or after the                                 inner function                                 you could even skip the inner function                                 altogether                                 the best part is decorators can be                                 applied                                 to any function they make sharing code                                 easy so you don't repeat yourself you                                 can follow the dry                                 principle                                 decorators are reminiscent of a paradigm                                 called aspect-oriented programming                                 in which code can be cleverly inserted                                 before and after points of execution                                 that's neat i recommend you check that                                 out                                 after this talk                                 so remember decorators wrap functions                                 around functions                                 like candy bars                                 hold on now we have a problem in that                                 python code                                 if the wrapper function effectively                                 replaces hello world                                 then what identity does hello world                                 report                                 unfortunately with the given code its                                 name is wrapper                                 and its help also returns rapper                                 that's not right                                 never fear there's an easy solution to                                 this                                 the funk tools module provides a                                 decorator named wraps                                 put funktools.wraps on the wrapper                                 function and pass                                 it in the inner function object and                                 decorated functions once again                                 show the right identity that's awesome                                 but wait there's another problem                                 how do decorators work with inputs and                                 outputs                                 what if we decorate a function with                                 parameters in its return value                                 if we try to use the current tracer                                 we get an error arguments broke it                                 but we can fix it first                                 add star args and star star kw                                 args to the wrapper functions parameters                                 and then pass them through to the enter                                 function                                 they will make sure all arguments go                                 through to the decorator                                 through the decorator into the decorated                                 function                                 then capture the inner function's return                                 value                                 and return it from the wrapper function                                 this makes sure return values also pass                                 through                                 if the inner function has no return                                 value then don't worry                                 the decorator will pass through a none                                 value                                 thanks python                                 when we call the function with the                                 updated tracer decorator                                 we see tracing is now successful again                                 when we check the new return value                                 it's exactly what we expected hello andy                                 it works wow                                 that's awesome but wait there's more                                 you can write a decorator to call a                                 function twice                                 start with the decorator template                                 and simply call the inner function twice                                 return the final value for continuity                                 bam it works                                 but wait there's more                                 you can write a timer decorator                                 start with the template                                 call the inner function                                 and surround it with timestamps using                                 the                                 time module here we'll be printing the                                 elapsed                                 time as the difference between start and                                 end                                 bam now you can time any function                                 oh wait there's more you can also add                                 more than one decorator to a function                                 this is called decorator nesting                                 order matters decorators are executed in                                 the order of closeness                                 to the inner function so                                 in this case with these two decorators                                 call twice is applied first and then                                 timer is applied                                 if these decorators are reversed in                                 order                                 then each inner function call is timed                                 cool but wait there's more                                 you can scrub and validate function                                 arguments                                 check out these two simple math                                 functions add                                 and subtract nothing too fancy here                                 create a decorator named int inputs to                                 scrub                                 and validate inputs as integers                                 add the wrapper function and make sure                                 it has positional arguments                                 that's the star args and the wrapper                                 parameters                                 then cast all r's as ints before passing                                 them into the inner function                                 here i've done that using a list                                 comprehension                                 that's that square brackets in a for a                                 in arcs if you're not familiar with list                                 comprehensions                                 think of it as a really cool way to do                                 processing on                                 lists or collections without using a                                 loop                                 definitely recommend looking that up                                 afterwards                                 now when calling those math functions                                 all numbers are integers using                                 non-numeric                                 inputs also raises a value error                                 cool but wait you guessed it there's                                 even more                                 you can create decorators with                                 parameters                                 here's a decorator that will repeat a                                 function five                                 times the repeat function                                 is a little different than the                                 decorators we've seen before                                 instead of taking the inner function                                 object it takes in the parameter                                 which in this case is the number of                                 times to repeat the inner function                                 inside there's a repeat decorator                                 function                                 that has a parameter for the inner                                 function                                 the repeat function returns the repeat                                 decorator                                 function                                 inside repeat decorator is the wrapper                                 function                                 it uses functools.wraps and passes                                 through                                 all arguments that's star args and star                                 star kw args                                 repeat decorator returns wrapper                                 finally wrapper contains the logic for                                 calling the inner function multiple                                 times                                 according to the repeat decorator's                                 parameter value                                 that's what the for loop does here                                 now hello world runs five times                                 i could change that to be four times                                 eight times                                                                                but wait there's even more                                 decorators can be used to save states                                 here's a decorator that will count the                                 number of times a function is called                                 count calls has the standard decorator                                 structure                                 outside the wrapper a count attribute is                                 initialized to zero                                 this attribute is added to the wrapper                                 function object itself                                 remember in python we can dynamically                                 add attributes to any object                                 inside the wrapper the count is                                 incremented before calling the inner                                 function                                 the count value will persist across                                 multiple calls                                 because it's associated with the wrapper                                 function object itself                                 when we run this initially the hello                                 world count value                                 is zero because it hasn't been called                                 yet                                 after making two calls the account value                                 goes up as expected                                 and now the count attribute returns two                                 awesome                                 but wait there's more decorators                                 can be used in classes as well as for                                 functions                                 here our timer decorator is applied to                                 this                                 hello method                                 as long as parameters and return values                                 are set up correctly                                 decorators can be applied equally to                                 functions and                                 methods                                 decorators can even be applied directly                                 to classes                                 this might blow your mind a little bit                                 when a decorator is applied to a class                                 it wraps the constructor                                 note that it does not wrap each method                                 in the class                                 since decorators can wrap classes and                                 methods in addition to functions                                 it would technically be more correct to                                 say                                 that decorate decorators wrap callables                                 around callables instead of saying they                                 wrap functions                                 around functions interesting                                 python is cool like that                                 so that's all great but can decorators                                 be tested                                 good code must arguably be testable code                                 well today's your lucky day because yes                                 you can                                 test decorators                                 testing decorators can be a challenge we                                 should always try to test the code we                                 write                                 but decorators can be tricky here's some                                 advice                                 first separate tests from for decorator                                 functions                                 from decorates decorated functions for                                 decorator functions                                 focus on intended outcomes try to focus                                 on the wrapper                                 instead of the inner function remember                                 decorators can be applied to any                                 callable                                 so cover the parts that make decorators                                 unique                                 decorated functions should have their                                 own separate unit tests                                 second apply decorators to fake                                 functions used only for testing                                 these functions can be simple or they                                 can be mocked                                 that way unit tests won't have                                 dependencies on existing functions                                 that could change tests will also be                                 simpler                                 if they use slimmed down decorated                                 functions                                 third make sure decorators have test                                 coverage for every possible way it could                                 be used                                 cover decorator parameters decorated                                 function arguments                                 and return values make sure the name and                                 help are correct                                 check any side effects like saved state                                 try it on methods and classes as well as                                 functions                                 with decorators most failures happen due                                 to overlooked edge cases                                 let's look at a few short decorator                                 tests we'll use the count calls                                 decorator we wrote earlier                                 there are two decorated functions to use                                 for testing here                                 the first one is a no operation function                                 named                                 no up that does nothing it has no                                 parameters or returns                                 the second one is a function that takes                                 in one argument and returns it                                 both are very simple but they represent                                 two equivalence classes                                 of decoratable functions                                 the test cases will show will verify                                 outcomes                                 of using the count calls decorator                                 for count calls that means tests will                                 focus on the count                                 attribute added to the decorator                                 functions                                 because that's the side effect that's                                 the outcome                                 this first test case here verifies that                                 the initial count value for                                 any function is zero                                 the second test case calls a function                                 three times                                 and verifies the count is three                                 this third test case exercises the                                 same function                                 over to the left                                 to make sure arguments and return values                                 work                                 correctly it calls the quote unquote                                 same function asserts the return value                                 and asserts the count value                                 this collection of tests is by no means                                 complete it simply shows how to start                                 writing tests                                 for decorators it also shows that you                                 don't need to overthink unit tests for                                 decorators                                 simple is better than complex and to be                                 honest                                 i wouldn't be the automation panda if i                                 didn't cover at least a little bit of                                 testing                                 so up to this point we've covered how to                                 write your own decorators                                 however python has several decorators                                 available in the language                                 and in various modules that you can use                                 absolutely free                                 decorators like class method static                                 method                                 and property can apply to methods                                 in a class frameworks like flask and pie                                 test                                 have even more decorators so let's take                                 a closer look                                 let's start by comparing the class                                 method and static method decorators                                 we'll revisit the greeter class we saw                                 before                                 the class method decorator will turn any                                 method                                 into a class method instead of an                                 instance method                                 that means hello or that means this                                 hello method                                 here can be called directly from the                                 class                                 instead of from an object of the class                                 this decorator will pass a reference to                                 the class or                                 it will pass a reference of the class                                 into the method                                 so the the method has some context of                                 the class                                 excuse me here the reference is named                                 cls to represent the class and the                                 method uses it to get the class's name                                 the method can be called using                                 greeter.hello as shown on the right                                 wow the static method decorator                                 works almost the same as the class                                 method decorator                                 except that it does not pass a reference                                 to the class into the method                                 notice how its parameters are empty                                 methods are still called from the class                                 like here with greeter.goodbye                                 you could say that static method is just                                 a simpler version                                 of class method                                 next let's take a look at the property                                 decorator                                 to show how to use it we'll create a                                 class called accumulator                                 to keep account of a tally                                 accumulator's init method initializes a                                 count attribute to zero                                 an add method adds an amount to the                                 count                                 so far nothing unusual                                 now let's add a property this count                                 method                                 has the property decorator on it                                 this means that count will be callable                                 as an attribute                                 instead of a method meaning that it                                 won't need                                 parentheses it is effectively a getter                                 the calls to count in the init and add                                 methods                                 will actually call this property instead                                 of a raw variable                                 inside the count property the method                                 returns an attribute named                                 underscore counts the underscore means                                 that this variable                                 should be treated as private however                                 this class hasn't set that variable yet                                 that variable is set in the setter                                 method                                 setters are optional for properties                                 here the setter validates that the value                                 is                                 set to a non-negative                                 value if the value is good then it sets                                 underscore count                                 however if the value is negative then it                                 raises a                                 value error underscore count is handled                                 internally                                 while count is handled publicly as the                                 property                                 the getter and setter controls added by                                 the property decorator                                 let you control how the property is                                 handled                                 in this case the setter protects the                                 property against bad values                                 so let's use this class when an                                 accumulator                                 object is constructed its initial count                                 is zero                                 after adding an amount to the object its                                 count goes up                                 its count can be directly set to                                 non-negative values                                 attempting to set the count directly to                                 a negative value raises                                 an exception as expected protection like                                 that                                 is great                                 python packages also frequently contain                                 decorators                                 for example flask is a very popular web                                 micro framework that enables you to                                 write web apis with very little python                                 code                                 here's an example hello world flask app                                 taken directly from the flask docs                                 online                                 it imports the flask module creates the                                 app                                 and defines a single endpoint at the                                 root path that returns the string                                 hello world it says                                 flask's app.root decorator can turn                                 any function into a web api endpoint                                 that is really awesome and it's one of                                 the reasons why flask is so popular and                                 so loved                                 it's so easy to make a web service                                 another popular python package with                                 decorators is pi test                                 python's most popular test framework                                 and it's probably also my personal                                 favorite python package                                 one of pi tests best features is the                                 ability to parameterize test functions                                 to run for multiple input combinations                                 test parameters empower data-driven                                 testing for a                                 wider test coverage                                 to show how this works we'll use a                                 simple test                                 for basic arithmetic called test                                 addition                                 it asserts that a plus b equals c                                 the values for a b and c must come from                                 a list of tuples                                 for example as shown here                                          equals                                         zero plus one equals one and so forth                                 the pi test mark parameterized decorator                                 connects the list of test values to the                                 test function                                 it runs the test once for each tuple in                                 the list                                 and it injects the tuple values into the                                 test case                                 as function arguments the test case                                 would run four times                                 test parameters are a great way to rerun                                 test logic                                 without repeating test code                                 so act now before it's too late                                 when should you use decorators in your                                 python code you may be wondering                                 my advice is to use decorators for                                 aspects                                 an aspect is a special cross-cutting                                 there are things that happen in many                                 parts of the code and they frequently                                 require repetitive calls                                 think about something like logging if                                 you want to add logging statements to                                 different parts of the code                                 then you need to write multiple logging                                 calls in all those places                                 logging itself is one concern but it                                 cross-cuts the whole code base                                 one solution for logging could be to use                                 decorators                                 much like we saw earlier with the tracer                                 decorator                                 [Music]                                 good use cases for decorators include                                 things like logging                                 profiling input validation                                 retries and registries these are all                                 things                                 that typically require lots of extra                                 calls                                 inserted in duplicative ways                                 ask yourself this should the code wrap                                 something else                                 if yes then you have a great candidate                                 for a decorator                                 however decorators aren't good for all                                 circumstances                                 you should avoid decorators for what we                                 would consider main behaviors                                 because those should probably be put                                 directly in the body                                 of the decorated function avoid logic                                 that's complicated or has heavy                                 conditionals too because                                 simple is better than complex                                 you should also try to avoid completely                                 sidestepping the decorated function                                 that could confuse people                                 ask yourself this is the code you want                                 to write                                 the wrapper or the candy bar itself                                 it's the code you want to write the                                 wrapper                                 or the candy bar itself                                 rappers make good decorators but candy                                 bars do not                                 i hope you found this infomercial about                                 decorators useful                                 if you want to learn more check out this                                 real python tutorial                                 by garrett arnheil named primer on                                 python decorators                                 it covers everything i showed here and a                                 little bit more                                 so thank you so very much for listening                                 to me                                 again my name is andy knight or pandy                                 i'm the automation panda and a bonafide                                 pythonista                                 be sure to read my blog at                                 automationpanda.com                                 and follow me on twitter at                                 automationpanda                                 i'll be taking questions offline either                                 in zulip or you can also tweet at me at                                 automationpanda                                 so thanks so much stay safe out there                                 and enjoy the rest of pycon india                                       [Music]                                 all right awesome talk andy on behalf of                                 pycon india i thank you for the talk                                 for the questions posted over zulip                                 already they have been escorted over to                                 speaker launch as well                                 for any late questions please feel free                                 to catch andy at the speaker launch over                                 zulip                                 and we'll be back with the final keynote                                 for the day in about                                                  bangalore stage                                 stay tuned
YouTube URL: https://www.youtube.com/watch?v=WuVDEcwv9Xk


