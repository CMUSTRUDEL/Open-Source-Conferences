Title: Highlights of Python 3.3 - Nick Coghlan
Publication date: 2013-01-09
Playlist: PyCon India 2012
Description: 
	Highlights of Python 3.3 - http://in.pycon.org/2012/funnel/pyconindia2012/30-highlights-of-python-3-3
Captions: 
	00:00:04,819 --> 00:00:26,910
so 2005 guilty system tonight so the

00:00:24,420 --> 00:00:30,619
distal this is what I find particularly

00:00:26,910 --> 00:00:33,030
interesting about three of three what

00:00:30,619 --> 00:00:34,469
anyone is almost excited about venom a

00:00:33,030 --> 00:00:36,329
Python release is always going to depend

00:00:34,469 --> 00:00:42,420
a great deal specifically what they're

00:00:36,329 --> 00:00:46,440
doing the fighting and so the thought I

00:00:42,420 --> 00:00:50,039
go into a few specific items that will

00:00:46,440 --> 00:00:50,460
affect wanna go in regardless of what

00:00:50,039 --> 00:00:55,140
you do

00:00:50,460 --> 00:00:56,340
my phone and that I find interesting and

00:00:55,140 --> 00:01:00,360
then the rest of the people can just

00:00:56,340 --> 00:01:02,100
basically be going very very quickly

00:01:00,360 --> 00:01:04,519
going through a whole bottle of the

00:01:02,100 --> 00:01:10,590
things that are coming to my from 303

00:01:04,519 --> 00:01:13,440
and basically I won't go too much debt

00:01:10,590 --> 00:01:19,050
for many of them more info what's new 53

00:01:13,440 --> 00:01:21,540
and 33 and also in the docs the release

00:01:19,050 --> 00:01:23,960
itself is due to final release this

00:01:21,540 --> 00:01:30,350
weekend release candidate

00:01:23,960 --> 00:01:33,080
it's apparently and even though there's

00:01:30,350 --> 00:01:34,670
quite a lot of these slides it's still

00:01:33,080 --> 00:01:36,470
more comprehensive even what to new

00:01:34,670 --> 00:01:40,909
comprehensive we occasionally miss

00:01:36,470 --> 00:01:44,060
things so yeah it's worth poking around

00:01:40,909 --> 00:01:46,520
see weapons one of the biggest change is

00:01:44,060 --> 00:01:49,750
coming in five four three dr e is that

00:01:46,520 --> 00:01:51,950
the poetry series is all about unicode

00:01:49,750 --> 00:01:55,130
unicode is the reason why it exists

00:01:51,950 --> 00:01:56,840
which was that the text model that

00:01:55,130 --> 00:01:59,270
passion to has a whole pile of problems

00:01:56,840 --> 00:02:02,450
we couldn't figure out how to fix them

00:01:59,270 --> 00:02:04,550
incrementally and so agreed over cited

00:02:02,450 --> 00:02:07,039
several years ago that it needed to be a

00:02:04,550 --> 00:02:09,970
Python 3 that changed context a lotta

00:02:07,039 --> 00:02:12,230
where the Fox in fact was unicode basis

00:02:09,970 --> 00:02:14,390
and we couldn't figure out how to do

00:02:12,230 --> 00:02:17,239
that in fact it's compatible way and so

00:02:14,390 --> 00:02:20,090
I threw them into existence and we've

00:02:17,239 --> 00:02:21,560
been working continuously throughout

00:02:20,090 --> 00:02:23,959
that time to give people the way to

00:02:21,560 --> 00:02:27,200
migrate from the bathroom to text model

00:02:23,959 --> 00:02:29,550
final three text models with tools like

00:02:27,200 --> 00:02:33,120
two to three and

00:02:29,550 --> 00:02:35,990
systems like that but anyways so three

00:02:33,120 --> 00:02:38,460
up three is the first release that

00:02:35,990 --> 00:02:42,740
doesn't have a corresponding patent to

00:02:38,460 --> 00:02:46,500
feature release so platen 3.0 3.1 ked up

00:02:42,740 --> 00:02:48,150
526 and then five and three to two a lot

00:02:46,500 --> 00:02:51,950
of new features in that also impact on

00:02:48,150 --> 00:02:54,360
27 there is no advice in too late and

00:02:51,950 --> 00:02:57,830
isn't going to be imagined to it at

00:02:54,360 --> 00:03:01,080
least but currently and so basically

00:02:57,830 --> 00:03:02,790
migration partners your own guys in 27

00:03:01,080 --> 00:03:05,880
and what new features that accompanied

00:03:02,790 --> 00:03:08,130
my point eventually make the migration

00:03:05,880 --> 00:03:12,030
Python free and that ecosystem is

00:03:08,130 --> 00:03:16,290
getting richer down Django 1.5 will have

00:03:12,030 --> 00:03:18,480
experimented 93 support pyramid board

00:03:16,290 --> 00:03:21,750
works on Python 3 scifi books and five

00:03:18,480 --> 00:03:23,720
and three so the pieces the pieces are

00:03:21,750 --> 00:03:28,770
coming into play to make five and three

00:03:23,720 --> 00:03:31,560
ecosystem 2 325 21 so anyway so perf

00:03:28,770 --> 00:03:33,959
introductory specifically the biggest

00:03:31,560 --> 00:03:37,170
change in this is the way human hood is

00:03:33,959 --> 00:03:40,110
implemented has been changed and it used

00:03:37,170 --> 00:03:41,880
to be that you could do a narrow

00:03:40,110 --> 00:03:45,090
buildable seat Iceland or with white

00:03:41,880 --> 00:03:47,459
board and C Python if you get in our

00:03:45,090 --> 00:03:49,680
bills then it was 2 bytes per code point

00:03:47,459 --> 00:03:51,690
in your text characters so you say in

00:03:49,680 --> 00:03:53,790
what memory but for most musical is

00:03:51,690 --> 00:03:55,860
working as soon as you encounter the

00:03:53,790 --> 00:03:59,810
character that didn't fit inside to

00:03:55,860 --> 00:04:02,690
Heights and client narrative the blue

00:03:59,810 --> 00:04:05,520
they're lots of bug reports about this

00:04:02,690 --> 00:04:08,810
the white builds you've got communicated

00:04:05,520 --> 00:04:11,580
that work properly trade-off was that

00:04:08,810 --> 00:04:13,980
every single unit going straight every

00:04:11,580 --> 00:04:17,190
single pivot point in every single

00:04:13,980 --> 00:04:19,530
unicode string would take fall four

00:04:17,190 --> 00:04:21,600
bytes memory so everything is four times

00:04:19,530 --> 00:04:24,780
the size not being streaming around four

00:04:21,600 --> 00:04:28,530
times as long there was lots and lots of

00:04:24,780 --> 00:04:30,750
downside to that model and so marvelous

00:04:28,530 --> 00:04:33,389
and several others went through in five

00:04:30,750 --> 00:04:38,400
and three three and what they've entered

00:04:33,389 --> 00:04:40,770
is a version streams that sizes the

00:04:38,400 --> 00:04:42,900
bytes per code point appropriately based

00:04:40,770 --> 00:04:46,110
on the unicode characters that is stored

00:04:42,900 --> 00:04:48,030
in that string and so if its ASCII

00:04:46,110 --> 00:04:50,310
you're asking compatible then and

00:04:48,030 --> 00:04:54,120
underneath one bites only need one byte

00:04:50,310 --> 00:04:56,520
code point if it's Latin one again one

00:04:54,120 --> 00:05:00,960
by trigger point almost everything else

00:04:56,520 --> 00:05:02,639
will fit in the 22 by to prepare point

00:05:00,960 --> 00:05:06,180
and so most strings will come out as two

00:05:02,639 --> 00:05:08,250
bytes per code point but the big

00:05:06,180 --> 00:05:10,320
advantage of the old era builds is that

00:05:08,250 --> 00:05:13,080
if it does come across the stream that

00:05:10,320 --> 00:05:15,630
where that point work it will just that

00:05:13,080 --> 00:05:18,210
particular string it will make bigger so

00:05:15,630 --> 00:05:21,900
you still get the regular memory access

00:05:18,210 --> 00:05:24,030
from the seaside so the capi or still

00:05:21,900 --> 00:05:27,390
has can work with the code point to

00:05:24,030 --> 00:05:31,140
quite easily but the strings adjust

00:05:27,390 --> 00:05:35,400
themselves in size to to better handle

00:05:31,140 --> 00:05:40,100
the data and so what I needed to say

00:05:35,400 --> 00:05:44,870
below memory Martin's measurements on

00:05:40,100 --> 00:05:48,470
django app without the freedom 3 version

00:05:44,870 --> 00:05:50,210
as much memory as 3.2 you also make

00:05:48,470 --> 00:05:52,220
things a lot faster because strings tend

00:05:50,210 --> 00:05:54,290
to get copied quite a bit so if you can

00:05:52,220 --> 00:05:57,290
call over half the size and that's what

00:05:54,290 --> 00:05:59,600
let's start at the bottom and then in

00:05:57,290 --> 00:06:01,340
addition to that way to change a lot of

00:05:59,600 --> 00:06:06,170
work also went into the Codex especially

00:06:01,340 --> 00:06:09,020
utf-8 utf-16 so encoding and decoding I

00:06:06,170 --> 00:06:10,970
think was up to three or four months

00:06:09,020 --> 00:06:15,800
faster and in the specifics of what

00:06:10,970 --> 00:06:18,500
you're doing it so anyway and so I've

00:06:15,800 --> 00:06:21,980
got a little demo that shows a few of

00:06:18,500 --> 00:06:25,480
the few of the tricks in Python 3 and in

00:06:21,980 --> 00:06:35,720
particular the size difference between

00:06:25,480 --> 00:06:38,920
32 and 33 so this is in 32 now hunting

00:06:35,720 --> 00:06:42,290
party 3 series does he views you can put

00:06:38,920 --> 00:06:45,200
use unicode identifiers in your very

00:06:42,290 --> 00:06:46,580
lives so just so depending on the

00:06:45,200 --> 00:06:51,460
audience and come early writing that

00:06:46,580 --> 00:06:55,490
connection quite useful and cool and

00:06:51,460 --> 00:06:57,500
thick to dot 7 has get sized up as well

00:06:55,490 --> 00:07:01,310
and this is something we kind of work

00:06:57,500 --> 00:07:02,870
continuously is trying to try to get

00:07:01,310 --> 00:07:04,220
objects to accurately report how much

00:07:02,870 --> 00:07:11,620
memory they're actually using the

00:07:04,220 --> 00:07:16,120
distant memory and so you can see that

00:07:11,620 --> 00:07:19,889
in three dots of

00:07:16,120 --> 00:07:22,479
to it doesn't actually matter what your

00:07:19,889 --> 00:07:24,280
potty story it's only covered by the

00:07:22,479 --> 00:07:33,790
link for the stream and you get the same

00:07:24,280 --> 00:07:39,070
size whereas if we start the 5 30 3

00:07:33,790 --> 00:07:44,020
which is built well you'll see that even

00:07:39,070 --> 00:07:45,850
the non SQ strings smaller because there

00:07:44,020 --> 00:07:47,340
are big so a lot of that a lot of that

00:07:45,850 --> 00:07:51,520
size there is the basic straight ahead

00:07:47,340 --> 00:07:55,600
full keeping but the data content and

00:07:51,520 --> 00:07:59,380
two months character fitting D and then

00:07:55,600 --> 00:08:01,120
if we go down to the pure st then that

00:07:59,380 --> 00:08:06,940
only one byte per character is smaller

00:08:01,120 --> 00:08:10,750
again so that's not all for the Unicode

00:08:06,940 --> 00:08:14,490
side of things one irritation we found

00:08:10,750 --> 00:08:14,490
with project migraine compassion to

00:08:25,189 --> 00:08:33,479
so anyway the new prefix on unicode

00:08:30,149 --> 00:08:35,399
viduals in python to what it turned out

00:08:33,479 --> 00:08:37,889
is that it felt like people were being

00:08:35,399 --> 00:08:39,240
punished for identifying the Unicode

00:08:37,889 --> 00:08:41,519
properly in pipe and tube because it

00:08:39,240 --> 00:08:44,459
actually made you migration harder if

00:08:41,519 --> 00:08:46,170
you hadn't if you were if you were

00:08:44,459 --> 00:08:49,889
treating everything as if it was asking

00:08:46,170 --> 00:08:52,139
then get it all convert quite easily to

00:08:49,889 --> 00:08:54,089
five and three and one of the particular

00:08:52,139 --> 00:08:57,050
probs with this was with web frameworks

00:08:54,089 --> 00:09:01,079
all started migrating in three up to and

00:08:57,050 --> 00:09:03,930
so we started to get feet more feedback

00:09:01,079 --> 00:09:06,480
from web community and one of the big

00:09:03,930 --> 00:09:09,540
things that became clear was that the

00:09:06,480 --> 00:09:11,279
web frameworks could could handle most

00:09:09,540 --> 00:09:14,100
of the transition on behalf of their

00:09:11,279 --> 00:09:16,440
users but the one thing they really

00:09:14,100 --> 00:09:18,930
couldn't handle is this problem of

00:09:16,440 --> 00:09:22,940
having to strip the you prefix from all

00:09:18,930 --> 00:09:25,290
of your string literals that seems

00:09:22,940 --> 00:09:26,699
really unfair that people were basically

00:09:25,290 --> 00:09:29,370
being punished for doing the right thing

00:09:26,699 --> 00:09:31,560
invite them to do and so in essence

00:09:29,370 --> 00:09:33,269
three and three what we've actually done

00:09:31,560 --> 00:09:35,269
is that that prefix is now permitted

00:09:33,269 --> 00:09:38,040
again it doesn't actually do anything

00:09:35,269 --> 00:09:44,689
you get a perfectly ordinary Python 3

00:09:38,040 --> 00:09:44,689
streaming out of it but it does give you

00:09:45,170 --> 00:09:55,100
it does give you a good it does give you

00:09:50,430 --> 00:09:57,779
a easy of migration part compassion to

00:09:55,100 --> 00:10:01,920
and the fight for modernist tool

00:09:57,779 --> 00:10:03,899
target subset of five in 2003 it has

00:10:01,920 --> 00:10:06,720
supported us if you are only doing three

00:10:03,899 --> 00:10:10,980
luxury plus you can just leave what your

00:10:06,720 --> 00:10:13,170
musicals alone one of the problems we've

00:10:10,980 --> 00:10:16,559
had is some of our hook up stuff for

00:10:13,170 --> 00:10:18,180
unicode bone the official names and so

00:10:16,559 --> 00:10:22,170
if they had multiple names in the you go

00:10:18,180 --> 00:10:25,800
extended we wouldn't hyphen wouldn't

00:10:22,170 --> 00:10:28,529
understand and so that's been fixed k

00:10:25,800 --> 00:10:30,059
scrolls and it's been added the unicode

00:10:28,529 --> 00:10:32,279
database has been updated to the next

00:10:30,059 --> 00:10:34,709
version and when you're working with

00:10:32,279 --> 00:10:37,699
regular expressions you can now embed

00:10:34,709 --> 00:10:44,189
unicode characters by the escape codes

00:10:37,699 --> 00:10:47,639
I've got a couple of examples here so

00:10:44,189 --> 00:10:51,629
yeah so that's a fact them to unicode

00:10:47,639 --> 00:10:57,829
string literal and works again k

00:10:51,629 --> 00:10:57,829
spalding works and some of the

00:10:58,009 --> 00:11:08,699
characters with aliases have you looked

00:11:00,930 --> 00:11:10,709
up and main sequences that basically

00:11:08,699 --> 00:11:12,870
that have long waves that are multiple

00:11:10,709 --> 00:11:16,610
unicode code points can also be looked

00:11:12,870 --> 00:11:19,769
up the reason they can't escape sequence

00:11:16,610 --> 00:11:20,399
is that there's an expectation that

00:11:19,769 --> 00:11:22,990
these

00:11:20,399 --> 00:11:25,300
escape sequences correspondence in the

00:11:22,990 --> 00:11:27,459
third one and that's not true for the

00:11:25,300 --> 00:11:40,709
natives that's actually more points of

00:11:27,459 --> 00:11:42,790
mastery now something that's often

00:11:40,709 --> 00:11:44,050
underestimated as a significant feature

00:11:42,790 --> 00:11:46,089
of a language in the development

00:11:44,050 --> 00:11:47,709
environment is the quality of the error

00:11:46,089 --> 00:11:49,180
according what kind of feedback to keep

00:11:47,709 --> 00:11:51,760
you when you inevitably get things wrong

00:11:49,180 --> 00:11:53,680
and so there's a bunch of changes in

00:11:51,760 --> 00:11:55,779
patterns right on three well by country

00:11:53,680 --> 00:11:57,850
in general and three are three in

00:11:55,779 --> 00:12:04,300
particular which are designed to help

00:11:57,850 --> 00:12:06,339
with that and so one of them relates to

00:12:04,300 --> 00:12:08,079
change exceptions which is personally

00:12:06,339 --> 00:12:10,089
the thing I most miss when i'm working

00:12:08,079 --> 00:12:14,800
in Python 2 3 i'll show you hear about

00:12:10,089 --> 00:12:16,540
how those welcome home veteran Peterson

00:12:14,800 --> 00:12:19,209
did a bunch of work on the error

00:12:16,540 --> 00:12:21,250
reporting when you call a function with

00:12:19,209 --> 00:12:23,889
the wrong arguments in particular for

00:12:21,250 --> 00:12:25,449
beginners this is one where the areas

00:12:23,889 --> 00:12:27,370
you got back in previous versions

00:12:25,449 --> 00:12:31,120
wouldn't necessarily tell you what the

00:12:27,370 --> 00:12:33,670
function was really expected if I'm true

00:12:31,120 --> 00:12:38,110
and throw dental don't work redesigning

00:12:33,670 --> 00:12:40,930
Lee how we report errors from the OS and

00:12:38,110 --> 00:12:44,140
so historically a lot of the information

00:12:40,930 --> 00:12:44,920
about exactly what went wrong was buried

00:12:44,140 --> 00:12:48,670
in the earth

00:12:44,920 --> 00:12:50,980
i 0 errors noise errors and you had

00:12:48,670 --> 00:12:52,630
interrogate that mediator here and we'll

00:12:50,980 --> 00:12:56,110
figure out what actually went wrong and

00:12:52,630 --> 00:12:57,310
decided that in order to do and in the

00:12:56,110 --> 00:12:59,589
other the other big thing is that

00:12:57,310 --> 00:13:01,779
Victor's dinner added module called

00:12:59,589 --> 00:13:03,459
fault answer and what that's mostly

00:13:01,779 --> 00:13:06,160
designers would benefit people working

00:13:03,459 --> 00:13:08,980
with see extensions and C times to try

00:13:06,160 --> 00:13:10,740
and but also working to your bison where

00:13:08,980 --> 00:13:13,089
you're running the risk of deadlocks and

00:13:10,740 --> 00:13:15,970
similar problems where you can get

00:13:13,089 --> 00:13:17,470
better information out now so my

00:13:15,970 --> 00:13:20,310
embedded emulator isn't working with

00:13:17,470 --> 00:13:20,310
this particular demo

00:13:40,660 --> 00:13:47,389
at some examples here at the chain

00:13:44,180 --> 00:13:48,980
exceptions so you can see one of the

00:13:47,389 --> 00:13:51,889
most annoying things that you can do

00:13:48,980 --> 00:13:55,579
with your hand and code is you get a

00:13:51,889 --> 00:13:57,050
bone and instead of forgetting the train

00:13:55,579 --> 00:13:58,720
instead of getting the trace back to the

00:13:57,050 --> 00:14:06,290
pub you discover this bug in your area

00:13:58,720 --> 00:14:09,889
and so so we continue here in fact and

00:14:06,290 --> 00:14:15,350
three dot in five and three you'll

00:14:09,889 --> 00:14:18,949
actually get this nice change exception

00:14:15,350 --> 00:14:21,769
where it tells you a we had this

00:14:18,949 --> 00:14:23,089
exception something went wrong and tells

00:14:21,769 --> 00:14:26,929
you what actual broke in the first place

00:14:23,089 --> 00:14:28,730
but then it also tells you and Gary and

00:14:26,929 --> 00:14:31,569
this is the thing I most miss when I

00:14:28,730 --> 00:14:35,269
work in Python too because the vital to

00:14:31,569 --> 00:14:38,629
go on and go to get this and you have

00:14:35,269 --> 00:14:40,790
you be going there but what actually and

00:14:38,629 --> 00:14:43,189
if it's a model for reproduction system

00:14:40,790 --> 00:14:45,230
than you like going well we can fix the

00:14:43,189 --> 00:14:51,639
area of the who knows if we're going to

00:14:45,230 --> 00:14:55,730
see that production about again and so

00:14:51,639 --> 00:14:58,189
but anyway so that's useful as the

00:14:55,730 --> 00:15:00,199
default behavior but occasionally doing

00:14:58,189 --> 00:15:00,980
stuff where your max will deliberately

00:15:00,199 --> 00:15:11,510
replacing

00:15:00,980 --> 00:15:14,870
differently and so in these cases look

00:15:11,510 --> 00:15:18,500
no I'm getting here I'm movie since I'm

00:15:14,870 --> 00:15:19,970
get out of USA and you know that you've

00:15:18,500 --> 00:15:23,050
got all the information you need and

00:15:19,970 --> 00:15:28,850
translated it to be to the new exception

00:15:23,050 --> 00:15:32,000
and so what time through there to do and

00:15:28,850 --> 00:15:33,170
so at the moment doing end users are

00:15:32,000 --> 00:15:35,510
going to see this in total

00:15:33,170 --> 00:15:39,620
implementation detail that really a

00:15:35,510 --> 00:15:47,240
problem when really wanna see dis and so

00:15:39,620 --> 00:15:51,230
the house interior to do is fill in this

00:15:47,240 --> 00:15:54,440
vantage index here cuz they never really

00:15:51,230 --> 00:15:57,440
I know what I'm deliberately placing

00:15:54,440 --> 00:16:02,540
this exceptional different one dozens

00:15:57,440 --> 00:16:04,639
play context and so in this case again

00:16:02,540 --> 00:16:07,420
Queen reflects a chemically there are

00:16:04,639 --> 00:16:10,010
any indication developer here play

00:16:07,420 --> 00:16:12,680
something heavier and eminent probably

00:16:10,010 --> 00:16:15,079
should've is we've deliberately

00:16:12,680 --> 00:16:17,660
designers in such a way that that change

00:16:15,079 --> 00:16:21,230
respecting phone is still there on the

00:16:17,660 --> 00:16:22,639
exception object so if you have this way

00:16:21,230 --> 00:16:25,550
routine that you want to display

00:16:22,639 --> 00:16:27,190
everything and you want to capture the

00:16:25,550 --> 00:16:30,840
context even though we've got replaced

00:16:27,190 --> 00:16:35,220
you can it's there a double underscore

00:16:30,840 --> 00:16:38,220
a tribute so this is only displeasing to

00:16:35,220 --> 00:16:41,610
say suppress the context when in the

00:16:38,220 --> 00:16:45,630
default display deeply and that it

00:16:41,610 --> 00:16:47,430
basically lets vibrant authors do except

00:16:45,630 --> 00:16:52,160
in substitution making just to change

00:16:47,430 --> 00:16:52,160
the tire and copy all the information

00:16:53,690 --> 00:17:01,350
moving on some of the other rewarding

00:16:56,340 --> 00:17:04,640
improvements so this is Benjamin's work

00:17:01,350 --> 00:17:04,640
on finding

00:17:24,339 --> 00:17:36,120
for people's intimate so here alignments

00:17:36,809 --> 00:17:45,940
if we want to see in essence of your

00:17:40,450 --> 00:17:52,090
team of obeah so you basically say this

00:17:45,940 --> 00:17:54,960
is a required item button / made my

00:17:52,090 --> 00:18:07,080
position is really useful in my favor

00:17:54,960 --> 00:18:12,190
and basically a likeness Zoe way so now

00:18:07,080 --> 00:18:17,370
if you call that if you pull that it

00:18:12,190 --> 00:18:23,610
does use the students enactments lady

00:18:17,370 --> 00:18:25,929
and tell the bees missing does latency

00:18:23,610 --> 00:18:29,820
tells you to keep it on yahoo just

00:18:25,929 --> 00:18:36,240
amusing and then finally both are they

00:18:29,820 --> 00:18:38,559
in diretta it's again it's a that's it

00:18:36,240 --> 00:18:39,970
sounded cases for both people learning

00:18:38,559 --> 00:18:42,510
passion in the first place to find

00:18:39,970 --> 00:18:45,170
you've been a better learning curve of

00:18:42,510 --> 00:18:47,810
having an interpreted little bit of John

00:18:45,170 --> 00:18:50,450
helping them understand what they need

00:18:47,810 --> 00:18:52,220
to fix to get something working but also

00:18:50,450 --> 00:18:54,860
it gives you better error messages when

00:18:52,220 --> 00:18:59,300
you just make a genuine both and can

00:18:54,860 --> 00:19:01,670
hopefully more easily for somebody there

00:18:59,300 --> 00:19:06,890
are some of the examples of the

00:19:01,670 --> 00:19:09,650
operating system projectors so almost

00:19:06,890 --> 00:19:12,470
everything in previous versions of

00:19:09,650 --> 00:19:14,600
Python the operating system areas were

00:19:12,470 --> 00:19:17,980
basically organizing a hierarchy based

00:19:14,600 --> 00:19:20,300
on which modules reported the problem

00:19:17,980 --> 00:19:22,730
when you're catching military's you

00:19:20,300 --> 00:19:24,800
don't care which module reporting the

00:19:22,730 --> 00:19:28,640
problem you actually care about what's

00:19:24,800 --> 00:19:32,900
wrong and so what the pattern 303

00:19:28,640 --> 00:19:36,730
hierarchy does is all those other errors

00:19:32,900 --> 00:19:41,260
likes of the error and mental error and

00:19:36,730 --> 00:19:43,880
I wear OS error they're all still there

00:19:41,260 --> 00:19:48,890
but the rule just aliases for the base

00:19:43,880 --> 00:19:53,180
OS arrogance and so what we have instead

00:19:48,890 --> 00:19:56,270
is a hierarchy and based on things than

00:19:53,180 --> 00:19:58,760
then actually gone wrong so instead of

00:19:56,270 --> 00:20:01,580
getting in this case instead of getting

00:19:58,760 --> 00:20:07,850
less air and you have to do

00:20:01,580 --> 00:20:10,610
find out that it's broken you get on the

00:20:07,850 --> 00:20:16,490
ferry say in front file so you can

00:20:10,610 --> 00:20:19,640
actually catch that directly we say go

00:20:16,490 --> 00:20:22,360
for something that does exist then we'll

00:20:19,640 --> 00:20:25,280
get a different so this is still

00:20:22,360 --> 00:20:26,780
noticeable still catch it but with it

00:20:25,280 --> 00:20:30,200
again if you now actually catch non

00:20:26,780 --> 00:20:36,080
directly and it's separated at the class

00:20:30,200 --> 00:20:38,990
level and then if we try to do something

00:20:36,080 --> 00:20:41,540
different in that directory then we'll

00:20:38,990 --> 00:20:42,800
get a different section saying well then

00:20:41,540 --> 00:20:45,740
we can't do that because of already

00:20:42,800 --> 00:20:49,370
exists and so that's just a few little

00:20:45,740 --> 00:20:51,500
examples again what's more on what's new

00:20:49,370 --> 00:20:55,040
about exactly what changed and how it

00:20:51,500 --> 00:20:56,840
all works but we're hoping that over

00:20:55,040 --> 00:21:00,640
time this will make it a lot easier for

00:20:56,840 --> 00:21:03,020
people to write correct OS handling code

00:21:00,640 --> 00:21:05,630
because it is very very common for

00:21:03,020 --> 00:21:08,870
people to catch all this era and assume

00:21:05,630 --> 00:21:11,060
they know what's wrong and so it made

00:21:08,870 --> 00:21:14,360
emissions by omission or farther than

00:21:11,060 --> 00:21:16,130
exists or various other problems and so

00:21:14,360 --> 00:21:18,740
by taking that step of having to check

00:21:16,130 --> 00:21:20,120
bono is a separate step away we're

00:21:18,740 --> 00:21:23,570
hoping that over time this will make it

00:21:20,120 --> 00:21:29,270
what easier right I don't know that

00:21:23,570 --> 00:21:31,550
interfaces with the OS correctly so then

00:21:29,270 --> 00:21:36,680
this one tried my particularly

00:21:31,550 --> 00:21:42,440
interesting and is something that gets

00:21:36,680 --> 00:21:45,320
quite deep into what what's messing

00:21:42,440 --> 00:21:48,940
around and sea level that you do so what

00:21:45,320 --> 00:21:48,940
I'm going again is unsafe

00:21:49,450 --> 00:21:54,489
fault handler offers a bunch of options

00:21:51,769 --> 00:21:56,869
so the simplest is for pamphlet on Mabel

00:21:54,489 --> 00:22:04,369
and what that'll do is if you get a set

00:21:56,869 --> 00:22:07,700
for then you will printed it will try to

00:22:04,369 --> 00:22:10,249
print a trace back now you just a second

00:22:07,700 --> 00:22:14,029
so your process is a very strange state

00:22:10,249 --> 00:22:15,889
so it's limited in what it can do but it

00:22:14,029 --> 00:22:18,590
does its very best to try and print a

00:22:15,889 --> 00:22:21,019
usable trace back so you get some idea

00:22:18,590 --> 00:22:23,389
of what was happening when it when it

00:22:21,019 --> 00:22:24,950
crashed I was going to do a demo of that

00:22:23,389 --> 00:22:29,269
point cooking figure is where they might

00:22:24,950 --> 00:22:31,879
have crashed so and so it would be

00:22:29,269 --> 00:22:34,820
social instead and so not trace back

00:22:31,879 --> 00:22:36,919
later it is a really useful trick and

00:22:34,820 --> 00:22:39,169
this is one of the articles of modules

00:22:36,919 --> 00:22:41,529
we had some tests on the platen do plots

00:22:39,169 --> 00:22:45,409
that were hanging and we didn't know why

00:22:41,529 --> 00:22:48,229
and so Victor wrote this primarily debug

00:22:45,409 --> 00:22:52,759
those problems and so what this

00:22:48,229 --> 00:22:55,009
particular function what you do is that

00:22:52,759 --> 00:22:57,259
first argument is to say right after 10

00:22:55,009 --> 00:23:00,729
seconds I want me to dump all the trace

00:22:57,259 --> 00:23:03,379
bags of all threads currently fighting

00:23:00,729 --> 00:23:06,429
and then the individual strip is saying

00:23:03,379 --> 00:23:08,599
and then I working till the process

00:23:06,429 --> 00:23:11,239
there's another argument to this which

00:23:08,599 --> 00:23:15,979
is called repeat and what it will do is

00:23:11,239 --> 00:23:20,629
it will stay in 3 10 seconds until this

00:23:15,979 --> 00:23:26,179
gets cancelled don't the trace bags and

00:23:20,629 --> 00:23:27,530
so so the temple the end we'll we'll set

00:23:26,179 --> 00:23:30,080
that up

00:23:27,530 --> 00:23:35,720
thing that we know is gonna that we know

00:23:30,080 --> 00:23:37,370
is going to okay and so glad a month

00:23:35,720 --> 00:23:41,960
right started in frontier to try to join

00:23:37,370 --> 00:23:44,030
it and we'll make that second thread try

00:23:41,960 --> 00:23:46,490
to join the first round so those two

00:23:44,030 --> 00:23:48,770
isn't that's never going to work so

00:23:46,490 --> 00:23:56,300
we'll start first one and trying to join

00:23:48,770 --> 00:24:00,620
it and basically eventually don't kill

00:23:56,300 --> 00:24:05,200
their process and so you'll find but

00:24:00,620 --> 00:24:07,760
what that's actually no doubt for us is

00:24:05,200 --> 00:24:11,150
because there were three protected means

00:24:07,760 --> 00:24:14,360
to plus the original main thread fault

00:24:11,150 --> 00:24:20,480
handler to dump data trace for all three

00:24:14,360 --> 00:24:21,650
threads too so we had some hope of

00:24:20,480 --> 00:24:26,000
trying to figure out what the heck is

00:24:21,650 --> 00:24:28,850
going on and again so messing around the

00:24:26,000 --> 00:24:31,280
bay c code or alternate code or that

00:24:28,850 --> 00:24:37,060
whole thing that should be very very

00:24:31,280 --> 00:24:37,060
missable debugging code that seems that

00:24:45,639 --> 00:24:53,079
so see ya so it's nice error reporting

00:24:49,299 --> 00:24:55,719
stuff which I think will just make a lot

00:24:53,079 --> 00:24:59,679
of debugging country a lot easier it's

00:24:55,719 --> 00:25:01,209
been in previous versions so this is

00:24:59,679 --> 00:25:03,579
what I personally specify to be the time

00:25:01,209 --> 00:25:07,239
on bread cannon the dragon this for

00:25:03,579 --> 00:25:09,849
years input sister the input system has

00:25:07,239 --> 00:25:11,739
long been one of patents dark box it

00:25:09,849 --> 00:25:15,009
hasn't been it hasn't been defined in

00:25:11,739 --> 00:25:18,999
language reference the actual current

00:25:15,009 --> 00:25:22,119
behavior is a link mix of legacy see

00:25:18,999 --> 00:25:24,399
piping from the facial details nobody

00:25:22,119 --> 00:25:29,289
except we don't want stood and we don't

00:25:24,399 --> 00:25:31,359
really understood them pet 302 who tried

00:25:29,289 --> 00:25:34,149
to promote it than that is about ten

00:25:31,359 --> 00:25:38,979
years ago but then who never finished

00:25:34,149 --> 00:25:40,749
implementing it so most so Supreme Court

00:25:38,979 --> 00:25:43,899
in the standard library work on cap 302

00:25:40,749 --> 00:25:45,190
but the poor import system itself so

00:25:43,899 --> 00:25:46,899
what will stuff that the fastest team

00:25:45,190 --> 00:25:49,359
imports and packages and electric and

00:25:46,899 --> 00:25:51,820
built-ins that is what still the legacy

00:25:49,359 --> 00:25:52,959
system so none of us wanted to come to

00:25:51,820 --> 00:25:57,039
minute properly because we have been

00:25:52,959 --> 00:25:59,859
looking at that mess but so what create

00:25:57,039 --> 00:26:02,109
was he sat down several years ago and

00:25:59,859 --> 00:26:03,879
working for dinner and what important

00:26:02,109 --> 00:26:07,450
was basically reimplantation the entire

00:26:03,879 --> 00:26:09,190
employed system in Python and what we

00:26:07,450 --> 00:26:09,789
figured out what Brett figured out how

00:26:09,190 --> 00:26:13,979
to do this

00:26:09,789 --> 00:26:16,769
time is how to take that Tyson

00:26:13,979 --> 00:26:18,729
implementation of a big wad live and

00:26:16,769 --> 00:26:20,729
bootstrap it into the suppression

00:26:18,729 --> 00:26:23,830
interpreter as the real default

00:26:20,729 --> 00:26:28,269
implementation now a challenging got

00:26:23,830 --> 00:26:31,450
here is how do you import a package for

00:26:28,269 --> 00:26:34,299
it entitled when that package is this

00:26:31,450 --> 00:26:36,609
month unless you liberals and so what

00:26:34,299 --> 00:26:37,989
Brett figured out is playful survivors

00:26:36,609 --> 00:26:39,879
not have the idea of frozen modules

00:26:37,989 --> 00:26:44,440
which is you basically fight compiler

00:26:39,879 --> 00:26:47,200
and then store that load that barbeque

00:26:44,440 --> 00:26:49,299
poutine or application ETO executable

00:26:47,200 --> 00:26:51,720
and that's exactly what we now do with

00:26:49,299 --> 00:26:54,429
one small part of in four different and

00:26:51,720 --> 00:26:58,450
that part of England is enough to let it

00:26:54,429 --> 00:27:01,809
blow the rest of it and one of the

00:26:58,450 --> 00:27:05,019
consequences of this is that we've now

00:27:01,809 --> 00:27:06,849
gone through and the private important

00:27:05,019 --> 00:27:09,190
mechanisms now actually defined my

00:27:06,849 --> 00:27:12,669
language reference it's not defined in

00:27:09,190 --> 00:27:14,320
half a dozen caps on five involved there

00:27:12,669 --> 00:27:16,119
is actually a section in the language

00:27:14,320 --> 00:27:19,479
reference that says this is how vitally

00:27:16,119 --> 00:27:22,539
important river and and here's the

00:27:19,479 --> 00:27:26,259
package that implements a foot and so

00:27:22,539 --> 00:27:27,879
the event of this is that it should it

00:27:26,259 --> 00:27:30,789
gets rid of a whole bunch of quirks and

00:27:27,879 --> 00:27:32,559
fasten nc5 Trentonian wat system but

00:27:30,789 --> 00:27:36,090
over time which will also reduce the

00:27:32,559 --> 00:27:39,849
effort for other implementations like

00:27:36,090 --> 00:27:41,499
Jekyll and Hyde bidelman pipe and so

00:27:39,849 --> 00:27:44,049
forth which is that as we add new

00:27:41,499 --> 00:27:46,929
features to imports they shouldn't have

00:27:44,049 --> 00:27:48,429
to reimplement them anymore because one

00:27:46,929 --> 00:27:50,230
of the big one of the other changes it's

00:27:48,429 --> 00:27:54,910
been made in this version

00:27:50,230 --> 00:27:57,880
there's now is downloading set of

00:27:54,910 --> 00:28:00,730
attributes in in the support system

00:27:57,880 --> 00:28:05,049
implementation and what it is is it

00:28:00,730 --> 00:28:07,950
allows us to take the parts of mortals

00:28:05,049 --> 00:28:10,270
like input which they have a few

00:28:07,950 --> 00:28:12,450
implementation specific details but they

00:28:10,270 --> 00:28:15,910
always otherwise almost completely

00:28:12,450 --> 00:28:20,580
identical and so what this system

00:28:15,910 --> 00:28:20,580
implementation allows is that the

00:28:20,730 --> 00:28:26,020
interpreter implementers can set a few

00:28:23,620 --> 00:28:29,169
attributes in there which will tweak the

00:28:26,020 --> 00:28:30,880
way input live works in slow resonance

00:28:29,169 --> 00:28:34,330
not all implementations have the idea of

00:28:30,880 --> 00:28:37,179
binary files and so they're setting they

00:28:34,330 --> 00:28:40,210
can use to say no it don't don't

00:28:37,179 --> 00:28:42,280
generate by profiles that same setting

00:28:40,210 --> 00:28:45,070
can also be used to control how the

00:28:42,280 --> 00:28:48,130
vital part of generating one of the

00:28:45,070 --> 00:28:50,110
changes we've made in Python 3 is that

00:28:48,130 --> 00:28:53,110
vacation mechanism for by profiles is

00:28:50,110 --> 00:28:56,110
different so historically it just

00:28:53,110 --> 00:29:01,480
generated p YC bar next to the source

00:28:56,110 --> 00:29:03,309
file starting in Titan 320 think there's

00:29:01,480 --> 00:29:05,559
actually instead of doing that we

00:29:03,309 --> 00:29:10,450
actually generate a directory or double

00:29:05,559 --> 00:29:11,770
underscore pi catch and all the bike

00:29:10,450 --> 00:29:15,690
profiles that are automatically

00:29:11,770 --> 00:29:18,130
generally go in that case directly and

00:29:15,690 --> 00:29:19,990
the interesting thing we do with them is

00:29:18,130 --> 00:29:23,950
the way those and paste files are named

00:29:19,990 --> 00:29:25,690
is scoped by the implementation and so

00:29:23,950 --> 00:29:27,220
you can have the same thing we have the

00:29:25,690 --> 00:29:30,300
same cache directory and it may contain

00:29:27,220 --> 00:29:33,570
a Python 3 16 file that may contain

00:29:30,300 --> 00:29:36,450
30 to 50 sorry we kept inviting to tell

00:29:33,570 --> 00:29:40,320
because I detective might never make it

00:29:36,450 --> 00:29:45,990
in Python 3 about 25 30 35 it may

00:29:40,320 --> 00:29:51,210
contain a pipe i generated file so yeah

00:29:45,990 --> 00:29:53,400
so it lets you do a bunch of particular

00:29:51,210 --> 00:29:55,170
two different things and so it's see if

00:29:53,400 --> 00:29:57,990
I can itself we use have a bunch of the

00:29:55,170 --> 00:30:00,990
quirks particularly related to package

00:29:57,990 --> 00:30:02,610
util and input are not accorded run

00:30:00,990 --> 00:30:09,090
behind the stuff the power minus n

00:30:02,610 --> 00:30:10,620
switch and so it would dedication link

00:30:09,090 --> 00:30:11,910
working differences between the way they

00:30:10,620 --> 00:30:13,800
worked and where the actual import

00:30:11,910 --> 00:30:17,790
system work was that a different set of

00:30:13,800 --> 00:30:19,500
code we're now until very abruptly when

00:30:17,790 --> 00:30:24,030
it's working that will be going to the

00:30:19,500 --> 00:30:27,110
same point i'm not saying old mexico and

00:30:24,030 --> 00:30:31,260
then the other big change another change

00:30:27,110 --> 00:30:34,500
that is kind of behind the scenes but

00:30:31,260 --> 00:30:38,790
will should reduce weakness historically

00:30:34,500 --> 00:30:40,620
there's been a single import log that is

00:30:38,790 --> 00:30:42,000
used to protect all import operation so

00:30:40,620 --> 00:30:44,700
you don't try and put the same ultra

00:30:42,000 --> 00:30:49,620
price dunno secular fantasies and

00:30:44,700 --> 00:30:51,920
similar issues oh so if sorry if two

00:30:49,620 --> 00:30:55,550
threads try to report the same mortal

00:30:51,920 --> 00:30:56,960
time one of them will go first and then

00:30:55,550 --> 00:30:58,310
the second one will just get the case

00:30:56,960 --> 00:31:01,370
version of the one the first is very

00:30:58,310 --> 00:31:02,720
important and we could answer the

00:31:01,370 --> 00:31:07,940
problem with that is open could get

00:31:02,720 --> 00:31:10,310
issues where you get devils and things

00:31:07,940 --> 00:31:12,980
that couldn't funny pointer so 10 times

00:31:10,310 --> 00:31:15,200
we went through and basically changed

00:31:12,980 --> 00:31:18,500
the way that work so that they still

00:31:15,200 --> 00:31:21,290
globe still an importer but it only

00:31:18,500 --> 00:31:23,650
takes some of the key data structures

00:31:21,290 --> 00:31:27,980
the actual execution of the module code

00:31:23,650 --> 00:31:29,510
has a separate lot for each one so if

00:31:27,980 --> 00:31:32,270
two threads try to impor different

00:31:29,510 --> 00:31:33,860
modules that can happen in parallel but

00:31:32,270 --> 00:31:35,870
if they try to import the same ones

00:31:33,860 --> 00:31:38,600
although still the second one was too

00:31:35,870 --> 00:31:40,010
late to the physical education and so

00:31:38,600 --> 00:31:42,020
that should get rid of a bunch of

00:31:40,010 --> 00:31:50,480
weirdness related to your imports and

00:31:42,020 --> 00:31:54,080
floral multi threat however one that I

00:31:50,480 --> 00:31:58,100
think of all the changes introductory

00:31:54,080 --> 00:32:04,190
this one probably has some of the

00:31:58,100 --> 00:32:07,010
greatest long-term implications i did i

00:32:04,190 --> 00:32:08,420
do ultimately support this but it's

00:32:07,010 --> 00:32:11,990
going to be interesting to see how it

00:32:08,420 --> 00:32:12,850
plays out basically an interplan files

00:32:11,990 --> 00:32:16,030
and packages

00:32:12,850 --> 00:32:21,760
you don't have to mr. just create a

00:32:16,030 --> 00:32:25,600
directory if i prevaricated and so that

00:32:21,760 --> 00:32:27,640
its own movement uninteresting the thing

00:32:25,600 --> 00:32:31,300
that particular machine is you leave it

00:32:27,640 --> 00:32:34,270
out then your package can then actually

00:32:31,300 --> 00:32:37,480
contain modules from multiple different

00:32:34,270 --> 00:32:39,340
directories so far is actually people

00:32:37,480 --> 00:32:45,070
actually come up with the time ways of

00:32:39,340 --> 00:32:48,100
doing this by putting the package due to

00:32:45,070 --> 00:32:52,930
lack of resources code in their net x

00:32:48,100 --> 00:32:55,000
files but China does this but it's but

00:32:52,930 --> 00:32:57,070
I'm petted and requires agreement from

00:32:55,000 --> 00:33:00,040
everybody sharing namespaces outside

00:32:57,070 --> 00:33:02,110
work and so because we get to control

00:33:00,040 --> 00:33:05,380
the way people just works we were able

00:33:02,110 --> 00:33:13,670
to do much cleaner much cleaner system

00:33:05,380 --> 00:33:20,450
that allowed the full import system to

00:33:13,670 --> 00:33:22,240
today's and so how's work so we'll

00:33:20,450 --> 00:33:25,550
create ourselves package very tricky

00:33:22,240 --> 00:33:30,550
will grant a bill module to go to

00:33:25,550 --> 00:33:33,110
package notice I'm not created by far so

00:33:30,550 --> 00:33:36,610
and make another part through our

00:33:33,110 --> 00:33:40,210
package but it doesn't move it in there

00:33:36,610 --> 00:33:44,320
so so that's when you start this up

00:33:40,210 --> 00:33:44,320
current directory or beyond system

00:33:44,620 --> 00:33:48,770
current directory abilities for part so

00:33:47,420 --> 00:33:52,790
you can just import that part airplane

00:33:48,770 --> 00:33:55,190
and go we've got the module from the

00:33:52,790 --> 00:33:57,140
first part now let's transport second

00:33:55,190 --> 00:33:59,240
time because he doesn't kind of work

00:33:57,140 --> 00:34:05,780
because that directory to other sister

00:33:59,240 --> 00:34:08,450
path so we will add it and try to bend

00:34:05,780 --> 00:34:13,130
the import from package again and now

00:34:08,450 --> 00:34:16,520
it's founded and that's the part of

00:34:13,130 --> 00:34:19,730
setting so basically so if donate drop

00:34:16,520 --> 00:34:22,000
our files and you can add you have

00:34:19,730 --> 00:34:24,410
portions of a package scattered across a

00:34:22,000 --> 00:34:25,760
multiple directories this is a way a lot

00:34:24,410 --> 00:34:28,880
of other languages have done it for a

00:34:25,760 --> 00:34:31,130
long time so it's not new it's not ready

00:34:28,880 --> 00:34:33,350
for than a low the sets but it's a

00:34:31,130 --> 00:34:40,460
pretty big ship items everything set up

00:34:33,350 --> 00:34:44,040
so so yeah so that that will actually

00:34:40,460 --> 00:34:46,530
match a lot more people's intuitions and

00:34:44,040 --> 00:34:49,710
makes certain kinds of shared namespaces

00:34:46,530 --> 00:34:52,290
a lot easier to manage in terms of one

00:34:49,710 --> 00:34:54,450
of the big reasons why is made it into

00:34:52,290 --> 00:34:58,410
the standard into the standard in port

00:34:54,450 --> 00:35:00,500
system we haven't done it yet but it's

00:34:58,410 --> 00:35:05,130
very very likely than a three dot for

00:35:00,500 --> 00:35:09,810
the Codex package will take the encoding

00:35:05,130 --> 00:35:11,640
package will become a nature's so that

00:35:09,810 --> 00:35:14,130
people will be able to contribute their

00:35:11,640 --> 00:35:17,850
own and coatings from site a collegiate

00:35:14,130 --> 00:35:20,570
little low the other big advantage of

00:35:17,850 --> 00:35:25,650
losing the ended up profiles is it plays

00:35:20,570 --> 00:35:27,510
far more nicely with system then it's

00:35:25,650 --> 00:35:30,600
digital packaging systems like RPM

00:35:27,510 --> 00:35:32,430
debian heaven which they really don't

00:35:30,600 --> 00:35:35,160
like multiple packages providing the

00:35:32,430 --> 00:35:37,680
same to file but i am quite happy for

00:35:35,160 --> 00:35:41,370
multiple packages to share director and

00:35:37,680 --> 00:35:46,410
so that's that's one of the big

00:35:41,370 --> 00:35:49,800
advantages of this system so the slice

00:35:46,410 --> 00:35:53,280
the demo soak up so will mostly just be

00:35:49,800 --> 00:35:55,800
doing quick overuse now lots more detail

00:35:53,280 --> 00:35:58,380
in he wants you and in the open three up

00:35:55,800 --> 00:36:01,650
three documentation which is currently

00:35:58,380 --> 00:36:05,390
up on the dev version of finding three

00:36:01,650 --> 00:36:10,550
but to be switching over to the

00:36:05,390 --> 00:36:14,690
okay directory any day now so anyone

00:36:10,550 --> 00:36:17,600
here is virtually quite a few very

00:36:14,690 --> 00:36:19,010
useful for keeping your application

00:36:17,600 --> 00:36:22,010
dependencies isolated from each other

00:36:19,010 --> 00:36:24,470
and for keeping the stuff you're working

00:36:22,010 --> 00:36:27,220
on particular for the legs distro which

00:36:24,470 --> 00:36:29,240
uses a lot of system platform tools

00:36:27,220 --> 00:36:30,890
virtual members also just will keep

00:36:29,240 --> 00:36:35,690
keeping your stuff away from your system

00:36:30,890 --> 00:36:38,630
stuff and so virtual and has become

00:36:35,690 --> 00:36:43,280
incredibly popular various reasons they

00:36:38,630 --> 00:36:44,990
had to do a few other little tax to get

00:36:43,280 --> 00:36:47,330
around the fact that the interpreter

00:36:44,990 --> 00:36:52,490
itself doesn't understand anything about

00:36:47,330 --> 00:36:53,930
virtual environment and so what what the

00:36:52,490 --> 00:36:57,800
integrated virtual environment feature

00:36:53,930 --> 00:36:59,690
is basically the name is to provide

00:36:57,800 --> 00:37:02,030
almost exactly the same user experience

00:36:59,690 --> 00:37:04,460
of virtual end but use the fact that we

00:37:02,030 --> 00:37:09,680
get to modify the language definition to

00:37:04,460 --> 00:37:11,780
make it a bit cleaner and so positive

00:37:09,680 --> 00:37:15,020
territory will ship with the avian flu

00:37:11,780 --> 00:37:17,090
marked as one of the binaries and

00:37:15,020 --> 00:37:19,610
installs of what at scripps it installs

00:37:17,090 --> 00:37:23,150
and the BN module becomes pattern

00:37:19,610 --> 00:37:27,770
standard library the big difference

00:37:23,150 --> 00:37:29,120
between the end and virtual end is i

00:37:27,770 --> 00:37:30,390
don't remember off the top of my head

00:37:29,120 --> 00:37:33,420
how they deliver

00:37:30,390 --> 00:37:35,010
directories but waving and does it is

00:37:33,420 --> 00:37:37,500
you actually can provide a config file

00:37:35,010 --> 00:37:39,720
for the virtual link and when it's

00:37:37,500 --> 00:37:41,490
looking for the standard library if it

00:37:39,720 --> 00:37:44,250
sees one of these oakley files and I've

00:37:41,490 --> 00:37:47,819
got our virtual environment and adjust

00:37:44,250 --> 00:37:49,680
the settings accordingly and that policy

00:37:47,819 --> 00:37:52,279
file basically most week a bunch of

00:37:49,680 --> 00:37:55,650
things about the our virtual networks

00:37:52,279 --> 00:37:58,710
the only required key is that you have

00:37:55,650 --> 00:38:01,619
to specify our own private geez which

00:37:58,710 --> 00:38:05,309
version of Python it's going to run to

00:38:01,619 --> 00:38:07,400
actually execute your code but from a

00:38:05,309 --> 00:38:10,260
user point of view it basically ph level

00:38:07,400 --> 00:38:14,640
so anything like the visual image should

00:38:10,260 --> 00:38:17,279
work at the end and a bunch of the if

00:38:14,640 --> 00:38:20,400
anyone be special and rapper I think

00:38:17,279 --> 00:38:22,940
we're shipping a bunch of similar shell

00:38:20,400 --> 00:38:28,140
scripts that virtual umbrella provides

00:38:22,940 --> 00:38:37,230
I've made either way the mission of xmas

00:38:28,140 --> 00:38:42,150
tree hey okay so there's a lot of goat

00:38:37,230 --> 00:38:45,920
very very quick so testing if anybody is

00:38:42,150 --> 00:38:49,700
the bot framework from by the islets

00:38:45,920 --> 00:38:53,260
you noticed Mark a bunch of the messages

00:38:49,700 --> 00:38:57,500
are virtually context manages except

00:38:53,260 --> 00:38:59,960
except a messenger and now introspection

00:38:57,500 --> 00:39:01,790
one of the things I'm especially fond of

00:38:59,960 --> 00:39:03,680
is trying to demystify some of the more

00:39:01,790 --> 00:39:05,569
complex parts of my phone they're not

00:39:03,680 --> 00:39:08,960
inherently complicated it's just that

00:39:05,569 --> 00:39:14,440
nobody's ever taken the time to put to

00:39:08,960 --> 00:39:19,099
put clean interfaces on the front so

00:39:14,440 --> 00:39:21,200
inspector signature is basically a cross

00:39:19,099 --> 00:39:23,809
implementation way of finding out

00:39:21,200 --> 00:39:26,059
information about a signature for so it

00:39:23,809 --> 00:39:29,359
can handle ordinary functions and

00:39:26,059 --> 00:39:33,290
generators and all methods and handle

00:39:29,359 --> 00:39:35,150
parcels all sorts of things and I will

00:39:33,290 --> 00:39:37,549
basically give you back a nice object

00:39:35,150 --> 00:39:40,160
that can be introspective you can use it

00:39:37,549 --> 00:39:41,780
to do pre binding the parameters to

00:39:40,160 --> 00:39:43,640
check will these arguments ever work

00:39:41,780 --> 00:39:45,770
which can be useful for delayed

00:39:43,640 --> 00:39:49,339
pullbacks you can check the parameters

00:39:45,770 --> 00:39:51,190
before you delay and then couple of

00:39:49,339 --> 00:39:53,599
others one of the complaints we've got

00:39:51,190 --> 00:39:55,160
we've started using closures for a few

00:39:53,599 --> 00:39:57,230
things where we don't want to expose a

00:39:55,160 --> 00:39:58,609
sub possible interface we just want to

00:39:57,230 --> 00:40:02,809
say no no no this really is just

00:39:58,609 --> 00:40:04,099
affordable don't try to subclass it one

00:40:02,809 --> 00:40:07,010
of the complaint to get about that is

00:40:04,099 --> 00:40:08,420
there not as festival because you can't

00:40:07,010 --> 00:40:08,960
put when you're doing the test account

00:40:08,420 --> 00:40:14,660
program

00:40:08,960 --> 00:40:16,460
the internal state and so basically the

00:40:14,660 --> 00:40:18,320
closure bars and get generated state

00:40:16,460 --> 00:40:20,630
their basic example the information to

00:40:18,320 --> 00:40:22,700
do that kind of testing its then and

00:40:20,630 --> 00:40:24,950
these just provide an official way to

00:40:22,700 --> 00:40:27,460
get that info out and say look we can

00:40:24,950 --> 00:40:29,570
still do your introspection your testing

00:40:27,460 --> 00:40:34,130
even though using the closure rather

00:40:29,570 --> 00:40:38,690
than the class pizza it changes every

00:40:34,130 --> 00:40:40,369
data structures so bison burger e-except

00:40:38,690 --> 00:40:42,020
integers where they should collection

00:40:40,369 --> 00:40:44,210
such hand that in school you can set up

00:40:42,020 --> 00:40:45,349
a bunch of mappings in a chain and if it

00:40:44,210 --> 00:40:46,609
doesn't find it in the first point of

00:40:45,349 --> 00:40:50,630
the fall back to the second one and so

00:40:46,609 --> 00:40:53,089
forth the atomization was added for

00:40:50,630 --> 00:40:54,470
security fix in previous version packing

00:40:53,089 --> 00:40:57,290
you have explicitly turn it on for

00:40:54,470 --> 00:41:00,740
environment variable or a month option I

00:40:57,290 --> 00:41:02,900
think if I the three upgrades just go on

00:41:00,740 --> 00:41:05,520
you can't end all fruit you really have

00:41:02,900 --> 00:41:09,150
to but by default it will just right

00:41:05,520 --> 00:41:11,370
Ashens if you want to my Paris

00:41:09,150 --> 00:41:13,650
optimizations dictionaries a couple of

00:41:11,370 --> 00:41:17,190
internal types and you can now get

00:41:13,650 --> 00:41:20,430
through the touch module memory hughes

00:41:17,190 --> 00:41:24,900
directly had a few problems we've been

00:41:20,430 --> 00:41:28,410
much better off losing memory or numbers

00:41:24,900 --> 00:41:29,850
ndarray brother so static grounded from

00:41:28,410 --> 00:41:34,740
did a whole bunch of improvements for

00:41:29,850 --> 00:41:37,890
that if you've ever been confused by the

00:41:34,740 --> 00:41:39,840
sequence reference dots in Python you

00:41:37,890 --> 00:41:43,070
have good reason everything about 15

00:41:39,840 --> 00:41:46,980
years ago has changed a lot since then

00:41:43,070 --> 00:41:49,200
so they've done been rewritten to vedic

00:41:46,980 --> 00:41:52,320
account to the type of major changes in

00:41:49,200 --> 00:41:54,030
item 3 and the addition of the object

00:41:52,320 --> 00:41:58,590
based classes of reflections model and

00:41:54,030 --> 00:42:01,650
so forth so few other things their time

00:41:58,590 --> 00:42:04,200
module time module there's a couple of a

00:42:01,650 --> 00:42:07,860
pianist that behave very differently on

00:42:04,200 --> 00:42:09,990
windows and they do anywhere else and so

00:42:07,860 --> 00:42:13,110
people have to deal with that at the

00:42:09,990 --> 00:42:14,490
application level historically and 303

00:42:13,110 --> 00:42:17,940
and finally Delta fat in the same

00:42:14,490 --> 00:42:19,260
library so you can you can you call

00:42:17,940 --> 00:42:23,310
those functions

00:42:19,260 --> 00:42:24,990
writing the guards platform dead time we

00:42:23,310 --> 00:42:26,790
can find them easily convert ones with

00:42:24,990 --> 00:42:30,210
POSIX timestamp just by calling the time

00:42:26,790 --> 00:42:32,010
step method and converting our ninth

00:42:30,210 --> 00:42:35,100
date time which doesn't have time zone

00:42:32,010 --> 00:42:38,520
info for local at that time is now easy

00:42:35,100 --> 00:42:45,750
as well just leave the economic system

00:42:38,520 --> 00:42:50,250
time the whole panel stuff for they did

00:42:45,750 --> 00:42:51,480
to fascism in the equation so again to

00:42:50,250 --> 00:42:55,470
try and deal with cross-platform

00:42:51,480 --> 00:42:58,710
differences so changing ownership far

00:42:55,470 --> 00:43:00,930
atomic fire replacement a bunch of there

00:42:58,710 --> 00:43:02,850
so the f-block stuff would give you the

00:43:00,930 --> 00:43:06,780
directory file descriptors in addition

00:43:02,850 --> 00:43:08,970
to the directory names so whole pile

00:43:06,780 --> 00:43:10,800
atleast related related to hardening in

00:43:08,970 --> 00:43:13,560
some of our own algorithm to get certain

00:43:10,800 --> 00:43:15,810
kinds of security attacks and so the

00:43:13,560 --> 00:43:19,830
tools that we have to build to deal with

00:43:15,810 --> 00:43:22,440
those problems we've made public and so

00:43:19,830 --> 00:43:25,770
yet so there's a lot more tools out for

00:43:22,440 --> 00:43:28,530
dealing with that kind of thing one of

00:43:25,770 --> 00:43:32,550
the other thing is is now specify X

00:43:28,530 --> 00:43:34,980
which is exclusive both for far creation

00:43:32,550 --> 00:43:38,760
which is one way people complain file

00:43:34,980 --> 00:43:42,690
already exists and again few other

00:43:38,760 --> 00:43:44,610
options there there are protocols again

00:43:42,690 --> 00:43:47,100
the function a bunch of stuff for all

00:43:44,610 --> 00:43:49,710
the different political party networks

00:43:47,100 --> 00:43:53,370
track this is the stuff that ability to

00:43:49,710 --> 00:43:56,549
install cameras working on so email

00:43:53,370 --> 00:44:02,219
policy has always struggled you back

00:43:56,549 --> 00:44:05,640
ability issues and what 303 has is email

00:44:02,219 --> 00:44:07,349
policy framework where when your past

00:44:05,640 --> 00:44:10,769
and message if you can say what policy

00:44:07,349 --> 00:44:13,769
want to use the default policy is the

00:44:10,769 --> 00:44:17,039
one that's compatible a 3-2 works but

00:44:13,769 --> 00:44:19,650
this optional policies the much stricter

00:44:17,039 --> 00:44:22,259
and designed for dinner environments or

00:44:19,650 --> 00:44:24,630
like one for smtp agent one for the

00:44:22,259 --> 00:44:28,670
suitable to serialization with finds

00:44:24,630 --> 00:44:30,929
that kind of thing the IP address module

00:44:28,670 --> 00:44:32,640
basically dealing with IP addresses a

00:44:30,929 --> 00:44:35,089
lot the standard library really doesn't

00:44:32,640 --> 00:44:35,089

YouTube URL: https://www.youtube.com/watch?v=SqidFaoNmP8


