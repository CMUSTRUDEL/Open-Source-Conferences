Title: Ruby Messaging Patterns by Gerred Dillon
Publication date: 2020-01-29
Playlist: Madison Ruby 2011
Description: 
	
Captions: 
	00:00:13,799 --> 00:00:20,080
hello everyone everyone have a good

00:00:15,940 --> 00:00:22,720
lunch bed bad Mexican no okay so yeah as

00:00:20,080 --> 00:00:24,539
Jim said my name is Jared Dillon I am

00:00:22,720 --> 00:00:26,740
the chief architect with quick left and

00:00:24,539 --> 00:00:29,169
I'm a rubios I've been a rubios for a

00:00:26,740 --> 00:00:31,930
long time and I do way too much work

00:00:29,169 --> 00:00:33,430
with amqp if you know what that is great

00:00:31,930 --> 00:00:37,239
if not we'll talk a little bit about it

00:00:33,430 --> 00:00:40,120
here in a second so welcome to the ruby

00:00:37,239 --> 00:00:41,469
enterprise we're going to talk a little

00:00:40,120 --> 00:00:43,329
bit about message systems and

00:00:41,469 --> 00:00:44,770
integrating applications in a service

00:00:43,329 --> 00:00:46,179
environment and we're going talk a

00:00:44,770 --> 00:00:47,769
little bit about patterns that we can do

00:00:46,179 --> 00:00:51,519
in this environment horizontal scaling

00:00:47,769 --> 00:00:52,960
and among other things so if you didn't

00:00:51,519 --> 00:00:54,909
get it before we have an enterprise

00:00:52,960 --> 00:00:56,859
system here and you know when we're

00:00:54,909 --> 00:00:58,269
talking about these systems we're

00:00:56,859 --> 00:01:00,909
talking about really really large

00:00:58,269 --> 00:01:03,069
systems and these systems are not only

00:01:00,909 --> 00:01:04,839
large but they're homogeneous we have a

00:01:03,069 --> 00:01:06,940
whole bunch of different things that are

00:01:04,839 --> 00:01:08,680
wrapped up inside here then are all

00:01:06,940 --> 00:01:10,690
individual parts you know we have app

00:01:08,680 --> 00:01:12,610
servers we have web servers we have all

00:01:10,690 --> 00:01:15,430
kinds of different things that frankly

00:01:12,610 --> 00:01:17,829
we really don't care about you know

00:01:15,430 --> 00:01:19,960
we're and imagine ourselves in this

00:01:17,829 --> 00:01:21,790
scenario like many of us have been in

00:01:19,960 --> 00:01:24,250
where we're building a ruby app being

00:01:21,790 --> 00:01:26,259
rails to notch or whatever to work with

00:01:24,250 --> 00:01:28,149
this enterprise system and we work

00:01:26,259 --> 00:01:30,280
within the system but we also work apart

00:01:28,149 --> 00:01:32,100
from this system in that we can't

00:01:30,280 --> 00:01:34,240
integrate so we do have to stand apart

00:01:32,100 --> 00:01:35,860
whether that's a language barrier a

00:01:34,240 --> 00:01:38,439
political barrier cultural battle

00:01:35,860 --> 00:01:40,119
barrier we really don't care but we know

00:01:38,439 --> 00:01:41,740
we exist apart from that and the

00:01:40,119 --> 00:01:44,109
application has to live outside with the

00:01:41,740 --> 00:01:47,350
boundaries of this enterprise however

00:01:44,109 --> 00:01:50,049
whatever that means for you so the real

00:01:47,350 --> 00:01:52,210
reason this talk and a huge purpose of

00:01:50,049 --> 00:01:54,189
it is talking about other way there is

00:01:52,210 --> 00:01:56,100
two systems together how do we how do we

00:01:54,189 --> 00:01:58,210
move rails and Ruby into an environment

00:01:56,100 --> 00:02:01,060
larger than itself larger than these

00:01:58,210 --> 00:02:05,109
standalone applications that have been

00:02:01,060 --> 00:02:06,399
typical in the past so a quick way to do

00:02:05,109 --> 00:02:10,119
that in ways that have been talked about

00:02:06,399 --> 00:02:12,340
in the past hour api's you build out EP

00:02:10,119 --> 00:02:13,930
is you know you haven't you need to

00:02:12,340 --> 00:02:16,630
consume some information and you make a

00:02:13,930 --> 00:02:20,170
request out and you get it back you know

00:02:16,630 --> 00:02:23,620
that's not so bad so we we add another

00:02:20,170 --> 00:02:25,300
request and some more requests and we

00:02:23,620 --> 00:02:26,769
have a whole bunch of requests now and

00:02:25,300 --> 00:02:27,610
so we're collecting consuming

00:02:26,769 --> 00:02:29,500
information from

00:02:27,610 --> 00:02:31,660
this larger provider that we need to

00:02:29,500 --> 00:02:34,000
work with by contract or whatever else

00:02:31,660 --> 00:02:35,470
we need to do but now we also need to

00:02:34,000 --> 00:02:37,390
produce information they need stuff from

00:02:35,470 --> 00:02:40,420
us so we talked about going the other

00:02:37,390 --> 00:02:42,820
direction we we connect back we built an

00:02:40,420 --> 00:02:45,670
endpoint we build some more endpoints

00:02:42,820 --> 00:02:47,740
and more endpoints and you know we have

00:02:45,670 --> 00:02:49,930
lots and lots of influence all of a

00:02:47,740 --> 00:02:51,520
sudden we have a mess of 14 integration

00:02:49,930 --> 00:02:54,490
points here you know that are tightly

00:02:51,520 --> 00:02:56,260
coupled if something breaks then you

00:02:54,490 --> 00:02:59,200
know you a lot of your system can break

00:02:56,260 --> 00:03:01,300
and these api's are unreliable and part

00:02:59,200 --> 00:03:04,240
of that comes to the fact that HTTP is a

00:03:01,300 --> 00:03:06,489
fairly unreliable protocol and you may

00:03:04,240 --> 00:03:08,260
also have a public API so this is you

00:03:06,489 --> 00:03:10,840
know a lot to maintain it's difficult to

00:03:08,260 --> 00:03:12,940
scale so you got to ask yourself when

00:03:10,840 --> 00:03:15,489
you're starting to integrate is there a

00:03:12,940 --> 00:03:16,900
better way you know we're looking at

00:03:15,489 --> 00:03:18,720
some tight coupling problems you're

00:03:16,900 --> 00:03:20,590
building to a huge implementation it's

00:03:18,720 --> 00:03:22,180
synchronous in nature so all these

00:03:20,590 --> 00:03:24,730
requests that we make let's step back

00:03:22,180 --> 00:03:26,640
all these requests that we make block

00:03:24,730 --> 00:03:29,230
the air both sides of the application

00:03:26,640 --> 00:03:30,940
something in the samaja smash or our

00:03:29,230 --> 00:03:34,660
application these controller actions are

00:03:30,940 --> 00:03:38,560
going to be synchronous so let's go back

00:03:34,660 --> 00:03:40,540
to the drawing board here you know how

00:03:38,560 --> 00:03:42,489
can we rethink this what do we need to

00:03:40,540 --> 00:03:44,440
do in order to consider okay what's a

00:03:42,489 --> 00:03:46,840
better way or at least what trade-offs

00:03:44,440 --> 00:03:48,010
can we make to come to a better decision

00:03:46,840 --> 00:03:50,500
about how to integrate these two

00:03:48,010 --> 00:03:52,930
applications and so we start thinking

00:03:50,500 --> 00:03:55,239
about okay well some of our problems

00:03:52,930 --> 00:03:56,680
with the tight coupling well if we could

00:03:55,239 --> 00:03:59,440
put an interface in between to reduce

00:03:56,680 --> 00:04:02,170
the coupling that would help that we we

00:03:59,440 --> 00:04:04,480
have many interfaces to different places

00:04:02,170 --> 00:04:06,910
and so we can reduce that to a single

00:04:04,480 --> 00:04:08,100
interface we're synchronous so we're

00:04:06,910 --> 00:04:10,450
blocking our threads in our application

00:04:08,100 --> 00:04:12,519
so what if we can make that asynchronous

00:04:10,450 --> 00:04:14,769
and also get rid of that problem and

00:04:12,519 --> 00:04:16,150
allow our applications to consume things

00:04:14,769 --> 00:04:18,370
as they're needed instead of being

00:04:16,150 --> 00:04:21,010
force-fed every time someone needs to

00:04:18,370 --> 00:04:24,490
consume or produce something so instead

00:04:21,010 --> 00:04:26,740
of this this huge huge mess we have we

00:04:24,490 --> 00:04:29,020
can get down to something more like this

00:04:26,740 --> 00:04:29,890
and for the purposes of today's talk

00:04:29,020 --> 00:04:33,700
we're going to talk a little bit

00:04:29,890 --> 00:04:36,010
rabbitmq and RabbitMQ is a message queue

00:04:33,700 --> 00:04:38,470
that follows the MTP standard that was

00:04:36,010 --> 00:04:40,570
developed by jpmorgan chase in 2005 and

00:04:38,470 --> 00:04:41,470
it was in response to problems like this

00:04:40,570 --> 00:04:42,880
where they had to enter

00:04:41,470 --> 00:04:45,040
huge parts of their application together

00:04:42,880 --> 00:04:47,260
and do it without expensive proprietary

00:04:45,040 --> 00:04:48,940
solutions so they've developed an

00:04:47,260 --> 00:04:51,880
open-source standard that really allows

00:04:48,940 --> 00:04:54,130
make it makes us available to all of

00:04:51,880 --> 00:04:57,190
open source and it's battle-tested it's

00:04:54,130 --> 00:04:58,960
an use of jpmorgan every day so now we

00:04:57,190 --> 00:05:01,330
don't care about the enterprise all of a

00:04:58,960 --> 00:05:04,630
sudden with this solution we can focus

00:05:01,330 --> 00:05:06,580
on integrating with a middleman and not

00:05:04,630 --> 00:05:07,990
really care about what we're originally

00:05:06,580 --> 00:05:09,250
integrating with so we don't really

00:05:07,990 --> 00:05:11,980
don't care about the enterprise setting

00:05:09,250 --> 00:05:15,730
board we only need to talk and interact

00:05:11,980 --> 00:05:17,350
with the message queue both ways so you

00:05:15,730 --> 00:05:19,570
know for those who aren't familiar with

00:05:17,350 --> 00:05:22,360
how a message queuing system works we

00:05:19,570 --> 00:05:25,540
have a we transmit messages through an

00:05:22,360 --> 00:05:27,490
exchange and think of that as some forms

00:05:25,540 --> 00:05:29,920
channel that's eventually delivered into

00:05:27,490 --> 00:05:31,750
the correct q that is ready for the app

00:05:29,920 --> 00:05:34,360
to request and consume items as it needs

00:05:31,750 --> 00:05:36,940
to and this doesn't tell the full side

00:05:34,360 --> 00:05:38,800
of the story because you know our app

00:05:36,940 --> 00:05:41,320
server is it really just a single

00:05:38,800 --> 00:05:44,530
homogeneous mass itself it's made up of

00:05:41,320 --> 00:05:46,480
a web server and it's made up of workers

00:05:44,530 --> 00:05:47,740
and so in this asynchronous environment

00:05:46,480 --> 00:05:49,180
we suddenly need those workers and some

00:05:47,740 --> 00:05:52,450
of you may may have done some of these

00:05:49,180 --> 00:05:54,640
worker systems before so we're happily

00:05:52,450 --> 00:05:56,380
consuming we're requesting things out of

00:05:54,640 --> 00:05:58,630
the queue and we're processing them and

00:05:56,380 --> 00:05:59,919
failure is handled you know the queue

00:05:58,630 --> 00:06:01,330
things are only popped out of the queue

00:05:59,919 --> 00:06:02,950
if the worker acknowledges it and so you

00:06:01,330 --> 00:06:05,440
know you have some sort of failure

00:06:02,950 --> 00:06:08,760
handling built in so I'm going to show

00:06:05,440 --> 00:06:11,500
you a very simple example of a worker

00:06:08,760 --> 00:06:13,419
there we go very simple example of a

00:06:11,500 --> 00:06:15,580
worker all we're really doing here it

00:06:13,419 --> 00:06:17,979
runs an event machine loop I'm also a

00:06:15,580 --> 00:06:19,300
huge event machine fan but it runs in a

00:06:17,979 --> 00:06:22,300
simple event machine root loop and

00:06:19,300 --> 00:06:24,490
subscribes to our queue and as soon as

00:06:22,300 --> 00:06:25,960
you get something it processes it I

00:06:24,490 --> 00:06:27,640
didn't want to do anything too complex

00:06:25,960 --> 00:06:30,669
because it's really not the point but

00:06:27,640 --> 00:06:32,590
this is done with the Ruby amqp gem and

00:06:30,669 --> 00:06:33,940
there's some synchronous examples if

00:06:32,590 --> 00:06:36,220
you're doing it in another environment

00:06:33,940 --> 00:06:38,470
like carrot or bunny they're all out

00:06:36,220 --> 00:06:39,700
there and all these resources are

00:06:38,470 --> 00:06:42,070
available at the end of the talk as well

00:06:39,700 --> 00:06:43,570
so all this is really doing is we're

00:06:42,070 --> 00:06:45,640
subscribing to the transactions queue

00:06:43,570 --> 00:06:46,780
and then we're waiting for messages then

00:06:45,640 --> 00:06:48,850
we're doing things with them as soon as

00:06:46,780 --> 00:06:51,789
we get them and we can just scale this

00:06:48,850 --> 00:06:54,569
out horizontally if you have more

00:06:51,789 --> 00:06:56,069
problem more messages entering the queue

00:06:54,569 --> 00:06:58,139
that's where messages you know we have

00:06:56,069 --> 00:06:59,490
three workers maybe you need five maybe

00:06:58,139 --> 00:07:01,830
you need ten you know you're doing some

00:06:59,490 --> 00:07:03,360
huge processing at this point but all of

00:07:01,830 --> 00:07:05,039
a sudden you have changed the way you

00:07:03,360 --> 00:07:06,990
scale your application and you moved out

00:07:05,039 --> 00:07:09,179
horizontally across processes instead of

00:07:06,990 --> 00:07:12,419
trying to do it in a more traditional

00:07:09,179 --> 00:07:14,279
fashion and the reason we partner what's

00:07:12,419 --> 00:07:17,129
aided with this is RabbitMQ

00:07:14,279 --> 00:07:20,099
automatically load balances and so you

00:07:17,129 --> 00:07:21,419
know worker one will request and work or

00:07:20,099 --> 00:07:24,360
two is requesting worker threes all

00:07:21,419 --> 00:07:25,740
subscribed and all the load balancing is

00:07:24,360 --> 00:07:27,089
handled for you there's no locking

00:07:25,740 --> 00:07:29,039
there's no there's nothing to think

00:07:27,089 --> 00:07:32,339
about with that it'll automatically

00:07:29,039 --> 00:07:34,020
extend message 12 worker 1 message 2 3 4

00:07:32,339 --> 00:07:35,699
and in a round-robin through them in

00:07:34,020 --> 00:07:37,919
order to evenly distribute the work

00:07:35,699 --> 00:07:40,319
between all of them so what does all

00:07:37,919 --> 00:07:42,089
this mean you know we've now talked

00:07:40,319 --> 00:07:44,550
about this system how to set it up and

00:07:42,089 --> 00:07:47,069
and you know kind of talked about some

00:07:44,550 --> 00:07:50,069
of the benefits here well we can go from

00:07:47,069 --> 00:07:53,339
this you know this ugly ugly mess of

00:07:50,069 --> 00:07:54,929
integration to this but there are some

00:07:53,339 --> 00:07:56,580
trade-offs with a of course you know you

00:07:54,929 --> 00:07:59,519
know are talking about a single point of

00:07:56,580 --> 00:08:00,860
failure if that goes down you're not

00:07:59,519 --> 00:08:03,360
communicating between each other at all

00:08:00,860 --> 00:08:04,860
but you can guard against that you know

00:08:03,360 --> 00:08:06,330
with RabbitMQ there's the notion of

00:08:04,860 --> 00:08:08,580
persistent queues and so you can have

00:08:06,330 --> 00:08:09,990
your cues write to disk if necessary for

00:08:08,580 --> 00:08:11,879
critical things like transactions we're

00:08:09,990 --> 00:08:13,649
talking about we can also do some sort

00:08:11,879 --> 00:08:16,289
of clustering and charting other things

00:08:13,649 --> 00:08:17,579
to protect against it and we aren't in a

00:08:16,289 --> 00:08:19,439
synchronous environment so if the

00:08:17,579 --> 00:08:20,579
workers can't consume it's not like

00:08:19,439 --> 00:08:24,959
there's active failures that are

00:08:20,579 --> 00:08:27,289
happening you know so okay so let's

00:08:24,959 --> 00:08:29,729
assume that we've gone with rabotu you

00:08:27,289 --> 00:08:31,559
problems are solved our application is

00:08:29,729 --> 00:08:34,019
running it's growing its integrated into

00:08:31,559 --> 00:08:36,750
the system it's coupled very loosely but

00:08:34,019 --> 00:08:38,779
it's coupled and for all intents and

00:08:36,750 --> 00:08:41,159
purposes we've solved our challenge so

00:08:38,779 --> 00:08:42,750
but we begin to see performance problems

00:08:41,159 --> 00:08:44,550
no no we don't really care about the

00:08:42,750 --> 00:08:46,730
enterprise you know we care about our

00:08:44,550 --> 00:08:50,040
application or application is doing a

00:08:46,730 --> 00:08:52,139
lot of growth as well and we can say

00:08:50,040 --> 00:08:53,970
it's a rails app by itself but this

00:08:52,139 --> 00:08:55,889
doesn't necessarily tell the full story

00:08:53,970 --> 00:08:58,319
we've talked about the web servers and

00:08:55,889 --> 00:08:59,519
the application servers and we've talked

00:08:58,319 --> 00:09:02,339
a little bit about the workers that are

00:08:59,519 --> 00:09:04,910
inside there there's another piece there

00:09:02,339 --> 00:09:07,079
we go and we have a database server and

00:09:04,910 --> 00:09:08,230
that's another constraint that we have

00:09:07,079 --> 00:09:10,330
upon our system though we have to

00:09:08,230 --> 00:09:12,340
think about and as this as this system

00:09:10,330 --> 00:09:15,990
grows you know the constraints on that

00:09:12,340 --> 00:09:19,090
database server also begin to grow and

00:09:15,990 --> 00:09:20,980
we have to think okay most of our rails

00:09:19,090 --> 00:09:22,380
out by itself is synchronous as well so

00:09:20,980 --> 00:09:25,390
our controllers look something like this

00:09:22,380 --> 00:09:28,120
a trivial example but we're creating a

00:09:25,390 --> 00:09:32,260
purchase and we say that we redirect it

00:09:28,120 --> 00:09:34,390
and so what we're saying here is we have

00:09:32,260 --> 00:09:37,930
to make a request out to our database

00:09:34,390 --> 00:09:41,680
server save this object and we can't

00:09:37,930 --> 00:09:44,020
continue until this is returned now it

00:09:41,680 --> 00:09:45,790
may not matter in most environments but

00:09:44,020 --> 00:09:50,020
if you're in an environment where

00:09:45,790 --> 00:09:51,310
milliseconds matter it can and so every

00:09:50,020 --> 00:09:54,090
transaction to the database can

00:09:51,310 --> 00:09:57,220
adversely affect the performance of your

00:09:54,090 --> 00:10:00,280
requests so we have a direct interaction

00:09:57,220 --> 00:10:03,300
with the DB here so but we can pose a

00:10:00,280 --> 00:10:07,030
question whether we like the same model

00:10:03,300 --> 00:10:09,100
that we did in the enterprise to our

00:10:07,030 --> 00:10:11,440
inner application or intra application

00:10:09,100 --> 00:10:12,760
communications it'd be interesting all

00:10:11,440 --> 00:10:14,950
of a sudden moving from synchronous to

00:10:12,760 --> 00:10:18,090
asynchronous and some of you may have

00:10:14,950 --> 00:10:20,170
done this in a certain way but uh I

00:10:18,090 --> 00:10:23,770
propose a slightly more aggressive way

00:10:20,170 --> 00:10:26,530
so we can apply this model here to

00:10:23,770 --> 00:10:27,670
facilitate in traffic a shin and we can

00:10:26,530 --> 00:10:29,560
solve performance problems in our own

00:10:27,670 --> 00:10:31,270
application and think about all of our

00:10:29,560 --> 00:10:33,180
controllers everything we do to produce

00:10:31,270 --> 00:10:37,890
information or applications

00:10:33,180 --> 00:10:40,780
asynchronously so instead we talk about

00:10:37,890 --> 00:10:43,630
you know instead of doing this where

00:10:40,780 --> 00:10:47,650
everything is synchronous what if we did

00:10:43,630 --> 00:10:49,930
this what if we created our object in

00:10:47,650 --> 00:10:52,150
memory made sure it was valid never

00:10:49,930 --> 00:10:54,640
touching the desk and if so throw it off

00:10:52,150 --> 00:10:57,910
somewhere let let the web server do what

00:10:54,640 --> 00:10:59,290
it's great act and let something we

00:10:57,910 --> 00:11:01,930
designed more for this purpose to do

00:10:59,290 --> 00:11:04,270
that and we eliminate most of the disk

00:11:01,930 --> 00:11:06,400
i/o and doing this there's no database

00:11:04,270 --> 00:11:10,830
interaction at this point allowing

00:11:06,400 --> 00:11:12,970
requests to happen very very fast so

00:11:10,830 --> 00:11:14,530
what we're talking about again requires

00:11:12,970 --> 00:11:16,810
some sort of worker queue system and

00:11:14,530 --> 00:11:19,570
we've already talked about a bit about

00:11:16,810 --> 00:11:20,980
RabbitMQ that's not the only option in

00:11:19,570 --> 00:11:21,939
the sphere so let's talk about a couple

00:11:20,980 --> 00:11:23,499
others

00:11:21,939 --> 00:11:28,089
and the first we'll talk about delayed

00:11:23,499 --> 00:11:31,869
job who hears use delayed job I'm really

00:11:28,089 --> 00:11:33,519
sorry I have to I know there's a lot of

00:11:31,869 --> 00:11:35,319
pain points with it who's experienced in

00:11:33,519 --> 00:11:38,169
pain with it and in general okay a

00:11:35,319 --> 00:11:41,199
couple the more you do with it the more

00:11:38,169 --> 00:11:43,209
painful attends to become you know on

00:11:41,199 --> 00:11:45,909
the plus side you don't have to set up

00:11:43,209 --> 00:11:47,559
anything new on your service it's just

00:11:45,909 --> 00:11:51,399
you know that piece of infrastructure

00:11:47,559 --> 00:11:52,989
and it works it's also very very simple

00:11:51,399 --> 00:11:54,729
you know at the end of the method you

00:11:52,989 --> 00:11:58,119
put handle asynchronously your say you

00:11:54,729 --> 00:12:00,249
know my class or my object delayed

00:11:58,119 --> 00:12:02,919
method and it figures it out that's

00:12:00,249 --> 00:12:06,069
great um but if you're talking about

00:12:02,919 --> 00:12:08,169
your an environment where we're already

00:12:06,069 --> 00:12:09,399
performance constrained this is also

00:12:08,169 --> 00:12:11,529
going to affect the performance of your

00:12:09,399 --> 00:12:15,909
database so maybe we don't want to do

00:12:11,529 --> 00:12:19,959
that another option we have who's heard

00:12:15,909 --> 00:12:21,789
a cue classic cool i'll be this is

00:12:19,959 --> 00:12:23,739
awesome okay so cute classic is an

00:12:21,789 --> 00:12:25,689
awesome library written by ryan smith of

00:12:23,739 --> 00:12:28,089
Heroku and it takes advantage of the

00:12:25,689 --> 00:12:29,619
fact that postgres has both a key value

00:12:28,089 --> 00:12:32,259
store as well as a publish-subscribe

00:12:29,619 --> 00:12:34,179
system and if you're not using postgres

00:12:32,259 --> 00:12:35,409
I mean it has many many advanced

00:12:34,179 --> 00:12:38,259
features you should use but we're only

00:12:35,409 --> 00:12:40,539
going to talk about these ones so of

00:12:38,259 --> 00:12:42,339
course because it takes advantage of

00:12:40,539 --> 00:12:46,119
these it has to be run in Postgres which

00:12:42,339 --> 00:12:47,949
is awesome it also keeps your structure

00:12:46,119 --> 00:12:51,759
simple and the ques themselves are very

00:12:47,949 --> 00:12:53,349
very simple the resource constraints of

00:12:51,759 --> 00:12:55,269
places on your database server are very

00:12:53,349 --> 00:12:56,259
minimal but for the case of this we're

00:12:55,269 --> 00:12:58,809
just going to say that it is

00:12:56,259 --> 00:13:00,220
constraining on the database so maybe we

00:12:58,809 --> 00:13:01,779
don't want to use it but it's definitely

00:13:00,220 --> 00:13:03,639
something to keep in mind over delayed

00:13:01,779 --> 00:13:06,429
job if you have to do this in the future

00:13:03,639 --> 00:13:07,899
and just a quick look of how the

00:13:06,429 --> 00:13:11,769
publish-subscribe works and postgres

00:13:07,899 --> 00:13:13,629
this is not part of the SQL standard but

00:13:11,769 --> 00:13:16,269
we can start to listen on channels and

00:13:13,629 --> 00:13:17,949
then as soon as notifications go out all

00:13:16,269 --> 00:13:19,829
of a sudden we're starting to receive

00:13:17,949 --> 00:13:22,119
broadcasts as you see in the third line

00:13:19,829 --> 00:13:24,549
very very powerful stuff and allows a

00:13:22,119 --> 00:13:28,899
lot of a lot of things you can do just

00:13:24,549 --> 00:13:31,600
with postgres itself and it's a trip

00:13:28,899 --> 00:13:33,339
extremely lightweight as you can see so

00:13:31,600 --> 00:13:35,710
all right we go back to the drawing

00:13:33,339 --> 00:13:37,660
board now and we have another option

00:13:35,710 --> 00:13:41,920
can anyone guess what that third option

00:13:37,660 --> 00:13:45,700
is it's fairly common library BAM rescue

00:13:41,920 --> 00:13:47,170
so rescue sits on top of Redis it's and

00:13:45,700 --> 00:13:49,390
for those who don't know what Renesys

00:13:47,170 --> 00:13:51,310
rescue or Redis is a very fast

00:13:49,390 --> 00:13:54,090
lightweight key value store with some

00:13:51,310 --> 00:13:58,120
set algebra functions pretty cool stuff

00:13:54,090 --> 00:13:59,230
it's it's fast it's simple you do have

00:13:58,120 --> 00:14:02,560
to know add another piece to your

00:13:59,230 --> 00:14:04,360
applique or to your infrastructure so

00:14:02,560 --> 00:14:05,560
you know you may look at that and you

00:14:04,360 --> 00:14:08,020
may not want to set that up but it's

00:14:05,560 --> 00:14:09,580
very easy to set up and so rescue is a

00:14:08,020 --> 00:14:12,220
queue system that sits on top of this

00:14:09,580 --> 00:14:13,450
and interact separately from your

00:14:12,220 --> 00:14:15,670
database server so we actually don't

00:14:13,450 --> 00:14:17,470
have to touch our database unless we

00:14:15,670 --> 00:14:18,850
really have to we don't have to do it

00:14:17,470 --> 00:14:22,420
for the process of checking the queue

00:14:18,850 --> 00:14:24,480
and interacting with the queue so you

00:14:22,420 --> 00:14:27,310
know here's the quick example given our

00:14:24,480 --> 00:14:29,410
prior controller action you know how we

00:14:27,310 --> 00:14:32,170
could possibly set this up so we have an

00:14:29,410 --> 00:14:34,450
asynchronous create which in queues our

00:14:32,170 --> 00:14:36,730
object with what we wanted to do and

00:14:34,450 --> 00:14:39,130
some parameters and that gets in cute

00:14:36,730 --> 00:14:40,750
and so now this transaction class will

00:14:39,130 --> 00:14:44,740
actually work it as soon as we start

00:14:40,750 --> 00:14:49,480
work you know doing a rescue work on

00:14:44,740 --> 00:14:50,980
that cute on the purchases Q and so we

00:14:49,480 --> 00:14:53,410
can actually do this do this later

00:14:50,980 --> 00:14:55,090
instead of at the time which I don't

00:14:53,410 --> 00:14:56,650
know about you guys but when I'm

00:14:55,090 --> 00:14:58,810
creating what I'm producing things I

00:14:56,650 --> 00:15:00,250
don't necessarily need that object out

00:14:58,810 --> 00:15:03,970
from the database right then I already

00:15:00,250 --> 00:15:06,580
have in a memory so now our async

00:15:03,970 --> 00:15:08,380
controller makes sense you know we we

00:15:06,580 --> 00:15:10,450
pass out we can run through this

00:15:08,380 --> 00:15:13,630
entirely in memory by just checking if

00:15:10,450 --> 00:15:15,820
it's valid and let this piece handle a

00:15:13,630 --> 00:15:17,650
lot later it's kind of awesome it gives

00:15:15,820 --> 00:15:18,940
a lot of a lot of added power a lot of

00:15:17,650 --> 00:15:21,370
added functionality and making our

00:15:18,940 --> 00:15:24,040
applications very fast and scaling in a

00:15:21,370 --> 00:15:26,890
very cheap way and again like in the

00:15:24,040 --> 00:15:30,000
prior model we can go from you know

00:15:26,890 --> 00:15:35,050
something like this to a much larger

00:15:30,000 --> 00:15:37,000
larger model like this and we the big

00:15:35,050 --> 00:15:38,350
thing is is we've added a little bit of

00:15:37,000 --> 00:15:40,360
complexity to our application right

00:15:38,350 --> 00:15:43,960
because we're now no longer thinking in

00:15:40,360 --> 00:15:45,820
a very synchronous way nothing's direct

00:15:43,960 --> 00:15:48,190
anymore everything's indirect and so

00:15:45,820 --> 00:15:48,790
that can have implications on your code

00:15:48,190 --> 00:15:50,230
and

00:15:48,790 --> 00:15:52,780
that you have to have a little bit more

00:15:50,230 --> 00:15:54,280
of it you have to handle consume these

00:15:52,780 --> 00:15:55,720
information because your web servers not

00:15:54,280 --> 00:16:00,430
going to do it your web server is

00:15:55,720 --> 00:16:02,170
responding your requests and that that's

00:16:00,430 --> 00:16:05,320
important to think about now that now we

00:16:02,170 --> 00:16:07,300
have in this case 6 q's running or six

00:16:05,320 --> 00:16:08,890
workers running all handling different

00:16:07,300 --> 00:16:11,860
queues across different systems and so

00:16:08,890 --> 00:16:14,230
we've gone from just having the blue

00:16:11,860 --> 00:16:16,030
enterprise and the red rails app to

00:16:14,230 --> 00:16:18,790
something much much much more

00:16:16,030 --> 00:16:20,860
complicated you know whether you take

00:16:18,790 --> 00:16:23,050
that trade-off engineering of course is

00:16:20,860 --> 00:16:26,620
always trade-offs guided by like very

00:16:23,050 --> 00:16:29,680
conscious decisions and in this case it

00:16:26,620 --> 00:16:32,200
may be much much more appropriate and in

00:16:29,680 --> 00:16:33,940
other cases it may not be so it's really

00:16:32,200 --> 00:16:35,170
up to you to decide but when

00:16:33,940 --> 00:16:38,620
milliseconds matter you can go

00:16:35,170 --> 00:16:41,740
asynchronous and stick with the worker

00:16:38,620 --> 00:16:44,530
pattern and move up horizontally so

00:16:41,740 --> 00:16:46,210
thanks everyone I tossed out these

00:16:44,530 --> 00:16:48,690
slides a couple days ago and redid them

00:16:46,210 --> 00:16:50,980
so any feedback please give me feedback

00:16:48,690 --> 00:16:52,780
but here's all the resources available

00:16:50,980 --> 00:16:55,120
for this talk if you're curious about

00:16:52,780 --> 00:16:58,210
any of the topics here there's a rabid

00:16:55,120 --> 00:17:00,820
mq we have some the newbie aim QP

00:16:58,210 --> 00:17:02,380
library is awesome the most important

00:17:00,820 --> 00:17:05,080
link i think it's checkout queue classic

00:17:02,380 --> 00:17:07,860
and how h store and the pub sub works so

00:17:05,080 --> 00:17:07,860
thank you very much

00:17:12,230 --> 00:17:17,460
brighter planet is a cloud-based

00:17:14,670 --> 00:17:20,340
computation platform so we provide an

00:17:17,460 --> 00:17:21,930
API for developers to build complex

00:17:20,340 --> 00:17:24,240
scientific calculations into their

00:17:21,930 --> 00:17:25,620
applications pretty easily one big

00:17:24,240 --> 00:17:28,740
client we have is MasterCard

00:17:25,620 --> 00:17:31,590
international and they have a

00:17:28,740 --> 00:17:33,690
partnership with us where users of

00:17:31,590 --> 00:17:35,220
corporate cards who charge things like

00:17:33,690 --> 00:17:38,340
flights and hotel rooms onto their

00:17:35,220 --> 00:17:41,280
corporate card all those pieces of data

00:17:38,340 --> 00:17:44,360
go into a big database and we go in and

00:17:41,280 --> 00:17:46,260
using all those details calculate the

00:17:44,360 --> 00:17:47,910
environmental impact of all those

00:17:46,260 --> 00:17:50,100
different activities and put that

00:17:47,910 --> 00:17:51,750
information back in a database so the

00:17:50,100 --> 00:17:53,220
users of these corporate cards can use

00:17:51,750 --> 00:17:55,320
that information for making energy

00:17:53,220 --> 00:17:57,560
efficiency adjustments and corporate

00:17:55,320 --> 00:17:57,560
reporting

00:18:03,910 --> 00:18:05,970

YouTube URL: https://www.youtube.com/watch?v=RrOXe3_mUs4


