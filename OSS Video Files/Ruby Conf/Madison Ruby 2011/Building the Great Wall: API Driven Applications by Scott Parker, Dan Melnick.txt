Title: Building the Great Wall: API Driven Applications by Scott Parker, Dan Melnick
Publication date: 2020-01-29
Playlist: Madison Ruby 2011
Description: 
	Help us caption & translate this video!

http://amara.org/v/FGkd/
Captions: 
	00:00:27,730 --> 00:00:38,570
and all right hi everyone again I'm damn

00:00:37,550 --> 00:00:40,190
melnick this is my colleague Scott

00:00:38,570 --> 00:00:42,110
Parker we're here to talk about building

00:00:40,190 --> 00:00:44,660
the Great Wall API driven applications

00:00:42,110 --> 00:00:47,030
and I'd like to give a special thanks to

00:00:44,660 --> 00:00:48,379
our the previous presenter Jeff who

00:00:47,030 --> 00:00:51,140
actually gave us a great introduction

00:00:48,379 --> 00:00:53,720
and segue because a lot of the things he

00:00:51,140 --> 00:00:58,040
talked about are going to be talked

00:00:53,720 --> 00:01:00,140
about here so we have problems I've you

00:00:58,040 --> 00:01:02,299
probably have problems too maybe we have

00:01:00,140 --> 00:01:04,850
the same problems and hopefully this

00:01:02,299 --> 00:01:07,040
talk will give you some ideas on how to

00:01:04,850 --> 00:01:09,890
deal with them part of problems we deal

00:01:07,040 --> 00:01:11,690
with our problems of monolithic

00:01:09,890 --> 00:01:14,479
applications that can get tangled and

00:01:11,690 --> 00:01:17,479
trying to achieve disparate goals with

00:01:14,479 --> 00:01:20,600
one big codebase that's doing maybe too

00:01:17,479 --> 00:01:22,580
many things in the same way or with the

00:01:20,600 --> 00:01:24,350
same code and you end up with a lot of

00:01:22,580 --> 00:01:27,430
coupling that you'd rather not have and

00:01:24,350 --> 00:01:30,740
so that's what we're trying to move past

00:01:27,430 --> 00:01:32,750
so what do we want out of an API driven

00:01:30,740 --> 00:01:35,030
application architecture and and why

00:01:32,750 --> 00:01:36,290
would we move in this direction well we

00:01:35,030 --> 00:01:38,150
want a system that's adaptable to change

00:01:36,290 --> 00:01:40,370
that should be a goal of any good

00:01:38,150 --> 00:01:43,150
software any good software design should

00:01:40,370 --> 00:01:45,260
be adaptable to change we want clear

00:01:43,150 --> 00:01:47,330
responsibility of the components in that

00:01:45,260 --> 00:01:51,020
system so we don't want to get into the

00:01:47,330 --> 00:01:54,260
situation where things are doing more

00:01:51,020 --> 00:01:56,000
things than they should be and also we

00:01:54,260 --> 00:01:58,040
want rich client experiences right you

00:01:56,000 --> 00:02:00,830
know the web is moving this direction of

00:01:58,040 --> 00:02:03,440
lots of JavaScript trying to make the

00:02:00,830 --> 00:02:06,050
web experience really rich from a user

00:02:03,440 --> 00:02:07,670
experience perspective you can compare

00:02:06,050 --> 00:02:09,470
it to the desktop experience but really

00:02:07,670 --> 00:02:10,780
from my perspective we want to make the

00:02:09,470 --> 00:02:13,640
web better than the desktop experience

00:02:10,780 --> 00:02:15,650
you know this all the the availability

00:02:13,640 --> 00:02:18,110
of great information through AP is and

00:02:15,650 --> 00:02:19,819
things like that we can make the web

00:02:18,110 --> 00:02:23,540
have a really great user experience

00:02:19,819 --> 00:02:25,010
through client-side code so how we're

00:02:23,540 --> 00:02:28,100
going to do that is by building great

00:02:25,010 --> 00:02:29,750
wall and this the image is is really

00:02:28,100 --> 00:02:31,730
between the API and the client-side code

00:02:29,750 --> 00:02:32,860
that's where the wall goes and that's

00:02:31,730 --> 00:02:35,020
why

00:02:32,860 --> 00:02:37,120
that's why we chose this metaphor for

00:02:35,020 --> 00:02:41,110
building these this style of

00:02:37,120 --> 00:02:43,990
architecture so we've multiple clients

00:02:41,110 --> 00:02:47,020
and how do we deliver diverse or

00:02:43,990 --> 00:02:49,000
information to these diverse clients if

00:02:47,020 --> 00:02:50,440
you've built an application recently

00:02:49,000 --> 00:02:52,480
you've probably ran into a situation

00:02:50,440 --> 00:02:54,730
where you're building for you know

00:02:52,480 --> 00:02:56,050
normal web browser but you're also

00:02:54,730 --> 00:02:57,880
building a mobile app maybe you're

00:02:56,050 --> 00:02:59,620
building a mobile touch sight maybe

00:02:57,880 --> 00:03:02,110
you're building multiple mobile apps you

00:02:59,620 --> 00:03:03,970
know for Android iPhone other types of

00:03:02,110 --> 00:03:08,230
clients and then in addition you might

00:03:03,970 --> 00:03:11,470
have a public API so Jeff alluded to

00:03:08,230 --> 00:03:14,110
this earlier but you know you don't just

00:03:11,470 --> 00:03:15,700
build a website anymore it's our lives

00:03:14,110 --> 00:03:19,720
are a little bit more complicated than

00:03:15,700 --> 00:03:22,030
that fortunately or unfortunately so you

00:03:19,720 --> 00:03:24,190
know richer experiences we want to

00:03:22,030 --> 00:03:26,650
deliver awesome experiences to our users

00:03:24,190 --> 00:03:28,920
and javascript is kind of the state of

00:03:26,650 --> 00:03:30,990
the art best way to do that right now

00:03:28,920 --> 00:03:34,770
we want more desktop like user

00:03:30,990 --> 00:03:36,000
experiences and we really want to

00:03:34,770 --> 00:03:38,099
entrust javascript rather than

00:03:36,000 --> 00:03:41,970
distrusting it you know there's this

00:03:38,099 --> 00:03:43,680
element of when we write a normal

00:03:41,970 --> 00:03:45,780
application a web application where we

00:03:43,680 --> 00:03:49,140
render a whole view send it down to the

00:03:45,780 --> 00:03:52,319
client and then maybe you know you have

00:03:49,140 --> 00:03:54,360
the the rendered HTML Dom but then you

00:03:52,319 --> 00:03:57,030
reconstruct it manipulated with

00:03:54,360 --> 00:03:59,040
JavaScript what if we really delegate a

00:03:57,030 --> 00:04:03,360
lot of that responsibility to the client

00:03:59,040 --> 00:04:05,340
and to JavaScript and people you know in

00:04:03,360 --> 00:04:06,840
the spirit of Ruby we care about the

00:04:05,340 --> 00:04:08,010
people who are working on the software

00:04:06,840 --> 00:04:10,019
we care about the people who are using

00:04:08,010 --> 00:04:12,750
the software and we want the best

00:04:10,019 --> 00:04:16,459
experiences both for developers and for

00:04:12,750 --> 00:04:19,620
our users and by creating this

00:04:16,459 --> 00:04:21,660
separation of concerns between the

00:04:19,620 --> 00:04:24,660
server-side and client-side and really

00:04:21,660 --> 00:04:27,900
clear responsibilities we can give our

00:04:24,660 --> 00:04:30,210
developers better ability to hone in on

00:04:27,900 --> 00:04:33,090
an area of the system without creating

00:04:30,210 --> 00:04:35,520
lots of boundary areas where the system

00:04:33,090 --> 00:04:38,910
overlaps with itself and there's really

00:04:35,520 --> 00:04:41,010
clear ownership of components so really

00:04:38,910 --> 00:04:42,600
what's the same way to architect a

00:04:41,010 --> 00:04:44,340
system like this that's the question

00:04:42,600 --> 00:04:47,789
that we were ultimately trying to answer

00:04:44,340 --> 00:04:51,180
and work towards and for us it's about

00:04:47,789 --> 00:04:53,820
decoupling the the client side and the

00:04:51,180 --> 00:04:58,169
server side and also you know how

00:04:53,820 --> 00:05:01,470
whoever is consuming this information we

00:04:58,169 --> 00:05:03,750
can decouple complexity by creating this

00:05:01,470 --> 00:05:05,370
API driven application architecture by

00:05:03,750 --> 00:05:08,190
isolating the parts of the app that are

00:05:05,370 --> 00:05:10,950
likely to change oftentimes that is the

00:05:08,190 --> 00:05:12,450
the place where the users interacting

00:05:10,950 --> 00:05:15,150
with it how they're interacting with it

00:05:12,450 --> 00:05:17,340
and it's not as often the data

00:05:15,150 --> 00:05:20,400
necessarily although that does change

00:05:17,340 --> 00:05:21,780
but it's less volatile and going back

00:05:20,400 --> 00:05:23,910
again to what Jeff was talking about

00:05:21,780 --> 00:05:26,310
earlier when you when you do this if you

00:05:23,910 --> 00:05:29,100
focus on the interfaces and making clean

00:05:26,310 --> 00:05:31,289
interfaces where these components can

00:05:29,100 --> 00:05:34,560
communicate with each other you give

00:05:31,289 --> 00:05:37,729
yourself the opportunity to have really

00:05:34,560 --> 00:05:40,229
well isolated components of your system

00:05:37,729 --> 00:05:42,449
you can also do couple teams this may be

00:05:40,229 --> 00:05:44,539
a problem that you do or do not have but

00:05:42,449 --> 00:05:47,729
when you grow a large organization

00:05:44,539 --> 00:05:50,400
sometimes having too much shared code

00:05:47,729 --> 00:05:52,710
and boundary areas of a system can lead

00:05:50,400 --> 00:05:55,319
lead to problems because without clear

00:05:52,710 --> 00:05:57,089
ownership of an area the system it can

00:05:55,319 --> 00:05:59,520
become a bit of a junk drawer kind of

00:05:57,089 --> 00:06:01,409
situation where no one really owns this

00:05:59,520 --> 00:06:04,020
part where these boundaries overlap and

00:06:01,409 --> 00:06:07,949
so when you have these sort of leaner

00:06:04,020 --> 00:06:09,629
slices of your architecture people can

00:06:07,949 --> 00:06:11,129
focus on them they can ramp up on them

00:06:09,629 --> 00:06:13,650
more quickly without having to take in

00:06:11,129 --> 00:06:17,189
your entire monolithic application and

00:06:13,650 --> 00:06:18,659
in addition you sort of leads to natural

00:06:17,189 --> 00:06:21,870
team splits when you have a bigger

00:06:18,659 --> 00:06:23,249
organization you also get some

00:06:21,870 --> 00:06:26,219
additional wins in terms of decoupling

00:06:23,249 --> 00:06:29,460
performance you're sending the rendering

00:06:26,219 --> 00:06:31,469
of the the client-side stuff all down to

00:06:29,460 --> 00:06:34,589
the client that of course has some

00:06:31,469 --> 00:06:36,629
trade-offs because now you're targeting

00:06:34,589 --> 00:06:40,860
multiple platforms runtimes things like

00:06:36,629 --> 00:06:43,080
that but it is a sort of added win and

00:06:40,860 --> 00:06:46,560
in addition when you if you're really

00:06:43,080 --> 00:06:50,249
disciplined about the way you about the

00:06:46,560 --> 00:06:55,409
way you create your API you can

00:06:50,249 --> 00:06:57,029
naturally make these sort of silos that

00:06:55,409 --> 00:07:00,719
can then allow you to scale horizontally

00:06:57,029 --> 00:07:04,919
more easily both in terms of application

00:07:00,719 --> 00:07:06,569
and in database so the caveat here is

00:07:04,919 --> 00:07:09,120
that if you don't have these problems

00:07:06,569 --> 00:07:12,120
this might not be then the best way to

00:07:09,120 --> 00:07:13,229
approach application architecture but if

00:07:12,120 --> 00:07:16,020
you share some of them and you have

00:07:13,229 --> 00:07:19,550
similar goals we found this is a good

00:07:16,020 --> 00:07:23,370
way to approach the problem so let's go

00:07:19,550 --> 00:07:24,810
hey guys I'm Scott I also can't sign out

00:07:23,370 --> 00:07:27,870
of Twitter apparently before giving a

00:07:24,810 --> 00:07:29,399
presentation apologies um so let's say

00:07:27,870 --> 00:07:31,289
for the sake of argument that we're

00:07:29,399 --> 00:07:32,969
convinced by this so we're convinced by

00:07:31,289 --> 00:07:34,469
by what Jeff was saying earlier about

00:07:32,969 --> 00:07:37,080
using sprout for and leveraging some of

00:07:34,469 --> 00:07:39,419
these things then let's let's talk about

00:07:37,080 --> 00:07:42,870
how we build it our job as builders and

00:07:39,419 --> 00:07:44,219
sort of twofold right you know 11 we

00:07:42,870 --> 00:07:46,110
build the things we're on the hook for

00:07:44,219 --> 00:07:48,539
building but we also have to look for

00:07:46,110 --> 00:07:50,339
these patterns these ways to to build

00:07:48,539 --> 00:07:52,249
them better next time to always be

00:07:50,339 --> 00:07:54,529
better today than we were yesterday

00:07:52,249 --> 00:07:57,199
so I want to talk about some of the the

00:07:54,529 --> 00:07:59,749
patterns we've seen in building these

00:07:57,199 --> 00:08:01,519
kind of applications so you sort of know

00:07:59,749 --> 00:08:03,319
what to expect because the the low-level

00:08:01,519 --> 00:08:04,579
tutorials are out there you can get

00:08:03,319 --> 00:08:06,289
started there's there's nothing blocking

00:08:04,579 --> 00:08:07,669
every single person in this room can

00:08:06,289 --> 00:08:08,659
build this kind of application even if

00:08:07,669 --> 00:08:12,049
you know absolutely nothing about

00:08:08,659 --> 00:08:15,859
JavaScript so let's talk about the three

00:08:12,049 --> 00:08:17,569
phases of building an API so we start

00:08:15,859 --> 00:08:19,519
small because we're pragmatic people we

00:08:17,569 --> 00:08:23,089
use something like Sinatra or maybe we

00:08:19,519 --> 00:08:25,219
use a thin rails application and our

00:08:23,089 --> 00:08:27,079
endpoints are very very simple very very

00:08:25,219 --> 00:08:30,379
straightforward right so in this example

00:08:27,079 --> 00:08:33,289
because we all use to do list as our as

00:08:30,379 --> 00:08:35,389
our classic example code over to saying

00:08:33,289 --> 00:08:37,309
find all the Jews in our system return

00:08:35,389 --> 00:08:38,809
that as a JSON blob and this is a

00:08:37,309 --> 00:08:40,579
perfectly wonderful place to start this

00:08:38,809 --> 00:08:42,259
is appropriate for a new project you

00:08:40,579 --> 00:08:44,839
know there's there's no amount of

00:08:42,259 --> 00:08:46,430
ceremony it's inappropriate to to start

00:08:44,839 --> 00:08:48,199
building castles in the clouds before

00:08:46,430 --> 00:08:51,110
you've actually run into problems but

00:08:48,199 --> 00:08:54,290
these this this approach will will lead

00:08:51,110 --> 00:08:56,360
to problems eventually as you add more

00:08:54,290 --> 00:08:58,100
and more models more and more concepts

00:08:56,360 --> 00:08:59,569
to your business domain you find

00:08:58,100 --> 00:09:01,850
yourself writing a lot of repetitive

00:08:59,569 --> 00:09:03,620
wiring code right you'll you'll find

00:09:01,850 --> 00:09:06,319
yourself doing that same sort of all dot

00:09:03,620 --> 00:09:08,029
to JSON throughout your code base so

00:09:06,319 --> 00:09:10,069
that you're not only is it you know

00:09:08,029 --> 00:09:11,180
horrible to be writing the same code

00:09:10,069 --> 00:09:14,149
over and over but when it's time to

00:09:11,180 --> 00:09:15,319
refactor that you've tied yourself to

00:09:14,149 --> 00:09:18,949
this approach and you've created more

00:09:15,319 --> 00:09:20,360
pain that you need to in addition to

00:09:18,949 --> 00:09:22,459
that there's there's also the case where

00:09:20,360 --> 00:09:25,250
you're also writing the same the same

00:09:22,459 --> 00:09:26,839
make Sinatra code or same rails code I'm

00:09:25,250 --> 00:09:29,750
we're using Sinatra's examples we cannot

00:09:26,839 --> 00:09:32,509
do all this in rails as well and and so

00:09:29,750 --> 00:09:34,300
you'll write that pattern of get / model

00:09:32,509 --> 00:09:36,740
name over and over as a route right

00:09:34,300 --> 00:09:38,899
especially if you are sticking to kind

00:09:36,740 --> 00:09:43,250
of crud operations that that part of it

00:09:38,899 --> 00:09:45,860
as well it's a lot of repetition so then

00:09:43,250 --> 00:09:47,600
we move to a different approach we build

00:09:45,860 --> 00:09:52,759
abstractions we detect these patterns

00:09:47,600 --> 00:09:54,470
and we build on top right so we we sort

00:09:52,759 --> 00:09:56,199
again if you choose to not sure it's

00:09:54,470 --> 00:09:58,250
very easy to build these kinds of

00:09:56,199 --> 00:10:00,319
abstractions or patterns on top of it

00:09:58,250 --> 00:10:02,029
you can do so with rails as well I think

00:10:00,319 --> 00:10:03,889
it's a it may be a little more

00:10:02,029 --> 00:10:05,820
challenging but regardless and they're

00:10:03,889 --> 00:10:06,810
both fine approaches so you

00:10:05,820 --> 00:10:08,940
automate these things we say

00:10:06,810 --> 00:10:10,830
ninety-eight percent case here is we're

00:10:08,940 --> 00:10:14,370
doing basic crud operations on these

00:10:10,830 --> 00:10:16,380
time offs and that's true of most of our

00:10:14,370 --> 00:10:18,330
models so we're going to create helper

00:10:16,380 --> 00:10:19,980
functions so we don't repeat this and so

00:10:18,330 --> 00:10:21,390
that we can make refactorings in one

00:10:19,980 --> 00:10:24,720
place and apply throughout our entire

00:10:21,390 --> 00:10:26,280
API right so these kinds of abstractions

00:10:24,720 --> 00:10:28,350
are great we've identified patterns we

00:10:26,280 --> 00:10:31,080
put them into place rock and roll we're

00:10:28,350 --> 00:10:34,710
all awesome right so but this this

00:10:31,080 --> 00:10:37,890
carries with it some problems as well so

00:10:34,710 --> 00:10:39,860
as our API grows from here this this

00:10:37,890 --> 00:10:42,210
sort of approach doesn't really handle

00:10:39,860 --> 00:10:45,600
different representations at the same

00:10:42,210 --> 00:10:47,730
model right if your code always assumes

00:10:45,600 --> 00:10:49,770
that I can just pick a model out of my

00:10:47,730 --> 00:10:52,110
application call to JSON and pass that

00:10:49,770 --> 00:10:53,040
down to the client you're going to run

00:10:52,110 --> 00:10:55,680
into scenarios where that's not

00:10:53,040 --> 00:10:58,680
appropriate right the where you may run

00:10:55,680 --> 00:11:00,990
a really good fine-grained look at it to

00:10:58,680 --> 00:11:02,250
do item in one case but in the other

00:11:00,990 --> 00:11:04,050
words you'll probably just want a

00:11:02,250 --> 00:11:05,790
primary key and maybe like a human

00:11:04,050 --> 00:11:07,620
parsable string and that should really

00:11:05,790 --> 00:11:09,210
be it you don't need to know what this

00:11:07,620 --> 00:11:11,040
is you item is created or when you

00:11:09,210 --> 00:11:14,430
finish that etc etc so to leave that for

00:11:11,040 --> 00:11:17,340
an auditing application and then the

00:11:14,430 --> 00:11:19,560
same is true as the exact attributes not

00:11:17,340 --> 00:11:21,090
simply changed between one API endpoint

00:11:19,560 --> 00:11:22,260
to the other but in fact you start to

00:11:21,090 --> 00:11:24,630
keep more of these things server-side

00:11:22,260 --> 00:11:26,640
right like you probably want some rich

00:11:24,630 --> 00:11:28,740
auditing of who's doing one on your

00:11:26,640 --> 00:11:30,720
system that clients will probably never

00:11:28,740 --> 00:11:32,940
care about or most of your clients won't

00:11:30,720 --> 00:11:34,620
care about and again if you're just

00:11:32,940 --> 00:11:36,960
saying that to JSON on some of these

00:11:34,620 --> 00:11:38,820
things it becomes very very hard to make

00:11:36,960 --> 00:11:40,740
those kinds of distinctions to say i

00:11:38,820 --> 00:11:45,870
want to show these attributes but not

00:11:40,740 --> 00:11:47,520
those and then finally as you want to

00:11:45,870 --> 00:11:49,680
scale in various ways whether you want

00:11:47,520 --> 00:11:52,200
to support more performance or things

00:11:49,680 --> 00:11:54,690
like that this also becomes comes

00:11:52,200 --> 00:11:56,280
challenging your concrete example is you

00:11:54,690 --> 00:11:58,950
know perhaps for some views of these

00:11:56,280 --> 00:12:02,970
to-do lists it's okay for them to be 15

00:11:58,950 --> 00:12:05,490
minutes or an hour out of date right and

00:12:02,970 --> 00:12:07,410
but for other for other representations

00:12:05,490 --> 00:12:09,060
that same model then it becomes more

00:12:07,410 --> 00:12:11,010
challenging and you probably want more

00:12:09,060 --> 00:12:12,360
real-time availability of that

00:12:11,010 --> 00:12:13,620
especially if you've just done a right

00:12:12,360 --> 00:12:15,330
or something like that it's going to

00:12:13,620 --> 00:12:16,000
change the state of the application you

00:12:15,330 --> 00:12:18,220
need to know right

00:12:16,000 --> 00:12:19,720
way those sort of those those sort of

00:12:18,220 --> 00:12:21,580
abstractions those patterns we're

00:12:19,720 --> 00:12:25,150
looking at don't support those those

00:12:21,580 --> 00:12:26,350
kinds of edge cases very well so we move

00:12:25,150 --> 00:12:27,490
on to what we kind of call the large

00:12:26,350 --> 00:12:28,720
scenario I don't have a great code

00:12:27,490 --> 00:12:30,040
example here cuz I think there's a bunch

00:12:28,720 --> 00:12:31,240
of different ways of solving it we're

00:12:30,040 --> 00:12:35,470
going to talk about those patterns of

00:12:31,240 --> 00:12:36,700
solvent so I think just like Jeff was

00:12:35,470 --> 00:12:39,640
talking about you can wrap these with

00:12:36,700 --> 00:12:41,710
decorators or presenters right that the

00:12:39,640 --> 00:12:43,540
sort of transform your model based on on

00:12:41,710 --> 00:12:45,250
how it's being consumed and these

00:12:43,540 --> 00:12:47,050
presenters can do things like select a

00:12:45,250 --> 00:12:49,360
subset of the attributes that you're

00:12:47,050 --> 00:12:51,880
interested in or they can do things like

00:12:49,360 --> 00:12:52,990
say well for whatever model you pass to

00:12:51,880 --> 00:12:54,520
me I'm going to store this in memcache

00:12:52,990 --> 00:12:56,920
that's going to have a 15 minute

00:12:54,520 --> 00:12:58,030
expiration date and it's going to be

00:12:56,920 --> 00:12:59,350
much better for everybody involved

00:12:58,030 --> 00:13:00,730
because our database is going to be

00:12:59,350 --> 00:13:02,560
happy our users going to be happy

00:13:00,730 --> 00:13:04,270
everything is great and you can just

00:13:02,560 --> 00:13:06,400
have this sort of memcache reusable

00:13:04,270 --> 00:13:10,780
presenter that you can use wherever in

00:13:06,400 --> 00:13:13,420
your application you can also go the

00:13:10,780 --> 00:13:16,180
approach of actually doing like JSON

00:13:13,420 --> 00:13:17,560
templated views right um you know if

00:13:16,180 --> 00:13:20,650
you're in a rails application you can

00:13:17,560 --> 00:13:23,080
just do JSON BRB in a file and tada

00:13:20,650 --> 00:13:27,280
you're creating your JSON template your

00:13:23,080 --> 00:13:28,480
JSON view and the nets that's great if

00:13:27,280 --> 00:13:30,010
you're using the built-in rails

00:13:28,480 --> 00:13:32,320
functionality be aware that it's still

00:13:30,010 --> 00:13:33,820
fairly verbose to do it that way there's

00:13:32,320 --> 00:13:35,830
a couple of gems particular robble that

00:13:33,820 --> 00:13:39,040
makes it much more wonderful much more

00:13:35,830 --> 00:13:41,440
awesome to do this sort of approach and

00:13:39,040 --> 00:13:43,600
just sort of these declarative json

00:13:41,440 --> 00:13:44,890
views that then you can reuse as

00:13:43,600 --> 00:13:49,300
appropriate for these different

00:13:44,890 --> 00:13:50,589
scenarios and by the way uh just feel a

00:13:49,300 --> 00:13:51,730
bunch of hyperlinks in there these

00:13:50,589 --> 00:13:52,720
slides will be available online if you

00:13:51,730 --> 00:13:53,500
want to dig into some of the stuff

00:13:52,720 --> 00:13:56,440
because I know we're going a little bit

00:13:53,500 --> 00:13:57,339
fast so let's talk about the client

00:13:56,440 --> 00:13:59,530
let's talk about how to actually build

00:13:57,339 --> 00:14:01,089
this there's bunch of ways to do this

00:13:59,530 --> 00:14:02,260
there's a bunch of great frameworks

00:14:01,089 --> 00:14:06,580
really going to focus on two of them

00:14:02,260 --> 00:14:08,140
back row and sprout core client-side MVC

00:14:06,580 --> 00:14:10,660
is different I'm going to sort of blow

00:14:08,140 --> 00:14:12,220
through this really quickly so there's a

00:14:10,660 --> 00:14:14,080
server-side MVC everything goes to the

00:14:12,220 --> 00:14:15,160
controller but on the client side be

00:14:14,080 --> 00:14:17,560
aware that there's many more ways for

00:14:15,160 --> 00:14:20,110
data to flow around don't bring too much

00:14:17,560 --> 00:14:21,400
your server side mental model into the

00:14:20,110 --> 00:14:22,330
world of client-side JavaScript if

00:14:21,400 --> 00:14:24,400
you're doing this for the first time

00:14:22,330 --> 00:14:26,260
just be aware be aware that things are

00:14:24,400 --> 00:14:29,019
similarly names but are different in use

00:14:26,260 --> 00:14:30,980
because of these rich abilities interact

00:14:29,019 --> 00:14:34,999
alright so let's look two quick examples

00:14:30,980 --> 00:14:36,829
in sprout poor ah so star core and

00:14:34,999 --> 00:14:38,779
backbone both have this concept of views

00:14:36,829 --> 00:14:39,769
right and these views are a little bit

00:14:38,779 --> 00:14:40,999
different than what we think of in

00:14:39,769 --> 00:14:43,970
server views because they make

00:14:40,999 --> 00:14:45,769
distinctions between the the template

00:14:43,970 --> 00:14:48,079
the HTML that's going to be rendered and

00:14:45,769 --> 00:14:50,149
then also this class that sort of wraps

00:14:48,079 --> 00:14:51,829
the the functionality and behavior of

00:14:50,149 --> 00:14:54,889
that template that's associated that

00:14:51,829 --> 00:14:57,259
template right so in this case we have

00:14:54,889 --> 00:14:59,629
this dog view that wraps in this dog

00:14:57,259 --> 00:15:00,920
detail we actually have to say very

00:14:59,629 --> 00:15:02,749
little about this we say there's this

00:15:00,920 --> 00:15:04,459
idea of a current dog controller that

00:15:02,749 --> 00:15:06,230
lives somewhere in our application and

00:15:04,459 --> 00:15:08,749
it's going to pull the interesting bits

00:15:06,230 --> 00:15:09,949
from that current dog and so this is

00:15:08,749 --> 00:15:11,449
really nice because then this current

00:15:09,949 --> 00:15:13,879
drug Controller can worry about things

00:15:11,449 --> 00:15:15,829
like changing the current dog or

00:15:13,879 --> 00:15:18,379
understanding those different system

00:15:15,829 --> 00:15:19,670
level changes that require us to change

00:15:18,379 --> 00:15:21,799
the view can really just say I don't

00:15:19,670 --> 00:15:23,689
care what the dog is you tell me that

00:15:21,799 --> 00:15:29,959
and and all I'll filter these attributes

00:15:23,689 --> 00:15:33,889
down to it and so we have an example

00:15:29,959 --> 00:15:35,389
here of a dog's controller as well and

00:15:33,889 --> 00:15:36,889
and these controllers again similar

00:15:35,389 --> 00:15:38,720
names they can do slightly different

00:15:36,889 --> 00:15:40,069
things so this this example here we have

00:15:38,720 --> 00:15:42,110
two things you can do with this dogs

00:15:40,069 --> 00:15:43,819
controller you can add a corgi and you

00:15:42,110 --> 00:15:45,619
can get that whole number of corgis in

00:15:43,819 --> 00:15:51,379
our system because really there are dogs

00:15:45,619 --> 00:15:53,449
and then there are corgis so my two

00:15:51,379 --> 00:15:56,809
Boston Terriers at home will be very

00:15:53,449 --> 00:15:58,819
safe in his presentation so the ad corgi

00:15:56,809 --> 00:16:01,189
funky creates a new instance of this dog

00:15:58,819 --> 00:16:02,839
model that we have right and then we

00:16:01,189 --> 00:16:05,660
simply say push edge object we add that

00:16:02,839 --> 00:16:06,980
to our art collection and then this

00:16:05,660 --> 00:16:09,860
corgis function is actually a bit more

00:16:06,980 --> 00:16:11,360
interesting so we say filter this entire

00:16:09,860 --> 00:16:14,209
collection based on the property breed

00:16:11,360 --> 00:16:15,799
where it's a corgi and then we want the

00:16:14,209 --> 00:16:18,350
length of that entire collection and

00:16:15,799 --> 00:16:20,509
then we do this really interesting thing

00:16:18,350 --> 00:16:23,509
sorry I'm stepping on the light this

00:16:20,509 --> 00:16:25,759
property each breed that says this what

00:16:23,509 --> 00:16:28,009
dysfunction this metric is dependent on

00:16:25,759 --> 00:16:29,629
the breed property of everything in our

00:16:28,009 --> 00:16:31,759
collection so any time that changes I

00:16:29,629 --> 00:16:33,949
change anything that's bound to me will

00:16:31,759 --> 00:16:35,149
also respond to this these changes right

00:16:33,949 --> 00:16:36,860
it flows throughout your entire

00:16:35,149 --> 00:16:39,679
application so it's very nice very

00:16:36,860 --> 00:16:41,840
declarative so they're pros and cons of

00:16:39,679 --> 00:16:44,510
this approach right the pros

00:16:41,840 --> 00:16:45,890
that it's very succinct it's very

00:16:44,510 --> 00:16:47,960
wonderful and throughout where comes to

00:16:45,890 --> 00:16:49,610
these kind of great patterns and

00:16:47,960 --> 00:16:51,440
abstractions already built for you that

00:16:49,610 --> 00:16:53,240
you can take advantage of if you're

00:16:51,440 --> 00:16:55,880
starting a new application particularly

00:16:53,240 --> 00:16:59,060
I I encourage you to take a look at it

00:16:55,880 --> 00:17:01,160
because it's wonderful on the cons are

00:16:59,060 --> 00:17:03,260
very much related to that though it is a

00:17:01,160 --> 00:17:05,350
very opinionated framework it's very

00:17:03,260 --> 00:17:07,130
hard to get at some of the raw materials

00:17:05,350 --> 00:17:08,750
so if you have a pre-existing

00:17:07,130 --> 00:17:11,540
application with a bunch of JavaScript

00:17:08,750 --> 00:17:13,490
code I would really think hard long

00:17:11,540 --> 00:17:16,160
before you dumped sprout poor index I

00:17:13,490 --> 00:17:17,690
don't think it plays as well with on the

00:17:16,160 --> 00:17:20,060
frameworks as back one which we're going

00:17:17,690 --> 00:17:21,620
to take a look at it's also a framework

00:17:20,060 --> 00:17:23,180
right now that's in a huge state of

00:17:21,620 --> 00:17:24,740
change their they're working

00:17:23,180 --> 00:17:27,020
aggressively towards version 2 point 0

00:17:24,740 --> 00:17:31,310
which is awesome and exciting and lean

00:17:27,020 --> 00:17:34,310
and mean and basically undocumented with

00:17:31,310 --> 00:17:35,930
large exceptions so you you need to be

00:17:34,310 --> 00:17:39,170
aware of that you need to you need to be

00:17:35,930 --> 00:17:40,640
if you're not afraid of blazing new

00:17:39,170 --> 00:17:42,470
territory that absolutely check it out

00:17:40,640 --> 00:17:44,000
but otherwise you might want to wait a

00:17:42,470 --> 00:17:45,320
couple of months until there really is a

00:17:44,000 --> 00:17:48,920
rich set of documentation which they're

00:17:45,320 --> 00:17:50,450
building out every day so let's look at

00:17:48,920 --> 00:17:53,600
the same things and backbone and compare

00:17:50,450 --> 00:17:55,130
contrast so again we've got a dog view

00:17:53,600 --> 00:17:56,750
and backbone has the same idea if we're

00:17:55,130 --> 00:17:59,270
going to separate the HTML that we're

00:17:56,750 --> 00:18:00,770
rendering from the class that sort of

00:17:59,270 --> 00:18:03,380
interprets the behavior and the system

00:18:00,770 --> 00:18:05,720
changes around it's a little bit more of

00:18:03,380 --> 00:18:06,890
our boats right on the there's there's

00:18:05,720 --> 00:18:08,450
two key things I want to point out this

00:18:06,890 --> 00:18:09,890
view has two methods render and

00:18:08,450 --> 00:18:13,190
initialize that are really interesting

00:18:09,890 --> 00:18:15,590
this initialized says for this model I'm

00:18:13,190 --> 00:18:17,750
associated to I need to bind to the

00:18:15,590 --> 00:18:20,810
change of it any time that model changes

00:18:17,750 --> 00:18:24,050
I change which is interesting we didn't

00:18:20,810 --> 00:18:26,480
see that before in in sprout for one of

00:18:24,050 --> 00:18:28,400
the patterns of backbone is that you you

00:18:26,480 --> 00:18:31,190
have it's very common to get this sort

00:18:28,400 --> 00:18:32,660
of lower level access to binding which

00:18:31,190 --> 00:18:35,360
you can do some really interest and

00:18:32,660 --> 00:18:36,980
great things with but you have to do

00:18:35,360 --> 00:18:38,540
really interesting enrich things with it

00:18:36,980 --> 00:18:40,930
you have to be aware of that and

00:18:38,540 --> 00:18:43,460
similarly this render function it says

00:18:40,930 --> 00:18:45,080
anytime it's time for me to render what

00:18:43,460 --> 00:18:47,210
I'm gonna do is I'm the pool my HTML I'm

00:18:45,080 --> 00:18:50,950
going to slap the updated model into it

00:18:47,210 --> 00:18:50,950
and that's going to be my HTML content

00:18:53,690 --> 00:18:57,900
so we also have this this collection I

00:18:56,520 --> 00:18:59,720
label a controller here because it's

00:18:57,900 --> 00:19:02,280
really the same idea and concept to me

00:18:59,720 --> 00:19:03,960
very very very similar you see there we

00:19:02,280 --> 00:19:05,160
explicitly say what model it's related

00:19:03,960 --> 00:19:08,070
to but we had this idea of adding a

00:19:05,160 --> 00:19:09,240
corgi and the count of corgis and the

00:19:08,070 --> 00:19:11,850
Attic org is actually a little more

00:19:09,240 --> 00:19:13,770
succinct very nice you have this ad with

00:19:11,850 --> 00:19:16,380
basically passing in a JSON blob at the

00:19:13,770 --> 00:19:18,480
new model you want to add right and the

00:19:16,380 --> 00:19:19,980
the cordons function there is also very

00:19:18,480 --> 00:19:21,360
similar but you get this nice filter

00:19:19,980 --> 00:19:22,740
function ringing you say apply this

00:19:21,360 --> 00:19:24,120
function to everything in my collection

00:19:22,740 --> 00:19:26,220
and this function will tell you whether

00:19:24,120 --> 00:19:28,980
or not i apply right which is a very

00:19:26,220 --> 00:19:30,480
very powerful tool but the two things to

00:19:28,980 --> 00:19:33,059
be aware of that I sort of point out in

00:19:30,480 --> 00:19:35,790
this is that your you have to be very

00:19:33,059 --> 00:19:37,230
careful again about binding right if

00:19:35,790 --> 00:19:38,700
something has just pointed at this

00:19:37,230 --> 00:19:41,130
collection and that's sort of the end of

00:19:38,700 --> 00:19:42,480
that then when you added new corgi when

00:19:41,130 --> 00:19:44,580
that count of corgis changes it's going

00:19:42,480 --> 00:19:46,169
to have no idea you need to you need to

00:19:44,580 --> 00:19:50,730
set that up yourself you need to be very

00:19:46,169 --> 00:19:53,640
aware of how you're handling binding so

00:19:50,730 --> 00:19:57,299
pros and cons but I think backbone is a

00:19:53,640 --> 00:19:59,549
really powerful set of tools but the con

00:19:57,299 --> 00:20:01,559
is backbone is a really powerful set of

00:19:59,549 --> 00:20:03,450
tools I don't think it comes with a lot

00:20:01,559 --> 00:20:05,880
of the opinions and patterns that you'll

00:20:03,450 --> 00:20:06,929
get with other frameworks if you have

00:20:05,880 --> 00:20:09,570
something that's pre-existing if you

00:20:06,929 --> 00:20:10,850
already have a pre-existing application

00:20:09,570 --> 00:20:14,460
with your own patterns and tools

00:20:10,850 --> 00:20:16,140
absolutely check this out but if if you

00:20:14,460 --> 00:20:18,059
have a newer application especially if

00:20:16,140 --> 00:20:21,000
you don't necessarily have a rich

00:20:18,059 --> 00:20:22,799
background in JavaScript be aware that

00:20:21,000 --> 00:20:24,330
this is a loaded shotgun and you have to

00:20:22,799 --> 00:20:28,890
be pointing it away from yourself at all

00:20:24,330 --> 00:20:30,570
times all right so we're out of time so

00:20:28,890 --> 00:20:34,290
pretend this didn't happen unfortunately

00:20:30,570 --> 00:20:35,640
sorry Dan all right so yeah we're just

00:20:34,290 --> 00:20:38,010
going to fly through these into 10

00:20:35,640 --> 00:20:39,750
seconds all right so you might be used

00:20:38,010 --> 00:20:41,900
to doing things like rendering

00:20:39,750 --> 00:20:45,570
conditionally you can't do that anymore

00:20:41,900 --> 00:20:47,010
you can't Traverse relationships in your

00:20:45,570 --> 00:20:49,080
views which you shouldn't be doing

00:20:47,010 --> 00:20:51,540
anyways but you definitely can't because

00:20:49,080 --> 00:20:53,370
you don't have access to them you can't

00:20:51,540 --> 00:20:55,260
do this kind of conditional rendering of

00:20:53,370 --> 00:20:57,380
flash things and in general you have to

00:20:55,260 --> 00:21:00,210
rethink the way you're doing validations

00:20:57,380 --> 00:21:01,470
this kind of regular JavaScript code

00:21:00,210 --> 00:21:03,659
that you might be used to writing in

00:21:01,470 --> 00:21:04,480
jQuery library function is not going to

00:21:03,659 --> 00:21:07,240
work in

00:21:04,480 --> 00:21:08,530
same way and last but not least careless

00:21:07,240 --> 00:21:10,720
deployments when you're deploying code

00:21:08,530 --> 00:21:13,000
to a server and you have this kind of

00:21:10,720 --> 00:21:15,190
rich client side rendering you can't do

00:21:13,000 --> 00:21:16,510
that in the same way your API might

00:21:15,190 --> 00:21:18,040
break your client side and you might

00:21:16,510 --> 00:21:19,270
need to push an update to your client to

00:21:18,040 --> 00:21:20,590
let them know that if you've ever used

00:21:19,270 --> 00:21:22,000
pivotal tracker you might have seen

00:21:20,590 --> 00:21:23,350
things like this before where they say

00:21:22,000 --> 00:21:28,740
hey you have to refresh your page you

00:21:23,350 --> 00:21:28,740
have to consider those things corgis

00:21:29,400 --> 00:21:38,710
that's wrong thanks guys first foremost

00:21:37,179 --> 00:21:40,450
Engine Yard is a support of the Ruby

00:21:38,710 --> 00:21:42,970
community we also are a provider of

00:21:40,450 --> 00:21:45,190
cloud services and those cloud services

00:21:42,970 --> 00:21:46,840
are supported so the idea behind Engine

00:21:45,190 --> 00:21:48,549
Yard is that if you have an open source

00:21:46,840 --> 00:21:49,809
technology and you need people to

00:21:48,549 --> 00:21:51,610
actually help you scale it and support

00:21:49,809 --> 00:21:53,020
it when you deploy you can come to

00:21:51,610 --> 00:21:54,600
engine yard and so we can provide

00:21:53,020 --> 00:21:56,650
services that go around and make

00:21:54,600 --> 00:21:59,410
languages like Ruby and frameworks like

00:21:56,650 --> 00:22:00,970
rails or padrino more effective for use

00:21:59,410 --> 00:22:03,360
in for actual deployment in production

00:22:00,970 --> 00:22:03,360
scenarios

00:22:09,420 --> 00:22:11,480

YouTube URL: https://www.youtube.com/watch?v=AoRkqMgX-4Q


