Title: LA Ruby Conf 2014 - Write Small Things by Mark Menard
Publication date: 2020-01-24
Playlist: LA RubyConf 2014
Description: 
	"I didn't have time to write a short letter, so I wrote a long one instead." -Mark Twain Writing small classes is hard. You know you should, but how do you actually do it? It's so much easier to write a large class. In this talk we'll build up a set of small classes starting from nothing using a set of directed refactorings applied as we build. All while keeping our classes small. We'll identify abstractions yearning to be free of their big object cages. In the process we'll also see how basic patterns such as composition, delegation and dependency injection emerge from using small objects. We'll even write some tests too.

Help us caption & translate this video!

http://amara.org/v/FG2s/
Captions: 
	00:00:00,100 --> 00:00:30,279
oh good afternoon my name is Mark Menard

00:00:27,310 --> 00:00:32,319
and I run a company called enable labs

00:00:30,279 --> 00:00:36,429
in Troy New York so a little bit about

00:00:32,319 --> 00:00:38,890
me I'm my wife Silva I've got two boys

00:00:36,429 --> 00:00:41,499
as her own avi I'm from and they still

00:00:38,890 --> 00:00:43,179
reside in Troy New York i'm the owner of

00:00:41,499 --> 00:00:45,510
enable labs for boutique consultancy

00:00:43,179 --> 00:00:48,489
doing web and mobile development and

00:00:45,510 --> 00:00:51,339
I've been doing rails for about her Ruby

00:00:48,489 --> 00:00:53,760
for about five years and I've been doing

00:00:51,339 --> 00:00:57,789
software development for a long time and

00:00:53,760 --> 00:01:00,389
in prep for this talk someone on my

00:00:57,789 --> 00:01:02,649
Twitter feed came by with this quote I

00:01:00,389 --> 00:01:05,140
really love it because it really sums up

00:01:02,649 --> 00:01:07,930
why writing small clean well designed

00:01:05,140 --> 00:01:10,149
code is really important because as he

00:01:07,930 --> 00:01:11,649
says great thing about writing shitty

00:01:10,149 --> 00:01:13,329
code that just works is that it's too

00:01:11,649 --> 00:01:16,180
risky and too expensive to change it so

00:01:13,329 --> 00:01:17,500
it lives forever become zombie code it's

00:01:16,180 --> 00:01:18,909
it stuff you don't even want to open the

00:01:17,500 --> 00:01:20,200
flower if you do open the file you open

00:01:18,909 --> 00:01:21,850
the file you're looking to go home I'm

00:01:20,200 --> 00:01:22,840
not going to touch that then you go

00:01:21,850 --> 00:01:24,280
elsewhere and write your own code

00:01:22,840 --> 00:01:31,060
duplicating some of the functionality

00:01:24,280 --> 00:01:33,009
that's in that code so this talks

00:01:31,060 --> 00:01:35,039
probably going to focus on code go to

00:01:33,009 --> 00:01:37,630
the class code the method method level

00:01:35,039 --> 00:01:39,189
because having smoko to the at the class

00:01:37,630 --> 00:01:40,929
level the method level it is the

00:01:39,189 --> 00:01:43,780
fundamental building block of creating

00:01:40,929 --> 00:01:45,039
small code that can be composed to

00:01:43,780 --> 00:01:48,840
create systems that are loosely coupled

00:01:45,039 --> 00:01:51,729
I want to initially dispel a few

00:01:48,840 --> 00:01:54,759
concepts that you might have about what

00:01:51,729 --> 00:01:56,700
clean code or what small code is it's

00:01:54,759 --> 00:01:59,170
not actually about less lines of code

00:01:56,700 --> 00:02:02,109
it's about smaller method small classes

00:01:59,170 --> 00:02:03,640
and a smaller surface of your object

00:02:02,109 --> 00:02:08,050
that you have to understand to get your

00:02:03,640 --> 00:02:11,950
work done fundamentally writing small

00:02:08,050 --> 00:02:13,360
code it's a design discipline I was

00:02:11,950 --> 00:02:14,560
talking with the guys yesterday

00:02:13,360 --> 00:02:16,990
workshop and it's kind of a bait and

00:02:14,560 --> 00:02:19,720
switch you can't write small code from

00:02:16,990 --> 00:02:22,360
scratch at least I can I've been at it

00:02:19,720 --> 00:02:24,630
for a long time I still suck at it it's

00:02:22,360 --> 00:02:27,250
an iterative process of refactoring and

00:02:24,630 --> 00:02:30,670
tactical design at the code class and

00:02:27,250 --> 00:02:32,080
method level so this really about design

00:02:30,670 --> 00:02:33,790
and refactoring as much is it about

00:02:32,080 --> 00:02:35,470
writing small code because design and

00:02:33,790 --> 00:02:38,590
refactoring is the way to write small

00:02:35,470 --> 00:02:42,070
code we don't just sit down from scratch

00:02:38,590 --> 00:02:49,330
and write it you evolve to it it's

00:02:42,070 --> 00:02:53,020
iterative it's process it's emergent so

00:02:49,330 --> 00:02:54,730
what do I mean it's not about total wine

00:02:53,020 --> 00:02:57,370
count well factor codes probably going

00:02:54,730 --> 00:02:58,870
to have more lines it's not about meth

00:02:57,370 --> 00:03:00,940
account you're probably going to end up

00:02:58,870 --> 00:03:02,830
with more methods it's definitely not

00:03:00,940 --> 00:03:04,950
about class counters almost assured

00:03:02,830 --> 00:03:07,660
we're going to end up with more classes

00:03:04,950 --> 00:03:09,340
it's about small methods and small

00:03:07,660 --> 00:03:10,810
classes that you can compose together

00:03:09,340 --> 00:03:12,340
because the class is the fundamental

00:03:10,810 --> 00:03:14,770
building block that we're going to work

00:03:12,340 --> 00:03:17,500
with is the thing that we do as object

00:03:14,770 --> 00:03:19,660
oriented programming us to take concepts

00:03:17,500 --> 00:03:21,190
and separate them and compartmentalize

00:03:19,660 --> 00:03:25,170
them so we can compose them together to

00:03:21,190 --> 00:03:25,170
make systems that will live a long life

00:03:26,070 --> 00:03:31,630
so why should we strive for this the

00:03:29,980 --> 00:03:33,239
most important one is we do not know

00:03:31,630 --> 00:03:35,650
what the future is going to bring if

00:03:33,239 --> 00:03:36,760
your software succeeds and I have some

00:03:35,650 --> 00:03:38,860
system been out there running with

00:03:36,760 --> 00:03:40,150
clients when I started my business 10

00:03:38,860 --> 00:03:41,290
years ago we still have our first client

00:03:40,150 --> 00:03:43,930
they're still running the piece of code

00:03:41,290 --> 00:03:45,640
that we put out there for them and they

00:03:43,930 --> 00:03:48,549
live long if you succeed it's going to

00:03:45,640 --> 00:03:50,200
live and it's going to change you want

00:03:48,549 --> 00:03:51,549
to raise the level of abstraction it's

00:03:50,200 --> 00:03:53,830
easier to wait raise the level of

00:03:51,549 --> 00:03:56,799
abstraction if you have small code small

00:03:53,830 --> 00:03:58,810
methods and small classes you want to

00:03:56,799 --> 00:04:00,370
create composable components because you

00:03:58,810 --> 00:04:02,170
want to get that functionality that's

00:04:00,370 --> 00:04:03,790
buried in that shitty code that's in

00:04:02,170 --> 00:04:05,980
that big huge file and get it out so you

00:04:03,790 --> 00:04:07,660
don't keep reduplicated it and then end

00:04:05,980 --> 00:04:09,010
up with two versions three versions and

00:04:07,660 --> 00:04:10,150
four versions that are divergent from

00:04:09,010 --> 00:04:13,350
each other and how they actually

00:04:10,150 --> 00:04:16,060
function and fulfill the specification

00:04:13,350 --> 00:04:18,280
and you want to prefer delegation over

00:04:16,060 --> 00:04:20,310
inheritance do it once don't repeat

00:04:18,280 --> 00:04:20,310
yourself

00:04:22,450 --> 00:04:29,180
sorry I was looking at the other side so

00:04:27,380 --> 00:04:31,370
the challenge that we have with small is

00:04:29,180 --> 00:04:33,170
that you're going to end up in

00:04:31,370 --> 00:04:35,480
dependency management hell if you don't

00:04:33,170 --> 00:04:36,830
do it right it's really important that

00:04:35,480 --> 00:04:38,600
you get this right because if you have

00:04:36,830 --> 00:04:39,830
as many small components and they're

00:04:38,600 --> 00:04:40,760
fitting together and you have your

00:04:39,830 --> 00:04:43,040
dependencies go in the wrong direction

00:04:40,760 --> 00:04:44,420
it's going to become a rat's nest you

00:04:43,040 --> 00:04:45,770
don't want to be there and you're gonna

00:04:44,420 --> 00:04:47,570
have to manage the context within your

00:04:45,770 --> 00:04:48,800
objects run and you're probably already

00:04:47,570 --> 00:04:51,110
doing that if you're doing test-driven

00:04:48,800 --> 00:04:53,840
development because your code actually

00:04:51,110 --> 00:04:56,240
has to run into context already the test

00:04:53,840 --> 00:04:58,580
context in the actual production running

00:04:56,240 --> 00:04:59,750
context but if you're using a mocking

00:04:58,580 --> 00:05:03,380
framework and you've ever used class

00:04:59,750 --> 00:05:07,700
named any instant stub you're not

00:05:03,380 --> 00:05:09,350
context independent so the goal with

00:05:07,700 --> 00:05:11,720
small units of understandable code that

00:05:09,350 --> 00:05:13,940
are amenable to change that's what we're

00:05:11,720 --> 00:05:15,980
doing trying to do today our three main

00:05:13,940 --> 00:05:20,540
tools are extract method extract class

00:05:15,980 --> 00:05:23,890
and composed method longer methods are

00:05:20,540 --> 00:05:27,140
harder to understand than short methods

00:05:23,890 --> 00:05:31,730
longer classes are harder to understand

00:05:27,140 --> 00:05:33,470
then short classes you can't fit it on a

00:05:31,730 --> 00:05:36,050
screen you have to keep scrolling up and

00:05:33,470 --> 00:05:40,520
down up and down it's hard to keep in

00:05:36,050 --> 00:05:42,110
mind what you're working on what did it

00:05:40,520 --> 00:05:44,350
stay up there oh I'm already been all

00:05:42,110 --> 00:05:46,670
the way down at the bottom of the file

00:05:44,350 --> 00:05:48,770
the other thing is you have argument if

00:05:46,670 --> 00:05:52,160
you have methods that take lots of

00:05:48,770 --> 00:05:53,990
arguments you're in trouble those are

00:05:52,160 --> 00:05:58,760
hard to extract they have a lot of

00:05:53,990 --> 00:06:01,880
context around them the other thing work

00:05:58,760 --> 00:06:03,710
on is a composed method the composed

00:06:01,880 --> 00:06:05,840
method is a great way to write self

00:06:03,710 --> 00:06:07,310
documenting code that when you come to

00:06:05,840 --> 00:06:08,930
when you open it up hopefully up near

00:06:07,310 --> 00:06:11,090
the top of the class there's some method

00:06:08,930 --> 00:06:13,340
it's got a few lines on it it tells you

00:06:11,090 --> 00:06:19,370
what the thing does in English not

00:06:13,340 --> 00:06:22,060
comments but actual code so let's talk

00:06:19,370 --> 00:06:22,060
about methods

00:06:23,139 --> 00:06:29,439
I love this quote this is from

00:06:25,509 --> 00:06:31,240
refactoring by field Harvey Fowler in

00:06:29,439 --> 00:06:33,999
black if you don't have a copy of this

00:06:31,240 --> 00:06:36,939
book you should get it it's the tactical

00:06:33,999 --> 00:06:38,439
day-to-day skills that you need the

00:06:36,939 --> 00:06:42,879
object program that lives best and

00:06:38,439 --> 00:06:46,449
longest are those with short methods the

00:06:42,879 --> 00:06:47,919
operative word here is best remember

00:06:46,449 --> 00:06:53,050
that shitty code it also lives forever

00:06:47,919 --> 00:06:56,080
but it's not good short methods short

00:06:53,050 --> 00:07:01,360
classes composable those are the best

00:06:56,080 --> 00:07:04,779
code that's what we want to get to so

00:07:01,360 --> 00:07:12,000
the first rule of methods is do one

00:07:04,779 --> 00:07:14,349
thing do it well and do only that thing

00:07:12,000 --> 00:07:15,969
yet we achieve that every time we write

00:07:14,349 --> 00:07:17,620
code every time I sit down every time

00:07:15,969 --> 00:07:19,509
I'm doing something no but that's the

00:07:17,620 --> 00:07:21,219
goal that's where we're pushing for

00:07:19,509 --> 00:07:23,529
every time or where you should be

00:07:21,219 --> 00:07:27,310
pushing for every time that you sit down

00:07:23,529 --> 00:07:29,289
and you create code and there's one

00:07:27,310 --> 00:07:33,870
that's hiding in here about the do only

00:07:29,289 --> 00:07:35,680
that thing is don't have side effects

00:07:33,870 --> 00:07:37,419
object-oriented program is imperative

00:07:35,680 --> 00:07:39,339
programmers we love having lots of side

00:07:37,419 --> 00:07:41,050
effects in our code if you can avoid

00:07:39,339 --> 00:07:42,879
side effects you're going to have a

00:07:41,050 --> 00:07:52,000
better long-term relationship with your

00:07:42,879 --> 00:07:54,099
program use a descriptive name this

00:07:52,000 --> 00:07:56,349
one's really important naming is one of

00:07:54,099 --> 00:08:01,000
the hardest thing we do but you gotta

00:07:56,349 --> 00:08:03,430
work at it the fewer arguments the

00:08:01,000 --> 00:08:07,990
better my goal when I'm writing code is

00:08:03,430 --> 00:08:11,710
no arguments 0 not at nil one maybe two

00:08:07,990 --> 00:08:14,560
if I have to three if it's really

00:08:11,710 --> 00:08:16,360
necessary but I really try not to have

00:08:14,560 --> 00:08:19,569
three arguments pretty much anything

00:08:16,360 --> 00:08:21,610
except for a constructor when I'm

00:08:19,569 --> 00:08:23,649
setting up the context for a piece of

00:08:21,610 --> 00:08:25,839
code to work that's what I will have

00:08:23,649 --> 00:08:30,819
more arguments or I'll pass in an option

00:08:25,839 --> 00:08:31,959
hash separate queries from commands if

00:08:30,819 --> 00:08:33,279
you want to ask your object about

00:08:31,959 --> 00:08:35,469
something it shouldn't be twiddling the

00:08:33,279 --> 00:08:36,550
internal state of the object it she was

00:08:35,469 --> 00:08:37,899
giving you something if

00:08:36,550 --> 00:08:39,370
giving a commander should be twiddling

00:08:37,899 --> 00:08:41,169
the internal state of the object in

00:08:39,370 --> 00:08:46,209
doing something don't do them both at

00:08:41,169 --> 00:08:48,550
the same time and of course don't repeat

00:08:46,209 --> 00:08:50,680
yourself as soon as you repeat yourself

00:08:48,550 --> 00:08:52,029
if you have to change that you're going

00:08:50,680 --> 00:08:53,890
to have to go find it in the code no

00:08:52,029 --> 00:08:55,269
matter where it is and eventually you

00:08:53,890 --> 00:08:56,260
won't be able to find all the instances

00:08:55,269 --> 00:09:01,510
of it and then you're going to have

00:08:56,260 --> 00:09:04,690
divergent behavior so let's build a

00:09:01,510 --> 00:09:06,459
command line option library and I got to

00:09:04,690 --> 00:09:07,930
tell you that part of doing this talk

00:09:06,459 --> 00:09:10,060
that was the hardest thing is coming up

00:09:07,930 --> 00:09:12,790
with an example that people will

00:09:10,060 --> 00:09:17,980
understand the domain that's me d enough

00:09:12,790 --> 00:09:22,720
that you can do in 21 minutes that's

00:09:17,980 --> 00:09:24,610
what I have left so my buddy says hey

00:09:22,720 --> 00:09:26,200
I'm doing some command line programs I

00:09:24,610 --> 00:09:27,970
really if you do you know of an option

00:09:26,200 --> 00:09:29,769
library can you do an option library for

00:09:27,970 --> 00:09:34,060
me I just need to set some flags on the

00:09:29,769 --> 00:09:37,600
command line so I go and say well with

00:09:34,060 --> 00:09:39,519
something like this work for you got my

00:09:37,600 --> 00:09:42,279
command line options new pass at the RV

00:09:39,519 --> 00:09:43,540
and configure in there what options i'm

00:09:42,279 --> 00:09:46,839
looking for here i'm looking for an

00:09:43,540 --> 00:09:48,130
option c option vian option e and then

00:09:46,839 --> 00:09:51,730
down the code you can do something with

00:09:48,130 --> 00:09:54,070
it if options has see if options has be

00:09:51,730 --> 00:09:56,110
of options has ian do the things that i

00:09:54,070 --> 00:09:59,290
need to do in my command line in my

00:09:56,110 --> 00:10:04,329
command line program pretty easy right

00:09:59,290 --> 00:10:08,050
so let's write a spec describe cam

00:10:04,329 --> 00:10:09,970
command line options the options are

00:10:08,050 --> 00:10:11,980
true if they're present so if i set the

00:10:09,970 --> 00:10:15,779
flag on the command line it's true it's

00:10:11,980 --> 00:10:20,709
not there it's false pretty easy right

00:10:15,779 --> 00:10:22,750
so run my spec I've got two failures

00:10:20,709 --> 00:10:28,300
which I should have because I don't have

00:10:22,750 --> 00:10:30,339
any code yet and when I got done here's

00:10:28,300 --> 00:10:33,880
the code that I have a little

00:10:30,339 --> 00:10:37,120
explanation I'm storing those options

00:10:33,880 --> 00:10:39,990
that option C option B option am storing

00:10:37,120 --> 00:10:44,440
it in an array I'm storing the RV's and

00:10:39,990 --> 00:10:45,699
where I'm and I'm also if the person has

00:10:44,440 --> 00:10:48,370
it or not I'm just checking to see is it

00:10:45,699 --> 00:10:50,470
in the allowed flags and was it actually

00:10:48,370 --> 00:10:51,910
in the come in that RV array

00:10:50,470 --> 00:10:53,320
pretty easy because I have to do

00:10:51,910 --> 00:10:57,700
anything there's no validations no

00:10:53,320 --> 00:11:00,940
nothing just is it there and the way

00:10:57,700 --> 00:11:02,640
this gets can figure it up is the

00:11:00,940 --> 00:11:05,710
command line options new take the block

00:11:02,640 --> 00:11:07,480
and I instance eval that so we end up

00:11:05,710 --> 00:11:10,240
calling this option method which just

00:11:07,480 --> 00:11:18,930
takes the flag and shoves it into the

00:11:10,240 --> 00:11:25,830
array voila run my spec no failures I'm

00:11:18,930 --> 00:11:25,830
done then my buddy comes in and says hey

00:11:26,070 --> 00:11:32,530
do you mind if I have one of these that

00:11:29,740 --> 00:11:35,260
will take a string and validate that the

00:11:32,530 --> 00:11:38,140
string is there make sure that my

00:11:35,260 --> 00:11:41,860
options are valid not by okay that

00:11:38,140 --> 00:11:44,910
should be pretty easy that's how I'm

00:11:41,860 --> 00:11:47,230
going to define it in the dsl there

00:11:44,910 --> 00:11:49,060
that's how I'm going to use it options

00:11:47,230 --> 00:11:53,820
dot value give it the thing for the

00:11:49,060 --> 00:11:57,160
value pull it out so let's write a spec

00:11:53,820 --> 00:11:59,500
there's my string option spec it must

00:11:57,160 --> 00:12:02,170
have content it can return the value it

00:11:59,500 --> 00:12:03,490
returns nil if it's not in the RV so if

00:12:02,170 --> 00:12:05,380
you didn't put on the command line I

00:12:03,490 --> 00:12:06,760
just give you an ill so you've got a

00:12:05,380 --> 00:12:11,890
faulty thing so you just do what you

00:12:06,760 --> 00:12:16,150
want to do run my spec three failures

00:12:11,890 --> 00:12:18,580
and I'm failing on undefined method for

00:12:16,150 --> 00:12:21,850
command line options valid because I

00:12:18,580 --> 00:12:23,560
don't have a valid date method yet and I

00:12:21,850 --> 00:12:26,020
wait to in my spec just right the way I

00:12:23,560 --> 00:12:27,610
want to consume the object and start

00:12:26,020 --> 00:12:32,020
evolving the interface of what that

00:12:27,610 --> 00:12:36,160
object is and I want a valid method the

00:12:32,020 --> 00:12:38,140
other one I got is is options value

00:12:36,160 --> 00:12:39,910
saying undefined method value for

00:12:38,140 --> 00:12:41,980
command line options that's my other

00:12:39,910 --> 00:12:43,810
thing so my command line options now has

00:12:41,980 --> 00:12:49,180
to have a value method and a valid

00:12:43,810 --> 00:12:52,780
method time go to work so I write my

00:12:49,180 --> 00:12:54,280
options here that's my valid method to

00:12:52,780 --> 00:12:56,140
go over all the options that the person

00:12:54,280 --> 00:12:58,720
wants to have their I'm now storing the

00:12:56,140 --> 00:12:59,860
options as a hash so I'm putting the the

00:12:58,720 --> 00:13:01,930
thing I'm looking for in the command

00:12:59,860 --> 00:13:04,100
line into the hash and then I'm looking

00:13:01,930 --> 00:13:06,440
at the storm whether it's a boolean

00:13:04,100 --> 00:13:08,630
or whether it's a string in the value in

00:13:06,440 --> 00:13:10,069
the hash so I'm going through that and

00:13:08,630 --> 00:13:12,740
saying okay well let me get that value

00:13:10,069 --> 00:13:15,829
out go find it in the RVs and if it's

00:13:12,740 --> 00:13:17,569
there and it's in its length is a less

00:13:15,829 --> 00:13:21,980
than three and it's a string than oh

00:13:17,569 --> 00:13:26,569
it's bad we're invalid run my spec I'm

00:13:21,980 --> 00:13:29,569
green got one example passing still got

00:13:26,569 --> 00:13:31,759
to go do that value so we're now we're

00:13:29,569 --> 00:13:33,649
going to go do that now we're iterating

00:13:31,759 --> 00:13:35,839
over the thing looking for the value and

00:13:33,649 --> 00:13:37,730
we're we're indexing into the string to

00:13:35,839 --> 00:13:39,170
try and get it but you know only to deal

00:13:37,730 --> 00:13:41,000
with the boys and strings this is two

00:13:39,170 --> 00:13:44,420
things not a big deal I'm going to go do

00:13:41,000 --> 00:13:47,980
it run my specs five examples zero

00:13:44,420 --> 00:13:52,220
failures so let's look at this code

00:13:47,980 --> 00:13:54,380
there's problems here first off we've

00:13:52,220 --> 00:13:56,209
got duplication we're going through and

00:13:54,380 --> 00:13:57,800
digging the value out of the RV's in the

00:13:56,209 --> 00:14:02,120
two different methods so you got

00:13:57,800 --> 00:14:04,430
duplication there and this one I really

00:14:02,120 --> 00:14:06,949
don't like is I'm seeing that option

00:14:04,430 --> 00:14:09,110
type equals string that's starting to

00:14:06,949 --> 00:14:11,329
smell to me like I might be missing some

00:14:09,110 --> 00:14:19,009
concept here there's an abstraction that

00:14:11,329 --> 00:14:20,810
I'm missing here so it's time to do a

00:14:19,009 --> 00:14:22,910
refactoring I want to get that digging

00:14:20,810 --> 00:14:24,819
into the RV's out of there so if we're

00:14:22,910 --> 00:14:26,750
extracting method the way we do it is we

00:14:24,819 --> 00:14:29,029
identify the code that's at a lower

00:14:26,750 --> 00:14:32,509
level of abstraction and a method we

00:14:29,029 --> 00:14:34,040
move it to another method and then we

00:14:32,509 --> 00:14:41,990
reference it and the method we moved it

00:14:34,040 --> 00:14:44,509
out of so over here in our code here we

00:14:41,990 --> 00:14:46,130
extracted a wrong value for option

00:14:44,509 --> 00:14:48,709
method that digs through the RV so we

00:14:46,130 --> 00:14:50,209
only have to do it in one place and we

00:14:48,709 --> 00:14:52,759
reference it in the two other places and

00:14:50,209 --> 00:14:57,399
the code where that used to be run our

00:14:52,759 --> 00:14:57,399
specs and we're green

00:14:58,329 --> 00:15:04,809
here's my code I got 38 lines of code

00:15:00,579 --> 00:15:09,339
including white space it's okay it's not

00:15:04,809 --> 00:15:11,019
great because i still got these option

00:15:09,339 --> 00:15:11,920
types equals string hanging around but

00:15:11,019 --> 00:15:15,389
you know if i only need to deal with

00:15:11,920 --> 00:15:15,389
boyens and strings not such a big deal

00:15:18,209 --> 00:15:22,929
the other thing i see going on is I got

00:15:20,559 --> 00:15:24,670
those magic numbers whether the length

00:15:22,929 --> 00:15:26,079
is less than 3 or the wrong option

00:15:24,670 --> 00:15:28,480
values I'm taking the index of 2 to the

00:15:26,079 --> 00:15:30,459
end of the string that's really detailed

00:15:28,480 --> 00:15:32,379
kind of stuff but you know it works and

00:15:30,459 --> 00:15:35,259
my buddy says he's done with it so I'm

00:15:32,379 --> 00:15:40,299
done then a week later comes in and says

00:15:35,259 --> 00:15:41,529
hey you know we do integers and the guys

00:15:40,299 --> 00:15:45,369
are in the workshop yes you will tell

00:15:41,529 --> 00:15:46,839
you at this point the code explodes if

00:15:45,369 --> 00:15:49,119
you start doing the value you start

00:15:46,839 --> 00:15:50,379
doing the valid the validate method you

00:15:49,119 --> 00:15:53,259
start getting into it you start having

00:15:50,379 --> 00:15:55,709
complex logic in here you start having

00:15:53,259 --> 00:15:57,610
lots of this unless ha's and nesting

00:15:55,709 --> 00:16:00,009
we're going to go through and take a

00:15:57,610 --> 00:16:01,509
look at it so right my spec there's my

00:16:00,009 --> 00:16:02,980
integer must have content must be an

00:16:01,509 --> 00:16:04,809
integer can return the value as an

00:16:02,980 --> 00:16:06,489
integer returns nil if it's not in the

00:16:04,809 --> 00:16:10,360
RVs if the person didn't pass to me it's

00:16:06,489 --> 00:16:12,699
just nil run my specs they're pending so

00:16:10,360 --> 00:16:14,439
I implement my first example must have

00:16:12,699 --> 00:16:20,829
content just checking to see there's

00:16:14,439 --> 00:16:24,610
content there so this is my valid when I

00:16:20,829 --> 00:16:26,559
started and I've got that option type in

00:16:24,610 --> 00:16:31,509
there and I've got a new option type

00:16:26,559 --> 00:16:34,269
integer so i guess i need to do some

00:16:31,509 --> 00:16:36,879
logic on that this is really starting to

00:16:34,269 --> 00:16:39,549
stink I don't like what I got here I've

00:16:36,879 --> 00:16:40,749
got a concept here of an option and I

00:16:39,549 --> 00:16:42,009
need to start thinking about getting

00:16:40,749 --> 00:16:42,939
that out of this class because this

00:16:42,009 --> 00:16:45,040
class is getting too many

00:16:42,939 --> 00:16:46,089
responsibilities and this method is

00:16:45,040 --> 00:16:50,199
definitely getting too many

00:16:46,089 --> 00:16:53,139
responsibilities especially when we say

00:16:50,199 --> 00:16:54,669
it's got to be an integer here's what

00:16:53,139 --> 00:17:00,009
our code starts to look like does that

00:16:54,669 --> 00:17:03,100
stink it does I'll go through that later

00:17:00,009 --> 00:17:07,179
but we're in one respects and it runs

00:17:03,100 --> 00:17:09,640
must be an integer is green now it's not

00:17:07,179 --> 00:17:12,730
too bad it's gotten

00:17:09,640 --> 00:17:15,880
worse so it's time to look at that valid

00:17:12,730 --> 00:17:17,980
function I got two returns I don't

00:17:15,880 --> 00:17:19,870
typically like to have two returns from

00:17:17,980 --> 00:17:24,400
a method it's not an absolute rule but I

00:17:19,870 --> 00:17:27,820
don't like it I've got that checking on

00:17:24,400 --> 00:17:30,340
type here on a symbol don't like that

00:17:27,820 --> 00:17:34,210
still got those magic numbers a lot of

00:17:30,340 --> 00:17:36,100
red on there and if anybody digs into

00:17:34,210 --> 00:17:38,260
the code and says why my rescuing falls

00:17:36,100 --> 00:17:40,840
from the integer passenger string just

00:17:38,260 --> 00:17:46,450
type food to I and you're an IRB gives

00:17:40,840 --> 00:17:47,860
you a zero so it's broken so I do little

00:17:46,450 --> 00:17:49,150
refactoring trying to make the code at

00:17:47,860 --> 00:17:50,770
least a little bit more readable now

00:17:49,150 --> 00:17:55,050
I've got a switch statement a switch

00:17:50,770 --> 00:17:55,050
statement screams to me polymorphism and

00:17:56,250 --> 00:18:02,830
it's definite I'm switching on the type

00:17:58,660 --> 00:18:04,810
very very clear so I'm going to add in

00:18:02,830 --> 00:18:06,430
that boolean type so now I've got all

00:18:04,810 --> 00:18:09,390
three of my types of my switch statement

00:18:06,430 --> 00:18:17,200
kind of a place I can keep track of it

00:18:09,390 --> 00:18:18,370
run my specs and I'm green but I'm going

00:18:17,200 --> 00:18:21,280
to get some of that code out of there

00:18:18,370 --> 00:18:22,390
and create some methods with the idea

00:18:21,280 --> 00:18:24,070
that I'm going to be moving these to

00:18:22,390 --> 00:18:25,540
another class I know they're going

00:18:24,070 --> 00:18:27,400
someplace else they're going to a string

00:18:25,540 --> 00:18:28,270
option or something an integer option

00:18:27,400 --> 00:18:30,070
option or something they're going

00:18:28,270 --> 00:18:34,510
someplace else so I'm going to get them

00:18:30,070 --> 00:18:36,700
out of that case statement we just

00:18:34,510 --> 00:18:38,440
reference them in the case statement and

00:18:36,700 --> 00:18:39,700
I'm going to add one for boolean option

00:18:38,440 --> 00:18:43,030
because bullying options are always true

00:18:39,700 --> 00:18:45,040
they can't be they can't be invalid so

00:18:43,030 --> 00:18:48,100
now this is what my valid function looks

00:18:45,040 --> 00:18:50,110
like return false and less send option

00:18:48,100 --> 00:18:52,030
type doing a string figuring out the

00:18:50,110 --> 00:18:53,530
method passing it the raw things and

00:18:52,030 --> 00:18:56,380
getting that stuff if you start doing

00:18:53,530 --> 00:18:57,940
code like this and you're you're putting

00:18:56,380 --> 00:18:59,890
together methods like this and trying to

00:18:57,940 --> 00:19:01,510
get methods and one part of it is just

00:18:59,890 --> 00:19:02,710
changing you have a polymorphic

00:19:01,510 --> 00:19:09,820
relationship that you haven't identified

00:19:02,710 --> 00:19:12,010
yet that's ugly but I mean we extract it

00:19:09,820 --> 00:19:13,810
so the person who looked at this nose

00:19:12,010 --> 00:19:15,250
return false unless the option is valid

00:19:13,810 --> 00:19:20,920
so it's at least a little bit more

00:19:15,250 --> 00:19:24,190
readable run my specs I'm still green

00:19:20,920 --> 00:19:27,100
my file is getting big there's all my

00:19:24,190 --> 00:19:28,660
private methods and there's the stuff

00:19:27,100 --> 00:19:31,900
that I know really shouldn't belong in

00:19:28,660 --> 00:19:33,190
this class it's time to get it out but

00:19:31,900 --> 00:19:34,660
the actual public methods that people

00:19:33,190 --> 00:19:36,880
are looking at are pretty small it has

00:19:34,660 --> 00:19:39,220
valid and value I've actually kept the

00:19:36,880 --> 00:19:42,820
interface and the exposure of this class

00:19:39,220 --> 00:19:45,400
pretty small so let's talk about classes

00:19:42,820 --> 00:19:47,320
how do we write small classes first you

00:19:45,400 --> 00:19:48,700
got to write small methods then talk to

00:19:47,320 --> 00:19:49,900
the class and ask it what it's doing

00:19:48,700 --> 00:19:51,670
have a conversation with your class

00:19:49,900 --> 00:19:54,670
anybody here have a rubber duck on their

00:19:51,670 --> 00:19:55,810
desk sometimes you don't have someone

00:19:54,670 --> 00:19:56,890
around your office to talk to about a

00:19:55,810 --> 00:19:59,700
problem just talked to the rubber duck

00:19:56,890 --> 00:20:01,990
it'll tell you the answer well mine does

00:19:59,700 --> 00:20:04,090
find a good name isolate

00:20:01,990 --> 00:20:05,740
responsibilities this this class now is

00:20:04,090 --> 00:20:07,720
responsible for digging values out of

00:20:05,740 --> 00:20:09,760
that RV and figuring out whether these

00:20:07,720 --> 00:20:11,380
things are valid you want to find a

00:20:09,760 --> 00:20:13,750
cohesive set of variables and properties

00:20:11,380 --> 00:20:15,010
and package those up into something you

00:20:13,750 --> 00:20:16,840
don't want them hanging out without a

00:20:15,010 --> 00:20:22,300
home and then extract that class and

00:20:16,840 --> 00:20:23,880
move the methods so a well-designed

00:20:22,300 --> 00:20:26,260
class is a single responsibility

00:20:23,880 --> 00:20:29,050
cohesive properties small public

00:20:26,260 --> 00:20:31,180
interface prefer with handful methods at

00:20:29,050 --> 00:20:34,540
most let's not talk about active record

00:20:31,180 --> 00:20:37,540
bass implements us you a single use case

00:20:34,540 --> 00:20:39,490
if possible the primary logic is

00:20:37,540 --> 00:20:42,280
expressed in a composed method if you

00:20:39,490 --> 00:20:45,100
can do that and the dependencies are

00:20:42,280 --> 00:20:47,470
injected so let's get a spec for our

00:20:45,100 --> 00:20:48,760
string options it has a flag as valid

00:20:47,470 --> 00:20:50,230
when it has a value can return this

00:20:48,760 --> 00:20:52,210
value when president returns nil with

00:20:50,230 --> 00:20:56,170
the flag is not there on the command

00:20:52,210 --> 00:20:57,430
line I run it and I am all yellow

00:20:56,170 --> 00:20:59,230
because I'm still pending you notice

00:20:57,430 --> 00:21:01,570
that I haven't touched the integer

00:20:59,230 --> 00:21:04,030
options 1 i'm leaving that alone because

00:21:01,570 --> 00:21:05,530
I'm now in a refactor at the moment I'm

00:21:04,030 --> 00:21:08,470
going to go get that class out of there

00:21:05,530 --> 00:21:10,570
and dig it out so here's my string

00:21:08,470 --> 00:21:13,150
options class it needs to know what flag

00:21:10,570 --> 00:21:14,620
it has it's going to store the wrong

00:21:13,150 --> 00:21:16,750
value that was on the command line that

00:21:14,620 --> 00:21:20,800
came out of the RV that's pretty much

00:21:16,750 --> 00:21:22,600
about it for now there's my spec expect

00:21:20,800 --> 00:21:25,470
string options valid to be true when I

00:21:22,600 --> 00:21:25,470
plugged in a value

00:21:28,160 --> 00:21:31,040
and there's my command line options my

00:21:29,810 --> 00:21:32,450
original class on the left-hand side

00:21:31,040 --> 00:21:34,130
we're going to take that method out of

00:21:32,450 --> 00:21:37,000
there and move it over to the valid

00:21:34,130 --> 00:21:40,040
method in the string options class

00:21:37,000 --> 00:21:41,450
that's moving over there and I had to

00:21:40,040 --> 00:21:44,180
bring over that method that digs the

00:21:41,450 --> 00:21:46,970
value out of the raw value that 2 to

00:21:44,180 --> 00:21:50,840
negative 1 index into the string because

00:21:46,970 --> 00:21:53,080
it's Dash P foo so 0 1 then it's 2 and

00:21:50,840 --> 00:21:55,340
beyond that's where my string value is

00:21:53,080 --> 00:21:56,660
so I had to bring that along it's a

00:21:55,340 --> 00:22:01,820
little bit of baggage but I got to have

00:21:56,660 --> 00:22:03,980
it there so you notice something on the

00:22:01,820 --> 00:22:06,980
extract value from raw value down at the

00:22:03,980 --> 00:22:08,810
bottom here no arguments anymore because

00:22:06,980 --> 00:22:11,390
we have cohesion around the properties

00:22:08,810 --> 00:22:13,310
of an option we've completely recreated

00:22:11,390 --> 00:22:15,260
place for those things to live we don't

00:22:13,310 --> 00:22:19,240
have to pass arguments around anymore

00:22:15,260 --> 00:22:23,990
all of our methods have zero arguments

00:22:19,240 --> 00:22:25,400
and now back in our command our original

00:22:23,990 --> 00:22:27,170
class we just delegate to this thing

00:22:25,400 --> 00:22:28,460
string options new for now I don't know

00:22:27,170 --> 00:22:29,870
what flag it is actually in this part of

00:22:28,460 --> 00:22:31,490
the code but i'm just going past in the

00:22:29,870 --> 00:22:33,140
valley the the value and ask if it's

00:22:31,490 --> 00:22:41,390
valid i'm starting to delegate over to

00:22:33,140 --> 00:22:42,710
that class now and but don't be don't

00:22:41,390 --> 00:22:44,570
kid yourself we've created a hard

00:22:42,710 --> 00:22:46,100
dependency here on string options this

00:22:44,570 --> 00:22:48,020
class doesn't work without that class

00:22:46,100 --> 00:22:53,870
being part of being around and we can't

00:22:48,020 --> 00:22:57,860
sub for it here's my integer option and

00:22:53,870 --> 00:23:01,610
here's my string option see some

00:22:57,860 --> 00:23:06,260
duplication quite a bit of it isn't

00:23:01,610 --> 00:23:07,580
there so we're going to extract a parent

00:23:06,260 --> 00:23:09,950
class for these option with content

00:23:07,580 --> 00:23:11,600
because an integer has content after the

00:23:09,950 --> 00:23:12,680
flag and a string has content after the

00:23:11,600 --> 00:23:14,030
flags i'm going to we're going to pull

00:23:12,680 --> 00:23:17,120
out that parent class and move the stuff

00:23:14,030 --> 00:23:18,860
up there and then that's what our string

00:23:17,120 --> 00:23:19,910
option looks like pretty empty isn't it

00:23:18,860 --> 00:23:21,200
i'm going to leave that class around

00:23:19,910 --> 00:23:23,240
because i actually have a use for that

00:23:21,200 --> 00:23:24,260
later then I got me an integer option

00:23:23,240 --> 00:23:25,490
it's a little bit different because I

00:23:24,260 --> 00:23:27,170
actually have to parse the string and

00:23:25,490 --> 00:23:28,760
get the integer out of it and make sure

00:23:27,170 --> 00:23:31,220
it's a valid integer so it's a little

00:23:28,760 --> 00:23:33,680
bit different I run my tests and I'm

00:23:31,220 --> 00:23:36,140
still green so let's talk about

00:23:33,680 --> 00:23:37,730
dependencies if you're not injecting

00:23:36,140 --> 00:23:39,260
dependencies and you're not breaking

00:23:37,730 --> 00:23:40,730
hard dependencies in your code they will

00:23:39,260 --> 00:23:42,980
come back to haunt you

00:23:40,730 --> 00:23:44,990
trust me I've been there I've suffered

00:23:42,980 --> 00:23:48,049
through it I've had to learn this the

00:23:44,990 --> 00:23:49,970
hard way dependency injection and

00:23:48,049 --> 00:23:52,580
depending upon abstractions not

00:23:49,970 --> 00:23:54,230
concretions we have an abstraction in

00:23:52,580 --> 00:23:56,120
our code we haven't identified yet I

00:23:54,230 --> 00:23:57,830
know what it is that you probably a lot

00:23:56,120 --> 00:24:00,080
of you do we have that command option

00:23:57,830 --> 00:24:01,100
container we've got a string option we

00:24:00,080 --> 00:24:03,500
got internet your option we've got a

00:24:01,100 --> 00:24:05,150
boolean option the option is the

00:24:03,500 --> 00:24:06,530
abstraction and we're going to make this

00:24:05,150 --> 00:24:10,480
code now depend upon the option

00:24:06,530 --> 00:24:10,480
abstraction not any of the concretions

00:24:12,429 --> 00:24:17,540
so this is what the code looks like to

00:24:15,650 --> 00:24:20,900
refactorings here this is up in the

00:24:17,540 --> 00:24:23,090
parent class where we're building those

00:24:20,900 --> 00:24:25,669
options instead of sticking just whether

00:24:23,090 --> 00:24:27,740
it's a string or an integer or a boolean

00:24:25,669 --> 00:24:30,500
into that that hash I'm now sticking the

00:24:27,740 --> 00:24:31,700
actual objects into it first I started

00:24:30,500 --> 00:24:34,040
out and I started out and I've got this

00:24:31,700 --> 00:24:37,850
switch case this case statement but I

00:24:34,040 --> 00:24:39,020
know using using convention I can get

00:24:37,850 --> 00:24:41,540
rid of that case statement and

00:24:39,020 --> 00:24:44,600
completely break the dependency on the

00:24:41,540 --> 00:24:47,210
type of the object I go privative option

00:24:44,600 --> 00:24:49,549
in here if I say option type and stick

00:24:47,210 --> 00:24:54,320
underscore option on the end camel eyes

00:24:49,549 --> 00:24:56,210
it and constant eyes it I now have the

00:24:54,320 --> 00:24:57,650
string option integer option or boolean

00:24:56,210 --> 00:25:02,809
option class i can just knew it and

00:24:57,650 --> 00:25:07,460
shove it into the hash that's the first

00:25:02,809 --> 00:25:11,480
version hardcored dependency on type

00:25:07,460 --> 00:25:14,360
here on all those classes and notice all

00:25:11,480 --> 00:25:16,790
the class names are gone we have gotten

00:25:14,360 --> 00:25:21,950
rid of our dependency on string option

00:25:16,790 --> 00:25:23,510
boy an option and integer option so how

00:25:21,950 --> 00:25:26,870
do we separate abstractions we separate

00:25:23,510 --> 00:25:28,340
the one from the how string option

00:25:26,870 --> 00:25:30,470
integer option boolean options they know

00:25:28,340 --> 00:25:33,669
how to get their values out I just want

00:25:30,470 --> 00:25:36,980
to depend upon whether I need options

00:25:33,669 --> 00:25:38,570
the option is the what I need the how is

00:25:36,980 --> 00:25:40,610
in the concretions those particular

00:25:38,570 --> 00:25:45,559
implementations samurai my tests I'm

00:25:40,610 --> 00:25:48,710
pretty red at the moment this is my old

00:25:45,559 --> 00:25:52,070
method for doing the valid and here's my

00:25:48,710 --> 00:25:53,600
new method I just iterate over the

00:25:52,070 --> 00:25:54,500
values and an option tasks which are my

00:25:53,600 --> 00:25:57,020
objects that are the

00:25:54,500 --> 00:26:00,170
those containers and just ask them hey

00:25:57,020 --> 00:26:03,950
ro you guys valid I don't have to depend

00:26:00,170 --> 00:26:06,080
upon that anymore I run my tests and I'm

00:26:03,950 --> 00:26:11,260
mostly green eyed I can't get that value

00:26:06,080 --> 00:26:11,260
out of the string yet that's right there

00:26:13,840 --> 00:26:18,740
so I got to rewrite this value method

00:26:16,700 --> 00:26:20,420
now I can tell you how I go on to the

00:26:18,740 --> 00:26:21,920
point of actually engineering this thing

00:26:20,420 --> 00:26:23,450
and putting in all the integer and

00:26:21,920 --> 00:26:25,490
switching in here this thing gets really

00:26:23,450 --> 00:26:28,460
complicated but I like my one-liner at

00:26:25,490 --> 00:26:35,810
the bottom option what if I you looking

00:26:28,460 --> 00:26:37,040
for tell me your value done but i'm

00:26:35,810 --> 00:26:41,540
still failing because i haven't

00:26:37,040 --> 00:26:43,670
implemented that value method on my my

00:26:41,540 --> 00:26:47,000
my integer option and my string option

00:26:43,670 --> 00:26:49,400
so i'm going to go do that so i

00:26:47,000 --> 00:26:55,340
implement those two things run my tests

00:26:49,400 --> 00:26:58,970
and I'm green done right there's no

00:26:55,340 --> 00:27:01,490
class my command options class there's

00:26:58,970 --> 00:27:04,580
my public methods valid and value that's

00:27:01,490 --> 00:27:06,830
it but I actually moved my adder readers

00:27:04,580 --> 00:27:08,180
for my options are to be down in the

00:27:06,830 --> 00:27:09,680
private section because no one should

00:27:08,180 --> 00:27:11,900
really be mucking around with the

00:27:09,680 --> 00:27:14,660
internals of my class it's not theirs to

00:27:11,900 --> 00:27:17,870
talk to but the core of its these two

00:27:14,660 --> 00:27:20,150
methods def valid all it does is it ER

00:27:17,870 --> 00:27:23,930
eight over the the option objects and

00:27:20,150 --> 00:27:25,610
see if all of them are valid done I want

00:27:23,930 --> 00:27:27,320
to get a particular value out just go

00:27:25,610 --> 00:27:32,240
pull that object out and delegate to it

00:27:27,320 --> 00:27:38,600
and say what's your value then he walks

00:27:32,240 --> 00:27:41,180
in again he wants to do a raise well

00:27:38,600 --> 00:27:44,360
it's actually quite easy I write my spec

00:27:41,180 --> 00:27:46,730
at the top that's my array option class

00:27:44,360 --> 00:27:49,070
only needs to know how to do is to get

00:27:46,730 --> 00:27:51,080
the to take that string that foo bar baz

00:27:49,070 --> 00:27:54,440
split it on commas and send it back as

00:27:51,080 --> 00:27:59,060
an array I add my spec I add in that

00:27:54,440 --> 00:28:03,980
class I run my spec and there it is it's

00:27:59,060 --> 00:28:05,490
green now I'm done for the moment my

00:28:03,980 --> 00:28:08,429
name is Mark Barnard

00:28:05,490 --> 00:28:09,630
that's my company and able labs if

00:28:08,429 --> 00:28:13,610
you're interested about this I would

00:28:09,630 --> 00:28:16,910
love to talk about it any questions

00:28:13,610 --> 00:28:16,910
thank you very much

00:29:05,490 --> 00:29:08,490

YouTube URL: https://www.youtube.com/watch?v=A0aZLDaGozM


