Title: LA Ruby Conf 2014 - Introduction to CRuby source code by Andy Pliszka
Publication date: 2020-01-24
Playlist: LA RubyConf 2014
Description: 
	Understanding of CRuby source code has profound effects on every Ruby developer. In my talk, I will show you how to build Ruby from source. I will explain how to install and configure your new Ruby build on Mac and Linux. I will walk you through CRuby source code and introduce you to a few of the most important CRuby files. I will show you how to hack CRuby and modify some of the fundament Ruby classes in C. I will demonstrate how to write complete Ruby classes in C. Finally, I will show you that CRuby code can run 100 times faster than Ruby code. I hope that this talk will inspire you to learn more about CRuby and hack it on your own.

Help us caption & translate this video!

http://amara.org/v/FG2o/
Captions: 
	00:00:24,800 --> 00:00:30,330
hello everyone my name is andy i work at

00:00:27,930 --> 00:00:32,160
30 laps in New York City and today i

00:00:30,330 --> 00:00:35,309
will give you a quick introduction to

00:00:32,160 --> 00:00:37,440
see Ruby source code first I'm going to

00:00:35,309 --> 00:00:39,630
tell you why you even should consider

00:00:37,440 --> 00:00:41,489
looking at see Ruby then I'm going to

00:00:39,630 --> 00:00:43,770
give you a quick overview of the Ruby

00:00:41,489 --> 00:00:45,120
source code and at the very end i'll

00:00:43,770 --> 00:00:48,480
show you how can hack it and play with

00:00:45,120 --> 00:00:51,090
it okay so what is the motivation i

00:00:48,480 --> 00:00:53,430
think all of us if we have been doing a

00:00:51,090 --> 00:00:56,100
ruby for a couple of years this certain

00:00:53,430 --> 00:00:58,949
plateau that we reach when when we are

00:00:56,100 --> 00:01:00,780
not learning anything new and if you

00:00:58,949 --> 00:01:03,600
want to truly understand the rubies

00:01:00,780 --> 00:01:05,429
object model or meta programming or even

00:01:03,600 --> 00:01:08,520
garbage collection you should take a

00:01:05,429 --> 00:01:11,729
look at the sea source of ruby because a

00:01:08,520 --> 00:01:13,319
lot of your answers will be a earth all

00:01:11,729 --> 00:01:15,840
of your questions will be answered and

00:01:13,319 --> 00:01:18,060
also you will have this epiphany moment

00:01:15,840 --> 00:01:20,700
where you actually will see what code

00:01:18,060 --> 00:01:23,279
actually does all this like singleton

00:01:20,700 --> 00:01:24,810
methods and ghost classes what's what's

00:01:23,279 --> 00:01:28,950
happening behind the behind the scene

00:01:24,810 --> 00:01:31,020
behind curtain you can also consider a

00:01:28,950 --> 00:01:33,749
see if you are working on an application

00:01:31,020 --> 00:01:35,609
that's written in ruby and let's say it

00:01:33,749 --> 00:01:38,130
does some data processing that's a

00:01:35,609 --> 00:01:39,719
little bit slow in ruby because i think

00:01:38,130 --> 00:01:41,429
we all know that Ruby sometimes a little

00:01:39,719 --> 00:01:43,939
bit slower if it comes to large data

00:01:41,429 --> 00:01:46,950
processing what you can do you can write

00:01:43,939 --> 00:01:49,649
99% of your application in Ruby then

00:01:46,950 --> 00:01:51,929
just rewrite the critical sections the

00:01:49,649 --> 00:01:54,749
heavy lifting heavy computational parts

00:01:51,929 --> 00:01:56,669
in C and then you can get 10 to 50 times

00:01:54,749 --> 00:02:01,169
faster code and i'll show you actually

00:01:56,669 --> 00:02:03,209
how to do it it's also eight to look at

00:02:01,169 --> 00:02:07,499
see Ruby if you want to write C

00:02:03,209 --> 00:02:09,629
extensions so for example nokogiri encyc

00:02:07,499 --> 00:02:12,190
they all are actually see extensions

00:02:09,629 --> 00:02:15,880
that take advantage of

00:02:12,190 --> 00:02:19,180
linux libraries like lib xml and the

00:02:15,880 --> 00:02:22,300
ammo you can also consider combining

00:02:19,180 --> 00:02:25,330
ruby NC and then you pretty much have

00:02:22,300 --> 00:02:27,700
the best of both worlds you have ruby

00:02:25,330 --> 00:02:30,010
productivity all the testing frameworks

00:02:27,700 --> 00:02:32,230
you can test your your code using our

00:02:30,010 --> 00:02:34,570
spec but you can still write your

00:02:32,230 --> 00:02:38,020
algorithms in c and get all the benefits

00:02:34,570 --> 00:02:39,630
of see like efficiency speed and and the

00:02:38,020 --> 00:02:43,720
other if that were either written in c

00:02:39,630 --> 00:02:46,510
so i had high level you have high level

00:02:43,720 --> 00:02:48,580
modeling in c coordination of algorithms

00:02:46,510 --> 00:02:51,250
analysis in scripting and on the low

00:02:48,580 --> 00:02:53,500
level you have all your algorithm

00:02:51,250 --> 00:02:55,540
implementations you know manipulation

00:02:53,500 --> 00:02:58,720
manipulation of in-memory data

00:02:55,540 --> 00:03:00,250
structures and even integration with you

00:02:58,720 --> 00:03:04,720
know standard mathematical libraries

00:03:00,250 --> 00:03:06,640
like lab packing etc okay so let's start

00:03:04,720 --> 00:03:08,950
level one which is building our Ruby

00:03:06,640 --> 00:03:11,350
from scratch the first thing that you

00:03:08,950 --> 00:03:15,160
have to do is to simply check out Ruby

00:03:11,350 --> 00:03:18,850
from github and just for safety I I

00:03:15,160 --> 00:03:22,270
checked out this stable release tag 247

00:03:18,850 --> 00:03:23,739
so the results are repeatable if you on

00:03:22,270 --> 00:03:26,890
Mac the first thing that you should do

00:03:23,739 --> 00:03:29,080
is install openssl because you will need

00:03:26,890 --> 00:03:31,390
it for rubygems then you run this

00:03:29,080 --> 00:03:33,580
command out the conf which actually

00:03:31,390 --> 00:03:36,310
configures the source code of of Ruby

00:03:33,580 --> 00:03:40,270
for your particular machine and the last

00:03:36,310 --> 00:03:43,450
step is running this configure utility

00:03:40,270 --> 00:03:45,730
where we specify the prefix and we set

00:03:43,450 --> 00:03:48,100
it to my Ruby in your home folder this

00:03:45,730 --> 00:03:50,250
is where your your Ruby from scratch

00:03:48,100 --> 00:03:53,200
will be installed to then you specify

00:03:50,250 --> 00:03:55,750
optimization flag with 0 0 we pretty

00:03:53,200 --> 00:03:58,269
much disable optimization because if you

00:03:55,750 --> 00:04:02,019
want a hack in an explorer Ruby source

00:03:58,269 --> 00:04:04,090
code and and a compiled binaries that

00:04:02,019 --> 00:04:05,890
makes debugging easier because if there

00:04:04,090 --> 00:04:07,390
is optimization then debugger was start

00:04:05,890 --> 00:04:09,550
jumping two different different lines of

00:04:07,390 --> 00:04:11,590
code it will be unpredictable but if you

00:04:09,550 --> 00:04:14,170
disable optimization everything will be

00:04:11,590 --> 00:04:16,780
easy to debug and the last thing is we

00:04:14,170 --> 00:04:19,030
add the G flag to make sure that all the

00:04:16,780 --> 00:04:22,960
binaries that we will build will include

00:04:19,030 --> 00:04:25,460
sea level debug information after you

00:04:22,960 --> 00:04:28,190
runs configure this is just for your

00:04:25,460 --> 00:04:30,590
for your reference this is what you

00:04:28,190 --> 00:04:32,720
should see in your terminal if you're on

00:04:30,590 --> 00:04:35,240
Linux the process is pretty much the

00:04:32,720 --> 00:04:38,960
same the first thing you have to install

00:04:35,240 --> 00:04:42,080
lip SSL run out the conf and configure

00:04:38,960 --> 00:04:44,090
your your project the only difference is

00:04:42,080 --> 00:04:45,949
the debug flags are a little bit

00:04:44,090 --> 00:04:49,130
different because on Mac we're using ll

00:04:45,949 --> 00:04:52,069
DB and on Linux usually use gdb so we

00:04:49,130 --> 00:04:55,039
just add the g3 and gdb to include

00:04:52,069 --> 00:04:58,759
better debug information sea level debug

00:04:55,039 --> 00:05:00,560
information for gdb once you have your

00:04:58,759 --> 00:05:02,630
source code configured the next thing

00:05:00,560 --> 00:05:05,139
you have to build it so you just run

00:05:02,630 --> 00:05:07,280
make which is just like running rake and

00:05:05,139 --> 00:05:09,650
this will actually compile all the

00:05:07,280 --> 00:05:13,039
sources and will also link them and

00:05:09,650 --> 00:05:15,169
build libraries in the build folder you

00:05:13,039 --> 00:05:18,139
will actually be able to find Ruby Ruby

00:05:15,169 --> 00:05:19,789
binary now after you you build the

00:05:18,139 --> 00:05:22,909
binaries it's a good idea to actually

00:05:19,789 --> 00:05:25,460
run all the unit tests using make make

00:05:22,909 --> 00:05:27,979
check actually a see Ruby comes with

00:05:25,460 --> 00:05:31,270
very comprehensive unit tests you can

00:05:27,979 --> 00:05:33,940
see here there's around 13,000 tests

00:05:31,270 --> 00:05:36,889
from my experience if you check out that

00:05:33,940 --> 00:05:39,740
247 flag they should any follow all the

00:05:36,889 --> 00:05:41,479
steps I tried it on two computers they

00:05:39,740 --> 00:05:43,639
all should be green to you you should be

00:05:41,479 --> 00:05:46,190
fine if you get couple of green tests

00:05:43,639 --> 00:05:48,500
here that's a red test here it's fine

00:05:46,190 --> 00:05:50,120
but if majority of them are failing you

00:05:48,500 --> 00:05:52,280
should probably try and redo it again

00:05:50,120 --> 00:05:56,120
follow all the steps and energy should

00:05:52,280 --> 00:05:58,969
be fine after you make sure that your

00:05:56,120 --> 00:06:01,310
ruby is actually correctly built and it

00:05:58,969 --> 00:06:03,020
works wrote works well you can install

00:06:01,310 --> 00:06:06,320
it and you can do it running make

00:06:03,020 --> 00:06:08,259
install and this this will actually copy

00:06:06,320 --> 00:06:11,750
you can see here that actually copying

00:06:08,259 --> 00:06:14,360
binaries into my Ruby folder it also is

00:06:11,750 --> 00:06:16,580
setting up a gem gem folder structure

00:06:14,360 --> 00:06:23,870
and it even installs couple of default

00:06:16,580 --> 00:06:25,969
gems for you once you installed our Ruby

00:06:23,870 --> 00:06:27,860
from scratch under my Ruby folder you

00:06:25,969 --> 00:06:30,530
still have to inform the shell where

00:06:27,860 --> 00:06:32,570
everything lives and where the gems are

00:06:30,530 --> 00:06:33,979
and where the binaries are so the first

00:06:32,570 --> 00:06:35,779
thing you have to do in your terminal

00:06:33,979 --> 00:06:38,370
set the path to make sure that been

00:06:35,779 --> 00:06:40,860
under my Ruby is the first one

00:06:38,370 --> 00:06:43,650
then you have to configure gem a gem

00:06:40,860 --> 00:06:47,280
home and Jim path to point to your my

00:06:43,650 --> 00:06:48,540
Ruby folder so at this point your Ruby

00:06:47,280 --> 00:06:50,699
from scratch is pretty much set up

00:06:48,540 --> 00:06:54,570
correctly and it shouldn't interfere

00:06:50,699 --> 00:06:57,210
with any of your RV m or a ruby and set

00:06:54,570 --> 00:06:58,919
up to verify it you just run which Ruby

00:06:57,210 --> 00:07:02,010
and then you can secretly see that from

00:06:58,919 --> 00:07:03,570
my Ruby you can even run IRB and when

00:07:02,010 --> 00:07:05,370
you raise inside of it you should see

00:07:03,570 --> 00:07:09,240
that it's actually running the one from

00:07:05,370 --> 00:07:10,949
my Ruby folder okay the last part is

00:07:09,240 --> 00:07:15,840
actually verifying that German is

00:07:10,949 --> 00:07:17,610
correct so if you run Jim and you should

00:07:15,840 --> 00:07:20,310
see that all the folders that reference

00:07:17,610 --> 00:07:23,190
by the environment are pointing to my

00:07:20,310 --> 00:07:24,750
Ruby if you list your gems you will just

00:07:23,190 --> 00:07:27,169
see that we have couple of default

00:07:24,750 --> 00:07:30,229
default gems after installation and

00:07:27,169 --> 00:07:33,479
obviously a good test of our new

00:07:30,229 --> 00:07:35,850
recompiled see Ruby is to install rails

00:07:33,479 --> 00:07:37,830
because it has a lot of dependencies and

00:07:35,850 --> 00:07:39,419
there's a lot of going out there so it's

00:07:37,830 --> 00:07:42,180
a good pretty stress test for our

00:07:39,419 --> 00:07:43,349
installation and after you install rails

00:07:42,180 --> 00:07:47,340
you should actually be able to create

00:07:43,349 --> 00:07:49,289
new rails app and run it and here you

00:07:47,340 --> 00:07:51,960
know you can see that you will have a

00:07:49,289 --> 00:07:53,520
fully complete see Ruby installation

00:07:51,960 --> 00:07:56,669
that you compiled on your own from

00:07:53,520 --> 00:07:58,169
source and that's not that's not very

00:07:56,669 --> 00:08:00,360
impressive but what's impressive is that

00:07:58,169 --> 00:08:03,090
you can now change all those see files

00:08:00,360 --> 00:08:06,330
at your will and experiment with with

00:08:03,090 --> 00:08:08,430
zero be even if you're running rubymine

00:08:06,330 --> 00:08:10,979
you can just simply go to settings and

00:08:08,430 --> 00:08:12,530
set educate path to my Ruby and it

00:08:10,979 --> 00:08:15,500
should be able to use it in ruby mine

00:08:12,530 --> 00:08:19,710
okay so that completes level 1 which is

00:08:15,500 --> 00:08:21,240
within 30 minutes you can install a ruby

00:08:19,710 --> 00:08:25,520
from scratch on your machine and be

00:08:21,240 --> 00:08:28,740
ready to use it ok because we will be

00:08:25,520 --> 00:08:31,530
when you when you change things like see

00:08:28,740 --> 00:08:33,330
Ruby or you hack it when you change make

00:08:31,530 --> 00:08:35,640
a lot of changes to it it's a good idea

00:08:33,330 --> 00:08:37,289
to have debugger set up so there's a

00:08:35,640 --> 00:08:40,469
couple of options these are sea level

00:08:37,289 --> 00:08:43,050
debuggers so you can use ll dbg DB or

00:08:40,469 --> 00:08:47,070
even xcode and there are plugins for vim

00:08:43,050 --> 00:08:49,170
and emacs this is an example on Mac this

00:08:47,070 --> 00:08:51,490
is how you would actually debug and this

00:08:49,170 --> 00:08:57,040
is sea level debugging the bar

00:08:51,490 --> 00:08:59,230
a simple puts hello up case script using

00:08:57,040 --> 00:09:01,660
lld be so the first thing that that you

00:08:59,230 --> 00:09:04,180
should do is you just roll load the Ruby

00:09:01,660 --> 00:09:06,790
binary with the with the up string RB

00:09:04,180 --> 00:09:08,709
script and then you set breakpoint at

00:09:06,790 --> 00:09:12,130
the beginning of the string up case

00:09:08,709 --> 00:09:13,750
method and when you run it your screen

00:09:12,130 --> 00:09:15,459
should look something like this where

00:09:13,750 --> 00:09:17,770
you can actually see that we loaded the

00:09:15,459 --> 00:09:20,170
up string and we actually break a broke

00:09:17,770 --> 00:09:24,520
at the at the first statement of the up

00:09:20,170 --> 00:09:27,670
string method in in Ruby see in Ruby

00:09:24,520 --> 00:09:29,709
string class so here you can you can see

00:09:27,670 --> 00:09:31,959
that you can actually now debug

00:09:29,709 --> 00:09:34,720
internals of Ruby so this is this is

00:09:31,959 --> 00:09:36,490
good also for if you for cases when you

00:09:34,720 --> 00:09:38,350
have in production let's say seg faults

00:09:36,490 --> 00:09:40,899
this allows you to actually debugging

00:09:38,350 --> 00:09:43,779
and figure out what's going on you can

00:09:40,899 --> 00:09:46,149
even use xcode to debug your see Ruby

00:09:43,779 --> 00:09:48,880
code this is an example i think we are

00:09:46,149 --> 00:09:52,690
debugging a array at that push the hash

00:09:48,880 --> 00:09:55,660
push here okay so now we have seen Ruby

00:09:52,690 --> 00:09:57,459
and we have debugger set up next thing

00:09:55,660 --> 00:10:00,220
is let's do actually quick overview of

00:09:57,459 --> 00:10:04,990
the of the folder structure and of the

00:10:00,220 --> 00:10:13,500
holes see Cinco base of see Ruby I'll

00:10:04,990 --> 00:10:23,950
just switch to to them okay so here so

00:10:13,500 --> 00:10:28,839
here you can see that looks sorry about

00:10:23,950 --> 00:10:30,550
that all right there you go okay little

00:10:28,839 --> 00:10:34,029
bit difficult well I think I can manage

00:10:30,550 --> 00:10:36,250
okay so here is the this is the default

00:10:34,029 --> 00:10:39,279
0 0 B folder that I checked out right

00:10:36,250 --> 00:10:41,140
this is it has a lot of subfolders

00:10:39,279 --> 00:10:42,399
here's but but don't worry about any of

00:10:41,140 --> 00:10:44,260
them they are not really important

00:10:42,399 --> 00:10:46,170
except this one extensions then I'm

00:10:44,260 --> 00:10:49,720
going to tell you about in a second and

00:10:46,170 --> 00:10:51,640
you can see here that most of the files

00:10:49,720 --> 00:10:53,529
that we care about are in the root

00:10:51,640 --> 00:10:56,380
folder so you don't have to go into any

00:10:53,529 --> 00:11:00,070
sub folders so for example Ruby array

00:10:56,380 --> 00:11:02,490
class is actually defined here in array

00:11:00,070 --> 00:11:02,490
dot C

00:11:03,860 --> 00:11:12,860
you can also find nothing's like string

00:11:10,000 --> 00:11:14,870
or your major classes are actually

00:11:12,860 --> 00:11:17,060
defined in the root folder so it's very

00:11:14,870 --> 00:11:19,459
easy to figure out where where the stuff

00:11:17,060 --> 00:11:21,440
is and you can start looking at them and

00:11:19,459 --> 00:11:22,790
just trying to reverse engineer what's

00:11:21,440 --> 00:11:26,660
going on there's not a lot of

00:11:22,790 --> 00:11:28,339
documentation but the code is written in

00:11:26,660 --> 00:11:30,410
such a way that's very easy to

00:11:28,339 --> 00:11:31,730
understand and once you know as long as

00:11:30,410 --> 00:11:34,029
you know a little bit about Ruby you

00:11:31,730 --> 00:11:36,680
will be if you will feel like at home

00:11:34,029 --> 00:11:39,529
okay so let's take a look at something

00:11:36,680 --> 00:11:41,329
simple for example fix now right so I'm

00:11:39,529 --> 00:11:51,560
going to find that fixed now is actually

00:11:41,329 --> 00:11:54,350
defined in numeric file there we go so

00:11:51,560 --> 00:11:55,519
if you look at that file the structure

00:11:54,350 --> 00:11:57,529
of the files is actually almost

00:11:55,519 --> 00:11:58,700
identical at the top you have a couple

00:11:57,529 --> 00:12:01,310
of includes you don't have to worry

00:11:58,700 --> 00:12:05,000
about it there is a couple of macro see

00:12:01,310 --> 00:12:07,700
macros and pretty much majority of of

00:12:05,000 --> 00:12:11,750
the file or definitions of of the

00:12:07,700 --> 00:12:16,670
functions definition of C functions that

00:12:11,750 --> 00:12:19,880
are actual Ruby methods and at the

00:12:16,670 --> 00:12:29,329
bottom you can see here there's always

00:12:19,880 --> 00:12:30,829
this init method which you can we just

00:12:29,329 --> 00:12:34,149
switch this to mirror for a second

00:12:30,829 --> 00:12:34,149
because it's not going to work for me

00:12:36,220 --> 00:12:39,459
sorry about that

00:12:49,300 --> 00:12:52,050
ok

00:12:59,010 --> 00:13:04,120
okay so now it should be faster sorry

00:13:01,840 --> 00:13:13,990
about that so here you can see that

00:13:04,120 --> 00:13:16,020
there's this init method that they are

00:13:13,990 --> 00:13:19,240
basically initialize all the classes and

00:13:16,020 --> 00:13:21,820
array has it a string has it everything

00:13:19,240 --> 00:13:23,320
else has it and if you look here in the

00:13:21,820 --> 00:13:26,920
middle there's actually definition of

00:13:23,320 --> 00:13:29,260
the if u ZT it you can see that there's

00:13:26,920 --> 00:13:31,210
definition of the thick Sonam fixed on

00:13:29,260 --> 00:13:33,580
glass you can see clearly here right

00:13:31,210 --> 00:13:35,980
that we have some so we said fixed now

00:13:33,580 --> 00:13:38,230
fixed now we use define class within

00:13:35,980 --> 00:13:40,720
with its name fixed now edit inherit

00:13:38,230 --> 00:13:41,860
from an integer right index the next

00:13:40,720 --> 00:13:43,630
thing that we are doing we actually

00:13:41,860 --> 00:13:45,790
define method on this fixed num class

00:13:43,630 --> 00:13:49,510
which is to string and it's actually

00:13:45,790 --> 00:13:52,030
implemented by this by this fixed 2 s.c

00:13:49,510 --> 00:13:54,880
function you can even see that there are

00:13:52,030 --> 00:13:57,550
things like defining aliases defining

00:13:54,880 --> 00:13:59,860
methods etc so it's very easy to follow

00:13:57,550 --> 00:14:01,420
if you know the classes Ruby classes you

00:13:59,860 --> 00:14:04,090
shouldn't have any problems with

00:14:01,420 --> 00:14:07,270
actually understanding what's going on

00:14:04,090 --> 00:14:09,570
here let's take a look at let's say an

00:14:07,270 --> 00:14:09,570
array

00:14:16,120 --> 00:14:21,230
so this is the array class the structure

00:14:18,950 --> 00:14:22,850
of the file is exactly the same in the

00:14:21,230 --> 00:14:24,950
middle you have at the top you have a

00:14:22,850 --> 00:14:27,770
couple of C macros in the middle we have

00:14:24,950 --> 00:14:30,350
all the definitions of the of the

00:14:27,770 --> 00:14:32,690
methods in C and at the bottom you

00:14:30,350 --> 00:14:34,640
always have this init method that pretty

00:14:32,690 --> 00:14:36,290
much initialize the class and here you

00:14:34,640 --> 00:14:39,590
can see that the pattern is exactly the

00:14:36,290 --> 00:14:42,050
same we have we define a class array

00:14:39,590 --> 00:14:43,760
that headed from an object which is

00:14:42,050 --> 00:14:46,870
equivalent to basically defining class

00:14:43,760 --> 00:14:49,940
array then we include a innumerable

00:14:46,870 --> 00:14:52,340
module we define the lock function this

00:14:49,940 --> 00:14:55,640
is the only difference because in Ruby

00:14:52,340 --> 00:14:57,500
we actually when we do a class name that

00:14:55,640 --> 00:14:59,750
new this step of allocation

00:14:57,500 --> 00:15:01,880
initialization is actually the same but

00:14:59,750 --> 00:15:03,980
in C in C Ruby when you actually do it

00:15:01,880 --> 00:15:06,200
this two-step process first you allocate

00:15:03,980 --> 00:15:08,750
the memory for for the object and then

00:15:06,200 --> 00:15:11,870
you call initialize which is the

00:15:08,750 --> 00:15:14,180
initialization process you can even see

00:15:11,870 --> 00:15:17,510
here that we have this defined singleton

00:15:14,180 --> 00:15:20,060
method if you ever explored a ruby

00:15:17,510 --> 00:15:21,500
object model and metaprogramming you

00:15:20,060 --> 00:15:23,150
should be aware that there are singleton

00:15:21,500 --> 00:15:24,470
methods and this is pretty much what's

00:15:23,150 --> 00:15:27,020
happening when you're defining a

00:15:24,470 --> 00:15:29,000
singleton method so if you really want

00:15:27,020 --> 00:15:31,820
to understand how roomy works being deep

00:15:29,000 --> 00:15:37,580
in 20 week source code will help you a

00:15:31,820 --> 00:15:40,280
lot ok so that's pretty much folder

00:15:37,580 --> 00:15:42,830
structure right we're easy to follow I

00:15:40,280 --> 00:15:44,180
showed you fix now i'll show you string

00:15:42,830 --> 00:15:45,650
I don't think I showed you string but

00:15:44,180 --> 00:15:47,420
it's exactly the same you can see here

00:15:45,650 --> 00:15:49,430
the first thing that you do you define

00:15:47,420 --> 00:15:51,380
cling you define class a string that

00:15:49,430 --> 00:15:54,410
inherits from object then you could

00:15:51,380 --> 00:15:56,450
include the module comparable you define

00:15:54,410 --> 00:15:59,570
an airlock method single the method and

00:15:56,450 --> 00:16:04,310
all the other methods this is the array

00:15:59,570 --> 00:16:07,490
so class definition if you want to

00:16:04,310 --> 00:16:09,320
define a class from scratch in NC you

00:16:07,490 --> 00:16:11,210
can actually do it and most of the

00:16:09,320 --> 00:16:12,770
building classes that come with your

00:16:11,210 --> 00:16:15,650
Ruby installations are actually

00:16:12,770 --> 00:16:18,650
implemented completely in C and this is

00:16:15,650 --> 00:16:20,300
pretty much how they are done ok so

00:16:18,650 --> 00:16:23,570
let's start small right how would you

00:16:20,300 --> 00:16:25,670
add a new method to let's say build an

00:16:23,570 --> 00:16:28,540
array class right it's a two-step

00:16:25,670 --> 00:16:30,310
process for every definition of a method

00:16:28,540 --> 00:16:32,680
it's a two-step process first you have

00:16:30,310 --> 00:16:34,990
to use this helper method that comes

00:16:32,680 --> 00:16:37,300
with see Ruby which is our be defined

00:16:34,990 --> 00:16:40,480
method you specify the class that you

00:16:37,300 --> 00:16:43,000
want added to the name of the method the

00:16:40,480 --> 00:16:44,620
pointer to the function c function that

00:16:43,000 --> 00:16:47,290
actually implements that method and

00:16:44,620 --> 00:16:49,630
number of arguments this 0 is will be

00:16:47,290 --> 00:16:51,250
confusing because you can see here that

00:16:49,630 --> 00:16:56,680
the implementation actually takes one

00:16:51,250 --> 00:17:00,310
argument but every Ruby every function

00:16:56,680 --> 00:17:01,900
in c that implements a ruby method takes

00:17:00,310 --> 00:17:04,210
at least one argument and this is pretty

00:17:01,900 --> 00:17:05,830
much yourself right this is the pointer

00:17:04,210 --> 00:17:10,480
to the object that you call that method

00:17:05,830 --> 00:17:12,190
on so there's at least if it says 0 here

00:17:10,480 --> 00:17:14,950
if you say that zero parameters it's 0

00:17:12,190 --> 00:17:17,320
optional parameter 0 extra parameters

00:17:14,950 --> 00:17:19,690
here I would call it and this is simple

00:17:17,320 --> 00:17:22,870
implementation of the let's say in this

00:17:19,690 --> 00:17:25,180
case length length a method on array

00:17:22,870 --> 00:17:26,800
right so if you are calling length on an

00:17:25,180 --> 00:17:30,490
array in your Ruby code pretty much you

00:17:26,800 --> 00:17:31,960
executing this code okay so when you are

00:17:30,490 --> 00:17:34,000
working with see Ruby you have to

00:17:31,960 --> 00:17:36,910
remember that there are two worlds one

00:17:34,000 --> 00:17:38,710
is C and one is Ruby and when you're

00:17:36,910 --> 00:17:40,090
working with when you're in c function

00:17:38,710 --> 00:17:42,520
you have to remember that you always

00:17:40,090 --> 00:17:45,160
work with direct access to memory there

00:17:42,520 --> 00:17:47,290
are pointers etc and you have to malloc

00:17:45,160 --> 00:17:49,090
and free all your memory so there's no

00:17:47,290 --> 00:17:51,880
garbage collection when you're working

00:17:49,090 --> 00:17:54,070
in Ruby you are working with heap and

00:17:51,880 --> 00:17:58,780
objects and all the memories pretty much

00:17:54,070 --> 00:18:01,390
taken care taken care for you by GC so

00:17:58,780 --> 00:18:03,670
every time you cross the boundary from

00:18:01,390 --> 00:18:06,910
Ruby to see and back you have to

00:18:03,670 --> 00:18:08,710
remember to convert those those types so

00:18:06,910 --> 00:18:10,360
for example here if you are calling a

00:18:08,710 --> 00:18:12,400
method and you're passing in a fixed nom

00:18:10,360 --> 00:18:14,160
and you want to use it in c you have to

00:18:12,400 --> 00:18:17,830
convert it from fixed up to equivalent

00:18:14,160 --> 00:18:21,790
long value and eric there are actually a

00:18:17,830 --> 00:18:23,440
convenience macros numb too long that

00:18:21,790 --> 00:18:25,000
actually will do it for you and if you

00:18:23,440 --> 00:18:26,410
want to go back for example because you

00:18:25,000 --> 00:18:28,360
are returning something from your c

00:18:26,410 --> 00:18:31,210
function where you can convert it back

00:18:28,360 --> 00:18:33,310
from c long type to Ruby fixed num and

00:18:31,210 --> 00:18:36,610
you can use this along to numb

00:18:33,310 --> 00:18:38,740
conversion macro these are all the types

00:18:36,610 --> 00:18:40,480
that are defined in in see Ruby so you

00:18:38,740 --> 00:18:41,380
can see here that pretty much they all

00:18:40,480 --> 00:18:42,970
familiar

00:18:41,380 --> 00:18:44,290
what's interesting is that actually true

00:18:42,970 --> 00:18:47,920
and false are actually defined as

00:18:44,290 --> 00:18:50,020
separate types okay that's really really

00:18:47,920 --> 00:18:52,420
completes this this section of my talk

00:18:50,020 --> 00:18:54,070
which is we looked at a folder structure

00:18:52,420 --> 00:18:56,470
it's not that scary everything is in

00:18:54,070 --> 00:18:59,770
root folder right we also look at this

00:18:56,470 --> 00:19:02,620
simple implementation looked at this

00:18:59,770 --> 00:19:04,750
sample array and string implementations

00:19:02,620 --> 00:19:06,670
we also learn how to define a method and

00:19:04,750 --> 00:19:09,700
we also now know how to convert data

00:19:06,670 --> 00:19:11,500
between C and Ruby and vice versa okay

00:19:09,700 --> 00:19:14,830
so let's take a look at a couple of

00:19:11,500 --> 00:19:18,610
examples so let's say we want to add a

00:19:14,830 --> 00:19:20,350
Fibonacci method to fix them right if we

00:19:18,610 --> 00:19:23,050
were working in Ruby we will just open

00:19:20,350 --> 00:19:25,000
the class and define a method right and

00:19:23,050 --> 00:19:28,930
this is an example how you would do it

00:19:25,000 --> 00:19:30,700
in in pure see so you know it takes take

00:19:28,930 --> 00:19:32,260
along you do something with the long so

00:19:30,700 --> 00:19:34,420
you compute all the numbers in the

00:19:32,260 --> 00:19:36,790
return long the thing is that you cannot

00:19:34,420 --> 00:19:39,250
really use this code directly because it

00:19:36,790 --> 00:19:41,350
only knows about see data types right so

00:19:39,250 --> 00:19:43,840
you have to massage it a little bit so

00:19:41,350 --> 00:19:45,670
it's aware of Ruby data type conversion

00:19:43,840 --> 00:19:48,400
and this is how you do it like this we

00:19:45,670 --> 00:19:50,080
start with a pure c function and this is

00:19:48,400 --> 00:19:52,540
how you convert it to the see Ruby

00:19:50,080 --> 00:19:54,550
convention so first input right like

00:19:52,540 --> 00:19:56,950
every algorithm input processing and

00:19:54,550 --> 00:19:59,140
output you have to convert at input so

00:19:56,950 --> 00:20:01,810
you have to convert it into a proper see

00:19:59,140 --> 00:20:04,630
Ruby a signature so it returns an object

00:20:01,810 --> 00:20:06,790
and it takes an object self reference to

00:20:04,630 --> 00:20:09,100
self so this this will be the fixed num

00:20:06,790 --> 00:20:11,110
that we call the function on and then we

00:20:09,100 --> 00:20:13,810
do some processing every time we access

00:20:11,110 --> 00:20:16,720
a ruby object we have to unpack it into

00:20:13,810 --> 00:20:19,510
ruin to see type and when we return data

00:20:16,720 --> 00:20:21,880
back to to Ruby well we have to convert

00:20:19,510 --> 00:20:23,950
it back from C type to Ruby type right

00:20:21,880 --> 00:20:25,180
it's not really complicated usually what

00:20:23,950 --> 00:20:26,980
you definitely have to do it at the

00:20:25,180 --> 00:20:28,420
beginning and end of the method and and

00:20:26,980 --> 00:20:30,580
you know all the places where you need

00:20:28,420 --> 00:20:32,830
to access the data and the last thing

00:20:30,580 --> 00:20:34,990
that you have to do is actually define

00:20:32,830 --> 00:20:37,300
that binding that define that on the

00:20:34,990 --> 00:20:40,060
fixed num c5 is actually implemented by

00:20:37,300 --> 00:20:42,550
that function ok I can show you that

00:20:40,060 --> 00:20:46,600
actually in the thing I have it running

00:20:42,550 --> 00:20:49,930
here so if I control Z and I run IRB you

00:20:46,600 --> 00:20:53,230
can see here that for example 10 class

00:20:49,930 --> 00:20:55,299
is a fixed number right and i think i

00:20:53,230 --> 00:20:57,519
can call see fit on it

00:20:55,299 --> 00:21:00,279
there you go and ten Fibonacci number is

00:20:57,519 --> 00:21:02,139
55 so you see i'm running straight Ruby

00:21:00,279 --> 00:21:04,899
from the command line and then at that

00:21:02,139 --> 00:21:07,899
function is there and this is how we can

00:21:04,899 --> 00:21:10,509
pretty much change up a play play play a

00:21:07,899 --> 00:21:14,289
prank on someone by up for example

00:21:10,509 --> 00:21:15,820
switching like plus and minus cos so

00:21:14,289 --> 00:21:17,889
it's like it's a good way to prank

00:21:15,820 --> 00:21:19,690
someone but it's also a good way to

00:21:17,889 --> 00:21:21,399
learn about Ruby right you can see that

00:21:19,690 --> 00:21:23,590
you can make that connection you can

00:21:21,399 --> 00:21:27,039
make it fun and entertaining but you can

00:21:23,590 --> 00:21:29,669
make connection between actually what we

00:21:27,039 --> 00:21:31,960
write in Ruby and how it's how it's done

00:21:29,669 --> 00:21:34,570
okay next thing I think I have next

00:21:31,960 --> 00:21:36,429
example okay so what's the benefit like

00:21:34,570 --> 00:21:39,460
obvious benefit is actually performance

00:21:36,429 --> 00:21:41,200
if you look at this implementation test

00:21:39,460 --> 00:21:45,460
of this implementation so i calculate a

00:21:41,200 --> 00:21:47,109
million times a fib ad using plain ruby

00:21:45,460 --> 00:21:49,179
implementation and see ruby

00:21:47,109 --> 00:21:51,489
implementation and you can see that Ruby

00:21:49,179 --> 00:21:53,830
takes 26 seconds and and and see takes

00:21:51,489 --> 00:21:55,690
less than a second so see Ruby is 30

00:21:53,830 --> 00:21:58,330
times faster and if you look at this

00:21:55,690 --> 00:22:00,759
implementation right honestly you can I

00:21:58,330 --> 00:22:02,950
can probably rewrite it in a couple of

00:22:00,759 --> 00:22:05,379
minutes right and again I can get 30

00:22:02,950 --> 00:22:07,450
times a faster code I don't think this

00:22:05,379 --> 00:22:09,580
is good idea it's a good idea to rewrite

00:22:07,450 --> 00:22:11,980
your whole web application this way but

00:22:09,580 --> 00:22:14,289
if you if you have a crucial code like

00:22:11,980 --> 00:22:16,570
if you use certain algorithms that are

00:22:14,289 --> 00:22:18,340
already probably written in c you can

00:22:16,570 --> 00:22:20,019
speed up your coat a lot and i show you

00:22:18,340 --> 00:22:21,879
later on that I how you can actually

00:22:20,019 --> 00:22:24,580
speed up like for example something as

00:22:21,879 --> 00:22:26,559
simple as sort 10 times ok so next

00:22:24,580 --> 00:22:29,169
example is the simple prime like climb

00:22:26,559 --> 00:22:30,879
test the same thing you hear is the

00:22:29,169 --> 00:22:33,129
equivalent the ruby version here's

00:22:30,879 --> 00:22:35,470
equivalent see Ruby version we do all

00:22:33,129 --> 00:22:37,480
the conversions like we pass in value

00:22:35,470 --> 00:22:39,249
self every time you see a value think

00:22:37,480 --> 00:22:43,690
about it as it's in basically reference

00:22:39,249 --> 00:22:45,999
to a ruby object and you define the

00:22:43,690 --> 00:22:48,429
binding and the performance again you

00:22:45,999 --> 00:22:50,649
know like we test really large prime if

00:22:48,429 --> 00:22:54,269
its prime it takes 30 seconds in Ruby

00:22:50,649 --> 00:22:57,970
and it takes two seconds in see it sees

00:22:54,269 --> 00:22:59,710
79 faster in this case ok so we can even

00:22:57,970 --> 00:23:03,490
go farther so for example this is a

00:22:59,710 --> 00:23:06,100
special case for for an array in Ruby

00:23:03,490 --> 00:23:09,390
our arrays pretty much you can create a

00:23:06,100 --> 00:23:12,039
Ruby a race of any object but you pay a

00:23:09,390 --> 00:23:14,890
pretty much performance penalty for that

00:23:12,039 --> 00:23:17,230
so if you for some reason want to sort

00:23:14,890 --> 00:23:18,780
millions of numbers well it's maybe it's

00:23:17,230 --> 00:23:22,630
good idea to actually create a

00:23:18,780 --> 00:23:25,179
simplement ation of salonga ray so you

00:23:22,630 --> 00:23:27,490
see here that we define a class c longer

00:23:25,179 --> 00:23:29,770
ray that inherits from an object we

00:23:27,490 --> 00:23:31,179
define a lock function for it and then

00:23:29,770 --> 00:23:33,669
we define all the methods right this is

00:23:31,179 --> 00:23:35,200
how initially our constructor quicksort

00:23:33,669 --> 00:23:38,190
that actually does quick short on our

00:23:35,200 --> 00:23:40,870
numbers and a square bracket accessors

00:23:38,190 --> 00:23:42,010
so this is the allocation method this

00:23:40,870 --> 00:23:43,659
this is the method that actually

00:23:42,010 --> 00:23:45,820
allocates memory for our new objects

00:23:43,659 --> 00:23:48,190
every time you call see you long array

00:23:45,820 --> 00:23:50,710
that new this will be called and we take

00:23:48,190 --> 00:23:52,780
advantage of this date if the data makes

00:23:50,710 --> 00:23:54,820
struck this is something that see Ruby

00:23:52,780 --> 00:23:56,620
provides to you and you just have to

00:23:54,820 --> 00:23:58,240
provide you the type of structure that

00:23:56,620 --> 00:24:00,010
you want allocate and it's going to do

00:23:58,240 --> 00:24:02,799
all the work for you and we'll give you

00:24:00,010 --> 00:24:06,070
a pointer to that to that memory

00:24:02,799 --> 00:24:07,809
location as a return value so this is

00:24:06,070 --> 00:24:10,600
how we actually define our array it's a

00:24:07,809 --> 00:24:15,370
simple pointer to list a basically array

00:24:10,600 --> 00:24:16,809
of lungs and it has also a size this is

00:24:15,370 --> 00:24:19,000
actually the constructor the proper

00:24:16,809 --> 00:24:22,150
constructor so every time you call see

00:24:19,000 --> 00:24:24,909
longer leg that knew that 10 10 this is

00:24:22,150 --> 00:24:26,799
what will get cold so you see that size

00:24:24,909 --> 00:24:29,380
is actually passing as as a as a

00:24:26,799 --> 00:24:32,830
parameter and here you can see that we

00:24:29,380 --> 00:24:35,679
use this data get struck this is so we

00:24:32,830 --> 00:24:37,510
can get the pointer in memory of the

00:24:35,679 --> 00:24:39,280
Ruby object that we are working on and

00:24:37,510 --> 00:24:41,620
this Ruby object is actually our array

00:24:39,280 --> 00:24:44,230
and then what we do is simply malik

00:24:41,620 --> 00:24:46,870
enough memory to keep 10 elements and we

00:24:44,230 --> 00:24:48,309
set its size this is the access all

00:24:46,870 --> 00:24:50,590
right you can I think you can see the

00:24:48,309 --> 00:24:52,510
pattern that we get again we use the

00:24:50,590 --> 00:24:54,940
same fret of the same a function data

00:24:52,510 --> 00:24:57,700
gets truck to get the address in memory

00:24:54,940 --> 00:25:00,909
address of that structure and then we

00:24:57,700 --> 00:25:04,140
just convert the de pasión values and we

00:25:00,909 --> 00:25:06,520
said set the element of the array in c

00:25:04,140 --> 00:25:08,169
this is the setter which is almost

00:25:06,520 --> 00:25:09,640
exactly the same except for this line

00:25:08,169 --> 00:25:12,429
instead of getting we're actually

00:25:09,640 --> 00:25:14,020
setting that value so this is the

00:25:12,429 --> 00:25:17,140
quicksort so this is a good example how

00:25:14,020 --> 00:25:19,929
we can actually write a Serie B adapter

00:25:17,140 --> 00:25:22,389
for pure c function so this

00:25:19,929 --> 00:25:24,999
is this adapter function actually what

00:25:22,389 --> 00:25:27,730
it does it gets the address of our in

00:25:24,999 --> 00:25:30,700
memory object and passes it directly to

00:25:27,730 --> 00:25:34,269
pure a quick sort array function and

00:25:30,700 --> 00:25:36,159
this is the plains train and trivial

00:25:34,269 --> 00:25:37,899
implementation of quicksort that you can

00:25:36,159 --> 00:25:41,320
find in any like algorithms books or

00:25:37,899 --> 00:25:42,820
something and it knows nothing what's

00:25:41,320 --> 00:25:44,409
interesting is it knows nothing about

00:25:42,820 --> 00:25:46,600
Ruby doesn't even care that its run from

00:25:44,409 --> 00:25:49,389
Ruby right so you can get a lot of

00:25:46,600 --> 00:25:51,129
algorithms that were written ten years

00:25:49,389 --> 00:25:52,809
ago 15 years ago that we're not even

00:25:51,129 --> 00:25:54,669
intended to be used in Ruby and you can

00:25:52,809 --> 00:25:57,129
use them in Ruby and you don't have to

00:25:54,669 --> 00:25:58,570
you know reinvent them or even rewrite

00:25:57,129 --> 00:26:00,519
them in Ruby I think it's faster to

00:25:58,570 --> 00:26:03,369
actually new see Ruby to reuse those

00:26:00,519 --> 00:26:06,009
arguments then actually rewrite them in

00:26:03,369 --> 00:26:08,139
Ruby so the performance so it's a

00:26:06,009 --> 00:26:10,029
trivial example right we are using also

00:26:08,139 --> 00:26:12,669
very simple quicks of the implementation

00:26:10,029 --> 00:26:14,710
and just because we rewrote it and see

00:26:12,669 --> 00:26:16,419
it's ten times faster it doesn't really

00:26:14,710 --> 00:26:18,610
matter if you're sorting 15 numbers

00:26:16,419 --> 00:26:20,950
right but if you are sorting millions of

00:26:18,610 --> 00:26:22,240
numbers 10 times faster there might be

00:26:20,950 --> 00:26:25,080
something maybe a difference between

00:26:22,240 --> 00:26:30,190
something that was worth doing or not

00:26:25,080 --> 00:26:32,169
okay so that pretty much makes completes

00:26:30,190 --> 00:26:33,610
the fourth level so now you can you

00:26:32,169 --> 00:26:37,419
should be able to create your own new

00:26:33,610 --> 00:26:38,860
class and you know play a prank on

00:26:37,419 --> 00:26:41,679
someone I guess we fixed up when you

00:26:38,860 --> 00:26:43,600
swap some of the methods and you can see

00:26:41,679 --> 00:26:47,019
that most of them are actually at least

00:26:43,600 --> 00:26:49,179
10 times faster I have another another

00:26:47,019 --> 00:26:51,669
level that talks about graph but I don't

00:26:49,179 --> 00:26:54,009
have enough enough time for but you can

00:26:51,669 --> 00:26:55,389
download my slides and actually see here

00:26:54,009 --> 00:26:57,610
I'll just show you that when you're

00:26:55,389 --> 00:27:00,309
working with graphs you can get like 50

00:26:57,610 --> 00:27:03,509
times faster execution or 19 if you

00:27:00,309 --> 00:27:06,070
doing breadth-first search okay so

00:27:03,509 --> 00:27:07,869
what's important to remember about this

00:27:06,070 --> 00:27:10,720
talk is I think the most important thing

00:27:07,869 --> 00:27:12,999
to remember is that see Robbie is not

00:27:10,720 --> 00:27:14,919
really scary within half an hour you can

00:27:12,999 --> 00:27:18,429
have a working installation that you can

00:27:14,919 --> 00:27:20,139
hack and play with and you can use it to

00:27:18,429 --> 00:27:21,759
learn more about Ruby especially if

00:27:20,139 --> 00:27:25,149
you're a little bit tired of like coding

00:27:21,759 --> 00:27:27,639
in Ruby for 34 years because you can you

00:27:25,149 --> 00:27:30,369
can discover a new layers hidden layers

00:27:27,639 --> 00:27:33,820
you can even do some crazy stuff like

00:27:30,369 --> 00:27:38,230
multiple inheritance obviously not in

00:27:33,820 --> 00:27:39,700
production but uh but you can also learn

00:27:38,230 --> 00:27:42,220
more about meta programming and you can

00:27:39,700 --> 00:27:43,330
if there is a need you can you know if

00:27:42,220 --> 00:27:45,759
someone tells you that your application

00:27:43,330 --> 00:27:47,859
is slow in Ruby well maybe the good the

00:27:45,759 --> 00:27:50,619
best solution is just you know rewrite

00:27:47,859 --> 00:27:52,570
some of the slow bits in C and there's

00:27:50,619 --> 00:27:55,629
no there's no faster way to code right

00:27:52,570 --> 00:27:59,019
it seems pretty much the fastest okay

00:27:55,629 --> 00:28:00,700
last note is pivotal is hiring we have

00:27:59,019 --> 00:28:05,470
you know office is pretty much in every

00:28:00,700 --> 00:28:08,490
city so any questions all right that's

00:28:05,470 --> 00:28:08,490
it thank you very much

00:28:54,660 --> 00:28:57,660

YouTube URL: https://www.youtube.com/watch?v=Chk9c8EwrCA


