Title: LA Ruby Conf 2014 - As easy as Rails by Justin Searls
Publication date: 2020-01-24
Playlist: LA RubyConf 2014
Description: 
	Rails came to prominence because it makes web development easy. So easy, in fact, that we're afraid to ask if Rails might be the wrong choice for our web application. Because before Rails, web development was so much more painful and difficult. It turns out that Rails is an awful choice for at least one type of web application: fat-client JavaScript user interfaces. We've been slow to admit this because it's hard to deny the comfort and convenience of the Rails ecosystem. But viewed more broadly, the Ruby ecosystem's client-side tooling has been completely outflanked in the past two years by the tremendous community focus on Node.js and Grunt. In this talk, we'll discuss why building single page apps with Rails isn't as easy as we might assume. We'll uncover the dangers of tangling our front-end UI with our backend-services in a single repository. Finally, I'll demonstrate some of the amazing things that development tools are capable of when JavaScript is treated as a first-class language and when (just like in Rails) we strive to make developers' work easier.

Help us caption & translate this video!

http://amara.org/v/FG2q/
Captions: 
	00:00:25,230 --> 00:00:30,610
I'm super glad to be here my talks title

00:00:28,300 --> 00:00:32,850
is as easy as rails which is hopefully

00:00:30,610 --> 00:00:37,839
confusing because I'm going to explain

00:00:32,850 --> 00:00:39,640
my name is a Justin Searles I Thank You

00:00:37,839 --> 00:00:41,920
Kobe I come from a company called test

00:00:39,640 --> 00:00:45,639
double where a consultancy in Columbus

00:00:41,920 --> 00:00:48,550
Ohio we are we're here to make friends

00:00:45,639 --> 00:00:51,010
basically we know a lot of great

00:00:48,550 --> 00:00:53,350
developers in the Midwest and we've been

00:00:51,010 --> 00:00:55,239
traveling to conferences in Europe and

00:00:53,350 --> 00:00:56,859
around the country and this is my first

00:00:55,239 --> 00:00:58,449
time ever really to Southern California

00:00:56,859 --> 00:01:00,670
so I'm really really glad to be here I'd

00:00:58,449 --> 00:01:01,780
love to meet you today if I don't get

00:01:00,670 --> 00:01:04,180
the chance to meet you today I really

00:01:01,780 --> 00:01:06,189
appreciate it you could send me feedback

00:01:04,180 --> 00:01:08,079
on Twitter or send us an email to say

00:01:06,189 --> 00:01:11,289
hello we're just looking to get to know

00:01:08,079 --> 00:01:13,030
people in the area this isn't talked

00:01:11,289 --> 00:01:15,520
about three of my favorite things one is

00:01:13,030 --> 00:01:18,100
cupcakes the second is the planet Earth

00:01:15,520 --> 00:01:21,090
I'm not sure if you're a fan and third

00:01:18,100 --> 00:01:24,939
is monolithic application architecture

00:01:21,090 --> 00:01:26,979
so say that you own a bakery at the

00:01:24,939 --> 00:01:29,229
bakery a customer comes to you says you

00:01:26,979 --> 00:01:30,820
want something sweet so you cook them up

00:01:29,229 --> 00:01:31,990
a cupcake and he says you know I on

00:01:30,820 --> 00:01:33,789
second thought I wanted a little bit

00:01:31,990 --> 00:01:35,649
sweeter maybe a little extra crunch so

00:01:33,789 --> 00:01:38,320
you put some sprinkles on top for him

00:01:35,649 --> 00:01:39,280
and then customer says you know I'm

00:01:38,320 --> 00:01:40,929
sorry to do this one on third thought

00:01:39,280 --> 00:01:42,820
I'd really love it if it was filled with

00:01:40,929 --> 00:01:45,039
hot fruit filling and then you're like

00:01:42,820 --> 00:01:47,380
ah god damn it because he realized that

00:01:45,039 --> 00:01:49,060
cupcake was the totally like the wrong

00:01:47,380 --> 00:01:51,329
abstraction right what the customer

00:01:49,060 --> 00:01:53,950
really wants is a fresh hot baked pie

00:01:51,329 --> 00:01:55,810
and it's an honest mistake you know that

00:01:53,950 --> 00:01:58,060
happens but if this was part of your

00:01:55,810 --> 00:01:59,829
workflow as a baker every time a

00:01:58,060 --> 00:02:02,380
customer came in to immediately assume

00:01:59,829 --> 00:02:03,909
that they need a cupcake only to have to

00:02:02,380 --> 00:02:05,490
throw away the cupcake and bake them

00:02:03,909 --> 00:02:08,050
something else that would be a problem

00:02:05,490 --> 00:02:10,570
so suppose you own a software studio and

00:02:08,050 --> 00:02:12,310
a customer comes to you says hey I need

00:02:10,570 --> 00:02:13,990
a web application so you immediately

00:02:12,310 --> 00:02:15,430
start rails new

00:02:13,990 --> 00:02:17,080
and then they say well you know that

00:02:15,430 --> 00:02:18,940
graph looks really nice but i need some

00:02:17,080 --> 00:02:20,290
zoom and some filter and some more

00:02:18,940 --> 00:02:22,210
dynamic behavior and so you're like well

00:02:20,290 --> 00:02:25,270
or I can I can manage so you sprinkle

00:02:22,210 --> 00:02:26,500
some JavaScript on top and then he's

00:02:25,270 --> 00:02:28,390
like you know I really need this to feel

00:02:26,500 --> 00:02:29,920
a lot more like a native app I want I

00:02:28,390 --> 00:02:31,180
want all these other advanced

00:02:29,920 --> 00:02:34,300
interactive features and you're like ah

00:02:31,180 --> 00:02:36,670
god damn it what they really need is a

00:02:34,300 --> 00:02:38,170
fat client JavaScript application and to

00:02:36,670 --> 00:02:39,310
the extent that there is rails it's off

00:02:38,170 --> 00:02:40,990
to the side and it's really just

00:02:39,310 --> 00:02:42,520
providing JSON services in fact it

00:02:40,990 --> 00:02:46,510
doesn't necessarily need to be rails at

00:02:42,520 --> 00:02:48,130
all honest mistake but of the south for

00:02:46,510 --> 00:02:49,810
studios that I hang out with I run into

00:02:48,130 --> 00:02:52,150
a lot of people for whom that seems like

00:02:49,810 --> 00:02:55,390
their regular work flow and I'm here to

00:02:52,150 --> 00:02:57,100
address that problem today the reason I

00:02:55,390 --> 00:02:59,830
think it keeps coming up specifically to

00:02:57,100 --> 00:03:03,490
the rail studios that I talk to is that

00:02:59,830 --> 00:03:05,590
rails makes life too easy because when I

00:03:03,490 --> 00:03:07,660
when I'm operating in a rails context I

00:03:05,590 --> 00:03:09,250
have all these amazing server-side tools

00:03:07,660 --> 00:03:10,960
so much stuff is within reach and so

00:03:09,250 --> 00:03:12,970
convenient and when I talked to rails

00:03:10,960 --> 00:03:15,310
developers about their favorite client

00:03:12,970 --> 00:03:17,740
side tools usually like they come up

00:03:15,310 --> 00:03:19,150
empty right they'd most like like no one

00:03:17,740 --> 00:03:23,470
hates JavaScript more than Ruby

00:03:19,150 --> 00:03:25,660
developers and of course just kidding

00:03:23,470 --> 00:03:26,830
it's not there are no client-side tools

00:03:25,660 --> 00:03:30,670
that's hyperbole it's an exaggeration

00:03:26,830 --> 00:03:34,230
they exist they're just terrible and

00:03:30,670 --> 00:03:37,300
rusty and require tetanus shot first so

00:03:34,230 --> 00:03:38,890
there's a value proposition that we make

00:03:37,300 --> 00:03:40,960
in our heads whenever whenever a new

00:03:38,890 --> 00:03:43,960
application or a new feature comes to us

00:03:40,960 --> 00:03:46,240
where we decide what the best

00:03:43,960 --> 00:03:48,120
technological approaches and there's two

00:03:46,240 --> 00:03:50,890
big things that factor into that one is

00:03:48,120 --> 00:03:52,780
what's the best implementation for this

00:03:50,890 --> 00:03:55,660
application just just considering only

00:03:52,780 --> 00:03:59,260
only what the app needs to do and then

00:03:55,660 --> 00:04:00,760
the second aspect is what would be

00:03:59,260 --> 00:04:03,010
easiest for me to implement it them and

00:04:00,760 --> 00:04:04,870
because rails is so easy I think that

00:04:03,010 --> 00:04:06,760
too many of us try to solve problems on

00:04:04,870 --> 00:04:08,860
the server side in the Ruby community

00:04:06,760 --> 00:04:12,040
that really would be better solved in

00:04:08,860 --> 00:04:14,860
the browser and so so because that's out

00:04:12,040 --> 00:04:17,680
of balance I see a lot of Ruby devs in

00:04:14,860 --> 00:04:20,350
particular favor rails a little bit too

00:04:17,680 --> 00:04:22,570
much so I have a provocative statement

00:04:20,350 --> 00:04:24,900
to make which is that non rubyists are

00:04:22,570 --> 00:04:27,690
building better JavaScript apps

00:04:24,900 --> 00:04:30,210
in some of my travels this year for test

00:04:27,690 --> 00:04:32,430
double-talking conferences I went to my

00:04:30,210 --> 00:04:35,280
first net only conference and Sofia

00:04:32,430 --> 00:04:37,740
Bulgaria this year and I'm I did not

00:04:35,280 --> 00:04:39,960
expect to have anything in common with

00:04:37,740 --> 00:04:41,100
anybody but all these dotnet developers

00:04:39,960 --> 00:04:42,750
have been building single page

00:04:41,100 --> 00:04:45,120
JavaScript applications for years

00:04:42,750 --> 00:04:46,410
they're all the all new angular they all

00:04:45,120 --> 00:04:48,900
need the best no tooling they were

00:04:46,410 --> 00:04:50,160
really hip and with-it and we were

00:04:48,900 --> 00:04:52,289
talking the same language and it was

00:04:50,160 --> 00:04:54,240
awesome and I didn't expect that because

00:04:52,289 --> 00:04:56,280
I typically assume well dot Nets kind of

00:04:54,240 --> 00:04:58,740
crusty you know whatever and but really

00:04:56,280 --> 00:04:59,970
the reason is their server side isn't so

00:04:58,740 --> 00:05:01,680
awesome that they want to solve

00:04:59,970 --> 00:05:03,180
everything in it so they're making

00:05:01,680 --> 00:05:05,669
honest judgments about where the best

00:05:03,180 --> 00:05:07,169
place to sell the problem is but another

00:05:05,669 --> 00:05:09,479
way you could say if you look back in

00:05:07,169 --> 00:05:13,229
your own career before rails was easy

00:05:09,479 --> 00:05:14,610
for me javascript wasn't hard i remember

00:05:13,229 --> 00:05:16,289
back before rails that i actually wrote

00:05:14,610 --> 00:05:18,449
a decent amount of JavaScript it was

00:05:16,289 --> 00:05:22,199
only once I adopted rails that are

00:05:18,449 --> 00:05:24,750
tapered off now of course ask yourself

00:05:22,199 --> 00:05:28,139
is JavaScript a terrible language yes

00:05:24,750 --> 00:05:30,240
definitely but be careful not to

00:05:28,139 --> 00:05:32,550
conflate is that why writing JavaScript

00:05:30,240 --> 00:05:36,240
is terrible I think we tend to assume

00:05:32,550 --> 00:05:38,160
that so but ask again later at the end

00:05:36,240 --> 00:05:40,380
of this talk ask yourself that because

00:05:38,160 --> 00:05:43,830
I'm not so sure because there's more to

00:05:40,380 --> 00:05:47,880
complexity than just a language so let's

00:05:43,830 --> 00:05:49,260
talk about planet Earth I I one of the

00:05:47,880 --> 00:05:50,520
reasons I love Ruby isn't just for the

00:05:49,260 --> 00:05:51,900
language it's the community I love all

00:05:50,520 --> 00:05:54,389
you guys I don't even know you yet but I

00:05:51,900 --> 00:05:56,610
love you it's because the Ruby community

00:05:54,389 --> 00:05:58,199
has changed the world in so many ways if

00:05:56,610 --> 00:05:59,849
you look if you were to chart all the

00:05:58,199 --> 00:06:02,639
great new tools for web application

00:05:59,849 --> 00:06:06,870
development over time starting 2005 you

00:06:02,639 --> 00:06:09,570
know gem start popping up 2006 as time

00:06:06,870 --> 00:06:11,250
goes on more and more awesome web tools

00:06:09,570 --> 00:06:13,650
best-of-breed tools for building web

00:06:11,250 --> 00:06:16,050
applications not just rails but you know

00:06:13,650 --> 00:06:18,210
hamel SAS all this other cool stuff was

00:06:16,050 --> 00:06:20,580
being born out of the Ruby community and

00:06:18,210 --> 00:06:22,830
so if you wanted the best tooling you

00:06:20,580 --> 00:06:25,110
look to Ruby but then I noticed like

00:06:22,830 --> 00:06:26,400
right in the round beginning of 2012 I

00:06:25,110 --> 00:06:28,710
started to notice something where a new

00:06:26,400 --> 00:06:30,539
browser feature would come up come out

00:06:28,710 --> 00:06:32,460
for for chrome say and then a gem

00:06:30,539 --> 00:06:36,570
wouldn't immediately follow it would be

00:06:32,460 --> 00:06:37,920
a node package and in 2013 I became

00:06:36,570 --> 00:06:39,600
inundated with

00:06:37,920 --> 00:06:41,940
all the best new features of the web

00:06:39,600 --> 00:06:44,910
were being built primarily like you know

00:06:41,940 --> 00:06:45,990
in JavaScript first for a node in terms

00:06:44,910 --> 00:06:48,930
of the tooling that you'd use to

00:06:45,990 --> 00:06:51,000
implement this and so when you think

00:06:48,930 --> 00:06:53,790
about 2014 I know a lot of rubios who

00:06:51,000 --> 00:06:55,650
fear that 2014 this this this cycle is

00:06:53,790 --> 00:06:58,350
going to go even further and JavaScript

00:06:55,650 --> 00:06:59,660
going to ink planet Earth and I can't

00:06:58,350 --> 00:07:04,340
speak to that whether that's accurate

00:06:59,660 --> 00:07:07,200
but Gary Bernhardt seems to think so and

00:07:04,340 --> 00:07:09,210
let's talk about what makes the best

00:07:07,200 --> 00:07:11,940
tools where like if you're a new

00:07:09,210 --> 00:07:13,170
developer and you're trying to figure

00:07:11,940 --> 00:07:15,150
out what the best tool to use is to

00:07:13,170 --> 00:07:16,410
build a website there are certain facts

00:07:15,150 --> 00:07:18,660
that I think we could probably all agree

00:07:16,410 --> 00:07:22,230
to first of all Ruby's tool ecosystem is

00:07:18,660 --> 00:07:23,850
mature but it's crowded nodes ecosystem

00:07:22,230 --> 00:07:25,440
meanwhile is immature but it's very

00:07:23,850 --> 00:07:28,440
innovative there's new stuff getting

00:07:25,440 --> 00:07:30,210
pushed to it every day also it's

00:07:28,440 --> 00:07:31,920
probably fair to say that tool authors

00:07:30,210 --> 00:07:33,780
are not immune to trends they want to go

00:07:31,920 --> 00:07:37,410
where all the hordes of people are going

00:07:33,780 --> 00:07:39,780
so they can get usage I do that that

00:07:37,410 --> 00:07:42,270
tools tend to address the problems of

00:07:39,780 --> 00:07:44,340
their day so a tool for example built as

00:07:42,270 --> 00:07:46,380
a gem in 2008 that hasn't changed a

00:07:44,340 --> 00:07:50,880
whole lot probably is better serving the

00:07:46,380 --> 00:07:52,770
web of 2008 than the web of 2014 you add

00:07:50,880 --> 00:07:54,570
all that together and I I'd like to make

00:07:52,770 --> 00:07:56,490
the statement that nodes web application

00:07:54,570 --> 00:07:58,050
tooling tends to better solve today's

00:07:56,490 --> 00:08:00,210
problems or at least today's problems as

00:07:58,050 --> 00:08:02,010
I run into it which is a sad thing to

00:08:00,210 --> 00:08:03,650
say if you are convinced that you only

00:08:02,010 --> 00:08:06,000
want to write Ruby code all of the time

00:08:03,650 --> 00:08:09,540
let's talk about monolithic application

00:08:06,000 --> 00:08:11,310
architecture rails won the war of web

00:08:09,540 --> 00:08:12,630
application frameworks right I mean

00:08:11,310 --> 00:08:14,040
before rails there was a whole lot of

00:08:12,630 --> 00:08:16,080
web application frameworks think it fits

00:08:14,040 --> 00:08:17,190
and starts but after rails everyone was

00:08:16,080 --> 00:08:21,300
trying to be whales they were stealing

00:08:17,190 --> 00:08:23,340
all these great ideas from rails but we

00:08:21,300 --> 00:08:25,290
often got so caught up in the New York

00:08:23,340 --> 00:08:27,960
rise of rails that we didn't really ask

00:08:25,290 --> 00:08:29,760
ourselves which warranted rails win what

00:08:27,960 --> 00:08:31,200
type of web application is rails best

00:08:29,760 --> 00:08:33,900
suited for because we kind of just tend

00:08:31,200 --> 00:08:36,900
to think of like all web apps being

00:08:33,900 --> 00:08:39,330
equal d changed last year at railsconf

00:08:36,900 --> 00:08:40,800
in a great talk about rails he had a

00:08:39,330 --> 00:08:44,040
quote saying good frameworks are

00:08:40,800 --> 00:08:45,870
extractions not inventions so think

00:08:44,040 --> 00:08:48,110
about rails as an extraction what's

00:08:45,870 --> 00:08:50,670
rails an extraction from well base camp

00:08:48,110 --> 00:08:51,420
the company base camp that makes base

00:08:50,670 --> 00:08:55,050
camp

00:08:51,420 --> 00:08:57,990
they they started with base camp and

00:08:55,050 --> 00:09:00,180
then they extracted out the successful

00:08:57,990 --> 00:09:01,889
bits into something generally reusable

00:09:00,180 --> 00:09:05,220
which of course became Ruby on Rails and

00:09:01,889 --> 00:09:07,829
what sort of bits were those well I had

00:09:05,220 --> 00:09:10,079
a really good URL routing scheme it was

00:09:07,829 --> 00:09:12,089
good for modeling behavior and the

00:09:10,079 --> 00:09:13,410
relationships between those models it

00:09:12,089 --> 00:09:15,389
was good for dealing with persistence

00:09:13,410 --> 00:09:18,920
like saving off to a database and

00:09:15,389 --> 00:09:21,810
managing a sequel query a sequel schema

00:09:18,920 --> 00:09:24,779
good session management for multi-page

00:09:21,810 --> 00:09:27,050
workflows mailers and other ancillary

00:09:24,779 --> 00:09:30,329
things and then arrange a bevy of

00:09:27,050 --> 00:09:33,839
JavaScript alternatives like Ajax ARB

00:09:30,329 --> 00:09:36,480
tags and rjs and then later unobtrusive

00:09:33,839 --> 00:09:38,220
a Jack crb tags and most recently turbo

00:09:36,480 --> 00:09:39,570
links all of these things to prevent us

00:09:38,220 --> 00:09:43,079
from actually writing real raw

00:09:39,570 --> 00:09:44,519
JavaScript in the client why is that you

00:09:43,079 --> 00:09:45,800
know a lot of people poopoo all those

00:09:44,519 --> 00:09:50,190
solutions but it's not that they're bad

00:09:45,800 --> 00:09:51,779
it's not that they are inherently awful

00:09:50,190 --> 00:09:54,269
it's that they solve a very specific

00:09:51,779 --> 00:09:55,920
type of problem from which they were

00:09:54,269 --> 00:09:57,870
extracted from base camp it's just that

00:09:55,920 --> 00:09:59,070
they're not generally useful for a fact

00:09:57,870 --> 00:10:01,050
lion JavaScript application because

00:09:59,070 --> 00:10:02,910
that's not what rails is solving for so

00:10:01,050 --> 00:10:04,620
base camp is like you know it's a

00:10:02,910 --> 00:10:06,449
traditional it's a perfect example of

00:10:04,620 --> 00:10:08,279
like a document driven application you

00:10:06,449 --> 00:10:10,079
start at page one you move to page you

00:10:08,279 --> 00:10:11,519
click a thing you move to page two and

00:10:10,079 --> 00:10:12,630
then you click another thing you move to

00:10:11,519 --> 00:10:15,060
page three that's the type of

00:10:12,630 --> 00:10:19,019
application flow rails was built for and

00:10:15,060 --> 00:10:20,279
I call those HTML user interfaces now if

00:10:19,019 --> 00:10:22,709
you're building a web application at

00:10:20,279 --> 00:10:24,630
HTML is your UI it might look like this

00:10:22,709 --> 00:10:30,329
like you have an anchor tag it's a link

00:10:24,630 --> 00:10:32,339
with a href location and a Content

00:10:30,329 --> 00:10:34,949
obviously but that's not really user

00:10:32,339 --> 00:10:36,209
interface programming right I'm not I'm

00:10:34,949 --> 00:10:37,769
not responsible for any of the stuff

00:10:36,209 --> 00:10:39,240
that like what happens when you click

00:10:37,769 --> 00:10:41,310
the link right the browser's actually

00:10:39,240 --> 00:10:43,800
knows okay I go to this address or how

00:10:41,310 --> 00:10:46,199
to render the link similarly like if I

00:10:43,800 --> 00:10:48,209
had a forum I'm describing like what the

00:10:46,199 --> 00:10:50,670
browser should do a you know to post

00:10:48,209 --> 00:10:52,290
this form and what kind of stuff it

00:10:50,670 --> 00:10:54,680
should be collecting inside of that form

00:10:52,290 --> 00:10:57,269
but I'm not doing all the event handling

00:10:54,680 --> 00:10:59,069
in the form itself I'm not responsible

00:10:57,269 --> 00:11:01,260
for rendering and painting that onto the

00:10:59,069 --> 00:11:02,730
screen what I call HTML user interface

00:11:01,260 --> 00:11:04,199
is there a specifc

00:11:02,730 --> 00:11:05,730
education of a user interface there

00:11:04,199 --> 00:11:07,199
declarative they're telling us what the

00:11:05,730 --> 00:11:08,940
user interface should be but they're not

00:11:07,199 --> 00:11:10,260
doing behavioral real like you I

00:11:08,940 --> 00:11:12,149
programming especially if you've come

00:11:10,260 --> 00:11:13,529
from a background where you're doing

00:11:12,149 --> 00:11:15,209
like desktop programming or native

00:11:13,529 --> 00:11:17,279
mobile application development totally

00:11:15,209 --> 00:11:18,690
different right the JavaScript you I'm

00:11:17,279 --> 00:11:20,610
more similar to those more event-driven

00:11:18,690 --> 00:11:22,050
because you're responsible for all the

00:11:20,610 --> 00:11:23,160
behavior application you want to render

00:11:22,050 --> 00:11:25,110
something into the page you're going to

00:11:23,160 --> 00:11:26,820
need code to do it or if you want to

00:11:25,110 --> 00:11:29,310
handle a user event you've got to bind

00:11:26,820 --> 00:11:31,639
to an event and then handle that in this

00:11:29,310 --> 00:11:33,630
example like asynchronously right

00:11:31,639 --> 00:11:35,910
totally different so it would be bizarre

00:11:33,630 --> 00:11:37,440
for us to think that a single single

00:11:35,910 --> 00:11:41,699
framework a single tool would be a great

00:11:37,440 --> 00:11:43,050
way to address both of those and if you

00:11:41,699 --> 00:11:44,730
look at just like directory layout

00:11:43,050 --> 00:11:46,740
because I think all of our projects of

00:11:44,730 --> 00:11:48,810
our frameworks they say a lot based on

00:11:46,740 --> 00:11:50,880
what the directory structure looks like

00:11:48,810 --> 00:11:52,440
in traditional rails we have obviously

00:11:50,880 --> 00:11:54,839
we have controllers we have models we

00:11:52,440 --> 00:11:56,100
have views and now we don't ship rails

00:11:54,839 --> 00:11:58,139
projects like that because we also

00:11:56,100 --> 00:12:00,060
usually need some JavaScript down in

00:11:58,139 --> 00:12:03,410
this ghetto right here under assets

00:12:00,060 --> 00:12:06,089
JavaScript application jas and you know

00:12:03,410 --> 00:12:07,380
of course all of the jobs convenient

00:12:06,089 --> 00:12:09,089
should go into one file which is

00:12:07,380 --> 00:12:10,410
probably true for like 75 percent of

00:12:09,089 --> 00:12:13,470
rails applications you get these big

00:12:10,410 --> 00:12:15,269
gigantic nasty balls of mud late

00:12:13,470 --> 00:12:17,010
recently you know like because that big

00:12:15,269 --> 00:12:20,910
nasty ball of mud is bad i see a lot of

00:12:17,010 --> 00:12:24,060
rail studios go to you know having this

00:12:20,910 --> 00:12:26,100
sort of two step of here's my MVC on the

00:12:24,060 --> 00:12:27,899
back end here's my MVC a couple

00:12:26,100 --> 00:12:30,089
directories down for the front end it's

00:12:27,899 --> 00:12:32,940
very duplicative and it sort of doesn't

00:12:30,089 --> 00:12:35,160
make sense because a progressive

00:12:32,940 --> 00:12:36,870
enhancement as nice as it is would make

00:12:35,160 --> 00:12:38,940
it very difficult to manage to and user

00:12:36,870 --> 00:12:41,060
interfaces simultaneously so I'm seeing

00:12:38,940 --> 00:12:43,800
a lot of teams also look at that

00:12:41,060 --> 00:12:45,870
traditional HTML UI and just get rid of

00:12:43,800 --> 00:12:47,279
it completely and start fresh from a fat

00:12:45,870 --> 00:12:49,980
client JavaScript application when

00:12:47,279 --> 00:12:51,660
that's what's best suited for the app so

00:12:49,980 --> 00:12:53,100
you look at this now and if you're a new

00:12:51,660 --> 00:12:54,690
developer you know you have this JSON

00:12:53,100 --> 00:12:56,600
API on the back end and this JavaScript

00:12:54,690 --> 00:12:59,279
UI for the front end here in one project

00:12:56,600 --> 00:13:01,529
what's that little line there it's like

00:12:59,279 --> 00:13:03,870
a vest digital appendage I say it's I

00:13:01,529 --> 00:13:05,880
say it's vestigial because we can only

00:13:03,870 --> 00:13:07,920
explain why it's there in terms of the

00:13:05,880 --> 00:13:09,930
past you know we have to give somebody a

00:13:07,920 --> 00:13:11,640
forensic history of rails or web

00:13:09,930 --> 00:13:13,980
application development to explain why

00:13:11,640 --> 00:13:16,019
that's there and what's wrong with that

00:13:13,980 --> 00:13:18,720
vestigial appendage well

00:13:16,019 --> 00:13:20,339
if you think about how your brain

00:13:18,720 --> 00:13:22,110
reasons about a small application when

00:13:20,339 --> 00:13:23,819
it all fits into your head you can get

00:13:22,110 --> 00:13:25,259
around everything really really quickly

00:13:23,819 --> 00:13:27,059
even if you got the back end in the

00:13:25,259 --> 00:13:28,739
front end all in one place but as the

00:13:27,059 --> 00:13:30,989
app grows eventually every application

00:13:28,739 --> 00:13:32,819
can if it's successful reaches a point

00:13:30,989 --> 00:13:35,100
where we can no longer fit it all in our

00:13:32,819 --> 00:13:37,499
heads all at once and what happens to

00:13:35,100 --> 00:13:38,819
like you know when that happens it's

00:13:37,499 --> 00:13:40,769
just like an operating system we can

00:13:38,819 --> 00:13:42,869
only fit part in their brain at once we

00:13:40,769 --> 00:13:44,459
can work in one place but then whenever

00:13:42,869 --> 00:13:46,769
we want to reach over for the other part

00:13:44,459 --> 00:13:48,660
we have to page out and if if it's not a

00:13:46,769 --> 00:13:50,160
cohesive split it means that i could

00:13:48,660 --> 00:13:51,899
make changes in one part of the app and

00:13:50,160 --> 00:13:54,059
then i just have to kind of be afraid of

00:13:51,899 --> 00:13:55,439
well I wonder how through all the

00:13:54,059 --> 00:13:56,399
tangled objects and stuff this is going

00:13:55,439 --> 00:13:58,110
to affect the other part of the app and

00:13:56,399 --> 00:14:00,299
then a thrashing occurs because I'm

00:13:58,110 --> 00:14:01,649
constantly context switching but if I'm

00:14:00,299 --> 00:14:03,660
day one we'd split up into two

00:14:01,649 --> 00:14:05,730
applications app one app to in a

00:14:03,660 --> 00:14:07,920
cohesive sensible way as that grew to

00:14:05,730 --> 00:14:10,889
the same total net complexity we could

00:14:07,920 --> 00:14:11,999
grow even bigger and then the context

00:14:10,889 --> 00:14:13,949
switching is much more natural because

00:14:11,999 --> 00:14:15,779
app one is its own physical discrete

00:14:13,949 --> 00:14:17,579
thing and app to when we want to page

00:14:15,779 --> 00:14:18,869
out sure we can't fit it on a brain at

00:14:17,579 --> 00:14:20,879
once but at least we're not thrashing

00:14:18,869 --> 00:14:22,470
and stomping all over ourselves I the

00:14:20,879 --> 00:14:25,499
changes that we make are more likely to

00:14:22,470 --> 00:14:28,589
be safe I like to use the phrase late

00:14:25,499 --> 00:14:31,559
extraction costs more than early

00:14:28,589 --> 00:14:33,689
abstraction what do I mean by that well

00:14:31,559 --> 00:14:35,339
imagine you have two balls of yarn if

00:14:33,689 --> 00:14:37,709
you have two balls if you aren't in fact

00:14:35,339 --> 00:14:39,600
and I experimented before the stock

00:14:37,709 --> 00:14:41,369
tried it out it turns out it's very easy

00:14:39,600 --> 00:14:45,179
to take those two balls of yarn and make

00:14:41,369 --> 00:14:47,009
one big nasty tangle of yarn but if you

00:14:45,179 --> 00:14:48,809
have one big nasty tangle of yarn it's

00:14:47,009 --> 00:14:51,149
very very difficult to figure out how to

00:14:48,809 --> 00:14:52,949
make to neatly perfectly constructed

00:14:51,149 --> 00:14:56,069
balls of yarn out of that that takes a

00:14:52,949 --> 00:14:58,619
lot more effort so if you've ever seen

00:14:56,069 --> 00:15:01,379
this in a modern pack client JavaScript

00:14:58,619 --> 00:15:02,850
application that was written in rails so

00:15:01,379 --> 00:15:06,029
you have the JSON API in the back and

00:15:02,850 --> 00:15:08,730
then you have front-end a cure API

00:15:06,029 --> 00:15:10,139
driven JavaScript awesomeness but if you

00:15:08,730 --> 00:15:13,110
see something like this in your layout

00:15:10,139 --> 00:15:15,419
like global JavaScript variables that

00:15:13,110 --> 00:15:17,759
are basically data dumps of information

00:15:15,419 --> 00:15:20,040
from the server what that really means

00:15:17,759 --> 00:15:21,209
is that your yarn is tangled because you

00:15:20,040 --> 00:15:22,889
might think you have two applications

00:15:21,209 --> 00:15:25,259
living in one directory but you could

00:15:22,889 --> 00:15:26,999
not extricate those two at all sensibly

00:15:25,259 --> 00:15:27,970
in fact even if it's only three or four

00:15:26,999 --> 00:15:29,709
things I've lost

00:15:27,970 --> 00:15:31,180
weeks of time trying to figure out how

00:15:29,709 --> 00:15:32,139
to make life work without a token

00:15:31,180 --> 00:15:35,259
because then there's all these

00:15:32,139 --> 00:15:36,850
deployment concerns and so forth so late

00:15:35,259 --> 00:15:39,160
extraction costs more than early

00:15:36,850 --> 00:15:41,079
abstraction taking a monolith and

00:15:39,160 --> 00:15:44,680
breaking that in half is very very

00:15:41,079 --> 00:15:46,269
challenging so if we want to get away

00:15:44,680 --> 00:15:48,009
from monolithic applications if we want

00:15:46,269 --> 00:15:50,560
to have JavaScript live as a first class

00:15:48,009 --> 00:15:53,379
thing we have to make JavaScript easy so

00:15:50,560 --> 00:15:54,819
I spent the last several years of my

00:15:53,379 --> 00:15:57,519
open-source time focusing on how can I

00:15:54,819 --> 00:15:59,170
make JavaScript development easier so

00:15:57,519 --> 00:16:01,899
forcing me to think like what really

00:15:59,170 --> 00:16:04,750
goes into application development and

00:16:01,899 --> 00:16:06,879
productivity there's an application

00:16:04,750 --> 00:16:08,800
framework layer which is like the models

00:16:06,879 --> 00:16:11,290
that we extend from the libraries that

00:16:08,800 --> 00:16:12,850
we use those conventions and the default

00:16:11,290 --> 00:16:14,800
configurations that are handed to us by

00:16:12,850 --> 00:16:16,660
whatever you know ecosystem we live in

00:16:14,800 --> 00:16:18,459
and then there's like a build automation

00:16:16,660 --> 00:16:20,800
that's responsible for our our you know

00:16:18,459 --> 00:16:23,290
development server our build stuff and

00:16:20,800 --> 00:16:25,389
in rails the application framework is

00:16:23,290 --> 00:16:27,519
obviously that's rails job active record

00:16:25,389 --> 00:16:29,319
action pack the conventions and

00:16:27,519 --> 00:16:31,569
configurations were also set forth by

00:16:29,319 --> 00:16:33,490
rails and then the build automation it's

00:16:31,569 --> 00:16:35,470
rake but it's really rails e-ring

00:16:33,490 --> 00:16:37,600
there's the rail CLI and then there's

00:16:35,470 --> 00:16:38,889
also a whole bunch of rake tests but

00:16:37,600 --> 00:16:41,769
they're all you know for the most part

00:16:38,889 --> 00:16:43,509
shipped with rails require a rails

00:16:41,769 --> 00:16:44,620
environment so rails really owns the

00:16:43,509 --> 00:16:46,209
whole stack for most intents and

00:16:44,620 --> 00:16:48,790
purposes if I were to grade then I'd say

00:16:46,209 --> 00:16:50,470
as an app framework rails over initially

00:16:48,790 --> 00:16:52,620
I thought it was amazing but over time

00:16:50,470 --> 00:16:56,139
the amount of tangling between my models

00:16:52,620 --> 00:16:57,970
and the difficulty to practice TDD the

00:16:56,139 --> 00:16:59,889
way it that I liked you in rails lends

00:16:57,970 --> 00:17:02,319
me to give a b-minus just to the

00:16:59,889 --> 00:17:03,819
application framework part but i think

00:17:02,319 --> 00:17:05,949
the conventions and configurations in

00:17:03,819 --> 00:17:07,569
rails have always blown me away I love

00:17:05,949 --> 00:17:09,069
the tribal knowledge that once you learn

00:17:07,569 --> 00:17:10,449
a little bit or hang out in a community

00:17:09,069 --> 00:17:12,159
you learn all these awesome things and

00:17:10,449 --> 00:17:14,530
then you can go to another rails project

00:17:12,159 --> 00:17:15,819
and ramp up really quickly build

00:17:14,530 --> 00:17:17,319
automation i think is pretty good i

00:17:15,819 --> 00:17:20,370
think rail sells a lot of problems that

00:17:17,319 --> 00:17:22,480
you know map to the 8020 of how we work

00:17:20,370 --> 00:17:24,069
what in particular is that can think

00:17:22,480 --> 00:17:25,480
didn't mention configuration that I look

00:17:24,069 --> 00:17:27,400
for when I'm working in another in

00:17:25,480 --> 00:17:30,070
another ecosystem and I'm usually

00:17:27,400 --> 00:17:31,659
disappointed so talking about fat client

00:17:30,070 --> 00:17:33,100
JavaScript apps you know there's

00:17:31,659 --> 00:17:34,570
application frameworks like what I want

00:17:33,100 --> 00:17:36,640
to use seems to change every six months

00:17:34,570 --> 00:17:39,549
maybe its backbone and once in one

00:17:36,640 --> 00:17:41,210
stretch then number and then angular and

00:17:39,549 --> 00:17:43,460
these slides are actually like a couple

00:17:41,210 --> 00:17:47,059
old now so I don't have react here yet

00:17:43,460 --> 00:17:48,529
so so I don't want to fix to the

00:17:47,059 --> 00:17:49,730
application framework and whatever my

00:17:48,529 --> 00:17:51,020
tooling is because i'll just be

00:17:49,730 --> 00:17:52,640
disappointing to have to throw away all

00:17:51,020 --> 00:17:55,700
the tooling so I'm just like whatever

00:17:52,640 --> 00:17:57,260
I'm cool with whatever framework I want

00:17:55,700 --> 00:17:58,970
to build conventions and configurations

00:17:57,260 --> 00:18:00,500
that are framework agnostic now when it

00:17:58,970 --> 00:18:02,480
comes to the build automation piece I

00:18:00,500 --> 00:18:04,490
really like nodejs because like I said

00:18:02,480 --> 00:18:05,779
really trendy so there's lots of new

00:18:04,490 --> 00:18:08,149
stuff happening there really fast

00:18:05,779 --> 00:18:09,770
because of its just blazing fast for

00:18:08,149 --> 00:18:12,049
file i/o some of the benchmarking I've

00:18:09,770 --> 00:18:14,240
done is like 20 30 times faster on the

00:18:12,049 --> 00:18:19,460
same Makka SSD doing basic file i/o

00:18:14,240 --> 00:18:20,720
under node than unruh be insane grunt in

00:18:19,460 --> 00:18:23,059
particular we'll talk about grunt a

00:18:20,720 --> 00:18:25,610
little bit grunt has a ton of community

00:18:23,059 --> 00:18:28,250
plugins that the make task management

00:18:25,610 --> 00:18:30,169
really easy well what is this

00:18:28,250 --> 00:18:33,100
configuration layer what's that going to

00:18:30,169 --> 00:18:37,100
be well we built one it's called lineman

00:18:33,100 --> 00:18:39,799
linemen like asn't like a lineman

00:18:37,100 --> 00:18:41,390
working on the railroad is got a twitter

00:18:39,799 --> 00:18:44,539
address lineman j/s and then we have a

00:18:41,390 --> 00:18:45,470
documentation site lineman j/s calm and

00:18:44,539 --> 00:18:48,470
we're going to show you a little bit of

00:18:45,470 --> 00:18:50,480
that now to get started lima you just

00:18:48,470 --> 00:18:52,490
have to have nodejs installed and then

00:18:50,480 --> 00:18:54,529
you confirm a new terminal site npm

00:18:52,490 --> 00:18:56,450
install globally lineman it'll give you

00:18:54,529 --> 00:18:59,510
a binary you can use so you can create a

00:18:56,450 --> 00:19:02,480
new app saying line- now let's a little

00:18:59,510 --> 00:19:05,299
something like this so here i'm typing

00:19:02,480 --> 00:19:06,890
lineman new my app and i get some cool

00:19:05,299 --> 00:19:08,690
ascii art as well as some sample

00:19:06,890 --> 00:19:13,370
commands to start running so I'll see me

00:19:08,690 --> 00:19:15,440
into that project and then once I'm

00:19:13,370 --> 00:19:17,059
there I'll tree out just the files that

00:19:15,440 --> 00:19:19,940
I get because they say so much about

00:19:17,059 --> 00:19:23,120
what we expect so here I've got you know

00:19:19,940 --> 00:19:24,860
application CSS images java script pages

00:19:23,120 --> 00:19:27,130
client-side templates I gotta handle a

00:19:24,860 --> 00:19:29,390
configuration files comes with a lot of

00:19:27,130 --> 00:19:32,000
tests already pre-configured test

00:19:29,390 --> 00:19:33,890
helpers and then some you know place to

00:19:32,000 --> 00:19:37,220
put vendor files like vendor javascript

00:19:33,890 --> 00:19:38,840
jquery so forth so let's talk about why

00:19:37,220 --> 00:19:43,279
lineman makes life more convenient for

00:19:38,840 --> 00:19:44,960
us well what I seek in a workflow is you

00:19:43,279 --> 00:19:46,730
know I want to be able to write some

00:19:44,960 --> 00:19:48,980
code I want to be able to save that code

00:19:46,730 --> 00:19:49,909
have it compile if necessary I like to

00:19:48,980 --> 00:19:53,059
write coffee scripture there's a

00:19:49,909 --> 00:19:54,559
compilation step concatenate everything

00:19:53,059 --> 00:19:55,999
just like it would be in production

00:19:54,559 --> 00:19:57,999
and I won't be able to play with that

00:19:55,999 --> 00:20:01,070
code all in less than 100 milliseconds

00:19:57,999 --> 00:20:02,899
really really fast feedback in lineman

00:20:01,070 --> 00:20:07,070
that looks like this I start line as dev

00:20:02,899 --> 00:20:08,690
server with lineman run that's up and

00:20:07,070 --> 00:20:10,429
running its watching all my file changes

00:20:08,690 --> 00:20:12,379
i can see the initial page here by going

00:20:10,429 --> 00:20:14,539
to it i'm going to change this method

00:20:12,379 --> 00:20:16,879
say goodbye world and studs suicidal

00:20:14,539 --> 00:20:20,450
hello world program refresh the page and

00:20:16,879 --> 00:20:22,399
then it's already updated so so working

00:20:20,450 --> 00:20:24,409
in lima even at scale with hundreds of

00:20:22,399 --> 00:20:26,629
files really really snap you which is

00:20:24,409 --> 00:20:29,269
something we were looking for but it's

00:20:26,629 --> 00:20:30,499
not just about exploratory testing your

00:20:29,269 --> 00:20:32,059
app and command our driven development

00:20:30,499 --> 00:20:33,889
it's really important that it have a

00:20:32,059 --> 00:20:36,139
really good TDD story too because i

00:20:33,889 --> 00:20:37,970
often test drive and so we supply me

00:20:36,139 --> 00:20:40,190
with a tool called Testim by toby ho

00:20:37,970 --> 00:20:41,809
it's a fantastic test runner I've

00:20:40,190 --> 00:20:43,519
written lots of tests runners and I like

00:20:41,809 --> 00:20:45,019
this one so much more that I've more or

00:20:43,519 --> 00:20:47,360
less let all of mine fall into disrepair

00:20:45,019 --> 00:20:49,039
if you use jasmine rails I apologize

00:20:47,360 --> 00:20:53,419
because I don't maintain it as well as I

00:20:49,039 --> 00:20:55,279
should so this is what the test test

00:20:53,419 --> 00:20:57,320
story looks like I'm going to tab over

00:20:55,279 --> 00:21:00,590
into a second shell and run lineman spec

00:20:57,320 --> 00:21:02,570
which runs a interactive test runner and

00:21:00,590 --> 00:21:03,980
I can bind as many things as two rows I

00:21:02,570 --> 00:21:06,559
like here it's running in Chrome I'm

00:21:03,980 --> 00:21:09,110
going to go over to test and now I'm

00:21:06,559 --> 00:21:10,850
going to test first change the

00:21:09,110 --> 00:21:13,220
expectation of that method to goodbye

00:21:10,850 --> 00:21:16,129
world save the file see the tests are

00:21:13,220 --> 00:21:17,749
all instantly failing and then updated

00:21:16,129 --> 00:21:20,960
save the file and then I'll light Esther

00:21:17,749 --> 00:21:22,159
passing again really really fast even in

00:21:20,960 --> 00:21:25,039
large projects but you'll just have to

00:21:22,159 --> 00:21:26,299
trust me for that I can go and quit out

00:21:25,039 --> 00:21:28,789
of the interactive runner and then run

00:21:26,299 --> 00:21:30,259
in a CI mode spected scil do a full

00:21:28,789 --> 00:21:32,960
build of my project and then run the

00:21:30,259 --> 00:21:34,639
tests against that and exit and how

00:21:32,960 --> 00:21:36,950
you'd like with a reportable format and

00:21:34,639 --> 00:21:38,809
every lima project ships with a Travis

00:21:36,950 --> 00:21:40,340
yamo file already pre-configured so if

00:21:38,809 --> 00:21:42,379
you push to github and you just click OK

00:21:40,340 --> 00:21:46,279
on Travis you have CI for your front-end

00:21:42,379 --> 00:21:48,679
project the deploy story is really easy

00:21:46,279 --> 00:21:50,720
too if your server can host static files

00:21:48,679 --> 00:21:53,090
because lineman is laser-focused on just

00:21:50,720 --> 00:21:55,970
building front-end web assets you can

00:21:53,090 --> 00:21:57,379
host it any which way you like you just

00:21:55,970 --> 00:22:00,259
do a lineman when you figure out for

00:21:57,379 --> 00:22:03,379
yourself how you want to deploy it when

00:22:00,259 --> 00:22:04,750
you run lineman build which is the the

00:22:03,379 --> 00:22:06,490
build command for

00:22:04,750 --> 00:22:09,010
for distribution and then tree out the

00:22:06,490 --> 00:22:11,320
dist directory out of the box it's not a

00:22:09,010 --> 00:22:13,360
lot right it's a single concatenated CSS

00:22:11,320 --> 00:22:15,400
file minified a single concatenated

00:22:13,360 --> 00:22:18,150
javascript file minified and an

00:22:15,400 --> 00:22:21,010
index.html file that pulls those two in

00:22:18,150 --> 00:22:23,380
eminently understandable we also have a

00:22:21,010 --> 00:22:24,610
single like a boolean flag in the

00:22:23,380 --> 00:22:26,860
configuration you can set and you'll get

00:22:24,610 --> 00:22:29,650
asset fingerprinting so that it's a CDN

00:22:26,860 --> 00:22:31,660
friendly for delivery we also have a

00:22:29,650 --> 00:22:33,040
custom Heroku beltpack so that you can

00:22:31,660 --> 00:22:35,230
edge this with a one line configuration

00:22:33,040 --> 00:22:36,940
push to Heroku have Heroku build

00:22:35,230 --> 00:22:38,740
everything for you right away so they're

00:22:36,940 --> 00:22:40,450
convenient it builds with nodejs but

00:22:38,740 --> 00:22:42,520
then on your Dino it actually runs under

00:22:40,450 --> 00:22:43,720
Apache so so you don't have knowed

00:22:42,520 --> 00:22:46,600
running in production which means you

00:22:43,720 --> 00:22:49,270
can scale up quite a bit more on just a

00:22:46,600 --> 00:22:51,550
single free Dino we offer a bunch of

00:22:49,270 --> 00:22:52,480
starter projects like for instance if

00:22:51,550 --> 00:22:54,220
you're just looking to get started with

00:22:52,480 --> 00:22:56,260
angular once you learn a basic vanilla

00:22:54,220 --> 00:22:57,340
lineman project you can you can find

00:22:56,260 --> 00:22:58,570
your way around all these startup

00:22:57,340 --> 00:23:01,150
projects really easily because of the

00:22:58,570 --> 00:23:04,840
conventions so we have example angular

00:23:01,150 --> 00:23:06,640
project backbone ember we have actually

00:23:04,840 --> 00:23:09,850
projects just for building standalone

00:23:06,640 --> 00:23:12,820
web libraries to be published not not

00:23:09,850 --> 00:23:14,650
not full applications and also we have

00:23:12,820 --> 00:23:17,380
14 markdown blogs all of test doubles

00:23:14,650 --> 00:23:19,780
websites are using this lineman blog

00:23:17,380 --> 00:23:23,850
template so to publish lots of static

00:23:19,780 --> 00:23:27,010
files lima is also very easy to extend

00:23:23,850 --> 00:23:28,780
because grunt provides the tasks will

00:23:27,010 --> 00:23:30,160
talk about grunt we just have to build

00:23:28,780 --> 00:23:32,050
this kind of thin candy shell around

00:23:30,160 --> 00:23:33,910
these tasks that kind of tell you where

00:23:32,050 --> 00:23:36,340
these tasks fit into your project and

00:23:33,910 --> 00:23:38,020
from a user's perspective once we built

00:23:36,340 --> 00:23:40,240
this plugin once all you have to do is

00:23:38,020 --> 00:23:44,860
say npm install and then this will save

00:23:40,240 --> 00:23:46,630
that to your project it and add it to

00:23:44,860 --> 00:23:49,120
your package.json so you can track your

00:23:46,630 --> 00:23:50,410
dependencies and the name of this one is

00:23:49,120 --> 00:23:51,970
lineman Bowers so if you want to use

00:23:50,410 --> 00:23:54,160
Bower for your third party vendor

00:23:51,970 --> 00:23:56,530
dependency management you just run this

00:23:54,160 --> 00:23:58,360
once then you say lineman run and then

00:23:56,530 --> 00:23:59,920
it's built in already it's running as

00:23:58,360 --> 00:24:01,000
part of the task at the right part in

00:23:59,920 --> 00:24:02,560
your build and you don't have to do

00:24:01,000 --> 00:24:04,120
anything at all you have your bar and

00:24:02,560 --> 00:24:08,080
JSON file and you can just specify

00:24:04,120 --> 00:24:09,400
whatever you want so zooming out i've

00:24:08,080 --> 00:24:10,750
mentioned grunt a couple of times when

00:24:09,400 --> 00:24:13,240
you look at the world of all these

00:24:10,750 --> 00:24:15,760
javascript tools lots of them are being

00:24:13,240 --> 00:24:17,750
packaged as npm modules and then paired

00:24:15,760 --> 00:24:20,390
with a grunt module that

00:24:17,750 --> 00:24:23,120
lets you automate the tasks associated

00:24:20,390 --> 00:24:24,800
with it last night for example I found

00:24:23,120 --> 00:24:27,680
yeah if anyone's familiar with the Doge

00:24:24,800 --> 00:24:30,320
meme i found a dose script npm module

00:24:27,680 --> 00:24:32,480
and a grunt go script of course already

00:24:30,320 --> 00:24:34,850
existed so i published a lineman Doge

00:24:32,480 --> 00:24:37,190
script lineman plug plug in and it only

00:24:34,850 --> 00:24:40,130
took about you know 15 20 minutes to put

00:24:37,190 --> 00:24:41,990
together grunts is fab fantastic it's a

00:24:40,130 --> 00:24:43,460
really good build tool it's you know

00:24:41,990 --> 00:24:45,170
descendant in here it's a lot of ideas

00:24:43,460 --> 00:24:46,760
from make and rake and everything else

00:24:45,170 --> 00:24:49,160
it's really good in particular at

00:24:46,760 --> 00:24:51,140
separating a task configuration from

00:24:49,160 --> 00:24:53,330
task behavior so it's really easy to

00:24:51,140 --> 00:24:54,770
build up a config and then let the tasks

00:24:53,330 --> 00:24:56,710
just run in a way that I haven't found

00:24:54,770 --> 00:24:59,150
in a lot of other build tools and

00:24:56,710 --> 00:25:00,650
there's a lot of them because they're so

00:24:59,150 --> 00:25:02,960
easy to publish because the API is so

00:25:00,650 --> 00:25:06,470
simple so lots and lots of grunt plugins

00:25:02,960 --> 00:25:08,630
to pick from and it's easy to write your

00:25:06,470 --> 00:25:12,410
own to I've written several and the APS

00:25:08,630 --> 00:25:13,760
just super-easy revisiting the concept

00:25:12,410 --> 00:25:15,380
of monolithic application architecture

00:25:13,760 --> 00:25:18,530
if you're going to break up your your

00:25:15,380 --> 00:25:20,390
monolith a gap into to you know you have

00:25:18,530 --> 00:25:22,070
a client side project and a server side

00:25:20,390 --> 00:25:23,810
project maybe they live in separate

00:25:22,070 --> 00:25:25,910
repos maybe their sub directories under

00:25:23,810 --> 00:25:27,470
one repo doesn't really matter but how

00:25:25,910 --> 00:25:28,610
at runtime and development are you going

00:25:27,470 --> 00:25:29,720
to be productive because it's not like

00:25:28,610 --> 00:25:32,030
you're going to run a full deploy and

00:25:29,720 --> 00:25:35,060
then you know see them deployed so lyman

00:25:32,030 --> 00:25:38,300
solves this with a feature that we call

00:25:35,060 --> 00:25:41,180
API proxying basically you have your

00:25:38,300 --> 00:25:42,680
development browser you point to like

00:25:41,180 --> 00:25:45,890
let's say we have lineman and a Sinatra

00:25:42,680 --> 00:25:47,570
app you point to port 8000 which is the

00:25:45,890 --> 00:25:49,910
lineman application line will forward

00:25:47,570 --> 00:25:52,130
any API requests you make to say Sinatra

00:25:49,910 --> 00:25:53,830
so natural will respond to lineman and

00:25:52,130 --> 00:25:55,910
then line will phone home back to you

00:25:53,830 --> 00:25:57,260
this looks a little something like this

00:25:55,910 --> 00:25:58,490
so like I've got this application here

00:25:57,260 --> 00:26:01,250
I'm going to comment out our default

00:25:58,490 --> 00:26:03,500
configuration to enable API practicing

00:26:01,250 --> 00:26:08,330
set the port 2 4 5 6 7 which is what

00:26:03,500 --> 00:26:11,320
Sinatra likes looking at my application

00:26:08,330 --> 00:26:14,360
I've just it just reads in a slash high

00:26:11,320 --> 00:26:16,760
from the server prints that onto the

00:26:14,360 --> 00:26:18,770
page now the server written in Sinatra

00:26:16,760 --> 00:26:23,210
has a slash high route I just returned I

00:26:18,770 --> 00:26:26,060
heart Ruby so if i run lineman it'll

00:26:23,210 --> 00:26:27,290
love api practicing now enabled you can

00:26:26,060 --> 00:26:30,050
see I already has two not returned on

00:26:27,290 --> 00:26:31,620
and now if we fresh 8000 so not sure got

00:26:30,050 --> 00:26:33,720
the request from port 8000 for

00:26:31,620 --> 00:26:35,730
that returned I heart Ruby and then that

00:26:33,720 --> 00:26:37,650
printed onto the page it makes this

00:26:35,730 --> 00:26:39,830
physical separation could possible but

00:26:37,650 --> 00:26:41,760
still feel seamless during development

00:26:39,830 --> 00:26:44,210
there's another case though that's an

00:26:41,760 --> 00:26:46,470
important to cover which is that

00:26:44,210 --> 00:26:48,090
sometimes the server doesn't exist yet

00:26:46,470 --> 00:26:49,710
like like the whole benefit of breaking

00:26:48,090 --> 00:26:50,850
up a model in cap into two is that

00:26:49,710 --> 00:26:53,280
development doesn't have to move in

00:26:50,850 --> 00:26:55,020
lockstep anymore we can build the client

00:26:53,280 --> 00:26:57,480
first without the server and just sort

00:26:55,020 --> 00:26:59,190
of specify the server later or you just

00:26:57,480 --> 00:27:00,900
work ahead a little bit or maybe we're

00:26:59,190 --> 00:27:03,300
working on a new client side feature and

00:27:00,900 --> 00:27:04,679
the server route for that route needs to

00:27:03,300 --> 00:27:06,540
change a little bit but we don't want to

00:27:04,679 --> 00:27:07,440
kind of you know worry about that yet

00:27:06,540 --> 00:27:09,480
because we're still trying to get

00:27:07,440 --> 00:27:12,059
feedback about whether or not we want to

00:27:09,480 --> 00:27:13,440
demand those changes of the API in that

00:27:12,059 --> 00:27:15,270
case we have a feature called API

00:27:13,440 --> 00:27:18,240
stubbing in this case you know your

00:27:15,270 --> 00:27:21,030
browser would talk to lineman line would

00:27:18,240 --> 00:27:23,520
pretend it's calling off to the dapi but

00:27:21,030 --> 00:27:24,660
instead stub it back and they'll respond

00:27:23,520 --> 00:27:27,000
back to the browser everything is

00:27:24,660 --> 00:27:28,590
invisible to you as a you know as a user

00:27:27,000 --> 00:27:29,550
in your development environment then

00:27:28,590 --> 00:27:30,990
that looks a little something like this

00:27:29,550 --> 00:27:33,000
so we can take the exact same route we

00:27:30,990 --> 00:27:35,820
just did an overwrite it locally in

00:27:33,000 --> 00:27:38,340
lineman so I'll say the lineman strips

00:27:35,820 --> 00:27:39,660
with this Express application all I'm

00:27:38,340 --> 00:27:43,200
filling out here is a little response

00:27:39,660 --> 00:27:47,760
handler to send back the string i heart

00:27:43,200 --> 00:27:50,070
node even more inaccurate statement run

00:27:47,760 --> 00:27:51,600
lineman here odds are still running but

00:27:50,070 --> 00:27:52,980
now when i refresh it lima is going to

00:27:51,600 --> 00:27:57,090
catch that first because it's higher in

00:27:52,980 --> 00:27:58,410
the in the middle where's so a fantastic

00:27:57,090 --> 00:28:00,510
way to work really quickly we've had a

00:27:58,410 --> 00:28:02,490
entire clients that have asked us only

00:28:00,510 --> 00:28:03,660
to work on the client-side system and

00:28:02,490 --> 00:28:05,429
tell them what they need of the server

00:28:03,660 --> 00:28:07,050
side later and this actually works out

00:28:05,429 --> 00:28:09,090
to be a really fantastic little like

00:28:07,050 --> 00:28:10,230
spec sheet because we can just play with

00:28:09,090 --> 00:28:13,290
things in memory and be really

00:28:10,230 --> 00:28:15,270
lightweight another another thing that i

00:28:13,290 --> 00:28:16,980
love about breaking up monolithic

00:28:15,270 --> 00:28:18,450
applications so I had an experience once

00:28:16,980 --> 00:28:20,429
where the first time I was doing this

00:28:18,450 --> 00:28:22,320
experimenting with us a few years ago at

00:28:20,429 --> 00:28:23,730
a 30 minute test build now obviously

00:28:22,320 --> 00:28:24,809
there's slower test builds out there but

00:28:23,730 --> 00:28:26,730
it was longer than I thought it needed

00:28:24,809 --> 00:28:28,530
to be when I broke things up for

00:28:26,730 --> 00:28:29,880
separate reasons into two applications I

00:28:28,530 --> 00:28:31,860
was really curious to see how my test

00:28:29,880 --> 00:28:34,110
rewrites would go and what I found was

00:28:31,860 --> 00:28:37,110
that writing the tests for just the UI

00:28:34,110 --> 00:28:39,090
first the tests were way more clear I

00:28:37,110 --> 00:28:41,790
was able to focus on just the UI

00:28:39,090 --> 00:28:43,140
concerns not the whole application and I

00:28:41,790 --> 00:28:44,690
was surprised to see that the whole

00:28:43,140 --> 00:28:47,480
front end suite of tests

00:28:44,690 --> 00:28:49,220
you I integration test where only four

00:28:47,480 --> 00:28:51,260
minutes of run time out of that original

00:28:49,220 --> 00:28:52,730
30 so then I expected well the problem

00:28:51,260 --> 00:28:54,320
must have been in the back end but then

00:28:52,730 --> 00:28:56,210
I saw that the back end tests of just

00:28:54,320 --> 00:28:58,580
you know testing it as a web service

00:28:56,210 --> 00:29:00,560
also we're really really clear and

00:28:58,580 --> 00:29:02,450
really nice to write and that was also

00:29:00,560 --> 00:29:04,280
four minutes so then I thought well

00:29:02,450 --> 00:29:05,630
clearly I'm missing something so i

00:29:04,280 --> 00:29:07,100
should write some smoke tests around

00:29:05,630 --> 00:29:08,840
this just to make sure that it all works

00:29:07,100 --> 00:29:10,340
and i tested several paths through the

00:29:08,840 --> 00:29:11,810
system and that only took a couple of

00:29:10,340 --> 00:29:14,120
minutes in this case because i wasn't

00:29:11,810 --> 00:29:16,070
exhaustively testing every case so now i

00:29:14,120 --> 00:29:17,720
went from a 30-minute test build to a

00:29:16,070 --> 00:29:19,250
tenement test build even the amount

00:29:17,720 --> 00:29:20,840
though the amount of netcode had

00:29:19,250 --> 00:29:22,280
increased by then because i split the

00:29:20,840 --> 00:29:25,280
app into two i was really really

00:29:22,280 --> 00:29:26,630
impressive and also i find that it's

00:29:25,280 --> 00:29:28,520
just habit forming generally because

00:29:26,630 --> 00:29:30,320
there's some one-time problems that you

00:29:28,520 --> 00:29:31,700
have to solve right like how do I deal

00:29:30,320 --> 00:29:34,040
with versioning of two things and how do

00:29:31,700 --> 00:29:36,980
I handle deployment but once you saw

00:29:34,040 --> 00:29:39,320
that once you can easily apply you know

00:29:36,980 --> 00:29:40,580
a third service to your mix or get in

00:29:39,320 --> 00:29:43,070
the habit of building like you know

00:29:40,580 --> 00:29:44,480
maybe another front end maybe a native

00:29:43,070 --> 00:29:47,330
mobile application that talks back to

00:29:44,480 --> 00:29:50,180
you now you're very pure true JSON API

00:29:47,330 --> 00:29:52,310
from from your server side and so lately

00:29:50,180 --> 00:29:53,420
the number of github repos that I that

00:29:52,310 --> 00:29:57,590
I'm responsible for have skyrocketed

00:29:53,420 --> 00:29:59,600
we've got a whole new problem also today

00:29:57,590 --> 00:30:01,130
I'd like to announce since we're here

00:29:59,600 --> 00:30:03,410
today I know I'm excited to share with

00:30:01,130 --> 00:30:04,880
you that we've published a rail specific

00:30:03,410 --> 00:30:06,770
plug-in for working with lineman and

00:30:04,880 --> 00:30:08,690
making it totally seamless it's called

00:30:06,770 --> 00:30:10,520
rails lineman it's a gem out in Ruby

00:30:08,690 --> 00:30:11,810
gems and a lineman plugin to go with it

00:30:10,520 --> 00:30:13,550
called lineman rails and when you

00:30:11,810 --> 00:30:15,650
install it to both of the projects they

00:30:13,550 --> 00:30:17,660
can work totally seamlessly and so

00:30:15,650 --> 00:30:18,740
during your asses precompile step your

00:30:17,660 --> 00:30:20,510
lime Manassas will just kind of

00:30:18,740 --> 00:30:22,900
magically get grafted on to your rails

00:30:20,510 --> 00:30:24,950
app works in dev and prod really easily

00:30:22,900 --> 00:30:29,450
to learn more about that if you go to

00:30:24,950 --> 00:30:33,110
language is calm / rails HTML we have a

00:30:29,450 --> 00:30:36,140
very cool site design by Derek Briggs at

00:30:33,110 --> 00:30:38,030
neo that drew up the instructions and

00:30:36,140 --> 00:30:42,800
make it really really obvious to get

00:30:38,030 --> 00:30:44,690
started so I'd like to thank to a for

00:30:42,800 --> 00:30:46,850
this talk my friend Marissa I all did

00:30:44,690 --> 00:30:49,640
all the all the good illustrations in

00:30:46,850 --> 00:30:52,040
the talk I I had to make my way with the

00:30:49,640 --> 00:30:53,270
other ones she's a terrific visual

00:30:52,040 --> 00:30:56,390
designer and she's available for

00:30:53,270 --> 00:30:57,799
contract and once again my name is

00:30:56,390 --> 00:30:59,600
Justin Sorrells

00:30:57,799 --> 00:31:01,940
please I'd love it if you tweeted some

00:30:59,600 --> 00:31:03,950
feedback to me at searles on twitter or

00:31:01,940 --> 00:31:07,399
you know you got some critical feedback

00:31:03,950 --> 00:31:10,639
and can send it to our email inbox hello

00:31:07,399 --> 00:31:12,860
at test double and i'll also be treating

00:31:10,639 --> 00:31:17,210
a link to the slide deck from my account

00:31:12,860 --> 00:31:18,230
as soon as i sit back down see ya thank

00:31:17,210 --> 00:31:20,830
you thank you very much I really

00:31:18,230 --> 00:31:20,830
appreciate your time

00:32:10,000 --> 00:32:13,000

YouTube URL: https://www.youtube.com/watch?v=LiajWwszsc0


