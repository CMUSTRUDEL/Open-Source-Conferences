Title: LA Ruby Conf 2014 - Go for the Rubyist by Mark Bates
Publication date: 2020-01-24
Playlist: LA RubyConf 2014
Description: 
	Why are so many Rubyists buzzing about Go? This hot new language that grew out of Google just a few years ago is taking the world by storm and is generating a lot of buzz in the Ruby community. In this talk we'll look at the highlights of Go and try and figure out what the hype is all about, and we'll do with a keen Rubyist eye. We'll also look at where it would make sense in our Ruby/Rails projects to extend them with this highly concurrent, and performant language. What do you say my fellow Rubyists; are you up for the challenge of learning something a bit different?

Help us caption & translate this video!

http://amara.org/v/FG2v/
Captions: 
	00:00:27,900 --> 00:00:40,929
I said hello la oh come on

00:00:34,679 --> 00:00:43,059
one more time hello la oh gosh that was

00:00:40,929 --> 00:00:44,889
pathetic okay we're gonna have to fix

00:00:43,059 --> 00:00:48,129
that we have to fix that

00:00:44,889 --> 00:00:49,329
okay let me get everybody stand up come

00:00:48,129 --> 00:00:52,030
on the end of the day we're all bit

00:00:49,329 --> 00:00:54,339
tired if you just sit hello a little bit

00:00:52,030 --> 00:00:56,100
better we wouldn't be doing this okay

00:00:54,339 --> 00:00:57,670
everybody reach your arms up to the sky

00:00:56,100 --> 00:01:00,670
there you go

00:00:57,670 --> 00:01:02,679
very nice some twists there you go still

00:01:00,670 --> 00:01:05,350
not feel good we got a little back

00:01:02,679 --> 00:01:09,430
stretch in there Oh excellent okay now

00:01:05,350 --> 00:01:11,259
stay standing so I am Marc Bates you can

00:01:09,430 --> 00:01:13,180
follow me on the Twitter's I highly

00:01:11,259 --> 00:01:16,299
recommend you do lots of really useful

00:01:13,180 --> 00:01:18,219
comments there I am the author of three

00:01:16,299 --> 00:01:20,070
books distributed programming Ruby

00:01:18,219 --> 00:01:22,090
programming and CoffeeScript and

00:01:20,070 --> 00:01:24,159
concrete and command-line written on

00:01:22,090 --> 00:01:26,439
Michael hardens framework that he wrote

00:01:24,159 --> 00:01:29,049
is platform and I have a couple copies

00:01:26,439 --> 00:01:32,350
of that book actually some PDF copies to

00:01:29,049 --> 00:01:33,939
give away so a couple couple lucky folks

00:01:32,350 --> 00:01:34,840
in the audience will learn all about the

00:01:33,939 --> 00:01:39,640
command line this is what it looks like

00:01:34,840 --> 00:01:43,090
when you win one you got all excited and

00:01:39,640 --> 00:01:45,700
just yeah I'm also a voice behind a site

00:01:43,090 --> 00:01:47,499
called meta cast TV which covers Ruby

00:01:45,700 --> 00:01:49,630
and JavaScript and go and all sorts of

00:01:47,499 --> 00:01:51,700
fun things and if you use this coupon

00:01:49,630 --> 00:01:53,859
code get your first month free so if you

00:01:51,700 --> 00:01:56,079
interested and go there's a couple

00:01:53,859 --> 00:01:58,929
screencasts up there that you can learn

00:01:56,079 --> 00:02:01,299
about for free so okay so we're gonna

00:01:58,929 --> 00:02:03,700
talk about go here and I know you're

00:02:01,299 --> 00:02:05,859
saying yourself mark this is a ruby

00:02:03,700 --> 00:02:07,390
conference right and here we are talking

00:02:05,859 --> 00:02:09,010
about go well I've been doing a lot of

00:02:07,390 --> 00:02:11,650
travel past a couple years and it's

00:02:09,010 --> 00:02:13,690
quite common at Ruby conferences to see

00:02:11,650 --> 00:02:15,100
a bunch of other languages being talked

00:02:13,690 --> 00:02:16,450
about and these are just a few of them

00:02:15,100 --> 00:02:19,270
we've heard a couple today we've heard

00:02:16,450 --> 00:02:21,790
node today I'm sure we've heard other

00:02:19,270 --> 00:02:24,820
ones here but Scala is a big one elixir

00:02:21,790 --> 00:02:27,190
you hear about that one a lot so why are

00:02:24,820 --> 00:02:28,870
we talking about these things why are we

00:02:27,190 --> 00:02:31,900
talking about languages that aren't Ruby

00:02:28,870 --> 00:02:34,480
add a ruby conference and to answer that

00:02:31,900 --> 00:02:41,080
question I'm gonna go back about 18

00:02:34,480 --> 00:02:41,970
years in 1996 so what do you want me to

00:02:41,080 --> 00:02:45,730
do about it

00:02:41,970 --> 00:02:48,090
so I'm gonna go back to about 1996 to

00:02:45,730 --> 00:02:50,080
when I was a freshman in college and

00:02:48,090 --> 00:02:52,060
what else a freshman in college I was

00:02:50,080 --> 00:02:53,140
there at the very first day a little

00:02:52,060 --> 00:02:57,330
background here I have a could have a

00:02:53,140 --> 00:02:59,980
degree in music and and stopped you to a

00:02:57,330 --> 00:03:01,810
guy in the github shirt github hoodie

00:02:59,980 --> 00:03:03,310
and you both get copies of the book oh

00:03:01,810 --> 00:03:04,780
and you were behind there You've I

00:03:03,310 --> 00:03:06,340
didn't see you there the three of you

00:03:04,780 --> 00:03:08,980
come see me afterwards and we'll get you

00:03:06,340 --> 00:03:12,010
hooked up for those coffees see Simon

00:03:08,980 --> 00:03:13,450
didn't stay sit down oh and I didn't say

00:03:12,010 --> 00:03:15,790
it again she got lost out on the coffees

00:03:13,450 --> 00:03:17,410
oh no I'm just kidding

00:03:15,790 --> 00:03:19,930
but definitely come see me afterwards

00:03:17,410 --> 00:03:21,070
that'd be really mean wouldn't it you

00:03:19,930 --> 00:03:23,980
guys won the book out I didn't say Simon

00:03:21,070 --> 00:03:25,180
Says anyway so I was a freshman in

00:03:23,980 --> 00:03:26,440
college and I went to school in England

00:03:25,180 --> 00:03:29,440
a little background I have a degree in

00:03:26,440 --> 00:03:31,300
music and I was there in the first day

00:03:29,440 --> 00:03:32,830
they found one of the founders of the

00:03:31,300 --> 00:03:34,959
school a guy named Mark Featherstone

00:03:32,830 --> 00:03:35,470
witty very English name if there ever

00:03:34,959 --> 00:03:37,660
was one

00:03:35,470 --> 00:03:39,730
was talking about the ethos oh the

00:03:37,660 --> 00:03:41,020
principal of the school why were we

00:03:39,730 --> 00:03:43,120
going to learn and how we were going to

00:03:41,020 --> 00:03:45,850
achieve it over the three years of our

00:03:43,120 --> 00:03:48,070
education and doing this he talked about

00:03:45,850 --> 00:03:50,500
how we had to interact with the other

00:03:48,070 --> 00:03:52,300
disciplines in the school in order to

00:03:50,500 --> 00:03:53,980
graduate in order to pass our classes we

00:03:52,300 --> 00:03:56,290
had to work not just as musicians and

00:03:53,980 --> 00:03:58,090
play music eight hours a day we had to

00:03:56,290 --> 00:04:00,550
work with dancers and actors and sound

00:03:58,090 --> 00:04:02,500
technologists in order to achieve our

00:04:00,550 --> 00:04:04,239
goals at the school and one of the

00:04:02,500 --> 00:04:06,550
things he said really stuck with me and

00:04:04,239 --> 00:04:10,269
it stuck with me to this day and he said

00:04:06,550 --> 00:04:13,300
art isn't created in a vacuum and I

00:04:10,269 --> 00:04:16,030
would say that neither is software like

00:04:13,300 --> 00:04:18,250
good art you need to be in me taking

00:04:16,030 --> 00:04:19,840
influences from the outside you need to

00:04:18,250 --> 00:04:23,050
understand what other people are doing

00:04:19,840 --> 00:04:24,700
in order to make your code better and to

00:04:23,050 --> 00:04:26,410
improve the quality of the application

00:04:24,700 --> 00:04:26,760
your writing and so bringing these new

00:04:26,410 --> 00:04:29,280
and

00:04:26,760 --> 00:04:31,440
interesting ideas and you need to be

00:04:29,280 --> 00:04:33,870
polyglot that was mentioned earlier

00:04:31,440 --> 00:04:36,420
today i'm china which taka was but it

00:04:33,870 --> 00:04:38,760
really is important to be a polyglot

00:04:36,420 --> 00:04:40,800
programmer if you were a song imagine

00:04:38,760 --> 00:04:42,930
how terrible the beatles would be if

00:04:40,800 --> 00:04:45,750
they never listened to Buddy Holly or

00:04:42,930 --> 00:04:48,480
Elvis Presley or the blues or baroque

00:04:45,750 --> 00:04:50,100
classical music or any other numbers of

00:04:48,480 --> 00:04:52,140
influences that the Beatles listened to

00:04:50,100 --> 00:04:54,390
in order to write their songs you would

00:04:52,140 --> 00:04:57,360
not have Sergeant Pepper had the Beatles

00:04:54,390 --> 00:05:00,510
not listened to music that was not in

00:04:57,360 --> 00:05:02,670
their style of music so I would argue

00:05:00,510 --> 00:05:04,530
that as a developer you need to do the

00:05:02,670 --> 00:05:06,750
same thing you need to write stuff in a

00:05:04,530 --> 00:05:08,580
style that is not your own and to learn

00:05:06,750 --> 00:05:10,230
what's out there and so today we're

00:05:08,580 --> 00:05:11,490
gonna do that we're gonna use go as that

00:05:10,230 --> 00:05:13,920
language we're gonna talk a little bit

00:05:11,490 --> 00:05:16,080
about what go is where go came from

00:05:13,920 --> 00:05:18,420
we're gonna take a quick overview of the

00:05:16,080 --> 00:05:20,520
go language very very quick and then

00:05:18,420 --> 00:05:23,280
we're gonna end it on looking at tools

00:05:20,520 --> 00:05:25,530
that are similar to what we have here in

00:05:23,280 --> 00:05:26,730
the Ruby world so that hopefully if you

00:05:25,530 --> 00:05:29,130
decide you know I'm gonna write an app

00:05:26,730 --> 00:05:30,900
and go or oh geez you know my company

00:05:29,130 --> 00:05:33,420
could really benefit from using go for a

00:05:30,900 --> 00:05:35,790
part of what it does then you have an

00:05:33,420 --> 00:05:39,450
idea of where to start you don't to kind

00:05:35,790 --> 00:05:41,640
of do all this research yourself so what

00:05:39,450 --> 00:05:45,240
is go well go comes from this little

00:05:41,640 --> 00:05:47,400
startup up in Mountain View and you know

00:05:45,240 --> 00:05:50,970
they're trying people they're really

00:05:47,400 --> 00:05:52,710
trying they need your support and so

00:05:50,970 --> 00:05:54,690
this little company this little

00:05:52,710 --> 00:05:57,720
struggling startup the search engine

00:05:54,690 --> 00:05:59,550
that could if you will apparently I know

00:05:57,720 --> 00:06:02,880
where this article recently on Forbes

00:05:59,550 --> 00:06:04,260
that's a just out of curiosity how much

00:06:02,880 --> 00:06:06,540
traffic do you think Google is

00:06:04,260 --> 00:06:07,980
responsible for just shout out some

00:06:06,540 --> 00:06:12,350
numbers what percentage of Internet

00:06:07,980 --> 00:06:12,350
traffic a hundred percent

00:06:13,100 --> 00:06:19,949
Thanks no it is not a hundred percent

00:06:15,919 --> 00:06:22,770
it's significantly lower but not by much

00:06:19,949 --> 00:06:25,530
so according to Forbes the numbers 40

00:06:22,770 --> 00:06:29,130
percent of the internet that's a lot of

00:06:25,530 --> 00:06:32,490
traffic who here can match that number

00:06:29,130 --> 00:06:36,210
in their application anybody anybody 144

00:06:32,490 --> 00:06:37,860
39% anybody doing 39% I'll take 25 or so

00:06:36,210 --> 00:06:40,500
anybody doing it no I didn't think so if

00:06:37,860 --> 00:06:43,500
we took all the traffic we are

00:06:40,500 --> 00:06:47,310
responsible for in this room are yearly

00:06:43,500 --> 00:06:49,199
traffic usage combine it all feather I

00:06:47,310 --> 00:06:51,870
would be hard-pressed to imagine we hit

00:06:49,199 --> 00:06:54,930
an hour of Google's right they are on a

00:06:51,870 --> 00:06:57,360
level of scale that no one in this room

00:06:54,930 --> 00:06:59,910
is most likely ever going to be at

00:06:57,360 --> 00:07:02,729
unless you go work at Google right it's

00:06:59,910 --> 00:07:04,740
just that much traffic so when a company

00:07:02,729 --> 00:07:07,860
that is responsible for 40% of the

00:07:04,740 --> 00:07:09,780
Internet says you know we have come up

00:07:07,860 --> 00:07:12,720
with a language to solve our scalability

00:07:09,780 --> 00:07:14,580
issues do you think it's worth listening

00:07:12,720 --> 00:07:17,789
to you think it's worth the

00:07:14,580 --> 00:07:19,139
investigation cuz I certainly do they

00:07:17,789 --> 00:07:20,759
are having said we are having

00:07:19,139 --> 00:07:23,970
scalability issues now if they had 10

00:07:20,759 --> 00:07:25,979
years ago so just quick little pro tip

00:07:23,970 --> 00:07:29,370
by the way if you do try to Google for

00:07:25,979 --> 00:07:32,099
go use golang because the company that

00:07:29,370 --> 00:07:34,229
is known for his search ability came up

00:07:32,099 --> 00:07:37,949
with the most most uh Nesi ole bull name

00:07:34,229 --> 00:07:42,180
ever they might as well called it a oh

00:07:37,949 --> 00:07:47,880
I'm using a you guys use an a um even R

00:07:42,180 --> 00:07:51,630
is a more searchable then go so use

00:07:47,880 --> 00:07:54,750
golang ok so what is going well a go is

00:07:51,630 --> 00:07:57,060
a compiled of language which I know

00:07:54,750 --> 00:07:59,219
strikes fear in the heart of us dynamic

00:07:57,060 --> 00:08:02,669
scripting language people but it is

00:07:59,219 --> 00:08:04,139
compiled it is statically typed yet

00:08:02,669 --> 00:08:06,960
another thing that will get you thrown

00:08:04,139 --> 00:08:08,820
out of most Ruby conferences statically

00:08:06,960 --> 00:08:10,889
mention your words statically typed it

00:08:08,820 --> 00:08:13,229
is not nearly as statically type as say

00:08:10,889 --> 00:08:15,150
something like Java but it is a static

00:08:13,229 --> 00:08:17,219
or typed language it's garbage collected

00:08:15,150 --> 00:08:19,800
though we'd like that and actually it's

00:08:17,219 --> 00:08:22,770
garbage collection that works unlike

00:08:19,800 --> 00:08:25,860
some other languages that just stop and

00:08:22,770 --> 00:08:28,139
then continue its cross-platform

00:08:25,860 --> 00:08:30,150
it's truly cross-platform one of the

00:08:28,139 --> 00:08:33,360
nice parts about go is when you build a

00:08:30,150 --> 00:08:35,370
go binary it pulls in all the

00:08:33,360 --> 00:08:37,769
third-party dependencies you need so all

00:08:35,370 --> 00:08:39,599
the packages your app depends on and all

00:08:37,769 --> 00:08:41,820
the assets get pulled into this one

00:08:39,599 --> 00:08:44,190
binary along with or one time

00:08:41,820 --> 00:08:46,560
environment what's really nice about

00:08:44,190 --> 00:08:49,380
that is I can then compile on my Mac a

00:08:46,560 --> 00:08:50,700
windows binary handed to somebody on the

00:08:49,380 --> 00:08:53,339
Windows machine I can head to my mother

00:08:50,700 --> 00:08:54,690
who has no developer tools at all she'll

00:08:53,339 --> 00:08:56,970
still screw it up but I can hand it to

00:08:54,690 --> 00:08:59,459
her and she could run it and it would

00:08:56,970 --> 00:09:01,890
execute on her machine flawlessly

00:08:59,459 --> 00:09:03,779
without any other installs that also

00:09:01,890 --> 00:09:05,779
means you can do assists you can do

00:09:03,779 --> 00:09:08,610
deploys or application by using curl

00:09:05,779 --> 00:09:09,990
which is kind of cool but it is

00:09:08,610 --> 00:09:12,300
cross-platform so you can compile you

00:09:09,990 --> 00:09:14,610
can compile go to run on all sorts of

00:09:12,300 --> 00:09:16,079
systems it's incredibly concurrent

00:09:14,610 --> 00:09:17,670
you've probably heard this about go this

00:09:16,079 --> 00:09:19,980
is kind of goes big thing and we'll talk

00:09:17,670 --> 00:09:22,740
about concurrency in a minute it's also

00:09:19,980 --> 00:09:24,269
dead simple it's it's a very very

00:09:22,740 --> 00:09:26,880
straightforward language to give you a

00:09:24,269 --> 00:09:28,980
number does anybody know how many

00:09:26,880 --> 00:09:30,690
keywords now people at lunch don't

00:09:28,980 --> 00:09:32,820
answer this question cuz you know but

00:09:30,690 --> 00:09:38,579
how many keywords the C++ have does

00:09:32,820 --> 00:09:43,410
anybody know know eighty-four anybody

00:09:38,579 --> 00:09:44,370
know how many Java has 50 very good you

00:09:43,410 --> 00:09:45,360
were at lunch

00:09:44,370 --> 00:09:46,980
oh no you weren't now you want your

00:09:45,360 --> 00:09:48,480
breakfast breakfast different different

00:09:46,980 --> 00:09:50,399
meal I'll give it to you okay here's a

00:09:48,480 --> 00:09:51,779
tricky one for you everyone should be

00:09:50,399 --> 00:09:55,350
able to answer this one how many does

00:09:51,779 --> 00:09:58,740
Ruby have I'll give you a hint it's a

00:09:55,350 --> 00:10:01,680
magic number in the geek world 42

00:09:58,740 --> 00:10:08,010
exactly it has 42 keywords

00:10:01,680 --> 00:10:10,320
go 25 not bad that's a small amount of

00:10:08,010 --> 00:10:11,730
keywords that's you know two dozen

00:10:10,320 --> 00:10:15,320
keywords it's almost that's half of

00:10:11,730 --> 00:10:17,820
Java's and almost half of Ruby's right

00:10:15,320 --> 00:10:22,110
that's pretty good it also has no

00:10:17,820 --> 00:10:24,390
exceptions dough does not do X exception

00:10:22,110 --> 00:10:25,410
handling you get an error and you decide

00:10:24,390 --> 00:10:27,540
what you're going to do based on that

00:10:25,410 --> 00:10:30,750
error there's no exceptions that bubble

00:10:27,540 --> 00:10:32,130
up in your application okay so moving on

00:10:30,750 --> 00:10:34,620
to just talking about the basics of go

00:10:32,130 --> 00:10:36,510
real quick here here is a very simple go

00:10:34,620 --> 00:10:39,510
program has anybody seen go before has

00:10:36,510 --> 00:10:39,930
anybody actually seen some go code okay

00:10:39,510 --> 00:10:42,300
so some

00:10:39,930 --> 00:10:44,190
that's an idea look a quick run down

00:10:42,300 --> 00:10:46,410
this is the obligatory HelloWorld

00:10:44,190 --> 00:10:47,850
application this is one of two

00:10:46,410 --> 00:10:48,990
applications you need to write to get

00:10:47,850 --> 00:10:51,570
your CSS agree the other one is a

00:10:48,990 --> 00:10:54,120
Fibonacci generator and we'll be making

00:10:51,570 --> 00:10:56,100
one of those in just a minute and a

00:10:54,120 --> 00:10:58,890
couple things you can infer from this

00:10:56,100 --> 00:11:01,230
piece of code here there are packages go

00:10:58,890 --> 00:11:03,779
has the concept of packages that you put

00:11:01,230 --> 00:11:05,700
stuff into in this case here we have a

00:11:03,779 --> 00:11:07,470
main package this is also your entry

00:11:05,700 --> 00:11:10,170
point to all go applications is the main

00:11:07,470 --> 00:11:12,330
package with the main function it looks

00:11:10,170 --> 00:11:13,050
almost a bit like JavaScript to go it's

00:11:12,330 --> 00:11:16,529
kind of interesting

00:11:13,050 --> 00:11:18,060
it has imports so very similar to

00:11:16,529 --> 00:11:19,770
requires or import statements and other

00:11:18,060 --> 00:11:22,770
languages one of the nice things about

00:11:19,770 --> 00:11:24,330
go is when you go to compile it if you

00:11:22,770 --> 00:11:25,680
import something that you're not using

00:11:24,330 --> 00:11:27,930
or you declare a variable you're not

00:11:25,680 --> 00:11:30,600
using it'll refuse to compile and it'll

00:11:27,930 --> 00:11:32,640
throw arrows at you they say oh you try

00:11:30,600 --> 00:11:35,430
to import the time package you can't do

00:11:32,640 --> 00:11:36,870
that or oh you you create an X variable

00:11:35,430 --> 00:11:40,680
and you're not using it and X uses word

00:11:36,870 --> 00:11:42,380
oh how many people you're downloading go

00:11:40,680 --> 00:11:44,670
right now just to see if that's true I

00:11:42,380 --> 00:11:46,589
would totally use a language that yelled

00:11:44,670 --> 00:11:49,430
at me and like seventies Punk and you

00:11:46,589 --> 00:11:51,450
know cockney accent yeah oi

00:11:49,430 --> 00:11:53,070
anyway so what is this main function

00:11:51,450 --> 00:11:55,560
here I'm going to print hello world the

00:11:53,070 --> 00:11:57,779
other interesting thing about this here

00:11:55,560 --> 00:11:59,130
is actually this capital P and it's kind

00:11:57,779 --> 00:12:02,520
of weird that I'm pointing out a ticket

00:11:59,130 --> 00:12:05,100
capital letter but gos concept of

00:12:02,520 --> 00:12:07,140
privacy settings is really interesting

00:12:05,100 --> 00:12:08,850
there is no private key word there is no

00:12:07,140 --> 00:12:11,400
public viewer there's no protected

00:12:08,850 --> 00:12:14,700
keyword instead it takes a very very

00:12:11,400 --> 00:12:16,529
simple approach to doing to doing your

00:12:14,700 --> 00:12:19,709
privacy based of it within your package

00:12:16,529 --> 00:12:22,680
if you name a function a constant a type

00:12:19,709 --> 00:12:24,959
what-have-you with a capital letter it

00:12:22,680 --> 00:12:27,900
is public if you name it with a

00:12:24,959 --> 00:12:29,790
lowercase letter it's private that's it

00:12:27,900 --> 00:12:31,140
it's either public or private you can't

00:12:29,790 --> 00:12:34,140
call private things no matter how hard

00:12:31,140 --> 00:12:36,180
you try you can only call public things

00:12:34,140 --> 00:12:38,160
and it's really nice you can very

00:12:36,180 --> 00:12:40,260
quickly look at any function and know

00:12:38,160 --> 00:12:41,690
whether it's public or private I mean

00:12:40,260 --> 00:12:44,100
know whether you can use it

00:12:41,690 --> 00:12:45,180
okay so concurrency like I said this is

00:12:44,100 --> 00:12:47,010
one of the big things everybody loves

00:12:45,180 --> 00:12:51,329
concurrency and go because it's pretty

00:12:47,010 --> 00:12:52,800
sweet so here I have a two method to

00:12:51,329 --> 00:12:53,279
function little program here I've got a

00:12:52,800 --> 00:12:55,829
function

00:12:53,279 --> 00:12:57,660
lift heavy stuff right yeah lift heavy

00:12:55,829 --> 00:12:59,999
stuff and you can imagine it does it

00:12:57,660 --> 00:13:01,170
does heavy lifting that's why I had the

00:12:59,999 --> 00:13:03,569
comment just in case you didn't know

00:13:01,170 --> 00:13:05,670
what that did it does some heavy lifting

00:13:03,569 --> 00:13:07,529
and then I have this main function here

00:13:05,670 --> 00:13:11,490
which is going to call lift heavy things

00:13:07,529 --> 00:13:13,050
or left heavy stuff sorry and this is

00:13:11,490 --> 00:13:16,079
great but it's gonna happen and say this

00:13:13,050 --> 00:13:18,029
takes 30 seconds to lift heavy stuff my

00:13:16,079 --> 00:13:20,339
application is blocked on this line for

00:13:18,029 --> 00:13:22,439
30 seconds right this is a very common

00:13:20,339 --> 00:13:24,749
problem we face in the Ruby world all

00:13:22,439 --> 00:13:27,660
the time now in the NGO world however I

00:13:24,749 --> 00:13:29,999
can say hey you know it go run this off

00:13:27,660 --> 00:13:31,860
to the side for me here run this very

00:13:29,999 --> 00:13:34,230
heavy function so I can continue on and

00:13:31,860 --> 00:13:37,439
I can do that by adding two characters

00:13:34,230 --> 00:13:41,249
three if you count a space I guess I go

00:13:37,439 --> 00:13:43,110
lift heavy stuff that's it I've spun

00:13:41,249 --> 00:13:44,550
this off and it's going to do it and

00:13:43,110 --> 00:13:47,160
it's a very efficient way of spinning

00:13:44,550 --> 00:13:49,110
off as like a couple Kade a couple

00:13:47,160 --> 00:13:51,779
kilobytes to the heap I think to do it's

00:13:49,110 --> 00:13:54,029
very very efficient it also uses all the

00:13:51,779 --> 00:13:55,980
CPU processors you know so the CPUs on

00:13:54,029 --> 00:13:58,110
your machine so in Ruby you know you got

00:13:55,980 --> 00:14:00,360
that one master thread right that's

00:13:58,110 --> 00:14:02,459
running on that one core of your 24 core

00:14:00,360 --> 00:14:05,279
machine all right you spin up a thread

00:14:02,459 --> 00:14:06,720
and you still have one thread running on

00:14:05,279 --> 00:14:09,000
a twenty-four core machine you read up

00:14:06,720 --> 00:14:10,860
ten threads you still have one real

00:14:09,000 --> 00:14:13,079
thread on a twenty-four core machine and

00:14:10,860 --> 00:14:17,189
go it can use you can spin up hundreds

00:14:13,079 --> 00:14:18,809
of thousands of go routines and use all

00:14:17,189 --> 00:14:20,730
the processes and use all the system

00:14:18,809 --> 00:14:23,129
resources in your machine all by using

00:14:20,730 --> 00:14:24,329
this one go keyword it does the ret

00:14:23,129 --> 00:14:26,490
takes care of the rest for you when it's

00:14:24,329 --> 00:14:28,410
done it cleans up after itself no

00:14:26,490 --> 00:14:29,939
worries really really nicely you can

00:14:28,410 --> 00:14:32,550
just with any function by the way any

00:14:29,939 --> 00:14:34,740
function it can be any function does

00:14:32,550 --> 00:14:37,559
anything you could say go do it and

00:14:34,740 --> 00:14:40,199
it'll go off and do it right so think of

00:14:37,559 --> 00:14:42,540
how nice a and I'll give you a good

00:14:40,199 --> 00:14:45,269
example in a second here so here's a bit

00:14:42,540 --> 00:14:46,379
more of a complex example and this is a

00:14:45,269 --> 00:14:48,029
really interesting couple of interesting

00:14:46,379 --> 00:14:49,860
we're doing here one we're creating

00:14:48,029 --> 00:14:52,139
anonymous functions like go or lambdas

00:14:49,860 --> 00:14:53,850
sorry like JavaScript or lambdas and

00:14:52,139 --> 00:14:56,850
Ruby we're also creating a

00:14:53,850 --> 00:14:58,879
communications channel that our function

00:14:56,850 --> 00:15:01,860
can use and this is a bi-directional

00:14:58,879 --> 00:15:03,329
communications channel here so I can

00:15:01,860 --> 00:15:05,339
spin off these threads I can spit out

00:15:03,329 --> 00:15:07,020
these go routines and send them

00:15:05,339 --> 00:15:09,060
information they can send me back in

00:15:07,020 --> 00:15:10,470
information and I can listen for that

00:15:09,060 --> 00:15:11,700
information I can act upon the

00:15:10,470 --> 00:15:13,350
information that's coming back and sent

00:15:11,700 --> 00:15:15,300
more information to these go routines

00:15:13,350 --> 00:15:16,860
and that's how we communicate with all

00:15:15,300 --> 00:15:20,190
these different go routines that's it

00:15:16,860 --> 00:15:21,870
like that is how you communicate there's

00:15:20,190 --> 00:15:24,180
nothing fun like funky there you're not

00:15:21,870 --> 00:15:25,590
putting things on thread current and if

00:15:24,180 --> 00:15:27,420
anybody's ever done stuff like that you

00:15:25,590 --> 00:15:29,070
know these weird actor pattern libraries

00:15:27,420 --> 00:15:32,190
that are doing this this is baked into

00:15:29,070 --> 00:15:34,650
the language this is not a library or

00:15:32,190 --> 00:15:37,890
package that's added on it is core to

00:15:34,650 --> 00:15:40,470
goes goes premise this is what go was

00:15:37,890 --> 00:15:42,780
built for to do exactly this sort of

00:15:40,470 --> 00:15:43,950
thing here super awesome so an example

00:15:42,780 --> 00:15:46,680
of when you could use something like

00:15:43,950 --> 00:15:49,410
this imagine this case where a user

00:15:46,680 --> 00:15:50,550
uploads an image and you want to process

00:15:49,410 --> 00:15:51,420
that image right we've all done this

00:15:50,550 --> 00:15:52,800
I've raised your hand if you've

00:15:51,420 --> 00:15:54,480
processed images you've cropped them

00:15:52,800 --> 00:15:56,970
you've scaled them exactly everybody's

00:15:54,480 --> 00:15:58,890
done it right so imagine now in your

00:15:56,970 --> 00:16:01,380
controller you get this you just been

00:15:58,890 --> 00:16:03,120
off ten go routines each one that does

00:16:01,380 --> 00:16:04,260
the processing simultaneously right

00:16:03,120 --> 00:16:06,270
there in your controller you have

00:16:04,260 --> 00:16:07,830
channels talking to all of them each

00:16:06,270 --> 00:16:10,050
one's communicating back when it's

00:16:07,830 --> 00:16:11,670
finishing you've got a WebSocket talking

00:16:10,050 --> 00:16:13,650
back to your front-end talking to your

00:16:11,670 --> 00:16:14,850
JavaScript application that's setting up

00:16:13,650 --> 00:16:16,110
the first one's finish that ninth ones

00:16:14,850 --> 00:16:17,250
finish the third ones finish the fourth

00:16:16,110 --> 00:16:18,480
one spans the second one space that the

00:16:17,250 --> 00:16:20,100
eighth one's finished up you're a

00:16:18,480 --> 00:16:22,980
hundred percent done redirect you to

00:16:20,100 --> 00:16:24,270
your gallery page all right you can do

00:16:22,980 --> 00:16:27,570
that just by doing this sort of stuff

00:16:24,270 --> 00:16:31,650
here really slacking it is pretty super

00:16:27,570 --> 00:16:33,990
cool ok so speed I said go is very fast

00:16:31,650 --> 00:16:36,860
and I think people have heard that here

00:16:33,990 --> 00:16:39,240
is that Fibonacci generator and go

00:16:36,860 --> 00:16:43,110
because most websites run on the power

00:16:39,240 --> 00:16:45,930
of Fibonacci generators why do we use

00:16:43,110 --> 00:16:47,670
this as a benchmark for anything who is

00:16:45,930 --> 00:16:49,710
ever realistically written a Fibonacci

00:16:47,670 --> 00:16:51,810
generator in the real world like honey I

00:16:49,710 --> 00:16:53,460
deployed a Fibonacci generator today the

00:16:51,810 --> 00:16:55,590
CEO comes in how's that Fibonacci cough

00:16:53,460 --> 00:16:57,210
generator coming Mary it's coming along

00:16:55,590 --> 00:16:59,180
I'm almost there it's gonna write a few

00:16:57,210 --> 00:17:03,300
more tests but anyway so here's my

00:16:59,180 --> 00:17:04,890
generator he'd go and here's the you

00:17:03,300 --> 00:17:07,350
know admittedly nicer to look at Ruby

00:17:04,890 --> 00:17:10,200
version but when we run these rather

00:17:07,350 --> 00:17:12,270
arbitrary benchmarks we can see that go

00:17:10,200 --> 00:17:14,700
comes in at point zero zero five seconds

00:17:12,270 --> 00:17:17,820
to run and Ruby zero point three eight

00:17:14,700 --> 00:17:20,820
seconds all right so go is what seven

00:17:17,820 --> 00:17:23,550
times faster in this particular case

00:17:20,820 --> 00:17:25,050
those numbers start really adding up as

00:17:23,550 --> 00:17:26,790
you move forward especially when you

00:17:25,050 --> 00:17:28,070
throw in the concurrency and you're

00:17:26,790 --> 00:17:30,840
processing a hundred thousand things

00:17:28,070 --> 00:17:32,160
simultaneously on one machine talk about

00:17:30,840 --> 00:17:38,130
getting the most of your free hero code

00:17:32,160 --> 00:17:41,760
I know go baby go we'll do it for you so

00:17:38,130 --> 00:17:43,350
okay so definitely very fast so duck

00:17:41,760 --> 00:17:45,570
typing I actually wanted to change its

00:17:43,350 --> 00:17:47,910
this slide to uh it'd be titled

00:17:45,570 --> 00:17:49,620
interfaces but I think duck typing is

00:17:47,910 --> 00:17:50,880
actually an interesting topic because

00:17:49,620 --> 00:17:53,490
it's something that's so near and dear

00:17:50,880 --> 00:17:56,390
to our hearts let's go developers as

00:17:53,490 --> 00:18:00,000
sorry as ruby developer Zeke's

00:17:56,390 --> 00:18:01,830
Wow I converted you all already we're

00:18:00,000 --> 00:18:05,340
all go developers what we all love

00:18:01,830 --> 00:18:07,820
throwing any arbitrary thing at a method

00:18:05,340 --> 00:18:10,260
and as long as it has that function

00:18:07,820 --> 00:18:12,690
it'll run it'll run just fine right

00:18:10,260 --> 00:18:15,780
so Goa is statically typed you do have

00:18:12,690 --> 00:18:18,000
to say in a go program I want something

00:18:15,780 --> 00:18:21,600
of type string or I want something of

00:18:18,000 --> 00:18:22,830
you know type X Y or Z you know to come

00:18:21,600 --> 00:18:25,740
into this function and then I could call

00:18:22,830 --> 00:18:26,970
things on it well go let you kind of get

00:18:25,740 --> 00:18:29,900
away with duck typing a little bit by

00:18:26,970 --> 00:18:32,190
the way it handles interfaces so in Java

00:18:29,900 --> 00:18:34,740
because that my experience before Ruby

00:18:32,190 --> 00:18:36,420
in the early 2000s was Java based that's

00:18:34,740 --> 00:18:38,460
why I always are quite things too so in

00:18:36,420 --> 00:18:40,650
Java you have explicit interface

00:18:38,460 --> 00:18:43,980
declarations you say I have an interface

00:18:40,650 --> 00:18:45,990
it requires these functions and then in

00:18:43,980 --> 00:18:48,480
my class I'm going to implement this

00:18:45,990 --> 00:18:51,240
interface explicitly and then define

00:18:48,480 --> 00:18:53,550
those things go has an implicit

00:18:51,240 --> 00:18:56,370
interface relationship so what that

00:18:53,550 --> 00:18:58,950
means is if you define an interface that

00:18:56,370 --> 00:19:01,500
requires XY and Z functions if your

00:18:58,950 --> 00:19:04,980
struct happens to also have XY and Z

00:19:01,500 --> 00:19:07,680
functions on it you implement that

00:19:04,980 --> 00:19:08,700
interface as simple as that so anything

00:19:07,680 --> 00:19:09,900
that implements those functions

00:19:08,700 --> 00:19:12,060
automatically implements those

00:19:09,900 --> 00:19:14,610
interfaces and everything implements the

00:19:12,060 --> 00:19:16,050
empty interface so if you really wanted

00:19:14,610 --> 00:19:17,760
to get crazy you could say I tell you

00:19:16,050 --> 00:19:19,020
I'll my function takes an empty empty

00:19:17,760 --> 00:19:21,630
interface which is the equivalent of

00:19:19,020 --> 00:19:23,610
saying I take object in something like

00:19:21,630 --> 00:19:26,280
Java or Ruby right I'll take any object

00:19:23,610 --> 00:19:27,660
you throw at me it'll work but here's an

00:19:26,280 --> 00:19:31,140
example here I've got a greeter

00:19:27,660 --> 00:19:33,360
interface up here and it says I want to

00:19:31,140 --> 00:19:34,390
say hello function I've got a struck

00:19:33,360 --> 00:19:36,520
I've got a talk

00:19:34,390 --> 00:19:40,120
here which takes a greeter I'm gonna

00:19:36,520 --> 00:19:41,500
function a food struct that implements a

00:19:40,120 --> 00:19:43,570
say hello function and the same thing

00:19:41,500 --> 00:19:45,010
with bar struct and then I can call both

00:19:43,570 --> 00:19:46,750
of them they're both implements in that

00:19:45,010 --> 00:19:49,150
interface this code will run this is

00:19:46,750 --> 00:19:51,970
executable code I didn't have to go and

00:19:49,150 --> 00:19:53,470
explicitly internment it I can just do

00:19:51,970 --> 00:19:57,160
it so this is really really nice pattern

00:19:53,470 --> 00:19:59,320
to have okay so on to the stuff that's

00:19:57,160 --> 00:19:59,800
probably useful for you is Rubeus coming

00:19:59,320 --> 00:20:01,450
to go

00:19:59,800 --> 00:20:03,790
all right the things that we use every

00:20:01,450 --> 00:20:05,410
day that we need so package management

00:20:03,790 --> 00:20:07,540
gonna start there right because go let's

00:20:05,410 --> 00:20:09,040
you have lets you use a third-party

00:20:07,540 --> 00:20:10,870
package just hope you know thankfully

00:20:09,040 --> 00:20:13,360
because it would be much more language

00:20:10,870 --> 00:20:15,460
if you couldn't they offer you go get

00:20:13,360 --> 00:20:18,640
which is kinda nice it's a thin little

00:20:15,460 --> 00:20:20,980
wrapper around get clone it's not that

00:20:18,640 --> 00:20:22,750
useful to be perfectly honest it's nice

00:20:20,980 --> 00:20:24,190
to fetch stuff from a repo without

00:20:22,750 --> 00:20:26,680
having to do git clone use dude go get

00:20:24,190 --> 00:20:28,780
in the package but it doesn't do package

00:20:26,680 --> 00:20:31,060
management for you it puts everything

00:20:28,780 --> 00:20:33,130
kind of in a central location you can't

00:20:31,060 --> 00:20:35,590
lock down specific revisions yada yada

00:20:33,130 --> 00:20:37,900
yada I just found out about this today

00:20:35,590 --> 00:20:40,990
actually at lunch the go package

00:20:37,900 --> 00:20:44,110
managers basically bundler for go so you

00:20:40,990 --> 00:20:45,870
have a go depths file I think and it

00:20:44,110 --> 00:20:47,560
lets you do all those nice things so

00:20:45,870 --> 00:20:49,780
definitely you would want to check out

00:20:47,560 --> 00:20:51,130
this package here and use that for

00:20:49,780 --> 00:20:52,780
managing dependencies I've also heard

00:20:51,130 --> 00:20:54,760
people using like make files and stuff

00:20:52,780 --> 00:20:58,030
this seems like a much cleaner way of

00:20:54,760 --> 00:20:59,980
doing it so testing testing is important

00:20:58,030 --> 00:21:02,020
to everybody or it's important to Rubeus

00:20:59,980 --> 00:21:04,060
it is not important to everybody I can

00:21:02,020 --> 00:21:05,200
tell you um there are definitely some

00:21:04,060 --> 00:21:11,140
communities out there that don't do

00:21:05,200 --> 00:21:12,670
testing at all JavaScript and honestly

00:21:11,140 --> 00:21:14,920
man I give so many JavaScript testing

00:21:12,670 --> 00:21:17,710
talks and no one raises their hand it's

00:21:14,920 --> 00:21:22,390
so sad test your JavaScript if you take

00:21:17,710 --> 00:21:25,870
one thing away test your JavaScript and

00:21:22,390 --> 00:21:27,850
if you don't I will find you anyway so

00:21:25,870 --> 00:21:30,820
dough also takes testing very very

00:21:27,850 --> 00:21:32,650
seriously this is a go test here I'm

00:21:30,820 --> 00:21:34,360
testing a package called calculator my

00:21:32,650 --> 00:21:35,320
calculator package has add functions

00:21:34,360 --> 00:21:37,330
remove functions

00:21:35,320 --> 00:21:39,430
oh sorry add you know add subtract

00:21:37,330 --> 00:21:42,520
whatever this is very simple it's kind

00:21:39,430 --> 00:21:44,320
of test unit style and that's you have a

00:21:42,520 --> 00:21:46,540
you import testing package you create a

00:21:44,320 --> 00:21:47,610
function that's named a particular way

00:21:46,540 --> 00:21:48,870
in this case

00:21:47,610 --> 00:21:51,930
and then the name of functions or test

00:21:48,870 --> 00:21:53,460
ad you call the function you check to

00:21:51,930 --> 00:21:56,130
make sure it does what you think it does

00:21:53,460 --> 00:21:57,600
otherwise you kind of add an error to

00:21:56,130 --> 00:22:00,150
the test and I'll gets printed off the

00:21:57,600 --> 00:22:01,680
very end very simple very easy to use

00:22:00,150 --> 00:22:03,510
it's just straight go which is kind of

00:22:01,680 --> 00:22:07,130
nice if you'd like something a little

00:22:03,510 --> 00:22:10,530
more mini test dish or r-spec ish

00:22:07,130 --> 00:22:11,880
pivotal labs Paul it's pivotal all right

00:22:10,530 --> 00:22:14,280
there should be like 18 pivotal people

00:22:11,880 --> 00:22:17,760
here today I think 20 of them gave talks

00:22:14,280 --> 00:22:20,010
I think I think half of today's talks

00:22:17,760 --> 00:22:21,480
are brought to you by pivotal just kind

00:22:20,010 --> 00:22:23,070
of interesting but anyway they released

00:22:21,480 --> 00:22:26,100
this great little framework here called

00:22:23,070 --> 00:22:28,560
ginkgo hard to say but awesome you use

00:22:26,100 --> 00:22:30,180
and it looks a little bit like this you

00:22:28,560 --> 00:22:32,490
can do describe blocks you can do it

00:22:30,180 --> 00:22:35,520
blocks a little bit more you know you

00:22:32,490 --> 00:22:37,650
can you expect this to equal that sort

00:22:35,520 --> 00:22:39,180
of thing it's nice I like it I think

00:22:37,650 --> 00:22:40,590
it's a little I don't know it's just

00:22:39,180 --> 00:22:43,380
it's more used to what I'm used to as a

00:22:40,590 --> 00:22:45,690
Rubeus right the plain one is nice when

00:22:43,380 --> 00:22:47,130
it go gives you this is nice too if you

00:22:45,690 --> 00:22:49,800
come from that ruby world we'd like that

00:22:47,130 --> 00:22:51,660
behavior-driven kind of style to it here

00:22:49,800 --> 00:22:53,520
a couple real quick things to note here

00:22:51,660 --> 00:22:55,350
actually these little dots appear in the

00:22:53,520 --> 00:22:55,920
imports are kind of are there for a

00:22:55,350 --> 00:22:57,540
reason

00:22:55,920 --> 00:22:58,500
so I remember I was creating the slide

00:22:57,540 --> 00:22:59,790
I'm like what the hell these little dots

00:22:58,500 --> 00:23:01,770
come from even though I had written this

00:22:59,790 --> 00:23:03,210
code by the way I was like I thought I

00:23:01,770 --> 00:23:04,470
was part of like my coffee and I thought

00:23:03,210 --> 00:23:07,500
I deleted them and I ran the code I'm

00:23:04,470 --> 00:23:09,000
like oh they don't don't work so when

00:23:07,500 --> 00:23:10,440
you import stuff and go this is kind of

00:23:09,000 --> 00:23:12,450
interesting little fact I told you

00:23:10,440 --> 00:23:15,150
earlier that if you import something you

00:23:12,450 --> 00:23:17,400
don't use it go yells at you right so

00:23:15,150 --> 00:23:20,130
you have a couple of options you can do

00:23:17,400 --> 00:23:22,080
you can put an underscore in front of

00:23:20,130 --> 00:23:24,930
the import which says import this thing

00:23:22,080 --> 00:23:26,970
but don't Yelp me if I don't use it and

00:23:24,930 --> 00:23:30,030
strangely enough there are use cases for

00:23:26,970 --> 00:23:32,400
that particular around databases for

00:23:30,030 --> 00:23:34,260
some reason the other one is this little

00:23:32,400 --> 00:23:37,110
dot here where you say if I put a period

00:23:34,260 --> 00:23:40,140
in front of this to import what's inside

00:23:37,110 --> 00:23:41,760
that package to this current package so

00:23:40,140 --> 00:23:45,030
that's why I can just call the scribe

00:23:41,760 --> 00:23:48,840
and not ginko dot describe or why I call

00:23:45,030 --> 00:23:50,280
add and not calculated dot add so it's

00:23:48,840 --> 00:23:51,480
kind of interesting way if you notice

00:23:50,280 --> 00:23:53,130
everything is kind of prefixed with the

00:23:51,480 --> 00:23:54,570
package name so you can get around that

00:23:53,130 --> 00:23:56,820
if you use those dots if you really want

00:23:54,570 --> 00:23:57,900
to it's not kind of a typical way you do

00:23:56,820 --> 00:23:59,850
things and you wouldn't write a lot of

00:23:57,900 --> 00:24:00,400
programs like that potestas certainly a

00:23:59,850 --> 00:24:03,070
nice thing

00:24:00,400 --> 00:24:04,780
to do that with okay so the web right

00:24:03,070 --> 00:24:08,440
here who here writes web applications

00:24:04,780 --> 00:24:11,530
anybody anybody a few people you guys

00:24:08,440 --> 00:24:13,410
ever heard of rails I've heard good

00:24:11,530 --> 00:24:18,100
thing

00:24:13,410 --> 00:24:19,960
so go surprisingly has a great net HTTP

00:24:18,100 --> 00:24:22,510
library built right in here this is an

00:24:19,960 --> 00:24:24,970
example of kind of a holo world go web

00:24:22,510 --> 00:24:26,650
application so one thing I will say

00:24:24,970 --> 00:24:28,500
about this this is uh this is the

00:24:26,650 --> 00:24:30,400
equivalent by the way of doing web brick

00:24:28,500 --> 00:24:33,160
all right this is the kind of web

00:24:30,400 --> 00:24:34,930
British package inside of go now who

00:24:33,160 --> 00:24:36,190
here is deploy who here knows web brick

00:24:34,930 --> 00:24:38,530
everybody know web brick

00:24:36,190 --> 00:24:41,170
okay so built-in server that comes with

00:24:38,530 --> 00:24:46,450
Ruby who here would deploy web brick to

00:24:41,170 --> 00:24:48,310
production okay you've done that you are

00:24:46,450 --> 00:24:50,860
a braver man than a higher my friend

00:24:48,310 --> 00:24:52,810
okay web brick is not production ready

00:24:50,860 --> 00:24:56,380
do not move throw it into production

00:24:52,810 --> 00:24:59,290
you might be tempted to but do not wear

00:24:56,380 --> 00:25:02,290
as this actually is production ready

00:24:59,290 --> 00:25:05,650
this is a so battle-hardened in DDoS

00:25:02,290 --> 00:25:08,470
proofed that Google uses this to power

00:25:05,650 --> 00:25:10,690
downloads the download site for Google

00:25:08,470 --> 00:25:12,910
so when you go to DL google.com you

00:25:10,690 --> 00:25:13,330
download Chrome you download Android

00:25:12,910 --> 00:25:15,640
apps

00:25:13,330 --> 00:25:19,780
anything you download from go from

00:25:15,640 --> 00:25:22,000
Google runs through this library right

00:25:19,780 --> 00:25:24,250
that tells you something again I would

00:25:22,000 --> 00:25:25,840
never deployed web brick but if Google

00:25:24,250 --> 00:25:28,840
is using this to power their downloads

00:25:25,840 --> 00:25:32,170
it's gotta be do it it's got to be

00:25:28,840 --> 00:25:34,090
powerful and got to be fast if this sort

00:25:32,170 --> 00:25:36,490
of style it's gonna raw style here

00:25:34,090 --> 00:25:40,030
doesn't work for you highly recommend

00:25:36,490 --> 00:25:43,660
the Martini package right martini by

00:25:40,030 --> 00:25:44,440
code gangsta Jerry miss Jeremy Sands is

00:25:43,660 --> 00:25:48,160
that how you pronounce his name

00:25:44,440 --> 00:25:49,330
he's a Rubeus GaN goest gun gopher I'm

00:25:48,160 --> 00:25:50,650
not quite sure what they call it will

00:25:49,330 --> 00:25:52,620
call himself goal Angus

00:25:50,650 --> 00:25:54,970
but anyway it is a Sinatra esque

00:25:52,620 --> 00:25:57,640
framework cuz every language has to have

00:25:54,970 --> 00:26:00,100
a version of Sinatra even Ruby's got

00:25:57,640 --> 00:26:02,350
like 30 versions of Sinatra it's amazing

00:26:00,100 --> 00:26:03,790
but it's really nice it really kind of

00:26:02,350 --> 00:26:08,260
cleans things up for you it's got a

00:26:03,790 --> 00:26:10,600
great contributor override and session

00:26:08,260 --> 00:26:12,850
management rendering and all sorts of

00:26:10,600 --> 00:26:13,630
stuff really really clean really nice

00:26:12,850 --> 00:26:16,059
and it

00:26:13,630 --> 00:26:17,650
fully interacts with the net HTTP

00:26:16,059 --> 00:26:19,510
library so if you pull in other packages

00:26:17,650 --> 00:26:20,980
it doesn't kind of clobber all that it

00:26:19,510 --> 00:26:23,200
still works so you can kind of use

00:26:20,980 --> 00:26:24,640
things together and someone at lunch

00:26:23,200 --> 00:26:26,080
they asked me about templating and I

00:26:24,640 --> 00:26:28,600
didn't put a slide up here but I

00:26:26,080 --> 00:26:30,549
probably should so go has a really nice

00:26:28,600 --> 00:26:33,160
templating language library built in

00:26:30,549 --> 00:26:35,280
very handlebars esque but one of the

00:26:33,160 --> 00:26:37,500
interesting things about it is it does

00:26:35,280 --> 00:26:40,750
context-aware

00:26:37,500 --> 00:26:43,620
escaping so let's say for example you

00:26:40,750 --> 00:26:46,690
pass you pass the template a struct and

00:26:43,620 --> 00:26:50,260
you inside of a script tag inside that

00:26:46,690 --> 00:26:52,000
template you want to put the struct go

00:26:50,260 --> 00:26:55,150
we'll take that and convert that to a

00:26:52,000 --> 00:26:57,909
JSON object and print it out as a JSON

00:26:55,150 --> 00:27:00,610
object right but if you put say you're

00:26:57,909 --> 00:27:03,429
in an href tag and you put a string you

00:27:00,610 --> 00:27:05,500
insert a string into a URL field on the

00:27:03,429 --> 00:27:09,159
href tear in the href on the hf tag

00:27:05,500 --> 00:27:11,740
it'll URL escape it right so it knows

00:27:09,159 --> 00:27:13,809
where you are in the HTML and figures

00:27:11,740 --> 00:27:15,070
with your proper way to escape whatever

00:27:13,809 --> 00:27:17,530
it is you're trying to do they're just

00:27:15,070 --> 00:27:18,429
pretty nice pretty slick and you can

00:27:17,530 --> 00:27:20,049
also the other thing it's kind of

00:27:18,429 --> 00:27:23,320
interesting you can only pass one thing

00:27:20,049 --> 00:27:24,520
to your template so in rails you can

00:27:23,320 --> 00:27:25,870
create all these different instance

00:27:24,520 --> 00:27:27,940
variables and are all available to you

00:27:25,870 --> 00:27:29,980
in your template and then your views end

00:27:27,940 --> 00:27:31,270
up looking like because you're

00:27:29,980 --> 00:27:33,640
doing a hundred different things in

00:27:31,270 --> 00:27:36,789
there right go says no no you got one

00:27:33,640 --> 00:27:39,340
thing give me one thing to pass in so

00:27:36,789 --> 00:27:42,250
you really have to think about what it

00:27:39,340 --> 00:27:43,690
is you're going to pass in right and so

00:27:42,250 --> 00:27:45,850
you end up with these templates that

00:27:43,690 --> 00:27:48,429
really do just one thing which is what

00:27:45,850 --> 00:27:52,450
they're supposed to do so that's really

00:27:48,429 --> 00:27:54,970
really nice so databases go has drivers

00:27:52,450 --> 00:27:57,789
for all your modern exciting databases

00:27:54,970 --> 00:28:01,809
even if you consider that a

00:27:57,789 --> 00:28:04,530
database or just a storage the put stuff

00:28:01,809 --> 00:28:04,530
you don't care about

00:28:04,620 --> 00:28:10,320
I got a so I have to just quick off

00:28:08,370 --> 00:28:12,419
topic so I got an email from recruiter

00:28:10,320 --> 00:28:15,750
the other day and because it's just

00:28:12,419 --> 00:28:18,690
classic and it was for a senior MongoDB

00:28:15,750 --> 00:28:21,330
architects job and I just had like what

00:28:18,690 --> 00:28:23,490
the hell is that like what is it senior

00:28:21,330 --> 00:28:26,340
MongoDB arket that are we not all senior

00:28:23,490 --> 00:28:30,659
MongoDB architects just by installing it

00:28:26,340 --> 00:28:32,250
you can instantly have the Hat who is

00:28:30,659 --> 00:28:34,289
like this is somebody's career like this

00:28:32,250 --> 00:28:35,760
is a business card somebody has printed

00:28:34,289 --> 00:28:38,159
up like I'm a single senior

00:28:35,760 --> 00:28:41,130
architect yeah well I keeps lose all my

00:28:38,159 --> 00:28:44,130
 well yeah we know we're we're we're

00:28:41,130 --> 00:28:48,480
working on it anyway sorry I didn't mean

00:28:44,130 --> 00:28:49,649
to go off on a tangent crazy anyways so

00:28:48,480 --> 00:28:51,990
there I like said there drivers for

00:28:49,649 --> 00:28:54,210
everything the go documentation actually

00:28:51,990 --> 00:28:55,919
has a wiki page that lists all the

00:28:54,210 --> 00:28:58,279
drivers the Postgres drivers it's a

00:28:55,919 --> 00:29:01,080
couple of them the PQ one is fantastic

00:28:58,279 --> 00:29:04,279
really stable really really fast really

00:29:01,080 --> 00:29:06,179
recommended there are a couple other

00:29:04,279 --> 00:29:08,220
frameworks you can put on top of that

00:29:06,179 --> 00:29:10,010
one I think that should be included in

00:29:08,220 --> 00:29:13,140
the standard library is called sequel X

00:29:10,010 --> 00:29:14,730
here and this just adds a little a few

00:29:13,140 --> 00:29:16,559
extra sprinkles of goodness on top of

00:29:14,730 --> 00:29:19,320
the sequel package that go has in

00:29:16,559 --> 00:29:20,130
particular it lets you map result sets

00:29:19,320 --> 00:29:22,200
to Struck's

00:29:20,130 --> 00:29:24,750
so you can work with them really really

00:29:22,200 --> 00:29:27,510
nicely so if you do anything and go any

00:29:24,750 --> 00:29:29,070
sub database stuff instantly add this to

00:29:27,510 --> 00:29:30,929
your pack that instantly add this to

00:29:29,070 --> 00:29:32,880
your project and use it it's phenomenal

00:29:30,929 --> 00:29:35,549
it uses all the same method calls that

00:29:32,880 --> 00:29:37,710
the sequel to go built in one does but

00:29:35,549 --> 00:29:39,539
as a couple extra sprinkles on top well

00:29:37,710 --> 00:29:43,860
worth it if you want something more or

00:29:39,539 --> 00:29:46,559
Emma SH Gorp will do it for you here

00:29:43,860 --> 00:29:48,330
good old raisins in peanuts or go

00:29:46,559 --> 00:29:51,090
relational persistence I think it's what

00:29:48,330 --> 00:29:52,679
they were trying to go for they're all I

00:29:51,090 --> 00:29:54,870
can think of was camping and hiking when

00:29:52,679 --> 00:29:56,490
I was a kid and that gives you a bit

00:29:54,870 --> 00:29:58,169
more things got like migrations and

00:29:56,490 --> 00:29:59,850
other type things it's a little

00:29:58,169 --> 00:30:01,289
heavy-handed and over-the-top for me to

00:29:59,850 --> 00:30:02,700
be perfectly on skis go was so simple

00:30:01,289 --> 00:30:04,380
then when you start using something like

00:30:02,700 --> 00:30:05,520
this you feel like oh why am i doing

00:30:04,380 --> 00:30:07,919
this it's like when you start using

00:30:05,520 --> 00:30:09,000
active record with Sinatra you're like

00:30:07,919 --> 00:30:11,700
should I be doing this

00:30:09,000 --> 00:30:13,140
something just seems wrong here but it's

00:30:11,700 --> 00:30:14,610
nicely so if you want like I would

00:30:13,140 --> 00:30:15,059
recommend using like the migrations from

00:30:14,610 --> 00:30:17,550
Gorp

00:30:15,059 --> 00:30:19,380
with the sequel X package

00:30:17,550 --> 00:30:21,240
and you get kind of a nice best of both

00:30:19,380 --> 00:30:22,980
worlds and go on there and finally this

00:30:21,240 --> 00:30:24,870
jet jet kind of sits between the two of

00:30:22,980 --> 00:30:27,929
them the guy who wrote jet actually had

00:30:24,870 --> 00:30:30,000
a really good package called hood and he

00:30:27,929 --> 00:30:32,280
that was very active record ask head

00:30:30,000 --> 00:30:33,750
wears and all sorts of stuff and he

00:30:32,280 --> 00:30:35,070
stopped maintaining in favor of jet

00:30:33,750 --> 00:30:36,780
which kind of bummed me out because it

00:30:35,070 --> 00:30:38,850
was actually pretty nice but check it

00:30:36,780 --> 00:30:41,370
out it's kind of interesting so workers

00:30:38,850 --> 00:30:43,110
if after all this you feel you still

00:30:41,370 --> 00:30:45,480
need background workers because go

00:30:43,110 --> 00:30:48,240
routines aren't fast enough for you I

00:30:45,480 --> 00:30:49,740
would recommend the go worker library

00:30:48,240 --> 00:30:53,970
and the interesting thing about go

00:30:49,740 --> 00:30:55,860
worker is it consumes rescue jobs oh now

00:30:53,970 --> 00:30:59,070
I've got your attention so you can use

00:30:55,860 --> 00:31:02,100
the rescue library in your rails app to

00:30:59,070 --> 00:31:04,800
throw jobs into Redis and then have them

00:31:02,100 --> 00:31:07,140
pulled out using go and worked on would

00:31:04,800 --> 00:31:10,470
go because as everybody knows rescue not

00:31:07,140 --> 00:31:12,600
the fastest thing in the world it's nice

00:31:10,470 --> 00:31:15,300
you know sidekick is significantly

00:31:12,600 --> 00:31:18,030
better let's be honest but go worker

00:31:15,300 --> 00:31:22,290
claims to be 10 to 100 thousand times

00:31:18,030 --> 00:31:23,550
faster I am NOT verifying the tenacity

00:31:22,290 --> 00:31:25,559
of such claims

00:31:23,550 --> 00:31:28,260
I am just merely the guy up here telling

00:31:25,559 --> 00:31:29,640
you this is a good package this is again

00:31:28,260 --> 00:31:31,290
those numbers seem awfully high I think

00:31:29,640 --> 00:31:32,670
they're processing the 40% of the

00:31:31,290 --> 00:31:34,920
internet that go that Google is doing

00:31:32,670 --> 00:31:36,720
with these hundred thousand times here

00:31:34,920 --> 00:31:38,670
but it's definitely significantly faster

00:31:36,720 --> 00:31:41,820
so think about it

00:31:38,670 --> 00:31:43,290
so assets right the asset pipeline one

00:31:41,820 --> 00:31:44,300
of the big things I love about rails is

00:31:43,290 --> 00:31:46,800
the asset pipeline

00:31:44,300 --> 00:31:48,090
I'm a big CoffeeScript guy if you didn't

00:31:46,800 --> 00:31:50,700
notice I wrote a book on CoffeeScript

00:31:48,090 --> 00:31:52,220
really big into it so assets are a big

00:31:50,700 --> 00:31:55,140
thing I love the compilation of

00:31:52,220 --> 00:31:56,940
JavaScript into two j/s and then you

00:31:55,140 --> 00:31:58,890
know it's a one big file and canting it

00:31:56,940 --> 00:32:01,230
and what i've been doing up until today

00:31:58,890 --> 00:32:03,330
is actually shelling out to ruby i shell

00:32:01,230 --> 00:32:05,220
out two sprockets and then in

00:32:03,330 --> 00:32:06,900
development mode i shelled sprockets it

00:32:05,220 --> 00:32:09,000
doesn't look compiling you know renders

00:32:06,900 --> 00:32:11,160
the stuff back to the screen and then i

00:32:09,000 --> 00:32:13,500
production i compile it all it's the jas

00:32:11,160 --> 00:32:15,929
and ship it after today however I think

00:32:13,500 --> 00:32:18,270
I'm definitely switched alignment so

00:32:15,929 --> 00:32:20,880
that looks that looks pretty awesome so

00:32:18,270 --> 00:32:22,500
good job Searles very nice very excited

00:32:20,880 --> 00:32:25,950
I can't wait to see the linemen go

00:32:22,500 --> 00:32:27,390
package I'm putting you on the spot now

00:32:25,950 --> 00:32:30,730
there's gonna be a lineman the linemen

00:32:27,390 --> 00:32:33,460
Martini rather I want so when she

00:32:30,730 --> 00:32:35,169
go I've extolled the virtues I've showed

00:32:33,460 --> 00:32:38,110
you all the great packages you need to

00:32:35,169 --> 00:32:39,720
build a great web application and go so

00:32:38,110 --> 00:32:43,210
when should we use it well

00:32:39,720 --> 00:32:45,640
CLI first and foremost never write any

00:32:43,210 --> 00:32:46,860
more CLI that isn't Ingo all right one

00:32:45,640 --> 00:32:49,960
of the things like C on Stack Overflow

00:32:46,860 --> 00:32:51,370
reddit the Boston RB mailing list all

00:32:49,960 --> 00:32:53,980
sorts of places I hear this question

00:32:51,370 --> 00:32:57,520
asked all time how do i package up a

00:32:53,980 --> 00:32:59,260
ruby command line app for distribution

00:32:57,520 --> 00:33:00,910
with all my dependencies and stuff and

00:32:59,260 --> 00:33:02,110
people don't have Ruby installed and boa

00:33:00,910 --> 00:33:04,570
is there a way to do it the answer is no

00:33:02,110 --> 00:33:06,820
you can't the real payment yes go you

00:33:04,570 --> 00:33:08,710
get that one file that one file I can

00:33:06,820 --> 00:33:10,570
give to my mother and she's most

00:33:08,710 --> 00:33:12,850
technologically and that's purse I love

00:33:10,570 --> 00:33:14,470
you mom most technologically net person

00:33:12,850 --> 00:33:16,210
I've ever met and she could run a go

00:33:14,470 --> 00:33:19,390
file she could do it just by

00:33:16,210 --> 00:33:21,669
double-clicking on it CLI it's awesome

00:33:19,390 --> 00:33:24,419
for CLI it's got a great command options

00:33:21,669 --> 00:33:27,040
parser built into it as well concurrency

00:33:24,419 --> 00:33:29,950
if you're doing any sort of concurrency

00:33:27,040 --> 00:33:31,720
go is a great fit for you if you're just

00:33:29,950 --> 00:33:34,000
doing a simple document based Basecamp

00:33:31,720 --> 00:33:35,559
esque app and rails is gonna work just

00:33:34,000 --> 00:33:37,630
fine we heard that talked earlier right

00:33:35,559 --> 00:33:38,950
that's what rails is great at however if

00:33:37,630 --> 00:33:40,929
you want do something outside the box

00:33:38,950 --> 00:33:43,320
you want to be highly concurrent all

00:33:40,929 --> 00:33:45,520
right I would say don't use node use go

00:33:43,320 --> 00:33:47,140
go is gonna be a lot faster it's gonna

00:33:45,520 --> 00:33:52,150
be a lot cooler and all the kids are

00:33:47,140 --> 00:33:55,290
gonna come want to work for you speed we

00:33:52,150 --> 00:33:57,520
saw in the world of Fibonacci go is king

00:33:55,290 --> 00:33:59,710
because I guess that all apps run the

00:33:57,520 --> 00:34:01,450
power Fibonacci it is a light to

00:33:59,710 --> 00:34:02,980
moderate learning curve it's it's a

00:34:01,450 --> 00:34:06,100
pretty simple language once you learn

00:34:02,980 --> 00:34:07,840
the structure and the basic concepts you

00:34:06,100 --> 00:34:10,389
know you're kind of good to go I showed

00:34:07,840 --> 00:34:12,310
you these slides contain like most of

00:34:10,389 --> 00:34:14,889
what you need to get going with a go

00:34:12,310 --> 00:34:17,470
you know the documentation gives you the

00:34:14,889 --> 00:34:19,149
rest you know it's also a great language

00:34:17,470 --> 00:34:21,879
leash it shelter Ruby I told you I was

00:34:19,149 --> 00:34:23,260
doing that with with sprockets I was

00:34:21,879 --> 00:34:24,580
shelling out and saying can you give me

00:34:23,260 --> 00:34:26,530
this stuff get back to me so if you've

00:34:24,580 --> 00:34:28,510
got these really great Ruby

00:34:26,530 --> 00:34:29,470
transformation scripts for example you

00:34:28,510 --> 00:34:31,570
know Ruby's great it's stuff like

00:34:29,470 --> 00:34:33,580
transformations is so heavily meta

00:34:31,570 --> 00:34:35,109
driven right if you have these very

00:34:33,580 --> 00:34:37,240
little scripts and do all this stuff you

00:34:35,109 --> 00:34:39,609
can still call them from go you know

00:34:37,240 --> 00:34:41,230
have your go routines out there you know

00:34:39,609 --> 00:34:42,850
calling all these Ruby processes these

00:34:41,230 --> 00:34:44,809
little Ruby scripts which are then going

00:34:42,850 --> 00:34:46,339
to use all the processes on your

00:34:44,809 --> 00:34:48,409
right as opposed to become this one

00:34:46,339 --> 00:34:50,059
monolithic Ruby thing right it's a lot

00:34:48,409 --> 00:34:53,179
of benefit of mixing both of these two

00:34:50,059 --> 00:34:55,190
worlds here so finally some resources I

00:34:53,179 --> 00:34:57,019
gave you a lot of resources in the

00:34:55,190 --> 00:34:58,670
slides and the slide deck should have

00:34:57,019 --> 00:35:00,260
been tweeted out 14 minutes and 20

00:34:58,670 --> 00:35:02,539
seconds ago if buffer was doing its

00:35:00,260 --> 00:35:03,619
thing so follow me on Twitter and you'll

00:35:02,539 --> 00:35:06,500
see this little you're gonna access the

00:35:03,619 --> 00:35:08,500
slide deck golang.org great resource

00:35:06,500 --> 00:35:10,849
some little screencasts up there some

00:35:08,500 --> 00:35:13,730
excellent Docs they have a book called

00:35:10,849 --> 00:35:16,069
effective go it's an HTML book but if

00:35:13,730 --> 00:35:18,230
you print to PDF it's like 56 pages it's

00:35:16,069 --> 00:35:19,789
really really good like I said it's a

00:35:18,230 --> 00:35:21,829
great meta casts videos matter fact

00:35:19,789 --> 00:35:22,910
Monday's video is on sequel and go so if

00:35:21,829 --> 00:35:25,010
you want a little more all about sequel

00:35:22,910 --> 00:35:27,980
X definitely check that out on Monday

00:35:25,010 --> 00:35:30,740
using your free meta cast coupon for the

00:35:27,980 --> 00:35:32,390
next month and that is it I think I've

00:35:30,740 --> 00:35:35,089
got some time for some questions so who

00:35:32,390 --> 00:35:37,599
has questions I think that's it thank

00:35:35,089 --> 00:35:37,599

YouTube URL: https://www.youtube.com/watch?v=Ukqa5gSE0ig


