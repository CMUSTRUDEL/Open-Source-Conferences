Title: Amsterdam.rb meetup of 19th of November
Publication date: 2020-08-24
Playlist: Amsterdam.rb meetups
Description: 
	Live stream of the Amsterdam.rb meetup of the 19th of November.

Video program:
00:00 - Welcome, Code of Conduct and sponsor talk
04:30 - Tinco Andringa about DDD (Domain Driven Design)
47:27 - Break
48:14 - After break intro
48:49 - Alejandro Cadavid (@acadavid), Software Engineer at GitHub, on how Kafka is used for fault tolerant storage at GitHub. Alejandro previously worked at Wakoopa and Coupa. Born in Medellín, "Alejo" is a metalhead, (very) amateur musician, and frequent instructor for HackYourFuture.

---

Meetup description:
Program
18:00 - Doors open
18:30 - Food arrives 🥦🍟🍕🍖
19:10 - Tinco Andringa about DDD (Domain Driven Design)
Break
19:45 - Alejandro Cadavid (@acadavid), Software Engineer at GitHub, on how Kafka is used for fault tolerant storage at GitHub. Alejandro previously worked at Wakoopa and Coupa. Born in Medellín, "Alejo" is a metalhead, (very) amateur musician, and frequent instructor for HackYourFuture.
20:15-21:00 - Networking and drinks

---

Event page: https://www.meetup.com/Amsterdam-rb/events/266071858/
Website: https://amsrb.org/
Twitter: https://twitter.com/amsrb
Captions: 
	00:00:03,480 --> 00:00:12,870
hello everyone welcome at the MSM Ruby

00:00:07,849 --> 00:00:14,880
November um I was hoping to see more of

00:00:12,870 --> 00:00:19,140
you in this room but potentially we'll

00:00:14,880 --> 00:00:22,500
see you hello at home mark is there so

00:00:19,140 --> 00:00:24,900
for everyone in this room so we're

00:00:22,500 --> 00:00:27,810
experimenting still with live streaming

00:00:24,900 --> 00:00:31,260
this event this time you can even the

00:00:27,810 --> 00:00:33,630
reports you show in your home yeah and

00:00:31,260 --> 00:00:37,250
so you can ask your mom to give you

00:00:33,630 --> 00:00:37,250
feedback of your presentation I'm on

00:00:38,899 --> 00:00:48,899
anyway um so we have a quart of come out

00:00:47,070 --> 00:00:52,410
that we adhere to that means all

00:00:48,899 --> 00:00:54,149
speakers presenters guests people

00:00:52,410 --> 00:00:58,620
watching the livestream commenting on

00:00:54,149 --> 00:01:01,800
our whatever so if you don't know what

00:00:58,620 --> 00:01:09,360
it is read it because well you're here

00:01:01,800 --> 00:01:10,830
so you would hear yes also a big shout

00:01:09,360 --> 00:01:15,860
out to a Zilla flying for not only

00:01:10,830 --> 00:01:15,860
feeding us but also for having us here

00:01:19,520 --> 00:01:26,060
and you can be sure that it will say a

00:01:21,500 --> 00:01:29,210
thing or two later anyway with two tours

00:01:26,060 --> 00:01:31,820
lineup potentially tink only ha starts

00:01:29,210 --> 00:01:36,229
at ten past seven which is in two

00:01:31,820 --> 00:01:38,479
minutes and I ask them is it in Ohio if

00:01:36,229 --> 00:01:41,149
I just introduced you as it's about D D

00:01:38,479 --> 00:01:43,869
D and said well maybe make a DDD first

00:01:41,149 --> 00:01:46,880
is Ruby so clearly this is going to be

00:01:43,869 --> 00:01:49,640
something that can be against Rubio I

00:01:46,880 --> 00:01:51,950
haven't known and then I also break we

00:01:49,640 --> 00:01:54,799
have Alejandro talking about well

00:01:51,950 --> 00:02:01,250
storing things in Kafka it's going to be

00:01:54,799 --> 00:02:04,520
interesting then I'd like to give a

00:02:01,250 --> 00:02:05,060
shout out to the line and you introduce

00:02:04,520 --> 00:02:09,979
your company

00:02:05,060 --> 00:02:10,580
yes so I can talk 15 minutes I heard hi

00:02:09,979 --> 00:02:14,269
everybody

00:02:10,580 --> 00:02:16,790
at home so we're still flying you might

00:02:14,269 --> 00:02:19,130
know us from either screwed ratings or

00:02:16,790 --> 00:02:19,819
your online accounting system that's

00:02:19,130 --> 00:02:23,360
what we built

00:02:19,819 --> 00:02:27,560
or maybe domoto car we built Inca it's a

00:02:23,360 --> 00:02:30,980
bridge between the home automation world

00:02:27,560 --> 00:02:36,019
like z-wave or KNX and your Google home

00:02:30,980 --> 00:02:37,970
air pockets or Amazon Alexa and we as

00:02:36,019 --> 00:02:41,660
many other companies are looking for new

00:02:37,970 --> 00:02:44,120
and cool developers so if you're

00:02:41,660 --> 00:02:47,420
interested in working Friday's for

00:02:44,120 --> 00:02:49,190
yourself as learning or working on cool

00:02:47,420 --> 00:02:52,430
projects home automation on FinTech

00:02:49,190 --> 00:03:03,049
please come to me afterwards and enjoy

00:02:52,430 --> 00:03:05,299
the evening thank you also we have a

00:03:03,049 --> 00:03:07,100
meet of coming up and I think December

00:03:05,299 --> 00:03:11,480
17th I'm not completely sure if

00:03:07,100 --> 00:03:14,030
instituted a I guess it will be 1717 we

00:03:11,480 --> 00:03:18,680
think so to call rate five minutes to

00:03:14,030 --> 00:03:21,709
figure out so we have two speakers lined

00:03:18,680 --> 00:03:24,370
up Noah Berman he will talk about the

00:03:21,709 --> 00:03:28,549
critical aizen's and pizza Lerner and

00:03:24,370 --> 00:03:31,940
which was described as how to make your

00:03:28,549 --> 00:03:33,110
ops people happier live long and prosper

00:03:31,940 --> 00:03:34,490
and

00:03:33,110 --> 00:03:38,030
well it sounds like one big love story

00:03:34,490 --> 00:03:41,360
for engineers on well mostly around with

00:03:38,030 --> 00:03:44,420
your hubs anyway we're still looking for

00:03:41,360 --> 00:03:46,360
a nice location that is at least Wi-Fi

00:03:44,420 --> 00:03:49,820
friendly for people at home so uh

00:03:46,360 --> 00:03:52,670
everyone can follow it so this is the

00:03:49,820 --> 00:03:54,800
moment that you think hmm we're hiring

00:03:52,670 --> 00:03:55,520
we want to have all those Rudy devs in

00:03:54,800 --> 00:03:58,880
our house yeah

00:03:55,520 --> 00:04:00,950
so please contact me or floor or dome

00:03:58,880 --> 00:04:04,000
because they're organizers just like I

00:04:00,950 --> 00:04:07,940
am anyway um hope to see you there

00:04:04,000 --> 00:04:10,340
um and this one's really nice I'd like

00:04:07,940 --> 00:04:13,130
to invite in a minute think oh dude

00:04:10,340 --> 00:04:16,730
stage because I had that urge to know

00:04:13,130 --> 00:04:18,290
more about DDD and I was thinking on

00:04:16,730 --> 00:04:21,410
people that could present this thing and

00:04:18,290 --> 00:04:23,420
so this is just me abusing the Amsterdam

00:04:21,410 --> 00:04:34,400
Ruby meetup group to just learn a thing

00:04:23,420 --> 00:04:38,750
or two about DDD Thank You tink oh all

00:04:34,400 --> 00:04:42,200
right hi everyone I'm think oh it's

00:04:38,750 --> 00:04:44,750
probably never heard of me I used to

00:04:42,200 --> 00:04:46,580
work at the fusion maybe you've heard of

00:04:44,750 --> 00:04:48,560
that company we built fusion passenger

00:04:46,580 --> 00:04:52,880
which is a web application server that

00:04:48,560 --> 00:04:57,460
many people might have used after fusion

00:04:52,880 --> 00:05:00,620
I've been a freelancer for a while and

00:04:57,460 --> 00:05:03,169
did a couple projects and I also talked

00:05:00,620 --> 00:05:06,410
at the wacom the demo weeks really cool

00:05:03,169 --> 00:05:09,919
maybe if you can visit the demo day of

00:05:06,410 --> 00:05:14,750
Laguna on time cuz they're cool kids or

00:05:09,919 --> 00:05:19,280
whatever making projects and after that

00:05:14,750 --> 00:05:23,030
I did a freelance project to build an

00:05:19,280 --> 00:05:25,010
MVP for error scan our scan our people

00:05:23,030 --> 00:05:27,770
have fly around with drones taking

00:05:25,010 --> 00:05:30,640
pictures of your house maybe if you live

00:05:27,770 --> 00:05:33,110
in a social housing building so we're

00:05:30,640 --> 00:05:35,630
flying drones for social housing

00:05:33,110 --> 00:05:37,700
corporations to enable building

00:05:35,630 --> 00:05:40,160
inspectors to know what the condition of

00:05:37,700 --> 00:05:43,910
your building is so they can save money

00:05:40,160 --> 00:05:46,190
save time and just be aware of your

00:05:43,910 --> 00:05:46,960
state of your building so the next time

00:05:46,190 --> 00:05:50,050
you step out

00:05:46,960 --> 00:05:54,669
door the balcony doesn't fall off stuff

00:05:50,050 --> 00:05:59,590
like that and so I know and floor asked

00:05:54,669 --> 00:06:06,060
me to talk about de Bie I said Oh chintz

00:05:59,590 --> 00:06:09,250
but then the underlying sort of idea is

00:06:06,060 --> 00:06:12,880
well Dede is a thing that lets you think

00:06:09,250 --> 00:06:17,050
about all their architectures than just

00:06:12,880 --> 00:06:18,940
having an MVC building a crowd app gives

00:06:17,050 --> 00:06:22,000
you more structure and figuring out and

00:06:18,940 --> 00:06:27,599
doing your domain analysis and also it

00:06:22,000 --> 00:06:27,599
leads to interesting architectures so

00:06:27,900 --> 00:06:37,990
who here okay whoever started a project

00:06:33,910 --> 00:06:40,030
from scratch a new project almost all of

00:06:37,990 --> 00:06:42,340
you so the next question was gonna be

00:06:40,030 --> 00:06:45,009
who here ever built a feature from

00:06:42,340 --> 00:06:48,520
scratch like a new feature probably

00:06:45,009 --> 00:06:51,250
everyone then right oh yeah no only

00:06:48,520 --> 00:06:55,419
maintaining third stuff right so who

00:06:51,250 --> 00:06:58,120
here knows what domain analysis is sort

00:06:55,419 --> 00:07:03,970
of no one okay so that's super

00:06:58,120 --> 00:07:05,710
interesting okay so I would I assumed

00:07:03,970 --> 00:07:08,620
actually that everyone knew what domain

00:07:05,710 --> 00:07:10,419
analysis was and maybe this because I

00:07:08,620 --> 00:07:14,320
went to university and teaching there

00:07:10,419 --> 00:07:17,680
but don't actually first thing you do

00:07:14,320 --> 00:07:21,310
when someone asks you or you decide to

00:07:17,680 --> 00:07:23,949
make a new project domain analysis is

00:07:21,310 --> 00:07:27,220
just maybe a fancy way of saying I'm

00:07:23,949 --> 00:07:29,949
gonna think about my problem right I'm

00:07:27,220 --> 00:07:32,770
gonna think about the domain will domain

00:07:29,949 --> 00:07:35,320
means everything that happens around the

00:07:32,770 --> 00:07:39,570
problem you're going to solve so if

00:07:35,320 --> 00:07:42,699
you're building I don't know booking.com

00:07:39,570 --> 00:07:46,810
then in your domain you've got hotels

00:07:42,699 --> 00:07:48,880
you've got visitors you've got dates

00:07:46,810 --> 00:07:51,400
you've got like all these words that

00:07:48,880 --> 00:07:53,680
have to do with hotels the word booking

00:07:51,400 --> 00:07:56,139
right it's also part of the domain so

00:07:53,680 --> 00:07:58,719
first step when solving a problem is

00:07:56,139 --> 00:08:00,139
doing a domain analysis what's going on

00:07:58,719 --> 00:08:02,719
right and then

00:08:00,139 --> 00:08:07,099
the domain analysis you might decide on

00:08:02,719 --> 00:08:08,240
a certain like maybe a database design

00:08:07,099 --> 00:08:11,919
right

00:08:08,240 --> 00:08:14,569
maybe interaction decide how our users

00:08:11,919 --> 00:08:15,560
interact with my the thing that I'm

00:08:14,569 --> 00:08:18,529
building that's going to solve the

00:08:15,560 --> 00:08:22,370
problem all of these things come into

00:08:18,529 --> 00:08:26,319
play during domain analysis and DDD

00:08:22,370 --> 00:08:29,900
basically is a bunch of words and

00:08:26,319 --> 00:08:33,800
methodology to structure domain analysis

00:08:29,900 --> 00:08:36,709
and to arrive at certain architectures

00:08:33,800 --> 00:08:40,339
that fits your problem domain very well

00:08:36,709 --> 00:08:43,940
and then I have to say I've never

00:08:40,339 --> 00:08:46,130
actually practiced DVD right so I was

00:08:43,940 --> 00:08:47,839
asked to do this and I've never really

00:08:46,130 --> 00:08:51,040
done it so I have to disappoint you that

00:08:47,839 --> 00:08:53,540
I'm probably not the best teacher in DDD

00:08:51,040 --> 00:08:55,550
maybe you've got to talk to the Zilpha

00:08:53,540 --> 00:08:58,880
line guys who actually practice DB as

00:08:55,550 --> 00:08:59,839
part of their consultancy model or as if

00:08:58,880 --> 00:09:02,720
they're at least their their business

00:08:59,839 --> 00:09:06,290
model making good solutions for their

00:09:02,720 --> 00:09:07,910
clients but what I want to take from it

00:09:06,290 --> 00:09:10,490
is someone who's done a lot of domain

00:09:07,910 --> 00:09:13,220
analysis reading about DDD figure out

00:09:10,490 --> 00:09:17,480
what's nice about it what interesting

00:09:13,220 --> 00:09:21,110
concepts awry arise from DDD so these

00:09:17,480 --> 00:09:23,750
words they're like the key components of

00:09:21,110 --> 00:09:27,529
DDD they're the contexts like what's

00:09:23,750 --> 00:09:31,040
going on and domain as like that's the

00:09:27,529 --> 00:09:33,670
concrete thing but most interesting

00:09:31,040 --> 00:09:38,230
thing to me is to ubiquitous language

00:09:33,670 --> 00:09:41,870
right so this is a problem all

00:09:38,230 --> 00:09:44,449
developers come into contact with you

00:09:41,870 --> 00:09:46,880
have a class called player in your game

00:09:44,449 --> 00:09:49,790
and then you have to model that the

00:09:46,880 --> 00:09:52,640
front-end back-end maybe you have to

00:09:49,790 --> 00:09:57,320
model that in the business logic there's

00:09:52,640 --> 00:09:58,940
all these sort of places where were some

00:09:57,320 --> 00:10:03,290
word might mean a slightly different

00:09:58,940 --> 00:10:07,130
thing and part of your domain analysis

00:10:03,290 --> 00:10:09,079
can be to this device to be in DVD to

00:10:07,130 --> 00:10:11,930
have a ubiquitous language that says

00:10:09,079 --> 00:10:13,040
these words means certain things maybe

00:10:11,930 --> 00:10:16,759
these

00:10:13,040 --> 00:10:20,600
in certain things in certain contexts or

00:10:16,759 --> 00:10:23,060
shorter and so you can set boundaries to

00:10:20,600 --> 00:10:25,490
say well when we're talking about the

00:10:23,060 --> 00:10:27,620
back end we're talking about flair this

00:10:25,490 --> 00:10:29,870
is what we mean this is the the context

00:10:27,620 --> 00:10:31,910
where is this language is viable and

00:10:29,870 --> 00:10:33,949
this allows teams to communicate with

00:10:31,910 --> 00:10:39,440
each other or working on a larger

00:10:33,949 --> 00:10:41,720
project so the boundary context does

00:10:39,440 --> 00:10:44,720
super interesting part is that when you

00:10:41,720 --> 00:10:47,990
have the player class what does it mean

00:10:44,720 --> 00:10:50,660
in front end what does it mean somewhere

00:10:47,990 --> 00:10:54,139
else but also it allows you to just not

00:10:50,660 --> 00:10:57,259
worry about naming conflicts because

00:10:54,139 --> 00:10:59,420
your contacts are bounded everything

00:10:57,259 --> 00:11:01,610
that you say within a certain aspect of

00:10:59,420 --> 00:11:04,940
your program it doesn't influence other

00:11:01,610 --> 00:11:08,060
parts and I'm going to get to a more

00:11:04,940 --> 00:11:11,480
sort of concrete way of showing this but

00:11:08,060 --> 00:11:14,269
for now I hope this comes a little cross

00:11:11,480 --> 00:11:16,940
that you can think about the language

00:11:14,269 --> 00:11:20,870
you use to describe the problem and your

00:11:16,940 --> 00:11:22,399
app and how that can influence your

00:11:20,870 --> 00:11:24,319
architecture but also influence the

00:11:22,399 --> 00:11:26,899
communication between software teams and

00:11:24,319 --> 00:11:30,860
make it easier to come to a cool

00:11:26,899 --> 00:11:35,600
architecture right so and then in DDD

00:11:30,860 --> 00:11:37,399
there's all these sort of standard

00:11:35,600 --> 00:11:41,480
concepts that arise from making a new

00:11:37,399 --> 00:11:43,940
architecture and many of these might be

00:11:41,480 --> 00:11:46,310
familiar to you actually if you just you

00:11:43,940 --> 00:11:49,790
never heard of DDD as I did before I

00:11:46,310 --> 00:11:51,500
prepared for this talk well I heard

00:11:49,790 --> 00:11:55,250
about it but I never applied it right

00:11:51,500 --> 00:11:58,850
then you still have heard of most of

00:11:55,250 --> 00:12:01,910
these things right yeah empty entity is

00:11:58,850 --> 00:12:05,000
like a single thing in your app that

00:12:01,910 --> 00:12:06,589
interacts with other things right value

00:12:05,000 --> 00:12:09,319
objects just hold a little bit of data

00:12:06,589 --> 00:12:11,779
and you've got aggregates domain events

00:12:09,319 --> 00:12:15,040
just things happening services

00:12:11,779 --> 00:12:17,420
repositories is where you put your data

00:12:15,040 --> 00:12:19,759
affect reach to make new objects these

00:12:17,420 --> 00:12:22,279
are sort of general things they happen

00:12:19,759 --> 00:12:24,079
in all software they don't specifically

00:12:22,279 --> 00:12:26,750
have to do anything with DDD

00:12:24,079 --> 00:12:29,449
but in DDD they're getting

00:12:26,750 --> 00:12:31,670
nice definitions and there there's there

00:12:29,449 --> 00:12:37,329
like integrated info coming to an

00:12:31,670 --> 00:12:39,410
architecture so one thing that's very

00:12:37,329 --> 00:12:42,709
closely related

00:12:39,410 --> 00:12:49,519
well sort of almost evokes if you think

00:12:42,709 --> 00:12:53,120
about unity is CQRS so CTRs is actually

00:12:49,519 --> 00:12:56,480
a very simple thing is it's talked about

00:12:53,120 --> 00:12:59,899
a lot and it's also it's a simple

00:12:56,480 --> 00:13:01,550
concept but it has very heavy

00:12:59,899 --> 00:13:04,550
consequences for the architecture of

00:13:01,550 --> 00:13:08,509
your app so the idea

00:13:04,550 --> 00:13:11,629
one thing that arises from DVD a lot is

00:13:08,509 --> 00:13:15,680
this idea that you think about events

00:13:11,629 --> 00:13:18,230
happening in your app and dance being

00:13:15,680 --> 00:13:21,259
triggered by things in your app and a

00:13:18,230 --> 00:13:23,389
nice way of dealing with a sort of thing

00:13:21,259 --> 00:13:27,050
with that with the problem of having

00:13:23,389 --> 00:13:32,199
events is by playing Sakura so well the

00:13:27,050 --> 00:13:32,199
CTRs it stands for commands wearing

00:13:33,639 --> 00:13:38,660
responsibility separation yeah so you

00:13:37,100 --> 00:13:41,259
have your commands and you have your

00:13:38,660 --> 00:13:43,490
queries and they have different

00:13:41,259 --> 00:13:44,990
responsibilities so they should be

00:13:43,490 --> 00:13:47,360
separated right there should be a

00:13:44,990 --> 00:13:49,870
separate thing that accepts commands and

00:13:47,360 --> 00:13:52,910
there should be a separate thing that

00:13:49,870 --> 00:13:54,680
gives to user data or it just interacts

00:13:52,910 --> 00:13:56,420
with finding things and if you have

00:13:54,680 --> 00:14:00,050
these things separated then you can do

00:13:56,420 --> 00:14:02,630
very nice things like maybe you have

00:14:00,050 --> 00:14:06,139
something that is very good at writing

00:14:02,630 --> 00:14:08,319
data accepting new beta right you can

00:14:06,139 --> 00:14:12,199
make a database that's specifically

00:14:08,319 --> 00:14:15,529
designed for accepting new things and

00:14:12,199 --> 00:14:18,889
accepting new things might last we

00:14:15,529 --> 00:14:21,889
consider frequently then just telling

00:14:18,889 --> 00:14:24,490
people showing people data nice we can

00:14:21,889 --> 00:14:27,769
have like you can accept commands and

00:14:24,490 --> 00:14:31,160
yeah but they based specialize for that

00:14:27,769 --> 00:14:33,529
maybe you have ten so for maybe you had

00:14:31,160 --> 00:14:37,970
a post card a base write that accepts

00:14:33,529 --> 00:14:40,850
rights and Postgres is notorious for not

00:14:37,970 --> 00:14:42,710
scaling or something right

00:14:40,850 --> 00:14:44,420
you can make its goers not to leave with

00:14:42,710 --> 00:14:46,550
it's a little bit difficult but what if

00:14:44,420 --> 00:14:48,650
you have one post postmaster and all it

00:14:46,550 --> 00:14:53,360
does is accept rights and then you have

00:14:48,650 --> 00:14:56,480
bunch of posts best note that just serve

00:14:53,360 --> 00:14:58,340
reads right so you can separate these

00:14:56,480 --> 00:15:01,580
two things and then you have one surface

00:14:58,340 --> 00:15:04,880
surface that just rights to one master

00:15:01,580 --> 00:15:08,240
note for secure for your data may have

00:15:04,880 --> 00:15:11,650
multiple post resistances to just serve

00:15:08,240 --> 00:15:13,730
the data that has been written by the

00:15:11,650 --> 00:15:16,640
command in that section and you have

00:15:13,730 --> 00:15:18,650
these things separated and this yeah

00:15:16,640 --> 00:15:22,550
makes it really nice to achieve so what

00:15:18,650 --> 00:15:24,620
does that mean practice practice

00:15:22,550 --> 00:15:27,260
practicality of it is that we have a

00:15:24,620 --> 00:15:31,070
bunch of complexity right if we have one

00:15:27,260 --> 00:15:33,260
or a couple writing post test databases

00:15:31,070 --> 00:15:35,570
we have separate reading post best

00:15:33,260 --> 00:15:38,240
databases that makes your app more

00:15:35,570 --> 00:15:42,050
complex to make a standard Ruby on Rails

00:15:38,240 --> 00:15:44,870
website for your rails application then

00:15:42,050 --> 00:15:47,600
there's only one database and things go

00:15:44,870 --> 00:15:50,500
in think go out and it's all simple then

00:15:47,600 --> 00:15:53,240
you go to the scale of Twitter or to

00:15:50,500 --> 00:15:56,720
whatever sort of scale and suddenly that

00:15:53,240 --> 00:15:59,660
doesn't make sense anymore if then just

00:15:56,720 --> 00:16:01,840
upon a people writing tweets but then a

00:15:59,660 --> 00:16:03,980
couple billion people are reading tweets

00:16:01,840 --> 00:16:07,880
doesn't really make sense that they're

00:16:03,980 --> 00:16:09,380
interacting at the same point right and

00:16:07,880 --> 00:16:11,030
if you think about the former's

00:16:09,380 --> 00:16:12,410
optimization stuff like that then it

00:16:11,030 --> 00:16:15,230
doesn't really make sense anymore

00:16:12,410 --> 00:16:17,780
then you get to complexity that's more

00:16:15,230 --> 00:16:20,810
complex than a real application

00:16:17,780 --> 00:16:23,600
so this is where DDD meets CQRS

00:16:20,810 --> 00:16:25,130
because you sort of think about the

00:16:23,600 --> 00:16:29,440
problems you have in your domain and

00:16:25,130 --> 00:16:29,440
then you arrive at new sort of

00:16:29,590 --> 00:16:37,670
architectures that match that and you

00:16:32,300 --> 00:16:42,590
also throw away the conventional way of

00:16:37,670 --> 00:16:45,200
thinking about your app where where has

00:16:42,590 --> 00:16:48,770
only made Ruby on Rails applications

00:16:45,200 --> 00:16:50,510
when using Ruby so it's like Ruby on

00:16:48,770 --> 00:16:53,800
Rails projects or does the only practice

00:16:50,510 --> 00:16:53,800
before okay so

00:16:54,040 --> 00:17:03,439
only a couple who here has made command

00:16:58,430 --> 00:17:07,459
line applications using Ruby more you

00:17:03,439 --> 00:17:13,490
who here made just web services using

00:17:07,459 --> 00:17:17,270
Ruby that use no framework at all right

00:17:13,490 --> 00:17:22,459
where uses different framework than Ruby

00:17:17,270 --> 00:17:24,169
on Rails nice whereas a trip should I

00:17:22,459 --> 00:17:25,909
say how many of you raised a hand to be

00:17:24,169 --> 00:17:30,049
you sort of are you aware of this is

00:17:25,909 --> 00:17:33,909
going on yeah ok so there's like

00:17:30,049 --> 00:17:33,909
more than a half that use over okay so

00:17:35,500 --> 00:17:43,610
okay cool okay so what I'm going to do

00:17:39,679 --> 00:17:46,909
now is sort of think about other like

00:17:43,610 --> 00:17:48,230
build a little project yeah I I built a

00:17:46,909 --> 00:17:50,600
little particular the past couple days

00:17:48,230 --> 00:17:53,720
it just move moving away from Ruby on

00:17:50,600 --> 00:17:59,419
Rails and made a solution to a simple

00:17:53,720 --> 00:18:01,850
problem where applied concepts of making

00:17:59,419 --> 00:18:04,190
your app fully from domain analysis

00:18:01,850 --> 00:18:07,370
without looking at existing frameworks

00:18:04,190 --> 00:18:18,140
and just connecting the things right

00:18:07,370 --> 00:18:23,840
so first I got this what I want to do is

00:18:18,140 --> 00:18:25,640
a game where ever played the game go the

00:18:23,840 --> 00:18:26,149
board game go so you won't play that

00:18:25,640 --> 00:18:30,230
before

00:18:26,149 --> 00:18:35,720
okay a couple we're heard of the port

00:18:30,230 --> 00:18:37,850
can go yeah so it's a it's like it's a

00:18:35,720 --> 00:18:41,000
tactical strategic and tactical board

00:18:37,850 --> 00:18:45,740
game that's a little bit like a chess in

00:18:41,000 --> 00:18:48,350
Europe it is in East Asia they usually

00:18:45,740 --> 00:18:52,490
play this game in China and Japan it's a

00:18:48,350 --> 00:18:54,919
really popular game and the nice thing

00:18:52,490 --> 00:18:56,840
about go is that it only has one sort of

00:18:54,919 --> 00:18:59,270
piece you put on a board but it has a

00:18:56,840 --> 00:19:05,620
bunch of rules that are quite simple but

00:18:59,270 --> 00:19:05,620
they are very fast implications so

00:19:05,690 --> 00:19:11,629
if I would build a Ruby on Rails

00:19:07,159 --> 00:19:14,539
application how would I store my my or

00:19:11,629 --> 00:19:19,009
game and how do i process these moves on

00:19:14,539 --> 00:19:20,480
it thing yes think about oh maybe we use

00:19:19,009 --> 00:19:23,240
active record and will put the full

00:19:20,480 --> 00:19:25,129
board state in the database and that's

00:19:23,240 --> 00:19:28,940
sort of the wrong way if you think in a

00:19:25,129 --> 00:19:32,059
DDD wait that's the wrong sort of way of

00:19:28,940 --> 00:19:35,000
approaching problem the the way we would

00:19:32,059 --> 00:19:37,250
approach it we do work only from domain

00:19:35,000 --> 00:19:39,559
analysis we just think well what's the

00:19:37,250 --> 00:19:43,639
business logic right what's our domain

00:19:39,559 --> 00:19:45,799
how do we solve our problems and how

00:19:43,639 --> 00:19:47,779
then do we achieve all of the things

00:19:45,799 --> 00:19:49,399
that we want to achieve without like

00:19:47,779 --> 00:19:55,039
starting at the real Ruby on Rails

00:19:49,399 --> 00:19:57,529
application it's okay so one thing is is

00:19:55,039 --> 00:19:59,960
that all of the rules of go and all

00:19:57,529 --> 00:20:04,340
think they're they're like a pure piece

00:19:59,960 --> 00:20:06,590
of bounded context right they you can

00:20:04,340 --> 00:20:08,990
talk about go and never talk about web

00:20:06,590 --> 00:20:12,350
applications can never talk about

00:20:08,990 --> 00:20:14,870
whether this is a game you play as a 3d

00:20:12,350 --> 00:20:19,850
game on your desktop or on your mobile

00:20:14,870 --> 00:20:22,580
phone say well someone is using SSH to

00:20:19,850 --> 00:20:25,519
go into a server and play on go over

00:20:22,580 --> 00:20:26,929
there and do it with mantle interface or

00:20:25,519 --> 00:20:29,179
you can do it on a website it would

00:20:26,929 --> 00:20:32,389
fully pure JavaScript you do it wherever

00:20:29,179 --> 00:20:38,779
but all of those cases the business

00:20:32,389 --> 00:20:41,809
logic stays the same so in theory a gem

00:20:38,779 --> 00:20:44,690
could exist that implements the full

00:20:41,809 --> 00:20:47,379
game of Ruby right you could make all of

00:20:44,690 --> 00:20:49,700
the business logic one gem and then just

00:20:47,379 --> 00:20:52,340
solve all the other problems in other

00:20:49,700 --> 00:20:54,259
aspects so that's actually what I found

00:20:52,340 --> 00:20:56,690
is that I'm just going to build a little

00:20:54,259 --> 00:21:00,200
app and it's going to use WebSockets is

00:20:56,690 --> 00:21:03,769
gonna use message passing and it's a

00:21:00,200 --> 00:21:06,980
little bit like a secure s's it's close

00:21:03,769 --> 00:21:09,470
to being just fully secure s app that

00:21:06,980 --> 00:21:18,049
implements playing go online with

00:21:09,470 --> 00:21:21,340
someone else life so sit over here

00:21:18,049 --> 00:21:21,340
excuse me because we are

00:21:31,630 --> 00:21:54,680
so let's see look at first so our first

00:21:43,730 --> 00:22:04,580
concern should I thought you know sister

00:21:54,680 --> 00:22:06,410
someone who cannot read this okay so we

00:22:04,580 --> 00:22:08,030
want to build a little goal application

00:22:06,410 --> 00:22:11,330
and we're gonna play this game of gold

00:22:08,030 --> 00:22:13,970
right and a first concern is that users

00:22:11,330 --> 00:22:19,220
want to make moves right they're gonna

00:22:13,970 --> 00:22:22,790
send those moves and those moves we want

00:22:19,220 --> 00:22:25,970
to apply business logic to them and then

00:22:22,790 --> 00:22:28,250
maybe send it on send the result of

00:22:25,970 --> 00:22:32,060
processing that business logic somewhere

00:22:28,250 --> 00:22:34,910
else so we can start by making a module

00:22:32,060 --> 00:22:37,460
Ruby Go Go game server and I'll put in

00:22:34,910 --> 00:22:39,920
the module command Handler and it matter

00:22:37,460 --> 00:22:41,720
at the room and it's gonna take care of

00:22:39,920 --> 00:22:44,450
this process just the process of

00:22:41,720 --> 00:22:46,310
accepting commands executing executing

00:22:44,450 --> 00:22:50,090
some business logic and then passing on

00:22:46,310 --> 00:22:52,010
the data to somewhere else so it should

00:22:50,090 --> 00:22:54,350
be so there's these three things we're

00:22:52,010 --> 00:22:56,390
doing so there should be three lines one

00:22:54,350 --> 00:22:57,650
line war but we've done it from three

00:22:56,390 --> 00:23:04,460
lines

00:22:57,650 --> 00:23:07,040
we're gonna accept these moves over just

00:23:04,460 --> 00:23:08,720
to regular web requests right it could

00:23:07,040 --> 00:23:11,060
be anything I could replace this line

00:23:08,720 --> 00:23:13,940
with any line with them accepting them

00:23:11,060 --> 00:23:16,400
as HTTP requests right and then what do

00:23:13,940 --> 00:23:20,600
we do with those HTTP requests we pass

00:23:16,400 --> 00:23:25,750
them on to a game controller something

00:23:20,600 --> 00:23:28,010
that patrols business logic okay and

00:23:25,750 --> 00:23:30,230
what does the game controller do when

00:23:28,010 --> 00:23:32,180
it's done rather processing its business

00:23:30,230 --> 00:23:33,650
logic well it's going to pass

00:23:32,180 --> 00:23:35,540
they got off somewhere else so that's

00:23:33,650 --> 00:23:38,420
the broadcast come right so we have an

00:23:35,540 --> 00:23:42,830
HTTP listener that has a controller that

00:23:38,420 --> 00:23:44,570
is going to send things and we have a

00:23:42,830 --> 00:23:46,550
game controller that's got a proxy

00:23:44,570 --> 00:23:48,500
business logic send it off to a pastor

00:23:46,550 --> 00:23:53,540
and then the broadcaster is going to

00:23:48,500 --> 00:23:56,330
save the data somewhere right and from

00:23:53,540 --> 00:23:59,090
this architecture we can we've not said

00:23:56,330 --> 00:24:02,750
anything about how the go

00:23:59,090 --> 00:24:12,560
game goes right and if you look at the

00:24:02,750 --> 00:24:15,800
HTTP listener it's just in a class that

00:24:12,560 --> 00:24:18,710
has a run method and in a run method we

00:24:15,800 --> 00:24:21,620
start a new thread and we start a web

00:24:18,710 --> 00:24:24,170
server in the thread and that's what

00:24:21,620 --> 00:24:25,640
server is gonna handle something all

00:24:24,170 --> 00:24:28,610
right and these are the things that can

00:24:25,640 --> 00:24:31,610
handle it handles a get request it's a

00:24:28,610 --> 00:24:34,370
high self-documenting API right because

00:24:31,610 --> 00:24:37,820
it says hi those moves to game anymore

00:24:34,370 --> 00:24:42,950
with brad 6y and color so this is how we

00:24:37,820 --> 00:24:46,190
can make a move on our cohort and this

00:24:42,950 --> 00:24:49,130
is the post question can make right you

00:24:46,190 --> 00:24:51,110
get the X and the y this is the location

00:24:49,130 --> 00:24:56,840
where you put your piece on the board

00:24:51,110 --> 00:25:00,950
and then we say well the color black for

00:24:56,840 --> 00:25:04,700
your white in this game so we get color

00:25:00,950 --> 00:25:06,800
and then maybe game ID then we send it

00:25:04,700 --> 00:25:15,980
on to the controller to handle this

00:25:06,800 --> 00:25:19,970
command the game so then we can move on

00:25:15,980 --> 00:25:21,410
to the game broadcaster this is the

00:25:19,970 --> 00:25:25,040
other side it also knows very little

00:25:21,410 --> 00:25:28,420
about the game itself and it is just

00:25:25,040 --> 00:25:31,520
connected to a kafka message queue and

00:25:28,420 --> 00:25:34,580
whenever it perceives the method sent

00:25:31,520 --> 00:25:38,390
message with the topic and a message it

00:25:34,580 --> 00:25:40,550
just puts it on the cat review and then

00:25:38,390 --> 00:25:42,980
finally the game controller this is

00:25:40,550 --> 00:25:45,570
where all our business logic would be

00:25:42,980 --> 00:25:47,639
maybe if we take an idea

00:25:45,570 --> 00:25:49,470
jab and making a Ruby on Rails

00:25:47,639 --> 00:25:51,899
application right just put your business

00:25:49,470 --> 00:25:56,220
logic either in the model or in the

00:25:51,899 --> 00:25:58,799
controller and ideally your controller

00:25:56,220 --> 00:26:01,109
is as small as possible in a rails

00:25:58,799 --> 00:26:04,350
application well here's the same sort of

00:26:01,109 --> 00:26:08,100
thing we the only code we put in here is

00:26:04,350 --> 00:26:10,830
connecting the the three systems that we

00:26:08,100 --> 00:26:13,379
have listening for an HTTP request and

00:26:10,830 --> 00:26:16,889
then doing some business logic and then

00:26:13,379 --> 00:26:24,119
sending it on and so I found this

00:26:16,889 --> 00:26:26,039
channel and it is command line go okay

00:26:24,119 --> 00:26:28,409
so you just started on your terminal and

00:26:26,039 --> 00:26:30,149
can play go against yourself just put

00:26:28,409 --> 00:26:33,330
moves and see what happens so maybe load

00:26:30,149 --> 00:26:35,309
a go get someone else played in and see

00:26:33,330 --> 00:26:37,169
what's going on and I did no

00:26:35,309 --> 00:26:39,330
modifications of this gem at all I just

00:26:37,169 --> 00:26:41,700
found it on the Internet time to require

00:26:39,330 --> 00:26:45,049
go and now I'm going to use it as the

00:26:41,700 --> 00:26:51,419
engine the business logic to my game

00:26:45,049 --> 00:26:56,009
right so I initialize it I say my safety

00:26:51,419 --> 00:26:58,229
broadcaster I have my game make a new

00:26:56,009 --> 00:27:01,769
movie bill game and doing at board size

00:26:58,229 --> 00:27:03,299
9 which is for for people who don't want

00:27:01,769 --> 00:27:07,729
to play very novel games normally you

00:27:03,299 --> 00:27:11,220
played 21 which is a super large board

00:27:07,729 --> 00:27:13,950
and then this is when we're initializing

00:27:11,220 --> 00:27:15,779
we're sending the first message that we

00:27:13,950 --> 00:27:23,629
have a new state and at this new game

00:27:15,779 --> 00:27:27,389
state and this controller it's gonna get

00:27:23,629 --> 00:27:29,609
commands from the XP listener right

00:27:27,389 --> 00:27:35,190
little web server that's listening for

00:27:29,609 --> 00:27:37,109
incoming moves it's gonna look at man

00:27:35,190 --> 00:27:39,690
type and the attributes and when it's

00:27:37,109 --> 00:27:44,309
move it's gonna handle a move command

00:27:39,690 --> 00:27:47,070
and handling a move command means

00:27:44,309 --> 00:27:49,349
looking at the color if it's wider is

00:27:47,070 --> 00:27:53,940
nice and else it's black and then it

00:27:49,349 --> 00:27:57,299
will send that move on to the game

00:27:53,940 --> 00:27:58,040
object which is just this gem that I

00:27:57,299 --> 00:28:00,020
included

00:27:58,040 --> 00:28:02,540
change nothing about I just checked if

00:28:00,020 --> 00:28:06,140
the test suite Brad and it ran so it

00:28:02,540 --> 00:28:11,420
works and I just said well we're gonna

00:28:06,140 --> 00:28:14,440
make move in this little gem and when

00:28:11,420 --> 00:28:17,450
that's done when the game with the game

00:28:14,440 --> 00:28:24,650
game jam has processed this I'm just

00:28:17,450 --> 00:28:27,580
gonna send a message that well I'm going

00:28:24,650 --> 00:28:30,290
to step two messages actually one is

00:28:27,580 --> 00:28:32,450
that if this was successful which

00:28:30,290 --> 00:28:35,270
sending this move has been made to the

00:28:32,450 --> 00:28:37,340
moves channel it is not really relevant

00:28:35,270 --> 00:28:41,870
but this one is more our elephants it

00:28:37,340 --> 00:28:44,750
says when the game has a new state we're

00:28:41,870 --> 00:28:46,730
going to send an update to wherever

00:28:44,750 --> 00:28:49,840
doesn't meter out matter what's whatever

00:28:46,730 --> 00:28:53,360
it's going to listen to new game states

00:28:49,840 --> 00:28:55,880
new state of the board so if our player

00:28:53,360 --> 00:28:57,950
makes a move that it's valid and it's

00:28:55,880 --> 00:29:01,370
going to make a new stone on the board

00:28:57,950 --> 00:29:03,290
then this state will be updated with and

00:29:01,370 --> 00:29:05,180
all other people that are playing this

00:29:03,290 --> 00:29:07,940
game we're looking at this game will get

00:29:05,180 --> 00:29:09,830
the message we have a new board game and

00:29:07,940 --> 00:29:12,410
this is what it looks like right and

00:29:09,830 --> 00:29:15,820
people are listening to this stream will

00:29:12,410 --> 00:29:21,410
just say this user has made a move no

00:29:15,820 --> 00:29:24,190
look at that okay they are made and

00:29:21,410 --> 00:29:27,350
that's it

00:29:24,190 --> 00:29:29,210
this is just a format thing of what a

00:29:27,350 --> 00:29:31,310
state looks like so it has a board and

00:29:29,210 --> 00:29:33,890
that's captures black and white which

00:29:31,310 --> 00:29:37,790
which or pieces have been captures a

00:29:33,890 --> 00:29:40,880
little bit I think so this is what the

00:29:37,790 --> 00:29:43,400
game looks like so this is the game

00:29:40,880 --> 00:29:45,890
controller it has very little code

00:29:43,400 --> 00:29:48,710
pertaining to the game business logic

00:29:45,890 --> 00:29:54,920
itself and it's all just connecting

00:29:48,710 --> 00:29:57,370
stuff so now this is already everything

00:29:54,920 --> 00:30:01,340
it's just the full back-end for a

00:29:57,370 --> 00:30:02,060
service that's like you play go games

00:30:01,340 --> 00:30:04,400
online

00:30:02,060 --> 00:30:07,010
hey this is it's just less you make

00:30:04,400 --> 00:30:09,770
moves and then the other side is the

00:30:07,010 --> 00:30:11,990
query side which is

00:30:09,770 --> 00:30:14,270
listen when I make a move I obviously

00:30:11,990 --> 00:30:17,120
want to know whether we move ma it was

00:30:14,270 --> 00:30:18,950
valid and once the other user is going

00:30:17,120 --> 00:30:19,970
to how it's going to respond right so

00:30:18,950 --> 00:30:24,890
that's me

00:30:19,970 --> 00:30:26,809
asking about the state of the game well

00:30:24,890 --> 00:30:31,340
we have the same sort of thing so we

00:30:26,809 --> 00:30:34,070
have a query Handler and it has a it's

00:30:31,340 --> 00:30:35,780
going to listen on WebSockets for

00:30:34,070 --> 00:30:38,030
incoming queries I thought what

00:30:35,780 --> 00:30:41,179
WebSocket and if someone connects it's

00:30:38,030 --> 00:30:45,740
going to update that user with the state

00:30:41,179 --> 00:30:48,530
ok and it's going and it's going to

00:30:45,740 --> 00:30:50,920
receive state of the game from the

00:30:48,530 --> 00:30:53,600
message queue right so whenever a new

00:30:50,920 --> 00:30:56,330
message comes in with a new stable game

00:30:53,600 --> 00:31:00,559
it's going to broadcast that's new state

00:30:56,330 --> 00:31:02,420
to all of the connected clients so it's

00:31:00,559 --> 00:31:04,220
just these two components that it has as

00:31:02,420 --> 00:31:06,140
a web socket listener and it has a

00:31:04,220 --> 00:31:07,610
message to the listener a message to

00:31:06,140 --> 00:31:09,740
this node is connected to the web so

00:31:07,610 --> 00:31:13,940
whenever a message comes in it has

00:31:09,740 --> 00:31:17,090
something it can send a message onto so

00:31:13,940 --> 00:31:21,670
let's look at the message queue list

00:31:17,090 --> 00:31:21,670
first because that's relevant to go oh

00:31:23,290 --> 00:31:33,620
it's just that's a real method and it

00:31:26,570 --> 00:31:36,260
just clients and just wait for messages

00:31:33,620 --> 00:31:38,270
and I'm from each message it's going to

00:31:36,260 --> 00:31:40,130
parse that message right this is a

00:31:38,270 --> 00:31:41,990
little be the logic that's irrelevant to

00:31:40,130 --> 00:31:44,900
the game go to just specific through the

00:31:41,990 --> 00:31:47,390
way we implement the service parsing

00:31:44,900 --> 00:31:49,690
JSON reading and WebSockets these are

00:31:47,390 --> 00:31:54,380
all a separate responsibility than

00:31:49,690 --> 00:31:56,960
playing the actual game right so where's

00:31:54,380 --> 00:31:59,780
the message and then we have our message

00:31:56,960 --> 00:32:01,850
handler which was passed in and then on

00:31:59,780 --> 00:32:03,470
that we call receive message like we've

00:32:01,850 --> 00:32:07,160
got a new message you can do with it as

00:32:03,470 --> 00:32:09,020
you please so that's only the

00:32:07,160 --> 00:32:15,280
boilerplate for implementing that and

00:32:09,020 --> 00:32:15,280
then the web service listener it's

00:32:16,400 --> 00:32:23,550
sort of the same it also has no business

00:32:19,230 --> 00:32:26,010
logic at all right it just gets moves

00:32:23,550 --> 00:32:27,660
and passed it on to the WebSockets

00:32:26,010 --> 00:32:30,360
listeners it's just a piece of

00:32:27,660 --> 00:32:32,280
middleware so when you call it run on

00:32:30,360 --> 00:32:34,920
this it keeps track of all the

00:32:32,280 --> 00:32:38,880
connections it starts a WebSocket

00:32:34,920 --> 00:32:43,530
connection and the web from panhandler

00:32:38,880 --> 00:32:45,840
says whenever a user a new client comes

00:32:43,530 --> 00:32:48,980
in so this is a little more complicated

00:32:45,840 --> 00:32:53,190
line it looks like this it just starts a

00:32:48,980 --> 00:32:56,910
WebSockets sir yeah and you give it a

00:32:53,190 --> 00:32:58,800
new block and the do clock gets a new

00:32:56,910 --> 00:33:02,280
connection so whenever someone connects

00:32:58,800 --> 00:33:04,230
this new block is going to run and as in

00:33:02,280 --> 00:33:06,270
context it gets a connection objects

00:33:04,230 --> 00:33:08,370
this connects project you can call right

00:33:06,270 --> 00:33:11,370
on it to send a message to that person

00:33:08,370 --> 00:33:14,100
to the plan that is playing or you can

00:33:11,370 --> 00:33:17,940
read from it to receive a message over

00:33:14,100 --> 00:33:20,780
the depth of it yeah so we just gonna

00:33:17,940 --> 00:33:23,820
store this connection in a table of

00:33:20,780 --> 00:33:26,010
chess we can use that connection later

00:33:23,820 --> 00:33:27,690
to send messages to do up for now we're

00:33:26,010 --> 00:33:30,360
just gonna save it

00:33:27,690 --> 00:33:34,890
we're gonna write the current state to

00:33:30,360 --> 00:33:36,930
that next party so whatever that

00:33:34,890 --> 00:33:38,820
whatever the state of the game currently

00:33:36,930 --> 00:33:40,620
is we send unto the first that just

00:33:38,820 --> 00:33:42,750
connected because if they just connected

00:33:40,620 --> 00:33:47,100
they don't know what phase the game in

00:33:42,750 --> 00:33:48,720
it is right and then with this client

00:33:47,100 --> 00:33:51,090
you have to call flush after out the

00:33:48,720 --> 00:33:54,600
message so the call flesh and then

00:33:51,090 --> 00:33:56,700
there's just a while loop that just

00:33:54,600 --> 00:33:58,800
reads forever on this connection so this

00:33:56,700 --> 00:34:01,010
is thread its responsibility is to just

00:33:58,800 --> 00:34:04,350
wait for echoing messages and do nothing

00:34:01,010 --> 00:34:06,570
out of reminded who made an interactive

00:34:04,350 --> 00:34:09,030
source system we might do something with

00:34:06,570 --> 00:34:11,520
the messages but for now this is just

00:34:09,030 --> 00:34:13,380
reading doing nothing yeah so if you

00:34:11,520 --> 00:34:15,419
have maybe multiple kinds of queries

00:34:13,380 --> 00:34:17,990
that you want to do now maybe you can do

00:34:15,419 --> 00:34:22,669
some more event have in here we just

00:34:17,990 --> 00:34:22,669
listen to events that's the user connect

00:34:24,070 --> 00:34:31,690
and then whenever a message comes in

00:34:29,620 --> 00:34:34,270
this method is called receive message

00:34:31,690 --> 00:34:37,000
yeah so whenever a message comes in from

00:34:34,270 --> 00:34:41,170
our message queue so this is that's been

00:34:37,000 --> 00:34:43,780
handled by the business logic then this

00:34:41,170 --> 00:34:46,990
method gets called and it's just going

00:34:43,780 --> 00:34:49,500
to you set the states to be that message

00:34:46,990 --> 00:34:51,970
right because we're getting states that

00:34:49,500 --> 00:34:55,000
every time--so makes the move we get a

00:34:51,970 --> 00:34:56,740
new state over our message queue so

00:34:55,000 --> 00:35:01,510
we're going to save that last message as

00:34:56,740 --> 00:35:03,790
a current state if kefka might might

00:35:01,510 --> 00:35:05,890
guarantee that that's the last state for

00:35:03,790 --> 00:35:07,090
us know if i figured it that way good

00:35:05,890 --> 00:35:10,240
night

00:35:07,090 --> 00:35:13,060
and then we're going to broadcast that

00:35:10,240 --> 00:35:20,650
states to all of our connected WebSocket

00:35:13,060 --> 00:35:23,440
slides and the broadcast it just is

00:35:20,650 --> 00:35:25,810
connect of each so the connections that

00:35:23,440 --> 00:35:28,300
we say for each of them were gonna write

00:35:25,810 --> 00:35:32,890
this message the message that we're

00:35:28,300 --> 00:35:37,690
broadcasting to deaf clients okay so

00:35:32,890 --> 00:35:43,540
that's all of the query editor and then

00:35:37,690 --> 00:35:47,050
we just start these two so we have a X

00:35:43,540 --> 00:35:48,040
folder here and said Ruby go game server

00:35:47,050 --> 00:35:51,460
Roku Manhunter

00:35:48,040 --> 00:35:54,700
and where do we go game server run query

00:35:51,460 --> 00:35:56,290
data with two batteries we were we could

00:35:54,700 --> 00:35:58,600
have them both in separate docker

00:35:56,290 --> 00:36:05,890
containers maybe we can scale them maybe

00:35:58,600 --> 00:36:08,410
independent from each other and no there

00:36:05,890 --> 00:36:10,620
I've already ran them here in the thermo

00:36:08,410 --> 00:36:13,620
there's an exception there but that's

00:36:10,620 --> 00:36:13,620
something

00:36:15,280 --> 00:36:20,120
so away the tiny little front and forth

00:36:18,440 --> 00:36:23,050
so there's an index of the HTML at the

00:36:20,120 --> 00:36:27,950
root of the project and here's the game

00:36:23,050 --> 00:36:32,200
we can select color like black and put

00:36:27,950 --> 00:36:35,570
it there and the Pierce so remember that

00:36:32,200 --> 00:36:41,060
sending a command to the database

00:36:35,570 --> 00:36:46,130
delivers didn't immediately respond with

00:36:41,060 --> 00:36:49,940
a result so if I send a command to their

00:36:46,130 --> 00:36:52,610
next to the HTTP listener all its gonna

00:36:49,940 --> 00:36:55,280
do is run the business logic on it and

00:36:52,610 --> 00:36:57,200
then put the new state on the message

00:36:55,280 --> 00:37:02,930
queue it's not going to send anything

00:36:57,200 --> 00:37:05,330
back to this thought that so what I'm

00:37:02,930 --> 00:37:09,320
seeing here this black box that I

00:37:05,330 --> 00:37:11,540
selected that's actually the query

00:37:09,320 --> 00:37:13,960
handler getting a new event that

00:37:11,540 --> 00:37:18,650
something has happened and there's new

00:37:13,960 --> 00:37:23,540
state so let's play a little game here

00:37:18,650 --> 00:37:26,090
say white moves here that goes here and

00:37:23,540 --> 00:37:28,360
I'm Blackmun's here and then you see

00:37:26,090 --> 00:37:30,950
that the logic make this white thing

00:37:28,360 --> 00:37:33,920
disappear and we've not worried about

00:37:30,950 --> 00:37:37,220
that at all so maybe I as a programmer

00:37:33,920 --> 00:37:39,440
thought the silence for my boss to write

00:37:37,220 --> 00:37:41,510
just the aspect of this app that

00:37:39,440 --> 00:37:43,640
connects all this together and some

00:37:41,510 --> 00:37:45,980
other program or my team got the

00:37:43,640 --> 00:37:49,160
assignments to make a fully functional

00:37:45,980 --> 00:37:50,630
goal implementation right and now we

00:37:49,160 --> 00:37:52,400
haven't even talked to each other the

00:37:50,630 --> 00:37:55,040
only thing is I read this documentation

00:37:52,400 --> 00:37:59,720
and I just wrapped my architecture

00:37:55,040 --> 00:38:03,860
around it so and we can connect to this

00:37:59,720 --> 00:38:05,450
in a different tab and you can see the

00:38:03,860 --> 00:38:08,960
state of the game here so maybe I have

00:38:05,450 --> 00:38:11,270
white here that moves there you can see

00:38:08,960 --> 00:38:16,930
on this other tab let's move us in a

00:38:11,270 --> 00:38:16,930
teammate and everything sort of works

00:38:17,380 --> 00:38:21,620
should I show the front content just to

00:38:20,120 --> 00:38:23,860
prove that nothing fishy is going on

00:38:21,620 --> 00:38:23,860
there

00:38:27,910 --> 00:38:36,470
Thanks so it's just simple rule ego game

00:38:34,580 --> 00:38:37,040
some styling to make it look super

00:38:36,470 --> 00:38:40,450
pretty

00:38:37,040 --> 00:38:43,430
all right and then this is JavaScript

00:38:40,450 --> 00:38:46,400
because query prefix so this is

00:38:43,430 --> 00:38:49,340
localhost 92 94 this is our query server

00:38:46,400 --> 00:38:52,430
it's a WebSocket location and then the

00:38:49,340 --> 00:38:55,900
command server is a regular HTTP server

00:38:52,430 --> 00:38:55,900
running all of the hostess support and

00:38:55,930 --> 00:39:01,760
there's an initialize method and the

00:38:58,610 --> 00:39:05,720
initialize function it makes new

00:39:01,760 --> 00:39:08,060
WebSocket connection to query prefix and

00:39:05,720 --> 00:39:10,730
whenever a message comes in on that

00:39:08,060 --> 00:39:16,870
we're going to update the game parsing

00:39:10,730 --> 00:39:20,480
data updating the game console logs

00:39:16,870 --> 00:39:25,280
debugging of course and then all it does

00:39:20,480 --> 00:39:27,530
right now is populating it go back and

00:39:25,280 --> 00:39:30,200
the board is just whenever I get a new

00:39:27,530 --> 00:39:32,570
board I'm gonna find you go one element

00:39:30,200 --> 00:39:36,620
and it will make a new content string

00:39:32,570 --> 00:39:43,640
and for each row in the board we add a

00:39:36,620 --> 00:39:46,700
TR and then for each column in that row

00:39:43,640 --> 00:39:58,850
we're gonna make a kitty this right here

00:39:46,700 --> 00:40:07,480
actually is you good yeah Wow okay I

00:39:58,850 --> 00:40:12,700
cannot look at the screen right and

00:40:07,480 --> 00:40:17,900
forget my smell generation anyway um

00:40:12,700 --> 00:40:22,280
words crazy browsers right and then I

00:40:17,900 --> 00:40:25,640
just set the inner HTML of my of this

00:40:22,280 --> 00:40:27,590
elements to be is new table so any type

00:40:25,640 --> 00:40:34,820
of new games that comes in I just

00:40:27,590 --> 00:40:37,630
rewrite the HTML of our cohort okay

00:40:34,820 --> 00:40:40,150
anyway so

00:40:37,630 --> 00:40:43,660
each of these cells it has an onclick

00:40:40,150 --> 00:40:47,800
and a thumb flick is select position J

00:40:43,660 --> 00:40:51,220
and I so select position is over here

00:40:47,800 --> 00:40:53,560
and it says do a fetch request to

00:40:51,220 --> 00:40:57,190
command prefix such games this game ID

00:40:53,560 --> 00:41:00,910
let's move put in the x and the y color

00:40:57,190 --> 00:41:02,620
and it's a method post and that's it

00:41:00,910 --> 00:41:06,910
that's the entire thing there's

00:41:02,620 --> 00:41:08,590
something that sets the color so we're

00:41:06,910 --> 00:41:11,140
not handling we're not handling the

00:41:08,590 --> 00:41:14,020
response of this patch right that's

00:41:11,140 --> 00:41:16,060
basically is all that makes it secure s

00:41:14,020 --> 00:41:18,210
basically because we're not we're not

00:41:16,060 --> 00:41:23,400
dealing with response to experience were

00:41:18,210 --> 00:41:26,560
just sending commands and in reading

00:41:23,400 --> 00:41:30,090
doing queries from somewhere else and

00:41:26,560 --> 00:41:32,800
this is a really simple sort of almost

00:41:30,090 --> 00:41:34,630
like a pathetic case or something

00:41:32,800 --> 00:41:36,730
because it's not really necessary clear

00:41:34,630 --> 00:41:39,490
because this is a part game in making

00:41:36,730 --> 00:41:41,140
moves of course response to each move is

00:41:39,490 --> 00:41:45,250
going to be the new states of the board

00:41:41,140 --> 00:41:47,770
right so this would work perfectly

00:41:45,250 --> 00:41:52,330
maybe instead of a go game I'm making a

00:41:47,770 --> 00:41:55,030
real-time game where the user has their

00:41:52,330 --> 00:41:56,770
mouse location of streams and then that

00:41:55,030 --> 00:41:59,260
has some effect on the server and it

00:41:56,770 --> 00:42:02,170
gets a real-time stream of how other

00:41:59,260 --> 00:42:05,200
people are reacting to that mouse cursor

00:42:02,170 --> 00:42:07,450
moving rights so these two it really

00:42:05,200 --> 00:42:20,650
separates and that can be the read

00:42:07,450 --> 00:42:24,910
receipt or s okay so that's basically my

00:42:20,650 --> 00:42:28,090
talk so I just showed my code to inspire

00:42:24,910 --> 00:42:29,620
you to maybe think about architecture

00:42:28,090 --> 00:42:32,890
and think about how you can build

00:42:29,620 --> 00:42:35,800
something without using rails maybe

00:42:32,890 --> 00:42:39,580
apply this sort of thing like a message

00:42:35,800 --> 00:42:41,830
queue or stream separating your

00:42:39,580 --> 00:42:44,920
architecture into a command section and

00:42:41,830 --> 00:42:46,690
a quarter section maybe inspire you to

00:42:44,920 --> 00:42:49,480
think about domain analysis a little bit

00:42:46,690 --> 00:42:51,549
and maybe we book about TDD

00:42:49,480 --> 00:42:54,970
worked up to the silver lining guy guys

00:42:51,549 --> 00:42:57,160
on how you actually make a full full arm

00:42:54,970 --> 00:42:59,410
where you're dealing with customers that

00:42:57,160 --> 00:43:04,420
have new sort of ideas and new promise

00:42:59,410 --> 00:43:08,559
to solve using DDD yeah that's sort of

00:43:04,420 --> 00:43:11,770
it I already talked a little bit about

00:43:08,559 --> 00:43:14,440
company a working for Mouse eros can we

00:43:11,770 --> 00:43:17,140
fire on the drones take bunch of

00:43:14,440 --> 00:43:18,819
pictures of a building like two thousand

00:43:17,140 --> 00:43:21,819
pictures fly around within sixty

00:43:18,819 --> 00:43:24,460
thousand year old roan and $160,000

00:43:21,819 --> 00:43:27,640
ground is a forty thousand euro camera

00:43:24,460 --> 00:43:30,640
yeah it takes 100 megapixel camera so

00:43:27,640 --> 00:43:33,790
this camera it normally hangs on this

00:43:30,640 --> 00:43:35,710
both side of a play that splice maybe a

00:43:33,790 --> 00:43:38,140
couple kilometers in the sky to make

00:43:35,710 --> 00:43:40,720
pictures of terrain right but we take it

00:43:38,140 --> 00:43:43,059
dumb and we're hanging on this drone and

00:43:40,720 --> 00:43:46,630
just splice ten meters from a building

00:43:43,059 --> 00:43:49,630
so we get these crazy large pictures of

00:43:46,630 --> 00:43:50,980
these buildings and then take two

00:43:49,630 --> 00:43:53,890
thousand of those and they were about

00:43:50,980 --> 00:43:57,390
100 megabytes per piece and a per

00:43:53,890 --> 00:44:00,099
picture and we turn that into a a

00:43:57,390 --> 00:44:02,619
photogrammetric model which means a 3d

00:44:00,099 --> 00:44:05,380
model based on photos alright then this

00:44:02,619 --> 00:44:07,089
is not something I wrote is a software

00:44:05,380 --> 00:44:09,280
that we bought so it's a little black

00:44:07,089 --> 00:44:11,349
box we take photos put them in this

00:44:09,280 --> 00:44:13,329
black box and then we wait a week and at

00:44:11,349 --> 00:44:18,369
the end of the week a 3d model comes out

00:44:13,329 --> 00:44:21,089
and so I built a realist application I

00:44:18,369 --> 00:44:24,780
guess a ruby application that our

00:44:21,089 --> 00:44:28,809
operational teams blow these pictures to

00:44:24,780 --> 00:44:30,880
put cloud storage over first before we

00:44:28,809 --> 00:44:32,740
do that actually we run a machine

00:44:30,880 --> 00:44:35,680
learning algorithm over the pictures to

00:44:32,740 --> 00:44:37,780
erase any people because we do this for

00:44:35,680 --> 00:44:39,760
social housing operations so there's

00:44:37,780 --> 00:44:42,430
actual real people in this picture stuff

00:44:39,760 --> 00:44:45,819
we have to guard their privacy

00:44:42,430 --> 00:44:49,049
so we erased those faces and other

00:44:45,819 --> 00:44:52,290
identifying arts also remove like

00:44:49,049 --> 00:44:55,329
license plates of course stuff like that

00:44:52,290 --> 00:44:57,220
and then within 48 hours we delete

00:44:55,329 --> 00:44:59,260
everything that's still had stuff on it

00:44:57,220 --> 00:45:01,540
it never goes to get internet but then

00:44:59,260 --> 00:45:02,760
when it's all anonymized we put it in

00:45:01,540 --> 00:45:06,600
Google Cloud storage

00:45:02,760 --> 00:45:10,200
and then it gets into this system and

00:45:06,600 --> 00:45:12,750
then we get a 3d model and then there's

00:45:10,200 --> 00:45:16,230
a real supplication and that we built

00:45:12,750 --> 00:45:20,970
that allows the user to browse through

00:45:16,230 --> 00:45:24,180
this 3d model in the browser and zoom in

00:45:20,970 --> 00:45:27,120
to an insane level so the our clients or

00:45:24,180 --> 00:45:29,670
users are actually building inspectors

00:45:27,120 --> 00:45:32,670
so there's this next on earth that they

00:45:29,670 --> 00:45:35,310
have to comply with and they say I want

00:45:32,670 --> 00:45:37,800
to be able to look at the grain in the

00:45:35,310 --> 00:45:40,620
mortar that's between the bricks if

00:45:37,800 --> 00:45:43,170
they're dose grains if they're like nice

00:45:40,620 --> 00:45:46,500
and even then the mortar is still okay

00:45:43,170 --> 00:45:48,390
but if if there's little cracks in it it

00:45:46,500 --> 00:45:50,850
means the mortar is not okay anymore and

00:45:48,390 --> 00:45:53,310
the owner of the building has to has to

00:45:50,850 --> 00:45:55,860
do this super expensive operation of

00:45:53,310 --> 00:45:57,870
removing all the mortar and then put in

00:45:55,860 --> 00:45:59,580
a new order and this tens of thousands

00:45:57,870 --> 00:46:01,650
of euros so they they want to know if

00:45:59,580 --> 00:46:04,200
they have to do it or not right and now

00:46:01,650 --> 00:46:05,010
they can use our app or the inspector

00:46:04,200 --> 00:46:07,470
can just stay at home

00:46:05,010 --> 00:46:09,420
we have inspector that word Sadako and

00:46:07,470 --> 00:46:11,340
the years working on a project that's in

00:46:09,420 --> 00:46:12,390
Rotterdam right it doesn't have to go

00:46:11,340 --> 00:46:14,370
all the way to wrote it down with your

00:46:12,390 --> 00:46:16,140
sent on his desk and looking at the

00:46:14,370 --> 00:46:18,000
mortar between the bricks and if it's

00:46:16,140 --> 00:46:20,750
all right you can say don't spend on the

00:46:18,000 --> 00:46:27,120
dog girls redoing this apartment complex

00:46:20,750 --> 00:46:29,610
and everyone's happy sort of yeah so we

00:46:27,120 --> 00:46:31,560
do anonymizing we do a processing of the

00:46:29,610 --> 00:46:34,050
data we have this digital inspection

00:46:31,560 --> 00:46:37,020
process that's all built in UJS and in

00:46:34,050 --> 00:46:40,160
caesium KS which is a 3d engine that's

00:46:37,020 --> 00:46:43,260
really suited to this geospatial systems

00:46:40,160 --> 00:46:44,940
and we have we don't have interactive

00:46:43,260 --> 00:46:46,440
deep learning yet but we have machine

00:46:44,940 --> 00:46:48,780
learning on your numbers i information

00:46:46,440 --> 00:46:54,090
organization and we're actually training

00:46:48,780 --> 00:46:56,310
a a AI system or machine learning system

00:46:54,090 --> 00:46:58,740
to automatically detect whether the

00:46:56,310 --> 00:47:00,240
mortar between the bricks is okay but of

00:46:58,740 --> 00:47:02,390
course we need input for that so right

00:47:00,240 --> 00:47:04,740
now there's people just clicking around

00:47:02,390 --> 00:47:07,440
making annotations but we hope that

00:47:04,740 --> 00:47:09,120
future we take all these annotations

00:47:07,440 --> 00:47:13,950
training in AI and have hopefully it

00:47:09,120 --> 00:47:16,230
does for us so this error scan if you

00:47:13,950 --> 00:47:19,000
want to work for a local community like

00:47:16,230 --> 00:47:49,090
don't work for me I hope you enjoy this

00:47:19,000 --> 00:47:54,220
time feel free to just be seated or feel

00:47:49,090 --> 00:47:55,510
free to have a break mingle and talk to

00:47:54,220 --> 00:47:58,230
some people that you've never talked to

00:47:55,510 --> 00:48:03,400
because the next talk will start at

00:47:58,230 --> 00:48:05,080
eight ish I would say yes I would say

00:48:03,400 --> 00:48:06,580
ten minutes past 8:00 also for the

00:48:05,080 --> 00:48:10,300
viewers at home ten minutes past 8:00 so

00:48:06,580 --> 00:48:12,900
we have 15 minutes to get a beer your 15

00:48:10,300 --> 00:48:12,900
minutes you get a beer

00:48:20,140 --> 00:48:24,440
there we go again

00:48:21,950 --> 00:48:28,700
yes there we go again nice to see all

00:48:24,440 --> 00:48:30,290
y'all here again just by counting yes I

00:48:28,700 --> 00:48:40,010
think no one left

00:48:30,290 --> 00:48:42,410
fantastic I have been standing in this

00:48:40,010 --> 00:48:45,890
position after the break I thought why

00:48:42,410 --> 00:48:48,110
is everyone gone especially if your own

00:48:45,890 --> 00:48:51,110
talk is already well performed anyway

00:48:48,110 --> 00:49:02,600
and I'd like to hear a big applause for

00:48:51,110 --> 00:49:07,010
Alejandro right so thank you very much

00:49:02,600 --> 00:49:08,480
for coming also we lured you with this

00:49:07,010 --> 00:49:10,520
dog like the name was pretty different

00:49:08,480 --> 00:49:12,590
to what you heard before it was like

00:49:10,520 --> 00:49:15,050
storage with calf cavities really not

00:49:12,590 --> 00:49:16,520
it's actually an experiment so but if we

00:49:15,050 --> 00:49:19,940
could say an experiment on what comes to

00:49:16,520 --> 00:49:21,860
say okay no actually it is how does it I

00:49:19,940 --> 00:49:23,660
know you believe that number but

00:49:21,860 --> 00:49:28,940
actually we're gonna learn is really

00:49:23,660 --> 00:49:30,530
what I'm playing with in my work time my

00:49:28,940 --> 00:49:32,930
name is my name is Alejandro I would

00:49:30,530 --> 00:49:35,900
forget how obviously being at this

00:49:32,930 --> 00:49:38,750
company for two and a half years almost

00:49:35,900 --> 00:49:41,510
but definitely just a stinking you know

00:49:38,750 --> 00:49:44,720
money that's fine but you do know the

00:49:41,510 --> 00:49:48,290
company hopefully and I worked on a team

00:49:44,720 --> 00:49:51,140
called internal interfaces and that's

00:49:48,290 --> 00:49:52,880
kind of whatever that tells me right

00:49:51,140 --> 00:49:54,320
like internal interfaces it's like

00:49:52,880 --> 00:49:56,030
everything that can be an interface that

00:49:54,320 --> 00:49:57,770
we aren't supposed to be there which is

00:49:56,030 --> 00:49:59,960
like really a lot of things and at the

00:49:57,770 --> 00:50:05,750
end we're not sure we can happy with

00:49:59,960 --> 00:50:08,720
that anyways so the motivation behind

00:50:05,750 --> 00:50:11,510
these experiment with Kefka event

00:50:08,720 --> 00:50:13,310
streaming is trying to solve a couple of

00:50:11,510 --> 00:50:14,690
problems that we have and at this point

00:50:13,310 --> 00:50:18,410
I think I'm just gonna say it because

00:50:14,690 --> 00:50:19,880
it's convenient so when I guide you

00:50:18,410 --> 00:50:22,290
through those problems so what are the

00:50:19,880 --> 00:50:24,240
problems that can get her past

00:50:22,290 --> 00:50:26,850
we have a lot of problems to solve this

00:50:24,240 --> 00:50:29,070
is some of those that my team a

00:50:26,850 --> 00:50:32,250
particularly want to say we I also mean

00:50:29,070 --> 00:50:35,820
the application architecture team which

00:50:32,250 --> 00:50:37,680
is kind of like say five six engineers

00:50:35,820 --> 00:50:40,560
from kidnap a few of them principal

00:50:37,680 --> 00:50:42,960
engineers which is like they're senior

00:50:40,560 --> 00:50:46,050
engineers the company and they kind of

00:50:42,960 --> 00:50:49,369
came together here you go

00:50:46,050 --> 00:50:51,330
sit down and okay this is a direction

00:50:49,369 --> 00:50:54,740
architectural II that we want to take it

00:50:51,330 --> 00:50:57,390
out in order to solve or powers and

00:50:54,740 --> 00:51:00,000
those three are some of the problems we

00:50:57,390 --> 00:51:01,350
want so and generally speaking I think

00:51:00,000 --> 00:51:04,440
those are the big problems that

00:51:01,350 --> 00:51:06,570
companies that scale have well at least

00:51:04,440 --> 00:51:07,650
the first one for sure like any company

00:51:06,570 --> 00:51:10,050
working on Skillman kind of the

00:51:07,650 --> 00:51:11,550
replication back problem and then we

00:51:10,050 --> 00:51:13,740
talk to you about that

00:51:11,550 --> 00:51:17,190
we also floors all these problems are

00:51:13,740 --> 00:51:19,560
also to be big to be work with in a

00:51:17,190 --> 00:51:21,300
basement structure everything and then

00:51:19,560 --> 00:51:26,369
imagine the people working with

00:51:21,300 --> 00:51:27,840
kubernetes and all that stuff so these

00:51:26,369 --> 00:51:32,820
are also these are various specific

00:51:27,840 --> 00:51:35,700
problems so to kind of implement and in

00:51:32,820 --> 00:51:37,170
that what I'm trying to say here is when

00:51:35,700 --> 00:51:40,230
you see here you don't necessarily want

00:51:37,170 --> 00:51:42,119
to have to apply it don't go to company

00:51:40,230 --> 00:51:44,970
ago and now we should like put

00:51:42,119 --> 00:51:46,380
everything in Kafka just as massive as

00:51:44,970 --> 00:51:48,210
much as you should not be doing

00:51:46,380 --> 00:51:49,800
microservices security like a Tony

00:51:48,210 --> 00:51:52,200
people company right maybe it's not

00:51:49,800 --> 00:51:55,910
missing it I mean if you want to do it

00:51:52,200 --> 00:51:59,400
after you but it's just you don't

00:51:55,910 --> 00:52:01,080
anyways so what's the first kind of kind

00:51:59,400 --> 00:52:03,540
of on it cause the fundamental problem

00:52:01,080 --> 00:52:05,160
we have in case it you know it's not a

00:52:03,540 --> 00:52:07,770
problem with services it's not a problem

00:52:05,160 --> 00:52:12,630
often monolayer genome is a Ruby on

00:52:07,770 --> 00:52:14,340
Rails normally it's a big one but our

00:52:12,630 --> 00:52:17,550
main problem is actually replication lag

00:52:14,340 --> 00:52:20,400
and replication lag means we have a

00:52:17,550 --> 00:52:22,650
really big database called my sequel one

00:52:20,400 --> 00:52:25,650
very creative name and that's the one

00:52:22,650 --> 00:52:28,609
that has all the main tables that you

00:52:25,650 --> 00:52:32,900
can imagine yeah so that would be users

00:52:28,609 --> 00:52:34,320
we posed issues who requests all the

00:52:32,900 --> 00:52:37,650
Canada on

00:52:34,320 --> 00:52:42,300
that is in a single plus it's called my

00:52:37,650 --> 00:52:44,460
sequel one and that thing has like just

00:52:42,300 --> 00:52:47,760
if you if you think about how the record

00:52:44,460 --> 00:52:50,940
works yourself like cascading operations

00:52:47,760 --> 00:52:52,590
if you have imagined K'naan itself so if

00:52:50,940 --> 00:52:54,510
you have an organization and that

00:52:52,590 --> 00:52:56,700
organization has a bunch of repos and

00:52:54,510 --> 00:52:58,110
those Reapers have a bunch of issues and

00:52:56,700 --> 00:53:01,290
those issues have a bunch of comments

00:52:58,110 --> 00:53:04,500
and so on as soon as you hit delete on

00:53:01,290 --> 00:53:06,210
an organ that cascades into a lot of

00:53:04,500 --> 00:53:10,380
operations really really quickly and

00:53:06,210 --> 00:53:12,480
that goes first and then all the

00:53:10,380 --> 00:53:13,650
replicas that are being that I catch now

00:53:12,480 --> 00:53:16,530
we know those operations they've gotta

00:53:13,650 --> 00:53:18,270
be like let's just go and get everything

00:53:16,530 --> 00:53:20,490
all those changes that are coming and

00:53:18,270 --> 00:53:23,040
then when you have is the spikes of

00:53:20,490 --> 00:53:25,530
replication black meaning that all some

00:53:23,040 --> 00:53:29,580
or all of those replicas are seconds

00:53:25,530 --> 00:53:32,970
behind the main one and what they see in

00:53:29,580 --> 00:53:35,010
like practical purposes mean is if I go

00:53:32,970 --> 00:53:37,530
and create a pull request or a meeting

00:53:35,010 --> 00:53:39,900
and there is verification lag I get a

00:53:37,530 --> 00:53:42,780
link that I can send to my colleague via

00:53:39,900 --> 00:53:44,190
slack and my colleague clicks it and he

00:53:42,780 --> 00:53:46,920
goes into a replica that he's lagging

00:53:44,190 --> 00:53:48,960
behind and he gets a full report like

00:53:46,920 --> 00:53:50,160
but the issue was created why am I

00:53:48,960 --> 00:53:52,140
getting a full report it makes no sense

00:53:50,160 --> 00:53:53,850
it is just because there's replication

00:53:52,140 --> 00:53:56,760
lag obviously this is a case that you

00:53:53,850 --> 00:53:58,920
would probably encounter we take

00:53:56,760 --> 00:54:00,420
measurements against tell me we don't

00:53:58,920 --> 00:54:03,150
want that to happen it rarely happens

00:54:00,420 --> 00:54:06,420
but it's definitely a challenge and this

00:54:03,150 --> 00:54:11,160
is especially a challenge for systems

00:54:06,420 --> 00:54:14,520
that are in that realm so you have what

00:54:11,160 --> 00:54:16,860
books and all that so when a new a new

00:54:14,520 --> 00:54:18,990
request is created a bunch of systems

00:54:16,860 --> 00:54:21,060
are notified about a new request and all

00:54:18,990 --> 00:54:22,680
of them I'm going to that link to do

00:54:21,060 --> 00:54:24,630
something that got to do with it and

00:54:22,680 --> 00:54:27,300
they are finding portal fours like oh my

00:54:24,630 --> 00:54:30,390
god but then we just tell me that these

00:54:27,300 --> 00:54:30,840
things exists and that's a big problem

00:54:30,390 --> 00:54:32,670
for us

00:54:30,840 --> 00:54:35,010
that's essentially that's kind of when

00:54:32,670 --> 00:54:36,290
when when things are scaling that's one

00:54:35,010 --> 00:54:38,070
of the main problems that you replace

00:54:36,290 --> 00:54:42,120
there are many ways to solve that

00:54:38,070 --> 00:54:44,700
problem and I will talk to you a little

00:54:42,120 --> 00:54:47,640
bit about that later the other problem

00:54:44,700 --> 00:54:50,070
that we have is that we want

00:54:47,640 --> 00:54:52,530
to tackle it silently meaning we have

00:54:50,070 --> 00:54:55,190
some big clients say for example GOP

00:54:52,530 --> 00:54:58,260
violence one of our biggest minds and if

00:54:55,190 --> 00:54:59,430
Shopify should be filed does a lot of

00:54:58,260 --> 00:55:02,100
things will get out they they're really

00:54:59,430 --> 00:55:04,770
really having it and that means when

00:55:02,100 --> 00:55:08,000
they think if they trigger heavy

00:55:04,770 --> 00:55:10,260
operations in their own gihan account

00:55:08,000 --> 00:55:11,640
that can affect a bunch of account

00:55:10,260 --> 00:55:14,760
there's a bunch of other accounts like

00:55:11,640 --> 00:55:17,400
all of you potentially so what we want

00:55:14,760 --> 00:55:20,280
to do is minimize that risk by signing

00:55:17,400 --> 00:55:22,680
people so shallowing big companies but

00:55:20,280 --> 00:55:25,680
also just clustering a bunch of

00:55:22,680 --> 00:55:27,210
companies into a set of servers and when

00:55:25,680 --> 00:55:29,700
you see here is kind of the full stack

00:55:27,210 --> 00:55:31,320
of github you would see can have it's

00:55:29,700 --> 00:55:34,650
compulsive like the the rails minoriko

00:55:31,320 --> 00:55:37,940
but also other pieces like the like the

00:55:34,650 --> 00:55:40,680
servers where the git repositories are

00:55:37,940 --> 00:55:44,040
so that's most important part of the

00:55:40,680 --> 00:55:45,810
problem that we don't want to fix and

00:55:44,040 --> 00:55:48,270
then eventually what we want to get into

00:55:45,810 --> 00:55:50,910
the future is to solve the replication

00:55:48,270 --> 00:55:53,340
problem we want to have shortened with

00:55:50,910 --> 00:55:55,050
the new Charlotte charting means taking

00:55:53,340 --> 00:55:57,210
a table that is really big that you can

00:55:55,050 --> 00:55:59,460
imagine for example full request table

00:55:57,210 --> 00:56:02,220
is gigantic at this point and we want to

00:55:59,460 --> 00:56:03,690
break it up into a bunch of hosts right

00:56:02,220 --> 00:56:05,010
now we can't do that that that thing is

00:56:03,690 --> 00:56:08,760
in a single computer of course is

00:56:05,010 --> 00:56:10,500
replicated but it's essentially said is

00:56:08,760 --> 00:56:12,480
taking in a single computer we want to

00:56:10,500 --> 00:56:14,820
be able to break that table into like a

00:56:12,480 --> 00:56:18,270
bit okay let's say will requests from 0

00:56:14,820 --> 00:56:20,220
to 100 in one or a house going to these

00:56:18,270 --> 00:56:22,650
computer the other ones go into the next

00:56:20,220 --> 00:56:25,350
one you keep chunking it in pieces that

00:56:22,650 --> 00:56:27,930
are easy to manage easier to manage but

00:56:25,350 --> 00:56:30,180
that comes with a bunch of other

00:56:27,930 --> 00:56:32,250
problems how do you find a repo among

00:56:30,180 --> 00:56:33,030
all those hosts if you don't know what

00:56:32,250 --> 00:56:35,280
it is exactly

00:56:33,030 --> 00:56:38,600
so Chardonnay is like a really good

00:56:35,280 --> 00:56:41,510
solution for in order to scale things

00:56:38,600 --> 00:56:44,040
but it's really hard to implement so

00:56:41,510 --> 00:56:45,420
ideally you want to push charging as

00:56:44,040 --> 00:56:50,970
much as you want until you have to do it

00:56:45,420 --> 00:56:52,650
you have to video for the problems so

00:56:50,970 --> 00:56:54,750
those are the problems that are that we

00:56:52,650 --> 00:56:58,890
are facing and we're doing a lot of

00:56:54,750 --> 00:57:00,200
efforts around that and logbook is the

00:56:58,890 --> 00:57:02,270
project I'm working on

00:57:00,200 --> 00:57:03,710
working on and it's an experiment it's

00:57:02,270 --> 00:57:06,500
an experiment it's something we have

00:57:03,710 --> 00:57:07,849
been trying to see where it takes us in

00:57:06,500 --> 00:57:10,310
pieces the right solution maybe thanks

00:57:07,849 --> 00:57:12,740
maybe it's not we might you might never

00:57:10,310 --> 00:57:15,200
heard of these anymore again

00:57:12,740 --> 00:57:17,630
so you know that's that's what happens

00:57:15,200 --> 00:57:21,500
just try it and see see these the right

00:57:17,630 --> 00:57:23,780
solution so first what is Capcom there

00:57:21,500 --> 00:57:27,619
is no talk about Kafka but in symptoms

00:57:23,780 --> 00:57:29,869
is just a bunch of cues so these topic

00:57:27,619 --> 00:57:32,540
things will be recused you have Doozers

00:57:29,869 --> 00:57:34,490
and those producers will throw messages

00:57:32,540 --> 00:57:36,560
with the producers put messages into

00:57:34,490 --> 00:57:38,930
those topics it can be no this partition

00:57:36,560 --> 00:57:40,609
part for now you put it there and then a

00:57:38,930 --> 00:57:42,829
consumer is getting them or a bunch of

00:57:40,609 --> 00:57:45,849
consumers consumer groups are getting

00:57:42,829 --> 00:57:50,060
those those messages and processing them

00:57:45,849 --> 00:57:55,430
you have heard of of those of kids

00:57:50,060 --> 00:57:56,750
before so this is not like the cool some

00:57:55,430 --> 00:58:00,079
of the good things about cupcake that it

00:57:56,750 --> 00:58:02,839
doesn't have a specific file format so

00:58:00,079 --> 00:58:06,020
whatever you don't have to happen that

00:58:02,839 --> 00:58:07,220
the message is being gained from it can

00:58:06,020 --> 00:58:13,130
be whatever it's just a bunch of bytes

00:58:07,220 --> 00:58:15,170
but in your case that's important but

00:58:13,130 --> 00:58:17,329
something we'll see later and then it is

00:58:15,170 --> 00:58:19,700
catch and the reason why you scales is

00:58:17,329 --> 00:58:21,740
because that term you see there for

00:58:19,700 --> 00:58:25,550
teachers and I want to talk about too

00:58:21,740 --> 00:58:28,160
much about that but essentially cannery

00:58:25,550 --> 00:58:29,900
balances so before if you have a queue

00:58:28,160 --> 00:58:32,300
the entire queue is in a single host

00:58:29,900 --> 00:58:35,930
what you can do with partitions is you

00:58:32,300 --> 00:58:37,640
can partition the queue into a bunch of

00:58:35,930 --> 00:58:39,230
hosts and those are the partitions so

00:58:37,640 --> 00:58:41,359
imagine that one of those each one of

00:58:39,230 --> 00:58:43,480
those locations is different and so

00:58:41,359 --> 00:58:47,270
that's why it's kind of easier to scale

00:58:43,480 --> 00:58:48,710
there's a lot of that heavy thing okay

00:58:47,270 --> 00:58:52,400
so what is the locking architecture the

00:58:48,710 --> 00:58:55,579
thing we have a 22 so again I've get how

00:58:52,400 --> 00:58:57,470
this domain repos of rails app the user

00:58:55,579 --> 00:58:59,690
of generating events you can imagine any

00:58:57,470 --> 00:59:01,940
event in the case in these current

00:58:59,690 --> 00:59:03,140
experiment the event we have been

00:59:01,940 --> 00:59:04,880
working on it's one of the more core

00:59:03,140 --> 00:59:09,730
ones but also kind of simple use case

00:59:04,880 --> 00:59:09,730
that is creation

00:59:12,049 --> 00:59:19,099
then that event is stored into the topic

00:59:16,369 --> 00:59:20,619
18 caca that's the first place it goes

00:59:19,099 --> 00:59:23,690
ooh

00:59:20,619 --> 00:59:26,239
then there are consumers that are going

00:59:23,690 --> 00:59:28,969
to process that thing so they're going

00:59:26,239 --> 00:59:31,519
to get it from the cube to the magic and

00:59:28,969 --> 00:59:33,849
then a story into Mexico so now what we

00:59:31,519 --> 00:59:36,380
were doing before just as any regular

00:59:33,849 --> 00:59:38,539
radio app is going through after

00:59:36,380 --> 00:59:41,029
breakfast now we are still have active

00:59:38,539 --> 00:59:44,450
record but there are the records now in

00:59:41,029 --> 00:59:46,579
an opening an independent process those

00:59:44,450 --> 00:59:50,559
consumers are independent from like the

00:59:46,579 --> 00:59:53,599
thread that is processing your request

00:59:50,559 --> 00:59:56,269
going through that part right there we

00:59:53,599 --> 00:59:59,599
usually go with active record now it's

00:59:56,269 --> 01:00:03,319
being done by these other consumers and

00:59:59,599 --> 01:00:05,779
and then it's rated to my Seco and then

01:00:03,319 --> 01:00:10,069
feel a bit that we want to say for this

01:00:05,779 --> 01:00:11,599
is we will put those messages after we

01:00:10,069 --> 01:00:12,979
have processed them then we say okay

01:00:11,599 --> 01:00:14,749
someone created an issue and it was

01:00:12,979 --> 01:00:18,529
successfully restored into our database

01:00:14,749 --> 01:00:21,680
we can put it in the topic be part topic

01:00:18,529 --> 01:00:24,529
or kapha topic and then other systems

01:00:21,680 --> 01:00:26,690
like search for example search can take

01:00:24,529 --> 01:00:28,339
that again from there instead of like go

01:00:26,690 --> 01:00:31,819
into the Mexico database get it from

01:00:28,339 --> 01:00:33,890
there and index the data or we have

01:00:31,819 --> 01:00:35,779
achieved an engine then they can also

01:00:33,890 --> 01:00:37,700
get data from there we don't have to be

01:00:35,779 --> 01:00:39,769
they don't have to be doing queries to

01:00:37,700 --> 01:00:41,269
my C code so we can we want to reduce

01:00:39,769 --> 01:00:43,460
the amount of queries we're doing to my

01:00:41,269 --> 01:00:49,849
signal that's always that's always a

01:00:43,460 --> 01:00:54,259
good thing for us to do and then there

01:00:49,849 --> 01:00:58,969
is a speed ready system that means when

01:00:54,259 --> 01:01:01,789
you create an event here we have to at

01:00:58,969 --> 01:01:05,359
this point we can have a timeout we set

01:01:01,789 --> 01:01:07,640
up a thing is be our pop on Redis so

01:01:05,359 --> 01:01:09,979
your browser will be hanging there until

01:01:07,640 --> 01:01:11,989
we get a notification back from these

01:01:09,979 --> 01:01:16,519
consumers that your issue has been saved

01:01:11,989 --> 01:01:18,979
and then we do here we do push I think

01:01:16,519 --> 01:01:20,509
it is and then that be published just

01:01:18,979 --> 01:01:22,810
waiting there until you put something on

01:01:20,509 --> 01:01:26,290
that that

01:01:22,810 --> 01:01:29,970
list of what everybody's ready and then

01:01:26,290 --> 01:01:32,140
the the request will continue processing

01:01:29,970 --> 01:01:34,600
that's that's the way we kind of handled

01:01:32,140 --> 01:01:36,310
it but that's not efficient now we will

01:01:34,600 --> 01:01:38,710
eventually what we would have to do is

01:01:36,310 --> 01:01:40,030
create a proper notification system

01:01:38,710 --> 01:01:41,950
where we're just pulling all the time

01:01:40,030 --> 01:01:44,080
and I'm okay it's my assisting process

01:01:41,950 --> 01:01:47,760
to system process and what what you will

01:01:44,080 --> 01:01:51,640
actually see is something like this that

01:01:47,760 --> 01:01:54,820
you might will change kind of to have a

01:01:51,640 --> 01:01:57,100
behavior where we're a lot more in sync

01:01:54,820 --> 01:01:58,360
so we send that pull request and you

01:01:57,100 --> 01:02:00,310
just have to wait and then this thing

01:01:58,360 --> 01:02:01,840
will give you the illusion that we're

01:02:00,310 --> 01:02:03,460
just actually processing but all you're

01:02:01,840 --> 01:02:06,340
doing we will be doing it's just waiting

01:02:03,460 --> 01:02:07,840
there but you probably won't see this in

01:02:06,340 --> 01:02:13,300
the near future but this is kind of how

01:02:07,840 --> 01:02:16,240
we're handle it in the other ways how

01:02:13,300 --> 01:02:18,010
does these architecture even helps with

01:02:16,240 --> 01:02:19,870
those problems I mentioned at the

01:02:18,010 --> 01:02:21,910
beginning like the replication lag and

01:02:19,870 --> 01:02:26,050
the silo in the charting

01:02:21,910 --> 01:02:30,340
so replication lag the way we can this

01:02:26,050 --> 01:02:31,930
can help us is by so first we have we

01:02:30,340 --> 01:02:33,910
have a we already created an app is

01:02:31,930 --> 01:02:36,870
actually is actually you can go to

01:02:33,910 --> 01:02:39,900
github to the github with organ slash

01:02:36,870 --> 01:02:43,000
frenum which is that mean there and

01:02:39,900 --> 01:02:45,640
Freneau is the thing that we all know

01:02:43,000 --> 01:02:47,470
from from it will know the replication

01:02:45,640 --> 01:02:49,240
lag from a cluster it's a goal

01:02:47,470 --> 01:02:50,860
application and then you just tell a

01:02:49,240 --> 01:02:52,240
friend tell me what's a replication like

01:02:50,860 --> 01:02:54,180
right now it will tell you across your

01:02:52,240 --> 01:02:56,470
whole fleet what is the worst

01:02:54,180 --> 01:02:57,760
replication so from all these you have

01:02:56,470 --> 01:03:00,490
their master and then you have a bunch

01:02:57,760 --> 01:03:02,200
of replicas how bad it is right now will

01:03:00,490 --> 01:03:04,600
tell you Kate you replicas with more

01:03:02,200 --> 01:03:07,240
replicas behind one second or two

01:03:04,600 --> 01:03:12,190
seconds for five seconds or hours things

01:03:07,240 --> 01:03:14,620
when really sell so the way we can this

01:03:12,190 --> 01:03:17,200
the way we can we want to do this is by

01:03:14,620 --> 01:03:20,230
putting things in Kafka we have a lot

01:03:17,200 --> 01:03:23,080
more control over how fast we can

01:03:20,230 --> 01:03:25,180
process data towards my sequel so you're

01:03:23,080 --> 01:03:26,980
putting a bunch of data here then as

01:03:25,180 --> 01:03:29,110
soon as we notice there is replication

01:03:26,980 --> 01:03:31,870
lag so let's say we know is okay there's

01:03:29,110 --> 01:03:34,860
an increase of five milliseconds or yeah

01:03:31,870 --> 01:03:34,860
500 milliseconds instead

01:03:34,870 --> 01:03:38,790
second about two and that's when that

01:03:37,180 --> 01:03:41,590
things become second become problematic

01:03:38,790 --> 01:03:43,960
so we can stop all these consumers from

01:03:41,590 --> 01:03:45,580
consuming and then really quickly the

01:03:43,960 --> 01:03:47,080
replicas are back and then we keep

01:03:45,580 --> 01:03:49,120
consuming your stuff we don't lose it

01:03:47,080 --> 01:03:51,190
because in other cases what we will be

01:03:49,120 --> 01:03:53,350
doing it is or we cannot process right

01:03:51,190 --> 01:03:55,900
now let's just drop it this if you say

01:03:53,350 --> 01:03:57,610
you tried to take a an issue then we'll

01:03:55,900 --> 01:03:59,350
just drop it like okay we cannot because

01:03:57,610 --> 01:04:01,270
there is replication lag right now we

01:03:59,350 --> 01:04:03,100
don't want to process it I really wonder

01:04:01,270 --> 01:04:07,420
if you wouldn't want to lose it so what

01:04:03,100 --> 01:04:09,700
we do is instead we put it on Kafka if

01:04:07,420 --> 01:04:12,850
there is replication lag we stop these

01:04:09,700 --> 01:04:15,640
consumers from consuming replication lag

01:04:12,850 --> 01:04:17,860
catches up and we're back all the

01:04:15,640 --> 01:04:20,590
replicas are back to normal and then we

01:04:17,860 --> 01:04:23,080
can really start consuming from from the

01:04:20,590 --> 01:04:26,290
consumers we can keep writing data to my

01:04:23,080 --> 01:04:28,450
sequel one and every now and then you

01:04:26,290 --> 01:04:30,550
know it's like we will be constantly

01:04:28,450 --> 01:04:32,290
asking from our base these replicas all

01:04:30,550 --> 01:04:34,210
these all these consumers can be asked

01:04:32,290 --> 01:04:36,030
constantly asking pinnacle certification

01:04:34,210 --> 01:04:39,100
life and as soon as the you notice

01:04:36,030 --> 01:04:41,890
replication lag is going up as soon as I

01:04:39,100 --> 01:04:44,290
noticed your lag is going up

01:04:41,890 --> 01:04:46,420
they can't stop consuming and then

01:04:44,290 --> 01:04:47,530
replication catches up and then we don't

01:04:46,420 --> 01:04:51,340
have because the problem is usually

01:04:47,530 --> 01:04:53,440
there is replication lag and then keep

01:04:51,340 --> 01:04:56,710
people will keep blasting the database

01:04:53,440 --> 01:04:58,780
and so that only makes the problem worse

01:04:56,710 --> 01:05:01,060
because then replicas are even more

01:04:58,780 --> 01:05:04,600
behind what we want what we wish to have

01:05:01,060 --> 01:05:08,770
is more control so we say stop consuming

01:05:04,600 --> 01:05:10,870
stuff or or we find a way around it

01:05:08,770 --> 01:05:16,210
where we can kind of hold your stuff for

01:05:10,870 --> 01:05:18,850
a little bit replication is healthy and

01:05:16,210 --> 01:05:20,470
so that's how we help that replication

01:05:18,850 --> 01:05:22,180
lag problem that's that's for

01:05:20,470 --> 01:05:26,380
expectation that these things could help

01:05:22,180 --> 01:05:28,180
us with that one and then the other

01:05:26,380 --> 01:05:31,000
problem the other thing that we want is

01:05:28,180 --> 01:05:33,190
siloing and charting and it's not really

01:05:31,000 --> 01:05:35,530
like a direct solution is more like it

01:05:33,190 --> 01:05:38,440
just let us have more control over where

01:05:35,530 --> 01:05:40,990
that data goes to and so that means that

01:05:38,440 --> 01:05:44,110
when we put stuff in Kafka is much more

01:05:40,990 --> 01:05:45,700
easy to decide because we have all these

01:05:44,110 --> 01:05:48,579
consumers and we can modify them more

01:05:45,700 --> 01:05:51,219
easily where to put that data

01:05:48,579 --> 01:05:53,619
put it and be in my co-hosts or do we

01:05:51,219 --> 01:05:55,630
want to change we can we have it's just

01:05:53,619 --> 01:05:59,229
it's just a matter of control of where

01:05:55,630 --> 01:06:01,719
we want to rather than yes I record

01:05:59,229 --> 01:06:02,859
talking to Muncie that's those are the

01:06:01,719 --> 01:06:03,989
two problems that we kind of because I

01:06:02,859 --> 01:06:06,880
think the main one is actually

01:06:03,989 --> 01:06:08,619
replication lag but but for us it's also

01:06:06,880 --> 01:06:12,509
important silent people and that's

01:06:08,619 --> 01:06:17,319
that's kind of long-term picture

01:06:12,509 --> 01:06:19,779
so that's part so what has been the

01:06:17,319 --> 01:06:22,089
progress of farming is experiment we

01:06:19,779 --> 01:06:27,519
enable this thing for each created each

01:06:22,089 --> 01:06:32,589
update and it should meet then we kind

01:06:27,519 --> 01:06:34,479
of the way that these problems you know

01:06:32,589 --> 01:06:37,900
they have a technical nature but at this

01:06:34,479 --> 01:06:41,170
I I realized as a kind of an engineering

01:06:37,900 --> 01:06:44,289
it up that yeah the technical problem is

01:06:41,170 --> 01:06:45,969
is it's hard to solve but not as hard as

01:06:44,289 --> 01:06:47,949
the human problem behind it and the

01:06:45,969 --> 01:06:50,079
human problem behind it is actually

01:06:47,949 --> 01:06:51,609
convincing people to use this because

01:06:50,079 --> 01:06:53,140
they are beginning nothing right away

01:06:51,609 --> 01:06:55,029
you have to tell people you know what

01:06:53,140 --> 01:06:56,859
now you're not using acting record

01:06:55,029 --> 01:07:00,309
you're using this stuff that is just

01:06:56,859 --> 01:07:02,739
gonna be a hill to use and yeah you can

01:07:00,309 --> 01:07:04,779
you can have the nice things that active

01:07:02,739 --> 01:07:06,429
record gives you and they are asking I'm

01:07:04,779 --> 01:07:10,059
cool but what am I getting then you're

01:07:06,429 --> 01:07:11,619
like you're not getting anything it's

01:07:10,059 --> 01:07:13,029
actually just because we have to do

01:07:11,619 --> 01:07:16,239
these because otherwise we cannot grow

01:07:13,029 --> 01:07:18,239
as much as we want long-term and so

01:07:16,239 --> 01:07:20,140
that's the difficulty the difficulty is

01:07:18,239 --> 01:07:22,959
convincing people to use them and

01:07:20,140 --> 01:07:26,799
providing them with the right right SDKs

01:07:22,959 --> 01:07:28,689
by documentation kind of educating them

01:07:26,799 --> 01:07:31,089
into okay the actual nature of the

01:07:28,689 --> 01:07:33,479
system we have which is actually we are

01:07:31,089 --> 01:07:36,400
actually a eventually consistent

01:07:33,479 --> 01:07:39,489
eventually consistent system just

01:07:36,400 --> 01:07:41,559
because we have replication lag it's

01:07:39,489 --> 01:07:41,920
like yeah eventually data will show up

01:07:41,559 --> 01:07:44,140
there

01:07:41,920 --> 01:07:46,509
it's just weird not being explicit about

01:07:44,140 --> 01:07:53,170
the system actually makes it very

01:07:46,509 --> 01:07:55,390
explicit so a lot of it is just trying

01:07:53,170 --> 01:07:58,839
to talk to people and show a man like

01:07:55,390 --> 01:08:00,429
yeah you will have to use this don't

01:07:58,839 --> 01:08:02,510
hate me for it but it's a good thing at

01:08:00,429 --> 01:08:04,670
the end

01:08:02,510 --> 01:08:07,880
we also have some of course UI design

01:08:04,670 --> 01:08:10,370
changes challenges that we will see this

01:08:07,880 --> 01:08:12,410
is one of those changes that if these

01:08:10,370 --> 01:08:15,620
works out then this is where potential

01:08:12,410 --> 01:08:17,630
kink is that equal see and yeah it's

01:08:15,620 --> 01:08:20,630
also like talking to the product and I

01:08:17,630 --> 01:08:22,040
okay this is going to change so let's

01:08:20,630 --> 01:08:26,960
figure out a way to make port for

01:08:22,040 --> 01:08:29,299
Oakland and then there is also the game

01:08:26,960 --> 01:08:30,589
PID that's important party like the API

01:08:29,299 --> 01:08:34,339
is also going to change and that's gonna

01:08:30,589 --> 01:08:36,440
change the it's kind of you know there

01:08:34,339 --> 01:08:38,089
is this potentially backwards breaking

01:08:36,440 --> 01:08:39,950
change which we don't want to do because

01:08:38,089 --> 01:08:42,259
as soon as you tell people all these

01:08:39,950 --> 01:08:44,089
changes backwards incompatible everyone

01:08:42,259 --> 01:08:47,180
gets like oh no don't

01:08:44,089 --> 01:08:49,910
so we wanted to find a way to make it

01:08:47,180 --> 01:08:52,790
non break and changing not not breaking

01:08:49,910 --> 01:08:57,370
backwards you know what I mean the point

01:08:52,790 --> 01:09:00,400
is we wanted to phrase it in a way or

01:08:57,370 --> 01:09:05,420
what you can do is you can essentially

01:09:00,400 --> 01:09:08,089
simulate an async system with a sting

01:09:05,420 --> 01:09:10,190
system right so it's just finding ways

01:09:08,089 --> 01:09:12,290
around it one of the solutions for

01:09:10,190 --> 01:09:15,859
example is when you create an evap okay

01:09:12,290 --> 01:09:17,120
you can get you can it's up to you we

01:09:15,859 --> 01:09:19,880
could give you that the possibility of

01:09:17,120 --> 01:09:21,200
getting waiting a longer time out kind

01:09:19,880 --> 01:09:23,420
of time you can give it a longer time

01:09:21,200 --> 01:09:26,180
out if we can't afford that otherwise

01:09:23,420 --> 01:09:29,960
you can get a URL back to pull from that

01:09:26,180 --> 01:09:32,720
URL to see when your thing is right and

01:09:29,960 --> 01:09:34,190
that that will also mean you have to

01:09:32,720 --> 01:09:38,420
wait until the brake engine happened

01:09:34,190 --> 01:09:47,960
back in this but nothing none of that I

01:09:38,420 --> 01:09:49,279
mean okay so what we found so far first

01:09:47,960 --> 01:09:53,960
that is doable that was the first

01:09:49,279 --> 01:09:56,390
question like we stopped shifted beneath

01:09:53,960 --> 01:09:59,030
that we shifted for everyone at github

01:09:56,390 --> 01:10:00,440
and we started to see the graphs ago so

01:09:59,030 --> 01:10:05,600
one is consumer stuff that's that's

01:10:00,440 --> 01:10:07,940
pretty but we saw some time outs due to

01:10:05,600 --> 01:10:09,470
ruby calf calf calf kinda he says not

01:10:07,940 --> 01:10:14,150
very we're using four to conceive the

01:10:09,470 --> 01:10:21,590
great consumers by

01:10:14,150 --> 01:10:25,070
senex and they have a they when you have

01:10:21,590 --> 01:10:29,570
very low volume of just coming into your

01:10:25,070 --> 01:10:31,670
reduce it will wait two seconds like if

01:10:29,570 --> 01:10:33,739
it looks it tries to get data from there

01:10:31,670 --> 01:10:35,659
and there's nothing it will just asleep

01:10:33,739 --> 01:10:37,489
two seconds and there is literally a

01:10:35,659 --> 01:10:41,540
piece of color says it's a line called

01:10:37,489 --> 01:10:43,969
asleep to things or like okay what do we

01:10:41,540 --> 01:10:45,800
do about this so we kind of try to patch

01:10:43,969 --> 01:10:50,060
it but it took a long time so we created

01:10:45,800 --> 01:10:51,949
an internal fork whole mess we're still

01:10:50,060 --> 01:10:54,080
working on that and the other one is

01:10:51,949 --> 01:10:56,870
Keri balancing Dooley during the quotes

01:10:54,080 --> 01:11:00,679
and this is an interesting bit when you

01:10:56,870 --> 01:11:03,650
see these you see this partition's thing

01:11:00,679 --> 01:11:05,929
the magic of Kafka comes from the fact

01:11:03,650 --> 01:11:08,030
that here Kimmy will have three

01:11:05,929 --> 01:11:12,230
consumers for example and if one of

01:11:08,030 --> 01:11:14,239
those consumers dies or yes dies or you

01:11:12,230 --> 01:11:15,560
want to change it so ownership of that

01:11:14,239 --> 01:11:18,890
partition changes to a different

01:11:15,560 --> 01:11:20,239
consumer Kafka does rebalancing and it's

01:11:18,890 --> 01:11:21,620
a bad thing you want to have your

01:11:20,239 --> 01:11:23,570
balance you don't want to get rebalance

01:11:21,620 --> 01:11:25,219
because rebalance rebalancing means that

01:11:23,570 --> 01:11:27,679
the consumers that you have in a

01:11:25,219 --> 01:11:30,170
consumer group which can be a few of

01:11:27,679 --> 01:11:33,920
them they won't be able to consume for a

01:11:30,170 --> 01:11:36,560
bunch of seconds and that's I mean you

01:11:33,920 --> 01:11:38,060
can imagine this bad thing so ideally

01:11:36,560 --> 01:11:40,699
you don't want to have any kind of

01:11:38,060 --> 01:11:42,560
rebalancing happening and what is going

01:11:40,699 --> 01:11:44,570
on right now is that we get up we're

01:11:42,560 --> 01:11:46,190
going all day long which some people

01:11:44,570 --> 01:11:50,090
just deploy it's my deploy like every

01:11:46,190 --> 01:11:54,020
day and so every time we deploy there is

01:11:50,090 --> 01:11:55,790
partitioning in Kafka and and then we

01:11:54,020 --> 01:11:57,199
have to and then we won't see a bunch of

01:11:55,790 --> 01:12:02,510
time house but to try to create a thing

01:11:57,199 --> 01:12:04,340
and then timeouts request and but those

01:12:02,510 --> 01:12:07,580
you know honestly I think those are like

01:12:04,340 --> 01:12:10,040
problems that are that are fixable we

01:12:07,580 --> 01:12:11,719
will just have to tweak Kafka and

01:12:10,040 --> 01:12:14,630
keeping Eddie's a lot and all those

01:12:11,719 --> 01:12:16,310
things it's kind of any but yeah

01:12:14,630 --> 01:12:18,770
eventually you can't become figured out

01:12:16,310 --> 01:12:20,900
the problem is again getting people to

01:12:18,770 --> 01:12:24,139
use this thing because they want to gain

01:12:20,900 --> 01:12:26,570
a lot by the way so feel the problems

01:12:24,139 --> 01:12:28,430
that we found this brought about for

01:12:26,570 --> 01:12:33,730
example have a see

01:12:28,430 --> 01:12:36,860
I call this the default values so

01:12:33,730 --> 01:12:39,020
essentially if there is a there is a

01:12:36,860 --> 01:12:41,090
field there is no like a string or

01:12:39,020 --> 01:12:42,710
whatever just put setting full value on

01:12:41,090 --> 01:12:46,100
it so for example do you just get an

01:12:42,710 --> 01:12:47,660
empty string and for us is not like a

01:12:46,100 --> 01:12:50,090
convenient thing because sometimes

01:12:47,660 --> 01:12:52,700
people just it's they just delete some

01:12:50,090 --> 01:12:55,010
implement from the field that means we

01:12:52,700 --> 01:12:58,940
want to have that pill be new in the

01:12:55,010 --> 01:13:00,800
database and and then and then yeah what

01:12:58,940 --> 01:13:05,570
do we do about that so we have to like

01:13:00,800 --> 01:13:06,980
grab the turn of off fields some of

01:13:05,570 --> 01:13:13,780
those fields that we actually wanted to

01:13:06,980 --> 01:13:16,100
be new wrap them in some Google product

01:13:13,780 --> 01:13:17,870
library that we have and then we have to

01:13:16,100 --> 01:13:19,670
build the wrong things it's kind of

01:13:17,870 --> 01:13:22,250
messy so we don't have we have to do

01:13:19,670 --> 01:13:23,870
this pain we don't we don't want the

01:13:22,250 --> 01:13:26,600
entire company and entire engineering

01:13:23,870 --> 01:13:28,160
team to be to having to deal with that

01:13:26,600 --> 01:13:29,960
so we have to provide wrappers and do

01:13:28,160 --> 01:13:30,320
this in case for that to solve that

01:13:29,960 --> 01:13:33,160
problem

01:13:30,320 --> 01:13:35,750
the other problem is running these

01:13:33,160 --> 01:13:37,610
kubernetes consumers that's pretty

01:13:35,750 --> 01:13:39,830
painful as well that's you have to

01:13:37,610 --> 01:13:42,590
understand how Romanies works and you

01:13:39,830 --> 01:13:51,140
don't really want to do that also if you

01:13:42,590 --> 01:13:53,990
don't same in micro-services me yes this

01:13:51,140 --> 01:13:55,490
is X and at the end it's just it just

01:13:53,990 --> 01:14:03,020
becomes a little bit of an unfamiliar

01:13:55,490 --> 01:14:04,250
environment $50 I'm not saying it's just

01:14:03,020 --> 01:14:05,930
generally speaking an unfamiliar

01:14:04,250 --> 01:14:08,750
environment for developers should have

01:14:05,930 --> 01:14:11,630
to run all these things in and you want

01:14:08,750 --> 01:14:12,800
to remove friction essentially because

01:14:11,630 --> 01:14:16,130
they are already kind of in their

01:14:12,800 --> 01:14:17,540
mindset like why do I have to do this as

01:14:16,130 --> 01:14:19,790
soon as I realize have to rock they have

01:14:17,540 --> 01:14:22,070
to run coverage Navy's parts and stop

01:14:19,790 --> 01:14:24,290
they're like oh no no no gonna do that

01:14:22,070 --> 01:14:27,740
so you have become convinced them in it

01:14:24,290 --> 01:14:30,470
and in other ways and so the current

01:14:27,740 --> 01:14:32,210
state of this experiment is we sat down

01:14:30,470 --> 01:14:33,830
again okay let's talk about this what

01:14:32,210 --> 01:14:36,290
are we gonna do we won't be able to

01:14:33,830 --> 01:14:37,850
convince anyone to use this thing lets

01:14:36,290 --> 01:14:40,300
me write over it and so we change the

01:14:37,850 --> 01:14:43,640
architecture so same

01:14:40,300 --> 01:14:46,850
get up get up the green SAP events

01:14:43,640 --> 01:14:51,460
coming the mens are storing the same

01:14:46,850 --> 01:14:51,460
thing when I was a shoot safe

01:14:53,560 --> 01:14:58,550
but now the difference is that we will

01:14:55,790 --> 01:15:01,400
have these generic love books love what

01:14:58,550 --> 01:15:02,420
consumers and these are can't they all

01:15:01,400 --> 01:15:04,280
look exactly the same

01:15:02,420 --> 01:15:06,290
remember that in the previous one we'll

01:15:04,280 --> 01:15:09,410
have a consumer for issue create a

01:15:06,290 --> 01:15:12,260
consumers for issue update a consumer

01:15:09,410 --> 01:15:16,940
for who request create and the order of

01:15:12,260 --> 01:15:18,380
those consumers are the product owners

01:15:16,940 --> 01:15:20,330
right and we'll have to build those

01:15:18,380 --> 01:15:23,540
things themselves this case we just

01:15:20,330 --> 01:15:25,760
built these we are the ones who know

01:15:23,540 --> 01:15:28,010
this man as an internal interfaces we

01:15:25,760 --> 01:15:31,160
own those the code of those consumers

01:15:28,010 --> 01:15:32,540
and and then they just look all the same

01:15:31,160 --> 01:15:35,570
they're really lightweight because all

01:15:32,540 --> 01:15:38,810
they are doing is actually requests to

01:15:35,570 --> 01:15:41,240
an internal API that lives but we have

01:15:38,810 --> 01:15:42,710
the same control or or the replication

01:15:41,240 --> 01:15:45,770
that problem that I was mentioning at

01:15:42,710 --> 01:15:48,170
the beginning right so we have these

01:15:45,770 --> 01:15:49,790
internal API is that artwork we're

01:15:48,170 --> 01:15:53,090
currently experimenting with trip we

01:15:49,790 --> 01:15:58,160
tried what's the name of the Google one

01:15:53,090 --> 01:16:01,130
here PC with really bad results so we

01:15:58,160 --> 01:16:02,690
eventually move to work internally and

01:16:01,130 --> 01:16:04,700
so that's what we have been

01:16:02,690 --> 01:16:12,500
experimenting with and now we're

01:16:04,700 --> 01:16:15,230
creating an API I'm just saying there's

01:16:12,500 --> 01:16:18,350
any kind of nature right like you have

01:16:15,230 --> 01:16:22,250
this generic book consumers you post an

01:16:18,350 --> 01:16:24,950
HTTP request with the word content back

01:16:22,250 --> 01:16:27,260
to my sequel back to the rails app and

01:16:24,950 --> 01:16:29,420
and then from the rails app use you

01:16:27,260 --> 01:16:35,060
savory you serve it to the second in the

01:16:29,420 --> 01:16:39,290
David again you have a fifth step where

01:16:35,060 --> 01:16:42,020
you profit that's a data step it's it's

01:16:39,290 --> 01:16:44,540
not huge because it's the step where

01:16:42,020 --> 01:16:46,160
we're gonna took the final event like

01:16:44,540 --> 01:16:48,560
okay the thing that was created so that

01:16:46,160 --> 01:16:52,250
search can use it or that key learning

01:16:48,560 --> 01:16:53,210
could use it we haven't we are still

01:16:52,250 --> 01:16:54,680
working on that and we don't know

01:16:53,210 --> 01:16:56,240
exactly if we want to do it here in the

01:16:54,680 --> 01:16:59,390
consumer we want to do it at the

01:16:56,240 --> 01:17:06,770
endpoint part so we I just didn't matter

01:16:59,390 --> 01:17:08,510
think there is just and what is next the

01:17:06,770 --> 01:17:10,520
next thing is finish this work

01:17:08,510 --> 01:17:15,350
implementation actually today afternoon

01:17:10,520 --> 01:17:18,590
we got it to preview lab we changed for

01:17:15,350 --> 01:17:20,180
us it's just like independent instance

01:17:18,590 --> 01:17:24,710
that we can put the coding and like try

01:17:20,180 --> 01:17:27,380
it and that is seems to be working so

01:17:24,710 --> 01:17:32,270
this good I hope hopefully my colleague

01:17:27,380 --> 01:17:35,120
may be seen this actually remembered we

01:17:32,270 --> 01:17:38,780
can stop shoot that putting available

01:17:35,120 --> 01:17:41,270
for everyone you know and then we're an

01:17:38,780 --> 01:17:43,220
extra step will be actually putting

01:17:41,270 --> 01:17:47,420
these in production so actually getting

01:17:43,220 --> 01:17:49,790
these to some amount of users and sea

01:17:47,420 --> 01:17:52,580
and gathered some actual performance

01:17:49,790 --> 01:17:54,520
metrics because right now we all these

01:17:52,580 --> 01:17:57,890
timeouts that we wanted to get the

01:17:54,520 --> 01:17:59,480
previous iteration to production but we

01:17:57,890 --> 01:18:01,700
don't know sign notes you won't see all

01:17:59,480 --> 01:18:05,060
those amount so that's just not good UX

01:18:01,700 --> 01:18:07,010
so okay we will iterate on this see that

01:18:05,060 --> 01:18:10,820
solves the problem also there's a little

01:18:07,010 --> 01:18:12,530
bit of this these consumers most likely

01:18:10,820 --> 01:18:19,040
will be able which is a leave me bastard

01:18:12,530 --> 01:18:20,690
has a better as a better go or Java

01:18:19,040 --> 01:18:23,420
because Java which is a really good

01:18:20,690 --> 01:18:25,720
Kafka library and so it's a lot faster

01:18:23,420 --> 01:18:29,330
it's just doing this HTTP request and

01:18:25,720 --> 01:18:30,560
yeah so that's also in can have those

01:18:29,330 --> 01:18:35,050
are the two languages we're using the

01:18:30,560 --> 01:18:35,050
most Ruby and those and a little bit of

01:18:37,090 --> 01:18:41,480
and then after after we gather some

01:18:39,590 --> 01:18:43,070
metrics and we said okay this is this is

01:18:41,480 --> 01:18:48,290
actually doable we believe it's gonna be

01:18:43,070 --> 01:18:50,360
like we're gonna implement a second

01:18:48,290 --> 01:18:53,480
business object perhaps two requests

01:18:50,360 --> 01:18:55,040
right that's a good one but internally

01:18:53,480 --> 01:18:59,330
we have a bunch of them so we're trying

01:18:55,040 --> 01:19:02,000
to see what's the team that wants to

01:18:59,330 --> 01:19:03,500
roll with us into this next part of the

01:19:02,000 --> 01:19:05,900
experiment because that's kind of the

01:19:03,500 --> 01:19:08,300
tricky part means them I'm like

01:19:05,900 --> 01:19:10,040
you know it's a good idea hopefully some

01:19:08,300 --> 01:19:11,660
things actually will get Balio defeats

01:19:10,040 --> 01:19:16,270
right away and so those are the ones

01:19:11,660 --> 01:19:16,270
we're going for first okay I think this

01:19:35,430 --> 01:19:38,659
[Applause]

01:20:05,680 --> 01:20:18,830
why did you choose to use yeah honestly

01:20:13,360 --> 01:20:20,330
because we already had a to handle there

01:20:18,830 --> 01:20:23,510
is a monkey machina that already does

01:20:20,330 --> 01:20:26,210
this uses cap boss for a different

01:20:23,510 --> 01:20:28,370
system and and it was just an easy wing

01:20:26,210 --> 01:20:30,320
like okay let's go for this this just

01:20:28,370 --> 01:20:32,030
solves the problem later on we realized

01:20:30,320 --> 01:20:34,700
okay it's actually more complex that we

01:20:32,030 --> 01:20:37,190
actually it's definitely faster it's

01:20:34,700 --> 01:20:38,780
pretty fast to like oh like encode and

01:20:37,190 --> 01:20:39,980
decode of things so that's kind of the

01:20:38,780 --> 01:20:43,190
advantage because there's a lot of us

01:20:39,980 --> 01:20:44,750
but it has like same defaults and all

01:20:43,190 --> 01:20:47,660
that but those defaults are actually

01:20:44,750 --> 01:20:49,520
like biting biting us yeah it's a little

01:20:47,660 --> 01:20:50,720
bit harder to but it's a good point we

01:20:49,520 --> 01:20:54,250
could eventually I mean it's an

01:20:50,720 --> 01:20:54,250
experiment so we can still change it

01:21:06,280 --> 01:21:15,100
right yeah yeah I think I think we will

01:21:10,460 --> 01:21:19,050
the good things that we will because

01:21:15,100 --> 01:21:25,619
then we'll yes we handle HTTP requests

01:21:19,050 --> 01:21:27,360
at that point at these points at the

01:21:25,619 --> 01:21:29,190
point where from the consumers we're

01:21:27,360 --> 01:21:31,260
doing the request back to you

01:21:29,190 --> 01:21:33,059
I think we will be able to make me

01:21:31,260 --> 01:21:34,349
handle that in the consumers like

01:21:33,059 --> 01:21:37,320
getting that data there and then they

01:21:34,349 --> 01:21:40,469
just do a plain HTTP request and they

01:21:37,320 --> 01:21:44,250
can't forget about those dos but this

01:21:40,469 --> 01:21:45,809
kind of facilities is a good point yeah

01:21:44,250 --> 01:22:08,159
maybe actually that gives man in the

01:21:45,809 --> 01:22:11,099
innovation right now it's just so this

01:22:08,159 --> 01:22:13,949
one for example when we when we go back

01:22:11,099 --> 01:22:17,070
this is a still active record so and

01:22:13,949 --> 01:22:19,829
this in this current in this British

01:22:17,070 --> 01:22:22,800
public arena we're currently doing in

01:22:19,829 --> 01:22:25,469
the previous one which is this one these

01:22:22,800 --> 01:22:27,090
consumers actually know the entire

01:22:25,469 --> 01:22:29,219
environment from get out so like they

01:22:27,090 --> 01:22:32,730
have access to activate so it's a

01:22:29,219 --> 01:22:33,869
different process than this one so it's

01:22:32,730 --> 01:22:36,630
not the same one that is serving your

01:22:33,869 --> 01:22:38,550
request but it just it just is that is a

01:22:36,630 --> 01:22:40,020
heavy it's a heavy consumer in the sense

01:22:38,550 --> 01:22:41,820
that it knows they actually it has

01:22:40,020 --> 01:22:44,639
access to the Ruby to the rails

01:22:41,820 --> 01:22:48,080
environment so it knows what active

01:22:44,639 --> 01:22:51,310
record is and all the gems

01:22:48,080 --> 01:22:51,310
[Music]

01:22:57,679 --> 01:23:03,770
yeah from the controller you just push

01:23:00,780 --> 01:23:06,119
the message to Kafka then you hold there

01:23:03,770 --> 01:23:07,980
until it comes back and tell you okay

01:23:06,119 --> 01:23:13,409
this is the ID of the patient in this

01:23:07,980 --> 01:23:15,920
way we can discuss it later a little bit

01:23:13,409 --> 01:23:15,920
more in detail

01:23:30,070 --> 01:23:59,570
let's talk about essentially just

01:23:52,370 --> 01:24:05,480
waiting some time actually this before

01:23:59,570 --> 01:24:08,030
your rights to arrive yeah essentially

01:24:05,480 --> 01:24:16,850
that's what we're doing so God does this

01:24:08,030 --> 01:24:18,950
is all all because once what do we

01:24:16,850 --> 01:24:22,040
notice that the replication is going

01:24:18,950 --> 01:24:23,990
once a replication is increasing we can

01:24:22,040 --> 01:24:25,640
stop writing to the database so that the

01:24:23,990 --> 01:24:27,920
replication doesn't become worse and

01:24:25,640 --> 01:24:30,340
these replicas have time to catch up

01:24:27,920 --> 01:24:33,620
so a replication is one second behind

01:24:30,340 --> 01:24:37,250
and everyone and you try to create any

01:24:33,620 --> 01:24:39,020
object and then we wouldn't process that

01:24:37,250 --> 01:24:41,240
object right away it's kind of is here

01:24:39,020 --> 01:24:43,970
it's not lost but these consumers are

01:24:41,240 --> 01:24:46,130
waiting on the replication it's it's

01:24:43,970 --> 01:24:47,210
back at zero replication back is back

01:24:46,130 --> 01:24:49,610
it's you and then we can continue

01:24:47,210 --> 01:24:53,120
processing these things so my detalis is

01:24:49,610 --> 01:24:55,130
created it could potentially happen

01:24:53,120 --> 01:24:56,870
again right like yes okay you when you

01:24:55,130 --> 01:24:58,610
created here it's like I'm that very

01:24:56,870 --> 01:25:01,190
second and that very really sick I'm

01:24:58,610 --> 01:25:03,080
like replication without but I think the

01:25:01,190 --> 01:25:05,660
chances of that happening are much much

01:25:03,080 --> 01:25:08,060
lower than what we currently have right

01:25:05,660 --> 01:25:09,710
now so yes I think in him in a way

01:25:08,060 --> 01:25:12,050
you're right it could potentially have

01:25:09,710 --> 01:25:16,610
it but the chances are I mean just like

01:25:12,050 --> 01:25:19,070
there is no essentially no way at least

01:25:16,610 --> 01:25:30,080
that's I can't think of it but if you

01:25:19,070 --> 01:25:33,020
have a good solution yes essentially it

01:25:30,080 --> 01:25:36,320
just loads the same kind of slightly

01:25:33,020 --> 01:25:38,929
different version of the of the rails

01:25:36,320 --> 01:25:41,460
good loaders

01:25:38,929 --> 01:25:43,230
so it's essentially that thing yes

01:25:41,460 --> 01:25:44,789
that's how we have that yeah it's a

01:25:43,230 --> 01:25:46,440
little bit heavy end and we probably

01:25:44,789 --> 01:25:50,159
four temples that the cool thing about

01:25:46,440 --> 01:25:52,469
this one it's that the consumers are

01:25:50,159 --> 01:25:55,320
just doing HTTP requests so we don't

01:25:52,469 --> 01:25:56,760
have to know the entire environment but

01:25:55,320 --> 01:25:59,070
these things come with problems as well

01:25:56,760 --> 01:26:00,929
so you know this seems like very

01:25:59,070 --> 01:26:03,030
motivating but hopefully you won't have

01:26:00,929 --> 01:26:04,739
to do this it's not precisely like the

01:26:03,030 --> 01:26:07,800
most beautiful thing because now we will

01:26:04,739 --> 01:26:10,590
have to deal with what happens if these

01:26:07,800 --> 01:26:13,469
if these all these all these processes

01:26:10,590 --> 01:26:15,960
here are at capacity and these consumers

01:26:13,469 --> 01:26:17,249
are just blessing them so you know it's

01:26:15,960 --> 01:26:20,849
things that you have to think about it

01:26:17,249 --> 01:26:22,019
and find me Zara it's not like we have

01:26:20,849 --> 01:26:29,699
all the answers by the way it's just

01:26:22,019 --> 01:26:38,369
explore it and see it is we're good

01:26:29,699 --> 01:26:41,010
right thank you I'm very happy that you

01:26:38,369 --> 01:26:43,019
shared with us how changing creating

01:26:41,010 --> 01:26:45,199
issues that get up creates issues at

01:26:43,019 --> 01:26:45,199
github

01:26:45,710 --> 01:26:48,960
[Music]

01:26:47,249 --> 01:26:50,999
keep those talks coming because I really

01:26:48,960 --> 01:26:52,499
like em and again if there's something

01:26:50,999 --> 01:26:54,210
that sparks your interest feel free to

01:26:52,499 --> 01:26:55,949
ask what your organizer so I can fake

01:26:54,210 --> 01:26:59,699
like it's my request or I can actually

01:26:55,949 --> 01:27:01,949
just shoot request at speakers and talk

01:26:59,699 --> 01:27:04,920
to us if you want to to house next MCM

01:27:01,949 --> 01:27:07,380
RV which will be in December 17th and

01:27:04,920 --> 01:27:09,449
now have some drinks eat some pizzas

01:27:07,380 --> 01:27:12,289
come on talk to people like you don't

01:27:09,449 --> 01:27:12,289

YouTube URL: https://www.youtube.com/watch?v=VNB4hEicKxA


