Title: Amsterdam.rb meetup - 20th of April 2021
Publication date: 2021-03-23
Playlist: Amsterdam.rb meetups
Description: 
	Live stream of the Amsterdam.rb meetup of the 20th of April 2021.

Program of the video:
0:00 Introduction
3:33 Arno Fleming - Stepping up your game
26:35 Q&A with Arno Fleming
44:46 Julik Tarkhanov - Concurrency, Fibers and you
1:23:20 Q&A with Julik Tarkhanov
1:30:40 Closing notes and next meetup
1:33:00 Awkward waving

---

It's been a while since the last Amsterdam.rb event ðŸ‘‹ We hope everyone is still doing well during this time.

All attendees can talk and ask questions with the community and speakers on the Ruby Netherlands Slack. Join our Slack today by following this link: https://amsrbslack.herokuapp.com. We will be chatting in the #amsterdam channel during this event, so don't forget to join the #amsterdam channel.

With this being a virtual meetup, food and beverages will be of the "bring your own" kind. Grab your most comfy chair and your favorite snacks and join us online!

See you on the interwebs!

Arno, Floor, Tom & Rayta

---

Event page: https://www.meetup.com/Amsterdam-rb/events/277117196/

Website: https://amsrb.org/
Twitter: https://twitter.com/amsrb

#Amsterdamrb #Ruby #Meetup #Amsterdam
Captions: 
	00:00:04,240 --> 00:00:08,559
hello

00:00:05,200 --> 00:00:10,240
welcome everyone and our amsterdam ruby

00:00:08,559 --> 00:00:13,120
meetup members hi

00:00:10,240 --> 00:00:13,519
we have a jam-packed meetup agenda for

00:00:13,120 --> 00:00:17,199
you

00:00:13,519 --> 00:00:19,920
with two speakers and oh yes

00:00:17,199 --> 00:00:20,960
in case you haven't met me already my

00:00:19,920 --> 00:00:24,160
name is

00:00:20,960 --> 00:00:27,039
raita for new members joining yeah

00:00:24,160 --> 00:00:29,039
and my name is floor and raita and i are

00:00:27,039 --> 00:00:30,080
half of the amsterdam ruby organizing

00:00:29,039 --> 00:00:33,120
team

00:00:30,080 --> 00:00:36,880
tom de bruyne supports today's events

00:00:33,120 --> 00:00:38,640
behind the scenes so you won't see him

00:00:36,880 --> 00:00:42,960
but he's definitely there

00:00:38,640 --> 00:00:46,079
and on youtube as well yes and

00:00:42,960 --> 00:00:47,200
one of our guest speakers is ardo arno

00:00:46,079 --> 00:00:50,719
fleming

00:00:47,200 --> 00:00:53,360
and the other one is yulik tarkanov

00:00:50,719 --> 00:00:54,480
so arnold is also a member of our

00:00:53,360 --> 00:00:57,280
amstraam

00:00:54,480 --> 00:00:58,800
ruby media organization he's totally

00:00:57,280 --> 00:01:02,160
moonlighting as the guest

00:00:58,800 --> 00:01:03,600
speaker i love it yeah i'm sorry about

00:01:02,160 --> 00:01:05,840
that yeah he actually he is a guest

00:01:03,600 --> 00:01:13,840
speaker but he is also a co-organizer

00:01:05,840 --> 00:01:13,840
so sometimes we all guests speak a bit

00:01:14,479 --> 00:01:19,680
awesome yeah um uh and

00:01:17,680 --> 00:01:20,880
and arno i mean i will share a little

00:01:19,680 --> 00:01:22,880
bit about what the

00:01:20,880 --> 00:01:24,159
what an investor sort of mindset can

00:01:22,880 --> 00:01:25,680
help you

00:01:24,159 --> 00:01:27,600
drive the decisions that you make for

00:01:25,680 --> 00:01:30,799
your stack uh and you will

00:01:27,600 --> 00:01:33,040
talk about uh in concurrency fibers and

00:01:30,799 --> 00:01:35,280
you which i love as a title by the way

00:01:33,040 --> 00:01:36,640
we'll talk about the new fiber scheduler

00:01:35,280 --> 00:01:39,040
api and how that

00:01:36,640 --> 00:01:40,560
matters more than you think um and it

00:01:39,040 --> 00:01:41,119
sounds a little bit like click bait but

00:01:40,560 --> 00:01:43,280
uh but i

00:01:41,119 --> 00:01:44,720
i've been told that it's not um so there

00:01:43,280 --> 00:01:46,880
you go um

00:01:44,720 --> 00:01:48,799
if you have any questions or you know

00:01:46,880 --> 00:01:50,000
just feel like chatting with the rest of

00:01:48,799 --> 00:01:53,360
the community members

00:01:50,000 --> 00:01:54,320
uh then go to our amsterdam rb slack or

00:01:53,360 --> 00:01:57,280
netherlands

00:01:54,320 --> 00:01:58,240
rb if things like um if you're if you

00:01:57,280 --> 00:02:01,840
haven't joined the chat

00:01:58,240 --> 00:02:01,840
yet you can go to uh

00:02:03,479 --> 00:02:07,520
amsrbslag.herokuab.com

00:02:05,360 --> 00:02:09,440
and then once you're in uh navigate to

00:02:07,520 --> 00:02:12,480
the amsterdam

00:02:09,440 --> 00:02:13,120
channel and join the chat yeah you can

00:02:12,480 --> 00:02:14,879
also let

00:02:13,120 --> 00:02:17,599
your real friends on twitter know that

00:02:14,879 --> 00:02:21,840
that you are watching our uh

00:02:17,599 --> 00:02:26,000
our live meetup and you can also tweet

00:02:21,840 --> 00:02:30,959
with the hashtag amsrb

00:02:26,000 --> 00:02:30,959
in in your tweets absolutely

00:02:31,360 --> 00:02:36,000
so um please be mindful that we have a

00:02:34,959 --> 00:02:39,200
code of conduct

00:02:36,000 --> 00:02:42,400
uh you can review our terms via

00:02:39,200 --> 00:02:44,319
this link on our web page i'll leave it

00:02:42,400 --> 00:02:47,920
there for just a couple secs

00:02:44,319 --> 00:02:50,480
seconds and uh

00:02:47,920 --> 00:02:51,920
i think we can continue with our program

00:02:50,480 --> 00:02:54,800
now

00:02:51,920 --> 00:02:56,000
absolutely so we have two talks uh and

00:02:54,800 --> 00:02:58,239
they're separated by

00:02:56,000 --> 00:02:59,120
a break break we didn't schedule any

00:02:58,239 --> 00:03:01,440
entertainment i

00:02:59,120 --> 00:03:02,879
just want to set the expectations right

00:03:01,440 --> 00:03:05,760
we also need a break

00:03:02,879 --> 00:03:06,640
after the first talk maybe i don't know

00:03:05,760 --> 00:03:08,159
um

00:03:06,640 --> 00:03:10,000
anyway we don't know how long we'll

00:03:08,159 --> 00:03:11,599
break because we don't know exactly how

00:03:10,000 --> 00:03:13,440
long arno will be talking

00:03:11,599 --> 00:03:14,959
for uh if we know him a little bit he'll

00:03:13,440 --> 00:03:18,319
be talking for for a bit

00:03:14,959 --> 00:03:21,599
um anyway so you just be back at 8 pm

00:03:18,319 --> 00:03:22,959
cet sharp for the next talk um and q a

00:03:21,599 --> 00:03:26,400
will be 10 minutes

00:03:22,959 --> 00:03:28,720
like about 10 minutes after every talk

00:03:26,400 --> 00:03:29,440
just get your questions on the slack

00:03:28,720 --> 00:03:31,519
channel

00:03:29,440 --> 00:03:33,280
and we'll make sure to relay them to the

00:03:31,519 --> 00:03:34,959
speakers

00:03:33,280 --> 00:03:36,799
talking of speakers do you want to

00:03:34,959 --> 00:03:39,040
introduce our first guest

00:03:36,799 --> 00:03:40,799
yeah oh yeah sure let's just introduce

00:03:39,040 --> 00:03:44,000
again well he's not a stranger

00:03:40,799 --> 00:03:46,879
to this community uh so are now

00:03:44,000 --> 00:03:48,319
flaming whenever you're ready the the

00:03:46,879 --> 00:03:52,080
floor stage screen

00:03:48,319 --> 00:03:54,959
is yours well clearly i'm ready i mean

00:03:52,080 --> 00:03:55,680
you need a picture of my own no it's

00:03:54,959 --> 00:03:58,560
fake

00:03:55,680 --> 00:04:00,319
um yeah clearly i'm i'm i'm happy to

00:03:58,560 --> 00:04:03,680
start with something that is about

00:04:00,319 --> 00:04:05,439
uh yeah called stepping up your game

00:04:03,680 --> 00:04:06,799
as far as i know i'm sharing my screen

00:04:05,439 --> 00:04:10,799
already and feel free to

00:04:06,799 --> 00:04:14,319
just put me there yes ah

00:04:10,799 --> 00:04:16,320
by the way this is a notes to uh both

00:04:14,319 --> 00:04:17,840
floor and writer hope of first thanks

00:04:16,320 --> 00:04:19,040
for for the introduction and thanks for

00:04:17,840 --> 00:04:21,919
having me as a speaker

00:04:19,040 --> 00:04:23,600
it's really nice um but um yeah you know

00:04:21,919 --> 00:04:25,840
me i really talk too long

00:04:23,600 --> 00:04:27,040
so feel free to just start calling me or

00:04:25,840 --> 00:04:28,000
something make it annoying here if i

00:04:27,040 --> 00:04:30,639
hear my phone i know

00:04:28,000 --> 00:04:31,440
that i'm taking too long and otherwise

00:04:30,639 --> 00:04:33,840
maybe i just don't

00:04:31,440 --> 00:04:34,479
even respond to it anyway this talk is

00:04:33,840 --> 00:04:36,800
called

00:04:34,479 --> 00:04:38,080
stepping up your game how an investor

00:04:36,800 --> 00:04:40,800
mindset allows you to

00:04:38,080 --> 00:04:42,240
improve your stack i seem to have no

00:04:40,800 --> 00:04:44,240
network connection so that means that

00:04:42,240 --> 00:04:45,759
you can't hear me but i know you can

00:04:44,240 --> 00:04:47,120
anyway stepping up your game how to

00:04:45,759 --> 00:04:48,400
invest your mindset allows you to

00:04:47,120 --> 00:04:51,600
improve your stack which is

00:04:48,400 --> 00:04:53,600
well uh stack uh we're

00:04:51,600 --> 00:04:54,639
going to dive into that so who i am well

00:04:53,600 --> 00:04:56,960
i co-organized ramsay

00:04:54,639 --> 00:04:58,639
ruby and ruby and l but also detected at

00:04:56,960 --> 00:05:01,120
the next closet

00:04:58,639 --> 00:05:02,639
um that is important because we're going

00:05:01,120 --> 00:05:04,800
to talk about experience

00:05:02,639 --> 00:05:06,800
at the next closet in an investment

00:05:04,800 --> 00:05:09,120
round and i'm not going to

00:05:06,800 --> 00:05:10,720
show you too many too many details but

00:05:09,120 --> 00:05:13,600
um

00:05:10,720 --> 00:05:15,440
you'll you'll you'll you'll see some of

00:05:13,600 --> 00:05:17,199
the things that we went through and

00:05:15,440 --> 00:05:19,440
uh well i'm just hoping that it will

00:05:17,199 --> 00:05:22,720
allow you to improve your stack

00:05:19,440 --> 00:05:25,520
but hey i'm not an investor

00:05:22,720 --> 00:05:26,560
no but still this is going to be

00:05:25,520 --> 00:05:27,440
interesting this is going to be

00:05:26,560 --> 00:05:29,280
interesting to you

00:05:27,440 --> 00:05:30,960
because um we've probably made some

00:05:29,280 --> 00:05:33,360
mistakes and i

00:05:30,960 --> 00:05:36,400
i allow you to learn from them so uh if

00:05:33,360 --> 00:05:38,800
only for that it's going to be fun

00:05:36,400 --> 00:05:39,919
um so i already told you i'm the tech

00:05:38,800 --> 00:05:41,840
lead at the next closet

00:05:39,919 --> 00:05:43,039
um it's important to understand what

00:05:41,840 --> 00:05:44,720
context is

00:05:43,039 --> 00:05:46,880
so the next closet was found seven years

00:05:44,720 --> 00:05:48,880
ago might have been

00:05:46,880 --> 00:05:50,000
eight years ago i'm sure i didn't check

00:05:48,880 --> 00:05:51,280
my details here

00:05:50,000 --> 00:05:53,120
by two finals you see them on the

00:05:51,280 --> 00:05:55,919
picture uh lika entalita

00:05:53,120 --> 00:05:58,000
and we as a company have a very strong

00:05:55,919 --> 00:05:59,840
focus on sustainability

00:05:58,000 --> 00:06:01,199
because we operate in the second most

00:05:59,840 --> 00:06:01,520
polluting industry of our planet which

00:06:01,199 --> 00:06:03,759
is

00:06:01,520 --> 00:06:05,280
which is fashion and maybe you thought

00:06:03,759 --> 00:06:06,800
well that's not the

00:06:05,280 --> 00:06:09,360
second most polluting industry of the

00:06:06,800 --> 00:06:11,680
planet well make a google about it

00:06:09,360 --> 00:06:13,520
so our mission is uh to make secondhand

00:06:11,680 --> 00:06:15,280
the first choice our niche is the design

00:06:13,520 --> 00:06:16,319
fashion our market is belgium and the

00:06:15,280 --> 00:06:18,319
netherlands

00:06:16,319 --> 00:06:20,160
and the total team size well that's 20

00:06:18,319 --> 00:06:22,479
full-time equivalents so

00:06:20,160 --> 00:06:23,280
roughly about around that size this is

00:06:22,479 --> 00:06:25,759
the full

00:06:23,280 --> 00:06:26,800
team size this is not engineers this is

00:06:25,759 --> 00:06:28,880
not

00:06:26,800 --> 00:06:30,880
people in product this is everyone

00:06:28,880 --> 00:06:32,840
including the two ladies you see in the

00:06:30,880 --> 00:06:35,520
picture

00:06:32,840 --> 00:06:36,800
so um this is a talk about our journey

00:06:35,520 --> 00:06:38,560
from startup to scope and there's

00:06:36,800 --> 00:06:39,680
there's a small disclaimer the talking

00:06:38,560 --> 00:06:41,039
points in this presentation are

00:06:39,680 --> 00:06:43,199
hopefully valid for the next classes

00:06:41,039 --> 00:06:43,759
they may or may not apply to your

00:06:43,199 --> 00:06:44,960
business

00:06:43,759 --> 00:06:46,639
when putting at least from this

00:06:44,960 --> 00:06:48,160
presentation in action you may come out

00:06:46,639 --> 00:06:48,880
better or worse anyway it's your

00:06:48,160 --> 00:06:51,039
business

00:06:48,880 --> 00:06:52,479
and your business is not my business i

00:06:51,039 --> 00:06:55,360
mean i told you

00:06:52,479 --> 00:06:55,360
i wasn't an investor

00:06:56,080 --> 00:06:59,120
so this is about how an investor mindset

00:06:58,319 --> 00:07:02,720
allows you to

00:06:59,120 --> 00:07:04,800
improve your stack so

00:07:02,720 --> 00:07:05,919
hmm what is that investor mindset well

00:07:04,800 --> 00:07:08,720
first and foremost

00:07:05,919 --> 00:07:10,560
this is about opportunity cost i mean

00:07:08,720 --> 00:07:12,000
you're an investor you have some

00:07:10,560 --> 00:07:14,160
money and you want to invest it in

00:07:12,000 --> 00:07:15,840
something and you're not just putting

00:07:14,160 --> 00:07:16,960
your money away so they can just do

00:07:15,840 --> 00:07:18,800
whatever they want

00:07:16,960 --> 00:07:20,000
you want to have some benefit it might

00:07:18,800 --> 00:07:23,199
be more money

00:07:20,000 --> 00:07:24,720
or potentially um well sustainability is

00:07:23,199 --> 00:07:27,360
something that would come to mind for us

00:07:24,720 --> 00:07:27,840
or maybe you want to have equal work

00:07:27,360 --> 00:07:30,319
rights

00:07:27,840 --> 00:07:32,560
something like that so benefit usually

00:07:30,319 --> 00:07:34,560
means money but it doesn't mean it is

00:07:32,560 --> 00:07:36,560
only limited to it but opportunity cost

00:07:34,560 --> 00:07:36,880
means i can put my money in the bank and

00:07:36,560 --> 00:07:39,440
get

00:07:36,880 --> 00:07:40,479
more money by interest at the moment

00:07:39,440 --> 00:07:42,560
that's not really true

00:07:40,479 --> 00:07:44,560
but you can also invest it in let's say

00:07:42,560 --> 00:07:45,919
any other company i mean we all work for

00:07:44,560 --> 00:07:47,599
companies and potentially

00:07:45,919 --> 00:07:49,360
you're making more money than we do and

00:07:47,599 --> 00:07:52,240
potentially investing in your company

00:07:49,360 --> 00:07:52,879
has a higher financial reward but

00:07:52,240 --> 00:07:54,639
benefits

00:07:52,879 --> 00:07:56,319
is not only about financial benefits

00:07:54,639 --> 00:07:57,759
just you can do whatever you want with

00:07:56,319 --> 00:07:59,680
your finite amount of money

00:07:57,759 --> 00:08:01,039
and well it has to be worth what it's

00:07:59,680 --> 00:08:02,560
well and that's what investors care

00:08:01,039 --> 00:08:05,280
about

00:08:02,560 --> 00:08:06,240
so two things come to mind is about

00:08:05,280 --> 00:08:08,720
assessing risk

00:08:06,240 --> 00:08:10,160
what if i put this money here what well

00:08:08,720 --> 00:08:10,639
will it be any skeletons in the closet

00:08:10,160 --> 00:08:12,160
and two

00:08:10,639 --> 00:08:13,840
it's about assessing potential so you

00:08:12,160 --> 00:08:15,360
can well you go through some due

00:08:13,840 --> 00:08:16,800
diligence around where an investor just

00:08:15,360 --> 00:08:18,000
says uh look there are wisconsins in

00:08:16,800 --> 00:08:21,919
this closet but maybe in

00:08:18,000 --> 00:08:24,720
the next class anyway that's not funny

00:08:21,919 --> 00:08:25,120
but it's also about assessing potential

00:08:24,720 --> 00:08:26,560
so

00:08:25,120 --> 00:08:30,479
this thing that i'm going to invest my

00:08:26,560 --> 00:08:32,240
money in will even scale

00:08:30,479 --> 00:08:33,760
is this something if i put my money in

00:08:32,240 --> 00:08:35,360
this in this idea

00:08:33,760 --> 00:08:36,959
will i come out better or will that

00:08:35,360 --> 00:08:39,200
company come out better and well will we

00:08:36,959 --> 00:08:41,839
make some money but also

00:08:39,200 --> 00:08:43,919
are my goals matt that is not what you

00:08:41,839 --> 00:08:47,040
do by assessing risk that is actually

00:08:43,919 --> 00:08:48,800
assessing potential potential

00:08:47,040 --> 00:08:51,279
and the investor mindset is definitely

00:08:48,800 --> 00:08:53,760
not about business as usual

00:08:51,279 --> 00:08:55,600
so this hairdresser if you want to skill

00:08:53,760 --> 00:08:56,560
up a hairdresser you just need to hire a

00:08:55,600 --> 00:08:58,000
lot more peeps

00:08:56,560 --> 00:08:59,600
and with software it's different so

00:08:58,000 --> 00:09:03,040
investors usually in

00:08:59,600 --> 00:09:04,800
our game are not interested in

00:09:03,040 --> 00:09:06,160
well business as usual they are

00:09:04,800 --> 00:09:09,600
interested in

00:09:06,160 --> 00:09:11,760
well the growth potential

00:09:09,600 --> 00:09:14,000
and then the other part of the of the

00:09:11,760 --> 00:09:15,920
subtitle of this talk is how that can

00:09:14,000 --> 00:09:17,440
improve your stack so let's talk about

00:09:15,920 --> 00:09:18,880
stack for a while well we all know it's

00:09:17,440 --> 00:09:19,200
tech right it has to do with something

00:09:18,880 --> 00:09:22,800
about

00:09:19,200 --> 00:09:24,320
security and development processes over

00:09:22,800 --> 00:09:25,760
created and who owns that

00:09:24,320 --> 00:09:27,839
intellectual property this is not about

00:09:25,760 --> 00:09:29,920
ipv6 or ipv4

00:09:27,839 --> 00:09:32,160
and about your infrastructure so stake

00:09:29,920 --> 00:09:34,320
it will stick right

00:09:32,160 --> 00:09:36,000
given the fact that this is aligned like

00:09:34,320 --> 00:09:37,519
this and indented a bit probably there's

00:09:36,000 --> 00:09:40,320
something missing which is well

00:09:37,519 --> 00:09:41,360
the continuity the continuity of the

00:09:40,320 --> 00:09:44,160
team

00:09:41,360 --> 00:09:45,360
but also the continuity of well the

00:09:44,160 --> 00:09:47,440
company as a whole

00:09:45,360 --> 00:09:50,399
also the team composition but also the

00:09:47,440 --> 00:09:52,399
culture this is also what i'm going to

00:09:50,399 --> 00:09:53,600
we'll talk about in this in this talk

00:09:52,399 --> 00:09:56,000
actually

00:09:53,600 --> 00:09:57,120
from an engineering management position

00:09:56,000 --> 00:09:58,959
the last part is

00:09:57,120 --> 00:10:01,120
way more interesting than the than the

00:09:58,959 --> 00:10:04,800
upper part as long as the upper part is

00:10:01,120 --> 00:10:08,560
at least somewhat working

00:10:04,800 --> 00:10:09,600
so now we're going to at least go into

00:10:08,560 --> 00:10:11,440
depth on the tech step

00:10:09,600 --> 00:10:12,800
we'll talk about security ip development

00:10:11,440 --> 00:10:15,519
processes and infrastructure

00:10:12,800 --> 00:10:17,200
and this is going to be boring because

00:10:15,519 --> 00:10:18,079
you see the slide a lot of text is here

00:10:17,200 --> 00:10:22,640
so

00:10:18,079 --> 00:10:24,800
the fun thing is um this is on youtube

00:10:22,640 --> 00:10:25,839
i will probably share the pdf of this

00:10:24,800 --> 00:10:29,120
presentation

00:10:25,839 --> 00:10:30,000
uh in some way shape or form so you can

00:10:29,120 --> 00:10:31,839
just read it

00:10:30,000 --> 00:10:33,600
that means i'm just going to gloss over

00:10:31,839 --> 00:10:35,279
them please don't read them

00:10:33,600 --> 00:10:36,800
don't make screenshots i'll share the

00:10:35,279 --> 00:10:39,839
presentation otherwise it's on youtube

00:10:36,800 --> 00:10:42,000
so just do whatever you want with it so

00:10:39,839 --> 00:10:44,160
security let's talk about the gdpr you

00:10:42,000 --> 00:10:47,519
see the top right gdpr.eu

00:10:44,160 --> 00:10:48,560
checklist do it that's all you need to

00:10:47,519 --> 00:10:50,720
know

00:10:48,560 --> 00:10:51,760
then let's talk about security prepare

00:10:50,720 --> 00:10:53,920
for some crackers

00:10:51,760 --> 00:10:55,440
so make sure that you do something like

00:10:53,920 --> 00:10:56,800
xerocopter or hacker1 if you don't know

00:10:55,440 --> 00:10:57,440
what this is about well it's about pen

00:10:56,800 --> 00:11:00,000
testing

00:10:57,440 --> 00:11:00,880
some security uh static security

00:11:00,000 --> 00:11:03,040
analysis

00:11:00,880 --> 00:11:04,560
and some bug bounties potentially just

00:11:03,040 --> 00:11:07,600
an email address is enough

00:11:04,560 --> 00:11:08,880
or how are your servers protected

00:11:07,600 --> 00:11:10,480
against unwanted access

00:11:08,880 --> 00:11:12,240
make sure to do this thing install

00:11:10,480 --> 00:11:14,399
rekkatec install prorate

00:11:12,240 --> 00:11:15,600
install the the linux package fill to

00:11:14,399 --> 00:11:18,480
ban to make sure

00:11:15,600 --> 00:11:20,079
you're just going to i can't say that

00:11:18,480 --> 00:11:21,440
poop list everyone that you don't have

00:11:20,079 --> 00:11:23,839
on your servers

00:11:21,440 --> 00:11:24,720
and then security well this is where

00:11:23,839 --> 00:11:26,800
everything

00:11:24,720 --> 00:11:27,839
after it has gone wrong log everything

00:11:26,800 --> 00:11:29,440
that you're doing

00:11:27,839 --> 00:11:32,720
log the learnings of everything went

00:11:29,440 --> 00:11:36,160
went wrong make sure you do this

00:11:32,720 --> 00:11:38,480
then code hygiene just know

00:11:36,160 --> 00:11:39,440
where is your source code it's probably

00:11:38,480 --> 00:11:42,480
in github

00:11:39,440 --> 00:11:44,880
or gitlab or whatever some ftp server

00:11:42,480 --> 00:11:46,079
uh hosted by yourself like the php

00:11:44,880 --> 00:11:47,920
people used to do

00:11:46,079 --> 00:11:49,279
it sits in your developer laptops it is

00:11:47,920 --> 00:11:50,399
on your staging production servers

00:11:49,279 --> 00:11:52,720
potentially ci

00:11:50,399 --> 00:11:53,680
does your alerting or monitoring server

00:11:52,720 --> 00:11:55,519
knows about your

00:11:53,680 --> 00:11:56,959
software if you have enough errors and

00:11:55,519 --> 00:11:58,480
they have enough stack traces then they

00:11:56,959 --> 00:12:00,320
can rebuild your software

00:11:58,480 --> 00:12:01,839
and are there any forks of your repo so

00:12:00,320 --> 00:12:04,800
make sure to think about this

00:12:01,839 --> 00:12:06,320
and also make sure that your code base

00:12:04,800 --> 00:12:09,440
your code base entire environment

00:12:06,320 --> 00:12:12,800
so let's talk about security

00:12:09,440 --> 00:12:14,160
usually in security roi means risk of

00:12:12,800 --> 00:12:15,600
incarceration if you do things wrong

00:12:14,160 --> 00:12:18,959
with the gdpr

00:12:15,600 --> 00:12:20,959
this is expensive potentially maybe not

00:12:18,959 --> 00:12:23,120
incarceration but

00:12:20,959 --> 00:12:24,160
this is one of the biggest ways how a

00:12:23,120 --> 00:12:25,839
business can feel

00:12:24,160 --> 00:12:27,519
by just following up all the details of

00:12:25,839 --> 00:12:29,279
your customers

00:12:27,519 --> 00:12:31,040
so that was security well that was fast

00:12:29,279 --> 00:12:34,959
let's talk about intellectual property

00:12:31,040 --> 00:12:36,399
right talk to your lawyer yeah lawyer up

00:12:34,959 --> 00:12:38,639
there are things about intellectual

00:12:36,399 --> 00:12:39,360
property that you don't need my advice

00:12:38,639 --> 00:12:41,200
about

00:12:39,360 --> 00:12:42,720
but you're you probably as a company you

00:12:41,200 --> 00:12:43,600
need some advice about it so talk to

00:12:42,720 --> 00:12:47,680
your lawyer

00:12:43,600 --> 00:12:49,360
not a lawyer you're a lawyer pay them

00:12:47,680 --> 00:12:51,360
that was intellectual property nice

00:12:49,360 --> 00:12:53,279
development processes

00:12:51,360 --> 00:12:55,360
so this is how we go from ideation to

00:12:53,279 --> 00:12:56,880
implementation so make sure you order

00:12:55,360 --> 00:12:58,880
your tech debt this is still

00:12:56,880 --> 00:13:00,639
about risk assessment so from dump

00:12:58,880 --> 00:13:02,320
safari to won't fix and just start

00:13:00,639 --> 00:13:04,800
working on the important parts

00:13:02,320 --> 00:13:07,120
reassess all the processes that you have

00:13:04,800 --> 00:13:07,760
before a a request lands in your to-do

00:13:07,120 --> 00:13:10,160
board

00:13:07,760 --> 00:13:11,680
re-assess your team composition do the

00:13:10,160 --> 00:13:12,160
engineers work with the right people are

00:13:11,680 --> 00:13:14,560
they

00:13:12,160 --> 00:13:16,399
very far away from the end user whoever

00:13:14,560 --> 00:13:18,399
that end user is are they really close

00:13:16,399 --> 00:13:21,120
so make sure that you have some process

00:13:18,399 --> 00:13:23,200
set up there improve on it

00:13:21,120 --> 00:13:25,200
but also how tech is used about program

00:13:23,200 --> 00:13:25,839
languages libraries and how current they

00:13:25,200 --> 00:13:29,200
are

00:13:25,839 --> 00:13:30,720
and so the code to test ratio and make

00:13:29,200 --> 00:13:33,040
sure that it's fine for your primary

00:13:30,720 --> 00:13:35,760
processes that is how you solve your

00:13:33,040 --> 00:13:36,320
customer's problems make sure to align

00:13:35,760 --> 00:13:37,680
there

00:13:36,320 --> 00:13:39,120
and then how text created do you do

00:13:37,680 --> 00:13:41,040
extreme programming pair programming

00:13:39,120 --> 00:13:42,959
just pr reviews or not even that

00:13:41,040 --> 00:13:44,399
make sure that you're aware of how

00:13:42,959 --> 00:13:46,079
you're doing it and try to get

00:13:44,399 --> 00:13:48,639
higher up the thing if you want to have

00:13:46,079 --> 00:13:51,199
higher quality software outcome

00:13:48,639 --> 00:13:52,480
also it's more fun by the way um and how

00:13:51,199 --> 00:13:54,079
tech is communicated do you have some

00:13:52,480 --> 00:13:55,519
release notes do you have release notes

00:13:54,079 --> 00:13:57,199
of everything or only the thing

00:13:55,519 --> 00:13:59,600
that you are well very proud for end

00:13:57,199 --> 00:14:01,360
users to ship

00:13:59,600 --> 00:14:03,600
and how current is your documentation

00:14:01,360 --> 00:14:05,839
yeah make sure it cannot lie

00:14:03,600 --> 00:14:06,639
make sure you optimize for the next hire

00:14:05,839 --> 00:14:09,760
they will

00:14:06,639 --> 00:14:13,040
join well unless

00:14:09,760 --> 00:14:14,639
it's not working out so

00:14:13,040 --> 00:14:16,160
other people may decide the strategy

00:14:14,639 --> 00:14:17,920
maybe you will decide the strategy but

00:14:16,160 --> 00:14:19,360
each day makes each team make their own

00:14:17,920 --> 00:14:21,360
operational decision

00:14:19,360 --> 00:14:22,880
so that means the team decides on their

00:14:21,360 --> 00:14:25,120
own tactics yeah

00:14:22,880 --> 00:14:27,120
so strategy the thing that the people up

00:14:25,120 --> 00:14:28,560
there do then you have operations this

00:14:27,120 --> 00:14:30,560
thing that the people with the

00:14:28,560 --> 00:14:31,680
keyboards do and then you have tactics

00:14:30,560 --> 00:14:32,880
how are you going to make sure that we

00:14:31,680 --> 00:14:34,480
are going to meet that strategy by

00:14:32,880 --> 00:14:37,839
having operational processes

00:14:34,480 --> 00:14:39,760
and you can only let the team fix how

00:14:37,839 --> 00:14:41,519
the team is working together which is

00:14:39,760 --> 00:14:43,440
tactics how are we going to put all

00:14:41,519 --> 00:14:45,199
these nice strategies into action

00:14:43,440 --> 00:14:46,720
and how do these things that are not

00:14:45,199 --> 00:14:47,920
working on an operational level

00:14:46,720 --> 00:14:49,760
how are we going to change our

00:14:47,920 --> 00:14:51,839
operational thing so make sure that the

00:14:49,760 --> 00:14:54,639
team decides on their own tactics

00:14:51,839 --> 00:14:56,160
no top level management on how you

00:14:54,639 --> 00:14:59,839
organize

00:14:56,160 --> 00:14:59,839
it doesn't scale

00:15:00,320 --> 00:15:03,680
let's talk about infrastructure that's

00:15:02,320 --> 00:15:06,160
fun

00:15:03,680 --> 00:15:07,680
this is about uh exceptional cases like

00:15:06,160 --> 00:15:10,800
error tracking

00:15:07,680 --> 00:15:13,199
keeping track of outages making sure

00:15:10,800 --> 00:15:14,880
you know you're up time also what

00:15:13,199 --> 00:15:16,000
actually is uptime is it just your home

00:15:14,880 --> 00:15:17,920
page working

00:15:16,000 --> 00:15:19,440
or is it something else deciding what

00:15:17,920 --> 00:15:22,480
uptime actually means for you so before

00:15:19,440 --> 00:15:25,519
you say well we have 99.99

00:15:22,480 --> 00:15:26,880
uptime it should be a meaningful number

00:15:25,519 --> 00:15:29,680
that everyone in your team

00:15:26,880 --> 00:15:30,320
can explain and then your infra does a

00:15:29,680 --> 00:15:32,720
scale

00:15:30,320 --> 00:15:33,920
did you load test your app and are there

00:15:32,720 --> 00:15:35,839
performance models

00:15:33,920 --> 00:15:37,759
bottlenecks and how did they evolve over

00:15:35,839 --> 00:15:40,160
time and what is your server health

00:15:37,759 --> 00:15:41,199
those things are quite quite quite quite

00:15:40,160 --> 00:15:42,720
quite important

00:15:41,199 --> 00:15:43,920
because if you don't know these things

00:15:42,720 --> 00:15:45,279
you don't know if you can scale and

00:15:43,920 --> 00:15:46,959
usually investors are not only

00:15:45,279 --> 00:15:48,079
interested in oh you're doing a nice job

00:15:46,959 --> 00:15:50,720
but also

00:15:48,079 --> 00:15:54,160
make sure you can do that nice job for

00:15:50,720 --> 00:15:55,839
well potentially more customers

00:15:54,160 --> 00:15:57,120
and then whenever it hits the fan make

00:15:55,839 --> 00:15:58,000
sure you have some backup restore

00:15:57,120 --> 00:16:00,160
procedure

00:15:58,000 --> 00:16:02,560
you know how you're hosting so make sure

00:16:00,160 --> 00:16:05,920
you can handle ovh kind of issues

00:16:02,560 --> 00:16:07,040
learn from other people's demise i mean

00:16:05,920 --> 00:16:08,880
it was all

00:16:07,040 --> 00:16:11,199
fun to share their thing in some select

00:16:08,880 --> 00:16:12,079
channels how's your website working

00:16:11,199 --> 00:16:15,279
today

00:16:12,079 --> 00:16:17,759
um but you should just wait another

00:16:15,279 --> 00:16:19,279
few hours after that and just see how

00:16:17,759 --> 00:16:21,279
are they responding to this how

00:16:19,279 --> 00:16:23,120
how can i learn from something that went

00:16:21,279 --> 00:16:24,560
wrong and you probably don't operate

00:16:23,120 --> 00:16:25,360
your own data center but you can learn

00:16:24,560 --> 00:16:27,279
from them

00:16:25,360 --> 00:16:29,440
do it make sure you learn from otherwise

00:16:27,279 --> 00:16:32,240
other people's demise

00:16:29,440 --> 00:16:33,040
well we could talk more about devops so

00:16:32,240 --> 00:16:36,399
is there any

00:16:33,040 --> 00:16:38,720
def qa staging production

00:16:36,399 --> 00:16:39,519
difference make sure to remove

00:16:38,720 --> 00:16:41,600
everything between

00:16:39,519 --> 00:16:43,120
development and production start feature

00:16:41,600 --> 00:16:43,519
flagging and start testing in production

00:16:43,120 --> 00:16:46,320
because

00:16:43,519 --> 00:16:47,600
it makes no sense to fix staging no one

00:16:46,320 --> 00:16:50,000
is using it

00:16:47,600 --> 00:16:50,880
if you can use production to test how do

00:16:50,000 --> 00:16:52,480
you deploy

00:16:50,880 --> 00:16:53,920
how do you auto scale do you even have

00:16:52,480 --> 00:16:55,279
to scale do you want to have the

00:16:53,920 --> 00:16:57,680
headache of

00:16:55,279 --> 00:16:59,199
kubernetes the yamls and whatever if you

00:16:57,680 --> 00:17:02,000
can just do capistrano to

00:16:59,199 --> 00:17:03,279
a data center or potentially two in case

00:17:02,000 --> 00:17:05,919
ovh strikes

00:17:03,279 --> 00:17:08,319
so pick whatever works with as few

00:17:05,919 --> 00:17:11,039
painkillers as possible

00:17:08,319 --> 00:17:12,559
so most important in infrastructure

00:17:11,039 --> 00:17:14,240
never let a good crisis go to waste

00:17:12,559 --> 00:17:15,520
because infrastructure is led by things

00:17:14,240 --> 00:17:17,039
that go wrong

00:17:15,520 --> 00:17:18,959
and i think it was winston churchill who

00:17:17,039 --> 00:17:20,640
said it but there was just a result of

00:17:18,959 --> 00:17:22,720
two seconds of googling so i might be

00:17:20,640 --> 00:17:24,799
wrong here

00:17:22,720 --> 00:17:26,880
so this is about the tech setup now

00:17:24,799 --> 00:17:29,679
let's talk about all those other things

00:17:26,880 --> 00:17:31,360
that i consider stack that i consider

00:17:29,679 --> 00:17:34,000
how you build software that i

00:17:31,360 --> 00:17:35,600
well consider the thing that an investor

00:17:34,000 --> 00:17:38,000
is interested in they are not interested

00:17:35,600 --> 00:17:39,840
in ruby 266 or 267.

00:17:38,000 --> 00:17:41,520
they are not interested in rails five to

00:17:39,840 --> 00:17:44,320
two to

00:17:41,520 --> 00:17:45,200
four to four or five to the fourth two

00:17:44,320 --> 00:17:47,679
or

00:17:45,200 --> 00:17:48,880
six dollars i i honestly they don't care

00:17:47,679 --> 00:17:50,640
as long as it's current

00:17:48,880 --> 00:17:52,000
yeah if if you tell them well it's not

00:17:50,640 --> 00:17:53,919
but the way these plans

00:17:52,000 --> 00:17:55,840
it's good but telling them it's not

00:17:53,919 --> 00:17:57,280
current and we have these plans

00:17:55,840 --> 00:17:59,120
it has nothing to do with your text

00:17:57,280 --> 00:17:59,760
setup it has to do with continuity team

00:17:59,120 --> 00:18:03,280
composition

00:17:59,760 --> 00:18:05,520
and culture so we've been talking about

00:18:03,280 --> 00:18:08,480
risk assessment

00:18:05,520 --> 00:18:10,160
let's do the things that are less boring

00:18:08,480 --> 00:18:15,200
your stack's potential

00:18:10,160 --> 00:18:17,360
this is about team commun uh

00:18:15,200 --> 00:18:18,720
this is about your team's continuity the

00:18:17,360 --> 00:18:19,919
composition and the culture and since

00:18:18,720 --> 00:18:23,200
there is a checkbox

00:18:19,919 --> 00:18:25,120
let's also talk about 10x engineers

00:18:23,200 --> 00:18:26,640
so not only 10x engineers can add

00:18:25,120 --> 00:18:28,320
servers to handle 10x load

00:18:26,640 --> 00:18:30,400
well not only 10x engineers can build

00:18:28,320 --> 00:18:32,320
infrastructure no one understands

00:18:30,400 --> 00:18:34,559
by the way not only 10x engineers can

00:18:32,320 --> 00:18:37,039
secure a website from intruders and also

00:18:34,559 --> 00:18:38,880
not only 10x engineers write code no one

00:18:37,039 --> 00:18:42,000
wants to own

00:18:38,880 --> 00:18:43,919
i mean you can hire me for that

00:18:42,000 --> 00:18:46,320
so let's talk about culture and about

00:18:43,919 --> 00:18:48,640
how a bottom up culture will help you

00:18:46,320 --> 00:18:48,640
grow

00:18:48,720 --> 00:18:52,320
i said before already that you have

00:18:50,640 --> 00:18:54,080
strategy you have operations

00:18:52,320 --> 00:18:55,600
and there in the middle you have that

00:18:54,080 --> 00:18:58,799
layer of tactics

00:18:55,600 --> 00:19:01,600
so make sure that

00:18:58,799 --> 00:19:02,320
that layer of tactics that is how you're

00:19:01,600 --> 00:19:04,320
organized

00:19:02,320 --> 00:19:06,080
how you're set up for success so to say

00:19:04,320 --> 00:19:08,160
that your team members are responsible

00:19:06,080 --> 00:19:09,440
for finding and recording their purposes

00:19:08,160 --> 00:19:10,720
and accountabilities of the work that

00:19:09,440 --> 00:19:14,640
they perform

00:19:10,720 --> 00:19:17,360
i mean it makes only makes sense

00:19:14,640 --> 00:19:18,640
it only makes sense to um i don't know i

00:19:17,360 --> 00:19:24,240
said this correctly

00:19:18,640 --> 00:19:25,840
um have the people solving problems

00:19:24,240 --> 00:19:27,840
uh there's something going wrong with

00:19:25,840 --> 00:19:29,760
the stream it looks like or the camera

00:19:27,840 --> 00:19:31,440
it looks like i'm not entirely sure but

00:19:29,760 --> 00:19:32,480
i don't see myself moving i'm just

00:19:31,440 --> 00:19:34,000
changing

00:19:32,480 --> 00:19:36,000
okay this changes the camera doesn't

00:19:34,000 --> 00:19:37,679
work anymore but that's fine making make

00:19:36,000 --> 00:19:38,799
my presentation full screen we'll we'll

00:19:37,679 --> 00:19:41,200
solve this later

00:19:38,799 --> 00:19:42,880
and make the team members responsible

00:19:41,200 --> 00:19:44,000
for finding and recording the purpose

00:19:42,880 --> 00:19:44,640
and accountability of the work they

00:19:44,000 --> 00:19:46,720
perform

00:19:44,640 --> 00:19:48,320
and completely of my game at the moment

00:19:46,720 --> 00:19:50,320
um this means that

00:19:48,320 --> 00:19:51,679
whenever you find something while

00:19:50,320 --> 00:19:53,360
performing the work

00:19:51,679 --> 00:19:55,280
the operational part of your work that

00:19:53,360 --> 00:19:55,600
you make a make a mental note every time

00:19:55,280 --> 00:19:57,360
your

00:19:55,600 --> 00:19:58,720
eyebrows go up not because of code

00:19:57,360 --> 00:20:00,480
smells but because of

00:19:58,720 --> 00:20:01,919
work smells things that don't work and

00:20:00,480 --> 00:20:02,559
make a mental note and think well what

00:20:01,919 --> 00:20:05,520
is my

00:20:02,559 --> 00:20:06,000
purpose why am i doing this and make a

00:20:05,520 --> 00:20:08,159
mental note

00:20:06,000 --> 00:20:10,240
what is my accountability what should i

00:20:08,159 --> 00:20:11,840
do to perform that purpose what should i

00:20:10,240 --> 00:20:14,240
do to make this work

00:20:11,840 --> 00:20:16,240
and then make sure that there is some

00:20:14,240 --> 00:20:16,960
some culture where you can learn from

00:20:16,240 --> 00:20:20,000
every time

00:20:16,960 --> 00:20:22,960
your your your your eyebrows

00:20:20,000 --> 00:20:24,400
go up so connect these purposes and

00:20:22,960 --> 00:20:26,240
accountabilities that the team members

00:20:24,400 --> 00:20:28,799
themselves found

00:20:26,240 --> 00:20:30,320
into well you can call them rules make

00:20:28,799 --> 00:20:31,760
them visible for the whole organization

00:20:30,320 --> 00:20:32,400
and connect them to the team members

00:20:31,760 --> 00:20:34,720
that actually

00:20:32,400 --> 00:20:35,840
engage in those actions who energize

00:20:34,720 --> 00:20:37,440
those rules

00:20:35,840 --> 00:20:39,520
i stole that terminology by the way from

00:20:37,440 --> 00:20:42,559
holocracy

00:20:39,520 --> 00:20:45,200
so then

00:20:42,559 --> 00:20:45,760
you have those rules but then something

00:20:45,200 --> 00:20:47,679
happens

00:20:45,760 --> 00:20:49,760
maybe it's a working from home thing

00:20:47,679 --> 00:20:51,360
that is happening for everyone

00:20:49,760 --> 00:20:52,880
or maybe there's just a change in your

00:20:51,360 --> 00:20:55,200
business you're not only

00:20:52,880 --> 00:20:56,640
going to focus on fashion for for women

00:20:55,200 --> 00:20:57,600
but you're going to focus on fashion for

00:20:56,640 --> 00:20:59,600
men as well

00:20:57,600 --> 00:21:01,200
or you're going to have an international

00:20:59,600 --> 00:21:02,480
strategy that is different than just the

00:21:01,200 --> 00:21:04,159
netherlands and belgium

00:21:02,480 --> 00:21:05,840
and then your roles your

00:21:04,159 --> 00:21:09,840
accountabilities and your purposes

00:21:05,840 --> 00:21:12,240
might change so record them

00:21:09,840 --> 00:21:13,280
iterate on them at least on a bi-weekly

00:21:12,240 --> 00:21:14,960
basis

00:21:13,280 --> 00:21:16,559
so new journalists can follow suit

00:21:14,960 --> 00:21:17,360
because there will be just appointed

00:21:16,559 --> 00:21:19,039
rules

00:21:17,360 --> 00:21:20,559
you can talk about purpose and you can

00:21:19,039 --> 00:21:24,640
talk about

00:21:20,559 --> 00:21:26,000
accountabilities so an example

00:21:24,640 --> 00:21:27,520
so there's a team member that wants to

00:21:26,000 --> 00:21:28,799
join the hiring process well let them

00:21:27,520 --> 00:21:29,679
make a role for that with a purpose and

00:21:28,799 --> 00:21:32,559
accountability

00:21:29,679 --> 00:21:33,679
and hold them to it i mean they decided

00:21:32,559 --> 00:21:35,280
what their accountability and the

00:21:33,679 --> 00:21:37,120
purpose of that role is after well

00:21:35,280 --> 00:21:38,880
working in it after being doing some

00:21:37,120 --> 00:21:40,240
some things in in hiring

00:21:38,880 --> 00:21:42,640
they have an idea for what the purpose

00:21:40,240 --> 00:21:44,720
and accountabilities are

00:21:42,640 --> 00:21:46,640
and if anyone notices either the

00:21:44,720 --> 00:21:48,480
engineering manager or the team member

00:21:46,640 --> 00:21:50,080
if they notice a mission mismatch

00:21:48,480 --> 00:21:51,760
between the role and the reality

00:21:50,080 --> 00:21:55,840
we'll have the people that own that role

00:21:51,760 --> 00:21:58,400
change it to better match the reality

00:21:55,840 --> 00:21:59,600
so now we've talked about rule purpose

00:21:58,400 --> 00:22:02,480
and accountability

00:21:59,600 --> 00:22:02,960
that is how you organically grow your

00:22:02,480 --> 00:22:05,039
well

00:22:02,960 --> 00:22:07,600
working together culture so to say now

00:22:05,039 --> 00:22:10,159
let's talk about hiring

00:22:07,600 --> 00:22:11,200
so use the rules that well are hard to

00:22:10,159 --> 00:22:12,799
fulfill because of

00:22:11,200 --> 00:22:14,320
other priorities but they are important

00:22:12,799 --> 00:22:16,960
to your business

00:22:14,320 --> 00:22:18,720
or roles that are unclear to drive your

00:22:16,960 --> 00:22:20,240
team's education so use those rules to

00:22:18,720 --> 00:22:23,360
drive your hiring but also

00:22:20,240 --> 00:22:24,880
drive your team's education so it's not

00:22:23,360 --> 00:22:26,400
only about hiring it's about hiring and

00:22:24,880 --> 00:22:28,159
training um

00:22:26,400 --> 00:22:30,080
and make sure that in the hiring process

00:22:28,159 --> 00:22:32,880
you get rid of interviewer bias

00:22:30,080 --> 00:22:33,760
make sure you don't end up with copies

00:22:32,880 --> 00:22:37,120
of yourself

00:22:33,760 --> 00:22:38,720
because that sucks because eventually

00:22:37,120 --> 00:22:40,559
you are going to figure out that this

00:22:38,720 --> 00:22:41,600
group of humans will just solve their

00:22:40,559 --> 00:22:44,720
own problems and

00:22:41,600 --> 00:22:46,320
potentially not potentially that does

00:22:44,720 --> 00:22:50,480
not align with your

00:22:46,320 --> 00:22:52,799
end users so

00:22:50,480 --> 00:22:54,960
make sure you train your colleagues make

00:22:52,799 --> 00:22:56,880
sure if you're just a colleague and

00:22:54,960 --> 00:22:58,960
not an engineering manager if you're

00:22:56,880 --> 00:23:01,360
just well operating uh

00:22:58,960 --> 00:23:04,559
working in in on code each day and every

00:23:01,360 --> 00:23:06,960
day make sure you receive some training

00:23:04,559 --> 00:23:08,320
because you can always grow the worst

00:23:06,960 --> 00:23:10,159
thing that can happen to an engineer

00:23:08,320 --> 00:23:11,760
staying on their okay plateau it's not

00:23:10,159 --> 00:23:13,760
fun you don't feel

00:23:11,760 --> 00:23:14,799
valued and eventually you're just going

00:23:13,760 --> 00:23:15,919
to look somewhere else

00:23:14,799 --> 00:23:17,840
and then you're going to figure out that

00:23:15,919 --> 00:23:20,960
you did the same thing over the last

00:23:17,840 --> 00:23:23,200
two months two years even

00:23:20,960 --> 00:23:24,960
so but what happens if you train your

00:23:23,200 --> 00:23:27,039
colleagues and they leave

00:23:24,960 --> 00:23:28,240
well what happens if you don't and they

00:23:27,039 --> 00:23:31,360
stay

00:23:28,240 --> 00:23:33,600
that is a worse position to be in so

00:23:31,360 --> 00:23:34,640
let's not talk about hiring and training

00:23:33,600 --> 00:23:36,880
any longer

00:23:34,640 --> 00:23:39,360
let's talk about action action that is

00:23:36,880 --> 00:23:41,679
something that can be done with agility

00:23:39,360 --> 00:23:42,640
and in some conversation people will use

00:23:41,679 --> 00:23:46,000
agility or

00:23:42,640 --> 00:23:49,440
agile as if it is a verb

00:23:46,000 --> 00:23:53,600
interchange with action but

00:23:49,440 --> 00:23:58,240
should they be mixed up i don't know

00:23:53,600 --> 00:23:58,240
so i remember working with an engineer

00:23:58,640 --> 00:24:02,240
in a slow deciding organization and that

00:24:00,720 --> 00:24:05,840
engineer said when in doubt

00:24:02,240 --> 00:24:08,559
always take action but action

00:24:05,840 --> 00:24:08,559
does not scale

00:24:09,200 --> 00:24:13,120
i know it doesn't sound as seductive as

00:24:11,360 --> 00:24:16,640
action but processes do

00:24:13,120 --> 00:24:20,320
scale but yeah

00:24:16,640 --> 00:24:21,200
so if action equals agile then process

00:24:20,320 --> 00:24:24,159
equals lean

00:24:21,200 --> 00:24:24,960
so lean is about thinking agile is about

00:24:24,159 --> 00:24:27,679
acting

00:24:24,960 --> 00:24:28,559
so don't just be agile with everything

00:24:27,679 --> 00:24:31,120
because

00:24:28,559 --> 00:24:33,039
well if you're going to build a cupboard

00:24:31,120 --> 00:24:34,880
you're first going to make some measures

00:24:33,039 --> 00:24:36,240
measurements on the wood before you

00:24:34,880 --> 00:24:37,760
start getting your saw

00:24:36,240 --> 00:24:39,360
out and then you're going to check your

00:24:37,760 --> 00:24:40,799
measures against your

00:24:39,360 --> 00:24:42,400
drawing that you have of your the copper

00:24:40,799 --> 00:24:44,000
that you're building and then and only

00:24:42,400 --> 00:24:46,000
then you're going to use that sole

00:24:44,000 --> 00:24:47,520
because otherwise you just end up with

00:24:46,000 --> 00:24:49,840
well short pieces of wood

00:24:47,520 --> 00:24:51,200
that will make a fantastic bonfire but

00:24:49,840 --> 00:24:52,720
you won't end up with it

00:24:51,200 --> 00:24:54,799
with that with that card that you're

00:24:52,720 --> 00:24:58,240
looking for so think first

00:24:54,799 --> 00:25:00,880
to make sure you can act faster so

00:24:58,240 --> 00:25:02,480
when in doubt formulate a process which

00:25:00,880 --> 00:25:06,000
doesn't sound seductive

00:25:02,480 --> 00:25:07,120
at all so process over action this is

00:25:06,000 --> 00:25:08,480
not about running

00:25:07,120 --> 00:25:10,000
this is about understanding when you

00:25:08,480 --> 00:25:12,000
should run but also when you should just

00:25:10,000 --> 00:25:15,600
hold and just

00:25:12,000 --> 00:25:17,919
think make a decision and just

00:25:15,600 --> 00:25:20,080
not let well action take the better part

00:25:17,919 --> 00:25:22,559
of you but always let your strategy

00:25:20,080 --> 00:25:25,200
deal with which direction you're taking

00:25:22,559 --> 00:25:27,600
and you can only make the right decision

00:25:25,200 --> 00:25:29,039
if you know that you can well that you

00:25:27,600 --> 00:25:31,360
are backed by a process

00:25:29,039 --> 00:25:34,240
a process that will dictate action but

00:25:31,360 --> 00:25:34,240
it can be changed

00:25:34,559 --> 00:25:38,960
anyway so underpinning all of your

00:25:37,679 --> 00:25:43,600
growth ideas

00:25:38,960 --> 00:25:46,400
is going to be process over actions

00:25:43,600 --> 00:25:48,080
so we're getting at t to the end of this

00:25:46,400 --> 00:25:50,000
presentation so flooring right out is

00:25:48,080 --> 00:25:52,000
the moment that you get a glass of water

00:25:50,000 --> 00:25:53,919
and you just sip on it because you'll be

00:25:52,000 --> 00:25:55,679
in this stream in a few minutes

00:25:53,919 --> 00:25:57,039
the first thing that you're going to do

00:25:55,679 --> 00:25:58,960
if an investor comes by

00:25:57,039 --> 00:26:00,480
is remove the skeletons from the closet

00:25:58,960 --> 00:26:02,720
or at least make them visible where they

00:26:00,480 --> 00:26:05,440
are because they care about it

00:26:02,720 --> 00:26:07,600
but before that you do step zero you

00:26:05,440 --> 00:26:10,000
create a process to scale your culture

00:26:07,600 --> 00:26:10,799
and you iterate in these processes these

00:26:10,000 --> 00:26:12,240
processes

00:26:10,799 --> 00:26:15,039
are going to make it possible for you to

00:26:12,240 --> 00:26:15,919
grow even before the investment round is

00:26:15,039 --> 00:26:17,360
over

00:26:15,919 --> 00:26:19,120
by the way the investment round of the

00:26:17,360 --> 00:26:20,640
next visit isn't over so i don't know

00:26:19,120 --> 00:26:23,679
where we're going

00:26:20,640 --> 00:26:26,559
and then eventually profit i hope

00:26:23,679 --> 00:26:29,200
and with that we reached the end of this

00:26:26,559 --> 00:26:32,159
presentation and i hope i did it

00:26:29,200 --> 00:26:33,919
under 20 minutes i'm just starting a

00:26:32,159 --> 00:26:36,240
laptop now to see if i can

00:26:33,919 --> 00:26:38,720
connect with the camera again floor

00:26:36,240 --> 00:26:38,720
writer

00:26:41,600 --> 00:26:48,000
i love the casual dhh meme that you

00:26:44,720 --> 00:26:52,400
put in that for last slide did i

00:26:48,000 --> 00:26:54,720
you did unknowingly well maybe it's it

00:26:52,400 --> 00:26:56,320
becomes so ingrained in you know what we

00:26:54,720 --> 00:26:59,039
say the question mark versus

00:26:56,320 --> 00:26:59,039
christian workforce

00:26:59,760 --> 00:27:05,440
anyway anyway we should have prepared

00:27:03,679 --> 00:27:09,200
this but we didn't

00:27:05,440 --> 00:27:09,200
i love also how you're still frozen

00:27:10,240 --> 00:27:14,320
it's going to be okay you should do the

00:27:12,720 --> 00:27:15,840
thing with papa's right i mean this is

00:27:14,320 --> 00:27:19,360
fantastic

00:27:15,840 --> 00:27:20,159
thanks dog for this wonderful banner um

00:27:19,360 --> 00:27:21,679
yes

00:27:20,159 --> 00:27:23,360
i don't know thanks for this talk i

00:27:21,679 --> 00:27:24,960
liked it a lot i need a checklist of

00:27:23,360 --> 00:27:25,279
this and i need a blog about this and i

00:27:24,960 --> 00:27:27,679
know

00:27:25,279 --> 00:27:31,200
you know it's your course about this you

00:27:27,679 --> 00:27:31,200
call this youtube and it's on youtube

00:27:31,360 --> 00:27:35,760
but you know and then then i need to i

00:27:33,679 --> 00:27:37,679
know that you can like speed up

00:27:35,760 --> 00:27:39,279
how how fast someone talks but i need to

00:27:37,679 --> 00:27:40,480
like slow you down a little bit yeah

00:27:39,279 --> 00:27:41,919
i mean this is not a real life

00:27:40,480 --> 00:27:42,880
presentation there is no moment where i

00:27:41,919 --> 00:27:44,799
say this is where you get to take

00:27:42,880 --> 00:27:47,200
pictures i mean the thing is on youtube

00:27:44,799 --> 00:27:48,240
come on that's true just stop it all the

00:27:47,200 --> 00:27:51,440
time be like yes

00:27:48,240 --> 00:27:55,840
yes and just mute it

00:27:51,440 --> 00:27:58,480
as well anyway

00:27:55,840 --> 00:28:00,159
we have a couple of questions right we

00:27:58,480 --> 00:28:02,159
have a couple of questions yes

00:28:00,159 --> 00:28:03,679
and or comments do you wanna do you

00:28:02,159 --> 00:28:07,039
wanna do you wanna start

00:28:03,679 --> 00:28:07,440
i thought yeah let me read up the the

00:28:07,039 --> 00:28:10,960
chat

00:28:07,440 --> 00:28:11,679
um okay so is this rather learning from

00:28:10,960 --> 00:28:13,840
mistakes

00:28:11,679 --> 00:28:15,760
or what percentage of the points you

00:28:13,840 --> 00:28:17,279
mentioned that you anticipate or have in

00:28:15,760 --> 00:28:20,640
place

00:28:17,279 --> 00:28:22,640
so um the fun thing is by the way

00:28:20,640 --> 00:28:24,320
streamier doesn't allow me it doesn't

00:28:22,640 --> 00:28:26,159
allow us to remove me from the stream

00:28:24,320 --> 00:28:28,880
because you can't hear me then anymore

00:28:26,159 --> 00:28:29,360
this is really annoying anyway so um we

00:28:28,880 --> 00:28:32,720
have a

00:28:29,360 --> 00:28:35,600
uh i think 568-page document about

00:28:32,720 --> 00:28:37,440
the i.t due diligence as it's called and

00:28:35,600 --> 00:28:38,080
all these points directly come from

00:28:37,440 --> 00:28:39,520
there

00:28:38,080 --> 00:28:41,360
from the questions that we asked

00:28:39,520 --> 00:28:43,200
ourselves in preparation from the

00:28:41,360 --> 00:28:46,480
comments that the

00:28:43,200 --> 00:28:47,919
it team that was reviewing us was making

00:28:46,480 --> 00:28:49,840
from questions that investors were

00:28:47,919 --> 00:28:51,520
asking and as usual

00:28:49,840 --> 00:28:53,360
there's just one way to learn and it's

00:28:51,520 --> 00:28:56,720
usually at the moment that you're

00:28:53,360 --> 00:28:58,399
well struggling to get up again if that

00:28:56,720 --> 00:29:01,200
answers the question

00:28:58,399 --> 00:29:01,919
so yes did you say that you learned from

00:29:01,200 --> 00:29:04,399
other people's

00:29:01,919 --> 00:29:05,200
experience uh going through oh yeah

00:29:04,399 --> 00:29:07,279
clearly because

00:29:05,200 --> 00:29:08,480
we've been we've we've received help and

00:29:07,279 --> 00:29:11,840
accompanied by an

00:29:08,480 --> 00:29:12,799
uh i.t specialist who is quite good at

00:29:11,840 --> 00:29:15,039
uh doing tech

00:29:12,799 --> 00:29:16,960
uh due diligence or i.t due diligences

00:29:15,039 --> 00:29:20,000
yeah instead of plural i don't know

00:29:16,960 --> 00:29:21,840
um and so all the hard questions were

00:29:20,000 --> 00:29:24,640
asked and we just had to think about it

00:29:21,840 --> 00:29:26,000
hard and answer them so uh clearly it's

00:29:24,640 --> 00:29:27,200
just like open source over

00:29:26,000 --> 00:29:28,559
that's also why i'm sharing it with the

00:29:27,200 --> 00:29:30,720
community i'm standing on the shoulders

00:29:28,559 --> 00:29:32,880
of giants i didn't i didn't in

00:29:30,720 --> 00:29:34,159
invent all these things clearly not i'm

00:29:32,880 --> 00:29:36,080
not that smart come on

00:29:34,159 --> 00:29:37,360
i can just follow a plan or create a

00:29:36,080 --> 00:29:40,880
process to follow a plan

00:29:37,360 --> 00:29:42,640
but these questions that are behind all

00:29:40,880 --> 00:29:45,360
the things in these slides they are

00:29:42,640 --> 00:29:45,919
actually they're all about how we were

00:29:45,360 --> 00:29:49,039
just

00:29:45,919 --> 00:29:52,080
well um well how how how the skeletons

00:29:49,039 --> 00:29:54,480
have been pulled out of our closet

00:29:52,080 --> 00:29:56,240
yeah exactly we still have a few in them

00:29:54,480 --> 00:29:57,679
but the potential investors know about

00:29:56,240 --> 00:30:00,640
them they're happy with that

00:29:57,679 --> 00:30:02,480
that we acknowledge that they're there

00:30:00,640 --> 00:30:06,480
exactly they're always there so

00:30:02,480 --> 00:30:06,480
yeah potentially even at microsoft

00:30:06,720 --> 00:30:10,480
i don't know no comments yes

00:30:11,600 --> 00:30:17,600
i have another question for you um so

00:30:15,200 --> 00:30:18,399
how do you decide per meeting with

00:30:17,600 --> 00:30:21,919
investor

00:30:18,399 --> 00:30:22,320
with the investor or investors how deep

00:30:21,919 --> 00:30:25,120
you

00:30:22,320 --> 00:30:27,039
you go into technical people when you

00:30:25,120 --> 00:30:30,640
want to sort of like

00:30:27,039 --> 00:30:30,640
keep it a little bit superficial

00:30:31,600 --> 00:30:35,039
wait what do you mean like how do you

00:30:33,679 --> 00:30:36,240
know when you're in an investor

00:30:35,039 --> 00:30:37,840
conversation how

00:30:36,240 --> 00:30:39,360
how deep you can go because you

00:30:37,840 --> 00:30:40,000
mentioned like maybe you don't want to

00:30:39,360 --> 00:30:42,399
be like

00:30:40,000 --> 00:30:44,240
over on ruby and then i don't know how

00:30:42,399 --> 00:30:47,440
many decimals yeah you know

00:30:44,240 --> 00:30:48,840
uh oh i love this yes from multiple

00:30:47,440 --> 00:30:51,200
angles

00:30:48,840 --> 00:30:54,399
uh please mute me yes

00:30:51,200 --> 00:30:55,919
thank you um well uh clearly the

00:30:54,399 --> 00:30:57,440
questions are going to be asked and you

00:30:55,919 --> 00:30:59,039
you prepare for this i mean

00:30:57,440 --> 00:31:00,799
you don't show up at the job interview

00:30:59,039 --> 00:31:03,039
unprepared you at least research the

00:31:00,799 --> 00:31:06,480
company and when you go into

00:31:03,039 --> 00:31:08,399
an i.t due diligence is like going on a

00:31:06,480 --> 00:31:10,399
conversation for a new job but then

00:31:08,399 --> 00:31:13,120
actually for the whole company

00:31:10,399 --> 00:31:13,760
so if you don't prepare like you would

00:31:13,120 --> 00:31:17,120
prepare

00:31:13,760 --> 00:31:18,960
your um job interview

00:31:17,120 --> 00:31:20,799
then you're doing it wrong you should

00:31:18,960 --> 00:31:23,279
prepare at least better than that so

00:31:20,799 --> 00:31:25,600
uh if you if you show up unprepared you

00:31:23,279 --> 00:31:29,279
potentially will not get that investment

00:31:25,600 --> 00:31:32,559
uh fixed i should just

00:31:29,279 --> 00:31:35,519
look here i guess okay thank you

00:31:32,559 --> 00:31:36,240
um we have a question from the community

00:31:35,519 --> 00:31:39,679
from uh in

00:31:36,240 --> 00:31:41,440
our slack from uh mouth to arno

00:31:39,679 --> 00:31:43,440
do you have any thoughts on the ratio in

00:31:41,440 --> 00:31:44,960
training the team on computer related

00:31:43,440 --> 00:31:47,840
skills versus on

00:31:44,960 --> 00:31:47,840
soft skills

00:31:50,559 --> 00:31:56,799
so how i would decide on on

00:31:53,679 --> 00:31:59,600
on training on software skills or i.t or

00:31:56,799 --> 00:32:00,799
development software development skills

00:31:59,600 --> 00:32:02,720
i'm hoping

00:32:00,799 --> 00:32:06,080
that the team members are smart enough

00:32:02,720 --> 00:32:07,679
to figure out what they do not know

00:32:06,080 --> 00:32:09,440
if if i'm going to tell them that they

00:32:07,679 --> 00:32:11,760
are doing it wrong i'm doing it wrong as

00:32:09,440 --> 00:32:14,080
an engineering manager i guess

00:32:11,760 --> 00:32:15,039
but yeah we should we should be talking

00:32:14,080 --> 00:32:17,600
about things we should

00:32:15,039 --> 00:32:18,799
i should be able to um enable my

00:32:17,600 --> 00:32:21,120
colleagues to

00:32:18,799 --> 00:32:23,120
uh not only work on an operational level

00:32:21,120 --> 00:32:25,600
but also on a on a technical level

00:32:23,120 --> 00:32:27,360
and it's hard i mean um i've been in

00:32:25,600 --> 00:32:28,640
meetings in and out where i was hoping

00:32:27,360 --> 00:32:31,440
for my team members to

00:32:28,640 --> 00:32:32,240
bring points to the agenda and it's hard

00:32:31,440 --> 00:32:34,159
because

00:32:32,240 --> 00:32:36,000
they're afraid because i'm very strict

00:32:34,159 --> 00:32:38,000
at what we can discuss about in

00:32:36,000 --> 00:32:39,519
in meetings that they're doing it wrong

00:32:38,000 --> 00:32:40,240
and i understand that they're afraid of

00:32:39,519 --> 00:32:43,519
that

00:32:40,240 --> 00:32:44,480
um but yeah i should train them in how

00:32:43,519 --> 00:32:46,080
to make sure that they

00:32:44,480 --> 00:32:47,600
think so much about how they perform

00:32:46,080 --> 00:32:48,240
their work that they can that they can

00:32:47,600 --> 00:32:50,000
fix it

00:32:48,240 --> 00:32:51,919
and for some people it's easier than

00:32:50,000 --> 00:32:54,960
than for others um

00:32:51,919 --> 00:32:57,200
but yeah it's you should just have an

00:32:54,960 --> 00:32:58,480
education budget that you can decide on

00:32:57,200 --> 00:33:00,159
on your own

00:32:58,480 --> 00:33:02,000
and then in my previous job at we

00:33:00,159 --> 00:33:02,640
transfer i had a colleague and he had

00:33:02,000 --> 00:33:05,760
already

00:33:02,640 --> 00:33:07,279
finished in a barista course i said look

00:33:05,760 --> 00:33:08,880
i wasn't your manager then but if you're

00:33:07,279 --> 00:33:10,080
going to do a barista course and i'm

00:33:08,880 --> 00:33:11,279
going to approve it that means that

00:33:10,080 --> 00:33:12,240
you're going to make me coffee for a

00:33:11,279 --> 00:33:14,159
full year

00:33:12,240 --> 00:33:16,159
i mean if i if you want to go on a

00:33:14,159 --> 00:33:16,880
mongodb course it was not the case that

00:33:16,159 --> 00:33:18,960
we transfer

00:33:16,880 --> 00:33:21,279
then i i'm just assuming that you're

00:33:18,960 --> 00:33:22,799
going to do mongodb things for a year at

00:33:21,279 --> 00:33:23,919
least so if you're going to do a coffee

00:33:22,799 --> 00:33:24,480
thing then you're going to make my

00:33:23,919 --> 00:33:26,399
coffee

00:33:24,480 --> 00:33:28,080
so is it fair to assume that your

00:33:26,399 --> 00:33:30,080
engineering manager

00:33:28,080 --> 00:33:32,159
should have like a growth plan ready for

00:33:30,080 --> 00:33:34,640
you as a developer

00:33:32,159 --> 00:33:38,399
with both soft skills and technical

00:33:34,640 --> 00:33:40,559
skills where you can grow into

00:33:38,399 --> 00:33:42,240
is more than just a technical person and

00:33:40,559 --> 00:33:45,440
a coder

00:33:42,240 --> 00:33:48,000
well either that are you just going to

00:33:45,440 --> 00:33:49,519
to spend a lot of money that you could

00:33:48,000 --> 00:33:51,279
spend on growing your team members and

00:33:49,519 --> 00:33:53,840
you're going to spend it on hiring their

00:33:51,279 --> 00:33:53,840
replacement

00:33:55,279 --> 00:33:59,279
you didn't want to hear that right no

00:33:56,960 --> 00:33:59,600
i'm just like we're gonna let that sink

00:33:59,279 --> 00:34:02,880
in

00:33:59,600 --> 00:34:02,880
a little bit okay sorry

00:34:03,360 --> 00:34:09,599
i i have i love this more of a comment

00:34:07,440 --> 00:34:13,040
not really a question from dj

00:34:09,599 --> 00:34:16,240
um who says that it is it is

00:34:13,040 --> 00:34:18,159
wise to track down time not only uptime

00:34:16,240 --> 00:34:20,800
uh and track the time of day that you

00:34:18,159 --> 00:34:22,960
experience downtime because those many

00:34:20,800 --> 00:34:25,839
nines mean nothing if down time

00:34:22,960 --> 00:34:26,399
is at a business critical time what for

00:34:25,839 --> 00:34:29,520
you

00:34:26,399 --> 00:34:32,000
are now uh

00:34:29,520 --> 00:34:33,599
yeah we should probably do that no the

00:34:32,000 --> 00:34:37,119
yeah this is

00:34:33,599 --> 00:34:40,399
so i see that yeah i'm taking notes

00:34:37,119 --> 00:34:42,240
of course i i i'm learning here

00:34:40,399 --> 00:34:43,599
yeah not only how to present but also to

00:34:42,240 --> 00:34:47,200
do the right thing yeah

00:34:43,599 --> 00:34:48,399
so sure it's quite important to notice

00:34:47,200 --> 00:34:49,839
your uptime and your downtime and you

00:34:48,399 --> 00:34:51,919
should take note on whether it's a

00:34:49,839 --> 00:34:54,000
business critical moment and if you are

00:34:51,919 --> 00:34:55,119
well spent all over the globe then any

00:34:54,000 --> 00:34:59,440
moment of downtime

00:34:55,119 --> 00:35:01,680
is is bad but we're a

00:34:59,440 --> 00:35:04,160
currently we have a website that is used

00:35:01,680 --> 00:35:08,560
during lunch breaks and in the evening

00:35:04,160 --> 00:35:10,640
to shop for a nice designer items

00:35:08,560 --> 00:35:12,160
so the best moment we can have outage is

00:35:10,640 --> 00:35:13,680
just during the working day which is

00:35:12,160 --> 00:35:14,480
fantastic because all the engineers are

00:35:13,680 --> 00:35:16,240
present

00:35:14,480 --> 00:35:17,760
i mean you want to do a risky database

00:35:16,240 --> 00:35:20,560
migration sure it's

00:35:17,760 --> 00:35:21,599
uh 3pm let's do it now let's not do it

00:35:20,560 --> 00:35:24,240
in the middle of the night i mean

00:35:21,599 --> 00:35:25,359
we could better even do it at 3am but

00:35:24,240 --> 00:35:27,440
then you have another problem

00:35:25,359 --> 00:35:29,280
it means people have to wake up and i

00:35:27,440 --> 00:35:30,079
remember from doing database migrations

00:35:29,280 --> 00:35:32,640
at my previous

00:35:30,079 --> 00:35:33,440
job that fat finger controls here does

00:35:32,640 --> 00:35:36,720
those moments

00:35:33,440 --> 00:35:36,720
i don't you shouldn't do that

00:35:37,440 --> 00:35:42,720
okay i hope that solved that to answer

00:35:39,680 --> 00:35:42,720
your question uh thank you

00:35:43,280 --> 00:35:47,200
we can only hope um

00:35:47,280 --> 00:35:51,599
from the chat there was also a less of

00:35:49,440 --> 00:35:53,280
uh fix fixture hiring or

00:35:51,599 --> 00:35:55,359
some of the other super valid points

00:35:53,280 --> 00:35:57,920
that you made aside from

00:35:55,359 --> 00:36:00,240
security and ip thank you thank you

00:35:57,920 --> 00:36:00,240
thank you

00:36:00,720 --> 00:36:05,280
but they recall uh sort of the hyper

00:36:02,880 --> 00:36:07,440
focus also on daily or monthly active

00:36:05,280 --> 00:36:10,079
users or customer lifetime value

00:36:07,440 --> 00:36:11,839
um so how did you how did you were your

00:36:10,079 --> 00:36:12,160
investors maybe less interested in that

00:36:11,839 --> 00:36:14,000
or

00:36:12,160 --> 00:36:15,359
is that or how did you deal with those

00:36:14,000 --> 00:36:18,640
kind of questions

00:36:15,359 --> 00:36:20,720
so um i'm just looking at my slides here

00:36:18,640 --> 00:36:23,119
so the thing is

00:36:20,720 --> 00:36:24,880
i've been talking to you about the i.t

00:36:23,119 --> 00:36:26,400
due diligence

00:36:24,880 --> 00:36:28,000
i haven't been drawn to you about our

00:36:26,400 --> 00:36:30,320
marketing due diligence then

00:36:28,000 --> 00:36:32,320
words like mao and dao daily active

00:36:30,320 --> 00:36:34,880
users and monthly active users come by

00:36:32,320 --> 00:36:35,839
and we talk about cogs which is the cost

00:36:34,880 --> 00:36:38,160
of goods sold

00:36:35,839 --> 00:36:39,680
in gmv which is something that mimics

00:36:38,160 --> 00:36:43,200
revenue and all those words

00:36:39,680 --> 00:36:45,839
i wasn't involved in them from an id

00:36:43,200 --> 00:36:46,320
perspective so clearly you're going to

00:36:45,839 --> 00:36:48,720
have

00:36:46,320 --> 00:36:50,240
due diligence for these things as well

00:36:48,720 --> 00:36:50,880
so if you're an engineer but you're also

00:36:50,240 --> 00:36:52,640
working

00:36:50,880 --> 00:36:54,000
hardcore in marketing you'll find those

00:36:52,640 --> 00:36:54,320
things but you will not learn them from

00:36:54,000 --> 00:36:58,240
me

00:36:54,320 --> 00:37:00,000
not today okay

00:36:58,240 --> 00:37:01,680
but i'm happy to learn from you so feel

00:37:00,000 --> 00:37:03,280
free to pick the mic

00:37:01,680 --> 00:37:04,640
in some next meetup and talk about how

00:37:03,280 --> 00:37:05,920
to do a due diligence of the whole

00:37:04,640 --> 00:37:08,800
company

00:37:05,920 --> 00:37:09,599
me no anyone i mean someone asked this

00:37:08,800 --> 00:37:10,880
question

00:37:09,599 --> 00:37:12,880
ah if this is your rule and you're

00:37:10,880 --> 00:37:14,800
interested in the answer share it when

00:37:12,880 --> 00:37:18,000
you've learned it

00:37:14,800 --> 00:37:19,760
okay cool um i think we have a

00:37:18,000 --> 00:37:21,119
time for one more question looking at

00:37:19,760 --> 00:37:23,680
the time here

00:37:21,119 --> 00:37:25,839
um so from the chat you talked about

00:37:23,680 --> 00:37:28,640
processes and documentation

00:37:25,839 --> 00:37:29,119
so do you have like a confluence or

00:37:28,640 --> 00:37:31,280
another

00:37:29,119 --> 00:37:32,160
doxify i don't know anything where this

00:37:31,280 --> 00:37:34,000
all is stored

00:37:32,160 --> 00:37:35,920
that is not yeah i use the word

00:37:34,000 --> 00:37:37,119
confluence in there to just annoy the

00:37:35,920 --> 00:37:40,480
enterprising people

00:37:37,119 --> 00:37:44,000
in our audience i know hey um

00:37:40,480 --> 00:37:46,000
but yeah i mean if excel works

00:37:44,000 --> 00:37:47,119
for you then put it in excel we use

00:37:46,000 --> 00:37:50,160
notion

00:37:47,119 --> 00:37:53,359
that works until the moment the dot

00:37:50,160 --> 00:37:55,119
so domain is down or until they

00:37:53,359 --> 00:37:57,119
ship a bug and your browser doesn't

00:37:55,119 --> 00:37:58,160
respond anymore so yeah we we have

00:37:57,119 --> 00:37:59,920
documentation

00:37:58,160 --> 00:38:02,000
and we think we own it but yeah that's

00:37:59,920 --> 00:38:05,040
just somewhere in store as a service but

00:38:02,000 --> 00:38:08,079
hey the the the i.t person uh

00:38:05,040 --> 00:38:09,680
checking are our things said uh okay so

00:38:08,079 --> 00:38:11,040
you're considering your test suite

00:38:09,680 --> 00:38:13,920
documentation

00:38:11,040 --> 00:38:14,560
uh that's of course and then i

00:38:13,920 --> 00:38:17,200
said well

00:38:14,560 --> 00:38:18,800
uh definitely this if if this is the

00:38:17,200 --> 00:38:20,240
only way of documentation that you have

00:38:18,800 --> 00:38:23,680
then potentially it is

00:38:20,240 --> 00:38:25,119
indeed not worth its solved but this is

00:38:23,680 --> 00:38:26,480
just a part of documentation this is the

00:38:25,119 --> 00:38:28,880
part of documentation that you can point

00:38:26,480 --> 00:38:30,800
to and say look this thing is true

00:38:28,880 --> 00:38:32,800
i'm not saying that the end user is

00:38:30,800 --> 00:38:34,240
helped by that but at least we know

00:38:32,800 --> 00:38:36,079
these things that are working

00:38:34,240 --> 00:38:38,640
and we have documentation on how we

00:38:36,079 --> 00:38:41,520
believe that the universe should behave

00:38:38,640 --> 00:38:43,040
and it's going on green so this is this

00:38:41,520 --> 00:38:45,440
is a truthiness

00:38:43,040 --> 00:38:46,720
that still doesn't mean anything if if

00:38:45,440 --> 00:38:48,480
you're not listening to your end users

00:38:46,720 --> 00:38:51,440
or your customers

00:38:48,480 --> 00:38:52,240
but yeah documentation should live on a

00:38:51,440 --> 00:38:54,400
code level

00:38:52,240 --> 00:38:55,920
should live on let's say that you are

00:38:54,400 --> 00:38:56,960
selling things so you want to have some

00:38:55,920 --> 00:38:59,920
coverage for your

00:38:56,960 --> 00:39:01,520
flows that involve money from receiving

00:38:59,920 --> 00:39:03,200
money but also paying it out to your

00:39:01,520 --> 00:39:04,000
sellers because if you're going to annoy

00:39:03,200 --> 00:39:05,920
them

00:39:04,000 --> 00:39:07,040
they'll probably find the competition

00:39:05,920 --> 00:39:08,800
that you'll probably see over the

00:39:07,040 --> 00:39:09,760
television if you're watching the press

00:39:08,800 --> 00:39:12,640
conference right now

00:39:09,760 --> 00:39:13,280
and so make sure that your documentation

00:39:12,640 --> 00:39:15,680
is

00:39:13,280 --> 00:39:17,200
valid on many levels so team

00:39:15,680 --> 00:39:19,359
documentation your roles

00:39:17,200 --> 00:39:21,200
your purposes and accountabilities your

00:39:19,359 --> 00:39:22,240
meeting notes they should all just be

00:39:21,200 --> 00:39:25,599
stored somewhere

00:39:22,240 --> 00:39:26,720
just as your test suite is documentation

00:39:25,599 --> 00:39:29,280
on how you think

00:39:26,720 --> 00:39:29,839
that the stack should behave in case

00:39:29,280 --> 00:39:31,920
cracker

00:39:29,839 --> 00:39:33,280
x enters the same thing over and over

00:39:31,920 --> 00:39:34,240
from the same ip address you have some

00:39:33,280 --> 00:39:36,160
way to solve that

00:39:34,240 --> 00:39:39,040
then make sure that there's tests or

00:39:36,160 --> 00:39:39,040
documentation for that

00:39:40,160 --> 00:39:44,800
um i think we have an additional

00:39:41,760 --> 00:39:44,800
question um

00:39:45,280 --> 00:39:50,880
from mahongli um are there anybody

00:39:48,880 --> 00:39:53,440
are there anybody who resists making

00:39:50,880 --> 00:39:56,240
processes resist documenting things

00:39:53,440 --> 00:39:57,760
or resist reading documentation if so

00:39:56,240 --> 00:40:00,240
how do you deal with them

00:39:57,760 --> 00:40:01,359
is there anybody sorry is there anybody

00:40:00,240 --> 00:40:04,880
resisting this

00:40:01,359 --> 00:40:06,800
of course i mean the term

00:40:04,880 --> 00:40:08,400
mushroom developer isn't invented

00:40:06,800 --> 00:40:09,920
because they do not exist

00:40:08,400 --> 00:40:12,480
there are people they think they are

00:40:09,920 --> 00:40:15,119
just only worth their salary

00:40:12,480 --> 00:40:16,079
if they uh well sit in the dark and you

00:40:15,119 --> 00:40:18,319
feed them

00:40:16,079 --> 00:40:19,359
that is a mushroom developer right but a

00:40:18,319 --> 00:40:21,280
proper developer

00:40:19,359 --> 00:40:23,200
you don't keep them in the car i'm just

00:40:21,280 --> 00:40:26,480
looking at you because i feel like i'm

00:40:23,200 --> 00:40:26,480
you know have you ever heard

00:40:26,640 --> 00:40:29,760
did you know about the mushroom

00:40:28,000 --> 00:40:32,000
developer i did i did not

00:40:29,760 --> 00:40:32,800
so like this is it's not something you'd

00:40:32,000 --> 00:40:35,839
say

00:40:32,800 --> 00:40:37,280
okay today okay so there are developers

00:40:35,839 --> 00:40:37,760
and they'd like to be kept in the dark

00:40:37,280 --> 00:40:40,640
and

00:40:37,760 --> 00:40:41,200
you just don't tell them the actual plan

00:40:40,640 --> 00:40:43,119
or

00:40:41,200 --> 00:40:44,560
the expected outcome but just the plan

00:40:43,119 --> 00:40:45,760
that you concocted for them that doesn't

00:40:44,560 --> 00:40:48,319
scale up by the way

00:40:45,760 --> 00:40:48,800
so you will always have developers and

00:40:48,319 --> 00:40:50,800
they just

00:40:48,800 --> 00:40:53,119
they just tell you well just just give

00:40:50,800 --> 00:40:56,240
me tasks to do

00:40:53,119 --> 00:40:57,440
um they are probably valuable because

00:40:56,240 --> 00:40:59,119
they are in your team

00:40:57,440 --> 00:41:00,960
they can probably build something really

00:40:59,119 --> 00:41:02,560
good because they are in your team

00:41:00,960 --> 00:41:04,720
and they are valuable colleagues but

00:41:02,560 --> 00:41:06,640
that doesn't mean that they are the best

00:41:04,720 --> 00:41:08,160
people to scale your processes but you

00:41:06,640 --> 00:41:10,160
have to involve them anyway

00:41:08,160 --> 00:41:11,599
because you want to grow the team and it

00:41:10,160 --> 00:41:13,760
means that

00:41:11,599 --> 00:41:14,880
even the 10x engineers that do not want

00:41:13,760 --> 00:41:18,400
to think about

00:41:14,880 --> 00:41:20,640
how to how to get better at your process

00:41:18,400 --> 00:41:23,520
their input is very very very relevant

00:41:20,640 --> 00:41:26,640
so if you have an issue like that

00:41:23,520 --> 00:41:28,400
and this is also a note to self

00:41:26,640 --> 00:41:29,920
if you if you have people like that in

00:41:28,400 --> 00:41:31,680
your team um

00:41:29,920 --> 00:41:33,280
make sure that you do a course to start

00:41:31,680 --> 00:41:35,599
listening to the listeners

00:41:33,280 --> 00:41:38,400
and especially for me being an extrovert

00:41:35,599 --> 00:41:39,839
that's really hard

00:41:38,400 --> 00:41:42,400
so and if you're if you're struggling

00:41:39,839 --> 00:41:44,400
with that try to listen to the listeners

00:41:42,400 --> 00:41:45,760
and also ask for micro reflections so at

00:41:44,400 --> 00:41:47,440
the end of the meeting just say look

00:41:45,760 --> 00:41:49,599
i did it this time this day did you

00:41:47,440 --> 00:41:51,920
notice it and does it work

00:41:49,599 --> 00:41:53,280
and then learn from it i mean and keep

00:41:51,920 --> 00:41:55,040
keep notes for yourself

00:41:53,280 --> 00:41:57,040
if you if you notice that it works you

00:41:55,040 --> 00:42:00,400
keep on doing it if it doesn't work

00:41:57,040 --> 00:42:02,240
change it plus you

00:42:00,400 --> 00:42:04,480
give them the book the art of action

00:42:02,240 --> 00:42:04,480
right

00:42:05,440 --> 00:42:12,480
uh potentially if they're interested

00:42:09,680 --> 00:42:13,520
you recommended me yes no it's a

00:42:12,480 --> 00:42:16,000
fantastic book but

00:42:13,520 --> 00:42:17,200
i mean let's say that that that you're a

00:42:16,000 --> 00:42:19,839
mushroom developer

00:42:17,200 --> 00:42:21,440
um and and you just don't want to think

00:42:19,839 --> 00:42:21,920
about your process you're just doing the

00:42:21,440 --> 00:42:24,160
thing

00:42:21,920 --> 00:42:25,920
as it comes natural then it makes no

00:42:24,160 --> 00:42:26,319
sense to start thinking about the book

00:42:25,920 --> 00:42:28,800
uh

00:42:26,319 --> 00:42:30,160
the art of action because that is how

00:42:28,800 --> 00:42:33,359
leaders make sure that

00:42:30,160 --> 00:42:36,400
the gap between ideas and actions are

00:42:33,359 --> 00:42:37,599
well removed potentially you want to

00:42:36,400 --> 00:42:40,400
give this book to your

00:42:37,599 --> 00:42:41,760
leader if they are top down managing you

00:42:40,400 --> 00:42:44,800
and potentially

00:42:41,760 --> 00:42:47,119
you want to learn from it and

00:42:44,800 --> 00:42:47,839
start training your team on getting

00:42:47,119 --> 00:42:50,160
better at it

00:42:47,839 --> 00:42:51,440
but this is a bit of a tough sell to to

00:42:50,160 --> 00:42:53,520
an well

00:42:51,440 --> 00:42:55,359
person in operations that just wants to

00:42:53,520 --> 00:42:57,520
stay in operations

00:42:55,359 --> 00:43:00,319
but scrum and xp from the trenches might

00:42:57,520 --> 00:43:00,319
be a better fit then

00:43:00,480 --> 00:43:03,839
yes i have that i can share that with

00:43:02,000 --> 00:43:07,280
you yeah

00:43:03,839 --> 00:43:08,880
share it in the chat no you can download

00:43:07,280 --> 00:43:10,800
it it's free on the interwebs

00:43:08,880 --> 00:43:12,480
yes but otherwise people don't you know

00:43:10,800 --> 00:43:14,880
don't know where to go

00:43:12,480 --> 00:43:15,760
in in slack you're you're giving out

00:43:14,880 --> 00:43:18,319
gems here

00:43:15,760 --> 00:43:19,440
and you know we'll put it in slack thank

00:43:18,319 --> 00:43:21,520
you

00:43:19,440 --> 00:43:23,760
appreciate it and now we'll we'll take a

00:43:21,520 --> 00:43:26,800
break after this

00:43:23,760 --> 00:43:30,400
yes yeah okay so um we will be back

00:43:26,800 --> 00:43:33,839
in uh 15 minutes or so like uh

00:43:30,400 --> 00:43:35,599
five minutes okay ten

00:43:33,839 --> 00:43:37,280
we'll be back at eight o'clock so i feel

00:43:35,599 --> 00:43:38,480
like it was a really hard breakup of

00:43:37,280 --> 00:43:41,040
arnold sorry arno

00:43:38,480 --> 00:43:41,599
thank you for your talk was wonderful he

00:43:41,040 --> 00:43:43,440
was just

00:43:41,599 --> 00:43:46,000
cut off like that maybe because of the

00:43:43,440 --> 00:43:48,160
mushroom developer thingy oh there he is

00:43:46,000 --> 00:43:49,920
i'm just happy i'm just happy please

00:43:48,160 --> 00:43:52,079
break him up thank you

00:43:49,920 --> 00:43:53,359
i was already ghosting about you thank

00:43:52,079 --> 00:43:55,599
you thank you so much

00:43:53,359 --> 00:43:56,400
i learned to i'd learned something today

00:43:55,599 --> 00:43:58,000
like really

00:43:56,400 --> 00:43:59,760
my eyes were this big i don't think it's

00:43:58,000 --> 00:44:02,240
what led us away

00:43:59,760 --> 00:44:03,280
from but that's i mean that's fine as

00:44:02,240 --> 00:44:05,359
well isn't it

00:44:03,280 --> 00:44:08,720
anyway after the break we're back with

00:44:05,359 --> 00:44:08,720
another talk from eulek

00:44:32,560 --> 00:44:37,839
okay peeps see you later

00:45:03,040 --> 00:45:07,200
be let's be let's pretend to be serious

00:45:05,440 --> 00:45:09,520
um so our next speaker

00:45:07,200 --> 00:45:10,240
is eulek who's also no stranger to this

00:45:09,520 --> 00:45:13,760
community

00:45:10,240 --> 00:45:15,599
uh yulik is an hku graduate that is the

00:45:13,760 --> 00:45:18,880
utrecht art school

00:45:15,599 --> 00:45:20,000
speaks four languages including french

00:45:18,880 --> 00:45:23,040
and russian

00:45:20,000 --> 00:45:23,920
and since 2014 he works as a lead

00:45:23,040 --> 00:45:26,800
engineer

00:45:23,920 --> 00:45:27,520
we transfer and in his own words

00:45:26,800 --> 00:45:29,920
creating

00:45:27,520 --> 00:45:30,960
ruby magic both for open and closed

00:45:29,920 --> 00:45:33,680
source

00:45:30,960 --> 00:45:35,680
project and so uh yulik when you join us

00:45:33,680 --> 00:45:39,680
on the virtual stage

00:45:35,680 --> 00:45:41,520
uh we welcome you to get started

00:45:39,680 --> 00:45:43,359
hello everyone thank you i feel like

00:45:41,520 --> 00:45:45,280
i've seen that backdrop before

00:45:43,359 --> 00:45:47,280
thank you for having me yes the the back

00:45:45,280 --> 00:45:48,480
the backdrop is repeating so i figured

00:45:47,280 --> 00:45:51,440
out that

00:45:48,480 --> 00:45:52,560
for some reason arno has hijacked my

00:45:51,440 --> 00:45:55,359
attic

00:45:52,560 --> 00:45:57,440
and uh so as soon as i found this out i

00:45:55,359 --> 00:45:58,880
had to go here and i had to expel arnold

00:45:57,440 --> 00:45:59,760
from my attic because i also need to

00:45:58,880 --> 00:46:02,079
present

00:45:59,760 --> 00:46:04,640
but uh that also means that arnold could

00:46:02,079 --> 00:46:06,480
break my webcam and my keyboard and

00:46:04,640 --> 00:46:08,560
the microphone and he also removed the

00:46:06,480 --> 00:46:09,680
badger from the microphone stand so it's

00:46:08,560 --> 00:46:13,040
all good here

00:46:09,680 --> 00:46:14,240
anyway uh let's uh let's get started

00:46:13,040 --> 00:46:14,800
because we got a lot of material to

00:46:14,240 --> 00:46:17,839
cover

00:46:14,800 --> 00:46:20,079
so um i wanted to talk with you about

00:46:17,839 --> 00:46:21,680
concurrency and fibers and what it most

00:46:20,079 --> 00:46:24,800
likely means for you

00:46:21,680 --> 00:46:26,480
uh and also i wanted to talk about i in

00:46:24,800 --> 00:46:28,560
my view the most

00:46:26,480 --> 00:46:31,280
undervalued feature which has been

00:46:28,560 --> 00:46:34,240
released as part of ruby 3.0

00:46:31,280 --> 00:46:34,720
uh a short kind of uh introduction who

00:46:34,240 --> 00:46:37,680
am i

00:46:34,720 --> 00:46:39,040
i work at wetransfer i'm a senior

00:46:37,680 --> 00:46:41,520
software engineer

00:46:39,040 --> 00:46:43,520
and i lead a team which is called sudo

00:46:41,520 --> 00:46:44,640
which uh is responsible for all the

00:46:43,520 --> 00:46:47,520
storage uploads

00:46:44,640 --> 00:46:48,720
and downloads needs of food transfer and

00:46:47,520 --> 00:46:51,520
for example one of the

00:46:48,720 --> 00:46:51,920
uh services that we run is a very heavy

00:46:51,520 --> 00:46:54,400
uh

00:46:51,920 --> 00:46:55,359
streaming web proxy service written in

00:46:54,400 --> 00:46:57,359
ruby and

00:46:55,359 --> 00:46:58,560
we'll get to why this is relevant in a

00:46:57,359 --> 00:47:00,160
minute so

00:46:58,560 --> 00:47:03,119
a little bit of a warning about this

00:47:00,160 --> 00:47:05,200
talk i am not a good computer scientist

00:47:03,119 --> 00:47:06,640
and so there is going to be hand-wavy

00:47:05,200 --> 00:47:08,640
statements i'm going to do a little bit

00:47:06,640 --> 00:47:10,640
of fear-mongering and then i'm going to

00:47:08,640 --> 00:47:13,839
try to indoctrinate and suggest

00:47:10,640 --> 00:47:15,040
sternly um if that disappoints some

00:47:13,839 --> 00:47:17,760
people i'm very sorry

00:47:15,040 --> 00:47:18,560
but i think this is an important subject

00:47:17,760 --> 00:47:20,000
and i

00:47:18,560 --> 00:47:21,680
think it deserves a little bit more

00:47:20,000 --> 00:47:23,119
attention than it gets gets at the

00:47:21,680 --> 00:47:26,000
moment let's say

00:47:23,119 --> 00:47:27,760
so uh the whirlwind tour of ruby

00:47:26,000 --> 00:47:29,920
concurrency and parallelism

00:47:27,760 --> 00:47:31,920
um we'll get to the difference between

00:47:29,920 --> 00:47:34,800
the two shortly there are good examples

00:47:31,920 --> 00:47:35,839
everything's gonna be nice we have four

00:47:34,800 --> 00:47:38,160
um

00:47:35,839 --> 00:47:39,280
units of concurrency or entities that we

00:47:38,160 --> 00:47:41,520
can use to

00:47:39,280 --> 00:47:43,200
do things at the same time or in

00:47:41,520 --> 00:47:45,200
sequence but we'll get to that

00:47:43,200 --> 00:47:46,800
so in ruby we have the process that's

00:47:45,200 --> 00:47:47,839
the ruby virtual machine that you start

00:47:46,800 --> 00:47:49,760
we have the rector

00:47:47,839 --> 00:47:52,160
which is the weird new thing we're going

00:47:49,760 --> 00:47:55,200
to touch on that also

00:47:52,160 --> 00:47:57,200
we have threads and we have fibers most

00:47:55,200 --> 00:47:58,640
likely you have not used fibers or at

00:47:57,200 --> 00:48:01,599
least you haven't used them

00:47:58,640 --> 00:48:03,599
explicitly we'll get there and i'll

00:48:01,599 --> 00:48:05,119
explain why fibers kind of rock for a

00:48:03,599 --> 00:48:08,240
few for a few purposes

00:48:05,119 --> 00:48:09,440
so the process like i said it's a ruby

00:48:08,240 --> 00:48:11,440
virtual machine

00:48:09,440 --> 00:48:13,280
and it's an operating system level

00:48:11,440 --> 00:48:15,520
primitive so you start a process the

00:48:13,280 --> 00:48:18,640
operating system is responsible for

00:48:15,520 --> 00:48:20,720
pausing it for stopping it for

00:48:18,640 --> 00:48:21,920
uh giving it more resources or less

00:48:20,720 --> 00:48:24,160
resources and

00:48:21,920 --> 00:48:25,920
every process get its own isolated

00:48:24,160 --> 00:48:27,440
memory address space which is kind of

00:48:25,920 --> 00:48:29,280
important because that's how different

00:48:27,440 --> 00:48:32,079
applications on your computer cannot

00:48:29,280 --> 00:48:32,720
grab data from each other's memory and

00:48:32,079 --> 00:48:36,400
do

00:48:32,720 --> 00:48:39,680
kind of nasty security things um

00:48:36,400 --> 00:48:41,520
when they shouldn't and uh every process

00:48:39,680 --> 00:48:42,800
gets its own ruby virtual machine which

00:48:41,520 --> 00:48:44,720
means that

00:48:42,800 --> 00:48:46,720
you cannot for example load your huge

00:48:44,720 --> 00:48:50,319
rails application into

00:48:46,720 --> 00:48:52,160
one process and have other processes use

00:48:50,319 --> 00:48:54,480
the code that you have loaded into the

00:48:52,160 --> 00:48:55,520
first process where you can do it to an

00:48:54,480 --> 00:48:58,640
extent

00:48:55,520 --> 00:49:01,119
but the um but the benefits of this

00:48:58,640 --> 00:49:02,000
heavily minimize as your processes run

00:49:01,119 --> 00:49:03,839
for a longer period

00:49:02,000 --> 00:49:05,280
of time and it's also a hack and you

00:49:03,839 --> 00:49:08,480
should be doing this so anyway

00:49:05,280 --> 00:49:10,640
it's just not good for saving memory and

00:49:08,480 --> 00:49:12,079
too isolated then we have directors

00:49:10,640 --> 00:49:15,280
rector is a new thing again

00:49:12,079 --> 00:49:18,240
introduced around the ruby 3

00:49:15,280 --> 00:49:20,640
time frame and the rector is kind of a

00:49:18,240 --> 00:49:23,359
crossover between a process and

00:49:20,640 --> 00:49:25,599
a bunch of threads and the idea with

00:49:23,359 --> 00:49:28,240
rectors is that you will finally get us

00:49:25,599 --> 00:49:30,720
an isolated virtual machine inside of

00:49:28,240 --> 00:49:33,440
your ruby virtual machine so you can run

00:49:30,720 --> 00:49:34,400
multiple processes at the same time and

00:49:33,440 --> 00:49:38,640
they share

00:49:34,400 --> 00:49:40,880
the ruby code that they are running

00:49:38,640 --> 00:49:43,119
but they are not sharing the memory with

00:49:40,880 --> 00:49:46,480
the data they are operating on

00:49:43,119 --> 00:49:48,319
that's actually the problem why rectors

00:49:46,480 --> 00:49:49,839
are very hard to use at the moment and i

00:49:48,319 --> 00:49:51,920
don't know whether this problem is going

00:49:49,839 --> 00:49:54,400
to get solved in ruby ultimately

00:49:51,920 --> 00:49:55,359
because in ruby data and code are very

00:49:54,400 --> 00:49:58,000
hard to separate

00:49:55,359 --> 00:50:00,800
and rector imposes some degree of

00:49:58,000 --> 00:50:03,760
separation of that sort on you basically

00:50:00,800 --> 00:50:04,720
then we get to threads thread is an even

00:50:03,760 --> 00:50:08,160
even smaller

00:50:04,720 --> 00:50:11,200
entity and a thread is something that

00:50:08,160 --> 00:50:14,559
the ruby virtual machine knows about

00:50:11,200 --> 00:50:16,720
but it's also something that the os

00:50:14,559 --> 00:50:18,160
knows about so when you run a thread

00:50:16,720 --> 00:50:21,359
imagine you have your

00:50:18,160 --> 00:50:23,200
ruby program and you are doing a call to

00:50:21,359 --> 00:50:26,000
a rubygem which provides

00:50:23,200 --> 00:50:27,920
uh bindings to some c library which

00:50:26,000 --> 00:50:30,880
processes images now if

00:50:27,920 --> 00:50:32,880
uh this library which processes images

00:50:30,880 --> 00:50:34,800
can do multi-threaded stuff so do

00:50:32,880 --> 00:50:36,880
multiple tasks in parallel and you can

00:50:34,800 --> 00:50:38,480
tell it process me this image and use

00:50:36,880 --> 00:50:39,920
one thread for that and process

00:50:38,480 --> 00:50:41,920
me another image and do it in a

00:50:39,920 --> 00:50:44,000
different thread then

00:50:41,920 --> 00:50:46,079
basically the the threads of the ruby

00:50:44,000 --> 00:50:49,119
virtual machine will map to that

00:50:46,079 --> 00:50:51,599
uh and so you can um you can use

00:50:49,119 --> 00:50:53,599
uh library native native code which is

00:50:51,599 --> 00:50:55,839
multi-threaded from from those ruby

00:50:53,599 --> 00:50:58,880
threads

00:50:55,839 --> 00:51:01,119
threads are concurrent and parallel

00:50:58,880 --> 00:51:02,880
and the important part is that even

00:51:01,119 --> 00:51:05,040
though

00:51:02,880 --> 00:51:06,319
a lot of people kind of assume that ruby

00:51:05,040 --> 00:51:08,160
threads are

00:51:06,319 --> 00:51:09,680
dead weight because they never execute

00:51:08,160 --> 00:51:11,040
at the same time this is not true

00:51:09,680 --> 00:51:12,880
and i'm going to show you how that how

00:51:11,040 --> 00:51:16,160
that happens slightly later

00:51:12,880 --> 00:51:19,040
and the fiber is an even smaller thing

00:51:16,160 --> 00:51:19,839
that you can use to keep multiple things

00:51:19,040 --> 00:51:22,000
in motion

00:51:19,839 --> 00:51:23,040
at the same time within one ruby virtual

00:51:22,000 --> 00:51:25,440
machine

00:51:23,040 --> 00:51:26,640
and fibers actually share the thread

00:51:25,440 --> 00:51:28,480
that they live in

00:51:26,640 --> 00:51:30,319
but the important part is that fibers

00:51:28,480 --> 00:51:32,720
never run at the same time

00:51:30,319 --> 00:51:34,960
they always run sequentially and you

00:51:32,720 --> 00:51:36,000
cannot be running two fibers at the same

00:51:34,960 --> 00:51:37,920
time so you can be

00:51:36,000 --> 00:51:40,079
running two threads at the same time

00:51:37,920 --> 00:51:41,680
because threads in ruby do run

00:51:40,079 --> 00:51:43,839
in parallel sometimes under some

00:51:41,680 --> 00:51:45,359
conditions but you cannot run two fibers

00:51:43,839 --> 00:51:46,400
within the same thread at the same time

00:51:45,359 --> 00:51:48,319
because fibers are

00:51:46,400 --> 00:51:50,160
sequential that's the important part

00:51:48,319 --> 00:51:51,920
here now what's the deal with

00:51:50,160 --> 00:51:54,319
concurrency and parallelism there is a

00:51:51,920 --> 00:51:55,119
great explanation by rob pike who is one

00:51:54,319 --> 00:51:56,960
of the

00:51:55,119 --> 00:51:58,960
authors of the go programming language

00:51:56,960 --> 00:51:59,520
about the difference but we can cover

00:51:58,960 --> 00:52:02,720
this

00:51:59,520 --> 00:52:05,359
uh we can cover this quickly and what i

00:52:02,720 --> 00:52:06,720
want and i guess the simplest way to

00:52:05,359 --> 00:52:09,200
look at it is that

00:52:06,720 --> 00:52:10,480
you benefit from parallel work if you

00:52:09,200 --> 00:52:12,319
know exactly

00:52:10,480 --> 00:52:14,319
the amount of work that you need to do

00:52:12,319 --> 00:52:17,760
you have a fixed number of

00:52:14,319 --> 00:52:19,440
engines or people or processors or

00:52:17,760 --> 00:52:21,040
whatever which do this work at the same

00:52:19,440 --> 00:52:22,480
time and then you just drop this work on

00:52:21,040 --> 00:52:25,200
those processors and you want all of

00:52:22,480 --> 00:52:27,200
them to be doing this work independently

00:52:25,200 --> 00:52:29,119
and when you have concurrent work it

00:52:27,200 --> 00:52:32,640
means that you have

00:52:29,119 --> 00:52:36,079
certain execution flows or or

00:52:32,640 --> 00:52:38,400
people or engines or processes right

00:52:36,079 --> 00:52:39,440
which can be interrupted and then

00:52:38,400 --> 00:52:42,079
resumed

00:52:39,440 --> 00:52:43,839
so a great example for parallel stuff is

00:52:42,079 --> 00:52:45,440
when imagine you have a very large bar

00:52:43,839 --> 00:52:45,680
and you have two bartenders and you have

00:52:45,440 --> 00:52:47,440
an

00:52:45,680 --> 00:52:49,119
endless stream of guests because it's a

00:52:47,440 --> 00:52:50,640
large music festival and the corona

00:52:49,119 --> 00:52:51,839
finally ended and everybody wants to

00:52:50,640 --> 00:52:54,079
have their beers

00:52:51,839 --> 00:52:55,520
and then we know that the two bartenders

00:52:54,079 --> 00:52:57,200
are going to serve two guests in

00:52:55,520 --> 00:52:59,520
parallel no matter what because

00:52:57,200 --> 00:53:01,520
every guest takes roughly the same time

00:52:59,520 --> 00:53:03,119
serve there is a very large queue of

00:53:01,520 --> 00:53:04,480
guests and we have two bartenders all

00:53:03,119 --> 00:53:07,599
hunky-dory right

00:53:04,480 --> 00:53:09,599
but at the same time imagine that we all

00:53:07,599 --> 00:53:13,359
can go to meet-ups again

00:53:09,599 --> 00:53:15,040
and then you are talking to to somebody

00:53:13,359 --> 00:53:17,520
uh between the talks imagine i'm

00:53:15,040 --> 00:53:17,839
standing uh in the corner with arnold

00:53:17,520 --> 00:53:19,359
well

00:53:17,839 --> 00:53:21,200
right now aren't we sitting here but

00:53:19,359 --> 00:53:22,640
imagine hypothetically we're again

00:53:21,200 --> 00:53:23,280
standing in a corner with arno and we're

00:53:22,640 --> 00:53:25,680
talking

00:53:23,280 --> 00:53:27,520
and then say raita comes to me and said

00:53:25,680 --> 00:53:30,240
yuri can i talk to you for a second

00:53:27,520 --> 00:53:31,760
what will i then do i will concurrently

00:53:30,240 --> 00:53:33,520
talk to writer because i will tell

00:53:31,760 --> 00:53:34,160
arnold you know arno i'll get back to

00:53:33,520 --> 00:53:36,240
you

00:53:34,160 --> 00:53:37,680
in five minutes and then i'll go talk to

00:53:36,240 --> 00:53:39,280
writer but once i have

00:53:37,680 --> 00:53:41,200
spoken to writer then i'm gonna go back

00:53:39,280 --> 00:53:44,960
to arno and i'm going to resume

00:53:41,200 --> 00:53:46,960
my conversation with arno so yet

00:53:44,960 --> 00:53:48,880
while this was concurrent because my

00:53:46,960 --> 00:53:49,440
conversation with arno hasn't finished

00:53:48,880 --> 00:53:51,599
while i

00:53:49,440 --> 00:53:53,119
started talking to writer it is not in

00:53:51,599 --> 00:53:54,880
parallel because i cannot

00:53:53,119 --> 00:53:56,319
be talking to two people at the same

00:53:54,880 --> 00:53:58,640
time that's roughly the difference

00:53:56,319 --> 00:54:02,319
between between parallel and concurrent

00:53:58,640 --> 00:54:04,079
why this matters it's because for when

00:54:02,319 --> 00:54:05,839
you are doing something parallel there

00:54:04,079 --> 00:54:06,160
is a small number of conditions where

00:54:05,839 --> 00:54:08,000
it's

00:54:06,160 --> 00:54:10,079
extremely important to you for example

00:54:08,000 --> 00:54:13,520
you need to render an image

00:54:10,079 --> 00:54:15,200
or you need to do um car recognition

00:54:13,520 --> 00:54:15,839
when you have a self-driving car for

00:54:15,200 --> 00:54:17,920
example

00:54:15,839 --> 00:54:20,160
like you do you do need something very

00:54:17,920 --> 00:54:21,839
computationally expensive which you know

00:54:20,160 --> 00:54:23,760
is going to completely consume your

00:54:21,839 --> 00:54:25,680
available compute resources

00:54:23,760 --> 00:54:27,119
and the amount of compute that you need

00:54:25,680 --> 00:54:30,319
to perform is

00:54:27,119 --> 00:54:32,480
known and finite and funnily enough it's

00:54:30,319 --> 00:54:35,200
less situations than you think by

00:54:32,480 --> 00:54:36,480
contrast when you want concurrency

00:54:35,200 --> 00:54:38,640
you know that's where you want

00:54:36,480 --> 00:54:39,839
concurrency because if you are servicing

00:54:38,640 --> 00:54:41,599
web requests

00:54:39,839 --> 00:54:42,960
a lot of people are making connections

00:54:41,599 --> 00:54:45,040
with your web server with your

00:54:42,960 --> 00:54:46,640
application you don't know how slow all

00:54:45,040 --> 00:54:48,400
of these clients are going to be or how

00:54:46,640 --> 00:54:50,400
fast one client might easily be a

00:54:48,400 --> 00:54:51,680
hundred times faster than another so you

00:54:50,400 --> 00:54:53,200
don't know how much time it's going to

00:54:51,680 --> 00:54:55,520
take to service

00:54:53,200 --> 00:54:56,960
every client and you're also talking to

00:54:55,520 --> 00:54:59,040
a database imagine that

00:54:56,960 --> 00:55:00,319
at the same time when you are doing a

00:54:59,040 --> 00:55:02,319
database request

00:55:00,319 --> 00:55:04,079
a data analyst from your company is

00:55:02,319 --> 00:55:04,960
running is running a huge aggregate

00:55:04,079 --> 00:55:07,119
query which

00:55:04,960 --> 00:55:08,720
joins seven tables together and your

00:55:07,119 --> 00:55:10,160
database just locks up and it's not

00:55:08,720 --> 00:55:11,839
giving you a response

00:55:10,160 --> 00:55:14,240
what you're doing you're waiting for the

00:55:11,839 --> 00:55:17,680
database to give you that result back

00:55:14,240 --> 00:55:19,440
right and no matter how many

00:55:17,680 --> 00:55:21,040
processing cores you have in your web

00:55:19,440 --> 00:55:23,839
server or how

00:55:21,040 --> 00:55:25,440
extremely parallel your runtime is right

00:55:23,839 --> 00:55:26,720
your database is not going to give you

00:55:25,440 --> 00:55:28,240
this result faster

00:55:26,720 --> 00:55:30,319
and the client which is connected to

00:55:28,240 --> 00:55:30,720
your application is not going to supply

00:55:30,319 --> 00:55:33,440
you

00:55:30,720 --> 00:55:34,240
their http request faster than they can

00:55:33,440 --> 00:55:35,920
right because

00:55:34,240 --> 00:55:38,160
the thickness of the wire is just not

00:55:35,920 --> 00:55:41,280
there so

00:55:38,160 --> 00:55:42,000
imagine we had in ruby we had absolutely

00:55:41,280 --> 00:55:44,000
extreme

00:55:42,000 --> 00:55:45,119
full complete parallelism it would have

00:55:44,000 --> 00:55:48,079
been nice like

00:55:45,119 --> 00:55:49,839
i i i would i would love to have it but

00:55:48,079 --> 00:55:50,559
imagine we imagine like imagine we do

00:55:49,839 --> 00:55:52,799
have it

00:55:50,559 --> 00:55:54,319
so we want to service 10 000 web

00:55:52,799 --> 00:55:57,440
requests at the same time

00:55:54,319 --> 00:55:58,319
or we are doing uh or we are running

00:55:57,440 --> 00:56:00,400
something like in the

00:55:58,319 --> 00:56:03,119
early days of whatsapp what was like a

00:56:00,400 --> 00:56:05,520
show a grand showcase for

00:56:03,119 --> 00:56:06,559
erlang we want to have a million chat

00:56:05,520 --> 00:56:09,200
channels open

00:56:06,559 --> 00:56:11,040
right and our computer has 64 processors

00:56:09,200 --> 00:56:12,480
and we do not have concurrency and we

00:56:11,040 --> 00:56:14,960
only have parallelism well

00:56:12,480 --> 00:56:16,960
how many of these web requests can we

00:56:14,960 --> 00:56:19,760
service at the same time

00:56:16,960 --> 00:56:21,200
surprise exactly 64. because then all of

00:56:19,760 --> 00:56:23,359
our cores are busy

00:56:21,200 --> 00:56:24,400
and what is going to happen is that

00:56:23,359 --> 00:56:26,079
those

00:56:24,400 --> 00:56:27,839
chat channels they will be extremely

00:56:26,079 --> 00:56:28,880
parallel because every chat channel gets

00:56:27,839 --> 00:56:30,079
a cpu core

00:56:28,880 --> 00:56:31,760
but what they're going to be doing is

00:56:30,079 --> 00:56:33,520
that they're going to be doing nothing

00:56:31,760 --> 00:56:36,880
so you're going to have a machine

00:56:33,520 --> 00:56:40,720
which consumes energy waiting for those

00:56:36,880 --> 00:56:44,720
chat messages uh and your entire amd

00:56:40,720 --> 00:56:46,720
super duper ryzen obtaran 64 core

00:56:44,720 --> 00:56:47,920
unit which is this big the only thing

00:56:46,720 --> 00:56:48,319
it's going to do is going to produce

00:56:47,920 --> 00:56:51,040
heat

00:56:48,319 --> 00:56:52,559
right and it's going to wait so with

00:56:51,040 --> 00:56:54,000
concurrency however

00:56:52,559 --> 00:56:56,079
it gets more interesting you have the

00:56:54,000 --> 00:56:57,119
same setup and you have a million chat

00:56:56,079 --> 00:56:59,040
channels for example

00:56:57,119 --> 00:57:00,799
but when they are idling they are at the

00:56:59,040 --> 00:57:01,359
minimum cost to you because you do not

00:57:00,799 --> 00:57:03,359
need to

00:57:01,359 --> 00:57:05,359
parallelize them in any way they can

00:57:03,359 --> 00:57:06,640
just be sleeping like an interrupted

00:57:05,359 --> 00:57:08,480
conversation

00:57:06,640 --> 00:57:09,680
they can just stay uh stay in the

00:57:08,480 --> 00:57:11,280
background and

00:57:09,680 --> 00:57:12,880
when you know that you are receiving a

00:57:11,280 --> 00:57:13,920
message which is supposed to go into one

00:57:12,880 --> 00:57:15,680
of those channels

00:57:13,920 --> 00:57:17,680
then you pick up this message and you

00:57:15,680 --> 00:57:19,680
multiplex it into the channel

00:57:17,680 --> 00:57:21,040
uh and then this channel consumes some

00:57:19,680 --> 00:57:23,119
amount of computation

00:57:21,040 --> 00:57:24,880
if you need it to right and then again

00:57:23,119 --> 00:57:26,319
for that channel if you need to send the

00:57:24,880 --> 00:57:28,880
data to the clients

00:57:26,319 --> 00:57:30,960
then you try to dispatch it to every

00:57:28,880 --> 00:57:31,680
client and if the client takes longer to

00:57:30,960 --> 00:57:33,200
receive

00:57:31,680 --> 00:57:35,200
the messages on this chat channel well

00:57:33,200 --> 00:57:38,400
you move on to the next client and so

00:57:35,200 --> 00:57:40,480
that's why fundamentally

00:57:38,400 --> 00:57:42,400
concurrency is way more important to you

00:57:40,480 --> 00:57:45,280
than parallelism if you do the web

00:57:42,400 --> 00:57:46,480
i would say like i've met very few

00:57:45,280 --> 00:57:48,960
situations where i

00:57:46,480 --> 00:57:51,200
really needed true parallelism extreme

00:57:48,960 --> 00:57:54,160
parallelism over cpu course

00:57:51,200 --> 00:57:54,960
but i've met dozens of situations

00:57:54,160 --> 00:57:57,440
already where

00:57:54,960 --> 00:57:58,640
better concurrency was like it was a

00:57:57,440 --> 00:58:00,319
requirement

00:57:58,640 --> 00:58:02,400
and how can you best visualize

00:58:00,319 --> 00:58:06,000
concurrency so if you

00:58:02,400 --> 00:58:10,079
think about how your how your

00:58:06,000 --> 00:58:11,839
uh program uh works

00:58:10,079 --> 00:58:14,559
then the best thing to the best way to

00:58:11,839 --> 00:58:17,119
think about it is to think in timelines

00:58:14,559 --> 00:58:17,920
in i believe in the uml diagrams

00:58:17,119 --> 00:58:19,920
traditionally

00:58:17,920 --> 00:58:21,760
the timeline of execution is top to

00:58:19,920 --> 00:58:24,240
bottom

00:58:21,760 --> 00:58:24,799
i'm used to working with video so for me

00:58:24,240 --> 00:58:27,680
timeline

00:58:24,799 --> 00:58:29,839
timelines always go right to left so

00:58:27,680 --> 00:58:33,040
we're going to use that representation

00:58:29,839 --> 00:58:36,000
and in terms of code it's a bit hard

00:58:33,040 --> 00:58:36,799
to uh it's a bit hard to visualize with

00:58:36,000 --> 00:58:39,440
words but

00:58:36,799 --> 00:58:41,280
what you can do is you can take two two

00:58:39,440 --> 00:58:43,040
small pieces of code that you

00:58:41,280 --> 00:58:44,400
uh that you that your application is

00:58:43,040 --> 00:58:47,200
using and you can try to see

00:58:44,400 --> 00:58:48,880
what would happen if the lines of these

00:58:47,200 --> 00:58:51,200
two units of code would cross

00:58:48,880 --> 00:58:53,040
like this and then you would be able to

00:58:51,200 --> 00:58:53,920
imagine that okay so now my computer

00:58:53,040 --> 00:58:56,079
executes

00:58:53,920 --> 00:58:57,760
this line from this thread or this fiber

00:58:56,079 --> 00:58:59,440
or whatever and now it executes that

00:58:57,760 --> 00:59:02,000
other line from another thread or

00:58:59,440 --> 00:59:02,960
or another fiber it's a bit mind-bending

00:59:02,000 --> 00:59:06,319
but

00:59:02,960 --> 00:59:08,160
it can be it can be done uh how

00:59:06,319 --> 00:59:10,400
do all of these concurrency primitives

00:59:08,160 --> 00:59:12,000
that we have fit together

00:59:10,400 --> 00:59:14,079
we're not going to be talking about uh

00:59:12,000 --> 00:59:15,359
rectors because i think that at the

00:59:14,079 --> 00:59:17,839
moment rectors are

00:59:15,359 --> 00:59:18,720
not practical to use for all intents and

00:59:17,839 --> 00:59:21,599
purposes

00:59:18,720 --> 00:59:23,359
and uh i think kirshatrov uh has written

00:59:21,599 --> 00:59:25,280
a nice article about writing a web

00:59:23,359 --> 00:59:27,359
server with rectors and what problems

00:59:25,280 --> 00:59:29,359
you actually encounter if you try

00:59:27,359 --> 00:59:31,520
it's really really instructive but

00:59:29,359 --> 00:59:32,079
basically if we look at the timeline

00:59:31,520 --> 00:59:33,680
view for

00:59:32,079 --> 00:59:35,760
threads then we're going to end up with

00:59:33,680 --> 00:59:38,000
a picture like this and imagine

00:59:35,760 --> 00:59:39,599
everywhere where we have red it means

00:59:38,000 --> 00:59:40,160
that the thread is doing something

00:59:39,599 --> 00:59:42,799
useful

00:59:40,160 --> 00:59:43,599
right that it means that it does useful

00:59:42,799 --> 00:59:45,119
work

00:59:43,599 --> 00:59:46,480
right we're going to get to the to the

00:59:45,119 --> 00:59:47,119
tricks with the definition of the useful

00:59:46,480 --> 00:59:50,960
work

00:59:47,119 --> 00:59:53,760
however in ruby uh achieving this

00:59:50,960 --> 00:59:54,960
is not possible because we have what's

00:59:53,760 --> 00:59:57,680
called the gvl

00:59:54,960 --> 00:59:58,720
which is the global vm lock uh and the

00:59:57,680 --> 01:00:01,040
the global vm lock

00:59:58,720 --> 01:00:02,240
is a safety mechanism which ensures that

01:00:01,040 --> 01:00:06,240
no two pieces

01:00:02,240 --> 01:00:08,559
of of native machine code

01:00:06,240 --> 01:00:09,760
can touch the ruby data structure so for

01:00:08,559 --> 01:00:11,599
example

01:00:09,760 --> 01:00:14,160
if you want to create a ruby string the

01:00:11,599 --> 01:00:17,760
global vm lock ensures that only one

01:00:14,160 --> 01:00:18,640
thread uh can create can allocate and

01:00:17,760 --> 01:00:22,240
create this

01:00:18,640 --> 01:00:24,400
um this ruby string and that's a that's

01:00:22,240 --> 01:00:27,520
a historical thing but it also

01:00:24,400 --> 01:00:30,160
makes developing say c extensions for

01:00:27,520 --> 01:00:31,040
the uh ruby virtual machine for c ruby

01:00:30,160 --> 01:00:34,799
much

01:00:31,040 --> 01:00:35,520
easier and many people assume that if

01:00:34,799 --> 01:00:39,200
you have

01:00:35,520 --> 01:00:40,720
uh this problem with uh the gvl then it

01:00:39,200 --> 01:00:42,160
means that your threads are always going

01:00:40,720 --> 01:00:45,359
to be executing

01:00:42,160 --> 01:00:47,280
uh sequentially so one thread executes

01:00:45,359 --> 01:00:47,839
for some time and then it gets suspended

01:00:47,280 --> 01:00:50,480
and then

01:00:47,839 --> 01:00:52,400
thread two executes and then um again

01:00:50,480 --> 01:00:52,960
thread one executes and so basically you

01:00:52,400 --> 01:00:55,040
never get

01:00:52,960 --> 01:00:56,640
any kind of parallelism you just get

01:00:55,040 --> 01:01:00,079
some concurrency

01:00:56,640 --> 01:01:03,760
however this is not true because if

01:01:00,079 --> 01:01:06,480
your gem that you are calling out to

01:01:03,760 --> 01:01:08,079
uh performs some native computation say

01:01:06,480 --> 01:01:09,280
for example if you are processing an

01:01:08,079 --> 01:01:11,200
image

01:01:09,280 --> 01:01:13,040
and your gem is written well what the

01:01:11,200 --> 01:01:14,799
gem can opt out to do it can say

01:01:13,040 --> 01:01:16,559
it can tell to the ruby virtual machine

01:01:14,799 --> 01:01:18,480
ruby virtual machine i'm not going to be

01:01:16,559 --> 01:01:20,559
touching any ruby data structures

01:01:18,480 --> 01:01:21,680
i'm just going to take the path to the

01:01:20,559 --> 01:01:23,359
file that you gave me

01:01:21,680 --> 01:01:25,280
read the pixels from that file and then

01:01:23,359 --> 01:01:26,400
do something with those pixels and by

01:01:25,280 --> 01:01:28,319
the time i'm done

01:01:26,400 --> 01:01:30,319
and i can return you those pixels then

01:01:28,319 --> 01:01:33,440
i'm going to ask you to give me back

01:01:30,319 --> 01:01:36,720
the lock and most

01:01:33,440 --> 01:01:38,240
well-mannered c extensions do this they

01:01:36,720 --> 01:01:40,079
they can make those guarantees and that

01:01:38,240 --> 01:01:42,559
means that multiple threads can actually

01:01:40,079 --> 01:01:45,760
execute native code at the same time

01:01:42,559 --> 01:01:47,280
if we denote the blue regions as regions

01:01:45,760 --> 01:01:49,359
executing native code

01:01:47,280 --> 01:01:50,799
then you can see on on this graph for

01:01:49,359 --> 01:01:52,960
instance that you can

01:01:50,799 --> 01:01:55,280
have a situation where multiple threads

01:01:52,960 --> 01:01:58,400
work in parallel and that that happens

01:01:55,280 --> 01:02:01,680
uh that happens pretty often actually

01:01:58,400 --> 01:02:03,760
and again in some situations when

01:02:01,680 --> 01:02:05,039
you are about to read something from a

01:02:03,760 --> 01:02:07,200
database

01:02:05,039 --> 01:02:09,520
or you're about to read something from a

01:02:07,200 --> 01:02:13,440
socket then you can get a situation

01:02:09,520 --> 01:02:16,400
where your threads are going to be

01:02:13,440 --> 01:02:17,520
are going to be put to sleep because

01:02:16,400 --> 01:02:19,200
they wait for

01:02:17,520 --> 01:02:21,280
input output which means that other

01:02:19,200 --> 01:02:23,119
threads can execute at that time

01:02:21,280 --> 01:02:25,200
a typical situation would be when you

01:02:23,119 --> 01:02:27,599
have one thread which handles

01:02:25,200 --> 01:02:29,200
connecting clients right something like

01:02:27,599 --> 01:02:31,039
a web server also

01:02:29,200 --> 01:02:33,440
and then once a cl once a new client

01:02:31,039 --> 01:02:35,599
connects it gets

01:02:33,440 --> 01:02:38,160
dispatched to a worker thread and the

01:02:35,599 --> 01:02:40,240
worker thread handles that client but

01:02:38,160 --> 01:02:41,760
it doesn't mean that this acceptor

01:02:40,240 --> 01:02:43,280
thread which

01:02:41,760 --> 01:02:45,039
takes in connections it doesn't mean

01:02:43,280 --> 01:02:48,160
that this acceptor thread

01:02:45,039 --> 01:02:49,599
has to be executing ruby code all the

01:02:48,160 --> 01:02:51,839
time you can just say

01:02:49,599 --> 01:02:53,280
uh hello ruby virtual machine i'm going

01:02:51,839 --> 01:02:55,119
to sit here and i'm going to wait until

01:02:53,280 --> 01:02:55,520
somebody connects and wake me up only

01:02:55,119 --> 01:02:57,760
then

01:02:55,520 --> 01:02:59,760
right and then um other threads can be

01:02:57,760 --> 01:03:02,400
executing at the same time

01:02:59,760 --> 01:03:03,839
so um what is the the deal with threads

01:03:02,400 --> 01:03:06,240
we're gonna get to that but the

01:03:03,839 --> 01:03:08,240
the thing is that it's hard to create

01:03:06,240 --> 01:03:09,599
many of them so for example if you have

01:03:08,240 --> 01:03:11,599
a hundred threads

01:03:09,599 --> 01:03:14,000
things can get interesting because every

01:03:11,599 --> 01:03:16,079
thread has an underlying os primitive

01:03:14,000 --> 01:03:17,359
underneath it right and that costs you

01:03:16,079 --> 01:03:18,640
some memory that costs you some

01:03:17,359 --> 01:03:19,839
performance and the os

01:03:18,640 --> 01:03:22,319
is going to be kind of trying to

01:03:19,839 --> 01:03:25,359
co-manage your threads

01:03:22,319 --> 01:03:26,960
together with the ruby vm so that brings

01:03:25,359 --> 01:03:29,839
us to fibers

01:03:26,960 --> 01:03:31,039
now you likely haven't used them

01:03:29,839 --> 01:03:34,079
manually

01:03:31,039 --> 01:03:36,079
and you are using them when you are

01:03:34,079 --> 01:03:37,119
using enumerator so for example if you

01:03:36,079 --> 01:03:39,280
are doing a map

01:03:37,119 --> 01:03:40,559
dot with index in ruby then

01:03:39,280 --> 01:03:42,720
congratulations you are

01:03:40,559 --> 01:03:44,559
using a fiber because you are using what

01:03:42,720 --> 01:03:46,720
is called an enumerator and due to the

01:03:44,559 --> 01:03:47,920
quirks of how the ruby virtual machine

01:03:46,720 --> 01:03:50,720
is built at the moment

01:03:47,920 --> 01:03:51,039
every enumerator is also a fiber right

01:03:50,720 --> 01:03:53,200
uh

01:03:51,039 --> 01:03:54,960
i've written an article a while ago for

01:03:53,200 --> 01:03:56,960
for the app signal blog i believe where

01:03:54,960 --> 01:03:58,000
i cover what you can do with enumerators

01:03:56,960 --> 01:04:00,960
and fibers

01:03:58,000 --> 01:04:02,799
but for the um for understanding what

01:04:00,960 --> 01:04:05,280
fibers are and what they're useful for

01:04:02,799 --> 01:04:06,559
is actually this is this is kind of the

01:04:05,280 --> 01:04:09,200
the gist of it so

01:04:06,559 --> 01:04:10,000
imagine a piece of code which executes

01:04:09,200 --> 01:04:12,400
and then just

01:04:10,000 --> 01:04:14,400
stops right it stops it doesn't mean

01:04:12,400 --> 01:04:16,960
anything it means that you can still

01:04:14,400 --> 01:04:17,960
do you know input you can continue

01:04:16,960 --> 01:04:20,480
typing into i

01:04:17,960 --> 01:04:22,319
irb you can continue handling web

01:04:20,480 --> 01:04:24,000
requests you can even process an image

01:04:22,319 --> 01:04:25,599
or do whatever you just have

01:04:24,000 --> 01:04:27,359
some block of code which got into a

01:04:25,599 --> 01:04:28,640
certain place and then somebody press

01:04:27,359 --> 01:04:29,680
the pause button right and it does

01:04:28,640 --> 01:04:33,200
nothing

01:04:29,680 --> 01:04:34,319
and uh often you would use it for

01:04:33,200 --> 01:04:37,520
example here

01:04:34,319 --> 01:04:38,400
right so you create a fiber and the

01:04:37,520 --> 01:04:41,280
fiber is called

01:04:38,400 --> 01:04:41,920
a holder of state of states holder of

01:04:41,280 --> 01:04:44,400
state

01:04:41,920 --> 01:04:45,119
and then you enter some state inside of

01:04:44,400 --> 01:04:47,520
your fiber

01:04:45,119 --> 01:04:49,039
and then you say fiber dot yield fiber

01:04:47,520 --> 01:04:50,880
dot yield is you pressing

01:04:49,039 --> 01:04:52,880
that pause button from inside the fiber

01:04:50,880 --> 01:04:55,920
so you perform some work

01:04:52,880 --> 01:04:58,319
then you say okay now my fiber is frozen

01:04:55,920 --> 01:05:00,160
do whatever whatever else is necessary

01:04:58,319 --> 01:05:01,359
and then call me back when i should

01:05:00,160 --> 01:05:05,359
resume myself

01:05:01,359 --> 01:05:07,760
and then when somebody calls us uh with

01:05:05,359 --> 01:05:09,599
the holder of state don't resume we get

01:05:07,760 --> 01:05:12,400
past the fiber dot yield

01:05:09,599 --> 01:05:13,039
line right and we exit the state that we

01:05:12,400 --> 01:05:16,880
have entered

01:05:13,039 --> 01:05:20,480
like um it's um it can sound funny like

01:05:16,880 --> 01:05:23,520
enter some state exit that state oh yeah

01:05:20,480 --> 01:05:25,520
another thing is that a fiber is really

01:05:23,520 --> 01:05:26,640
a block of code which means that you can

01:05:25,520 --> 01:05:29,440
be in a loop there

01:05:26,640 --> 01:05:30,160
so you can have an operation of entering

01:05:29,440 --> 01:05:32,799
some state

01:05:30,160 --> 01:05:34,079
and staying in that state for some time

01:05:32,799 --> 01:05:35,599
in an infinite loop

01:05:34,079 --> 01:05:37,760
and you can resume it all the time

01:05:35,599 --> 01:05:40,160
because this block of code

01:05:37,760 --> 01:05:41,599
it will actually be resumable an

01:05:40,160 --> 01:05:43,760
infinite number of times

01:05:41,599 --> 01:05:44,960
as long as inside of this block of code

01:05:43,760 --> 01:05:47,760
you break out of your

01:05:44,960 --> 01:05:49,200
loop loop do construct and so your fiber

01:05:47,760 --> 01:05:50,880
is not going to

01:05:49,200 --> 01:05:53,039
not going to terminate with the setup

01:05:50,880 --> 01:05:54,960
right now

01:05:53,039 --> 01:05:57,599
with the first time i saw code using

01:05:54,960 --> 01:05:59,760
fibers my thought was like

01:05:57,599 --> 01:06:01,359
who would ever need this like why would

01:05:59,760 --> 01:06:04,000
you do this

01:06:01,359 --> 01:06:05,920
and uh some time ago i've encountered a

01:06:04,000 --> 01:06:08,319
case where you can actually use fibers

01:06:05,920 --> 01:06:11,280
for something very very very useful

01:06:08,319 --> 01:06:13,039
and you can do a trick like this now we

01:06:11,280 --> 01:06:14,480
are testing some kind of lock right and

01:06:13,039 --> 01:06:15,200
we need to test that the lock is

01:06:14,480 --> 01:06:17,280
acquired

01:06:15,200 --> 01:06:19,599
and that the lock gets uh that the log

01:06:17,280 --> 01:06:21,440
gets kept we try to do something which

01:06:19,599 --> 01:06:22,799
checks for this lock being locked and

01:06:21,440 --> 01:06:25,200
fails for example

01:06:22,799 --> 01:06:27,520
right and this way we have a test which

01:06:25,200 --> 01:06:29,200
ensures that our locking system is good

01:06:27,520 --> 01:06:31,200
and then you can do it with a fiber like

01:06:29,200 --> 01:06:33,440
so so we create a fiber which

01:06:31,200 --> 01:06:34,960
acquires a lock and then just hangs in

01:06:33,440 --> 01:06:38,000
there right

01:06:34,960 --> 01:06:40,480
and then we can resume that fiber

01:06:38,000 --> 01:06:42,079
we know that a lock is held in that

01:06:40,480 --> 01:06:43,359
fiber right and then we say assert

01:06:42,079 --> 01:06:46,079
equals whole leg

01:06:43,359 --> 01:06:46,400
held locks count and that equals one so

01:06:46,079 --> 01:06:48,000
we

01:06:46,400 --> 01:06:49,280
have some way of knowing how many looks

01:06:48,000 --> 01:06:49,760
we have acquired and then we have one

01:06:49,280 --> 01:06:53,039
lock

01:06:49,760 --> 01:06:56,160
right and we hold it and then we call

01:06:53,039 --> 01:06:58,240
our uh testable lock state with resume

01:06:56,160 --> 01:06:59,920
and it means that we continue past the

01:06:58,240 --> 01:07:00,880
fiber dot yield and we go to some lock

01:06:59,920 --> 01:07:02,319
dot release

01:07:00,880 --> 01:07:03,920
and it means our log gets released and

01:07:02,319 --> 01:07:04,799
we then test for when the load gets

01:07:03,920 --> 01:07:07,520
released

01:07:04,799 --> 01:07:09,280
this looks extremely stupid because you

01:07:07,520 --> 01:07:10,720
say oh if you say some lock equals

01:07:09,280 --> 01:07:12,160
acquire locan then you do the fiber

01:07:10,720 --> 01:07:12,480
yield why the hell do you need the fiber

01:07:12,160 --> 01:07:15,599
for

01:07:12,480 --> 01:07:16,559
well that's where the code blocks come

01:07:15,599 --> 01:07:18,960
into place right

01:07:16,559 --> 01:07:20,799
because there are actually a lot of apis

01:07:18,960 --> 01:07:24,480
in ruby which work like this

01:07:20,799 --> 01:07:26,319
right so you use a ruby block to enter a

01:07:24,480 --> 01:07:29,839
certain piece of state

01:07:26,319 --> 01:07:32,160
and you need to check whether certain

01:07:29,839 --> 01:07:33,200
side effects can be observed when this

01:07:32,160 --> 01:07:34,960
state has been

01:07:33,200 --> 01:07:37,520
when this state is in effect right and

01:07:34,960 --> 01:07:40,240
so if you have a block which gives you

01:07:37,520 --> 01:07:40,720
um if if you have a block which puts you

01:07:40,240 --> 01:07:42,720
in

01:07:40,720 --> 01:07:44,319
which requires you a lock and holds that

01:07:42,720 --> 01:07:47,119
lock for you right

01:07:44,319 --> 01:07:48,160
then you can only test this effectively

01:07:47,119 --> 01:07:50,799
with

01:07:48,160 --> 01:07:51,599
uh with a fiber and then what happens

01:07:50,799 --> 01:07:54,880
here is that

01:07:51,599 --> 01:07:56,000
we enter this block inside with lock

01:07:54,880 --> 01:07:58,319
acquired and then we

01:07:56,000 --> 01:07:59,680
suspend inside that block and then if we

01:07:58,319 --> 01:08:00,480
are testing our locking solution this

01:07:59,680 --> 01:08:04,640
means that we can

01:08:00,480 --> 01:08:05,520
always uh reliably and deterministically

01:08:04,640 --> 01:08:08,079
ensure

01:08:05,520 --> 01:08:08,960
that when we make this assertion we are

01:08:08,079 --> 01:08:12,079
hanging here

01:08:08,960 --> 01:08:14,079
with the lock acquired right and

01:08:12,079 --> 01:08:15,119
for for instance testing things which

01:08:14,079 --> 01:08:18,319
are

01:08:15,119 --> 01:08:19,279
a little bit concurrent maybe this is

01:08:18,319 --> 01:08:22,719
very useful

01:08:19,279 --> 01:08:26,319
one of the reasons is that those fibers

01:08:22,719 --> 01:08:28,319
you determine when they resume running

01:08:26,319 --> 01:08:29,759
and when they stop running and only one

01:08:28,319 --> 01:08:30,159
can run at the same time meaning that

01:08:29,759 --> 01:08:32,239
you

01:08:30,159 --> 01:08:33,600
have deterministic concurrency here

01:08:32,239 --> 01:08:37,040
right

01:08:33,600 --> 01:08:40,319
now uh resuming uh

01:08:37,040 --> 01:08:42,560
you don't have to resume a fiber once

01:08:40,319 --> 01:08:43,679
you can resume it uh an unlimited number

01:08:42,560 --> 01:08:45,920
of times

01:08:43,679 --> 01:08:47,520
and the funny thing is that uh the way

01:08:45,920 --> 01:08:48,880
it would work is that if you have a lot

01:08:47,520 --> 01:08:50,560
of those fibers what you would be

01:08:48,880 --> 01:08:51,759
actually doing is you would be picking

01:08:50,560 --> 01:08:53,600
which fiber is

01:08:51,759 --> 01:08:55,440
more economical to resume right now for

01:08:53,600 --> 01:08:58,000
example you have one fiber

01:08:55,440 --> 01:08:59,679
which does something with a slow client

01:08:58,000 --> 01:09:01,359
you don't want to resume that fiber

01:08:59,679 --> 01:09:02,400
because your client is not ready to send

01:09:01,359 --> 01:09:04,000
you data

01:09:02,400 --> 01:09:05,920
but you have a second fiber which has a

01:09:04,000 --> 01:09:06,319
fast client and then you would resume

01:09:05,920 --> 01:09:07,920
that

01:09:06,319 --> 01:09:10,080
second fiber first and then you would

01:09:07,920 --> 01:09:14,080
try resuming the first fiber again

01:09:10,080 --> 01:09:16,000
right when multiple fibers exist

01:09:14,080 --> 01:09:17,199
in your address space what happens is

01:09:16,000 --> 01:09:19,520
that they

01:09:17,199 --> 01:09:21,040
exist at the same time they are alive at

01:09:19,520 --> 01:09:22,080
the same time but only one can be

01:09:21,040 --> 01:09:24,880
running like i said

01:09:22,080 --> 01:09:26,480
they're sequential right so if to make

01:09:24,880 --> 01:09:29,120
it easier you can always say

01:09:26,480 --> 01:09:30,480
fibers are for sequential execution and

01:09:29,120 --> 01:09:32,000
then think about the concurrency

01:09:30,480 --> 01:09:35,600
implications

01:09:32,000 --> 01:09:37,359
how would you do like um uh a web server

01:09:35,600 --> 01:09:38,960
which uses fibers

01:09:37,359 --> 01:09:40,400
likely you would have something like

01:09:38,960 --> 01:09:42,159
this right so

01:09:40,400 --> 01:09:43,839
you would have some kind of a client

01:09:42,159 --> 01:09:45,440
socket object that you read from and

01:09:43,839 --> 01:09:47,920
that you write into

01:09:45,440 --> 01:09:48,640
and then you would uh create a fiber

01:09:47,920 --> 01:09:52,159
which is

01:09:48,640 --> 01:09:54,320
dedicated to this particular http uh

01:09:52,159 --> 01:09:56,080
http connection to this particular web

01:09:54,320 --> 01:09:57,120
server client which is connected from

01:09:56,080 --> 01:10:00,880
the internet to you

01:09:57,120 --> 01:10:02,000
right and then you would feed the data

01:10:00,880 --> 01:10:04,400
from this

01:10:02,000 --> 01:10:05,120
from this http connection to your http

01:10:04,400 --> 01:10:06,800
parser

01:10:05,120 --> 01:10:08,800
and then you would grab for instance one

01:10:06,800 --> 01:10:10,960
of your rails controllers

01:10:08,800 --> 01:10:12,640
and you would call the action on that

01:10:10,960 --> 01:10:14,640
rails controller receive a result and

01:10:12,640 --> 01:10:17,040
then write the result into the client

01:10:14,640 --> 01:10:18,400
right so far this is like very

01:10:17,040 --> 01:10:21,679
straightforward code

01:10:18,400 --> 01:10:23,760
uh it looks just like any other

01:10:21,679 --> 01:10:26,000
web server code would look and that's

01:10:23,760 --> 01:10:28,560
true but

01:10:26,000 --> 01:10:29,360
the interesting part will happen here

01:10:28,560 --> 01:10:32,400
right

01:10:29,360 --> 01:10:35,040
so imagine that when

01:10:32,400 --> 01:10:35,760
your web server encounters some kind of

01:10:35,040 --> 01:10:39,120
slowness

01:10:35,760 --> 01:10:42,239
for example during do do during its uh

01:10:39,120 --> 01:10:44,880
reading of the upload that

01:10:42,239 --> 01:10:46,239
the internet customer has sent to your

01:10:44,880 --> 01:10:47,679
to your web server for example if

01:10:46,239 --> 01:10:48,800
they're uploading a file to you or if

01:10:47,679 --> 01:10:51,360
they're sending some

01:10:48,800 --> 01:10:53,360
a csv for instance or a large json

01:10:51,360 --> 01:10:55,840
request right and they are slow

01:10:53,360 --> 01:10:56,719
and you cannot read fast enough or if

01:10:55,840 --> 01:10:58,640
you are if

01:10:56,719 --> 01:11:00,640
your rails controller does a mice

01:10:58,640 --> 01:11:03,360
there's a there's a mysql or a postgres

01:11:00,640 --> 01:11:05,840
query which is taking a really long time

01:11:03,360 --> 01:11:06,400
right what we can do then inside of a

01:11:05,840 --> 01:11:08,480
fiber

01:11:06,400 --> 01:11:10,400
if something gets slow we can say fiber

01:11:08,480 --> 01:11:11,600
dot yield which means that we are

01:11:10,400 --> 01:11:13,920
waiting on something

01:11:11,600 --> 01:11:14,880
and something else can do useful work

01:11:13,920 --> 01:11:18,400
while we wait

01:11:14,880 --> 01:11:22,480
right uh and this means that in every

01:11:18,400 --> 01:11:24,800
uh in in every operation which can

01:11:22,480 --> 01:11:26,800
wait for something or every operation

01:11:24,800 --> 01:11:27,520
which can encounter slowness of some

01:11:26,800 --> 01:11:31,679
kind

01:11:27,520 --> 01:11:35,120
what you actually want is that you want

01:11:31,679 --> 01:11:36,480
automatic automatic posing so you want

01:11:35,120 --> 01:11:38,840
every operation which can

01:11:36,480 --> 01:11:40,000
which can be consuming resources on

01:11:38,840 --> 01:11:43,520
waiting

01:11:40,000 --> 01:11:46,800
to yield right uh and

01:11:43,520 --> 01:11:49,760
with the basically you want this right

01:11:46,800 --> 01:11:50,960
so you want uh you want your database

01:11:49,760 --> 01:11:54,159
query methods to

01:11:50,960 --> 01:11:55,679
uh to to yield to fiber yields when they

01:11:54,159 --> 01:11:57,920
will be waiting you want your i o

01:11:55,679 --> 01:12:00,480
methods to eat at the minimum

01:11:57,920 --> 01:12:02,159
uh how is this better than threads uh

01:12:00,480 --> 01:12:04,000
fibers are way cheaper like i said you

01:12:02,159 --> 01:12:04,560
can easily create a hundred thousand of

01:12:04,000 --> 01:12:07,840
them

01:12:04,560 --> 01:12:09,520
uh and uh your ruby virtual machine will

01:12:07,840 --> 01:12:11,440
be fine if you create a hundred thousand

01:12:09,520 --> 01:12:15,600
threads it will be quite quite painful

01:12:11,440 --> 01:12:18,719
right um and they consume

01:12:15,600 --> 01:12:20,239
less memory fibers and they are also

01:12:18,719 --> 01:12:21,679
deterministic in the sense that they are

01:12:20,239 --> 01:12:24,400
sequential so you can

01:12:21,679 --> 01:12:26,640
make you you can reason easier about

01:12:24,400 --> 01:12:29,920
which fiber is going to run first

01:12:26,640 --> 01:12:32,320
and um that's kind of

01:12:29,920 --> 01:12:33,760
the first part of the equation and the

01:12:32,320 --> 01:12:36,800
thing that it's important to

01:12:33,760 --> 01:12:38,320
to to know is that this is like the two

01:12:36,800 --> 01:12:39,920
the two methods so we have the pause

01:12:38,320 --> 01:12:41,280
button and the resume button which is

01:12:39,920 --> 01:12:42,960
the play button

01:12:41,280 --> 01:12:44,880
and the first innovation that we get in

01:12:42,960 --> 01:12:47,120
ruby 3.0 is you can

01:12:44,880 --> 01:12:48,800
make it so that pretty much all of the i

01:12:47,120 --> 01:12:50,080
operations in your virtual machine

01:12:48,800 --> 01:12:53,040
automatically are going to

01:12:50,080 --> 01:12:54,000
call fiber dot yield for you like how

01:12:53,040 --> 01:12:56,400
awesome is that

01:12:54,000 --> 01:12:57,120
so you can you can start developing a

01:12:56,400 --> 01:12:59,520
fiber-based

01:12:57,120 --> 01:13:01,600
web server or a fiber-based chat server

01:12:59,520 --> 01:13:03,600
or a client now

01:13:01,600 --> 01:13:05,360
and you can just by configuring your

01:13:03,600 --> 01:13:07,840
ruby virtual machine in some way

01:13:05,360 --> 01:13:09,199
you can make it so that every i o

01:13:07,840 --> 01:13:11,840
operation that you do

01:13:09,199 --> 01:13:13,199
is going to call fiber yield

01:13:11,840 --> 01:13:16,320
automatically

01:13:13,199 --> 01:13:18,239
uh so that um so that you do not have to

01:13:16,320 --> 01:13:19,679
manually implement this functionality in

01:13:18,239 --> 01:13:21,040
your in your application code or in your

01:13:19,679 --> 01:13:24,480
library or whatever

01:13:21,040 --> 01:13:26,719
and the trick is that you also need

01:13:24,480 --> 01:13:28,640
something that resumes your fiber so you

01:13:26,719 --> 01:13:29,679
can yield from the fiber that's really

01:13:28,640 --> 01:13:32,400
cool right you can

01:13:29,679 --> 01:13:33,199
pause your work but you also need

01:13:32,400 --> 01:13:36,480
something to

01:13:33,199 --> 01:13:38,239
restart the work once uh once it's known

01:13:36,480 --> 01:13:40,000
that your work may continue for example

01:13:38,239 --> 01:13:42,159
your client has finally sent you some

01:13:40,000 --> 01:13:44,960
data and you can process it right

01:13:42,159 --> 01:13:45,520
and most likely this looks kind of like

01:13:44,960 --> 01:13:47,920
so

01:13:45,520 --> 01:13:49,360
right if you have a web server then you

01:13:47,920 --> 01:13:52,000
would have some kind of loop

01:13:49,360 --> 01:13:53,120
which has a choice between multiple

01:13:52,000 --> 01:13:54,960
connected clients

01:13:53,120 --> 01:13:57,280
and by using some logic or some

01:13:54,960 --> 01:13:58,480
heuristic it's going to determine which

01:13:57,280 --> 01:14:01,360
of these clients

01:13:58,480 --> 01:14:03,280
can uh can be worked with now and it's

01:14:01,360 --> 01:14:04,159
going to resume the fiber which contains

01:14:03,280 --> 01:14:07,840
that client

01:14:04,159 --> 01:14:10,719
right um and that's what the

01:14:07,840 --> 01:14:12,239
fiber scheduler api has in stock for us

01:14:10,719 --> 01:14:13,920
it literally allows us to say

01:14:12,239 --> 01:14:17,120
within this thread we're going to be

01:14:13,920 --> 01:14:18,800
using this scheduler a scheduler is for

01:14:17,120 --> 01:14:20,480
our intents and purposes just a ruby

01:14:18,800 --> 01:14:22,640
object which has some methods and you

01:14:20,480 --> 01:14:24,400
don't have to write your own you can

01:14:22,640 --> 01:14:26,719
you can grab one like a libreview

01:14:24,400 --> 01:14:29,280
scheduler etc

01:14:26,719 --> 01:14:29,840
and uh in that instance all of your

01:14:29,280 --> 01:14:32,960
fibers

01:14:29,840 --> 01:14:35,760
which are going to uh have to be resumed

01:14:32,960 --> 01:14:36,480
uh are going to be resumed by this

01:14:35,760 --> 01:14:39,520
scheduler

01:14:36,480 --> 01:14:41,040
so for example you don't need to uh play

01:14:39,520 --> 01:14:43,679
around with neo4r

01:14:41,040 --> 01:14:44,480
for example if you want to have a have a

01:14:43,679 --> 01:14:46,880
web server

01:14:44,480 --> 01:14:48,880
you don't you don't need to ensure that

01:14:46,880 --> 01:14:50,239
your fibers get rescheduled at some

01:14:48,880 --> 01:14:51,280
point later in the future if your

01:14:50,239 --> 01:14:54,320
clients disconnect

01:14:51,280 --> 01:14:56,400
etc etc etc this scheduler is supposed

01:14:54,320 --> 01:14:58,480
to do all of this for you automatically

01:14:56,400 --> 01:14:59,760
and so that's why that's a really

01:14:58,480 --> 01:15:02,480
important feature

01:14:59,760 --> 01:15:04,320
and the thing is that you know the

01:15:02,480 --> 01:15:04,960
concurrency that you can have with

01:15:04,320 --> 01:15:07,040
fibers

01:15:04,960 --> 01:15:09,199
exactly because of this sequential

01:15:07,040 --> 01:15:10,960
nature and manual pausing it's

01:15:09,199 --> 01:15:12,800
i can tell you it's way nicer than

01:15:10,960 --> 01:15:15,199
javascript promises right and

01:15:12,800 --> 01:15:17,120
let's remember that node.js like it

01:15:15,199 --> 01:15:18,640
started because people didn't like

01:15:17,120 --> 01:15:19,360
having to do concurrency with threads

01:15:18,640 --> 01:15:21,520
right

01:15:19,360 --> 01:15:22,560
it's way nicer than python async await

01:15:21,520 --> 01:15:25,600
because it does not

01:15:22,560 --> 01:15:27,920
give your functions color in the in ruby

01:15:25,600 --> 01:15:31,920
3.0 you can have a situation where

01:15:27,920 --> 01:15:34,560
you can call all the functions doing io

01:15:31,920 --> 01:15:36,000
as if they were sync but they will do a

01:15:34,560 --> 01:15:37,360
synchronous stuff for you they will

01:15:36,000 --> 01:15:39,440
yield for you which is

01:15:37,360 --> 01:15:40,400
very similar to what you have in uh

01:15:39,440 --> 01:15:43,360
erlang and beam

01:15:40,400 --> 01:15:44,239
and elixir they're nicer than ghost core

01:15:43,360 --> 01:15:46,320
routines because

01:15:44,239 --> 01:15:48,000
they do not impose channels on you and

01:15:46,320 --> 01:15:49,120
you don't have to do like channel select

01:15:48,000 --> 01:15:51,040
and things like that

01:15:49,120 --> 01:15:52,640
and it's basically just as nice as

01:15:51,040 --> 01:15:54,159
crystal because surprise surprise

01:15:52,640 --> 01:15:56,640
crystal from the beginning had

01:15:54,159 --> 01:15:58,719
uh fibers fiber-based concurrency and it

01:15:56,640 --> 01:16:01,199
worked exceptionally well

01:15:58,719 --> 01:16:02,719
now we're getting to the last part and

01:16:01,199 --> 01:16:04,320
here this this so this is where

01:16:02,719 --> 01:16:08,320
fear-mongering begins right

01:16:04,320 --> 01:16:08,320
uh let's be let's be clear about this so

01:16:08,640 --> 01:16:12,719
let's not pretend right people do want

01:16:12,080 --> 01:16:15,760
to handle

01:16:12,719 --> 01:16:18,320
a ton of connections on their single

01:16:15,760 --> 01:16:19,520
application node right people do want to

01:16:18,320 --> 01:16:23,120
have a server

01:16:19,520 --> 01:16:26,000
server updated live view with their

01:16:23,120 --> 01:16:26,800
with their tables and their graphs uh

01:16:26,000 --> 01:16:30,800
and their input

01:16:26,800 --> 01:16:31,840
elements right this kind of concurrency

01:16:30,800 --> 01:16:35,760
was the reason

01:16:31,840 --> 01:16:38,400
node was created because uh uh uh

01:16:35,760 --> 01:16:39,920
randall when he initially presented node

01:16:38,400 --> 01:16:42,560
even before it was

01:16:39,920 --> 01:16:44,640
uh shepherded by joint he said you know

01:16:42,560 --> 01:16:47,280
threat for web servers threads are out

01:16:44,640 --> 01:16:48,320
and you once you want evented io well

01:16:47,280 --> 01:16:50,960
evented io

01:16:48,320 --> 01:16:51,600
then has to be used in some way by the

01:16:50,960 --> 01:16:54,080
client

01:16:51,600 --> 01:16:55,760
and that's going to be either callbacks

01:16:54,080 --> 01:16:57,520
or it's going to be actors or it's going

01:16:55,760 --> 01:17:00,800
to be goroutines or it's going to be

01:16:57,520 --> 01:17:02,640
fibers but some way

01:17:00,800 --> 01:17:04,480
this has to be present you know better

01:17:02,640 --> 01:17:06,640
concurrency is why a lot of people

01:17:04,480 --> 01:17:09,600
went to go because in go you can create

01:17:06,640 --> 01:17:11,840
10 000 or 50 000 go routines and

01:17:09,600 --> 01:17:13,679
what are these go routines well they are

01:17:11,840 --> 01:17:15,520
just the same thing they're basically

01:17:13,679 --> 01:17:18,800
those same fibers right they are

01:17:15,520 --> 01:17:21,520
abstract constructs which the go runtime

01:17:18,800 --> 01:17:22,880
schedules onto actual threads when the

01:17:21,520 --> 01:17:26,320
go runtime thinks that

01:17:22,880 --> 01:17:28,239
it's it it's appropriate to do um and

01:17:26,320 --> 01:17:30,239
better concurrency the presence the the

01:17:28,239 --> 01:17:30,640
presence of async await is why people

01:17:30,239 --> 01:17:32,719
are

01:17:30,640 --> 01:17:34,480
moving their applications from python

01:17:32,719 --> 01:17:37,679
two to python three

01:17:34,480 --> 01:17:39,600
right uh and certain things that we

01:17:37,679 --> 01:17:40,080
might want to have in our applications

01:17:39,600 --> 01:17:42,320
like

01:17:40,080 --> 01:17:43,360
phoenix live view right it's only viable

01:17:42,320 --> 01:17:45,600
when you can have

01:17:43,360 --> 01:17:47,360
cheaply a lot of people connected to

01:17:45,600 --> 01:17:48,000
your application at the same time and

01:17:47,360 --> 01:17:50,880
idling

01:17:48,000 --> 01:17:52,239
right certain features should not

01:17:50,880 --> 01:17:55,520
require you to run

01:17:52,239 --> 01:17:57,600
a separate process written in a separate

01:17:55,520 --> 01:17:59,360
programming language just for the sake

01:17:57,600 --> 01:18:01,679
of having those people connected

01:17:59,360 --> 01:18:03,600
uh to you without you know running 50

01:18:01,679 --> 01:18:06,719
servers instead of instead of two

01:18:03,600 --> 01:18:08,800
right so there is a class of tasks

01:18:06,719 --> 01:18:10,719
which without having this concurrency we

01:18:08,800 --> 01:18:12,560
cannot do with the ruby programming

01:18:10,719 --> 01:18:14,880
language and this is where

01:18:12,560 --> 01:18:15,840
things get difficult because if you are

01:18:14,880 --> 01:18:18,080
a company

01:18:15,840 --> 01:18:19,600
who is now evaluating which stack to

01:18:18,080 --> 01:18:22,640
choose right

01:18:19,600 --> 01:18:23,440
then you know there is always team

01:18:22,640 --> 01:18:25,840
purple

01:18:23,440 --> 01:18:27,520
and there is always team yellow and

01:18:25,840 --> 01:18:29,920
there is always team bondi

01:18:27,520 --> 01:18:31,520
and if you are say an engineering

01:18:29,920 --> 01:18:33,840
manager on a polyglot team

01:18:31,520 --> 01:18:36,080
and then they are saying oh so you know

01:18:33,840 --> 01:18:38,000
we can write this application in rails

01:18:36,080 --> 01:18:39,840
but we are likely going to be getting

01:18:38,000 --> 01:18:41,840
some web sockets and yeah i heard that

01:18:39,840 --> 01:18:42,560
web sockets they use so much memory that

01:18:41,840 --> 01:18:44,320
we can never

01:18:42,560 --> 01:18:45,679
yeah we can we can never implement this

01:18:44,320 --> 01:18:48,960
in ruby and

01:18:45,679 --> 01:18:50,880
when if you are realistic as an engineer

01:18:48,960 --> 01:18:54,000
manager you'll say okay we move to

01:18:50,880 --> 01:18:56,480
we move up left upright or

01:18:54,000 --> 01:18:57,840
downwards or if you are an extremist you

01:18:56,480 --> 01:18:59,520
would say yeah let's try let's try

01:18:57,840 --> 01:19:03,120
crystal but basically

01:18:59,520 --> 01:19:05,440
those people and those challenges

01:19:03,120 --> 01:19:07,199
in developing applications for people

01:19:05,440 --> 01:19:07,600
they they go away and they don't come

01:19:07,199 --> 01:19:10,320
back

01:19:07,600 --> 01:19:11,920
and that's how how our ecosystem shrinks

01:19:10,320 --> 01:19:15,920
that's that that that's actually

01:19:11,920 --> 01:19:17,840
the important part right so why

01:19:15,920 --> 01:19:19,920
this fiber scheduler matters to you

01:19:17,840 --> 01:19:23,520
ultimately it's because

01:19:19,920 --> 01:19:25,760
i believe that if we do not adopt this

01:19:23,520 --> 01:19:27,600
right the ecosystem is going to continue

01:19:25,760 --> 01:19:31,360
dying

01:19:27,600 --> 01:19:33,040
and again it enables new classes of

01:19:31,360 --> 01:19:34,719
applications being built

01:19:33,040 --> 01:19:35,920
it makes hosting ruby applications

01:19:34,719 --> 01:19:37,679
cheaper because if you get cheaper

01:19:35,920 --> 01:19:38,880
concurrency you need less memory and you

01:19:37,679 --> 01:19:41,280
need less machines

01:19:38,880 --> 01:19:43,440
less kubernetes pods less whatever you

01:19:41,280 --> 01:19:45,920
haves which runs your application

01:19:43,440 --> 01:19:46,960
and it's made it makes it easier and in

01:19:45,920 --> 01:19:49,280
some way

01:19:46,960 --> 01:19:50,000
i would say this is one of the things

01:19:49,280 --> 01:19:53,840
which

01:19:50,000 --> 01:19:56,719
uh makes it permissible again to suggest

01:19:53,840 --> 01:19:57,600
ruby for a greenfield system development

01:19:56,719 --> 01:20:00,159
right

01:19:57,600 --> 01:20:01,440
so what can we what can we as just a

01:20:00,159 --> 01:20:04,719
journeyman developers

01:20:01,440 --> 01:20:06,639
do if we want to uh

01:20:04,719 --> 01:20:08,719
to to try this or if we want to see

01:20:06,639 --> 01:20:11,280
whether this initiative can succeed so

01:20:08,719 --> 01:20:11,760
one of the important parts is that at

01:20:11,280 --> 01:20:13,920
least

01:20:11,760 --> 01:20:15,280
we should try to develop applications

01:20:13,920 --> 01:20:17,600
which do not use rails

01:20:15,280 --> 01:20:18,880
why because all of the innovations of

01:20:17,600 --> 01:20:21,120
the ruby ecosystem

01:20:18,880 --> 01:20:22,320
end up in rails maybe two years after

01:20:21,120 --> 01:20:25,440
they happen maybe

01:20:22,320 --> 01:20:27,520
three years they have to be adopted by

01:20:25,440 --> 01:20:28,480
a relatively large number of

01:20:27,520 --> 01:20:31,199
stakeholders

01:20:28,480 --> 01:20:33,360
which use rails right and by the time

01:20:31,199 --> 01:20:34,480
that happens in rails like for example i

01:20:33,360 --> 01:20:36,800
don't know when

01:20:34,480 --> 01:20:37,600
uh active record is going to be fully

01:20:36,800 --> 01:20:39,840
working well

01:20:37,600 --> 01:20:41,520
with the fiber with the fiber scheduler

01:20:39,840 --> 01:20:42,880
api it might be this year

01:20:41,520 --> 01:20:44,880
might be end of this year it might be

01:20:42,880 --> 01:20:46,719
start of next year uh or

01:20:44,880 --> 01:20:48,239
it might be or it might not happen

01:20:46,719 --> 01:20:49,440
because there's going to be some debate

01:20:48,239 --> 01:20:52,000
between the author of the

01:20:49,440 --> 01:20:53,360
postgres of the postgres driver and the

01:20:52,000 --> 01:20:56,080
and my sequel driver

01:20:53,360 --> 01:20:57,440
in in reality we don't know right so the

01:20:56,080 --> 01:20:59,520
first thing that you can do is

01:20:57,440 --> 01:21:00,480
try to write an application without

01:20:59,520 --> 01:21:02,639
rails again

01:21:00,480 --> 01:21:04,159
and see whether the workload that this

01:21:02,639 --> 01:21:07,040
application has can be fit

01:21:04,159 --> 01:21:09,199
into this new fiber concurrency uh setup

01:21:07,040 --> 01:21:11,679
right so that would be one suggestion

01:21:09,199 --> 01:21:12,560
second suggestion that i would have uh

01:21:11,679 --> 01:21:14,320
if you have

01:21:12,560 --> 01:21:16,239
an application which doesn't run on

01:21:14,320 --> 01:21:18,159
rails try running it on falcon and

01:21:16,239 --> 01:21:21,520
falcon is like

01:21:18,159 --> 01:21:23,840
the the first and the most

01:21:21,520 --> 01:21:24,719
intensely developed web server which

01:21:23,840 --> 01:21:27,760
which implements

01:21:24,719 --> 01:21:29,520
concurrency uh using fibers

01:21:27,760 --> 01:21:31,600
and so you you you are likely to

01:21:29,520 --> 01:21:32,960
discover quite a few interesting things

01:21:31,600 --> 01:21:36,400
in there

01:21:32,960 --> 01:21:38,880
if you try it and uh recently uh

01:21:36,400 --> 01:21:40,320
there came a pull request which adds a

01:21:38,880 --> 01:21:41,920
fiber scheduler to puma

01:21:40,320 --> 01:21:43,600
so for example if you have an

01:21:41,920 --> 01:21:45,600
application which is not in production

01:21:43,600 --> 01:21:45,920
and that you can run some load testing

01:21:45,600 --> 01:21:47,760
on

01:21:45,920 --> 01:21:50,320
well you know what you can check out

01:21:47,760 --> 01:21:51,920
this branch of the puma repo and you can

01:21:50,320 --> 01:21:53,360
just try starting your application on

01:21:51,920 --> 01:21:55,679
puma and see what happens you know

01:21:53,360 --> 01:21:57,280
see how many connections you uh you can

01:21:55,679 --> 01:22:00,719
you can handle

01:21:57,280 --> 01:22:02,800
um who to follow uh so

01:22:00,719 --> 01:22:03,840
first and foremost samuel williams

01:22:02,800 --> 01:22:06,960
samuel is an

01:22:03,840 --> 01:22:08,080
amazing person and he is behind both the

01:22:06,960 --> 01:22:12,320
fiber scheduler

01:22:08,080 --> 01:22:15,679
api and the falcon web server

01:22:12,320 --> 01:22:17,120
and he also has published a lot of

01:22:15,679 --> 01:22:19,520
research on the topic of

01:22:17,120 --> 01:22:21,440
why this fiber-based concurrency is

01:22:19,520 --> 01:22:24,639
actually the answer for us at the moment

01:22:21,440 --> 01:22:26,960
and why it deserves full attention and

01:22:24,639 --> 01:22:29,120
the youtube link that you have here is a

01:22:26,960 --> 01:22:30,639
link to his presentation on the ruby

01:22:29,120 --> 01:22:33,440
kaigee i think

01:22:30,639 --> 01:22:34,080
where he explains his points in in more

01:22:33,440 --> 01:22:37,440
detail

01:22:34,080 --> 01:22:40,560
he's an amazing person follow him and

01:22:37,440 --> 01:22:44,159
last but not least uh the treat is that

01:22:40,560 --> 01:22:47,840
on the next uh amsterdam rb session

01:22:44,159 --> 01:22:49,520
um as far as i know mr van der hillen is

01:22:47,840 --> 01:22:51,679
going to drop by and actually

01:22:49,520 --> 01:22:52,800
tell you how a schedule looks like from

01:22:51,679 --> 01:22:54,719
up close

01:22:52,800 --> 01:22:56,960
what you need to watch out for if you're

01:22:54,719 --> 01:22:58,639
using one and also what kind of

01:22:56,960 --> 01:23:00,719
problems you can encounter if those

01:22:58,639 --> 01:23:02,159
fibers are not a proper to be

01:23:00,719 --> 01:23:04,480
because they're supposed to be

01:23:02,159 --> 01:23:05,920
cooperative sequential processes but

01:23:04,480 --> 01:23:08,239
what if one of them is not so

01:23:05,920 --> 01:23:10,639
cooperative one that is going to

01:23:08,239 --> 01:23:12,080
talk about this in more detail uh i

01:23:10,639 --> 01:23:15,280
think we're already over time

01:23:12,080 --> 01:23:17,679
but that was all thank you very much

01:23:15,280 --> 01:23:19,440
and uh i hope i uh i hope i could i

01:23:17,679 --> 01:23:21,840
could inspire you to look into fibrous a

01:23:19,440 --> 01:23:21,840
little bit

01:23:24,400 --> 01:23:29,520
thank you thank you very much julie yes

01:23:29,840 --> 01:23:34,000
it's the best explanation of what

01:23:31,760 --> 01:23:36,000
concurrency is versus parallelism

01:23:34,000 --> 01:23:37,360
in in terms of threats that i've ever

01:23:36,000 --> 01:23:39,360
heard uh

01:23:37,360 --> 01:23:40,960
also i want to confess that only 20

01:23:39,360 --> 01:23:44,560
minutes in i got like

01:23:40,960 --> 01:23:48,000
oh it's fiber because of threats

01:23:44,560 --> 01:23:49,840
i am so ashamed the fight probably the

01:23:48,000 --> 01:23:50,880
next unit is like hair splitting i don't

01:23:49,840 --> 01:23:52,320
know but

01:23:50,880 --> 01:23:54,400
that's what that's why they called it

01:23:52,320 --> 01:23:56,560
like that yeah

01:23:54,400 --> 01:23:58,880
there's this like why is that there and

01:23:56,560 --> 01:24:00,480
then i'm such an idiot

01:23:58,880 --> 01:24:02,639
it's fine you're just a little bit

01:24:00,480 --> 01:24:04,080
concurrent it's fine

01:24:02,639 --> 01:24:06,560
arnold what was you say what were you

01:24:04,080 --> 01:24:08,320
saying regarding

01:24:06,560 --> 01:24:10,560
see i was trying to concurrent with arno

01:24:08,320 --> 01:24:10,560
and uh

01:24:11,520 --> 01:24:16,560
yeah nice i'm just gonna fiber yields

01:24:14,159 --> 01:24:18,480
here so go go ahead

01:24:16,560 --> 01:24:20,480
all right so i don't know what happens

01:24:18,480 --> 01:24:23,679
then do we have time for questions or

01:24:20,480 --> 01:24:25,840
um i mean we are amsterdam ruby meet up

01:24:23,679 --> 01:24:25,840
so

01:24:26,560 --> 01:24:30,560
how do we know about this we have a

01:24:28,480 --> 01:24:33,280
couple of questions uh in in

01:24:30,560 --> 01:24:35,280
slack and uh i think we have a couple of

01:24:33,280 --> 01:24:35,679
questions for our own let me just scroll

01:24:35,280 --> 01:24:38,960
back

01:24:35,679 --> 01:24:40,400
a bit more oh we have we started with

01:24:38,960 --> 01:24:41,520
passion of course because we had

01:24:40,400 --> 01:24:44,400
confusion about the

01:24:41,520 --> 01:24:45,440
the fibers and uh and then we had the

01:24:44,400 --> 01:24:49,760
yarn pulled in

01:24:45,440 --> 01:24:49,760
and then uh so okay

01:24:50,080 --> 01:24:56,400
sorry yes yeah we were triggered

01:24:53,520 --> 01:24:57,360
um okay so and then we have uh we have a

01:24:56,400 --> 01:24:59,360
bit of a

01:24:57,360 --> 01:25:00,560
i think a miscommunication about go

01:24:59,360 --> 01:25:04,080
routine versus

01:25:00,560 --> 01:25:04,639
co-routine uh so we have a question here

01:25:04,080 --> 01:25:08,480
from

01:25:04,639 --> 01:25:11,600
uh from uh derek young um

01:25:08,480 --> 01:25:12,480
that is so it sounds a lot like

01:25:11,600 --> 01:25:15,120
co-routines

01:25:12,480 --> 01:25:17,040
are fibrous co-routines if not how do

01:25:15,120 --> 01:25:18,320
they relate to coroutines and for those

01:25:17,040 --> 01:25:19,440
who don't know co-routine is a

01:25:18,320 --> 01:25:22,480
sub-routine

01:25:19,440 --> 01:25:26,000
functions processes etc that allows its

01:25:22,480 --> 01:25:29,199
execution to be suspended and resumed

01:25:26,000 --> 01:25:31,440
uh i would wager that yes fibers is

01:25:29,199 --> 01:25:32,880
just a ruby name for coroutines yeah i

01:25:31,440 --> 01:25:33,440
think that's that's the closest thing

01:25:32,880 --> 01:25:35,520
but i

01:25:33,440 --> 01:25:38,159
i was trying to figure out like these

01:25:35,520 --> 01:25:40,080
specific computer science definitions

01:25:38,159 --> 01:25:41,440
and i'm sure there will be some people

01:25:40,080 --> 01:25:43,199
in the audience who are going to

01:25:41,440 --> 01:25:44,719
explain the important differences

01:25:43,199 --> 01:25:46,480
between between fibers and

01:25:44,719 --> 01:25:47,840
between fibers and core routines because

01:25:46,480 --> 01:25:51,679
that's where that's where

01:25:47,840 --> 01:25:51,679
my hand-wavy warning came from

01:25:51,760 --> 01:25:55,840
i've just done art school people i'm

01:25:53,199 --> 01:25:55,840
like

01:25:56,639 --> 01:26:03,199
same here uh i do love computer sciencey

01:26:00,560 --> 01:26:03,199
definitions

01:26:03,679 --> 01:26:07,520
uh i have a question for you because uh

01:26:06,159 --> 01:26:09,520
you talked a lot about the

01:26:07,520 --> 01:26:10,880
sort of the go language and ecosystem

01:26:09,520 --> 01:26:12,960
are there any other

01:26:10,880 --> 01:26:14,560
uh go influences that you would like to

01:26:12,960 --> 01:26:17,760
see or that you're expecting to see

01:26:14,560 --> 01:26:20,639
in ruby uh

01:26:17,760 --> 01:26:22,000
go go influences that i would like well

01:26:20,639 --> 01:26:24,320
i would love to see

01:26:22,000 --> 01:26:26,480
monolithic binaries that you compile and

01:26:24,320 --> 01:26:26,800
then provide as downloads from somewhere

01:26:26,480 --> 01:26:29,199
for

01:26:26,800 --> 01:26:30,800
four platforms built from one machine

01:26:29,199 --> 01:26:31,600
and that they just work and they don't

01:26:30,800 --> 01:26:33,280
require

01:26:31,600 --> 01:26:34,800
installation of anything whatsoever that

01:26:33,280 --> 01:26:37,199
would be red but i don't know whether it

01:26:34,800 --> 01:26:40,320
would happen

01:26:37,199 --> 01:26:42,560
whatever so this it's like the the core

01:26:40,320 --> 01:26:44,639
routines or go routines or fibers or

01:26:42,560 --> 01:26:46,560
this sequential concurrency is not the

01:26:44,639 --> 01:26:47,520
only reason people move to go like go

01:26:46,560 --> 01:26:49,760
has a lot of

01:26:47,520 --> 01:26:51,280
things on the table but there is also a

01:26:49,760 --> 01:26:52,400
class of problems where

01:26:51,280 --> 01:26:56,800
they're you know they're eating our

01:26:52,400 --> 01:26:56,800
lunch that's that that i think is true

01:26:56,880 --> 01:27:01,280
yeah um inspiration from right and so if

01:26:59,760 --> 01:27:03,120
there is a little wish list

01:27:01,280 --> 01:27:04,960
that you could be like okay those those

01:27:03,120 --> 01:27:06,000
things i want to form go or maybe from

01:27:04,960 --> 01:27:08,320
another language

01:27:06,000 --> 01:27:10,000
uh what are some of those things that

01:27:08,320 --> 01:27:12,800
you want to be having

01:27:10,000 --> 01:27:13,600
uh for for ruby what i would like to be

01:27:12,800 --> 01:27:17,040
having well

01:27:13,600 --> 01:27:20,000
i would love to have uh true parallelism

01:27:17,040 --> 01:27:22,800
still i would like to have

01:27:20,000 --> 01:27:23,520
uh i would like to have uh immutable

01:27:22,800 --> 01:27:27,360
strings

01:27:23,520 --> 01:27:30,000
for certain uh and maybe i would like

01:27:27,360 --> 01:27:31,120
some kind of type interference but i'm

01:27:30,000 --> 01:27:34,320
not sure

01:27:31,120 --> 01:27:37,679
like maybe just good bindings to qt ui

01:27:34,320 --> 01:27:37,679
libraries would be nice and that's it

01:27:39,120 --> 01:27:44,320
um another question how much

01:27:42,159 --> 01:27:46,320
are you able to use fibers in production

01:27:44,320 --> 01:27:49,440
at work uh

01:27:46,320 --> 01:27:51,840
so uh we use fibers in production at

01:27:49,440 --> 01:27:54,880
work a hell of a lot because if you

01:27:51,840 --> 01:27:56,560
because at we transfer we are using

01:27:54,880 --> 01:27:58,560
launch darkly and we are using the

01:27:56,560 --> 01:28:00,000
launch dark sdk and the launch darkly

01:27:58,560 --> 01:28:02,239
sdk uses the

01:28:00,000 --> 01:28:03,520
circuitry async libraries these days and

01:28:02,239 --> 01:28:07,199
so de facto

01:28:03,520 --> 01:28:08,719
we use fibers when we talk

01:28:07,199 --> 01:28:10,960
to launch darkly from our rails

01:28:08,719 --> 01:28:13,280
application that already works

01:28:10,960 --> 01:28:14,000
and we also have an experimental variant

01:28:13,280 --> 01:28:16,880
of our download

01:28:14,000 --> 01:28:18,960
server which works based on fibers and

01:28:16,880 --> 01:28:21,120
which runs on the falcon web server

01:28:18,960 --> 01:28:22,000
we've done some experiments using that

01:28:21,120 --> 01:28:24,960
in production

01:28:22,000 --> 01:28:25,600
it was mostly successful but there were

01:28:24,960 --> 01:28:27,760
a few

01:28:25,600 --> 01:28:29,199
things that we couldn't get worked out

01:28:27,760 --> 01:28:31,920
at the moment so for example

01:28:29,199 --> 01:28:32,560
our server would run out of uh available

01:28:31,920 --> 01:28:34,480
sockets

01:28:32,560 --> 01:28:35,920
for people to connect because those

01:28:34,480 --> 01:28:37,360
fibers would never be forcibly

01:28:35,920 --> 01:28:40,480
terminated when people

01:28:37,360 --> 01:28:42,000
weren't um basically

01:28:40,480 --> 01:28:43,520
there is a situation where people are no

01:28:42,000 --> 01:28:44,960
longer connected to your machine but

01:28:43,520 --> 01:28:46,159
your machine still thinks that those

01:28:44,960 --> 01:28:47,520
people are connected

01:28:46,159 --> 01:28:49,600
and those connections they consume

01:28:47,520 --> 01:28:51,280
resources and so that was something that

01:28:49,600 --> 01:28:52,080
at the time falcon couldn't deal with

01:28:51,280 --> 01:28:54,320
very well

01:28:52,080 --> 01:28:56,400
uh maybe we're gonna do another round of

01:28:54,320 --> 01:28:58,880
testing i'm not sure

01:28:56,400 --> 01:28:58,880
it depends

01:29:01,120 --> 01:29:05,760
thank you um i think

01:29:04,239 --> 01:29:08,800
we have any more questions also i have a

01:29:05,760 --> 01:29:11,840
hard time concentrating

01:29:08,800 --> 01:29:13,679
that is imaginable yes

01:29:11,840 --> 01:29:15,440
yeah i think it's a slacking just to

01:29:13,679 --> 01:29:18,000
explode it's super nice and

01:29:15,440 --> 01:29:18,639
it was a very nice talk thank you very

01:29:18,000 --> 01:29:22,239
much

01:29:18,639 --> 01:29:24,560
my pleasure um so i think our

01:29:22,239 --> 01:29:26,880
next meetup will be online i wonder is

01:29:24,560 --> 01:29:29,120
even saying like it was too good so

01:29:26,880 --> 01:29:30,639
maybe he doesn't want to follow up now

01:29:29,120 --> 01:29:32,800
well it's a benchmark now so

01:29:30,639 --> 01:29:32,800
uh

01:29:34,560 --> 01:29:39,600
ain't getting out easy yeah you should

01:29:37,760 --> 01:29:42,480
definitely check out our our slack

01:29:39,600 --> 01:29:45,280
channel because uh people have opinions

01:29:42,480 --> 01:29:45,840
uh oh i i imagine yeah yeah yeah yeah

01:29:45,280 --> 01:29:49,679
yeah

01:29:45,840 --> 01:29:52,880
so we do miss your friday rent though

01:29:49,679 --> 01:29:54,239
uh yeah in our slack so whenever you

01:29:52,880 --> 01:29:56,560
fill up to it

01:29:54,239 --> 01:29:57,280
friday rental are a little bit delayed

01:29:56,560 --> 01:30:00,560
but uh

01:29:57,280 --> 01:30:01,280
i do have uh i i um i'll think what i

01:30:00,560 --> 01:30:04,080
can do about this

01:30:01,280 --> 01:30:04,960
let's put it this way no no no no no no

01:30:04,080 --> 01:30:06,960
commitments

01:30:04,960 --> 01:30:08,560
i'll think what i i'll see what i can do

01:30:06,960 --> 01:30:10,230
maybe it means that he's very happy

01:30:08,560 --> 01:30:11,600
right now there's nothing to rant about

01:30:10,230 --> 01:30:14,880
[Laughter]

01:30:11,600 --> 01:30:17,440
well that laughs says you know

01:30:14,880 --> 01:30:19,280
it's not friday noah you never know what

01:30:17,440 --> 01:30:23,199
will happen

01:30:19,280 --> 01:30:25,600
yeah a couple more days ago let's see

01:30:23,199 --> 01:30:26,560
well thank you very much again julie for

01:30:25,600 --> 01:30:28,719
your for your time

01:30:26,560 --> 01:30:31,520
and this amazing talk i learned a lot

01:30:28,719 --> 01:30:33,600
about fibers i had no clue to be honest

01:30:31,520 --> 01:30:36,639
so i really did learn a lot

01:30:33,600 --> 01:30:40,080
thank you my pleasure

01:30:36,639 --> 01:30:42,719
thanks for having me thank you yeah

01:30:40,080 --> 01:30:43,920
so um i think this concludes our

01:30:42,719 --> 01:30:46,480
amsterdam ruby

01:30:43,920 --> 01:30:47,199
meetup our next meetup will be on the

01:30:46,480 --> 01:30:50,880
18th

01:30:47,199 --> 01:30:54,639
of may maybe it will be about

01:30:50,880 --> 01:30:57,280
uh something um

01:30:54,639 --> 01:30:58,080
floor mentioned it was whispered in my

01:30:57,280 --> 01:31:01,440
ear

01:30:58,080 --> 01:31:03,920
like maybe she was inspired by

01:31:01,440 --> 01:31:04,480
fibers yeah with all the fibers and the

01:31:03,920 --> 01:31:07,360
yarn

01:31:04,480 --> 01:31:07,679
and i was just like well i can do my

01:31:07,360 --> 01:31:10,880
some

01:31:07,679 --> 01:31:12,960
actual knitting it will not be

01:31:10,880 --> 01:31:14,239
metaphorical knitting though uh so i'm

01:31:12,960 --> 01:31:16,480
not sure how many people will be

01:31:14,239 --> 01:31:18,239
interested in that anyway

01:31:16,480 --> 01:31:19,520
uh i will definitely not do that on the

01:31:18,239 --> 01:31:22,320
18th of may

01:31:19,520 --> 01:31:23,360
um do we have our speaker lineup uh

01:31:22,320 --> 01:31:26,880
finished already for

01:31:23,360 --> 01:31:27,520
for the 18th uh it's not finalized just

01:31:26,880 --> 01:31:29,840
yet so

01:31:27,520 --> 01:31:31,520
if anyone has like a super nice

01:31:29,840 --> 01:31:31,920
interesting topic that i want to talk

01:31:31,520 --> 01:31:34,400
about

01:31:31,920 --> 01:31:35,760
that then then you can find us in in

01:31:34,400 --> 01:31:38,960
slack for sure or or

01:31:35,760 --> 01:31:39,440
twitter of course uh we would love to

01:31:38,960 --> 01:31:42,159
have

01:31:39,440 --> 01:31:42,800
to hear more about about these talks

01:31:42,159 --> 01:31:45,360
like

01:31:42,800 --> 01:31:45,920
whether it's about the ruby related talk

01:31:45,360 --> 01:31:48,080
or

01:31:45,920 --> 01:31:49,600
more about soft skills or processes or

01:31:48,080 --> 01:31:53,360
whatever helps you

01:31:49,600 --> 01:31:57,040
uh in your development uh work or

01:31:53,360 --> 01:32:00,880
that that's amazing so um hit us up then

01:31:57,040 --> 01:32:03,440
until then have a great evening

01:32:00,880 --> 01:32:05,760
wait i have a couple more shout outs oh

01:32:03,440 --> 01:32:08,400
oh sorry go ahead

01:32:05,760 --> 01:32:09,600
um so the recording of this meetup will

01:32:08,400 --> 01:32:12,400
be up shortly right

01:32:09,600 --> 01:32:13,120
on the youtube account for rubio uh i

01:32:12,400 --> 01:32:14,880
want to

01:32:13,120 --> 01:32:16,880
thank our speakers one more time i want

01:32:14,880 --> 01:32:20,159
to thank everyone tuning in today

01:32:16,880 --> 01:32:23,040
i want to thank uh tom for being

01:32:20,159 --> 01:32:23,679
backstage making sure that you know like

01:32:23,040 --> 01:32:25,360
everything

01:32:23,679 --> 01:32:27,679
runs smoothly and for the little

01:32:25,360 --> 01:32:31,679
commentary in the banners i feel it was

01:32:27,679 --> 01:32:32,880
great uh and uh well that that meetup is

01:32:31,679 --> 01:32:35,760
on the 18th

01:32:32,880 --> 01:32:36,080
of may but we still have a ruby meet up

01:32:35,760 --> 01:32:38,080
uh

01:32:36,080 --> 01:32:40,080
this month i mean probably for different

01:32:38,080 --> 01:32:43,440
cities as well but there is a new

01:32:40,080 --> 01:32:47,040
meetup for women and non-binary folks

01:32:43,440 --> 01:32:48,159
called w and b dot rb uh you can follow

01:32:47,040 --> 01:32:51,840
them on twitter

01:32:48,159 --> 01:32:54,159
via wnb underscore rb

01:32:51,840 --> 01:32:56,480
and i think they have their next meet up

01:32:54,159 --> 01:32:59,199
on the 27th

01:32:56,480 --> 01:33:01,679
this month not sure but you should

01:32:59,199 --> 01:33:03,520
definitely check that out

01:33:01,679 --> 01:33:04,800
yeah and the moment where we were like

01:33:03,520 --> 01:33:05,840
until next time and then we do the

01:33:04,800 --> 01:33:07,760
awkward wave

01:33:05,840 --> 01:33:09,840
yeah yeah but the before the awkward

01:33:07,760 --> 01:33:12,480
wave can you paste the link into slack

01:33:09,840 --> 01:33:13,840
and then we do the octopus yes okay do

01:33:12,480 --> 01:33:15,440
we have time for the awkwardness

01:33:13,840 --> 01:33:17,760
you know the thing so people just said

01:33:15,440 --> 01:33:19,520
and it's like that but we say hi

01:33:17,760 --> 01:33:21,600
then people just scream high at their

01:33:19,520 --> 01:33:24,880
screams as well as well

01:33:21,600 --> 01:33:24,880
and when we wave people go

01:33:25,840 --> 01:33:33,199
so we're gonna die what

01:33:29,360 --> 01:33:33,199
they could do yeah they could do it

01:33:35,199 --> 01:33:43,040
do the awkward way floor hi

01:33:38,480 --> 01:33:43,040
hi tom remove us

01:33:48,840 --> 01:33:51,840
bye

01:34:16,960 --> 01:34:19,040

YouTube URL: https://www.youtube.com/watch?v=nk24WMICx4k


