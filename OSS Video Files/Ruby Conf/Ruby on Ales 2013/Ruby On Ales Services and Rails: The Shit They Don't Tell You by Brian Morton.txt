Title: Ruby On Ales Services and Rails: The Shit They Don't Tell You by Brian Morton
Publication date: 2020-01-28
Playlist: Ruby on Ales 2013
Description: 
	Building services and integrating them into Rails is hard. Often times we talk about how nice it would be if our Rails apps were smaller and we had nicely encapsulated services. And it would be, but services introduce complexity. If you build your application this way from the beginning, you're going to do extra work and probably get some of it wrong. If you wait too long, you've got a mess on your hands.

At Yammer, we work constantly to clean up the mess that worked well in the early days, but has become troublesome to maintain, scale, or handle lots of data. We're tasked with pulling things out of the core Rails app, standing them up on their own, and making sure they do what they do really well and really fast.

With over 20 services now running in production, we've learned some lessons along the way. Services that seem clean and simple in the beginning can turn into development environment nightmares. Temporary data double-dispatching solutions turn into duplication and developer confusion. Monitoring one app turns into monitoring a suite of apps and handling failure between them. This talk is a look into the tradeoffs, mistakes, and solutions that we deal with every day and how we're able to maintain velocity given the additional complexity.

At the end of the day, having services and a smaller Rails codebase makes for scalable development teams, happier engineers, and smoother and more predictable production environments. Getting there is full of tradeoffs and hard decisions -- sometimes we do it right, sometimes we fuck it up, but we usually have a story to tell.

Help us caption & translate this video!

http://amara.org/v/FGbL/
Captions: 
	00:00:12,650 --> 00:00:14,710
you

00:00:19,920 --> 00:00:24,180
so my talk like you said it's called

00:00:22,020 --> 00:00:25,740
services and rails and the [ __ ] they

00:00:24,180 --> 00:00:26,970
don't tell you so we're going to talk a

00:00:25,740 --> 00:00:29,010
little bit about how Yammer build

00:00:26,970 --> 00:00:30,090
services along side rails and then talk

00:00:29,010 --> 00:00:35,430
about some of the things we don't talk

00:00:30,090 --> 00:00:37,110
about often so this is me my name is

00:00:35,430 --> 00:00:39,000
Brian my work on the rails team at

00:00:37,110 --> 00:00:41,250
Yammer and one of the things that rails

00:00:39,000 --> 00:00:43,320
team does is help extract out chunks of

00:00:41,250 --> 00:00:45,150
functionality that are in our into

00:00:43,320 --> 00:00:47,309
services that are in our rails code base

00:00:45,150 --> 00:00:51,720
and then integrate those back into rails

00:00:47,309 --> 00:01:01,650
I also love zelda and music and Ruby and

00:00:51,720 --> 00:01:07,710
Yammer maybe I can talk closer does that

00:01:01,650 --> 00:01:09,810
help at all check good awesome um so

00:01:07,710 --> 00:01:11,670
first I kind of have a little pet peeve

00:01:09,810 --> 00:01:15,270
about titles of talks so I'm going to

00:01:11,670 --> 00:01:17,700
try and address that it I like when I

00:01:15,270 --> 00:01:18,659
don't like when talks have a title and

00:01:17,700 --> 00:01:20,250
then they don't really get to the

00:01:18,659 --> 00:01:21,630
gimmicky part of the title and so my

00:01:20,250 --> 00:01:22,979
gimmick is the [ __ ] they don't tell you

00:01:21,630 --> 00:01:24,930
so I want to make sure I dress that

00:01:22,979 --> 00:01:27,390
today and then like they said earlier

00:01:24,930 --> 00:01:30,990
this is my first conference talk was a

00:01:27,390 --> 00:01:33,000
week ago so I'm new to this really

00:01:30,990 --> 00:01:34,680
excited but scared right now but awesome

00:01:33,000 --> 00:01:36,119
so when I started putting this thing

00:01:34,680 --> 00:01:38,280
together I did kind of think back to the

00:01:36,119 --> 00:01:40,320
last time I spoken in front of a class

00:01:38,280 --> 00:01:41,729
or something and I remembered something

00:01:40,320 --> 00:01:43,770
that was really important then was like

00:01:41,729 --> 00:01:46,740
which template i was going to use for my

00:01:43,770 --> 00:01:48,270
talk and so Yammer now is part of

00:01:46,740 --> 00:01:51,450
Microsoft so we have police templates

00:01:48,270 --> 00:01:52,950
and so I use this template to put this

00:01:51,450 --> 00:01:54,929
together and i found this slide in one

00:01:52,950 --> 00:01:57,090
of them and i thought it was kind of

00:01:54,929 --> 00:01:59,249
cool it said full bleed photos pictures

00:01:57,090 --> 00:02:01,409
can set a mood or VOC emotion making for

00:01:59,249 --> 00:02:04,109
a more memorable presentation so I

00:02:01,409 --> 00:02:05,789
really like this I drag this over to my

00:02:04,109 --> 00:02:08,160
presentation and I thought I could

00:02:05,789 --> 00:02:10,800
attach these two things my pet peeve

00:02:08,160 --> 00:02:13,020
about titles and so I can address the

00:02:10,800 --> 00:02:14,520
issue of every time there's some [ __ ]

00:02:13,020 --> 00:02:16,140
that we don't talk about this guy is

00:02:14,520 --> 00:02:17,490
going to come on screen and help like

00:02:16,140 --> 00:02:20,270
point out these things so you'll be

00:02:17,490 --> 00:02:20,270
seeing this guy a lot

00:02:24,810 --> 00:02:30,190
so here we go here is so this might not

00:02:28,570 --> 00:02:32,110
apply to you it yet none of this talk

00:02:30,190 --> 00:02:33,220
might apply to you yet it's it's cool

00:02:32,110 --> 00:02:34,750
stuff to think about but if you're

00:02:33,220 --> 00:02:36,610
building a startup to determine

00:02:34,750 --> 00:02:38,380
viability you might want to ignore some

00:02:36,610 --> 00:02:39,790
of this and just get it done you're

00:02:38,380 --> 00:02:41,770
going to add a lot of extra complexity

00:02:39,790 --> 00:02:44,020
with all of this and you probably don't

00:02:41,770 --> 00:02:45,400
have enough information yet but that

00:02:44,020 --> 00:02:47,770
doesn't mean you don't have to write

00:02:45,400 --> 00:02:49,270
clean will design code it's just hard to

00:02:47,770 --> 00:02:51,820
think about services at this point and

00:02:49,270 --> 00:02:53,410
if you have clean code extracting that

00:02:51,820 --> 00:02:55,690
into services is going to be a lot

00:02:53,410 --> 00:02:57,150
easier for you and then once you know

00:02:55,690 --> 00:02:58,810
you need to build services and scale

00:02:57,150 --> 00:03:02,260
you're going to have to do some things

00:02:58,810 --> 00:03:05,290
that are a bit uncomfortable so with

00:03:02,260 --> 00:03:09,400
that said let's continue at Yammer we

00:03:05,290 --> 00:03:11,170
have a huge [ __ ] rails app it has 300

00:03:09,400 --> 00:03:14,230
plus models some of them are pretty big

00:03:11,170 --> 00:03:16,720
we have 200 controllers a lot of [ __ ] in

00:03:14,230 --> 00:03:18,870
our Lib directory this thing is backed

00:03:16,720 --> 00:03:21,580
by 20 plus JVM services that we've built

00:03:18,870 --> 00:03:24,100
and some of those services the over a

00:03:21,580 --> 00:03:29,230
billion requests today so we have a

00:03:24,100 --> 00:03:30,670
pretty big ecosphere here but at the end

00:03:29,230 --> 00:03:32,200
of the day we still have this huge rails

00:03:30,670 --> 00:03:34,720
app and we still have to deal with that

00:03:32,200 --> 00:03:38,020
and this gets harder as we go we've

00:03:34,720 --> 00:03:39,670
largely been ok with this but we've been

00:03:38,020 --> 00:03:42,100
able to address this through chipping

00:03:39,670 --> 00:03:43,480
away building services but things are

00:03:42,100 --> 00:03:45,340
still really painful when you get into

00:03:43,480 --> 00:03:47,080
things like sharding or upgrading rails

00:03:45,340 --> 00:03:48,550
or upgrading Ruby these things turn into

00:03:47,080 --> 00:03:53,290
all-or-nothing projects at this point

00:03:48,550 --> 00:03:54,250
and it gets difficult so we're going to

00:03:53,290 --> 00:03:56,709
talk about service-oriented

00:03:54,250 --> 00:03:59,080
architectures why build services what

00:03:56,709 --> 00:04:01,030
does it get us I mean this is this is

00:03:59,080 --> 00:04:02,950
kind of the first goal of that we want

00:04:01,030 --> 00:04:04,510
these components that scale individually

00:04:02,950 --> 00:04:06,430
when you have these small focused

00:04:04,510 --> 00:04:08,440
services they're more versatile and

00:04:06,430 --> 00:04:12,130
allow for easier reusability things like

00:04:08,440 --> 00:04:14,080
that so let's talk about reusability we

00:04:12,130 --> 00:04:16,870
have a rails app and we have a couple

00:04:14,080 --> 00:04:19,150
other services here this is with some of

00:04:16,870 --> 00:04:20,830
our prior search stack experience we're

00:04:19,150 --> 00:04:22,030
able to separate some separate out some

00:04:20,830 --> 00:04:24,250
of the different pieces of our search

00:04:22,030 --> 00:04:26,560
stack in the middle flattery this is a

00:04:24,250 --> 00:04:29,020
denormalized store of data that is in

00:04:26,560 --> 00:04:30,490
rails so we have some hooks in rails

00:04:29,020 --> 00:04:31,840
that when things get published we

00:04:30,490 --> 00:04:33,310
publish them over to flattery so we can

00:04:31,840 --> 00:04:36,289
store denormalized representation of

00:04:33,310 --> 00:04:38,899
them and then dexy there

00:04:36,289 --> 00:04:40,309
kind of to the right is our service that

00:04:38,899 --> 00:04:41,689
builds we've seen indexes from

00:04:40,309 --> 00:04:43,099
transaction streams from flattery and

00:04:41,689 --> 00:04:45,379
then ultimately we have our search

00:04:43,099 --> 00:04:46,939
interface so when we wanted to add

00:04:45,379 --> 00:04:49,189
another search service the sack it was

00:04:46,939 --> 00:04:51,080
relatively easy for us we built this

00:04:49,189 --> 00:04:52,580
autocomplete service called complety it

00:04:51,080 --> 00:04:54,349
kind of hooked up to the same pipeline

00:04:52,580 --> 00:04:56,089
here and we had the pieces in place

00:04:54,349 --> 00:04:59,330
already and some clean interfaces to

00:04:56,089 --> 00:05:01,550
find same goes with exporting data we

00:04:59,330 --> 00:05:03,020
have a service called slurpee part of

00:05:01,550 --> 00:05:04,479
this pipeline already existed we didn't

00:05:03,020 --> 00:05:06,680
have to go to rails again for this data

00:05:04,479 --> 00:05:08,749
we already had access to it in this

00:05:06,680 --> 00:05:10,039
other service and this is great because

00:05:08,749 --> 00:05:13,819
we have all these different pieces now

00:05:10,039 --> 00:05:15,289
these can scale independently and so

00:05:13,819 --> 00:05:17,300
it's much easier for us to scale out of

00:05:15,289 --> 00:05:18,680
service if we have these these pieces

00:05:17,300 --> 00:05:20,569
broken up we can we can scale them

00:05:18,680 --> 00:05:23,270
individually we have a much better idea

00:05:20,569 --> 00:05:25,699
of each services specific needs and its

00:05:23,270 --> 00:05:28,159
performance patterns we can we can chart

00:05:25,699 --> 00:05:31,069
these things and we don't have to throw

00:05:28,159 --> 00:05:34,129
resources at the whole stack where they

00:05:31,069 --> 00:05:35,360
may or may not be needed and so all of

00:05:34,129 --> 00:05:38,029
this is kind of enabled through another

00:05:35,360 --> 00:05:40,729
benefit which is this loose coupling of

00:05:38,029 --> 00:05:42,919
things we have these smaller and more

00:05:40,729 --> 00:05:45,559
focused focused services we've

00:05:42,919 --> 00:05:47,029
encapsulated a lot of our concerns we

00:05:45,559 --> 00:05:48,199
can push out updates independently to

00:05:47,029 --> 00:05:51,019
each of these services we don't have to

00:05:48,199 --> 00:05:52,669
have these huge deploys we still do for

00:05:51,019 --> 00:05:55,009
our rails app but we can push out little

00:05:52,669 --> 00:05:57,620
pieces of the infrastructure in other

00:05:55,009 --> 00:06:00,110
ways and mostly we can change out

00:05:57,620 --> 00:06:03,219
everything without telling anyone entire

00:06:00,110 --> 00:06:05,059
technologies entire libraries platforms

00:06:03,219 --> 00:06:06,949
granted we have to keep the interface is

00:06:05,059 --> 00:06:09,860
the same but that's a problem we can

00:06:06,949 --> 00:06:12,469
deal with a little differently and so

00:06:09,860 --> 00:06:13,939
the start there's that we're currently

00:06:12,469 --> 00:06:15,559
in the process of switching on our files

00:06:13,939 --> 00:06:16,879
back end it's been a little painful

00:06:15,559 --> 00:06:18,019
we've had to make more changes than we

00:06:16,879 --> 00:06:19,189
thought and that probably means we [ __ ]

00:06:18,019 --> 00:06:20,869
some things up when we did it the first

00:06:19,189 --> 00:06:23,749
time but we're addressing those things

00:06:20,869 --> 00:06:29,269
now and largely we can swap out this

00:06:23,749 --> 00:06:30,499
entire service for a new one and so the

00:06:29,269 --> 00:06:32,119
second goal of service-oriented

00:06:30,499 --> 00:06:33,409
architectures is maintaining these code

00:06:32,119 --> 00:06:35,449
bases that will scale across your

00:06:33,409 --> 00:06:37,490
organization if you've worked in a

00:06:35,449 --> 00:06:38,659
monolithic app before you've probably

00:06:37,490 --> 00:06:40,759
run into things like stepping on other

00:06:38,659 --> 00:06:41,990
people or having to maintain a lot of

00:06:40,759 --> 00:06:44,029
this application knowledge in your head

00:06:41,990 --> 00:06:45,949
just knowing how this whole thing works

00:06:44,029 --> 00:06:47,360
and some of the win of services is that

00:06:45,949 --> 00:06:49,399
you don't have to you can have all these

00:06:47,360 --> 00:06:50,150
different black boxes that do these

00:06:49,399 --> 00:06:51,950
specific tasks

00:06:50,150 --> 00:06:54,290
and then you can learn about them as you

00:06:51,950 --> 00:06:58,310
get as you need to on a case-by-case

00:06:54,290 --> 00:07:00,920
basis and so that gives us this notion

00:06:58,310 --> 00:07:03,380
of distributed execution this is enabled

00:07:00,920 --> 00:07:04,790
by these loose coupling of things and

00:07:03,380 --> 00:07:07,850
this isn't in the computing sense but

00:07:04,790 --> 00:07:09,980
like in the development sense be because

00:07:07,850 --> 00:07:12,170
we've divided of our code bases it's

00:07:09,980 --> 00:07:13,880
easier s for easier for us to assign a

00:07:12,170 --> 00:07:16,280
team to the service it seemed to the

00:07:13,880 --> 00:07:17,480
client and they can coordinate and agree

00:07:16,280 --> 00:07:19,400
on how these things are going to talk to

00:07:17,480 --> 00:07:20,660
each other one of the things we do

00:07:19,400 --> 00:07:22,790
pretty often is we build dummy

00:07:20,660 --> 00:07:24,290
components so in the beginning of

00:07:22,790 --> 00:07:26,390
building a service and integrating it

00:07:24,290 --> 00:07:27,830
well we'll do the rail side that sends

00:07:26,390 --> 00:07:29,690
some data that's not really yet and

00:07:27,830 --> 00:07:31,550
we'll do the integration on the service

00:07:29,690 --> 00:07:33,680
side where it's accepting data but not

00:07:31,550 --> 00:07:35,240
doing anything with it yet and then as

00:07:33,680 --> 00:07:37,040
we continue to iterate on this and get

00:07:35,240 --> 00:07:38,900
closer to the end we'll have this full

00:07:37,040 --> 00:07:41,150
end-to-end test but we can still unblock

00:07:38,900 --> 00:07:45,380
each other and build this thing out and

00:07:41,150 --> 00:07:47,570
make changes as we go along as well so

00:07:45,380 --> 00:07:50,720
here's our dude again this doesn't

00:07:47,570 --> 00:07:52,370
happen overnight as I kind of alluded to

00:07:50,720 --> 00:07:53,900
a little while ago again when you're

00:07:52,370 --> 00:07:55,220
starting your application or startup

00:07:53,900 --> 00:07:56,450
this is all a lot of additional

00:07:55,220 --> 00:07:58,490
complexity that prevents you from

00:07:56,450 --> 00:08:01,730
shipping products quickly kind of our

00:07:58,490 --> 00:08:03,020
goal with a single undivided codebase

00:08:01,730 --> 00:08:05,210
you have the freedom to change things

00:08:03,020 --> 00:08:06,830
really quickly you can access data

00:08:05,210 --> 00:08:08,960
layers directly you can share a lot of

00:08:06,830 --> 00:08:11,240
code easily and avoid some of this

00:08:08,960 --> 00:08:13,220
overhead that manages that managing

00:08:11,240 --> 00:08:15,290
services entails granted some of that

00:08:13,220 --> 00:08:18,830
might come back to bite us later but we

00:08:15,290 --> 00:08:19,880
can move quickly forward and there are a

00:08:18,830 --> 00:08:22,040
lot of things you're going to learn as

00:08:19,880 --> 00:08:23,000
your iteratively moving this way you're

00:08:22,040 --> 00:08:25,130
not just going to wake up one morning

00:08:23,000 --> 00:08:27,530
with services and we found at Yammer

00:08:25,130 --> 00:08:32,660
that that a lot of this even requires

00:08:27,530 --> 00:08:34,190
some organizational change and so at

00:08:32,660 --> 00:08:36,440
Yammer we talk a lot about Conway's law

00:08:34,190 --> 00:08:38,540
and kind of the the goal of this is that

00:08:36,440 --> 00:08:40,760
organizations that are optimized to

00:08:38,540 --> 00:08:44,090
avoid bottlenecks will create code that

00:08:40,760 --> 00:08:47,450
is meant to avoid bottlenecks so this is

00:08:44,090 --> 00:08:49,940
what the law says those organizations

00:08:47,450 --> 00:08:52,190
which design systems are constrained to

00:08:49,940 --> 00:08:53,600
produce designs which are copies of the

00:08:52,190 --> 00:08:56,030
communication structures of these

00:08:53,600 --> 00:08:57,260
organizations and so it's hard to think

00:08:56,030 --> 00:08:58,930
about services if we don't think about

00:08:57,260 --> 00:09:02,060
our development teams in the same way a

00:08:58,930 --> 00:09:04,010
lot of organizations will divide their

00:09:02,060 --> 00:09:05,420
departments vertically or horizontally

00:09:04,010 --> 00:09:07,700
which can lead to silos within the

00:09:05,420 --> 00:09:10,100
organization of people working on the

00:09:07,700 --> 00:09:11,480
same thing day to day this barrier may

00:09:10,100 --> 00:09:13,490
also cause people to get attached their

00:09:11,480 --> 00:09:15,320
turf and it just ultimately inhibits

00:09:13,490 --> 00:09:18,020
communication and decision making from

00:09:15,320 --> 00:09:20,510
our experience so here's an example of

00:09:18,020 --> 00:09:22,850
that early on at Yammer we had the

00:09:20,510 --> 00:09:25,580
messaging team we had rails we had the

00:09:22,850 --> 00:09:27,410
service and this is a service that

00:09:25,580 --> 00:09:29,660
handed all of our message feeds and this

00:09:27,410 --> 00:09:31,520
team supported that and this is what the

00:09:29,660 --> 00:09:33,500
responsibility looked like they managed

00:09:31,520 --> 00:09:34,790
the service they managed the rail side

00:09:33,500 --> 00:09:38,510
they manage both sides of this

00:09:34,790 --> 00:09:40,010
implementation and so they decided on

00:09:38,510 --> 00:09:42,200
the interface that they decided how to

00:09:40,010 --> 00:09:44,930
implement a thing it a really siloed

00:09:42,200 --> 00:09:46,490
knowledge of the whole system it's not

00:09:44,930 --> 00:09:47,450
necessarily the most important thing

00:09:46,490 --> 00:09:49,670
that they could be working on at all

00:09:47,450 --> 00:09:52,880
times and then how do we scale this do

00:09:49,670 --> 00:09:56,060
we keep creating these feature teams how

00:09:52,880 --> 00:09:57,920
do we address that and so we we took a

00:09:56,060 --> 00:10:00,380
different approach something that might

00:09:57,920 --> 00:10:01,670
scale better organizationally and this

00:10:00,380 --> 00:10:04,610
is what we have right now this is kind

00:10:01,670 --> 00:10:06,590
of what we've come up with this is what

00:10:04,610 --> 00:10:09,110
it looks like we have our rails team and

00:10:06,590 --> 00:10:10,400
our core services team the rails team is

00:10:09,110 --> 00:10:11,810
largely responsible for what goes down

00:10:10,400 --> 00:10:13,580
the rails app and core services the

00:10:11,810 --> 00:10:15,470
other way all of our code bases that you

00:10:13,580 --> 00:10:16,820
Mr are open so if you're on the rails

00:10:15,470 --> 00:10:18,500
team it doesn't mean you always have to

00:10:16,820 --> 00:10:23,240
be writing Ruby code and if you're on

00:10:18,500 --> 00:10:23,930
the vice versa so we have a rails team

00:10:23,240 --> 00:10:28,400
that would take care of these

00:10:23,930 --> 00:10:29,630
implementations yeah the rails team

00:10:28,400 --> 00:10:31,760
still has to know a lot about how this

00:10:29,630 --> 00:10:33,770
monolithic rails app works it's still a

00:10:31,760 --> 00:10:36,620
bottleneck for us the idea that we could

00:10:33,770 --> 00:10:37,910
iteratively move things into services

00:10:36,620 --> 00:10:40,100
and reduce the amount of knowledge and

00:10:37,910 --> 00:10:42,260
the rail side seemed like a pretty good

00:10:40,100 --> 00:10:46,130
win for us but we also need to take this

00:10:42,260 --> 00:10:51,140
a step further and so we have this

00:10:46,130 --> 00:10:52,340
notion of cross-functional teams so when

00:10:51,140 --> 00:10:53,690
we start building a new service or

00:10:52,340 --> 00:10:55,550
feature a more we put together one of

00:10:53,690 --> 00:10:57,560
these cross-functional teams with

00:10:55,550 --> 00:11:00,290
representatives from every aspect of the

00:10:57,560 --> 00:11:02,120
project we bring in basically two to ten

00:11:00,290 --> 00:11:03,980
people from whatever functional teams

00:11:02,120 --> 00:11:06,400
are needed and they work on a project

00:11:03,980 --> 00:11:08,510
for anywhere from two to ten weeks

00:11:06,400 --> 00:11:10,820
people this way people are constantly

00:11:08,510 --> 00:11:13,130
working on new and different things with

00:11:10,820 --> 00:11:15,020
new teams of people and the service

00:11:13,130 --> 00:11:17,030
point about working on new projects new

00:11:15,020 --> 00:11:17,750
people we've seen some of these same

00:11:17,030 --> 00:11:19,850
things

00:11:17,750 --> 00:11:22,400
this is how we address it granted we

00:11:19,850 --> 00:11:24,500
don't do consulting work and so our

00:11:22,400 --> 00:11:25,550
domain doesn't change but we still have

00:11:24,500 --> 00:11:27,470
lots of different problems that we're

00:11:25,550 --> 00:11:30,080
trying to solve with infrastructure

00:11:27,470 --> 00:11:32,690
projects we have developer tools we have

00:11:30,080 --> 00:11:34,400
core product features we have more may

00:11:32,690 --> 00:11:37,040
be tailored back and work things to

00:11:34,400 --> 00:11:39,920
extract the services addressing tech

00:11:37,040 --> 00:11:41,350
debt we also have like an analytics team

00:11:39,920 --> 00:11:43,520
that builds tools for our data pipeline

00:11:41,350 --> 00:11:44,840
sometimes these tools and features come

00:11:43,520 --> 00:11:47,300
full circle with product engineering as

00:11:44,840 --> 00:11:49,100
well so well we do have these functional

00:11:47,300 --> 00:11:50,750
teams we basically have this pool of

00:11:49,100 --> 00:11:52,160
engineers that can work on a wide range

00:11:50,750 --> 00:11:55,970
of problems you can work on all these

00:11:52,160 --> 00:11:57,560
different things so here's kind of an

00:11:55,970 --> 00:11:59,780
example of what a cross-functional team

00:11:57,560 --> 00:12:01,640
would look like we would bring in two

00:11:59,780 --> 00:12:03,610
rails engineers if the project warranted

00:12:01,640 --> 00:12:05,840
it bring in a core services engineer

00:12:03,610 --> 00:12:07,160
your mobile client engineer and then

00:12:05,840 --> 00:12:10,940
some other things outside of inch of

00:12:07,160 --> 00:12:12,670
engineering and so this creates this

00:12:10,940 --> 00:12:14,750
autonomous like well-informed

00:12:12,670 --> 00:12:16,430
decentralize design process this team

00:12:14,750 --> 00:12:18,830
comes together they have this great

00:12:16,430 --> 00:12:20,810
discretion that ultimately yields these

00:12:18,830 --> 00:12:23,240
well-designed isolated reusable systems

00:12:20,810 --> 00:12:25,730
and the key here is that these teams are

00:12:23,240 --> 00:12:27,050
ephemeral they come together they solve

00:12:25,730 --> 00:12:30,140
the problem and then each team never

00:12:27,050 --> 00:12:32,150
moves on to a new project I'm another

00:12:30,140 --> 00:12:33,830
kind of cool point here is any one of

00:12:32,150 --> 00:12:35,660
these people will be a tech lead on the

00:12:33,830 --> 00:12:37,250
project and so we don't have like a

00:12:35,660 --> 00:12:40,160
manager that is always managing these

00:12:37,250 --> 00:12:41,630
teams one person will be in charge for

00:12:40,160 --> 00:12:43,250
one project and kind of make sure things

00:12:41,630 --> 00:12:44,839
come together they'll write some code as

00:12:43,250 --> 00:12:46,970
well then the next project they'll be

00:12:44,839 --> 00:12:48,710
more of an individual contributor role

00:12:46,970 --> 00:12:50,060
and so we can constantly keep this

00:12:48,710 --> 00:12:55,760
moving around and kind of give people

00:12:50,060 --> 00:12:57,620
like the full view and so again these

00:12:55,760 --> 00:12:58,790
cross-functional teams they spin up they

00:12:57,620 --> 00:13:00,470
have to learn whatever domain they're

00:12:58,790 --> 00:13:02,780
going to be in and then they'll take

00:13:00,470 --> 00:13:04,430
advantage of this distributed execution

00:13:02,780 --> 00:13:05,780
to start working on these things and the

00:13:04,430 --> 00:13:09,890
coordinate on the API between the

00:13:05,780 --> 00:13:12,050
surfaces in client and as the results of

00:13:09,890 --> 00:13:13,370
this we have these naturally recurring

00:13:12,050 --> 00:13:14,480
services that whenever a

00:13:13,370 --> 00:13:19,640
cross-functional team comes together

00:13:14,480 --> 00:13:22,370
we're going to have this so this does

00:13:19,640 --> 00:13:24,440
have trade-offs as well these are some

00:13:22,370 --> 00:13:27,290
of the things that we've come across and

00:13:24,440 --> 00:13:28,730
mostly okay with but we do have some

00:13:27,290 --> 00:13:31,600
cost with not having siloed experts

00:13:28,730 --> 00:13:31,600
across the application

00:13:32,050 --> 00:13:35,960
some might argue that this is a benefit

00:13:34,250 --> 00:13:37,610
but there is definitely a cost that's

00:13:35,960 --> 00:13:39,740
involved with teams constantly having to

00:13:37,610 --> 00:13:42,380
learn a new domain we're mostly okay

00:13:39,740 --> 00:13:43,760
with this I'm the second one we've been

00:13:42,380 --> 00:13:45,250
talking about a lot more recently as

00:13:43,760 --> 00:13:48,590
being careful not to couple the API

00:13:45,250 --> 00:13:50,030
implementation to the client as our

00:13:48,590 --> 00:13:52,580
mobile clients become smarter and they

00:13:50,030 --> 00:13:53,900
need more customized data we're going to

00:13:52,580 --> 00:13:56,000
have to address this more and more and

00:13:53,900 --> 00:13:58,700
it if we're thinking about projects like

00:13:56,000 --> 00:14:01,130
in a feature sense we have to be careful

00:13:58,700 --> 00:14:04,400
that we're that we're keeping these

00:14:01,130 --> 00:14:05,750
things decoupled and we're looking into

00:14:04,400 --> 00:14:08,920
how other people have solved this right

00:14:05,750 --> 00:14:11,510
now it's it's a pretty hot topic for us

00:14:08,920 --> 00:14:12,950
and then after the projects completed we

00:14:11,510 --> 00:14:15,050
still have to support this feature so

00:14:12,950 --> 00:14:18,170
that teams disbanded the product shipped

00:14:15,050 --> 00:14:20,180
and a couple bugs come up we still have

00:14:18,170 --> 00:14:22,970
to address that we do it through a

00:14:20,180 --> 00:14:24,350
cross-functional team that's a support

00:14:22,970 --> 00:14:26,390
engineering team and so they'll come

00:14:24,350 --> 00:14:30,680
together two to 10 ppl two to ten weeks

00:14:26,390 --> 00:14:31,820
and address those kinds of issues it's a

00:14:30,680 --> 00:14:32,930
little bit more difficult because they

00:14:31,820 --> 00:14:35,810
don't know the domain they don't know

00:14:32,930 --> 00:14:36,950
the the code that was written but again

00:14:35,810 --> 00:14:42,140
that's a trade-off that we're making

00:14:36,950 --> 00:14:45,830
here so here we go there's more than one

00:14:42,140 --> 00:14:48,980
way to do this these are some of the

00:14:45,830 --> 00:14:50,660
ways it could look it's going to

00:14:48,980 --> 00:14:52,550
probably look like this for a while put

00:14:50,660 --> 00:14:54,680
them all behind rails we did change your

00:14:52,550 --> 00:14:56,270
organization organizational structure

00:14:54,680 --> 00:14:59,210
but these are still hard problems to

00:14:56,270 --> 00:15:01,700
solve well the easiest solutions is this

00:14:59,210 --> 00:15:03,740
put it behind rails don't let clients

00:15:01,700 --> 00:15:05,920
talk to them directly or browsers rather

00:15:03,740 --> 00:15:08,510
and this gets us some good partial win

00:15:05,920 --> 00:15:13,000
but we still have to use rails resources

00:15:08,510 --> 00:15:13,000
to get to these services so trade off

00:15:13,570 --> 00:15:16,880
eventually we'll want to get to this and

00:15:15,560 --> 00:15:19,010
not have to be shackled the rails for

00:15:16,880 --> 00:15:21,110
services and will want the browser to

00:15:19,010 --> 00:15:23,030
talk directly to a service and sometimes

00:15:21,110 --> 00:15:25,040
this is easy we have a service called

00:15:23,030 --> 00:15:26,990
mug shot that handles dynamically

00:15:25,040 --> 00:15:29,000
resizing and caching avatars and other

00:15:26,990 --> 00:15:30,500
images for us and it works well because

00:15:29,000 --> 00:15:32,510
this has very little state as a very

00:15:30,500 --> 00:15:35,140
focused concern and the browser can talk

00:15:32,510 --> 00:15:37,520
directly to it and handle it that way

00:15:35,140 --> 00:15:38,390
but most of the time when you want to go

00:15:37,520 --> 00:15:39,610
this route you're going to have to

00:15:38,390 --> 00:15:43,630
figure out things like authentication

00:15:39,610 --> 00:15:43,630
other problems start to arise

00:15:43,970 --> 00:15:47,629
and so there are lots of different ways

00:15:45,230 --> 00:15:49,100
to do this they'll probably come a point

00:15:47,629 --> 00:15:50,389
when you want to work around rails to

00:15:49,100 --> 00:15:52,879
get to some of your data that's stored

00:15:50,389 --> 00:15:54,379
behind rails and so reading from the

00:15:52,879 --> 00:15:57,110
database it's not the worst thing in the

00:15:54,379 --> 00:15:59,360
world but it's not not great either to

00:15:57,110 --> 00:16:01,699
read from your rails database your

00:15:59,360 --> 00:16:04,550
Postgres database and then writing that

00:16:01,699 --> 00:16:06,379
database can be a nightmare the problem

00:16:04,550 --> 00:16:09,470
with reading is that postgrads is in our

00:16:06,379 --> 00:16:10,730
database memcache is our database rails

00:16:09,470 --> 00:16:18,379
knows about our caching layer but our

00:16:10,730 --> 00:16:20,060
services largely don't and so we come

00:16:18,379 --> 00:16:22,189
across this a lot active record holds

00:16:20,060 --> 00:16:23,899
our data hostage and that's fine it made

00:16:22,189 --> 00:16:25,759
quite a few things easy for us when we

00:16:23,899 --> 00:16:26,839
built our app but now as we start to

00:16:25,759 --> 00:16:28,459
tear down some of the code that works

00:16:26,839 --> 00:16:29,720
well or monolith and pull it into

00:16:28,459 --> 00:16:33,379
services we have to start to address

00:16:29,720 --> 00:16:36,199
this concern and don't get me wrong

00:16:33,379 --> 00:16:37,399
active record is awesome it lets you do

00:16:36,199 --> 00:16:39,019
a lot of cool stuff you get these

00:16:37,399 --> 00:16:40,699
callbacks and hooks you get validations

00:16:39,019 --> 00:16:42,920
you you can hook up state machines

00:16:40,699 --> 00:16:46,310
relatively easily we can tie in our

00:16:42,920 --> 00:16:48,529
cache valent invalidation stuff we use a

00:16:46,310 --> 00:16:50,269
gem called record cash that allows us to

00:16:48,529 --> 00:16:52,069
store all of our records in memcache and

00:16:50,269 --> 00:16:54,019
those a lot of the invalidation and

00:16:52,069 --> 00:16:55,610
stuff for us and so we hardly ever hit

00:16:54,019 --> 00:16:58,160
the database we rely pretty heavily on

00:16:55,610 --> 00:17:00,500
this so all this stuff is awesome until

00:16:58,160 --> 00:17:02,990
you have to detangle this data neither

00:17:00,500 --> 00:17:05,419
access it from a service or try and move

00:17:02,990 --> 00:17:08,600
it out out to the service and then it

00:17:05,419 --> 00:17:09,860
turns into this active record we have

00:17:08,600 --> 00:17:11,809
all these callbacks and hooks that we

00:17:09,860 --> 00:17:13,909
have to deal with these validations that

00:17:11,809 --> 00:17:17,449
we have to deal with state machines we

00:17:13,909 --> 00:17:18,319
have to move that business logic and and

00:17:17,449 --> 00:17:23,270
we have to deal with cache invalidation

00:17:18,319 --> 00:17:25,520
and so we have some options one is

00:17:23,270 --> 00:17:27,199
ultimately don't use active record some

00:17:25,520 --> 00:17:29,360
companies do that we use it pretty

00:17:27,199 --> 00:17:32,360
heavily so that's not really a route

00:17:29,360 --> 00:17:34,429
that we've taken a lot of times we'll

00:17:32,360 --> 00:17:35,809
end up using our services as indexes and

00:17:34,429 --> 00:17:41,690
just kind of store the IDS or

00:17:35,809 --> 00:17:43,580
relationships and so what this means is

00:17:41,690 --> 00:17:44,809
is our services have all these ideas but

00:17:43,580 --> 00:17:47,059
we still have to get the data from rails

00:17:44,809 --> 00:17:48,890
so the rails will talk to the service

00:17:47,059 --> 00:17:50,870
get the ids and then hydrate these

00:17:48,890 --> 00:17:53,260
relationships and so we get a lot of win

00:17:50,870 --> 00:17:53,260
out of that

00:17:54,160 --> 00:17:57,760
so one of the things we're towing with

00:17:55,420 --> 00:17:59,620
recently is moving a lot of the data so

00:17:57,760 --> 00:18:01,720
the service owns it we're calling them

00:17:59,620 --> 00:18:03,400
bodega services where when you need this

00:18:01,720 --> 00:18:05,710
this vegetable thing you go to the

00:18:03,400 --> 00:18:08,080
vegetable Bodega and get it and we can

00:18:05,710 --> 00:18:09,700
hide away a lot of our sharding and

00:18:08,080 --> 00:18:11,830
castrating invitations behind this and

00:18:09,700 --> 00:18:13,780
kind of our goal is to make this service

00:18:11,830 --> 00:18:18,720
about as half as fast as hitting

00:18:13,780 --> 00:18:18,720
memcache which is going to be difficult

00:18:21,390 --> 00:18:24,850
and so once we talked about moving data

00:18:23,710 --> 00:18:28,930
basically means we're going to be

00:18:24,850 --> 00:18:30,610
duplicating data the chances are if

00:18:28,930 --> 00:18:33,190
you're like us you can't have down time

00:18:30,610 --> 00:18:34,630
to move your data and then what if the

00:18:33,190 --> 00:18:36,070
service doesn't work like you intended

00:18:34,630 --> 00:18:38,260
it to what what what are you going to do

00:18:36,070 --> 00:18:41,110
about that rolling back is really hard

00:18:38,260 --> 00:18:43,180
but you need a backup plan and so

00:18:41,110 --> 00:18:46,840
ultimately what we go to is double

00:18:43,180 --> 00:18:48,670
dispatching well backfill all that all

00:18:46,840 --> 00:18:50,410
the data to the service will write the

00:18:48,670 --> 00:18:52,840
data to the database and post it to the

00:18:50,410 --> 00:18:54,910
service and while we're doing all this

00:18:52,840 --> 00:18:56,290
we can we can monitor the service we can

00:18:54,910 --> 00:18:58,240
profile it we can kind of see how it's

00:18:56,290 --> 00:19:00,370
going to react then we can start to move

00:18:58,240 --> 00:19:01,960
to the service incrementally we can

00:19:00,370 --> 00:19:03,430
start to move part of our traffic make

00:19:01,960 --> 00:19:05,860
sure things are going smoothly we still

00:19:03,430 --> 00:19:07,240
have kind of an escape route but we're

00:19:05,860 --> 00:19:09,190
moving towards like moving this whole

00:19:07,240 --> 00:19:10,390
thing to the service and the back feels

00:19:09,190 --> 00:19:12,490
really cool because it's kind of a peek

00:19:10,390 --> 00:19:13,840
into our scalability you're going to be

00:19:12,490 --> 00:19:15,610
putting a lot more data in the service

00:19:13,840 --> 00:19:17,350
much faster than the service is

00:19:15,610 --> 00:19:19,330
typically typically going to handle and

00:19:17,350 --> 00:19:21,760
so we can use this to playing capacity

00:19:19,330 --> 00:19:24,430
and just expect how this thing's going

00:19:21,760 --> 00:19:28,720
to perform and so now that we've done

00:19:24,430 --> 00:19:33,250
this we have another problem we have

00:19:28,720 --> 00:19:36,430
duplicate data so who cleans this up how

00:19:33,250 --> 00:19:37,810
do we get it cleaned up we need to do it

00:19:36,430 --> 00:19:39,940
pretty quickly because developers are

00:19:37,810 --> 00:19:41,350
going to become confused and we [ __ ]

00:19:39,940 --> 00:19:46,120
this up from time to time data sticks

00:19:41,350 --> 00:19:47,200
around it's really confusing and this is

00:19:46,120 --> 00:19:49,060
part of the trade-off maybe with our

00:19:47,200 --> 00:19:50,920
cross-functional teams that we disband

00:19:49,060 --> 00:19:53,530
this thing shipped and now we still need

00:19:50,920 --> 00:19:56,620
to clean up this data we have ways that

00:19:53,530 --> 00:19:59,820
we address it but it does go much longer

00:19:56,620 --> 00:19:59,820
than we like it to from time to time

00:20:01,590 --> 00:20:05,940
and so ultimately we need to know that

00:20:03,090 --> 00:20:07,260
we're okay with going all in and the

00:20:05,940 --> 00:20:10,140
problem with this is that the old way is

00:20:07,260 --> 00:20:11,159
really comfortable we have to be okay

00:20:10,140 --> 00:20:12,870
with breaking our comfort zone in

00:20:11,159 --> 00:20:14,510
dealing with these new issues instead of

00:20:12,870 --> 00:20:16,409
being able to just jump back to safety

00:20:14,510 --> 00:20:18,809
don't get me wrong you don't want to

00:20:16,409 --> 00:20:21,150
strand yourself you should have a a

00:20:18,809 --> 00:20:23,279
back-up plan and there should be this in

00:20:21,150 --> 00:20:24,659
criminal period but you've got to make

00:20:23,279 --> 00:20:26,460
the call eventually to completely switch

00:20:24,659 --> 00:20:28,140
there's a cost with maintaining this

00:20:26,460 --> 00:20:29,309
backup plan and eventually there's a

00:20:28,140 --> 00:20:30,900
point where it's not worth maintaining

00:20:29,309 --> 00:20:32,520
anymore it's just kind of causing

00:20:30,900 --> 00:20:35,039
confusion taking up time taking up

00:20:32,520 --> 00:20:39,990
resources and so kind of getting out of

00:20:35,039 --> 00:20:41,279
our comfort zone here and on that note

00:20:39,990 --> 00:20:43,230
we want to make [ __ ] easy for our

00:20:41,279 --> 00:20:44,100
developers I'm if you don't have a good

00:20:43,230 --> 00:20:45,809
story for your development environment

00:20:44,100 --> 00:20:48,240
you're not going to be able to continue

00:20:45,809 --> 00:20:49,799
to move quickly and like i said earlier

00:20:48,240 --> 00:20:51,179
part of the big one of services is not

00:20:49,799 --> 00:20:53,669
having to worry about things like

00:20:51,179 --> 00:20:56,279
configuring them or how they work and so

00:20:53,669 --> 00:20:58,529
you need to dig into them I mean if this

00:20:56,279 --> 00:21:02,039
isn't easy developers might just wander

00:20:58,529 --> 00:21:03,480
back into their comfort zone so

00:21:02,039 --> 00:21:10,200
basically what I'm saying is use vagrant

00:21:03,480 --> 00:21:11,520
we use this it's it's really awesome for

00:21:10,200 --> 00:21:13,230
a development environment we try and

00:21:11,520 --> 00:21:15,750
keep it really close to production we

00:21:13,230 --> 00:21:17,669
run a boon to on vagrant and we also run

00:21:15,750 --> 00:21:20,520
a boon to in production we can get all

00:21:17,669 --> 00:21:21,750
these services running locally this does

00:21:20,520 --> 00:21:24,149
start to become a problem when you have

00:21:21,750 --> 00:21:26,580
20-plus JVM services and your laptop can

00:21:24,149 --> 00:21:29,399
only have a max of 16 gigs of ram and

00:21:26,580 --> 00:21:30,809
the OS still a thorough not all right so

00:21:29,399 --> 00:21:34,919
we're running into that we're still

00:21:30,809 --> 00:21:36,240
trying to sell these issues and then we

00:21:34,919 --> 00:21:39,090
have to keep up with these services that

00:21:36,240 --> 00:21:40,380
are rapidly changing developers are

00:21:39,090 --> 00:21:44,000
going to have to keep these things up up

00:21:40,380 --> 00:21:44,000
to date and not want to worry about that

00:21:44,299 --> 00:21:48,450
we have this tool that we've built that

00:21:46,919 --> 00:21:50,220
runs inside of a great that we call soup

00:21:48,450 --> 00:21:52,250
kitchen and it's a way for our

00:21:50,220 --> 00:21:55,049
developers to update all these services

00:21:52,250 --> 00:21:56,399
it lets me go in here update them so

00:21:55,049 --> 00:21:58,559
things work fine but aside from that

00:21:56,399 --> 00:21:59,880
largely I don't care about them they

00:21:58,559 --> 00:22:02,279
just work they let me get my [ __ ] done

00:21:59,880 --> 00:22:08,140
when things turn red I click update here

00:22:02,279 --> 00:22:09,010
I clearly have not done that and so this

00:22:08,140 --> 00:22:11,860
the thing we have to worry about with

00:22:09,010 --> 00:22:13,450
getting services to developers as we

00:22:11,860 --> 00:22:14,740
also have to deploy these things and so

00:22:13,450 --> 00:22:17,320
we need a system that allows us to add

00:22:14,740 --> 00:22:18,640
new services quickly it's we need to

00:22:17,320 --> 00:22:20,920
make it easy to deploy each of these

00:22:18,640 --> 00:22:22,750
services and then we also need to

00:22:20,920 --> 00:22:24,190
maintain stable and pre-release packages

00:22:22,750 --> 00:22:25,840
because stable goes to production and

00:22:24,190 --> 00:22:28,140
then developers are going to need to

00:22:25,840 --> 00:22:31,330
work on like the latest master package

00:22:28,140 --> 00:22:32,620
and so we have quite a few apps and we

00:22:31,330 --> 00:22:37,720
need any engineer to be able to roll

00:22:32,620 --> 00:22:39,460
these things out this is our one click

00:22:37,720 --> 00:22:42,220
to pull deploy tool that we've built we

00:22:39,460 --> 00:22:44,470
call it diplomacy unfortunately we

00:22:42,220 --> 00:22:46,720
haven't open source to it we talk about

00:22:44,470 --> 00:22:48,010
it from time to time and there's some

00:22:46,720 --> 00:22:49,900
things that I'm trying to work on to get

00:22:48,010 --> 00:22:51,850
it open sourced but it's pretty coupled

00:22:49,900 --> 00:22:54,040
to a lot of our conventions and so we

00:22:51,850 --> 00:22:58,450
want to but it's a lot of work it's

00:22:54,040 --> 00:23:01,390
really hard and so it allows any

00:22:58,450 --> 00:23:05,590
engineer to effortlessly add new

00:23:01,390 --> 00:23:07,030
services for deployment another thing we

00:23:05,590 --> 00:23:08,200
need to start thinking about or you

00:23:07,030 --> 00:23:10,270
should have been thinking about already

00:23:08,200 --> 00:23:12,190
but think about on a wider scale on 20

00:23:10,270 --> 00:23:14,200
applications versus one application is

00:23:12,190 --> 00:23:15,280
all this monitoring and alerting you

00:23:14,200 --> 00:23:17,410
have to know the performance of all

00:23:15,280 --> 00:23:18,760
these different services now you have to

00:23:17,410 --> 00:23:20,980
plan capacity across all these different

00:23:18,760 --> 00:23:22,840
services to worry about things like Q

00:23:20,980 --> 00:23:25,180
depp's across how these services are

00:23:22,840 --> 00:23:26,560
reacting and then you need to worry

00:23:25,180 --> 00:23:28,810
about like reach ability from all these

00:23:26,560 --> 00:23:31,030
dependent clients there are a lot of

00:23:28,810 --> 00:23:33,120
different tools for this we do use New

00:23:31,030 --> 00:23:36,790
Relic we get a lot of one out of that

00:23:33,120 --> 00:23:37,900
for monitoring we use ganglia and we

00:23:36,790 --> 00:23:41,740
have some other charting stuff we've

00:23:37,900 --> 00:23:43,960
built in-house to help us with this and

00:23:41,740 --> 00:23:45,430
so with all of that one of the the big

00:23:43,960 --> 00:23:47,830
things that that you need are these

00:23:45,430 --> 00:23:50,320
standardized tools not only all those

00:23:47,830 --> 00:23:52,960
tools but things like across all these

00:23:50,320 --> 00:23:54,970
services you you probably want the same

00:23:52,960 --> 00:23:57,730
response formats the same data protocol

00:23:54,970 --> 00:24:01,510
same monitoring interfaces deployment

00:23:57,730 --> 00:24:02,350
stories dependency management all these

00:24:01,510 --> 00:24:03,880
things are going to make your world

00:24:02,350 --> 00:24:06,010
infinitely easier than trying to manage

00:24:03,880 --> 00:24:07,210
all of these like unique and special

00:24:06,010 --> 00:24:10,750
snowflakes that all speak different

00:24:07,210 --> 00:24:12,790
languages and so the way we build

00:24:10,750 --> 00:24:14,770
services at ya more we've put this thing

00:24:12,790 --> 00:24:16,750
together called drop wizard Kota Hale

00:24:14,770 --> 00:24:19,000
maintains it you go to drop wizard could

00:24:16,750 --> 00:24:21,040
hill to come to find more more about it

00:24:19,000 --> 00:24:22,029
but it's basically we've packaged

00:24:21,040 --> 00:24:23,409
together

00:24:22,029 --> 00:24:24,789
all the Java libraries that we use when

00:24:23,409 --> 00:24:27,009
we're building with these services in

00:24:24,789 --> 00:24:30,219
Java we get this really simple

00:24:27,009 --> 00:24:32,729
production-ready service that at the

00:24:30,219 --> 00:24:35,769
start it's monitoring its alerting

00:24:32,729 --> 00:24:37,330
reporting metrics and this doesn't mean

00:24:35,769 --> 00:24:40,830
that you have to use Java necessarily

00:24:37,330 --> 00:24:43,269
this is some of the choices we've made

00:24:40,830 --> 00:24:46,090
but we haven't necessarily discounted

00:24:43,269 --> 00:24:47,529
Ruby for doing these services either and

00:24:46,090 --> 00:24:51,039
we talked about these bodega services a

00:24:47,529 --> 00:24:52,599
little bit and we're talking about the

00:24:51,039 --> 00:24:54,580
possibility now is how do we get this

00:24:52,599 --> 00:24:56,469
the service extracted out of the rails

00:24:54,580 --> 00:24:59,710
app to hide all the data behind it and

00:24:56,469 --> 00:25:01,330
maybe a lot of the win is getting this

00:24:59,710 --> 00:25:03,070
service into Ruby first detangle the

00:25:01,330 --> 00:25:04,779
data get it into Ruby and then figure

00:25:03,070 --> 00:25:07,239
out where we need to go from there maybe

00:25:04,779 --> 00:25:08,799
if we do need to get more performance

00:25:07,239 --> 00:25:10,359
out of it or some other concern that we

00:25:08,799 --> 00:25:11,859
have then we can move it to Java do

00:25:10,359 --> 00:25:13,089
something else with it but we can stop

00:25:11,859 --> 00:25:14,769
it Ruby and we can figure out that

00:25:13,089 --> 00:25:20,739
problem first and then figure out these

00:25:14,769 --> 00:25:22,269
other problems and so service-oriented

00:25:20,739 --> 00:25:24,159
architectures have trade-offs as well

00:25:22,269 --> 00:25:25,690
there's a lot of good things that we get

00:25:24,159 --> 00:25:31,239
but there are also some new things we

00:25:25,690 --> 00:25:33,549
have to think about one of these being

00:25:31,239 --> 00:25:34,809
that complex systems fail you need to

00:25:33,549 --> 00:25:37,659
start thinking about degrading for

00:25:34,809 --> 00:25:39,279
unavailable services now you're going to

00:25:37,659 --> 00:25:41,769
be chasing issues through these multiple

00:25:39,279 --> 00:25:43,809
levels of indirection people don't know

00:25:41,769 --> 00:25:45,159
where the problems happening the place

00:25:43,809 --> 00:25:47,499
that's throwing the alert might not be

00:25:45,159 --> 00:25:49,179
actually causing the issue if you have

00:25:47,499 --> 00:25:51,159
q's backing up it might be because the

00:25:49,179 --> 00:25:53,710
service has gotten slow a lot of these

00:25:51,159 --> 00:25:55,869
things that you have to worry about and

00:25:53,710 --> 00:25:57,820
so these are some of the trade-offs that

00:25:55,869 --> 00:26:00,639
we have to make we have to now handle

00:25:57,820 --> 00:26:02,139
unavailability these transactions aren't

00:26:00,639 --> 00:26:03,519
completely free so we do have to worry

00:26:02,139 --> 00:26:05,889
about talking to all these additional

00:26:03,519 --> 00:26:08,259
services now may be parallelized some of

00:26:05,889 --> 00:26:11,320
these calls we have some ways to work

00:26:08,259 --> 00:26:14,679
around that our api's are much harder to

00:26:11,320 --> 00:26:17,049
change now we can use versioning and

00:26:14,679 --> 00:26:19,179
some other things but largely they are

00:26:17,049 --> 00:26:21,070
harder to change and then we don't have

00:26:19,179 --> 00:26:23,019
a notion of an atomic deploy any more

00:26:21,070 --> 00:26:24,279
when we deploy a service we're gonna

00:26:23,019 --> 00:26:25,749
have clients on both sides of the

00:26:24,279 --> 00:26:28,440
implementation so we have to worry about

00:26:25,749 --> 00:26:32,700
supporting both sides of that

00:26:28,440 --> 00:26:32,700
coordinated deploys really work well

00:26:34,110 --> 00:26:40,750
and so to recap a little bit we always

00:26:38,559 --> 00:26:42,730
want to be re-evaluating our costs and

00:26:40,750 --> 00:26:44,950
their viability I don't mean the

00:26:42,730 --> 00:26:46,150
financials of things I'm talking more

00:26:44,950 --> 00:26:48,250
about the decisions you made and if

00:26:46,150 --> 00:26:49,270
there's still the right decisions are

00:26:48,250 --> 00:26:51,420
you still okay with the trade-offs

00:26:49,270 --> 00:26:53,470
you've made something slowing you down

00:26:51,420 --> 00:26:54,970
it's it's important to know what an

00:26:53,470 --> 00:26:57,220
inflection point looks like and what it

00:26:54,970 --> 00:26:58,720
means to your software don't scale

00:26:57,220 --> 00:27:01,150
before you need to but be ready for

00:26:58,720 --> 00:27:03,309
these things and once you've determined

00:27:01,150 --> 00:27:05,820
that you need to scale with services you

00:27:03,309 --> 00:27:07,900
can take on the additional complexity

00:27:05,820 --> 00:27:10,150
you're going to need an organization

00:27:07,900 --> 00:27:12,130
that supports building these services

00:27:10,150 --> 00:27:14,110
and this could be more than just

00:27:12,130 --> 00:27:15,640
changing your development structure this

00:27:14,110 --> 00:27:17,020
means giving priority to building the

00:27:15,640 --> 00:27:19,270
tools you need and creating a culture

00:27:17,020 --> 00:27:21,640
around services and some things are

00:27:19,270 --> 00:27:23,520
going to get a lot harder deployments

00:27:21,640 --> 00:27:25,300
going to be more complicated that's

00:27:23,520 --> 00:27:27,429
deployment development all these things

00:27:25,300 --> 00:27:29,350
are going to be more complicated but

00:27:27,429 --> 00:27:31,000
that's okay we reduce the amount of

00:27:29,350 --> 00:27:32,620
required effort in some places and as a

00:27:31,000 --> 00:27:37,330
system gets larger it's much more

00:27:32,620 --> 00:27:38,800
manageable for us we're also going to

00:27:37,330 --> 00:27:41,230
need these tools that allow us to keep

00:27:38,800 --> 00:27:44,110
moving fast building services can't slow

00:27:41,230 --> 00:27:45,670
you down you still have customers you

00:27:44,110 --> 00:27:47,740
still need to deliver value to them and

00:27:45,670 --> 00:27:50,020
they don't shouldn't care about any of

00:27:47,740 --> 00:27:51,400
this stuff but if things are starting to

00:27:50,020 --> 00:27:54,160
break they're going to start caring and

00:27:51,400 --> 00:27:56,320
it's going to be on you and if

00:27:54,160 --> 00:27:58,000
developers can't build services easily

00:27:56,320 --> 00:27:59,230
and they're up against a deadline they

00:27:58,000 --> 00:28:01,870
might just start adding to the monolith

00:27:59,230 --> 00:28:06,670
again it's easier for them they can just

00:28:01,870 --> 00:28:08,080
worry about it later and this is one of

00:28:06,670 --> 00:28:10,900
the things we talk about a lot of EMR

00:28:08,080 --> 00:28:12,610
and I really like the slide it's be

00:28:10,900 --> 00:28:14,500
ready to be wrong you're going to make a

00:28:12,610 --> 00:28:15,580
lot of mistakes and doing all this as

00:28:14,500 --> 00:28:17,890
long as you're ready to acknowledge and

00:28:15,580 --> 00:28:19,929
recover from them you're going to be

00:28:17,890 --> 00:28:22,210
okay I think we've rewritten our search

00:28:19,929 --> 00:28:23,530
stack like three different times now but

00:28:22,210 --> 00:28:27,190
we've learned a lot about services and

00:28:23,530 --> 00:28:28,929
what we needed this is the same in code

00:28:27,190 --> 00:28:30,010
to we look back at the code we wrote and

00:28:28,929 --> 00:28:33,820
we want to punch ourselves in the face a

00:28:30,010 --> 00:28:35,350
lot of the times decisions about the

00:28:33,820 --> 00:28:38,050
systems about building services and how

00:28:35,350 --> 00:28:39,280
you organize can be the same way don't

00:28:38,050 --> 00:28:41,770
assume the decisions you made yesterday

00:28:39,280 --> 00:28:43,750
are still the right decisions today it

00:28:41,770 --> 00:28:45,790
could be very well it very well could be

00:28:43,750 --> 00:28:46,750
that the you had the best information to

00:28:45,790 --> 00:28:48,430
me the best

00:28:46,750 --> 00:28:50,260
decision at the time but today that

00:28:48,430 --> 00:28:52,330
could be different this is really hard

00:28:50,260 --> 00:28:53,830
to do like I said we still have this

00:28:52,330 --> 00:28:58,690
huge rails F we haven't solved that

00:28:53,830 --> 00:29:00,400
problem yet but we move towards it so

00:28:58,690 --> 00:29:02,380
that's what I've got again my name is

00:29:00,400 --> 00:29:11,050
Brian i work at Yammer and thank you

00:29:02,380 --> 00:29:13,600
guys so that's kind of a lie that's not

00:29:11,050 --> 00:29:16,240
all I have but that was all I originally

00:29:13,600 --> 00:29:19,210
had and I had a couple questions around

00:29:16,240 --> 00:29:20,920
some of these things and being I haven't

00:29:19,210 --> 00:29:22,390
put together a presentation while I

00:29:20,920 --> 00:29:23,680
didn't like one of ruined my flow of

00:29:22,390 --> 00:29:26,110
things so I didn't know where to put

00:29:23,680 --> 00:29:27,310
them so I just put him at the end and so

00:29:26,110 --> 00:29:29,020
this is a point that I wanted to make

00:29:27,310 --> 00:29:31,720
real quick this is a question that's

00:29:29,020 --> 00:29:33,070
come up a couple times and so I wanted

00:29:31,720 --> 00:29:35,260
to do address it what should I extract

00:29:33,070 --> 00:29:36,520
out into a service and kind of the cop

00:29:35,260 --> 00:29:39,430
out answer I've been giving to this is

00:29:36,520 --> 00:29:40,630
it depends on your application but I

00:29:39,430 --> 00:29:44,290
can't share some things that we've seen

00:29:40,630 --> 00:29:45,790
success with so like i said earlier

00:29:44,290 --> 00:29:47,920
things that have very little state or

00:29:45,790 --> 00:29:50,680
don't mutate state turn into relatively

00:29:47,920 --> 00:29:52,000
good services things that are new enough

00:29:50,680 --> 00:29:53,860
in your application not to be tightly

00:29:52,000 --> 00:29:56,680
coupled yet tend to be easier to pull

00:29:53,860 --> 00:29:58,840
out into services things that don't

00:29:56,680 --> 00:30:00,640
exist yet obviously are things that you

00:29:58,840 --> 00:30:02,950
can start building services with and

00:30:00,640 --> 00:30:04,870
then ultimately things that are hard to

00:30:02,950 --> 00:30:10,270
extract what are about to kill you are

00:30:04,870 --> 00:30:14,920
important to extract out however not

00:30:10,270 --> 00:30:18,550
everything works well as a service we do

00:30:14,920 --> 00:30:20,020
a lot of a/b testing at Yammer we saw

00:30:18,550 --> 00:30:22,150
some performance issues around kind of

00:30:20,020 --> 00:30:23,800
our experiment framework we had some

00:30:22,150 --> 00:30:25,060
tech that around it sorry thought sweet

00:30:23,800 --> 00:30:27,250
let's build a service out of it let's

00:30:25,060 --> 00:30:28,480
let's start over let's take what we've

00:30:27,250 --> 00:30:31,000
learned from this and build a service

00:30:28,480 --> 00:30:32,830
and so that we thought know maybe it's

00:30:31,000 --> 00:30:34,930
better just to refactor make what we

00:30:32,830 --> 00:30:37,600
have better and so why didn't we turn

00:30:34,930 --> 00:30:39,130
this into a service ultimately the

00:30:37,600 --> 00:30:43,990
problems we thought we had weren't as

00:30:39,130 --> 00:30:46,930
bad as we thought the user data and the

00:30:43,990 --> 00:30:48,250
experiment service needs the the data

00:30:46,930 --> 00:30:49,600
the experiment service needs is local to

00:30:48,250 --> 00:30:51,790
a rails app and we haven't solved that

00:30:49,600 --> 00:30:53,080
problem yet so either we'd have to stop

00:30:51,790 --> 00:30:55,179
and solve kind of the problem of getting

00:30:53,080 --> 00:30:57,280
user data to a service we'd still have

00:30:55,179 --> 00:30:59,530
to consult the rails app or flattery and

00:30:57,280 --> 00:31:00,880
possibly do plates a business logic we

00:30:59,530 --> 00:31:04,010
weren't ready to go down that path

00:31:00,880 --> 00:31:07,640
and then we love starting over on new

00:31:04,010 --> 00:31:09,679
things as developers it doesn't always

00:31:07,640 --> 00:31:11,540
make sense and we found that we can make

00:31:09,679 --> 00:31:14,059
this better and the place it already was

00:31:11,540 --> 00:31:15,950
without the need for a service it's a

00:31:14,059 --> 00:31:18,440
kind of last point here is that that

00:31:15,950 --> 00:31:19,670
services can have tect it as well just

00:31:18,440 --> 00:31:20,780
because you've extracted something out

00:31:19,670 --> 00:31:22,730
to a service doesn't mean you're home

00:31:20,780 --> 00:31:23,900
free you still have to consider all the

00:31:22,730 --> 00:31:25,429
same things you did about building

00:31:23,900 --> 00:31:26,390
software except now you have to worry

00:31:25,429 --> 00:31:28,220
about more you have to worry about

00:31:26,390 --> 00:31:30,920
services morphing to meet new

00:31:28,220 --> 00:31:32,480
requirements people that go in and make

00:31:30,920 --> 00:31:34,100
quick fixes to make a service do this

00:31:32,480 --> 00:31:35,360
extra thing it to be careful this

00:31:34,100 --> 00:31:38,600
doesn't start to turn into like a

00:31:35,360 --> 00:31:39,710
monolithic service at that point and so

00:31:38,600 --> 00:31:41,270
you still need to make well-thought-out

00:31:39,710 --> 00:31:44,420
changes to meet these changing

00:31:41,270 --> 00:31:46,160
requirements and and again be thinking

00:31:44,420 --> 00:31:49,820
about tech debt to your service

00:31:46,160 --> 00:31:51,440
infrastructure and so now let's pretend

00:31:49,820 --> 00:31:52,520
i have some clue what I'm talking about

00:31:51,440 --> 00:31:55,429
and we're going to go back to this last

00:31:52,520 --> 00:31:58,160
slide again and I just like the slide so

00:31:55,429 --> 00:32:01,820
I want to end on this so be ready to be

00:31:58,160 --> 00:32:05,200
wrong again my name is brad and i work

00:32:01,820 --> 00:32:05,200
at you ever thanks guys

00:32:40,400 --> 00:32:42,460

YouTube URL: https://www.youtube.com/watch?v=6OWHGGCj_yU


