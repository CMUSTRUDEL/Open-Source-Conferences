Title: Ruby On Ales 2013 Get Your Ass to 1.9 by Nic Benders
Publication date: 2020-01-28
Playlist: Ruby on Ales 2013
Description: 
	Help us caption & translate this video!

http://amara.org/v/FGbH/
Captions: 
	00:00:12,650 --> 00:00:14,710
you

00:00:19,990 --> 00:00:26,289
we're going to talk to you today about

00:00:21,760 --> 00:00:28,990
Ruby 19 Ruby 19 is not new news but I

00:00:26,289 --> 00:00:32,439
have a sinking suspicion many of you

00:00:28,990 --> 00:00:34,780
with large production apps often carried

00:00:32,439 --> 00:00:38,110
under that legacy banner may not be on

00:00:34,780 --> 00:00:41,500
Ruby 19 yet a year ago New Relic was not

00:00:38,110 --> 00:00:45,550
on Ruby 19 and we were like oh you know

00:00:41,500 --> 00:00:48,280
it's really hard it is hard but it is

00:00:45,550 --> 00:00:52,269
not insurmountable today I'm going to

00:00:48,280 --> 00:00:54,129
try and tell you how we did it and tell

00:00:52,269 --> 00:00:55,750
it to you in a way that you can go home

00:00:54,129 --> 00:00:57,790
and maybe not you know do it this

00:00:55,750 --> 00:01:00,280
afternoon we get started on that process

00:00:57,790 --> 00:01:01,809
and actually switch over and not just

00:01:00,280 --> 00:01:03,369
that but I think there's a like a

00:01:01,809 --> 00:01:05,440
pattern here that we'll we'll talk about

00:01:03,369 --> 00:01:07,299
that it's applicable to more than just

00:01:05,440 --> 00:01:09,760
your Ruby upgrades but your rails

00:01:07,299 --> 00:01:11,470
upgrades and your whatever upgrades it's

00:01:09,760 --> 00:01:16,780
time to get to 20 now anyway we have to

00:01:11,470 --> 00:01:19,420
change all these slides so briefly I'm

00:01:16,780 --> 00:01:25,780
Nick I'm with the site engineering team

00:01:19,420 --> 00:01:28,780
New Relic that's then oh and I'm Ralph

00:01:25,780 --> 00:01:31,210
I'm with a core app team in New Relic so

00:01:28,780 --> 00:01:32,799
we build the big rails app that we're

00:01:31,210 --> 00:01:34,689
going to be talking about here and we

00:01:32,799 --> 00:01:38,229
make sure that it stays running in a

00:01:34,689 --> 00:01:40,840
production environment the ability of

00:01:38,229 --> 00:01:43,479
these two teams to work together and in

00:01:40,840 --> 00:01:45,429
this case actually share people back and

00:01:43,479 --> 00:01:47,259
forth was really important to us going

00:01:45,429 --> 00:01:49,569
through this process the site

00:01:47,259 --> 00:01:51,640
engineering team is not kept off in a

00:01:49,569 --> 00:01:57,189
cave away from development I mean it is

00:01:51,640 --> 00:01:59,560
but it's not a lotta cave so two people

00:01:57,189 --> 00:02:01,450
on that team are rubyists they know how

00:01:59,560 --> 00:02:03,460
to do Ruby the people on the development

00:02:01,450 --> 00:02:05,229
team know how things run operationally

00:02:03,460 --> 00:02:07,719
so we were able to actually move over

00:02:05,229 --> 00:02:12,310
the hurdles as we came to work together

00:02:07,719 --> 00:02:18,450
on this stuff we in this case is New

00:02:12,310 --> 00:02:22,750
Relic as a Kobe briefly introduced the

00:02:18,450 --> 00:02:25,300
new relic product itself is application

00:02:22,750 --> 00:02:29,950
performance monitoring for Ruby Python

00:02:25,300 --> 00:02:31,600
Java net etc and it helps you find out

00:02:29,950 --> 00:02:32,569
when your app is slow and one of the

00:02:31,600 --> 00:02:36,620
things that was telling us

00:02:32,569 --> 00:02:42,019
that our app was slow we in the case of

00:02:36,620 --> 00:02:43,849
the work that was done isn't really us a

00:02:42,019 --> 00:02:48,889
ralph and i both contributed to this

00:02:43,849 --> 00:02:50,629
project we did real code work but we've

00:02:48,889 --> 00:02:52,819
got no means were the only people doing

00:02:50,629 --> 00:02:55,370
the work yeah basically everybody who is

00:02:52,819 --> 00:02:57,799
involved in the crap team and there were

00:02:55,370 --> 00:03:00,439
probably 25 people total who worked on

00:02:57,799 --> 00:03:02,900
that app and then some of the other

00:03:00,439 --> 00:03:05,329
smaller apps we all did something

00:03:02,900 --> 00:03:08,209
related to it also the Ruby agent team

00:03:05,329 --> 00:03:09,799
and also the site engineering team but

00:03:08,209 --> 00:03:11,449
these four folks probably did most of

00:03:09,799 --> 00:03:14,629
the heavy lifting and one of them is

00:03:11,449 --> 00:03:17,780
sitting right over there John guymon

00:03:14,629 --> 00:03:21,280
pictured right above me hi John Oh

00:03:17,780 --> 00:03:23,419
Kaiser on the left our spiritual leader

00:03:21,280 --> 00:03:25,549
Jonathan Owens and then Andrew bloom

00:03:23,419 --> 00:03:28,699
garden and and these are the folks are

00:03:25,549 --> 00:03:30,109
just did lots of the the hard work and

00:03:28,699 --> 00:03:31,609
they're not here because they're doing

00:03:30,109 --> 00:03:37,159
more hard work and we're just here

00:03:31,609 --> 00:03:39,709
talking and having a beer so that's a

00:03:37,159 --> 00:03:41,680
little bit about us you already know all

00:03:39,709 --> 00:03:44,030
the greats in tax changes and

00:03:41,680 --> 00:03:45,530
performance reasons and other you know

00:03:44,030 --> 00:03:49,159
great ideas on why you should be running

00:03:45,530 --> 00:03:51,139
Ruby 19 this is just a little extra push

00:03:49,159 --> 00:03:53,629
if for some reason you're still holding

00:03:51,139 --> 00:03:56,229
on for 18 is anybody actually using what

00:03:53,629 --> 00:03:56,229
I you'd still neck

00:03:59,099 --> 00:04:06,940
so that's okay it's okay Ruby will not

00:04:04,030 --> 00:04:11,500
been out for a long time now it's not

00:04:06,940 --> 00:04:14,190
new software it's fully supported 18 is

00:04:11,500 --> 00:04:17,049
really really going to stop support so

00:04:14,190 --> 00:04:18,669
if you are running 18 in production you

00:04:17,049 --> 00:04:20,829
were probably running Ruby Enterprise

00:04:18,669 --> 00:04:22,570
Edition because of the performance

00:04:20,829 --> 00:04:24,850
characteristics it's already end-of-life

00:04:22,570 --> 00:04:28,200
people submit bugs to that mailing list

00:04:24,850 --> 00:04:30,880
and they get guff they do not get fixes

00:04:28,200 --> 00:04:36,790
the rest of Ruby 18 is going that way

00:04:30,880 --> 00:04:38,080
very soon so this is some data from from

00:04:36,790 --> 00:04:40,720
New Relic because we have a lot of Ruby

00:04:38,080 --> 00:04:42,460
users and so you can you can tell that

00:04:40,720 --> 00:04:46,780
all the cool kids are at least run half

00:04:42,460 --> 00:04:48,490
of them are you know using 19 or 20 but

00:04:46,780 --> 00:04:50,550
that's a big chunk of people I think

00:04:48,490 --> 00:04:54,729
that's you know that's several thousand

00:04:50,550 --> 00:04:58,240
apps that are still running 187 and pay

00:04:54,729 --> 00:04:59,500
no attention to the 186 but so you know

00:04:58,240 --> 00:05:01,630
this there's there's still a lot of this

00:04:59,500 --> 00:05:04,780
work to be done in teams all around and

00:05:01,630 --> 00:05:05,919
so we can hopefully this will this stuff

00:05:04,780 --> 00:05:08,620
we're going to talk about how we did it

00:05:05,919 --> 00:05:10,270
will be applicable all right so now you

00:05:08,620 --> 00:05:12,850
know all the great reasons kind of

00:05:10,270 --> 00:05:15,880
reminded you why you should upgrade to

00:05:12,850 --> 00:05:19,270
19 the common reasons why you don't

00:05:15,880 --> 00:05:21,850
upgrade to 19 are people say well laughs

00:05:19,270 --> 00:05:23,740
is really big yeah its legacy you know

00:05:21,850 --> 00:05:26,289
it's going to be really hard for us to

00:05:23,740 --> 00:05:29,440
update it and we can't stop development

00:05:26,289 --> 00:05:31,630
on it while we do it we also have an app

00:05:29,440 --> 00:05:33,880
that is somewhat big and is somewhat

00:05:31,630 --> 00:05:38,050
legacy I looked back into our gift

00:05:33,880 --> 00:05:41,350
history been preparing this deck and our

00:05:38,050 --> 00:05:45,610
first commit was in July of 2007 it was

00:05:41,350 --> 00:05:48,370
rails version 1 2 3 we are now running

00:05:45,610 --> 00:05:52,240
30 on the same code base it is just kind

00:05:48,370 --> 00:05:56,650
of keep upgrading keep polishing at the

00:05:52,240 --> 00:06:00,820
time of the 19 switch we had 70,000 code

00:05:56,650 --> 00:06:03,490
lines or code LLC and 59,000 test LLC

00:06:00,820 --> 00:06:06,300
according to that wonderful opinionated

00:06:03,490 --> 00:06:06,300
rate stats

00:06:06,720 --> 00:06:10,650
and of course we're running Ruby

00:06:08,790 --> 00:06:15,540
Enterprise Edition which was hurtling

00:06:10,650 --> 00:06:17,190
towards a relevancy the biggest concern

00:06:15,540 --> 00:06:18,620
wasn't just the size of the code base

00:06:17,190 --> 00:06:22,980
though we were really worried about

00:06:18,620 --> 00:06:24,990
stopping work you know Shopify did there

00:06:22,980 --> 00:06:27,150
I think it was there 30 conversion or

00:06:24,990 --> 00:06:29,400
they wrote a lot about people talk about

00:06:27,150 --> 00:06:31,710
their big app conversions and it's never

00:06:29,400 --> 00:06:33,480
been a happy story they say oh we had to

00:06:31,710 --> 00:06:36,690
dedicate a ton of Engineers we couldn't

00:06:33,480 --> 00:06:40,560
ship any features so we're worried about

00:06:36,690 --> 00:06:42,890
this and like many people who are

00:06:40,560 --> 00:06:45,840
worried we did some dumb things first

00:06:42,890 --> 00:06:47,550
yeah so we just decided I it's too hard

00:06:45,840 --> 00:06:49,500
or not going to do it and then you

00:06:47,550 --> 00:06:50,670
finally felt the pain more and more so

00:06:49,500 --> 00:06:53,040
we that great it's the perfect

00:06:50,670 --> 00:06:54,480
opportunity we're going to riorca text

00:06:53,040 --> 00:06:57,210
things so that we have a few smaller

00:06:54,480 --> 00:07:00,419
pieces that we can then gradually

00:06:57,210 --> 00:07:01,800
upgrade those to 19 and then it'll just

00:07:00,419 --> 00:07:03,900
everything will be easier and we'll get

00:07:01,800 --> 00:07:06,450
some big wins and having a less complex

00:07:03,900 --> 00:07:10,710
app yeah that we did a lot of talking

00:07:06,450 --> 00:07:11,910
about that not so much doing and then

00:07:10,710 --> 00:07:13,290
but we thought okay well we're just

00:07:11,910 --> 00:07:15,810
going to have to bite the bullet and do

00:07:13,290 --> 00:07:17,550
it all at once and we're just going to

00:07:15,810 --> 00:07:19,770
have to kind of freeze the things

00:07:17,550 --> 00:07:21,990
working on it we quickly decided that

00:07:19,770 --> 00:07:24,840
was it going to work on garmin sitting

00:07:21,990 --> 00:07:26,850
there in the audience set forth on a one

00:07:24,840 --> 00:07:32,490
day fedex project to convert the

00:07:26,850 --> 00:07:34,380
codebase I went famously well maybe

00:07:32,490 --> 00:07:36,900
worth the try but it didn't work for us

00:07:34,380 --> 00:07:38,100
and then we thought great so the obvious

00:07:36,900 --> 00:07:40,400
solution is we're going to work in a

00:07:38,100 --> 00:07:43,500
branch everything's gonna be cool

00:07:40,400 --> 00:07:44,970
development happens over here on master

00:07:43,500 --> 00:07:46,460
and we don't have to worry about selling

00:07:44,970 --> 00:07:48,810
anybody down and then when it comes time

00:07:46,460 --> 00:07:52,410
we might be doing a little merging but

00:07:48,810 --> 00:07:54,150
it should be fine on but that that also

00:07:52,410 --> 00:07:56,400
proved to be a pretty bad idea when we

00:07:54,150 --> 00:07:59,760
started to do those merging back of

00:07:56,400 --> 00:08:01,340
changes it was immediately apparent that

00:07:59,760 --> 00:08:04,410
it was going to be really painful so

00:08:01,340 --> 00:08:07,140
here we were we had this branch that had

00:08:04,410 --> 00:08:11,070
to be completely here or reset against

00:08:07,140 --> 00:08:12,570
master all the time it had its own kind

00:08:11,070 --> 00:08:15,419
of set of tests and change they've been

00:08:12,570 --> 00:08:19,969
made in it with 19 but we couldn't

00:08:15,419 --> 00:08:21,769
maintain it so we started again we said

00:08:19,969 --> 00:08:23,779
everybody who does continuous deployment

00:08:21,769 --> 00:08:26,649
now which hopefully is almost everybody

00:08:23,779 --> 00:08:31,069
now at least talks about it knows the

00:08:26,649 --> 00:08:33,469
big idea do everything on master if you

00:08:31,069 --> 00:08:37,099
are doing continuous deployment system

00:08:33,469 --> 00:08:38,870
use feature flags you actually integrate

00:08:37,099 --> 00:08:40,399
all of your changes on to master all the

00:08:38,870 --> 00:08:42,829
time and push them out into production

00:08:40,399 --> 00:08:44,689
even though they're not live this is the

00:08:42,829 --> 00:08:47,269
pattern that we were able to follow so

00:08:44,689 --> 00:08:51,110
we took that one line branch and we

00:08:47,269 --> 00:08:54,980
landed it we made sure that it had its

00:08:51,110 --> 00:08:57,649
own CI job so we can tell at any given

00:08:54,980 --> 00:08:59,750
point whether it's working so now

00:08:57,649 --> 00:09:03,800
instead of having a question like oh is

00:08:59,750 --> 00:09:06,230
this code 18 or is this code 19 you know

00:09:03,800 --> 00:09:09,079
we know we use Jenkins so we had to

00:09:06,230 --> 00:09:10,819
Jenkins jobs one that ran in 18 for

00:09:09,079 --> 00:09:14,180
every bill and one that ran the exact

00:09:10,819 --> 00:09:15,829
same code but under 19 and the 19 job

00:09:14,180 --> 00:09:18,769
was completely on fire from the

00:09:15,829 --> 00:09:20,449
beginning and it doesn't even complete

00:09:18,769 --> 00:09:23,149
to start but we had something that we

00:09:20,449 --> 00:09:25,699
could start then to work on and we know

00:09:23,149 --> 00:09:27,740
you know when we broke production with

00:09:25,699 --> 00:09:29,540
something we were doing to try to get 19

00:09:27,740 --> 00:09:31,240
to work so it was really important to

00:09:29,540 --> 00:09:34,519
have that those jobs in up in parallel

00:09:31,240 --> 00:09:37,490
and a lesson that we we still carried on

00:09:34,519 --> 00:09:39,079
from the the early desire to like you

00:09:37,490 --> 00:09:41,689
know that's three architect the app to

00:09:39,079 --> 00:09:43,550
have smaller pieces well we did try this

00:09:41,689 --> 00:09:45,649
whole process with smaller pieces so

00:09:43,550 --> 00:09:47,449
that we could get the whole upgrade done

00:09:45,649 --> 00:09:50,149
with some an app that's just you know

00:09:47,449 --> 00:09:52,759
pretty tiny and work out some of the

00:09:50,149 --> 00:09:55,759
kinks like how do we deploy this torment

00:09:52,759 --> 00:09:56,839
to the production so we worked a lot of

00:09:55,759 --> 00:10:03,079
those things out with things that were

00:09:56,839 --> 00:10:04,610
less risky so to get going we had to do

00:10:03,079 --> 00:10:07,040
a lot of foundation work it turns out

00:10:04,610 --> 00:10:08,809
that the huge part of the work for

00:10:07,040 --> 00:10:12,199
getting us to 19 had nothing at all to

00:10:08,809 --> 00:10:14,000
do with Ruby 19 it was get our app in

00:10:12,199 --> 00:10:16,939
shape where it could run multiple

00:10:14,000 --> 00:10:18,769
versions so first thing we had to do was

00:10:16,939 --> 00:10:21,199
make sure that we were on a new enough

00:10:18,769 --> 00:10:23,540
version of rails 23 that we could

00:10:21,199 --> 00:10:25,699
support one not at all so we got all of

00:10:23,540 --> 00:10:27,439
our upgrades taken care of hopefully all

00:10:25,699 --> 00:10:29,269
of you are also upgraded for security

00:10:27,439 --> 00:10:33,139
reasons now that's one of a new fun

00:10:29,269 --> 00:10:33,769
thing the next thing was we had to come

00:10:33,139 --> 00:10:35,350
up with an info

00:10:33,769 --> 00:10:38,300
structure for switching Ruby versions

00:10:35,350 --> 00:10:41,449
luckily the community has done some

00:10:38,300 --> 00:10:46,759
great work on this meant for development

00:10:41,449 --> 00:10:49,309
mostly so we use our been and we use it

00:10:46,759 --> 00:10:51,860
on our workstations we use it in our CI

00:10:49,309 --> 00:10:54,529
system we use it in staging and we use

00:10:51,860 --> 00:10:56,119
it in production that change of

00:10:54,529 --> 00:11:00,679
switching our production environment

00:10:56,119 --> 00:11:04,639
from using a static path to Ruby 182

00:11:00,679 --> 00:11:06,019
using our bem Ruby 18 occupied a lot of

00:11:04,639 --> 00:11:08,509
the time in the rollout of this product

00:11:06,019 --> 00:11:11,899
but it was crucial once we were able to

00:11:08,509 --> 00:11:13,369
have our production Ruby under a version

00:11:11,899 --> 00:11:15,410
manager then we could switch back and

00:11:13,369 --> 00:11:18,589
forth anywhere we wanted in the whole

00:11:15,410 --> 00:11:20,899
stack with an environment variable the

00:11:18,589 --> 00:11:23,149
next item bundler Terrence is here

00:11:20,899 --> 00:11:26,449
somewhere it's totally awesome thank you

00:11:23,149 --> 00:11:28,600
brother guys especially with the

00:11:26,449 --> 00:11:32,420
introduction of bunglers platforms

00:11:28,600 --> 00:11:35,559
bundlers platform selection between Ruby

00:11:32,420 --> 00:11:38,449
18 and 19 meant that we could have the

00:11:35,559 --> 00:11:40,490
incompatible gems fenced off in their

00:11:38,449 --> 00:11:43,879
own little areas but still create a

00:11:40,490 --> 00:11:47,379
single coherent gemfile lock which our

00:11:43,879 --> 00:11:47,379
deployment process relies on

00:11:49,490 --> 00:11:53,930
so to roll out any big change I've got

00:11:52,459 --> 00:11:57,230
to have some test coverage so they can

00:11:53,930 --> 00:11:58,190
be pretty confident that the changes

00:11:57,230 --> 00:12:01,100
you're making are going to break stuff

00:11:58,190 --> 00:12:06,020
so you know we didn't really ramp up

00:12:01,100 --> 00:12:07,730
coverage to do this upgrade but we sort

00:12:06,020 --> 00:12:09,649
of started off with you know reasonable

00:12:07,730 --> 00:12:12,170
test coverage it was better than fifty

00:12:09,649 --> 00:12:14,089
percent it was seventy-six percent at

00:12:12,170 --> 00:12:18,020
the time of the switch we definitely

00:12:14,089 --> 00:12:19,760
uncovered places where we realized after

00:12:18,020 --> 00:12:22,550
kind of for the tail end of the process

00:12:19,760 --> 00:12:24,560
that we had we had big holes and some of

00:12:22,550 --> 00:12:26,810
our coverage so this was a good exercise

00:12:24,560 --> 00:12:30,200
and uncovering and then filling those

00:12:26,810 --> 00:12:33,589
holes so we've got our foundational

00:12:30,200 --> 00:12:36,050
elements kind of our prereqs we start on

00:12:33,589 --> 00:12:39,860
the hard part she's getting a test suite

00:12:36,050 --> 00:12:42,350
to run if you just take your Ruby 18

00:12:39,860 --> 00:12:44,920
based apps test suite and put it under

00:12:42,350 --> 00:12:47,120
19 and hit rake it's not going to run

00:12:44,920 --> 00:12:48,440
it's going to blow up there's going to

00:12:47,120 --> 00:12:51,860
be something weird with it there's a lot

00:12:48,440 --> 00:12:53,600
of load path issues stuff like that just

00:12:51,860 --> 00:12:55,760
prevented the test suite from even

00:12:53,600 --> 00:12:57,620
completing I don't even care about

00:12:55,760 --> 00:13:00,589
failures or errors I mean it just needed

00:12:57,620 --> 00:13:02,630
to get to the end so a lot of work was

00:13:00,589 --> 00:13:05,839
done to get that test suite to finish at

00:13:02,630 --> 00:13:09,350
all once that was done we had to start

00:13:05,839 --> 00:13:12,020
in on the third party gems and plugins

00:13:09,350 --> 00:13:17,270
and such that we used that absolutely

00:13:12,020 --> 00:13:20,089
just would not work with 19 notably we

00:13:17,270 --> 00:13:24,110
spent a lot of time replacing root port

00:13:20,089 --> 00:13:26,959
by we I mean Jonathan Owens and a lot of

00:13:24,110 --> 00:13:29,420
time replacing mongrel Marga role was

00:13:26,959 --> 00:13:31,810
certainly not at the time 19 compatible

00:13:29,420 --> 00:13:33,920
probably isn't now being

00:13:31,810 --> 00:13:36,680
stick-in-the-mud legacy app we were

00:13:33,920 --> 00:13:39,680
still on what girl so we had to switch

00:13:36,680 --> 00:13:42,380
that out for unicorn again all of these

00:13:39,680 --> 00:13:44,990
changes were not done in a branch these

00:13:42,380 --> 00:13:46,880
changes were all done in our master

00:13:44,990 --> 00:13:49,700
environment and pushed to production so

00:13:46,880 --> 00:13:52,520
our production 18 environment slowly

00:13:49,700 --> 00:13:54,230
lost its 18 dependencies so we're still

00:13:52,520 --> 00:13:56,149
running 18 but we're on our bemz now

00:13:54,230 --> 00:13:58,130
we're still running 18 but we're on

00:13:56,149 --> 00:14:02,120
unicorn now and we've ditched stupid

00:13:58,130 --> 00:14:09,410
report and just follow that pattern

00:14:02,120 --> 00:14:13,070
everything we did and then the big kind

00:14:09,410 --> 00:14:17,240
of time elapsed area just grind down the

00:14:13,070 --> 00:14:19,160
test failures yeah this took a few

00:14:17,240 --> 00:14:22,460
months I think we first started in on

00:14:19,160 --> 00:14:24,650
the preparatory work in wasn't March and

00:14:22,460 --> 00:14:26,540
we were done in early September and that

00:14:24,650 --> 00:14:28,760
doesn't count the time we spent denying

00:14:26,540 --> 00:14:30,440
that we needed to do this work yeah we

00:14:28,760 --> 00:14:33,620
spent a lot of time on that are out and

00:14:30,440 --> 00:14:38,690
work big plans for summer 2011 were

00:14:33,620 --> 00:14:40,010
switched to Ruby 19 yeah so in this in

00:14:38,690 --> 00:14:41,990
that long period we weren't sort of

00:14:40,010 --> 00:14:43,960
fully yeah you know there wasn't one

00:14:41,990 --> 00:14:46,190
person who was doing this full-time even

00:14:43,960 --> 00:14:49,460
their periods where we were just kind of

00:14:46,190 --> 00:14:52,610
gradually burning down the tests that

00:14:49,460 --> 00:14:54,800
were failing and so we didn't stop the

00:14:52,610 --> 00:14:56,360
world for any of this and we there were

00:14:54,800 --> 00:14:58,010
there were many times when looking back

00:14:56,360 --> 00:14:59,870
over the history of doing this there

00:14:58,010 --> 00:15:01,190
were things where you know people were

00:14:59,870 --> 00:15:02,990
just they were there shipping other

00:15:01,190 --> 00:15:05,150
other projects and so then they would

00:15:02,990 --> 00:15:07,339
kind of quit looking at the movie 19

00:15:05,150 --> 00:15:09,470
stuff for a week or two so i was pretty

00:15:07,339 --> 00:15:12,320
gradual but it it just took a long time

00:15:09,470 --> 00:15:14,540
the meant that because we had our CI job

00:15:12,320 --> 00:15:16,910
up even if you were not working on the

00:15:14,540 --> 00:15:18,200
one line project at all the new code

00:15:16,910 --> 00:15:20,959
that you were committing was being

00:15:18,200 --> 00:15:23,779
checked against 19 so if that section of

00:15:20,959 --> 00:15:25,640
code was at least executable under 19 so

00:15:23,779 --> 00:15:27,320
the test was completing you would know

00:15:25,640 --> 00:15:33,140
whether the new code you written had

00:15:27,320 --> 00:15:36,800
introduced more 19 regressions so that's

00:15:33,140 --> 00:15:39,500
the big picture of how we did it 19 has

00:15:36,800 --> 00:15:42,260
a lot of behavioral changes that are

00:15:39,500 --> 00:15:44,360
small on paper but in a suitably large

00:15:42,260 --> 00:15:48,230
app they get whipped around at a pre

00:15:44,360 --> 00:15:50,000
high speed and they will burn you so

00:15:48,230 --> 00:15:52,190
want to just go over a couple of the

00:15:50,000 --> 00:15:54,230
quick things that we hit on the road

00:15:52,190 --> 00:15:59,420
there this is by no means an exhaustive

00:15:54,230 --> 00:16:01,279
list as ralph said these two teams there

00:15:59,420 --> 00:16:04,459
was somebody working on this on and off

00:16:01,279 --> 00:16:06,050
for like five months okay so it's it was

00:16:04,459 --> 00:16:10,339
a big codebase it took us a long time

00:16:06,050 --> 00:16:13,070
and we went down some blind alleys the

00:16:10,339 --> 00:16:15,470
first big win was here's that bundler

00:16:13,070 --> 00:16:18,440
gemfile syntax platform ruby one

00:16:15,470 --> 00:16:20,270
nine platform Ruby 18 this was huge it

00:16:18,440 --> 00:16:25,010
saved us a ton of time once this feature

00:16:20,270 --> 00:16:27,440
came out she bundler 11 i think i think

00:16:25,010 --> 00:16:28,910
you know in the top there we say well

00:16:27,440 --> 00:16:31,550
when we're in 19 you have to use

00:16:28,910 --> 00:16:33,830
debugger instead of in 18 use Ruby debug

00:16:31,550 --> 00:16:36,850
so we put this in the gem file now the

00:16:33,830 --> 00:16:39,080
gem file works under both versions a

00:16:36,850 --> 00:16:41,150
couple other gems there that only work

00:16:39,080 --> 00:16:45,290
in one or the other faster CSV is a

00:16:41,150 --> 00:16:49,730
library we used in Ruby 18 and 19 the

00:16:45,290 --> 00:16:52,790
CSV support is built in this is a great

00:16:49,730 --> 00:16:55,670
one yeah so this was something to work

00:16:52,790 --> 00:17:00,470
around a change in the error message

00:16:55,670 --> 00:17:03,770
that was an output if rails couldn't

00:17:00,470 --> 00:17:07,360
find a file that I was trying to load

00:17:03,770 --> 00:17:09,920
and so with I think it went with 193

00:17:07,360 --> 00:17:12,530
particular the error message was

00:17:09,920 --> 00:17:14,390
different and so now we had to kind of

00:17:12,530 --> 00:17:17,260
add this regular expression so that I

00:17:14,390 --> 00:17:19,700
mean that the error message wouldn't get

00:17:17,260 --> 00:17:21,140
thrown as an exception but that I would

00:17:19,700 --> 00:17:23,870
get handled by this weird way the rails

00:17:21,140 --> 00:17:26,750
handless binding BIOS to load big thanks

00:17:23,870 --> 00:17:28,400
to the person link there and bit ly I

00:17:26,750 --> 00:17:33,380
forget who originally wrote this it

00:17:28,400 --> 00:17:35,450
wasn't us yeah we stole this but this

00:17:33,380 --> 00:17:38,450
was a pretty fun one um so this is one

00:17:35,450 --> 00:17:40,670
of those things we did to avoid a kind

00:17:38,450 --> 00:17:43,130
of a trap that we suspected what could

00:17:40,670 --> 00:17:44,990
get caught by and you know there's lots

00:17:43,130 --> 00:17:47,180
of people who had blogged about 19

00:17:44,990 --> 00:17:49,880
upgrade issues and things that had

00:17:47,180 --> 00:17:53,240
changed 19 so it's one of those things

00:17:49,880 --> 00:17:56,450
that we that we realized gosh we could

00:17:53,240 --> 00:17:58,640
be doing this in our code and it's

00:17:56,450 --> 00:18:00,440
probably not what we're really not doing

00:17:58,640 --> 00:18:02,830
what we think we're doing we shouldn't

00:18:00,440 --> 00:18:04,940
be using the arete array operator on a

00:18:02,830 --> 00:18:11,420
numeric type does anybody know what that

00:18:04,940 --> 00:18:13,910
does anyone any guesses it's a bit

00:18:11,420 --> 00:18:17,570
slicing operator on the numeric types

00:18:13,910 --> 00:18:20,330
obvious so it gives you the one or zero

00:18:17,570 --> 00:18:22,250
value of that bit in the number that's

00:18:20,330 --> 00:18:25,490
mean yeah that's probably what you want

00:18:22,250 --> 00:18:28,970
it's very useful this knowledge of this

00:18:25,490 --> 00:18:32,120
feature comes to us by way of

00:18:28,970 --> 00:18:34,789
kisses at usually devious hangman's from

00:18:32,120 --> 00:18:36,429
pdx Ruby so if for any of you who have

00:18:34,789 --> 00:18:39,350
thought that a hangman is waste of time

00:18:36,429 --> 00:18:41,809
this is code that shows you you can

00:18:39,350 --> 00:18:44,480
learn something right there this code

00:18:41,809 --> 00:18:47,090
did get tripped in our app during our

00:18:44,480 --> 00:18:48,530
tests we hit this there was a place

00:18:47,090 --> 00:18:51,260
where we had a variable coming through

00:18:48,530 --> 00:18:53,690
that we thought was a array but it

00:18:51,260 --> 00:18:55,280
sometimes could be the number of

00:18:53,690 --> 00:19:03,309
elements in the array instead of the

00:18:55,280 --> 00:19:07,070
array itself that was great this pattern

00:19:03,309 --> 00:19:08,990
we used a lot so in 18 we were getting a

00:19:07,070 --> 00:19:12,169
string and in 19 we're getting a symbol

00:19:08,990 --> 00:19:13,820
we want the same code to have this or to

00:19:12,169 --> 00:19:16,130
have the same effect under two different

00:19:13,820 --> 00:19:18,650
environments so we have to force the

00:19:16,130 --> 00:19:20,900
casting so all throughout our code

00:19:18,650 --> 00:19:22,549
you'll see these things like this where

00:19:20,900 --> 00:19:24,590
we're looping through the instance

00:19:22,549 --> 00:19:28,370
methods and ensuring that their symbols

00:19:24,590 --> 00:19:31,340
or any other type of returns if you

00:19:28,370 --> 00:19:33,350
upgrade from the MySQL gem to the MySQL

00:19:31,340 --> 00:19:37,250
to gem your code will also look like

00:19:33,350 --> 00:19:39,559
this because MySQL to gem reports the

00:19:37,250 --> 00:19:42,200
numbers as numbers and not as strings

00:19:39,559 --> 00:19:45,620
containing the number and so in order to

00:19:42,200 --> 00:19:47,419
enforce the same behavior in two

00:19:45,620 --> 00:19:49,429
different environments you need to just

00:19:47,419 --> 00:19:51,049
you know just say well I don't know what

00:19:49,429 --> 00:19:52,909
I'm going to get force it to be a symbol

00:19:51,049 --> 00:19:57,380
then write the code once for a case

00:19:52,909 --> 00:19:59,360
where it's a symbol no conditionals just

00:19:57,380 --> 00:20:01,539
do it standardize on something then

00:19:59,360 --> 00:20:05,419
here's the conditional variety i

00:20:01,539 --> 00:20:10,039
mentioned faster CSV earlier but we just

00:20:05,419 --> 00:20:13,580
use plain CSV in Ruby 19 this slightly

00:20:10,039 --> 00:20:16,700
tortured piece of code extracted exactly

00:20:13,580 --> 00:20:20,450
as is from our code base checks to

00:20:16,700 --> 00:20:24,230
figure out if we're using the weird old

00:20:20,450 --> 00:20:27,049
CSV and if we are it pulls in faster CSV

00:20:24,230 --> 00:20:29,240
uses remove constant to get rid of the

00:20:27,049 --> 00:20:31,940
old one and then constant assigns there

00:20:29,240 --> 00:20:34,610
with the equals classes in Ruby are just

00:20:31,940 --> 00:20:36,169
constants you can actually set them what

00:20:34,610 --> 00:20:38,659
would code climbing say about this I

00:20:36,169 --> 00:20:40,340
don't even want to know I've never

00:20:38,659 --> 00:20:42,710
checked that you know it's got a little

00:20:40,340 --> 00:20:44,320
bit of c2 complexities

00:20:42,710 --> 00:20:47,000
pretty straightforward otherwise right i

00:20:44,320 --> 00:20:54,080
think is removed costs penalized by

00:20:47,000 --> 00:21:03,710
flogged i'll set objects in what people

00:20:54,080 --> 00:21:07,700
who don't like sand come on city here's

00:21:03,710 --> 00:21:10,640
another weird one the exact semantics of

00:21:07,700 --> 00:21:12,500
load paths changed in 19 the result of

00:21:10,640 --> 00:21:14,480
this was that people's local development

00:21:12,500 --> 00:21:16,159
environments didn't work under 19

00:21:14,480 --> 00:21:19,909
because they would typescript server and

00:21:16,159 --> 00:21:22,340
it would just bail our script server is

00:21:19,909 --> 00:21:24,919
just a little stub put there by ruby to

00:21:22,340 --> 00:21:27,080
30 or so our rails to 30 or something

00:21:24,919 --> 00:21:30,919
you know back in the dawn of time and it

00:21:27,080 --> 00:21:33,409
never been updated so it broke there's

00:21:30,919 --> 00:21:36,620
easy ways to fix this and so this just

00:21:33,409 --> 00:21:39,649
updated it to the current at the time 2

00:21:36,620 --> 00:21:41,690
314 but this particular pattern was

00:21:39,649 --> 00:21:45,020
throughout our code we may have spent

00:21:41,690 --> 00:21:46,640
more time on this load path fix pattern

00:21:45,020 --> 00:21:48,559
than on any of the other behavioral

00:21:46,640 --> 00:21:50,450
changes just because each of our

00:21:48,559 --> 00:21:52,490
background scripts just everywhere all

00:21:50,450 --> 00:21:54,830
of our tests all you know this is just

00:21:52,490 --> 00:21:56,330
going to be everywhere you just learn

00:21:54,830 --> 00:22:00,640
how to fix it you just fix it every

00:21:56,330 --> 00:22:00,640
place it crops up there's no magic trick

00:22:02,740 --> 00:22:08,840
other than the stuff I've covered

00:22:05,539 --> 00:22:10,370
there's also these great items we could

00:22:08,840 --> 00:22:13,090
have showed you some code for each one

00:22:10,370 --> 00:22:18,260
of these but it's it's not really

00:22:13,090 --> 00:22:20,720
important how they're each fixed a super

00:22:18,260 --> 00:22:22,700
kind of very high level lambda arity

00:22:20,720 --> 00:22:24,950
will bite you if you do bad things with

00:22:22,700 --> 00:22:27,529
lambdas and turns out we used background

00:22:24,950 --> 00:22:29,029
job which did the difference between a

00:22:27,529 --> 00:22:32,270
proc and lambda and things that that

00:22:29,029 --> 00:22:33,649
matters and 19 ordered hashes are now

00:22:32,270 --> 00:22:34,970
the default 19 you wouldn't think that

00:22:33,649 --> 00:22:36,799
would break anything it turns out that

00:22:34,970 --> 00:22:44,059
we were relying on the unordered

00:22:36,799 --> 00:22:45,620
ordering hmmm whoops so yeah lots of

00:22:44,059 --> 00:22:47,809
lots of little things and these are all

00:22:45,620 --> 00:22:51,740
things that you can just kind of Google

00:22:47,809 --> 00:22:54,520
about and find out a lots of or stories

00:22:51,740 --> 00:22:54,520
about how people fix them

00:22:54,940 --> 00:22:58,600
Jonathan Owens detailed to me at great

00:22:56,620 --> 00:23:01,540
length what that reg exchange was and it

00:22:58,600 --> 00:23:06,520
went completely over my head so I'm sure

00:23:01,540 --> 00:23:09,130
it's complicated so now you've done it

00:23:06,520 --> 00:23:12,310
you've got your tests green everything's

00:23:09,130 --> 00:23:15,160
ready to go now I for clarity our tests

00:23:12,310 --> 00:23:18,130
went green in June i think it was june

00:23:15,160 --> 00:23:20,020
june we launched in mid-september on 19

00:23:18,130 --> 00:23:21,640
so from green test the launch was

00:23:20,020 --> 00:23:22,480
actually a fair amount of times we had

00:23:21,640 --> 00:23:25,480
to go through the rest of this

00:23:22,480 --> 00:23:29,130
environmental changes but when we were

00:23:25,480 --> 00:23:34,390
ready we followed this plan relatively

00:23:29,130 --> 00:23:36,730
well the idea is you've now made what

00:23:34,390 --> 00:23:39,220
version you're running part of your

00:23:36,730 --> 00:23:40,960
environment not part of your app your

00:23:39,220 --> 00:23:44,440
app at this point will run under both

00:23:40,960 --> 00:23:45,970
environments just fine so now we've

00:23:44,440 --> 00:23:47,770
switched them environment by environment

00:23:45,970 --> 00:23:50,260
we say local dev so everybody's

00:23:47,770 --> 00:23:51,730
workstations now 19 all new code you're

00:23:50,260 --> 00:23:54,010
writing your writing it first in 19

00:23:51,730 --> 00:23:56,860
you're just letting CI system make sure

00:23:54,010 --> 00:23:58,030
that you're 18 stuff is good then we

00:23:56,860 --> 00:24:00,700
have a number of pre-release

00:23:58,030 --> 00:24:02,470
environments staging dev internal we

00:24:00,700 --> 00:24:04,000
have a bunch of various ones we just

00:24:02,470 --> 00:24:06,670
went through those one at a time each

00:24:04,000 --> 00:24:08,200
time we cut an environment over we lend

00:24:06,670 --> 00:24:10,060
a little bit more about the procedure we

00:24:08,200 --> 00:24:12,460
say oh well you know turns out that if

00:24:10,060 --> 00:24:13,750
you change which version of Ruby you're

00:24:12,460 --> 00:24:16,270
running and then do a graceful restart

00:24:13,750 --> 00:24:19,660
unicorn that you will not have a good

00:24:16,270 --> 00:24:21,640
time and you kind of just work through

00:24:19,660 --> 00:24:23,320
this and you've got to practice your

00:24:21,640 --> 00:24:26,040
roll back when it comes to production

00:24:23,320 --> 00:24:28,060
time you're going to want to roll back

00:24:26,040 --> 00:24:30,190
your staging environments are a good

00:24:28,060 --> 00:24:32,740
opportunity to do this so we took our

00:24:30,190 --> 00:24:35,380
main staging environment went forward

00:24:32,740 --> 00:24:37,060
getting it back we move forward and we

00:24:35,380 --> 00:24:39,580
went back and we took it back and forth

00:24:37,060 --> 00:24:42,010
three times in the week before we went

00:24:39,580 --> 00:24:44,050
to production and keeping their rollback

00:24:42,010 --> 00:24:45,730
process really simple is really

00:24:44,050 --> 00:24:47,380
important so that it's not you know if

00:24:45,730 --> 00:24:49,840
it's a one-line config change or a

00:24:47,380 --> 00:24:53,440
single command that's that's what you

00:24:49,840 --> 00:24:58,270
want no no reverting commits if you

00:24:53,440 --> 00:25:01,060
don't have to we use monett still to

00:24:58,270 --> 00:25:04,150
kind of manage our processes and so for

00:25:01,060 --> 00:25:06,820
us it was a matter of changing our monic

00:25:04,150 --> 00:25:08,090
config to change the Alban underscore

00:25:06,820 --> 00:25:09,830
version

00:25:08,090 --> 00:25:11,600
variable you know then you'd push that

00:25:09,830 --> 00:25:13,039
forwards and back but we could have made

00:25:11,600 --> 00:25:16,100
it easier and that I think that would

00:25:13,039 --> 00:25:19,130
have been nicer so you've been at this

00:25:16,100 --> 00:25:23,270
now six months you are ready the big day

00:25:19,130 --> 00:25:25,279
is here time to do the roll out one of

00:25:23,270 --> 00:25:28,789
the things that we learned the hard way

00:25:25,279 --> 00:25:30,860
the expensive way was you need to roll

00:25:28,789 --> 00:25:32,960
out your servers one by one in case you

00:25:30,860 --> 00:25:36,500
have to go back and you need to have

00:25:32,960 --> 00:25:38,360
extra capacity available we had three

00:25:36,500 --> 00:25:40,039
app servers and it turned out that we

00:25:38,360 --> 00:25:42,529
were not able to run the site smoothly

00:25:40,039 --> 00:25:46,279
on to we thought we were we hadn't

00:25:42,529 --> 00:25:50,210
practiced it so we took one app server

00:25:46,279 --> 00:25:53,419
out to upgrade it to Ruby 19 and the

00:25:50,210 --> 00:25:57,799
site pretty much went to hell that was

00:25:53,419 --> 00:25:59,659
embarrassing so the next time we did a

00:25:57,799 --> 00:26:01,940
major infrastructure improvement we

00:25:59,659 --> 00:26:04,460
added an entirely new app server that

00:26:01,940 --> 00:26:06,500
week before doing the upgrade so we knew

00:26:04,460 --> 00:26:09,890
that we had a whole server with spare

00:26:06,500 --> 00:26:12,200
capacity the other thing that we learned

00:26:09,890 --> 00:26:15,169
was you have to be patient the problems

00:26:12,200 --> 00:26:18,140
that arise during a rollout in

00:26:15,169 --> 00:26:20,120
production may not arise immediately so

00:26:18,140 --> 00:26:21,470
we actually did roll back our production

00:26:20,120 --> 00:26:23,240
environment the first time we did it so

00:26:21,470 --> 00:26:26,000
we took the production environment when

00:26:23,240 --> 00:26:28,880
forward to 19 didn't work blew up

00:26:26,000 --> 00:26:30,529
immediately we rolled back then you know

00:26:28,880 --> 00:26:33,559
we fixed that problem we went in the

00:26:30,529 --> 00:26:36,049
next week 1219 it looked like it worked

00:26:33,559 --> 00:26:39,649
we started rolling the servers he didn't

00:26:36,049 --> 00:26:41,480
really work so we had to do some pretty

00:26:39,649 --> 00:26:47,870
emergency patching work thank you again

00:26:41,480 --> 00:26:49,789
John of course you also broke it huh so

00:26:47,870 --> 00:26:51,260
when you're rolling forward it's really

00:26:49,789 --> 00:26:53,330
exciting you've been at this project for

00:26:51,260 --> 00:26:56,659
a long time but be patient you know give

00:26:53,330 --> 00:26:59,570
it time to bake on each server the thing

00:26:56,659 --> 00:27:01,970
that's implied in this list is if you're

00:26:59,570 --> 00:27:04,330
rolling your servers out one by one you

00:27:01,970 --> 00:27:06,350
need to have it so that your app can be

00:27:04,330 --> 00:27:07,520
writing to the same database from

00:27:06,350 --> 00:27:11,210
servers running different versions of

00:27:07,520 --> 00:27:12,860
Ruby so you know one app server might be

00:27:11,210 --> 00:27:15,020
running Ruby 18 and one app server is

00:27:12,860 --> 00:27:17,120
running Ruby 19 and they're both talking

00:27:15,020 --> 00:27:19,280
to the same back end the only place is

00:27:17,120 --> 00:27:21,530
going to be a little bit odd is if you

00:27:19,280 --> 00:27:23,450
having utf-8 stuff

00:27:21,530 --> 00:27:24,650
in coding issues but keep an eye out for

00:27:23,450 --> 00:27:26,480
it you want to build your app so that

00:27:24,650 --> 00:27:28,370
you can do this otherwise you need to

00:27:26,480 --> 00:27:30,290
shut the whole thing down in order to do

00:27:28,370 --> 00:27:31,760
your upgrade and bring it up and you

00:27:30,290 --> 00:27:34,850
certainly don't want to be in a

00:27:31,760 --> 00:27:36,920
situation where if you were to switch to

00:27:34,850 --> 00:27:38,780
19 write data to the database switch

00:27:36,920 --> 00:27:41,600
back to 18 that you would no longer have

00:27:38,780 --> 00:27:48,350
a readable database so be careful around

00:27:41,600 --> 00:27:50,120
the encoding this is what we got for

00:27:48,350 --> 00:27:52,790
people who don't know the New Relic you

00:27:50,120 --> 00:27:57,200
I may be as well as we do the top one is

00:27:52,790 --> 00:27:59,210
the time as measured at the browser by

00:27:57,200 --> 00:28:00,740
our JavaScript hooks and the bottom one

00:27:59,210 --> 00:28:04,400
is your traditional app server time

00:28:00,740 --> 00:28:09,290
break down that red line is our little

00:28:04,400 --> 00:28:12,430
downtime that as we did this as you can

00:28:09,290 --> 00:28:15,500
see a huge improvement in performance

00:28:12,430 --> 00:28:17,660
the amount of time spent in garbage

00:28:15,500 --> 00:28:22,250
collection you know was caught by like

00:28:17,660 --> 00:28:26,810
75 percent in our app is a huge

00:28:22,250 --> 00:28:28,910
difference not shown here is that the

00:28:26,810 --> 00:28:32,480
CPU burn on our app servers dropped by

00:28:28,910 --> 00:28:34,700
half so the load on our app servers was

00:28:32,480 --> 00:28:36,500
like 75 percent before going into this

00:28:34,700 --> 00:28:38,840
it was like forty percent coming out of

00:28:36,500 --> 00:28:40,760
it you know it was an amazing savings

00:28:38,840 --> 00:28:44,510
for us it was essentially an entire free

00:28:40,760 --> 00:28:46,790
app server worth of CPU in that top one

00:28:44,510 --> 00:28:49,910
that shows to the end-user means that

00:28:46,790 --> 00:28:52,760
even in them all the noise in your app

00:28:49,910 --> 00:28:55,850
of JavaScript loading and pages actually

00:28:52,760 --> 00:28:58,730
downloading and assets to change to 19

00:28:55,850 --> 00:29:01,070
was visible to users this made enough of

00:28:58,730 --> 00:29:10,100
an effect that each page was visibly

00:29:01,070 --> 00:29:11,540
faster to users so we learned some

00:29:10,100 --> 00:29:13,940
lessons kind of pretty early about how

00:29:11,540 --> 00:29:17,960
we wanted to really proceed with with

00:29:13,940 --> 00:29:20,570
doing this upgrade you know do it in

00:29:17,960 --> 00:29:22,970
master or just deployed the changes that

00:29:20,570 --> 00:29:25,070
are necessary continuously use the same

00:29:22,970 --> 00:29:28,250
code base in both in both new

00:29:25,070 --> 00:29:29,720
environments but after kinda after the

00:29:28,250 --> 00:29:30,680
faculty we thought there were some

00:29:29,720 --> 00:29:34,730
things that we could have done a little

00:29:30,680 --> 00:29:36,320
bit better and one was too

00:29:34,730 --> 00:29:38,240
share the knowledge about about the

00:29:36,320 --> 00:29:42,110
upgrade like what is what's different in

00:29:38,240 --> 00:29:44,480
19 and try to involve everybody in as

00:29:42,110 --> 00:29:47,870
much as possible in working on those

00:29:44,480 --> 00:29:50,990
tests and in writing new code that will

00:29:47,870 --> 00:29:53,270
be 19 compatible because we did have a

00:29:50,990 --> 00:29:55,760
few regressions along the way to burning

00:29:53,270 --> 00:29:58,850
down all the test failures and I think

00:29:55,760 --> 00:30:02,809
if we had spent a little more time like

00:29:58,850 --> 00:30:04,580
making it really easy to work you know

00:30:02,809 --> 00:30:07,580
in both environments to test in both

00:30:04,580 --> 00:30:10,760
environments to see what the what the

00:30:07,580 --> 00:30:13,130
gotchas were in 19 we would have made

00:30:10,760 --> 00:30:14,299
that not just have the work done faster

00:30:13,130 --> 00:30:17,059
because more people are working in

00:30:14,299 --> 00:30:18,830
parallel what make it so that whenever

00:30:17,059 --> 00:30:21,169
we whenever we cut over like everybody

00:30:18,830 --> 00:30:24,650
understands 19 and there's there's

00:30:21,169 --> 00:30:27,410
nothing to worry about so we could test

00:30:24,650 --> 00:30:30,650
locally and it would involve you know

00:30:27,410 --> 00:30:32,870
I've got my repo and and I do I bundle

00:30:30,650 --> 00:30:34,940
install and I test and I run the test

00:30:32,870 --> 00:30:36,590
suite takes a little while and then I

00:30:34,940 --> 00:30:39,140
you know I switched my ruby version and

00:30:36,590 --> 00:30:41,330
I bundle again and then run the test

00:30:39,140 --> 00:30:43,549
again and that's no one really wants to

00:30:41,330 --> 00:30:45,260
do that that's not easy you know we

00:30:43,549 --> 00:30:46,730
didn't really even write a rig task that

00:30:45,260 --> 00:30:48,710
would just automate all that for you and

00:30:46,730 --> 00:30:51,970
we could have done it at least that so

00:30:48,710 --> 00:30:55,910
what we often just did was ok I'm in 19

00:30:51,970 --> 00:30:58,910
tests are passing now cool I'll rely on

00:30:55,910 --> 00:31:00,650
CI 2 to make sure that it still works in

00:30:58,910 --> 00:31:03,410
our production 18 environment and that's

00:31:00,650 --> 00:31:05,450
okay but it would have been great to say

00:31:03,410 --> 00:31:08,870
like run both things in parallel on my

00:31:05,450 --> 00:31:11,960
machine before I commit and finally the

00:31:08,870 --> 00:31:14,870
like our background jobs were one of

00:31:11,960 --> 00:31:19,220
those big sources of no test coverage

00:31:14,870 --> 00:31:22,100
and if you can guess why the there's a

00:31:19,220 --> 00:31:23,720
lot of code in the background jobs that

00:31:22,100 --> 00:31:25,190
should have just been in a model and the

00:31:23,720 --> 00:31:28,220
background job should have been like one

00:31:25,190 --> 00:31:31,549
method call but instead there's a lot of

00:31:28,220 --> 00:31:33,710
logic in the job itself in the script

00:31:31,549 --> 00:31:35,179
basically and so we ended up moving a

00:31:33,710 --> 00:31:36,559
lot of that stuff out two models that

00:31:35,179 --> 00:31:39,410
were that we were just going to keep

00:31:36,559 --> 00:31:41,150
tested like everything else and that was

00:31:39,410 --> 00:31:43,820
a pretty big win for the whole app I

00:31:41,150 --> 00:31:45,409
also made us you know be able to deploy

00:31:43,820 --> 00:31:47,950
this to production without all of our

00:31:45,409 --> 00:31:47,950
jobs feeling

00:31:48,230 --> 00:31:55,850
well yeah the bastard hellish moonscape

00:31:53,360 --> 00:32:01,520
what does that no looks pretty nice my

00:31:55,850 --> 00:32:05,240
presentations been suspended hey thanks

00:32:01,520 --> 00:32:09,140
Apple we're just going to click through

00:32:05,240 --> 00:32:11,390
these this way so the pattern that we we

00:32:09,140 --> 00:32:12,770
we followed and eventually what we we

00:32:11,390 --> 00:32:14,660
thought were good practices in doing

00:32:12,770 --> 00:32:16,549
this upgrade or something that we you

00:32:14,660 --> 00:32:18,559
know we got to apply again recently and

00:32:16,549 --> 00:32:20,630
we're going to get to apply again and

00:32:18,559 --> 00:32:22,130
again because we're going to be

00:32:20,630 --> 00:32:26,960
upgrading rails are going to be

00:32:22,130 --> 00:32:28,340
operating Ruby 220 and it's just

00:32:26,960 --> 00:32:30,760
something that people who develop

00:32:28,340 --> 00:32:34,730
software they had to maintain and to do

00:32:30,760 --> 00:32:38,540
so Andrew one of the guys who worked on

00:32:34,730 --> 00:32:40,100
the Ruby upgrade and Julian is another

00:32:38,540 --> 00:32:42,290
engineer on our team in San Francisco

00:32:40,100 --> 00:32:44,570
they they were largely responsible for

00:32:42,290 --> 00:32:47,480
the rails 3 upgrade we did and that was

00:32:44,570 --> 00:32:50,570
harder I was kind of a lot more total

00:32:47,480 --> 00:32:52,580
work I think he'd Kevin Powell trick did

00:32:50,570 --> 00:32:56,120
not work for rail three yeah we had some

00:32:52,580 --> 00:32:59,270
interesting hacks to get gems gems to

00:32:56,120 --> 00:33:02,809
work easily but these guys will be

00:32:59,270 --> 00:33:04,250
talking about how they did essentially

00:33:02,809 --> 00:33:07,370
the kind of thing that we did upgrade

00:33:04,250 --> 00:33:08,630
Ruby what they did it better and they'll

00:33:07,370 --> 00:33:10,400
be talking about that at railsconf in

00:33:08,630 --> 00:33:11,480
Portland that's here first I'll see it

00:33:10,400 --> 00:33:13,700
if you're interested in these kind of

00:33:11,480 --> 00:33:15,770
stories certainly have smoother lodge

00:33:13,700 --> 00:33:17,390
yeah I think they commit there was a

00:33:15,770 --> 00:33:19,549
commitment so there's a code change to

00:33:17,390 --> 00:33:22,549
change over but it was like three lines

00:33:19,549 --> 00:33:24,799
of code in that commit if you really

00:33:22,549 --> 00:33:27,200
like this type of topic we are of course

00:33:24,799 --> 00:33:29,240
hiring both in the site engineering and

00:33:27,200 --> 00:33:32,200
in the core developer teams so here's

00:33:29,240 --> 00:33:34,660
our plug come and work in the beautiful

00:33:32,200 --> 00:33:37,070
office tower there in downtown Portland

00:33:34,660 --> 00:33:39,620
and you know you can admire our

00:33:37,070 --> 00:33:43,610
billboard come in I actually haven't

00:33:39,620 --> 00:33:45,710
seen the Billboard myself yet that's it

00:33:43,610 --> 00:33:50,299
for us and apparently for the battery on

00:33:45,710 --> 00:33:52,610
my laptop to make way for the Lightning

00:33:50,299 --> 00:33:55,010
talkers I'm going to step down and we'll

00:33:52,610 --> 00:33:56,240
take questions on the floor so just you

00:33:55,010 --> 00:33:58,070
know if you want to know anything about

00:33:56,240 --> 00:34:02,169
how we did it I just come and find us

00:33:58,070 --> 00:34:02,169
we're going to be here thanks

00:34:35,480 --> 00:34:37,540

YouTube URL: https://www.youtube.com/watch?v=OcrpAT5LhFg


