Title: Ruby On Ales "You Can't Miss What You Can't Measure" by Kerri Miller
Publication date: 2020-01-28
Playlist: Ruby on Ales 2013
Description: 
	Adrift at sea, a GPS device will report your precise latitude and longitude, but if you don't know what those numbers mean, you're just as lost as before. Similarly, there are many tools that offer a wide variety of metrics about your code, but other than making you feel good, what are you supposed to do with this knowledge? Let's answer that question by exploring what the numbers mean, how static code analysis can add value to your development process, and how it can help us chart the unexplored seas of legacy code.

Help us caption & translate this video!

http://amara.org/v/FGbI/
Captions: 
	00:00:12,650 --> 00:00:14,710
you

00:00:20,060 --> 00:00:27,820
how many sound engineers to take to

00:00:21,800 --> 00:00:34,640
change a light bulb let me check 1212

00:00:27,820 --> 00:00:36,949
there we go context so is anybody has

00:00:34,640 --> 00:00:46,040
anybody thank the organizing team yet

00:00:36,949 --> 00:00:48,290
for Ruby audials well thank you this is

00:00:46,040 --> 00:00:51,620
a super fun conference every year this

00:00:48,290 --> 00:00:56,330
much in my second year ago nails and how

00:00:51,620 --> 00:00:58,129
many of you from bed okay so you all

00:00:56,330 --> 00:01:00,290
know how to run it drive on rotaries and

00:00:58,129 --> 00:01:02,659
dodge suvs and the one-way roads and

00:01:00,290 --> 00:01:05,689
everything yeah this actually my third

00:01:02,659 --> 00:01:08,659
time in Bend and I drive up here every

00:01:05,689 --> 00:01:10,280
year from Seattle and I get lost every

00:01:08,659 --> 00:01:12,340
single time I leave the conference venue

00:01:10,280 --> 00:01:14,900
try to get back to where I'm staying

00:01:12,340 --> 00:01:18,409
which reminds me a lot of my home I

00:01:14,900 --> 00:01:20,540
member rigidly from Vermont it looks

00:01:18,409 --> 00:01:23,060
exactly like this this bridge is about a

00:01:20,540 --> 00:01:25,729
mile and a half of my parents house the

00:01:23,060 --> 00:01:29,030
entire state is this beautiful pristine

00:01:25,729 --> 00:01:30,140
historical monument every year hundreds

00:01:29,030 --> 00:01:32,240
of thousands of people come from

00:01:30,140 --> 00:01:36,229
everywhere on the earth to see our

00:01:32,240 --> 00:01:38,420
foliage and are getting around Vermont

00:01:36,229 --> 00:01:41,990
and getting around bends very similar to

00:01:38,420 --> 00:01:43,969
me the joke in Vermont is if you get

00:01:41,990 --> 00:01:47,390
directions from a Vermonter this is

00:01:43,969 --> 00:01:49,130
usually what you get if I have a couple

00:01:47,390 --> 00:01:51,639
more beers I'll actually be able to say

00:01:49,130 --> 00:01:51,639
that properly

00:01:55,940 --> 00:02:01,380
this is a map of south eastern Vermont

00:01:58,460 --> 00:02:02,550
where i'm actually bored i was born and

00:02:01,380 --> 00:02:05,040
raised in brattleboro there down the

00:02:02,550 --> 00:02:07,230
bottom but if you ever come and visit

00:02:05,040 --> 00:02:09,210
and let's say you started in Putney

00:02:07,230 --> 00:02:13,230
Vermont which is a beautiful town so my

00:02:09,210 --> 00:02:15,300
parents farm is and you can put this

00:02:13,230 --> 00:02:16,950
awesome organic milk tasting that's

00:02:15,300 --> 00:02:19,200
going on in Brookline Vermont over there

00:02:16,950 --> 00:02:23,370
it's amazing and you want to get over

00:02:19,200 --> 00:02:24,510
there but you don't have a map you're

00:02:23,370 --> 00:02:28,280
not gonna have google because we don't

00:02:24,510 --> 00:02:30,540
have Wi-Fi we have 1g coverage i think

00:02:28,280 --> 00:02:33,330
but you managed to get some directions

00:02:30,540 --> 00:02:34,560
real local and you figure out that you

00:02:33,330 --> 00:02:36,300
have to go down there to brattleboro and

00:02:34,560 --> 00:02:40,590
then come back up the West River Valley

00:02:36,300 --> 00:02:43,500
and it's pretty easy right it's pretty

00:02:40,590 --> 00:02:44,580
simple what probably most of you don't

00:02:43,500 --> 00:02:46,410
know because you don't pay attention to

00:02:44,580 --> 00:02:50,280
Vermont very often is that about two

00:02:46,410 --> 00:02:52,140
years ago this happened Hurricane Irene

00:02:50,280 --> 00:02:55,110
came through and dumped about eight

00:02:52,140 --> 00:02:58,590
inches of rain on the state not a lot of

00:02:55,110 --> 00:02:59,820
rain Vermont is shaped like a wad of tin

00:02:58,590 --> 00:03:01,739
foil they got crumpled up and then

00:02:59,820 --> 00:03:05,220
someone kind of tried to flatten it out

00:03:01,739 --> 00:03:07,170
again so roads galore washed out whole

00:03:05,220 --> 00:03:10,650
towns are wiped off the map it's kind of

00:03:07,170 --> 00:03:12,770
disaster so you hit this and you turn

00:03:10,650 --> 00:03:15,180
around and you find some farmer and you

00:03:12,770 --> 00:03:17,070
interpret his directions and he says you

00:03:15,180 --> 00:03:18,720
know the classic you know two miles

00:03:17,070 --> 00:03:22,230
before the dead end you want to take a

00:03:18,720 --> 00:03:24,300
left and then you add a ways five maybe

00:03:22,230 --> 00:03:26,520
15 minutes to where the hitchens place

00:03:24,300 --> 00:03:28,080
burned down at 53 can't miss it take a

00:03:26,520 --> 00:03:32,060
right there it's going to be your

00:03:28,080 --> 00:03:35,340
seventh left after the white farmhouse

00:03:32,060 --> 00:03:37,620
classic Vermont directions you can't get

00:03:35,340 --> 00:03:40,860
there from here but eventually you do

00:03:37,620 --> 00:03:41,850
when you figure it out so you suffer a

00:03:40,860 --> 00:03:44,459
little you had a little bit of adventure

00:03:41,850 --> 00:03:46,680
in my home you learned a viable route

00:03:44,459 --> 00:03:49,230
between point A to point B and you saw

00:03:46,680 --> 00:03:50,820
some pretty pretty leaves oh and you got

00:03:49,230 --> 00:03:53,690
to taste the milk you got there before

00:03:50,820 --> 00:03:55,920
they closed that's good enough right

00:03:53,690 --> 00:03:58,290
probably that's good you're just used to

00:03:55,920 --> 00:04:00,450
visitor your tourist please comp give us

00:03:58,290 --> 00:04:01,890
your money but what if you lived in

00:04:00,450 --> 00:04:04,860
Putney and you had to go to Brookline

00:04:01,890 --> 00:04:07,110
every single day for work is there a

00:04:04,860 --> 00:04:08,580
quantitatively or qualitatively better

00:04:07,110 --> 00:04:10,950
route to take between

00:04:08,580 --> 00:04:14,400
two points obviously cuz I'm asking the

00:04:10,950 --> 00:04:16,680
question there is this road right here

00:04:14,400 --> 00:04:18,000
this is Putney mountain road and it's

00:04:16,680 --> 00:04:19,680
only called Putney mountain road by

00:04:18,000 --> 00:04:22,019
people who know that it exists because

00:04:19,680 --> 00:04:23,730
there's no signs it got it to name a few

00:04:22,019 --> 00:04:25,230
years ago because they brought 911 into

00:04:23,730 --> 00:04:28,950
the state and everybody has to have a

00:04:25,230 --> 00:04:30,240
name every Road has to have a name but

00:04:28,950 --> 00:04:31,950
you're not going to find on maps I

00:04:30,240 --> 00:04:35,700
guarantee you google maps isn't going to

00:04:31,950 --> 00:04:36,810
find it iOS map certainly on it's only

00:04:35,700 --> 00:04:37,830
opened about eight months of the year

00:04:36,810 --> 00:04:40,080
the rest of the year it's not even

00:04:37,830 --> 00:04:42,000
plowed it's snowy or muddy if you got

00:04:40,080 --> 00:04:45,420
four-wheel drive go for it but whatever

00:04:42,000 --> 00:04:46,710
but but it's going to shave 20 minutes

00:04:45,420 --> 00:04:49,100
off every time you go from brookline to

00:04:46,710 --> 00:04:55,800
Putney or vice versa it's a classic

00:04:49,100 --> 00:04:57,960
country shortcut we write code we get

00:04:55,800 --> 00:04:59,480
the test working and according to Sarah

00:04:57,960 --> 00:05:02,510
we go back and we write some more tests

00:04:59,480 --> 00:05:05,100
what eventually comes time to refactor

00:05:02,510 --> 00:05:06,630
or maybe we're just staring at a mudball

00:05:05,100 --> 00:05:08,760
of code and every time we touch it

00:05:06,630 --> 00:05:11,730
little pieces fall off and exceptions

00:05:08,760 --> 00:05:12,690
get thrown and bosses get involved we

00:05:11,730 --> 00:05:14,940
need to figure out how to make the

00:05:12,690 --> 00:05:16,770
voyage from A to B from initialization

00:05:14,940 --> 00:05:18,870
to final output better we're trying to

00:05:16,770 --> 00:05:21,570
refactor we're trying to fix it we want

00:05:18,870 --> 00:05:23,460
to get better if it's a car trip this is

00:05:21,570 --> 00:05:25,169
really really easy right once we get

00:05:23,460 --> 00:05:26,310
where we're going now we know we asked

00:05:25,169 --> 00:05:28,050
some locals we've got some reference

00:05:26,310 --> 00:05:31,320
points we know we can't go up West River

00:05:28,050 --> 00:05:34,380
Road how do I know when my code is good

00:05:31,320 --> 00:05:35,430
enough though where's the guy then maybe

00:05:34,380 --> 00:05:37,830
I have a new client and give me an

00:05:35,430 --> 00:05:39,060
80,000 line legacy rails app that has 18

00:05:37,830 --> 00:05:40,830
other developers who've worked on in

00:05:39,060 --> 00:05:45,750
quitting frustration it's mine now

00:05:40,830 --> 00:05:48,360
where's my map code metrics can really

00:05:45,750 --> 00:05:50,960
help with this problem they act as

00:05:48,360 --> 00:05:54,780
compass gps local guide

00:05:50,960 --> 00:05:56,000
location-specific survival kit they're

00:05:54,780 --> 00:05:58,410
not going to get you to your destination

00:05:56,000 --> 00:06:00,600
they are going to help turn this voyage

00:05:58,410 --> 00:06:03,740
through uncharted regions into just a

00:06:00,600 --> 00:06:05,640
random trip across the ridge for milk

00:06:03,740 --> 00:06:08,010
when I was actually first thinking about

00:06:05,640 --> 00:06:08,820
this talk I pitch it to a co-worker and

00:06:08,010 --> 00:06:10,380
he said that you know it sounds really

00:06:08,820 --> 00:06:12,030
good but you're you're just you're

00:06:10,380 --> 00:06:13,710
selling vegetables you know you're

00:06:12,030 --> 00:06:16,229
telling people to eat their vitamins be

00:06:13,710 --> 00:06:19,110
better and you know you should eat your

00:06:16,229 --> 00:06:22,009
vitamins I'm the vegimals latarian so I

00:06:19,110 --> 00:06:25,479
kind of like about vegetables

00:06:22,009 --> 00:06:27,619
but that's not the point of code metrics

00:06:25,479 --> 00:06:28,969
you all know that you should eat

00:06:27,619 --> 00:06:31,219
vegetables you know you can do better

00:06:28,969 --> 00:06:33,080
code and you probably know something

00:06:31,219 --> 00:06:34,460
about some code metrics tools maybe you

00:06:33,080 --> 00:06:37,159
actually got metric food working some

00:06:34,460 --> 00:06:41,749
time actually assuming you ever use

00:06:37,159 --> 00:06:44,330
magic food did you get it working ok I

00:06:41,749 --> 00:06:47,990
want to talk to you later can't get it

00:06:44,330 --> 00:06:50,569
to work something you got that working

00:06:47,990 --> 00:06:53,779
or maybe use code climate from Brian elm

00:06:50,569 --> 00:06:55,999
camp yes great tool and you got some set

00:06:53,779 --> 00:07:01,069
of metrics cool running and then you're

00:06:55,999 --> 00:07:03,580
going to experience this which you know

00:07:01,069 --> 00:07:07,279
it's pretty classic five stages of

00:07:03,580 --> 00:07:10,009
mourning loss though but really probably

00:07:07,279 --> 00:07:12,349
you experienced it in this way you get

00:07:10,009 --> 00:07:15,139
sad my code sucks I'm getting an F

00:07:12,349 --> 00:07:17,240
somewhere so you decide to fix it you

00:07:15,139 --> 00:07:18,620
bargained with it and he'll get angry

00:07:17,240 --> 00:07:23,209
because somebody on your team wrote some

00:07:18,620 --> 00:07:25,689
bad shitty code and then ok someone on

00:07:23,209 --> 00:07:27,889
my team wrote bad code that's okay

00:07:25,689 --> 00:07:35,059
nobody's perfect especially not my shady

00:07:27,889 --> 00:07:37,879
co-workers big love so you commit a fix

00:07:35,059 --> 00:07:40,339
and you never look at code metrics again

00:07:37,879 --> 00:07:42,499
ever and the reason you don't is because

00:07:40,339 --> 00:07:44,870
you've been told that you're bad this

00:07:42,499 --> 00:07:46,370
cold unfeeling program this robot came

00:07:44,870 --> 00:07:48,529
out of nowhere and just pissed all over

00:07:46,370 --> 00:07:51,649
you and your team and what you do say

00:07:48,529 --> 00:07:53,509
you're bad it so why should you actually

00:07:51,649 --> 00:07:58,069
go out and seek out this harsh judge

00:07:53,509 --> 00:07:59,749
judgment you've probably heard the quote

00:07:58,069 --> 00:08:01,519
that programs are meant to be read by

00:07:59,749 --> 00:08:04,039
humans and are only incidentally for

00:08:01,519 --> 00:08:07,249
computers to execute we're writing code

00:08:04,039 --> 00:08:09,019
to communicate logic intent work that

00:08:07,249 --> 00:08:11,149
needs to be done and these tools don't

00:08:09,019 --> 00:08:13,039
have hearts or feelings they don't

00:08:11,149 --> 00:08:16,279
really think that you look funnier smell

00:08:13,039 --> 00:08:17,479
bad or anyways shape or form there this

00:08:16,279 --> 00:08:19,610
there to tell us something about our

00:08:17,479 --> 00:08:21,050
code they're trying to tell us that we

00:08:19,610 --> 00:08:23,360
may not be communicating to our team

00:08:21,050 --> 00:08:26,599
members or the future developers exactly

00:08:23,360 --> 00:08:29,539
what we think we're communicating who is

00:08:26,599 --> 00:08:31,909
wise point you guide a lot of people

00:08:29,539 --> 00:08:32,990
just a few people okay sorry by the way

00:08:31,909 --> 00:08:34,729
this interactive I asked a lot of

00:08:32,990 --> 00:08:36,800
questions

00:08:34,729 --> 00:08:38,029
um one of the things that I said that

00:08:36,800 --> 00:08:40,969
really sad to me when I first read it

00:08:38,029 --> 00:08:44,000
was that a block of Ruby code could be

00:08:40,969 --> 00:08:45,260
read aloud and people are able to

00:08:44,000 --> 00:08:46,519
understand it Ruby's very literate

00:08:45,260 --> 00:08:52,510
language in a lot of ways very

00:08:46,519 --> 00:08:54,380
expressive does anyone want to volunteer

00:08:52,510 --> 00:08:59,089
I'll give you the Mike right now you

00:08:54,380 --> 00:09:00,199
come up here no okay this isn't the

00:08:59,089 --> 00:09:02,660
worst code that I could actually find

00:09:00,199 --> 00:09:06,019
one of the apps i work on right now but

00:09:02,660 --> 00:09:08,420
it's pretty bad I actually last night

00:09:06,019 --> 00:09:10,519
tried reading this out loud I don't know

00:09:08,420 --> 00:09:12,740
what it does I mean I can figure it out

00:09:10,519 --> 00:09:14,990
you know I'm not I'm not dumb but read

00:09:12,740 --> 00:09:17,089
aloud it doesn't say anything you can't

00:09:14,990 --> 00:09:20,029
just look at this and gather what its

00:09:17,089 --> 00:09:23,630
intent is what it's trying to do there's

00:09:20,029 --> 00:09:24,860
three four three four different levels

00:09:23,630 --> 00:09:26,410
of abstraction going on here that be

00:09:24,860 --> 00:09:28,250
kept in someone's mind at the same time

00:09:26,410 --> 00:09:36,139
and you know who wrote this piece of

00:09:28,250 --> 00:09:37,519
crap yeah obviously code metrics aren't

00:09:36,139 --> 00:09:39,860
about eating vegetables and a not about

00:09:37,519 --> 00:09:41,750
forcing us to do something right they

00:09:39,860 --> 00:09:43,370
scold us a little bit of course when we

00:09:41,750 --> 00:09:45,410
stray from their particular vision of

00:09:43,370 --> 00:09:47,839
good but they also serve to change our

00:09:45,410 --> 00:09:49,610
context for looking at our code this is

00:09:47,839 --> 00:09:52,040
a card from the oblique strategies deck

00:09:49,610 --> 00:09:54,560
which was a deck of cards made by Brian

00:09:52,040 --> 00:09:56,110
Eno and Peter Schmidt in the 70s they

00:09:54,560 --> 00:09:59,180
were just hanging out in the studio

00:09:56,110 --> 00:10:00,980
ninos playing some music and Schmidt's

00:09:59,180 --> 00:10:05,510
painting he's a painter and they would

00:10:00,980 --> 00:10:06,980
you didn't 70s and they brought down

00:10:05,510 --> 00:10:10,550
these low cards idea is to shake up

00:10:06,980 --> 00:10:12,670
their creative process this is one some

00:10:10,550 --> 00:10:15,440
other ones are used an old idea

00:10:12,670 --> 00:10:20,750
emphasize the flaws what would your

00:10:15,440 --> 00:10:23,720
closest friend object to code metrics

00:10:20,750 --> 00:10:24,860
serve the same role often times because

00:10:23,720 --> 00:10:26,329
they can change our context that when we

00:10:24,860 --> 00:10:28,550
look at our code and they can jump-start

00:10:26,329 --> 00:10:30,470
these creative approaches and start

00:10:28,550 --> 00:10:33,350
conversations on our teams and with our

00:10:30,470 --> 00:10:35,029
peers about what is good code starts

00:10:33,350 --> 00:10:37,220
conversations with our self am I good

00:10:35,029 --> 00:10:40,610
enough how can I get better what's the

00:10:37,220 --> 00:10:43,399
road to that but how do you actually use

00:10:40,610 --> 00:10:46,720
these tools how can they improve your

00:10:43,399 --> 00:10:50,140
process through a TDD process um

00:10:46,720 --> 00:10:53,720
everybody tests first

00:10:50,140 --> 00:10:56,330
yeah always right yeah totally so you

00:10:53,720 --> 00:10:58,400
write tell you write code then tests few

00:10:56,330 --> 00:11:01,100
people may be okay stable to have a

00:10:58,400 --> 00:11:06,770
hundred percent test coverage I always

00:11:01,100 --> 00:11:11,270
want to know nobody had nobody who has

00:11:06,770 --> 00:11:14,540
110% code coverage on something how

00:11:11,270 --> 00:11:19,580
about 80% okay who knows what their code

00:11:14,540 --> 00:11:20,870
coverage is okay awesome you all are on

00:11:19,580 --> 00:11:25,100
the first step because you're all using

00:11:20,870 --> 00:11:26,810
a coded metric given our obsession with

00:11:25,100 --> 00:11:28,250
testing test coverage is usually one of

00:11:26,810 --> 00:11:29,930
the things that we kinda know about so

00:11:28,250 --> 00:11:30,890
on the first go to metrics that we we

00:11:29,930 --> 00:11:32,960
talked about we don't even think about

00:11:30,890 --> 00:11:34,550
it as a code metric as a way of looking

00:11:32,960 --> 00:11:36,410
at what our code does and how it exists

00:11:34,550 --> 00:11:38,510
it's using one of the first things that

00:11:36,410 --> 00:11:41,060
you run when you get a new piece of code

00:11:38,510 --> 00:11:42,230
that you have to work with now there's

00:11:41,060 --> 00:11:46,190
three ways that we calculate code

00:11:42,230 --> 00:11:47,750
coverage c0 c1 and c2 and for the most

00:11:46,190 --> 00:11:50,960
part in the Ruby world we focus on the

00:11:47,750 --> 00:11:52,760
source 1c0 if you run our code or simple

00:11:50,960 --> 00:11:53,990
cuff this is the number that this is how

00:11:52,760 --> 00:11:57,590
it's the technique that's using to

00:11:53,990 --> 00:11:58,790
generate it's a numbers one hundred

00:11:57,590 --> 00:12:00,560
percent coverage doesn't mean anything

00:11:58,790 --> 00:12:03,380
as I'm sure you know it's entirely

00:12:00,560 --> 00:12:04,100
possible to write tests that will get

00:12:03,380 --> 00:12:06,080
you to a hundred percent coverage

00:12:04,100 --> 00:12:07,520
without writing a single assertion right

00:12:06,080 --> 00:12:10,600
it's just about lines of code they're

00:12:07,520 --> 00:12:13,190
actually executed doesn't mean a thing

00:12:10,600 --> 00:12:16,490
at this point I think I'm obligated to

00:12:13,190 --> 00:12:19,400
say what's the right number I don't know

00:12:16,490 --> 00:12:21,020
and I don't really care what's the right

00:12:19,400 --> 00:12:23,060
number is what's right for you and your

00:12:21,020 --> 00:12:24,830
team and that's the truth for all of

00:12:23,060 --> 00:12:27,260
these metrics when it comes to code

00:12:24,830 --> 00:12:28,970
coverage dhh calls it security theater

00:12:27,260 --> 00:12:31,580
uncle bob says of course you're going to

00:12:28,970 --> 00:12:33,080
get 100 if you're doing TDD right but

00:12:31,580 --> 00:12:35,360
it's really up to you and your team to

00:12:33,080 --> 00:12:37,190
figure out what TDD water excuse me what

00:12:35,360 --> 00:12:38,930
your your coverage metrics are going to

00:12:37,190 --> 00:12:40,880
be same way with all these other code

00:12:38,930 --> 00:12:44,870
metrics maybe you like complex code

00:12:40,880 --> 00:12:47,060
maybe you don't it's just that code

00:12:44,870 --> 00:12:50,780
coverage test coverage numbers are just

00:12:47,060 --> 00:12:51,920
too easy to lines of code is

00:12:50,780 --> 00:12:55,250
another thing that's just too easy to

00:12:51,920 --> 00:12:56,960
fake lines of code used to be used to

00:12:55,250 --> 00:13:01,790
measure developer productivity in the

00:12:56,960 --> 00:13:04,250
dark dark days of 2012

00:13:01,790 --> 00:13:05,990
it's just a simple simple accounting of

00:13:04,250 --> 00:13:10,010
the number of lines executable code

00:13:05,990 --> 00:13:11,810
within a code base there is a rough

00:13:10,010 --> 00:13:13,490
correlation between the number of lines

00:13:11,810 --> 00:13:15,350
of code in an application and the rate

00:13:13,490 --> 00:13:16,580
of defects obviously the larger the

00:13:15,350 --> 00:13:19,790
application more chance there are four

00:13:16,580 --> 00:13:21,830
defects but really if you're ever in a

00:13:19,790 --> 00:13:23,810
place that's using lines of codes as a

00:13:21,830 --> 00:13:25,340
metric but you have to change the needle

00:13:23,810 --> 00:13:28,370
you have to move the needle on you

00:13:25,340 --> 00:13:33,130
should run update Lincoln Lincoln don't

00:13:28,370 --> 00:13:33,130
worry about what your co-workers think a

00:13:33,160 --> 00:13:39,920
lot of people run rig stats from time to

00:13:35,420 --> 00:13:44,120
time this is actually pretty a pretty

00:13:39,920 --> 00:13:46,430
opinionated stats tool it doesn't show

00:13:44,120 --> 00:13:47,480
you anything about your views sister you

00:13:46,430 --> 00:13:51,140
anything about the javascript in your

00:13:47,480 --> 00:13:54,350
application it's so high level it's it's

00:13:51,140 --> 00:13:55,610
almost point less in a way it is when

00:13:54,350 --> 00:13:58,160
the first commands of the I run when i

00:13:55,610 --> 00:13:59,900
get to a new application just because it

00:13:58,160 --> 00:14:01,790
gives me such a high level of you is

00:13:59,900 --> 00:14:07,420
this a service app is it nice and slim

00:14:01,790 --> 00:14:07,420
and tie it on controllers what's that oh

00:14:11,260 --> 00:14:18,440
don't worry I'll get to that good I

00:14:15,590 --> 00:14:19,850
though this is the kind of metric that I

00:14:18,440 --> 00:14:24,260
like to run right so it's kind of like I

00:14:19,850 --> 00:14:25,670
like into got a crap filled garage that

00:14:24,260 --> 00:14:26,450
got to clean up and you kind of go in

00:14:25,670 --> 00:14:29,720
the mill and you look around you like

00:14:26,450 --> 00:14:31,790
okay I'm gonna need some boxes and a mop

00:14:29,720 --> 00:14:34,880
and I think it was a cat in here at some

00:14:31,790 --> 00:14:36,110
point so we need some gloves it just

00:14:34,880 --> 00:14:39,350
kind of gives you sort of a general sort

00:14:36,110 --> 00:14:45,410
of sense of where things are by itself

00:14:39,350 --> 00:14:47,510
though doesn't really tell us a lot code

00:14:45,410 --> 00:14:48,980
coverage and lines of code though in

00:14:47,510 --> 00:14:51,700
demonstrate the two different kinds of

00:14:48,980 --> 00:14:53,780
code metrics that year we encounter

00:14:51,700 --> 00:14:55,820
calculating lines of code is a static

00:14:53,780 --> 00:14:57,910
analysis process and it's perform

00:14:55,820 --> 00:15:01,100
without evaluating in the code at all

00:14:57,910 --> 00:15:02,510
dynamic analysis obviously is the

00:15:01,100 --> 00:15:04,370
opposite of that actually runs the code

00:15:02,510 --> 00:15:06,620
and watches its performance the work

00:15:04,370 --> 00:15:07,910
bench marks its time or some

00:15:06,620 --> 00:15:11,600
characteristic about its behavior is

00:15:07,910 --> 00:15:13,400
tracked there are far more static

00:15:11,600 --> 00:15:14,540
analysis tools available to us in the

00:15:13,400 --> 00:15:16,910
Ruby world

00:15:14,540 --> 00:15:19,220
but stack analysis tools never really

00:15:16,910 --> 00:15:21,770
understand the code they're really in a

00:15:19,220 --> 00:15:23,750
way very complicated reg axes that sort

00:15:21,770 --> 00:15:27,050
of look for patterns in the shape of the

00:15:23,750 --> 00:15:31,810
code and then they just sort of spit a

00:15:27,050 --> 00:15:31,810
number or rating or chart or grade

00:15:33,700 --> 00:15:38,780
aesthetic tools might though indicate

00:15:36,370 --> 00:15:42,170
problematic code and that word might is

00:15:38,780 --> 00:15:43,520
really really important static analysis

00:15:42,170 --> 00:15:45,230
will usually return a fair number of

00:15:43,520 --> 00:15:47,540
false positives unfortunately because it

00:15:45,230 --> 00:15:48,770
is just a reg headaches there might be a

00:15:47,540 --> 00:15:50,240
really good reason for there to be empty

00:15:48,770 --> 00:15:52,600
rescue blocks that just capture all of

00:15:50,240 --> 00:15:55,460
all the exceptions and shove them down

00:15:52,600 --> 00:15:57,380
there might really really need to be

00:15:55,460 --> 00:15:59,420
complicated meta programming blocks

00:15:57,380 --> 00:16:02,180
somewhere sometimes code just has to be

00:15:59,420 --> 00:16:03,740
duplicated it's up to you sir you the

00:16:02,180 --> 00:16:07,220
developer of the human to figure out

00:16:03,740 --> 00:16:08,150
what these numbers mean to you if you're

00:16:07,220 --> 00:16:10,070
ever in a position where you're trying

00:16:08,150 --> 00:16:13,270
to code the aim of passing some avatar

00:16:10,070 --> 00:16:16,430
bit arbitrary threshold in the code

00:16:13,270 --> 00:16:17,870
you're kind of wasting your time these

00:16:16,430 --> 00:16:21,520
are just helpers to find possibly

00:16:17,870 --> 00:16:23,950
probable addict code in your code base

00:16:21,520 --> 00:16:26,120
metric I use most these days though is

00:16:23,950 --> 00:16:30,110
complexity I work on a lot of legacy

00:16:26,120 --> 00:16:31,640
rails apps and roughly speaking this is

00:16:30,110 --> 00:16:32,720
a decent measurement of how painful is

00:16:31,640 --> 00:16:35,270
going to be to understand a piece of

00:16:32,720 --> 00:16:37,580
code there are three basic forms of

00:16:35,270 --> 00:16:40,600
complexity your cyclomatic complexity

00:16:37,580 --> 00:16:43,900
which was proposed by Thomas McCabe and

00:16:40,600 --> 00:16:53,270
it's the counts at the number of loon

00:16:43,900 --> 00:16:55,490
linear linearly independent pass

00:16:53,270 --> 00:16:56,720
through the source code I knew I

00:16:55,490 --> 00:16:59,180
couldn't land that I could not stick

00:16:56,720 --> 00:17:00,860
that word methods when were paths

00:16:59,180 --> 00:17:02,000
through it are harder to understand

00:17:00,860 --> 00:17:03,230
they're simply more states that it could

00:17:02,000 --> 00:17:06,320
exist in that you have to pay attention

00:17:03,230 --> 00:17:07,790
to the number of linear passed through

00:17:06,320 --> 00:17:09,140
the code though however is going to

00:17:07,790 --> 00:17:10,700
track really closely to the number of

00:17:09,140 --> 00:17:12,920
unit tests you probably should be

00:17:10,700 --> 00:17:15,050
developing because each new linear

00:17:12,920 --> 00:17:18,340
branch is an inflection point or a

00:17:15,050 --> 00:17:21,010
functional point within your operation

00:17:18,340 --> 00:17:22,390
well that's one kind

00:17:21,010 --> 00:17:25,000
kind of assignments branches and

00:17:22,390 --> 00:17:27,339
conditions or ABC complexity assignments

00:17:25,000 --> 00:17:30,120
foo equals bar branches function calls

00:17:27,339 --> 00:17:33,090
class method class class methods

00:17:30,120 --> 00:17:35,200
conditionals or logical xand booleans

00:17:33,090 --> 00:17:37,090
fog is the one that most of us use

00:17:35,200 --> 00:17:38,710
though it's the highest-profile

00:17:37,090 --> 00:17:41,530
certainly within the Ruby world it's a

00:17:38,710 --> 00:17:42,940
very opinionated ABC complexity score it

00:17:41,530 --> 00:17:44,560
counts the number of Simon's branches

00:17:42,940 --> 00:17:46,480
and conditionals and it penalizes you

00:17:44,560 --> 00:17:50,380
from meta programming using complex

00:17:46,480 --> 00:17:53,350
things like eval good flogged scores

00:17:50,380 --> 00:17:54,760
tend to be around 10 for meth for models

00:17:53,350 --> 00:17:56,920
24 controllers that's the general

00:17:54,760 --> 00:17:58,600
guideline i spoke to ryan davis and

00:17:56,920 --> 00:18:01,330
that's pretty much his hard and fast

00:17:58,600 --> 00:18:03,850
opinion if you ever run flogged and you

00:18:01,330 --> 00:18:06,970
get a complexity score about 60 you

00:18:03,850 --> 00:18:09,310
really want to fix that right away fun

00:18:06,970 --> 00:18:11,140
fact though the highest for those of you

00:18:09,310 --> 00:18:12,940
whose could use code climate the highest

00:18:11,140 --> 00:18:18,850
flogged score ever recorded on code

00:18:12,940 --> 00:18:22,380
climate 11350 for yeah I didn't write

00:18:18,850 --> 00:18:24,580
that one I wasn't that one wasn't me

00:18:22,380 --> 00:18:27,010
like most codes could smell so high

00:18:24,580 --> 00:18:29,710
complexity is a pointer to a deeper

00:18:27,010 --> 00:18:31,150
problem in the code now it might just

00:18:29,710 --> 00:18:32,860
mean that you need to like break out the

00:18:31,150 --> 00:18:35,560
extract method pattern and just like

00:18:32,860 --> 00:18:37,000
mash it into place but sometimes it

00:18:35,560 --> 00:18:39,160
means that you're going to have to

00:18:37,000 --> 00:18:40,660
rethink your domain model maybe the

00:18:39,160 --> 00:18:42,580
original developers didn't really

00:18:40,660 --> 00:18:44,020
understand the problems faced and we

00:18:42,580 --> 00:18:47,800
have 2 r.d compose this object and

00:18:44,020 --> 00:18:54,220
restructure things a lot sometimes it

00:18:47,800 --> 00:18:56,440
depends frak so if we have to back up to

00:18:54,220 --> 00:18:58,480
a higher level for a minute churn is

00:18:56,440 --> 00:18:59,830
absolutely fabulous and what it is it

00:18:58,480 --> 00:19:01,630
just looks the number of time let's see

00:18:59,830 --> 00:19:04,360
your version control system and it says

00:19:01,630 --> 00:19:08,830
this file for given time period is can

00:19:04,360 --> 00:19:10,540
change this many times understanding

00:19:08,830 --> 00:19:12,520
where you're most volatile code lives is

00:19:10,540 --> 00:19:15,070
an amazingly useful thing it helps you

00:19:12,520 --> 00:19:18,040
identify brittle code business critical

00:19:15,070 --> 00:19:20,920
areas and the so-called God objects

00:19:18,040 --> 00:19:22,510
kitchen sink dumping grounds and again

00:19:20,920 --> 00:19:24,130
where you don't understand a problem

00:19:22,510 --> 00:19:26,260
where you're constantly having to come

00:19:24,130 --> 00:19:29,200
back and change and change and change it

00:19:26,260 --> 00:19:31,000
to refine your understanding here's the

00:19:29,200 --> 00:19:33,180
turn values for para files in one of my

00:19:31,000 --> 00:19:33,180
apps

00:19:33,620 --> 00:19:41,000
huh pretty much they're the same value

00:19:41,090 --> 00:19:44,549
only by comparing them to the rest of

00:19:43,290 --> 00:19:45,600
the application can I really understand

00:19:44,549 --> 00:19:51,510
whether these are these your high

00:19:45,600 --> 00:19:54,480
velocity or low velocity files this is a

00:19:51,510 --> 00:19:56,580
little ant trail anyone hiking

00:19:54,480 --> 00:20:00,299
wunderland trail at all thank you you

00:19:56,580 --> 00:20:01,559
were both of you three four cool I

00:20:00,299 --> 00:20:04,500
really want to hear about your trip

00:20:01,559 --> 00:20:06,090
sometime I'm not in the best hiking

00:20:04,500 --> 00:20:08,340
shape anymore I used to be a used to be

00:20:06,090 --> 00:20:10,770
long distance hiker but someday I would

00:20:08,340 --> 00:20:12,660
really want to hike the the Wonderland I

00:20:10,770 --> 00:20:15,299
runs around the base of Mount Rainier

00:20:12,660 --> 00:20:18,380
and the halfway point is it's about 40

00:20:15,299 --> 00:20:21,600
7.2 miles from arrow to arrow there and

00:20:18,380 --> 00:20:23,790
I can do 10 miles a day and it's walk

00:20:21,600 --> 00:20:26,520
two miles an hour it's five hours of

00:20:23,790 --> 00:20:28,080
walking that way then you put up a tent

00:20:26,520 --> 00:20:29,370
and you do it the next day you do that

00:20:28,080 --> 00:20:34,100
five days in your back at a parking lot

00:20:29,370 --> 00:20:34,100
it's pretty simple right it's not so bad

00:20:34,880 --> 00:20:39,870
if you haven't seen it before this is an

00:20:36,990 --> 00:20:42,270
elevation graph the peak there at the

00:20:39,870 --> 00:20:44,580
very very tip-top is 6,000 feet the

00:20:42,270 --> 00:20:47,880
lowest trough is just a smidge or under

00:20:44,580 --> 00:20:49,169
2500 feet I don't want to walk up and

00:20:47,880 --> 00:20:51,690
down that my knees hurt just thinking

00:20:49,169 --> 00:20:55,020
about schlepping a 15 pound pack up and

00:20:51,690 --> 00:20:58,799
down volcanic Ridge is all day for five

00:20:55,020 --> 00:21:01,950
days just like the Roger number the rod

00:20:58,799 --> 00:21:03,179
number of miles here is misleading what

00:21:01,950 --> 00:21:04,320
happens if we take another stab at

00:21:03,179 --> 00:21:09,360
looking at those cheering numbers though

00:21:04,320 --> 00:21:11,010
with adding the dimension of time user

00:21:09,360 --> 00:21:14,490
models changed a lot it's the one in

00:21:11,010 --> 00:21:15,870
green I see three distinct areas two big

00:21:14,490 --> 00:21:17,970
ones in a couple little tiny ones where

00:21:15,870 --> 00:21:19,590
it's been changed those are probably

00:21:17,970 --> 00:21:22,919
somebody working on a new feature or

00:21:19,590 --> 00:21:27,360
doing a major refactor of the code the

00:21:22,919 --> 00:21:28,679
invoice model in blue that's a mess that

00:21:27,360 --> 00:21:32,160
thing is changing every two or three

00:21:28,679 --> 00:21:34,140
days it's not CSS it's not a config file

00:21:32,160 --> 00:21:36,299
it's not a gem file it's not you know

00:21:34,140 --> 00:21:38,419
translation file what the hell is going

00:21:36,299 --> 00:21:40,679
on with this file we have to find out

00:21:38,419 --> 00:21:44,309
because sometimes a churning file is

00:21:40,679 --> 00:21:46,480
just one of these configs but the amount

00:21:44,309 --> 00:21:48,960
of frequency that the

00:21:46,480 --> 00:21:51,370
carette really should give us pause

00:21:48,960 --> 00:21:53,110
sometimes these complex files are just

00:21:51,370 --> 00:21:54,400
junk drawers the emeka messes that we

00:21:53,110 --> 00:21:57,790
have to shove things down into and

00:21:54,400 --> 00:21:59,140
sometimes their problems by itself churn

00:21:57,790 --> 00:22:01,150
isn't going to tell you too much is

00:21:59,140 --> 00:22:05,020
it'll give you the tempo of a project

00:22:01,150 --> 00:22:07,270
but it's going to reveal some possible

00:22:05,020 --> 00:22:08,890
problem areas once we start mixing in

00:22:07,270 --> 00:22:13,960
other metrics though that's where it

00:22:08,890 --> 00:22:15,730
starts to really really shine this is

00:22:13,960 --> 00:22:18,130
the output of a gem called turbulence by

00:22:15,730 --> 00:22:22,299
Chad Fowler and it's based a few other

00:22:18,130 --> 00:22:23,740
people Corey guy it's based on a blog

00:22:22,299 --> 00:22:25,570
post by Michael feathers where he

00:22:23,740 --> 00:22:27,640
proposed mixing starting to mix together

00:22:25,570 --> 00:22:29,500
code metrics to give us better

00:22:27,640 --> 00:22:32,679
understanding and this is graphing

00:22:29,500 --> 00:22:34,059
complexity versus churn rate piece of

00:22:32,679 --> 00:22:35,710
code having a high complexity implies a

00:22:34,059 --> 00:22:38,290
high rate of errors because every time

00:22:35,710 --> 00:22:40,419
somebody comes into it they're likely to

00:22:38,290 --> 00:22:41,980
break something so the more often that

00:22:40,419 --> 00:22:44,230
you come in and touch something that has

00:22:41,980 --> 00:22:45,940
high complexity the greater and greater

00:22:44,230 --> 00:22:49,960
risk you're going to have for these bugs

00:22:45,940 --> 00:22:51,520
because we're lazy it's much easier just

00:22:49,960 --> 00:22:54,460
tack on another else if instead of act

00:22:51,520 --> 00:22:58,630
going in and refactoring so we run this

00:22:54,460 --> 00:23:01,540
for a project and sweet baby Jesus okay

00:22:58,630 --> 00:23:02,890
this is a crazy pants file I actually I

00:23:01,540 --> 00:23:04,870
ran turbulence and this is what it spit

00:23:02,890 --> 00:23:06,220
out I said oh man there's this huge

00:23:04,870 --> 00:23:08,260
outlier when what's up with that it

00:23:06,220 --> 00:23:10,419
looked into it its complexity is over

00:23:08,260 --> 00:23:15,490
1,600 and it's churn rate is about a

00:23:10,419 --> 00:23:17,559
thousand for the last year it's it's

00:23:15,490 --> 00:23:22,120
clearly a candidate for for some kind of

00:23:17,559 --> 00:23:26,250
love and attention I'm sorry it's

00:23:22,120 --> 00:23:26,250
actually a model file believe it or not

00:23:26,820 --> 00:23:30,730
yeah i mean like obviously like somebody

00:23:29,559 --> 00:23:34,059
had note the hell they were doing when

00:23:30,730 --> 00:23:35,500
they wrote this so i really like this

00:23:34,059 --> 00:23:37,150
tool a lot and it gives you a really

00:23:35,500 --> 00:23:39,070
really good snapshot but you know this

00:23:37,150 --> 00:23:40,780
outlier was almost too easy to mix miss

00:23:39,070 --> 00:23:44,049
so i usually like to pipe it it's at

00:23:40,780 --> 00:23:45,580
this output into a tree map here the

00:23:44,049 --> 00:23:47,830
size of these square each one of these

00:23:45,580 --> 00:23:50,350
squares is file the size is the relative

00:23:47,830 --> 00:23:53,620
churn rate the color green is good red

00:23:50,350 --> 00:23:56,860
is bad along the spectrum for the amount

00:23:53,620 --> 00:23:58,000
of complexing the file so this really

00:23:56,860 --> 00:23:59,470
this is like an idiot light in our

00:23:58,000 --> 00:24:00,010
dashboard of our cars or driving around

00:23:59,470 --> 00:24:02,200
bed

00:24:00,010 --> 00:24:03,850
likeshe check the oil check engine light

00:24:02,200 --> 00:24:05,820
Wow what's going on here I've got to

00:24:03,850 --> 00:24:14,020
take this thing into the shop though

00:24:05,820 --> 00:24:16,060
this is bad wonder who wrote it so I

00:24:14,020 --> 00:24:17,710
wanted to I probably do you compose

00:24:16,060 --> 00:24:20,170
something so I break out flogged and I I

00:24:17,710 --> 00:24:23,230
run it this is the top part of the

00:24:20,170 --> 00:24:25,330
output it looks like we've got four

00:24:23,230 --> 00:24:28,630
large God objects that are doing a lot

00:24:25,330 --> 00:24:30,640
of stuff it's really interesting vlog

00:24:28,630 --> 00:24:32,470
let's this actually has a show details

00:24:30,640 --> 00:24:33,490
to flag that we could throw in to

00:24:32,470 --> 00:24:37,270
actually see what it's what's a

00:24:33,490 --> 00:24:39,010
complaining about this goes about it

00:24:37,270 --> 00:24:42,480
sort of bins up its different score

00:24:39,010 --> 00:24:45,370
values there's a lot of branching

00:24:42,480 --> 00:24:47,620
assignments are going crazy we're doing

00:24:45,370 --> 00:24:49,510
probably playing some brackets they are

00:24:47,620 --> 00:24:52,020
saying we're playing some array games a

00:24:49,510 --> 00:24:55,120
lot of maps and collects and selects

00:24:52,020 --> 00:24:56,830
ticket and user appearing here I I know

00:24:55,120 --> 00:24:59,830
that ticket user occur in my code base

00:24:56,830 --> 00:25:01,420
as other models so it probably has some

00:24:59,830 --> 00:25:02,770
law of Demeter violations where I'm

00:25:01,420 --> 00:25:05,950
reaching over into these other things

00:25:02,770 --> 00:25:08,020
and pulling them out I can probably fix

00:25:05,950 --> 00:25:12,010
this this particular method with the

00:25:08,020 --> 00:25:16,440
extract method hammer so boom now

00:25:12,010 --> 00:25:16,440
everything is nice and simple right

00:25:17,370 --> 00:25:22,210
except now I've got a lot of duplication

00:25:19,470 --> 00:25:23,800
so I run i run the flayed to align it

00:25:22,210 --> 00:25:25,810
shows me I've got a bun Chee's method

00:25:23,800 --> 00:25:28,900
methods that are repeating similar

00:25:25,810 --> 00:25:30,880
tactics of sending out email again this

00:25:28,900 --> 00:25:34,810
is the the said notification thing so

00:25:30,880 --> 00:25:35,860
obviously a lot of problems there when I

00:25:34,810 --> 00:25:39,340
get done with this that I look at this

00:25:35,860 --> 00:25:41,590
and I I've not taken a file that had a

00:25:39,340 --> 00:25:44,080
dozen and a half methods and now it has

00:25:41,590 --> 00:25:45,760
30 and all of them are now private and

00:25:44,080 --> 00:25:47,590
only work with this one said

00:25:45,760 --> 00:25:51,070
notification so I should probably get

00:25:47,590 --> 00:25:52,360
thrown into its own service model so we

00:25:51,070 --> 00:25:54,280
juggle that stuff around and I've got a

00:25:52,360 --> 00:25:57,300
nice little service object and I do a

00:25:54,280 --> 00:25:59,470
few more rounds of refactoring and

00:25:57,300 --> 00:26:03,160
excuse me subscription is much much

00:25:59,470 --> 00:26:05,680
slimmer now so I hop back to my tree map

00:26:03,160 --> 00:26:09,090
to see how am i doing with the project

00:26:05,680 --> 00:26:11,260
as a whole and now ticket is a problem

00:26:09,090 --> 00:26:13,510
right now that's the next one I have to

00:26:11,260 --> 00:26:15,670
face but I don't have to do that today

00:26:13,510 --> 00:26:20,350
someone else's problem they're on hot

00:26:15,670 --> 00:26:22,840
seat so this is a little bit of a canned

00:26:20,350 --> 00:26:24,400
exercise obviously but I hope it

00:26:22,840 --> 00:26:28,450
demonstrates a little bit of like my

00:26:24,400 --> 00:26:29,680
personal work pattern or see we use

00:26:28,450 --> 00:26:31,780
these tools is received at a high level

00:26:29,680 --> 00:26:33,880
we're the problem spots what do I need

00:26:31,780 --> 00:26:35,200
to focus on next because when you're in

00:26:33,880 --> 00:26:37,180
the middle middle of it when you're in

00:26:35,200 --> 00:26:40,450
the you get numb to the crap that's

00:26:37,180 --> 00:26:42,040
going on around you it's no longer super

00:26:40,450 --> 00:26:43,990
obvious that 100th you have a hundred

00:26:42,040 --> 00:26:45,550
line method use up at the final eight I

00:26:43,990 --> 00:26:48,640
got this story and I've got early how to

00:26:45,550 --> 00:26:51,430
send this other thing okay if its type

00:26:48,640 --> 00:26:52,780
this send this other thing out or well I

00:26:51,430 --> 00:26:54,730
can solve this with some crazy meta

00:26:52,780 --> 00:26:56,290
programming and you do it but you're not

00:26:54,730 --> 00:26:57,430
you're just adding to the problem if you

00:26:56,290 --> 00:27:00,570
don't step back and look at the higher

00:26:57,430 --> 00:27:03,070
level vision of where your code is going

00:27:00,570 --> 00:27:05,410
for myself in my projects again I work

00:27:03,070 --> 00:27:07,240
out a lot of legacy apps so turn and

00:27:05,410 --> 00:27:08,530
complexity of really the go choose these

00:27:07,240 --> 00:27:10,660
are the things that I look at every day

00:27:08,530 --> 00:27:11,740
I think they have a lot of a lot of

00:27:10,660 --> 00:27:13,540
application even for greenfield

00:27:11,740 --> 00:27:15,340
development you can sort of track see

00:27:13,540 --> 00:27:17,050
what's a trajectory of this project

00:27:15,340 --> 00:27:20,290
where are things starting to show up

00:27:17,050 --> 00:27:21,910
where is it starting to go bad sniff the

00:27:20,290 --> 00:27:27,250
milk if you will and see if it's kind of

00:27:21,910 --> 00:27:29,200
a little off the moment you where you

00:27:27,250 --> 00:27:30,340
gather and pay attention to metrics the

00:27:29,200 --> 00:27:33,370
more they're going to speak up and clue

00:27:30,340 --> 00:27:35,860
you in and where these problems are so

00:27:33,370 --> 00:27:39,940
talked about a size code coverage churn

00:27:35,860 --> 00:27:43,420
and complexity there are a few other few

00:27:39,940 --> 00:27:46,990
other tools we can use I mentioned

00:27:43,420 --> 00:27:49,690
briefly and passing the Flay gem it's a

00:27:46,990 --> 00:27:51,250
syntax tree duplication detector it goes

00:27:49,690 --> 00:27:53,290
through and it analyzes the syntax tree

00:27:51,250 --> 00:27:56,050
of your co your code and using some

00:27:53,290 --> 00:27:58,870
fuzzy matching it identify blocks that

00:27:56,050 --> 00:28:00,730
are extremely syntactically similar so

00:27:58,870 --> 00:28:02,230
maybe you can kind of compress those

00:28:00,730 --> 00:28:05,050
down you could dry up your code a little

00:28:02,230 --> 00:28:08,770
bit of course you don't want to get too

00:28:05,050 --> 00:28:11,220
dry because then you start to chase with

00:28:08,770 --> 00:28:13,630
Flay you get a lot of unfortunate

00:28:11,220 --> 00:28:16,600
unfortunate false positives from you

00:28:13,630 --> 00:28:18,190
have a very restful cruddy rails

00:28:16,600 --> 00:28:19,960
application you're going to get a lot of

00:28:18,190 --> 00:28:21,530
duplication and those controllers for

00:28:19,960 --> 00:28:24,230
example

00:28:21,530 --> 00:28:26,270
it's just a side effect and it's an

00:28:24,230 --> 00:28:30,250
unfortunate thing but you know we can

00:28:26,270 --> 00:28:30,250
make the tools better we have the power

00:28:32,830 --> 00:28:38,780
there's a number of best practices and

00:28:35,240 --> 00:28:43,730
style gems and tools out there some of

00:28:38,780 --> 00:28:46,700
them just look at specific code smells a

00:28:43,730 --> 00:28:48,110
rails best practice in reek do that some

00:28:46,700 --> 00:28:51,850
of them look at our option oriented

00:28:48,110 --> 00:28:53,660
design Rudy and pelusa do pelusa is

00:28:51,850 --> 00:28:55,520
extremely configurable but also

00:28:53,660 --> 00:28:58,640
extremely opinionated out of the box and

00:28:55,520 --> 00:29:01,940
it only runs on Rubinius so some of you

00:28:58,640 --> 00:29:05,690
might have a problem with that cane is a

00:29:01,940 --> 00:29:08,380
really interesting one in that examines

00:29:05,690 --> 00:29:11,450
code style it analyzes for white space

00:29:08,380 --> 00:29:13,940
line length that sort of thing it also

00:29:11,450 --> 00:29:16,400
measures a PC complexity and it looks

00:29:13,940 --> 00:29:19,390
for documentation in your code are you

00:29:16,400 --> 00:29:23,480
actually documenting as you go along I

00:29:19,390 --> 00:29:29,230
take it you don't does anybody here

00:29:23,480 --> 00:29:33,710
actually document as you go okay yeah

00:29:29,230 --> 00:29:35,270
good code darkness itself i guess i Cain

00:29:33,710 --> 00:29:37,940
was really developed at square by Xavier

00:29:35,270 --> 00:29:39,770
Shea and he noticed that his code is

00:29:37,940 --> 00:29:42,620
starting to look crappy so this and it

00:29:39,770 --> 00:29:43,670
runs in there see I build if anything if

00:29:42,620 --> 00:29:45,320
any of the violate is the number of

00:29:43,670 --> 00:29:47,330
violations gets too high it'll actually

00:29:45,320 --> 00:29:49,730
fail out and so you wire into a CI build

00:29:47,330 --> 00:29:51,680
it will fail your build if so many

00:29:49,730 --> 00:29:54,170
checks in some crappy code that's kind

00:29:51,680 --> 00:29:56,060
of cool I use it once or twice a week to

00:29:54,170 --> 00:29:57,290
sort of see because I can't read every

00:29:56,060 --> 00:29:59,780
single code commit the rest of my team

00:29:57,290 --> 00:30:01,940
right so I read it to sort of see like

00:29:59,780 --> 00:30:04,220
are we moving in a good direction do i

00:30:01,940 --> 00:30:05,570
need to pay more attention to to code

00:30:04,220 --> 00:30:07,970
reviews for next couple weeks sort of

00:30:05,570 --> 00:30:13,240
hammer some style information into

00:30:07,970 --> 00:30:15,770
people does that show up at all for you

00:30:13,240 --> 00:30:18,500
you see anything said to blur in the

00:30:15,770 --> 00:30:20,480
middle all right well i'm sorry about

00:30:18,500 --> 00:30:21,710
that this is an object-relational map

00:30:20,480 --> 00:30:24,950
that was generated by a gem called

00:30:21,710 --> 00:30:26,750
railroadee it spits out a dot file that

00:30:24,950 --> 00:30:28,970
i pulled into several different versions

00:30:26,750 --> 00:30:30,760
here what it does is it actually looks

00:30:28,970 --> 00:30:34,750
at the active record relationships and

00:30:30,760 --> 00:30:38,530
draws you a beautiful map of them

00:30:34,750 --> 00:30:39,880
it it's really just a snapshot of how

00:30:38,530 --> 00:30:42,010
your obvious relate to each other and

00:30:39,880 --> 00:30:44,620
what calls what where your entanglements

00:30:42,010 --> 00:30:47,200
are in the case of this particular one

00:30:44,620 --> 00:30:50,800
which you can't see it shows an extreme

00:30:47,200 --> 00:30:53,050
imagine if you will a hell scape of an

00:30:50,800 --> 00:30:56,140
organically grown undesigned rails at

00:30:53,050 --> 00:31:01,200
that's about 130,000 lines and it's been

00:30:56,140 --> 00:31:01,200
going forever pretend that happened

00:31:01,320 --> 00:31:10,210
sorry you just stare at that slur the

00:31:06,220 --> 00:31:12,460
middle yeah either oh wait no no no no

00:31:10,210 --> 00:31:17,530
it's there you just all had too many

00:31:12,460 --> 00:31:20,800
beers that's what's going on I actually

00:31:17,530 --> 00:31:23,080
I use this as a as a guide I um I get

00:31:20,800 --> 00:31:24,520
new developers on my team I'll take a

00:31:23,080 --> 00:31:26,020
map like this and we'll we'll sit down

00:31:24,520 --> 00:31:27,760
for an hour to kind of go over and it's

00:31:26,020 --> 00:31:29,860
how i teach them the system and then

00:31:27,760 --> 00:31:31,390
they have a map to kind of go by in

00:31:29,860 --> 00:31:32,980
their day to day they might not remember

00:31:31,390 --> 00:31:34,780
exactly everything they go but they can

00:31:32,980 --> 00:31:38,470
see oh this thing I'm working on this

00:31:34,780 --> 00:31:40,420
parts model has these this is it schema

00:31:38,470 --> 00:31:41,860
and has this relationship and things it

00:31:40,420 --> 00:31:42,940
can kind of pull back out of the code

00:31:41,860 --> 00:31:44,190
and get a little higher view of where

00:31:42,940 --> 00:31:47,440
that fits into the rest of the picture

00:31:44,190 --> 00:31:49,150
so yeah give it a new developers better

00:31:47,440 --> 00:31:51,640
yet go to Kinko's and print it out and

00:31:49,150 --> 00:31:53,230
put it up on the wall you know look at

00:31:51,640 --> 00:31:54,700
the crap every single day put it up

00:31:53,230 --> 00:31:56,260
there I mean that's why we do combine

00:31:54,700 --> 00:31:58,210
right so we can sort of see here's the

00:31:56,260 --> 00:32:03,090
visual representation of here's our card

00:31:58,210 --> 00:32:05,830
wall and here's our code wall it works

00:32:03,090 --> 00:32:09,670
because honestly you know our code is a

00:32:05,830 --> 00:32:12,580
mess as it as developers all of it is

00:32:09,670 --> 00:32:14,740
it's almost all bad even if your code is

00:32:12,580 --> 00:32:17,410
good today and maybe a little bit

00:32:14,740 --> 00:32:20,070
tomorrow maybe not next week though code

00:32:17,410 --> 00:32:23,980
is prone to rot decay and entropy a

00:32:20,070 --> 00:32:26,890
quick fix I cut and paste there and it

00:32:23,980 --> 00:32:31,240
all adds up it adds up invisibly until

00:32:26,890 --> 00:32:33,340
we're selecting these mud balls maybe

00:32:31,240 --> 00:32:35,380
you want to write good code maybe you're

00:32:33,340 --> 00:32:38,590
as i said in the and you can't see

00:32:35,380 --> 00:32:40,510
it anymore maybe you're just a lone

00:32:38,590 --> 00:32:42,580
developer and you don't have someone to

00:32:40,510 --> 00:32:45,580
pair with who's a senior you don't have

00:32:42,580 --> 00:32:46,310
access to a great strong development

00:32:45,580 --> 00:32:48,020
engineering

00:32:46,310 --> 00:32:50,980
apartment around you to bring you up

00:32:48,020 --> 00:32:53,650
along to metrics can help with this

00:32:50,980 --> 00:32:56,690
every single one of these situations

00:32:53,650 --> 00:32:58,640
metrics for me act as a rumble strip

00:32:56,690 --> 00:33:02,290
along the highway as I'm driving it's

00:32:58,640 --> 00:33:05,660
like Oh wake up I'm drifting off course

00:33:02,290 --> 00:33:09,140
without like you know hitting a wall or

00:33:05,660 --> 00:33:12,110
something we're blessed is rubios with a

00:33:09,140 --> 00:33:14,480
very rich rich ecosystem of these tools

00:33:12,110 --> 00:33:17,540
and it it's incumbent upon us to you to

00:33:14,480 --> 00:33:19,040
leverage them to get them better the

00:33:17,540 --> 00:33:21,110
tools that I mention here today really

00:33:19,040 --> 00:33:23,180
are just like tip of the iceberg and the

00:33:21,110 --> 00:33:25,340
most popular ones figure out which one's

00:33:23,180 --> 00:33:28,490
for you work for you and your team in

00:33:25,340 --> 00:33:30,280
your projects the needs that you have go

00:33:28,490 --> 00:33:32,810
out and get clone climate working

00:33:30,280 --> 00:33:35,930
download the new 30 version metric foo

00:33:32,810 --> 00:33:39,050
I'm pretty sure it works better no

00:33:35,930 --> 00:33:41,510
promises there's no magic to these code

00:33:39,050 --> 00:33:43,130
metrics the tools are really really easy

00:33:41,510 --> 00:33:44,420
to get started with you just run a

00:33:43,130 --> 00:33:46,580
couple command line things that spits

00:33:44,420 --> 00:33:48,650
out some numbers use them for a little

00:33:46,580 --> 00:33:50,090
while using for a week or two don't

00:33:48,650 --> 00:33:52,850
worry about the numbers being bad or

00:33:50,090 --> 00:33:56,150
high or low or sideways see what they're

00:33:52,850 --> 00:33:58,250
saying to you because in the end that's

00:33:56,150 --> 00:34:02,060
what it's about our code is allowed to

00:33:58,250 --> 00:34:03,950
tell us about what came before what

00:34:02,060 --> 00:34:06,260
we're doing now and where we're going if

00:34:03,950 --> 00:34:08,090
we just want to listen and you should

00:34:06,260 --> 00:34:14,150
take the time and listen I know what

00:34:08,090 --> 00:34:16,330
your code is saying to you thank you

00:34:14,150 --> 00:34:16,330
everybody

00:34:53,960 --> 00:34:56,020

YouTube URL: https://www.youtube.com/watch?v=jfNeXy5zUAQ


