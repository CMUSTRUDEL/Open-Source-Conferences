Title: Big Ruby 2013 DevOps for the Rubyist Soul  by John Downey
Publication date: 2020-01-28
Playlist: Big Ruby 2013
Description: 
	Ruby developers have many great options for simply hosting their web applications. But what happens when your product outgrows Heroku? Managing your own servers can be an intimidating task for the average developer. This session will cover the lessons we've learned at Braintree from building and maintaining our infrastructure. It will cover how we leverage Ruby to automate and control all of our environments. Some specific topics we'll cover:

Orchestrating servers with capistrano
Using puppet for configuration management
Our cap and puppet workflow using git
How vagrant can provide a sane test environment
Some pitfalls you should avoid

Help us caption & translate this video!

http://amara.org/v/FGcf/
Captions: 
	00:00:19,410 --> 00:00:23,500
yeah so I'd like to talk about what I

00:00:21,970 --> 00:00:26,860
kind of titled DevOps for the rubios

00:00:23,500 --> 00:00:28,990
soul which is kind of how we come from

00:00:26,860 --> 00:00:31,360
being in love with Ruby to figure out

00:00:28,990 --> 00:00:32,830
how we could use it for DevOps stuff the

00:00:31,360 --> 00:00:35,140
first thing i want to point is lit my

00:00:32,830 --> 00:00:36,940
first time in texas and definite so my

00:00:35,140 --> 00:00:38,739
first time in dallas and i was in new

00:00:36,940 --> 00:00:41,350
york last week for another conference

00:00:38,739 --> 00:00:48,399
and i live in chicago everybody here is

00:00:41,350 --> 00:00:51,670
way nicer than I'm used to yeah so yeah

00:00:48,399 --> 00:00:53,290
so I've been been good so far and so

00:00:51,670 --> 00:00:55,210
like gem i'm also going to talk about

00:00:53,290 --> 00:00:57,760
Ruby outside the web which is kind of

00:00:55,210 --> 00:01:00,190
why I had my hand up because most of the

00:00:57,760 --> 00:01:08,020
Ruby I do does not generate any kind of

00:01:00,190 --> 00:01:10,660
HTML so anybody read Ruby parlay yeah a

00:01:08,020 --> 00:01:12,250
couple people so Josh Nasar always

00:01:10,660 --> 00:01:14,229
recommends that I kind of opening with

00:01:12,250 --> 00:01:16,930
some audience participation or something

00:01:14,229 --> 00:01:19,810
so here's my attempt at some audience

00:01:16,930 --> 00:01:21,640
participation if you if you if you like

00:01:19,810 --> 00:01:23,380
recognize what this is you think you

00:01:21,640 --> 00:01:25,539
understand what it is and you've seen it

00:01:23,380 --> 00:01:27,459
before raise your hand all right now

00:01:25,539 --> 00:01:31,270
keep your hand up if you verified the

00:01:27,459 --> 00:01:34,420
fingerprint before typing in yes all

00:01:31,270 --> 00:01:36,130
right so now you can go and figure out

00:01:34,420 --> 00:01:41,110
if that was a joke or if I was just

00:01:36,130 --> 00:01:43,450
figure out who to target later so yeah

00:01:41,110 --> 00:01:45,160
so as I was introduced I'm John Downey

00:01:43,450 --> 00:01:47,979
I'm an infrastructure engineer at

00:01:45,160 --> 00:01:50,590
braintree braintree is a payment service

00:01:47,979 --> 00:01:54,069
so we help other companies accept credit

00:01:50,590 --> 00:01:55,660
card payments online and if you're in

00:01:54,069 --> 00:01:57,190
the audience that you use Braintree I'd

00:01:55,660 --> 00:01:58,479
love to talk to you after this and get

00:01:57,190 --> 00:02:00,340
you know whatever feedback you have

00:01:58,479 --> 00:02:03,580
because we're always looking to talk to

00:02:00,340 --> 00:02:05,709
our customers so as far as Braintree

00:02:03,580 --> 00:02:08,229
goes I wanted to can't give a back story

00:02:05,709 --> 00:02:11,020
so we can so I can talk about like why

00:02:08,229 --> 00:02:13,410
DevOps how it happened and so every

00:02:11,020 --> 00:02:16,120
start has their like business plan is

00:02:13,410 --> 00:02:18,010
usually they're better than this but we

00:02:16,120 --> 00:02:22,209
can't help with that phase 3 like how

00:02:18,010 --> 00:02:23,950
you actually make the profit and the way

00:02:22,209 --> 00:02:27,489
we do it is with banking integrations

00:02:23,950 --> 00:02:28,150
primarily you should be very happy that

00:02:27,489 --> 00:02:31,000
you never have

00:02:28,150 --> 00:02:33,790
directly talk to a bank so it's not just

00:02:31,000 --> 00:02:35,590
like you're talking to a computer system

00:02:33,790 --> 00:02:39,510
from the 70s you are talking to a

00:02:35,590 --> 00:02:43,090
computer system from the 70s and they

00:02:39,510 --> 00:02:45,730
it's pretty interesting the other thing

00:02:43,090 --> 00:02:48,189
we do is secure credit card storage this

00:02:45,730 --> 00:02:50,200
really helps our our merchants not have

00:02:48,189 --> 00:02:52,569
to deal with compliance burden but it in

00:02:50,200 --> 00:02:54,730
places more of the burden on us so

00:02:52,569 --> 00:02:58,810
security is a really big part of what we

00:02:54,730 --> 00:03:01,090
do at Braintree and then the one of the

00:02:58,810 --> 00:03:02,799
last things is developer support so we

00:03:01,090 --> 00:03:05,139
really kind of pride ourselves on what

00:03:02,799 --> 00:03:07,900
we how we feel we support our developers

00:03:05,139 --> 00:03:09,430
and like with the White Glove like phone

00:03:07,900 --> 00:03:11,230
support and you know everything that we

00:03:09,430 --> 00:03:12,700
provide we also try to do really good

00:03:11,230 --> 00:03:14,680
documentation and we're always looking

00:03:12,700 --> 00:03:17,980
for feedback on it if you have any for

00:03:14,680 --> 00:03:19,450
us but now kinda to the the crux of like

00:03:17,980 --> 00:03:21,459
why I was telling you this so I

00:03:19,450 --> 00:03:24,400
Braintree we are other people's

00:03:21,459 --> 00:03:26,109
infrastructure so if that kind of makes

00:03:24,400 --> 00:03:28,629
sense like we have to be very highly

00:03:26,109 --> 00:03:30,430
available if we go down that means not

00:03:28,629 --> 00:03:32,530
only are we losing money by proxy but

00:03:30,430 --> 00:03:34,150
our customers losing money and typically

00:03:32,530 --> 00:03:37,870
people get really upset when that

00:03:34,150 --> 00:03:41,319
happens so we try to do like we try very

00:03:37,870 --> 00:03:42,549
hard to have no downtime and that

00:03:41,319 --> 00:03:45,669
includes both planned and unplanned

00:03:42,549 --> 00:03:47,019
maintenance so you know not to like

00:03:45,669 --> 00:03:48,879
knock Twitter they're kind of in a

00:03:47,019 --> 00:03:50,590
different like class of scale and a

00:03:48,879 --> 00:03:52,269
different business than we were but we

00:03:50,590 --> 00:03:56,319
could never really get by with like a

00:03:52,269 --> 00:03:58,780
fail whale type thing so that that

00:03:56,319 --> 00:04:00,310
brings us to DevOps so for those of you

00:03:58,780 --> 00:04:02,530
who aren't familiar with what DevOps is

00:04:00,310 --> 00:04:05,560
the the goal is to kind of bring like

00:04:02,530 --> 00:04:07,599
the rigor of agile development to the

00:04:05,560 --> 00:04:11,590
complexity of sort of managing servers

00:04:07,599 --> 00:04:12,819
and server operations in the way we kind

00:04:11,590 --> 00:04:13,919
of do it is with these three things you

00:04:12,819 --> 00:04:16,870
know we want it to be automated

00:04:13,919 --> 00:04:18,130
repeatable and verifiable so you can

00:04:16,870 --> 00:04:20,199
kind of thing it like that's very

00:04:18,130 --> 00:04:21,760
similar to how like agile you know

00:04:20,199 --> 00:04:28,919
programmers think about testing and

00:04:21,760 --> 00:04:28,919
things like that we also want because

00:04:29,810 --> 00:04:35,160
because dev and ops are so you know

00:04:33,600 --> 00:04:37,650
highly linked it's really a symbiotic

00:04:35,160 --> 00:04:39,270
relationship and the role there's

00:04:37,650 --> 00:04:42,210
certainly so much overlap that it's

00:04:39,270 --> 00:04:43,680
worth having a combined roll that way we

00:04:42,210 --> 00:04:46,980
don't sort of point fingers at one

00:04:43,680 --> 00:04:49,440
another so i want to tell a couple

00:04:46,980 --> 00:04:51,420
stories and they sort of enter leave and

00:04:49,440 --> 00:04:56,130
the first one is how braintree got to

00:04:51,420 --> 00:04:57,480
dev ops so I braintree we we love get we

00:04:56,130 --> 00:05:01,470
try to use get for pretty much

00:04:57,480 --> 00:05:03,170
everything and we also love Ruby we have

00:05:01,470 --> 00:05:05,570
a lot of different backgrounds and

00:05:03,170 --> 00:05:07,890
programming language like specialties

00:05:05,570 --> 00:05:11,730
before I worked at braintree I was a dot

00:05:07,890 --> 00:05:13,440
net developer but though I kind of

00:05:11,730 --> 00:05:15,420
described as the ving diagram of our

00:05:13,440 --> 00:05:18,540
developers is we all intersect it kind

00:05:15,420 --> 00:05:19,890
of a love for Ruby and that will kind of

00:05:18,540 --> 00:05:24,270
help frame the decisions that we made

00:05:19,890 --> 00:05:26,550
later like you probably are we use an

00:05:24,270 --> 00:05:28,050
agile process in fact we used to have a

00:05:26,550 --> 00:05:29,940
physical card wall believe it or not

00:05:28,050 --> 00:05:32,880
before we you know now we have multiple

00:05:29,940 --> 00:05:37,410
physical locations so that's a little

00:05:32,880 --> 00:05:39,360
out of the question we also we try to

00:05:37,410 --> 00:05:41,610
pair on almost everything at least

00:05:39,360 --> 00:05:43,740
everything that lights at least

00:05:41,610 --> 00:05:45,480
everything that makes sense and we

00:05:43,740 --> 00:05:47,790
definitely pair on all production work

00:05:45,480 --> 00:05:49,200
and it's just great to have another set

00:05:47,790 --> 00:05:51,930
of eyes and another set of hands

00:05:49,200 --> 00:05:54,960
especially if you mess something up that

00:05:51,930 --> 00:05:56,340
they're right there to help you out so

00:05:54,960 --> 00:05:58,380
the reason I'm telling you about this is

00:05:56,340 --> 00:06:00,510
I want to tell you about how we notated

00:05:58,380 --> 00:06:02,700
our cards for a while on our card wall

00:06:00,510 --> 00:06:05,670
so back in the beginning we would play

00:06:02,700 --> 00:06:07,170
stickers on the physical cards read was

00:06:05,670 --> 00:06:09,690
kind of pick up work kind of like a

00:06:07,170 --> 00:06:12,030
cookie jar if you will Green was new

00:06:09,690 --> 00:06:14,730
projects or features yellow was

00:06:12,030 --> 00:06:21,600
maintenance and blue well Blue is for

00:06:14,730 --> 00:06:24,720
infrastructure so as the team grew and

00:06:21,600 --> 00:06:26,700
the task group sub teams began to form

00:06:24,720 --> 00:06:28,080
around these specific colors you know

00:06:26,700 --> 00:06:29,850
but like that's kind of how things

00:06:28,080 --> 00:06:32,400
organically would grow you would think

00:06:29,850 --> 00:06:34,980
so a small band of misfits formed the

00:06:32,400 --> 00:06:37,530
blue team and this happened right around

00:06:34,980 --> 00:06:40,500
the time I joined so I kind of somehow

00:06:37,530 --> 00:06:41,920
got got put into this and we like to

00:06:40,500 --> 00:06:43,690
call it Gorilla DevOps

00:06:41,920 --> 00:06:45,520
so we weren't planning on being DevOps

00:06:43,690 --> 00:06:48,250
engineers we just sort of happened and

00:06:45,520 --> 00:06:51,670
we did it from the trenches and we tried

00:06:48,250 --> 00:06:53,110
to figure it all out together the second

00:06:51,670 --> 00:06:58,060
part of the story I want to tell is my

00:06:53,110 --> 00:07:00,190
path to DevOps so i really love linux

00:06:58,060 --> 00:07:03,580
and I don't just like Linux I like like

00:07:00,190 --> 00:07:06,300
Linux if I went to high school with

00:07:03,580 --> 00:07:11,530
Linux I would pass it this note in class

00:07:06,300 --> 00:07:14,770
to try to nervously asked it to prom so

00:07:11,530 --> 00:07:15,910
when I got to Braintree it we they were

00:07:14,770 --> 00:07:17,770
trying we were trying to figure out like

00:07:15,910 --> 00:07:20,350
which team should should I join in which

00:07:17,770 --> 00:07:22,780
team you know would need me and I got

00:07:20,350 --> 00:07:26,770
put on the blue team I would imagine

00:07:22,780 --> 00:07:29,290
because of my life for Lennox I didn't

00:07:26,770 --> 00:07:32,080
quite know what that meant at first so I

00:07:29,290 --> 00:07:33,940
like I had played like I managed servers

00:07:32,080 --> 00:07:36,910
but I never done it in like an automated

00:07:33,940 --> 00:07:39,730
or repeatable way I never used server

00:07:36,910 --> 00:07:41,190
configuration tools but I all of a

00:07:39,730 --> 00:07:43,240
sudden became a devops engineer

00:07:41,190 --> 00:07:44,560
fortunately though I had a great set of

00:07:43,240 --> 00:07:46,810
people to pair with that helped me

00:07:44,560 --> 00:07:48,310
figure this all out also for fans and

00:07:46,810 --> 00:07:54,610
movies I do know that these scenes are

00:07:48,310 --> 00:07:56,350
out of order I apologize so by becoming

00:07:54,610 --> 00:08:00,130
a devops engineer i had to learn new set

00:07:56,350 --> 00:08:02,320
of tools and a new vocabulary so cap Q a

00:08:00,130 --> 00:08:05,410
puppet nooope is almost like a Kappas

00:08:02,320 --> 00:08:07,270
new puss patronum or whatever I'll

00:08:05,410 --> 00:08:12,730
explain exactly what that means and a

00:08:07,270 --> 00:08:14,410
little bit so at braintree the first

00:08:12,730 --> 00:08:17,650
tool I'd like to talk about that we use

00:08:14,410 --> 00:08:19,870
is puppet puppet really helps out when

00:08:17,650 --> 00:08:23,320
you want to manage your servers and your

00:08:19,870 --> 00:08:25,150
you use it to write a program that kind

00:08:23,320 --> 00:08:29,920
of pulls the strings that the servers to

00:08:25,150 --> 00:08:31,540
use the puppet analogy some more like

00:08:29,920 --> 00:08:34,330
all the tools i'm going to talk about is

00:08:31,540 --> 00:08:37,330
a ruby is implemented ruby you can get

00:08:34,330 --> 00:08:39,310
it as a ruby gem the language however

00:08:37,330 --> 00:08:40,840
that you program in is not Ruby it's

00:08:39,310 --> 00:08:42,360
it's own language just to make things a

00:08:40,840 --> 00:08:45,160
little bit more confusing called puppet

00:08:42,360 --> 00:08:50,620
but we'll go over a little bit of what

00:08:45,160 --> 00:08:53,290
that means most puppet configurations

00:08:50,620 --> 00:08:55,130
run in this way called puppet master

00:08:53,290 --> 00:08:57,560
what that means is there's

00:08:55,130 --> 00:08:59,720
central server that runs like a master

00:08:57,560 --> 00:09:00,980
node and then all the nodes are run

00:08:59,720 --> 00:09:03,050
these things called agents and they

00:09:00,980 --> 00:09:04,010
connect to this master node and that's

00:09:03,050 --> 00:09:06,140
where they get their marching orders

00:09:04,010 --> 00:09:08,900
from and they try to stay in lockstep

00:09:06,140 --> 00:09:10,400
with the server the reason I bring this

00:09:08,900 --> 00:09:12,230
up is because it is the typical way to

00:09:10,400 --> 00:09:15,740
do it but it's also not the way we chose

00:09:12,230 --> 00:09:20,720
to do it so we'll get a little bit more

00:09:15,740 --> 00:09:22,340
about why that is later so I want to do

00:09:20,720 --> 00:09:25,130
a quick introduction to puppet and we're

00:09:22,340 --> 00:09:26,690
going to break down this example so just

00:09:25,130 --> 00:09:27,950
like gem I like I don't expect you to

00:09:26,690 --> 00:09:33,380
read all this at once I want to break it

00:09:27,950 --> 00:09:35,660
each part down so puppets public files

00:09:33,380 --> 00:09:37,610
are called manifests and they typically

00:09:35,660 --> 00:09:42,230
live in a folder called manifests and

00:09:37,610 --> 00:09:44,300
they have this extension dot PP so when

00:09:42,230 --> 00:09:47,060
puppet boots it's idiomatic to start

00:09:44,300 --> 00:09:50,930
with the manifest site PP thigh high

00:09:47,060 --> 00:09:53,570
boot straps itself in puppet you have

00:09:50,930 --> 00:09:55,580
these things called nodes and this this

00:09:53,570 --> 00:09:58,010
is how you tell like you tell us over

00:09:55,580 --> 00:09:59,810
how to configure itself and the way we

00:09:58,010 --> 00:10:04,520
call this out is with the host name of

00:09:59,810 --> 00:10:06,170
the node one of the things we're doing

00:10:04,520 --> 00:10:10,400
here in this example is we're installing

00:10:06,170 --> 00:10:12,920
Ruby using the OS package manager so in

00:10:10,400 --> 00:10:14,660
debian ubuntu it's just a apt get

00:10:12,920 --> 00:10:17,150
install ruby well this runs the exact

00:10:14,660 --> 00:10:18,620
same thing and it also ensures its

00:10:17,150 --> 00:10:20,690
installed so if it's missing it will

00:10:18,620 --> 00:10:23,870
install it if it's there it will just

00:10:20,690 --> 00:10:27,080
you know this is a no oper it just

00:10:23,870 --> 00:10:28,100
cleanly moves over it the next thing

00:10:27,080 --> 00:10:29,960
we're doing is we're declaring a

00:10:28,100 --> 00:10:31,490
variable and later we'll see a better

00:10:29,960 --> 00:10:33,440
way to do this but I just want to show

00:10:31,490 --> 00:10:34,880
that you can do this in line and we'll

00:10:33,440 --> 00:10:38,900
see where it kind of pops out on the

00:10:34,880 --> 00:10:40,730
other end later you can also tell puppet

00:10:38,900 --> 00:10:42,170
I want to manage specific files so if

00:10:40,730 --> 00:10:43,970
this file isn't their puppets going to

00:10:42,170 --> 00:10:46,310
do its best to make sure it shows up

00:10:43,970 --> 00:10:48,680
we're saying the content is coming from

00:10:46,310 --> 00:10:50,930
this Erb template which is really cool

00:10:48,680 --> 00:10:52,880
because we're rubios remember and where

00:10:50,930 --> 00:11:00,110
it's going to have this owner group mode

00:10:52,880 --> 00:11:03,650
etc so this is just made up Erb template

00:11:00,110 --> 00:11:05,120
for the for example and you can see you

00:11:03,650 --> 00:11:06,920
know herb should be familiar to all

00:11:05,120 --> 00:11:08,570
rubios especially if you're doing some

00:11:06,920 --> 00:11:11,900
kind of rails I

00:11:08,570 --> 00:11:13,940
imagine you recognize what's up here the

00:11:11,900 --> 00:11:16,310
notes were using this blah variable that

00:11:13,940 --> 00:11:17,900
we defined it kind of has shown up in

00:11:16,310 --> 00:11:20,120
our configuration for us to use and

00:11:17,900 --> 00:11:21,800
we're also using a ruby iterator so we

00:11:20,120 --> 00:11:27,560
have the full you know Ruby chainsaw

00:11:21,800 --> 00:11:29,150
here to use but it was kind of weird

00:11:27,560 --> 00:11:31,550
that I just decided to install that

00:11:29,150 --> 00:11:34,880
package in line with the node like like

00:11:31,550 --> 00:11:37,600
that certainly can't scale so puppet

00:11:34,880 --> 00:11:40,520
also lets us extract things into classes

00:11:37,600 --> 00:11:42,730
here we've taken those Ruby and package

00:11:40,520 --> 00:11:44,990
install and moved it out to a class

00:11:42,730 --> 00:11:47,120
notice that we've named the class Ruby

00:11:44,990 --> 00:11:49,040
and it's in a file called Ruby that PP

00:11:47,120 --> 00:11:52,400
that's important because that that's how

00:11:49,040 --> 00:11:53,600
puppet is going to link the two and then

00:11:52,400 --> 00:11:58,070
later on we can go back to our example

00:11:53,600 --> 00:12:00,830
and we can include Ruby so I don't know

00:11:58,070 --> 00:12:03,350
if this makes the same connection as it

00:12:00,830 --> 00:12:05,660
did the first time I saw this but this

00:12:03,350 --> 00:12:07,550
means that we have abstractions as

00:12:05,660 --> 00:12:08,720
programmers we love abstractions because

00:12:07,550 --> 00:12:11,750
that means we can build some really

00:12:08,720 --> 00:12:13,970
interesting things with this the this

00:12:11,750 --> 00:12:16,370
will let us go and then kind of build up

00:12:13,970 --> 00:12:20,080
these generic manifest that we can share

00:12:16,370 --> 00:12:20,080
across all of our different nodes

00:12:20,950 --> 00:12:26,180
another thing puppet comes with is

00:12:23,690 --> 00:12:28,190
something called factor this is yet

00:12:26,180 --> 00:12:30,500
another ruby gem and its purpose is to

00:12:28,190 --> 00:12:36,910
gather facts about what is happening on

00:12:30,500 --> 00:12:40,040
a system and expose that to puppet so

00:12:36,910 --> 00:12:43,640
here we install the gym factor and I

00:12:40,040 --> 00:12:44,930
just brand this on my laptop and we get

00:12:43,640 --> 00:12:48,200
spit out all these different things

00:12:44,930 --> 00:12:52,400
that's going on you know my hardware is

00:12:48,200 --> 00:12:55,130
I 386 i'm using a darwin colonel as you

00:12:52,400 --> 00:12:57,080
can probably see and one thing that's

00:12:55,130 --> 00:12:58,760
interesting is like you can see hostname

00:12:57,080 --> 00:13:00,080
so this is that's the host name of my

00:12:58,760 --> 00:13:02,690
laptop and that's how we would figure

00:13:00,080 --> 00:13:05,420
out what node to run it puppet pulls the

00:13:02,690 --> 00:13:09,560
the hostname fact and then uses that to

00:13:05,420 --> 00:13:11,510
figure out the node we can also use

00:13:09,560 --> 00:13:13,970
these facts to kind of branch in our

00:13:11,510 --> 00:13:15,350
manifest so if we wanted a specific

00:13:13,970 --> 00:13:17,510
branch for a boon to in a specific

00:13:15,350 --> 00:13:21,130
branch for centos we could use the

00:13:17,510 --> 00:13:21,130
operating system fact to do that for us

00:13:21,940 --> 00:13:26,480
another kind of thing that puppet

00:13:24,190 --> 00:13:28,940
introduces is the way they expect you to

00:13:26,480 --> 00:13:32,090
organize your code is in modules you can

00:13:28,940 --> 00:13:33,980
think of a module like a ruby gem and it

00:13:32,090 --> 00:13:37,400
has its own set of ways that things are

00:13:33,980 --> 00:13:39,350
expected to be organized so this is a

00:13:37,400 --> 00:13:41,540
typical layout for a module and puppet

00:13:39,350 --> 00:13:44,060
we recognize some of the things up there

00:13:41,540 --> 00:13:46,940
already as puppet manifests and we also

00:13:44,060 --> 00:13:48,890
have our Erb template again but we have

00:13:46,940 --> 00:13:50,990
a new thing hanging out just something I

00:13:48,890 --> 00:13:53,270
could decided to call some file this is

00:13:50,990 --> 00:13:55,100
a file that is just going to be put out

00:13:53,270 --> 00:13:57,170
by puppet and it's not going to be

00:13:55,100 --> 00:14:01,310
interpret interpolated by Ruby at all

00:13:57,170 --> 00:14:03,410
it's just overall file the entry point

00:14:01,310 --> 00:14:05,860
for your modules is called an it PP you

00:14:03,410 --> 00:14:10,340
can kind of think of it as the like that

00:14:05,860 --> 00:14:12,440
initializer or constructor and then buy

00:14:10,340 --> 00:14:15,890
it by idiom we're going to put all files

00:14:12,440 --> 00:14:18,080
managed by this module and if files all

00:14:15,890 --> 00:14:19,700
packages that it's going to maybe want

00:14:18,080 --> 00:14:21,500
to install in packages and this would be

00:14:19,700 --> 00:14:23,150
a good place to maybe use a fact to

00:14:21,500 --> 00:14:27,050
determine what package to install based

00:14:23,150 --> 00:14:29,240
on our operating system and then what

00:14:27,050 --> 00:14:32,450
services we want to define would go in

00:14:29,240 --> 00:14:35,300
this services PP this may be you know

00:14:32,450 --> 00:14:39,770
like in it the god upstart depending on

00:14:35,300 --> 00:14:41,150
what you're using so modules are this

00:14:39,770 --> 00:14:43,070
way that we want to like kind of

00:14:41,150 --> 00:14:45,680
organize our our puppet code that we use

00:14:43,070 --> 00:14:49,250
to configure the server but they are

00:14:45,680 --> 00:14:52,280
kind of a gigantic mess if you just have

00:14:49,250 --> 00:14:54,620
to write all them yourself so I realize

00:14:52,280 --> 00:14:55,970
now that it's actually a little bit

00:14:54,620 --> 00:14:57,650
easier to see if there than it is on my

00:14:55,970 --> 00:14:59,570
laptop but there's something called

00:14:57,650 --> 00:15:01,700
puppet forge the public community has

00:14:59,570 --> 00:15:03,800
come together and they decide like I

00:15:01,700 --> 00:15:06,530
don't need to everybody write their own

00:15:03,800 --> 00:15:08,300
engine X module will write one good

00:15:06,530 --> 00:15:11,090
engine next module and put it up there

00:15:08,300 --> 00:15:12,500
and you have everybody use that also

00:15:11,090 --> 00:15:14,150
like the Ruby community no one can

00:15:12,500 --> 00:15:15,770
exactly agree on what it means to be a

00:15:14,150 --> 00:15:20,360
good engine next module so there are

00:15:15,770 --> 00:15:22,160
about four or five but it's a great

00:15:20,360 --> 00:15:24,350
place to check for these generic things

00:15:22,160 --> 00:15:25,820
like you know my sequel and things that

00:15:24,350 --> 00:15:31,610
you just probably don't need to write

00:15:25,820 --> 00:15:34,730
yourself so huayra is another part of

00:15:31,610 --> 00:15:37,339
puppet by default now and higher

00:15:34,730 --> 00:15:39,920
is kind of the newest part and i think

00:15:37,339 --> 00:15:42,050
is the most important Huayra lets you

00:15:39,920 --> 00:15:44,720
manage the configuration of your servers

00:15:42,050 --> 00:15:46,699
in a hierarchical format and that's just

00:15:44,720 --> 00:15:49,399
a bunch of buzzwords but I'll hopefully

00:15:46,699 --> 00:15:51,170
be able to explain what that means gamal

00:15:49,399 --> 00:15:54,410
is the format i'm going to show gambles

00:15:51,170 --> 00:15:56,709
what we use at braintree this is a

00:15:54,410 --> 00:15:58,730
sample from our infrastructure repo

00:15:56,709 --> 00:16:01,430
repository that we have in kind of an

00:15:58,730 --> 00:16:03,829
example of our high res set up this is

00:16:01,430 --> 00:16:06,079
for our you can set kind of see the tree

00:16:03,829 --> 00:16:07,459
for we have a chicago data center and by

00:16:06,079 --> 00:16:13,490
that we mean it's the rack in the back

00:16:07,459 --> 00:16:16,160
of our office but so this part of the

00:16:13,490 --> 00:16:18,620
chicago data center will go deeper into

00:16:16,160 --> 00:16:20,449
there's a common gamal so every server

00:16:18,620 --> 00:16:24,139
is going to pick up this file that thus

00:16:20,449 --> 00:16:26,389
its common but inside the chicago data

00:16:24,139 --> 00:16:30,199
center any server name that begins with

00:16:26,389 --> 00:16:32,329
DB is going to pick up this file but any

00:16:30,199 --> 00:16:36,260
server that begins with DB 01 which

00:16:32,329 --> 00:16:38,750
presumably is DB 01 or maybe DB 0 11 if

00:16:36,260 --> 00:16:40,389
we were ever so inclined though I don't

00:16:38,750 --> 00:16:44,209
think we would be a very confusing

00:16:40,389 --> 00:16:45,829
notation we'll pick up this so DB 01

00:16:44,209 --> 00:16:48,199
will pick up these three configuration

00:16:45,829 --> 00:16:53,540
files and they overwrite each other in a

00:16:48,199 --> 00:16:55,130
hierarchical way now the DB 01 isn't

00:16:53,540 --> 00:16:59,569
actually that interesting so I decided

00:16:55,130 --> 00:17:02,269
what I wanted to show you was no.2 who's

00:16:59,569 --> 00:17:04,490
familiar with zen show of hands all

00:17:02,269 --> 00:17:05,540
right so for those of you who aren't

00:17:04,490 --> 00:17:08,839
familiar with Zen Zen is a

00:17:05,540 --> 00:17:10,130
virtualization platform if you are

00:17:08,839 --> 00:17:13,850
running a Mac you probably know like

00:17:10,130 --> 00:17:16,510
parallels or vmware fusion or VirtualBox

00:17:13,850 --> 00:17:20,510
Zen is a way of doing that on servers

00:17:16,510 --> 00:17:23,059
ec2 for example it uses in so it's

00:17:20,510 --> 00:17:25,160
battle-hardened we use end around all of

00:17:23,059 --> 00:17:28,220
our virtual machines and here's kind of

00:17:25,160 --> 00:17:31,040
a snippet of how we have these these

00:17:28,220 --> 00:17:34,040
nodes set up this is jesse amal and it

00:17:31,040 --> 00:17:36,350
just shows up as a as a variable inside

00:17:34,040 --> 00:17:38,299
puppet so instead of having these things

00:17:36,350 --> 00:17:42,200
in lined we're going to have them allah

00:17:38,299 --> 00:17:43,880
in a central place another thing that we

00:17:42,200 --> 00:17:46,429
can do with Huayra is we can interpolate

00:17:43,880 --> 00:17:47,900
other puppet variables in it so there's

00:17:46,429 --> 00:17:48,500
no like and these things can be

00:17:47,900 --> 00:17:50,380
generated on

00:17:48,500 --> 00:17:52,820
the fly so there's no need for us to

00:17:50,380 --> 00:17:53,780
have this duplication all over the place

00:17:52,820 --> 00:17:59,660
we can kind of build up our

00:17:53,780 --> 00:18:02,480
configuration pragmatically so now that

00:17:59,660 --> 00:18:04,430
this kind of brings me to sort of a

00:18:02,480 --> 00:18:05,990
central thesis about puppet and I

00:18:04,430 --> 00:18:08,600
totally stole this from a colleague so I

00:18:05,990 --> 00:18:10,850
will give him credit for that puppet

00:18:08,600 --> 00:18:17,720
does not manage truth puppet maps truth

00:18:10,850 --> 00:18:20,030
to complexity yeah it so we used to have

00:18:17,720 --> 00:18:22,130
and we still do we're making it better

00:18:20,030 --> 00:18:24,170
we used to have truth strewn all

00:18:22,130 --> 00:18:25,780
throughout our puppet configuration you

00:18:24,170 --> 00:18:27,860
know little variables here and there

00:18:25,780 --> 00:18:30,200
branches here and there that would

00:18:27,860 --> 00:18:32,210
decide what happened on a box and you

00:18:30,200 --> 00:18:33,020
would spend hours digging through and

00:18:32,210 --> 00:18:36,140
trying to figure out what exactly

00:18:33,020 --> 00:18:38,930
happened the goal is to move all of that

00:18:36,140 --> 00:18:41,390
to Huayra and then use these variables

00:18:38,930 --> 00:18:44,150
that higher it exposes to do things you

00:18:41,390 --> 00:18:46,250
know to make the changes later so puppet

00:18:44,150 --> 00:18:49,700
is taking the truth which is Huayra and

00:18:46,250 --> 00:18:51,890
mapping it to your complex system the

00:18:49,700 --> 00:18:54,110
way I like to think about this is it's

00:18:51,890 --> 00:18:56,360
lets you build up a puppet model of what

00:18:54,110 --> 00:18:58,760
your system should be ideally and then

00:18:56,360 --> 00:19:00,710
you know also it's hierarchical so you

00:18:58,760 --> 00:19:05,090
can kind of extend and overwrite things

00:19:00,710 --> 00:19:06,560
as you will so once again like this way

00:19:05,090 --> 00:19:07,970
I figure this out and like it was

00:19:06,560 --> 00:19:10,910
explained to me like kind of blew my

00:19:07,970 --> 00:19:15,980
mind at first but now I think it like I

00:19:10,910 --> 00:19:17,090
think it makes total sense so thatthat's

00:19:15,980 --> 00:19:19,190
puppet and that would be a pretty

00:19:17,090 --> 00:19:21,110
general overview for anybody who wants

00:19:19,190 --> 00:19:22,970
to use puppet now I want to talk about

00:19:21,110 --> 00:19:26,450
what kind of we do uniquely a brain tree

00:19:22,970 --> 00:19:28,610
we decided that for what you know for a

00:19:26,450 --> 00:19:30,680
lot of reasons that I'll go over a few

00:19:28,610 --> 00:19:32,150
we wanted to run puppet in master list

00:19:30,680 --> 00:19:36,470
mode so we didn't want to use puppet

00:19:32,150 --> 00:19:39,230
master instead we decided to and we

00:19:36,470 --> 00:19:41,840
wrote a utility called Supply Drop this

00:19:39,230 --> 00:19:44,480
lets us run puppet on individual nodes

00:19:41,840 --> 00:19:47,780
without having them singly coordinated

00:19:44,480 --> 00:19:51,890
and we do that using a lot of our sink

00:19:47,780 --> 00:19:54,230
and Capistrano so the gym name is Supply

00:19:51,890 --> 00:19:56,030
Drop as you can probably imagine you can

00:19:54,230 --> 00:19:58,820
find it on github it's also in Ruby gems

00:19:56,030 --> 00:20:00,890
and this this is kind of the secret

00:19:58,820 --> 00:20:01,940
sauce of our infrastructure and how we

00:20:00,890 --> 00:20:07,070
manage our

00:20:01,940 --> 00:20:09,289
servers so for a simple example we're

00:20:07,070 --> 00:20:11,830
going to make just a new infrastructure

00:20:09,289 --> 00:20:13,759
folder we're an install Supply Drop

00:20:11,830 --> 00:20:15,169
Supply Drop is going to bring in

00:20:13,759 --> 00:20:17,389
capistrano with it because it's a

00:20:15,169 --> 00:20:20,240
dependency we're going to kappa phi i

00:20:17,389 --> 00:20:23,360
guess i should forward my slide install

00:20:20,240 --> 00:20:25,059
Supply Drop we're going to kappa phi so

00:20:23,360 --> 00:20:28,820
we're going to make this a Capistrano

00:20:25,059 --> 00:20:33,110
controlled folder and then we're going

00:20:28,820 --> 00:20:35,899
to modify our cat file so who's familiar

00:20:33,110 --> 00:20:40,539
with Capistrano all right that's why

00:20:35,899 --> 00:20:43,100
yeah so Allah it's pretty ubiquitous the

00:20:40,539 --> 00:20:45,649
instead of us some vanilla Capistrano

00:20:43,100 --> 00:20:46,940
where we deploy Ruby probably a rails

00:20:45,649 --> 00:20:49,519
application we're instead used

00:20:46,940 --> 00:20:52,159
Capistrano to orchestrate all of our

00:20:49,519 --> 00:20:53,750
servers at braintree we orchestrate

00:20:52,159 --> 00:20:55,730
hundreds of servers in this manner and

00:20:53,750 --> 00:20:57,230
it's been working out pretty well for us

00:20:55,730 --> 00:20:59,419
so far and that's across multiple

00:20:57,230 --> 00:21:02,809
physical data centers as well as cloud

00:20:59,419 --> 00:21:04,970
providers the kind of the you know

00:21:02,809 --> 00:21:08,029
underlying it all is this little macro

00:21:04,970 --> 00:21:09,649
it's ours is more complex than this but

00:21:08,029 --> 00:21:14,360
it simplifies down to something like

00:21:09,649 --> 00:21:17,570
this and this we install supply drop

00:21:14,360 --> 00:21:20,509
this will hook into Capistrano for us in

00:21:17,570 --> 00:21:22,909
our data center tasks this this macro

00:21:20,509 --> 00:21:25,309
will define two things it'll find a data

00:21:22,909 --> 00:21:28,610
center level task for us so we can touch

00:21:25,309 --> 00:21:31,639
every server in the data center and it

00:21:28,610 --> 00:21:33,950
will also install this server tasks so

00:21:31,639 --> 00:21:37,370
that we can be very precise as to which

00:21:33,950 --> 00:21:39,049
server we want to talk about we then use

00:21:37,370 --> 00:21:41,179
it as you can probably imagine from the

00:21:39,049 --> 00:21:45,850
parameters to set up the environment and

00:21:41,179 --> 00:21:45,850
event every server in the data center

00:21:47,169 --> 00:21:52,399
for for our purposes we're going to use

00:21:50,029 --> 00:21:55,730
this real simple puppet manifest that

00:21:52,399 --> 00:21:57,950
just installs Ruby you'll notice i named

00:21:55,730 --> 00:22:00,409
it pop it dot PP even though the idiom

00:21:57,950 --> 00:22:02,269
is you cite not PP we only found out

00:22:00,409 --> 00:22:04,610
about that later and supply drop was

00:22:02,269 --> 00:22:10,129
written to default to puppet TV so it's

00:22:04,610 --> 00:22:12,379
still in there so once we once we have

00:22:10,129 --> 00:22:13,880
that and have that all set up we're

00:22:12,379 --> 00:22:16,580
going to try to run

00:22:13,880 --> 00:22:18,440
a cat command against our server and

00:22:16,580 --> 00:22:21,980
this command we're going to run is

00:22:18,440 --> 00:22:23,450
puppet nooope so we've revamped we

00:22:21,980 --> 00:22:25,040
pronounce it new I imagine you would

00:22:23,450 --> 00:22:26,690
normally pronounce it no op but that's

00:22:25,040 --> 00:22:29,360
just the kind of the terminology that's

00:22:26,690 --> 00:22:32,390
growing up around this and this will go

00:22:29,360 --> 00:22:33,740
out and try apply against the server

00:22:32,390 --> 00:22:35,840
where the changes aren't actually

00:22:33,740 --> 00:22:37,340
written it then lists and tells you

00:22:35,840 --> 00:22:40,760
everything it would have done if you

00:22:37,340 --> 00:22:43,160
were applying instead of duping always

00:22:40,760 --> 00:22:46,190
read the diff so this is probably like

00:22:43,160 --> 00:22:47,750
item number one we always read the diff

00:22:46,190 --> 00:22:49,940
because this is going to change our

00:22:47,750 --> 00:22:53,440
server in QA maybe it doesn't matter as

00:22:49,940 --> 00:22:55,640
much but in production it certainly does

00:22:53,440 --> 00:22:58,160
once we're happy with the diff we can

00:22:55,640 --> 00:23:00,200
apply this will actually run puppet on

00:22:58,160 --> 00:23:02,630
the local box the first thing it does is

00:23:00,200 --> 00:23:05,120
our sinks puppet are the puppet

00:23:02,630 --> 00:23:07,190
configuration up and then it shells out

00:23:05,120 --> 00:23:10,730
using Capistrano to run the puppet

00:23:07,190 --> 00:23:14,420
command locally once things are applied

00:23:10,730 --> 00:23:15,890
and you didn't break anything you wonder

00:23:14,420 --> 00:23:18,110
we go ahead and we nuke the entire

00:23:15,890 --> 00:23:20,120
infrastructure oftentimes you may not

00:23:18,110 --> 00:23:22,280
realize that you by changing this one

00:23:20,120 --> 00:23:23,570
piece over here you may have changed a

00:23:22,280 --> 00:23:24,740
box on the other side of the

00:23:23,570 --> 00:23:27,800
infrastructure that you didn't think

00:23:24,740 --> 00:23:29,600
about which often happens when these

00:23:27,800 --> 00:23:31,940
things grow up organically like ours did

00:23:29,600 --> 00:23:34,400
so this you know once you figured out

00:23:31,940 --> 00:23:37,820
that you're clean it's time to you it's

00:23:34,400 --> 00:23:39,700
time to use get so get is the other kind

00:23:37,820 --> 00:23:42,740
of part of the secret sauce that we use

00:23:39,700 --> 00:23:44,570
to do master those puppet normally I

00:23:42,740 --> 00:23:47,420
would write a better commit message but

00:23:44,570 --> 00:23:49,340
I had to fit on the slide and we just

00:23:47,420 --> 00:23:54,590
want to say what we did and add it in

00:23:49,340 --> 00:23:56,810
push so now that we have Supply Drop

00:23:54,590 --> 00:23:58,940
kind of hooked into Capistrano what are

00:23:56,810 --> 00:24:00,470
some of the things we can do with it the

00:23:58,940 --> 00:24:03,920
first thing we can do is target a

00:24:00,470 --> 00:24:05,570
specific node like we saw already using

00:24:03,920 --> 00:24:08,510
the power of bash expansions we can also

00:24:05,570 --> 00:24:11,900
target many nodes at once and so this

00:24:08,510 --> 00:24:14,720
will actually new appt 0 through 12 and

00:24:11,900 --> 00:24:16,760
once it'll rsync it out and just do it

00:24:14,720 --> 00:24:20,120
all as one block and then we can also

00:24:16,760 --> 00:24:22,160
run an entire environment and because

00:24:20,120 --> 00:24:23,720
we're all Capistrano already comes with

00:24:22,160 --> 00:24:26,000
its own like Swiss Army knife of tools

00:24:23,720 --> 00:24:27,290
we can use things like happen VOC to

00:24:26,000 --> 00:24:29,600
just run the LS command on

00:24:27,290 --> 00:24:31,790
every single box in an environment this

00:24:29,600 --> 00:24:33,320
is really good for PS if you want to

00:24:31,790 --> 00:24:38,030
like know what processes are running on

00:24:33,320 --> 00:24:41,240
every box in a pinch so I mentioned we

00:24:38,030 --> 00:24:43,220
use get to kind of control this we have

00:24:41,240 --> 00:24:47,120
a set up where we have a git branch /

00:24:43,220 --> 00:24:50,210
environment masters maps to QA the other

00:24:47,120 --> 00:24:52,760
ones map to what they kind of you know

00:24:50,210 --> 00:24:55,550
the obvious name for it and this lets us

00:24:52,760 --> 00:24:57,500
do things like we can take our our

00:24:55,550 --> 00:24:59,810
configuration and merge it between these

00:24:57,500 --> 00:25:02,840
branches so we can let build something

00:24:59,810 --> 00:25:04,850
and sort of let it bake in QA merge it

00:25:02,840 --> 00:25:06,200
up to staging let it bake they're a

00:25:04,850 --> 00:25:07,820
little more than finally take it to

00:25:06,200 --> 00:25:11,900
production and we can do this a very

00:25:07,820 --> 00:25:15,110
controlled manner so when we want to

00:25:11,900 --> 00:25:16,790
move up we just check out and merge and

00:25:15,110 --> 00:25:18,560
then we nuke the entire environment this

00:25:16,790 --> 00:25:22,160
lets us see what kind of baggage we

00:25:18,560 --> 00:25:23,690
brought with us in this new the the

00:25:22,160 --> 00:25:26,030
other things you could do which we often

00:25:23,690 --> 00:25:27,680
do is use the get chainsaw to do this so

00:25:26,030 --> 00:25:29,570
you know look at the diff between the

00:25:27,680 --> 00:25:32,450
two branches look at the log messages

00:25:29,570 --> 00:25:33,980
between them oftentimes we try not to

00:25:32,450 --> 00:25:35,930
but we do occasionally cherry pick

00:25:33,980 --> 00:25:41,630
between the branches if it's going to be

00:25:35,930 --> 00:25:44,330
a hairy merge once we once we're good

00:25:41,630 --> 00:25:46,940
with it we can apply normally we will

00:25:44,330 --> 00:25:48,920
not apply the entire environment at once

00:25:46,940 --> 00:25:50,420
that could be kind of dangerous you

00:25:48,920 --> 00:25:52,820
would never obviously apply in

00:25:50,420 --> 00:25:57,110
production all at once but this is just

00:25:52,820 --> 00:25:58,730
an example of something you could do and

00:25:57,110 --> 00:26:00,680
once you once you've kind of applied the

00:25:58,730 --> 00:26:02,630
merge you push and that's your way of

00:26:00,680 --> 00:26:07,490
making sure that everybody is on the

00:26:02,630 --> 00:26:11,060
same page as you so like I mentioned

00:26:07,490 --> 00:26:13,640
earlier we love get and this you know so

00:26:11,060 --> 00:26:16,850
get plus Supply Drop lets us do sort of

00:26:13,640 --> 00:26:20,540
this decentralized gorilla DevOps we can

00:26:16,850 --> 00:26:22,610
let let's each pair or sometimes solo

00:26:20,540 --> 00:26:23,870
member of the blue team work on

00:26:22,610 --> 00:26:26,150
different parts of the infrastructure

00:26:23,870 --> 00:26:28,640
sometimes different environments usually

00:26:26,150 --> 00:26:32,030
different servers for example I could be

00:26:28,640 --> 00:26:33,470
working on an idea check and my another

00:26:32,030 --> 00:26:35,840
person on the team could be working on

00:26:33,470 --> 00:26:37,460
it tuning some postgres configs or

00:26:35,840 --> 00:26:40,940
something and we wouldn't have an issue

00:26:37,460 --> 00:26:45,230
later we can merge and will

00:26:40,940 --> 00:26:47,720
the same results across the board this

00:26:45,230 --> 00:26:50,330
process of merging we call going up and

00:26:47,720 --> 00:26:53,000
down the infrastructure we tried to do

00:26:50,330 --> 00:26:57,890
it often because it can be quite hairy

00:26:53,000 --> 00:26:59,960
if you delay and doing it the way the

00:26:57,890 --> 00:27:02,960
way we notate this and the way we talk

00:26:59,960 --> 00:27:05,150
about is production is up and QA is down

00:27:02,960 --> 00:27:06,950
this keeps us from how to ever say

00:27:05,150 --> 00:27:08,930
production and down in the same sins

00:27:06,950 --> 00:27:10,280
because if someone just over here is

00:27:08,930 --> 00:27:12,320
that in the audience they are in the

00:27:10,280 --> 00:27:14,060
like in the room they tend to get really

00:27:12,320 --> 00:27:15,290
nervous if you say especially if you on

00:27:14,060 --> 00:27:20,810
the infrastructure team and you say

00:27:15,290 --> 00:27:22,430
production and down so this this leg of

00:27:20,810 --> 00:27:26,030
the journey from staging to production

00:27:22,430 --> 00:27:27,920
is and I think I'm the only one that

00:27:26,030 --> 00:27:31,220
calls it the danger zone but I really

00:27:27,920 --> 00:27:32,960
like to call it the danger zone so when

00:27:31,220 --> 00:27:35,180
you're in this leg you always make sure

00:27:32,960 --> 00:27:37,610
you have a another pair of eyes with you

00:27:35,180 --> 00:27:40,130
and another person watching the terminal

00:27:37,610 --> 00:27:42,140
even if they're not driving that way if

00:27:40,130 --> 00:27:44,120
something bad happens they can break off

00:27:42,140 --> 00:27:46,940
and help you fight the fires immediately

00:27:44,120 --> 00:27:49,040
and whenever we're doing this we always

00:27:46,940 --> 00:27:51,620
have a plan we always know exactly which

00:27:49,040 --> 00:27:53,630
servers we're going to apply to because

00:27:51,620 --> 00:27:54,890
we need to maybe unbalanced them first

00:27:53,630 --> 00:28:00,710
so that we don't affect any of our

00:27:54,890 --> 00:28:03,080
customers so with puppet master we've

00:28:00,710 --> 00:28:05,690
kind of gone off the beaten trail a

00:28:03,080 --> 00:28:08,330
little bit and in just the way we

00:28:05,690 --> 00:28:10,010
developed puppet internally we've have

00:28:08,330 --> 00:28:12,620
we learned a lot of lessons sometimes

00:28:10,010 --> 00:28:14,330
the hard way so I'm going to go over

00:28:12,620 --> 00:28:18,050
each of these in a little bit closer

00:28:14,330 --> 00:28:20,270
detail the puppet style guide was

00:28:18,050 --> 00:28:22,400
something we didn't get in we didn't

00:28:20,270 --> 00:28:25,310
start reading until much later than we

00:28:22,400 --> 00:28:27,290
should have there's a reason you want to

00:28:25,310 --> 00:28:29,240
write a yo Matt code and that's because

00:28:27,290 --> 00:28:32,690
the conversation around it is usually a

00:28:29,240 --> 00:28:34,130
lot easier to you know to Brock without

00:28:32,690 --> 00:28:36,470
the idioms you tend to apply your own

00:28:34,130 --> 00:28:38,870
and if you apply if everybody sort of

00:28:36,470 --> 00:28:41,210
has their own then you may be won't make

00:28:38,870 --> 00:28:42,980
sense of what's going on it also helps

00:28:41,210 --> 00:28:44,840
your puppet repository stay clean

00:28:42,980 --> 00:28:49,120
because they've been doing this and they

00:28:44,840 --> 00:28:49,120
know what job pitfalls also to look for

00:28:49,510 --> 00:28:54,890
so use modules when I came to the to

00:28:53,990 --> 00:28:56,810
braintree the blue

00:28:54,890 --> 00:28:58,760
we had an infrastructure repository that

00:28:56,810 --> 00:29:01,310
was made up of approximately zero

00:28:58,760 --> 00:29:04,940
modules it was all manifests and it was

00:29:01,310 --> 00:29:07,550
all very hairy and over the last year or

00:29:04,940 --> 00:29:10,430
so we've been teasing these things out

00:29:07,550 --> 00:29:13,100
into modules so that we can retain our

00:29:10,430 --> 00:29:14,810
sanity at the very least the reason why

00:29:13,100 --> 00:29:17,450
you won't use modules is modules let you

00:29:14,810 --> 00:29:19,190
compose things there are generic

00:29:17,450 --> 00:29:20,600
components hopefully you're getting

00:29:19,190 --> 00:29:22,940
these from puppet Forge but these

00:29:20,600 --> 00:29:25,010
represent basic services like Apache or

00:29:22,940 --> 00:29:26,720
engine X and then there are your

00:29:25,010 --> 00:29:29,720
services that are unique to what you do

00:29:26,720 --> 00:29:31,190
for one of the Braintree example is we

00:29:29,720 --> 00:29:33,320
have a Braintree app server or a

00:29:31,190 --> 00:29:35,180
Braintree proxy server and these that

00:29:33,320 --> 00:29:37,280
these things are made up of various

00:29:35,180 --> 00:29:42,200
components and we've composed them into

00:29:37,280 --> 00:29:44,750
something that makes sense for us the

00:29:42,200 --> 00:29:47,150
next thing that I'll highly recommend is

00:29:44,750 --> 00:29:49,580
puppet has a facility for backing up

00:29:47,150 --> 00:29:51,350
files and they will keep every version

00:29:49,580 --> 00:29:53,750
of a file that you've changed on the

00:29:51,350 --> 00:29:55,520
system over time and you can go back and

00:29:53,750 --> 00:29:58,250
retain them so even if you pop it apply

00:29:55,520 --> 00:30:01,670
if you're using puppet backup you can go

00:29:58,250 --> 00:30:03,710
get that file this however does suck for

00:30:01,670 --> 00:30:06,920
large files so if you're pushing out a

00:30:03,710 --> 00:30:09,760
big binary blob that lets you talk to a

00:30:06,920 --> 00:30:12,350
back-end processor over a VPN connection

00:30:09,760 --> 00:30:14,150
which we have you need to turn it off

00:30:12,350 --> 00:30:16,850
otherwise you're going to be versioning

00:30:14,150 --> 00:30:21,560
like every time you change this 800 Meg

00:30:16,850 --> 00:30:23,660
file the last one is merged regularly

00:30:21,560 --> 00:30:26,180
which we've kind of covered already the

00:30:23,660 --> 00:30:29,180
same reason we talked about an agile to

00:30:26,180 --> 00:30:32,300
deploy often the the less you merge in

00:30:29,180 --> 00:30:33,440
the less you deploy often the more more

00:30:32,300 --> 00:30:35,300
difficult it's going to be when at time

00:30:33,440 --> 00:30:37,850
it comes time to actually do it so we

00:30:35,300 --> 00:30:40,130
try not to let changes linger certainly

00:30:37,850 --> 00:30:41,930
longer than a week we try to go up and

00:30:40,130 --> 00:30:46,850
down the infrastructure once a week if

00:30:41,930 --> 00:30:50,240
possible so the last tool I want to talk

00:30:46,850 --> 00:30:52,030
about is vagrant I really hope everybody

00:30:50,240 --> 00:30:56,450
here knows about vagrant already if not

00:30:52,030 --> 00:30:58,430
prepare for another mind-blowing part so

00:30:56,450 --> 00:31:03,380
vagrant helps you automatically build

00:30:58,430 --> 00:31:04,850
out virtualbox machines as you can

00:31:03,380 --> 00:31:06,500
imagine just like everything else i've

00:31:04,850 --> 00:31:08,390
talked about you can gem install vagrant

00:31:06,500 --> 00:31:10,130
they do however not reckon

00:31:08,390 --> 00:31:11,810
you do this method anymore since their

00:31:10,130 --> 00:31:16,340
one point oh they have like an official

00:31:11,810 --> 00:31:18,470
package that you can install it what

00:31:16,340 --> 00:31:20,960
vagrant lets you do is in your current

00:31:18,470 --> 00:31:23,140
folder you run vagrant and knit with a

00:31:20,960 --> 00:31:26,360
base image that you want to build off of

00:31:23,140 --> 00:31:29,420
for example here I'm using precise which

00:31:26,360 --> 00:31:32,540
is the latest LTS release of ubuntu I

00:31:29,420 --> 00:31:34,280
want the 64-bit version so that will

00:31:32,540 --> 00:31:36,770
just write out a vagrant file for me to

00:31:34,280 --> 00:31:38,390
use I then run vagrant up that's going

00:31:36,770 --> 00:31:41,390
to actually download the box if it's not

00:31:38,390 --> 00:31:42,830
already cached locally spin up these the

00:31:41,390 --> 00:31:45,890
VirtualBox machine that i need and

00:31:42,830 --> 00:31:47,390
configure it i can then ssh directly

00:31:45,890 --> 00:31:48,980
into it right from there so with these

00:31:47,390 --> 00:31:51,230
three commands i can get a virtual box

00:31:48,980 --> 00:31:56,210
machine with a plain version of linux

00:31:51,230 --> 00:31:59,020
installed up and running so the vagrant

00:31:56,210 --> 00:32:01,520
file is just Ruby you can configure it

00:31:59,020 --> 00:32:05,870
using the same same things that you

00:32:01,520 --> 00:32:08,360
would you know normally do here this is

00:32:05,870 --> 00:32:11,710
the an it this is where it stuck what

00:32:08,360 --> 00:32:14,720
base image we're going to use I then

00:32:11,710 --> 00:32:16,010
define two servers and so by default

00:32:14,720 --> 00:32:18,530
you're just going to get one called

00:32:16,010 --> 00:32:21,680
default here i'm defining two servers a

00:32:18,530 --> 00:32:23,450
web server and a DB server and this lets

00:32:21,680 --> 00:32:25,730
it lets me bring up two servers at once

00:32:23,450 --> 00:32:28,250
and have some port forwarding so i can

00:32:25,730 --> 00:32:29,630
bring up a mini environment and you know

00:32:28,250 --> 00:32:34,160
and start getting things talking to each

00:32:29,630 --> 00:32:36,710
other in an interesting way the next

00:32:34,160 --> 00:32:38,810
thing that is really cool about vagrant

00:32:36,710 --> 00:32:41,240
is you can provision it with puppet so

00:32:38,810 --> 00:32:43,250
if you you know no puppet already and

00:32:41,240 --> 00:32:45,320
are using it you can then point it at

00:32:43,250 --> 00:32:46,820
one of your puppet manifests and have it

00:32:45,320 --> 00:32:50,150
start bootstrapping the node when it

00:32:46,820 --> 00:32:52,010
comes up this is a you know this is like

00:32:50,150 --> 00:32:55,340
really handy for the next two thing is

00:32:52,010 --> 00:32:59,240
we're going to talk about using vagrant

00:32:55,340 --> 00:33:00,710
to rapid prototype so a lot of the

00:32:59,240 --> 00:33:04,310
really cool technologies we use these

00:33:00,710 --> 00:33:05,960
days are clustered and distributed so to

00:33:04,310 --> 00:33:07,490
do that you typically want to try it out

00:33:05,960 --> 00:33:09,590
in more than one node to get the real

00:33:07,490 --> 00:33:11,450
feel for it vagrant lets you really

00:33:09,590 --> 00:33:13,160
quickly set up a multi-node environment

00:33:11,450 --> 00:33:15,560
on your local box you don't need to do

00:33:13,160 --> 00:33:17,030
it on ec2 and you know pay the 10 cents

00:33:15,560 --> 00:33:19,220
or whatever you can just do it locally

00:33:17,030 --> 00:33:21,289
and see how things interact

00:33:19,220 --> 00:33:24,559
so for example we are testing out

00:33:21,289 --> 00:33:26,780
RabbitMQ about nine ten months ago if we

00:33:24,559 --> 00:33:28,970
spun up three or four vagrants locally

00:33:26,780 --> 00:33:31,520
and use that to test the high

00:33:28,970 --> 00:33:33,799
availability failover between different

00:33:31,520 --> 00:33:36,230
rabbit nodes and we ultimately decided

00:33:33,799 --> 00:33:37,789
that rabbit was something we wanted to

00:33:36,230 --> 00:33:41,630
invest more time in because we did this

00:33:37,789 --> 00:33:44,330
prototyping the next thing is

00:33:41,630 --> 00:33:47,240
development a more specifically a

00:33:44,330 --> 00:33:48,950
development box over the last couple

00:33:47,240 --> 00:33:51,770
months we've decided that instead of

00:33:48,950 --> 00:33:53,780
running our builds and our everything on

00:33:51,770 --> 00:33:55,250
our local laptops when we want to

00:33:53,780 --> 00:33:57,080
develop we're going to use this

00:33:55,250 --> 00:34:00,650
development box which is just vagrant

00:33:57,080 --> 00:34:03,860
and we use puppet to provision it this

00:34:00,650 --> 00:34:05,990
lets us move things off of OSX where we

00:34:03,860 --> 00:34:07,730
don't deploy non to Linux which is much

00:34:05,990 --> 00:34:10,040
similar to what we do deploy on and it

00:34:07,730 --> 00:34:12,560
is exactly what we deploy on it also

00:34:10,040 --> 00:34:14,840
lets us not run things on your local box

00:34:12,560 --> 00:34:16,879
like post grass and elastic search which

00:34:14,840 --> 00:34:18,379
you just probably don't want ninety

00:34:16,879 --> 00:34:20,450
percent of the time running on your Mac

00:34:18,379 --> 00:34:21,740
only when you're developing it also

00:34:20,450 --> 00:34:24,080
makes it really easy to get new

00:34:21,740 --> 00:34:26,599
developers up and running so instead of

00:34:24,080 --> 00:34:28,190
them spending days reading a wiki of

00:34:26,599 --> 00:34:30,919
every home brute command that they need

00:34:28,190 --> 00:34:32,960
to install and finding numerous errors

00:34:30,919 --> 00:34:37,369
and then our answers inevitably well to

00:34:32,960 --> 00:34:39,020
wiki edit it and fix it instead we can

00:34:37,369 --> 00:34:42,320
give them this development box it

00:34:39,020 --> 00:34:43,639
puppets itself and then we can just get

00:34:42,320 --> 00:34:45,409
them up and running and they can run the

00:34:43,639 --> 00:34:50,270
builds and usually have everything

00:34:45,409 --> 00:34:52,879
passing that day so that was the the

00:34:50,270 --> 00:34:54,109
last of what I wanted to talk about and

00:34:52,879 --> 00:34:57,260
I wanted to leave you with a little bit

00:34:54,109 --> 00:35:00,140
of DevOps humor so if you're not

00:34:57,260 --> 00:35:03,530
familiar with it this is DevOps

00:35:00,140 --> 00:35:06,040
reactions is a tumblr and it's just

00:35:03,530 --> 00:35:08,119
animated gifts like most tumblers of

00:35:06,040 --> 00:35:09,830
some funny things so this is

00:35:08,119 --> 00:35:12,230
specifically funny for people in DevOps

00:35:09,830 --> 00:35:15,320
the title of this one is house Donath

00:35:12,230 --> 00:35:17,720
works so for those of you who don't know

00:35:15,320 --> 00:35:19,310
what's Donath is don't feel bad stone

00:35:17,720 --> 00:35:22,670
stands for shoot the other note in the

00:35:19,310 --> 00:35:24,710
head it's a ops term it's an ops

00:35:22,670 --> 00:35:27,500
facility where we're using clustered

00:35:24,710 --> 00:35:30,080
services the only way to guarantee that

00:35:27,500 --> 00:35:32,420
you know what state the cluster is in is

00:35:30,080 --> 00:35:32,870
to literally write like rip the cord out

00:35:32,420 --> 00:35:35,840
of the wall

00:35:32,870 --> 00:35:37,760
of the other box so if you get your

00:35:35,840 --> 00:35:39,380
cluster into a bad state the one that

00:35:37,760 --> 00:35:41,420
determines that it's going to be master

00:35:39,380 --> 00:35:46,310
pulls the cord on the other one so that

00:35:41,420 --> 00:35:50,240
it knows its master so this gift

00:35:46,310 --> 00:35:52,730
animates that the next one is DevOps

00:35:50,240 --> 00:35:54,020
borat if you're if you're interested in

00:35:52,730 --> 00:35:56,840
DevOps i highly recommend that you

00:35:54,020 --> 00:35:58,430
follow devops borat similarly dev op or

00:35:56,840 --> 00:36:01,190
a big data Borat if you're interested in

00:35:58,430 --> 00:36:02,630
big data so these are you know borat

00:36:01,190 --> 00:36:04,370
tweets of some things that may be

00:36:02,630 --> 00:36:10,730
humorous to you if you're interested in

00:36:04,370 --> 00:36:13,670
devops so that was all I had my name is

00:36:10,730 --> 00:36:16,510
John Downey I work at braintree and you

00:36:13,670 --> 00:36:16,510
can check me out on twitter

00:36:37,190 --> 00:36:39,250

YouTube URL: https://www.youtube.com/watch?v=e4lfvNQYIW4


