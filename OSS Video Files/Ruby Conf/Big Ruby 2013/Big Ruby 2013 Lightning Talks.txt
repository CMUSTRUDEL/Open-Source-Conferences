Title: Big Ruby 2013 Lightning Talks
Publication date: 2020-01-28
Playlist: Big Ruby 2013
Description: 
	Help us caption & translate this video!

http://amara.org/v/FGd3/
Captions: 
	00:00:18,930 --> 00:00:26,500
now hey so if you're here for the

00:00:23,320 --> 00:00:29,770
matinee of the breakfast club prepare to

00:00:26,500 --> 00:00:32,529
be disappointed actually that's not bad

00:00:29,770 --> 00:00:34,300
advice for the rest of you hi I'm Chris

00:00:32,529 --> 00:00:35,949
Morris I work for living social and I

00:00:34,300 --> 00:00:37,120
work in our international group and

00:00:35,949 --> 00:00:39,820
while living social is an unusual

00:00:37,120 --> 00:00:41,260
startup we still have the same kinds of

00:00:39,820 --> 00:00:44,710
stuff and Jeff dagley you stole my

00:00:41,260 --> 00:00:46,059
picture like any startup you have to

00:00:44,710 --> 00:00:48,280
feed the business what it likes to eat

00:00:46,059 --> 00:00:50,050
since building actual spreadsheets can

00:00:48,280 --> 00:00:51,790
be a pain a clever developer will figure

00:00:50,050 --> 00:00:54,250
out that you can toss some csv views

00:00:51,790 --> 00:00:56,620
their way and everyone will be happy as

00:00:54,250 --> 00:00:58,149
long as you're in the US but you start

00:00:56,620 --> 00:01:00,250
making internet international

00:00:58,149 --> 00:01:01,989
acquisitions as you are want to do and

00:01:00,250 --> 00:01:03,850
then the French guys are screaming at

00:01:01,989 --> 00:01:06,729
you that their own lots look like chewed

00:01:03,850 --> 00:01:08,590
croissant so you do a little research

00:01:06,729 --> 00:01:10,030
and figure out you can slam a byte order

00:01:08,590 --> 00:01:12,430
mark in the front of your content and

00:01:10,030 --> 00:01:14,440
everyone's happy as long as you're on

00:01:12,430 --> 00:01:16,660
Windows but if you're on the mac you're

00:01:14,440 --> 00:01:18,190
still screwed so a little more research

00:01:16,660 --> 00:01:21,009
and realize you're going to have to suck

00:01:18,190 --> 00:01:23,979
it up and do it right in my case that

00:01:21,009 --> 00:01:25,420
meant a lot of csv views so after a

00:01:23,979 --> 00:01:27,490
little bit of a work we came up with

00:01:25,420 --> 00:01:29,830
some secret sauce and put it in a gym

00:01:27,490 --> 00:01:32,530
called Excel inator and we're using this

00:01:29,830 --> 00:01:34,390
in production now and if you've got

00:01:32,530 --> 00:01:36,490
controller code like this you can throw

00:01:34,390 --> 00:01:38,610
a one liner in and now you've got a real

00:01:36,490 --> 00:01:40,360
spreadsheet from your csv view

00:01:38,610 --> 00:01:42,429
unfortunately a lot of our controller

00:01:40,360 --> 00:01:44,470
code looked like this and i really

00:01:42,429 --> 00:01:49,000
wasn't a fan of writing for lines of

00:01:44,470 --> 00:01:50,410
code x 70 80 controllers so i thought

00:01:49,000 --> 00:01:52,060
what would it take to go the next step

00:01:50,410 --> 00:01:54,130
and not have to write any controller

00:01:52,060 --> 00:01:57,640
code and i thought i would share my

00:01:54,130 --> 00:01:59,679
findings with you today so given this

00:01:57,640 --> 00:02:02,349
report controller without any code and a

00:01:59,679 --> 00:02:04,929
simple HTML view we're shifting from csv

00:02:02,349 --> 00:02:06,910
to HTML dirty little secret of excel is

00:02:04,929 --> 00:02:08,830
that if you feed at an HTML table it'll

00:02:06,910 --> 00:02:10,630
automatically grok the table cells and

00:02:08,830 --> 00:02:11,980
convert them into cells that's not a

00:02:10,630 --> 00:02:14,200
trick that works a lot of alternate

00:02:11,980 --> 00:02:16,810
spreadsheet programs though but given

00:02:14,200 --> 00:02:18,730
this setup and a request for Excel our

00:02:16,810 --> 00:02:20,670
goal here is to take these two routes

00:02:18,730 --> 00:02:23,620
the top one being the default HTML

00:02:20,670 --> 00:02:26,890
format and then the XLS format and make

00:02:23,620 --> 00:02:28,319
both of these work without any code so

00:02:26,890 --> 00:02:29,849
before we hack we have to do something

00:02:28,319 --> 00:02:32,849
anybody would have to do in register the

00:02:29,849 --> 00:02:34,079
xls mime type but now to the hacks first

00:02:32,849 --> 00:02:36,209
thing we have to do is hack the mine

00:02:34,079 --> 00:02:37,469
response collector you might be asking

00:02:36,209 --> 00:02:39,659
yourself what is the mime responds

00:02:37,469 --> 00:02:43,049
collector it's that thing it's the thing

00:02:39,659 --> 00:02:44,790
that's yielded from the respond to so we

00:02:43,049 --> 00:02:46,680
hacked this by going into its

00:02:44,790 --> 00:02:48,989
constructor and making sure the xls mime

00:02:46,680 --> 00:02:50,639
type is available all the time and we

00:02:48,989 --> 00:02:52,980
can start by getting rid of those four

00:02:50,639 --> 00:02:54,540
lines of code but we're not good yet

00:02:52,980 --> 00:02:56,669
we've next have to hack the lookup

00:02:54,540 --> 00:02:58,379
context the look of context is an

00:02:56,669 --> 00:03:00,150
internal rails object that contains all

00:02:58,379 --> 00:03:01,829
of your criteria that it needs to find

00:03:00,150 --> 00:03:04,049
your view if you ever come across a

00:03:01,829 --> 00:03:05,250
template is missing exception then up

00:03:04,049 --> 00:03:07,310
most of the data that's in this

00:03:05,250 --> 00:03:09,989
exception comes from the lookup context

00:03:07,310 --> 00:03:12,659
so we need to hack it so that when the

00:03:09,989 --> 00:03:14,909
XLS format is put into it we could say

00:03:12,659 --> 00:03:17,219
no no no no HTML is fine we're good

00:03:14,909 --> 00:03:18,810
that's technically all you have to do to

00:03:17,219 --> 00:03:21,180
make this work but there are some side

00:03:18,810 --> 00:03:23,010
effects one you probably don't want your

00:03:21,180 --> 00:03:25,230
layout showing in your spreadsheet

00:03:23,010 --> 00:03:26,609
although technically excelled as a

00:03:25,230 --> 00:03:28,129
decent job of doing that if you want

00:03:26,609 --> 00:03:31,049
some ugly-looking headers and footers

00:03:28,129 --> 00:03:32,609
but in this case we don't so we need to

00:03:31,049 --> 00:03:34,470
override the normalize options of the

00:03:32,609 --> 00:03:37,530
abstract controller layouts module and

00:03:34,470 --> 00:03:39,419
doing that undo the work of finding your

00:03:37,530 --> 00:03:44,489
layout by assigning nil to that if this

00:03:39,419 --> 00:03:46,530
is an XLS request our last hack is to

00:03:44,489 --> 00:03:49,769
tell Excel what encoding is going on so

00:03:46,530 --> 00:03:51,989
we got a jack in this HTML encoding

00:03:49,769 --> 00:03:54,509
thing and then we do the always

00:03:51,989 --> 00:03:56,970
recommended scanning of HTML with a

00:03:54,509 --> 00:03:58,799
regular expression and prepend that with

00:03:56,970 --> 00:04:00,449
the encoding meta tag this is also a

00:03:58,799 --> 00:04:02,909
convenient place for us to stick in our

00:04:00,449 --> 00:04:05,040
mime type we take these two modules mix

00:04:02,909 --> 00:04:08,009
them into action controller base and we

00:04:05,040 --> 00:04:10,739
can go from this in our browser to this

00:04:08,009 --> 00:04:13,439
in our spreadsheet Tony Romo's a happy

00:04:10,739 --> 00:04:15,090
man this guy and this guy and these

00:04:13,439 --> 00:04:18,209
people on that guy and that guy and that

00:04:15,090 --> 00:04:19,709
guy and that guy and what and this is

00:04:18,209 --> 00:04:21,329
internationalization talk so I have to

00:04:19,709 --> 00:04:24,330
do this it's in Dutch but I have no idea

00:04:21,329 --> 00:04:25,919
what it says so the question is can you

00:04:24,330 --> 00:04:27,330
do this should you do this well one of

00:04:25,919 --> 00:04:29,340
the pros is that you learn a lot about

00:04:27,330 --> 00:04:30,719
how things work underneath the covers

00:04:29,340 --> 00:04:32,550
and when you have a leaky abstraction

00:04:30,719 --> 00:04:34,500
that might come in handy if you feel

00:04:32,550 --> 00:04:35,699
like doing some rails plumbing con is

00:04:34,500 --> 00:04:37,320
it's kind of time consuming especially

00:04:35,699 --> 00:04:39,210
when there's some really good tutorials

00:04:37,320 --> 00:04:41,580
on how to do a run rendering engine

00:04:39,210 --> 00:04:42,150
properly you're also bringing on some

00:04:41,580 --> 00:04:43,580
risk by

00:04:42,150 --> 00:04:45,540
hacking this stuff into every request

00:04:43,580 --> 00:04:46,890
theoretically hacking the internals of

00:04:45,540 --> 00:04:47,580
rails can be a bad idea because you

00:04:46,890 --> 00:04:49,350
never know what's going to change

00:04:47,580 --> 00:04:51,600
underneath you although in this case I

00:04:49,350 --> 00:04:53,490
was able to go from 2 323 with a little

00:04:51,600 --> 00:04:58,050
bit of code and then from then on it's

00:04:53,490 --> 00:04:59,760
been free wheeling fun so that's it the

00:04:58,050 --> 00:05:01,140
top link is accelerated the gym we use

00:04:59,760 --> 00:05:02,400
in production the middle link is the

00:05:01,140 --> 00:05:10,260
code in this talk and that's me on

00:05:02,400 --> 00:05:13,440
Twitter Thanks hi I'm Thom Browne I'm

00:05:10,260 --> 00:05:16,670
going to talk about using a gem called

00:05:13,440 --> 00:05:19,530
rock Oh auth to it supports both

00:05:16,670 --> 00:05:23,520
providers and clients I'm going to focus

00:05:19,530 --> 00:05:27,810
on providers in this five minutes I'm

00:05:23,520 --> 00:05:30,750
Tom with the way on Twitter and there's

00:05:27,810 --> 00:05:33,060
a link to the gym right there and you

00:05:30,750 --> 00:05:38,220
can find this on a big Ruby dash rock da

00:05:33,060 --> 00:05:41,940
showa to Heroku app com the mantra for

00:05:38,220 --> 00:05:44,100
OAuth is get a token use a token and so

00:05:41,940 --> 00:05:46,730
kind of as an example because some

00:05:44,100 --> 00:05:49,320
people might not be familiar with OAuth

00:05:46,730 --> 00:05:53,310
i'm going to use Dwolla which is a

00:05:49,320 --> 00:05:56,490
really neat payment service that exposes

00:05:53,310 --> 00:05:58,230
an API so I've got links to their

00:05:56,490 --> 00:06:02,190
documentation for getting a token and

00:05:58,230 --> 00:06:06,150
using a token that get a token step as

00:06:02,190 --> 00:06:09,960
you redirect a client redirects a user

00:06:06,150 --> 00:06:13,470
to the provider for authorization form

00:06:09,960 --> 00:06:17,010
where the user decides to accept what

00:06:13,470 --> 00:06:20,190
the client application needs so here's

00:06:17,010 --> 00:06:22,230
an example with gowalla the clients

00:06:20,190 --> 00:06:28,590
asking to make payments on behalf of the

00:06:22,230 --> 00:06:30,990
user and then step two as user token so

00:06:28,590 --> 00:06:33,120
you just take the token that you

00:06:30,990 --> 00:06:38,370
received in the first step as a client

00:06:33,120 --> 00:06:41,220
and you make a post or whatever in this

00:06:38,370 --> 00:06:45,450
case it's making a payment to bill at

00:06:41,220 --> 00:06:50,040
recipient calm and and so that's it I

00:06:45,450 --> 00:06:52,950
get a token user token james edward grey

00:06:50,040 --> 00:06:54,840
at lonestar we become five had this

00:06:52,950 --> 00:06:55,980
excellent keynote where I talked about

00:06:54,840 --> 00:07:00,540
the need for skepticism

00:06:55,980 --> 00:07:03,390
and and we should be skeptical of roth

00:07:00,540 --> 00:07:05,250
gems in the sense that Roth was

00:07:03,390 --> 00:07:08,010
originally supposed to be a protocol and

00:07:05,250 --> 00:07:10,920
not a framework and and it should be a

00:07:08,010 --> 00:07:13,560
protocol like HTTP and just do protocol

00:07:10,920 --> 00:07:16,530
type II things and if your gem is doing

00:07:13,560 --> 00:07:19,680
more than that then you should be

00:07:16,530 --> 00:07:22,080
skeptical and furthermore oftentimes

00:07:19,680 --> 00:07:23,790
when people say you know just use the

00:07:22,080 --> 00:07:25,910
code and don't worry about the details

00:07:23,790 --> 00:07:28,170
of the authorization or authentication

00:07:25,910 --> 00:07:30,150
what they really mean is you really do

00:07:28,170 --> 00:07:32,220
need to worry about the details because

00:07:30,150 --> 00:07:36,810
there's probably a well known bug in

00:07:32,220 --> 00:07:39,990
their gem this is a nova mataki there on

00:07:36,810 --> 00:07:46,170
the left left at internet identity

00:07:39,990 --> 00:07:48,450
workshop as twitter is a nove and what

00:07:46,170 --> 00:07:50,790
he has is a gem which is just a simple

00:07:48,450 --> 00:07:53,430
rack module and he's got an example

00:07:50,790 --> 00:07:55,950
project that I've linked to which shows

00:07:53,430 --> 00:07:58,200
you how for instance to a rails project

00:07:55,950 --> 00:08:02,030
using the gem and we're going to look at

00:07:58,200 --> 00:08:08,010
that very quickly here's a mailing list

00:08:02,030 --> 00:08:12,600
here's a security ITF spec which is

00:08:08,010 --> 00:08:15,930
recently approved and oftentimes people

00:08:12,600 --> 00:08:17,610
try to use OAuth for authentication it's

00:08:15,930 --> 00:08:19,650
not an authentication protocol its

00:08:17,610 --> 00:08:23,490
authorization protocol so the first

00:08:19,650 --> 00:08:24,960
skeptical thing you should ask is does

00:08:23,490 --> 00:08:28,590
this gem that's trying to do

00:08:24,960 --> 00:08:33,150
authentication as it address this

00:08:28,590 --> 00:08:37,919
implicit grant threat and this security

00:08:33,150 --> 00:08:40,650
spec and oftentimes it hasn't and so

00:08:37,919 --> 00:08:44,070
it's very easy for someone to lure

00:08:40,650 --> 00:08:47,490
somebody to a client because and get a

00:08:44,070 --> 00:08:50,520
token say a rogue a lot client and then

00:08:47,490 --> 00:08:53,280
if they get that token they can use that

00:08:50,520 --> 00:08:56,670
token at another client and impersonate

00:08:53,280 --> 00:08:59,130
the user if that other clients using

00:08:56,670 --> 00:09:01,800
implicit flow for OAuth so that's a huge

00:08:59,130 --> 00:09:04,250
vulnerability and sometimes you don't

00:09:01,800 --> 00:09:06,130
even need to lure up the user oftentimes

00:09:04,250 --> 00:09:08,950
go off

00:09:06,130 --> 00:09:12,490
it's half their database of tokens

00:09:08,950 --> 00:09:14,380
exposed in this case face calm after

00:09:12,490 --> 00:09:17,050
they revealed that their database had

00:09:14,380 --> 00:09:21,550
exposed all our talk tokens facebook

00:09:17,050 --> 00:09:23,440
acquired them why wouldn't they so when

00:09:21,550 --> 00:09:25,390
you're approaching this gem what you

00:09:23,440 --> 00:09:28,030
should do it can be intimidating at

00:09:25,390 --> 00:09:30,190
first what I suggest is consider step 2

00:09:28,030 --> 00:09:32,500
first and then go back and consider step

00:09:30,190 --> 00:09:36,160
1 so step two is just using the token

00:09:32,500 --> 00:09:39,550
right so you post the try to do a

00:09:36,160 --> 00:09:41,500
transaction using the token and all you

00:09:39,550 --> 00:09:45,660
have to do is in your config application

00:09:41,500 --> 00:09:48,820
or rails app you can figure the the rack

00:09:45,660 --> 00:09:50,620
module and then here you just look up

00:09:48,820 --> 00:09:52,840
your access token in your database you

00:09:50,620 --> 00:09:55,750
make sure that it's not expired if it

00:09:52,840 --> 00:09:57,640
isn't valid then you just reject it

00:09:55,750 --> 00:10:00,040
right there before even a hitch or rails

00:09:57,640 --> 00:10:02,770
application here's what you put in your

00:10:00,040 --> 00:10:05,440
application controller that the below

00:10:02,770 --> 00:10:10,180
function require a user token what it

00:10:05,440 --> 00:10:14,080
does just find your access token excuse

00:10:10,180 --> 00:10:15,730
me and then and then it finds out what

00:10:14,080 --> 00:10:18,010
user is associated with that access

00:10:15,730 --> 00:10:19,990
token and then you set your user that

00:10:18,010 --> 00:10:23,020
way just as if the user who logged in

00:10:19,990 --> 00:10:26,170
and then go back to step one get a token

00:10:23,020 --> 00:10:28,480
and in here you can see code and this is

00:10:26,170 --> 00:10:31,420
all these are taken out from the example

00:10:28,480 --> 00:10:34,000
project that nauvoo provides and this is

00:10:31,420 --> 00:10:35,950
what you do you present the form when

00:10:34,000 --> 00:10:38,370
the user visits it and then he submits

00:10:35,950 --> 00:10:44,190
the form and it comes back here and then

00:10:38,370 --> 00:10:44,190
you approve it that five okay thank

00:10:46,170 --> 00:10:52,930
yes microphone okay hi I I don't do Ruby

00:10:51,580 --> 00:10:54,880
but I still come here because it's lots

00:10:52,930 --> 00:10:56,470
of fun I used to do I used to be a

00:10:54,880 --> 00:10:58,960
regular at Dallas RB so I know some of

00:10:56,470 --> 00:11:00,310
you and thanks to lightning talks at del

00:10:58,960 --> 00:11:01,660
sr b I've spent the last three years

00:11:00,310 --> 00:11:04,080
traveling the world speaking at

00:11:01,660 --> 00:11:07,030
conferences so lightning talks are good

00:11:04,080 --> 00:11:09,070
so I've been working on lots of

00:11:07,030 --> 00:11:10,210
interesting things lately and my latest

00:11:09,070 --> 00:11:12,670
experiment is I created a new

00:11:10,210 --> 00:11:16,630
programming language so I'm going to

00:11:12,670 --> 00:11:20,380
briefly show you some bits of it the why

00:11:16,630 --> 00:11:24,070
are you not mirrored again okay the the

00:11:20,380 --> 00:11:26,580
goal of my language is to talk while

00:11:24,070 --> 00:11:26,580
doing things

00:11:32,230 --> 00:11:37,780
there we go you got to click the key

00:11:33,850 --> 00:11:40,090
button so it's a very minimal language

00:11:37,780 --> 00:11:42,070
it's got some ideas from ruby some ideas

00:11:40,090 --> 00:11:44,080
from javascript some ideas from lula i

00:11:42,070 --> 00:11:45,370
don't know whatever but my target

00:11:44,080 --> 00:11:47,560
audience is people learning to program

00:11:45,370 --> 00:11:50,080
back when I lived here at ten to Dallas

00:11:47,560 --> 00:11:52,390
RB I would teach Ruby to grade school

00:11:50,080 --> 00:11:54,010
kids and they picked it up pretty fast

00:11:52,390 --> 00:11:55,480
and since then I've taught JavaScript a

00:11:54,010 --> 00:11:58,930
grade school kids and I wanted something

00:11:55,480 --> 00:12:01,000
simpler so this language is very minimal

00:11:58,930 --> 00:12:03,730
there are no prototypes there are no

00:12:01,000 --> 00:12:06,430
classes there is no dynamic scope at all

00:12:03,730 --> 00:12:10,300
you just have functions and closures and

00:12:06,430 --> 00:12:12,310
everything is lexical and i'm going to

00:12:10,300 --> 00:12:13,870
write back ends for that runs on the web

00:12:12,310 --> 00:12:17,290
that runs natively it's going to be fun

00:12:13,870 --> 00:12:20,890
it's a lot of work just a quick look at

00:12:17,290 --> 00:12:22,660
the syntax we have null for null true

00:12:20,890 --> 00:12:23,770
and false so we got integers I don't

00:12:22,660 --> 00:12:25,000
actually have floating points yet

00:12:23,770 --> 00:12:28,020
because I don't find them that useful

00:12:25,000 --> 00:12:31,660
I'll probably add them I've got strings

00:12:28,020 --> 00:12:33,040
I've got a buffer primitive so if you

00:12:31,660 --> 00:12:34,990
need some binary data you can just embed

00:12:33,040 --> 00:12:38,980
it in your code there notice base64

00:12:34,990 --> 00:12:41,440
stuff and I have a very short and terse

00:12:38,980 --> 00:12:44,260
function literal it's just curly braces

00:12:41,440 --> 00:12:45,880
your arguments bar your body because

00:12:44,260 --> 00:12:46,840
everything in this function revolves

00:12:45,880 --> 00:12:50,350
around these function little they're

00:12:46,840 --> 00:12:52,300
like they're like Ruby lambdas and so a

00:12:50,350 --> 00:12:54,940
square function is this function literal

00:12:52,300 --> 00:12:56,620
a cube is that or they can be multi-line

00:12:54,940 --> 00:12:58,600
you can declare local variables in them

00:12:56,620 --> 00:13:03,060
and that's pretty much the whole

00:12:58,600 --> 00:13:07,210
language I have some custom looping

00:13:03,060 --> 00:13:09,400
let's see there we go so you can loop

00:13:07,210 --> 00:13:11,020
over objects as key value pairs you can

00:13:09,400 --> 00:13:13,420
loop over list as key values where the

00:13:11,020 --> 00:13:15,370
keys are the indexes you can loop over

00:13:13,420 --> 00:13:17,020
functions and it'll just keep calling

00:13:15,370 --> 00:13:20,320
the function until it returns null so

00:13:17,020 --> 00:13:23,950
you can make custom lazy generators I've

00:13:20,320 --> 00:13:26,560
got your basic arithmetic and if

00:13:23,950 --> 00:13:27,670
else--if while loops I mean that's it

00:13:26,560 --> 00:13:30,400
that's the whole language you just

00:13:27,670 --> 00:13:31,870
learned it so you can no longer say you

00:13:30,400 --> 00:13:36,520
don't know jack this language is called

00:13:31,870 --> 00:13:38,620
Jack as you now know jack so I was

00:13:36,520 --> 00:13:41,410
thinking showing sin taxes boring so I'm

00:13:38,620 --> 00:13:44,040
going to do a demo so I asked two people

00:13:41,410 --> 00:13:46,240
to come help me if they could come on up

00:13:44,040 --> 00:13:51,000
and i'm going to plug in 3 game

00:13:46,240 --> 00:13:51,000
adds to my laptop because why not I

00:13:51,029 --> 00:13:54,640
purposely brought my linux laptop today

00:13:53,320 --> 00:13:59,050
just in case I was able to give a

00:13:54,640 --> 00:14:05,709
lightning talk because one one nice

00:13:59,050 --> 00:14:11,260
thing about linux is you go the i/o

00:14:05,709 --> 00:14:12,610
devices are just files so well that

00:14:11,260 --> 00:14:17,160
could be a problem i use one of them for

00:14:12,610 --> 00:14:17,160
the kvm you two can play while i watch

00:14:17,580 --> 00:14:26,140
there's only three USB ports alright so

00:14:24,250 --> 00:14:29,560
i wrote this small program let me load

00:14:26,140 --> 00:14:30,820
it up call gamepad and what it's going

00:14:29,560 --> 00:14:33,910
to do is this is it's going to open

00:14:30,820 --> 00:14:35,800
devon put jazz 0 dev input json' jst was

00:14:33,910 --> 00:14:38,440
going to fail and I'm going to make a

00:14:35,800 --> 00:14:40,300
few BOTS and these are just they're just

00:14:38,440 --> 00:14:42,779
functions there's no classes so the bot

00:14:40,300 --> 00:14:45,550
function it takes a name and death stuff

00:14:42,779 --> 00:14:49,149
the player function takes a path to the

00:14:45,550 --> 00:14:51,430
device and a name and does stuff and I

00:14:49,149 --> 00:14:53,829
have this joystick function that talks

00:14:51,430 --> 00:14:56,020
to the joystick here it's parsing the

00:14:53,829 --> 00:15:01,570
linux kernel stuff which looks like

00:14:56,020 --> 00:15:02,910
garbage let me show you dip em pjs 0

00:15:01,570 --> 00:15:06,730
when if you move your joy stick around

00:15:02,910 --> 00:15:08,320
that's the one so on linux you can do

00:15:06,730 --> 00:15:09,940
this you can just read this and it's

00:15:08,320 --> 00:15:15,190
documented in the kernel documentation

00:15:09,940 --> 00:15:19,589
what this looks like so great so instead

00:15:15,190 --> 00:15:24,690
let's just now try it oh I need fix that

00:15:19,589 --> 00:15:27,610
this is this is what comments are for

00:15:24,690 --> 00:15:30,779
all right I plan to this but I forget

00:15:27,610 --> 00:15:32,560
this okay before I start the game engine

00:15:30,779 --> 00:15:34,240
all right now move your joy sticks

00:15:32,560 --> 00:15:35,529
around so we got green and red player

00:15:34,240 --> 00:15:38,170
and we're seeing all their input events

00:15:35,529 --> 00:15:41,589
parched so you got buttons axes that's

00:15:38,170 --> 00:15:44,470
great all right now for that and delete

00:15:41,589 --> 00:15:45,670
that code now where is that crazy print

00:15:44,470 --> 00:15:49,450
that one we don't want that front seat

00:15:45,670 --> 00:15:50,709
many more that is bad all right now it's

00:15:49,450 --> 00:15:53,500
try it again we got three BOTS two

00:15:50,709 --> 00:15:55,770
players and one dead player get the red

00:15:53,500 --> 00:15:55,770
one move

00:15:56,449 --> 00:16:04,489
it's your left left one yeah and you

00:16:02,929 --> 00:16:06,980
could write the same program easily in

00:16:04,489 --> 00:16:08,660
Ruby using event machine because you

00:16:06,980 --> 00:16:10,879
just need some sort of non-blocking way

00:16:08,660 --> 00:16:18,679
to read these two device things and then

00:16:10,879 --> 00:16:22,449
parse it yes so yeah I've only got five

00:16:18,679 --> 00:16:22,449
minutes so that's about it thank you

00:16:27,609 --> 00:16:34,819
alright my name is Keith Bennett and I'd

00:16:31,910 --> 00:16:39,019
like to talk to you about JRuby JRuby is

00:16:34,819 --> 00:16:41,119
the synergistic provides a synergy of

00:16:39,019 --> 00:16:43,129
the language of Ruby which we know in

00:16:41,119 --> 00:16:46,549
love with the Java Virtual Machine and

00:16:43,129 --> 00:16:48,230
its maturity its stability the multi

00:16:46,549 --> 00:16:51,199
threading and the vast array of

00:16:48,230 --> 00:16:57,439
libraries that are available for it one

00:16:51,199 --> 00:17:00,199
of which is Apache teka teka is a open

00:16:57,439 --> 00:17:01,759
source java library it was a committer

00:17:00,199 --> 00:17:05,299
on it a few years ago before I made my

00:17:01,759 --> 00:17:08,240
daring escape to Ruby land and it

00:17:05,299 --> 00:17:10,069
coordinates and controls other open

00:17:08,240 --> 00:17:15,169
source java libraries that parse

00:17:10,069 --> 00:17:16,970
documents of various types there's a

00:17:15,169 --> 00:17:19,459
developer in Sweden named Richard new

00:17:16,970 --> 00:17:25,669
system who developed a ruby rapper or

00:17:19,459 --> 00:17:28,940
for tika and a lot of second I'm going

00:17:25,669 --> 00:17:30,289
to as you can see there's these

00:17:28,940 --> 00:17:32,570
functions here that they make it very

00:17:30,289 --> 00:17:36,130
easy to parse data and we're going to

00:17:32,570 --> 00:17:36,130
try that in IRB

00:17:41,440 --> 00:17:49,269
and then we get the content and then we

00:17:47,169 --> 00:17:51,759
get the metadata and as you can see

00:17:49,269 --> 00:17:55,289
there are a lot of fields there the

00:17:51,759 --> 00:17:58,389
various parser libraries that teka uses

00:17:55,289 --> 00:18:00,610
represent several person years of effort

00:17:58,389 --> 00:18:07,629
a lot of work and you have this all for

00:18:00,610 --> 00:18:08,740
free in Ruby with Rica let's start

00:18:07,629 --> 00:18:12,000
talking about the multi-threading

00:18:08,740 --> 00:18:14,379
aspects of JRuby we heard yesterday that

00:18:12,000 --> 00:18:17,379
MRI movie has a global interpreter lock

00:18:14,379 --> 00:18:19,659
that prevents the more than one cpu from

00:18:17,379 --> 00:18:23,580
being used by ruby no matter how many

00:18:19,659 --> 00:18:23,580
threads are running let's take a look oh

00:18:23,820 --> 00:18:29,980
by the way we'll be using this function

00:18:27,309 --> 00:18:33,009
as a threat function for every it'll

00:18:29,980 --> 00:18:35,259
just loop and get a random number from 0

00:18:33,009 --> 00:18:37,059
to 10 million minus 1 and when the

00:18:35,259 --> 00:18:45,250
number is 0 the thread is going to sleep

00:18:37,059 --> 00:18:48,639
for two seconds okay we're trying out

00:18:45,250 --> 00:18:53,889
Ruby 19 first MRI and let's look at the

00:18:48,639 --> 00:18:57,220
activity monitor and I don't know if you

00:18:53,889 --> 00:19:06,070
can see but it's about a hundred percent

00:18:57,220 --> 00:19:12,490
that means 1 c 1 cpu let's try it now in

00:19:06,070 --> 00:19:14,919
JRuby and as you can see it's already is

00:19:12,490 --> 00:19:17,590
visibly faster let's look again the

00:19:14,919 --> 00:19:25,240
activity monitor and we see it's 200

00:19:17,590 --> 00:19:28,149
oops 300 clearly many more cpus then MRI

00:19:25,240 --> 00:19:31,299
review now let's take a look in visual

00:19:28,149 --> 00:19:37,629
vm which is a free tool that comes for

00:19:31,299 --> 00:19:39,940
the jdk it shows all the Java Virtual

00:19:37,629 --> 00:19:44,919
Machines it finds running we pick this

00:19:39,940 --> 00:19:47,529
one we look at the threads we have the

00:19:44,919 --> 00:19:52,000
five threads here and yellow means it's

00:19:47,529 --> 00:19:54,610
sleeping visualvm has a lot of cool

00:19:52,000 --> 00:19:55,280
things you can also see this in table

00:19:54,610 --> 00:19:58,400
mode

00:19:55,280 --> 00:20:05,690
and if you want to just examine a single

00:19:58,400 --> 00:20:08,960
thread here's what here's one of those

00:20:05,690 --> 00:20:12,560
threads that was running we also have a

00:20:08,960 --> 00:20:20,000
sampler which will show us memory

00:20:12,560 --> 00:20:24,590
consumption by class and cpu consumption

00:20:20,000 --> 00:20:29,930
by function and an overall monitor that

00:20:24,590 --> 00:20:34,040
shows us what's going on on the lighter

00:20:29,930 --> 00:20:37,040
side this is a.j ruby program i wrote

00:20:34,040 --> 00:20:39,050
that uses the java swing libraries to

00:20:37,040 --> 00:20:42,140
visualize a game of life implementation

00:20:39,050 --> 00:20:43,940
and if you write game of life whatever

00:20:42,140 --> 00:20:46,190
what you like as long as it conforms to

00:20:43,940 --> 00:20:50,120
a contract of five or six methods i

00:20:46,190 --> 00:20:53,840
think you can use this to visualize that

00:20:50,120 --> 00:20:56,420
model so this is a way we can use java

00:20:53,840 --> 00:20:57,890
libraries in totally on the client side

00:20:56,420 --> 00:20:59,870
there's no network communication going

00:20:57,890 --> 00:21:02,660
on here so once in a while you might

00:20:59,870 --> 00:21:04,100
find a use case for this another great

00:21:02,660 --> 00:21:05,690
strengths of Java is the

00:21:04,100 --> 00:21:09,500
internationalization support that you

00:21:05,690 --> 00:21:13,220
get you get look about 150 locales right

00:21:09,500 --> 00:21:14,570
out of the box well by the way another

00:21:13,220 --> 00:21:17,300
thing I wanted to mention i wrote the

00:21:14,570 --> 00:21:18,950
integer formatting function so that if

00:21:17,300 --> 00:21:21,860
it found that it was running in JRuby it

00:21:18,950 --> 00:21:23,660
would use the number format and put the

00:21:21,860 --> 00:21:25,190
appropriate thousand separators in there

00:21:23,660 --> 00:21:26,570
so you see I don't know if you notice

00:21:25,190 --> 00:21:31,040
but we have commas in these numbers and

00:21:26,570 --> 00:21:33,340
we didn't have them before going to stop

00:21:31,040 --> 00:21:33,340
it now

00:21:37,710 --> 00:21:40,710
sorry

00:21:45,510 --> 00:21:50,340
this is a just a short strip script I

00:21:47,760 --> 00:21:52,980
wrote to display the locales in the java

00:21:50,340 --> 00:21:55,500
runtime and as you can see we have a

00:21:52,980 --> 00:21:59,610
country name and locale name lockout

00:21:55,500 --> 00:22:02,100
code which includes a country language

00:21:59,610 --> 00:22:04,230
invariant optionally we have date number

00:22:02,100 --> 00:22:06,510
and currency formats this is the medium

00:22:04,230 --> 00:22:08,820
date format there's also short and long

00:22:06,510 --> 00:22:11,220
formats as well there's just a lot in

00:22:08,820 --> 00:22:13,830
the JVM that we as Ruby developers can

00:22:11,220 --> 00:22:14,610
exploit if we if we want to so thanks

00:22:13,830 --> 00:22:16,260
very much if you have any other

00:22:14,610 --> 00:22:28,710
questions about to ever be please find

00:22:16,260 --> 00:22:33,030
me okay so whine whining back to the

00:22:28,710 --> 00:22:37,350
beginning we all right you have seen the

00:22:33,030 --> 00:22:39,570
future so i'm marshall hunt i'm a dallas

00:22:37,350 --> 00:22:41,490
rubios and by day i like to hack on

00:22:39,570 --> 00:22:45,060
scalability and performance problems and

00:22:41,490 --> 00:22:46,950
night i like to work on art projects i'm

00:22:45,060 --> 00:22:49,230
going to talk about our project that i

00:22:46,950 --> 00:22:53,700
did to support a burning man art project

00:22:49,230 --> 00:22:55,860
for 2012 it's called connectable pipe so

00:22:53,700 --> 00:22:58,830
this probably goes without saying but I

00:22:55,860 --> 00:23:01,290
love going to Burning Man because like

00:22:58,830 --> 00:23:04,710
in the Ruby community we build a lot of

00:23:01,290 --> 00:23:06,870
cool beautiful stuff the main difference

00:23:04,710 --> 00:23:09,450
between a burning man the Ruby community

00:23:06,870 --> 00:23:16,380
is at the end of the event we like to

00:23:09,450 --> 00:23:19,950
set our stuff on fire and blow it up we

00:23:16,380 --> 00:23:21,570
can do a little bit of that so the the

00:23:19,950 --> 00:23:23,910
project that I was working on last year

00:23:21,570 --> 00:23:26,820
is called the ball of light and these

00:23:23,910 --> 00:23:29,340
are aluminum rings they're 25 feet in

00:23:26,820 --> 00:23:32,220
diameter and they have 12 intersection

00:23:29,340 --> 00:23:34,140
points so at each one of these 12

00:23:32,220 --> 00:23:35,840
intersection points we mounted a

00:23:34,140 --> 00:23:37,920
computer-controlled DJ light and

00:23:35,840 --> 00:23:39,690
strapped one of these things to the side

00:23:37,920 --> 00:23:42,510
anybody have one of these in the

00:23:39,690 --> 00:23:45,690
audience so this is a Microsoft Kinect

00:23:42,510 --> 00:23:49,410
it's got two cameras for binocular

00:23:45,690 --> 00:23:51,480
vision and a infrared camera for depth

00:23:49,410 --> 00:23:52,620
perception and it also has a couple of

00:23:51,480 --> 00:23:55,560
microphones and some other things that

00:23:52,620 --> 00:23:57,210
we didn't use on this project and so the

00:23:55,560 --> 00:23:59,130
idea was the Kinect would drive the

00:23:57,210 --> 00:24:04,950
computer control DJ lights

00:23:59,130 --> 00:24:07,470
and make little light shows so in

00:24:04,950 --> 00:24:10,530
digging into this I first stumbled onto

00:24:07,470 --> 00:24:13,380
this library called openni is from the

00:24:10,530 --> 00:24:16,200
same people that make the connect and I

00:24:13,380 --> 00:24:18,720
had a couple of problems with it so the

00:24:16,200 --> 00:24:24,450
very first problem with it is everything

00:24:18,720 --> 00:24:25,950
inside is C++ and I hate C++ so I don't

00:24:24,450 --> 00:24:28,860
like C++ because it doesn't have a

00:24:25,950 --> 00:24:30,180
ripple it's hard to test and I forgotten

00:24:28,860 --> 00:24:33,180
what all those damn compiler warnings

00:24:30,180 --> 00:24:36,480
mean the other problem in it this

00:24:33,180 --> 00:24:38,340
library has is that it's lgpl which is

00:24:36,480 --> 00:24:40,850
probably fine for everyone else but I

00:24:38,340 --> 00:24:44,670
prefer to release my stuff under MIT and

00:24:40,850 --> 00:24:47,850
apache licenses and I wanted to put out

00:24:44,670 --> 00:24:51,000
some some rubygems associated with the

00:24:47,850 --> 00:24:54,420
project and and so I wanted to be able

00:24:51,000 --> 00:24:57,060
to fix both of these problems so I look

00:24:54,420 --> 00:24:58,980
to unix and the core principle of

00:24:57,060 --> 00:25:02,310
everything is a file like like Tim

00:24:58,980 --> 00:25:09,030
mentioned earlier and because i wanted

00:25:02,310 --> 00:25:10,890
to write code like this so i had to

00:25:09,030 --> 00:25:15,390
write a little bit of stub c++ in order

00:25:10,890 --> 00:25:17,670
to get this to work and so my c++ is

00:25:15,390 --> 00:25:19,950
terrible so you see in my code there's a

00:25:17,670 --> 00:25:23,040
lot of like handwritten JSON

00:25:19,950 --> 00:25:25,370
serialization it's amazingly easy to get

00:25:23,040 --> 00:25:29,940
lots of bugs with this kind of crap as

00:25:25,370 --> 00:25:31,590
you might expect so this is prob this

00:25:29,940 --> 00:25:32,970
particular slice of the project is

00:25:31,590 --> 00:25:36,600
probably the worst code that I've

00:25:32,970 --> 00:25:39,270
written in like 10 years but it's the

00:25:36,600 --> 00:25:41,370
absolute minimally Viable C++ required

00:25:39,270 --> 00:25:43,620
in order to get JSON output at the

00:25:41,370 --> 00:25:46,950
command line so what does it look like I

00:25:43,620 --> 00:25:49,020
won it winds up looking like this and

00:25:46,950 --> 00:25:50,790
that's probably not super legible so

00:25:49,020 --> 00:25:54,060
I'll tab forward to the next slide and

00:25:50,790 --> 00:25:56,160
I've highlighted one in the middle this

00:25:54,060 --> 00:25:59,630
is basically an array there's one array

00:25:56,160 --> 00:26:03,000
for each user and then each user has

00:25:59,630 --> 00:26:04,590
like 10 or 15 different points on the

00:26:03,000 --> 00:26:06,450
user's body and so there's like a right

00:26:04,590 --> 00:26:09,830
elbow in a left elbow and each have a

00:26:06,450 --> 00:26:09,830
XYZ coordinate form

00:26:11,380 --> 00:26:17,050
and that again was I did all this work

00:26:14,300 --> 00:26:20,000
so I could support this type of a model

00:26:17,050 --> 00:26:24,650
and we have time probably for a little

00:26:20,000 --> 00:26:41,540
demo it would help if I didn't unplug

00:26:24,650 --> 00:26:43,160
the monitor so I didn't ask for a

00:26:41,540 --> 00:26:45,590
volunteer but i'm going to make mark

00:26:43,160 --> 00:26:47,090
walk this way towards me there's a

00:26:45,590 --> 00:26:48,910
little status message at the top it says

00:26:47,090 --> 00:26:51,950
it's seeking users out it found him and

00:26:48,910 --> 00:26:53,690
oh so as now it just starts barfing out

00:26:51,950 --> 00:26:55,430
tons and tons and tons of data the

00:26:53,690 --> 00:26:58,580
connects will actually spit stuff out at

00:26:55,430 --> 00:27:05,020
I think 30 frames a second or 60 frames

00:26:58,580 --> 00:27:08,180
a second it's actually do the robot so

00:27:05,020 --> 00:27:15,170
let me let me break out of this and tab

00:27:08,180 --> 00:27:18,640
back over to keynote resuming where we

00:27:15,170 --> 00:27:20,810
left off so what this support is

00:27:18,640 --> 00:27:22,760
participant detection which is like when

00:27:20,810 --> 00:27:24,650
people walk into the frame you can pick

00:27:22,760 --> 00:27:26,330
up quite a few people doing this way it

00:27:24,650 --> 00:27:27,860
only do the joint decomposition for two

00:27:26,330 --> 00:27:31,280
people and that's a that's a limitation

00:27:27,860 --> 00:27:33,860
of the Kinect also we can capture images

00:27:31,280 --> 00:27:35,600
off of those cameras and it has very

00:27:33,860 --> 00:27:39,530
limited gesture recognition for the time

00:27:35,600 --> 00:27:41,870
being and I basically hustled all summer

00:27:39,530 --> 00:27:44,050
to try and get this thing out for

00:27:41,870 --> 00:27:46,610
burning man and as you know they don't

00:27:44,050 --> 00:27:50,120
move the start date for burning man just

00:27:46,610 --> 00:27:51,860
because one art project is late so so

00:27:50,120 --> 00:27:54,050
the code is in a little bit of disarray

00:27:51,860 --> 00:27:55,250
and so the reason I'm doing the

00:27:54,050 --> 00:27:59,780
lightning talk is because i want to ask

00:27:55,250 --> 00:28:01,250
for a little bit of help the about three

00:27:59,780 --> 00:28:04,750
weeks time there's going to be a Dallas

00:28:01,250 --> 00:28:07,190
Ruby hyperlocal hack night on March 19th

00:28:04,750 --> 00:28:08,660
I'm going to pick a spot and bring a

00:28:07,190 --> 00:28:10,310
bunch of gear if people are interested

00:28:08,660 --> 00:28:12,020
in hacking around on this kind of

00:28:10,310 --> 00:28:14,060
project it would be really fun to have

00:28:12,020 --> 00:28:15,500
some other people to work with the

00:28:14,060 --> 00:28:18,710
requirements would be you need to love

00:28:15,500 --> 00:28:21,440
working with cool toys and I appreciate

00:28:18,710 --> 00:28:24,650
finding people who have C++ experience

00:28:21,440 --> 00:28:26,000
working with evented Ruby or folks

00:28:24,650 --> 00:28:28,310
have any kind of animation or game

00:28:26,000 --> 00:28:32,060
programming background or really if you

00:28:28,310 --> 00:28:33,260
just love working with cool toys so that

00:28:32,060 --> 00:28:35,360
event again is going to be the next

00:28:33,260 --> 00:28:38,930
hyperlocal hack night it'll be Tuesday

00:28:35,360 --> 00:28:40,640
March 19th and my email address is up

00:28:38,930 --> 00:28:42,560
here this is a reference to the github

00:28:40,640 --> 00:28:50,360
project or you can just kind of find me

00:28:42,560 --> 00:28:53,570
in the hallway and I finished early hi

00:28:50,360 --> 00:28:57,670
I'm Chris I work for livingsocial

00:28:53,570 --> 00:29:00,080
assuming dhh hasn't fired me yet you

00:28:57,670 --> 00:29:02,450
might remember me from such other

00:29:00,080 --> 00:29:05,270
lightning talks as the one I gave a few

00:29:02,450 --> 00:29:06,620
minutes y'all have heard of technical

00:29:05,270 --> 00:29:11,540
debt I'm here to talk to you about

00:29:06,620 --> 00:29:14,330
technical intimidation do you know rails

00:29:11,540 --> 00:29:17,180
do you know Sinatra do you know how to

00:29:14,330 --> 00:29:20,000
host a rails engine in Sinatra can you

00:29:17,180 --> 00:29:23,210
program concurrently can you

00:29:20,000 --> 00:29:24,500
asynchronously stream hypermedia I made

00:29:23,210 --> 00:29:26,570
that up I don't know what that image

00:29:24,500 --> 00:29:28,040
means actually I got all these images

00:29:26,570 --> 00:29:29,720
back and cloud mix up there so maybe I

00:29:28,040 --> 00:29:33,350
didn't make it up do you know the

00:29:29,720 --> 00:29:36,140
difference between XSS CSS scss can you

00:29:33,350 --> 00:29:39,200
inject sequel into a cannoli can you

00:29:36,140 --> 00:29:41,090
find closure with your monads again

00:29:39,200 --> 00:29:43,130
google image i don't know why but i

00:29:41,090 --> 00:29:45,890
swear to charlie brown's if you give if

00:29:43,130 --> 00:29:51,130
you do that does anyone anyone

00:29:45,890 --> 00:29:51,130
understand what this is in javascript

00:29:51,490 --> 00:29:57,170
you actually know that they're putting

00:29:53,810 --> 00:29:58,850
javascript on servers now it reminds me

00:29:57,170 --> 00:30:00,440
I have a Kickstarter for hosting Oracle

00:29:58,850 --> 00:30:04,400
in my browser so if you've got any loose

00:30:00,440 --> 00:30:07,850
change let me know does anybody know

00:30:04,400 --> 00:30:09,140
what Adam keys is talking about did you

00:30:07,850 --> 00:30:11,120
know if you take out all the buzz words

00:30:09,140 --> 00:30:15,350
from this what you get is ASCII art of a

00:30:11,120 --> 00:30:17,210
troll face all these phrases I took from

00:30:15,350 --> 00:30:19,370
recent Ruby and JavaScript weekly news

00:30:17,210 --> 00:30:21,680
editions does anyone here know all of

00:30:19,370 --> 00:30:25,060
this you said yes to yourself you're

00:30:21,680 --> 00:30:25,060
lying because I made that one up

00:30:29,180 --> 00:30:33,200
seriously someone very prominent in our

00:30:31,590 --> 00:30:35,400
industry recently put this on their blog

00:30:33,200 --> 00:30:37,530
said I was reluctant to ask a question

00:30:35,400 --> 00:30:40,050
because I wanted to be seen as savvy and

00:30:37,530 --> 00:30:42,120
on the ball I can totally relate to that

00:30:40,050 --> 00:30:44,940
if you can relate to that what Kennebec

00:30:42,120 --> 00:30:46,470
can relate to that as well and it's even

00:30:44,940 --> 00:30:49,260
not necessarily that sometimes it's just

00:30:46,470 --> 00:30:52,170
me and technology and are up late at

00:30:49,260 --> 00:30:53,490
night don't get the wrong idea and I'm

00:30:52,170 --> 00:30:55,830
just leering at it and I'm just thinking

00:30:53,490 --> 00:30:58,530
I just I just I don't know what's gonna

00:30:55,830 --> 00:31:02,160
go on and frankly it's going to leave me

00:30:58,530 --> 00:31:03,630
with this big feeling of shame now there

00:31:02,160 --> 00:31:05,760
are two traits common two people one is

00:31:03,630 --> 00:31:07,530
adaptability the other is shame and when

00:31:05,760 --> 00:31:11,280
you combine these two you get hoarders

00:31:07,530 --> 00:31:12,870
oh it's one thing when you leave that

00:31:11,280 --> 00:31:14,730
out in the open like that but for a lot

00:31:12,870 --> 00:31:17,520
of us we live that way like on our hard

00:31:14,730 --> 00:31:19,500
drives Thank You Glenn or in our minds

00:31:17,520 --> 00:31:20,940
and our hearts and so shame is this

00:31:19,500 --> 00:31:22,590
thing that can drive us to this place

00:31:20,940 --> 00:31:23,970
we're very adaptable so we can figure

00:31:22,590 --> 00:31:25,410
out a way to live there and then shame

00:31:23,970 --> 00:31:28,500
sticks around to make sure we don't

00:31:25,410 --> 00:31:30,030
leave and the result of this is we get a

00:31:28,500 --> 00:31:31,680
lot of these messages that will go in

00:31:30,030 --> 00:31:36,360
and out of our brains all through the

00:31:31,680 --> 00:31:37,770
day maybe not that last one teri

00:31:36,360 --> 00:31:39,000
Weinberg was once asked what do you

00:31:37,770 --> 00:31:40,530
consider the most important thing for

00:31:39,000 --> 00:31:43,500
programmer to do in beginning a new

00:31:40,530 --> 00:31:44,760
project says I think each should be sure

00:31:43,500 --> 00:31:48,000
they are in good physical condition

00:31:44,760 --> 00:31:49,920
whatever without nagging psychological

00:31:48,000 --> 00:31:52,080
problems well these chain messages are

00:31:49,920 --> 00:31:54,510
certainly snagging psychological

00:31:52,080 --> 00:31:56,580
problems and if we can adapt ourselves

00:31:54,510 --> 00:31:58,770
into into bad situations we can adapt

00:31:56,580 --> 00:32:03,330
ourselves out of bad situations so let's

00:31:58,770 --> 00:32:05,490
deal with this software is hard Steve

00:32:03,330 --> 00:32:07,020
McConnell paraphrasing Dykstra says this

00:32:05,490 --> 00:32:08,760
computing is the only profession in

00:32:07,020 --> 00:32:10,680
which a single mind is obliged to span

00:32:08,760 --> 00:32:13,470
the intellectual distance of nine orders

00:32:10,680 --> 00:32:15,450
of magnitude Eric sync and his blog once

00:32:13,470 --> 00:32:17,210
detailed 46 levels of abstraction that

00:32:15,450 --> 00:32:19,320
his dotnet application has to deal with

00:32:17,210 --> 00:32:21,210
raymond chen who's a well-known blogger

00:32:19,320 --> 00:32:23,610
from inside Microsoft wrote on technical

00:32:21,210 --> 00:32:25,830
article on why it's a bad idea to delete

00:32:23,610 --> 00:32:27,570
a critical section whatever that is from

00:32:25,830 --> 00:32:29,370
inside the critical section but after

00:32:27,570 --> 00:32:32,550
this long post finish is it with but

00:32:29,370 --> 00:32:35,670
maybe there's a flaw in my logic good

00:32:32,550 --> 00:32:37,140
design is fractally fractally hard the

00:32:35,670 --> 00:32:38,880
more closely you focus on any given

00:32:37,140 --> 00:32:40,740
feature the more rough edges you find a

00:32:38,880 --> 00:32:42,750
Polish the only sane a pro

00:32:40,740 --> 00:32:44,660
just to iterate until you get to a place

00:32:42,750 --> 00:32:48,450
that you care about and then move on

00:32:44,660 --> 00:32:51,660
let's yawn mix key I'm murdering your

00:32:48,450 --> 00:32:53,940
name but I love your quote NP i recently

00:32:51,660 --> 00:32:55,740
had an article about how hard it is for

00:32:53,940 --> 00:32:58,620
professionals to spot problems they are

00:32:55,740 --> 00:33:00,870
trained to find so if eighty-three

00:32:58,620 --> 00:33:03,390
percent of radiologists cannot see the

00:33:00,870 --> 00:33:05,490
gorillas in this image if Kasparov can

00:33:03,390 --> 00:33:07,920
blunder away his Queen and a game where

00:33:05,490 --> 00:33:09,840
he can see the entire board but I can

00:33:07,920 --> 00:33:12,330
only see two thousandth of a percent of

00:33:09,840 --> 00:33:17,850
my code base at one single time cut me

00:33:12,330 --> 00:33:20,280
some slack but what about all the things

00:33:17,850 --> 00:33:22,559
look you're not going to be able to

00:33:20,280 --> 00:33:24,540
learn all the things and the good news

00:33:22,559 --> 00:33:26,730
is is it doesn't matter at least not to

00:33:24,540 --> 00:33:28,410
people like Martin Fowler given someone

00:33:26,730 --> 00:33:30,270
with broad design skills and someone who

00:33:28,410 --> 00:33:32,070
only knows a platform really well which

00:33:30,270 --> 00:33:33,770
one would you prefer well Martin will

00:33:32,070 --> 00:33:36,570
take the one with broad design skills

00:33:33,770 --> 00:33:38,130
but what about everybody else who really

00:33:36,570 --> 00:33:40,290
does know all the things or at least

00:33:38,130 --> 00:33:41,760
seems to know all the things well the

00:33:40,290 --> 00:33:44,250
trick is don't be intimidated by these

00:33:41,760 --> 00:33:46,559
people learn from them pat metheny

00:33:44,250 --> 00:33:49,080
advice to young musicians is this always

00:33:46,559 --> 00:33:50,670
be the worst in every band you're in if

00:33:49,080 --> 00:33:53,070
you're the best guy there you need to be

00:33:50,670 --> 00:33:54,570
in a different band and will close with

00:33:53,070 --> 00:33:56,700
this quote from Dykstra we shall do a

00:33:54,570 --> 00:33:58,050
much better programming job provided

00:33:56,700 --> 00:33:59,309
that we approach the task with a full

00:33:58,050 --> 00:34:01,559
appreciation of its tremendous

00:33:59,309 --> 00:34:03,240
difficulty provided that we stick to

00:34:01,559 --> 00:34:06,240
modest and elegant programming languages

00:34:03,240 --> 00:34:07,980
Ruby provided that we respect the

00:34:06,240 --> 00:34:10,290
intrinsic limitations of the human mind

00:34:07,980 --> 00:34:13,320
and approach the task as very humble

00:34:10,290 --> 00:34:15,600
programmers one last thing brainy Brown

00:34:13,320 --> 00:34:17,369
has a some wonderful wonderful talks on

00:34:15,600 --> 00:34:19,619
the subject of shame if you just Google

00:34:17,369 --> 00:34:21,179
Ted and shame she has some great TED

00:34:19,619 --> 00:34:23,070
Talks out there check him out do

00:34:21,179 --> 00:34:25,490
yourself a favor that's me on Twitter

00:34:23,070 --> 00:34:25,490
thanks

00:34:40,580 --> 00:34:42,610

YouTube URL: https://www.youtube.com/watch?v=6T3Oa_5mO-g


