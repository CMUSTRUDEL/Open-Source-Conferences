Title: Big Ruby 2013 5 Things You Didn't Know About Chef by Joshua Timberman
Publication date: 2020-01-28
Playlist: Big Ruby 2013
Description: 
	This talk is an exploration into five lesser-known things that Chef can be used for, or is capable of doing. Some of these features and capabilities are unknown by all but the most experienced Chef users. Some of them are anti-patterns but still really useful. And others give you additional flexibility for using Chef in your environment.

In-place File Editing for Greater Good Use Chef's Built-in Version Matching REPLs are fun, so Chef has one! Take the Resource Collection for a Stroll The Anatomy of Loading and Executing a Single Recipe

Help us caption & translate this video!

http://amara.org/v/FGdT/
Captions: 
	00:00:18,920 --> 00:00:27,439
did I need to take off the chef's hoodie

00:00:21,500 --> 00:00:31,590
and change it to my chef t-shirt because

00:00:27,439 --> 00:00:33,180
that thing's warm alright so five things

00:00:31,590 --> 00:00:34,260
you didn't know about chef before I

00:00:33,180 --> 00:00:36,059
start talking about Chef I want to talk

00:00:34,260 --> 00:00:38,970
about myself because this really is all

00:00:36,059 --> 00:00:41,250
about me I'm a technical community

00:00:38,970 --> 00:00:42,900
manager at Opscode really what that

00:00:41,250 --> 00:00:44,760
means is I do a lot of project

00:00:42,900 --> 00:00:47,489
management related to things in our

00:00:44,760 --> 00:00:50,640
community I am a systems administrator

00:00:47,489 --> 00:00:52,650
by background so I'm an ops guy I like

00:00:50,640 --> 00:00:54,330
looking at sparkling graphs of all those

00:00:52,650 --> 00:00:57,299
cool code metrics you just added to your

00:00:54,330 --> 00:00:58,769
application and also getting paged in

00:00:57,299 --> 00:01:01,350
the middle of the night when those code

00:00:58,769 --> 00:01:03,629
win that code you know falls over for

00:01:01,350 --> 00:01:05,640
some reason not the ear code falls over

00:01:03,629 --> 00:01:07,619
that never happens to anybody's code

00:01:05,640 --> 00:01:12,299
here or anybody else's I'm just speaking

00:01:07,619 --> 00:01:16,049
theoretically I work on our open source

00:01:12,299 --> 00:01:18,890
chef cookbooks so if you use chef then

00:01:16,049 --> 00:01:21,720
you may have come across cookbooks and

00:01:18,890 --> 00:01:23,640
if you have used the ones from opscode

00:01:21,720 --> 00:01:26,520
chances are my codes running in your

00:01:23,640 --> 00:01:28,020
production systems sorry I or yeah

00:01:26,520 --> 00:01:29,610
you're welcome depending on how well

00:01:28,020 --> 00:01:31,620
that's worked out for you I like to

00:01:29,610 --> 00:01:33,000
drink coffee and beer I haven't had any

00:01:31,620 --> 00:01:34,230
beer yet so that means I've only drink

00:01:33,000 --> 00:01:38,160
coffee so far so I'm going to talk

00:01:34,230 --> 00:01:39,960
really fast and I apologize for that in

00:01:38,160 --> 00:01:45,000
advance but you know we'll see how this

00:01:39,960 --> 00:01:47,040
works out so who are you who's by trade

00:01:45,000 --> 00:01:50,520
is systems administrator you mainly done

00:01:47,040 --> 00:01:53,280
operations work a couple people maybe

00:01:50,520 --> 00:01:55,080
who's touched systems like logged in and

00:01:53,280 --> 00:01:57,870
done SSH okay cool all right so you

00:01:55,080 --> 00:02:00,150
recognize that prob did did did you ever

00:01:57,870 --> 00:02:04,440
check the RSA fingerprint of your ssh

00:02:00,150 --> 00:02:07,830
keys now I do because I'm weird like

00:02:04,440 --> 00:02:09,929
that who's primarily developer it should

00:02:07,830 --> 00:02:12,840
be like everybody then right whose

00:02:09,929 --> 00:02:14,069
business people I've manager in my title

00:02:12,840 --> 00:02:15,750
that kind of makes me business people

00:02:14,069 --> 00:02:17,250
right if your consultant your business

00:02:15,750 --> 00:02:18,690
people you gotta you know your one-man

00:02:17,250 --> 00:02:21,090
show you got to you know do the

00:02:18,690 --> 00:02:25,560
accounting and the codeine and

00:02:21,090 --> 00:02:27,750
everything else right who's a dev op few

00:02:25,560 --> 00:02:27,960
people are DevOps actually if you listen

00:02:27,750 --> 00:02:31,050
to

00:02:27,960 --> 00:02:33,510
Adam Jacobs talk on the topic DevOps is

00:02:31,050 --> 00:02:35,130
a movement and you can note you can not

00:02:33,510 --> 00:02:37,020
be a dev up any more than you could be a

00:02:35,130 --> 00:02:38,940
hip hop because hip hop is a cultural

00:02:37,020 --> 00:02:43,290
movement but that's neither here nor

00:02:38,940 --> 00:02:47,070
there who's using chef now a few people

00:02:43,290 --> 00:02:48,660
who wishes they were using chef and who

00:02:47,070 --> 00:02:53,970
wanted to hear me talk about Chef vs.

00:02:48,660 --> 00:02:56,820
puppet well sorry so I have 72 slides

00:02:53,970 --> 00:03:00,000
actually 74 I added a couple more after

00:02:56,820 --> 00:03:02,280
I added this one and I did a check i

00:03:00,000 --> 00:03:04,530
have ninety-seven build steps so there's

00:03:02,280 --> 00:03:05,640
a lot of stuff in here I actually go

00:03:04,530 --> 00:03:08,670
through some of these slides fairly

00:03:05,640 --> 00:03:10,830
quickly so let's get started so first of

00:03:08,670 --> 00:03:13,830
all what is chef it's an automation

00:03:10,830 --> 00:03:15,090
platform for developers and systems

00:03:13,830 --> 00:03:19,740
engineers to build and manage

00:03:15,090 --> 00:03:21,390
infrastructure as code what it's a

00:03:19,740 --> 00:03:22,830
technical domain revolving around

00:03:21,390 --> 00:03:24,150
building and managing the infrastructure

00:03:22,830 --> 00:03:27,690
programmatically that's infrastructure

00:03:24,150 --> 00:03:29,610
as code what who doesn't look who

00:03:27,690 --> 00:03:31,500
doesn't like the white duck and nobody

00:03:29,610 --> 00:03:34,170
doesn't like the way everybody lat duck

00:03:31,500 --> 00:03:35,910
so chef is a framework it's a framework

00:03:34,170 --> 00:03:37,800
built to bring you the benefits of

00:03:35,910 --> 00:03:39,180
configuration management across your

00:03:37,800 --> 00:03:41,460
entire infrastructure so we're talking

00:03:39,180 --> 00:03:44,610
fully automated infrastructure soup to

00:03:41,460 --> 00:03:46,170
nuts the whole deal chef's has some

00:03:44,610 --> 00:03:48,000
design principles that are very

00:03:46,170 --> 00:03:50,670
important to understand the first one is

00:03:48,000 --> 00:03:52,290
that it's reasonable you can look at the

00:03:50,670 --> 00:03:54,000
stuff that's in your chef code and

00:03:52,290 --> 00:03:55,830
understand what's going on you can

00:03:54,000 --> 00:03:58,590
reason about it it's got decorative

00:03:55,830 --> 00:04:00,390
syntax is pretty easy easily strung

00:03:58,590 --> 00:04:02,220
together you can make sense of things

00:04:00,390 --> 00:04:04,950
and so when you're trying to fix systems

00:04:02,220 --> 00:04:08,190
at 3am you can reason about it and

00:04:04,950 --> 00:04:10,500
figure out what's going on easier chef

00:04:08,190 --> 00:04:12,570
is idempotent and convergent idempotent

00:04:10,500 --> 00:04:14,850
in this regard is not the mathematic

00:04:12,570 --> 00:04:18,210
pure mathematical sense the word but is

00:04:14,850 --> 00:04:19,890
the the idea that when chef needs when

00:04:18,210 --> 00:04:22,080
chef is configuring a system it only

00:04:19,890 --> 00:04:23,640
takes action if it needs to so if a

00:04:22,080 --> 00:04:25,950
package is already installed chef

00:04:23,640 --> 00:04:28,350
doesn't try and reinstall it but chef is

00:04:25,950 --> 00:04:29,790
convergent so if the package is already

00:04:28,350 --> 00:04:31,770
installed but you told it to upgrade to

00:04:29,790 --> 00:04:34,830
a newer version chef will take care of

00:04:31,770 --> 00:04:38,400
that for you chef is also designed to be

00:04:34,830 --> 00:04:40,020
flexible in the in the world of managing

00:04:38,400 --> 00:04:41,420
systems and infrastructures every

00:04:40,020 --> 00:04:43,940
infrastructure is a unique

00:04:41,420 --> 00:04:45,140
special snowflake even though they're

00:04:43,940 --> 00:04:46,550
all pretty much the same you know you've

00:04:45,140 --> 00:04:48,410
got it back end database and you got a

00:04:46,550 --> 00:04:50,300
queue and you gotta cash and you got a

00:04:48,410 --> 00:04:51,620
web app and you got an iphone app and

00:04:50,300 --> 00:04:54,320
you got a net in any way you've got all

00:04:51,620 --> 00:04:56,930
this stuff but there's all the all the

00:04:54,320 --> 00:04:58,130
little differences that make company's

00:04:56,930 --> 00:04:59,570
unique and their infrastructure is

00:04:58,130 --> 00:05:01,490
unique they bring their own unique set

00:04:59,570 --> 00:05:04,010
of problems and challenges so you need a

00:05:01,490 --> 00:05:05,480
tool like chef that is flexible in

00:05:04,010 --> 00:05:08,360
helping you overcome those challenges

00:05:05,480 --> 00:05:09,980
and so chef is flexible in that it gives

00:05:08,360 --> 00:05:11,690
you a library and a set of primitives

00:05:09,980 --> 00:05:13,700
and some of the things I'm going to talk

00:05:11,690 --> 00:05:16,100
about are using those primitives to

00:05:13,700 --> 00:05:18,440
build up and make the automation

00:05:16,100 --> 00:05:20,390
platform that you need and has he has

00:05:18,440 --> 00:05:21,920
anybody ever been involved in pearl or

00:05:20,390 --> 00:05:25,280
the pearl community and recognize this

00:05:21,920 --> 00:05:27,620
acronym so this is there is more than

00:05:25,280 --> 00:05:29,630
one way to do it the idea that there

00:05:27,620 --> 00:05:32,150
isn't just a single way to write a

00:05:29,630 --> 00:05:33,440
particular bit of code there's 16

00:05:32,150 --> 00:05:36,650
different ways to write a bit of code

00:05:33,440 --> 00:05:38,570
and chef takes this to to infrastructure

00:05:36,650 --> 00:05:40,970
in that every infrastructure is

00:05:38,570 --> 00:05:42,860
different so the best practice for

00:05:40,970 --> 00:05:44,900
managing infrastructure was chef in a

00:05:42,860 --> 00:05:46,340
bank is going to be different than in a

00:05:44,900 --> 00:05:50,080
media company and it's going to be

00:05:46,340 --> 00:05:53,630
different than than a web startup so

00:05:50,080 --> 00:05:55,400
chef takes these together and bills and

00:05:53,630 --> 00:05:58,400
is a framework that embraces these

00:05:55,400 --> 00:06:03,500
principles and it enables infrastructure

00:05:58,400 --> 00:06:06,020
as code so you right chef resources into

00:06:03,500 --> 00:06:08,420
recipes so this is just a recipe for

00:06:06,020 --> 00:06:11,150
installing and managing H a proxy this

00:06:08,420 --> 00:06:13,130
is this decoratives syntax you collect

00:06:11,150 --> 00:06:14,870
all your recipes together into cookbooks

00:06:13,130 --> 00:06:17,810
and you can pose those together with

00:06:14,870 --> 00:06:20,600
roles and you store all this as source

00:06:17,810 --> 00:06:22,010
code in a git repository or subversion

00:06:20,600 --> 00:06:26,450
or bizarre or whatever it is that you

00:06:22,010 --> 00:06:29,840
use and you can manage it from source

00:06:26,450 --> 00:06:31,730
code so now we know all know what chef

00:06:29,840 --> 00:06:33,560
does and we're all experts in the in the

00:06:31,730 --> 00:06:36,830
subject let's talk about some of the

00:06:33,560 --> 00:06:37,940
things on my agenda I'm not going to

00:06:36,830 --> 00:06:39,410
read all these slides because i'm going

00:06:37,940 --> 00:06:41,600
to i have several slides about each one

00:06:39,410 --> 00:06:44,360
of these they've got five I've got five

00:06:41,600 --> 00:06:48,050
topics here and given the amount of time

00:06:44,360 --> 00:06:49,550
I may or may not have the bonus round so

00:06:48,050 --> 00:06:52,760
if we get to it there will be a bonus

00:06:49,550 --> 00:06:54,720
round as well the first topic is in

00:06:52,760 --> 00:06:56,280
place file editing

00:06:54,720 --> 00:06:58,830
for the greater good I'll explain what

00:06:56,280 --> 00:07:01,800
that means here in a moment I just need

00:06:58,830 --> 00:07:04,710
to update this one line in this config

00:07:01,800 --> 00:07:08,070
file buddy recognize what what config

00:07:04,710 --> 00:07:11,370
files in the background there call it

00:07:08,070 --> 00:07:14,880
out if you know it that's right this is

00:07:11,370 --> 00:07:18,870
just default ipv4 and ipv6 settings I

00:07:14,880 --> 00:07:21,330
couldn't get an example that had a good

00:07:18,870 --> 00:07:23,340
mix of other tuning but anyway maybe you

00:07:21,330 --> 00:07:26,100
know you wanted to modify that one right

00:07:23,340 --> 00:07:27,330
up there tcp syn ack retries right so

00:07:26,100 --> 00:07:29,760
that's the only one you actually care

00:07:27,330 --> 00:07:32,340
about in all of the CTL I just need to

00:07:29,760 --> 00:07:34,050
update that one line or maybe you're a

00:07:32,340 --> 00:07:36,510
PHP developer or you have to maintain a

00:07:34,050 --> 00:07:39,270
legacy PHP app and you need to update

00:07:36,510 --> 00:07:44,040
the ini file to point to one directive

00:07:39,270 --> 00:07:46,320
right there's a danger in this and some

00:07:44,040 --> 00:07:49,550
would call it an anti-pattern I prefer

00:07:46,320 --> 00:07:54,510
to call them alternate implementations

00:07:49,550 --> 00:07:56,340
the the danger here is that well it

00:07:54,510 --> 00:07:59,130
makes it hard to reason about managing

00:07:56,340 --> 00:08:01,080
this file if I've got sis CTL that that

00:07:59,130 --> 00:08:03,210
has all these various configuration

00:08:01,080 --> 00:08:05,460
settings and my app needs to change just

00:08:03,210 --> 00:08:06,930
this one line but what is somebody

00:08:05,460 --> 00:08:09,180
else's app that's going to run on the

00:08:06,930 --> 00:08:11,040
system needs to change another line well

00:08:09,180 --> 00:08:13,229
now we've got two potential places where

00:08:11,040 --> 00:08:16,890
we're making edits to the same file so

00:08:13,229 --> 00:08:18,510
there's a danger in that generally what

00:08:16,890 --> 00:08:20,370
we recommend is that you manage the

00:08:18,510 --> 00:08:21,990
whole file chef has a number of

00:08:20,370 --> 00:08:24,300
resources for managing files like

00:08:21,990 --> 00:08:27,690
templates cookbook files remote files

00:08:24,300 --> 00:08:29,190
etc that manage the full content of the

00:08:27,690 --> 00:08:31,979
file so you can render out a template

00:08:29,190 --> 00:08:34,229
like we saw earlier with the ARB puppet

00:08:31,979 --> 00:08:38,669
example there's similar functionality

00:08:34,229 --> 00:08:42,659
and chef so we recommend doing it that

00:08:38,669 --> 00:08:45,270
way but sometimes you really just have

00:08:42,659 --> 00:08:48,540
to modify a single line in a single file

00:08:45,270 --> 00:08:51,570
a common example of this is modifying

00:08:48,540 --> 00:08:54,630
etsy hosts so chef has a ruby block

00:08:51,570 --> 00:08:58,170
resource and we can just stick some Ruby

00:08:54,630 --> 00:09:00,480
code in there and be awesome the heart

00:08:58,170 --> 00:09:02,310
of it is this class that's it built into

00:09:00,480 --> 00:09:04,250
chef that's not widely documented

00:09:02,310 --> 00:09:08,370
because we consider this to be a

00:09:04,250 --> 00:09:10,410
implementation we'd prefer not to use

00:09:08,370 --> 00:09:12,990
we're going to use chef util file edit

00:09:10,410 --> 00:09:15,150
we're going to pass in the argument of

00:09:12,990 --> 00:09:18,450
the path to the file that we're going to

00:09:15,150 --> 00:09:20,790
manage and then we're going to send the

00:09:18,450 --> 00:09:22,860
appropriate file edit method to that

00:09:20,790 --> 00:09:25,560
object and it's going to take the

00:09:22,860 --> 00:09:27,360
arguments the first argument is in this

00:09:25,560 --> 00:09:29,910
particular method is a regular

00:09:27,360 --> 00:09:31,620
expression and then the second argument

00:09:29,910 --> 00:09:34,710
is the new string that we're going to

00:09:31,620 --> 00:09:37,529
put into the file so when we process

00:09:34,710 --> 00:09:39,660
this when chef processes this code it's

00:09:37,529 --> 00:09:42,210
going to look at Etsy hosts and it's

00:09:39,660 --> 00:09:44,460
going to replace the local hosts entry

00:09:42,210 --> 00:09:47,120
with the new fully qualified domain name

00:09:44,460 --> 00:09:50,160
and new host name that we've set for

00:09:47,120 --> 00:09:53,490
localhost and then finally it writes the

00:09:50,160 --> 00:09:55,080
file to disk so this is a chef resource

00:09:53,490 --> 00:09:56,760
we haven't done anything to ensure that

00:09:55,080 --> 00:09:59,120
this is going to be idempotent so every

00:09:56,760 --> 00:10:01,200
time chef runs it's going to do this

00:09:59,120 --> 00:10:03,390
hopefully our regular expression is

00:10:01,200 --> 00:10:05,510
correct and we didn't introduce two new

00:10:03,390 --> 00:10:08,820
problems by using a regular expression

00:10:05,510 --> 00:10:11,010
and hopefully that that line of text is

00:10:08,820 --> 00:10:12,779
going to be is going to end up being

00:10:11,010 --> 00:10:15,390
correct we could put a guard in there

00:10:12,779 --> 00:10:18,900
that says do don't do this if it already

00:10:15,390 --> 00:10:20,190
exists search file replace line has a

00:10:18,900 --> 00:10:24,990
little bit of that in there we're using

00:10:20,190 --> 00:10:27,290
the regular expression chef util file

00:10:24,990 --> 00:10:29,670
edit has several other methods their

00:10:27,290 --> 00:10:31,290
glory and hard to read and if you're in

00:10:29,670 --> 00:10:32,520
the back in the cave where the lights

00:10:31,290 --> 00:10:36,900
aren't on you I don't know if you can

00:10:32,520 --> 00:10:39,630
see all the text on here the main ones

00:10:36,900 --> 00:10:41,970
that we use search file replace line

00:10:39,630 --> 00:10:43,230
which is the one we just saw where we

00:10:41,970 --> 00:10:45,300
give it a regular expression in a new

00:10:43,230 --> 00:10:48,810
line that's pretty straightforward then

00:10:45,300 --> 00:10:50,970
there's also search file under place and

00:10:48,810 --> 00:10:53,190
that's going to replace all occurrences

00:10:50,970 --> 00:10:57,330
of the regular expression with the text

00:10:53,190 --> 00:10:59,910
to replace the other ones aren't used as

00:10:57,330 --> 00:11:02,490
commonly but then there's also insert

00:10:59,910 --> 00:11:05,430
line if no match so this is a pending a

00:11:02,490 --> 00:11:06,930
line at the end of the file if we didn't

00:11:05,430 --> 00:11:08,610
have that in there so if we wanted to

00:11:06,930 --> 00:11:11,070
make sure that a config setting was in a

00:11:08,610 --> 00:11:12,930
file then we would use that method and

00:11:11,070 --> 00:11:14,580
then of course there's the right file

00:11:12,930 --> 00:11:16,860
method because it wouldn't do any good

00:11:14,580 --> 00:11:19,190
to do all this text replacement without

00:11:16,860 --> 00:11:21,960
actually writing the file content out

00:11:19,190 --> 00:11:24,360
Shawn Romero one of ops codes

00:11:21,960 --> 00:11:26,520
Consultants wrote a cookbook called line

00:11:24,360 --> 00:11:29,130
that gives you a resource and provider

00:11:26,520 --> 00:11:31,110
for managing single lines we hadn't done

00:11:29,130 --> 00:11:33,450
this up until this point up until he

00:11:31,110 --> 00:11:35,250
wrote this because like I said we see

00:11:33,450 --> 00:11:38,310
this is kind of an anti-pattern but as

00:11:35,250 --> 00:11:40,230
we as we see chef you used and adopted

00:11:38,310 --> 00:11:42,540
by more and more organizations we're

00:11:40,230 --> 00:11:44,790
seeing different implementations and

00:11:42,540 --> 00:11:47,670
things that they want to pain points

00:11:44,790 --> 00:11:49,620
that they want to use chef to replace so

00:11:47,670 --> 00:11:50,400
this is one of those pain points that

00:11:49,620 --> 00:11:52,710
they're that they're encountering

00:11:50,400 --> 00:11:55,410
they've got the that monolithic huge

00:11:52,710 --> 00:11:56,850
config file for some application that

00:11:55,410 --> 00:11:58,110
all they need to do is just update this

00:11:56,850 --> 00:12:00,630
one line for the new way they're

00:11:58,110 --> 00:12:04,380
deploying or whatever it is and if you

00:12:00,630 --> 00:12:05,910
go to c kb ki t / line that'll take you

00:12:04,380 --> 00:12:07,800
to the chef community site where you can

00:12:05,910 --> 00:12:11,820
download that cookbook and check it out

00:12:07,800 --> 00:12:14,070
on to the next topic number two using

00:12:11,820 --> 00:12:15,510
chefs built-in version matching when

00:12:14,070 --> 00:12:16,890
we're working with infrastructure and

00:12:15,510 --> 00:12:19,190
managing software there's a bunch of

00:12:16,890 --> 00:12:21,000
places where we want to match versions

00:12:19,190 --> 00:12:25,040
platforms all have different versions

00:12:21,000 --> 00:12:27,930
which can be fun or it could be fun

00:12:25,040 --> 00:12:29,970
cookbooks have different versions so

00:12:27,930 --> 00:12:32,460
when you're using chef cookbooks are

00:12:29,970 --> 00:12:34,200
bundles of code and when you have

00:12:32,460 --> 00:12:36,750
bundles of code you usually want to have

00:12:34,200 --> 00:12:38,160
them packaged in some way and given give

00:12:36,750 --> 00:12:39,900
them a version so you know which

00:12:38,160 --> 00:12:42,870
particular when you're working with

00:12:39,900 --> 00:12:45,330
which iteration right and then of course

00:12:42,870 --> 00:12:48,470
there's software and other packages that

00:12:45,330 --> 00:12:51,390
you may be managing that has versions

00:12:48,470 --> 00:12:54,780
this particular library came about when

00:12:51,390 --> 00:12:57,750
we added a version constraint support

00:12:54,780 --> 00:13:00,720
for chef environments in chef version 0

00:12:57,750 --> 00:13:04,140
10 in order to match cookbook versions

00:13:00,720 --> 00:13:06,330
and so that's where it came from but it

00:13:04,140 --> 00:13:09,840
has more uses than just internally

00:13:06,330 --> 00:13:12,600
inside of chef the version constraint

00:13:09,840 --> 00:13:14,310
class can match versions that are dotted

00:13:12,600 --> 00:13:20,190
dotted notation up to three places so

00:13:14,310 --> 00:13:23,280
XYZ you can do five dot 610 180 it

00:13:20,190 --> 00:13:29,430
doesn't support alfin alphabetic

00:13:23,280 --> 00:13:31,650
versions like 100 dev or dash RC dot one

00:13:29,430 --> 00:13:34,950
or anything like that but you can use it

00:13:31,650 --> 00:13:37,770
for things like OS platforms

00:13:34,950 --> 00:13:41,820
cookbook versions and most software does

00:13:37,770 --> 00:13:45,450
follow the numeric only 33 dotted

00:13:41,820 --> 00:13:48,180
notation most common examples that I

00:13:45,450 --> 00:13:50,250
found when I was implementing this was

00:13:48,180 --> 00:13:52,740
for version matching I wanted to see if

00:13:50,250 --> 00:13:55,560
the version of ubuntu Amon is greater

00:13:52,740 --> 00:13:57,570
than 1004 because greater than or equal

00:13:55,560 --> 00:13:59,340
to 10 04 because I know that that

00:13:57,570 --> 00:14:02,280
particular version introduced new

00:13:59,340 --> 00:14:03,750
features in the OS or new new different

00:14:02,280 --> 00:14:06,960
patterns within the software that I'm

00:14:03,750 --> 00:14:09,390
managing or I can check for versions are

00:14:06,960 --> 00:14:12,420
equal to six dot 3 because I'm maybe I'm

00:14:09,390 --> 00:14:14,570
using centos 63 and there was a change

00:14:12,420 --> 00:14:17,070
in six dot for to some particular

00:14:14,570 --> 00:14:18,720
application or make sure that that my

00:14:17,070 --> 00:14:22,110
version is correct before I try and

00:14:18,720 --> 00:14:24,240
modify that application so the version

00:14:22,110 --> 00:14:27,090
constraint chef version constraint class

00:14:24,240 --> 00:14:29,640
does first class comparison operators

00:14:27,090 --> 00:14:33,090
I'll allowing these version strings and

00:14:29,640 --> 00:14:36,330
it's not la see unlike potentially to I

00:14:33,090 --> 00:14:39,180
or to F in the earlier slide i did a dot

00:14:36,330 --> 00:14:42,840
to F on it changing it to a floating

00:14:39,180 --> 00:14:45,330
point number but if I took a 603 I

00:14:42,840 --> 00:14:48,200
dropped that that three and I could

00:14:45,330 --> 00:14:52,380
potentially not get the exact version

00:14:48,200 --> 00:14:54,330
match that I wanted the documentation

00:14:52,380 --> 00:14:56,190
for this is on the documentation site so

00:14:54,330 --> 00:14:59,730
there's all kinds of additional

00:14:56,190 --> 00:15:02,100
information about this there so how to

00:14:59,730 --> 00:15:04,260
use it well you require the library then

00:15:02,100 --> 00:15:06,720
you initialize an object passing in the

00:15:04,260 --> 00:15:10,140
constraint as the first argument and

00:15:06,720 --> 00:15:11,610
then you send the include ? predicate

00:15:10,140 --> 00:15:14,100
method with the version you want to

00:15:11,610 --> 00:15:16,290
match the constraint operators this

00:15:14,100 --> 00:15:18,450
should look familiar to people who are

00:15:16,290 --> 00:15:20,100
you use pretty much any version

00:15:18,450 --> 00:15:23,100
constraint matching system such as

00:15:20,100 --> 00:15:25,290
rubygems we've got equal greater than

00:15:23,100 --> 00:15:27,540
less than greater than or equal to less

00:15:25,290 --> 00:15:30,600
than or equal to I think in some cases

00:15:27,540 --> 00:15:32,340
this might be swapped if you cut if

00:15:30,600 --> 00:15:34,500
you're using rubygems I believe that's

00:15:32,340 --> 00:15:36,390
swapped around we did it this way

00:15:34,500 --> 00:15:38,640
because it lined up with the greater

00:15:36,390 --> 00:15:40,890
than equal to and then there's

00:15:38,640 --> 00:15:43,770
approximately greater than the

00:15:40,890 --> 00:15:45,900
pessimistic operator for matching you

00:15:43,770 --> 00:15:47,010
know if you don't want to get patch

00:15:45,900 --> 00:15:48,750
releases or if you don't want to get

00:15:47,010 --> 00:15:50,370
feature releases

00:15:48,750 --> 00:15:53,910
assuming that things are following

00:15:50,370 --> 00:15:56,670
semantic versioning so chef version

00:15:53,910 --> 00:15:59,250
constraint here's some code we require

00:15:56,670 --> 00:16:02,100
chef version constraint and then I've

00:15:59,250 --> 00:16:05,760
got three different comparisons I'm on

00:16:02,100 --> 00:16:07,560
an OS 10 system and I'm going to check

00:16:05,760 --> 00:16:12,870
if my platform is greater than or equal

00:16:07,560 --> 00:16:15,600
to 10 7 or lion on 10 dot 6 on my snow

00:16:12,870 --> 00:16:17,700
leopard system it's false if I'm on a

00:16:15,600 --> 00:16:21,230
lion system that's at the point 3

00:16:17,700 --> 00:16:23,430
release then it's true and if it's on

00:16:21,230 --> 00:16:28,170
mountain lion because mountain lions are

00:16:23,430 --> 00:16:31,980
Cougars then that's also true we can

00:16:28,170 --> 00:16:34,650
also use any node attribute that might

00:16:31,980 --> 00:16:37,230
have that kind of string a version

00:16:34,650 --> 00:16:39,840
string so nodes platform version has a

00:16:37,230 --> 00:16:42,450
string so if I'm on a centos 5 8 system

00:16:39,840 --> 00:16:45,500
node platform versions going to be 58

00:16:42,450 --> 00:16:50,760
and it doesn't meet the pessimistic

00:16:45,500 --> 00:16:52,560
greater than six point 0 but 63 does so

00:16:50,760 --> 00:16:53,970
fairly straightforward just a couple

00:16:52,560 --> 00:16:57,830
lines of code to get some pretty neat

00:16:53,970 --> 00:17:06,689
version comparison if we're on debian

00:16:57,830 --> 00:17:09,780
603 and we dot 2f that we get 60 is the

00:17:06,689 --> 00:17:12,720
result right so if we it just drops the

00:17:09,780 --> 00:17:15,930
dot 3 and then that returns true and

00:17:12,720 --> 00:17:17,220
that may be what we want or if we're

00:17:15,930 --> 00:17:21,390
going to do a comparison if it's less

00:17:17,220 --> 00:17:27,510
than or greater than in well 60 is it is

00:17:21,390 --> 00:17:31,950
less than 60 top three but when we drop

00:17:27,510 --> 00:17:36,410
the 03 it isn't because it's 60 it's

00:17:31,950 --> 00:17:39,060
equal to so that actually returns false

00:17:36,410 --> 00:17:42,420
similarly when we track check to see if

00:17:39,060 --> 00:17:45,900
it's greater than and 60 23 is greater

00:17:42,420 --> 00:17:48,840
than 60 but when we drop that it isn't

00:17:45,900 --> 00:17:53,190
it's equal to right so chef version

00:17:48,840 --> 00:17:56,220
constraint to the rescue check to see if

00:17:53,190 --> 00:18:00,810
is greater than 60 does it include that

00:17:56,220 --> 00:18:02,250
it sure does and Bob's your uncle that's

00:18:00,810 --> 00:18:03,870
all I have to say about Shepherd

00:18:02,250 --> 00:18:06,210
constraint it's pretty pretty

00:18:03,870 --> 00:18:09,840
straightforward it's a few more lines of

00:18:06,210 --> 00:18:12,420
code then dot to underscore F but you

00:18:09,840 --> 00:18:17,400
know it's a little more easy to reason

00:18:12,420 --> 00:18:30,000
about this is my cue to take a drink of

00:18:17,400 --> 00:18:33,060
water who likes rebels rebels are

00:18:30,000 --> 00:18:37,530
awesome who's used IRB you've used a

00:18:33,060 --> 00:18:40,590
rebel right who hasn't used IRB a couple

00:18:37,530 --> 00:18:42,300
of people you showed us neat so rebels

00:18:40,590 --> 00:18:43,830
are handy especially when you're

00:18:42,300 --> 00:18:46,770
debugging your code and trying to

00:18:43,830 --> 00:18:51,720
understand how things are going about so

00:18:46,770 --> 00:18:54,630
chef has a rebel and in chef 11 that

00:18:51,720 --> 00:18:59,850
repple is called chef shell in chef 10

00:18:54,630 --> 00:19:02,550
and earlier it's called chef kind of see

00:18:59,850 --> 00:19:05,040
why there was a name change here the

00:19:02,550 --> 00:19:08,160
also known as the unfortunately named

00:19:05,040 --> 00:19:10,220
chef with an S it's great when you're

00:19:08,160 --> 00:19:13,680
typing it if that fits that four-letter

00:19:10,220 --> 00:19:16,230
UNIX command model but it doesn't fit

00:19:13,680 --> 00:19:19,230
the phonetic pronunciation in English

00:19:16,230 --> 00:19:22,290
model very well chef shell is built on

00:19:19,230 --> 00:19:25,290
IRB so it's really just running IRB with

00:19:22,290 --> 00:19:27,870
some chef stuff loaded in and it has 3

00:19:25,290 --> 00:19:30,540
modes or what we call context there's

00:19:27,870 --> 00:19:33,000
the main mode the attributes and recipe

00:19:30,540 --> 00:19:35,670
modes so first of all is the main mode

00:19:33,000 --> 00:19:37,380
or the main context this is generally

00:19:35,670 --> 00:19:39,690
used if you want to access node

00:19:37,380 --> 00:19:41,310
attributes you can poke around and see

00:19:39,690 --> 00:19:43,170
what attributes are available you can

00:19:41,310 --> 00:19:45,020
play with the chef node object that's

00:19:43,170 --> 00:19:47,610
kind of neat but then there's a bunch of

00:19:45,020 --> 00:19:50,280
methods that are available in this mode

00:19:47,610 --> 00:19:53,730
that allow you to interact with the chef

00:19:50,280 --> 00:19:56,610
server so it's IRB with all the chef's

00:19:53,730 --> 00:19:58,890
stuff loaded up so let's fire up chef

00:19:56,610 --> 00:20:00,300
shell this is my live demo I've learned

00:19:58,890 --> 00:20:02,820
my lesson don't run the live demos

00:20:00,300 --> 00:20:05,460
unless you're Jim wyrick because he does

00:20:02,820 --> 00:20:07,740
great live demos so I fired up chef

00:20:05,460 --> 00:20:10,380
shell it prints out some information i'm

00:20:07,740 --> 00:20:12,810
using chef 11 2 and so on and then down

00:20:10,380 --> 00:20:14,700
here at the bottom I have a chef prompt

00:20:12,810 --> 00:20:15,030
this indicating that I'm in the main

00:20:14,700 --> 00:20:20,160
call

00:20:15,030 --> 00:20:25,800
text from here I can get help I can do

00:20:20,160 --> 00:20:28,040
help oh I my witty and a wonderful thing

00:20:25,800 --> 00:20:30,750
didn't get typed you can also type how H

00:20:28,040 --> 00:20:37,320
ALP and it will return the same thing

00:20:30,750 --> 00:20:39,060
because internet memes are funny so

00:20:37,320 --> 00:20:40,860
there's a lot of commands and they all

00:20:39,060 --> 00:20:42,120
have descriptions there's things like

00:20:40,860 --> 00:20:44,460
being able to interact with the chef

00:20:42,120 --> 00:20:47,100
server there's a few others and include

00:20:44,460 --> 00:20:49,320
this includes the commands to switch you

00:20:47,100 --> 00:20:51,780
into the other modes so in the main

00:20:49,320 --> 00:20:54,060
context many of these commands that are

00:20:51,780 --> 00:20:55,680
available for working with the API like

00:20:54,060 --> 00:20:58,350
hitting the nodes endpoint to be able to

00:20:55,680 --> 00:21:00,000
query all of your nose or the clients

00:20:58,350 --> 00:21:02,430
endpoint or working with data bags and

00:21:00,000 --> 00:21:04,170
that sort of thing but this only works

00:21:02,430 --> 00:21:06,930
if you're configured to use a chef

00:21:04,170 --> 00:21:10,800
server so let's restart chef shell with

00:21:06,930 --> 00:21:13,860
a chef client configuration so if you

00:21:10,800 --> 00:21:15,900
use chef shell dash Z or dash that if

00:21:13,860 --> 00:21:18,780
you're in the UK then it will

00:21:15,900 --> 00:21:20,370
automatically load up as the chef client

00:21:18,780 --> 00:21:22,410
Darby you can pass in a configuration

00:21:20,370 --> 00:21:26,160
file to use as well with the dash C

00:21:22,410 --> 00:21:29,520
option and then I can enter chef double

00:21:26,160 --> 00:21:33,150
colon config and then give it the chef

00:21:29,520 --> 00:21:34,890
server URL this is a hash like object

00:21:33,150 --> 00:21:36,600
that has all your configuration and we

00:21:34,890 --> 00:21:41,010
can see that I'm connected to the

00:21:36,600 --> 00:21:43,380
Opscode hosted chef server and then I

00:21:41,010 --> 00:21:45,740
can get that I can get information about

00:21:43,380 --> 00:21:48,060
the node like it's run list and then

00:21:45,740 --> 00:21:50,220
given that i have this run list and it

00:21:48,060 --> 00:21:52,320
knows about this node object i can talk

00:21:50,220 --> 00:21:55,800
to the chef server and find out which

00:21:52,320 --> 00:21:57,570
cookbooks I need to get I can I could

00:21:55,800 --> 00:22:00,300
download those cookbooks automatically

00:21:57,570 --> 00:22:02,940
within the chef shell and be able to see

00:22:00,300 --> 00:22:04,170
how I could debug if there's a problem

00:22:02,940 --> 00:22:08,550
going on or if I want to find out how

00:22:04,170 --> 00:22:11,220
something works the attributes mode is

00:22:08,550 --> 00:22:13,080
in the context of a cookbook attributes

00:22:11,220 --> 00:22:15,060
file how many people have worked with

00:22:13,080 --> 00:22:17,520
chef and our familiar with attributes

00:22:15,060 --> 00:22:20,430
files a few people this is where you set

00:22:17,520 --> 00:22:22,470
up cookbook specific information like

00:22:20,430 --> 00:22:24,540
which port apache should listen on or

00:22:22,470 --> 00:22:27,420
what username should deploy an

00:22:24,540 --> 00:22:28,980
application you can enter the attributes

00:22:27,420 --> 00:22:30,630
mode and it's just like working in

00:22:28,980 --> 00:22:32,610
the same context as a cookbook

00:22:30,630 --> 00:22:33,929
attributes file so this is useful if you

00:22:32,610 --> 00:22:37,169
want to paste content from your

00:22:33,929 --> 00:22:39,000
attributes file into attributes mode and

00:22:37,169 --> 00:22:40,830
then it will load up in the same way

00:22:39,000 --> 00:22:44,480
that chef would if it were doing an

00:22:40,830 --> 00:22:46,770
actual run this follows all the same

00:22:44,480 --> 00:22:50,220
order of operations loading of

00:22:46,770 --> 00:22:53,340
attributes that Chef follows which is

00:22:50,220 --> 00:22:54,960
documented on the documentation site so

00:22:53,340 --> 00:22:56,910
if we start up we've already started up

00:22:54,960 --> 00:23:00,320
our chef shell we go into attributes

00:22:56,910 --> 00:23:03,030
mode and then I use the default method

00:23:00,320 --> 00:23:06,440
default is a node method on the chef

00:23:03,030 --> 00:23:09,270
node object and I'm going to give it a

00:23:06,440 --> 00:23:11,580
key name which is going to be a new

00:23:09,270 --> 00:23:14,700
attribute called chef with an S because

00:23:11,580 --> 00:23:16,950
I thought that would be fun to use the

00:23:14,700 --> 00:23:21,929
old name and then it returns that we got

00:23:16,950 --> 00:23:24,150
fun there and then in in uh in older

00:23:21,929 --> 00:23:28,559
versions of chef than chef 11 you

00:23:24,150 --> 00:23:30,780
couldn't modify the node attribute

00:23:28,559 --> 00:23:33,030
directly you'd have to use one of the

00:23:30,780 --> 00:23:35,850
precedents methods like default in order

00:23:33,030 --> 00:23:38,130
to set the attribute so when I try and

00:23:35,850 --> 00:23:40,410
set when I try and use node chef equals

00:23:38,130 --> 00:23:42,960
awesome town I get an exception that

00:23:40,410 --> 00:23:45,960
says that it's immutable and you have to

00:23:42,960 --> 00:23:50,040
do it like this so instead I do it like

00:23:45,960 --> 00:23:53,370
it says no default chef awesometown and

00:23:50,040 --> 00:23:55,950
now that nodes attribute is is equal to

00:23:53,370 --> 00:23:58,590
awesome town there's no semantic

00:23:55,950 --> 00:24:01,380
difference between no default and

00:23:58,590 --> 00:24:04,440
default in an attributes file or in

00:24:01,380 --> 00:24:07,950
attributes mode it's all done under the

00:24:04,440 --> 00:24:10,440
context of a chef node object well why

00:24:07,950 --> 00:24:12,750
don't you just make it require chef dot

00:24:10,440 --> 00:24:14,580
and then the default in the attributes

00:24:12,750 --> 00:24:16,500
files well it's like there's an

00:24:14,580 --> 00:24:18,510
evolution of a product and we've got you

00:24:16,500 --> 00:24:19,650
know people using a particular way so we

00:24:18,510 --> 00:24:21,600
didn't want to change it and they make

00:24:19,650 --> 00:24:23,429
them rewrite all of their attributes

00:24:21,600 --> 00:24:24,570
files across all of their cookbooks they

00:24:23,429 --> 00:24:26,400
just have to change the ones that are

00:24:24,570 --> 00:24:30,750
trying to do assignment like this which

00:24:26,400 --> 00:24:32,970
should be a smaller number chef shells

00:24:30,750 --> 00:24:34,410
recipe mode is probably the most fun and

00:24:32,970 --> 00:24:36,000
interesting thing because it's just like

00:24:34,410 --> 00:24:38,520
you're using chef when you're writing

00:24:36,000 --> 00:24:40,679
recipes so this is the context of a chef

00:24:38,520 --> 00:24:42,820
recipe it means that all the resources

00:24:40,679 --> 00:24:45,340
and recipe dsl methods

00:24:42,820 --> 00:24:46,809
that are in chef are available and if

00:24:45,340 --> 00:24:49,419
you're using a chef server or if you've

00:24:46,809 --> 00:24:51,669
configured the chef show appropriately

00:24:49,419 --> 00:24:52,710
you can get all of the cookbooks you

00:24:51,669 --> 00:24:55,690
have so if you've written your own

00:24:52,710 --> 00:24:58,149
resources and providers then you can use

00:24:55,690 --> 00:24:59,470
those in the chef shell as well this

00:24:58,149 --> 00:25:01,690
makes it very highly useful for

00:24:59,470 --> 00:25:04,870
debugging just like any good repple

00:25:01,690 --> 00:25:06,580
would and you can run it in client mode

00:25:04,870 --> 00:25:09,220
to interact with a chef server and see

00:25:06,580 --> 00:25:10,450
if if the search in your in your recipe

00:25:09,220 --> 00:25:13,019
is actually going to behave like you

00:25:10,450 --> 00:25:16,269
think it is or you can find out why it

00:25:13,019 --> 00:25:20,110
isn't perhaps so we'll start up our chef

00:25:16,269 --> 00:25:22,269
shell as root in client mode then we'll

00:25:20,110 --> 00:25:24,250
go into recipe mode so recipe underscore

00:25:22,269 --> 00:25:26,769
mode and I'm going to write a couple of

00:25:24,250 --> 00:25:29,440
resources I'm going to have package get

00:25:26,769 --> 00:25:31,750
package Emacs these are going to return

00:25:29,440 --> 00:25:33,909
back the resource objects for that I've

00:25:31,750 --> 00:25:35,289
snipped out all the additional stuff

00:25:33,909 --> 00:25:37,539
because it would make the slide look

00:25:35,289 --> 00:25:40,809
really silly with a bunch of light grey

00:25:37,539 --> 00:25:44,230
text so after I've added these two

00:25:40,809 --> 00:25:46,299
resources in this recipe then if i run

00:25:44,230 --> 00:25:49,179
the resources method this is in the

00:25:46,299 --> 00:25:52,659
recipe dsl and resources returns an

00:25:49,179 --> 00:25:54,399
array of all the resources that chef

00:25:52,659 --> 00:25:56,919
knows about and then if i were to run

00:25:54,399 --> 00:25:58,509
chef on the system since i did this as

00:25:56,919 --> 00:26:00,669
root it would install git and it would

00:25:58,509 --> 00:26:05,440
install Emacs and then i would be happy

00:26:00,669 --> 00:26:07,899
because i like get an emacs if i wanted

00:26:05,440 --> 00:26:10,629
to use search so one of the chef's

00:26:07,899 --> 00:26:12,669
servers best features is this is the

00:26:10,629 --> 00:26:14,409
Search API if I want to use search I

00:26:12,669 --> 00:26:16,360
could search for all the nodes that have

00:26:14,409 --> 00:26:18,549
the role workstation because I manage

00:26:16,360 --> 00:26:20,740
all of my work stations with chef so I

00:26:18,549 --> 00:26:23,200
I'll get back an array of note objects

00:26:20,740 --> 00:26:26,440
doppelbock champagne and Merlot are my

00:26:23,200 --> 00:26:28,120
workstation systems if I wanted to load

00:26:26,440 --> 00:26:31,179
up a data bag item using the database

00:26:28,120 --> 00:26:34,200
API I can load the users data bag in my

00:26:31,179 --> 00:26:38,080
user and then I get a data bag item back

00:26:34,200 --> 00:26:39,250
j Timberman with my groups and a comment

00:26:38,080 --> 00:26:41,889
and there's some other stuff in there

00:26:39,250 --> 00:26:45,850
that I truncated also because slide

00:26:41,889 --> 00:26:48,700
space so the chef shell is a wonderful

00:26:45,850 --> 00:26:50,590
tool that you can use to you can just

00:26:48,700 --> 00:26:53,620
run that and then paste some code in and

00:26:50,590 --> 00:26:56,320
see how it goes and then it also has an

00:26:53,620 --> 00:26:58,330
extension library so I can fire up pry

00:26:56,320 --> 00:27:01,120
so some people use IRB how many people

00:26:58,330 --> 00:27:02,830
are using Prai if you're if you're using

00:27:01,120 --> 00:27:04,330
an IRB and you're not using Prai you

00:27:02,830 --> 00:27:08,789
should use pride because it's prize way

00:27:04,330 --> 00:27:13,690
way cooler than IRB so you fire up pry

00:27:08,789 --> 00:27:15,880
require Chef and chef shell xed so this

00:27:13,690 --> 00:27:18,610
is what this is going to make available

00:27:15,880 --> 00:27:23,559
the chef shells extension library and

00:27:18,610 --> 00:27:26,380
then I do the shell extensions extend

00:27:23,559 --> 00:27:29,320
context object self and then that makes

00:27:26,380 --> 00:27:30,789
available all of the those methods when

00:27:29,320 --> 00:27:33,190
i typed help earlier that list of

00:27:30,789 --> 00:27:35,169
commands those are all now available so

00:27:33,190 --> 00:27:37,419
i can use this in knife plugins i could

00:27:35,169 --> 00:27:39,850
use this in in library i could use this

00:27:37,419 --> 00:27:41,379
in my application in order to talk to

00:27:39,850 --> 00:27:46,919
the chef server get configuration back

00:27:41,379 --> 00:27:46,919
etc here's a picture of some funny cats

00:27:54,010 --> 00:27:58,910
next topic taking the resource

00:27:56,570 --> 00:28:00,950
collection for a stroll what is the

00:27:58,910 --> 00:28:03,860
resource collection well I'm glad you

00:28:00,950 --> 00:28:06,740
asked the resource collection is an

00:28:03,860 --> 00:28:09,770
internal state object that chef creates

00:28:06,740 --> 00:28:11,810
when you write chef recipes and it loads

00:28:09,770 --> 00:28:13,820
those recipes it is looking for

00:28:11,810 --> 00:28:15,920
resources in those recipes and it uses

00:28:13,820 --> 00:28:20,120
the magic of method missing yay method

00:28:15,920 --> 00:28:21,680
missing and each each time it encounters

00:28:20,120 --> 00:28:24,380
a thing that it doesn't know about it

00:28:21,680 --> 00:28:26,090
looked uses method missing it says oh is

00:28:24,380 --> 00:28:28,220
this a resource oh it is I'm going to

00:28:26,090 --> 00:28:30,290
use the the string argument and the

00:28:28,220 --> 00:28:31,970
block argument to create the resource

00:28:30,290 --> 00:28:34,820
and it adds that resource to the

00:28:31,970 --> 00:28:36,710
resource collection then after chef has

00:28:34,820 --> 00:28:39,230
processed all of the recipes for the

00:28:36,710 --> 00:28:41,690
node it walks through the resource

00:28:39,230 --> 00:28:43,760
collection iterating over each of the

00:28:41,690 --> 00:28:46,880
resources and then does whatever it

00:28:43,760 --> 00:28:49,790
needs to do to configure them so let's

00:28:46,880 --> 00:28:52,250
consider this recipe got a package

00:28:49,790 --> 00:28:54,950
apache2 I've got a template for the

00:28:52,250 --> 00:28:58,090
Apache to config file that's going to

00:28:54,950 --> 00:29:01,070
have a few parameters or arguments to it

00:28:58,090 --> 00:29:02,360
then I've got a service apache2 that

00:29:01,070 --> 00:29:07,520
also has some parameters and arguments

00:29:02,360 --> 00:29:10,490
and this this resource has an action

00:29:07,520 --> 00:29:12,950
declared enable and start the other two

00:29:10,490 --> 00:29:14,540
don't if you don't declare an action for

00:29:12,950 --> 00:29:17,870
a resource and chef then the default

00:29:14,540 --> 00:29:19,490
action is used in the case of packages

00:29:17,870 --> 00:29:22,250
and templates packages are would be

00:29:19,490 --> 00:29:24,650
installed and templates would be created

00:29:22,250 --> 00:29:26,720
chef takes the most positive action by

00:29:24,650 --> 00:29:29,300
default but you can always tell it which

00:29:26,720 --> 00:29:31,910
action you'd like to use action differs

00:29:29,300 --> 00:29:33,380
by resource you can find out by firing

00:29:31,910 --> 00:29:36,400
up the chef shell and typing these in

00:29:33,380 --> 00:29:39,080
and seeing the results on your display

00:29:36,400 --> 00:29:40,580
so if i take that recipe and i paste it

00:29:39,080 --> 00:29:43,100
into the chef shell and then I run

00:29:40,580 --> 00:29:45,740
resources then I get this list of

00:29:43,100 --> 00:29:49,520
resources the three that I had so the

00:29:45,740 --> 00:29:51,440
resources returns an array but each one

00:29:49,520 --> 00:29:53,870
of these is included in the resource

00:29:51,440 --> 00:29:55,550
collection the resource collection is a

00:29:53,870 --> 00:29:57,830
resource collection object which is a

00:29:55,550 --> 00:30:00,320
hash like object and each of the

00:29:57,830 --> 00:30:03,890
resources has a type and a name so we've

00:30:00,320 --> 00:30:06,470
got a package type a template type a

00:30:03,890 --> 00:30:09,200
service type we've got an apache to

00:30:06,470 --> 00:30:11,659
for the package at sea apache2 patch to

00:30:09,200 --> 00:30:13,730
comp for the name of the template and a

00:30:11,659 --> 00:30:17,900
service apache2 so i've got three

00:30:13,730 --> 00:30:19,640
resources right when chef runs it

00:30:17,900 --> 00:30:22,850
creates a run context I'll talk about

00:30:19,640 --> 00:30:25,159
that more shortly but this is tracking

00:30:22,850 --> 00:30:26,570
the context of the chef Ron and the

00:30:25,159 --> 00:30:28,789
resource collection is part of the run

00:30:26,570 --> 00:30:29,960
context because it's only during this

00:30:28,789 --> 00:30:32,270
particular run that we have this

00:30:29,960 --> 00:30:34,880
resource collection if you change your

00:30:32,270 --> 00:30:36,020
recipes then you rerun chef you're going

00:30:34,880 --> 00:30:37,580
to have you're probably going to have

00:30:36,020 --> 00:30:39,950
different resources so it's different

00:30:37,580 --> 00:30:42,950
every time so you access the resource

00:30:39,950 --> 00:30:45,620
collection directly by using run context

00:30:42,950 --> 00:30:46,970
dot resource collection so firing up

00:30:45,620 --> 00:30:49,580
chef shell now you see why the chef

00:30:46,970 --> 00:30:51,710
shell is before this one right run

00:30:49,580 --> 00:30:53,330
context resource collection gives me a

00:30:51,710 --> 00:30:56,179
resource collection object with an

00:30:53,330 --> 00:30:58,610
object ID there's a bunch of data in

00:30:56,179 --> 00:31:00,080
there about all the all the things in

00:30:58,610 --> 00:31:01,520
the resource collection the main thing

00:31:00,080 --> 00:31:04,039
that we're looking at here is the rest

00:31:01,520 --> 00:31:06,710
the resources by name so we've got a

00:31:04,039 --> 00:31:08,929
package apache2 a template let's the

00:31:06,710 --> 00:31:10,909
Apache to a patch to cough and a service

00:31:08,929 --> 00:31:14,200
Apache to note that each one of those

00:31:10,909 --> 00:31:16,370
has a numeric index when chef is

00:31:14,200 --> 00:31:18,830
finished processing all of the recipes

00:31:16,370 --> 00:31:22,159
for the resources it iterates over that

00:31:18,830 --> 00:31:24,230
index to deter to in the order that they

00:31:22,159 --> 00:31:26,450
were added to the resource collection to

00:31:24,230 --> 00:31:28,940
configure them in that order because you

00:31:26,450 --> 00:31:30,409
can't start the start you enable and

00:31:28,940 --> 00:31:34,929
start the Apache to service until the

00:31:30,409 --> 00:31:37,760
Apache two packages installed right and

00:31:34,929 --> 00:31:40,789
this is the thing that when you use the

00:31:37,760 --> 00:31:44,690
resources method then it looks up and

00:31:40,789 --> 00:31:49,730
retrieves those pack the key from that

00:31:44,690 --> 00:31:52,039
particular hash so if we use this in a

00:31:49,730 --> 00:31:54,500
recipe I'm going to be sneaky and use

00:31:52,039 --> 00:31:57,230
this in a chef shell recipe mode can do

00:31:54,500 --> 00:31:59,000
run context resource collection each its

00:31:57,230 --> 00:32:03,710
innumerable so I can iterate over each

00:31:59,000 --> 00:32:07,340
of those and say that our is a resource

00:32:03,710 --> 00:32:10,820
name so package apache2 is a package is

00:32:07,340 --> 00:32:12,530
a template and so on I can do other

00:32:10,820 --> 00:32:14,030
things with these resources so there's a

00:32:12,530 --> 00:32:17,000
bunch of other state that's tracked

00:32:14,030 --> 00:32:19,190
inside the resources I can tell I can

00:32:17,000 --> 00:32:19,860
find out all of the package resources

00:32:19,190 --> 00:32:21,570
that are in the

00:32:19,860 --> 00:32:24,360
resource collection and I can make a

00:32:21,570 --> 00:32:25,590
list of that and create an email and say

00:32:24,360 --> 00:32:29,700
that these are all the packages that

00:32:25,590 --> 00:32:32,010
Chef thinks it should manage I can find

00:32:29,700 --> 00:32:35,429
out all the resources that at the end of

00:32:32,010 --> 00:32:37,200
the run have been updated and in some

00:32:35,429 --> 00:32:38,670
way we're changed whether they're file

00:32:37,200 --> 00:32:40,440
mode was changed or our packages

00:32:38,670 --> 00:32:42,750
installed or a services started or

00:32:40,440 --> 00:32:45,809
restarted etc those all get set to be

00:32:42,750 --> 00:32:48,510
updated in their internal object and I

00:32:45,809 --> 00:32:50,400
can grab that information I can also go

00:32:48,510 --> 00:32:52,530
through and modify different things

00:32:50,400 --> 00:32:54,450
based on that so there's a lot of

00:32:52,530 --> 00:32:57,929
flexibility in playing with the resource

00:32:54,450 --> 00:33:00,330
collection next topic is the anatomy and

00:32:57,929 --> 00:33:02,130
loading and executing I met anatomy of

00:33:00,330 --> 00:33:08,760
loading and executing a single recipe

00:33:02,130 --> 00:33:11,160
mmm cupcakes are delicious chef apply is

00:33:08,760 --> 00:33:13,890
a new program that was that's included

00:33:11,160 --> 00:33:16,650
in chef 11 it's available if you install

00:33:13,890 --> 00:33:19,230
these chef packages from Opscode we have

00:33:16,650 --> 00:33:21,210
a slash USR slash bin slash chef apply

00:33:19,230 --> 00:33:23,850
if you're on Windows it's in your

00:33:21,210 --> 00:33:26,070
default path so Windows users rejoice we

00:33:23,850 --> 00:33:27,690
set that up for you this all started

00:33:26,070 --> 00:33:30,120
from a gist written by Dan delaio

00:33:27,690 --> 00:33:32,400
dandeli oza opscode software software

00:33:30,120 --> 00:33:34,140
engineer and developer he has written a

00:33:32,400 --> 00:33:36,620
lot of the client-side code in chef and

00:33:34,140 --> 00:33:39,929
he wrote this gist to illustrate that

00:33:36,620 --> 00:33:42,600
you can run a chef's recipe without

00:33:39,929 --> 00:33:47,429
creating all the ceremony of create

00:33:42,600 --> 00:33:50,220
making a cookbook so then from there

00:33:47,429 --> 00:33:52,820
Bryan berry co-host of the food fight

00:33:50,220 --> 00:33:56,820
show and a member of the community

00:33:52,820 --> 00:33:59,040
created a ticket to add chef apply to

00:33:56,820 --> 00:34:00,690
chef and he added some additional

00:33:59,040 --> 00:34:03,150
features which I'll cover at the end of

00:34:00,690 --> 00:34:06,600
this section so first we're going to

00:34:03,150 --> 00:34:09,179
require the libraries we need we need

00:34:06,600 --> 00:34:12,750
the chef client library and the

00:34:09,179 --> 00:34:15,060
providers and resources then we're going

00:34:12,750 --> 00:34:18,929
to set up the run context so this is any

00:34:15,060 --> 00:34:20,280
all in that gist essentially first thing

00:34:18,929 --> 00:34:22,679
we're going to do is we're going to make

00:34:20,280 --> 00:34:24,659
sure that Chef is in solo mode so chef

00:34:22,679 --> 00:34:26,730
works with a chef server or it can work

00:34:24,659 --> 00:34:28,830
in a standalone or solo mode of

00:34:26,730 --> 00:34:30,210
operation so we're going to make sure

00:34:28,830 --> 00:34:32,909
that it's set to true so we don't try

00:34:30,210 --> 00:34:33,659
and connect to a chef server or some

00:34:32,909 --> 00:34:36,450
weird timeout

00:34:33,659 --> 00:34:38,399
or something like that the next thing we

00:34:36,450 --> 00:34:40,349
do is we create an instance of the chef

00:34:38,399 --> 00:34:42,539
client class so that we're going to

00:34:40,349 --> 00:34:44,250
create that client and the chef client

00:34:42,539 --> 00:34:46,500
class is the thing that keeps track of

00:34:44,250 --> 00:34:47,520
is the main object in the chef run that

00:34:46,500 --> 00:34:50,099
we're going to keep track of all this

00:34:47,520 --> 00:34:51,720
stuff about this particular node that

00:34:50,099 --> 00:34:55,500
we're managing so we're going to build

00:34:51,720 --> 00:34:58,410
the node we give chef node build an

00:34:55,500 --> 00:35:00,450
apply node string that just tells it

00:34:58,410 --> 00:35:02,520
what the nodes name is it doesn't matter

00:35:00,450 --> 00:35:04,109
for all intents and purposes because

00:35:02,520 --> 00:35:05,460
we're not talking to a chef server that

00:35:04,109 --> 00:35:09,450
needs to know what the node name is

00:35:05,460 --> 00:35:13,230
we're just parsing a recipe then we're

00:35:09,450 --> 00:35:16,410
going to tell the client to run oh hi oh

00:35:13,230 --> 00:35:18,930
hi is a data discovery tool that work

00:35:16,410 --> 00:35:20,579
that we use the chef that discovers

00:35:18,930 --> 00:35:22,799
attributes about the node like its IP

00:35:20,579 --> 00:35:25,619
address its platform and the platform

00:35:22,799 --> 00:35:29,730
version and so on then we build the node

00:35:25,619 --> 00:35:32,309
object applying the the attributes to

00:35:29,730 --> 00:35:34,260
the note then we set up the run context

00:35:32,309 --> 00:35:36,180
so we had to do all this ceremony in

00:35:34,260 --> 00:35:39,779
order to do this ceremony so the run

00:35:36,180 --> 00:35:43,170
context takes a node object a cookbook

00:35:39,779 --> 00:35:44,819
collection and the events for the client

00:35:43,170 --> 00:35:46,200
the node object we just talked about

00:35:44,819 --> 00:35:48,569
this is going to have all these

00:35:46,200 --> 00:35:51,029
attributes from ojai the cookbook

00:35:48,569 --> 00:35:52,829
collection is just an empty hash because

00:35:51,029 --> 00:35:54,630
we're not loading any cookbooks we're

00:35:52,829 --> 00:36:00,299
just going to parse this single recipe

00:35:54,630 --> 00:36:02,910
and then events is this all the things

00:36:00,299 --> 00:36:05,309
that have happened in a run such as a

00:36:02,910 --> 00:36:06,599
resource being updated so this is part

00:36:05,309 --> 00:36:08,970
of a feature that came along with our

00:36:06,599 --> 00:36:10,770
output for matters and why run mode

00:36:08,970 --> 00:36:14,130
which I'm not going to talk about but

00:36:10,770 --> 00:36:16,529
I'm going to drop that there but client

00:36:14,130 --> 00:36:20,160
events is required for run context in

00:36:16,529 --> 00:36:23,279
chef 11 so here we're going to load the

00:36:20,160 --> 00:36:28,380
recipe so chef recipe is a class that

00:36:23,279 --> 00:36:30,930
takes the cookbook and the recipe that

00:36:28,380 --> 00:36:33,089
we want to load and then a run context

00:36:30,930 --> 00:36:35,910
if we're using a chef an actual chef

00:36:33,089 --> 00:36:37,920
cookbook with Chef solo or chef client

00:36:35,910 --> 00:36:40,529
that cookbook collection wouldn't be an

00:36:37,920 --> 00:36:42,720
empty and empty hash it would have a

00:36:40,529 --> 00:36:44,789
bunch of cookbooks and recipes that they

00:36:42,720 --> 00:36:47,790
would be passed into chef recipe in

00:36:44,789 --> 00:36:49,500
order to be loaded and then

00:36:47,790 --> 00:36:54,930
once we've created the recipe we can do

00:36:49,500 --> 00:36:58,470
from file and load that recipe then

00:36:54,930 --> 00:37:00,210
we're going to create a of the runner

00:36:58,470 --> 00:37:02,750
and the chef runner is the thing that

00:37:00,210 --> 00:37:06,710
actually runs chef it's the thing that

00:37:02,750 --> 00:37:08,910
that takes that resource collection and

00:37:06,710 --> 00:37:13,730
configures all of those resources on the

00:37:08,910 --> 00:37:16,290
note so if I were to take that three

00:37:13,730 --> 00:37:20,670
retina a resource example from earlier

00:37:16,290 --> 00:37:23,900
and paste that into a file and then run

00:37:20,670 --> 00:37:27,060
chef apply against that file it would

00:37:23,900 --> 00:37:29,550
install the Apache to package it would

00:37:27,060 --> 00:37:31,230
try and configure the template that

00:37:29,550 --> 00:37:32,940
would fail because there isn't a

00:37:31,230 --> 00:37:34,380
cookbook for that templates source file

00:37:32,940 --> 00:37:38,070
to come from but you can you could

00:37:34,380 --> 00:37:40,230
modify that in some way you can tell the

00:37:38,070 --> 00:37:42,510
source that's local on the file system

00:37:40,230 --> 00:37:44,630
you can create that and manage it and

00:37:42,510 --> 00:37:48,330
then it would manage the service so

00:37:44,630 --> 00:37:50,850
that's an easy way to prototype recipes

00:37:48,330 --> 00:37:54,720
and to do quick one-off kinds of things

00:37:50,850 --> 00:37:57,810
you can also use chef apply with

00:37:54,720 --> 00:38:01,440
standard in so in my shell I can do

00:37:57,810 --> 00:38:05,460
while true and i can run netcat on port

00:38:01,440 --> 00:38:08,310
80 787 and I can as root run chef apply

00:38:05,460 --> 00:38:12,480
dash S then I can telnet into that

00:38:08,310 --> 00:38:16,410
system and give it a recipe resources

00:38:12,480 --> 00:38:18,930
whatever I want and then send the telnet

00:38:16,410 --> 00:38:20,400
escape sequences and then that loop

00:38:18,930 --> 00:38:22,860
would apply it and then it would start

00:38:20,400 --> 00:38:24,780
over and you could do it again of course

00:38:22,860 --> 00:38:28,980
never actually put this code never type

00:38:24,780 --> 00:38:30,450
this code into any terminal ever unless

00:38:28,980 --> 00:38:34,020
you're doing it like in a vm but even

00:38:30,450 --> 00:38:37,800
then don't do it there's a lot more to

00:38:34,020 --> 00:38:39,540
chef than what I've talked about there's

00:38:37,800 --> 00:38:42,840
more information about chef we just

00:38:39,540 --> 00:38:44,610
launched learn chef com that's a site

00:38:42,840 --> 00:38:46,410
that has a bunch of quick start guides

00:38:44,610 --> 00:38:49,020
and walkthroughs and that sort of thing

00:38:46,410 --> 00:38:52,500
we're building up use cases and that

00:38:49,020 --> 00:38:55,650
stuff for learn for learn chef we have

00:38:52,500 --> 00:38:58,350
the optic ode installer isn't is a full

00:38:55,650 --> 00:39:01,150
stack installation package of chef we

00:38:58,350 --> 00:39:04,029
have the documentation site the mainland

00:39:01,150 --> 00:39:06,490
list is the main place where people have

00:39:04,029 --> 00:39:07,690
discussion you know there's also IRC we

00:39:06,490 --> 00:39:10,480
have the community site where you can

00:39:07,690 --> 00:39:12,970
download premade cookbooks I'm Joshua at

00:39:10,480 --> 00:39:14,589
Opscode calm and I'm Jay Timberman on

00:39:12,970 --> 00:39:18,359
pretty much anything I can get that user

00:39:14,589 --> 00:39:22,270
ID looks like I got a couple of minutes

00:39:18,359 --> 00:39:25,180
before I wrap up chef conf is coming up

00:39:22,270 --> 00:39:27,609
it's in April get a ten percent discount

00:39:25,180 --> 00:39:29,319
big Ruby so if you want to attend chef

00:39:27,609 --> 00:39:32,789
coffin hang out with a bunch of other

00:39:29,319 --> 00:39:35,260
chef users we've got workshops and

00:39:32,789 --> 00:39:40,390
presentations galore and it's going to

00:39:35,260 --> 00:39:43,480
be awesome so you can go to chef cops go

00:39:40,390 --> 00:39:47,380
calm yeah chef comp tops cocom these big

00:39:43,480 --> 00:39:51,369
Ruby as your ten percent discount might

00:39:47,380 --> 00:39:52,990
have time for a bonus round let me go

00:39:51,369 --> 00:39:54,460
through this this is some frequently

00:39:52,990 --> 00:39:57,579
asked questions so how do you test

00:39:54,460 --> 00:39:59,529
cookbooks well first you attend Nathan's

00:39:57,579 --> 00:40:03,579
talk tomorrow he's going to talk about

00:39:59,529 --> 00:40:07,180
testing chef's 10 14 and above has a why

00:40:03,579 --> 00:40:09,250
run mode that's like no op or dry run we

00:40:07,180 --> 00:40:11,559
have a tool called Test Kitchen that'll

00:40:09,250 --> 00:40:13,299
help there is a tool in the community

00:40:11,559 --> 00:40:15,099
called chef's back there's another one

00:40:13,299 --> 00:40:16,150
called cucumber chef nathan heard you're

00:40:15,099 --> 00:40:20,829
going to talk about some of this stuff

00:40:16,150 --> 00:40:22,450
and more so don't miss that next faq why

00:40:20,829 --> 00:40:23,589
is chef server so hard to install is

00:40:22,450 --> 00:40:25,660
that because you want people to use

00:40:23,589 --> 00:40:26,920
hosted chef in private chef well yes we

00:40:25,660 --> 00:40:29,049
do want people to use hosted chef in

00:40:26,920 --> 00:40:30,339
private chef but it's not because that's

00:40:29,049 --> 00:40:32,460
not why we make the chef server hard to

00:40:30,339 --> 00:40:34,990
install for one thing it isn't anymore

00:40:32,460 --> 00:40:36,460
we have a full stack package that makes

00:40:34,990 --> 00:40:38,740
it back actually very easy to install

00:40:36,460 --> 00:40:42,609
you retrieve the package and you install

00:40:38,740 --> 00:40:44,260
it and boom it's up and running the idea

00:40:42,609 --> 00:40:47,049
of a configuration management system is

00:40:44,260 --> 00:40:50,079
complex it has a database and a search

00:40:47,049 --> 00:40:52,390
engine and an API and all that stuff is

00:40:50,079 --> 00:40:53,950
not trivial to build it's a web

00:40:52,390 --> 00:40:56,170
application just like you have web

00:40:53,950 --> 00:40:58,420
applications or many of you have web

00:40:56,170 --> 00:41:00,309
applications and so you know that

00:40:58,420 --> 00:41:03,369
running a web application is got a lot

00:41:00,309 --> 00:41:05,880
of moving parts so this is the chef

00:41:03,369 --> 00:41:10,839
server is no different so two commands

00:41:05,880 --> 00:41:12,940
bang that was easy and for the question

00:41:10,839 --> 00:41:15,069
who wanted me to talk about Chef vs.

00:41:12,940 --> 00:41:19,859
puppet i'll be at the github drinkup

00:41:15,069 --> 00:41:19,859
up tonight is it thank you

00:41:35,109 --> 00:41:37,170

YouTube URL: https://www.youtube.com/watch?v=FqHucWd634c


