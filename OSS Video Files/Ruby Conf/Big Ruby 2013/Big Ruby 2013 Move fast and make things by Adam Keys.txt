Title: Big Ruby 2013 Move fast and make things by Adam Keys
Publication date: 2020-01-28
Playlist: Big Ruby 2013
Description: 
	Big team, small team. Huge company, tiny side business. No matter which, time is what you're short on. You're already using tools like Ruby and Rails to make more with the time you have. But what about non-web apps? What databases, development tools, and other libraries let you do more or do bigger things in'less time?

Finding high-leverage tools is a handy skill. Once you've found a tool that is simple to use, performant, and reliable, you can use it all over the place. We'll look at four tools: Faraday, Celluloid, Metriks, and Pow. These will help us talk HTTP, write concurrent programs, instrument our apps, and set up apps quickly. We'll see how to use them for multiple applications, play to their strengths, and work around their weaknesses.

Help us caption & translate this video!

http://amara.org/v/FGdS/
Captions: 
	00:00:18,920 --> 00:00:24,450
today I want to talk about moving fast

00:00:21,210 --> 00:00:28,230
and making things we've already heard a

00:00:24,450 --> 00:00:33,000
little a little bit about services and

00:00:28,230 --> 00:00:34,920
other things that you end up doing when

00:00:33,000 --> 00:00:38,309
you reach a point where your application

00:00:34,920 --> 00:00:41,840
is too large it has become unwieldy and

00:00:38,309 --> 00:00:45,210
a lot of people in the community are

00:00:41,840 --> 00:00:47,610
looking for ways to solve large software

00:00:45,210 --> 00:00:51,180
how do we deal with a rails app when it

00:00:47,610 --> 00:00:52,949
becomes really huge what can unit

00:00:51,180 --> 00:00:55,199
testing what can object oriented design

00:00:52,949 --> 00:00:58,019
what can other programming languages

00:00:55,199 --> 00:01:00,690
entirely offer us when we get to the

00:00:58,019 --> 00:01:05,970
point where we have large teams large

00:01:00,690 --> 00:01:07,680
software etc so I want to so I've been

00:01:05,970 --> 00:01:10,380
thinking about that problem and I think

00:01:07,680 --> 00:01:13,409
that in addition to things we can do

00:01:10,380 --> 00:01:17,130
directly with the code there's some

00:01:13,409 --> 00:01:19,710
ideas we can leverage to sort of come at

00:01:17,130 --> 00:01:21,780
that problem from all directions instead

00:01:19,710 --> 00:01:25,800
of just trying to solve it with just

00:01:21,780 --> 00:01:27,810
unit tests or just design techniques so

00:01:25,800 --> 00:01:29,580
part of the problem with large

00:01:27,810 --> 00:01:32,730
applications is because is they become

00:01:29,580 --> 00:01:35,940
time intensive and time is the one thing

00:01:32,730 --> 00:01:38,870
that none of us can produce none of us

00:01:35,940 --> 00:01:41,940
can buy and none of us have enough of

00:01:38,870 --> 00:01:44,400
the real bummer about time is that it is

00:01:41,940 --> 00:01:46,950
broken by design it only ever goes

00:01:44,400 --> 00:01:50,340
forward you can only spend it you can't

00:01:46,950 --> 00:01:54,360
get any more of it and so what we have

00:01:50,340 --> 00:01:56,760
to do is figure out how we can do more

00:01:54,360 --> 00:01:59,130
with what time we do have how can we

00:01:56,760 --> 00:02:02,340
make more programs or get more done with

00:01:59,130 --> 00:02:05,220
our teammates or make more product in

00:02:02,340 --> 00:02:08,220
any given amount of time and we also

00:02:05,220 --> 00:02:11,670
need to figure out how can we do more of

00:02:08,220 --> 00:02:14,760
the right things with our time part so

00:02:11,670 --> 00:02:17,129
working smarter with our time is in part

00:02:14,760 --> 00:02:20,400
about like not checking Facebook all the

00:02:17,129 --> 00:02:22,409
time but also about saying is this thing

00:02:20,400 --> 00:02:25,490
that I'm doing right now high enough

00:02:22,409 --> 00:02:28,080
value for me to keep doing it is

00:02:25,490 --> 00:02:29,910
maintaining a test suite a high

00:02:28,080 --> 00:02:32,400
value thing am I getting benefit out of

00:02:29,910 --> 00:02:34,350
it or maybe I should stop maintaining

00:02:32,400 --> 00:02:38,700
this part of the test suite or this part

00:02:34,350 --> 00:02:41,970
of the code whatever so we want to move

00:02:38,700 --> 00:02:43,230
fast and we want part of that is like

00:02:41,970 --> 00:02:45,180
just feeling like we're getting

00:02:43,230 --> 00:02:49,410
something done feeling like we have busy

00:02:45,180 --> 00:02:52,980
hands that were not you know running in

00:02:49,410 --> 00:02:55,050
sand but part of that the real part of

00:02:52,980 --> 00:02:58,350
it is making more stuff shipping more

00:02:55,050 --> 00:03:00,600
code shipping more product creating more

00:02:58,350 --> 00:03:03,210
product even if that doesn't mean

00:03:00,600 --> 00:03:04,950
shipping code may be deploying

00:03:03,210 --> 00:03:07,709
documentation or writing documentation

00:03:04,950 --> 00:03:10,380
for other programmers there's some unit

00:03:07,709 --> 00:03:13,110
of work something that is useful about

00:03:10,380 --> 00:03:16,200
what you do any given day or any given

00:03:13,110 --> 00:03:18,650
hour to make progress so we want to move

00:03:16,200 --> 00:03:21,600
fast and make more of these things

00:03:18,650 --> 00:03:26,220
another part of moving fast is to reduce

00:03:21,600 --> 00:03:28,560
a huge challenges to things that we know

00:03:26,220 --> 00:03:30,450
how to tackle and that we could actually

00:03:28,560 --> 00:03:33,989
accomplish in a reasonable amount of

00:03:30,450 --> 00:03:36,390
time I'm sure all of you work on your on

00:03:33,989 --> 00:03:39,060
some project or some application

00:03:36,390 --> 00:03:40,800
probably on a daily basis and there are

00:03:39,060 --> 00:03:43,170
pet projects that you would love to take

00:03:40,800 --> 00:03:45,420
on some feature you would love to add

00:03:43,170 --> 00:03:47,250
some refactoring you would like to do

00:03:45,420 --> 00:03:50,820
some performance bottleneck you would

00:03:47,250 --> 00:03:53,190
like to eliminate but it's such a big

00:03:50,820 --> 00:03:55,440
application or such a big problem for

00:03:53,190 --> 00:03:57,000
your product that you don't know how to

00:03:55,440 --> 00:03:59,310
do that in a reasonable amount of time

00:03:57,000 --> 00:04:01,860
you think that it would take weeks or

00:03:59,310 --> 00:04:04,470
months to accomplish it and so you just

00:04:01,860 --> 00:04:07,620
can't end up doing it because you can't

00:04:04,470 --> 00:04:10,080
justify that so part of moving fast is

00:04:07,620 --> 00:04:12,630
to figure out how to reduce those big

00:04:10,080 --> 00:04:14,550
challenges into smaller things that you

00:04:12,630 --> 00:04:17,370
could actually tackle now and get some

00:04:14,550 --> 00:04:20,220
benefit out of and like I alluded to

00:04:17,370 --> 00:04:22,740
before moving fast is also about doing

00:04:20,220 --> 00:04:25,500
the right things so definitely if you're

00:04:22,740 --> 00:04:27,240
trying to meet a deadline or ship some

00:04:25,500 --> 00:04:29,640
code you probably shouldn't be checking

00:04:27,240 --> 00:04:32,640
Twitter or just chatting with people are

00:04:29,640 --> 00:04:34,620
looking at funny gifts but also you

00:04:32,640 --> 00:04:36,300
shouldn't be fighting your tools you

00:04:34,620 --> 00:04:37,979
shouldn't be fighting the code you

00:04:36,300 --> 00:04:41,310
shouldn't be wondering what does this

00:04:37,979 --> 00:04:42,070
code do why is this code here why do I

00:04:41,310 --> 00:04:44,860
have this

00:04:42,070 --> 00:04:47,110
process in my team where after I finish

00:04:44,860 --> 00:04:49,270
a feature I have to squash all of the

00:04:47,110 --> 00:04:50,800
commits down to one commit so I can

00:04:49,270 --> 00:04:52,840
cherry pick it why am i doing these

00:04:50,800 --> 00:04:55,510
things is that the right thing to be

00:04:52,840 --> 00:05:01,240
doing with my time which I cannot get

00:04:55,510 --> 00:05:04,090
any more of so we also want to make

00:05:01,240 --> 00:05:07,000
things we wanted we need to discover and

00:05:04,090 --> 00:05:08,950
solve the risks part of the challenge of

00:05:07,000 --> 00:05:11,290
building software is that there's all

00:05:08,950 --> 00:05:13,240
sorts of uncertainties we don't know how

00:05:11,290 --> 00:05:15,190
long it will take we don't know what

00:05:13,240 --> 00:05:18,310
problems might be lurking what

00:05:15,190 --> 00:05:20,890
complexities might be lurking we don't

00:05:18,310 --> 00:05:23,080
know often where the code is that is

00:05:20,890 --> 00:05:26,710
going to leave us confused and wondering

00:05:23,080 --> 00:05:30,250
why it's there so we need to discover

00:05:26,710 --> 00:05:32,650
these risks and solve them we solve them

00:05:30,250 --> 00:05:34,630
by identifying them and then figuring

00:05:32,650 --> 00:05:38,380
out okay well we can work around this or

00:05:34,630 --> 00:05:40,840
we should schedule time to really solve

00:05:38,380 --> 00:05:43,840
this problem correctly or we figure out

00:05:40,840 --> 00:05:46,030
hey I can just not solve this problem at

00:05:43,840 --> 00:05:48,220
all someone else has solved storing

00:05:46,030 --> 00:05:50,140
credit cards I'll let them handle it I

00:05:48,220 --> 00:05:53,830
won't go through all this pci compliance

00:05:50,140 --> 00:05:55,660
crowd for example we need we want to

00:05:53,830 --> 00:05:59,200
make things we want to add features and

00:05:55,660 --> 00:06:01,630
kill bugs this is what probably everyone

00:05:59,200 --> 00:06:04,120
wants you to do as it in your job as a

00:06:01,630 --> 00:06:06,880
software developer make this thing do

00:06:04,120 --> 00:06:11,110
more things make it not break so often

00:06:06,880 --> 00:06:12,370
make it faster make it better but we

00:06:11,110 --> 00:06:13,810
want to make it better we will make

00:06:12,370 --> 00:06:16,540
things faster want to eliminate

00:06:13,810 --> 00:06:19,870
bottlenecks make things scale better and

00:06:16,540 --> 00:06:23,140
we also want to facilitate change this

00:06:19,870 --> 00:06:25,150
is my way facilitate change I think is a

00:06:23,140 --> 00:06:27,040
better way of saying I need to improve

00:06:25,150 --> 00:06:30,160
this code there's code that I need to

00:06:27,040 --> 00:06:32,320
refer or code that no one understands or

00:06:30,160 --> 00:06:36,040
it's hard for us to change its resisting

00:06:32,320 --> 00:06:38,200
change so I want to change this code

00:06:36,040 --> 00:06:40,420
spend some time changing code so that I

00:06:38,200 --> 00:06:45,070
can facilitate further change down the

00:06:40,420 --> 00:06:48,460
line changing is what software does if a

00:06:45,070 --> 00:06:50,770
problem is not changing all the time

00:06:48,460 --> 00:06:53,350
then you can just make hardware for it

00:06:50,770 --> 00:06:55,419
or you can just ship it and be done but

00:06:53,350 --> 00:06:55,900
most of us probably work on software

00:06:55,419 --> 00:06:58,060
that's been

00:06:55,900 --> 00:07:01,570
around for a long time its profitable

00:06:58,060 --> 00:07:03,790
makes money but needs to do things

00:07:01,570 --> 00:07:07,990
differently and so we need to make more

00:07:03,790 --> 00:07:10,210
things by facilitating change so we want

00:07:07,990 --> 00:07:13,509
to move fast and make things and I think

00:07:10,210 --> 00:07:16,300
the crux of the biscuit the core problem

00:07:13,509 --> 00:07:20,470
with people with with mana rails and

00:07:16,300 --> 00:07:24,310
large businesses large teams is that big

00:07:20,470 --> 00:07:27,130
things have big things are an organism

00:07:24,310 --> 00:07:30,370
and they resist change and so that

00:07:27,130 --> 00:07:33,870
becomes our enemy these big things have

00:07:30,370 --> 00:07:37,150
once and needs a large software

00:07:33,870 --> 00:07:39,850
application once wants you to spend a

00:07:37,150 --> 00:07:43,150
lot of time setting it up Oracle is not

00:07:39,850 --> 00:07:45,310
trivial to get set up for example a

00:07:43,150 --> 00:07:47,919
large code base if you work on a

00:07:45,310 --> 00:07:49,389
monorail you probably know of some part

00:07:47,919 --> 00:07:52,330
of the application that defies

00:07:49,389 --> 00:07:54,820
comprehension every time you modify that

00:07:52,330 --> 00:07:57,160
you have to sit there look at the code

00:07:54,820 --> 00:07:59,470
look at the data load it all into your

00:07:57,160 --> 00:08:03,699
head and then figure out how to actually

00:07:59,470 --> 00:08:07,510
make the change you wanted to but large

00:08:03,699 --> 00:08:09,789
teams beget large processes which have

00:08:07,510 --> 00:08:12,099
their own sorts of wants and needs once

00:08:09,789 --> 00:08:15,400
you have a large team then you start to

00:08:12,099 --> 00:08:19,990
need office managers and HR and payroll

00:08:15,400 --> 00:08:23,320
companies so these as things grow they

00:08:19,990 --> 00:08:25,300
acquire more desires they become this

00:08:23,320 --> 00:08:29,199
organism that has its own wants and

00:08:25,300 --> 00:08:32,380
needs as those it was a human big things

00:08:29,199 --> 00:08:36,099
beget other things big things so if you

00:08:32,380 --> 00:08:37,750
use Oracle then it's likely that

00:08:36,099 --> 00:08:40,330
someone's going to be like hey why don't

00:08:37,750 --> 00:08:44,560
we just use PeopleSoft too and so now

00:08:40,330 --> 00:08:47,440
you have two huge terrible things like I

00:08:44,560 --> 00:08:49,810
said a big team is going to a large

00:08:47,440 --> 00:08:51,850
monolithic software team if you have 20

00:08:49,810 --> 00:08:54,820
people at some point someone's going to

00:08:51,850 --> 00:08:56,709
botch a deploy and then you say oh we

00:08:54,820 --> 00:08:58,510
can never make this happen again what

00:08:56,709 --> 00:09:00,820
rule can we put in place to make this

00:08:58,510 --> 00:09:02,920
never happen again and then you'll have

00:09:00,820 --> 00:09:05,650
some stupid rule thats hanging around

00:09:02,920 --> 00:09:07,839
for a long time so big things are a

00:09:05,650 --> 00:09:09,279
problem because they want to make other

00:09:07,839 --> 00:09:11,439
big things

00:09:09,279 --> 00:09:14,680
and like I said big things resist change

00:09:11,439 --> 00:09:17,980
it's it's just hard to say okay I'm

00:09:14,680 --> 00:09:21,639
going to take this large rock that's a

00:09:17,980 --> 00:09:23,230
large metaphorical rock and move it you

00:09:21,639 --> 00:09:25,660
have to be really strong or have a

00:09:23,230 --> 00:09:27,790
really good plan and a lot of people to

00:09:25,660 --> 00:09:30,610
move that rock whereas it was just 10

00:09:27,790 --> 00:09:35,829
smaller rocks then it would be easy in

00:09:30,610 --> 00:09:38,470
theory right so what we want to do the

00:09:35,829 --> 00:09:41,230
place we want to be we want to set the

00:09:38,470 --> 00:09:43,860
goal to have a lot of small things that

00:09:41,230 --> 00:09:47,680
are disconnected easy to reason about

00:09:43,860 --> 00:09:49,779
and that are our friends small things

00:09:47,680 --> 00:09:52,089
are great because they don't overwhelm

00:09:49,779 --> 00:09:53,860
us you don't look at you don't stare

00:09:52,089 --> 00:09:58,870
into a small thing and have it stare

00:09:53,860 --> 00:10:01,389
back at you you don't you can look at a

00:09:58,870 --> 00:10:04,180
small piece of code and say ah I can see

00:10:01,389 --> 00:10:06,430
what this is doing I can see its

00:10:04,180 --> 00:10:08,110
interactions with other things I can see

00:10:06,430 --> 00:10:10,029
that this is where I might want to

00:10:08,110 --> 00:10:12,759
change it right away if we're a small

00:10:10,029 --> 00:10:14,860
team and we only have four rules about

00:10:12,759 --> 00:10:17,350
how deploys work or one rule about how a

00:10:14,860 --> 00:10:19,569
deploy works or it's all automated then

00:10:17,350 --> 00:10:22,209
that's easier to work with easier to

00:10:19,569 --> 00:10:24,879
understand we don't get so overwhelmed

00:10:22,209 --> 00:10:26,589
that we are tempted to go check our

00:10:24,879 --> 00:10:29,439
email or check our Twitter or go

00:10:26,589 --> 00:10:31,660
complain to one of our co-workers small

00:10:29,439 --> 00:10:33,939
things are loosely held we don't get

00:10:31,660 --> 00:10:37,120
precious about small things if I get

00:10:33,939 --> 00:10:38,800
hand you a golf pencil then you're

00:10:37,120 --> 00:10:40,660
probably then you're likely just be like

00:10:38,800 --> 00:10:42,250
okay i'll write something down and then

00:10:40,660 --> 00:10:44,439
throw it away because it's just a golf

00:10:42,250 --> 00:10:46,480
pencil there's like 20 trillion in the

00:10:44,439 --> 00:10:51,579
world and they cost like a fraction of a

00:10:46,480 --> 00:10:53,470
cent if I hand you a beautiful pin then

00:10:51,579 --> 00:10:55,720
you might keep that around because it's

00:10:53,470 --> 00:10:59,889
a beautiful pin and I gave it to you you

00:10:55,720 --> 00:11:01,509
appreciate that hopefully so if we have

00:10:59,889 --> 00:11:02,980
more small things then we don't have to

00:11:01,509 --> 00:11:05,319
be so precious about them and they don't

00:11:02,980 --> 00:11:09,040
acquire all these wants and needs and

00:11:05,319 --> 00:11:11,559
desires and small things have to adapt

00:11:09,040 --> 00:11:13,600
or else they disappear so if you have a

00:11:11,559 --> 00:11:16,420
small piece of code even if it's not

00:11:13,600 --> 00:11:18,610
terribly well written you can look at it

00:11:16,420 --> 00:11:20,410
and say okay i can understand where i

00:11:18,610 --> 00:11:22,449
need to make this change i'll make this

00:11:20,410 --> 00:11:23,110
change or you want to add a feature to

00:11:22,449 --> 00:11:25,060
it you

00:11:23,110 --> 00:11:27,550
say okay I can add a feature make this

00:11:25,060 --> 00:11:30,430
maybe ten percent bigger and it won't

00:11:27,550 --> 00:11:32,800
end up with a huge and whereas of code I

00:11:30,430 --> 00:11:35,290
can do that quickly if you have a small

00:11:32,800 --> 00:11:37,240
thing and it's just utterly terrible you

00:11:35,290 --> 00:11:39,310
can say okay it would take me a week to

00:11:37,240 --> 00:11:42,610
change this or a week to rewrite it I'll

00:11:39,310 --> 00:11:46,870
just rewrite and that's maybe not a bad

00:11:42,610 --> 00:11:49,000
decision so small things are easier to

00:11:46,870 --> 00:11:51,029
reason about and easier to work with so

00:11:49,000 --> 00:11:54,820
if we can get to the point where we have

00:11:51,029 --> 00:11:59,440
small things loosely joined to use a

00:11:54,820 --> 00:12:02,170
metaphor then we can then we're not

00:11:59,440 --> 00:12:05,800
faced with the the problems that these

00:12:02,170 --> 00:12:11,470
mono mono rail large applications large

00:12:05,800 --> 00:12:13,920
teams etc present to us so I think the

00:12:11,470 --> 00:12:17,769
way we get to having these small things

00:12:13,920 --> 00:12:20,200
is that we have to resist having large

00:12:17,769 --> 00:12:23,920
software and then we can and that helps

00:12:20,200 --> 00:12:27,820
us go faster so we get to a large

00:12:23,920 --> 00:12:31,649
software by divide and conquer we have

00:12:27,820 --> 00:12:35,620
to look at our applications just like a

00:12:31,649 --> 00:12:38,440
Yammer has just like livingsocial does

00:12:35,620 --> 00:12:40,240
github does a lot of people are applying

00:12:38,440 --> 00:12:43,029
this and saying what are the

00:12:40,240 --> 00:12:45,160
applications and services in here that

00:12:43,029 --> 00:12:48,130
want to escape they want to get out and

00:12:45,160 --> 00:12:49,660
be their own thing what are the tools

00:12:48,130 --> 00:12:51,850
that we need to pull out that really

00:12:49,660 --> 00:12:56,470
aren't part of the application that

00:12:51,850 --> 00:12:57,670
should go be its own thing it's it's not

00:12:56,470 --> 00:13:00,550
something that you can just snap your

00:12:57,670 --> 00:13:04,660
finger and get there but neither is you

00:13:00,550 --> 00:13:06,540
know retrofitting a unit test suite or

00:13:04,660 --> 00:13:08,980
retrofitting really strong

00:13:06,540 --> 00:13:10,660
object-oriented design all of these

00:13:08,980 --> 00:13:13,240
things are something we really have to

00:13:10,660 --> 00:13:17,260
resist and sort of like the leftist

00:13:13,240 --> 00:13:20,199
revolutionary meaning and say okay no

00:13:17,260 --> 00:13:21,670
I'm not going to add another feature to

00:13:20,199 --> 00:13:24,190
this thing we're going to start figuring

00:13:21,670 --> 00:13:25,300
out how to break this down and it

00:13:24,190 --> 00:13:28,560
doesn't just apply at the application

00:13:25,300 --> 00:13:31,510
level it's fractal it applies at the

00:13:28,560 --> 00:13:34,029
module level splitting a large

00:13:31,510 --> 00:13:36,880
application up into two concerns that's

00:13:34,029 --> 00:13:38,950
still within live within one application

00:13:36,880 --> 00:13:41,560
got users and payments in there two

00:13:38,950 --> 00:13:43,690
separate worlds you have a class that's

00:13:41,560 --> 00:13:49,840
too long start splitting out a class a

00:13:43,690 --> 00:13:52,330
method etc another thing that is worth

00:13:49,840 --> 00:13:55,300
resisting is large tools there are tools

00:13:52,330 --> 00:13:58,120
like for example Oracle or to some

00:13:55,300 --> 00:14:03,070
people a language like Scala or Java

00:13:58,120 --> 00:14:04,810
that sort of force you to do big things

00:14:03,070 --> 00:14:07,870
with them they don't want to do small

00:14:04,810 --> 00:14:09,730
things j2ee is a great example where you

00:14:07,870 --> 00:14:13,570
have to write a ton of boilerplate code

00:14:09,730 --> 00:14:17,050
just to get started so you by definition

00:14:13,570 --> 00:14:18,970
have to make a big thing in order to get

00:14:17,050 --> 00:14:21,640
anything done you can make a big thing

00:14:18,970 --> 00:14:23,860
or make nothing so we want to resist

00:14:21,640 --> 00:14:27,730
large tools and I'll talk a little bit

00:14:23,860 --> 00:14:30,220
more about tools in a minute the

00:14:27,730 --> 00:14:33,280
probably the best thing that you can

00:14:30,220 --> 00:14:35,740
start easily doing and you can do at any

00:14:33,280 --> 00:14:39,880
point in a project is manage your

00:14:35,740 --> 00:14:42,610
dependencies oftentimes I think that

00:14:39,880 --> 00:14:44,980
software is just all about dependencies

00:14:42,610 --> 00:14:47,080
dependencies on Jim's dependencies

00:14:44,980 --> 00:14:50,650
between classes dependencies between

00:14:47,080 --> 00:14:55,240
methods and data you can you can look at

00:14:50,650 --> 00:14:57,760
it through that microscope but in terms

00:14:55,240 --> 00:15:01,480
of making small software and resisting

00:14:57,760 --> 00:15:03,910
large hard to change software managing

00:15:01,480 --> 00:15:06,310
your dependencies is one of your best

00:15:03,910 --> 00:15:09,070
weapons if you can resist adding some

00:15:06,310 --> 00:15:12,940
gym that you might not necessarily need

00:15:09,070 --> 00:15:15,400
or does a lot of things then your

00:15:12,940 --> 00:15:18,340
software might be easier to work with if

00:15:15,400 --> 00:15:21,490
you can make it so that the dependencies

00:15:18,340 --> 00:15:24,400
between a service and your application

00:15:21,490 --> 00:15:28,350
are well defined and easily understood

00:15:24,400 --> 00:15:33,070
then you're well on your way to having a

00:15:28,350 --> 00:15:36,550
less resist change same with your teams

00:15:33,070 --> 00:15:39,070
and processes you want to make sure that

00:15:36,550 --> 00:15:43,960
they're dependent upon each other in the

00:15:39,070 --> 00:15:46,240
right way and in understandable ways so

00:15:43,960 --> 00:15:49,960
another way we can move fast and make

00:15:46,240 --> 00:15:50,899
things is to use spikes a spike is sort

00:15:49,960 --> 00:15:53,930
of like

00:15:50,899 --> 00:15:55,970
a prototype what when you when you're

00:15:53,930 --> 00:15:58,339
doing a spike you're saying hey here's a

00:15:55,970 --> 00:16:00,110
question I have about writing some

00:15:58,339 --> 00:16:03,019
software there's some software I need to

00:16:00,110 --> 00:16:05,869
write but I'm not quite sure how it

00:16:03,019 --> 00:16:09,529
would go so what you do is you can

00:16:05,869 --> 00:16:12,410
strain yourself to set to only tackle

00:16:09,529 --> 00:16:14,209
some part of the feature set or you say

00:16:12,410 --> 00:16:15,529
okay there's this point of there's this

00:16:14,209 --> 00:16:18,649
complicated thing i'm not going to

00:16:15,529 --> 00:16:21,050
integrate with actual merchant gateways

00:16:18,649 --> 00:16:23,420
i'll leave that off till later so you're

00:16:21,050 --> 00:16:27,230
just trying to write the whole part of

00:16:23,420 --> 00:16:30,139
some feature or fix some bug or remove

00:16:27,230 --> 00:16:32,149
some bottleneck but you want to go all

00:16:30,139 --> 00:16:35,179
the way through and find all the

00:16:32,149 --> 00:16:36,980
uncertainties and gotchas and then once

00:16:35,179 --> 00:16:40,220
you're done with that spike or prototype

00:16:36,980 --> 00:16:42,740
you can step back and take what you've

00:16:40,220 --> 00:16:45,589
learned by writing that spike and then

00:16:42,740 --> 00:16:47,509
go write actual production code or write

00:16:45,589 --> 00:16:49,970
up a plan about how to write that

00:16:47,509 --> 00:16:52,490
production code so because you're going

00:16:49,970 --> 00:16:54,679
to be throwing this code away one of the

00:16:52,490 --> 00:16:57,529
key constraints is time you can only

00:16:54,679 --> 00:17:02,709
spend like say a day or a few hours or

00:16:57,529 --> 00:17:07,220
some minutes or weeks on doing this so

00:17:02,709 --> 00:17:10,250
you have to use that time wisely which

00:17:07,220 --> 00:17:13,069
is an awesome constraint and then you

00:17:10,250 --> 00:17:14,750
have to once you're done figure out how

00:17:13,069 --> 00:17:17,959
you're really going to solve it given

00:17:14,750 --> 00:17:19,459
what you've learned so spikes are great

00:17:17,959 --> 00:17:22,370
because they help us build the right

00:17:19,459 --> 00:17:24,770
software a ton of projects that I've

00:17:22,370 --> 00:17:28,370
been on personally we're a really great

00:17:24,770 --> 00:17:32,120
idea but they were in the wrong context

00:17:28,370 --> 00:17:35,390
they were for they were for the wrong

00:17:32,120 --> 00:17:37,789
scale like a system was designed to

00:17:35,390 --> 00:17:40,610
handle you know tens of thousands of

00:17:37,789 --> 00:17:42,710
requests a second but the real app the

00:17:40,610 --> 00:17:46,130
real application only sees thousands of

00:17:42,710 --> 00:17:49,070
requests or second or something is

00:17:46,130 --> 00:17:52,149
designed for Pete for a huge

00:17:49,070 --> 00:17:55,309
organization so that you can easily

00:17:52,149 --> 00:17:57,919
change applications and deploy them

00:17:55,309 --> 00:18:00,980
instantly but really people don't need

00:17:57,919 --> 00:18:02,690
to do that all that often so spikes help

00:18:00,980 --> 00:18:04,460
us build the right software find the

00:18:02,690 --> 00:18:06,200
actual requirements

00:18:04,460 --> 00:18:08,540
and find the actual points of

00:18:06,200 --> 00:18:10,730
complication it's easy to talk about

00:18:08,540 --> 00:18:12,380
some problem with other developers and

00:18:10,730 --> 00:18:14,030
say oh well I think this will be

00:18:12,380 --> 00:18:16,190
complicated because things that I

00:18:14,030 --> 00:18:18,470
learned in the past but that might not

00:18:16,190 --> 00:18:20,270
actually be the complicated part of the

00:18:18,470 --> 00:18:23,300
feature the problem whatever you're

00:18:20,270 --> 00:18:26,630
trying to do so Spike's help us go to

00:18:23,300 --> 00:18:28,340
the discover what the software we should

00:18:26,630 --> 00:18:31,550
really write is this is especially

00:18:28,340 --> 00:18:33,560
useful there's all sorts of code our

00:18:31,550 --> 00:18:36,890
problems that I have come upon that I

00:18:33,560 --> 00:18:38,660
figure out I think about it for hours or

00:18:36,890 --> 00:18:40,670
days just in the background in my head

00:18:38,660 --> 00:18:43,370
and I realize that I can't solve this

00:18:40,670 --> 00:18:44,960
problem until I solve this problem that

00:18:43,370 --> 00:18:47,630
I just don't know enough about the

00:18:44,960 --> 00:18:49,820
problem domain or the tools and I need

00:18:47,630 --> 00:18:51,110
to just get down to business and code

00:18:49,820 --> 00:18:54,290
something to figure out what I really

00:18:51,110 --> 00:18:57,410
need to do so spikes are great for

00:18:54,290 --> 00:19:01,100
keeping us out of the weeds I find

00:18:57,410 --> 00:19:04,010
spikes and especially time constraint to

00:19:01,100 --> 00:19:06,380
be extremely useful for to prevent me

00:19:04,010 --> 00:19:08,660
from fighting against some tool just out

00:19:06,380 --> 00:19:10,610
of principle or fighting some bug just

00:19:08,660 --> 00:19:14,060
because I think I'm stupid and I should

00:19:10,610 --> 00:19:16,520
be able to figure this out if I if I'm

00:19:14,060 --> 00:19:18,440
wrestling with something and I come back

00:19:16,520 --> 00:19:19,820
if I wrestle for something with

00:19:18,440 --> 00:19:21,770
something for save 30 minutes and then

00:19:19,820 --> 00:19:24,230
go get a drink of water and come back

00:19:21,770 --> 00:19:26,810
and look at it I might realize that say

00:19:24,230 --> 00:19:28,400
I'm using the tool wrong or that this is

00:19:26,810 --> 00:19:31,400
really a trivial problem and I should

00:19:28,400 --> 00:19:34,820
just hack around it so I find spikes are

00:19:31,400 --> 00:19:36,950
super useful for keeping me from going

00:19:34,820 --> 00:19:40,910
too deep into things that aren't a good

00:19:36,950 --> 00:19:44,890
use of my time and spikes reduce

00:19:40,910 --> 00:19:47,960
uncertainty and tell us where to go so

00:19:44,890 --> 00:19:51,350
if you're not sure what the

00:19:47,960 --> 00:19:54,910
complications are or where the actual

00:19:51,350 --> 00:19:57,620
bottleneck is or where the actual bug is

00:19:54,910 --> 00:20:00,830
constraining your time is a super useful

00:19:57,620 --> 00:20:03,160
technique and constraining your

00:20:00,830 --> 00:20:07,490
requirements saying i'm not going to

00:20:03,160 --> 00:20:09,890
implement a complete date put a street

00:20:07,490 --> 00:20:13,910
address parsing because that's a morass

00:20:09,890 --> 00:20:16,160
of edge cases so you can you can go

00:20:13,910 --> 00:20:18,170
through your writing some ship shipping

00:20:16,160 --> 00:20:18,740
software and you say okay i'm not going

00:20:18,170 --> 00:20:21,890
to parse

00:20:18,740 --> 00:20:23,890
all of the myriad of ways you can write

00:20:21,890 --> 00:20:26,230
a street address but i am going to

00:20:23,890 --> 00:20:28,760
handle all the other stuff from

00:20:26,230 --> 00:20:32,270
acquiring things from the warehouse to

00:20:28,760 --> 00:20:36,410
putting a label on it etc etc so spikes

00:20:32,270 --> 00:20:38,630
help us know I wrote a tiny trivial

00:20:36,410 --> 00:20:40,520
version of this software now i can write

00:20:38,630 --> 00:20:43,010
out a plan for how I'd really write this

00:20:40,520 --> 00:20:45,500
software and how I deliver the useful

00:20:43,010 --> 00:20:50,000
parts as soon as possible and make them

00:20:45,500 --> 00:20:52,910
easy to deploy and easy to code up so

00:20:50,000 --> 00:20:55,820
really spikes are kind of about a divide

00:20:52,910 --> 00:20:58,309
and conquer technique it you do the

00:20:55,820 --> 00:21:01,550
spike so that you can know how to take

00:20:58,309 --> 00:21:03,950
some huge project that you think is big

00:21:01,550 --> 00:21:06,020
and scary and might take a long long

00:21:03,950 --> 00:21:10,520
time and figure out how to reduce it

00:21:06,020 --> 00:21:12,170
into a bunch of less scary projects that

00:21:10,520 --> 00:21:19,210
you can get the benefit out of almost

00:21:12,170 --> 00:21:21,940
immediately so leverage in tools is

00:21:19,210 --> 00:21:25,960
something I've been looking at and

00:21:21,940 --> 00:21:30,350
finding a lot of really interesting

00:21:25,960 --> 00:21:35,290
qualities there are sizes of companies

00:21:30,350 --> 00:21:35,290
and the kinds of tools that they use and

00:21:35,320 --> 00:21:42,260
they have different appropriate nas's so

00:21:38,840 --> 00:21:45,350
say you're a new you're starting up a

00:21:42,260 --> 00:21:48,530
mom-and-pop candle shop that's going to

00:21:45,350 --> 00:21:51,520
be in like a storefront in Grapevine

00:21:48,530 --> 00:21:55,610
Texas you probably don't need Hadoop

00:21:51,520 --> 00:21:58,070
right Hadoop is a huge tool that is

00:21:55,610 --> 00:22:00,950
really awesome when you have more data

00:21:58,070 --> 00:22:03,230
that fits in memory and you have like 20

00:22:00,950 --> 00:22:06,410
machines laying around but that's not

00:22:03,230 --> 00:22:09,650
useful to a mom-and-pop shop for them

00:22:06,410 --> 00:22:12,080
microsoft access or microsoft excel is a

00:22:09,650 --> 00:22:14,000
fantastic tool because they can do a lot

00:22:12,080 --> 00:22:15,920
of things with it quickly and they

00:22:14,000 --> 00:22:22,040
didn't really have to learn things so

00:22:15,920 --> 00:22:24,320
there's the every tool has is a lever we

00:22:22,040 --> 00:22:28,010
use we use tools because we put more

00:22:24,320 --> 00:22:31,100
energy in we put more we put less energy

00:22:28,010 --> 00:22:32,570
in then we get benefit out of and it's

00:22:31,100 --> 00:22:36,970
useful to look at

00:22:32,570 --> 00:22:40,970
the languages and the tools we use in

00:22:36,970 --> 00:22:43,309
that light so I'm only I frequently look

00:22:40,970 --> 00:22:46,340
at tools now and say what is the cost

00:22:43,309 --> 00:22:48,830
benefit of this tool and when do I pay

00:22:46,340 --> 00:22:50,480
those costs do I pay them up front do I

00:22:48,830 --> 00:22:53,330
pay them overtime and when do I see

00:22:50,480 --> 00:22:55,789
those benefits do I immediately get the

00:22:53,330 --> 00:22:58,730
awesomeness of this tool or does is

00:22:55,789 --> 00:23:04,909
awesomeness this tool only come over

00:22:58,730 --> 00:23:07,549
time so for example my postgres is very

00:23:04,909 --> 00:23:09,950
easy to set up so I pay only a little

00:23:07,549 --> 00:23:12,230
bit of costs up front it's very easy to

00:23:09,950 --> 00:23:15,110
define your data model very low-cost

00:23:12,230 --> 00:23:19,250
very easy to write queries and it works

00:23:15,110 --> 00:23:23,600
great with just a little bit of data but

00:23:19,250 --> 00:23:26,629
something like Cassandra or rioc is very

00:23:23,600 --> 00:23:29,840
is relatively difficult to set up it

00:23:26,629 --> 00:23:31,549
drastically constrains how I model my

00:23:29,840 --> 00:23:34,039
data so there's cost and figuring out

00:23:31,549 --> 00:23:35,690
how to get my data into it and there's

00:23:34,039 --> 00:23:38,870
cost and figure out how do I query this

00:23:35,690 --> 00:23:41,990
effectively and so rioc is a great tool

00:23:38,870 --> 00:23:44,059
for when you are operating at a huge

00:23:41,990 --> 00:23:46,490
scale and you can't opera you can't talk

00:23:44,059 --> 00:23:48,230
downtime but it's not very good for

00:23:46,490 --> 00:23:51,559
getting started because you pay such an

00:23:48,230 --> 00:23:54,500
upfront cost so it's useful to know what

00:23:51,559 --> 00:23:58,370
is the cost benefit and and is it

00:23:54,500 --> 00:24:01,299
appropriate to what I'm doing leverage

00:23:58,370 --> 00:24:04,009
also tells us that some tools are

00:24:01,299 --> 00:24:06,620
selfish they want you to do a lot of

00:24:04,009 --> 00:24:09,110
work just to get them going and there's

00:24:06,620 --> 00:24:13,120
no real benefit at all to you to that

00:24:09,110 --> 00:24:17,960
work some of this is a bit subjective

00:24:13,120 --> 00:24:21,919
but I think typing in a language is a

00:24:17,960 --> 00:24:25,370
very good example of a selfish tool to a

00:24:21,919 --> 00:24:27,740
lot of people telling java java or Scala

00:24:25,370 --> 00:24:31,159
compiler what the type of every single

00:24:27,740 --> 00:24:33,500
variable is or most variables is is not

00:24:31,159 --> 00:24:35,870
is that that's just too high cost it

00:24:33,500 --> 00:24:37,279
takes them out it takes them away from

00:24:35,870 --> 00:24:39,889
writing programs and getting them

00:24:37,279 --> 00:24:42,559
working as quickly as possible but for

00:24:39,889 --> 00:24:46,200
some people knowing when they've written

00:24:42,559 --> 00:24:49,230
a typo or knowing that

00:24:46,200 --> 00:24:53,430
the compiler will just outright reject

00:24:49,230 --> 00:24:56,760
incorrect programs is really useful so

00:24:53,430 --> 00:24:59,220
tools can be selfish and it can be a

00:24:56,760 --> 00:25:01,830
little bit subjective but again

00:24:59,220 --> 00:25:04,110
something like rioc is a bit selfish

00:25:01,830 --> 00:25:06,150
because you have to deploy it correctly

00:25:04,110 --> 00:25:09,240
and set it up correctly before you can

00:25:06,150 --> 00:25:11,280
even use it so it what it's wanting you

00:25:09,240 --> 00:25:13,770
to do more for it and it's not giving

00:25:11,280 --> 00:25:18,480
you that much in return at least to

00:25:13,770 --> 00:25:22,380
start and when I when I've been thinking

00:25:18,480 --> 00:25:25,160
about leverage when I look at tools it

00:25:22,380 --> 00:25:27,570
helps me know it's it's a good little

00:25:25,160 --> 00:25:29,850
reminder in the back of my head that

00:25:27,570 --> 00:25:32,730
when I'm fighting with a library or a

00:25:29,850 --> 00:25:37,410
gym or a unit testing thing or some code

00:25:32,730 --> 00:25:39,420
or get or whatever I I know I sometimes

00:25:37,410 --> 00:25:41,550
step back and say is this is this

00:25:39,420 --> 00:25:43,770
something I should keep doing should I

00:25:41,550 --> 00:25:45,900
keep using it or should I look for

00:25:43,770 --> 00:25:50,000
something better I actually think it is

00:25:45,900 --> 00:25:54,390
pretty great but like bizarre or

00:25:50,000 --> 00:25:56,370
mercurial maybe the the benefit of those

00:25:54,390 --> 00:26:00,630
isn't as great as I once thought it was

00:25:56,370 --> 00:26:03,180
and I should switch over to get reticent

00:26:00,630 --> 00:26:05,490
min cash are fantastic examples like if

00:26:03,180 --> 00:26:08,520
you keep using Redis and it keep losing

00:26:05,490 --> 00:26:10,770
it keeps losing your data or MongoDB

00:26:08,520 --> 00:26:13,500
keeps losing your data then maybe you

00:26:10,770 --> 00:26:16,400
should switch to another tool if ruby

00:26:13,500 --> 00:26:19,290
keeps being slow and not having a

00:26:16,400 --> 00:26:23,780
multi-core concurrency for you maybe you

00:26:19,290 --> 00:26:27,120
should look at JRuby or the JVM or early

00:26:23,780 --> 00:26:29,160
there's something to keep in mind so

00:26:27,120 --> 00:26:32,100
that you can move fat so that you can

00:26:29,160 --> 00:26:34,290
speed up you're already using this tool

00:26:32,100 --> 00:26:35,970
so you're moving at some speed you want

00:26:34,290 --> 00:26:41,510
to make more things you want to fight

00:26:35,970 --> 00:26:41,510
the tools less so look at the leverage

00:26:41,570 --> 00:26:49,500
versatility is the versatility of a tool

00:26:45,270 --> 00:26:53,300
or library or approach or whatever is a

00:26:49,500 --> 00:26:55,890
really useful thing to look at a

00:26:53,300 --> 00:26:58,140
versatile tool makes starting off easy

00:26:55,890 --> 00:26:59,670
so like I said postgres is really easy

00:26:58,140 --> 00:27:02,460
to get started with

00:26:59,670 --> 00:27:04,770
and you pay little cost and you can just

00:27:02,460 --> 00:27:07,020
start using it ruby is a fantastically

00:27:04,770 --> 00:27:10,410
easy thing to get started with you can

00:27:07,020 --> 00:27:14,190
just write shell script style programs

00:27:10,410 --> 00:27:16,260
and get started immediately see benefit

00:27:14,190 --> 00:27:19,350
say okay now I've automated this and go

00:27:16,260 --> 00:27:22,770
off and do something else the next step

00:27:19,350 --> 00:27:25,410
of a really great versatile tool is that

00:27:22,770 --> 00:27:29,780
you can discover the structure of of

00:27:25,410 --> 00:27:33,540
your problem as you go so if you have a

00:27:29,780 --> 00:27:38,190
small software process in your team for

00:27:33,540 --> 00:27:40,890
deploying let's say then as you discover

00:27:38,190 --> 00:27:43,470
weaknesses in it you can easily amend

00:27:40,890 --> 00:27:45,300
that process but if you have a 20-page

00:27:43,470 --> 00:27:48,630
document that describes your process

00:27:45,300 --> 00:27:52,530
it's really hard to decide how should we

00:27:48,630 --> 00:27:53,820
change this and does that not does that

00:27:52,530 --> 00:27:56,640
and how do we change this without

00:27:53,820 --> 00:27:59,220
breaking the process such that we're

00:27:56,640 --> 00:28:01,410
making problems for ourselves and that's

00:27:59,220 --> 00:28:03,480
why writing laws is incredibly difficult

00:28:01,410 --> 00:28:08,940
and we have really stupid people making

00:28:03,480 --> 00:28:11,580
laws too but Ruby you write some shell

00:28:08,940 --> 00:28:16,530
script in Ruby or you're right a 200

00:28:11,580 --> 00:28:18,720
blind controller action in rails you can

00:28:16,530 --> 00:28:21,330
add structure to that as you go as you

00:28:18,720 --> 00:28:23,790
discover where the behaviors are and

00:28:21,330 --> 00:28:25,620
where the objects are you can say okay

00:28:23,790 --> 00:28:28,170
I'll pull this out and put this in

00:28:25,620 --> 00:28:31,310
something else as you go and and it

00:28:28,170 --> 00:28:35,250
doesn't require a bunch of you know

00:28:31,310 --> 00:28:38,130
creating new files or changing types or

00:28:35,250 --> 00:28:41,580
using an automated or factoring tool you

00:28:38,130 --> 00:28:45,210
can just do it it's it's a low effort

00:28:41,580 --> 00:28:47,340
thing to put that structure in when you

00:28:45,210 --> 00:28:49,170
discover it and only when you discover

00:28:47,340 --> 00:28:53,820
you don't have to put that structure in

00:28:49,170 --> 00:28:56,760
until you're ready and versatility means

00:28:53,820 --> 00:29:00,600
you can take one tool to start off with

00:28:56,760 --> 00:29:02,760
grow your application your team your

00:29:00,600 --> 00:29:06,690
business whatever and then keep using

00:29:02,760 --> 00:29:09,900
that same stool to sustain that organism

00:29:06,690 --> 00:29:12,450
so you can use Ruby for example to start

00:29:09,900 --> 00:29:14,460
off an application and then

00:29:12,450 --> 00:29:17,310
as you discover what that application

00:29:14,460 --> 00:29:19,230
should do you can keep using Ruby and

00:29:17,310 --> 00:29:21,390
Ruby gives you other tools to structure

00:29:19,230 --> 00:29:24,060
that application and then as you want to

00:29:21,390 --> 00:29:28,860
sustain that application you can use

00:29:24,060 --> 00:29:32,460
Ruby in a lot of ways to two parallel

00:29:28,860 --> 00:29:34,230
parallel eyes the application to grow it

00:29:32,460 --> 00:29:35,850
in two separate applications to have

00:29:34,230 --> 00:29:40,110
those applications talk to each other

00:29:35,850 --> 00:29:42,780
etc and the same thing for teams and

00:29:40,110 --> 00:29:47,400
businesses if you can find some tool or

00:29:42,780 --> 00:29:49,560
some process that grows and sustain that

00:29:47,400 --> 00:29:52,800
can grow with you and doesn't add a

00:29:49,560 --> 00:29:55,170
bunch of costs you know add a bunch of

00:29:52,800 --> 00:30:00,560
busy work then you can sustain that

00:29:55,170 --> 00:30:03,510
business or that endeavor more easily so

00:30:00,560 --> 00:30:06,180
working faster making more things is

00:30:03,510 --> 00:30:09,380
about working smarter doing more of the

00:30:06,180 --> 00:30:12,270
right things solving the right problems

00:30:09,380 --> 00:30:15,000
resisting large software this is I think

00:30:12,270 --> 00:30:17,690
the hardest thing I think just there's

00:30:15,000 --> 00:30:22,650
something about the way people are wired

00:30:17,690 --> 00:30:25,710
that we gravitate towards large things

00:30:22,650 --> 00:30:28,670
whether they be large teams large

00:30:25,710 --> 00:30:32,790
companies large software large cars

00:30:28,670 --> 00:30:35,810
large governments large continents large

00:30:32,790 --> 00:30:38,790
states big football players whatever

00:30:35,810 --> 00:30:44,010
humans seem to like big things up to

00:30:38,790 --> 00:30:47,070
some point you spikes as a guide I've

00:30:44,010 --> 00:30:49,110
been doing spikes just like little

00:30:47,070 --> 00:30:52,740
programming projects on the weekend and

00:30:49,110 --> 00:30:54,840
it's it's fantastic I decide hey I want

00:30:52,740 --> 00:30:56,550
to try and write an analytic system that

00:30:54,840 --> 00:30:58,860
seems really hard like Google Analytics

00:30:56,550 --> 00:31:00,720
is a big system I wonder how much of I

00:30:58,860 --> 00:31:02,670
could write that in a weekend and I

00:31:00,720 --> 00:31:04,260
constrain it down I say okay I'm just

00:31:02,670 --> 00:31:06,120
I'm not going to do the charting part i

00:31:04,260 --> 00:31:08,250
just want to see how I can get data and

00:31:06,120 --> 00:31:10,620
inquiry it and I write some code and

00:31:08,250 --> 00:31:12,960
then i right you know I write the code

00:31:10,620 --> 00:31:14,790
on Saturday and part of sunday I write

00:31:12,960 --> 00:31:17,010
it up on my blog and then that's it

00:31:14,790 --> 00:31:19,020
maybe I come back to that code maybe I

00:31:17,010 --> 00:31:21,750
don't it's no it's no weight around my

00:31:19,020 --> 00:31:23,370
neck I learned some things and now if I

00:31:21,750 --> 00:31:25,610
had to actually go write an analytics

00:31:23,370 --> 00:31:31,220
program I could do it

00:31:25,610 --> 00:31:32,960
feels good high leverage tools if you

00:31:31,220 --> 00:31:35,299
walk away with anything please start

00:31:32,960 --> 00:31:38,020
thinking about high leverage tools some

00:31:35,299 --> 00:31:44,290
tools that I think are high leverage our

00:31:38,020 --> 00:31:49,160
Ruby Redis rescue memcache engine X

00:31:44,290 --> 00:31:52,480
Python PHP all of these tools don't

00:31:49,160 --> 00:31:55,970
require much of you to get started with

00:31:52,480 --> 00:31:58,490
but if you're careful with them you can

00:31:55,970 --> 00:32:00,770
go a long long way with them and even if

00:31:58,490 --> 00:32:02,030
you're not particularly careful you can

00:32:00,770 --> 00:32:03,650
probably get to the point where you

00:32:02,030 --> 00:32:09,230
could pay someone who's careful to help

00:32:03,650 --> 00:32:11,330
you out and use versatile tools this is

00:32:09,230 --> 00:32:14,690
these are kind of like two sides of the

00:32:11,330 --> 00:32:17,450
same court same same coin don't start

00:32:14,690 --> 00:32:20,929
with early don't start with the JVM or

00:32:17,450 --> 00:32:23,690
Scala those things want a lot of you

00:32:20,929 --> 00:32:25,370
don't start with Oracle don't start with

00:32:23,690 --> 00:32:29,840
or PeopleSoft don't start with

00:32:25,370 --> 00:32:32,000
PeopleSoft use things that you can use

00:32:29,840 --> 00:32:35,690
in a lot of different ways and get a lot

00:32:32,000 --> 00:32:40,460
of benefit from and maximize how much

00:32:35,690 --> 00:32:43,760
you learn you maximize what you learn

00:32:40,460 --> 00:32:47,179
and how you can apply that knowledge so

00:32:43,760 --> 00:32:51,049
when a move fast make things and do that

00:32:47,179 --> 00:32:53,540
for a long time once you find something

00:32:51,049 --> 00:32:58,400
awesome some awesome team some awesome

00:32:53,540 --> 00:33:00,500
application the better the more you can

00:32:58,400 --> 00:33:02,919
do as a software developer to make that

00:33:00,500 --> 00:33:05,470
institution a lasting sustainable

00:33:02,919 --> 00:33:08,540
institution it's probably a good thing

00:33:05,470 --> 00:33:11,150
and always be looking for that thing

00:33:08,540 --> 00:33:17,000
that you want to keep make make a

00:33:11,150 --> 00:33:20,120
lasting impression with so that is a all

00:33:17,000 --> 00:33:25,450
of move fast and make things I had

00:33:20,120 --> 00:33:25,450
originally so okay here's the Kota I

00:33:25,840 --> 00:33:31,100
always want to do code talks but I start

00:33:29,330 --> 00:33:37,070
working on the talks and they end up

00:33:31,100 --> 00:33:39,559
being idea talks like that was but the

00:33:37,070 --> 00:33:43,610
code things are still pretty cool

00:33:39,559 --> 00:33:46,749
whoops so I'm gonna do a bonus track and

00:33:43,610 --> 00:33:48,590
then I'll take questions at the end I

00:33:46,749 --> 00:33:53,440
could have done this presentation

00:33:48,590 --> 00:33:55,549
backwards but I'm not that fancy okay so

00:33:53,440 --> 00:33:59,299
celluloid and metrics are too awesome

00:33:55,549 --> 00:34:02,600
high leverage versatile tools for making

00:33:59,299 --> 00:34:05,289
awesome or things now happens that

00:34:02,600 --> 00:34:08,540
someone stole some of my slide deck and

00:34:05,289 --> 00:34:11,929
already talked about celluloid but it's

00:34:08,540 --> 00:34:16,700
okay I'm a trained improvised act or and

00:34:11,929 --> 00:34:21,139
I'll just make stuff up so a little bit

00:34:16,700 --> 00:34:22,609
more about how actors work conceptually

00:34:21,139 --> 00:34:25,730
this is that these are the things that

00:34:22,609 --> 00:34:27,859
are inside an actor you got say two

00:34:25,730 --> 00:34:31,119
actors one named Larry and one named

00:34:27,859 --> 00:34:34,970
Darrell they each have their own thread

00:34:31,119 --> 00:34:37,159
and then they have that mailbox and then

00:34:34,970 --> 00:34:39,050
there's an object contained inside of it

00:34:37,159 --> 00:34:43,399
so actually in celluloid when you

00:34:39,050 --> 00:34:44,960
include celluloid into your class it

00:34:43,399 --> 00:34:50,540
does a whole bunch of magic and makes

00:34:44,960 --> 00:34:53,419
you a a really funky but powerful actor

00:34:50,540 --> 00:34:55,819
guy so now your object has this queue

00:34:53,419 --> 00:34:58,010
inside of it well now so now the thing

00:34:55,819 --> 00:34:59,599
that you thought was your actor is are

00:34:58,010 --> 00:35:02,180
you things you thought was your object

00:34:59,599 --> 00:35:05,329
is really an actor with your object

00:35:02,180 --> 00:35:07,609
inside it so when you send it a method

00:35:05,329 --> 00:35:09,920
call celluloid converts it into a

00:35:07,609 --> 00:35:13,490
message puts it in the queue and then

00:35:09,920 --> 00:35:17,569
each each thread processes all the stuff

00:35:13,490 --> 00:35:21,880
in the mailbox so here's an example from

00:35:17,569 --> 00:35:24,530
an analytic system that i spiked out and

00:35:21,880 --> 00:35:27,920
you can see so this is just like any

00:35:24,530 --> 00:35:31,339
other guy who calls Redis he's going to

00:35:27,920 --> 00:35:35,780
increment a counter and fetch it out if

00:35:31,339 --> 00:35:40,250
any of these if record fetch or Redis is

00:35:35,780 --> 00:35:43,550
called a believer etis then that becomes

00:35:40,250 --> 00:35:47,829
a message so then what I can do from

00:35:43,550 --> 00:35:52,280
another actor is call methods on him and

00:35:47,829 --> 00:35:53,300
so this is part of a network service so

00:35:52,280 --> 00:35:58,000
this is kind of where

00:35:53,300 --> 00:36:00,830
decode the protocol you can have a visit

00:35:58,000 --> 00:36:02,630
which is where you're recording a hit to

00:36:00,830 --> 00:36:05,660
a webpage or whatever and you can have

00:36:02,630 --> 00:36:09,980
stats when you want to fetch the end of

00:36:05,660 --> 00:36:13,130
the analytics data and you can see in

00:36:09,980 --> 00:36:19,910
here you can over here I can just walk

00:36:13,130 --> 00:36:21,260
up to the code you can sell you all it

00:36:19,910 --> 00:36:23,690
has a cool thing where it makes it a lot

00:36:21,260 --> 00:36:26,270
easier to name actors so you've got some

00:36:23,690 --> 00:36:28,280
prot you got an application running and

00:36:26,270 --> 00:36:30,110
it's got all these moving parts you can

00:36:28,280 --> 00:36:31,910
give those moving parts names it's

00:36:30,110 --> 00:36:34,610
easier to reason about them so I've got

00:36:31,910 --> 00:36:36,890
this Redis actor off somewhere and

00:36:34,610 --> 00:36:41,480
that's the guy we looked at just a

00:36:36,890 --> 00:36:43,160
minute ago so any so these guys are now

00:36:41,480 --> 00:36:44,690
in two separate threads they won't

00:36:43,160 --> 00:36:48,040
interfere with each other they can't

00:36:44,690 --> 00:36:50,540
munge each other's data is very nice

00:36:48,040 --> 00:36:54,170
this is another awesome thing that

00:36:50,540 --> 00:36:58,400
celluloid gives you I've got this

00:36:54,170 --> 00:37:01,360
analytics collector and it's a it's a

00:36:58,400 --> 00:37:04,370
process that I'm running in my unix and

00:37:01,360 --> 00:37:07,340
it's got three actors inside of it so

00:37:04,370 --> 00:37:10,130
instead of having to wire all that up by

00:37:07,340 --> 00:37:12,820
hand and celluloid you can just say ok

00:37:10,130 --> 00:37:16,760
all of these things are in a group

00:37:12,820 --> 00:37:20,000
they're my stats class my reticent I

00:37:16,760 --> 00:37:23,530
listen er I can give them names so stats

00:37:20,000 --> 00:37:25,520
his name stats I mean yes you can read

00:37:23,530 --> 00:37:30,250
and you can tell it how to instantiate

00:37:25,520 --> 00:37:30,250
them the other really cool thing is that

00:37:31,060 --> 00:37:36,110
borrowing from Erlang celluloid can

00:37:33,380 --> 00:37:38,060
supervise these actors and if one of

00:37:36,110 --> 00:37:40,400
them should encounter an exception or

00:37:38,060 --> 00:37:42,560
something terrible and crashes then

00:37:40,400 --> 00:37:44,510
celluloid will start it back up it

00:37:42,560 --> 00:37:46,040
doesn't it's it's naive it doesn't do

00:37:44,510 --> 00:37:48,710
anything to prevent things that just

00:37:46,040 --> 00:37:50,960
keep crashing from continuously crashing

00:37:48,710 --> 00:37:54,710
so you have to actually watch your logs

00:37:50,960 --> 00:37:56,090
and make sure that you fix your bugs but

00:37:54,710 --> 00:37:59,000
then it makes it also super easy to

00:37:56,090 --> 00:38:01,250
start your application you just say my

00:37:59,000 --> 00:38:03,740
supervision group class just run that

00:38:01,250 --> 00:38:05,690
guy you trap the interrupt signals so

00:38:03,740 --> 00:38:07,010
you have some way to kill it and you

00:38:05,690 --> 00:38:10,310
call terminate on the

00:38:07,010 --> 00:38:14,870
actor group and then you sleep your main

00:38:10,310 --> 00:38:18,890
thread and you're done my celluloid i/o

00:38:14,870 --> 00:38:23,380
is a totally fantastic thing makes

00:38:18,890 --> 00:38:25,550
writing network services pretty awesome

00:38:23,380 --> 00:38:27,170
so here's some more reading you should

00:38:25,550 --> 00:38:28,880
read about Erlang because it's kind of

00:38:27,170 --> 00:38:32,390
the first thing that really used actors

00:38:28,880 --> 00:38:35,690
in a big way d cell is really neat it's

00:38:32,390 --> 00:38:38,210
a celluloid for distributed across

00:38:35,690 --> 00:38:40,760
multiple machines if you want to dig

00:38:38,210 --> 00:38:43,010
into Rubio concurrency in Ruby I've

00:38:40,760 --> 00:38:45,560
written some things on my blog and if

00:38:43,010 --> 00:38:47,300
you want to get really into it java

00:38:45,560 --> 00:38:49,100
concurrency and practice is a book with

00:38:47,300 --> 00:38:54,710
a monorail on it which makes it awesome

00:38:49,100 --> 00:38:56,740
by default but it's kind of the the it's

00:38:54,710 --> 00:38:59,690
the readable book on how to do

00:38:56,740 --> 00:39:02,000
multi-threaded concurrent programming it

00:38:59,690 --> 00:39:04,220
turns out the JVM is has some really

00:39:02,000 --> 00:39:06,950
well thought out facilities for doing

00:39:04,220 --> 00:39:09,590
this so it's worth going through the

00:39:06,950 --> 00:39:12,980
Java examples to really learn how

00:39:09,590 --> 00:39:15,170
multi-threaded stuff should work alright

00:39:12,980 --> 00:39:17,450
really quickly I want to show you this

00:39:15,170 --> 00:39:19,970
library called metrics knowing your

00:39:17,450 --> 00:39:23,480
production systems is really important

00:39:19,970 --> 00:39:27,290
even if you're not in operations you

00:39:23,480 --> 00:39:31,280
should know how your software works in

00:39:27,290 --> 00:39:33,620
reality not in not on your laptop but on

00:39:31,280 --> 00:39:35,570
the 30 servers or two servers or

00:39:33,620 --> 00:39:38,330
whatever you're running it on out in the

00:39:35,570 --> 00:39:42,050
wild or networks fail where databases do

00:39:38,330 --> 00:39:44,750
stupid things at static etc in the way

00:39:42,050 --> 00:39:46,970
to know that is not by speculating about

00:39:44,750 --> 00:39:49,040
things and not by talking about it on

00:39:46,970 --> 00:39:51,710
hacker news the way to know what your

00:39:49,040 --> 00:39:54,170
system does in production is to measure

00:39:51,710 --> 00:39:55,580
it and look at those numbers and then

00:39:54,170 --> 00:39:59,840
make decisions on what you should do

00:39:55,580 --> 00:40:02,630
next so metrics is a library that Eric

00:39:59,840 --> 00:40:04,880
Lindvall wrote so that you can really

00:40:02,630 --> 00:40:06,560
easily instrument just whatever you want

00:40:04,880 --> 00:40:09,200
in your application so think of

00:40:06,560 --> 00:40:12,860
something like RPM or trace oolitic

00:40:09,200 --> 00:40:16,640
except a lot more granular a lot more do

00:40:12,860 --> 00:40:17,990
it yourself but guided by you you don't

00:40:16,640 --> 00:40:19,550
have to worry about someone else saying

00:40:17,990 --> 00:40:20,230
telling you what's important in your

00:40:19,550 --> 00:40:23,020
program

00:40:20,230 --> 00:40:24,820
so the way you use metrics as you

00:40:23,020 --> 00:40:26,680
require it and then you tell metrics

00:40:24,820 --> 00:40:29,230
give me a counter and I want to name it

00:40:26,680 --> 00:40:32,050
api hits and then every time you get hit

00:40:29,230 --> 00:40:34,810
in your code on your api you say

00:40:32,050 --> 00:40:38,980
increment this guy doing in a global

00:40:34,810 --> 00:40:40,510
variable is a little gnarly but it's a

00:40:38,980 --> 00:40:43,240
good way to get started you can clean it

00:40:40,510 --> 00:40:45,460
up later the other thing that people

00:40:43,240 --> 00:40:48,670
often want to know is how long does this

00:40:45,460 --> 00:40:50,980
thing take in my program so you can wrap

00:40:48,670 --> 00:40:52,690
a timer around some work so you want to

00:40:50,980 --> 00:40:56,080
know how long it takes to compute

00:40:52,690 --> 00:40:58,600
someone's a rate structure or how long

00:40:56,080 --> 00:41:00,580
it takes to create a new user when you

00:40:58,600 --> 00:41:03,850
register someone you can measure that

00:41:00,580 --> 00:41:05,560
the cool thing is that these compose so

00:41:03,850 --> 00:41:08,970
a counter is sort of like one of the

00:41:05,560 --> 00:41:12,340
most basic things and metrics a timer

00:41:08,970 --> 00:41:15,040
measures time and does some statistics

00:41:12,340 --> 00:41:18,430
on it but it also measures counts too so

00:41:15,040 --> 00:41:21,010
you kind of get both and then you need

00:41:18,430 --> 00:41:22,990
to report these metrics somewhere

00:41:21,010 --> 00:41:25,600
because numbers just sitting in in

00:41:22,990 --> 00:41:28,000
memory aren't very useful the simplest

00:41:25,600 --> 00:41:30,790
way is to just have it right out to a

00:41:28,000 --> 00:41:33,400
log file you can have it change the proc

00:41:30,790 --> 00:41:36,609
the the name of the process when you

00:41:33,400 --> 00:41:38,830
look at PS or top and you can have it

00:41:36,609 --> 00:41:42,580
send to stats d or to a number of

00:41:38,830 --> 00:41:46,150
services so the really easy way like I

00:41:42,580 --> 00:41:48,550
said you have a dump to a log file it

00:41:46,150 --> 00:41:50,619
just right it writes you know this is a

00:41:48,550 --> 00:41:54,790
metrics thing and then it just has all

00:41:50,619 --> 00:41:59,410
of its values in a easy to parse format

00:41:54,790 --> 00:42:02,410
so you see this is a timer the name of

00:41:59,410 --> 00:42:03,910
it is somewhere name equals stats it

00:42:02,410 --> 00:42:06,720
does some statistics so it gives you the

00:42:03,910 --> 00:42:11,320
five minute rate the mean rate min max

00:42:06,720 --> 00:42:15,700
95th percentile very important averages

00:42:11,320 --> 00:42:18,760
lose data that an average is a useful

00:42:15,700 --> 00:42:21,450
tool but it will tell you lies 95th

00:42:18,760 --> 00:42:24,700
percentile says ninety-five percent of

00:42:21,450 --> 00:42:27,820
your data your timings or whatever are

00:42:24,700 --> 00:42:29,830
within this range so that's useful for

00:42:27,820 --> 00:42:34,180
finding outliers where you have

00:42:29,830 --> 00:42:39,510
something that's sometimes very slow but

00:42:34,180 --> 00:42:43,230
been very fast step to convert it to CSV

00:42:39,510 --> 00:42:45,880
really easy you just write some Ruby

00:42:43,230 --> 00:42:47,860
this is a really good practice if you

00:42:45,880 --> 00:42:51,060
never practice writing code convert

00:42:47,860 --> 00:42:53,080
things to CSV it's easy then step 3

00:42:51,060 --> 00:42:55,990
spreadsheets who doesn't love

00:42:53,080 --> 00:42:59,200
spreadsheets spreadsheets are really

00:42:55,990 --> 00:43:03,220
really boring actually but there are

00:42:59,200 --> 00:43:04,780
really great low-cost analytics tools

00:43:03,220 --> 00:43:07,270
you just bang that thing into a

00:43:04,780 --> 00:43:09,310
spreadsheet select two columns and say

00:43:07,270 --> 00:43:11,020
make me a graph you don't have to learn

00:43:09,310 --> 00:43:12,670
JavaScript you don't have to stand up

00:43:11,020 --> 00:43:15,510
some service you don't have to pay for

00:43:12,670 --> 00:43:20,050
anything there's pay for the spreadsheet

00:43:15,510 --> 00:43:21,220
but you just go it's awesome or if you

00:43:20,050 --> 00:43:22,900
don't want to use a spreadsheet or if

00:43:21,220 --> 00:43:25,540
you're actually you know running a

00:43:22,900 --> 00:43:27,520
service you can use there's dashboard

00:43:25,540 --> 00:43:30,010
services instrumental in librado these

00:43:27,520 --> 00:43:35,230
are kind of like stats d+ graphite in

00:43:30,010 --> 00:43:36,760
the sky they're good so if this is

00:43:35,230 --> 00:43:39,220
interesting to you you should go read

00:43:36,760 --> 00:43:41,200
you should look at metrics the original

00:43:39,220 --> 00:43:44,530
library that a coda hail from the amur

00:43:41,200 --> 00:43:47,610
developed he did a slot presentation on

00:43:44,530 --> 00:43:50,260
this at code cough a couple years ago

00:43:47,610 --> 00:43:52,510
it's called metrics everywhere he talks

00:43:50,260 --> 00:43:55,270
a lot more about knowing your software

00:43:52,510 --> 00:43:56,560
in production by measuring it it's

00:43:55,270 --> 00:43:59,650
excellent you should either read the

00:43:56,560 --> 00:44:01,780
slides or watch the actual talk that's

00:43:59,650 --> 00:44:03,280
it I think I've used all of my time so

00:44:01,780 --> 00:44:05,500
I'll be in the back if you want to ask

00:44:03,280 --> 00:44:07,740
me any questions I welcome it thank you

00:44:05,500 --> 00:44:07,740
very much

00:44:20,300 --> 00:44:22,360

YouTube URL: https://www.youtube.com/watch?v=iXJXne0BzN4


