Title: Big Ruby 2013 Hypermedia - less hype, more media please by Wynn Netherland
Publication date: 2020-01-28
Playlist: Big Ruby 2013
Description: 
	Like REST itself, Hypermedia is one of those topics everyone is talking about but few understand. Many discussions on the topic devolve into chaos until someone screams out "Fielding, dang it!" in exasperation. Even more civilized debates have a healthy dose of "READ THE F-ING SPEC!"

API consumers don't care about your API, your architecture, or your specs. They just want your data. This talk aims to provide a real world perspective of Hypermedia and show why it matters as we walk through the evolution of the GitHub API and the design decisions behind those changes. We'll dive into HATEOAS, media types, HAL, Collection+JSON, link templates, and the growing landscape of Ruby libraries for making all that easier to implement.

We'll also look at the impact of Hypermedia on API clients and when it might not be the best design pattern.

Help us caption & translate this video!

http://amara.org/v/FGd6/
Captions: 
	00:00:18,720 --> 00:00:24,730
I'm win Netherland is Martin mentioned I

00:00:21,550 --> 00:00:27,510
am penguin on the interwebs anywhere

00:00:24,730 --> 00:00:31,570
that I can get it which is most places I

00:00:27,510 --> 00:00:37,140
blog at wind out of him playing only the

00:00:31,570 --> 00:00:41,590
hits as Mark Mitch and I work at github

00:00:37,140 --> 00:00:46,600
more specifically on the API team I help

00:00:41,590 --> 00:00:48,340
out Rick Olson rick danger Olson Jason

00:00:46,600 --> 00:00:50,559
Rudolph just started from relevance many

00:00:48,340 --> 00:00:53,890
of you know and pitching in on the API

00:00:50,559 --> 00:00:56,290
team do a fair amount of API support at

00:00:53,890 --> 00:00:58,809
github it's actually just one of the

00:00:56,290 --> 00:01:01,899
things that I was pleasantly surprised

00:00:58,809 --> 00:01:05,649
that I like to do I always thought that

00:01:01,899 --> 00:01:08,080
the support was not too fun having done

00:01:05,649 --> 00:01:09,670
it in a couple of past lives and behind

00:01:08,080 --> 00:01:11,530
the corporate firewall but that getup

00:01:09,670 --> 00:01:13,539
it's actually quite fun to do API

00:01:11,530 --> 00:01:16,780
supports so if you've ever emailed into

00:01:13,539 --> 00:01:18,670
the support of github with API in the

00:01:16,780 --> 00:01:22,209
subject it might be me you're talking to

00:01:18,670 --> 00:01:24,340
I have a thing for dot files in the last

00:01:22,209 --> 00:01:28,090
couple of years anybody have their dot

00:01:24,340 --> 00:01:31,179
files a pun get up cool anybody not know

00:01:28,090 --> 00:01:33,420
what dot files are a couple hands cool

00:01:31,179 --> 00:01:35,950
dot files are all those little dot

00:01:33,420 --> 00:01:39,580
prefix files in your home folder that

00:01:35,950 --> 00:01:41,560
configure all of your tools so there how

00:01:39,580 --> 00:01:44,170
you customize your tool chain and kind

00:01:41,560 --> 00:01:48,490
of craft your own lightsaber so Adam

00:01:44,170 --> 00:01:50,590
yankie Adam wave and I created dot files

00:01:48,490 --> 00:01:52,209
github com prior to me joining get up

00:01:50,590 --> 00:01:54,610
actually it's a guide if you want to

00:01:52,209 --> 00:01:57,550
look for doc file frameworks of how to

00:01:54,610 --> 00:02:00,520
organize your da files Adam and I use a

00:01:57,550 --> 00:02:01,959
topical framework instead of just

00:02:00,520 --> 00:02:05,050
putting everything in one big flat

00:02:01,959 --> 00:02:06,640
folder they're organized in folders by

00:02:05,050 --> 00:02:07,929
topic so it makes it much easier to find

00:02:06,640 --> 00:02:10,230
your tea mug settings or your vim

00:02:07,929 --> 00:02:13,030
settings things of that sort so other

00:02:10,230 --> 00:02:17,410
items about me this is one of my turn

00:02:13,030 --> 00:02:19,720
offs if you can't find an RSS feed I'm

00:02:17,410 --> 00:02:21,580
probably one of a half dozen users still

00:02:19,720 --> 00:02:24,099
in the world that use RSS I've been

00:02:21,580 --> 00:02:27,400
known to care mad add a feed to your

00:02:24,099 --> 00:02:28,240
public open-source blog if it does not

00:02:27,400 --> 00:02:29,410
have an RSS

00:02:28,240 --> 00:02:33,870
read and I like the writing and I want

00:02:29,410 --> 00:02:36,670
to subscribe don't make me check back

00:02:33,870 --> 00:02:40,720
since obviously I have no hobbies I

00:02:36,670 --> 00:02:42,670
write a lot of API wrappers so when

00:02:40,720 --> 00:02:44,920
there's a new api out for some reason

00:02:42,670 --> 00:02:47,440
for not so much anymore it used to be

00:02:44,920 --> 00:02:49,630
every other sunday i was watching

00:02:47,440 --> 00:02:51,760
football and writing api wrappers for a

00:02:49,630 --> 00:02:53,860
number of api is out there kind of what

00:02:51,760 --> 00:02:57,250
got me the job at get up writing the

00:02:53,860 --> 00:03:00,340
octo kit rapper github uses that

00:02:57,250 --> 00:03:03,220
throughout a lot of our services anybody

00:03:00,340 --> 00:03:05,260
see boxing last week so one of the first

00:03:03,220 --> 00:03:07,390
things that is required in boxing is the

00:03:05,260 --> 00:03:11,400
octo kit library to talk to the API to

00:03:07,390 --> 00:03:14,920
make sure you are who you say you are

00:03:11,400 --> 00:03:20,290
when i joined the github when they put

00:03:14,920 --> 00:03:21,670
you on the team page you don't you can't

00:03:20,290 --> 00:03:22,990
choose your own role somebody else has

00:03:21,670 --> 00:03:27,880
to give you a role so this was my role

00:03:22,990 --> 00:03:31,120
flightless water fowl which penguin i am

00:03:27,880 --> 00:03:32,800
now de facto api evangelist i think

00:03:31,120 --> 00:03:35,770
because nobody else wanted the job and i

00:03:32,800 --> 00:03:40,690
like to talk and I like AP is so but i

00:03:35,770 --> 00:03:45,610
am still penguin those places that's one

00:03:40,690 --> 00:03:48,880
of my favorites so our industry loves

00:03:45,610 --> 00:03:51,610
buzzwords as one of the earlier speakers

00:03:48,880 --> 00:03:53,020
touched on today so hopefully didn't

00:03:51,610 --> 00:03:55,540
hear any of these lines last night at

00:03:53,020 --> 00:03:57,280
the drink up but responsive websites are

00:03:55,540 --> 00:04:02,850
other h who's creating a responsive

00:03:57,280 --> 00:04:05,560
website these days cool there you go

00:04:02,850 --> 00:04:11,050
nice database is it schema-less or you

00:04:05,560 --> 00:04:12,760
say no sequel or web scale right if you

00:04:11,050 --> 00:04:15,460
have an API it's got to be hyper media

00:04:12,760 --> 00:04:18,970
driven these are nice terms but they're

00:04:15,460 --> 00:04:21,130
poor decision criteria so i wouldn't

00:04:18,970 --> 00:04:22,870
weigh a technology choice based on any

00:04:21,130 --> 00:04:24,960
one of these single dimensions but they

00:04:22,870 --> 00:04:27,910
seem to get a lot of the headlines and

00:04:24,960 --> 00:04:30,040
so what the heck is hypermedia anybody

00:04:27,910 --> 00:04:33,520
not know what hypermedia is if i asked

00:04:30,040 --> 00:04:35,440
you to define it cool then this deck was

00:04:33,520 --> 00:04:37,760
worth the time

00:04:35,440 --> 00:04:40,250
so one of the first things that you'd

00:04:37,760 --> 00:04:42,650
want to do is look it up on Wikipedia

00:04:40,250 --> 00:04:46,580
anybody running Hugh bot in their

00:04:42,650 --> 00:04:48,350
offices will highly recommend it I can't

00:04:46,580 --> 00:04:50,960
get by without you bought these days to

00:04:48,350 --> 00:04:55,100
help me out do the most menial menial

00:04:50,960 --> 00:05:01,310
tasks your own personal task rabbit for

00:04:55,100 --> 00:05:03,050
most things so cubot wikipedia define

00:05:01,310 --> 00:05:05,360
hyper mini of this way however media is

00:05:03,050 --> 00:05:07,280
used as a logical expression of the term

00:05:05,360 --> 00:05:09,650
hypertext in which graphics audio video

00:05:07,280 --> 00:05:12,230
plain text and hyperlinks intertwined to

00:05:09,650 --> 00:05:16,870
create a generally nonlinear medium and

00:05:12,230 --> 00:05:19,130
information already so what's hypertext

00:05:16,870 --> 00:05:20,540
hypertext this text displayed on a

00:05:19,130 --> 00:05:22,520
computer display or other electronic

00:05:20,540 --> 00:05:24,320
device with references hyperlinks to

00:05:22,520 --> 00:05:27,080
other texts that the reader can

00:05:24,320 --> 00:05:29,000
immediately access usually by mouse

00:05:27,080 --> 00:05:32,470
click keypress sequence or by touching

00:05:29,000 --> 00:05:34,370
the screen alright what's a hyperlink

00:05:32,470 --> 00:05:36,140
computing a hyperlink or link is

00:05:34,370 --> 00:05:37,550
reference to data that the reader can

00:05:36,140 --> 00:05:39,260
directly follow or that is followed

00:05:37,550 --> 00:05:40,730
automatically hyperlink points to a

00:05:39,260 --> 00:05:47,810
whole document to a specific element

00:05:40,730 --> 00:05:51,770
within a document and quickly you

00:05:47,810 --> 00:05:53,300
discover the problem with Wikipedia I'm

00:05:51,770 --> 00:05:57,080
sure we've all done this three hours

00:05:53,300 --> 00:06:00,080
later and you're forgot what what you

00:05:57,080 --> 00:06:03,380
came there for so there's a lot of terms

00:06:00,080 --> 00:06:05,210
around hypermedia hypermedia AP is one

00:06:03,380 --> 00:06:08,920
of them is this one anybody know how to

00:06:05,210 --> 00:06:12,110
pronounce it yes rhymes with cheerios

00:06:08,920 --> 00:06:13,810
which i think i mean poor spelling can

00:06:12,110 --> 00:06:17,480
be made up with branding so i think

00:06:13,810 --> 00:06:18,680
maybe something like that if it rhymes

00:06:17,480 --> 00:06:22,310
too serious we can't see that's the

00:06:18,680 --> 00:06:26,600
devil there in the cereal box so what is

00:06:22,310 --> 00:06:28,720
hideous hideous I guess can thought of

00:06:26,600 --> 00:06:31,400
be thought of as the rest of rest

00:06:28,720 --> 00:06:35,720
anybody knew two rails like within the

00:06:31,400 --> 00:06:38,600
last three years a lot of new folks so

00:06:35,720 --> 00:06:42,470
go back and check the ancient tomes and

00:06:38,600 --> 00:06:44,720
see the whole rest kerfuffle that we had

00:06:42,470 --> 00:06:46,820
a few years ago when rest became the end

00:06:44,720 --> 00:06:48,470
thing to do with api's and then the HTTP

00:06:46,820 --> 00:06:50,240
nerd said well that's not exactly

00:06:48,470 --> 00:06:52,490
rest and you don't use put and patch and

00:06:50,240 --> 00:06:55,640
all of that stuff so anyway this is the

00:06:52,490 --> 00:06:58,040
rest of rest a client enters the rest

00:06:55,640 --> 00:07:00,470
api through a single fixed URL so

00:06:58,040 --> 00:07:03,560
there's a entry point to the API front

00:07:00,470 --> 00:07:06,380
door if you will all future actions from

00:07:03,560 --> 00:07:08,030
there are discovered within resource

00:07:06,380 --> 00:07:10,340
representation so you get a resource

00:07:08,030 --> 00:07:13,130
back and all the other future actions

00:07:10,340 --> 00:07:15,350
are discovered from those resources and

00:07:13,130 --> 00:07:17,210
media types are used for the

00:07:15,350 --> 00:07:19,130
representation so that each resource

00:07:17,210 --> 00:07:22,430
representation has a media type that

00:07:19,130 --> 00:07:24,860
describes what goes into to each

00:07:22,430 --> 00:07:28,130
resource and their standardized around

00:07:24,860 --> 00:07:30,770
some schemas part of that are linked

00:07:28,130 --> 00:07:33,500
relations so each resource has multiple

00:07:30,770 --> 00:07:37,820
links relations to other resources that

00:07:33,500 --> 00:07:41,090
the API human or machine that's de

00:07:37,820 --> 00:07:44,090
available can navigate and go to other

00:07:41,090 --> 00:07:47,750
parts of the API so here's a most simple

00:07:44,090 --> 00:07:49,850
example this is the github status API

00:07:47,750 --> 00:07:51,830
which we launched a few months ago so

00:07:49,850 --> 00:07:54,800
now that you can check the status of

00:07:51,830 --> 00:08:00,590
github and the github API so here's our

00:07:54,800 --> 00:08:02,240
front door our single fixed URL it

00:08:00,590 --> 00:08:04,850
returns this representation which is

00:08:02,240 --> 00:08:08,690
simply a Jason hash with three links in

00:08:04,850 --> 00:08:11,570
it so each of these is a link relation

00:08:08,690 --> 00:08:16,640
in this case it's the status URL that I

00:08:11,570 --> 00:08:20,960
can then grab that and I have the value

00:08:16,640 --> 00:08:25,220
to then follow with curl in a second

00:08:20,960 --> 00:08:26,780
call to get the data that actually after

00:08:25,220 --> 00:08:28,729
in this case is the status and I'm

00:08:26,780 --> 00:08:30,890
hopefully hoping that Gibbs actually up

00:08:28,729 --> 00:08:32,150
right now but this is a it was you can

00:08:30,890 --> 00:08:35,780
see the time stamped when I actually

00:08:32,150 --> 00:08:41,300
prepared my slides so status was good at

00:08:35,780 --> 00:08:44,600
this point brief detour anybody seen

00:08:41,300 --> 00:08:48,170
Jake you that code example included Jake

00:08:44,600 --> 00:08:50,930
you a couple of hands so share some of

00:08:48,170 --> 00:08:53,450
my tips and tricks and tools the trade

00:08:50,930 --> 00:08:55,160
as I go here Jake you is the real and

00:08:53,450 --> 00:08:57,709
don't do that by the way on this like

00:08:55,160 --> 00:08:59,930
fireworks inside of a submarine while

00:08:57,709 --> 00:09:01,670
you're on the conference Wi-Fi wait till

00:08:59,930 --> 00:09:02,270
we get off that thing before you do a

00:09:01,670 --> 00:09:04,550
homebrew

00:09:02,270 --> 00:09:08,510
stall since we're not going to a proxy

00:09:04,550 --> 00:09:11,000
server but just brew install JQ I think

00:09:08,510 --> 00:09:13,850
it is the real jquery I'll let you walk

00:09:11,000 --> 00:09:16,250
Jason hashes from the command line so

00:09:13,850 --> 00:09:19,430
consider this example the URL up at the

00:09:16,250 --> 00:09:21,880
top is the commits listing for a

00:09:19,430 --> 00:09:25,880
repository in this case it's octo kit I

00:09:21,880 --> 00:09:27,440
can pipe that 2jq the arse which in this

00:09:25,880 --> 00:09:29,060
case just tells it to return RAW format

00:09:27,440 --> 00:09:30,620
instead of string delimited or quote

00:09:29,060 --> 00:09:33,890
delimited strings that you normally get

00:09:30,620 --> 00:09:35,570
back from a JSON API and the second

00:09:33,890 --> 00:09:39,290
argument there guess the first option

00:09:35,570 --> 00:09:40,730
argument is the Jason the JavaScript

00:09:39,290 --> 00:09:43,310
expression that we would use to walk

00:09:40,730 --> 00:09:45,890
that hash coming back so dot top-level

00:09:43,310 --> 00:09:48,140
object empty brackets means kind of an

00:09:45,890 --> 00:09:49,930
each iterator for every item in this

00:09:48,140 --> 00:09:54,080
array I'm going to call the author

00:09:49,930 --> 00:09:56,900
object dot URL property so we can grab

00:09:54,080 --> 00:09:59,330
all the URLs and since it's unix it's

00:09:56,900 --> 00:10:02,080
full of piping-hot goodness we can pipe

00:09:59,330 --> 00:10:04,490
that to unique and get all of the unique

00:10:02,080 --> 00:10:08,690
authors for that page of commits which

00:10:04,490 --> 00:10:11,620
is pretty cool check it out so hyper

00:10:08,690 --> 00:10:14,450
media types we go back to our videos

00:10:11,620 --> 00:10:19,070
definition that third bullet we talked

00:10:14,450 --> 00:10:20,660
about media types hypermedia type are my

00:10:19,070 --> 00:10:21,950
media types that contain native hyper

00:10:20,660 --> 00:10:23,630
linking semantics that induce

00:10:21,950 --> 00:10:26,480
application flow meaning they have links

00:10:23,630 --> 00:10:28,360
within them inherently for example HTML

00:10:26,480 --> 00:10:35,110
is a hypermedia tied because we have the

00:10:28,360 --> 00:10:39,250
link tag a tag unfortunately xml is not

00:10:35,110 --> 00:10:42,980
neither is jason for that matter but

00:10:39,250 --> 00:10:46,730
hTML sucks for data if you've ever tried

00:10:42,980 --> 00:10:47,930
to use HTML as the data container we

00:10:46,730 --> 00:10:51,430
tried this one so it's called micro

00:10:47,930 --> 00:10:54,500
formats anybody remember microformats

00:10:51,430 --> 00:10:59,390
cool yeah let's put all of our data

00:10:54,500 --> 00:11:02,180
semantics and CSS gets that'll work so

00:10:59,390 --> 00:11:05,180
hyper media types are my media types if

00:11:02,180 --> 00:11:08,840
you've been around HTTP for any period

00:11:05,180 --> 00:11:10,080
of time know what am I media type is and

00:11:08,840 --> 00:11:12,390
I had to throw that one in there

00:11:10,080 --> 00:11:16,560
I don't even know where that joke came

00:11:12,390 --> 00:11:18,390
from at this point so we can have hyper

00:11:16,560 --> 00:11:20,700
media types of media types built on top

00:11:18,390 --> 00:11:24,030
of another media type that in some cases

00:11:20,700 --> 00:11:29,640
ad linking semantics if we need it one

00:11:24,030 --> 00:11:35,870
of those popular is how so Hal not this

00:11:29,640 --> 00:11:35,870
one it's over your head then ask someone

00:11:37,370 --> 00:11:44,760
how provides simple linking and data and

00:11:40,560 --> 00:11:48,260
it comes in two flavors but one of those

00:11:44,760 --> 00:11:53,220
is XML so I really don't count that one

00:11:48,260 --> 00:11:54,660
I'm kind of an XML hater this is what

00:11:53,220 --> 00:11:56,640
how it looks like so in this JavaScript

00:11:54,660 --> 00:11:59,550
object that comes back there's an

00:11:56,640 --> 00:12:01,620
underscore links hash that has all of

00:11:59,550 --> 00:12:03,810
these linked relations in the example I

00:12:01,620 --> 00:12:05,720
used with the github status API the

00:12:03,810 --> 00:12:09,900
single link was called status URL

00:12:05,720 --> 00:12:13,370
inherent in that was linked relation of

00:12:09,900 --> 00:12:18,350
type status these can be made up here

00:12:13,370 --> 00:12:20,640
how provides a few I guess standardized

00:12:18,350 --> 00:12:23,190
relation types here we have self next

00:12:20,640 --> 00:12:25,380
fine admin and there's some other

00:12:23,190 --> 00:12:27,690
options for some of these the thinking

00:12:25,380 --> 00:12:30,510
is that if we have standardized tooling

00:12:27,690 --> 00:12:31,680
around some of these hypermedia types we

00:12:30,510 --> 00:12:33,720
don't to recreate the wheel every time

00:12:31,680 --> 00:12:35,490
we start consuming a media type and

00:12:33,720 --> 00:12:38,820
we're building tools around it like API

00:12:35,490 --> 00:12:40,050
explores and things of that sort but

00:12:38,820 --> 00:12:41,190
then there's some folks at the far end

00:12:40,050 --> 00:12:43,530
of the spectrum and think we can just

00:12:41,190 --> 00:12:45,450
kind of build these automated machine

00:12:43,530 --> 00:12:46,770
learning type of systems where

00:12:45,450 --> 00:12:49,350
application you write an application

00:12:46,770 --> 00:12:50,520
wrapper once and just organically the

00:12:49,350 --> 00:12:52,380
thing just keeps in sync with the server

00:12:50,520 --> 00:12:54,810
with it I think that's sort of a pipe

00:12:52,380 --> 00:12:56,400
dream but it doesn't mean that we have

00:12:54,810 --> 00:12:59,010
to recreate the wheel every time that we

00:12:56,400 --> 00:13:01,580
expose the new media type from a server

00:12:59,010 --> 00:13:04,560
if we start using some of these standard

00:13:01,580 --> 00:13:06,270
tools but there's diminishing returns in

00:13:04,560 --> 00:13:09,240
some of these how is one of the most

00:13:06,270 --> 00:13:12,270
simple versions out there collection

00:13:09,240 --> 00:13:13,590
Jason is another one i quoted michael

00:13:12,270 --> 00:13:15,600
Munson earlier on the hypermedia types

00:13:13,590 --> 00:13:18,240
collection Jason is one of his

00:13:15,600 --> 00:13:21,390
collection Jason is Jason based and it's

00:13:18,240 --> 00:13:24,070
a read/write hypermedia type designed to

00:13:21,390 --> 00:13:29,320
sport managing and querying docum

00:13:24,070 --> 00:13:30,940
it looks like this in this every object

00:13:29,320 --> 00:13:32,920
that comes back to media type has this

00:13:30,940 --> 00:13:36,100
collection wrapper and inside of there

00:13:32,920 --> 00:13:37,990
and subversion an href and then a lynx

00:13:36,100 --> 00:13:42,580
array like Hal had an items array

00:13:37,990 --> 00:13:44,560
queries are a template and error the

00:13:42,580 --> 00:13:46,890
rails way when we're doing API is most

00:13:44,560 --> 00:13:51,400
of the time we're returning bear rays

00:13:46,890 --> 00:13:53,230
which is an easy way to just consume

00:13:51,400 --> 00:13:55,030
data but we lose a lot of the metadata

00:13:53,230 --> 00:13:58,150
around that pagination is a good example

00:13:55,030 --> 00:14:00,790
of that where if you're pulling back

00:13:58,150 --> 00:14:04,090
from a rails API and there's thousands

00:14:00,790 --> 00:14:05,350
of results and you get the first page of

00:14:04,090 --> 00:14:08,050
that there's really no way of knowing

00:14:05,350 --> 00:14:10,060
how many are in the full set so you have

00:14:08,050 --> 00:14:12,250
to do crazy header tricks to kind of

00:14:10,060 --> 00:14:14,980
return that information or you need to

00:14:12,250 --> 00:14:17,440
put the data down a level and hang on a

00:14:14,980 --> 00:14:19,030
response envelope that has some metadata

00:14:17,440 --> 00:14:20,740
hanging off of it and then an items

00:14:19,030 --> 00:14:23,190
collection items array that you can then

00:14:20,740 --> 00:14:27,310
lop off that seems to be a popular

00:14:23,190 --> 00:14:29,800
approach but in out of the box the rails

00:14:27,310 --> 00:14:32,320
way is just to have bear raise this is

00:14:29,800 --> 00:14:37,420
quite an elegant format but it gets

00:14:32,320 --> 00:14:40,660
complicated really quickly if you read

00:14:37,420 --> 00:14:42,610
the draft speck of this it's full of the

00:14:40,660 --> 00:14:47,050
typical spec language it must have shall

00:14:42,610 --> 00:14:49,060
not all of that and I guess for me and

00:14:47,050 --> 00:14:51,340
has diminishing returns and how valuable

00:14:49,060 --> 00:14:53,460
it is to get your data into somebody

00:14:51,340 --> 00:14:55,360
else's format anybody done any

00:14:53,460 --> 00:14:59,590
shoehorning of your data inside of it

00:14:55,360 --> 00:15:02,320
like an atom format it's it's not fun

00:14:59,590 --> 00:15:07,090
times i think adam says it better than I

00:15:02,320 --> 00:15:09,160
could because of the two boiled his

00:15:07,090 --> 00:15:11,890
point down here he wants to build things

00:15:09,160 --> 00:15:14,440
with an API expose things with an API

00:15:11,890 --> 00:15:16,270
not spend as time educating people in

00:15:14,440 --> 00:15:17,830
hypermedia which just seems to be like

00:15:16,270 --> 00:15:19,390
what a lot of a hypermedia crowd does is

00:15:17,830 --> 00:15:25,210
talking about however media not really

00:15:19,390 --> 00:15:28,330
building anything so the reason I wanted

00:15:25,210 --> 00:15:30,370
to talk about this today is because the

00:15:28,330 --> 00:15:34,810
github API is often held up as kind of

00:15:30,370 --> 00:15:36,649
like the best real world hypermedia API

00:15:34,810 --> 00:15:38,600
that we've got outside of the

00:15:36,649 --> 00:15:41,779
dungeon chess game or whatever it is

00:15:38,600 --> 00:15:42,889
that Mike's created that you can hit

00:15:41,779 --> 00:15:44,480
that endpoint and kind of walk your way

00:15:42,889 --> 00:15:47,420
through this maze that he's created is

00:15:44,480 --> 00:15:50,480
kind of canonical hypermedia API people

00:15:47,420 --> 00:15:53,029
look at our hypermedia URLs and they'll

00:15:50,480 --> 00:15:54,800
say well github is doing it and I I just

00:15:53,029 --> 00:15:56,449
want to kind of convey we're

00:15:54,800 --> 00:15:58,429
experimenting as we go for what makes

00:15:56,449 --> 00:16:00,860
sense there's some drawbacks to a

00:15:58,429 --> 00:16:03,740
hypermedia API there's some some big

00:16:00,860 --> 00:16:06,679
benefits but I want to kind of temper

00:16:03,740 --> 00:16:10,279
that with it's not all roses it's not a

00:16:06,679 --> 00:16:14,449
silver bullet another quick detour over

00:16:10,279 --> 00:16:20,619
talking about specs this is kind of high

00:16:14,449 --> 00:16:25,999
philabelle anybody read aspect lightly

00:16:20,619 --> 00:16:29,809
online nobody reads these things I can't

00:16:25,999 --> 00:16:31,879
this is is kind of my point this is what

00:16:29,809 --> 00:16:34,819
they look at and it looked like this is

00:16:31,879 --> 00:16:38,529
one page and I think the thing that bugs

00:16:34,819 --> 00:16:40,759
me the most about all of these specs is

00:16:38,529 --> 00:16:43,220
their delivered in these little

00:16:40,759 --> 00:16:44,749
bite-size chunks that now with you know

00:16:43,220 --> 00:16:47,809
a 30-inch monitor you get about four of

00:16:44,749 --> 00:16:49,309
these to a page and you're just paging

00:16:47,809 --> 00:16:51,769
down through all of these and I I don't

00:16:49,309 --> 00:16:52,850
know at what point people if they ever

00:16:51,769 --> 00:16:55,429
printed these out and put them in a

00:16:52,850 --> 00:16:56,749
binder but I don't think anybody's doing

00:16:55,429 --> 00:16:58,579
that anymore I think we need to find a

00:16:56,749 --> 00:17:02,329
better format to deliver this

00:16:58,579 --> 00:17:06,350
information but specs are paying to

00:17:02,329 --> 00:17:08,390
write and in all media types really

00:17:06,350 --> 00:17:10,370
depend the hypermedia types depend on

00:17:08,390 --> 00:17:12,819
this basically your contract is your

00:17:10,370 --> 00:17:15,230
spec here's what goes into the type and

00:17:12,819 --> 00:17:18,890
that's one reason why my I guess is big

00:17:15,230 --> 00:17:21,549
on HTML is because he feels the spec is

00:17:18,890 --> 00:17:24,110
the contract and the API client

00:17:21,549 --> 00:17:27,679
developer looks at the spec to determine

00:17:24,110 --> 00:17:29,870
what should go into this HTML blah so if

00:17:27,679 --> 00:17:30,950
you've ever returned data in HTML or XML

00:17:29,870 --> 00:17:33,289
for that matter everything comes back a

00:17:30,950 --> 00:17:36,590
string and nothing aggravates me more

00:17:33,289 --> 00:17:38,240
than coming seeing an xml array or an

00:17:36,590 --> 00:17:40,010
array serializing xml with a singular

00:17:38,240 --> 00:17:44,690
name on it this is type equals array

00:17:40,010 --> 00:17:47,299
just kind of bugs you where's with Jason

00:17:44,690 --> 00:17:49,730
you get a raise you get primitive types

00:17:47,299 --> 00:17:53,340
just out of the box right

00:17:49,730 --> 00:17:55,679
so depending on a format like HTML or

00:17:53,340 --> 00:17:57,090
XML that's not easily possible and

00:17:55,679 --> 00:18:00,899
you've got to add all the semantics on

00:17:57,090 --> 00:18:02,850
to it puts the burden on the client

00:18:00,899 --> 00:18:05,490
developer to read a spec before he pokes

00:18:02,850 --> 00:18:06,659
on your API right so spikes are paying

00:18:05,490 --> 00:18:08,640
to right there also paying to read

00:18:06,659 --> 00:18:10,710
nobody's got time for the stuff right

00:18:08,640 --> 00:18:13,529
and if that's your contract to consume

00:18:10,710 --> 00:18:16,230
API it's not curl friendly if you've

00:18:13,529 --> 00:18:19,470
done any work with an OAuth library

00:18:16,230 --> 00:18:22,710
lately hug whoever made that library

00:18:19,470 --> 00:18:26,399
because they're a pain to write the pain

00:18:22,710 --> 00:18:29,490
to test oftentimes a pain to use that

00:18:26,399 --> 00:18:32,100
said there's some cool ideas in the

00:18:29,490 --> 00:18:34,260
hypermedia world that I really like some

00:18:32,100 --> 00:18:35,820
of those involve specs but there I guess

00:18:34,260 --> 00:18:38,220
thumb down to the point where they're

00:18:35,820 --> 00:18:41,789
easy to DeGraw one of those is URI

00:18:38,220 --> 00:18:49,649
templates anybody use these they look

00:18:41,789 --> 00:18:52,429
like this so if you hit our entry point

00:18:49,649 --> 00:18:55,860
for the github API now we've got a

00:18:52,429 --> 00:18:59,100
growing list of all of the URLs that you

00:18:55,860 --> 00:19:00,389
can follow within the API I hypermedia

00:18:59,100 --> 00:19:04,830
types because that's that's the deal

00:19:00,389 --> 00:19:07,230
about a hypermedia URL RV media API you

00:19:04,830 --> 00:19:08,789
follow links on resources so

00:19:07,230 --> 00:19:10,350
everything's either got to follow the

00:19:08,789 --> 00:19:14,330
chain down four levels deep to get this

00:19:10,350 --> 00:19:17,880
resource or you have these / memorized

00:19:14,330 --> 00:19:20,220
URLs that you can skip directly to what

00:19:17,880 --> 00:19:21,659
you want so in this case repository URL

00:19:20,220 --> 00:19:23,519
this is the one that I think it's the

00:19:21,659 --> 00:19:24,929
most prominent on get up you know

00:19:23,519 --> 00:19:27,539
somebody's username in the project name

00:19:24,929 --> 00:19:28,860
you can get to the get up project

00:19:27,539 --> 00:19:30,480
without having to go and search for it

00:19:28,860 --> 00:19:34,380
right so this is kind of just how our

00:19:30,480 --> 00:19:39,059
brains work around github this is a

00:19:34,380 --> 00:19:42,059
temple dies oops well button a template

00:19:39,059 --> 00:19:45,750
eyes version of that so the braces are

00:19:42,059 --> 00:19:48,029
placeholders for those parameters so

00:19:45,750 --> 00:19:50,250
using the URI template gem and you also

00:19:48,029 --> 00:19:54,210
can I think use the addressable gym

00:19:50,250 --> 00:19:55,919
supports this to some degree now create

00:19:54,210 --> 00:20:00,300
a template object from this passing it

00:19:55,919 --> 00:20:04,300
in a URL and then expand that passing it

00:20:00,300 --> 00:20:08,380
values and it gets normalized out to

00:20:04,300 --> 00:20:09,820
that full URL which is pretty cool but

00:20:08,380 --> 00:20:12,330
it also works with query string

00:20:09,820 --> 00:20:14,650
parameters so you can have a parameter

00:20:12,330 --> 00:20:17,260
the keyword parameter just goes in the

00:20:14,650 --> 00:20:19,780
URL segment the optional query string

00:20:17,260 --> 00:20:21,310
parameters after that and the URI

00:20:19,780 --> 00:20:26,650
template library knows how to handle

00:20:21,310 --> 00:20:28,600
those which is really cool one of the

00:20:26,650 --> 00:20:32,230
things I think that's going to have to

00:20:28,600 --> 00:20:34,840
happen for a hypermedia to really catch

00:20:32,230 --> 00:20:39,040
on is this notion of hypermedia agents

00:20:34,840 --> 00:20:41,470
because right now a lot of the when

00:20:39,040 --> 00:20:43,480
people say we need to build hi pap eyes

00:20:41,470 --> 00:20:46,150
like hybrid media API is because that's

00:20:43,480 --> 00:20:48,970
how the web works they're making a big

00:20:46,150 --> 00:20:51,640
jump between how your browser works and

00:20:48,970 --> 00:20:55,210
how curl works or how this script that's

00:20:51,640 --> 00:20:56,560
automating some work works the reason

00:20:55,210 --> 00:20:57,880
for that is your browser does a lot of

00:20:56,560 --> 00:21:00,250
smart things for you behind the hoods

00:20:57,880 --> 00:21:04,420
behind the scenes with conditional

00:21:00,250 --> 00:21:05,940
requests and caching being two big ones

00:21:04,420 --> 00:21:09,520
following redirects is the third one

00:21:05,940 --> 00:21:11,980
that just don't happen by default in

00:21:09,520 --> 00:21:13,840
script because someone's building a URL

00:21:11,980 --> 00:21:15,130
based on I these that they know they're

00:21:13,840 --> 00:21:16,770
making a call they're expecting some

00:21:15,130 --> 00:21:20,980
output the parsing results and they're

00:21:16,770 --> 00:21:23,260
consuming it you need something a little

00:21:20,980 --> 00:21:25,720
higher level that when they're walking

00:21:23,260 --> 00:21:27,490
the links you follow that front door

00:21:25,720 --> 00:21:30,580
from an API and you're following those

00:21:27,490 --> 00:21:32,770
resources down the stack you've got to

00:21:30,580 --> 00:21:35,560
ask yourself do already have the front

00:21:32,770 --> 00:21:37,060
door to I have this first level resource

00:21:35,560 --> 00:21:38,800
already so I can just consume it from

00:21:37,060 --> 00:21:40,930
cash instead of making another HTTP call

00:21:38,800 --> 00:21:42,940
these are the types of things that come

00:21:40,930 --> 00:21:47,530
into play when you're building any sort

00:21:42,940 --> 00:21:50,110
of performant hypermedia client and a

00:21:47,530 --> 00:21:52,000
lot of these were built into something

00:21:50,110 --> 00:21:53,680
called a hypermedia agent one of these

00:21:52,000 --> 00:21:58,330
that I really like in the Ruby community

00:21:53,680 --> 00:21:59,920
is called Sawyer these are Springfield

00:21:58,330 --> 00:22:03,310
punks I don't if you've seen this blog

00:21:59,920 --> 00:22:06,810
but freak the guy's name but he's

00:22:03,310 --> 00:22:09,430
created all of these popular characters

00:22:06,810 --> 00:22:12,640
across all pop culture but as if they

00:22:09,430 --> 00:22:13,890
were simpsons characters so he did a

00:22:12,640 --> 00:22:16,740
whole lost series which is

00:22:13,890 --> 00:22:21,330
just phenomenal Rick Olsen Tecna weenie

00:22:16,740 --> 00:22:23,250
at github has a whole lost theme set of

00:22:21,330 --> 00:22:25,560
projects Sawyer's the latest it's a

00:22:23,250 --> 00:22:28,350
hypermedia agent it's built on top of

00:22:25,560 --> 00:22:33,300
Faraday which I lost that slide here it

00:22:28,350 --> 00:22:38,010
is go back so there's Faraday Faraday is

00:22:33,300 --> 00:22:40,200
think of it as a little bit broader base

00:22:38,010 --> 00:22:41,760
HTTP party if you use that one a little

00:22:40,200 --> 00:22:44,010
bit more pluggable as far as transport

00:22:41,760 --> 00:22:45,210
agent and as a middleware stack kind of

00:22:44,010 --> 00:22:47,280
like rack that you can plug into it

00:22:45,210 --> 00:22:49,040
which is really cool we use an octa kid

00:22:47,280 --> 00:22:52,830
and the LinkedIn gem and some others

00:22:49,040 --> 00:22:54,630
this is what Sawyer looks like basically

00:22:52,830 --> 00:22:56,420
give it an endpoint in this case

00:22:54,630 --> 00:22:59,160
something running on the localhost

00:22:56,420 --> 00:23:01,650
create a new agent and call agent start

00:22:59,160 --> 00:23:05,340
and that's just going to find that route

00:23:01,650 --> 00:23:08,430
document and what every level the stack

00:23:05,340 --> 00:23:11,790
and Sawyer does is essentially grabs the

00:23:08,430 --> 00:23:14,100
resource and it separates the data from

00:23:11,790 --> 00:23:16,110
the realms the relations you've got kind

00:23:14,100 --> 00:23:18,420
of two buckets from that point on that

00:23:16,110 --> 00:23:19,680
and a response object sticks around as

00:23:18,420 --> 00:23:22,830
well so that you can consume the raw

00:23:19,680 --> 00:23:25,080
HTTP response codes if you need to but

00:23:22,830 --> 00:23:28,200
you can then use the data every level of

00:23:25,080 --> 00:23:30,810
data then has a set of rails associated

00:23:28,200 --> 00:23:33,390
that so you kind of walk the tree in

00:23:30,810 --> 00:23:36,900
this case calling agent start would get

00:23:33,390 --> 00:23:39,420
a list of resources that you could call

00:23:36,900 --> 00:23:41,820
one of this is the users URL in this

00:23:39,420 --> 00:23:44,070
case it's going to call get on that so

00:23:41,820 --> 00:23:46,320
just using dot notation get post put all

00:23:44,070 --> 00:23:48,270
the HTTP verbs and then called data on

00:23:46,320 --> 00:23:51,690
that would give you the data for all of

00:23:48,270 --> 00:23:53,100
the users in this very simple case so

00:23:51,690 --> 00:23:54,780
what I showed you earlier and you've

00:23:53,100 --> 00:23:57,690
probably seen from the the github API

00:23:54,780 --> 00:24:00,090
we've got kind of two flavors of the

00:23:57,690 --> 00:24:02,460
rels and the github API they get a

00:24:00,090 --> 00:24:06,060
status API they're all the underscore

00:24:02,460 --> 00:24:07,830
URL variety there's no relation type

00:24:06,060 --> 00:24:13,110
hanging off there's no it's not a hash

00:24:07,830 --> 00:24:16,800
just a name value pair that permeates

00:24:13,110 --> 00:24:20,280
most of the github API we do have some

00:24:16,800 --> 00:24:22,710
of the hal style link hashes on the pull

00:24:20,280 --> 00:24:24,750
requests and some of the newer resource

00:24:22,710 --> 00:24:25,680
endpoints but we have it we made the

00:24:24,750 --> 00:24:27,290
decision we're going to stick with the

00:24:25,680 --> 00:24:28,880
underscore URL and the next

00:24:27,290 --> 00:24:30,170
the API kind of deprecated that links

00:24:28,880 --> 00:24:32,090
hash just because we weren't finding

00:24:30,170 --> 00:24:33,680
enough use out of it in the way that we

00:24:32,090 --> 00:24:35,810
were using it to kind of justify the

00:24:33,680 --> 00:24:39,950
overhead of the way we were serializing

00:24:35,810 --> 00:24:42,740
the Jason for that Sawyer out of the box

00:24:39,950 --> 00:24:44,180
looked at how style resources grab that

00:24:42,740 --> 00:24:46,370
links hash and that's how it separated

00:24:44,180 --> 00:24:48,320
it new data from links right just look

00:24:46,370 --> 00:24:49,790
for underscore link slop that off that

00:24:48,320 --> 00:24:52,630
was your links hash and then the rest of

00:24:49,790 --> 00:24:57,860
its data which is pretty easy to follow

00:24:52,630 --> 00:25:00,980
so on a branch an octo kit I'm creating

00:24:57,860 --> 00:25:02,360
a hypermedia version of octo kit that

00:25:00,980 --> 00:25:07,490
consumes the hypermedia features are

00:25:02,360 --> 00:25:09,020
putting into the github API but since so

00:25:07,490 --> 00:25:11,720
you're only knew about the links hash

00:25:09,020 --> 00:25:14,090
style the house style it needed to

00:25:11,720 --> 00:25:16,520
follow those underscore URL so spilled a

00:25:14,090 --> 00:25:18,890
real quick and dirty simple parser that

00:25:16,520 --> 00:25:21,470
will look at the underscore URL version

00:25:18,890 --> 00:25:25,100
can and lop those off put them in the

00:25:21,470 --> 00:25:26,420
length sash that that's all you're

00:25:25,100 --> 00:25:29,120
expects and then everything works from

00:25:26,420 --> 00:25:30,890
there I've been really cycled with the

00:25:29,120 --> 00:25:32,630
progress on that thing but it's it's one

00:25:30,890 --> 00:25:34,370
of those projects where you're building

00:25:32,630 --> 00:25:35,900
a you're driving across the bridge as

00:25:34,370 --> 00:25:38,090
you're building it straddling a few

00:25:35,900 --> 00:25:39,530
projects we're extending the API extinct

00:25:38,090 --> 00:25:45,530
Sawyer and extending octa kit at the

00:25:39,530 --> 00:25:48,410
same time and this is the the full batch

00:25:45,530 --> 00:25:50,810
of velocities will get plenty of room to

00:25:48,410 --> 00:25:54,050
throw some more lost themed projects

00:25:50,810 --> 00:25:57,020
Rick's created an organization al called

00:25:54,050 --> 00:25:59,030
Lost Island on github we're throwing

00:25:57,020 --> 00:26:03,410
Faraday I moved to my Faraday middleware

00:25:59,030 --> 00:26:05,150
project up there so if you have any Fair

00:26:03,410 --> 00:26:07,190
Day themed projects the more the merrier

00:26:05,150 --> 00:26:13,190
just ping us and drop them on that

00:26:07,190 --> 00:26:15,650
network now so regarding hypermedia I

00:26:13,190 --> 00:26:18,020
throw this this graph in almost every

00:26:15,650 --> 00:26:19,460
talk am I now I and I don't set out to

00:26:18,020 --> 00:26:23,270
do it it just seems like to find its way

00:26:19,460 --> 00:26:24,980
back into it so this one's kind of meta

00:26:23,270 --> 00:26:27,650
because we're talking about the Gartner

00:26:24,980 --> 00:26:30,280
hype cycle this is hyper medias was kind

00:26:27,650 --> 00:26:34,130
of the gardener hypermedia cycle anybody

00:26:30,280 --> 00:26:36,530
not familiar with with this essentially

00:26:34,130 --> 00:26:38,450
what it what it says is there's a

00:26:36,530 --> 00:26:40,620
technology trigger of some sort of new

00:26:38,450 --> 00:26:42,550
technology new quiz bang

00:26:40,620 --> 00:26:45,280
something makes it the top of hacker

00:26:42,550 --> 00:26:46,690
news right actually even before that

00:26:45,280 --> 00:26:48,610
hacker news would be this next step

00:26:46,690 --> 00:26:50,410
something somebody does a blog post and

00:26:48,610 --> 00:26:53,850
blow somebody's mind and they start

00:26:50,410 --> 00:26:56,590
hacking on it hack night or something

00:26:53,850 --> 00:26:59,770
works up this slope up to it makes to

00:26:56,590 --> 00:27:02,800
the top of hacker news right we get this

00:26:59,770 --> 00:27:04,570
peak of inflated expectations and then

00:27:02,800 --> 00:27:06,880
something like a web-scale video comes

00:27:04,570 --> 00:27:08,830
out and suddenly you're in this trough

00:27:06,880 --> 00:27:09,970
of disillusionment write this thing you

00:27:08,830 --> 00:27:11,230
sold your manager on that you're going

00:27:09,970 --> 00:27:13,090
to use it's going to save the world is

00:27:11,230 --> 00:27:15,490
now kind of a laughingstock of the

00:27:13,090 --> 00:27:17,530
community then once that dies down

00:27:15,490 --> 00:27:19,540
there's the slope of enlightenment maybe

00:27:17,530 --> 00:27:22,300
it's not all that it was cracked up to

00:27:19,540 --> 00:27:25,690
be but we have found uses for it certain

00:27:22,300 --> 00:27:28,360
areas of the company we can plug this in

00:27:25,690 --> 00:27:30,250
it's going to be a good tool and then it

00:27:28,360 --> 00:27:31,870
kind of levels out of this plateau of

00:27:30,250 --> 00:27:35,440
productivity I'm not sure where we are

00:27:31,870 --> 00:27:37,000
with hypermedia on this the scale we

00:27:35,440 --> 00:27:39,730
either heading into that trough for

00:27:37,000 --> 00:27:43,150
coming out of the trough it's neither a

00:27:39,730 --> 00:27:46,200
silver bullet nor is it something that

00:27:43,150 --> 00:27:49,180
should be avoided I think the takeaway

00:27:46,200 --> 00:27:51,700
to sum up dhh recently as you know be a

00:27:49,180 --> 00:27:55,390
chap use links but don't be dogmatic

00:27:51,700 --> 00:27:56,740
about it there's some drawbacks of that

00:27:55,390 --> 00:27:58,630
so that kind of want to talk for the

00:27:56,740 --> 00:28:01,900
next little bit that I have left the

00:27:58,630 --> 00:28:04,450
next 12 minutes or something is some API

00:28:01,900 --> 00:28:05,740
real talk and I've all of the means that

00:28:04,450 --> 00:28:07,890
we use at work had blurred between

00:28:05,740 --> 00:28:10,600
what's a github meme and what's like a

00:28:07,890 --> 00:28:11,740
Internet at large meme so I don't know

00:28:10,600 --> 00:28:12,850
there's real talk a thing or is that

00:28:11,740 --> 00:28:15,940
just something good hover say to each

00:28:12,850 --> 00:28:18,550
other ok cool all right so any time puts

00:28:15,940 --> 00:28:20,620
anybody anytime someone puts real talk

00:28:18,550 --> 00:28:23,650
at our campfire it plays this clip real

00:28:20,620 --> 00:28:26,500
talk and it's like throughout the day

00:28:23,650 --> 00:28:32,200
just the things just lighten up my sound

00:28:26,500 --> 00:28:34,450
I have to mute it but I think there's

00:28:32,200 --> 00:28:36,790
something good in talking about api's

00:28:34,450 --> 00:28:39,610
and taking off the rose-colored glasses

00:28:36,790 --> 00:28:42,790
for a minute and just looking at an

00:28:39,610 --> 00:28:44,050
honest look at your API if you're

00:28:42,790 --> 00:28:46,420
building one who's building an API by

00:28:44,050 --> 00:28:51,180
the way I meant to ask that earlier cool

00:28:46,420 --> 00:28:54,250
who's built a wrapper for set API cool

00:28:51,180 --> 00:28:57,640
the first thing is your API is hype

00:28:54,250 --> 00:28:59,920
Oh media so if hyper means hi hi Bo

00:28:57,640 --> 00:29:01,900
means low right you probably aren't

00:28:59,920 --> 00:29:04,990
using media types as much as you should

00:29:01,900 --> 00:29:09,310
let me do a quick demo kind of show what

00:29:04,990 --> 00:29:14,560
we're doing with this with github like a

00:29:09,310 --> 00:29:23,470
new software updates lovely see if I can

00:29:14,560 --> 00:29:27,970
throw this on the second screen you guys

00:29:23,470 --> 00:29:29,650
see that cool so if I and I'm going to

00:29:27,970 --> 00:29:32,410
use something called gr curl which is

00:29:29,650 --> 00:29:33,940
just curl pipe the GRC for color so if

00:29:32,410 --> 00:29:37,810
you're interested just check my blog

00:29:33,940 --> 00:29:41,470
uzum article on GRC to colorize all the

00:29:37,810 --> 00:29:47,970
things so if I grab a pull request real

00:29:41,470 --> 00:29:47,970
quick sevagram of the API URL here

00:29:56,130 --> 00:30:00,789
believe it's number 80 there we go made

00:29:58,990 --> 00:30:02,950
it big so you can see it but things grow

00:30:00,789 --> 00:30:05,559
really quickly this is a JSON

00:30:02,950 --> 00:30:08,200
representation of a pull request we

00:30:05,559 --> 00:30:11,590
actually have the ability to hit a

00:30:08,200 --> 00:30:14,799
readme let me had a defunct cas because

00:30:11,590 --> 00:30:19,330
it's easier to type here in the API you

00:30:14,799 --> 00:30:21,760
can hit a readme resource j/s that's the

00:30:19,330 --> 00:30:26,620
repo yeah cool so I can type / read me

00:30:21,760 --> 00:30:27,640
and I'm sure you guys can on base64 that

00:30:26,620 --> 00:30:30,639
in your head to see what the Riemann

00:30:27,640 --> 00:30:32,409
says right so this is one of those

00:30:30,639 --> 00:30:34,210
things where you do a JSON API and

00:30:32,409 --> 00:30:36,309
you're doing binary files that you know

00:30:34,210 --> 00:30:40,720
things get encoded but what you really

00:30:36,309 --> 00:30:44,559
want is the raw format of that so I can

00:30:40,720 --> 00:30:46,059
pass the accept header pass a different

00:30:44,559 --> 00:30:49,779
media tower different mind type in this

00:30:46,059 --> 00:30:53,559
case application the indie github so

00:30:49,779 --> 00:30:56,500
vendor github raw ugly yeah there we go

00:30:53,559 --> 00:30:58,630
that's the raw markdown same resource

00:30:56,500 --> 00:31:00,159
notice it was an extra query string

00:30:58,630 --> 00:31:01,659
parameter to output type equals this

00:31:00,159 --> 00:31:03,250
some bachelor ization of the querystring

00:31:01,659 --> 00:31:05,590
parameter is just the different accept

00:31:03,250 --> 00:31:07,570
header right we kind of take this for

00:31:05,590 --> 00:31:09,399
granted in rails with adding the Jason

00:31:07,570 --> 00:31:10,510
and things like that but most of this

00:31:09,399 --> 00:31:11,620
really belongs in the accept header

00:31:10,510 --> 00:31:14,320
because that's what those format strings

00:31:11,620 --> 00:31:18,010
are doing for you anyway raw I could

00:31:14,320 --> 00:31:19,750
type HTML and we render that we even

00:31:18,010 --> 00:31:22,179
have a markdown endpoint case you didn't

00:31:19,750 --> 00:31:24,399
know pass it any mark down and have it

00:31:22,179 --> 00:31:25,720
render HTML on the fly you can pass it

00:31:24,399 --> 00:31:27,340
if you want the github flavored mark

00:31:25,720 --> 00:31:30,100
down that lincoff eyes all of the

00:31:27,340 --> 00:31:34,649
project issue shorthand just pass it a

00:31:30,100 --> 00:31:37,570
project name in that argument it will

00:31:34,649 --> 00:31:39,549
render it as if it were marked down in

00:31:37,570 --> 00:31:41,590
that project which is really cool now

00:31:39,549 --> 00:31:43,929
these are pretty simple examples of just

00:31:41,590 --> 00:31:46,720
mime types raw HTML and by default it

00:31:43,929 --> 00:31:49,480
was Jason but we've done some other

00:31:46,720 --> 00:31:51,490
things in the github API which I thought

00:31:49,480 --> 00:31:53,559
were really cool unique cases of this so

00:31:51,490 --> 00:32:00,519
this is the JSON representation of this

00:31:53,559 --> 00:32:03,630
pull request but we also support this

00:32:00,519 --> 00:32:03,630
one it's just really cool

00:32:05,400 --> 00:32:09,210
oops except

00:32:14,370 --> 00:32:21,390
so if you want a diff like that pull

00:32:18,059 --> 00:32:26,870
request just pass the diff idiot I also

00:32:21,390 --> 00:32:29,160
patch I thought that was really cool

00:32:26,870 --> 00:32:34,280
just a different media types to power

00:32:29,160 --> 00:32:34,280
the same resource jump back over to

00:32:43,680 --> 00:32:48,360
there you go

00:32:46,320 --> 00:32:51,840
another hard truth about AP is as

00:32:48,360 --> 00:32:53,730
developers don't read your docs so one

00:32:51,840 --> 00:32:56,880
of the simple use cases for hypermedia

00:32:53,730 --> 00:32:58,919
is don't build URLs I guess is the the

00:32:56,880 --> 00:33:00,659
mantra of hypermedia use the URLs the

00:32:58,919 --> 00:33:05,720
server returns there's something in

00:33:00,659 --> 00:33:07,860
inherently intrinsic or innate about

00:33:05,720 --> 00:33:10,759
pagination than any developer when he

00:33:07,860 --> 00:33:13,230
sees a list of something well just

00:33:10,759 --> 00:33:15,269
intuitively start adding page equal blob

00:33:13,230 --> 00:33:17,009
per page equal blah and just hope

00:33:15,269 --> 00:33:18,539
something comes back which works in most

00:33:17,009 --> 00:33:21,509
cases that's how most of our resources

00:33:18,539 --> 00:33:23,490
for the good of API are paginate 'add

00:33:21,509 --> 00:33:26,669
except for our commits which are commits

00:33:23,490 --> 00:33:27,870
have to paginate via a sha that's a

00:33:26,669 --> 00:33:29,129
cursor because we're going back to get

00:33:27,870 --> 00:33:30,779
history we have no idea how many pages

00:33:29,129 --> 00:33:33,029
is going to be because just the way it

00:33:30,779 --> 00:33:35,159
works right so we throw the pagination

00:33:33,029 --> 00:33:39,240
links in the link response header it's a

00:33:35,159 --> 00:33:40,889
aspect it's a blessed way to do that but

00:33:39,240 --> 00:33:42,929
in our docs are pretty plain about that

00:33:40,889 --> 00:33:44,460
you know don't you doin pagination don't

00:33:42,929 --> 00:33:46,830
build your own URLs take the ones that

00:33:44,460 --> 00:33:49,019
their server gives to you so many help

00:33:46,830 --> 00:33:51,029
requests during the week of you know I'm

00:33:49,019 --> 00:33:54,259
asking for page 42 and it's not coming

00:33:51,029 --> 00:33:57,629
back with with anything so no matter how

00:33:54,259 --> 00:33:59,029
good you are explaining upfront fly your

00:33:57,629 --> 00:34:01,289
server does something the way it does

00:33:59,029 --> 00:34:02,549
you're going to have the PHP script

00:34:01,289 --> 00:34:07,379
kiddie that's not going to read it and

00:34:02,549 --> 00:34:09,869
start banging on it something else

00:34:07,379 --> 00:34:15,359
you're probably not doing is dogfooding

00:34:09,869 --> 00:34:17,960
it if you want your API to be successful

00:34:15,359 --> 00:34:20,010
build something meaningful with it

00:34:17,960 --> 00:34:22,369
realize the value that you're providing

00:34:20,010 --> 00:34:25,260
to other people and don't shoot for this

00:34:22,369 --> 00:34:28,319
persona out there that you think is

00:34:25,260 --> 00:34:29,639
going to be consuming your API but build

00:34:28,319 --> 00:34:31,800
something meaningful with it yourself

00:34:29,639 --> 00:34:33,750
and github we use the get of API to

00:34:31,800 --> 00:34:36,510
build genki which is our CI server which

00:34:33,750 --> 00:34:39,450
is cubot on top of Jenkins heaven which

00:34:36,510 --> 00:34:42,540
is our deployment server our monitors

00:34:39,450 --> 00:34:44,760
app so we've got screens around the

00:34:42,540 --> 00:34:47,069
office plus iPads throughout the world

00:34:44,760 --> 00:34:48,480
that are secondary displays with

00:34:47,069 --> 00:34:51,270
whatever metrics that we want to follow

00:34:48,480 --> 00:34:54,990
our team applications are internal

00:34:51,270 --> 00:34:57,119
Twitter our higher application which is

00:34:54,990 --> 00:34:58,920
how we hire candidates and filter

00:34:57,119 --> 00:34:59,970
candidates the setup which is now box on

00:34:58,920 --> 00:35:02,790
this should update the slide

00:34:59,970 --> 00:35:04,890
boxing that came out last week the graph

00:35:02,790 --> 00:35:06,750
store which is graphite but the really

00:35:04,890 --> 00:35:11,570
slick design interface on top of it so

00:35:06,750 --> 00:35:14,130
within campfire we have all these small

00:35:11,570 --> 00:35:15,690
graph commands that we can see metrics

00:35:14,130 --> 00:35:17,880
on just about anything that we want to

00:35:15,690 --> 00:35:21,380
do all of this user uses the getup API

00:35:17,880 --> 00:35:23,810
in some aspect so how we use the API

00:35:21,380 --> 00:35:28,230
authorization or authentication off n

00:35:23,810 --> 00:35:31,950
authorization LZ merging so heaven

00:35:28,230 --> 00:35:33,780
actually uses the API to merge your pull

00:35:31,950 --> 00:35:36,750
request so when I say deploy my branch

00:35:33,780 --> 00:35:39,180
to production heaven goes out and says

00:35:36,750 --> 00:35:41,280
okay is master in this branch if not I'm

00:35:39,180 --> 00:35:43,710
going to merge it in and once it goes

00:35:41,280 --> 00:35:46,290
green it throws it out in production it

00:35:43,710 --> 00:35:49,470
doesn't go green and says a your red I

00:35:46,290 --> 00:35:51,030
can't deploy that commit status which we

00:35:49,470 --> 00:35:53,099
launched not too long ago anybody using

00:35:51,030 --> 00:35:55,349
Travis CI or similar service with their

00:35:53,099 --> 00:35:58,530
cool yeah we use it internally with

00:35:55,349 --> 00:36:00,390
genki but Travis uses the same API to

00:35:58,530 --> 00:36:03,450
have your code built and updates the

00:36:00,390 --> 00:36:06,030
pull request with the build status and

00:36:03,450 --> 00:36:11,099
github flavored markdown the native apps

00:36:06,030 --> 00:36:15,270
are using that as well another real

00:36:11,099 --> 00:36:18,570
truth of API talk documentation aside

00:36:15,270 --> 00:36:21,330
developers don't even like respond to

00:36:18,570 --> 00:36:25,339
your server responses how you intend

00:36:21,330 --> 00:36:28,440
even even the most basic ones right so a

00:36:25,339 --> 00:36:31,470
server sends a 200 everything's

00:36:28,440 --> 00:36:34,770
hunky-dory right developers get that one

00:36:31,470 --> 00:36:36,150
right so okay is okay these are symbols

00:36:34,770 --> 00:36:44,930
at the bottom because that's how rails

00:36:36,150 --> 00:36:49,430
uses some 500 internal server error the

00:36:44,930 --> 00:36:49,430
API developer sees that thing's dope

00:36:51,020 --> 00:36:58,410
43 forbidden no right but the one that

00:36:57,090 --> 00:37:00,890
blows my mind and this is kind of the

00:36:58,410 --> 00:37:04,050
one that hypermedia kind of hinges upon

00:37:00,890 --> 00:37:06,720
because if you're supposed to always

00:37:04,050 --> 00:37:09,000
return URLs and those URLs aren't

00:37:06,720 --> 00:37:10,020
supposed to change excuse me i mean the

00:37:09,000 --> 00:37:11,580
output types are supposed to change

00:37:10,020 --> 00:37:16,920
which means you have to change the value

00:37:11,580 --> 00:37:19,230
of the urls we should be able to handle

00:37:16,920 --> 00:37:20,850
30 tues and your browser does this all

00:37:19,230 --> 00:37:21,720
the time we were browsing around we

00:37:20,850 --> 00:37:23,100
don't even know that we're getting

00:37:21,720 --> 00:37:24,600
redirected every time you log into a

00:37:23,100 --> 00:37:26,160
website everything you post to forum and

00:37:24,600 --> 00:37:27,840
rails you're getting to redirect them

00:37:26,160 --> 00:37:30,000
right just so that you don't get the

00:37:27,840 --> 00:37:32,010
postback message if you hit refresh the

00:37:30,000 --> 00:37:34,890
second time for some reason though as

00:37:32,010 --> 00:37:38,070
API developers we see at 302 and we just

00:37:34,890 --> 00:37:39,660
panic I don't know what it is about API

00:37:38,070 --> 00:37:41,550
developers that will now follow a 302

00:37:39,660 --> 00:37:43,200
they're like I'm getting no data back

00:37:41,550 --> 00:37:47,570
well did you check the location header

00:37:43,200 --> 00:37:51,300
and follow that oh so what's a 302 again

00:37:47,570 --> 00:37:52,710
anybody had this Shoebat plugin I highly

00:37:51,300 --> 00:37:54,840
recommend reviewing the API work you

00:37:52,710 --> 00:37:59,340
just say status code me and it comes

00:37:54,840 --> 00:38:01,950
back with you HTTP status cats this is

00:37:59,340 --> 00:38:03,630
actually pond github our Heroku and say

00:38:01,950 --> 00:38:05,100
should be status cats just google that

00:38:03,630 --> 00:38:09,120
and it comes back with all of them which

00:38:05,100 --> 00:38:12,720
is really cool one more thing I etags

00:38:09,120 --> 00:38:16,560
are cool but nobody uses them anybody

00:38:12,720 --> 00:38:17,910
know what etags are your browser uses

00:38:16,560 --> 00:38:20,580
these all the time to see if contents

00:38:17,910 --> 00:38:24,840
fresh in this case we're calling the

00:38:20,580 --> 00:38:28,250
funks chris wanstraths get a profile so

00:38:24,840 --> 00:38:30,930
we get that back in this case whoops

00:38:28,250 --> 00:38:33,660
cache control policy is in the header

00:38:30,930 --> 00:38:35,160
the e-tag for this response is there

00:38:33,660 --> 00:38:38,430
it's basically a fingerprint a hash of

00:38:35,160 --> 00:38:40,320
that response type a response so then

00:38:38,430 --> 00:38:43,820
when I make us follow up call I can pass

00:38:40,320 --> 00:38:45,750
if none match back parrot that back and

00:38:43,820 --> 00:38:47,070
it comes back with a three or four

00:38:45,750 --> 00:38:49,680
modified so it doesn't have to compute

00:38:47,070 --> 00:38:52,170
the payload and send it across the wire

00:38:49,680 --> 00:38:55,770
doesn't do all the serialization and on

00:38:52,170 --> 00:38:57,300
the github API we will actually not

00:38:55,770 --> 00:39:00,240
count that against you on the rate limit

00:38:57,300 --> 00:39:02,070
if it's a 304 so if you pass that that

00:39:00,240 --> 00:39:04,470
back to us so it cuts down

00:39:02,070 --> 00:39:12,150
let you get squeezed more of your rate

00:39:04,470 --> 00:39:14,160
limit out of github whoops oh we also

00:39:12,150 --> 00:39:15,240
support if modified since I remember I

00:39:14,160 --> 00:39:16,920
was going with the slide if modified

00:39:15,240 --> 00:39:18,120
since is basically timestamp version of

00:39:16,920 --> 00:39:19,410
that so if you know the time but not

00:39:18,120 --> 00:39:22,830
necessarily the fingerprint you can use

00:39:19,410 --> 00:39:25,620
that as well last case here that kind of

00:39:22,830 --> 00:39:27,780
is the the other Achilles heel and

00:39:25,620 --> 00:39:30,240
hypermedia in my mind there's this

00:39:27,780 --> 00:39:32,700
constant tension in API world of how

00:39:30,240 --> 00:39:35,010
much to give back in one request HTTP

00:39:32,700 --> 00:39:38,480
requests are expensive payloads are kind

00:39:35,010 --> 00:39:41,340
of cheap but n plus 1 over HTTP is is

00:39:38,480 --> 00:39:43,020
very expensive it's it's you get around

00:39:41,340 --> 00:39:45,150
it in rails by an actor burger to

00:39:43,020 --> 00:39:46,650
include the association right and pull

00:39:45,150 --> 00:39:48,810
that back in one shot you don't have to

00:39:46,650 --> 00:39:51,720
worry about doing the the n plus one

00:39:48,810 --> 00:39:53,190
query thing but in HTTP this gets to be

00:39:51,720 --> 00:39:56,100
expensive there's this trade-off for

00:39:53,190 --> 00:40:00,150
instance a lot of our listing views are

00:39:56,100 --> 00:40:02,640
actually hitting get so we give you just

00:40:00,150 --> 00:40:04,110
just as much as you need to kind of go

00:40:02,640 --> 00:40:05,850
get that in a second colic you need it

00:40:04,110 --> 00:40:08,540
because going to the to get every time

00:40:05,850 --> 00:40:12,960
100 times and a page is really expensive

00:40:08,540 --> 00:40:14,700
so that's one example of just any API

00:40:12,960 --> 00:40:18,260
design that you're hearing that constant

00:40:14,700 --> 00:40:20,880
tension hypermedia makes this worse

00:40:18,260 --> 00:40:21,930
because now as I mentioned earlier if

00:40:20,880 --> 00:40:24,780
you everything's got to go through that

00:40:21,930 --> 00:40:26,790
front door either after parameters every

00:40:24,780 --> 00:40:28,740
URL that that you could hit and provide

00:40:26,790 --> 00:40:33,000
it in that front door and note that that

00:40:28,740 --> 00:40:34,860
link relations going to be or you've got

00:40:33,000 --> 00:40:37,230
to live with walking the tree four or

00:40:34,860 --> 00:40:39,060
five levels d to go grab that resource

00:40:37,230 --> 00:40:40,740
that's where if you don't have cashing

00:40:39,060 --> 00:40:42,180
it will kill you if every time you want

00:40:40,740 --> 00:40:44,640
to get one request or making four or

00:40:42,180 --> 00:40:48,750
five because that's how the don't break

00:40:44,640 --> 00:40:51,630
the URL path is specified in the API so

00:40:48,750 --> 00:40:55,500
it's kind of this trade-off in using

00:40:51,630 --> 00:40:57,510
hypermedia wanted to give attribution to

00:40:55,500 --> 00:40:59,190
all the icons I used in the deck these

00:40:57,510 --> 00:41:02,340
are on the noun project anybody seen the

00:40:59,190 --> 00:41:05,940
noun project com check it out if you

00:41:02,340 --> 00:41:08,010
need monochrome icons that are SVG can

00:41:05,940 --> 00:41:10,680
blow up as big as you want all of these

00:41:08,010 --> 00:41:14,779
were found on that website which I am

00:41:10,680 --> 00:41:17,779
really digging these days that's it

00:41:14,779 --> 00:41:17,779
thanks

00:41:32,400 --> 00:41:34,460

YouTube URL: https://www.youtube.com/watch?v=yVuMqV_Ul5s


