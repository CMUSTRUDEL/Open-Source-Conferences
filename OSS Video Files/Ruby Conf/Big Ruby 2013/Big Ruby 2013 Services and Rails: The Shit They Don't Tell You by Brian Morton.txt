Title: Big Ruby 2013 Services and Rails: The Shit They Don't Tell You by Brian Morton
Publication date: 2020-01-28
Playlist: Big Ruby 2013
Description: 
	Building services and integrating them into Rails is hard. We want smaller Rails apps and nicely encapsulated services, but services introduce complexity. If you go overboard in the beginning, you're doing extra work and getting some of it wrong. If you wait too long, you've got a mess.

At Yammer, we constantly clean up the mess that worked well in the early days, but has become troublesome to maintain and scale. We pull things out of the core Rails app, stand them up on their own, and make sure they work well and are fast. With 20+ services, we've learned some lessons along the way. Services that seem clean in the beginning can turn into development environment nightmares. Temporary double-dispatching solutions turn into developer confusion. Monitoring one app turns into monitoring a suite of apps and handling failure between them.

This talk looks at our mistakes and solutions, the tradeoffs, and how we're able to keep moving quickly. Having services and a smaller Rails codebase makes for scalable development teams, happier engineers, and predictable production environments. Getting there is full of hard decisions -- sometimes we're right, sometimes we fuck it up, but we usually have a story to tell.

Help us caption & translate this video!

http://amara.org/v/FGdQ/
Captions: 
	00:00:18,869 --> 00:00:24,310
so I'm going to be talking about

00:00:21,750 --> 00:00:28,000
services and rails not necessarily

00:00:24,310 --> 00:00:30,699
services in rails that it's also awesome

00:00:28,000 --> 00:00:33,670
but this is going to be home services

00:00:30,699 --> 00:00:34,870
and rails and focusing on some of the

00:00:33,670 --> 00:00:36,550
things that we don't talk about often

00:00:34,870 --> 00:00:38,830
maybe not the technology side of things

00:00:36,550 --> 00:00:40,210
maybe more of the organizational side of

00:00:38,830 --> 00:00:46,239
things and some of the other things that

00:00:40,210 --> 00:00:48,280
go into it so this is me my name is

00:00:46,239 --> 00:00:51,010
Brian I work on the rails team at Yammer

00:00:48,280 --> 00:00:53,079
and one of the things that rails team

00:00:51,010 --> 00:00:55,390
does is figure out these chunks of

00:00:53,079 --> 00:00:57,700
functionality how we can extract these

00:00:55,390 --> 00:00:59,379
into services work with other teams in

00:00:57,700 --> 00:01:00,969
the organization to do that then

00:00:59,379 --> 00:01:05,379
integrate those things back into the

00:01:00,969 --> 00:01:13,600
rails app i also love zelda and ruby and

00:01:05,379 --> 00:01:15,039
music and yeah but first so so this is

00:01:13,600 --> 00:01:17,890
my first conference talk which I'm

00:01:15,039 --> 00:01:22,420
really excited about but it's been a

00:01:17,890 --> 00:01:23,979
while thank you it's been a while since

00:01:22,420 --> 00:01:26,050
I've given a presentation so when I sat

00:01:23,979 --> 00:01:27,130
down to figure out like what template do

00:01:26,050 --> 00:01:30,670
i use what do I make this thing look

00:01:27,130 --> 00:01:33,220
like I looked through some VMware

00:01:30,670 --> 00:01:37,750
templates we had and some Microsoft in

00:01:33,220 --> 00:01:39,970
place that we had and well I'll preface

00:01:37,750 --> 00:01:42,130
it with this too I could have a pet

00:01:39,970 --> 00:01:43,690
peeve about like talks that have a title

00:01:42,130 --> 00:01:45,009
and then they don't ever talk about like

00:01:43,690 --> 00:01:46,780
what the title was about so I wanted to

00:01:45,009 --> 00:01:50,229
make sure I didn't do that and so I

00:01:46,780 --> 00:01:52,030
found this in one of our templates and I

00:01:50,229 --> 00:01:54,880
thought it was cool it it says useful

00:01:52,030 --> 00:01:57,789
bleed photos because pictures can set a

00:01:54,880 --> 00:01:59,979
mood or VOC emotion making for more

00:01:57,789 --> 00:02:01,690
memorable presentation so I thought what

00:01:59,979 --> 00:02:04,420
better way to do it than with this exact

00:02:01,690 --> 00:02:06,580
slide like I copied this over and so

00:02:04,420 --> 00:02:07,780
this guy is going to help tell us when

00:02:06,580 --> 00:02:10,080
there's some they don't tell you

00:02:07,780 --> 00:02:12,599
you'll see this guy will be helping us

00:02:10,080 --> 00:02:15,940
convey that message so we're going to

00:02:12,599 --> 00:02:18,970
start with the first one here transition

00:02:15,940 --> 00:02:21,130
into him so what I'm going to talk about

00:02:18,970 --> 00:02:22,659
might not apply to you yet if you're

00:02:21,130 --> 00:02:24,640
building a startup to determine

00:02:22,659 --> 00:02:26,519
viability a lot of this you can probably

00:02:24,640 --> 00:02:27,850
ignore ignore and just get it done

00:02:26,519 --> 00:02:29,770
you're going to

00:02:27,850 --> 00:02:31,630
a lot of complexity with services and

00:02:29,770 --> 00:02:34,360
you might not have enough information to

00:02:31,630 --> 00:02:35,620
do this yet but once you know you need

00:02:34,360 --> 00:02:37,990
to scale you're going to have to do some

00:02:35,620 --> 00:02:39,760
things that aren't comfortable I'm

00:02:37,990 --> 00:02:44,640
expecting this audience may be some of

00:02:39,760 --> 00:02:44,640
this will apply more so that's awesome

00:02:45,030 --> 00:02:52,080
all right let's continue so we have a

00:02:49,120 --> 00:02:57,310
huge rails app it is massive oh

00:02:52,080 --> 00:03:00,280
god what did I do everything is gone

00:02:57,310 --> 00:03:04,240
okay here we go huge I just

00:03:00,280 --> 00:03:06,990
wanted to say again so we have

00:03:04,240 --> 00:03:09,850
300 plus models we have 200 controllers

00:03:06,990 --> 00:03:12,760
this thing is backed by 20 plus JVM

00:03:09,850 --> 00:03:16,000
services some of these services do over

00:03:12,760 --> 00:03:18,640
a billion requests a day but at the end

00:03:16,000 --> 00:03:22,780
of the day we still have a huge rails

00:03:18,640 --> 00:03:24,100
app and this gets harder as we go but

00:03:22,780 --> 00:03:25,840
largely we've been ok with this we've

00:03:24,100 --> 00:03:28,930
been able to address it through kind of

00:03:25,840 --> 00:03:31,090
chipping it away building services but

00:03:28,930 --> 00:03:33,010
things are still painful when we get

00:03:31,090 --> 00:03:34,750
into things like sharding or upgrading

00:03:33,010 --> 00:03:36,280
rails those become like these

00:03:34,750 --> 00:03:38,350
all-or-nothing projects at that point

00:03:36,280 --> 00:03:39,940
and that that's still hard we don't have

00:03:38,350 --> 00:03:44,620
a solution for that but but this makes

00:03:39,940 --> 00:03:46,870
it better so why build services what

00:03:44,620 --> 00:03:48,660
what does that get us I'm going to talk

00:03:46,870 --> 00:03:50,860
pretty briefly about service-oriented

00:03:48,660 --> 00:03:55,540
architectures I'm sure a lot of this

00:03:50,860 --> 00:03:56,730
will be familiar to you guys but one of

00:03:55,540 --> 00:03:59,980
the goals is that we want these

00:03:56,730 --> 00:04:01,510
components that scale individually when

00:03:59,980 --> 00:04:03,220
you have these small focused services

00:04:01,510 --> 00:04:06,820
they're much more versatile they allow

00:04:03,220 --> 00:04:10,630
for easier reusability so here's our

00:04:06,820 --> 00:04:14,260
rails app when we started to build like

00:04:10,630 --> 00:04:16,270
our search stack of things we were able

00:04:14,260 --> 00:04:17,770
because of some prior search stack

00:04:16,270 --> 00:04:19,570
experiences people brought we're able to

00:04:17,770 --> 00:04:22,900
separate these things out into different

00:04:19,570 --> 00:04:24,700
pieces we have this denormalized store

00:04:22,900 --> 00:04:28,090
of data which is flattery in the middle

00:04:24,700 --> 00:04:30,670
here it it stores representations of

00:04:28,090 --> 00:04:32,980
data in rails denormalized and then

00:04:30,670 --> 00:04:34,480
these other two services work with it we

00:04:32,980 --> 00:04:38,530
have an indexing service and then our

00:04:34,480 --> 00:04:39,970
search interface so when we wanted to

00:04:38,530 --> 00:04:40,550
add on another piece of this it was

00:04:39,970 --> 00:04:42,020
pretty easy

00:04:40,550 --> 00:04:44,240
we could use the same structure we got a

00:04:42,020 --> 00:04:46,250
lot of reusability out of it this is our

00:04:44,240 --> 00:04:49,580
auto complete service building up the

00:04:46,250 --> 00:04:52,940
same index is off the same denormalized

00:04:49,580 --> 00:04:55,790
store that we already were moving

00:04:52,940 --> 00:04:57,200
outside of rails and again when we

00:04:55,790 --> 00:04:59,150
wanted to export data we have the

00:04:57,200 --> 00:05:02,120
service called slurpee that would slurp

00:04:59,150 --> 00:05:05,390
sir data out of flattery and we would

00:05:02,120 --> 00:05:06,890
also get that read reusability when and

00:05:05,390 --> 00:05:10,720
this is also great because now we had

00:05:06,890 --> 00:05:10,720
these pieces that can scale individually

00:05:11,170 --> 00:05:16,490
so when we talk about scalability it's

00:05:13,430 --> 00:05:18,800
much easier to scale at a service we

00:05:16,490 --> 00:05:20,720
have these pieces that are broken up we

00:05:18,800 --> 00:05:22,310
have a much better idea of the each

00:05:20,720 --> 00:05:24,260
services specific needs and its

00:05:22,310 --> 00:05:26,920
performance patterns and we can we can

00:05:24,260 --> 00:05:28,790
measure this if you have a monolithic

00:05:26,920 --> 00:05:32,660
architecture it means that you are

00:05:28,790 --> 00:05:34,130
allocating resources to everything so we

00:05:32,660 --> 00:05:35,510
don't have to throw resources at the

00:05:34,130 --> 00:05:37,880
whole stack which may or may not be

00:05:35,510 --> 00:05:40,820
needed and this is kind of all enabled

00:05:37,880 --> 00:05:43,280
through this next benefit which is loose

00:05:40,820 --> 00:05:45,290
coupling like I said smaller and more

00:05:43,280 --> 00:05:48,110
focused pieces we have these

00:05:45,290 --> 00:05:50,120
encapsulated concerns we can push out in

00:05:48,110 --> 00:05:53,060
updates independently to each of these

00:05:50,120 --> 00:05:55,370
pieces and we can change that entire

00:05:53,060 --> 00:05:57,580
libraries or platforms or entire

00:05:55,370 --> 00:06:00,170
technologies without telling anyone

00:05:57,580 --> 00:06:02,320
we're working on changing our entire

00:06:00,170 --> 00:06:04,640
like file storage back end right now and

00:06:02,320 --> 00:06:06,350
largely it's gone pretty smoothly we've

00:06:04,640 --> 00:06:08,450
been able to take out the service and

00:06:06,350 --> 00:06:09,710
put a new one in place it hasn't been

00:06:08,450 --> 00:06:12,590
completely clean and that's probably

00:06:09,710 --> 00:06:14,030
places that we've screwed up but we can

00:06:12,590 --> 00:06:16,300
fix those now as we as we go back

00:06:14,030 --> 00:06:16,300
through

00:06:21,729 --> 00:06:26,770
so kind of a second goal of services and

00:06:25,059 --> 00:06:28,779
service-oriented architecture is

00:06:26,770 --> 00:06:31,629
maintaining code bases that scale across

00:06:28,779 --> 00:06:35,650
our organization we have an engineering

00:06:31,629 --> 00:06:37,479
team of about 150 engineers and if

00:06:35,650 --> 00:06:40,240
you've worked on a model of lithic app

00:06:37,479 --> 00:06:42,789
in that environment you you probably

00:06:40,240 --> 00:06:43,689
stepped on people and you have to

00:06:42,789 --> 00:06:45,909
maintain a lot of this application

00:06:43,689 --> 00:06:47,830
knowledge like we have the random models

00:06:45,909 --> 00:06:49,300
to under controllers you have to keep

00:06:47,830 --> 00:06:51,430
all that in your head to know how these

00:06:49,300 --> 00:06:57,430
things work I mean services enables us

00:06:51,430 --> 00:06:59,199
to kind of D couple that then we also

00:06:57,430 --> 00:07:01,240
get this benefit which is not in the

00:06:59,199 --> 00:07:04,240
computing sense of distributed execution

00:07:01,240 --> 00:07:06,699
but in the in the development sense this

00:07:04,240 --> 00:07:07,990
is enabled by loose coupling again and

00:07:06,699 --> 00:07:10,149
because we have loose coupling we can

00:07:07,990 --> 00:07:11,979
assign a team to the service and it's a

00:07:10,149 --> 00:07:14,229
team to the client and they can

00:07:11,979 --> 00:07:16,479
coordinate and agree how these things

00:07:14,229 --> 00:07:17,620
are going to talk to each other and a

00:07:16,479 --> 00:07:19,659
lot of times what we'll do is we'll

00:07:17,620 --> 00:07:21,789
build dummy pieces along the way so that

00:07:19,659 --> 00:07:23,439
this team is not waiting on this team to

00:07:21,789 --> 00:07:24,909
finish their component this team can

00:07:23,439 --> 00:07:27,339
implement this interface that does

00:07:24,909 --> 00:07:30,009
nothing yet and this team can send it

00:07:27,339 --> 00:07:31,689
data that's not right yet and both teams

00:07:30,009 --> 00:07:33,339
will become unblocked they can move

00:07:31,689 --> 00:07:34,569
forward and then as these things to have

00:07:33,339 --> 00:07:36,939
to get implemented we can have this

00:07:34,569 --> 00:07:43,479
end-to-end test of what this is going to

00:07:36,939 --> 00:07:45,159
look like so here's the dude again this

00:07:43,479 --> 00:07:47,490
this obviously doesn't happen overnight

00:07:45,159 --> 00:07:49,689
like I alluded to a little while ago

00:07:47,490 --> 00:07:51,729
when you're starting out building your

00:07:49,689 --> 00:07:54,069
application of your startup all of this

00:07:51,729 --> 00:07:55,449
is a lot of additional complexity and it

00:07:54,069 --> 00:07:58,529
prevents you from shipping products

00:07:55,449 --> 00:08:02,139
quickly which is kind of your main goal

00:07:58,529 --> 00:08:04,479
with a single undivided codebase you can

00:08:02,139 --> 00:08:07,149
kind of change things really quickly you

00:08:04,479 --> 00:08:09,550
can access data layers directly you can

00:08:07,149 --> 00:08:11,229
share a lot of code easily you can avoid

00:08:09,550 --> 00:08:13,599
overhead that managing services and

00:08:11,229 --> 00:08:15,370
tails then when you start to build

00:08:13,599 --> 00:08:20,459
services you realize all of that was

00:08:15,370 --> 00:08:22,240
making your life harder now and things

00:08:20,459 --> 00:08:24,219
you're going to learn things it are

00:08:22,240 --> 00:08:26,740
iteratively along the way so as you

00:08:24,219 --> 00:08:29,199
learn about building this application

00:08:26,740 --> 00:08:31,199
you learn about its usage patterns and

00:08:29,199 --> 00:08:33,010
how you can split this thing up better

00:08:31,199 --> 00:08:34,470
so you're not going to wake up one

00:08:33,010 --> 00:08:36,150
morning with services

00:08:34,470 --> 00:08:39,900
and we found that sometimes this even

00:08:36,150 --> 00:08:43,020
requires organizational change and we

00:08:39,900 --> 00:08:43,860
talked about this a lot Conway's law we

00:08:43,020 --> 00:08:45,510
like to think about it that

00:08:43,860 --> 00:08:47,880
organizations that are optimized to

00:08:45,510 --> 00:08:49,710
avoid bottlenecks will also create code

00:08:47,880 --> 00:08:53,330
that is meant to avoid bottlenecks and

00:08:49,710 --> 00:08:56,250
this is how the what Conway's law says

00:08:53,330 --> 00:08:58,530
organizations which design systems are

00:08:56,250 --> 00:09:00,330
constrained to produce designs which are

00:08:58,530 --> 00:09:02,760
copies of the communication structures

00:09:00,330 --> 00:09:04,140
of these organizations so it's hard to

00:09:02,760 --> 00:09:05,760
think about services if we don't think

00:09:04,140 --> 00:09:09,420
about our development teams in the same

00:09:05,760 --> 00:09:11,270
way a lot of organizations divide their

00:09:09,420 --> 00:09:13,470
departments vertically or horizontally

00:09:11,270 --> 00:09:16,500
which can lead to silos within the

00:09:13,470 --> 00:09:18,300
organization or people are just working

00:09:16,500 --> 00:09:22,050
on the same thing day to day that can

00:09:18,300 --> 00:09:23,160
get tiresome so this barrier forces

00:09:22,050 --> 00:09:24,780
people to get attached to their turf

00:09:23,160 --> 00:09:32,580
inhibits communication and decision

00:09:24,780 --> 00:09:34,110
making I have an example here so this is

00:09:32,580 --> 00:09:36,570
something we had early on at Yammer this

00:09:34,110 --> 00:09:37,680
is the messaging team and their domain

00:09:36,570 --> 00:09:39,960
kind of looked like this they

00:09:37,680 --> 00:09:41,580
implemented the service and they also

00:09:39,960 --> 00:09:43,980
had responsibilities in the rail side of

00:09:41,580 --> 00:09:45,630
things we have a service that handles

00:09:43,980 --> 00:09:48,120
our message feeds and the team that

00:09:45,630 --> 00:09:49,470
supported that also worked on the rails

00:09:48,120 --> 00:09:52,800
set of things they took both sides of

00:09:49,470 --> 00:09:54,750
this implementation so the messaging

00:09:52,800 --> 00:09:56,430
team decided on the interface and

00:09:54,750 --> 00:09:59,940
implementable sides they've really

00:09:56,430 --> 00:10:01,020
siloed knowledge of the system it isn't

00:09:59,940 --> 00:10:03,000
always the most important thing that

00:10:01,020 --> 00:10:04,260
they can be working on and then how do

00:10:03,000 --> 00:10:06,260
we keep creating feature teams going

00:10:04,260 --> 00:10:08,550
forward this this doesn't scale well

00:10:06,260 --> 00:10:12,180
they have a lot of responsibility it's

00:10:08,550 --> 00:10:14,700
really tightly coupled so we took a step

00:10:12,180 --> 00:10:16,320
back and we looked at this and we came

00:10:14,700 --> 00:10:18,240
up with something that that's scaled a

00:10:16,320 --> 00:10:20,460
little better and worked more like

00:10:18,240 --> 00:10:25,110
Conway's law we divided it up like this

00:10:20,460 --> 00:10:25,770
and so we have a team the rails team

00:10:25,110 --> 00:10:27,930
that would take care of the

00:10:25,770 --> 00:10:30,420
implementations of services onto the

00:10:27,930 --> 00:10:32,580
rail stack and coordinate with the core

00:10:30,420 --> 00:10:35,430
services team on how these things would

00:10:32,580 --> 00:10:37,230
work the rails team would have to know a

00:10:35,430 --> 00:10:39,170
lot about the monolithic app and how it

00:10:37,230 --> 00:10:42,690
works and that that's still a problem

00:10:39,170 --> 00:10:43,950
it's it's still a bottleneck for us but

00:10:42,690 --> 00:10:46,770
the idea being that we could iteratively

00:10:43,950 --> 00:10:48,320
move things into services and reduce the

00:10:46,770 --> 00:10:51,990
amount of knowledge on the rail side

00:10:48,320 --> 00:10:54,690
is a big win and we had to take this a

00:10:51,990 --> 00:10:56,070
step further to and this is one of the

00:10:54,690 --> 00:10:58,590
things we talked about a lot and it's

00:10:56,070 --> 00:11:00,390
it's cross-functional teams and so

00:10:58,590 --> 00:11:03,000
instead of having like the messaging

00:11:00,390 --> 00:11:05,070
team when we work on things we create

00:11:03,000 --> 00:11:06,540
these cross-functional teams when we're

00:11:05,070 --> 00:11:08,490
creating a new service or a feature we

00:11:06,540 --> 00:11:09,960
put together one of these teams and we

00:11:08,490 --> 00:11:13,470
take representatives from each of our

00:11:09,960 --> 00:11:15,840
functional teams for whatever aspect of

00:11:13,470 --> 00:11:18,240
the project we need we bring in two to

00:11:15,840 --> 00:11:19,920
ten people for a project from whatever

00:11:18,240 --> 00:11:21,570
functional teams are necessary and they

00:11:19,920 --> 00:11:23,640
work on a project for anywhere from two

00:11:21,570 --> 00:11:24,840
to ten weeks and people are constantly

00:11:23,640 --> 00:11:28,050
working out new and different things

00:11:24,840 --> 00:11:30,390
that way with new people so this is kind

00:11:28,050 --> 00:11:32,130
of what a team would look like we would

00:11:30,390 --> 00:11:35,790
have maybe two rails engineer it's a

00:11:32,130 --> 00:11:37,410
core services engineer maybe a mobile

00:11:35,790 --> 00:11:39,180
client engineer some other there's some

00:11:37,410 --> 00:11:41,610
roles outside of engineering and product

00:11:39,180 --> 00:11:43,710
as well but largely what we're concerned

00:11:41,610 --> 00:11:45,930
about for this dog is this and so it

00:11:43,710 --> 00:11:48,960
creates this autonomous well informed

00:11:45,930 --> 00:11:51,660
the centralized design process and these

00:11:48,960 --> 00:11:54,390
teams have great discretion but it

00:11:51,660 --> 00:11:56,340
produces well-designed isolated reusable

00:11:54,390 --> 00:11:58,200
systems and the key here is that these

00:11:56,340 --> 00:12:00,570
teams are ephemeral they come together

00:11:58,200 --> 00:12:03,890
they solve the problem and then each

00:12:00,570 --> 00:12:03,890
team member moves on to something else

00:12:04,580 --> 00:12:08,820
so they'll spin up they'll learn the

00:12:06,690 --> 00:12:11,160
domain they'll take advantage of this

00:12:08,820 --> 00:12:13,050
the distributed execution so we can work

00:12:11,160 --> 00:12:14,730
on things in parallel and they'll

00:12:13,050 --> 00:12:21,030
coordinate on the API between the the

00:12:14,730 --> 00:12:23,990
services and the client and so like

00:12:21,030 --> 00:12:26,100
everything this has trade-offs as well

00:12:23,990 --> 00:12:29,490
we have some costs with not having

00:12:26,100 --> 00:12:31,020
siloed experts some would argue that

00:12:29,490 --> 00:12:33,240
this is a benefit but there is a cost

00:12:31,020 --> 00:12:35,640
involved with teams constantly having to

00:12:33,240 --> 00:12:39,030
learn a new domain we're okay with that

00:12:35,640 --> 00:12:40,890
it's it's a small cost to pay for what

00:12:39,030 --> 00:12:42,300
we get out of it and we have to be

00:12:40,890 --> 00:12:45,780
careful not to couple the API

00:12:42,300 --> 00:12:47,340
implementation to the client if we're

00:12:45,780 --> 00:12:49,140
working with mobile clients and as that

00:12:47,340 --> 00:12:50,610
becomes as mobile clients become smarter

00:12:49,140 --> 00:12:53,040
and need customized data we have to make

00:12:50,610 --> 00:12:54,570
sure that we're keeping this in mind and

00:12:53,040 --> 00:12:56,640
then after a project is completed and

00:12:54,570 --> 00:12:58,080
the team's disbanded we have to figure

00:12:56,640 --> 00:13:00,150
out a way to support this thing still so

00:12:58,080 --> 00:13:01,300
this is still something we we have a

00:13:00,150 --> 00:13:03,130
support team internally

00:13:01,300 --> 00:13:04,899
it's also a cross-functional team so

00:13:03,130 --> 00:13:11,200
that helps us address this but it's

00:13:04,899 --> 00:13:12,730
still a point of concern and so

00:13:11,200 --> 00:13:16,149
obviously there's more than one way to

00:13:12,730 --> 00:13:18,670
do this and services can live in many

00:13:16,149 --> 00:13:20,140
different ways one of the easiest ways

00:13:18,670 --> 00:13:21,430
is if you just put them all behind rails

00:13:20,140 --> 00:13:24,850
they don't have to talk to the outside

00:13:21,430 --> 00:13:26,529
world it's probably going to look like

00:13:24,850 --> 00:13:31,329
this for a while as you figure out these

00:13:26,529 --> 00:13:32,529
other problems this gets us some partial

00:13:31,329 --> 00:13:34,779
win but we still have to use rails

00:13:32,529 --> 00:13:37,180
resources to get to these services which

00:13:34,779 --> 00:13:38,800
is still annoying but we're okay with it

00:13:37,180 --> 00:13:41,320
we're pulling things out we're working

00:13:38,800 --> 00:13:43,029
on this problem but eventually the time

00:13:41,320 --> 00:13:51,790
comes where you want to talk directly to

00:13:43,029 --> 00:13:53,050
a service so sometimes this is easy we

00:13:51,790 --> 00:13:55,329
have a service that we call mug shot

00:13:53,050 --> 00:13:57,310
that handles dynamically resizing

00:13:55,329 --> 00:13:58,660
avatars and other images for us and

00:13:57,310 --> 00:14:00,250
that's something that rails doesn't need

00:13:58,660 --> 00:14:02,950
to do the browser can talk directly to

00:14:00,250 --> 00:14:04,810
the service and it works pretty well but

00:14:02,950 --> 00:14:06,790
most of the time you'll have to figure

00:14:04,810 --> 00:14:08,829
out authentication if you want to talk

00:14:06,790 --> 00:14:12,700
directly to surfaces to it starts to get

00:14:08,829 --> 00:14:14,560
harder and then eventually you're going

00:14:12,700 --> 00:14:17,920
to want to talk to the data that's in

00:14:14,560 --> 00:14:19,149
poster as may be directly there's going

00:14:17,920 --> 00:14:20,610
to come a point where you need to work

00:14:19,149 --> 00:14:22,660
around rails to get to your data and

00:14:20,610 --> 00:14:25,570
reading from the database isn't the

00:14:22,660 --> 00:14:28,750
worst thing it's not great but writing

00:14:25,570 --> 00:14:30,579
that database becomes a nightmare the

00:14:28,750 --> 00:14:32,110
problem with reading is that in this

00:14:30,579 --> 00:14:35,110
diagram postgrads isn't really our

00:14:32,110 --> 00:14:36,970
database memcache is our database and

00:14:35,110 --> 00:14:40,420
rails knows about this caching layer but

00:14:36,970 --> 00:14:42,640
our services don't so talking to the

00:14:40,420 --> 00:14:44,350
database directly generates a lot of

00:14:42,640 --> 00:14:46,720
load that we don't normally get when we

00:14:44,350 --> 00:14:49,570
use our rails app we have like a

00:14:46,720 --> 00:14:51,370
ninety-eight percent cache hit rate it

00:14:49,570 --> 00:14:54,209
goes directly to memcache instead of

00:14:51,370 --> 00:14:54,209
ever hitting postgrads

00:14:57,360 --> 00:15:01,860
and so this is part of the problem that

00:14:59,160 --> 00:15:03,779
we have active record holds our data

00:15:01,860 --> 00:15:05,310
hostage and it's fine for the most part

00:15:03,779 --> 00:15:07,500
it made things easy in the beginning as

00:15:05,310 --> 00:15:08,700
we built our app but now we have to tear

00:15:07,500 --> 00:15:10,560
down some of the code that worked well

00:15:08,700 --> 00:15:13,560
and figure out how to make it work in

00:15:10,560 --> 00:15:15,180
this new world so don't get me wrong

00:15:13,560 --> 00:15:17,820
active record is awesome we have these

00:15:15,180 --> 00:15:19,680
callbacks and hooks validations we can

00:15:17,820 --> 00:15:22,709
have state machines in it we can do

00:15:19,680 --> 00:15:25,470
cache invalidation relatively easily we

00:15:22,709 --> 00:15:27,890
use a gem called a record cash it

00:15:25,470 --> 00:15:31,230
handles storing everything in memcache

00:15:27,890 --> 00:15:33,480
we rely pretty heavily on that so this

00:15:31,230 --> 00:15:36,300
stuff is awesome until you start to

00:15:33,480 --> 00:15:37,709
detangle the data and access it from a

00:15:36,300 --> 00:15:40,850
service or try and move it outside of a

00:15:37,709 --> 00:15:43,470
service and it quickly turns into this

00:15:40,850 --> 00:15:45,899
active record I have all these hooks and

00:15:43,470 --> 00:15:48,149
callbacks everywhere I validations that

00:15:45,899 --> 00:15:50,670
I need to worry about state machines

00:15:48,149 --> 00:15:53,310
cache invalidation it starts to get

00:15:50,670 --> 00:15:54,930
complex quickly and so we do have some

00:15:53,310 --> 00:15:57,660
options we do this in a number of

00:15:54,930 --> 00:15:59,610
different ways some people might prefer

00:15:57,660 --> 00:16:01,769
not to use active record we still use it

00:15:59,610 --> 00:16:03,089
pretty heavily one of the ways we

00:16:01,769 --> 00:16:05,130
address this a lot of times is we use

00:16:03,089 --> 00:16:07,980
our services kind of as indexes and just

00:16:05,130 --> 00:16:10,170
store IDs and pull things back through

00:16:07,980 --> 00:16:13,920
rails hydrate those things and then

00:16:10,170 --> 00:16:15,690
serve it out through rails we're toying

00:16:13,920 --> 00:16:17,730
around with an idea now and we're

00:16:15,690 --> 00:16:19,500
calling them like bodega services where

00:16:17,730 --> 00:16:21,420
the we move this data completely to a

00:16:19,500 --> 00:16:23,370
service and we hit that service instead

00:16:21,420 --> 00:16:24,930
of the database we can hide a lot of our

00:16:23,370 --> 00:16:27,510
like sharding and caching concerns

00:16:24,930 --> 00:16:29,670
behind that service at that point and

00:16:27,510 --> 00:16:31,350
the goal is obviously right now we're

00:16:29,670 --> 00:16:32,940
eating them cash for these things the

00:16:31,350 --> 00:16:39,089
service needs to be just as quick to do

00:16:32,940 --> 00:16:42,240
that so once we've decided we want to

00:16:39,089 --> 00:16:43,440
move data out of our rails app moving

00:16:42,240 --> 00:16:47,070
data means we're going to ultimately

00:16:43,440 --> 00:16:49,800
duplicate this stuff this is pretty much

00:16:47,070 --> 00:16:51,690
our option the chances are if you have

00:16:49,800 --> 00:16:54,029
doubt of if you're like us you can't

00:16:51,690 --> 00:16:56,310
have downtime and you can't just move

00:16:54,029 --> 00:16:57,390
data across and what if the service

00:16:56,310 --> 00:17:00,660
doesn't work like you thought it was

00:16:57,390 --> 00:17:04,350
going to rolling back is really hard you

00:17:00,660 --> 00:17:06,059
need a backup plan so largely we do

00:17:04,350 --> 00:17:07,949
something with with double dispatching

00:17:06,059 --> 00:17:10,199
where we will start to backfill data to

00:17:07,949 --> 00:17:11,280
a service well write data to the

00:17:10,199 --> 00:17:13,290
database and post

00:17:11,280 --> 00:17:15,360
the service at the same time while we're

00:17:13,290 --> 00:17:17,130
doing this the service can be monitored

00:17:15,360 --> 00:17:19,860
and profiled we can make incremental

00:17:17,130 --> 00:17:22,050
steps to move over to our services and

00:17:19,860 --> 00:17:23,820
the backfield is pretty nice because we

00:17:22,050 --> 00:17:26,010
get a peek into the scalability of the

00:17:23,820 --> 00:17:27,660
service we're going to be putting a lot

00:17:26,010 --> 00:17:30,150
of data into it much faster than we

00:17:27,660 --> 00:17:33,210
would if if traffic was coming into it

00:17:30,150 --> 00:17:35,100
and so we can typically gauge what this

00:17:33,210 --> 00:17:39,330
thing's going to handle and reuse that

00:17:35,100 --> 00:17:42,390
to plan our capacity and just know how

00:17:39,330 --> 00:17:45,840
we expect this thing to perform so once

00:17:42,390 --> 00:17:47,340
we've done this the problem is we now

00:17:45,840 --> 00:17:49,620
have duplicate data we have data in

00:17:47,340 --> 00:17:52,410
these two different places who cleans

00:17:49,620 --> 00:17:54,090
this up we need to do it quickly because

00:17:52,410 --> 00:17:56,940
this is confusing to developers they see

00:17:54,090 --> 00:17:59,070
data in both places they don't know

00:17:56,940 --> 00:18:01,290
which is the the right source of this

00:17:59,070 --> 00:18:03,150
and we do this up from time to time

00:18:01,290 --> 00:18:05,790
and and data sticks around it's

00:18:03,150 --> 00:18:08,130
confusing I know personally I've

00:18:05,790 --> 00:18:11,370
this up with the mug shot services we

00:18:08,130 --> 00:18:14,190
had to move mug shots outside of out of

00:18:11,370 --> 00:18:15,570
rails over to the service and we still

00:18:14,190 --> 00:18:18,510
do have some avatars in the rails app

00:18:15,570 --> 00:18:20,540
it's mostly diskin disconnected from

00:18:18,510 --> 00:18:24,510
from anything but they still exist there

00:18:20,540 --> 00:18:26,210
and it's really confusing this is part

00:18:24,510 --> 00:18:30,570
of our trade off and cross-functional

00:18:26,210 --> 00:18:31,890
teams so our team disbands we need a way

00:18:30,570 --> 00:18:35,010
to make sure this still gets wrapped up

00:18:31,890 --> 00:18:38,490
we need to know when we're okay with

00:18:35,010 --> 00:18:40,200
going all in and this is largely one of

00:18:38,490 --> 00:18:41,580
the concerns is the old way is really

00:18:40,200 --> 00:18:42,840
comfortable we have this back we have

00:18:41,580 --> 00:18:45,420
this escape route if this thing's not

00:18:42,840 --> 00:18:46,710
working we can quickly just kind of go

00:18:45,420 --> 00:18:48,960
back to the way things where the way

00:18:46,710 --> 00:18:50,220
things were comfortable so we have to be

00:18:48,960 --> 00:18:52,410
okay with breaking out of our comfort

00:18:50,220 --> 00:18:53,820
zone and dealing with these new issues

00:18:52,410 --> 00:18:56,130
that come up when we go completely to

00:18:53,820 --> 00:18:58,680
the service and we won't be able to jump

00:18:56,130 --> 00:19:00,080
back to safety anymore but don't get me

00:18:58,680 --> 00:19:02,460
wrong you don't want to strain yourself

00:19:00,080 --> 00:19:04,140
there should be an incremental period

00:19:02,460 --> 00:19:08,160
but eventually you have to make that

00:19:04,140 --> 00:19:09,830
call to completely switch there's costs

00:19:08,160 --> 00:19:15,780
with maintaining this backup plan it

00:19:09,830 --> 00:19:17,370
largely isn't worth it on that note we

00:19:15,780 --> 00:19:20,340
also want to make really easy for

00:19:17,370 --> 00:19:21,240
developers if you don't have a good

00:19:20,340 --> 00:19:22,470
story with your development environment

00:19:21,240 --> 00:19:24,090
you're not going to be able to keep

00:19:22,470 --> 00:19:25,440
moving quickly

00:19:24,090 --> 00:19:28,770
as if you're on just the single rails

00:19:25,440 --> 00:19:30,150
app part of the big win with services is

00:19:28,770 --> 00:19:33,539
not having to worry about configuring

00:19:30,150 --> 00:19:34,950
them or how they work or you don't have

00:19:33,539 --> 00:19:37,529
to dig into them and so you need to like

00:19:34,950 --> 00:19:40,620
learn what this thing does and if it is

00:19:37,529 --> 00:19:42,210
an easy developer developers might just

00:19:40,620 --> 00:19:43,860
wander back into their comfort zone add

00:19:42,210 --> 00:19:47,279
to your monolith instead of going the

00:19:43,860 --> 00:19:50,789
route with services basically what I'm

00:19:47,279 --> 00:19:53,610
saying is use vagrant we use this really

00:19:50,789 --> 00:19:55,770
heavily it allows our development

00:19:53,610 --> 00:19:58,169
environment too closely reflect

00:19:55,770 --> 00:20:00,090
production we get to run all these

00:19:58,169 --> 00:20:02,460
services locally in in a similar

00:20:00,090 --> 00:20:06,179
environment and we can keep up with with

00:20:02,460 --> 00:20:07,710
services that are rapidly changing but

00:20:06,179 --> 00:20:09,870
your developers need tools probably to

00:20:07,710 --> 00:20:12,570
manage all this complexity we've built

00:20:09,870 --> 00:20:17,669
this thing in house we call up soup

00:20:12,570 --> 00:20:19,440
kitchen which manages vagrant and it's

00:20:17,669 --> 00:20:20,490
part of the win of services that I don't

00:20:19,440 --> 00:20:23,760
have to worry about any of these

00:20:20,490 --> 00:20:26,130
services until I need to just let me

00:20:23,760 --> 00:20:28,230
update them when these red things come

00:20:26,130 --> 00:20:31,590
up i click update aside from that I

00:20:28,230 --> 00:20:34,020
largely don't care just let me work get

00:20:31,590 --> 00:20:35,309
my done and then when I need to

00:20:34,020 --> 00:20:38,480
worry about these things I can dig into

00:20:35,309 --> 00:20:38,480
the services individually

00:20:44,850 --> 00:20:49,680
and so another part of making this easy

00:20:47,310 --> 00:20:50,820
is that is deployment you need a system

00:20:49,680 --> 00:20:52,950
that's going to allow you to add new

00:20:50,820 --> 00:20:54,480
services quickly you're going to still

00:20:52,950 --> 00:20:56,910
have to move those services out to

00:20:54,480 --> 00:20:59,760
production we have quite a few apps and

00:20:56,910 --> 00:21:02,100
services and we need any engineer to be

00:20:59,760 --> 00:21:04,350
able to roll these things out easy to

00:21:02,100 --> 00:21:06,120
deploy these services and we also need

00:21:04,350 --> 00:21:08,220
to maintain things like stable for

00:21:06,120 --> 00:21:11,640
production pre-release packages of our

00:21:08,220 --> 00:21:13,230
development environments and we do it

00:21:11,640 --> 00:21:15,660
with a tool that we built another tool

00:21:13,230 --> 00:21:18,290
that we built in-house called diplomacy

00:21:15,660 --> 00:21:20,370
it's our one click deploy system

00:21:18,290 --> 00:21:22,410
unfortunately we haven't open sourced it

00:21:20,370 --> 00:21:24,840
yet we we talked about it from time to

00:21:22,410 --> 00:21:27,270
time it's pretty coupled to some of our

00:21:24,840 --> 00:21:30,030
conventions but it allows any engineer

00:21:27,270 --> 00:21:32,910
to effortlessly add new services for

00:21:30,030 --> 00:21:33,920
deployment they can come here and we can

00:21:32,910 --> 00:21:37,020
push it out to different environments

00:21:33,920 --> 00:21:42,180
and then our developer environments kind

00:21:37,020 --> 00:21:43,350
of couple on to this as well another

00:21:42,180 --> 00:21:45,420
thing that's going to be important is

00:21:43,350 --> 00:21:47,190
monitoring and alerting you're going to

00:21:45,420 --> 00:21:48,990
want to modern performance not just on

00:21:47,190 --> 00:21:52,890
one app now on at least 20 different

00:21:48,990 --> 00:21:55,170
services capacity planning cute apps you

00:21:52,890 --> 00:21:57,450
can have to look at these things reach

00:21:55,170 --> 00:21:58,830
ability from dependent clients there are

00:21:57,450 --> 00:22:02,100
lots of different tools that we use for

00:21:58,830 --> 00:22:05,340
this monitoring I think we use ganglia

00:22:02,100 --> 00:22:07,200
and for alerting some other tools I

00:22:05,340 --> 00:22:09,480
think used to zabbix we're kind of

00:22:07,200 --> 00:22:11,100
transitioning away from that and then

00:22:09,480 --> 00:22:13,020
for reach ability from dependent clients

00:22:11,100 --> 00:22:14,970
we have some tools we've built in-house

00:22:13,020 --> 00:22:19,070
that that check different endpoints make

00:22:14,970 --> 00:22:21,390
sure they're returning the right things

00:22:19,070 --> 00:22:24,750
and so mostly this comes down to having

00:22:21,390 --> 00:22:26,670
standardized tools your deployment

00:22:24,750 --> 00:22:29,340
systems your how you're setting these

00:22:26,670 --> 00:22:31,200
things up and then all the way down to

00:22:29,340 --> 00:22:33,170
like having similar response formats and

00:22:31,200 --> 00:22:36,870
data protocols and monitoring interfaces

00:22:33,170 --> 00:22:38,790
deployment stories dependency management

00:22:36,870 --> 00:22:40,920
across these it makes your world

00:22:38,790 --> 00:22:43,080
infinitely easier than trying to manage

00:22:40,920 --> 00:22:45,120
tenth of unique little special

00:22:43,080 --> 00:22:49,290
snowflakes that all speak different

00:22:45,120 --> 00:22:52,470
languages this is what we use for a lot

00:22:49,290 --> 00:22:55,140
of our services this is a java library

00:22:52,470 --> 00:22:57,540
call drop wizard that kind of came out

00:22:55,140 --> 00:22:58,740
as an abstraction from services that we

00:22:57,540 --> 00:23:00,780
built early on

00:22:58,740 --> 00:23:02,670
and it's basically packaged together all

00:23:00,780 --> 00:23:05,160
the libraries that we use when we build

00:23:02,670 --> 00:23:07,920
a Java service we get a really simple

00:23:05,160 --> 00:23:11,040
production-ready service monitored

00:23:07,920 --> 00:23:12,690
learning reporting metrics but this

00:23:11,040 --> 00:23:14,700
isn't the only way to do it this is this

00:23:12,690 --> 00:23:17,429
is how we do it it may or may not work

00:23:14,700 --> 00:23:20,100
for you guys I know I prefer writing

00:23:17,429 --> 00:23:22,380
Ruby I don't like writing Java and I try

00:23:20,100 --> 00:23:28,410
and stay away from it but but this is a

00:23:22,380 --> 00:23:30,300
tool that we use and so service-oriented

00:23:28,410 --> 00:23:33,300
architectures have have trade-offs as

00:23:30,300 --> 00:23:36,360
well one of the largest ones being that

00:23:33,300 --> 00:23:38,429
complex systems fail you now to think

00:23:36,360 --> 00:23:40,700
about a lot more you have to think about

00:23:38,429 --> 00:23:43,110
degrading for unavailable services

00:23:40,700 --> 00:23:45,390
chasing issues through multiple levels

00:23:43,110 --> 00:23:47,640
of indirection people don't know where

00:23:45,390 --> 00:23:48,840
this problems happening the place is

00:23:47,640 --> 00:23:51,270
throwing the alert might not be the

00:23:48,840 --> 00:23:53,340
place that's causing the issue you could

00:23:51,270 --> 00:23:55,110
have q's back backing up because the

00:23:53,340 --> 00:23:58,110
service is becoming slow you have to

00:23:55,110 --> 00:23:59,490
worry about all this stuff now so one of

00:23:58,110 --> 00:24:02,130
the trade-offs is handling this

00:23:59,490 --> 00:24:04,110
unavailability these transactions aren't

00:24:02,130 --> 00:24:05,730
free we do have to worry about talking

00:24:04,110 --> 00:24:07,440
to these different services now where we

00:24:05,730 --> 00:24:08,970
could just go to one single place in our

00:24:07,440 --> 00:24:11,550
database before we get these things and

00:24:08,970 --> 00:24:16,500
so we have to worry about that maybe we

00:24:11,550 --> 00:24:18,990
have to paralyze paralyze and calls we

00:24:16,500 --> 00:24:24,750
also have AP is that are much harder to

00:24:18,990 --> 00:24:26,640
change and there's no sense of like this

00:24:24,750 --> 00:24:29,460
atomic deploy anymore we can't just

00:24:26,640 --> 00:24:30,809
deploy our app and it works we have we

00:24:29,460 --> 00:24:33,870
have to worry about clients that are on

00:24:30,809 --> 00:24:36,690
both sides of the deploy coordinated

00:24:33,870 --> 00:24:39,179
deploys rarely work well you you really

00:24:36,690 --> 00:24:43,380
have to consider both sides of your

00:24:39,179 --> 00:24:47,130
deploy this one a lot faster than I

00:24:43,380 --> 00:24:48,720
thought it was going to so to recap you

00:24:47,130 --> 00:24:51,179
should always be re-evaluating your

00:24:48,720 --> 00:24:52,350
costs and their viability and this I

00:24:51,179 --> 00:24:54,809
don't buy this I don't mean the

00:24:52,350 --> 00:24:56,309
financials I'm talking about decisions

00:24:54,809 --> 00:24:58,470
you've made and if there's still the

00:24:56,309 --> 00:25:00,270
right decisions are you still okay with

00:24:58,470 --> 00:25:03,210
the trade-offs you've made it's

00:25:00,270 --> 00:25:04,890
something slowing you down know what an

00:25:03,210 --> 00:25:06,510
inflection point looks like in your app

00:25:04,890 --> 00:25:08,100
and what that means to your software is

00:25:06,510 --> 00:25:10,530
it time to start breaking things down to

00:25:08,100 --> 00:25:12,509
services but don't scale before you need

00:25:10,530 --> 00:25:14,219
to but be ready for it

00:25:12,509 --> 00:25:16,499
once you've determined that you need to

00:25:14,219 --> 00:25:20,399
scale with services and you can take on

00:25:16,499 --> 00:25:22,199
the additional complexity you'll need a

00:25:20,399 --> 00:25:25,019
organization that supports building

00:25:22,199 --> 00:25:26,219
services and this could be much more

00:25:25,019 --> 00:25:28,379
than just changing your development

00:25:26,219 --> 00:25:30,509
structure or how you organize as a team

00:25:28,379 --> 00:25:32,909
but I means giving priority to building

00:25:30,509 --> 00:25:35,399
the kinds of tools you need and creating

00:25:32,909 --> 00:25:36,409
a culture around services some things

00:25:35,399 --> 00:25:37,829
are going to get a lot harder

00:25:36,409 --> 00:25:40,229
developments going to be more

00:25:37,829 --> 00:25:42,899
complicated that's okay we reduce the

00:25:40,229 --> 00:25:45,059
amount of required effort in some places

00:25:42,899 --> 00:25:48,149
and as a system gets larger it's much

00:25:45,059 --> 00:25:50,190
more manageable there's a graph that

00:25:48,149 --> 00:25:52,919
I've seen that shows like this monolith

00:25:50,190 --> 00:25:56,699
and the the trend is much different than

00:25:52,919 --> 00:26:03,419
like services I should have had the

00:25:56,699 --> 00:26:04,979
graph in here and so you also need tools

00:26:03,419 --> 00:26:07,259
that allow you to keep moving fast you

00:26:04,979 --> 00:26:09,239
can't build serve it building services

00:26:07,259 --> 00:26:11,429
can't slow you down you still have

00:26:09,239 --> 00:26:13,739
customers you still needed to deliver

00:26:11,429 --> 00:26:16,049
value to them constantly and they don't

00:26:13,739 --> 00:26:17,069
shouldn't care about any of this but

00:26:16,049 --> 00:26:19,409
they're going to care if things start

00:26:17,069 --> 00:26:22,169
going wrong if they can't get to what

00:26:19,409 --> 00:26:24,690
they want to do and additionally if

00:26:22,169 --> 00:26:26,999
developers can't build services easy and

00:26:24,690 --> 00:26:28,409
they're up against a deadline they might

00:26:26,999 --> 00:26:30,949
just start adding to the monolith again

00:26:28,409 --> 00:26:33,149
and that doesn't help solve our problem

00:26:30,949 --> 00:26:37,649
it's easier for them and they can worry

00:26:33,149 --> 00:26:39,239
about that later then finally one of the

00:26:37,649 --> 00:26:42,419
things we talked about a lot of Yammer

00:26:39,239 --> 00:26:44,449
is you're going to make mistakes but be

00:26:42,419 --> 00:26:48,149
ready to acknowledge and recover from it

00:26:44,449 --> 00:26:49,889
be ready to be wrong we've rewritten our

00:26:48,149 --> 00:26:51,749
search stack probably three different

00:26:49,889 --> 00:26:53,519
times but we learned a lot about

00:26:51,749 --> 00:26:56,279
building services and what we needed as

00:26:53,519 --> 00:26:59,190
we went along this is the same in code

00:26:56,279 --> 00:27:00,690
to we look back at what we wrote and we

00:26:59,190 --> 00:27:02,819
want to go back and punch ourselves in

00:27:00,690 --> 00:27:04,649
the face a lot of times decisions about

00:27:02,819 --> 00:27:07,499
building services and how you organize

00:27:04,649 --> 00:27:09,779
can be the same way don't assume that

00:27:07,499 --> 00:27:10,829
the decisions you made yesterday are

00:27:09,779 --> 00:27:13,979
still going to be the same decisions

00:27:10,829 --> 00:27:15,659
correct decisions today it could have

00:27:13,979 --> 00:27:17,819
very well been the best decision at the

00:27:15,659 --> 00:27:20,159
time what's it today that could be much

00:27:17,819 --> 00:27:22,499
different and this is really hard to do

00:27:20,159 --> 00:27:25,420
like I said we still have a huge rails

00:27:22,499 --> 00:27:27,500
app we haven't solved that problem yet

00:27:25,420 --> 00:27:28,730
but we've made a lot of incremental

00:27:27,500 --> 00:27:30,740
progress towards getting this right

00:27:28,730 --> 00:27:33,380
we've missed stepped and gotten some of

00:27:30,740 --> 00:27:35,120
this wrong but we're okay with admitting

00:27:33,380 --> 00:27:37,220
that some of the things we've done it

00:27:35,120 --> 00:27:41,150
wrong correcting those mistakes and

00:27:37,220 --> 00:27:43,690
moving forward again and that's all I

00:27:41,150 --> 00:27:43,690

YouTube URL: https://www.youtube.com/watch?v=GuJ49PNBsn8


