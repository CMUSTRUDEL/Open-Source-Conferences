Title: Big Ruby 2013 Fire It Up: How Empowered People Automated Provisioning In 6 Datacenters Across 4...
Publication date: 2020-01-28
Playlist: Big Ruby 2013
Description: 
	Help us caption & translate this video!

http://amara.org/v/FGdW/
Captions: 
	00:00:18,630 --> 00:00:26,860
I'm not into the whole brevity thing so

00:00:21,310 --> 00:00:28,840
all right hello my name is Josh share

00:00:26,860 --> 00:00:30,730
bomb and I live in the destination city

00:00:28,840 --> 00:00:32,470
of the train that Johnny Cash keeps

00:00:30,730 --> 00:00:35,110
hearing from Folsom Prison I live in San

00:00:32,470 --> 00:00:39,489
Antonio I'm a graduate of the Ohio State

00:00:35,110 --> 00:00:43,210
University and I majored in military

00:00:39,489 --> 00:00:44,650
history but now I write software I just

00:00:43,210 --> 00:00:46,630
finished my third year at Rackspace and

00:00:44,650 --> 00:00:48,430
we are the service leader in cloud

00:00:46,630 --> 00:00:50,290
computing we have 9 production data

00:00:48,430 --> 00:00:53,350
centers including one right here in

00:00:50,290 --> 00:00:56,380
grapevine but also London Hong Kong and

00:00:53,350 --> 00:00:58,630
Sydney now our business model is built

00:00:56,380 --> 00:01:02,410
to adjust a customer needs quickly and

00:00:58,630 --> 00:01:04,270
efficiently Rackspace is a founding

00:01:02,410 --> 00:01:06,479
member of the Open Compute Project which

00:01:04,270 --> 00:01:08,950
is open source for data center hardware

00:01:06,479 --> 00:01:12,090
we're helping establish some designs

00:01:08,950 --> 00:01:14,920
which with which hardware companies can

00:01:12,090 --> 00:01:17,590
build to provide cheap and efficient

00:01:14,920 --> 00:01:20,649
computing infrastructures our goal along

00:01:17,590 --> 00:01:24,190
with Facebook Intel Arista and others is

00:01:20,649 --> 00:01:25,479
data centers full of vanity free servers

00:01:24,190 --> 00:01:27,100
which are thirty-eight percent more

00:01:25,479 --> 00:01:29,470
efficient and twenty-four percent less

00:01:27,100 --> 00:01:31,990
expensive to build and run than current

00:01:29,470 --> 00:01:34,869
state-of-the-art data centers along with

00:01:31,990 --> 00:01:37,000
NASA we open sourced the cloud as the

00:01:34,869 --> 00:01:38,830
co-founder of OpenStack which is a

00:01:37,000 --> 00:01:41,140
massively scalable cloud operating

00:01:38,830 --> 00:01:43,149
system designed from the ground up to

00:01:41,140 --> 00:01:45,490
provide private and public clouds with

00:01:43,149 --> 00:01:48,039
some standards to prevent vendor lock-in

00:01:45,490 --> 00:01:52,390
it benefits both cloud providers and

00:01:48,039 --> 00:01:54,729
cloud customers but many industry

00:01:52,390 --> 00:01:56,110
marketing gurus will be surprised to

00:01:54,729 --> 00:01:59,140
know that even the cloud runs on

00:01:56,110 --> 00:02:00,880
physical hardware there are still some

00:01:59,140 --> 00:02:02,530
situations where having certain pieces

00:02:00,880 --> 00:02:05,289
of physical infrastructure make the most

00:02:02,530 --> 00:02:06,880
sense the biggest and best computing

00:02:05,289 --> 00:02:09,429
environments in the future will be a

00:02:06,880 --> 00:02:12,610
hybrid of physical and virtualized

00:02:09,429 --> 00:02:14,440
resources but you're not here to listen

00:02:12,610 --> 00:02:17,500
to me give a 40-minute marketing pitch

00:02:14,440 --> 00:02:20,110
about Rackspace no I am standing here

00:02:17,500 --> 00:02:21,940
before you today to talk about how

00:02:20,110 --> 00:02:24,519
members of Rackspace's global data

00:02:21,940 --> 00:02:26,739
center and infrastructure teams work

00:02:24,519 --> 00:02:27,970
together to automate network device

00:02:26,739 --> 00:02:29,710
provisioning

00:02:27,970 --> 00:02:31,630
in six data centers across four

00:02:29,710 --> 00:02:33,940
different continents and specifically

00:02:31,630 --> 00:02:35,770
I'm going to present a case study of one

00:02:33,940 --> 00:02:39,150
of the applications that delivers an API

00:02:35,770 --> 00:02:42,130
in this process called fire kick I

00:02:39,150 --> 00:02:44,230
thought Brian Martin Morton did a great

00:02:42,130 --> 00:02:45,850
job yesterday of explaining some of the

00:02:44,230 --> 00:02:48,880
trade-offs that his team made at Yammer

00:02:45,850 --> 00:02:50,920
and it's been interesting to me that

00:02:48,880 --> 00:02:52,690
many of the talks that we've we've heard

00:02:50,920 --> 00:02:55,090
have described conditions in a less than

00:02:52,690 --> 00:02:57,580
ideal world and I want to continue that

00:02:55,090 --> 00:03:00,160
discussion by sharing three simple

00:02:57,580 --> 00:03:02,530
examples of design choices we made to

00:03:00,160 --> 00:03:04,240
three separate problems none of the

00:03:02,530 --> 00:03:06,190
decisions were made in a vacuum and so

00:03:04,240 --> 00:03:07,959
we're going to talk about what some

00:03:06,190 --> 00:03:10,750
approaches might have been and what

00:03:07,959 --> 00:03:12,220
trade-offs we've made and it's always

00:03:10,750 --> 00:03:15,310
important to know the context of these

00:03:12,220 --> 00:03:16,750
decisions but there's a there's another

00:03:15,310 --> 00:03:22,930
question why do we live in a less than

00:03:16,750 --> 00:03:24,550
ideal world interacting with things

00:03:22,930 --> 00:03:27,070
outside of your control can get messy

00:03:24,550 --> 00:03:29,470
and sometimes it's act as accidental

00:03:27,070 --> 00:03:33,100
other times it feels a bit more

00:03:29,470 --> 00:03:35,590
intentional for the purposes of this

00:03:33,100 --> 00:03:38,410
talk when I say the word device I mean

00:03:35,590 --> 00:03:42,400
either a hardwired hardware firewall or

00:03:38,410 --> 00:03:44,290
load balancer also in order for these

00:03:42,400 --> 00:03:47,170
devices to work with a customer's

00:03:44,290 --> 00:03:49,420
environment extra configurations need to

00:03:47,170 --> 00:03:52,630
be made that set up static routes access

00:03:49,420 --> 00:03:54,610
control lists ports interfaces and we

00:03:52,630 --> 00:04:00,489
generally call these files collectively

00:03:54,610 --> 00:04:01,930
configs here's a diagram of a fairly

00:04:00,489 --> 00:04:03,959
common setup for many of our customers

00:04:01,930 --> 00:04:07,239
who have compliance and regulatory

00:04:03,959 --> 00:04:10,030
requirements they have a dedicated

00:04:07,239 --> 00:04:12,970
firewall and load balancer that stands

00:04:10,030 --> 00:04:15,580
logically in front of a combination of

00:04:12,970 --> 00:04:18,220
physical hardware a private cloud or

00:04:15,580 --> 00:04:19,540
connections to the public cloud the

00:04:18,220 --> 00:04:21,370
networking devices for this type of

00:04:19,540 --> 00:04:22,990
environment are required and it's the

00:04:21,370 --> 00:04:25,780
only way that they can access the

00:04:22,990 --> 00:04:28,210
internet there are lots of automation

00:04:25,780 --> 00:04:31,810
tools for the things down at this level

00:04:28,210 --> 00:04:33,400
here but the network device automation

00:04:31,810 --> 00:04:35,740
is a bit more challenging due to

00:04:33,400 --> 00:04:38,550
variance in device os's and lack of

00:04:35,740 --> 00:04:40,750
automation capabilities on the devices

00:04:38,550 --> 00:04:41,720
so let me tell you about how this works

00:04:40,750 --> 00:04:52,820
at Rackspace

00:04:41,720 --> 00:04:54,710
but first a little interlude so

00:04:52,820 --> 00:04:56,180
Rackspace started in 1998 is just three

00:04:54,710 --> 00:04:58,490
guys in a dorm room trinity university

00:04:56,180 --> 00:05:00,170
but over the past 15 years the company

00:04:58,490 --> 00:05:02,090
has experienced an extreme amount of

00:05:00,170 --> 00:05:04,730
growth in a short amount of time we're

00:05:02,090 --> 00:05:06,050
now over 5,000 employees and given that

00:05:04,730 --> 00:05:08,540
the business model is about providing

00:05:06,050 --> 00:05:10,850
service above and beyond what customers

00:05:08,540 --> 00:05:13,940
expect automation has not only been

00:05:10,850 --> 00:05:16,250
unable to keep up but it's often taken a

00:05:13,940 --> 00:05:19,100
backseat to just getting things done and

00:05:16,250 --> 00:05:21,290
so as we begin to face the type of scale

00:05:19,100 --> 00:05:23,480
that we feel the open cloud is going to

00:05:21,290 --> 00:05:25,220
deliver we've placed automation is one

00:05:23,480 --> 00:05:28,760
of the highest priorities throughout the

00:05:25,220 --> 00:05:30,710
company in Robert Heinlein's novel The

00:05:28,760 --> 00:05:32,980
Rolling Stones he has a fantastic quote

00:05:30,710 --> 00:05:35,480
about technology implementations that

00:05:32,980 --> 00:05:38,390
aligns with our experience so far and it

00:05:35,480 --> 00:05:40,880
begins sorry every technology goes

00:05:38,390 --> 00:05:43,100
through three stages first it crudely

00:05:40,880 --> 00:05:46,280
simple and quite unsatisfactory gadget

00:05:43,100 --> 00:05:48,140
and this coincides with in the past when

00:05:46,280 --> 00:05:49,880
a device would be configured at

00:05:48,140 --> 00:05:51,890
rackspace people would pass around

00:05:49,880 --> 00:05:53,990
copies of existing configs and hand edit

00:05:51,890 --> 00:05:55,990
them before copying and pasting them

00:05:53,990 --> 00:05:58,810
ended with terminal onto the device

00:05:55,990 --> 00:06:02,750
obviously this was crude and quite

00:05:58,810 --> 00:06:06,320
unsatisfactory there was a lack of

00:06:02,750 --> 00:06:08,150
standardization and in fact some people

00:06:06,320 --> 00:06:09,650
had their own way of configuring things

00:06:08,150 --> 00:06:11,260
which made it extremely difficult to

00:06:09,650 --> 00:06:13,940
troubleshoot other people's

00:06:11,260 --> 00:06:16,760
configurations there was also a high

00:06:13,940 --> 00:06:18,140
chance for human error there really

00:06:16,760 --> 00:06:20,510
isn't anything to be traded off with

00:06:18,140 --> 00:06:23,180
this approach it was just poor and the

00:06:20,510 --> 00:06:26,630
result was longer time for to provision

00:06:23,180 --> 00:06:28,220
and more time spent configuring here's

00:06:26,630 --> 00:06:30,860
the second part of the quote and I'm

00:06:28,220 --> 00:06:34,160
sorry for the length but it you can't

00:06:30,860 --> 00:06:37,400
summarize this second an enormously

00:06:34,160 --> 00:06:39,229
complicated group of gadgets designed to

00:06:37,400 --> 00:06:41,660
overcome the shortcomings of the

00:06:39,229 --> 00:06:43,340
original and achieving thereby somewhat

00:06:41,660 --> 00:06:47,330
satisfactory performance through

00:06:43,340 --> 00:06:50,270
extremely complex compromise so a few

00:06:47,330 --> 00:06:52,280
years later a team developed a config

00:06:50,270 --> 00:06:54,590
file generator as part of a web

00:06:52,280 --> 00:06:54,920
application templates and variables for

00:06:54,590 --> 00:06:56,810
the

00:06:54,920 --> 00:07:00,040
config files were stored in a database

00:06:56,810 --> 00:07:02,810
and editable via the web application

00:07:00,040 --> 00:07:04,580
additionally device details were pulled

00:07:02,810 --> 00:07:08,270
from a global configuration system and

00:07:04,580 --> 00:07:10,820
so when someone wanted a config they had

00:07:08,270 --> 00:07:13,280
to go log in the web app select a

00:07:10,820 --> 00:07:14,720
template input some values and the file

00:07:13,280 --> 00:07:16,520
will be generated and displayed as plain

00:07:14,720 --> 00:07:18,560
text in the browser they then still had

00:07:16,520 --> 00:07:21,050
to copy and paste this file into a

00:07:18,560 --> 00:07:23,150
terminal on the device so the trade-offs

00:07:21,050 --> 00:07:24,980
were that standardization was a little

00:07:23,150 --> 00:07:27,290
bit better but the opportunity to hand

00:07:24,980 --> 00:07:29,360
at it and kind of cowboy still existed

00:07:27,290 --> 00:07:31,400
and additionally people still had to

00:07:29,360 --> 00:07:34,400
take time to generate these configs and

00:07:31,400 --> 00:07:36,410
copy it to the device and each business

00:07:34,400 --> 00:07:38,780
segment within Rackspace started to want

00:07:36,410 --> 00:07:40,940
their own configurations yet they still

00:07:38,780 --> 00:07:45,110
wanted to use the base templates and so

00:07:40,940 --> 00:07:49,580
these templates became just massive

00:07:45,110 --> 00:07:51,590
nestings of if statements and and a

00:07:49,580 --> 00:07:54,410
variety of different configurations

00:07:51,590 --> 00:07:57,550
based on device attributes and it was

00:07:54,410 --> 00:08:01,310
really it was a problem to maintain and

00:07:57,550 --> 00:08:05,060
additionally some of the the the configs

00:08:01,310 --> 00:08:07,220
got stale and so not only was the system

00:08:05,060 --> 00:08:09,050
not automated but the things they put on

00:08:07,220 --> 00:08:12,650
the device actually had to be reworked

00:08:09,050 --> 00:08:16,460
and automation that requires rework is

00:08:12,650 --> 00:08:18,020
probably the worst thing ever so here's

00:08:16,460 --> 00:08:20,350
the final part of the quote third a

00:08:18,020 --> 00:08:22,460
final proper design therefrom and

00:08:20,350 --> 00:08:24,230
clearly what we had wasn't good enough

00:08:22,460 --> 00:08:26,510
and so several groups got together and

00:08:24,230 --> 00:08:28,250
took ownership of the problem and set

00:08:26,510 --> 00:08:30,140
the goal of automating the process once

00:08:28,250 --> 00:08:32,150
and for all and not only would every

00:08:30,140 --> 00:08:34,190
device be delivered to the support staff

00:08:32,150 --> 00:08:36,260
with a standard set of configurations it

00:08:34,190 --> 00:08:38,930
would also be customized for routing all

00:08:36,260 --> 00:08:41,090
customers traffic additionally the

00:08:38,930 --> 00:08:44,330
switches and agarres in the cabinets

00:08:41,090 --> 00:08:45,830
above these devices that the device

00:08:44,330 --> 00:08:47,210
communicated through would also get

00:08:45,830 --> 00:08:49,820
configured correctly with the proper

00:08:47,210 --> 00:08:50,830
vlans so the support staff could spend

00:08:49,820 --> 00:08:53,390
their time adding additional

00:08:50,830 --> 00:08:56,240
configurations and give extra support to

00:08:53,390 --> 00:08:57,980
the for the customers wishes so this

00:08:56,240 --> 00:08:59,750
wasn't going to be an easy task but

00:08:57,980 --> 00:09:03,250
there were some multiple pieces

00:08:59,750 --> 00:09:03,250
available from which to build from

00:09:04,220 --> 00:09:09,650
we called this process kick in the rack

00:09:06,050 --> 00:09:14,240
and there is an existing one for servers

00:09:09,650 --> 00:09:16,370
and now we modified it for for firewalls

00:09:14,240 --> 00:09:18,290
and load balancers but in short when a

00:09:16,370 --> 00:09:20,480
device has changed in the global

00:09:18,290 --> 00:09:22,760
configuration system that triggers a

00:09:20,480 --> 00:09:24,890
series of events that generates the

00:09:22,760 --> 00:09:27,200
necessary config places that on the

00:09:24,890 --> 00:09:29,930
device configures the networking and

00:09:27,200 --> 00:09:32,870
then marks it is ready to go for the

00:09:29,930 --> 00:09:34,910
support staff an internal orchestration

00:09:32,870 --> 00:09:36,530
engine would process the events and make

00:09:34,910 --> 00:09:38,480
calls to the various services that we

00:09:36,530 --> 00:09:40,910
had within the company one of these

00:09:38,480 --> 00:09:43,180
services stored all the IP information

00:09:40,910 --> 00:09:45,410
data which is called environment manager

00:09:43,180 --> 00:09:47,480
another one handed handled all

00:09:45,410 --> 00:09:50,840
communication with the devices which we

00:09:47,480 --> 00:09:52,610
call fire engine a crucial service that

00:09:50,840 --> 00:09:54,230
was missing however was the one that

00:09:52,610 --> 00:09:57,020
could generate configurations and

00:09:54,230 --> 00:10:01,520
establish Authority on how a device and

00:09:57,020 --> 00:10:03,260
its environment should be configured the

00:10:01,520 --> 00:10:05,120
entirety of this process was automated

00:10:03,260 --> 00:10:08,810
by at least six different groups using a

00:10:05,120 --> 00:10:17,470
combination of pearl Ruby Skala Python

00:10:08,810 --> 00:10:19,370
Erlang and c-sharp there was however

00:10:17,470 --> 00:10:21,620
something that had some of that

00:10:19,370 --> 00:10:23,120
information that we needed to provide

00:10:21,620 --> 00:10:25,790
the missing service that we were looking

00:10:23,120 --> 00:10:28,820
for and it kind of had an idea about how

00:10:25,790 --> 00:10:30,830
to generate a configuration and if this

00:10:28,820 --> 00:10:33,350
functionality were exposed as part of a

00:10:30,830 --> 00:10:35,840
service that would fill the gap but as

00:10:33,350 --> 00:10:37,670
we started trying to figure out where

00:10:35,840 --> 00:10:41,000
the the lines between these services

00:10:37,670 --> 00:10:43,100
would fall a couple questions arose did

00:10:41,000 --> 00:10:45,170
this functionality belong on its own or

00:10:43,100 --> 00:10:50,270
did it belong as part of an existing

00:10:45,170 --> 00:10:52,370
service in Eric Raymond's book the art

00:10:50,270 --> 00:10:54,170
of unix programming he describes an

00:10:52,370 --> 00:10:55,970
abstraction that he notices unix

00:10:54,170 --> 00:10:58,370
implementers used when designing their

00:10:55,970 --> 00:11:00,620
systems and it's the rule of separation

00:10:58,370 --> 00:11:03,110
and it's the division of mechanism and

00:11:00,620 --> 00:11:05,090
policy and another way to say this is to

00:11:03,110 --> 00:11:07,670
separate interfaces from engines and

00:11:05,090 --> 00:11:10,160
this idea can applied at virtually any

00:11:07,670 --> 00:11:13,340
level of software because it ties things

00:11:10,160 --> 00:11:16,520
together that change in a good way it's

00:11:13,340 --> 00:11:17,779
cohesion it's not coupling but what are

00:11:16,520 --> 00:11:20,139
these things though

00:11:17,779 --> 00:11:22,839
a mechanism is something that does work

00:11:20,139 --> 00:11:25,730
fire engine which is the application

00:11:22,839 --> 00:11:28,759
written in Erlang that speaks to the

00:11:25,730 --> 00:11:30,410
devices is a mechanism that we used to

00:11:28,759 --> 00:11:33,319
achieve this environment manager

00:11:30,410 --> 00:11:35,629
provided a policy of IP environment data

00:11:33,319 --> 00:11:40,089
the orchestration engine was the

00:11:35,629 --> 00:11:42,680
mechanism for event processing a policy

00:11:40,089 --> 00:11:45,379
system is something that describes how

00:11:42,680 --> 00:11:47,990
work should be done chef cookbooks are a

00:11:45,379 --> 00:11:50,300
great example of a policy for kicking

00:11:47,990 --> 00:11:51,889
the rack fire kick would establish the

00:11:50,300 --> 00:11:56,449
policy about what kind of configuration

00:11:51,889 --> 00:12:00,800
belonged here while the example in the

00:11:56,449 --> 00:12:02,180
art of UNIX he used is X 11 and it

00:12:00,800 --> 00:12:05,180
showed that if this rule is applied

00:12:02,180 --> 00:12:08,089
inflexibly it can cause problems I think

00:12:05,180 --> 00:12:09,740
it's helpful to apply this pattern when

00:12:08,089 --> 00:12:13,670
trying to decide where functionality

00:12:09,740 --> 00:12:15,920
belongs where in services so we began to

00:12:13,670 --> 00:12:19,540
work to extract fire kick from the web

00:12:15,920 --> 00:12:19,540
app that are currently resided in a

00:12:24,339 --> 00:12:27,920
constraint that we had on this process

00:12:26,480 --> 00:12:29,750
was that the existing web apps

00:12:27,920 --> 00:12:33,439
functionality had to continue working

00:12:29,750 --> 00:12:35,720
throughout and so while extracting fire

00:12:33,439 --> 00:12:37,490
kick out we had to write the client

00:12:35,720 --> 00:12:39,529
software at the same time and this ended

00:12:37,490 --> 00:12:41,240
up being a great advantage because it

00:12:39,529 --> 00:12:44,569
gave us some insights into how the

00:12:41,240 --> 00:12:47,300
service could be leveraged but a mistake

00:12:44,569 --> 00:12:51,589
that we made was waiting until the full

00:12:47,300 --> 00:12:55,240
functionality of the was available that

00:12:51,589 --> 00:12:59,660
was being extracted before we launched

00:12:55,240 --> 00:13:02,540
so it currently had the ability to store

00:12:59,660 --> 00:13:03,800
templates and store variables and you

00:13:02,540 --> 00:13:05,360
can kind of manage them and then it

00:13:03,800 --> 00:13:07,639
would generate the config and we waited

00:13:05,360 --> 00:13:10,639
until all those pieces were done before

00:13:07,639 --> 00:13:12,350
kind of launching the fire kick and in

00:13:10,639 --> 00:13:14,329
hindsight we should have just picked the

00:13:12,350 --> 00:13:17,779
smallest thing the templates or the

00:13:14,329 --> 00:13:19,040
variables or whatever even though we

00:13:17,779 --> 00:13:21,319
were aware that we wanted to launch with

00:13:19,040 --> 00:13:22,670
the Minimum Viable Product we didn't

00:13:21,319 --> 00:13:28,160
make a great decision about what was

00:13:22,670 --> 00:13:31,400
minimally Viable while the application

00:13:28,160 --> 00:13:33,830
runs on Rails specifically

00:13:31,400 --> 00:13:36,200
the rails API gem we really strove to

00:13:33,830 --> 00:13:38,800
maintain as much framework agnosticism

00:13:36,200 --> 00:13:41,150
at the domain level as we could afford

00:13:38,800 --> 00:13:42,560
we did a decent job and it's not

00:13:41,150 --> 00:13:44,450
far-fetched to think that we could

00:13:42,560 --> 00:13:47,420
easily split off some parts and run them

00:13:44,450 --> 00:13:52,670
in Sinatra or even rack we could even

00:13:47,420 --> 00:13:54,980
probably use Erlang ports and kind of a

00:13:52,670 --> 00:13:57,140
it has a communication mechanism so you

00:13:54,980 --> 00:14:00,050
can run a process inside our Lang p.m.

00:13:57,140 --> 00:14:02,000
and we could actually run some Ruby

00:14:00,050 --> 00:14:06,500
interpreter inside of an erlang

00:14:02,000 --> 00:14:08,900
application so but we made the choice to

00:14:06,500 --> 00:14:11,960
not lock into a specific framework and

00:14:08,900 --> 00:14:14,120
that established the policy for the

00:14:11,960 --> 00:14:16,010
controllers we mostly kept to the the

00:14:14,120 --> 00:14:17,840
rails way and we knew we were giving up

00:14:16,010 --> 00:14:18,890
some convenience and not using some of

00:14:17,840 --> 00:14:22,610
the helper methods that were available

00:14:18,890 --> 00:14:23,900
for things mostly the you know

00:14:22,610 --> 00:14:26,840
everything that comes with active

00:14:23,900 --> 00:14:29,090
support but we felt like we were able to

00:14:26,840 --> 00:14:31,100
gain a high degree of freedom for the

00:14:29,090 --> 00:14:35,000
future in essence rails was the

00:14:31,100 --> 00:14:37,820
mechanism but our policy was in like

00:14:35,000 --> 00:14:39,320
Ruby domain objects so let's look at

00:14:37,820 --> 00:14:41,420
three areas where we faced a problem and

00:14:39,320 --> 00:14:48,830
selected one approach over another and

00:14:41,420 --> 00:14:50,540
what these trade-offs gave us there are

00:14:48,830 --> 00:14:53,210
a couple issues that are working against

00:14:50,540 --> 00:14:55,640
us to begin with the first of these was

00:14:53,210 --> 00:14:58,250
the relative and experience that we all

00:14:55,640 --> 00:15:00,530
had within the networking domain our

00:14:58,250 --> 00:15:02,690
team had recently formed together from

00:15:00,530 --> 00:15:04,640
other separate places inside Rackspace

00:15:02,690 --> 00:15:07,940
and we had yet to work together directly

00:15:04,640 --> 00:15:09,830
on a sustained project and we also

00:15:07,940 --> 00:15:12,500
didn't have a tremendous understanding

00:15:09,830 --> 00:15:20,930
of the process as we started working on

00:15:12,500 --> 00:15:23,900
it now all these words aren't

00:15:20,930 --> 00:15:28,070
interchangeable however if you listen to

00:15:23,900 --> 00:15:30,590
two netsec people talk they'll use all

00:15:28,070 --> 00:15:33,470
of these differently in different

00:15:30,590 --> 00:15:35,660
contexts and they will all know exactly

00:15:33,470 --> 00:15:37,340
what they're talking about and it's it's

00:15:35,660 --> 00:15:39,500
super confusing to hear them talk I mean

00:15:37,340 --> 00:15:41,240
there's there's like 12 different words

00:15:39,500 --> 00:15:44,570
on there and just every possible

00:15:41,240 --> 00:15:46,400
permutation is a different concept

00:15:44,570 --> 00:15:49,220
so needless to say this didn't help us

00:15:46,400 --> 00:15:51,800
when we want to do crafted domain so but

00:15:49,220 --> 00:15:54,230
our solution was to give a laser focus

00:15:51,800 --> 00:15:56,720
to each of these tiny items and to begin

00:15:54,230 --> 00:15:58,040
to establish some consistency when

00:15:56,720 --> 00:16:01,970
speaking to people internally and

00:15:58,040 --> 00:16:05,270
externally so uh when we generated a

00:16:01,970 --> 00:16:07,220
config I would often copy and paste just

00:16:05,270 --> 00:16:11,120
one you know a few lines and I would

00:16:07,220 --> 00:16:14,120
hand it to a netsec person I would say

00:16:11,120 --> 00:16:15,980
you know what do you call this just in

00:16:14,120 --> 00:16:18,440
trying to define our own language for

00:16:15,980 --> 00:16:20,510
the for the config and you know I had a

00:16:18,440 --> 00:16:21,920
name that I thought it should be but I

00:16:20,510 --> 00:16:24,080
wanted to make sure that I used the name

00:16:21,920 --> 00:16:25,880
that he used and you know he'd say oh

00:16:24,080 --> 00:16:28,220
that's a static route mapping and

00:16:25,880 --> 00:16:32,090
invariably that's not what i called it

00:16:28,220 --> 00:16:33,680
but we decided that we made sure that it

00:16:32,090 --> 00:16:37,100
got changed then to use that same

00:16:33,680 --> 00:16:39,530
language everywhere else so and also if

00:16:37,100 --> 00:16:42,440
if I heard him then in the future refer

00:16:39,530 --> 00:16:44,900
to the static route mapping as a static

00:16:42,440 --> 00:16:46,880
route or a static or whatever I made

00:16:44,900 --> 00:16:50,060
sure that I asked him do you mean static

00:16:46,880 --> 00:16:52,550
route and so we got we achieved success

00:16:50,060 --> 00:16:55,220
through repetition so when this brings

00:16:52,550 --> 00:16:56,480
me to another kind of minor point that's

00:16:55,220 --> 00:16:58,670
that someone else spoke about yesterday

00:16:56,480 --> 00:17:00,650
and that's automating a process is just

00:16:58,670 --> 00:17:03,620
as much about organizational change as

00:17:00,650 --> 00:17:05,180
it is technical change so if you'll

00:17:03,620 --> 00:17:06,290
remember that I mentioned that one of

00:17:05,180 --> 00:17:09,829
the problems with the second approach

00:17:06,290 --> 00:17:12,079
was that each with automation was that

00:17:09,829 --> 00:17:14,900
each group each segment wanted to have

00:17:12,079 --> 00:17:17,089
their own special configurations for the

00:17:14,900 --> 00:17:19,070
templates and some of that's to be

00:17:17,089 --> 00:17:20,780
expected they did have they did serve

00:17:19,070 --> 00:17:23,240
different use cases and different types

00:17:20,780 --> 00:17:24,920
of customers but we tried to limit it as

00:17:23,240 --> 00:17:27,230
much as possible we wanted fire can

00:17:24,920 --> 00:17:29,900
congenita can fix that were the you know

00:17:27,230 --> 00:17:32,840
the common denominator in the baseline

00:17:29,900 --> 00:17:35,480
and in cases where there were

00:17:32,840 --> 00:17:37,070
differences we just asked that the two

00:17:35,480 --> 00:17:39,650
groups got together and kind of hashed

00:17:37,070 --> 00:17:41,960
it out and it worked really well and as

00:17:39,650 --> 00:17:43,820
part of this you know we established

00:17:41,960 --> 00:17:46,280
some standards inside Rackspace that had

00:17:43,820 --> 00:17:48,320
been you know needed for for a long time

00:17:46,280 --> 00:17:49,610
and I think when you when you tell

00:17:48,320 --> 00:17:53,740
someone that you're going to automate a

00:17:49,610 --> 00:17:56,930
process there's a it it adds a level of

00:17:53,740 --> 00:17:58,400
willingness for them to be you know to

00:17:56,930 --> 00:17:59,540
compromise because they

00:17:58,400 --> 00:18:02,690
that they're kind of getting something

00:17:59,540 --> 00:18:04,340
in return for it so but there's probably

00:18:02,690 --> 00:18:05,990
one other thing that we did that helped

00:18:04,340 --> 00:18:07,880
more than anything else for establishing

00:18:05,990 --> 00:18:13,130
ubiquitous language and that's the swim

00:18:07,880 --> 00:18:15,980
Lane diagram so here's the diagram and

00:18:13,130 --> 00:18:18,830
it basically it represents the state of

00:18:15,980 --> 00:18:22,180
the device as it goes through kick in

00:18:18,830 --> 00:18:25,610
the rack and so the items in blue our

00:18:22,180 --> 00:18:28,610
statuses in the configurate the global

00:18:25,610 --> 00:18:31,970
configuration system and the items in

00:18:28,610 --> 00:18:34,790
gray are actions that happen Green is a

00:18:31,970 --> 00:18:38,390
decision and read or errors of course so

00:18:34,790 --> 00:18:41,630
you can see how the each lane is a

00:18:38,390 --> 00:18:44,210
logical grouping of actions needed to

00:18:41,630 --> 00:18:46,160
get from one status to another so in

00:18:44,210 --> 00:18:48,530
this case the top lane discovery is

00:18:46,160 --> 00:18:56,770
everything needed to get that device

00:18:48,530 --> 00:18:59,870
from what we call rack to discover and

00:18:56,770 --> 00:19:01,820
so this was actually really vital

00:18:59,870 --> 00:19:03,320
because we could you know share this

00:19:01,820 --> 00:19:08,090
work we you know we had a full

00:19:03,320 --> 00:19:09,890
understanding of of how the device what

00:19:08,090 --> 00:19:11,300
status the device was in and it was also

00:19:09,890 --> 00:19:12,710
beneficial for troubleshooting because

00:19:11,300 --> 00:19:15,830
everyone used the same language

00:19:12,710 --> 00:19:18,710
throughout if someone said oh this

00:19:15,830 --> 00:19:21,350
device you know failed during during

00:19:18,710 --> 00:19:23,210
preparation everyone knew the state of

00:19:21,350 --> 00:19:24,740
their system as well as the state of the

00:19:23,210 --> 00:19:30,800
device at that time and we could all

00:19:24,740 --> 00:19:33,190
kind of go out and look and see so the

00:19:30,800 --> 00:19:36,590
we could have just kind of left this

00:19:33,190 --> 00:19:38,270
benefit it's you know kind of an

00:19:36,590 --> 00:19:39,890
external benefit but we really wanted to

00:19:38,270 --> 00:19:43,130
kind of internalize it in the code base

00:19:39,890 --> 00:19:51,770
and so we selected us of a very specific

00:19:43,130 --> 00:19:53,960
approach over a more general one so of

00:19:51,770 --> 00:19:55,850
course everyone knows the quote about

00:19:53,960 --> 00:19:57,560
naming things being one of the you know

00:19:55,850 --> 00:20:00,110
hardest problems in computer science and

00:19:57,560 --> 00:20:01,910
it's hard I feel like it's hard not only

00:20:00,110 --> 00:20:04,700
because you're not sure that your name

00:20:01,910 --> 00:20:06,620
for the abstraction is is correct but

00:20:04,700 --> 00:20:08,390
you're also fighting against your own

00:20:06,620 --> 00:20:10,580
kind of natural tendency for

00:20:08,390 --> 00:20:12,169
inconsistency and I mean I've definitely

00:20:10,580 --> 00:20:14,960
caught myself

00:20:12,169 --> 00:20:17,690
you know many times writing a variable

00:20:14,960 --> 00:20:20,359
name one way every place except for one

00:20:17,690 --> 00:20:23,440
where I decide to make it shorter or

00:20:20,359 --> 00:20:28,220
it's a similar name but not exactly and

00:20:23,440 --> 00:20:31,389
like that's a kind of a hard it's kind

00:20:28,220 --> 00:20:34,759
of a just a human nature I think and so

00:20:31,389 --> 00:20:38,749
we you know really focused on on on our

00:20:34,759 --> 00:20:40,669
names and I think developers have a

00:20:38,749 --> 00:20:43,970
strong urge to fashion the name that

00:20:40,669 --> 00:20:45,409
they think should be correct and I don't

00:20:43,970 --> 00:20:47,029
love all those names on the swim Lane

00:20:45,409 --> 00:20:49,129
document and I think some of those

00:20:47,029 --> 00:20:52,100
aren't technically correct which is of

00:20:49,129 --> 00:20:54,109
course the best kind of correct but we

00:20:52,100 --> 00:20:55,940
decided to not satisfy our personal

00:20:54,109 --> 00:20:57,529
desire for correctness and instead use

00:20:55,940 --> 00:20:59,509
the name that everyone else was using

00:20:57,529 --> 00:21:04,580
and so here's some examples from the

00:20:59,509 --> 00:21:07,159
code so here's a listing of the of the

00:21:04,580 --> 00:21:09,440
the directory that holds all the the

00:21:07,159 --> 00:21:12,049
fire kick pieces specific to each swim

00:21:09,440 --> 00:21:13,759
Lane and you can see pretty simply that

00:21:12,049 --> 00:21:17,239
we name them exactly as they're named in

00:21:13,759 --> 00:21:21,080
the swim Lane so discovery preparation

00:21:17,239 --> 00:21:23,090
deployment network here's a simplified

00:21:21,080 --> 00:21:26,230
example of a swim Lane and I've admitted

00:21:23,090 --> 00:21:28,489
I've omitted air-handling logging

00:21:26,230 --> 00:21:31,669
construction etc I really want to bring

00:21:28,489 --> 00:21:34,369
attention to the perform method and it

00:21:31,669 --> 00:21:36,200
begins by calling you know run on

00:21:34,369 --> 00:21:39,109
something called device discovery and

00:21:36,200 --> 00:21:41,149
that handles all the logic necessary for

00:21:39,109 --> 00:21:44,119
the swim Lane and I'll talk about the

00:21:41,149 --> 00:21:46,009
device discovery in a minute if an air

00:21:44,119 --> 00:21:48,309
is raised we capture it briefly before

00:21:46,009 --> 00:21:50,179
rear eizan it and finally we ensure that

00:21:48,309 --> 00:21:52,730
orchestration has kept abreast of the

00:21:50,179 --> 00:21:54,470
changes by notifying it the important

00:21:52,730 --> 00:21:56,179
thing is that we are thinking of

00:21:54,470 --> 00:21:57,619
discovery and the same way that others

00:21:56,179 --> 00:21:59,330
think of it and that there's a single

00:21:57,619 --> 00:22:03,169
place where we can look to start

00:21:59,330 --> 00:22:04,940
troubleshooting so the benefits of

00:22:03,169 --> 00:22:06,980
enforcing ubiquitous language are

00:22:04,940 --> 00:22:08,899
learning together and easier

00:22:06,980 --> 00:22:11,539
troubleshooting and a possible problem

00:22:08,899 --> 00:22:13,549
with matching this domain exactly is

00:22:11,539 --> 00:22:16,639
that if people should start using

00:22:13,549 --> 00:22:17,779
different names the code will have to

00:22:16,639 --> 00:22:21,529
change because then there'll be a

00:22:17,779 --> 00:22:23,149
mismatch and this trade office is pretty

00:22:21,529 --> 00:22:26,499
cut and dry but let's look at one that

00:22:23,149 --> 00:22:26,499
might be not quite as obvious

00:22:28,140 --> 00:22:33,520
so even if you start to establish a

00:22:31,390 --> 00:22:36,850
common language it's not a guarantee

00:22:33,520 --> 00:22:38,310
that that language that you've got will

00:22:36,850 --> 00:22:40,660
give you smooth sailing from here on out

00:22:38,310 --> 00:22:42,820
the reality is that sometimes the

00:22:40,660 --> 00:22:44,410
consumers of your service make choices

00:22:42,820 --> 00:22:48,430
of their own which limits their

00:22:44,410 --> 00:22:50,620
flexibility so the orchestration engine

00:22:48,430 --> 00:22:53,320
in this process it's it's the driver for

00:22:50,620 --> 00:22:55,870
the whole thing and it adheres events

00:22:53,320 --> 00:22:58,480
and it notifies the next service of what

00:22:55,870 --> 00:23:02,230
to accomplish and so by its nature it's

00:22:58,480 --> 00:23:03,760
fairly configuration heavy and one of

00:23:02,230 --> 00:23:06,730
the configurations you could make was

00:23:03,760 --> 00:23:10,240
obviously making an HTTP call and so

00:23:06,730 --> 00:23:12,780
when the device automation begins so

00:23:10,240 --> 00:23:15,190
when the devices status moves to racked

00:23:12,780 --> 00:23:19,120
orchestration notifies fire kick of the

00:23:15,190 --> 00:23:21,340
the event via HTTP so as we started

00:23:19,120 --> 00:23:24,070
designing this we kind of thought you

00:23:21,340 --> 00:23:26,380
know how would we like our you know are

00:23:24,070 --> 00:23:32,230
you are you our eyes to look like and

00:23:26,380 --> 00:23:34,780
you know I would say we tried to adhere

00:23:32,230 --> 00:23:38,980
as much to you know rest practices as

00:23:34,780 --> 00:23:42,190
possible without being extremely strict

00:23:38,980 --> 00:23:43,690
about it and you'll see why so ideally

00:23:42,190 --> 00:23:46,030
we'd like to establish the same sort of

00:23:43,690 --> 00:23:47,530
ubiquitous language on our API resource

00:23:46,030 --> 00:23:51,220
endpoints as we've established in the

00:23:47,530 --> 00:23:54,040
code base and so perhaps you know a nice

00:23:51,220 --> 00:23:57,520
thing would be to nest the swim lanes

00:23:54,040 --> 00:23:59,500
resource under the devices resource and

00:23:57,520 --> 00:24:01,510
let's say discovery might be a member of

00:23:59,500 --> 00:24:03,310
that resource and you know this looks

00:24:01,510 --> 00:24:04,900
pretty tidy I mean I can I can show you

00:24:03,310 --> 00:24:08,530
this and you kind of immediately know

00:24:04,900 --> 00:24:10,270
what's what's about to happen but kind

00:24:08,530 --> 00:24:12,910
of this is where our issue arose however

00:24:10,270 --> 00:24:14,380
and that is that each action and the

00:24:12,910 --> 00:24:15,670
orchestration engine need to be

00:24:14,380 --> 00:24:17,920
configured with a different URL

00:24:15,670 --> 00:24:23,020
depending upon what event was processed

00:24:17,920 --> 00:24:26,920
and the the orchestration team it

00:24:23,020 --> 00:24:29,050
required they're kind of like they're a

00:24:26,920 --> 00:24:31,810
global group and so they do not have a

00:24:29,050 --> 00:24:33,970
lot of extra resources to kind of just

00:24:31,810 --> 00:24:35,470
be sitting waiting to change these

00:24:33,970 --> 00:24:37,180
configurations and as we were testing

00:24:35,470 --> 00:24:38,620
things we realized that we were kind of

00:24:37,180 --> 00:24:43,000
out of you out of order

00:24:38,620 --> 00:24:44,830
and it was kind of it was hard for it

00:24:43,000 --> 00:24:46,630
was hard for us to have them at the

00:24:44,830 --> 00:24:50,190
ready to make these changes for us so we

00:24:46,630 --> 00:24:52,330
looked as a city we look at this

00:24:50,190 --> 00:24:54,820
situation and we decided that a

00:24:52,330 --> 00:24:57,070
different approach was necessary and we

00:24:54,820 --> 00:25:00,070
decided to assume that cost of change

00:24:57,070 --> 00:25:03,090
ourselves because it was actually much

00:25:00,070 --> 00:25:07,870
lower for us than it was for them and

00:25:03,090 --> 00:25:10,330
this is what we ended up with and this

00:25:07,870 --> 00:25:11,890
time we solve the problem by selecting a

00:25:10,330 --> 00:25:14,530
more general approach over a more

00:25:11,890 --> 00:25:17,020
specific approach by providing a single

00:25:14,530 --> 00:25:19,720
URI for the orchestration engine and one

00:25:17,020 --> 00:25:21,540
of their data elements that they have

00:25:19,720 --> 00:25:25,840
where they can use to generate the API

00:25:21,540 --> 00:25:27,820
the URL to call is a friendly name of

00:25:25,840 --> 00:25:30,309
the step that was currently being run

00:25:27,820 --> 00:25:32,740
and so we chose the resource name kicks

00:25:30,309 --> 00:25:35,170
over swim lanes because it represented

00:25:32,740 --> 00:25:36,880
the entirety of the process and a swim

00:25:35,170 --> 00:25:38,800
lane was just a single element within a

00:25:36,880 --> 00:25:40,990
process and so since we weren't nesting

00:25:38,800 --> 00:25:44,500
that under there anymore we went with a

00:25:40,990 --> 00:25:47,860
more general approach and so now they

00:25:44,500 --> 00:25:50,740
can post to this URL and as long as they

00:25:47,860 --> 00:25:52,600
have that as the body it will work and

00:25:50,740 --> 00:25:55,150
that's the the the one dash discovery is

00:25:52,600 --> 00:25:59,050
the friendly name and the great benefit

00:25:55,150 --> 00:26:00,610
of this was every place in the

00:25:59,050 --> 00:26:03,100
orchestration engine that they need to

00:26:00,610 --> 00:26:04,840
interact with fire kick for the kick in

00:26:03,100 --> 00:26:08,110
the rack process they can actually copy

00:26:04,840 --> 00:26:10,630
the same uninterpreted URL string

00:26:08,110 --> 00:26:14,830
everywhere so their cost of change

00:26:10,630 --> 00:26:17,080
became became zero it so the code to

00:26:14,830 --> 00:26:25,090
implement this is fairly simple but

00:26:17,080 --> 00:26:26,800
flexible so this is a pretty standard

00:26:25,090 --> 00:26:29,620
rails control or create method for a

00:26:26,800 --> 00:26:33,010
post action it instantiates a new kick

00:26:29,620 --> 00:26:35,470
process and it passes in a device and

00:26:33,010 --> 00:26:38,350
some prams for the step and then of

00:26:35,470 --> 00:26:42,370
course it responds so here's the kick

00:26:38,350 --> 00:26:45,100
process it uses a what we've called like

00:26:42,370 --> 00:26:48,490
a class method facade to create a new

00:26:45,100 --> 00:26:52,360
instance and then calls start on that

00:26:48,490 --> 00:26:54,370
instance before returning itself the

00:26:52,360 --> 00:26:58,210
interesting thing to know is that when

00:26:54,370 --> 00:27:01,750
it does the the look up in the hash we

00:26:58,210 --> 00:27:04,480
can chain multiple steps together as

00:27:01,750 --> 00:27:05,950
necessary and so there's times where

00:27:04,480 --> 00:27:08,890
even though we're notifying the

00:27:05,950 --> 00:27:10,420
orchestration of updates we might want

00:27:08,890 --> 00:27:12,580
to do three or four things in a row and

00:27:10,420 --> 00:27:18,190
we actually roll through several swim

00:27:12,580 --> 00:27:20,110
lanes without without stopping so the

00:27:18,190 --> 00:27:22,120
benefits of our approach are that we

00:27:20,110 --> 00:27:23,980
maintain flexibility yet we haven't

00:27:22,120 --> 00:27:26,710
deviated from our domain language and

00:27:23,980 --> 00:27:29,260
we've isolated an inflexible customer as

00:27:26,710 --> 00:27:30,820
much as possible and so we've started to

00:27:29,260 --> 00:27:33,910
kind of establish a boundary or a

00:27:30,820 --> 00:27:37,120
frontier around our application so

00:27:33,910 --> 00:27:39,150
here's the final example this is a

00:27:37,120 --> 00:27:42,640
trade-off that we made to remove some

00:27:39,150 --> 00:27:44,350
bottlenecks while developing and late in

00:27:42,640 --> 00:27:46,120
the development process we discovered a

00:27:44,350 --> 00:27:48,309
roadblock that required a significant

00:27:46,120 --> 00:27:51,760
amount of code to be written utilizing

00:27:48,309 --> 00:27:53,230
some existing data sources and there

00:27:51,760 --> 00:27:54,940
were only a couple team members working

00:27:53,230 --> 00:27:57,280
on it and we were going to switch you

00:27:54,940 --> 00:28:01,540
know a lot of people to start to begin

00:27:57,280 --> 00:28:03,600
working on it as well and the this

00:28:01,540 --> 00:28:06,790
normally probably wouldn't be a a

00:28:03,600 --> 00:28:10,059
bottleneck as such except that do to our

00:28:06,790 --> 00:28:13,510
newness to the domain we actually had no

00:28:10,059 --> 00:28:15,220
idea how to start a bike what what

00:28:13,510 --> 00:28:17,710
abstraction is to start using these were

00:28:15,220 --> 00:28:19,870
in the config there's different sections

00:28:17,710 --> 00:28:22,990
and we just kind of pulled out sections

00:28:19,870 --> 00:28:26,380
that were similar and you know required

00:28:22,990 --> 00:28:28,330
a lot of kind of data munging and you

00:28:26,380 --> 00:28:31,840
there's just a lot of fog around it and

00:28:28,330 --> 00:28:35,140
additionally we were past a deadline and

00:28:31,840 --> 00:28:37,510
you know there was not there was not

00:28:35,140 --> 00:28:39,760
pressure on us you know from you know

00:28:37,510 --> 00:28:42,309
our boss or organizational pressure to

00:28:39,760 --> 00:28:45,460
say like hey you know this is this is

00:28:42,309 --> 00:28:49,179
late but I think that we kind of have an

00:28:45,460 --> 00:28:50,559
internal clock for delivery and everyone

00:28:49,179 --> 00:28:56,290
was you know really wanting to launch it

00:28:50,559 --> 00:28:59,980
so we you know kind of spread it out to

00:28:56,290 --> 00:29:02,290
to to alleviate these bottlenecks so we

00:28:59,980 --> 00:29:03,940
focused on creating service objects that

00:29:02,290 --> 00:29:05,370
provided a function wrapped up in its

00:29:03,940 --> 00:29:07,920
own little entity and

00:29:05,370 --> 00:29:09,900
these little objects were mostly small

00:29:07,920 --> 00:29:12,300
classes that wrap some data and process

00:29:09,900 --> 00:29:14,670
together as a logical grouping and we

00:29:12,300 --> 00:29:16,410
use these objects as part of the system

00:29:14,670 --> 00:29:20,550
that generated sections of the config

00:29:16,410 --> 00:29:22,410
file so a key benefit to this approach

00:29:20,550 --> 00:29:24,210
is that we increase the surface area of

00:29:22,410 --> 00:29:26,580
our application to allow more people to

00:29:24,210 --> 00:29:29,040
work on it without requiring interaction

00:29:26,580 --> 00:29:31,890
with the work that others were doing and

00:29:29,040 --> 00:29:33,630
each of these little items had a little

00:29:31,890 --> 00:29:35,490
bit of discovery of their own into it

00:29:33,630 --> 00:29:38,070
and so it was hard to lay a structure

00:29:35,490 --> 00:29:39,840
and you know as I mentioned and each

00:29:38,070 --> 00:29:41,640
person that was working on it then could

00:29:39,840 --> 00:29:43,440
kind of go off and sit with a networking

00:29:41,640 --> 00:29:44,940
person and they would do what they

00:29:43,440 --> 00:29:46,740
needed to do to generate that one

00:29:44,940 --> 00:29:50,670
specific thing from data that we had

00:29:46,740 --> 00:29:53,210
globally and you know this is this was

00:29:50,670 --> 00:29:56,010
not an optimal thing I mean in fact it's

00:29:53,210 --> 00:29:58,590
you know we we made the trade-off we

00:29:56,010 --> 00:30:02,700
sacrifice some clarity in the code for

00:29:58,590 --> 00:30:04,890
some I guess some some speed to delivery

00:30:02,700 --> 00:30:06,660
and but you know since we were holding

00:30:04,890 --> 00:30:10,860
up the product launch like we felt this

00:30:06,660 --> 00:30:13,770
was really the best option so here's the

00:30:10,860 --> 00:30:16,760
example from we saw earlier the device

00:30:13,770 --> 00:30:21,620
discovery and it this one doesn't use

00:30:16,760 --> 00:30:25,020
like service objects and so here we get

00:30:21,620 --> 00:30:27,900
some data back from the API to fire

00:30:25,020 --> 00:30:31,440
engine and then we kind of iterate

00:30:27,900 --> 00:30:35,120
through it here grab one and then we

00:30:31,440 --> 00:30:40,559
update it and this is all about

00:30:35,120 --> 00:30:42,240
determining which mac address is tied to

00:30:40,559 --> 00:30:46,140
which device because when you power

00:30:42,240 --> 00:30:49,170
these these these devices on it says hi

00:30:46,140 --> 00:30:50,670
I'm this Mac but it has no idea what

00:30:49,170 --> 00:30:54,179
device number that is in the global

00:30:50,670 --> 00:30:56,510
configuration system and so you know you

00:30:54,179 --> 00:31:00,390
have to you have to require that

00:30:56,510 --> 00:31:02,880
hopefully everyone cabled it right so

00:31:00,390 --> 00:31:05,280
here's one that uses a kind of what I

00:31:02,880 --> 00:31:07,080
would call the service object concept

00:31:05,280 --> 00:31:11,490
and it wraps those little pieces

00:31:07,080 --> 00:31:13,410
together and so it switches pretty

00:31:11,490 --> 00:31:14,700
similar but now instead of iterating

00:31:13,410 --> 00:31:18,210
through data that we got back from

00:31:14,700 --> 00:31:18,930
switch we now kind of make a another

00:31:18,210 --> 00:31:22,650
class

00:31:18,930 --> 00:31:24,330
to to cover it to cover finding the Mac

00:31:22,650 --> 00:31:26,820
discovering the mac address and then we

00:31:24,330 --> 00:31:30,060
make the correlation together and I mean

00:31:26,820 --> 00:31:32,400
this isn't I mean this is a common thing

00:31:30,060 --> 00:31:34,800
but I think you know people often times

00:31:32,400 --> 00:31:37,050
when they're rushed they they just kind

00:31:34,800 --> 00:31:39,270
of well I have a hash or I have an array

00:31:37,050 --> 00:31:41,790
let me just run a couple you know in

00:31:39,270 --> 00:31:44,490
numerous on it and I'll get it back and

00:31:41,790 --> 00:31:48,900
we'll just you know use that the data is

00:31:44,490 --> 00:31:52,140
in the raw so the additional benefit is

00:31:48,900 --> 00:31:55,410
that we could use these objects in other

00:31:52,140 --> 00:31:58,320
places as necessary and testing became

00:31:55,410 --> 00:32:01,280
easier with this approach and because we

00:31:58,320 --> 00:32:03,570
kind of knew what types of objects that

00:32:01,280 --> 00:32:07,070
we could return we didn't really care

00:32:03,570 --> 00:32:09,960
about the implementation of them so the

00:32:07,070 --> 00:32:11,340
this approach was ultra beneficial as we

00:32:09,960 --> 00:32:13,710
were going through testing if something

00:32:11,340 --> 00:32:15,780
failed we would know exactly where it

00:32:13,710 --> 00:32:17,880
failed and we could also then log into

00:32:15,780 --> 00:32:20,550
the rails console and and kind of go

00:32:17,880 --> 00:32:22,350
step by step without having to refer

00:32:20,550 --> 00:32:24,420
back to the source and say okay well if

00:32:22,350 --> 00:32:28,590
I have this I need to loop through this

00:32:24,420 --> 00:32:30,450
and then pull the first one out etc so

00:32:28,590 --> 00:32:32,550
we increase the surface area of the

00:32:30,450 --> 00:32:35,840
application to allow for more people to

00:32:32,550 --> 00:32:38,790
work in parallel to each other and

00:32:35,840 --> 00:32:41,190
increased duplication was likely and we

00:32:38,790 --> 00:32:42,780
understood that but the due to the time

00:32:41,190 --> 00:32:45,660
constraints in our lack of understanding

00:32:42,780 --> 00:32:49,520
the domain we really couldn't have put

00:32:45,660 --> 00:32:49,520
together something as a cohesive

00:32:55,830 --> 00:33:00,820
so I've showed you three examples of

00:32:58,920 --> 00:33:03,430
trade-offs that we've made while

00:33:00,820 --> 00:33:05,230
developing fire kick and we've evaluated

00:33:03,430 --> 00:33:07,990
our sisters situation in each instance

00:33:05,230 --> 00:33:09,730
and came to different conclusions but

00:33:07,990 --> 00:33:12,760
the important thing is that we study the

00:33:09,730 --> 00:33:14,680
context before we did and so be aware of

00:33:12,760 --> 00:33:16,380
the trade-offs that you make what are

00:33:14,680 --> 00:33:18,310
you giving up what are you getting

00:33:16,380 --> 00:33:20,070
because it's going to be different in

00:33:18,310 --> 00:33:22,000
virtually every circumstance and

00:33:20,070 --> 00:33:24,040
sometimes you want to take a general

00:33:22,000 --> 00:33:33,760
approach oftentimes you want to take a

00:33:24,040 --> 00:33:34,990
more approach to the problem so by

00:33:33,760 --> 00:33:37,180
establishing ubiquitous language

00:33:34,990 --> 00:33:39,850
remaining flexible and increasing our

00:33:37,180 --> 00:33:41,790
surface area when it made sense to we

00:33:39,850 --> 00:33:45,400
were able to automate a complex process

00:33:41,790 --> 00:33:48,270
what took days now takes minutes the

00:33:45,400 --> 00:33:51,190
extra time the rackers we support have

00:33:48,270 --> 00:33:53,560
can be spent building new products and

00:33:51,190 --> 00:33:55,300
ensuring that our awesome customers have

00:33:53,560 --> 00:33:58,150
all the tools they need to achieve their

00:33:55,300 --> 00:34:05,790
goals this hopefully will include all of

00:33:58,150 --> 00:34:05,790
you someday if not already thank you

00:34:20,560 --> 00:34:22,590

YouTube URL: https://www.youtube.com/watch?v=GbVaepN5F5w


