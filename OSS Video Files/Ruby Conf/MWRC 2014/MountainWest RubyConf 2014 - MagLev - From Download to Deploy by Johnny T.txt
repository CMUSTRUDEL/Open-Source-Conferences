Title: MountainWest RubyConf 2014 - MagLev - From Download to Deploy by Johnny T
Publication date: 2020-01-24
Playlist: MWRC 2014
Description: 
	MagLev is a Ruby implementation built on top of a mature VM which offers native object persistence. Working with these live objects is awesome - but this image-based development is very different than traditional file-based development. MagLev uses both which has broad reaching effects - from design to deployment.
In traditional applications, data and code are separate. Deployments involve pulling new code, updating or migrating the data-store, and restarting or reloading the application which creates a new runtime with this new code.
MagLev's transient objects behave in this same manner, but committed objects are always there. Migrating these live, persistent objects is quite different. Your 'data' migrations involve things like instance variables, method definitions and class hierarchies, rather than creating tables or updating column definitions.
In this talk we will walk through a number of examples including a simple job and worker which use persisted blocks, and how to deploy an application and migrate persisted objects.

Help us caption & translate this video!

http://amara.org/v/FG2K/
Captions: 
	00:00:25,190 --> 00:00:32,550
start the timer all right hello everyone

00:00:29,520 --> 00:00:35,220
I'm Johnny T uh yeah we're going to chat

00:00:32,550 --> 00:00:41,309
about maglev I love all of the small

00:00:35,220 --> 00:00:43,710
talk that we've been hearing so there we

00:00:41,309 --> 00:00:44,940
go ray the hands who has just introduced

00:00:43,710 --> 00:00:47,809
to small talk we already kind of saw

00:00:44,940 --> 00:00:52,379
this there's a whole bunch of people so

00:00:47,809 --> 00:00:54,120
i'm going to guess that a bunch of

00:00:52,379 --> 00:00:59,010
people are kind of having some of these

00:00:54,120 --> 00:01:02,760
thoughts going through their mind it's

00:00:59,010 --> 00:01:05,190
it is it's a lot to take in it's a very

00:01:02,760 --> 00:01:07,940
different paradigm a lot of the stuff is

00:01:05,190 --> 00:01:10,649
a lot easier in the some senses but

00:01:07,940 --> 00:01:20,930
harder for us to pick up as developers I

00:01:10,649 --> 00:01:24,270
think um so my job really i see is done

00:01:20,930 --> 00:01:26,430
no we'll just did it for me he preached

00:01:24,270 --> 00:01:29,360
the good word of small talk and there

00:01:26,430 --> 00:01:32,520
were many people here that received it

00:01:29,360 --> 00:01:35,729
so thank you know very much for that

00:01:32,520 --> 00:01:39,750
that's an awesome intro so here I am I'm

00:01:35,729 --> 00:01:42,840
Johnny T I work here locally for rakuten

00:01:39,750 --> 00:01:45,840
marketing started there about six months

00:01:42,840 --> 00:01:47,970
ago I love it we do a bunch of Ruby we

00:01:45,840 --> 00:01:51,000
actually converted we're converting some

00:01:47,970 --> 00:01:52,890
of our core stuff in to go and doing a

00:01:51,000 --> 00:01:55,409
bunch with JavaScript so we're hiring

00:01:52,890 --> 00:01:58,229
we're one of the sponsors I've got some

00:01:55,409 --> 00:01:59,850
free stuff to kind of give out depending

00:01:58,229 --> 00:02:05,390
so that's me that's that's where I work

00:01:59,850 --> 00:02:09,840
here locally so let's start out what is

00:02:05,390 --> 00:02:13,160
maglev so it is an implementation of

00:02:09,840 --> 00:02:17,959
Ruby that runs on top of the gemstone s

00:02:13,160 --> 00:02:21,299
vm okay so in order to kind of get that

00:02:17,959 --> 00:02:27,900
let's go back into the history of ruby

00:02:21,299 --> 00:02:33,690
so 1996 is when ruby was created so this

00:02:27,900 --> 00:02:34,350
guy Matz Matz loves languages key so I

00:02:33,690 --> 00:02:37,260
mean really

00:02:34,350 --> 00:02:43,350
in the beginning of ruby math was and

00:02:37,260 --> 00:02:46,320
math was and is good and he wanted his

00:02:43,350 --> 00:02:47,820
big his big purpose or them he wanted to

00:02:46,320 --> 00:02:51,240
create a scripting he wanted to create a

00:02:47,820 --> 00:02:52,890
language that was fun really fun to use

00:02:51,240 --> 00:02:57,150
and brought enjoyment time into

00:02:52,890 --> 00:03:01,560
developers I've got to say he succeeded

00:02:57,150 --> 00:03:04,050
hugely I know when I found Ruby out on a

00:03:01,560 --> 00:03:06,000
date years to eight some years ago it's

00:03:04,050 --> 00:03:08,610
I would I started out just doing it on

00:03:06,000 --> 00:03:10,470
the side and it made me happier as a

00:03:08,610 --> 00:03:12,990
person I mean it it improved my

00:03:10,470 --> 00:03:16,050
development like but it's it is it it

00:03:12,990 --> 00:03:17,910
made me happy so i want to i mean i want

00:03:16,050 --> 00:03:20,070
to i mean here in the video if Matt's

00:03:17,910 --> 00:03:21,990
ever sees this thank you Matt I mean I

00:03:20,070 --> 00:03:24,330
think how about everyone here on the

00:03:21,990 --> 00:03:26,820
count of three let's give mats a big

00:03:24,330 --> 00:03:31,250
round of applause for and that's why

00:03:26,820 --> 00:03:31,250
we're here so Matt's thank you very much

00:03:35,490 --> 00:03:42,940
alright so when Matt's went to create

00:03:39,670 --> 00:03:46,930
group so he'd explored the world of

00:03:42,940 --> 00:03:49,270
languages by the way there I've got a

00:03:46,930 --> 00:03:52,180
few of these selfies here I want a man I

00:03:49,270 --> 00:03:55,060
am as cheesy as can be like if I I see

00:03:52,180 --> 00:03:56,920
some onion software geeks that I'll go

00:03:55,060 --> 00:03:59,739
up and get a picture with him many times

00:03:56,920 --> 00:04:01,120
so you'll see these throughout so here's

00:03:59,739 --> 00:04:04,270
about 10 years before you so here's

00:04:01,120 --> 00:04:05,350
matt's so he was in he was exploring

00:04:04,270 --> 00:04:09,100
he's playing around with all these

00:04:05,350 --> 00:04:12,850
different languages so let's jump back

00:04:09,100 --> 00:04:16,239
so 18 years before Ruby so this is in

00:04:12,850 --> 00:04:19,450
1978 this article is byte magazine came

00:04:16,239 --> 00:04:22,210
out and it's actually it's kind of fun

00:04:19,450 --> 00:04:24,100
to let's look at the sketch so obviously

00:04:22,210 --> 00:04:26,350
this is when Pascal was coming out the

00:04:24,100 --> 00:04:30,280
sketch of the cover shows some kind of

00:04:26,350 --> 00:04:32,080
cool stuff so we've got the fortran

00:04:30,280 --> 00:04:34,930
ocean is which I everyone's kind of

00:04:32,080 --> 00:04:36,280
floating in um you've got the basic see

00:04:34,930 --> 00:04:37,720
down here you think on these little

00:04:36,280 --> 00:04:42,190
boats kind of trying to come out of the

00:04:37,720 --> 00:04:44,320
weeds the Straits of Kobol I kind of

00:04:42,190 --> 00:04:47,470
very dangerous but a lot of commercial

00:04:44,320 --> 00:04:50,020
traffic going through there the Lisp

00:04:47,470 --> 00:04:54,640
jungle this is a great one so it is the

00:04:50,020 --> 00:04:56,320
fog on the shore keeps the jungle hidden

00:04:54,640 --> 00:04:58,690
from the sea so as not to say that you

00:04:56,320 --> 00:05:00,010
can't see the jungle but it's rumored

00:04:58,690 --> 00:05:03,580
that of the I mean all these amazing

00:05:00,010 --> 00:05:05,970
algorithms and stuff that we can see but

00:05:03,580 --> 00:05:08,890
in it so there's the list jungle and

00:05:05,970 --> 00:05:12,160
lastly here's the land of small talk so

00:05:08,890 --> 00:05:14,669
it is up on this huge cliff I'm in this

00:05:12,160 --> 00:05:16,990
ivory tower so this was written when

00:05:14,669 --> 00:05:19,419
small talk was still being created in

00:05:16,990 --> 00:05:22,479
the at park so there was still kind of a

00:05:19,419 --> 00:05:23,710
lot of secrecy around it so small talk

00:05:22,479 --> 00:05:28,090
was just kind of this wow there's this

00:05:23,710 --> 00:05:32,350
magical thing going on then jump a few

00:05:28,090 --> 00:05:34,660
years later so 1981 is when this

00:05:32,350 --> 00:05:38,169
magazine came out if any wants to come

00:05:34,660 --> 00:05:41,440
check it out this thing this thing is

00:05:38,169 --> 00:05:43,690
sweet like I mean you left the ads in

00:05:41,440 --> 00:05:46,770
here are just priceless so you want to

00:05:43,690 --> 00:05:48,550
come check that out come see it so 1981

00:05:46,770 --> 00:05:51,000
this article about

00:05:48,550 --> 00:05:54,100
out and it had a number of articles

00:05:51,000 --> 00:05:56,770
about small talk one of the big ones was

00:05:54,100 --> 00:06:02,410
the design principles behind small talk

00:05:56,770 --> 00:06:06,760
by dan ingles and so this statement is I

00:06:02,410 --> 00:06:12,250
think one of the hardest things for us

00:06:06,760 --> 00:06:13,990
as developers to kind of get and I mean

00:06:12,250 --> 00:06:17,170
really take to heart when going into

00:06:13,990 --> 00:06:19,060
small talk so Dan said to be truly

00:06:17,170 --> 00:06:22,060
object-oriented the system must provide

00:06:19,060 --> 00:06:25,480
automatic storage management and this is

00:06:22,060 --> 00:06:30,820
my so for both data and code so again

00:06:25,480 --> 00:06:37,660
Dan ingles byte magazine 1981 and I've

00:06:30,820 --> 00:06:40,600
got also some time so I've got these two

00:06:37,660 --> 00:06:43,320
cool boards so there's the magazine

00:06:40,600 --> 00:06:48,640
here's one of that so here's the GUI

00:06:43,320 --> 00:06:51,160
that they had back in the 70s any so

00:06:48,640 --> 00:06:58,350
I've got those two actually signed by

00:06:51,160 --> 00:07:00,910
dan ingles and so I odd note so this guy

00:06:58,350 --> 00:07:02,680
Alan Kay this guy so he's who created

00:07:00,910 --> 00:07:05,530
small talk one thing I'd know who and

00:07:02,680 --> 00:07:06,970
here's a you grab local actually wow

00:07:05,530 --> 00:07:09,490
that's that's actually kind of cool

00:07:06,970 --> 00:07:12,040
Dutton so University of Utah local

00:07:09,490 --> 00:07:15,940
school I went there Alan Kay is a

00:07:12,040 --> 00:07:18,460
graduate as well as another one another

00:07:15,940 --> 00:07:20,680
guy named the law bracha that has

00:07:18,460 --> 00:07:22,930
actually a lot to do with Java um any so

00:07:20,680 --> 00:07:26,290
this is alan kay this is hint with

00:07:22,930 --> 00:07:30,540
holding up the dynabook which is what he

00:07:26,290 --> 00:07:33,010
created he can he sought of this in 1968

00:07:30,540 --> 00:07:35,710
basically he saw I mean so this is

00:07:33,010 --> 00:07:37,510
pretty small talk this is he saw Moore's

00:07:35,710 --> 00:07:41,350
law was coming through he knew that

00:07:37,510 --> 00:07:42,880
within a few decades we would have these

00:07:41,350 --> 00:07:44,950
and not only would we have these but

00:07:42,880 --> 00:07:46,960
little kids everywhere he knew would

00:07:44,950 --> 00:07:49,360
have these he so this is made out of

00:07:46,960 --> 00:07:51,310
cardboard he filled it up with lead

00:07:49,360 --> 00:07:52,690
pellets to figure out how heavy was

00:07:51,310 --> 00:07:55,750
going to be but he knew it was going to

00:07:52,690 --> 00:07:56,830
be touchscreen wireless and the big

00:07:55,750 --> 00:08:02,020
things that kids were going to have

00:07:56,830 --> 00:08:05,600
these um and so here I am

00:08:02,020 --> 00:08:08,630
ready to go meet my hair so this picture

00:08:05,600 --> 00:08:10,190
was actually where's Brad there is Brad

00:08:08,630 --> 00:08:12,710
took this picture for me so he was up

00:08:10,190 --> 00:08:15,290
alan kay gave a keynote up at the you a

00:08:12,710 --> 00:08:19,130
couple years ago so i am just on my way

00:08:15,290 --> 00:08:21,560
to go meet Alan Kay so here I am meeting

00:08:19,130 --> 00:08:23,960
Alan Kay here at ms over there's these

00:08:21,560 --> 00:08:28,450
posters out on the table have them sign

00:08:23,960 --> 00:08:30,770
them good times happy happy time so

00:08:28,450 --> 00:08:34,039
let's get back to maglev so there's kind

00:08:30,770 --> 00:08:37,330
of some backstory I so let's actually

00:08:34,039 --> 00:08:40,280
get back to Ruby so let's go through a

00:08:37,330 --> 00:08:42,020
basic Ruby process so if you're running

00:08:40,280 --> 00:08:43,940
this from the command line this is

00:08:42,020 --> 00:08:47,020
something that I never did much but God

00:08:43,940 --> 00:08:49,070
know if people know so the dash e is

00:08:47,020 --> 00:08:51,860
evaluate and so you can just give it a

00:08:49,070 --> 00:08:57,160
string that it's the Ruby interpreters

00:08:51,860 --> 00:09:01,940
Justin fire up run that and so with MRI

00:08:57,160 --> 00:09:04,850
you run Ruby and it fires up the I mean

00:09:01,940 --> 00:09:06,800
it fires up MRI which has Ruby core

00:09:04,850 --> 00:09:09,410
already loaded in I'm into the compiled

00:09:06,800 --> 00:09:12,890
C code it's it's the basic I mean it's

00:09:09,410 --> 00:09:15,470
the MRI that we all that we all love but

00:09:12,890 --> 00:09:20,980
so it just fires that up takes the

00:09:15,470 --> 00:09:24,740
string and an outputs Ruby pretty basic

00:09:20,980 --> 00:09:30,410
so Ruby's awesome we all know that we're

00:09:24,740 --> 00:09:33,320
here but by the at this time so in 2003

00:09:30,410 --> 00:09:34,730
so seven years after Ruby it still needs

00:09:33,320 --> 00:09:36,080
to be spread it still needs to be

00:09:34,730 --> 00:09:38,870
preached to the masses it's still pretty

00:09:36,080 --> 00:09:40,820
small there's not a huge specially over

00:09:38,870 --> 00:09:45,110
here in the US there's not a huge

00:09:40,820 --> 00:09:50,150
following so we have a profit that

00:09:45,110 --> 00:09:52,760
emerged dhh he uh he came around to

00:09:50,150 --> 00:09:55,760
spread the good word of Ruby to the

00:09:52,760 --> 00:09:58,190
world and so he created rails and it

00:09:55,760 --> 00:10:01,430
actually did a very good job he started

00:09:58,190 --> 00:10:06,440
I mean got a spotlight on Ruby um so

00:10:01,430 --> 00:10:10,940
Thank You dhh Ruby's awesome and the

00:10:06,440 --> 00:10:14,230
land of Java needs some awesome so 12

00:10:10,940 --> 00:10:16,840
years after Ruby was created

00:10:14,230 --> 00:10:18,490
we've got this guy Charles Nutter is

00:10:16,840 --> 00:10:22,060
another prophet so he came out of the

00:10:18,490 --> 00:10:27,420
land of Java he along with some other I

00:10:22,060 --> 00:10:29,980
mean a team but they created jruby so

00:10:27,420 --> 00:10:33,940
quick little backstory some history on

00:10:29,980 --> 00:10:35,980
Java so this is actually really so Java

00:10:33,940 --> 00:10:39,880
and Ruby are the same age version 1

00:10:35,980 --> 00:10:45,490
today both of them were born in 1996 so

00:10:39,880 --> 00:10:48,940
here we have jdk v1 0 1996 and then a

00:10:45,490 --> 00:10:54,220
big thing so Java have some big

00:10:48,940 --> 00:10:55,870
companies behind it which was a huge

00:10:54,220 --> 00:10:58,720
benefit I mean it there are some really

00:10:55,870 --> 00:11:02,800
smart people that have put a lot of time

00:10:58,720 --> 00:11:04,810
into the JVM I'm the JVM has a lot of

00:11:02,800 --> 00:11:06,880
advanced stuff plus I mean you can do

00:11:04,810 --> 00:11:10,680
it's got packages and enterprise

00:11:06,880 --> 00:11:15,430
libraries for anything under the Sun so

00:11:10,680 --> 00:11:17,730
why would you want to use Java um and

00:11:15,430 --> 00:11:19,590
actually there's there is a fantastic

00:11:17,730 --> 00:11:24,580
reason that you'd want to use Java

00:11:19,590 --> 00:11:26,710
threading Java threads are I mean they

00:11:24,580 --> 00:11:28,390
work I mean that they are when you're

00:11:26,710 --> 00:11:31,210
using Ruby Java threads are the way to

00:11:28,390 --> 00:11:33,790
go all the other Ruby's which will kind

00:11:31,210 --> 00:11:35,530
of get an including maglev use I mean

00:11:33,790 --> 00:11:37,750
have some type of well I shouldn't say

00:11:35,530 --> 00:11:40,000
all the rubies most of the other rubies

00:11:37,750 --> 00:11:42,370
have some type of green thread and you

00:11:40,000 --> 00:11:45,010
have some type of lock but with Java

00:11:42,370 --> 00:11:46,990
you're able to utilize I'm one of the

00:11:45,010 --> 00:11:48,670
big reasons you're able to utilize on a

00:11:46,990 --> 00:11:52,440
multi-core machine you can have one

00:11:48,670 --> 00:11:54,970
process that's utilizing multiple cores

00:11:52,440 --> 00:11:58,870
so let's walk through the same little

00:11:54,970 --> 00:12:03,100
process how this program would run on

00:11:58,870 --> 00:12:06,490
JRuby so same thing so the rvm use JRuby

00:12:03,100 --> 00:12:08,410
so run the same command and actually

00:12:06,490 --> 00:12:11,260
train it's actually kind of wrap around

00:12:08,410 --> 00:12:17,860
it runs java so it's though it fires up

00:12:11,260 --> 00:12:22,810
a JVM at which point it loads in it

00:12:17,860 --> 00:12:25,480
loads in Ruby core in as so a jar file

00:12:22,810 --> 00:12:27,640
so has compiled java bytecode so it

00:12:25,480 --> 00:12:30,250
loads up it fires up a JVM

00:12:27,640 --> 00:12:35,440
and then loads in all compiled Ruby at

00:12:30,250 --> 00:12:37,600
which point then I mean so that that

00:12:35,440 --> 00:12:39,970
virtual mom in that process then at that

00:12:37,600 --> 00:12:45,370
point is a ruby can take the string and

00:12:39,970 --> 00:12:50,080
outputs Java so Ruby's awesome we love

00:12:45,370 --> 00:12:53,200
it um let's go back to our roots so also

00:12:50,080 --> 00:12:56,800
in the same year so duh 12 years a are

00:12:53,200 --> 00:13:01,680
after Ruby another prophet emerges this

00:12:56,800 --> 00:13:04,990
guy his name's avi Bryant he came to us

00:13:01,680 --> 00:13:14,470
from the ivory tower he came down from

00:13:04,990 --> 00:13:20,530
small talk saw Ruby there we go um saw

00:13:14,470 --> 00:13:23,110
Ruby and went to these guys so this is

00:13:20,530 --> 00:13:24,550
gemstone this is the company so they're

00:13:23,110 --> 00:13:27,100
actually called gem talk now but this is

00:13:24,550 --> 00:13:34,180
the company behind gemstone s went to

00:13:27,100 --> 00:13:36,700
these guys and told them that man Ruby

00:13:34,180 --> 00:13:38,980
and Ruby's object model is very similar

00:13:36,700 --> 00:13:40,930
to small talk and you guys could really

00:13:38,980 --> 00:13:48,820
get you guys could get Ruby running on

00:13:40,930 --> 00:13:51,250
top of your vm so let's go jumping into

00:13:48,820 --> 00:13:54,730
a little bit of history of just kind of

00:13:51,250 --> 00:13:58,470
some of how gemstone works so

00:13:54,730 --> 00:14:00,430
introducing a term so the stone in

00:13:58,470 --> 00:14:03,220
maglev so it's also injunctive but the

00:14:00,430 --> 00:14:05,500
stone is a big thing the stone is so

00:14:03,220 --> 00:14:07,120
like no was just talked to remember the

00:14:05,500 --> 00:14:10,660
image that Noah was talking about that

00:14:07,120 --> 00:14:13,300
just houses everything the stone is your

00:14:10,660 --> 00:14:14,710
image but gemstone went about its

00:14:13,300 --> 00:14:17,380
actually it's kind of it's like it's

00:14:14,710 --> 00:14:19,450
kind of like a server-side small talk in

00:14:17,380 --> 00:14:23,520
a sense but so the stone house is your

00:14:19,450 --> 00:14:27,280
code in your data so the first version I

00:14:23,520 --> 00:14:30,970
think oh I think we thought so 10 years

00:14:27,280 --> 00:14:35,260
before Ruby so 1986 is when gemstone

00:14:30,970 --> 00:14:38,160
version 1 came out so in the decade that

00:14:35,260 --> 00:14:40,510
they have before java or ruby was born

00:14:38,160 --> 00:14:41,440
they were working with so this is one of

00:14:40,510 --> 00:14:45,820
their big clients

00:14:41,440 --> 00:14:48,220
oocl um so they've got one I mean that

00:14:45,820 --> 00:14:50,580
they have so all of this I mean 1.5

00:14:48,220 --> 00:14:54,100
billion data objects a bunch of people

00:14:50,580 --> 00:14:55,690
across the globe that are all working on

00:14:54,100 --> 00:14:57,370
the same I mean you can think of it as

00:14:55,690 --> 00:15:02,380
the same image they're all working on

00:14:57,370 --> 00:15:05,110
the same stone across the globe so that

00:15:02,380 --> 00:15:07,360
was a big company that they so they were

00:15:05,110 --> 00:15:10,810
able to take a lot of the improvements

00:15:07,360 --> 00:15:15,070
and working with these clients an atom

00:15:10,810 --> 00:15:16,870
to the atom to the stone so here is

00:15:15,070 --> 00:15:19,420
another one here's another one of their

00:15:16,870 --> 00:15:21,370
clients this is the big one so for that

00:15:19,420 --> 00:15:24,670
decade they were also working with JP

00:15:21,370 --> 00:15:26,140
Morgan so this is this represents I'm

00:15:24,670 --> 00:15:29,320
sorry that's the contrast really bad

00:15:26,140 --> 00:15:32,470
Ryan you're very good they had a huge

00:15:29,320 --> 00:15:37,530
stone this so JP Morgan used it to do

00:15:32,470 --> 00:15:39,850
their automated trading so gemstone was

00:15:37,530 --> 00:15:42,700
built and I mean worked with these

00:15:39,850 --> 00:15:45,490
clients to be able to house so it can

00:15:42,700 --> 00:15:51,190
house a lot of data and operate on it

00:15:45,490 --> 00:15:54,160
really fast so after working with gem

00:15:51,190 --> 00:15:59,500
store JP Morgan they're able to add more

00:15:54,160 --> 00:16:02,680
stuff to the stone okay this is a basic

00:15:59,500 --> 00:16:05,890
install so when you go and do a rvm

00:16:02,680 --> 00:16:08,610
install maglev it's going to do a few

00:16:05,890 --> 00:16:11,560
things so first it's going to download

00:16:08,610 --> 00:16:14,170
the gem stone the stone to your machine

00:16:11,560 --> 00:16:15,670
and this like nola says these stones are

00:16:14,170 --> 00:16:18,550
pretty cool because the objects in there

00:16:15,670 --> 00:16:20,080
are like some of them he's like some of

00:16:18,550 --> 00:16:22,330
them are probably 30 years old like

00:16:20,080 --> 00:16:24,070
they've just been there like I mean the

00:16:22,330 --> 00:16:26,650
original some of the original authors of

00:16:24,070 --> 00:16:29,020
small talk I mean still have code and in

00:16:26,650 --> 00:16:33,610
these images but so you download the

00:16:29,020 --> 00:16:35,589
stone then you'll see it's called so

00:16:33,610 --> 00:16:38,980
filing in Ruby so after you've got the

00:16:35,589 --> 00:16:42,070
stone on your computer all of all of

00:16:38,980 --> 00:16:43,960
basically maglev is just in source files

00:16:42,070 --> 00:16:47,050
some of them small talk some of them

00:16:43,960 --> 00:16:50,490
Ruby so once you download maglev it

00:16:47,050 --> 00:16:53,560
takes the stone and it files in ruby

00:16:50,490 --> 00:16:55,779
files ruby core into the stone so at

00:16:53,560 --> 00:16:58,870
which point we've got this

00:16:55,779 --> 00:17:02,230
now maglev this is basically what mag

00:16:58,870 --> 00:17:05,799
levers you've got the gems the core

00:17:02,230 --> 00:17:08,169
gemstone that I mean that has been then

00:17:05,799 --> 00:17:11,439
built for 30 years but now you've got

00:17:08,169 --> 00:17:15,669
Ruby that is embedded the Ruby is part

00:17:11,439 --> 00:17:19,439
of that stone so another little tangent

00:17:15,669 --> 00:17:21,250
let's talk about data stores so a

00:17:19,439 --> 00:17:23,559
traditional data store i mean i think

00:17:21,250 --> 00:17:25,990
myseif would work here but let's go

00:17:23,559 --> 00:17:27,039
through postgres and talk about some of

00:17:25,990 --> 00:17:30,789
the things that you need to do when

00:17:27,039 --> 00:17:32,020
working with it so first when you're

00:17:30,789 --> 00:17:35,409
going to use it on the server you need

00:17:32,020 --> 00:17:37,929
to install it you need to set up some

00:17:35,409 --> 00:17:40,659
type of credentials often especially for

00:17:37,929 --> 00:17:42,700
like development genes the credentials

00:17:40,659 --> 00:17:45,280
are you don't even think about it's just

00:17:42,700 --> 00:17:46,809
some default password but you set up

00:17:45,280 --> 00:17:49,090
some credentials and then you have to

00:17:46,809 --> 00:17:50,679
start a daemon you have to start

00:17:49,090 --> 00:17:53,710
something that starts the database

00:17:50,679 --> 00:17:56,770
running then a client comes along and

00:17:53,710 --> 00:17:58,169
wants to start working with some data so

00:17:56,770 --> 00:18:06,640
they have to go and they have to login

00:17:58,169 --> 00:18:10,080
to the database after they log in they

00:18:06,640 --> 00:18:12,280
get connection back and they're good so

00:18:10,080 --> 00:18:15,340
after they log in you can see so a

00:18:12,280 --> 00:18:18,520
client again now goes to login once

00:18:15,340 --> 00:18:21,789
they've got their connection back then

00:18:18,520 --> 00:18:24,669
they're able to execute I mean what I'd

00:18:21,789 --> 00:18:25,899
like to execute sequel I mean postgres

00:18:24,669 --> 00:18:28,809
is great because you can execute all

00:18:25,899 --> 00:18:31,110
sorts of languages but you have some

00:18:28,809 --> 00:18:36,220
language some that you're using to

00:18:31,110 --> 00:18:40,000
manipulate the data stored so now let's

00:18:36,220 --> 00:18:43,179
go to maglev so maglev again is an

00:18:40,000 --> 00:18:45,789
interest is a combination of a ruby that

00:18:43,179 --> 00:18:48,580
we're used to that does stuff but it

00:18:45,789 --> 00:18:53,289
also has the stone that just stores and

00:18:48,580 --> 00:18:56,429
so in order to run any maglev process

00:18:53,289 --> 00:18:58,960
you first have to have a stone running

00:18:56,429 --> 00:19:00,190
similar to how I mean before you access

00:18:58,960 --> 00:19:03,580
postgres you actually have to have a

00:19:00,190 --> 00:19:09,010
daemon running and so you have the stone

00:19:03,580 --> 00:19:10,320
running and then a client uh so you spin

00:19:09,010 --> 00:19:13,660
up a client

00:19:10,320 --> 00:19:15,790
first thing it does is similar like it

00:19:13,660 --> 00:19:21,240
goes to and it's going to go log in to

00:19:15,790 --> 00:19:23,560
the stone now what's different is it

00:19:21,240 --> 00:19:26,110
rather than just getting a connection

00:19:23,560 --> 00:19:28,180
back so one of the big things that

00:19:26,110 --> 00:19:31,540
gemstone does I mean I didn't mention in

00:19:28,180 --> 00:19:33,040
the install but it will when it when

00:19:31,540 --> 00:19:36,790
it's installing it actually tweaks your

00:19:33,040 --> 00:19:39,250
kernels shared memory settings so it it

00:19:36,790 --> 00:19:42,580
makes very good use of shared memory and

00:19:39,250 --> 00:19:44,650
so this is kind of an a this kind of

00:19:42,580 --> 00:19:48,400
shows that that when a client logs in it

00:19:44,650 --> 00:19:50,620
just it attaches to the stone and so all

00:19:48,400 --> 00:19:53,350
of the stuff that is in the stone is

00:19:50,620 --> 00:19:57,310
just immediately available like it

00:19:53,350 --> 00:19:59,920
doesn't it doesn't load code in that's

00:19:57,310 --> 00:20:02,500
the the shared page cache and the stone

00:19:59,920 --> 00:20:05,200
there's a lot of stuff going on behind

00:20:02,500 --> 00:20:08,440
the scenes to give your processes that

00:20:05,200 --> 00:20:10,090
power but you have a you have a process

00:20:08,440 --> 00:20:13,900
that just connects and then it has

00:20:10,090 --> 00:20:17,620
everything loaded so same thing Ruby

00:20:13,900 --> 00:20:20,650
engine similar to java we're going to go

00:20:17,620 --> 00:20:21,970
through it actually fires a topaz is the

00:20:20,650 --> 00:20:26,650
system command that it's going to run

00:20:21,970 --> 00:20:28,990
but that is going to start a client that

00:20:26,650 --> 00:20:33,370
again logs into the stone at which point

00:20:28,990 --> 00:20:37,330
it can run ruby version or run the ruby

00:20:33,370 --> 00:20:39,580
engine and outputs maglev so that's it

00:20:37,330 --> 00:20:43,380
kind of a high-level overview of so

00:20:39,580 --> 00:20:47,260
three different Ruby implementations MRI

00:20:43,380 --> 00:20:48,820
JRuby and maglev and how they I mean how

00:20:47,260 --> 00:20:53,740
they'd work with I'm kind of just that

00:20:48,820 --> 00:20:57,910
basic little statement all right so this

00:20:53,740 --> 00:21:01,420
is a big problem object-relational

00:20:57,910 --> 00:21:05,800
impedance mismatch and I mean it's

00:21:01,420 --> 00:21:08,650
really it's the stuff doesn't fit this

00:21:05,800 --> 00:21:13,950
is a big problem I wouldn't necessarily

00:21:08,650 --> 00:21:17,080
a problem but we as developers have

00:21:13,950 --> 00:21:20,230
relational data stores and grained in

00:21:17,080 --> 00:21:23,200
the way that we think like and it is it

00:21:20,230 --> 00:21:26,620
is amazing how difficult it is

00:21:23,200 --> 00:21:28,659
to get away from that but we often don't

00:21:26,620 --> 00:21:31,720
really get away from it because we're

00:21:28,659 --> 00:21:36,700
always we're always mapping data to some

00:21:31,720 --> 00:21:43,630
data store so now I'm going to go

00:21:36,700 --> 00:21:46,000
through a couple of basic examples and

00:21:43,630 --> 00:21:47,919
we'll see we'll see where we've got with

00:21:46,000 --> 00:21:49,690
time but so hopefully these will go and

00:21:47,919 --> 00:21:52,750
show some of the stuff that you can do

00:21:49,690 --> 00:21:57,880
with maglev so start out with some magic

00:21:52,750 --> 00:22:01,960
the hat trick so this is what avi Bryant

00:21:57,880 --> 00:22:04,090
showed at railsconf in 2008 when they

00:22:01,960 --> 00:22:05,950
were just I mean pre-alpha on Matt like

00:22:04,090 --> 00:22:07,720
this they I mean they did everything

00:22:05,950 --> 00:22:10,480
they could to get this little demo

00:22:07,720 --> 00:22:14,860
working but so this is the demo that he

00:22:10,480 --> 00:22:18,909
did railsconf so we've got a hat so

00:22:14,860 --> 00:22:21,130
here's our hat class um pretty basic I

00:22:18,909 --> 00:22:25,210
mean so we've just got we've got some

00:22:21,130 --> 00:22:26,590
contents here's our rabbit which is it's

00:22:25,210 --> 00:22:30,820
great just um units and ask you

00:22:26,590 --> 00:22:31,929
representation of a rabbit ah one thing

00:22:30,820 --> 00:22:34,929
that I mean so we're going to get into

00:22:31,929 --> 00:22:38,139
looking at some code I ran into this

00:22:34,929 --> 00:22:40,929
when I was getting into maglev abort is

00:22:38,139 --> 00:22:43,510
not a bad guy so all of the code that

00:22:40,929 --> 00:22:45,039
you're running within maglev the fact

00:22:43,510 --> 00:22:47,019
that it is kind of a data store all of

00:22:45,039 --> 00:22:51,610
your code is always running within a

00:22:47,019 --> 00:22:55,600
transaction um and so in order to get a

00:22:51,610 --> 00:22:59,289
fresh view of the stone you have to

00:22:55,600 --> 00:23:01,090
abort which I mean that's I mean a good

00:22:59,289 --> 00:23:03,309
way to think of it as an abort is just a

00:23:01,090 --> 00:23:04,750
refresh so i just want like cuz i

00:23:03,309 --> 00:23:06,970
remember going through my first example

00:23:04,750 --> 00:23:09,220
something i don't want to make my code

00:23:06,970 --> 00:23:13,380
abort like that's that doesn't seem

00:23:09,220 --> 00:23:16,419
right but so abort is not about di um

00:23:13,380 --> 00:23:19,510
here is sorry about the contrast here is

00:23:16,419 --> 00:23:24,190
so here's the script that is actually

00:23:19,510 --> 00:23:25,690
going to create the hat so when we run

00:23:24,190 --> 00:23:31,779
this from the commits from a command

00:23:25,690 --> 00:23:34,840
line this so this persistent block tells

00:23:31,779 --> 00:23:36,419
a maglev that what you're going to do in

00:23:34,840 --> 00:23:39,239
there you're intending

00:23:36,419 --> 00:23:42,299
to alter your intending to change some

00:23:39,239 --> 00:23:44,039
persistent data in the stone by default

00:23:42,299 --> 00:23:46,440
everything you do is I mean they call

00:23:44,039 --> 00:23:49,200
it's transient it's going to affect it's

00:23:46,440 --> 00:23:51,480
going to work like on any other Ruby in

00:23:49,200 --> 00:23:53,009
that changes you make are I mean you

00:23:51,480 --> 00:23:56,850
make changes in that process when the

00:23:53,009 --> 00:24:00,389
process is gone your changes are gone so

00:23:56,850 --> 00:24:06,210
this is going to load in the the two

00:24:00,389 --> 00:24:09,119
classes and then maglev has a persistent

00:24:06,210 --> 00:24:12,179
route so things are persisted by reach

00:24:09,119 --> 00:24:15,570
ability very similar to how i mean the

00:24:12,179 --> 00:24:17,279
garbage collection works so an easy way

00:24:15,570 --> 00:24:20,369
to persist something in maglevs it has

00:24:17,279 --> 00:24:21,869
this hash that's persistent and so you

00:24:20,369 --> 00:24:24,269
can just you can just put stuff in the

00:24:21,869 --> 00:24:28,859
hash and then commit it and it will be

00:24:24,269 --> 00:24:31,830
available so let's see if this video is

00:24:28,859 --> 00:24:35,119
going to work it looks like a mic so

00:24:31,830 --> 00:24:38,340
this is actually just talking real quick

00:24:35,119 --> 00:24:41,580
these are so two different terminal

00:24:38,340 --> 00:24:42,779
windows up here so that two different

00:24:41,580 --> 00:24:45,090
terminal windows on two different

00:24:42,779 --> 00:24:47,549
machines so here we've got them max

00:24:45,090 --> 00:24:51,629
stone and here we've got I've just got

00:24:47,549 --> 00:24:54,239
mag remote so this will go through and

00:24:51,629 --> 00:24:56,100
show the hat-trick plus include I mean

00:24:54,239 --> 00:24:58,710
it's called a remote stone or remote

00:24:56,100 --> 00:24:59,639
shared page cuts so the cool thing is

00:24:58,710 --> 00:25:03,389
just to know these are on two different

00:24:59,639 --> 00:25:05,570
machines so let's go through and take a

00:25:03,389 --> 00:25:05,570
look

00:25:09,110 --> 00:25:12,870
you

00:25:10,770 --> 00:25:15,540
okay so some of the first stuff that I'm

00:25:12,870 --> 00:25:18,690
going to go through here is checking the

00:25:15,540 --> 00:25:20,640
status so when you start maglev up there

00:25:18,690 --> 00:25:23,400
there are a few different processes that

00:25:20,640 --> 00:25:26,460
get going so here on the stone so

00:25:23,400 --> 00:25:29,700
starting out so stone and the remote

00:25:26,460 --> 00:25:33,180
it's clean tanam nothing's running so

00:25:29,700 --> 00:25:36,720
mag let's start we'll start up the we'll

00:25:33,180 --> 00:25:40,140
see maybe if I can tight this is going

00:25:36,720 --> 00:25:43,320
to start up the stone as well as a

00:25:40,140 --> 00:25:45,110
shared page cache so there you go you've

00:25:43,320 --> 00:25:47,790
got your stone and shared page cache and

00:25:45,110 --> 00:25:52,200
so now this is going to start a process

00:25:47,790 --> 00:25:56,600
called net ldi which is the network long

00:25:52,200 --> 00:25:59,520
distance information so that net ldi is

00:25:56,600 --> 00:26:02,780
the process that is used to actually

00:25:59,520 --> 00:26:09,230
perform the communication between nodes

00:26:02,780 --> 00:26:14,130
so now over here on the remote so this

00:26:09,230 --> 00:26:17,040
this machine is not firing up a stone so

00:26:14,130 --> 00:26:23,400
all it does is it it fires up the net

00:26:17,040 --> 00:26:25,560
ldi process and then here we go so this

00:26:23,400 --> 00:26:30,390
is going to sew on the server is going

00:26:25,560 --> 00:26:36,270
to go run the create let's see it will

00:26:30,390 --> 00:26:38,540
run the create hat which so this again

00:26:36,270 --> 00:26:41,760
is going to go through and so that just

00:26:38,540 --> 00:26:45,380
committed the Hat and the rabbit classes

00:26:41,760 --> 00:26:48,990
as well as created the the route so now

00:26:45,380 --> 00:26:51,570
first on the remote is it's just going

00:26:48,990 --> 00:26:54,690
to take a look at what's in the Hat but

00:26:51,570 --> 00:26:56,640
by default this server says hey you i'm

00:26:54,690 --> 00:26:59,670
not you're not running the Maglev damn

00:26:56,640 --> 00:27:01,470
it i don't like I can't do anything so

00:26:59,670 --> 00:27:04,620
this is all you need to do for a remote

00:27:01,470 --> 00:27:06,840
stone and also one thing watch the time

00:27:04,620 --> 00:27:09,480
it takes to run this command the first

00:27:06,840 --> 00:27:12,810
time versus I'm going to run it again

00:27:09,480 --> 00:27:14,130
just a sec there we go so the Hat

00:27:12,810 --> 00:27:16,880
doesn't have anything in it but now we

00:27:14,130 --> 00:27:20,870
run it again and it went much quicker so

00:27:16,880 --> 00:27:23,640
one thing that's going on right there is

00:27:20,870 --> 00:27:24,509
so when you've got your remote stone or

00:27:23,640 --> 00:27:28,109
your room your

00:27:24,509 --> 00:27:30,839
mo gem that so the first time it goes to

00:27:28,109 --> 00:27:33,599
just Ruby dash e first time it goes to

00:27:30,839 --> 00:27:35,820
execute anything that process so it's

00:27:33,599 --> 00:27:37,799
going to go log into the stone and then

00:27:35,820 --> 00:27:41,729
as soon as it logs in it's going to

00:27:37,799 --> 00:27:44,489
start they call it faulting in objects

00:27:41,729 --> 00:27:47,339
into the page cache so the page cache

00:27:44,489 --> 00:27:48,959
that's set up on the remote server the

00:27:47,339 --> 00:27:50,789
first time you execute anything is bait

00:27:48,959 --> 00:27:54,089
is like is loading I'm in kind of

00:27:50,789 --> 00:27:57,749
faulting in Ruby core into that local

00:27:54,089 --> 00:28:02,459
page cache so once that's been loaded

00:27:57,749 --> 00:28:04,229
then any other VMS starting on that node

00:28:02,459 --> 00:28:06,239
will i'm going to go much quicker

00:28:04,229 --> 00:28:08,849
because all of the all of those objects

00:28:06,239 --> 00:28:14,429
are already in the shared the shared

00:28:08,849 --> 00:28:20,429
memory um i have only got a couple

00:28:14,429 --> 00:28:26,429
minutes left so okay i'm going to go

00:28:20,429 --> 00:28:29,549
through a quick job queue man i

00:28:26,429 --> 00:28:31,829
apologizing it so it is what it is visit

00:28:29,549 --> 00:28:34,499
uh this is the worker class let's

00:28:31,829 --> 00:28:38,819
actually take a look at the job first so

00:28:34,499 --> 00:28:44,099
we can have a basic job class that just

00:28:38,819 --> 00:28:45,449
is going to store blocks actually while

00:28:44,099 --> 00:28:50,009
we're at let me see if i can get the

00:28:45,449 --> 00:28:52,919
demo going because that will show you a

00:28:50,009 --> 00:28:55,249
little better than the code let's see

00:28:52,919 --> 00:28:55,249
how long

00:29:02,640 --> 00:29:16,440
so I think there we go so there's been

00:29:09,630 --> 00:29:19,740
some so what this will do is a job you

00:29:16,440 --> 00:29:21,660
can just call job ad give it a block and

00:29:19,740 --> 00:29:24,150
what the job does is it just takes that

00:29:21,660 --> 00:29:28,980
block and puts it on and just appends it

00:29:24,150 --> 00:29:33,380
to a queue and then persist the queue so

00:29:28,980 --> 00:29:39,840
what you end up having is that even oh

00:29:33,380 --> 00:29:43,680
there you go so you persist a block and

00:29:39,840 --> 00:29:46,410
then on another remote machine you can

00:29:43,680 --> 00:29:49,440
just pull jobs off that and actually

00:29:46,410 --> 00:29:52,770
just call the block and then I mean your

00:29:49,440 --> 00:29:57,060
butt so you can persist blocks which is

00:29:52,770 --> 00:29:58,850
pretty cool there are only a there are

00:29:57,060 --> 00:30:03,270
only a handful of things that you can't

00:29:58,850 --> 00:30:05,220
persist in maglev I mean the main ones

00:30:03,270 --> 00:30:07,170
that come to mind are can't persist io

00:30:05,220 --> 00:30:10,320
handles like you can't persist a socket

00:30:07,170 --> 00:30:13,950
can't persist a filehandle but you can

00:30:10,320 --> 00:30:18,360
persist virtually anything else it's so

00:30:13,950 --> 00:30:21,510
get you just you're storing your native

00:30:18,360 --> 00:30:24,870
objects so here it's going to add on 10

00:30:21,510 --> 00:30:28,620
jobs I'll accept onion the closing there

00:30:24,870 --> 00:30:31,980
we go and so you can see it's just

00:30:28,620 --> 00:30:35,010
picking up I was picking up jobs I have

00:30:31,980 --> 00:30:37,050
I had all these grand your plans of

00:30:35,010 --> 00:30:40,260
having these cool examples and didn't

00:30:37,050 --> 00:30:44,580
have time to show them all but that is a

00:30:40,260 --> 00:30:49,260
basic job queue so we're going to skip

00:30:44,580 --> 00:30:51,030
this example real quick geo hash we're

00:30:49,260 --> 00:30:53,940
not going to show these but this is a

00:30:51,030 --> 00:30:55,530
cool way to encode lat long into a

00:30:53,940 --> 00:30:56,910
character string it's actually the

00:30:55,530 --> 00:31:01,650
regardless of your data store you can

00:30:56,910 --> 00:31:04,470
get some really fast access so first

00:31:01,650 --> 00:31:07,620
character divides the globe up into 32

00:31:04,470 --> 00:31:10,620
tiles and I'm just going to go through

00:31:07,620 --> 00:31:12,570
this pretty quick so this is that we'll

00:31:10,620 --> 00:31:14,370
get into the 12 character geo hash of

00:31:12,570 --> 00:31:16,520
where we're at so we're going to go into

00:31:14,370 --> 00:31:19,800
nine from nine

00:31:16,520 --> 00:31:22,320
there we are and so you can see the

00:31:19,800 --> 00:31:24,180
stats kind of I mean it's the the number

00:31:22,320 --> 00:31:28,050
of tiles starts getting just kind of

00:31:24,180 --> 00:31:30,150
silly but so here we are we've got so

00:31:28,050 --> 00:31:34,290
there's about thirty three million tiles

00:31:30,150 --> 00:31:39,120
at this level and here we go there's

00:31:34,290 --> 00:31:41,580
about 1,000,000,000 I'm just going to

00:31:39,120 --> 00:31:45,030
keep going throw actually so here you

00:31:41,580 --> 00:31:50,040
can actually see the library so we're in

00:31:45,030 --> 00:31:52,860
there and then I'm get we're probably

00:31:50,040 --> 00:31:55,770
kind of in that room and so I'm guessing

00:31:52,860 --> 00:31:58,380
that I'm probably about right there and

00:31:55,770 --> 00:32:01,410
if you were to see so the children so

00:31:58,380 --> 00:32:04,530
this size a cells of proc approximate

00:32:01,410 --> 00:32:07,170
size is actually so the children is

00:32:04,530 --> 00:32:12,450
seven square centimeters and so you get

00:32:07,170 --> 00:32:16,650
that off of a 12 character do you half

00:32:12,450 --> 00:32:21,900
which is where to go well there's your

00:32:16,650 --> 00:32:23,930
third 11 um so if you look at the slides

00:32:21,900 --> 00:32:27,660
and check out the github repo this has

00:32:23,930 --> 00:32:30,000
the data structure I mean a really

00:32:27,660 --> 00:32:32,790
simple geocell and then a lot of the

00:32:30,000 --> 00:32:34,800
work is in a generator that you can go

00:32:32,790 --> 00:32:37,710
through and build you can generate that

00:32:34,800 --> 00:32:40,170
whole structure persist it and then just

00:32:37,710 --> 00:32:45,420
have like instantaneous access to any of

00:32:40,170 --> 00:32:47,820
the cells I'm Johnny T thank you like I

00:32:45,420 --> 00:32:49,440
wanted to end with this this was shared

00:32:47,820 --> 00:32:51,660
with me I mean by a co-worker down on

00:32:49,440 --> 00:32:54,540
money desktop that I love this one this

00:32:51,660 --> 00:32:56,520
I don't think you can look at and not

00:32:54,540 --> 00:33:00,690
smile so that's something to just have

00:32:56,520 --> 00:33:02,910
have up thank you very much and with

00:33:00,690 --> 00:33:06,230
that I that's it so I'm joining tea

00:33:02,910 --> 00:33:06,230
thank you for listening

00:33:36,519 --> 00:33:38,580

YouTube URL: https://www.youtube.com/watch?v=-sH2lSW2BGo


