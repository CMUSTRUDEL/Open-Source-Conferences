Title: MountainWest RubyConf 2014 - The Timeless Way of Building by John Athayde
Publication date: 2020-01-24
Playlist: MWRC 2014
Description: 
	"Design patterns" is a common phrase that is often spoken in the course of design and development of web applications. But it's genesis is not from programming, but Architecture. They come from a trio of books in the 1970s by Christopher Alexander, the most famous of which is the middle book: "A Pattern Language". The issue arises that Pattern Languages, much like spoken languages, are most effective when the speaker is fluent.
We'll look at the origin of pattern languages and why they can be dangerous and even detrimental tools in the hands of the inexperienced designer and developer through examples of bad grammar and poor idiomatic choices(aka antipatterns), and perhaps some architecture as well.

Help us caption & translate this video!

http://amara.org/v/FG2J/
Captions: 
	00:00:24,800 --> 00:00:28,829
hi everybody I'd like to thank the

00:00:27,689 --> 00:00:30,329
Mountain West crew for having me out

00:00:28,829 --> 00:00:32,369
here and I'd like to thank our new

00:00:30,329 --> 00:00:33,989
Miller for swapping with me yesterday

00:00:32,369 --> 00:00:38,850
since I was delirious in bed with the

00:00:33,989 --> 00:00:39,629
stomach flu so much better today so

00:00:38,850 --> 00:00:44,670
today we're gonna talk about the

00:00:39,629 --> 00:00:45,930
timeless way of building and a little

00:00:44,670 --> 00:00:47,040
background on me just so you understand

00:00:45,930 --> 00:00:48,690
where I'm coming from I actually have my

00:00:47,040 --> 00:00:51,710
master's in architecture of the building

00:00:48,690 --> 00:00:55,410
variety and out of the software variety

00:00:51,710 --> 00:00:59,699
been doing design and code from the

00:00:55,410 --> 00:01:02,129
HyperCard days and I currently do

00:00:59,699 --> 00:01:03,780
freelance design and and front-end work

00:01:02,129 --> 00:01:05,429
through meticulous which is my own

00:01:03,780 --> 00:01:07,830
company and I'm also the head of design

00:01:05,429 --> 00:01:09,780
for cargo sense which is a new startup

00:01:07,830 --> 00:01:12,270
that Bruce Williams rich Kilmer and

00:01:09,780 --> 00:01:14,580
myself and about three other people are

00:01:12,270 --> 00:01:16,530
working on Bruce and I also wrote this

00:01:14,580 --> 00:01:19,259
book the rails view which some of you

00:01:16,530 --> 00:01:21,390
may have read and if you haven't we have

00:01:19,259 --> 00:01:23,610
a discount code but I will say that it's

00:01:21,390 --> 00:01:26,220
now with all the JavaScript stuff having

00:01:23,610 --> 00:01:28,110
it's a little bit out of date but what

00:01:26,220 --> 00:01:30,600
we're gonna cover today we're gonna talk

00:01:28,110 --> 00:01:32,250
about patterns and what patterns mean

00:01:30,600 --> 00:01:35,100
we're going to talk about architecture

00:01:32,250 --> 00:01:36,719
of the building type and wear pattern

00:01:35,100 --> 00:01:38,729
languages and history kind of evolved

00:01:36,719 --> 00:01:40,290
from we're gonna look at anti patterns

00:01:38,729 --> 00:01:41,640
from a software perspective and then

00:01:40,290 --> 00:01:44,369
we're gonna apply some of Christopher

00:01:41,640 --> 00:01:46,219
Alexander's theory to what we're doing

00:01:44,369 --> 00:01:48,540
and kind of look at it from a new angle

00:01:46,219 --> 00:01:51,000
so when we talk about patterns in

00:01:48,540 --> 00:01:52,710
software what are we talking about this

00:01:51,000 --> 00:01:56,159
is a book that some of you may have read

00:01:52,710 --> 00:01:58,469
it is the Gang of Four book is it's

00:01:56,159 --> 00:02:01,350
commonly referred to how many of you

00:01:58,469 --> 00:02:04,859
guys have seen this reddit use it okay

00:02:01,350 --> 00:02:06,570
good so this book introduced many

00:02:04,859 --> 00:02:08,789
programmers to the concepts of patterns

00:02:06,570 --> 00:02:11,820
and pattern languages and they defined

00:02:08,789 --> 00:02:13,980
pattern language as such it's basically

00:02:11,820 --> 00:02:16,590
it systematically names motivates and

00:02:13,980 --> 00:02:18,720
explains general design that addresses

00:02:16,590 --> 00:02:23,459
recurring design problems and so it's

00:02:18,720 --> 00:02:26,519
made up of four parts and it's the

00:02:23,459 --> 00:02:28,320
pattern name the problem when do we

00:02:26,519 --> 00:02:31,470
apply this pattern what's the right

00:02:28,320 --> 00:02:34,350
context for it the solution so what

00:02:31,470 --> 00:02:36,840
elements make up the design the

00:02:34,350 --> 00:02:40,680
shifts the responsibilities and it's

00:02:36,840 --> 00:02:42,840
it's not particularly Act and then the

00:02:40,680 --> 00:02:46,500
consequences what do I gain or lose by

00:02:42,840 --> 00:02:48,540
using this pattern and the Gang of Four

00:02:46,500 --> 00:02:50,670
talked about that design patterns help

00:02:48,540 --> 00:02:54,120
you identify less obvious abstractions

00:02:50,670 --> 00:02:55,830
and the objects you can capture for

00:02:54,120 --> 00:02:58,410
example objects that represent a process

00:02:55,830 --> 00:03:01,290
or algorithm don't occur in nature per

00:02:58,410 --> 00:03:03,600
se but they are crucial part for our

00:03:01,290 --> 00:03:05,100
flexible designs so in the Gang of Four

00:03:03,600 --> 00:03:08,130
talked about these things there's a lot

00:03:05,100 --> 00:03:09,750
of static typing going on so this is the

00:03:08,130 --> 00:03:13,680
iterator pattern from the Gang of Four

00:03:09,750 --> 00:03:15,930
book and so doing a lot of these things

00:03:13,680 --> 00:03:17,520
in C++ and Java and those kind of

00:03:15,930 --> 00:03:18,330
languages can be painful and takes up a

00:03:17,520 --> 00:03:20,100
lot of your time

00:03:18,330 --> 00:03:21,720
however in Ruby we have these wonderful

00:03:20,100 --> 00:03:24,270
things already figured out for us in

00:03:21,720 --> 00:03:26,340
many cases by Matz and the countless

00:03:24,270 --> 00:03:28,890
people that have worked on the Ruby code

00:03:26,340 --> 00:03:30,630
base over the years so we don't have to

00:03:28,890 --> 00:03:35,190
deal with some of those painful patterns

00:03:30,630 --> 00:03:36,960
at the bottom level so when we look at

00:03:35,190 --> 00:03:39,480
what a patterns consist of where did

00:03:36,960 --> 00:03:41,460
they come from though so they're not the

00:03:39,480 --> 00:03:43,620
Tartan it's not the interior decorating

00:03:41,460 --> 00:03:45,270
mentality of a pattern but it's from

00:03:43,620 --> 00:03:47,700
architecture so this is Christopher

00:03:45,270 --> 00:03:50,570
Alexander he has been an architectural

00:03:47,700 --> 00:03:53,850
theorist for longer than I've been alive

00:03:50,570 --> 00:03:55,260
and these are three books you probably

00:03:53,850 --> 00:03:57,230
have heard of the middle one but we're

00:03:55,260 --> 00:03:59,520
going to talk today about the first one

00:03:57,230 --> 00:04:01,950
the pattern language is the middle one

00:03:59,520 --> 00:04:04,830
it was published in 1977 so it is now as

00:04:01,950 --> 00:04:07,500
old as me and it's eleven hundred and

00:04:04,830 --> 00:04:11,520
seventy some odd pages long he is not

00:04:07,500 --> 00:04:14,610
exactly brevity is not his thing let's

00:04:11,520 --> 00:04:15,750
put it that way but he gets into the

00:04:14,610 --> 00:04:17,730
pattern language is kind of like his

00:04:15,750 --> 00:04:19,620
construction kit but a timeless way of

00:04:17,730 --> 00:04:21,239
building talks about where patterns come

00:04:19,620 --> 00:04:23,880
from and why we use them in the first

00:04:21,239 --> 00:04:25,470
place so how can you distribute like

00:04:23,880 --> 00:04:27,420
this quest in all of these things is how

00:04:25,470 --> 00:04:28,890
can you distribute responsibility for

00:04:27,420 --> 00:04:30,420
design through all levels of a large

00:04:28,890 --> 00:04:33,120
hierarchy while still maintaining

00:04:30,420 --> 00:04:34,500
consistency and harmony in that overall

00:04:33,120 --> 00:04:35,880
design now he's talking about

00:04:34,500 --> 00:04:37,680
architecture but this applies very

00:04:35,880 --> 00:04:41,280
simply to software and pretty much any

00:04:37,680 --> 00:04:42,900
creative pursuit so how do we as

00:04:41,280 --> 00:04:45,240
developers with disparate experience

00:04:42,900 --> 00:04:47,540
write code together and end up moving in

00:04:45,240 --> 00:04:47,540
the same direction

00:04:47,940 --> 00:04:52,230
what he ended up trying to do here he he

00:04:50,610 --> 00:04:53,610
wanted to design a college campus which

00:04:52,230 --> 00:04:56,190
is the organ experiment where he

00:04:53,610 --> 00:04:58,020
documents that so you have to talk about

00:04:56,190 --> 00:05:00,030
the students and the professor's and all

00:04:58,020 --> 00:05:01,680
these different use cases now you as an

00:05:00,030 --> 00:05:03,960
individual may have had some of those

00:05:01,680 --> 00:05:06,120
use cases in your life but you can't

00:05:03,960 --> 00:05:09,150
possibly have had every use case that's

00:05:06,120 --> 00:05:11,400
I mean unless you've got some magic time

00:05:09,150 --> 00:05:13,590
machine or some reincarnation thing I

00:05:11,400 --> 00:05:16,140
don't know about we're pretty much stuck

00:05:13,590 --> 00:05:17,610
with our limited experiences and this

00:05:16,140 --> 00:05:20,340
really applies to that pesky thing we

00:05:17,610 --> 00:05:22,830
call clients or customers really getting

00:05:20,340 --> 00:05:24,930
into that community and understanding

00:05:22,830 --> 00:05:28,230
those needs so how do we bring those

00:05:24,930 --> 00:05:29,760
people in and you can't dump you can't

00:05:28,230 --> 00:05:30,960
just say well you design it to the

00:05:29,760 --> 00:05:32,280
end-user because you know it's gonna be

00:05:30,960 --> 00:05:33,810
awful because they don't have your

00:05:32,280 --> 00:05:36,810
expertise as a software developer or in

00:05:33,810 --> 00:05:39,320
this case as an architect so some of

00:05:36,810 --> 00:05:42,420
these patterns and things like that are

00:05:39,320 --> 00:05:43,590
kind of like really difficult to grasp

00:05:42,420 --> 00:05:44,850
so the first time you go through it so

00:05:43,590 --> 00:05:46,770
one of them is something called the

00:05:44,850 --> 00:05:51,210
transition space between the street and

00:05:46,770 --> 00:05:53,730
a front door to break that down that's

00:05:51,210 --> 00:05:55,320
the name so the problem is trying to

00:05:53,730 --> 00:05:57,600
solve that it's too abrupt to go from a

00:05:55,320 --> 00:05:59,460
public space to a private space so the

00:05:57,600 --> 00:06:01,919
street is a public space the house is a

00:05:59,460 --> 00:06:04,290
private space the solution is a

00:06:01,919 --> 00:06:06,270
transition would help people move from

00:06:04,290 --> 00:06:09,840
that into a semi public space and then

00:06:06,270 --> 00:06:12,440
into the private space but notice I

00:06:09,840 --> 00:06:14,190
haven't said what that is

00:06:12,440 --> 00:06:16,890
implementations of that pattern are a

00:06:14,190 --> 00:06:18,720
stupe a front yard a porch there's

00:06:16,890 --> 00:06:20,490
countless implementations around the

00:06:18,720 --> 00:06:22,980
world as you look at things even things

00:06:20,490 --> 00:06:25,620
such as foyers or receiving halls and in

00:06:22,980 --> 00:06:26,940
larger structures but it's not when you

00:06:25,620 --> 00:06:29,490
talk about the pattern you don't talk

00:06:26,940 --> 00:06:33,000
about a foyer you talk about a

00:06:29,490 --> 00:06:34,200
transition and the consequences so what

00:06:33,000 --> 00:06:35,730
are the consequences some of the good

00:06:34,200 --> 00:06:38,100
versus the bad you know I'm reducing the

00:06:35,730 --> 00:06:39,570
available space on the street if I have

00:06:38,100 --> 00:06:42,660
a stoop I'm breaking into the sidewalk

00:06:39,570 --> 00:06:45,290
or if I've got I'm pushing the house

00:06:42,660 --> 00:06:47,340
back I've got a setback now in the yard

00:06:45,290 --> 00:06:49,250
delay the entry into the structure I

00:06:47,340 --> 00:06:51,540
mean these can be good and bad things

00:06:49,250 --> 00:06:52,770
and patterns contain patterns there's

00:06:51,540 --> 00:06:54,090
patterns all the way down they talk

00:06:52,770 --> 00:06:56,039
about everything from the overall layout

00:06:54,090 --> 00:06:57,840
of a town or a city down to the smallest

00:06:56,039 --> 00:06:59,729
interactions and even down to

00:06:57,840 --> 00:07:02,070
architectural detailing about how things

00:06:59,729 --> 00:07:04,320
go together at the micro level

00:07:02,070 --> 00:07:06,090
and so what I want you to think about is

00:07:04,320 --> 00:07:08,970
that what we call principals are in fact

00:07:06,090 --> 00:07:10,500
patterns this is a pattern don't repeat

00:07:08,970 --> 00:07:13,230
yourself it's all about efficient code

00:07:10,500 --> 00:07:16,020
writing yagna you ain't gonna need it

00:07:13,230 --> 00:07:17,310
don't go complex up front these this is

00:07:16,020 --> 00:07:18,630
a pattern this is you know this is

00:07:17,310 --> 00:07:21,750
something very broad that can be applied

00:07:18,630 --> 00:07:23,490
all over the place here's some others

00:07:21,750 --> 00:07:25,260
you probably have heard about single

00:07:23,490 --> 00:07:27,230
responsibility principle that a class

00:07:25,260 --> 00:07:30,120
should have only a single responsibility

00:07:27,230 --> 00:07:32,070
open/close that software entities should

00:07:30,120 --> 00:07:33,440
be open for extension but closed for

00:07:32,070 --> 00:07:36,150
modification

00:07:33,440 --> 00:07:38,130
LSP that objects in a program should be

00:07:36,150 --> 00:07:39,180
replaceable with instances of their

00:07:38,130 --> 00:07:41,250
subtypes without altering the

00:07:39,180 --> 00:07:44,880
correctness of that program or you can

00:07:41,250 --> 00:07:46,110
look at also designed by contract is be

00:07:44,880 --> 00:07:48,570
integration interface segregation

00:07:46,110 --> 00:07:50,550
principle many client specific

00:07:48,570 --> 00:07:55,590
interfaces are better than one general

00:07:50,550 --> 00:07:57,060
purpose interface and d IP well depend

00:07:55,590 --> 00:08:00,840
upon abstractions do not depend upon

00:07:57,060 --> 00:08:03,210
concretions now put those together what

00:08:00,840 --> 00:08:05,490
you have another principle or another

00:08:03,210 --> 00:08:07,260
pattern so patterns contain patterns all

00:08:05,490 --> 00:08:10,440
the way down so where did these things

00:08:07,260 --> 00:08:12,510
come from an architectural patterns used

00:08:10,440 --> 00:08:14,730
to be in the seventeen eighteenth

00:08:12,510 --> 00:08:15,990
century came out of these pattern books

00:08:14,730 --> 00:08:18,180
so pattern books were effectively

00:08:15,990 --> 00:08:19,950
somebody's portfolio this happened to be

00:08:18,180 --> 00:08:23,040
Robert and James Adam who are two of the

00:08:19,950 --> 00:08:25,260
more famous neoclassical architects and

00:08:23,040 --> 00:08:27,390
what they did would basically publish

00:08:25,260 --> 00:08:28,800
various drawings from structures they

00:08:27,390 --> 00:08:30,510
built because back in the day you

00:08:28,800 --> 00:08:31,860
basically could do plates you couldn't

00:08:30,510 --> 00:08:34,110
really do photographs things of that

00:08:31,860 --> 00:08:36,330
nature so everything was a drawing of

00:08:34,110 --> 00:08:38,310
some type so you have an elevation you

00:08:36,330 --> 00:08:40,830
have a detail so we're going from the

00:08:38,310 --> 00:08:42,419
macro to the micro scale here and you

00:08:40,830 --> 00:08:44,190
can start looking at other things like

00:08:42,419 --> 00:08:46,890
Robert Morris also published this was in

00:08:44,190 --> 00:08:49,170
1750 so he heavily influenced early

00:08:46,890 --> 00:08:51,540
American architecture colonial and

00:08:49,170 --> 00:08:54,240
federal style specifically so plate

00:08:51,540 --> 00:08:56,130
three here was a this this guy was in

00:08:54,240 --> 00:08:57,630
the UK so this was a design that he came

00:08:56,130 --> 00:09:00,240
up with may or may not have been built

00:08:57,630 --> 00:09:01,710
this is Battersea which is in Petersburg

00:09:00,240 --> 00:09:04,560
Virginia which is south of Richmond the

00:09:01,710 --> 00:09:06,870
Capitol but now if we look at the two up

00:09:04,560 --> 00:09:08,420
top and down bottom they're not the same

00:09:06,870 --> 00:09:10,680
thing but they have very similar

00:09:08,420 --> 00:09:14,220
elements and they're applied in a

00:09:10,680 --> 00:09:15,360
similar way Andrea Palladio is four

00:09:14,220 --> 00:09:16,950
books on architecture

00:09:15,360 --> 00:09:18,870
probably was one of the critical books

00:09:16,950 --> 00:09:21,420
that that was the basis for the

00:09:18,870 --> 00:09:25,050
architectural Renaissance and this is

00:09:21,420 --> 00:09:27,060
Villa Cornaro that he designed this is

00:09:25,050 --> 00:09:29,579
the original design for Monticello by

00:09:27,060 --> 00:09:31,230
Thomas Jefferson so now you look at the

00:09:29,579 --> 00:09:32,790
top you look at the bottom again we have

00:09:31,230 --> 00:09:33,450
the similar portico but it's got fewer

00:09:32,790 --> 00:09:35,010
columns

00:09:33,450 --> 00:09:36,450
you know Jefferson got rid of the kind

00:09:35,010 --> 00:09:39,300
of surround and just put the wings onto

00:09:36,450 --> 00:09:41,490
it but then of course Jefferson went to

00:09:39,300 --> 00:09:44,490
France and this is the hotel the salm

00:09:41,490 --> 00:09:46,079
which is the French Foreign Legion kind

00:09:44,490 --> 00:09:50,370
of hall in and it's right on the River

00:09:46,079 --> 00:09:52,019
Seine and down in old Paris and this

00:09:50,370 --> 00:09:54,120
looks like it's only one story tall but

00:09:52,019 --> 00:09:57,510
in fact it's many stories and so when he

00:09:54,120 --> 00:09:59,250
got back Monticello became this the

00:09:57,510 --> 00:10:02,880
there are three stories in a basement in

00:09:59,250 --> 00:10:06,720
this building the line break for the

00:10:02,880 --> 00:10:08,459
floor is actually right here if you go

00:10:06,720 --> 00:10:09,720
in and you ever tour the building it's

00:10:08,459 --> 00:10:11,190
amazing because you're walking through

00:10:09,720 --> 00:10:12,329
and the window stops at the ceiling and

00:10:11,190 --> 00:10:14,339
the first floor you go to the second

00:10:12,329 --> 00:10:19,050
floor and there's this square window on

00:10:14,339 --> 00:10:20,399
the floor so oops compare the two you

00:10:19,050 --> 00:10:22,529
know they're they're similar they're

00:10:20,399 --> 00:10:23,550
derivative but there's differences but

00:10:22,529 --> 00:10:25,140
what's happening here is that they're

00:10:23,550 --> 00:10:26,940
all working in the language of classical

00:10:25,140 --> 00:10:28,529
architecture there's very specific

00:10:26,940 --> 00:10:31,410
things that are defined about the orders

00:10:28,529 --> 00:10:32,490
of classical architecture and so these

00:10:31,410 --> 00:10:33,990
kind of patterns or things that

00:10:32,490 --> 00:10:36,420
Christopher Alexander started looking at

00:10:33,990 --> 00:10:38,670
and he also went more abstract and more

00:10:36,420 --> 00:10:40,199
generic in his thing and some of the

00:10:38,670 --> 00:10:41,790
examples that I want to show you just to

00:10:40,199 --> 00:10:44,190
give you some ideas of how these things

00:10:41,790 --> 00:10:46,050
exist light from two sides of the room

00:10:44,190 --> 00:10:49,019
this is the Wren building at William and

00:10:46,050 --> 00:10:51,240
Mary yet just natural light coming in

00:10:49,019 --> 00:10:54,839
now if you change that to light from one

00:10:51,240 --> 00:10:57,839
side totally different feel to the space

00:10:54,839 --> 00:11:00,000
stronger shadows different vibe you're

00:10:57,839 --> 00:11:01,500
gonna get Oh afternoon or a morning Sun

00:11:00,000 --> 00:11:04,140
as opposed to Sun at both times of the

00:11:01,500 --> 00:11:07,910
day or what about light from above any

00:11:04,140 --> 00:11:12,589
idea is what this is it's a violin

00:11:07,910 --> 00:11:15,839
microscale or st. Peter's macroscale

00:11:12,589 --> 00:11:17,490
same concept light from above now

00:11:15,839 --> 00:11:20,880
granted we don't experience this that

00:11:17,490 --> 00:11:22,589
often but it's to get to the point

00:11:20,880 --> 00:11:25,020
Amish barns are another example that

00:11:22,589 --> 00:11:26,220
Alexander uses all the time in the past

00:11:25,020 --> 00:11:28,079
there weren't drawings or building

00:11:26,220 --> 00:11:29,160
permits or architects in that sense

00:11:28,079 --> 00:11:30,899
architecture as a

00:11:29,160 --> 00:11:35,790
fashion only started to happen in the

00:11:30,899 --> 00:11:38,490
the mid late 1800s in France with the

00:11:35,790 --> 00:11:40,230
Ecole des Vosges arts so the before that

00:11:38,490 --> 00:11:43,410
people there were master builders and so

00:11:40,230 --> 00:11:44,759
if you wanted a barn you went to your

00:11:43,410 --> 00:11:47,160
neighbors and said hey I need a barn

00:11:44,759 --> 00:11:48,899
I've got you know I needed stalls for

00:11:47,160 --> 00:11:50,519
the horses and the cattle and you kind

00:11:48,899 --> 00:11:52,350
of figured out what you needed and then

00:11:50,519 --> 00:11:54,620
you just got together and built it

00:11:52,350 --> 00:11:57,839
because he had this understood community

00:11:54,620 --> 00:11:59,189
language of how a barn is built you need

00:11:57,839 --> 00:12:00,899
an extra stall that's fine we could just

00:11:59,189 --> 00:12:02,850
add one you don't have to go and get it

00:12:00,899 --> 00:12:04,800
approved and get a stamp or any of that

00:12:02,850 --> 00:12:06,689
stuff we need today it was just the way

00:12:04,800 --> 00:12:09,089
things were done people just knew how to

00:12:06,689 --> 00:12:11,220
build things and it comes down to

00:12:09,089 --> 00:12:13,350
looking at that you know we talked about

00:12:11,220 --> 00:12:15,899
being craftsmen or engineers or

00:12:13,350 --> 00:12:17,220
architects a lot in software and what

00:12:15,899 --> 00:12:19,889
does this mean is that we basically are

00:12:17,220 --> 00:12:22,139
all we there's a very strong allegory to

00:12:19,889 --> 00:12:25,290
that we are builders and it's not a

00:12:22,139 --> 00:12:26,639
wrong analogy if any of you have seen

00:12:25,290 --> 00:12:28,170
Glenn Vanderburgh real software

00:12:26,639 --> 00:12:30,720
engineering talk you might recognize

00:12:28,170 --> 00:12:32,220
this quote but engineers frequently have

00:12:30,720 --> 00:12:33,930
to make decisions of great practical

00:12:32,220 --> 00:12:36,449
consequence in the face of incomplete

00:12:33,930 --> 00:12:39,060
and uncertain knowledge and Walter of

00:12:36,449 --> 00:12:41,339
and Vanzetti said that and patterns help

00:12:39,060 --> 00:12:43,079
us do that the they help us look at the

00:12:41,339 --> 00:12:47,100
best practices available to solve a

00:12:43,079 --> 00:12:49,259
problem however Richard Gabriel talks

00:12:47,100 --> 00:12:51,209
about this a lot too many people think

00:12:49,259 --> 00:12:54,060
that design patterns are plug-and-play

00:12:51,209 --> 00:12:55,350
and in it's like code templates or I'm

00:12:54,060 --> 00:12:57,360
just going to apply it and I'm done and

00:12:55,350 --> 00:12:59,610
I don't have to do anything and design

00:12:57,360 --> 00:13:02,910
does this to visual designers you have

00:12:59,610 --> 00:13:04,380
this just makes me mad it's like these

00:13:02,910 --> 00:13:06,569
are implementations these are not

00:13:04,380 --> 00:13:10,529
patterns these are people implementing

00:13:06,569 --> 00:13:11,819
patterns in different ways so instances

00:13:10,529 --> 00:13:15,300
of a class is a good way to think about

00:13:11,819 --> 00:13:17,370
this so please stop please stop

00:13:15,300 --> 00:13:20,850
confusing everybody

00:13:17,370 --> 00:13:22,529
Brian Hogan put it well he's a Ruby and

00:13:20,850 --> 00:13:27,600
rails writer design patterns are

00:13:22,529 --> 00:13:29,040
suggested approaches seen in the wild so

00:13:27,600 --> 00:13:30,779
what are we striving towards here with

00:13:29,040 --> 00:13:32,699
all this what our patterns getting us to

00:13:30,779 --> 00:13:34,879
and Christopher Alexander talks about

00:13:32,699 --> 00:13:37,800
the quality of a space that has no name

00:13:34,879 --> 00:13:39,990
so how many of you guys have traveled in

00:13:37,800 --> 00:13:41,430
I mean you can even talk about downtown

00:13:39,990 --> 00:13:43,020
Salt Lake but how many guys have gone to

00:13:41,430 --> 00:13:45,180
older cities especially in Europe

00:13:43,020 --> 00:13:46,500
or things like that and you kind of walk

00:13:45,180 --> 00:13:47,580
down that street and you just get

00:13:46,500 --> 00:13:49,770
there's just a vibe to it

00:13:47,580 --> 00:13:52,260
there's a feeling to it and then you go

00:13:49,770 --> 00:13:54,390
to a strip mall and it's completely

00:13:52,260 --> 00:13:57,480
devoid of that feeling that's what he's

00:13:54,390 --> 00:13:58,800
talking about in this example so jibba

00:13:57,480 --> 00:14:01,410
lean Italy it's on the western end of

00:13:58,800 --> 00:14:03,270
Sicily it was destroyed in the 1968

00:14:01,410 --> 00:14:05,790
earthquake and a new town was built 20

00:14:03,270 --> 00:14:07,470
kilometers away and the old town and

00:14:05,790 --> 00:14:11,730
artists went and put concrete blocks on

00:14:07,470 --> 00:14:13,020
what was the floor plans and the

00:14:11,730 --> 00:14:14,460
footprints of the building I'm sorry and

00:14:13,020 --> 00:14:16,140
you can see you've got narrow streets

00:14:14,460 --> 00:14:17,730
you've got you know it's just kind of

00:14:16,140 --> 00:14:19,530
got built as it went there's not a clean

00:14:17,730 --> 00:14:22,980
grid there's not organization it just

00:14:19,530 --> 00:14:24,990
was built as it was built jubilee nanou

00:14:22,980 --> 00:14:27,330
ovo is designed by many of the most

00:14:24,990 --> 00:14:29,430
prominent architects in italy and it's

00:14:27,330 --> 00:14:33,570
you know everything's supposed to be

00:14:29,430 --> 00:14:35,280
great and it feels awful it feels like a

00:14:33,570 --> 00:14:36,870
ghost town when you walk through it and

00:14:35,280 --> 00:14:39,660
for anybody who's been in a small

00:14:36,870 --> 00:14:42,390
Italian town that's the antithesis of

00:14:39,660 --> 00:14:43,950
that vibe you expect to walk down the

00:14:42,390 --> 00:14:46,410
street and have shops open and have

00:14:43,950 --> 00:14:50,100
people moving and this is the middle of

00:14:46,410 --> 00:14:53,250
the day and part of the problem is

00:14:50,100 --> 00:14:55,050
narrow streets in Mediterranean climate

00:14:53,250 --> 00:15:00,060
in the middle of the summer give you

00:14:55,050 --> 00:15:00,960
shade this gives you nothing so this is

00:15:00,060 --> 00:15:03,240
what I'm going to start talking about

00:15:00,960 --> 00:15:06,510
anti-patterns this is an architectural

00:15:03,240 --> 00:15:07,860
anti-pattern but so any patterns are

00:15:06,510 --> 00:15:11,280
also you can talk about them as code

00:15:07,860 --> 00:15:12,870
smells but it's really an example you

00:15:11,280 --> 00:15:15,000
see a lot of anti patterns happen when

00:15:12,870 --> 00:15:17,520
you have nonfluent developers working in

00:15:15,000 --> 00:15:20,400
a code base it's building a house on a

00:15:17,520 --> 00:15:22,710
shoddy foundation the good news is

00:15:20,400 --> 00:15:23,880
unlike architecture usually you don't

00:15:22,710 --> 00:15:25,380
have to tear the whole building down to

00:15:23,880 --> 00:15:29,340
fix a lot of these things in some cases

00:15:25,380 --> 00:15:31,170
you do but that's not always the case

00:15:29,340 --> 00:15:32,700
most often these are created because the

00:15:31,170 --> 00:15:34,920
developer didn't know this was the wrong

00:15:32,700 --> 00:15:38,280
way to do it they just it paid the test

00:15:34,920 --> 00:15:40,620
passed so some of these that I'm going

00:15:38,280 --> 00:15:43,200
to show you our mainly rails based and

00:15:40,620 --> 00:15:44,700
so there's going to be a little bad X in

00:15:43,200 --> 00:15:47,130
the upper right and a green check for a

00:15:44,700 --> 00:15:50,460
decent so like we said you know this is

00:15:47,130 --> 00:15:52,080
the bad architecture thing and you can

00:15:50,460 --> 00:15:54,740
also talk about these are anybody

00:15:52,080 --> 00:15:56,490
familiar with the big ball of mud paper

00:15:54,740 --> 00:15:56,850
okay this is something you all should

00:15:56,490 --> 00:15:58,410
read

00:15:56,850 --> 00:16:01,380
really great Brian Foote and Joseph

00:15:58,410 --> 00:16:03,540
Yoder wrote this and it's they define a

00:16:01,380 --> 00:16:06,630
bunch of software ante patterns in this

00:16:03,540 --> 00:16:08,790
this is purely a software paper so this

00:16:06,630 --> 00:16:10,199
shanty town big ball of mud too many

00:16:08,790 --> 00:16:11,730
tools everyone is working in their own

00:16:10,199 --> 00:16:14,040
direction there's no investment in

00:16:11,730 --> 00:16:17,540
infrastructure if that sounds like your

00:16:14,040 --> 00:16:20,279
project you might want to check it out

00:16:17,540 --> 00:16:22,470
some other bad examples Pete Jackson

00:16:20,279 --> 00:16:24,029
from Manchuria sent me this when I was

00:16:22,470 --> 00:16:27,660
asking for anti-patterns when I first

00:16:24,029 --> 00:16:29,399
put this together this is this is we're

00:16:27,660 --> 00:16:32,339
taking something that's good to the

00:16:29,399 --> 00:16:34,170
extreme is bad we must test everything

00:16:32,339 --> 00:16:35,970
so there are cases we're testing a

00:16:34,170 --> 00:16:36,930
migration is required just because

00:16:35,970 --> 00:16:38,459
you're gonna break something in

00:16:36,930 --> 00:16:40,500
production if you if it's in any way

00:16:38,459 --> 00:16:44,300
shape or form wrong but always testing

00:16:40,500 --> 00:16:44,300
every migration probably overkill

00:16:44,690 --> 00:16:48,360
something you'll see a lot when you

00:16:46,529 --> 00:16:50,759
first get into active record I can walk

00:16:48,360 --> 00:16:53,399
the tree this is great you know whoo all

00:16:50,759 --> 00:16:56,790
the way down really brittle super

00:16:53,399 --> 00:16:59,639
brittle law of demeter kind of applies

00:16:56,790 --> 00:17:01,439
here so it's something where you can

00:16:59,639 --> 00:17:03,509
start extracting this out and you could

00:17:01,439 --> 00:17:05,610
even go straight up to the account and

00:17:03,509 --> 00:17:08,280
create a method on account where instead

00:17:05,610 --> 00:17:10,169
of having to have that brittleness you

00:17:08,280 --> 00:17:12,419
can really abstract it out so you now

00:17:10,169 --> 00:17:13,980
have one method that you can test if the

00:17:12,419 --> 00:17:16,199
customers address state is actually

00:17:13,980 --> 00:17:25,740
valid all the way down this is just a

00:17:16,199 --> 00:17:27,449
simplification one level up so we want

00:17:25,740 --> 00:17:30,720
to look at things that are composition

00:17:27,449 --> 00:17:33,150
and delegate so instead of a long tree

00:17:30,720 --> 00:17:34,350
we're gonna extract something and it's

00:17:33,150 --> 00:17:35,549
going to live in parallel to our class

00:17:34,350 --> 00:17:39,750
and that's a single responsibility

00:17:35,549 --> 00:17:41,820
principle it work phat models we've

00:17:39,750 --> 00:17:44,400
heard this all the time it started out

00:17:41,820 --> 00:17:45,900
that you know in PHP land everything was

00:17:44,400 --> 00:17:48,539
in one file and then you know it's like

00:17:45,900 --> 00:17:50,010
there's always this one part of the

00:17:48,539 --> 00:17:51,840
rails app where it's like things are

00:17:50,010 --> 00:17:53,460
getting kicked too and then somebody

00:17:51,840 --> 00:17:55,710
identifies it it is this is awful and

00:17:53,460 --> 00:17:56,970
then it moves to the next level and the

00:17:55,710 --> 00:17:59,549
suddenly we've solved this problem so

00:17:56,970 --> 00:18:01,320
fat models is one that's been been there

00:17:59,549 --> 00:18:03,419
but it's you know a lot of methods can

00:18:01,320 --> 00:18:06,330
happen on models and after a while that

00:18:03,419 --> 00:18:09,240
gets out of control so you know if

00:18:06,330 --> 00:18:11,940
you're going to look at things where

00:18:09,240 --> 00:18:15,180
you know you can do the SRP stuff again

00:18:11,940 --> 00:18:16,470
and utilize composed of but the only

00:18:15,180 --> 00:18:19,050
downside of composed of is you can't

00:18:16,470 --> 00:18:20,550
modify composed objects in place so it

00:18:19,050 --> 00:18:23,010
won't persist or throw a frozen

00:18:20,550 --> 00:18:26,790
exception which doesn't help us all that

00:18:23,010 --> 00:18:28,190
much so if you can go through the model

00:18:26,790 --> 00:18:31,260
and group things into logical blocks

00:18:28,190 --> 00:18:32,900
that should be right for refactoring and

00:18:31,260 --> 00:18:34,830
there's lots of ways to approach this

00:18:32,900 --> 00:18:36,120
especially if the methods feel as

00:18:34,830 --> 00:18:39,630
they're really not part of the models

00:18:36,120 --> 00:18:42,150
mandate and so depending on what you're

00:18:39,630 --> 00:18:45,000
looking at any of these five items would

00:18:42,150 --> 00:18:46,350
be a good place to start now you

00:18:45,000 --> 00:18:48,240
probably don't want to start with an

00:18:46,350 --> 00:18:51,000
engine probably not the right thing to

00:18:48,240 --> 00:18:52,350
do but you know if you get to that point

00:18:51,000 --> 00:18:53,640
of complexity maybe that needs to be

00:18:52,350 --> 00:19:00,090
extracted especially if you're sharing

00:18:53,640 --> 00:19:02,630
it across multiple apps callbacks

00:19:00,090 --> 00:19:04,590
transactional --zz if your app doesn't

00:19:02,630 --> 00:19:05,820
seem to fit in the active record

00:19:04,590 --> 00:19:07,430
lifestyle and you're building a rails

00:19:05,820 --> 00:19:09,060
app you might be using the wrong tool

00:19:07,430 --> 00:19:11,280
something to think about

00:19:09,060 --> 00:19:15,450
rails is also a series of peri large

00:19:11,280 --> 00:19:17,220
libraries we're going on over eight

00:19:15,450 --> 00:19:18,750
years I think I don't know if Aaron's

00:19:17,220 --> 00:19:21,300
here he could probably say better as how

00:19:18,750 --> 00:19:23,940
long the the the core has been being

00:19:21,300 --> 00:19:25,800
built but there's a lot of gold in there

00:19:23,940 --> 00:19:26,670
to dig through and find and there's a

00:19:25,800 --> 00:19:28,770
lot of things that I see people

00:19:26,670 --> 00:19:33,150
replicating that's actually in the rails

00:19:28,770 --> 00:19:35,160
stack if you have complex finders let's

00:19:33,150 --> 00:19:36,450
go look at some scopes you know and then

00:19:35,160 --> 00:19:37,890
you can take this and there's there's

00:19:36,450 --> 00:19:39,240
layers and layers so for factoring

00:19:37,890 --> 00:19:41,220
that's what's so exciting about so many

00:19:39,240 --> 00:19:43,230
things there's so many ways to solves

00:19:41,220 --> 00:19:46,410
these problems and you can constantly be

00:19:43,230 --> 00:19:48,930
improving your code generators pretty

00:19:46,410 --> 00:19:50,700
much without fail are great for

00:19:48,930 --> 00:19:52,110
prototyping and awful for production

00:19:50,700 --> 00:19:55,170
you're going to end up with a lot of

00:19:52,110 --> 00:19:56,960
stuff you don't need and go for

00:19:55,170 --> 00:19:58,920
something with like normalization

00:19:56,960 --> 00:20:01,310
dynamic method seems along those lines

00:19:58,920 --> 00:20:04,080
there's lots of ways to get past this

00:20:01,310 --> 00:20:05,730
you see people like oh I'm clever I'm

00:20:04,080 --> 00:20:08,400
going to write a DSL for this problem

00:20:05,730 --> 00:20:09,990
we're solving there's not a need unless

00:20:08,400 --> 00:20:13,740
you know this is again don't extract too

00:20:09,990 --> 00:20:16,200
early from the rails view side of things

00:20:13,740 --> 00:20:18,660
a lot of this is painful to me you see

00:20:16,200 --> 00:20:20,400
everything's a div or you know a lot of

00:20:18,660 --> 00:20:22,510
PHP constructs from people that came

00:20:20,400 --> 00:20:23,770
from different programming languages and

00:20:22,510 --> 00:20:28,030
trying to apply those things they

00:20:23,770 --> 00:20:29,650
learned to Rails or Ruby using render

00:20:28,030 --> 00:20:31,419
partial render collection content for

00:20:29,650 --> 00:20:33,450
blocks all these powerful things like

00:20:31,419 --> 00:20:35,650
start to open up opportunities for us

00:20:33,450 --> 00:20:39,549
type of graphic refactoring is something

00:20:35,650 --> 00:20:40,690
that a friend of mine used to he had put

00:20:39,549 --> 00:20:41,980
up this article about it's basically

00:20:40,690 --> 00:20:44,350
just about making your code easier to

00:20:41,980 --> 00:20:46,540
read if you have a line that's over 80

00:20:44,350 --> 00:20:48,520
characters break it up it's not a

00:20:46,540 --> 00:20:51,630
problem it'll it'll still render down it

00:20:48,520 --> 00:20:54,429
but it's all about developer happiness

00:20:51,630 --> 00:20:57,280
MVC we we know and love this one but

00:20:54,429 --> 00:20:58,780
people who are not working if you

00:20:57,280 --> 00:21:00,700
haven't if you haven't worked outside of

00:20:58,780 --> 00:21:02,740
the rails routes system in a while it

00:21:00,700 --> 00:21:04,179
and you go work on a PHP project and

00:21:02,740 --> 00:21:06,850
you're trying to write routes in a dot

00:21:04,179 --> 00:21:10,720
htaccess file you will quickly be very

00:21:06,850 --> 00:21:13,330
thankful for the tools you have untested

00:21:10,720 --> 00:21:14,350
code if it's not tested it's going to

00:21:13,330 --> 00:21:18,309
break and it's going to cause you a

00:21:14,350 --> 00:21:19,780
problem fat controllers like fat models

00:21:18,309 --> 00:21:22,330
you know we've got too much weight there

00:21:19,780 --> 00:21:23,590
and this is becoming like these are

00:21:22,330 --> 00:21:25,000
issues that apply now also to our

00:21:23,590 --> 00:21:26,620
everything's going to these JavaScript

00:21:25,000 --> 00:21:28,780
one-page apps well if you've got

00:21:26,620 --> 00:21:30,760
everything in one file in that one page

00:21:28,780 --> 00:21:32,049
app it's going to be really difficult to

00:21:30,760 --> 00:21:34,000
work with really difficult to test

00:21:32,049 --> 00:21:36,190
really difficult to understand for new

00:21:34,000 --> 00:21:38,049
developer coming on that project so I

00:21:36,190 --> 00:21:39,250
mean I could go on for weeks about this

00:21:38,049 --> 00:21:42,250
stuff but if you want to get deeper into

00:21:39,250 --> 00:21:44,320
this there's two great books I am not

00:21:42,250 --> 00:21:46,330
associated with either one but rails

00:21:44,320 --> 00:21:49,840
auntie patterns and also design patterns

00:21:46,330 --> 00:21:52,770
in Ruby by Russell Wilson so back to the

00:21:49,840 --> 00:21:55,059
theory the kernel of the way is

00:21:52,770 --> 00:21:58,059
something that that Alexander talks

00:21:55,059 --> 00:22:00,250
about so how do we apply this stuff to

00:21:58,059 --> 00:22:03,150
software and this bears repeating its

00:22:00,250 --> 00:22:05,890
suggested approaches seen in the wild

00:22:03,150 --> 00:22:07,540
Evan Lite also put it nicely that fat

00:22:05,890 --> 00:22:08,950
model skinny controller extracting your

00:22:07,540 --> 00:22:11,500
domain models from active record these

00:22:08,950 --> 00:22:15,280
are recipes think and do what works in

00:22:11,500 --> 00:22:17,350
your context and Jeff Atwood has done a

00:22:15,280 --> 00:22:19,390
whole bunch of speaking about pattern

00:22:17,350 --> 00:22:21,970
stuff most of it was in 2005 he wrote a

00:22:19,390 --> 00:22:23,200
bunch of great articles patterns like

00:22:21,970 --> 00:22:24,730
all forms the complexity should be

00:22:23,200 --> 00:22:29,260
avoided until they are absolutely

00:22:24,730 --> 00:22:31,030
necessary and you can't say that you're

00:22:29,260 --> 00:22:32,320
applying the design of the pattern

00:22:31,030 --> 00:22:35,730
correctly unless you're confronting the

00:22:32,320 --> 00:22:35,730
problem that it's supposed to fix

00:22:35,970 --> 00:22:39,389
so this is a problem because you get a

00:22:37,769 --> 00:22:40,980
new developer that's like I just got

00:22:39,389 --> 00:22:45,750
this pattern book oh my god I'm going to

00:22:40,980 --> 00:22:46,919
use it everywhere and they you say new

00:22:45,750 --> 00:22:48,210
developer what are you doing it's like

00:22:46,919 --> 00:22:51,000
well I got the first solution it worked

00:22:48,210 --> 00:22:53,340
next okay that's not the best solution

00:22:51,000 --> 00:22:55,889
though but it worked so it's not about

00:22:53,340 --> 00:22:58,559
using the patterns it's about speaking a

00:22:55,889 --> 00:23:00,389
language just as the the master chess

00:22:58,559 --> 00:23:02,070
person is not you know garry kasparov is

00:23:00,389 --> 00:23:05,269
not sitting there and running every

00:23:02,070 --> 00:23:07,919
single possible branch that could occur

00:23:05,269 --> 00:23:09,419
watson maybe but Kasparov sure isn't

00:23:07,919 --> 00:23:10,889
he's using a lot of intuition and years

00:23:09,419 --> 00:23:12,240
of experience to say that I feel that

00:23:10,889 --> 00:23:15,120
I'm gonna go this way I feel that this

00:23:12,240 --> 00:23:17,159
is better so we need to move towards

00:23:15,120 --> 00:23:20,639
eloquence out being eloquent and being

00:23:17,159 --> 00:23:24,080
fluent and so let's go back to the

00:23:20,639 --> 00:23:24,080
character of her space that has no name

00:23:24,799 --> 00:23:31,740
Gabriel wrote is he's got a whole book

00:23:29,490 --> 00:23:35,610
on the stuff that was out in 2006

00:23:31,740 --> 00:23:37,500
patterns of software development but his

00:23:35,610 --> 00:23:39,779
biggest complaint and I agree with it is

00:23:37,500 --> 00:23:41,669
that developers take so much inspiration

00:23:39,779 --> 00:23:43,679
from the simple mechanical parts of

00:23:41,669 --> 00:23:45,389
Alexander's work and ignore the heart of

00:23:43,679 --> 00:23:47,279
it so they're all about the patterns

00:23:45,389 --> 00:23:49,230
themselves as opposed to the concept of

00:23:47,279 --> 00:23:55,200
how patterns exist and how they look in

00:23:49,230 --> 00:23:56,700
a bigger world so how do we see this

00:23:55,200 --> 00:23:58,950
happening in code so let's talk about

00:23:56,700 --> 00:24:01,440
how Alexander really defines this and

00:23:58,950 --> 00:24:03,299
basically we're looking at that the

00:24:01,440 --> 00:24:04,919
aegis character has nothing to do in

00:24:03,299 --> 00:24:07,529
fact with languages these things apply

00:24:04,919 --> 00:24:09,570
across the board the language it just

00:24:07,529 --> 00:24:12,330
releases the fundamental order which we

00:24:09,570 --> 00:24:14,070
understand inherently they don't teach

00:24:12,330 --> 00:24:19,110
us but they remind us of what we know

00:24:14,070 --> 00:24:21,299
and so to make a building or software

00:24:19,110 --> 00:24:23,549
egoless we we need to start with a void

00:24:21,299 --> 00:24:26,309
and we're able to do this when we don't

00:24:23,549 --> 00:24:28,620
say well I have to do XY and Z and all

00:24:26,309 --> 00:24:31,259
these things and so if I've ever found a

00:24:28,620 --> 00:24:34,049
better theory based argument for

00:24:31,259 --> 00:24:38,610
test-driven development it is this part

00:24:34,049 --> 00:24:40,259
of the book and so at this state your

00:24:38,610 --> 00:24:42,029
building or your software's life will

00:24:40,259 --> 00:24:43,860
come directly from your language and I'm

00:24:42,029 --> 00:24:45,149
not talking about Ruby or Java or C I'm

00:24:43,860 --> 00:24:46,619
talking about the way that you as a

00:24:45,149 --> 00:24:48,690
developer understand software and

00:24:46,619 --> 00:24:53,190
building software

00:24:48,690 --> 00:24:54,540
so you know we can have good patterns

00:24:53,190 --> 00:24:57,590
and something can still be awful

00:24:54,540 --> 00:24:59,790
software or an awful building and

00:24:57,590 --> 00:25:03,090
Alexander had these issues himself when

00:24:59,790 --> 00:25:04,110
he did some projects in in Mexico where

00:25:03,090 --> 00:25:06,030
he actually tried to apply these

00:25:04,110 --> 00:25:08,010
patterns and because of all the

00:25:06,030 --> 00:25:11,430
different people involved things didn't

00:25:08,010 --> 00:25:12,330
work out the way he had planned but for

00:25:11,430 --> 00:25:15,030
example let's talk about like the

00:25:12,330 --> 00:25:17,940
pattern alcove which you start off like

00:25:15,030 --> 00:25:19,530
I need to put an alcove here once you

00:25:17,940 --> 00:25:20,730
get into it it's it's something where

00:25:19,530 --> 00:25:22,110
you're not thinking oh I'm gonna use

00:25:20,730 --> 00:25:23,580
this pattern you're just like Oh an

00:25:22,110 --> 00:25:25,290
alcove would work well here because I

00:25:23,580 --> 00:25:27,090
understand the language of building

00:25:25,290 --> 00:25:30,060
better now

00:25:27,090 --> 00:25:32,310
apply that to software the yellow here

00:25:30,060 --> 00:25:33,270
not because it's the concept is not what

00:25:32,310 --> 00:25:37,350
you're thinking of but that it's

00:25:33,270 --> 00:25:39,060
appropriate so I really think it's

00:25:37,350 --> 00:25:41,610
important for developers to go and read

00:25:39,060 --> 00:25:44,340
this book instead of a pattern language

00:25:41,610 --> 00:25:47,700
or reading about patterns to understand

00:25:44,340 --> 00:25:49,500
now this is a thick theory book but why

00:25:47,700 --> 00:25:51,960
they exist where they come from how

00:25:49,500 --> 00:25:53,820
language evolves and how as a native

00:25:51,960 --> 00:25:55,800
speaker once you know their language the

00:25:53,820 --> 00:25:57,780
patterns themselves fade away and they

00:25:55,800 --> 00:26:00,810
become just part of how you think speak

00:25:57,780 --> 00:26:03,570
or develop so if you're really bold go

00:26:00,810 --> 00:26:04,950
pick up all three books they look great

00:26:03,570 --> 00:26:07,140
on the shelf and you can read the

00:26:04,950 --> 00:26:08,490
italics they have italic parts and non

00:26:07,140 --> 00:26:09,840
italic parts and so if you want to just

00:26:08,490 --> 00:26:11,040
get the concept of the book you hit all

00:26:09,840 --> 00:26:12,450
the italic parts you can get through it

00:26:11,040 --> 00:26:15,600
pretty quick and then you can go back

00:26:12,450 --> 00:26:20,820
and reread it for the pain and suffering

00:26:15,600 --> 00:26:22,110
aspect of it but it's it's it's more

00:26:20,820 --> 00:26:23,520
important here this is what I really

00:26:22,110 --> 00:26:25,590
want to hit home it's more important

00:26:23,520 --> 00:26:28,920
here to talk about the why so many we so

00:26:25,590 --> 00:26:32,610
much we talk about the how and I think

00:26:28,920 --> 00:26:33,930
that so much of the Y is lost why are we

00:26:32,610 --> 00:26:37,020
doing it this way why are we doing it

00:26:33,930 --> 00:26:38,730
that way but you know I think you'll

00:26:37,020 --> 00:26:39,870
find that it applies even though it's

00:26:38,730 --> 00:26:41,520
for architecture I think you apply is

00:26:39,870 --> 00:26:45,210
very heavily to software development as

00:26:41,520 --> 00:26:46,890
well so thank you I appreciate it and if

00:26:45,210 --> 00:26:50,940
you are interested in the book there's a

00:26:46,890 --> 00:26:52,530
code up there for a discount and we have

00:26:50,940 --> 00:26:55,200
like three minutes but if you guys want

00:26:52,530 --> 00:26:57,210
to you disagree with me have ideas

00:26:55,200 --> 00:26:58,590
things I missed I mean there's so much

00:26:57,210 --> 00:27:00,960
written in this area that there's not

00:26:58,590 --> 00:27:02,220
possible to go into any significant

00:27:00,960 --> 00:27:04,020
depth right now but

00:27:02,220 --> 00:27:07,610
I'd love to get an email from you be

00:27:04,020 --> 00:27:07,610
happy to talk about it thank you

00:27:42,770 --> 00:27:44,830

YouTube URL: https://www.youtube.com/watch?v=DJJbIjlLmLM


