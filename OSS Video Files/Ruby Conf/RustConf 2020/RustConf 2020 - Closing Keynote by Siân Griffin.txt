Title: RustConf 2020 - Closing Keynote by Siân Griffin
Publication date: 2021-04-19
Playlist: RustConf 2020
Description: 
	Closing Keynote by Siân Griffin
Captions: 
	00:00:16,080 --> 00:00:20,240
oh hi there

00:00:17,119 --> 00:00:21,439
i didn't see you want to tell you a

00:00:20,240 --> 00:00:24,640
story

00:00:21,439 --> 00:00:26,400
20 years ago in the year 2000 a game

00:00:24,640 --> 00:00:27,920
came out for the nintendo 64 called hey

00:00:26,400 --> 00:00:29,279
you pikachu

00:00:27,920 --> 00:00:32,160
for christmas that year i was hoping to

00:00:29,279 --> 00:00:34,800
get the special pikachu edition n64

00:00:32,160 --> 00:00:37,520
but my mom told me that in a few years i

00:00:34,800 --> 00:00:39,520
wouldn't even still be into pokemon

00:00:37,520 --> 00:00:40,800
here i am 20 years later still playing

00:00:39,520 --> 00:00:42,559
pokemon and today

00:00:40,800 --> 00:00:46,320
i want to share that love with you and

00:00:42,559 --> 00:00:46,320
mom this talk is for you

00:00:54,719 --> 00:00:59,280
hey everybody my name is sean griffin

00:00:57,520 --> 00:01:00,320
text encoding is hard so sometimes it's

00:00:59,280 --> 00:01:02,800
spelled like that

00:01:00,320 --> 00:01:05,040
let's my pronouns are they them let's

00:01:02,800 --> 00:01:06,560
talk about pokemon

00:01:05,040 --> 00:01:08,799
the first pokemon game was made by a

00:01:06,560 --> 00:01:10,400
small team for japanese audiences

00:01:08,799 --> 00:01:11,680
the game was made on a tiny budget and

00:01:10,400 --> 00:01:12,640
the programming team was only four

00:01:11,680 --> 00:01:14,720
people

00:01:12,640 --> 00:01:16,479
in 1996 pokemon red and green were

00:01:14,720 --> 00:01:18,479
released and sales vastly exceeded

00:01:16,479 --> 00:01:20,080
expectations

00:01:18,479 --> 00:01:22,080
later that year an updated version was

00:01:20,080 --> 00:01:23,759
released in japan with improved graphics

00:01:22,080 --> 00:01:25,040
and more polish

00:01:23,759 --> 00:01:27,119
after it was clear that this game was

00:01:25,040 --> 00:01:29,040
far more popular than anybody expected

00:01:27,119 --> 00:01:31,439
there was a mad rush to localize it for

00:01:29,040 --> 00:01:34,479
international audiences

00:01:31,439 --> 00:01:35,759
two years later in 1998 pokemon red and

00:01:34,479 --> 00:01:37,439
blue were released to the rest of the

00:01:35,759 --> 00:01:39,280
world and would go on to be the highest

00:01:37,439 --> 00:01:41,119
grossing media franchise of all time

00:01:39,280 --> 00:01:42,079
eclipsing even mickey mouse and hello

00:01:41,119 --> 00:01:43,840
kitty

00:01:42,079 --> 00:01:45,360
in fact it became so popular that even

00:01:43,840 --> 00:01:47,520
if you've never played pokemon

00:01:45,360 --> 00:01:49,119
i'll wait you've seen this one before

00:01:47,520 --> 00:01:52,399
this is an actual picture of ryan

00:01:49,119 --> 00:01:52,399
reynolds from 1998.

00:01:52,799 --> 00:01:57,040
okay not really this is pikachu by far

00:01:55,360 --> 00:01:58,560
the most famous pokemon but there was a

00:01:57,040 --> 00:02:00,640
close second

00:01:58,560 --> 00:02:01,920
this is missing though misigno is a

00:02:00,640 --> 00:02:03,200
glitch pokemon and you could only

00:02:01,920 --> 00:02:06,399
encounter it through a glitch

00:02:03,200 --> 00:02:07,520
but the thing is everybody knew about

00:02:06,399 --> 00:02:09,759
this

00:02:07,520 --> 00:02:10,720
one of the things i find so fascinating

00:02:09,759 --> 00:02:13,920
about missingno

00:02:10,720 --> 00:02:14,879
is just how widespread it was in a

00:02:13,920 --> 00:02:17,120
survey i ran

00:02:14,879 --> 00:02:18,239
87 percent of people who owned the game

00:02:17,120 --> 00:02:19,120
knew about the glitch when it was

00:02:18,239 --> 00:02:20,959
relevant

00:02:19,120 --> 00:02:22,560
and 80 percent of those people heard

00:02:20,959 --> 00:02:24,720
about it through word of mouth

00:02:22,560 --> 00:02:26,480
not the internet and there was good

00:02:24,720 --> 00:02:29,599
reason

00:02:26,480 --> 00:02:30,959
missingno could duplicate items now

00:02:29,599 --> 00:02:33,440
glitch had a lot of names

00:02:30,959 --> 00:02:34,480
the missingno glitch or the item duped

00:02:33,440 --> 00:02:35,840
glitch

00:02:34,480 --> 00:02:38,000
at my school it was called the rare

00:02:35,840 --> 00:02:40,319
candy glitch since most people used it

00:02:38,000 --> 00:02:41,840
to duplicate an item with that name

00:02:40,319 --> 00:02:43,280
it made your pokemon more powerful

00:02:41,840 --> 00:02:45,599
whenever you used it so it was a really

00:02:43,280 --> 00:02:46,879
desirable item to duplicate

00:02:45,599 --> 00:02:49,200
let's take a look at how you performed

00:02:46,879 --> 00:02:50,480
the glitch first

00:02:49,200 --> 00:02:52,000
we're going to start off in viridian

00:02:50,480 --> 00:02:52,560
city one of the earliest areas in the

00:02:52,000 --> 00:02:54,000
game

00:02:52,560 --> 00:02:55,280
and we talk to this old man he's going

00:02:54,000 --> 00:02:57,120
to ask if we're in a hurry and we're

00:02:55,280 --> 00:02:58,640
going to tell him no

00:02:57,120 --> 00:03:00,159
in response to that he's going to say oh

00:02:58,640 --> 00:03:01,840
cool why don't i

00:03:00,159 --> 00:03:04,239
show you a tutorial about how to catch

00:03:01,840 --> 00:03:04,879
pokemon and he's going to go into this

00:03:04,239 --> 00:03:06,480
battle and

00:03:04,879 --> 00:03:08,159
find a weedle and he's going to attempt

00:03:06,480 --> 00:03:09,280
to catch the weedle we actually are in a

00:03:08,159 --> 00:03:11,120
little bit of a hurry so we're not going

00:03:09,280 --> 00:03:13,120
to sit through and watch this

00:03:11,120 --> 00:03:15,360
next we need to fast travel to an area

00:03:13,120 --> 00:03:17,280
called cinnabar island

00:03:15,360 --> 00:03:19,840
now this being the generation one

00:03:17,280 --> 00:03:20,959
pokemon games the way fast travel worked

00:03:19,840 --> 00:03:25,040
is we transform

00:03:20,959 --> 00:03:25,040
into a bird and just fly away

00:03:25,200 --> 00:03:28,799
once we get there we want to go on to

00:03:26,799 --> 00:03:31,599
this water so we're gonna do that

00:03:28,799 --> 00:03:33,200
by opening up the menu and this being

00:03:31,599 --> 00:03:34,879
the generation one pokemon games we're

00:03:33,200 --> 00:03:37,440
going to transform

00:03:34,879 --> 00:03:38,080
into a giant seal thing i don't really

00:03:37,440 --> 00:03:39,360
know

00:03:38,080 --> 00:03:41,440
if we go up and down this coast and

00:03:39,360 --> 00:03:42,799
eventually we'll get a wild encounter

00:03:41,440 --> 00:03:44,720
if you played these games you might

00:03:42,799 --> 00:03:45,760
notice this pause right here is way

00:03:44,720 --> 00:03:46,720
longer than it's supposed to be and

00:03:45,760 --> 00:03:48,159
we're going to go into why that is a

00:03:46,720 --> 00:03:49,760
little later on

00:03:48,159 --> 00:03:51,599
so here we see our friend missing no

00:03:49,760 --> 00:03:52,879
it's level 168 which is higher than

00:03:51,599 --> 00:03:55,040
you're supposed to be able to encounter

00:03:52,879 --> 00:03:56,560
in the game the maximum level is 100.

00:03:55,040 --> 00:03:58,959
we're gonna immediately run away from

00:03:56,560 --> 00:04:00,799
missing no open up our inventory and

00:03:58,959 --> 00:04:02,000
when we go down to the sixth slot in our

00:04:00,799 --> 00:04:03,920
inventory which is where i had the rare

00:04:02,000 --> 00:04:07,360
candies we'll see that i now have

00:04:03,920 --> 00:04:07,360
flat flower too

00:04:08,080 --> 00:04:11,439
i had four rare candies in my inventory

00:04:09,760 --> 00:04:13,280
before this started and

00:04:11,439 --> 00:04:15,360
this clearly was not meant to render

00:04:13,280 --> 00:04:18,239
numbers larger than 99 so

00:04:15,360 --> 00:04:22,400
i guess the way it renders 13 is flour

00:04:18,239 --> 00:04:22,400
because 4 plus 128 is 132.

00:04:23,040 --> 00:04:26,400
if you've never seen this glitch before

00:04:24,639 --> 00:04:28,080
this probably seems like an extremely

00:04:26,400 --> 00:04:29,759
random sequence of events for such a

00:04:28,080 --> 00:04:32,240
specific outcome

00:04:29,759 --> 00:04:34,400
and it is let's break down each piece of

00:04:32,240 --> 00:04:36,639
this

00:04:34,400 --> 00:04:39,120
as with most major glitches there's no

00:04:36,639 --> 00:04:40,320
single bug that's responsible here

00:04:39,120 --> 00:04:42,080
this happens because of a bunch of

00:04:40,320 --> 00:04:44,080
different bugs and in most cases you

00:04:42,080 --> 00:04:45,680
can't even really call them bugs just

00:04:44,080 --> 00:04:47,919
properties of the code being used in

00:04:45,680 --> 00:04:49,680
unexpected ways

00:04:47,919 --> 00:04:51,360
now i want state up front i did not work

00:04:49,680 --> 00:04:52,960
on this game nor have i interviewed the

00:04:51,360 --> 00:04:54,960
programmers who did

00:04:52,960 --> 00:04:56,800
i have spent a lot of time looking at

00:04:54,960 --> 00:04:58,479
disassemblies of the game and i think we

00:04:56,800 --> 00:04:59,680
can infer a lot about what was intended

00:04:58,479 --> 00:05:01,280
from reading the code

00:04:59,680 --> 00:05:03,199
and knowing about the constraints that

00:05:01,280 --> 00:05:06,560
they worked under but i want to make it

00:05:03,199 --> 00:05:07,840
clear that a lot of this is speculation

00:05:06,560 --> 00:05:09,360
without the way let's start going

00:05:07,840 --> 00:05:10,160
through each of these each of the pieces

00:05:09,360 --> 00:05:11,199
of this glitch

00:05:10,160 --> 00:05:12,560
i'm going to go through them in the

00:05:11,199 --> 00:05:14,479
order that i think they were initially

00:05:12,560 --> 00:05:15,360
discovered

00:05:14,479 --> 00:05:16,880
so the first thing you might be

00:05:15,360 --> 00:05:18,800
wondering is what's up with those coast

00:05:16,880 --> 00:05:20,400
tiles why do we go to that spot

00:05:18,800 --> 00:05:22,160
specifically and go up and down the

00:05:20,400 --> 00:05:23,840
coast

00:05:22,160 --> 00:05:26,080
in the pokemon games there's sort of a

00:05:23,840 --> 00:05:28,000
grid system that the player occupies

00:05:26,080 --> 00:05:29,520
this is one tile that the player is

00:05:28,000 --> 00:05:29,840
standing on and they can move one tile

00:05:29,520 --> 00:05:32,800
up

00:05:29,840 --> 00:05:35,840
down left right etc this is that same

00:05:32,800 --> 00:05:38,400
tile when we remove the player from it

00:05:35,840 --> 00:05:38,880
now even though from a gameplay point of

00:05:38,400 --> 00:05:41,840
view

00:05:38,880 --> 00:05:43,840
this grid system occupies single tiles

00:05:41,840 --> 00:05:45,120
the code actually sees the game a little

00:05:43,840 --> 00:05:48,320
more fine-grained than that

00:05:45,120 --> 00:05:49,919
it sees this tile as four subtiles

00:05:48,320 --> 00:05:52,320
and for the tile the player is standing

00:05:49,919 --> 00:05:53,919
on these are the coordinates the upper

00:05:52,320 --> 00:05:55,199
left subtile of where the player is

00:05:53,919 --> 00:05:57,120
standing is coordinate eight

00:05:55,199 --> 00:05:59,440
eight and the bottom right is coordinate

00:05:57,120 --> 00:06:01,199
nine nine

00:05:59,440 --> 00:06:02,319
now whenever you're moving along these

00:06:01,199 --> 00:06:03,919
tiles in the game it's going to

00:06:02,319 --> 00:06:06,240
continuously be checking to see if you

00:06:03,919 --> 00:06:07,520
can encounter a wild pokemon

00:06:06,240 --> 00:06:09,039
there's two main ways that you could

00:06:07,520 --> 00:06:10,319
encounter pokemon in the first in the

00:06:09,039 --> 00:06:12,400
first generation of games

00:06:10,319 --> 00:06:14,479
you could be surfing on water or you

00:06:12,400 --> 00:06:15,840
could be walking through tall grass

00:06:14,479 --> 00:06:17,919
there was also fishing but it worked

00:06:15,840 --> 00:06:18,720
completely differently and is unrelated

00:06:17,919 --> 00:06:21,199
to this glitch so we're just gonna

00:06:18,720 --> 00:06:22,720
pretend it doesn't exist

00:06:21,199 --> 00:06:25,440
this is what the code for that looked

00:06:22,720 --> 00:06:26,560
like first thing we're gonna do is load

00:06:25,440 --> 00:06:28,479
up the tile at nine

00:06:26,560 --> 00:06:30,400
nine so the bottom right subtile where

00:06:28,479 --> 00:06:31,759
the player was standing

00:06:30,400 --> 00:06:33,759
then we're gonna check to see what kind

00:06:31,759 --> 00:06:36,160
of tile it is we need to figure out how

00:06:33,759 --> 00:06:37,840
likely we are to run into a wild pokemon

00:06:36,160 --> 00:06:39,600
if the tile's grass we're going to use

00:06:37,840 --> 00:06:40,080
the grass encounter rate for the current

00:06:39,600 --> 00:06:41,360
area

00:06:40,080 --> 00:06:42,800
if the tile's water we're going to use

00:06:41,360 --> 00:06:43,440
the water encounter rate for the current

00:06:42,800 --> 00:06:45,520
area

00:06:43,440 --> 00:06:47,039
and if it's neither then the player

00:06:45,520 --> 00:06:50,240
cannot have an encounter with a wild

00:06:47,039 --> 00:06:52,080
pokemon here so we just exit out

00:06:50,240 --> 00:06:53,919
then we actually need to compare this to

00:06:52,080 --> 00:06:55,120
a random number generator which isn't

00:06:53,919 --> 00:06:56,880
actually random but we're not going to

00:06:55,120 --> 00:06:58,240
get into that today

00:06:56,880 --> 00:07:00,000
to determine if we actually get an

00:06:58,240 --> 00:07:01,440
encounter i've com

00:07:00,000 --> 00:07:02,960
i've left that code commented out here

00:07:01,440 --> 00:07:05,759
because it's not actually relevant to

00:07:02,960 --> 00:07:07,599
why this bug occurs

00:07:05,759 --> 00:07:09,199
next they're going to load up the tile

00:07:07,599 --> 00:07:10,880
the player's standing on again

00:07:09,199 --> 00:07:12,720
but this time they're loading the bottom

00:07:10,880 --> 00:07:14,319
left subtile

00:07:12,720 --> 00:07:16,400
and then we're going to determine which

00:07:14,319 --> 00:07:17,840
kind of pokemon they can encounter

00:07:16,400 --> 00:07:19,280
so if the tile's water we're going to

00:07:17,840 --> 00:07:20,960
select one from the list of water

00:07:19,280 --> 00:07:22,639
pokemon for the area otherwise we're

00:07:20,960 --> 00:07:26,080
going to select one from

00:07:22,639 --> 00:07:28,319
the list of grass pokemon for the area

00:07:26,080 --> 00:07:29,599
and so because they load up the tile the

00:07:28,319 --> 00:07:31,440
player's standing on twice

00:07:29,599 --> 00:07:33,520
and the second time they use a different

00:07:31,440 --> 00:07:35,280
sub-tile whenever we're moving on

00:07:33,520 --> 00:07:35,759
whenever we're on a tile that looks like

00:07:35,280 --> 00:07:37,360
this

00:07:35,759 --> 00:07:39,599
where the right side is water and the

00:07:37,360 --> 00:07:40,880
left side is land every time it's doing

00:07:39,599 --> 00:07:43,199
one of these checks

00:07:40,880 --> 00:07:44,400
it thinks we can do an encounter because

00:07:43,199 --> 00:07:47,120
we're on water

00:07:44,400 --> 00:07:47,840
but because the bottom left subtile is

00:07:47,120 --> 00:07:52,000
not water

00:07:47,840 --> 00:07:53,599
it's going to load up the grass pokemon

00:07:52,000 --> 00:07:55,680
now when we look at this bug in rust i

00:07:53,599 --> 00:07:57,440
think this is the easiest

00:07:55,680 --> 00:07:58,960
bug that we're going to look at today to

00:07:57,440 --> 00:08:00,639
scoff at say this should have been

00:07:58,960 --> 00:08:01,520
caught in code review or i wouldn't have

00:08:00,639 --> 00:08:04,319
written this

00:08:01,520 --> 00:08:05,919
and it really does stand out in rust

00:08:04,319 --> 00:08:06,960
you're assigning the same variable twice

00:08:05,919 --> 00:08:08,319
and

00:08:06,960 --> 00:08:09,919
there it's on the same screen and it's

00:08:08,319 --> 00:08:11,680
different numbers like this just sticks

00:08:09,919 --> 00:08:12,879
out like a sore thumb to me

00:08:11,680 --> 00:08:14,879
but they didn't write this program in

00:08:12,879 --> 00:08:17,919
rust they wrote it in assembly

00:08:14,879 --> 00:08:19,919
and rust loses some of the nuance of

00:08:17,919 --> 00:08:21,440
what happened here you wouldn't have

00:08:19,919 --> 00:08:22,160
written this code in rust in the first

00:08:21,440 --> 00:08:24,720
place there's

00:08:22,160 --> 00:08:25,280
absolutely no reason that you would have

00:08:24,720 --> 00:08:28,479
assigned

00:08:25,280 --> 00:08:31,280
tile a second time

00:08:28,479 --> 00:08:34,159
but in assembly you don't just have

00:08:31,280 --> 00:08:35,680
however many local variables you want

00:08:34,159 --> 00:08:37,440
when you write a program in rust the

00:08:35,680 --> 00:08:39,120
compiler is going to determine where to

00:08:37,440 --> 00:08:40,000
store every variable that you write it's

00:08:39,120 --> 00:08:42,640
either going to

00:08:40,000 --> 00:08:45,040
assign it to a register sort of like a

00:08:42,640 --> 00:08:47,680
global variable that your cpu uses

00:08:45,040 --> 00:08:49,360
or it's going to put it on the stack now

00:08:47,680 --> 00:08:50,480
in the pokemon games they did have a

00:08:49,360 --> 00:08:54,000
stack but it was

00:08:50,480 --> 00:08:56,160
really tiny only 207 bytes

00:08:54,000 --> 00:08:58,080
so they basically never used it unless

00:08:56,160 --> 00:09:00,880
it was absolutely necessary

00:08:58,080 --> 00:09:03,360
the main place it was used was for audio

00:09:00,880 --> 00:09:05,920
playback

00:09:03,360 --> 00:09:07,040
now in this bit of code that i commented

00:09:05,920 --> 00:09:08,480
out

00:09:07,040 --> 00:09:10,800
this is where a lot of the context gets

00:09:08,480 --> 00:09:12,800
lost first of all these two lines

00:09:10,800 --> 00:09:14,399
just don't appear on the same screen

00:09:12,800 --> 00:09:16,000
that in the assembly version of this

00:09:14,399 --> 00:09:17,600
they're actually about 50 lines apart so

00:09:16,000 --> 00:09:18,959
you wouldn't see them both at the same

00:09:17,600 --> 00:09:21,120
time

00:09:18,959 --> 00:09:22,080
that alone to me makes it much more

00:09:21,120 --> 00:09:23,360
reasonable that this would have just

00:09:22,080 --> 00:09:24,800
slipped through code review if i can't

00:09:23,360 --> 00:09:26,320
see both of these at the same time i'm

00:09:24,800 --> 00:09:29,680
much more likely to just not

00:09:26,320 --> 00:09:31,360
spot that now

00:09:29,680 --> 00:09:33,279
the game boy used a variant of what's

00:09:31,360 --> 00:09:35,040
called z80 assembly

00:09:33,279 --> 00:09:37,279
and we're not going to go too into too

00:09:35,040 --> 00:09:38,880
much into the minutia of what that means

00:09:37,279 --> 00:09:40,480
what's important about uh the

00:09:38,880 --> 00:09:40,880
differences between various assemblies

00:09:40,480 --> 00:09:42,399
is

00:09:40,880 --> 00:09:44,320
different types of assemblies have a

00:09:42,399 --> 00:09:47,200
different number of general purpose

00:09:44,320 --> 00:09:48,800
registers the sort of global variables

00:09:47,200 --> 00:09:52,240
that your cpu can use for

00:09:48,800 --> 00:09:54,880
literally anything and on the z80

00:09:52,240 --> 00:09:55,519
they only had four registers that were

00:09:54,880 --> 00:09:57,920
truly

00:09:55,519 --> 00:09:58,720
general purpose and in this code that i

00:09:57,920 --> 00:10:02,160
commented out

00:09:58,720 --> 00:10:03,519
they used all of them so they had to

00:10:02,160 --> 00:10:05,040
load up the tile again they could have

00:10:03,519 --> 00:10:06,480
stuck it on the stack maybe but you

00:10:05,040 --> 00:10:08,079
don't want this to be the one place

00:10:06,480 --> 00:10:09,279
where oops we don't have enough stack

00:10:08,079 --> 00:10:11,680
anymore

00:10:09,279 --> 00:10:13,920
so they just reloaded it and that seems

00:10:11,680 --> 00:10:15,760
perfectly reasonable to me

00:10:13,920 --> 00:10:17,200
frankly if you had to work on his

00:10:15,760 --> 00:10:18,079
constraint could you write your whole

00:10:17,200 --> 00:10:19,680
program with only

00:10:18,079 --> 00:10:21,760
four global mutable variables and

00:10:19,680 --> 00:10:24,800
nothing else and avoid bugs like this

00:10:21,760 --> 00:10:25,920
i sure as hell couldn't okay so the end

00:10:24,800 --> 00:10:28,560
result of all this is

00:10:25,920 --> 00:10:30,079
on these tiles specifically the game

00:10:28,560 --> 00:10:31,120
tries to have us encounter a wild

00:10:30,079 --> 00:10:33,040
pokemon

00:10:31,120 --> 00:10:35,040
because it's water but we instead

00:10:33,040 --> 00:10:38,240
encounter grass pokemon but that's not

00:10:35,040 --> 00:10:39,760
by itself particularly useful

00:10:38,240 --> 00:10:41,360
so let's move on to the second piece of

00:10:39,760 --> 00:10:44,000
this

00:10:41,360 --> 00:10:45,360
whenever you enter a new area the game

00:10:44,000 --> 00:10:47,200
has to load up

00:10:45,360 --> 00:10:48,640
the encounter tables for the area that

00:10:47,200 --> 00:10:50,320
you're currently at there's one spot in

00:10:48,640 --> 00:10:53,760
memory that's just this is the current

00:10:50,320 --> 00:10:55,120
area's grass encounter information

00:10:53,760 --> 00:10:56,800
so the first thing it's going to do is

00:10:55,120 --> 00:10:57,760
grab how likely you are to encounter

00:10:56,800 --> 00:10:59,279
grass pokemon

00:10:57,760 --> 00:11:00,959
in the current area it's going to grab

00:10:59,279 --> 00:11:02,720
that from just some global section of

00:11:00,959 --> 00:11:04,800
rom i've made that a constant here in

00:11:02,720 --> 00:11:06,320
the in the rust translation

00:11:04,800 --> 00:11:07,680
and that's going to check if that number

00:11:06,320 --> 00:11:09,200
is greater than zero and if it is it's

00:11:07,680 --> 00:11:11,600
going to copy the encounter table over

00:11:09,200 --> 00:11:12,959
and it does the same thing for water

00:11:11,600 --> 00:11:14,640
what's important here though is what

00:11:12,959 --> 00:11:15,680
happens when the grass encounter rate is

00:11:14,640 --> 00:11:18,959
zero

00:11:15,680 --> 00:11:20,640
when zero we just don't do anything

00:11:18,959 --> 00:11:22,160
it doesn't zero out the the table

00:11:20,640 --> 00:11:25,440
doesn't replace it with some dummy data

00:11:22,160 --> 00:11:27,680
it just leaves whatever was there before

00:11:25,440 --> 00:11:29,360
so this means that in these areas with

00:11:27,680 --> 00:11:32,240
these coast tiles

00:11:29,360 --> 00:11:33,760
as long as that area doesn't itself have

00:11:32,240 --> 00:11:35,360
grass pokemon

00:11:33,760 --> 00:11:37,279
we can use this to encounter grass

00:11:35,360 --> 00:11:38,800
pokemon from other areas

00:11:37,279 --> 00:11:41,040
and that's why we specifically do this

00:11:38,800 --> 00:11:42,000
glitch on cinnabar island as opposed to

00:11:41,040 --> 00:11:44,640
anywhere else in the game

00:11:42,000 --> 00:11:46,880
that has these coast tiles with the land

00:11:44,640 --> 00:11:48,880
on the left side

00:11:46,880 --> 00:11:52,000
because we can fast travel to any town

00:11:48,880 --> 00:11:54,320
and cinnabar island is a town

00:11:52,000 --> 00:11:56,959
it's easy for us to fast travel there

00:11:54,320 --> 00:11:58,639
and get to this coast in particular

00:11:56,959 --> 00:12:00,560
without ever passing through an area

00:11:58,639 --> 00:12:02,480
with grass pokemon

00:12:00,560 --> 00:12:04,160
so that means as long as we can use the

00:12:02,480 --> 00:12:07,200
game's fast travel system

00:12:04,160 --> 00:12:08,320
we can use this glitch to encounter the

00:12:07,200 --> 00:12:11,760
grass pokemon from

00:12:08,320 --> 00:12:13,519
any other area now that by itself

00:12:11,760 --> 00:12:15,760
isn't necessarily the most useful thing

00:12:13,519 --> 00:12:17,040
in the world it was used for something

00:12:15,760 --> 00:12:18,240
very specific

00:12:17,040 --> 00:12:20,000
there's a place in the game called the

00:12:18,240 --> 00:12:21,360
safari zone where there's a bunch of

00:12:20,000 --> 00:12:23,680
really rare pokemon

00:12:21,360 --> 00:12:25,920
that you kind of want to get but it uses

00:12:23,680 --> 00:12:28,720
its own special encounter mechanic that

00:12:25,920 --> 00:12:30,079
was really annoying and everybody hated

00:12:28,720 --> 00:12:32,160
but with this glitch you could just go

00:12:30,079 --> 00:12:33,920
into the safari zone travel to cinebar

00:12:32,160 --> 00:12:35,600
island and go on these coasts

00:12:33,920 --> 00:12:37,279
and then you would be able to encounter

00:12:35,600 --> 00:12:39,920
the pokemon from the safari zone

00:12:37,279 --> 00:12:41,680
with the normal uh with the normal wild

00:12:39,920 --> 00:12:43,200
pokemon encounter mechanics

00:12:41,680 --> 00:12:44,880
and this was really useful and people

00:12:43,200 --> 00:12:46,480
this wasn't as widespread as missing no

00:12:44,880 --> 00:12:48,320
but a lot of people did know about it

00:12:46,480 --> 00:12:50,480
and this was called the the fight safari

00:12:48,320 --> 00:12:52,639
pokemon glitch

00:12:50,480 --> 00:12:55,040
we don't just want to catch safari's own

00:12:52,639 --> 00:12:58,800
pokemon like that's cool and all

00:12:55,040 --> 00:13:00,800
we want more we want 128 rare candies

00:12:58,800 --> 00:13:02,320
if we're going to do that we need to do

00:13:00,800 --> 00:13:03,360
this glitch when the grass encounter

00:13:02,320 --> 00:13:06,399
table contains

00:13:03,360 --> 00:13:08,480
information that isn't a real pokemon

00:13:06,399 --> 00:13:09,680
encounter table

00:13:08,480 --> 00:13:12,000
now when this glitch was originally

00:13:09,680 --> 00:13:12,399
discovered it actually wasn't done the

00:13:12,000 --> 00:13:15,440
way

00:13:12,399 --> 00:13:17,279
i demonstrated it to you it was done by

00:13:15,440 --> 00:13:19,760
trading with an npc

00:13:17,279 --> 00:13:22,560
in the lab on cinebar island npc stands

00:13:19,760 --> 00:13:24,079
for non-player character

00:13:22,560 --> 00:13:26,320
the pokemon games have a system where

00:13:24,079 --> 00:13:28,240
you can send a pokemon to another

00:13:26,320 --> 00:13:30,079
trainer and get one back in return and

00:13:28,240 --> 00:13:31,680
there are a few npc characters who will

00:13:30,079 --> 00:13:34,160
do this without you having to have any

00:13:31,680 --> 00:13:36,240
friends in real life

00:13:34,160 --> 00:13:37,920
now this game was really constrained on

00:13:36,240 --> 00:13:40,720
memory

00:13:37,920 --> 00:13:42,160
and everything had a very specific spot

00:13:40,720 --> 00:13:44,800
in memory where it was stored and

00:13:42,160 --> 00:13:46,720
oftentimes those addresses were reused

00:13:44,800 --> 00:13:48,480
and this is one of those cases

00:13:46,720 --> 00:13:49,760
whenever you traded with another player

00:13:48,480 --> 00:13:52,480
or npc

00:13:49,760 --> 00:13:56,079
that person's name was stored in the

00:13:52,480 --> 00:13:58,079
same spot as the grass and counter table

00:13:56,079 --> 00:13:59,279
so to see why this is useful to us let's

00:13:58,079 --> 00:14:02,560
look at

00:13:59,279 --> 00:14:04,880
why at how encounter tables are actually

00:14:02,560 --> 00:14:06,560
stored in memory

00:14:04,880 --> 00:14:08,560
so like i said everything in this game

00:14:06,560 --> 00:14:10,399
just has a very specific address and the

00:14:08,560 --> 00:14:12,399
address for the grass encounter table

00:14:10,399 --> 00:14:15,760
for the current area the player is in

00:14:12,399 --> 00:14:18,079
is d887 that zero x means it's hex

00:14:15,760 --> 00:14:20,160
notation

00:14:18,079 --> 00:14:21,920
now this is a table with 10 entries the

00:14:20,160 --> 00:14:23,040
first byte is the encounter rate how

00:14:21,920 --> 00:14:25,519
likely you are to run

00:14:23,040 --> 00:14:26,320
into a wild pokemon the lower this

00:14:25,519 --> 00:14:27,680
number is

00:14:26,320 --> 00:14:29,519
the more likely you are to have an

00:14:27,680 --> 00:14:31,199
encounter

00:14:29,519 --> 00:14:32,639
then we have uh for each of these 10

00:14:31,199 --> 00:14:34,240
slots a pair of two bytes

00:14:32,639 --> 00:14:36,160
the first byte is the level of the

00:14:34,240 --> 00:14:37,040
pokemon in that slot and the second byte

00:14:36,160 --> 00:14:39,279
is the id

00:14:37,040 --> 00:14:41,199
of the pokemon in that slot and each of

00:14:39,279 --> 00:14:42,639
these slots have a fixed percentage

00:14:41,199 --> 00:14:44,320
chance of running into them so the first

00:14:42,639 --> 00:14:45,839
two are about 20 percent the next one's

00:14:44,320 --> 00:14:48,800
about 15 percent and then about 10

00:14:45,839 --> 00:14:50,399
percent and so on and so forth

00:14:48,800 --> 00:14:52,560
so let's take a look at what a real

00:14:50,399 --> 00:14:55,199
encounter table looked like

00:14:52,560 --> 00:14:56,720
address cfa3 you'll find the encounter

00:14:55,199 --> 00:14:58,079
table for an early game area called

00:14:56,720 --> 00:14:59,839
mount moon

00:14:58,079 --> 00:15:01,360
so we copy over the encounter rate 10 is

00:14:59,839 --> 00:15:02,639
really low so we're likely to run into a

00:15:01,360 --> 00:15:04,480
lot of pokemon

00:15:02,639 --> 00:15:05,760
and then three most common pokemon that

00:15:04,480 --> 00:15:07,680
you'll run into is

00:15:05,760 --> 00:15:10,959
the pokemon zubat and then after that

00:15:07,680 --> 00:15:12,639
that looks like a rocky zubat to me

00:15:10,959 --> 00:15:14,800
i don't know so then we finish this once

00:15:12,639 --> 00:15:16,160
we copy over this whole encounter table

00:15:14,800 --> 00:15:18,079
well actually for this one in particular

00:15:16,160 --> 00:15:20,800
something might stand out to you

00:15:18,079 --> 00:15:21,120
it's all zubat i don't know i guess the

00:15:20,800 --> 00:15:22,560
game

00:15:21,120 --> 00:15:24,800
developers were like hey should we maybe

00:15:22,560 --> 00:15:26,240
put some pokemon here and like oops nope

00:15:24,800 --> 00:15:28,560
all we've got is zubat

00:15:26,240 --> 00:15:29,360
that's all we got sorry and so kids

00:15:28,560 --> 00:15:31,440
would go through this

00:15:29,360 --> 00:15:32,880
area and every two steps they would see

00:15:31,440 --> 00:15:33,839
another zubat

00:15:32,880 --> 00:15:35,279
and they've got and they would go

00:15:33,839 --> 00:15:37,279
sleeping in their dreams all they could

00:15:35,279 --> 00:15:39,680
see is these horns of zubat and they

00:15:37,279 --> 00:15:39,680
would hear

00:15:39,759 --> 00:15:43,360
actually i'm sorry y'all can can you

00:15:40,959 --> 00:15:44,320
hold on one second hey hey have you not

00:15:43,360 --> 00:15:46,800
seen the news

00:15:44,320 --> 00:15:49,279
there is a pandemic going on outside

00:15:46,800 --> 00:15:51,759
come on

00:15:49,279 --> 00:15:51,759
thank you

00:15:52,639 --> 00:15:56,639
sorry about that soup hats i swear

00:15:56,880 --> 00:16:00,079
all right so as i said once we once

00:15:59,360 --> 00:16:01,759
we've got the

00:16:00,079 --> 00:16:03,600
encounter cable copied over this is what

00:16:01,759 --> 00:16:05,120
it looks like for mount moon

00:16:03,600 --> 00:16:06,800
but of course we don't want to run into

00:16:05,120 --> 00:16:08,720
a lot of zubats because well that would

00:16:06,800 --> 00:16:10,639
just make me sad

00:16:08,720 --> 00:16:13,199
so let's look at what happens when we

00:16:10,639 --> 00:16:16,079
copy over this trainer's name

00:16:13,199 --> 00:16:17,360
now all npcs i can trade with you in the

00:16:16,079 --> 00:16:20,639
game are for some reason

00:16:17,360 --> 00:16:21,920
just named trainer and nothing else

00:16:20,639 --> 00:16:24,399
so we're going to look at what happens

00:16:21,920 --> 00:16:26,399
when you copy over the string trainer

00:16:24,399 --> 00:16:27,519
now pokemon blue used its own custom

00:16:26,399 --> 00:16:30,160
text encoding

00:16:27,519 --> 00:16:30,639
so trainer is actually only a single

00:16:30,160 --> 00:16:32,320
byte

00:16:30,639 --> 00:16:34,320
there is a control character that is

00:16:32,320 --> 00:16:37,759
print the word trainer

00:16:34,320 --> 00:16:38,320
and then the end of name marker control

00:16:37,759 --> 00:16:41,360
character

00:16:38,320 --> 00:16:42,639
is 80 in decimal so we copy this over we

00:16:41,360 --> 00:16:44,079
copy over trainer which is the first

00:16:42,639 --> 00:16:45,279
byte and that just gets ignored because

00:16:44,079 --> 00:16:48,320
we're using the water encounter

00:16:45,279 --> 00:16:50,079
anyway and then 80 happens to be the

00:16:48,320 --> 00:16:51,600
idea of missing no

00:16:50,079 --> 00:16:53,360
and so this is a really great way to do

00:16:51,600 --> 00:16:54,000
the glitch because you get an encounter

00:16:53,360 --> 00:16:55,920
table that's

00:16:54,000 --> 00:16:57,519
just all missing though all level 80

00:16:55,920 --> 00:16:58,880
missing knows specifically

00:16:57,519 --> 00:17:00,480
and it's great but the problem with

00:16:58,880 --> 00:17:01,440
doing it this way is that when you trade

00:17:00,480 --> 00:17:03,519
with an npc

00:17:01,440 --> 00:17:04,880
you can only do it once and once you've

00:17:03,519 --> 00:17:07,760
traded with that npc

00:17:04,880 --> 00:17:09,360
you can never do it again so you can you

00:17:07,760 --> 00:17:10,880
can encounter a lot of missingno's this

00:17:09,360 --> 00:17:12,160
way but as soon as you go to an area

00:17:10,880 --> 00:17:14,640
with grass pokemon you're not going to

00:17:12,160 --> 00:17:15,839
be able to do the glitch this way again

00:17:14,640 --> 00:17:16,880
so we want something that we can

00:17:15,839 --> 00:17:19,679
actually repeat because we don't just

00:17:16,880 --> 00:17:20,319
want 128 rare candies we want 128 rare

00:17:19,679 --> 00:17:22,640
candies

00:17:20,319 --> 00:17:25,280
as many times as we want because rare

00:17:22,640 --> 00:17:26,880
candies are delicious

00:17:25,280 --> 00:17:28,960
so that's where the old man glitch comes

00:17:26,880 --> 00:17:29,840
into play now it's called the old man

00:17:28,960 --> 00:17:33,280
glitch because

00:17:29,840 --> 00:17:36,080
well his name is old man

00:17:33,280 --> 00:17:37,120
and it's really this what his name

00:17:36,080 --> 00:17:38,640
specifically is

00:17:37,120 --> 00:17:41,679
isn't that important what's important

00:17:38,640 --> 00:17:43,760
here is that he has a name

00:17:41,679 --> 00:17:45,280
because this game was optimized for code

00:17:43,760 --> 00:17:46,240
size they didn't want to have they

00:17:45,280 --> 00:17:47,919
didn't want to uh

00:17:46,240 --> 00:17:49,360
have the code be too large on the

00:17:47,919 --> 00:17:51,440
cartridge or they might have to

00:17:49,360 --> 00:17:52,799
double the size of the rom available to

00:17:51,440 --> 00:17:54,480
them on the cartridge and

00:17:52,799 --> 00:17:56,080
given the budget they were working under

00:17:54,480 --> 00:17:57,440
they just couldn't afford to do that

00:17:56,080 --> 00:17:59,679
so everything was optimized for code

00:17:57,440 --> 00:18:01,760
size so this tutorial

00:17:59,679 --> 00:18:03,600
could have been implemented as go to a

00:18:01,760 --> 00:18:05,360
completely separate piece of code that

00:18:03,600 --> 00:18:07,440
goes through this tutorial

00:18:05,360 --> 00:18:09,039
or you could do what they did which is

00:18:07,440 --> 00:18:09,760
have it go through the normal battle

00:18:09,039 --> 00:18:11,360
code

00:18:09,760 --> 00:18:13,280
and just add like three or four

00:18:11,360 --> 00:18:13,760
conditionals to the battle code of hey

00:18:13,280 --> 00:18:16,559
is the

00:18:13,760 --> 00:18:18,320
is this the tutorial if so don't accept

00:18:16,559 --> 00:18:20,240
player input here

00:18:18,320 --> 00:18:21,760
now the problem with doing that is

00:18:20,240 --> 00:18:24,160
there's stuff there's code in there that

00:18:21,760 --> 00:18:25,520
does things like print the player's name

00:18:24,160 --> 00:18:26,559
but since the player is not in control

00:18:25,520 --> 00:18:28,720
here we don't want to print the player's

00:18:26,559 --> 00:18:30,400
name we want to print old man

00:18:28,720 --> 00:18:31,760
so they caught they need to copy over

00:18:30,400 --> 00:18:33,039
old man to where the player's name is

00:18:31,760 --> 00:18:34,640
stored

00:18:33,039 --> 00:18:36,720
which means they need to store the

00:18:34,640 --> 00:18:38,559
player's name somewhere

00:18:36,720 --> 00:18:42,720
and where did they decide to do it you

00:18:38,559 --> 00:18:44,480
guessed it the grass encounter table

00:18:42,720 --> 00:18:47,039
so for this demonstration i set my name

00:18:44,480 --> 00:18:47,919
to hi sean and let's take a look at what

00:18:47,039 --> 00:18:50,320
happens when we

00:18:47,919 --> 00:18:51,840
interpret that as an encounter table so

00:18:50,320 --> 00:18:53,200
the h is going to get copied over into

00:18:51,840 --> 00:18:54,799
the rate and that just doesn't matter

00:18:53,200 --> 00:18:57,120
again because that's just ignored

00:18:54,799 --> 00:18:58,880
and then i is 168 a is hey that's a

00:18:57,120 --> 00:19:00,640
missing no

00:18:58,880 --> 00:19:03,360
and then another 168. and hey another

00:19:00,640 --> 00:19:04,799
missing no and then we got level 174 and

00:19:03,360 --> 00:19:06,400
wouldn't you know it they're all missing

00:19:04,799 --> 00:19:09,120
though it's almost like i

00:19:06,400 --> 00:19:10,799
specifically picked a name that only had

00:19:09,120 --> 00:19:11,600
missingno characters in it to make it

00:19:10,799 --> 00:19:13,840
easier to

00:19:11,600 --> 00:19:16,400
to demonstrate this glitch to y'all what

00:19:13,840 --> 00:19:17,840
a coincidence

00:19:16,400 --> 00:19:20,640
now of course each of these missing note

00:19:17,840 --> 00:19:21,679
came from a different letter in my name

00:19:20,640 --> 00:19:23,280
which is weird because those are

00:19:21,679 --> 00:19:24,320
different ids and so therefore they

00:19:23,280 --> 00:19:27,039
should be different pokemon they

00:19:24,320 --> 00:19:28,559
shouldn't just all be missing no

00:19:27,039 --> 00:19:30,559
let's talk about what even is a

00:19:28,559 --> 00:19:31,919
missingno

00:19:30,559 --> 00:19:34,320
contrary to what you might think it's

00:19:31,919 --> 00:19:36,400
not a single pokemon

00:19:34,320 --> 00:19:38,400
they're actually 39 distinct pokemon

00:19:36,400 --> 00:19:41,679
which are called missingno

00:19:38,400 --> 00:19:43,440
it's not just reading garbage data

00:19:41,679 --> 00:19:44,799
even though it's sprite is clearly

00:19:43,440 --> 00:19:46,640
garbage data

00:19:44,799 --> 00:19:49,440
it has a well-defined name it's printing

00:19:46,640 --> 00:19:50,960
missing no there not just random garbage

00:19:49,440 --> 00:19:53,200
and it's not like in the code they could

00:19:50,960 --> 00:19:55,039
say hey is this garbage if so print

00:19:53,200 --> 00:19:57,600
missing no you can't really detect

00:19:55,039 --> 00:19:59,520
what garbage data is at runtime so this

00:19:57,600 --> 00:20:02,720
is clearly in a table somewhere that

00:19:59,520 --> 00:20:04,320
it's expecting to print this word out

00:20:02,720 --> 00:20:06,720
a lot of other attributes that has are

00:20:04,320 --> 00:20:08,559
well defined as well

00:20:06,720 --> 00:20:10,480
to understand why some of its attributes

00:20:08,559 --> 00:20:12,400
are garbage but others aren't

00:20:10,480 --> 00:20:14,880
we need to see how pokemon are stored in

00:20:12,400 --> 00:20:16,240
the code

00:20:14,880 --> 00:20:17,679
when most people think of a list of

00:20:16,240 --> 00:20:19,280
pokemon they think of the order that

00:20:17,679 --> 00:20:22,559
they appear in the pokedex

00:20:19,280 --> 00:20:24,559
the in-game encyclopedia

00:20:22,559 --> 00:20:26,960
every pokemon has a number associated

00:20:24,559 --> 00:20:28,400
with it and they're loosely ordered in

00:20:26,960 --> 00:20:30,320
the order that you would encounter them

00:20:28,400 --> 00:20:31,520
in the game

00:20:30,320 --> 00:20:34,400
that's not how they're stored in the

00:20:31,520 --> 00:20:36,000
game when most people think of pokemon

00:20:34,400 --> 00:20:38,159
number one they think of bulbasaur

00:20:36,000 --> 00:20:39,919
because that's the first in the pokedex

00:20:38,159 --> 00:20:42,799
but actually the pokemon with the id of

00:20:39,919 --> 00:20:45,200
one is called rydon

00:20:42,799 --> 00:20:46,960
in the code most of the data related to

00:20:45,200 --> 00:20:49,840
the pokemon is stored in the order they

00:20:46,960 --> 00:20:52,000
were originally created

00:20:49,840 --> 00:20:54,240
the game was supposed to ship with 190

00:20:52,000 --> 00:20:56,640
pokemon at one point in development

00:20:54,240 --> 00:20:58,000
40 of those got either cut or saved for

00:20:56,640 --> 00:21:00,840
another generation

00:20:58,000 --> 00:21:02,000
and then one got added at the very last

00:21:00,840 --> 00:21:03,919
second

00:21:02,000 --> 00:21:05,520
and so missing no is what's stored in

00:21:03,919 --> 00:21:07,520
the slots where the cut pokemon were

00:21:05,520 --> 00:21:09,520
supposed to be

00:21:07,520 --> 00:21:10,880
now for the most part those entries

00:21:09,520 --> 00:21:13,840
where mystic knows data is

00:21:10,880 --> 00:21:16,080
is just zeroed out it's all zeros there

00:21:13,840 --> 00:21:18,240
are some exceptions like its name

00:21:16,080 --> 00:21:19,120
but for example it's pokedex idea zero

00:21:18,240 --> 00:21:20,240
it's cry

00:21:19,120 --> 00:21:23,039
the sound that it makes when you

00:21:20,240 --> 00:21:25,919
encounter it is almost always

00:21:23,039 --> 00:21:27,600
zeroed out so for anything that's

00:21:25,919 --> 00:21:28,640
ordered by internal id we're gonna get

00:21:27,600 --> 00:21:31,039
well-defined

00:21:28,640 --> 00:21:32,880
but zeroed data but for anything that's

00:21:31,039 --> 00:21:34,640
stored in pokedex order

00:21:32,880 --> 00:21:36,480
we're going to get garbage let's look at

00:21:34,640 --> 00:21:37,600
why that is

00:21:36,480 --> 00:21:40,159
one of the things that's stored in

00:21:37,600 --> 00:21:41,120
pokedex order is the pokemon based stats

00:21:40,159 --> 00:21:43,039
table

00:21:41,120 --> 00:21:44,480
this includes things like its attack and

00:21:43,039 --> 00:21:47,280
defense and hp

00:21:44,480 --> 00:21:48,480
what it can evolve into what moves it

00:21:47,280 --> 00:21:50,320
can learn

00:21:48,480 --> 00:21:53,360
and importantly it also contains the

00:21:50,320 --> 00:21:54,880
pointer to the sprite

00:21:53,360 --> 00:21:56,320
so the first thing that the game is

00:21:54,880 --> 00:21:58,559
going to do is look up the pokemon's

00:21:56,320 --> 00:21:59,679
pokedex number from its internal id and

00:21:58,559 --> 00:22:03,120
for missing no that's

00:21:59,679 --> 00:22:03,760
zero now because pokedex numbers start

00:22:03,120 --> 00:22:05,520
at one

00:22:03,760 --> 00:22:09,120
they subtract one from that to turn it

00:22:05,520 --> 00:22:12,480
into an index into an array

00:22:09,120 --> 00:22:14,240
this is a unsigned 8-bit integer

00:22:12,480 --> 00:22:16,080
so this is going to underflow and we're

00:22:14,240 --> 00:22:17,600
going to get 255.

00:22:16,080 --> 00:22:19,919
or you could think about this like we

00:22:17,600 --> 00:22:25,200
were trying to get the pokedex entry for

00:22:19,919 --> 00:22:25,200
a hypothetical 256th pokemon

00:22:25,440 --> 00:22:29,440
now the array that we're indexing into

00:22:26,960 --> 00:22:32,159
only has 151 elements in it so

00:22:29,440 --> 00:22:34,880
we read way past the end of the array

00:22:32,159 --> 00:22:37,120
and in the case of missingno's sprite

00:22:34,880 --> 00:22:38,480
or ends up reading is the middle of some

00:22:37,120 --> 00:22:42,080
data for npc

00:22:38,480 --> 00:22:43,919
trainer is in an area called route 17.

00:22:42,080 --> 00:22:46,080
and when you interpret that as a pointer

00:22:43,919 --> 00:22:47,679
it points to some code related to the

00:22:46,080 --> 00:22:49,600
safari zone

00:22:47,679 --> 00:22:51,520
and so missingno's glitched out sprite

00:22:49,600 --> 00:22:53,280
is what you see

00:22:51,520 --> 00:22:55,840
when you interpret that code as if it

00:22:53,280 --> 00:22:55,840
were an image

00:22:56,320 --> 00:23:00,080
but most data in the game isn't stored

00:22:58,080 --> 00:23:03,039
in pokedex order that's the exception

00:23:00,080 --> 00:23:04,960
not the rule ironically the pokedex

00:23:03,039 --> 00:23:07,039
itself is one of the things that isn't

00:23:04,960 --> 00:23:08,960
stored in pokedex order

00:23:07,039 --> 00:23:10,400
so missingno even has a valid pokedex

00:23:08,960 --> 00:23:13,039
entry well

00:23:10,400 --> 00:23:14,799
almost you can see it's got a name and a

00:23:13,039 --> 00:23:16,159
description and a height that looks like

00:23:14,799 --> 00:23:19,200
a placeholder but then the weight is

00:23:16,159 --> 00:23:21,919
just sort of a random number

00:23:19,200 --> 00:23:23,600
its entry wasn't localized and the

00:23:21,919 --> 00:23:25,039
structure of pokedex entries in the

00:23:23,600 --> 00:23:26,400
japanese version of the game

00:23:25,039 --> 00:23:28,400
was a little bit different than the

00:23:26,400 --> 00:23:29,840
english version

00:23:28,400 --> 00:23:31,520
if we look at the japanese version

00:23:29,840 --> 00:23:33,520
though we can see oh yes no there's

00:23:31,520 --> 00:23:34,400
clearly valid data here for this version

00:23:33,520 --> 00:23:35,520
of the game

00:23:34,400 --> 00:23:38,080
it's the question mark question mark

00:23:35,520 --> 00:23:40,159
question mark pokemon its weight is

00:23:38,080 --> 00:23:42,640
10 its height is also 10 because height

00:23:40,159 --> 00:23:44,559
was in decimeters for some reason

00:23:42,640 --> 00:23:47,520
and then that description translates to

00:23:44,559 --> 00:23:48,880
comment to be written

00:23:47,520 --> 00:23:50,960
there are some differences between the

00:23:48,880 --> 00:23:54,559
different missing nose though

00:23:50,960 --> 00:23:56,720
in fact a lot of them have unique data

00:23:54,559 --> 00:23:58,240
the cry that a pokemon has the sound it

00:23:56,720 --> 00:23:59,679
makes when you first encounter it

00:23:58,240 --> 00:24:01,440
is stored as three bytes one that's just

00:23:59,679 --> 00:24:03,360
sort of the base sound and these are

00:24:01,440 --> 00:24:04,640
shared between multiple pokemon

00:24:03,360 --> 00:24:06,400
and then another byte for a pitch

00:24:04,640 --> 00:24:09,279
adjustment and then another byte for

00:24:06,400 --> 00:24:11,520
speed adjustment and nine of the missing

00:24:09,279 --> 00:24:13,440
notes have cries that aren't zeros

00:24:11,520 --> 00:24:15,440
and a few of those actually have bass

00:24:13,440 --> 00:24:16,159
sounds that aren't heard anywhere else

00:24:15,440 --> 00:24:17,679
in the game

00:24:16,159 --> 00:24:19,760
and this supports that missing note some

00:24:17,679 --> 00:24:21,279
of these missing no's are in fact

00:24:19,760 --> 00:24:23,360
pokemon that were just cut during

00:24:21,279 --> 00:24:25,200
development

00:24:23,360 --> 00:24:27,200
there's also a few places in the game

00:24:25,200 --> 00:24:29,440
where they needed to display a sprite

00:24:27,200 --> 00:24:31,360
as if it were a pokemon but the sprite

00:24:29,440 --> 00:24:33,120
they want to display isn't associated

00:24:31,360 --> 00:24:34,480
with any real pokemon

00:24:33,120 --> 00:24:36,799
and so some of the missing no entries

00:24:34,480 --> 00:24:38,080
are where they stored those sprites

00:24:36,799 --> 00:24:41,200
these would only show up if you had a

00:24:38,080 --> 00:24:44,480
lowercase w x or y in your name though

00:24:41,200 --> 00:24:46,400
so most folks never saw these

00:24:44,480 --> 00:24:48,240
this is really important which version

00:24:46,400 --> 00:24:49,679
of missingno you saw was based on your

00:24:48,240 --> 00:24:52,080
name

00:24:49,679 --> 00:24:53,600
this is also why if you did this glitch

00:24:52,080 --> 00:24:55,679
in addition to missing no

00:24:53,600 --> 00:24:57,840
you would see some high-level real

00:24:55,679 --> 00:24:59,840
pokemon

00:24:57,840 --> 00:25:02,240
printable characters in pokemon blue's

00:24:59,840 --> 00:25:05,360
text encoding start at 128

00:25:02,240 --> 00:25:06,960
sort of the opposite of ascii so no

00:25:05,360 --> 00:25:08,640
matter what your name was

00:25:06,960 --> 00:25:10,799
the characters that would end up in the

00:25:08,640 --> 00:25:12,159
level spots for the encounter table

00:25:10,799 --> 00:25:13,600
would be higher than you're supposed to

00:25:12,159 --> 00:25:16,880
be able to reach in the game they would

00:25:13,600 --> 00:25:16,880
always be higher than 100

00:25:17,120 --> 00:25:20,720
you could also get some glitched trainer

00:25:18,720 --> 00:25:22,320
battles this way but those would only

00:25:20,720 --> 00:25:24,080
appear if you had punctuation in your

00:25:22,320 --> 00:25:25,679
name so most people were unaware of that

00:25:24,080 --> 00:25:27,200
i certainly had no clue that was a thing

00:25:25,679 --> 00:25:29,200
until i started doing research for this

00:25:27,200 --> 00:25:31,279
talk

00:25:29,200 --> 00:25:33,039
now you might be asking if the encounter

00:25:31,279 --> 00:25:36,640
table is based on your name

00:25:33,039 --> 00:25:38,159
why could everybody do this glitch

00:25:36,640 --> 00:25:41,600
surely it'd be possible to have a name

00:25:38,159 --> 00:25:43,760
that didn't map to missingno at all

00:25:41,600 --> 00:25:44,799
this is sort of true it was possible to

00:25:43,760 --> 00:25:46,480
have a name that didn't include

00:25:44,799 --> 00:25:48,080
missingno

00:25:46,480 --> 00:25:51,440
but even if that was the case you could

00:25:48,080 --> 00:25:52,880
still get 128 rare candies

00:25:51,440 --> 00:25:54,480
it was pretty unlikely that you would

00:25:52,880 --> 00:25:55,120
have a name that didn't include

00:25:54,480 --> 00:25:57,840
missingno

00:25:55,120 --> 00:25:57,840
for a few reasons

00:25:58,720 --> 00:26:03,120
the control character used for the end

00:26:00,320 --> 00:26:05,520
of your name was stored as 80 in decimal

00:26:03,120 --> 00:26:06,320
which is one of the ideas of missing now

00:26:05,520 --> 00:26:08,320
so if your name

00:26:06,320 --> 00:26:12,000
was an even number of characters you

00:26:08,320 --> 00:26:12,000
could always encounter a missingno

00:26:12,640 --> 00:26:16,000
a lot of players didn't even pick their

00:26:14,240 --> 00:26:18,400
own name they just used one of the

00:26:16,000 --> 00:26:20,480
preset ones the game offered you

00:26:18,400 --> 00:26:22,400
by pure luck every single one of these

00:26:20,480 --> 00:26:24,799
names has the right characters for a

00:26:22,400 --> 00:26:26,960
missing to encounter

00:26:24,799 --> 00:26:29,760
except it wasn't even luck because the

00:26:26,960 --> 00:26:32,880
missingno characters were really common

00:26:29,760 --> 00:26:35,520
they included uppercase s h and m

00:26:32,880 --> 00:26:36,640
and most lowercase vowels so the odds of

00:26:35,520 --> 00:26:38,960
you having one of these in the right

00:26:36,640 --> 00:26:41,919
place were really high

00:26:38,960 --> 00:26:43,520
but even then there was a catch-all

00:26:41,919 --> 00:26:45,440
every custom name could at least

00:26:43,520 --> 00:26:48,000
encounter missingno's sister pokemon

00:26:45,440 --> 00:26:49,679
tick m and we call it tick m because

00:26:48,000 --> 00:26:51,120
those are the only characters in its

00:26:49,679 --> 00:26:54,320
name that you can actually

00:26:51,120 --> 00:26:54,880
say now even though they have the same

00:26:54,320 --> 00:26:57,760
sprite

00:26:54,880 --> 00:26:59,279
tick m is different as you can probably

00:26:57,760 --> 00:27:01,279
tell from the weird

00:26:59,279 --> 00:27:02,720
characters in its name and its decision

00:27:01,279 --> 00:27:07,840
not to wear a mask

00:27:02,720 --> 00:27:07,840
everything about tick m is garbage

00:27:08,559 --> 00:27:11,600
the graphics that appear in its name are

00:27:10,240 --> 00:27:13,600
going to be based on things like your

00:27:11,600 --> 00:27:15,120
party's stats or your position on the

00:27:13,600 --> 00:27:18,080
map

00:27:15,120 --> 00:27:19,279
tick m is what you get for internal id0

00:27:18,080 --> 00:27:21,200
so you're going to get garbage

00:27:19,279 --> 00:27:22,720
even for data that isn't in pokedex

00:27:21,200 --> 00:27:23,760
order even when it's looking up by

00:27:22,720 --> 00:27:26,080
internal id

00:27:23,760 --> 00:27:29,600
it's gonna underflow and read past the

00:27:26,080 --> 00:27:30,960
end of whatever data it's trying to read

00:27:29,600 --> 00:27:33,279
now tikam had some interesting

00:27:30,960 --> 00:27:33,679
differences from missingno it's cry

00:27:33,279 --> 00:27:35,919
being

00:27:33,679 --> 00:27:37,679
garbage data would randomly change based

00:27:35,919 --> 00:27:40,159
on what screen you're on

00:27:37,679 --> 00:27:41,520
it could evolve into kangaskhan so you

00:27:40,159 --> 00:27:44,559
know i guess this is what a baby

00:27:41,520 --> 00:27:44,559
kangaskhan looks like

00:27:44,799 --> 00:27:48,720
you could also lock up your game by

00:27:46,320 --> 00:27:50,960
catching it but if your goal was to get

00:27:48,720 --> 00:27:54,880
just get 128 rare candies it didn't

00:27:50,960 --> 00:27:56,799
matter if you saw a missingno or tick m

00:27:54,880 --> 00:27:59,360
so now let's talk about why the sixth

00:27:56,799 --> 00:28:01,360
item in your inventory gets duplicated

00:27:59,360 --> 00:28:04,559
this has to do with what happens after

00:28:01,360 --> 00:28:04,559
you encounter a pokemon

00:28:05,200 --> 00:28:09,520
this all comes back to that pokedex that

00:28:07,200 --> 00:28:10,960
we mentioned earlier

00:28:09,520 --> 00:28:12,799
its function in the game is to keep

00:28:10,960 --> 00:28:16,240
track of every pokemon you've seen

00:28:12,799 --> 00:28:18,320
or caught any pokemon that appears on

00:28:16,240 --> 00:28:20,000
this list is one that you've seen before

00:28:18,320 --> 00:28:22,399
and the little ball icon next to its

00:28:20,000 --> 00:28:25,039
name means it's been caught

00:28:22,399 --> 00:28:26,320
this is stored in memory as a bitmap one

00:28:25,039 --> 00:28:28,000
bit per pokemon

00:28:26,320 --> 00:28:29,760
it's sort of like an array of booleans

00:28:28,000 --> 00:28:30,320
but instead of each entry in the array

00:28:29,760 --> 00:28:32,960
taking up

00:28:30,320 --> 00:28:35,919
one byte it takes up one bit so one byte

00:28:32,960 --> 00:28:38,000
represents eight entries in the array

00:28:35,919 --> 00:28:40,960
now as you might have guessed this array

00:28:38,000 --> 00:28:42,480
is stored in pokedex order

00:28:40,960 --> 00:28:44,399
so when you encounter a missingno it

00:28:42,480 --> 00:28:48,240
tries to mark that you've encountered a

00:28:44,399 --> 00:28:50,399
hypothetical 256th pokemon

00:28:48,240 --> 00:28:52,000
but since there are only 151 pokemon in

00:28:50,399 --> 00:28:55,120
the game this ends up writing

00:28:52,000 --> 00:28:57,919
way past the space used for this

00:28:55,120 --> 00:28:59,520
the bitmap has to be rounded up to a

00:28:57,919 --> 00:29:00,880
number that's divisible by eight since

00:28:59,520 --> 00:29:03,200
it has to fit in a byte

00:29:00,880 --> 00:29:04,720
so what ends up happening here is

00:29:03,200 --> 00:29:07,360
there's 152

00:29:04,720 --> 00:29:09,440
bits for real pokemon and where it ends

00:29:07,360 --> 00:29:10,640
up trying to write is the high bit of

00:29:09,440 --> 00:29:14,559
the 13th

00:29:10,640 --> 00:29:14,559
byte after the end of your pokedex

00:29:14,640 --> 00:29:20,960
now the inventory is what's stored

00:29:17,039 --> 00:29:22,799
immediately after your pokedex in ram

00:29:20,960 --> 00:29:25,200
the inventory is stored as one byte for

00:29:22,799 --> 00:29:27,760
the number of items that you have

00:29:25,200 --> 00:29:29,360
and then for each item there's one byte

00:29:27,760 --> 00:29:32,159
for its id

00:29:29,360 --> 00:29:33,840
and then one byte for its quantity so

00:29:32,159 --> 00:29:34,720
that means the byte that it tries to

00:29:33,840 --> 00:29:37,279
write to

00:29:34,720 --> 00:29:40,159
corresponds with the six the quantity of

00:29:37,279 --> 00:29:42,000
the sixth item in your inventory

00:29:40,159 --> 00:29:43,679
and another way of saying it sets the

00:29:42,000 --> 00:29:44,799
high bit of the quantity of the sixth

00:29:43,679 --> 00:29:48,240
item in your inventory

00:29:44,799 --> 00:29:52,159
is it adds 128 of that item as long as

00:29:48,240 --> 00:29:52,159
you had less than 128 before

00:29:52,240 --> 00:29:55,600
now one other side effect of

00:29:53,440 --> 00:29:57,279
encountering missingno is if you had

00:29:55,600 --> 00:29:58,159
beaten the game when you performed the

00:29:57,279 --> 00:29:59,679
glitch

00:29:58,159 --> 00:30:01,600
you'd notice that the place where it

00:29:59,679 --> 00:30:02,399
stored the team that you used to beat

00:30:01,600 --> 00:30:04,960
the game

00:30:02,399 --> 00:30:07,200
was now corrupted this is caused by

00:30:04,960 --> 00:30:08,399
misigno's sprite

00:30:07,200 --> 00:30:09,840
remember when i pointed out that the

00:30:08,399 --> 00:30:11,279
pause at the start of the fight was

00:30:09,840 --> 00:30:14,640
abnormally long

00:30:11,279 --> 00:30:16,320
this corruption is why that happens

00:30:14,640 --> 00:30:18,320
due to the amount of space they needed

00:30:16,320 --> 00:30:20,960
to decompress these sprites

00:30:18,320 --> 00:30:22,559
they can't do it on the console's ram so

00:30:20,960 --> 00:30:25,279
instead they do it on the cartridge's

00:30:22,559 --> 00:30:26,799
persistent storage

00:30:25,279 --> 00:30:28,640
the space they use for this is large

00:30:26,799 --> 00:30:30,000
enough for a 7x7 sprite

00:30:28,640 --> 00:30:32,399
which is the largest that appears in the

00:30:30,000 --> 00:30:34,960
game but the data

00:30:32,399 --> 00:30:37,520
that represents missing no sprite says

00:30:34,960 --> 00:30:39,120
that it's 13 by 13.

00:30:37,520 --> 00:30:40,640
so they write way past the end of that

00:30:39,120 --> 00:30:42,640
buffer and the next thing

00:30:40,640 --> 00:30:44,320
on the cartridge's storage is the hall

00:30:42,640 --> 00:30:46,240
of fame

00:30:44,320 --> 00:30:47,360
but because missingno sprite was read

00:30:46,240 --> 00:30:49,360
from rom not

00:30:47,360 --> 00:30:51,440
ram that means that the sprite data

00:30:49,360 --> 00:30:52,080
never changed and so everybody who did

00:30:51,440 --> 00:30:53,679
this glitch

00:30:52,080 --> 00:30:56,080
would see the same corrupted hall of

00:30:53,679 --> 00:30:57,279
fame although you wouldn't know it

00:30:56,080 --> 00:30:59,039
immediately because

00:30:57,279 --> 00:31:00,720
some of the names of the pokemon would

00:30:59,039 --> 00:31:03,600
include things like the control

00:31:00,720 --> 00:31:05,760
character for printing your rival's name

00:31:03,600 --> 00:31:07,679
so a lot of people would see an ammonite

00:31:05,760 --> 00:31:08,880
named gary because gary was a really

00:31:07,679 --> 00:31:10,960
common rival name

00:31:08,880 --> 00:31:13,200
but it would it would change a little

00:31:10,960 --> 00:31:13,200
bit

00:31:13,760 --> 00:31:17,120
now this bug would have been avoided if

00:31:15,679 --> 00:31:20,159
there was some bounds checking

00:31:17,120 --> 00:31:21,200
in the sprite decompression code like i

00:31:20,159 --> 00:31:23,279
mentioned before

00:31:21,200 --> 00:31:25,679
everything in this game was optimized

00:31:23,279 --> 00:31:27,760
for code size

00:31:25,679 --> 00:31:29,440
if you're only dealing with a known set

00:31:27,760 --> 00:31:31,200
of trusted inputs

00:31:29,440 --> 00:31:32,640
omitting these checks seems perfectly

00:31:31,200 --> 00:31:34,320
reasonable

00:31:32,640 --> 00:31:36,480
when the code received real sprites it

00:31:34,320 --> 00:31:38,960
always behaved perfectly

00:31:36,480 --> 00:31:40,080
the only reason this code misbehaved was

00:31:38,960 --> 00:31:42,559
because of a completely

00:31:40,080 --> 00:31:46,399
unrelated bug that caused it to get

00:31:42,559 --> 00:31:48,399
garbage data

00:31:46,399 --> 00:31:50,000
now those are the only two abnormal

00:31:48,399 --> 00:31:50,799
effects of encountering a missingno

00:31:50,000 --> 00:31:53,840
compared to

00:31:50,799 --> 00:31:55,440
encountering any other pokemon remember

00:31:53,840 --> 00:31:57,360
that the main way this glitch spread was

00:31:55,440 --> 00:31:58,559
through word of mouth

00:31:57,360 --> 00:32:01,120
that means that there were a lot of

00:31:58,559 --> 00:32:04,640
untrue or half true rumors that spread

00:32:01,120 --> 00:32:06,240
around i'd like to debunk a few of those

00:32:04,640 --> 00:32:07,919
the biggest piece of misinformation you

00:32:06,240 --> 00:32:09,519
might have heard is don't catch

00:32:07,919 --> 00:32:12,240
missingno it'll corrupt your save

00:32:09,519 --> 00:32:13,679
and this is just straight up false

00:32:12,240 --> 00:32:14,320
there's no ill effects of catching

00:32:13,679 --> 00:32:16,080
missingno

00:32:14,320 --> 00:32:18,480
and there's really nothing about it that

00:32:16,080 --> 00:32:19,440
can't be saved normally

00:32:18,480 --> 00:32:21,360
i think the source of this

00:32:19,440 --> 00:32:24,480
misinformation was a very specific

00:32:21,360 --> 00:32:26,159
problem that can arise with tick m

00:32:24,480 --> 00:32:28,080
in the games you can bring up to six

00:32:26,159 --> 00:32:29,519
pokemon with you in your party

00:32:28,080 --> 00:32:31,919
if you catch another one when your party

00:32:29,519 --> 00:32:33,519
is full it gets sent to a storage system

00:32:31,919 --> 00:32:35,360
and when you open up this storage system

00:32:33,519 --> 00:32:38,240
later the game has to recompute the

00:32:35,360 --> 00:32:40,480
stats for all of those stored pokemon

00:32:38,240 --> 00:32:42,159
and there's a bug in this calculation

00:32:40,480 --> 00:32:43,600
where if it tries to compute them for a

00:32:42,159 --> 00:32:46,399
level zero pokemon

00:32:43,600 --> 00:32:48,000
it gets into an infinite loop now you're

00:32:46,399 --> 00:32:49,519
never supposed to

00:32:48,000 --> 00:32:51,760
be able to encounter a level zero

00:32:49,519 --> 00:32:52,799
pokemon but if you did this glitch with

00:32:51,760 --> 00:32:54,640
a custom name

00:32:52,799 --> 00:32:56,880
you could always encounter a level zero

00:32:54,640 --> 00:32:59,760
tick m it would always occupy the bottom

00:32:56,880 --> 00:33:02,000
two spots in that encounter table

00:32:59,760 --> 00:33:03,840
and since at the point you did this

00:33:02,000 --> 00:33:05,519
glitch you probably had six pokemon in

00:33:03,840 --> 00:33:06,880
your party that means it probably went

00:33:05,519 --> 00:33:08,840
to storage so

00:33:06,880 --> 00:33:10,880
i think this was the source of that

00:33:08,840 --> 00:33:12,000
rumor

00:33:10,880 --> 00:33:13,760
another thing you might have heard is

00:33:12,000 --> 00:33:16,480
that catching missingno would cause all

00:33:13,760 --> 00:33:18,799
sorts of graphical glitches

00:33:16,480 --> 00:33:20,960
nintendo even put out a statement saying

00:33:18,799 --> 00:33:21,840
to try releasing it to fix the scrambled

00:33:20,960 --> 00:33:23,600
graphics

00:33:21,840 --> 00:33:25,279
if that doesn't work you need to restart

00:33:23,600 --> 00:33:27,840
your game and just all of this is

00:33:25,279 --> 00:33:27,840
nonsense

00:33:28,159 --> 00:33:32,320
there's a specific mirroring effect you

00:33:30,320 --> 00:33:33,760
can cause if you view the stat screen

00:33:32,320 --> 00:33:36,080
from missingno

00:33:33,760 --> 00:33:38,799
what happens here is on the stat screen

00:33:36,080 --> 00:33:40,240
the sprite for the pokemon is displayed

00:33:38,799 --> 00:33:42,480
mirrored and there's a byte that sets

00:33:40,240 --> 00:33:43,919
that says just render the sprite mirror

00:33:42,480 --> 00:33:45,919
and for whatever reason when you view

00:33:43,919 --> 00:33:48,640
this screen for missing no it doesn't

00:33:45,919 --> 00:33:50,960
set that byte back to zero afterwards

00:33:48,640 --> 00:33:52,080
but only front-facing sprites are

00:33:50,960 --> 00:33:54,320
supposed to be rendered

00:33:52,080 --> 00:33:55,600
mirrored so anytime it's a sprite that

00:33:54,320 --> 00:33:58,720
represents something's back

00:33:55,600 --> 00:34:00,159
it gets this weird jagged effect but

00:33:58,720 --> 00:34:02,320
this would go away if you

00:34:00,159 --> 00:34:03,919
if you viewed the stat screen for any

00:34:02,320 --> 00:34:07,120
other pokemon because it would set that

00:34:03,919 --> 00:34:08,879
byte back to zero correctly

00:34:07,120 --> 00:34:10,320
there were some bigger glitches if you

00:34:08,879 --> 00:34:11,760
had missingno in the follow-up game

00:34:10,320 --> 00:34:14,800
pokemon and yellow

00:34:11,760 --> 00:34:16,320
but in that game they also fixed the bug

00:34:14,800 --> 00:34:17,839
that let you encounter missingno in the

00:34:16,320 --> 00:34:20,560
first place so i don't think that's the

00:34:17,839 --> 00:34:22,800
source of this

00:34:20,560 --> 00:34:24,639
finally encountering missingno wouldn't

00:34:22,800 --> 00:34:26,879
save your game

00:34:24,639 --> 00:34:28,560
this is a really weird rumor and i'm not

00:34:26,879 --> 00:34:30,240
i'm surprised it even got started

00:34:28,560 --> 00:34:32,079
because it's so easy to verify it's

00:34:30,240 --> 00:34:34,079
false you just do a missing no encounter

00:34:32,079 --> 00:34:36,079
and reset without saving and see yeah no

00:34:34,079 --> 00:34:38,240
that did not save

00:34:36,079 --> 00:34:40,399
i think the source of this one is an n64

00:34:38,240 --> 00:34:42,480
game called pokemon stadium

00:34:40,399 --> 00:34:44,240
it included an emulator and let you play

00:34:42,480 --> 00:34:45,119
the first two generations of pokemon

00:34:44,240 --> 00:34:47,599
games

00:34:45,119 --> 00:34:48,240
and whenever the cartridge's storage was

00:34:47,599 --> 00:34:49,760
written to

00:34:48,240 --> 00:34:52,480
in that emulator it would display the

00:34:49,760 --> 00:34:54,560
word saved on screen

00:34:52,480 --> 00:34:56,159
so when that buffer overrun happened

00:34:54,560 --> 00:34:58,800
that corrupted the hall of fame

00:34:56,159 --> 00:35:00,800
that would cause the n64s emulator to

00:34:58,800 --> 00:35:04,160
display saved on screen and i think

00:35:00,800 --> 00:35:04,160
that's where this one came from

00:35:04,720 --> 00:35:08,320
so now we've seen every piece of this

00:35:06,160 --> 00:35:10,640
glitch we can see that it was

00:35:08,320 --> 00:35:11,760
just a bunch of small seemingly benign

00:35:10,640 --> 00:35:15,040
interactions between

00:35:11,760 --> 00:35:16,880
unrelated bits of code no individual

00:35:15,040 --> 00:35:19,200
piece of this glitch stands out to me as

00:35:16,880 --> 00:35:22,560
insane or something that obviously would

00:35:19,200 --> 00:35:22,560
have been stopped in code review

00:35:23,359 --> 00:35:26,960
when you combine all this together you

00:35:25,280 --> 00:35:28,720
get one of the most famous glitches of

00:35:26,960 --> 00:35:30,320
all time

00:35:28,720 --> 00:35:31,839
but it's not the result of some

00:35:30,320 --> 00:35:34,079
horrendously bad coding

00:35:31,839 --> 00:35:35,280
or lack of qa or any of the other things

00:35:34,079 --> 00:35:37,359
you might hear people say about this

00:35:35,280 --> 00:35:40,640
game

00:35:37,359 --> 00:35:43,440
every piece of this glitch by itself

00:35:40,640 --> 00:35:44,000
was relatively benign or just due to

00:35:43,440 --> 00:35:46,560
completely

00:35:44,000 --> 00:35:50,000
unrelated parts of the code interacting

00:35:46,560 --> 00:35:52,000
in ways that nobody would have expected

00:35:50,000 --> 00:35:55,760
and this was hand written in assembly

00:35:52,000 --> 00:35:59,280
under massive space constraints

00:35:55,760 --> 00:36:00,960
every instruction mattered

00:35:59,280 --> 00:36:02,560
i certainly don't think i would have

00:36:00,960 --> 00:36:04,000
done any better than they did

00:36:02,560 --> 00:36:06,720
and i don't think anybody watching this

00:36:04,000 --> 00:36:06,720
would have either

00:36:06,960 --> 00:36:10,800
a phrase that i've heard from folks

00:36:08,640 --> 00:36:11,119
making fun of the glitches in this game

00:36:10,800 --> 00:36:13,440
is

00:36:11,119 --> 00:36:14,880
completely broken i think we should just

00:36:13,440 --> 00:36:16,320
remove that from our vocabularies

00:36:14,880 --> 00:36:18,000
entirely

00:36:16,320 --> 00:36:19,920
in this case and many others where you

00:36:18,000 --> 00:36:21,680
would try and use that terminology

00:36:19,920 --> 00:36:23,359
it's like more likely the software is

00:36:21,680 --> 00:36:25,040
developed under some constraints that

00:36:23,359 --> 00:36:26,400
you weren't aware of

00:36:25,040 --> 00:36:28,240
and you wouldn't do better in the same

00:36:26,400 --> 00:36:29,920
circumstances

00:36:28,240 --> 00:36:31,520
sure these days they're less likely to

00:36:29,920 --> 00:36:32,240
be technological constraints but every

00:36:31,520 --> 00:36:33,599
single one of us

00:36:32,240 --> 00:36:35,040
worked on a project where two days

00:36:33,599 --> 00:36:36,640
before the deadline the requirements

00:36:35,040 --> 00:36:38,400
change out from underneath you

00:36:36,640 --> 00:36:40,480
or your company suddenly pivots and now

00:36:38,400 --> 00:36:41,839
you'd make now you do medical services

00:36:40,480 --> 00:36:45,119
and you have to figure out how to make a

00:36:41,839 --> 00:36:45,119
bunch of code relevant for that

00:36:46,560 --> 00:36:51,760
to me though a lot of this glitch just

00:36:48,400 --> 00:36:53,680
boiled down to because assembly

00:36:51,760 --> 00:36:55,359
it's really easy for us to take the

00:36:53,680 --> 00:36:58,240
technologies we have at our disposal

00:36:55,359 --> 00:37:00,560
today for granted

00:36:58,240 --> 00:37:01,359
today code size is rarely a hard

00:37:00,560 --> 00:37:02,880
constraint

00:37:01,359 --> 00:37:04,640
you're unlikely to ever work on a

00:37:02,880 --> 00:37:07,359
project where this binary

00:37:04,640 --> 00:37:09,760
has to be 27k or smaller or we can't

00:37:07,359 --> 00:37:11,680
ship at all

00:37:09,760 --> 00:37:13,760
when code size matters today it's

00:37:11,680 --> 00:37:17,119
usually because of cpu caches and it's a

00:37:13,760 --> 00:37:18,880
thing we find while optimizing our code

00:37:17,119 --> 00:37:20,320
and we run our code on machines powerful

00:37:18,880 --> 00:37:21,680
enough to just include all sorts of

00:37:20,320 --> 00:37:23,839
safety checks and never give it a second

00:37:21,680 --> 00:37:26,240
thought

00:37:23,839 --> 00:37:27,200
but in 1996 just use rust wasn't an

00:37:26,240 --> 00:37:29,760
option

00:37:27,200 --> 00:37:30,800
and even using c wasn't an option i'm

00:37:29,760 --> 00:37:33,520
really glad that we don't live in that

00:37:30,800 --> 00:37:33,520
world anymore

00:37:34,160 --> 00:37:37,520
there's a really high quality

00:37:35,599 --> 00:37:38,960
disassembly of the game available which

00:37:37,520 --> 00:37:40,480
i used to research this talk called

00:37:38,960 --> 00:37:41,920
poker red

00:37:40,480 --> 00:37:43,520
it doesn't have the comments in it that

00:37:41,920 --> 00:37:44,640
the real source code would have but this

00:37:43,520 --> 00:37:46,240
team took the

00:37:44,640 --> 00:37:47,920
the machine code from the game

00:37:46,240 --> 00:37:49,359
disassembled it and went from there and

00:37:47,920 --> 00:37:50,400
figured out where all of the labels

00:37:49,359 --> 00:37:52,240
would have been and where they would

00:37:50,400 --> 00:37:52,880
have used macros and turned it into

00:37:52,240 --> 00:37:55,200
something

00:37:52,880 --> 00:37:56,079
that resembles real source code somebody

00:37:55,200 --> 00:37:58,640
would have written

00:37:56,079 --> 00:37:59,520
it's a amazing project and it was

00:37:58,640 --> 00:38:01,359
invaluable

00:37:59,520 --> 00:38:04,000
for preparing this talk so a huge shout

00:38:01,359 --> 00:38:05,599
out to the team who worked on that

00:38:04,000 --> 00:38:07,200
i also want to shout out the organizers

00:38:05,599 --> 00:38:09,280
this has been a great conference

00:38:07,200 --> 00:38:10,960
and doing a virtual conference like this

00:38:09,280 --> 00:38:12,880
is a lot of work

00:38:10,960 --> 00:38:14,720
i want to give an up a special shout out

00:38:12,880 --> 00:38:15,359
to nell shamrell who led the program

00:38:14,720 --> 00:38:17,119
committee

00:38:15,359 --> 00:38:19,280
and made it a point to do multiple

00:38:17,119 --> 00:38:20,480
run-throughs of every talk with the

00:38:19,280 --> 00:38:22,720
speakers before they

00:38:20,480 --> 00:38:24,640
before they presented them that that

00:38:22,720 --> 00:38:25,920
means that you got a much higher quality

00:38:24,640 --> 00:38:28,800
conference than you would have otherwise

00:38:25,920 --> 00:38:30,800
so thank you so much

00:38:28,800 --> 00:38:32,480
finally this talk was co-authored with

00:38:30,800 --> 00:38:33,520
my partner tess and she also helped me

00:38:32,480 --> 00:38:35,040
with a ton of the slides

00:38:33,520 --> 00:38:36,400
tess i love you thank you so much for

00:38:35,040 --> 00:38:38,800
working on this talk with me it was a

00:38:36,400 --> 00:38:38,800
blast

00:38:39,599 --> 00:38:43,119
if you have any questions i will be in

00:38:41,440 --> 00:38:44,400
the discord immediately after this

00:38:43,119 --> 00:38:45,440
if you're watching if you're watching

00:38:44,400 --> 00:38:46,240
this in europe if you're watching this

00:38:45,440 --> 00:38:48,720
in europe live

00:38:46,240 --> 00:38:50,000
go to bed it's like 3 a.m what are you

00:38:48,720 --> 00:38:51,359
doing

00:38:50,000 --> 00:38:52,880
if you're watching a recording and you

00:38:51,359 --> 00:38:53,760
want to ask me a question here's my

00:38:52,880 --> 00:38:55,359
contact info

00:38:53,760 --> 00:38:57,200
feel free to reach out and i'm happy to

00:38:55,359 --> 00:39:01,839
answer any questions you might have

00:38:57,200 --> 00:39:01,839

YouTube URL: https://www.youtube.com/watch?v=bP_gILs1dPo


