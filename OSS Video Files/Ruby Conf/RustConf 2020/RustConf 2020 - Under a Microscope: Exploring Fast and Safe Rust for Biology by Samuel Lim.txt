Title: RustConf 2020 - Under a Microscope: Exploring Fast and Safe Rust for Biology by Samuel Lim
Publication date: 2021-04-19
Playlist: RustConf 2020
Description: 
	Under a Microscope: Exploring Fast and Safe Rust for Biology by Samuel Lim

Ever wondered what goes on behind the scenes of breakthroughs in understanding proteins, viruses, our own bodies, and more?

Take a deep dive as we journey through some of the workings of computational biology at large, along with its advantages and pitfalls. In this talk, we will see how Rust bridges the biological sciences with safe, performant, and scalable systems, and discuss how you can play a role even as a fresh Rustacean.
Captions: 
	00:00:16,960 --> 00:00:21,760
hello and welcome to

00:00:18,320 --> 00:00:24,000
rus comp 2020 my name is samuel lim

00:00:21,760 --> 00:00:24,960
i'm a developer and computational

00:00:24,000 --> 00:00:27,039
biologist

00:00:24,960 --> 00:00:29,679
as i perform research in computational

00:00:27,039 --> 00:00:30,160
biology and i develop software systems

00:00:29,679 --> 00:00:33,440
to help

00:00:30,160 --> 00:00:34,160
automate and optimize it and we'll be

00:00:33,440 --> 00:00:36,480
looking at

00:00:34,160 --> 00:00:39,200
fast and safe rust for biology and

00:00:36,480 --> 00:00:42,480
computational biology

00:00:39,200 --> 00:00:43,440
as a note computational biology and

00:00:42,480 --> 00:00:46,160
bioinformatics

00:00:43,440 --> 00:00:48,239
is very broad and the scope of biology

00:00:46,160 --> 00:00:50,160
is actually even broader

00:00:48,239 --> 00:00:52,559
so to keep focus we'll be looking at

00:00:50,160 --> 00:00:54,800
computational biology from the angle of

00:00:52,559 --> 00:00:56,320
rna sequencing and rna sequencing

00:00:54,800 --> 00:00:58,719
analysis

00:00:56,320 --> 00:01:01,199
aka rna-seq and we'll see how russ can

00:00:58,719 --> 00:01:04,720
play into that

00:01:01,199 --> 00:01:06,400
as a crash course into rna-seq

00:01:04,720 --> 00:01:08,799
what in the world is rna sequencing

00:01:06,400 --> 00:01:08,799
anyways

00:01:09,680 --> 00:01:12,720
in one way to phrase it rna sequencing

00:01:12,159 --> 00:01:15,439
is

00:01:12,720 --> 00:01:16,000
one way to sequence the qualities the

00:01:15,439 --> 00:01:19,040
presence

00:01:16,000 --> 00:01:21,200
and the quantities of rna in a sample in

00:01:19,040 --> 00:01:24,840
your fragments and in your reads

00:01:21,200 --> 00:01:26,799
in comparison to reference data like a

00:01:24,840 --> 00:01:28,159
transcriptome

00:01:26,799 --> 00:01:29,840
now these are quite a few different

00:01:28,159 --> 00:01:31,520
terms so we'll

00:01:29,840 --> 00:01:33,119
define them incrementally we'll start

00:01:31,520 --> 00:01:34,479
from rna and then we'll see why

00:01:33,119 --> 00:01:35,520
sequencing is important

00:01:34,479 --> 00:01:38,240
and we'll talk a little bit about

00:01:35,520 --> 00:01:41,520
alignment along the way

00:01:38,240 --> 00:01:43,040
as a working definition of rna you've

00:01:41,520 --> 00:01:44,880
probably heard of dna

00:01:43,040 --> 00:01:46,320
first and you've probably heard of it

00:01:44,880 --> 00:01:49,759
more often

00:01:46,320 --> 00:01:50,720
it's the stuff that makes the

00:01:49,759 --> 00:01:54,320
replication

00:01:50,720 --> 00:01:57,439
of your entire genetic sequence possible

00:01:54,320 --> 00:02:01,040
and you wouldn't be wrong to relate

00:01:57,439 --> 00:02:04,640
rna to dna in this sense

00:02:01,040 --> 00:02:05,920
both rna and dna are mediums for genetic

00:02:04,640 --> 00:02:07,360
information

00:02:05,920 --> 00:02:09,039
although they do come in slightly

00:02:07,360 --> 00:02:12,879
different forms

00:02:09,039 --> 00:02:14,480
but their purposes can be different

00:02:12,879 --> 00:02:16,879
in biology we have something called the

00:02:14,480 --> 00:02:20,840
central dogma which dictates how

00:02:16,879 --> 00:02:22,319
rna comes to be and what it can be used

00:02:20,840 --> 00:02:25,840
for

00:02:22,319 --> 00:02:26,480
we start with the dna in human cells

00:02:25,840 --> 00:02:29,680
case

00:02:26,480 --> 00:02:33,760
in the nucleus and we

00:02:29,680 --> 00:02:36,239
read through that dna base by base acgt

00:02:33,760 --> 00:02:37,760
sequence by sequence and then we

00:02:36,239 --> 00:02:40,640
translate it

00:02:37,760 --> 00:02:41,200
from one character to the next and then

00:02:40,640 --> 00:02:44,480
we

00:02:41,200 --> 00:02:45,120
transcribe it meaning that we take the

00:02:44,480 --> 00:02:47,680
dna

00:02:45,120 --> 00:02:48,560
and we take those individual bases and

00:02:47,680 --> 00:02:51,760
we find its

00:02:48,560 --> 00:02:55,040
complement in rna this becomes

00:02:51,760 --> 00:02:58,319
a c g and u in new characters

00:02:55,040 --> 00:02:58,640
now this rna then matures into what we

00:02:58,319 --> 00:03:01,599
call

00:02:58,640 --> 00:03:03,760
messenger rna which gets sent out to all

00:03:01,599 --> 00:03:06,560
different parts of the cell

00:03:03,760 --> 00:03:08,159
and this is what we get as the

00:03:06,560 --> 00:03:11,760
communication source

00:03:08,159 --> 00:03:14,800
for synthesis of proteins for different

00:03:11,760 --> 00:03:14,800
factories of the cell

00:03:15,040 --> 00:03:18,640
in general the original source

00:03:17,440 --> 00:03:20,640
information

00:03:18,640 --> 00:03:22,239
the genetic sequence and the sum of all

00:03:20,640 --> 00:03:25,360
dna found in the cell

00:03:22,239 --> 00:03:27,599
and in the nucleus is what we call a

00:03:25,360 --> 00:03:30,720
genome

00:03:27,599 --> 00:03:32,400
and from that genome we can find

00:03:30,720 --> 00:03:33,760
that there are many different kinds of

00:03:32,400 --> 00:03:36,959
rna produced

00:03:33,760 --> 00:03:40,000
and used whether it be messenger rna

00:03:36,959 --> 00:03:42,720
trna rrna and so on

00:03:40,000 --> 00:03:44,640
and they can exhibit information from

00:03:42,720 --> 00:03:46,560
the genomes as we've stated

00:03:44,640 --> 00:03:49,680
and we can compare them and see how

00:03:46,560 --> 00:03:51,680
similar they are by aligning them

00:03:49,680 --> 00:03:53,840
they can serve as communication between

00:03:51,680 --> 00:03:55,360
genes and protein factories

00:03:53,840 --> 00:03:57,680
so that we can actually get from the

00:03:55,360 --> 00:03:59,360
static source of our genetic sequence to

00:03:57,680 --> 00:04:02,480
the active source of

00:03:59,360 --> 00:04:04,799
cell interaction and we can describe

00:04:02,480 --> 00:04:06,080
the expressions of these genes based on

00:04:04,799 --> 00:04:08,000
those interactions

00:04:06,080 --> 00:04:09,840
and we can actually define behaviors and

00:04:08,000 --> 00:04:15,040
substance leader processes

00:04:09,840 --> 00:04:18,400
by understanding how rna works

00:04:15,040 --> 00:04:20,400
and if rna can describe the expressions

00:04:18,400 --> 00:04:22,160
of genes within a cell

00:04:20,400 --> 00:04:23,919
that means the cell can have an

00:04:22,160 --> 00:04:27,280
identical genomic sequence

00:04:23,919 --> 00:04:29,600
an identical genome but

00:04:27,280 --> 00:04:31,360
as it's changing and as it's producing

00:04:29,600 --> 00:04:32,639
different proteins and as it's going to

00:04:31,360 --> 00:04:34,479
different factories and as it's

00:04:32,639 --> 00:04:37,040
communicating differently

00:04:34,479 --> 00:04:40,080
the cell can display different behavior

00:04:37,040 --> 00:04:42,320
even with the same genetics

00:04:40,080 --> 00:04:45,360
so the collection of all this dynamic

00:04:42,320 --> 00:04:48,560
defined and transcribed rna

00:04:45,360 --> 00:04:49,040
in these cells is collectively what we

00:04:48,560 --> 00:04:53,280
call

00:04:49,040 --> 00:04:53,280
a transcriptome from transcription

00:04:53,440 --> 00:04:58,160
and because it's dynamic and serves as a

00:04:56,400 --> 00:05:01,680
bridge between

00:04:58,160 --> 00:05:03,120
our dna and our proteins rna can help us

00:05:01,680 --> 00:05:05,840
to investigate

00:05:03,120 --> 00:05:06,320
the differences between individual cells

00:05:05,840 --> 00:05:09,759
as

00:05:06,320 --> 00:05:12,800
single cell rna analysis or

00:05:09,759 --> 00:05:13,360
in groups of cells or communities as we

00:05:12,800 --> 00:05:17,680
would see

00:05:13,360 --> 00:05:20,880
in bulk rna we can look at specific

00:05:17,680 --> 00:05:23,919
expressions of genes or sets of genes

00:05:20,880 --> 00:05:27,039
and interrogate them

00:05:23,919 --> 00:05:29,440
by themselves and look at how their

00:05:27,039 --> 00:05:32,000
sequences can compare

00:05:29,440 --> 00:05:33,039
and finally we can look at how

00:05:32,000 --> 00:05:36,400
interactions

00:05:33,039 --> 00:05:38,800
from rna we can actually profile

00:05:36,400 --> 00:05:39,759
different objects and different

00:05:38,800 --> 00:05:42,800
characters

00:05:39,759 --> 00:05:46,479
in the microscopic world whether they be

00:05:42,800 --> 00:05:49,919
cells in our human body bacteria

00:05:46,479 --> 00:05:49,919
viruses and fungi

00:05:51,120 --> 00:05:58,319
and as a note as many of you have

00:05:54,720 --> 00:06:01,440
probably been affected by covet 19

00:05:58,319 --> 00:06:04,560
covet 19 is an rna virus which

00:06:01,440 --> 00:06:05,199
means that the virus's entire genetic

00:06:04,560 --> 00:06:08,720
sequence

00:06:05,199 --> 00:06:11,919
is contained in the capsule and its

00:06:08,720 --> 00:06:15,840
format its information format

00:06:11,919 --> 00:06:16,720
is rna so we've looked a little bit

00:06:15,840 --> 00:06:19,919
about

00:06:16,720 --> 00:06:20,720
how rna comes to be why it's important

00:06:19,919 --> 00:06:22,400
and

00:06:20,720 --> 00:06:24,319
how sequencing can play into that a

00:06:22,400 --> 00:06:28,080
little bit

00:06:24,319 --> 00:06:28,080
but how does that relate to computing

00:06:30,240 --> 00:06:34,800
it comes to computing where we actually

00:06:32,720 --> 00:06:36,800
need to process the information that

00:06:34,800 --> 00:06:40,319
we've gathered

00:06:36,800 --> 00:06:41,039
rna-seq processing is how we can

00:06:40,319 --> 00:06:43,520
quantify

00:06:41,039 --> 00:06:44,319
compute and analyze the data that we've

00:06:43,520 --> 00:06:48,319
taken

00:06:44,319 --> 00:06:51,520
after we've left the wet lab and

00:06:48,319 --> 00:06:54,400
after we've done our isolation of

00:06:51,520 --> 00:06:56,720
of different samples of different reads

00:06:54,400 --> 00:06:59,520
and different fragments

00:06:56,720 --> 00:07:01,280
everything from our information to more

00:06:59,520 --> 00:07:02,560
information and inferences we want to

00:07:01,280 --> 00:07:06,160
gather

00:07:02,560 --> 00:07:08,880
can go digital and

00:07:06,160 --> 00:07:09,599
the rust and the applications and rust

00:07:08,880 --> 00:07:13,440
coming soon

00:07:09,599 --> 00:07:15,440
i promise from

00:07:13,440 --> 00:07:16,960
this basic understanding of the

00:07:15,440 --> 00:07:20,400
mechanisms of rna

00:07:16,960 --> 00:07:21,919
and rna-seq there's a simple methodology

00:07:20,400 --> 00:07:25,039
that we can take

00:07:21,919 --> 00:07:26,000
and that's we read the information from

00:07:25,039 --> 00:07:27,919
the files

00:07:26,000 --> 00:07:30,479
and the experimental samples that we've

00:07:27,919 --> 00:07:32,960
taken and turn them into data streams

00:07:30,479 --> 00:07:36,319
that we can manipulate

00:07:32,960 --> 00:07:38,160
we map and align these data streams

00:07:36,319 --> 00:07:40,080
to reference data where they're

00:07:38,160 --> 00:07:42,160
applicable

00:07:40,080 --> 00:07:44,319
so we can take the information that we

00:07:42,160 --> 00:07:46,800
have we can position them

00:07:44,319 --> 00:07:49,120
and we can compare them see the

00:07:46,800 --> 00:07:52,800
similarities and the differences

00:07:49,120 --> 00:07:55,120
and categorize them and we can finally

00:07:52,800 --> 00:07:56,560
analyze the output depending on whether

00:07:55,120 --> 00:08:00,160
we want to quantify

00:07:56,560 --> 00:08:02,639
the categories and the expressions of

00:08:00,160 --> 00:08:04,800
different genes or different sequences

00:08:02,639 --> 00:08:06,240
and we can send these results we have

00:08:04,800 --> 00:08:09,840
for further processing in other

00:08:06,240 --> 00:08:09,840
pipelines or other programs

00:08:09,919 --> 00:08:16,639
now rna-seq tools are a broad spread

00:08:14,479 --> 00:08:17,840
they can be focused on many different

00:08:16,639 --> 00:08:21,440
analyses

00:08:17,840 --> 00:08:23,919
or different methods to achieve analysis

00:08:21,440 --> 00:08:26,080
and to name a few some of them may be

00:08:23,919 --> 00:08:29,759
worried about the quantification

00:08:26,080 --> 00:08:30,960
the categorization and the analysis of

00:08:29,759 --> 00:08:34,560
expression

00:08:30,960 --> 00:08:39,120
of different genes and different

00:08:34,560 --> 00:08:42,159
rna sequences within our

00:08:39,120 --> 00:08:45,279
data stream and each have

00:08:42,159 --> 00:08:46,000
its own uses and advantages but most are

00:08:45,279 --> 00:08:48,160
largely

00:08:46,000 --> 00:08:49,920
disjoint in terms of their programmatic

00:08:48,160 --> 00:08:52,080
tooling

00:08:49,920 --> 00:08:54,399
we needed something that could actually

00:08:52,080 --> 00:08:57,760
bring the exposed functionality

00:08:54,399 --> 00:09:01,040
so the command arguments the

00:08:57,760 --> 00:09:03,200
positional arguments and the general

00:09:01,040 --> 00:09:04,480
command line interface of these many

00:09:03,200 --> 00:09:07,279
different tools with

00:09:04,480 --> 00:09:09,920
many different functions together into

00:09:07,279 --> 00:09:14,000
one unified surface

00:09:09,920 --> 00:09:17,200
and i need the language that can do that

00:09:14,000 --> 00:09:19,360
and that's where rust comes in

00:09:17,200 --> 00:09:20,480
with no need for further introduction

00:09:19,360 --> 00:09:23,360
rust is usually

00:09:20,480 --> 00:09:25,120
used for safety in the sense of both

00:09:23,360 --> 00:09:28,240
memory safety with

00:09:25,120 --> 00:09:31,680
rust borrow checker and time safety

00:09:28,240 --> 00:09:33,440
within its entire type system

00:09:31,680 --> 00:09:34,880
we look at performance at the level of

00:09:33,440 --> 00:09:36,800
systems programming

00:09:34,880 --> 00:09:38,480
and we look at concurrency both in its

00:09:36,800 --> 00:09:41,200
primitives and in the ecosystem

00:09:38,480 --> 00:09:41,200
surrounding them

00:09:42,080 --> 00:09:46,560
and all of these are helpful in this

00:09:45,600 --> 00:09:49,120
regard

00:09:46,560 --> 00:09:51,040
but how would that apply to a biologist

00:09:49,120 --> 00:09:53,360
or a computational biologist in that

00:09:51,040 --> 00:09:53,360
sense

00:09:53,519 --> 00:09:56,800
and the first thing that we can actually

00:09:54,959 --> 00:09:59,519
look at is

00:09:56,800 --> 00:10:02,399
building ergonomic abstractions and

00:09:59,519 --> 00:10:02,399
layers to this

00:10:02,800 --> 00:10:06,079
now due to the fact that we had multiple

00:10:05,279 --> 00:10:10,240
tools

00:10:06,079 --> 00:10:13,760
to work with the initial starting point

00:10:10,240 --> 00:10:19,200
of our translation was about

00:10:13,760 --> 00:10:22,800
3000 lines of logic configuration

00:10:19,200 --> 00:10:22,800
and command line parsing

00:10:23,040 --> 00:10:29,600
and some of it was easier than

00:10:26,160 --> 00:10:34,399
other areas and all of it was

00:10:29,600 --> 00:10:37,440
generally not trivial to translate

00:10:34,399 --> 00:10:40,160
and projects grow in size

00:10:37,440 --> 00:10:42,800
and as with this one so did the size of

00:10:40,160 --> 00:10:44,959
what needed translation

00:10:42,800 --> 00:10:46,000
what originally started as about 3 000

00:10:44,959 --> 00:10:49,200
lines of

00:10:46,000 --> 00:10:50,000
cli parsing with a few tools growing

00:10:49,200 --> 00:10:53,360
from about

00:10:50,000 --> 00:10:56,399
three to four to five to six to ten

00:10:53,360 --> 00:10:57,360
different tools began to add more

00:10:56,399 --> 00:11:01,760
arguments

00:10:57,360 --> 00:11:04,240
and began to add more configuration

00:11:01,760 --> 00:11:07,120
and so what originally started as about

00:11:04,240 --> 00:11:10,480
3 000 lines of code at the beginning

00:11:07,120 --> 00:11:12,160
then became more than 10 000 lines of

00:11:10,480 --> 00:11:16,640
code to migrate over

00:11:12,160 --> 00:11:16,640
and translate and unify in the end

00:11:17,200 --> 00:11:20,560
thankfully though many of the options

00:11:19,920 --> 00:11:24,160
that we can

00:11:20,560 --> 00:11:27,440
translate at the level of rust

00:11:24,160 --> 00:11:31,120
have both high level structures and

00:11:27,440 --> 00:11:33,920
primitives that are generally synonymous

00:11:31,120 --> 00:11:35,519
and when they aren't and when we want to

00:11:33,920 --> 00:11:40,399
configure further

00:11:35,519 --> 00:11:42,160
we have macros which we which enable us

00:11:40,399 --> 00:11:44,320
this is one example of a direct

00:11:42,160 --> 00:11:47,839
translation where we take

00:11:44,320 --> 00:11:49,040
uh not only basic configuration values

00:11:47,839 --> 00:11:52,079
like verbosity

00:11:49,040 --> 00:11:53,600
and we have flags for that and we can

00:11:52,079 --> 00:11:56,880
take sub commands

00:11:53,600 --> 00:11:58,800
and other options and

00:11:56,880 --> 00:12:00,320
if something is not relevant to the

00:11:58,800 --> 00:12:01,200
functionality that we want to define

00:12:00,320 --> 00:12:02,639
right now

00:12:01,200 --> 00:12:06,720
in the abstraction we want to define

00:12:02,639 --> 00:12:06,720
right now we can skip it

00:12:07,519 --> 00:12:15,440
so thankfully to crates like

00:12:10,639 --> 00:12:17,920
struck up and pico args

00:12:15,440 --> 00:12:18,480
what was collectively about 10 000 lines

00:12:17,920 --> 00:12:22,560
of

00:12:18,480 --> 00:12:27,040
mixed logic configuration and options

00:12:22,560 --> 00:12:31,200
ended up condensing by about six times

00:12:27,040 --> 00:12:34,720
plus more for documentation and

00:12:31,200 --> 00:12:37,279
in the end what we got was

00:12:34,720 --> 00:12:39,279
quite a sizable difference as you can

00:12:37,279 --> 00:12:41,040
see to proportion

00:12:39,279 --> 00:12:42,880
this is what would have been the size

00:12:41,040 --> 00:12:46,000
before and what would have been the size

00:12:42,880 --> 00:12:46,000
after in screenshots

00:12:47,440 --> 00:12:50,880
but we don't just want an abstraction

00:12:50,399 --> 00:12:53,040
layer

00:12:50,880 --> 00:12:54,880
we want to be able to interact with the

00:12:53,040 --> 00:12:56,000
tools that have already existed

00:12:54,880 --> 00:12:58,639
and the tools that have already been

00:12:56,000 --> 00:13:01,519
made around us and for that we need

00:12:58,639 --> 00:13:01,519
interoperability

00:13:01,839 --> 00:13:06,639
by the end of our initial abstraction

00:13:04,000 --> 00:13:08,639
and the command line layer

00:13:06,639 --> 00:13:11,120
the resulting project looks a little bit

00:13:08,639 --> 00:13:14,480
like rust on top

00:13:11,120 --> 00:13:17,200
with bindings to

00:13:14,480 --> 00:13:18,959
c plus plus and scripts almost all the

00:13:17,200 --> 00:13:22,720
way down

00:13:18,959 --> 00:13:26,800
and thankfully to a few crates

00:13:22,720 --> 00:13:30,959
as he make or cxx by

00:13:26,800 --> 00:13:34,399
uh david tolney we're able to actually

00:13:30,959 --> 00:13:37,760
build a very systematic

00:13:34,399 --> 00:13:42,399
and almost self-contained

00:13:37,760 --> 00:13:44,399
structure for interacting with our files

00:13:42,399 --> 00:13:46,000
we can take in the files we can parse

00:13:44,399 --> 00:13:46,959
them and we can send them off for

00:13:46,000 --> 00:13:50,480
processing

00:13:46,959 --> 00:13:53,040
whether it be c c plus plus python

00:13:50,480 --> 00:13:54,399
makefile perl and other analytic

00:13:53,040 --> 00:13:57,839
languages

00:13:54,399 --> 00:14:00,959
and we can finally destructure or

00:13:57,839 --> 00:14:03,120
serialize that data and

00:14:00,959 --> 00:14:05,519
bring it into further analysis for other

00:14:03,120 --> 00:14:07,360
pipelines

00:14:05,519 --> 00:14:09,760
and many times we should leave the

00:14:07,360 --> 00:14:12,320
abstraction layer as it is

00:14:09,760 --> 00:14:15,040
there is no reason to go further unless

00:14:12,320 --> 00:14:18,480
we have precedent

00:14:15,040 --> 00:14:21,760
and sometimes that precedent is very

00:14:18,480 --> 00:14:25,279
large to scale they're

00:14:21,760 --> 00:14:28,560
easily 10 to the 16th to 10 to the 17th

00:14:25,279 --> 00:14:31,120
bases in some of the more popular

00:14:28,560 --> 00:14:33,680
public databases for rna-seq and its

00:14:31,120 --> 00:14:38,399
associated data

00:14:33,680 --> 00:14:41,920
that's more than 100 petabytes

00:14:38,399 --> 00:14:45,199
or several hundred thousand terabytes

00:14:41,920 --> 00:14:45,839
or several hundred million gigabytes or

00:14:45,199 --> 00:14:50,399
seven

00:14:45,839 --> 00:14:55,519
several hundred billion megabytes

00:14:50,399 --> 00:14:55,519
and it's continuing to grow over time

00:14:55,680 --> 00:15:01,360
when data can not only grow over time

00:14:58,720 --> 00:15:03,040
but can grow orders of magnitude in size

00:15:01,360 --> 00:15:06,560
just from the process

00:15:03,040 --> 00:15:10,399
of a single step in the pipeline

00:15:06,560 --> 00:15:10,399
performance does matter

00:15:10,639 --> 00:15:14,320
so in a way we can actually think about

00:15:13,360 --> 00:15:18,320
sequencing

00:15:14,320 --> 00:15:21,680
and the general process of analysis

00:15:18,320 --> 00:15:25,199
in three distinct steps where we

00:15:21,680 --> 00:15:27,360
read the information we parse the data

00:15:25,199 --> 00:15:29,759
we map in a line and we paralyze

00:15:27,360 --> 00:15:32,880
operations

00:15:29,759 --> 00:15:33,600
we analyze and we export the data that

00:15:32,880 --> 00:15:36,560
we need

00:15:33,600 --> 00:15:36,560
for further analysis

00:15:37,120 --> 00:15:41,680
as for parsing rust has a very strong

00:15:40,560 --> 00:15:44,480
track history

00:15:41,680 --> 00:15:44,880
of parsing whether it comes to crates

00:15:44,480 --> 00:15:48,079
like

00:15:44,880 --> 00:15:51,519
nom lectures like logos or pests

00:15:48,079 --> 00:15:53,279
and so on

00:15:51,519 --> 00:15:55,680
we can see that rust actually has the

00:15:53,279 --> 00:15:58,720
ability to handle not only

00:15:55,680 --> 00:16:00,560
long strings and sequences but bigger

00:15:58,720 --> 00:16:03,199
structures as well

00:16:00,560 --> 00:16:04,240
and structured data is sometimes the

00:16:03,199 --> 00:16:07,440
thing that we

00:16:04,240 --> 00:16:08,240
most need if sequence data were the

00:16:07,440 --> 00:16:11,360
simplest

00:16:08,240 --> 00:16:12,560
we could possibly conceive we would have

00:16:11,360 --> 00:16:16,399
a continuous stream

00:16:12,560 --> 00:16:21,759
of fragments of bases joined together

00:16:16,399 --> 00:16:24,320
continuously and realistically

00:16:21,759 --> 00:16:25,040
require more than just a continuous

00:16:24,320 --> 00:16:27,360
stream

00:16:25,040 --> 00:16:29,680
we require more information that we

00:16:27,360 --> 00:16:32,800
require structure around it

00:16:29,680 --> 00:16:35,360
now how does that structure look one

00:16:32,800 --> 00:16:37,360
example would be the fastq format

00:16:35,360 --> 00:16:39,040
where we take in not only the sequence

00:16:37,360 --> 00:16:39,920
information which is crucial to our

00:16:39,040 --> 00:16:42,079
analysis

00:16:39,920 --> 00:16:43,440
but also the identifier which is the

00:16:42,079 --> 00:16:46,160
identification

00:16:43,440 --> 00:16:47,279
of what sequence we're looking at the

00:16:46,160 --> 00:16:49,759
quality scores

00:16:47,279 --> 00:16:50,560
so we know how well this is actually

00:16:49,759 --> 00:16:52,320
sequenced

00:16:50,560 --> 00:16:54,320
or how erroneous this is actually

00:16:52,320 --> 00:16:57,600
sequenced

00:16:54,320 --> 00:16:59,120
and we can continue to process it

00:16:57,600 --> 00:17:01,759
further

00:16:59,120 --> 00:17:03,120
and this is not the only format that is

00:17:01,759 --> 00:17:05,600
viable for

00:17:03,120 --> 00:17:07,439
computational biology and bioinformatics

00:17:05,600 --> 00:17:10,160
in rna sequencing

00:17:07,439 --> 00:17:10,959
we actually have quite a few whether

00:17:10,160 --> 00:17:14,240
it's

00:17:10,959 --> 00:17:18,079
fasta for genome and transcriptome

00:17:14,240 --> 00:17:22,400
fastq for our experimental fragments

00:17:18,079 --> 00:17:25,839
gtf for our annotations or bed

00:17:22,400 --> 00:17:26,319
or files that can contain the alignments

00:17:25,839 --> 00:17:33,200
that

00:17:26,319 --> 00:17:35,520
we have calculated or processed

00:17:33,200 --> 00:17:35,520
and

00:17:37,120 --> 00:17:43,120
parsing in rus is not just a general fee

00:17:41,280 --> 00:17:44,320
we actually do need some specific

00:17:43,120 --> 00:17:48,000
features to

00:17:44,320 --> 00:17:50,880
biological file formats sometimes and

00:17:48,000 --> 00:17:53,520
we can actually measure this information

00:17:50,880 --> 00:17:57,280
thankfully to

00:17:53,520 --> 00:18:00,400
a professor hung lee at

00:17:57,280 --> 00:18:02,240
harvard we have been able to quantify

00:18:00,400 --> 00:18:03,280
some of these basic benchmarks for

00:18:02,240 --> 00:18:06,720
common

00:18:03,280 --> 00:18:09,360
analyses and parsing

00:18:06,720 --> 00:18:09,919
here we actually see the actual times it

00:18:09,360 --> 00:18:13,840
takes

00:18:09,919 --> 00:18:15,280
where first and forth most rust comes in

00:18:13,840 --> 00:18:18,240
and

00:18:15,280 --> 00:18:19,200
we can actually count the amount of

00:18:18,240 --> 00:18:21,679
sequences

00:18:19,200 --> 00:18:24,720
and the quality thereof that's contained

00:18:21,679 --> 00:18:24,720
in these fastqs files

00:18:26,080 --> 00:18:29,120
and if we actually take a closer look at

00:18:28,480 --> 00:18:31,919
how we can

00:18:29,120 --> 00:18:33,280
use this information we can see that

00:18:31,919 --> 00:18:37,280
it's not that different

00:18:33,280 --> 00:18:40,640
from very simple or normal rust code by

00:18:37,280 --> 00:18:42,960
the time it reaches the biologist

00:18:40,640 --> 00:18:44,160
what we have is a reader and a record

00:18:42,960 --> 00:18:47,200
and once we take in

00:18:44,160 --> 00:18:48,160
the buffered file we can continue to

00:18:47,200 --> 00:18:50,240
loop over it

00:18:48,160 --> 00:18:53,520
and continue to print different sequence

00:18:50,240 --> 00:18:56,160
data and quality data

00:18:53,520 --> 00:18:58,640
and in the same thing for the fastest

00:18:56,160 --> 00:19:02,160
benchmark

00:18:58,640 --> 00:19:05,679
another version is very similar where we

00:19:02,160 --> 00:19:08,720
parse from our file and we continue

00:19:05,679 --> 00:19:13,600
to take in new record information

00:19:08,720 --> 00:19:13,600
until we finish all the sequence

00:19:15,679 --> 00:19:24,240
and once we've parsed all these files

00:19:20,000 --> 00:19:26,480
we need to do basic processing to them

00:19:24,240 --> 00:19:28,160
which includes mapping and alignment the

00:19:26,480 --> 00:19:31,039
basis of

00:19:28,160 --> 00:19:32,720
most bioinformatics pipelines and not

00:19:31,039 --> 00:19:36,400
all mapping and alignment

00:19:32,720 --> 00:19:38,000
is created equally some are better

00:19:36,400 --> 00:19:40,160
expression analysis

00:19:38,000 --> 00:19:41,840
some are better at quantifying different

00:19:40,160 --> 00:19:45,440
parts of rna

00:19:41,840 --> 00:19:49,039
some have better accuracy and some

00:19:45,440 --> 00:19:50,320
are very very fast in one example that

00:19:49,039 --> 00:19:53,919
we could find

00:19:50,320 --> 00:19:57,520
from an paper for callisto

00:19:53,919 --> 00:20:00,400
in near optimal rna-seq quantification

00:19:57,520 --> 00:20:00,880
we can actually see the variance in the

00:20:00,400 --> 00:20:04,480
level

00:20:00,880 --> 00:20:06,240
of speed that is the performance

00:20:04,480 --> 00:20:08,720
of different methods and different

00:20:06,240 --> 00:20:11,840
levels of analysis

00:20:08,720 --> 00:20:13,600
and sometimes it can

00:20:11,840 --> 00:20:15,760
on a normal machine it can take as

00:20:13,600 --> 00:20:18,320
little as 15 minutes

00:20:15,760 --> 00:20:19,520
and sometimes it can take several days

00:20:18,320 --> 00:20:23,360
of computation

00:20:19,520 --> 00:20:26,240
in a more personal test we tested with

00:20:23,360 --> 00:20:27,760
at least 64 gigabytes of ram sometimes

00:20:26,240 --> 00:20:30,000
00:20:27,760 --> 00:20:31,280
at least 30 million reads over multiple

00:20:30,000 --> 00:20:34,720
files

00:20:31,280 --> 00:20:35,520
and we had enough computing power to

00:20:34,720 --> 00:20:39,520
feed a room

00:20:35,520 --> 00:20:43,120
equivalent to a lab full of think pads

00:20:39,520 --> 00:20:46,320
and in the end the tools with

00:20:43,120 --> 00:20:47,280
builds focused on fast heuristics gave

00:20:46,320 --> 00:20:49,280
us

00:20:47,280 --> 00:20:51,440
actual reasonable answers in less than

00:20:49,280 --> 00:20:53,679
half an hour some of them even within 10

00:20:51,440 --> 00:20:56,799
minutes

00:20:53,679 --> 00:20:57,679
but others which relied purely on

00:20:56,799 --> 00:21:00,320
accuracy

00:20:57,679 --> 00:21:01,440
or purely on speed which were made more

00:21:00,320 --> 00:21:04,480
accurate

00:21:01,440 --> 00:21:07,679
went out of memory as we actually

00:21:04,480 --> 00:21:09,280
tried to get a proper answer out of it

00:21:07,679 --> 00:21:11,919
even with these large computing

00:21:09,280 --> 00:21:14,000
constraints

00:21:11,919 --> 00:21:15,039
so the commonality between these tools

00:21:14,000 --> 00:21:18,720
is that

00:21:15,039 --> 00:21:21,360
parallelism and efficiency

00:21:18,720 --> 00:21:22,080
is actually no longer optional in

00:21:21,360 --> 00:21:25,039
rna-seq

00:21:22,080 --> 00:21:27,360
processing it's an assumption of the

00:21:25,039 --> 00:21:27,360
field

00:21:27,679 --> 00:21:32,480
and so in some of the rewrites of these

00:21:30,640 --> 00:21:35,760
tools

00:21:32,480 --> 00:21:39,440
we had to defer expertise to designers

00:21:35,760 --> 00:21:42,000
of rust systems and the community

00:21:39,440 --> 00:21:43,840
more at large so the commonality between

00:21:42,000 --> 00:21:47,919
these different tools

00:21:43,840 --> 00:21:51,679
is actually that parallelism and

00:21:47,919 --> 00:21:54,000
efficiency with our time and our memory

00:21:51,679 --> 00:21:55,679
is no longer optional with rnac

00:21:54,000 --> 00:21:58,159
processing

00:21:55,679 --> 00:22:00,480
most computers nowadays even personal

00:21:58,159 --> 00:22:04,159
computers let alone compute clusters

00:22:00,480 --> 00:22:06,640
have more than one core and

00:22:04,159 --> 00:22:09,520
it's a general assumption of the field

00:22:06,640 --> 00:22:12,960
in current years

00:22:09,520 --> 00:22:15,679
so to actually work with these tools

00:22:12,960 --> 00:22:18,080
and to incrementally translate them into

00:22:15,679 --> 00:22:21,440
a language like rust

00:22:18,080 --> 00:22:24,320
i had to call in the experts so we defer

00:22:21,440 --> 00:22:25,200
expertise to the designers of these rust

00:22:24,320 --> 00:22:28,640
systems

00:22:25,200 --> 00:22:29,679
who can actually optimize and work with

00:22:28,640 --> 00:22:32,720
these systems

00:22:29,679 --> 00:22:33,679
at a very fundamental level and the

00:22:32,720 --> 00:22:36,720
response

00:22:33,679 --> 00:22:39,120
included the standard library actually

00:22:36,720 --> 00:22:41,039
standard library is cohesive and

00:22:39,120 --> 00:22:45,360
extensive to the point where

00:22:41,039 --> 00:22:48,320
we can get atomics threading

00:22:45,360 --> 00:22:48,799
and streams together in a fashion that's

00:22:48,320 --> 00:22:52,159
actually

00:22:48,799 --> 00:22:55,760
accessible both in its documentation

00:22:52,159 --> 00:22:59,360
and in its resolution with other parts

00:22:55,760 --> 00:23:02,480
of the rust ecosystem within

00:22:59,360 --> 00:23:06,400
crates and

00:23:02,480 --> 00:23:09,280
beyond that we also had actual data

00:23:06,400 --> 00:23:10,159
parallelism libraries such as rayon

00:23:09,280 --> 00:23:13,120
where we could

00:23:10,159 --> 00:23:14,000
take normally sequential data and we

00:23:13,120 --> 00:23:16,400
could

00:23:14,000 --> 00:23:18,240
place them into iterators and place them

00:23:16,400 --> 00:23:19,520
into transformations

00:23:18,240 --> 00:23:21,600
where we could parallelize the

00:23:19,520 --> 00:23:24,720
operations naturally

00:23:21,600 --> 00:23:24,720
and easily

00:23:26,159 --> 00:23:32,400
and in the end the data that we process

00:23:29,679 --> 00:23:33,840
no matter how fast no matter how much we

00:23:32,400 --> 00:23:35,919
parse

00:23:33,840 --> 00:23:37,360
needs to go somewhere it needs to be

00:23:35,919 --> 00:23:40,960
analyzed further

00:23:37,360 --> 00:23:44,559
and sometimes rust is

00:23:40,960 --> 00:23:46,720
not the only answer to a problem

00:23:44,559 --> 00:23:48,159
there's a diverse ecosystem of languages

00:23:46,720 --> 00:23:50,640
and tools out there

00:23:48,159 --> 00:23:52,480
whether it goes to scripting whether

00:23:50,640 --> 00:23:55,520
it's for systems

00:23:52,480 --> 00:23:58,720
and whether it's for pipelines

00:23:55,520 --> 00:23:59,679
and in the end it boils down to the fact

00:23:58,720 --> 00:24:04,400
that

00:23:59,679 --> 00:24:06,320
biologists are not software engineers we

00:24:04,400 --> 00:24:08,240
certainly don't want to rewrite the

00:24:06,320 --> 00:24:12,080
world and rest

00:24:08,240 --> 00:24:15,039
and there's actually a lot out there

00:24:12,080 --> 00:24:16,240
to gain from what kind of language do we

00:24:15,039 --> 00:24:18,559
want to work with

00:24:16,240 --> 00:24:19,760
is less of a question of what do i want

00:24:18,559 --> 00:24:21,600
to stick to

00:24:19,760 --> 00:24:24,000
but what can i connect and what can i

00:24:21,600 --> 00:24:27,200
interoperate

00:24:24,000 --> 00:24:29,120
and classics of bioinformatics and

00:24:27,200 --> 00:24:32,400
computational biology

00:24:29,120 --> 00:24:37,440
especially for rna sequencing include c

00:24:32,400 --> 00:24:40,480
c plus plus four train powered systems

00:24:37,440 --> 00:24:43,840
and other languages such as java

00:24:40,480 --> 00:24:46,640
perl and analysis and r

00:24:43,840 --> 00:24:48,720
and newer languages are also cropping up

00:24:46,640 --> 00:24:53,600
such as python

00:24:48,720 --> 00:24:56,720
julia go javascript

00:24:53,600 --> 00:24:58,159
general scripting and some languages you

00:24:56,720 --> 00:25:01,840
may have never heard of before

00:24:58,159 --> 00:25:01,840
such as futhark or seek

00:25:02,960 --> 00:25:07,200
so while there's certainly overlap

00:25:05,520 --> 00:25:08,320
between biologists and software

00:25:07,200 --> 00:25:11,840
engineers

00:25:08,320 --> 00:25:14,880
the end goal is different biologists

00:25:11,840 --> 00:25:16,720
write software to best enable biology

00:25:14,880 --> 00:25:18,720
and the tools that are existing and the

00:25:16,720 --> 00:25:22,000
tools that we can connect

00:25:18,720 --> 00:25:22,000
are the tools that we're going to use

00:25:23,200 --> 00:25:27,120
so what biologists and scientists more

00:25:25,360 --> 00:25:28,720
generally can take away from good

00:25:27,120 --> 00:25:33,039
quality software

00:25:28,720 --> 00:25:36,799
is reusability composability

00:25:33,039 --> 00:25:39,039
interoperability and really

00:25:36,799 --> 00:25:41,200
all three interact in a way where we can

00:25:39,039 --> 00:25:43,919
actually get stable software

00:25:41,200 --> 00:25:44,799
that doesn't need to change that we can

00:25:43,919 --> 00:25:47,120
build upon

00:25:44,799 --> 00:25:48,000
that we can extend and that we can

00:25:47,120 --> 00:25:49,840
interact with

00:25:48,000 --> 00:25:51,440
at the level of different languages such

00:25:49,840 --> 00:25:54,880
as scripting languages

00:25:51,440 --> 00:25:55,600
or systems languages and lessons we can

00:25:54,880 --> 00:25:58,799
take away

00:25:55,600 --> 00:25:59,360
from rust and biology in the face of

00:25:58,799 --> 00:26:03,200
both

00:25:59,360 --> 00:26:06,320
parsing parallelization sequencing

00:26:03,200 --> 00:26:10,960
processing and analysis is

00:26:06,320 --> 00:26:14,480
that there is actually a very kind and

00:26:10,960 --> 00:26:17,600
extensive ecosystem both with

00:26:14,480 --> 00:26:21,520
the tools that russ gives and

00:26:17,600 --> 00:26:24,960
the communities that rust has enveloped

00:26:21,520 --> 00:26:28,080
this includes cargo where we have

00:26:24,960 --> 00:26:31,919
an actual build tool similar to

00:26:28,080 --> 00:26:34,559
pip similar to snake make cmake

00:26:31,919 --> 00:26:36,080
all brought together and cohesive in the

00:26:34,559 --> 00:26:38,080
sense that you can test

00:26:36,080 --> 00:26:39,120
that you can make that you can build

00:26:38,080 --> 00:26:41,760
that you can run

00:26:39,120 --> 00:26:43,600
that you can compile all these different

00:26:41,760 --> 00:26:46,960
things and all these different tools and

00:26:43,600 --> 00:26:46,960
all these different crates together

00:26:48,159 --> 00:26:55,120
and we have a crates ecosystem

00:26:52,000 --> 00:26:57,919
where if we know the rust

00:26:55,120 --> 00:27:00,480
code compiles we know that it will

00:26:57,919 --> 00:27:03,520
compile everywhere that rust

00:27:00,480 --> 00:27:06,320
is and in that sense

00:27:03,520 --> 00:27:06,960
we can continue to build upon different

00:27:06,320 --> 00:27:08,640
crates

00:27:06,960 --> 00:27:10,000
and different tools and different

00:27:08,640 --> 00:27:12,799
libraries

00:27:10,000 --> 00:27:14,159
based on the assumption that we know it

00:27:12,799 --> 00:27:17,360
works

00:27:14,159 --> 00:27:17,360
abroad and across

00:27:17,440 --> 00:27:21,520
and when something is not available in

00:27:20,240 --> 00:27:23,600
this ecosystem

00:27:21,520 --> 00:27:25,440
and when something is so domain specific

00:27:23,600 --> 00:27:27,279
that we really need a tool from

00:27:25,440 --> 00:27:30,799
somewhere else

00:27:27,279 --> 00:27:32,320
we not only have ffi we not only have

00:27:30,799 --> 00:27:33,360
communication with the language at a

00:27:32,320 --> 00:27:37,440
fundamental level

00:27:33,360 --> 00:27:40,960
but we have tools and we have

00:27:37,440 --> 00:27:41,600
different crates to actually abstract

00:27:40,960 --> 00:27:44,559
over this

00:27:41,600 --> 00:27:46,960
and to get a safe layer of ergonomic

00:27:44,559 --> 00:27:49,760
code that we can seamlessly transition

00:27:46,960 --> 00:27:52,159
between

00:27:49,760 --> 00:27:54,880
so what becomes the next step for rust

00:27:52,159 --> 00:27:57,600
and biology together

00:27:54,880 --> 00:27:59,600
well the impact of rust in the

00:27:57,600 --> 00:28:01,360
biological ecosystem

00:27:59,600 --> 00:28:02,720
is that we get a bridging at the level

00:28:01,360 --> 00:28:04,559
of languages

00:28:02,720 --> 00:28:06,480
as we've seen before different

00:28:04,559 --> 00:28:07,279
benchmarks and different tools and

00:28:06,480 --> 00:28:10,399
different

00:28:07,279 --> 00:28:12,960
toolkits we have

00:28:10,399 --> 00:28:14,240
a plethora of languages at our disposal

00:28:12,960 --> 00:28:16,399
some of them scripting

00:28:14,240 --> 00:28:18,080
some of them web languages some of them

00:28:16,399 --> 00:28:21,279
systems languages

00:28:18,080 --> 00:28:22,399
and rust really sits the heart of the

00:28:21,279 --> 00:28:25,120
ability to

00:28:22,399 --> 00:28:25,840
take initial information not only at the

00:28:25,120 --> 00:28:28,880
level of

00:28:25,840 --> 00:28:31,120
simple cffi and c bindings

00:28:28,880 --> 00:28:32,480
but also the level of safe abstractions

00:28:31,120 --> 00:28:34,880
to interpreters

00:28:32,480 --> 00:28:35,679
to different compile targets and to

00:28:34,880 --> 00:28:38,720
different

00:28:35,679 --> 00:28:38,720
information flow

00:28:39,919 --> 00:28:44,000
and we can work with the community at

00:28:42,880 --> 00:28:47,440
large to continue

00:28:44,000 --> 00:28:50,960
to build these tools not only does

00:28:47,440 --> 00:28:52,559
rust enable languages and different

00:28:50,960 --> 00:28:54,559
language tools

00:28:52,559 --> 00:28:56,480
enables the community to build tools

00:28:54,559 --> 00:28:59,679
around it to reuse

00:28:56,480 --> 00:29:02,559
to extend and to interact with rust

00:28:59,679 --> 00:29:04,480
and languages around rust at an equal

00:29:02,559 --> 00:29:07,760
and bilateral level

00:29:04,480 --> 00:29:09,840
and so we can actually act with

00:29:07,760 --> 00:29:13,440
different software and rust

00:29:09,840 --> 00:29:14,080
not only in so far as the software

00:29:13,440 --> 00:29:16,799
itself

00:29:14,080 --> 00:29:18,720
but also at the level of exchange from

00:29:16,799 --> 00:29:20,720
one software engineer to another from

00:29:18,720 --> 00:29:23,440
one scientist to another

00:29:20,720 --> 00:29:24,320
and build another community of

00:29:23,440 --> 00:29:28,000
mentorship

00:29:24,320 --> 00:29:31,520
for both science and software and

00:29:28,000 --> 00:29:31,520
build a larger picture

00:29:32,000 --> 00:29:35,360
the biggest asset of the rus programming

00:29:34,399 --> 00:29:38,080
language

00:29:35,360 --> 00:29:39,120
going forward may not just be the

00:29:38,080 --> 00:29:42,240
language itself

00:29:39,120 --> 00:29:42,240
but also its community

00:29:42,320 --> 00:29:48,720
and the community mentorship model is

00:29:45,440 --> 00:29:51,919
what biologists can continue to take

00:29:48,720 --> 00:29:54,000
and learn from rust beyond the language

00:29:51,919 --> 00:29:55,200
even as they go further thank you for

00:29:54,000 --> 00:29:58,080
joining into this talk

00:29:55,200 --> 00:30:00,000
i hope you enjoyed it i will make

00:29:58,080 --> 00:30:02,559
further information available

00:30:00,000 --> 00:30:03,440
and if you'd like to read more both on

00:30:02,559 --> 00:30:05,840
biology

00:30:03,440 --> 00:30:07,600
how rust plays in or computational

00:30:05,840 --> 00:30:10,000
biology and different methods and

00:30:07,600 --> 00:30:12,720
algorithms to work with it

00:30:10,000 --> 00:30:14,159
feel free to contact me and feel free to

00:30:12,720 --> 00:30:20,320
look at the slides

00:30:14,159 --> 00:30:20,320

YouTube URL: https://www.youtube.com/watch?v=JRuH3gWx5zU


