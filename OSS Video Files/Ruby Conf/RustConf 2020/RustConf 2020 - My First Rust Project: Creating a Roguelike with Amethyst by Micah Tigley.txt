Title: RustConf 2020 - My First Rust Project: Creating a Roguelike with Amethyst by Micah Tigley
Publication date: 2021-04-19
Playlist: RustConf 2020
Description: 
	My First Rust Project: Creating a Roguelike with Amethyst by Micah Tigley

One of the biggest challenges to learning Rust is finding a project to continuously practice that newfound knowledge on. As someone with a background in front-end web development, the world of Rust was new and exciting to someone with limited systems programming experience. There were a number of open-source projects to choose from and so many areas to explore, it was a bit intimidating. I finally settled on Rust's game development community. This talk looks at my journey diving into game development with Rust by building my first roguelike game with the Amethyst game engine.
Captions: 
	00:00:16,000 --> 00:00:20,880
hey everyone my name is mika

00:00:17,840 --> 00:00:22,480
and my pronouns are she enter today i'm

00:00:20,880 --> 00:00:23,439
going to talk about my beginnings with

00:00:22,480 --> 00:00:26,160
game development

00:00:23,439 --> 00:00:27,760
using the amethyst game engine when i

00:00:26,160 --> 00:00:29,760
first decided to do this talk

00:00:27,760 --> 00:00:31,199
i had intended to share a full 2d

00:00:29,760 --> 00:00:32,960
roguelike game

00:00:31,199 --> 00:00:34,719
but i found that my focus was in other

00:00:32,960 --> 00:00:36,960
areas of game development that i found

00:00:34,719 --> 00:00:38,800
more interesting to explore

00:00:36,960 --> 00:00:40,320
learning game development and rust has

00:00:38,800 --> 00:00:42,000
always been an on and off learning

00:00:40,320 --> 00:00:43,440
endeavor of mine and i'm excited to

00:00:42,000 --> 00:00:45,440
share some of those learnings with you

00:00:43,440 --> 00:00:47,200
today

00:00:45,440 --> 00:00:48,879
i'm just a developer looking to talk

00:00:47,200 --> 00:00:51,360
about one of her many in-progress

00:00:48,879 --> 00:00:51,360
projects

00:00:51,840 --> 00:00:56,160
so when i decided to learn a new

00:00:53,760 --> 00:00:56,960
programming language i tried to identify

00:00:56,160 --> 00:00:58,640
criteria

00:00:56,960 --> 00:01:00,000
outlining some of the things i'd like to

00:00:58,640 --> 00:01:02,000
get out of it

00:01:00,000 --> 00:01:04,080
and since my development experience was

00:01:02,000 --> 00:01:05,840
primarily in front-end web development

00:01:04,080 --> 00:01:07,200
i wanted to try picking up another

00:01:05,840 --> 00:01:09,200
language that was considered

00:01:07,200 --> 00:01:12,799
low-level or whose use cases were

00:01:09,200 --> 00:01:15,280
designed to work closer to the hardware

00:01:12,799 --> 00:01:17,200
another was documentation i think most

00:01:15,280 --> 00:01:18,960
people will appreciate that in any area

00:01:17,200 --> 00:01:20,560
of software development

00:01:18,960 --> 00:01:22,159
and being someone who likes to do

00:01:20,560 --> 00:01:23,520
independent reading and research on a

00:01:22,159 --> 00:01:25,360
topic at my own pace

00:01:23,520 --> 00:01:28,400
it really helps to have accessible

00:01:25,360 --> 00:01:30,880
documentation to refer to

00:01:28,400 --> 00:01:32,799
and finally having a welcome community

00:01:30,880 --> 00:01:34,240
helps lower the barrier to learning

00:01:32,799 --> 00:01:36,159
this was actually one of the biggest

00:01:34,240 --> 00:01:37,920
reasons that got me interested in rust

00:01:36,159 --> 00:01:40,000
since the community surrounding it is

00:01:37,920 --> 00:01:42,560
dedicated to making it a fun and safe

00:01:40,000 --> 00:01:42,560
place to be

00:01:43,119 --> 00:01:47,280
so in general i was looking to learn a

00:01:45,200 --> 00:01:48,880
new language that presented not only a

00:01:47,280 --> 00:01:49,520
challenge but also a history that

00:01:48,880 --> 00:01:51,520
emphasized

00:01:49,520 --> 00:01:53,040
open collaboration and that's how i

00:01:51,520 --> 00:01:54,560
arrived at rest

00:01:53,040 --> 00:01:56,950
and it also helps that the language's

00:01:54,560 --> 00:01:59,360
mascot is pretty cute

00:01:56,950 --> 00:02:01,360
[Music]

00:01:59,360 --> 00:02:03,119
so i think like most people who are

00:02:01,360 --> 00:02:04,799
getting it started with rust

00:02:03,119 --> 00:02:06,719
one of the first things i did to

00:02:04,799 --> 00:02:08,720
jumpstart my learning was a combination

00:02:06,719 --> 00:02:10,399
of reading the rust programming language

00:02:08,720 --> 00:02:11,120
and trying out some of the concepts in

00:02:10,399 --> 00:02:13,760
the rust

00:02:11,120 --> 00:02:15,680
playground and this was a good way for

00:02:13,760 --> 00:02:19,440
me to get a bit of a foundation before

00:02:15,680 --> 00:02:19,440
jumping into actual rest projects

00:02:19,680 --> 00:02:23,599
and once i felt like i had some of the

00:02:21,200 --> 00:02:24,160
basics of rust i decided to contribute

00:02:23,599 --> 00:02:26,400
to a few

00:02:24,160 --> 00:02:28,160
open source projects one of the first

00:02:26,400 --> 00:02:29,920
things i did was update the standard

00:02:28,160 --> 00:02:31,280
library documentation for the string

00:02:29,920 --> 00:02:33,280
slice type

00:02:31,280 --> 00:02:35,599
and later on i made some contributions

00:02:33,280 --> 00:02:37,519
to the servo web browser engine project

00:02:35,599 --> 00:02:40,640
where i implemented a few of the missing

00:02:37,519 --> 00:02:42,640
attributes on the mouse event interface

00:02:40,640 --> 00:02:44,400
and unfortunately i haven't been able to

00:02:42,640 --> 00:02:45,040
contribute to other open source projects

00:02:44,400 --> 00:02:46,640
this year

00:02:45,040 --> 00:02:50,400
but hopefully i can find some time in

00:02:46,640 --> 00:02:52,080
the future

00:02:50,400 --> 00:02:53,599
but of course there's just so much to

00:02:52,080 --> 00:02:55,760
know about rust and

00:02:53,599 --> 00:02:57,920
so much to learn about it and it's hard

00:02:55,760 --> 00:03:00,400
to keep track of what i've learned

00:02:57,920 --> 00:03:01,040
and while i was writing this talk it was

00:03:00,400 --> 00:03:02,879
actually

00:03:01,040 --> 00:03:04,640
already difficult to get a grasp of

00:03:02,879 --> 00:03:06,239
where i wanted to begin and eventually

00:03:04,640 --> 00:03:07,920
lead into what i've learned about game

00:03:06,239 --> 00:03:10,000
development

00:03:07,920 --> 00:03:13,200
the amount of things to do can get

00:03:10,000 --> 00:03:13,200
pretty overwhelming

00:03:14,000 --> 00:03:18,560
so to help with this i had to choose an

00:03:16,480 --> 00:03:22,239
area i was interested in

00:03:18,560 --> 00:03:22,239
and so i began my search

00:03:22,319 --> 00:03:25,920
and to no one's surprise i arrived at

00:03:24,400 --> 00:03:27,920
game development

00:03:25,920 --> 00:03:29,920
video games have always been an

00:03:27,920 --> 00:03:31,840
important part of my life

00:03:29,920 --> 00:03:34,319
and it felt natural to choose this area

00:03:31,840 --> 00:03:35,280
of software development to sink my teeth

00:03:34,319 --> 00:03:37,200
into

00:03:35,280 --> 00:03:39,599
i wasn't looking to create the next big

00:03:37,200 --> 00:03:43,440
indie title but rather just create a few

00:03:39,599 --> 00:03:45,519
projects that i could lightly work on

00:03:43,440 --> 00:03:48,080
and some experimentation had me

00:03:45,519 --> 00:03:49,760
interested in developing a roguelike

00:03:48,080 --> 00:03:51,200
there's a couple good tutorials on how

00:03:49,760 --> 00:03:53,040
to create your own and while i was

00:03:51,200 --> 00:03:54,879
working on my first game i found that i

00:03:53,040 --> 00:03:56,280
was actually more interested in creating

00:03:54,879 --> 00:03:58,879
a 2d rendered game

00:03:56,280 --> 00:04:01,200
[Music]

00:03:58,879 --> 00:04:02,879
and i wanted to do this in rust and so

00:04:01,200 --> 00:04:04,159
one of the first places i went to get

00:04:02,879 --> 00:04:06,080
some information

00:04:04,159 --> 00:04:08,319
was checking out the are we game yet

00:04:06,080 --> 00:04:09,920
website i thought this was a good place

00:04:08,319 --> 00:04:11,280
to get some ideas of what i might need

00:04:09,920 --> 00:04:14,480
to build a 2d game

00:04:11,280 --> 00:04:15,680
using rust but of course the game

00:04:14,480 --> 00:04:18,400
development space

00:04:15,680 --> 00:04:20,160
can be pretty intimidating in itself and

00:04:18,400 --> 00:04:21,280
as someone with basic knowledge of

00:04:20,160 --> 00:04:23,600
computer graphics

00:04:21,280 --> 00:04:25,520
amongst other things it was difficult

00:04:23,600 --> 00:04:28,880
knowing where to start

00:04:25,520 --> 00:04:31,120
i was also interested in drawing some 2d

00:04:28,880 --> 00:04:33,120
sprites to the screen more so

00:04:31,120 --> 00:04:36,880
and so i needed a library that would do

00:04:33,120 --> 00:04:36,880
most of the heavy lifting for me

00:04:36,960 --> 00:04:42,160
and luckily that is what game engines

00:04:39,280 --> 00:04:45,040
are for

00:04:42,160 --> 00:04:46,880
so when looking for a game engine to use

00:04:45,040 --> 00:04:49,759
i was more concerned about finding one

00:04:46,880 --> 00:04:51,759
that provided accessible documentation

00:04:49,759 --> 00:04:52,800
and hands-on learning and some examples

00:04:51,759 --> 00:04:56,000
to help demonstrate

00:04:52,800 --> 00:04:58,479
certain concepts

00:04:56,000 --> 00:05:00,479
and from the are we game yet website i

00:04:58,479 --> 00:05:01,360
was able to find the amethyst game

00:05:00,479 --> 00:05:03,280
engine

00:05:01,360 --> 00:05:06,240
this is a screenshot of the project's

00:05:03,280 --> 00:05:08,400
landing page at amethyst.rs

00:05:06,240 --> 00:05:10,160
as i researched the project i found that

00:05:08,400 --> 00:05:10,639
it checked off everything i was looking

00:05:10,160 --> 00:05:13,680
for

00:05:10,639 --> 00:05:15,759
in a game development written in rust

00:05:13,680 --> 00:05:17,440
and the documentation for amethyst was

00:05:15,759 --> 00:05:18,400
easily available through the project's

00:05:17,440 --> 00:05:20,240
website

00:05:18,400 --> 00:05:21,600
i never really felt the resources they

00:05:20,240 --> 00:05:24,000
provided were scattered

00:05:21,600 --> 00:05:25,919
which is a huge plus for me and some of

00:05:24,000 --> 00:05:28,240
the things i found really nice is that

00:05:25,919 --> 00:05:31,360
amethyst provides a book that entails

00:05:28,240 --> 00:05:33,759
not only how to use the engine

00:05:31,360 --> 00:05:36,560
but also talks a little bit about ecs

00:05:33,759 --> 00:05:38,160
which is a topic i will talk about later

00:05:36,560 --> 00:05:40,720
it also provides links to its

00:05:38,160 --> 00:05:44,320
communities online api reference

00:05:40,720 --> 00:05:44,320
and also to their examples

00:05:45,199 --> 00:05:48,720
and the book also has a section where

00:05:47,039 --> 00:05:49,680
you can build a pong clone using

00:05:48,720 --> 00:05:51,680
amethyst

00:05:49,680 --> 00:05:53,440
this was a really nice hands-on project

00:05:51,680 --> 00:05:54,400
to help understand the basics of using

00:05:53,440 --> 00:05:56,720
the engine

00:05:54,400 --> 00:05:58,560
and i also felt that it was enough to

00:05:56,720 --> 00:06:01,759
start experimenting with my own projects

00:05:58,560 --> 00:06:01,759
once i was finished with it

00:06:02,720 --> 00:06:06,000
and finally there were many

00:06:04,840 --> 00:06:08,639
implementation

00:06:06,000 --> 00:06:10,080
examples showing what amethyst can do

00:06:08,639 --> 00:06:12,319
and these examples were readily

00:06:10,080 --> 00:06:13,360
compilable and were easy to experiment

00:06:12,319 --> 00:06:15,039
with

00:06:13,360 --> 00:06:16,800
another nice thing about this project

00:06:15,039 --> 00:06:18,880
was that there are a few games available

00:06:16,800 --> 00:06:21,840
on its blog that showcase the game

00:06:18,880 --> 00:06:21,840
engine's features

00:06:23,039 --> 00:06:26,400
and after doing some learning and

00:06:24,800 --> 00:06:28,000
experimentation with rust

00:06:26,400 --> 00:06:30,080
i decided to take what i learned and

00:06:28,000 --> 00:06:31,520
apply it to what i wanted to make in the

00:06:30,080 --> 00:06:33,600
first place

00:06:31,520 --> 00:06:34,960
which was simply drawing 2d sprites to

00:06:33,600 --> 00:06:36,960
the screen

00:06:34,960 --> 00:06:38,080
i wanted to break down this section into

00:06:36,960 --> 00:06:40,960
three parts

00:06:38,080 --> 00:06:42,960
explaining what ecs is showing how i

00:06:40,960 --> 00:06:43,680
went about implementing a 2d spray

00:06:42,960 --> 00:06:46,000
animation

00:06:43,680 --> 00:06:48,160
using this framework and finally i'll

00:06:46,000 --> 00:06:50,000
extend on this by explaining how i went

00:06:48,160 --> 00:06:53,120
about implementing a camera follow

00:06:50,000 --> 00:06:53,120
system for the player

00:06:54,000 --> 00:07:00,400
so what exactly is ecs

00:06:57,120 --> 00:07:02,880
ecs stands for entity component system

00:07:00,400 --> 00:07:03,520
where an entity in your game represents

00:07:02,880 --> 00:07:07,039
a single

00:07:03,520 --> 00:07:08,160
object an entity often represented with

00:07:07,039 --> 00:07:09,599
a single id

00:07:08,160 --> 00:07:12,080
can be composed of a number of

00:07:09,599 --> 00:07:13,440
components where a component acts like a

00:07:12,080 --> 00:07:17,840
container for data

00:07:13,440 --> 00:07:20,319
that can describe an aspect of an object

00:07:17,840 --> 00:07:22,560
and finally a system is a piece of logic

00:07:20,319 --> 00:07:24,720
that can operate on one or more entities

00:07:22,560 --> 00:07:26,800
in the game

00:07:24,720 --> 00:07:28,479
ecs is a common pattern used in game

00:07:26,800 --> 00:07:29,039
development and it makes it easy to

00:07:28,479 --> 00:07:31,199
compose

00:07:29,039 --> 00:07:34,479
objects since components can be

00:07:31,199 --> 00:07:36,479
arbitrarily added to entities

00:07:34,479 --> 00:07:38,479
and so there's that piece of theory when

00:07:36,479 --> 00:07:40,319
i first read about ecs i needed some

00:07:38,479 --> 00:07:42,720
time to build a simple mental model of

00:07:40,319 --> 00:07:44,560
what it could look like in practice

00:07:42,720 --> 00:07:46,400
and so let's shift into something that's

00:07:44,560 --> 00:07:46,960
more fun to talk about while also trying

00:07:46,400 --> 00:07:50,080
to build

00:07:46,960 --> 00:07:50,080
on this mental model

00:07:50,639 --> 00:07:54,160
let's talk about animal crossing new

00:07:53,280 --> 00:07:57,599
horizons

00:07:54,160 --> 00:07:58,560
on the switch animal crossing is a cute

00:07:57,599 --> 00:08:00,720
laid-back game

00:07:58,560 --> 00:08:03,120
where you get to build an island society

00:08:00,720 --> 00:08:05,039
of cute anthropomorphic animals

00:08:03,120 --> 00:08:06,960
and in this image and the game in

00:08:05,039 --> 00:08:09,680
general we can probably apply

00:08:06,960 --> 00:08:12,400
some of the ideas of ecs to help build

00:08:09,680 --> 00:08:13,759
our understanding of it

00:08:12,400 --> 00:08:16,080
and there's a lot of things on the

00:08:13,759 --> 00:08:18,080
island that we can identify as objects

00:08:16,080 --> 00:08:20,560
which are represented by entities in the

00:08:18,080 --> 00:08:23,280
world of animal crossing new horizons

00:08:20,560 --> 00:08:23,280
for example

00:08:23,680 --> 00:08:26,879
the player character is an entity

00:08:26,000 --> 00:08:29,440
isabella

00:08:26,879 --> 00:08:30,560
is an entity timmy and tommy are

00:08:29,440 --> 00:08:32,959
entities

00:08:30,560 --> 00:08:34,159
and even this tree is an entity you get

00:08:32,959 --> 00:08:35,839
the point

00:08:34,159 --> 00:08:37,440
but it feels wrong to describe our

00:08:35,839 --> 00:08:40,719
island residents as just

00:08:37,440 --> 00:08:42,719
entities after all an entity is usually

00:08:40,719 --> 00:08:44,320
represented by a single id

00:08:42,719 --> 00:08:46,800
that has a number of components

00:08:44,320 --> 00:08:48,800
associated with it we need to be able to

00:08:46,800 --> 00:08:50,800
associate some data with them

00:08:48,800 --> 00:08:52,640
and to keep things simple i wanted to

00:08:50,800 --> 00:08:56,240
focus on describing data for the

00:08:52,640 --> 00:08:56,240
villagers in animal crossing

00:08:56,720 --> 00:09:00,560
for some context villagers are

00:08:58,640 --> 00:09:01,839
non-playable characters that can move to

00:09:00,560 --> 00:09:04,240
your island by either

00:09:01,839 --> 00:09:07,279
randomly moving there or finding them on

00:09:04,240 --> 00:09:09,200
another island the player is exploring

00:09:07,279 --> 00:09:10,480
and they become residents of the little

00:09:09,200 --> 00:09:12,399
town you've created

00:09:10,480 --> 00:09:13,680
they can also do activities similar to

00:09:12,399 --> 00:09:17,040
the player such as

00:09:13,680 --> 00:09:18,800
fishing gardening and exploring

00:09:17,040 --> 00:09:20,720
and the player can interact with these

00:09:18,800 --> 00:09:22,480
villagers and even develop friendships

00:09:20,720 --> 00:09:24,640
with them

00:09:22,480 --> 00:09:26,640
and this being my first animal crossing

00:09:24,640 --> 00:09:28,160
game i thought what made a villager

00:09:26,640 --> 00:09:30,160
special is that they added more

00:09:28,160 --> 00:09:32,240
characters to the island by well

00:09:30,160 --> 00:09:33,200
being cute and though i've learned

00:09:32,240 --> 00:09:35,360
recently

00:09:33,200 --> 00:09:36,959
that each villager shares attributes

00:09:35,360 --> 00:09:39,040
that are unique to each of them

00:09:36,959 --> 00:09:40,800
that actually influence how they

00:09:39,040 --> 00:09:43,279
interact with other villagers on the

00:09:40,800 --> 00:09:43,279
island

00:09:43,600 --> 00:09:47,120
and so here's one of the first villagers

00:09:45,279 --> 00:09:49,200
that moved to my island her name is

00:09:47,120 --> 00:09:50,640
flurry and she's a hamster

00:09:49,200 --> 00:09:52,640
and the moment i found her while

00:09:50,640 --> 00:09:54,240
exploring another island i just had to

00:09:52,640 --> 00:09:55,920
take her own home with me

00:09:54,240 --> 00:09:57,839
i just love how she has those cute

00:09:55,920 --> 00:10:00,640
little blue eyebrows and paws

00:09:57,839 --> 00:10:03,040
and red t-shirt and she's just the

00:10:00,640 --> 00:10:05,600
cutest thing ever

00:10:03,040 --> 00:10:06,320
anyway there are specific attributes

00:10:05,600 --> 00:10:08,399
villagers

00:10:06,320 --> 00:10:10,880
have and i didn't list all of them here

00:10:08,399 --> 00:10:12,880
since i wanted to keep this simple

00:10:10,880 --> 00:10:14,640
attributes that specifically describe a

00:10:12,880 --> 00:10:17,760
villager will be its species

00:10:14,640 --> 00:10:18,000
personality and hobby these attributes

00:10:17,760 --> 00:10:19,760
will

00:10:18,000 --> 00:10:22,480
be contained by what i will call a

00:10:19,760 --> 00:10:24,240
villager component

00:10:22,480 --> 00:10:26,399
and you'll notice that the name and

00:10:24,240 --> 00:10:28,800
birthday attributes

00:10:26,399 --> 00:10:30,240
weren't included because i think these

00:10:28,800 --> 00:10:32,959
uh attributes should be

00:10:30,240 --> 00:10:36,000
included in a separate component which

00:10:32,959 --> 00:10:36,000
we will talk about later

00:10:36,800 --> 00:10:41,040
so with amethyst declaring components

00:10:39,120 --> 00:10:42,000
requires us to define the data being

00:10:41,040 --> 00:10:43,839
described

00:10:42,000 --> 00:10:45,839
and in this example we declare a

00:10:43,839 --> 00:10:47,600
villager struct which contains

00:10:45,839 --> 00:10:49,120
information about that component's

00:10:47,600 --> 00:10:52,079
species personality

00:10:49,120 --> 00:10:52,079
and hobby types

00:10:53,040 --> 00:10:57,360
and once the underlying data for the

00:10:55,279 --> 00:10:59,440
component is defined we then have to

00:10:57,360 --> 00:11:00,399
implement the component traits for the

00:10:59,440 --> 00:11:02,399
villager

00:11:00,399 --> 00:11:04,079
the storage type determines how the

00:11:02,399 --> 00:11:04,880
component will be stored and in this

00:11:04,079 --> 00:11:07,760
example

00:11:04,880 --> 00:11:09,200
the dense vector storage type which is

00:11:07,760 --> 00:11:10,880
where elements are stored in a

00:11:09,200 --> 00:11:14,320
contiguous vector

00:11:10,880 --> 00:11:16,640
it allows for lower use memory usage

00:11:14,320 --> 00:11:19,680
and it also like and for also dealing

00:11:16,640 --> 00:11:19,680
with larger components

00:11:20,640 --> 00:11:24,640
in this diagram is to help visualize how

00:11:22,720 --> 00:11:27,200
the villager component is

00:11:24,640 --> 00:11:29,120
added to an entity in the game in

00:11:27,200 --> 00:11:29,760
amethyst whenever a new component is

00:11:29,120 --> 00:11:32,000
created

00:11:29,760 --> 00:11:33,360
it's added to a storage responsible for

00:11:32,000 --> 00:11:36,480
storing components

00:11:33,360 --> 00:11:38,160
of a specific type and in this diagram

00:11:36,480 --> 00:11:40,839
we can create a number of villager

00:11:38,160 --> 00:11:42,000
components and add them to specific

00:11:40,839 --> 00:11:45,200
entities

00:11:42,000 --> 00:11:46,880
here we can see that the entity zero

00:11:45,200 --> 00:11:48,959
is associated with the villager

00:11:46,880 --> 00:11:50,959
component that describes flurry

00:11:48,959 --> 00:11:56,480
and this is similarly done for the other

00:11:50,959 --> 00:11:58,959
entities representing villagers and so

00:11:56,480 --> 00:12:00,399
to do this with amethyst we have to get

00:11:58,959 --> 00:12:02,720
a reference to the world

00:12:00,399 --> 00:12:04,480
which acts as a container for resources

00:12:02,720 --> 00:12:07,200
in your game

00:12:04,480 --> 00:12:09,360
to create a new entity in the game we

00:12:07,200 --> 00:12:11,680
first need to import the builder traits

00:12:09,360 --> 00:12:12,160
which allows us to create the entity

00:12:11,680 --> 00:12:15,279
builder

00:12:12,160 --> 00:12:18,079
using create entity using the

00:12:15,279 --> 00:12:19,600
entity builder we can add component to

00:12:18,079 --> 00:12:22,000
that entity

00:12:19,600 --> 00:12:25,839
and in this example we add the villager

00:12:22,000 --> 00:12:25,839
component we defined earlier

00:12:26,320 --> 00:12:32,720
finally we can finish building and get

00:12:28,720 --> 00:12:32,720
the actual entity by calling build

00:12:33,920 --> 00:12:37,920
now we can extend this by using the name

00:12:36,240 --> 00:12:38,959
and birthday attributes in another

00:12:37,920 --> 00:12:40,560
component

00:12:38,959 --> 00:12:42,560
i decided to call it the resident

00:12:40,560 --> 00:12:44,399
component since it generically describes

00:12:42,560 --> 00:12:46,639
any character on the island

00:12:44,399 --> 00:12:48,160
and in this example i've added another

00:12:46,639 --> 00:12:50,880
entity entity 3

00:12:48,160 --> 00:12:52,720
meant to represent the player character

00:12:50,880 --> 00:12:54,720
and since villagers also have names and

00:12:52,720 --> 00:12:57,040
birthdays the resident component

00:12:54,720 --> 00:13:00,880
can also be reused and attached to

00:12:57,040 --> 00:13:00,880
entities with the villager component

00:13:01,440 --> 00:13:05,440
so now let's move into the section on

00:13:03,680 --> 00:13:09,760
getting a simple sprite sheet

00:13:05,440 --> 00:13:11,760
animation working using amethyst

00:13:09,760 --> 00:13:13,760
but before we get started i wanted to

00:13:11,760 --> 00:13:15,600
explain that a sprite sheet animation is

00:13:13,760 --> 00:13:18,160
simply taking a sprite sheet

00:13:15,600 --> 00:13:19,920
and changing what sprite image or frame

00:13:18,160 --> 00:13:22,560
is drawn to the screen in rapid

00:13:19,920 --> 00:13:22,560
succession

00:13:22,800 --> 00:13:28,880
this gives the illusion of movement much

00:13:24,959 --> 00:13:28,880
like how one would see with a flip book

00:13:29,760 --> 00:13:33,839
so the first thing we should do is

00:13:31,839 --> 00:13:37,200
describe the relevant components for the

00:13:33,839 --> 00:13:37,200
sprite sheet animation

00:13:37,279 --> 00:13:40,639
the first is the animation component

00:13:39,360 --> 00:13:44,000
which has attributes

00:13:40,639 --> 00:13:46,079
frames frame duration and index

00:13:44,000 --> 00:13:48,800
frames describe the number of sprite

00:13:46,079 --> 00:13:51,279
images for one animation cycle

00:13:48,800 --> 00:13:52,480
frame duration describes how long each

00:13:51,279 --> 00:13:55,440
image should be

00:13:52,480 --> 00:13:57,360
shown for an index indicates where in

00:13:55,440 --> 00:13:59,760
the sprite sheet the first image of the

00:13:57,360 --> 00:14:01,920
animation is

00:13:59,760 --> 00:14:03,120
and the second component is provided by

00:14:01,920 --> 00:14:06,000
an

00:14:03,120 --> 00:14:06,639
amethyst it's responsible for containing

00:14:06,000 --> 00:14:08,560
data

00:14:06,639 --> 00:14:11,120
about the sprite sheet and which image

00:14:08,560 --> 00:14:13,360
from the sheet to draw to the screen

00:14:11,120 --> 00:14:16,240
the data used to describe this is a

00:14:13,360 --> 00:14:18,079
sprite this is sprite sheet

00:14:16,240 --> 00:14:19,360
and this is a reference to the sprite

00:14:18,079 --> 00:14:21,440
sheet asset

00:14:19,360 --> 00:14:22,480
and in amethyst these reference to

00:14:21,440 --> 00:14:25,120
texture

00:14:22,480 --> 00:14:25,600
assets are known as handles and sprite

00:14:25,120 --> 00:14:27,760
number

00:14:25,600 --> 00:14:31,839
is the location of the sprite image in

00:14:27,760 --> 00:14:31,839
the sprite sheet

00:14:32,639 --> 00:14:37,279
now associating a component with an

00:14:34,800 --> 00:14:39,760
entity doesn't do much on its own

00:14:37,279 --> 00:14:42,720
our animation needs a way to manipulate

00:14:39,760 --> 00:14:45,600
what sprite image is drawn to the screen

00:14:42,720 --> 00:14:46,800
during each game cycle and this is where

00:14:45,600 --> 00:14:50,639
implementation of an

00:14:46,800 --> 00:14:50,639
animation system comes in

00:14:51,199 --> 00:14:55,519
in this diagram we implement an

00:14:53,199 --> 00:14:57,920
animation system with amethyst

00:14:55,519 --> 00:15:00,079
by having that system read or write data

00:14:57,920 --> 00:15:02,720
for different component storages during

00:15:00,079 --> 00:15:05,040
each iteration of the game loop

00:15:02,720 --> 00:15:07,279
this example shows that the animation

00:15:05,040 --> 00:15:07,920
system being implemented will read from

00:15:07,279 --> 00:15:10,560
the time

00:15:07,920 --> 00:15:12,160
resource resources in amethyst are

00:15:10,560 --> 00:15:14,399
containers of data that are not

00:15:12,160 --> 00:15:17,279
associated with an entity

00:15:14,399 --> 00:15:19,839
and then the animation system reads from

00:15:17,279 --> 00:15:22,639
the animation component storage

00:15:19,839 --> 00:15:23,199
and finally the animation system will

00:15:22,639 --> 00:15:25,600
write

00:15:23,199 --> 00:15:26,720
to an entity sprite render component in

00:15:25,600 --> 00:15:28,959
particular

00:15:26,720 --> 00:15:31,040
the sprite render sprite number value

00:15:28,959 --> 00:15:32,480
will be modified to tell amethyst to

00:15:31,040 --> 00:15:36,639
draw the next image

00:15:32,480 --> 00:15:36,639
in the animation sequence to the screen

00:15:38,000 --> 00:15:42,959
and this is what the animation system

00:15:39,920 --> 00:15:44,720
would look like using amethyst

00:15:42,959 --> 00:15:46,079
implementing a system involves

00:15:44,720 --> 00:15:48,959
implementing the system

00:15:46,079 --> 00:15:49,279
trait on a struct and this system is

00:15:48,959 --> 00:15:51,920
then

00:15:49,279 --> 00:15:54,639
executed during each iteration of the

00:15:51,920 --> 00:15:57,040
game loop

00:15:54,639 --> 00:15:59,279
and when we define the system amethyst

00:15:57,040 --> 00:16:01,920
requires us to define a type called

00:15:59,279 --> 00:16:04,079
system data which tells the system what

00:16:01,920 --> 00:16:04,560
data from the engine it should expect to

00:16:04,079 --> 00:16:08,720
get

00:16:04,560 --> 00:16:11,040
and how it should be interacting with it

00:16:08,720 --> 00:16:12,959
some of the system data types amethyst

00:16:11,040 --> 00:16:14,880
provides are read storage

00:16:12,959 --> 00:16:16,320
which gives these the system an

00:16:14,880 --> 00:16:18,240
immutable reference

00:16:16,320 --> 00:16:20,880
to the entire storage containing the

00:16:18,240 --> 00:16:23,440
animation components

00:16:20,880 --> 00:16:24,079
on the flip side there is also the right

00:16:23,440 --> 00:16:26,560
storage

00:16:24,079 --> 00:16:27,199
data type which gives us a mutable

00:16:26,560 --> 00:16:29,120
reference

00:16:27,199 --> 00:16:31,199
to the entire storage containing the

00:16:29,120 --> 00:16:33,440
sprite render components

00:16:31,199 --> 00:16:34,480
and then there's the read data type and

00:16:33,440 --> 00:16:39,680
this gives us an

00:16:34,480 --> 00:16:41,920
immutable reference to the time resource

00:16:39,680 --> 00:16:42,800
and now the next step is to implement

00:16:41,920 --> 00:16:46,480
the systems

00:16:42,800 --> 00:16:49,360
run method in our animation

00:16:46,480 --> 00:16:51,839
systems run method we get all entities

00:16:49,360 --> 00:16:54,079
with an associated animation and sprite

00:16:51,839 --> 00:16:57,040
render component

00:16:54,079 --> 00:16:58,800
this is done using join and this allows

00:16:57,040 --> 00:17:00,880
for the joining of components

00:16:58,800 --> 00:17:04,079
for iteration over entities with

00:17:00,880 --> 00:17:06,480
specific components

00:17:04,079 --> 00:17:08,559
and now that we have that entity we need

00:17:06,480 --> 00:17:10,799
to find which frame to use for the

00:17:08,559 --> 00:17:14,880
sprite render's number value

00:17:10,799 --> 00:17:17,360
depending on the game's elapsed time

00:17:14,880 --> 00:17:19,280
and finally we can modify the entity's

00:17:17,360 --> 00:17:22,079
sprite render to draw the new

00:17:19,280 --> 00:17:22,079
sprite image

00:17:22,720 --> 00:17:27,199
and here's the final result of an idle m

00:17:25,520 --> 00:17:29,679
animation for the wizard

00:17:27,199 --> 00:17:29,679
sprite

00:17:30,799 --> 00:17:34,080
however it would be much more

00:17:32,320 --> 00:17:37,200
interesting if the player could

00:17:34,080 --> 00:17:37,919
move around some sort of environment to

00:17:37,200 --> 00:17:40,080
do this

00:17:37,919 --> 00:17:42,799
we can design another system that is

00:17:40,080 --> 00:17:45,360
responsible for moving the player around

00:17:42,799 --> 00:17:47,360
and for this system our game will read

00:17:45,360 --> 00:17:50,000
from the input handler resource

00:17:47,360 --> 00:17:51,840
provided by amethyst and will also be

00:17:50,000 --> 00:17:54,240
writing to an entity's transform

00:17:51,840 --> 00:17:56,000
component storage

00:17:54,240 --> 00:17:57,600
the transform component storage is

00:17:56,000 --> 00:18:00,160
available through amethyst

00:17:57,600 --> 00:18:00,720
and it's a common component to use this

00:18:00,160 --> 00:18:02,880
is because

00:18:00,720 --> 00:18:04,240
transform can describe an entity's

00:18:02,880 --> 00:18:08,240
position rotation

00:18:04,240 --> 00:18:10,000
scale and much more and for this game

00:18:08,240 --> 00:18:12,000
we're really only concerned about

00:18:10,000 --> 00:18:16,559
modifying an entity's position

00:18:12,000 --> 00:18:16,559
and rotation in response to user input

00:18:17,120 --> 00:18:20,640
and now that a system is in place for

00:18:18,880 --> 00:18:22,720
the player to move around

00:18:20,640 --> 00:18:24,720
it might be nice to have another system

00:18:22,720 --> 00:18:26,480
that consists of a camera that tracks

00:18:24,720 --> 00:18:27,679
the player's movement within the

00:18:26,480 --> 00:18:29,520
environment

00:18:27,679 --> 00:18:31,679
and at the time of writing this i found

00:18:29,520 --> 00:18:34,000
that simply attaching subject tags

00:18:31,679 --> 00:18:37,280
to particular entities made implementing

00:18:34,000 --> 00:18:39,600
the system straightforward

00:18:37,280 --> 00:18:40,400
in particular i created a player subject

00:18:39,600 --> 00:18:42,240
component

00:18:40,400 --> 00:18:44,240
that i associated with an entity

00:18:42,240 --> 00:18:46,400
designated as a player

00:18:44,240 --> 00:18:48,559
the camera subject component is also

00:18:46,400 --> 00:18:50,320
associated with an entity designed as

00:18:48,559 --> 00:18:52,240
the camera view

00:18:50,320 --> 00:18:54,240
and the camera follow system would then

00:18:52,240 --> 00:18:55,039
modify the associated transform

00:18:54,240 --> 00:18:59,679
components

00:18:55,039 --> 00:18:59,679
for both the player and camera entities

00:19:01,440 --> 00:19:05,520
and the result within looks something

00:19:02,960 --> 00:19:06,080
like this here i have the same wizard

00:19:05,520 --> 00:19:07,840
sprite

00:19:06,080 --> 00:19:11,840
moving through the game's environment

00:19:07,840 --> 00:19:11,840
with a camera following their movements

00:19:12,400 --> 00:19:15,679
and there's also a few things i wanted

00:19:13,840 --> 00:19:17,360
to say about this demo

00:19:15,679 --> 00:19:19,360
earlier in this talk i mentioned how i

00:19:17,360 --> 00:19:20,320
dabbled a bit developing a simple

00:19:19,360 --> 00:19:22,240
roguelike

00:19:20,320 --> 00:19:24,000
and one thing that i became particularly

00:19:22,240 --> 00:19:26,000
interested in is being able to generate

00:19:24,000 --> 00:19:27,360
a random tile map that would act as the

00:19:26,000 --> 00:19:29,840
environments the player could move

00:19:27,360 --> 00:19:29,840
around in

00:19:30,240 --> 00:19:34,640
and so as another mini side project that

00:19:32,559 --> 00:19:35,360
was separate from my project that used

00:19:34,640 --> 00:19:37,280
amethyst

00:19:35,360 --> 00:19:39,919
i played around with developing a tile

00:19:37,280 --> 00:19:43,520
map generator that i could use

00:19:39,919 --> 00:19:44,160
potentially in my game and the image i

00:19:43,520 --> 00:19:46,640
have here

00:19:44,160 --> 00:19:49,120
is a generated background image used in

00:19:46,640 --> 00:19:49,120
the demo

00:19:49,200 --> 00:19:52,320
and for this small project i used a

00:19:50,960 --> 00:19:54,320
crate called image

00:19:52,320 --> 00:19:56,320
to extract pixel data from a source

00:19:54,320 --> 00:19:58,160
sprite sheet and had it put into an

00:19:56,320 --> 00:19:59,600
image buffer

00:19:58,160 --> 00:20:01,360
and this image buffer would then be

00:19:59,600 --> 00:20:04,400
outputted as a png image

00:20:01,360 --> 00:20:07,120
local to the project directory

00:20:04,400 --> 00:20:08,320
the generated map images aren't perfect

00:20:07,120 --> 00:20:10,480
but it was a fun

00:20:08,320 --> 00:20:13,120
way to learn and see different layouts

00:20:10,480 --> 00:20:16,240
for the game environment

00:20:13,120 --> 00:20:18,080
and see since these are only images um i

00:20:16,240 --> 00:20:20,080
i'd have to still extend my game and

00:20:18,080 --> 00:20:20,559
develop some sort of collision system so

00:20:20,080 --> 00:20:22,240
that

00:20:20,559 --> 00:20:23,600
that the player cannot move through

00:20:22,240 --> 00:20:25,919
tiles that are considered

00:20:23,600 --> 00:20:25,919
walls

00:20:27,280 --> 00:20:30,960
so as you can see i wasn't able to

00:20:29,280 --> 00:20:32,799
complete a full game yet

00:20:30,960 --> 00:20:34,000
but being able to complete a small

00:20:32,799 --> 00:20:36,720
project like this has made

00:20:34,000 --> 00:20:38,559
the process much more enjoyable and the

00:20:36,720 --> 00:20:40,480
biggest takeaway from my learnings with

00:20:38,559 --> 00:20:41,840
that was that it's okay to iterate on

00:20:40,480 --> 00:20:45,840
project ideas

00:20:41,840 --> 00:20:45,840
do it at your own pace and also have fun

00:20:46,320 --> 00:20:50,400
and besides coding another way to keep

00:20:48,400 --> 00:20:52,799
myself motivated was to document

00:20:50,400 --> 00:20:54,559
some of what i learned i did this by

00:20:52,799 --> 00:20:56,880
writing a blog post as soon as i

00:20:54,559 --> 00:20:58,640
finished one section of my project

00:20:56,880 --> 00:20:59,919
and not only did it help retain my

00:20:58,640 --> 00:21:01,919
knowledge over time

00:20:59,919 --> 00:21:03,840
but it also challenged me to think about

00:21:01,919 --> 00:21:05,039
how i can communicate what i learned in

00:21:03,840 --> 00:21:08,960
a way that was helpful

00:21:05,039 --> 00:21:10,799
not only for myself but also others

00:21:08,960 --> 00:21:13,280
prior to this talk i actually wrote a

00:21:10,799 --> 00:21:16,000
blog post documenting how i implemented

00:21:13,280 --> 00:21:17,280
2d sprite animations using amethyst

00:21:16,000 --> 00:21:19,440
and one of the things i really

00:21:17,280 --> 00:21:23,200
appreciated my past self for doing

00:21:19,440 --> 00:21:23,200
was taking the time to establish

00:21:23,280 --> 00:21:27,600
context and also outline her thought

00:21:26,159 --> 00:21:30,240
process throughout

00:21:27,600 --> 00:21:32,320
and this was the most difficult part and

00:21:30,240 --> 00:21:34,240
also the most time consuming part of

00:21:32,320 --> 00:21:35,840
writing this otherwise short blog post

00:21:34,240 --> 00:21:37,360
because i really wanted to find a

00:21:35,840 --> 00:21:39,440
perfect balance between

00:21:37,360 --> 00:21:42,400
providing enough context while also

00:21:39,440 --> 00:21:44,240
being forthright in my content

00:21:42,400 --> 00:21:47,000
and if anyone's interested the link to

00:21:44,240 --> 00:21:50,000
the specific blog post is available at

00:21:47,000 --> 00:21:50,000
mtigley.dev

00:21:51,679 --> 00:21:55,520
and i wanted to touch on writing with

00:21:54,320 --> 00:21:58,240
the intent to teach

00:21:55,520 --> 00:22:00,159
someone like it's very useful it's even

00:21:58,240 --> 00:22:02,640
if it's just for yourself

00:22:00,159 --> 00:22:04,480
because it will help really ease doubts

00:22:02,640 --> 00:22:06,320
you have about your knowledge

00:22:04,480 --> 00:22:08,320
and one way to do this is to keep a

00:22:06,320 --> 00:22:08,799
series of blog posts and over time

00:22:08,320 --> 00:22:11,520
you'll have

00:22:08,799 --> 00:22:13,679
created your own repository of knowledge

00:22:11,520 --> 00:22:17,440
and who knows maybe someone will find

00:22:13,679 --> 00:22:17,440
what you wrote about really useful

00:22:18,080 --> 00:22:21,520
and so that's the end of my talk i

00:22:20,080 --> 00:22:24,320
wanted to thank everyone

00:22:21,520 --> 00:22:25,039
who came in to listen and thank you

00:22:24,320 --> 00:22:27,120
everyone

00:22:25,039 --> 00:22:28,880
who made this talk possible and

00:22:27,120 --> 00:22:30,880
hopefully anyone who is interested in

00:22:28,880 --> 00:22:36,240
either rust or game development will be

00:22:30,880 --> 00:22:36,240

YouTube URL: https://www.youtube.com/watch?v=T0fG6spkmYw


