Title: RustConf 2020 - Controlling Telescope Hardware with Rust by Ashley Hauck
Publication date: 2021-04-19
Playlist: RustConf 2020
Description: 
	Controlling Telescope Hardware with Rust by Ashley Hauck

Dive into hardware APIs as we explore how the hardware of an 8-inch aperture telescope can be controlled with Rust. In this talk, we'll explore using serial ports to drive complex motors and machinery, and using a native C API to download images from the camera and control the dozens of settings it has. As a bonus, learn some basics of astrophotography and see some pretty pictures I've taken with my telescope! All code is shared on github.

Code: https://github.com/khyperia/scopie
Ashley's twitter: https://twitter.com/khyperia
Pictures taken with her telescope: https://khyperia.com/space.html
All raw data that she has taken: https://khyperia.com/space/
Captions: 
	00:00:16,960 --> 00:00:20,640
hello everyone this is the controlling

00:00:18,800 --> 00:00:22,160
telescope hardware with rust talk we're

00:00:20,640 --> 00:00:24,800
going to be talking about

00:00:22,160 --> 00:00:27,119
telescope hardware and controlling that

00:00:24,800 --> 00:00:28,720
hardware with rust from a desktop

00:00:27,119 --> 00:00:30,480
and interacting with our hardware and

00:00:28,720 --> 00:00:33,120
how to do that

00:00:30,480 --> 00:00:34,719
so uh who am i i'm actually pronouncing

00:00:33,120 --> 00:00:37,520
sushi her

00:00:34,719 --> 00:00:38,640
uh all the code in this talk is going to

00:00:37,520 --> 00:00:40,879
be on github

00:00:38,640 --> 00:00:42,320
uh at the project name scopey it's a

00:00:40,879 --> 00:00:42,960
project name that i've been using for

00:00:42,320 --> 00:00:46,160
this

00:00:42,960 --> 00:00:48,480
code and on the right here uh is

00:00:46,160 --> 00:00:50,079
me in seattle last winter taking an

00:00:48,480 --> 00:00:52,879
image of the elephant's truck

00:00:50,079 --> 00:00:54,000
nebula and the result of that session

00:00:52,879 --> 00:00:55,520
was this image

00:00:54,000 --> 00:00:57,600
so on the left you have a very bright

00:00:55,520 --> 00:00:59,440
star that is blowing

00:00:57,600 --> 00:01:01,280
lots of solar radiation and whatnot at

00:00:59,440 --> 00:01:04,960
the gas cloud on the right

00:01:01,280 --> 00:01:06,720
more dense parts of that cloud um

00:01:04,960 --> 00:01:08,799
are more resistant to being pushed so

00:01:06,720 --> 00:01:10,400
you get these globs of dust remaining

00:01:08,799 --> 00:01:11,520
behind and if you really squint then

00:01:10,400 --> 00:01:13,360
those globs of dust

00:01:11,520 --> 00:01:16,400
sort of look like an elephant's trunk

00:01:13,360 --> 00:01:19,920
hence the name elephant's trunk nebula

00:01:16,400 --> 00:01:21,840
cool so we're going to be talking a

00:01:19,920 --> 00:01:23,759
little bit about how astronomy and

00:01:21,840 --> 00:01:25,680
astrophotography works

00:01:23,759 --> 00:01:27,600
in particular my setup so we have some

00:01:25,680 --> 00:01:29,040
context of some technical words

00:01:27,600 --> 00:01:31,280
and an understanding of what's going on

00:01:29,040 --> 00:01:33,280
before we jump into the code

00:01:31,280 --> 00:01:34,640
this is a newtonian telescope which is

00:01:33,280 --> 00:01:37,119
what i have

00:01:34,640 --> 00:01:39,040
light comes in the left bounces off a

00:01:37,119 --> 00:01:41,360
parabolic mirror on the right

00:01:39,040 --> 00:01:43,119
then in the middle or on the left here

00:01:41,360 --> 00:01:43,439
is a secondary mirror that redirects the

00:01:43,119 --> 00:01:46,560
light

00:01:43,439 --> 00:01:47,840
up top then normally if you're looking

00:01:46,560 --> 00:01:50,240
through this telescope with

00:01:47,840 --> 00:01:51,840
your own eyes you would have a lens here

00:01:50,240 --> 00:01:54,240
but instead we have a

00:01:51,840 --> 00:01:55,439
image sensor that sits directly on the

00:01:54,240 --> 00:01:57,439
focal point

00:01:55,439 --> 00:02:00,560
and collects the data directly and then

00:01:57,439 --> 00:02:02,079
we can pull the data off this camera

00:02:00,560 --> 00:02:04,320
what that actually looks like in real

00:02:02,079 --> 00:02:06,719
life is like this

00:02:04,320 --> 00:02:08,640
so uh light goes in on the left the

00:02:06,719 --> 00:02:10,160
mirror is on the right

00:02:08,640 --> 00:02:11,920
then buried in the middle here is that

00:02:10,160 --> 00:02:13,440
second mirror which

00:02:11,920 --> 00:02:16,480
redirects the light up top to that

00:02:13,440 --> 00:02:18,720
camera below that is the mount system

00:02:16,480 --> 00:02:20,879
so we have two motorized mounts the top

00:02:18,720 --> 00:02:22,560
one is called the declination axis

00:02:20,879 --> 00:02:24,879
then below that is the right ascension

00:02:22,560 --> 00:02:27,440
axis and these two motors combined let

00:02:24,879 --> 00:02:29,120
us look anywhere in the sky

00:02:27,440 --> 00:02:31,200
so what actually are right ascension

00:02:29,120 --> 00:02:33,120
declination so the sky needs a

00:02:31,200 --> 00:02:35,280
coordinate system to be able to uniquely

00:02:33,120 --> 00:02:38,480
identify any point in the sky

00:02:35,280 --> 00:02:40,720
we start off with using the earth's

00:02:38,480 --> 00:02:42,160
latitude and longitude as a base

00:02:40,720 --> 00:02:44,319
latitude is easy

00:02:42,160 --> 00:02:46,000
we just say that anything over the north

00:02:44,319 --> 00:02:48,640
pole directly over the north pole

00:02:46,000 --> 00:02:49,200
is 90 degrees north anything over the

00:02:48,640 --> 00:02:51,360
equator

00:02:49,200 --> 00:02:53,920
is zero degrees anything over the south

00:02:51,360 --> 00:02:57,360
pole is negative 90 degrees

00:02:53,920 --> 00:02:58,800
but uh the equivalent of longitude is a

00:02:57,360 --> 00:03:00,640
little bit more complicated since the

00:02:58,800 --> 00:03:01,760
earth obviously spins and we can't have

00:03:00,640 --> 00:03:04,480
our coordinate

00:03:01,760 --> 00:03:05,440
system spinning throughout the sky so

00:03:04,480 --> 00:03:08,400
instead

00:03:05,440 --> 00:03:09,280
the earth uses the zero degrees

00:03:08,400 --> 00:03:13,920
longitude is

00:03:09,280 --> 00:03:13,920
defined as being at greenwich in the uk

00:03:14,239 --> 00:03:18,560
instead we define zero degrees of right

00:03:16,879 --> 00:03:21,360
ascension as it's called

00:03:18,560 --> 00:03:22,720
as being the direction of the sun at the

00:03:21,360 --> 00:03:24,400
spring equinox

00:03:22,720 --> 00:03:26,799
it's kind of weird definition but that's

00:03:24,400 --> 00:03:30,879
what it is so cool

00:03:26,799 --> 00:03:32,879
um now we're able to uniquely identify

00:03:30,879 --> 00:03:35,200
any point in the sky

00:03:32,879 --> 00:03:35,200
and

00:03:36,239 --> 00:03:40,959
have that coordinate system importantly

00:03:39,120 --> 00:03:42,799
right ascension declination

00:03:40,959 --> 00:03:45,280
are aligned with the earth's rotation

00:03:42,799 --> 00:03:46,080
axis so our own motors need to be

00:03:45,280 --> 00:03:49,200
aligned with

00:03:46,080 --> 00:03:50,720
that earth's rotation axis which means

00:03:49,200 --> 00:03:51,599
that we need to tilt our motors

00:03:50,720 --> 00:03:53,680
equivalent to

00:03:51,599 --> 00:03:55,680
the latitude that we're currently at so

00:03:53,680 --> 00:03:57,519
seattle is 47 degrees north

00:03:55,680 --> 00:03:59,519
and so i've configured my telescope here

00:03:57,519 --> 00:04:04,400
to be used at seattle

00:03:59,519 --> 00:04:07,040
to tilt those axes to be 47 degrees

00:04:04,400 --> 00:04:09,040
cool so now we're able to point our

00:04:07,040 --> 00:04:11,439
telescope anywhere in the sky and image

00:04:09,040 --> 00:04:12,959
whatever we want to

00:04:11,439 --> 00:04:15,120
now let's actually start getting into

00:04:12,959 --> 00:04:19,440
code we're going to look into

00:04:15,120 --> 00:04:22,079
the motors first to see how we want to

00:04:19,440 --> 00:04:22,800
control those motors so we do a google

00:04:22,079 --> 00:04:25,040
search

00:04:22,800 --> 00:04:27,040
figure out the hardware that we have and

00:04:25,040 --> 00:04:28,880
we dig up the specification manual that

00:04:27,040 --> 00:04:32,240
our hardware provider

00:04:28,880 --> 00:04:33,040
provided so it's a serial communication

00:04:32,240 --> 00:04:34,800
protocol

00:04:33,040 --> 00:04:36,720
that means it's a tube that you send

00:04:34,800 --> 00:04:38,720
bites down and you get backs back

00:04:36,720 --> 00:04:40,240
and it's all serial and it's very very

00:04:38,720 --> 00:04:42,720
simple

00:04:40,240 --> 00:04:44,960
and it's pretty great so uh in this

00:04:42,720 --> 00:04:47,280
document are things like 9 600 bits a

00:04:44,960 --> 00:04:48,080
second no parity etc it is very serial

00:04:47,280 --> 00:04:50,479
communication

00:04:48,080 --> 00:04:51,360
uh parameters if we scroll down in this

00:04:50,479 --> 00:04:53,520
document

00:04:51,360 --> 00:04:54,840
we have various commands that we can

00:04:53,520 --> 00:04:57,680
send to the

00:04:54,840 --> 00:05:01,039
motors so

00:04:57,680 --> 00:05:04,240
goto is the term in astronomy to say hey

00:05:01,039 --> 00:05:06,960
telescope point to this point in the sky

00:05:04,240 --> 00:05:08,400
and the way we do this is to send down

00:05:06,960 --> 00:05:11,120
the serial pipe

00:05:08,400 --> 00:05:12,800
the letter r and then right ascension

00:05:11,120 --> 00:05:14,639
encoded in hexadecimal

00:05:12,800 --> 00:05:16,240
followed by a comma and then the

00:05:14,639 --> 00:05:19,520
declination encoded

00:05:16,240 --> 00:05:22,080
in hexadecimal then in response the hand

00:05:19,520 --> 00:05:25,440
controller sends back a hash symbol

00:05:22,080 --> 00:05:28,160
to say hey everything's okay um

00:05:25,440 --> 00:05:28,960
things succeeded if we scroll down some

00:05:28,160 --> 00:05:31,120
more

00:05:28,960 --> 00:05:32,560
uh retrieving data from the mount is a

00:05:31,120 --> 00:05:35,360
very similar system

00:05:32,560 --> 00:05:37,199
uh we send the letter e and we get back

00:05:35,360 --> 00:05:38,880
a write ascension declination in

00:05:37,199 --> 00:05:40,960
hexadecimal again

00:05:38,880 --> 00:05:42,639
that says where the telescope is

00:05:40,960 --> 00:05:44,000
currently pointing the sky

00:05:42,639 --> 00:05:46,479
so that's really useful if things are

00:05:44,000 --> 00:05:49,840
drifting or whatever

00:05:46,479 --> 00:05:51,840
cool so we have a serial api

00:05:49,840 --> 00:05:53,039
and we want to write this in rust and so

00:05:51,840 --> 00:05:54,720
we look online

00:05:53,039 --> 00:05:56,479
and we find the serial report crate

00:05:54,720 --> 00:05:57,759
which is a fantastic crate it's super

00:05:56,479 --> 00:06:02,160
fun to use

00:05:57,759 --> 00:06:05,199
um lets us use serial reports from rust

00:06:02,160 --> 00:06:06,720
so what that looks like is

00:06:05,199 --> 00:06:08,639
if we want to open our connection to the

00:06:06,720 --> 00:06:08,960
mount uh we give it a path and we get

00:06:08,639 --> 00:06:12,080
back

00:06:08,960 --> 00:06:14,080
our serial report then we're allowed to

00:06:12,080 --> 00:06:15,919
do some configurations for example set

00:06:14,080 --> 00:06:17,680
that bit rate set the parity

00:06:15,919 --> 00:06:20,000
and here we're setting the timeout so if

00:06:17,680 --> 00:06:21,199
the serial report doesn't respond for

00:06:20,000 --> 00:06:22,240
three seconds then we kill the

00:06:21,199 --> 00:06:25,600
connection

00:06:22,240 --> 00:06:28,479
cool how do we actually send bytes down

00:06:25,600 --> 00:06:30,400
this serial port it's pretty simple um

00:06:28,479 --> 00:06:32,160
there's this write all method

00:06:30,400 --> 00:06:33,520
and we just dump the bytes in this

00:06:32,160 --> 00:06:36,880
buffer down

00:06:33,520 --> 00:06:40,240
the pipe cool

00:06:36,880 --> 00:06:42,960
reading is a little more complicated so

00:06:40,240 --> 00:06:44,400
the trouble is that if we want to read

00:06:42,960 --> 00:06:47,199
something we can't just read

00:06:44,400 --> 00:06:48,000
up until we get a hash because the data

00:06:47,199 --> 00:06:52,160
that we're getting

00:06:48,000 --> 00:06:54,400
might accidentally include a hash

00:06:52,160 --> 00:06:55,199
symbol or rather the ascii value of a

00:06:54,400 --> 00:06:58,400
hash

00:06:55,199 --> 00:07:01,280
in the data that we're receiving um

00:06:58,400 --> 00:07:02,000
and that's no good and so instead we

00:07:01,280 --> 00:07:04,400
need to get the

00:07:02,000 --> 00:07:05,039
length of the data that we expect to

00:07:04,400 --> 00:07:07,440
receive

00:07:05,039 --> 00:07:09,520
up front and the way we do that is that

00:07:07,440 --> 00:07:10,800
we have pass in a buffer and then we use

00:07:09,520 --> 00:07:12,319
that buffer's length

00:07:10,800 --> 00:07:14,560
as the amount of data that we're

00:07:12,319 --> 00:07:17,759
expecting to read so first

00:07:14,560 --> 00:07:20,560
we read the buffer the here

00:07:17,759 --> 00:07:21,680
so that reads n number of bytes then

00:07:20,560 --> 00:07:23,599
after that

00:07:21,680 --> 00:07:25,280
we read the hash that is at the end of

00:07:23,599 --> 00:07:27,599
every single command the amount always

00:07:25,280 --> 00:07:29,440
responds with a hash after

00:07:27,599 --> 00:07:31,520
doing whatever to make sure that

00:07:29,440 --> 00:07:35,599
everything's okay

00:07:31,520 --> 00:07:37,360
cool uh so connecting those all together

00:07:35,599 --> 00:07:39,840
we go back to our pdf document

00:07:37,360 --> 00:07:40,880
and we go look up the go to command so

00:07:39,840 --> 00:07:42,479
that is sending an

00:07:40,880 --> 00:07:45,360
r followed by the right ascension

00:07:42,479 --> 00:07:48,720
declination in hexadecimal

00:07:45,360 --> 00:07:49,680
and here we're doing that so we format a

00:07:48,720 --> 00:07:51,360
string

00:07:49,680 --> 00:07:54,240
with the letter r followed by the writer

00:07:51,360 --> 00:07:56,319
extension with comma and declination

00:07:54,240 --> 00:07:58,240
so then we write that send that to the

00:07:56,319 --> 00:08:00,479
mount and then we read back

00:07:58,240 --> 00:08:01,919
that single hash so remember a read

00:08:00,479 --> 00:08:03,840
method

00:08:01,919 --> 00:08:05,280
then would read zero bytes and then read

00:08:03,840 --> 00:08:08,319
that hash for us

00:08:05,280 --> 00:08:09,840
so cool uh

00:08:08,319 --> 00:08:11,360
getting data from the mount is a very

00:08:09,840 --> 00:08:14,560
similar system

00:08:11,360 --> 00:08:16,879
we send an e and then

00:08:14,560 --> 00:08:17,759
the buffer size that we expect is 17

00:08:16,879 --> 00:08:19,199
bytes

00:08:17,759 --> 00:08:21,120
so that's the eight bytes of the

00:08:19,199 --> 00:08:22,240
hexadecimal followed by comma followed

00:08:21,120 --> 00:08:25,919
by the eight bytes

00:08:22,240 --> 00:08:26,639
of the uh right ascension declination

00:08:25,919 --> 00:08:28,080
cool

00:08:26,639 --> 00:08:30,160
then the rest of this method is just

00:08:28,080 --> 00:08:32,880
parsing to grab those two hexadecimal

00:08:30,160 --> 00:08:36,000
numbers out of that blob of bytes

00:08:32,880 --> 00:08:37,919
awesome so now we're able to point the

00:08:36,000 --> 00:08:39,360
telescope wherever we want we want it to

00:08:37,919 --> 00:08:41,039
do that's awesome

00:08:39,360 --> 00:08:42,719
so the next step is to look at the

00:08:41,039 --> 00:08:44,640
camera

00:08:42,719 --> 00:08:45,920
and so again we look up our cameras

00:08:44,640 --> 00:08:48,080
manufacturer

00:08:45,920 --> 00:08:50,240
look up some specification pdfs and we

00:08:48,080 --> 00:08:52,480
stumble upon this pdf

00:08:50,240 --> 00:08:53,680
and we start reading through it and

00:08:52,480 --> 00:08:56,959
turns out the way that we

00:08:53,680 --> 00:08:59,600
interact with this camera is a c api so

00:08:56,959 --> 00:09:00,240
the vendor of this camera provides this

00:08:59,600 --> 00:09:02,800
pdf

00:09:00,240 --> 00:09:05,279
as well as a c library that we link to

00:09:02,800 --> 00:09:07,440
with our rust program

00:09:05,279 --> 00:09:10,240
this function opens up the camera so it

00:09:07,440 --> 00:09:14,240
initializes the usb ports and everything

00:09:10,240 --> 00:09:16,240
um and then it returns a handle

00:09:14,240 --> 00:09:17,920
and what that handle is is we then later

00:09:16,240 --> 00:09:19,519
give this handle back to the api

00:09:17,920 --> 00:09:21,360
and says oh you meant that camera that

00:09:19,519 --> 00:09:22,959
you previously opened up so we're able

00:09:21,360 --> 00:09:24,560
to interact with a single camera based

00:09:22,959 --> 00:09:27,360
on this handle

00:09:24,560 --> 00:09:30,320
um then how we actually get data off of

00:09:27,360 --> 00:09:32,480
this camera is this function

00:09:30,320 --> 00:09:33,760
so it gives us the width height bit

00:09:32,480 --> 00:09:37,040
depth etc

00:09:33,760 --> 00:09:40,800
and then the final parameter is the

00:09:37,040 --> 00:09:43,839
actual bytes data that we want to get

00:09:40,800 --> 00:09:48,080
and so the c api fills in those bytes

00:09:43,839 --> 00:09:51,440
and then we have our image so fantastic

00:09:48,080 --> 00:09:54,560
now we want to write this in rust um

00:09:51,440 --> 00:09:55,760
thankfully the uh vendors also provide a

00:09:54,560 --> 00:09:57,680
c header

00:09:55,760 --> 00:09:59,760
and so what we could do is use something

00:09:57,680 --> 00:10:01,360
like bind trend to convert the c header

00:09:59,760 --> 00:10:04,079
into rust

00:10:01,360 --> 00:10:05,279
um but instead i've opted to just hand

00:10:04,079 --> 00:10:07,040
write all these functions because

00:10:05,279 --> 00:10:09,519
there's only a dozen or so of them

00:10:07,040 --> 00:10:10,880
and it was easier to hand write these

00:10:09,519 --> 00:10:14,399
functions

00:10:10,880 --> 00:10:16,079
um so for example you can see that open

00:10:14,399 --> 00:10:18,079
function that we mentioned earlier

00:10:16,079 --> 00:10:20,240
at the top here we're linking the

00:10:18,079 --> 00:10:22,079
library that was provided to us

00:10:20,240 --> 00:10:23,760
and so that pulls in that code that was

00:10:22,079 --> 00:10:26,160
provided

00:10:23,760 --> 00:10:26,800
so how do we actually use this so c

00:10:26,160 --> 00:10:29,360
obviously

00:10:26,800 --> 00:10:30,640
expects null terminated strings so we

00:10:29,360 --> 00:10:33,839
use the c string type

00:10:30,640 --> 00:10:33,839
to be able to

00:10:36,720 --> 00:10:43,279
pass in the string to this function

00:10:39,920 --> 00:10:46,560
and then we get back our handle

00:10:43,279 --> 00:10:48,320
and so then we do some error check of if

00:10:46,560 --> 00:10:52,000
that handle is null

00:10:48,320 --> 00:10:54,880
um and then we have our camera open

00:10:52,000 --> 00:10:56,399
so that's great so now we want to get

00:10:54,880 --> 00:10:58,399
some data off of that camera

00:10:56,399 --> 00:11:00,000
and so we get the width height etc and

00:10:58,399 --> 00:11:03,839
then we have buffer for that c

00:11:00,000 --> 00:11:05,600
api to be able to fill in that data

00:11:03,839 --> 00:11:07,440
something that i found really useful for

00:11:05,600 --> 00:11:09,600
when working with c libraries is

00:11:07,440 --> 00:11:11,040
i have this check function because c

00:11:09,600 --> 00:11:15,040
libraries usually

00:11:11,040 --> 00:11:16,560
return integers as error codes

00:11:15,040 --> 00:11:18,800
and so i have this check function that

00:11:16,560 --> 00:11:20,959
takes that integer compares it against

00:11:18,800 --> 00:11:24,079
error code see if it's success or not

00:11:20,959 --> 00:11:25,600
and then returns a rust results and that

00:11:24,079 --> 00:11:26,160
allows us to use that question mark

00:11:25,600 --> 00:11:27,519
operator

00:11:26,160 --> 00:11:29,120
and that's really really nice and

00:11:27,519 --> 00:11:31,120
ergonomic to be able to interact with

00:11:29,120 --> 00:11:33,920
these c libraries

00:11:31,120 --> 00:11:35,839
cool so now we're able to point the

00:11:33,920 --> 00:11:38,240
telescope wherever we want to

00:11:35,839 --> 00:11:38,959
we're able to get image data off of our

00:11:38,240 --> 00:11:40,959
camera

00:11:38,959 --> 00:11:42,640
and that means we all have all that we

00:11:40,959 --> 00:11:44,880
need to

00:11:42,640 --> 00:11:46,399
create beautiful images so this is an

00:11:44,880 --> 00:11:49,920
image that i took of the

00:11:46,399 --> 00:11:51,920
eagle nebula m16

00:11:49,920 --> 00:11:53,920
at the center you can see three little

00:11:51,920 --> 00:11:56,000
newts

00:11:53,920 --> 00:11:57,680
those are the pillars of creation the

00:11:56,000 --> 00:11:59,040
very famous hubble image and i was

00:11:57,680 --> 00:12:01,120
really really excited to

00:11:59,040 --> 00:12:03,760
say that like i actually captured this

00:12:01,120 --> 00:12:05,600
with my own amateur telescope and i like

00:12:03,760 --> 00:12:07,200
saw a thing that hubble saw it was like

00:12:05,600 --> 00:12:10,399
super exciting for me

00:12:07,200 --> 00:12:13,040
so yay so cool

00:12:10,399 --> 00:12:14,560
um the trouble is that just interacting

00:12:13,040 --> 00:12:15,600
with the hardware isn't enough we also

00:12:14,560 --> 00:12:17,120
have to slap a ui

00:12:15,600 --> 00:12:18,959
on top of this so this is a pretty

00:12:17,120 --> 00:12:21,839
garbage ui you just slapped it together

00:12:18,959 --> 00:12:23,519
whatever it has all the data that i need

00:12:21,839 --> 00:12:24,320
uh unfortunately this isn't actually

00:12:23,519 --> 00:12:26,880
live in

00:12:24,320 --> 00:12:28,320
data uh this is just a simulation that i

00:12:26,880 --> 00:12:30,079
was running with my program

00:12:28,320 --> 00:12:32,480
and that's because at midnight uh

00:12:30,079 --> 00:12:35,040
stockholm looks like this

00:12:32,480 --> 00:12:36,480
because the sun is so like doesn't get

00:12:35,040 --> 00:12:38,160
below the horizon at all

00:12:36,480 --> 00:12:39,519
so i can't actually do any astronomy

00:12:38,160 --> 00:12:40,320
right now to get any live data

00:12:39,519 --> 00:12:42,880
screenshots

00:12:40,320 --> 00:12:42,880
but whatever

00:12:43,600 --> 00:12:47,440
so the fact that we're putting a ui on

00:12:46,240 --> 00:12:50,240
top of these

00:12:47,440 --> 00:12:51,040
hardware functions is kind of

00:12:50,240 --> 00:12:53,360
problematic

00:12:51,040 --> 00:12:54,880
because for example downloading the data

00:12:53,360 --> 00:12:56,800
off of the camera can take

00:12:54,880 --> 00:12:58,639
a couple seconds and we don't want to

00:12:56,800 --> 00:13:00,079
lock up our ui thread for a couple

00:12:58,639 --> 00:13:01,920
seconds because that would be really bad

00:13:00,079 --> 00:13:04,160
at user experience even if it's just me

00:13:01,920 --> 00:13:07,270
using the program

00:13:04,160 --> 00:13:08,399
so we want to have a thread dedicated to

00:13:07,270 --> 00:13:10,720
[Music]

00:13:08,399 --> 00:13:12,560
doing the camera work or doing the mount

00:13:10,720 --> 00:13:14,000
interaction work and then we have our ui

00:13:12,560 --> 00:13:15,920
thread

00:13:14,000 --> 00:13:18,079
and so i want to share some experience

00:13:15,920 --> 00:13:20,800
that i had working with hardware

00:13:18,079 --> 00:13:22,639
and what patterns worked really well

00:13:20,800 --> 00:13:24,399
when working with like blocking hardware

00:13:22,639 --> 00:13:26,320
and stuff like that

00:13:24,399 --> 00:13:27,519
um so this is a pattern that i really

00:13:26,320 --> 00:13:29,839
like um

00:13:27,519 --> 00:13:30,639
so we have our dedicated mount thread

00:13:29,839 --> 00:13:33,360
here

00:13:30,639 --> 00:13:34,079
that's just spinning in a loop and then

00:13:33,360 --> 00:13:37,600
we have a

00:13:34,079 --> 00:13:38,480
mpsc channel um that instead of sending

00:13:37,600 --> 00:13:42,399
data over

00:13:38,480 --> 00:13:44,639
we send um lambdas or delegates

00:13:42,399 --> 00:13:46,240
and then we call that delegate with our

00:13:44,639 --> 00:13:48,079
local mount

00:13:46,240 --> 00:13:51,120
and so that means that this mount can

00:13:48,079 --> 00:13:53,440
only be accessed by this thread

00:13:51,120 --> 00:13:54,320
but the fact that we're sending over

00:13:53,440 --> 00:13:56,160
lambdas

00:13:54,320 --> 00:13:57,680
means that we can write really nice shim

00:13:56,160 --> 00:14:01,040
layers like this

00:13:57,680 --> 00:14:03,199
um that if we want to slew the

00:14:01,040 --> 00:14:04,320
or go to the mount to wherever you want

00:14:03,199 --> 00:14:07,199
to we just

00:14:04,320 --> 00:14:09,360
need to write their shim then the ui

00:14:07,199 --> 00:14:11,199
thread can call this method

00:14:09,360 --> 00:14:13,360
uh it just sends this lambda over the

00:14:11,199 --> 00:14:15,199
npsc channel which doesn't block at all

00:14:13,360 --> 00:14:18,720
and returns immediately freeing up the

00:14:15,199 --> 00:14:18,720
ui thread to do whatever it wants

00:14:19,360 --> 00:14:23,839
then when the mount thread can get

00:14:22,160 --> 00:14:24,880
around to it then it actually does that

00:14:23,839 --> 00:14:27,440
slower operation

00:14:24,880 --> 00:14:29,680
cause this lambda with the mount that is

00:14:27,440 --> 00:14:31,600
a thread local

00:14:29,680 --> 00:14:33,120
and rust guarantees that this mount will

00:14:31,600 --> 00:14:35,839
never escape that thread

00:14:33,120 --> 00:14:38,079
it's really really nice to be able to

00:14:35,839 --> 00:14:41,600
have those guarantees

00:14:38,079 --> 00:14:41,600
in this rust world

00:14:41,680 --> 00:14:45,279
unfortunately the camera is a little bit

00:14:43,199 --> 00:14:48,880
more complicated and i do have an enum

00:14:45,279 --> 00:14:50,880
instead of sending over uh lambdas

00:14:48,880 --> 00:14:52,240
this is because the camera is a little

00:14:50,880 --> 00:14:54,399
bit more complicated

00:14:52,240 --> 00:14:55,680
so here we're setting a control and

00:14:54,399 --> 00:14:58,240
control in the sense

00:14:55,680 --> 00:15:00,720
means something like the camera's gain

00:14:58,240 --> 00:15:02,160
or the exposure or stuff like that

00:15:00,720 --> 00:15:04,160
and it turns out that the camera

00:15:02,160 --> 00:15:05,760
hardware really doesn't like it

00:15:04,160 --> 00:15:08,720
when you set the gain in the middle of

00:15:05,760 --> 00:15:10,560
an exposure like things crash and stuff

00:15:08,720 --> 00:15:12,240
and i just figured this out by using the

00:15:10,560 --> 00:15:13,279
camera being in the field doing some

00:15:12,240 --> 00:15:14,959
testing

00:15:13,279 --> 00:15:16,880
and i figured out that you want to

00:15:14,959 --> 00:15:17,839
cancel the camera before sending any

00:15:16,880 --> 00:15:21,440
control

00:15:17,839 --> 00:15:23,199
so cancel the current exposure um

00:15:21,440 --> 00:15:24,959
and so now we have this method we have

00:15:23,199 --> 00:15:28,320
to make it a little more complicated

00:15:24,959 --> 00:15:29,600
and so now we don't use a lambda anymore

00:15:28,320 --> 00:15:31,600
we use an enum

00:15:29,600 --> 00:15:32,959
so cool so now we have all this

00:15:31,600 --> 00:15:36,480
flexibility to do whatever

00:15:32,959 --> 00:15:38,639
we want so

00:15:36,480 --> 00:15:40,079
um that was some threading talk and now

00:15:38,639 --> 00:15:42,320
we wanted to talk about some

00:15:40,079 --> 00:15:43,519
of rus performance because it's really

00:15:42,320 --> 00:15:46,480
important

00:15:43,519 --> 00:15:46,959
um so if you've seen this uh image you

00:15:46,480 --> 00:15:49,279
can

00:15:46,959 --> 00:15:51,440
barely barely see the elephant's trunk

00:15:49,279 --> 00:15:54,639
nebula that i was imaging here

00:15:51,440 --> 00:15:57,120
um it's a little faint uh but

00:15:54,639 --> 00:15:58,000
hopefully you can see that but this

00:15:57,120 --> 00:15:59,440
image isn't

00:15:58,000 --> 00:16:01,360
actually what's coming off the camera

00:15:59,440 --> 00:16:02,880
what's coming off the camera looks like

00:16:01,360 --> 00:16:04,320
this

00:16:02,880 --> 00:16:05,680
no idea if you can actually see what's

00:16:04,320 --> 00:16:08,480
going on in this image but it's

00:16:05,680 --> 00:16:12,000
basically a black screen with a few

00:16:08,480 --> 00:16:13,519
tiny bright white dots and the reason

00:16:12,000 --> 00:16:16,880
for this is the camera is

00:16:13,519 --> 00:16:20,720
has a 16 bit depth 12 bits actually but

00:16:16,880 --> 00:16:22,720
it returns it in the data of 16 bits

00:16:20,720 --> 00:16:25,759
so that means it has a very high dynamic

00:16:22,720 --> 00:16:27,199
range and if we want to remap that to 8

00:16:25,759 --> 00:16:28,240
bits of what our displays actually

00:16:27,199 --> 00:16:30,000
display

00:16:28,240 --> 00:16:31,839
then we're only going to see the very

00:16:30,000 --> 00:16:34,399
very brightest things which in this case

00:16:31,839 --> 00:16:35,920
are tiny little dots of stars

00:16:34,399 --> 00:16:37,839
that are showing up and we can't see the

00:16:35,920 --> 00:16:39,519
nebula at all so that means we have no

00:16:37,839 --> 00:16:42,480
idea if the nebula is in frame or not

00:16:39,519 --> 00:16:43,839
we have no idea uh how good of quality

00:16:42,480 --> 00:16:46,560
it is

00:16:43,839 --> 00:16:48,480
so what we want to do is when we're

00:16:46,560 --> 00:16:50,560
previewing this image in the app

00:16:48,480 --> 00:16:51,680
we save all the raw data itself but when

00:16:50,560 --> 00:16:53,920
we're previewing

00:16:51,680 --> 00:16:55,600
we want to remap this data to be able to

00:16:53,920 --> 00:16:56,240
see all the interesting parts of the

00:16:55,600 --> 00:16:57,680
image

00:16:56,240 --> 00:17:00,079
and not just have a black screen with a

00:16:57,680 --> 00:17:01,759
few white dots

00:17:00,079 --> 00:17:04,240
so we do that by computing some

00:17:01,759 --> 00:17:05,839
statistics about the image first and so

00:17:04,240 --> 00:17:07,839
here we compute the mean and standard

00:17:05,839 --> 00:17:09,600
deviation of the image

00:17:07,839 --> 00:17:11,760
these look like really really simple

00:17:09,600 --> 00:17:12,880
functions i just loop through the data

00:17:11,760 --> 00:17:14,640
add them all up

00:17:12,880 --> 00:17:16,240
and then computing standard deviation is

00:17:14,640 --> 00:17:19,280
really really simple

00:17:16,240 --> 00:17:22,240
the trouble is that these images

00:17:19,280 --> 00:17:23,039
are not small they're 32 megabytes big

00:17:22,240 --> 00:17:25,439
um

00:17:23,039 --> 00:17:27,280
and when i implement this in c sharp uh

00:17:25,439 --> 00:17:29,039
it took like a couple seconds to turn

00:17:27,280 --> 00:17:30,720
through all this data

00:17:29,039 --> 00:17:32,799
and that's a problem when you're doing

00:17:30,720 --> 00:17:36,480
things like planetary astronomy

00:17:32,799 --> 00:17:37,120
because in planetary um your frame rate

00:17:36,480 --> 00:17:39,360
is like

00:17:37,120 --> 00:17:41,280
10 milliseconds exposure and you want to

00:17:39,360 --> 00:17:42,080
collect as many many exposures as you

00:17:41,280 --> 00:17:44,240
can

00:17:42,080 --> 00:17:46,000
so you want to have these previews come

00:17:44,240 --> 00:17:50,320
in immediately you want to process

00:17:46,000 --> 00:17:51,840
as quickly as you can um and so rust

00:17:50,320 --> 00:17:53,760
absolutely blazes through these

00:17:51,840 --> 00:17:55,679
functions and it's really a joy to be

00:17:53,760 --> 00:17:58,559
able to have these previews to snap in

00:17:55,679 --> 00:18:01,760
as soon as they're available

00:17:58,559 --> 00:18:04,240
so cool uh so what that

00:18:01,760 --> 00:18:06,559
processing actually is doing is saying

00:18:04,240 --> 00:18:09,120
okay so we're assuming that the

00:18:06,559 --> 00:18:10,160
brightness distribution of our image is

00:18:09,120 --> 00:18:12,640
a gaussian which is

00:18:10,160 --> 00:18:14,000
it isn't but whatever close enough and

00:18:12,640 --> 00:18:16,000
so we want to say like

00:18:14,000 --> 00:18:17,600
okay let's make negative one sigma on

00:18:16,000 --> 00:18:20,080
this image to be black

00:18:17,600 --> 00:18:21,840
and positive one sigma to be white uh

00:18:20,080 --> 00:18:23,679
and clip everything outside of that and

00:18:21,840 --> 00:18:25,840
just see the interesting data that's in

00:18:23,679 --> 00:18:27,360
the middle of the spell curve

00:18:25,840 --> 00:18:28,320
but we also want to be able to shift it

00:18:27,360 --> 00:18:29,200
a little bit because maybe the

00:18:28,320 --> 00:18:31,520
interesting

00:18:29,200 --> 00:18:34,000
data is on like slightly high side of

00:18:31,520 --> 00:18:36,799
the bell curve or whatever

00:18:34,000 --> 00:18:39,039
so we have these two parameters of our

00:18:36,799 --> 00:18:40,640
sigma level of how big we want our gap

00:18:39,039 --> 00:18:42,960
to be and then an offset

00:18:40,640 --> 00:18:44,400
of saying like hey we want the mean to

00:18:42,960 --> 00:18:46,960
be twenty percent

00:18:44,400 --> 00:18:48,799
bright instead of fifty percent right or

00:18:46,960 --> 00:18:52,080
something like that

00:18:48,799 --> 00:18:55,120
so we have this chunk of math uh because

00:18:52,080 --> 00:18:57,360
i wanna have this uh these shifts

00:18:55,120 --> 00:18:58,160
to be a straight remath that's a linear

00:18:57,360 --> 00:19:00,160
equation

00:18:58,160 --> 00:19:01,840
that's just y equals mx plus b that's

00:19:00,160 --> 00:19:05,760
really really fast to do

00:19:01,840 --> 00:19:08,799
so on the top we convert our um

00:19:05,760 --> 00:19:11,919
sigma and our mean offset to be

00:19:08,799 --> 00:19:13,039
a mx plus b equation so we have a scale

00:19:11,919 --> 00:19:15,840
and an offset

00:19:13,039 --> 00:19:16,240
then at the bottom we just do a multiply

00:19:15,840 --> 00:19:18,880
and then

00:19:16,240 --> 00:19:20,080
add which is really really fast so

00:19:18,880 --> 00:19:23,679
that's really cool

00:19:20,080 --> 00:19:25,280
so then uh when we want to adjust our

00:19:23,679 --> 00:19:27,120
for example sigma or mean location

00:19:25,280 --> 00:19:29,200
parameters to adjust our view

00:19:27,120 --> 00:19:30,320
we don't actually have to modify the

00:19:29,200 --> 00:19:33,280
image at all

00:19:30,320 --> 00:19:34,880
it's still in gpu memory and we just

00:19:33,280 --> 00:19:38,559
adjust this uniform

00:19:34,880 --> 00:19:40,480
to be able to display it however we like

00:19:38,559 --> 00:19:42,559
that means we have real-time adjustments

00:19:40,480 --> 00:19:43,280
of saying like i want to see the bright

00:19:42,559 --> 00:19:45,200
parts of this

00:19:43,280 --> 00:19:46,480
image or i want to see all the dark

00:19:45,200 --> 00:19:50,080
parts of this image

00:19:46,480 --> 00:19:51,360
and it's super snappy and great um

00:19:50,080 --> 00:19:53,600
and the reason that we don't have to

00:19:51,360 --> 00:19:55,520
modify it is apparently opengl supports

00:19:53,600 --> 00:19:57,520
16-bit grayscale textures

00:19:55,520 --> 00:19:59,360
which awesome so we can just upload the

00:19:57,520 --> 00:20:01,520
raw data to the gpu

00:19:59,360 --> 00:20:02,400
and have that all work so that's super

00:20:01,520 --> 00:20:04,000
fantastic

00:20:02,400 --> 00:20:06,480
so now we have a great application that

00:20:04,000 --> 00:20:07,840
can preview all of our astronomy images

00:20:06,480 --> 00:20:10,000
and save them all

00:20:07,840 --> 00:20:12,320
and image whatever we would like to in

00:20:10,000 --> 00:20:15,760
the sky

00:20:12,320 --> 00:20:18,640
great so yeah that's my presentation

00:20:15,760 --> 00:20:20,799
all the code that i talked about is all

00:20:18,640 --> 00:20:23,799
on scopy on github

00:20:20,799 --> 00:20:25,039
um there's my twitter my email is just

00:20:23,799 --> 00:20:26,799
wildcard.kapiri.com

00:20:25,039 --> 00:20:28,720
whatever creative stuff you want to put

00:20:26,799 --> 00:20:30,520
in there and then if you want to see

00:20:28,720 --> 00:20:33,600
more space picks that i've taken

00:20:30,520 --> 00:20:36,480
keperia.com has all of my stuff

00:20:33,600 --> 00:20:36,480
thank you very much

00:20:36,960 --> 00:20:43,039
um all these links will be

00:20:40,320 --> 00:20:44,640
in discord or youtube hopefully wherever

00:20:43,039 --> 00:20:49,840
you're seeing this

00:20:44,640 --> 00:20:49,840

YouTube URL: https://www.youtube.com/watch?v=EI64D5S0uG4


