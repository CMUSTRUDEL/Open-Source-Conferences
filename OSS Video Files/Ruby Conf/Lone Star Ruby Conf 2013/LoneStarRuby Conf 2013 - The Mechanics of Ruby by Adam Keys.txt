Title: LoneStarRuby Conf 2013 - The Mechanics of Ruby by Adam Keys
Publication date: 2020-01-28
Playlist: Lone Star Ruby Conf 2013
Description: 
	Ruby is a delightful language to work with. And yet, for years, we've been hearing about how MRI is too slow and inefficient for "serious" use. What does that mean? What would a "serious" Ruby runtime look like?

To understand these questions, we need to dig into the design of MRI. How does it work, and what are the underlying principles? What does common Ruby code look like as its executed by MRI? Once we've discovered what makes MRI tick, we can compare it to modern runtimes like Hotspot and V8 to understand why MRI is slower. From there we can take a look at JRuby and Rubinius and see how they seek to close the gap between Ruby runtimes and the competition.

In this talk, we'll dive into the internals of MRI, seeking to understand how it executes Ruby code. We'll look at ways to make our code faster, reduce garbage collection overhead, and find more concurrency in our programs. At the end, you will have a better understanding of how MRI works and how to write better code for it.

Help us caption & translate this video!

http://amara.org/v/FG9D/
Captions: 
	00:00:15,139 --> 00:00:20,850
so I'm going to talk today about the

00:00:18,060 --> 00:00:24,660
mechanics of Ruby thinking in terms of

00:00:20,850 --> 00:00:26,670
ruby is a software a machine what does

00:00:24,660 --> 00:00:29,970
that machine look like how does it work

00:00:26,670 --> 00:00:32,250
so we're going to say shave some yaks

00:00:29,970 --> 00:00:35,190
digging deep into the light digging into

00:00:32,250 --> 00:00:37,260
the layers below below our Ruby programs

00:00:35,190 --> 00:00:39,450
how does Ruby work how does it work with

00:00:37,260 --> 00:00:41,760
the operating system kernel and how does

00:00:39,450 --> 00:00:43,980
it work with the actual computers that

00:00:41,760 --> 00:00:48,720
are called Intel or harm that those are

00:00:43,980 --> 00:00:50,820
executing on but first a story so once

00:00:48,720 --> 00:00:54,089
upon a time there was a guy named Max

00:00:50,820 --> 00:00:56,460
and Max was nice and every day matts

00:00:54,089 --> 00:00:59,940
would write lists small talk and pearl

00:00:56,460 --> 00:01:02,370
but he wrote it using seed until one day

00:00:59,940 --> 00:01:04,080
he sat down and wrote an interpreter so

00:01:02,370 --> 00:01:06,479
that he could write small talk Lisbon

00:01:04,080 --> 00:01:09,240
pearl and he called that interpreter and

00:01:06,479 --> 00:01:11,940
in language he had created ruby and

00:01:09,240 --> 00:01:14,850
every day more and more people would use

00:01:11,940 --> 00:01:17,220
Ruby to write small talk lists and pearl

00:01:14,850 --> 00:01:19,020
and then one day someone started using

00:01:17,220 --> 00:01:21,619
really to write web applications and

00:01:19,020 --> 00:01:24,329
that ended up being a really big deal

00:01:21,619 --> 00:01:26,070
finally many years passed and some

00:01:24,329 --> 00:01:28,710
people figured out that writing programs

00:01:26,070 --> 00:01:31,020
in Ruby is really great but it involves

00:01:28,710 --> 00:01:33,000
trade-offs and that sometimes those will

00:01:31,020 --> 00:01:36,869
be programs aren't as fast as they would

00:01:33,000 --> 00:01:39,270
be as a ferret and C or Java and then

00:01:36,869 --> 00:01:40,469
from that day on everyone was cheerful

00:01:39,270 --> 00:01:42,600
and do how to make engineering

00:01:40,469 --> 00:01:45,539
trade-offs to optimize their happiness

00:01:42,600 --> 00:01:48,869
and make trade-offs between happiness

00:01:45,539 --> 00:01:54,899
and performance and all sorts of ill

00:01:48,869 --> 00:01:58,679
ities yay story so I have a bone to pick

00:01:54,899 --> 00:02:00,119
with people who tweet about Rubby people

00:01:58,679 --> 00:02:02,039
who tweet about Rubby or often

00:02:00,119 --> 00:02:03,990
condescendingly talking about

00:02:02,039 --> 00:02:07,829
shortcomings that they perceive in Ruby

00:02:03,990 --> 00:02:10,619
design design trade-offs that ruby has

00:02:07,829 --> 00:02:12,780
made that they don't necessarily like so

00:02:10,619 --> 00:02:15,180
they'll say thing and so if you if you

00:02:12,780 --> 00:02:16,050
strip off the condescension what they're

00:02:15,180 --> 00:02:17,610
really getting at

00:02:16,050 --> 00:02:19,680
that movie isn't concurrent whether the

00:02:17,610 --> 00:02:21,870
GC is slower that rails is too much code

00:02:19,680 --> 00:02:24,450
too big whether sometimes the Ruby

00:02:21,870 --> 00:02:26,580
community makes naive design decisions

00:02:24,450 --> 00:02:29,160
in an isolation all of these are true

00:02:26,580 --> 00:02:33,480
and worth thinking about and fixing in

00:02:29,160 --> 00:02:35,210
the long run but what there the other

00:02:33,480 --> 00:02:38,070
thing they're griping about is that

00:02:35,210 --> 00:02:40,830
design decisions and trade-offs invade

00:02:38,070 --> 00:02:44,820
that don't work for them personally and

00:02:40,830 --> 00:02:46,050
that's just life yeah if someone came up

00:02:44,820 --> 00:02:47,610
to you and be like hey you didn't make

00:02:46,050 --> 00:02:50,940
me a peanut butter and jelly sandwich

00:02:47,610 --> 00:02:52,560
you and black go away well you would be

00:02:50,940 --> 00:02:54,060
like go away because you don't have to

00:02:52,560 --> 00:02:55,440
make everyone a peanut butter and jelly

00:02:54,060 --> 00:02:57,510
sandwich if they want a peanut butter

00:02:55,440 --> 00:03:01,500
peanut butter enjoy sandwich they should

00:02:57,510 --> 00:03:04,560
make themselves one and so a lot of

00:03:01,500 --> 00:03:05,670
these criticisms you know their true and

00:03:04,560 --> 00:03:07,830
we should figure out how to make them

00:03:05,670 --> 00:03:09,420
fix them going forward but they're not

00:03:07,830 --> 00:03:13,590
necessarily like oh well you should stop

00:03:09,420 --> 00:03:15,810
using Ruby because it's terrible so what

00:03:13,590 --> 00:03:18,270
I want to get it into in this talks is

00:03:15,810 --> 00:03:21,000
like what if we were scientists and we

00:03:18,270 --> 00:03:23,370
could started looking at these design

00:03:21,000 --> 00:03:25,770
trade-offs in Ruby and figuring out why

00:03:23,370 --> 00:03:27,000
they're there why they got there how

00:03:25,770 --> 00:03:29,250
they got there in the first place and

00:03:27,000 --> 00:03:31,920
what we can do about them going forward

00:03:29,250 --> 00:03:35,310
and what we can how we can mitigate them

00:03:31,920 --> 00:03:37,800
in our code in the present we would peel

00:03:35,310 --> 00:03:41,070
back the layers of our systems and know

00:03:37,800 --> 00:03:44,070
about the design decisions and trade off

00:03:41,070 --> 00:03:46,350
that were made in how to work with those

00:03:44,070 --> 00:03:48,930
when we use Ruby and then if we were

00:03:46,350 --> 00:03:51,930
scientists we probably want to be fun

00:03:48,930 --> 00:03:54,120
scientists and not boring scientists we

00:03:51,930 --> 00:03:56,640
would want to have some whimsy and

00:03:54,120 --> 00:03:59,570
delight so that we're not all just crank

00:03:56,640 --> 00:04:02,310
alee complaining about GCS and threads

00:03:59,570 --> 00:04:04,770
but having fun with saying oh hey I

00:04:02,310 --> 00:04:06,810
understand that you know Ruby makes

00:04:04,770 --> 00:04:10,280
these trade-offs but today I didn't have

00:04:06,810 --> 00:04:13,050
to type now look at all so that was cool

00:04:10,280 --> 00:04:16,410
so we would make use of our knowledge of

00:04:13,050 --> 00:04:19,859
how will be works on top of usually unix

00:04:16,410 --> 00:04:22,680
and how it works with computers so we

00:04:19,859 --> 00:04:24,210
can optimize for happiness so we're

00:04:22,680 --> 00:04:25,150
going to peel back the layers and do

00:04:24,210 --> 00:04:27,100
some real talk

00:04:25,150 --> 00:04:29,620
I want to shout out to the guys who run

00:04:27,100 --> 00:04:31,949
the real talk podcast these guys dig

00:04:29,620 --> 00:04:35,500
deep into kernels and compilers and

00:04:31,949 --> 00:04:38,080
assembly and bugs and that's a really

00:04:35,500 --> 00:04:42,780
cool way to think about programming

00:04:38,080 --> 00:04:46,330
computers so here's a weird hypothesis

00:04:42,780 --> 00:04:48,669
ruby is a really strange way to write C

00:04:46,330 --> 00:04:51,070
programs if you would appear with me

00:04:48,669 --> 00:04:53,620
feel it shapes and the acts with me i

00:04:51,070 --> 00:04:56,650
would probably mention this at some

00:04:53,620 --> 00:04:58,780
point and here's what I'm trying and let

00:04:56,650 --> 00:05:01,360
me try and prove this app not prove this

00:04:58,780 --> 00:05:04,210
hypothesis but here's what I'm trying to

00:05:01,360 --> 00:05:06,150
say this simple little program prints

00:05:04,210 --> 00:05:09,760
out the Beatles so it's not necessarily

00:05:06,150 --> 00:05:12,190
idiomatic Ruby but it's five lines of

00:05:09,760 --> 00:05:15,760
really simple Ruby and that's the same

00:05:12,190 --> 00:05:17,620
as this C program which is like four

00:05:15,760 --> 00:05:21,599
times longer it actually execute a

00:05:17,620 --> 00:05:24,729
little slower than the Ruby code so

00:05:21,599 --> 00:05:26,949
there's one assumption blown apart c is

00:05:24,729 --> 00:05:29,349
always faster than Ruby well you can

00:05:26,949 --> 00:05:32,650
make you can you could write Ruby in any

00:05:29,349 --> 00:05:34,630
language including see and then that

00:05:32,650 --> 00:05:38,620
Ruby for that see light that C code

00:05:34,630 --> 00:05:42,460
might be slow so but here's how we ugly

00:05:38,620 --> 00:05:46,389
up that Ruby this Ruby this this will be

00:05:42,460 --> 00:05:50,139
basically maps to this secant program so

00:05:46,389 --> 00:05:52,690
we create a ruby module and then we

00:05:50,139 --> 00:05:54,909
define a singleton method on it and we

00:05:52,690 --> 00:05:56,620
create a new fixed size array we throw

00:05:54,909 --> 00:05:58,240
some beetles in there and then they have

00:05:56,620 --> 00:06:01,930
a for loop over and we print out the

00:05:58,240 --> 00:06:05,039
Beatles this these are all the same

00:06:01,930 --> 00:06:08,260
constructs that that C extension uses

00:06:05,039 --> 00:06:10,870
the full loop is a little there's going

00:06:08,260 --> 00:06:13,389
to be a little higher level abstraction

00:06:10,870 --> 00:06:14,800
wise than in the sea extension because

00:06:13,389 --> 00:06:21,099
there's no way to write just like a

00:06:14,800 --> 00:06:23,770
native for loop in Ruby so here's that C

00:06:21,099 --> 00:06:25,030
extension taken apart so first thing you

00:06:23,770 --> 00:06:26,889
do when you're writing a see extension

00:06:25,030 --> 00:06:30,460
if you've never done it before is you

00:06:26,889 --> 00:06:32,620
include the Ruby capi by including Ruby

00:06:30,460 --> 00:06:36,700
H that gives you all the functions that

00:06:32,620 --> 00:06:38,169
make the insides of C extensions go and

00:06:36,700 --> 00:06:39,580
then we're going to pre declare to

00:06:38,169 --> 00:06:42,729
variables we're going to give ourselves

00:06:39,580 --> 00:06:46,180
a variable to put our Beatles module in

00:06:42,729 --> 00:06:49,270
and assign of nil so that's just your

00:06:46,180 --> 00:06:53,289
regular old Ruby nil except in see you

00:06:49,270 --> 00:06:54,669
say to new and we'd pre declare a c

00:06:53,289 --> 00:06:57,159
function that we're going to use to

00:06:54,669 --> 00:07:00,009
implement that print print Beatles

00:06:57,159 --> 00:07:02,949
function and you see these value guides

00:07:00,009 --> 00:07:05,289
all over the place what that means in a

00:07:02,949 --> 00:07:09,069
ruby see extension is here's a ruby

00:07:05,289 --> 00:07:13,300
object what it actually expands to and c

00:07:09,069 --> 00:07:15,999
code is some crazy pointers and unions

00:07:13,300 --> 00:07:17,740
that could be a string or an array or

00:07:15,999 --> 00:07:20,229
just a plain old Ruby object or even

00:07:17,740 --> 00:07:21,969
something more low level but when you're

00:07:20,229 --> 00:07:25,270
programming a/c extension all you need

00:07:21,969 --> 00:07:27,490
to know is a value is a ruby object and

00:07:25,270 --> 00:07:30,219
then this knit Beatles function gets

00:07:27,490 --> 00:07:32,499
called whenever the extension is loaded

00:07:30,219 --> 00:07:35,259
into the Ruby interpreter and this is

00:07:32,499 --> 00:07:39,669
where you set up all your objects that

00:07:35,259 --> 00:07:43,509
you're exposing to your Ruby programs

00:07:39,669 --> 00:07:45,009
from C so just like over here we're

00:07:43,509 --> 00:07:47,949
going to call it we're gonna call module

00:07:45,009 --> 00:07:50,289
new except that's our be defined module

00:07:47,949 --> 00:07:51,969
in the sea extension so we create our

00:07:50,289 --> 00:07:54,699
Beatles module and then we're going to

00:07:51,969 --> 00:07:56,649
attach a singleton method just like we

00:07:54,699 --> 00:07:58,930
did here it's going to be called print

00:07:56,649 --> 00:08:00,699
we're telling the sea efficient to use

00:07:58,930 --> 00:08:02,680
this print beals function we're going to

00:08:00,699 --> 00:08:05,979
clear out a second and that it takes a

00:08:02,680 --> 00:08:09,729
zero arguments that aren't the self

00:08:05,979 --> 00:08:12,479
object pointer so now we're really

00:08:09,729 --> 00:08:14,889
writing C extensions we're into it now

00:08:12,479 --> 00:08:18,339
this is going to be our singleton method

00:08:14,889 --> 00:08:20,620
it takes the self object which is the

00:08:18,339 --> 00:08:23,710
Beatles module that's going to turn some

00:08:20,620 --> 00:08:26,529
Ruby object so in the body we pre

00:08:23,710 --> 00:08:28,360
declare five Ruby objects Beatles name

00:08:26,529 --> 00:08:32,409
puts Colonel and arts and then we have a

00:08:28,360 --> 00:08:36,449
loop counter will call hi so this this

00:08:32,409 --> 00:08:40,440
first struck to construct right here is

00:08:36,449 --> 00:08:43,539
how you create a new fixed sized Ruby

00:08:40,440 --> 00:08:46,899
array and a/c extension so you come on

00:08:43,539 --> 00:08:48,610
Ruby or a new three there's like three

00:08:46,899 --> 00:08:51,459
or four different variants

00:08:48,610 --> 00:08:54,220
movie or a new and see extensions then

00:08:51,459 --> 00:08:57,610
we use Ruby string new to which is just

00:08:54,220 --> 00:09:01,000
like a literal string and Ruby to create

00:08:57,610 --> 00:09:04,360
our Beatles and then the rest of that

00:09:01,000 --> 00:09:06,040
function we use open classes in Ruby to

00:09:04,360 --> 00:09:08,350
get ourselves a handle on the kernel

00:09:06,040 --> 00:09:12,490
module because we want to call puts on

00:09:08,350 --> 00:09:16,029
it RB in turn is the same way of how is

00:09:12,490 --> 00:09:20,800
basically the same as creating yourself

00:09:16,029 --> 00:09:23,589
a symbol in Ruby code so now we have the

00:09:20,800 --> 00:09:26,500
kernel module and we have the strength

00:09:23,589 --> 00:09:28,630
we have the symbol / puts and we can use

00:09:26,500 --> 00:09:31,720
that to send a method so we're going to

00:09:28,630 --> 00:09:34,540
loop over our Beatles with this roa

00:09:31,720 --> 00:09:36,880
length int macro that's going to expand

00:09:34,540 --> 00:09:39,490
to a whole bunch of C code that

00:09:36,880 --> 00:09:42,760
basically takes a ruby array and gives

00:09:39,490 --> 00:09:46,300
you the number of items in it as a see

00:09:42,760 --> 00:09:49,600
integer and then we're going to use our

00:09:46,300 --> 00:09:51,130
be array entry is just like square

00:09:49,600 --> 00:09:55,120
brackets on an array so this is like

00:09:51,130 --> 00:09:57,760
beetles sub I and then just a quirk of

00:09:55,120 --> 00:10:01,199
the sea extension API is that you have

00:09:57,760 --> 00:10:05,350
to when you call sind Ottoman on a

00:10:01,199 --> 00:10:08,050
method you have to on a class you have

00:10:05,350 --> 00:10:09,970
to put wrap the old arguments in an

00:10:08,050 --> 00:10:12,279
array so we take something out of the

00:10:09,970 --> 00:10:15,459
array we put it in its own array and

00:10:12,279 --> 00:10:18,820
then we can use that RB apply is

00:10:15,459 --> 00:10:22,959
basically like calling send on an object

00:10:18,820 --> 00:10:27,220
so I'll be apply Colonel puts ards says

00:10:22,959 --> 00:10:29,380
Colonel dachshund puts args and that

00:10:27,220 --> 00:10:32,740
prints out all our Beatles and that's

00:10:29,380 --> 00:10:34,930
how you turn a little bit of Ruby into a

00:10:32,740 --> 00:10:38,980
lot of see it's a little slower than

00:10:34,930 --> 00:10:41,769
actual Ruby so what's conspicuously

00:10:38,980 --> 00:10:44,649
missing here there's no no calls to

00:10:41,769 --> 00:10:47,620
malloc or free we're not calling it to

00:10:44,649 --> 00:10:51,100
NEC libraries yet we're not calling

00:10:47,620 --> 00:10:53,320
things like f open or printf there's no

00:10:51,100 --> 00:10:54,819
direct system calls we never call fork

00:10:53,320 --> 00:10:57,729
or

00:10:54,819 --> 00:11:01,959
right or anything and there's no amazing

00:10:57,729 --> 00:11:04,389
performance that if we squint at this or

00:11:01,959 --> 00:11:06,789
if we have too many beers then we can

00:11:04,389 --> 00:11:09,100
see a ruby program kind of peeking out

00:11:06,789 --> 00:11:11,410
especially the one where I ugh lead up

00:11:09,100 --> 00:11:13,779
the Ruby and ones using the lower level

00:11:11,410 --> 00:11:16,839
ap is for defining modules and defining

00:11:13,779 --> 00:11:18,609
methods and whatnot that C program was

00:11:16,839 --> 00:11:21,549
pretty easy to understand if you know

00:11:18,609 --> 00:11:25,269
Ruby at that lower level cut a meta

00:11:21,549 --> 00:11:28,269
programming state and what we have here

00:11:25,269 --> 00:11:30,999
is an Isis capi if you've not done much

00:11:28,269 --> 00:11:33,009
c programming outside of say college

00:11:30,999 --> 00:11:34,779
like myself then this isn't too

00:11:33,009 --> 00:11:38,879
intimidating i was able to get this

00:11:34,779 --> 00:11:41,919
level of c extension mastery

00:11:38,879 --> 00:11:44,829
quote-unquote over the course of a

00:11:41,919 --> 00:11:47,199
weekend and I didn't and sometimes I had

00:11:44,829 --> 00:11:48,910
like weird sea seg faults but then I was

00:11:47,199 --> 00:11:52,389
like okay I did something wrong I should

00:11:48,910 --> 00:11:54,549
try something else so that's what I mean

00:11:52,389 --> 00:11:57,129
when I say Ruby is just a funny way of

00:11:54,549 --> 00:11:59,529
writing C programs and basically

00:11:57,129 --> 00:12:01,749
everything we do with computers is a

00:11:59,529 --> 00:12:04,629
funny way of writing C programs whether

00:12:01,749 --> 00:12:08,979
we're writing Ruby or Java or closure or

00:12:04,629 --> 00:12:11,739
PHP or whatever you can if you squint

00:12:08,979 --> 00:12:13,359
you can like you can look through the

00:12:11,739 --> 00:12:17,109
layers of abstraction and say okay when

00:12:13,359 --> 00:12:19,119
I call when I have module foo in my ruby

00:12:17,109 --> 00:12:22,329
program what is that doing well in the

00:12:19,119 --> 00:12:24,129
sea extension layer is calling rb25

00:12:22,329 --> 00:12:26,949
module and then it's attaching methods

00:12:24,129 --> 00:12:28,809
to it and that's not something you need

00:12:26,949 --> 00:12:30,279
to think about like all the time when

00:12:28,809 --> 00:12:34,109
you're programming Ruby but it's a

00:12:30,279 --> 00:12:37,509
useful lens to look things through so a

00:12:34,109 --> 00:12:39,909
digression I love to digress Wales is

00:12:37,509 --> 00:12:43,179
big this is another Rubby complaint is

00:12:39,909 --> 00:12:45,249
that ok here's an is a lens to look at

00:12:43,179 --> 00:12:47,409
that through what are different kinds of

00:12:45,249 --> 00:12:51,850
programming here's a procedural program

00:12:47,409 --> 00:12:54,129
it doesn't have any functions or data

00:12:51,850 --> 00:12:59,049
abstraction it's just doing stuff to

00:12:54,129 --> 00:13:02,049
stuff and it's vaguely fizzbuzz e here's

00:12:59,049 --> 00:13:04,070
an object-oriented fizz buzzy thing it's

00:13:02,049 --> 00:13:08,710
using messages

00:13:04,070 --> 00:13:13,100
to invoke behavior on encapsulated

00:13:08,710 --> 00:13:14,630
objects that contain data you can take

00:13:13,100 --> 00:13:18,130
that and convert it into a something

00:13:14,630 --> 00:13:21,380
functional esque where you pull

00:13:18,130 --> 00:13:26,020
behaviors off of some object and then

00:13:21,380 --> 00:13:28,640
pass that behavior on to another message

00:13:26,020 --> 00:13:30,290
you could boil take some of that

00:13:28,640 --> 00:13:32,600
boilerplate out and turn it into a

00:13:30,290 --> 00:13:36,980
little DSL so now we're not thinking

00:13:32,600 --> 00:13:38,630
about files anymore we're just thinking

00:13:36,980 --> 00:13:43,460
about when should we write out our

00:13:38,630 --> 00:13:45,470
fizzbuzz things so okay so we got past

00:13:43,460 --> 00:13:48,350
dsl's what's this is this object

00:13:45,470 --> 00:13:52,040
oriented programming is this language

00:13:48,350 --> 00:13:53,780
dsl oriented programming this is even

00:13:52,040 --> 00:13:56,990
further removing the boilerplate we've

00:13:53,780 --> 00:13:59,720
got some class that has all of the logic

00:13:56,990 --> 00:14:02,720
abstracted into it all the boilerplate

00:13:59,720 --> 00:14:05,090
is living off in some framework

00:14:02,720 --> 00:14:08,180
somewhere and we just write write some

00:14:05,090 --> 00:14:10,250
logic or distill some ideas and then

00:14:08,180 --> 00:14:14,210
call some magic method and all the

00:14:10,250 --> 00:14:16,370
things happen so what is this I move

00:14:14,210 --> 00:14:19,250
that this object has superhero powers

00:14:16,370 --> 00:14:21,650
it's just like when back when Bruce

00:14:19,250 --> 00:14:23,810
Wayne puts on his Batman suit but when

00:14:21,650 --> 00:14:26,000
Tony Stark puts on his Iron Man suit all

00:14:23,810 --> 00:14:28,100
of a sudden they can do extraordinary

00:14:26,000 --> 00:14:31,490
things they're normal dudes there are

00:14:28,100 --> 00:14:35,090
only actual power that most of us don't

00:14:31,490 --> 00:14:37,580
have is that they're rich but when they

00:14:35,090 --> 00:14:41,150
put on that suit they can save the world

00:14:37,580 --> 00:14:43,520
and the same thing is applies to like

00:14:41,150 --> 00:14:45,290
active record bass or action action

00:14:43,520 --> 00:14:47,900
controller base a lot of the rails

00:14:45,290 --> 00:14:50,390
framework you have a normal object and

00:14:47,900 --> 00:14:52,250
it inherits from some super class and

00:14:50,390 --> 00:14:55,580
all of a sudden it can do amazing things

00:14:52,250 --> 00:14:57,800
it can save the world so active record

00:14:55,580 --> 00:15:00,020
base is an Iron Man of object-oriented

00:14:57,800 --> 00:15:02,090
programming the thing about superheroes

00:15:00,020 --> 00:15:07,360
is that they always have some lame

00:15:02,090 --> 00:15:10,730
weakness whether it's like kryptonite or

00:15:07,360 --> 00:15:12,950
Tony Stark being you know a raving

00:15:10,730 --> 00:15:14,690
egomaniac there's always something

00:15:12,950 --> 00:15:15,279
that's going to trip them up otherwise

00:15:14,690 --> 00:15:17,800
there

00:15:15,279 --> 00:15:19,689
stories wouldn't be interesting and when

00:15:17,800 --> 00:15:21,999
for instance iron man gets in trouble

00:15:19,689 --> 00:15:25,269
things get really messy and it's not

00:15:21,999 --> 00:15:27,519
like one toddler left left unsupervised

00:15:25,269 --> 00:15:29,290
for five minutes Nessie it's like oh I

00:15:27,519 --> 00:15:30,850
totally destroyed a city block and you

00:15:29,290 --> 00:15:34,680
should see the next block it's pretty

00:15:30,850 --> 00:15:40,120
bad too and the same thing goes for

00:15:34,680 --> 00:15:41,680
active record when you get in trouble

00:15:40,120 --> 00:15:47,199
with active record it can get really

00:15:41,680 --> 00:15:48,519
weird really quickly and so I am so iron

00:15:47,199 --> 00:15:50,589
man is really good at saving the world

00:15:48,519 --> 00:15:52,180
in 90 minutes an active record is really

00:15:50,589 --> 00:15:55,769
good at putting an application together

00:15:52,180 --> 00:15:59,079
and teasing out an idea in a few weeks

00:15:55,769 --> 00:16:01,689
well on the long run Iron Man is a pain

00:15:59,079 --> 00:16:03,220
in for instance Nick series neck and

00:16:01,689 --> 00:16:05,999
he'd rather have a flying aircraft

00:16:03,220 --> 00:16:09,339
carrier for normal people with normal

00:16:05,999 --> 00:16:11,470
egos that he can just say oh hey we need

00:16:09,339 --> 00:16:15,309
to save the world go do this thing and

00:16:11,470 --> 00:16:17,290
my awesome flying aircraft carrier and

00:16:15,309 --> 00:16:19,300
on the long run you'd rather have a duck

00:16:17,290 --> 00:16:21,809
a few dozen objects with a few methods

00:16:19,300 --> 00:16:25,720
rather than having a whole bunch of

00:16:21,809 --> 00:16:27,910
active record model objects so you don't

00:16:25,720 --> 00:16:30,220
need radical approaches to make your

00:16:27,910 --> 00:16:33,069
rails apps manageable and it's not so

00:16:30,220 --> 00:16:35,019
bad that rails is huge as long as you're

00:16:33,069 --> 00:16:37,300
using it in moderation you just need to

00:16:35,019 --> 00:16:39,790
use I have found that i can use

00:16:37,300 --> 00:16:42,009
procedural object-oriented iming and

00:16:39,790 --> 00:16:43,809
functional programming when they're

00:16:42,009 --> 00:16:47,769
appropriate sorry some of those got cut

00:16:43,809 --> 00:16:51,160
off here when the appropriate and that

00:16:47,769 --> 00:16:53,889
helps me take a program that is starting

00:16:51,160 --> 00:16:56,139
to get rails unwieldy and then start

00:16:53,889 --> 00:16:57,550
applying just normal software

00:16:56,139 --> 00:16:59,110
development you know functional

00:16:57,550 --> 00:17:00,699
programming object-oriented programming

00:16:59,110 --> 00:17:03,790
structure structured programming

00:17:00,699 --> 00:17:05,409
practices to keep it reasonable and then

00:17:03,790 --> 00:17:07,149
I don't have a lot of the program and

00:17:05,409 --> 00:17:10,289
then that keeps me away from all of the

00:17:07,149 --> 00:17:13,240
trouble that people like the stereotype

00:17:10,289 --> 00:17:19,860
rails as having when they talk about

00:17:13,240 --> 00:17:19,860
rubbing so I hope that is useful to you

00:17:21,000 --> 00:17:28,360
pencils pencils pencils / tools is your

00:17:25,660 --> 00:17:30,610
new bicycle so you your application has

00:17:28,360 --> 00:17:33,730
bottleneck statistically I am almost

00:17:30,610 --> 00:17:37,210
certain of this you spend a lot of time

00:17:33,730 --> 00:17:39,460
in GC because Ruby's GC isn't that great

00:17:37,210 --> 00:17:42,250
and because the way people like Ruby

00:17:39,460 --> 00:17:43,750
generates a lot of garbage you probably

00:17:42,250 --> 00:17:45,580
want to know what your application is

00:17:43,750 --> 00:17:47,710
really doing either because you just

00:17:45,580 --> 00:17:50,310
introduced a gym that does weird things

00:17:47,710 --> 00:17:52,420
and you wonder why that happened or

00:17:50,310 --> 00:17:53,920
because someone just handed you an

00:17:52,420 --> 00:17:56,380
application and asks you to change it

00:17:53,920 --> 00:17:57,910
and it's 30 thousand lines of rails code

00:17:56,380 --> 00:18:00,220
and you're not exactly sure what the

00:17:57,910 --> 00:18:02,800
person who wrote it was doing and you

00:18:00,220 --> 00:18:08,130
probably if you're like me like pretty

00:18:02,800 --> 00:18:10,000
cyclic graphs perf tools is a is a cut a

00:18:08,130 --> 00:18:12,910
silver bullet for all of those things

00:18:10,000 --> 00:18:16,000
it's wonderful so here's a laughable

00:18:12,910 --> 00:18:18,280
database it generates random people

00:18:16,000 --> 00:18:21,040
asked things and writes them to death no

00:18:18,280 --> 00:18:25,360
I will be selling support contracts for

00:18:21,040 --> 00:18:27,340
this database after this talk I want to

00:18:25,360 --> 00:18:29,770
peek inside I want to know what my

00:18:27,340 --> 00:18:31,270
laughable database looks like as it's

00:18:29,770 --> 00:18:32,800
running and I want to know what its

00:18:31,270 --> 00:18:37,720
bottlenecks are and what its performance

00:18:32,800 --> 00:18:40,690
is like so I to use perf tools you gem

00:18:37,720 --> 00:18:43,990
install perf tools at RB purposes by

00:18:40,690 --> 00:18:45,730
aman gupta he is amazing awesome just

00:18:43,990 --> 00:18:48,940
follow the things he does he does

00:18:45,730 --> 00:18:50,740
amazing things to ruby there's two

00:18:48,940 --> 00:18:55,450
things that I find really useful to do

00:18:50,740 --> 00:18:59,230
with perf tools if you run it with the

00:18:55,450 --> 00:19:01,780
environment seek new profile methods set

00:18:59,230 --> 00:19:04,270
then you can get off it will basically

00:19:01,780 --> 00:19:06,640
measure all of the call method calls in

00:19:04,270 --> 00:19:09,100
your ruby program and then you can see

00:19:06,640 --> 00:19:12,040
who's calling what and how often the

00:19:09,100 --> 00:19:15,070
default is that it just wakes up a

00:19:12,040 --> 00:19:17,140
thousand times a second sees what Ruby

00:19:15,070 --> 00:19:19,420
method is executing and records that if

00:19:17,140 --> 00:19:21,940
your program runs for more than a few

00:19:19,420 --> 00:19:23,560
seconds then you've got a few thousand

00:19:21,940 --> 00:19:25,810
data points and you can start figuring

00:19:23,560 --> 00:19:28,570
out what your bottlenecks are and what

00:19:25,810 --> 00:19:30,550
your program is really doing once you've

00:19:28,570 --> 00:19:32,800
generated data by calling

00:19:30,550 --> 00:19:35,410
perf tool CPU profiler that start and

00:19:32,800 --> 00:19:39,280
doing some stuff inside of a block you

00:19:35,410 --> 00:19:41,200
can use the P proof Darby tool to

00:19:39,280 --> 00:19:44,500
generate a PDF it can also generate

00:19:41,200 --> 00:19:45,940
gifts and svgs but PDFs are wonderful

00:19:44,500 --> 00:19:47,680
because you can just zoom you can zoom

00:19:45,940 --> 00:19:49,990
right into them they don't lose

00:19:47,680 --> 00:19:51,610
resolution and you can kind of move

00:19:49,990 --> 00:19:55,960
around in your program as though it was

00:19:51,610 --> 00:19:58,420
a map so this is the PDF output when I

00:19:55,960 --> 00:20:02,140
run my laughable benchmark on my

00:19:58,420 --> 00:20:05,500
laughable database and from here you can

00:20:02,140 --> 00:20:07,570
just you can see grossly like where the

00:20:05,500 --> 00:20:09,150
time is spent you can see it's spinning

00:20:07,570 --> 00:20:13,060
thing about a quarter of the time

00:20:09,150 --> 00:20:15,340
writing things out to Devon all its

00:20:13,060 --> 00:20:16,990
spending a lot of time generating a

00:20:15,340 --> 00:20:18,760
string so that's probably something I

00:20:16,990 --> 00:20:20,500
look into because I would hope that

00:20:18,760 --> 00:20:25,330
would be faster and it's spinning about

00:20:20,500 --> 00:20:29,230
a fifth of its time in GC this is what

00:20:25,330 --> 00:20:31,800
the method call out the graph output

00:20:29,230 --> 00:20:33,940
looks like it's the same sort of thing

00:20:31,800 --> 00:20:37,720
but here you can see that it's calling

00:20:33,940 --> 00:20:40,750
Rand a lot a lot more than I would think

00:20:37,720 --> 00:20:42,910
for into the code that i had a before

00:20:40,750 --> 00:20:46,090
but if i had just inherited this program

00:20:42,910 --> 00:20:47,740
this is a great way to start and figure

00:20:46,090 --> 00:20:49,840
out what is this code doing because you

00:20:47,740 --> 00:20:53,080
can see the entry point at the top you

00:20:49,840 --> 00:20:55,830
can see where faker is being called and

00:20:53,080 --> 00:21:00,490
that's calling a bunch of stuff it's

00:20:55,830 --> 00:21:03,070
it's a fantastic discovery tool more

00:21:00,490 --> 00:21:04,780
practically speaking you can use perf

00:21:03,070 --> 00:21:06,640
tools inside of rack and rails

00:21:04,780 --> 00:21:09,490
applications you throw this thing into

00:21:06,640 --> 00:21:12,760
your gym file you add some middleware

00:21:09,490 --> 00:21:18,910
like I said I like to use the PDF output

00:21:12,760 --> 00:21:21,760
by default and then you go to your

00:21:18,910 --> 00:21:25,300
whatever at URL in your app you say

00:21:21,760 --> 00:21:27,790
profile equals true and these time this

00:21:25,300 --> 00:21:30,670
is the number of times to run that

00:21:27,790 --> 00:21:33,310
action to get a reasonable benchmark

00:21:30,670 --> 00:21:35,650
number so 10 times is probably going to

00:21:33,310 --> 00:21:40,240
be very sufficient and maybe won't

00:21:35,650 --> 00:21:42,580
timeout your browser and this is what a

00:21:40,240 --> 00:21:43,360
typical rails app looks like I work on a

00:21:42,580 --> 00:21:46,420
half

00:21:43,360 --> 00:21:49,000
called sifter it's an issue tracker as a

00:21:46,420 --> 00:21:51,280
side project I just loaded up the

00:21:49,000 --> 00:21:54,549
slowest action or one of the most

00:21:51,280 --> 00:21:57,730
frequent called actions and with perf

00:21:54,549 --> 00:22:00,580
tools and looked at the output so here

00:21:57,730 --> 00:22:02,440
you can see I actually already pointed

00:22:00,580 --> 00:22:05,710
this you can see all the rack middleware

00:22:02,440 --> 00:22:07,809
so if you've ever read Aaron Patterson

00:22:05,710 --> 00:22:10,870
talking about rack he's pointed out that

00:22:07,809 --> 00:22:12,760
this long nasty call stack is

00:22:10,870 --> 00:22:14,950
problematic all that stuff has to hang

00:22:12,760 --> 00:22:18,610
out in memory it it's part of what makes

00:22:14,950 --> 00:22:22,660
your rail stack traces really long and

00:22:18,610 --> 00:22:24,220
tedious these days so there's that here

00:22:22,660 --> 00:22:26,950
you can see a little bit of action view

00:22:24,220 --> 00:22:29,970
rendering going on action controller and

00:22:26,950 --> 00:22:34,780
all of its base classes and whatnot and

00:22:29,970 --> 00:22:39,600
then BOOM a bottleneck appears so what's

00:22:34,780 --> 00:22:42,010
going on here and how can I read this so

00:22:39,600 --> 00:22:47,250
the way that perf tools is set up you

00:22:42,010 --> 00:22:50,830
always have callers above collies so

00:22:47,250 --> 00:22:55,480
hamill block is Hamel is a calling

00:22:50,830 --> 00:22:58,120
colonel eval 590 times 590 times when

00:22:55,480 --> 00:23:04,450
partner perf tools sampler woke up

00:22:58,120 --> 00:23:06,160
that's what was executing oops so

00:23:04,450 --> 00:23:08,620
there's total calls and there's the

00:23:06,160 --> 00:23:14,169
method name for each block so Colonel

00:23:08,620 --> 00:23:19,270
eval was active in 470 forty seven

00:23:14,169 --> 00:23:21,970
percent of the samples or 590 and it was

00:23:19,270 --> 00:23:25,179
at it was actually in eval executing

00:23:21,970 --> 00:23:28,390
eval code 37 point eight percent of the

00:23:25,179 --> 00:23:30,400
time so I dug in till I app and it's

00:23:28,390 --> 00:23:32,380
weird that Hamels getting called this

00:23:30,400 --> 00:23:37,809
much because sifter doesn't use hamill

00:23:32,380 --> 00:23:39,610
at all and that's problematic and

00:23:37,809 --> 00:23:42,700
possibly a waste of time and what it

00:23:39,610 --> 00:23:45,340
turns out so so yeah I thought this was

00:23:42,700 --> 00:23:48,370
weird and I was like okay so i looked at

00:23:45,340 --> 00:23:51,220
my gym file dot walk to see who depends

00:23:48,370 --> 00:23:53,770
on hamill it turns out it's male catcher

00:23:51,220 --> 00:23:54,580
and now catcher you don't actually run

00:23:53,770 --> 00:23:56,230
within your applique

00:23:54,580 --> 00:23:58,750
you run it kind of to the side of the

00:23:56,230 --> 00:24:01,120
application but through the wonders of

00:23:58,750 --> 00:24:03,580
dependency management it was in our

00:24:01,120 --> 00:24:05,380
development group in the gym file that

00:24:03,580 --> 00:24:09,480
was causing it to get loaded by rails

00:24:05,380 --> 00:24:13,899
and so every time rails was looking at a

00:24:09,480 --> 00:24:16,809
template in action view which sifter has

00:24:13,899 --> 00:24:18,640
a lot of templates in each of you he

00:24:16,809 --> 00:24:20,980
ends up calling a whole bunch of

00:24:18,640 --> 00:24:23,890
templates every time they're the same it

00:24:20,980 --> 00:24:25,690
is a different animal and say handle do

00:24:23,890 --> 00:24:29,679
you want to do anything with this then

00:24:25,690 --> 00:24:31,389
he'll be like nope so it was a total

00:24:29,679 --> 00:24:34,600
waste of time so I removed it from the

00:24:31,389 --> 00:24:39,190
gym file and now everything is uniformly

00:24:34,600 --> 00:24:41,830
slow i'm sending about twenty-six

00:24:39,190 --> 00:24:44,830
percent of my time in GC which i can

00:24:41,830 --> 00:24:46,960
maybe dig into that and try and tune the

00:24:44,830 --> 00:24:50,110
garbage collector but like i said the

00:24:46,960 --> 00:24:51,970
way people right Ruby right is something

00:24:50,110 --> 00:24:54,399
that is a way that generally creates a

00:24:51,970 --> 00:24:57,130
lot of garbage and I'm still digging

00:24:54,399 --> 00:25:00,909
into ways to right Ruby without so much

00:24:57,130 --> 00:25:03,159
garbage and it ends up spending about

00:25:00,909 --> 00:25:05,350
fifty percent of its time buffering erva

00:25:03,159 --> 00:25:07,120
templates it turns out modern web

00:25:05,350 --> 00:25:09,700
applications are all about taking

00:25:07,120 --> 00:25:13,389
strings in twiddling loving pooping

00:25:09,700 --> 00:25:17,710
strings back out so it's been a lot of

00:25:13,389 --> 00:25:19,929
time in ER be so in about 45 minutes of

00:25:17,710 --> 00:25:21,610
exploration with perf tools I found a

00:25:19,929 --> 00:25:24,639
really weird thing that my application

00:25:21,610 --> 00:25:26,559
was doing away from about a second to

00:25:24,639 --> 00:25:29,200
render this issue's listing it was

00:25:26,559 --> 00:25:31,659
spending a half a second in action view

00:25:29,200 --> 00:25:33,549
down to about a half a second to a three

00:25:31,659 --> 00:25:36,340
quarters of a second only a corner

00:25:33,549 --> 00:25:37,960
second and views so everyone who works

00:25:36,340 --> 00:25:40,630
on sifter is going to be happier in in

00:25:37,960 --> 00:25:42,789
development mode and all I had to do was

00:25:40,630 --> 00:25:44,409
move some stuff around in the gym file I

00:25:42,789 --> 00:25:47,200
don't have to write really write any

00:25:44,409 --> 00:25:49,480
code so that was pretty awesome it was

00:25:47,200 --> 00:25:51,429
all from using a tool perf tools to peel

00:25:49,480 --> 00:25:53,950
back the layers figure out what's going

00:25:51,429 --> 00:25:56,350
on inside the application and stop doing

00:25:53,950 --> 00:26:00,039
things that the machine doesn't like it

00:25:56,350 --> 00:26:02,260
when I do them repeatedly so its

00:26:00,039 --> 00:26:04,720
measured experiment rinse repeat and

00:26:02,260 --> 00:26:06,500
then you're doing science it's awesome

00:26:04,720 --> 00:26:08,960
then your scientist

00:26:06,500 --> 00:26:14,530
we all want to be prankster scientists I

00:26:08,960 --> 00:26:16,910
hope so more directions what is Ruby

00:26:14,530 --> 00:26:21,370
previously I said that Ruby is a really

00:26:16,910 --> 00:26:24,650
strange way to write code and see and

00:26:21,370 --> 00:26:26,390
that's because it's right now and part

00:26:24,650 --> 00:26:29,060
of that is because MRI is written in C

00:26:26,390 --> 00:26:31,670
and because of its design when you're

00:26:29,060 --> 00:26:35,050
writing Ruby you're basically calling

00:26:31,670 --> 00:26:39,440
see things in a really strange way I

00:26:35,050 --> 00:26:43,040
think a lot of the tension about Ruby

00:26:39,440 --> 00:26:46,310
and why it isn't so good at concurrency

00:26:43,040 --> 00:26:48,470
why the GC is slow and its release

00:26:46,310 --> 00:26:50,900
patterns is because MRI as a piece of

00:26:48,470 --> 00:26:55,640
software is misunderstood and it can't

00:26:50,900 --> 00:26:58,520
be all things to all people so the first

00:26:55,640 --> 00:27:00,920
thing that Ruby is Ruby is a scripting

00:26:58,520 --> 00:27:03,050
language it scripts text and working

00:27:00,920 --> 00:27:05,390
with text that's the Pearl heritage it

00:27:03,050 --> 00:27:08,180
scripts working with C libraries because

00:27:05,390 --> 00:27:10,190
that's a useful thing to do and it

00:27:08,180 --> 00:27:13,610
scripts object interactions so it's easy

00:27:10,190 --> 00:27:16,700
to do small talk style object-oriented

00:27:13,610 --> 00:27:19,430
programming and it's easy to start and

00:27:16,700 --> 00:27:22,520
it's easy to jump down a level and

00:27:19,430 --> 00:27:26,960
automate doing things with objects so

00:27:22,520 --> 00:27:29,720
doing meta program the flip side is the

00:27:26,960 --> 00:27:33,230
MRI is not hot spot it's not the JVM

00:27:29,720 --> 00:27:35,860
it's not v8 it's not node it is not

00:27:33,230 --> 00:27:40,730
early so it doesn't have the best minds

00:27:35,860 --> 00:27:42,320
on the planet who were VMs working on it

00:27:40,730 --> 00:27:44,420
so it's not going to be as fast as

00:27:42,320 --> 00:27:49,030
hotspot or v8 doesn't have the best

00:27:44,420 --> 00:27:51,290
minds about concurrency and reliability

00:27:49,030 --> 00:27:53,510
working on it so it's not early so

00:27:51,290 --> 00:27:56,660
that's just a fact of life it's a

00:27:53,510 --> 00:28:00,500
trade-off it's more pleasant to use than

00:27:56,660 --> 00:28:02,660
a hot spot or Erlang but it's not as

00:28:00,500 --> 00:28:07,310
fast and it probably won't ever be as

00:28:02,660 --> 00:28:11,510
fast Livvy's core team has different

00:28:07,310 --> 00:28:13,990
ambitions than a lot of us in America

00:28:11,510 --> 00:28:16,220
doing startups working at rail shops

00:28:13,990 --> 00:28:17,680
their goals are different and that's

00:28:16,220 --> 00:28:19,840
part of why

00:28:17,680 --> 00:28:22,900
is never going to be hot spot or v8

00:28:19,840 --> 00:28:25,810
their primary prioritizing developer

00:28:22,900 --> 00:28:28,510
happiness over high performance they're

00:28:25,810 --> 00:28:31,810
prioritizing having a global variable

00:28:28,510 --> 00:28:34,240
lock so you can only run Ruby in one

00:28:31,810 --> 00:28:36,940
thread oh we're having to have a bunch

00:28:34,240 --> 00:28:40,360
of application level new texts and locks

00:28:36,940 --> 00:28:42,910
and whatnot in your code and they know

00:28:40,360 --> 00:28:44,140
process what processes as well they like

00:28:42,910 --> 00:28:45,550
they know how to work with them what

00:28:44,140 --> 00:28:48,610
works and what doesn't the shortcomings

00:28:45,550 --> 00:28:50,650
and so MRI for the foreseeable future

00:28:48,610 --> 00:28:53,430
will probably be processed centric

00:28:50,650 --> 00:28:56,640
instead of threat centric

00:28:53,430 --> 00:29:00,640
standardization is also something that

00:28:56,640 --> 00:29:04,510
were over on this side of the Pacific

00:29:00,640 --> 00:29:07,150
not so enthusiastic about when the

00:29:04,510 --> 00:29:10,090
standardization of ruby was proposed and

00:29:07,150 --> 00:29:12,670
announced a lot of people I know thought

00:29:10,090 --> 00:29:15,910
it was maybe not so useful or maybe even

00:29:12,670 --> 00:29:17,980
not so great because standardization who

00:29:15,910 --> 00:29:21,610
needs it if I want to use Ruby I can

00:29:17,980 --> 00:29:23,350
just start using Ruby my understanding

00:29:21,610 --> 00:29:27,280
of this and please correct me if I'm

00:29:23,350 --> 00:29:31,180
wrong after the talk the Japanese tech

00:29:27,280 --> 00:29:34,990
culture is not as easy to just start

00:29:31,180 --> 00:29:39,220
using something as it is here and so

00:29:34,990 --> 00:29:43,420
having a standardized body say hey movie

00:29:39,220 --> 00:29:45,910
is great means more people in the Ruby

00:29:43,420 --> 00:29:48,250
core community can start using Ruby for

00:29:45,910 --> 00:29:51,370
their day-to-day jobs and that's pretty

00:29:48,250 --> 00:29:53,080
awesome for them the third thing is that

00:29:51,370 --> 00:29:55,210
Ruby does not use Linux or semantic

00:29:53,080 --> 00:29:58,240
versioning conventions this seems to

00:29:55,210 --> 00:29:59,980
confuse a lot of people several of my

00:29:58,240 --> 00:30:03,340
friends said hey why didnt Ruby 2 point

00:29:59,980 --> 00:30:07,180
0 do big drastic things you know get rid

00:30:03,340 --> 00:30:11,980
of legacy cruft the basic reason is that

00:30:07,180 --> 00:30:15,700
Ruby doesn't have major versions you

00:30:11,980 --> 00:30:18,220
basically multiply the first number by

00:30:15,700 --> 00:30:19,960
the first two numbers by 10 and then

00:30:18,220 --> 00:30:22,240
you'll get a sort of semantic versioning

00:30:19,960 --> 00:30:24,880
number so Ruby used to kind of do the

00:30:22,240 --> 00:30:26,380
even-odd stable unstable series thing

00:30:24,880 --> 00:30:30,040
but doesn't do that

00:30:26,380 --> 00:30:32,860
more and semantic versioning was not

00:30:30,040 --> 00:30:35,290
even invented when really started so if

00:30:32,860 --> 00:30:40,570
you look at a ruby version number se19

00:30:35,290 --> 00:30:42,730
duct 3p three to seven if you want to

00:30:40,570 --> 00:30:46,720
understand what that is in semantic

00:30:42,730 --> 00:30:50,200
versioning you roughly you get version

00:30:46,720 --> 00:30:52,660
19.3 point 327 the reason I understand

00:30:50,200 --> 00:30:56,500
that they do it this way is because of

00:30:52,660 --> 00:30:58,450
how FTP servers sort files and that's an

00:30:56,500 --> 00:31:02,560
important thing for them so that's how

00:30:58,450 --> 00:31:05,230
it's done so just knowing just knowing

00:31:02,560 --> 00:31:08,560
that they're working at a different way

00:31:05,230 --> 00:31:12,370
is useful to understand like why there's

00:31:08,560 --> 00:31:14,680
still like the soap library in the Ruby

00:31:12,370 --> 00:31:16,210
standard library is because they're a

00:31:14,680 --> 00:31:21,370
little more conservative about pulling

00:31:16,210 --> 00:31:23,320
things out and because and I lost my

00:31:21,370 --> 00:31:24,310
train of thought so it's more there cuz

00:31:23,320 --> 00:31:26,730
they're more conservative because

00:31:24,310 --> 00:31:29,860
they're not going to break things as

00:31:26,730 --> 00:31:35,620
readily as we would in our fast-moving

00:31:29,860 --> 00:31:39,580
startup American business cycle so the

00:31:35,620 --> 00:31:44,620
way to walk around this is that MRI

00:31:39,580 --> 00:31:46,660
isn't Ruby MRIs justin is is is not the

00:31:44,620 --> 00:31:49,210
lady it's the way we tow a lot of people

00:31:46,660 --> 00:31:51,280
but it doesn't need to be the more we

00:31:49,210 --> 00:31:54,340
can adopt generally intervene eous the

00:31:51,280 --> 00:31:56,500
more ruby is just a language in MRI as

00:31:54,340 --> 00:31:58,780
another implementation of it and it's

00:31:56,500 --> 00:32:02,080
just the one that gets the new language

00:31:58,780 --> 00:32:05,350
features first gym will be and Rubinius

00:32:02,080 --> 00:32:07,930
are actively trying to make really high

00:32:05,350 --> 00:32:11,970
you know trying to make the ends that

00:32:07,930 --> 00:32:15,370
are comparable to hotspot or v8 or early

00:32:11,970 --> 00:32:17,650
and the more that we can get on board

00:32:15,370 --> 00:32:19,750
with JRuby and Rubinius the design

00:32:17,650 --> 00:32:22,390
tension between mr and western Ruby

00:32:19,750 --> 00:32:25,720
becomes a minor detail they can you know

00:32:22,390 --> 00:32:28,480
they can move in there sort of more

00:32:25,720 --> 00:32:33,140
conservative way we can push ahead and

00:32:28,480 --> 00:32:36,740
work through the breakage so

00:32:33,140 --> 00:32:38,540
I'm not sure how I'm doing for time I

00:32:36,740 --> 00:32:40,550
had to wrap up and then there's another

00:32:38,540 --> 00:32:43,250
section a bonus section if I have time

00:32:40,550 --> 00:32:45,650
MRI is knowable we can peel back the

00:32:43,250 --> 00:32:47,570
layers and understand the mechanism we

00:32:45,650 --> 00:32:49,610
can understand how the machine works we

00:32:47,570 --> 00:32:53,150
can also peel back the culture and

00:32:49,610 --> 00:32:55,010
understand how a really core works why

00:32:53,150 --> 00:32:58,910
it works why they do things the way they

00:32:55,010 --> 00:33:01,490
do we can spot bottlenecks and identify

00:32:58,910 --> 00:33:05,120
design trade-offs and then we can decide

00:33:01,490 --> 00:33:06,620
how to mitigate those things and improve

00:33:05,120 --> 00:33:08,510
them in the future or we can figure out

00:33:06,620 --> 00:33:12,290
how to live with them in the short term

00:33:08,510 --> 00:33:14,960
before we can fix them so you have

00:33:12,290 --> 00:33:18,620
homework I apologize you need to go read

00:33:14,960 --> 00:33:22,160
things go read code especially but read

00:33:18,620 --> 00:33:24,560
Jessie stormers books on UNIX processes

00:33:22,160 --> 00:33:26,750
and threads and on TCP sockets they're

00:33:24,560 --> 00:33:28,520
like a hundred pages each so just pick

00:33:26,750 --> 00:33:31,880
one and read it and if you like it keep

00:33:28,520 --> 00:33:33,440
going he's a great writer a film come

00:33:31,880 --> 00:33:35,870
with like spring cast and cheat sheets

00:33:33,440 --> 00:33:39,230
is a cheap seats 1-4 the sockets booked

00:33:35,870 --> 00:33:42,740
all the time if you want to understand

00:33:39,230 --> 00:33:45,080
how Ruby works internally how yard works

00:33:42,740 --> 00:33:47,150
how hashes work how regular expressions

00:33:45,080 --> 00:33:49,070
work then you should check out Pat

00:33:47,150 --> 00:33:53,380
Shaughnessy's Ruby under a microscope

00:33:49,070 --> 00:33:57,530
book he takes it all apart makes it all

00:33:53,380 --> 00:33:59,120
very obvious once you've read those

00:33:57,530 --> 00:34:01,850
things once you've dug into some source

00:33:59,120 --> 00:34:04,220
code go off and write your own echo

00:34:01,850 --> 00:34:06,500
server write your own memcached client

00:34:04,220 --> 00:34:08,899
or server an HTTP client or server a

00:34:06,500 --> 00:34:12,260
tiny little laughable key value database

00:34:08,899 --> 00:34:14,929
a threaded q worker I've been digging

00:34:12,260 --> 00:34:17,830
into that stuff over the past year and

00:34:14,929 --> 00:34:20,179
like all parts of my programming

00:34:17,830 --> 00:34:23,360
abilities have leveled up i'm better at

00:34:20,179 --> 00:34:26,090
web programming but i'm also i feel like

00:34:23,360 --> 00:34:28,130
i could talk about these things with

00:34:26,090 --> 00:34:29,870
people who really know about them i

00:34:28,130 --> 00:34:32,840
could be conversing and that helps me

00:34:29,870 --> 00:34:36,140
program better since i know how more of

00:34:32,840 --> 00:34:37,760
the stack works and finally most

00:34:36,140 --> 00:34:41,690
important poke the insides of your

00:34:37,760 --> 00:34:45,859
project poken side rails poke inside the

00:34:41,690 --> 00:34:49,730
gym you're using don't be content with

00:34:45,859 --> 00:34:52,220
just saying oh this is this is a ruby

00:34:49,730 --> 00:34:55,099
interpreter so it's too low level for me

00:34:52,220 --> 00:34:57,349
or I don't know how this gym works so

00:34:55,099 --> 00:34:59,119
it's magic there's no magical things

00:34:57,349 --> 00:35:01,910
there's only things you don't understand

00:34:59,119 --> 00:35:04,400
yet so poke the insides of your projects

00:35:01,910 --> 00:35:07,009
make them fast or figure out why they

00:35:04,400 --> 00:35:09,230
behave in weird ways and how you can

00:35:07,009 --> 00:35:10,640
work feed that so hold your wild

00:35:09,230 --> 00:35:13,099
applause I'm going to keep going until

00:35:10,640 --> 00:35:16,849
they kick me out or until Brian kicks me

00:35:13,099 --> 00:35:19,609
off the stage MRI is a virtual machine

00:35:16,849 --> 00:35:21,739
yar called yard and it runs on a colonel

00:35:19,609 --> 00:35:26,359
that's called Darwin and her online a

00:35:21,739 --> 00:35:29,059
computer that we call x86 so this is all

00:35:26,359 --> 00:35:31,009
about digging in like what is actually

00:35:29,059 --> 00:35:33,859
going on when i run a ruby program i

00:35:31,009 --> 00:35:37,309
shall go Ruby by its runtime behavior so

00:35:33,859 --> 00:35:39,410
like I said garbage is expensive here's

00:35:37,309 --> 00:35:43,549
a stupid little benchmark that measures

00:35:39,410 --> 00:35:46,519
just basic integer arithmetic integer

00:35:43,549 --> 00:35:51,109
arithmetic with a junk string in there

00:35:46,519 --> 00:35:54,380
and then allocating an array and the

00:35:51,109 --> 00:35:57,349
basic arithmetic is the fastest it's not

00:35:54,380 --> 00:35:59,960
horribly fast there's on a two gigahertz

00:35:57,349 --> 00:36:02,390
machine doing a million ads and six

00:35:59,960 --> 00:36:04,130
hundredths of a second is pretty not

00:36:02,390 --> 00:36:08,150
that great should be able to do two

00:36:04,130 --> 00:36:11,720
billion ads adding the string in there

00:36:08,150 --> 00:36:16,789
is only marginally slower but doing the

00:36:11,720 --> 00:36:19,460
arrays is really slow so that so yeah

00:36:16,789 --> 00:36:22,460
garbage collection creating creating

00:36:19,460 --> 00:36:26,809
stuff is expensive it's not cheap if you

00:36:22,460 --> 00:36:30,140
cannot do something like this and on the

00:36:26,809 --> 00:36:33,289
inside of a loop don't do it but when

00:36:30,140 --> 00:36:34,910
let's drill down into this program we

00:36:33,289 --> 00:36:38,259
can I take it apart with a really neat

00:36:34,910 --> 00:36:40,970
tool called dtrace that's available on

00:36:38,259 --> 00:36:42,680
things that aren't linux or windows so

00:36:40,970 --> 00:36:44,930
you can't use it on your production

00:36:42,680 --> 00:36:47,630
servers sorry but you can probably use

00:36:44,930 --> 00:36:50,569
it on your laptop it's available on OS

00:36:47,630 --> 00:36:54,680
10 freebsd because i know all of you are

00:36:50,569 --> 00:36:56,480
running freebsd on your laptops so what

00:36:54,680 --> 00:36:57,100
it lets you do is as your program is

00:36:56,480 --> 00:36:59,680
running with

00:36:57,100 --> 00:37:01,660
no overhead poke the insides of it and

00:36:59,680 --> 00:37:05,500
see what it's doing so you write these

00:37:01,660 --> 00:37:06,880
little probes in a language called d so

00:37:05,500 --> 00:37:10,510
basically you just go online and copy

00:37:06,880 --> 00:37:13,210
this from someone else but we can poke

00:37:10,510 --> 00:37:15,130
the insides and see what it what is what

00:37:13,210 --> 00:37:17,200
is my object when is object create an

00:37:15,130 --> 00:37:19,260
object free being called inside the Ruby

00:37:17,200 --> 00:37:22,030
interpreter these are Ruby specific

00:37:19,260 --> 00:37:24,550
hooks and then this one is a system

00:37:22,030 --> 00:37:28,210
global hook for when is now up called

00:37:24,550 --> 00:37:31,390
and then if you've ever done said or aux

00:37:28,210 --> 00:37:33,160
scripting this might look similar or you

00:37:31,390 --> 00:37:35,440
can do that stuff in Ruby which is

00:37:33,160 --> 00:37:38,560
awesome that I didn't have to learn SATA

00:37:35,440 --> 00:37:41,100
rock one day so this is going to print

00:37:38,560 --> 00:37:45,100
out the summary of all those collections

00:37:41,100 --> 00:37:48,970
so I run d trace on that ad benchmark

00:37:45,100 --> 00:37:52,300
from before and I took out everything

00:37:48,970 --> 00:37:55,060
but the eye to eye took out the garbage

00:37:52,300 --> 00:37:56,950
e1 they're annoying maybe I did this is

00:37:55,060 --> 00:37:59,980
the one with everything and you can see

00:37:56,950 --> 00:38:04,240
malik is called millions of times so

00:37:59,980 --> 00:38:06,850
that's probably not cheap if i take out

00:38:04,240 --> 00:38:08,830
that junk array that Malik is only

00:38:06,850 --> 00:38:11,020
called thirty five thousand times which

00:38:08,830 --> 00:38:14,200
is a vast improvement and that's why the

00:38:11,020 --> 00:38:18,670
program is faster the one with the junk

00:38:14,200 --> 00:38:21,550
string is about the same number of

00:38:18,670 --> 00:38:23,500
Malik's and it turns out object.create

00:38:21,550 --> 00:38:26,350
is constant across all of these so

00:38:23,500 --> 00:38:29,290
that's something a follow up for myself

00:38:26,350 --> 00:38:32,440
likewise object.create constant probably

00:38:29,290 --> 00:38:35,100
has to do with how Ruby allocates heap

00:38:32,440 --> 00:38:38,680
slots and whatnot but I'm not quite sure

00:38:35,100 --> 00:38:40,990
so I say you wonder what does my program

00:38:38,680 --> 00:38:42,640
really do what are the things called say

00:38:40,990 --> 00:38:45,730
you hadn't I hadn't just showed you how

00:38:42,640 --> 00:38:48,820
to use perf tools this is another way

00:38:45,730 --> 00:38:52,540
you could look at it you can hook method

00:38:48,820 --> 00:38:55,090
entry into Ruby code or in to see

00:38:52,540 --> 00:38:59,860
extension code and then get a log of

00:38:55,090 --> 00:39:02,620
everything that was ever called so this

00:38:59,860 --> 00:39:05,410
is from the laughable database you can

00:39:02,620 --> 00:39:07,930
see person to us is called and person is

00:39:05,410 --> 00:39:08,980
called and a bunch of faker stuff so

00:39:07,930 --> 00:39:12,340
this is really fun

00:39:08,980 --> 00:39:14,740
to look at like how rubygems works

00:39:12,340 --> 00:39:16,859
rubygems does a whole bunch of stuff

00:39:14,740 --> 00:39:23,410
before your program even starts running

00:39:16,859 --> 00:39:28,030
which is illuminating to to look at Ruby

00:39:23,410 --> 00:39:29,890
19 2 point 0 done all right so I'll fly

00:39:28,030 --> 00:39:31,840
to this it generates bytecodes the byte

00:39:29,890 --> 00:39:34,030
codes look like assembly you're going to

00:39:31,840 --> 00:39:38,050
disassemble it with this Keith Richards

00:39:34,030 --> 00:39:39,790
pro tip that's what a simple require

00:39:38,050 --> 00:39:42,280
looks like pretty easy that's what

00:39:39,790 --> 00:39:43,770
calling a block and there's an end line

00:39:42,280 --> 00:39:46,180
cash that you might have heard about

00:39:43,770 --> 00:39:49,380
this is what simple arithmetic looks

00:39:46,180 --> 00:39:52,240
like put on your put object call add and

00:39:49,380 --> 00:39:54,119
this is what ad looks like or know it

00:39:52,240 --> 00:39:58,750
system calls that's less interesting

00:39:54,119 --> 00:40:02,380
best race more Rolling Stones oh there's

00:39:58,750 --> 00:40:06,630
a weird thing system calls yeah okay and

00:40:02,380 --> 00:40:10,900
this is the bike this is the C code for

00:40:06,630 --> 00:40:14,050
that plus operation it takes some stuff

00:40:10,900 --> 00:40:17,170
here is the actual native C code right

00:40:14,050 --> 00:40:20,500
here is where object where the processor

00:40:17,170 --> 00:40:22,270
adds two numbers this is a fall to a

00:40:20,500 --> 00:40:24,040
case there's in this code there's a

00:40:22,270 --> 00:40:25,570
whole bunch of type checking that looks

00:40:24,040 --> 00:40:29,020
for fixing arms and floats and arrays

00:40:25,570 --> 00:40:30,580
and active record bass objects or just

00:40:29,020 --> 00:40:32,470
regular old Ruby objects that it can't

00:40:30,580 --> 00:40:33,910
optimize and this is where the one

00:40:32,470 --> 00:40:36,850
native instruction is and this is why

00:40:33,910 --> 00:40:39,100
really a slow you've got all this stuff

00:40:36,850 --> 00:40:42,119
it's checking types for you and doing

00:40:39,100 --> 00:40:45,600
smart things but here in the very middle

00:40:42,119 --> 00:40:47,710
be call an actual assembly an actual

00:40:45,600 --> 00:40:50,290
instruction that the processor can do a

00:40:47,710 --> 00:40:51,910
billion times a second so it's a

00:40:50,290 --> 00:40:54,790
trade-off and knowing about those

00:40:51,910 --> 00:40:58,290
trade-offs is useful and awesome now

00:40:54,790 --> 00:40:58,290
bring it to me

00:40:58,670 --> 00:41:01,820
thank you

00:41:29,280 --> 00:41:31,340

YouTube URL: https://www.youtube.com/watch?v=aRM06L1L_74


