Title: LoneStarRuby Conf 2013 - Cutting Through the Fog of Cloud by Kyle Rames
Publication date: 2020-01-28
Playlist: Lone Star Ruby Conf 2013
Description: 
	In this talk, I am going to briefly talk about "what cloud is" and highlight the various types of cloud (IaaS, PaaS, SaaS). The bulk of the talk will be about using the fog gem using IaaS. I will discuss fog concepts (collections, models, requests, services, providers) and supporting these with actual examples using fog.

Help us caption & translate this video!

http://amara.org/v/FG8Z/
Captions: 
	00:00:14,870 --> 00:00:20,150
hey everybody my name is Kyle reigns and

00:00:17,960 --> 00:00:22,850
I'm a developer advocate for rackspace

00:00:20,150 --> 00:00:26,290
and today I'm hopefully going to cut

00:00:22,850 --> 00:00:29,570
through some of the fog of cloud for you

00:00:26,290 --> 00:00:30,970
what there we go on the agenda today

00:00:29,570 --> 00:00:34,579
we're going to have just a brief

00:00:30,970 --> 00:00:36,710
five-minute like cloud 101 to go through

00:00:34,579 --> 00:00:38,270
some of the basic cloud concepts then

00:00:36,710 --> 00:00:41,570
we're going to actually jump in and

00:00:38,270 --> 00:00:43,399
start working on working with clouds

00:00:41,570 --> 00:00:47,239
using Ruby so we're going to actually

00:00:43,399 --> 00:00:49,519
see some some code in this talk so what

00:00:47,239 --> 00:00:52,609
is cloud cloud is starting to think

00:00:49,519 --> 00:00:55,519
about consuming computing resources like

00:00:52,609 --> 00:00:57,320
a utility much like the power that comes

00:00:55,519 --> 00:01:00,050
out of the electric outlet you're going

00:00:57,320 --> 00:01:01,999
to pay for a compute time by the hour

00:01:00,050 --> 00:01:05,480
you're going to pay for file transfer

00:01:01,999 --> 00:01:08,060
and storage by the megabyte and much

00:01:05,480 --> 00:01:12,140
like the power it's going to be

00:01:08,060 --> 00:01:15,680
seemingly infinite now there are three

00:01:12,140 --> 00:01:18,200
different types of cloud computing out

00:01:15,680 --> 00:01:21,230
there the first is software is a service

00:01:18,200 --> 00:01:23,510
which I'm sure everybody here is a very

00:01:21,230 --> 00:01:26,870
familiar with buddies used gmail and

00:01:23,510 --> 00:01:30,050
github so I'm going to jump a pass this

00:01:26,870 --> 00:01:32,570
one and talk a little bit about platform

00:01:30,050 --> 00:01:34,640
as a service platform as a service is

00:01:32,570 --> 00:01:37,250
where you're going to take your rails

00:01:34,640 --> 00:01:39,530
application your sinatra application

00:01:37,250 --> 00:01:41,090
really any rack application and you're

00:01:39,530 --> 00:01:43,550
going to upload that to your cloud

00:01:41,090 --> 00:01:46,070
provider and they're going to run your

00:01:43,550 --> 00:01:48,470
application within this little walled

00:01:46,070 --> 00:01:50,710
garden they're going to take care of a

00:01:48,470 --> 00:01:53,300
lot of the system administration for you

00:01:50,710 --> 00:01:55,330
they are also hopefully going to take

00:01:53,300 --> 00:01:58,520
care of most of the security for you and

00:01:55,330 --> 00:02:01,100
they're also going to get you a decent

00:01:58,520 --> 00:02:03,440
way towards developing a scalable

00:02:01,100 --> 00:02:04,820
solution the problem with platform is

00:02:03,440 --> 00:02:07,430
the service is when you want to do

00:02:04,820 --> 00:02:09,289
something outside of that context of

00:02:07,430 --> 00:02:10,970
that walled garden maybe there's a

00:02:09,289 --> 00:02:14,450
service you want to run that's not

00:02:10,970 --> 00:02:18,200
offered by the cloud provider maybe

00:02:14,450 --> 00:02:20,180
there is a binary or a gym with a native

00:02:18,200 --> 00:02:22,670
binary that you want to run and your

00:02:20,180 --> 00:02:25,370
platform won't let you do that and that

00:02:22,670 --> 00:02:27,530
kind of brings me to our third type of

00:02:25,370 --> 00:02:28,030
cloud which is infrastructure as a

00:02:27,530 --> 00:02:30,970
service

00:02:28,030 --> 00:02:33,610
this one's my favorite it's really the

00:02:30,970 --> 00:02:35,020
Lego Mindstorms of the cloud world

00:02:33,610 --> 00:02:37,630
you're going to get a whole bunch of

00:02:35,020 --> 00:02:40,569
cool little pieces like a compute piece

00:02:37,630 --> 00:02:42,130
an object storage piece load balance or

00:02:40,569 --> 00:02:45,069
piece they're going to be able to put

00:02:42,130 --> 00:02:49,420
those together in seemingly infinite

00:02:45,069 --> 00:02:51,850
number of combinations you'll typically

00:02:49,420 --> 00:02:54,640
see the different types of cloud

00:02:51,850 --> 00:02:57,190
expressed in a pyramid diagram like this

00:02:54,640 --> 00:02:59,830
with infrastructure as a service at the

00:02:57,190 --> 00:03:02,920
bottom as I said infrastructure service

00:02:59,830 --> 00:03:05,860
is the most flexible type of cloud and

00:03:02,920 --> 00:03:08,140
as you go up that pyramid your

00:03:05,860 --> 00:03:09,660
flexibility is going to reduce you're

00:03:08,140 --> 00:03:13,870
not really going to be able to add

00:03:09,660 --> 00:03:18,190
features to a software-as-a-service for

00:03:13,870 --> 00:03:21,430
example as we go down the pyramid your

00:03:18,190 --> 00:03:23,860
time to build and deploy a solution is

00:03:21,430 --> 00:03:25,630
going to go up it's much easier to go to

00:03:23,860 --> 00:03:27,850
github and type in your credit card

00:03:25,630 --> 00:03:30,160
information than it is to provision a

00:03:27,850 --> 00:03:33,940
whole bunch of servers and install get

00:03:30,160 --> 00:03:36,880
on there and then I wanted to talk to

00:03:33,940 --> 00:03:39,280
you about a couple of your cloud options

00:03:36,880 --> 00:03:42,940
when I say cloud you typically think

00:03:39,280 --> 00:03:44,620
about the public cloud the public cloud

00:03:42,940 --> 00:03:46,630
is where you're going to get the cheap

00:03:44,620 --> 00:03:49,209
computing resources that are going to be

00:03:46,630 --> 00:03:52,780
nearly infinite but there's another type

00:03:49,209 --> 00:03:53,709
out there called private cloud this is

00:03:52,780 --> 00:03:55,269
where you're going to go out you're

00:03:53,709 --> 00:03:56,560
going to buy your own machines or you're

00:03:55,269 --> 00:03:59,070
going to rent them from an internet

00:03:56,560 --> 00:04:01,680
hosting provider and you're going to

00:03:59,070 --> 00:04:04,209
install some cloud software on there

00:04:01,680 --> 00:04:07,720
you're going to get the benefit of

00:04:04,209 --> 00:04:08,980
having a programmable infrastructure but

00:04:07,720 --> 00:04:11,049
it's probably going to cost a little bit

00:04:08,980 --> 00:04:15,160
more for you and it's not going to be

00:04:11,049 --> 00:04:18,549
quite as infinite consequently there's a

00:04:15,160 --> 00:04:23,770
third type that's emerging called hybrid

00:04:18,549 --> 00:04:28,020
and hybrid it allows you to to partition

00:04:23,770 --> 00:04:31,000
your code between the portions that are

00:04:28,020 --> 00:04:33,520
more secure and maybe a little bit less

00:04:31,000 --> 00:04:36,909
secure and that kind of allows you to

00:04:33,520 --> 00:04:39,599
take advantage of the the security in

00:04:36,909 --> 00:04:41,050
some places and in that that cheaper

00:04:39,599 --> 00:04:44,259
infinite

00:04:41,050 --> 00:04:46,060
amount of cloud resources and others and

00:04:44,259 --> 00:04:49,150
the last thing I wanted to touch on is

00:04:46,060 --> 00:04:51,250
when I say cloud you typic you probably

00:04:49,150 --> 00:04:53,830
typically think of a closed cloud a

00:04:51,250 --> 00:04:56,650
closed cloud is you know where if you're

00:04:53,830 --> 00:04:59,349
interested in knowing what's happening

00:04:56,650 --> 00:05:02,280
with your cloud you you can't really

00:04:59,349 --> 00:05:04,840
look at the source code if you want a

00:05:02,280 --> 00:05:06,819
new feature or something for your cloud

00:05:04,840 --> 00:05:10,060
the best you're going to be able to do

00:05:06,819 --> 00:05:11,379
is fill out a comment card and you're

00:05:10,060 --> 00:05:14,650
definitely not going to be able to run

00:05:11,379 --> 00:05:16,719
it wherever you want and I here to tell

00:05:14,650 --> 00:05:19,210
you today that you actually have the

00:05:16,719 --> 00:05:22,530
option of selecting an open cloud much

00:05:19,210 --> 00:05:26,500
like OpenStack that we heard about today

00:05:22,530 --> 00:05:29,229
OpenStack today is 3rd birthday by the

00:05:26,500 --> 00:05:31,599
way and with an open cloud like

00:05:29,229 --> 00:05:34,840
OpenStack you can go to github you can

00:05:31,599 --> 00:05:36,789
see the source code you can actually

00:05:34,840 --> 00:05:40,389
submit pull requests you can work with

00:05:36,789 --> 00:05:43,180
the community to add features and you

00:05:40,389 --> 00:05:46,949
can also run that in both a private or a

00:05:43,180 --> 00:05:50,229
public environment you can download a

00:05:46,949 --> 00:05:53,500
distribution of cloud install on your

00:05:50,229 --> 00:05:56,020
own servers or you can use a company

00:05:53,500 --> 00:05:58,620
like Rackspace or HP that I actually

00:05:56,020 --> 00:06:01,330
have an open cloud and move

00:05:58,620 --> 00:06:06,130
transparently between those different

00:06:01,330 --> 00:06:08,979
environments so that was basically kind

00:06:06,130 --> 00:06:10,900
of a brief cloud 101 and now let's

00:06:08,979 --> 00:06:14,830
actually jump in and start manipulating

00:06:10,900 --> 00:06:17,169
the clouds using Ruby and for that we're

00:06:14,830 --> 00:06:20,520
going to actually be using the fog jim

00:06:17,169 --> 00:06:24,129
fog is the number one cloud SDK

00:06:20,520 --> 00:06:28,180
according to Ruby toolbox calm it's got

00:06:24,129 --> 00:06:30,310
over 2 million downloads has over 300

00:06:28,180 --> 00:06:33,009
contributors actually I think it's

00:06:30,310 --> 00:06:38,319
closer to 400 now and it's a very active

00:06:33,009 --> 00:06:42,460
project it has anywhere from 30 to 60

00:06:38,319 --> 00:06:45,400
commits per week and chances are even if

00:06:42,460 --> 00:06:47,860
you're not using fog you're using fog

00:06:45,400 --> 00:06:51,279
because fog powers a lot of our favorite

00:06:47,860 --> 00:06:53,580
gems such as paper clip carrier wave

00:06:51,279 --> 00:06:56,610
it's used by chef and

00:06:53,580 --> 00:07:00,150
it's used by the puppet provisioner and

00:06:56,610 --> 00:07:02,580
it's also used by rum which is a new

00:07:00,150 --> 00:07:05,460
utility that rackspace is launching here

00:07:02,580 --> 00:07:07,110
today at lone star ruby in Charles

00:07:05,460 --> 00:07:10,580
Lowell is going to be talking a little

00:07:07,110 --> 00:07:13,830
bit more about that in his session I

00:07:10,580 --> 00:07:15,870
also wanted to take take time to point

00:07:13,830 --> 00:07:18,479
out that i'm actually a top contributor

00:07:15,870 --> 00:07:21,270
to the fog project so if you actually

00:07:18,479 --> 00:07:24,240
have any questions about fog whether

00:07:21,270 --> 00:07:27,060
it's running with rackspace or Amazon or

00:07:24,240 --> 00:07:32,849
HP please feel free and come up and talk

00:07:27,060 --> 00:07:34,169
to me after the presentation now to see

00:07:32,849 --> 00:07:36,419
a list of the providers that are

00:07:34,169 --> 00:07:39,900
available in fog we're going to do fog

00:07:36,419 --> 00:07:41,099
dot providers doc keys and you can see

00:07:39,900 --> 00:07:42,780
it's going to spit out a whole bunch of

00:07:41,099 --> 00:07:46,860
different providers I think there's

00:07:42,780 --> 00:07:49,560
about thirty six of them right now some

00:07:46,860 --> 00:07:53,069
of those are just strictly DNS based

00:07:49,560 --> 00:07:56,789
providers but others such as Rackspace

00:07:53,069 --> 00:07:59,699
amazon HP OpenStack those are those

00:07:56,789 --> 00:08:03,419
actually have a full full suite of

00:07:59,699 --> 00:08:05,129
services and we are going to choose

00:08:03,419 --> 00:08:07,099
Rackspace today because I know everybody

00:08:05,129 --> 00:08:11,580
here is a big fan of open clouds and I

00:08:07,099 --> 00:08:13,409
love fanatical support so let's go see

00:08:11,580 --> 00:08:17,639
the services that are available to us

00:08:13,409 --> 00:08:19,589
through through the racks B's provider

00:08:17,639 --> 00:08:22,949
and we're going to do that by calling

00:08:19,589 --> 00:08:26,879
fog dot services that's going to return

00:08:22,949 --> 00:08:30,150
a hash the key for it in in that hash is

00:08:26,879 --> 00:08:32,130
going to be the service and the value is

00:08:30,150 --> 00:08:34,050
actually going to be a list of the

00:08:32,130 --> 00:08:36,269
different providers that support that

00:08:34,050 --> 00:08:38,190
service I mean you can see here through

00:08:36,269 --> 00:08:41,180
some Ruby code and this will probably be

00:08:38,190 --> 00:08:43,399
the most complex Ruby code we see today

00:08:41,180 --> 00:08:45,870
you can see a list of the different

00:08:43,399 --> 00:08:48,060
services that are available with

00:08:45,870 --> 00:08:51,060
rackspace provider we are going to be

00:08:48,060 --> 00:08:55,529
looking at compute underscore v2 load

00:08:51,060 --> 00:08:58,949
balancers and then dns and for the ego

00:08:55,529 --> 00:09:00,470
I'd among you in the crowd I'm sure you

00:08:58,949 --> 00:09:04,079
notice there's actually two different

00:09:00,470 --> 00:09:05,270
compute services compute v2 is for our

00:09:04,079 --> 00:09:08,120
next gen sir

00:09:05,270 --> 00:09:09,650
and unless you have any legacy servers

00:09:08,120 --> 00:09:13,820
you should really be using the compute

00:09:09,650 --> 00:09:16,790
of v2 version so we're going to start

00:09:13,820 --> 00:09:19,450
off by looking at a sample architecture

00:09:16,790 --> 00:09:23,870
that we're going to create using fog

00:09:19,450 --> 00:09:26,180
we're going to provision to cloud

00:09:23,870 --> 00:09:28,820
servers a load balancer and then we're

00:09:26,180 --> 00:09:31,670
going to add a DNS entry that will point

00:09:28,820 --> 00:09:36,140
to that load balancer and we're going to

00:09:31,670 --> 00:09:37,850
start off looking at the VMS and so for

00:09:36,140 --> 00:09:40,040
that we're going to go ahead and create

00:09:37,850 --> 00:09:43,340
a compute service so we're going to do

00:09:40,040 --> 00:09:45,590
fog colon colon compute new we're going

00:09:43,340 --> 00:09:47,630
to pass in a hash and the first key

00:09:45,590 --> 00:09:50,990
value pair in that hash is that that

00:09:47,630 --> 00:09:53,150
provider which is again Rackspace and

00:09:50,990 --> 00:09:54,380
this is going to return the rack this is

00:09:53,150 --> 00:09:58,460
what's going to make it returned the

00:09:54,380 --> 00:10:01,240
Rackspace implementation and then the

00:09:58,460 --> 00:10:04,310
rest of the key value pairs are specific

00:10:01,240 --> 00:10:09,050
configuration parameters for that

00:10:04,310 --> 00:10:12,380
service and that provider so you can see

00:10:09,050 --> 00:10:13,880
here we're specifying v2 for a version

00:10:12,380 --> 00:10:17,420
that's why we're going to get back that

00:10:13,880 --> 00:10:18,860
compute underscore v2 we're also going

00:10:17,420 --> 00:10:20,660
to pass in the credentials and then

00:10:18,860 --> 00:10:23,660
we're going to be using the Chicago data

00:10:20,660 --> 00:10:25,520
center today now there are actually

00:10:23,660 --> 00:10:28,130
three pieces of information that we're

00:10:25,520 --> 00:10:30,770
going to need to create a server the

00:10:28,130 --> 00:10:36,500
first is an image and this could be a

00:10:30,770 --> 00:10:37,940
boon to freebsd windows arch linux i

00:10:36,500 --> 00:10:39,530
could actually even be an image that

00:10:37,940 --> 00:10:42,050
you've created off of one of your

00:10:39,530 --> 00:10:44,240
running servers that we're going to need

00:10:42,050 --> 00:10:46,310
the flavor and the flavor is more or

00:10:44,240 --> 00:10:50,570
less the server configuration it's going

00:10:46,310 --> 00:10:53,780
to be a combination of memory disk space

00:10:50,570 --> 00:10:56,030
and number of CPUs and that's actually

00:10:53,780 --> 00:10:57,980
where a bulk of the cost of your your

00:10:56,030 --> 00:11:01,270
cloud server is going to come from there

00:10:57,980 --> 00:11:03,890
and then if you you pick an image that

00:11:01,270 --> 00:11:06,320
requires a license like Windows or red

00:11:03,890 --> 00:11:09,470
hat the final piece of information we're

00:11:06,320 --> 00:11:10,850
going to need is actually a name so

00:11:09,470 --> 00:11:12,860
we're going to start off by getting a

00:11:10,850 --> 00:11:15,200
list of images so we're going to do

00:11:12,860 --> 00:11:18,440
service dot images and this is going to

00:11:15,200 --> 00:11:18,970
return a list full of I think it is 30

00:11:18,440 --> 00:11:21,939
different

00:11:18,970 --> 00:11:24,370
on the Rackspace cloud these are going

00:11:21,939 --> 00:11:27,100
to include what we like to call base

00:11:24,370 --> 00:11:30,490
images as well as again any of those

00:11:27,100 --> 00:11:33,220
user created images and I for better or

00:11:30,490 --> 00:11:35,230
worse annum boo to man so we're going to

00:11:33,220 --> 00:11:38,949
get the in boo to image and so we're

00:11:35,230 --> 00:11:40,060
going to do that by doing images and

00:11:38,949 --> 00:11:42,579
then we're going to do a regular

00:11:40,060 --> 00:11:45,430
expression on boo too and you can see

00:11:42,579 --> 00:11:48,639
but you that we got back a rare earring

00:11:45,430 --> 00:11:50,800
tail image next we're going to need the

00:11:48,639 --> 00:11:53,199
flavor so we're going to do service dot

00:11:50,800 --> 00:11:55,899
flavors dot first and that's going to

00:11:53,199 --> 00:11:58,600
return the the cheapest cloud server

00:11:55,899 --> 00:12:01,000
rack space has which is a 512 Meg

00:11:58,600 --> 00:12:03,490
configuration the last piece of

00:12:01,000 --> 00:12:05,319
information again is the name and I

00:12:03,490 --> 00:12:07,019
wanted to pause here and talk a little

00:12:05,319 --> 00:12:10,769
bit about that because as we all know

00:12:07,019 --> 00:12:13,300
naming things is one of the two hardest

00:12:10,769 --> 00:12:15,459
problems in computer science the other

00:12:13,300 --> 00:12:18,610
two of course being cash and validation

00:12:15,459 --> 00:12:21,430
and off by one errors and when we go to

00:12:18,610 --> 00:12:24,189
pick a name we actually want to pick

00:12:21,430 --> 00:12:26,949
something that's very disposable

00:12:24,189 --> 00:12:28,809
something that we're not really going to

00:12:26,949 --> 00:12:29,980
remember and that's because we're not

00:12:28,809 --> 00:12:33,579
really going to develop a relationship

00:12:29,980 --> 00:12:35,589
with this with this cloud server it's

00:12:33,579 --> 00:12:37,240
not like our laptop or you know Oh

00:12:35,589 --> 00:12:39,459
Bessie that's running in a data center

00:12:37,240 --> 00:12:41,410
somewhere we're going to use it and then

00:12:39,459 --> 00:12:43,329
we're going to throw it away so I'm

00:12:41,410 --> 00:12:50,620
going to pick what I think is a pretty

00:12:43,329 --> 00:12:51,910
disposable named TK 421 and now that we

00:12:50,620 --> 00:12:53,800
have these three pieces of information

00:12:51,910 --> 00:12:55,899
we're going to go ahead and we're going

00:12:53,800 --> 00:12:58,540
to create a server and pass in our image

00:12:55,899 --> 00:13:01,120
our flavor and our name and then we're

00:12:58,540 --> 00:13:03,819
going to get back a server object and as

00:13:01,120 --> 00:13:05,439
you can see here that some of the value

00:13:03,819 --> 00:13:07,120
some of the attributes that we have for

00:13:05,439 --> 00:13:10,240
the server or nil and that's because

00:13:07,120 --> 00:13:12,279
we've actually scheduled the creation of

00:13:10,240 --> 00:13:14,439
the server with the Rackspace cloud it

00:13:12,279 --> 00:13:17,319
hasn't been built yet so let's go ahead

00:13:14,439 --> 00:13:20,290
and reload it to get the latest state so

00:13:17,319 --> 00:13:22,240
we're going to do TK underscore for 2 1

00:13:20,290 --> 00:13:26,019
dot reload you can see some of these

00:13:22,240 --> 00:13:28,059
values have actually populated and if we

00:13:26,019 --> 00:13:31,000
want to actually grab one of these

00:13:28,059 --> 00:13:32,710
attributes programmatically we can do

00:13:31,000 --> 00:13:34,330
server

00:13:32,710 --> 00:13:37,320
tributes you can see this is going to

00:13:34,330 --> 00:13:40,900
spit out a hash full of our attributes

00:13:37,320 --> 00:13:43,450
and fog is also going to provide us a

00:13:40,900 --> 00:13:47,710
little bit of a meta magic so we can

00:13:43,450 --> 00:13:49,480
actually do TK underscore 41 state we

00:13:47,710 --> 00:13:51,730
see it's in a build state and we also

00:13:49,480 --> 00:13:55,180
check the progress you see that this

00:13:51,730 --> 00:13:57,610
cloud server hasn't done anything yet so

00:13:55,180 --> 00:13:59,680
let's go ahead and reload it to get the

00:13:57,610 --> 00:14:01,210
latest state so you can see if we do

00:13:59,680 --> 00:14:03,940
serve it at state it's still in the

00:14:01,210 --> 00:14:06,610
build of build mode build state rather

00:14:03,940 --> 00:14:07,630
and then if we do serve it out progress

00:14:06,610 --> 00:14:10,960
you can see that we're actually

00:14:07,630 --> 00:14:13,390
seventeen percent done and as you notice

00:14:10,960 --> 00:14:15,100
this is actually a very common pattern

00:14:13,390 --> 00:14:17,740
that emerges whenever you're dealing

00:14:15,100 --> 00:14:21,340
with cloud resources and because of that

00:14:17,740 --> 00:14:24,010
fog actually has a mechanism called wait

00:14:21,340 --> 00:14:25,840
for and what wait for is going to do is

00:14:24,010 --> 00:14:27,820
it's going to go ahead and reload it

00:14:25,840 --> 00:14:29,410
like we've seen before and then it's

00:14:27,820 --> 00:14:31,840
going to do an instance of al on that

00:14:29,410 --> 00:14:34,450
block and in this block we actually have

00:14:31,840 --> 00:14:37,510
a ready method so it's going to do an

00:14:34,450 --> 00:14:40,680
essence server dot ready and then that

00:14:37,510 --> 00:14:43,510
ready implementation differs between

00:14:40,680 --> 00:14:45,520
different services different providers

00:14:43,510 --> 00:14:48,310
and different objects for our particular

00:14:45,520 --> 00:14:52,000
server here it's going to mean that it's

00:14:48,310 --> 00:14:53,680
any active state that it is at a hundred

00:14:52,000 --> 00:14:56,350
percent progress and that we've

00:14:53,680 --> 00:14:59,200
allocated an IP address because you know

00:14:56,350 --> 00:15:02,040
without out without an IP address the

00:14:59,200 --> 00:15:06,040
server's really not much use for us if

00:15:02,040 --> 00:15:09,070
this block evaluates to false it's going

00:15:06,040 --> 00:15:10,660
to sleep for second or two and then it's

00:15:09,070 --> 00:15:12,850
going to repeat that process and it's

00:15:10,660 --> 00:15:16,450
going to continue to do that until that

00:15:12,850 --> 00:15:18,160
block turns true or ten minutes is

00:15:16,450 --> 00:15:20,080
elapsed and it will throw a timeout

00:15:18,160 --> 00:15:22,270
exception you can see here that our

00:15:20,080 --> 00:15:24,910
server finished in hello little over

00:15:22,270 --> 00:15:27,460
three minutes now that our server is

00:15:24,910 --> 00:15:29,200
ready we can go ahead and get our login

00:15:27,460 --> 00:15:32,830
credentials so we do serve it out a user

00:15:29,200 --> 00:15:35,700
name and server top password when you

00:15:32,830 --> 00:15:37,960
create a server on the Rackspace cloud

00:15:35,700 --> 00:15:39,910
it's going to give you that it's going

00:15:37,960 --> 00:15:42,340
to populate that password attribute for

00:15:39,910 --> 00:15:45,820
you when you subsequently retrieve it

00:15:42,340 --> 00:15:47,770
it's going to be missing so you

00:15:45,820 --> 00:15:53,350
should either persist it when you have

00:15:47,770 --> 00:15:57,250
it or you can go ahead and change the

00:15:53,350 --> 00:16:00,310
password personally I actually prefer to

00:15:57,250 --> 00:16:02,650
use SSH key authentication and I'm sure

00:16:00,310 --> 00:16:05,140
you do as well because it's a little bit

00:16:02,650 --> 00:16:07,900
more secure and a little bit more

00:16:05,140 --> 00:16:09,640
convenient and because of that fog

00:16:07,900 --> 00:16:12,070
actually provides another mechanism

00:16:09,640 --> 00:16:13,900
called bootstrap and bootstraps going to

00:16:12,070 --> 00:16:15,340
go ahead and create a server and it's

00:16:13,900 --> 00:16:17,740
going to wait for the server like we've

00:16:15,340 --> 00:16:19,840
already seen and then it's going to go

00:16:17,740 --> 00:16:22,210
ahead and then create that authorized

00:16:19,840 --> 00:16:25,630
key file for us it's going to lock out

00:16:22,210 --> 00:16:27,610
that password for that root user so that

00:16:25,630 --> 00:16:29,140
password we had when wouldn't we

00:16:27,610 --> 00:16:31,030
wouldn't be able to use it anyway and

00:16:29,140 --> 00:16:34,210
then it's going to create an attributes

00:16:31,030 --> 00:16:36,130
in a metadata JSON file which is going

00:16:34,210 --> 00:16:39,220
to contain information about the server

00:16:36,130 --> 00:16:41,320
when it was provision you can see here

00:16:39,220 --> 00:16:44,530
that the bootstrap syntax is very

00:16:41,320 --> 00:16:47,530
similar to the create and then with the

00:16:44,530 --> 00:16:50,220
addition of a couple new attributes the

00:16:47,530 --> 00:16:53,140
public key path and the private key path

00:16:50,220 --> 00:16:56,070
once this bootstrap method finishes we

00:16:53,140 --> 00:17:00,760
can actually start using the server and

00:16:56,070 --> 00:17:01,810
fog provides an SCP and an SSH methods

00:17:00,760 --> 00:17:03,880
so we can actually go ahead and

00:17:01,810 --> 00:17:07,329
manipulate it so you can see here I'm

00:17:03,880 --> 00:17:09,699
going to SCP up a setup script to route

00:17:07,329 --> 00:17:12,070
/ setup and then I'm going to remotely

00:17:09,699 --> 00:17:14,260
execute it and you can see the results

00:17:12,070 --> 00:17:17,410
and saying settings that it's setting up

00:17:14,260 --> 00:17:19,689
a vm and you don't really have to just

00:17:17,410 --> 00:17:22,300
use this for set up scripts we actually

00:17:19,689 --> 00:17:24,970
have a group at Rackspace that uses this

00:17:22,300 --> 00:17:26,560
mechanism to do load testing against

00:17:24,970 --> 00:17:30,700
another one of our open source projects

00:17:26,560 --> 00:17:33,030
called repose proposes a reverse proxy

00:17:30,700 --> 00:17:35,320
into our cloud that handles

00:17:33,030 --> 00:17:38,410
authentication rate limiting a bunch

00:17:35,320 --> 00:17:40,470
other good stuff we've actually just

00:17:38,410 --> 00:17:42,880
really just barely scratched the surface

00:17:40,470 --> 00:17:44,860
of what you can actually do with a cloud

00:17:42,880 --> 00:17:47,560
server and I would encourage you to go

00:17:44,860 --> 00:17:50,710
dig in and look at the the documentation

00:17:47,560 --> 00:17:52,480
to learn a little bit more now we're

00:17:50,710 --> 00:17:54,610
actually going to pause and we're going

00:17:52,480 --> 00:17:55,710
to talk a little bit about what we

00:17:54,610 --> 00:17:58,380
actually

00:17:55,710 --> 00:18:00,960
of seeing if you remember one of the

00:17:58,380 --> 00:18:04,309
first things that I did was service

00:18:00,960 --> 00:18:08,250
Scott images that actually returned a

00:18:04,309 --> 00:18:11,279
collection back to us at the up at the

00:18:08,250 --> 00:18:14,279
top you can see that this collection

00:18:11,279 --> 00:18:16,580
inherits from array and that's why I was

00:18:14,279 --> 00:18:18,990
able to use the first and find methods

00:18:16,580 --> 00:18:21,750
under there is a fog colon colon

00:18:18,990 --> 00:18:24,330
collection that's just some basic

00:18:21,750 --> 00:18:26,309
internal guts that's not particularly

00:18:24,330 --> 00:18:28,409
interesting and then under there is the

00:18:26,309 --> 00:18:32,130
concrete implementation for the images

00:18:28,409 --> 00:18:35,820
class and those concrete implementations

00:18:32,130 --> 00:18:39,210
will typically contain all these methods

00:18:35,820 --> 00:18:41,580
the first being all and you haven't seen

00:18:39,210 --> 00:18:43,679
me actually use the all method but I've

00:18:41,580 --> 00:18:47,130
actually been using it everywhere every

00:18:43,679 --> 00:18:50,399
time I go to access a piece of data from

00:18:47,130 --> 00:18:52,890
that hash it actually calls us because

00:18:50,399 --> 00:18:56,429
it does some lazy loading if I would

00:18:52,890 --> 00:18:57,570
have known that ID for that butu image i

00:18:56,429 --> 00:19:00,659
could have actually gone ahead and

00:18:57,570 --> 00:19:03,330
retrieve that directly using the get get

00:19:00,659 --> 00:19:04,919
method and then there's also a create

00:19:03,330 --> 00:19:07,799
and new method and that kind of

00:19:04,919 --> 00:19:10,500
reinforces the restful nature of our

00:19:07,799 --> 00:19:13,909
cloud if i would have used knew it would

00:19:10,500 --> 00:19:16,559
have created a local copy in our vm and

00:19:13,909 --> 00:19:20,309
create actually creates not only that

00:19:16,559 --> 00:19:23,779
local copy but that that remote server

00:19:20,309 --> 00:19:25,860
as well i can get the list of

00:19:23,779 --> 00:19:28,620
collections that are available to a

00:19:25,860 --> 00:19:30,779
service by doing service dot collections

00:19:28,620 --> 00:19:34,380
you can see here that there are actually

00:19:30,779 --> 00:19:37,350
five different collections that are

00:19:34,380 --> 00:19:39,059
available for our compute service three

00:19:37,350 --> 00:19:41,850
of which we've already used servers

00:19:39,059 --> 00:19:45,299
flavors and images and the last two are

00:19:41,850 --> 00:19:47,789
attachments and networks inside

00:19:45,299 --> 00:19:50,279
collections of course our models here

00:19:47,789 --> 00:19:52,919
again is a class diagram for that and

00:19:50,279 --> 00:19:54,690
these are some of the methods that

00:19:52,919 --> 00:19:58,399
models typically implement we've

00:19:54,690 --> 00:20:01,200
actually already seen all these and this

00:19:58,399 --> 00:20:04,649
collectively this is actually known as

00:20:01,200 --> 00:20:06,690
the model layer in fog now let's

00:20:04,649 --> 00:20:09,059
actually go back to our example and see

00:20:06,690 --> 00:20:09,570
if we can apply our newfound knowledge

00:20:09,059 --> 00:20:12,570
of

00:20:09,570 --> 00:20:15,180
the collection the collection mechanism

00:20:12,570 --> 00:20:18,000
and fog as you can see here we actually

00:20:15,180 --> 00:20:20,700
have our two servers that are running

00:20:18,000 --> 00:20:23,760
but there's no way to kind of know which

00:20:20,700 --> 00:20:26,040
to balance a requests so we're going to

00:20:23,760 --> 00:20:28,080
go ahead and throw a load balancer into

00:20:26,040 --> 00:20:30,210
the mix and we're going to do that by

00:20:28,080 --> 00:20:33,000
starting off and creating a load

00:20:30,210 --> 00:20:34,770
balancer service you can see here that

00:20:33,000 --> 00:20:36,810
the syntax is a little bit different

00:20:34,770 --> 00:20:40,140
than what we used for the compute

00:20:36,810 --> 00:20:42,230
service the the namespace actually

00:20:40,140 --> 00:20:47,280
includes Rackspace and that's because

00:20:42,230 --> 00:20:49,890
there is not yet a nap traction for load

00:20:47,280 --> 00:20:53,160
balancers fog actually typically waits

00:20:49,890 --> 00:20:55,110
until there's three or more different

00:20:53,160 --> 00:20:57,960
services before it develops an

00:20:55,110 --> 00:20:59,910
abstraction and of course because there

00:20:57,960 --> 00:21:04,770
is no abstraction we don't don't need to

00:20:59,910 --> 00:21:07,190
supply the the provider keyvaluepair so

00:21:04,770 --> 00:21:09,060
we're going to go ahead and see what

00:21:07,190 --> 00:21:11,490
collections are available on the load

00:21:09,060 --> 00:21:13,650
balancer so if you do load balancer

00:21:11,490 --> 00:21:16,230
service collections you can see there's

00:21:13,650 --> 00:21:21,420
load balancers and notes which will be

00:21:16,230 --> 00:21:23,580
using to set up our load balancer so to

00:21:21,420 --> 00:21:26,400
create a load balancer we're going to do

00:21:23,580 --> 00:21:32,220
load balancer low balance or service dot

00:21:26,400 --> 00:21:34,680
load balancers dot create we're going to

00:21:32,220 --> 00:21:36,450
go ahead and populate some parameters

00:21:34,680 --> 00:21:38,730
we're going to give it a name we're

00:21:36,450 --> 00:21:41,850
going to use the HTTP protocol on port

00:21:38,730 --> 00:21:45,870
80 then we're going to specify our

00:21:41,850 --> 00:21:48,030
virtual IP addresses of type public this

00:21:45,870 --> 00:21:51,480
is actually going to create both an ipv4

00:21:48,030 --> 00:21:53,130
and an ipv6 address for our load

00:21:51,480 --> 00:21:56,490
balancer and then we're going to go

00:21:53,130 --> 00:21:58,380
ahead and then give it a node we're

00:21:56,490 --> 00:22:02,610
going to give it the the IP address for

00:21:58,380 --> 00:22:05,520
TK 421 its poured in as well as the

00:22:02,610 --> 00:22:07,740
condition if you try to create a load

00:22:05,520 --> 00:22:09,450
balancer without specifying enotes it's

00:22:07,740 --> 00:22:11,910
actually going to error out on you so we

00:22:09,450 --> 00:22:15,330
actually have to include this and of

00:22:11,910 --> 00:22:16,410
course I forgot our second vm so we're

00:22:15,330 --> 00:22:17,970
going to go ahead and add that

00:22:16,410 --> 00:22:20,490
programmatically we're going to do load

00:22:17,970 --> 00:22:22,800
balancers notes which again is a

00:22:20,490 --> 00:22:27,870
collection that sits on our

00:22:22,800 --> 00:22:29,940
balance or dot create we're going to go

00:22:27,870 --> 00:22:34,620
ahead and supply the same information we

00:22:29,940 --> 00:22:37,290
did for TK 421 now to get the address of

00:22:34,620 --> 00:22:39,810
where that load balancer we can do load

00:22:37,290 --> 00:22:43,370
balancer dot virtual IPS and we're going

00:22:39,810 --> 00:22:46,910
to go ahead and locate the ipv4 version

00:22:43,370 --> 00:22:57,270
once I do that I can do a virtual IP

00:22:46,910 --> 00:23:02,070
address yep um yeah it's been allocated

00:22:57,270 --> 00:23:04,530
by it by the service so it is valid and

00:23:02,070 --> 00:23:07,220
if we would go pull out a web browser

00:23:04,530 --> 00:23:09,480
and go to that IP address it would

00:23:07,220 --> 00:23:12,000
return a request from either one of our

00:23:09,480 --> 00:23:13,860
two servers now just to kind of give you

00:23:12,000 --> 00:23:17,450
a little bit of a taste of what you can

00:23:13,860 --> 00:23:20,790
do with a program about programmatic

00:23:17,450 --> 00:23:24,000
infrastructure I'm going to show you a

00:23:20,790 --> 00:23:25,520
little bit of continuous deployment so

00:23:24,000 --> 00:23:30,930
if we go ahead and create two new

00:23:25,520 --> 00:23:33,840
servers TK 602 and TK 603 with newer

00:23:30,930 --> 00:23:37,050
versions of software we can go ahead and

00:23:33,840 --> 00:23:39,500
add those notes like we did before and

00:23:37,050 --> 00:23:44,370
then we can take our existing notes

00:23:39,500 --> 00:23:46,170
tk-421 and TK 422 and we can we can set

00:23:44,370 --> 00:23:48,210
the condition to draining so the little

00:23:46,170 --> 00:23:50,760
balancer will no longer send any

00:23:48,210 --> 00:23:53,040
requests to those two notes and then we

00:23:50,760 --> 00:23:55,740
can wait for about 10 to 15 minutes to

00:23:53,040 --> 00:23:59,730
see how the new software is doing on 602

00:23:55,740 --> 00:24:01,110
and 603 if it is doing well we can go

00:23:59,730 --> 00:24:03,270
ahead and just kill off those nodes

00:24:01,110 --> 00:24:06,600
we're going to stop stop paying for

00:24:03,270 --> 00:24:09,090
those extra extra services likewise if

00:24:06,600 --> 00:24:10,530
something was wrong with those one of

00:24:09,090 --> 00:24:14,760
those two nodes we could actually

00:24:10,530 --> 00:24:20,700
reverse the process enable TK 421 in TK

00:24:14,760 --> 00:24:23,790
for 22 and and kill off 602 and 603 so

00:24:20,700 --> 00:24:27,810
now that we've seen how the model layer

00:24:23,790 --> 00:24:29,820
works inside a fog using both the

00:24:27,810 --> 00:24:32,460
compute service and the low balance or

00:24:29,820 --> 00:24:34,860
service I wanted to talk about the

00:24:32,460 --> 00:24:36,070
second layer that exists and that's the

00:24:34,860 --> 00:24:38,440
request layer

00:24:36,070 --> 00:24:41,320
the request layer is actually as a

00:24:38,440 --> 00:24:45,130
one-to-one mapping between the remote

00:24:41,320 --> 00:24:49,330
cloud and fog itself it's going to be

00:24:45,130 --> 00:24:51,790
the most efficient way to to access the

00:24:49,330 --> 00:24:54,850
cloud but it's not going to be portable

00:24:51,790 --> 00:24:58,150
between different different providers

00:24:54,850 --> 00:25:01,210
and for that reason that's why paperclip

00:24:58,150 --> 00:25:04,390
carrier wave and puppet and chef all

00:25:01,210 --> 00:25:06,610
prefer the model layer anusha to the

00:25:04,390 --> 00:25:09,520
only reason you'd actually ever want to

00:25:06,610 --> 00:25:11,470
use the request layer is if there was a

00:25:09,520 --> 00:25:13,630
feature in your cloud that was not

00:25:11,470 --> 00:25:16,360
available through the model abstraction

00:25:13,630 --> 00:25:19,270
and to see the list of requests that are

00:25:16,360 --> 00:25:22,570
available for service we can do service

00:25:19,270 --> 00:25:26,220
dot requests you see these are some of

00:25:22,570 --> 00:25:30,190
the methods that are available for the

00:25:26,220 --> 00:25:32,260
storage service that Rackspace has so

00:25:30,190 --> 00:25:35,140
let's go ahead and wheel our example

00:25:32,260 --> 00:25:39,490
back out and let's go ahead and see how

00:25:35,140 --> 00:25:42,780
we would add a Bespin mining com at a

00:25:39,490 --> 00:25:45,340
DNS record to point to our load balancer

00:25:42,780 --> 00:25:48,670
so again we're going to start off by

00:25:45,340 --> 00:25:50,470
creating a new dns server and we're

00:25:48,670 --> 00:25:53,320
going to do that by doing fog colon

00:25:50,470 --> 00:25:56,830
colon dns new we're gonna specify the

00:25:53,320 --> 00:25:59,200
provider because there is a traction

00:25:56,830 --> 00:26:00,460
available for dns and then we're going

00:25:59,200 --> 00:26:03,100
to pass in the credential information

00:26:00,460 --> 00:26:05,860
and hopefully this is all starting to

00:26:03,100 --> 00:26:09,220
feel very repetitive to you this is

00:26:05,860 --> 00:26:10,960
actually by design let's in once you

00:26:09,220 --> 00:26:13,450
realize this pattern you should be able

00:26:10,960 --> 00:26:17,310
to pick up any service that's available

00:26:13,450 --> 00:26:19,780
inside of fog like the database server

00:26:17,310 --> 00:26:24,940
monitoring of what have you and apply

00:26:19,780 --> 00:26:27,910
the same pattern so we are going to just

00:26:24,940 --> 00:26:30,490
for purposes of illustration use the

00:26:27,910 --> 00:26:32,560
request layer to create this new record

00:26:30,490 --> 00:26:35,890
we're going to start off again by doing

00:26:32,560 --> 00:26:37,990
dns service dot requests and you can see

00:26:35,890 --> 00:26:39,580
a list of requests that it supports

00:26:37,990 --> 00:26:44,200
we're going to be looking at the list

00:26:39,580 --> 00:26:46,510
domains and the ad records method so

00:26:44,200 --> 00:26:49,400
when I do service that list domains it's

00:26:46,510 --> 00:26:52,100
going to return an ex-con response

00:26:49,400 --> 00:26:56,120
ex-con is the underlying HTTP library

00:26:52,100 --> 00:26:59,210
that's used by fog and it has this

00:26:56,120 --> 00:27:01,400
object has some interesting data on it

00:26:59,210 --> 00:27:04,180
that i wanted to point out you can see

00:27:01,400 --> 00:27:08,470
that we have our data and that response

00:27:04,180 --> 00:27:11,900
from the server has automatically been

00:27:08,470 --> 00:27:15,920
translated from json into ruby objects

00:27:11,900 --> 00:27:17,450
by ex-con the second piece of

00:27:15,920 --> 00:27:20,440
information i wanted to point out were

00:27:17,450 --> 00:27:23,450
the headers these are the HTTP headers

00:27:20,440 --> 00:27:27,020
with a lot of different cloud services

00:27:23,450 --> 00:27:29,480
you'll see that they use header the

00:27:27,020 --> 00:27:32,960
header mechanism to transfer data this

00:27:29,480 --> 00:27:35,330
is particularly seen inside of storage

00:27:32,960 --> 00:27:38,060
services where the data that we're

00:27:35,330 --> 00:27:40,820
pulling back is the file and the last

00:27:38,060 --> 00:27:44,120
piece of information is the status and

00:27:40,820 --> 00:27:47,480
you can see we got a 200 okay back so

00:27:44,120 --> 00:27:49,460
this was a valid request so let's see

00:27:47,480 --> 00:27:51,800
how we would programmatically access

00:27:49,460 --> 00:27:54,680
this information using groovy so we're

00:27:51,800 --> 00:27:58,310
going to do response body we're going to

00:27:54,680 --> 00:28:02,180
grab that that domains hash and we're

00:27:58,310 --> 00:28:05,810
going to search for a hash inside of

00:28:02,180 --> 00:28:09,170
that array that has a key of name that

00:28:05,810 --> 00:28:11,750
contains a value of Vespa mining you can

00:28:09,170 --> 00:28:13,760
see that that was returned here and then

00:28:11,750 --> 00:28:16,730
again just to show you you do response

00:28:13,760 --> 00:28:19,040
dot status and that will return our 200

00:28:16,730 --> 00:28:20,990
okay so let's go ahead and add that

00:28:19,040 --> 00:28:24,950
record we're going to go ahead and grab

00:28:20,990 --> 00:28:27,530
that ipv4 address from our load balancer

00:28:24,950 --> 00:28:30,050
like we did before and then we're going

00:28:27,530 --> 00:28:32,120
to go ahead and use service dot add

00:28:30,050 --> 00:28:35,150
under school records and then we're

00:28:32,120 --> 00:28:36,680
going to pass in that ID of that was in

00:28:35,150 --> 00:28:39,230
that domain hash that we just found

00:28:36,680 --> 00:28:41,840
we're going to specify a name of Vespa

00:28:39,230 --> 00:28:45,560
mining it's going to be a type a record

00:28:41,840 --> 00:28:47,810
which is an ipv4 record if we wanted to

00:28:45,560 --> 00:28:50,690
create an ipv6 record that would be a

00:28:47,810 --> 00:28:53,780
triple-a of the data of course is going

00:28:50,690 --> 00:28:55,700
to be the IP address of our load

00:28:53,780 --> 00:28:59,560
balancer and we're going to specify an

00:28:55,700 --> 00:29:02,040
optional time-to-live of five minutes

00:28:59,560 --> 00:29:04,650
and that completes our

00:29:02,040 --> 00:29:08,340
example infrastructure obviously this

00:29:04,650 --> 00:29:11,370
example was for illustrative purposes if

00:29:08,340 --> 00:29:12,990
this was actually a real architecture

00:29:11,370 --> 00:29:15,180
that we're going to use for a real

00:29:12,990 --> 00:29:19,100
solution we probably would want to

00:29:15,180 --> 00:29:22,740
include a data source like a database or

00:29:19,100 --> 00:29:25,260
maybe a no SQL database service setups

00:29:22,740 --> 00:29:28,140
and monitoring we could also set up some

00:29:25,260 --> 00:29:30,750
private at working between the VMS so

00:29:28,140 --> 00:29:34,440
that they weren't accessible through the

00:29:30,750 --> 00:29:36,810
internet now now that we've actually

00:29:34,440 --> 00:29:40,110
seen how fog works I wanted to actually

00:29:36,810 --> 00:29:42,150
do we do a deep deep dive and find out a

00:29:40,110 --> 00:29:44,960
little bit more so let's go ahead and

00:29:42,150 --> 00:29:48,450
try to retrieve our own boo to image I

00:29:44,960 --> 00:29:51,230
suddenly remember the ID for that raring

00:29:48,450 --> 00:29:54,000
ringtail image that I looked at earlier

00:29:51,230 --> 00:29:59,000
so we're going to do service dot images

00:29:54,000 --> 00:30:02,460
get this is going to go into the images

00:29:59,000 --> 00:30:06,150
colection class and we're inside the get

00:30:02,460 --> 00:30:08,100
method and you can see here that the

00:30:06,150 --> 00:30:13,530
collections class is actually going to

00:30:08,100 --> 00:30:16,140
use the request layer inside of fog the

00:30:13,530 --> 00:30:21,150
the model layer should never access the

00:30:16,140 --> 00:30:24,300
HTTP layer it it'd be really bad if it

00:30:21,150 --> 00:30:27,090
if it did be a leaky abstraction so

00:30:24,300 --> 00:30:29,100
going down a layer into it we can see of

00:30:27,090 --> 00:30:32,700
the actual request method that we're

00:30:29,100 --> 00:30:35,940
sending out a request is the is a method

00:30:32,700 --> 00:30:39,330
that's on our service we are going to

00:30:35,940 --> 00:30:41,940
expect to get back at 200 or 203 from

00:30:39,330 --> 00:30:43,770
our cloud if we don't get that ex-con is

00:30:41,940 --> 00:30:46,650
going to go ahead and throw an exception

00:30:43,770 --> 00:30:49,110
for us we are going to use the get

00:30:46,650 --> 00:30:51,450
method to retrieve the information about

00:30:49,110 --> 00:30:54,030
the image and this is actually the path

00:30:51,450 --> 00:30:59,330
on the Rackspace cloud to that image and

00:30:54,030 --> 00:31:02,910
this will result in the following HTTP

00:30:59,330 --> 00:31:08,310
request going out you can see here our

00:31:02,910 --> 00:31:09,630
get verb the first part of that URL is

00:31:08,310 --> 00:31:11,670
actually going to be our service

00:31:09,630 --> 00:31:14,310
endpoint now when we originally created

00:31:11,670 --> 00:31:16,530
our services it actually went

00:31:14,310 --> 00:31:18,690
out and authenticated against the

00:31:16,530 --> 00:31:21,060
Rackspace cloud and we looked up at

00:31:18,690 --> 00:31:24,110
servers service endpoint for the Chicago

00:31:21,060 --> 00:31:27,210
data center and that's our end point

00:31:24,110 --> 00:31:30,930
there of course is the extra path that

00:31:27,210 --> 00:31:32,940
we specified that we're setting some

00:31:30,930 --> 00:31:35,460
additional headers we set a content type

00:31:32,940 --> 00:31:38,640
and we also say that we are going to

00:31:35,460 --> 00:31:40,560
expect to get JSON back obviously you

00:31:38,640 --> 00:31:43,770
don't need to specify the content type

00:31:40,560 --> 00:31:46,380
for for a get request but that's the way

00:31:43,770 --> 00:31:48,180
far currently does it and the last piece

00:31:46,380 --> 00:31:51,150
of information I wanted to point out was

00:31:48,180 --> 00:31:53,160
the auth token and this was another

00:31:51,150 --> 00:31:56,370
piece of information that we received

00:31:53,160 --> 00:31:58,980
from the cloud when we authenticated it

00:31:56,370 --> 00:32:02,490
against it this token is should be valid

00:31:58,980 --> 00:32:07,320
for about 24 hours and it identifies all

00:32:02,490 --> 00:32:09,570
of our requests to to the cloud and if

00:32:07,320 --> 00:32:11,730
we were interested in seeing detail like

00:32:09,570 --> 00:32:13,680
this when we were programming with

00:32:11,730 --> 00:32:16,320
ex-con we could actually export the

00:32:13,680 --> 00:32:18,660
following environmental variable X con

00:32:16,320 --> 00:32:20,400
underscore debug equals true and we be

00:32:18,660 --> 00:32:22,710
able to see that that request response

00:32:20,400 --> 00:32:26,010
coming back from ex con which is

00:32:22,710 --> 00:32:29,400
obviously particularly important for

00:32:26,010 --> 00:32:31,860
debugging and then the last thing I

00:32:29,400 --> 00:32:35,430
wanted to briefly test touch on was

00:32:31,860 --> 00:32:39,210
testing fog actually provides a mocking

00:32:35,430 --> 00:32:41,400
framework if you want to to incorporate

00:32:39,210 --> 00:32:45,780
fog into some of your testing you can

00:32:41,400 --> 00:32:47,490
enable that by doing fog mock bang and

00:32:45,780 --> 00:32:51,270
that should return dummy data for each

00:32:47,490 --> 00:32:53,730
request you could also use the vcr gem

00:32:51,270 --> 00:32:57,360
to go ahead and then record some of

00:32:53,730 --> 00:32:59,850
those record some requests and test

00:32:57,360 --> 00:33:03,150
against that as well and that's uh

00:32:59,850 --> 00:33:05,540
that's my presentation all right thanks

00:33:03,150 --> 00:33:05,540
for coming guys

00:33:35,080 --> 00:33:37,409

YouTube URL: https://www.youtube.com/watch?v=QbsDEUwwPVE


