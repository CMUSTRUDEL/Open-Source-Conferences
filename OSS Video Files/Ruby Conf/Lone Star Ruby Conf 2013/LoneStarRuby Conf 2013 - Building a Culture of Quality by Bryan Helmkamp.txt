Title: LoneStarRuby Conf 2013 - Building a Culture of Quality by Bryan Helmkamp
Publication date: 2020-01-28
Playlist: Lone Star Ruby Conf 2013
Description: 
	Time and time again, skilled developers with good intentions set out into the green field of their new Rails app. Alas, as days turn to weeks, weeks to months and months to years, they find themselves with an ever increasing maintenance burden. Adding new features in a well-designed way starts to feel like an exercise in futility, so they resort to liberal use of conditionals to avoid breaking existing code.

This leads to more complexity, and on the cycle goes.

It doesn't need to be like this. There's no silver bullet that will save your project from this fate, but by practicing a holistic approach to code quality you can stave off the maintenance monsters and keep your app's code feeling fresh and clean. This talk will look at low ceremony, common sense approaches to taking control of the quality of your codebase. You'll leave with an expanded toolbox of techniques to build a culture of quality within your organization.

Help us caption & translate this video!

http://amara.org/v/FG84/
Captions: 
	00:00:19,980 --> 00:00:25,599
today I'd like to talk about building a

00:00:23,019 --> 00:00:27,160
culture of code quality but the favorite

00:00:25,599 --> 00:00:29,680
shot with that is a conference speaking

00:00:27,160 --> 00:00:31,809
pro tip ever you tend to avoid being

00:00:29,680 --> 00:00:33,730
directly after the guy who does improv

00:00:31,809 --> 00:00:36,670
comedy on the side that's the worst

00:00:33,730 --> 00:00:38,470
possible spot so watch out for that I'm

00:00:36,670 --> 00:00:41,070
real excited to be here at lone star

00:00:38,470 --> 00:00:47,379
will be or as it's more popularly known

00:00:41,070 --> 00:00:48,879
when our comp my name's Brian I served a

00:00:47,379 --> 00:00:50,079
company called code planning a couple

00:00:48,879 --> 00:00:51,129
years ago I was gonna ask you how many

00:00:50,079 --> 00:00:52,839
people heard of that we already did that

00:00:51,129 --> 00:00:54,939
how many people actually our code clinic

00:00:52,839 --> 00:00:56,949
customers raise your hands yeah you guys

00:00:54,939 --> 00:01:04,659
are my friends so it's great to just see

00:00:56,949 --> 00:01:07,509
you here whoa too much Mike so so I lost

00:01:04,659 --> 00:01:09,159
my train of thought yeah so I was

00:01:07,509 --> 00:01:10,930
thinking a little bit about a new talk

00:01:09,159 --> 00:01:11,890
to give someone to give an you talking

00:01:10,930 --> 00:01:14,020
someone said you should give a talk

00:01:11,890 --> 00:01:15,280
about code climate I said that's great

00:01:14,020 --> 00:01:16,780
that's a great talk they'll be really

00:01:15,280 --> 00:01:18,369
easy for me to prepare and I'd love to

00:01:16,780 --> 00:01:20,500
share with people all the amazing things

00:01:18,369 --> 00:01:23,350
that code climate can do to help them

00:01:20,500 --> 00:01:25,659
improve code quality and catch bugs in

00:01:23,350 --> 00:01:27,640
there Ruby applications and about five

00:01:25,659 --> 00:01:29,109
minutes later I realized that I can't

00:01:27,640 --> 00:01:31,179
give a talk about good climate otherwise

00:01:29,109 --> 00:01:32,409
everyone will hate me because I built

00:01:31,179 --> 00:01:33,670
code climate and they're just be talking

00:01:32,409 --> 00:01:34,810
about my own thing so you should all the

00:01:33,670 --> 00:01:35,889
next time you're submitting to a

00:01:34,810 --> 00:01:40,359
conference give a talk about code

00:01:35,889 --> 00:01:42,069
climate cuz I can um so I thought okay

00:01:40,359 --> 00:01:44,679
why don't I get to talk about building a

00:01:42,069 --> 00:01:46,840
culture of code quality and that's what

00:01:44,679 --> 00:01:49,749
we're gonna talk about today um as a

00:01:46,840 --> 00:01:51,189
matter of fact very little of that has

00:01:49,749 --> 00:01:53,049
anything to do with movie so there's

00:01:51,189 --> 00:01:54,159
actually no Ruby in this talk whatsoever

00:01:53,049 --> 00:01:55,389
and there's very little about code

00:01:54,159 --> 00:01:57,100
climate so this is kind of like the

00:01:55,389 --> 00:01:57,939
softest talk that I've given so it's

00:01:57,100 --> 00:01:59,619
going to be a little bit of an

00:01:57,939 --> 00:02:02,200
experiment for both of us but hopefully

00:01:59,619 --> 00:02:04,060
it'll be a fun ride I want to start with

00:02:02,200 --> 00:02:07,060
the definition which is presenting

00:02:04,060 --> 00:02:08,259
problems this is a term that I became

00:02:07,060 --> 00:02:10,929
familiar with over the last couple years

00:02:08,259 --> 00:02:13,120
it comes from medicine and it refers to

00:02:10,929 --> 00:02:15,700
the initial symptom that motivated you

00:02:13,120 --> 00:02:17,590
to go see a doctor so you might go see a

00:02:15,700 --> 00:02:19,090
doctor because your arm is sore that's

00:02:17,590 --> 00:02:20,890
the presenting problem there might be

00:02:19,090 --> 00:02:22,750
any number of a hundred things that are

00:02:20,890 --> 00:02:24,490
the reason that your arm is sore but you

00:02:22,750 --> 00:02:25,750
just know you're honest or and that's

00:02:24,490 --> 00:02:27,400
what you're trying to address so that's

00:02:25,750 --> 00:02:30,160
a presenting problem now with code

00:02:27,400 --> 00:02:31,610
quality there are a number of presenting

00:02:30,160 --> 00:02:34,430
problems that can

00:02:31,610 --> 00:02:35,780
up in your project if you're not keeping

00:02:34,430 --> 00:02:36,830
up the quality of your code base and

00:02:35,780 --> 00:02:38,660
you're probably familiar with some of

00:02:36,830 --> 00:02:40,070
these maybe not on your current project

00:02:38,660 --> 00:02:42,050
with your current team but with a

00:02:40,070 --> 00:02:44,000
previous project and a different team

00:02:42,050 --> 00:02:47,330
you might have seen stuff like this so

00:02:44,000 --> 00:02:48,860
slow progress right it might feel on

00:02:47,330 --> 00:02:50,780
certain projects that it's very

00:02:48,860 --> 00:02:52,700
difficult to add new features that

00:02:50,780 --> 00:02:54,800
you're always fighting and clawing your

00:02:52,700 --> 00:02:57,740
way to get anything added to the code

00:02:54,800 --> 00:02:59,740
base and that every every single change

00:02:57,740 --> 00:03:02,840
you're trying to make is a struggle it

00:02:59,740 --> 00:03:04,640
might feel that every time you go to

00:03:02,840 --> 00:03:07,040
make a change to your code you're at

00:03:04,640 --> 00:03:08,510
risk of introducing bugs you don't

00:03:07,040 --> 00:03:10,070
expect that when you change something

00:03:08,510 --> 00:03:12,590
over here something over here is going

00:03:10,070 --> 00:03:14,360
to break but time and time again you

00:03:12,590 --> 00:03:16,820
find out as your shipping code to

00:03:14,360 --> 00:03:19,040
production that either your QA team your

00:03:16,820 --> 00:03:20,840
users somebody in the business has found

00:03:19,040 --> 00:03:22,700
an issue that you need to resolve that

00:03:20,840 --> 00:03:24,620
might be a presenting problem that is

00:03:22,700 --> 00:03:26,780
telling you that you have a code quality

00:03:24,620 --> 00:03:29,150
issue and then when you go to fix those

00:03:26,780 --> 00:03:31,370
bugs you might find that when you go to

00:03:29,150 --> 00:03:32,810
fix the bug over here a new bug pops up

00:03:31,370 --> 00:03:34,459
over there when you fix that when a bug

00:03:32,810 --> 00:03:35,630
turns up right next to it so configured

00:03:34,459 --> 00:03:37,459
to playing a game of whack-a-mole

00:03:35,630 --> 00:03:38,750
against your code base to try to stop

00:03:37,459 --> 00:03:40,970
out all the bugs all those are

00:03:38,750 --> 00:03:43,040
presenting problems that can speak to

00:03:40,970 --> 00:03:46,820
among other things an issue with code

00:03:43,040 --> 00:03:48,980
quality so this can create a vicious

00:03:46,820 --> 00:03:50,870
cycle let's look at how exactly that

00:03:48,980 --> 00:03:53,060
would work usually it starts with

00:03:50,870 --> 00:03:55,130
pressure so perhaps your business made a

00:03:53,060 --> 00:03:57,350
commitment to a customer to deliver a

00:03:55,130 --> 00:04:00,170
fixed set of features on a fixed

00:03:57,350 --> 00:04:01,640
deadline now in some cases that might be

00:04:00,170 --> 00:04:02,900
a good decision for the business to make

00:04:01,640 --> 00:04:04,400
it might be a bad decision for the

00:04:02,900 --> 00:04:06,080
business to make but at the end of the

00:04:04,400 --> 00:04:07,700
day usually falls to us to make sure

00:04:06,080 --> 00:04:09,769
that that happens right so we have

00:04:07,700 --> 00:04:12,250
pressure to get done get these features

00:04:09,769 --> 00:04:14,060
done by this date now sometimes

00:04:12,250 --> 00:04:16,430
developers when they're under pressure

00:04:14,060 --> 00:04:17,540
tend to write code that's not as good as

00:04:16,430 --> 00:04:18,979
the code that they would write if they

00:04:17,540 --> 00:04:21,260
weren't under pressure and I'm going to

00:04:18,979 --> 00:04:23,300
use the term slop for this now sometimes

00:04:21,260 --> 00:04:24,890
people use the term technical debt I

00:04:23,300 --> 00:04:26,870
think there's a big difference between

00:04:24,890 --> 00:04:28,310
technical debt and slop and I'm happy to

00:04:26,870 --> 00:04:30,890
talk about that after ask me a question

00:04:28,310 --> 00:04:33,110
for interested in that but pressure can

00:04:30,890 --> 00:04:34,820
lead to sloppy coding practices the

00:04:33,110 --> 00:04:38,000
problem is that sloppy coding practices

00:04:34,820 --> 00:04:40,460
lead you to be late because you're now

00:04:38,000 --> 00:04:42,229
dealing with sloppy code every time

00:04:40,460 --> 00:04:43,710
you've got another milestone in front of

00:04:42,229 --> 00:04:45,180
you it's gonna be harder and hard

00:04:43,710 --> 00:04:46,860
to meet that milestone it's like your

00:04:45,180 --> 00:04:49,440
treadmill is putting up more and more

00:04:46,860 --> 00:04:51,510
resistance right and then if your weight

00:04:49,440 --> 00:04:52,830
you've got more pressure so now you

00:04:51,510 --> 00:04:54,480
right back to the beginning of the cycle

00:04:52,830 --> 00:04:55,950
all this pressure which is causing you

00:04:54,480 --> 00:04:57,960
to write more sloppy code and you later

00:04:55,950 --> 00:05:00,450
later and you're totally screwed right

00:04:57,960 --> 00:05:02,100
so today we're going to look at how do

00:05:00,450 --> 00:05:04,470
we avoid this and if we're in this

00:05:02,100 --> 00:05:06,060
situation how to get out of it so there

00:05:04,470 --> 00:05:07,170
are a number of factors everyone when it

00:05:06,060 --> 00:05:09,000
comes to code quality basically

00:05:07,170 --> 00:05:11,160
everything is working against you the

00:05:09,000 --> 00:05:12,990
natural direction for code quality to

00:05:11,160 --> 00:05:14,960
trend over the lifetime of a project is

00:05:12,990 --> 00:05:17,520
down and we see this time and time again

00:05:14,960 --> 00:05:19,350
your business is changing a lot of us

00:05:17,520 --> 00:05:21,060
work for smaller organizations

00:05:19,350 --> 00:05:22,920
organizations that are operating the

00:05:21,060 --> 00:05:24,210
face of great uncertainty the things

00:05:22,920 --> 00:05:25,920
that the business feels like are

00:05:24,210 --> 00:05:27,210
important today may be different from

00:05:25,920 --> 00:05:29,100
the things that business fields are

00:05:27,210 --> 00:05:30,780
important next month and because of that

00:05:29,100 --> 00:05:32,730
it's going to put pressure on the

00:05:30,780 --> 00:05:35,610
engineering team to change things and

00:05:32,730 --> 00:05:37,500
change is where you need to be most

00:05:35,610 --> 00:05:39,990
attuned to quality otherwise you can get

00:05:37,500 --> 00:05:41,670
yourself into trouble similarly we were

00:05:39,990 --> 00:05:44,340
all working with newer technologies

00:05:41,670 --> 00:05:45,990
right we have interesting web scale

00:05:44,340 --> 00:05:47,850
performance requirements we might need

00:05:45,990 --> 00:05:50,010
to replace a sequel database with

00:05:47,850 --> 00:05:51,930
something like lettuce or MongoDB in

00:05:50,010 --> 00:05:53,580
order to achieve a characteristic of our

00:05:51,930 --> 00:05:56,460
application that we're looking for those

00:05:53,580 --> 00:05:58,230
changes can also cause us to fall down

00:05:56,460 --> 00:06:01,080
on our quality and introduce sloppy code

00:05:58,230 --> 00:06:03,570
and then almost all projects over enough

00:06:01,080 --> 00:06:05,490
time deal with team changes as well it

00:06:03,570 --> 00:06:07,080
may be that people are rotating through

00:06:05,490 --> 00:06:08,640
projects and the same company people are

00:06:07,080 --> 00:06:11,280
moving on from the company coming into

00:06:08,640 --> 00:06:12,810
it and sometimes you're also having

00:06:11,280 --> 00:06:15,000
people joining your team who maybe don't

00:06:12,810 --> 00:06:16,230
have the same level of experience as the

00:06:15,000 --> 00:06:18,390
people who wrote the application

00:06:16,230 --> 00:06:20,400
originally everybody would love to hire

00:06:18,390 --> 00:06:23,070
nothing but senior software engineers

00:06:20,400 --> 00:06:25,170
but that's not realistic and if anything

00:06:23,070 --> 00:06:26,430
in a few even if they did how would the

00:06:25,170 --> 00:06:28,080
junior software engineers that exist

00:06:26,430 --> 00:06:30,210
today become senior software engineers

00:06:28,080 --> 00:06:32,520
right we need a way for people to

00:06:30,210 --> 00:06:34,890
improve with their team while keeping

00:06:32,520 --> 00:06:36,300
the quality the code hi so this is an

00:06:34,890 --> 00:06:38,790
interesting diagram that i found on

00:06:36,300 --> 00:06:39,960
David Peterson's website as blog and a

00:06:38,790 --> 00:06:42,110
lot of people haven't seen it so I want

00:06:39,960 --> 00:06:45,030
to look at it a little bit closer and

00:06:42,110 --> 00:06:47,100
it's looking at the problem of why does

00:06:45,030 --> 00:06:50,370
poor quality code get introduced so

00:06:47,100 --> 00:06:51,900
let's zoom in basically developers don't

00:06:50,370 --> 00:06:53,280
want to introduce buttons right no one

00:06:51,900 --> 00:06:56,610
in this room wants to have bugs in their

00:06:53,280 --> 00:06:58,169
code base so that's truth and also if

00:06:56,610 --> 00:07:01,349
easy to introduce a bug when you're

00:06:58,169 --> 00:07:03,360
changing code so therefore a logical

00:07:01,349 --> 00:07:05,490
developer might take care to minimize

00:07:03,360 --> 00:07:08,430
changes in existing code right that's

00:07:05,490 --> 00:07:10,080
makes a lot of sense so taking that to

00:07:08,430 --> 00:07:11,520
the next step if you're trying to take

00:07:10,080 --> 00:07:13,680
care to minimize it changes to existing

00:07:11,520 --> 00:07:15,659
code and working on a copy of the code

00:07:13,680 --> 00:07:17,729
means that you don't need to change the

00:07:15,659 --> 00:07:20,250
original then it might lead you to

00:07:17,729 --> 00:07:23,789
duplicate the code to avoid introducing

00:07:20,250 --> 00:07:25,710
bugs and similarly if you can put

00:07:23,789 --> 00:07:27,270
conditional logic around your new code

00:07:25,710 --> 00:07:29,400
it reduces the chance that you're going

00:07:27,270 --> 00:07:30,930
to break it because now you've created a

00:07:29,400 --> 00:07:32,699
separate path you said oh this old stuff

00:07:30,930 --> 00:07:35,580
can just work the same i'm going to use

00:07:32,699 --> 00:07:37,919
conditional object liberally to separate

00:07:35,580 --> 00:07:39,569
my new code paths from it so you end up

00:07:37,919 --> 00:07:41,370
with code that uses kept a lot of

00:07:39,569 --> 00:07:43,319
conditional logic it may also have a lot

00:07:41,370 --> 00:07:44,849
of duplication and it since conditional

00:07:43,319 --> 00:07:47,550
logic increases complexity you end up

00:07:44,849 --> 00:07:49,710
with complex code now complex code is

00:07:47,550 --> 00:07:52,080
diff makes it difficult to understand

00:07:49,710 --> 00:07:54,060
the ramifications of any change that you

00:07:52,080 --> 00:07:55,830
make to the software so you right back

00:07:54,060 --> 00:07:57,270
at square one where it's easy to

00:07:55,830 --> 00:07:59,639
introduce a bug by changing the code

00:07:57,270 --> 00:08:00,750
right and this plays out over and over

00:07:59,639 --> 00:08:02,789
again as we're maintaining our

00:08:00,750 --> 00:08:04,919
applications and it's one reason why

00:08:02,789 --> 00:08:06,419
quality is difficult to maintain over

00:08:04,919 --> 00:08:09,870
time as you're dealing with these forces

00:08:06,419 --> 00:08:12,389
of change so what do you end up with you

00:08:09,870 --> 00:08:14,190
end up with something called legacy code

00:08:12,389 --> 00:08:14,969
and legacy code is actually a technical

00:08:14,190 --> 00:08:17,039
term I'm going to give you the

00:08:14,969 --> 00:08:19,879
definition of it right now it's a noun

00:08:17,039 --> 00:08:22,440
it refers to co-written by somebody else

00:08:19,879 --> 00:08:25,680
or co-written by you more than two weeks

00:08:22,440 --> 00:08:27,180
ago that's legacy code so you end up

00:08:25,680 --> 00:08:30,509
with legacy code if you don't watch out

00:08:27,180 --> 00:08:33,089
and so what I want to emphasize use hope

00:08:30,509 --> 00:08:35,070
is not a plan time and time again I see

00:08:33,089 --> 00:08:37,199
experienced developers with good

00:08:35,070 --> 00:08:39,719
intentions setting out into green

00:08:37,199 --> 00:08:41,789
pastures for their next project and they

00:08:39,719 --> 00:08:44,010
talk about how the last project was so

00:08:41,789 --> 00:08:46,380
terrible it was a mess it was hard to

00:08:44,010 --> 00:08:49,019
walk in we could never get anything done

00:08:46,380 --> 00:08:51,360
it was just awful made us unhappy that

00:08:49,019 --> 00:08:53,519
project was terrible and the next one's

00:08:51,360 --> 00:08:55,560
going to be better but if you press them

00:08:53,519 --> 00:08:57,180
and you say exactly what are you going

00:08:55,560 --> 00:08:58,890
to do differently on this project then

00:08:57,180 --> 00:09:00,600
you've done the last one it's usually

00:08:58,890 --> 00:09:02,550
difficult to get a good answer it's

00:09:00,600 --> 00:09:03,960
usually just that we really want it this

00:09:02,550 --> 00:09:06,630
time as if they didn't

00:09:03,960 --> 00:09:09,180
the last time so I'm putting forward the

00:09:06,630 --> 00:09:11,460
idea to you that doing the same thing

00:09:09,180 --> 00:09:13,440
and expecting different results is not a

00:09:11,460 --> 00:09:14,790
good approach to having your next

00:09:13,440 --> 00:09:16,440
project feel differently than your

00:09:14,790 --> 00:09:18,180
previous projects with respect to code

00:09:16,440 --> 00:09:20,310
quality and today we're going to look at

00:09:18,180 --> 00:09:23,520
exactly how you can do maybe some things

00:09:20,310 --> 00:09:26,370
differently okay so we're going to look

00:09:23,520 --> 00:09:29,070
at gathering data a high level approach

00:09:26,370 --> 00:09:30,930
to code quality and then some specific

00:09:29,070 --> 00:09:32,820
practices that are fairly lightweight

00:09:30,930 --> 00:09:34,890
that you can Institute with your team to

00:09:32,820 --> 00:09:36,840
give yourself the experience and the

00:09:34,890 --> 00:09:38,490
continuous improvement that you need to

00:09:36,840 --> 00:09:41,460
involve your code base without running

00:09:38,490 --> 00:09:43,200
to these code quality problems to begin

00:09:41,460 --> 00:09:46,080
with though I'm going to do you all a

00:09:43,200 --> 00:09:50,370
grand favor I am going to give you the

00:09:46,080 --> 00:09:52,820
universal solution to fixing any problem

00:09:50,370 --> 00:09:55,560
and it's exactly two steps are you ready

00:09:52,820 --> 00:09:57,770
fixing your problems step 1 assemble

00:09:55,560 --> 00:09:59,970
information step to act on information

00:09:57,770 --> 00:10:06,870
you can apply that anywhere you're

00:09:59,970 --> 00:10:08,780
welcome that's the end of the talk I you

00:10:06,870 --> 00:10:10,800
didn't think it was so simple um so

00:10:08,780 --> 00:10:12,390
let's apply this to code quality

00:10:10,800 --> 00:10:13,860
whenever i'm looking at assembling

00:10:12,390 --> 00:10:15,900
information i like to divide things into

00:10:13,860 --> 00:10:17,070
qualitative and quantitative and i

00:10:15,900 --> 00:10:18,960
always start with the qualitative

00:10:17,070 --> 00:10:21,360
because the qualitative information that

00:10:18,960 --> 00:10:23,010
you gather is going to give you a help

00:10:21,360 --> 00:10:24,900
you get the right quantitative

00:10:23,010 --> 00:10:26,520
information and set up the right

00:10:24,900 --> 00:10:28,320
quantitative experiments and ask the

00:10:26,520 --> 00:10:30,750
right quantitative questions but for

00:10:28,320 --> 00:10:32,130
qualitative information working within

00:10:30,750 --> 00:10:33,660
your team this is by the way i'm not

00:10:32,130 --> 00:10:36,330
inventing any of this stuff so i don't

00:10:33,660 --> 00:10:38,490
claim to sort of be innovating in most

00:10:36,330 --> 00:10:40,620
of these these cases but i'm trying to

00:10:38,490 --> 00:10:41,640
package it up here so qualitative

00:10:40,620 --> 00:10:43,290
information you feel like you might have

00:10:41,640 --> 00:10:45,390
code quality problems what can you do

00:10:43,290 --> 00:10:46,710
one I would make sure that you have

00:10:45,390 --> 00:10:48,240
one-on-ones going on within your

00:10:46,710 --> 00:10:51,000
organization that you have time

00:10:48,240 --> 00:10:53,490
recurring time set aside for a developer

00:10:51,000 --> 00:10:55,650
to talk with their manager about how

00:10:53,490 --> 00:10:57,870
that things are going on both sides you

00:10:55,650 --> 00:10:59,610
want a to build trust over time and

00:10:57,870 --> 00:11:00,870
create a two-way dialogue for feedback

00:10:59,610 --> 00:11:02,910
about how things are going with the

00:11:00,870 --> 00:11:04,620
individual with the organization with

00:11:02,910 --> 00:11:06,390
the project so when there's feedback

00:11:04,620 --> 00:11:08,100
being conveyed it's not a like a

00:11:06,390 --> 00:11:09,870
shocking thing right you don't want like

00:11:08,100 --> 00:11:12,480
it's ever feel shocking in either

00:11:09,870 --> 00:11:13,590
direction when an employee provides

00:11:12,480 --> 00:11:14,870
feedback about how they filled the

00:11:13,590 --> 00:11:15,980
business is going or vice for

00:11:14,870 --> 00:11:17,900
so that should get natural part of

00:11:15,980 --> 00:11:19,760
things so one-on-ones if you're a

00:11:17,900 --> 00:11:21,110
manager and I would any of direct

00:11:19,760 --> 00:11:23,570
reports i would highly recommend doing

00:11:21,110 --> 00:11:25,100
those if you're not already if you're an

00:11:23,570 --> 00:11:26,330
engineer and your managers not doing

00:11:25,100 --> 00:11:27,710
one-on-ones with you you can be

00:11:26,330 --> 00:11:29,420
proactive and go to your manager and say

00:11:27,710 --> 00:11:31,370
hey why don't you set up a time to talk

00:11:29,420 --> 00:11:32,839
about how things are going and maybe we

00:11:31,370 --> 00:11:34,160
could do that on a recurring basis and I

00:11:32,839 --> 00:11:36,350
think your manager will appreciate it at

00:11:34,160 --> 00:11:37,940
the team level retrospectives are the

00:11:36,350 --> 00:11:39,350
solution right so there's been a ton of

00:11:37,940 --> 00:11:41,300
stuff written about how to do good

00:11:39,350 --> 00:11:43,100
retrospectives but basically it comes

00:11:41,300 --> 00:11:44,510
down to getting everybody in a room all

00:11:43,100 --> 00:11:46,820
the stakeholders all the developers

00:11:44,510 --> 00:11:48,950
talking about what you got done over the

00:11:46,820 --> 00:11:50,390
last period of time how that went what

00:11:48,950 --> 00:11:52,520
could have been better and what went

00:11:50,390 --> 00:11:54,860
well and I do your coming up with action

00:11:52,520 --> 00:11:56,360
items to improve things going forward it

00:11:54,860 --> 00:11:58,010
will keep doing the same things that are

00:11:56,360 --> 00:11:59,779
working on going forward and you can

00:11:58,010 --> 00:12:01,220
rotate the format for these

00:11:59,779 --> 00:12:02,510
retrospectives you can wrote you can

00:12:01,220 --> 00:12:03,890
also rotate crews leading the

00:12:02,510 --> 00:12:05,810
retrospectives which i think is really

00:12:03,890 --> 00:12:07,430
important you want everybody in your

00:12:05,810 --> 00:12:09,410
team to feel like they're responsible

00:12:07,430 --> 00:12:10,850
for both the quality as well as the

00:12:09,410 --> 00:12:12,020
process improvements that are going to

00:12:10,850 --> 00:12:14,570
drive the quality and all the other

00:12:12,020 --> 00:12:16,220
positive change so everybody who's

00:12:14,570 --> 00:12:18,220
participating in the retrospectives can

00:12:16,220 --> 00:12:20,959
lead them at some point okay

00:12:18,220 --> 00:12:22,430
quantitative data where engineers we all

00:12:20,959 --> 00:12:24,860
love quantitative data you can collect

00:12:22,430 --> 00:12:27,200
process metrics velocity is probably the

00:12:24,860 --> 00:12:29,150
most common I hate that term but it

00:12:27,200 --> 00:12:31,070
seems like we're stuck with it you can

00:12:29,150 --> 00:12:34,700
collect information about velocity cycle

00:12:31,070 --> 00:12:36,020
time defect rates in your releases and

00:12:34,700 --> 00:12:37,959
you can start putting these things on a

00:12:36,020 --> 00:12:39,830
chart it's pretty easy right um

00:12:37,959 --> 00:12:42,980
surveying your team i think is an

00:12:39,830 --> 00:12:45,140
underused practice a super simple

00:12:42,980 --> 00:12:47,570
anonymous survey could be on paper it

00:12:45,140 --> 00:12:49,580
could be electronically ask your team

00:12:47,570 --> 00:12:51,740
something like do you feel like the code

00:12:49,580 --> 00:12:55,520
got better last week got worse or stayed

00:12:51,740 --> 00:12:56,930
the same or ask your team how likely do

00:12:55,520 --> 00:12:58,910
you think we are to hit that deadline

00:12:56,930 --> 00:13:00,620
that we agreed to and ask them

00:12:58,910 --> 00:13:02,720
anonymously and see what comes back I

00:13:00,620 --> 00:13:05,150
bet you can find out sooner doing that

00:13:02,720 --> 00:13:06,680
that your project is about to off the

00:13:05,150 --> 00:13:09,770
rails and any Gantt chart will tell you

00:13:06,680 --> 00:13:11,480
just make sure it's an honest and then

00:13:09,770 --> 00:13:14,089
software metrics which is kind of near

00:13:11,480 --> 00:13:15,410
and dear to my heart code climate does

00:13:14,089 --> 00:13:16,670
software metrics but you can do them

00:13:15,410 --> 00:13:18,529
yourself as well right there's a lot of

00:13:16,670 --> 00:13:20,600
useful information thats hanging out in

00:13:18,529 --> 00:13:22,279
your development time artifacts in your

00:13:20,600 --> 00:13:24,410
source code base and in your test suite

00:13:22,279 --> 00:13:25,550
and if you can assemble that together

00:13:24,410 --> 00:13:27,020
you can get some pretty interesting

00:13:25,550 --> 00:13:28,730
results so this is the kind of

00:13:27,020 --> 00:13:30,620
that we do where we take software

00:13:28,730 --> 00:13:31,910
metrics and combine it into dashboards

00:13:30,620 --> 00:13:33,680
which are trying to be sort of really

00:13:31,910 --> 00:13:34,940
accessible to developers you can build

00:13:33,680 --> 00:13:37,220
these kinds of things yourself if you

00:13:34,940 --> 00:13:40,550
want to you can use tools like flog and

00:13:37,220 --> 00:13:42,320
Flay there's a week and rudi there's a

00:13:40,550 --> 00:13:43,940
ton of great static analysis tools in

00:13:42,320 --> 00:13:47,600
Ruby and I recommend you check them all

00:13:43,940 --> 00:13:49,220
out so let's say you've done this you

00:13:47,600 --> 00:13:51,170
sort of collected your information and

00:13:49,220 --> 00:13:53,030
now you're ready to say okay we want to

00:13:51,170 --> 00:13:56,270
embark on a process where we're going to

00:13:53,030 --> 00:13:58,190
improve our quality over time there's no

00:13:56,270 --> 00:13:59,750
silver bullets right everyone's been

00:13:58,190 --> 00:14:01,640
looking for silver bullets for problems

00:13:59,750 --> 00:14:03,740
like software maintenance for a long

00:14:01,640 --> 00:14:06,110
time and they don't exist but there are

00:14:03,740 --> 00:14:08,660
two general approaches that I think you

00:14:06,110 --> 00:14:11,690
can take that we do work in almost all

00:14:08,660 --> 00:14:14,030
cases so the first thing is the old

00:14:11,690 --> 00:14:16,940
adage about what do you do when you find

00:14:14,030 --> 00:14:19,550
yourself in a hole and the answer is

00:14:16,940 --> 00:14:21,170
stop digging or we get a hose and have a

00:14:19,550 --> 00:14:26,300
mud party which apparently is on us on

00:14:21,170 --> 00:14:28,850
Twitter today but also stop digging so

00:14:26,300 --> 00:14:31,070
the idea here is if you know you have

00:14:28,850 --> 00:14:32,630
software quality issues you want to be

00:14:31,070 --> 00:14:34,220
damn sure that you're not introducing

00:14:32,630 --> 00:14:36,710
new ones and that comes in the form of

00:14:34,220 --> 00:14:38,090
not introducing new areas that are

00:14:36,710 --> 00:14:40,040
sloppy here is the code base that are

00:14:38,090 --> 00:14:42,680
sloppy and also not making the existing

00:14:40,040 --> 00:14:45,380
ones worse when you pop the hood on a

00:14:42,680 --> 00:14:47,120
class that you know is problematic and

00:14:45,380 --> 00:14:48,890
you have to make a change to it you need

00:14:47,120 --> 00:14:51,170
to break the cycle from that flow chart

00:14:48,890 --> 00:14:52,850
that we saw earlier don't just copy and

00:14:51,170 --> 00:14:54,710
paste it into a different object because

00:14:52,850 --> 00:14:56,780
now that object is happy for your use

00:14:54,710 --> 00:14:58,550
case but the overall system is impacted

00:14:56,780 --> 00:15:01,430
for it so stop creating new problems

00:14:58,550 --> 00:15:02,690
that's the first side of it and the

00:15:01,430 --> 00:15:04,190
other side is something called the Boy

00:15:02,690 --> 00:15:05,780
Scout rule does anybody know the Boy

00:15:04,190 --> 00:15:09,290
Scout rule someone's got to know yeah

00:15:05,780 --> 00:15:11,360
good yeah leave the campground cleaner

00:15:09,290 --> 00:15:13,190
than you found it exactly so when you

00:15:11,360 --> 00:15:15,170
apply this to software what this means

00:15:13,190 --> 00:15:17,540
is anytime you go and touch the code

00:15:15,170 --> 00:15:20,170
base take a little bit of extra time to

00:15:17,540 --> 00:15:22,400
clean something up even and especially

00:15:20,170 --> 00:15:24,410
something that's not strictly required

00:15:22,400 --> 00:15:26,930
to get whatever change you were planning

00:15:24,410 --> 00:15:30,170
on doing done just clean up one thing

00:15:26,930 --> 00:15:32,060
extract one method restore matson piece

00:15:30,170 --> 00:15:33,770
of code to match your team's coding

00:15:32,060 --> 00:15:35,060
standards if it doesn't whatever it is

00:15:33,770 --> 00:15:38,540
even if you're going in just to change

00:15:35,060 --> 00:15:40,230
copy if you do that over time and you've

00:15:38,540 --> 00:15:41,550
stopped introducing new problems

00:15:40,230 --> 00:15:44,160
and you've started chipping away at the

00:15:41,550 --> 00:15:46,470
existing problems bit by bit the slope

00:15:44,160 --> 00:15:48,870
of your projects quality will go up

00:15:46,470 --> 00:15:51,150
there's no other way for it to go right

00:15:48,870 --> 00:15:55,830
so those are the two sort of high-level

00:15:51,150 --> 00:15:58,530
approaches now you might say Brian I've

00:15:55,830 --> 00:16:00,540
known that that's kind of obvious like

00:15:58,530 --> 00:16:02,760
we've wanted to do that and it just

00:16:00,540 --> 00:16:05,010
hasn't quite panned out like that so

00:16:02,760 --> 00:16:06,810
what can we do differently in order to

00:16:05,010 --> 00:16:08,100
make that actually work and that's what

00:16:06,810 --> 00:16:13,800
we're going to spend most of the rest of

00:16:08,100 --> 00:16:15,600
the talk talking about excuse me so one

00:16:13,800 --> 00:16:17,160
problem you might run into this is a

00:16:15,600 --> 00:16:19,440
fairly superficial problem so I'm going

00:16:17,160 --> 00:16:21,600
to solve it for you right now is

00:16:19,440 --> 00:16:23,100
conflicting style preferences how many

00:16:21,600 --> 00:16:24,990
people have worked on a team with that

00:16:23,100 --> 00:16:26,760
one guy who just wants to write every

00:16:24,990 --> 00:16:28,410
piece of code a little bit different

00:16:26,760 --> 00:16:34,890
stylistically than everybody else in the

00:16:28,410 --> 00:16:36,690
whole team yeah f that guy right and

00:16:34,890 --> 00:16:41,460
it's been me before too so i can say

00:16:36,690 --> 00:16:43,400
that um my mic one out do i need to

00:16:41,460 --> 00:16:47,220
shout maybe it's turned away too much um

00:16:43,400 --> 00:16:48,960
so what do we do about this the answer

00:16:47,220 --> 00:16:51,000
is a style guide and I'm going to show

00:16:48,960 --> 00:16:52,740
you how to implement that with your team

00:16:51,000 --> 00:16:54,690
what you're going to do is you're going

00:16:52,740 --> 00:16:56,460
to lock yourself into a conference room

00:16:54,690 --> 00:16:58,140
and you're not going to leave that

00:16:56,460 --> 00:17:00,990
conference room until you've written

00:16:58,140 --> 00:17:04,860
down exactly how the team is going to

00:17:00,990 --> 00:17:06,810
style their code for now right so this

00:17:04,860 --> 00:17:09,900
is going to have to require of social

00:17:06,810 --> 00:17:11,790
interaction compromise perhaps minor

00:17:09,900 --> 00:17:14,340
amounts of physical violence but you

00:17:11,790 --> 00:17:16,320
can't leave the room until it's done so

00:17:14,340 --> 00:17:18,330
do that write down an agreed-upon style

00:17:16,320 --> 00:17:20,550
then you're going to adhere to that

00:17:18,330 --> 00:17:21,900
style ruthlessly now it doesn't mean

00:17:20,550 --> 00:17:24,420
that the style guide itself can't be

00:17:21,900 --> 00:17:26,250
inflexible it can say in your style

00:17:24,420 --> 00:17:28,650
guide that ninety-nine percent of the

00:17:26,250 --> 00:17:30,810
time it's this way but sometimes you

00:17:28,650 --> 00:17:32,610
know at someone's discretion we might do

00:17:30,810 --> 00:17:33,930
with this other way that's fine then

00:17:32,610 --> 00:17:37,200
you're going to adhere to that rule

00:17:33,930 --> 00:17:38,530
right that's rule now here's the key out

00:17:37,200 --> 00:17:41,110
of band wittig

00:17:38,530 --> 00:17:43,030
patient right what you can't have is

00:17:41,110 --> 00:17:44,290
somebody not everyone's going to get

00:17:43,030 --> 00:17:45,460
their way in the style guide otherwise

00:17:44,290 --> 00:17:47,080
it wouldn't have been necessary to write

00:17:45,460 --> 00:17:49,420
it in the first place but what you can't

00:17:47,080 --> 00:17:51,850
have is whoever doesn't like one thing

00:17:49,420 --> 00:17:53,710
or the other to drag the team now

00:17:51,850 --> 00:17:55,270
pulling every discussion into a

00:17:53,710 --> 00:17:56,560
superficial discussion about whether or

00:17:55,270 --> 00:17:58,690
not they should be indenting with two

00:17:56,560 --> 00:18:00,490
spaces or four spaces but by the way the

00:17:58,690 --> 00:18:04,960
answer is two and I'm looking for a new

00:18:00,490 --> 00:18:06,730
t-shirt so you've got to have a property

00:18:04,960 --> 00:18:08,470
the way we do that is you have to have a

00:18:06,730 --> 00:18:11,110
defined out-of-band litigation process

00:18:08,470 --> 00:18:12,970
you have to know that there's going to

00:18:11,110 --> 00:18:15,040
be an opportunity to revisit the style

00:18:12,970 --> 00:18:18,400
guide because we don't know that then

00:18:15,040 --> 00:18:20,770
the only rational rational approach is

00:18:18,400 --> 00:18:21,940
to litigate it all the time but if you

00:18:20,770 --> 00:18:23,800
say okay we're going to review this in

00:18:21,940 --> 00:18:25,840
one month at this time I'm putting it on

00:18:23,800 --> 00:18:27,280
the calendar we're going to all bring

00:18:25,840 --> 00:18:28,900
our thoughts about how we can improve

00:18:27,280 --> 00:18:30,670
the style guide you can move that out of

00:18:28,900 --> 00:18:32,320
man and get stuff done a lot faster and

00:18:30,670 --> 00:18:33,880
you can do this with anything HTML CSS

00:18:32,320 --> 00:18:35,650
all the way you get commit messages

00:18:33,880 --> 00:18:37,720
anything there might be differences on

00:18:35,650 --> 00:18:39,280
get them out of the way okay that's

00:18:37,720 --> 00:18:42,070
superficial now let's get into some more

00:18:39,280 --> 00:18:43,510
meaty stuff perhaps not everybody on

00:18:42,070 --> 00:18:45,580
your team has enough refactoring

00:18:43,510 --> 00:18:47,050
experience to move the codebase forward

00:18:45,580 --> 00:18:47,980
all the time what can you do about it

00:18:47,050 --> 00:18:51,880
I'm gonna look at a couple different

00:18:47,980 --> 00:18:54,190
things one of them pretty simple lunch &

00:18:51,880 --> 00:18:56,470
Learn session so in New York there's a

00:18:54,190 --> 00:18:58,330
company called pivotal labs and every

00:18:56,470 --> 00:18:59,560
Tuesday they bring in a guest speaker to

00:18:58,330 --> 00:19:00,850
talk about something which is

00:18:59,560 --> 00:19:02,440
interesting and topical to the

00:19:00,850 --> 00:19:04,180
development team so they're doing a lot

00:19:02,440 --> 00:19:05,770
of work to help push their developers

00:19:04,180 --> 00:19:08,050
forward all the time you basically have

00:19:05,770 --> 00:19:09,940
to go out of your way to leave the

00:19:08,050 --> 00:19:11,980
office and buy your own lunch to not

00:19:09,940 --> 00:19:13,630
consume this content so it works really

00:19:11,980 --> 00:19:15,040
well for them um you might not

00:19:13,630 --> 00:19:17,230
necessarily have the resources for that

00:19:15,040 --> 00:19:19,960
but in the age of con freaks you can at

00:19:17,230 --> 00:19:22,720
least find a talk from somebody talking

00:19:19,960 --> 00:19:25,330
about refactoring put it on a projector

00:19:22,720 --> 00:19:26,740
and eat a pizza while you're watching it

00:19:25,330 --> 00:19:29,160
and then have a discussion about how the

00:19:26,740 --> 00:19:31,960
concepts in that talk affect your team

00:19:29,160 --> 00:19:33,250
you can discuss an article or blog post

00:19:31,960 --> 00:19:35,440
that somebody picks out that may have

00:19:33,250 --> 00:19:37,270
applicability and you can rotate the

00:19:35,440 --> 00:19:38,650
format of these sessions and the people

00:19:37,270 --> 00:19:40,600
who are reading them so everybody is

00:19:38,650 --> 00:19:43,360
taking part again in the process of

00:19:40,600 --> 00:19:46,420
improving ok I'm going to coin a term

00:19:43,360 --> 00:19:48,670
today called team factoring this is a

00:19:46,420 --> 00:19:49,030
technique that you can use to level up

00:19:48,670 --> 00:19:50,380
your

00:19:49,030 --> 00:19:51,190
skills as a team in her factoring so

00:19:50,380 --> 00:19:53,320
what you're going to do is we're going

00:19:51,190 --> 00:19:54,970
to block off an hour you're going to

00:19:53,320 --> 00:19:57,370
pick a piece of code in your code base

00:19:54,970 --> 00:19:58,870
that you know is problematic and you're

00:19:57,370 --> 00:20:00,940
going to fill it up on a projector and

00:19:58,870 --> 00:20:04,120
reef back to it as a group so think of

00:20:00,940 --> 00:20:05,770
like extreme pair programming you've got

00:20:04,120 --> 00:20:09,250
one driver and you might have five

00:20:05,770 --> 00:20:10,990
people who are navigating now it's a

00:20:09,250 --> 00:20:15,070
group of factoring session the benefit

00:20:10,990 --> 00:20:16,810
of this is not the actual output the

00:20:15,070 --> 00:20:18,970
change that you made the commit that you

00:20:16,810 --> 00:20:20,800
could make to the code base the benefit

00:20:18,970 --> 00:20:22,390
of this is the discussions that happen

00:20:20,800 --> 00:20:23,800
while it's going on so if the

00:20:22,390 --> 00:20:25,630
discussions where the senior software

00:20:23,800 --> 00:20:27,160
engineer might say you know we've seen

00:20:25,630 --> 00:20:29,230
this problem before we've tried to solve

00:20:27,160 --> 00:20:30,880
it two different ways here's why this

00:20:29,230 --> 00:20:32,250
one didn't work out and here's the way

00:20:30,880 --> 00:20:35,080
that we've solved it and it has worked

00:20:32,250 --> 00:20:37,120
and by having that conversation as a

00:20:35,080 --> 00:20:39,130
team everybody is going to get better at

00:20:37,120 --> 00:20:41,410
refactoring everyone's going to have

00:20:39,130 --> 00:20:42,700
refactoring higher on their minds as

00:20:41,410 --> 00:20:45,250
they're working through their code and

00:20:42,700 --> 00:20:47,830
you're going to develop a team's shared

00:20:45,250 --> 00:20:49,900
sense for how to solve the same types of

00:20:47,830 --> 00:20:52,420
software design problems that occur

00:20:49,900 --> 00:20:54,820
repeatedly at the end of the session if

00:20:52,420 --> 00:20:56,350
you have code which is green and which

00:20:54,820 --> 00:20:58,060
everyone is confident can go out to

00:20:56,350 --> 00:21:00,760
production right away and by all means

00:20:58,060 --> 00:21:03,610
ship it but if not throw it out the

00:21:00,760 --> 00:21:04,900
output of that session was not about the

00:21:03,610 --> 00:21:06,190
change that you made it was about the

00:21:04,900 --> 00:21:08,170
discussion and the last thing you want

00:21:06,190 --> 00:21:10,330
to do is have a two-hour session after

00:21:08,170 --> 00:21:12,190
the team refactoring session which is

00:21:10,330 --> 00:21:13,570
about this chore of trying to clean up

00:21:12,190 --> 00:21:15,130
this thing which was half done just

00:21:13,570 --> 00:21:18,040
throw it out and move on do it again

00:21:15,130 --> 00:21:19,930
next week and you can again focus rotate

00:21:18,040 --> 00:21:21,010
the area focus in the code base and

00:21:19,930 --> 00:21:23,770
rotate the person is leading these

00:21:21,010 --> 00:21:25,540
exercises now another problem that you

00:21:23,770 --> 00:21:27,790
might add is you're finding problems too

00:21:25,540 --> 00:21:29,470
late if you find a bug a month down the

00:21:27,790 --> 00:21:31,060
road it'll probably get fixed at that

00:21:29,470 --> 00:21:33,400
time but it's gonna cost the business a

00:21:31,060 --> 00:21:34,930
lot more money and time to resolve it

00:21:33,400 --> 00:21:37,120
then than if it was fixed the same day

00:21:34,930 --> 00:21:39,550
that it was written right at the same

00:21:37,120 --> 00:21:40,960
time if you find a quality issue in your

00:21:39,550 --> 00:21:43,180
code base a month after it was

00:21:40,960 --> 00:21:46,570
introduced then my favorite phrase about

00:21:43,180 --> 00:21:48,520
this is broken gets fixed crappy last

00:21:46,570 --> 00:21:50,140
forever it's probably not going to be

00:21:48,520 --> 00:21:52,390
fixed and it probably shouldn't be fixed

00:21:50,140 --> 00:21:53,770
until you go and to work on that code

00:21:52,390 --> 00:21:56,380
again so you've kind of kind of be stuck

00:21:53,770 --> 00:21:58,330
with it so what you want to do is to

00:21:56,380 --> 00:22:00,640
these issues early so they don't end up

00:21:58,330 --> 00:22:03,430
stuck in your code base I use the term

00:22:00,640 --> 00:22:04,600
cemented sometimes you want to fix

00:22:03,430 --> 00:22:06,130
problems in your cravings before they

00:22:04,600 --> 00:22:08,350
come cemented and that cement dries and

00:22:06,130 --> 00:22:10,420
you're kind of stuck with them so you

00:22:08,350 --> 00:22:12,970
want early warning systems right you

00:22:10,420 --> 00:22:13,690
want to get some help in knowing when

00:22:12,970 --> 00:22:16,540
there's something you need to take a

00:22:13,690 --> 00:22:18,850
look at build failures are one of those

00:22:16,540 --> 00:22:21,610
common examples of this pipe you're both

00:22:18,850 --> 00:22:23,740
failures to email to your team's

00:22:21,610 --> 00:22:25,690
chatroom and actually fix the build when

00:22:23,740 --> 00:22:26,770
it when it fails that's a simple one

00:22:25,690 --> 00:22:28,540
that's telling you there's probably a

00:22:26,770 --> 00:22:31,810
bug in either your test suite or your

00:22:28,540 --> 00:22:33,460
app code bugs and quality issues and

00:22:31,810 --> 00:22:35,770
security vulnerabilities are all things

00:22:33,460 --> 00:22:38,230
that can be detected using to some

00:22:35,770 --> 00:22:39,730
extent using static analysis and if you

00:22:38,230 --> 00:22:42,130
can detect them using static analysis

00:22:39,730 --> 00:22:43,480
then you can fire off an alert to your

00:22:42,130 --> 00:22:44,980
team when something like that happens if

00:22:43,480 --> 00:22:48,400
you've ever seen the guys on the Twitter

00:22:44,980 --> 00:22:51,010
of security team talk they have a tool

00:22:48,400 --> 00:22:52,330
inside of Twitter that scans the code

00:22:51,010 --> 00:22:53,590
for security vulnerabilities and then

00:22:52,330 --> 00:22:54,970
emails a developer as soon as they

00:22:53,590 --> 00:22:57,250
commit a security vulnerability issue

00:22:54,970 --> 00:22:59,470
you can have that type of automation on

00:22:57,250 --> 00:23:00,760
your own team cold climates able to do

00:22:59,470 --> 00:23:02,200
this sort of stuff that you can also set

00:23:00,760 --> 00:23:04,090
it up yourself so this is an example of

00:23:02,200 --> 00:23:05,500
getting alert in a hip chat chat room

00:23:04,090 --> 00:23:08,350
that somebody introduced security

00:23:05,500 --> 00:23:10,000
vulnerabilities into their app it can be

00:23:08,350 --> 00:23:11,170
worth spending a little time to automate

00:23:10,000 --> 00:23:14,800
this type of thing so you have an early

00:23:11,170 --> 00:23:16,240
warning system okay so another problem

00:23:14,800 --> 00:23:17,620
is that you might be missing out on the

00:23:16,240 --> 00:23:19,600
high level design maybe you're pretty

00:23:17,620 --> 00:23:21,310
good at refactoring a single class but

00:23:19,600 --> 00:23:23,590
it just feels like that high level stuff

00:23:21,310 --> 00:23:25,690
is missing and this can happen a lot on

00:23:23,590 --> 00:23:27,160
agile teams everyone's just focused on

00:23:25,690 --> 00:23:29,020
what's the next one point A to point

00:23:27,160 --> 00:23:31,000
story I'm going to ship and it might not

00:23:29,020 --> 00:23:32,620
be enough ciples to actually focus on

00:23:31,000 --> 00:23:35,410
what is the design of the architecture

00:23:32,620 --> 00:23:36,850
that we're growing so for that my

00:23:35,410 --> 00:23:38,230
favorite technique is white boarding

00:23:36,850 --> 00:23:41,020
which is really mostly a physical

00:23:38,230 --> 00:23:43,840
problem get a largest whiteboard that

00:23:41,020 --> 00:23:45,520
you can find it as close as physically

00:23:43,840 --> 00:23:47,680
possible to the team who could use it

00:23:45,520 --> 00:23:49,600
and actually use it so I put my money

00:23:47,680 --> 00:23:52,000
where my mouth is and I convinced my

00:23:49,600 --> 00:23:53,650
girlfriend that we needed a six-foot

00:23:52,000 --> 00:23:57,070
whiteboard in our two hundred square

00:23:53,650 --> 00:23:57,980
foot New York City apartment which I

00:23:57,070 --> 00:24:00,520
don't recommend for

00:23:57,980 --> 00:24:04,250
buddy this this caused a little bit of

00:24:00,520 --> 00:24:06,260
strife in the homeland but on but I

00:24:04,250 --> 00:24:08,720
believe firmly in white boarding so you

00:24:06,260 --> 00:24:09,919
should use it too and then I want to

00:24:08,720 --> 00:24:12,799
talk a little bit about code reviews

00:24:09,919 --> 00:24:15,950
okay so code abused this is probably

00:24:12,799 --> 00:24:17,570
what you're thinking of the only it says

00:24:15,950 --> 00:24:19,790
the only valid measurement of code

00:24:17,570 --> 00:24:21,559
quality is WTS per minute and then on

00:24:19,790 --> 00:24:23,480
one side you've got a code of view which

00:24:21,559 --> 00:24:25,490
is going very well and the other side

00:24:23,480 --> 00:24:30,110
you've done which is just going i would

00:24:25,490 --> 00:24:32,210
say average and there's a lot of cursing

00:24:30,110 --> 00:24:34,070
involved and nobody wants to get pulled

00:24:32,210 --> 00:24:36,860
into one to one of these conference

00:24:34,070 --> 00:24:40,460
rooms right either as the reviewer or as

00:24:36,860 --> 00:24:43,820
the review EEE so you pick remember this

00:24:40,460 --> 00:24:45,290
guy is Frank Luntz he's a Republican

00:24:43,820 --> 00:24:47,720
political strategist he's one of my

00:24:45,290 --> 00:24:51,410
favorite political strategists out there

00:24:47,720 --> 00:24:54,860
and his specialty is reframing things to

00:24:51,410 --> 00:24:56,929
sound more appealing so what I say is

00:24:54,860 --> 00:24:59,240
that the term federal code review would

00:24:56,929 --> 00:25:00,980
be a language air that doesn't sound

00:24:59,240 --> 00:25:03,140
appealing to anybody so I'm gonna fix

00:25:00,980 --> 00:25:05,900
this for you right now we're gonna make

00:25:03,140 --> 00:25:09,230
an adjustment get home play requests

00:25:05,900 --> 00:25:11,240
that is what we want they're the same

00:25:09,230 --> 00:25:13,760
thing as formal code review but don't

00:25:11,240 --> 00:25:18,230
tell your teammates that because they

00:25:13,760 --> 00:25:20,299
get up makes everything cool so you can

00:25:18,230 --> 00:25:22,790
do formal code reviews with github pull

00:25:20,299 --> 00:25:25,400
requests the key is to do in code of you

00:25:22,790 --> 00:25:27,020
effectively in my mind are to make the

00:25:25,400 --> 00:25:29,540
non-blocking so if you're writing code

00:25:27,020 --> 00:25:31,340
you don't need to stop the world in

00:25:29,540 --> 00:25:32,929
order to you need to stop what you're

00:25:31,340 --> 00:25:34,400
doing in order to get a review you can

00:25:32,929 --> 00:25:36,040
just keep coding and coding and coding

00:25:34,400 --> 00:25:39,080
and eventually somebody will review it

00:25:36,040 --> 00:25:40,940
it's asynchronous so sometimes it makes

00:25:39,080 --> 00:25:43,640
sense to do synchronous code review I

00:25:40,940 --> 00:25:45,440
would start a synchronous well somebody

00:25:43,640 --> 00:25:47,090
is reviewing it on their own time and

00:25:45,440 --> 00:25:48,799
maybe using github comments if they have

00:25:47,090 --> 00:25:50,030
questions if they conceptually they're

00:25:48,799 --> 00:25:51,710
not quite getting what's going on that

00:25:50,030 --> 00:25:52,669
could be a great time as tap somebody on

00:25:51,710 --> 00:25:54,470
the shoulder and say hey I'm looking at

00:25:52,669 --> 00:25:56,510
your code used to explain this to me but

00:25:54,470 --> 00:25:59,470
start asynchronous and then opt-in

00:25:56,510 --> 00:26:01,030
rather than opt out so

00:25:59,470 --> 00:26:02,890
a developer who's writing code should

00:26:01,030 --> 00:26:05,080
have a sense for should have some level

00:26:02,890 --> 00:26:08,049
of self-awareness about what they're

00:26:05,080 --> 00:26:09,669
doing their experience over with it and

00:26:08,049 --> 00:26:10,960
the nature of the work and from that

00:26:09,669 --> 00:26:12,429
make a decision about whether or not

00:26:10,960 --> 00:26:15,730
it's something that's worth doing a

00:26:12,429 --> 00:26:16,630
review of right so they can decide okay

00:26:15,730 --> 00:26:19,330
I'm either just going to push this to

00:26:16,630 --> 00:26:22,390
master or I'm going to to engage in a

00:26:19,330 --> 00:26:23,980
code review now that level of whether

00:26:22,390 --> 00:26:25,840
you're you could be doing too many code

00:26:23,980 --> 00:26:26,830
reviews or too few and that's something

00:26:25,840 --> 00:26:28,840
that you can work out through your

00:26:26,830 --> 00:26:29,980
continuous improvement process but leave

00:26:28,840 --> 00:26:31,750
it to the developer who's writing the

00:26:29,980 --> 00:26:34,900
code to make the final decision in each

00:26:31,750 --> 00:26:36,640
instance the reason we do code reviews

00:26:34,900 --> 00:26:37,929
is because we can't edit our own writing

00:26:36,640 --> 00:26:40,990
you're just incapable of doing it so I

00:26:37,929 --> 00:26:42,669
do some writing I also edit people's

00:26:40,990 --> 00:26:44,020
work sometimes and I'd like to think

00:26:42,669 --> 00:26:46,270
that I can do a decent job of doing that

00:26:44,020 --> 00:26:47,830
but I'm incapable of editing my own

00:26:46,270 --> 00:26:49,510
writing and that's because I was so

00:26:47,830 --> 00:26:52,150
deeply involved in the process of

00:26:49,510 --> 00:26:53,950
creating the work that my brain can't

00:26:52,150 --> 00:26:55,659
flip over into a mode where it can edit

00:26:53,950 --> 00:26:56,890
it effectively and it from the

00:26:55,659 --> 00:26:57,970
standpoint of how other people are going

00:26:56,890 --> 00:26:59,500
to interpret it which is obviously what

00:26:57,970 --> 00:27:02,679
matters the most it's for this reason

00:26:59,500 --> 00:27:05,230
I've gone so far as to say that

00:27:02,679 --> 00:27:08,770
developers should consider doing a

00:27:05,230 --> 00:27:10,870
manual manual code review of code that

00:27:08,770 --> 00:27:12,940
was written by a pair which is pretty

00:27:10,870 --> 00:27:15,039
controversial but I believe that it's a

00:27:12,940 --> 00:27:16,960
case because both people in the pairing

00:27:15,039 --> 00:27:19,929
session have that same authorship

00:27:16,960 --> 00:27:24,010
relationship with the code that was

00:27:19,929 --> 00:27:25,659
being produced so you can't edit your

00:27:24,010 --> 00:27:27,580
own writing get somebody else to edit

00:27:25,659 --> 00:27:29,340
your code when you do a review you're

00:27:27,580 --> 00:27:31,270
gonna be looking at five key things

00:27:29,340 --> 00:27:33,039
formatting is hopefully something that's

00:27:31,270 --> 00:27:35,710
pretty easy to knock down correctness

00:27:33,039 --> 00:27:38,380
does it work all your what use is its

00:27:35,710 --> 00:27:40,330
scalability performance security what

00:27:38,380 --> 00:27:41,740
are the characteristics like that does

00:27:40,330 --> 00:27:43,210
it meet all those requirements and then

00:27:41,740 --> 00:27:44,440
the big one when we're talking about

00:27:43,210 --> 00:27:46,210
coke quality I think can often be

00:27:44,440 --> 00:27:48,370
comprehension how easy is it to

00:27:46,210 --> 00:27:50,620
understand it and that's what I like to

00:27:48,370 --> 00:27:52,390
focus most of my mental cycles on when

00:27:50,620 --> 00:27:55,390
i'm doing a code review is comprehension

00:27:52,390 --> 00:27:56,650
so now they would probably some of you

00:27:55,390 --> 00:27:58,840
in the audience who are saying Brian

00:27:56,650 --> 00:28:00,130
this is great I really like all these

00:27:58,840 --> 00:28:02,350
ideas that you gave me about how to

00:28:00,130 --> 00:28:04,700
improve code quality within my team I'm

00:28:02,350 --> 00:28:06,590
just thinking about that gal go

00:28:04,700 --> 00:28:09,080
when I go back to work on Monday who's

00:28:06,590 --> 00:28:12,140
not gonna like it in fact they're gonna

00:28:09,080 --> 00:28:13,880
hate it and all of us I think I've

00:28:12,140 --> 00:28:15,140
worked with that guy at one time or

00:28:13,880 --> 00:28:17,270
another maybe you don't work with them

00:28:15,140 --> 00:28:19,010
today that you might tomorrow so what do

00:28:17,270 --> 00:28:21,380
you do right how do you solve that

00:28:19,010 --> 00:28:23,540
problem when I did a question on Twitter

00:28:21,380 --> 00:28:25,190
I sediment to be talking about building

00:28:23,540 --> 00:28:26,780
a culture of quality within your team

00:28:25,190 --> 00:28:28,520
what do you want me to talk about and

00:28:26,780 --> 00:28:30,230
this was the number one thing that came

00:28:28,520 --> 00:28:32,060
up how do I deal with you know people on

00:28:30,230 --> 00:28:34,550
my team who are resistant to this so

00:28:32,060 --> 00:28:36,920
there's two pods again no magic bullet

00:28:34,550 --> 00:28:39,230
but I like to you know first I think

00:28:36,920 --> 00:28:41,840
your approach is give that person every

00:28:39,230 --> 00:28:44,960
opportunity to engage in a process

00:28:41,840 --> 00:28:47,990
that's moving forward right on try

00:28:44,960 --> 00:28:49,250
things as experiments set specific time

00:28:47,990 --> 00:28:51,020
bounds and say we're going to try code

00:28:49,250 --> 00:28:52,100
reviews for three months and then we're

00:28:51,020 --> 00:28:53,300
going to review and make a decision

00:28:52,100 --> 00:28:55,010
whether we're gonna keep doing it or do

00:28:53,300 --> 00:28:56,510
it differently or stop doing it and I'm

00:28:55,010 --> 00:28:57,710
not just saying like say that to them

00:28:56,510 --> 00:28:59,180
but actually no you're going to be

00:28:57,710 --> 00:29:00,620
you're going to keep doing it if you

00:28:59,180 --> 00:29:02,570
can't if your development team doesn't

00:29:00,620 --> 00:29:04,220
feel clearly with the consensus that

00:29:02,570 --> 00:29:05,450
it's been helpful then maybe it's not

00:29:04,220 --> 00:29:07,970
the right thing for your team so do

00:29:05,450 --> 00:29:09,560
experiments those are much easier often

00:29:07,970 --> 00:29:11,570
to get buying into in which you're

00:29:09,560 --> 00:29:13,880
looking for some quick wins that can

00:29:11,570 --> 00:29:16,100
demonstrate to this person that quality

00:29:13,880 --> 00:29:18,230
building things with higher quality has

00:29:16,100 --> 00:29:20,090
a positive impact on the team and on

00:29:18,230 --> 00:29:21,740
them in their own satisfaction and if

00:29:20,090 --> 00:29:23,900
they see that hopefully they'll come

00:29:21,740 --> 00:29:26,360
around the other path if that doesn't

00:29:23,900 --> 00:29:28,340
happen after you've tried it a number of

00:29:26,360 --> 00:29:29,360
times it probably is not the right fit

00:29:28,340 --> 00:29:31,490
for that person to be in the

00:29:29,360 --> 00:29:33,020
organization moving that person out of

00:29:31,490 --> 00:29:34,550
the organization is going to make the

00:29:33,020 --> 00:29:36,170
team feel like a weights been lifted off

00:29:34,550 --> 00:29:38,210
their shoulders all your good developers

00:29:36,170 --> 00:29:39,410
the ones you don't want to quit are

00:29:38,210 --> 00:29:40,670
going to be happier because they're not

00:29:39,410 --> 00:29:42,020
going to have to deal with that and it's

00:29:40,670 --> 00:29:43,220
probably gonna be a better situation for

00:29:42,020 --> 00:29:44,690
that person as well because they're

00:29:43,220 --> 00:29:46,820
going to work and find a new environment

00:29:44,690 --> 00:29:47,900
which better fits their context and the

00:29:46,820 --> 00:29:50,030
type of development that they'd like to

00:29:47,900 --> 00:29:51,380
do and there's plenty of cases where you

00:29:50,030 --> 00:29:54,550
can be development not have to worry

00:29:51,380 --> 00:29:56,870
about this sort of stuff so to wrap up

00:29:54,550 --> 00:29:59,390
Adam Philip I see I hope I'm saying that

00:29:56,870 --> 00:30:01,610
name right on Twitter gave me a really

00:29:59,390 --> 00:30:02,990
interesting insight about how this the

00:30:01,610 --> 00:30:04,280
vicious cycle we saw at the beginning of

00:30:02,990 --> 00:30:06,500
the talk can turn into something

00:30:04,280 --> 00:30:08,690
positive so it starts with quality if

00:30:06,500 --> 00:30:10,640
you're writing high quality code then

00:30:08,690 --> 00:30:12,530
developers tend to be happier there more

00:30:10,640 --> 00:30:14,990
satisfied with their jobs right that's

00:30:12,530 --> 00:30:16,760
pretty easy it's been proven that people

00:30:14,990 --> 00:30:18,530
are more satisfied with their jobs

00:30:16,760 --> 00:30:19,820
tend to be more engaged with the work

00:30:18,530 --> 00:30:21,170
that they're doing if you're more

00:30:19,820 --> 00:30:23,060
engaged you're more likely to take

00:30:21,170 --> 00:30:24,020
responsibility for the work that you're

00:30:23,060 --> 00:30:25,400
doing and when you're taking

00:30:24,020 --> 00:30:26,840
responsibility for the code that you're

00:30:25,400 --> 00:30:28,820
writing that tends to produce higher

00:30:26,840 --> 00:30:30,590
quality code so you can get rid of that

00:30:28,820 --> 00:30:32,420
vicious cycle and replace it with a

00:30:30,590 --> 00:30:34,850
virtuous cycle and that will help your

00:30:32,420 --> 00:30:36,650
team of all things much faster ideally

00:30:34,850 --> 00:30:39,380
you're looking to create a system where

00:30:36,650 --> 00:30:40,970
you can sustain progress over time well

00:30:39,380 --> 00:30:42,530
regardless of where that baseline is

00:30:40,970 --> 00:30:45,560
whatever the work regardless of what the

00:30:42,530 --> 00:30:47,960
y-intercept is of your code quality the

00:30:45,560 --> 00:30:49,460
slope is going upwards right and your if

00:30:47,960 --> 00:30:51,040
you go do that long enough you're going

00:30:49,460 --> 00:30:53,180
to end up in a in a really good position

00:30:51,040 --> 00:30:56,230
all right that's all I've got thank you

00:30:53,180 --> 00:30:56,230
very much for your time attention

00:31:34,340 --> 00:31:36,400

YouTube URL: https://www.youtube.com/watch?v=YCugeqQuzh4


