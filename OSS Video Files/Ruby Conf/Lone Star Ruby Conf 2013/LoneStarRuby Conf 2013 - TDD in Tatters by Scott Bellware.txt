Title: LoneStarRuby Conf 2013 - TDD in Tatters by Scott Bellware
Publication date: 2020-01-28
Playlist: Lone Star Ruby Conf 2013
Description: 
	TDD has been tattered, torn, twisted, stood on its head, and pounded into an pulp of techno-fetishism. TDD was a game-changer, but the focus in the interceding years has shifted from technique to tools, and TDD has been devolving into a lost art. By tearing TDD down to its bones, this presentation presents TDD in its essence, free of tools, and reinforcing the primary focus on design principles. It attempts to convince you to return to a simpler time when TDD was still about design, and software developers were dutifully steeped in the critical importance of design principles. To avoid being held to any particularly offensive positions, this talk liberally attacking the status quo of testing and contemporary tool-focused TDD in Ruby, while introducing yet-another testing library in Ruby. :)

Help us caption & translate this video!

http://amara.org/v/FG8c/
Captions: 
	00:00:15,170 --> 00:00:22,140
thank y'all for coming I appreciate

00:00:20,189 --> 00:00:25,650
having such a crowd with such short

00:00:22,140 --> 00:00:27,570
notice we had a cancellation so I jumped

00:00:25,650 --> 00:00:32,460
at the chance to get another opportunity

00:00:27,570 --> 00:00:34,290
to preach at you I'd like to say that

00:00:32,460 --> 00:00:35,670
I've only been a you know excuse all the

00:00:34,290 --> 00:00:37,260
presentation I've only had you know a

00:00:35,670 --> 00:00:38,370
few hours to put it together but I've

00:00:37,260 --> 00:00:43,400
been working on this for a couple years

00:00:38,370 --> 00:00:43,400
so if it's bad it's because it's bad

00:00:47,330 --> 00:00:51,570
this is one of those talks that says

00:00:49,680 --> 00:00:53,519
you're doing it wrong and that's a

00:00:51,570 --> 00:00:56,489
problem it's a problematic way to do

00:00:53,519 --> 00:00:59,970
anything I realize that it happens to be

00:00:56,489 --> 00:01:01,409
my mode of learning so hopefully don't

00:00:59,970 --> 00:01:04,260
take anything personally I'll try not to

00:01:01,409 --> 00:01:06,180
be too preachy somehow I got made this

00:01:04,260 --> 00:01:09,600
way I know there's no excuse for it but

00:01:06,180 --> 00:01:11,580
i tend to learn by convincing myself of

00:01:09,600 --> 00:01:13,320
the things that I'm doing and that i

00:01:11,580 --> 00:01:15,689
love and i do i think i do really well

00:01:13,320 --> 00:01:17,040
and then convincing myself that i'm

00:01:15,689 --> 00:01:19,620
doing it wrong just to see if i can find

00:01:17,040 --> 00:01:23,100
something wrong with what I'm doing so

00:01:19,620 --> 00:01:28,620
when I do this it's not meant to do any

00:01:23,100 --> 00:01:34,050
harm to anybody except myself the thrust

00:01:28,620 --> 00:01:37,260
of this talk is a number of points 1 a

00:01:34,050 --> 00:01:41,100
topic that I talked last year same time

00:01:37,260 --> 00:01:42,540
same room same people in fact some of

00:01:41,100 --> 00:01:45,750
you I think are sitting exactly the same

00:01:42,540 --> 00:01:48,510
seats as you were last year evan is that

00:01:45,750 --> 00:01:52,560
TDD is still poorly understood and still

00:01:48,510 --> 00:01:55,230
poorly done that automation is ruinous

00:01:52,560 --> 00:01:58,409
to productivity contrary to our popular

00:01:55,230 --> 00:02:02,159
belief can be earnest the productivity

00:01:58,409 --> 00:02:04,080
that you get from design is vastly

00:02:02,159 --> 00:02:07,860
superior than the productivity you get

00:02:04,080 --> 00:02:11,250
from automation and that TD was supposed

00:02:07,860 --> 00:02:14,549
to be a path to greater mastery in

00:02:11,250 --> 00:02:18,739
design but over the interceding years

00:02:14,549 --> 00:02:24,360
since 99 2000 that has become largely

00:02:18,739 --> 00:02:25,590
focused on tooling so I want to talk

00:02:24,360 --> 00:02:26,940
about some fundamentals just to get

00:02:25,590 --> 00:02:28,830
things going these are fundamentals

00:02:26,940 --> 00:02:32,870
about us and by us I mean

00:02:28,830 --> 00:02:39,420
me as I project myself unto you and

00:02:32,870 --> 00:02:41,070
believe that you are me and I am you so

00:02:39,420 --> 00:02:46,050
this is my prejudice of the way I think

00:02:41,070 --> 00:02:47,130
that you work based on who I am so I

00:02:46,050 --> 00:02:49,350
want to talk about things that are

00:02:47,130 --> 00:02:51,570
subtle and things that are crude as a

00:02:49,350 --> 00:02:55,530
model for as a model for cognition

00:02:51,570 --> 00:02:57,900
learning and mastery things that are

00:02:55,530 --> 00:02:59,850
subtle are things you might not yet be

00:02:57,900 --> 00:03:02,610
attuned to think things that you might

00:02:59,850 --> 00:03:04,950
dismiss out of hand often we use the

00:03:02,610 --> 00:03:06,720
term negligible sometimes

00:03:04,950 --> 00:03:08,250
interchangeably or justifiably with

00:03:06,720 --> 00:03:10,350
things that are subtly a subtle and

00:03:08,250 --> 00:03:12,750
sometimes out of a mistake for

00:03:10,350 --> 00:03:14,910
misunderstanding things that are subtle

00:03:12,750 --> 00:03:16,920
the negligent things are things that you

00:03:14,910 --> 00:03:20,280
can afford to do without and not pay

00:03:16,920 --> 00:03:21,900
attention to and I'll stay quite

00:03:20,280 --> 00:03:24,060
audaciously that the things that are

00:03:21,900 --> 00:03:26,550
subtle are the things that you want to

00:03:24,060 --> 00:03:28,800
pay attention to their you want to

00:03:26,550 --> 00:03:30,900
leverage but they're very easy to miss

00:03:28,800 --> 00:03:32,070
and very easy to mistake as things that

00:03:30,900 --> 00:03:34,550
are negligible are things you can avoid

00:03:32,070 --> 00:03:37,080
and then there's things that are crude

00:03:34,550 --> 00:03:39,420
and these are the just the vocabulary

00:03:37,080 --> 00:03:42,780
I'll use things that are tangible things

00:03:39,420 --> 00:03:45,989
that are material crude would be at the

00:03:42,780 --> 00:03:49,739
opposite end of the spectrum of subtle

00:03:45,989 --> 00:03:51,870
for the purposes of this talk crude

00:03:49,739 --> 00:03:53,730
things are still a necessity they're a

00:03:51,870 --> 00:04:01,070
starting point that the muscle memory

00:03:53,730 --> 00:04:04,590
the drills the dogma and unfortunately

00:04:01,070 --> 00:04:06,000
the crude things the material things are

00:04:04,590 --> 00:04:08,940
the things that we're hard-wired to

00:04:06,000 --> 00:04:11,970
connect to our cognitive mechanism is

00:04:08,940 --> 00:04:14,580
hardwired to pay more attention to this

00:04:11,970 --> 00:04:19,130
comes from the fact I suspect that we've

00:04:14,580 --> 00:04:23,070
spent more years as as human beings

00:04:19,130 --> 00:04:26,990
trying to evade saber-toothed cats than

00:04:23,070 --> 00:04:30,510
evade software defects or design defects

00:04:26,990 --> 00:04:31,710
they can be a trap and they can be the

00:04:30,510 --> 00:04:35,400
things that get in the way of realizing

00:04:31,710 --> 00:04:36,570
the subtler things the crude things are

00:04:35,400 --> 00:04:40,979
also the things that are easy to

00:04:36,570 --> 00:04:43,229
transfer so I can probably teach you how

00:04:40,979 --> 00:04:45,090
to use a testing framework but you're

00:04:43,229 --> 00:04:50,419
going to have to teach yourself how to

00:04:45,090 --> 00:04:56,150
design this is one of the reasons why

00:04:50,419 --> 00:04:59,039
things like TDD end up devolve inge into

00:04:56,150 --> 00:05:01,020
what you might call and I know this is a

00:04:59,039 --> 00:05:05,039
highly charged word an intellectual

00:05:01,020 --> 00:05:06,990
materialism which is means you've you've

00:05:05,039 --> 00:05:08,520
got an idea of what you're doing but

00:05:06,990 --> 00:05:13,979
then there's a cruder form of it that

00:05:08,520 --> 00:05:15,990
you're actually maybe doing so I want to

00:05:13,979 --> 00:05:18,599
get anybody thrown by the term mastery

00:05:15,990 --> 00:05:22,740
here because we live in a western sort

00:05:18,599 --> 00:05:25,860
of industrial modern culture we tend to

00:05:22,740 --> 00:05:29,130
look at stuff like mastery with a sense

00:05:25,860 --> 00:05:31,560
of cynicism we tend to look at things

00:05:29,130 --> 00:05:33,800
that are everyday and tangible if we

00:05:31,560 --> 00:05:37,200
reached out and grabbed them as mystical

00:05:33,800 --> 00:05:39,240
we use the words like oh that's so Zen

00:05:37,200 --> 00:05:41,220
ands ending out without actually having

00:05:39,240 --> 00:05:43,349
a fine understanding of what those

00:05:41,220 --> 00:05:45,330
things for example and perhaps having a

00:05:43,349 --> 00:05:46,860
more crude understanding of those things

00:05:45,330 --> 00:05:48,720
and immediately blanket them over with

00:05:46,860 --> 00:05:50,460
cynicism rather than suspending

00:05:48,720 --> 00:05:52,320
disbelief engaging with them and the

00:05:50,460 --> 00:05:56,160
issue here I want to talk about mastery

00:05:52,320 --> 00:05:59,550
is the process not the destination which

00:05:56,160 --> 00:06:01,830
is more of Eastern a mindset of this you

00:05:59,550 --> 00:06:03,870
could also think in terms of perfection

00:06:01,830 --> 00:06:05,580
as the process rather than a destination

00:06:03,870 --> 00:06:09,300
once you transform it that way you

00:06:05,580 --> 00:06:11,250
realize it's not this hoity-toity

00:06:09,300 --> 00:06:13,120
flighty thing that's way out there it's

00:06:11,250 --> 00:06:15,100
just the thing that is right in here

00:06:13,120 --> 00:06:18,190
the thing that is everyday that is in

00:06:15,100 --> 00:06:20,169
fact something that becomes tangible

00:06:18,190 --> 00:06:23,080
it's not meant to say that someone is a

00:06:20,169 --> 00:06:25,150
master it's not meant to permit this

00:06:23,080 --> 00:06:28,660
someone to claim that they are mass a

00:06:25,150 --> 00:06:32,139
master it's merely a recognition of the

00:06:28,660 --> 00:06:36,550
process of improvement called mastery

00:06:32,139 --> 00:06:39,580
and being in a pursuit of mastery is by

00:06:36,550 --> 00:06:42,760
no means an implicit license to claim

00:06:39,580 --> 00:06:48,669
that you are a master unless in fact you

00:06:42,760 --> 00:06:54,190
have achieved mastery the how this

00:06:48,669 --> 00:06:57,550
connects to subtlety is that increasing

00:06:54,190 --> 00:06:59,949
advances you make in a skill the first

00:06:57,550 --> 00:07:01,120
few steps you make are big and tangible

00:06:59,949 --> 00:07:02,650
if you've never pro if you've never

00:07:01,120 --> 00:07:03,699
written a line of code in your life then

00:07:02,650 --> 00:07:04,960
all of a sudden the next moment you've

00:07:03,699 --> 00:07:08,350
written a line of code that's a big

00:07:04,960 --> 00:07:10,330
noticeable change but successively the

00:07:08,350 --> 00:07:11,949
changes you make are less and less and

00:07:10,330 --> 00:07:14,800
less noticeable at least they're less

00:07:11,949 --> 00:07:16,000
and less and less notable noticeable to

00:07:14,800 --> 00:07:17,919
someone who's never written the line of

00:07:16,000 --> 00:07:21,220
code to someone who's been writing lines

00:07:17,919 --> 00:07:23,349
of code for 30 years those fineries

00:07:21,220 --> 00:07:26,560
there's those advancements become ever

00:07:23,349 --> 00:07:27,940
ever ever finer in fact from the

00:07:26,560 --> 00:07:30,010
perspective of the right hand side of

00:07:27,940 --> 00:07:32,680
this graph to the left hand side of this

00:07:30,010 --> 00:07:34,210
graph a personality on the right-hand

00:07:32,680 --> 00:07:36,360
side of the graph may say the last move

00:07:34,210 --> 00:07:41,590
on the left side is negligible

00:07:36,360 --> 00:07:44,289
unnecessary avoidable unproductive but

00:07:41,590 --> 00:07:47,190
when you plot productivity over this you

00:07:44,289 --> 00:07:50,020
get an exponential increase in

00:07:47,190 --> 00:07:53,349
capabilities and ability in productivity

00:07:50,020 --> 00:07:56,020
as you make these finer and finer and

00:07:53,349 --> 00:07:59,710
finer adjustments to your understanding

00:07:56,020 --> 00:08:03,940
these fine differentiations becomes so

00:07:59,710 --> 00:08:08,800
massively productive because these

00:08:03,940 --> 00:08:12,190
things that we're doing end up being

00:08:08,800 --> 00:08:14,680
pervasive there in every line of code

00:08:12,190 --> 00:08:16,449
you write every class you write every

00:08:14,680 --> 00:08:18,789
module right every product everything

00:08:16,449 --> 00:08:21,159
that you do ends up getting this small

00:08:18,789 --> 00:08:23,500
refinement which means in the large it's

00:08:21,159 --> 00:08:26,470
not a small refinement at all it's a

00:08:23,500 --> 00:08:30,100
powerful refinement

00:08:26,470 --> 00:08:34,030
and this is this is the crux design is

00:08:30,100 --> 00:08:38,110
in the realm of the subtle the test

00:08:34,030 --> 00:08:40,060
driven development is a subtle thing the

00:08:38,110 --> 00:08:42,789
test first programming is a crude thing

00:08:40,060 --> 00:08:45,610
and because crude things can be mistaken

00:08:42,789 --> 00:08:47,140
for subtle things you can end up doing

00:08:45,610 --> 00:08:48,520
test first programming without

00:08:47,140 --> 00:08:51,430
necessarily doing test-driven

00:08:48,520 --> 00:08:53,370
development and you now now you have to

00:08:51,430 --> 00:08:57,400
sort of accept that what I'm saying that

00:08:53,370 --> 00:09:00,070
I have some sort of authority over what

00:08:57,400 --> 00:09:02,320
test-driven development is but I can say

00:09:00,070 --> 00:09:07,510
that after a number of years of

00:09:02,320 --> 00:09:10,620
practicing TDD getting what I'm not a

00:09:07,510 --> 00:09:15,030
master at it but pursuing mastery in it

00:09:10,620 --> 00:09:17,590
less so than others more so than others

00:09:15,030 --> 00:09:20,910
it's possible to see code that was

00:09:17,590 --> 00:09:25,420
written test first and still end up with

00:09:20,910 --> 00:09:27,630
design qualities that are obviously or

00:09:25,420 --> 00:09:30,820
can be seen is obviously undesirable or

00:09:27,630 --> 00:09:33,420
lesser so test first programming doesn't

00:09:30,820 --> 00:09:36,550
actually lead you to the lauded goals of

00:09:33,420 --> 00:09:38,230
test-driven development and because of

00:09:36,550 --> 00:09:42,100
the way we're hardwired to see the crude

00:09:38,230 --> 00:09:44,080
things quicker and to be focused on them

00:09:42,100 --> 00:09:46,540
and have them steal our attention you

00:09:44,080 --> 00:09:48,490
can actually be doing you can actually

00:09:46,540 --> 00:09:51,550
have test driven development in your

00:09:48,490 --> 00:09:56,020
mind but have test first programming in

00:09:51,550 --> 00:09:58,960
your hands and not really ever know the

00:09:56,020 --> 00:10:00,700
difference unless perhaps you would stop

00:09:58,960 --> 00:10:02,140
every now and then look at your code and

00:10:00,700 --> 00:10:03,400
said this is really going well I'm doing

00:10:02,140 --> 00:10:05,920
good at this I think I'm good at this

00:10:03,400 --> 00:10:08,500
wait let me play a thought experiment

00:10:05,920 --> 00:10:11,440
that allows me to say let me pretend for

00:10:08,500 --> 00:10:14,470
a minute that I'm not good at this that

00:10:11,440 --> 00:10:16,000
I'm missing the point and run that

00:10:14,470 --> 00:10:17,260
through your mind and then take a look

00:10:16,000 --> 00:10:21,010
at your code through that lens and you

00:10:17,260 --> 00:10:23,830
can actually start to use pessimism as a

00:10:21,010 --> 00:10:26,740
means of improvement which might seem

00:10:23,830 --> 00:10:29,830
antithetical but for a pessimist like me

00:10:26,740 --> 00:10:32,740
it's quite essential let's talk quickly

00:10:29,830 --> 00:10:34,780
about automation automation is about

00:10:32,740 --> 00:10:38,290
tooling tooling is on the material side

00:10:34,780 --> 00:10:40,570
of the spectrum automation can draw your

00:10:38,290 --> 00:10:42,100
mind away from the design

00:10:40,570 --> 00:10:45,010
can draw your thinking away from the

00:10:42,100 --> 00:10:49,080
design mind here's a quintessential

00:10:45,010 --> 00:10:56,770
paper from an industrial psychologist

00:10:49,080 --> 00:10:58,840
that talks about automation this paper

00:10:56,770 --> 00:11:01,870
discusses ways in which automation of

00:10:58,840 --> 00:11:03,970
industrial processes may expend rather

00:11:01,870 --> 00:11:05,890
than eliminate the problems with the

00:11:03,970 --> 00:11:07,270
human operator this is something we've

00:11:05,890 --> 00:11:09,340
clearly seen with the prevalent

00:11:07,270 --> 00:11:13,420
prevalence of unit testing over the past

00:11:09,340 --> 00:11:15,040
decade and a half the promise was if you

00:11:13,420 --> 00:11:16,270
write unit tests and a lot of unit tests

00:11:15,040 --> 00:11:18,190
you get a lot of documentation

00:11:16,270 --> 00:11:19,900
programmers will understand more of what

00:11:18,190 --> 00:11:22,030
they're doing what tends to happen with

00:11:19,900 --> 00:11:24,850
automation is that we stop interacting

00:11:22,030 --> 00:11:26,890
with the code and we start relying on

00:11:24,850 --> 00:11:28,420
the automation we become further and

00:11:26,890 --> 00:11:30,340
further and further separated from the

00:11:28,420 --> 00:11:32,470
systems that we're building relying more

00:11:30,340 --> 00:11:34,000
and more and more on something else but

00:11:32,470 --> 00:11:36,340
what we need to be doing as human

00:11:34,000 --> 00:11:39,010
operators is constantly be recharging

00:11:36,340 --> 00:11:41,500
our intimacy with the code base and

00:11:39,010 --> 00:11:47,080
automation though necessary for our

00:11:41,500 --> 00:11:49,570
works also acts as a detractor from our

00:11:47,080 --> 00:11:51,520
ability to know this to know the systems

00:11:49,570 --> 00:11:52,990
what other industries and I'd say this

00:11:51,520 --> 00:11:55,300
is one of the things that separates

00:11:52,990 --> 00:11:57,940
industry from craft and suggests that

00:11:55,300 --> 00:12:00,070
software still lives in its craft state

00:11:57,940 --> 00:12:02,530
not the craftsmanship is bad the

00:12:00,070 --> 00:12:07,390
craftsmanship combined with industry is

00:12:02,530 --> 00:12:09,780
better this notion that we have yet to

00:12:07,390 --> 00:12:12,760
address which is the realization that

00:12:09,780 --> 00:12:14,650
Massa nations aren't necessarily the

00:12:12,760 --> 00:12:17,770
answer that automating everything that

00:12:14,650 --> 00:12:19,630
isn't nailed down isn't the answer and I

00:12:17,770 --> 00:12:21,640
think one of the reasons that this is a

00:12:19,630 --> 00:12:22,750
problem specifically for us even more

00:12:21,640 --> 00:12:24,730
than other industries that have come

00:12:22,750 --> 00:12:26,740
before and why it's taking us so long to

00:12:24,730 --> 00:12:32,530
pay attention to this is that we build

00:12:26,740 --> 00:12:34,840
automation our product we are automation

00:12:32,530 --> 00:12:37,180
product developers the last thing we are

00:12:34,840 --> 00:12:39,880
predisposed to hearing is that the main

00:12:37,180 --> 00:12:44,440
fussed of our lives is potentially not

00:12:39,880 --> 00:12:48,430
as helpful or so as good as as we like

00:12:44,440 --> 00:12:51,120
or need perhaps to tell ourselves so

00:12:48,430 --> 00:12:53,620
it's been said for years tdd is design

00:12:51,120 --> 00:12:54,070
and when you talk to people about TDD

00:12:53,620 --> 00:12:55,360
you can fine

00:12:54,070 --> 00:12:57,670
something doing test first programming

00:12:55,360 --> 00:12:59,890
or test-driven development and see two

00:12:57,670 --> 00:13:01,780
very different things happening or

00:12:59,890 --> 00:13:04,420
similar things happening and two very

00:13:01,780 --> 00:13:06,340
different outcomes and the difference

00:13:04,420 --> 00:13:09,670
here is understanding what kind of

00:13:06,340 --> 00:13:11,980
things are software design and beyond

00:13:09,670 --> 00:13:14,110
that what kind of software design

00:13:11,980 --> 00:13:20,760
characteristics are good characteristics

00:13:14,110 --> 00:13:27,430
and why test first programming leads you

00:13:20,760 --> 00:13:31,500
to design or desirable design if you

00:13:27,430 --> 00:13:34,420
don't first start with some notion of

00:13:31,500 --> 00:13:37,750
desirable design it's hard to get there

00:13:34,420 --> 00:13:39,010
and if you don't start there there's

00:13:37,750 --> 00:13:41,410
another thing you can do which has

00:13:39,010 --> 00:13:44,890
become hypersensitive to any kind of

00:13:41,410 --> 00:13:46,660
friction whatsoever to not think that

00:13:44,890 --> 00:13:48,580
these little frictions are negligible

00:13:46,660 --> 00:13:51,070
but to say that all of these little

00:13:48,580 --> 00:13:56,290
frictions aren't normal they're a sign

00:13:51,070 --> 00:13:59,350
of some looming massive problem that is

00:13:56,290 --> 00:14:03,220
merely subtle it's only subtle to your

00:13:59,350 --> 00:14:05,020
or my or anyone's level of ability right

00:14:03,220 --> 00:14:07,570
now I may see something as subtle right

00:14:05,020 --> 00:14:11,200
now but with years of practice I'll know

00:14:07,570 --> 00:14:16,350
this to be a very large problem cancer

00:14:11,200 --> 00:14:16,350
is a very very small piece of material

00:14:16,380 --> 00:14:26,590
cellular until it consumes the entire

00:14:22,120 --> 00:14:30,010
host but each individual cell doesn't

00:14:26,590 --> 00:14:33,400
get larger the problem just becomes

00:14:30,010 --> 00:14:38,230
pervasive the same token small things

00:14:33,400 --> 00:14:41,500
small benefits have the same impact on

00:14:38,230 --> 00:14:43,780
the other side of the spectrum so let's

00:14:41,500 --> 00:14:45,760
talk about good design and this isn't

00:14:43,780 --> 00:14:46,960
enough time there isn't enough time in

00:14:45,760 --> 00:14:49,330
the world there might not be enough time

00:14:46,960 --> 00:14:51,280
in one human lifetime to really cover

00:14:49,330 --> 00:14:54,790
what is good design so i'll talk about a

00:14:51,280 --> 00:14:57,370
few things that are a good starting

00:14:54,790 --> 00:14:59,950
place encapsulation coupling and

00:14:57,370 --> 00:15:01,510
abstraction are you can consider these

00:14:59,950 --> 00:15:04,930
design principles just as you can

00:15:01,510 --> 00:15:06,850
consider more tangible or more concrete

00:15:04,930 --> 00:15:07,450
design principles like separation of

00:15:06,850 --> 00:15:10,890
concerns

00:15:07,450 --> 00:15:13,390
an inversion of dependencies and

00:15:10,890 --> 00:15:15,490
principles like lifts cough rules like

00:15:13,390 --> 00:15:17,650
let's go five should say these are more

00:15:15,490 --> 00:15:19,570
fundamental higher order encapsulation

00:15:17,650 --> 00:15:20,800
cup slip coupling and abstraction and of

00:15:19,570 --> 00:15:22,570
course you could go on and say there's

00:15:20,800 --> 00:15:29,140
also should be considering complexity in

00:15:22,570 --> 00:15:30,610
here encapsulation is about well there's

00:15:29,140 --> 00:15:33,910
a good there's a good rule of thumb tell

00:15:30,610 --> 00:15:35,890
don't ask that means tell objects or

00:15:33,910 --> 00:15:41,440
systems what to do but don't don't ask

00:15:35,890 --> 00:15:43,120
them for things coupling is how many how

00:15:41,440 --> 00:15:44,740
many lines of entanglement exists

00:15:43,120 --> 00:15:46,210
between two modules where a module I

00:15:44,740 --> 00:15:48,100
don't mean a ruby module but anything

00:15:46,210 --> 00:15:50,470
that is a unit of decomposition of

00:15:48,100 --> 00:15:54,700
software in Ruby would be a class it can

00:15:50,470 --> 00:15:56,110
be a module in a functional programming

00:15:54,700 --> 00:15:59,590
language it would be it would be another

00:15:56,110 --> 00:16:02,860
construct with weaker encapsulation

00:15:59,590 --> 00:16:03,940
comes more coupling abstraction sort of

00:16:02,860 --> 00:16:10,560
hovers around these things this is

00:16:03,940 --> 00:16:12,490
knowing what what boxes to put things in

00:16:10,560 --> 00:16:14,080
where there's something what a method

00:16:12,490 --> 00:16:16,390
goes in one place or another place or

00:16:14,080 --> 00:16:22,350
that you need a whole other thing to put

00:16:16,390 --> 00:16:27,340
stuff in and the purpose of all of this

00:16:22,350 --> 00:16:29,190
really a computer will run a mess just

00:16:27,340 --> 00:16:32,860
as easily it will run something clean

00:16:29,190 --> 00:16:35,050
right a computer was invented to follow

00:16:32,860 --> 00:16:36,790
your instructions like there's no other

00:16:35,050 --> 00:16:38,890
reason that this machine exists but to

00:16:36,790 --> 00:16:41,110
follow your instructions it's really no

00:16:38,890 --> 00:16:43,180
great accomplishment to be able to get a

00:16:41,110 --> 00:16:44,950
computer to do what you tell it to do

00:16:43,180 --> 00:16:48,310
that's the only reason and it's ever

00:16:44,950 --> 00:16:50,560
existed the old reason for this is human

00:16:48,310 --> 00:16:53,080
this is so human beings can have clarity

00:16:50,560 --> 00:16:55,420
over the coat over the design design is

00:16:53,080 --> 00:16:58,540
about human cognition we are shaping

00:16:55,420 --> 00:17:00,580
software not only the way we have to

00:16:58,540 --> 00:17:01,900
shape networks and deal with deal with

00:17:00,580 --> 00:17:04,240
the principles of distributed computing

00:17:01,900 --> 00:17:06,940
but also for human cognition because

00:17:04,240 --> 00:17:10,360
this is the thing that is the predictor

00:17:06,940 --> 00:17:16,240
of productivity rather than automation

00:17:10,360 --> 00:17:20,050
and it turns out that we massively

00:17:16,240 --> 00:17:21,490
underestimate on average the impact of

00:17:20,050 --> 00:17:23,829
design mistake

00:17:21,490 --> 00:17:28,120
we look at design mistakes that are

00:17:23,829 --> 00:17:30,820
subtle as negligible the reality is any

00:17:28,120 --> 00:17:34,179
sense of frustration or friction that

00:17:30,820 --> 00:17:37,300
you feel is a sign that the cancer is in

00:17:34,179 --> 00:17:39,640
you already and it's time to deal with

00:17:37,300 --> 00:17:45,220
it right now it's not negligible you

00:17:39,640 --> 00:17:47,080
can't wait this is what these design

00:17:45,220 --> 00:17:49,390
principles that seem so esoteric if you

00:17:47,080 --> 00:17:50,830
read them on Wikipedia seems so academic

00:17:49,390 --> 00:17:54,640
why would somebody pay attention to them

00:17:50,830 --> 00:17:58,270
the reason is that if you only look at

00:17:54,640 --> 00:17:59,470
individual issues in the small well all

00:17:58,270 --> 00:18:01,360
of those things can be seen as

00:17:59,470 --> 00:18:03,730
negligible once you start to see them as

00:18:01,360 --> 00:18:06,070
pervasive patterns that are pervasive

00:18:03,730 --> 00:18:08,860
you'll understand that the rot is there

00:18:06,070 --> 00:18:14,679
the reality is that your productivity

00:18:08,860 --> 00:18:16,900
can be massively increased by focusing

00:18:14,679 --> 00:18:20,200
on design principles because you free

00:18:16,900 --> 00:18:27,340
yourself from the downtime pervasive

00:18:20,200 --> 00:18:29,290
downtime of figuring things out here's a

00:18:27,340 --> 00:18:32,740
nice dirty little secret that you should

00:18:29,290 --> 00:18:37,570
think about before you go to sleep every

00:18:32,740 --> 00:18:41,020
test is an additional coupling so how do

00:18:37,570 --> 00:18:43,740
you get greater productivity by adding

00:18:41,020 --> 00:18:47,860
more coupling but how do you get away

00:18:43,740 --> 00:18:49,870
without testing I mean I'm not saying

00:18:47,860 --> 00:18:54,460
that you should just go ahead and delete

00:18:49,870 --> 00:18:56,470
all your tests unless they suck then you

00:18:54,460 --> 00:18:57,790
might just want to rewrite them but

00:18:56,470 --> 00:19:05,350
every day this isn't it this is an

00:18:57,790 --> 00:19:09,280
unavoidable consequence and this is the

00:19:05,350 --> 00:19:12,040
this is the downside of this the poor

00:19:09,280 --> 00:19:14,170
your design ie the less clarity you have

00:19:12,040 --> 00:19:16,390
you're going to start falling back on

00:19:14,170 --> 00:19:18,640
more and more testing the more and more

00:19:16,390 --> 00:19:20,770
testing you have the more coupling you

00:19:18,640 --> 00:19:23,410
have the more coupling you have the

00:19:20,770 --> 00:19:25,630
harder it is to change your stuff to

00:19:23,410 --> 00:19:27,990
make it into something else that's more

00:19:25,630 --> 00:19:27,990
clear

00:19:30,200 --> 00:19:38,780
it's a vicious circle it's a downward

00:19:33,830 --> 00:19:40,640
spiral and this is the other downside of

00:19:38,780 --> 00:19:43,190
this every single test framework

00:19:40,640 --> 00:19:48,530
available to you naturally encourages

00:19:43,190 --> 00:19:51,350
you to violate the productive principles

00:19:48,530 --> 00:19:59,600
or the principles of design that give

00:19:51,350 --> 00:20:02,120
you this productivity as a side a lot of

00:19:59,600 --> 00:20:05,630
the sin taxes the grammars of the

00:20:02,120 --> 00:20:08,750
frameworks are dis are obstructions to

00:20:05,630 --> 00:20:17,390
the creative flow of test-driven

00:20:08,750 --> 00:20:19,490
development and the goal here is to

00:20:17,390 --> 00:20:20,690
start focusing on in terms of designers

00:20:19,490 --> 00:20:23,330
to start focusing on things that are

00:20:20,690 --> 00:20:26,540
workable rather than things that are

00:20:23,330 --> 00:20:28,880
just working working software is

00:20:26,540 --> 00:20:32,080
necessary of course but it's the low end

00:20:28,880 --> 00:20:36,470
it's the bar it's the it's the lowest I

00:20:32,080 --> 00:20:40,310
don't know how to say that well it's not

00:20:36,470 --> 00:20:42,790
as good let's just leave it at that you

00:20:40,310 --> 00:20:45,860
can have good but better is better and

00:20:42,790 --> 00:20:47,600
workable means you can sit down with it

00:20:45,860 --> 00:20:49,660
I wasn't there for the talk I save I

00:20:47,600 --> 00:20:53,840
think somebody on a panel said the only

00:20:49,660 --> 00:20:55,610
measure of software quality is wtf's per

00:20:53,840 --> 00:20:57,170
minute so right and soon as somebody

00:20:55,610 --> 00:20:59,090
said that's the same thing that's

00:20:57,170 --> 00:21:03,260
workable software it means a human being

00:20:59,090 --> 00:21:05,210
can work it we think it's normal to sit

00:21:03,260 --> 00:21:06,710
down and software and be stumped sit

00:21:05,210 --> 00:21:08,840
down with code and be stumped it's not

00:21:06,710 --> 00:21:10,700
normal it's completely abnormal it's

00:21:08,840 --> 00:21:12,260
actually a sign of our industrial and

00:21:10,700 --> 00:21:15,670
maturity probably not really immaterial

00:21:12,260 --> 00:21:18,680
call it primitiveness or craft a

00:21:15,670 --> 00:21:21,920
craftsman can probably create amazing

00:21:18,680 --> 00:21:24,230
things and those apprentices in his shop

00:21:21,920 --> 00:21:26,960
can probably work the way he does but

00:21:24,230 --> 00:21:28,490
perhaps a craftsman from one side of the

00:21:26,960 --> 00:21:30,470
country to another side of the country

00:21:28,490 --> 00:21:31,970
maybe their people couldn't work with

00:21:30,470 --> 00:21:33,320
each other systems even if they were

00:21:31,970 --> 00:21:35,390
both building chairs are the same wood

00:21:33,320 --> 00:21:36,650
with the same tools that's the

00:21:35,390 --> 00:21:38,960
difference between workable it's a

00:21:36,650 --> 00:21:40,940
matter of industrial process it's a

00:21:38,960 --> 00:21:43,470
matter of looking at knowledge transfer

00:21:40,940 --> 00:21:46,190
as a means of momentum transfer

00:21:43,470 --> 00:21:49,620
and we typically have sawtooth saw tooth

00:21:46,190 --> 00:21:51,059
development processes where you do some

00:21:49,620 --> 00:21:52,710
work and you build up all this momentum

00:21:51,059 --> 00:21:55,260
and you hand it off to the next person

00:21:52,710 --> 00:21:56,429
in the process and their momentum jobs

00:21:55,260 --> 00:21:59,610
and it drops because they got to sit

00:21:56,429 --> 00:22:01,049
down and figure out decipher and we tend

00:21:59,610 --> 00:22:04,080
to pride ourselves on this ability to

00:22:01,049 --> 00:22:05,280
decipher code where it's really it's a

00:22:04,080 --> 00:22:07,110
great thing to have if that's your

00:22:05,280 --> 00:22:09,780
crisis you know if your house is burning

00:22:07,110 --> 00:22:11,220
down it's nice to have a fireman it's

00:22:09,780 --> 00:22:13,440
better to not have your house burned

00:22:11,220 --> 00:22:17,159
down it's wonderful to be able to solve

00:22:13,440 --> 00:22:18,900
these these intractable problems even

00:22:17,159 --> 00:22:21,390
better figuring out how to avoid them

00:22:18,900 --> 00:22:25,020
I'm not a really good debugger I'm at a

00:22:21,390 --> 00:22:27,090
find myself at a loss in in this

00:22:25,020 --> 00:22:28,440
business because I'm not really good

00:22:27,090 --> 00:22:31,549
with working with other people's code

00:22:28,440 --> 00:22:34,590
I've spent more of my time figuring out

00:22:31,549 --> 00:22:38,309
teasing my mind on and torturing myself

00:22:34,590 --> 00:22:41,610
on how to avoid having to decipher code

00:22:38,309 --> 00:22:45,090
because I find it so frustrating to

00:22:41,610 --> 00:22:46,799
spend time that way so I want to take

00:22:45,090 --> 00:22:50,480
some inspiration from service-oriented

00:22:46,799 --> 00:22:52,320
architecture to talk about design and

00:22:50,480 --> 00:22:54,960
here's where we're going to start to

00:22:52,320 --> 00:22:59,549
throw out even more perhaps

00:22:54,960 --> 00:23:01,980
countercultural ideas and we'll work

00:22:59,549 --> 00:23:07,740
this back to objects so start with

00:23:01,980 --> 00:23:09,990
services this might be hopefully this is

00:23:07,740 --> 00:23:14,340
a little bit of a psychic shock services

00:23:09,990 --> 00:23:19,020
never return data services only accept

00:23:14,340 --> 00:23:23,730
commands services may respond with

00:23:19,020 --> 00:23:26,159
signals that give their status it's

00:23:23,730 --> 00:23:30,480
impossible to have a software construct

00:23:26,159 --> 00:23:34,230
called a service that you can ask give

00:23:30,480 --> 00:23:37,830
me the last orders from the last ten

00:23:34,230 --> 00:23:44,690
minutes that is in fact not a service

00:23:37,830 --> 00:23:44,690
and well from the perspective of so ax

00:23:44,840 --> 00:23:51,240
what we tend to have what we call

00:23:47,460 --> 00:23:54,659
services are actually databases with

00:23:51,240 --> 00:23:56,360
HTTP interfaces which is a perfectly

00:23:54,659 --> 00:24:00,360
fine thing

00:23:56,360 --> 00:24:02,160
how we get this way is another another

00:24:00,360 --> 00:24:04,770
example of the process of materialism

00:24:02,160 --> 00:24:09,289
and attachment those things used to be

00:24:04,770 --> 00:24:12,510
called web services but somebody said f

00:24:09,289 --> 00:24:14,700
enterprise at some point and so things

00:24:12,510 --> 00:24:17,370
that were associated with web services

00:24:14,700 --> 00:24:21,780
or enterprise we're no longer viable or

00:24:17,370 --> 00:24:23,760
valuable or culturally conducive to our

00:24:21,780 --> 00:24:25,049
careers so we dropped the web off the

00:24:23,760 --> 00:24:26,850
front we started calling them services

00:24:25,049 --> 00:24:28,890
and now we've created confusion or even

00:24:26,850 --> 00:24:31,230
an obstruction to an even deeper subtler

00:24:28,890 --> 00:24:33,240
field of knowledge web services are

00:24:31,230 --> 00:24:34,950
perfectly fine you should probably just

00:24:33,240 --> 00:24:36,480
call them web services in fact we're so

00:24:34,950 --> 00:24:44,309
embarrassed about saying that we use web

00:24:36,480 --> 00:24:45,780
services we now call them api's if you

00:24:44,309 --> 00:24:48,600
think about this in terms of objects or

00:24:45,780 --> 00:24:50,909
what you can do with objects it becomes

00:24:48,600 --> 00:24:52,370
difficult to get your head around if

00:24:50,909 --> 00:24:57,210
you've been steeped in active record

00:24:52,370 --> 00:24:59,240
because active record violates many of

00:24:57,210 --> 00:25:05,669
these many of these rules that help us

00:24:59,240 --> 00:25:11,159
keep our systems productive order probab

00:25:05,669 --> 00:25:13,230
you know uh order person address street

00:25:11,159 --> 00:25:16,890
is not a good thing to do that's a

00:25:13,230 --> 00:25:20,220
violation of encapsulation active record

00:25:16,890 --> 00:25:22,919
is a fantastic set of shortcuts that is

00:25:20,220 --> 00:25:24,990
incredibly valuable to us as workers and

00:25:22,919 --> 00:25:27,270
incredibly valuable or society who need

00:25:24,990 --> 00:25:28,860
software on a short timeline but it's a

00:25:27,270 --> 00:25:34,950
set of shortcuts and we use these

00:25:28,860 --> 00:25:36,840
shortcuts specifically because we know

00:25:34,950 --> 00:25:39,390
what we're getting ourselves into if you

00:25:36,840 --> 00:25:41,250
believe as Dave Thomas intimated

00:25:39,390 --> 00:25:42,600
yesterday that there's an architecture

00:25:41,250 --> 00:25:44,130
there or that there's a good

00:25:42,600 --> 00:25:47,250
architecture there because it's the only

00:25:44,130 --> 00:25:49,590
thing you've seen then there's more to

00:25:47,250 --> 00:25:53,100
be seen so I'm going to get a time I

00:25:49,590 --> 00:25:55,679
want to I want to jump to code so I want

00:25:53,100 --> 00:25:58,370
to talk about I want to talk about flow

00:25:55,679 --> 00:25:58,370
in TDD

00:26:01,049 --> 00:26:05,610
so I've got a idea for a sample app and

00:26:03,869 --> 00:26:08,399
this is this is very very trivial and

00:26:05,610 --> 00:26:14,249
very naive mostly because oh you don't

00:26:08,399 --> 00:26:16,619
see this to you what do you think it's

00:26:14,249 --> 00:26:18,980
my new programming language I call it

00:26:16,619 --> 00:26:18,980
boots

00:26:26,080 --> 00:26:30,190
except I can't see my screen so I want

00:26:28,419 --> 00:26:31,480
to just do a really quick very very name

00:26:30,190 --> 00:26:34,090
unfortunately this is such a trivial

00:26:31,480 --> 00:26:36,700
example that it might not highlight TV

00:26:34,090 --> 00:26:39,460
very well or or this hypothetical

00:26:36,700 --> 00:26:40,899
theoretical testing framework or testing

00:26:39,460 --> 00:26:41,950
library and i'm not saying i'm not going

00:26:40,899 --> 00:26:43,480
to show you this to say hey everybody

00:26:41,950 --> 00:26:45,820
jump on the bandwagon use my framework

00:26:43,480 --> 00:26:48,909
this is not a framework it's a proof of

00:26:45,820 --> 00:26:51,820
concept just to talk about what might

00:26:48,909 --> 00:26:54,419
happen what you might do to restore a

00:26:51,820 --> 00:26:58,419
design focus to test driven development

00:26:54,419 --> 00:27:00,010
maybe as a rehabilitative mechanism I'm

00:26:58,419 --> 00:27:06,100
not saying stop using test unit or stop

00:27:00,010 --> 00:27:07,809
using our spec so this little example is

00:27:06,100 --> 00:27:10,630
about I'm sorry I've really got to

00:27:07,809 --> 00:27:15,970
figure out how to mirror my screens here

00:27:10,630 --> 00:27:20,559
okay I think I accidentally just made it

00:27:15,970 --> 00:27:25,450
happen that's awesome you have voice

00:27:20,559 --> 00:27:32,740
command over my computer that's not just

00:27:25,450 --> 00:27:40,360
a little disconcerting so um the sample

00:27:32,740 --> 00:27:43,740
is going to be string reversal Oh got

00:27:40,360 --> 00:27:43,740
old code in here my bed

00:27:53,210 --> 00:27:55,270
you

00:27:58,870 --> 00:28:07,330
yeah let's just do the old let's just do

00:28:03,130 --> 00:28:08,620
this dirty m dash RF is always a

00:28:07,330 --> 00:28:21,160
great thing to be typing when you're

00:28:08,620 --> 00:28:24,210
doing live coding excellent I think

00:28:21,160 --> 00:28:24,210
let's find out

00:28:32,850 --> 00:28:36,510
so I just want to write a quick string

00:28:34,890 --> 00:28:39,120
reverser and I just want to do it with a

00:28:36,510 --> 00:28:40,620
little bit of TDD so this is a library

00:28:39,120 --> 00:28:41,640
called proof gem install proof if you

00:28:40,620 --> 00:28:42,750
want to tinker with it it's not a

00:28:41,640 --> 00:28:44,340
full-blown library it's very primitive

00:28:42,750 --> 00:28:46,200
it's meant to be primitive there's no

00:28:44,340 --> 00:28:47,400
runner I didn't want a runner I wanted

00:28:46,200 --> 00:28:49,140
to be able to run this with Ruby I

00:28:47,400 --> 00:28:50,190
wanted to be able to run it from the

00:28:49,140 --> 00:28:54,050
command line I didn't want have to

00:28:50,190 --> 00:28:54,050
install an editor plugin for anything

00:28:54,290 --> 00:28:58,950
very very very primitive what I mean by

00:28:57,000 --> 00:29:00,450
primitive is that there's not so much

00:28:58,950 --> 00:29:03,930
automation that I no longer pay

00:29:00,450 --> 00:29:05,370
attention to the code that I remain

00:29:03,930 --> 00:29:08,910
intimate because the automation isn't

00:29:05,370 --> 00:29:15,510
keeping me away from it so I like to do

00:29:08,910 --> 00:29:17,670
a thing that I call you see what I'm

00:29:15,510 --> 00:29:19,260
also using a sort of folder structure

00:29:17,670 --> 00:29:22,410
here that is just straight up what

00:29:19,260 --> 00:29:24,360
rubygems tend to be trying to figure out

00:29:22,410 --> 00:29:25,290
like what files go where and also if

00:29:24,360 --> 00:29:27,240
that's what I mean about getting in the

00:29:25,290 --> 00:29:29,160
way of the flow figuring out whether

00:29:27,240 --> 00:29:31,950
you've got a context or specification or

00:29:29,160 --> 00:29:34,350
in it or do or are those things how

00:29:31,950 --> 00:29:37,400
level how deep of levels whether

00:29:34,350 --> 00:29:39,900
something is a let or an instantiation

00:29:37,400 --> 00:29:41,610
that's all good and well and good i just

00:29:39,900 --> 00:29:43,680
found that sort of getting in the way so

00:29:41,610 --> 00:29:47,250
i tend to do things called sketching

00:29:43,680 --> 00:29:50,790
which isn't anything that you can't do

00:29:47,250 --> 00:29:54,510
with any other framework or any piece of

00:29:50,790 --> 00:29:55,860
code I just stop starting with a test I

00:29:54,510 --> 00:29:58,770
don't start with a test framework

00:29:55,860 --> 00:30:04,700
anymore I really just do the TDE thing

00:29:58,770 --> 00:30:04,700
if I'm going to do like a I'll have some

00:30:24,669 --> 00:30:44,470
throw okay I've done java all right all

00:30:29,499 --> 00:30:45,879
right fine so that to me is a perfectly

00:30:44,470 --> 00:30:47,739
fine way of getting away from the

00:30:45,879 --> 00:30:49,210
framework and getting into the flow I

00:30:47,739 --> 00:30:50,859
didn't start with figuring out whether

00:30:49,210 --> 00:30:52,149
I've about I've got a context or

00:30:50,859 --> 00:30:54,429
specification I'm really more concerned

00:30:52,149 --> 00:30:56,230
with the filename that kind of stuff I'm

00:30:54,429 --> 00:30:57,460
just calling it sketch for now but i'll

00:30:56,230 --> 00:30:58,720
do all kinds of this stuff and i'll just

00:30:57,460 --> 00:31:01,480
get you and I've done this with teams on

00:30:58,720 --> 00:31:03,940
projector so we just bang out some stuff

00:31:01,480 --> 00:31:05,710
and then from here start to move it

00:31:03,940 --> 00:31:08,109
forward and I'm gonna have to go to the

00:31:05,710 --> 00:31:10,139
ready baked turkey because I've got my

00:31:08,109 --> 00:31:16,259
overtime where I've got five minutes

00:31:10,139 --> 00:31:18,759
anybody know I'm going into lunch right

00:31:16,259 --> 00:31:20,889
so this was like last year we went into

00:31:18,759 --> 00:31:23,230
lunch the thing that I want to do is

00:31:20,889 --> 00:31:27,279
help you not stand in line and that's

00:31:23,230 --> 00:31:28,899
why I've made this take longer so again

00:31:27,279 --> 00:31:31,899
this is pretty trivial it's really naive

00:31:28,899 --> 00:31:33,850
example I mean I wouldn't say this is a

00:31:31,899 --> 00:31:36,340
this is a thing that maybe even needs

00:31:33,850 --> 00:31:38,619
test-driven development but this is a

00:31:36,340 --> 00:31:40,419
really simple example of what the

00:31:38,619 --> 00:31:42,519
premise of TD is to think through your

00:31:40,419 --> 00:31:44,230
code first thing to your design think

00:31:42,519 --> 00:31:45,879
through the API write it down even

00:31:44,230 --> 00:31:46,899
though you don't have any code and I'm

00:31:45,879 --> 00:31:48,850
not using a test framework here i'm just

00:31:46,899 --> 00:31:50,889
saying raise if blah blah you know from

00:31:48,850 --> 00:31:52,029
here just to get my thoughts clear i

00:31:50,889 --> 00:31:57,399
don't really have to do anything more

00:31:52,029 --> 00:31:59,350
than create a class and start

00:31:57,399 --> 00:32:00,789
implementing and i'm not going to do i'm

00:31:59,350 --> 00:32:02,679
not going to do red green refactor i'm

00:32:00,789 --> 00:32:08,739
not going to do this i'm not going to do

00:32:02,679 --> 00:32:12,820
this to the book by the book the goal

00:32:08,739 --> 00:32:15,999
here is not to show TDD or or to spell

00:32:12,820 --> 00:32:18,279
out in it al what I'm trying to do is

00:32:15,999 --> 00:32:19,989
not put on the reading glasses that I've

00:32:18,279 --> 00:32:21,909
been prescribed to you since the last

00:32:19,989 --> 00:32:24,149
time I spoke at this conference so damn

00:32:21,909 --> 00:32:24,149
you

00:32:44,540 --> 00:32:49,430
oh yeah I knew that this this James

00:32:48,110 --> 00:32:50,720
missed me up yesterday with the splat

00:32:49,430 --> 00:32:52,310
and I had a nightmare about it last

00:32:50,720 --> 00:32:58,510
night a splat without arguments no I'll

00:32:52,310 --> 00:32:58,510
said everything is screwed up thank you

00:33:00,370 --> 00:33:14,090
text sticks and then I could say it

00:33:05,090 --> 00:33:15,890
takes the reverse right didn't raise I

00:33:14,090 --> 00:33:20,660
want to do it the other way just say

00:33:15,890 --> 00:33:22,820
this is a pass obviously this wouldn't

00:33:20,660 --> 00:33:24,710
be very helpful but you're getting the

00:33:22,820 --> 00:33:26,930
idea i'm just saying we can start

00:33:24,710 --> 00:33:34,060
banging some things together move things

00:33:26,930 --> 00:33:34,060
into move things into where they belong

00:33:38,500 --> 00:33:43,490
cetera but this isn't the point of the

00:33:41,300 --> 00:33:44,960
proof framework the proof framework is

00:33:43,490 --> 00:33:48,910
about or the proof library I hate to

00:33:44,960 --> 00:33:48,910
call it a framework is about saying

00:33:55,840 --> 00:34:02,710
well let's say we're where would you say

00:33:59,000 --> 00:34:11,030
the violation of encapsulation is in

00:34:02,710 --> 00:34:12,710
these three lines of code again it's a

00:34:11,030 --> 00:34:15,400
trivial example so so it get up sort of

00:34:12,710 --> 00:34:25,970
bear with me and don't apply this

00:34:15,400 --> 00:34:29,000
mindlessly this is it I said services

00:34:25,970 --> 00:34:33,140
don't return don't export their data

00:34:29,000 --> 00:34:35,590
they accept commands but all of our test

00:34:33,140 --> 00:34:38,240
frameworks usually say assert that

00:34:35,590 --> 00:34:39,679
person dot full name equals and then

00:34:38,240 --> 00:34:41,360
you've got some other thing like some

00:34:39,679 --> 00:34:43,610
some value if you're pulling things off

00:34:41,360 --> 00:34:45,530
of objects you're exposing a greater

00:34:43,610 --> 00:34:47,090
surface for public coupling you say well

00:34:45,530 --> 00:34:49,220
how would you do that how could you put

00:34:47,090 --> 00:34:50,210
active record objects on the screen if

00:34:49,220 --> 00:34:51,380
you couldn't do that well there are

00:34:50,210 --> 00:34:53,090
other patterns to do it and in the case

00:34:51,380 --> 00:34:54,679
of active record it may not make sense

00:34:53,090 --> 00:34:57,620
because you're talking actually at that

00:34:54,679 --> 00:35:00,170
point about data structures and tdd over

00:34:57,620 --> 00:35:01,550
data structures is usually not terribly

00:35:00,170 --> 00:35:03,320
helpful anyway especially data

00:35:01,550 --> 00:35:06,170
structures that are already based on a

00:35:03,320 --> 00:35:07,880
framework that lock you in to a it's

00:35:06,170 --> 00:35:11,210
basically paint by numbers at that point

00:35:07,880 --> 00:35:15,050
in fact TDD with rails may not even be

00:35:11,210 --> 00:35:16,730
as valuable it's valuable but only for

00:35:15,050 --> 00:35:18,320
the things that you're inventing it's

00:35:16,730 --> 00:35:19,670
valuable when you look at rails as the

00:35:18,320 --> 00:35:21,190
twenty percent of your solution rather

00:35:19,670 --> 00:35:23,870
than eighty percent of your solution

00:35:21,190 --> 00:35:26,150
because we're not creating things test

00:35:23,870 --> 00:35:27,980
first programming can help you figure

00:35:26,150 --> 00:35:29,300
think through things but you're not

00:35:27,980 --> 00:35:32,000
really thinking through a lot of

00:35:29,300 --> 00:35:33,320
complexity or design coupling all these

00:35:32,000 --> 00:35:34,820
other problems all those things have

00:35:33,320 --> 00:35:40,550
already been set in stone for you by the

00:35:34,820 --> 00:35:42,580
framework so how would I deal with a

00:35:40,550 --> 00:35:48,410
testing framework that didn't allow me

00:35:42,580 --> 00:35:50,660
to dis encapsulate following tell don't

00:35:48,410 --> 00:35:52,160
ask so I'll just jump to the I'll just

00:35:50,660 --> 00:35:55,720
just jump to the ready big solution and

00:35:52,160 --> 00:35:55,720
and will be real quick about it

00:36:13,260 --> 00:36:18,830
I love get especially when I'm stressed

00:36:23,600 --> 00:36:30,110
alright let's do this I've had a lot of

00:36:28,550 --> 00:36:43,880
luck with this live coding this is great

00:36:30,110 --> 00:36:46,430
usually I just delete my hard drive the

00:36:43,880 --> 00:36:48,440
presence of ARMA 4 RM RF and my console

00:36:46,430 --> 00:36:49,550
and your voice at the same time are

00:36:48,440 --> 00:36:51,740
probably the conditions that have to

00:36:49,550 --> 00:37:03,830
come together with your voice commands

00:36:51,740 --> 00:37:05,830
and my clumsy fingers all right this is

00:37:03,830 --> 00:37:10,400
what a this is what a test looks like

00:37:05,830 --> 00:37:14,840
using proof and proof is really just a

00:37:10,400 --> 00:37:20,410
proof of concept that line 7 is the

00:37:14,840 --> 00:37:26,810
thing that is allowing encapsulation to

00:37:20,410 --> 00:37:29,020
not be violated and be fantastic if it

00:37:26,810 --> 00:37:29,020
ran

00:37:32,790 --> 00:37:39,540
great not a lot of fanciness in the

00:37:35,610 --> 00:37:41,070
output the idea here is it forces I kind

00:37:39,540 --> 00:37:42,990
of tend to like to force myself to read

00:37:41,070 --> 00:37:45,000
the output what I noticed a lot over the

00:37:42,990 --> 00:37:48,600
years interesting years is all run tests

00:37:45,000 --> 00:37:50,610
and not look so I actually don't if I'm

00:37:48,600 --> 00:37:52,050
just running a file the great thing

00:37:50,610 --> 00:37:53,100
sometimes about well some of the good

00:37:52,050 --> 00:37:54,570
things about our spec is you'll get

00:37:53,100 --> 00:37:56,160
actually like a summary of errors I

00:37:54,570 --> 00:38:00,150
don't get us some rivera's ice can i

00:37:56,160 --> 00:38:03,810
scan the output which forces me to have

00:38:00,150 --> 00:38:08,970
a lot smaller files files with a lot

00:38:03,810 --> 00:38:11,220
less test content and the difference

00:38:08,970 --> 00:38:13,560
here the key difference and the thing

00:38:11,220 --> 00:38:16,110
that I think that I like to do and what

00:38:13,560 --> 00:38:21,660
I found helps me even more somebody who

00:38:16,110 --> 00:38:25,470
thinks they can design quite well by

00:38:21,660 --> 00:38:31,560
moving tests out of bye bye bye bye bye

00:38:25,470 --> 00:38:35,970
not encouraging encapsulation I found

00:38:31,560 --> 00:38:37,560
that a key thing that you tend to see

00:38:35,970 --> 00:38:39,600
with test driven a lot the test from

00:38:37,560 --> 00:38:42,000
developing a lot you'll find code that

00:38:39,600 --> 00:38:44,070
you're using only for the test starts to

00:38:42,000 --> 00:38:47,490
make sense for the actual production

00:38:44,070 --> 00:38:50,970
code and if you're not seeing that every

00:38:47,490 --> 00:38:52,920
now and then there's you're probably

00:38:50,970 --> 00:38:55,890
working with the framework and that

00:38:52,920 --> 00:38:57,810
framework gives you blanks to fill in

00:38:55,890 --> 00:39:01,860
where you're not really discovering

00:38:57,810 --> 00:39:03,900
design but often when you're not working

00:39:01,860 --> 00:39:05,130
with constraints and you've got to work

00:39:03,900 --> 00:39:07,500
through things on your own you're

00:39:05,130 --> 00:39:11,340
building something new you'll find that

00:39:07,500 --> 00:39:13,860
you've got code that is in the test but

00:39:11,340 --> 00:39:15,810
seems to be germane to the object or the

00:39:13,860 --> 00:39:20,370
class of the module you work with so

00:39:15,810 --> 00:39:24,810
this is how proof works you put a module

00:39:20,370 --> 00:39:26,910
in the namespace this module of the

00:39:24,810 --> 00:39:29,180
classroo testing this module is called

00:39:26,910 --> 00:39:29,180
proof

00:39:37,290 --> 00:39:46,050
and when that line seven is found is

00:39:42,030 --> 00:39:47,910
executed actually when line five is

00:39:46,050 --> 00:39:51,630
executed I've monkey patch object which

00:39:47,910 --> 00:39:54,060
everybody knows is perfectly fine lace

00:39:51,630 --> 00:39:55,200
them up monkey patching colonel oh no

00:39:54,060 --> 00:39:57,630
that might be the right way now I'm

00:39:55,200 --> 00:40:00,510
scared so I monkey patch optic my

00:39:57,630 --> 00:40:02,790
apologies add the proof method when the

00:40:00,510 --> 00:40:04,500
proof method is executed it looks for an

00:40:02,790 --> 00:40:07,770
inner module called proof inside the

00:40:04,500 --> 00:40:09,720
thing you're testing extends the thing

00:40:07,770 --> 00:40:12,270
you're testing by that and avails for

00:40:09,720 --> 00:40:14,430
you these methods and the critical thing

00:40:12,270 --> 00:40:19,220
about these methods is not to do

00:40:14,430 --> 00:40:19,220
something like this

00:40:38,609 --> 00:40:48,029
which does work does work however by

00:40:45,720 --> 00:40:50,539
doing this you're not exploring the

00:40:48,029 --> 00:40:53,999
encapsulation you're dealing with

00:40:50,539 --> 00:40:55,559
primitives you're dealing not with the

00:40:53,999 --> 00:40:57,119
object interface or the abstraction

00:40:55,559 --> 00:40:59,279
you're pulling things out of the

00:40:57,119 --> 00:41:01,200
abstraction increasing the coupling the

00:40:59,279 --> 00:41:02,430
coupling surface and although and I'll

00:41:01,200 --> 00:41:05,430
say it again although that seems like a

00:41:02,430 --> 00:41:07,019
really really negligible thing after two

00:41:05,430 --> 00:41:09,960
years and you find yourself in this

00:41:07,019 --> 00:41:15,749
productivity grind the reason for that

00:41:09,960 --> 00:41:19,400
is believing that each every instance of

00:41:15,749 --> 00:41:22,170
dis encapsulation all million of them

00:41:19,400 --> 00:41:23,519
individually are irrelevant rather than

00:41:22,170 --> 00:41:26,700
saying the milli of them are in

00:41:23,519 --> 00:41:28,739
aggregate or why this project sucks now

00:41:26,700 --> 00:41:32,249
and it's usually not two years it's

00:41:28,739 --> 00:41:35,599
usually two months that's all I have

00:41:32,249 --> 00:41:35,599
thank you for listening me peach

00:42:05,220 --> 00:42:07,700

YouTube URL: https://www.youtube.com/watch?v=veYFV4maTyQ


