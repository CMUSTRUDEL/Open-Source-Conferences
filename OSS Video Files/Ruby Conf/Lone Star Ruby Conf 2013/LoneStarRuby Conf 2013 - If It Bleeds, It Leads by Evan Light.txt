Title: LoneStarRuby Conf 2013 - If It Bleeds, It Leads by Evan Light
Publication date: 2020-01-28
Playlist: Lone Star Ruby Conf 2013
Description: 
	Many of us came to Ruby by way of Rails (including yours truly about six years ago). We came because our current solutions were clumsy and inconvenient. We came because we appreciated the relative simplicity that Rails offered. And we came because we believe that change is often a good thing.

But not all changes are beneficial.

Over several blog posts, books, and a couple of years, the Rails community has begun to choose complexity over simplicity. Let's talk about why. And let's talk about how we can try to recapture that simplicity that we so once adored.

Help us caption & translate this video!

http://amara.org/v/FG8f/
Captions: 
	00:00:14,580 --> 00:00:19,170
well I guess I'll do my own introduction

00:00:16,619 --> 00:00:21,330
because I maliciously didn't give them a

00:00:19,170 --> 00:00:22,770
lead or bio for me or whatever and

00:00:21,330 --> 00:00:25,140
that's fine i hate it when people do

00:00:22,770 --> 00:00:27,300
interest for me so if you hadn't guessed

00:00:25,140 --> 00:00:28,680
my name is allen's Corkins evan lights

00:00:27,300 --> 00:00:31,500
in the other room so if you meant to see

00:00:28,680 --> 00:00:33,809
Alan you want to be in here Evans over

00:00:31,500 --> 00:00:36,930
there no okay fine I'm really having

00:00:33,809 --> 00:00:37,920
light and I don't have any titles or

00:00:36,930 --> 00:00:41,010
anything because it technically I'm

00:00:37,920 --> 00:00:42,330
unemployed for two more days yay but I'm

00:00:41,010 --> 00:00:44,580
starting working for bachelor on Monday

00:00:42,330 --> 00:00:46,140
and I'll talk about that later these are

00:00:44,580 --> 00:00:47,580
all the ways you can reach me don't

00:00:46,140 --> 00:00:49,589
worry about if you're curious writing

00:00:47,580 --> 00:00:51,330
any of this stuff down because well

00:00:49,589 --> 00:00:53,640
other Denis the twitter because i'll

00:00:51,330 --> 00:00:55,979
have a link to the slides on github

00:00:53,640 --> 00:00:57,659
these are all HTML and JavaScript in the

00:00:55,979 --> 00:01:02,699
CSS just why the no frills because i

00:00:57,659 --> 00:01:04,650
suck at CSS Ruby Dee camp is an

00:01:02,699 --> 00:01:06,360
unconference that I run oh I should

00:01:04,650 --> 00:01:09,720
probably take this so i can paste them

00:01:06,360 --> 00:01:11,460
and make the whole stage collapse Ruby g

00:01:09,720 --> 00:01:13,110
camp is a conference that i run in the

00:01:11,460 --> 00:01:19,280
Northern Virginia area excuse me while I

00:01:13,110 --> 00:01:21,510
tie my shoes on talking it's a

00:01:19,280 --> 00:01:24,840
unconventional event particularly

00:01:21,510 --> 00:01:26,480
because for well for experts for

00:01:24,840 --> 00:01:28,830
intermediate people and for new folks

00:01:26,480 --> 00:01:31,740
partly because I want to knock my

00:01:28,830 --> 00:01:33,720
microphone off partly because I feel

00:01:31,740 --> 00:01:35,850
like events like this don't nest aren't

00:01:33,720 --> 00:01:38,370
necessarily the best environment for

00:01:35,850 --> 00:01:40,530
learning conferences I feel are good for

00:01:38,370 --> 00:01:43,980
to get an introduction a very brief

00:01:40,530 --> 00:01:46,590
survey I like depth of conversation I

00:01:43,980 --> 00:01:48,810
like to learn a lot and decamp focuses

00:01:46,590 --> 00:01:50,220
on conversation and drilling down in the

00:01:48,810 --> 00:01:53,040
topics not so much one of the many

00:01:50,220 --> 00:01:54,840
dialogues as many too many dialogues but

00:01:53,040 --> 00:01:56,370
it's a small event so we're full this

00:01:54,840 --> 00:01:57,630
year so I'm counting you by telling you

00:01:56,370 --> 00:02:01,500
about deke Hamptons you can't attend

00:01:57,630 --> 00:02:03,510
anyway sorry um p have any questions

00:02:01,500 --> 00:02:06,840
about it you can google and see more so

00:02:03,510 --> 00:02:08,909
this talk well this isn't exactly where

00:02:06,840 --> 00:02:11,370
it started but before I really begin if

00:02:08,909 --> 00:02:15,120
you get anything from this talk it's

00:02:11,370 --> 00:02:17,190
read that damn book okay patterns of

00:02:15,120 --> 00:02:19,349
enterprise application architecture you

00:02:17,190 --> 00:02:21,750
my permission to write that down now by

00:02:19,349 --> 00:02:24,780
martin fowler read the damn book now

00:02:21,750 --> 00:02:26,459
i'll tell you why first I'll tell you

00:02:24,780 --> 00:02:28,470
where this talk came from this is where

00:02:26,459 --> 00:02:31,740
that talk came from this is a

00:02:28,470 --> 00:02:35,100
little guy long hair of studded belt

00:02:31,740 --> 00:02:36,480
named Abdul keeps running around here he

00:02:35,100 --> 00:02:39,350
likes to talk about how we should be

00:02:36,480 --> 00:02:43,200
doing a lot more oo in rails and

00:02:39,350 --> 00:02:44,880
especially he's been touting how where

00:02:43,200 --> 00:02:47,220
he's one of the people who talks how we

00:02:44,880 --> 00:02:49,320
should be using plain old Ruby objects

00:02:47,220 --> 00:02:51,960
for our model and we shouldn't be using

00:02:49,320 --> 00:02:53,490
active record and this drove me crazy

00:02:51,960 --> 00:02:54,720
and that's where most of my talk topics

00:02:53,490 --> 00:02:56,850
come from her things that pissed me off

00:02:54,720 --> 00:02:58,290
that I want to talk about so that's how

00:02:56,850 --> 00:03:01,830
we got to this one there'll be a lot

00:02:58,290 --> 00:03:03,720
more on this so um that slide said

00:03:01,830 --> 00:03:05,070
loosely couple all the things how many

00:03:03,720 --> 00:03:08,160
of you were in here for Scott Bell where

00:03:05,070 --> 00:03:09,300
is pretty awesome talk what are like a

00:03:08,160 --> 00:03:12,240
third shoot I wish there was more

00:03:09,300 --> 00:03:14,160
carryover so for those of you who aren't

00:03:12,240 --> 00:03:16,860
familiar we'll talk very briefly about

00:03:14,160 --> 00:03:20,100
coupling so this is a very simple

00:03:16,860 --> 00:03:21,690
example of tight coupling and I'm doing

00:03:20,100 --> 00:03:23,430
it by example and we can talk about

00:03:21,690 --> 00:03:25,890
definitions really concerned later but

00:03:23,430 --> 00:03:27,300
in this case we have this user control

00:03:25,890 --> 00:03:29,940
area even have the nifty laser pointer

00:03:27,300 --> 00:03:32,700
the user controller refers to the user

00:03:29,940 --> 00:03:34,350
model directly it is tightly coupled to

00:03:32,700 --> 00:03:37,260
it the user controller depends on the

00:03:34,350 --> 00:03:40,160
user model in this example as I

00:03:37,260 --> 00:03:42,600
mentioned hyperbole eyes we inject

00:03:40,160 --> 00:03:44,070
dependency inject or inversion of

00:03:42,600 --> 00:03:47,730
control depending that you want to call

00:03:44,070 --> 00:03:49,800
it more buzz words for you we inject a

00:03:47,730 --> 00:03:52,470
finder into the user controller we

00:03:49,800 --> 00:03:54,930
inject the user in and we just are

00:03:52,470 --> 00:03:56,820
dependent on this interface so we have a

00:03:54,930 --> 00:03:59,670
weaker dependency I'd say it's a loser

00:03:56,820 --> 00:04:02,250
form of coupling and this is the sort of

00:03:59,670 --> 00:04:05,790
technique that's being advocated well

00:04:02,250 --> 00:04:07,799
across the board for rails and generally

00:04:05,790 --> 00:04:09,840
I think this coupling is a good idea but

00:04:07,799 --> 00:04:11,790
not necessarily with rails again more on

00:04:09,840 --> 00:04:15,049
that as we progress first a history

00:04:11,790 --> 00:04:17,250
lesson because I've been programming for

00:04:15,049 --> 00:04:18,780
well you can look at the beard I got a

00:04:17,250 --> 00:04:22,620
lot of gray hairs I'm appropriate for

00:04:18,780 --> 00:04:24,990
various 17 18 years now and I did about

00:04:22,620 --> 00:04:29,970
nine of those in this language I'm sorry

00:04:24,990 --> 00:04:31,919
forgive me java and 1995 it was great

00:04:29,970 --> 00:04:35,430
and then enterprise javabeans came along

00:04:31,919 --> 00:04:37,440
in 1999 at the time hey we all thought

00:04:35,430 --> 00:04:39,960
it was great because there was so much

00:04:37,440 --> 00:04:41,849
manual labor on anything server-side

00:04:39,960 --> 00:04:44,699
before d jbjb gave you

00:04:41,849 --> 00:04:46,740
this framework where if you just write

00:04:44,699 --> 00:04:53,909
lots and lots of XML you don't have to

00:04:46,740 --> 00:04:55,439
write very much code so it's a case a

00:04:53,909 --> 00:04:59,219
managed service I component architecture

00:04:55,439 --> 00:05:01,770
which basically means lots of XML in

00:04:59,219 --> 00:05:03,509
2002 this crazy thing called the spring

00:05:01,770 --> 00:05:07,169
framework oh I'd better not move my left

00:05:03,509 --> 00:05:10,259
hand there came along and that is an

00:05:07,169 --> 00:05:11,789
inversion of control based framework so

00:05:10,259 --> 00:05:15,599
we talked about loose coupling a little

00:05:11,789 --> 00:05:17,969
earlier where you inject things into

00:05:15,599 --> 00:05:20,189
other things you don't have hardwired

00:05:17,969 --> 00:05:25,139
dependencies and everything is connect

00:05:20,189 --> 00:05:28,679
together via more XML but this was

00:05:25,139 --> 00:05:32,449
actually an improvement over ejb but

00:05:28,679 --> 00:05:35,550
still XML so it was shortly after that

00:05:32,449 --> 00:05:36,749
that I guess Java development or server

00:05:35,550 --> 00:05:38,309
side java development became more

00:05:36,749 --> 00:05:40,439
commoditized more people got into it

00:05:38,309 --> 00:05:42,360
perhaps as it got a little more sane

00:05:40,439 --> 00:05:45,509
although people were really jumping on

00:05:42,360 --> 00:05:48,180
board with the the gate to eega be

00:05:45,509 --> 00:05:50,369
bandwagon the one thing that that Java

00:05:48,180 --> 00:05:52,379
had going for it still does is the

00:05:50,369 --> 00:05:55,550
massive marketing machine of then son

00:05:52,379 --> 00:05:59,849
Oracle and all the money had behind it

00:05:55,550 --> 00:06:01,499
so in 2005 neglected in 2003 so we saw a

00:05:59,849 --> 00:06:04,129
lot more developers we saw a lot of

00:06:01,499 --> 00:06:07,459
people overseas doing Java development

00:06:04,129 --> 00:06:09,599
there was a lot of demand but I guess he

00:06:07,459 --> 00:06:11,189
rates started to go down or develop

00:06:09,599 --> 00:06:13,079
developers warrant was appreciated as

00:06:11,189 --> 00:06:14,969
much there was more standardization

00:06:13,079 --> 00:06:16,349
though standardization is generally good

00:06:14,969 --> 00:06:19,649
thing if you want reliable predictable

00:06:16,349 --> 00:06:22,050
code but what I started to see was you

00:06:19,649 --> 00:06:23,639
had a lot of really smart people like if

00:06:22,050 --> 00:06:24,869
any of you have heard of relevance Inc

00:06:23,639 --> 00:06:28,769
in North Carolina almost an entire

00:06:24,869 --> 00:06:29,999
company now is doing well Wow yeah right

00:06:28,769 --> 00:06:32,879
they started doing rails back then

00:06:29,999 --> 00:06:35,879
ironically and then this you know guy

00:06:32,879 --> 00:06:38,279
named Dave Thomas the the preg book the

00:06:35,879 --> 00:06:40,139
pickaxe got popular and then the the

00:06:38,279 --> 00:06:43,919
rails book came out then everyone

00:06:40,139 --> 00:06:45,569
started doing rails well ironically

00:06:43,919 --> 00:06:47,550
we're starting to follow that trend I

00:06:45,569 --> 00:06:50,009
think with Ruby with rails especially

00:06:47,550 --> 00:06:53,639
and I noticed some things that I

00:06:50,009 --> 00:06:54,729
considered to be predictors for that

00:06:53,639 --> 00:06:59,770
switch

00:06:54,729 --> 00:07:02,710
that in the Java ecology there were I

00:06:59,770 --> 00:07:05,830
don't know 10 15 20 different gem gem

00:07:02,710 --> 00:07:06,939
sorry jars libraries to do the same

00:07:05,830 --> 00:07:09,669
thing and a lot of them would be good

00:07:06,939 --> 00:07:11,949
some of them would be terrible but how

00:07:09,669 --> 00:07:13,059
would you know which ones were which and

00:07:11,949 --> 00:07:14,830
then they developed a loose coupling

00:07:13,059 --> 00:07:17,919
fixation and remember i said this

00:07:14,830 --> 00:07:20,259
coupling is a good thing but the java

00:07:17,919 --> 00:07:23,110
community became very obsessed with it

00:07:20,259 --> 00:07:24,370
and it made some of us at least me and I

00:07:23,110 --> 00:07:26,680
know other people and they saw spring

00:07:24,370 --> 00:07:28,599
they thought oh that's horrible but

00:07:26,680 --> 00:07:33,309
there's some virtues to it and yet it

00:07:28,599 --> 00:07:35,169
chased a lot of us away so I'm gonna ask

00:07:33,309 --> 00:07:38,680
you to consider where D where's rails

00:07:35,169 --> 00:07:40,599
now because rails is about 10 years old

00:07:38,680 --> 00:07:42,159
I'm getting a little ahead there rails

00:07:40,599 --> 00:07:43,960
is about 10 years old which is about it

00:07:42,159 --> 00:07:46,169
where Java was when I jump ship and I

00:07:43,960 --> 00:07:49,809
saw a lot of other people jumping ship

00:07:46,169 --> 00:07:51,819
so rails is good for making small

00:07:49,809 --> 00:07:56,379
developing small apps go really really

00:07:51,819 --> 00:08:00,189
fast note small not large apps not

00:07:56,379 --> 00:08:01,839
enterprise apps and it makes development

00:08:00,189 --> 00:08:03,669
fast as I'm sure a lot of you know I

00:08:01,839 --> 00:08:05,529
didn't I want to ask before i go much

00:08:03,669 --> 00:08:08,229
further how many of you do rails for a

00:08:05,529 --> 00:08:10,539
living gee funny that's almost every

00:08:08,229 --> 00:08:14,199
hand in the room sorry keep your hands

00:08:10,539 --> 00:08:19,539
up for a second out of well i said how

00:08:14,199 --> 00:08:21,669
many of you do just plain Ruby okay and

00:08:19,539 --> 00:08:23,589
that's very very very few right a

00:08:21,669 --> 00:08:28,389
minority and by the way that's soon

00:08:23,589 --> 00:08:29,770
going to be me so rails goes a lot

00:08:28,389 --> 00:08:32,199
faster as I'm sure a lot of you already

00:08:29,770 --> 00:08:36,219
know then be a selective tight coupling

00:08:32,199 --> 00:08:38,409
and then constraining around the first

00:08:36,219 --> 00:08:39,729
eighty percent of what's common in web

00:08:38,409 --> 00:08:41,709
development and the problems that we

00:08:39,729 --> 00:08:45,069
usually solve so some examples of that

00:08:41,709 --> 00:08:47,649
would be how we get mappings for free

00:08:45,069 --> 00:08:49,630
from the model to the controller or

00:08:47,649 --> 00:08:52,180
sorry from the well actually sorry from

00:08:49,630 --> 00:08:54,010
the controller to the template and how

00:08:52,180 --> 00:08:56,290
we get the metadata mapping from active

00:08:54,010 --> 00:08:58,690
records the database and these things

00:08:56,290 --> 00:08:59,889
make our development go a lot faster but

00:08:58,690 --> 00:09:01,120
what about the remaining twenty percent

00:08:59,889 --> 00:09:03,160
what about some of the harder problems

00:09:01,120 --> 00:09:05,529
we have to deal with like we want to

00:09:03,160 --> 00:09:08,320
split our apps into two or just simply

00:09:05,529 --> 00:09:10,720
our models get too big too complex

00:09:08,320 --> 00:09:13,660
how about some kind of guide for how we

00:09:10,720 --> 00:09:17,380
just had to help our design of our

00:09:13,660 --> 00:09:19,600
domain so this is where we get in today

00:09:17,380 --> 00:09:20,860
and a heuristic problem this is not

00:09:19,600 --> 00:09:24,970
something that can be solved by

00:09:20,860 --> 00:09:28,300
automation now it's God's here that it's

00:09:24,970 --> 00:09:29,740
a problem that is very driven the

00:09:28,300 --> 00:09:33,190
solution is very driven by expertise

00:09:29,740 --> 00:09:35,530
trial and error and now anecdotes suck

00:09:33,190 --> 00:09:38,200
as evidence so I did a lot of research

00:09:35,530 --> 00:09:39,670
the slides might not look like much to

00:09:38,200 --> 00:09:41,320
you but I spent I don't know 60 or 80

00:09:39,670 --> 00:09:44,520
hours in this presentation is almost all

00:09:41,320 --> 00:09:47,200
about the content is again I suck at CSS

00:09:44,520 --> 00:09:49,930
but the way I see it in the rails

00:09:47,200 --> 00:09:52,960
community now we are living in a time a

00:09:49,930 --> 00:09:55,210
lot like java SE in 2005 that we now

00:09:52,960 --> 00:09:57,660
have an overabundance of options for

00:09:55,210 --> 00:10:00,520
take for example if you want to add

00:09:57,660 --> 00:10:01,840
authentication to your app if you're an

00:10:00,520 --> 00:10:04,030
experienced rails developer you can

00:10:01,840 --> 00:10:05,740
probably easily think of 7 or 10

00:10:04,030 --> 00:10:09,430
different solutions and they're probably

00:10:05,740 --> 00:10:12,220
even more popular ones than that so how

00:10:09,430 --> 00:10:13,720
do you choose so that quickly brought me

00:10:12,220 --> 00:10:14,950
that got me to think about this book

00:10:13,720 --> 00:10:16,420
that I'd heard of turns out it was

00:10:14,950 --> 00:10:19,150
actually written in the mid-90s called

00:10:16,420 --> 00:10:20,290
the paradox of choice so I actually read

00:10:19,150 --> 00:10:23,620
a fair amount of that in researching

00:10:20,290 --> 00:10:25,090
this and I found a few pivi anecdotes in

00:10:23,620 --> 00:10:26,560
there so this one's using wells

00:10:25,090 --> 00:10:30,310
especially difficult we're trying to

00:10:26,560 --> 00:10:32,470
make the best choices Schwartz also

00:10:30,310 --> 00:10:35,100
talks about a term called satisficing

00:10:32,470 --> 00:10:37,990
that is that we have different criterias

00:10:35,100 --> 00:10:40,780
we operate from different criterias of

00:10:37,990 --> 00:10:42,640
what satisfies our need there are some

00:10:40,780 --> 00:10:45,040
people who are more perfection driven

00:10:42,640 --> 00:10:45,970
who want to explore all the options and

00:10:45,040 --> 00:10:48,040
then there are some people who are

00:10:45,970 --> 00:10:50,760
willing to compromise and just look at a

00:10:48,040 --> 00:10:53,020
very small subset and very quickly pick

00:10:50,760 --> 00:10:55,840
that's dangerous when you have an awful

00:10:53,020 --> 00:10:57,130
lot of choices the latter but it's very

00:10:55,840 --> 00:10:59,020
easy to fall into that because if you go

00:10:57,130 --> 00:11:00,400
for perfection you probably get end up

00:10:59,020 --> 00:11:04,420
very frustrated and spent a lot of time

00:11:00,400 --> 00:11:06,070
and money and the next we'd be better

00:11:04,420 --> 00:11:07,840
off if we embraced certain voluntary

00:11:06,070 --> 00:11:09,640
constraints on our freedom of choice

00:11:07,840 --> 00:11:12,810
instead of rebelling against them this

00:11:09,640 --> 00:11:15,490
isn't a reference to the NSA I'm

00:11:12,810 --> 00:11:17,800
actually here talking a little bit more

00:11:15,490 --> 00:11:19,870
about where what rails introduced us to

00:11:17,800 --> 00:11:21,700
convention based a convention based

00:11:19,870 --> 00:11:23,660
approach to development

00:11:21,700 --> 00:11:24,800
granted some of you might already seen

00:11:23,660 --> 00:11:26,720
something like that with Objective C

00:11:24,800 --> 00:11:30,500
protocols before but rails really made

00:11:26,720 --> 00:11:34,250
this a lot more popular so in terms of

00:11:30,500 --> 00:11:36,140
choosing schwarz also noted citing

00:11:34,250 --> 00:11:38,150
studies i'm sorry i'm not going to cite

00:11:36,140 --> 00:11:41,660
them in them and the slides but you can

00:11:38,150 --> 00:11:45,650
go read the book that we are prone well

00:11:41,660 --> 00:11:49,400
to choosing badly that is that probably

00:11:45,650 --> 00:11:51,560
do the evolution that we use available

00:11:49,400 --> 00:11:54,380
information of reliable information for

00:11:51,560 --> 00:11:57,200
example you might trust Steve klavik of

00:11:54,380 --> 00:11:58,640
the Katrina Owen for example you might

00:11:57,200 --> 00:11:59,930
trust them an awful lot but maybe they

00:11:58,640 --> 00:12:02,800
haven't blogged about some particular

00:11:59,930 --> 00:12:05,600
topic or another / reliable information

00:12:02,800 --> 00:12:08,390
they considering them reliable they're

00:12:05,600 --> 00:12:10,520
experts and that we tend to trust near

00:12:08,390 --> 00:12:12,050
sources over trusted sources so say you

00:12:10,520 --> 00:12:14,840
have a corker sitting at the desk next

00:12:12,050 --> 00:12:16,970
to you and Auggie's written a blog post

00:12:14,840 --> 00:12:18,620
about something they're still a very

00:12:16,970 --> 00:12:19,850
strong likelihood despite being rational

00:12:18,620 --> 00:12:21,770
beings that you're probably going to go

00:12:19,850 --> 00:12:24,110
with through less expert co-worker

00:12:21,770 --> 00:12:25,760
sitting next to you then the blog post

00:12:24,110 --> 00:12:26,840
that might sound crazy but just

00:12:25,760 --> 00:12:27,890
something to think about next time

00:12:26,840 --> 00:12:29,060
you're trying to make a choice and

00:12:27,890 --> 00:12:30,830
you're going to ask a colleague and

00:12:29,060 --> 00:12:33,860
there's available information that says

00:12:30,830 --> 00:12:36,290
to the contrary we're also surprisingly

00:12:33,860 --> 00:12:37,850
vulnerable to effective advertising and

00:12:36,290 --> 00:12:39,260
this is probably something of a

00:12:37,850 --> 00:12:40,910
no-brainer right but you probably also

00:12:39,260 --> 00:12:42,110
have that naive belief like I do that

00:12:40,910 --> 00:12:44,780
you're not affected by advertisements

00:12:42,110 --> 00:12:46,880
that much and then think about some of

00:12:44,780 --> 00:12:48,260
the more clever advertising the CC on TV

00:12:46,880 --> 00:12:50,320
and how much more often you at least

00:12:48,260 --> 00:12:53,330
notice and are aware of a product

00:12:50,320 --> 00:12:58,430
possibly as a result I mention this

00:12:53,330 --> 00:13:00,140
because I think that's us that we're

00:12:58,430 --> 00:13:02,090
obsessed with new things people in this

00:13:00,140 --> 00:13:05,390
community maybe less so than we used to

00:13:02,090 --> 00:13:06,980
be because this communities more mature

00:13:05,390 --> 00:13:09,800
dare I say now that we've been around

00:13:06,980 --> 00:13:13,220
almost ten years that we're obsessed

00:13:09,800 --> 00:13:15,890
with new and Alan Kay has this wonderful

00:13:13,220 --> 00:13:19,790
quote that anything that grows faster

00:13:15,890 --> 00:13:24,260
than education becomes a pop culture so

00:13:19,790 --> 00:13:27,380
what's our pop culture I'd contend that

00:13:24,260 --> 00:13:29,900
it's things like this these are patterns

00:13:27,380 --> 00:13:31,400
and every one of them each one of these

00:13:29,900 --> 00:13:32,870
is a link that's why it's red so you can

00:13:31,400 --> 00:13:33,769
click on these later if you want when I

00:13:32,870 --> 00:13:35,329
put them online

00:13:33,769 --> 00:13:36,829
and then there's a gem that goes with

00:13:35,329 --> 00:13:38,959
each one of them there didn't used to be

00:13:36,829 --> 00:13:42,499
one for DCI that now has a gem yeah more

00:13:38,959 --> 00:13:48,290
automation Scott to get his head in his

00:13:42,499 --> 00:13:54,709
hands or another example I'll let this

00:13:48,290 --> 00:14:00,799
one speak for itself which leads me to

00:13:54,709 --> 00:14:01,790
the title of this talk so we're going to

00:14:00,799 --> 00:14:03,110
talk about patterns if you hadn't

00:14:01,790 --> 00:14:04,339
guessed because I told you to read that

00:14:03,110 --> 00:14:06,410
damn book patterns of enterprise

00:14:04,339 --> 00:14:09,980
application architecture read it thank

00:14:06,410 --> 00:14:12,790
you so patterns are exemplars and in

00:14:09,980 --> 00:14:14,959
reaching for how we come to patterns

00:14:12,790 --> 00:14:16,459
granted there are books on this and I

00:14:14,959 --> 00:14:19,069
didn't have time to read those but I saw

00:14:16,459 --> 00:14:20,809
a few different steps involved when we

00:14:19,069 --> 00:14:23,179
identify some practice that we perform

00:14:20,809 --> 00:14:26,239
routinely to we decide that we're going

00:14:23,179 --> 00:14:29,239
to give it some kind of nomenclature but

00:14:26,239 --> 00:14:30,679
then we get to Scott's favorite if it

00:14:29,239 --> 00:14:31,879
can be imitated it can be automated for

00:14:30,679 --> 00:14:35,119
those of you who aren't here automation

00:14:31,879 --> 00:14:37,399
can be a bad thing this is we create the

00:14:35,119 --> 00:14:38,959
tool a tool from the pattern then we use

00:14:37,399 --> 00:14:40,399
it to when we figure out how best to use

00:14:38,959 --> 00:14:43,839
the tool and this is maybe where we fall

00:14:40,399 --> 00:14:46,910
down that we become limited by the tools

00:14:43,839 --> 00:14:48,740
then once we find what we don't like

00:14:46,910 --> 00:14:54,319
about the tool because the tools limited

00:14:48,740 --> 00:14:57,369
us let me go back to step one so rails

00:14:54,319 --> 00:14:59,660
is made of patterns as it turns out and

00:14:57,369 --> 00:15:01,459
perhaps not so ironically every single

00:14:59,660 --> 00:15:03,649
one of these is in patterns of

00:15:01,459 --> 00:15:04,790
enterprise application architecture by

00:15:03,649 --> 00:15:07,399
the way that book came out one year

00:15:04,790 --> 00:15:11,149
before rails I've never heard ehh say

00:15:07,399 --> 00:15:15,740
that poea a informed rails but I'll be

00:15:11,149 --> 00:15:17,629
damned if it didn't so where did all

00:15:15,740 --> 00:15:19,850
these patterns that I cited earlier come

00:15:17,629 --> 00:15:25,490
from must have been him step 5 what's

00:15:19,850 --> 00:15:27,709
wrong with rails so let's talk about

00:15:25,490 --> 00:15:30,290
more martin fowler because we can't get

00:15:27,709 --> 00:15:32,329
enough martin fowler refactoring tends

00:15:30,290 --> 00:15:33,980
to break small objects or big objects re

00:15:32,329 --> 00:15:36,980
into smaller objects big methods in the

00:15:33,980 --> 00:15:42,350
smaller ones and in direction is a

00:15:36,980 --> 00:15:44,089
two-edged sword but it can also make it

00:15:42,350 --> 00:15:46,009
can make your programs harder to read as

00:15:44,089 --> 00:15:48,279
you end up delegating objects a delegate

00:15:46,009 --> 00:15:51,740
to objects to delegate the objects

00:15:48,279 --> 00:15:53,930
or as a friend of mine brian hogan said

00:15:51,740 --> 00:15:56,180
refactoring the patterns can be better

00:15:53,930 --> 00:15:59,240
than just starting with them over

00:15:56,180 --> 00:16:01,190
designing to borrow a little bit from

00:15:59,240 --> 00:16:02,720
Leonard bones McCoy for those of you are

00:16:01,190 --> 00:16:05,170
old enough to remember the original Star

00:16:02,720 --> 00:16:07,790
Trek movie Thank You Cory for smiling I

00:16:05,170 --> 00:16:11,149
know engineers they love to change

00:16:07,790 --> 00:16:13,819
things now let's get specific let's talk

00:16:11,149 --> 00:16:16,130
about active record note that's active

00:16:13,819 --> 00:16:18,589
record with a space not active record

00:16:16,130 --> 00:16:21,199
without the space with the space we're

00:16:18,589 --> 00:16:22,819
talking about a pattern that's described

00:16:21,199 --> 00:16:25,759
in patterns of enterprise application

00:16:22,819 --> 00:16:27,290
architecture and without the space we're

00:16:25,759 --> 00:16:28,730
talking about the library that thing

00:16:27,290 --> 00:16:32,360
that you guys probably use all the time

00:16:28,730 --> 00:16:33,860
in your day to day job so this is what

00:16:32,360 --> 00:16:35,630
I've d and a lot of other people are

00:16:33,860 --> 00:16:39,470
saying we should be doing now this thing

00:16:35,630 --> 00:16:41,209
on the left is a person model will say

00:16:39,470 --> 00:16:44,060
it's a domain model object this thing on

00:16:41,209 --> 00:16:46,490
the right well that would be active

00:16:44,060 --> 00:16:49,370
record but that's not active record

00:16:46,490 --> 00:16:51,199
there's a pattern for that it's called

00:16:49,370 --> 00:16:53,019
table data gateway and it's in patterns

00:16:51,199 --> 00:16:56,360
of enterprise application architecture

00:16:53,019 --> 00:16:57,740
seeing a trend here yet so don't bother

00:16:56,360 --> 00:17:01,449
reading this whole paragraph let's just

00:16:57,740 --> 00:17:01,449
focus on a couple of sentences here

00:17:02,050 --> 00:17:08,179
these couple sentences if the mapping is

00:17:04,730 --> 00:17:11,030
simple active record is adequate if the

00:17:08,179 --> 00:17:12,709
mapping is complex data mapper another

00:17:11,030 --> 00:17:15,799
pattern we'll talk about it works better

00:17:12,709 --> 00:17:21,289
simple complex I guess that's probably

00:17:15,799 --> 00:17:22,970
arista cause though datamapper this is a

00:17:21,289 --> 00:17:24,439
data mapper pattern i just mentioned we

00:17:22,970 --> 00:17:26,959
have a domain model object on the right

00:17:24,439 --> 00:17:28,789
it has behavior it has properties and we

00:17:26,959 --> 00:17:30,919
have a mapper in the middle we'll talk

00:17:28,789 --> 00:17:33,140
about what a mapper is in a database on

00:17:30,919 --> 00:17:35,960
the right side well the mappers purpose

00:17:33,140 --> 00:17:38,690
is to provide a separation between the

00:17:35,960 --> 00:17:40,520
database and your domain model that is

00:17:38,690 --> 00:17:43,429
its responsible for all the persistence

00:17:40,520 --> 00:17:45,320
and all the data look up and it creates

00:17:43,429 --> 00:17:46,820
your domain model objects when you're

00:17:45,320 --> 00:17:48,260
fetching data from the database and it

00:17:46,820 --> 00:17:50,059
persists them to the database when you

00:17:48,260 --> 00:17:52,370
need to store them that way your domain

00:17:50,059 --> 00:17:53,900
model object can be entirely ignorant of

00:17:52,370 --> 00:17:56,000
how it's being stored sounds great right

00:17:53,900 --> 00:17:57,980
that sounds like exactly what abdi was

00:17:56,000 --> 00:17:59,330
talking about before turns out you can

00:17:57,980 --> 00:18:00,620
use a table data gateway to help

00:17:59,330 --> 00:18:02,590
implement a data mapper hey

00:18:00,620 --> 00:18:04,850
we're mixing and matching patterns now

00:18:02,590 --> 00:18:07,580
so there's this thing called data mapper

00:18:04,850 --> 00:18:10,420
note there's no space that is not the

00:18:07,580 --> 00:18:13,430
same thing as data mapper with the space

00:18:10,420 --> 00:18:15,680
data mapper with no space is a gem data

00:18:13,430 --> 00:18:17,270
mapper witness space is a pattern let's

00:18:15,680 --> 00:18:19,340
make it more confusing data mapper

00:18:17,270 --> 00:18:24,320
without a space is a gem that's actually

00:18:19,340 --> 00:18:25,490
an active record with the space but so

00:18:24,320 --> 00:18:26,930
I'll ask you can we use it data I'm

00:18:25,490 --> 00:18:28,850
going to use an active record to make a

00:18:26,930 --> 00:18:32,030
active record library to use a data

00:18:28,850 --> 00:18:42,559
mapper with space well I'll let you read

00:18:32,030 --> 00:18:43,790
that there we go so the only entry you

00:18:42,559 --> 00:18:45,350
see this thing called the repository

00:18:43,790 --> 00:18:46,820
pattern also in patterns of enterprise

00:18:45,350 --> 00:18:48,410
application architecture this is a

00:18:46,820 --> 00:18:50,780
another one I've heard people float

00:18:48,410 --> 00:18:54,110
around a lot lately and repository

00:18:50,780 --> 00:18:56,300
pattern is sort it can use a data mapper

00:18:54,110 --> 00:18:58,910
and active in here it would use an

00:18:56,300 --> 00:19:01,100
active record like a really weak data

00:18:58,910 --> 00:19:05,030
mapper so you have this repository

00:19:01,100 --> 00:19:06,440
facade here which which accepts queries

00:19:05,030 --> 00:19:08,090
you can expose all kinds of different

00:19:06,440 --> 00:19:11,090
queries on it it's a little bit like the

00:19:08,090 --> 00:19:12,770
table data gateway but it uses it uses

00:19:11,090 --> 00:19:14,420
something else behind an in-memory

00:19:12,770 --> 00:19:17,030
strategy that could be your data mapper

00:19:14,420 --> 00:19:19,490
your active record from that it

00:19:17,030 --> 00:19:20,540
generates your domain model object so I

00:19:19,490 --> 00:19:21,890
guess you could say it's just yet

00:19:20,540 --> 00:19:24,470
another layer of abstraction which you

00:19:21,890 --> 00:19:27,230
may or may not need but there's a gem

00:19:24,470 --> 00:19:28,880
for this also really a very simple one

00:19:27,230 --> 00:19:30,830
not hard to read there's a link for it

00:19:28,880 --> 00:19:32,059
so it's pretty clean I thought it was

00:19:30,830 --> 00:19:35,000
sort of a step in the right direction I

00:19:32,059 --> 00:19:36,620
played with it a little bit so what you

00:19:35,000 --> 00:19:38,030
do if you wanted to use the EDR gem

00:19:36,620 --> 00:19:40,130
which stands for entity data

00:19:38,030 --> 00:19:43,880
relationship incidentally it's kind of

00:19:40,130 --> 00:19:45,170
irrelevant your active record it works

00:19:43,880 --> 00:19:47,690
based on naming convention bears

00:19:45,170 --> 00:19:50,870
mentioning that you have an order data

00:19:47,690 --> 00:19:53,600
active record class then you have an

00:19:50,870 --> 00:19:56,240
order domain model object so that's the

00:19:53,600 --> 00:19:57,860
naming convention if you have in a foo

00:19:56,240 --> 00:20:01,580
domain model object you have to have a

00:19:57,860 --> 00:20:02,570
foo data active record object now the

00:20:01,580 --> 00:20:05,390
one thing that makes me really

00:20:02,570 --> 00:20:08,150
uncomfortable about this is lines two

00:20:05,390 --> 00:20:09,650
through four that EVR has this problem

00:20:08,150 --> 00:20:12,890
where if you want to have an association

00:20:09,650 --> 00:20:14,419
that you need to actually you have to

00:20:12,890 --> 00:20:16,519
have your model be aware

00:20:14,419 --> 00:20:17,749
that interacts with a repository and at

00:20:16,519 --> 00:20:20,299
that point I feel like the framework

00:20:17,749 --> 00:20:21,950
failed because now your domain model is

00:20:20,299 --> 00:20:24,399
dependent on something outside of the

00:20:21,950 --> 00:20:26,720
domain model and that's kind of a bummer

00:20:24,399 --> 00:20:28,879
and then you have a repository which is

00:20:26,720 --> 00:20:30,739
really mostly declarative and then as I

00:20:28,879 --> 00:20:31,970
was mentioning here on like lines 5

00:20:30,739 --> 00:20:34,730
through 7 you're just arbitrarily

00:20:31,970 --> 00:20:36,169
exposing a another query which is then

00:20:34,730 --> 00:20:40,720
going to go to active record go to the

00:20:36,169 --> 00:20:42,859
order data class so sorry that's the

00:20:40,720 --> 00:20:44,570
domain model object that's just a perot

00:20:42,859 --> 00:20:46,070
plain old Ruby object and I'll actually

00:20:44,570 --> 00:20:48,950
mention that more often so thanks for

00:20:46,070 --> 00:20:50,809
asking it's a plain old Ruby object but

00:20:48,950 --> 00:20:54,470
it has this extra method to be

00:20:50,809 --> 00:20:55,879
repository aware so sorry so line six is

00:20:54,470 --> 00:21:03,230
the placeholder for that's where the

00:20:55,879 --> 00:21:05,450
rest of your code would go because in

00:21:03,230 --> 00:21:08,440
this is representative of an order has

00:21:05,450 --> 00:21:11,480
many items so let me let me go back

00:21:08,440 --> 00:21:13,970
we've got this association here in the

00:21:11,480 --> 00:21:15,799
ordered data so all the active records

00:21:13,970 --> 00:21:18,200
aware of the relationships but the

00:21:15,799 --> 00:21:21,379
domain model well doesn't have to be

00:21:18,200 --> 00:21:22,700
aware that it has other objects but if

00:21:21,379 --> 00:21:23,899
there's an association you probably

00:21:22,700 --> 00:21:26,109
wouldnt have some kind of method for

00:21:23,899 --> 00:21:30,049
interacting with that associated thing

00:21:26,109 --> 00:21:31,279
so now but I wouldn't want that method

00:21:30,049 --> 00:21:33,109
to have to be aware that is talking

00:21:31,279 --> 00:21:35,690
repository I'd really I would personally

00:21:33,109 --> 00:21:38,960
prefer that that was just an array of

00:21:35,690 --> 00:21:44,869
stuff and not a call to a repository or

00:21:38,960 --> 00:21:46,129
a wrapper around an array so you as I

00:21:44,869 --> 00:21:48,230
was saying you probably don't want to

00:21:46,129 --> 00:21:49,789
use this gem you probably don't want to

00:21:48,230 --> 00:21:50,779
use my little hack on the gym the road

00:21:49,789 --> 00:21:52,879
either that's why I took it out of the

00:21:50,779 --> 00:21:54,830
slides but imagine your domain model to

00:21:52,879 --> 00:21:57,590
look something like this now virtus

00:21:54,830 --> 00:22:01,159
that's included here in these classes

00:21:57,590 --> 00:22:03,169
these two classes is a small gem that

00:22:01,159 --> 00:22:05,269
fell out of another project that I'm

00:22:03,169 --> 00:22:07,549
going to get to in a minute but it's a

00:22:05,269 --> 00:22:10,279
lot like active model just I find it a

00:22:07,549 --> 00:22:12,799
bit simpler and more declarative that

00:22:10,279 --> 00:22:14,539
code should be pretty easy to read but

00:22:12,799 --> 00:22:16,009
you can declare you declare your

00:22:14,539 --> 00:22:17,480
associations you declare what the types

00:22:16,009 --> 00:22:19,129
are the associations you can have

00:22:17,480 --> 00:22:21,409
validations like you would an active

00:22:19,129 --> 00:22:23,899
model this doesn't tie you to a database

00:22:21,409 --> 00:22:25,820
at all this is just saying this is what

00:22:23,899 --> 00:22:27,379
this domain model object will look like

00:22:25,820 --> 00:22:28,100
these are the properties it has and then

00:22:27,379 --> 00:22:32,059
you just put your behave

00:22:28,100 --> 00:22:33,440
you're there and you can actually make

00:22:32,059 --> 00:22:35,210
something like that work right now if

00:22:33,440 --> 00:22:36,470
you really want to using say active

00:22:35,210 --> 00:22:39,320
record but then you have to write your

00:22:36,470 --> 00:22:41,169
own data mapper and well this is a just

00:22:39,320 --> 00:22:43,669
the data mapper there's a lot more to

00:22:41,169 --> 00:22:45,380
using a data mapper when you have a

00:22:43,669 --> 00:22:48,770
complex domain model than just having a

00:22:45,380 --> 00:22:50,630
mapper and that's where rom comes in and

00:22:48,770 --> 00:22:52,780
by the way is that thank God someone's

00:22:50,630 --> 00:22:55,220
old enough you recognize that character

00:22:52,780 --> 00:22:58,100
and also nerdy enough to have read that

00:22:55,220 --> 00:23:00,880
comic book perhaps which stands for Ruby

00:22:58,100 --> 00:23:04,159
object mapper and Ruby object mapper is

00:23:00,880 --> 00:23:07,370
actually data mapper to data mapper no

00:23:04,159 --> 00:23:08,750
space it was a renaming of data mapper

00:23:07,370 --> 00:23:12,530
to which is a project that's been in the

00:23:08,750 --> 00:23:15,020
works for over a year it's being

00:23:12,530 --> 00:23:17,510
maintained or run by I should say dan

00:23:15,020 --> 00:23:20,690
cub and Peter sonica both really nice

00:23:17,510 --> 00:23:22,900
guys it's not all there but there is an

00:23:20,690 --> 00:23:26,179
awful lot of code you can just google

00:23:22,900 --> 00:23:28,820
rom RB and you should be able to find it

00:23:26,179 --> 00:23:30,740
pretty quickly it's beautiful beautiful

00:23:28,820 --> 00:23:33,409
code but it's a bit difficult to get

00:23:30,740 --> 00:23:35,360
into because it's designed so well that

00:23:33,409 --> 00:23:37,549
there's a lot of indirection which makes

00:23:35,360 --> 00:23:39,799
it a little hard to follow just kind of

00:23:37,549 --> 00:23:41,330
like Fowler was talking about but your

00:23:39,799 --> 00:23:42,770
choice is either you have God classes

00:23:41,330 --> 00:23:44,330
where you have lots of small classes so

00:23:42,770 --> 00:23:45,559
they went for smaller classes and lots

00:23:44,330 --> 00:23:48,020
of gems that interact with one another

00:23:45,559 --> 00:23:50,059
in any event they are wonderful

00:23:48,020 --> 00:23:51,830
wonderful guys they would love to have

00:23:50,059 --> 00:23:53,240
more participation in the project there

00:23:51,830 --> 00:23:54,830
is a kind of steep learning curve though

00:23:53,240 --> 00:23:56,539
but if you're willing to do it they're

00:23:54,830 --> 00:23:59,090
willing to work with you on it I would

00:23:56,539 --> 00:24:01,490
be but I'm one of those people who is

00:23:59,090 --> 00:24:02,870
leaving the rails community and going to

00:24:01,490 --> 00:24:04,070
what I proceeded to be greener fields

00:24:02,870 --> 00:24:05,950
and not working in rails anymore at all

00:24:04,070 --> 00:24:08,630
i'm just working in ruby and airline now

00:24:05,950 --> 00:24:10,730
so remember what I said about you know

00:24:08,630 --> 00:24:13,390
that they're being an exodus in the Java

00:24:10,730 --> 00:24:17,150
land it's already begun in Ruby land

00:24:13,390 --> 00:24:19,429
that is but I'll step back you know

00:24:17,150 --> 00:24:22,520
maybe Java developers weren't crazy when

00:24:19,429 --> 00:24:23,630
they came up with spring that they felt

00:24:22,520 --> 00:24:25,460
a problem they had a lot of tight

00:24:23,630 --> 00:24:26,960
coupling under enterprise apps they

00:24:25,460 --> 00:24:30,200
tried to solve that problem using a lot

00:24:26,960 --> 00:24:32,090
of XML but the nice thing is that they

00:24:30,200 --> 00:24:33,620
were it that they have were had at the

00:24:32,090 --> 00:24:35,990
time I think they still use spring by

00:24:33,620 --> 00:24:38,030
degrees that they had plain old java

00:24:35,990 --> 00:24:41,299
objects very easy to test very easily

00:24:38,030 --> 00:24:42,220
design by comparison to me one of the

00:24:41,299 --> 00:24:44,830
biggest problems

00:24:42,220 --> 00:24:48,429
we face in the ice a wee inclusively

00:24:44,830 --> 00:24:51,220
that you guys face now sorry in the

00:24:48,429 --> 00:24:52,960
rails community is that perhaps you

00:24:51,220 --> 00:24:55,419
become someone in ERDA to what is

00:24:52,960 --> 00:24:56,860
difficult to do in rails that because

00:24:55,419 --> 00:24:58,419
you perceive it to be easier than what

00:24:56,860 --> 00:25:00,850
you did before and so you don't think

00:24:58,419 --> 00:25:02,650
about it being hard having come from

00:25:00,850 --> 00:25:04,570
Java doing testing and rails seemed

00:25:02,650 --> 00:25:06,940
brilliantly easy but if you think about

00:25:04,570 --> 00:25:08,919
it you have model tests whether you're

00:25:06,940 --> 00:25:10,809
using our spec or test you nor whatever

00:25:08,919 --> 00:25:11,890
you have a different API for testing

00:25:10,809 --> 00:25:13,480
models than you do for tested

00:25:11,890 --> 00:25:15,460
controllers need to do than you do for

00:25:13,480 --> 00:25:17,980
integration tests gets even worse if you

00:25:15,460 --> 00:25:21,220
add routing specs or if you add cucumber

00:25:17,980 --> 00:25:22,840
you'll acceptance tests if you will if

00:25:21,220 --> 00:25:24,400
you add all the additional tooling to it

00:25:22,840 --> 00:25:25,900
gets even harder but there's essential

00:25:24,400 --> 00:25:27,880
tooling it you have no choice but to use

00:25:25,900 --> 00:25:29,740
if you just want to test models

00:25:27,880 --> 00:25:32,169
controllers and do integration tests

00:25:29,740 --> 00:25:34,090
they all slightly different api's you're

00:25:32,169 --> 00:25:35,830
tied to the framework and that's where

00:25:34,090 --> 00:25:38,100
this all began that's where I got really

00:25:35,830 --> 00:25:40,330
annoyed and said hey this sucks maybe

00:25:38,100 --> 00:25:41,950
maybe we shouldn't be or I already

00:25:40,330 --> 00:25:45,210
talked about that maybe we're due for

00:25:41,950 --> 00:25:48,850
our spring your spring not mine anymore

00:25:45,210 --> 00:25:50,289
maybe we're due for the Ruby equivalent

00:25:48,850 --> 00:25:51,700
of spring maybe we're due to have a

00:25:50,289 --> 00:25:53,169
different framework maybe that's really

00:25:51,700 --> 00:25:54,429
what we're looking for here we keep

00:25:53,169 --> 00:25:57,130
trying to make rails into something that

00:25:54,429 --> 00:25:58,720
it's not rails is designed to make the

00:25:57,130 --> 00:26:01,150
first eighty percent of small app

00:25:58,720 --> 00:26:02,669
development fast whoever said it was

00:26:01,150 --> 00:26:04,780
designed to make really big apps

00:26:02,669 --> 00:26:06,490
37signals might tell you that but they

00:26:04,780 --> 00:26:07,809
have a they have an agenda behind

00:26:06,490 --> 00:26:09,429
telling you that by degrees I mean

00:26:07,809 --> 00:26:11,850
that's what all their apps are written

00:26:09,429 --> 00:26:13,870
then they make their money off of it

00:26:11,850 --> 00:26:14,980
granted you guys are all invested in it

00:26:13,870 --> 00:26:16,360
we've got this nice framework called

00:26:14,980 --> 00:26:18,669
rack underneath we could be easily

00:26:16,360 --> 00:26:22,210
trying to build other frameworks that

00:26:18,669 --> 00:26:23,950
are based on plain old Ruby objects that

00:26:22,210 --> 00:26:25,179
might not depend on XML because we have

00:26:23,950 --> 00:26:26,530
this great turing-complete language

00:26:25,179 --> 00:26:28,929
called Ruby that we could use to wire

00:26:26,530 --> 00:26:31,419
our Ruby together with and then the

00:26:28,929 --> 00:26:33,280
wiring would be easily testable so maybe

00:26:31,419 --> 00:26:34,840
we need to be building need to be

00:26:33,280 --> 00:26:37,390
thinking about building don't think

00:26:34,840 --> 00:26:40,659
about it do it building a framework of

00:26:37,390 --> 00:26:42,750
plain old Ruby objects so rails is

00:26:40,659 --> 00:26:46,320
almost ten years old as I was saying and

00:26:42,750 --> 00:26:49,450
rails apps are growing more complex and

00:26:46,320 --> 00:26:51,190
rails isn't meeting the need we have too

00:26:49,450 --> 00:26:54,340
many choices already because it's too

00:26:51,190 --> 00:26:55,420
old by way of entropy there are too many

00:26:54,340 --> 00:26:57,760
choices

00:26:55,420 --> 00:27:00,190
more curation but we're not seeing

00:26:57,760 --> 00:27:01,600
developers merge their gems we're not

00:27:00,190 --> 00:27:05,080
we're seeing people tout their pet

00:27:01,600 --> 00:27:07,780
projects and we need a framework design

00:27:05,080 --> 00:27:10,330
for implicitly from the ground up for

00:27:07,780 --> 00:27:13,090
large apps we don't have it POEA a

00:27:10,330 --> 00:27:15,850
predates rails it provides alternatives

00:27:13,090 --> 00:27:17,800
for every single pattern rails it gives

00:27:15,850 --> 00:27:19,510
you another way of doing it tells you

00:27:17,800 --> 00:27:21,490
about the trade-offs and choosing each

00:27:19,510 --> 00:27:25,140
one of these patterns so look there for

00:27:21,490 --> 00:27:25,140

YouTube URL: https://www.youtube.com/watch?v=7F3M0qdmxwU


