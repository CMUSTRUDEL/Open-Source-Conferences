Title: LoneStarRuby Conf 2013 - Placing Things into Other Things by Charles Lowell
Publication date: 2020-01-28
Playlist: Lone Star Ruby Conf 2013
Description: 
	The world of Ruby is a big and beautiful one. Like Cane from Kung-Fu, you could spend a lifetime wandering it's surface and never lack for an abundance of wonder. But there is an even larger world outside its walls that is also filled with amazing things. Based on lessons learned writing C extensions, Java extensions as well embedding interpreters (v8) and applications (Jenkins) inside Ruby, This talk will take you through the best ways to dress up any citizen of the galaxy in order to make it indistiguishable from one of our beloved planet Ruby.

Help us caption & translate this video!

http://amara.org/v/FG87/
Captions: 
	00:00:15,000 --> 00:00:21,160
alright well I'll go ahead and get

00:00:18,340 --> 00:00:24,180
started I'm a little bit nervous this

00:00:21,160 --> 00:00:26,259
morning a little bit or this afternoon

00:00:24,180 --> 00:00:29,009
more so than normal because i'm actually

00:00:26,259 --> 00:00:31,539
going to start out with a confession

00:00:29,009 --> 00:00:35,050
don't worry it doesn't involve viruses

00:00:31,539 --> 00:00:37,870
or anything like that but it's actually

00:00:35,050 --> 00:00:40,360
that i'm i'm not going to actually talk

00:00:37,870 --> 00:00:42,760
about what i told you all that I was

00:00:40,360 --> 00:00:46,360
going to talk about I'm gonna talk about

00:00:42,760 --> 00:00:52,330
something else actually I do think that

00:00:46,360 --> 00:00:54,850
it's important I think that I I and and

00:00:52,330 --> 00:00:56,650
in the last couple months and stuff that

00:00:54,850 --> 00:00:58,239
I've been working on I think that it

00:00:56,650 --> 00:01:00,519
actually has a greater potential to be

00:00:58,239 --> 00:01:04,210
more useful to you and make your life

00:01:00,519 --> 00:01:06,190
easier which is what I sincerely hope so

00:01:04,210 --> 00:01:09,940
what I'm actually going to talk you

00:01:06,190 --> 00:01:12,549
about is command-line interfaces which

00:01:09,940 --> 00:01:13,900
you're thinking oh my goodness why are

00:01:12,549 --> 00:01:15,520
you can talk about command-line

00:01:13,900 --> 00:01:19,180
interfaces all the great things you

00:01:15,520 --> 00:01:22,090
could talk about but as a developer the

00:01:19,180 --> 00:01:24,370
primary way in which you experience your

00:01:22,090 --> 00:01:28,990
world is through streams of text and so

00:01:24,370 --> 00:01:30,430
I think that we can do a lot better than

00:01:28,990 --> 00:01:35,200
what we're doing right now so yes I am

00:01:30,430 --> 00:01:37,630
in fact going to talk about COI and to

00:01:35,200 --> 00:01:49,090
drive the point home why this it's worth

00:01:37,630 --> 00:01:52,270
it can you guys hear is you know God's

00:01:49,090 --> 00:01:54,430
holy name are you blathering about I'll

00:01:52,270 --> 00:01:57,370
tell you what I'm blathering about I've

00:01:54,430 --> 00:02:04,830
got information man new has come to

00:01:57,370 --> 00:02:08,009
light so as a company that focuses on on

00:02:04,830 --> 00:02:09,970
crafting human experiences the the

00:02:08,009 --> 00:02:13,810
developer experience is something that's

00:02:09,970 --> 00:02:16,180
very very important to us is why we take

00:02:13,810 --> 00:02:19,900
CLI tools very very seriously and why we

00:02:16,180 --> 00:02:25,330
end up writing quite a few of them and

00:02:19,900 --> 00:02:28,690
there's the space is very crowded for

00:02:25,330 --> 00:02:31,660
for option parsing tools slop

00:02:28,690 --> 00:02:33,970
mix live map opticron rake thorgy li

00:02:31,660 --> 00:02:35,950
option parser it's just fun to say them

00:02:33,970 --> 00:02:39,070
all and there's there's there's probably

00:02:35,950 --> 00:02:41,230
20 that i haven't even mentioned here

00:02:39,070 --> 00:02:44,110
it's it and and each one of these is

00:02:41,230 --> 00:02:46,600
written by people who have very strong

00:02:44,110 --> 00:02:52,060
opinions about problems that they need

00:02:46,600 --> 00:02:54,610
solved for them and each one of these I

00:02:52,060 --> 00:02:56,830
can honestly say have given me I've used

00:02:54,610 --> 00:03:00,180
a lot of them over the past five or six

00:02:56,830 --> 00:03:03,970
years and they've all given me this this

00:03:00,180 --> 00:03:06,520
great feeling of win where everything is

00:03:03,970 --> 00:03:09,960
going right and and you know nothing's

00:03:06,520 --> 00:03:09,960
going wrong for you which

00:03:15,720 --> 00:03:19,920
I never get tired of watching that

00:03:17,940 --> 00:03:22,800
that's the feeling we're going for all

00:03:19,920 --> 00:03:25,140
the time that's what you want but

00:03:22,800 --> 00:03:27,890
unfortunately when it comes to writing

00:03:25,140 --> 00:03:32,190
command-line applications inevitably

00:03:27,890 --> 00:03:37,140
inevitably I end up feeling like this I

00:03:32,190 --> 00:03:41,640
hit a wall and i won't play the sound

00:03:37,140 --> 00:03:43,470
for this one but you end up getting you

00:03:41,640 --> 00:03:45,360
end up hitting a wall at some point or

00:03:43,470 --> 00:03:50,610
at least I do and so I'm going to talk

00:03:45,360 --> 00:03:55,020
to you about what what that is what what

00:03:50,610 --> 00:04:00,209
happens oops what happens to to make the

00:03:55,020 --> 00:04:03,330
the experience difficult for us so the

00:04:00,209 --> 00:04:07,740
first thing is output now this is

00:04:03,330 --> 00:04:09,600
probably the biggest bugbear of cl I

00:04:07,740 --> 00:04:11,430
development at least for me the one that

00:04:09,600 --> 00:04:14,280
causes the most irrational fear and and

00:04:11,430 --> 00:04:18,870
and loathing is is the way that we

00:04:14,280 --> 00:04:22,700
manage output to the terminal and the

00:04:18,870 --> 00:04:24,930
basic problem as I've identified it is

00:04:22,700 --> 00:04:27,570
everybody just right straight to

00:04:24,930 --> 00:04:29,220
standard out everywhere in code it just

00:04:27,570 --> 00:04:33,710
this is this is something you see a lot

00:04:29,220 --> 00:04:37,590
and sometimes this is appropriate for

00:04:33,710 --> 00:04:39,090
small systems but as your system grows

00:04:37,590 --> 00:04:41,460
you have more and more code that's

00:04:39,090 --> 00:04:43,950
contending for the single resource and

00:04:41,460 --> 00:04:45,810
it's it's a global variable and it sucks

00:04:43,950 --> 00:04:48,690
for all the reasons that Singleton's and

00:04:45,810 --> 00:04:53,900
global variables are no good you see

00:04:48,690 --> 00:04:55,740
this a lot these are just all other

00:04:53,900 --> 00:05:00,030
realizations of the same basic

00:04:55,740 --> 00:05:03,240
anti-pattern so how do you share calls

00:05:00,030 --> 00:05:05,550
puts and what puts I mean you know

00:05:03,240 --> 00:05:08,990
standard out and the thing is you don't

00:05:05,550 --> 00:05:13,710
there's really there's there's there's a

00:05:08,990 --> 00:05:16,050
dearth of of techniques as your program

00:05:13,710 --> 00:05:19,770
goes to manage people need to generate

00:05:16,050 --> 00:05:23,100
output but but the question is how the

00:05:19,770 --> 00:05:25,050
next thing is how do I actually share

00:05:23,100 --> 00:05:27,810
formatting code in a command-line

00:05:25,050 --> 00:05:29,070
application and this problem is when you

00:05:27,810 --> 00:05:31,890
have a

00:05:29,070 --> 00:05:34,520
bunch of actions they're generating

00:05:31,890 --> 00:05:36,840
output and they share common attributes

00:05:34,520 --> 00:05:39,600
and and so you really want to just

00:05:36,840 --> 00:05:41,880
substitute the things that vary but

00:05:39,600 --> 00:05:44,270
other things stay static in that context

00:05:41,880 --> 00:05:46,290
so an example is this is from a

00:05:44,270 --> 00:05:49,830
command-line interface we actually wrote

00:05:46,290 --> 00:05:52,800
with Thor for width or a few years ago

00:05:49,830 --> 00:05:54,120
is the help we wanted there's some for

00:05:52,800 --> 00:05:55,770
historical reasons we wanted to tweak

00:05:54,120 --> 00:05:58,140
the way that help looked in this command

00:05:55,770 --> 00:06:01,290
line interface so what we ended up

00:05:58,140 --> 00:06:08,010
having to do was write this class which

00:06:01,290 --> 00:06:11,130
is a method that makes imperative calls

00:06:08,010 --> 00:06:14,340
to to standard out and does kind of

00:06:11,130 --> 00:06:15,840
formatting by formatting by Ruby code

00:06:14,340 --> 00:06:18,000
and it's not important to understand

00:06:15,840 --> 00:06:20,880
what exactly is happening here other

00:06:18,000 --> 00:06:22,230
than its incomprehensible or it's very

00:06:20,880 --> 00:06:25,110
difficult to see what's going on

00:06:22,230 --> 00:06:27,720
basically what I want is I want to print

00:06:25,110 --> 00:06:30,360
out the usage and the the help options

00:06:27,720 --> 00:06:32,310
whatever those are but I'm printing

00:06:30,360 --> 00:06:34,560
those out putting out a new line and

00:06:32,310 --> 00:06:38,580
then delegating to some other method

00:06:34,560 --> 00:06:40,050
which has the side effect of printing

00:06:38,580 --> 00:06:44,210
the standard down there wasn't really a

00:06:40,050 --> 00:06:47,030
a clear way to go forward on this

00:06:44,210 --> 00:06:49,410
artistic to get it in cleaner than this

00:06:47,030 --> 00:06:53,970
the other problem is it's very difficult

00:06:49,410 --> 00:06:56,790
to embed other streams into your your

00:06:53,970 --> 00:06:58,710
output so at some point your command

00:06:56,790 --> 00:07:00,030
command line application is going to

00:06:58,710 --> 00:07:03,210
want to call out to some other

00:07:00,030 --> 00:07:04,740
application or many applications and

00:07:03,210 --> 00:07:07,470
it's going to need to integrate its

00:07:04,740 --> 00:07:09,570
output into are you going to want to

00:07:07,470 --> 00:07:15,960
integrate its output into your own

00:07:09,570 --> 00:07:17,580
output and you see you know this look

00:07:15,960 --> 00:07:19,560
like an indentation prefect so like

00:07:17,580 --> 00:07:21,270
Heroku build packs or a good example of

00:07:19,560 --> 00:07:23,550
this they actually have very strict guys

00:07:21,270 --> 00:07:25,830
style guides inside the build pack of

00:07:23,550 --> 00:07:27,750
how many levels of indent and when you

00:07:25,830 --> 00:07:29,910
took how many arrows you should use and

00:07:27,750 --> 00:07:31,710
and stuff like that but I would argue

00:07:29,910 --> 00:07:34,080
that that's not the concern of the build

00:07:31,710 --> 00:07:36,540
packet should be the concern of the the

00:07:34,080 --> 00:07:38,490
thing that's rendering its output the

00:07:36,540 --> 00:07:41,910
same thing with control characters for

00:07:38,490 --> 00:07:43,220
when you're integrating when you're

00:07:41,910 --> 00:07:45,449
integrating

00:07:43,220 --> 00:07:47,220
external streams if those contain

00:07:45,449 --> 00:07:49,620
control characters what do you what do

00:07:47,220 --> 00:07:51,840
you do with those can run into headaches

00:07:49,620 --> 00:07:55,440
so example from this I I tried to pick

00:07:51,840 --> 00:07:57,210
one that was would be maybe not familiar

00:07:55,440 --> 00:07:58,740
to everybody's like Capistrano which is

00:07:57,210 --> 00:08:01,650
actually a great program I like it a lot

00:07:58,740 --> 00:08:04,500
and but you know chef is guilty of this

00:08:01,650 --> 00:08:06,120
and and and everybody else but but here

00:08:04,500 --> 00:08:09,810
you can see the output of bundler gets

00:08:06,120 --> 00:08:11,610
one dot per line and then your it's it's

00:08:09,810 --> 00:08:15,840
just inserting random new lines and and

00:08:11,610 --> 00:08:17,250
putting I mean it to the IP address of

00:08:15,840 --> 00:08:19,530
the server that's running is relevant

00:08:17,250 --> 00:08:21,930
information but I think that the reason

00:08:19,530 --> 00:08:24,780
it's like this is because doing any

00:08:21,930 --> 00:08:27,810
different was really really difficult it

00:08:24,780 --> 00:08:29,520
it makes you know I should be if I'm

00:08:27,810 --> 00:08:31,199
familiar with the output of bundler I

00:08:29,520 --> 00:08:33,810
should be able to look at this output

00:08:31,199 --> 00:08:36,810
and immediately recognize where bundlers

00:08:33,810 --> 00:08:39,930
output is instead of instead of having

00:08:36,810 --> 00:08:41,310
it broken up like this the other thing

00:08:39,930 --> 00:08:43,709
is is you know when you want to do

00:08:41,310 --> 00:08:45,720
things like progress bars I love the

00:08:43,709 --> 00:08:48,839
Ruby gems interface when you install a

00:08:45,720 --> 00:08:50,339
gem well as it's fetching it shows you

00:08:48,839 --> 00:08:51,660
it's progress and this is a basic UI

00:08:50,339 --> 00:08:54,510
principle that if you're going to block

00:08:51,660 --> 00:08:56,130
for more than 600 milliseconds you

00:08:54,510 --> 00:08:58,170
really ought to be providing some sort

00:08:56,130 --> 00:08:59,880
of feedback to the user so that they

00:08:58,170 --> 00:09:01,470
know that you know you're still doing

00:08:59,880 --> 00:09:03,800
something and that most of all that

00:09:01,470 --> 00:09:06,540
they're in control of their workspace

00:09:03,800 --> 00:09:09,060
you haven't you haven't taken the

00:09:06,540 --> 00:09:11,580
control out of their hands but doing so

00:09:09,060 --> 00:09:14,400
is actually pretty difficult because you

00:09:11,580 --> 00:09:15,990
know you have the the the progress bar

00:09:14,400 --> 00:09:17,820
is going to be writing to your standard

00:09:15,990 --> 00:09:19,589
out like separately in fact if you look

00:09:17,820 --> 00:09:23,520
at any of you guys have used the

00:09:19,589 --> 00:09:26,130
formatted or gem it just did you call

00:09:23,520 --> 00:09:29,510
out to it and it it writes to standard

00:09:26,130 --> 00:09:33,270
out directly it uses a constant by name

00:09:29,510 --> 00:09:35,130
so the other problem that I constantly

00:09:33,270 --> 00:09:39,660
run into or we constantly fall afoul of

00:09:35,130 --> 00:09:43,040
is decoding invalidation and what I mean

00:09:39,660 --> 00:09:46,649
by this is that our inputs are strings

00:09:43,040 --> 00:09:49,050
are arguments are strings are option

00:09:46,649 --> 00:09:55,430
names are strings are option values are

00:09:49,050 --> 00:09:55,430
strings and but we don't want strings

00:09:56,500 --> 00:10:03,680
hey that's great strings are the the

00:10:00,350 --> 00:10:10,580
universal interface and and you know

00:10:03,680 --> 00:10:13,820
they're good to have but we want not

00:10:10,580 --> 00:10:16,220
strings but entities about which we can

00:10:13,820 --> 00:10:18,560
know facts in which we can derive values

00:10:16,220 --> 00:10:21,320
we want knowledge that's encoded in

00:10:18,560 --> 00:10:23,120
those those entities we want objects and

00:10:21,320 --> 00:10:25,300
the sooner we can get from strings to

00:10:23,120 --> 00:10:28,100
objects the better off we're going to be

00:10:25,300 --> 00:10:31,310
and and this is a problem as you find

00:10:28,100 --> 00:10:33,380
strings getting very very far into your

00:10:31,310 --> 00:10:34,820
program and they're just difficult to

00:10:33,380 --> 00:10:37,190
work with because there's no there's

00:10:34,820 --> 00:10:40,160
nothing encoded them other than the that

00:10:37,190 --> 00:10:42,260
one byte comes before the other and so

00:10:40,160 --> 00:10:44,900
we want to front-load the extraction of

00:10:42,260 --> 00:10:47,090
that information or its I constantly

00:10:44,900 --> 00:10:48,770
have a problem with this so for example

00:10:47,090 --> 00:10:52,220
what I mean by this is I've got this

00:10:48,770 --> 00:10:55,340
string and it's it's just a string but

00:10:52,220 --> 00:10:58,190
what I really want is a pathname object

00:10:55,340 --> 00:11:03,140
that represents this the fact that this

00:10:58,190 --> 00:11:06,050
is a path this is in essence the concept

00:11:03,140 --> 00:11:09,470
of decoding and the decoder for that I

00:11:06,050 --> 00:11:10,820
want is the global pathname function the

00:11:09,470 --> 00:11:13,640
same thing for this this is an IP

00:11:10,820 --> 00:11:15,380
address but what I sorry this is a

00:11:13,640 --> 00:11:18,380
string but I what I really want is an IP

00:11:15,380 --> 00:11:21,830
a derp object and the decoder for that

00:11:18,380 --> 00:11:23,810
is just the constructor to do another

00:11:21,830 --> 00:11:25,880
case we might have my email address

00:11:23,810 --> 00:11:28,070
right but what do I really want I don't

00:11:25,880 --> 00:11:29,990
want my my email address even if it's a

00:11:28,070 --> 00:11:31,820
primary key that uniquely identifies me

00:11:29,990 --> 00:11:35,390
in the system what I really might want

00:11:31,820 --> 00:11:39,620
is an active record and so the decoder

00:11:35,390 --> 00:11:42,140
for that would be fine by email and I

00:11:39,620 --> 00:11:44,630
would argue that before you even start

00:11:42,140 --> 00:11:47,180
to you know take any action that depends

00:11:44,630 --> 00:11:48,740
on on on having the user you should be

00:11:47,180 --> 00:11:55,250
able you should you should decode it and

00:11:48,740 --> 00:11:59,780
not not be invoking that by hand so

00:11:55,250 --> 00:12:01,580
anyhow it's not enough just to have

00:11:59,780 --> 00:12:03,050
decoded objects they have to be valid

00:12:01,580 --> 00:12:09,080
this is what I talked about decoding and

00:12:03,050 --> 00:12:12,400
validation decoding is an existential

00:12:09,080 --> 00:12:16,520
problem like can i actually get this

00:12:12,400 --> 00:12:19,820
thing into a representation memory that

00:12:16,520 --> 00:12:22,040
i can use but then once you've answered

00:12:19,820 --> 00:12:24,710
that question yes or no then you need to

00:12:22,040 --> 00:12:26,210
say can I even use this does it make

00:12:24,710 --> 00:12:29,800
sense to use this and that's that's

00:12:26,210 --> 00:12:32,900
that's what validity is and I think that

00:12:29,800 --> 00:12:34,760
it's important to acknowledge that these

00:12:32,900 --> 00:12:36,110
are separate concerns that decoding and

00:12:34,760 --> 00:12:39,290
validation are completely and totally

00:12:36,110 --> 00:12:41,420
separate concerns because but i think

00:12:39,290 --> 00:12:44,630
that they often get conflated because

00:12:41,420 --> 00:12:49,700
they both need to happen successfully in

00:12:44,630 --> 00:12:52,010
sequence before you can continue so just

00:12:49,700 --> 00:12:53,210
to drive this home you've got i don't

00:12:52,010 --> 00:12:57,760
know how many people are familiar with

00:12:53,210 --> 00:13:01,610
this but in 57 noam chomsky you know in

00:12:57,760 --> 00:13:03,320
proposed this idea or basically proposed

00:13:01,610 --> 00:13:05,930
the same idea as applied to english

00:13:03,320 --> 00:13:07,370
here's an English sentence it parses

00:13:05,930 --> 00:13:08,600
perfectly correctly and yet it

00:13:07,370 --> 00:13:10,760
completely and totally evades

00:13:08,600 --> 00:13:13,570
understanding so in this one you have a

00:13:10,760 --> 00:13:16,970
well formed sentence it decodes properly

00:13:13,570 --> 00:13:19,130
but it's invalid it doesn't make any

00:13:16,970 --> 00:13:26,510
sense we can't gain any knowledge from

00:13:19,130 --> 00:13:28,730
it can't use it so the same applies to

00:13:26,510 --> 00:13:31,280
objects and in different contexts so to

00:13:28,730 --> 00:13:34,120
use the the pathname we have once we've

00:13:31,280 --> 00:13:36,440
got this well-formed pathname object

00:13:34,120 --> 00:13:38,780
will put the questions we then want to

00:13:36,440 --> 00:13:42,500
ask is you know does this exist on disk

00:13:38,780 --> 00:13:45,710
or you know do I have permissions to

00:13:42,500 --> 00:13:50,900
write to it which I may or may not

00:13:45,710 --> 00:13:55,810
depending on the context so I feel as

00:13:50,900 --> 00:13:55,810
though this is not just a problem with

00:13:55,870 --> 00:14:01,670
with command-line applications I feel

00:13:58,550 --> 00:14:03,980
that the Ruby ecosystem and perhaps in

00:14:01,670 --> 00:14:06,200
general has a bias towards output

00:14:03,980 --> 00:14:08,570
instead of input I mean you think about

00:14:06,200 --> 00:14:10,730
all these tools how many templating

00:14:08,570 --> 00:14:12,890
engines are there we've got decorators

00:14:10,730 --> 00:14:15,250
and presenters and renderers and all

00:14:12,890 --> 00:14:17,960
this stuff for for laying things out and

00:14:15,250 --> 00:14:22,520
generating great input but when it comes

00:14:17,960 --> 00:14:24,050
to actually can very orderly repeatable

00:14:22,520 --> 00:14:33,140
pays for converting strings back into

00:14:24,050 --> 00:14:35,600
objects it's it's hard to find but I

00:14:33,140 --> 00:14:38,120
think that it's very important because

00:14:35,600 --> 00:14:39,680
the sooner you can get to that level of

00:14:38,120 --> 00:14:41,960
knowledge about the data that you're

00:14:39,680 --> 00:14:44,840
working with your programs can be so

00:14:41,960 --> 00:14:46,970
much smarter because strings are great

00:14:44,840 --> 00:14:50,630
but strings are dumb objects are smart

00:14:46,970 --> 00:14:57,200
and smart programs will have used smart

00:14:50,630 --> 00:15:01,280
objects the other thing that inevitably

00:14:57,200 --> 00:15:03,790
happens is as you develop a command-line

00:15:01,280 --> 00:15:08,690
application you're going to need a

00:15:03,790 --> 00:15:12,350
plug-in system and that's a that's

00:15:08,690 --> 00:15:15,590
because at a certain point when a

00:15:12,350 --> 00:15:18,580
program grows in complexity you just

00:15:15,590 --> 00:15:21,860
have to must be broken down and

00:15:18,580 --> 00:15:23,510
distributed into smaller pieces that's I

00:15:21,860 --> 00:15:27,080
didn't write the rule but I can assure

00:15:23,510 --> 00:15:32,180
you that that is fundamentally what we

00:15:27,080 --> 00:15:35,960
do and the same applies for for for a

00:15:32,180 --> 00:15:43,010
command-line application and so I mean

00:15:35,960 --> 00:15:44,900
every as your CLI grows and and subsumes

00:15:43,010 --> 00:15:46,100
more and more responsibilities it makes

00:15:44,900 --> 00:15:48,260
sense that you need to break it down

00:15:46,100 --> 00:15:51,140
into into component parts I mean you

00:15:48,260 --> 00:15:54,170
think of cl eyes that we use every day

00:15:51,140 --> 00:15:56,630
like rubygems vagrant Heroku all these

00:15:54,170 --> 00:16:00,230
do a great job actually of making it

00:15:56,630 --> 00:16:02,660
very easy to to extend and then they

00:16:00,230 --> 00:16:04,790
reap great benefit from it i mean it's

00:16:02,660 --> 00:16:06,320
it's self-evident when you look at those

00:16:04,790 --> 00:16:08,360
things that that was the right thing for

00:16:06,320 --> 00:16:09,950
them to do and that if you are going to

00:16:08,360 --> 00:16:11,980
follow in the footsteps with a similar

00:16:09,950 --> 00:16:15,350
thing that you're going to have to do it

00:16:11,980 --> 00:16:18,020
and i think that that's is again true of

00:16:15,350 --> 00:16:19,820
any software that you're writing so I've

00:16:18,020 --> 00:16:21,950
just you know rails engines jenkins

00:16:19,820 --> 00:16:24,260
plugins textmate bundles to name a few I

00:16:21,950 --> 00:16:26,390
mean almost you can you can kind of name

00:16:24,260 --> 00:16:32,470
an ecosystem and they've got a plug-in

00:16:26,390 --> 00:16:37,000
system and extension system so

00:16:32,470 --> 00:16:39,130
I need plugins what am I gonna do well

00:16:37,000 --> 00:16:43,570
this is the part where you know every

00:16:39,130 --> 00:16:51,600
single time I look at it and I am I

00:16:43,570 --> 00:16:51,600
gonna have to implement that ah down low

00:17:00,210 --> 00:17:04,930
it's not this it's not that it's harder

00:17:03,340 --> 00:17:06,730
that it's unknown or even that you can

00:17:04,930 --> 00:17:08,850
get most of it by leveraging rubygems

00:17:06,730 --> 00:17:11,200
it's just one of those tasks where you

00:17:08,850 --> 00:17:13,960
you know you're going to have to do it

00:17:11,200 --> 00:17:17,730
and the path to do it is clear it's just

00:17:13,960 --> 00:17:21,100
long and arduous and to me that shouts

00:17:17,730 --> 00:17:23,080
you you should get that for free like

00:17:21,100 --> 00:17:25,660
you should be using a system where where

00:17:23,080 --> 00:17:27,430
you get that for free and that's why

00:17:25,660 --> 00:17:34,060
there's such a proliferation of a

00:17:27,430 --> 00:17:35,730
plug-in stuff so I can I could go on and

00:17:34,060 --> 00:17:38,560
on there's actually there's a lot of

00:17:35,730 --> 00:17:40,780
little paper cuts that I had to cut out

00:17:38,560 --> 00:17:43,360
of this talk but I think you're wrong so

00:17:40,780 --> 00:17:47,680
I picked kind of the most of the biggest

00:17:43,360 --> 00:17:49,330
issues that I have and so i need to

00:17:47,680 --> 00:17:53,860
actually pivot a little bit and start

00:17:49,330 --> 00:17:57,910
talking about solutions otherwise what's

00:17:53,860 --> 00:18:03,370
the point but i will leave you with this

00:17:57,910 --> 00:18:07,210
a option parsing dsl is not the same as

00:18:03,370 --> 00:18:09,370
an application framework i know it's

00:18:07,210 --> 00:18:11,350
important to so I know it seems obvious

00:18:09,370 --> 00:18:12,970
or it may seem obvious but this is this

00:18:11,350 --> 00:18:15,100
is something that you need to bear in

00:18:12,970 --> 00:18:17,580
mind when you're evaluating option

00:18:15,100 --> 00:18:22,030
parsing libraries and things that map

00:18:17,580 --> 00:18:24,940
that that map arguments to two classes

00:18:22,030 --> 00:18:26,440
and objects I'd even go so far as to say

00:18:24,940 --> 00:18:29,050
that this is a completely and totally

00:18:26,440 --> 00:18:31,690
solved problem the problem with command

00:18:29,050 --> 00:18:36,040
line applications is not the conversion

00:18:31,690 --> 00:18:38,680
of strings into hashes it's literally

00:18:36,040 --> 00:18:40,930
everything else that I just described

00:18:38,680 --> 00:18:44,500
because ultimately you're developing an

00:18:40,930 --> 00:18:46,590
application and that's only one part of

00:18:44,500 --> 00:18:46,590
it

00:18:47,329 --> 00:18:54,569
so we'll fast forward or rewind

00:18:51,679 --> 00:18:58,439
something six weeks ago a couple months

00:18:54,569 --> 00:19:01,219
is two months ago like this is after I'd

00:18:58,439 --> 00:19:04,769
already submitted my sub bit of my talk

00:19:01,219 --> 00:19:07,439
we were hired to write a command line

00:19:04,769 --> 00:19:09,509
tool for for rackspace to make their

00:19:07,439 --> 00:19:14,549
their technology more accessible to

00:19:09,509 --> 00:19:16,859
developers so this is we're talking

00:19:14,549 --> 00:19:22,409
about a commit a CLI that's going to

00:19:16,859 --> 00:19:25,589
potentially interact with arbitrary bits

00:19:22,409 --> 00:19:27,119
of their technology and and it's going

00:19:25,589 --> 00:19:29,039
to have a lot of commands it's going to

00:19:27,119 --> 00:19:32,339
have a lot of library code it's going to

00:19:29,039 --> 00:19:34,019
have a lot going on and so everything

00:19:32,339 --> 00:19:36,629
that i mentioned plus more is is

00:19:34,019 --> 00:19:41,849
definitely is in effect it's going to

00:19:36,629 --> 00:19:43,139
have to like i said i have a very large

00:19:41,849 --> 00:19:46,249
surface area the things that it could

00:19:43,139 --> 00:19:49,139
cover potentially infinite right so

00:19:46,249 --> 00:19:53,939
absolutely plugins are something that

00:19:49,139 --> 00:19:55,829
are going to be required so you know

00:19:53,939 --> 00:19:57,509
what are we going to do well we have to

00:19:55,829 --> 00:19:58,859
identify these problems and go after

00:19:57,509 --> 00:20:01,559
them and see what we can do to address

00:19:58,859 --> 00:20:08,069
each one specifically so the first thing

00:20:01,559 --> 00:20:10,169
for output contextualise the streams i

00:20:08,069 --> 00:20:13,769
know that's that's a that's a that's a

00:20:10,169 --> 00:20:17,159
fancy way of saying wrapping stuff and

00:20:13,769 --> 00:20:19,949
what I mean by is we've got to move we

00:20:17,159 --> 00:20:22,919
needed to want it to move away from this

00:20:19,949 --> 00:20:25,769
regimen where any code anywhere can just

00:20:22,919 --> 00:20:27,899
access standard out willy-nilly but at

00:20:25,769 --> 00:20:30,569
the same time we want any code anywhere

00:20:27,899 --> 00:20:31,949
to be able to generate output and so how

00:20:30,569 --> 00:20:34,429
do you do that in an orderly fashion

00:20:31,949 --> 00:20:37,319
that's that's it's not an easy problem

00:20:34,429 --> 00:20:40,289
one of the things we actually found was

00:20:37,319 --> 00:20:43,169
the introduction of middleware which

00:20:40,289 --> 00:20:46,499
I'll just give a quick review of

00:20:43,169 --> 00:20:48,089
middleware because I mean why would you

00:20:46,499 --> 00:20:54,299
want middleware in your your command

00:20:48,089 --> 00:20:55,889
line application so yes middleware is

00:20:54,299 --> 00:20:57,719
just just a pattern where you have an

00:20:55,889 --> 00:20:58,740
application that's comprised of little

00:20:57,719 --> 00:21:00,840
bits that share

00:20:58,740 --> 00:21:03,960
uniform interface where they're they're

00:21:00,840 --> 00:21:05,160
basically yields control one down the

00:21:03,960 --> 00:21:07,650
other to the chain if you use rails

00:21:05,160 --> 00:21:11,070
probably everybody's familiar with with

00:21:07,650 --> 00:21:14,580
with what middleware is question is is

00:21:11,070 --> 00:21:16,740
why is this appropriate for a

00:21:14,580 --> 00:21:18,809
command-line interface but first we kind

00:21:16,740 --> 00:21:21,630
of want to look first let's look at what

00:21:18,809 --> 00:21:23,340
does middleware in a CLI context look

00:21:21,630 --> 00:21:27,900
like well the first thing is you've got

00:21:23,340 --> 00:21:30,000
to capture the essence of what the UNIX

00:21:27,900 --> 00:21:33,270
process model is or what a command is

00:21:30,000 --> 00:21:34,650
and it's actually quite simple I might

00:21:33,270 --> 00:21:37,380
be missing something here but you've got

00:21:34,650 --> 00:21:39,900
a list of arguments inputstream an

00:21:37,380 --> 00:21:43,679
output stream stream to log stuff too

00:21:39,900 --> 00:21:47,040
and a hash of environment variables and

00:21:43,679 --> 00:21:48,929
really it's just a just a data object it

00:21:47,040 --> 00:21:51,510
can be passed from one little where to

00:21:48,929 --> 00:21:54,900
the other and then the actual middleware

00:21:51,510 --> 00:21:56,790
API is is very simple right it's just a

00:21:54,900 --> 00:21:58,290
simple instance of the the middleware

00:21:56,790 --> 00:22:00,059
pattern you've got a call method that

00:21:58,290 --> 00:22:03,150
takes the command you can do stuff

00:22:00,059 --> 00:22:05,160
beforehand you can yield control to the

00:22:03,150 --> 00:22:08,880
middleware downstream and then do stuff

00:22:05,160 --> 00:22:10,880
afterwards nothing new there but it's

00:22:08,880 --> 00:22:14,010
important to remember that each

00:22:10,880 --> 00:22:16,710
middleware controls all of the streams

00:22:14,010 --> 00:22:18,270
and of the downstream middlewares I know

00:22:16,710 --> 00:22:23,370
that's kind of a mouthful the downstream

00:22:18,270 --> 00:22:26,550
streams but it but but it can wrap and

00:22:23,370 --> 00:22:28,860
present those streams in an orderly

00:22:26,550 --> 00:22:33,360
fashion so here's an example just to

00:22:28,860 --> 00:22:35,370
kind of put a concrete point on it let's

00:22:33,360 --> 00:22:41,160
suppose we had somebody emoji middleware

00:22:35,370 --> 00:22:43,730
that just wanted to take that just took

00:22:41,160 --> 00:22:48,809
all of the downstream output and

00:22:43,730 --> 00:22:51,720
substituted the emoji characters for

00:22:48,809 --> 00:22:53,010
further equivalents on the terminal this

00:22:51,720 --> 00:22:56,250
is basically all you would do you would

00:22:53,010 --> 00:22:59,010
you would wrap the command that you got

00:22:56,250 --> 00:23:02,130
in with exactly the same things but you

00:22:59,010 --> 00:23:03,809
notice that the the output now has this

00:23:02,130 --> 00:23:06,600
filter on it so every middleware

00:23:03,809 --> 00:23:08,070
downstream has no idea that there's this

00:23:06,600 --> 00:23:09,630
filter on top of it it can just generate

00:23:08,070 --> 00:23:11,600
the output and doesn't have to worry

00:23:09,630 --> 00:23:15,620
about it and we

00:23:11,600 --> 00:23:18,530
can just assume that that everything

00:23:15,620 --> 00:23:20,240
will go through this but that's that's

00:23:18,530 --> 00:23:23,179
only one piece I think the biggest piece

00:23:20,240 --> 00:23:28,400
is using templates I know that's

00:23:23,179 --> 00:23:32,840
shocking because templates but i can

00:23:28,400 --> 00:23:35,720
tell you templates are not just a tech

00:23:32,840 --> 00:23:37,700
fad that actually is real there's real

00:23:35,720 --> 00:23:41,960
value in templates i know that might be

00:23:37,700 --> 00:23:43,250
a shocking proposition but but templates

00:23:41,960 --> 00:23:45,710
are actually when you're when it comes

00:23:43,250 --> 00:23:49,610
to laying out text templates are kind of

00:23:45,710 --> 00:23:54,350
where it's at you can do things like

00:23:49,610 --> 00:23:58,570
achieve layouts with with by by by

00:23:54,350 --> 00:24:00,940
wrapping you know bye-bye well by using

00:23:58,570 --> 00:24:05,179
layouts and partials like we do in rails

00:24:00,940 --> 00:24:07,130
so to revisit this help example that I

00:24:05,179 --> 00:24:10,780
had here we've got a layout that's an

00:24:07,130 --> 00:24:13,250
imperative Ruby code and the same thing

00:24:10,780 --> 00:24:15,950
implemented as a template and I'll let

00:24:13,250 --> 00:24:18,730
you decide which is clear which which

00:24:15,950 --> 00:24:18,730
intent is clear

00:24:23,789 --> 00:24:30,210
the other thing in in with the the the

00:24:27,840 --> 00:24:33,210
rum tool is we wanted to make sure from

00:24:30,210 --> 00:24:35,789
a very GetGo that the templates were

00:24:33,210 --> 00:24:38,299
we're streaming so what that means is as

00:24:35,789 --> 00:24:41,220
the templates are incrementally

00:24:38,299 --> 00:24:43,350
evaluated those bites are actually

00:24:41,220 --> 00:24:47,340
finding their way all the way through

00:24:43,350 --> 00:24:49,590
the middle middleware stack out to

00:24:47,340 --> 00:24:52,950
standard out so as you're evaluating the

00:24:49,590 --> 00:24:55,619
template it's it's actually going to

00:24:52,950 --> 00:24:58,259
standard out that that needle is being

00:24:55,619 --> 00:24:59,759
threaded but all that happens without

00:24:58,259 --> 00:25:01,639
you seeing it so you can just you're

00:24:59,759 --> 00:25:05,700
just thinking that you're in a template

00:25:01,639 --> 00:25:08,070
and that allows you to further narrow

00:25:05,700 --> 00:25:10,070
the scope so that the things that the

00:25:08,070 --> 00:25:12,749
pieces that are generating the output

00:25:10,070 --> 00:25:15,809
can just still generate the output as

00:25:12,749 --> 00:25:17,309
though they're rendering to a stream but

00:25:15,809 --> 00:25:19,830
the fact that rendering happens in the

00:25:17,309 --> 00:25:23,669
contact the the context of a streaming

00:25:19,830 --> 00:25:26,159
template is something that's hidden from

00:25:23,669 --> 00:25:28,590
them and one of the things that this

00:25:26,159 --> 00:25:30,359
enables is you can have streaming

00:25:28,590 --> 00:25:32,070
components by passing control of the

00:25:30,359 --> 00:25:35,489
stream to something that's embedded in

00:25:32,070 --> 00:25:37,409
the template you can you can pass

00:25:35,489 --> 00:25:40,619
control to a streaming component then

00:25:37,409 --> 00:25:43,320
and then back and so what this an

00:25:40,619 --> 00:25:46,970
example of this is doing a progress bar

00:25:43,320 --> 00:25:49,200
inside of a template this should totally

00:25:46,970 --> 00:25:56,279
there's no reason I shouldn't be able to

00:25:49,200 --> 00:25:59,129
do this the only to say okay I want to

00:25:56,279 --> 00:26:01,940
substitute the the gem name here and

00:25:59,129 --> 00:26:04,619
then the actual progress and have that

00:26:01,940 --> 00:26:05,820
because I've evaluated the first part of

00:26:04,619 --> 00:26:07,320
the template that gets written to

00:26:05,820 --> 00:26:10,649
standard out and then the control passes

00:26:07,320 --> 00:26:12,720
to this progress bar it can then render

00:26:10,649 --> 00:26:16,229
standard out but then I pick pick right

00:26:12,720 --> 00:26:19,019
back up where where I was formatting and

00:26:16,229 --> 00:26:21,059
so I've very cleanly captured the

00:26:19,019 --> 00:26:23,070
overall layout which is what I was what

00:26:21,059 --> 00:26:25,859
my goal was in the first place and I can

00:26:23,070 --> 00:26:31,499
say layout this this this and the

00:26:25,859 --> 00:26:34,889
progress bar goes here so templates are

00:26:31,499 --> 00:26:36,899
awesome they're like a thing it's very

00:26:34,889 --> 00:26:37,620
surprising that we don't we don't use

00:26:36,899 --> 00:26:45,600
them in

00:26:37,620 --> 00:26:50,550
CL is very much so on the the decoding

00:26:45,600 --> 00:26:53,309
and validation front we actually ended

00:26:50,550 --> 00:26:56,400
up this was this was this was a toughy

00:26:53,309 --> 00:26:58,590
to kind of figure out what to what to go

00:26:56,400 --> 00:27:01,340
with but the answer ended up being

00:26:58,590 --> 00:27:03,540
introduced a new object let's go figure

00:27:01,340 --> 00:27:09,120
so what we did was we introduced the

00:27:03,540 --> 00:27:11,790
concept of forms which in a command-line

00:27:09,120 --> 00:27:14,940
application forms it's kind of strange

00:27:11,790 --> 00:27:19,010
but there's a subtle choice of language

00:27:14,940 --> 00:27:19,010
here and we actually struggled with this

00:27:19,100 --> 00:27:26,670
but we ended up going with forms forms

00:27:21,870 --> 00:27:29,850
in the platonic sense of the ideal shape

00:27:26,670 --> 00:27:32,010
of something or the its projection in

00:27:29,850 --> 00:27:35,780
the highly in theack world if you're

00:27:32,010 --> 00:27:38,640
into the whole neal stephenson thing so

00:27:35,780 --> 00:27:42,840
we're talking about what is the essence

00:27:38,640 --> 00:27:46,080
of your input for this action and so to

00:27:42,840 --> 00:27:49,050
just give it to put some concrete this

00:27:46,080 --> 00:27:52,710
on that that that example there here's

00:27:49,050 --> 00:27:54,710
the here's the input form for the create

00:27:52,710 --> 00:27:57,780
action the load balancer create action

00:27:54,710 --> 00:28:00,059
inside inside the rum gem and you can

00:27:57,780 --> 00:28:03,150
see it's just we're just listing out the

00:28:00,059 --> 00:28:06,120
inputs we're listening out the the types

00:28:03,150 --> 00:28:08,850
any defaults how they're decoded which

00:28:06,120 --> 00:28:11,030
is just you can you can just use a proc

00:28:08,850 --> 00:28:13,020
as a decoder there's also another a

00:28:11,030 --> 00:28:16,760
couple of other ways to decode and then

00:28:13,020 --> 00:28:19,320
we're validating by just giving it a

00:28:16,760 --> 00:28:20,640
field name and a predicate field name

00:28:19,320 --> 00:28:23,970
and a predicate so we've very cleanly

00:28:20,640 --> 00:28:27,390
captured what is the form of the input

00:28:23,970 --> 00:28:29,429
and what is the the validity of it and

00:28:27,390 --> 00:28:32,790
so you actually have one of these forms

00:28:29,429 --> 00:28:37,110
for every single action and so once you

00:28:32,790 --> 00:28:40,590
have this then you can actually derive

00:28:37,110 --> 00:28:42,660
your option parser you can you could

00:28:40,590 --> 00:28:45,480
really use any option parser you want

00:28:42,660 --> 00:28:47,640
you can use trollop or slop or opt

00:28:45,480 --> 00:28:51,550
parser or whatever because at this point

00:28:47,640 --> 00:28:56,780
this is this this is what's primary

00:28:51,550 --> 00:28:59,870
what'swhat's antecedent but let's take a

00:28:56,780 --> 00:29:04,900
step back and think about this for a

00:28:59,870 --> 00:29:08,830
second we've got templating system

00:29:04,900 --> 00:29:12,790
validations middlewares all kind of

00:29:08,830 --> 00:29:16,760
happening over this rack like API where

00:29:12,790 --> 00:29:18,220
a middleware dispatch chain and I mean I

00:29:16,760 --> 00:29:21,830
don't know if anybody here is like

00:29:18,220 --> 00:29:24,830
thinking what I'm thinking but you know

00:29:21,830 --> 00:29:26,630
our me maybe what's though we are we are

00:29:24,830 --> 00:29:31,940
we going down a well-trodden path here

00:29:26,630 --> 00:29:36,440
are we actually reinventing rails as

00:29:31,940 --> 00:29:39,020
yeah I know yeah but that's but that's

00:29:36,440 --> 00:29:43,130
okay I think it's I think that's just

00:29:39,020 --> 00:29:48,860
fine because there actually is a very

00:29:43,130 --> 00:29:53,720
deep correlation between command line in

00:29:48,860 --> 00:29:56,270
vacations and web requests and you know

00:29:53,720 --> 00:29:57,980
part of that is you know part of that is

00:29:56,270 --> 00:30:03,110
that you know web requests actually have

00:29:57,980 --> 00:30:05,660
their have have have or has its roots in

00:30:03,110 --> 00:30:09,710
in the UNIX process model live via CGI

00:30:05,660 --> 00:30:12,440
scripts but you know you see like a

00:30:09,710 --> 00:30:14,060
command line has standard in kind of

00:30:12,440 --> 00:30:17,110
maps to request body it's an input

00:30:14,060 --> 00:30:19,850
stream it's got an output stream too

00:30:17,110 --> 00:30:23,210
it's got a list of arguments and

00:30:19,850 --> 00:30:25,490
parameters and options and it's got you

00:30:23,210 --> 00:30:28,220
know this integer that represents kind

00:30:25,490 --> 00:30:30,830
of at the very most course level what

00:30:28,220 --> 00:30:33,020
happened and then you've got kind of

00:30:30,830 --> 00:30:36,080
general metadata that you can associate

00:30:33,020 --> 00:30:39,500
with it so it's actually not surprising

00:30:36,080 --> 00:30:45,890
that these patterns that are applicable

00:30:39,500 --> 00:30:47,870
to rails are almost directly one-to-one

00:30:45,890 --> 00:30:49,340
able to port to the command line

00:30:47,870 --> 00:30:52,220
interface because there's a lot of

00:30:49,340 --> 00:30:53,780
similar concerns so I have like you know

00:30:52,220 --> 00:30:55,910
I don't know how if you're familiar with

00:30:53,780 --> 00:30:58,430
the concept of convergent evolution but

00:30:55,910 --> 00:31:02,780
here you have a dolphin and a shark

00:30:58,430 --> 00:31:04,559
which both share very very very very

00:31:02,780 --> 00:31:09,059
very little bye

00:31:04,559 --> 00:31:10,799
way of heritage but at the same time

00:31:09,059 --> 00:31:12,539
they share physical characteristics that

00:31:10,799 --> 00:31:14,820
are very similar and that's because they

00:31:12,539 --> 00:31:18,179
are both ocean-dwelling fish eaters and

00:31:14,820 --> 00:31:20,399
so it just is a simple fact that if

00:31:18,179 --> 00:31:22,019
you're an ocean-going fish eater it's

00:31:20,399 --> 00:31:24,600
good for you to be able to swim quickly

00:31:22,019 --> 00:31:26,940
and so you'll develop a tail with you

00:31:24,600 --> 00:31:28,769
know with a flute now the Sharks is is

00:31:26,940 --> 00:31:30,149
up and down the Dolphins in side to side

00:31:28,769 --> 00:31:32,970
but it's the same back and basic

00:31:30,149 --> 00:31:35,820
mechanism and it's because of the

00:31:32,970 --> 00:31:39,809
habitat that they and a niche that they

00:31:35,820 --> 00:31:41,159
occupy so let's see how far we can take

00:31:39,809 --> 00:31:42,960
this you know once we kind of made this

00:31:41,159 --> 00:31:45,090
realization we're like okay let's uh

00:31:42,960 --> 00:31:47,070
let's roll with this you know let's

00:31:45,090 --> 00:31:49,499
let's just crib in cargo cult everything

00:31:47,070 --> 00:31:52,440
we can so here's actually snippet from

00:31:49,499 --> 00:31:54,559
the rum routing file and you can see you

00:31:52,440 --> 00:31:57,450
know we have you can you can match

00:31:54,559 --> 00:32:01,999
arbitrary strings to control our actions

00:31:57,450 --> 00:32:06,169
and you have similar like resourceful

00:32:01,999 --> 00:32:09,960
routing and so this this snippet here

00:32:06,169 --> 00:32:12,869
there's there's 50 commands embedded in

00:32:09,960 --> 00:32:15,179
this but the intent is actually you only

00:32:12,869 --> 00:32:18,990
get lost in the noise I can really see

00:32:15,179 --> 00:32:20,580
what this is about and said and that's

00:32:18,990 --> 00:32:21,840
very powerful it says there's a reason

00:32:20,580 --> 00:32:26,090
it's powerful in rails and I think it

00:32:21,840 --> 00:32:29,970
actually works very well for the CLI so

00:32:26,090 --> 00:32:34,049
um we actually have extracted this

00:32:29,970 --> 00:32:35,970
framework it's it's currently on my my

00:32:34,049 --> 00:32:39,029
gibbeh github account and we call it md

00:32:35,970 --> 00:32:41,429
CLI and all of these patterns are there

00:32:39,029 --> 00:32:44,249
available for you views on the on the

00:32:41,429 --> 00:32:47,549
command line interface the rum tool is

00:32:44,249 --> 00:32:50,129
built with it it's going to be continued

00:32:47,549 --> 00:32:52,200
to be developed we're actually in the

00:32:50,129 --> 00:32:54,779
process of developing this plug-in

00:32:52,200 --> 00:32:57,179
architecture so if you are going to

00:32:54,779 --> 00:32:58,710
develop a command line interface you'll

00:32:57,179 --> 00:33:01,999
actually be able to do you'll get all

00:32:58,710 --> 00:33:04,169
this stuff basically for free because

00:33:01,999 --> 00:33:06,419
command-line applications should be

00:33:04,169 --> 00:33:11,730
applications they're not scripts anymore

00:33:06,419 --> 00:33:13,259
um it really it is nice it is nice to

00:33:11,730 --> 00:33:15,230
know that these things have your back

00:33:13,259 --> 00:33:17,490
you know rails is valuable for a reason

00:33:15,230 --> 00:33:18,269
even you know these frameworks that we

00:33:17,490 --> 00:33:24,440
have there

00:33:18,269 --> 00:33:27,389
they're valuable for a reason and so I

00:33:24,440 --> 00:33:33,539
think the most important thing to

00:33:27,389 --> 00:33:38,159
realize is that command isn't an object

00:33:33,539 --> 00:33:42,509
it's not a class it's process that

00:33:38,159 --> 00:33:45,450
unfurls according to the rules of your

00:33:42,509 --> 00:33:49,099
business whatever that is and I for one

00:33:45,450 --> 00:33:49,099

YouTube URL: https://www.youtube.com/watch?v=LPCuUjs909Y


