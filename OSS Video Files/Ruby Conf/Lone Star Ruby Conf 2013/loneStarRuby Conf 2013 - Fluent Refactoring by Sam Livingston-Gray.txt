Title: loneStarRuby Conf 2013 - Fluent Refactoring by Sam Livingston-Gray
Publication date: 2020-01-28
Playlist: Lone Star Ruby Conf 2013
Description: 
	Fluency is "what you can say without having to think about how to say it." "Refactoring" is a language that describes ways to make your code better. I want to inspire you to learn more of that language, so you can make your code better without having to think about it.

I'll walk you through the process of reworking a 50-line controller action that's hard to comprehend, let alone refactor. We'll tease apart fiendishly intertwined structures, embrace duplication, use dirty tricks to our advantage, and uncover responsibilities—and bugs!—that weren't obvious at first glance.

Help us caption & translate this video!

http://amara.org/v/FG8j/
Captions: 
	00:00:17,279 --> 00:00:26,770
so with that out of the way let's talk

00:00:22,029 --> 00:00:32,320
about math this is how I know I am among

00:00:26,770 --> 00:00:33,670
my people because for a lot of I don't

00:00:32,320 --> 00:00:35,710
want to say normal but for a lot of

00:00:33,670 --> 00:00:38,530
people who are not in this room the word

00:00:35,710 --> 00:00:42,250
math evokes a lot of unpleasant memories

00:00:38,530 --> 00:00:45,160
of graphing lines and solving for x and

00:00:42,250 --> 00:00:50,229
doing word problems for some reason

00:00:45,160 --> 00:00:51,580
people really hate word problems now in

00:00:50,229 --> 00:00:53,530
my experience when people make this face

00:00:51,580 --> 00:00:55,360
and rant about how much they hate math

00:00:53,530 --> 00:00:57,879
what they are usually talking about is

00:00:55,360 --> 00:01:01,119
algebra and I can see where they're

00:00:57,879 --> 00:01:03,250
coming from in high school I used to

00:01:01,119 --> 00:01:05,920
come into algebra class with three or

00:01:03,250 --> 00:01:07,270
four fantasy novels in my backpack and I

00:01:05,920 --> 00:01:09,640
would go in I would sit down at my desk

00:01:07,270 --> 00:01:11,890
I pull up my algebra textbook and prop

00:01:09,640 --> 00:01:13,720
it up on my desk and reach down and grab

00:01:11,890 --> 00:01:17,110
a fantasy novel and stick it inside and

00:01:13,720 --> 00:01:19,330
read that and then a few times

00:01:17,110 --> 00:01:21,130
throughout the class the teacher would

00:01:19,330 --> 00:01:23,230
walk around and as he walked by he just

00:01:21,130 --> 00:01:25,090
grabbed the book and take it with him

00:01:23,230 --> 00:01:29,020
I'd reached down into the backpack for

00:01:25,090 --> 00:01:30,880
the next one eventually he started

00:01:29,020 --> 00:01:33,280
making me leave the backpack in his

00:01:30,880 --> 00:01:39,850
office and then I dropped out of high

00:01:33,280 --> 00:01:41,500
school take that mr. owl but about a

00:01:39,850 --> 00:01:44,020
decade later I went back to school for a

00:01:41,500 --> 00:01:45,370
computer science degree and I was really

00:01:44,020 --> 00:01:47,380
excited to learn more about programming

00:01:45,370 --> 00:01:49,290
but I was now looking forward to all of

00:01:47,380 --> 00:01:52,680
math because at that time I thought

00:01:49,290 --> 00:01:56,920
algebra was math but as it turns out

00:01:52,680 --> 00:02:00,040
algebra isn't math rather it isn't all

00:01:56,920 --> 00:02:02,650
of math or to use math to make my point

00:02:00,040 --> 00:02:06,610
about math algebra is a proper subset of

00:02:02,650 --> 00:02:08,950
math math has all this other cool stuff

00:02:06,610 --> 00:02:11,260
in it like Fibonacci spirals and

00:02:08,950 --> 00:02:13,480
fractals and hexaflexagon and my

00:02:11,260 --> 00:02:15,819
personal favorite graph theory when I

00:02:13,480 --> 00:02:18,879
finally encountered graph theory I was

00:02:15,819 --> 00:02:22,239
so pissed that I had wasted my time with

00:02:18,879 --> 00:02:23,620
all those fantasy novels what I

00:02:22,239 --> 00:02:27,640
eventually came to understand is that

00:02:23,620 --> 00:02:28,569
math is a language and algebra is its

00:02:27,640 --> 00:02:30,640
grammar

00:02:28,569 --> 00:02:32,499
which means that the algebra textbook

00:02:30,640 --> 00:02:35,859
that I was using to conceal my peers

00:02:32,499 --> 00:02:38,409
Anthony habit was the Dick and Jane of

00:02:35,859 --> 00:02:40,870
math now this is not to say that it

00:02:38,409 --> 00:02:41,920
wasn't important or valuable if you

00:02:40,870 --> 00:02:43,510
don't know the grammar of a language

00:02:41,920 --> 00:02:46,239
there's almost nothing you can say in it

00:02:43,510 --> 00:02:49,090
and books like this are incredibly

00:02:46,239 --> 00:02:50,409
important when you're learning but once

00:02:49,090 --> 00:02:53,049
you've mastered grammar you probably

00:02:50,409 --> 00:02:56,169
don't give it much thought which brings

00:02:53,049 --> 00:02:57,790
me to the title of my talk I am a big

00:02:56,169 --> 00:03:00,969
fan of the Ruby rogues podcast I see at

00:02:57,790 --> 00:03:05,139
least two of you out there and so I'm

00:03:00,969 --> 00:03:09,669
going to channel Josh saucer and define

00:03:05,139 --> 00:03:12,040
my terms in addition to the Ruby rogues

00:03:09,669 --> 00:03:13,689
I am also a fan of Aaron Patterson's

00:03:12,040 --> 00:03:15,219
presentation slides and so for those of

00:03:13,689 --> 00:03:23,919
you who share that affliction with me

00:03:15,219 --> 00:03:25,750
here you go fluency fluency can be

00:03:23,919 --> 00:03:27,750
thought of as what you can say when

00:03:25,750 --> 00:03:30,189
you're not thinking about how to say it

00:03:27,750 --> 00:03:31,449
another way to put it is what you can

00:03:30,189 --> 00:03:32,620
say when you're woken up in the middle

00:03:31,449 --> 00:03:35,889
of the night with a flashlight in your

00:03:32,620 --> 00:03:37,239
face and this sounds traumatic but what

00:03:35,889 --> 00:03:39,489
it's really talking about is what you

00:03:37,239 --> 00:03:41,319
can do when you're under stress I don't

00:03:39,489 --> 00:03:43,720
know about you but stress makes me

00:03:41,319 --> 00:03:45,129
stupid when I'm under stress original

00:03:43,720 --> 00:03:47,319
creative thought goes out the window I'm

00:03:45,129 --> 00:03:50,739
really unlikely to try anything new and

00:03:47,319 --> 00:03:52,509
instead I fall back on skills I've

00:03:50,739 --> 00:03:55,120
already mastered regardless of how

00:03:52,509 --> 00:03:57,879
effective they may be and for the record

00:03:55,120 --> 00:04:02,229
this is not my tat I am not this fast

00:03:57,879 --> 00:04:05,169
with my camera there's an organization

00:04:02,229 --> 00:04:06,459
in Portland called language hunters and

00:04:05,169 --> 00:04:08,650
they use a really interesting model to

00:04:06,459 --> 00:04:10,329
talk about levels of proficiency this is

00:04:08,650 --> 00:04:11,650
not the greatest one that Katrina was

00:04:10,329 --> 00:04:14,469
talking about earlier but it has some

00:04:11,650 --> 00:04:16,470
similarities level one they call Tarzan

00:04:14,469 --> 00:04:21,130
at a party

00:04:16,470 --> 00:04:23,380
words simple phrases level 2 going to

00:04:21,130 --> 00:04:26,410
the party you can say complete thoughts

00:04:23,380 --> 00:04:29,680
you know more words but it is still hard

00:04:26,410 --> 00:04:31,480
to talk about some things level 3

00:04:29,680 --> 00:04:32,260
discussing the party now you start

00:04:31,480 --> 00:04:35,890
having some more interesting

00:04:32,260 --> 00:04:37,900
conversations and level for Charlie Rose

00:04:35,890 --> 00:04:40,240
confused me because I'd never heard of

00:04:37,900 --> 00:04:42,610
Charlie Rose I had to consult wikipedia

00:04:40,240 --> 00:04:44,620
and it told me that he has a journalist

00:04:42,610 --> 00:04:46,900
and has a talk show on PBS so presumably

00:04:44,620 --> 00:04:50,170
he has a very sophisticated grasp of the

00:04:46,900 --> 00:04:52,570
English language what I like about this

00:04:50,170 --> 00:04:54,070
model is that it's not all or nothing

00:04:52,570 --> 00:04:56,710
you can level up in it over time and

00:04:54,070 --> 00:04:58,420
remember fluency isn't what you can say

00:04:56,710 --> 00:05:00,610
period it's what you can say without

00:04:58,420 --> 00:05:02,860
having to think about it so if you're

00:05:00,610 --> 00:05:05,260
fluent at level 1 you may be able to

00:05:02,860 --> 00:05:07,720
operate it level to some of the time you

00:05:05,260 --> 00:05:09,310
just have to work at it so maybe earlier

00:05:07,720 --> 00:05:10,810
in the day I got out my transit map in a

00:05:09,310 --> 00:05:12,820
notepad and I asked somebody how to get

00:05:10,810 --> 00:05:14,260
to the party but once I've been there

00:05:12,820 --> 00:05:18,780
for a while and I'm ready to go home for

00:05:14,260 --> 00:05:21,940
some introverted time it's taxi home

00:05:18,780 --> 00:05:23,770
that's for refactoring here's a

00:05:21,940 --> 00:05:26,230
definition I swiped from refactoring

00:05:23,770 --> 00:05:27,760
calm a disciplined technique for

00:05:26,230 --> 00:05:29,110
restructuring an existing body of code

00:05:27,760 --> 00:05:33,070
altering its internal structure without

00:05:29,110 --> 00:05:35,950
changing its external behavior I really

00:05:33,070 --> 00:05:37,360
like this first word disciplined it

00:05:35,950 --> 00:05:43,120
makes me feel like I should bow or have

00:05:37,360 --> 00:05:44,830
honor you're welcome Buffy fans I've

00:05:43,120 --> 00:05:46,930
heard people use the word refactoring to

00:05:44,830 --> 00:05:50,530
describe an extremely wide range of

00:05:46,930 --> 00:05:52,390
software development activities taking a

00:05:50,530 --> 00:05:54,700
couple of weeks breaking some stuff is

00:05:52,390 --> 00:05:59,140
not refactoring this is what i like to

00:05:54,700 --> 00:06:01,210
call doing it wrong most refactoring

00:05:59,140 --> 00:06:03,100
steps take less than a minute some of

00:06:01,210 --> 00:06:06,670
the more involved ones may take five

00:06:03,100 --> 00:06:08,620
minutes tops and breaking stuff by

00:06:06,670 --> 00:06:09,760
definition is not refactoring and I

00:06:08,620 --> 00:06:13,600
deliberately sped through that first

00:06:09,760 --> 00:06:15,660
part but you might so I intended you to

00:06:13,600 --> 00:06:19,860
miss the the last phrase which is

00:06:15,660 --> 00:06:19,860
without changing its external behavior

00:06:20,490 --> 00:06:24,910
as Katrina once said in her wonderful

00:06:23,200 --> 00:06:26,980
talk therapeutic refactoring tests are

00:06:24,910 --> 00:06:28,000
implied this also means I'm hand waving

00:06:26,980 --> 00:06:30,040
them and not going to talk about the

00:06:28,000 --> 00:06:33,800
very much

00:06:30,040 --> 00:06:36,440
tests detect and warn you of changes in

00:06:33,800 --> 00:06:38,660
behavior using them to verify your work

00:06:36,440 --> 00:06:40,280
makes it possible and even fun to

00:06:38,660 --> 00:06:41,750
experiment with different arrangements

00:06:40,280 --> 00:06:47,450
of your code and see which one tells the

00:06:41,750 --> 00:06:49,040
next the best story now I have no doubt

00:06:47,450 --> 00:06:50,540
that every word in this definition was

00:06:49,040 --> 00:06:52,820
carefully chosen but there are a lot of

00:06:50,540 --> 00:06:55,970
them so how can we make that last part

00:06:52,820 --> 00:06:57,050
stand out a little bit more here are the

00:06:55,970 --> 00:06:59,180
words in it that I think are most

00:06:57,050 --> 00:07:00,740
important and if we drop all of the rest

00:06:59,180 --> 00:07:02,210
of them we get a technique for

00:07:00,740 --> 00:07:05,930
restructuring code without changing

00:07:02,210 --> 00:07:08,030
behavior so that's refactoring as for

00:07:05,930 --> 00:07:09,170
what it means to refactor but we can

00:07:08,030 --> 00:07:10,970
make a verb out of the non just by

00:07:09,170 --> 00:07:12,170
dropping a few words and we get to

00:07:10,970 --> 00:07:16,220
restructure code without changing

00:07:12,170 --> 00:07:19,610
behavior I think this tells the same

00:07:16,220 --> 00:07:22,070
story with fewer details and that to me

00:07:19,610 --> 00:07:23,960
is the essence of refactoring it's about

00:07:22,070 --> 00:07:29,240
making your code tell a clearer story

00:07:23,960 --> 00:07:31,700
with fewer distracting details I would

00:07:29,240 --> 00:07:34,100
also like to propose an alternate

00:07:31,700 --> 00:07:35,480
definition of refactoring a language

00:07:34,100 --> 00:07:41,120
that describes ways to make your code

00:07:35,480 --> 00:07:43,669
suck less because we all know our code

00:07:41,120 --> 00:07:45,590
sucks and but more importantly if

00:07:43,669 --> 00:07:47,570
refactoring is a language then we can

00:07:45,590 --> 00:07:49,160
apply that language hunters model that

00:07:47,570 --> 00:07:55,990
talks about levels of proficiency it's

00:07:49,160 --> 00:07:55,990
no longer an all-or-nothing thing no

00:07:58,990 --> 00:08:03,260
you're if you were interested enough to

00:08:01,280 --> 00:08:05,450
come listen to this talk and I'm glad

00:08:03,260 --> 00:08:07,880
that you did you're probably already

00:08:05,450 --> 00:08:12,980
fluent in refactoring even if it's only

00:08:07,880 --> 00:08:15,410
at a basic level you can become more

00:08:12,980 --> 00:08:17,000
fluent in refactoring this one is easy

00:08:15,410 --> 00:08:21,590
you can become more fluent in anything

00:08:17,000 --> 00:08:23,390
it just takes practice and putting in

00:08:21,590 --> 00:08:25,940
the practice to become more fluent in

00:08:23,390 --> 00:08:27,230
refactoring is worth it because you'll

00:08:25,940 --> 00:08:29,960
be able to say more things when you're

00:08:27,230 --> 00:08:31,430
under stress remember language is the

00:08:29,960 --> 00:08:35,839
refactoring of making your code suck

00:08:31,430 --> 00:08:37,610
less and who doesn't want that right so

00:08:35,839 --> 00:08:39,250
I'm going to tell a story about some

00:08:37,610 --> 00:08:41,660
code that I encountered in the wild and

00:08:39,250 --> 00:08:42,740
because I was the person in the story

00:08:41,660 --> 00:08:44,600
I'm going to tell what it

00:08:42,740 --> 00:08:47,149
is like to go through this at my own

00:08:44,600 --> 00:08:48,740
level of refactoring fluency if you're

00:08:47,149 --> 00:08:50,060
more fluent than me then I look forward

00:08:48,740 --> 00:08:52,430
to hearing later about how I can improve

00:08:50,060 --> 00:08:54,529
what I did and if you don't catch

00:08:52,430 --> 00:08:56,990
everything it's okay take in what you

00:08:54,529 --> 00:08:58,790
can trust me on the rest and there will

00:08:56,990 --> 00:09:00,649
be video I'll publish the slides and i

00:08:58,790 --> 00:09:05,240
will put the code up once i get some

00:09:00,649 --> 00:09:07,790
sleep so this code comes from a

00:09:05,240 --> 00:09:09,470
production rails app i got permission t

00:09:07,790 --> 00:09:11,330
from its owner to use it in public as

00:09:09,470 --> 00:09:17,000
long as I changed the identifying

00:09:11,330 --> 00:09:19,970
details and while I am going to tell her

00:09:17,000 --> 00:09:21,410
this code to shreds I do have a lot of

00:09:19,970 --> 00:09:23,120
respect for the developers who wrote it

00:09:21,410 --> 00:09:25,130
they were under a lot of pressure from

00:09:23,120 --> 00:09:26,420
the business at the time and like all of

00:09:25,130 --> 00:09:29,540
us in that situation and they did what

00:09:26,420 --> 00:09:33,140
they could with what they had also I've

00:09:29,540 --> 00:09:34,670
written much crappier code than this as

00:09:33,140 --> 00:09:36,740
for what the code actually does this is

00:09:34,670 --> 00:09:38,089
almost irrelevant because refactoring is

00:09:36,740 --> 00:09:40,399
concerned with how your code is

00:09:38,089 --> 00:09:43,100
structured not what it says or means or

00:09:40,399 --> 00:09:44,330
does but just to provide some context

00:09:43,100 --> 00:09:46,490
will say that it comes from a cable

00:09:44,330 --> 00:09:50,360
company and it's used to schedule

00:09:46,490 --> 00:09:52,910
installations for new customers here's

00:09:50,360 --> 00:09:54,620
our test subject I'm deliberately using

00:09:52,910 --> 00:09:56,480
a tiny font here to emphasize the shape

00:09:54,620 --> 00:09:58,160
of the code i was showing this to a

00:09:56,480 --> 00:09:59,690
co-worker of mine yesterday had never

00:09:58,160 --> 00:10:03,770
seen this and he looked at me because i

00:09:59,690 --> 00:10:06,110
can't read it and already i hate it i

00:10:03,770 --> 00:10:08,270
will zoom in and when the details become

00:10:06,110 --> 00:10:10,910
important but even from here we can make

00:10:08,270 --> 00:10:12,200
some very basic observations there are

00:10:10,910 --> 00:10:16,190
about eight hundred lines of code in

00:10:12,200 --> 00:10:18,920
this file about 50 of them are right

00:10:16,190 --> 00:10:20,089
here in this method the longest line is

00:10:18,920 --> 00:10:23,300
whopping hundred and seventy seven

00:10:20,089 --> 00:10:25,520
characters the indentation ranges from 4

00:10:23,300 --> 00:10:28,040
to 16 spaces that's that nice little

00:10:25,520 --> 00:10:29,950
arrow pattern and that indentation comes

00:10:28,040 --> 00:10:32,720
from nesting various control structures

00:10:29,950 --> 00:10:34,550
there's a couple of copies of this audit

00:10:32,720 --> 00:10:38,149
trail for method that takes the block a

00:10:34,550 --> 00:10:41,300
couple of begin rescue n stanzas and a

00:10:38,149 --> 00:10:44,060
whole lot of if statements now I have a

00:10:41,300 --> 00:10:47,140
theory that once code reaches a certain

00:10:44,060 --> 00:10:47,140
level of complexity

00:10:47,960 --> 00:10:52,950
it tends to get worse if it's hard to

00:10:51,630 --> 00:10:54,390
understand everything the code is doing

00:10:52,950 --> 00:10:55,980
a developer who's working under schedule

00:10:54,390 --> 00:10:57,360
pressure will make the smallest change

00:10:55,980 --> 00:10:59,670
that doesn't obviously break anything

00:10:57,360 --> 00:11:03,780
maybe run the tests breathe a sigh of

00:10:59,670 --> 00:11:07,440
relief and ship it I hate this damn

00:11:03,780 --> 00:11:10,140
squirrel here's a little little known

00:11:07,440 --> 00:11:12,210
fact this image contains a typo a team

00:11:10,140 --> 00:11:13,350
of scholars and experts squirrel lip

00:11:12,210 --> 00:11:17,270
readers have determined that the

00:11:13,350 --> 00:11:19,680
squirrel is actually saying ship

00:11:17,270 --> 00:11:23,400
when you follow this squirrels advice

00:11:19,680 --> 00:11:26,130
for too long you wind up with a problem

00:11:23,400 --> 00:11:28,230
for waste management engineers and on

00:11:26,130 --> 00:11:29,820
that note perhaps you remember that

00:11:28,230 --> 00:11:35,100
first observation which was there are

00:11:29,820 --> 00:11:36,600
800 lines of code in this file a lot of

00:11:35,100 --> 00:11:38,730
rails controllers turn into junk drawers

00:11:36,600 --> 00:11:41,040
but at eight hundred lines this wasn't

00:11:38,730 --> 00:11:43,200
this one isn't just a drawer this is an

00:11:41,040 --> 00:11:44,940
entire cabinet full of rusty cheese

00:11:43,200 --> 00:11:48,390
graters and bent whisks and broken

00:11:44,940 --> 00:11:53,450
dreams and my first instinct is to clean

00:11:48,390 --> 00:11:53,450
all the things but 800 lines of code

00:11:55,100 --> 00:12:02,910
especially Ruby code I may not have the

00:12:01,350 --> 00:12:04,620
time or the energy to clean deal with a

00:12:02,910 --> 00:12:07,050
whole mess at once but here's what I can

00:12:04,620 --> 00:12:08,760
do I can make the job smaller for right

00:12:07,050 --> 00:12:10,560
now I'm just going to focus on cleaning

00:12:08,760 --> 00:12:13,980
up this one method and as for the other

00:12:10,560 --> 00:12:17,090
750 lines in this class not my circus

00:12:13,980 --> 00:12:17,090
not my monkeys

00:12:17,940 --> 00:12:21,790
now for the part that i am going to

00:12:20,440 --> 00:12:24,430
fixed i already know from experience

00:12:21,790 --> 00:12:26,470
that this session is going to involve

00:12:24,430 --> 00:12:28,930
some swearing and it's going to take me

00:12:26,470 --> 00:12:30,190
a while so what i'm going to do is a

00:12:28,930 --> 00:12:32,500
little prep work i'm going to walk over

00:12:30,190 --> 00:12:34,089
to the cabinet of despair i'm going to

00:12:32,500 --> 00:12:35,920
take that junk drawer of broken dreams

00:12:34,089 --> 00:12:37,860
right out of it and i'm going to set it

00:12:35,920 --> 00:12:40,470
down in the middle of the kitchen floor

00:12:37,860 --> 00:12:44,050
the formal name for this process is

00:12:40,470 --> 00:12:45,940
replace method with method object this

00:12:44,050 --> 00:12:48,220
one's in the book it's also in Katrina's

00:12:45,940 --> 00:12:50,010
talk but it's not something you use

00:12:48,220 --> 00:12:52,270
every day so here's a quick overview

00:12:50,010 --> 00:12:55,440
this is the rails controller action I

00:12:52,270 --> 00:12:57,550
have folded up the entire method body

00:12:55,440 --> 00:12:59,470
the first thing I do is create a new

00:12:57,550 --> 00:13:02,440
object that's named more or less after

00:12:59,470 --> 00:13:05,230
the original method I take the entire

00:13:02,440 --> 00:13:07,420
body of the method and move it out into

00:13:05,230 --> 00:13:09,490
the new object then back in the original

00:13:07,420 --> 00:13:15,100
method which is now empty create that

00:13:09,490 --> 00:13:16,779
object and invoke it that doesn't

00:13:15,100 --> 00:13:18,160
actually work yet because the code that

00:13:16,779 --> 00:13:20,050
I just moved over has a bunch of calls

00:13:18,160 --> 00:13:21,490
two params and render and redirect to

00:13:20,050 --> 00:13:23,890
you because it was in a controller so I

00:13:21,490 --> 00:13:28,480
have to pass in a controller to this

00:13:23,890 --> 00:13:30,339
thing at this point I have a choice I

00:13:28,480 --> 00:13:32,350
can go through the transplanted method

00:13:30,339 --> 00:13:34,750
and i can add add controller dot at the

00:13:32,350 --> 00:13:37,060
beginning of everything that is raising

00:13:34,750 --> 00:13:39,310
up no method error but that sounds a lot

00:13:37,060 --> 00:13:46,750
like work so i'm going to take door

00:13:39,310 --> 00:13:53,500
number two and use method missing it

00:13:46,750 --> 00:13:55,060
gets better I could I could use delegate

00:13:53,500 --> 00:13:58,360
I did that in one of the passes I that I

00:13:55,060 --> 00:13:59,770
took at this code so now all of those

00:13:58,360 --> 00:14:02,350
calls are going to get past back to the

00:13:59,770 --> 00:14:03,459
controller so now that I have this junk

00:14:02,350 --> 00:14:05,290
drawer out in the middle of the floor

00:14:03,459 --> 00:14:07,540
i'm going to start picking things up

00:14:05,290 --> 00:14:08,650
from it from the top layer one at a time

00:14:07,540 --> 00:14:11,920
and i'm gonna hold them up and i'm going

00:14:08,650 --> 00:14:13,540
to say it to be or not to be or what is

00:14:11,920 --> 00:14:17,620
this thing and why is and what it why is

00:14:13,540 --> 00:14:19,390
it here the first thing I see when I do

00:14:17,620 --> 00:14:22,420
this is an if-else end structure that

00:14:19,390 --> 00:14:24,010
branches on request xhr first time I

00:14:22,420 --> 00:14:26,200
went through this xhr was new to me but

00:14:24,010 --> 00:14:28,990
I looked in the docs and I saw that it's

00:14:26,200 --> 00:14:31,390
an alias for xml httprequest

00:14:28,990 --> 00:14:33,550
so I guess I must be looking at

00:14:31,390 --> 00:14:36,100
different handling for Ajax requests and

00:14:33,550 --> 00:14:39,070
everything else which i guess is HTML ok

00:14:36,100 --> 00:14:41,170
so i unfold the next layer of code and I

00:14:39,070 --> 00:14:42,339
see a begin statement and then I see

00:14:41,170 --> 00:14:44,680
something that checks to see if the

00:14:42,339 --> 00:14:46,570
insulation spending a credit check if so

00:14:44,680 --> 00:14:49,000
it renders and returns I know what this

00:14:46,570 --> 00:14:50,649
is this is a guard clause I wonder if

00:14:49,000 --> 00:14:54,700
there's one of the else branch to so I

00:14:50,649 --> 00:14:56,110
unfold that well I do see that same

00:14:54,700 --> 00:14:58,660
pending credit check thing but it's

00:14:56,110 --> 00:14:59,830
indented differently oh I see it's not

00:14:58,660 --> 00:15:02,470
in a begin and where the other one is

00:14:59,830 --> 00:15:07,209
and also it doesn't appear to return

00:15:02,470 --> 00:15:10,330
what the who writes this so maybe this

00:15:07,209 --> 00:15:12,339
isn't a guard cause after all and after

00:15:10,330 --> 00:15:15,490
a minute or two of get blame and

00:15:12,339 --> 00:15:22,779
swearing something catches my eye way

00:15:15,490 --> 00:15:28,480
out at the end of this line there is a

00:15:22,779 --> 00:15:30,010
return statement after all so I'll take

00:15:28,480 --> 00:15:33,160
out the end and put the return on a new

00:15:30,010 --> 00:15:34,480
line as for the asymmetry with the begin

00:15:33,160 --> 00:15:36,640
end block that turns out not to be a big

00:15:34,480 --> 00:15:37,750
deal so now that I've identified a chunk

00:15:36,640 --> 00:15:39,160
of code on both sides that does

00:15:37,750 --> 00:15:40,930
something I want to get it out of the

00:15:39,160 --> 00:15:42,190
ways but I don't have to keep looking at

00:15:40,930 --> 00:15:44,950
it and remembering what I just went

00:15:42,190 --> 00:15:46,720
through so I made a copy of that if else

00:15:44,950 --> 00:15:49,589
and I just moved each of the guard

00:15:46,720 --> 00:15:51,970
clauses up into the appropriate branch I

00:15:49,589 --> 00:15:54,190
I'm ready to fold this section up in

00:15:51,970 --> 00:15:57,579
move on but when I do that I see some

00:15:54,190 --> 00:15:59,290
duplication now I've had the dry

00:15:57,579 --> 00:16:01,930
principle hammered into me don't repeat

00:15:59,290 --> 00:16:03,730
yourself so I unfold it again and

00:16:01,930 --> 00:16:05,800
suddenly I notice that there are two

00:16:03,730 --> 00:16:07,060
pairs of duplicated if statements the

00:16:05,800 --> 00:16:09,850
ones that I started with and the one

00:16:07,060 --> 00:16:11,079
that I just made right now it looks like

00:16:09,850 --> 00:16:13,720
no matter what I do I'm going to have

00:16:11,079 --> 00:16:14,770
some duplication here I'm not sure how

00:16:13,720 --> 00:16:16,600
I'm going to deal with this yet but

00:16:14,770 --> 00:16:20,589
something else about this thing on the

00:16:16,600 --> 00:16:23,130
top is making my brain all itchy what I

00:16:20,589 --> 00:16:26,770
want is for this code to tell me a story

00:16:23,130 --> 00:16:29,320
I've begun extracting a preface but it

00:16:26,770 --> 00:16:31,420
still doesn't sound quite right this

00:16:29,320 --> 00:16:32,740
chunk of code does one thing if the

00:16:31,420 --> 00:16:34,300
installation is pending a credit check

00:16:32,740 --> 00:16:35,800
at complaints to the user and dies but

00:16:34,300 --> 00:16:39,430
the first thing that the reader

00:16:35,800 --> 00:16:41,529
encounters is hi there oh did you know

00:16:39,430 --> 00:16:42,690
for Ajax of HTML I do different things

00:16:41,529 --> 00:16:47,190
isn't that excite

00:16:42,690 --> 00:16:50,010
and every song every single time I look

00:16:47,190 --> 00:16:51,840
at this that's what I see so I have an

00:16:50,010 --> 00:16:53,910
idea which is to make the condition that

00:16:51,840 --> 00:16:56,460
triggers the guard clause be the first

00:16:53,910 --> 00:17:00,480
line of the guard clause sounds radical

00:16:56,460 --> 00:17:02,190
I know this is my interpretation of a

00:17:00,480 --> 00:17:04,470
refactoring technique called flattened

00:17:02,190 --> 00:17:06,600
nested conditionals this one's not in

00:17:04,470 --> 00:17:09,120
the book I stumbled across it in a dr.

00:17:06,600 --> 00:17:10,530
Dobbs article by Michael feathers I'm

00:17:09,120 --> 00:17:14,370
telling you this so that if you need it

00:17:10,530 --> 00:17:16,020
you can go look for it later here's the

00:17:14,370 --> 00:17:19,079
theory there are two conditions here

00:17:16,020 --> 00:17:21,420
request xhr and installation pending

00:17:19,079 --> 00:17:22,709
credit check to make these slides a

00:17:21,420 --> 00:17:24,329
little bit easier to follow I'm going to

00:17:22,709 --> 00:17:26,880
replace those with two variables Ajax

00:17:24,329 --> 00:17:29,130
and pending credit check and now we have

00:17:26,880 --> 00:17:31,740
two variables and two chunks of code

00:17:29,130 --> 00:17:33,240
each chunk of code will only be executed

00:17:31,740 --> 00:17:35,790
with a particular combination of those

00:17:33,240 --> 00:17:38,010
two variables right now those conditions

00:17:35,790 --> 00:17:40,650
are implicit in the structure of the

00:17:38,010 --> 00:17:42,030
code but as long as we only execute each

00:17:40,650 --> 00:17:43,770
of those chunks of code under the same

00:17:42,030 --> 00:17:46,770
conditions we're free to use whatever

00:17:43,770 --> 00:17:49,260
control structures we want i'm going to

00:17:46,770 --> 00:17:54,540
start small by taking this if else and

00:17:49,260 --> 00:17:56,250
turning it into if and if not now i have

00:17:54,540 --> 00:18:02,760
two stiff statements each of which has

00:17:56,250 --> 00:18:08,460
an if statement inside it I can just end

00:18:02,760 --> 00:18:10,500
those conditions together and now

00:18:08,460 --> 00:18:13,350
pending credit check is common to both

00:18:10,500 --> 00:18:15,570
of those so I can pull it out this is

00:18:13,350 --> 00:18:17,100
the inverse of that flattened nested

00:18:15,570 --> 00:18:19,440
conditionals but this time I'm taking

00:18:17,100 --> 00:18:23,640
the other variable and pulling it out to

00:18:19,440 --> 00:18:26,610
the top everybody with me so far okay I

00:18:23,640 --> 00:18:29,010
see nothing good now I can take those

00:18:26,610 --> 00:18:31,530
two if statements and turn the back into

00:18:29,010 --> 00:18:32,790
one if else statement and because that

00:18:31,530 --> 00:18:34,230
return statement is common to both

00:18:32,790 --> 00:18:38,790
branches i can factor it out to the

00:18:34,230 --> 00:18:43,620
bottom here's what I started with here's

00:18:38,790 --> 00:18:45,570
where I wound up these two snippets of

00:18:43,620 --> 00:18:47,760
code do exactly the same thing but in

00:18:45,570 --> 00:18:48,990
the one on the right the reason for the

00:18:47,760 --> 00:18:50,520
guard Clause is right up there at the

00:18:48,990 --> 00:18:53,100
top and the response handling that's

00:18:50,520 --> 00:18:54,900
inside it is secondary and in fact it's

00:18:53,100 --> 00:18:56,020
so secondary that I don't want to look

00:18:54,900 --> 00:18:58,070
at it right now

00:18:56,020 --> 00:19:00,560
because that return statement is now out

00:18:58,070 --> 00:19:02,000
of the way I can take that chunk of code

00:19:00,560 --> 00:19:05,000
and I can extract it out into its own

00:19:02,000 --> 00:19:06,320
method at this point I'm down to a four

00:19:05,000 --> 00:19:07,760
line guard clause which is about the

00:19:06,320 --> 00:19:14,270
smallest I can get it so I'm good with

00:19:07,760 --> 00:19:15,470
this part next up I spent first time I

00:19:14,270 --> 00:19:17,170
encountered this code I spent three or

00:19:15,470 --> 00:19:19,190
four hours banging my head on this and

00:19:17,170 --> 00:19:20,690
eventually I came up with a terrible

00:19:19,190 --> 00:19:25,250
hack which I will now summarize for your

00:19:20,690 --> 00:19:26,270
entertainment so let's say I have some

00:19:25,250 --> 00:19:29,600
code that may or may not raise an

00:19:26,270 --> 00:19:30,770
exception I can wrap that code in and

00:19:29,600 --> 00:19:33,200
begin and an end and it will behave

00:19:30,770 --> 00:19:35,510
exactly the same way if an exception is

00:19:33,200 --> 00:19:37,100
raised it probably propagates up the

00:19:35,510 --> 00:19:39,950
stack and otherwise execution continues

00:19:37,100 --> 00:19:42,110
out the bottom is normal now begin and

00:19:39,950 --> 00:19:43,670
end look kind of sealed silt excuse me

00:19:42,110 --> 00:19:46,160
look kind of silly without a rescue

00:19:43,670 --> 00:19:47,780
clause so I'll add one but rescuing an

00:19:46,160 --> 00:19:48,950
exception now changes the behavior of

00:19:47,780 --> 00:19:50,540
this code so i have to take that

00:19:48,950 --> 00:19:54,620
exception that i just rescued andrey

00:19:50,540 --> 00:19:56,900
raise it right away so let's say that

00:19:54,620 --> 00:19:59,270
that code already has some exception

00:19:56,900 --> 00:20:01,790
handling wrapped around it and let's say

00:19:59,270 --> 00:20:05,930
that it has some weird conditional logic

00:20:01,790 --> 00:20:07,490
like wrenching on request type now

00:20:05,930 --> 00:20:10,630
technically the rescue claws at the

00:20:07,490 --> 00:20:12,830
bottom still preserves behavior but

00:20:10,630 --> 00:20:14,480
which is to say anything that's raised

00:20:12,830 --> 00:20:17,150
above whether or not it gets raised and

00:20:14,480 --> 00:20:19,550
how will be re raised as is below but I

00:20:17,150 --> 00:20:24,050
am perfectly free to mirror that same

00:20:19,550 --> 00:20:25,520
structure in the rescue Clause of juice

00:20:24,050 --> 00:20:28,850
is not trying to strangle me yet so I'm

00:20:25,520 --> 00:20:30,860
good so now I can take the exception

00:20:28,850 --> 00:20:33,980
handling from one side and move it down

00:20:30,860 --> 00:20:35,720
to the bottom I can take the exception

00:20:33,980 --> 00:20:37,400
handling from the other side and see

00:20:35,720 --> 00:20:41,900
where this is going move it down to the

00:20:37,400 --> 00:20:46,610
bottom now this if else is completely

00:20:41,900 --> 00:20:48,890
empty I can delete it not leave this

00:20:46,610 --> 00:20:52,790
rescue Clause completely empty I can

00:20:48,890 --> 00:20:58,670
prune that and hey look a pointless

00:20:52,790 --> 00:21:00,530
begin and end they can go and this weird

00:20:58,670 --> 00:21:01,940
gnarly exception handling code is still

00:21:00,530 --> 00:21:03,290
a mess it's the same mess that it used

00:21:01,940 --> 00:21:05,390
to be but here's the important thing

00:21:03,290 --> 00:21:07,610
it's a mess that only does one thing and

00:21:05,390 --> 00:21:08,800
it's by itself which means I can give

00:21:07,610 --> 00:21:17,740
that mess a name and get

00:21:08,800 --> 00:21:19,540
out of my face as I kept working with

00:21:17,740 --> 00:21:21,430
this code I use the same tactic again

00:21:19,540 --> 00:21:23,800
and again which was to take that

00:21:21,430 --> 00:21:25,270
question of what kind of request is this

00:21:23,800 --> 00:21:27,700
and push it down just one level of

00:21:25,270 --> 00:21:29,920
indentation then I can isolate the next

00:21:27,700 --> 00:21:32,380
bit of behavior and extract that into a

00:21:29,920 --> 00:21:33,880
method I want to leave some surprises in

00:21:32,380 --> 00:21:35,950
case any of you would like to play with

00:21:33,880 --> 00:21:37,780
this code yourself but I thought it

00:21:35,950 --> 00:21:39,790
would kind of fun to do a sort of wide

00:21:37,780 --> 00:21:41,950
angle time lapse of the rest of the

00:21:39,790 --> 00:21:44,230
changes to this method if you're so

00:21:41,950 --> 00:21:47,560
inclined i encourage you to softly hum

00:21:44,230 --> 00:21:53,310
the power ballad of your choice here we

00:21:47,560 --> 00:21:53,310
go softly

00:22:03,250 --> 00:22:09,420
anybody want to see it again all right

00:22:06,460 --> 00:22:09,420
let's go backward

00:22:16,610 --> 00:22:19,780
and forward again

00:22:24,550 --> 00:22:28,850
now this method is still more complex

00:22:27,320 --> 00:22:30,260
than I would like it to be but it's down

00:22:28,850 --> 00:22:31,610
to the point where i can hold all the

00:22:30,260 --> 00:22:34,550
details in my head as I read through it

00:22:31,610 --> 00:22:38,330
which is a vast improvement the best

00:22:34,550 --> 00:22:41,510
part is that request xhr no longer

00:22:38,330 --> 00:22:42,770
appears in this method there's still

00:22:41,510 --> 00:22:44,000
some more cleanup I can do but this is

00:22:42,770 --> 00:22:46,040
good enough for right now so let's

00:22:44,000 --> 00:22:52,850
follow that request xhr and see where it

00:22:46,040 --> 00:22:54,470
went all in all I wound up extracting

00:22:52,850 --> 00:22:57,140
five private methods that all have the

00:22:54,470 --> 00:23:01,040
same basic structure let's zoom in on

00:22:57,140 --> 00:23:05,120
one of the short ones if this is an AJAX

00:23:01,040 --> 00:23:07,640
request render surveys on otherwise set

00:23:05,120 --> 00:23:09,200
a flash message and redirect now the

00:23:07,640 --> 00:23:11,240
main method that I extracted these from

00:23:09,200 --> 00:23:14,120
mostly talks about things in the domain

00:23:11,240 --> 00:23:17,720
of the business model but this code is

00:23:14,120 --> 00:23:20,510
using words like request render JSON

00:23:17,720 --> 00:23:21,920
flash and redirect and all of those

00:23:20,510 --> 00:23:23,480
things are in the domain of the

00:23:21,920 --> 00:23:25,070
controller but they're still sitting

00:23:23,480 --> 00:23:27,740
here in this schedule installation class

00:23:25,070 --> 00:23:29,630
and now seems like a good time to at

00:23:27,740 --> 00:23:32,030
least mention a little thing called the

00:23:29,630 --> 00:23:35,960
single responsibility principle it's

00:23:32,030 --> 00:23:38,840
just SRP two friends we've been working

00:23:35,960 --> 00:23:41,330
in a class that for one of a better name

00:23:38,840 --> 00:23:42,530
I called schedule installation but if we

00:23:41,330 --> 00:23:44,320
were going to name this class according

00:23:42,530 --> 00:23:48,100
to the responsibilities that already has

00:23:44,320 --> 00:23:48,100
it might look something like this

00:23:50,040 --> 00:23:57,190
every and in this name is an srp

00:23:53,500 --> 00:23:59,710
violation and these SRP violations were

00:23:57,190 --> 00:24:04,240
all along in the original method excuse

00:23:59,710 --> 00:24:06,400
me for a moment I forgot to get my props

00:24:04,240 --> 00:24:08,850
out I was doing some light reading on

00:24:06,400 --> 00:24:11,170
the plane this is sandy metz's book and

00:24:08,850 --> 00:24:13,540
this sentence reached out and grabbed my

00:24:11,170 --> 00:24:16,030
attention methods like classes should

00:24:13,540 --> 00:24:17,470
have a single responsibility and my

00:24:16,030 --> 00:24:19,840
reaction on seeing this was a split

00:24:17,470 --> 00:24:23,770
second of will da followed by a massive

00:24:19,840 --> 00:24:25,720
face poem when I realized that SRP of

00:24:23,770 --> 00:24:28,780
course is defined in terms of classes

00:24:25,720 --> 00:24:33,520
and because this says class we don't

00:24:28,780 --> 00:24:38,140
think method so that was kind of a fun

00:24:33,520 --> 00:24:39,550
realization of the to srp violations

00:24:38,140 --> 00:24:41,410
that we had in the original method and

00:24:39,550 --> 00:24:43,330
we now have in this class the bigger

00:24:41,410 --> 00:24:45,190
contrast is between scheduling and

00:24:43,330 --> 00:24:46,750
installation and all of this request

00:24:45,190 --> 00:24:49,420
business so I'm going to split this

00:24:46,750 --> 00:24:50,620
class first along that boundary there

00:24:49,420 --> 00:24:52,540
are a lot of things I could name this

00:24:50,620 --> 00:24:55,930
new class but because it seems primarily

00:24:52,540 --> 00:24:59,520
concerned with managing an HTTP HTTP

00:24:55,930 --> 00:25:02,680
response I'm going to call it responder

00:24:59,520 --> 00:25:04,690
the responders job is to bridge that gap

00:25:02,680 --> 00:25:06,910
between the domain of the web the domain

00:25:04,690 --> 00:25:08,620
of the model schedule installation does

00:25:06,910 --> 00:25:10,870
its thing and when something interesting

00:25:08,620 --> 00:25:12,790
happens it just tells the responder hate

00:25:10,870 --> 00:25:14,800
something interesting happened and then

00:25:12,790 --> 00:25:16,270
it's up to the responder to decide how

00:25:14,800 --> 00:25:18,790
to represent that information in the

00:25:16,270 --> 00:25:20,230
context of the current web response now

00:25:18,790 --> 00:25:21,610
in the interest of time and keeping

00:25:20,230 --> 00:25:24,510
everybody awake I'm just going to do

00:25:21,610 --> 00:25:26,620
this next bit using boxes and arrows in

00:25:24,510 --> 00:25:29,920
the beginning there is installations

00:25:26,620 --> 00:25:31,540
controller and then we extracted a

00:25:29,920 --> 00:25:33,220
method object called scheduled installer

00:25:31,540 --> 00:25:37,030
and gave it a horrible method missing

00:25:33,220 --> 00:25:38,710
hack and now we have this responder

00:25:37,030 --> 00:25:41,410
class which is going to sit in between

00:25:38,710 --> 00:25:42,880
the two and its job is to translate hey

00:25:41,410 --> 00:25:48,430
something interesting happened in to

00:25:42,880 --> 00:25:50,800
render some JSON with that message

00:25:48,430 --> 00:25:52,570
forwarding in place I can take all of

00:25:50,800 --> 00:25:54,370
those methods that I just extracted that

00:25:52,570 --> 00:25:56,590
our private inside schedule installation

00:25:54,370 --> 00:25:59,640
and I can move them down into public

00:25:56,590 --> 00:25:59,640
methods on the responder class

00:25:59,900 --> 00:26:06,320
and now scheduled installation is

00:26:03,200 --> 00:26:08,240
looking a lot smaller but all I've done

00:26:06,320 --> 00:26:14,300
now is just move the mess off into

00:26:08,240 --> 00:26:17,750
responder right here's the shape of the

00:26:14,300 --> 00:26:21,920
responder class all of its methods now

00:26:17,750 --> 00:26:24,920
have this same form if request is xhr do

00:26:21,920 --> 00:26:27,320
this else do that this responder has an

00:26:24,920 --> 00:26:28,810
identity crisis it's constantly asking

00:26:27,320 --> 00:26:30,620
if you show you this thing or that thing

00:26:28,810 --> 00:26:32,330
fortunately there's a refactoring for

00:26:30,620 --> 00:26:36,200
this also it's called replaced

00:26:32,330 --> 00:26:38,180
conditional with polymorphism I take one

00:26:36,200 --> 00:26:41,390
tool that's designed to solve two

00:26:38,180 --> 00:26:42,950
problems but asks you to tell it every

00:26:41,390 --> 00:26:45,800
single time which problem its solving

00:26:42,950 --> 00:26:47,120
and I split it into two tools each of

00:26:45,800 --> 00:26:48,860
them solves one problem and then I only

00:26:47,120 --> 00:26:52,280
have to make that decision once as to

00:26:48,860 --> 00:26:54,500
which one I'm using the implementation

00:26:52,280 --> 00:26:56,300
on this is pure brute force copy paste

00:26:54,500 --> 00:26:58,940
the entire responder class changed names

00:26:56,300 --> 00:27:04,010
one is ajax responder one is HTML

00:26:58,940 --> 00:27:05,720
responder and then a more brute force I

00:27:04,010 --> 00:27:09,160
just delete all of the HTML stuff from

00:27:05,720 --> 00:27:13,190
the Ajax responder and vice versa and

00:27:09,160 --> 00:27:15,470
now in boxes and arrows land instead of

00:27:13,190 --> 00:27:17,660
having a responder class that was acting

00:27:15,470 --> 00:27:20,270
as our proxy between the scheduler and

00:27:17,660 --> 00:27:22,520
the controller we either have an HTML

00:27:20,270 --> 00:27:25,040
responder or any Ajax responder there is

00:27:22,520 --> 00:27:26,510
no proper responder class anymore that

00:27:25,040 --> 00:27:29,660
has been turned into a role that both of

00:27:26,510 --> 00:27:30,920
these objects play which means that we

00:27:29,660 --> 00:27:33,070
have to go back into the controller and

00:27:30,920 --> 00:27:36,380
tell it which one of these to use

00:27:33,070 --> 00:27:39,860
finally back in schedule installation I

00:27:36,380 --> 00:27:44,210
have to decide oh sorry that's a bug in

00:27:39,860 --> 00:27:46,610
my notes we pick one of these which one

00:27:44,210 --> 00:27:49,310
of these things to use and that if

00:27:46,610 --> 00:27:51,350
request xhr has moved back into the

00:27:49,310 --> 00:27:55,190
controller right where it started and

00:27:51,350 --> 00:27:59,000
there's only one of it this thing is now

00:27:55,190 --> 00:28:00,320
where it belongs there are still some

00:27:59,000 --> 00:28:01,700
more responsibilities lurking inside

00:28:00,320 --> 00:28:04,220
this code but I'm going to leave them

00:28:01,700 --> 00:28:05,510
for you to discover I found this to be a

00:28:04,220 --> 00:28:07,790
lot of fun i hope that you will enjoy it

00:28:05,510 --> 00:28:09,910
as well the rest of this is just clean

00:28:07,790 --> 00:28:09,910
up

00:28:12,480 --> 00:28:21,220
here are excuse me here are some of the

00:28:16,270 --> 00:28:24,010
things that this code taught me I began

00:28:21,220 --> 00:28:25,600
by talking about math because at so many

00:28:24,010 --> 00:28:27,940
stages along the way it felt like I was

00:28:25,600 --> 00:28:28,990
constructing a little proof or applying

00:28:27,940 --> 00:28:31,510
the distributive property of

00:28:28,990 --> 00:28:34,860
multiplication and I think that's kind

00:28:31,510 --> 00:28:37,570
of fun but not everybody does I also

00:28:34,860 --> 00:28:39,610
wanted to address the anxiety that a lot

00:28:37,570 --> 00:28:41,950
of people feel about math because I

00:28:39,610 --> 00:28:44,260
suspect that refactoring triggers a lot

00:28:41,950 --> 00:28:45,520
of the same associations and it makes

00:28:44,260 --> 00:28:46,720
people feel like they're in high school

00:28:45,520 --> 00:28:48,340
again and they just want to get it over

00:28:46,720 --> 00:28:55,200
with so they can go hang out with their

00:28:48,340 --> 00:28:57,520
friends fast characterization tests rock

00:28:55,200 --> 00:29:00,640
if you don't know what I'm talking about

00:28:57,520 --> 00:29:02,440
with this I strongly encourage you to go

00:29:00,640 --> 00:29:04,300
find katrina's talk therapeutic

00:29:02,440 --> 00:29:05,680
refactoring and go watch it she does a

00:29:04,300 --> 00:29:10,030
much better job explaining it than I

00:29:05,680 --> 00:29:13,150
will ever be able to do and when I first

00:29:10,030 --> 00:29:15,430
encountered this code it had tests that

00:29:13,150 --> 00:29:17,830
ran in about 30 seconds and they had

00:29:15,430 --> 00:29:19,630
some coverage gaps and I was up late one

00:29:17,830 --> 00:29:20,710
night couldn't sleep so I spent about an

00:29:19,630 --> 00:29:22,060
hour and a half going through the

00:29:20,710 --> 00:29:24,220
process they could treated describes in

00:29:22,060 --> 00:29:27,550
her talk when i was done i had full

00:29:24,220 --> 00:29:29,440
coverage that ran in half a second going

00:29:27,550 --> 00:29:30,940
from half a minute to half a second is

00:29:29,440 --> 00:29:32,230
incredibly liberating and i suggest that

00:29:30,940 --> 00:29:37,360
you try it sometime if you haven't

00:29:32,230 --> 00:29:44,610
already it's just so much so much more

00:29:37,360 --> 00:29:47,230
fluid I learned to embrace duplication I

00:29:44,610 --> 00:29:50,860
think that this is best illustrated by

00:29:47,230 --> 00:29:53,020
our good friend if request xhr when I

00:29:50,860 --> 00:29:54,370
started this there was one of them when

00:29:53,020 --> 00:29:56,680
I pulled the guard claws out there were

00:29:54,370 --> 00:29:59,050
two by the time I was done with the

00:29:56,680 --> 00:30:00,820
original method there were five and then

00:29:59,050 --> 00:30:02,440
I moved those five things over into

00:30:00,820 --> 00:30:05,110
public methods on responder and then i

00:30:02,440 --> 00:30:06,700
copy pasted that now they're 10 and then

00:30:05,110 --> 00:30:11,050
right after that there were one again

00:30:06,700 --> 00:30:12,820
and it was right back where it belongs

00:30:11,050 --> 00:30:15,220
in the controller if I had left the

00:30:12,820 --> 00:30:17,020
second one stop me or the third I don't

00:30:15,220 --> 00:30:18,610
know use most of the time I practiced

00:30:17,020 --> 00:30:20,860
the rule of three the third time I see

00:30:18,610 --> 00:30:23,650
something I cop I remove the duplication

00:30:20,860 --> 00:30:26,070
or if I'd let the fifth one stop me or

00:30:23,650 --> 00:30:29,200
the 10th I would have been stuck but

00:30:26,070 --> 00:30:31,350
sometimes but you know I just went with

00:30:29,200 --> 00:30:33,550
it and it led me somewhere interesting

00:30:31,350 --> 00:30:39,130
sometimes duplication tells you that

00:30:33,550 --> 00:30:42,340
you're getting somewhere embrace evil

00:30:39,130 --> 00:30:43,900
hacks the exception handling code in

00:30:42,340 --> 00:30:46,200
this example is probably the gnarliest

00:30:43,900 --> 00:30:48,880
one that I personally have ever seen

00:30:46,200 --> 00:30:51,880
sometimes putting an evil hack in is the

00:30:48,880 --> 00:30:54,340
right response to code like that making

00:30:51,880 --> 00:30:57,480
the job smaller is sometimes the first

00:30:54,340 --> 00:30:59,800
step to making it go away entirely and

00:30:57,480 --> 00:31:03,010
sometimes you just need to let ugly

00:30:59,800 --> 00:31:04,630
implementations stay ugly but this isn't

00:31:03,010 --> 00:31:06,820
just tolerating Google hacks sometimes

00:31:04,630 --> 00:31:09,370
it's fun to embrace them if you have a

00:31:06,820 --> 00:31:15,070
mustache toilet if you don't consider

00:31:09,370 --> 00:31:16,960
borrowing when another thing I hadn't

00:31:15,070 --> 00:31:20,200
expected to learn from this code is that

00:31:16,960 --> 00:31:22,450
perspective on code matters refactoring

00:31:20,200 --> 00:31:24,130
isn't just moving code around it is

00:31:22,450 --> 00:31:26,770
moving code around but it's not just

00:31:24,130 --> 00:31:28,780
moving code around you're examining this

00:31:26,770 --> 00:31:29,980
thing is an artifact turning it over and

00:31:28,780 --> 00:31:31,900
looking at it from all different angles

00:31:29,980 --> 00:31:34,270
trying to figure out what it was

00:31:31,900 --> 00:31:35,800
designed for looking at your code

00:31:34,270 --> 00:31:37,060
sideways or upside down can make

00:31:35,800 --> 00:31:38,920
different characteristics of it more

00:31:37,060 --> 00:31:41,350
obvious there were bugs in here that I

00:31:38,920 --> 00:31:44,530
did not find until I've been staring at

00:31:41,350 --> 00:31:47,470
it for an hour or two now or to

00:31:44,530 --> 00:31:48,970
paraphrase Douglas Adams superficial

00:31:47,470 --> 00:31:55,960
design flaws can sometimes conceal

00:31:48,970 --> 00:31:58,450
fundamental design flaws so

00:31:55,960 --> 00:32:00,580
what can you do to become more fluent

00:31:58,450 --> 00:32:04,480
and refactoring whether or not you're a

00:32:00,580 --> 00:32:07,570
Buffy fan you could start with the

00:32:04,480 --> 00:32:10,390
canonical book on the subject or its

00:32:07,570 --> 00:32:14,350
Ruby translation which is slightly less

00:32:10,390 --> 00:32:16,840
expensive and there's a catalogue of

00:32:14,350 --> 00:32:19,540
refactoring calm as well whichever one

00:32:16,840 --> 00:32:20,740
you use keep in mind that except for a

00:32:19,540 --> 00:32:22,540
few chapters at the front of the book

00:32:20,740 --> 00:32:24,060
these are reference materials they're

00:32:22,540 --> 00:32:26,740
not meant to be read in one sitting

00:32:24,060 --> 00:32:28,600
browse through the listings find

00:32:26,740 --> 00:32:31,690
something that catches your eye and then

00:32:28,600 --> 00:32:34,030
go practice it while I'm up here

00:32:31,690 --> 00:32:36,010
plugging books I cannot recommend sandy

00:32:34,030 --> 00:32:39,420
metz's book practical object oriented

00:32:36,010 --> 00:32:42,070
design in Ruby or puter highly enough

00:32:39,420 --> 00:32:44,560
this is all about finding different ways

00:32:42,070 --> 00:32:45,850
you can structure your code and this

00:32:44,560 --> 00:32:47,380
book will help you notice hidden

00:32:45,850 --> 00:32:49,030
responsibilities and give you plenty of

00:32:47,380 --> 00:32:54,250
ideas for structures you can refactor

00:32:49,030 --> 00:32:55,780
toward but the most important thing you

00:32:54,250 --> 00:32:59,050
can do to get better you're factoring is

00:32:55,780 --> 00:33:01,150
to practice refactoring if you use an

00:32:59,050 --> 00:33:03,550
IDE figure out how to make it do an

00:33:01,150 --> 00:33:05,140
automated refactoring it can be a lot of

00:33:03,550 --> 00:33:07,360
fun to very quickly see what different

00:33:05,140 --> 00:33:08,740
things would look like but I also

00:33:07,360 --> 00:33:12,190
recommend walking through the steps

00:33:08,740 --> 00:33:14,500
yourself a few times in the editor this

00:33:12,190 --> 00:33:16,840
will help you develop an intuition for

00:33:14,500 --> 00:33:17,770
rearranging code so that as you're

00:33:16,840 --> 00:33:23,050
reading through you can see

00:33:17,770 --> 00:33:25,510
opportunities to change things commit

00:33:23,050 --> 00:33:28,030
code every time your tests pass even if

00:33:25,510 --> 00:33:29,890
you only change one line if it's only

00:33:28,030 --> 00:33:31,590
been 30 seconds since the last time you

00:33:29,890 --> 00:33:34,630
committed and you're already confused

00:33:31,590 --> 00:33:37,300
it's often in my experience easier to

00:33:34,630 --> 00:33:39,400
just do a hard reset than to walk

00:33:37,300 --> 00:33:41,350
through undo buffers in two or three

00:33:39,400 --> 00:33:43,840
files trying to figure out what state

00:33:41,350 --> 00:33:47,740
they were all in when the last one last

00:33:43,840 --> 00:33:49,870
time the tests were passing for bigger

00:33:47,740 --> 00:33:53,770
messes do not merge the first thing you

00:33:49,870 --> 00:33:55,660
try use the throwaway branch play around

00:33:53,770 --> 00:33:58,000
hair on it with a few different people

00:33:55,660 --> 00:33:59,620
show it to a friend that it aside for a

00:33:58,000 --> 00:34:02,830
few days then come back and start over

00:33:59,620 --> 00:34:04,900
again and if you do find yourself doing

00:34:02,830 --> 00:34:07,030
this process of revisiting a particular

00:34:04,900 --> 00:34:08,530
problem for practice go ahead and spend

00:34:07,030 --> 00:34:09,780
the time to write some fast

00:34:08,530 --> 00:34:12,820
characterization tests

00:34:09,780 --> 00:34:15,700
tests are feedback and it's really fun

00:34:12,820 --> 00:34:20,950
and liberating to get that feedback as

00:34:15,700 --> 00:34:23,050
rapidly as you can this slide is

00:34:20,950 --> 00:34:27,550
obligatory i worked at livingsocial we

00:34:23,050 --> 00:34:30,520
are hiring there are at least a handful

00:34:27,550 --> 00:34:32,500
of us here in Texas I'm in Portland I do

00:34:30,520 --> 00:34:38,320
a lot of remote pairing doesn't doesn't

00:34:32,500 --> 00:34:39,490
always matter where you are and if you

00:34:38,320 --> 00:34:41,950
would like to play the with this code

00:34:39,490 --> 00:34:44,050
yourself it will be on github as soon as

00:34:41,950 --> 00:34:45,339
I get around to putting it there the

00:34:44,050 --> 00:34:47,020
repo is up there right now so you can

00:34:45,339 --> 00:34:50,500
book market if you want to there's

00:34:47,020 --> 00:34:52,619
nothing in it yet and with that thank

00:34:50,500 --> 00:34:52,619

YouTube URL: https://www.youtube.com/watch?v=xJZrMbS2dDk


