Title: Some Things are Worth Learning... - North West Ruby User Group - May 2018
Publication date: 2018-05-23
Playlist: North West Ruby User Group
Description: 
	Git submodules - making them usable - Sam Phillips
Captions: 
	00:00:00,060 --> 00:00:06,270
I'm Sam I work at resident Li this is my

00:00:03,480 --> 00:00:08,670
first n drug talk in six years where I

00:00:06,270 --> 00:00:10,920
did a plus six I did a live demo of

00:00:08,670 --> 00:00:12,570
capybara to a live system without any

00:00:10,920 --> 00:00:15,269
internet at the BBC it was a real

00:00:12,570 --> 00:00:20,340
disaster so I had three points during

00:00:15,269 --> 00:00:21,660
that talk today's talk is it titled some

00:00:20,340 --> 00:00:23,310
things are worth learning even though

00:00:21,660 --> 00:00:26,810
they're not that intuitive and get

00:00:23,310 --> 00:00:29,970
sub-modules might be one of them so I

00:00:26,810 --> 00:00:31,289
like Ruby and I like doing some stuff

00:00:29,970 --> 00:00:33,300
and I'm in a new team at the moment

00:00:31,289 --> 00:00:35,160
where we've got a load of Greenfield so

00:00:33,300 --> 00:00:36,630
sometimes I take these decisions that

00:00:35,160 --> 00:00:38,430
I've been making my whole career like

00:00:36,630 --> 00:00:40,590
well that's a bit hard to learn now I

00:00:38,430 --> 00:00:42,660
won't bother doing it and we re-examine

00:00:40,590 --> 00:00:44,629
those and we've got this cool team now

00:00:42,660 --> 00:00:47,340
that like says well we're smart people

00:00:44,629 --> 00:00:49,200
why must we act so stupid the whole time

00:00:47,340 --> 00:00:52,649
why don't we try doing some things that

00:00:49,200 --> 00:00:54,000
are actually a little difficult so I

00:00:52,649 --> 00:00:56,430
think of things like that are fun

00:00:54,000 --> 00:00:58,590
trolling that maybe we shouldn't do well

00:00:56,430 --> 00:01:00,960
they are fun I think of things they're

00:00:58,590 --> 00:01:02,730
efficient but dangerous and I think of

00:01:00,960 --> 00:01:04,860
things that are good but not intuitive I

00:01:02,730 --> 00:01:09,090
have some Ruby examples I'm a ruby

00:01:04,860 --> 00:01:12,990
developer a good piece of code that I

00:01:09,090 --> 00:01:14,790
enjoy is the eye with the parentheses

00:01:12,990 --> 00:01:16,439
obviously you can use the braces and

00:01:14,790 --> 00:01:18,900
Ruby's very nice and it matches the

00:01:16,439 --> 00:01:21,390
braces for you but as you know you can

00:01:18,900 --> 00:01:24,240
actually go full troll and use the

00:01:21,390 --> 00:01:27,000
percentage sign as the delimiter or the

00:01:24,240 --> 00:01:33,530
tilled or the dollar you can't use the

00:01:27,000 --> 00:01:35,759
aeroplane or the smiley face question

00:01:33,530 --> 00:01:40,259
non-breaking I don't you know what I

00:01:35,759 --> 00:01:45,329
wanted to do well as she wanted to do

00:01:40,259 --> 00:01:46,619
was null bite but I you know I do you

00:01:45,329 --> 00:01:48,600
know how long it takes to get like nice

00:01:46,619 --> 00:01:52,530
code onto these slides there was no time

00:01:48,600 --> 00:01:54,649
for null bite you can do efficient but

00:01:52,530 --> 00:01:56,670
dangerous things I did a lot of Perl

00:01:54,649 --> 00:01:58,590
some of you will know I wrote on the

00:01:56,670 --> 00:02:01,049
beach and we wrote all that in Perl I

00:01:58,590 --> 00:02:02,909
did a lot of Perl before and you can do

00:02:01,049 --> 00:02:05,939
cool things like randomly for a regex

00:02:02,909 --> 00:02:07,610
statement in and in dollar one will be

00:02:05,939 --> 00:02:11,280
the result of the first capture group

00:02:07,610 --> 00:02:12,720
cool until somebody whacks another 50

00:02:11,280 --> 00:02:13,890
lines of code here and then you don't

00:02:12,720 --> 00:02:18,690
know what the hell's going on right

00:02:13,890 --> 00:02:20,160
efficient but dangerous Ruby actually I

00:02:18,690 --> 00:02:21,840
couldn't find my favorite one of these

00:02:20,160 --> 00:02:23,640
but there's loads of them where like you

00:02:21,840 --> 00:02:27,900
just like randomly throw a load of crap

00:02:23,640 --> 00:02:32,370
into hash brace and like nice hash comes

00:02:27,900 --> 00:02:34,140
out wasn't happy about that one it's

00:02:32,370 --> 00:02:35,400
efficient sometimes you can stack

00:02:34,140 --> 00:02:36,870
overflow yeah I want to do this thing in

00:02:35,400 --> 00:02:38,250
there like you can do it I'm like I

00:02:36,870 --> 00:02:42,510
won't be won't be doing that

00:02:38,250 --> 00:02:44,970
oh I'm slipping there are some things

00:02:42,510 --> 00:02:46,920
that I think are good and not intuitive

00:02:44,970 --> 00:02:49,500
right I quite like the fact that you

00:02:46,920 --> 00:02:51,480
don't need to put braces around an Ivar

00:02:49,500 --> 00:02:53,190
when you're doing interpolation into a

00:02:51,480 --> 00:02:56,310
string I quite like that

00:02:53,190 --> 00:02:57,030
the lure developers in my team go YV

00:02:56,310 --> 00:03:01,890
done this Sam

00:02:57,030 --> 00:03:03,540
that won't work Sam I also like a piece

00:03:01,890 --> 00:03:06,510
of code that not a lot of people do like

00:03:03,540 --> 00:03:10,260
which is you can do a here dark but you

00:03:06,510 --> 00:03:13,470
can close the method call during the

00:03:10,260 --> 00:03:17,250
here dark even the syntax highlighter

00:03:13,470 --> 00:03:18,330
doesn't work on this but I quite like

00:03:17,250 --> 00:03:19,980
this we've got a lot of stuff where

00:03:18,330 --> 00:03:21,360
we're kicking json around so it's nice

00:03:19,980 --> 00:03:23,489
to be able to whack a load of json and

00:03:21,360 --> 00:03:26,400
not have to the closing bracket to the

00:03:23,489 --> 00:03:32,010
string like 25 lines down right I don't

00:03:26,400 --> 00:03:34,410
know so we had a problem quite a common

00:03:32,010 --> 00:03:36,269
problem we did we have done a services

00:03:34,410 --> 00:03:42,000
architecture I won't say micro services

00:03:36,269 --> 00:03:43,769
because you know but we got this thing

00:03:42,000 --> 00:03:45,900
where we've got all the services want to

00:03:43,769 --> 00:03:47,940
call all the other services and what we

00:03:45,900 --> 00:03:49,709
really wanted like everywhere else was

00:03:47,940 --> 00:03:50,850
to have a class in each service that

00:03:49,709 --> 00:03:52,920
represented the data and the other

00:03:50,850 --> 00:03:57,540
services so nobody had to worry about

00:03:52,920 --> 00:03:59,910
HTTP transport or whatever right so we

00:03:57,540 --> 00:04:02,489
thought we want to share a load of code

00:03:59,910 --> 00:04:03,780
between various services now the way

00:04:02,489 --> 00:04:07,350
I've done this before used to wear

00:04:03,780 --> 00:04:09,420
comfortable shuttle and we had private

00:04:07,350 --> 00:04:11,220
we used gem fury but we use private gems

00:04:09,420 --> 00:04:13,829
with all these bits of code in and it

00:04:11,220 --> 00:04:14,670
was a full nightmare but I was scared to

00:04:13,829 --> 00:04:15,900
get sub-modules

00:04:14,670 --> 00:04:19,560
and people get saying well we just use

00:04:15,900 --> 00:04:21,959
get some modular I'm like neck but

00:04:19,560 --> 00:04:23,340
downsides of private gems are many and I

00:04:21,959 --> 00:04:26,880
don't think it's about learning

00:04:23,340 --> 00:04:28,950
I think it's ongoing misery forever

00:04:26,880 --> 00:04:30,570
the permissions for like this

00:04:28,950 --> 00:04:33,030
third-party gem thing was super

00:04:30,570 --> 00:04:35,640
complicated and we had to like have all

00:04:33,030 --> 00:04:36,810
these API keys and stuff every time and

00:04:35,640 --> 00:04:39,510
I'm boarding a new person was a

00:04:36,810 --> 00:04:41,700
nightmare and I just hated it and

00:04:39,510 --> 00:04:43,890
although I'm trying to tell you that get

00:04:41,700 --> 00:04:45,780
sub modules are worth learning this is a

00:04:43,890 --> 00:04:48,690
learning curve too but I didn't feel

00:04:45,780 --> 00:04:51,390
happy after it so I didn't like private

00:04:48,690 --> 00:04:53,880
gems too much so I decided maybe it's

00:04:51,390 --> 00:04:56,370
time to do some actual reading maybe

00:04:53,880 --> 00:04:57,930
it's time to stop being just so lazy and

00:04:56,370 --> 00:05:00,990
thinking we're too stupid to learn and

00:04:57,930 --> 00:05:02,520
news get sub modules so here's how you

00:05:00,990 --> 00:05:04,560
actually use these things which

00:05:02,520 --> 00:05:06,770
basically aren't bad but all the

00:05:04,560 --> 00:05:10,500
commands are stupid

00:05:06,770 --> 00:05:12,810
you ought to add a get sub module to

00:05:10,500 --> 00:05:14,040
your code you do get sub module add you

00:05:12,810 --> 00:05:18,510
at the path to the git and you give it

00:05:14,040 --> 00:05:21,180
path to the directory then you do get

00:05:18,510 --> 00:05:22,980
status and the dock get modules and the

00:05:21,180 --> 00:05:26,030
vendor thing that you want to lacy

00:05:22,980 --> 00:05:29,850
saying modules so I go with some mod

00:05:26,030 --> 00:05:34,560
they'll be there and you just commit

00:05:29,850 --> 00:05:36,540
them pretty simple stuff you want to

00:05:34,560 --> 00:05:38,430
make a change that sub module commit in

00:05:36,540 --> 00:05:42,600
the sub module push on the sub module

00:05:38,430 --> 00:05:45,090
and then you go into the repos that use

00:05:42,600 --> 00:05:48,450
that sub module and you do get sub

00:05:45,090 --> 00:05:50,790
module update - - remote is that remote

00:05:48,450 --> 00:05:56,720
I haven't written remove good that does

00:05:50,790 --> 00:05:59,760
something different simple stuff right

00:05:56,720 --> 00:06:01,740
and that pulls in the latest version of

00:05:59,760 --> 00:06:03,750
head you can do fancy things where you

00:06:01,740 --> 00:06:08,930
use the you can bring in given showers

00:06:03,750 --> 00:06:11,010
and stuff but yeah and then that

00:06:08,930 --> 00:06:14,330
directory is just modified and you can

00:06:11,010 --> 00:06:17,100
just commit it if you change your mind

00:06:14,330 --> 00:06:19,080
as normally in get you go get check out

00:06:17,100 --> 00:06:21,120
- - dot and everything disappears no

00:06:19,080 --> 00:06:25,560
it's still there it won't go away and

00:06:21,120 --> 00:06:28,220
the allow us better delete this know the

00:06:25,560 --> 00:06:31,050
perfectly named get sub module update

00:06:28,220 --> 00:06:32,760
will in fact reset the sub module to the

00:06:31,050 --> 00:06:35,520
state that it was at before you started

00:06:32,760 --> 00:06:39,510
you know doing what you did and cloning

00:06:35,520 --> 00:06:41,540
stuff so I guess I should feel reset or

00:06:39,510 --> 00:06:44,790
something I don't

00:06:41,540 --> 00:06:46,470
if you clone a new repo the house of

00:06:44,790 --> 00:06:48,780
modules in it you need to do some sweet

00:06:46,470 --> 00:06:51,360
commands and these are get sub module in

00:06:48,780 --> 00:06:54,480
it I won't do the alley D impression on

00:06:51,360 --> 00:06:57,090
camera get sub module and your old

00:06:54,480 --> 00:06:59,550
friend get sub module update brings that

00:06:57,090 --> 00:07:02,070
code in to your thing I've not got to

00:06:59,550 --> 00:07:06,660
push a gem I've not added to the dirt I

00:07:02,070 --> 00:07:08,460
just have my code that's quite nice one

00:07:06,660 --> 00:07:10,380
thing that I learnt from thought works

00:07:08,460 --> 00:07:11,760
developers of which there may be some in

00:07:10,380 --> 00:07:13,980
the room is they like a thing called a

00:07:11,760 --> 00:07:15,630
go script I've heard of places where you

00:07:13,980 --> 00:07:17,220
go there and they tell you how to

00:07:15,630 --> 00:07:19,860
install everything with like pages of

00:07:17,220 --> 00:07:22,169
wiki I'm very lazy so all of our repos

00:07:19,860 --> 00:07:24,510
have this script called go it's written

00:07:22,169 --> 00:07:25,950
by the way sublime or whatever gets real

00:07:24,510 --> 00:07:28,140
confused by bash script that's just

00:07:25,950 --> 00:07:30,360
called go and I'm at a times I've been

00:07:28,140 --> 00:07:34,890
like what is this syntax I think it

00:07:30,360 --> 00:07:36,660
thinks it's go but every one of a repos

00:07:34,890 --> 00:07:38,160
have these scripts most and written bash

00:07:36,660 --> 00:07:40,500
but they don't have to be and they all

00:07:38,160 --> 00:07:45,930
respond to a few commands like install

00:07:40,500 --> 00:07:47,790
and run so git clone go install go run

00:07:45,930 --> 00:07:49,500
and we've just baked all the sub-module

00:07:47,790 --> 00:07:51,360
stuff into that so we don't even notice

00:07:49,500 --> 00:07:54,450
it and then you do git pull and get

00:07:51,360 --> 00:07:57,030
update and that's all the updates yeah

00:07:54,450 --> 00:08:00,479
they're nice they gets you conversion

00:07:57,030 --> 00:08:02,640
them you can control them you are in

00:08:00,479 --> 00:08:04,229
control over when a new version comes in

00:08:02,640 --> 00:08:06,270
a lot of people use this in a manner

00:08:04,229 --> 00:08:07,680
where every new change from every sub

00:08:06,270 --> 00:08:10,500
module is pulled in automatically

00:08:07,680 --> 00:08:12,990
that's like deleting your gem file lock

00:08:10,500 --> 00:08:16,160
every time your unbundle so it's like

00:08:12,990 --> 00:08:18,810
that's a pretty dangerous way to live

00:08:16,160 --> 00:08:20,669
easy to share the code without the

00:08:18,810 --> 00:08:22,020
coupling you can upgrade stuff much

00:08:20,669 --> 00:08:26,250
later you can leave stuff on all

00:08:22,020 --> 00:08:27,330
versions gitlab which we use which if

00:08:26,250 --> 00:08:30,630
you haven't use it it's actually pretty

00:08:27,330 --> 00:08:34,740
decent get lop has really good native

00:08:30,630 --> 00:08:39,990
support for get sub modules which is

00:08:34,740 --> 00:08:42,599
nice and we like it somebody does anyone

00:08:39,990 --> 00:08:45,839
read a fresh cup it's like the best like

00:08:42,599 --> 00:08:47,400
Ruby blog well just maybe it was good

00:08:45,839 --> 00:08:49,140
maybe it was not but there's a really

00:08:47,400 --> 00:08:51,030
sweet article that they linked to this

00:08:49,140 --> 00:08:53,820
week which is a much better introduction

00:08:51,030 --> 00:08:55,470
to get sub modules in this talk was

00:08:53,820 --> 00:08:58,080
I'm not gonna take any questions you can

00:08:55,470 --> 00:08:59,800
grab me afterwards I'm Sam it's nice

00:08:58,080 --> 00:09:02,700
talking to you

00:08:59,800 --> 00:09:02,700

YouTube URL: https://www.youtube.com/watch?v=3rYSwkSwE74


