Title: Automated Integration Testing with SitePrism - North West Ruby User Group - May 2018
Publication date: 2018-05-24
Playlist: North West Ruby User Group
Description: 
	Class based automated integrated testing using SitePrism, Luke Hill
Captions: 
	00:00:00,030 --> 00:00:04,080
so what I want to talk about is

00:00:01,860 --> 00:00:06,919
automated integration testing with site

00:00:04,080 --> 00:00:09,540
prison so as mentioned that came in to

00:00:06,919 --> 00:00:12,059
coding and development quite late I work

00:00:09,540 --> 00:00:13,469
as a tester on the beach but before I

00:00:12,059 --> 00:00:15,269
joined on the beach I'd never really

00:00:13,469 --> 00:00:16,830
experienced coding and never really

00:00:15,269 --> 00:00:18,330
experienced programming and then a

00:00:16,830 --> 00:00:20,220
couple of weeks of Java couldn't really

00:00:18,330 --> 00:00:22,890
handle it and then I come into a place

00:00:20,220 --> 00:00:24,869
that's got 4050 Ruby developers decided

00:00:22,890 --> 00:00:26,699
to pick it up over the last sort of six

00:00:24,869 --> 00:00:29,130
months I've really sort of taken on the

00:00:26,699 --> 00:00:30,990
open-source and once a mantle but I've

00:00:29,130 --> 00:00:32,640
really got into it so I've tried to get

00:00:30,990 --> 00:00:34,200
involved as many open-source projects as

00:00:32,640 --> 00:00:35,910
possible I've tried to go to as many

00:00:34,200 --> 00:00:38,219
conferences as possible listen to new

00:00:35,910 --> 00:00:39,450
people pick up new things and one of the

00:00:38,219 --> 00:00:41,370
things that I picked up about three

00:00:39,450 --> 00:00:43,050
months ago was essentially becoming the

00:00:41,370 --> 00:00:44,730
lead maintainer for this framework which

00:00:43,050 --> 00:00:47,129
was developed by a guy used to work at a

00:00:44,730 --> 00:00:48,420
contractor at the BBC he has not got

00:00:47,129 --> 00:00:50,280
enough time for it so instead of letting

00:00:48,420 --> 00:00:52,620
it wither and die I decided to pick up

00:00:50,280 --> 00:00:54,239
and try and develop it two things about

00:00:52,620 --> 00:00:56,039
that the first one was that obviously

00:00:54,239 --> 00:00:58,649
I'm coming into a project that was

00:00:56,039 --> 00:01:00,960
developed by a person so this whilst it

00:00:58,649 --> 00:01:02,820
was an open source community it was one

00:01:00,960 --> 00:01:04,710
guy who made it all so I mean and then

00:01:02,820 --> 00:01:05,939
you've got concerns about okay this is

00:01:04,710 --> 00:01:07,770
an open source framework

00:01:05,939 --> 00:01:09,750
were there any code reviews how many

00:01:07,770 --> 00:01:11,729
people were contributing to it one guy

00:01:09,750 --> 00:01:13,710
decided all of the protocols he decided

00:01:11,729 --> 00:01:15,780
how the code should be structured so the

00:01:13,710 --> 00:01:17,369
first problem with taking on site prism

00:01:15,780 --> 00:01:19,049
was trying to get this open source field

00:01:17,369 --> 00:01:20,909
get lots of people giving their ideas

00:01:19,049 --> 00:01:23,340
get people reviewing each of this code

00:01:20,909 --> 00:01:25,290
and the second thing about site prism is

00:01:23,340 --> 00:01:26,850
that when you've got a gem frameworks

00:01:25,290 --> 00:01:28,799
it's not had an update for three years

00:01:26,850 --> 00:01:30,720
and then you suddenly do an update the

00:01:28,799 --> 00:01:33,270
first thing that people think is oh what

00:01:30,720 --> 00:01:35,009
the hell's happened here so throughout

00:01:33,270 --> 00:01:37,560
this presentation I want to talk about

00:01:35,009 --> 00:01:39,030
three different things really why main

00:01:37,560 --> 00:01:40,740
issues and aversions people might have

00:01:39,030 --> 00:01:43,200
two automated integration testing and

00:01:40,740 --> 00:01:46,259
then a quick sort of how-to for making a

00:01:43,200 --> 00:01:48,600
small stack so again I'm trying to think

00:01:46,259 --> 00:01:51,869
now more from the developer why would I

00:01:48,600 --> 00:01:54,329
want to do this process so specs and

00:01:51,869 --> 00:01:56,219
unit tests cover enough specs and unit

00:01:54,329 --> 00:01:57,570
tests are fast due to the mocking nature

00:01:56,219 --> 00:01:58,860
of them and there's an extra layer of

00:01:57,570 --> 00:01:59,969
maintenance I've got to write a lot of

00:01:58,860 --> 00:02:01,890
features I've got to write a lot of

00:01:59,969 --> 00:02:03,990
cucumber integration so let's look at

00:02:01,890 --> 00:02:06,750
the first one specs and unit tests cover

00:02:03,990 --> 00:02:08,250
enough the coverage will be identical if

00:02:06,750 --> 00:02:10,020
you do automated integration testing

00:02:08,250 --> 00:02:11,160
you'll still cover the same code you'll

00:02:10,020 --> 00:02:13,290
still test the same amount of

00:02:11,160 --> 00:02:13,740
functionality the integration tests

00:02:13,290 --> 00:02:15,600
however will

00:02:13,740 --> 00:02:17,580
cover the full functionality not a mock

00:02:15,600 --> 00:02:18,870
functionality a little star next that

00:02:17,580 --> 00:02:20,040
I'm going to reference that in the next

00:02:18,870 --> 00:02:22,140
point and show you a couple of key

00:02:20,040 --> 00:02:25,080
examples actually in the site prisons

00:02:22,140 --> 00:02:26,670
testing framework that I ran on itself

00:02:25,080 --> 00:02:29,580
so in other words the test that we test

00:02:26,670 --> 00:02:33,240
on the site prison framework specs and

00:02:29,580 --> 00:02:33,990
unit tests are fast you - mocking hands

00:02:33,240 --> 00:02:36,360
up yeah

00:02:33,990 --> 00:02:37,410
can't really argue against that a unit

00:02:36,360 --> 00:02:39,150
test will always be faster than an

00:02:37,410 --> 00:02:41,130
integration test I'm not really gonna

00:02:39,150 --> 00:02:43,440
argue against that however one thing I

00:02:41,130 --> 00:02:45,000
will argue against is that there's

00:02:43,440 --> 00:02:46,500
always this perception that when you're

00:02:45,000 --> 00:02:48,300
running a feature test whether it's

00:02:46,500 --> 00:02:50,310
browser automation whether it's an API

00:02:48,300 --> 00:02:52,290
layer that they're always slower than

00:02:50,310 --> 00:02:53,820
unit tests well yes they are but they

00:02:52,290 --> 00:02:55,800
don't have to be really slow they can

00:02:53,820 --> 00:02:58,620
actually quite quick if you do a little

00:02:55,800 --> 00:03:00,270
bit of clever planning and also spend a

00:02:58,620 --> 00:03:02,310
little bit more time designing how you

00:03:00,270 --> 00:03:04,260
want the original framework to look like

00:03:02,310 --> 00:03:06,360
and I'll show a little bit about that on

00:03:04,260 --> 00:03:09,840
the next slide extra layer of

00:03:06,360 --> 00:03:12,240
maintenance so possibly controversially

00:03:09,840 --> 00:03:14,310
I think this is a bit of a misnomer unit

00:03:12,240 --> 00:03:16,290
tests do have less initial setup than an

00:03:14,310 --> 00:03:18,120
integration test because a unit test you

00:03:16,290 --> 00:03:19,470
write three lines there's a spec you

00:03:18,120 --> 00:03:22,080
write three lines in mini tests or in

00:03:19,470 --> 00:03:23,310
r-spec it's done with a feature test you

00:03:22,080 --> 00:03:25,440
need to create a stack you need to

00:03:23,310 --> 00:03:27,570
create a browser instantiation you do a

00:03:25,440 --> 00:03:29,310
little bit more work however going

00:03:27,570 --> 00:03:31,290
forwards when you've got a big framework

00:03:29,310 --> 00:03:33,480
so on the beach the automation

00:03:31,290 --> 00:03:36,510
frameworks got about 350 scenarios and

00:03:33,480 --> 00:03:38,040
that we reckon it only covers 20% if we

00:03:36,510 --> 00:03:40,860
wanted to add another feature tomorrow

00:03:38,040 --> 00:03:42,780
we'd add the feature code it takes five

00:03:40,860 --> 00:03:44,010
ten minutes and the amount of supporting

00:03:42,780 --> 00:03:45,960
code we need to add would only be the

00:03:44,010 --> 00:03:48,600
bare minimum because you've already got

00:03:45,960 --> 00:03:50,970
that bare-bones there now let's rewind

00:03:48,600 --> 00:03:53,160
and do that same analogy again but with

00:03:50,970 --> 00:03:55,200
a unit test so we've got 350 unit tests

00:03:53,160 --> 00:03:57,090
we want to add another unit test there's

00:03:55,200 --> 00:03:58,710
pretty much nothing that can get reused

00:03:57,090 --> 00:04:00,210
you'd have to create a new unit test if

00:03:58,710 --> 00:04:01,770
you even if you were adding on to an

00:04:00,210 --> 00:04:03,750
existing unit test the same amount of

00:04:01,770 --> 00:04:04,980
code needs to get written so actually

00:04:03,750 --> 00:04:07,320
when you're going forward in a bigger

00:04:04,980 --> 00:04:09,480
stack extra integration tests almost

00:04:07,320 --> 00:04:12,600
become slightly easier to implement than

00:04:09,480 --> 00:04:14,670
extra unit tests again going back to the

00:04:12,600 --> 00:04:16,140
second point the unit says will always

00:04:14,670 --> 00:04:16,760
be faster I'm not going to argue against

00:04:16,140 --> 00:04:21,620
that

00:04:16,760 --> 00:04:23,930
so specs and unit tests cover enough

00:04:21,620 --> 00:04:27,080
so here are apologies for the size here

00:04:23,930 --> 00:04:28,820
two very obvious examples where we

00:04:27,080 --> 00:04:31,699
haven't got the coverage that we want

00:04:28,820 --> 00:04:33,860
with a unit test so typical one in our

00:04:31,699 --> 00:04:36,320
spec we're expecting an element to

00:04:33,860 --> 00:04:38,600
respond to another method call what does

00:04:36,320 --> 00:04:41,180
that actually test all it tests is that

00:04:38,600 --> 00:04:43,280
you fire a method at some object and it

00:04:41,180 --> 00:04:46,280
does something what does it do I don't

00:04:43,280 --> 00:04:48,949
know does it work well yeah it works but

00:04:46,280 --> 00:04:50,810
what does it work mean you know to

00:04:48,949 --> 00:04:52,220
people you know Bill Gates has a job I

00:04:50,810 --> 00:04:55,460
have a job I wouldn't say we do the same

00:04:52,220 --> 00:04:57,590
thing so I think something like this has

00:04:55,460 --> 00:04:59,180
a purpose but you can't just rely on

00:04:57,590 --> 00:05:02,960
something responding to something and

00:04:59,180 --> 00:05:04,910
then one one aspects of site prism or

00:05:02,960 --> 00:05:07,490
the main aspect of site prism it's a

00:05:04,910 --> 00:05:09,320
wrapper around the capybara framework so

00:05:07,490 --> 00:05:10,940
one of the things that we leverage is

00:05:09,320 --> 00:05:14,270
the fact that capybara is a huge

00:05:10,940 --> 00:05:15,410
framework it's got lots of uses so in a

00:05:14,270 --> 00:05:18,110
lot of instances instead of reinventing

00:05:15,410 --> 00:05:19,280
the wheel we just wrap their code so

00:05:18,110 --> 00:05:21,590
here we've got a lot of methods that

00:05:19,280 --> 00:05:23,930
simply wrap their code but they actually

00:05:21,590 --> 00:05:25,280
do something but what we're testing here

00:05:23,930 --> 00:05:27,050
isn't that they do anything we're just

00:05:25,280 --> 00:05:29,300
saying that when we call our method we

00:05:27,050 --> 00:05:30,620
wanted to wrap the capybara method so

00:05:29,300 --> 00:05:32,180
when we want to get the text of an

00:05:30,620 --> 00:05:33,979
element we don't want to find the text

00:05:32,180 --> 00:05:36,260
we just want to tell capybara to find

00:05:33,979 --> 00:05:37,700
the text we want to execute some

00:05:36,260 --> 00:05:39,349
JavaScript we don't want to execute

00:05:37,700 --> 00:05:40,910
JavaScript we just wanna tell capybara

00:05:39,349 --> 00:05:42,830
to do it we just passing the mantle on

00:05:40,910 --> 00:05:45,139
so these type of tests here again

00:05:42,830 --> 00:05:46,669
they're not really testing that the java

00:05:45,139 --> 00:05:48,770
scripts getting executed they're not

00:05:46,669 --> 00:05:50,360
really testing that the text is being

00:05:48,770 --> 00:05:52,490
received all the testing is that we're

00:05:50,360 --> 00:05:54,349
passing it on correctly so in these kind

00:05:52,490 --> 00:05:56,419
of instances I would say that an

00:05:54,349 --> 00:05:57,740
automated integration test is actually

00:05:56,419 --> 00:05:59,870
the only test we really need to run

00:05:57,740 --> 00:06:01,910
these tests have purpose but they don't

00:05:59,870 --> 00:06:03,740
give you the actual full picture for

00:06:01,910 --> 00:06:05,900
instance if this JavaScript method was

00:06:03,740 --> 00:06:07,729
broken in capybara this test wouldn't

00:06:05,900 --> 00:06:10,940
flag it whereas an integration test

00:06:07,729 --> 00:06:12,560
would apologies by the way for the size

00:06:10,940 --> 00:06:15,349
for the people at the back I'm not sure

00:06:12,560 --> 00:06:16,940
how that will come out on the image so I

00:06:15,349 --> 00:06:19,729
mentioned briefly how to create a small

00:06:16,940 --> 00:06:21,830
stack so with a unit test you write one

00:06:19,729 --> 00:06:23,120
new unit test if you wanted to create an

00:06:21,830 --> 00:06:24,410
automated integration test from the

00:06:23,120 --> 00:06:26,660
start you'd have to create a bit of a

00:06:24,410 --> 00:06:28,669
framework but actually if you wanted to

00:06:26,660 --> 00:06:30,979
create a very small framework just to do

00:06:28,669 --> 00:06:32,960
the bare minimum it's only three or four

00:06:30,979 --> 00:06:35,300
steps and I should point out that for

00:06:32,960 --> 00:06:37,070
browser automation that's not inherently

00:06:35,300 --> 00:06:38,540
you know you don't have to create a

00:06:37,070 --> 00:06:40,310
browser automation framework with site

00:06:38,540 --> 00:06:42,650
prism you can still use site prism and

00:06:40,310 --> 00:06:44,720
classes inside unit tests to the point

00:06:42,650 --> 00:06:46,550
behind this is that if you want to

00:06:44,720 --> 00:06:48,980
create a small stack it takes you five

00:06:46,550 --> 00:06:50,480
seconds there's a few ideas as well that

00:06:48,980 --> 00:06:52,460
I'm going to talk about in a second from

00:06:50,480 --> 00:06:53,930
the readme document on site prism but

00:06:52,460 --> 00:06:56,090
essentially once you've added the site

00:06:53,930 --> 00:06:57,560
prism gem or you've got decide is what

00:06:56,090 --> 00:06:59,330
framework you want so whether you want

00:06:57,560 --> 00:07:01,280
to do a browser automation framework an

00:06:59,330 --> 00:07:04,130
API based framework or even just some

00:07:01,280 --> 00:07:06,380
classes inside a spec file and then go

00:07:04,130 --> 00:07:08,600
from there and I'll show you a couple of

00:07:06,380 --> 00:07:10,280
examples where literally a mocked one up

00:07:08,600 --> 00:07:11,960
in five minutes it's not a lot of effort

00:07:10,280 --> 00:07:13,370
to create this and I would say going

00:07:11,960 --> 00:07:15,920
back to my earlier point on the slide

00:07:13,370 --> 00:07:18,410
the misnomer about it's a big overhead

00:07:15,920 --> 00:07:20,060
to create this automation framework it's

00:07:18,410 --> 00:07:21,770
actually a misnomer in the sense that

00:07:20,060 --> 00:07:23,630
you don't have to spend a lot of time

00:07:21,770 --> 00:07:25,040
making this you don't have to get it to

00:07:23,630 --> 00:07:26,690
do bells and whistles all you've got to

00:07:25,040 --> 00:07:30,440
do is the bare minimum and it will be

00:07:26,690 --> 00:07:32,390
really powerful for you a few ideas that

00:07:30,440 --> 00:07:34,880
I'm just going to relate to is that when

00:07:32,390 --> 00:07:36,050
we create this site prism framework what

00:07:34,880 --> 00:07:37,760
we're doing is we're creating something

00:07:36,050 --> 00:07:39,800
that is wrapped around a concept called

00:07:37,760 --> 00:07:40,940
the page object model apologies for

00:07:39,800 --> 00:07:43,790
those who already know about it

00:07:40,940 --> 00:07:46,190
essentially the page object model morphs

00:07:43,790 --> 00:07:48,350
something that is a pro in language like

00:07:46,190 --> 00:07:51,140
Ruby into something that looks like a

00:07:48,350 --> 00:07:52,430
website so you've got a website you can

00:07:51,140 --> 00:07:55,670
imagine it here you've got a web page

00:07:52,430 --> 00:07:57,740
the web page has got some buttons it's

00:07:55,670 --> 00:07:59,480
got a filter panel if I use the on the

00:07:57,740 --> 00:08:01,070
beach analogy you've got some flight

00:07:59,480 --> 00:08:03,230
results you've got some filter page

00:08:01,070 --> 00:08:05,390
you've got a basket all the page object

00:08:03,230 --> 00:08:06,950
modal model looks to do is to split

00:08:05,390 --> 00:08:08,900
those up into components so you might

00:08:06,950 --> 00:08:11,260
have the banner you might have the

00:08:08,900 --> 00:08:13,520
search bar you might have the results

00:08:11,260 --> 00:08:16,130
using site prism what we do is we then

00:08:13,520 --> 00:08:17,840
model those as objects in Ruby your

00:08:16,130 --> 00:08:19,430
model honors classes and those classes

00:08:17,840 --> 00:08:21,020
might have some inheritance those

00:08:19,430 --> 00:08:22,580
classes might have some descendants and

00:08:21,020 --> 00:08:25,280
those classes might have some methods

00:08:22,580 --> 00:08:26,960
and some objects once you've done that

00:08:25,280 --> 00:08:30,020
transformation from you've got a website

00:08:26,960 --> 00:08:32,540
that's got buttons it's got elements to

00:08:30,020 --> 00:08:35,180
something that is a class it has methods

00:08:32,540 --> 00:08:37,850
or you then do is ask Ruby just to run

00:08:35,180 --> 00:08:40,190
the code so actually when you're using

00:08:37,850 --> 00:08:41,950
something like site prism wrapping the

00:08:40,190 --> 00:08:43,880
capybara using browser automation

00:08:41,950 --> 00:08:46,940
providing that your website you're

00:08:43,880 --> 00:08:49,130
hitting isn't you know a legacy service

00:08:46,940 --> 00:08:51,980
hosted on a piece of ancient architects

00:08:49,130 --> 00:08:54,110
it will be really fast furthermore if

00:08:51,980 --> 00:08:55,820
you do a couple of quick ideas here as

00:08:54,110 --> 00:08:57,410
I've mentioned you can catch a lot of

00:08:55,820 --> 00:08:59,330
these items so that when you're running

00:08:57,410 --> 00:09:02,180
your second test your third test your

00:08:59,330 --> 00:09:04,610
fourth test your 300th test if you want

00:09:02,180 --> 00:09:06,380
the time it takes to actually spin up

00:09:04,610 --> 00:09:08,330
the original webpage which is often the

00:09:06,380 --> 00:09:11,360
heavy part can be done in a matter of

00:09:08,330 --> 00:09:13,520
seconds if not less so suddenly what

00:09:11,360 --> 00:09:15,950
you're realizing is that to do say 20

00:09:13,520 --> 00:09:17,840
tests or to do 30 tests using this

00:09:15,950 --> 00:09:19,910
automated framework will only take a

00:09:17,840 --> 00:09:22,520
matter of seconds now you compare that

00:09:19,910 --> 00:09:24,760
to running r-spec yes some unit tests

00:09:22,520 --> 00:09:27,080
might run a thousand in a second but

00:09:24,760 --> 00:09:29,120
going from running a thousand tests in a

00:09:27,080 --> 00:09:31,400
second to running a thousand tests in 20

00:09:29,120 --> 00:09:33,470
seconds it's still within the realms of

00:09:31,400 --> 00:09:35,480
you know the order of seconds it's not

00:09:33,470 --> 00:09:36,860
really gonna make your job so much

00:09:35,480 --> 00:09:38,690
harder if you have to wait ten seconds

00:09:36,860 --> 00:09:39,920
for a result as opposed to naught point

00:09:38,690 --> 00:09:42,350
one second for result

00:09:39,920 --> 00:09:44,780
I mean who here has ran a load of unit

00:09:42,350 --> 00:09:46,280
tests and been able to count how long

00:09:44,780 --> 00:09:47,600
it's taken if it's only five or ten

00:09:46,280 --> 00:09:51,470
tests it happened so fast

00:09:47,600 --> 00:09:53,450
we don't even notice it so what I want

00:09:51,470 --> 00:09:59,720
to do now is just show you a couple of

00:09:53,450 --> 00:10:02,420
really brief examples and I've hopefully

00:09:59,720 --> 00:10:04,400
got a nice white layer here about how

00:10:02,420 --> 00:10:07,730
little code you need to set up just to

00:10:04,400 --> 00:10:08,900
do a real basic automation test what

00:10:07,730 --> 00:10:10,400
I've tried to do even though I've got

00:10:08,900 --> 00:10:12,230
two classes inside the same file it's

00:10:10,400 --> 00:10:15,470
just for reading purposes so all we've

00:10:12,230 --> 00:10:17,840
got here is a basic object of the Google

00:10:15,470 --> 00:10:19,850
website and you can see here there's

00:10:17,840 --> 00:10:22,010
very little information so on the Google

00:10:19,850 --> 00:10:24,680
website we have a home page and we have

00:10:22,010 --> 00:10:26,240
a results page now because this was only

00:10:24,680 --> 00:10:27,680
meant to be a quick demonstration the

00:10:26,240 --> 00:10:29,450
idea behind it is I meant to be showing

00:10:27,680 --> 00:10:31,340
you the bare minimum and once you've

00:10:29,450 --> 00:10:33,260
built this bare minimum you can build

00:10:31,340 --> 00:10:34,910
any number of tests on it so with this

00:10:33,260 --> 00:10:37,160
Google web page we've got a nice little

00:10:34,910 --> 00:10:38,900
clean DSL here all we say is that we

00:10:37,160 --> 00:10:41,600
have some sort of element that could be

00:10:38,900 --> 00:10:43,790
a button it could be a check box it

00:10:41,600 --> 00:10:45,740
could be a text field we simply give it

00:10:43,790 --> 00:10:48,800
a name and give it some reference

00:10:45,740 --> 00:10:51,260
usually a CSS selector expats available

00:10:48,800 --> 00:10:53,090
indexing is available any other selector

00:10:51,260 --> 00:10:55,960
you want to use site prizm will handle

00:10:53,090 --> 00:10:58,220
them all by default it uses CSS selector

00:10:55,960 --> 00:10:59,870
and again we've got another page here

00:10:58,220 --> 00:11:02,060
you'll notice here that we've got

00:10:59,870 --> 00:11:02,670
elements the only difference being here

00:11:02,060 --> 00:11:05,100
is that site

00:11:02,670 --> 00:11:06,510
we'll create enumerable objects that

00:11:05,100 --> 00:11:08,850
makes it really easy if you've got a

00:11:06,510 --> 00:11:10,470
massive page full of data and you want

00:11:08,850 --> 00:11:12,870
to take every single result that looks

00:11:10,470 --> 00:11:14,550
the same this makes it really useful for

00:11:12,870 --> 00:11:16,860
things like web scraping for instance if

00:11:14,550 --> 00:11:18,900
you wanted to get a load of data mined

00:11:16,860 --> 00:11:21,240
from a result set you can also use it

00:11:18,900 --> 00:11:22,980
internally to process all that data by

00:11:21,240 --> 00:11:25,290
using Ruby's methods to map all this

00:11:22,980 --> 00:11:27,720
objects into some sort of hash or object

00:11:25,290 --> 00:11:29,130
collection the other thing I want to

00:11:27,720 --> 00:11:30,720
quickly know is that you can also create

00:11:29,130 --> 00:11:33,330
methods because these are inherently

00:11:30,720 --> 00:11:35,160
just classes so you can operate them as

00:11:33,330 --> 00:11:36,600
classes do you can include modules in

00:11:35,160 --> 00:11:37,770
them you can have classes inherit from

00:11:36,600 --> 00:11:39,390
other classes where you can have

00:11:37,770 --> 00:11:41,610
initialized methods on these if we want

00:11:39,390 --> 00:11:43,410
to make some sort of lazy loading or to

00:11:41,610 --> 00:11:45,540
want some clever JavaScript to execute

00:11:43,410 --> 00:11:47,490
on these webpages then all you've got to

00:11:45,540 --> 00:11:49,230
do is the way I've recommended it is

00:11:47,490 --> 00:11:50,970
that we cache our objects at the top

00:11:49,230 --> 00:11:51,330
just to simply make the speed a lot

00:11:50,970 --> 00:11:53,790
quicker

00:11:51,330 --> 00:11:55,470
once we've cached these objects we do a

00:11:53,790 --> 00:11:57,750
little bit of setup and then we can run

00:11:55,470 --> 00:11:59,280
some tests now unfortunately I was

00:11:57,750 --> 00:12:00,660
having a bit of an issue with the Wi-Fi

00:11:59,280 --> 00:12:03,390
earlier so I'm not going to grace you

00:12:00,660 --> 00:12:06,360
with that but running a couple of really

00:12:03,390 --> 00:12:09,120
simple cucumber scenarios here would

00:12:06,360 --> 00:12:11,010
take a matter of seconds because what

00:12:09,120 --> 00:12:12,990
we've done is we've taken the framework

00:12:11,010 --> 00:12:15,030
that we've been you know we've inherited

00:12:12,990 --> 00:12:17,790
if you like from site prism created a

00:12:15,030 --> 00:12:20,010
really simple clean outlook and all

00:12:17,790 --> 00:12:21,720
we've done here is created two pages

00:12:20,010 --> 00:12:24,390
with the bare minimum that we need to do

00:12:21,720 --> 00:12:26,400
some testing if you imagine that this

00:12:24,390 --> 00:12:28,230
was an API app where we want to do a

00:12:26,400 --> 00:12:31,980
couple of API calls we could do

00:12:28,230 --> 00:12:33,660
something similar now I mentioned

00:12:31,980 --> 00:12:35,970
earlier that site prism itself has its

00:12:33,660 --> 00:12:37,560
own set of tests now I'm not going to

00:12:35,970 --> 00:12:39,450
run those locally because it wouldn't be

00:12:37,560 --> 00:12:41,460
very interesting they would run locally

00:12:39,450 --> 00:12:42,660
because it's a local web page however I

00:12:41,460 --> 00:12:45,570
mentioned that if you do some clever

00:12:42,660 --> 00:12:47,850
tricks you can suddenly turn what looks

00:12:45,570 --> 00:12:49,770
like a very big task using automated

00:12:47,850 --> 00:12:56,130
integration testing into something quite

00:12:49,770 --> 00:12:58,560
quick so in true Blue Peter fashion here

00:12:56,130 --> 00:13:00,330
is one I made earlier all I'm going to

00:12:58,560 --> 00:13:02,430
read from you is the metrics here so

00:13:00,330 --> 00:13:04,770
we've got 73 scenarios so this is our

00:13:02,430 --> 00:13:06,840
site prism automated integration tests

00:13:04,770 --> 00:13:08,730
there was a hundred and ninety different

00:13:06,840 --> 00:13:10,530
steps that got ran including browsing

00:13:08,730 --> 00:13:12,870
web pages interacting with web pages

00:13:10,530 --> 00:13:15,450
waiting for elements executing

00:13:12,870 --> 00:13:16,500
JavaScript and it took less than a

00:13:15,450 --> 00:13:19,170
minute ten seconds

00:13:16,500 --> 00:13:22,050
in other words to do a full integrated

00:13:19,170 --> 00:13:24,090
test scenario using a real webpage on

00:13:22,050 --> 00:13:27,090
average takes less than a second for

00:13:24,090 --> 00:13:28,500
many scenarios and it's worth pointing

00:13:27,090 --> 00:13:31,560
out that this number here can get

00:13:28,500 --> 00:13:33,300
reduced by nearly 50% if we simply made

00:13:31,560 --> 00:13:35,550
the JavaScript execute faster which is

00:13:33,300 --> 00:13:39,570
just a quick PR or made some of the

00:13:35,550 --> 00:13:41,160
weights a bit less so the main thing

00:13:39,570 --> 00:13:43,500
that makes this fast is the fact that

00:13:41,160 --> 00:13:45,210
we've cashed our webpage so in other

00:13:43,500 --> 00:13:47,540
words we're not hitting an external

00:13:45,210 --> 00:13:50,100
service we're hitting a local webpage

00:13:47,540 --> 00:13:52,140
but if you think about it that's not

00:13:50,100 --> 00:13:54,510
that revolutionary you know we've had

00:13:52,140 --> 00:13:55,830
offline web pages for years so all

00:13:54,510 --> 00:13:57,930
you've got to do to get something that's

00:13:55,830 --> 00:14:00,360
as performant as this is have a local

00:13:57,930 --> 00:14:02,400
web page well if you think about it when

00:14:00,360 --> 00:14:04,530
we've got local services like local API

00:14:02,400 --> 00:14:06,840
apps or even local web pages on a

00:14:04,530 --> 00:14:09,060
sandbox service those are still offline

00:14:06,840 --> 00:14:10,770
services those don't need to connect

00:14:09,060 --> 00:14:12,440
through the internet so you would get

00:14:10,770 --> 00:14:16,020
something that's as performance as this

00:14:12,440 --> 00:14:19,170
even running it on your own services be

00:14:16,020 --> 00:14:20,970
they sandbox testing UAT testing or even

00:14:19,170 --> 00:14:24,750
some sort of local service like an API

00:14:20,970 --> 00:14:27,060
so just to sort of come back to the

00:14:24,750 --> 00:14:29,070
original misnomer to try and bring it

00:14:27,060 --> 00:14:30,390
full circle if you like one of the

00:14:29,070 --> 00:14:31,500
biggest arguments against doing

00:14:30,390 --> 00:14:34,230
something like automated integration

00:14:31,500 --> 00:14:36,420
testing with our unit test runs in half

00:14:34,230 --> 00:14:38,700
a second this takes ages well actually

00:14:36,420 --> 00:14:40,650
if we think about it that doesn't take

00:14:38,700 --> 00:14:44,220
ages and I think that's one of the main

00:14:40,650 --> 00:14:45,480
arguments against it so if anything I

00:14:44,220 --> 00:14:46,530
just want you to think that maybe next

00:14:45,480 --> 00:14:49,440
time when we're trying to create this

00:14:46,530 --> 00:14:51,000
whole suite of regular specs and we

00:14:49,440 --> 00:14:52,530
encounter something like we found

00:14:51,000 --> 00:14:54,120
earlier where we've got these type of

00:14:52,530 --> 00:14:56,490
tests which actually aren't really doing

00:14:54,120 --> 00:14:57,960
much swapping these for integration

00:14:56,490 --> 00:15:00,270
tests or even not writing these at all

00:14:57,960 --> 00:15:02,940
and just having integration tests gives

00:15:00,270 --> 00:15:04,380
us such you know confidence in that

00:15:02,940 --> 00:15:06,780
we're actually testing that when I

00:15:04,380 --> 00:15:10,400
execute the JavaScript when I run the

00:15:06,780 --> 00:15:10,400
method I'm getting the right response

00:15:12,290 --> 00:15:18,570
and that's about it in terms of going

00:15:16,800 --> 00:15:20,940
forward one of the things that we really

00:15:18,570 --> 00:15:21,960
like is that every pull request and

00:15:20,940 --> 00:15:23,430
everything that's getting merged into

00:15:21,960 --> 00:15:25,410
this repository going forward will have

00:15:23,430 --> 00:15:27,720
full documentation the readme at the

00:15:25,410 --> 00:15:29,220
moment stands over 2,000 lines so if

00:15:27,720 --> 00:15:30,150
there was any way you wanted to use this

00:15:29,220 --> 00:15:31,950
gem and

00:15:30,150 --> 00:15:34,890
use automated integration testing trust

00:15:31,950 --> 00:15:37,200
me we've got an example for and but no

00:15:34,890 --> 00:15:38,790
other than that thank you very much some

00:15:37,200 --> 00:15:40,400
of the sample pages will be on github

00:15:38,790 --> 00:15:45,539
soon but other than that thank you

00:15:40,400 --> 00:15:45,539

YouTube URL: https://www.youtube.com/watch?v=SBdMnmvqusI


