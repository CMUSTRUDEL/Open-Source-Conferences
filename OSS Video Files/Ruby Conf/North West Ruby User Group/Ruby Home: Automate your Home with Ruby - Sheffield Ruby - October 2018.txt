Title: Ruby Home: Automate your Home with Ruby - Sheffield Ruby - October 2018
Publication date: 2018-10-23
Playlist: North West Ruby User Group
Description: 
	Presented by Karl Entwistle.

Automate your Home with Ruby

In this talk Karl will be sharing his insights and learnings from implementing the HomeKit Accessory Protocol to create a HomeKit accessory in Ruby. HomeKit is a set of protocols and libraries to access devices for home automation. The talk explores some limitations of Rack, decoding binary data with Ruby and an overview of the HomeKit Accessory Protocol. Karl will also live demo a couple of different accessories.


_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,060 --> 00:00:06,779
okay cool yeah so this talk is called

00:00:04,920 --> 00:00:10,200
Ruby home and it's about automating your

00:00:06,779 --> 00:00:14,880
home with Ruby my name is Karl Entwistle

00:00:10,200 --> 00:00:17,460
I'm on Twitter at Carl Entwistle before

00:00:14,880 --> 00:00:20,400
I start the talk could everyone raise

00:00:17,460 --> 00:00:23,000
their hand if they have a smartphone

00:00:20,400 --> 00:00:25,410
kind of expecting everyone's hand and

00:00:23,000 --> 00:00:28,980
keep your hand raised if you have an

00:00:25,410 --> 00:00:32,669
iPhone and keep your hand raised if you

00:00:28,980 --> 00:00:41,850
have a IOT device like smart light bulbs

00:00:32,669 --> 00:00:43,649
or thermostat cool so sorry yeah for the

00:00:41,850 --> 00:00:46,110
talk purposes of the talk yeah

00:00:43,649 --> 00:00:52,379
okay cool so the talks for one person in

00:00:46,110 --> 00:00:55,770
the room fish yeah oh okay cool so I

00:00:52,379 --> 00:01:01,289
thought I'd start with the why I've been

00:00:55,770 --> 00:01:03,390
an Apple enthusiasts in 2007 and I got a

00:01:01,289 --> 00:01:05,640
Mac Mini after they made the switch to

00:01:03,390 --> 00:01:09,270
Intel and this is a picture of me when I

00:01:05,640 --> 00:01:12,900
was 18 queuing up for an iPhone 3G I

00:01:09,270 --> 00:01:14,970
queued up from 4:00 in the morning and I

00:01:12,900 --> 00:01:16,920
was second in line I got teased by some

00:01:14,970 --> 00:01:20,340
builders going on their way to work but

00:01:16,920 --> 00:01:24,150
it was cool to have the phone on release

00:01:20,340 --> 00:01:26,460
day the second thing is I recently moved

00:01:24,150 --> 00:01:29,640
to Bristol about three years ago and

00:01:26,460 --> 00:01:33,960
bought a house with my wife and it looks

00:01:29,640 --> 00:01:36,270
exactly like the one in the picture so

00:01:33,960 --> 00:01:37,829
after we moved into our house I had

00:01:36,270 --> 00:01:41,189
decided that I wanted it to be like a

00:01:37,829 --> 00:01:44,549
smart home with all smart devices and

00:01:41,189 --> 00:01:47,100
stuff so I bought some the first thing

00:01:44,549 --> 00:01:49,110
that I bought was some light bulbs so

00:01:47,100 --> 00:01:50,520
I've got like philips hue light bulbs in

00:01:49,110 --> 00:01:53,250
all the rooms in the house

00:01:50,520 --> 00:01:58,409
and i've got the bridge and the switch

00:01:53,250 --> 00:02:00,360
is and and they need a nap so me and my

00:01:58,409 --> 00:02:03,060
wife both installed the philips hue app

00:02:00,360 --> 00:02:06,270
on to our phone so after i had the light

00:02:03,060 --> 00:02:10,179
bulb sorted i thought i need a smart

00:02:06,270 --> 00:02:13,689
thermostat so I bought a nest thermostat

00:02:10,179 --> 00:02:16,420
and that also needed a nap so that's

00:02:13,689 --> 00:02:18,239
installed on both our phones as well and

00:02:16,420 --> 00:02:20,290
after that I bought a sound bar and

00:02:18,239 --> 00:02:23,560
hopefully at this point you get the idea

00:02:20,290 --> 00:02:25,510
all of the smart home devices that I

00:02:23,560 --> 00:02:28,359
needed that well I didn't need to buy it

00:02:25,510 --> 00:02:30,790
but I wanted to buy it have their own

00:02:28,359 --> 00:02:31,420
apps so I ended up with quite a few on

00:02:30,790 --> 00:02:35,609
my phone

00:02:31,420 --> 00:02:38,500
I've got nast loop Huw Eve Amazon Alexa

00:02:35,609 --> 00:02:42,099
one for the speaker the Apple TV the

00:02:38,500 --> 00:02:42,760
fire TV and there's a bit of a fastball

00:02:42,099 --> 00:02:44,319
problem

00:02:42,760 --> 00:02:45,909
but I kind of thought is kind of

00:02:44,319 --> 00:02:48,189
annoying having all these different apps

00:02:45,909 --> 00:02:51,310
on my phone and what I really want is

00:02:48,189 --> 00:02:56,639
just one application to kind of control

00:02:51,310 --> 00:02:56,639
all the different devices in my house

00:02:57,180 --> 00:03:04,810
so Apple offer a software framework

00:03:01,180 --> 00:03:06,639
called home kit on iOS devices and home

00:03:04,810 --> 00:03:09,159
kit is a software framework for making

00:03:06,639 --> 00:03:14,199
smart home devices work seamlessly with

00:03:09,159 --> 00:03:16,989
iOS devices and by iOS devices they mean

00:03:14,199 --> 00:03:19,629
basically everything in their ecosystem

00:03:16,989 --> 00:03:22,479
which is Apple TV iPhone Apple watch

00:03:19,629 --> 00:03:26,319
home pod iPad and with the latest

00:03:22,479 --> 00:03:27,459
software update also the Macintosh so

00:03:26,319 --> 00:03:30,510
home kit works with all of these

00:03:27,459 --> 00:03:33,010
different IOT devices there's lights

00:03:30,510 --> 00:03:37,000
powerpoints windows air conditioners

00:03:33,010 --> 00:03:40,000
speakers cameras garage doors like all

00:03:37,000 --> 00:03:41,620
of the ones on on the slide the other

00:03:40,000 --> 00:03:44,079
thing I like about is that it works with

00:03:41,620 --> 00:03:45,669
Siri so you can say things like turn on

00:03:44,079 --> 00:03:48,849
the living room lights dim the living

00:03:45,669 --> 00:03:51,449
room lights set the temperature set the

00:03:48,849 --> 00:04:00,189
dinner scene or my personal favorite one

00:03:51,449 --> 00:04:03,970
what temperature is the shed it's good

00:04:00,189 --> 00:04:06,970
tonight and it's not just Siri there's

00:04:03,970 --> 00:04:10,599
also the visual app on the phone so here

00:04:06,970 --> 00:04:13,060
I'm like quickly swiping through the app

00:04:10,599 --> 00:04:16,030
that I've got set up with the different

00:04:13,060 --> 00:04:20,950
IOT devices in the different rooms in my

00:04:16,030 --> 00:04:23,969
house it goes quite quickly but we'll go

00:04:20,950 --> 00:04:23,969
into more detail on that later

00:04:24,020 --> 00:04:31,580
so that's great but there's a bit of a

00:04:27,080 --> 00:04:34,460
problem you can only use IOT devices

00:04:31,580 --> 00:04:39,830
with home care that the label works with

00:04:34,460 --> 00:04:41,840
home care and in my context that means

00:04:39,830 --> 00:04:43,849
the Philips hue light bulbs kind of

00:04:41,840 --> 00:04:47,120
worked out the box so they get a green

00:04:43,849 --> 00:04:50,960
tick mark but the the nest thermostat

00:04:47,120 --> 00:04:54,289
and the sound bar they don't work so I

00:04:50,960 --> 00:04:56,750
could either rebuy those things from a

00:04:54,289 --> 00:04:59,449
different manufacturer or like wait for

00:04:56,750 --> 00:05:02,419
a software update that I might not get

00:04:59,449 --> 00:05:05,569
so at this point I kind of had an idea

00:05:02,419 --> 00:05:08,990
it would be great if homecare could work

00:05:05,569 --> 00:05:11,569
with Ruby and the reason for that is

00:05:08,990 --> 00:05:13,939
that I could get home kit to speak to

00:05:11,569 --> 00:05:16,419
Ruby then I could get Ruby to speak to

00:05:13,939 --> 00:05:19,460
the nest API which could then speak to

00:05:16,419 --> 00:05:22,039
my thermostat or my camera or smoke

00:05:19,460 --> 00:05:23,900
detector and vice versa like if someone

00:05:22,039 --> 00:05:26,180
physically changes the temperature on

00:05:23,900 --> 00:05:29,389
the thermostat it would communicate to

00:05:26,180 --> 00:05:31,849
the nest API which could speak to Ruby

00:05:29,389 --> 00:05:34,909
and then push that information back to

00:05:31,849 --> 00:05:36,770
my phone so at that point I'd be able to

00:05:34,909 --> 00:05:38,330
have the Philips hue light bulbs and

00:05:36,770 --> 00:05:41,750
then I could kind of bridge the gap

00:05:38,330 --> 00:05:45,680
between the nest devices and the sound

00:05:41,750 --> 00:05:48,139
bar so the next logical step was to do a

00:05:45,680 --> 00:05:49,490
Google search and a github search and I

00:05:48,139 --> 00:05:50,960
was like genuinely surprised when I

00:05:49,490 --> 00:05:53,839
couldn't find a ruby library for doing

00:05:50,960 --> 00:05:55,490
this there's one for JavaScript which is

00:05:53,839 --> 00:05:57,169
really great good home bridge and

00:05:55,490 --> 00:06:01,189
there's also quite a good one for Google

00:05:57,169 --> 00:06:02,779
go so I could have just use those but I

00:06:01,189 --> 00:06:05,689
remembered this quote from an

00:06:02,779 --> 00:06:07,009
inspirational man which says you must be

00:06:05,689 --> 00:06:10,189
the change you wish to see in the world

00:06:07,009 --> 00:06:15,409
so I decided to write my own Ruby

00:06:10,189 --> 00:06:19,339
library and the libraries called Ruby

00:06:15,409 --> 00:06:23,750
home and you can install it with jam in

00:06:19,339 --> 00:06:25,430
still Ruby home yeah

00:06:23,750 --> 00:06:29,330
so I'm expecting this guy to see that

00:06:25,430 --> 00:06:32,960
when he gets home it's also on github

00:06:29,330 --> 00:06:34,820
under Carl Entwistle rebe home and the

00:06:32,960 --> 00:06:37,490
numbers speak for themselves guys is for

00:06:34,820 --> 00:06:38,990
very very popular library five people

00:06:37,490 --> 00:06:42,850
are watching it twenty people have

00:06:38,990 --> 00:06:42,850
starter and three people have forked it

00:06:45,340 --> 00:06:52,070
I did start myself and I'm also watching

00:06:48,949 --> 00:06:55,130
it myself so it's actually for people of

00:06:52,070 --> 00:06:58,850
yeah anyway I'm trying to get the

00:06:55,130 --> 00:07:03,620
numbers off a bit so I thought I'd gone

00:06:58,850 --> 00:07:06,169
to their the how of how I did this so on

00:07:03,620 --> 00:07:07,940
apple's website in the developer section

00:07:06,169 --> 00:07:09,710
they offer some documentation for the

00:07:07,940 --> 00:07:12,680
home care accessory protocol

00:07:09,710 --> 00:07:16,070
specification prior to the date on the

00:07:12,680 --> 00:07:18,650
slide which 19th of November 2017 it was

00:07:16,070 --> 00:07:20,270
actually like a closed thing I think you

00:07:18,650 --> 00:07:22,610
should only get access to it if you sort

00:07:20,270 --> 00:07:24,889
of gave them a pile of money or

00:07:22,610 --> 00:07:28,310
something but it's now like an open

00:07:24,889 --> 00:07:29,870
standard so anyone can use it so I

00:07:28,310 --> 00:07:31,430
downloaded this document and I was

00:07:29,870 --> 00:07:34,880
really delighted to find out that it was

00:07:31,430 --> 00:07:37,520
a 256 page technical document that

00:07:34,880 --> 00:07:38,960
directly references twelve RFC's and if

00:07:37,520 --> 00:07:41,150
you've ever read an RFC you'll know that

00:07:38,960 --> 00:07:43,400
those RFC's reference a whole bunch of

00:07:41,150 --> 00:07:44,840
other are C's so I thought I could

00:07:43,400 --> 00:07:46,669
either like sit there and read that

00:07:44,840 --> 00:07:50,120
document and try and understand it or

00:07:46,669 --> 00:07:52,160
just break it down into like logical

00:07:50,120 --> 00:07:54,800
steps and divide and conquer so what I

00:07:52,160 --> 00:07:56,810
did was on the home app just went

00:07:54,800 --> 00:08:00,710
through the normal flow of how you would

00:07:56,810 --> 00:08:03,789
add a device and got to this screen if

00:08:00,710 --> 00:08:06,139
you get a device from a manufacturer

00:08:03,789 --> 00:08:07,580
like an official manufacturer then

00:08:06,139 --> 00:08:09,710
normally it would show up on this screen

00:08:07,580 --> 00:08:12,620
so the first challenge was just to get

00:08:09,710 --> 00:08:14,270
something to shop on this screen so I

00:08:12,620 --> 00:08:18,260
read a little bit of the documentation

00:08:14,270 --> 00:08:20,900
and realized that it uses multicast DNS

00:08:18,260 --> 00:08:22,880
or Apple cause this Bonjour you're all

00:08:20,900 --> 00:08:24,590
familiar with this because any time

00:08:22,880 --> 00:08:29,419
you've been on a network the shared

00:08:24,590 --> 00:08:32,479
devices are broadcasting their services

00:08:29,419 --> 00:08:33,479
using multicast DNS and also on an

00:08:32,479 --> 00:08:36,539
iPhone

00:08:33,479 --> 00:08:39,000
you use airdrop that's kind of what

00:08:36,539 --> 00:08:40,260
makes it work so that's why you can see

00:08:39,000 --> 00:08:43,380
the different computers that are

00:08:40,260 --> 00:08:45,990
available for the Macintosh there's a

00:08:43,380 --> 00:08:47,730
really good bit of software by a company

00:08:45,990 --> 00:08:50,399
called tilde Soph called bonjour browser

00:08:47,730 --> 00:08:53,220
and if you run that on a network you can

00:08:50,399 --> 00:08:55,550
see all the different devices and the

00:08:53,220 --> 00:08:58,440
multicast dns that they're broadcasting

00:08:55,550 --> 00:09:00,660
like I ran it in my house and I didn't

00:08:58,440 --> 00:09:02,910
actually know that my sound bar had like

00:09:00,660 --> 00:09:05,699
a website and an API that's the one that

00:09:02,910 --> 00:09:07,560
I've expanded since finding out about

00:09:05,699 --> 00:09:10,079
this I quite enjoy running it at

00:09:07,560 --> 00:09:12,329
airports or hotels or like friends

00:09:10,079 --> 00:09:13,829
houses just to kind of see what's

00:09:12,329 --> 00:09:16,769
available on the network it's kind of

00:09:13,829 --> 00:09:20,190
interesting sometimes what is just there

00:09:16,769 --> 00:09:22,199
and like not secure so going back to the

00:09:20,190 --> 00:09:25,500
problem because I already had a Phillips

00:09:22,199 --> 00:09:28,199
hue device I just had a look at what the

00:09:25,500 --> 00:09:30,540
Phillips hue bridge was broadcasting so

00:09:28,199 --> 00:09:33,209
I just knew that I needed to broadcast

00:09:30,540 --> 00:09:35,970
something similar and I found a ruby

00:09:33,209 --> 00:09:38,630
library for doing this which is written

00:09:35,970 --> 00:09:43,199
by tenderlove and it's called multi

00:09:38,630 --> 00:09:45,120
sorry it's called DNS SD so I downloaded

00:09:43,199 --> 00:09:48,600
that and it's got a really simple syntax

00:09:45,120 --> 00:09:51,240
here so you just require DNS SD and then

00:09:48,600 --> 00:09:56,069
here I'm assigning a TCP server to the

00:09:51,240 --> 00:09:59,490
variable HTTP and then the DNS SDE DSL

00:09:56,069 --> 00:10:01,560
lets you just say DNS SD denounced with

00:09:59,490 --> 00:10:03,389
the service and the name and then I'm

00:10:01,560 --> 00:10:10,470
like confirming that that's working with

00:10:03,389 --> 00:10:12,690
bonjour browser so it's a bit more code

00:10:10,470 --> 00:10:14,610
but I basically just made it broadcast

00:10:12,690 --> 00:10:17,550
similar stuff to what the Phillips hue

00:10:14,610 --> 00:10:20,510
bridge is doing and at this point yeah I

00:10:17,550 --> 00:10:23,339
got it to actually display on my iPhone

00:10:20,510 --> 00:10:27,360
so the next logical step was to click on

00:10:23,339 --> 00:10:30,899
that and it asked me for a setup code I

00:10:27,360 --> 00:10:33,389
just put in like 1 2 3 4 5 6 7 8 and it

00:10:30,899 --> 00:10:35,699
sent a post request to the TCP server

00:10:33,389 --> 00:10:36,990
that I was running the path was pair set

00:10:35,699 --> 00:10:38,760
up that's pretty normal

00:10:36,990 --> 00:10:40,860
had a content type that I wasn't

00:10:38,760 --> 00:10:45,269
familiar application pairing plus T or

00:10:40,860 --> 00:10:46,870
v8 and then also the body instead of

00:10:45,269 --> 00:10:50,110
being JSON or XML

00:10:46,870 --> 00:10:53,320
just some hexadecimal data which is also

00:10:50,110 --> 00:10:54,760
pretty unexpected for the purposes of

00:10:53,320 --> 00:10:57,310
this talk I'm just going to say that the

00:10:54,760 --> 00:11:01,089
pairing process for the device is like a

00:10:57,310 --> 00:11:02,710
long and complicated process it kind of

00:11:01,089 --> 00:11:06,100
consumed about four months of my life

00:11:02,710 --> 00:11:07,900
like trying to figure it out but I got

00:11:06,100 --> 00:11:11,020
there in the end and after this pairing

00:11:07,900 --> 00:11:12,760
process from that shared secret which is

00:11:11,020 --> 00:11:15,610
the ping code where I said I did one two

00:11:12,760 --> 00:11:18,730
three four five six seven eight each of

00:11:15,610 --> 00:11:20,650
the accessories like derive a unique

00:11:18,730 --> 00:11:23,950
token which represented it with

00:11:20,650 --> 00:11:26,260
different keys and my library Ruby home

00:11:23,950 --> 00:11:29,529
also holds a corresponding token for

00:11:26,260 --> 00:11:31,540
each device and those tokens exist for

00:11:29,529 --> 00:11:35,860
as long as the lifecycle of the request

00:11:31,540 --> 00:11:38,980
so as soon as that a device comes online

00:11:35,860 --> 00:11:41,140
and goes through the pairing it actually

00:11:38,980 --> 00:11:44,140
keeps the socket connection open and

00:11:41,140 --> 00:11:45,790
like keeps its tokens and then as soon

00:11:44,140 --> 00:11:51,010
as you like walk out the house or leave

00:11:45,790 --> 00:11:52,779
the network it closes and goes away so

00:11:51,010 --> 00:11:55,360
at the point where all the devices have

00:11:52,779 --> 00:11:57,550
their own unique keys I was really

00:11:55,360 --> 00:11:59,200
pleased to find that Apple in their

00:11:57,550 --> 00:12:03,339
infinite wisdom had decided to make a

00:11:59,200 --> 00:12:05,320
custom HTTP protocol and the

00:12:03,339 --> 00:12:07,720
specification just says that each HTTP

00:12:05,320 --> 00:12:12,610
message is split into frames no larger

00:12:07,720 --> 00:12:14,140
than 1024 bytes and like some other

00:12:12,610 --> 00:12:15,850
technical stuff and there's just a

00:12:14,140 --> 00:12:18,459
caveat at the bottom that once the

00:12:15,850 --> 00:12:21,910
session security has been established if

00:12:18,459 --> 00:12:23,500
there's any decryption issues like you

00:12:21,910 --> 00:12:25,029
have to close the connection immediately

00:12:23,500 --> 00:12:27,910
when I looked at something like that

00:12:25,029 --> 00:12:29,680
from the document I fought that sounds

00:12:27,910 --> 00:12:31,570
really complicated like what does that

00:12:29,680 --> 00:12:32,700
even mean actually turned out to be

00:12:31,570 --> 00:12:35,529
relatively simple

00:12:32,700 --> 00:12:37,990
this is like a standard HTTP response

00:12:35,529 --> 00:12:40,900
don't worry about the body it's just got

00:12:37,990 --> 00:12:44,470
the status code so it's HTTP point 1

00:12:40,900 --> 00:12:47,290
sorry the protocol is HTTP 1.1 the

00:12:44,470 --> 00:12:49,630
status code is 200 ok you can see the

00:12:47,290 --> 00:12:52,600
headers content type content lamp server

00:12:49,630 --> 00:12:53,709
date and its requesting for the

00:12:52,600 --> 00:12:56,980
connection to be kept alive

00:12:53,709 --> 00:13:00,360
I've just got a really big body there so

00:12:56,980 --> 00:13:03,330
that it's greater than 1,024 bytes

00:13:00,360 --> 00:13:07,440
like taking that standard HTTP response

00:13:03,330 --> 00:13:10,500
the specification wants you to break it

00:13:07,440 --> 00:13:15,480
up so all I'm doing is breaking it up

00:13:10,500 --> 00:13:19,680
into three frames as Apple calls them

00:13:15,480 --> 00:13:21,240
and the first ones 1,024 bytes and the

00:13:19,680 --> 00:13:23,250
second one and then the last one is just

00:13:21,240 --> 00:13:25,560
the remainder if you just remember that

00:13:23,250 --> 00:13:28,740
they're color-coded with red green and

00:13:25,560 --> 00:13:33,120
purple so you just take each one of

00:13:28,740 --> 00:13:37,470
those frames then you encrypt them like

00:13:33,120 --> 00:13:39,470
as a frame and also at this point you

00:13:37,470 --> 00:13:43,650
add in a bit of additional metadata

00:13:39,470 --> 00:13:45,900
which is called a nonce and it's just

00:13:43,650 --> 00:13:48,540
like zero for the first one one for the

00:13:45,900 --> 00:13:50,850
second one and two for the third one

00:13:48,540 --> 00:13:52,410
then at this point you just add the

00:13:50,850 --> 00:13:55,620
output of those three things together

00:13:52,410 --> 00:13:58,920
and at this point you've got the app

00:13:55,620 --> 00:14:02,100
like the specifications HTTP response

00:13:58,920 --> 00:14:06,570
which is just a really long like

00:14:02,100 --> 00:14:09,480
hexadecimal string the reason that I

00:14:06,570 --> 00:14:11,339
mentioned the nonce is because it means

00:14:09,480 --> 00:14:13,410
that there can't be any response

00:14:11,339 --> 00:14:14,940
replaying so if anyone's on your network

00:14:13,410 --> 00:14:17,690
and like packet sniffing what the

00:14:14,940 --> 00:14:21,300
devices are sending back and forwards

00:14:17,690 --> 00:14:24,330
because the number gets incremented each

00:14:21,300 --> 00:14:29,810
time it means for the next request they

00:14:24,330 --> 00:14:34,290
expects it to start free and then for so

00:14:29,810 --> 00:14:36,089
the phone and Ruby home both know what

00:14:34,290 --> 00:14:38,310
the count should be so if you replayed a

00:14:36,089 --> 00:14:42,000
request it instantly knows I've already

00:14:38,310 --> 00:14:45,690
seen that so I know that it's a response

00:14:42,000 --> 00:14:48,390
replay if you're still with me then you

00:14:45,690 --> 00:14:52,770
might be wondering if I did this with a

00:14:48,390 --> 00:14:56,430
rack middleware for the encryption there

00:14:52,770 --> 00:15:00,209
stuff if you're familiar with rack then

00:14:56,430 --> 00:15:02,070
you'll know that to use rack you have to

00:15:00,209 --> 00:15:04,709
provide an app an object that responds

00:15:02,070 --> 00:15:07,500
to the call method it takes an

00:15:04,709 --> 00:15:10,050
environment hash as the parameter and

00:15:07,500 --> 00:15:12,040
returns an array of free elements which

00:15:10,050 --> 00:15:14,560
is the status code

00:15:12,040 --> 00:15:20,009
a hash of the headers and the response

00:15:14,560 --> 00:15:23,529
body service that the rack DSL for

00:15:20,009 --> 00:15:25,060
sending this HTTP response and I've just

00:15:23,529 --> 00:15:27,820
labeled the response code the headers

00:15:25,060 --> 00:15:30,250
and the body there if you remember I

00:15:27,820 --> 00:15:33,339
need to encrypt the whole thing

00:15:30,250 --> 00:15:34,839
I can't encrypt it I can't encrypt it as

00:15:33,339 --> 00:15:37,839
the status code or the header or the

00:15:34,839 --> 00:15:40,269
body I need to do everything at once so

00:15:37,839 --> 00:15:42,399
I kind of came to the conclusion that it

00:15:40,269 --> 00:15:44,410
can't be a middleware and it's actually

00:15:42,399 --> 00:15:49,690
a bit I think it's a bit of a limitation

00:15:44,410 --> 00:15:52,899
of the middleware DSL so after I

00:15:49,690 --> 00:15:56,680
realized this I had a stiff drink and a

00:15:52,899 --> 00:15:59,019
bit of a think and if any of you are

00:15:56,680 --> 00:16:01,990
testing your rails apps then you're

00:15:59,019 --> 00:16:05,589
probably using rack tests to communicate

00:16:01,990 --> 00:16:07,449
with your rails app and that basically

00:16:05,589 --> 00:16:10,810
communicates with the rails app but it

00:16:07,449 --> 00:16:13,540
doesn't need to actually spawn a TCP

00:16:10,810 --> 00:16:15,310
server so I kind of use that as my

00:16:13,540 --> 00:16:18,160
inspiration to just come up with this

00:16:15,310 --> 00:16:21,190
architecture which is where the devices

00:16:18,160 --> 00:16:23,110
communicate with a custom TCP proxy

00:16:21,190 --> 00:16:27,790
server and then that just delegates

00:16:23,110 --> 00:16:29,319
upstream to a Sinatra app the last thing

00:16:27,790 --> 00:16:30,880
that I thought was interesting from the

00:16:29,319 --> 00:16:34,750
technical specification is it talks

00:16:30,880 --> 00:16:36,279
about unsolicited HTTP it just says that

00:16:34,750 --> 00:16:38,290
the accessory has to deliver

00:16:36,279 --> 00:16:41,920
notifications by sending an event

00:16:38,290 --> 00:16:45,069
message I've like shown this on the

00:16:41,920 --> 00:16:48,250
diagram here so after devices go through

00:16:45,069 --> 00:16:50,800
the pairing process if one of them says

00:16:48,250 --> 00:16:53,380
to like open a door where I've put the

00:16:50,800 --> 00:16:55,839
line that's beneath that line is where

00:16:53,380 --> 00:16:59,680
things become unsolicited so they

00:16:55,839 --> 00:17:02,560
weren't requested by the device so I'm

00:16:59,680 --> 00:17:04,750
like sending the iPhone and I've had a

00:17:02,560 --> 00:17:08,079
signal to say that the door has been

00:17:04,750 --> 00:17:10,689
opened and the other example of like an

00:17:08,079 --> 00:17:13,150
unsolicited request would be if a phone

00:17:10,689 --> 00:17:15,669
had gone through the pairing process and

00:17:13,150 --> 00:17:19,209
someone physically turned the nest that

00:17:15,669 --> 00:17:21,280
would send a signal to the NASA API and

00:17:19,209 --> 00:17:24,669
then I could intercept that and they

00:17:21,280 --> 00:17:25,600
need to send it to the phone I was quite

00:17:24,669 --> 00:17:27,220
a lot of technical

00:17:25,600 --> 00:17:33,370
so now I'm hoping it will be a bit

00:17:27,220 --> 00:17:36,370
lighter with a three demos so the first

00:17:33,370 --> 00:17:41,580
demo that I want to show you is called

00:17:36,370 --> 00:17:45,960
fan and it's oh you can't see anything

00:17:41,580 --> 00:17:45,960
sorry about that okay

00:17:56,670 --> 00:18:01,890
so I'll just show you so this is the I

00:17:59,850 --> 00:18:07,560
kind of had to come up with a DSL for

00:18:01,890 --> 00:18:09,300
using this each accessory has some

00:18:07,560 --> 00:18:11,310
characteristics assigned to it

00:18:09,300 --> 00:18:14,880
the first one is some accessory

00:18:11,310 --> 00:18:17,070
information and the second one is the

00:18:14,880 --> 00:18:20,010
fan itself the fan has one

00:18:17,070 --> 00:18:23,760
characteristic which is power and so

00:18:20,010 --> 00:18:25,920
it's just on or off and you can

00:18:23,760 --> 00:18:27,480
subscribe to different events actually

00:18:25,920 --> 00:18:29,400
the only event you can subscribe to at

00:18:27,480 --> 00:18:30,960
the moment is updated and then that

00:18:29,400 --> 00:18:33,270
would just yield a block which is the

00:18:30,960 --> 00:18:35,310
characteristic itself and then you can

00:18:33,270 --> 00:18:39,090
intercept its value so you know if it

00:18:35,310 --> 00:18:45,170
was switched on or off so if I run that

00:18:39,090 --> 00:18:52,290
code and go through the pairing process

00:18:45,170 --> 00:18:59,180
or my on this iPhone just see what that

00:18:52,290 --> 00:19:04,920
code is it's different each time do

00:18:59,180 --> 00:19:07,980
hopefully yeah it worked so now if I

00:19:04,920 --> 00:19:10,800
just play on my terminal then if I

00:19:07,980 --> 00:19:12,330
switch the fan on you can see in the

00:19:10,800 --> 00:19:14,760
tavern always has the panel switched on

00:19:12,330 --> 00:19:16,830
and if I switch the fan off then it says

00:19:14,760 --> 00:19:21,180
the phone's switched off it's actually

00:19:16,830 --> 00:19:22,650
quite well it's fun for me to like all

00:19:21,180 --> 00:19:24,840
the different accessories that I showed

00:19:22,650 --> 00:19:27,510
you on the previous slide I kind of just

00:19:24,840 --> 00:19:29,430
enjoyed like seeing what they all look

00:19:27,510 --> 00:19:32,790
like the way that Apple's implemented

00:19:29,430 --> 00:19:36,690
them on this interface the second demo

00:19:32,790 --> 00:19:41,610
that I wanted to show you is a garage

00:19:36,690 --> 00:19:48,480
door whoops I hope that wasn't an

00:19:41,610 --> 00:19:50,550
important file so I'll just quickly go

00:19:48,480 --> 00:19:54,290
through the pairing again hopefully

00:19:50,550 --> 00:19:54,290
it'll work for a second time

00:19:56,619 --> 00:20:01,399
right

00:19:57,979 --> 00:20:06,830
I should really hard code the pairing

00:20:01,399 --> 00:20:09,499
code for the talk and okay cool it

00:20:06,830 --> 00:20:12,739
paired again that's great so now I

00:20:09,499 --> 00:20:14,779
should have a garage door awesome and

00:20:12,739 --> 00:20:18,039
but oh it looks like the door is opened

00:20:14,779 --> 00:20:25,009
so I'm just going to close the door and

00:20:18,039 --> 00:20:29,019
if I just kind of you can see that on

00:20:25,009 --> 00:20:29,019
the phone the spinner is still spinning

00:20:29,139 --> 00:20:34,039
if I hadn't have accident he paused the

00:20:31,489 --> 00:20:36,019
video then oh okay

00:20:34,039 --> 00:20:38,089
so if I hadn't accidentally paused it

00:20:36,019 --> 00:20:41,210
that event would have happened when it

00:20:38,089 --> 00:20:43,849
closed and I can also reopen it again

00:20:41,210 --> 00:20:46,009
and this is an example of the

00:20:43,849 --> 00:20:48,769
unsolicited request that I was speaking

00:20:46,009 --> 00:20:53,029
about when the door finishes opening

00:20:48,769 --> 00:20:55,519
it's sending the unsolicited requests to

00:20:53,029 --> 00:20:58,070
the phone so that it knows that the door

00:20:55,519 --> 00:21:00,369
is now open and that would also get sent

00:20:58,070 --> 00:21:03,979
to any other devices that were paired

00:21:00,369 --> 00:21:05,659
the last demo I have I didn't really

00:21:03,979 --> 00:21:14,629
want to lug my sound bar all the way

00:21:05,659 --> 00:21:21,320
here but I have here is sorry have a

00:21:14,629 --> 00:21:23,469
video of my sound bar working with Ruby

00:21:21,320 --> 00:21:23,469
home

00:21:24,770 --> 00:21:27,920
[Music]

00:21:29,480 --> 00:21:37,070
so I've like switched it off switch it

00:21:33,179 --> 00:21:37,070
back on again it's very exciting

00:21:43,900 --> 00:21:58,039
[Music]

00:21:47,649 --> 00:22:06,980
and whoops oh yeah that is the end of my

00:21:58,039 --> 00:22:11,239
talk thank you the hardest part probably

00:22:06,980 --> 00:22:13,369
just like sticking with it and I didn't

00:22:11,239 --> 00:22:15,830
mention but anytime that you mess up the

00:22:13,369 --> 00:22:19,549
response to the device like if there's

00:22:15,830 --> 00:22:21,559
one character missing that phone or just

00:22:19,549 --> 00:22:23,450
instantly closed the connection because

00:22:21,559 --> 00:22:24,499
it doesn't decrypt properly so I

00:22:23,450 --> 00:22:30,679
probably gone through the pairing

00:22:24,499 --> 00:22:33,529
process at home like a lot of times so I

00:22:30,679 --> 00:22:37,820
don't know a lot of times so just kind

00:22:33,529 --> 00:22:40,489
of not giving up and just keep on doing

00:22:37,820 --> 00:22:41,119
it there's victory key but I kind of got

00:22:40,489 --> 00:22:50,119
there in the end

00:22:41,119 --> 00:22:52,639
so yeah it was worth it the most

00:22:50,119 --> 00:22:56,690
exciting device apart from the sound bar

00:22:52,639 --> 00:22:58,730
I don't know I kind of liked the I

00:22:56,690 --> 00:23:00,919
actually quite liked playing around with

00:22:58,730 --> 00:23:04,340
the light bulbs because they give you

00:23:00,919 --> 00:23:06,200
like a hue picker so you can kind of

00:23:04,340 --> 00:23:09,440
change the color and then it'll send

00:23:06,200 --> 00:23:11,690
back to the to Ruby home like the

00:23:09,440 --> 00:23:15,289
hexadecimal value I wanted to make like

00:23:11,690 --> 00:23:17,960
some crazy thing where could control a

00:23:15,289 --> 00:23:19,909
game or something with it but kind of

00:23:17,960 --> 00:23:24,019
ran out of time so that's why I had the

00:23:19,909 --> 00:23:25,609
sound bar the strangest device I mean

00:23:24,019 --> 00:23:28,190
it's really lame in my case it's just

00:23:25,609 --> 00:23:30,590
that I was like was genuinely surprised

00:23:28,190 --> 00:23:32,210
where my sound bar like I was thinking

00:23:30,590 --> 00:23:34,909
I'm gonna have to do something with the

00:23:32,210 --> 00:23:37,399
Raspberry Pi where it sends an IR code

00:23:34,909 --> 00:23:40,190
to turn it on and off and then when I

00:23:37,399 --> 00:23:42,500
ran that program I was like oh what my

00:23:40,190 --> 00:23:46,460
sound bar actually just already has

00:23:42,500 --> 00:23:50,750
an API I don't have any weirder devices

00:23:46,460 --> 00:23:52,550
in my house I want a public one like I

00:23:50,750 --> 00:23:54,890
found someone who had an ass that was

00:23:52,550 --> 00:23:56,210
just completely wide open so you could

00:23:54,890 --> 00:23:59,930
just go on there and like browse

00:23:56,210 --> 00:24:06,970
everything yeah so that was a bit

00:23:59,930 --> 00:24:06,970
concerning cool thanks very much

00:24:07,800 --> 00:24:10,859

YouTube URL: https://www.youtube.com/watch?v=-EMUxycg-PU


