Title: Zen and the Art of Tube Amp Maintenance - North West Ruby User Group - May 2018
Publication date: 2018-05-23
Playlist: North West Ruby User Group
Description: 
	Zen and the art of tube amp maintenance, Alex Lynham
Captions: 
	00:00:00,030 --> 00:00:04,920
right okay so my talk is called zen and

00:00:02,970 --> 00:00:07,319
the art of tube amp maintenance it's a

00:00:04,920 --> 00:00:08,880
play on the title of the book zen and

00:00:07,319 --> 00:00:12,059
the art of motorcycle maintenance which

00:00:08,880 --> 00:00:13,200
you might read by robert Pirsig the most

00:00:12,059 --> 00:00:15,330
important thing you need to know about

00:00:13,200 --> 00:00:18,270
this book is that he introduces the idea

00:00:15,330 --> 00:00:21,330
of chatauqua which is I might pronounce

00:00:18,270 --> 00:00:23,490
wrong sorry if I have which is sort of

00:00:21,330 --> 00:00:25,529
like a reading circle or discussion

00:00:23,490 --> 00:00:28,619
circle where ideas are introduced and

00:00:25,529 --> 00:00:30,300
discussed and throughout the course of

00:00:28,619 --> 00:00:33,239
the novel he has these interludes where

00:00:30,300 --> 00:00:34,920
he's introducing ideas and positing

00:00:33,239 --> 00:00:38,190
thought experiments around the ideas of

00:00:34,920 --> 00:00:41,790
quality and value and kind of trying to

00:00:38,190 --> 00:00:44,000
provoke kind of a reaction and a I guess

00:00:41,790 --> 00:00:47,010
like you know inspiration in the reader

00:00:44,000 --> 00:00:49,590
in that sense this is sort of in the

00:00:47,010 --> 00:00:52,289
same in the same vein in that I'd like

00:00:49,590 --> 00:00:54,870
to provoke some ideas around systems

00:00:52,289 --> 00:00:58,199
design and component design and software

00:00:54,870 --> 00:00:59,670
design primarily to do with the

00:00:58,199 --> 00:01:02,399
relationship between four things right

00:00:59,670 --> 00:01:04,559
in formal reasoning coupling testing and

00:01:02,399 --> 00:01:06,479
feedback and how those there's all kind

00:01:04,559 --> 00:01:10,080
of breakdown at how we design systems

00:01:06,479 --> 00:01:11,520
and how we design software so I have

00:01:10,080 --> 00:01:13,530
some props right when I ask you a quick

00:01:11,520 --> 00:01:14,850
question like would you like those two

00:01:13,530 --> 00:01:16,770
things without any other knowledge of

00:01:14,850 --> 00:01:19,560
them would you kind of feel comfortable

00:01:16,770 --> 00:01:21,090
debugging those right okay if I gave you

00:01:19,560 --> 00:01:22,350
some tools and explained to you kind of

00:01:21,090 --> 00:01:25,380
what was going on would you feel

00:01:22,350 --> 00:01:26,280
comfortable debugging those right but

00:01:25,380 --> 00:01:28,229
that's the thing you're kind of thinking

00:01:26,280 --> 00:01:29,729
there's a lot of information contained

00:01:28,229 --> 00:01:32,009
that even if I give it all to you

00:01:29,729 --> 00:01:33,570
upfront even if I document it it's a lot

00:01:32,009 --> 00:01:35,850
to take in like getting a mental model

00:01:33,570 --> 00:01:37,229
of those systems is hard right and this

00:01:35,850 --> 00:01:39,329
is like every system we ever encounter

00:01:37,229 --> 00:01:41,549
especially ones when you go into

00:01:39,329 --> 00:01:45,119
particularly a big company and there's

00:01:41,549 --> 00:01:47,310
potentially 20 30 years of legacy staff

00:01:45,119 --> 00:01:48,750
that you need to understand right see

00:01:47,310 --> 00:01:51,869
the reality is neither of them you

00:01:48,750 --> 00:01:53,399
really want to deal with right so all

00:01:51,869 --> 00:01:55,500
production systems are like this so it's

00:01:53,399 --> 00:01:58,590
part of again while I'm trying to get to

00:01:55,500 --> 00:02:00,990
is how can we get more feedback from our

00:01:58,590 --> 00:02:02,700
systems how can we raise the reason

00:02:00,990 --> 00:02:04,860
about them in an informal way and how

00:02:02,700 --> 00:02:06,329
can we then translate that into helping

00:02:04,860 --> 00:02:09,950
us with debugging helping us with

00:02:06,329 --> 00:02:12,730
deploying and all this kind of stuff so

00:02:09,950 --> 00:02:14,500
Brandon could you pass those around

00:02:12,730 --> 00:02:16,599
I want everybody said you know just have

00:02:14,500 --> 00:02:18,610
a think about those I'm also going to

00:02:16,599 --> 00:02:20,110
reveal a free thing right up front that

00:02:18,610 --> 00:02:21,610
those are actually not even the same

00:02:20,110 --> 00:02:23,230
circuit and I don't know if that was

00:02:21,610 --> 00:02:25,510
that's obvious which is another

00:02:23,230 --> 00:02:28,569
interesting property of those two things

00:02:25,510 --> 00:02:30,340
they obfuscated right so yeah this is

00:02:28,569 --> 00:02:33,099
only our cue about maintenance I'm Alex

00:02:30,340 --> 00:02:37,540
you mostly know me thanks for listening

00:02:33,099 --> 00:02:39,430
so this is a pedal I make as a result of

00:02:37,540 --> 00:02:42,159
making this pedal I had to go through

00:02:39,430 --> 00:02:44,409
the process of hardware design from

00:02:42,159 --> 00:02:47,049
beginning to end and where this is

00:02:44,409 --> 00:02:49,540
relevant is if I said to you Brandon

00:02:47,049 --> 00:02:52,900
sorry I'm picking on you again can you

00:02:49,540 --> 00:02:56,140
reason about that circuit if I said is

00:02:52,900 --> 00:02:57,879
that component working you can take it

00:02:56,140 --> 00:02:59,620
out right and test it individually if I

00:02:57,879 --> 00:03:02,739
showed you how it's a lot simpler to

00:02:59,620 --> 00:03:04,930
then do that if I said again sorry I'm

00:03:02,739 --> 00:03:06,760
picking on you so much but can you add a

00:03:04,930 --> 00:03:08,140
ground bus to this if I explain what

00:03:06,760 --> 00:03:11,799
those two concepts were you could

00:03:08,140 --> 00:03:14,170
probably do this and bam we're done

00:03:11,799 --> 00:03:16,660
right quite simple when you have one

00:03:14,170 --> 00:03:18,819
component and there's an easy there's a

00:03:16,660 --> 00:03:20,620
easy kind of method for testing and

00:03:18,819 --> 00:03:22,569
changing right the the the pace of

00:03:20,620 --> 00:03:24,340
change is quick the cost of change is

00:03:22,569 --> 00:03:25,870
small so that's what we're really going

00:03:24,340 --> 00:03:27,370
to talk about here and I've been through

00:03:25,870 --> 00:03:29,109
this whole process with hardware design

00:03:27,370 --> 00:03:30,910
now and it's given me some thoughts on

00:03:29,109 --> 00:03:33,549
you know what this means in terms of

00:03:30,910 --> 00:03:36,639
software design produced realized

00:03:33,549 --> 00:03:39,310
hardware is hard and it's costly in a

00:03:36,639 --> 00:03:41,950
way that software isn't so anyway I've

00:03:39,310 --> 00:03:43,540
got this pedal designed it released it I

00:03:41,950 --> 00:03:45,510
think I'm on my third iteration of the

00:03:43,540 --> 00:03:49,599
PCB and I'm now looking at ways of

00:03:45,510 --> 00:03:52,000
making it in greater quantities I'm also

00:03:49,599 --> 00:03:54,930
interested in tube amps as the title

00:03:52,000 --> 00:03:58,510
suggests I built a bunch of amplifiers

00:03:54,930 --> 00:04:00,250
this is the this actually true crime

00:03:58,510 --> 00:04:01,389
scene amplifier on turret board what's

00:04:00,250 --> 00:04:03,099
interesting about turret boards you can

00:04:01,389 --> 00:04:04,510
prototype circuits on turret board and

00:04:03,099 --> 00:04:06,940
you can release production circus on

00:04:04,510 --> 00:04:09,819
turret board while I was building it I

00:04:06,940 --> 00:04:11,440
started a small electrical fire and so

00:04:09,819 --> 00:04:13,870
the thing about right the thing about

00:04:11,440 --> 00:04:14,919
software is we say we set a hair on fire

00:04:13,870 --> 00:04:16,660
when we make a mistake we don't

00:04:14,919 --> 00:04:19,690
literally set our hair on fire

00:04:16,660 --> 00:04:21,669
I had this amp in one hand and it was on

00:04:19,690 --> 00:04:24,310
fire and I was trying to kick the plug

00:04:21,669 --> 00:04:25,740
with my foot to get the to get the live

00:04:24,310 --> 00:04:28,949
current out of it

00:04:25,740 --> 00:04:31,110
the danger of change in software is much

00:04:28,949 --> 00:04:34,020
much smaller than it is in physical

00:04:31,110 --> 00:04:37,289
circuits right so the peak voltage on

00:04:34,020 --> 00:04:38,729
the suckers like 600 volts okay so if

00:04:37,289 --> 00:04:40,199
you want to test it there are test

00:04:38,729 --> 00:04:42,479
points there are known coupling

00:04:40,199 --> 00:04:44,729
interfaces and they're 250 volts of

00:04:42,479 --> 00:04:46,800
peace if not more so if you don't have a

00:04:44,729 --> 00:04:48,750
dedicated electricians digital

00:04:46,800 --> 00:04:51,210
multimeter your testing tools could

00:04:48,750 --> 00:04:53,039
literally be blown up by it right so how

00:04:51,210 --> 00:04:54,870
can you test a circuit that you can't

00:04:53,039 --> 00:04:56,520
even actually reason about with the

00:04:54,870 --> 00:04:58,289
tools you've got to hand these are

00:04:56,520 --> 00:05:00,000
problems we don't really have in

00:04:58,289 --> 00:05:05,460
software development not in the same way

00:05:00,000 --> 00:05:06,570
anyway so and his name by fixed right so

00:05:05,460 --> 00:05:08,099
I brought this one back in a rucksack

00:05:06,570 --> 00:05:10,199
from San Francisco because I impulsively

00:05:08,099 --> 00:05:12,090
bought an amp off a guy on Craigslist I

00:05:10,199 --> 00:05:14,669
brought it back in a hiking rucksack

00:05:12,090 --> 00:05:16,530
carried it through customs got it home

00:05:14,669 --> 00:05:17,909
and funnily enough during the process of

00:05:16,530 --> 00:05:20,370
getting it back in the hiking rucksack

00:05:17,909 --> 00:05:22,020
it didn't work on the other end and I

00:05:20,370 --> 00:05:23,729
had to work out what was wrong with it

00:05:22,020 --> 00:05:24,900
because the whole point of a cheap amp

00:05:23,729 --> 00:05:26,069
right you'd have to take it to an amp

00:05:24,900 --> 00:05:29,370
Tech and spend a couple hundred quid

00:05:26,069 --> 00:05:31,199
getting it fixed so I got it down to the

00:05:29,370 --> 00:05:32,280
point of the couplet of these kind of

00:05:31,199 --> 00:05:33,570
that trolls here which are doing the

00:05:32,280 --> 00:05:35,180
channel switching and I was like

00:05:33,570 --> 00:05:37,349
brilliant this looks like the problem

00:05:35,180 --> 00:05:39,300
changed them wasn't the problem at all

00:05:37,349 --> 00:05:40,650
but because you've got that process of

00:05:39,300 --> 00:05:42,300
informal reasoning where you build a

00:05:40,650 --> 00:05:44,430
mental model of what's happening in the

00:05:42,300 --> 00:05:46,380
circuit what's happening in this complex

00:05:44,430 --> 00:05:48,810
system it means that you can backtrack

00:05:46,380 --> 00:05:50,669
and change direction to work out where

00:05:48,810 --> 00:05:51,960
the problem really was and I'm probably

00:05:50,669 --> 00:05:53,849
giving myself a bit too you too

00:05:51,960 --> 00:05:55,500
much credit I did look up a lot of stuff

00:05:53,849 --> 00:05:57,270
on forums on the internet as well but

00:05:55,500 --> 00:05:59,669
eventually worked out what was there

00:05:57,270 --> 00:06:01,370
so I've touched on it in formal

00:05:59,669 --> 00:06:04,229
reasoning right

00:06:01,370 --> 00:06:06,509
what is it so informal reasoning is just

00:06:04,229 --> 00:06:08,099
applying logical processes in a kind of

00:06:06,509 --> 00:06:09,810
non formal logical context like we're

00:06:08,099 --> 00:06:11,639
not writing an essay on philosophy or

00:06:09,810 --> 00:06:15,810
logic we're trying to model things in

00:06:11,639 --> 00:06:19,050
our head so I've touched on the fact I

00:06:15,810 --> 00:06:21,960
build pedals here is a distortion pedal

00:06:19,050 --> 00:06:23,610
first pedals be specific what is a

00:06:21,960 --> 00:06:24,360
mental model for this if you know what

00:06:23,610 --> 00:06:27,509
it is right

00:06:24,360 --> 00:06:29,460
simply most distortion circuits have an

00:06:27,509 --> 00:06:30,990
input they have an amplifier stage they

00:06:29,460 --> 00:06:32,520
have a feedback stage which may or may

00:06:30,990 --> 00:06:34,169
not have clipping in it to have a

00:06:32,520 --> 00:06:37,710
filtering stage and have an output stage

00:06:34,169 --> 00:06:39,700
so that's how we might model that and

00:06:37,710 --> 00:06:42,260
model the signal flow within

00:06:39,700 --> 00:06:43,310
for a web stack right to make this more

00:06:42,260 --> 00:06:46,040
relevant to what we do we're all

00:06:43,310 --> 00:06:47,570
programmers we can model that calmly we

00:06:46,040 --> 00:06:49,430
can go what is a request response cycle

00:06:47,570 --> 00:06:51,860
look like it's a request to controller a

00:06:49,430 --> 00:06:53,780
database lookup typically some kind of

00:06:51,860 --> 00:06:56,450
transformation on the output of that and

00:06:53,780 --> 00:06:58,160
a response to the client so this is how

00:06:56,450 --> 00:07:02,690
if we had to debug it we can begin to

00:06:58,160 --> 00:07:04,490
step through these steps and feedback

00:07:02,690 --> 00:07:06,770
really is the other thing that we're

00:07:04,490 --> 00:07:08,570
looking for in order to diagnose what

00:07:06,770 --> 00:07:10,340
happens in our systems and it's also

00:07:08,570 --> 00:07:14,360
what we look for when we develop systems

00:07:10,340 --> 00:07:17,360
right you've got a gift coming up hey

00:07:14,360 --> 00:07:21,139
look at that guy so the point is right

00:07:17,360 --> 00:07:22,550
if we if we can't actually like if we

00:07:21,139 --> 00:07:23,180
don't have a rapid and tight feedback

00:07:22,550 --> 00:07:25,130
loop

00:07:23,180 --> 00:07:26,990
we're basically guessing I'm throwing a

00:07:25,130 --> 00:07:28,639
skateboard into this little halfpipe and

00:07:26,990 --> 00:07:30,080
one of a hundred variables can mean that

00:07:28,639 --> 00:07:32,330
is actually not going to be there when I

00:07:30,080 --> 00:07:34,760
jump up and expect them to be carried

00:07:32,330 --> 00:07:36,919
off by it so what are the things we do

00:07:34,760 --> 00:07:38,479
to try and make sure the skateboard is

00:07:36,919 --> 00:07:40,790
under our feet when we jump back on

00:07:38,479 --> 00:07:41,960
we're thinking things like embrace in

00:07:40,790 --> 00:07:43,910
the break victor talk right the

00:07:41,960 --> 00:07:45,050
inventing on principle one it's really

00:07:43,910 --> 00:07:48,650
really great but like even the whole

00:07:45,050 --> 00:07:49,970
point of that is that he's pulling a

00:07:48,650 --> 00:07:52,789
bunch of sliders and seeing the changes

00:07:49,970 --> 00:07:54,800
in the output of his code right and this

00:07:52,789 --> 00:07:55,970
is something we see in particularly a

00:07:54,800 --> 00:07:58,700
functional program particularly in

00:07:55,970 --> 00:08:00,140
closure where I now primarily work where

00:07:58,700 --> 00:08:01,490
you have rapid driven development and

00:08:00,140 --> 00:08:03,289
you're writing functions and seeing the

00:08:01,490 --> 00:08:05,690
input and output as you're programming

00:08:03,289 --> 00:08:07,789
but this is also the goal of things like

00:08:05,690 --> 00:08:09,289
guard and auto test right the kind of

00:08:07,789 --> 00:08:11,450
idea that you're going to change stuff

00:08:09,289 --> 00:08:13,250
in a code file and then you're going to

00:08:11,450 --> 00:08:15,139
get some kind of feedback from that to

00:08:13,250 --> 00:08:17,060
tell you if you've broken something it's

00:08:15,139 --> 00:08:19,039
also the goal of compilers ultimately is

00:08:17,060 --> 00:08:21,590
rapid feedback and more broadly I

00:08:19,039 --> 00:08:23,750
suppose TDD and then XP in general is

00:08:21,590 --> 00:08:25,880
about getting more rapid feedback to you

00:08:23,750 --> 00:08:28,820
as a programmer as you're building

00:08:25,880 --> 00:08:30,400
systems right and you know testing is

00:08:28,820 --> 00:08:33,320
supposed to help with this process

00:08:30,400 --> 00:08:34,760
rather than having to you know throw the

00:08:33,320 --> 00:08:38,000
skateboard in the well and hope for the

00:08:34,760 --> 00:08:39,860
best so bringing this back like a

00:08:38,000 --> 00:08:41,690
practical example like I've had to debug

00:08:39,860 --> 00:08:43,610
a lot of audio circuits and it's

00:08:41,690 --> 00:08:46,010
absolutely mind-boggling any hard

00:08:43,610 --> 00:08:47,810
compared to software debugging and this

00:08:46,010 --> 00:08:49,540
is really what provoked the whole kind

00:08:47,810 --> 00:08:52,160
of rumination on this and this talk so

00:08:49,540 --> 00:08:53,130
this is this an actual breadboard for a

00:08:52,160 --> 00:08:54,870
circuit

00:08:53,130 --> 00:08:58,320
for a production thing they built I make

00:08:54,870 --> 00:08:59,970
and I sell when you develop a circuit

00:08:58,320 --> 00:09:01,140
you build it on a breadboard and the

00:08:59,970 --> 00:09:03,090
great thing about a breadboard is you

00:09:01,140 --> 00:09:04,950
can debug it at multiple levels you can

00:09:03,090 --> 00:09:06,870
debug at the component so when I was

00:09:04,950 --> 00:09:08,520
picking on Brandon earlier I said you

00:09:06,870 --> 00:09:11,670
know how would you test that capacitor

00:09:08,520 --> 00:09:12,950
so again this guy here is also represent

00:09:11,670 --> 00:09:15,150
on the circuit we can see multiple

00:09:12,950 --> 00:09:16,740
capacitors I can test them at the

00:09:15,150 --> 00:09:18,060
component I can literally take them out

00:09:16,740 --> 00:09:19,620
of the breadboard testing with a

00:09:18,060 --> 00:09:21,300
multimeter put them back in if they work

00:09:19,620 --> 00:09:23,820
if it doesn't work I can switch in a new

00:09:21,300 --> 00:09:25,710
one I can test at the block level I can

00:09:23,820 --> 00:09:28,620
test at this tone stack here or I can

00:09:25,710 --> 00:09:30,360
test at the amplifier here or I can put

00:09:28,620 --> 00:09:33,540
a test signal through the entire thing

00:09:30,360 --> 00:09:35,250
the key things about this are that it's

00:09:33,540 --> 00:09:37,650
basically a set of transformations right

00:09:35,250 --> 00:09:39,030
all audio signals are so I know that I

00:09:37,650 --> 00:09:40,320
can just put test signals through

00:09:39,030 --> 00:09:43,470
individual parts of it and see a

00:09:40,320 --> 00:09:45,090
repeatable response more than that as

00:09:43,470 --> 00:09:47,190
well the idea of coupling which I'm

00:09:45,090 --> 00:09:48,900
going to come to in a second we talked

00:09:47,190 --> 00:09:50,880
about coupling capacitors in audio

00:09:48,900 --> 00:09:53,070
circuits so we literally know that there

00:09:50,880 --> 00:09:55,800
are explicit interfaces for where blocks

00:09:53,070 --> 00:09:57,180
begin and end in these circuits this

00:09:55,800 --> 00:09:59,430
breadboard has two really really

00:09:57,180 --> 00:10:00,990
desirable properties right easy change

00:09:59,430 --> 00:10:02,820
and easy debugging which I touched on

00:10:00,990 --> 00:10:06,030
earlier so the speed and the ease of

00:10:02,820 --> 00:10:07,980
change is incredibly high but I can't

00:10:06,030 --> 00:10:10,050
put this in a box and sell it to you

00:10:07,980 --> 00:10:12,330
that's ridiculous that's not how your

00:10:10,050 --> 00:10:14,010
MacBook isn't just one of these under

00:10:12,330 --> 00:10:15,630
the hood with twenty thousand parts in

00:10:14,010 --> 00:10:17,820
it right you need to actually formalize

00:10:15,630 --> 00:10:19,860
it into a circuit so that's where we

00:10:17,820 --> 00:10:21,270
begin to diverge from software

00:10:19,860 --> 00:10:22,620
engineering because in software

00:10:21,270 --> 00:10:24,750
engineering right we can write a code

00:10:22,620 --> 00:10:26,670
file I can push it up onto a server and

00:10:24,750 --> 00:10:29,040
it can run that's my shipped product

00:10:26,670 --> 00:10:31,620
that's not the case with hardware

00:10:29,040 --> 00:10:33,030
hardware has to be formalized and so it

00:10:31,620 --> 00:10:34,320
begins in this process where you begin

00:10:33,030 --> 00:10:35,970
to split it out like I've gotten our i/o

00:10:34,320 --> 00:10:38,790
board now here I've got a voltage

00:10:35,970 --> 00:10:39,930
regulation board and this is beginning

00:10:38,790 --> 00:10:42,450
to get actually incredibly complicated

00:10:39,930 --> 00:10:44,250
and we see this again in monolith versus

00:10:42,450 --> 00:10:45,420
micro-services that there are a lot of

00:10:44,250 --> 00:10:47,100
ways in which we try to handle

00:10:45,420 --> 00:10:49,320
complexity that often get out of hand

00:10:47,100 --> 00:10:50,820
really really really quickly and I

00:10:49,320 --> 00:10:53,370
certainly found that while trying to

00:10:50,820 --> 00:10:54,660
build out multiple audio systems so what

00:10:53,370 --> 00:11:01,560
we're trying to do right productionize

00:10:54,660 --> 00:11:02,760
our hardware and there we go okay so

00:11:01,560 --> 00:11:04,170
putting a circuit into production has a

00:11:02,760 --> 00:11:05,280
number of steps we start with the

00:11:04,170 --> 00:11:06,970
breadboard that I've already shown

00:11:05,280 --> 00:11:08,530
we then formalize it into a secure Mac

00:11:06,970 --> 00:11:10,810
which is just an abstract representation

00:11:08,530 --> 00:11:12,850
right same thing as a database schema is

00:11:10,810 --> 00:11:14,500
the same root of the word then we have a

00:11:12,850 --> 00:11:16,390
prototype PCB and we have a production

00:11:14,500 --> 00:11:18,520
PCB and then we release it and then

00:11:16,390 --> 00:11:20,110
maybe we refine it but that final step

00:11:18,520 --> 00:11:23,500
and in fact these individual steps here

00:11:20,110 --> 00:11:25,090
could have like a six week or more cycle

00:11:23,500 --> 00:11:27,910
between iterations if something doesn't

00:11:25,090 --> 00:11:29,410
work then I've got to then redraw that

00:11:27,910 --> 00:11:31,120
and what's really interesting is this

00:11:29,410 --> 00:11:33,760
stage before I've been to where I've had

00:11:31,120 --> 00:11:36,400
a completely valid schematic and I've

00:11:33,760 --> 00:11:38,230
then got it made got manufactured I've

00:11:36,400 --> 00:11:39,970
got it back put the parts on it sold it

00:11:38,230 --> 00:11:42,250
all together to test it works and it

00:11:39,970 --> 00:11:44,590
hasn't worked and so I've made it minor

00:11:42,250 --> 00:11:46,300
tweak to the actual layout of the

00:11:44,590 --> 00:11:48,190
circuit which is just the physical

00:11:46,300 --> 00:11:49,990
representation in meatspace of that

00:11:48,190 --> 00:11:52,120
circuit the schematic is still correct

00:11:49,990 --> 00:11:53,830
and it has always been correct but only

00:11:52,120 --> 00:11:56,800
the representation in the physical world

00:11:53,830 --> 00:11:58,300
was wrong right and then we've had to go

00:11:56,800 --> 00:12:00,430
through a six-week cycle of this and

00:11:58,300 --> 00:12:02,890
this is just not the case in software

00:12:00,430 --> 00:12:04,360
and yet we sometimes we sometimes would

00:12:02,890 --> 00:12:07,570
forget that we can optimize in a way

00:12:04,360 --> 00:12:08,770
that we can't Hardware so and then

00:12:07,570 --> 00:12:10,360
there's a bunch of ways you can actually

00:12:08,770 --> 00:12:12,430
bring this together so there is this

00:12:10,360 --> 00:12:14,320
like explicit connection between the

00:12:12,430 --> 00:12:18,040
abstract representation the schematic

00:12:14,320 --> 00:12:21,330
you know and the implementation which

00:12:18,040 --> 00:12:21,330
can make it very very difficult to debug

00:12:21,540 --> 00:12:28,030
so handling coupling and I've talked

00:12:26,200 --> 00:12:30,100
about coupling before but the important

00:12:28,030 --> 00:12:33,030
real takeaway from this right is that

00:12:30,100 --> 00:12:36,820
analog signal flow in a lot of ways is

00:12:33,030 --> 00:12:38,590
kind of analogous to the way control

00:12:36,820 --> 00:12:41,410
flow and the way that data flow work in

00:12:38,590 --> 00:12:43,390
our programs and in a lot of ways it's

00:12:41,410 --> 00:12:44,020
also analogous the way that functional

00:12:43,390 --> 00:12:45,280
programming works

00:12:44,020 --> 00:12:47,140
sorry I have to mention functional

00:12:45,280 --> 00:12:49,510
programming because it is a simpler way

00:12:47,140 --> 00:12:52,960
for thinking about how state moves

00:12:49,510 --> 00:12:55,420
through our programs for a audio circuit

00:12:52,960 --> 00:12:57,220
if I put the same well you see here's

00:12:55,420 --> 00:12:58,690
the thing right if I put the same set of

00:12:57,220 --> 00:13:00,220
the same signal in the beginning of this

00:12:58,690 --> 00:13:02,140
amplifier I would expect to hear the

00:13:00,220 --> 00:13:03,790
same sound at the end if it's a

00:13:02,140 --> 00:13:05,350
different sound then I know something

00:13:03,790 --> 00:13:08,920
else is happening and I could begin to

00:13:05,350 --> 00:13:10,990
use this in formal reasoning model to

00:13:08,920 --> 00:13:11,950
work out what that might be a prime

00:13:10,990 --> 00:13:13,990
example would be if you have a

00:13:11,950 --> 00:13:15,640
fluorescent light above a circuit as

00:13:13,990 --> 00:13:17,560
you're working on it that can actually

00:13:15,640 --> 00:13:19,270
introduce noise in the circuit so if

00:13:17,560 --> 00:13:20,499
you're standing there going why is this

00:13:19,270 --> 00:13:21,999
so noisy

00:13:20,499 --> 00:13:23,079
turn off the light granted you're now

00:13:21,999 --> 00:13:24,399
and they're in the dark which is not

00:13:23,079 --> 00:13:26,259
particularly helpful when you're working

00:13:24,399 --> 00:13:29,679
on set a high voltage circuit but the

00:13:26,259 --> 00:13:31,329
noise will probably go away so it's that

00:13:29,679 --> 00:13:32,979
kind of there's a number of different

00:13:31,329 --> 00:13:34,359
things will allow you to kind of isolate

00:13:32,979 --> 00:13:37,809
what the problems you might be having

00:13:34,359 --> 00:13:41,009
are and so yeah like I said analog

00:13:37,809 --> 00:13:43,359
signal flow is sort of for the most part

00:13:41,009 --> 00:13:45,579
analogous to data flow and it means that

00:13:43,359 --> 00:13:46,899
we can think about what are the what the

00:13:45,579 --> 00:13:48,669
interface in our systems are what are

00:13:46,899 --> 00:13:50,409
the points where transformations happen

00:13:48,669 --> 00:13:52,239
a bit more effectively and this is not

00:13:50,409 --> 00:13:53,649
really limited just a functional

00:13:52,239 --> 00:13:56,169
programming bearing in mind that Ruby

00:13:53,649 --> 00:13:58,149
Python and all these kinds of primarily

00:13:56,169 --> 00:14:00,009
object-oriented languages have very very

00:13:58,149 --> 00:14:02,769
strong capacity for functional type

00:14:00,009 --> 00:14:04,479
thinking about how programs work so you

00:14:02,769 --> 00:14:06,759
know put a bunch of thoughts here on

00:14:04,479 --> 00:14:08,319
what these things what things you can do

00:14:06,759 --> 00:14:10,749
to kind of minimize those effects and

00:14:08,319 --> 00:14:12,099
begin to reason about your programs in

00:14:10,749 --> 00:14:14,199
the small and the large a bit more

00:14:12,099 --> 00:14:15,669
effectively but the two real key ones

00:14:14,199 --> 00:14:17,439
are the think in terms of transforms and

00:14:15,669 --> 00:14:18,999
think in terms of data flow my data

00:14:17,439 --> 00:14:21,369
should be a first-class citizen of your

00:14:18,999 --> 00:14:23,469
of your systems and your programs even

00:14:21,369 --> 00:14:25,299
in the small and when you start to think

00:14:23,469 --> 00:14:26,829
about that in terms of you know a guitar

00:14:25,299 --> 00:14:28,029
signal flowing through an amplifier it

00:14:26,829 --> 00:14:29,470
becomes a lot more clear to you they're

00:14:28,029 --> 00:14:31,569
like hang on I've been thinking about

00:14:29,470 --> 00:14:33,429
this all wrong for these years I want

00:14:31,569 --> 00:14:37,089
referential transparency and that kind

00:14:33,429 --> 00:14:39,220
of thing so what does this boil down to

00:14:37,089 --> 00:14:40,720
hey maybe breadboard driven developments

00:14:39,220 --> 00:14:42,489
what we want because we can have this in

00:14:40,720 --> 00:14:43,989
software we can't have this in hardware

00:14:42,489 --> 00:14:45,549
because I can't just ship you a

00:14:43,989 --> 00:14:48,699
breadboard I have to make it into a

00:14:45,549 --> 00:14:50,919
production PCB but in software I can

00:14:48,699 --> 00:14:52,539
ship you effectively a breadboard and

00:14:50,919 --> 00:14:54,609
everybody pays you and says you're a

00:14:52,539 --> 00:14:56,439
great programmer right so our production

00:14:54,609 --> 00:14:58,179
code base is the same as our development

00:14:56,439 --> 00:15:00,519
code base there's not a separation like

00:14:58,179 --> 00:15:01,629
there isn't Hardware in the same way and

00:15:00,519 --> 00:15:03,609
we know what this is right this is

00:15:01,629 --> 00:15:05,409
continuous delivery and yet most of the

00:15:03,609 --> 00:15:06,849
time we don't do it and there's loads of

00:15:05,409 --> 00:15:08,889
tools there's those are tools to

00:15:06,849 --> 00:15:11,109
actually make this even more granular so

00:15:08,889 --> 00:15:13,359
right even if I just deliver you my

00:15:11,109 --> 00:15:14,949
development code as production code I'm

00:15:13,359 --> 00:15:16,779
effectively already one step of the game

00:15:14,949 --> 00:15:18,669
in terms of you know hobbyist hardware

00:15:16,779 --> 00:15:20,489
but not only that we have things like

00:15:18,669 --> 00:15:23,079
continuous delivery that mean you can

00:15:20,489 --> 00:15:24,849
rapidly increase your pace of delivery

00:15:23,079 --> 00:15:26,679
in a way that we we absolutely can't in

00:15:24,849 --> 00:15:28,509
that world because it's so tied to a

00:15:26,679 --> 00:15:30,699
physical representation of the thing and

00:15:28,509 --> 00:15:32,169
then in the small you can also use

00:15:30,699 --> 00:15:32,790
things like the rapid to get literally

00:15:32,169 --> 00:15:36,210
instantly

00:15:32,790 --> 00:15:37,620
back in a way that again you can only do

00:15:36,210 --> 00:15:39,420
when your bread boarding when you're

00:15:37,620 --> 00:15:40,710
messing around before you start making

00:15:39,420 --> 00:15:42,540
schematics and these things which

00:15:40,710 --> 00:15:43,770
involve a lot of steps of change the

00:15:42,540 --> 00:15:52,560
pace of change is very quick and

00:15:43,770 --> 00:15:54,690
software ok so finally some takeaways so

00:15:52,560 --> 00:15:57,120
what we're looking for feedback is more

00:15:54,690 --> 00:15:58,590
important than testing so automated

00:15:57,120 --> 00:16:00,630
tests are basically a way for us to

00:15:58,590 --> 00:16:03,020
formalize the feedback process and

00:16:00,630 --> 00:16:05,520
they're very very useful as a result

00:16:03,020 --> 00:16:06,840
they reduce mental overhead because you

00:16:05,520 --> 00:16:08,910
don't want to remember that same

00:16:06,840 --> 00:16:10,410
incantation you had to run to get the

00:16:08,910 --> 00:16:11,760
result for that thing you were trying to

00:16:10,410 --> 00:16:14,790
work out whether it works or not but

00:16:11,760 --> 00:16:16,020
they also verify these feedback paths of

00:16:14,790 --> 00:16:18,270
a particular thing that you remember to

00:16:16,020 --> 00:16:19,590
test at that time the next time that a

00:16:18,270 --> 00:16:20,760
bug crops up is the thing that you

00:16:19,590 --> 00:16:22,020
didn't think you were going to test for

00:16:20,760 --> 00:16:24,270
right because you didn't think it was a

00:16:22,020 --> 00:16:26,070
problem decoupling is great

00:16:24,270 --> 00:16:28,500
creates interfaces right we have these

00:16:26,070 --> 00:16:29,820
explicit blocks in audio circuits we

00:16:28,500 --> 00:16:31,170
have these explicit interfaces between

00:16:29,820 --> 00:16:32,910
our systems particularly the micro

00:16:31,170 --> 00:16:34,140
service architecture how do we manage

00:16:32,910 --> 00:16:35,520
these are we going to manage them with

00:16:34,140 --> 00:16:37,470
contract validations we're going to

00:16:35,520 --> 00:16:39,090
manage them with schemas there's a lot

00:16:37,470 --> 00:16:41,400
of drawbacks to all of these approaches

00:16:39,090 --> 00:16:42,630
and then being able to hold a system in

00:16:41,400 --> 00:16:44,640
your head is the most important thing

00:16:42,630 --> 00:16:46,410
and this requires systematic simplicity

00:16:44,640 --> 00:16:50,490
which is to say it requires systematics

00:16:46,410 --> 00:16:52,290
and systematic simplicity sorry keep

00:16:50,490 --> 00:16:54,990
tripping over this word is when you're

00:16:52,290 --> 00:16:57,240
going over going from a simple thing at

00:16:54,990 --> 00:16:58,920
the level of literally your classes

00:16:57,240 --> 00:17:00,630
objects your functions depending what

00:16:58,920 --> 00:17:02,520
programming paradigm you're operating in

00:17:00,630 --> 00:17:04,770
all the way up to your components is not

00:17:02,520 --> 00:17:05,820
easy to do it's usually impossible

00:17:04,770 --> 00:17:07,380
because you're dealing with legacy

00:17:05,820 --> 00:17:09,060
systems and a number of things as well

00:17:07,380 --> 00:17:10,710
that just completely beyond your control

00:17:09,060 --> 00:17:12,420
but the most important thing is if

00:17:10,710 --> 00:17:13,770
you're able to apply informal reasoning

00:17:12,420 --> 00:17:15,120
to the system because you can hold it in

00:17:13,770 --> 00:17:17,160
your head then you're much more likely

00:17:15,120 --> 00:17:19,140
to make better architectural decisions

00:17:17,160 --> 00:17:20,910
and better decisions about individual

00:17:19,140 --> 00:17:25,050
pieces of code within even a single

00:17:20,910 --> 00:17:28,770
namespace or file and that's it

00:17:25,050 --> 00:17:31,430
and saying any questions otherwise I'll

00:17:28,770 --> 00:17:31,430
wrap up

00:17:33,410 --> 00:17:42,420
different circuits I think I've got six

00:17:39,210 --> 00:17:44,520
or seven from the moment although one of

00:17:42,420 --> 00:17:46,140
them vastly outstrips all the others in

00:17:44,520 --> 00:17:48,330
terms of popularity I've like three

00:17:46,140 --> 00:17:50,430
years of back orders if I worked every

00:17:48,330 --> 00:17:52,620
day of the year currently making them by

00:17:50,430 --> 00:17:54,390
hand and the other ones it's like I have

00:17:52,620 --> 00:17:56,250
a handful of orders here and there

00:17:54,390 --> 00:17:58,050
there's one that's just out strips all

00:17:56,250 --> 00:18:06,150
the others by a country mile I don't

00:17:58,050 --> 00:18:09,090
know why I assumed because it's the

00:18:06,150 --> 00:18:13,380
weirdest it's like a digital circuit

00:18:09,090 --> 00:18:15,840
doing quite odd things and what it's

00:18:13,380 --> 00:18:17,400
doing is what if it's so if a really big

00:18:15,840 --> 00:18:19,920
audio company like Roland or whoever

00:18:17,400 --> 00:18:22,230
made that circuit there would go oh this

00:18:19,920 --> 00:18:23,330
is broken this is making this is doing

00:18:22,230 --> 00:18:26,100
something really weird and unexpected

00:18:23,330 --> 00:18:27,450
but it's doing something kind of

00:18:26,100 --> 00:18:29,910
unexpected by design because it's

00:18:27,450 --> 00:18:31,770
seeding random numbers into the audio

00:18:29,910 --> 00:18:35,430
engine so I wrote the code for it as

00:18:31,770 --> 00:18:37,440
well and it's effectively collecting a

00:18:35,430 --> 00:18:39,150
sample buffer and then pushing it

00:18:37,440 --> 00:18:41,280
through a random number generator to to

00:18:39,150 --> 00:18:43,140
manipulate that sample buffer so it

00:18:41,280 --> 00:18:44,960
sounds like it's broken but if you want

00:18:43,140 --> 00:18:49,020
a pedal that sounds like it's broken

00:18:44,960 --> 00:18:51,450
then hey you know hey it's an ish

00:18:49,020 --> 00:18:53,010
apparently I knew right I made it for

00:18:51,450 --> 00:18:58,120
myself loads of other people want it too

00:18:53,010 --> 00:19:00,740
so yeah all right thanks guys

00:18:58,120 --> 00:19:00,740

YouTube URL: https://www.youtube.com/watch?v=Ns-5ijAuFDY


