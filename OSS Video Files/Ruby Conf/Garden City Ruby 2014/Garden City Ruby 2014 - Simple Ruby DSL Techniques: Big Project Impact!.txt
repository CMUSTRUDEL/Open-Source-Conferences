Title: Garden City Ruby 2014 - Simple Ruby DSL Techniques: Big Project Impact!
Publication date: 2020-01-24
Playlist: Garden City Ruby 2014
Description: 
	By Aman King

Will showcase real-world project code, highlighting custom-written Ruby DSLs that contribute to project success by improving team productivity. Ranging from simple authentication rules to complex social networking capabilities, DSLs can help tackle cross-cutting requirements and domain-specific abstractions. Benefits include faster story development, easier bug fixes, and deeper technical exposure for team members. Will also talk about some gotchas.

Will explain multiple techniques for creating DSLs within a Ruby project, including simple OO code without any metaprogramming, to medium-complexity use of mixins, to advanced usage of metaprogramming.

Help us caption & translate this video!

http://amara.org/v/FG4T/
Captions: 
	00:00:24,920 --> 00:00:30,200
OK, Simple Ruby DSL Techniques.

00:00:30,200 --> 00:00:32,970
Let's focus on that. Ruby is in bold.

00:00:32,970 --> 00:00:35,600
So apologies - this talk will bore you.

00:00:35,600 --> 00:00:37,210
It's actually a pure Ruby talk.

00:00:37,210 --> 00:00:38,980
I won't be referencing C,

00:00:38,980 --> 00:00:42,770
won't be comparing to Java or Closure.

00:00:42,770 --> 00:00:45,220
And there'll also be no references to architecture.

00:00:45,220 --> 00:00:52,220
OK, that said, I myself am a ployglot programmer,

00:00:53,280 --> 00:00:58,860
but still ended up spending a lot of time with Ruby projects.

00:00:58,860 --> 00:01:00,489
Ruby is not my favorite language.

00:01:00,489 --> 00:01:03,210
If you want to know my favorite language,

00:01:03,210 --> 00:01:04,320
ask me offline, yeah.

00:01:04,320 --> 00:01:07,370
That said, I still like Ruby a lot.

00:01:07,370 --> 00:01:10,840
It's helped me think differently.

00:01:10,840 --> 00:01:15,840
OK, let's get started.

00:01:15,840 --> 00:01:18,450
So when I registered and my talk got selected,

00:01:18,450 --> 00:01:22,229
organizers - who are doing a wonderful job, by the way -

00:01:22,229 --> 00:01:25,610
reached out to me and gave me a set of guidelines for speakers.

00:01:25,610 --> 00:01:29,229
It said, one of the guidelines was, start with a joke,

00:01:29,229 --> 00:01:33,600
or at least end with a joke. So here's my obligated humor,

00:01:33,600 --> 00:01:37,020
just to get things started.

00:01:37,020 --> 00:01:40,320
But there's another star disclaimer,

00:01:40,320 --> 00:01:43,140
jokes can offend people, was the most funny jokes

00:01:43,140 --> 00:01:47,509
are usually the ones that are offensive to someone.

00:01:47,509 --> 00:01:50,520
So this joke may also be a little offensive to some communities,

00:01:50,520 --> 00:01:53,600
but the offense is not intended.

00:01:53,600 --> 00:01:59,820
It's accidental. ?? (00:01:55:28)

00:01:59,820 --> 00:02:01,859
It's also not an original joke.

00:02:01,859 --> 00:02:04,409
You may have heard it multiple times.

00:02:04,409 --> 00:02:07,319
So please do make an effort to laugh at the end of it.

00:02:07,319 --> 00:02:12,569
It'll just make me feel good. OK, so here's the joke, yeah.

00:02:12,569 --> 00:02:15,840
What is common between beggars and developers?

00:02:15,840 --> 00:02:17,560
Don't answer. I know you know the answer.

00:02:17,560 --> 00:02:20,370
It's a very poor joke, which has been going around for a long time.

00:02:20,370 --> 00:02:25,890
It's a very old joke, yes. ?? he's older. Older than Chad even.

00:02:25,890 --> 00:02:29,100
I'll tell you the answer, OK.

00:02:29,100 --> 00:02:33,230
So, am I moving too much? Sorry, I'll pose here.

00:02:33,230 --> 00:02:35,989
When two developers, sorry I mean,

00:02:35,989 --> 00:02:38,500
two beggars meet at a railway station -

00:02:38,500 --> 00:02:41,819
that part is not a common part -

00:02:41,819 --> 00:02:43,930
OK so beggars are meeting at a railway station.

00:02:43,930 --> 00:02:47,569
Or when two developers meet at a tech conference,

00:02:47,569 --> 00:02:54,569
they introduce with the question, "What platform do you work on?"

00:02:59,370 --> 00:03:02,370
Thanks, thanks, some laughter also here,

00:03:02,370 --> 00:03:05,890
I really appreciate it.

00:03:05,890 --> 00:03:08,069
This is like satire too, though,

00:03:08,069 --> 00:03:11,459
that we can have philosophical talks about later.

00:03:11,459 --> 00:03:17,019
There's a difference between beggars and developers also though.

00:03:17,019 --> 00:03:19,049
Developers continue their conversation

00:03:19,049 --> 00:03:22,920
with another question, "What domain do you work on?"

00:03:22,920 --> 00:03:24,269
This is very, very typical.

00:03:24,269 --> 00:03:30,069
In fact this is a good opportunity to get some more examples of domains.

00:03:30,069 --> 00:03:31,739
What domain are you working on?

00:03:31,739 --> 00:03:33,610
What project is your domain for?

00:03:33,610 --> 00:03:35,019
Right now. Just shout out the answers.

00:03:35,019 --> 00:03:42,019
Could be finance, could be retail, could be anything else.

00:03:43,260 --> 00:03:47,239
Social. Entertainment. Education. Sorry?

00:03:47,239 --> 00:03:52,680
Health, yeah, health. OK, good. Warehousing -

00:03:52,680 --> 00:03:59,680
another domain. OK, interesting. Logistics, good.

00:04:00,400 --> 00:04:03,019
No one mentioned these.

00:04:03,019 --> 00:04:08,750
Maybe because we think of them as implementation concerns, right.

00:04:08,750 --> 00:04:11,010
They don't really solve any,

00:04:11,010 --> 00:04:14,500
they're not really relevant to any business domain that you work in.

00:04:14,500 --> 00:04:17,310
These are still very relevant, we know all of it,

00:04:17,310 --> 00:04:20,160
but they are implementation concerns.

00:04:20,160 --> 00:04:23,770
I still like to think of them as a domain, though.

00:04:23,770 --> 00:04:26,410
Perhaps as a technical domain.

00:04:26,410 --> 00:04:31,250
Maybe you would also describe these things to, or as a technical domain.

00:04:31,250 --> 00:04:32,430
But what are these things?

00:04:32,430 --> 00:04:34,300
Technical domain, business domain -

00:04:34,300 --> 00:04:38,000
what is a domain? There are obviously answers out there.

00:04:38,000 --> 00:04:41,560
I'll share my perspective of it.

00:04:41,560 --> 00:04:45,190
For me a domain is about a specialized field, right.

00:04:45,190 --> 00:04:49,240
It is about common context which is shared by specialists -

00:04:49,240 --> 00:04:51,070
people who work in that specialized field.

00:04:51,070 --> 00:04:54,700
And it's about common vocabulary used by those specialists,

00:04:54,700 --> 00:04:57,180
to communicate with each other.

00:04:57,180 --> 00:05:00,010
This talk is kind of focused on the last point,

00:05:00,010 --> 00:05:03,510
which is common vocabulary among specialists.

00:05:03,510 --> 00:05:06,450
And here are some examples to make it clear what I'm talking about.

00:05:06,450 --> 00:05:13,450
How many of you are saying that there grandmother -

00:05:13,930 --> 00:05:18,180
again, I may be offensive to a few people -

00:05:18,180 --> 00:05:22,640
but your grandmothers will understand what these sentences are?

00:05:22,640 --> 00:05:25,330
No raise- no one's raising their hand.

00:05:25,330 --> 00:05:27,050
How many of you guys understand these sentences?

00:05:27,050 --> 00:05:29,150
Are you all being shy?

00:05:29,150 --> 00:05:33,760
Because I was hoping for a full house here.

00:05:33,760 --> 00:05:40,350
OK, so a few hands did rise, right.

00:05:40,350 --> 00:05:45,130
We clearly know what these things mean,

00:05:45,130 --> 00:05:49,830
and Ruby also understands these right.

00:05:49,830 --> 00:05:52,880
We do not need to explain to anyone what a private method is.

00:05:52,880 --> 00:05:56,440
We do not need to explain to someone what delegation is.

00:05:56,440 --> 00:06:01,930
And Ruby kind of represents these words as is.

00:06:01,930 --> 00:06:05,760
This is actually a DSL in core Ruby.

00:06:05,760 --> 00:06:12,760
I am sure you guys have used these methods before actually.

00:06:12,950 --> 00:06:17,810
They're a Ruby method. But when you talk about DSL,

00:06:17,810 --> 00:06:21,490
these do not necessarily come out as clear examples.

00:06:21,490 --> 00:06:24,060
More common examples include our favorite ActiveRecord.

00:06:24,060 --> 00:06:28,780
It's been mentioned multiple times today. That is a DSL.

00:06:28,780 --> 00:06:35,780
A controller in Rails, they have DSLs. And libraries have them.

00:06:37,210 --> 00:06:39,460
One of my favorite libraries is Sunspot,

00:06:39,460 --> 00:06:41,940
cause they make working with Solr so easy.

00:06:41,940 --> 00:06:43,350
I remember on a Java project,

00:06:43,350 --> 00:06:45,850
I was working with Lucene in Java.

00:06:45,850 --> 00:06:49,360
I don't want to go back to it ever again.

00:06:49,360 --> 00:06:51,280
That was difficult.

00:06:51,280 --> 00:06:54,760
And all these examples are Ruby DSLs

00:06:54,760 --> 00:06:57,430
for the technical domain, right.

00:06:57,430 --> 00:07:02,930
So the question is where are the DSLs for the business domains

00:07:02,930 --> 00:07:06,660
we were all mentioning out there in the room.

00:07:06,660 --> 00:07:09,860
We've mentioned health, education, retail, finance,

00:07:09,860 --> 00:07:14,570
logistics, right. Where are the DSLs for those domains?

00:07:14,570 --> 00:07:18,830
Well framework writers don't write them.

00:07:18,830 --> 00:07:21,970
The reason they don't write them is they cannot guess

00:07:21,970 --> 00:07:25,090
what you need as consumers as those frameworks, right.

00:07:25,090 --> 00:07:29,190
They can guess that any domain will need some sort of authentication,

00:07:29,190 --> 00:07:30,560
caching will be important,

00:07:30,560 --> 00:07:33,080
you need to persist all the data that you are dealing with.

00:07:33,080 --> 00:07:35,750
They can guess about those things.

00:07:35,750 --> 00:07:39,960
They cannot guess what your business problem is.

00:07:39,960 --> 00:07:42,460
That's what your client knows.

00:07:42,460 --> 00:07:43,720
So who has to write those DSLs?

00:07:43,720 --> 00:07:45,320
Obviously it can't be those framework writers.

00:07:45,320 --> 00:07:47,920
It has to be you for your business domain.

00:07:47,920 --> 00:07:54,530
And why write them? A simple answer could be, why not?

00:07:54,530 --> 00:07:57,570
But if you have got experiences working with Rails all these years,

00:07:57,570 --> 00:08:01,580
we have experiences working with ActiveRecord and loving it.

00:08:01,580 --> 00:08:04,490
And what we love about them is how clean they look,

00:08:04,490 --> 00:08:08,250
how easy they make things to implement.

00:08:08,250 --> 00:08:11,700
Most of it is because of what I cited as DSL examples.

00:08:11,700 --> 00:08:15,030
So there are definitely productivity gains there.

00:08:15,030 --> 00:08:19,610
Why don't we want to harness those gains for our business domain as well?

00:08:19,610 --> 00:08:24,520
OK so that ends part one of my talk, which was about fluff.

00:08:24,520 --> 00:08:28,610
Now I'll focus more on the stuff of it.

00:08:28,610 --> 00:08:31,180
I like a balance of fluff and stuff.

00:08:31,180 --> 00:08:34,709
Some people are more of, no fluff just stuff.

00:08:34,709 --> 00:08:40,000
If we were to write a DSL, what is the first step?

00:08:40,000 --> 00:08:44,839
First you need to understand what DSLs are about, right.

00:08:44,839 --> 00:08:48,830
And that understanding comes from recognizing the DSL.

00:08:48,830 --> 00:08:51,630
It's like refactoring. Refactoring is a good thing,

00:08:51,630 --> 00:08:55,700
but you can't really do refactoring unless you first recognize code smells,

00:08:55,700 --> 00:08:57,860
and then relate them to what refactoring techniques

00:08:57,860 --> 00:09:00,139
can help you remove those code smells.

00:09:00,139 --> 00:09:03,240
So this is my attempt at trying to classify DSLs,

00:09:03,240 --> 00:09:06,879
so that you can recognize them a little better.

00:09:06,879 --> 00:09:12,600
I'll repeat the same examples. Look at them carefully.

00:09:12,600 --> 00:09:17,750
This sort of DSL I would like to classify as a fluent interface.

00:09:17,750 --> 00:09:19,139
It's not a kind of term coined by me.

00:09:19,139 --> 00:09:23,540
I think Martin Fowler blogged about it many years back.

00:09:23,540 --> 00:09:26,009
He's recently rewritten a DSL book as well.

00:09:26,009 --> 00:09:30,269
He relates fluent interface to implementing DSLs.

00:09:30,269 --> 00:09:36,060
We'll take another look at this sort of DSL,

00:09:36,060 --> 00:09:40,149
and this I like to call single-line declaration.

00:09:40,149 --> 00:09:46,269
Nothing very unintuitive about it. It is a single line of Ruby, right,

00:09:46,269 --> 00:09:49,009
and it is a declaration.

00:09:49,009 --> 00:09:51,199
I ought to spend some time talking about declarations code though.

00:09:51,199 --> 00:09:55,339
I think a lot of DSLs are declarative in nature and not imperative.

00:09:55,339 --> 00:09:57,160
I hope you understand these concepts.

00:09:57,160 --> 00:09:58,779
If not, go and read about it.

00:09:58,779 --> 00:10:04,310
It'll help you figure out ways of looking at code.

00:10:04,310 --> 00:10:08,009
A SQL is a good example of a declarative language.

00:10:08,009 --> 00:10:10,149
You say select star from this table.

00:10:10,149 --> 00:10:11,529
You don't tell the database how to go

00:10:11,529 --> 00:10:15,589
and fetch the records from the database, right.

00:10:15,589 --> 00:10:22,319
Just like this guy. around_action :wrap_in_transaction, only: :update-

00:10:22,319 --> 00:10:29,319
So you're telling Rails that for the update action method,

00:10:29,749 --> 00:10:34,069
just call this method before and after, right.

00:10:34,069 --> 00:10:36,050
So that's a declaration.

00:10:36,050 --> 00:10:38,810
Not necessarily exposing the implementation.

00:10:38,810 --> 00:10:42,980
Moving on, though, you can also declare stuff using blocks.

00:10:42,980 --> 00:10:45,079
So not just single lines.

00:10:45,079 --> 00:10:49,110
You can turn them into multiple lines by passing in a block.

00:10:49,110 --> 00:10:50,420
So block declaration.

00:10:50,420 --> 00:10:53,110
And these are the three simple categories that

00:10:53,110 --> 00:10:56,160
you can actually classify most DSLs into.

00:10:56,160 --> 00:11:00,060
Most other DSLs that you'll encounter in code,

00:11:00,060 --> 00:11:04,040
you can use these three classifications.

00:11:04,040 --> 00:11:07,149
Now I'm talking about implementing them yourself.

00:11:07,149 --> 00:11:09,680
Which takes us to the next stage.

00:11:09,680 --> 00:11:12,209
You need to recognize the secret sauce,

00:11:12,209 --> 00:11:18,019
the ingredients which can help you implement such DSLs.

00:11:18,019 --> 00:11:21,749
So let's take a lot at fluent interface.

00:11:21,749 --> 00:11:25,470
What you'll need is basically just method chaining

00:11:25,470 --> 00:11:26,649
and possibly the builder pattern.

00:11:26,649 --> 00:11:30,139
Or a variation of the builder pattern.

00:11:30,139 --> 00:11:34,310
I'll get into more detail later maybe.

00:11:34,310 --> 00:11:36,170
For single-line declarations,

00:11:36,170 --> 00:11:38,790
what you'll need is class methods.

00:11:38,790 --> 00:11:42,069
These are typically class methods.

00:11:42,069 --> 00:11:46,100
And some bit of meta-programming behind them.

00:11:46,100 --> 00:11:49,110
Typically the meta-programming will be very basic in nature.

00:11:49,110 --> 00:11:52,129
Nothing that you guys can't handle.

00:11:52,129 --> 00:11:58,220
And moving on to block declaration.

00:11:58,220 --> 00:12:01,079
It can be class methods like this one,

00:12:01,079 --> 00:12:03,410
or instance methods like this one.

00:12:03,410 --> 00:12:06,569
And again meta-programming behind it.

00:12:06,569 --> 00:12:08,269
This can sometimes become tricky

00:12:08,269 --> 00:12:12,160
and can go into what some may think is advanced meta-programming.

00:12:12,160 --> 00:12:18,740
But again, not something that we can't handle.

00:12:18,740 --> 00:12:20,430
So let's look at some examples.

00:12:20,430 --> 00:12:23,089
I'll be sharing some inspirations,

00:12:23,089 --> 00:12:26,980
basically code which emulates the kind of concepts

00:12:26,980 --> 00:12:30,559
you've dealt with in real-client projects.

00:12:30,559 --> 00:12:32,360
And I've put this up, some of these examples

00:12:32,360 --> 00:12:36,529
on GitHub as well so you can take a closer look later.

00:12:36,529 --> 00:12:39,730
So we'll tackle fluid interface first.

00:12:39,730 --> 00:12:46,730
That's the DSL we'll be implementing.

00:12:47,730 --> 00:12:51,050
The domain is production support, a ticketing system maybe.

00:12:51,050 --> 00:12:55,110
You are definitely dealing with incidents, right.

00:12:55,110 --> 00:12:59,259
And let me read it out:

00:12:59,259 --> 00:13:04,379
IncidentReport for app, severity critical, major.

00:13:04,379 --> 00:13:11,379
Priority: high, medium. From this date to that date, retrieve incidents.

00:13:14,040 --> 00:13:17,389
Maybe something that business users may understand.

00:13:17,389 --> 00:13:19,850
It's still a possibility because they,

00:13:19,850 --> 00:13:21,499
these symbols may confuse them,

00:13:21,499 --> 00:13:23,819
and the code line and the dots.

00:13:23,819 --> 00:13:28,509
But still, something that a business person may understand.

00:13:28,509 --> 00:13:31,899
What is important is that, again from a implementational perspective,

00:13:31,899 --> 00:13:35,069
you can probably get that there's nothing special in it.

00:13:35,069 --> 00:13:36,449
And you should be asking right now, OK,

00:13:36,449 --> 00:13:39,920
what's so special about it. Why, what makes it a DSL, right?

00:13:39,920 --> 00:13:42,800
ActiveRecord of inci- incident report is in ActiveRecord.

00:13:42,800 --> 00:13:46,589
You can simply use there and just do these things in one line.

00:13:46,589 --> 00:13:51,620
Why do you need so many dots in between, right.

00:13:51,620 --> 00:13:52,759
The question is the API.

00:13:52,759 --> 00:13:58,160
What makes it different is that the API embraces the domain.

00:13:58,160 --> 00:14:00,050
The API represents the domain, concepts from the domain.

00:14:00,050 --> 00:14:02,879
It's not generic persistence of a domain

00:14:02,879 --> 00:14:08,540
that you are trying to implement with a var, right.

00:14:08,540 --> 00:14:14,350
So let's take a look at what's happening behind the scenes.

00:14:14,350 --> 00:14:18,949
Is this readable? Yeah, people in the back? No?

00:14:18,949 --> 00:14:23,459
OK. So what I'll do is probably switch this out.

00:14:23,459 --> 00:14:25,129
This can always be risky.

00:14:25,129 --> 00:14:27,360
But let's see if this works.

00:14:27,360 --> 00:14:33,519
Yeah (00:14:30:19). Lots of ?? not Emacs. Sometimes ??.

00:14:33,519 --> 00:14:40,269
OK we were looking at an example of fluent interface.

00:14:40,269 --> 00:14:47,269
OK, see what I can do here.

00:14:52,800 --> 00:14:59,800
Oops, too big. Better? People at the back, no? Yeah? OK.

00:15:12,499 --> 00:15:17,459
So ignore this. Let's just assume there is a class called incident,

00:15:17,459 --> 00:15:19,970
which wrapped the data in DSL.

00:15:19,970 --> 00:15:20,869
This is the interesting piece.

00:15:20,869 --> 00:15:24,019
This was the class that was featuring in the DSL.

00:15:24,019 --> 00:15:27,309
We have a simple class method.

00:15:27,309 --> 00:15:29,369
Look at it. There is nothing interesting.

00:15:29,369 --> 00:15:33,100
It delegates to another class level method called new,

00:15:33,100 --> 00:15:35,449
which we know does what?

00:15:35,449 --> 00:15:40,399
Involves the instance method, called initialize, right.

00:15:40,399 --> 00:15:42,670
So basically we start off with a list of system

00:15:42,670 --> 00:15:46,860
in the class that we capture in our instance variable.

00:15:46,860 --> 00:15:52,740
And then there's a series of methods which are very similar in nature.

00:15:52,740 --> 00:15:56,949
Taken arguments stored in a instance variable,

00:15:56,949 --> 00:15:58,670
and this bit is important.

00:15:58,670 --> 00:16:00,790
It returns the object itself.

00:16:00,790 --> 00:16:02,610
This ?? (00:16:00:28) here method chaining.

00:16:02,610 --> 00:16:07,660
Cause you can do instant- incident report dot far,

00:16:07,660 --> 00:16:10,199
which will eventually just return you an instance report object.

00:16:10,199 --> 00:16:12,429
You do a dot on at see severity,

00:16:12,429 --> 00:16:15,470
that'll return you the incident report object again.

00:16:15,470 --> 00:16:20,249
Now you can do a dot priority, and so on and so forth.

00:16:20,249 --> 00:16:21,920
Straight-forward, yes?

00:16:21,920 --> 00:16:23,769
You guys following me, right? OK.

00:16:23,769 --> 00:16:27,019
So nothing special there.

00:16:27,019 --> 00:16:30,929
Somewhat related to a simplified version of builder pattern.

00:16:30,929 --> 00:16:33,790
And then this piece is in here.

00:16:33,790 --> 00:16:38,410
Once you've collected all the options that you want,

00:16:38,410 --> 00:16:39,709
you now want to use those options

00:16:39,709 --> 00:16:41,759
to do something interesting, something useful.

00:16:41,759 --> 00:16:45,699
It'll probably have a method call in the end,

00:16:45,699 --> 00:16:47,740
which does the heavy-weight lifting.

00:16:47,740 --> 00:16:51,230
For example, in ActiveRecord,

00:16:51,230 --> 00:16:53,439
which actually this implements ActiveRelations, right.

00:16:53,439 --> 00:16:57,679
There is a method which finally takes all your where arguments

00:16:57,679 --> 00:17:04,679
and does something about it. Makes a database query. No?

00:17:08,100 --> 00:17:15,100
You can do a dot activecard class name dot where dot join dot order dot limit.

00:17:15,689 --> 00:17:17,910
What (00:17:15:27) ?? files a query?

00:17:17,910 --> 00:17:23,490
To A. Yes. It is to A.

00:17:23,490 --> 00:17:26,770
Even when you're doing the each and stuff like that,

00:17:26,770 --> 00:17:32,290
internally to A is the one which makes a database query.

00:17:32,290 --> 00:17:35,090
My reference may be a little dated.

00:17:35,090 --> 00:17:39,960
This may not be necessarily the case in the latest version.

00:17:39,960 --> 00:17:41,470
This is like an equivalent of that.

00:17:41,470 --> 00:17:43,770
It takes all of your information

00:17:43,770 --> 00:17:45,360
and then finally does something with it.

00:17:45,360 --> 00:17:48,780
As you saw, this is the project which I've checked in on GitHub.

00:17:48,780 --> 00:17:51,660
It doesn't really have ActiveRecord as a gem dependency,

00:17:51,660 --> 00:17:54,010
nor do I have tables.

00:17:54,010 --> 00:17:55,890
So I'm just stimulating that there's something which'll

00:17:55,890 --> 00:17:58,310
give you all the data that you need.

00:17:58,310 --> 00:18:00,810
But too much data and you have to do filtering after.

00:18:00,810 --> 00:18:02,860
That is my simple interpretation here.

00:18:02,860 --> 00:18:05,690
It could actually be incident if it was in ActiveRecord.

00:18:05,690 --> 00:18:08,570
It could actually be incident dot var,

00:18:08,570 --> 00:18:11,260
and the var is generated based on all the options

00:18:11,260 --> 00:18:17,530
you have taken from your line code, right.

00:18:17,530 --> 00:18:19,540
Now let's get to the next interesting piece,

00:18:19,540 --> 00:18:23,500
that how to use the data that you've captured from your DSL.

00:18:23,500 --> 00:18:30,500
Always make a reasonable judgment called default data, right.

00:18:30,680 --> 00:18:35,480
For example, here we are seeing that nil is actually a valid default,

00:18:35,480 --> 00:18:37,330
cause there's always a chance that

00:18:37,330 --> 00:18:44,330
someone will not call this method at all, right.

00:18:44,570 --> 00:18:48,680
So just make sure that your builder methods,

00:18:48,680 --> 00:18:52,370
don't make an assumption that everyone will call those builder methods

00:18:52,370 --> 00:18:56,060
for each and every data attribute I have.

00:18:56,060 --> 00:18:59,730
And then you finally use it for your filtering

00:18:59,730 --> 00:19:02,570
and stuff like that, and then you return to incident,

00:19:02,570 --> 00:19:05,190
which is (00:19:01:22).

00:19:05,190 --> 00:19:08,940
Any questions about this so far? Nope?

00:19:08,940 --> 00:19:15,940
All clear, right? OK, I'll move back to the presentation.

00:19:22,430 --> 00:19:25,240
Some more examples, that was a simple one.

00:19:25,240 --> 00:19:30,900
These are again slightly tweaked versions from actual code bases.

00:19:30,900 --> 00:19:35,710
That's where we - oops, sorry -

00:19:35,710 --> 00:19:40,340
had something similar where there were worker jobs

00:19:40,340 --> 00:19:42,760
in production that would work in the background.

00:19:42,760 --> 00:19:47,930
But they could end up with errors, so we -

00:19:47,930 --> 00:19:54,900
this is a combination of ActiveRecord plus the builder pattern DSL.

00:19:54,900 --> 00:19:56,900
This object returns you a new object,

00:19:56,900 --> 00:20:00,910
and then you have these methods on it.

00:20:00,910 --> 00:20:03,240
Another project we were using Neo4j,

00:20:03,240 --> 00:20:07,170
a graph database, and we wanted to generate cipher queries,

00:20:07,170 --> 00:20:10,590
which are basically strings that you send across the restful API.

00:20:10,590 --> 00:20:17,590
But to generate that string, we are gonna have DSL on it, OK.

00:20:18,740 --> 00:20:20,700
Coming to single-line declarations.

00:20:20,700 --> 00:20:24,590
Another example, maybe from a community forum.

00:20:24,590 --> 00:20:31,250
You have posts which have attributes like title, description, author.

00:20:31,250 --> 00:20:32,930
But people are bad.

00:20:32,930 --> 00:20:38,550
Sometimes they use swear words in their comments.

00:20:38,550 --> 00:20:43,160
So we would like to sanitize_profanity_in title and description.

00:20:43,160 --> 00:20:47,990
And that's all that you write in your class declaration, right.

00:20:47,990 --> 00:20:50,010
And then this is how it'll be used.

00:20:50,010 --> 00:20:53,960
So you can create a post with a swear word,

00:20:53,960 --> 00:21:00,960
but when you actually get back to the value it'll be asterisked.

00:21:01,280 --> 00:21:03,350
But for simple purposes you still want the original value,

00:21:03,350 --> 00:21:05,960
just cause it's lost, it's sort of like it's lost.

00:21:05,960 --> 00:21:07,920
So you have this method, title_without_sanitation,

00:21:07,920 --> 00:21:10,870
which returns you the original value.

00:21:10,870 --> 00:21:14,240
We know that struct will give you this method title.

00:21:14,240 --> 00:21:17,310
But it's not doing the same thing that

00:21:17,310 --> 00:21:20,660
a struct implementation title will do.

00:21:20,660 --> 00:21:21,950
And we see this new method,

00:21:21,950 --> 00:21:23,840
which has suddenly come up from somewhere.

00:21:23,840 --> 00:21:26,370
It's not there in the class definition.

00:21:26,370 --> 00:21:27,640
Clearly there is metaprogramming involved,

00:21:27,640 --> 00:21:29,540
and this is what it looks like.

00:21:29,540 --> 00:21:33,420
Hopefully this is clear enough.

00:21:33,420 --> 00:21:37,940
This here's a module which we just included, right.

00:21:37,940 --> 00:21:41,690
And then there's a class method.

00:21:41,690 --> 00:21:45,490
So that's our class method,

00:21:45,490 --> 00:21:46,890
and then we just do our thing there,

00:21:46,890 --> 00:21:49,400
you have to generate new methods.

00:21:49,400 --> 00:21:50,360
We need names for those new methods.

00:21:50,360 --> 00:21:53,820
The names will be dependent on the attributes

00:21:53,820 --> 00:21:56,300
that you've declared, right.

00:21:56,300 --> 00:21:59,070
So here we are creating a new method name called

00:21:59,070 --> 00:22:01,210
title_with_sanitization, and title_without_sanitization.

00:22:01,210 --> 00:22:05,870
You do a define method for the sanitize method.

00:22:05,870 --> 00:22:09,190
You use the original method which you've called,

00:22:09,190 --> 00:22:13,130
let's say, unsanitized_method, yeah, as a variable.

00:22:13,130 --> 00:22:15,790
And you just gsub out all the profane words, right.

00:22:15,790 --> 00:22:20,600
This could get complex. You could have a profanity list

00:22:20,600 --> 00:22:22,500
and stuff like that. And then you use alias_method.

00:22:22,500 --> 00:22:27,070
You say that this method name, title_without_sanitization

00:22:27,070 --> 00:22:31,380
is the same as the original method definition with this tidier title

00:22:31,380 --> 00:22:32,330
(00:22:31:09??).

00:22:32,330 --> 00:22:37,320
And then you say alias_method but now title,

00:22:37,320 --> 00:22:44,170
method name title, will actually be your sanitized version, right.

00:22:44,170 --> 00:22:48,450
These two lines are actually simplified in Rails.

00:22:48,450 --> 00:22:50,680
They expose something called alias_method chain,

00:22:50,680 --> 00:22:55,150
which you may have used in your Rails products.

00:22:55,150 --> 00:22:57,830
Most, more examples of single-line declaration.

00:22:57,830 --> 00:23:03,220
Maybe here you see a usage of something similar in the controller,

00:23:03,220 --> 00:23:05,430
where we get more options.

00:23:05,430 --> 00:23:09,790
We say filter_for_profanity for the create action,

00:23:09,790 --> 00:23:11,910
but only for these parameters,

00:23:11,910 --> 00:23:13,090
which come into that action.

00:23:13,090 --> 00:23:16,240
We also have something authentication related,

00:23:16,240 --> 00:23:18,560
has_user_specific_actions :create and :destroy.

00:23:18,560 --> 00:23:21,010
Will check that the user is logged in

00:23:21,010 --> 00:23:24,260
and it will check that the user is allowed

00:23:24,260 --> 00:23:27,820
to create a post or destroy a post.

00:23:27,820 --> 00:23:30,030
For comments we are dealing with IsFlaggable,

00:23:30,030 --> 00:23:32,710
you just say is_flaggable,

00:23:32,710 --> 00:23:36,260
which means people can say report abuse or something like that.

00:23:36,260 --> 00:23:36,910
And this is interesting.

00:23:36,910 --> 00:23:38,860
We were also dealing with an activity feed,

00:23:38,860 --> 00:23:43,410
a wall, like a friend wall, on Facebook.

00:23:43,410 --> 00:23:45,380
And you say when there were a comment creator, right,

00:23:45,380 --> 00:23:47,030
let's just read this out.

00:23:47,030 --> 00:23:48,970
Generates, so it reads like this,

00:23:48,970 --> 00:23:51,160
generates_feed_item :content_feed_item,

00:23:51,160 --> 00:23:53,350
:for_addition_of_comment, :after_create

00:23:53,350 --> 00:23:58,840
And I don't have to explain things further than that.

00:23:58,840 --> 00:24:00,530
Again dealing with some background workers,

00:24:00,530 --> 00:24:04,190
here we see, and these are AWS SQS-based.

00:24:04,190 --> 00:24:09,030
SQS is the message queue implementation provided by AWS.

00:24:09,030 --> 00:24:13,280
We just say ImageWorker reads_queue_to_perform :rescaling,

00:24:13,280 --> 00:24:17,510
resizing of images, and the queue name is image,

00:24:17,510 --> 00:24:21,620
and there's also an error queue called image_error, right.

00:24:21,620 --> 00:24:23,090
And those are only the pieces of code that you

00:24:23,090 --> 00:24:24,440
actually need in this slide.

00:24:24,440 --> 00:24:28,510
Dealing with at least these behaviors.

00:24:28,510 --> 00:24:29,440
Block declaration.

00:24:29,440 --> 00:24:31,600
A little more complex.

00:24:31,600 --> 00:24:33,800
Here we actually dealing with social networking.

00:24:33,800 --> 00:24:36,540
Someone mentioned social as a domain.

00:24:36,540 --> 00:24:40,780
We are seeing fan has a SocialGraph where there are

00:24:40,780 --> 00:24:42,330
relationships called fan_followings,

00:24:42,330 --> 00:24:46,170
where the fan participates in the relationship

00:24:46,170 --> 00:24:47,530
as a fan towards a celebrity,

00:24:47,530 --> 00:24:50,080
and the relationship is outgoing,

00:24:50,080 --> 00:24:55,220
as in a fan initiates a relationship to a celebrity.

00:24:55,220 --> 00:24:57,230
On the celebrity end we have something similar.

00:24:57,230 --> 00:24:58,990
We say relationship fan_followings,

00:24:58,990 --> 00:25:05,990
as :celebrity towards a fan, but this relationship is incoming, right.

00:25:07,290 --> 00:25:10,870
And then we suddenly get methods like these.

00:25:10,870 --> 00:25:14,260
madhuri can have a fan name husain,

00:25:14,260 --> 00:25:17,680
husain's celebrity list will now have madhuri in it,

00:25:17,680 --> 00:25:20,340
and madhuri's fan list will have husain.

00:25:20,340 --> 00:25:24,610
How do we implement this?

00:25:24,610 --> 00:25:25,600
This is, this we've already seen.

00:25:25,600 --> 00:25:30,190
There's a class method, but a block can get complex.

00:25:30,190 --> 00:25:32,280
So you want another object to handle that complexity.

00:25:32,280 --> 00:25:36,380
That object is specification.

00:25:36,380 --> 00:25:39,070
Specification is very similar to the builder pattern we saw.

00:25:39,070 --> 00:25:41,160
It collects your relationship declarations.

00:25:41,160 --> 00:25:43,440
The sample we just had one relationship.

00:25:43,440 --> 00:25:46,470
You could have a fan community of fans connected to fans.

00:25:46,470 --> 00:25:49,460
So you collect all those rules

00:25:49,460 --> 00:25:52,670
and then you finally do something with it.

00:25:52,670 --> 00:25:56,280
So you say apply those relationships on the class, which user.

00:25:56,280 --> 00:25:59,330
And that's where a lot of metaprogramming happens.

00:25:59,330 --> 00:26:01,500
This is the relationship class

00:26:01,500 --> 00:26:05,480
which introduces those methods like add_fan,

00:26:05,480 --> 00:26:09,090
add_celebrity, celebrity_list, fan_list.

00:26:09,090 --> 00:26:12,400
Again these details you can look at on the GitHub project.

00:26:12,400 --> 00:26:15,450
But I'll move on.

00:26:15,450 --> 00:26:18,580
Some more examples, a little more complex,

00:26:18,580 --> 00:26:21,020
in a real-world project.

00:26:21,020 --> 00:26:23,160
And this is an interesting one where class,

00:26:23,160 --> 00:26:27,790
this guy, this classical method, is actually delegating to this,

00:26:27,790 --> 00:26:29,030
another classical method.

00:26:29,030 --> 00:26:30,770
And then doing something on top of it.

00:26:30,770 --> 00:26:33,660
We can have those kind of DSLs as well.

00:26:33,660 --> 00:26:34,890
And it's something very simple.

00:26:34,890 --> 00:26:36,620
It's another simple one.

00:26:36,620 --> 00:26:40,750
Nothing complex there.

00:26:40,750 --> 00:26:42,250
So quick recap:

00:26:42,250 --> 00:26:45,590
Fluent interface is the simplest of all.

00:26:45,590 --> 00:26:48,880
You can just start there.

00:26:48,880 --> 00:26:50,360
Single-line declarations, (00:26:50:17) ??,

00:26:50,360 --> 00:26:54,770
modules, mixins, classical methods, basic metaprogramming,

00:26:54,770 --> 00:26:56,240
easy enough.

00:26:56,240 --> 00:26:59,180
Block declaration - very simple.

00:26:59,180 --> 00:27:01,800
Similar to single-line declarations,

00:27:01,800 --> 00:27:04,670
except that you may end up doing some advance metaprogramming,

00:27:04,670 --> 00:27:06,260
like instance_eval or something.

00:27:06,260 --> 00:27:08,650
You win some, you lose some.

00:27:08,650 --> 00:27:11,030
So some things to be careful about:

00:27:11,030 --> 00:27:13,190
don't go overboard with the builder pattern.

00:27:13,190 --> 00:27:14,470
Not everything needs it.

00:27:14,470 --> 00:27:19,900
Keep the builder classes particularly separate from the class you're building.

00:27:19,900 --> 00:27:22,500
And again, create default values with care,

00:27:22,500 --> 00:27:27,160
because you can't expect your consumer to always use the method.

00:27:27,160 --> 00:27:27,870
Metaprogramming - don't shy away.

00:27:27,870 --> 00:27:30,810
I see a lot of suspicion in programmers from a company.

00:27:30,810 --> 00:27:32,250
Don't shy away, just be vigilant.

00:27:32,250 --> 00:27:35,170
Structure metaprogramming code clearly.

00:27:35,170 --> 00:27:38,910
Focus on readability, cause metaprogramming ?? (00:27:38:24)

00:27:38,910 --> 00:27:42,020
code can be difficult to understand.

00:27:42,020 --> 00:27:43,260
Control your options explosion.

00:27:43,260 --> 00:27:45,750
We saw that our single-line declaration took multiple options.

00:27:45,750 --> 00:27:48,000
You may gain the habit of adding more

00:27:48,000 --> 00:27:51,770
and more as your project evolves. Just be careful of that.

00:27:51,770 --> 00:27:56,120
Use tests and use metaprogramming as a way to remove duplication.

00:27:56,120 --> 00:27:58,290
But duplication not the way we typically understand it,

00:27:58,290 --> 00:28:00,370
but duplication even in the code structure.

00:28:00,370 --> 00:28:03,450
So keep a watch out for duplication in code structure,

00:28:03,450 --> 00:28:05,500
which you can remove using metaprogramming.

00:28:05,500 --> 00:28:09,360
Pains in general: debugging can be difficult, yes,

00:28:09,360 --> 00:28:13,530
it can be difficult. Unit tests help, but not always.

00:28:13,530 --> 00:28:16,520
Writing DSL implementation can become easier with practice.

00:28:16,520 --> 00:28:19,210
Reading it is still difficult.

00:28:19,210 --> 00:28:20,620
Dealing with variations, we talked about,

00:28:20,620 --> 00:28:24,430
I think Chad mentioned abstractions can be dangerous sometimes.

00:28:24,430 --> 00:28:26,270
And here we are talking about abstraction.

00:28:26,270 --> 00:28:30,380
And as soon as you have variations you need to control it.

00:28:30,380 --> 00:28:32,440
And you may think you're making the most elegant DSL,

00:28:32,440 --> 00:28:34,970
so beautiful that you will understand it,

00:28:34,970 --> 00:28:36,230
everyone else will understand.

00:28:36,230 --> 00:28:40,260
The risk is then it's only you understand that DSL.

00:28:40,260 --> 00:28:43,570
It's not really capturing what you need to capture.

00:28:43,570 --> 00:28:46,070
There's still benefits, though.

00:28:46,070 --> 00:28:47,950
Productivity - I mean,

00:28:47,950 --> 00:28:50,950
these are examples that we've seen full cycle of user stories.

00:28:50,950 --> 00:28:57,390
So quick analysis with the queue and developers of what needs to be done.

00:28:57,390 --> 00:29:00,300
Implementation and then testing all happens in half a day.

00:29:00,300 --> 00:29:02,460
Why? Because you have a lot of reusable code.

00:29:02,460 --> 00:29:06,160
And the example we saw has user-specific actions.

00:29:06,160 --> 00:29:09,780
You can just implement it so many controllers in one shot.

00:29:09,780 --> 00:29:14,290
Maintenance gets improved because of improved readability and consistency.

00:29:14,290 --> 00:29:17,010
There is just one way of implementing something.

00:29:17,010 --> 00:29:18,780
You don't have too much inheritance going on,

00:29:18,780 --> 00:29:20,690
too much module-mixing going on.

00:29:20,690 --> 00:29:22,400
There's a consistent way of implementing

00:29:22,400 --> 00:29:27,640
a business concept, which leads to lesser defects and quick fixes.

00:29:27,640 --> 00:29:30,190
Your Ruby know-how increases in your team members

00:29:30,190 --> 00:29:32,960
because you're kind of forced to like look into metaprogramming

00:29:32,960 --> 00:29:36,610
a little bit more, and some of the patterns which help.

00:29:36,610 --> 00:29:40,760
Your understanding of the business domain increases a lot,

00:29:40,760 --> 00:29:43,950
because you are modeling business domain in your DSL.

00:29:43,950 --> 00:29:45,710
And quick ramp-up for team members.

00:29:45,710 --> 00:29:48,250
A team member could join and you've seen this,

00:29:48,250 --> 00:29:51,490
and from the second day onwards they're just using existing DSLs.

00:29:51,490 --> 00:29:53,720
They don't even need to go and look into it,

00:29:53,720 --> 00:29:56,030
what's happening under the hood, all that metaprogramming,

00:29:56,030 --> 00:29:59,810
because the DSL is so clear.

00:29:59,810 --> 00:30:05,010
And final words: custom DSLs for business domains.

00:30:05,010 --> 00:30:08,880
Just try it.

00:30:08,880 --> 00:30:09,990
You may fail. Team members may not like it.

00:30:09,990 --> 00:30:12,750
You can always undo it. But give it a shot,

00:30:12,750 --> 00:30:14,770
cause you are using it every day if you are using Rails,

00:30:14,770 --> 00:30:19,450
SunSpot, a lot of library out there. I mean, just rSpec, right.

00:30:19,450 --> 00:30:24,110
You are using it every day. Just give it a shot for your business domain.

00:30:24,110 --> 00:30:31,110

YouTube URL: https://www.youtube.com/watch?v=E1rH2bcWN5A


