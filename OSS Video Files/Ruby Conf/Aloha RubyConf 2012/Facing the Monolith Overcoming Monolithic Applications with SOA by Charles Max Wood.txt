Title: Facing the Monolith Overcoming Monolithic Applications with SOA by Charles Max Wood
Publication date: 2020-01-28
Playlist: Aloha RubyConf 2012
Description: 
	Help us caption & translate this video!

http://amara.org/v/FGfo/
Captions: 
	00:00:14,469 --> 00:00:20,779
everybody it looks like it's about time

00:00:17,840 --> 00:00:22,550
to start so I'm gonna ready to start I

00:00:20,779 --> 00:00:25,789
figured since I was in Hawaii I'd

00:00:22,550 --> 00:00:27,860
dressed for the occasion so I got a

00:00:25,789 --> 00:00:28,310
shirt it's real pretty if you're not in

00:00:27,860 --> 00:00:32,900
Hawaii

00:00:28,310 --> 00:00:34,129
Hawaii's real pretty anyway so let's go

00:00:32,900 --> 00:00:36,559
ahead and get this started I'm gonna be

00:00:34,129 --> 00:00:38,180
talking about facing the monolith how

00:00:36,559 --> 00:00:40,300
many of you guys have built or worked on

00:00:38,180 --> 00:00:42,559
a monolithic application of some kind

00:00:40,300 --> 00:00:46,280
yeah just about everybody you've been

00:00:42,559 --> 00:00:47,420
there so you know that pain right well

00:00:46,280 --> 00:00:48,590
that's what I'm going to talk about and

00:00:47,420 --> 00:00:51,350
how we solved it on one of the

00:00:48,590 --> 00:00:53,239
applications that I work on so to start

00:00:51,350 --> 00:00:55,789
us off I'm just going to introduce

00:00:53,239 --> 00:00:57,739
myself I'm Charles Mac's wood I'm the

00:00:55,789 --> 00:00:59,300
lead developer at intentional excellence

00:00:57,739 --> 00:01:01,879
productions that's my own consulting

00:00:59,300 --> 00:01:03,620
company so if you want to hire us to

00:01:01,879 --> 00:01:05,869
build you something you just talk to me

00:01:03,620 --> 00:01:07,910
and we'll make that happen I'm also the

00:01:05,869 --> 00:01:09,759
host of the Ruby Rose podcast I see

00:01:07,910 --> 00:01:12,200
James over there he's also on the show

00:01:09,759 --> 00:01:14,300
we have a good time every week talking

00:01:12,200 --> 00:01:15,770
about all kinds of interesting things so

00:01:14,300 --> 00:01:18,830
if you haven't listened to that you can

00:01:15,770 --> 00:01:20,420
go find it at Ruby Rose comm I also have

00:01:18,830 --> 00:01:23,330
a JavaScript show at JavaScript jabber

00:01:20,420 --> 00:01:25,940
calm and freelancing show a truly

00:01:23,330 --> 00:01:28,310
freelancers calm so if you're interested

00:01:25,940 --> 00:01:32,959
in those then feel free to check them

00:01:28,310 --> 00:01:34,550
out I'm not gonna go too deep into what

00:01:32,959 --> 00:01:36,080
the application did I'm gonna talk

00:01:34,550 --> 00:01:37,520
around some of the pieces that are there

00:01:36,080 --> 00:01:40,910
but I don't want you get neck deep in

00:01:37,520 --> 00:01:43,009
the details there I put this up for

00:01:40,910 --> 00:01:44,599
another reason and that is that if

00:01:43,009 --> 00:01:46,340
you've worked on a monolithic

00:01:44,599 --> 00:01:51,830
application you know that you sometimes

00:01:46,340 --> 00:01:53,869
do wind up neck deep in and so this

00:01:51,830 --> 00:01:55,220
is just you know an illustration of how

00:01:53,869 --> 00:01:58,429
it feels to work on a monolithic

00:01:55,220 --> 00:02:00,679
application under some circumstances so

00:01:58,429 --> 00:02:05,060
let's talk about this for a minute you

00:02:00,679 --> 00:02:06,500
know we get this application when you're

00:02:05,060 --> 00:02:07,910
starting to build it it's just like oh

00:02:06,500 --> 00:02:11,390
well we just want something that does

00:02:07,910 --> 00:02:13,099
this little thing over here right so you

00:02:11,390 --> 00:02:15,349
get you know you get something that's

00:02:13,099 --> 00:02:16,790
reasonably easy to take care of and

00:02:15,349 --> 00:02:19,190
you're solving a problem so your boss

00:02:16,790 --> 00:02:21,230
basically says hey tame this thing you

00:02:19,190 --> 00:02:22,310
know and if you've ever had a cat you

00:02:21,230 --> 00:02:24,320
never really

00:02:22,310 --> 00:02:26,660
but but but you kind of get the idea

00:02:24,320 --> 00:02:28,160
right you know make it do something that

00:02:26,660 --> 00:02:30,950
it didn't do before you know solve this

00:02:28,160 --> 00:02:32,870
problem and so you start solving the

00:02:30,950 --> 00:02:36,230
problem you get a real good feel for

00:02:32,870 --> 00:02:37,910
okay here's what it takes to to do this

00:02:36,230 --> 00:02:40,510
to do it right in our case we were

00:02:37,910 --> 00:02:43,220
building a lead generation platform and

00:02:40,510 --> 00:02:45,500
what we were told was we wanted a system

00:02:43,220 --> 00:02:49,160
that would organize the leads it sounds

00:02:45,500 --> 00:02:52,100
pretty simple right so then as things go

00:02:49,160 --> 00:02:54,980
on what happens is is they say okay well

00:02:52,100 --> 00:02:58,280
now we need it to do something else well

00:02:54,980 --> 00:02:59,930
cats don't bark I'm sorry they don't but

00:02:58,280 --> 00:03:02,300
that's the that's the specification

00:02:59,930 --> 00:03:05,180
that's what the project needs to do now

00:03:02,300 --> 00:03:06,680
okay it needs to bark so we start doing

00:03:05,180 --> 00:03:08,030
this genetic manipulation on our

00:03:06,680 --> 00:03:10,400
application to make it do something that

00:03:08,030 --> 00:03:12,470
was never meant to do right instead of

00:03:10,400 --> 00:03:14,959
instead of working something else in

00:03:12,470 --> 00:03:17,180
that will handle barking for us and

00:03:14,959 --> 00:03:21,170
before long you wind up with this huge

00:03:17,180 --> 00:03:22,430
thing and you know you've got to teach

00:03:21,170 --> 00:03:23,959
you to do another trick you've got

00:03:22,430 --> 00:03:26,209
another feature to add to this thing

00:03:23,959 --> 00:03:29,150
right and so your boss is basically

00:03:26,209 --> 00:03:30,500
saying hey tame this thing and make it

00:03:29,150 --> 00:03:32,510
work for us and so you've got to keep

00:03:30,500 --> 00:03:33,920
track of all the different heads and is

00:03:32,510 --> 00:03:38,030
it gonna take your head off with its

00:03:33,920 --> 00:03:44,780
claws and I mean it's just a major pain

00:03:38,030 --> 00:03:47,510
in the neck so what we started with was

00:03:44,780 --> 00:03:50,000
an application that basically was this

00:03:47,510 --> 00:03:52,400
right it's it's a bucket put the leads

00:03:50,000 --> 00:03:55,370
in it actually it's a little more like

00:03:52,400 --> 00:03:57,320
this it's a bucket that we have to

00:03:55,370 --> 00:03:59,060
organize the leads in so you know maybe

00:03:57,320 --> 00:04:00,920
a file cabinet instead of a bucket but

00:03:59,060 --> 00:04:03,580
you know same same thing and databases

00:04:00,920 --> 00:04:06,470
do this organization thing pretty well

00:04:03,580 --> 00:04:08,239
so not a big deal then you just build

00:04:06,470 --> 00:04:12,769
tables and make it look nice and stuff

00:04:08,239 --> 00:04:15,860
right so we also need to collect the

00:04:12,769 --> 00:04:18,320
leads so you know some system that will

00:04:15,860 --> 00:04:20,000
let you put leads in then that's fine

00:04:18,320 --> 00:04:24,139
you know maybe some external API

00:04:20,000 --> 00:04:26,570
something like that not a big deal but

00:04:24,139 --> 00:04:28,190
wait a minute we've got these leads and

00:04:26,570 --> 00:04:30,920
the way we make money is we sell them to

00:04:28,190 --> 00:04:32,389
the people that want them so we need

00:04:30,920 --> 00:04:34,070
some way of taking the leads out and

00:04:32,389 --> 00:04:37,700
sending them off to whoever's gonna pay

00:04:34,070 --> 00:04:39,770
them for us and we need some websites

00:04:37,700 --> 00:04:41,450
where people can come in and enter their

00:04:39,770 --> 00:04:42,889
information so that we get the lead so

00:04:41,450 --> 00:04:44,240
that they go into the system so that we

00:04:42,889 --> 00:04:47,900
can send them off to the people that pay

00:04:44,240 --> 00:04:49,580
us and make money and you know it would

00:04:47,900 --> 00:04:51,650
be really nice for SEO if we had some

00:04:49,580 --> 00:04:53,960
kind of CMS you know something that

00:04:51,650 --> 00:04:56,360
would draw people in so that they can

00:04:53,960 --> 00:04:57,440
come and this is educational ijen so you

00:04:56,360 --> 00:04:59,060
know they come in and they start

00:04:57,440 --> 00:05:01,400
learning about some of the majors they

00:04:59,060 --> 00:05:03,200
can take and all this stuff and then

00:05:01,400 --> 00:05:04,250
it'll help them find the right lead form

00:05:03,200 --> 00:05:05,810
so then they can enter the information

00:05:04,250 --> 00:05:10,010
so it can go into the system so I can

00:05:05,810 --> 00:05:11,660
get sent and you know we need some user

00:05:10,010 --> 00:05:13,070
administration because obviously not

00:05:11,660 --> 00:05:15,200
just anybody should be able to access

00:05:13,070 --> 00:05:16,220
these leads and we need reporting so

00:05:15,200 --> 00:05:19,760
that we know how much money we're making

00:05:16,220 --> 00:05:23,750
and we verify the leads through our call

00:05:19,760 --> 00:05:25,460
center so we need a call center app that

00:05:23,750 --> 00:05:27,020
can go in and see these leads and verify

00:05:25,460 --> 00:05:29,300
them and make sure they're okay because

00:05:27,020 --> 00:05:31,580
if we verify the leads we get paid more

00:05:29,300 --> 00:05:34,010
for them because of high quality you

00:05:31,580 --> 00:05:38,120
kind of get the picture and so we

00:05:34,010 --> 00:05:40,100
started with something like this and you

00:05:38,120 --> 00:05:43,430
know have this process around it and we

00:05:40,100 --> 00:05:44,840
just end up with this mess so I've kind

00:05:43,430 --> 00:05:47,240
of worked through some of these this is

00:05:44,840 --> 00:05:50,360
basically the lead collection work

00:05:47,240 --> 00:05:52,370
workflow where you you have all of these

00:05:50,360 --> 00:05:55,160
things going on and then the other

00:05:52,370 --> 00:05:56,090
workflow has to do with managing the

00:05:55,160 --> 00:05:59,270
leads and putting them in the right

00:05:56,090 --> 00:06:01,010
place so your boss comes to you and says

00:05:59,270 --> 00:06:05,030
add a new feature put an addition on

00:06:01,010 --> 00:06:06,530
this thing and what it boils down to is

00:06:05,030 --> 00:06:09,440
you've got to teach this guy to do a new

00:06:06,530 --> 00:06:12,140
trick and you've got to do it without

00:06:09,440 --> 00:06:14,510
getting your head taken off so you

00:06:12,140 --> 00:06:17,180
defang you declaw you do all these

00:06:14,510 --> 00:06:20,720
different things really feels like every

00:06:17,180 --> 00:06:22,930
feature you're adding is just not fun

00:06:20,720 --> 00:06:25,520
and you're doing all of this stuff

00:06:22,930 --> 00:06:28,190
you're shaving these acts to get this

00:06:25,520 --> 00:06:29,750
feature in okay you gotta shave enough

00:06:28,190 --> 00:06:31,160
yak's to get enough insulation to put

00:06:29,750 --> 00:06:33,870
the addition on the house

00:06:31,160 --> 00:06:37,290
okay and and yak hair is high-quality

00:06:33,870 --> 00:06:40,260
insulation I just wanted to point that

00:06:37,290 --> 00:06:41,280
out in case you're wondering so then so

00:06:40,260 --> 00:06:42,660
then they're like well here's your

00:06:41,280 --> 00:06:47,220
backlog here are a whole bunch of

00:06:42,660 --> 00:06:48,690
features do we want you to add in and so

00:06:47,220 --> 00:06:50,460
you get this line of yaks that you've

00:06:48,690 --> 00:06:55,290
got to shave every time you add a new

00:06:50,460 --> 00:06:56,760
feature in and for the most part as I

00:06:55,290 --> 00:06:59,160
started writing this talk I started to

00:06:56,760 --> 00:07:02,280
realize that a lot of this could be

00:06:59,160 --> 00:07:03,990
handled through cleaner code so if your

00:07:02,280 --> 00:07:06,240
code is well organized and you don't

00:07:03,990 --> 00:07:08,430
have quite as much of this but

00:07:06,240 --> 00:07:09,990
ultimately where we had so many systems

00:07:08,430 --> 00:07:11,940
doing so many different things it made

00:07:09,990 --> 00:07:13,490
sense to split it up into an SOA and

00:07:11,940 --> 00:07:16,530
we'll talk about that in a second

00:07:13,490 --> 00:07:20,210
the other problem was that we had a lot

00:07:16,530 --> 00:07:22,680
of stuff coming in and so eventually

00:07:20,210 --> 00:07:25,380
what would happen is our application

00:07:22,680 --> 00:07:28,770
would get angry and it would grow so

00:07:25,380 --> 00:07:31,800
large that it would just tear the server

00:07:28,770 --> 00:07:34,260
apart you know trying to get everything

00:07:31,800 --> 00:07:36,750
done so it just hang out and stop

00:07:34,260 --> 00:07:40,229
and so SOA also solved the problem of

00:07:36,750 --> 00:07:42,660
being able to scale out you know you can

00:07:40,229 --> 00:07:45,060
scale horizontally but you can scale

00:07:42,660 --> 00:07:48,570
vertically as well just by scaling out

00:07:45,060 --> 00:07:50,400
the pieces that need more resources so

00:07:48,570 --> 00:07:53,180
it does pay to split up the application

00:07:50,400 --> 00:07:55,169
and and I'm trying to illustrate to you

00:07:53,180 --> 00:07:58,440
maybe some of the differences between

00:07:55,169 --> 00:08:00,630
when you can just improve your code and

00:07:58,440 --> 00:08:02,220
when you can actually improve the you

00:08:00,630 --> 00:08:04,950
know split it up and find some

00:08:02,220 --> 00:08:08,039
architecture that you can do to to make

00:08:04,950 --> 00:08:10,710
it behave the way you need it to so in

00:08:08,039 --> 00:08:12,870
any case you've got this large complex

00:08:10,710 --> 00:08:14,580
project there are a lot of things doing

00:08:12,870 --> 00:08:16,320
a lot of different things and they're

00:08:14,580 --> 00:08:19,560
all tied together and so it's tightly

00:08:16,320 --> 00:08:21,210
coupled and it's it's a real pain to

00:08:19,560 --> 00:08:25,979
keep all the concerns in your head and

00:08:21,210 --> 00:08:29,190
make it all work so what we did is you

00:08:25,979 --> 00:08:32,010
know as you see we found different

00:08:29,190 --> 00:08:33,510
pieces that had different concerns so

00:08:32,010 --> 00:08:36,150
then it was just a bunch of little apps

00:08:33,510 --> 00:08:37,740
you kind of keep your head around in

00:08:36,150 --> 00:08:38,760
other words the problem set looks more

00:08:37,740 --> 00:08:41,159
like this

00:08:38,760 --> 00:08:43,229
so then it's just small problems to tame

00:08:41,159 --> 00:08:44,820
instead of that's a monster that you

00:08:43,229 --> 00:08:49,459
have to modify in order to get anything

00:08:44,820 --> 00:08:52,440
done and so what we did is we literally

00:08:49,459 --> 00:08:56,010
went to the point where we were we found

00:08:52,440 --> 00:08:57,810
systems that had a narrow concern that

00:08:56,010 --> 00:09:01,649
we could pull out of the application and

00:08:57,810 --> 00:09:06,060
just make it work for us and so

00:09:01,649 --> 00:09:09,329
everything above the line is is front

00:09:06,060 --> 00:09:10,829
facing so customer facing and everything

00:09:09,329 --> 00:09:12,600
on the back is services that were

00:09:10,829 --> 00:09:17,670
generally more data management type

00:09:12,600 --> 00:09:19,560
things and so then we start getting into

00:09:17,670 --> 00:09:21,810
some of the infrastructure questions you

00:09:19,560 --> 00:09:26,940
know how do you make one application

00:09:21,810 --> 00:09:29,370
talk to another service and you know how

00:09:26,940 --> 00:09:34,019
do you send requests for data how do you

00:09:29,370 --> 00:09:36,240
send data to the backend and things like

00:09:34,019 --> 00:09:38,550
that well some of the things you're

00:09:36,240 --> 00:09:40,380
gonna do or synchronous okay you're

00:09:38,550 --> 00:09:44,850
gonna send something you need the

00:09:40,380 --> 00:09:46,139
response back or you send something and

00:09:44,850 --> 00:09:51,029
you need to know that it did the job

00:09:46,139 --> 00:09:52,560
immediately which may be a better you

00:09:51,029 --> 00:09:54,870
know answer for queuing and then some

00:09:52,560 --> 00:09:56,639
synchronous call back but you kind of

00:09:54,870 --> 00:09:57,660
get the idea you know you're you're

00:09:56,639 --> 00:09:59,399
gonna have some things that are

00:09:57,660 --> 00:10:02,370
synchronous that you absolutely have to

00:09:59,399 --> 00:10:04,529
have a response from some of the other

00:10:02,370 --> 00:10:06,600
ones you just kind of leave it a message

00:10:04,529 --> 00:10:09,029
and you're not so concerned with the

00:10:06,600 --> 00:10:10,709
outcome or at least something else maybe

00:10:09,029 --> 00:10:12,720
concerned with the outcome but you don't

00:10:10,709 --> 00:10:15,449
need to worry about that this was more

00:10:12,720 --> 00:10:17,610
along the lines of the the writes so

00:10:15,449 --> 00:10:20,910
writing data writing leads to the lead

00:10:17,610 --> 00:10:23,220
store managing users when we were

00:10:20,910 --> 00:10:25,290
writing that information the validation

00:10:23,220 --> 00:10:27,089
happened up on the front end and then

00:10:25,290 --> 00:10:29,579
from the back end we just dropped it in

00:10:27,089 --> 00:10:31,019
and assumed it was saved and expected a

00:10:29,579 --> 00:10:32,090
synchronous call back if something

00:10:31,019 --> 00:10:34,910
failed

00:10:32,090 --> 00:10:38,270
and so you know it's it was just an

00:10:34,910 --> 00:10:39,650
asynchronous system and like I said if

00:10:38,270 --> 00:10:43,190
you're worried about the outcome then

00:10:39,650 --> 00:10:45,230
you can set up callback so you can you

00:10:43,190 --> 00:10:46,820
can keep track of what got done the

00:10:45,230 --> 00:10:49,370
other thing that the callbacks do for

00:10:46,820 --> 00:10:51,140
you is that it allows you to add some

00:10:49,370 --> 00:10:53,870
redundancy to the system and I'll just

00:10:51,140 --> 00:10:57,250
talk about that real quick basically the

00:10:53,870 --> 00:11:00,020
idea is is that if you have a callback

00:10:57,250 --> 00:11:01,640
then what you can do is you can say I've

00:11:00,020 --> 00:11:04,040
added these jobs to the queue and I

00:11:01,640 --> 00:11:05,570
don't know what their status is and then

00:11:04,040 --> 00:11:09,020
when they get the callback to make a

00:11:05,570 --> 00:11:10,550
mark them is done and what this allows

00:11:09,020 --> 00:11:12,740
you to do is then if you're queuing

00:11:10,550 --> 00:11:14,630
system fails for some reason then you

00:11:12,740 --> 00:11:16,760
know what jobs to populate back into the

00:11:14,630 --> 00:11:19,010
system and so it gives you that level of

00:11:16,760 --> 00:11:20,990
redundancy if you care otherwise you

00:11:19,010 --> 00:11:23,540
just you know drop it in and assume

00:11:20,990 --> 00:11:26,270
it'll get done and we're all pretty

00:11:23,540 --> 00:11:31,430
familiar with the job queue setup and

00:11:26,270 --> 00:11:34,880
the way that those work so anyway here's

00:11:31,430 --> 00:11:37,720
some code for HTTP this is basically

00:11:34,880 --> 00:11:41,120
something where we read the lead from so

00:11:37,720 --> 00:11:43,010
this is the path to get a lead it's

00:11:41,120 --> 00:11:45,590
pretty standard you can see it's just a

00:11:43,010 --> 00:11:50,030
path can you read it in the back I just

00:11:45,590 --> 00:11:53,630
want to make sure yeah so it you know

00:11:50,030 --> 00:11:57,890
it's it's the standard rails type route

00:11:53,630 --> 00:12:02,750
so you have this path to the lead

00:11:57,890 --> 00:12:05,870
service it calls into leads it gets JSON

00:12:02,750 --> 00:12:08,720
back and then you get the response by

00:12:05,870 --> 00:12:11,300
calling that and that gives you your

00:12:08,720 --> 00:12:13,040
JSON object and we were using JSON we

00:12:11,300 --> 00:12:17,240
were using Sinatra on the backend for

00:12:13,040 --> 00:12:19,970
these services so then what we do is we

00:12:17,240 --> 00:12:23,210
do all the stuff to send the lead off to

00:12:19,970 --> 00:12:25,130
the school because again you know are

00:12:23,210 --> 00:12:26,720
our customers or schools or some kind of

00:12:25,130 --> 00:12:28,780
lead aggregator that represented a

00:12:26,720 --> 00:12:31,160
school so in any case we would say

00:12:28,780 --> 00:12:33,410
here's the lead here's the school that

00:12:31,160 --> 00:12:35,660
you're that it should go to and it would

00:12:33,410 --> 00:12:39,020
just do its thing and I'm not gonna bore

00:12:35,660 --> 00:12:40,790
you with that you could also then do a

00:12:39,020 --> 00:12:41,510
synchronous call to reporting if that's

00:12:40,790 --> 00:12:44,690
what you wanted to

00:12:41,510 --> 00:12:46,970
and just send the reporting app the

00:12:44,690 --> 00:12:48,769
information if it needed to be real-time

00:12:46,970 --> 00:12:50,540
this is a good way to do it because then

00:12:48,769 --> 00:12:52,970
you know you got the response and you

00:12:50,540 --> 00:12:55,449
new one in and you knew it happened

00:12:52,970 --> 00:13:00,740
right away as opposed to worrying about

00:12:55,449 --> 00:13:03,500
the cue backing so HTTP was really good

00:13:00,740 --> 00:13:05,089
for us for synchronous calls if we

00:13:03,500 --> 00:13:08,510
needed the response before we could go

00:13:05,089 --> 00:13:10,880
ahead and this is what we did we could

00:13:08,510 --> 00:13:15,649
take immediate action based on what

00:13:10,880 --> 00:13:17,570
happened on that service and if we

00:13:15,649 --> 00:13:19,790
needed information from another service

00:13:17,570 --> 00:13:22,279
than we could put that in so just to sum

00:13:19,790 --> 00:13:23,779
up what we're dealing with here and in

00:13:22,279 --> 00:13:25,910
the organization you can kind of see

00:13:23,779 --> 00:13:27,500
some of the places where this was called

00:13:25,910 --> 00:13:29,420
I know that the arrows are kind of hard

00:13:27,500 --> 00:13:32,240
to follow here but it kind of gives you

00:13:29,420 --> 00:13:35,930
an idea that authentication which are

00:13:32,240 --> 00:13:39,350
the two double ended arrows so basically

00:13:35,930 --> 00:13:41,000
it was a request to authenticate the

00:13:39,350 --> 00:13:43,820
user and then it would send back an

00:13:41,000 --> 00:13:46,040
access token and well the call center

00:13:43,820 --> 00:13:48,050
and the management app needed that I

00:13:46,040 --> 00:13:49,069
mean talk about the management app but

00:13:48,050 --> 00:13:50,810
the management app was the

00:13:49,069 --> 00:13:55,329
representation of the data for people to

00:13:50,810 --> 00:13:55,329
actually see what was in the system

00:13:57,290 --> 00:14:02,540
so let's talk about queues now when we

00:13:59,450 --> 00:14:05,480
did this this was a few years ago rescue

00:14:02,540 --> 00:14:07,490
really hadn't hit its stride or at least

00:14:05,480 --> 00:14:09,290
we didn't know about it and so we used

00:14:07,490 --> 00:14:10,520
Beanstalk and that's why I put that up

00:14:09,290 --> 00:14:13,550
there we use the Beanstalk queuing

00:14:10,520 --> 00:14:15,820
system which is pretty simple it allows

00:14:13,550 --> 00:14:18,140
you multiple queues on the same

00:14:15,820 --> 00:14:20,240
Beanstalk app and you can kind of manage

00:14:18,140 --> 00:14:23,000
things that way however my example is

00:14:20,240 --> 00:14:27,350
rescue and it's really just because

00:14:23,000 --> 00:14:30,080
rescue is really easy to manage so you

00:14:27,350 --> 00:14:32,510
can see here that we get a lead request

00:14:30,080 --> 00:14:34,640
so we just go to our lead class we do

00:14:32,510 --> 00:14:36,980
requests it goes down to the leads where

00:14:34,640 --> 00:14:40,550
we store the leads gets the information

00:14:36,980 --> 00:14:41,990
back builds us an object if we know

00:14:40,550 --> 00:14:44,330
which school we're sending it to then we

00:14:41,990 --> 00:14:46,250
just set that up otherwise we go find at

00:14:44,330 --> 00:14:49,400
the school that meets the criteria so we

00:14:46,250 --> 00:14:51,410
have rules that would help us determine

00:14:49,400 --> 00:14:52,910
which school to send things to we'd

00:14:51,410 --> 00:14:54,770
submit the lead to the school and then

00:14:52,910 --> 00:14:56,420
we would report it and this was more

00:14:54,770 --> 00:14:58,940
likely what we did with the reporting

00:14:56,420 --> 00:15:01,010
the other the other example was just

00:14:58,940 --> 00:15:04,310
something that we could that I could put

00:15:01,010 --> 00:15:08,720
up here and give you an idea of what we

00:15:04,310 --> 00:15:13,190
were doing with it so down here on the

00:15:08,720 --> 00:15:15,500
other end we just had this kind of a

00:15:13,190 --> 00:15:18,410
setup here so that when we created a new

00:15:15,500 --> 00:15:20,530
lead object then we could just send it

00:15:18,410 --> 00:15:20,530
off

00:15:21,529 --> 00:15:30,179
so I just well let me go through these

00:15:28,679 --> 00:15:32,639
points I have a few other talking points

00:15:30,179 --> 00:15:34,649
that I want to go over but first off so

00:15:32,639 --> 00:15:37,470
it's asynchronous if you don't need the

00:15:34,649 --> 00:15:39,449
response to keep moving you do that we

00:15:37,470 --> 00:15:43,049
used it for writing new data primarily

00:15:39,449 --> 00:15:44,730
and any jobs that we had to do

00:15:43,049 --> 00:15:48,230
out-of-band so like sending things off

00:15:44,730 --> 00:15:52,739
to the schools obviously done that way

00:15:48,230 --> 00:15:54,179
if you need if you need to take some

00:15:52,739 --> 00:15:57,509
immediate action on this then it's

00:15:54,179 --> 00:15:59,519
usually better to turn off the queue or

00:15:57,509 --> 00:16:02,519
tuning the queue and then monitoring it

00:15:59,519 --> 00:16:04,230
so in a lot of cases you can figure out

00:16:02,519 --> 00:16:06,779
you know how you need to scale your

00:16:04,230 --> 00:16:08,399
queuing system and make sure that it's

00:16:06,779 --> 00:16:10,799
getting done in a timely manner because

00:16:08,399 --> 00:16:12,029
in a lot of cases you don't just want to

00:16:10,799 --> 00:16:13,619
drop it on there and assume it's gonna

00:16:12,029 --> 00:16:15,959
get done and then if the queue gets back

00:16:13,619 --> 00:16:17,970
backed up then you're in trouble so you

00:16:15,959 --> 00:16:19,199
do need to pay attention to the queue so

00:16:17,970 --> 00:16:21,209
that things are getting done in the time

00:16:19,199 --> 00:16:27,959
limit that you need them to

00:16:21,209 --> 00:16:29,549
we used this we use the HTTP on get

00:16:27,959 --> 00:16:31,199
requests and then anything else that

00:16:29,549 --> 00:16:35,100
sort of needed to be posted went through

00:16:31,199 --> 00:16:38,939
here so anyway here's how we used the

00:16:35,100 --> 00:16:40,319
API for this you can see that some of

00:16:38,939 --> 00:16:42,059
the services that we're pushing things

00:16:40,319 --> 00:16:45,179
to on a queue are actually on the front

00:16:42,059 --> 00:16:48,119
end so you have services both on the

00:16:45,179 --> 00:16:54,869
back end and on the front end that play

00:16:48,119 --> 00:16:57,689
into the way that the system works now I

00:16:54,869 --> 00:16:59,399
had a little extra time when I initially

00:16:57,689 --> 00:17:01,980
prepared this and I wanted to talk about

00:16:59,399 --> 00:17:05,309
another idea that we kind of had from

00:17:01,980 --> 00:17:07,439
proposed to us on Ruby robes and the

00:17:05,309 --> 00:17:10,110
guys have Square brought this up they

00:17:07,439 --> 00:17:13,380
they had kind of feed and so the idea

00:17:10,110 --> 00:17:15,089
was that you get the information on a

00:17:13,380 --> 00:17:18,149
feed and then you would just work

00:17:15,089 --> 00:17:21,269
through the feed and so basically you

00:17:18,149 --> 00:17:24,389
would start off with a marker so you

00:17:21,269 --> 00:17:27,299
could this is a controller from rails

00:17:24,389 --> 00:17:28,740
and so you could request everything that

00:17:27,299 --> 00:17:30,539
comes after that mark

00:17:28,740 --> 00:17:33,510
so you could say I need the feed

00:17:30,539 --> 00:17:35,850
starting here is the way that that I

00:17:33,510 --> 00:17:37,649
came up to implement this and then you

00:17:35,850 --> 00:17:40,950
get all the leads you render them to

00:17:37,649 --> 00:17:43,289
JSON and that's your bet your feed and

00:17:40,950 --> 00:17:46,200
then you'd have a demon on the other end

00:17:43,289 --> 00:17:47,789
that would request the feed it would

00:17:46,200 --> 00:17:51,720
work through the feed and you kind of

00:17:47,789 --> 00:17:53,370
get the picture so feeds are

00:17:51,720 --> 00:17:55,919
asynchronous one thing you need to keep

00:17:53,370 --> 00:17:57,720
in mind with feeds is that every time it

00:17:55,919 --> 00:17:59,340
processes something off of the feed it

00:17:57,720 --> 00:18:01,110
should do the same thing so you can keep

00:17:59,340 --> 00:18:03,570
a consistent state but the nice thing is

00:18:01,110 --> 00:18:05,760
is that as you work through this you

00:18:03,570 --> 00:18:07,110
might have it event-driven but the thing

00:18:05,760 --> 00:18:09,210
is is then you get a foot you can do a

00:18:07,110 --> 00:18:10,350
full replay and it doesn't matter so

00:18:09,210 --> 00:18:16,169
much otherwise you have to compensate

00:18:10,350 --> 00:18:17,789
for doing the same job twice so then we

00:18:16,169 --> 00:18:19,679
get into front-end services and I am

00:18:17,789 --> 00:18:21,740
going through this way faster I Hearst

00:18:19,679 --> 00:18:27,450
so we might get done a little bit early

00:18:21,740 --> 00:18:30,210
so front-end services basically are

00:18:27,450 --> 00:18:33,390
everything above this line okay and so

00:18:30,210 --> 00:18:36,929
some parts kind of straddle the line for

00:18:33,390 --> 00:18:39,270
example the the piece that gives us the

00:18:36,929 --> 00:18:42,090
web pages that collect the leads it

00:18:39,270 --> 00:18:45,000
actually has a storage mechanism for the

00:18:42,090 --> 00:18:47,130
schools so that it knows which schools

00:18:45,000 --> 00:18:53,730
are which aggregators correspond to

00:18:47,130 --> 00:18:56,070
which forms you can kind of also see

00:18:53,730 --> 00:18:58,049
things like the call center and stuff

00:18:56,070 --> 00:19:00,419
like that now I want to point out that

00:18:58,049 --> 00:19:01,980
we do have a service here in the users

00:19:00,419 --> 00:19:05,070
and we actually built our own system

00:19:01,980 --> 00:19:07,710
that would take off on occasion request

00:19:05,070 --> 00:19:10,440
an authorization request and send back

00:19:07,710 --> 00:19:12,360
the key that was stored in the server or

00:19:10,440 --> 00:19:14,669
in the session of the front-end service

00:19:12,360 --> 00:19:16,140
and then would allow access to the rest

00:19:14,669 --> 00:19:18,480
of the system and could be verified

00:19:16,140 --> 00:19:19,529
against that service but this is

00:19:18,480 --> 00:19:22,649
something that we could have moved to

00:19:19,529 --> 00:19:24,360
the front end and the nice thing about

00:19:22,649 --> 00:19:25,830
doing front-end services so you have the

00:19:24,360 --> 00:19:27,549
backend pieces that are all broken apart

00:19:25,830 --> 00:19:29,799
the front-end pieces that are all broken

00:19:27,549 --> 00:19:33,039
part is that if you have a system that

00:19:29,799 --> 00:19:36,129
can that can act on the front end is

00:19:33,039 --> 00:19:39,779
this piece that we have here then we can

00:19:36,129 --> 00:19:42,820
make it do what we want it to do so

00:19:39,779 --> 00:19:44,919
we could have set up oh ah is what I'm

00:19:42,820 --> 00:19:47,440
saying so we could have moved the users

00:19:44,919 --> 00:19:49,929
piece of the front end and then made it

00:19:47,440 --> 00:19:51,879
so that verification could have been

00:19:49,929 --> 00:19:56,559
done through an OAuth service instead of

00:19:51,879 --> 00:19:58,210
building our own another thing we could

00:19:56,559 --> 00:20:00,190
have done with CMS is we could have used

00:19:58,210 --> 00:20:02,440
something like refinery or radiant or

00:20:00,190 --> 00:20:04,019
something uh we had some pretty peculiar

00:20:02,440 --> 00:20:06,879
needs so I don't know if it would fit

00:20:04,019 --> 00:20:08,710
but keeping and keeping in mind that

00:20:06,879 --> 00:20:11,830
there may already be solutions for some

00:20:08,710 --> 00:20:14,259
part of this it makes a lot of sense and

00:20:11,830 --> 00:20:17,649
in some cases what you may wind up doing

00:20:14,259 --> 00:20:20,919
is either putting things in through rack

00:20:17,649 --> 00:20:23,980
as middleware or through rails and rails

00:20:20,919 --> 00:20:27,730
engines or things like that and really

00:20:23,980 --> 00:20:29,470
getting a good idea of you know this

00:20:27,730 --> 00:20:33,460
other responsibilities this that this

00:20:29,470 --> 00:20:35,049
piece of the app will handle for you I

00:20:33,460 --> 00:20:36,100
do have a few notes that I want to share

00:20:35,049 --> 00:20:40,509
as well

00:20:36,100 --> 00:20:41,799
one is is on a response like this you

00:20:40,509 --> 00:20:43,419
don't have to send all of the leads

00:20:41,799 --> 00:20:45,970
information back you only have to send

00:20:43,419 --> 00:20:48,039
the parts of information back that this

00:20:45,970 --> 00:20:50,950
particular application is interested in

00:20:48,039 --> 00:20:54,070
so you can make general-purpose API

00:20:50,950 --> 00:20:57,070
endpoints or you can make specific ones

00:20:54,070 --> 00:21:00,190
and those ones will just cover the needs

00:20:57,070 --> 00:21:06,600
of whatever's pulling in another note is

00:21:00,190 --> 00:21:10,690
that where you see leads here basically

00:21:06,600 --> 00:21:12,759
the leads are in the top example in the

00:21:10,690 --> 00:21:14,470
bottom example in the daemon and on the

00:21:12,759 --> 00:21:17,830
rails app those are two different

00:21:14,470 --> 00:21:20,470
classes and so you can more narrowly

00:21:17,830 --> 00:21:23,399
focus that lead class so that only does

00:21:20,470 --> 00:21:25,989
the job that is needed in order to do

00:21:23,399 --> 00:21:27,850
these different pieces so to store leads

00:21:25,989 --> 00:21:30,669
and manage leads with active record and

00:21:27,850 --> 00:21:32,380
then on the bottom you know the lead may

00:21:30,669 --> 00:21:35,260
just have enough information to

00:21:32,380 --> 00:21:39,370
it's sent to whoever needs to handle it

00:21:35,260 --> 00:21:40,870
or to be managed through the worker so

00:21:39,370 --> 00:21:44,110
let's talk about naming services here

00:21:40,870 --> 00:21:46,300
for a minute one of my favorite ways is

00:21:44,110 --> 00:21:48,310
to give it its own domain then you just

00:21:46,300 --> 00:21:50,320
know where to go you can also do

00:21:48,310 --> 00:21:52,240
subdomains you just set up some DNS and

00:21:50,320 --> 00:21:55,780
then you know where to go so it's leads

00:21:52,240 --> 00:21:58,750
my app comm or schools that my app comm

00:21:55,780 --> 00:22:00,550
you know and then you can just call in I

00:21:58,750 --> 00:22:02,470
like having them named as opposed to

00:22:00,550 --> 00:22:04,570
some of the other options just because

00:22:02,470 --> 00:22:05,950
then you know which one it is you don't

00:22:04,570 --> 00:22:09,310
have to remember IP addresses or

00:22:05,950 --> 00:22:11,770
anything crazy like that you can put it

00:22:09,310 --> 00:22:14,980
on PABs and this is more of a middleware

00:22:11,770 --> 00:22:16,960
approach rack mount the rack mount gem

00:22:14,980 --> 00:22:18,580
that does a good job of this gives you

00:22:16,960 --> 00:22:21,970
some flexibility in this if you're using

00:22:18,580 --> 00:22:26,500
Sinatra or you can just build it in as

00:22:21,970 --> 00:22:27,490
middleware in a rails app if you know

00:22:26,500 --> 00:22:30,730
the name of the server that is running

00:22:27,490 --> 00:22:32,530
on then this will work okay but if it

00:22:30,730 --> 00:22:34,180
grows beyond one server then you have to

00:22:32,530 --> 00:22:36,010
start doing load balancing and things

00:22:34,180 --> 00:22:38,500
like that and it can get kind of

00:22:36,010 --> 00:22:41,680
complicated IP address isn't my favorite

00:22:38,500 --> 00:22:43,270
because it's too generic and so and you

00:22:41,680 --> 00:22:44,860
have to generally hard code it in or put

00:22:43,270 --> 00:22:49,390
some configuration file in or something

00:22:44,860 --> 00:22:52,420
like that and it's just not as clean for

00:22:49,390 --> 00:22:54,100
security there are a lot of options as

00:22:52,420 --> 00:22:58,390
well I talked about these I did a

00:22:54,100 --> 00:23:00,820
webinar or online training on building

00:22:58,390 --> 00:23:02,350
JSON API s and there are a lot of

00:23:00,820 --> 00:23:05,830
options for security and I'll talk

00:23:02,350 --> 00:23:08,200
through these really briefly I think SSL

00:23:05,830 --> 00:23:09,850
is something that you all understand you

00:23:08,200 --> 00:23:12,010
know you have a certificate that you

00:23:09,850 --> 00:23:14,470
know you get the information you do a

00:23:12,010 --> 00:23:15,910
handshake you encrypt the data the other

00:23:14,470 --> 00:23:18,940
end has a certificate knows how to

00:23:15,910 --> 00:23:20,800
decrypt it and all that stuff we're all

00:23:18,940 --> 00:23:22,660
fairly familiar with that you can add it

00:23:20,800 --> 00:23:24,730
into Sinatra you can add it into rails

00:23:22,660 --> 00:23:26,910
you can you know you can build it in you

00:23:24,730 --> 00:23:29,080
don't really have to think much about it

00:23:26,910 --> 00:23:34,210
you can also do encryption through a

00:23:29,080 --> 00:23:37,899
shared key this is how SSH does it

00:23:34,210 --> 00:23:41,110
and basically you can encrypt the data

00:23:37,899 --> 00:23:42,700
with your private key and then you can

00:23:41,110 --> 00:23:43,929
decrypt it on the other end with the

00:23:42,700 --> 00:23:46,149
public key and there's a lot of

00:23:43,929 --> 00:23:50,169
handshaking stuff that goes on there as

00:23:46,149 --> 00:23:52,419
well you can do some kind of server

00:23:50,169 --> 00:23:54,190
registration so basically you set

00:23:52,419 --> 00:23:58,299
something up so that your server can

00:23:54,190 --> 00:24:00,429
prove that it has the authority to make

00:23:58,299 --> 00:24:02,019
calls to the system and then from then

00:24:00,429 --> 00:24:04,360
on since it's registered it doesn't have

00:24:02,019 --> 00:24:06,549
to authorize or authenticate anymore it

00:24:04,360 --> 00:24:09,220
just you know does what it does you can

00:24:06,549 --> 00:24:11,379
also have it get an API key and then it

00:24:09,220 --> 00:24:12,999
passes the API key every time you can

00:24:11,379 --> 00:24:18,549
also have a general API key that you

00:24:12,999 --> 00:24:20,409
just build in you can do IP address

00:24:18,549 --> 00:24:23,230
whitelisting so you can whitelist an

00:24:20,409 --> 00:24:24,970
entire subnet if you've done much with

00:24:23,230 --> 00:24:27,789
the host dot allow file you kind of get

00:24:24,970 --> 00:24:30,639
an idea there you can set up firewalls

00:24:27,789 --> 00:24:35,740
and you know just general authentication

00:24:30,639 --> 00:24:37,269
authorization stuff a lot of these

00:24:35,740 --> 00:24:41,230
options are really good it just depends

00:24:37,269 --> 00:24:43,899
on what your needs are and you know what

00:24:41,230 --> 00:24:47,200
you want to go over as far as that goes

00:24:43,899 --> 00:24:48,480
so if you have any questions about those

00:24:47,200 --> 00:24:51,429
I can answer some of those questions

00:24:48,480 --> 00:24:52,899
here in a minute but this is the link to

00:24:51,429 --> 00:24:54,820
the online training I did for building

00:24:52,899 --> 00:24:57,549
JSON API Xand and that'll give you a

00:24:54,820 --> 00:24:58,929
really good idea of some of the things

00:24:57,549 --> 00:25:00,850
that you can do some of the concerns

00:24:58,929 --> 00:25:03,340
that you might have in building out an

00:25:00,850 --> 00:25:07,450
API that you can use in a service like

00:25:03,340 --> 00:25:09,909
this to make it work and this one a

00:25:07,450 --> 00:25:13,450
whole lot faster than I thought it would

00:25:09,909 --> 00:25:14,950
so I'm at the end of my slides if you

00:25:13,450 --> 00:25:16,419
have any questions I'm happy to answer

00:25:14,950 --> 00:25:17,860
them otherwise there are a few other

00:25:16,419 --> 00:25:19,169
things that I didn't put in the slides

00:25:17,860 --> 00:25:22,619
because I didn't think I'd have time

00:25:19,169 --> 00:25:22,619
that I can talk about

00:25:22,640 --> 00:25:34,640
for security what were you in for

00:25:24,679 --> 00:25:36,110
install for Bienstock as yes we really

00:25:34,640 --> 00:25:39,500
didn't do a whole lot with security on

00:25:36,110 --> 00:25:43,090
Bienstock to be honest we could have

00:25:39,500 --> 00:25:43,090
encrypted the messages when they went in

00:25:47,990 --> 00:25:53,139
we did to be honest we didn't we didn't

00:25:50,330 --> 00:25:53,139
set up any security

00:26:07,090 --> 00:26:16,039
not really he asked if when you do a

00:26:12,080 --> 00:26:19,879
request I always forget that microphones

00:26:16,039 --> 00:26:21,679
don't pick this up so anyway so he asked

00:26:19,879 --> 00:26:23,570
if doing a request into one service

00:26:21,679 --> 00:26:25,609
since it may call out to other services

00:26:23,570 --> 00:26:28,519
cause performance problems among the

00:26:25,609 --> 00:26:31,070
other systems not really generally the

00:26:28,519 --> 00:26:33,139
the overhead of sending requests the

00:26:31,070 --> 00:26:34,609
other systems wasn't the bottleneck it

00:26:33,139 --> 00:26:37,220
was actually doing the job that it was

00:26:34,609 --> 00:26:39,529
supposed to do and so what would bog it

00:26:37,220 --> 00:26:41,840
down more is that you're you're working

00:26:39,529 --> 00:26:44,419
through a job as opposed to pushing that

00:26:41,840 --> 00:26:48,950
out there and it was it was much easier

00:26:44,419 --> 00:26:51,409
to maintain we save way more effort and

00:26:48,950 --> 00:26:55,309
money in maintenance than it probably

00:26:51,409 --> 00:26:57,259
cost us in in disseminating you know

00:26:55,309 --> 00:27:01,429
this knowledge across multiple services

00:26:57,259 --> 00:27:03,850
and yeah we we only had one or two

00:27:01,429 --> 00:27:06,139
services that really got bogged down and

00:27:03,850 --> 00:27:08,210
most of those were actually front-facing

00:27:06,139 --> 00:27:12,590
services the back the backend services

00:27:08,210 --> 00:27:15,100
were really really fast no I would say

00:27:12,590 --> 00:27:15,100
no not really

00:27:20,600 --> 00:27:23,990
so he asked if we did anything to keep

00:27:22,580 --> 00:27:25,399
our models in sync between different

00:27:23,990 --> 00:27:28,039
applications there were a few things

00:27:25,399 --> 00:27:30,769
that we did one of the big ones was that

00:27:28,039 --> 00:27:32,389
we set up our own gems repository this

00:27:30,769 --> 00:27:35,059
was back before bundler so we just

00:27:32,389 --> 00:27:39,440
install them ourselves and so the gems

00:27:35,059 --> 00:27:40,880
managed the API connections so if if you

00:27:39,440 --> 00:27:45,710
had a front-end service here let me back

00:27:40,880 --> 00:27:49,159
out so if you had a front-end service

00:27:45,710 --> 00:27:51,919
like say the call center that needed to

00:27:49,159 --> 00:27:53,809
talk to the the lead services then we

00:27:51,919 --> 00:27:58,100
just built a jet we just built a gem

00:27:53,809 --> 00:28:00,409
around that and so since the call center

00:27:58,100 --> 00:28:02,179
service and the reporting service and

00:28:00,409 --> 00:28:04,990
the management service all depended on

00:28:02,179 --> 00:28:07,759
the same connection to the lead Center

00:28:04,990 --> 00:28:10,190
we at least had a basis that was common

00:28:07,759 --> 00:28:12,350
between those and when we updated the

00:28:10,190 --> 00:28:14,539
app we would update the gym according to

00:28:12,350 --> 00:28:17,600
the the dependencies that we built into

00:28:14,539 --> 00:28:21,200
that so they might be on different gems

00:28:17,600 --> 00:28:24,370
gem burdens but ultimately the overall

00:28:21,200 --> 00:28:24,370
core was generally the same

00:28:25,830 --> 00:28:32,190
you have related to depression that

00:28:29,940 --> 00:28:35,070
soups it to share two or three different

00:28:32,190 --> 00:28:37,560
apps yes G we're we're doing a traveler

00:28:35,070 --> 00:28:42,210
script like six apps coming from

00:28:37,560 --> 00:28:46,800
probably 30 repositories so my question

00:28:42,210 --> 00:28:48,800
is our code since we don't up front know

00:28:46,800 --> 00:28:53,930
which projects from the garden

00:28:48,800 --> 00:28:56,060
what product our code is written in a

00:28:53,930 --> 00:28:58,460
vendor from the naming that they could

00:28:56,060 --> 00:29:01,040
load of all code from all application to

00:28:58,460 --> 00:29:03,500
the same object base which then means

00:29:01,040 --> 00:29:06,290
that our namespace gets quite out of

00:29:03,500 --> 00:29:08,950
hand so we have sometimes like for that

00:29:06,290 --> 00:29:08,950
little sickness

00:29:12,500 --> 00:29:18,960
right so the question basically is if

00:29:15,990 --> 00:29:20,520
you're pulling in multiple gems to allow

00:29:18,960 --> 00:29:22,500
you access to these different services

00:29:20,520 --> 00:29:24,390
then you wind up with different classes

00:29:22,500 --> 00:29:28,680
that start to fill up the namespace in

00:29:24,390 --> 00:29:33,090
the global in the global context and so

00:29:28,680 --> 00:29:34,770
he's asking basically if we ran into

00:29:33,090 --> 00:29:36,810
that problem and did we wind up

00:29:34,770 --> 00:29:38,910
namespacing and yeah we ran into it

00:29:36,810 --> 00:29:41,460
pretty early because under certain

00:29:38,910 --> 00:29:43,440
circumstances sometimes we would have to

00:29:41,460 --> 00:29:47,280
have a different concept of one or two

00:29:43,440 --> 00:29:48,990
objects in different systems and so what

00:29:47,280 --> 00:29:51,960
we would wind up doing is we would

00:29:48,990 --> 00:29:55,050
namespace these and then we would have

00:29:51,960 --> 00:29:58,350
some overarching class like if we had

00:29:55,050 --> 00:30:00,240
the leade services lead class that

00:29:58,350 --> 00:30:02,100
basically said here's how you attach the

00:30:00,240 --> 00:30:04,320
leads and things like that and then we

00:30:02,100 --> 00:30:06,750
had to have some other concept of lead

00:30:04,320 --> 00:30:09,420
outside of that that did something else

00:30:06,750 --> 00:30:12,330
or did something more than what we would

00:30:09,420 --> 00:30:15,510
do is we would basically treat that that

00:30:12,330 --> 00:30:17,040
lead service class we would namespace

00:30:15,510 --> 00:30:21,300
that under the lead services namespace

00:30:17,040 --> 00:30:23,820
and then we would just reference that in

00:30:21,300 --> 00:30:27,530
our lead class and so our lead class our

00:30:23,820 --> 00:30:30,780
main lead class may actually have like a

00:30:27,530 --> 00:30:32,670
related object that's of the lead class

00:30:30,780 --> 00:30:35,040
out of the lead services that was the

00:30:32,670 --> 00:30:36,480
persistence layer effectively and so

00:30:35,040 --> 00:30:38,400
then we could pass that up and pass it

00:30:36,480 --> 00:30:40,950
down and then we would just make the API

00:30:38,400 --> 00:30:43,590
seamless within our our outer

00:30:40,950 --> 00:30:46,740
application and make that and hang

00:30:43,590 --> 00:30:48,060
together in a good way it's easier to

00:30:46,740 --> 00:30:49,320
illustrate with code sample and I don't

00:30:48,060 --> 00:30:50,970
have one that I can just show you

00:30:49,320 --> 00:30:54,030
because I don't work for that company

00:30:50,970 --> 00:30:59,150
anymore but I think you kind of get the

00:30:54,030 --> 00:30:59,150
idea is that clear enough or okay

00:31:04,889 --> 00:31:09,059
testing on setback

00:31:10,750 --> 00:31:15,620
but

00:31:12,970 --> 00:31:19,190
services you might

00:31:15,620 --> 00:31:21,400
more writing on occasions when you broke

00:31:19,190 --> 00:31:21,400
out

00:31:24,740 --> 00:31:32,100
so what you're asking is since we've

00:31:29,130 --> 00:31:33,660
broken this up into many applications if

00:31:32,100 --> 00:31:35,850
we had to test something that had to

00:31:33,660 --> 00:31:38,880
work through multiple applications to

00:31:35,850 --> 00:31:42,240
make it work effectively you want to

00:31:38,880 --> 00:31:44,970
know if we had any pain testing that and

00:31:42,240 --> 00:31:47,760
as far as acceptance testing goes

00:31:44,970 --> 00:31:50,160
because I mean integration integration

00:31:47,760 --> 00:31:52,530
points you know testing that is pretty

00:31:50,160 --> 00:31:54,060
straightforward you know does it talk to

00:31:52,530 --> 00:31:56,460
the right thing on the other end and get

00:31:54,060 --> 00:31:57,750
a good response you know and so you can

00:31:56,460 --> 00:32:00,180
test the boundaries and that's pretty

00:31:57,750 --> 00:32:03,000
clear but if you have a full workflow

00:32:00,180 --> 00:32:05,550
where basically it's you know the lead

00:32:03,000 --> 00:32:08,070
comes in through the CMS it enters the

00:32:05,550 --> 00:32:09,870
lead the lead goes through into the lead

00:32:08,070 --> 00:32:11,190
store and then gets passed out to the

00:32:09,870 --> 00:32:13,770
system that sends it out you know that's

00:32:11,190 --> 00:32:15,450
a whole workflow that you want to make

00:32:13,770 --> 00:32:18,240
seamless and want to make sure it works

00:32:15,450 --> 00:32:20,430
and so you have an acceptance test that

00:32:18,240 --> 00:32:22,980
more or less covers that now you can

00:32:20,430 --> 00:32:24,810
break that up a bit and and a lot of

00:32:22,980 --> 00:32:27,210
your and integration tests will cover

00:32:24,810 --> 00:32:29,490
that but yeah sometimes it was painful

00:32:27,210 --> 00:32:33,300
and the real pain and that kind of

00:32:29,490 --> 00:32:36,120
testing was basically setting up a fully

00:32:33,300 --> 00:32:39,210
blown system somewhere or we could then

00:32:36,120 --> 00:32:41,160
throw data at it and see if it did what

00:32:39,210 --> 00:32:43,400
it was supposed to do and so then you

00:32:41,160 --> 00:32:45,420
start using frameworks like selenium or

00:32:43,400 --> 00:32:46,860
I'm trying to think of what some of the

00:32:45,420 --> 00:32:48,270
other ones are but basically have all

00:32:46,860 --> 00:32:50,610
the services running so that it just

00:32:48,270 --> 00:32:53,070
drops in and you know works through that

00:32:50,610 --> 00:32:54,770
system I'm working on another for

00:32:53,070 --> 00:32:57,450
another client right now that has a

00:32:54,770 --> 00:32:59,250
fairly distributed set up and we're

00:32:57,450 --> 00:33:01,530
passing through queues that are in Redis

00:32:59,250 --> 00:33:02,910
it's not rescue it's something else but

00:33:01,530 --> 00:33:05,070
you know we're using all these different

00:33:02,910 --> 00:33:06,810
protocols and things but again pass

00:33:05,070 --> 00:33:09,330
through all these different systems and

00:33:06,810 --> 00:33:10,980
so in order to make it all work yeah you

00:33:09,330 --> 00:33:12,570
have to stand up all the extra services

00:33:10,980 --> 00:33:15,540
that make everything talk to each other

00:33:12,570 --> 00:33:17,670
and then you know make it work and drop

00:33:15,540 --> 00:33:20,490
down but but like I said the main pain

00:33:17,670 --> 00:33:22,920
is getting that set up and so if you

00:33:20,490 --> 00:33:25,020
have a good deployment process and makes

00:33:22,920 --> 00:33:26,940
this a whole lot easier and then you

00:33:25,020 --> 00:33:28,310
just have the test system that runs once

00:33:26,940 --> 00:33:29,990
a day or whatever because

00:33:28,310 --> 00:33:32,890
tests are gonna take a lot longer than

00:33:29,990 --> 00:33:35,660
your smaller test suite and you just

00:33:32,890 --> 00:33:37,370
push the data through and make sure that

00:33:35,660 --> 00:33:39,560
at every stage the right things are

00:33:37,370 --> 00:33:40,970
happening and so it takes a little bit

00:33:39,560 --> 00:33:44,210
more instrumentation which is kind of

00:33:40,970 --> 00:33:47,060
painful and like I said that setup is

00:33:44,210 --> 00:33:49,400
really what's painful especially if

00:33:47,060 --> 00:33:51,050
you're trying to set that setup up on

00:33:49,400 --> 00:33:54,800
virtual machines or something on your

00:33:51,050 --> 00:33:56,540
own box that you can see it there and so

00:33:54,800 --> 00:33:58,220
in a lot of cases is much easier to set

00:33:56,540 --> 00:34:00,050
up some kind of staging or testing that

00:33:58,220 --> 00:34:02,510
everyone can kind of access and look at

00:34:00,050 --> 00:34:04,970
and then you can just work through it

00:34:02,510 --> 00:34:07,960
there and then it's also set up for the

00:34:04,970 --> 00:34:07,960
acceptance tests

00:34:19,589 --> 00:34:22,589
yeah

00:34:31,500 --> 00:34:38,380
so the question is is I said that it was

00:34:34,810 --> 00:34:40,030
relatively easy to set up tests the

00:34:38,380 --> 00:34:41,500
integration test between you know

00:34:40,030 --> 00:34:45,720
something that calls the end point the

00:34:41,500 --> 00:34:48,340
end point so we approach that a lot like

00:34:45,720 --> 00:34:49,570
the acceptance test where we would stand

00:34:48,340 --> 00:34:53,230
up the service and then they calls

00:34:49,570 --> 00:34:55,570
against it in some cases we actually

00:34:53,230 --> 00:34:56,800
just you know you could also just test

00:34:55,570 --> 00:35:00,070
it with coffee bar and just make sure

00:34:56,800 --> 00:35:02,350
that the end point worked and then the

00:35:00,070 --> 00:35:05,890
integration test was on the the consumer

00:35:02,350 --> 00:35:08,410
library that basically said it can make

00:35:05,890 --> 00:35:11,020
the end run with a live service and it

00:35:08,410 --> 00:35:13,390
still works and so in some cases we

00:35:11,020 --> 00:35:14,830
would set that up any kind of isolation

00:35:13,390 --> 00:35:18,280
that's much easier to set up on your own

00:35:14,830 --> 00:35:20,890
little development box because you know

00:35:18,280 --> 00:35:24,270
then you can just run that library on

00:35:20,890 --> 00:35:26,610
your system and then have it hit the

00:35:24,270 --> 00:35:28,870
service also on your system and

00:35:26,610 --> 00:35:33,940
generally that would work pretty well to

00:35:28,870 --> 00:35:36,100
do the integration test and then if when

00:35:33,940 --> 00:35:38,110
we when we ran them automated in an

00:35:36,100 --> 00:35:40,870
automated fashion a lot of times we

00:35:38,110 --> 00:35:44,250
would actually just use the endpoint in

00:35:40,870 --> 00:35:47,020
the setup for the acceptance test

00:35:44,250 --> 00:35:49,740
because it was already running and then

00:35:47,020 --> 00:35:52,780
we just had a good way of clearing that

00:35:49,740 --> 00:35:54,820
before we ran you know a huge suite or

00:35:52,780 --> 00:35:56,350
another suite so that we could get

00:35:54,820 --> 00:35:58,600
consistent results and make sure that

00:35:56,350 --> 00:36:00,660
you know what we were seeing was what we

00:35:58,600 --> 00:36:00,660
were

00:36:05,480 --> 00:36:08,500
any questions

00:36:17,970 --> 00:36:23,980
if that's a good question

00:36:20,980 --> 00:36:26,470
I have to mention before I tell you this

00:36:23,980 --> 00:36:28,780
because it really wasn't best practice

00:36:26,470 --> 00:36:32,680
but this was also like four or five

00:36:28,780 --> 00:36:37,000
years ago we were using I think we had a

00:36:32,680 --> 00:36:38,500
logic on our user service and then yeah

00:36:37,000 --> 00:36:40,930
we were just sending the user name and

00:36:38,500 --> 00:36:45,910
password over an SSL encrypted

00:36:40,930 --> 00:36:47,170
connection in clear yeah and then you

00:36:45,910 --> 00:36:48,640
know we did all the stuff to make sure

00:36:47,170 --> 00:36:51,040
that they weren't being logged and stuff

00:36:48,640 --> 00:36:52,930
but and they were hashed in the database

00:36:51,040 --> 00:36:55,390
but yeah we were sending password data

00:36:52,930 --> 00:36:57,670
straight across and and I do like the

00:36:55,390 --> 00:36:59,500
approach now that you mention it of you

00:36:57,670 --> 00:37:01,960
know hashing the password on the front

00:36:59,500 --> 00:37:05,620
end and then you know verifying it but

00:37:01,960 --> 00:37:07,060
at the same time I mean what what the

00:37:05,620 --> 00:37:08,650
concern there is is that it gets

00:37:07,060 --> 00:37:09,910
intercepted in a way that somebody can

00:37:08,650 --> 00:37:10,960
get the information out and so whether

00:37:09,910 --> 00:37:14,230
you're passing a password a password

00:37:10,960 --> 00:37:15,820
hash the only difference is is that the

00:37:14,230 --> 00:37:18,100
password hash is only good on the

00:37:15,820 --> 00:37:21,340
service where the password is good on

00:37:18,100 --> 00:37:22,420
the front end system so if you're

00:37:21,340 --> 00:37:26,400
getting intercepted you're probably

00:37:22,420 --> 00:37:26,400
giving away authentication keys anyway

00:37:27,140 --> 00:37:33,460
but yeah that's what we did and there

00:37:29,990 --> 00:37:33,460
are probably better ways of doing that

00:37:41,310 --> 00:37:43,940
okay

00:37:47,130 --> 00:37:51,680
how to ensure that the only thing

00:37:52,960 --> 00:37:58,600
that is like only God people are coming

00:38:00,790 --> 00:38:06,310
so initially when we set this up it was

00:38:04,600 --> 00:38:10,420
only running on one server and then as

00:38:06,310 --> 00:38:12,850
things grew we moved them out and what

00:38:10,420 --> 00:38:15,790
we could do at that point is yeah we

00:38:12,850 --> 00:38:17,110
just had a whitelist of IP addresses it

00:38:15,790 --> 00:38:19,620
got to the point where we whitelist

00:38:17,110 --> 00:38:22,750
whitelisted the subnet that we were on

00:38:19,620 --> 00:38:26,080
and so it was like you know this this

00:38:22,750 --> 00:38:27,790
fraction of this subnet and again this

00:38:26,080 --> 00:38:29,680
is much easier to kind of show if you

00:38:27,790 --> 00:38:31,270
can put it up there but basically you

00:38:29,680 --> 00:38:32,920
just say look you know these 16 IP

00:38:31,270 --> 00:38:35,440
addresses are okay because we own that

00:38:32,920 --> 00:38:37,930
whole block and then everything else is

00:38:35,440 --> 00:38:39,520
fine I think if we had grown to the

00:38:37,930 --> 00:38:41,500
point where we were distributing it more

00:38:39,520 --> 00:38:42,550
across multiple data centers and things

00:38:41,500 --> 00:38:44,770
like that we would have gotten to the

00:38:42,550 --> 00:38:47,200
point where we would have put some kind

00:38:44,770 --> 00:38:49,390
of strictures in place where it was like

00:38:47,200 --> 00:38:51,430
public private key authentication or

00:38:49,390 --> 00:38:53,730
something like that where the whole

00:38:51,430 --> 00:38:55,750
connection the whole tunnel was

00:38:53,730 --> 00:38:57,790
encrypted front to back

00:38:55,750 --> 00:38:59,710
and so if it didn't come in with the

00:38:57,790 --> 00:39:03,880
right protocol on the right kind of

00:38:59,710 --> 00:39:08,680
connection but yeah initially we just

00:39:03,880 --> 00:39:11,010
went misted IP addresses any other

00:39:08,680 --> 00:39:11,010
questions

00:39:14,319 --> 00:39:17,650
all right well it looks like we're gonna

00:39:16,089 --> 00:39:19,749
wrap this up about five minutes early

00:39:17,650 --> 00:39:21,279
then if you want to talk to me I'm just

00:39:19,749 --> 00:39:23,049
gonna be back there by the door in that

00:39:21,279 --> 00:39:28,359
way whoever's here next can set up and

00:39:23,049 --> 00:39:30,369
go on but let me get to my last slide

00:39:28,359 --> 00:39:35,829
real quick if you do want to get a hold

00:39:30,369 --> 00:39:37,779
of me the best ways to do that are by

00:39:35,829 --> 00:39:41,499
listening to me at Ruby Rose comm and

00:39:37,779 --> 00:39:43,479
James goes James a smarter name you can

00:39:41,499 --> 00:39:45,279
also find me on Twitter seeing max W

00:39:43,479 --> 00:39:47,859
that's my phone number if you want to

00:39:45,279 --> 00:39:51,160
hire me or connect with me in some way

00:39:47,859 --> 00:39:54,819
I'm happy to answer phone calls and you

00:39:51,160 --> 00:39:57,069
can email me as well so yeah if you have

00:39:54,819 --> 00:39:59,789
work you need advice on this kind of

00:39:57,069 --> 00:39:59,789
stuff and let me know

00:40:12,950 --> 00:40:15,010

YouTube URL: https://www.youtube.com/watch?v=sxvBK3QpP-c


