Title: Running Heroku on Heroku by Noah Zoschke
Publication date: 2020-01-28
Playlist: Aloha RubyConf 2012
Description: 
	Help us caption & translate this video!

http://amara.org/v/FGfh/
Captions: 
	00:00:14,320 --> 00:00:20,840
hey everybody thanks for hanging in

00:00:16,309 --> 00:00:22,520
there working my name is a no zosky this

00:00:20,840 --> 00:00:26,060
is a talk called running Heroku on

00:00:22,520 --> 00:00:28,820
Heroku and of course we're here at Aloha

00:00:26,060 --> 00:00:30,919
Ruby and yeah thanks to all the

00:00:28,820 --> 00:00:32,840
organizers and all the speakers and all

00:00:30,919 --> 00:00:35,720
of you guys for making a really great

00:00:32,840 --> 00:00:38,680
event so the slides for this or online

00:00:35,720 --> 00:00:43,160
if you ever want to reference anything

00:00:38,680 --> 00:00:45,859
so I would assume most you familiar with

00:00:43,160 --> 00:00:48,829
Heroku as rubyists but just a quick

00:00:45,859 --> 00:00:51,589
background Roku is a cloud application

00:00:48,829 --> 00:00:53,059
platform as a service so used to say

00:00:51,589 --> 00:00:56,149
we're a ruby application platform on

00:00:53,059 --> 00:00:58,010
service but of course we have opened

00:00:56,149 --> 00:01:02,570
this up to other languages Python and

00:00:58,010 --> 00:01:04,430
Java and nodejs and one of our tag lines

00:01:02,570 --> 00:01:06,830
is run anything and see everything

00:01:04,430 --> 00:01:08,659
without servers so one of the goals

00:01:06,830 --> 00:01:10,730
certainly a personal goal of mine but a

00:01:08,659 --> 00:01:12,500
goal for our platform is to destroy the

00:01:10,730 --> 00:01:13,729
concept of a server it's you or

00:01:12,500 --> 00:01:16,220
application developers we're all

00:01:13,729 --> 00:01:18,200
application developers don't really want

00:01:16,220 --> 00:01:19,910
to deal with the traditional operations

00:01:18,200 --> 00:01:22,130
involved of setting up servers setting

00:01:19,910 --> 00:01:26,300
up databases we just want to get our

00:01:22,130 --> 00:01:27,740
apps online and so a more low-level way

00:01:26,300 --> 00:01:30,380
that I think about this personally as a

00:01:27,740 --> 00:01:33,350
platform engineers that we're developing

00:01:30,380 --> 00:01:35,450
a distributed UNIX so this is this kind

00:01:33,350 --> 00:01:37,610
of grid of application servers all based

00:01:35,450 --> 00:01:41,210
on linux and open source it's ubuntu

00:01:37,610 --> 00:01:43,070
based and i consider Heroku is kind of

00:01:41,210 --> 00:01:45,880
this operating system layer to interface

00:01:43,070 --> 00:01:48,680
with just this pool of computing and

00:01:45,880 --> 00:01:52,510
suppose that's the cloud but it's also

00:01:48,680 --> 00:01:56,360
you know just some servers in Amazon and

00:01:52,510 --> 00:01:58,340
so this talk it's something I just think

00:01:56,360 --> 00:02:02,510
kind of an interesting computer science

00:01:58,340 --> 00:02:05,060
problem the concept of bootstrapping and

00:02:02,510 --> 00:02:06,740
how that relates to self-hosting so not

00:02:05,060 --> 00:02:09,319
talking about Twitter bootstrap as a

00:02:06,740 --> 00:02:12,050
design tool or anything like that this

00:02:09,319 --> 00:02:15,319
is if you guys caught Glen's talk a

00:02:12,050 --> 00:02:17,330
minute ago this is kind of my strategy

00:02:15,319 --> 00:02:18,830
for keeping the designers away we can

00:02:17,330 --> 00:02:20,430
just go you know really deep into the

00:02:18,830 --> 00:02:25,280
computer science here and under

00:02:20,430 --> 00:02:28,290
and as software as computer scientists

00:02:25,280 --> 00:02:33,870
what some of these low level primitives

00:02:28,290 --> 00:02:35,849
are for programming but we can step back

00:02:33,870 --> 00:02:37,739
for a second bootstrapping it's a

00:02:35,849 --> 00:02:41,609
generic word it has a lot of

00:02:37,739 --> 00:02:43,469
applications first came around in the

00:02:41,609 --> 00:02:47,310
19th century where people actually wore

00:02:43,469 --> 00:02:48,959
boots and head straps on them and the

00:02:47,310 --> 00:02:51,480
first meaning of this it was something

00:02:48,959 --> 00:02:54,090
that was impossible it's to raise or

00:02:51,480 --> 00:02:56,639
better oneself by one's own unaided

00:02:54,090 --> 00:02:58,829
efforts in a far-fetched manner this was

00:02:56,639 --> 00:03:00,389
something it was a term given to like

00:02:58,829 --> 00:03:02,549
traveling salesman that had perpetual

00:03:00,389 --> 00:03:04,859
motion machines or get-rich-quick

00:03:02,549 --> 00:03:06,900
schemes these guys you know we're

00:03:04,859 --> 00:03:08,280
referred to as bootstrapping and it's

00:03:06,900 --> 00:03:10,590
just something you can't actually do you

00:03:08,280 --> 00:03:14,849
can't obviously lift yourself up by your

00:03:10,590 --> 00:03:17,519
bootstraps early literary references

00:03:14,849 --> 00:03:20,370
Baron Munchausen who was an adventurer

00:03:17,519 --> 00:03:23,280
running around and his horse got stuck

00:03:20,370 --> 00:03:25,229
in the mud him on his horse and he was

00:03:23,280 --> 00:03:27,150
able to save themselves by lifting

00:03:25,229 --> 00:03:30,000
himself up and his horse up by his

00:03:27,150 --> 00:03:32,909
ponytail so I suppose that's ponytail

00:03:30,000 --> 00:03:36,629
Aang not bootstrapping but same same

00:03:32,909 --> 00:03:39,540
concept and at some point the meeting

00:03:36,629 --> 00:03:41,430
shifted a little bit in the 20th century

00:03:39,540 --> 00:03:43,530
and it actually became a positive term

00:03:41,430 --> 00:03:45,540
which is how we know it now so this is a

00:03:43,530 --> 00:03:46,979
now it refers to a self-sustaining

00:03:45,540 --> 00:03:50,430
process that can proceed without

00:03:46,979 --> 00:03:52,530
external help and there's a lot of

00:03:50,430 --> 00:03:54,919
different domains that this term is

00:03:52,530 --> 00:03:58,379
applied to so one is socioeconomics

00:03:54,919 --> 00:04:00,209
anytime we're in a political season we

00:03:58,379 --> 00:04:01,739
have these politicians all trying to out

00:04:00,209 --> 00:04:04,829
bootstrap each other you know I came

00:04:01,739 --> 00:04:06,930
from this poor city and worked really

00:04:04,829 --> 00:04:11,280
hard and the American Dream and pulled

00:04:06,930 --> 00:04:14,519
myself up from my bootstraps business if

00:04:11,280 --> 00:04:16,949
you guys read 37signals bootstrap

00:04:14,519 --> 00:04:19,079
profitable and proud it's a concept that

00:04:16,949 --> 00:04:22,049
can apply to software company is there

00:04:19,079 --> 00:04:23,490
any company really where you get this

00:04:22,049 --> 00:04:25,650
company off the ground you don't need a

00:04:23,490 --> 00:04:27,150
ton of VC you just have a really solid

00:04:25,650 --> 00:04:29,430
idea in a really good work ethic and

00:04:27,150 --> 00:04:31,980
I'll put a little bit of your own money

00:04:29,430 --> 00:04:35,010
and sweat into this thing and

00:04:31,980 --> 00:04:37,530
this thing up and get a good healthy

00:04:35,010 --> 00:04:39,740
lifestyle business going statistics

00:04:37,530 --> 00:04:42,570
linguistics this is an interesting one

00:04:39,740 --> 00:04:45,180
refers here to the process which

00:04:42,570 --> 00:04:48,330
children acquire language you know kids

00:04:45,180 --> 00:04:50,160
start in a blank slate they can

00:04:48,330 --> 00:04:52,970
obviously hear things but can't speak

00:04:50,160 --> 00:04:55,380
and and somehow there's this process of

00:04:52,970 --> 00:04:58,200
bootstrapping the ability to both talk

00:04:55,380 --> 00:05:00,840
and listen and understand some early

00:04:58,200 --> 00:05:03,210
biology all your cells start out as

00:05:00,840 --> 00:05:05,510
these generic stem cells and and there's

00:05:03,210 --> 00:05:09,300
this bootstrapping process by which they

00:05:05,510 --> 00:05:11,280
acquire specialization and turn into you

00:05:09,300 --> 00:05:14,430
know different types of tissue and so on

00:05:11,280 --> 00:05:15,600
and of course computers which is

00:05:14,430 --> 00:05:18,510
probably the thing that actually brings

00:05:15,600 --> 00:05:20,370
us here as I was researching this

00:05:18,510 --> 00:05:22,950
subject it took a little while to

00:05:20,370 --> 00:05:25,140
connect this dot but booting a computer

00:05:22,950 --> 00:05:27,210
that's short for bootstrapping some of

00:05:25,140 --> 00:05:29,130
the original computers you know the old

00:05:27,210 --> 00:05:30,750
mainframes or whatnot would have a big

00:05:29,130 --> 00:05:33,150
giant red button on them that said

00:05:30,750 --> 00:05:35,760
bootstrap and this is the thing you push

00:05:33,150 --> 00:05:37,710
it and it turns on all the equipment at

00:05:35,760 --> 00:05:40,290
all the electronics at the right time

00:05:37,710 --> 00:05:41,910
and sets registers and so on and so

00:05:40,290 --> 00:05:44,670
forth and you know this is still

00:05:41,910 --> 00:05:45,810
something incredibly important but we

00:05:44,670 --> 00:05:47,310
don't even have to worry about it

00:05:45,810 --> 00:05:49,350
anymore it's it's just you know you just

00:05:47,310 --> 00:05:51,890
open your computer or press the button

00:05:49,350 --> 00:05:54,120
and it turns on but there is very very

00:05:51,890 --> 00:05:58,260
complicated intricate things happening

00:05:54,120 --> 00:05:59,880
inside computers when they boot and so

00:05:58,260 --> 00:06:01,440
then there is also another computer

00:05:59,880 --> 00:06:04,470
science application here which is

00:06:01,440 --> 00:06:06,600
compilers so I'm sure you all want to

00:06:04,470 --> 00:06:08,250
sit around and talk about compilers this

00:06:06,600 --> 00:06:12,780
afternoon instead of being on the beach

00:06:08,250 --> 00:06:14,610
but the so this in compilers

00:06:12,780 --> 00:06:16,800
bootstrapping it's a process by which

00:06:14,610 --> 00:06:19,020
simple language is used to translate a

00:06:16,800 --> 00:06:20,910
more complicated program which can

00:06:19,020 --> 00:06:23,310
handle even more complicated program and

00:06:20,910 --> 00:06:27,810
so on and so forth so similar to booting

00:06:23,310 --> 00:06:30,260
of a computer we now have you know these

00:06:27,810 --> 00:06:33,180
beautiful interpret languages like Ruby

00:06:30,260 --> 00:06:35,100
but there's this really complicated set

00:06:33,180 --> 00:06:37,320
of steps that had to happen for us to

00:06:35,100 --> 00:06:39,270
actually just get a ruby terminal and be

00:06:37,320 --> 00:06:41,700
able to type you know hello print hello

00:06:39,270 --> 00:06:43,740
world or puts hello world and get this

00:06:41,700 --> 00:06:45,360
thing to happen so somewhere you could

00:06:43,740 --> 00:06:48,870
trace all this stuff back

00:06:45,360 --> 00:06:51,289
there's you know Ruby is compiled with C

00:06:48,870 --> 00:06:54,270
and C needs to be bootstrapped by

00:06:51,289 --> 00:06:56,550
another binary or a linker and assembler

00:06:54,270 --> 00:06:59,580
or so on and so forth and and luckily

00:06:56,550 --> 00:07:03,000
where we sit now we don't again have to

00:06:59,580 --> 00:07:05,819
think about all this too often but it

00:07:03,000 --> 00:07:08,069
certainly is an interesting problem so

00:07:05,819 --> 00:07:11,099
there's a chicken and egg problem here

00:07:08,069 --> 00:07:13,590
with bootstrapping a compiler and which

00:07:11,099 --> 00:07:14,939
you know you can't again same way with

00:07:13,590 --> 00:07:16,919
bootstrap you can't actually just lift

00:07:14,939 --> 00:07:19,919
yourself up from nothing so we have to

00:07:16,919 --> 00:07:22,680
develop some strategies to handle this

00:07:19,919 --> 00:07:25,500
so probably one of the earliest ones

00:07:22,680 --> 00:07:27,689
again back in the mainframe days or was

00:07:25,500 --> 00:07:30,650
to hand compile as you would say well I

00:07:27,689 --> 00:07:33,629
have this system and I know it needs to

00:07:30,650 --> 00:07:36,210
you know interpret this string of

00:07:33,629 --> 00:07:37,740
characters how do how do we get this off

00:07:36,210 --> 00:07:42,180
the ground well you just somebody was

00:07:37,740 --> 00:07:44,279
physically inputting bytecode one little

00:07:42,180 --> 00:07:45,689
operation at a time and building kind of

00:07:44,279 --> 00:07:48,960
the simplest compilers or the simplest

00:07:45,689 --> 00:07:51,300
translators so then we could use the

00:07:48,960 --> 00:07:53,310
results of that you know if we got a

00:07:51,300 --> 00:07:56,639
little Fortran compiler that was written

00:07:53,310 --> 00:07:58,529
in handwritten assembler then we could

00:07:56,639 --> 00:08:00,569
use Fortran to start building other

00:07:58,529 --> 00:08:05,339
things so we can build a compiler for x

00:08:00,569 --> 00:08:08,969
and y and then now we were getting going

00:08:05,339 --> 00:08:10,379
here so now we might have a old version

00:08:08,969 --> 00:08:12,419
of one of these things we have an old

00:08:10,379 --> 00:08:15,599
Lisp interpreter and we can use that to

00:08:12,419 --> 00:08:17,879
build another list interpreter or a new

00:08:15,599 --> 00:08:20,639
version of a the interpreter so it can

00:08:17,879 --> 00:08:23,569
start moving along and another strategy

00:08:20,639 --> 00:08:26,520
you know a simpler restricted version

00:08:23,569 --> 00:08:28,650
something was sub with a subset so if

00:08:26,520 --> 00:08:32,130
you guys follow Rubinius that's a great

00:08:28,650 --> 00:08:33,930
example or I'm more familiar with pipe I

00:08:32,130 --> 00:08:36,959
actually that that's an example of this

00:08:33,930 --> 00:08:39,599
last one pi PI it's a Python written in

00:08:36,959 --> 00:08:41,779
Python and there's this little subset

00:08:39,599 --> 00:08:45,360
called our Python restricted Python it's

00:08:41,779 --> 00:08:46,829
simpler than the the whole Python

00:08:45,360 --> 00:08:48,810
language but still very powerful and

00:08:46,829 --> 00:08:52,800
expressive and you can build up some

00:08:48,810 --> 00:08:54,899
tools like that and so finally you get

00:08:52,800 --> 00:08:58,019
to the holy grail of compilers here a

00:08:54,899 --> 00:08:59,730
self-hosting compiler so this is what

00:08:58,019 --> 00:09:02,429
after this working bootstrap procedure

00:08:59,730 --> 00:09:04,350
we can improve the process a few times

00:09:02,429 --> 00:09:06,929
or maybe many times and finally get a

00:09:04,350 --> 00:09:12,449
compiler we can rewrite the compiler in

00:09:06,929 --> 00:09:15,689
its own source language so this let's

00:09:12,449 --> 00:09:17,730
see there's huge huge advantages here so

00:09:15,689 --> 00:09:19,639
the example of this is which will dive

00:09:17,730 --> 00:09:23,249
into a little bit more in a second is

00:09:19,639 --> 00:09:27,049
say llvm it's a see compiler clang it's

00:09:23,249 --> 00:09:29,189
a see compiler written in C and so the

00:09:27,049 --> 00:09:31,980
Rubinius is another example of this is a

00:09:29,189 --> 00:09:36,029
self-hosted language and one of the big

00:09:31,980 --> 00:09:38,670
advantages it's a human advantage here

00:09:36,029 --> 00:09:40,799
which is the development can happen in

00:09:38,670 --> 00:09:44,910
this higher-order language in this

00:09:40,799 --> 00:09:46,619
higher-level language and it's nice it's

00:09:44,910 --> 00:09:48,739
good for us that you know somebody

00:09:46,619 --> 00:09:52,350
working on Ruby core doesn't have to

00:09:48,739 --> 00:09:54,179
know assembly they we we've seen through

00:09:52,350 --> 00:09:55,889
pi PI and Rubinius that this actually

00:09:54,179 --> 00:09:59,040
leads to like really surprising

00:09:55,889 --> 00:10:00,569
advantages in languages which is you

00:09:59,040 --> 00:10:02,730
know you might think it wouldn't be as

00:10:00,569 --> 00:10:04,860
efficient to write Ruby and ruby but it

00:10:02,730 --> 00:10:06,149
actually turns out that it can be just

00:10:04,860 --> 00:10:09,559
because it's so much easier for

00:10:06,149 --> 00:10:11,730
developers or for these maintain errs to

00:10:09,559 --> 00:10:13,949
understand the concepts going here and

00:10:11,730 --> 00:10:15,990
they have much more expressive tool and

00:10:13,949 --> 00:10:17,999
that allows them to really focus on I'm

00:10:15,990 --> 00:10:20,970
just kind of the big picture and some

00:10:17,999 --> 00:10:22,610
correctness but simplicity and there's a

00:10:20,970 --> 00:10:25,619
really interesting advantage there

00:10:22,610 --> 00:10:27,899
another one is that it's a non-trivial

00:10:25,619 --> 00:10:30,899
test of the language being compiled so

00:10:27,899 --> 00:10:33,869
you say we have this language whether

00:10:30,899 --> 00:10:36,329
it's C or Ruby and we can say pretty

00:10:33,869 --> 00:10:37,740
confidently that a language isn't very

00:10:36,329 --> 00:10:39,779
good if you can't write other

00:10:37,740 --> 00:10:43,079
translators or other computer based

00:10:39,779 --> 00:10:45,809
translators in it so saying that you

00:10:43,079 --> 00:10:48,540
know we can actually express a Ruby VM

00:10:45,809 --> 00:10:50,959
in Ruby is a good sign that Ruby is a

00:10:48,540 --> 00:10:53,549
sufficiently expressive language and

00:10:50,959 --> 00:10:56,879
finally it's a comprehensive consistency

00:10:53,549 --> 00:10:59,220
check so there's no better test of a

00:10:56,879 --> 00:11:02,369
language and the the system of

00:10:59,220 --> 00:11:06,209
programming and compilers then to have

00:11:02,369 --> 00:11:08,549
this self hosted system you can say the

00:11:06,209 --> 00:11:10,590
C language this implementation of the C

00:11:08,549 --> 00:11:12,540
language can build another implement

00:11:10,590 --> 00:11:16,260
the C language you can feel really

00:11:12,540 --> 00:11:18,120
comfortable that that this specification

00:11:16,260 --> 00:11:23,970
what this should do and and how its

00:11:18,120 --> 00:11:25,680
implemented is comprehensive so as I was

00:11:23,970 --> 00:11:27,120
again researching this you know I wanted

00:11:25,680 --> 00:11:29,790
to like do it kind of deep dive into

00:11:27,120 --> 00:11:32,940
this myself and and kind of test one of

00:11:29,790 --> 00:11:34,680
these self hosted tools and make sure it

00:11:32,940 --> 00:11:37,050
actually works the way you would expect

00:11:34,680 --> 00:11:40,350
it and you know that I understand what's

00:11:37,050 --> 00:11:41,940
going on here so I grabbed llvm where

00:11:40,350 --> 00:11:45,240
you guys familiar with this you should

00:11:41,940 --> 00:11:49,020
be if you are Mac users it's replaced

00:11:45,240 --> 00:11:50,850
the the toolchain there but it's low

00:11:49,020 --> 00:11:54,780
level virtual machine it's this

00:11:50,850 --> 00:11:58,860
cross-platform low-level virtual machine

00:11:54,780 --> 00:12:01,320
that has all these pluggable front ends

00:11:58,860 --> 00:12:04,560
and it's really impressive software it's

00:12:01,320 --> 00:12:07,050
kind of new which two thousand its

00:12:04,560 --> 00:12:10,650
research projects in you I at UIUC and

00:12:07,050 --> 00:12:12,690
it slowly been giving GCC a run for its

00:12:10,650 --> 00:12:17,190
money if not replaced it in a lot of

00:12:12,690 --> 00:12:19,470
ways and it's architecture is really

00:12:17,190 --> 00:12:21,810
solid you get this low-level component

00:12:19,470 --> 00:12:24,900
and then you can plug all these front

00:12:21,810 --> 00:12:27,090
ends to it and and so have many

00:12:24,900 --> 00:12:30,660
different languages and and it's really

00:12:27,090 --> 00:12:32,730
like a compiler framework and clang is

00:12:30,660 --> 00:12:36,180
probably the most popular part of it

00:12:32,730 --> 00:12:39,000
that's the sea lang c c++ objective-c

00:12:36,180 --> 00:12:43,640
front end and that's notable that it's

00:12:39,000 --> 00:12:46,110
the c++ compiler clang is written in c++

00:12:43,640 --> 00:12:50,460
so we're going to do a three-stage

00:12:46,110 --> 00:12:52,290
bootstrap of this tool so read the

00:12:50,460 --> 00:12:53,670
getting started guide for llvm the

00:12:52,290 --> 00:12:57,450
getting started guide is probably

00:12:53,670 --> 00:13:00,330
hundred pages of just crazy c compiler

00:12:57,450 --> 00:13:04,710
stuff but I can kind of cut it all down

00:13:00,330 --> 00:13:07,550
here to three steps so excuse my shell

00:13:04,710 --> 00:13:11,400
script but the first one we're going to

00:13:07,550 --> 00:13:14,130
build llvm with GCC and g plus plus and

00:13:11,400 --> 00:13:16,320
then the next time we're going to do the

00:13:14,130 --> 00:13:18,330
second stage or stage we're going to use

00:13:16,320 --> 00:13:20,940
the output of this first stage build and

00:13:18,330 --> 00:13:23,220
now use the ceiling or the clang

00:13:20,940 --> 00:13:24,430
compiler in clanging plus plus and we're

00:13:23,220 --> 00:13:26,200
going to do this twice in a row

00:13:24,430 --> 00:13:28,360
using you know the results of the

00:13:26,200 --> 00:13:31,600
previous one and just kind of loop

00:13:28,360 --> 00:13:35,820
through these and configure make make

00:13:31,600 --> 00:13:38,560
install with whatever is specified and

00:13:35,820 --> 00:13:42,310
finally when we're done here just kind

00:13:38,560 --> 00:13:43,930
of inspect the the binaries I'm sorry

00:13:42,310 --> 00:13:46,060
we're going to make tests that's the

00:13:43,930 --> 00:13:51,970
important part is run this comprehensive

00:13:46,060 --> 00:13:54,550
test sweet and so kind of an aside here

00:13:51,970 --> 00:13:56,640
is as I was playing with this concept I

00:13:54,550 --> 00:13:59,529
was sitting in the coffee shop and

00:13:56,640 --> 00:14:00,850
getting a little frustrated with like

00:13:59,529 --> 00:14:02,950
the Mac development tool chain these

00:14:00,850 --> 00:14:06,010
days like what you have to go to app app

00:14:02,950 --> 00:14:07,690
store and download xcode and but that's

00:14:06,010 --> 00:14:10,000
not enough there's another plug-in or

00:14:07,690 --> 00:14:12,160
something like that sound my god fine

00:14:10,000 --> 00:14:14,920
I'll fire up vagrant and do it in

00:14:12,160 --> 00:14:17,470
virtualbox and but that's kind of a drag

00:14:14,920 --> 00:14:20,170
to you have to download this box I it

00:14:17,470 --> 00:14:21,790
was a fresh laptop and so then of course

00:14:20,170 --> 00:14:24,580
I remembered well I can just run this on

00:14:21,790 --> 00:14:26,110
Heroku the Heroku you know you might be

00:14:24,580 --> 00:14:29,800
familiar with it for running your web

00:14:26,110 --> 00:14:32,170
applications on the application servers

00:14:29,800 --> 00:14:35,350
but these all have a very simple it's

00:14:32,170 --> 00:14:38,740
like build essential in in ubuntu terms

00:14:35,350 --> 00:14:41,620
so record I know has a GCC compiler that

00:14:38,740 --> 00:14:43,180
you can actually use if you care to

00:14:41,620 --> 00:14:45,430
doesn't really matter for running your

00:14:43,180 --> 00:14:47,380
web application but it's kind of a nice

00:14:45,430 --> 00:14:51,370
nice thing to have for some stuff like

00:14:47,380 --> 00:14:53,529
this so through together the script run

00:14:51,370 --> 00:14:58,000
it on Heroku I think got one running

00:14:53,529 --> 00:15:00,209
over here it's kind of plugging along it

00:14:58,000 --> 00:15:06,700
takes a long time to actually do this

00:15:00,209 --> 00:15:09,490
and first build and see with GCC you can

00:15:06,700 --> 00:15:11,860
see here you know using GCC make make

00:15:09,490 --> 00:15:15,730
test the test i'll pass that's very good

00:15:11,860 --> 00:15:18,910
so we think GCC is is capable of

00:15:15,730 --> 00:15:20,680
building the clang source code in a in a

00:15:18,910 --> 00:15:26,430
fashion that the test for this thing

00:15:20,680 --> 00:15:28,779
will all pass and then so now we have a

00:15:26,430 --> 00:15:32,320
binary like this artifact of this first

00:15:28,779 --> 00:15:34,810
step so we can use our stage one binary

00:15:32,320 --> 00:15:36,630
so here you know using clang and

00:15:34,810 --> 00:15:37,779
clanging plus plus and we do this again

00:15:36,630 --> 00:15:40,180
so

00:15:37,779 --> 00:15:44,709
here an interesting thing to note is

00:15:40,180 --> 00:15:47,589
that clang aims to be one hundred

00:15:44,709 --> 00:15:50,019
percent backwards compatible with GCC so

00:15:47,589 --> 00:15:52,839
it can actually you know trick configure

00:15:50,019 --> 00:15:54,759
to think oh I just I do have the new C

00:15:52,839 --> 00:15:58,509
compiler even though we are using

00:15:54,759 --> 00:16:01,809
something different and sure enough make

00:15:58,509 --> 00:16:03,999
and make test passes again and if we do

00:16:01,809 --> 00:16:08,110
this the third time the outputs not here

00:16:03,999 --> 00:16:10,980
but it'll pass one more time so some

00:16:08,110 --> 00:16:15,370
some interesting things to notice here

00:16:10,980 --> 00:16:20,649
finally we can compare the the binaries

00:16:15,370 --> 00:16:22,240
and the stage one output and stage two

00:16:20,649 --> 00:16:25,029
output these look very different and

00:16:22,240 --> 00:16:26,800
there's just a lot of crazy you know

00:16:25,029 --> 00:16:30,069
strings is a funny way to look at binary

00:16:26,800 --> 00:16:31,329
the there's just a lot of different

00:16:30,069 --> 00:16:33,370
things here but this is what we would

00:16:31,329 --> 00:16:40,180
expect we've taken this source code of

00:16:33,370 --> 00:16:42,250
clang built it with GCC and the we

00:16:40,180 --> 00:16:45,459
expect that since the test pass it's

00:16:42,250 --> 00:16:47,860
it's this it actually works but we

00:16:45,459 --> 00:16:49,480
wouldn't expect it to you know GCC has

00:16:47,860 --> 00:16:50,980
very different semantics for actually

00:16:49,480 --> 00:16:53,829
building things so we would expect that

00:16:50,980 --> 00:16:54,970
that it would look different in terms of

00:16:53,829 --> 00:16:56,920
the actual you know binary

00:16:54,970 --> 00:16:58,329
representation but hopefully that the

00:16:56,920 --> 00:17:00,910
tests are comprehensive enough to say

00:16:58,329 --> 00:17:03,459
that it's functional but then between

00:17:00,910 --> 00:17:06,010
stage 2 and stage 3 we're now we are

00:17:03,459 --> 00:17:07,480
building clanging with itself we see a

00:17:06,010 --> 00:17:11,669
very little difference between these

00:17:07,480 --> 00:17:15,669
binaries so that's comforting also and

00:17:11,669 --> 00:17:17,260
so you might if you're you know looking

00:17:15,669 --> 00:17:20,399
closely you might wonder why do we

00:17:17,260 --> 00:17:22,959
actually need to do this third build the

00:17:20,399 --> 00:17:25,419
after we build it once you know this

00:17:22,959 --> 00:17:28,390
thing works it passed the tests this

00:17:25,419 --> 00:17:32,289
thing works it passed the tests what's

00:17:28,390 --> 00:17:34,990
the third one for and back to just kind

00:17:32,289 --> 00:17:38,049
of one of the reasons why we like self

00:17:34,990 --> 00:17:40,539
hosted compilers this is just one final

00:17:38,049 --> 00:17:43,149
test of actually the stage two binary so

00:17:40,539 --> 00:17:45,280
it passed make tests but there's one

00:17:43,149 --> 00:17:47,200
really really good extra tests to do

00:17:45,280 --> 00:17:48,090
which is just throw the whole source

00:17:47,200 --> 00:17:50,460
code of

00:17:48,090 --> 00:17:51,690
of clanging in LOV I met it again and

00:17:50,460 --> 00:17:54,419
make sure it can actually build this

00:17:51,690 --> 00:17:57,390
thing one more time and so the correct

00:17:54,419 --> 00:18:00,000
thing to do in this case is to throw

00:17:57,390 --> 00:18:02,309
away these other ones and use the stage

00:18:00,000 --> 00:18:05,400
3 release and now we actually have a

00:18:02,309 --> 00:18:07,909
self-hosted compiler binary that we can

00:18:05,400 --> 00:18:11,669
that we bootstrapped from the ground up

00:18:07,909 --> 00:18:15,919
so the self ocean guy compiled and

00:18:11,669 --> 00:18:19,320
playing with clang this works very cool

00:18:15,919 --> 00:18:23,130
so if you guys have read your godel

00:18:19,320 --> 00:18:24,809
escher bach this some of these concepts

00:18:23,130 --> 00:18:27,110
are referred to there certainly uh sure

00:18:24,809 --> 00:18:30,149
understood something about bootstrapping

00:18:27,110 --> 00:18:31,950
so here you know we have the one hand

00:18:30,149 --> 00:18:34,649
drawing the other hand and of course

00:18:31,950 --> 00:18:36,480
we're not seeing here is the kind of

00:18:34,649 --> 00:18:43,080
initial bootstrap which is Escher

00:18:36,480 --> 00:18:45,809
actually drawing this image so again so

00:18:43,080 --> 00:18:47,940
then the self-hosted its concept of self

00:18:45,809 --> 00:18:51,270
hosting so cool bootstrap bootstrap

00:18:47,940 --> 00:18:53,460
compilers self hosts but just like the

00:18:51,270 --> 00:18:55,880
term bootstrap this has kind of a higher

00:18:53,460 --> 00:19:00,210
meaning it applies to other domains also

00:18:55,880 --> 00:19:02,490
so a we saw this with the compiler but

00:19:00,210 --> 00:19:04,289
it can kind of refer to any computer

00:19:02,490 --> 00:19:08,250
program that produces a new version of

00:19:04,289 --> 00:19:10,440
the same program so compilers kernels

00:19:08,250 --> 00:19:13,679
this applies to that programming

00:19:10,440 --> 00:19:16,350
languages again Rubinius or pie pie

00:19:13,679 --> 00:19:19,440
those are self-hosting revision control

00:19:16,350 --> 00:19:21,929
systems the you know lynus famously

00:19:19,440 --> 00:19:23,880
manages get and get i would assume that

00:19:21,929 --> 00:19:27,299
was true of subversion was managing

00:19:23,880 --> 00:19:29,820
subversion text editors you'd expect

00:19:27,299 --> 00:19:33,870
most of the authors of you know them to

00:19:29,820 --> 00:19:38,360
probably actually use bim to edit this

00:19:33,870 --> 00:19:42,559
application and this is also an apical

00:19:38,360 --> 00:19:47,480
applicable metaphor for services so

00:19:42,559 --> 00:19:49,980
drill into this for a little bit so

00:19:47,480 --> 00:19:53,700
Heroku we know a thing or two about

00:19:49,980 --> 00:19:55,710
services run many cloud services

00:19:53,700 --> 00:19:58,500
actually and many of these are

00:19:55,710 --> 00:20:00,149
self-hosting so this is what I you know

00:19:58,500 --> 00:20:01,030
think about day-to-day the compiler

00:20:00,149 --> 00:20:05,860
stuff is

00:20:01,030 --> 00:20:09,010
computer science but how do we at Heroku

00:20:05,860 --> 00:20:12,640
apply these terms and and why would we

00:20:09,010 --> 00:20:14,580
do this so there's a very simple first

00:20:12,640 --> 00:20:19,540
version of this concept self-hosting

00:20:14,580 --> 00:20:22,000
which is we run w WR 0 comma on Heroku

00:20:19,540 --> 00:20:23,740
probably shouldn't surprise you much it

00:20:22,000 --> 00:20:25,360
would i would guess you'd be surprised

00:20:23,740 --> 00:20:28,660
if we actually ran this on slicehost or

00:20:25,360 --> 00:20:30,430
something like that and this applies to

00:20:28,660 --> 00:20:32,530
pretty much all of our web properties

00:20:30,430 --> 00:20:35,080
now the dev center and the blog and all

00:20:32,530 --> 00:20:36,880
that stuff built this platform from

00:20:35,080 --> 00:20:38,530
running websites we should run our own

00:20:36,880 --> 00:20:42,340
websites on it we should sell post them

00:20:38,530 --> 00:20:45,010
and the motivations for this for anybody

00:20:42,340 --> 00:20:47,620
that that runs a product I would assume

00:20:45,010 --> 00:20:51,100
you know that you really want to do this

00:20:47,620 --> 00:20:53,170
you know it's called dogfooding eat your

00:20:51,100 --> 00:20:56,230
own dog food you know if it doesn't

00:20:53,170 --> 00:20:59,320
taste good either get used to it or make

00:20:56,230 --> 00:21:02,740
better dog food there's a huge

00:20:59,320 --> 00:21:05,410
efficiency gains here so much like we

00:21:02,740 --> 00:21:07,150
had that that's efficiency gain and

00:21:05,410 --> 00:21:09,580
being able to write a C++ compiler and

00:21:07,150 --> 00:21:12,790
C++ our okay we can get the same

00:21:09,580 --> 00:21:15,310
efficiency that you know you may use for

00:21:12,790 --> 00:21:18,040
deployment we can use that for deploying

00:21:15,310 --> 00:21:21,820
our own website and separation of

00:21:18,040 --> 00:21:25,450
concerns so the what ww self-hosted in

00:21:21,820 --> 00:21:28,150
its own corner this this kind of

00:21:25,450 --> 00:21:31,630
historically for Heroku is a interesting

00:21:28,150 --> 00:21:34,270
story the kind of the the beginning of

00:21:31,630 --> 00:21:36,760
the Roku platform hiroko we have this

00:21:34,270 --> 00:21:39,850
giant monolithic rails app called core

00:21:36,760 --> 00:21:42,220
and core is was pretty much everything

00:21:39,850 --> 00:21:44,350
it's just a giant thing and has the

00:21:42,220 --> 00:21:46,900
website and it has the API and it has

00:21:44,350 --> 00:21:48,670
all these control surfaces and it used

00:21:46,900 --> 00:21:50,680
to be if you wanted to make a change to

00:21:48,670 --> 00:21:52,660
the public-facing web site you had to

00:21:50,680 --> 00:21:54,880
deploy core and alert all the ops guys

00:21:52,660 --> 00:21:57,400
have somebody hold the hand you might

00:21:54,880 --> 00:21:59,080
accidentally a bug in the website could

00:21:57,400 --> 00:22:01,570
take down the API like terrible terrible

00:21:59,080 --> 00:22:07,090
idea so split all these things up

00:22:01,570 --> 00:22:10,150
separation of concerns and so we've

00:22:07,090 --> 00:22:11,200
applied this to you know kind of moving

00:22:10,150 --> 00:22:15,549
up up

00:22:11,200 --> 00:22:17,049
the stack of our our platform we have an

00:22:15,549 --> 00:22:19,809
add ons platform and that also is

00:22:17,049 --> 00:22:22,179
running on Heroku so not only is the add

00:22:19,809 --> 00:22:24,429
ons website itself and that has some

00:22:22,179 --> 00:22:27,190
background job hosting and stuff but

00:22:24,429 --> 00:22:28,840
then we have built a number of add-ons

00:22:27,190 --> 00:22:32,799
say the scheduler add-on it used to be

00:22:28,840 --> 00:22:35,470
cron that run on the platform so now

00:22:32,799 --> 00:22:37,840
this is kind of moving up and testing

00:22:35,470 --> 00:22:40,080
the platform we know we can run web

00:22:37,840 --> 00:22:43,960
applications but we also want to run

00:22:40,080 --> 00:22:45,940
more complicated operations so even

00:22:43,960 --> 00:22:47,380
though this still probably looks like a

00:22:45,940 --> 00:22:50,139
lot of your web applications this is

00:22:47,380 --> 00:22:52,570
just a couple web processes and some

00:22:50,139 --> 00:23:00,639
rescued and rescue scheduler and so on

00:22:52,570 --> 00:23:04,210
and so forth moving up again but still

00:23:00,639 --> 00:23:06,309
kind of the add-on services we run a

00:23:04,210 --> 00:23:09,760
totally different cloud it's it's it's

00:23:06,309 --> 00:23:13,480
own amazon box it's called Roku postgres

00:23:09,760 --> 00:23:16,870
and this whole add-on is built on Heroku

00:23:13,480 --> 00:23:18,429
so now we're getting to some complicated

00:23:16,870 --> 00:23:20,850
stuff this isn't just a web application

00:23:18,429 --> 00:23:24,010
there's certainly a web front-end but

00:23:20,850 --> 00:23:26,950
all the provisioning of the database

00:23:24,010 --> 00:23:30,850
servers all the monitoring all the

00:23:26,950 --> 00:23:32,380
add-ons API is all a Heroku app and this

00:23:30,850 --> 00:23:33,700
was the sort of thing seeing the growth

00:23:32,380 --> 00:23:36,370
of this where the dog food didn't taste

00:23:33,700 --> 00:23:37,779
very good for a while it was really hard

00:23:36,370 --> 00:23:41,529
to do this I remember working on this

00:23:37,779 --> 00:23:43,419
and I'm like and Heroku it's great for

00:23:41,529 --> 00:23:45,370
websites it sucks for this like I do

00:23:43,419 --> 00:23:48,340
just want to run this on a slice host

00:23:45,370 --> 00:23:49,870
but feel like I said if you don't like

00:23:48,340 --> 00:23:53,620
the dog food you know find a better

00:23:49,870 --> 00:23:57,429
recipe so slowly but surely improve the

00:23:53,620 --> 00:24:01,720
platform to to handle a use case like

00:23:57,429 --> 00:24:03,850
this even more even better but we can

00:24:01,720 --> 00:24:05,230
probably go even deeper so this is like

00:24:03,850 --> 00:24:07,929
where the Heroku inception starts

00:24:05,230 --> 00:24:11,380
happening these are just the halo

00:24:07,929 --> 00:24:13,570
difficulties if you haven't noticed so

00:24:11,380 --> 00:24:15,250
but to talk about that I'm going to step

00:24:13,570 --> 00:24:16,750
back for a second and just kind of talk

00:24:15,250 --> 00:24:20,799
about the basic architecture or provoke

00:24:16,750 --> 00:24:24,340
ooh so really what we have we have three

00:24:20,799 --> 00:24:30,580
main inputs to the platform we

00:24:24,340 --> 00:24:33,159
the HTTP router this is where other web

00:24:30,580 --> 00:24:35,620
requests come in and get sent to the

00:24:33,159 --> 00:24:38,169
Dinos or the application servers or the

00:24:35,620 --> 00:24:40,809
processes running your code so this is

00:24:38,169 --> 00:24:43,750
where you know your your customers come

00:24:40,809 --> 00:24:46,450
into the platform we have the API this

00:24:43,750 --> 00:24:48,100
is where HTTP requests come in and kind

00:24:46,450 --> 00:24:51,130
of talk to the control plane of Heroku

00:24:48,100 --> 00:24:52,900
so things to scale your dinos up and

00:24:51,130 --> 00:24:55,929
down to create a new app to delete an

00:24:52,900 --> 00:24:59,460
app and this is the rails application

00:24:55,929 --> 00:25:03,220
and then we also have you know kind of

00:24:59,460 --> 00:25:06,460
famously our get push heroku we have ssh

00:25:03,220 --> 00:25:10,000
traffic coming in and this goes to the

00:25:06,460 --> 00:25:13,450
build system so you do a get push this

00:25:10,000 --> 00:25:16,230
is where then we build your your code

00:25:13,450 --> 00:25:19,919
whether that means you know bundle it or

00:25:16,230 --> 00:25:22,990
since we do node you do NPM install and

00:25:19,919 --> 00:25:25,600
we build your Dino stored on s3 and then

00:25:22,990 --> 00:25:27,070
we can run these at any given time you

00:25:25,600 --> 00:25:28,779
know on demand whether you're scaling up

00:25:27,070 --> 00:25:32,980
and down new servers or idling a nun

00:25:28,779 --> 00:25:35,590
idling and so kind of a simplified but

00:25:32,980 --> 00:25:42,130
actually fairly complete kind of

00:25:35,590 --> 00:25:45,610
overview of the inputs to our system so

00:25:42,130 --> 00:25:47,140
I'm going to dive into the the build

00:25:45,610 --> 00:25:48,399
server something that I work on a lot

00:25:47,140 --> 00:25:52,270
but i also just think is you know really

00:25:48,399 --> 00:25:55,299
fascinating use case so here you know

00:25:52,270 --> 00:25:58,570
the rectangles these are servers and if

00:25:55,299 --> 00:26:00,850
you recall one of the goals of / oku is

00:25:58,570 --> 00:26:02,500
to forget servers and this applies to

00:26:00,850 --> 00:26:04,390
you for your web application platform

00:26:02,500 --> 00:26:06,970
but this applies to me as a

00:26:04,390 --> 00:26:10,360
infrastructure engineer I want to forget

00:26:06,970 --> 00:26:14,350
servers as much as possible too so the

00:26:10,360 --> 00:26:15,669
challenge is to take these compile

00:26:14,350 --> 00:26:17,460
servers that are kind of a worker

00:26:15,669 --> 00:26:20,169
pattern they're running a work queue of

00:26:17,460 --> 00:26:22,210
you know just kind of guys sitting there

00:26:20,169 --> 00:26:26,409
waiting for a job to run it on the

00:26:22,210 --> 00:26:28,450
server and I want to move this down to

00:26:26,409 --> 00:26:31,960
the run time to the process model which

00:26:28,450 --> 00:26:35,649
is a you know which is how the product

00:26:31,960 --> 00:26:37,880
actually works and so I want to get

00:26:35,649 --> 00:26:42,320
these guys you know running in a Hiroko

00:26:37,880 --> 00:26:45,140
effectively and there are some really

00:26:42,320 --> 00:26:49,100
really important motivations here more

00:26:45,140 --> 00:26:50,720
than just efficiency the this is where

00:26:49,100 --> 00:26:55,090
we get into again these kind of human

00:26:50,720 --> 00:26:58,580
benefits of this self hosted vision so

00:26:55,090 --> 00:27:00,680
you know if can't handle enough SSH

00:26:58,580 --> 00:27:02,720
traffic you need to boot up new servers

00:27:00,680 --> 00:27:05,750
well we know that sucks that's the old

00:27:02,720 --> 00:27:07,520
method I just want to do Roku scale so i

00:27:05,750 --> 00:27:10,880
can get the effortless scaling of the

00:27:07,520 --> 00:27:13,610
platform a really important one for all

00:27:10,880 --> 00:27:16,910
of us is this build and run symmetry so

00:27:13,610 --> 00:27:19,370
if these are different different servers

00:27:16,910 --> 00:27:20,960
here we can get them very close but

00:27:19,370 --> 00:27:24,920
there is always like really subtle

00:27:20,960 --> 00:27:26,810
differences of oh the software to run

00:27:24,920 --> 00:27:29,120
this needs a few different dependencies

00:27:26,810 --> 00:27:31,250
and make sure those don't leak because

00:27:29,120 --> 00:27:32,930
your application when we build it could

00:27:31,250 --> 00:27:36,350
accidentally get the wrong Ruby or the

00:27:32,930 --> 00:27:38,420
wrong gem here there we're really going

00:27:36,350 --> 00:27:39,980
for you know it's something that I think

00:27:38,420 --> 00:27:43,490
we're all going for is this like

00:27:39,980 --> 00:27:46,190
development build and run parody of our

00:27:43,490 --> 00:27:49,940
software so unifying those can help with

00:27:46,190 --> 00:27:51,920
that but probably most importantly we at

00:27:49,940 --> 00:27:53,690
Heroku have spent a lot of time

00:27:51,920 --> 00:27:56,540
developing this technology to securely

00:27:53,690 --> 00:27:57,980
run your web application and so we have

00:27:56,540 --> 00:28:01,040
some really nice containerization

00:27:57,980 --> 00:28:02,150
technology with alexi all hidden to you

00:28:01,040 --> 00:28:04,130
you shouldn't have to worry about it

00:28:02,150 --> 00:28:08,030
unless you're you know interested in

00:28:04,130 --> 00:28:10,940
this stuff but for me I want to reuse

00:28:08,030 --> 00:28:14,090
the same same service the cellex-c

00:28:10,940 --> 00:28:17,330
service that offers secure running of

00:28:14,090 --> 00:28:19,130
your web applications to securely run

00:28:17,330 --> 00:28:22,520
the building of your web applications

00:28:19,130 --> 00:28:24,710
and so you know could try to take the

00:28:22,520 --> 00:28:26,360
same control stuff and and install it

00:28:24,710 --> 00:28:30,800
over here but really the best way to do

00:28:26,360 --> 00:28:34,190
this is to self host this service so it

00:28:30,800 --> 00:28:36,440
can do of another little demo here a

00:28:34,190 --> 00:28:38,900
slug compile and call this luck compiler

00:28:36,440 --> 00:28:42,110
so this is how we bundle code some Ruby

00:28:38,900 --> 00:28:44,840
code for the Heroku runtime so again

00:28:42,110 --> 00:28:48,980
excuse my chicken scratch trail scripts

00:28:44,840 --> 00:28:49,660
but the pretty here's the meat of the

00:28:48,980 --> 00:28:54,000
thing

00:28:49,660 --> 00:28:57,160
we somewhere in a row kadai no need to

00:28:54,000 --> 00:28:59,230
bundle we need to install bundler or

00:28:57,160 --> 00:29:02,710
maybe it's already there and bundle

00:28:59,230 --> 00:29:05,290
install and so you know here just copy

00:29:02,710 --> 00:29:08,200
the source over so doing this is kind of

00:29:05,290 --> 00:29:13,980
just a theoretical exercise where I can

00:29:08,200 --> 00:29:17,050
take this application this is lo ha Ruby

00:29:13,980 --> 00:29:19,660
this is a show-off presentation a nap

00:29:17,050 --> 00:29:22,270
and I'm going to have it compile itself

00:29:19,660 --> 00:29:27,130
on the platform so hopefully the demo

00:29:22,270 --> 00:29:29,140
goods okay so this should look somewhat

00:29:27,130 --> 00:29:30,250
familiar you know receiving the push

00:29:29,140 --> 00:29:31,540
even though not actually pushing

00:29:30,250 --> 00:29:35,110
anything here's just our syncing some

00:29:31,540 --> 00:29:37,570
stuff fetching language pack and now you

00:29:35,110 --> 00:29:40,690
know we're into our good old bundler and

00:29:37,570 --> 00:29:43,680
and it will bundle all the dependencies

00:29:40,690 --> 00:29:47,050
here and so this is an important step

00:29:43,680 --> 00:29:49,150
you know bundler is incredibly important

00:29:47,050 --> 00:29:51,550
part of the Heroku experience in the

00:29:49,150 --> 00:29:53,140
Ruby experience namely because of things

00:29:51,550 --> 00:29:54,850
like this like we actually have to build

00:29:53,140 --> 00:29:57,130
some of these gems with native

00:29:54,850 --> 00:29:58,770
extensions so this is again where we're

00:29:57,130 --> 00:30:02,560
going for this like build run

00:29:58,770 --> 00:30:04,110
development parody so we want if you

00:30:02,560 --> 00:30:07,120
need native extensions for your

00:30:04,110 --> 00:30:10,740
application we need to build these

00:30:07,120 --> 00:30:13,780
somewhere on the on the platform but

00:30:10,740 --> 00:30:17,800
again so this shows you know just Roku

00:30:13,780 --> 00:30:22,480
run is more than capable of doing bundle

00:30:17,800 --> 00:30:24,490
bundle install so and maybe this should

00:30:22,480 --> 00:30:28,330
you know look a little similar to the

00:30:24,490 --> 00:30:31,710
llvm bootstrap example like really again

00:30:28,330 --> 00:30:36,820
this kind of generic unix system for

00:30:31,710 --> 00:30:39,790
executing arbitrary code so that's

00:30:36,820 --> 00:30:42,070
that's pretty cool that something you

00:30:39,790 --> 00:30:44,050
know just finally got the whole system

00:30:42,070 --> 00:30:45,520
moved over to the platform so when you

00:30:44,050 --> 00:30:47,410
are doing a git push you are always

00:30:45,520 --> 00:30:50,550
talking to a Heroku app one of the more

00:30:47,410 --> 00:30:52,990
complicated apps on the platform so

00:30:50,550 --> 00:30:55,180
leads the question something we ask all

00:30:52,990 --> 00:30:57,700
the time at Heroku is what else what

00:30:55,180 --> 00:31:01,010
else can we you know get rid of so you

00:30:57,700 --> 00:31:05,450
know big red X through these guys the

00:31:01,010 --> 00:31:06,980
and so really the pretty much any one of

00:31:05,450 --> 00:31:13,870
these rectangles it represents a server

00:31:06,980 --> 00:31:17,810
is up for self-hosting so the API the

00:31:13,870 --> 00:31:20,030
Heroku can run rails apps pretty well be

00:31:17,810 --> 00:31:21,700
if the API is the rails up maybe we

00:31:20,030 --> 00:31:26,570
should get that running on the platform

00:31:21,700 --> 00:31:29,650
that one's been tricky for a couple

00:31:26,570 --> 00:31:31,910
reasons I'll get into and second

00:31:29,650 --> 00:31:36,290
something like the message bus perhaps

00:31:31,910 --> 00:31:37,760
this is a service running somewhere when

00:31:36,290 --> 00:31:40,670
it's really just a process maybe we can

00:31:37,760 --> 00:31:43,340
run that on the platform it turns out

00:31:40,670 --> 00:31:47,240
you know it's thin start is a web

00:31:43,340 --> 00:31:50,510
service why not redis start or post-grad

00:31:47,240 --> 00:31:52,400
start in a dino some tricky routing

00:31:50,510 --> 00:31:56,630
problems there but actually not

00:31:52,400 --> 00:31:59,510
insurmountable ever people usually ask

00:31:56,630 --> 00:32:01,160
what about the router if you can figure

00:31:59,510 --> 00:32:04,910
out how to do that come and talk to me

00:32:01,160 --> 00:32:08,630
that will be like holy grail of like the

00:32:04,910 --> 00:32:10,460
cloud singularity i think but of course

00:32:08,630 --> 00:32:13,430
all these represent you know really

00:32:10,460 --> 00:32:15,770
interesting puzzles so like I said the

00:32:13,430 --> 00:32:17,810
API one's been tricky there's there is a

00:32:15,770 --> 00:32:21,890
really complicated bootstrap problem

00:32:17,810 --> 00:32:23,990
there but you know we've figured this

00:32:21,890 --> 00:32:27,230
out for a number of our services so the

00:32:23,990 --> 00:32:29,120
post grad service it uses post pres is a

00:32:27,230 --> 00:32:31,280
data store and it can provision and

00:32:29,120 --> 00:32:34,760
monitor its own database that's pretty

00:32:31,280 --> 00:32:37,370
cool likewise PG backups that's the

00:32:34,760 --> 00:32:40,520
backup service it also uses post pres

00:32:37,370 --> 00:32:44,600
and backs up back its own database up

00:32:40,520 --> 00:32:47,990
and likewise you know slug compilers

00:32:44,600 --> 00:32:49,820
since now that's a Heroku app when I get

00:32:47,990 --> 00:32:55,190
push Roku for that it will compile

00:32:49,820 --> 00:32:56,630
itself and so these can you know puzzle

00:32:55,190 --> 00:32:58,430
is a nice way of saying that these can

00:32:56,630 --> 00:33:01,760
also be like disastrous if things go

00:32:58,430 --> 00:33:02,990
wrong they you you know if I break slug

00:33:01,760 --> 00:33:06,380
compiler if somebody breaks slug

00:33:02,990 --> 00:33:10,100
compiler babe how do I release a new

00:33:06,380 --> 00:33:12,260
version of it that has the fix but

00:33:10,100 --> 00:33:13,530
something you know as we started going

00:33:12,260 --> 00:33:16,560
down this path of Roku

00:33:13,530 --> 00:33:17,760
it became very clear that we do look at

00:33:16,560 --> 00:33:20,190
this as a puzzle like these are just

00:33:17,760 --> 00:33:22,890
engineering challenges to solve just

00:33:20,190 --> 00:33:24,360
because you know there are some reasons

00:33:22,890 --> 00:33:26,880
why you wouldn't want to do this for

00:33:24,360 --> 00:33:28,200
certain things but if you you know just

00:33:26,880 --> 00:33:31,590
treat it as a challenge and something we

00:33:28,200 --> 00:33:33,930
can fix with engineering it turns out

00:33:31,590 --> 00:33:35,610
you know we can actually solve those and

00:33:33,930 --> 00:33:42,350
and kind of head down this path of self

00:33:35,610 --> 00:33:45,870
hosting so really you know in conclusion

00:33:42,350 --> 00:33:47,460
hopefully you can see through all these

00:33:45,870 --> 00:33:50,130
examples that like self-hosting it's

00:33:47,460 --> 00:33:54,290
just a goal for any complex system the

00:33:50,130 --> 00:33:57,060
the human body cloud platform a compiler

00:33:54,290 --> 00:33:59,640
the you know it's definitely something

00:33:57,060 --> 00:34:02,960
to study and think about for your

00:33:59,640 --> 00:34:04,950
software your services your tools and

00:34:02,960 --> 00:34:07,950
you know that you just get these gains

00:34:04,950 --> 00:34:10,560
in efficiency and a really good way to

00:34:07,950 --> 00:34:17,100
test that your system works and is

00:34:10,560 --> 00:34:19,440
correct and that has consistency so

00:34:17,100 --> 00:34:20,880
really quick some references here a lot

00:34:19,440 --> 00:34:23,820
of this is you know classic computer

00:34:20,880 --> 00:34:26,640
science compilers and compiler

00:34:23,820 --> 00:34:29,159
generators and ninety-six really really

00:34:26,640 --> 00:34:31,020
fascinating slow if you would need

00:34:29,159 --> 00:34:34,409
something to fall asleep to that's the

00:34:31,020 --> 00:34:37,310
one this is a really cool one of you

00:34:34,409 --> 00:34:40,440
guys read reflections on trusting trust

00:34:37,310 --> 00:34:43,080
this is like in the ACM classics what a

00:34:40,440 --> 00:34:47,820
very very classic computer science paper

00:34:43,080 --> 00:34:52,020
by ken Thompson if you recall use GCC to

00:34:47,820 --> 00:34:54,360
bootstrap llvm so he is really really

00:34:52,020 --> 00:34:59,540
clever like philosophical question which

00:34:54,360 --> 00:35:02,490
is okay well do you really trust GCC and

00:34:59,540 --> 00:35:04,470
they I don't know it's I'm just using

00:35:02,490 --> 00:35:08,220
whatever is installed on the system a

00:35:04,470 --> 00:35:10,320
very very cool demo of poisoning the

00:35:08,220 --> 00:35:12,980
like one of the original versions of GCC

00:35:10,320 --> 00:35:16,020
where it can add a backdoor into

00:35:12,980 --> 00:35:17,880
anything it compiles and in a way that

00:35:16,020 --> 00:35:19,230
like you can't even know that this is

00:35:17,880 --> 00:35:21,180
there so that that's a really

00:35:19,230 --> 00:35:25,070
fascinating one if you like to study the

00:35:21,180 --> 00:35:30,350
puzzles that come up here

00:35:25,070 --> 00:35:35,830
and so that's it I'd be happy to answer

00:35:30,350 --> 00:35:43,630
any questions about this or Roku or

00:35:35,830 --> 00:35:43,630
surfing now I can do that one but thanks

00:35:49,180 --> 00:35:55,579
the question is if you forget about

00:35:51,530 --> 00:35:57,049
servers do they get lost amazon is

00:35:55,579 --> 00:36:03,099
really good at losing servers it turns

00:35:57,049 --> 00:36:06,650
out they just vanish the we have lots of

00:36:03,099 --> 00:36:08,799
big scary things and our administration

00:36:06,650 --> 00:36:20,200
tools that say like untracked server and

00:36:08,799 --> 00:36:24,250
they do get lost a lot yes right so

00:36:20,200 --> 00:36:26,780
cedar is not read-only anymore surprise

00:36:24,250 --> 00:36:31,069
and then you've always had a temp file

00:36:26,780 --> 00:36:33,650
system so in this case was copying

00:36:31,069 --> 00:36:37,069
everything over to temp but you can if

00:36:33,650 --> 00:36:39,890
you do hiroko run bash on sedar you can

00:36:37,069 --> 00:36:42,109
write to the main file system so don't

00:36:39,890 --> 00:36:44,000
save persistent data there that's a bad

00:36:42,109 --> 00:36:46,180
idea but we've backed off making it

00:36:44,000 --> 00:36:46,180
read-only

00:37:00,580 --> 00:37:02,640

YouTube URL: https://www.youtube.com/watch?v=3JrJUB-JAww


