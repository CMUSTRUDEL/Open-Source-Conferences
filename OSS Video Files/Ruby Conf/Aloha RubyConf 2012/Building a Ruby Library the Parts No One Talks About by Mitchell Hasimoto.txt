Title: Building a Ruby Library the Parts No One Talks About by Mitchell Hasimoto
Publication date: 2020-01-28
Playlist: Aloha RubyConf 2012
Description: 
	Help us caption & translate this video!

http://amara.org/v/FGfl/
Captions: 
	00:00:14,769 --> 00:00:19,880
very quickly let me intro myself my name

00:00:18,170 --> 00:00:21,680
is Mitchell Ashish moto this is my

00:00:19,880 --> 00:00:24,830
twitter handle and my gravatar that i

00:00:21,680 --> 00:00:27,230
use everywhere maybe you recognize that

00:00:24,830 --> 00:00:29,750
maybe don't I wrote a piece of software

00:00:27,230 --> 00:00:31,880
called vagrant so if you use that or

00:00:29,750 --> 00:00:34,730
have used it or heard of it or haven't

00:00:31,880 --> 00:00:38,239
used it then vagrant com but this talk

00:00:34,730 --> 00:00:41,210
isn't about that so that's all I'm going

00:00:38,239 --> 00:00:43,670
to say about that I work for a company

00:00:41,210 --> 00:00:45,949
called keep we do mobile advertising in

00:00:43,670 --> 00:00:48,469
San Francisco I'm an ops engineer so I

00:00:45,949 --> 00:00:50,690
actually don't do Ruby all day anymore I

00:00:48,469 --> 00:00:52,489
have in a couple years but I do it well

00:00:50,690 --> 00:00:53,899
I do it every day on open source but I

00:00:52,489 --> 00:00:57,199
haven't done it in the work environment

00:00:53,899 --> 00:00:59,089
in a couple years and I need to thank

00:00:57,199 --> 00:01:00,530
engine yard because they sponsor my

00:00:59,089 --> 00:01:02,870
open-source work so they're the reason

00:01:00,530 --> 00:01:05,120
that I'm able to come here and talk to

00:01:02,870 --> 00:01:08,450
you about things like this that's pretty

00:01:05,120 --> 00:01:10,550
cool so very quickly before I get

00:01:08,450 --> 00:01:13,550
started I do want to put up a disclaimer

00:01:10,550 --> 00:01:17,240
which is that this talk has opinions in

00:01:13,550 --> 00:01:19,580
it it's about things that are not

00:01:17,240 --> 00:01:23,360
written down and some rule book it's

00:01:19,580 --> 00:01:25,040
about things that our community Hank the

00:01:23,360 --> 00:01:26,600
community is kind of accepted but

00:01:25,040 --> 00:01:28,790
they're not rules so they are opinions

00:01:26,600 --> 00:01:31,340
and some things are more opinionated

00:01:28,790 --> 00:01:33,800
than others and I'll warn you so you're

00:01:31,340 --> 00:01:36,670
free to disagree and it's cool if you do

00:01:33,800 --> 00:01:38,990
disagree just talk to me about it but

00:01:36,670 --> 00:01:42,290
I've been working with Ruby for like

00:01:38,990 --> 00:01:43,610
because i think is a year 7 and this is

00:01:42,290 --> 00:01:48,020
kind of what i've learned over those the

00:01:43,610 --> 00:01:51,770
seven years so what's a good ruby

00:01:48,020 --> 00:01:55,010
library and why do you care so so i

00:01:51,770 --> 00:01:56,660
asked i asked us actually many months

00:01:55,010 --> 00:01:58,730
ago I asked people like what makes up a

00:01:56,660 --> 00:02:01,040
good ruby library and i gotta i feel it

00:01:58,730 --> 00:02:03,890
a bunch of responses and in general

00:02:01,040 --> 00:02:07,190
people the most common response was it

00:02:03,890 --> 00:02:09,979
has a good api and i replace that with

00:02:07,190 --> 00:02:11,840
intuitive so they they said you know I

00:02:09,979 --> 00:02:13,250
could get to use it and it works as I

00:02:11,840 --> 00:02:15,349
expect and it does things the way I

00:02:13,250 --> 00:02:17,769
expect and when I need to do something

00:02:15,349 --> 00:02:20,360
differently it follows the same patterns

00:02:17,769 --> 00:02:22,189
and that's a pretty good answer that's

00:02:20,360 --> 00:02:25,099
that's definitely an important part of a

00:02:22,189 --> 00:02:26,359
library and this was this is I wish I

00:02:25,099 --> 00:02:27,030
had numbers but this was the vast

00:02:26,359 --> 00:02:28,770
majority

00:02:27,030 --> 00:02:32,220
responses it was like it feels right or

00:02:28,770 --> 00:02:34,890
it looks good or something like that but

00:02:32,220 --> 00:02:39,060
there's a ton of other parts involved in

00:02:34,890 --> 00:02:40,470
a library and if you've if you're a

00:02:39,060 --> 00:02:41,940
library maintainer there's I'm sure

00:02:40,470 --> 00:02:43,760
there's a lot of us in here that our

00:02:41,940 --> 00:02:46,530
library maintainer zor if you've ever

00:02:43,760 --> 00:02:48,120
planned on writing a library which if

00:02:46,530 --> 00:02:50,489
your ruby developer you probably will at

00:02:48,120 --> 00:02:52,530
some point or if you want to contribute

00:02:50,489 --> 00:02:54,450
to a library or if you even if you're

00:02:52,530 --> 00:02:56,280
just using it these are parts that

00:02:54,450 --> 00:02:59,519
you'll run into and at some point you'll

00:02:56,280 --> 00:03:01,380
wonder you know you wonder how do I do

00:02:59,519 --> 00:03:03,420
this how does the Ruby community accept

00:03:01,380 --> 00:03:04,920
this sort of thing and these are the

00:03:03,420 --> 00:03:07,709
parts are gonna talk about today so a

00:03:04,920 --> 00:03:11,100
not exhaustive list of what I'm talking

00:03:07,709 --> 00:03:13,340
about is configuration how do you how do

00:03:11,100 --> 00:03:16,980
Ruby people configure their libraries

00:03:13,340 --> 00:03:20,100
logging really important gets really

00:03:16,980 --> 00:03:22,170
strange exceptions proper exception

00:03:20,100 --> 00:03:23,580
hierarchies do I write custom exceptions

00:03:22,170 --> 00:03:25,920
do I just when do I use standard

00:03:23,580 --> 00:03:27,840
exceptions stuff like that file

00:03:25,920 --> 00:03:30,209
hierarchies so where do I put my Ruby

00:03:27,840 --> 00:03:33,530
files where'd I put certain tests what

00:03:30,209 --> 00:03:36,510
do I name the files stuff like that

00:03:33,530 --> 00:03:38,130
tests we're pretty good about tests but

00:03:36,510 --> 00:03:40,290
i'll just talk about it for completeness

00:03:38,130 --> 00:03:41,519
and and that's just a handful i'm gonna

00:03:40,290 --> 00:03:44,030
talk probably bout double those but you

00:03:41,519 --> 00:03:46,530
know etc etc etc and so if you've ever

00:03:44,030 --> 00:03:48,209
if you know it's not Ruby whenever you

00:03:46,530 --> 00:03:50,040
come to any new language and you plan on

00:03:48,209 --> 00:03:51,480
writing a library you always run into

00:03:50,040 --> 00:03:54,900
these questions what it's like i know i

00:03:51,480 --> 00:03:57,480
need to configure this library but how

00:03:54,900 --> 00:04:00,590
does this community do configuration do

00:03:57,480 --> 00:04:02,880
they do any files do they do

00:04:00,590 --> 00:04:05,250
configuration through code do they write

00:04:02,880 --> 00:04:06,840
dsl's how does it work and all of them

00:04:05,250 --> 00:04:09,840
work but what's the like community

00:04:06,840 --> 00:04:11,760
accepted idiomatic way to do it so these

00:04:09,840 --> 00:04:14,459
make up the boring parts because you

00:04:11,760 --> 00:04:16,140
never ever go to hacker news or

00:04:14,459 --> 00:04:18,299
something and see a post on the top

00:04:16,140 --> 00:04:20,100
which is like here's how I log in my

00:04:18,299 --> 00:04:21,510
library and it's like hundred of boats

00:04:20,100 --> 00:04:22,590
you never reach that but you will see

00:04:21,510 --> 00:04:26,669
you like a hundred upvote so I'm like

00:04:22,590 --> 00:04:28,919
look at this sexy API so but these parts

00:04:26,669 --> 00:04:31,380
are equally as important because they

00:04:28,919 --> 00:04:33,900
make up what is a good Ruby library if

00:04:31,380 --> 00:04:35,220
you just have a really good API it's

00:04:33,900 --> 00:04:36,990
going to be really fun to start working

00:04:35,220 --> 00:04:38,580
with it but then you run into problems

00:04:36,990 --> 00:04:39,780
and you start getting weird exceptions

00:04:38,580 --> 00:04:40,740
and you want no it's wrong so you want

00:04:39,780 --> 00:04:41,880
logging and then

00:04:40,740 --> 00:04:44,310
you're missing these other parts you

00:04:41,880 --> 00:04:46,740
suddenly have a bat library it seems

00:04:44,310 --> 00:04:49,889
good that's bad so the whole is greater

00:04:46,740 --> 00:04:51,479
than the sum of the parts so I want to

00:04:49,889 --> 00:04:53,940
talk about all these so when you work on

00:04:51,479 --> 00:04:55,860
Ruby libraries or when you interface

00:04:53,940 --> 00:04:59,610
with them you kind of know what's normal

00:04:55,860 --> 00:05:03,120
and what to expect and what to do so

00:04:59,610 --> 00:05:03,990
let's go ahead and jump right in the

00:05:03,120 --> 00:05:06,660
first one I'm just going to mention

00:05:03,990 --> 00:05:09,690
briefly isn't intuitive API it's what I

00:05:06,660 --> 00:05:12,199
touched upon earlier and into to API

00:05:09,690 --> 00:05:14,580
found generally it's just idiomatic Ruby

00:05:12,199 --> 00:05:17,699
there's a there's exceptions to this

00:05:14,580 --> 00:05:19,289
that are popular but I was a 9 out of 10

00:05:17,699 --> 00:05:21,780
more than that i would say probably like

00:05:19,289 --> 00:05:23,550
99 out of 100 libraries just follow

00:05:21,780 --> 00:05:25,080
normal Ruby and what I mean by this is

00:05:23,550 --> 00:05:27,210
like if you were to pick up a ruby book

00:05:25,080 --> 00:05:29,069
and try to learn ruby in a day which is

00:05:27,210 --> 00:05:30,539
like basic class structures basic

00:05:29,069 --> 00:05:32,460
inheritance had instantiate stuff like

00:05:30,539 --> 00:05:34,259
that you'd pretty much know how to use

00:05:32,460 --> 00:05:35,789
the library maybe you wouldn't really

00:05:34,259 --> 00:05:39,150
understand a symbol or stuff like that

00:05:35,789 --> 00:05:40,860
but you know how to use it and that in

00:05:39,150 --> 00:05:43,770
general makes up a good library if

00:05:40,860 --> 00:05:45,599
you're using decent oo principles and

00:05:43,770 --> 00:05:47,180
and it's just plain Ruby then you're

00:05:45,599 --> 00:05:49,110
going to get it it's going to be good

00:05:47,180 --> 00:05:51,509
but that's pretty much all i'm going to

00:05:49,110 --> 00:05:53,520
say about this because we experience

00:05:51,509 --> 00:05:55,110
api's every day i think in general

00:05:53,520 --> 00:05:57,990
everyone has a good understanding of

00:05:55,110 --> 00:05:59,070
what is a good and a bad api so when it

00:05:57,990 --> 00:06:00,599
comes to Ruby libraries so I'm just

00:05:59,070 --> 00:06:03,930
going to just going to leave it because

00:06:00,599 --> 00:06:07,110
I trust you guys know it the next thing

00:06:03,930 --> 00:06:09,479
is burgeoning versioning is pretty

00:06:07,110 --> 00:06:12,479
interesting so every community kind of

00:06:09,479 --> 00:06:13,860
has their own practice with how how to

00:06:12,479 --> 00:06:16,409
have version number so a version numbers

00:06:13,860 --> 00:06:19,050
mean when things are safe to upgrade or

00:06:16,409 --> 00:06:21,509
downgrade Ruby's pretty much in the past

00:06:19,050 --> 00:06:23,340
two years stabilized on one pattern and

00:06:21,509 --> 00:06:24,419
it was published by someone at github I

00:06:23,340 --> 00:06:26,759
don't know if it's published by github

00:06:24,419 --> 00:06:29,400
but someone at github I'm gonna and it's

00:06:26,759 --> 00:06:31,139
pretty much semantic versioning everyone

00:06:29,400 --> 00:06:33,030
at Ruby everyone that does ruby is

00:06:31,139 --> 00:06:35,969
pretty much converging on this and it's

00:06:33,030 --> 00:06:39,300
a good thing to follow if you write Ruby

00:06:35,969 --> 00:06:43,409
libraries at cember org they have like a

00:06:39,300 --> 00:06:45,750
huge very exhaustive detailed list of

00:06:43,409 --> 00:06:47,849
how versioning should work I'm just

00:06:45,750 --> 00:06:50,639
going to go over a detail I could go

00:06:47,849 --> 00:06:51,839
over the basics here but I think like

00:06:50,639 --> 00:06:52,960
Tom press tomorrow is giving a whole

00:06:51,839 --> 00:06:54,850
talk on

00:06:52,960 --> 00:06:58,870
versioning which sounds pretty boring

00:06:54,850 --> 00:07:00,460
but whatever so so semantic versioning

00:06:58,870 --> 00:07:04,780
is pretty simple there's three version

00:07:00,460 --> 00:07:06,370
parts it's XYZ and the three version

00:07:04,780 --> 00:07:08,259
parts are very important the first one

00:07:06,370 --> 00:07:09,610
is called major version the second one

00:07:08,259 --> 00:07:10,660
is called the minor version and the

00:07:09,610 --> 00:07:13,449
third one is called the patch version

00:07:10,660 --> 00:07:15,340
and they all have rules for how you

00:07:13,449 --> 00:07:18,460
increments them and what they mean so

00:07:15,340 --> 00:07:20,680
the major version represents backwards

00:07:18,460 --> 00:07:22,720
incompatible changes and major new

00:07:20,680 --> 00:07:23,800
functionality or major my new

00:07:22,720 --> 00:07:25,270
functionality so whenever there's

00:07:23,800 --> 00:07:28,120
there's backwards incompatible changes

00:07:25,270 --> 00:07:29,289
this version must increase whenever

00:07:28,120 --> 00:07:31,360
there's major new functionality this

00:07:29,289 --> 00:07:34,210
version must increase and a special case

00:07:31,360 --> 00:07:36,490
is the 0 and 1 if X is a zero it means

00:07:34,210 --> 00:07:38,560
it's unstable of X is a 1 or greater

00:07:36,490 --> 00:07:43,389
than it means it's reached a stable

00:07:38,560 --> 00:07:46,120
point and that's pretty much it for X Y

00:07:43,389 --> 00:07:48,460
is a minor release and it represents

00:07:46,120 --> 00:07:51,490
backwards compatible changes with

00:07:48,460 --> 00:07:53,349
functionality additions so if you add

00:07:51,490 --> 00:07:54,849
new functionality you make considerable

00:07:53,349 --> 00:07:57,780
changes to the internals but there might

00:07:54,849 --> 00:07:59,620
not be new functionality but the

00:07:57,780 --> 00:08:03,159
required point is it's backwards

00:07:59,620 --> 00:08:05,229
compatible you could up y and z is a

00:08:03,159 --> 00:08:08,770
patch release and it should be only bug

00:08:05,229 --> 00:08:11,759
fixes minor internal changes the safest

00:08:08,770 --> 00:08:15,039
thing to change if it should never break

00:08:11,759 --> 00:08:16,780
pre-existing things and pretty much

00:08:15,039 --> 00:08:19,030
everything's fallen into this this

00:08:16,780 --> 00:08:20,680
pattern I think there's a lot of a ways

00:08:19,030 --> 00:08:23,349
to do versioning like I said at the

00:08:20,680 --> 00:08:24,370
beginning disclaiming stuff there's a

00:08:23,349 --> 00:08:25,780
lot of ways to do versioning this is

00:08:24,370 --> 00:08:28,930
kind of what the Ruby community is

00:08:25,780 --> 00:08:30,580
fallen on to and it works really well it

00:08:28,930 --> 00:08:32,979
doesn't do odd-even stable unstable

00:08:30,580 --> 00:08:35,260
stuff not very many rube your libraries

00:08:32,979 --> 00:08:38,289
do that but you could it could still be

00:08:35,260 --> 00:08:41,500
semantic while you do that so semantic

00:08:38,289 --> 00:08:43,829
versioning read that doc it'll take you

00:08:41,500 --> 00:08:45,670
like 15 minutes and you'll actually

00:08:43,829 --> 00:08:47,350
you'll just feel a lot better about

00:08:45,670 --> 00:08:49,420
versioning because if its own complaints

00:08:47,350 --> 00:08:51,040
about your versioning like oh it's just

00:08:49,420 --> 00:08:56,560
this document you don't complain to him

00:08:51,040 --> 00:08:58,230
not to me but pre-releases so ruby gem

00:08:56,560 --> 00:09:01,300
supports this thing called pre-releases

00:08:58,230 --> 00:09:04,329
which you may or may not know so on top

00:09:01,300 --> 00:09:05,190
of the XYZ there could be a final thing

00:09:04,329 --> 00:09:09,900
at n which

00:09:05,190 --> 00:09:11,220
dev or pre or rcn or I think I don't I

00:09:09,900 --> 00:09:13,080
don't remember i looked at the Ruby gems

00:09:11,220 --> 00:09:15,120
code a long time ago but I think it

00:09:13,080 --> 00:09:18,750
could be any alphanumeric thing at the

00:09:15,120 --> 00:09:20,970
end and when you do that when you do gem

00:09:18,750 --> 00:09:22,110
install pre it installs that version but

00:09:20,970 --> 00:09:23,610
if you don't include the period and

00:09:22,110 --> 00:09:26,520
solves the latest non pre-release

00:09:23,610 --> 00:09:28,380
version and rails uses this for like

00:09:26,520 --> 00:09:31,650
betas and our seas and stuff like that

00:09:28,380 --> 00:09:34,800
I've used it a couple times it's kind of

00:09:31,650 --> 00:09:37,050
cool but my advice is to just use it

00:09:34,800 --> 00:09:38,460
sparingly because unless you have a huge

00:09:37,050 --> 00:09:41,130
user base where you know like people are

00:09:38,460 --> 00:09:42,720
going to install pre-releases or there's

00:09:41,130 --> 00:09:44,130
a company or something that you know

00:09:42,720 --> 00:09:46,560
wants to try some pre releasing you're

00:09:44,130 --> 00:09:48,960
not ready to go then you could use it

00:09:46,560 --> 00:09:51,960
but in general it just adds more time to

00:09:48,960 --> 00:09:53,430
your releases and and you should

00:09:51,960 --> 00:09:55,320
probably have unless you're like rails

00:09:53,430 --> 00:09:56,670
which is huge but libraries are usually

00:09:55,320 --> 00:09:58,260
fault small you should have enough faith

00:09:56,670 --> 00:10:01,050
in your tests and stuff that we'll talk

00:09:58,260 --> 00:10:02,870
about later to just release and be able

00:10:01,050 --> 00:10:05,490
to re-release and stuff like that so

00:10:02,870 --> 00:10:08,340
pre-releases are cool but don't go crazy

00:10:05,490 --> 00:10:11,940
like I think I hope that guy's not here

00:10:08,340 --> 00:10:17,100
I think mongoid I hate MongoDB put that

00:10:11,940 --> 00:10:19,680
on film but it's garbage but i think i

00:10:17,100 --> 00:10:20,940
think the I does not garbage

00:10:19,680 --> 00:10:22,260
 it's pretty cool but i think the

00:10:20,940 --> 00:10:24,210
 I'd like library went through like

00:10:22,260 --> 00:10:26,670
18 pre-releases before release and that

00:10:24,210 --> 00:10:28,560
was extremely annoying because I just

00:10:26,670 --> 00:10:29,730
wanted to use it the features and it

00:10:28,560 --> 00:10:31,830
went through like a nine-month

00:10:29,730 --> 00:10:34,530
pre-release cycle like just freaking

00:10:31,830 --> 00:10:37,620
release a thing um so yeah there's that

00:10:34,530 --> 00:10:43,460
I had you are you among going person

00:10:37,620 --> 00:10:46,260
okay yeah like death eyes looking at me

00:10:43,460 --> 00:10:50,700
it was MongoDB I'm ready I'm ready to

00:10:46,260 --> 00:10:52,890
fight okay okay dependency so that's

00:10:50,700 --> 00:10:55,110
versioning versioning is really simple

00:10:52,890 --> 00:10:56,540
and Paula has a really strict set of

00:10:55,110 --> 00:10:58,740
rules so it's pretty pretty easy to go

00:10:56,540 --> 00:11:01,410
let's talk about dependencies every

00:10:58,740 --> 00:11:04,470
library most libraries have dependencies

00:11:01,410 --> 00:11:07,890
which are other gems that you need to

00:11:04,470 --> 00:11:10,440
run my first recommendation is always

00:11:07,890 --> 00:11:12,350
have a gem file in your code so the gem

00:11:10,440 --> 00:11:14,730
file isn't use when you release the gem

00:11:12,350 --> 00:11:18,270
if you don't know everyone should know

00:11:14,730 --> 00:11:20,880
but gem file is a bundler file bun

00:11:18,270 --> 00:11:23,130
uses it and what all the jump file needs

00:11:20,880 --> 00:11:25,800
to look like is this so just says I use

00:11:23,130 --> 00:11:27,540
Ruby gems and follow the gem spec and I

00:11:25,800 --> 00:11:29,190
don't know if you know what gems heck

00:11:27,540 --> 00:11:31,230
even existed but that just says read the

00:11:29,190 --> 00:11:34,440
gem spec and put those gems in this gem

00:11:31,230 --> 00:11:36,540
file and the reason why this is cool is

00:11:34,440 --> 00:11:38,310
because anyone who's used Ruby for any

00:11:36,540 --> 00:11:39,780
amount of time for any decent amount of

00:11:38,310 --> 00:11:42,630
time is going to expect this sort of

00:11:39,780 --> 00:11:44,160
workflow with basic libraries anansi

00:11:42,630 --> 00:11:45,960
extensions pretty simple libraries which

00:11:44,160 --> 00:11:47,550
is you could clone doubt you could

00:11:45,960 --> 00:11:51,030
bundle to get all your defenses and then

00:11:47,550 --> 00:11:53,070
you could rake to run tests and bundle

00:11:51,030 --> 00:11:54,840
makes that second that second step is

00:11:53,070 --> 00:11:57,480
bundle but it makes the get dependencies

00:11:54,840 --> 00:11:59,190
part extremely easy so and it's really

00:11:57,480 --> 00:12:01,080
easy to addicts it's two lines so just

00:11:59,190 --> 00:12:02,460
include the gem file with it you can

00:12:01,080 --> 00:12:04,530
include other groups in there to like

00:12:02,460 --> 00:12:06,720
testing groups that maybe you don't want

00:12:04,530 --> 00:12:07,860
to add to the gem spec as development

00:12:06,720 --> 00:12:09,390
dependencies are something you just want

00:12:07,860 --> 00:12:11,460
to put it in the gemfile you could do

00:12:09,390 --> 00:12:13,680
that too the gem spec just says pull

00:12:11,460 --> 00:12:16,170
those in as well so that's really

00:12:13,680 --> 00:12:17,760
important I whenever I see it Jeff it's

00:12:16,170 --> 00:12:19,740
becoming more common now but like two

00:12:17,760 --> 00:12:22,140
years ago whenever I saw a gem file in a

00:12:19,740 --> 00:12:23,940
ruby library like I got all warm and

00:12:22,140 --> 00:12:28,470
fuzzy inside because I knew how to work

00:12:23,940 --> 00:12:31,170
with it more a long line of dependencies

00:12:28,470 --> 00:12:32,970
as pessimistic constraints again I think

00:12:31,170 --> 00:12:35,340
there's one of those things that we're

00:12:32,970 --> 00:12:36,990
getting to and i'm starting with things

00:12:35,340 --> 00:12:39,840
that are that are pretty common nowadays

00:12:36,990 --> 00:12:43,410
but the pessimistic constraint is also

00:12:39,840 --> 00:12:45,930
known as the operator this is the

00:12:43,410 --> 00:12:50,100
 operator I think you I think you

00:12:45,930 --> 00:12:55,010
get it so the operator is pretty

00:12:50,100 --> 00:12:57,870
cool I'm gonna say that a lot yeah so so

00:12:55,010 --> 00:12:59,910
2 i'm just going to the only time going

00:12:57,870 --> 00:13:02,760
to ask the people here who doesn't know

00:12:59,910 --> 00:13:05,570
what the operator does just a

00:13:02,760 --> 00:13:09,080
handful okay so is 0.8 point zero

00:13:05,570 --> 00:13:11,520
what it does is well what happened was

00:13:09,080 --> 00:13:13,350
let's go back in time six years ago Ruby

00:13:11,520 --> 00:13:16,080
libraries for some reason every gem

00:13:13,350 --> 00:13:17,960
depended on and open-ended greater than

00:13:16,080 --> 00:13:19,860
equal some version of a library and

00:13:17,960 --> 00:13:21,420
people realized very quickly that's a

00:13:19,860 --> 00:13:23,970
bad idea because you do greater than

00:13:21,420 --> 00:13:26,760
equals 0.1 and then zero 1.0 or 2.0

00:13:23,970 --> 00:13:28,410
comes out and it breaks everything so

00:13:26,760 --> 00:13:31,230
people very quickly started saying okay

00:13:28,410 --> 00:13:31,840
I want greater than equals 0.1 but less

00:13:31,230 --> 00:13:33,700
than zero

00:13:31,840 --> 00:13:36,730
by 2 or less than 1 point 0 because I

00:13:33,700 --> 00:13:38,290
know I know that'll work and this became

00:13:36,730 --> 00:13:40,300
so common that the spur me operator

00:13:38,290 --> 00:13:43,420
happened and the spur me operator means

00:13:40,300 --> 00:13:48,010
the spur me 0.0 is greater than equal to

00:13:43,420 --> 00:13:49,870
0.8 0 and less than zero point 9.0 so it

00:13:48,010 --> 00:13:53,380
takes the last version thing and makes

00:13:49,870 --> 00:13:57,190
that allowed to be anything and strictly

00:13:53,380 --> 00:14:01,750
less than the next middle thing so

00:13:57,190 --> 00:14:03,760
 point 8.4 is that and I guess I

00:14:01,750 --> 00:14:05,440
only did two examples so again this is

00:14:03,760 --> 00:14:06,940
if you follow semantic versioning then

00:14:05,440 --> 00:14:08,770
this works really really well because

00:14:06,940 --> 00:14:11,080
you could do something like this and you

00:14:08,770 --> 00:14:15,850
know this will never ever break your

00:14:11,080 --> 00:14:17,110
code ever and you could and that just

00:14:15,850 --> 00:14:18,190
fits into semantic versioning really

00:14:17,110 --> 00:14:20,980
well and I think that's part of the

00:14:18,190 --> 00:14:26,100
reason why we've adopted it so happily

00:14:20,980 --> 00:14:30,070
and that's all I have to say about sperm

00:14:26,100 --> 00:14:31,060
so moving on code style code smells

00:14:30,070 --> 00:14:33,580
something I don't care too much about

00:14:31,060 --> 00:14:34,570
but I don't need to say anything because

00:14:33,580 --> 00:14:37,300
you could just go to this github

00:14:34,570 --> 00:14:39,730
repository and it has it's like a two

00:14:37,300 --> 00:14:41,320
thousand follower community-driven Ruby

00:14:39,730 --> 00:14:43,690
style guide where I agree with like

00:14:41,320 --> 00:14:45,160
ninety-nine percent of what it says and

00:14:43,690 --> 00:14:49,780
they one percent doesn't matter anyway

00:14:45,160 --> 00:14:51,250
so just do that if you care like if I

00:14:49,780 --> 00:14:53,410
when I come to new languages I happen to

00:14:51,250 --> 00:14:56,140
care like I'm currently doing a lot of

00:14:53,410 --> 00:14:58,090
go stuff and I happen to care writing go

00:14:56,140 --> 00:14:59,710
programs like I hope that this style

00:14:58,090 --> 00:15:01,930
well the stuck go has a thing that

00:14:59,710 --> 00:15:03,790
doesn't automatically but like layout

00:15:01,930 --> 00:15:05,530
style stuff like that I like I hope my

00:15:03,790 --> 00:15:07,810
naming conventions are proper and stuff

00:15:05,530 --> 00:15:10,230
I glad I happen to care but honestly

00:15:07,810 --> 00:15:12,190
like don't sweat it too much because

00:15:10,230 --> 00:15:14,800
someone's going to call you an idiot and

00:15:12,190 --> 00:15:16,450
you'll eventually fix it anyway so code

00:15:14,800 --> 00:15:17,680
style doesn't really matter as long as

00:15:16,450 --> 00:15:18,820
it works and you have tests and you get

00:15:17,680 --> 00:15:22,420
all this other stuff right you're going

00:15:18,820 --> 00:15:25,090
to be fine that that's a lot to say what

00:15:22,420 --> 00:15:28,750
code saw doesn't matter file hierarchy

00:15:25,090 --> 00:15:30,790
so file are cute where do I put if I

00:15:28,750 --> 00:15:34,240
have a library any food I put it food at

00:15:30,790 --> 00:15:36,100
RB lib food RB live foo food at RB if

00:15:34,240 --> 00:15:39,370
you're a Java developer like where do I

00:15:36,100 --> 00:15:41,890
put this stuff gems and libraries

00:15:39,370 --> 00:15:44,740
actually have a super predictable file

00:15:41,890 --> 00:15:45,790
layout that is default it's all

00:15:44,740 --> 00:15:48,130
changeable but

00:15:45,790 --> 00:15:51,730
the default that people expect is are

00:15:48,130 --> 00:15:53,980
these directories so there's bin EXT lib

00:15:51,730 --> 00:15:57,070
and test test of some kind called spec

00:15:53,980 --> 00:16:01,750
that's fine but these are the default

00:15:57,070 --> 00:16:03,700
and bin contains your executable code so

00:16:01,750 --> 00:16:05,170
if your gem ships with I can execute

00:16:03,700 --> 00:16:08,860
well like rails trips with the rails

00:16:05,170 --> 00:16:11,740
command then when you call like rails it

00:16:08,860 --> 00:16:14,020
actually calls an assumable IQs herb in

00:16:11,740 --> 00:16:16,120
rails and that's a stub that looks up

00:16:14,020 --> 00:16:19,750
your actual gem they call something been

00:16:16,120 --> 00:16:21,130
rails and that's how that works so if

00:16:19,750 --> 00:16:22,750
you have code that you want to run you

00:16:21,130 --> 00:16:24,280
put that in there you generate a gem

00:16:22,750 --> 00:16:27,760
spec with bundler or something and

00:16:24,280 --> 00:16:29,530
that's just going to work it's actually

00:16:27,760 --> 00:16:30,490
all these things are configurable gem

00:16:29,530 --> 00:16:31,810
specs so you could change your live

00:16:30,490 --> 00:16:34,270
folder you could change your bin folder

00:16:31,810 --> 00:16:36,010
exta all that stuff just just don't

00:16:34,270 --> 00:16:39,130
unless you think you have a really good

00:16:36,010 --> 00:16:43,720
reason and you probably don't so just

00:16:39,130 --> 00:16:45,340
don't and EXT is for C extensions see

00:16:43,720 --> 00:16:47,800
extensions are a whole talk by itself

00:16:45,340 --> 00:16:49,720
and I'm not that good at them yet so I'm

00:16:47,800 --> 00:16:51,100
just not going to talk about it but

00:16:49,720 --> 00:16:55,810
that's where they live and that's where

00:16:51,100 --> 00:16:58,150
they go Lib is is where the code that

00:16:55,810 --> 00:17:00,880
you were your require abul code goes so

00:16:58,150 --> 00:17:03,640
when you do a require action a require

00:17:00,880 --> 00:17:06,820
ball Ruby code require will see code

00:17:03,640 --> 00:17:08,590
goes in txt so when you do a require foo

00:17:06,820 --> 00:17:12,430
it actually goes into your gem and then

00:17:08,590 --> 00:17:16,690
finds lib foo that RB that's pretty

00:17:12,430 --> 00:17:18,940
simple test has your tests and that's

00:17:16,690 --> 00:17:21,790
sometimes spec and nowadays and there's

00:17:18,940 --> 00:17:23,560
sometimes like I don't know whatever

00:17:21,790 --> 00:17:28,000
cucumber does they have some name too

00:17:23,560 --> 00:17:31,420
but yeah so that's fine but this so this

00:17:28,000 --> 00:17:32,500
file layout it's easy and you don't ever

00:17:31,420 --> 00:17:35,050
have to think about it again because you

00:17:32,500 --> 00:17:36,130
just do this and people will expect it

00:17:35,050 --> 00:17:37,660
contributors will come to your code and

00:17:36,130 --> 00:17:39,570
be able to contribute much more quickly

00:17:37,660 --> 00:17:43,270
because they know what's going on and

00:17:39,570 --> 00:17:44,410
it'll be normal it's usually a red flag

00:17:43,270 --> 00:17:46,480
when you go to library and it doesn't

00:17:44,410 --> 00:17:49,120
follow this because you're not sure

00:17:46,480 --> 00:17:50,350
you're not the whole entire trust of

00:17:49,120 --> 00:17:54,309
that person is in question

00:17:50,350 --> 00:17:56,200
no configuration so let's step away from

00:17:54,309 --> 00:17:57,400
the high level where does my code ago

00:17:56,200 --> 00:17:59,980
what does it look like thing and let's

00:17:57,400 --> 00:18:02,470
let's go into actual like how you code

00:17:59,980 --> 00:18:05,830
libraries now so the first thing is

00:18:02,470 --> 00:18:07,570
configuration ruby is really awesome

00:18:05,830 --> 00:18:10,720
because it ships with things that are

00:18:07,570 --> 00:18:12,070
opinionated and work out of the box but

00:18:10,720 --> 00:18:13,600
when you want to use it in a real way

00:18:12,070 --> 00:18:15,730
you eventually reach a point where

00:18:13,600 --> 00:18:18,640
you're going to have to turn knobs and

00:18:15,730 --> 00:18:20,169
configure things so as a library right

00:18:18,640 --> 00:18:22,960
or user you want to know how do i

00:18:20,169 --> 00:18:24,460
configure this thing the first most

00:18:22,960 --> 00:18:26,770
important thing about configuration that

00:18:24,460 --> 00:18:30,280
is want to like stress on people is make

00:18:26,770 --> 00:18:32,710
it plain Ruby so don't make a DSL for

00:18:30,280 --> 00:18:34,690
your configuration don't do like some

00:18:32,710 --> 00:18:37,929
crazy magic stuff make it just like

00:18:34,690 --> 00:18:42,460
plain plain Ruby so objects attributes

00:18:37,929 --> 00:18:46,299
stuff like that put it in a central

00:18:42,460 --> 00:18:49,330
place so don't make attribute accessors

00:18:46,299 --> 00:18:51,070
on like five classes so like yes I

00:18:49,330 --> 00:18:53,890
realize the request settings might go on

00:18:51,070 --> 00:18:55,510
the request class and the the response

00:18:53,890 --> 00:18:57,220
settings my go in a response class but

00:18:55,510 --> 00:19:00,580
just their settings so put them in one

00:18:57,220 --> 00:19:02,620
configuration place because it makes

00:19:00,580 --> 00:19:05,530
documentation easier it makes it look

00:19:02,620 --> 00:19:09,400
cleaner and it's it's easier to find as

00:19:05,530 --> 00:19:10,450
like a as a lost individual so as by

00:19:09,400 --> 00:19:12,789
central configuration I mean like

00:19:10,450 --> 00:19:14,620
something like this I happen to like

00:19:12,789 --> 00:19:16,090
this block pattern but doesn't matter as

00:19:14,620 --> 00:19:18,580
long as you do like if you have a

00:19:16,090 --> 00:19:20,260
librarian in my lib when I made this

00:19:18,580 --> 00:19:21,850
talk actually as picking on specific

00:19:20,260 --> 00:19:25,419
libraries but I decided that wasn't nice

00:19:21,850 --> 00:19:27,340
so they're all fake now so if you didn't

00:19:25,419 --> 00:19:28,750
my live like you call configure you know

00:19:27,340 --> 00:19:30,580
you're configuring that lib like it's

00:19:28,750 --> 00:19:32,679
clear to anyone who sees this you get a

00:19:30,580 --> 00:19:36,460
plain old Ruby object and the block it

00:19:32,679 --> 00:19:38,380
takes a parameter a lot of these blocks

00:19:36,460 --> 00:19:40,799
like magically instance eval the inside

00:19:38,380 --> 00:19:43,120
and get some magic like don't do that

00:19:40,799 --> 00:19:46,390
you just get a plain old object and you

00:19:43,120 --> 00:19:48,789
set things on it bad would be something

00:19:46,390 --> 00:19:50,350
like this so you have a request where

00:19:48,789 --> 00:19:52,960
you set things and response reset things

00:19:50,350 --> 00:19:55,570
and yes this makes kind of sense i guess

00:19:52,960 --> 00:19:58,090
if you could you could argue it but it's

00:19:55,570 --> 00:19:59,620
just harder to figure out where values

00:19:58,090 --> 00:20:01,960
are coming from and it's class state

00:19:59,620 --> 00:20:02,350
which is kind of a red flag for bad

00:20:01,960 --> 00:20:04,900
thing

00:20:02,350 --> 00:20:08,410
like what if you want to requests they

00:20:04,900 --> 00:20:10,059
go to different hosts you're screwed of

00:20:08,410 --> 00:20:11,380
course this is class level configuration

00:20:10,059 --> 00:20:13,630
like you want instance little

00:20:11,380 --> 00:20:15,730
configuration sometimes so that should

00:20:13,630 --> 00:20:18,039
go on initializers with option hasturs

00:20:15,730 --> 00:20:20,080
that's idiomatic and well-understood so

00:20:18,039 --> 00:20:23,110
anyone who sees this is going to know

00:20:20,080 --> 00:20:25,360
exactly what's going on if you read how

00:20:23,110 --> 00:20:29,140
to learn ruby in 24 hours then you'll

00:20:25,360 --> 00:20:33,160
know exactly how this works and a quick

00:20:29,140 --> 00:20:35,919
you know on the Amal and JSON so in

00:20:33,160 --> 00:20:39,580
general I think that libraries should

00:20:35,919 --> 00:20:42,630
use Ruby for configuration and edge

00:20:39,580 --> 00:20:45,280
facing like rails kind of faces an edge

00:20:42,630 --> 00:20:47,679
things like vagrant that are you there

00:20:45,280 --> 00:20:50,200
aren't even used by Ruby people face an

00:20:47,679 --> 00:20:52,690
edge like end user things could use

00:20:50,200 --> 00:20:55,360
things other than and ruby but all the

00:20:52,690 --> 00:20:58,780
internal glue and stuff should not worry

00:20:55,360 --> 00:21:00,760
about stuff like this just just use just

00:20:58,780 --> 00:21:02,409
use Ruby and if the edge facing things

00:21:00,760 --> 00:21:03,880
want to use the Amal then they could use

00:21:02,409 --> 00:21:04,929
the Amal and then like pastor Ruby on to

00:21:03,880 --> 00:21:08,370
the internal libraries and they're going

00:21:04,929 --> 00:21:11,140
to deal with it so don't make some I

00:21:08,370 --> 00:21:13,659
don't know I can't use an example don't

00:21:11,140 --> 00:21:17,320
make some like MongoDB library that

00:21:13,659 --> 00:21:23,650
reads the Amal because the web app could

00:21:17,320 --> 00:21:24,669
do that for you so logging logging is

00:21:23,650 --> 00:21:26,860
something I care a lot about because

00:21:24,669 --> 00:21:29,440
it's something that's been really

00:21:26,860 --> 00:21:33,880
helpful and hellish for me in vagrant

00:21:29,440 --> 00:21:35,620
for the past two years Ruby's standard

00:21:33,880 --> 00:21:38,200
library longer is actually a complete

00:21:35,620 --> 00:21:40,150
trash people whoever made the Ruby

00:21:38,200 --> 00:21:41,799
standard library lager obviously has

00:21:40,150 --> 00:21:44,260
never logged a real application in their

00:21:41,799 --> 00:21:46,960
life because it's completely useless it

00:21:44,260 --> 00:21:50,020
and it's useless for one one major

00:21:46,960 --> 00:21:52,179
reason that done spore namespaces so

00:21:50,020 --> 00:21:53,650
it's either all on are all off at a

00:21:52,179 --> 00:21:56,260
level or something I think they have

00:21:53,650 --> 00:21:58,450
levels yeah they do does either all on

00:21:56,260 --> 00:22:01,510
are all off and when you're having

00:21:58,450 --> 00:22:03,520
application that has like 50 parts that

00:22:01,510 --> 00:22:05,590
are all logging you don't want all on or

00:22:03,520 --> 00:22:07,270
off it's like I know this subsystem is

00:22:05,590 --> 00:22:09,190
working I know this one's broken I only

00:22:07,270 --> 00:22:10,450
want to see debug level from this but

00:22:09,190 --> 00:22:12,150
when you say debug level on and you're

00:22:10,450 --> 00:22:14,290
getting like megabytes the output like

00:22:12,150 --> 00:22:15,700
your program slowed down because it

00:22:14,290 --> 00:22:19,200
can't talk to standard out

00:22:15,700 --> 00:22:21,580
fast enough it's like this is garbage so

00:22:19,200 --> 00:22:25,000
incoming like super opinion my opinion

00:22:21,580 --> 00:22:27,519
is logging is really boring so you use

00:22:25,000 --> 00:22:29,710
the library that like that mimics a

00:22:27,519 --> 00:22:32,019
community that knows how to log and

00:22:29,710 --> 00:22:36,970
people that know how to log include

00:22:32,019 --> 00:22:39,279
Python and to some extent Java so like

00:22:36,970 --> 00:22:41,830
log for our is actually pretty good it's

00:22:39,279 --> 00:22:44,590
not the best library the API is kind of

00:22:41,830 --> 00:22:47,980
crappy but it has namespaces and it

00:22:44,590 --> 00:22:51,279
works so here's what log for it looks

00:22:47,980 --> 00:22:53,260
like you from a library writer point of

00:22:51,279 --> 00:22:56,440
view you create a logger my lib

00:22:53,260 --> 00:22:58,120
connection and that the double colon is

00:22:56,440 --> 00:23:01,210
a namespace I don't know why they didn't

00:22:58,120 --> 00:23:03,490
use dots everyone else uses dots but

00:23:01,210 --> 00:23:06,070
these double colons so and it's hard

00:23:03,490 --> 00:23:08,440
coded so double columns and you just

00:23:06,070 --> 00:23:10,809
blog stuff and you don't care and then a

00:23:08,440 --> 00:23:12,370
user comes along and they create a

00:23:10,809 --> 00:23:14,620
logger with the namespace they care

00:23:12,370 --> 00:23:17,230
about set output earth and levels and

00:23:14,620 --> 00:23:19,059
that like so this user is saying I want

00:23:17,230 --> 00:23:21,730
all my live namespace things to go to

00:23:19,059 --> 00:23:23,830
standard error at the info level so that

00:23:21,730 --> 00:23:26,139
information string is going to come out

00:23:23,830 --> 00:23:30,039
but everything else every other login

00:23:26,139 --> 00:23:32,529
part is going to be silent and I mean

00:23:30,039 --> 00:23:34,690
I'm a system administrator so I see like

00:23:32,529 --> 00:23:36,279
gigabytes of logs every day and if

00:23:34,690 --> 00:23:37,389
you're not able to like tune them like

00:23:36,279 --> 00:23:38,799
this or you have you don't have some

00:23:37,389 --> 00:23:42,299
tool that could tune them like this then

00:23:38,799 --> 00:23:44,799
then why do you even log I don't know

00:23:42,299 --> 00:23:46,120
but namespaces are super important so

00:23:44,799 --> 00:23:48,519
just use something with a namespace and

00:23:46,120 --> 00:23:49,899
some basic dotes or don't so this is

00:23:48,519 --> 00:23:54,220
interesting don't print a standard out

00:23:49,899 --> 00:23:56,230
of standard error I was anecdotally I

00:23:54,220 --> 00:23:59,289
don't know 99 percent of Ruby

00:23:56,230 --> 00:24:01,450
applications can not handle broken pipes

00:23:59,289 --> 00:24:03,970
and standard out standard air if you

00:24:01,450 --> 00:24:05,830
take rails or bundler and you pipe them

00:24:03,970 --> 00:24:07,210
the head they're going to crash I

00:24:05,830 --> 00:24:08,799
haven't reported this bug in either

00:24:07,210 --> 00:24:13,990
because it's so useful for when I give

00:24:08,799 --> 00:24:16,299
this talk but sorry but you pipe it the

00:24:13,990 --> 00:24:17,679
head so if for anyone who doesn't know

00:24:16,299 --> 00:24:19,360
when you pipe something ahead it like

00:24:17,679 --> 00:24:21,760
connects the pipes right or it shares

00:24:19,360 --> 00:24:23,470
the pipe and when head reads one line by

00:24:21,760 --> 00:24:25,269
default it closes the pipe because it

00:24:23,470 --> 00:24:26,679
doesn't care anymore about output then

00:24:25,269 --> 00:24:28,090
when you want to write to the pipe it

00:24:26,679 --> 00:24:31,059
says that pipes close there is

00:24:28,090 --> 00:24:33,190
I pipe air and ninety-nine percent of

00:24:31,059 --> 00:24:34,750
Ruby programs don't handle it because

00:24:33,190 --> 00:24:36,130
anytime you right to the IO you have to

00:24:34,750 --> 00:24:37,890
watch that you Pai pair so unless you're

00:24:36,130 --> 00:24:40,559
wrapping all your I oh you're screwed

00:24:37,890 --> 00:24:43,450
logger happens to be one of those things

00:24:40,559 --> 00:24:46,390
and so if you're logging standard out

00:24:43,450 --> 00:24:50,799
standard error you pipe it too I don't

00:24:46,390 --> 00:24:52,840
know a head or tail or anything that

00:24:50,799 --> 00:24:55,419
closes the pipe said grip I don't know

00:24:52,840 --> 00:25:00,070
then you're going to crash vagrant

00:24:55,419 --> 00:25:02,260
doesn't crash don't rely on the debug

00:25:00,070 --> 00:25:06,370
config option so a lot of libraries have

00:25:02,260 --> 00:25:08,049
like logging but they don't it's all on

00:25:06,370 --> 00:25:09,850
our own they don't have namespaces so

00:25:08,049 --> 00:25:11,590
they're like we have a debug option you

00:25:09,850 --> 00:25:14,919
either care about our logging or you

00:25:11,590 --> 00:25:18,100
don't and that's better than nothing but

00:25:14,919 --> 00:25:20,559
in general like logging is the only

00:25:18,100 --> 00:25:22,450
logging is a layer between something not

00:25:20,559 --> 00:25:24,880
working and forcing your user to look at

00:25:22,450 --> 00:25:25,990
your own source code logging is that

00:25:24,880 --> 00:25:28,000
layer where something's not working you

00:25:25,990 --> 00:25:29,169
know it's in this area so you want to

00:25:28,000 --> 00:25:33,309
enable logging to see what's happening

00:25:29,169 --> 00:25:35,080
in that area and if you have this debug

00:25:33,309 --> 00:25:37,260
option it outputs way too much because

00:25:35,080 --> 00:25:39,309
you're outputting stuff from things that

00:25:37,260 --> 00:25:42,760
people are probably pretty sure at that

00:25:39,309 --> 00:25:43,929
point work so you can just skip it this

00:25:42,760 --> 00:25:47,020
is also by logging is very important

00:25:43,929 --> 00:25:48,279
because it adds that buffer and don't

00:25:47,020 --> 00:25:49,570
use something custom because logging is

00:25:48,279 --> 00:25:52,390
really boring and there's things out

00:25:49,570 --> 00:25:53,830
there that work well enough unless you

00:25:52,390 --> 00:25:56,080
feel like you're going to be the

00:25:53,830 --> 00:25:57,940
superhero that fixes everything just

00:25:56,080 --> 00:25:59,770
don't worry about it just use log for

00:25:57,940 --> 00:26:01,919
our or there's a couple others that are

00:25:59,770 --> 00:26:06,880
decent out there but don't use logger

00:26:01,919 --> 00:26:11,350
don't I think that's all I have to say

00:26:06,880 --> 00:26:14,740
about logging yeah exceptions exceptions

00:26:11,350 --> 00:26:16,570
are fun without exceptions without

00:26:14,740 --> 00:26:19,390
custom exceptions you get abstraction

00:26:16,570 --> 00:26:20,830
leakage and what I mean by this so say

00:26:19,390 --> 00:26:23,289
you're writing a Twitter library and you

00:26:20,830 --> 00:26:25,330
tell Twitter to socialize and then you

00:26:23,289 --> 00:26:28,870
run it and you get this unknown socket

00:26:25,330 --> 00:26:31,570
domain socket error thing that's like

00:26:28,870 --> 00:26:35,890
obviously to us it has to use a socket

00:26:31,570 --> 00:26:37,419
under there but I don't care honestly so

00:26:35,890 --> 00:26:39,880
why do I get the socket error what does

00:26:37,419 --> 00:26:41,360
it mean in this case DNS is probably

00:26:39,880 --> 00:26:43,920
down but I don't know

00:26:41,360 --> 00:26:47,120
it's just leaking abstraction out from

00:26:43,920 --> 00:26:50,640
inside the library out to the user so

00:26:47,120 --> 00:26:52,770
library should really all if this sort

00:26:50,640 --> 00:26:55,170
of if at least in vagrant my stance as

00:26:52,770 --> 00:26:56,820
if if a library that if exception that

00:26:55,170 --> 00:26:59,970
doesn't inherit from vagrant air pops

00:26:56,820 --> 00:27:02,220
out of a vagrant then it's a bug because

00:26:59,970 --> 00:27:04,950
I'm leaking some sort of abstraction in

00:27:02,220 --> 00:27:06,570
there I take this with most libraries I

00:27:04,950 --> 00:27:08,580
don't I don't care that's a socket error

00:27:06,570 --> 00:27:11,970
just tell me how to fix it I don't I

00:27:08,580 --> 00:27:14,370
don't know what this means so single

00:27:11,970 --> 00:27:15,660
parent exception class really useful if

00:27:14,370 --> 00:27:17,150
you have a single parent exception class

00:27:15,660 --> 00:27:20,550
then you can do things like this

00:27:17,150 --> 00:27:23,040
socialize Twitter rescue any errors that

00:27:20,550 --> 00:27:24,690
Twitter knows are possible dns not being

00:27:23,040 --> 00:27:28,830
on is a very possible thing if you're a

00:27:24,690 --> 00:27:30,960
thing using sockets and then yeah you

00:27:28,830 --> 00:27:32,490
stop but if some other exception pops

00:27:30,960 --> 00:27:35,160
out of there that it's probably a bug in

00:27:32,490 --> 00:27:36,630
the Twitter client or a bug in some code

00:27:35,160 --> 00:27:40,530
that Maeby's calling back into your code

00:27:36,630 --> 00:27:43,560
you know some other thing be liberal

00:27:40,530 --> 00:27:47,520
with subclasses I think vagrant has over

00:27:43,560 --> 00:27:50,010
150 err sub classes and they're mostly

00:27:47,520 --> 00:27:51,690
just like class ends they don't have any

00:27:50,010 --> 00:27:52,980
bodies there's subclasses just to be

00:27:51,690 --> 00:27:55,830
descriptive because with descriptive

00:27:52,980 --> 00:27:57,810
subclasses you get stuff like this which

00:27:55,830 --> 00:27:59,850
is you got a Twitter connection error so

00:27:57,810 --> 00:28:03,150
failed to connect Twitter you get like a

00:27:59,850 --> 00:28:05,700
message and now i know there's maybe I

00:28:03,150 --> 00:28:08,460
should try paying Twitter maybe I should

00:28:05,700 --> 00:28:10,620
try curling it myself like it's much

00:28:08,460 --> 00:28:12,390
more clear than what a socket error

00:28:10,620 --> 00:28:13,860
could be which I guess I mean soccer

00:28:12,390 --> 00:28:16,320
it's not a great example for us will

00:28:13,860 --> 00:28:18,840
know what it is but but it could get

00:28:16,320 --> 00:28:23,760
worse than that SSH libraries get really

00:28:18,840 --> 00:28:25,110
screwed up but don't go crazy so use

00:28:23,760 --> 00:28:27,840
standard exceptions where they make

00:28:25,110 --> 00:28:31,170
sense because there's it make sense in a

00:28:27,840 --> 00:28:33,180
lot of places so if you pass if you take

00:28:31,170 --> 00:28:35,490
an option hash and you require one of

00:28:33,180 --> 00:28:39,240
those options and it's not given don't

00:28:35,490 --> 00:28:41,220
raise like a Twitter missing this option

00:28:39,240 --> 00:28:42,570
error instead just raises an

00:28:41,220 --> 00:28:46,290
argumenterror with a message because

00:28:42,570 --> 00:28:47,460
that's what what it is so we're make use

00:28:46,290 --> 00:28:48,960
it where it makes sense obviously you

00:28:47,460 --> 00:28:52,500
could claim that a socket error makes

00:28:48,960 --> 00:28:58,650
sense but but I don't think it does it's

00:28:52,500 --> 00:29:01,500
a gray area but that's that testing so

00:28:58,650 --> 00:29:04,800
testing we're all rubios so like high

00:29:01,500 --> 00:29:06,660
five were pretty good at testing which

00:29:04,800 --> 00:29:08,550
is awesome when I give this sort of I

00:29:06,660 --> 00:29:11,400
haven't but when I talked to like Python

00:29:08,550 --> 00:29:15,420
people it's the opposite it's high five

00:29:11,400 --> 00:29:16,590
your suck at testing so framework choice

00:29:15,420 --> 00:29:18,210
of the matter i don't care if use our

00:29:16,590 --> 00:29:21,540
spec or on Kirby's test unit or mini

00:29:18,210 --> 00:29:24,030
test or something else riots I don't

00:29:21,540 --> 00:29:25,320
know if there's like 80 it doesn't

00:29:24,030 --> 00:29:27,600
matter but just make it easy to run

00:29:25,320 --> 00:29:30,360
because that's all that matters so easy

00:29:27,600 --> 00:29:31,770
to run for most people is rake I think

00:29:30,360 --> 00:29:33,930
since the beginning of time just running

00:29:31,770 --> 00:29:36,210
rake his running tests is like the

00:29:33,930 --> 00:29:37,320
obvious thing if you're a more

00:29:36,210 --> 00:29:41,340
complicated project it might be like

00:29:37,320 --> 00:29:43,080
rake test unit but just rake make it

00:29:41,340 --> 00:29:44,640
easy to run and I don't care what it's

00:29:43,080 --> 00:29:46,020
written in I just want to make sure like

00:29:44,640 --> 00:29:48,210
if I'm contributing or if I'm using a

00:29:46,020 --> 00:29:51,210
library that it works and that's that's

00:29:48,210 --> 00:29:52,920
how it'll work acceptance tests

00:29:51,210 --> 00:29:54,810
something I learned really late is

00:29:52,920 --> 00:29:56,490
you'll want these I didn't add these in

00:29:54,810 --> 00:29:59,630
vagrant until two years after I started

00:29:56,490 --> 00:30:01,590
writing it and they've been amazing

00:29:59,630 --> 00:30:04,110
acceptance they're sometimes called

00:30:01,590 --> 00:30:06,450
integrate I'm like like I'm going to

00:30:04,110 --> 00:30:09,450
steal Cory Haines this thing I don't

00:30:06,450 --> 00:30:11,160
terminology I don't care what i mean by

00:30:09,450 --> 00:30:12,630
this is their end-to-end black box tests

00:30:11,160 --> 00:30:13,830
I don't know what I don't know if their

00:30:12,630 --> 00:30:15,780
acceptance or integration or what you

00:30:13,830 --> 00:30:18,360
want to call them but end and test and

00:30:15,780 --> 00:30:20,820
basically at least in the context of

00:30:18,360 --> 00:30:23,790
vagrant the way that works is it lives

00:30:20,820 --> 00:30:26,010
outside it invokes vagrants and then it

00:30:23,790 --> 00:30:27,510
asserts some world state at the end and

00:30:26,010 --> 00:30:32,190
it doesn't care what happens in the

00:30:27,510 --> 00:30:33,930
middle these are generally slow they

00:30:32,190 --> 00:30:35,190
generally test a lot of things at one

00:30:33,930 --> 00:30:38,160
time so you want unit tests for the

00:30:35,190 --> 00:30:41,250
inside but they're extremely valuable

00:30:38,160 --> 00:30:45,720
because they catch the huge like WTF

00:30:41,250 --> 00:30:48,180
errors vagrants vagrants and n tests

00:30:45,720 --> 00:30:51,000
actually take three hours to run so I

00:30:48,180 --> 00:30:53,040
don't run them almost ever but I do run

00:30:51,000 --> 00:30:54,990
them before release so at least run

00:30:53,040 --> 00:30:56,850
these slow things before release because

00:30:54,990 --> 00:30:59,790
they do catch the things like oh this

00:30:56,850 --> 00:31:03,570
entire command this entire use case is

00:30:59,790 --> 00:31:04,740
broken in some crazy way where each unit

00:31:03,570 --> 00:31:05,190
works properly but maybe I didn't

00:31:04,740 --> 00:31:08,330
integrate

00:31:05,190 --> 00:31:10,890
properly and it catches things like that

00:31:08,330 --> 00:31:15,180
so accept that that's a really useful as

00:31:10,890 --> 00:31:17,910
a I didn't know I was on this slide as a

00:31:15,180 --> 00:31:20,370
bonus use CI so CI is really awesome and

00:31:17,910 --> 00:31:23,940
see I had gotten so much easier with

00:31:20,370 --> 00:31:25,980
like Travis CI and others I happen to

00:31:23,940 --> 00:31:29,490
like Travis CI so I won't talk about the

00:31:25,980 --> 00:31:31,680
others Travis CI is free for open source

00:31:29,490 --> 00:31:34,140
and if you have closed source you want

00:31:31,680 --> 00:31:36,420
to test you should just pay them it lets

00:31:34,140 --> 00:31:38,370
you just push and they run tests and

00:31:36,420 --> 00:31:41,160
it's it runs within a sandbox so you

00:31:38,370 --> 00:31:43,290
could do whatever you can install

00:31:41,160 --> 00:31:46,470
whatever software you want you could run

00:31:43,290 --> 00:31:48,960
any tests you want it's inside a virtual

00:31:46,470 --> 00:31:50,100
machine or container so you could do

00:31:48,960 --> 00:31:55,230
whatever you want so you should use

00:31:50,100 --> 00:31:56,930
Travis a readme read means are so

00:31:55,230 --> 00:31:59,250
important that it has its own section

00:31:56,930 --> 00:32:01,380
the readme obviously is important

00:31:59,250 --> 00:32:03,120
because things like github in bitbucket

00:32:01,380 --> 00:32:05,160
have decided that they're important

00:32:03,120 --> 00:32:07,950
enough to just show you as the home page

00:32:05,160 --> 00:32:09,710
of your of your repository and so it

00:32:07,950 --> 00:32:12,000
should have important information in it

00:32:09,710 --> 00:32:14,250
and in general the information i like to

00:32:12,000 --> 00:32:15,780
keeping it is the name of the library

00:32:14,250 --> 00:32:17,480
even though it might be redundant with

00:32:15,780 --> 00:32:19,350
the repo name it's good to have it

00:32:17,480 --> 00:32:21,090
description of what it does like a high

00:32:19,350 --> 00:32:23,220
level like couple sentence description

00:32:21,090 --> 00:32:26,880
so i could even know if this is what i'm

00:32:23,220 --> 00:32:30,150
looking for basic feature breakdown so i

00:32:26,880 --> 00:32:32,040
could see like if it does say yes an SSH

00:32:30,150 --> 00:32:34,380
library does it but does that mean it

00:32:32,040 --> 00:32:37,980
also supports SFTP perhaps like I don't

00:32:34,380 --> 00:32:39,270
know so I like to see features examples

00:32:37,980 --> 00:32:41,700
are good then you could you could

00:32:39,270 --> 00:32:43,140
quickly sanity check the API to

00:32:41,700 --> 00:32:46,440
determine if this is something you want

00:32:43,140 --> 00:32:48,240
to use or not and contribution info and

00:32:46,440 --> 00:32:49,260
and basic contribution info there's you

00:32:48,240 --> 00:32:51,900
can make a contribution that

00:32:49,260 --> 00:32:53,910
contribution file for detailed stuff but

00:32:51,900 --> 00:32:57,810
basic like how do I get it out of our

00:32:53,910 --> 00:32:59,910
run tests and so on so make it read me I

00:32:57,810 --> 00:33:02,670
think github makes us like they use

00:32:59,910 --> 00:33:07,010
check a box now but get stuff like this

00:33:02,670 --> 00:33:11,070
in there because people will look for it

00:33:07,010 --> 00:33:12,990
documentation so high five your rubios

00:33:11,070 --> 00:33:15,000
you really suck at this which is the

00:33:12,990 --> 00:33:16,290
opposite for Python because they're

00:33:15,000 --> 00:33:18,509
really good at documentation but they

00:33:16,290 --> 00:33:23,219
suck at tests so we have that in verse

00:33:18,509 --> 00:33:26,820
on documentation ah it so the company I

00:33:23,219 --> 00:33:28,679
work for is a Python place so I've been

00:33:26,820 --> 00:33:31,499
doing Python for I don't do Python I'm

00:33:28,679 --> 00:33:33,199
an off skyla care but I've been looking

00:33:31,499 --> 00:33:36,539
at Python code for like two years and

00:33:33,199 --> 00:33:39,089
their documentation is so good it's so

00:33:36,539 --> 00:33:40,859
good it's ridiculous and Ruby's standard

00:33:39,089 --> 00:33:42,839
library like it might as well not even

00:33:40,859 --> 00:33:44,639
exist because half the time I'm in the

00:33:42,839 --> 00:33:47,969
Ruby mr IBM trying to figure out how

00:33:44,639 --> 00:33:50,609
things work so I wish we could get a lot

00:33:47,969 --> 00:33:51,809
better a documentation and I think one

00:33:50,609 --> 00:33:53,190
of the reasons is we don't write it from

00:33:51,809 --> 00:33:55,409
the beginning so like right

00:33:53,190 --> 00:33:57,329
documentation from the beginning we

00:33:55,409 --> 00:33:59,369
write tests from the beginning and

00:33:57,329 --> 00:34:00,779
actually the reason why Python sucks at

00:33:59,369 --> 00:34:01,919
tests is they like don't care enough to

00:34:00,779 --> 00:34:03,449
write a beginning so they try to write

00:34:01,919 --> 00:34:05,249
it later and then they think it's the

00:34:03,449 --> 00:34:06,839
worst thing ever and that sounds a lot

00:34:05,249 --> 00:34:08,399
like how I felt about documentation

00:34:06,839 --> 00:34:10,859
before I started writing it from the

00:34:08,399 --> 00:34:11,879
beginning so yeah if you read from

00:34:10,859 --> 00:34:12,929
beginning you might be writing

00:34:11,879 --> 00:34:15,329
documentation for things that you're

00:34:12,929 --> 00:34:18,179
going to remove but you usually don't

00:34:15,329 --> 00:34:20,339
remove things and at least for a while

00:34:18,179 --> 00:34:21,779
and you have it you just have the

00:34:20,339 --> 00:34:23,700
documentation done so you wrote like

00:34:21,779 --> 00:34:25,589
you're working on this library and it

00:34:23,700 --> 00:34:26,789
had does 10 things and you work on one

00:34:25,589 --> 00:34:28,109
thing at a time and then by the time

00:34:26,789 --> 00:34:31,799
you're done you're like holy crap my

00:34:28,109 --> 00:34:34,079
documentation for everything so right up

00:34:31,799 --> 00:34:36,419
in the beginning this is the next thing

00:34:34,079 --> 00:34:39,179
is super opinionated but keep the

00:34:36,419 --> 00:34:40,889
documentation with the code for API is

00:34:39,179 --> 00:34:42,359
this is a no-brainer like this is an

00:34:40,889 --> 00:34:46,109
opinion at all it just makes sense to

00:34:42,359 --> 00:34:47,849
put it on on code but for tools and like

00:34:46,109 --> 00:34:50,399
stuff like that it makes sense to just

00:34:47,849 --> 00:34:52,409
put a docs folder or something cuz that

00:34:50,399 --> 00:34:53,789
way it'll track the commits so you could

00:34:52,409 --> 00:34:56,579
like go back to tags and you have the

00:34:53,789 --> 00:34:57,900
docs at that time it makes it easier

00:34:56,579 --> 00:35:00,890
because you could commit it with your

00:34:57,900 --> 00:35:03,779
commit it kind of forces you to like

00:35:00,890 --> 00:35:05,390
commit it so like Django you probably

00:35:03,779 --> 00:35:08,279
know Django it's like rails for Python

00:35:05,390 --> 00:35:11,369
different mental paradigm but same idea

00:35:08,279 --> 00:35:14,390
web framework they don't accept any

00:35:11,369 --> 00:35:18,119
patches unless it has code tests and

00:35:14,390 --> 00:35:20,609
documentation they won't rails I think

00:35:18,119 --> 00:35:23,309
as codon tests but but Django is like

00:35:20,609 --> 00:35:26,220
definite no unless it has documentation

00:35:23,309 --> 00:35:29,609
and that is an awesome like point of

00:35:26,220 --> 00:35:32,490
view to have that sort of like dictator

00:35:29,609 --> 00:35:35,130
this only works with a giant project but

00:35:32,490 --> 00:35:37,650
but the same idea should as a mental

00:35:35,130 --> 00:35:39,840
discipline should affect you you should

00:35:37,650 --> 00:35:41,400
say I can't commit this feature unless I

00:35:39,840 --> 00:35:47,580
know that whatever I just committed is

00:35:41,400 --> 00:35:51,090
documented somewhere opinions coming API

00:35:47,580 --> 00:35:52,350
i like to use yard yard is awesome it

00:35:51,090 --> 00:35:56,040
does a lot of cool things for you like

00:35:52,350 --> 00:35:58,320
linking between methods it could read

00:35:56,040 --> 00:36:01,500
like custom dsl's you can program it to

00:35:58,320 --> 00:36:04,200
read custom dsl's to document that it's

00:36:01,500 --> 00:36:05,940
cool I know that there's github people

00:36:04,200 --> 00:36:07,770
here at the conference I don't know if

00:36:05,940 --> 00:36:09,180
there's any in here but they have like

00:36:07,770 --> 00:36:12,000
something like Tom doc and I really hate

00:36:09,180 --> 00:36:13,500
Dom doc because if we're there their

00:36:12,000 --> 00:36:15,810
argument is whole like you'll look at

00:36:13,500 --> 00:36:18,000
the code so the documentation is with

00:36:15,810 --> 00:36:19,290
the code and it's human readable but my

00:36:18,000 --> 00:36:21,450
whole thing when i'm using a library is

00:36:19,290 --> 00:36:23,100
I really really don't want to look at

00:36:21,450 --> 00:36:24,990
the code like I want the external

00:36:23,100 --> 00:36:27,630
interface to work and I don't care how

00:36:24,990 --> 00:36:29,460
it works on the inside so for that I'd

00:36:27,630 --> 00:36:34,170
rather just see api docs on a website

00:36:29,460 --> 00:36:36,000
that i could click around other stuff if

00:36:34,170 --> 00:36:37,500
you have like a tool or you have if you

00:36:36,000 --> 00:36:39,060
want a full website and that's not api

00:36:37,500 --> 00:36:40,950
docs i recommend just like mark down in

00:36:39,060 --> 00:36:43,050
jekyll or there's really awesome jekyll

00:36:40,950 --> 00:36:44,970
alternatives nowadays I'm like middleman

00:36:43,050 --> 00:36:46,470
and stuff but I just recommend like some

00:36:44,970 --> 00:36:50,940
static site generator and keep it with

00:36:46,470 --> 00:36:53,210
the code and and do that there so those

00:36:50,940 --> 00:36:55,970
are my opinions for those things the

00:36:53,210 --> 00:36:58,970
last thing I think it's the last thing

00:36:55,970 --> 00:37:00,720
support so this is this a weird thing

00:36:58,970 --> 00:37:01,890
people don't usually think about this

00:37:00,720 --> 00:37:03,840
when they make a library but if you make

00:37:01,890 --> 00:37:06,090
a library and you just like put it on

00:37:03,840 --> 00:37:07,619
just like pushing your code to github

00:37:06,090 --> 00:37:11,609
and clicking the open source button is

00:37:07,619 --> 00:37:13,290
not is not that useful because like in

00:37:11,609 --> 00:37:15,450
my point of view on support of code is

00:37:13,290 --> 00:37:18,480
not really open source it's just like a

00:37:15,450 --> 00:37:19,530
reference manual if I see if I see codes

00:37:18,480 --> 00:37:21,119
been pushed and I don't see a way to

00:37:19,530 --> 00:37:24,210
submit issues but I don't see a way to

00:37:21,119 --> 00:37:25,980
talk to the maintainer like I've never

00:37:24,210 --> 00:37:28,080
used the library in any production

00:37:25,980 --> 00:37:31,230
environment for years and not found a

00:37:28,080 --> 00:37:32,670
bug with it I even at the low level like

00:37:31,230 --> 00:37:34,680
in the past three weeks I found about

00:37:32,670 --> 00:37:36,060
what Lib C I found a kernel bug and i

00:37:34,680 --> 00:37:39,270
found an erlang runtime bug like

00:37:36,060 --> 00:37:40,890
everything has bugs and and if you have

00:37:39,270 --> 00:37:43,260
no way to report these bugs then you're

00:37:40,890 --> 00:37:44,490
not going it's not useful at all might

00:37:43,260 --> 00:37:45,330
as well just write it yourself because

00:37:44,490 --> 00:37:45,550
then you're going to understand the

00:37:45,330 --> 00:37:47,890
whole

00:37:45,550 --> 00:37:51,160
system and you'll know it but don't

00:37:47,890 --> 00:37:52,120
don't write it yourself so support your

00:37:51,160 --> 00:37:54,100
code and that doesn't mean you need to

00:37:52,120 --> 00:37:56,530
sit online every day and answer every

00:37:54,100 --> 00:37:57,730
issue yourself for every IRC message

00:37:56,530 --> 00:38:00,540
yourself you don't have to do that just

00:37:57,730 --> 00:38:03,490
just it doesn't have to equal work

00:38:00,540 --> 00:38:06,040
mostly you just need some way some

00:38:03,490 --> 00:38:08,230
channel that is one channel or you know

00:38:06,040 --> 00:38:10,060
a couple to get support so that means

00:38:08,230 --> 00:38:12,940
make an IRC channel and tell people

00:38:10,060 --> 00:38:14,290
about it make a mailing list maybe

00:38:12,940 --> 00:38:16,210
you'll never post it but at least

00:38:14,290 --> 00:38:19,060
everyone who uses your library has one

00:38:16,210 --> 00:38:22,300
central place to talk about it just do

00:38:19,060 --> 00:38:23,500
something like that so when you have all

00:38:22,300 --> 00:38:26,890
these things you finally put them

00:38:23,500 --> 00:38:29,530
together you end up with a really great

00:38:26,890 --> 00:38:31,150
Ruby library I guess you could probably

00:38:29,530 --> 00:38:32,890
say great live for any language but I

00:38:31,150 --> 00:38:34,090
know Ruby so the end up with a really

00:38:32,890 --> 00:38:35,820
great Ruby library you kind of like

00:38:34,090 --> 00:38:38,140
cover it across the spectrum on on

00:38:35,820 --> 00:38:40,240
configuration logging if things go wrong

00:38:38,140 --> 00:38:42,330
test if things go really wrong and you

00:38:40,240 --> 00:38:44,170
need to like contribute back to it

00:38:42,330 --> 00:38:46,450
support you know you're pretty much

00:38:44,170 --> 00:38:48,340
covered across the board so these are

00:38:46,450 --> 00:38:51,370
the boring things and I hope it didn't

00:38:48,340 --> 00:38:53,500
bore you too much but their questions I

00:38:51,370 --> 00:38:57,250
would come up anyway so thank you and

00:38:53,500 --> 00:39:00,360
I'll take questions I have a two minutes

00:38:57,250 --> 00:39:07,190
if my 1-minute lateness didn't count

00:39:00,360 --> 00:39:10,319
cool any questions back there

00:39:07,190 --> 00:39:12,119
what huh that's good I don't two minutes

00:39:10,319 --> 00:39:15,720
can't talk about my hate with so

00:39:12,119 --> 00:39:17,849
oh I'll talk to you after but I'll like

00:39:15,720 --> 00:39:20,099
I have references to the seaside I've

00:39:17,849 --> 00:39:23,490
referenced the code we're like complete

00:39:20,099 --> 00:39:25,559
idiocy happens and like memory mapping

00:39:23,490 --> 00:39:27,119
100 gigabytes into memory and like being

00:39:25,559 --> 00:39:30,300
like oh the criminal will handle it is

00:39:27,119 --> 00:39:32,040
like not how databases work so I'll

00:39:30,300 --> 00:39:34,260
reference like I'll give you papers from

00:39:32,040 --> 00:39:38,369
the 60s it's all wrong it's never going

00:39:34,260 --> 00:39:42,109
to work it's you're gonna have a bad

00:39:38,369 --> 00:39:42,109
night okay question yeah

00:39:45,080 --> 00:39:49,400
hot such a good question that's a really

00:39:47,550 --> 00:39:56,760
good question that I didn't think of a

00:39:49,400 --> 00:39:58,140
really good library oh god no there's a

00:39:56,760 --> 00:39:59,850
lot of good libraries out there but put

00:39:58,140 --> 00:40:01,410
on the spot I don't know I'll think

00:39:59,850 --> 00:40:07,490
about it they tweet about it or

00:40:01,410 --> 00:40:07,490
something yeah any other questions yeah

00:40:12,970 --> 00:40:17,950
what I talk what like some of the things

00:40:15,799 --> 00:40:17,950
I said

00:40:22,569 --> 00:40:27,440
yeah it's a the biggest part is logging

00:40:24,740 --> 00:40:29,359
I didn't even have logging until like a

00:40:27,440 --> 00:40:30,950
year ago and it's been amazing to have

00:40:29,359 --> 00:40:32,630
it but then I did logging too verbose

00:40:30,950 --> 00:40:35,329
Lee I basically had an on/off switch and

00:40:32,630 --> 00:40:37,069
not namespaces so when there was a bug

00:40:35,329 --> 00:40:41,839
VI co attach the log and then the log

00:40:37,069 --> 00:40:43,790
would end up being like 30,000 lines um

00:40:41,839 --> 00:40:46,549
and I couldn't find the spot that was

00:40:43,790 --> 00:40:49,010
wrong so I've added log levels name

00:40:46,549 --> 00:40:51,230
spacing and usually a few back and forth

00:40:49,010 --> 00:40:53,299
the people telling them where to

00:40:51,230 --> 00:40:54,829
namespace things and you know because a

00:40:53,299 --> 00:40:56,299
lot of the bigger bugs I can't reproduce

00:40:54,829 --> 00:40:58,670
on my machine because it's like oh this

00:40:56,299 --> 00:41:00,619
is failing when my hostess fedora and my

00:40:58,670 --> 00:41:02,660
guest happens to be this specific

00:41:00,619 --> 00:41:04,730
version of ubuntu so i can't reproduce

00:41:02,660 --> 00:41:06,230
it so I I send them basically code or

00:41:04,730 --> 00:41:07,970
I'm just like yo this enables these

00:41:06,230 --> 00:41:09,500
namespaces and stuff send me the output

00:41:07,970 --> 00:41:11,540
and a few back and force and I could

00:41:09,500 --> 00:41:15,140
usually track down the bug much better

00:41:11,540 --> 00:41:16,970
than 30,000 lines of output yeah but

00:41:15,140 --> 00:41:18,710
other than that I would say I haven't

00:41:16,970 --> 00:41:20,569
been bitten really hard but I definitely

00:41:18,710 --> 00:41:23,319
been bitten by every one of these at

00:41:20,569 --> 00:41:23,319
some point of the other

00:41:27,269 --> 00:41:29,779
some of us

00:41:33,420 --> 00:41:36,420
people

00:41:43,599 --> 00:41:49,369
I mean that yeah if your project gets

00:41:47,810 --> 00:41:51,920
that big but if you have like the

00:41:49,369 --> 00:41:53,359
mailing list like at this point I rarely

00:41:51,920 --> 00:41:55,040
respond I didn't mention this in the

00:41:53,359 --> 00:41:56,180
talk but I rarely respond to the vagrant

00:41:55,040 --> 00:41:58,310
mailing list I actually cheat a little

00:41:56,180 --> 00:42:00,859
bit i have my mailing list for vagrant

00:41:58,310 --> 00:42:02,480
hooked up to salesforce and it only

00:42:00,859 --> 00:42:05,540
notifies me of emails that don't have a

00:42:02,480 --> 00:42:07,070
response within two weeks so i actually

00:42:05,540 --> 00:42:08,630
don't see any mailing list messages

00:42:07,070 --> 00:42:10,010
unless they're unresponsive for two

00:42:08,630 --> 00:42:11,540
weeks and that's just because they

00:42:10,010 --> 00:42:12,890
reached the point where i was spending

00:42:11,540 --> 00:42:15,290
so much time on the mailing list that i

00:42:12,890 --> 00:42:17,240
wasn't able to work on my project and at

00:42:15,290 --> 00:42:19,670
this point like so many people help on

00:42:17,240 --> 00:42:21,619
the bigger man unless correctly that i

00:42:19,670 --> 00:42:24,050
don't care about it I mean I care about

00:42:21,619 --> 00:42:26,030
it but it just handles itself which is

00:42:24,050 --> 00:42:31,609
really awesome so I'd say I would hope

00:42:26,030 --> 00:42:33,320
that happens yeah anything else good I

00:42:31,609 --> 00:42:35,440
am over the time so I'm done so thank

00:42:33,320 --> 00:42:35,440
you

00:42:47,640 --> 00:42:49,700

YouTube URL: https://www.youtube.com/watch?v=rUuee8E5Yk4


