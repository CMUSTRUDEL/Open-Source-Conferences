Title: Aloha Ruby Conf 2012 - Keynote - Rails 4 and the Future of Web by Aaron Patterson
Publication date: 2020-01-28
Playlist: Aloha RubyConf 2012
Description: 
	What's new in Rails 4? How does Rails 4 fit in to the future of web development? Why are cats so important to the development of Ruby and Rails? All these questions and more will be answered if you attend this talk. Seats are limited, so act now!

core presentation starts at 7:18, intro and humor proceed it.
Captions: 
	00:00:14,660 --> 00:00:19,770
all right so yesterday I got to look

00:00:17,490 --> 00:00:22,140
around our Twitter account and see what

00:00:19,770 --> 00:00:24,540
was going on I saw some speakers doing

00:00:22,140 --> 00:00:26,910
some last-minute beach time slide

00:00:24,540 --> 00:00:28,680
updating I talked to some speakers they

00:00:26,910 --> 00:00:30,750
hadn't updated any of their slides or

00:00:28,680 --> 00:00:32,369
looked at it in their slides I talked to

00:00:30,750 --> 00:00:33,930
one speaker who freaked out that he

00:00:32,369 --> 00:00:36,180
thought if session was 30 minutes long

00:00:33,930 --> 00:00:37,920
and didn't know what to do and

00:00:36,180 --> 00:00:40,920
apparently instead of cutting down

00:00:37,920 --> 00:00:42,809
slides he was adding more slides I'm not

00:00:40,920 --> 00:00:44,640
sure that really works out very well but

00:00:42,809 --> 00:00:49,859
I did run into something special from

00:00:44,640 --> 00:00:51,839
our keynote speaker mr. Patterson so I

00:00:49,859 --> 00:00:56,429
was wondering what this meant and what

00:00:51,839 --> 00:00:58,859
we could really do about this so I'm

00:00:56,429 --> 00:01:03,539
guessing he must really want spam or

00:00:58,859 --> 00:01:04,980
he's a really big fan of spam so what's

00:01:03,539 --> 00:01:11,159
the situation here did you get to eat

00:01:04,980 --> 00:01:14,120
spam yet oh that's great because we have

00:01:11,159 --> 00:01:14,120
one for you right here

00:01:19,759 --> 00:01:32,810
if you can come on up and I'll give you

00:01:22,340 --> 00:01:34,270
this family city awesome thank you thank

00:01:32,810 --> 00:01:42,110
you

00:01:34,270 --> 00:01:45,969
yes spam this is Hawaii we can't let you

00:01:42,110 --> 00:01:45,969
come here and not leave without spam

00:01:47,289 --> 00:01:55,610
alright who's ready for day one who here

00:01:54,289 --> 00:02:02,349
wants me to get off stage and let this

00:01:55,610 --> 00:02:05,509
guy talk alright let's do that okay so

00:02:02,349 --> 00:02:08,090
I'm going to talk about rails 4 and the

00:02:05,509 --> 00:02:14,180
future or as I like to call it rails 4

00:02:08,090 --> 00:02:15,650
for you and me I was told so I was told

00:02:14,180 --> 00:02:17,810
that you're not supposed to introduce

00:02:15,650 --> 00:02:21,530
yourself when you're giving keynotes but

00:02:17,810 --> 00:02:23,510
I'm not very good at at speaking so I'm

00:02:21,530 --> 00:02:26,389
not gonna tell you my name is Aaron

00:02:23,510 --> 00:02:28,790
Patterson and if you want to follow me

00:02:26,389 --> 00:02:30,739
on Twitter you can so I'm just for the

00:02:28,790 --> 00:02:32,959
record I'm not telling you this stuff ok

00:02:30,739 --> 00:02:36,200
I'm not introducing myself I just want

00:02:32,959 --> 00:02:38,810
to say hi to everyone first I got to

00:02:36,200 --> 00:02:41,450
start out and say thanks to some people

00:02:38,810 --> 00:02:43,639
well I gotta say thanks to my employer

00:02:41,450 --> 00:02:46,310
18t without them I wouldn't be here so

00:02:43,639 --> 00:02:48,859
thank you I also want to thank the

00:02:46,310 --> 00:02:50,480
conference organizers for having a

00:02:48,859 --> 00:02:52,579
conference in a really awesome place

00:02:50,480 --> 00:02:55,220
I've never been to Hawaii before this is

00:02:52,579 --> 00:02:58,130
my first time so I'm I'm super excited

00:02:55,220 --> 00:03:01,389
and the reason I'm really excited about

00:02:58,130 --> 00:03:05,209
it is because I love I love spam so

00:03:01,389 --> 00:03:08,420
thank you thank you also my my favorite

00:03:05,209 --> 00:03:11,420
TV shows are here like Dog the Bounty

00:03:08,420 --> 00:03:13,040
Hunter I really like I was looking

00:03:11,420 --> 00:03:16,010
around for Dog the Bounty Hunter last

00:03:13,040 --> 00:03:19,549
night I couldn't find him and also like

00:03:16,010 --> 00:03:21,610
magnum p.i a love magnum p.i as you can

00:03:19,549 --> 00:03:24,340
see by my moustache

00:03:21,610 --> 00:03:26,260
and if you don't believe me that I love

00:03:24,340 --> 00:03:32,410
magnum p.i you can see like I named my

00:03:26,260 --> 00:03:35,440
computers after magnum p.i character so

00:03:32,410 --> 00:03:37,990
I I wanted to tell you I was so I was

00:03:35,440 --> 00:03:41,230
flying down you know flying here to

00:03:37,990 --> 00:03:43,360
Hawaii and I had to go to the bathroom I

00:03:41,230 --> 00:03:45,070
was on the plane and the guy in the same

00:03:43,360 --> 00:03:47,790
row on my left also had to go to the

00:03:45,070 --> 00:03:50,410
bathroom so he went he went first and

00:03:47,790 --> 00:03:52,270
then he came back and I went over to the

00:03:50,410 --> 00:03:54,250
bathroom and I I got there and I looked

00:03:52,270 --> 00:03:56,920
at it on the floor there was a there was

00:03:54,250 --> 00:03:58,360
a five dollar bill on the floor like

00:03:56,920 --> 00:03:59,860
right in front of the bathroom so I was

00:03:58,360 --> 00:04:02,020
like well he must have he must have

00:03:59,860 --> 00:04:04,210
dropped this money so I pick up the bill

00:04:02,020 --> 00:04:06,130
go back to his seat give him the money

00:04:04,210 --> 00:04:10,890
and I'm like hey you must you must have

00:04:06,130 --> 00:04:13,360
dropped us so I go to the bathroom and

00:04:10,890 --> 00:04:15,340
come back and they're collecting

00:04:13,360 --> 00:04:16,840
donations on the aircraft for like

00:04:15,340 --> 00:04:19,510
breast cancer awareness and if you

00:04:16,840 --> 00:04:22,480
donate money then they enter you into a

00:04:19,510 --> 00:04:25,030
raffle and you can win like you can win

00:04:22,480 --> 00:04:27,460
some prizes on the airplane so I sit

00:04:25,030 --> 00:04:30,490
down and the guy says to me he says he

00:04:27,460 --> 00:04:32,350
this isn't mine I didn't drop this and I

00:04:30,490 --> 00:04:34,060
was like okay well it's not mine either

00:04:32,350 --> 00:04:36,550
and he's like why don't you donate it to

00:04:34,060 --> 00:04:38,710
the you know why don't you donate it to

00:04:36,550 --> 00:04:40,840
the raffle thing so I said okay that's

00:04:38,710 --> 00:04:43,000
that's a great idea don't know who's

00:04:40,840 --> 00:04:45,070
minuses we'll put it to a good cause so

00:04:43,000 --> 00:04:47,830
I donated it figuring well I'm not gonna

00:04:45,070 --> 00:04:49,600
win any prizes it's just gonna get

00:04:47,830 --> 00:04:55,300
donated so that'll be great and then of

00:04:49,600 --> 00:04:57,010
course I win and I was also the first

00:04:55,300 --> 00:04:59,169
one to choose the prize like I could

00:04:57,010 --> 00:05:01,419
have chosen a bottle of champagne or

00:04:59,169 --> 00:05:02,950
like chocolates are all this stuff and I

00:05:01,419 --> 00:05:07,000
didn't know what to do cuz it wasn't my

00:05:02,950 --> 00:05:08,560
money I picked I picked chocolates but

00:05:07,000 --> 00:05:10,740
now I feel like there's an imbalance in

00:05:08,560 --> 00:05:11,980
the world like I have these illegal

00:05:10,740 --> 00:05:14,200
chocolates

00:05:11,980 --> 00:05:15,790
I shouldn't have them so I don't know

00:05:14,200 --> 00:05:18,910
what to do with them so I I think I'm

00:05:15,790 --> 00:05:22,930
just gonna eat them in my hotel room and

00:05:18,910 --> 00:05:27,220
not tell anybody that I want but I guess

00:05:22,930 --> 00:05:28,600
it's too late now anyway umm I don't

00:05:27,220 --> 00:05:30,070
know if you can tell this but I am

00:05:28,600 --> 00:05:31,750
insanely nervous on the stage

00:05:30,070 --> 00:05:36,010
and one of the things that I have to do

00:05:31,750 --> 00:05:37,810
to comfort myself is I told a friend of

00:05:36,010 --> 00:05:38,290
mine well I get super nervous what

00:05:37,810 --> 00:05:40,840
should I do

00:05:38,290 --> 00:05:42,460
I love speaking but I am so nervous on

00:05:40,840 --> 00:05:45,460
stage what should I do about it and he

00:05:42,460 --> 00:05:47,110
said to me well when you're on stage you

00:05:45,460 --> 00:05:49,840
just need to think to yourself what

00:05:47,110 --> 00:05:51,730
would Freddie Mercury do so every time I

00:05:49,840 --> 00:05:53,470
give a talk I put this up and I try to

00:05:51,730 --> 00:05:57,250
think to myself what would Freddie

00:05:53,470 --> 00:06:00,100
Mercury do now most speakers like most

00:05:57,250 --> 00:06:01,660
speakers think well it's common

00:06:00,100 --> 00:06:03,790
knowledge just imagine the entire

00:06:01,660 --> 00:06:05,890
imagine the entire audiences in their

00:06:03,790 --> 00:06:07,930
underwear well actually for me it's the

00:06:05,890 --> 00:06:10,090
opposite I imagine that I'm on stage in

00:06:07,930 --> 00:06:14,830
my underwear I figure that's what

00:06:10,090 --> 00:06:17,080
Freddie Mercury would do anyway I also

00:06:14,830 --> 00:06:19,780
want to tell you I have a cat and his

00:06:17,080 --> 00:06:23,380
name is Gorbachev puff-puff thunderhorse

00:06:19,780 --> 00:06:25,720
that's his full legal name we call him

00:06:23,380 --> 00:06:30,400
we call him Gorby puff though and I love

00:06:25,720 --> 00:06:32,530
him a lot like I love him a lot and I

00:06:30,400 --> 00:06:34,000
thought like he's the first cat I've

00:06:32,530 --> 00:06:37,360
owned and I thought like owning a cat

00:06:34,000 --> 00:06:39,250
you know it's gonna be like 99% fun in

00:06:37,360 --> 00:06:43,060
the Sun we're gonna go like riding bikes

00:06:39,250 --> 00:06:45,910
together like get ice cream you know

00:06:43,060 --> 00:06:47,110
swing and go swing in the park and do

00:06:45,910 --> 00:06:49,930
all the stuff but it turns out that

00:06:47,110 --> 00:06:53,080
basically 99% of the time he's sleeping

00:06:49,930 --> 00:06:54,820
so I tried to take pictures of him but

00:06:53,080 --> 00:06:57,010
the only pictures I can ever get are

00:06:54,820 --> 00:07:00,010
like him yawning like he's about to go

00:06:57,010 --> 00:07:06,250
to sleep all the time and it just kills

00:07:00,010 --> 00:07:07,810
me I like so we never get to go bike

00:07:06,250 --> 00:07:09,610
riding together but anyway if you want

00:07:07,810 --> 00:07:16,810
to see more pictures of him yawning you

00:07:09,610 --> 00:07:18,970
can follow him on Twitter so alright so

00:07:16,810 --> 00:07:21,610
we're gonna talk about rails for for you

00:07:18,970 --> 00:07:23,410
and me we're gonna look at some features

00:07:21,610 --> 00:07:27,180
of rails 4 and we're gonna talk a little

00:07:23,410 --> 00:07:29,800
bit about the future of the web now

00:07:27,180 --> 00:07:34,900
despite my looks I'm not a television

00:07:29,800 --> 00:07:36,670
psychic so I can't tell you exactly

00:07:34,900 --> 00:07:38,560
what's gonna happen in the future but I

00:07:36,670 --> 00:07:40,419
can talk about where I think it's going

00:07:38,560 --> 00:07:42,849
and basically the point of this talk is

00:07:40,419 --> 00:07:45,669
to get you guys get ideas

00:07:42,849 --> 00:07:47,469
blowing in you know among you guys talk

00:07:45,669 --> 00:07:50,409
about where I think we're going and then

00:07:47,469 --> 00:07:51,869
hopefully have you guys you know pick up

00:07:50,409 --> 00:07:55,689
the ball and run with it

00:07:51,869 --> 00:07:58,360
so what we're gonna do is we're gonna

00:07:55,689 --> 00:08:00,550
look at some behaviors in Ruby and then

00:07:58,360 --> 00:08:03,819
we're gonna look at some changes in

00:08:00,550 --> 00:08:06,159
rails and then we're gonna look at how

00:08:03,819 --> 00:08:08,740
these changes in rails interact with the

00:08:06,159 --> 00:08:10,659
web so we're gonna start pretty close to

00:08:08,740 --> 00:08:15,009
the server and then move our way out to

00:08:10,659 --> 00:08:18,629
the client so the first thing I want to

00:08:15,009 --> 00:08:22,089
talk about is concurrency in Ruby or

00:08:18,629 --> 00:08:23,619
parallelization and I like to I like to

00:08:22,089 --> 00:08:27,189
shorten this down but I'm not super good

00:08:23,619 --> 00:08:29,080
at spelling so I it's P 56 n that's how

00:08:27,189 --> 00:08:33,729
I shorten it up it's possibly misspelled

00:08:29,080 --> 00:08:35,620
I'm not sure and I know most of you most

00:08:33,729 --> 00:08:38,259
of you probably know about this or at

00:08:35,620 --> 00:08:41,979
least at least heard about this the MRI

00:08:38,259 --> 00:08:46,829
has a Gil or what is known as a global

00:08:41,979 --> 00:08:49,779
interpreter lock and this lock prevents

00:08:46,829 --> 00:08:51,399
concurrent CPU execution so what that

00:08:49,779 --> 00:08:54,130
means practically is that we can't

00:08:51,399 --> 00:08:56,709
schedule two threads on to to run on two

00:08:54,130 --> 00:08:59,019
different CPUs at the same time so if

00:08:56,709 --> 00:09:01,089
you want to have an interpreter that's

00:08:59,019 --> 00:09:04,329
able to do that I suggest you look at

00:09:01,089 --> 00:09:05,589
alternatives such as JRuby or Rubinius

00:09:04,329 --> 00:09:11,110
these are guilt-free

00:09:05,589 --> 00:09:14,620
guilt-free alternatives but I want to

00:09:11,110 --> 00:09:16,329
share some good news and where is where

00:09:14,620 --> 00:09:21,250
is Charlie is he here

00:09:16,329 --> 00:09:23,290
no he's not jerk okay anyway I want to

00:09:21,250 --> 00:09:26,139
share some good news with you the Gil

00:09:23,290 --> 00:09:28,660
was removed in one night okay so we can

00:09:26,139 --> 00:09:31,000
be we can be super happy about that but

00:09:28,660 --> 00:09:32,740
um I also want to share some bad news

00:09:31,000 --> 00:09:37,360
with you next is that the Gil was

00:09:32,740 --> 00:09:39,639
replaced with a GDL which is exactly the

00:09:37,360 --> 00:09:44,139
same thing it just has a V instead of an

00:09:39,639 --> 00:09:46,720
I so if you go read the source code to

00:09:44,139 --> 00:09:50,709
1:9 you'll see many references to GDL

00:09:46,720 --> 00:09:54,010
and that's what that is so you know this

00:09:50,709 --> 00:09:56,480
this leads to the question well is MRI

00:09:54,010 --> 00:10:00,650
useless for p32 n

00:09:56,480 --> 00:10:02,960
and I mean obviously obviously gets it's

00:10:00,650 --> 00:10:06,530
useless your programs don't actually

00:10:02,960 --> 00:10:08,060
work it just seems like they work I mean

00:10:06,530 --> 00:10:09,020
I don't know like I don't know if there

00:10:08,060 --> 00:10:10,820
is really too much

00:10:09,020 --> 00:10:12,560
too much of a difference to be made like

00:10:10,820 --> 00:10:14,060
if if your program seems like it's

00:10:12,560 --> 00:10:15,440
working does that mean it's actually

00:10:14,060 --> 00:10:17,570
working I think this is a question

00:10:15,440 --> 00:10:18,440
probably left for philosophers people

00:10:17,570 --> 00:10:22,490
smarter than me

00:10:18,440 --> 00:10:24,470
but um anyway let's I want what I want

00:10:22,490 --> 00:10:27,050
to do is I want to take a look at the

00:10:24,470 --> 00:10:28,730
impact of the GPL or an MRI and see you

00:10:27,050 --> 00:10:32,480
like see what that means to us in our

00:10:28,730 --> 00:10:36,740
day to day Ruby basis and the thing that

00:10:32,480 --> 00:10:39,350
I like to use for looking at how the GPL

00:10:36,740 --> 00:10:41,480
impacts MRI is the use of the Fibonacci

00:10:39,350 --> 00:10:44,270
sequence and the reason I like to do

00:10:41,480 --> 00:10:46,490
this is because I used to work in I used

00:10:44,270 --> 00:10:47,810
to work in online advertising I don't

00:10:46,490 --> 00:10:49,250
know if any of you guys have worked in

00:10:47,810 --> 00:10:51,350
online advertising but online

00:10:49,250 --> 00:10:53,810
advertising is basically all about doing

00:10:51,350 --> 00:10:57,200
Fibonacci sequence calculations so

00:10:53,810 --> 00:11:06,080
that's like that's how they decide what

00:10:57,200 --> 00:11:11,720
ads to show to you so of course how many

00:11:06,080 --> 00:11:13,700
lies if I'm telling its presentation so

00:11:11,720 --> 00:11:15,230
of course I like to use this in all of

00:11:13,700 --> 00:11:19,190
my benchmarks because of online

00:11:15,230 --> 00:11:20,780
advertising so all right run this on my

00:11:19,190 --> 00:11:25,340
machine notice that says Hagen's

00:11:20,780 --> 00:11:28,220
I'm not lying about the magnum p.i I run

00:11:25,340 --> 00:11:28,870
this and it takes about 5.7 seconds on

00:11:28,220 --> 00:11:32,390
my machine

00:11:28,870 --> 00:11:36,980
ok so we're like oh this sucks I need to

00:11:32,390 --> 00:11:38,990
be able to deliver ads faster so I'm

00:11:36,980 --> 00:11:41,270
gonna calculate my Fibonacci sequences

00:11:38,990 --> 00:11:44,150
in threads so I've got I've got four

00:11:41,270 --> 00:11:45,860
CPUs on my machine so I'll throw up four

00:11:44,150 --> 00:11:48,860
threads here and calculate the Fibonacci

00:11:45,860 --> 00:11:52,880
sequence hopefully all of them in

00:11:48,860 --> 00:11:55,630
parallel and then I run this and it

00:11:52,880 --> 00:11:58,340
takes exactly the same amount of time

00:11:55,630 --> 00:12:01,340
like just about the same amount of time

00:11:58,340 --> 00:12:04,190
and the reason is because time spent in

00:12:01,340 --> 00:12:07,260
the VM can't be done in parallel so

00:12:04,190 --> 00:12:10,650
hence it's called a GPL or global the

00:12:07,260 --> 00:12:12,390
walk so anytime whenever we're spending

00:12:10,650 --> 00:12:15,990
time in the virtual machine that can't

00:12:12,390 --> 00:12:20,520
be executed in parallel so what do we do

00:12:15,990 --> 00:12:22,410
about this things to fix this our people

00:12:20,520 --> 00:12:23,610
will use JRuby rubinius if they want to

00:12:22,410 --> 00:12:26,370
actually have threads scheduled on

00:12:23,610 --> 00:12:27,840
multiple CPUs but very common is what

00:12:26,370 --> 00:12:29,340
people will do is just use multiple

00:12:27,840 --> 00:12:30,120
processes and this is what you're doing

00:12:29,340 --> 00:12:33,060
when you're running your rails

00:12:30,120 --> 00:12:33,990
application would say like unicorn right

00:12:33,060 --> 00:12:35,940
you're running a whole bunch of

00:12:33,990 --> 00:12:37,650
different Ruby processes so that you can

00:12:35,940 --> 00:12:40,500
actually handle concurrent requests on

00:12:37,650 --> 00:12:43,500
multiple CPUs on your machine so just

00:12:40,500 --> 00:12:45,720
run multiple multiple Ruby processes so

00:12:43,500 --> 00:12:49,740
I want to look at another thing and this

00:12:45,720 --> 00:12:53,550
is a this is an example of using a slow

00:12:49,740 --> 00:12:55,020
a slow web server or slow web service we

00:12:53,550 --> 00:12:57,810
have a slow web service here because

00:12:55,020 --> 00:12:59,670
again like basically online advertising

00:12:57,810 --> 00:13:04,020
is all about Fibonacci sequences and

00:12:59,670 --> 00:13:05,760
slow web services so if you look at this

00:13:04,020 --> 00:13:07,650
it's just super simple it just prints

00:13:05,760 --> 00:13:09,600
out hello world but the important thing

00:13:07,650 --> 00:13:11,880
is like we have a sleep here for half a

00:13:09,600 --> 00:13:15,450
second so each request takes at least

00:13:11,880 --> 00:13:17,100
half a second to complete and we run our

00:13:15,450 --> 00:13:20,160
client here we have a client we just say

00:13:17,100 --> 00:13:23,490
ok well go you know go fetch some data

00:13:20,160 --> 00:13:25,830
from the server and we run this and it

00:13:23,490 --> 00:13:27,750
takes a little over 2 seconds and this

00:13:25,830 --> 00:13:29,790
makes sense because we're doing for Oh

00:13:27,750 --> 00:13:30,420
quaff see each at half a second takes 2

00:13:29,790 --> 00:13:35,790
seconds

00:13:30,420 --> 00:13:37,860
not surprising so we're like well we

00:13:35,790 --> 00:13:40,080
forgot we totally forgot about the

00:13:37,860 --> 00:13:42,660
previous thing the previous knowledge

00:13:40,080 --> 00:13:44,340
about the gvl like we've just somehow we

00:13:42,660 --> 00:13:45,960
forgot about it haven't had our coffee

00:13:44,340 --> 00:13:48,690
yet so we decide to throw this into

00:13:45,960 --> 00:13:49,920
threads and then we remember oh well

00:13:48,690 --> 00:13:52,260
this isn't going to work out for us

00:13:49,920 --> 00:13:55,320
because you know we can't execute

00:13:52,260 --> 00:13:58,140
anything in parallel so what is the

00:13:55,320 --> 00:14:00,840
point of doing threads well we run it

00:13:58,140 --> 00:14:04,080
anyway but it actually takes half a

00:14:00,840 --> 00:14:06,660
second this time so we were able to

00:14:04,080 --> 00:14:09,320
execute this make request to this web

00:14:06,660 --> 00:14:13,140
service even in MRI using threads and

00:14:09,320 --> 00:14:16,320
decrease the amount of time spent now

00:14:13,140 --> 00:14:18,360
how did this work like how did this work

00:14:16,320 --> 00:14:20,190
inside of Ruby well there's different

00:14:18,360 --> 00:14:22,580
things there's different

00:14:20,190 --> 00:14:24,900
methods inside of Ruby where we know

00:14:22,580 --> 00:14:26,910
where the interpreter knows well okay

00:14:24,900 --> 00:14:28,830
you know nothing can actually happen

00:14:26,910 --> 00:14:30,930
inside of the Ruby VM while we're trying

00:14:28,830 --> 00:14:32,610
to read off of a socket we can't

00:14:30,930 --> 00:14:34,770
actually execute anything right there

00:14:32,610 --> 00:14:37,530
right there so what we're going to do is

00:14:34,770 --> 00:14:39,900
we're going to release the GPL let other

00:14:37,530 --> 00:14:41,820
threads execute on the CPU while we're

00:14:39,900 --> 00:14:44,160
waiting for data off of the socket and

00:14:41,820 --> 00:14:45,900
then once we actually get data on the

00:14:44,160 --> 00:14:50,940
socket we're going to acquire the GPL

00:14:45,900 --> 00:14:52,260
again and enter back into the Ruby VM so

00:14:50,940 --> 00:14:54,090
there's certain things that we can do

00:14:52,260 --> 00:14:56,940
this we can do this trick with which is

00:14:54,090 --> 00:15:01,140
like IO any sort any type of i/o

00:14:56,940 --> 00:15:04,110
operations and for those of you who are

00:15:01,140 --> 00:15:06,840
writing C extensions or looking into

00:15:04,110 --> 00:15:08,370
MRIs internals the threat the function

00:15:06,840 --> 00:15:11,910
you actually want to look for is this

00:15:08,370 --> 00:15:14,520
function RB thread blocking region this

00:15:11,910 --> 00:15:16,560
is the thing that actually unlocks the

00:15:14,520 --> 00:15:18,510
GPL so you give it a you give it a

00:15:16,560 --> 00:15:21,210
function pointer it'll unlock the GVL

00:15:18,510 --> 00:15:24,090
call your function execute some code and

00:15:21,210 --> 00:15:25,470
then reacquire the GPL and you can

00:15:24,090 --> 00:15:27,860
actually use this function when you're

00:15:25,470 --> 00:15:30,210
doing things like for example

00:15:27,860 --> 00:15:31,860
cryptography where you're doing things

00:15:30,210 --> 00:15:34,320
that are like CPU intensive but you're

00:15:31,860 --> 00:15:36,260
never actually gonna be in the Ruby

00:15:34,320 --> 00:15:39,390
virtual machine you're just doing

00:15:36,260 --> 00:15:45,650
computations and C then you can use this

00:15:39,390 --> 00:15:47,640
function as well so what does this mean

00:15:45,650 --> 00:15:51,750
what does it mean that we can actually

00:15:47,640 --> 00:15:53,640
run things in parallel on MRI well I

00:15:51,750 --> 00:15:55,560
mean from an advertising perspective

00:15:53,640 --> 00:15:58,740
obviously it means that we need to build

00:15:55,560 --> 00:16:01,560
Fibonacci as a service or what I like to

00:15:58,740 --> 00:16:05,490
call it f faz which is the next big

00:16:01,560 --> 00:16:10,470
thing yes I'm looking for investors now

00:16:05,490 --> 00:16:15,810
so come talk to me after I promise to

00:16:10,470 --> 00:16:19,230
use your VC wisely but really what it

00:16:15,810 --> 00:16:22,710
means is it means two things it means

00:16:19,230 --> 00:16:26,550
that number one a block to VM is a block

00:16:22,710 --> 00:16:28,410
to the M it's always a block VM block VM

00:16:26,550 --> 00:16:30,890
is a block V M so if you find some

00:16:28,410 --> 00:16:33,720
library that's like well we're using

00:16:30,890 --> 00:16:35,519
fibers to make your stuff like

00:16:33,720 --> 00:16:38,040
/ duper fast and in parallel it's

00:16:35,519 --> 00:16:40,379
actually probably a lie it's just adding

00:16:38,040 --> 00:16:42,689
complexity to your code the VM can't

00:16:40,379 --> 00:16:45,839
actually magically switch out when

00:16:42,689 --> 00:16:48,980
you're using fibers so the more

00:16:45,839 --> 00:16:52,050
important thing is that threads matter

00:16:48,980 --> 00:16:55,709
if you're doing i/o on MRI threads

00:16:52,050 --> 00:16:58,470
matter and I'm guessing like many of you

00:16:55,709 --> 00:17:01,170
so I'm guessing many of you have Web

00:16:58,470 --> 00:17:07,380
Apps probably or at least some of your

00:17:01,170 --> 00:17:09,319
code does IO I'm guessing it would be

00:17:07,380 --> 00:17:14,159
nice if we didn't have to but you know

00:17:09,319 --> 00:17:18,390
so even even on interpreters that have a

00:17:14,159 --> 00:17:21,569
GVL using threads is important and I

00:17:18,390 --> 00:17:24,089
think that web server is like threaded

00:17:21,569 --> 00:17:26,970
web servers like Puma are going to

00:17:24,089 --> 00:17:28,950
become more important because while

00:17:26,970 --> 00:17:31,650
we're doing i/o operations we should be

00:17:28,950 --> 00:17:36,620
able to do to serve up CPU operations at

00:17:31,650 --> 00:17:38,460
the same time so having solutions like

00:17:36,620 --> 00:17:41,100
multi-threaded servers that are running

00:17:38,460 --> 00:17:41,580
and multi-process should become more

00:17:41,100 --> 00:17:45,299
popular

00:17:41,580 --> 00:17:46,980
I would hope or using Gil free solutions

00:17:45,299 --> 00:17:52,159
like JRuby with just a straight-up

00:17:46,980 --> 00:17:54,450
threaded server would also do as well so

00:17:52,159 --> 00:17:59,159
the next thing I want to talk about is

00:17:54,450 --> 00:18:00,390
thread safety in rails and I'm going to

00:17:59,159 --> 00:18:03,780
talk about some of the changes that

00:18:00,390 --> 00:18:07,200
we've made in rails to make it more

00:18:03,780 --> 00:18:09,870
thread safe and what it means to you as

00:18:07,200 --> 00:18:11,309
developers and what we had to do I want

00:18:09,870 --> 00:18:14,549
to talk about common problems we ran

00:18:11,309 --> 00:18:16,530
into and how you can fix those things in

00:18:14,549 --> 00:18:18,570
your applications so the first thing

00:18:16,530 --> 00:18:21,780
that we did in rails was we deleted

00:18:18,570 --> 00:18:23,640
config dot thread safe so we didn't

00:18:21,780 --> 00:18:25,710
actually remove it it's it's actually

00:18:23,640 --> 00:18:30,090
still there it's just a no op so you can

00:18:25,710 --> 00:18:31,409
still call it and it'll probably output

00:18:30,090 --> 00:18:36,530
a message saying something like cool

00:18:31,409 --> 00:18:39,120
story bro you're already thread safe so

00:18:36,530 --> 00:18:41,250
the question is well why why should we

00:18:39,120 --> 00:18:43,799
delete this why should we delete this

00:18:41,250 --> 00:18:44,909
configuration option like what what is

00:18:43,799 --> 00:18:46,650
the point of deleting this why do we

00:18:44,909 --> 00:18:48,990
want to delete this well in a

00:18:46,650 --> 00:18:51,419
in my opinion we should probably just

00:18:48,990 --> 00:18:51,960
always be writing programs that are

00:18:51,419 --> 00:18:55,650
thread-safe

00:18:51,960 --> 00:18:57,330
so if that's the case then it boggles my

00:18:55,650 --> 00:19:00,840
mind why we would have some particular

00:18:57,330 --> 00:19:03,450
flag that's like okay now you should run

00:19:00,840 --> 00:19:06,570
thread safe or now you shouldn't run

00:19:03,450 --> 00:19:08,370
thread safe and if you think about it so

00:19:06,570 --> 00:19:10,169
does that mean like are there branches

00:19:08,370 --> 00:19:12,510
in the code where it's checking okay

00:19:10,169 --> 00:19:14,789
is it thread safe now are we thread safe

00:19:12,510 --> 00:19:16,620
if we are then let's do it in a thread

00:19:14,789 --> 00:19:18,240
safe manner otherwise let's do it in a

00:19:16,620 --> 00:19:20,279
totally crazy manner that could blow up

00:19:18,240 --> 00:19:24,179
it just doesn't like it just doesn't

00:19:20,279 --> 00:19:25,890
make sense to me so this is my opinion

00:19:24,179 --> 00:19:27,870
why we should remove why we should

00:19:25,890 --> 00:19:33,299
remove this configuration flag is just

00:19:27,870 --> 00:19:34,799
because it's ridiculous but the other

00:19:33,299 --> 00:19:37,020
thing is that it simplifies the rails

00:19:34,799 --> 00:19:38,700
code base so we can actually find those

00:19:37,020 --> 00:19:40,350
branches where we're saying okay well

00:19:38,700 --> 00:19:41,970
now let's do this in a thread safe way

00:19:40,350 --> 00:19:43,320
or let's not do this and it's read safe

00:19:41,970 --> 00:19:46,919
way and we can eliminate those branches

00:19:43,320 --> 00:19:50,789
and actually simplify the code so is it

00:19:46,919 --> 00:19:52,110
is it safe to remove thread safe it's

00:19:50,789 --> 00:19:54,120
the next question you might be asking

00:19:52,110 --> 00:19:55,470
and in order to figure out the answer

00:19:54,120 --> 00:19:57,779
this question we need to understand well

00:19:55,470 --> 00:19:59,730
what did thread safe do so let's take a

00:19:57,779 --> 00:20:01,500
look at that what thread safe do is it

00:19:59,730 --> 00:20:03,870
it set these four different

00:20:01,500 --> 00:20:06,860
configuration options inside of rails

00:20:03,870 --> 00:20:09,090
and we'll look at what each of those are

00:20:06,860 --> 00:20:12,330
but the first thing that I want to say

00:20:09,090 --> 00:20:14,010
is that loading code isn't thread safe

00:20:12,330 --> 00:20:17,909
and I put a star there because it's not

00:20:14,010 --> 00:20:18,659
actually true require is now thread safe

00:20:17,909 --> 00:20:20,940
on trunk

00:20:18,659 --> 00:20:23,370
I think require has been thread safe in

00:20:20,940 --> 00:20:25,740
JRuby for a while I'm not totally sure

00:20:23,370 --> 00:20:28,919
about that but the thing is it doesn't

00:20:25,740 --> 00:20:30,659
actually matter because well I'm sure

00:20:28,919 --> 00:20:34,799
many of you have seen warnings that are

00:20:30,659 --> 00:20:37,770
like circular require is considered

00:20:34,799 --> 00:20:39,570
dangerous you might have seen this you

00:20:37,770 --> 00:20:41,309
might have seen this somewhere and the

00:20:39,570 --> 00:20:43,529
problem with that is that well if we

00:20:41,309 --> 00:20:45,510
decide to take out a lock and do this do

00:20:43,529 --> 00:20:48,000
these requires a circular require can

00:20:45,510 --> 00:20:49,470
lead to a deadlock right and we don't

00:20:48,000 --> 00:20:51,570
actually want to like it would not be

00:20:49,470 --> 00:20:54,289
very fun if when we were booting our

00:20:51,570 --> 00:20:57,080
rails application it just deadlocks I

00:20:54,289 --> 00:21:00,370
wouldn't be too excited about that

00:20:57,080 --> 00:21:02,950
so in rails we just treat all

00:21:00,370 --> 00:21:05,679
loading as not thread safe and we say

00:21:02,950 --> 00:21:07,419
okay we're not gonna do any any sort of

00:21:05,679 --> 00:21:11,940
threading now we're just gonna load it

00:21:07,419 --> 00:21:14,740
all on the same thread get it done so

00:21:11,940 --> 00:21:17,110
configuration options the first one we

00:21:14,740 --> 00:21:18,340
enable pre loading frameworks and what

00:21:17,110 --> 00:21:20,830
this does is it says okay we're gonna

00:21:18,340 --> 00:21:24,039
load all of rails and - we're gonna load

00:21:20,830 --> 00:21:26,500
up all of rails now I'm not sure like

00:21:24,039 --> 00:21:28,750
this rails is typically lazy lazily

00:21:26,500 --> 00:21:30,700
loaded if you don't have this set which

00:21:28,750 --> 00:21:32,740
means like okay I'm gonna reference when

00:21:30,700 --> 00:21:36,539
I reference active record base then it's

00:21:32,740 --> 00:21:39,309
actually gonna load up active record and

00:21:36,539 --> 00:21:41,020
it also does this for all of your codes

00:21:39,309 --> 00:21:43,120
so it won't actually load your model

00:21:41,020 --> 00:21:46,330
files until you actually reference that

00:21:43,120 --> 00:21:48,010
constant and why the framework and your

00:21:46,330 --> 00:21:49,990
code is treated differently I don't

00:21:48,010 --> 00:21:52,120
actually know why but this is one of the

00:21:49,990 --> 00:21:54,370
configuration options is okay we'll do

00:21:52,120 --> 00:21:56,860
it this way the next thing we do is we

00:21:54,370 --> 00:21:58,450
enable caching classes this makes sense

00:21:56,860 --> 00:21:59,500
because well if we're gonna load up all

00:21:58,450 --> 00:22:01,570
of our code we don't want to be

00:21:59,500 --> 00:22:03,880
reloading we know if we know that it's

00:22:01,570 --> 00:22:06,159
an axiom that loading code is not thread

00:22:03,880 --> 00:22:07,720
safe so we don't want to be reloading

00:22:06,159 --> 00:22:09,909
code in production that would not be a

00:22:07,720 --> 00:22:14,080
good thing we lead to deadlocks our app

00:22:09,909 --> 00:22:16,390
dies not super excited about that next

00:22:14,080 --> 00:22:18,070
thing we we do is we disable dependency

00:22:16,390 --> 00:22:20,590
loading and this is the option that says

00:22:18,070 --> 00:22:22,390
okay when you reference a user constant

00:22:20,590 --> 00:22:24,159
like an application constant like your

00:22:22,390 --> 00:22:27,789
user model or whatever we go load up

00:22:24,159 --> 00:22:30,970
that user model so we disable that

00:22:27,789 --> 00:22:33,490
because we're hopefully pre loading all

00:22:30,970 --> 00:22:35,049
of your code so it doesn't make sense to

00:22:33,490 --> 00:22:37,360
go out and find these constants because

00:22:35,049 --> 00:22:40,899
hopefully we've we've already found them

00:22:37,360 --> 00:22:44,110
all or done now the next thing the next

00:22:40,899 --> 00:22:49,320
option is we enable concurrency we allow

00:22:44,110 --> 00:22:53,559
concurrency this is my favorite option

00:22:49,320 --> 00:22:56,529
oh and that was a lie - it's actually I

00:22:53,559 --> 00:22:58,149
hate this option so what this option

00:22:56,529 --> 00:23:00,610
does is it actually removes a middleware

00:22:58,149 --> 00:23:04,090
called rack lock what a rack lock does

00:23:00,610 --> 00:23:06,309
is it wraps up your requests so it says

00:23:04,090 --> 00:23:09,610
okay when a request comes in we're going

00:23:06,309 --> 00:23:12,040
to obtain a lock so thread one comes in

00:23:09,610 --> 00:23:13,960
it gets a lock it reads from the

00:23:12,040 --> 00:23:15,760
the socket and we enter your rails

00:23:13,960 --> 00:23:17,500
application and we try to process stuff

00:23:15,760 --> 00:23:19,330
but let's say we have a second thread

00:23:17,500 --> 00:23:21,220
that comes along it tries to obtain that

00:23:19,330 --> 00:23:24,910
lock but thread one already has that

00:23:21,220 --> 00:23:26,950
lock taken out right so thread thread

00:23:24,910 --> 00:23:28,990
two just sits there until thread one is

00:23:26,950 --> 00:23:31,360
done it writes to the socket releases

00:23:28,990 --> 00:23:33,370
its lock and then thread two can say

00:23:31,360 --> 00:23:37,600
okay it's my turn so go through the

00:23:33,370 --> 00:23:43,140
entire process and releases the lock

00:23:37,600 --> 00:23:44,919
finally so with things like

00:23:43,140 --> 00:23:48,160
multi-process setups like if you're

00:23:44,919 --> 00:23:49,870
running unicorn and production rack lock

00:23:48,160 --> 00:23:52,210
doesn't make any sense because you only

00:23:49,870 --> 00:23:54,130
have one thread in each process you only

00:23:52,210 --> 00:23:56,200
have one thread processing a request so

00:23:54,130 --> 00:23:58,000
what's the point of taking out a lock if

00:23:56,200 --> 00:23:59,799
no other thread can acquire that lock

00:23:58,000 --> 00:24:02,799
then what is the point of the middleware

00:23:59,799 --> 00:24:05,140
so if you're using a multi-process setup

00:24:02,799 --> 00:24:09,130
this simply just adds overhead to your

00:24:05,140 --> 00:24:11,200
application so the other problem is that

00:24:09,130 --> 00:24:14,410
if you noticed in that in the way that

00:24:11,200 --> 00:24:17,410
we process requests there it only allows

00:24:14,410 --> 00:24:19,419
one request at a time so if you're

00:24:17,410 --> 00:24:21,610
running in a multi-threaded server all

00:24:19,419 --> 00:24:22,900
of a sudden you can only do one request

00:24:21,610 --> 00:24:25,720
of the time so what is the point of

00:24:22,900 --> 00:24:27,700
running the multi-threaded server if you

00:24:25,720 --> 00:24:29,710
can only do one at a time you boot this

00:24:27,700 --> 00:24:31,540
up you boot up your server and you're

00:24:29,710 --> 00:24:33,429
like why is it only ER why is it only

00:24:31,540 --> 00:24:35,500
running one request at the time I guess

00:24:33,429 --> 00:24:37,360
I need to start up multiple processes of

00:24:35,500 --> 00:24:39,760
my threaded server and you're like why

00:24:37,360 --> 00:24:45,220
is this happening well this is the this

00:24:39,760 --> 00:24:47,830
is why so in the best case it's extra

00:24:45,220 --> 00:24:50,980
overhead is our best-case scenario with

00:24:47,830 --> 00:24:55,150
rack lock in our worst case we can only

00:24:50,980 --> 00:24:57,790
process one request at a time so I think

00:24:55,150 --> 00:25:00,760
that I think that options like this or

00:24:57,790 --> 00:25:03,640
default configurations like this is one

00:25:00,760 --> 00:25:06,190
of the reasons why nobody chooses thread

00:25:03,640 --> 00:25:07,780
safe servers they start up their threads

00:25:06,190 --> 00:25:09,520
say server and they're like why I can

00:25:07,780 --> 00:25:12,340
only process one request at the time

00:25:09,520 --> 00:25:17,620
this this web server sucks I'm gonna

00:25:12,340 --> 00:25:21,490
move on to something else so what is the

00:25:17,620 --> 00:25:22,960
impact of removing thread safe bang

00:25:21,490 --> 00:25:24,580
we're just gonna say all right we're

00:25:22,960 --> 00:25:25,510
gonna enable this for everything it

00:25:24,580 --> 00:25:29,170
doesn't it

00:25:25,510 --> 00:25:33,700
doesn't matter anymore the impact is

00:25:29,170 --> 00:25:35,200
that boot time will probably increase so

00:25:33,700 --> 00:25:36,820
boot time and production will probably

00:25:35,200 --> 00:25:38,980
increase because we're gonna preload all

00:25:36,820 --> 00:25:40,840
of your code but the thing is you

00:25:38,980 --> 00:25:42,940
actually had to pay all that time before

00:25:40,840 --> 00:25:45,340
it's just that you paid it over the

00:25:42,940 --> 00:25:47,740
course of many a few requests as your

00:25:45,340 --> 00:25:52,540
server warmed up now it just happens all

00:25:47,740 --> 00:25:54,040
up front if your middleware so you

00:25:52,540 --> 00:25:59,530
should have a slightly smaller stock

00:25:54,040 --> 00:26:01,930
size maybe one or two stack frames but

00:25:59,530 --> 00:26:04,720
it is slightly smaller mold aprox

00:26:01,930 --> 00:26:06,910
servers should stay about the same so

00:26:04,720 --> 00:26:11,530
after you boot up you should see about

00:26:06,910 --> 00:26:15,310
the same profile like speed wise and

00:26:11,530 --> 00:26:17,500
threaded servers will just work so now

00:26:15,310 --> 00:26:19,890
we don't have that anymore oh that

00:26:17,500 --> 00:26:24,610
reminds me

00:26:19,890 --> 00:26:29,050
there was a there was a survey out that

00:26:24,610 --> 00:26:31,600
was like who rails survey like what web

00:26:29,050 --> 00:26:33,130
server do you use you know like oh who

00:26:31,600 --> 00:26:36,790
is that who has the most popular web

00:26:33,130 --> 00:26:39,940
server and what I think is funny is that

00:26:36,790 --> 00:26:41,680
I don't think web brick was listed

00:26:39,940 --> 00:26:43,630
anywhere in there I don't know if you

00:26:41,680 --> 00:26:48,490
guys know web brick is but it's the web

00:26:43,630 --> 00:26:50,470
server that comes with Ruby and if you

00:26:48,490 --> 00:26:53,850
don't specify the web server that you

00:26:50,470 --> 00:26:57,550
use when you deploy to Heroku you use

00:26:53,850 --> 00:26:59,920
web brick I think many people don't know

00:26:57,550 --> 00:27:02,320
that and the other interesting thing

00:26:59,920 --> 00:27:05,680
about web brick is it it is a threaded

00:27:02,320 --> 00:27:09,150
web server so it's I'm pretty sure it's

00:27:05,680 --> 00:27:12,250
like the first threaded Ruby web server

00:27:09,150 --> 00:27:13,810
anyway so fun fact that survey is

00:27:12,250 --> 00:27:15,540
probably wrong because I'm guessing

00:27:13,810 --> 00:27:17,410
there are many people who have pushed

00:27:15,540 --> 00:27:19,060
applications to Heroku without

00:27:17,410 --> 00:27:25,510
specifying a web server and they're

00:27:19,060 --> 00:27:27,280
using webrick and production anyway

00:27:25,510 --> 00:27:29,200
removing thread safe wasn't the only

00:27:27,280 --> 00:27:30,910
thing that we had to do to fix or the

00:27:29,200 --> 00:27:34,180
only thing that we did in rails to

00:27:30,910 --> 00:27:36,040
support threaded applications we

00:27:34,180 --> 00:27:37,780
actually had to fix bugs where we were

00:27:36,040 --> 00:27:38,440
doing unsafe things and what I want to

00:27:37,780 --> 00:27:40,600
do is what

00:27:38,440 --> 00:27:42,160
some of the common scenarios where we

00:27:40,600 --> 00:27:45,010
were having bugs and rails and what we

00:27:42,160 --> 00:27:47,200
had to do to fix them and hopefully you

00:27:45,010 --> 00:27:49,300
can use this look for these types of

00:27:47,200 --> 00:27:52,150
issues in your application - and fix

00:27:49,300 --> 00:27:55,960
threading threading bugs in your rails

00:27:52,150 --> 00:27:57,850
apps or your gems now I guess we're kind

00:27:55,960 --> 00:28:01,330
of lucky because a hundred percent of

00:27:57,850 --> 00:28:03,640
our bugs were race conditions around

00:28:01,330 --> 00:28:05,470
caching so we didn't actually have any

00:28:03,640 --> 00:28:10,300
deadlock situations which was pretty

00:28:05,470 --> 00:28:13,270
nice so what we're gonna do is look at a

00:28:10,300 --> 00:28:17,220
few different caching race conditions

00:28:13,270 --> 00:28:17,220
and what you have to do to fix them so

00:28:17,940 --> 00:28:23,920
people don't seem to notice this but or

00:28:20,710 --> 00:28:25,390
equals is a form of caching so your

00:28:23,920 --> 00:28:27,130
caching the right-hand side of the

00:28:25,390 --> 00:28:28,870
statement you do some calculation you do

00:28:27,130 --> 00:28:30,490
or equals and it assigns it to some

00:28:28,870 --> 00:28:32,590
instance variable we're lazily

00:28:30,490 --> 00:28:34,750
initializing that instance variable and

00:28:32,590 --> 00:28:37,450
the way that this is a the way that this

00:28:34,750 --> 00:28:41,680
is a problem is we say okay we have a

00:28:37,450 --> 00:28:43,330
check then act race condition the thread

00:28:41,680 --> 00:28:46,530
comes in and says okay is that instance

00:28:43,330 --> 00:28:49,750
variable nil if so let's calculate it

00:28:46,530 --> 00:28:52,270
set it and return it but the problem is

00:28:49,750 --> 00:28:54,250
while we're calculating that well we're

00:28:52,270 --> 00:28:56,020
calculating that value another thread

00:28:54,250 --> 00:28:58,120
would come along and be like hey is this

00:28:56,020 --> 00:29:01,120
instance variable nil and it says yes it

00:28:58,120 --> 00:29:04,650
is nil so now you have two different

00:29:01,120 --> 00:29:07,390
threads doing the same calculation twice

00:29:04,650 --> 00:29:09,640
now one thing to note is that this

00:29:07,390 --> 00:29:12,730
particular operation is only dangerous

00:29:09,640 --> 00:29:14,440
when you're sharing it among threads so

00:29:12,730 --> 00:29:16,120
if you see this happening if you're

00:29:14,440 --> 00:29:17,980
sharing this data among threads that's

00:29:16,120 --> 00:29:21,820
really where you have to worry about it

00:29:17,980 --> 00:29:23,380
and what you can do is you can eagerly

00:29:21,820 --> 00:29:25,140
initialize it and of course I'm using

00:29:23,380 --> 00:29:28,510
Fibonacci sequence here as I said

00:29:25,140 --> 00:29:31,030
Fibonacci sequence is very important we

00:29:28,510 --> 00:29:33,460
eagerly initialize this this instant

00:29:31,030 --> 00:29:35,440
variable on the class and we know that

00:29:33,460 --> 00:29:38,260
booting up booting the application and

00:29:35,440 --> 00:29:39,910
requiring files is considered to be not

00:29:38,260 --> 00:29:41,380
thread safe so we're guaranteed that

00:29:39,910 --> 00:29:42,040
this is only going to happen inside of

00:29:41,380 --> 00:29:44,380
one thread

00:29:42,040 --> 00:29:46,870
so we pre calculate this cache stored on

00:29:44,380 --> 00:29:48,660
the class and then we're good to go the

00:29:46,870 --> 00:29:51,920
other fix that we can do is we can lock

00:29:48,660 --> 00:29:53,090
so this requires that we add a mutex

00:29:51,920 --> 00:29:55,580
and we say okay we're gonna go

00:29:53,090 --> 00:30:00,400
synchronize on that mutex calculate the

00:29:55,580 --> 00:30:02,630
Fibonacci sequence and then return it so

00:30:00,400 --> 00:30:04,400
the other thing that we can do is we can

00:30:02,630 --> 00:30:05,810
move this the instance methods class

00:30:04,400 --> 00:30:08,360
methods are going to be shared among

00:30:05,810 --> 00:30:09,890
threads so depending on the particular

00:30:08,360 --> 00:30:11,930
problem that you're trying to solve

00:30:09,890 --> 00:30:14,360
moving to an instance method may be a

00:30:11,930 --> 00:30:15,560
better maybe a better solution so you

00:30:14,360 --> 00:30:17,350
say well I'm not going to share this

00:30:15,560 --> 00:30:19,790
instance among threads we can actually

00:30:17,350 --> 00:30:21,350
generate a new instance per thread and

00:30:19,790 --> 00:30:23,780
we just do the calculation and our

00:30:21,350 --> 00:30:27,050
initialize and we have a cache there we

00:30:23,780 --> 00:30:30,220
can also do lazy initialization if we

00:30:27,050 --> 00:30:33,050
want to using a synchronized block and

00:30:30,220 --> 00:30:34,880
initializing there now if you really

00:30:33,050 --> 00:30:36,890
really really need this to be a class

00:30:34,880 --> 00:30:39,590
method another thing that you can do is

00:30:36,890 --> 00:30:42,440
create a singleton store that on store

00:30:39,590 --> 00:30:44,750
that as a constant and use that and

00:30:42,440 --> 00:30:47,750
actually we found that to be fairly

00:30:44,750 --> 00:30:49,730
handy throughout the rail source because

00:30:47,750 --> 00:30:52,580
we can actually instantiate that object

00:30:49,730 --> 00:30:54,770
and test it so dealing with Singleton's

00:30:52,580 --> 00:30:56,950
is kind of a pain because maybe if they

00:30:54,770 --> 00:31:00,560
store any type of state you have to

00:30:56,950 --> 00:31:02,530
reset that and it's just much easier to

00:31:00,560 --> 00:31:05,540
test against an instance of something

00:31:02,530 --> 00:31:09,140
now another problem that we ran into was

00:31:05,540 --> 00:31:10,970
hashed out new blocks and this is this

00:31:09,140 --> 00:31:12,980
is kind of an insidious problem because

00:31:10,970 --> 00:31:14,480
you don't notice that the method level

00:31:12,980 --> 00:31:15,890
that well this isn't gonna be thread

00:31:14,480 --> 00:31:17,690
safe you just look at the method and

00:31:15,890 --> 00:31:19,430
you're like well I'm pulling it I'm

00:31:17,690 --> 00:31:20,300
pulling a value out of the hash it's

00:31:19,430 --> 00:31:22,220
totally fine

00:31:20,300 --> 00:31:24,500
it's got to be fine but actually what's

00:31:22,220 --> 00:31:26,420
happening is the hash is doing the same

00:31:24,500 --> 00:31:29,150
the same issue that we had in the or

00:31:26,420 --> 00:31:32,240
equals the or equals section it's saying

00:31:29,150 --> 00:31:34,070
okay we have to check then act do we

00:31:32,240 --> 00:31:35,900
have this key if we don't have the key

00:31:34,070 --> 00:31:38,960
then we need to go calculate a value for

00:31:35,900 --> 00:31:41,570
it one thing that we can do is

00:31:38,960 --> 00:31:43,730
synchronize around synchronize around

00:31:41,570 --> 00:31:47,270
key fetching the other thing that you

00:31:43,730 --> 00:31:52,700
can do is which I recommend is getting

00:31:47,270 --> 00:31:58,160
this thread safe gem from Charles and I

00:31:52,700 --> 00:32:00,290
like I have to say I wish that the type

00:31:58,160 --> 00:32:03,500
of stuff that Charles has in this gem

00:32:00,290 --> 00:32:04,860
was in Ruby's standard library because I

00:32:03,500 --> 00:32:07,860
feel like that's an

00:32:04,860 --> 00:32:09,600
problem with thread safety and Ruby

00:32:07,860 --> 00:32:11,400
itself is we don't have a lot of the

00:32:09,600 --> 00:32:14,670
primitives available to us in the

00:32:11,400 --> 00:32:18,360
standard library like thread safe hashes

00:32:14,670 --> 00:32:19,610
or I'd say phrase even some things like

00:32:18,360 --> 00:32:23,100
I don't know

00:32:19,610 --> 00:32:26,070
futures latches barriers those types of

00:32:23,100 --> 00:32:27,690
those types of concurrency data

00:32:26,070 --> 00:32:29,370
structures just aren't available to us

00:32:27,690 --> 00:32:32,610
in the standard library so I feel that

00:32:29,370 --> 00:32:34,730
that is something that's keeping Ruby

00:32:32,610 --> 00:32:38,190
developers from writing thread safe code

00:32:34,730 --> 00:32:40,260
so this is well and great but what about

00:32:38,190 --> 00:32:42,540
at the app level like I'm talking about

00:32:40,260 --> 00:32:44,160
all this stuff from the perspective of

00:32:42,540 --> 00:32:47,460
somebody working on the framework itself

00:32:44,160 --> 00:32:49,290
and I suspect most people are actually

00:32:47,460 --> 00:32:52,559
working on Rails applications so what do

00:32:49,290 --> 00:32:54,960
we do at the rails app level well the

00:32:52,559 --> 00:32:56,790
answer is actually very easy it's

00:32:54,960 --> 00:32:58,710
actually really easy and you shouldn't

00:32:56,790 --> 00:33:00,840
be afraid of making your your code

00:32:58,710 --> 00:33:04,200
thread safe the main thing you need to

00:33:00,840 --> 00:33:05,970
do is avoid shared data once you learn

00:33:04,200 --> 00:33:07,380
how to spot where shared data is

00:33:05,970 --> 00:33:09,000
happening in your application it's

00:33:07,380 --> 00:33:11,309
actually pretty easy to eliminate that

00:33:09,000 --> 00:33:12,780
or put locks around it and the reason I

00:33:11,309 --> 00:33:13,890
say that this is the most important

00:33:12,780 --> 00:33:15,720
thing you need to remember is because

00:33:13,890 --> 00:33:17,220
most people don't actually type thread

00:33:15,720 --> 00:33:21,030
dot new in their applications

00:33:17,220 --> 00:33:23,429
it's very rare so if you're not actually

00:33:21,030 --> 00:33:25,500
spinning spooling up new threads then

00:33:23,429 --> 00:33:26,850
mostly what you need to do is watch out

00:33:25,500 --> 00:33:28,799
for shared data and you need to look for

00:33:26,850 --> 00:33:30,150
things that are global we're going to

00:33:28,799 --> 00:33:31,950
look at a few things that are global

00:33:30,150 --> 00:33:34,620
like this obviously if you're using

00:33:31,950 --> 00:33:36,990
global variables it is a global and

00:33:34,620 --> 00:33:38,370
probably shared among threads another

00:33:36,990 --> 00:33:40,200
global that you need to watch out for

00:33:38,370 --> 00:33:42,360
are constants constants are going to be

00:33:40,200 --> 00:33:44,190
shared among threads what's kind of

00:33:42,360 --> 00:33:45,450
annoying is if you do if you set the

00:33:44,190 --> 00:33:47,340
constant twice you're gonna get a

00:33:45,450 --> 00:33:49,980
warning Ruby will complain to you but

00:33:47,340 --> 00:33:51,809
you can actually mutate a constant value

00:33:49,980 --> 00:33:53,549
like down here on the bottom and you

00:33:51,809 --> 00:33:56,419
won't get a warning about that you're

00:33:53,549 --> 00:34:00,000
modifying global data but you don't know

00:33:56,419 --> 00:34:02,910
and I think the one the one that's most

00:34:00,000 --> 00:34:04,830
common are class level methods class

00:34:02,910 --> 00:34:07,380
methods like this you have to remember

00:34:04,830 --> 00:34:08,879
that all these classes these classes are

00:34:07,380 --> 00:34:11,550
all shared among threads and when you

00:34:08,879 --> 00:34:13,350
set a method on that class that method

00:34:11,550 --> 00:34:16,440
is also shared among all of your threads

00:34:13,350 --> 00:34:18,450
you need to be careful about these so

00:34:16,440 --> 00:34:22,290
like I said avoid avoid

00:34:18,450 --> 00:34:26,190
the data add in add locks the next thing

00:34:22,290 --> 00:34:28,829
I want to talk about is streaming and to

00:34:26,190 --> 00:34:30,720
be honest this isn't a new feature in

00:34:28,829 --> 00:34:33,359
rails 4 it's actually we just tried to

00:34:30,720 --> 00:34:35,760
make it easier to use so we're gonna

00:34:33,359 --> 00:34:38,700
look at we'll look at streaming and then

00:34:35,760 --> 00:34:40,440
we'll look at template rendering how

00:34:38,700 --> 00:34:42,690
template rendering works that they will

00:34:40,440 --> 00:34:46,679
look at streaming and we'll look at some

00:34:42,690 --> 00:34:47,970
features beyond rails 4 so I want to

00:34:46,679 --> 00:34:50,309
look a template rendering from a high

00:34:47,970 --> 00:34:52,559
level a high very very high level

00:34:50,309 --> 00:34:54,750
perspective when we process our ARB

00:34:52,559 --> 00:34:57,750
templates the results are buffered and

00:34:54,750 --> 00:34:59,190
stored into memory and as such all the

00:34:57,750 --> 00:35:01,200
rails internals are built around

00:34:59,190 --> 00:35:03,240
buffering up this template and then

00:35:01,200 --> 00:35:05,490
spitting it out to the socket spitting

00:35:03,240 --> 00:35:08,819
it out to the client now what sucks

00:35:05,490 --> 00:35:11,730
about this is it means that clients are

00:35:08,819 --> 00:35:13,079
blocked while rails is working so when

00:35:11,730 --> 00:35:14,520
somebody makes a request to your web

00:35:13,079 --> 00:35:16,740
server they say give me the index page

00:35:14,520 --> 00:35:18,480
and rails is like okay we're going to

00:35:16,740 --> 00:35:20,099
calculate the index page and it's

00:35:18,480 --> 00:35:21,720
sitting there churning away calculating

00:35:20,099 --> 00:35:24,900
the index page while the client is just

00:35:21,720 --> 00:35:26,549
sitting there going okay what am I gonna

00:35:24,900 --> 00:35:28,770
get some data what am I going to get

00:35:26,549 --> 00:35:30,180
some data when you could be sending data

00:35:28,770 --> 00:35:32,490
down to the client and letting them

00:35:30,180 --> 00:35:35,309
fetch like assets or process JavaScript

00:35:32,490 --> 00:35:37,380
in advance so the client is blocked

00:35:35,309 --> 00:35:38,819
while rails is working the other

00:35:37,380 --> 00:35:41,010
annoying thing about the way that

00:35:38,819 --> 00:35:42,660
template processing is handled is that

00:35:41,010 --> 00:35:45,119
we have to fit the entire member or the

00:35:42,660 --> 00:35:47,160
entire page into memory before we spit

00:35:45,119 --> 00:35:49,079
it out to the client usually this is

00:35:47,160 --> 00:35:51,660
fine but it means that we're constantly

00:35:49,079 --> 00:35:55,500
resizing strings and we'll see the

00:35:51,660 --> 00:35:57,210
process growing as it builds up the page

00:35:55,500 --> 00:35:59,250
and then hopefully reducing again

00:35:57,210 --> 00:36:06,650
hopefully and then spitting out to the

00:35:59,250 --> 00:36:09,480
client so most people expect that they

00:36:06,650 --> 00:36:10,920
have to return something from rack here

00:36:09,480 --> 00:36:12,900
they have to return the entire page and

00:36:10,920 --> 00:36:14,819
I think RAC and courage is buffering if

00:36:12,900 --> 00:36:18,420
you look at the rack API this is a rack

00:36:14,819 --> 00:36:20,940
application that third parameter in the

00:36:18,420 --> 00:36:24,359
array is actually the page buffer itself

00:36:20,940 --> 00:36:27,089
and the simplicity simplicity of this

00:36:24,359 --> 00:36:28,559
API makes it seem like well I have to I

00:36:27,089 --> 00:36:30,320
have to buffer up the entire page before

00:36:28,559 --> 00:36:31,760
I send it off to ice

00:36:30,320 --> 00:36:33,440
it off to the client because we have to

00:36:31,760 --> 00:36:36,560
actually return this value of the stack

00:36:33,440 --> 00:36:39,320
so the thing that's annoying about this

00:36:36,560 --> 00:36:42,860
is we know that even in MRI even in MRI

00:36:39,320 --> 00:36:45,380
we can do I owe and CPU in parallel so

00:36:42,860 --> 00:36:46,820
why are we buffering up this page what

00:36:45,380 --> 00:36:48,110
is the point of buffering it up we could

00:36:46,820 --> 00:36:50,620
be sending data down to the client

00:36:48,110 --> 00:36:53,500
actually getting some parallelization

00:36:50,620 --> 00:36:56,030
p37 in out of this

00:36:53,500 --> 00:36:59,510
so this is where actioncontroller live

00:36:56,030 --> 00:37:01,220
comes in and what this is is a module

00:36:59,510 --> 00:37:06,680
that you mix into your controller and it

00:37:01,220 --> 00:37:09,470
gives you an i/o type an i/o like API to

00:37:06,680 --> 00:37:11,780
send data down to the client and here's

00:37:09,470 --> 00:37:13,370
an example the the reason we the reason

00:37:11,780 --> 00:37:15,260
we stick with this module is because

00:37:13,370 --> 00:37:19,280
today people are expecting that

00:37:15,260 --> 00:37:20,720
everything gets buffered and we don't

00:37:19,280 --> 00:37:22,310
want to break that assumption in rails 4

00:37:20,720 --> 00:37:23,720
we don't want to break your applications

00:37:22,310 --> 00:37:26,240
when you're upgrading so this is an

00:37:23,720 --> 00:37:28,280
opt-in feature so here's an example of

00:37:26,240 --> 00:37:30,020
using it you just mix in action

00:37:28,280 --> 00:37:33,200
controller live and then you get this

00:37:30,020 --> 00:37:34,700
stream object on your response object

00:37:33,200 --> 00:37:38,060
that you can write to it acts like an

00:37:34,700 --> 00:37:41,750
i/o that means you have to close it like

00:37:38,060 --> 00:37:44,030
an i/o it acts like an i/o so it's

00:37:41,750 --> 00:37:46,610
natural for us to do computations with

00:37:44,030 --> 00:37:49,640
iOS so action controller live gives you

00:37:46,610 --> 00:37:53,480
an object that quacks like an IO this IO

00:37:49,640 --> 00:37:55,120
API is important to me because on UNIX

00:37:53,480 --> 00:37:57,230
systems everything is a file

00:37:55,120 --> 00:37:59,000
everything is a file so why aren't we

00:37:57,230 --> 00:38:01,240
treating our output like a file as well

00:37:59,000 --> 00:38:03,770
so I want to look at how this works

00:38:01,240 --> 00:38:04,850
how does it work we're gonna look at

00:38:03,770 --> 00:38:06,800
some of the internals and how to

00:38:04,850 --> 00:38:08,270
actually build this so this is the API

00:38:06,800 --> 00:38:10,910
we want we want something where we set

00:38:08,270 --> 00:38:12,230
the status we set some headers and we

00:38:10,910 --> 00:38:15,980
write out to our stream and then we

00:38:12,230 --> 00:38:17,630
close it that's what we want it ideally

00:38:15,980 --> 00:38:19,610
that's what we would have our API look

00:38:17,630 --> 00:38:25,580
like now the problem is if we look at

00:38:19,610 --> 00:38:26,870
the rack API we don't we don't have that

00:38:25,580 --> 00:38:31,300
with the rack API so how can we

00:38:26,870 --> 00:38:33,560
accomplish this X whatever equals heart

00:38:31,300 --> 00:38:36,350
well what we need to do is we need to

00:38:33,560 --> 00:38:40,700
wrap this up into a response object and

00:38:36,350 --> 00:38:42,470
have people write to it right so we we

00:38:40,700 --> 00:38:43,360
wrap it up in a response object and it

00:38:42,470 --> 00:38:45,700
looks like this like

00:38:43,360 --> 00:38:47,140
our response but the problem is you know

00:38:45,700 --> 00:38:49,240
down there at the bottom that's our rack

00:38:47,140 --> 00:38:50,680
application sets the response on the

00:38:49,240 --> 00:38:52,810
controller and then it calls the index

00:38:50,680 --> 00:38:55,720
and then returns back up the stack but

00:38:52,810 --> 00:38:57,520
the problem is that this still doesn't

00:38:55,720 --> 00:38:59,800
stream this doesn't solve our problem

00:38:57,520 --> 00:39:01,630
we're calling into the controller

00:38:59,800 --> 00:39:04,540
waiting for the controller to return and

00:39:01,630 --> 00:39:07,990
then returning back up the stack so how

00:39:04,540 --> 00:39:10,660
do we fix this like what do we do well

00:39:07,990 --> 00:39:15,310
we can call the action inside a thread

00:39:10,660 --> 00:39:18,220
ah now we're seeing why I thread safety

00:39:15,310 --> 00:39:20,080
in rails is important we can call the

00:39:18,220 --> 00:39:22,930
action inside of a thread and then

00:39:20,080 --> 00:39:25,210
return back up the stack outside of that

00:39:22,930 --> 00:39:26,770
thread but this still isn't good enough

00:39:25,210 --> 00:39:28,090
because if you're looking at this

00:39:26,770 --> 00:39:32,140
carefully you're saying to yourself well

00:39:28,090 --> 00:39:34,540
man this could return back up the stack

00:39:32,140 --> 00:39:36,460
before anything has actually happened

00:39:34,540 --> 00:39:38,320
inside the controller maybe nobody's set

00:39:36,460 --> 00:39:39,790
the response status maybe nobody set the

00:39:38,320 --> 00:39:43,360
headers what are we gonna do so how do

00:39:39,790 --> 00:39:46,630
we deal with this ideally what we want

00:39:43,360 --> 00:39:47,950
to do is we want to wait right here

00:39:46,630 --> 00:39:50,320
we'll say okay we're gonna wait on the

00:39:47,950 --> 00:39:53,020
stream wait until something has actually

00:39:50,320 --> 00:39:55,090
been written and the way that we do this

00:39:53,020 --> 00:39:58,210
is we have a buffer class and this

00:39:55,090 --> 00:40:00,340
buffer class has a latch in it and we we

00:39:58,210 --> 00:40:02,680
call a wait on the buffer class and that

00:40:00,340 --> 00:40:04,060
just blocks there until somebody is

00:40:02,680 --> 00:40:06,670
actually written and you'll see down

00:40:04,060 --> 00:40:08,680
here in the write method that releases

00:40:06,670 --> 00:40:12,190
the latch and then we return back up the

00:40:08,680 --> 00:40:13,720
stack okay cool so there's our there is

00:40:12,190 --> 00:40:15,880
our internal implementation and this is

00:40:13,720 --> 00:40:18,220
an exact code but it's very similar

00:40:15,880 --> 00:40:19,780
inside the rail source code so you can

00:40:18,220 --> 00:40:23,650
go look for this and it should seem

00:40:19,780 --> 00:40:27,730
familiar so cool but what can we do with

00:40:23,650 --> 00:40:29,590
this what can we do with this streaming

00:40:27,730 --> 00:40:31,660
stuff well I want to say like this

00:40:29,590 --> 00:40:33,430
really excites me from a rails internals

00:40:31,660 --> 00:40:35,680
perspective because we can use this to

00:40:33,430 --> 00:40:37,420
build streaming ER beat we already have

00:40:35,680 --> 00:40:39,580
streaming ER B but this greatly

00:40:37,420 --> 00:40:41,290
simplifies the process and we can see

00:40:39,580 --> 00:40:43,480
this by taking a look at how ER beat is

00:40:41,290 --> 00:40:45,670
processing so here we have an ER B

00:40:43,480 --> 00:40:47,500
template we output the source and this

00:40:45,670 --> 00:40:49,720
is what the actual source of the ER v

00:40:47,500 --> 00:40:51,940
template is so we see that it can cats a

00:40:49,720 --> 00:40:54,640
bunch of stuff but what's cool is that

00:40:51,940 --> 00:40:55,550
we can control we can control the way

00:40:54,640 --> 00:40:57,440
the ER be

00:40:55,550 --> 00:40:59,330
fights things out and we can control the

00:40:57,440 --> 00:41:00,770
variable that it writes to so in this

00:40:59,330 --> 00:41:02,690
example what we're doing is we're saying

00:41:00,770 --> 00:41:04,760
okay I want you to use the right method

00:41:02,690 --> 00:41:07,250
and I want you to call the right method

00:41:04,760 --> 00:41:08,600
on standard out so now if we take a look

00:41:07,250 --> 00:41:12,260
at the temple source we're actually

00:41:08,600 --> 00:41:14,240
writing the standard out this is awesome

00:41:12,260 --> 00:41:16,220
because we can refactor rails internals

00:41:14,240 --> 00:41:19,010
to more easily produce streams template

00:41:16,220 --> 00:41:21,800
output this is the result of that that

00:41:19,010 --> 00:41:23,780
template so how is this cool and wet

00:41:21,800 --> 00:41:24,920
like that's awesome for rails internals

00:41:23,780 --> 00:41:28,340
but how is this cool for web

00:41:24,920 --> 00:41:30,290
applications refactoring rails internals

00:41:28,340 --> 00:41:33,110
excites me but maybe it doesn't excite

00:41:30,290 --> 00:41:34,760
you guys very much so let's take a look

00:41:33,110 --> 00:41:37,280
at how we can use this with app web

00:41:34,760 --> 00:41:39,290
applications one thing we can do is we

00:41:37,280 --> 00:41:41,960
can build infinite stream api server

00:41:39,290 --> 00:41:44,150
similar to twitter but i don't actually

00:41:41,960 --> 00:41:45,980
think that's as exciting as the other

00:41:44,150 --> 00:41:47,990
things that we can do with this the most

00:41:45,980 --> 00:41:50,600
interesting thing to me now is using

00:41:47,990 --> 00:41:51,980
server-sent events I don't know if

00:41:50,600 --> 00:41:54,680
you've seen server-sent events but

00:41:51,980 --> 00:41:57,170
they're basically infinite streams where

00:41:54,680 --> 00:41:59,420
the browser's will fire a JavaScript

00:41:57,170 --> 00:42:02,540
function every time it sees in an event

00:41:59,420 --> 00:42:04,550
this is a JavaScript API so this is this

00:42:02,540 --> 00:42:06,710
is what an SSE response looks like has

00:42:04,550 --> 00:42:08,630
this content type of text event stream

00:42:06,710 --> 00:42:10,880
and every time the browser receives a

00:42:08,630 --> 00:42:13,310
particular event like this one it'll

00:42:10,880 --> 00:42:15,850
fire a JavaScript function and pass this

00:42:13,310 --> 00:42:19,670
data payload to that javascript function

00:42:15,850 --> 00:42:24,230
so this is the source this is the

00:42:19,670 --> 00:42:26,300
JavaScript source to set up an SSE you

00:42:24,230 --> 00:42:28,190
can see here the this actually makes the

00:42:26,300 --> 00:42:30,200
request back to your server so it calls

00:42:28,190 --> 00:42:32,000
and makes requests to slash control on

00:42:30,200 --> 00:42:35,630
the server and it actually keeps that

00:42:32,000 --> 00:42:37,670
socket open now we add an event listener

00:42:35,630 --> 00:42:39,860
on the reload event so every time we get

00:42:37,670 --> 00:42:41,870
an event named reload the browser will

00:42:39,860 --> 00:42:43,280
execute a javascript function and we can

00:42:41,870 --> 00:42:44,810
have the javascript function do whatever

00:42:43,280 --> 00:42:47,120
we want to and in this particular

00:42:44,810 --> 00:42:50,540
instance I'm having it just reload the

00:42:47,120 --> 00:42:54,110
reload the page and I think this is cool

00:42:50,540 --> 00:42:55,790
because we can have the server notify

00:42:54,110 --> 00:42:59,060
the browser about events and actually

00:42:55,790 --> 00:43:01,070
have real-time browser communication so

00:42:59,060 --> 00:43:07,130
I want to show a video of an example of

00:43:01,070 --> 00:43:12,660
this we execute fire up our server

00:43:07,130 --> 00:43:15,390
load the page woo users yeah and every

00:43:12,660 --> 00:43:18,300
time we change a file we can actually

00:43:15,390 --> 00:43:22,620
have that notify the server so change it

00:43:18,300 --> 00:43:24,240
say what do I say oMG I think it'll

00:43:22,620 --> 00:43:26,520
actually notify the browser hey you need

00:43:24,240 --> 00:43:28,920
to do a reload it's time to do a reload

00:43:26,520 --> 00:43:31,410
we can have it watch assets too so if

00:43:28,920 --> 00:43:34,590
you change your CSS it'll automatically

00:43:31,410 --> 00:43:36,690
do reloads change it down there we can

00:43:34,590 --> 00:43:41,070
see the users use background it's change

00:43:36,690 --> 00:43:42,960
delete it it'll go away and the other

00:43:41,070 --> 00:43:44,730
cool thing is we can do it from other

00:43:42,960 --> 00:43:47,130
processes too so we can say well let's

00:43:44,730 --> 00:43:48,720
fire up the rails console and we're

00:43:47,130 --> 00:43:50,820
going to modify the database we'll

00:43:48,720 --> 00:43:53,610
create a user here and as soon as we

00:43:50,820 --> 00:43:56,790
create the user it notifies the browser

00:43:53,610 --> 00:43:58,590
hey data change you need to reload or do

00:43:56,790 --> 00:44:01,710
whatever you want to whatever we define

00:43:58,590 --> 00:44:05,760
that JavaScript function to do so how

00:44:01,710 --> 00:44:07,620
does this work when the file system

00:44:05,760 --> 00:44:09,750
change we use FS events and when the

00:44:07,620 --> 00:44:12,330
file system change is the file system

00:44:09,750 --> 00:44:14,400
notifies notifies our web server saying

00:44:12,330 --> 00:44:15,990
hey this FS events gem says hey

00:44:14,400 --> 00:44:17,790
something changed you need to do

00:44:15,990 --> 00:44:19,590
something and then our web server says

00:44:17,790 --> 00:44:23,010
ok cool we're gonna send an event down

00:44:19,590 --> 00:44:25,740
on this control socket that we have with

00:44:23,010 --> 00:44:28,110
the browser and then the browser does

00:44:25,740 --> 00:44:30,000
its thing and reloads now what's

00:44:28,110 --> 00:44:31,770
interesting is that all these all these

00:44:30,000 --> 00:44:35,130
three boxes are actually within the same

00:44:31,770 --> 00:44:40,500
process these are all running within our

00:44:35,130 --> 00:44:42,000
web server so yes all these three boxes

00:44:40,500 --> 00:44:44,490
are in the same process now the way that

00:44:42,000 --> 00:44:46,860
it works with the console that we were

00:44:44,490 --> 00:44:50,160
looking at that console example is a

00:44:46,860 --> 00:44:53,160
little bit more tricky we actually fire

00:44:50,160 --> 00:44:56,400
up a DRB server inside of your web

00:44:53,160 --> 00:44:58,470
server and it opens up a socket and the

00:44:56,400 --> 00:45:01,410
console opens up a socket to our DRB

00:44:58,470 --> 00:45:03,450
server saying hey and across that that

00:45:01,410 --> 00:45:06,260
socket we can send events to the server

00:45:03,450 --> 00:45:10,820
and have those send it down to a client

00:45:06,260 --> 00:45:13,440
so other possible input sources besides

00:45:10,820 --> 00:45:15,600
you know file system changing or

00:45:13,440 --> 00:45:18,270
database changing to get your mind

00:45:15,600 --> 00:45:20,520
churning or we can we can use embedded

00:45:18,270 --> 00:45:25,680
systems for example I have

00:45:20,520 --> 00:45:28,290
my meat keyring box hook tough to a web

00:45:25,680 --> 00:45:30,480
server we can use it with telephony or

00:45:28,290 --> 00:45:32,100
maybe other users for example chat

00:45:30,480 --> 00:45:34,950
systems like we could use this to build

00:45:32,100 --> 00:45:35,600
say oh I don't know IRC something like

00:45:34,950 --> 00:45:42,170
that

00:45:35,600 --> 00:45:45,510
so we looked at these three topics and

00:45:42,170 --> 00:45:49,190
p72 n parallelization thread safety

00:45:45,510 --> 00:45:51,390
parallelization and streaming and

00:45:49,190 --> 00:45:53,220
hopefully I was able to relate them all

00:45:51,390 --> 00:45:54,810
to each other so you can see how each of

00:45:53,220 --> 00:45:56,580
these are related inside of your

00:45:54,810 --> 00:46:02,400
applications as well as inside of rails

00:45:56,580 --> 00:46:04,080
internals now i think i think that cores

00:46:02,400 --> 00:46:06,960
are increasing i don't think that this

00:46:04,080 --> 00:46:08,370
is a stretch to say that every time you

00:46:06,960 --> 00:46:09,690
buy new machines the cores are

00:46:08,370 --> 00:46:11,490
increasing on your new machine like I

00:46:09,690 --> 00:46:13,260
just bought a MacBook Air and a new

00:46:11,490 --> 00:46:15,870
MacBook Air and I'm up to four cores and

00:46:13,260 --> 00:46:17,820
that's crazy it's really awesome but the

00:46:15,870 --> 00:46:21,350
thing is we need to start utilizing the

00:46:17,820 --> 00:46:24,270
entire machine which is why

00:46:21,350 --> 00:46:26,430
investigating things like doing

00:46:24,270 --> 00:46:28,320
parallelization with our virtual

00:46:26,430 --> 00:46:29,850
machines is so important we need to

00:46:28,320 --> 00:46:32,520
understand how we can make the most of

00:46:29,850 --> 00:46:34,890
these machines the other thing that I

00:46:32,520 --> 00:46:36,540
think is changing is we have high

00:46:34,890 --> 00:46:38,340
latency clients we're starting to get

00:46:36,540 --> 00:46:39,720
more and more high latency clients like

00:46:38,340 --> 00:46:42,600
people who are out on their really

00:46:39,720 --> 00:46:46,440
terrible edge server or edge connections

00:46:42,600 --> 00:46:48,330
on their cell phones and we need to get

00:46:46,440 --> 00:46:50,640
data down to these clients as quickly as

00:46:48,330 --> 00:46:53,550
possible having them wait on our server

00:46:50,640 --> 00:46:54,990
to process templates is unacceptable we

00:46:53,550 --> 00:46:58,260
should be getting data down to them as

00:46:54,990 --> 00:47:00,600
soon as possible the other thing that I

00:46:58,260 --> 00:47:02,670
think is changing is that patience is

00:47:00,600 --> 00:47:05,040
decreasing and I mean this among people

00:47:02,670 --> 00:47:06,750
like I think I think everybody's

00:47:05,040 --> 00:47:12,450
patience is decreasing and personally I

00:47:06,750 --> 00:47:14,100
blame this on honey booboo but I think

00:47:12,450 --> 00:47:15,800
that people are expecting like they're

00:47:14,100 --> 00:47:18,300
becoming they're starting to expect more

00:47:15,800 --> 00:47:20,130
instantaneous responses from their web

00:47:18,300 --> 00:47:22,350
servers and we need to figure out how to

00:47:20,130 --> 00:47:24,390
do this and I think the way that we need

00:47:22,350 --> 00:47:25,710
to do this I was thinking about this the

00:47:24,390 --> 00:47:27,980
way that we need to do this is we need

00:47:25,710 --> 00:47:27,980
to lie

00:47:28,350 --> 00:47:32,830
when somebody is asking for a particular

00:47:31,030 --> 00:47:34,180
calculation we should be using cash data

00:47:32,830 --> 00:47:35,710
where we can we're not actually

00:47:34,180 --> 00:47:37,060
performing that calculation we're

00:47:35,710 --> 00:47:40,870
caching and we're lying to you about it

00:47:37,060 --> 00:47:42,850
we need to cheat so updating partial

00:47:40,870 --> 00:47:44,290
pages partials on the page we don't

00:47:42,850 --> 00:47:45,700
update the whole thing you do a request

00:47:44,290 --> 00:47:47,680
we're only gonna update the part of the

00:47:45,700 --> 00:47:49,570
page that changed so we're cheating

00:47:47,680 --> 00:47:51,250
we're not actually you're returning the

00:47:49,570 --> 00:47:53,710
entire page and we also need to steal

00:47:51,250 --> 00:47:56,650
and I mean steal computation from our

00:47:53,710 --> 00:47:58,030
end users so moving moving calculations

00:47:56,650 --> 00:48:01,960
into JavaScript and having those

00:47:58,030 --> 00:48:04,660
calculated on the on the client side so

00:48:01,960 --> 00:48:09,540
for the future what I want all of you to

00:48:04,660 --> 00:48:12,220
do I want you all to why cheat and steal

00:48:09,540 --> 00:48:15,840
in other words I want you all to be good

00:48:12,220 --> 00:48:15,840
engineers thank you

00:48:21,780 --> 00:48:26,230
if you have questions about those please

00:48:24,370 --> 00:48:28,780
come see me after I don't know if we

00:48:26,230 --> 00:48:30,910
have time for questions and I'm not sure

00:48:28,780 --> 00:48:32,680
what the protocol is on questions here

00:48:30,910 --> 00:48:36,580
but if we have time I'm happy to take

00:48:32,680 --> 00:48:39,490
them if we don't come find me so thank

00:48:36,580 --> 00:48:40,210
you do we have time for questions are we

00:48:39,490 --> 00:48:48,360
gonna do that

00:48:40,210 --> 00:48:48,360
oh okay five minutes questions go and go

00:48:50,670 --> 00:48:54,670
so I was wondering if we don't have

00:48:52,810 --> 00:48:58,990
questions I was wondering like so are

00:48:54,670 --> 00:49:03,460
there like boutique spam places here in

00:48:58,990 --> 00:49:05,490
Hawaii like is there I want to try it I

00:49:03,460 --> 00:49:08,620
want to see if I can find some like

00:49:05,490 --> 00:49:12,160
organic shade-grown and Fairtrade spam

00:49:08,620 --> 00:49:16,090
and like try that that exists is it a

00:49:12,160 --> 00:49:21,910
thing deep fried spam that sounds

00:49:16,090 --> 00:49:24,870
delicious questions questions anyone yes

00:49:21,910 --> 00:49:24,870
Constantin

00:49:27,500 --> 00:49:32,490
so the question is in template streaming

00:49:30,840 --> 00:49:36,210
how do you handle how do you handle

00:49:32,490 --> 00:49:40,650
exceptions that happen during streaming

00:49:36,210 --> 00:49:47,160
and the answer is don't have any

00:49:40,650 --> 00:49:49,800
exceptions no so there's there's things

00:49:47,160 --> 00:49:52,530
we can do like spit out JavaScript to

00:49:49,800 --> 00:49:54,390
redirect you or some some kind of hacks

00:49:52,530 --> 00:49:55,430
but really they're total hacks I don't

00:49:54,390 --> 00:50:07,830
have a good answer for you

00:49:55,430 --> 00:50:09,300
total acts yes timing the question is

00:50:07,830 --> 00:50:12,240
about timing on the release candidates

00:50:09,300 --> 00:50:15,210
of rails for any dates that I give you

00:50:12,240 --> 00:50:16,560
are gonna be a total crap we thought we

00:50:15,210 --> 00:50:18,420
would have a beta out at the beginning

00:50:16,560 --> 00:50:23,190
of September and obviously it's past

00:50:18,420 --> 00:50:26,790
September but I think were made mostly

00:50:23,190 --> 00:50:29,640
unblocked now we're hoping to get a beta

00:50:26,790 --> 00:50:37,040
out shortly and a final before the end

00:50:29,640 --> 00:50:37,040
of the year like so soon yes yes

00:50:39,310 --> 00:50:43,960
the question is is there a way to take

00:50:40,780 --> 00:50:51,790
advantage of the new cue system right

00:50:43,960 --> 00:50:54,100
now and what's the yes and no yes

00:50:51,790 --> 00:50:56,740
because yes because it's basically just

00:50:54,100 --> 00:50:58,570
a cueing API and really like the only

00:50:56,740 --> 00:51:02,950
thing that's really in rails to support

00:50:58,570 --> 00:51:09,520
that is a fancy hash where you set a cue

00:51:02,950 --> 00:51:12,670
type object so if you get I think rescue

00:51:09,520 --> 00:51:14,080
has well okay if you're using if an

00:51:12,670 --> 00:51:16,330
in-memory cue is good enough for you

00:51:14,080 --> 00:51:17,770
then just use the cue cue object if you

00:51:16,330 --> 00:51:20,950
need something that's serialized say

00:51:17,770 --> 00:51:24,160
like Redis Jeremy Kemper is working on a

00:51:20,950 --> 00:51:26,530
cue queuing API for rescue wraps our

00:51:24,160 --> 00:51:29,650
unrest e and you can use it I'm not sure

00:51:26,530 --> 00:51:33,190
if you can use that today but it will be

00:51:29,650 --> 00:51:35,230
out along with rails for sidekick has a

00:51:33,190 --> 00:51:40,650
queuing API but it's on an experimental

00:51:35,230 --> 00:51:43,780
branch so if you want to use it today

00:51:40,650 --> 00:51:48,150
tweet at me and I will help you get set

00:51:43,780 --> 00:51:48,150
up that was that yes

00:51:52,170 --> 00:51:57,630
yes so people will work with jQuery no

00:51:55,050 --> 00:52:00,180
about futures but can I talk about

00:51:57,630 --> 00:52:04,950
laches and barriers for a second yes and

00:52:00,180 --> 00:52:06,480
latch wall latch does is say it allows

00:52:04,950 --> 00:52:08,010
you to coordinate coordinate to

00:52:06,480 --> 00:52:10,470
different threads you're basically

00:52:08,010 --> 00:52:12,360
saying well one threat you share the

00:52:10,470 --> 00:52:15,660
latch among multiple threads and you say

00:52:12,360 --> 00:52:18,270
well okay I want this thread to go to

00:52:15,660 --> 00:52:20,430
sleep until this other thread has done

00:52:18,270 --> 00:52:21,690
some particular calculation when that

00:52:20,430 --> 00:52:23,550
other thread is finished with its

00:52:21,690 --> 00:52:26,840
protect particular calculation it'll

00:52:23,550 --> 00:52:29,700
unlock it'll unlock the latch and let

00:52:26,840 --> 00:52:32,490
the other thread let the other thread go

00:52:29,700 --> 00:52:34,140
and typically you use like a countdown

00:52:32,490 --> 00:52:38,460
latch or something like that so you say

00:52:34,140 --> 00:52:40,080
like well I need five different threads

00:52:38,460 --> 00:52:41,460
to finish their job before I'm going to

00:52:40,080 --> 00:52:44,490
continue so it'll just count down on

00:52:41,460 --> 00:52:46,470
each of those and then barrier is I

00:52:44,490 --> 00:52:49,260
believe the barrier is basically the

00:52:46,470 --> 00:52:51,750
same thing except that you can also do

00:52:49,260 --> 00:52:53,550
cyclic barriers so basically reuse your

00:52:51,750 --> 00:52:55,530
latch the thing the thing about latches

00:52:53,550 --> 00:52:57,990
is that they're one-time use so you

00:52:55,530 --> 00:53:04,310
can't reuse it but if you have a cyclic

00:52:57,990 --> 00:53:04,310
barrier you can reset it questions yes

00:53:09,670 --> 00:53:12,269
yes

00:53:29,080 --> 00:53:35,080
so the question is let me see it let me

00:53:32,380 --> 00:53:37,030
see if I'm getting this right is there

00:53:35,080 --> 00:53:47,260
going to be a plan for standardizing

00:53:37,030 --> 00:53:48,910
ssese inside of rails is that so giving

00:53:47,260 --> 00:53:50,859
you giving you like a default when you

00:53:48,910 --> 00:53:52,540
start up when you first get started for

00:53:50,859 --> 00:53:54,580
using sse so the question is is there

00:53:52,540 --> 00:53:56,950
going to be like some sort of default

00:53:54,580 --> 00:53:59,800
for people to be able to use ssese when

00:53:56,950 --> 00:54:01,900
they fire up their web applications the

00:53:59,800 --> 00:54:04,530
answer is there is no there's no plan

00:54:01,900 --> 00:54:07,359
for that right now

00:54:04,530 --> 00:54:09,220
and it's also it's kind of hard because

00:54:07,359 --> 00:54:10,980
it's kind of hard to do something like

00:54:09,220 --> 00:54:13,510
that because right now like

00:54:10,980 --> 00:54:15,369
actioncontroller live doing streaming as

00:54:13,510 --> 00:54:17,080
an opt-in thing it's not default for all

00:54:15,369 --> 00:54:19,869
of your it's not default for all of your

00:54:17,080 --> 00:54:21,730
controllers my personal plan is I would

00:54:19,869 --> 00:54:23,530
actually like to make that default

00:54:21,730 --> 00:54:25,330
I'd like to refactor the in the rails

00:54:23,530 --> 00:54:27,930
internal such that we're always using

00:54:25,330 --> 00:54:31,150
streams and I think once we get to that

00:54:27,930 --> 00:54:34,390
point then it would make sense to say

00:54:31,150 --> 00:54:37,480
like okay we're gonna give you easy same

00:54:34,390 --> 00:54:41,200
defaults for doing SSE use but right now

00:54:37,480 --> 00:54:42,820
it's like it's total DIY basically so if

00:54:41,200 --> 00:54:46,660
somebody did it I think what would

00:54:42,820 --> 00:54:48,160
really help and what I I've been I'm I'm

00:54:46,660 --> 00:54:48,640
going to admit I'm a really terrible

00:54:48,160 --> 00:54:50,400
person

00:54:48,640 --> 00:54:52,990
I've been copying and pasting this

00:54:50,400 --> 00:54:56,050
stupid little IO object around between

00:54:52,990 --> 00:54:58,390
all of my applications that just spits

00:54:56,050 --> 00:55:01,300
out SS es so I write an object to it and

00:54:58,390 --> 00:55:03,820
it translates that into a JSON object

00:55:01,300 --> 00:55:05,440
that's spit out as an SSE probably

00:55:03,820 --> 00:55:08,940
somebody should write a gem for that

00:55:05,440 --> 00:55:08,940
hint not meet

00:55:09,349 --> 00:55:12,829
I hope that answered your question yeah

00:55:11,930 --> 00:55:16,759
okay

00:55:12,829 --> 00:55:23,569
do we have time anything else last

00:55:16,759 --> 00:55:26,180
question am I gonna come to the spam jam

00:55:23,569 --> 00:55:30,619
festival next summer I didn't know there

00:55:26,180 --> 00:55:34,329
was fun that's awesome if I'm not

00:55:30,619 --> 00:55:40,609
somewhere else yeah totally

00:55:34,329 --> 00:55:43,119
does anyone else like spam yes alright

00:55:40,609 --> 00:55:43,119
thank you

00:55:55,740 --> 00:55:57,800

YouTube URL: https://www.youtube.com/watch?v=kufXhNkm5WU


