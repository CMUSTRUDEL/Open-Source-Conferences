Title: Building iOS Apps with RubyMotion by Ray Hightower
Publication date: 2020-01-28
Playlist: Aloha RubyConf 2012
Description: 
	Help us caption & translate this video!

http://amara.org/v/FGfk/
Captions: 
	00:00:14,900 --> 00:00:20,970
okay good morning good late morning to

00:00:18,570 --> 00:00:22,710
everybody thanks for coming my name is

00:00:20,970 --> 00:00:25,169
Ray hi tara and i'm here to talk to you

00:00:22,710 --> 00:00:28,619
about building iOS apps with ruby motion

00:00:25,169 --> 00:00:30,540
before we do anything what a wonderful

00:00:28,619 --> 00:00:32,970
place to have a conference we're in

00:00:30,540 --> 00:00:36,440
Hawaii ran Honolulu let's give a hand to

00:00:32,970 --> 00:00:36,440
the organizers for putting this together

00:00:37,430 --> 00:00:42,090
lunch too yesterday was great lunch

00:00:40,290 --> 00:00:43,469
today I know is going to be awesome as

00:00:42,090 --> 00:00:45,690
well so thank you for that I know you

00:00:43,469 --> 00:00:47,790
put a lot of work into what what we're

00:00:45,690 --> 00:00:49,230
doing here so thanks for coming so I'm

00:00:47,790 --> 00:00:51,150
going to talk to you about building iOS

00:00:49,230 --> 00:00:52,710
apps with Ruby motion my name is Ray

00:00:51,150 --> 00:00:55,530
Hightower that's me I'll throw that

00:00:52,710 --> 00:00:58,110
slide up at the end bottom line is I run

00:00:55,530 --> 00:00:59,940
a user group called Chicago Ruby and a

00:00:58,110 --> 00:01:03,300
software company called wisdom group we

00:00:59,940 --> 00:01:05,369
build rails and iOS apps and thanks for

00:01:03,300 --> 00:01:07,290
having me here here's our agenda for

00:01:05,369 --> 00:01:10,950
today we're going to go through what why

00:01:07,290 --> 00:01:12,659
how and QA what is Ruby motion why do we

00:01:10,950 --> 00:01:16,049
care how do we do something productive

00:01:12,659 --> 00:01:18,780
with it and QA I I think we'll spend

00:01:16,049 --> 00:01:20,579
more time in the the why and the how

00:01:18,780 --> 00:01:22,200
than any other parts today because I

00:01:20,579 --> 00:01:23,759
think that's where the the meat of the

00:01:22,200 --> 00:01:26,310
top is going to be we will be able to

00:01:23,759 --> 00:01:29,939
answer some questions for you so what

00:01:26,310 --> 00:01:32,639
what is Ruby motion Ruby motion lets you

00:01:29,939 --> 00:01:34,020
as a ruby developer right iOS apps and

00:01:32,639 --> 00:01:37,560
the apps that you're riding with Ruby

00:01:34,020 --> 00:01:39,299
motion are compiled into llvm bytecode

00:01:37,560 --> 00:01:42,810
these are compiled apps they're not

00:01:39,299 --> 00:01:44,369
interpreted in order to run Ruby motion

00:01:42,810 --> 00:01:46,229
you need to have a mat someone is asking

00:01:44,369 --> 00:01:47,609
me earlier if I can do Ruby motion

00:01:46,229 --> 00:01:51,060
without a Mac you actually need a Mac

00:01:47,609 --> 00:01:52,920
running OS 10 and running xcode you by

00:01:51,060 --> 00:01:54,869
Ruby motion for two hundred dollars at

00:01:52,920 --> 00:01:57,509
Ruby motion calm and you need an editor

00:01:54,869 --> 00:01:59,490
I use vim but you can use textmate or

00:01:57,509 --> 00:02:03,840
sublime or emacs or any other editor

00:01:59,490 --> 00:02:07,380
that you prefer excuse me why Ruby

00:02:03,840 --> 00:02:10,289
motion why not just write apps in xcode

00:02:07,380 --> 00:02:12,060
and objective-c on xcode why bother with

00:02:10,289 --> 00:02:13,500
doing it in Ruby well there are a couple

00:02:12,060 --> 00:02:16,380
of reasons why you might look at doing

00:02:13,500 --> 00:02:18,510
that if you need an MVP right now and

00:02:16,380 --> 00:02:21,000
you know Ruby and you need to get that

00:02:18,510 --> 00:02:22,860
MVP done right now then Ruby motion is

00:02:21,000 --> 00:02:25,379
probably the way for you to go now let

00:02:22,860 --> 00:02:26,170
me talk about MVPs for a second MVP is a

00:02:25,379 --> 00:02:28,660
Minimum Viable

00:02:26,170 --> 00:02:30,910
product is defined by Steve Blank in his

00:02:28,660 --> 00:02:33,370
book the four steps to the Epiphany now

00:02:30,910 --> 00:02:35,590
I hear a lot of people attacking an MVP

00:02:33,370 --> 00:02:37,569
by trying to throw features after

00:02:35,590 --> 00:02:39,459
feature after feature into the MVP

00:02:37,569 --> 00:02:41,590
before you get it out of the door that

00:02:39,459 --> 00:02:43,810
main idea behind the MVP is that you

00:02:41,590 --> 00:02:45,670
want something small with the minimum

00:02:43,810 --> 00:02:46,780
number of features that your clients are

00:02:45,670 --> 00:02:48,610
going to need to see in order to

00:02:46,780 --> 00:02:49,930
purchase it and then you put that in

00:02:48,610 --> 00:02:51,850
front of your clients and determine if

00:02:49,930 --> 00:02:53,440
they're going to buy it it's not an

00:02:51,850 --> 00:02:55,090
opportunity to throw a bunch of features

00:02:53,440 --> 00:02:57,010
into something and get it out there you

00:02:55,090 --> 00:02:59,470
want to have a Minimum Viable Product

00:02:57,010 --> 00:03:00,730
minimum and viable at the same time that

00:02:59,470 --> 00:03:03,580
way you'll determine if they want to buy

00:03:00,730 --> 00:03:06,819
the product if you know Ruby already and

00:03:03,580 --> 00:03:09,489
you're building an MVP on iOS Ruby

00:03:06,819 --> 00:03:11,110
motions a great way to go another reason

00:03:09,489 --> 00:03:12,610
to learn Ruby motion is if you want to

00:03:11,110 --> 00:03:14,500
learn Ruby better if you want to learn

00:03:12,610 --> 00:03:17,200
more about Ruby this is a side effect

00:03:14,500 --> 00:03:19,810
that I did not predict as I dived into

00:03:17,200 --> 00:03:24,130
dived of what's the past tense of diet

00:03:19,810 --> 00:03:26,319
well as I dug further into Ruby motion I

00:03:24,130 --> 00:03:28,480
began to learn Ruby better I understand

00:03:26,319 --> 00:03:30,640
more about mix-ins and inheritance and

00:03:28,480 --> 00:03:32,620
modules than I ever did before because I

00:03:30,640 --> 00:03:35,560
came to ruby from rails how many people

00:03:32,620 --> 00:03:37,600
came to ruby from rails the rest of you

00:03:35,560 --> 00:03:41,859
were probably pure rubios beforehand

00:03:37,600 --> 00:03:43,720
well for me I coming to ruby from rails

00:03:41,859 --> 00:03:45,790
means that a lot of things happening in

00:03:43,720 --> 00:03:48,579
the background we're kind of like magic

00:03:45,790 --> 00:03:49,900
but if you attack ruby from ruby motion

00:03:48,579 --> 00:03:52,180
you'll understand why a lot of these

00:03:49,900 --> 00:03:53,890
things are happening and Ruby it really

00:03:52,180 --> 00:03:56,709
is a very beautiful and effective

00:03:53,890 --> 00:03:58,239
language why not Ruby motion well

00:03:56,709 --> 00:04:01,329
there's some good reasons why not if you

00:03:58,239 --> 00:04:03,250
already know objective-c then you

00:04:01,329 --> 00:04:06,010
probably don't need it you probably

00:04:03,250 --> 00:04:07,450
don't want to go that route I did meet a

00:04:06,010 --> 00:04:09,819
guy though who's an objective c

00:04:07,450 --> 00:04:11,980
developer who wants to learn ruby so

00:04:09,819 --> 00:04:14,980
that he can build back ni p is for his

00:04:11,980 --> 00:04:18,340
objective c apps and he sees ruby motion

00:04:14,980 --> 00:04:20,410
as a gateway drug to ruby just as rubios

00:04:18,340 --> 00:04:22,960
may see Ruby motion as a gateway drug to

00:04:20,410 --> 00:04:24,910
objective-c so the bridge is kind of a

00:04:22,960 --> 00:04:26,590
two-way street right there another

00:04:24,910 --> 00:04:28,780
reason you might not want to do Ruby

00:04:26,590 --> 00:04:30,490
motion is if you're concerned about what

00:04:28,780 --> 00:04:33,330
Apple's going to do with Ruby in the

00:04:30,490 --> 00:04:35,710
future what if Apple breaks Ruby motion

00:04:33,330 --> 00:04:37,240
intentionally or otherwise we don't know

00:04:35,710 --> 00:04:38,770
what's going to happen there worst case

00:04:37,240 --> 00:04:39,320
scenario though you'll know a lot more

00:04:38,770 --> 00:04:40,730
about

00:04:39,320 --> 00:04:42,320
Ruby you'll know a lot more about

00:04:40,730 --> 00:04:44,360
object-oriented programming

00:04:42,320 --> 00:04:46,100
object-oriented design and all of the

00:04:44,360 --> 00:04:48,470
all of the things that you need to know

00:04:46,100 --> 00:04:50,930
they're so it's really not a losing

00:04:48,470 --> 00:04:53,780
proposition now let's jump into how

00:04:50,930 --> 00:04:57,530
you've heard me talk enough I'm going to

00:04:53,780 --> 00:05:01,460
show you a demo of let's build a ruby

00:04:57,530 --> 00:05:03,500
motion app I Ruby motion is handled at

00:05:01,460 --> 00:05:04,640
the can the people in the back seat that

00:05:03,500 --> 00:05:07,790
all right or do I need to zoom in a

00:05:04,640 --> 00:05:11,540
little bit should i zoom in zoom in zoom

00:05:07,790 --> 00:05:17,270
in how's that okay and I'll do this

00:05:11,540 --> 00:05:19,250
gotta use moon yeah okay motion so if

00:05:17,270 --> 00:05:20,390
you do motion create hello for example

00:05:19,250 --> 00:05:21,980
we're going to create a Hello app

00:05:20,390 --> 00:05:24,320
there's a bunch of files that it creates

00:05:21,980 --> 00:05:26,360
as when you do motion create hello

00:05:24,320 --> 00:05:33,410
almost looks like you're doing rails new

00:05:26,360 --> 00:05:36,080
I'm going to go into I'm going to go

00:05:33,410 --> 00:05:38,660
into another directory for a Hello after

00:05:36,080 --> 00:05:40,280
that I that I created earlier if you run

00:05:38,660 --> 00:05:43,430
the tree command you'll see the files

00:05:40,280 --> 00:05:45,020
that were created there's a rake foul

00:05:43,430 --> 00:05:48,020
those of us who use Ruby are very

00:05:45,020 --> 00:05:49,880
familiar with rake rake is Ruby make the

00:05:48,020 --> 00:05:52,010
app directory is where we have our app

00:05:49,880 --> 00:05:54,740
delegate and the app delegate is the

00:05:52,010 --> 00:05:56,720
entry point for the application now

00:05:54,740 --> 00:05:58,850
let's go ahead and run it to run your

00:05:56,720 --> 00:06:03,710
Ruby motion application you just run

00:05:58,850 --> 00:06:06,890
rate it looks in the rake file and here

00:06:03,710 --> 00:06:09,290
we go hello Oh magic Ruby I'm at a local

00:06:06,890 --> 00:06:11,960
Ruby well I better fix that what you can

00:06:09,290 --> 00:06:13,520
do is hold down your command key mouse

00:06:11,960 --> 00:06:15,680
over the object right here and you'll

00:06:13,520 --> 00:06:17,990
notice that right here at the command

00:06:15,680 --> 00:06:22,000
prompt this changes when you mouse over

00:06:17,990 --> 00:06:25,310
an object so your mouse over it and

00:06:22,000 --> 00:06:28,300
click it you can grab that object by

00:06:25,310 --> 00:06:28,300
typing self

00:06:28,920 --> 00:06:36,280
see that self dot text says hello magic

00:06:31,810 --> 00:06:39,940
Ruby we don't want it to say that how

00:06:36,280 --> 00:06:42,070
about Aloha because we're at Aloha Ruby

00:06:39,940 --> 00:06:44,380
and let's put an X two exclamation

00:06:42,070 --> 00:06:46,690
points how about that and then you see

00:06:44,380 --> 00:06:48,790
that the the in the simulator in the

00:06:46,690 --> 00:06:50,770
background there it is so while the app

00:06:48,790 --> 00:06:52,450
is running live you can actually go in

00:06:50,770 --> 00:06:55,000
and change the attributes of the app

00:06:52,450 --> 00:06:58,300
live right there in the middle of

00:06:55,000 --> 00:07:06,340
running the app so let's get back to the

00:06:58,300 --> 00:07:07,930
slide okay so that's how and I just

00:07:06,340 --> 00:07:09,280
showed you this I have the slides here

00:07:07,930 --> 00:07:10,660
you know you never know when you're

00:07:09,280 --> 00:07:12,940
doing something live if it's going to

00:07:10,660 --> 00:07:14,650
fail or what have you so we make sure

00:07:12,940 --> 00:07:17,800
that we have what I just showed you in

00:07:14,650 --> 00:07:20,280
the slot and the the command line we

00:07:17,800 --> 00:07:24,340
have in the slides as well so rake it

00:07:20,280 --> 00:07:27,780
compiles there's the directory structure

00:07:24,340 --> 00:07:31,090
the name of the app is hello Ruby and

00:07:27,780 --> 00:07:33,070
here's the structure using the UNIX tree

00:07:31,090 --> 00:07:36,400
command you can see the structure a rake

00:07:33,070 --> 00:07:38,560
file is where we specify things like

00:07:36,400 --> 00:07:40,120
what our icon name is going to be what

00:07:38,560 --> 00:07:42,250
the name of the app is going to be I can

00:07:40,120 --> 00:07:45,010
show the inside of that resources is a

00:07:42,250 --> 00:07:46,750
directory where you drop in your images

00:07:45,010 --> 00:07:48,820
or your wave files if you have some

00:07:46,750 --> 00:07:50,380
audio files going on there it's also

00:07:48,820 --> 00:07:52,870
where you would drop in your interface

00:07:50,380 --> 00:07:54,520
builder files yes for those of you who

00:07:52,870 --> 00:07:56,050
are coming to Ruby motion from

00:07:54,520 --> 00:07:58,030
objective-c if you want to know if you

00:07:56,050 --> 00:07:59,800
can use interface builder with Ruby

00:07:58,030 --> 00:08:03,729
motion yes you can and i'll show you

00:07:59,800 --> 00:08:05,729
that later in this presentation main the

00:08:03,729 --> 00:08:09,910
spec directory is where you put your

00:08:05,729 --> 00:08:13,210
specs which look just like our spec Ruby

00:08:09,910 --> 00:08:15,340
motion uses our r-spec clone called Mac

00:08:13,210 --> 00:08:16,930
bacon and you put your specs you put

00:08:15,340 --> 00:08:20,110
your automated tests in your spec

00:08:16,930 --> 00:08:22,450
directory and all of them in with

00:08:20,110 --> 00:08:25,419
underscore spec and main spec would of

00:08:22,450 --> 00:08:27,430
course be one of those tests and app get

00:08:25,419 --> 00:08:29,229
app delegate that RB is the entry point

00:08:27,430 --> 00:08:31,060
for the application let's take a closer

00:08:29,229 --> 00:08:33,839
look at that now what I did with these

00:08:31,060 --> 00:08:36,550
slides is we have code at the bottom and

00:08:33,839 --> 00:08:39,099
I'm highlighting a line

00:08:36,550 --> 00:08:40,719
highlighting a line of code with the red

00:08:39,099 --> 00:08:44,260
rectangle and it's appearing up here

00:08:40,719 --> 00:08:45,880
enlarge if you can't see that I'm the

00:08:44,260 --> 00:08:48,490
line that I'm focusing on is up at the

00:08:45,880 --> 00:08:51,930
top so AB delegate is the entry point

00:08:48,490 --> 00:08:55,089
for the application this is what what

00:08:51,930 --> 00:08:56,320
what iOS looks for what it starts

00:08:55,089 --> 00:08:58,570
running what it's going to run your

00:08:56,320 --> 00:09:00,790
application and here's your here's where

00:08:58,570 --> 00:09:02,709
you're defining the actual entry point

00:09:00,790 --> 00:09:04,990
which is application did finish

00:09:02,709 --> 00:09:08,019
launching with options what a long

00:09:04,990 --> 00:09:10,690
method lame method method name this

00:09:08,019 --> 00:09:12,610
certainly is not a ruby looking method

00:09:10,690 --> 00:09:15,610
looks more like an objective-c method

00:09:12,610 --> 00:09:17,440
and it is really so you'll see that in

00:09:15,610 --> 00:09:19,899
Ruby motion you'll see some methods that

00:09:17,440 --> 00:09:22,660
look more like Objective C methods there

00:09:19,899 --> 00:09:23,920
is a gem called bubble wrap that is

00:09:22,660 --> 00:09:25,720
wrapping around a lot of these

00:09:23,920 --> 00:09:28,240
objective-c methods and it's making them

00:09:25,720 --> 00:09:31,720
look more Ruby like I'll show that in

00:09:28,240 --> 00:09:33,490
the in the demonstration as well so here

00:09:31,720 --> 00:09:36,730
we go did finish launching with options

00:09:33,490 --> 00:09:38,440
here's where we define the window the

00:09:36,730 --> 00:09:41,020
window essentially what we're telling it

00:09:38,440 --> 00:09:43,540
here is let's create a window alican it

00:09:41,020 --> 00:09:46,029
is is kind of like new you're allocating

00:09:43,540 --> 00:09:48,730
as you wouldn't see you might use malloc

00:09:46,029 --> 00:09:50,829
and see here in objective-c you use Alec

00:09:48,730 --> 00:09:53,680
and we're telling it to take the whole

00:09:50,829 --> 00:09:58,060
screen occupy bounds means take up the

00:09:53,680 --> 00:09:59,860
whole screen we're assigning a root root

00:09:58,060 --> 00:10:02,110
view controller which in this case we're

00:09:59,860 --> 00:10:04,480
calling home controller making it key

00:10:02,110 --> 00:10:06,070
invisible key means this is the window

00:10:04,480 --> 00:10:08,079
that's going to receive user input

00:10:06,070 --> 00:10:10,149
visible means well make it visible and

00:10:08,079 --> 00:10:11,920
here's where we're coloring the

00:10:10,149 --> 00:10:14,170
background color we can change all of

00:10:11,920 --> 00:10:16,570
that the home controller let's go

00:10:14,170 --> 00:10:18,730
through some of the code there it is an

00:10:16,570 --> 00:10:23,800
instance of something called UI view

00:10:18,730 --> 00:10:25,329
controller objective-c uses the Ruby

00:10:23,800 --> 00:10:28,810
motion and Objective C both use the

00:10:25,329 --> 00:10:31,029
model-view-controller paradigm and a

00:10:28,810 --> 00:10:33,339
view controller is what we in rails

00:10:31,029 --> 00:10:34,870
would consider a controller there are

00:10:33,339 --> 00:10:36,160
models their views and their view

00:10:34,870 --> 00:10:38,560
controllers what we would control

00:10:36,160 --> 00:10:43,140
consider a controller in rails as a view

00:10:38,560 --> 00:10:43,140
controller in Ruby motion

00:10:43,230 --> 00:10:49,390
load view is this is where it sits

00:10:46,530 --> 00:10:51,640
indicating exactly what it's inheriting

00:10:49,390 --> 00:10:56,530
from its it's an instance of UI view and

00:10:51,640 --> 00:11:00,040
viewdidload when the view did load this

00:10:56,530 --> 00:11:01,780
is what gets executed we're creating a

00:11:00,040 --> 00:11:05,590
label now the way labels are done in

00:11:01,780 --> 00:11:09,250
Ruby motion this 15 comma 100 that's an

00:11:05,590 --> 00:11:11,890
x and y coordinate your origin 0 0 is in

00:11:09,250 --> 00:11:14,760
your upper left corner and X goes from

00:11:11,890 --> 00:11:20,140
left to right along the top y goes from

00:11:14,760 --> 00:11:22,060
top to bottom along the edge what about

00:11:20,140 --> 00:11:24,000
user experience I got to tell you a

00:11:22,060 --> 00:11:26,380
quick story about this I'm very

00:11:24,000 --> 00:11:28,510
fortunate with in wisdom group to work

00:11:26,380 --> 00:11:31,120
with other people who are much stronger

00:11:28,510 --> 00:11:33,100
with Ruby and much stronger with rails

00:11:31,120 --> 00:11:36,130
and much stronger with design than I am

00:11:33,100 --> 00:11:39,310
one of them are designer the guy who's

00:11:36,130 --> 00:11:40,900
really are cheap designer from time to

00:11:39,310 --> 00:11:42,430
time I'll give a mock-ups of what I

00:11:40,900 --> 00:11:44,320
think something should look like for a

00:11:42,430 --> 00:11:46,270
client we're working on a website or a

00:11:44,320 --> 00:11:47,890
nap for a client now give him this and

00:11:46,270 --> 00:11:49,240
then he'll come back and make it very

00:11:47,890 --> 00:11:51,340
functional because he's a user

00:11:49,240 --> 00:11:53,050
experience professional I was looking

00:11:51,340 --> 00:11:54,580
over his shoulder ones looking at some

00:11:53,050 --> 00:11:56,500
wire frames that we were putting

00:11:54,580 --> 00:11:58,360
together for a client and I noticed that

00:11:56,500 --> 00:12:01,870
he has a directory on his machine that

00:11:58,360 --> 00:12:03,910
says ray playing designer so it was

00:12:01,870 --> 00:12:08,950
which was a clear mockery of my design

00:12:03,910 --> 00:12:11,500
skills which is kind of funny so I don't

00:12:08,950 --> 00:12:13,090
play designer i actually just i'll put

00:12:11,500 --> 00:12:15,340
together some mock-ups and pass them on

00:12:13,090 --> 00:12:17,170
to a designer but if you're going to you

00:12:15,340 --> 00:12:19,150
do user experience there are two things

00:12:17,170 --> 00:12:21,490
that you need one you need a designer

00:12:19,150 --> 00:12:23,800
who really does understand design and

00:12:21,490 --> 00:12:25,810
that designer needs to work with the

00:12:23,800 --> 00:12:28,240
with apple's human interface guidelines

00:12:25,810 --> 00:12:29,980
or the hague you'll hear people in the

00:12:28,240 --> 00:12:31,750
Apple world referring to the hague

00:12:29,980 --> 00:12:35,110
that's what this is it's human interface

00:12:31,750 --> 00:12:37,180
guidelines a set of things that Apple

00:12:35,110 --> 00:12:39,400
has decided that we should do in order

00:12:37,180 --> 00:12:41,740
to be more effective designers and to

00:12:39,400 --> 00:12:45,570
create things that we need of the work

00:12:41,740 --> 00:12:45,570
in order to create more effective apps

00:12:46,010 --> 00:12:51,680
here's UI kit which is a set of classes

00:12:49,880 --> 00:12:53,450
I'm not going to ask you to read all of

00:12:51,680 --> 00:12:56,800
this how go in we're only going to focus

00:12:53,450 --> 00:12:59,510
on six of these classes and UI kit

00:12:56,800 --> 00:13:01,550
everything inherits from nsobject we

00:12:59,510 --> 00:13:03,620
have views we have view controllers we

00:13:01,550 --> 00:13:05,570
have windows labels and table views and

00:13:03,620 --> 00:13:07,520
we're going to use these as we go

00:13:05,570 --> 00:13:09,020
through our next demonstration how many

00:13:07,520 --> 00:13:10,600
of you are familiar with fizzbuzz may be

00:13:09,020 --> 00:13:12,650
done this in a technical interview

00:13:10,600 --> 00:13:13,850
fizzbuzz you might sit down in a

00:13:12,650 --> 00:13:15,560
technical interview where the

00:13:13,850 --> 00:13:18,350
interviewer will ask you to write a

00:13:15,560 --> 00:13:20,390
block of code that counts integers from

00:13:18,350 --> 00:13:22,760
1 to 100 and one to a thousand however

00:13:20,390 --> 00:13:24,620
how've you want to go and when you hit

00:13:22,760 --> 00:13:26,600
and an integer that's a multiple of

00:13:24,620 --> 00:13:28,970
three print fizz if you hit a multiple

00:13:26,600 --> 00:13:32,990
of five print buzz a multiple of 15

00:13:28,970 --> 00:13:36,440
print fizzbuzz so for our next

00:13:32,990 --> 00:13:40,370
demonstration we are going to look at a

00:13:36,440 --> 00:13:43,060
fizzbuzz app do this let me close out

00:13:40,370 --> 00:13:43,060
the simulator

00:13:51,160 --> 00:13:54,839
and let me show you what it looks like

00:14:02,470 --> 00:14:08,480
back to the simulator and starting up

00:14:05,630 --> 00:14:10,550
alright so this is a fizzbuzz that real

00:14:08,480 --> 00:14:13,040
simple we have a label we have an

00:14:10,550 --> 00:14:15,230
increment and decrement in here when i

00:14:13,040 --> 00:14:18,050
increment and when i go to 9i should get

00:14:15,230 --> 00:14:22,670
is 10 should be buzzed what should i get

00:14:18,050 --> 00:14:25,010
at 15 I should get his buzz and there's

00:14:22,670 --> 00:14:27,200
an increment there's a decrement now i

00:14:25,010 --> 00:14:28,790
also have a reset button when i was

00:14:27,200 --> 00:14:30,470
debugging the reset button i thought oh

00:14:28,790 --> 00:14:32,960
wouldn't it be neat if the reset button

00:14:30,470 --> 00:14:35,660
also did something cool like change the

00:14:32,960 --> 00:14:37,220
background and so this is another reason

00:14:35,660 --> 00:14:39,290
why you definitely want to work with a

00:14:37,220 --> 00:14:43,880
designer because that's that's pretty

00:14:39,290 --> 00:14:46,250
ridiculous that's ugly but anyway so

00:14:43,880 --> 00:14:48,350
that's increment that's decrement and

00:14:46,250 --> 00:14:50,930
reset just resets the counter all

00:14:48,350 --> 00:14:53,330
together so if we take a look at this

00:14:50,930 --> 00:14:56,150
close this simulator again let's go back

00:14:53,330 --> 00:14:59,290
to our command line actually I have that

00:14:56,150 --> 00:15:02,600
going in them over here here's the app

00:14:59,290 --> 00:15:04,910
here's the view controller of biz buzz

00:15:02,600 --> 00:15:07,460
view controller is what I called it when

00:15:04,910 --> 00:15:11,360
we load the view what we're doing here

00:15:07,460 --> 00:15:14,120
is we're telling it to pull in a file

00:15:11,360 --> 00:15:16,520
called FBI be that we created in

00:15:14,120 --> 00:15:19,330
interface builder let me show you

00:15:16,520 --> 00:15:19,330
interface builder

00:15:22,070 --> 00:15:28,140
interface builder is a GUI for creating

00:15:25,080 --> 00:15:29,790
gooeys it's a GUI that's part of Xcode

00:15:28,140 --> 00:15:32,220
and if you've done anything with a

00:15:29,790 --> 00:15:34,950
drag-and-drop GUI GUI you can use

00:15:32,220 --> 00:15:36,480
interface builder and essentially what I

00:15:34,950 --> 00:15:38,399
did is I created the interface using

00:15:36,480 --> 00:15:40,110
interface builder at the same time you

00:15:38,399 --> 00:15:46,320
assign to each of the elements in your

00:15:40,110 --> 00:15:48,930
interface a tag number so i signed 1234

00:15:46,320 --> 00:15:53,520
to the label and the buttons as you can

00:15:48,930 --> 00:15:56,160
see in the display you take the file the

00:15:53,520 --> 00:15:59,880
interface builder file that's a dot xib

00:15:56,160 --> 00:16:02,160
file in our case it was FBX I be drop it

00:15:59,880 --> 00:16:03,959
into the resources directory and there

00:16:02,160 --> 00:16:07,230
it is again by the way in resources

00:16:03,959 --> 00:16:11,459
you'll see that we also have the icon

00:16:07,230 --> 00:16:12,899
for this app there's FBI be xib which is

00:16:11,459 --> 00:16:14,670
the interface builder file it's actually

00:16:12,899 --> 00:16:16,680
XML if you open it up you can take a

00:16:14,670 --> 00:16:18,959
look at it it's XML the compiled

00:16:16,680 --> 00:16:21,000
interface builder at file is ni b and

00:16:18,959 --> 00:16:23,490
there's other images there if you want

00:16:21,000 --> 00:16:27,990
to have other images as well it's called

00:16:23,490 --> 00:16:30,630
FBI be and here is the line of code

00:16:27,990 --> 00:16:32,880
where we tell it in the load view method

00:16:30,630 --> 00:16:35,700
that we want to use this interface

00:16:32,880 --> 00:16:40,130
builder file and this is where we tell

00:16:35,700 --> 00:16:42,270
it what tags we want to use the fizzbuzz

00:16:40,130 --> 00:16:44,850
demonstration also used that to

00:16:42,270 --> 00:16:47,339
demonstrate TDD and as I mentioned

00:16:44,850 --> 00:16:51,390
before your specs for tdd go in the spec

00:16:47,339 --> 00:16:53,190
directory and let me show you that live

00:16:51,390 --> 00:16:54,720
because it's all well and good to show

00:16:53,190 --> 00:16:56,550
you to you in the slides but I'll show

00:16:54,720 --> 00:17:00,390
you to it would it show you what it

00:16:56,550 --> 00:17:02,490
actually looks like let's go into this

00:17:00,390 --> 00:17:05,449
is in BIM and if you look in the lower

00:17:02,490 --> 00:17:08,220
pane we actually have the specs this is

00:17:05,449 --> 00:17:10,679
fizzbuzz view controller underscore

00:17:08,220 --> 00:17:12,809
respect RB and the specs if you look at

00:17:10,679 --> 00:17:17,150
this this looks just like our spec if

00:17:12,809 --> 00:17:20,150
you run up want to run this you do rake

00:17:17,150 --> 00:17:20,150
spec

00:17:20,290 --> 00:17:25,250
goes through and it compiles and it runs

00:17:22,790 --> 00:17:27,410
the specs you can use guard with this as

00:17:25,250 --> 00:17:29,900
well so if you want to go back and forth

00:17:27,410 --> 00:17:32,000
with red green refactor can do that if

00:17:29,900 --> 00:17:33,590
you use guard what guard does how many

00:17:32,000 --> 00:17:35,420
people are using guard or spark of

00:17:33,590 --> 00:17:37,100
something like that guard is cool

00:17:35,420 --> 00:17:39,410
because what it does is it watches your

00:17:37,100 --> 00:17:42,380
files and anytime I file changes it goes

00:17:39,410 --> 00:17:45,050
in and it runs your test for you again

00:17:42,380 --> 00:17:48,350
so I'll tell it to go ahead and run

00:17:45,050 --> 00:17:50,000
guard here guard is watching leave that

00:17:48,350 --> 00:18:00,150
out of the way and I'm going to go in

00:17:50,000 --> 00:18:04,920
and just create a failing test here just

00:18:00,150 --> 00:18:06,300
so guards watching let's go back so it's

00:18:04,920 --> 00:18:08,490
going through it's running the tests and

00:18:06,300 --> 00:18:09,960
just like you would with our spec you

00:18:08,490 --> 00:18:11,460
would do your red green refactor so now

00:18:09,960 --> 00:18:13,800
that test is red and we can go in and

00:18:11,460 --> 00:18:16,140
fix it because in fact I'm not a hundred

00:18:13,800 --> 00:18:20,730
percent sure but i think that eight is

00:18:16,140 --> 00:18:22,830
not equal to thirty eight so here we go

00:18:20,730 --> 00:18:25,970
so here goes guard and it's going

00:18:22,830 --> 00:18:25,970
through and it's running the tests again

00:18:29,000 --> 00:18:33,480
one challenge with this something that

00:18:31,320 --> 00:18:35,400
I've had to get used to with Ruby motion

00:18:33,480 --> 00:18:37,980
when you're doing things like running

00:18:35,400 --> 00:18:39,600
tests it's compiling everything and then

00:18:37,980 --> 00:18:41,340
running the test it's got to be a faster

00:18:39,600 --> 00:18:42,930
way to run tests and I'm something I

00:18:41,340 --> 00:18:44,670
have to dig into coming from the Ruby

00:18:42,930 --> 00:18:47,190
world where everything is interpreted we

00:18:44,670 --> 00:18:50,310
can run our tests almost like that so

00:18:47,190 --> 00:18:51,930
that's something that I've got to get a

00:18:50,310 --> 00:18:55,860
little bit used to it maybe there's a

00:18:51,930 --> 00:18:58,020
better way to do that and you saw this

00:18:55,860 --> 00:19:02,190
already home control respek that's where

00:18:58,020 --> 00:19:04,380
we failed there we go now there are some

00:19:02,190 --> 00:19:06,360
gems there's some very cool gems that

00:19:04,380 --> 00:19:08,640
you can use with Ruby motion by the way

00:19:06,360 --> 00:19:12,450
just because you're compiling an app for

00:19:08,640 --> 00:19:14,160
iOS can you not use gems yes you can use

00:19:12,450 --> 00:19:16,020
gems the gems that we use though are

00:19:14,160 --> 00:19:20,070
gems that are specifically designed for

00:19:16,020 --> 00:19:22,170
iOS one such gem is something called for

00:19:20,070 --> 00:19:24,510
motion and what for motion does it

00:19:22,170 --> 00:19:27,390
allows you to create forms that run on

00:19:24,510 --> 00:19:31,130
iOS so if we go into that I've got a for

00:19:27,390 --> 00:19:31,130
motion demo that I can show you

00:19:45,240 --> 00:19:48,450
and first we'll take a look at the forum

00:19:47,100 --> 00:19:49,800
let's take a good look at what it does

00:19:48,450 --> 00:19:52,920
first and then I'll show you the code

00:19:49,800 --> 00:19:55,500
and this is just a basic form it is very

00:19:52,920 --> 00:19:59,070
from the iOS developers that I've talked

00:19:55,500 --> 00:20:01,830
to it's it's it's very time consuming to

00:19:59,070 --> 00:20:04,440
create a form like this but in Ruby

00:20:01,830 --> 00:20:06,270
motion using the form ocean gem what you

00:20:04,440 --> 00:20:09,060
do you can create this with something

00:20:06,270 --> 00:20:12,210
that it looks almost like CSS so I can

00:20:09,060 --> 00:20:15,060
show you that this is it in the bottom

00:20:12,210 --> 00:20:16,980
pane this is it we're specifying the

00:20:15,060 --> 00:20:18,450
title of the different fields that are

00:20:16,980 --> 00:20:20,880
here as I scroll down these are the

00:20:18,450 --> 00:20:23,220
title of the fields and this is the

00:20:20,880 --> 00:20:25,230
switch button so if I go back to the

00:20:23,220 --> 00:20:27,960
simulator I do this let's say I'm

00:20:25,230 --> 00:20:30,480
filling out this form I'm on your

00:20:27,960 --> 00:20:32,370
wonderful iOS app that you just put out

00:20:30,480 --> 00:20:34,800
there and you've got a new subscriber

00:20:32,370 --> 00:20:36,600
named ray Hightower he's a very

00:20:34,800 --> 00:20:38,670
security-conscious to his password is

00:20:36,600 --> 00:20:44,120
password because no one would ever think

00:20:38,670 --> 00:20:46,350
of that and then he logs in and note the

00:20:44,120 --> 00:20:47,760
passwords you don't store passwords and

00:20:46,350 --> 00:20:49,770
clear text normally this is just for

00:20:47,760 --> 00:20:53,850
demonstration purposes just to show you

00:20:49,770 --> 00:20:55,410
that this can collect the data all right

00:20:53,850 --> 00:20:57,810
so that's for motion this is the form

00:20:55,410 --> 00:20:59,790
ocean gem in order to use that going

00:20:57,810 --> 00:21:02,100
back to them for a second in order to

00:20:59,790 --> 00:21:03,690
use that you do have to go into your reg

00:21:02,100 --> 00:21:06,720
file and tell it that you are going to

00:21:03,690 --> 00:21:09,230
require the form ocean gem so that's it

00:21:06,720 --> 00:21:09,230
right here

00:21:11,009 --> 00:21:15,070
alright again this is what I just showed

00:21:13,239 --> 00:21:18,609
you you're requiring the for motion gym

00:21:15,070 --> 00:21:21,429
and this is what creating the forum

00:21:18,609 --> 00:21:22,889
looks like looks almost like CSS so it's

00:21:21,429 --> 00:21:25,210
very simple very straightforward

00:21:22,889 --> 00:21:30,070
relatively easy to update and the change

00:21:25,210 --> 00:21:31,779
and I just showed you that bubble wrap I

00:21:30,070 --> 00:21:34,059
mentioned it earlier actually the

00:21:31,779 --> 00:21:36,549
creator of bubble wrap is here Matt I

00:21:34,059 --> 00:21:38,320
Minetti he's here at the conference so

00:21:36,549 --> 00:21:40,330
you want to talk to him just go up to

00:21:38,320 --> 00:21:43,649
him saying hi thanks for creating bubble

00:21:40,330 --> 00:21:48,070
wrap bubble wrap is a gym that makes

00:21:43,649 --> 00:21:50,289
Ruby motion code or makes iOS code look

00:21:48,070 --> 00:21:54,159
more Ruby like now here's an example of

00:21:50,289 --> 00:21:57,429
this is a chunk of code from in

00:21:54,159 --> 00:22:00,639
objective-c this is the same thing in

00:21:57,429 --> 00:22:03,309
Ruby motion if you want to dig into more

00:22:00,639 --> 00:22:05,830
details about what's going on behind the

00:22:03,309 --> 00:22:08,769
scenes here behind this event or behind

00:22:05,830 --> 00:22:11,440
this method take a look at clay allsups

00:22:08,769 --> 00:22:14,350
blog in fact he's now contributing a lot

00:22:11,440 --> 00:22:16,450
to bubble wrap 24 motion he's doing a

00:22:14,350 --> 00:22:17,529
lot of work out there in the Ruby motion

00:22:16,450 --> 00:22:20,499
world he's one of the people that's

00:22:17,529 --> 00:22:23,470
putting a lot of effort into that so is

00:22:20,499 --> 00:22:26,230
this a good reason to use Ruby motion

00:22:23,470 --> 00:22:28,269
instead of objective-c I'm not sure

00:22:26,230 --> 00:22:29,919
that's true some people say I want to

00:22:28,269 --> 00:22:31,690
use Ruby motion instead of objective-c

00:22:29,919 --> 00:22:33,879
because with Ruby motion I'll do less

00:22:31,690 --> 00:22:36,249
typing but the fact is we're all using

00:22:33,879 --> 00:22:38,700
IDEs with code completion anyway we're

00:22:36,249 --> 00:22:41,289
not typing anyways so is less typing a

00:22:38,700 --> 00:22:42,970
good reason to do it I don't think so I

00:22:41,289 --> 00:22:44,799
think a good reason to look at Ruby

00:22:42,970 --> 00:22:49,659
motion is if you have a background in

00:22:44,799 --> 00:22:51,220
Ruby and you want to build ioss so if

00:22:49,659 --> 00:22:52,690
you're going to use bubble wrap you do

00:22:51,220 --> 00:22:54,369
have to go into the rake foul of your

00:22:52,690 --> 00:22:58,840
app and you have to require bubble wrap

00:22:54,369 --> 00:23:01,299
that's what's done right here and here's

00:22:58,840 --> 00:23:03,279
an example and this comes from NS

00:23:01,299 --> 00:23:06,879
screencasts and actually you know this

00:23:03,279 --> 00:23:09,159
ben sherman who created and in a

00:23:06,879 --> 00:23:11,139
screencast and ben pardon me if I'm

00:23:09,159 --> 00:23:13,119
mispronouncing your last name but been

00:23:11,139 --> 00:23:15,549
chairman when he created this he has

00:23:13,119 --> 00:23:18,369
both domain names in a screencast

00:23:15,549 --> 00:23:20,830
singular and plural where he does goes

00:23:18,369 --> 00:23:22,509
to a demo of bubble wrap and let me show

00:23:20,830 --> 00:23:25,959
you an application that was

00:23:22,509 --> 00:23:27,699
using bubble wrap it looks more like

00:23:25,959 --> 00:23:30,929
what you would want to see if you were

00:23:27,699 --> 00:23:34,559
doing if you were following the hague

00:23:30,929 --> 00:23:34,559
the human interface guidelines

00:23:39,840 --> 00:23:47,039
and what Ben has done is he's created an

00:23:42,720 --> 00:23:49,080
app that goes out to his site and pulls

00:23:47,039 --> 00:23:54,210
up what screen casts are coming up so

00:23:49,080 --> 00:23:59,630
we'll show you that in iOS and this is

00:23:54,210 --> 00:23:59,630
it and if you want to look at the code

00:24:01,190 --> 00:24:06,990
here's his API client and I'll have this

00:24:05,130 --> 00:24:08,940
in the slides afterwards also but as you

00:24:06,990 --> 00:24:11,279
can see in the right file you do have to

00:24:08,940 --> 00:24:13,350
go to the top pane in the tap pain you

00:24:11,279 --> 00:24:16,080
do specify that you're using bubble wrap

00:24:13,350 --> 00:24:17,610
and that you're using bubble wrap HTTP

00:24:16,080 --> 00:24:20,429
so that you can take advantage of what

00:24:17,610 --> 00:24:24,000
bubble debt bubble wrap can do p HTTP

00:24:20,429 --> 00:24:27,029
wise in this in the bottom area the only

00:24:24,000 --> 00:24:28,740
reason I included this line my URL is so

00:24:27,029 --> 00:24:30,299
that I could blow up the code large

00:24:28,740 --> 00:24:34,020
enough for everyone in the room to see

00:24:30,299 --> 00:24:37,429
but you can see that that's included

00:24:34,020 --> 00:24:39,779
here where we're doing an HTTP GET and

00:24:37,429 --> 00:24:44,429
we're grabbing the data here that

00:24:39,779 --> 00:24:47,480
appears in the simulator so that's what

00:24:44,429 --> 00:24:47,480
bubble wrap can do for you

00:24:52,300 --> 00:24:56,500
that's it Ruby tools with Ruby motion

00:24:55,030 --> 00:24:58,750
one of my favorite tools one of my

00:24:56,500 --> 00:25:01,630
favorite Ruby tools is actually our vm

00:24:58,750 --> 00:25:04,060
some people may use RB ENB other people

00:25:01,630 --> 00:25:06,280
use our BM i use our BM i started with

00:25:04,060 --> 00:25:09,010
it and I'm very comfortable with it I

00:25:06,280 --> 00:25:11,860
understand that you can use RB env with

00:25:09,010 --> 00:25:13,480
Ruby motion as well I like it because it

00:25:11,860 --> 00:25:15,610
you know I like to do destructive

00:25:13,480 --> 00:25:18,250
testing when I'm doing development or

00:25:15,610 --> 00:25:19,780
when I'm learning something new and when

00:25:18,250 --> 00:25:21,070
you do destructive testing if you blow

00:25:19,780 --> 00:25:22,630
something up it's always good to know

00:25:21,070 --> 00:25:26,400
that you can just wipe it all out and

00:25:22,630 --> 00:25:28,990
start from scratch that's why I like rbm

00:25:26,400 --> 00:25:31,300
cupertino is a gem how many people have

00:25:28,990 --> 00:25:33,340
dealt with provisioning profiles of iOS

00:25:31,300 --> 00:25:36,280
you ever dealt with that how many people

00:25:33,340 --> 00:25:38,530
enjoy it I don't enjoy it at all it's

00:25:36,280 --> 00:25:41,230
what a pain in the neck if you gem

00:25:38,530 --> 00:25:42,730
install Cupertino then you can handle

00:25:41,230 --> 00:25:45,880
your provisioning profiles from the

00:25:42,730 --> 00:25:47,590
command line and in this case I'm just

00:25:45,880 --> 00:25:49,960
taking a look at the iOS profiles that I

00:25:47,590 --> 00:25:51,910
have on my local machine the app IDs are

00:25:49,960 --> 00:25:54,160
not actual I did change those so that I

00:25:51,910 --> 00:25:56,710
don't have the actual app IDs there but

00:25:54,160 --> 00:26:01,060
that gives you an idea of what cupertino

00:25:56,710 --> 00:26:03,970
can do for you auto layout is a new

00:26:01,060 --> 00:26:05,830
feature of Xcode that allows you to

00:26:03,970 --> 00:26:09,340
specify your layouts for your iOS

00:26:05,830 --> 00:26:11,110
devices in such a way that they behave

00:26:09,340 --> 00:26:14,110
kind of like Twitter bootstrap you can

00:26:11,110 --> 00:26:15,940
specify relative positions for your

00:26:14,110 --> 00:26:18,460
labels and for your buttons and your

00:26:15,940 --> 00:26:21,160
other elements of your user interface so

00:26:18,460 --> 00:26:25,270
auto layout will work with Ruby motion

00:26:21,160 --> 00:26:28,420
as well arc is something that I believe

00:26:25,270 --> 00:26:30,730
it was xcode four arcus automatic

00:26:28,420 --> 00:26:32,380
reference counting bottom line it means

00:26:30,730 --> 00:26:34,420
we no longer have to do memory

00:26:32,380 --> 00:26:38,470
management if we're writing apps in

00:26:34,420 --> 00:26:40,180
objective-c well Ruby motion uses uses

00:26:38,470 --> 00:26:41,710
something that is very similar to our

00:26:40,180 --> 00:26:43,720
kit doesn't use art but you don't have

00:26:41,710 --> 00:26:46,960
to do explicit memory management with

00:26:43,720 --> 00:26:48,970
Ruby motion either finally we're at the

00:26:46,960 --> 00:26:51,430
end of the talk really does it make

00:26:48,970 --> 00:26:53,710
sense to use Ruby motion or objective c

00:26:51,430 --> 00:26:56,020
if you're writing iOS apps and I like

00:26:53,710 --> 00:26:59,170
the way I met a gentleman a few weeks

00:26:56,020 --> 00:27:02,800
ago who asked the question if you were a

00:26:59,170 --> 00:27:03,690
VC and you were using your own money

00:27:02,800 --> 00:27:06,210
spending

00:27:03,690 --> 00:27:08,490
own money on a developer to write an iOS

00:27:06,210 --> 00:27:11,730
app would you hire a developer to use

00:27:08,490 --> 00:27:14,309
Ruby motion or objective-c and that's a

00:27:11,730 --> 00:27:16,649
good question my take is if you already

00:27:14,309 --> 00:27:19,350
have Ruby skills or if your team already

00:27:16,649 --> 00:27:20,940
has Ruby skills I would go with Ruby

00:27:19,350 --> 00:27:23,610
motion because then you can get the MVP

00:27:20,940 --> 00:27:25,860
up and running relatively quickly and if

00:27:23,610 --> 00:27:27,960
that mb MVP flies and you're getting

00:27:25,860 --> 00:27:30,330
paid for it then you have the money to

00:27:27,960 --> 00:27:32,759
pay for more developers be they Ruby

00:27:30,330 --> 00:27:34,950
motion or objective-c developers if you

00:27:32,759 --> 00:27:37,169
have an objective-c background you can

00:27:34,950 --> 00:27:38,429
take a look at Ruby motion because as we

00:27:37,169 --> 00:27:41,759
talked about before it could be a

00:27:38,429 --> 00:27:44,250
gateway drug a gateway or a a bridge to

00:27:41,759 --> 00:27:45,779
Ruby because if you're writing iOS apps

00:27:44,250 --> 00:27:48,929
there's a good chance that you want to

00:27:45,779 --> 00:27:50,549
back end on the web somewhere and that's

00:27:48,929 --> 00:27:52,440
it here are a bunch of resources that

00:27:50,549 --> 00:27:53,759
you might look at type is small for

00:27:52,440 --> 00:27:55,289
those of you who are in the room but

00:27:53,759 --> 00:27:58,500
these slides I've already made these

00:27:55,289 --> 00:28:00,269
slides available at ray Hightower com so

00:27:58,500 --> 00:28:03,570
you can go and take a look at the

00:28:00,269 --> 00:28:12,710
additional resources and that's it thank

00:28:03,570 --> 00:28:15,830
you very much are there any questions

00:28:12,710 --> 00:28:15,830
yes sir

00:28:17,780 --> 00:28:21,630
how do you do segways the question is

00:28:20,190 --> 00:28:24,330
how many how do you do say go is between

00:28:21,630 --> 00:28:26,309
multiple view controllers in Ruby motion

00:28:24,330 --> 00:28:28,440
and I think it's this way an objective-c

00:28:26,309 --> 00:28:30,390
your view controllers are part of an

00:28:28,440 --> 00:28:33,780
array and so you're specifying where you

00:28:30,390 --> 00:28:35,400
are in the array so i think that i think

00:28:33,780 --> 00:28:37,260
that's how it's done an objective-c but

00:28:35,400 --> 00:28:40,950
that's how it's done in in ruby motion

00:28:37,260 --> 00:28:42,630
as well so you you you you segue between

00:28:40,950 --> 00:28:49,880
the controllers by specifying a

00:28:42,630 --> 00:28:49,880
different index in the array yes sir

00:28:55,260 --> 00:28:59,760
the question is have ever encountered

00:28:57,450 --> 00:29:01,710
anything in Ruby motion that I wish I

00:28:59,760 --> 00:29:06,570
could do but that I couldn't do because

00:29:01,710 --> 00:29:08,460
of Ruby motion I haven't yet most of the

00:29:06,570 --> 00:29:11,250
apps that we're working on are not

00:29:08,460 --> 00:29:14,100
really cutting edge in terms of pushing

00:29:11,250 --> 00:29:15,990
the boundaries of Ruby motion I think

00:29:14,100 --> 00:29:18,750
the apps that will really push the

00:29:15,990 --> 00:29:21,540
boundaries of objective-c or of iOS our

00:29:18,750 --> 00:29:23,100
games more so because games that's where

00:29:21,540 --> 00:29:24,180
you want something really fast and

00:29:23,100 --> 00:29:27,540
that's where you're going to be using

00:29:24,180 --> 00:29:29,250
all the attributes of the iOS device but

00:29:27,540 --> 00:29:30,690
for the kinds of business type apps that

00:29:29,250 --> 00:29:32,910
we're doing you know I hate to say

00:29:30,690 --> 00:29:34,680
business apps are boring but if you know

00:29:32,910 --> 00:29:36,390
boring apps make money look at forbes

00:29:34,680 --> 00:29:37,770
magazine they say delta normal

00:29:36,390 --> 00:29:41,280
businesses are the ones that make money

00:29:37,770 --> 00:29:45,560
so there you go i haven't yet but

00:29:41,280 --> 00:29:45,560
hopefully i will yes

00:29:51,810 --> 00:29:56,310
no all the question is are there any key

00:29:54,390 --> 00:29:59,340
features of the iOS device that are not

00:29:56,310 --> 00:30:00,960
accessible through Ruby motion no you

00:29:59,340 --> 00:30:02,850
can get to the accelerometer you can get

00:30:00,960 --> 00:30:05,580
to the camera all of the device because

00:30:02,850 --> 00:30:07,680
what happens is you're writing Ruby code

00:30:05,580 --> 00:30:09,900
but it is compiled for iOS you can

00:30:07,680 --> 00:30:11,430
actually get to the device it's not like

00:30:09,900 --> 00:30:12,780
some of the other tools I'm gonna

00:30:11,430 --> 00:30:14,400
mention them by name but there's some

00:30:12,780 --> 00:30:17,100
other tools out there that allows you to

00:30:14,400 --> 00:30:19,530
write pseudo apps I guess you could say

00:30:17,100 --> 00:30:23,480
but you weren't actually producing the

00:30:19,530 --> 00:30:23,480
bytecode that can run on the iOS device

00:30:23,840 --> 00:30:34,650
yes sir does it translate to objective-c

00:30:30,470 --> 00:30:37,170
yeah what it's doing and I'm just

00:30:34,650 --> 00:30:40,290
starting to study this right now but the

00:30:37,170 --> 00:30:43,410
Ruby motion is actually compiling to

00:30:40,290 --> 00:30:45,450
llvm bytecode and I'm just wrapping my

00:30:43,410 --> 00:30:47,100
head around what llvm I mean it's

00:30:45,450 --> 00:30:49,830
fantastic you're shaking your head which

00:30:47,100 --> 00:30:52,650
means you've probably studied llvm a

00:30:49,830 --> 00:30:54,510
little bit right so for this is this is

00:30:52,650 --> 00:30:56,370
what i know about lob m so far the

00:30:54,510 --> 00:30:57,900
letters stand for low-level virtual

00:30:56,370 --> 00:30:59,550
machine it was called that when it was

00:30:57,900 --> 00:31:01,680
all about virtual machines but since

00:30:59,550 --> 00:31:04,170
then many other tools have been added to

00:31:01,680 --> 00:31:06,690
the llvm toolset so they kept the name

00:31:04,170 --> 00:31:08,550
but it's expanded beyond just a simple

00:31:06,690 --> 00:31:11,490
virtual machine and essentially what it

00:31:08,550 --> 00:31:14,400
is it's the result of a guy's PhD thesis

00:31:11,490 --> 00:31:16,320
in the year 2000 he was developing a

00:31:14,400 --> 00:31:18,990
compiler and developing in a virtual

00:31:16,320 --> 00:31:22,970
machine so lob M includes virtual

00:31:18,990 --> 00:31:26,640
machines a compiler a debugger and the

00:31:22,970 --> 00:31:30,710
big value proposition of llvm is

00:31:26,640 --> 00:31:33,330
portability you right lob you write a

00:31:30,710 --> 00:31:35,730
compiler in llvm so that you can have

00:31:33,330 --> 00:31:38,220
multiple targets in the end in the case

00:31:35,730 --> 00:31:40,050
of Ruby motion your two targets are x86

00:31:38,220 --> 00:31:42,930
which is the simulator that I just

00:31:40,050 --> 00:31:45,780
showed you in this demonstration and arm

00:31:42,930 --> 00:31:49,680
which is the chip that runs inside your

00:31:45,780 --> 00:31:52,290
iOS device so a very long answer to a

00:31:49,680 --> 00:31:57,530
short question right the short answer is

00:31:52,290 --> 00:31:57,530
no llvm so yeah yes sir

00:31:59,509 --> 00:32:02,509
yes

00:32:08,470 --> 00:32:12,880
the question is we talked about doing

00:32:10,690 --> 00:32:14,559
this for a Minimum Viable Product would

00:32:12,880 --> 00:32:16,870
we still want to use it for a full-blown

00:32:14,559 --> 00:32:19,030
solution or would we want to shift over

00:32:16,870 --> 00:32:21,970
to objective-c I think it could work

00:32:19,030 --> 00:32:24,880
well for a full solution as well but I'm

00:32:21,970 --> 00:32:28,720
coming at this from a ruby bias because

00:32:24,880 --> 00:32:31,630
my team is primarily Ruby if we were

00:32:28,720 --> 00:32:34,299
more objective c oriented we might see

00:32:31,630 --> 00:32:38,020
things differently and then I do need to

00:32:34,299 --> 00:32:40,600
emphasize to there is the risk that Ruby

00:32:38,020 --> 00:32:42,159
motion could be broken if if Apple

00:32:40,600 --> 00:32:43,659
decides to do something different I

00:32:42,159 --> 00:32:45,429
don't think that they will do when I

00:32:43,659 --> 00:32:47,799
look at how Apple makes money they make

00:32:45,429 --> 00:32:50,110
a money from every app that gets sold in

00:32:47,799 --> 00:32:51,850
the app store so I don't think that they

00:32:50,110 --> 00:32:54,010
would intentionally want to put a

00:32:51,850 --> 00:32:57,039
restriction in place to prevent you from

00:32:54,010 --> 00:32:58,870
writing and Ruby motion but then I'm not

00:32:57,039 --> 00:33:01,210
in the Apple boardroom and I'm not privy

00:32:58,870 --> 00:33:04,330
to the the internal thinking's of their

00:33:01,210 --> 00:33:06,549
executives so I I don't know but the

00:33:04,330 --> 00:33:08,500
short answer is yes I think you can do

00:33:06,549 --> 00:33:10,840
it but there's some people who may still

00:33:08,500 --> 00:33:13,570
want to write in objective-c so

00:33:10,840 --> 00:33:17,100
definitely MVP and then for the final

00:33:13,570 --> 00:33:17,100
product I think it depends on your team

00:33:17,850 --> 00:33:21,000
yes sir

00:33:26,590 --> 00:33:31,029
Oh the question is is anyone extending

00:33:29,260 --> 00:33:33,010
this into writing Mac OS apps it's

00:33:31,029 --> 00:33:35,049
interesting that you ask about this the

00:33:33,010 --> 00:33:37,450
person who created Ruby motion is laron

00:33:35,049 --> 00:33:39,820
Cincinnati who also is the driving force

00:33:37,450 --> 00:33:41,049
behind Mac Ruby so you know someone

00:33:39,820 --> 00:33:44,799
argue that it's already there in the

00:33:41,049 --> 00:33:47,440
form of Mac Ruby now I don't know yeah

00:33:44,799 --> 00:33:48,580
your question prompts me to ask myself I

00:33:47,440 --> 00:33:51,070
don't know if there are things that

00:33:48,580 --> 00:33:52,840
Laurent has learned as a result of Ruby

00:33:51,070 --> 00:33:54,130
motion that he's turned around and say

00:33:52,840 --> 00:33:55,840
hey you know I think I want to include

00:33:54,130 --> 00:33:58,210
that in Mac Ruby you know so that the

00:33:55,840 --> 00:34:01,929
bridge runs both ways I'm not sure about

00:33:58,210 --> 00:34:03,760
that but in fact if if you if you want

00:34:01,929 --> 00:34:05,830
to learn more about Ruby motion a good

00:34:03,760 --> 00:34:08,710
place to start is the mac ruby book that

00:34:05,830 --> 00:34:10,210
was put out by Al Ahly written by a guy

00:34:08,710 --> 00:34:16,919
who's running around this conference

00:34:10,210 --> 00:34:16,919
Matt I'm an Eddie so yeah yes sir

00:34:20,129 --> 00:34:25,569
storyboards you can use interface

00:34:23,019 --> 00:34:28,359
builder can you use storyboards I don't

00:34:25,569 --> 00:34:30,460
know I have not tried storyboards you

00:34:28,359 --> 00:34:32,769
can help me are you an iOS developer

00:34:30,460 --> 00:34:34,990
objective-c is that your focus you're

00:34:32,769 --> 00:34:37,419
learning right okay from what I

00:34:34,990 --> 00:34:39,609
understand storyboards use interface

00:34:37,419 --> 00:34:42,579
builder and I can use or we can use

00:34:39,609 --> 00:34:44,529
interface builder with Ruby motion so if

00:34:42,579 --> 00:34:46,809
the transitive property applies to

00:34:44,529 --> 00:34:48,849
software development you know a is

00:34:46,809 --> 00:34:50,710
greater than B B's wait and see I would

00:34:48,849 --> 00:34:53,139
think so but I'm not I don't know from

00:34:50,710 --> 00:34:54,999
personal experience that you can but you

00:34:53,139 --> 00:34:56,829
can you can definitely use interface

00:34:54,999 --> 00:34:59,519
builder because I've done you and the

00:34:56,829 --> 00:34:59,519
white shirt you had a question

00:35:17,520 --> 00:35:21,570
yeah the question is can you take

00:35:20,190 --> 00:35:24,120
advantage of packages that have been

00:35:21,570 --> 00:35:26,880
written for for copepods cocoapods is

00:35:24,120 --> 00:35:29,070
Ruby gems for objective-c or can you

00:35:26,880 --> 00:35:29,880
take advantage of other other software

00:35:29,070 --> 00:35:32,730
that has been written in objective-c

00:35:29,880 --> 00:35:35,340
within movie motion yes you can and you

00:35:32,730 --> 00:35:37,380
would use the resources directory for

00:35:35,340 --> 00:35:38,910
that I haven't dug into that yet I've

00:35:37,380 --> 00:35:40,440
seen some screencaps where they've done

00:35:38,910 --> 00:35:42,180
that and I'm seeing some blog articles

00:35:40,440 --> 00:35:43,800
where they have done that so you can

00:35:42,180 --> 00:35:46,140
leverage like if you if you have an

00:35:43,800 --> 00:35:48,570
objective c library or even better if

00:35:46,140 --> 00:35:50,610
you have a see library haven't done this

00:35:48,570 --> 00:35:52,470
yet but i saw this in a street with i

00:35:50,610 --> 00:35:54,060
see this i saw this in a screencast or a

00:35:52,470 --> 00:35:56,010
blog and i get them all mixed up because

00:35:54,060 --> 00:35:59,670
i've just been drinking all this in

00:35:56,010 --> 00:36:03,090
right but opengl for example is written

00:35:59,670 --> 00:36:06,060
in c and you can use opengl with ruby

00:36:03,090 --> 00:36:09,440
motion and I think the Resources

00:36:06,060 --> 00:36:09,440
directory plays a role in that

00:36:13,910 --> 00:36:18,970
any more questions

00:36:16,690 --> 00:36:21,839
so let's go play with Ruby motion thank

00:36:18,970 --> 00:36:21,839
you very much for having

00:36:33,319 --> 00:36:35,380

YouTube URL: https://www.youtube.com/watch?v=3gCsen5Zs4s


