Title: CoffeeScript for the Rubyist by Mark Bates
Publication date: 2020-01-28
Playlist: Aloha RubyConf 2012
Description: 
	Help us caption & translate this video!

http://amara.org/v/FGfn/
Captions: 
	00:00:14,889 --> 00:00:19,670
okay good morning I feel bad for the

00:00:17,840 --> 00:00:24,080
poor sucker who has to follow up Chad

00:00:19,670 --> 00:00:25,610
Fowler oh wait that's me what's worse is

00:00:24,080 --> 00:00:28,669
I've got james edward grey coming on

00:00:25,610 --> 00:00:30,529
right after me so I'm just like wedged

00:00:28,669 --> 00:00:31,759
in between greatness and I'm gonna

00:00:30,529 --> 00:00:33,620
totally will not live up to their

00:00:31,759 --> 00:00:34,880
expectations but anyway we got to talk

00:00:33,620 --> 00:00:37,040
about CoffeeScript this morning because

00:00:34,880 --> 00:00:38,960
it's a ruby conference and you have to

00:00:37,040 --> 00:00:41,630
have at least one talk that's about a

00:00:38,960 --> 00:00:46,699
completely different language and I'm

00:00:41,630 --> 00:00:50,449
that token talk today so Aloha and aloha

00:00:46,699 --> 00:00:52,579
come on I i'll say this early on I've

00:00:50,449 --> 00:00:54,829
got books to give away so when there's

00:00:52,579 --> 00:01:00,859
audience participation it'll bode well

00:00:54,829 --> 00:01:05,210
for you I will promise you one thing

00:01:00,859 --> 00:01:07,670
about this talk cat there will be none

00:01:05,210 --> 00:01:09,890
of them in this talk there'll be no cats

00:01:07,670 --> 00:01:13,729
there'll be no animals of any kind in

00:01:09,890 --> 00:01:14,930
this talk thank you this is an

00:01:13,729 --> 00:01:18,440
animal-free talk i will show you

00:01:14,930 --> 00:01:20,900
pictures of my kids now but just these

00:01:18,440 --> 00:01:22,610
pictures these the only pictures i'll

00:01:20,900 --> 00:01:24,680
show you pictures of my books this is a

00:01:22,610 --> 00:01:26,990
distributed programming with Ruby came

00:01:24,680 --> 00:01:28,700
out in 2009 everybody's showing a copy

00:01:26,990 --> 00:01:31,700
of it because I believe everybody's

00:01:28,700 --> 00:01:34,010
shown a really out of date tech book I

00:01:31,700 --> 00:01:36,560
also wrote programming and coffee script

00:01:34,010 --> 00:01:37,970
which came up this year and it's a it's

00:01:36,560 --> 00:01:39,950
an up-to-date tech book so everybody

00:01:37,970 --> 00:01:43,690
showed one of those two and you get the

00:01:39,950 --> 00:01:45,590
bow that book stop mark Bates calm and

00:01:43,690 --> 00:01:47,030
before I really start talking about

00:01:45,590 --> 00:01:50,240
CoffeeScript I want to give you guys a

00:01:47,030 --> 00:01:54,170
very very very very brief history lesson

00:01:50,240 --> 00:01:56,770
about JavaScript meet Brandon Brandon is

00:01:54,170 --> 00:01:59,450
a developer about 15 16 17 years ago

00:01:56,770 --> 00:02:01,040
working for a little company that is

00:01:59,450 --> 00:02:04,700
doing pretty well in the browser Wars

00:02:01,040 --> 00:02:07,250
and he is tasked with writing a language

00:02:04,700 --> 00:02:10,580
to help script up what happens in the

00:02:07,250 --> 00:02:12,110
browser so he says okay well I need to

00:02:10,580 --> 00:02:15,319
do this I'm gonna write this really cool

00:02:12,110 --> 00:02:16,879
Lisp style language and he does just

00:02:15,319 --> 00:02:21,709
that he writes this really great

00:02:16,879 --> 00:02:24,640
language meet Brandon's boss branna's

00:02:21,709 --> 00:02:26,959
boss comes home one day and says

00:02:24,640 --> 00:02:29,510
look Java is getting really really

00:02:26,959 --> 00:02:31,370
popular so we need to scrap your

00:02:29,510 --> 00:02:33,260
language we need to make another

00:02:31,370 --> 00:02:35,540
language is kind of Java s give it a

00:02:33,260 --> 00:02:37,130
really stupid name like JavaScript so

00:02:35,540 --> 00:02:38,870
people think there's somehow related and

00:02:37,130 --> 00:02:41,390
it becoming the bane of every developers

00:02:38,870 --> 00:02:45,110
existence down the line and we need it

00:02:41,390 --> 00:02:46,819
in a week and that actually happened so

00:02:45,110 --> 00:02:48,590
we ended up with what we know today is

00:02:46,819 --> 00:02:51,950
JavaScript us actually backbone model

00:02:48,590 --> 00:02:53,800
it's kind of a weird hybrid of Java and

00:02:51,950 --> 00:02:58,340
somebody who wrote something in a week

00:02:53,800 --> 00:03:01,220
so you get lots of really weird things

00:02:58,340 --> 00:03:02,510
like some typing but not a lot of it if

00:03:01,220 --> 00:03:05,269
you want a lot of typing by the way

00:03:02,510 --> 00:03:08,060
check out typescript it's a way to make

00:03:05,269 --> 00:03:11,269
JavaScript even more complex so if we

00:03:08,060 --> 00:03:13,910
fast forward about 15 years we can meet

00:03:11,269 --> 00:03:16,519
Jeremy Jeremy is a developer at document

00:03:13,910 --> 00:03:17,959
cloud New York Times and he is the

00:03:16,519 --> 00:03:21,110
writer of a little-known framework

00:03:17,959 --> 00:03:22,610
called backbone no one ever you no one's

00:03:21,110 --> 00:03:24,799
ever heard of it I ignite now just

00:03:22,610 --> 00:03:26,660
ignore it this is a backbone model we

00:03:24,799 --> 00:03:27,950
just talked about and Jeremy's like this

00:03:26,660 --> 00:03:29,720
is really annoying that I have to type

00:03:27,950 --> 00:03:31,790
all this sort of stuff every single time

00:03:29,720 --> 00:03:33,709
I'm working my backbone so Jamie said

00:03:31,790 --> 00:03:37,250
what if I could take this and make it

00:03:33,709 --> 00:03:41,660
look a little more like this and coffee

00:03:37,250 --> 00:03:44,090
script was born so what is coffeescript

00:03:41,660 --> 00:03:45,500
that's a great question according to its

00:03:44,090 --> 00:03:47,780
website it is a little language that

00:03:45,500 --> 00:03:49,489
compiles down a JavaScript I think

00:03:47,780 --> 00:03:54,230
that's probably about the most useless

00:03:49,489 --> 00:03:57,049
sentence ever what does that mean well

00:03:54,230 --> 00:03:59,900
it does what it says but it also easily

00:03:57,049 --> 00:04:02,359
integrates into your current JavaScript

00:03:59,900 --> 00:04:03,950
environment and that is key right a lot

00:04:02,359 --> 00:04:05,840
of people say to me well I like the idea

00:04:03,950 --> 00:04:08,209
of coffee script but all my other stuff

00:04:05,840 --> 00:04:10,220
is JavaScript and I can't use

00:04:08,209 --> 00:04:12,920
coffeescript because that you know I'm

00:04:10,220 --> 00:04:14,780
all JavaScript well good news for you

00:04:12,920 --> 00:04:17,060
because it compiles down to JavaScript

00:04:14,780 --> 00:04:18,500
you can integrate it today you can say

00:04:17,060 --> 00:04:20,000
I'm going to learn coffeescript I'm

00:04:18,500 --> 00:04:23,060
going to write my next little part part

00:04:20,000 --> 00:04:24,979
of my sight in CoffeeScript no problem

00:04:23,060 --> 00:04:27,169
integrates with what you have kind of

00:04:24,979 --> 00:04:30,680
like JRuby accept it actually integrates

00:04:27,169 --> 00:04:33,200
with everything sorry Charles don't

00:04:30,680 --> 00:04:36,440
worry what's the extensions here it's

00:04:33,200 --> 00:04:39,170
easier to write read maintain refactor

00:04:36,440 --> 00:04:41,570
I didn't put the bug in there for a very

00:04:39,170 --> 00:04:43,730
obvious reason but we'll talk a little

00:04:41,570 --> 00:04:46,580
bit about the bugging at the end it is

00:04:43,730 --> 00:04:48,470
also a hybrid Ruby and Python so I

00:04:46,580 --> 00:04:51,860
imagine most people in this room are

00:04:48,470 --> 00:04:55,490
Piper Python people right everybody

00:04:51,860 --> 00:04:59,900
Python awesome because you know

00:04:55,490 --> 00:05:03,380
Ruby but by the way apparently I swear a

00:04:59,900 --> 00:05:05,150
lot in my talks and I only realized that

00:05:03,380 --> 00:05:06,950
when I watched the last video of my talk

00:05:05,150 --> 00:05:09,230
and I was like oh man I'm just dropping

00:05:06,950 --> 00:05:10,730
F bombs all over the place so

00:05:09,230 --> 00:05:14,290
coffeescript is also very helpful and

00:05:10,730 --> 00:05:17,810
that we will talk about its helpfulness

00:05:14,290 --> 00:05:19,910
CoffeeScript is not however magic and it

00:05:17,810 --> 00:05:22,400
is limited by what JavaScript to do

00:05:19,910 --> 00:05:24,170
today and one of those examples I like

00:05:22,400 --> 00:05:26,300
to give especially to a ruby crowd is

00:05:24,170 --> 00:05:28,610
method missing you can't do method

00:05:26,300 --> 00:05:31,610
missing in JavaScript God knows I've

00:05:28,610 --> 00:05:33,380
tried you can't do it but so you can't

00:05:31,610 --> 00:05:36,140
do that in CoffeeScript it's just

00:05:33,380 --> 00:05:38,930
impossible right so CoffeeScript is

00:05:36,140 --> 00:05:41,120
limited by javascripts limitations but

00:05:38,930 --> 00:05:43,430
it does help does try to help make those

00:05:41,120 --> 00:05:46,880
limitations kind of ease off to the

00:05:43,430 --> 00:05:49,100
sides a little bit so this is the number

00:05:46,880 --> 00:05:50,690
one argument i get from CoffeeScript

00:05:49,100 --> 00:05:52,970
people people who never use CoffeeScript

00:05:50,690 --> 00:05:55,730
before I'm happy writing JavaScript I

00:05:52,970 --> 00:05:56,840
don't need to learn another language all

00:05:55,730 --> 00:06:00,190
right and that's that's fine with me

00:05:56,840 --> 00:06:03,200
that's the way you want to be but

00:06:00,190 --> 00:06:04,310
another brief history lesson because

00:06:03,200 --> 00:06:06,260
everybody seems to really like doing

00:06:04,310 --> 00:06:07,640
history lessons in their talks and I'm

00:06:06,260 --> 00:06:09,169
going to butcher this next one so you

00:06:07,640 --> 00:06:12,880
guys gonna love this does anybody know

00:06:09,169 --> 00:06:16,130
what this is assembly who said that

00:06:12,880 --> 00:06:21,080
Charles very good yes it is assembly

00:06:16,130 --> 00:06:22,490
code do you know what it does does

00:06:21,080 --> 00:06:27,530
anybody does anybody know what this

00:06:22,490 --> 00:06:28,910
assembly code does cuz i don't i got

00:06:27,530 --> 00:06:30,200
this off a website i mean the website

00:06:28,910 --> 00:06:33,110
told me what it does and i'm really

00:06:30,200 --> 00:06:37,190
hoping it does that no it actually

00:06:33,110 --> 00:06:39,020
writes Fibonacci numbers because this

00:06:37,190 --> 00:06:41,000
aaron said that is the bet is what alt

00:06:39,020 --> 00:06:42,740
drives all business and all sales and

00:06:41,000 --> 00:06:45,020
advertising is Fibonacci number

00:06:42,740 --> 00:06:46,310
generation and this is the way code was

00:06:45,020 --> 00:06:48,050
written for a while I mean there was a

00:06:46,310 --> 00:06:49,569
point in time where code was written on

00:06:48,050 --> 00:06:53,139
punch cards to and fed it to

00:06:49,569 --> 00:06:54,399
jeans and that worked it was fine why do

00:06:53,139 --> 00:06:56,919
I need to learn another language I know

00:06:54,399 --> 00:06:59,110
assembly i can write programs and then

00:06:56,919 --> 00:07:01,270
someone came up would see and said i can

00:06:59,110 --> 00:07:03,789
write fibonacci numbers much better in c

00:07:01,270 --> 00:07:05,949
than i can and assembly and i was like

00:07:03,789 --> 00:07:07,599
oh awesome c is awesome and c is still

00:07:05,949 --> 00:07:09,279
in use today and then someone came up

00:07:07,599 --> 00:07:11,499
with java and so i can write Fibonacci

00:07:09,279 --> 00:07:13,360
numbers better in Java and it was like

00:07:11,499 --> 00:07:15,909
awesome and now i can write them once

00:07:13,360 --> 00:07:18,969
and run them nowhere and life will be

00:07:15,909 --> 00:07:20,770
wonderful and this is this is where i

00:07:18,969 --> 00:07:24,520
came into the picture i started doing

00:07:20,770 --> 00:07:27,249
java in about 98 99 writing nothing but

00:07:24,520 --> 00:07:29,309
fibonacci sequences for the companies I

00:07:27,249 --> 00:07:31,509
worked for up until two thousand five

00:07:29,309 --> 00:07:34,300
when I was doing what most good

00:07:31,509 --> 00:07:36,369
developers do I was drinking with some

00:07:34,300 --> 00:07:38,589
friends and a friend of mine said hey

00:07:36,369 --> 00:07:40,689
have you heard of Ruby and a particular

00:07:38,589 --> 00:07:42,099
like little language called red little

00:07:40,689 --> 00:07:44,349
framework called rails and it's kind of

00:07:42,099 --> 00:07:45,999
coming out and it's kind of cool and you

00:07:44,349 --> 00:07:50,860
should check into it and I was like well

00:07:45,999 --> 00:07:52,959
you know I like my job with my jsps and

00:07:50,860 --> 00:07:54,999
my aunt build scripts and my hibernate

00:07:52,959 --> 00:07:57,729
and my xml configuration and my struts

00:07:54,999 --> 00:07:59,439
and my javaserver faces and which I was

00:07:57,729 --> 00:08:02,889
her pages and my enterprise javabeans

00:07:59,439 --> 00:08:05,079
and my ide and yeah anyway going on

00:08:02,889 --> 00:08:07,119
sorry I was starting to low myself to

00:08:05,079 --> 00:08:09,039
sleep there and I was like I so I I

00:08:07,119 --> 00:08:11,229
don't need this right why do I need Ruby

00:08:09,039 --> 00:08:13,959
and then I saw a rube Eden here's some

00:08:11,229 --> 00:08:15,550
Fibonacci numbers in Ruby and I was like

00:08:13,959 --> 00:08:18,309
okay that's pretty awesome now i can

00:08:15,550 --> 00:08:20,860
write Fibonacci numbers in Ruby my

00:08:18,309 --> 00:08:22,360
life's gonna be better so there was a

00:08:20,860 --> 00:08:25,689
point in time where I was like well i

00:08:22,360 --> 00:08:27,969
can write an app just as well in java as

00:08:25,689 --> 00:08:30,819
i can a ruby i could not go to web app

00:08:27,969 --> 00:08:32,439
in pretty short time and have it perform

00:08:30,819 --> 00:08:34,779
really well and do all the things that a

00:08:32,439 --> 00:08:38,139
web app needed to do and i could do them

00:08:34,779 --> 00:08:40,599
in Ruby or Java but dammit Ruby did not

00:08:38,139 --> 00:08:42,909
just seemed better it was easier to

00:08:40,599 --> 00:08:44,229
write it was a cleaner simpler you could

00:08:42,909 --> 00:08:46,029
look at it you could quickly understand

00:08:44,229 --> 00:08:47,350
what was going on it was nicer to bring

00:08:46,029 --> 00:08:49,360
new people into the fold they could

00:08:47,350 --> 00:08:52,259
easily find what what the code was doing

00:08:49,360 --> 00:08:54,310
and it wasn't this mass of Java and

00:08:52,259 --> 00:08:56,220
somehow I just ended my presentation

00:08:54,310 --> 00:08:58,120
good night

00:08:56,220 --> 00:09:01,720
thank you very much I'll be here all

00:08:58,120 --> 00:09:03,490
week try the veal there we go okay and

00:09:01,720 --> 00:09:04,780
the same goes for coffee script so of

00:09:03,490 --> 00:09:10,780
course now I have no idea how long I've

00:09:04,780 --> 00:09:13,090
been talking for so let's start with the

00:09:10,780 --> 00:09:14,500
number one thing people hear most often

00:09:13,090 --> 00:09:18,520
about CoffeeScript and that is the

00:09:14,500 --> 00:09:19,810
syntax this is some JavaScript on the

00:09:18,520 --> 00:09:23,320
left and some coffee script on the right

00:09:19,810 --> 00:09:25,090
it's the identical code the thing I like

00:09:23,320 --> 00:09:27,100
most about the CoffeeScript it's not a

00:09:25,090 --> 00:09:28,660
very complex example but what I like

00:09:27,100 --> 00:09:32,230
most about the CoffeeScript here is my

00:09:28,660 --> 00:09:35,410
eye is drawn not to punctuation but

00:09:32,230 --> 00:09:37,600
rather to code I'm i see it and i just

00:09:35,410 --> 00:09:39,970
see code I don't see a lot of kind of

00:09:37,600 --> 00:09:42,130
cruft hanging around it I know exactly

00:09:39,970 --> 00:09:43,630
what's happening it's not significantly

00:09:42,130 --> 00:09:46,150
smaller than the JavaScript one this

00:09:43,630 --> 00:09:48,010
particular example but again it just I

00:09:46,150 --> 00:09:50,160
look at and go okay I can see what's

00:09:48,010 --> 00:09:53,380
going on here I know what's happening

00:09:50,160 --> 00:09:55,090
there are some syntax rules so the good

00:09:53,380 --> 00:09:56,530
news for people in his talk is that we

00:09:55,090 --> 00:09:58,150
will actually look at code and we will

00:09:56,530 --> 00:09:59,200
learn something today the bad news is

00:09:58,150 --> 00:10:01,870
we're going to look at some code I'm

00:09:59,200 --> 00:10:03,190
going to learn something today and that

00:10:01,870 --> 00:10:05,560
second day of a conference in the

00:10:03,190 --> 00:10:07,150
morning after a long night that's not

00:10:05,560 --> 00:10:09,430
always the best idea we're going to do

00:10:07,150 --> 00:10:11,650
our best so there are no semicolons ever

00:10:09,430 --> 00:10:14,080
in CoffeeScript so there is no debate in

00:10:11,650 --> 00:10:15,700
the CoffeeScript community as to should

00:10:14,080 --> 00:10:18,070
use hit a semicolon should you not use

00:10:15,700 --> 00:10:19,990
semicolons you can't the compiler will

00:10:18,070 --> 00:10:21,570
actually kick them out and yell at you

00:10:19,990 --> 00:10:24,010
and tell you that semicolons are bad

00:10:21,570 --> 00:10:25,780
there are no curly braces with a few

00:10:24,010 --> 00:10:28,480
exceptions because every language has

00:10:25,780 --> 00:10:31,180
exceptions there's no function key word

00:10:28,480 --> 00:10:33,700
there was no couple of key words we

00:10:31,180 --> 00:10:35,440
don't have there are relaxed parentheses

00:10:33,700 --> 00:10:38,380
rules and they're very similar to Ruby's

00:10:35,440 --> 00:10:42,460
but again with a few conditions and it

00:10:38,380 --> 00:10:44,740
is white space significant and that's

00:10:42,460 --> 00:10:46,330
when I get all the time but let's look

00:10:44,740 --> 00:10:48,010
at parentheses first before we talk

00:10:46,330 --> 00:10:50,110
about some of the other ones so here are

00:10:48,010 --> 00:10:53,170
some examples of the parentheses rules

00:10:50,110 --> 00:10:56,040
when you are creating a function and as

00:10:53,170 --> 00:10:58,420
we are doing on the left if there are no

00:10:56,040 --> 00:11:00,400
arguments for that function you do not

00:10:58,420 --> 00:11:01,630
need parentheses if there are arguments

00:11:00,400 --> 00:11:04,930
for that function you do need

00:11:01,630 --> 00:11:08,450
parentheses if you are calling a

00:11:04,930 --> 00:11:10,490
function however it's the exact opposite

00:11:08,450 --> 00:11:12,620
if you're calling a function that has no

00:11:10,490 --> 00:11:14,360
arguments you need parentheses if you're

00:11:12,620 --> 00:11:16,400
calling a function that does not have

00:11:14,360 --> 00:11:17,480
arguments as if you're calling function

00:11:16,400 --> 00:11:20,360
with arguments you don't need

00:11:17,480 --> 00:11:23,000
parentheses so this can get you into a

00:11:20,360 --> 00:11:26,060
little bit of trouble as you can see in

00:11:23,000 --> 00:11:28,070
this example here where there's a lack

00:11:26,060 --> 00:11:30,260
of order of precedence the compiler

00:11:28,070 --> 00:11:33,200
doesn't know what I'm calling text on

00:11:30,260 --> 00:11:36,260
the first example so it assumes that i'm

00:11:33,200 --> 00:11:39,350
calling it on the string some ID and not

00:11:36,260 --> 00:11:41,900
the jquery object that i get back so

00:11:39,350 --> 00:11:43,580
that results in some bad JavaScript so

00:11:41,900 --> 00:11:45,020
you end up having use parentheses in

00:11:43,580 --> 00:11:47,950
this case here even though I don't

00:11:45,020 --> 00:11:51,110
technically need them it does preserve

00:11:47,950 --> 00:11:53,870
intent so if you're concerned you don't

00:11:51,110 --> 00:11:55,970
know what to do always err on the side

00:11:53,870 --> 00:11:57,410
of parentheses I don't think anybody's

00:11:55,970 --> 00:11:58,850
ever gonna yell at you go oh why did you

00:11:57,410 --> 00:12:01,550
put parentheses around that method call

00:11:58,850 --> 00:12:03,380
it's very similar to Ruby I personally

00:12:01,550 --> 00:12:06,500
always put parentheses and Ruby calls

00:12:03,380 --> 00:12:10,910
exception of put s statements because

00:12:06,500 --> 00:12:12,680
that makes sense okay so white space I

00:12:10,910 --> 00:12:15,350
get this this is a big argument for me

00:12:12,680 --> 00:12:17,240
people and moan I hate having to

00:12:15,350 --> 00:12:18,410
have white space significant if I wanted

00:12:17,240 --> 00:12:20,420
to be in a white space significant

00:12:18,410 --> 00:12:23,600
language I be doing Python not Ruby and

00:12:20,420 --> 00:12:25,130
that's fine and two to them I asked this

00:12:23,600 --> 00:12:28,910
question do you write your code like

00:12:25,130 --> 00:12:32,180
this or like this because if you do

00:12:28,910 --> 00:12:33,320
you're kind of a douche bag and honestly

00:12:32,180 --> 00:12:36,080
I don't want to work with you because

00:12:33,320 --> 00:12:38,870
this is terrible code you can understand

00:12:36,080 --> 00:12:40,160
it kind of it the first thing I see if I

00:12:38,870 --> 00:12:42,650
saw code like this is I would go and

00:12:40,160 --> 00:12:45,200
format it to something that looked like

00:12:42,650 --> 00:12:47,000
this because that I can read I can

00:12:45,200 --> 00:12:48,920
understand what's happening there so if

00:12:47,000 --> 00:12:50,540
you're already formatting your code to

00:12:48,920 --> 00:12:52,790
be a good developer to be a good citizen

00:12:50,540 --> 00:12:54,140
of the development community what

00:12:52,790 --> 00:12:56,210
difference does it make if it's white

00:12:54,140 --> 00:12:58,100
space significant or not it really

00:12:56,210 --> 00:12:59,390
doesn't the big difference it makes is

00:12:58,100 --> 00:13:02,240
it actually allows the language to be

00:12:59,390 --> 00:13:04,850
cleaned up we can turn that into this we

00:13:02,240 --> 00:13:06,080
no longer need the limiters because we

00:13:04,850 --> 00:13:08,270
already have a delimiter we have white

00:13:06,080 --> 00:13:11,090
space we have new lines already built in

00:13:08,270 --> 00:13:12,980
we're already doing these things right

00:13:11,090 --> 00:13:16,910
this is I know I kept trying to sell

00:13:12,980 --> 00:13:18,110
Python up here and it's terrible but we

00:13:16,910 --> 00:13:21,980
already have these things that we should

00:13:18,110 --> 00:13:25,370
be using them to our to our benefit

00:13:21,980 --> 00:13:29,840
so Ruby scripts and no i'm not going to

00:13:25,370 --> 00:13:32,900
talk about rjs which thankfully died a

00:13:29,840 --> 00:13:34,400
painful painful death i sometimes called

00:13:32,900 --> 00:13:36,080
Oakland refrigerators Ruby script

00:13:34,400 --> 00:13:39,410
because it does look a lot like Ruby and

00:13:36,080 --> 00:13:42,110
I have gotten my wires crossed on

00:13:39,410 --> 00:13:44,030
occasion I'm working away and i'm typing

00:13:42,110 --> 00:13:45,050
and typing typing typing and something

00:13:44,030 --> 00:13:47,150
blows up and I realize I'm in

00:13:45,050 --> 00:13:50,810
CoffeeScript I'm putting ends everywhere

00:13:47,150 --> 00:13:52,970
if this the end and you know and then I

00:13:50,810 --> 00:13:56,540
mean or I mean Ruby and I'm not putting

00:13:52,970 --> 00:13:58,220
the ends it just becomes a big mess but

00:13:56,540 --> 00:14:00,740
it's really fun that's a good mess to

00:13:58,220 --> 00:14:05,570
have I think so here's a little example

00:14:00,740 --> 00:14:06,950
of Ruby script in action we can do if

00:14:05,570 --> 00:14:08,270
statements again we don't need the ends

00:14:06,950 --> 00:14:10,190
the else statements and we can do unless

00:14:08,270 --> 00:14:12,140
brings unless anacapa script brings

00:14:10,190 --> 00:14:15,920
unless in we can do the same line

00:14:12,140 --> 00:14:18,590
conditionals that we do in Ruby which is

00:14:15,920 --> 00:14:21,800
really nice clean that up a little bit

00:14:18,590 --> 00:14:24,230
objects and hashes look a lot more Ruby

00:14:21,800 --> 00:14:25,850
esque there these are three different

00:14:24,230 --> 00:14:28,460
ways we can create the same hash in

00:14:25,850 --> 00:14:30,340
CoffeeScript so the first way is pretty

00:14:28,460 --> 00:14:32,690
common looks just like a regular hash

00:14:30,340 --> 00:14:35,090
with curly braces so here's one of the

00:14:32,690 --> 00:14:38,120
cases we unique curly braces the second

00:14:35,090 --> 00:14:40,430
is the multi-line hash syntax which I

00:14:38,120 --> 00:14:41,810
use constantly and the really nice thing

00:14:40,430 --> 00:14:43,400
about this is you don't need curly

00:14:41,810 --> 00:14:46,100
braces and you don't need commas to

00:14:43,400 --> 00:14:47,990
separate your values so you can as

00:14:46,100 --> 00:14:49,910
you're cutting and pasting stuff into

00:14:47,990 --> 00:14:51,830
this hash at your building and you're

00:14:49,910 --> 00:14:52,790
moving stuff around on the hash you

00:14:51,830 --> 00:14:54,860
don't have to worry about all these

00:14:52,790 --> 00:14:56,240
trailing commas going to bite you in the

00:14:54,860 --> 00:14:58,640
ass when you go to run it in your

00:14:56,240 --> 00:15:00,500
browser coffeescript is using that

00:14:58,640 --> 00:15:03,230
indentation using that significant

00:15:00,500 --> 00:15:05,330
whitespace significance to define where

00:15:03,230 --> 00:15:06,680
your hash is down the bottom and we're

00:15:05,330 --> 00:15:09,410
calling the function we can kind of do a

00:15:06,680 --> 00:15:12,110
ruby style passing in a hash without the

00:15:09,410 --> 00:15:13,520
curly braces you need curly braces if

00:15:12,110 --> 00:15:17,150
you're passing it to hash is obviously

00:15:13,520 --> 00:15:18,980
and here's the JavaScript output for

00:15:17,150 --> 00:15:22,070
that so you can see it all generated the

00:15:18,980 --> 00:15:25,160
same thing coffeescript brings string

00:15:22,070 --> 00:15:26,870
interpolation to JavaScript which is

00:15:25,160 --> 00:15:28,520
nice and it follows the same rules of

00:15:26,870 --> 00:15:32,270
double quote sources single quotes that

00:15:28,520 --> 00:15:34,000
Ruby does and there's a JavaScript if

00:15:32,270 --> 00:15:35,900
you didn't believe me hair docs

00:15:34,000 --> 00:15:37,940
coffeescript brings here docks

00:15:35,900 --> 00:15:40,400
22 JavaScript which is really really

00:15:37,940 --> 00:15:42,650
nice so here building a big old mess of

00:15:40,400 --> 00:15:45,290
HTML which I wouldn't recommend doing

00:15:42,650 --> 00:15:47,420
but it's good for example purposes and

00:15:45,290 --> 00:15:49,520
notice I'm using string interpolation in

00:15:47,420 --> 00:15:51,380
there as well to do hair dachshund

00:15:49,520 --> 00:15:54,020
CoffeeScript you use three double equals

00:15:51,380 --> 00:15:56,360
or three singly oh sorry three double

00:15:54,020 --> 00:15:58,430
quotes or three single quotes to delimit

00:15:56,360 --> 00:16:00,050
your hair docks and if you do is a

00:15:58,430 --> 00:16:01,670
double quote paradox you can do string

00:16:00,050 --> 00:16:04,130
interpolation single quote no

00:16:01,670 --> 00:16:07,130
interpolation and that generates this

00:16:04,130 --> 00:16:09,230
piece of garbage which I would hate to

00:16:07,130 --> 00:16:11,360
code my hand has anybody ever coded like

00:16:09,230 --> 00:16:15,110
an input tag by hand and JavaScript and

00:16:11,360 --> 00:16:16,820
forgot to escape one of the quotes yeah

00:16:15,110 --> 00:16:19,190
exactly you'll have to do that anymore

00:16:16,820 --> 00:16:23,240
that what we's gone let that let that

00:16:19,190 --> 00:16:24,560
you know fade away functions so here we

00:16:23,240 --> 00:16:26,840
are here's some here's an example of

00:16:24,560 --> 00:16:30,140
creating a function function takes one

00:16:26,840 --> 00:16:32,840
argument name and you can call a

00:16:30,140 --> 00:16:36,230
function and that's the javascript i

00:16:32,840 --> 00:16:39,110
believe so when I was looking at this

00:16:36,230 --> 00:16:40,400
function the first time when if really

00:16:39,110 --> 00:16:43,100
first started getting into CoffeeScript

00:16:40,400 --> 00:16:45,590
I struggled with a just a little bit it

00:16:43,100 --> 00:16:47,630
just seemed weird to me the whole stabby

00:16:45,590 --> 00:16:51,770
arrow kind of thing like here's before

00:16:47,630 --> 00:16:53,030
here's an argument do this thing and it

00:16:51,770 --> 00:16:54,230
just I don't know I struggled with it

00:16:53,030 --> 00:16:57,260
and then one day had this realization

00:16:54,230 --> 00:17:00,260
i've seen the syntax before only had I

00:16:57,260 --> 00:17:02,420
seen this in tax ID used the syntax and

00:17:00,260 --> 00:17:05,420
I couldn't figure out where I had seen

00:17:02,420 --> 00:17:09,020
it and I realized it's the Ruby 19

00:17:05,420 --> 00:17:11,660
syntax for lambis just reversed and in

00:17:09,020 --> 00:17:13,339
fact I would argue that the syntax and

00:17:11,660 --> 00:17:16,850
coffee script is actually a little nicer

00:17:13,339 --> 00:17:19,490
than the Ruby 19 syntax for lambdas she

00:17:16,850 --> 00:17:21,980
don't need the extra curly braces so

00:17:19,490 --> 00:17:24,320
once i got that i was like okay this is

00:17:21,980 --> 00:17:29,180
really a very very very similar language

00:17:24,320 --> 00:17:32,300
i see how we do have time okay go loops

00:17:29,180 --> 00:17:35,080
and comprehensions there's loops and

00:17:32,300 --> 00:17:39,070
comprehensions in coffees cover surprise

00:17:35,080 --> 00:17:41,150
you can do loops nothing all that fancy

00:17:39,070 --> 00:17:44,390
actually the array one's pretty nice you

00:17:41,150 --> 00:17:46,030
do for some name and summer Rae pretty

00:17:44,390 --> 00:17:48,320
nice you don't have to type all the I

00:17:46,030 --> 00:17:48,860
equals 0 and the length equals summer

00:17:48,320 --> 00:17:50,600
Rae don't lie

00:17:48,860 --> 00:17:52,780
and as be less than a greater than the

00:17:50,600 --> 00:17:58,040
length and you plus plus it and who

00:17:52,780 --> 00:18:00,170
reminds me of Java you can do ranges in

00:17:58,040 --> 00:18:01,700
array in JavaScript and coffee script

00:18:00,170 --> 00:18:05,750
which is pretty cool and those follow

00:18:01,700 --> 00:18:07,460
the same syntax rules as Ruby does so in

00:18:05,750 --> 00:18:09,920
this case I will create an array of

00:18:07,460 --> 00:18:15,890
numbers from 1 through 5 11 including

00:18:09,920 --> 00:18:17,240
five three dots makes 125 and then I can

00:18:15,890 --> 00:18:19,160
use comprehensions to print that out

00:18:17,240 --> 00:18:21,590
comprehension is like a one line for

00:18:19,160 --> 00:18:23,150
loop so here I could say put those

00:18:21,590 --> 00:18:25,549
numbers out to the log for every number

00:18:23,150 --> 00:18:28,429
that's in that array and that looks like

00:18:25,549 --> 00:18:29,690
this in JavaScript I like to show the

00:18:28,429 --> 00:18:31,820
JavaScript because I think it helps

00:18:29,690 --> 00:18:33,559
people understand these concepts a

00:18:31,820 --> 00:18:36,260
little better and a fun little fact

00:18:33,559 --> 00:18:37,880
about the numbers there that numbers

00:18:36,260 --> 00:18:40,940
array i remember i created a range and

00:18:37,880 --> 00:18:42,710
it's bad out this array and so what

00:18:40,940 --> 00:18:44,929
would happen if i put you know one

00:18:42,710 --> 00:18:48,260
through a thousand all right you don't

00:18:44,929 --> 00:18:50,990
want to have in your code this giant

00:18:48,260 --> 00:18:52,850
block of numbers right so coffeescript

00:18:50,990 --> 00:18:54,500
after a certain number will actually

00:18:52,850 --> 00:18:56,120
just create a turn that into a for loop

00:18:54,500 --> 00:18:58,280
and will print the numbers of push them

00:18:56,120 --> 00:18:59,630
into her in a rag the interesting part

00:18:58,280 --> 00:19:01,309
about this the real reason I bring it up

00:18:59,630 --> 00:19:03,830
is one day I try to figure what that

00:19:01,309 --> 00:19:05,600
cutoff point was and I did some testing

00:19:03,830 --> 00:19:07,850
does anybody know what number it cuts

00:19:05,600 --> 00:19:10,640
off at when it goes from printing them

00:19:07,850 --> 00:19:16,090
all out to a for loop 42 would have been

00:19:10,640 --> 00:19:16,090
an awesome number it is actually 22 I

00:19:16,419 --> 00:19:20,480
have no idea I was like I was like

00:19:18,919 --> 00:19:21,500
counting the numbers of the for loop of

00:19:20,480 --> 00:19:22,970
the letters of the four look from like

00:19:21,500 --> 00:19:25,010
maybe it's 22 characters notes not

00:19:22,970 --> 00:19:26,840
twenty two characters makes no sense to

00:19:25,010 --> 00:19:28,280
me why it's 20 to 20 would have been a

00:19:26,840 --> 00:19:32,200
better number 42 would have been an

00:19:28,280 --> 00:19:35,179
awesome number but it's not you can add

00:19:32,200 --> 00:19:37,130
clauses to list comprehensions in

00:19:35,179 --> 00:19:39,290
CoffeeScript so here we only want to

00:19:37,130 --> 00:19:41,169
print the numbers out in this array when

00:19:39,290 --> 00:19:43,370
the numbers are less than equal to three

00:19:41,169 --> 00:19:45,740
this is it starts getting a little hairy

00:19:43,370 --> 00:19:47,630
here but it's kind of cool and so that's

00:19:45,740 --> 00:19:54,500
what the JavaScript looks like when you

00:19:47,630 --> 00:19:57,559
do that you can take the result of a for

00:19:54,500 --> 00:19:59,809
loop and store that as an array which is

00:19:57,559 --> 00:20:01,940
incredibly helpful so it's kind of like

00:19:59,809 --> 00:20:02,690
a MapReduce function so here I'm

00:20:01,940 --> 00:20:05,540
actually going to

00:20:02,690 --> 00:20:07,070
two times every number by two as long as

00:20:05,540 --> 00:20:08,870
that number is less than equal to three

00:20:07,070 --> 00:20:10,940
and I'm going to get back that into an

00:20:08,870 --> 00:20:14,360
array we have to with the numbers 2 4

00:20:10,940 --> 00:20:16,880
and 6 in it and so you can see how this

00:20:14,360 --> 00:20:19,130
starts getting a little helpful one line

00:20:16,880 --> 00:20:22,310
of jakafi script and I've created a

00:20:19,130 --> 00:20:23,660
dozen lines of JavaScript and I can kind

00:20:22,310 --> 00:20:25,190
of very quickly look at that and know

00:20:23,660 --> 00:20:26,660
what's going on I would necessarily use

00:20:25,190 --> 00:20:28,330
this statement because I think that does

00:20:26,660 --> 00:20:30,590
get a little crazy after a little while

00:20:28,330 --> 00:20:33,160
but it is nice that you can do that and

00:20:30,590 --> 00:20:36,290
you can see how the helpfulness comes in

00:20:33,160 --> 00:20:37,880
classes I mean classes are awesome we

00:20:36,290 --> 00:20:41,270
all love classes we use them in Ruby all

00:20:37,880 --> 00:20:42,470
the time and copyscape lets us do them

00:20:41,270 --> 00:20:44,180
so this is actually a valid class

00:20:42,470 --> 00:20:46,730
definition you can define a class in one

00:20:44,180 --> 00:20:49,190
line of code and coffeescript just class

00:20:46,730 --> 00:20:51,020
employee now have a new employee class I

00:20:49,190 --> 00:20:52,700
can instantiate version instances of it

00:20:51,020 --> 00:20:56,210
and I can play with it just like a

00:20:52,700 --> 00:20:58,580
native class and that's the JavaScript

00:20:56,210 --> 00:21:01,340
for that right i mean javascript does

00:20:58,580 --> 00:21:02,690
not have first-class support for classes

00:21:01,340 --> 00:21:04,520
we all know that as a prototype based

00:21:02,690 --> 00:21:06,350
language it does have support for

00:21:04,520 --> 00:21:08,120
creating new instances of functions and

00:21:06,350 --> 00:21:10,780
that's all coffee scrip is doing is just

00:21:08,120 --> 00:21:13,670
wrapping this kind of boilerplate code

00:21:10,780 --> 00:21:15,950
that we see on the screen to make your

00:21:13,670 --> 00:21:17,420
life little easier I can type one line I

00:21:15,950 --> 00:21:20,710
get this nice boilerplate code and now

00:21:17,420 --> 00:21:23,390
it was great model but I can work with

00:21:20,710 --> 00:21:25,640
here is a little more complex example of

00:21:23,390 --> 00:21:27,740
a class right I've got a constructor

00:21:25,640 --> 00:21:30,080
that gets called every time i initialize

00:21:27,740 --> 00:21:33,590
it I have a salary function which will

00:21:30,080 --> 00:21:35,330
return a salary and then I could call

00:21:33,590 --> 00:21:36,470
that and there's a few interesting parts

00:21:35,330 --> 00:21:38,630
about this class actual want to take a

00:21:36,470 --> 00:21:40,930
moment talk about the first is you

00:21:38,630 --> 00:21:44,840
notice I can do default arguments and

00:21:40,930 --> 00:21:46,310
CoffeeScript just like I can and Ruby so

00:21:44,840 --> 00:21:48,350
here say okay this class going to take

00:21:46,310 --> 00:21:51,020
options as part of its constructor and

00:21:48,350 --> 00:21:53,080
if no options are passed in then set

00:21:51,020 --> 00:21:55,700
them equal to an empty or empty hash

00:21:53,080 --> 00:21:57,950
which is great the other thing that's

00:21:55,700 --> 00:21:59,930
happening in this constructor is one of

00:21:57,950 --> 00:22:03,650
my favorite there I have three things

00:21:59,930 --> 00:22:05,300
three single character bits that happen

00:22:03,650 --> 00:22:07,880
in CoffeeScript and this is the first

00:22:05,300 --> 00:22:10,370
single character a little tip I'm going

00:22:07,880 --> 00:22:13,520
to give to you guys today so this @ sign

00:22:10,370 --> 00:22:15,560
right here at options at musi at in

00:22:13,520 --> 00:22:16,310
CoffeeScript it's essentially replacing

00:22:15,560 --> 00:22:18,350
this dot

00:22:16,310 --> 00:22:20,240
alright so whenever I see this you can

00:22:18,350 --> 00:22:22,430
go okay we look at the salary I can go

00:22:20,240 --> 00:22:24,020
if I look at a salary function it's the

00:22:22,430 --> 00:22:27,440
equivalent of this dot options dot

00:22:24,020 --> 00:22:30,020
salary right but when this constructor I

00:22:27,440 --> 00:22:31,850
actually have the at sign in the

00:22:30,020 --> 00:22:33,740
function call in the actual argument

00:22:31,850 --> 00:22:36,080
list and this is something I wish Ruby

00:22:33,740 --> 00:22:38,210
would do because we do this every day in

00:22:36,080 --> 00:22:40,070
Ruby Dino everybody does this and I just

00:22:38,210 --> 00:22:43,460
really should be in Ruby core so Aaron I

00:22:40,070 --> 00:22:47,090
hope you're listening this needs to be

00:22:43,460 --> 00:22:49,040
in core one of things we do all the time

00:22:47,090 --> 00:22:51,680
in Ruby is we take a constructor other

00:22:49,040 --> 00:22:53,900
other methods and we might say okay

00:22:51,680 --> 00:22:55,460
takes an options or attributes array to

00:22:53,900 --> 00:22:57,470
contribute ash and we do this dot

00:22:55,460 --> 00:22:59,240
attributes equals or sorry self dot

00:22:57,470 --> 00:23:00,950
attributes equals attributes are at

00:22:59,240 --> 00:23:02,030
attributes equals attributes right we've

00:23:00,950 --> 00:23:04,970
all done raise your hand if you've done

00:23:02,030 --> 00:23:07,660
that everybody has done that that's

00:23:04,970 --> 00:23:10,820
happening already in that one character

00:23:07,660 --> 00:23:13,310
so by putting an @ sign there I am

00:23:10,820 --> 00:23:15,800
saying set whatever that up that

00:23:13,310 --> 00:23:17,900
argument is set that equal to this

00:23:15,800 --> 00:23:19,880
options equals options and if we

00:23:17,900 --> 00:23:22,670
actually look at the JavaScript code

00:23:19,880 --> 00:23:24,770
here you can see that is happening in

00:23:22,670 --> 00:23:26,240
this line right here it's a little funky

00:23:24,770 --> 00:23:28,820
because it's doing the default arguments

00:23:26,240 --> 00:23:31,130
too but that's such a nice time saver

00:23:28,820 --> 00:23:33,500
and just makes you code look really nice

00:23:31,130 --> 00:23:35,690
and then we can access it without

00:23:33,500 --> 00:23:38,830
options later in the salary function as

00:23:35,690 --> 00:23:41,060
well and and that's what that looks like

00:23:38,830 --> 00:23:42,380
here we go is the JavaScript for that

00:23:41,060 --> 00:23:44,960
notice the javascript is getting longer

00:23:42,380 --> 00:23:46,160
with each slide as we do more

00:23:44,960 --> 00:23:48,980
interesting things our coffee script

00:23:46,160 --> 00:23:50,360
slides are staying nice and big font but

00:23:48,980 --> 00:23:52,820
the JavaScript slides are getting

00:23:50,360 --> 00:23:55,730
smaller and smaller we can extend

00:23:52,820 --> 00:23:58,550
classes in CoffeeScript so here we have

00:23:55,730 --> 00:24:01,370
the classic bad oo example of a manager

00:23:58,550 --> 00:24:03,830
extending an employee you should not do

00:24:01,370 --> 00:24:04,970
your manager employee relationships like

00:24:03,830 --> 00:24:07,280
this but it's always great for

00:24:04,970 --> 00:24:08,480
demonstration purposes and here we're

00:24:07,280 --> 00:24:10,610
going to take we're going to override

00:24:08,480 --> 00:24:13,550
the salary function and because the

00:24:10,610 --> 00:24:16,100
manager gets a nice big 10k bonus for

00:24:13,550 --> 00:24:18,440
doing whatever managers do and we can

00:24:16,100 --> 00:24:21,230
call the super method just like in Ruby

00:24:18,440 --> 00:24:23,360
and get the results of the salary

00:24:21,230 --> 00:24:26,030
function from the employee class and

00:24:23,360 --> 00:24:27,530
then mix it into our salary function in

00:24:26,030 --> 00:24:29,840
our manager class and give them that

00:24:27,530 --> 00:24:32,120
nice bonus and the argument rule

00:24:29,840 --> 00:24:34,370
for super that apply in Ruby also

00:24:32,120 --> 00:24:36,620
applying coffeescript so here I don't

00:24:34,370 --> 00:24:38,510
pass any arguments to super so any

00:24:36,620 --> 00:24:39,529
arguments that get passed into salary

00:24:38,510 --> 00:24:42,020
will get passed up to super

00:24:39,529 --> 00:24:44,450
automatically or I could pass in my own

00:24:42,020 --> 00:24:48,380
arguments to super and override those

00:24:44,450 --> 00:24:50,539
and then here again the JavaScript gets

00:24:48,380 --> 00:24:56,179
smaller and smaller and tinier and

00:24:50,539 --> 00:24:58,789
tinier bound functions this is the

00:24:56,179 --> 00:25:00,919
second of those single character tidbits

00:24:58,789 --> 00:25:03,559
I wanted to impart upon you tonight or

00:25:00,919 --> 00:25:05,929
today or this morning I had a lot of my

00:25:03,559 --> 00:25:09,049
ties last night so I'm not even sure I'm

00:25:05,929 --> 00:25:11,630
speaking English right now um here we

00:25:09,049 --> 00:25:13,399
could a user class and the user takes a

00:25:11,630 --> 00:25:14,630
name and we're going to say hi to the

00:25:13,399 --> 00:25:16,130
user we have function that says heís

00:25:14,630 --> 00:25:18,049
that user just printed out to the log

00:25:16,130 --> 00:25:20,480
and we've this log method down the

00:25:18,049 --> 00:25:22,850
bottom that takes a call back and then

00:25:20,480 --> 00:25:24,890
inside that log method it'll call that

00:25:22,850 --> 00:25:27,200
callback very similar to how things like

00:25:24,890 --> 00:25:28,880
Jake we're at work right where we do

00:25:27,200 --> 00:25:31,669
something and when the server responds

00:25:28,880 --> 00:25:33,679
we execute some callback function so

00:25:31,669 --> 00:25:35,390
when we do this however we expected to

00:25:33,679 --> 00:25:37,399
say hello Bob hello Mary because those

00:25:35,390 --> 00:25:40,370
are our two users what we actually get

00:25:37,399 --> 00:25:42,529
is hello undefined for both Bob and Mary

00:25:40,370 --> 00:25:45,529
and the reason for this is we have lost

00:25:42,529 --> 00:25:47,149
a scope of what this is this is the part

00:25:45,529 --> 00:25:48,529
this is the part of the talk where it

00:25:47,149 --> 00:25:50,960
gets very complicated because I have to

00:25:48,529 --> 00:25:53,600
use quotes around the word this every

00:25:50,960 --> 00:25:55,610
other word Yahoo de cats what a great

00:25:53,600 --> 00:25:59,059
blog posts about a year ago explaining

00:25:55,610 --> 00:26:00,559
how this works in JavaScript and I

00:25:59,059 --> 00:26:01,880
highly recommend everybody go and read

00:26:00,559 --> 00:26:05,600
it because it's a fascinating read and

00:26:01,880 --> 00:26:08,590
it's a really complex subject so we have

00:26:05,600 --> 00:26:11,720
this problem now we've lost this the

00:26:08,590 --> 00:26:13,159
JavaScript engine doesn't know where

00:26:11,720 --> 00:26:14,450
we're calling that callback from and

00:26:13,159 --> 00:26:16,520
thanks for calling from inside this log

00:26:14,450 --> 00:26:18,049
function which is actually where we are

00:26:16,520 --> 00:26:20,270
calling it from me so it doesn't know it

00:26:18,049 --> 00:26:22,610
lost it has it has a new version of this

00:26:20,270 --> 00:26:25,010
that it's responding to so how do we fix

00:26:22,610 --> 00:26:26,960
that well we could fix it with this a

00:26:25,010 --> 00:26:29,000
hike all we have to say hi function

00:26:26,960 --> 00:26:30,590
we've defined with a single arrow see

00:26:29,000 --> 00:26:32,779
I've nicely highlighted it for you and

00:26:30,590 --> 00:26:35,720
yellow which is apparently very hard to

00:26:32,779 --> 00:26:38,870
do in keynote for some reason so I had

00:26:35,720 --> 00:26:40,730
to fake it anyway so watch that function

00:26:38,870 --> 00:26:43,100
and I'll show you how we can get this

00:26:40,730 --> 00:26:48,650
back the context back

00:26:43,100 --> 00:26:51,400
for our function whoo fat arrow I'll do

00:26:48,650 --> 00:26:55,730
it one more time single arrow

00:26:51,400 --> 00:26:59,919
highlighted fat arrow now if we were to

00:26:55,730 --> 00:27:02,929
run this we get hello Bob in a low Mary

00:26:59,919 --> 00:27:05,030
this is this is a life saver when you're

00:27:02,929 --> 00:27:07,429
doing Ajax requests or any sort of

00:27:05,030 --> 00:27:09,020
requests that go off and do something

00:27:07,429 --> 00:27:11,450
else and are expecting callback

00:27:09,020 --> 00:27:13,490
functions later and you want them to be

00:27:11,450 --> 00:27:15,830
able to work in the context of which

00:27:13,490 --> 00:27:17,270
they were created so in this case i want

00:27:15,830 --> 00:27:19,610
this callback function when it gets

00:27:17,270 --> 00:27:22,190
executed to work in the instance of user

00:27:19,610 --> 00:27:25,520
that it was created it by doing this one

00:27:22,190 --> 00:27:28,159
single character I have captured that

00:27:25,520 --> 00:27:30,580
that binding and and wrapped it around

00:27:28,159 --> 00:27:33,650
that method if we look at the JavaScript

00:27:30,580 --> 00:27:36,950
here's a the same class just without the

00:27:33,650 --> 00:27:38,030
craft of printing stuff out you get a

00:27:36,950 --> 00:27:40,820
little bit better idea of what's

00:27:38,030 --> 00:27:42,320
happening when it creates a new user it

00:27:40,820 --> 00:27:45,110
actually goes in rap sets a high

00:27:42,320 --> 00:27:48,260
function in another function and passes

00:27:45,110 --> 00:27:52,280
original say hi function and this into

00:27:48,260 --> 00:27:54,080
it so it now has a binding for this it's

00:27:52,280 --> 00:27:56,840
a little weird it's a little funky it's

00:27:54,080 --> 00:27:57,740
definitely some JavaScript magic the

00:27:56,840 --> 00:27:59,000
best part is you don't have to

00:27:57,740 --> 00:28:04,850
understand how it works just that it

00:27:59,000 --> 00:28:07,490
does and it'll save you so much time so

00:28:04,850 --> 00:28:10,880
finally one of my favorite features it's

00:28:07,490 --> 00:28:13,730
the last of three characters the

00:28:10,880 --> 00:28:15,110
existential operator you started briefly

00:28:13,730 --> 00:28:20,150
earlier but I'm really talked about it

00:28:15,110 --> 00:28:25,549
if fool ? then logged foo out to the

00:28:20,150 --> 00:28:27,770
screen right with that one ? we have

00:28:25,549 --> 00:28:31,070
told CoffeeScript to check the existence

00:28:27,770 --> 00:28:33,919
of foo and it's better illustrated with

00:28:31,070 --> 00:28:36,440
the JavaScript here so if food is not

00:28:33,919 --> 00:28:40,340
equal undefined and foo is not null then

00:28:36,440 --> 00:28:41,750
we can log to the console really cleans

00:28:40,340 --> 00:28:42,710
up your code makes your life so much

00:28:41,750 --> 00:28:47,450
nice you don't write this stuff

00:28:42,710 --> 00:28:48,980
everywhere but it gets better right and

00:28:47,450 --> 00:28:51,530
this is this is the part where I always

00:28:48,980 --> 00:28:53,480
get really super excited how many people

00:28:51,530 --> 00:28:55,880
here have left a console dot log

00:28:53,480 --> 00:28:57,400
statement in their JavaScript and push

00:28:55,880 --> 00:29:00,680
to production

00:28:57,400 --> 00:29:05,870
okay punch people now how many people

00:29:00,680 --> 00:29:07,370
have done that on IE and if that's the

00:29:05,870 --> 00:29:09,230
point and you only know what happened on

00:29:07,370 --> 00:29:11,060
IE cuz now to excuse IE when the CEO

00:29:09,230 --> 00:29:13,130
comes running in five minutes later

00:29:11,060 --> 00:29:15,590
going the whole site is just stopped

00:29:13,130 --> 00:29:18,950
working what happened and it's like oh

00:29:15,590 --> 00:29:20,780
 there's no console in IE so the

00:29:18,950 --> 00:29:22,070
javascript just blows up and I ease nice

00:29:20,780 --> 00:29:23,840
it doesn't just like the Rays little

00:29:22,070 --> 00:29:29,330
error and continue it just stops

00:29:23,840 --> 00:29:36,680
executing we can do this console ? dot

00:29:29,330 --> 00:29:39,440
log so if the console is defined then do

00:29:36,680 --> 00:29:41,270
console dot log like normal that is

00:29:39,440 --> 00:29:42,770
brilliant so I have my editor setups

00:29:41,270 --> 00:29:44,630
whenever I do console that log it puts a

00:29:42,770 --> 00:29:46,820
little ? in there so I ever forget to

00:29:44,630 --> 00:29:48,380
put it in production if I ever push it

00:29:46,820 --> 00:29:51,100
to production I know it'll keep running

00:29:48,380 --> 00:29:53,990
i know i will be safe but it gets better

00:29:51,100 --> 00:29:56,470
we can chain them we can do more stuff

00:29:53,990 --> 00:29:59,510
with this we could keep adding ? after ?

00:29:56,470 --> 00:30:01,490
function coughed a function call so here

00:29:59,510 --> 00:30:04,280
if the code is a current user and that

00:30:01,490 --> 00:30:05,870
current user has a first name then do

00:30:04,280 --> 00:30:07,510
something with it it gets a little

00:30:05,870 --> 00:30:13,820
funkier the more question marks you add

00:30:07,510 --> 00:30:16,190
but really really nice so my last little

00:30:13,820 --> 00:30:19,670
interesting bit of coffee script before

00:30:16,190 --> 00:30:21,020
I depart here today The Raven has

00:30:19,670 --> 00:30:25,190
anybody ever read The Raven by Edgar

00:30:21,020 --> 00:30:27,050
Allan Poe yeah okay great is anybody

00:30:25,190 --> 00:30:30,800
ever tried to execute the Raven by Edgar

00:30:27,050 --> 00:30:33,950
Allan Poe and a compiler no because it

00:30:30,800 --> 00:30:35,600
is not valid anything but it's a lie it

00:30:33,950 --> 00:30:40,400
is actually semantically valid

00:30:35,600 --> 00:30:42,710
CoffeeScript I have no idea who found

00:30:40,400 --> 00:30:44,360
that out why they found that I was like

00:30:42,710 --> 00:30:46,760
are they typing poems in the copies

00:30:44,360 --> 00:30:49,970
curve compiler hoping that one day they

00:30:46,760 --> 00:30:53,720
will find one that executes and if it

00:30:49,970 --> 00:30:56,750
oops hey man I did it again um oh nice

00:30:53,720 --> 00:30:58,640
I'm getting really crazy over here there

00:30:56,750 --> 00:31:02,770
we go if you don't believe me this is

00:30:58,640 --> 00:31:02,770
the JavaScript that gets compiled

00:31:03,369 --> 00:31:08,419
so that is what the Raven would look

00:31:06,139 --> 00:31:13,999
like in CoffeeScript should you dare

00:31:08,419 --> 00:31:15,470
ever actually try to execute it yeah he

00:31:13,999 --> 00:31:16,519
said it was so awesome i saw at the only

00:31:15,470 --> 00:31:20,239
day i was like I've got to put down the

00:31:16,519 --> 00:31:21,710
slide so celebrity endorsement time if I

00:31:20,239 --> 00:31:25,909
haven't sold you on coffee script yet

00:31:21,710 --> 00:31:28,879
I'm gonna have a couple celebrities come

00:31:25,909 --> 00:31:30,379
up and actually endorse coffeescript the

00:31:28,879 --> 00:31:32,629
first is mad you guys have you guys met

00:31:30,379 --> 00:31:33,710
Matt he's around here somewhere I don't

00:31:32,629 --> 00:31:35,989
think is in the room because oh he was

00:31:33,710 --> 00:31:37,279
going the other talk that's right and we

00:31:35,989 --> 00:31:38,690
went to dinner the other night and matt

00:31:37,279 --> 00:31:39,649
said i would love to give a celebrity

00:31:38,690 --> 00:31:42,849
endorsement but i'm going to the other

00:31:39,649 --> 00:31:45,349
talk which is not much of an endorsement

00:31:42,849 --> 00:31:47,749
but he said you should go to marks talk

00:31:45,349 --> 00:31:49,279
he's like you can quote me on that you

00:31:47,749 --> 00:31:50,509
should go to marks talk I was like

00:31:49,279 --> 00:31:53,479
that's great considering it's gonna be

00:31:50,509 --> 00:31:55,489
the very end of my talk and then over

00:31:53,479 --> 00:31:59,989
the course of dinner he also said by his

00:31:55,489 --> 00:32:02,479
book it's great not necessarily in that

00:31:59,989 --> 00:32:05,960
order but those words eventually came

00:32:02,479 --> 00:32:07,609
out of his mouth and I was like you know

00:32:05,960 --> 00:32:08,840
if they can do that with John Carter and

00:32:07,609 --> 00:32:10,759
put really nice quotes under that piece

00:32:08,840 --> 00:32:14,389
of crap then I can probably do that with

00:32:10,759 --> 00:32:16,419
my talk to Corey Corey Haynes has got to

00:32:14,389 --> 00:32:19,129
come up and he's going to endorse

00:32:16,419 --> 00:32:20,629
coffeescript for you Corey's a big fan

00:32:19,129 --> 00:32:23,229
of coffee a fat chick right let's hear

00:32:20,629 --> 00:32:25,669
for corey haim's ladies and gentlemen

00:32:23,229 --> 00:32:28,759
Corey can just you can just read what's

00:32:25,669 --> 00:32:34,519
on the screen I made the mistake of

00:32:28,759 --> 00:32:37,029
saying I'd read anything when I'm not

00:32:34,519 --> 00:32:39,950
engaged in auto-erotic asphyxiation

00:32:37,029 --> 00:32:43,039
alright CoffeeScript and you should too

00:32:39,950 --> 00:32:47,379
the second one not the first one thank

00:32:43,039 --> 00:32:47,379
you card nor Haynes everybody

00:32:47,520 --> 00:32:53,690
oh he actually said that the other night

00:32:51,000 --> 00:32:56,910
at dinner which is really awesome

00:32:53,690 --> 00:33:01,740
Constantine let's hear for constant

00:32:56,910 --> 00:33:03,120
house everybody Constantine also made

00:33:01,740 --> 00:33:07,860
the pledge to read what was ever on the

00:33:03,120 --> 00:33:11,940
screen so I apologize oh you just want

00:33:07,860 --> 00:33:14,730
me to say that okay I'm not negative I'm

00:33:11,940 --> 00:33:23,070
just German but I'm definitely positive

00:33:14,730 --> 00:33:24,690
about coffeescript anger constitute see

00:33:23,070 --> 00:33:27,570
if you don't believe me they're actual

00:33:24,690 --> 00:33:29,490
celebrities here who'd be more than

00:33:27,570 --> 00:33:32,850
happy to tell you all about coffeescript

00:33:29,490 --> 00:33:34,800
so thank you guys what did not cover I

00:33:32,850 --> 00:33:36,030
didn't cover a ton of things I briefly

00:33:34,800 --> 00:33:37,800
talked about default arguments and

00:33:36,030 --> 00:33:38,880
ranges I didn't talk about splatted

00:33:37,800 --> 00:33:43,410
arguments you can do those in

00:33:38,880 --> 00:33:46,590
CoffeeScript scoping security what do I

00:33:43,410 --> 00:33:48,360
got strict mode common mistakes that get

00:33:46,590 --> 00:33:49,890
generally made in cotton JavaScript

00:33:48,360 --> 00:33:52,110
coffeescript eyes to fix those for you

00:33:49,890 --> 00:33:54,990
is a whole shitload of operators is a do

00:33:52,110 --> 00:33:57,210
keyword there's so much there's so much

00:33:54,990 --> 00:33:59,790
more and i highly recommend you really

00:33:57,210 --> 00:34:03,750
dig into it and i also highly recommend

00:33:59,790 --> 00:34:05,730
you read this book so in case anybody's

00:34:03,750 --> 00:34:08,130
curious programming and coffee script it

00:34:05,730 --> 00:34:10,290
with that I say Mahalo for your time

00:34:08,130 --> 00:34:12,030
I've got books I've got five books to

00:34:10,290 --> 00:34:14,340
give away here so the first people with

00:34:12,030 --> 00:34:16,500
first five people with questions come

00:34:14,340 --> 00:34:19,860
get to come up and pick programming and

00:34:16,500 --> 00:34:21,510
coffee script or the incredibly out of

00:34:19,860 --> 00:34:24,149
date but it's still really useful

00:34:21,510 --> 00:34:28,350
distributed programming with Ruby so

00:34:24,149 --> 00:34:32,880
questions yes you sir oh did you proceed

00:34:28,350 --> 00:34:36,149
google google has dart which compiles to

00:34:32,880 --> 00:34:38,429
JavaScript that does so they're copying

00:34:36,149 --> 00:34:40,320
you that's very commendable well i miss

00:34:38,429 --> 00:34:43,649
you write about me script nominee the

00:34:40,320 --> 00:34:44,940
constant yeah so dart yeah there's been

00:34:43,649 --> 00:34:46,950
there's a bunch of these languages out

00:34:44,940 --> 00:34:48,149
there as i'm sure you guys all know dark

00:34:46,950 --> 00:34:51,630
is one of them and i highly encourage

00:34:48,149 --> 00:34:55,830
you to check out the 25,000 line hello

00:34:51,630 --> 00:34:57,600
world dart example on github which is

00:34:55,830 --> 00:34:58,950
absolutely amazing so you come up and

00:34:57,600 --> 00:35:01,380
grab a book you got whatever book you

00:34:58,950 --> 00:35:05,190
want here yes

00:35:01,380 --> 00:35:06,720
you cover be bugging oh I said I was

00:35:05,190 --> 00:35:09,900
going to cover to bugging damn it I hope

00:35:06,720 --> 00:35:13,049
no one caught that um yes so debugging

00:35:09,900 --> 00:35:15,029
there's a liras in the works there is

00:35:13,049 --> 00:35:19,589
support for you have that one there you

00:35:15,029 --> 00:35:22,380
go good man there is support for maps

00:35:19,589 --> 00:35:24,779
coming out soon line you know mind maps

00:35:22,380 --> 00:35:26,130
back and forth I personally don't have a

00:35:24,779 --> 00:35:29,430
lot of problem with the bugging you

00:35:26,130 --> 00:35:30,900
can't use a debugger which is fine i

00:35:29,430 --> 00:35:32,970
personally don't really use the buggers

00:35:30,900 --> 00:35:35,309
anyway even my java days i never use

00:35:32,970 --> 00:35:37,049
them because i'm crazy in a wild so

00:35:35,309 --> 00:35:40,319
console.log statements get my get my

00:35:37,049 --> 00:35:42,299
goat and when you run in it and you went

00:35:40,319 --> 00:35:44,250
into an error in you know chrome or

00:35:42,299 --> 00:35:46,559
safari fry or whatever you get that line

00:35:44,250 --> 00:35:48,900
number you get the file you know that in

00:35:46,559 --> 00:35:51,480
user your user fought use a view file

00:35:48,900 --> 00:35:54,089
there in the render method this line

00:35:51,480 --> 00:35:55,829
blew up and it maps so close it's it

00:35:54,089 --> 00:35:57,569
really becomes second nature like oh it

00:35:55,829 --> 00:36:00,720
blew up when i was adding to the

00:35:57,569 --> 00:36:02,970
element through jquery like it just it's

00:36:00,720 --> 00:36:05,640
right there it honestly it's not a big

00:36:02,970 --> 00:36:07,289
deal so that's real that's debugging in

00:36:05,640 --> 00:36:10,510
a nutshell you think eventually you will

00:36:07,289 --> 00:36:14,380
have in chrome web developer

00:36:10,510 --> 00:36:16,090
they know the next actions show us do I

00:36:14,380 --> 00:36:17,170
think that in like chrome inspector

00:36:16,090 --> 00:36:19,060
whatever will actually have something

00:36:17,170 --> 00:36:21,040
that will show the CoffeeScript I hope

00:36:19,060 --> 00:36:23,050
that would be really awesome but all the

00:36:21,040 --> 00:36:24,730
major browsers need to get on it I

00:36:23,050 --> 00:36:26,530
imagine it'll get into WebKit eventually

00:36:24,730 --> 00:36:29,140
but the source Maps is going to be huge

00:36:26,530 --> 00:36:30,760
because that really will solve a lot of

00:36:29,140 --> 00:36:32,050
this right so you'll be able to click

00:36:30,760 --> 00:36:33,820
right through and back right back to

00:36:32,050 --> 00:36:36,160
your editor at the exact line where it

00:36:33,820 --> 00:36:38,620
blew up and then they're all set so come

00:36:36,160 --> 00:36:40,980
on come grab a book next question yes

00:36:38,620 --> 00:36:40,980
you sir

00:36:45,740 --> 00:36:50,440
so what converting JavaScript the

00:36:47,990 --> 00:36:50,440
coffee's great

00:36:52,430 --> 00:36:56,450
right so that's a great question what

00:36:54,770 --> 00:36:58,640
I've got a bunch of JavaScript how do I

00:36:56,450 --> 00:37:01,070
go refactor into copy script what's my

00:36:58,640 --> 00:37:02,600
process my process is I always start

00:37:01,070 --> 00:37:04,070
with coffee script but in those cases

00:37:02,600 --> 00:37:06,290
i'll tell you a funny little story i was

00:37:04,070 --> 00:37:08,960
with ob fernandez a few months ago at

00:37:06,290 --> 00:37:10,310
railsconf we're out to dinner and we

00:37:08,960 --> 00:37:12,320
have ins conversation was like oh I just

00:37:10,310 --> 00:37:13,280
I love CoffeeScript it's just awesome i

00:37:12,320 --> 00:37:15,200
use i really love the student actually

00:37:13,280 --> 00:37:16,520
it's fantastic I was like great Obi

00:37:15,200 --> 00:37:18,620
that's really awesome and he goes but

00:37:16,520 --> 00:37:21,770
I'd still don't know how to write it so

00:37:18,620 --> 00:37:23,060
I right all my stuff in JavaScript this

00:37:21,770 --> 00:37:25,580
is true story I right all my stuff in

00:37:23,060 --> 00:37:28,430
JavaScript I paste it into js2 coffee I

00:37:25,580 --> 00:37:30,440
get the CoffeeScript I take that piece

00:37:28,430 --> 00:37:32,510
that back into a coffee file in my rails

00:37:30,440 --> 00:37:34,580
app and then I've got the CoffeeScript

00:37:32,510 --> 00:37:37,250
version of that file so there's a cycle

00:37:34,580 --> 00:37:38,720
js2 convert your JavaScript a coffee and

00:37:37,250 --> 00:37:39,800
does a pretty decent job but the point

00:37:38,720 --> 00:37:41,750
of that story is he's writing it in

00:37:39,800 --> 00:37:43,520
JavaScript converting it to coffee

00:37:41,750 --> 00:37:46,130
script and then rails is converting it

00:37:43,520 --> 00:37:47,420
right back to JavaScript again so i

00:37:46,130 --> 00:37:50,750
would i would argue just write in

00:37:47,420 --> 00:37:52,220
JavaScript the best way and easiest way

00:37:50,750 --> 00:37:53,860
to get started with CoffeeScript is

00:37:52,220 --> 00:37:56,210
start writing your new things in it

00:37:53,860 --> 00:37:58,100
instead of just kind of refracting and

00:37:56,210 --> 00:37:59,480
then you'll get to love coppers group so

00:37:58,100 --> 00:38:01,430
much that that other stuff will start

00:37:59,480 --> 00:38:03,800
getting really annoying and then you say

00:38:01,430 --> 00:38:05,300
okay I'm now going to refactor this you

00:38:03,800 --> 00:38:06,740
know I mean here fixing a bug i really

00:38:05,300 --> 00:38:08,000
hate working with javascript so i'm

00:38:06,740 --> 00:38:09,350
going to take some time few minutes i'm

00:38:08,000 --> 00:38:11,090
going to refactor it it to javascript

00:38:09,350 --> 00:38:13,460
it's a coffee script but check out J

00:38:11,090 --> 00:38:14,900
esta coffee org I think we can just

00:38:13,460 --> 00:38:17,030
paste in your job as get that will spit

00:38:14,900 --> 00:38:19,400
out a bunch of coffee script for you so

00:38:17,030 --> 00:38:23,540
book if you'd like one any other

00:38:19,400 --> 00:38:24,710
questions yes you sir how do i test

00:38:23,540 --> 00:38:29,210
drive my coffee script that is an

00:38:24,710 --> 00:38:32,180
excellent question I use a mocha and

00:38:29,210 --> 00:38:34,580
chai are my preferred JavaScript testing

00:38:32,180 --> 00:38:38,780
frameworks with rails is a great jump

00:38:34,580 --> 00:38:40,700
called camacho kon acha that plugs in

00:38:38,780 --> 00:38:43,670
lets you run command line javascript

00:38:40,700 --> 00:38:46,220
test server brace javascript tests it's

00:38:43,670 --> 00:38:47,810
very our spec ii and really nice is also

00:38:46,220 --> 00:38:49,430
jasmine jasmine is also really good too

00:38:47,810 --> 00:38:51,620
I kind of moved away from jasmine and

00:38:49,430 --> 00:38:53,420
favorite kanata I like the syntax and

00:38:51,620 --> 00:38:57,590
the benefits it gives you a little bit

00:38:53,420 --> 00:38:59,720
more if you do a Google search for me or

00:38:57,590 --> 00:39:02,240
you go to informant on i.t informant I

00:38:59,720 --> 00:39:04,760
tecom there's a two-part article series

00:39:02,240 --> 00:39:05,930
i wrote about setting up rails to test

00:39:04,760 --> 00:39:07,609
javascript and coffee

00:39:05,930 --> 00:39:10,130
and it works with the asset pipeline and

00:39:07,609 --> 00:39:16,579
everything it's fantastic so book if you

00:39:10,130 --> 00:39:18,829
want one you in the corner 0 problems

00:39:16,579 --> 00:39:22,190
integrating with jquery it works with

00:39:18,829 --> 00:39:26,270
every single javascript library on the

00:39:22,190 --> 00:39:29,359
planet so jQuery mootools prototype I'm

00:39:26,270 --> 00:39:32,500
sick protools private prototype any

00:39:29,359 --> 00:39:35,270
obscure javascript file you have found

00:39:32,500 --> 00:39:38,630
it will work with so it's really nice

00:39:35,270 --> 00:39:44,250
come get a book okay Charles your next

00:39:38,630 --> 00:39:47,540
yeah so hop script is going great

00:39:44,250 --> 00:39:47,540
in terms

00:39:54,319 --> 00:39:59,569
they're so it's great question so rails

00:39:56,809 --> 00:40:00,890
has nice support for coffee script right

00:39:59,569 --> 00:40:02,059
out of the box what about other

00:40:00,890 --> 00:40:05,539
frameworks have I use it with other

00:40:02,059 --> 00:40:07,190
things I do use it with Sinatra it's

00:40:05,539 --> 00:40:09,920
very easy to set sprockets in the asset

00:40:07,190 --> 00:40:13,219
pipeline up with Sinatra your I'm

00:40:09,920 --> 00:40:15,259
getting you Constantine it's really nice

00:40:13,219 --> 00:40:17,569
I've had a problem testing my coffee

00:40:15,259 --> 00:40:19,190
script with Sinatra but I'm actively

00:40:17,569 --> 00:40:22,400
working on kind of porting the kamacho

00:40:19,190 --> 00:40:24,829
gem over to Sinatra support Sinatra as

00:40:22,400 --> 00:40:27,049
well so that'll be really nice I've

00:40:24,829 --> 00:40:30,410
written a lot of just straight HTML

00:40:27,049 --> 00:40:32,089
projects and use coffee script and guard

00:40:30,410 --> 00:40:33,589
or coffeescript coffeescript has a

00:40:32,089 --> 00:40:35,029
watcher as well they've compiled down

00:40:33,589 --> 00:40:36,949
the JavaScript so you can serve it up

00:40:35,029 --> 00:40:38,749
statically so it's actually pretty easy

00:40:36,949 --> 00:40:41,180
to integrate and node has built-in

00:40:38,749 --> 00:40:42,170
support for it so if you are writing no

00:40:41,180 --> 00:40:44,420
taps you can write the mall in

00:40:42,170 --> 00:40:46,849
CoffeeScript really easily so that

00:40:44,420 --> 00:40:48,650
answer your question awesome sorry no

00:40:46,849 --> 00:40:51,699
more books take the last night's up to

00:40:48,650 --> 00:40:51,699
yes fasting

00:41:02,289 --> 00:41:05,160
single

00:41:23,300 --> 00:41:29,060
well everybody hear that constant was

00:41:26,600 --> 00:41:31,010
saying that rake pipeline is a great

00:41:29,060 --> 00:41:33,380
alternative for compiling our assets

00:41:31,010 --> 00:41:35,180
that's not rail specific so maybe i'll

00:41:33,380 --> 00:41:37,340
check that out for my Sinatra problem

00:41:35,180 --> 00:41:39,500
that I'm having which is great and

00:41:37,340 --> 00:41:40,730
Sinatra also supports CoffeeScript as a

00:41:39,500 --> 00:41:42,800
templating language so if you're

00:41:40,730 --> 00:41:45,170
responding to a je s request through

00:41:42,800 --> 00:41:48,230
Sinatra or JSON request new Sinatra you

00:41:45,170 --> 00:41:50,390
can create coffee views return those

00:41:48,230 --> 00:41:55,190
which is pretty awesome so great any

00:41:50,390 --> 00:41:56,330
other questions question yes even though

00:41:55,190 --> 00:42:00,110
they don't do exactly the same thing

00:41:56,330 --> 00:42:02,180
from what I gather can you give a dark

00:42:00,110 --> 00:42:04,130
for example can you give another one or

00:42:02,180 --> 00:42:05,810
two competitors to pop the script and

00:42:04,130 --> 00:42:07,910
why you think coffees critical went out

00:42:05,810 --> 00:42:10,910
in short-term let's say that's five ten

00:42:07,910 --> 00:42:12,620
years ok so the question was there a

00:42:10,910 --> 00:42:13,730
bunch of competitors and very similar

00:42:12,620 --> 00:42:15,980
languages can I give it a couple

00:42:13,730 --> 00:42:18,680
examples of them and why I think

00:42:15,980 --> 00:42:20,810
coffeescript is better it's a correct so

00:42:18,680 --> 00:42:22,570
the two big one well the big one up to

00:42:20,810 --> 00:42:25,430
date today I would say would be dart

00:42:22,570 --> 00:42:28,760
dart has gotten very little traction and

00:42:25,430 --> 00:42:31,670
very little community mostly because it

00:42:28,760 --> 00:42:34,340
actually requires a dart kind of vm to

00:42:31,670 --> 00:42:38,870
run which is why the hello world is

00:42:34,340 --> 00:42:40,070
25,000 lines so CoffeeScript doesn't

00:42:38,870 --> 00:42:42,290
require that because it's just developed

00:42:40,070 --> 00:42:44,180
it just creates idiomatic JavaScript

00:42:42,290 --> 00:42:46,730
like we run in any JavaScript

00:42:44,180 --> 00:42:49,160
environment so that's a huge huge win in

00:42:46,730 --> 00:42:51,740
CoffeeScript favor Microsoft just

00:42:49,160 --> 00:42:54,290
announced typescript last week and

00:42:51,740 --> 00:42:57,440
typescript as I mentioned earlier add

00:42:54,290 --> 00:43:01,310
strong typing to JavaScript because

00:42:57,440 --> 00:43:02,570
that's what we all wanted so I guess

00:43:01,310 --> 00:43:04,460
that's an exact if you really like

00:43:02,570 --> 00:43:05,900
strong typing and you come from

00:43:04,460 --> 00:43:08,570
Microsoft background it's got

00:43:05,900 --> 00:43:10,490
intellisense support apparently because

00:43:08,570 --> 00:43:11,960
that 50 minutes of the video 49 minutes

00:43:10,490 --> 00:43:14,180
of him is showing off code completion

00:43:11,960 --> 00:43:16,550
and one minute is talking about static

00:43:14,180 --> 00:43:18,380
typing so yeah I haven't actually had a

00:43:16,550 --> 00:43:20,150
chance to play with it I probably won't

00:43:18,380 --> 00:43:23,000
play with it I think coffee script is

00:43:20,150 --> 00:43:26,300
nice I think it and both in both dark

00:43:23,000 --> 00:43:28,550
and jobs in typescript and things like

00:43:26,300 --> 00:43:30,980
GWT which is a google web toolkit we can

00:43:28,550 --> 00:43:32,990
write your javascript in java i think

00:43:30,980 --> 00:43:35,180
are actually making the problem more

00:43:32,990 --> 00:43:36,680
complicated and they're trying to i

00:43:35,180 --> 00:43:38,329
think they're extracting in the wrong

00:43:36,680 --> 00:43:41,210
erections right there trying to abstract

00:43:38,329 --> 00:43:43,040
to the things that people know and

00:43:41,210 --> 00:43:45,890
understand and kind of cling to and

00:43:43,040 --> 00:43:47,569
these kind of older enterprise-e kind of

00:43:45,890 --> 00:43:49,339
systems right we're people like I know

00:43:47,569 --> 00:43:51,440
my job I don't want to leave my job I

00:43:49,339 --> 00:43:54,619
love my java so let's make my JavaScript

00:43:51,440 --> 00:43:56,390
look like Java even more where's coffee

00:43:54,619 --> 00:43:57,859
script is saying hey we can improve upon

00:43:56,390 --> 00:44:00,530
this language we can make this a better

00:43:57,859 --> 00:44:03,230
language and in future versions of ECMO

00:44:00,530 --> 00:44:04,910
script they're actually taking some of

00:44:03,230 --> 00:44:07,430
this stuff that's in CoffeeScript and

00:44:04,910 --> 00:44:09,650
making it part of xmas script in the

00:44:07,430 --> 00:44:11,990
future so you can actually expect to see

00:44:09,650 --> 00:44:14,630
things like the fat arrow coming into

00:44:11,990 --> 00:44:16,280
JavaScript in a few years time so

00:44:14,630 --> 00:44:18,410
coffeescript is a great way to get your

00:44:16,280 --> 00:44:20,030
feet wet today on what the future of

00:44:18,410 --> 00:44:22,609
JavaScript development is going to be in

00:44:20,030 --> 00:44:33,950
a few years so there you go other

00:44:22,609 --> 00:44:35,410
questions okay yes temptem a so what was

00:44:33,950 --> 00:44:40,040
that can you repeat that question

00:44:35,410 --> 00:44:42,650
multiple inheritance no no multiple

00:44:40,040 --> 00:44:44,900
inheritance yeah don't don't ever do

00:44:42,650 --> 00:44:46,780
multiple hairnets anyway Corey Haines be

00:44:44,900 --> 00:44:49,369
more than happy to yell at you for that

00:44:46,780 --> 00:44:50,990
for thinking about it with that said I

00:44:49,369 --> 00:44:53,240
think I'm out of time so a well-placed

00:44:50,990 --> 00:44:55,400
might I later will have me answer all of

00:44:53,240 --> 00:44:58,869
your questions should you have them so

00:44:55,400 --> 00:44:58,869
thank you guys very much appreciate

00:45:09,580 --> 00:45:11,640

YouTube URL: https://www.youtube.com/watch?v=T1VE4soWzgw


