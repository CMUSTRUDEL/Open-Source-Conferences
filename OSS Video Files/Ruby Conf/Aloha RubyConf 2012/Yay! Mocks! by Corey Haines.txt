Title: Yay! Mocks! by Corey Haines
Publication date: 2020-01-28
Playlist: Aloha RubyConf 2012
Description: 
	Help us caption & translate this video!

http://amara.org/v/FGgX/
Captions: 
	00:00:14,640 --> 00:00:21,030
all right everyone having a good day

00:00:21,240 --> 00:00:28,060
there we go that's better I just wanted

00:00:26,439 --> 00:00:33,550
to let you all know that it's really

00:00:28,060 --> 00:00:35,020
beautiful outside not to do anything all

00:00:33,550 --> 00:00:37,150
right well thanks looks like we're gonna

00:00:35,020 --> 00:00:40,330
get started I don't have a lot of

00:00:37,150 --> 00:00:43,239
pictures of my cat yawning but I do have

00:00:40,330 --> 00:00:46,390
a lot of pictures of her sticking her

00:00:43,239 --> 00:00:50,020
arms out as far as she can we call our

00:00:46,390 --> 00:00:53,290
long arm of the claw because how many of

00:00:50,020 --> 00:00:55,920
you guys have cats how many of you have

00:00:53,290 --> 00:01:00,670
a cute little name for your cat that you

00:00:55,920 --> 00:01:02,770
whisper in their ear admit it yeah I do

00:01:00,670 --> 00:01:08,700
we always call her long I'm with call

00:01:02,770 --> 00:01:11,770
that's Zach despite the name it's a she

00:01:08,700 --> 00:01:13,690
which is always fun when you take her to

00:01:11,770 --> 00:01:16,509
the vet and they go oh how's he doing

00:01:13,690 --> 00:01:17,920
you're like it's a she you always have

00:01:16,509 --> 00:01:21,760
to go through that mental thing of do I

00:01:17,920 --> 00:01:26,040
bother mentioning it but you always do

00:01:21,760 --> 00:01:29,170
because you know look at her okay so

00:01:26,040 --> 00:01:31,900
today I wanted to talk about something

00:01:29,170 --> 00:01:33,909
that I've been thinking about a lot as I

00:01:31,900 --> 00:01:36,540
go around and work with people and I

00:01:33,909 --> 00:01:40,869
watch other people's presentations and

00:01:36,540 --> 00:01:42,939
deal with a topic that is near and dear

00:01:40,869 --> 00:01:45,310
to my heart because it's it's really one

00:01:42,939 --> 00:01:50,259
of the core things that I use in my

00:01:45,310 --> 00:01:53,680
testing strategy and mocks are are such

00:01:50,259 --> 00:01:56,170
an easy scapegoat when you hear people

00:01:53,680 --> 00:01:59,229
give talks there's always just like mock

00:01:56,170 --> 00:02:01,659
suck or hey mocks make your testing

00:01:59,229 --> 00:02:02,950
fragile and your code fragile so I

00:02:01,659 --> 00:02:07,619
thought I would talk a little bit

00:02:02,950 --> 00:02:10,810
because I consider myself an effective

00:02:07,619 --> 00:02:14,350
developer I did been doing TDD for quite

00:02:10,810 --> 00:02:16,030
a while in some form or another and for

00:02:14,350 --> 00:02:20,680
the most part I've been what I consider

00:02:16,030 --> 00:02:23,590
a strict isolationist in that I pretty

00:02:20,680 --> 00:02:25,290
much isolate the code under test from

00:02:23,590 --> 00:02:27,360
its dependencies

00:02:25,290 --> 00:02:30,569
and so I thought I'd talk a little bit

00:02:27,360 --> 00:02:34,560
about how I use them and what I use them

00:02:30,569 --> 00:02:36,810
for and some of the common problems that

00:02:34,560 --> 00:02:39,450
people have with them some of the common

00:02:36,810 --> 00:02:43,769
complaints that people do but I want to

00:02:39,450 --> 00:02:45,120
expand it a little bit because when you

00:02:43,769 --> 00:02:48,829
talk about mocks mocks

00:02:45,120 --> 00:02:52,470
have a very pretty set definition there

00:02:48,829 --> 00:02:53,879
their expectation based so you tend to

00:02:52,470 --> 00:02:56,310
say hey I'm gonna build one of these

00:02:53,879 --> 00:02:58,920
things and I'm going to expect this

00:02:56,310 --> 00:03:01,109
method to be called on it and then

00:02:58,920 --> 00:03:03,690
afterwards you verify whether or not

00:03:01,109 --> 00:03:07,950
that method was called on it with

00:03:03,690 --> 00:03:11,069
certain parameters but there's a whole

00:03:07,950 --> 00:03:13,500
range of uses for these there's a set

00:03:11,069 --> 00:03:15,450
use when you're saying okay I want to

00:03:13,500 --> 00:03:18,299
make sure that it interacts with another

00:03:15,450 --> 00:03:22,139
object that way so but I'd like to

00:03:18,299 --> 00:03:24,150
expand it to be not just yay mocks but

00:03:22,139 --> 00:03:27,629
really about test doubles in general

00:03:24,150 --> 00:03:31,230
really about that all of the things we

00:03:27,629 --> 00:03:34,349
do stubbing putting just general doubles

00:03:31,230 --> 00:03:39,510
in mocks things like that

00:03:34,349 --> 00:03:41,310
I tend to be very lacks in my terms and

00:03:39,510 --> 00:03:43,590
just pretty much call everything a

00:03:41,310 --> 00:03:46,769
double or a stub or something like that

00:03:43,590 --> 00:03:50,250
so throughout the course of the talk I

00:03:46,769 --> 00:03:52,470
may drop the word stub when I'm talking

00:03:50,250 --> 00:03:55,590
about a mock or I may drop the word mock

00:03:52,470 --> 00:03:59,040
when I'm talking about a stub and I'll

00:03:55,590 --> 00:04:01,230
ask you're not really forgiveness but

00:03:59,040 --> 00:04:03,510
just bear with me and assume that I'm

00:04:01,230 --> 00:04:08,190
talking about some form of a test devil

00:04:03,510 --> 00:04:10,799
and the type of test double is really

00:04:08,190 --> 00:04:13,409
they're encoded in the example in the

00:04:10,799 --> 00:04:16,079
tests that I write and so I tend not to

00:04:13,409 --> 00:04:19,260
differentiate that much it's one of the

00:04:16,079 --> 00:04:22,710
things that I really like about the

00:04:19,260 --> 00:04:26,220
r-spec doubling library or the mocking

00:04:22,710 --> 00:04:28,500
library is that pretty much everything

00:04:26,220 --> 00:04:31,520
is an alias for everything else when you

00:04:28,500 --> 00:04:34,740
come to down with it when you say mock

00:04:31,520 --> 00:04:37,200
something or stub something they're

00:04:34,740 --> 00:04:39,570
actually aliases for the same

00:04:37,200 --> 00:04:42,750
method and they're really just giving

00:04:39,570 --> 00:04:45,120
you a test double that you can use for

00:04:42,750 --> 00:04:48,180
its appropriate purpose whatever you'll

00:04:45,120 --> 00:04:50,310
want it to be in your test so I'm gonna

00:04:48,180 --> 00:04:52,650
talk more just about test doubles some

00:04:50,310 --> 00:04:54,840
of the things that I use them for and

00:04:52,650 --> 00:04:57,210
ways to do it I'm gonna go into a talk a

00:04:54,840 --> 00:05:00,360
little bit about design as well um

00:04:57,210 --> 00:05:02,250
before I get into that though there was

00:05:00,360 --> 00:05:05,250
something that I really really thought

00:05:02,250 --> 00:05:09,120
you wanted to see it's another picture

00:05:05,250 --> 00:05:12,380
of Zach look at her she tends to have

00:05:09,120 --> 00:05:14,850
that look a lot of just like really

00:05:12,380 --> 00:05:18,830
honest I'm always taking pictures of her

00:05:14,850 --> 00:05:24,300
so she gets that look of sort of quiet

00:05:18,830 --> 00:05:27,060
disdain but anyways so I wanted to start

00:05:24,300 --> 00:05:30,180
off by talking about good design how

00:05:27,060 --> 00:05:32,310
many of you know what good design is and

00:05:30,180 --> 00:05:33,780
be honest if I asked you and we're

00:05:32,310 --> 00:05:38,340
sitting around you'd say oh I know a

00:05:33,780 --> 00:05:40,470
good design is anybody come on good okay

00:05:38,340 --> 00:05:42,960
a couple people would say that um I

00:05:40,470 --> 00:05:45,870
don't really like to talk about good

00:05:42,960 --> 00:05:48,690
design because I find that everybody has

00:05:45,870 --> 00:05:50,910
their own opinions about it and there's

00:05:48,690 --> 00:05:54,390
a lot of different views on it and

00:05:50,910 --> 00:05:56,520
there's a lot of different truths so the

00:05:54,390 --> 00:06:01,380
discussion about what makes a good

00:05:56,520 --> 00:06:04,170
design is really important but I tend to

00:06:01,380 --> 00:06:07,610
only really be willing to have it while

00:06:04,170 --> 00:06:11,100
drinking beer or preferably scotch

00:06:07,610 --> 00:06:12,540
because it's a fun conversation and it's

00:06:11,100 --> 00:06:15,720
a great conversation to hear what other

00:06:12,540 --> 00:06:18,690
people value but instead of good design

00:06:15,720 --> 00:06:22,380
I like to do and instead talk about

00:06:18,690 --> 00:06:25,830
better design because better design I

00:06:22,380 --> 00:06:28,050
think we can talk about I think better

00:06:25,830 --> 00:06:31,380
design we can come up with a definition

00:06:28,050 --> 00:06:33,540
of or at least we can come up with a

00:06:31,380 --> 00:06:37,320
definition that you have to accept while

00:06:33,540 --> 00:06:40,110
I'm up here on stage and better design

00:06:37,320 --> 00:06:43,320
my views on better design really stem

00:06:40,110 --> 00:06:45,390
from the fact that there's one constant

00:06:43,320 --> 00:06:48,720
there's one thing that we truly know

00:06:45,390 --> 00:06:50,700
about software there's one thing that we

00:06:48,720 --> 00:06:55,440
know about developing application

00:06:50,700 --> 00:06:57,090
and that's that it changes as we're

00:06:55,440 --> 00:06:58,770
building it as we're showing it to our

00:06:57,090 --> 00:07:01,290
clients as we're showing it to the

00:06:58,770 --> 00:07:05,370
person who asked for it they're gonna

00:07:01,290 --> 00:07:08,700
say oh yeah that that's great but I

00:07:05,370 --> 00:07:12,510
didn't think about this one thing or now

00:07:08,700 --> 00:07:16,500
that I see it I realize that I actually

00:07:12,510 --> 00:07:20,220
wanted something else and anybody ever

00:07:16,500 --> 00:07:22,920
have that experience yeah where how many

00:07:20,220 --> 00:07:24,870
of you like when that happens how many

00:07:22,920 --> 00:07:27,420
of you just sit there and grumble and

00:07:24,870 --> 00:07:29,760
 about it over with your the rest

00:07:27,420 --> 00:07:32,040
of your teammates like how come they

00:07:29,760 --> 00:07:35,880
didn't know how come they couldn't tell

00:07:32,040 --> 00:07:37,890
me that man scope creep or man man why

00:07:35,880 --> 00:07:41,190
couldn't they say that first because I

00:07:37,890 --> 00:07:43,470
already built my system and then in our

00:07:41,190 --> 00:07:45,870
next breath we're like can't do upfront

00:07:43,470 --> 00:07:48,540
design can't gather all the requirements

00:07:45,870 --> 00:07:51,480
upfront so we've got this like

00:07:48,540 --> 00:07:53,610
dissonance one of my favorite terms

00:07:51,480 --> 00:07:55,770
cognitive dissonance it's one of my

00:07:53,610 --> 00:07:59,910
favorites because I use it all the time

00:07:55,770 --> 00:08:02,490
wrongly but it's that idea of being able

00:07:59,910 --> 00:08:07,620
to hold two ideas in your head that are

00:08:02,490 --> 00:08:10,470
sort of in conflict so we come up and we

00:08:07,620 --> 00:08:13,560
talk about how we want to build

00:08:10,470 --> 00:08:15,660
iterative designs and we want to build

00:08:13,560 --> 00:08:18,060
small things show it build the next

00:08:15,660 --> 00:08:21,030
thing show it but when our customer

00:08:18,060 --> 00:08:25,290
comes and makes a change we start to

00:08:21,030 --> 00:08:27,630
grumble I do everybody does and so

00:08:25,290 --> 00:08:32,670
knowing this what I consider better

00:08:27,630 --> 00:08:35,810
design is entirely given by easier to

00:08:32,670 --> 00:08:38,940
change and I'm not talking about

00:08:35,810 --> 00:08:42,120
building a system that is ultimately

00:08:38,940 --> 00:08:44,670
extensible you can configure it with XML

00:08:42,120 --> 00:08:47,700
or yam all because it's a ruby

00:08:44,670 --> 00:08:50,190
conference so not like oh man this thing

00:08:47,700 --> 00:08:54,690
can do everything if you just changed

00:08:50,190 --> 00:08:58,170
this one parameter I I saw a rails

00:08:54,690 --> 00:08:59,310
application one time that I went in and

00:08:58,170 --> 00:09:02,490
was working with a friend it was a

00:08:59,310 --> 00:09:04,200
rescue project as I think is eventually

00:09:02,490 --> 00:09:04,890
going to become synonymous with rails

00:09:04,200 --> 00:09:09,960
app

00:09:04,890 --> 00:09:11,100
and it was he he was like hey I'm not

00:09:09,960 --> 00:09:13,740
going to tell you anything about the

00:09:11,100 --> 00:09:17,190
people who wrote this and I looked at it

00:09:13,740 --> 00:09:21,480
and I was like ah Java developers and he

00:09:17,190 --> 00:09:23,220
was like yeah yeah and well he didn't

00:09:21,480 --> 00:09:26,640
ask me how I knew because it was clear

00:09:23,220 --> 00:09:29,150
but one of the sort of fundamental

00:09:26,640 --> 00:09:31,440
characteristics of a java application is

00:09:29,150 --> 00:09:35,700
basically you build a framework that

00:09:31,440 --> 00:09:38,220
it's xml configured so pretty much every

00:09:35,700 --> 00:09:41,460
java application eventually ends up

00:09:38,220 --> 00:09:44,610
being an xml configured framework so of

00:09:41,460 --> 00:09:47,550
course in ruby and in rails were better

00:09:44,610 --> 00:09:50,940
than xml xml sucks

00:09:47,550 --> 00:09:51,450
so instead if you can see where this is

00:09:50,940 --> 00:09:55,640
going

00:09:51,450 --> 00:09:58,110
it was a rails application that was

00:09:55,640 --> 00:10:01,140
basically they had built a framework on

00:09:58,110 --> 00:10:01,920
top of rails that was configured with

00:10:01,140 --> 00:10:05,100
Yammer

00:10:01,920 --> 00:10:08,280
so they were like a couple hundred yeah

00:10:05,100 --> 00:10:09,750
Mille files that we're all in the guys

00:10:08,280 --> 00:10:12,600
like threw up his arms and he's like I

00:10:09,750 --> 00:10:14,610
don't even know where to start and I was

00:10:12,600 --> 00:10:19,830
like wow I'm glad I'm only here for a

00:10:14,610 --> 00:10:21,210
day so I'm not talking about that but

00:10:19,830 --> 00:10:25,500
what I'm talking about is that ability

00:10:21,210 --> 00:10:28,400
to go in have a design that is easy to

00:10:25,500 --> 00:10:31,320
change it's easy when you have to change

00:10:28,400 --> 00:10:34,860
some aspect of it a feature changes you

00:10:31,320 --> 00:10:37,050
can come in and just go hey I can find

00:10:34,860 --> 00:10:39,780
where I want to make the change I know

00:10:37,050 --> 00:10:43,170
how to make the change safely I can do

00:10:39,780 --> 00:10:47,070
it in one place and all of this comes in

00:10:43,170 --> 00:10:50,460
to that fundamental thing of removing

00:10:47,070 --> 00:10:53,880
duplication naming things well having a

00:10:50,460 --> 00:10:57,090
good test suite so this is kind of what

00:10:53,880 --> 00:11:00,660
I want to lead back to with all of this

00:10:57,090 --> 00:11:02,790
all of the examples and so let's start

00:11:00,660 --> 00:11:05,040
with this how many of you write some

00:11:02,790 --> 00:11:09,210
form of automated testing you're all

00:11:05,040 --> 00:11:10,380
Rubeus so your hand should go up how

00:11:09,210 --> 00:11:13,440
many of you consider yourself doing

00:11:10,380 --> 00:11:15,760
test-driven development how many of you

00:11:13,440 --> 00:11:19,810
write your testing first

00:11:15,760 --> 00:11:24,100
how many of you are - after I write my

00:11:19,810 --> 00:11:26,490
tests after sometimes that's good so I'm

00:11:24,100 --> 00:11:29,830
gonna talk a little bit about this and

00:11:26,490 --> 00:11:33,070
its implications on design I also want

00:11:29,830 --> 00:11:34,450
to talk about oo what I do find over the

00:11:33,070 --> 00:11:36,190
last couple years I've been doing a lot

00:11:34,450 --> 00:11:38,170
of thinking about oo and dealing with

00:11:36,190 --> 00:11:43,450
people and working with people and I

00:11:38,170 --> 00:11:44,100
gotta say we suck at oo we're really bad

00:11:43,450 --> 00:11:47,380
at oo

00:11:44,100 --> 00:11:50,260
one of the things that I think with the

00:11:47,380 --> 00:11:53,080
sort of resurgence in functional

00:11:50,260 --> 00:11:55,780
programming and saying ooo doesn't

00:11:53,080 --> 00:11:58,810
doesn't work anymore is mostly because

00:11:55,780 --> 00:12:01,270
we don't do oh oh very well and we don't

00:11:58,810 --> 00:12:03,550
really abide by some of the core things

00:12:01,270 --> 00:12:05,440
about it and there's one really

00:12:03,550 --> 00:12:08,260
important thing there's one thing that

00:12:05,440 --> 00:12:10,810
oo is primarily about and it's about

00:12:08,260 --> 00:12:13,210
messages it's about sending messages

00:12:10,810 --> 00:12:16,690
between things I'm currently learning

00:12:13,210 --> 00:12:19,750
Erlang because as near as I can tell

00:12:16,690 --> 00:12:21,820
Erlang is one of the purest oo languages

00:12:19,750 --> 00:12:23,980
that we have out there it's this

00:12:21,820 --> 00:12:26,980
beautiful language that distills

00:12:23,980 --> 00:12:30,790
everything down to messaging messaging

00:12:26,980 --> 00:12:32,800
between processes it's about

00:12:30,790 --> 00:12:35,520
interactions it's about the way things

00:12:32,800 --> 00:12:39,820
talk to each other it's about the way

00:12:35,520 --> 00:12:42,180
that one object talks to the other one

00:12:39,820 --> 00:12:47,050
it's not about inheritance

00:12:42,180 --> 00:12:48,700
it's not about encapsulation although

00:12:47,050 --> 00:12:52,140
those are important things inheritance

00:12:48,700 --> 00:12:54,220
ism don't do it but it's really about

00:12:52,140 --> 00:12:57,300
interactions it's about how things work

00:12:54,220 --> 00:13:01,320
with each other and it's about services

00:12:57,300 --> 00:13:04,990
it's about building good layered systems

00:13:01,320 --> 00:13:09,580
that you can that are decoupled that do

00:13:04,990 --> 00:13:13,240
one and only one thing well and last

00:13:09,580 --> 00:13:16,510
it's about this it's about roles it's

00:13:13,240 --> 00:13:19,920
about what are you using the object for

00:13:16,510 --> 00:13:22,710
it's not about the objects themselves

00:13:19,920 --> 00:13:27,040
one of the fundamental problems I think

00:13:22,710 --> 00:13:29,670
came about when most of us when we were

00:13:27,040 --> 00:13:33,570
brought up we were taught

00:13:29,670 --> 00:13:35,010
okay right all your use cases and then

00:13:33,570 --> 00:13:37,620
what do you do right after you write

00:13:35,010 --> 00:13:40,380
your use cases you underline the nouns

00:13:37,620 --> 00:13:43,080
and then you make all of these classes

00:13:40,380 --> 00:13:46,680
and then you underline the verbs and you

00:13:43,080 --> 00:13:49,200
try to shoehorn them on to classes when

00:13:46,680 --> 00:13:53,940
if you think about what we do as

00:13:49,200 --> 00:13:55,080
developers we automate process pretty

00:13:53,940 --> 00:13:58,470
much everything we do is about

00:13:55,080 --> 00:14:01,260
automating a process and yet we start

00:13:58,470 --> 00:14:04,110
off our application we start off our

00:14:01,260 --> 00:14:07,880
design not by the process not by the

00:14:04,110 --> 00:14:11,460
acts or the verbs but by the nouns and

00:14:07,880 --> 00:14:14,550
that leads us into these really crazy

00:14:11,460 --> 00:14:16,650
designs these designs where you're

00:14:14,550 --> 00:14:19,290
trying to figure out where this behavior

00:14:16,650 --> 00:14:21,330
lives rather than figuring out what are

00:14:19,290 --> 00:14:23,760
the behaviors what are the services what

00:14:21,330 --> 00:14:26,880
are the interactions that I have and

00:14:23,760 --> 00:14:29,760
then figuring out what sort of things

00:14:26,880 --> 00:14:32,850
could be named that would group them

00:14:29,760 --> 00:14:37,020
together test-driven development is a

00:14:32,850 --> 00:14:39,870
great way to sort of focus on the

00:14:37,020 --> 00:14:43,070
interactions focus on the services that

00:14:39,870 --> 00:14:46,880
we do the messages that we send in Ruby

00:14:43,070 --> 00:14:48,960
messages are sort of brought to life via

00:14:46,880 --> 00:14:51,420
effectively method calls even though

00:14:48,960 --> 00:14:54,600
they they do behave a lot like message

00:14:51,420 --> 00:14:58,170
passing we do have things like method

00:14:54,600 --> 00:15:01,920
missing and the like but I wanted to

00:14:58,170 --> 00:15:06,480
talk a little bit about TDD and it's its

00:15:01,920 --> 00:15:09,420
sister test-first development I have a

00:15:06,480 --> 00:15:11,910
very set definition for these two

00:15:09,420 --> 00:15:15,810
they're not the same definition that a

00:15:11,910 --> 00:15:18,360
lot of people use but we're gonna I want

00:15:15,810 --> 00:15:19,980
to let you know because they're there if

00:15:18,360 --> 00:15:21,650
you hold by these you can kind of

00:15:19,980 --> 00:15:24,510
differentiate and not get into that

00:15:21,650 --> 00:15:27,120
place where you're like oh yeah I do TDD

00:15:24,510 --> 00:15:28,980
and someone goes no you don't and then

00:15:27,120 --> 00:15:30,270
you feel bad and somebody's making you

00:15:28,980 --> 00:15:32,640
feel bad because you're not doing TDD

00:15:30,270 --> 00:15:34,690
because if you don't do TDD you're going

00:15:32,640 --> 00:15:37,420
to hell

00:15:34,690 --> 00:15:41,589
so I want to talk about the difference

00:15:37,420 --> 00:15:43,329
between these two and as we become

00:15:41,589 --> 00:15:45,639
developers as we move on through our

00:15:43,329 --> 00:15:47,769
careers we we start writing automated

00:15:45,639 --> 00:15:49,329
tests and we write them after and then

00:15:47,769 --> 00:15:51,040
we start writing them awhile and then we

00:15:49,329 --> 00:15:53,139
start writing them first and then we

00:15:51,040 --> 00:15:56,649
start noticing the effects that the

00:15:53,139 --> 00:15:59,019
tests have on us and the effect the main

00:15:56,649 --> 00:16:02,319
difference between these two the way

00:15:59,019 --> 00:16:06,149
that we listen to the effects I like to

00:16:02,319 --> 00:16:09,220
say is our reaction to pain

00:16:06,149 --> 00:16:12,279
the primary difference in my definition

00:16:09,220 --> 00:16:15,100
as I like to separate these out is about

00:16:12,279 --> 00:16:19,930
reaction to pain what do you do when you

00:16:15,100 --> 00:16:20,529
find it difficult to test when for tests

00:16:19,930 --> 00:16:24,699
first

00:16:20,529 --> 00:16:28,540
I like to say you change your tests you

00:16:24,699 --> 00:16:30,839
might write helper methods you might god

00:16:28,540 --> 00:16:33,490
forbid use something like factory girl

00:16:30,839 --> 00:16:35,949
something that hides the complexity of

00:16:33,490 --> 00:16:37,660
your tests something that says oh you

00:16:35,949 --> 00:16:40,420
know this is a pain to set up so I'm

00:16:37,660 --> 00:16:42,490
going to make something that makes it

00:16:40,420 --> 00:16:46,120
not painful to set up that I can reuse

00:16:42,490 --> 00:16:47,920
in my tests and that's okay and it's a

00:16:46,120 --> 00:16:52,630
valuable thing because while we're

00:16:47,920 --> 00:16:56,980
learning how to do this we tend to start

00:16:52,630 --> 00:16:59,740
off focusing there on the tests but test

00:16:56,980 --> 00:17:03,040
driven as you sort of move in and listen

00:16:59,740 --> 00:17:05,620
to your tests more you start moving into

00:17:03,040 --> 00:17:07,929
this idea of test-driven development

00:17:05,620 --> 00:17:10,990
brings in this idea of when it you find

00:17:07,929 --> 00:17:14,549
something difficult to test change the

00:17:10,990 --> 00:17:18,939
design have that be your default

00:17:14,549 --> 00:17:20,470
behavior have that be your natural

00:17:18,939 --> 00:17:25,839
reaction to something that's difficult

00:17:20,470 --> 00:17:29,470
to test and test doubles they often

00:17:25,839 --> 00:17:32,070
highlight pain some of the complaints

00:17:29,470 --> 00:17:34,929
that people have about tests doubles our

00:17:32,070 --> 00:17:39,490
painful things fragility or coupling or

00:17:34,929 --> 00:17:42,370
all of this and so rather than changing

00:17:39,490 --> 00:17:44,950
the tests maybe not using test doubles

00:17:42,370 --> 00:17:46,800
or maybe changing the way that we use

00:17:44,950 --> 00:17:49,170
them why not

00:17:46,800 --> 00:17:50,670
take a look at what the dis is what

00:17:49,170 --> 00:17:53,820
those are telling you about your design

00:17:50,670 --> 00:17:58,560
have your default be change the design

00:17:53,820 --> 00:18:04,350
so that it isn't a pain so that it isn't

00:17:58,560 --> 00:18:07,670
a pain to test here's another picture of

00:18:04,350 --> 00:18:12,380
Zach just to wake you guys up because

00:18:07,670 --> 00:18:15,240
okay so let's talk a couple examples a

00:18:12,380 --> 00:18:17,640
couple common ones that people talk

00:18:15,240 --> 00:18:20,100
about I run these workshops called code

00:18:17,640 --> 00:18:21,420
retreats it's not important what they

00:18:20,100 --> 00:18:24,540
are they're awesome

00:18:21,420 --> 00:18:27,420
but what I'm doing is I'm building an

00:18:24,540 --> 00:18:29,790
application that shows which ones are

00:18:27,420 --> 00:18:32,310
running that day they run on the

00:18:29,790 --> 00:18:34,230
weekends usually there's generally a

00:18:32,310 --> 00:18:36,540
couple of them running on a Saturday

00:18:34,230 --> 00:18:38,550
somewhere around the world so I'm

00:18:36,540 --> 00:18:40,380
writing this application that allows

00:18:38,550 --> 00:18:42,330
people to register an event and it'll

00:18:40,380 --> 00:18:45,570
show it on the day and they can do all

00:18:42,330 --> 00:18:49,710
of this cool manipulation and my first

00:18:45,570 --> 00:18:52,790
pass at it looked like this it's it's a

00:18:49,710 --> 00:18:58,320
fairly what I consider an idiomatic

00:18:52,790 --> 00:19:01,280
Rails way of doing it anybody else have

00:18:58,320 --> 00:19:07,110
some have code like this in their app

00:19:01,280 --> 00:19:10,590
the most part anybody awake okay good

00:19:07,110 --> 00:19:12,660
one person so you know I'm looking at it

00:19:10,590 --> 00:19:15,360
you know I'm I have an index I'm passing

00:19:12,660 --> 00:19:16,380
it over I do a find on my model I pass

00:19:15,360 --> 00:19:18,860
in the hash

00:19:16,380 --> 00:19:22,530
what's it scheduled for is it running

00:19:18,860 --> 00:19:27,690
you know when I write a test retrieves

00:19:22,530 --> 00:19:29,850
the running today create a stub should

00:19:27,690 --> 00:19:34,140
or see fine schedule there's my hash

00:19:29,850 --> 00:19:36,090
this is a pane and this is a very common

00:19:34,140 --> 00:19:38,060
one anybody else run into this and be

00:19:36,090 --> 00:19:40,680
like man this sucks

00:19:38,060 --> 00:19:41,940
okay I'm gonna to always just stand here

00:19:40,680 --> 00:19:45,750
with my hand up until people raise their

00:19:41,940 --> 00:19:47,550
hand because this is a common complaint

00:19:45,750 --> 00:19:50,340
and it's a valid complaint when you

00:19:47,550 --> 00:19:55,260
change this hash you have to change your

00:19:50,340 --> 00:19:59,639
test and that's painful

00:19:55,260 --> 00:20:01,500
it's fragile feels very fragile it feels

00:19:59,639 --> 00:20:06,990
almost like I'm duplicating the

00:20:01,500 --> 00:20:08,760
implementation here it's pain now what

00:20:06,990 --> 00:20:12,750
we might say is let's not use a test

00:20:08,760 --> 00:20:15,659
double let's for some reason actually

00:20:12,750 --> 00:20:18,110
hit the database there so that if we

00:20:15,659 --> 00:20:21,330
change the hash we don't have to do it

00:20:18,110 --> 00:20:26,159
but let's take that pain and just sort

00:20:21,330 --> 00:20:27,840
of think about it for a second why is

00:20:26,159 --> 00:20:31,769
this information relevant to the

00:20:27,840 --> 00:20:35,100
controller why does the controller know

00:20:31,769 --> 00:20:37,559
the fields on my model how to set them

00:20:35,100 --> 00:20:39,809
what type they are it knows that running

00:20:37,559 --> 00:20:41,880
is a boolean knows that this is the way

00:20:39,809 --> 00:20:45,929
that you find it out a controller's job

00:20:41,880 --> 00:20:48,779
in my opinion should be to take the

00:20:45,929 --> 00:20:51,210
parameters from the HTTP request send it

00:20:48,779 --> 00:20:53,730
to something and then figure out what to

00:20:51,210 --> 00:20:57,269
render based on the result of that and

00:20:53,730 --> 00:20:59,909
when you do stuff like this what you're

00:20:57,269 --> 00:21:05,610
doing is you're bypassing layers you're

00:20:59,909 --> 00:21:08,760
letting the controller reach in it's odd

00:21:05,610 --> 00:21:10,830
you're letting these layers sort of mix

00:21:08,760 --> 00:21:13,830
in the abstraction levels mix in

00:21:10,830 --> 00:21:17,250
together you're letting the controller

00:21:13,830 --> 00:21:19,710
call the database that seems like a

00:21:17,250 --> 00:21:23,010
strange thing for the controller to do

00:21:19,710 --> 00:21:24,840
is it fast because we have active record

00:21:23,010 --> 00:21:28,080
and I can pack out all of this stuff and

00:21:24,840 --> 00:21:28,850
yeah I can you know write my blog in ten

00:21:28,080 --> 00:21:32,909
minutes

00:21:28,850 --> 00:21:34,830
true but most of us work on applications

00:21:32,909 --> 00:21:36,990
that need to be maintained most of us

00:21:34,830 --> 00:21:40,380
work on applications where that hash is

00:21:36,990 --> 00:21:42,299
going to change one of the things that

00:21:40,380 --> 00:21:44,929
we'd like to abide by controller should

00:21:42,299 --> 00:21:47,549
know what they want not how they want it

00:21:44,929 --> 00:21:50,429
they should come through they should

00:21:47,549 --> 00:21:53,700
look at it and say okay well my job is

00:21:50,429 --> 00:21:58,169
to figure out based on the request what

00:21:53,700 --> 00:22:02,340
I want so it's better to insert a layer

00:21:58,169 --> 00:22:05,340
in between it some sort of set of

00:22:02,340 --> 00:22:07,529
services that you have that the

00:22:05,340 --> 00:22:08,740
controller talks to those services that

00:22:07,529 --> 00:22:11,820
are named

00:22:08,740 --> 00:22:17,070
that talk about what it actually is

00:22:11,820 --> 00:22:20,320
anybody ever read this paper no

00:22:17,070 --> 00:22:22,810
phenomenal paper guy named David Parnas

00:22:20,320 --> 00:22:25,470
it's one of those papers that you read

00:22:22,810 --> 00:22:28,510
and then you go

00:22:25,470 --> 00:22:33,100
did they really know everything back in

00:22:28,510 --> 00:22:37,150
the 70s or rather what I like to look at

00:22:33,100 --> 00:22:39,850
it is at what point did we lose all of

00:22:37,150 --> 00:22:43,330
this knowledge that was there at what

00:22:39,850 --> 00:22:45,280
point did we get this cut where there

00:22:43,330 --> 00:22:49,030
was all of this thought this important

00:22:45,280 --> 00:22:51,190
thought going on and then suddenly we

00:22:49,030 --> 00:22:52,780
are all just like hacking away arguing

00:22:51,190 --> 00:22:55,360
about whether or not you should write

00:22:52,780 --> 00:22:57,940
tests or arguing or not whether you

00:22:55,360 --> 00:23:00,130
should build a class and there's all of

00:22:57,940 --> 00:23:02,740
these fantastic papers out there from

00:23:00,130 --> 00:23:06,040
the 70s and the early 80s and mid in

00:23:02,740 --> 00:23:09,580
early 90s that really talked about

00:23:06,040 --> 00:23:14,200
research into these ideas this guy David

00:23:09,580 --> 00:23:16,740
Parnas it this is a paper about how do

00:23:14,200 --> 00:23:20,260
you decompose your system into modules

00:23:16,740 --> 00:23:26,830
which is convenient since that's the

00:23:20,260 --> 00:23:30,880
title of it and so you guys are a tough

00:23:26,830 --> 00:23:33,210
crowd so what what they did was they

00:23:30,880 --> 00:23:35,800
actually ran a little bit of an

00:23:33,210 --> 00:23:39,610
experiment on a code base they split it

00:23:35,800 --> 00:23:43,510
into modules that were more kind of like

00:23:39,610 --> 00:23:45,880
an object graph so they were splitting

00:23:43,510 --> 00:23:48,880
it into modules that were more on the

00:23:45,880 --> 00:23:50,620
things that worked with as opposed to

00:23:48,880 --> 00:23:53,770
what it was supposed to be doing and

00:23:50,620 --> 00:23:57,430
then they went and they split a the same

00:23:53,770 --> 00:24:01,990
system into a set of layers based on the

00:23:57,430 --> 00:24:04,000
services it provided and sort of a layer

00:24:01,990 --> 00:24:07,080
cake design rather than sort of the

00:24:04,000 --> 00:24:12,850
object graph whatever they call it a

00:24:07,080 --> 00:24:15,550
ravioli designs that they talk about and

00:24:12,850 --> 00:24:18,640
what they found was that if you split

00:24:15,550 --> 00:24:21,430
your system into a more layer cake

00:24:18,640 --> 00:24:24,010
design a set of services that

00:24:21,430 --> 00:24:26,110
are very low-level and then there's a

00:24:24,010 --> 00:24:28,060
slightly higher abstraction level above

00:24:26,110 --> 00:24:31,750
them and then a slightly higher level

00:24:28,060 --> 00:24:35,860
abstraction above them that the system

00:24:31,750 --> 00:24:38,710
naturally becomes more maintainable you

00:24:35,860 --> 00:24:41,020
end up being able to swap out sections

00:24:38,710 --> 00:24:46,350
you tend to be able to change it a lot

00:24:41,020 --> 00:24:52,630
more easily and so we have things like

00:24:46,350 --> 00:24:55,780
scopes so we have this extra thing it's

00:24:52,630 --> 00:24:57,820
not a physical layer it's much more of a

00:24:55,780 --> 00:25:01,840
logical layer between the controller and

00:24:57,820 --> 00:25:04,960
the underlying database itself so we

00:25:01,840 --> 00:25:08,710
might write and if you notice the

00:25:04,960 --> 00:25:12,700
example became significantly more simple

00:25:08,710 --> 00:25:15,850
so by looking at the pain of our tests

00:25:12,700 --> 00:25:18,370
and just saying hey we shouldn't be

00:25:15,850 --> 00:25:20,110
passing the hash in we should be asking

00:25:18,370 --> 00:25:23,020
ourselves what does that hash represent

00:25:20,110 --> 00:25:26,110
and giving ourselves in this case a

00:25:23,020 --> 00:25:28,450
scope or a method you don't know how I'm

00:25:26,110 --> 00:25:31,270
doing it it's just something that says

00:25:28,450 --> 00:25:34,290
hey the index the controller's job is

00:25:31,270 --> 00:25:36,910
simply to get the today's code retreats

00:25:34,290 --> 00:25:40,300
so by listening to that pain point

00:25:36,910 --> 00:25:42,670
rather than going ah the test double

00:25:40,300 --> 00:25:44,680
sucks because if I change this

00:25:42,670 --> 00:25:47,860
controller the hash I have to change the

00:25:44,680 --> 00:25:51,630
test we actually let that influence our

00:25:47,860 --> 00:25:54,940
design and so we focus then on the what

00:25:51,630 --> 00:25:58,720
what is the index interested in not the

00:25:54,940 --> 00:26:02,110
how of it and our tests become quite a

00:25:58,720 --> 00:26:05,470
bit more clear you can look at it and an

00:26:02,110 --> 00:26:08,170
interesting thing too is notice that the

00:26:05,470 --> 00:26:11,980
name of my example is it retrieves

00:26:08,170 --> 00:26:15,040
retreats running today and if you look

00:26:11,980 --> 00:26:19,540
at the code in the example it pretty

00:26:15,040 --> 00:26:23,380
much directly reflects the textual

00:26:19,540 --> 00:26:25,630
description the words kind of run maybe

00:26:23,380 --> 00:26:28,000
maybe today's is a little weird maybe it

00:26:25,630 --> 00:26:30,210
could be running today something like

00:26:28,000 --> 00:26:33,190
that but there's this sort of

00:26:30,210 --> 00:26:34,720
synchronicity the symmetry between the

00:26:33,190 --> 00:26:39,309
textual description

00:26:34,720 --> 00:26:42,669
and the stub that I returned and so it's

00:26:39,309 --> 00:26:46,960
always better to delegate the how down

00:26:42,669 --> 00:26:49,780
aways and letting the fact that we're

00:26:46,960 --> 00:26:51,520
not running through the whole all of the

00:26:49,780 --> 00:26:53,500
layers down to the database we just set

00:26:51,520 --> 00:26:56,100
ourselves this nice double we don't have

00:26:53,500 --> 00:26:59,580
to worry about anything about the how

00:26:56,100 --> 00:27:02,140
because in the MT DD it's about design

00:26:59,580 --> 00:27:05,080
test first is very much focused on

00:27:02,140 --> 00:27:09,280
verification TDD it's about the design

00:27:05,080 --> 00:27:12,070
and this is the core way to take

00:27:09,280 --> 00:27:14,890
advantage of it is about changing your

00:27:12,070 --> 00:27:18,460
design not your tests it's about

00:27:14,890 --> 00:27:23,650
focusing on the usage of something not

00:27:18,460 --> 00:27:26,500
on how its constructed here's another

00:27:23,650 --> 00:27:32,830
picture of Zack focusing on the usage of

00:27:26,500 --> 00:27:34,870
this box okay so I like presenters and I

00:27:32,830 --> 00:27:37,780
like presenters especially in the rails

00:27:34,870 --> 00:27:41,500
community because we argue about whether

00:27:37,780 --> 00:27:42,970
something is a presenter or not so I

00:27:41,500 --> 00:27:44,890
like them I always like arguing

00:27:42,970 --> 00:27:47,620
semantics of like is this really a

00:27:44,890 --> 00:27:49,870
presenter and really what it is is it

00:27:47,620 --> 00:27:52,530
something that sort of provides me a

00:27:49,870 --> 00:27:54,669
better interface to the underlying data

00:27:52,530 --> 00:27:57,700
something that is focused on what the

00:27:54,669 --> 00:27:59,230
view needs so I'm gonna call it a

00:27:57,700 --> 00:28:00,490
presenter and as I do with a lot of

00:27:59,230 --> 00:28:03,130
things I'm just gonna go willy-nilly

00:28:00,490 --> 00:28:07,120
with vocabulary and if it's wrong yeah

00:28:03,130 --> 00:28:09,820
please bear with me so come here and I

00:28:07,120 --> 00:28:13,630
look at a test for this so it's

00:28:09,820 --> 00:28:16,210
reasonable my I wrap the today's code

00:28:13,630 --> 00:28:17,919
retreats in this code retreats presenter

00:28:16,210 --> 00:28:22,059
it's going to have some things that the

00:28:17,919 --> 00:28:24,100
view uses and if I look at the test you

00:28:22,059 --> 00:28:25,990
know I set up a stub for today's coder

00:28:24,100 --> 00:28:28,600
treats code retreat should receive today

00:28:25,990 --> 00:28:31,150
oh I have this cool thing here today's

00:28:28,600 --> 00:28:34,450
code retreats create a presenter that's

00:28:31,150 --> 00:28:38,409
a stub I stub out the four method I pass

00:28:34,450 --> 00:28:40,360
the this stub into that one and I get

00:28:38,409 --> 00:28:42,549
this this stub back and then I make sure

00:28:40,360 --> 00:28:46,840
it gets a sign anybody write write test

00:28:42,549 --> 00:28:48,500
like this ever okay there's a few more

00:28:46,840 --> 00:28:54,580
people you know I'm just gonna

00:28:48,500 --> 00:28:57,740
here now here's a weirdness whoa

00:28:54,580 --> 00:28:59,660
craziness one of the kind of fundamental

00:28:57,740 --> 00:29:02,510
rules is that test doubles should not

00:28:59,660 --> 00:29:05,600
return test doubles it's sort of

00:29:02,510 --> 00:29:08,870
building you into this weird kind of

00:29:05,600 --> 00:29:10,730
inner dependency between them if you

00:29:08,870 --> 00:29:13,250
start to you know there's how many

00:29:10,730 --> 00:29:17,390
different ways here could this test have

00:29:13,250 --> 00:29:19,280
to change you know we've got if this

00:29:17,390 --> 00:29:21,020
thing changes or that thing changes or

00:29:19,280 --> 00:29:25,280
what comes back or anything like that is

00:29:21,020 --> 00:29:27,170
it's all kind of weird so ugh this is

00:29:25,280 --> 00:29:31,630
not something this is a pain point in

00:29:27,170 --> 00:29:35,060
our tests there's too much detail

00:29:31,630 --> 00:29:38,420
there's I'm I know that I'm getting a

00:29:35,060 --> 00:29:42,140
code retreat presenter I'm passing in

00:29:38,420 --> 00:29:43,640
today's it feels like I'm bouncing

00:29:42,140 --> 00:29:45,590
between layers of abstraction I'm

00:29:43,640 --> 00:29:47,510
bouncing between the layer that is

00:29:45,590 --> 00:29:51,560
saying these are the code retreats I

00:29:47,510 --> 00:29:56,420
want to use and then this layer of what

00:29:51,560 --> 00:29:58,880
I send out to the view so rather than

00:29:56,420 --> 00:30:00,920
jumping through and saying okay well I'm

00:29:58,880 --> 00:30:03,290
just gonna write some helpers that will

00:30:00,920 --> 00:30:06,730
let me set up a double that returns a

00:30:03,290 --> 00:30:11,090
double we can look at what the design is

00:30:06,730 --> 00:30:14,360
and as I tend to do I always want to

00:30:11,090 --> 00:30:17,770
start with my example I want to start

00:30:14,360 --> 00:30:20,570
and say what would make this example

00:30:17,770 --> 00:30:23,840
look better what would make this example

00:30:20,570 --> 00:30:26,210
more maintainable more clear because

00:30:23,840 --> 00:30:28,640
this is not really that clear it's kind

00:30:26,210 --> 00:30:34,430
of long I'm not a hundred percent sure

00:30:28,640 --> 00:30:36,770
what it's supposed to be doing so we can

00:30:34,430 --> 00:30:39,100
simplify it we can simplify it so that

00:30:36,770 --> 00:30:41,450
we just ask the presenter for today's

00:30:39,100 --> 00:30:44,210
now here's where we may get into

00:30:41,450 --> 00:30:48,550
arguments at the presenters role well

00:30:44,210 --> 00:30:50,990
you know maybe I'm not completely

00:30:48,550 --> 00:30:54,230
adamant that these are presenters or not

00:30:50,990 --> 00:30:56,450
are the terms right so we simplify the

00:30:54,230 --> 00:31:00,240
example by just saying

00:30:56,450 --> 00:31:02,279
when I asked this guy for today's I get

00:31:00,240 --> 00:31:05,159
back to presenter it takes us back to

00:31:02,279 --> 00:31:09,390
what we had originally where we were

00:31:05,159 --> 00:31:12,770
saying code retreat not today's now by

00:31:09,390 --> 00:31:15,240
focusing on making the example simpler

00:31:12,770 --> 00:31:18,000
we then notice that the code becomes

00:31:15,240 --> 00:31:22,549
simpler the code stops having this sort

00:31:18,000 --> 00:31:25,950
of small abstraction jumping it's

00:31:22,549 --> 00:31:28,200
focused in back on what the controller

00:31:25,950 --> 00:31:33,659
needs to know which is what I'm looking

00:31:28,200 --> 00:31:35,039
for is today's code retreats I'm not

00:31:33,659 --> 00:31:39,750
sure why this was left blank but I'm

00:31:35,039 --> 00:31:41,940
sure it was intentional and TV when you

00:31:39,750 --> 00:31:44,130
come into it it has this sense of

00:31:41,940 --> 00:31:46,559
refactoring once we've abstracted

00:31:44,130 --> 00:31:49,860
ourselves out where you allow ourselves

00:31:46,559 --> 00:31:54,000
to really start to think about the api's

00:31:49,860 --> 00:31:56,940
think about the service names think

00:31:54,000 --> 00:31:59,990
about what makes it difficult

00:31:56,940 --> 00:32:03,690
what are where are the coupling points

00:31:59,990 --> 00:32:06,480
think about where are the discomforts in

00:32:03,690 --> 00:32:09,270
these tests where are the parts of the

00:32:06,480 --> 00:32:12,390
system that I can move away from I don't

00:32:09,270 --> 00:32:15,299
have to have these you know my entire

00:32:12,390 --> 00:32:18,210
system loaded I don't have to have all

00:32:15,299 --> 00:32:21,149
of the pieces interacting in order to do

00:32:18,210 --> 00:32:24,000
the refactorings and instead we can

00:32:21,149 --> 00:32:28,559
really focus on just that one small part

00:32:24,000 --> 00:32:31,470
of the design you could see you can look

00:32:28,559 --> 00:32:34,350
and see in our examples some of the

00:32:31,470 --> 00:32:37,230
things that cause pain that highlight

00:32:34,350 --> 00:32:40,740
the pain and when we go through the

00:32:37,230 --> 00:32:42,240
refactoring phases there's basically

00:32:40,740 --> 00:32:45,029
four rules

00:32:42,240 --> 00:32:48,360
is anybody heard of these before the

00:32:45,029 --> 00:32:50,850
four rules of simple design look at that

00:32:48,360 --> 00:32:52,770
a couple people so the four rules of

00:32:50,850 --> 00:32:56,340
simple design were codified by Kent back

00:32:52,770 --> 00:32:57,809
in the late 90s Kent Beck is generally

00:32:56,340 --> 00:33:00,960
considered the father of test-driven

00:32:57,809 --> 00:33:03,360
development it's one of the sort of key

00:33:00,960 --> 00:33:07,440
people back in the extreme programming

00:33:03,360 --> 00:33:09,690
days and he codified these based on a

00:33:07,440 --> 00:33:10,440
lot of what he had looked at of what are

00:33:09,690 --> 00:33:13,320
the

00:33:10,440 --> 00:33:15,899
or things about design what are the core

00:33:13,320 --> 00:33:18,690
things that we should be focused on when

00:33:15,899 --> 00:33:20,399
we are building our systems we talk and

00:33:18,690 --> 00:33:24,149
we love to talk about the solid

00:33:20,399 --> 00:33:26,009
principles we love design patterns we

00:33:24,149 --> 00:33:27,299
love all of these higher-level things

00:33:26,009 --> 00:33:31,409
that are just like oh that's gonna make

00:33:27,299 --> 00:33:33,149
my design awesome but if you boil it

00:33:31,409 --> 00:33:37,580
down and should get down to the very

00:33:33,149 --> 00:33:42,419
core of it it's really these four rules

00:33:37,580 --> 00:33:45,570
the very first one is test pass and it

00:33:42,419 --> 00:33:49,230
basically says if you can't verify that

00:33:45,570 --> 00:33:52,169
your system works you don't it doesn't

00:33:49,230 --> 00:33:54,179
matter how good your design is you could

00:33:52,169 --> 00:33:56,429
have the greatest design ever but if you

00:33:54,179 --> 00:33:59,220
can't verify how it works it doesn't do

00:33:56,429 --> 00:34:02,210
you any good in our sort of modern age

00:33:59,220 --> 00:34:06,059
we consider most of these automated

00:34:02,210 --> 00:34:08,429
because if you have a two-week QA cycle

00:34:06,059 --> 00:34:09,810
or am one month QA cycle anybody you've

00:34:08,429 --> 00:34:11,970
ever worked in a place where you had

00:34:09,810 --> 00:34:13,649
like a two week or one month QA cycle

00:34:11,970 --> 00:34:15,960
and you'd put your code out there and

00:34:13,649 --> 00:34:17,609
they need wait a month and then you know

00:34:15,960 --> 00:34:19,500
in a couple days bugs would start coming

00:34:17,609 --> 00:34:22,230
back and you're like what was that what

00:34:19,500 --> 00:34:25,260
was I doing there I don't remember as

00:34:22,230 --> 00:34:29,280
opposed to what most of us are used to

00:34:25,260 --> 00:34:32,000
now which is click a button show the

00:34:29,280 --> 00:34:35,700
stuff that you screwed up

00:34:32,000 --> 00:34:38,010
number two is reveals intent it's really

00:34:35,700 --> 00:34:40,589
about naming and this is one of those

00:34:38,010 --> 00:34:42,419
places where being able to isolate

00:34:40,589 --> 00:34:44,550
yourself from the rest of the system

00:34:42,419 --> 00:34:47,450
being able to look at your system as a

00:34:44,550 --> 00:34:51,569
series of layers that you can stub

00:34:47,450 --> 00:34:53,159
really comes into practice and you get a

00:34:51,569 --> 00:34:55,109
lot of benefit from that because you can

00:34:53,159 --> 00:34:58,020
start to think about the names that you

00:34:55,109 --> 00:35:01,650
use at that level without having to

00:34:58,020 --> 00:35:04,230
worry care or even know about the

00:35:01,650 --> 00:35:06,210
implementation underneath it so you can

00:35:04,230 --> 00:35:09,319
focus instead on what these names of

00:35:06,210 --> 00:35:14,460
these services are the things that your

00:35:09,319 --> 00:35:16,770
your doubles are exposing and the third

00:35:14,460 --> 00:35:20,119
one up is no duplication many people

00:35:16,770 --> 00:35:23,400
have read pragmatic programmer awesome

00:35:20,119 --> 00:35:24,300
excellent if you haven't you should you

00:35:23,400 --> 00:35:28,050
can now get it from

00:35:24,300 --> 00:35:31,890
pragmatic press drm-free yay all of that

00:35:28,050 --> 00:35:32,820
great book in it they coined this term

00:35:31,890 --> 00:35:35,400
dry

00:35:32,820 --> 00:35:38,070
everybody knows dry don't repeat

00:35:35,400 --> 00:35:40,080
yourself and it's interesting because if

00:35:38,070 --> 00:35:41,670
you look at what it talks about is it

00:35:40,080 --> 00:35:45,480
doesn't actually have anything to do

00:35:41,670 --> 00:35:47,340
with code a lot of people say you know

00:35:45,480 --> 00:35:49,080
if you write it twice you should extract

00:35:47,340 --> 00:35:51,450
it and some people might have a

00:35:49,080 --> 00:35:53,340
three-strike rule that oh if I write it

00:35:51,450 --> 00:35:54,390
three times and I'm gonna extract it

00:35:53,340 --> 00:35:56,460
because then I'm gonna have a sense of

00:35:54,390 --> 00:35:59,580
it but what the DRI principle really is

00:35:56,460 --> 00:36:01,980
about what it states is that every piece

00:35:59,580 --> 00:36:06,180
of knowledge in your system should have

00:36:01,980 --> 00:36:07,950
one and only one representation and when

00:36:06,180 --> 00:36:11,310
you look at duplication as knowledge

00:36:07,950 --> 00:36:15,150
duplication it really changes the way

00:36:11,310 --> 00:36:17,220
you look at your design and by isolating

00:36:15,150 --> 00:36:21,630
yourself from a lot of the rest of the

00:36:17,220 --> 00:36:24,270
system you can highlight knowledge

00:36:21,630 --> 00:36:26,820
centers you can highlight those places

00:36:24,270 --> 00:36:32,010
that capture information in your system

00:36:26,820 --> 00:36:35,330
and the fourth one is small once you've

00:36:32,010 --> 00:36:37,560
expanded it by writing more code

00:36:35,330 --> 00:36:39,840
eliminating duplication you can look to

00:36:37,560 --> 00:36:44,430
see if there's any smart parts that can

00:36:39,840 --> 00:36:47,880
be collapsed so these really are the

00:36:44,430 --> 00:36:51,780
core and when you're refactoring when

00:36:47,880 --> 00:36:53,400
you're writing these tests and isolating

00:36:51,780 --> 00:36:57,560
yourself from the rest of your system

00:36:53,400 --> 00:36:57,560
these are what you focus on

00:37:01,710 --> 00:37:10,410
okay so I have a take-home challenge for

00:37:05,940 --> 00:37:14,160
you it's an interesting one because it's

00:37:10,410 --> 00:37:16,860
something that a lot of us face so

00:37:14,160 --> 00:37:19,620
here's my code retreat I have you know a

00:37:16,860 --> 00:37:21,120
tour accessible I have some validations

00:37:19,620 --> 00:37:22,650
that these are have to be there you have

00:37:21,120 --> 00:37:23,310
to have a location a facilitator and a

00:37:22,650 --> 00:37:28,350
host

00:37:23,310 --> 00:37:31,650
there's my scope and down here I'm

00:37:28,350 --> 00:37:33,720
writing this when I test scopes I always

00:37:31,650 --> 00:37:35,310
have the database it's the only time

00:37:33,720 --> 00:37:37,200
that I actually hit the database but if

00:37:35,310 --> 00:37:40,560
I'm testing something that's generating

00:37:37,200 --> 00:37:42,210
sequel for me it probably makes sense to

00:37:40,560 --> 00:37:45,210
hit the database make sure that the

00:37:42,210 --> 00:37:47,190
sequel is right so you come in and you

00:37:45,210 --> 00:37:48,750
create one for today you create one for

00:37:47,190 --> 00:37:51,870
yesterday you create one for tomorrow

00:37:48,750 --> 00:37:56,250
and what you ask it should just have

00:37:51,870 --> 00:37:59,460
today's event but this has a lot of

00:37:56,250 --> 00:38:01,800
coupling in it the fact that I have to

00:37:59,460 --> 00:38:03,930
put this facilitator and the host in my

00:38:01,800 --> 00:38:08,100
test all I'm really caring about is the

00:38:03,930 --> 00:38:10,500
date this is unnecessary noise but I

00:38:08,100 --> 00:38:14,100
can't do anything but I have to have it

00:38:10,500 --> 00:38:16,980
there and it gives me false positives

00:38:14,100 --> 00:38:18,000
this style of test if yesterday's or

00:38:16,980 --> 00:38:20,010
tomorrow's are not created in the

00:38:18,000 --> 00:38:23,310
database so if it fails because of the

00:38:20,010 --> 00:38:25,800
validation it's not going to care if if

00:38:23,310 --> 00:38:30,110
it doesn't create tomorrow B so I can't

00:38:25,800 --> 00:38:33,870
take those out this is a testing pain

00:38:30,110 --> 00:38:36,980
this is a concrete pain that we have

00:38:33,870 --> 00:38:40,650
here that I'm trying to test that it

00:38:36,980 --> 00:38:43,950
looks at the scheduled for but I have to

00:38:40,650 --> 00:38:45,630
have this extra information so the

00:38:43,950 --> 00:38:46,980
take-home challenge that I would give

00:38:45,630 --> 00:38:51,270
you because everybody likes challenges

00:38:46,980 --> 00:38:53,700
and why not give you something to code

00:38:51,270 --> 00:38:57,800
on is really to think about this this is

00:38:53,700 --> 00:39:02,130
a fundamental pain in a lot of testing

00:38:57,800 --> 00:39:06,180
so how can you change the design to fix

00:39:02,130 --> 00:39:09,000
this what can you do to this so that you

00:39:06,180 --> 00:39:13,500
can actually test this stuff without

00:39:09,000 --> 00:39:14,880
this unnecessary noise so there's your

00:39:13,500 --> 00:39:18,119
take home ik challenge

00:39:14,880 --> 00:39:26,279
that was it thank you there's a picture

00:39:18,119 --> 00:39:29,279
of me with my cat it looks like I have

00:39:26,279 --> 00:39:38,819
seven minutes if anybody has any

00:39:29,279 --> 00:39:42,329
questions oh yes yes

00:39:38,819 --> 00:39:45,690
I'll put it at the end of the slides and

00:39:42,329 --> 00:39:49,170
then I'll put the slides up there yeah I

00:39:45,690 --> 00:39:51,680
think that whole app is up there so any

00:39:49,170 --> 00:39:55,710
other questions

00:39:51,680 --> 00:39:58,289
no what's that two questions holding

00:39:55,710 --> 00:40:06,509
presenting questions no awesome we'll

00:39:58,289 --> 00:40:11,579
have the rest of the day what Aaron no

00:40:06,509 --> 00:40:16,500
it is Comic Sans that's that's the bitly

00:40:11,579 --> 00:40:20,400
name it's it's actually a link to the

00:40:16,500 --> 00:40:23,519
McSweeney's article that's so it's well

00:40:20,400 --> 00:40:30,500
worth reading Comic Sans is the ultimate

00:40:23,519 --> 00:40:30,500
presentation font any other question yes

00:40:33,950 --> 00:40:43,640
okay there we go any other questions or

00:40:39,319 --> 00:40:43,640
random things you would like me to do

00:40:43,730 --> 00:40:48,210
I'm actually learning how to do the

00:40:46,289 --> 00:40:49,740
running man but I'm not ready yet

00:40:48,210 --> 00:40:51,000
probably Australia I think I'm gonna go

00:40:49,740 --> 00:40:56,390
I'm gonna try to get Aaron to dance with

00:40:51,000 --> 00:40:56,390
me yes there's first in the red shirt

00:41:04,410 --> 00:41:15,630
now wouldn't be much of a challenge if I

00:41:06,599 --> 00:41:19,099
didn't so the challenge here is this is

00:41:15,630 --> 00:41:24,170
something that's that I find annoying is

00:41:19,099 --> 00:41:27,539
that these that this validations here

00:41:24,170 --> 00:41:31,769
tightly couples all of the rest of your

00:41:27,539 --> 00:41:34,109
code to this so it's an interesting

00:41:31,769 --> 00:41:36,119
design challenge of what would you do

00:41:34,109 --> 00:41:38,940
how would you change the way that this

00:41:36,119 --> 00:41:44,369
works how maybe you would change the way

00:41:38,940 --> 00:41:52,200
that you do validations it's arguable

00:41:44,369 --> 00:41:56,069
that this is not optimal for building

00:41:52,200 --> 00:41:59,089
something decoupled it's arguable you

00:41:56,069 --> 00:42:03,599
know it's a trade-off between speed and

00:41:59,089 --> 00:42:04,500
you know speed of development and now I

00:42:03,599 --> 00:42:07,259
don't even know if that's a trade-off

00:42:04,500 --> 00:42:09,509
but it's a it's it's an interesting one

00:42:07,259 --> 00:42:14,059
because it's so fundamental to Rails to

00:42:09,509 --> 00:42:14,059
have this these validations yes

00:42:18,540 --> 00:42:21,230
mm-hm

00:42:30,950 --> 00:42:33,790
mm-hmm

00:42:40,880 --> 00:42:48,440
hmm so the the fact that we have these

00:42:45,770 --> 00:42:49,820
like now there's a layer this presenter

00:42:48,440 --> 00:42:53,000
layer and then there's there's this

00:42:49,820 --> 00:42:55,430
logical layer of scopes and then down so

00:42:53,000 --> 00:42:56,900
what you're saying is that the the pain

00:42:55,430 --> 00:42:58,760
that you felt when you do this is

00:42:56,900 --> 00:43:01,060
because that you have to keep all of the

00:42:58,760 --> 00:43:04,400
layers in your head at one time my

00:43:01,060 --> 00:43:06,260
response would be why do you have to

00:43:04,400 --> 00:43:08,740
keep all those layers in your head at

00:43:06,260 --> 00:43:08,740
one time

00:43:18,480 --> 00:43:22,900
mm-hmm

00:43:19,900 --> 00:43:24,730
I guess a lot of it comes down to what

00:43:22,900 --> 00:43:27,910
value do you get out of that what's the

00:43:24,730 --> 00:43:29,559
pain that you're trying to do is it so

00:43:27,910 --> 00:43:34,470
is the integration test making sure that

00:43:29,559 --> 00:43:34,470
you've actually implemented all of them

00:43:39,420 --> 00:43:45,579
so one of the things by chance so it's a

00:43:43,660 --> 00:43:49,059
it's one of the common things that low

00:43:45,579 --> 00:43:53,170
if I change this one then this guy

00:43:49,059 --> 00:43:56,049
doesn't have to change do you by chance

00:43:53,170 --> 00:43:59,170
do where you kind of build a whole layer

00:43:56,049 --> 00:44:06,809
and then build the layer underneath it

00:43:59,170 --> 00:44:12,789
that it's calling okay so try instead

00:44:06,809 --> 00:44:14,619
doing straight through like a vertical

00:44:12,789 --> 00:44:17,349
slice through your thing

00:44:14,619 --> 00:44:20,380
do you often run into where you you

00:44:17,349 --> 00:44:26,799
change something lower and you hit up

00:44:20,380 --> 00:44:29,279
top it no no it's actually a comment

00:44:26,799 --> 00:44:33,640
it's a one of the one of the most common

00:44:29,279 --> 00:44:36,400
fears I was just talking to a guy Friday

00:44:33,640 --> 00:44:38,400
about it a guy who named Josh cheek who

00:44:36,400 --> 00:44:40,900
writes a system called surrogate and

00:44:38,400 --> 00:44:43,660
it's a test doubling system that'll

00:44:40,900 --> 00:44:46,270
actually make sure that it is that it

00:44:43,660 --> 00:44:49,539
reflects the thing it's doubling so if

00:44:46,270 --> 00:44:53,770
you change a thing there it does that um

00:44:49,539 --> 00:44:55,059
I so rarely run into that exact that

00:44:53,770 --> 00:44:58,809
problem where I changed something

00:44:55,059 --> 00:45:04,510
underneath and the thing above it like

00:44:58,809 --> 00:45:07,240
mismatches that it's usually I'm not

00:45:04,510 --> 00:45:08,980
sure why like I don't know if that's

00:45:07,240 --> 00:45:12,750
something that people run into a lot cuz

00:45:08,980 --> 00:45:16,240
I don't tend to it's a fear and I

00:45:12,750 --> 00:45:18,099
generally I tell people is it a fear or

00:45:16,240 --> 00:45:21,490
is it something that you do a lot of

00:45:18,099 --> 00:45:24,250
times and this is a lot when I do other

00:45:21,490 --> 00:45:26,529
things as well is we have these fears

00:45:24,250 --> 00:45:28,089
about changing and whoa what happens if

00:45:26,529 --> 00:45:29,829
I change something underneath and and

00:45:28,089 --> 00:45:32,710
then it blows up in production because

00:45:29,829 --> 00:45:35,859
the API mismatch

00:45:32,710 --> 00:45:37,270
I guess a lot of it boils down to is

00:45:35,859 --> 00:45:40,030
that just doesn't happen to me that

00:45:37,270 --> 00:45:41,440
often and I don't have that fear for

00:45:40,030 --> 00:45:44,109
some reason it man

00:45:41,440 --> 00:45:46,480
once or twice but the added complexity

00:45:44,109 --> 00:45:48,609
of not doing that or the added

00:45:46,480 --> 00:45:51,160
complexity of having something that

00:45:48,609 --> 00:45:56,920
matches that up I

00:45:51,160 --> 00:45:59,890
in my experience doesn't pay off but as

00:45:56,920 --> 00:46:02,349
with everything your mileage may vary

00:45:59,890 --> 00:46:07,210
but check out surrogate because it's

00:46:02,349 --> 00:46:12,099
specifically built to sort of counter

00:46:07,210 --> 00:46:16,800
that fear so good well with 15 seconds

00:46:12,099 --> 00:46:16,800
left that's it thank you very much

00:46:29,920 --> 00:46:31,980

YouTube URL: https://www.youtube.com/watch?v=t430e6M5YAo


