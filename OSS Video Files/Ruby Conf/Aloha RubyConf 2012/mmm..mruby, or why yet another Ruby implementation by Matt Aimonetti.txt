Title: mmm..mruby, or why yet another Ruby implementation by Matt Aimonetti
Publication date: 2020-01-28
Playlist: Aloha RubyConf 2012
Description: 
	Help us caption & translate this video!

http://amara.org/v/FGfr/
Captions: 
	00:00:14,719 --> 00:00:22,529
good evening everybody these are you

00:00:20,760 --> 00:00:25,860
guys tired you want to cough you before

00:00:22,529 --> 00:00:29,550
we start it's the last talk and have a

00:00:25,860 --> 00:00:35,640
surprise for you so is everybody ready

00:00:29,550 --> 00:00:38,040
you guys good all right you guys had a

00:00:35,640 --> 00:00:41,820
good good conference so far looks pretty

00:00:38,040 --> 00:00:45,860
cool ok so maybe we should upload the

00:00:41,820 --> 00:00:45,860
organizers for the job

00:00:50,790 --> 00:00:55,900
ok so I'm going I'm going to give you

00:00:53,500 --> 00:00:58,000
the last talk of this conference and

00:00:55,900 --> 00:01:02,050
it's kind of a dry subject it's called

00:00:58,000 --> 00:01:03,940
Ruby and Ruby is not the most exciting

00:01:02,050 --> 00:01:05,560
thing ever even though I'm personally

00:01:03,940 --> 00:01:08,620
excited about it i think some of you

00:01:05,560 --> 00:01:12,670
might not so i actually added another

00:01:08,620 --> 00:01:14,200
talk inside my talk so if you feel a

00:01:12,670 --> 00:01:16,090
kind of bored and you're not interested

00:01:14,200 --> 00:01:18,100
just hold on one with a little bit

00:01:16,090 --> 00:01:19,600
there's another tour coming it so it's

00:01:18,100 --> 00:01:22,150
actually too short talks so you don't

00:01:19,600 --> 00:01:24,310
fall asleep so the first talk is a movie

00:01:22,150 --> 00:01:28,450
and the second talk is on revisiting

00:01:24,310 --> 00:01:31,630
Ruby so before I start I want to give

00:01:28,450 --> 00:01:34,630
you a quick disclaimer I actually don't

00:01:31,630 --> 00:01:37,330
like cats I'm really sorry about that i

00:01:34,630 --> 00:01:39,790
know it's bad just to admit it this is

00:01:37,330 --> 00:01:42,130
every time you put a slide of your cat

00:01:39,790 --> 00:01:45,940
this is what i see an evil cat looking

00:01:42,130 --> 00:01:48,430
at me ready to attack me i need to talk

00:01:45,940 --> 00:01:51,130
to my shrink about it but i think

00:01:48,430 --> 00:01:52,660
between the talk from aaron aaron stock

00:01:51,130 --> 00:01:55,990
and curry stock i was kind of

00:01:52,660 --> 00:01:57,940
traumatized so instead I'm giving you a

00:01:55,990 --> 00:02:01,300
cute dog it's not mine i just find it on

00:01:57,940 --> 00:02:04,420
the internet but looks cool and i

00:02:01,300 --> 00:02:06,729
realized nobody ever put at appear in

00:02:04,420 --> 00:02:11,110
there slide so here's a baby's up here

00:02:06,729 --> 00:02:14,080
for you guys i named it i named her

00:02:11,110 --> 00:02:16,030
kappa so anyway that was just because

00:02:14,080 --> 00:02:18,819
i'm also very stressed before i give a

00:02:16,030 --> 00:02:20,950
talk so I figure a little cute anymore

00:02:18,819 --> 00:02:23,650
might help I used to bring my daughter

00:02:20,950 --> 00:02:26,140
in front and people make comment about

00:02:23,650 --> 00:02:29,170
it that I should not we didn't do that

00:02:26,140 --> 00:02:32,110
so you will see my daughter running

00:02:29,170 --> 00:02:35,430
around but i'm not going to show her to

00:02:32,110 --> 00:02:38,140
you so am i I work for living social

00:02:35,430 --> 00:02:40,390
we're now hiring we've been hiring for a

00:02:38,140 --> 00:02:41,920
very long time how about we keep on

00:02:40,390 --> 00:02:44,470
hiring and we look for very good people

00:02:41,920 --> 00:02:46,060
so I think we're four or five here for

00:02:44,470 --> 00:02:49,120
living social so if you look for a job

00:02:46,060 --> 00:02:52,660
and you're very talented person come and

00:02:49,120 --> 00:02:54,370
talk to us so as I was preparing this

00:02:52,660 --> 00:02:55,510
talk I was getting kind of stress and I

00:02:54,370 --> 00:02:58,510
was like I'm not sure I'm gonna do a

00:02:55,510 --> 00:03:00,550
good job and I was asking my mentor chat

00:02:58,510 --> 00:03:01,970
for what should I do and he told me well

00:03:00,550 --> 00:03:04,400
here's the five rules

00:03:01,970 --> 00:03:07,250
now the problem is because of rule

00:03:04,400 --> 00:03:10,000
number three I can't read them to you so

00:03:07,250 --> 00:03:12,170
please take a moment to read them and

00:03:10,000 --> 00:03:16,640
remember i'm going to try to do all of

00:03:12,170 --> 00:03:19,490
that do you guys get it yes yeah okay

00:03:16,640 --> 00:03:21,470
that was number 2 i'm going to try to

00:03:19,490 --> 00:03:24,260
change a ton of my voice I quite did not

00:03:21,470 --> 00:03:26,420
understand what that mean mens so am I

00:03:24,260 --> 00:03:29,000
tried to but I pitch sometimes in kind

00:03:26,420 --> 00:03:30,620
of lower efficient place we didn't

00:03:29,000 --> 00:03:32,900
revive before so that might actually

00:03:30,620 --> 00:03:34,400
help quite a lot and I'm going to try to

00:03:32,900 --> 00:03:36,770
enjoy myself I've been enjoying myself

00:03:34,400 --> 00:03:39,890
in in in our why enough for about a week

00:03:36,770 --> 00:03:42,890
and it's been a lot of fun alright let's

00:03:39,890 --> 00:03:45,590
talk about Ruby so ruby has a lot of

00:03:42,890 --> 00:03:48,050
different implementations this are the

00:03:45,590 --> 00:03:50,900
main will be implementations we have see

00:03:48,050 --> 00:03:53,600
Ruby would be enterprise edition Mike

00:03:50,900 --> 00:03:54,890
lab iron will be we've been used chair

00:03:53,600 --> 00:03:57,890
would be I'm reading the slides I'm

00:03:54,890 --> 00:04:00,110
doing it wrong sorry Chad so we know

00:03:57,890 --> 00:04:03,800
that for yourself and what might look at

00:04:00,110 --> 00:04:05,450
that and think wow Ruby and think

00:04:03,800 --> 00:04:08,180
something I didn't really know what you

00:04:05,450 --> 00:04:10,700
guys would think about but Matt's looked

00:04:08,180 --> 00:04:13,040
at that I thought it was good but II

00:04:10,700 --> 00:04:17,590
needed another movie so he came up with

00:04:13,040 --> 00:04:21,680
movie so why did he come up with Murray

00:04:17,590 --> 00:04:25,310
well that's a good question from what I

00:04:21,680 --> 00:04:27,260
got in talking with him and reading his

00:04:25,310 --> 00:04:30,310
code I realize you wanted to do two

00:04:27,260 --> 00:04:33,380
things that none of the currently

00:04:30,310 --> 00:04:35,330
existing versions of Rubio

00:04:33,380 --> 00:04:39,979
implementations of Ruby really do well

00:04:35,330 --> 00:04:43,040
one is being modular and that means that

00:04:39,979 --> 00:04:45,770
in Ruby you can use float instead of

00:04:43,040 --> 00:04:47,690
doable you can set a maximum function

00:04:45,770 --> 00:04:50,510
arguments you can disable a bunch of

00:04:47,690 --> 00:04:52,400
stuff you can actually change the memory

00:04:50,510 --> 00:04:56,270
management if you want you you can

00:04:52,400 --> 00:04:58,660
basically reduce or customize your ruby

00:04:56,270 --> 00:05:01,070
implementation the way you want it

00:04:58,660 --> 00:05:05,479
anything that's not cross platform is

00:05:01,070 --> 00:05:06,860
actually not available in Ruby which is

00:05:05,479 --> 00:05:08,009
quite interesting because actually a lot

00:05:06,860 --> 00:05:10,619
of things really

00:05:08,009 --> 00:05:13,860
related platform we use and also that

00:05:10,619 --> 00:05:17,460
later on the other main value of movie

00:05:13,860 --> 00:05:21,479
is to be embedding what does I mean

00:05:17,460 --> 00:05:23,159
we'll have a quick example here of some

00:05:21,479 --> 00:05:26,129
Japanese developers and I don't know the

00:05:23,159 --> 00:05:28,619
name will actually put Murphy inside the

00:05:26,129 --> 00:05:31,860
Lego Mindstorm robot so the here is a

00:05:28,619 --> 00:05:34,169
code you can see this is the Ruby code

00:05:31,860 --> 00:05:36,749
and on the bottom you have the C code

00:05:34,169 --> 00:05:38,939
that loads we don't really very well but

00:05:36,749 --> 00:05:41,520
the bytecode that were generated by Ruby

00:05:38,939 --> 00:05:45,539
and it's included and it runs directly

00:05:41,520 --> 00:05:50,039
on a small box that has 64 kilobyte of

00:05:45,539 --> 00:05:51,029
run so this is the entire code you don't

00:05:50,039 --> 00:05:52,680
really see the Cody doesn't really

00:05:51,029 --> 00:05:54,569
matter it's not a lot of code but it's

00:05:52,680 --> 00:05:58,699
basically Ruby code that was compiling

00:05:54,569 --> 00:06:01,379
my code and loaded into that and

00:05:58,699 --> 00:06:04,709
hopefully is going to start showing the

00:06:01,379 --> 00:06:06,330
robot soon forgot it was that long

00:06:04,709 --> 00:06:08,189
there's actually music and forgot to

00:06:06,330 --> 00:06:16,849
plug it in but here's the robot running

00:06:08,189 --> 00:06:16,849
on Ruby and it's just started

00:06:19,150 --> 00:06:25,240
in their regards so this is an example

00:06:21,910 --> 00:06:27,190
of embedded programming you can think

00:06:25,240 --> 00:06:31,180
about putting Ruben you watch on you

00:06:27,190 --> 00:06:32,860
free to somewhere else do any of you

00:06:31,180 --> 00:06:37,450
guys use Ruby for something that's not

00:06:32,860 --> 00:06:44,380
web related I see some wow what do you

00:06:37,450 --> 00:06:46,180
use it for you use Arduino Syverson

00:06:44,380 --> 00:06:50,200
serial port regard we known someone

00:06:46,180 --> 00:06:57,520
format so much what do you do pure

00:06:50,200 --> 00:06:59,500
coding anybody else no I'm sure I saw

00:06:57,520 --> 00:07:01,030
their hands or whatever so that's

00:06:59,500 --> 00:07:05,950
actually an example of where you can

00:07:01,030 --> 00:07:07,660
embed Ruby in a device itself that has

00:07:05,950 --> 00:07:10,090
different restrictions than the usual

00:07:07,660 --> 00:07:12,550
Ruby so movie you might think well since

00:07:10,090 --> 00:07:15,130
it's matt working on it it's the same

00:07:12,550 --> 00:07:17,220
thing as Ruby 20 well it's not it's

00:07:15,130 --> 00:07:20,140
actually two different projects and

00:07:17,220 --> 00:07:23,380
Mervis reports and photos the ISO

00:07:20,140 --> 00:07:25,930
standards for Ruby but it's different

00:07:23,380 --> 00:07:28,260
implementation so you might wonder y is

00:07:25,930 --> 00:07:30,580
equal movie and why is it so hard to say

00:07:28,260 --> 00:07:33,030
well the reason is because it comes from

00:07:30,580 --> 00:07:35,250
matts and biddable minimal

00:07:33,030 --> 00:07:38,790
implementation of the Ruby language and

00:07:35,250 --> 00:07:41,290
you have a bunch of you and it's Murr be

00:07:38,790 --> 00:07:43,300
if you don't want some Ruby you can also

00:07:41,290 --> 00:07:45,130
just say minimalistic movie but that

00:07:43,300 --> 00:07:48,400
might not be really chew in the future

00:07:45,130 --> 00:07:53,530
so just stick to Ruby so also very fun

00:07:48,400 --> 00:07:56,200
to say so the year 2012 something

00:07:53,530 --> 00:07:59,050
special happened after many many years

00:07:56,200 --> 00:08:01,840
of matts talking about right vm and

00:07:59,050 --> 00:08:04,450
about getting this implementation of

00:08:01,840 --> 00:08:09,490
Ruby it finally released a preliminary

00:08:04,450 --> 00:08:11,590
release in april of this year this

00:08:09,490 --> 00:08:13,450
release was sponsored by the japanese

00:08:11,590 --> 00:08:16,360
government the regional innovation

00:08:13,450 --> 00:08:18,490
creation are any program i'm not really

00:08:16,360 --> 00:08:19,990
sure what it means Chad I think you were

00:08:18,490 --> 00:08:23,740
there when that on said you know what

00:08:19,990 --> 00:08:26,470
what they do no nobody knows but they

00:08:23,740 --> 00:08:28,990
actually give money to match to do Ruby

00:08:26,470 --> 00:08:30,849
so thank you thanks to the Japanese

00:08:28,990 --> 00:08:32,889
government we can now put Ruby on

00:08:30,849 --> 00:08:34,810
which is pretty cool kind of the two

00:08:32,889 --> 00:08:37,380
things i really like in my life and my

00:08:34,810 --> 00:08:42,050
wife and my kids I kid on the other one

00:08:37,380 --> 00:08:47,120
but I know sorry

00:08:42,050 --> 00:08:49,149
alright so how do you use movie well the

00:08:47,120 --> 00:08:52,339
first thing is actually the usual use of

00:08:49,149 --> 00:08:55,010
Ruby you can just say Ruby and then put

00:08:52,339 --> 00:08:56,360
the Ruby source code and it will exec

00:08:55,010 --> 00:08:58,850
you with your Ruby code it's actually

00:08:56,360 --> 00:09:01,940
the usual way that works that still

00:08:58,850 --> 00:09:04,130
works in in Ruby you also have our b

00:09:01,940 --> 00:09:07,610
which is wrong I don't even know if I

00:09:04,130 --> 00:09:10,430
can say it's a library it's a repo so

00:09:07,610 --> 00:09:12,230
you just type M IRB and then you type

00:09:10,430 --> 00:09:14,899
your code and we'll just if I ain to put

00:09:12,230 --> 00:09:16,519
it in real time you can also just

00:09:14,899 --> 00:09:18,140
interpret it like that like you can do

00:09:16,519 --> 00:09:20,029
normal Ruby who where it gets

00:09:18,140 --> 00:09:22,790
interesting is you can actually generate

00:09:20,029 --> 00:09:25,100
by code or intermediate representation

00:09:22,790 --> 00:09:27,019
so now you can have this bytecode in

00:09:25,100 --> 00:09:29,680
serving source code you have that you

00:09:27,019 --> 00:09:32,240
can use that in your new C code and

00:09:29,680 --> 00:09:35,120
slurp it in and interpret it in real

00:09:32,240 --> 00:09:36,800
time but once i think is more

00:09:35,120 --> 00:09:39,620
interesting is you can actually convert

00:09:36,800 --> 00:09:41,240
your Ruby code into C code so you can

00:09:39,620 --> 00:09:44,149
take the source code you have in Ruby

00:09:41,240 --> 00:09:45,709
and you generate secret and you have two

00:09:44,149 --> 00:09:48,070
different formats you have a readable

00:09:45,709 --> 00:09:52,190
format so that basically generates real

00:09:48,070 --> 00:09:54,680
C code or you can generate a binary

00:09:52,190 --> 00:09:57,709
format of it and it's basically what i'm

00:09:54,680 --> 00:10:01,579
going to show you next so here is me

00:09:57,709 --> 00:10:04,850
using a generating a hello world in Ruby

00:10:01,579 --> 00:10:06,500
so that's C code and you can see you

00:10:04,850 --> 00:10:09,980
have a laser cutting a police report I

00:10:06,500 --> 00:10:13,250
love laser cutters so here is I create

00:10:09,980 --> 00:10:15,350
an instance of the Ruby interpreter then

00:10:13,250 --> 00:10:18,079
i create an array of characters so

00:10:15,350 --> 00:10:20,600
that's my string I just print that just

00:10:18,079 --> 00:10:23,060
because that's cool and then I hear

00:10:20,600 --> 00:10:27,740
execute the source code and then I

00:10:23,060 --> 00:10:28,850
return 0 so this is the this is the

00:10:27,740 --> 00:10:31,130
first thing you need to do is you need

00:10:28,850 --> 00:10:33,949
to compile it and link it and it gives

00:10:31,130 --> 00:10:35,769
you this machine code version and then

00:10:33,949 --> 00:10:38,110
you execute it in a

00:10:35,769 --> 00:10:42,850
executing will be cut from see that was

00:10:38,110 --> 00:10:44,649
the prince from before this and then it

00:10:42,850 --> 00:10:48,129
prints actually execute the Ruby code

00:10:44,649 --> 00:10:53,799
which in this case does that so what are

00:10:48,129 --> 00:10:55,600
the use cases of Ruby well i was

00:10:53,799 --> 00:10:57,850
thinking about it and i could find like

00:10:55,600 --> 00:10:59,829
all these different use cases and i

00:10:57,850 --> 00:11:04,269
found a better solution it's basically

00:10:59,829 --> 00:11:08,009
wherever you use lua so Louis really the

00:11:04,269 --> 00:11:11,559
motivation all the inspiration for movie

00:11:08,009 --> 00:11:14,499
so what is your blue eyes a Brazilian

00:11:11,559 --> 00:11:16,089
language that combines simple procedure

00:11:14,499 --> 00:11:18,699
I actually just read it for yourself

00:11:16,089 --> 00:11:20,259
that would be easier so we can really

00:11:18,699 --> 00:11:21,759
Aaron can you read that from alan let me

00:11:20,259 --> 00:11:25,420
come down upper to get the microwave i

00:11:21,759 --> 00:11:28,029
know you have a very good voice lua

00:11:25,420 --> 00:11:30,369
combines simple procedural syntax with

00:11:28,029 --> 00:11:33,899
powerful data description constructs

00:11:30,369 --> 00:11:38,459
based on associative arrays and

00:11:33,899 --> 00:11:38,459
extensible semantics thank you very much

00:11:41,360 --> 00:11:48,780
so now we have a description of Ruby I'm

00:11:46,470 --> 00:11:53,580
gonna ask Charles to read that I think

00:11:48,780 --> 00:11:55,800
that's fun i like that ruby is a dynamic

00:11:53,580 --> 00:11:58,320
programming language with a focus on

00:11:55,800 --> 00:12:00,480
simplicity and productivity it has an X

00:11:58,320 --> 00:12:09,030
elegant syntax that is natural to read

00:12:00,480 --> 00:12:10,530
and easy to write good job so I just

00:12:09,030 --> 00:12:12,900
didn't want to break rule number three

00:12:10,530 --> 00:12:14,760
from the chat rules so that's why I have

00:12:12,900 --> 00:12:16,790
somebody else to read it for me so you

00:12:14,760 --> 00:12:20,490
can see from these two definitions that

00:12:16,790 --> 00:12:23,400
one really focuses on efficiency and the

00:12:20,490 --> 00:12:25,200
other one on being explicit and

00:12:23,400 --> 00:12:27,930
communicating and productivity so they

00:12:25,200 --> 00:12:29,430
really are two different concepts when

00:12:27,930 --> 00:12:33,570
it comes to programming languages but

00:12:29,430 --> 00:12:37,830
Lua is very very used in the video game

00:12:33,570 --> 00:12:40,640
industry here's a survey from 2009 where

00:12:37,830 --> 00:12:43,590
we asked video game developers what's

00:12:40,640 --> 00:12:45,150
scripting languages do you use when you

00:12:43,590 --> 00:12:47,280
write your game so you might not realize

00:12:45,150 --> 00:12:50,640
but most video games are written in C or

00:12:47,280 --> 00:12:52,980
C++ and inside them that might use

00:12:50,640 --> 00:12:54,540
scripting language for AI for

00:12:52,980 --> 00:12:58,410
configuration for different things like

00:12:54,540 --> 00:13:01,290
that and lua is by far the most used

00:12:58,410 --> 00:13:04,410
scripting language then a lot of people

00:13:01,290 --> 00:13:06,420
use custom languages I think if we if we

00:13:04,410 --> 00:13:08,340
would rerun the survey woods you've been

00:13:06,420 --> 00:13:10,380
more custom languages because the llvm

00:13:08,340 --> 00:13:12,870
give a bit more flexibility but that's

00:13:10,380 --> 00:13:14,820
besides the point so you can see that

00:13:12,870 --> 00:13:18,150
actually python is even part of the list

00:13:14,820 --> 00:13:20,550
but would be is nowhere to be seen so

00:13:18,150 --> 00:13:22,920
why isn't it was so popular well first

00:13:20,550 --> 00:13:24,720
it's a very simple language it's very

00:13:22,920 --> 00:13:25,890
close to JavaScript if you don't know

00:13:24,720 --> 00:13:29,460
where you can just think about

00:13:25,890 --> 00:13:32,310
JavaScript and it's close enough but

00:13:29,460 --> 00:13:34,050
it's very easily available because it

00:13:32,310 --> 00:13:37,620
has a simple and very well-documented

00:13:34,050 --> 00:13:39,690
API actually suite of AP is also the

00:13:37,620 --> 00:13:42,450
stood the memory footprint is really

00:13:39,690 --> 00:13:44,640
small which is useful when you're

00:13:42,450 --> 00:13:47,310
limited by the memory of the device to

00:13:44,640 --> 00:13:47,670
run on and finally it's very portable so

00:13:47,310 --> 00:13:48,960
you can

00:13:47,670 --> 00:13:53,670
take it from one platform to the other

00:13:48,960 --> 00:13:55,650
and things work well so this is another

00:13:53,670 --> 00:13:59,850
description and I'm just going to read

00:13:55,650 --> 00:14:02,970
it this is actually the way Lou I

00:13:59,850 --> 00:14:06,510
describes itself and it turns out it's

00:14:02,970 --> 00:14:09,450
exactly the same form Ruby so Ruby or

00:14:06,510 --> 00:14:13,140
lua are diamond dynamically typed runs

00:14:09,450 --> 00:14:15,420
by interpret run by interpreted

00:14:13,140 --> 00:14:17,940
interpreting by code or register based

00:14:15,420 --> 00:14:20,370
virtual machine and as automatic memory

00:14:17,940 --> 00:14:23,070
management with incremental garbage

00:14:20,370 --> 00:14:25,140
collection and it makes it for an ideal

00:14:23,070 --> 00:14:28,140
makes it ideal for configuration

00:14:25,140 --> 00:14:29,760
scripting and rapid prototyping so it

00:14:28,140 --> 00:14:32,610
turns out that this description of lua

00:14:29,760 --> 00:14:34,650
applies at one hundred percent form ruby

00:14:32,610 --> 00:14:38,250
ruby has a different garbage collector

00:14:34,650 --> 00:14:39,390
than 19 he uses an incremental garbage

00:14:38,250 --> 00:14:42,270
collector and i'm not going to get into

00:14:39,390 --> 00:14:44,670
that but basically the point is that it

00:14:42,270 --> 00:14:47,000
does the same thing and it works great

00:14:44,670 --> 00:14:50,760
for configuration scripting and

00:14:47,000 --> 00:14:52,770
prototyping I will also add for some of

00:14:50,760 --> 00:14:54,450
the game logic or whatever logic you

00:14:52,770 --> 00:14:55,980
might have in your application things

00:14:54,450 --> 00:14:57,840
that you might want to tweak over time

00:14:55,980 --> 00:15:00,290
you basically don't want to write that

00:14:57,840 --> 00:15:02,850
in a static language that's hard to

00:15:00,290 --> 00:15:05,040
change you might want to have a piece of

00:15:02,850 --> 00:15:06,630
code that's very flexible and you might

00:15:05,040 --> 00:15:07,950
write that in a scripting language so

00:15:06,630 --> 00:15:12,240
you can tweak it without having to

00:15:07,950 --> 00:15:15,090
recombine everything so since April a

00:15:12,240 --> 00:15:17,430
few projects came up and were released

00:15:15,090 --> 00:15:20,700
the first one was called Moby Ruby and

00:15:17,430 --> 00:15:22,380
that's an open source project I think it

00:15:20,700 --> 00:15:26,580
was done by somebody working full

00:15:22,380 --> 00:15:31,140
appcelerator and it's basically a bridge

00:15:26,580 --> 00:15:32,730
between Ruby and iOS you can actually go

00:15:31,140 --> 00:15:34,620
to the website and download it and they

00:15:32,730 --> 00:15:37,950
have like a kind of a different syntax

00:15:34,620 --> 00:15:41,520
and you can actually write iOS apps and

00:15:37,950 --> 00:15:46,410
it combines down to Ruby that then calls

00:15:41,520 --> 00:15:48,000
Objective C so that's one use of it the

00:15:46,410 --> 00:15:50,640
other use of it which I thought was

00:15:48,000 --> 00:15:55,110
quite interesting is another Japanese

00:15:50,640 --> 00:15:56,730
developer created a bridge for Libya V

00:15:55,110 --> 00:15:59,910
allows you to

00:15:56,730 --> 00:16:03,899
use Ruby inside nodejs so Libby UV is

00:15:59,910 --> 00:16:06,449
the platform now for no Jess and I

00:16:03,899 --> 00:16:09,240
believe it's written in C so what they

00:16:06,449 --> 00:16:12,630
were able to do is to put I'm Ruby Ruby

00:16:09,240 --> 00:16:15,690
a create a binding for it and basically

00:16:12,630 --> 00:16:18,630
lets you run code for knowledge as in

00:16:15,690 --> 00:16:21,420
Ruby and call vice versa so now you can

00:16:18,630 --> 00:16:24,779
mix JavaScript and Ruby which I'm not

00:16:21,420 --> 00:16:26,670
sure that's a good idea probably not but

00:16:24,779 --> 00:16:27,990
it's it's cool that you can actually do

00:16:26,670 --> 00:16:29,760
it it's the kind of stuff Aaron

00:16:27,990 --> 00:16:35,160
Patterson used to do when it was you

00:16:29,760 --> 00:16:37,769
know cool I still use bobby the the PHP

00:16:35,160 --> 00:16:42,810
will be in PHP that's where you go so

00:16:37,769 --> 00:16:45,959
another project was mod movie and this

00:16:42,810 --> 00:16:49,350
is actually a copy of mud Lua and it's a

00:16:45,959 --> 00:16:50,940
module for Apache that's written for

00:16:49,350 --> 00:16:52,529
movie so the way it works is you can

00:16:50,940 --> 00:16:55,649
write your cutting ruby and you can have

00:16:52,529 --> 00:16:58,230
a I mean it's just a bunch of watching

00:16:55,649 --> 00:17:01,709
so here's an example this is a load

00:16:58,230 --> 00:17:03,559
balancing algorithm written in Ruby that

00:17:01,709 --> 00:17:05,819
I can be then compiled down into

00:17:03,559 --> 00:17:07,890
actually in this case is not comparison

00:17:05,819 --> 00:17:11,939
interpreted but you can use that as a

00:17:07,890 --> 00:17:17,309
module for Apache so very usual normal

00:17:11,939 --> 00:17:19,199
Ruby code we used to seeing what school

00:17:17,309 --> 00:17:22,110
of that is you could actually write your

00:17:19,199 --> 00:17:24,059
own module and right of server if you

00:17:22,110 --> 00:17:26,040
wanted to even an application co-pi it

00:17:24,059 --> 00:17:28,040
down put it into Apache and do crazy

00:17:26,040 --> 00:17:30,360
stuff I don't know what you would do but

00:17:28,040 --> 00:17:33,270
it's something different and it's nice

00:17:30,360 --> 00:17:37,410
to have that another example is this

00:17:33,270 --> 00:17:39,120
arango DB and arango DB is a document

00:17:37,410 --> 00:17:43,340
driven database so it's a bit like

00:17:39,120 --> 00:17:47,360
couchdb or MongoDB but they implemented

00:17:43,340 --> 00:17:50,100
the query language on top of Ruby and

00:17:47,360 --> 00:17:52,020
basically what the authors said was that

00:17:50,100 --> 00:17:55,980
Ruby's very good language to do that and

00:17:52,020 --> 00:17:58,290
he gave him x ability and elected that's

00:17:55,980 --> 00:18:00,330
why use movie for that he actually also

00:17:58,290 --> 00:18:02,730
contributed a lot back to the project

00:18:00,330 --> 00:18:05,429
which is really good so what are the go

00:18:02,730 --> 00:18:07,019
chats why would you know want to use or

00:18:05,429 --> 00:18:10,559
what should you be aware of when you use

00:18:07,019 --> 00:18:13,830
a movie well the first thing like jruby

00:18:10,559 --> 00:18:15,630
and like Mac would be and not Ruby new

00:18:13,830 --> 00:18:18,240
something has it you can't force the

00:18:15,630 --> 00:18:20,909
process but unlike the other languages

00:18:18,240 --> 00:18:22,649
you don't have any threats it's a big

00:18:20,909 --> 00:18:24,720
deal it depends on what you do if you

00:18:22,649 --> 00:18:26,340
think about and very programming you

00:18:24,720 --> 00:18:28,559
probably don't want to use threads or

00:18:26,340 --> 00:18:31,080
four so it's all right there's also no

00:18:28,559 --> 00:18:32,580
required and the reason is because

00:18:31,080 --> 00:18:33,750
everything gets compiled and you don't

00:18:32,580 --> 00:18:37,350
have really have access to the file

00:18:33,750 --> 00:18:40,230
system so require is not available it's

00:18:37,350 --> 00:18:42,059
also not officially released that means

00:18:40,230 --> 00:18:44,519
that it's still in development and

00:18:42,059 --> 00:18:47,250
things are changing things are not

00:18:44,519 --> 00:18:51,419
finished yet so it's not a finished

00:18:47,250 --> 00:18:54,510
product a as another problem with Ruby

00:18:51,419 --> 00:18:56,730
he has been a problem will be for a long

00:18:54,510 --> 00:18:59,100
time and now it's fixed but he has very

00:18:56,730 --> 00:19:00,690
little documentation you actually need

00:18:59,100 --> 00:19:02,970
to go into the source code you need to

00:19:00,690 --> 00:19:04,470
google and find people went into the

00:19:02,970 --> 00:19:07,529
source code and find information you

00:19:04,470 --> 00:19:09,029
need turns out you don't actually need

00:19:07,529 --> 00:19:10,350
that much documentation because it's

00:19:09,029 --> 00:19:12,539
just Ruby and if you know the language

00:19:10,350 --> 00:19:15,990
you probably find by just knowing how to

00:19:12,539 --> 00:19:18,269
use it it doesn't have standard library

00:19:15,990 --> 00:19:21,809
and I was talking with mark are you here

00:19:18,269 --> 00:19:23,639
mark now it's not here it was

00:19:21,809 --> 00:19:25,559
complaining that movie is getting too

00:19:23,639 --> 00:19:27,600
big in that the center libraries are

00:19:25,559 --> 00:19:29,940
just too much and we are like a bunch of

00:19:27,600 --> 00:19:31,830
stuff in it well in Ruby you just don't

00:19:29,940 --> 00:19:34,380
ask tanner libraries it's just the court

00:19:31,830 --> 00:19:36,929
is just basic of the language and you're

00:19:34,380 --> 00:19:39,480
on your own for everything else which is

00:19:36,929 --> 00:19:41,519
good and bad and there's actually a

00:19:39,480 --> 00:19:46,620
força movie that's get synced every

00:19:41,519 --> 00:19:48,480
night that adds a bunch of stuff for the

00:19:46,620 --> 00:19:49,919
uniques platform so you have a bunch of

00:19:48,480 --> 00:19:51,120
things are specific or the

00:19:49,919 --> 00:19:53,340
implementation is specific to the

00:19:51,120 --> 00:19:55,470
platform and you would have things like

00:19:53,340 --> 00:19:59,070
TCP and uniques and stuff like that a

00:19:55,470 --> 00:20:01,350
unique circuit exit and sleep and things

00:19:59,070 --> 00:20:03,410
like that don't exist actually never

00:20:01,350 --> 00:20:05,640
adding it just for the uniques platform

00:20:03,410 --> 00:20:06,900
this book is actually also interesting

00:20:05,640 --> 00:20:09,630
because they adding new features that

00:20:06,900 --> 00:20:11,160
are not yet backported so i didn't show

00:20:09,630 --> 00:20:13,770
it but for instance you don't have the

00:20:11,160 --> 00:20:16,230
union in a movie currently on trunk you

00:20:13,770 --> 00:20:18,059
cannot union two arrays and they

00:20:16,230 --> 00:20:19,799
actually i did this feature and i think

00:20:18,059 --> 00:20:23,220
it's going to be birch back into master

00:20:19,799 --> 00:20:24,900
by the time you watch the video so how

00:20:23,220 --> 00:20:27,809
fast it is because that's what we care

00:20:24,900 --> 00:20:30,809
about right I fast is it so its

00:20:27,809 --> 00:20:32,580
benchmark time so it turns out I was

00:20:30,809 --> 00:20:33,840
writing a lot of really cool benchmarks

00:20:32,580 --> 00:20:36,780
and they totally useless because the

00:20:33,840 --> 00:20:38,190
best way of benchmarking language I come

00:20:36,780 --> 00:20:40,380
from the video game industry so we don't

00:20:38,190 --> 00:20:43,620
really believe in Fibonacci that much so

00:20:40,380 --> 00:20:45,419
we use metal broad and the amount of

00:20:43,620 --> 00:20:47,070
metal brought you can have per second is

00:20:45,419 --> 00:20:49,440
really the reference to know how fast

00:20:47,070 --> 00:20:54,210
your languages so let me show you that

00:20:49,440 --> 00:20:57,900
right now so here I have would be 19 let

00:20:54,210 --> 00:21:01,380
me see what version I am Ruby so I've

00:20:57,900 --> 00:21:03,179
193 you 94 so let me write let me run it

00:21:01,380 --> 00:21:06,990
so I'm going to run 10 metal brats and

00:21:03,179 --> 00:21:11,760
see how long it takes and it's pretty on

00:21:06,990 --> 00:21:12,990
top of that so it took about we have a

00:21:11,760 --> 00:21:15,630
hard time seeing all them let me give

00:21:12,990 --> 00:21:21,150
the mouse here it took a bit less than

00:21:15,630 --> 00:21:23,580
five seconds so now let me try that with

00:21:21,150 --> 00:21:27,240
movie or you can see it's much faster

00:21:23,580 --> 00:21:30,090
already I almost off of it not quite but

00:21:27,240 --> 00:21:33,059
uh so it's much faster in a benchmark

00:21:30,090 --> 00:21:35,490
that makes absolutely no sense but you

00:21:33,059 --> 00:21:38,669
can see it's actually really fast to

00:21:35,490 --> 00:21:39,630
print metal rods I'm to be honest I

00:21:38,669 --> 00:21:41,070
don't really know the type of

00:21:39,630 --> 00:21:43,860
performance you're going to get it

00:21:41,070 --> 00:21:46,020
should be faster but it depends on the

00:21:43,860 --> 00:21:48,179
use case and I think when you actually

00:21:46,020 --> 00:21:49,650
do embedded programming you don't really

00:21:48,179 --> 00:21:51,419
care that much about the real

00:21:49,650 --> 00:21:54,299
performance you're getting this the

00:21:51,419 --> 00:21:56,760
footprint might be more interesting but

00:21:54,299 --> 00:22:00,659
just so you know it should be faster

00:21:56,760 --> 00:22:02,970
than then most of the rubies you have

00:22:00,659 --> 00:22:04,530
out there now I try jruby just so you

00:22:02,970 --> 00:22:06,780
know because I know Charles really care

00:22:04,530 --> 00:22:09,360
about performance and JRuby for the men

00:22:06,780 --> 00:22:13,820
abroad was as fast and mac ruby was even

00:22:09,360 --> 00:22:13,820
faster which again doesn't mean it

00:22:14,320 --> 00:22:20,510
so Ruby is a hacking language I think

00:22:18,200 --> 00:22:23,300
that's kind of what we forgot over the

00:22:20,510 --> 00:22:26,000
years because we've been writing apps

00:22:23,300 --> 00:22:28,040
and making money and now we think more

00:22:26,000 --> 00:22:31,240
about what would be the next startup I

00:22:28,040 --> 00:22:34,190
can do to make a lot of millions and

00:22:31,240 --> 00:22:36,170
sell out to VCS or make just a lot of

00:22:34,190 --> 00:22:38,660
money and we forgot that Ruby is kind of

00:22:36,170 --> 00:22:40,130
a cool language and it was it was really

00:22:38,660 --> 00:22:42,190
nice to see some of the talks we had at

00:22:40,130 --> 00:22:44,030
the conference that reminded me a

00:22:42,190 --> 00:22:45,860
actually there's a lot of cool stuff I

00:22:44,030 --> 00:22:48,890
should never do with Ruby but i can

00:22:45,860 --> 00:22:52,700
because it's fun and just think about

00:22:48,890 --> 00:22:55,340
that and what Matt's want you to do is

00:22:52,700 --> 00:22:57,710
to remember that ruby is a hacking

00:22:55,340 --> 00:22:59,660
language and you should really use Ruby

00:22:57,710 --> 00:23:02,020
everywhere and you want you to really

00:22:59,660 --> 00:23:05,600
use it everywhere from the server farm

00:23:02,020 --> 00:23:09,050
to the cell phones and it doesn't care

00:23:05,600 --> 00:23:10,640
if it's the iOS android or blackberry I

00:23:09,050 --> 00:23:13,640
don't know if you can run run anything

00:23:10,640 --> 00:23:15,770
on blackberry I don't know that's a good

00:23:13,640 --> 00:23:17,060
question maybe somebody should try Aaron

00:23:15,770 --> 00:23:19,850
maybe you should try to run would be on

00:23:17,060 --> 00:23:22,430
blackberry you don't want use a

00:23:19,850 --> 00:23:24,050
blackberry I'm sure we can get them a

00:23:22,430 --> 00:23:27,560
get a free one for you if you want

00:23:24,050 --> 00:23:28,790
anyways consoles I come from Sony

00:23:27,560 --> 00:23:32,090
Playstation I used to work at Sony

00:23:28,790 --> 00:23:34,220
Playstation before and I think a high

00:23:32,090 --> 00:23:35,930
level language in some cases makes a lot

00:23:34,220 --> 00:23:38,900
of sense and it's really nice to be able

00:23:35,930 --> 00:23:40,880
to use your language to do some cool

00:23:38,900 --> 00:23:43,340
stuff like configuration break is a

00:23:40,880 --> 00:23:45,950
really awesome tool and adding it

00:23:43,340 --> 00:23:47,690
available is actually really nice why

00:23:45,950 --> 00:23:49,430
not even it in a car I'm not talking

00:23:47,690 --> 00:23:51,620
about running rails in your car i'm

00:23:49,430 --> 00:23:54,320
talking about grunting Ruby very small

00:23:51,620 --> 00:23:57,440
safe Ruby in your car might be kind of

00:23:54,320 --> 00:23:59,720
cool what about all the robots the

00:23:57,440 --> 00:24:03,550
future is a bunch of robot building

00:23:59,720 --> 00:24:06,170
everything well why can they run on Ruby

00:24:03,550 --> 00:24:08,270
even robots that bring you bottles of

00:24:06,170 --> 00:24:10,820
water when you're thirsty that's kind of

00:24:08,270 --> 00:24:12,080
a cool idea I'm wonder if Aaron do you

00:24:10,820 --> 00:24:13,640
have you have one like that at home I

00:24:12,080 --> 00:24:16,040
know that you have a bunch of robots now

00:24:13,640 --> 00:24:19,340
you don't know that's that's really cool

00:24:16,040 --> 00:24:21,280
idea but we could really ask more robots

00:24:19,340 --> 00:24:22,580
and somebody was talking about Arduino

00:24:21,280 --> 00:24:25,039
using

00:24:22,580 --> 00:24:27,529
we know it's actually using a robot and

00:24:25,039 --> 00:24:29,510
you could program it with Ruby so you

00:24:27,529 --> 00:24:31,580
could just use Ruby everywhere not just

00:24:29,510 --> 00:24:34,490
for the web and if there's one thing you

00:24:31,580 --> 00:24:36,320
should remember from this talk is I want

00:24:34,490 --> 00:24:38,120
to go home and tech movie and do

00:24:36,320 --> 00:24:39,980
something that's not web related with

00:24:38,120 --> 00:24:43,519
Ruby and see how much fun it is because

00:24:39,980 --> 00:24:45,080
I promise you it's a lot of fun so

00:24:43,519 --> 00:24:48,049
that's it for the pot on that I'm Ruby

00:24:45,080 --> 00:24:49,130
before i talk i switch to the next part

00:24:48,049 --> 00:24:50,720
and because you're going to forget about

00:24:49,130 --> 00:24:54,769
what i talked about i want you to ask me

00:24:50,720 --> 00:24:58,820
questions now so do you have you have

00:24:54,769 --> 00:25:02,990
any questions you have any questions

00:24:58,820 --> 00:25:08,059
about moving know everybody got it sorry

00:25:02,990 --> 00:25:10,580
yes the question is can i give a run a

00:25:08,059 --> 00:25:21,409
hug of course I can Aaron can you come

00:25:10,580 --> 00:25:23,950
here please I think we should all give

00:25:21,409 --> 00:25:23,950
Aaron a hug

00:25:27,850 --> 00:25:35,570
okay oh you have a question okay why

00:25:31,280 --> 00:25:38,179
don't you talking to Mike Smith what is

00:25:35,570 --> 00:25:42,520
the M Ruby stands for again Ruby stands

00:25:38,179 --> 00:25:42,520
for embedded oh and then you go back I

00:25:42,610 --> 00:25:48,799
basically a minimalistic Ruby or

00:25:45,290 --> 00:25:52,700
embedded Ruby any other questions not

00:25:48,799 --> 00:25:54,799
related to Aaron now okay so let's move

00:25:52,700 --> 00:25:59,020
on to the second part that is related to

00:25:54,799 --> 00:26:01,220
movie and using would be everywhere I

00:25:59,020 --> 00:26:02,330
I've been learning about a lot of

00:26:01,220 --> 00:26:04,190
different languages and I've been

00:26:02,330 --> 00:26:06,169
playing with languages and I've been

00:26:04,190 --> 00:26:09,770
thinking about how could I use Ruby the

00:26:06,169 --> 00:26:12,799
MPD the world and you know what the

00:26:09,770 --> 00:26:14,510
thing is with Ruby Ruby is both a

00:26:12,799 --> 00:26:16,910
functional and an object-oriented

00:26:14,510 --> 00:26:18,500
language when I used to present Ruby I

00:26:16,910 --> 00:26:21,530
was always saying I would always say

00:26:18,500 --> 00:26:23,419
ruby is an object-oriented language and

00:26:21,530 --> 00:26:25,010
everything is an object it would be

00:26:23,419 --> 00:26:27,200
which is totally true it's awesome but

00:26:25,010 --> 00:26:29,870
it is also a functional language and

00:26:27,200 --> 00:26:33,350
it's a first-class functional language

00:26:29,870 --> 00:26:37,100
so what does it mean to be functional or

00:26:33,350 --> 00:26:39,260
in Ruby and I call Ruby a functional

00:26:37,100 --> 00:26:41,600
freedom programming language and what I

00:26:39,260 --> 00:26:46,400
mean by that is that American loves

00:26:41,600 --> 00:26:49,820
freedom so America should love Ruby not

00:26:46,400 --> 00:26:51,620
really it's it's a functional language

00:26:49,820 --> 00:26:53,179
that's not enforced most programming

00:26:51,620 --> 00:26:55,250
functional programming languages they

00:26:53,179 --> 00:26:57,590
don't give you a choice you just have to

00:26:55,250 --> 00:27:00,500
be functional with the exception of

00:26:57,590 --> 00:27:02,240
probably skala that mixes both the other

00:27:00,500 --> 00:27:05,360
language is that a tendency to do just

00:27:02,240 --> 00:27:07,580
one way and give you a bit of functional

00:27:05,360 --> 00:27:09,169
aspect on the other side so the first

00:27:07,580 --> 00:27:11,410
thing when I talk to people and I tell

00:27:09,169 --> 00:27:13,520
them well group is a functional

00:27:11,410 --> 00:27:15,350
programming language they told me no the

00:27:13,520 --> 00:27:17,150
side effect and functional programming

00:27:15,350 --> 00:27:21,169
language should not have side effects

00:27:17,150 --> 00:27:23,480
and it is true but it's not a

00:27:21,169 --> 00:27:24,710
requirement you can write would because

00:27:23,480 --> 00:27:26,630
that doesn't have side effects and

00:27:24,710 --> 00:27:29,390
that's actually why the bank symbol is

00:27:26,630 --> 00:27:31,640
there usually if you modify something

00:27:29,390 --> 00:27:33,610
you should add your method the bank

00:27:31,640 --> 00:27:36,350
symbol that says I'm going to modify

00:27:33,610 --> 00:27:37,610
stage of what you're passing me

00:27:36,350 --> 00:27:39,410
it doesn't mean you're not changing the

00:27:37,610 --> 00:27:41,299
state of an object somewhere else and

00:27:39,410 --> 00:27:44,030
there's no good way of protecting

00:27:41,299 --> 00:27:45,650
yourself from that but it's not a

00:27:44,030 --> 00:27:47,809
requirement for functional programming

00:27:45,650 --> 00:27:50,120
language by the way I'm receiving all

00:27:47,809 --> 00:27:55,610
your tweets thank you very much it's

00:27:50,120 --> 00:27:57,320
actually really cool I like that so the

00:27:55,610 --> 00:27:59,419
other aspect of functional programming

00:27:57,320 --> 00:28:01,250
language is that you should have a

00:27:59,419 --> 00:28:02,809
higher order functions and what that

00:28:01,250 --> 00:28:06,110
means is that you should be able to pass

00:28:02,809 --> 00:28:07,700
functions as arguments and you should be

00:28:06,110 --> 00:28:09,350
able to use them and you should be able

00:28:07,700 --> 00:28:11,330
to create an enemy's functions and

00:28:09,350 --> 00:28:13,190
things like that but turns out you can

00:28:11,330 --> 00:28:15,169
do that in would be we actually do that

00:28:13,190 --> 00:28:18,380
all the time when we are blocks and you

00:28:15,169 --> 00:28:20,600
can actually pass a proc or lambda as an

00:28:18,380 --> 00:28:22,700
argument and use it somewhere else so

00:28:20,600 --> 00:28:24,650
the same way you write JavaScript code

00:28:22,700 --> 00:28:26,710
you could write Ruby code I'm not saying

00:28:24,650 --> 00:28:29,179
you should do it I'm just saying you can

00:28:26,710 --> 00:28:32,419
so it is also a functional programming

00:28:29,179 --> 00:28:34,850
language another aspect of functional

00:28:32,419 --> 00:28:37,610
programming languages is compressibility

00:28:34,850 --> 00:28:40,850
so you should be able to compose things

00:28:37,610 --> 00:28:46,220
by adding them together and here's an

00:28:40,850 --> 00:28:48,620
example where I take a wrench and I will

00:28:46,220 --> 00:28:50,990
select all the odd numbers and then I

00:28:48,620 --> 00:28:55,130
will map them and I will convert them

00:28:50,990 --> 00:29:00,200
into funk into a float and then for each

00:28:55,130 --> 00:29:03,590
of them i'll create a random how do you

00:29:00,200 --> 00:29:09,470
call that again nobody Bob this thing

00:29:03,590 --> 00:29:11,150
rikku are you come on something you can

00:29:09,470 --> 00:29:11,559
see there i'm not sure you call that an

00:29:11,150 --> 00:29:13,149
English

00:29:11,559 --> 00:29:15,100
that's a crime when you're a foreigner

00:29:13,149 --> 00:29:16,360
you never know some words and and when

00:29:15,100 --> 00:29:20,200
you really need the word is usually when

00:29:16,360 --> 00:29:21,909
you give a talk so anyway it's just to

00:29:20,200 --> 00:29:26,620
show you that you can chain all these

00:29:21,909 --> 00:29:27,789
functions together and you can come up

00:29:26,620 --> 00:29:29,200
with something I'm not saying again that

00:29:27,789 --> 00:29:30,970
is a good thing what I'm saying is in

00:29:29,200 --> 00:29:32,830
functional programming that's the thing

00:29:30,970 --> 00:29:35,409
you might do often especially when you

00:29:32,830 --> 00:29:38,470
process data and you have this ability

00:29:35,409 --> 00:29:40,029
here there's something else so when I

00:29:38,470 --> 00:29:41,649
usually show that to people that tell me

00:29:40,029 --> 00:29:43,360
oh yeah but if you do that in Ruby it's

00:29:41,649 --> 00:29:47,499
not really optimized because at each

00:29:43,360 --> 00:29:49,210
level we create a full array of every

00:29:47,499 --> 00:29:50,740
other all of these objects and they get

00:29:49,210 --> 00:29:52,869
passed down so you basically end up

00:29:50,740 --> 00:29:54,519
wasting a lot of memory because you

00:29:52,869 --> 00:29:59,139
don't really need it but the good news

00:29:54,519 --> 00:30:01,600
is in Ruby 120 you have something called

00:29:59,139 --> 00:30:04,480
enemy really lazy and what an that

00:30:01,600 --> 00:30:06,460
enables you to do is instead of passing

00:30:04,480 --> 00:30:08,860
the full array every time it just passed

00:30:06,460 --> 00:30:13,840
one object at a time so you have one

00:30:08,860 --> 00:30:16,210
object so if you go it's hard to explain

00:30:13,840 --> 00:30:18,220
very easily when I'm in the middle of

00:30:16,210 --> 00:30:20,139
talk but basically if we wanted taking

00:30:18,220 --> 00:30:22,869
the two first five results it would

00:30:20,139 --> 00:30:26,470
basically stopped after five loops in

00:30:22,869 --> 00:30:31,080
the numerator in a numerator so if we

00:30:26,470 --> 00:30:34,029
had infinite array it could actually

00:30:31,080 --> 00:30:36,460
stop whenever it's done without creating

00:30:34,029 --> 00:30:39,340
a huge array of all the objects so

00:30:36,460 --> 00:30:42,309
that's actually an optimization that you

00:30:39,340 --> 00:30:44,830
can use in Ruby gelato to optimize this

00:30:42,309 --> 00:30:47,529
type of things you also have carrying

00:30:44,830 --> 00:30:49,389
and I was surprised gently I didn't see

00:30:47,529 --> 00:30:53,080
that in your in your slide so maybe you

00:30:49,389 --> 00:30:56,499
could get 102 this is kurung it would be

00:30:53,080 --> 00:31:00,399
19 and actually use kind of crazy 19

00:30:56,499 --> 00:31:02,230
syntax to confuse everybody else so what

00:31:00,399 --> 00:31:05,350
do we have here well I create this

00:31:02,230 --> 00:31:07,779
lambda that takes a function and we have

00:31:05,350 --> 00:31:10,419
a and V these are two params and we have

00:31:07,779 --> 00:31:12,820
a block and then I call curry on that

00:31:10,419 --> 00:31:14,769
which basically means that I'm going to

00:31:12,820 --> 00:31:17,379
be able to pass this function as the

00:31:14,769 --> 00:31:20,139
first argument of this and then i create

00:31:17,379 --> 00:31:23,810
this partial function as they this point

00:31:20,139 --> 00:31:27,740
this lambda called some of ends would be

00:31:23,810 --> 00:31:30,140
this and I'm passing this lambda X of X

00:31:27,740 --> 00:31:33,890
as the first function and then I can

00:31:30,140 --> 00:31:36,220
call it down here and i can say i can

00:31:33,890 --> 00:31:41,660
pass one in five and it would basically

00:31:36,220 --> 00:31:44,090
calculate this dysfunctions but i can

00:31:41,660 --> 00:31:46,250
also reuse the same function using a

00:31:44,090 --> 00:31:48,230
partial function and change what i

00:31:46,250 --> 00:31:50,960
passed as an argument and I pass a new

00:31:48,230 --> 00:31:52,550
function and I can we use it here and on

00:31:50,960 --> 00:31:54,410
the bottom here just to confuse you i

00:31:52,550 --> 00:31:56,960
used three different ways of calling the

00:31:54,410 --> 00:31:58,550
same lambda so it's just because i

00:31:56,960 --> 00:31:59,960
thought it was very confusing and people

00:31:58,550 --> 00:32:01,520
who don't know Ruby will look at that

00:31:59,960 --> 00:32:03,920
it's a look this is such a confusing

00:32:01,520 --> 00:32:06,050
language I mean like yeah sometimes it

00:32:03,920 --> 00:32:08,660
is that's also by the way the difference

00:32:06,050 --> 00:32:10,430
between Ruby and Python in Python you

00:32:08,660 --> 00:32:11,750
only have one way of doing one thing and

00:32:10,430 --> 00:32:16,010
that's part of the values of the

00:32:11,750 --> 00:32:18,860
language in Ruby I ask mats and it told

00:32:16,010 --> 00:32:20,180
me II it doesn't know how people are

00:32:18,860 --> 00:32:23,510
going to use the language so you want to

00:32:20,180 --> 00:32:24,950
give them fax ability so you can do for

00:32:23,510 --> 00:32:26,510
very simple things you can do in many

00:32:24,950 --> 00:32:29,000
different ways so I just wanted to show

00:32:26,510 --> 00:32:30,410
that the other thing that actually gem

00:32:29,000 --> 00:32:32,120
show I was a bit upset I did show that

00:32:30,410 --> 00:32:34,970
because I thought I was going to show it

00:32:32,120 --> 00:32:37,310
it's TC oh that's telco optimization and

00:32:34,970 --> 00:32:39,710
by the way if you're watching the video

00:32:37,310 --> 00:32:44,570
you should totally go and see gems talk

00:32:39,710 --> 00:32:46,850
next so what's TCO is telco telco

00:32:44,570 --> 00:32:49,010
optimization what that means is if you

00:32:46,850 --> 00:32:51,320
have a method and at the bottom of the

00:32:49,010 --> 00:32:54,080
method you call another method or you

00:32:51,320 --> 00:32:55,850
call yourself in usually what happens is

00:32:54,080 --> 00:32:59,180
that you're going to keep a reference of

00:32:55,850 --> 00:33:00,980
the frame of the stack frame and if you

00:32:59,180 --> 00:33:03,080
have too many recursion or too many

00:33:00,980 --> 00:33:05,900
calls like that you might start overflow

00:33:03,080 --> 00:33:08,330
so you can check right now if you have a

00:33:05,900 --> 00:33:10,430
telco optimization enabled it will be 19

00:33:08,330 --> 00:33:13,850
by coin by just using this code more

00:33:10,430 --> 00:33:16,160
likely it will be off you can go into

00:33:13,850 --> 00:33:18,050
your options and we combine ruby by

00:33:16,160 --> 00:33:21,020
having this flag 21 and then it would

00:33:18,050 --> 00:33:23,180
work now the good news and actually

00:33:21,020 --> 00:33:26,660
should give credits to Aaron to tell me

00:33:23,180 --> 00:33:29,630
that is that in Ruby todaro that will be

00:33:26,660 --> 00:33:31,559
enabled by default so what that means is

00:33:29,630 --> 00:33:33,749
here is a simple fact

00:33:31,559 --> 00:33:35,100
real implementation and turns out I

00:33:33,749 --> 00:33:38,460
didn't do it on purpose but it's exactly

00:33:35,100 --> 00:33:40,830
the same as gems to if you run that

00:33:38,460 --> 00:33:43,230
you're going to stack level too deep

00:33:40,830 --> 00:33:45,960
error that will come out if you turn out

00:33:43,230 --> 00:33:48,809
CC 0 and this is what I did here I to

00:33:45,960 --> 00:33:50,070
not to CEO and I evaluate the code and

00:33:48,809 --> 00:33:52,139
you can see when I call it it will

00:33:50,070 --> 00:33:54,570
actually return the number and it would

00:33:52,139 --> 00:33:56,429
work you don't need to do all the things

00:33:54,570 --> 00:33:58,139
I've done on top it's just because mine

00:33:56,429 --> 00:34:00,389
was not enabled so I did that to show

00:33:58,139 --> 00:34:03,960
you how to do it it into just play with

00:34:00,389 --> 00:34:07,860
it without be compiling movie so another

00:34:03,960 --> 00:34:10,260
aspect of functional programming is

00:34:07,860 --> 00:34:11,909
pattern matching and I know if you ever

00:34:10,260 --> 00:34:13,679
talk to people love Erlang but they

00:34:11,909 --> 00:34:16,560
can't stop talking about that pattern

00:34:13,679 --> 00:34:18,839
matching and I've been taking this color

00:34:16,560 --> 00:34:21,659
course on Coursera that's given by

00:34:18,839 --> 00:34:24,000
Martino turski and i discovered pattern

00:34:21,659 --> 00:34:26,550
matching in sky and it's actually a lot

00:34:24,000 --> 00:34:30,240
of fun and after well I'm sure we can do

00:34:26,550 --> 00:34:31,980
it in Ruby turns out you can and here's

00:34:30,240 --> 00:34:33,300
an example so pattern matching is

00:34:31,980 --> 00:34:36,270
basically you want to find a patch

00:34:33,300 --> 00:34:39,179
pattern in early store in an object and

00:34:36,270 --> 00:34:41,460
based on that you would do something

00:34:39,179 --> 00:34:44,010
specific in Ruby you can already do that

00:34:41,460 --> 00:34:45,300
by using a reg ex for instance if you

00:34:44,010 --> 00:34:47,429
have a string but what if you have been

00:34:45,300 --> 00:34:49,440
released so here's an example where I

00:34:47,429 --> 00:34:52,050
use a case statement and then I use a

00:34:49,440 --> 00:34:55,349
lambda and the lambda would basically

00:34:52,050 --> 00:34:57,869
see if we have a matching pattern based

00:34:55,349 --> 00:35:00,359
on the lambda itself and if we do we'll

00:34:57,869 --> 00:35:02,760
print something special so we also do

00:35:00,359 --> 00:35:05,430
have that the next thing that people

00:35:02,760 --> 00:35:08,400
tell me is functional programming is all

00:35:05,430 --> 00:35:11,849
about immutability because if things are

00:35:08,400 --> 00:35:12,930
not mutable then they are thread safe

00:35:11,849 --> 00:35:15,690
and we don't have to worry about

00:35:12,930 --> 00:35:17,520
anything and it's so much better I think

00:35:15,690 --> 00:35:19,260
they're right in some cases but this is

00:35:17,520 --> 00:35:21,569
definitely not a requirement to be a

00:35:19,260 --> 00:35:25,410
functional programming language it would

00:35:21,569 --> 00:35:28,140
be nice if ruby as some primitives that

00:35:25,410 --> 00:35:29,520
were immutable so we could do things in

00:35:28,140 --> 00:35:30,960
a better way and I'm sure Charles

00:35:29,520 --> 00:35:33,300
probably you probably did that somewhere

00:35:30,960 --> 00:35:34,880
right now you probably have a library

00:35:33,300 --> 00:35:37,640
that does that interview

00:35:34,880 --> 00:35:39,079
we are immutable types it's a cool

00:35:37,640 --> 00:35:41,450
feature I like it but it's not a

00:35:39,079 --> 00:35:45,109
requirement again to be functional ruby

00:35:41,450 --> 00:35:46,910
is purely functional the last point is

00:35:45,109 --> 00:35:49,069
slightly different is something I've

00:35:46,910 --> 00:35:50,990
noticed in the last few years is that

00:35:49,069 --> 00:35:53,960
people have a tendency to associate

00:35:50,990 --> 00:35:55,490
modules with mixes so every time I see

00:35:53,960 --> 00:35:57,829
people writing modules the only thing

00:35:55,490 --> 00:36:00,079
they do if they're module is write a

00:35:57,829 --> 00:36:02,240
bunch of front of methods and then they

00:36:00,079 --> 00:36:04,910
include or extend or their object with

00:36:02,240 --> 00:36:06,500
that and it works great but in some

00:36:04,910 --> 00:36:09,230
cases you actually don't want to do that

00:36:06,500 --> 00:36:11,150
and you might should not do that a case

00:36:09,230 --> 00:36:12,680
I've seen often it's people writing

00:36:11,150 --> 00:36:14,539
modules that have different concerns

00:36:12,680 --> 00:36:17,000
within the same module and then they

00:36:14,539 --> 00:36:19,359
include it in their main object so we

00:36:17,000 --> 00:36:23,539
have like an active record class that

00:36:19,359 --> 00:36:25,849
includes 50,000 or maybe not 15,000

00:36:23,539 --> 00:36:27,109
which is 15 different modules and you

00:36:25,849 --> 00:36:29,150
have all these methods and then they're

00:36:27,109 --> 00:36:31,250
being used in the bottom like in your in

00:36:29,150 --> 00:36:33,500
your model for instance in where else

00:36:31,250 --> 00:36:35,029
and you have no idea where this method

00:36:33,500 --> 00:36:37,160
come from and there's no easy way for

00:36:35,029 --> 00:36:40,279
you to find out where they're coming

00:36:37,160 --> 00:36:42,049
from and if you inspect the object you

00:36:40,279 --> 00:36:43,430
find a lot of different methods that

00:36:42,049 --> 00:36:45,140
have nothing to do the object you're

00:36:43,430 --> 00:36:47,839
looking at are really out of out of the

00:36:45,140 --> 00:36:49,910
concern of the objects and in this case

00:36:47,839 --> 00:36:51,529
what I would suggest is you use module

00:36:49,910 --> 00:36:54,319
four modules which are kind of a

00:36:51,529 --> 00:36:58,190
namespace for functions so here's an

00:36:54,319 --> 00:37:01,069
example and I use module function module

00:36:58,190 --> 00:37:04,099
function basically is a magic trick that

00:37:01,069 --> 00:37:06,440
avoids that makes you not have to put a

00:37:04,099 --> 00:37:08,329
self dot in front of it so when you have

00:37:06,440 --> 00:37:11,329
a module function I can call rubyconf

00:37:08,329 --> 00:37:13,700
dot generate or token and it would work

00:37:11,329 --> 00:37:15,980
directly from the outside of the module

00:37:13,700 --> 00:37:17,599
but what I like with this approach and

00:37:15,980 --> 00:37:20,119
I'm not saying you should always do that

00:37:17,599 --> 00:37:21,559
but in a lot of cases you have these

00:37:20,119 --> 00:37:23,779
functions are really functions they're

00:37:21,559 --> 00:37:26,000
not really methods and you might want to

00:37:23,779 --> 00:37:29,150
have them to live outside and then in

00:37:26,000 --> 00:37:30,799
your code you call rubyconf dot the

00:37:29,150 --> 00:37:33,349
method and you might actually namespace

00:37:30,799 --> 00:37:34,400
them and have them deeply nested but at

00:37:33,349 --> 00:37:36,109
least when you look at your code you

00:37:34,400 --> 00:37:38,539
will know exactly where it comes from

00:37:36,109 --> 00:37:40,609
and you can find it in some magically

00:37:38,539 --> 00:37:42,140
just including all the things and this

00:37:40,609 --> 00:37:44,150
is really functional programming because

00:37:42,140 --> 00:37:45,740
these are just functions they take

00:37:44,150 --> 00:37:47,990
something in return

00:37:45,740 --> 00:37:50,119
in the case where I modify something I

00:37:47,990 --> 00:37:52,310
just use the shebang like in this set

00:37:50,119 --> 00:37:55,340
SSO cookie where I'm modifying the

00:37:52,310 --> 00:37:57,140
cookie on the response object but in a

00:37:55,340 --> 00:37:59,090
lot of cases this is actually useful

00:37:57,140 --> 00:38:02,420
pattern that I don't really see often

00:37:59,090 --> 00:38:07,040
and I just in my case it makes my life

00:38:02,420 --> 00:38:09,830
easier when i trace back my code so at

00:38:07,040 --> 00:38:14,330
the end of the day yeah Ruby is still a

00:38:09,830 --> 00:38:16,040
very object oriented language it's

00:38:14,330 --> 00:38:18,740
really optimized for object-oriented

00:38:16,040 --> 00:38:21,350
programming but it also does functional

00:38:18,740 --> 00:38:23,420
programming and if more people actually

00:38:21,350 --> 00:38:25,550
use it for the functional programming

00:38:23,420 --> 00:38:27,710
aspect of it I think it would improve

00:38:25,550 --> 00:38:30,440
and we can get better performance we can

00:38:27,710 --> 00:38:32,360
get support for better things and I

00:38:30,440 --> 00:38:33,920
would just encourage you to look at it

00:38:32,360 --> 00:38:36,680
and see how you could use it especially

00:38:33,920 --> 00:38:38,570
if you do embedded programming or if you

00:38:36,680 --> 00:38:40,220
do something else on the web you might

00:38:38,570 --> 00:38:44,330
be thinking well functional programming

00:38:40,220 --> 00:38:45,800
might be better for me so use will be

00:38:44,330 --> 00:38:48,530
everywhere that's really the message

00:38:45,800 --> 00:38:50,780
that I want to leave you with and think

00:38:48,530 --> 00:38:53,000
modify that you're not just Ruby

00:38:50,780 --> 00:38:56,119
developers your developer is not just an

00:38:53,000 --> 00:38:57,980
operation product builders but don't

00:38:56,119 --> 00:39:00,200
forget your hackers you need to have fun

00:38:57,980 --> 00:39:01,609
it's not just about the job it's not

00:39:00,200 --> 00:39:02,960
just about the money you're making for

00:39:01,609 --> 00:39:06,109
writing code for somebody else for

00:39:02,960 --> 00:39:08,690
yourself just take you know maybe two

00:39:06,109 --> 00:39:10,250
hours in a friday or on a sunday once a

00:39:08,690 --> 00:39:13,940
month ago with friends and just hack

00:39:10,250 --> 00:39:18,220
have fun enjoy and try to play with Ruby

00:39:13,940 --> 00:39:18,220
everywhere thank

00:39:32,200 --> 00:39:34,260

YouTube URL: https://www.youtube.com/watch?v=eZYRd86OTbk


