Title: My Server for Aiur: How Starcraft Taught Me To Scale by Richard Schneeman
Publication date: 2020-01-28
Playlist: Aloha RubyConf 2012
Description: 
	Help us caption & translate this video!

http://amara.org/v/FGgV/
Captions: 
	00:00:14,620 --> 00:00:20,960
all right can you all hear me in the

00:00:17,540 --> 00:00:23,750
back okay thumbs up that's that's a good

00:00:20,960 --> 00:00:26,840
sign so hello everyone welcome thank you

00:00:23,750 --> 00:00:29,480
very much for coming out my name is

00:00:26,840 --> 00:00:31,189
Richard semen or sneeze on the Internet

00:00:29,480 --> 00:00:32,870
a little bit about me to get started off

00:00:31,189 --> 00:00:35,180
I am actually a mechanical engineer from

00:00:32,870 --> 00:00:38,149
Georgia Tech but I've been riding Ruby

00:00:35,180 --> 00:00:41,030
code for whoo ramblin wreck I've been

00:00:38,149 --> 00:00:43,040
writing Ruby code for about five six

00:00:41,030 --> 00:00:45,350
years I really enjoy it you might

00:00:43,040 --> 00:00:47,510
recognize me from such gems as sextant

00:00:45,350 --> 00:00:49,789
if you ever have run rake routes on your

00:00:47,510 --> 00:00:51,829
console and it like takes freaking

00:00:49,789 --> 00:00:54,649
forever it takes like 20 seconds you can

00:00:51,829 --> 00:00:56,269
put the sexin gem into your gem file and

00:00:54,649 --> 00:00:59,120
if you have your server running you can

00:00:56,269 --> 00:01:01,730
just go to / localhost 3000 / rake /

00:00:59,120 --> 00:01:02,929
routes and it comes up like that you'll

00:01:01,730 --> 00:01:04,940
also be happy to know that this is a

00:01:02,929 --> 00:01:08,000
feature in rails for it's a different

00:01:04,940 --> 00:01:11,390
path though it's like Celeste rails info

00:01:08,000 --> 00:01:13,250
routes but you can make use of that also

00:01:11,390 --> 00:01:17,450
coated the wicked gem it was featured on

00:01:13,250 --> 00:01:19,130
a rails cast with mr. Bates and this is

00:01:17,450 --> 00:01:21,050
for doing step-by-step controllers so

00:01:19,130 --> 00:01:22,490
our step-by-step actions inside of a

00:01:21,050 --> 00:01:24,950
controller and kind of a restful way if

00:01:22,490 --> 00:01:27,320
you're interested in that I also work

00:01:24,950 --> 00:01:28,880
for Heroku maybe you've heard of small

00:01:27,320 --> 00:01:30,740
little small little company does a

00:01:28,880 --> 00:01:34,430
little bit with with Ruby a little bit

00:01:30,740 --> 00:01:35,780
with rails and I am an adjunct professor

00:01:34,430 --> 00:01:38,840
at the University of Texas where I teach

00:01:35,780 --> 00:01:40,520
Ruby and rails so this is actually

00:01:38,840 --> 00:01:42,200
really good news for anybody who's

00:01:40,520 --> 00:01:45,230
learning ruby rails because i have all

00:01:42,200 --> 00:01:47,840
of my content online about 40 hours

00:01:45,230 --> 00:01:51,650
worth of lectures presentations quizzes

00:01:47,840 --> 00:01:54,650
exercises all of that james Kalm / UT

00:01:51,650 --> 00:01:56,540
rails so my last name is Shannon it's a

00:01:54,650 --> 00:01:58,070
german force snowman and she needs is

00:01:56,540 --> 00:01:59,480
just kind of like abbreviated version of

00:01:58,070 --> 00:02:03,350
that so if people kind of asked me where

00:01:59,480 --> 00:02:05,270
she names came from so uh you know why

00:02:03,350 --> 00:02:10,310
why am I here and why am I talking about

00:02:05,270 --> 00:02:13,790
starcraft whoops so I like i freakin

00:02:10,310 --> 00:02:15,560
love starcraft i went to i did a study

00:02:13,790 --> 00:02:17,239
abroad in china where they have all

00:02:15,560 --> 00:02:19,519
these like internet cafes in like the

00:02:17,239 --> 00:02:21,499
days of like starcraft one and just got

00:02:19,519 --> 00:02:23,629
like massively addicted to like

00:02:21,499 --> 00:02:26,880
starcraft one then when starcraft 2 came

00:02:23,629 --> 00:02:28,440
out I was like on the beta constantly of

00:02:26,880 --> 00:02:30,990
one point in time I was like 1v1

00:02:28,440 --> 00:02:32,880
platinum I like this was like before

00:02:30,990 --> 00:02:34,950
diamond league so like that was kind of

00:02:32,880 --> 00:02:37,530
like a big deal and then I realized like

00:02:34,950 --> 00:02:39,720
I needed to see the light in the Sun and

00:02:37,530 --> 00:02:42,720
so I don't play as much anymore but I'm

00:02:39,720 --> 00:02:44,660
incredibly excited for you know the

00:02:42,720 --> 00:02:48,750
heart of the swarm anybody anybody

00:02:44,660 --> 00:02:51,320
pre-orders right here yeah all right got

00:02:48,750 --> 00:02:53,790
some absurd Protoss Terrans in the crowd

00:02:51,320 --> 00:02:55,350
okay you also be happy to know that I'm

00:02:53,790 --> 00:02:58,530
presenting with my gaming mouse this is

00:02:55,350 --> 00:03:04,530
a razer naga it's got the the buttons on

00:02:58,530 --> 00:03:06,900
the side so you know i'm legit alright

00:03:04,530 --> 00:03:09,540
so what does starcraft have to do with

00:03:06,900 --> 00:03:13,200
scaling you might ask well it you know

00:03:09,540 --> 00:03:16,110
it's a game of balance and precision and

00:03:13,200 --> 00:03:17,310
in general there is no one best strategy

00:03:16,110 --> 00:03:19,770
there's no you know everybody's like oh

00:03:17,310 --> 00:03:21,240
man you know protoss is way better than

00:03:19,770 --> 00:03:22,680
terenure Terrans like way better than

00:03:21,240 --> 00:03:26,160
zerg and and at the end of the day it's

00:03:22,680 --> 00:03:28,830
like incredibly balanced and there's all

00:03:26,160 --> 00:03:31,890
of these different ways that you can get

00:03:28,830 --> 00:03:33,930
faster and you can get better as you're

00:03:31,890 --> 00:03:35,550
playing a lot of it's about the APM

00:03:33,930 --> 00:03:36,930
which is it's kind of like servers like

00:03:35,550 --> 00:03:38,490
we're all about requests for a minute

00:03:36,930 --> 00:03:41,100
right you know requests per second so

00:03:38,490 --> 00:03:44,070
like a p.m. but what it really really

00:03:41,100 --> 00:03:46,770
comes down to is if you want to get good

00:03:44,070 --> 00:03:49,020
at a video game or really you know just

00:03:46,770 --> 00:03:50,160
anything in general you want to scale

00:03:49,020 --> 00:03:51,180
your web server it's going to take

00:03:50,160 --> 00:03:53,430
discipline it's going to take time

00:03:51,180 --> 00:03:56,190
you're going to have to learn all of the

00:03:53,430 --> 00:03:59,220
different rules and apply them in the in

00:03:56,190 --> 00:04:03,090
the correct ways so I've recently been

00:03:59,220 --> 00:04:04,650
turned on to a book by actually I don't

00:04:03,090 --> 00:04:06,870
remember the author's name but it was

00:04:04,650 --> 00:04:10,050
recommended to me by Steve glad Nick the

00:04:06,870 --> 00:04:12,510
author of playing to win is a the

00:04:10,050 --> 00:04:14,310
premier Street Fighter player in the

00:04:12,510 --> 00:04:17,040
world remember like Street Fighter turbo

00:04:14,310 --> 00:04:18,770
super all those like he goes around and

00:04:17,040 --> 00:04:21,270
plays competitively with Street Fighter

00:04:18,770 --> 00:04:25,320
but he's written this book and it's all

00:04:21,270 --> 00:04:27,150
about how how to play to win and I

00:04:25,320 --> 00:04:28,860
there's a lot of lessons in here that

00:04:27,150 --> 00:04:31,980
you can apply to everyday life it's not

00:04:28,860 --> 00:04:34,260
necessarily just video games I like to

00:04:31,980 --> 00:04:36,510
take take different lessons from

00:04:34,260 --> 00:04:38,580
different areas of my life such as

00:04:36,510 --> 00:04:40,800
Starcraft and say you know really

00:04:38,580 --> 00:04:42,690
internalize and say why is this a good

00:04:40,800 --> 00:04:44,669
strategy is it a good strategy just

00:04:42,690 --> 00:04:46,229
because of the game mechanics or are

00:04:44,669 --> 00:04:48,840
there other areas in my life I can apply

00:04:46,229 --> 00:04:52,409
to so that's kind of how the talk came

00:04:48,840 --> 00:04:54,000
about alright so whenever we're talking

00:04:52,409 --> 00:04:55,830
about scaling and we're talking about

00:04:54,000 --> 00:04:56,970
speed we're really talking about two

00:04:55,830 --> 00:05:00,479
different things we're talking about

00:04:56,970 --> 00:05:04,229
speed and throughput so speed is

00:05:00,479 --> 00:05:06,090
probably the most common one that you're

00:05:04,229 --> 00:05:07,770
going to run into it's just something

00:05:06,090 --> 00:05:09,900
going faster than another you know we're

00:05:07,770 --> 00:05:11,400
going to upgrade our zerglings to

00:05:09,900 --> 00:05:15,210
speedlings we're going to upgrade our

00:05:11,400 --> 00:05:17,430
Baines and then throughput is like

00:05:15,210 --> 00:05:19,830
literally just how many things can we

00:05:17,430 --> 00:05:21,509
get through at one time you know like

00:05:19,830 --> 00:05:23,400
each of these individually doesn't do a

00:05:21,509 --> 00:05:26,340
lot of damage but like you fill the

00:05:23,400 --> 00:05:29,069
whole screen with them and and you can

00:05:26,340 --> 00:05:31,319
go through so both of these things are

00:05:29,069 --> 00:05:32,699
really really important you can't really

00:05:31,319 --> 00:05:34,409
you can't just focus on one and

00:05:32,699 --> 00:05:36,629
completely ignore the other so those are

00:05:34,409 --> 00:05:39,389
two things we're going to talk about we

00:05:36,629 --> 00:05:42,629
are going to go into two really common

00:05:39,389 --> 00:05:44,969
patterns for for getting faster as well

00:05:42,629 --> 00:05:47,659
as getting more throughput we are going

00:05:44,969 --> 00:05:49,650
to optimize and cash for speed we

00:05:47,659 --> 00:05:51,569
learned a little bit or hurt a little

00:05:49,650 --> 00:05:55,080
bit about different aspects of cashing

00:05:51,569 --> 00:05:57,360
in the keynote so with optimization we

00:05:55,080 --> 00:06:00,659
are going to just search for slow inside

00:05:57,360 --> 00:06:03,330
of our program and make it fast yeah

00:06:00,659 --> 00:06:05,279
sound sound super simple right at the

00:06:03,330 --> 00:06:06,900
end of the day the like the one key

00:06:05,279 --> 00:06:10,250
takeaway is you want to measure

00:06:06,900 --> 00:06:13,050
everything and use those measurements to

00:06:10,250 --> 00:06:16,259
to make really informed decisions about

00:06:13,050 --> 00:06:19,650
what to do how to go faster and how'd it

00:06:16,259 --> 00:06:21,300
how to get more throughput so optimizing

00:06:19,650 --> 00:06:26,460
we're just going to make make it fast

00:06:21,300 --> 00:06:28,919
generally we're going to be do doing a

00:06:26,460 --> 00:06:31,770
little bit of min maxing so we're going

00:06:28,919 --> 00:06:36,419
to minimize slow maximize fast I promise

00:06:31,770 --> 00:06:38,370
it's that easy so the the second pattern

00:06:36,419 --> 00:06:40,500
is going to be cashing we're going to

00:06:38,370 --> 00:06:42,120
search for expensive operations you know

00:06:40,500 --> 00:06:43,800
maybe we can't make it our any faster

00:06:42,120 --> 00:06:45,840
maybe we've already added indices maybe

00:06:43,800 --> 00:06:48,539
our request is going as fast as it

00:06:45,840 --> 00:06:52,139
possibly can we want to not have to

00:06:48,539 --> 00:06:53,339
incur that cost so with caching you're

00:06:52,139 --> 00:06:53,620
essentially taking something really

00:06:53,339 --> 00:06:57,520
expend

00:06:53,620 --> 00:07:00,430
civ and making it cheap finally we are

00:06:57,520 --> 00:07:03,490
going to add capacity to get additional

00:07:00,430 --> 00:07:05,500
throughput through our servers and this

00:07:03,490 --> 00:07:07,930
is correlated with speed if we can serve

00:07:05,500 --> 00:07:09,790
more requests if each request takes less

00:07:07,930 --> 00:07:12,370
individual time then we can actually get

00:07:09,790 --> 00:07:14,410
more throughput but there's a reverse

00:07:12,370 --> 00:07:15,400
correlation where if you don't have

00:07:14,410 --> 00:07:18,760
enough throughput that can actually

00:07:15,400 --> 00:07:20,970
start affecting individual page speed so

00:07:18,760 --> 00:07:23,260
okay that's that's kind of like the the

00:07:20,970 --> 00:07:25,270
introduction to the talk and now here's

00:07:23,260 --> 00:07:27,699
the actual talk first we're going to

00:07:25,270 --> 00:07:30,100
talk about speed and when I when I talk

00:07:27,699 --> 00:07:32,610
about speed there are two very important

00:07:30,100 --> 00:07:35,289
things to consider its client speed

00:07:32,610 --> 00:07:37,270
client-side speed this is you know what

00:07:35,289 --> 00:07:40,120
you actually the client sees and their

00:07:37,270 --> 00:07:43,389
server side so this is the page load

00:07:40,120 --> 00:07:44,560
cycle and for server-side what we're

00:07:43,389 --> 00:07:47,340
going to be talking about is this

00:07:44,560 --> 00:07:49,570
request in this response area this is

00:07:47,340 --> 00:07:53,229
what actually happens on your server

00:07:49,570 --> 00:07:55,750
when a client types in your address it

00:07:53,229 --> 00:07:58,180
hits your Ruby server and then it does

00:07:55,750 --> 00:08:00,970
some processing and comes back so I like

00:07:58,180 --> 00:08:03,580
to correlate this to macro so being

00:08:00,970 --> 00:08:05,380
really good at macro in starcraft so you

00:08:03,580 --> 00:08:08,380
know hey here we've got this huge map

00:08:05,380 --> 00:08:10,660
and like way more minerals than are our

00:08:08,380 --> 00:08:12,490
enemy and our opponent and you know

00:08:10,660 --> 00:08:15,700
that's that's one way that we can that

00:08:12,490 --> 00:08:18,340
we can win so first we're going to talk

00:08:15,700 --> 00:08:21,639
about back end speed and of course

00:08:18,340 --> 00:08:24,490
before we do anything we want to measure

00:08:21,639 --> 00:08:27,130
it so we want to make sure that we're

00:08:24,490 --> 00:08:28,780
using our server resources fully for

00:08:27,130 --> 00:08:30,669
something along the lines of starcraft

00:08:28,780 --> 00:08:32,380
this would kind of correlate to making

00:08:30,669 --> 00:08:34,810
sure you've got you know we want we want

00:08:32,380 --> 00:08:36,459
three workers on each set of minerals

00:08:34,810 --> 00:08:39,279
like you want to keep your money low you

00:08:36,459 --> 00:08:41,770
want to really make use of everything

00:08:39,279 --> 00:08:43,900
that's available to you so there's a

00:08:41,770 --> 00:08:46,660
couple of different really common causes

00:08:43,900 --> 00:08:52,060
of slow inside of apps especially rails

00:08:46,660 --> 00:08:57,150
apps so what sorry gaming mouse I'm a

00:08:52,060 --> 00:08:59,980
pro you can tell so inefficient usage in

00:08:57,150 --> 00:09:01,630
starcraft a lot of people will queue

00:08:59,980 --> 00:09:03,160
units they say oh look you know i can

00:09:01,630 --> 00:09:05,620
just say like i'm going to build five of

00:09:03,160 --> 00:09:07,059
these well as it turns out like you're

00:09:05,620 --> 00:09:09,549
actually wasting

00:09:07,059 --> 00:09:11,109
other resources you have this you know

00:09:09,549 --> 00:09:12,729
you have money you have minerals in each

00:09:11,109 --> 00:09:14,499
time you click that button you were

00:09:12,729 --> 00:09:16,359
dedicating and saying hey here's fifty

00:09:14,499 --> 00:09:18,309
minerals I can no longer spend so I'm

00:09:16,359 --> 00:09:20,349
instead of doing that you can just you

00:09:18,309 --> 00:09:22,539
can just throw one up there as you need

00:09:20,349 --> 00:09:26,169
it's it's harder to do but it's also

00:09:22,539 --> 00:09:28,659
will give you more capacity so don't

00:09:26,169 --> 00:09:30,009
queue web requests that kind of kind of

00:09:28,659 --> 00:09:35,469
makes sense it's nice little nice little

00:09:30,009 --> 00:09:38,859
parallel so a really really common cause

00:09:35,469 --> 00:09:40,479
of slow is the database or I oh you're

00:09:38,859 --> 00:09:43,629
going out to this data store it's a

00:09:40,479 --> 00:09:45,549
really expensive sequel query perhaps or

00:09:43,629 --> 00:09:47,889
maybe its language you know maybe you

00:09:45,549 --> 00:09:50,919
need to tweak your your garbage

00:09:47,889 --> 00:09:52,869
collection but at the end of the day you

00:09:50,919 --> 00:09:56,169
want to ask yourself okay you know

00:09:52,869 --> 00:09:58,149
here's a bunch of possibilities for four

00:09:56,169 --> 00:10:00,759
different problems but how can I find

00:09:58,149 --> 00:10:03,219
how can I actually dig down and and

00:10:00,759 --> 00:10:04,989
figure out why is my application slow or

00:10:03,219 --> 00:10:06,369
it might not even be slow you just

00:10:04,989 --> 00:10:10,179
wanted to be faster so what can we do to

00:10:06,369 --> 00:10:12,039
improve that so you always want to know

00:10:10,179 --> 00:10:15,069
more than your opponent in this case

00:10:12,039 --> 00:10:17,969
your opponent is time that might be a

00:10:15,069 --> 00:10:20,949
little bit of a stretch but so I

00:10:17,969 --> 00:10:22,929
recommend it again measuring in

00:10:20,949 --> 00:10:27,129
production and this is going to be very

00:10:22,929 --> 00:10:30,279
similar to practice like you play so if

00:10:27,129 --> 00:10:32,709
you every single time you you you go out

00:10:30,279 --> 00:10:34,989
in in development or in production you

00:10:32,709 --> 00:10:36,639
are you are measuring and you are saying

00:10:34,989 --> 00:10:37,839
hey these are the things I'm doing and

00:10:36,639 --> 00:10:39,699
this is the result this is the output

00:10:37,839 --> 00:10:42,159
then you can actually take those and

00:10:39,699 --> 00:10:44,259
learn from them if if you're interested

00:10:42,159 --> 00:10:45,729
in getting better at Starcraft like one

00:10:44,259 --> 00:10:48,609
of the most valuable things you can do

00:10:45,729 --> 00:10:50,319
is get a build order tester so yet

00:10:48,609 --> 00:10:51,849
another build order tester or yeah but

00:10:50,319 --> 00:10:53,979
you can actually just search for this

00:10:51,849 --> 00:10:56,259
inside of the arcade and you can get

00:10:53,979 --> 00:10:58,479
this and as you're playing a game

00:10:56,259 --> 00:11:00,519
against a very sophisticated AI you know

00:10:58,479 --> 00:11:02,589
it will it will try to rush you will try

00:11:00,519 --> 00:11:05,049
to all these things it will give you

00:11:02,589 --> 00:11:06,459
metrics and you say hey I want to build

00:11:05,049 --> 00:11:08,289
this specific build order and it will

00:11:06,459 --> 00:11:12,549
tell you like how close you are to doing

00:11:08,289 --> 00:11:16,479
that similarly you can watch your

00:11:12,549 --> 00:11:18,369
replays so after you have you know after

00:11:16,479 --> 00:11:20,529
you played a game you turn around and

00:11:18,369 --> 00:11:23,339
you say okay well my enemy one

00:11:20,529 --> 00:11:26,649
you know so so if you're on a server a

00:11:23,339 --> 00:11:28,720
time one it was really slow why exactly

00:11:26,649 --> 00:11:29,829
did that happen well we can turn around

00:11:28,720 --> 00:11:32,769
and there's ways that we can actually

00:11:29,829 --> 00:11:36,399
reproduce that and figure out why that

00:11:32,769 --> 00:11:38,860
was also and just in game you want to

00:11:36,399 --> 00:11:41,949
just again no more than your opponent so

00:11:38,860 --> 00:11:44,999
you can you can use live live scouting

00:11:41,949 --> 00:11:46,839
so how does that exactly translate to a

00:11:44,999 --> 00:11:50,649
server how does that translate to

00:11:46,839 --> 00:11:52,439
scaling well there's a couple of

00:11:50,649 --> 00:11:56,559
different things that we can do we can

00:11:52,439 --> 00:11:59,709
look for say n plus 1 queries with our

00:11:56,559 --> 00:12:01,180
logs so logs are one of your biggest

00:11:59,709 --> 00:12:04,240
resources that you're given for free

00:12:01,180 --> 00:12:05,769
just everybody everybody has logs you

00:12:04,240 --> 00:12:08,050
might write a piece of code that looks

00:12:05,769 --> 00:12:09,579
something like this you pull a bunch of

00:12:08,050 --> 00:12:11,230
products from a database you're

00:12:09,579 --> 00:12:13,959
iterating over all of your products and

00:12:11,230 --> 00:12:16,569
then you are then pulling out each of

00:12:13,959 --> 00:12:18,399
the users for those products so it you

00:12:16,569 --> 00:12:20,529
know if I hadn't highlighted this then

00:12:18,399 --> 00:12:22,569
you might just write this and say okay

00:12:20,529 --> 00:12:24,040
well you know no big deal but then

00:12:22,569 --> 00:12:26,459
whenever you run it and you're looking

00:12:24,040 --> 00:12:29,170
at your logs you're gonna say like oh

00:12:26,459 --> 00:12:31,120
you know it looks like we're we just

00:12:29,170 --> 00:12:32,829
like queued up like a hundred different

00:12:31,120 --> 00:12:35,439
sequel queries like that's not that

00:12:32,829 --> 00:12:36,850
great and if it's one of those things if

00:12:35,439 --> 00:12:39,300
you're looking at those logs it's like

00:12:36,850 --> 00:12:41,350
so obvious it's so it's like right there

00:12:39,300 --> 00:12:45,009
so this is one of those things we can do

00:12:41,350 --> 00:12:47,050
we can just add in eager loading so yeah

00:12:45,009 --> 00:12:48,910
there's just a method includes where you

00:12:47,050 --> 00:12:51,459
just say hey also go ahead and grab all

00:12:48,910 --> 00:12:53,220
of those users and then if you are

00:12:51,459 --> 00:12:57,339
looking if you're looking at your logs

00:12:53,220 --> 00:12:59,319
it's going to look a lot better so at

00:12:57,339 --> 00:13:00,790
the end of the day though you always

00:12:59,319 --> 00:13:03,189
want to measure you always want to make

00:13:00,790 --> 00:13:05,889
sure that if you if you do change that

00:13:03,189 --> 00:13:08,079
optimization you want to look at your

00:13:05,889 --> 00:13:10,360
page request time and say oh yes we did

00:13:08,079 --> 00:13:12,220
actually decrease the page load time

00:13:10,360 --> 00:13:15,600
because even if your log looks better it

00:13:12,220 --> 00:13:18,519
might perform worse so measure please

00:13:15,600 --> 00:13:22,509
you can also look for queries not using

00:13:18,519 --> 00:13:25,449
an index with the logs use the logs if

00:13:22,509 --> 00:13:27,790
you go into config / production dot RB

00:13:25,449 --> 00:13:30,009
you can set an auto explain threshold

00:13:27,790 --> 00:13:32,290
and any any query that takes longer than

00:13:30,009 --> 00:13:34,390
whatever you set here it's going to

00:13:32,290 --> 00:13:36,910
automatically run explain in

00:13:34,390 --> 00:13:39,130
on it so that the database is going to

00:13:36,910 --> 00:13:40,990
tell you how it's going to find that you

00:13:39,130 --> 00:13:43,660
know if you were looking up a user via

00:13:40,990 --> 00:13:44,680
email and it takes five seconds for some

00:13:43,660 --> 00:13:47,380
reason maybe you know we've got

00:13:44,680 --> 00:13:49,240
thousands of users in our database it's

00:13:47,380 --> 00:13:51,220
going to it might turn out and say like

00:13:49,240 --> 00:13:54,310
hey by the way I am just sequentially

00:13:51,220 --> 00:13:56,380
scanning for this email and that that

00:13:54,310 --> 00:13:57,730
would let me know it's going to show up

00:13:56,380 --> 00:13:59,590
in the logs and that would let me know

00:13:57,730 --> 00:14:02,530
that okay well hey maybe i should add an

00:13:59,590 --> 00:14:05,290
index to this so that's one really good

00:14:02,530 --> 00:14:13,660
way that we can know to add in indices

00:14:05,290 --> 00:14:16,150
to our to our different columns okay so

00:14:13,660 --> 00:14:17,620
using logs is it it's pretty

00:14:16,150 --> 00:14:19,270
straightforward it might be a little bit

00:14:17,620 --> 00:14:20,710
time-consuming might be a little bit

00:14:19,270 --> 00:14:24,370
it's like oh well that's you know that's

00:14:20,710 --> 00:14:26,110
like obviously I look at my logs highly

00:14:24,370 --> 00:14:28,510
recommend using a monitoring software if

00:14:26,110 --> 00:14:29,620
you're if you're not already so this

00:14:28,510 --> 00:14:33,280
would be something along the lines of

00:14:29,620 --> 00:14:34,630
New Relic or our Scout there's you know

00:14:33,280 --> 00:14:35,590
there's a couple of different solutions

00:14:34,630 --> 00:14:37,840
out there that I'll give you a couple

00:14:35,590 --> 00:14:40,660
different layers of granularity and you

00:14:37,840 --> 00:14:42,490
can you can view these in in production

00:14:40,660 --> 00:14:47,050
as well as some of them had the ability

00:14:42,490 --> 00:14:49,720
to see them in development so I kind of

00:14:47,050 --> 00:14:51,040
think of it like logs and and these

00:14:49,720 --> 00:14:53,800
monitoring tools are kind of like

00:14:51,040 --> 00:14:55,390
watching your replays so you're you know

00:14:53,800 --> 00:14:57,610
it's like you see the requests come in

00:14:55,390 --> 00:14:59,290
and then you see all this database stuff

00:14:57,610 --> 00:15:01,360
happen and then and then you can you

00:14:59,290 --> 00:15:03,190
know you can visually visualize and say

00:15:01,360 --> 00:15:04,990
like oh you know that's exactly where

00:15:03,190 --> 00:15:08,020
the slow part of my request is happening

00:15:04,990 --> 00:15:10,660
and so if you were if you were being

00:15:08,020 --> 00:15:12,790
diligent and actually turning around and

00:15:10,660 --> 00:15:15,730
saying well you know why why did I lose

00:15:12,790 --> 00:15:17,620
why did I lose to time after after a

00:15:15,730 --> 00:15:19,840
while you'll actually turn around and be

00:15:17,620 --> 00:15:21,100
able to pick out and say okay well

00:15:19,840 --> 00:15:22,840
here's here's a place where I could

00:15:21,100 --> 00:15:24,730
optimize here's a place where I kak ash

00:15:22,840 --> 00:15:29,770
here's a place where I could add an

00:15:24,730 --> 00:15:32,050
extra index okay so that's just for for

00:15:29,770 --> 00:15:34,420
tuning your back-end tuning your data

00:15:32,050 --> 00:15:36,430
store another thing that we can do or

00:15:34,420 --> 00:15:38,140
that I talked about is caching expensive

00:15:36,430 --> 00:15:40,180
query sometimes maybe you've already got

00:15:38,140 --> 00:15:41,860
your your index on there maybe you're

00:15:40,180 --> 00:15:44,710
already doing eager loading like you

00:15:41,860 --> 00:15:46,390
know you've already you're the request

00:15:44,710 --> 00:15:47,920
is coming back as fast as it can but

00:15:46,390 --> 00:15:49,839
let's say you know we're

00:15:47,920 --> 00:15:51,160
making that request and it is it's just

00:15:49,839 --> 00:15:52,630
expensive there's nothing we can do

00:15:51,160 --> 00:15:54,760
about it it's going to take 20 seconds

00:15:52,630 --> 00:15:57,639
every time we call a user dot some

00:15:54,760 --> 00:16:00,910
expensive query if you're not already

00:15:57,639 --> 00:16:03,070
use memcache it's a it's a pretty

00:16:00,910 --> 00:16:06,160
fantastic data store it's also really

00:16:03,070 --> 00:16:10,690
really easy to use with with rails i

00:16:06,160 --> 00:16:13,000
recommend the the dolly gem and you when

00:16:10,690 --> 00:16:15,370
you pair memcache with rails you get

00:16:13,000 --> 00:16:17,310
something called rails cash and this is

00:16:15,370 --> 00:16:19,750
nice because it's a consistent interface

00:16:17,310 --> 00:16:22,540
so it doesn't matter what type of cash

00:16:19,750 --> 00:16:25,029
store you use you will have the same

00:16:22,540 --> 00:16:28,060
front end of just calling rails cash so

00:16:25,029 --> 00:16:31,240
that same code previously we could just

00:16:28,060 --> 00:16:33,490
wrap it in a rails cache block and here

00:16:31,240 --> 00:16:35,860
we're calling fetch which means go out

00:16:33,490 --> 00:16:37,930
tell me if it exists if it doesn't exist

00:16:35,860 --> 00:16:40,300
then we're going to run the query and

00:16:37,930 --> 00:16:43,029
insert it into our cash so it's like a

00:16:40,300 --> 00:16:46,089
key value store so you're just the

00:16:43,029 --> 00:16:48,550
string of cash underscore key is is our

00:16:46,089 --> 00:16:50,740
key it's just a key and a store notice

00:16:48,550 --> 00:16:52,000
though it will actually run slower the

00:16:50,740 --> 00:16:53,199
first time so some people they hear

00:16:52,000 --> 00:16:54,730
about memcache they hear about rails

00:16:53,199 --> 00:16:59,440
cash and they just like put everything

00:16:54,730 --> 00:17:01,269
in memcache and but if you're never

00:16:59,440 --> 00:17:02,920
going to actually retrieve that value

00:17:01,269 --> 00:17:06,400
again you're actually adding additional

00:17:02,920 --> 00:17:08,260
time on to that that query because it

00:17:06,400 --> 00:17:11,860
has to run and then it has to insert

00:17:08,260 --> 00:17:14,829
that data into memcache but if you do

00:17:11,860 --> 00:17:17,380
need it again the next time we never

00:17:14,829 --> 00:17:20,770
actually hit that query we just call

00:17:17,380 --> 00:17:23,020
rails cash fetch it says oh here's my

00:17:20,770 --> 00:17:24,699
cache key guess what I'd you know it's

00:17:23,020 --> 00:17:26,020
going to jump out there it's going to

00:17:24,699 --> 00:17:28,440
get that data it's going to come back

00:17:26,020 --> 00:17:31,120
and it's going to come back crazy fast

00:17:28,440 --> 00:17:32,679
so this is definitely something to look

00:17:31,120 --> 00:17:34,260
into if you haven't already in your

00:17:32,679 --> 00:17:36,429
application or even if you're using

00:17:34,260 --> 00:17:38,080
memcache a lot of people will declare

00:17:36,429 --> 00:17:40,000
our constant further for their memcache

00:17:38,080 --> 00:17:42,190
servers i recommend using the rails cash

00:17:40,000 --> 00:17:44,830
syntax it's just it's a nice in case you

00:17:42,190 --> 00:17:48,669
ever want to want to swap around to a

00:17:44,830 --> 00:17:53,799
different cash back end alright so that

00:17:48,669 --> 00:17:56,940
is caching and that's kind of back-end

00:17:53,799 --> 00:17:59,320
caching we can do view caching as well

00:17:56,940 --> 00:18:01,580
rails has the ability to do a couple of

00:17:59,320 --> 00:18:04,130
different types we can do page caching

00:18:01,580 --> 00:18:06,230
we can do action caching but whenever

00:18:04,130 --> 00:18:08,660
I'm cashing something I like to cash the

00:18:06,230 --> 00:18:14,120
the smallest discrete unit that I

00:18:08,660 --> 00:18:16,580
possibly can so inside of our views that

00:18:14,120 --> 00:18:17,960
represents fragment caching so we are

00:18:16,580 --> 00:18:19,880
actually saying all right we're just

00:18:17,960 --> 00:18:20,900
going to cash just the inside of the

00:18:19,880 --> 00:18:23,740
whole page we're going to catch the

00:18:20,900 --> 00:18:26,360
sidebar or you know we're going to cash

00:18:23,740 --> 00:18:28,220
maybe there's a suggest an area where it

00:18:26,360 --> 00:18:29,360
says suggested friends and that's really

00:18:28,220 --> 00:18:32,540
expensive because it has to hit our

00:18:29,360 --> 00:18:34,450
database a lot in in that scenario we

00:18:32,540 --> 00:18:38,240
might be able to use something like a

00:18:34,450 --> 00:18:39,920
view fragment caching so the the one

00:18:38,240 --> 00:18:41,600
problem that people ran into this is

00:18:39,920 --> 00:18:45,170
they were like oh yeah we love this

00:18:41,600 --> 00:18:47,150
fragment caching but we want you know

00:18:45,170 --> 00:18:50,180
effectively to have the whole page cache

00:18:47,150 --> 00:18:52,520
so people would end up putting fragment

00:18:50,180 --> 00:18:53,930
caches within fragment caches and then

00:18:52,520 --> 00:18:56,180
you had to write this really complex

00:18:53,930 --> 00:18:58,550
logic to say well you know my inner

00:18:56,180 --> 00:19:02,060
fragment cash expired I want to expire

00:18:58,550 --> 00:19:04,790
the outer fragment cash so it was

00:19:02,060 --> 00:19:07,970
something that came up a fair amount and

00:19:04,790 --> 00:19:09,980
if you've used basecamp next they do

00:19:07,970 --> 00:19:12,680
that quite a bit and to cope with that

00:19:09,980 --> 00:19:16,520
problem they came up with a cache digest

00:19:12,680 --> 00:19:19,100
gem which will actually take a digest of

00:19:16,520 --> 00:19:21,680
the inner cash and if if that changes it

00:19:19,100 --> 00:19:24,140
will propagate outwards and break all of

00:19:21,680 --> 00:19:27,200
those nested caches this is also another

00:19:24,140 --> 00:19:28,580
feature that's inside of rails for you

00:19:27,200 --> 00:19:32,540
know chances are pretty good if it's in

00:19:28,580 --> 00:19:36,170
base camp it'll be in rails for just as

00:19:32,540 --> 00:19:37,970
a rule of thumb ah but you can use it

00:19:36,170 --> 00:19:44,270
now if you're using rails 3 with the

00:19:37,970 --> 00:19:47,270
cash digest gem okay so if if if

00:19:44,270 --> 00:19:49,580
measuring and looking at our logs is

00:19:47,270 --> 00:19:52,160
like rule number one rule number two

00:19:49,580 --> 00:19:53,570
like like huge capital letters rule

00:19:52,160 --> 00:19:56,600
number two like avoid premature

00:19:53,570 --> 00:19:59,120
optimization you know this is like

00:19:56,600 --> 00:20:00,770
especially popular in starcraft like

00:19:59,120 --> 00:20:02,870
people come in and they're like oh you

00:20:00,770 --> 00:20:05,090
know i'm going to just like I'm gonna

00:20:02,870 --> 00:20:06,350
build like ten bases in like in three

00:20:05,090 --> 00:20:08,000
hours I'm gonna have so many more

00:20:06,350 --> 00:20:08,780
minerals like I'm gonna just crush the

00:20:08,000 --> 00:20:10,310
enemy and like

00:20:08,780 --> 00:20:12,560
they're going to just be like crying and

00:20:10,310 --> 00:20:13,940
then they send in like 30 and like

00:20:12,560 --> 00:20:15,560
destroy all your workers in your what

00:20:13,940 --> 00:20:16,940
happened I don't know you know people

00:20:15,560 --> 00:20:18,350
are like hey I'm gonna need it

00:20:16,940 --> 00:20:21,880
eventually like why not just build it

00:20:18,350 --> 00:20:26,120
now so yeah you're not going to need it

00:20:21,880 --> 00:20:28,130
or if you follow Bob Martin he is this i

00:20:26,120 --> 00:20:32,300
don't even know how to say that but

00:20:28,130 --> 00:20:34,550
you're not going to need it so yeah in

00:20:32,300 --> 00:20:36,230
general just build it build what you

00:20:34,550 --> 00:20:38,480
want to build and then come back and

00:20:36,230 --> 00:20:39,740
measure once you once you have measured

00:20:38,480 --> 00:20:41,210
then you can make incremental

00:20:39,740 --> 00:20:44,630
improvements yeah sure there are some

00:20:41,210 --> 00:20:46,790
major architectural things and generally

00:20:44,630 --> 00:20:48,290
if you're smarter like you're probably

00:20:46,790 --> 00:20:49,880
probably gonna be faster the first time

00:20:48,290 --> 00:20:52,460
you build it but if you spend way too

00:20:49,880 --> 00:20:53,690
much time optimizing you might optimized

00:20:52,460 --> 00:20:54,980
for the wrong problem you don't even

00:20:53,690 --> 00:20:57,530
know what the problem is you don't know

00:20:54,980 --> 00:21:00,620
how your users are going to use it so if

00:20:57,530 --> 00:21:03,620
if you've ever heard of fun day mondays

00:21:00,620 --> 00:21:06,350
anybody who watches day nine so this is

00:21:03,620 --> 00:21:07,940
guy who does starcraft screencasting he

00:21:06,350 --> 00:21:09,230
advocates every Monday he throws out a

00:21:07,940 --> 00:21:12,140
different challenge out there he's like

00:21:09,230 --> 00:21:13,730
okay you know you have to declare one

00:21:12,140 --> 00:21:16,160
unit at the beginning of your game and

00:21:13,730 --> 00:21:17,660
you can only use that unit and it's just

00:21:16,160 --> 00:21:19,730
like you know people like try to survive

00:21:17,660 --> 00:21:22,730
or he's like oh you know you you can't

00:21:19,730 --> 00:21:24,950
you can't take any gas until you have

00:21:22,730 --> 00:21:26,780
like three bases or something so people

00:21:24,950 --> 00:21:29,480
have to you know do these crazy crazy

00:21:26,780 --> 00:21:30,830
like like workarounds and it's kind of a

00:21:29,480 --> 00:21:33,290
way to get you to think outside of the

00:21:30,830 --> 00:21:35,720
box but I like that it just happens

00:21:33,290 --> 00:21:38,870
every single Monday so why not have like

00:21:35,720 --> 00:21:40,730
a fast day Friday where everybody you

00:21:38,870 --> 00:21:42,440
know if if speed is really something

00:21:40,730 --> 00:21:44,780
that's actually valuable to your company

00:21:42,440 --> 00:21:47,060
then you can turn around and say hey

00:21:44,780 --> 00:21:49,120
guys every Friday like let's just let's

00:21:47,060 --> 00:21:52,550
see who can increase our speed the most

00:21:49,120 --> 00:21:54,050
where you know Friday like you don't

00:21:52,550 --> 00:21:54,860
want to make big pushes like you don't

00:21:54,050 --> 00:21:56,450
want to break your web server

00:21:54,860 --> 00:21:58,010
accidentally and like have to stay

00:21:56,450 --> 00:22:00,830
really late so like it you know it just

00:21:58,010 --> 00:22:02,390
it just works out it works out well so

00:22:00,830 --> 00:22:04,580
that's that's something to consider

00:22:02,390 --> 00:22:07,460
maybe if you're like okay hey how do we

00:22:04,580 --> 00:22:10,310
actually apply some of these changes all

00:22:07,460 --> 00:22:13,370
right so that's that speed next I'd like

00:22:10,310 --> 00:22:17,060
to talk a little bit about throughput I

00:22:13,370 --> 00:22:19,120
just love like so many banelings all

00:22:17,060 --> 00:22:21,760
right

00:22:19,120 --> 00:22:24,280
yeah just Google so so so many banelings

00:22:21,760 --> 00:22:26,980
there's a yeah great announcer some

00:22:24,280 --> 00:22:28,540
remixes okay so if you have a really

00:22:26,980 --> 00:22:31,000
popular service I might consider

00:22:28,540 --> 00:22:33,340
Wikipedia a really popular service you

00:22:31,000 --> 00:22:36,309
are going to have compound rights or

00:22:33,340 --> 00:22:37,750
potentially compounding traffic luckily

00:22:36,309 --> 00:22:39,220
Wikipedia is one of the few places that

00:22:37,750 --> 00:22:40,809
will actually give their traffic numbers

00:22:39,220 --> 00:22:43,480
which is which is really cool I got

00:22:40,809 --> 00:22:45,610
these in 2011 so they probably release

00:22:43,480 --> 00:22:47,590
some even more updated numbers so these

00:22:45,610 --> 00:22:50,590
are the compound rights and these are

00:22:47,590 --> 00:22:52,300
the compound edit so as your service

00:22:50,590 --> 00:22:53,770
gets more and more popular you will only

00:22:52,300 --> 00:22:55,270
get more and more rights you will only

00:22:53,770 --> 00:22:58,510
get more and more reads so if you have a

00:22:55,270 --> 00:23:01,179
problem with a slow web service if you

00:22:58,510 --> 00:23:04,179
have a problem with with throughput it's

00:23:01,179 --> 00:23:07,330
only going to get worse so this is this

00:23:04,179 --> 00:23:08,740
is all something to consider so if we're

00:23:07,330 --> 00:23:11,890
going to be dealing with throughput then

00:23:08,740 --> 00:23:15,190
we are going to be adding adding

00:23:11,890 --> 00:23:17,860
additional capacity one area that we can

00:23:15,190 --> 00:23:21,130
really help with this is to split up our

00:23:17,860 --> 00:23:23,230
web our workers in our data store so let

00:23:21,130 --> 00:23:25,450
me let me just kind of define some of

00:23:23,230 --> 00:23:27,540
those if you're unfamiliar the web is

00:23:25,450 --> 00:23:31,900
going to be what actually runs what

00:23:27,540 --> 00:23:34,059
mouse is going to be what handles your

00:23:31,900 --> 00:23:35,530
web requests so as somebody comes to

00:23:34,059 --> 00:23:37,780
your website it's going to say i want

00:23:35,530 --> 00:23:39,610
the index page and your servers going to

00:23:37,780 --> 00:23:41,770
process and actually turn around and and

00:23:39,610 --> 00:23:43,990
deliver that you can run your data

00:23:41,770 --> 00:23:46,840
stores separately so we run postgres in

00:23:43,990 --> 00:23:47,950
on a different server memcache on a

00:23:46,840 --> 00:23:51,130
different server whatever you're using

00:23:47,950 --> 00:23:52,270
react you know anything I highly

00:23:51,130 --> 00:23:55,240
recommend post for us if you're not

00:23:52,270 --> 00:23:58,270
haven't already checked it out and this

00:23:55,240 --> 00:23:59,500
allows us if because we don't know how

00:23:58,270 --> 00:24:01,600
people are going to use our application

00:23:59,500 --> 00:24:03,520
we don't know exactly how it's going to

00:24:01,600 --> 00:24:06,580
perform in the real world if we end up

00:24:03,520 --> 00:24:08,500
being really data-intensive a lot of

00:24:06,580 --> 00:24:10,120
people end up using our data store we

00:24:08,500 --> 00:24:13,390
might want to scale that independently

00:24:10,120 --> 00:24:14,860
of our web so you might want to say okay

00:24:13,390 --> 00:24:16,900
we want to add some extra ram we want to

00:24:14,860 --> 00:24:18,640
add some additional capacity and if

00:24:16,900 --> 00:24:20,500
they're all on the same box it's a lot

00:24:18,640 --> 00:24:23,080
harder to actually measure and figure

00:24:20,500 --> 00:24:26,400
out where that's coming from and apply

00:24:23,080 --> 00:24:28,990
the appropriate measures to fix that

00:24:26,400 --> 00:24:31,240
another thing is workers so workers are

00:24:28,990 --> 00:24:32,670
going to handle non request processing

00:24:31,240 --> 00:24:36,850
so these are going to be

00:24:32,670 --> 00:24:39,670
anything that that isn't in the that

00:24:36,850 --> 00:24:42,670
request response cycle so the most

00:24:39,670 --> 00:24:45,730
common thing would be using a tool such

00:24:42,670 --> 00:24:48,059
as like rescue where you will say okay

00:24:45,730 --> 00:24:50,590
you know I sign up for the service and

00:24:48,059 --> 00:24:52,300
I'm going to get an email eventually

00:24:50,590 --> 00:24:54,220
that says hey thank you know thanks for

00:24:52,300 --> 00:24:55,960
signing up for example com like we've

00:24:54,220 --> 00:24:58,090
really appreciate it to have you but I

00:24:55,960 --> 00:24:59,800
might be using a third-party mailer and

00:24:58,090 --> 00:25:01,300
maybe they're just really busy all this

00:24:59,800 --> 00:25:02,830
up sudden and it's going to take half a

00:25:01,300 --> 00:25:05,800
second for like me to call out to their

00:25:02,830 --> 00:25:08,280
their smtp servers and like for all of

00:25:05,800 --> 00:25:10,809
that to process and like I is the user

00:25:08,280 --> 00:25:12,910
probably am NOT I don't care whether or

00:25:10,809 --> 00:25:14,440
not I get the email before the request

00:25:12,910 --> 00:25:15,880
finishes I actually would probably

00:25:14,440 --> 00:25:17,890
prefer not to get the email before the

00:25:15,880 --> 00:25:20,140
request processes so we can take that

00:25:17,890 --> 00:25:23,260
task we can throw it into the background

00:25:20,140 --> 00:25:25,570
and just say hey worker whenever you get

00:25:23,260 --> 00:25:27,220
a chance send out this email and it

00:25:25,570 --> 00:25:28,270
allows the requests to keep going so

00:25:27,220 --> 00:25:29,620
we're not going to we're not going to be

00:25:28,270 --> 00:25:32,950
blocking our request this is also part

00:25:29,620 --> 00:25:33,640
of rails for the the active q is

00:25:32,950 --> 00:25:35,110
something that they're kind of

00:25:33,640 --> 00:25:37,600
encouraging a little bit more and

00:25:35,110 --> 00:25:39,190
they're giving a consistent interface to

00:25:37,600 --> 00:25:42,870
use the queue kind of like we had rails

00:25:39,190 --> 00:25:45,880
cash as an interface to use the the cash

00:25:42,870 --> 00:25:48,160
so okay we split out our web our workers

00:25:45,880 --> 00:25:50,410
in your data store you know that's

00:25:48,160 --> 00:25:53,559
that's pretty good start but what

00:25:50,410 --> 00:25:56,860
happens when you run out of capacity so

00:25:53,559 --> 00:26:00,309
the first answer the traditional answer

00:25:56,860 --> 00:26:01,420
would be to scale up this is originally

00:26:00,309 --> 00:26:03,940
saying all right we've got something

00:26:01,420 --> 00:26:05,500
kind of weak something you know it can

00:26:03,940 --> 00:26:07,450
it can it can do all it can handle the

00:26:05,500 --> 00:26:11,470
job but we want something bigger we want

00:26:07,450 --> 00:26:14,110
something better the other option is to

00:26:11,470 --> 00:26:16,300
scale out so you know maybe maybe we've

00:26:14,110 --> 00:26:18,700
got one we can get for we can get six

00:26:16,300 --> 00:26:21,280
like we're going to parallel eyes in

00:26:18,700 --> 00:26:23,350
general scaling up is considered it's

00:26:21,280 --> 00:26:24,340
pretty easy you know to say like all

00:26:23,350 --> 00:26:25,540
right we're going to just add a couple

00:26:24,340 --> 00:26:26,860
we're going to go to a bigger server

00:26:25,540 --> 00:26:28,510
we're going to get some more cores we're

00:26:26,860 --> 00:26:31,179
going to get some more RAM all that jazz

00:26:28,510 --> 00:26:33,280
and similarly in starcraft like you can

00:26:31,179 --> 00:26:36,610
upgrade your units but at some point in

00:26:33,280 --> 00:26:39,100
time you are going to hit a wall you can

00:26:36,610 --> 00:26:43,090
only be at level three on your ground

00:26:39,100 --> 00:26:46,010
attack you can only like go and build

00:26:43,090 --> 00:26:47,270
Thor's like there's nothing above like a

00:26:46,010 --> 00:26:52,280
or and you know maybe that's not even

00:26:47,270 --> 00:26:55,850
appropriate in your case so scaling out

00:26:52,280 --> 00:26:58,910
is generally harder is considered harder

00:26:55,850 --> 00:27:00,110
but it is unlimited unlimited and that's

00:26:58,910 --> 00:27:01,310
kind of where the starcraft analogy

00:27:00,110 --> 00:27:03,950
breaks down because you are actually

00:27:01,310 --> 00:27:06,770
limited on your the amount of guys you

00:27:03,950 --> 00:27:08,810
can have at 200 but just pretend you can

00:27:06,770 --> 00:27:11,180
just go on and on in server land we can

00:27:08,810 --> 00:27:14,140
have unlimited servers as many servers

00:27:11,180 --> 00:27:16,940
as there are in the world theoretically

00:27:14,140 --> 00:27:19,940
so one thing to actually help out with

00:27:16,940 --> 00:27:21,290
this is an ephemeral web machine and

00:27:19,940 --> 00:27:22,970
this is a really really fancy way of

00:27:21,290 --> 00:27:26,030
saying that we're not going to store

00:27:22,970 --> 00:27:30,470
State on our server if a web request

00:27:26,030 --> 00:27:31,880
comes in and you know you can say all

00:27:30,470 --> 00:27:33,950
right if i'm going to upload upload a

00:27:31,880 --> 00:27:35,810
photo and i've got four machines if i

00:27:33,950 --> 00:27:38,300
upload a photo on the machine number one

00:27:35,810 --> 00:27:40,700
on the first request and then i come and

00:27:38,300 --> 00:27:42,380
hit machine number two on the second

00:27:40,700 --> 00:27:43,910
request well my photo is not going to be

00:27:42,380 --> 00:27:48,110
there so that that's just generally bad

00:27:43,910 --> 00:27:49,730
so by maintaining a ephemeral nature of

00:27:48,110 --> 00:27:52,790
your machine you can actually help to

00:27:49,730 --> 00:27:54,260
scale out a little bit easier on Heroku

00:27:52,790 --> 00:27:56,780
this would look something like this you

00:27:54,260 --> 00:27:58,520
can say Heroku PS scale and then you

00:27:56,780 --> 00:28:00,650
just specify hey how big do I want it to

00:27:58,520 --> 00:28:04,160
be like I want you know six times the

00:28:00,650 --> 00:28:09,230
capacity you know like just like more

00:28:04,160 --> 00:28:11,840
instances more power it and like now

00:28:09,230 --> 00:28:14,480
you're going to be able to in our case

00:28:11,840 --> 00:28:16,400
handle more requests or in starcraft

00:28:14,480 --> 00:28:18,500
like produce more units that's also like

00:28:16,400 --> 00:28:20,360
a huge rookie mistake is like people get

00:28:18,500 --> 00:28:22,460
like late game they survive but then

00:28:20,360 --> 00:28:25,370
they just don't have enough enough

00:28:22,460 --> 00:28:26,990
back-end power to produce like they have

00:28:25,370 --> 00:28:31,160
all of this money and like no way to

00:28:26,990 --> 00:28:32,330
spend it so yeah in Amazon Web Services

00:28:31,160 --> 00:28:34,400
it would look something kind of like

00:28:32,330 --> 00:28:36,170
this you provision another machine you

00:28:34,400 --> 00:28:39,320
use a chef or something they install all

00:28:36,170 --> 00:28:41,210
of you all of your dependencies you

00:28:39,320 --> 00:28:42,800
connect it to a load balancer like you

00:28:41,210 --> 00:28:45,050
push your coat up and then you get it to

00:28:42,800 --> 00:28:47,090
run and then like you know you can just

00:28:45,050 --> 00:28:49,250
do that repeatedly so that's kind of the

00:28:47,090 --> 00:28:51,230
equivalent of that like one Heroku

00:28:49,250 --> 00:28:56,030
command you can maybe tell which I

00:28:51,230 --> 00:28:57,620
prefer perhaps so yeah we're going to be

00:28:56,030 --> 00:28:59,010
and in in this scenario we're only

00:28:57,620 --> 00:29:03,960
copying code to miss

00:28:59,010 --> 00:29:05,700
we're not copying state we want to never

00:29:03,960 --> 00:29:07,830
ever ever store state on the server and

00:29:05,700 --> 00:29:09,390
somewhat like when I want to tell this

00:29:07,830 --> 00:29:11,130
to anybody in the Ruby community like

00:29:09,390 --> 00:29:12,510
well obviously you know like I'm gonna

00:29:11,130 --> 00:29:14,460
I'm going to store in the database I'm

00:29:12,510 --> 00:29:17,730
going to store it in like the session

00:29:14,460 --> 00:29:20,370
I'm going to store it in s3 if you if

00:29:17,730 --> 00:29:21,840
you know some programmers in like maybe

00:29:20,370 --> 00:29:23,460
some statically typed languages they

00:29:21,840 --> 00:29:25,860
haven't learned this lesson yet they're

00:29:23,460 --> 00:29:29,310
all running on like huge like you know

00:29:25,860 --> 00:29:32,550
huge huge like liquid cool like you know

00:29:29,310 --> 00:29:35,280
massive boxes and and storing the

00:29:32,550 --> 00:29:37,260
session state to disk on that box so if

00:29:35,280 --> 00:29:38,790
you come to another machine it's like it

00:29:37,260 --> 00:29:41,820
looks like you're not even logged in so

00:29:38,790 --> 00:29:44,400
this is a lesson that a lot of us or you

00:29:41,820 --> 00:29:46,020
might not even you might not have even

00:29:44,400 --> 00:29:49,290
thought of this before but this is why a

00:29:46,020 --> 00:29:51,420
lot of our tools prefer like s3 or or

00:29:49,290 --> 00:29:55,800
memcache this type in this type of a

00:29:51,420 --> 00:29:58,590
thing okay so one we've got that out of

00:29:55,800 --> 00:30:00,960
the way how do we how do we store a

00:29:58,590 --> 00:30:03,900
scale our data storage there's two

00:30:00,960 --> 00:30:05,730
really common patterns the first one is

00:30:03,900 --> 00:30:07,800
going to be a master-slave architecture

00:30:05,730 --> 00:30:12,390
where we are going to do all of our

00:30:07,800 --> 00:30:14,310
rights on 211 master server and then we

00:30:12,390 --> 00:30:16,200
can just copy those rights to a bunch of

00:30:14,310 --> 00:30:18,270
other servers and if we have a read

00:30:16,200 --> 00:30:19,860
intensive application we can scale out

00:30:18,270 --> 00:30:24,360
those reeds and this is another reason

00:30:19,860 --> 00:30:26,640
why I say please measure or we can shard

00:30:24,360 --> 00:30:28,740
our data so we can turn around and say

00:30:26,640 --> 00:30:30,120
alright it makes sense to actually split

00:30:28,740 --> 00:30:32,280
up different data on two different

00:30:30,120 --> 00:30:34,320
machines one one thing I've really seen

00:30:32,280 --> 00:30:36,600
that's that's popular or common or our

00:30:34,320 --> 00:30:39,690
software as a service applications where

00:30:36,600 --> 00:30:40,920
each different different client might

00:30:39,690 --> 00:30:42,210
give a different database or might get a

00:30:40,920 --> 00:30:45,500
different table in a different database

00:30:42,210 --> 00:30:48,540
so that's that's really common and

00:30:45,500 --> 00:30:51,120
whereas master slave architecture won't

00:30:48,540 --> 00:30:52,440
help you out with right sharding will or

00:30:51,120 --> 00:30:54,660
you could you could even pair the two of

00:30:52,440 --> 00:30:56,880
them together Heroku has two different

00:30:54,660 --> 00:30:59,880
features called Forks and follow

00:30:56,880 --> 00:31:01,800
followers so you can just say hey like

00:30:59,880 --> 00:31:03,390
follow my main database and then now you

00:31:01,800 --> 00:31:05,640
have a secondary database you could

00:31:03,390 --> 00:31:07,500
either use for like a high available

00:31:05,640 --> 00:31:09,510
high availability type situation where

00:31:07,500 --> 00:31:11,280
your original database goes down or you

00:31:09,510 --> 00:31:12,120
can use it for fast change overs or you

00:31:11,280 --> 00:31:13,710
can use it for it is

00:31:12,120 --> 00:31:16,740
read capacity so that's something to

00:31:13,710 --> 00:31:21,030
check out the big caveat of this is you

00:31:16,740 --> 00:31:23,310
can't join shorted data so you know if

00:31:21,030 --> 00:31:25,590
you have users on two different servers

00:31:23,310 --> 00:31:27,630
in USA and in Europe you can't join

00:31:25,590 --> 00:31:30,660
those two tables you would have to come

00:31:27,630 --> 00:31:32,700
up with a kind of a some sort of a

00:31:30,660 --> 00:31:35,010
rapper library or rapper service that

00:31:32,700 --> 00:31:36,390
would do that for you which then it's

00:31:35,010 --> 00:31:40,620
kind of expensive and it takes a long

00:31:36,390 --> 00:31:43,890
time but so like Facebook shards my

00:31:40,620 --> 00:31:46,680
sequel they have like huge huge huge

00:31:43,890 --> 00:31:49,680
data servers you know these clusters of

00:31:46,680 --> 00:31:51,600
just running my sequel Instagram a

00:31:49,680 --> 00:31:53,460
little bit more recently it shards

00:31:51,600 --> 00:31:57,210
postgresql it's it's fun because they're

00:31:53,460 --> 00:31:59,190
now the same company and I think post

00:31:57,210 --> 00:32:01,530
crest is better than my sequel just

00:31:59,190 --> 00:32:02,970
personally if you're interested in data

00:32:01,530 --> 00:32:04,020
stores you're interested in some of

00:32:02,970 --> 00:32:06,330
these different ways we can kind of

00:32:04,020 --> 00:32:08,040
scale out or maybe you you don't want to

00:32:06,330 --> 00:32:09,240
use a relational data store or you want

00:32:08,040 --> 00:32:11,970
to know what your different options are

00:32:09,240 --> 00:32:14,610
then seven data bases in seven weeks is

00:32:11,970 --> 00:32:16,200
a really good book in it covered like

00:32:14,610 --> 00:32:18,210
the debt first database it covers this

00:32:16,200 --> 00:32:20,010
post grass and a couple of the different

00:32:18,210 --> 00:32:22,440
features and talks about how postgres is

00:32:20,010 --> 00:32:24,720
actually getting some of the no sequel

00:32:22,440 --> 00:32:27,990
the really popular no sequel features so

00:32:24,720 --> 00:32:30,780
like each store is now in rails 4 and it

00:32:27,990 --> 00:32:34,770
allows you to make a key value column

00:32:30,780 --> 00:32:37,830
type as additional two arrays are native

00:32:34,770 --> 00:32:40,140
to postgres and also you can use those

00:32:37,830 --> 00:32:44,160
natively in rails for so those are two

00:32:40,140 --> 00:32:45,270
supported features in rails 4 and it's

00:32:44,160 --> 00:32:48,710
been a long time since I said anything

00:32:45,270 --> 00:32:51,810
about starcraft so watch day nine yeah

00:32:48,710 --> 00:32:53,790
all right okay so that's that's the back

00:32:51,810 --> 00:32:56,970
end side of things let's talk a little

00:32:53,790 --> 00:32:59,550
bit about the client side so we've got

00:32:56,970 --> 00:33:01,560
our requests we got our response but you

00:32:59,550 --> 00:33:03,090
know this other side does it doesn't

00:33:01,560 --> 00:33:06,270
really matter like once we kick it over

00:33:03,090 --> 00:33:08,910
to the client well as it turns out it

00:33:06,270 --> 00:33:11,460
really does I like to think of this or a

00:33:08,910 --> 00:33:13,410
client side or client side speed in

00:33:11,460 --> 00:33:15,180
terms of like micro so once you have

00:33:13,410 --> 00:33:17,730
this massive army and you send them in

00:33:15,180 --> 00:33:18,990
um it does matter what you what you do

00:33:17,730 --> 00:33:21,110
with it and there are some different

00:33:18,990 --> 00:33:25,370
ways that we can kind of optimize these

00:33:21,110 --> 00:33:27,200
so in general loading assets is slow so

00:33:25,370 --> 00:33:28,790
we've got our JavaScript we've got our

00:33:27,200 --> 00:33:31,630
CSS we've got all of these different

00:33:28,790 --> 00:33:34,309
different things we can do some

00:33:31,630 --> 00:33:36,620
optimizations to make it faster so we

00:33:34,309 --> 00:33:42,680
can decrease the size we can gzip them

00:33:36,620 --> 00:33:44,900
we can put them on a CD n which I'm

00:33:42,680 --> 00:33:47,630
going to get to in just kind of a split

00:33:44,900 --> 00:33:49,550
second so the just a casual reminder

00:33:47,630 --> 00:33:52,070
we're talking about speed so speed is

00:33:49,550 --> 00:33:53,570
equal to distance divided by time seems

00:33:52,070 --> 00:33:56,210
seems pretty reasonable I think that's

00:33:53,570 --> 00:33:57,950
we can all agree that's true so distance

00:33:56,210 --> 00:33:59,210
does matter if you have a really slow

00:33:57,950 --> 00:34:00,770
unit and you're trying to send it

00:33:59,210 --> 00:34:02,660
further it's going to take a longer

00:34:00,770 --> 00:34:07,429
amount of time therefore decreasing the

00:34:02,660 --> 00:34:10,520
speed of the whole journey so a shorter

00:34:07,429 --> 00:34:13,399
distance actually correlates to a faster

00:34:10,520 --> 00:34:16,129
request in inside a starcraft like you

00:34:13,399 --> 00:34:18,110
might hear of terms like Matt control or

00:34:16,129 --> 00:34:19,669
maybe you'll hear of things like unit

00:34:18,110 --> 00:34:20,899
position and be like okay well you know

00:34:19,669 --> 00:34:23,240
what does that actually mean how does

00:34:20,899 --> 00:34:25,460
that how does that correlate to so if

00:34:23,240 --> 00:34:27,649
you have a really expensive unit that is

00:34:25,460 --> 00:34:29,629
really really super slow if there's some

00:34:27,649 --> 00:34:31,490
way like man I really really want to

00:34:29,629 --> 00:34:33,050
shoot these SCV's but like I'm all the

00:34:31,490 --> 00:34:35,870
way across the map if only I could be

00:34:33,050 --> 00:34:38,480
right there so you know location does

00:34:35,870 --> 00:34:40,850
matter and we want to be closer to where

00:34:38,480 --> 00:34:43,159
you need to be this is going to

00:34:40,850 --> 00:34:45,320
correlate to your your application by

00:34:43,159 --> 00:34:47,600
your servers not going to be next door

00:34:45,320 --> 00:34:50,540
to the client or to the person who wants

00:34:47,600 --> 00:34:52,010
once those requests and they can those

00:34:50,540 --> 00:34:54,080
different clients are going to be all

00:34:52,010 --> 00:34:56,030
you know potentially hopefully all over

00:34:54,080 --> 00:34:58,420
the world so the further that request

00:34:56,030 --> 00:35:01,760
has to go the longer it's going to take

00:34:58,420 --> 00:35:05,420
so you know like what if we could be

00:35:01,760 --> 00:35:07,220
next door what if we could have a server

00:35:05,420 --> 00:35:08,810
right next to each one of our clients so

00:35:07,220 --> 00:35:14,360
that's not really one hundred percent

00:35:08,810 --> 00:35:16,870
feasible but we can use a CDN so CDN

00:35:14,360 --> 00:35:20,180
stands for a content distribution

00:35:16,870 --> 00:35:23,210
network and it's going to look a little

00:35:20,180 --> 00:35:25,730
something like this where you do have

00:35:23,210 --> 00:35:28,100
your your primary server but then you

00:35:25,730 --> 00:35:30,860
also have these other servers kind of

00:35:28,100 --> 00:35:33,590
space around the world where you once

00:35:30,860 --> 00:35:36,080
the the main HTML is delivered from your

00:35:33,590 --> 00:35:38,240
app all of the assets can be loaded from

00:35:36,080 --> 00:35:38,720
the CDN so those requests can be can go

00:35:38,240 --> 00:35:40,790
to

00:35:38,720 --> 00:35:42,200
the CDN rather than having to go all the

00:35:40,790 --> 00:35:44,300
way to your server so we're actually

00:35:42,200 --> 00:35:47,210
decreasing the distance making it faster

00:35:44,300 --> 00:35:51,500
faster is better so there's going to

00:35:47,210 --> 00:35:53,300
serve like images CSS JavaScript I i

00:35:51,500 --> 00:35:55,460
think of it kind of like as a warp prism

00:35:53,300 --> 00:35:57,470
for your servers like it's like you know

00:35:55,460 --> 00:36:02,960
the the resources you want right where

00:35:57,470 --> 00:36:05,000
you need them there's two really popular

00:36:02,960 --> 00:36:08,300
services we got Akamai we've got cloud

00:36:05,000 --> 00:36:11,420
front in order to use a CDN this is all

00:36:08,300 --> 00:36:15,680
you need you've set config action action

00:36:11,420 --> 00:36:17,660
controller dot assets host to a URL here

00:36:15,680 --> 00:36:19,849
we're using config variables or

00:36:17,660 --> 00:36:22,220
environment variables if you are

00:36:19,849 --> 00:36:23,660
unfamiliar with this this technique

00:36:22,220 --> 00:36:25,700
grabbed me afterwards I'll be happy to

00:36:23,660 --> 00:36:27,680
talk you through why we would want to do

00:36:25,700 --> 00:36:29,060
that it's a way we can specify our

00:36:27,680 --> 00:36:30,440
environment variable and change it

00:36:29,060 --> 00:36:34,580
without having to actually change our

00:36:30,440 --> 00:36:36,560
code ok I mean literally that's it like

00:36:34,580 --> 00:36:39,109
one line of code and now you were using

00:36:36,560 --> 00:36:41,869
a CDN so why aren't you doing it or you

00:36:39,109 --> 00:36:45,170
might be in like awesome good good for

00:36:41,869 --> 00:36:48,460
you the next thing I that we can do to

00:36:45,170 --> 00:36:50,359
help this process of help helping our

00:36:48,460 --> 00:36:52,700
requests go a little bit faster is

00:36:50,359 --> 00:36:54,230
browser caching so in general you're

00:36:52,700 --> 00:36:56,720
going to hit a web page it's going to

00:36:54,230 --> 00:36:59,150
come back it's going to load on our

00:36:56,720 --> 00:37:01,609
first request our browser is going to

00:36:59,150 --> 00:37:04,970
like hopefully store that like six

00:37:01,609 --> 00:37:07,280
megabyte image so that on any kind of

00:37:04,970 --> 00:37:09,880
any kind of future requests we don't

00:37:07,280 --> 00:37:13,970
have to come back and say like yes

00:37:09,880 --> 00:37:15,109
please give me that six megabyte image

00:37:13,970 --> 00:37:16,940
again it would be the equivalent of

00:37:15,109 --> 00:37:18,859
flying all the way to Hawaii with all of

00:37:16,940 --> 00:37:20,089
your bags and then you go to sleep and

00:37:18,859 --> 00:37:21,170
the next morning you wake up and you're

00:37:20,089 --> 00:37:22,790
back where you came from and you're like

00:37:21,170 --> 00:37:24,140
wait but I already flew to Hawaii once

00:37:22,790 --> 00:37:28,369
like you know why do I have to do that

00:37:24,140 --> 00:37:30,500
again so in order to help make this a

00:37:28,369 --> 00:37:32,510
little bit easier for our browsers we

00:37:30,500 --> 00:37:34,970
can set expires headers again you can do

00:37:32,510 --> 00:37:38,390
this in your config / production dot RB

00:37:34,970 --> 00:37:40,760
and you say hey these are public images

00:37:38,390 --> 00:37:42,589
these are public files and we want to

00:37:40,760 --> 00:37:45,109
set it to a really really far future

00:37:42,589 --> 00:37:46,940
date so it's like hey please hold on to

00:37:45,109 --> 00:37:48,770
this image as long as you possibly can

00:37:46,940 --> 00:37:50,030
eventually like you know sure it's going

00:37:48,770 --> 00:37:52,339
to be garbage collected if it's not

00:37:50,030 --> 00:37:53,960
being used but this is just a

00:37:52,339 --> 00:37:56,869
and you say please hold on to this for

00:37:53,960 --> 00:37:59,599
really long time but what if our file

00:37:56,869 --> 00:38:01,969
does change you know change does happen

00:37:59,599 --> 00:38:04,670
we want to make the background blue

00:38:01,969 --> 00:38:05,869
instead of red so we can turn on

00:38:04,670 --> 00:38:07,819
something called rails asset

00:38:05,869 --> 00:38:11,749
fingerprints which although it's called

00:38:07,819 --> 00:38:13,910
fingerprints we use assets digest so you

00:38:11,749 --> 00:38:16,940
just set that to true so config

00:38:13,910 --> 00:38:19,219
production on our be set config assets

00:38:16,940 --> 00:38:20,900
digest and true and what this is going

00:38:19,219 --> 00:38:24,279
to do it's going to take a hash of your

00:38:20,900 --> 00:38:28,729
file this is going to be an md5 sum of

00:38:24,279 --> 00:38:30,920
those assets and it is going to then

00:38:28,729 --> 00:38:33,019
produce something if you run it on say

00:38:30,920 --> 00:38:35,599
like headers CSS it's going to produce a

00:38:33,019 --> 00:38:37,999
string something kind of like this this

00:38:35,599 --> 00:38:39,589
is a fingerprint of your file so

00:38:37,999 --> 00:38:43,729
whenever the file changes the

00:38:39,589 --> 00:38:45,829
fingerprint does alright and what we can

00:38:43,729 --> 00:38:49,369
do is we can take the file name and the

00:38:45,829 --> 00:38:51,650
fingerprint that that custom string and

00:38:49,369 --> 00:38:54,380
join them together to make a custom file

00:38:51,650 --> 00:38:56,059
name so this is headers dash you know

00:38:54,380 --> 00:38:59,390
whatever i'm not going to read all that

00:38:56,059 --> 00:39:01,640
CSS and if we change anything about our

00:38:59,390 --> 00:39:03,799
headers that CSS file our fingerprint

00:39:01,640 --> 00:39:05,269
will change so as far as the browser is

00:39:03,799 --> 00:39:07,609
concerned it's a completely different

00:39:05,269 --> 00:39:10,940
file even if it already cached this file

00:39:07,609 --> 00:39:12,559
it has never ever seen headers something

00:39:10,940 --> 00:39:17,479
something something with a different

00:39:12,559 --> 00:39:19,910
finger print so those are three like you

00:39:17,479 --> 00:39:22,130
know right there you've enabled your CDN

00:39:19,910 --> 00:39:26,349
you set your expires headers and you

00:39:22,130 --> 00:39:28,880
turn on fingerprinting oops there we go

00:39:26,349 --> 00:39:30,859
previously rails used to do something

00:39:28,880 --> 00:39:33,410
kind of similar to this where it had a a

00:39:30,859 --> 00:39:38,569
query string or a query parameter that

00:39:33,410 --> 00:39:40,519
would set be a way to kind of bust the

00:39:38,569 --> 00:39:42,109
cash and that wasn't a really

00:39:40,519 --> 00:39:44,869
standards-compliant way of doing that

00:39:42,109 --> 00:39:46,489
apparently some ISPs would consider that

00:39:44,869 --> 00:39:50,329
a completely separate requests and maybe

00:39:46,489 --> 00:39:54,769
like not not catch that at at that sort

00:39:50,329 --> 00:39:57,619
of level so as you are walking away

00:39:54,769 --> 00:39:59,210
today like if anything please just if

00:39:57,619 --> 00:40:00,710
you're like man I feel like I saw talk

00:39:59,210 --> 00:40:06,109
today but I can't remember what it was

00:40:00,710 --> 00:40:08,059
about measure he like measure everything

00:40:06,109 --> 00:40:10,039
in this includes the front end we can

00:40:08,059 --> 00:40:12,170
use there's tools likewise low which

00:40:10,039 --> 00:40:14,089
even if you're not a client-side genius

00:40:12,170 --> 00:40:15,950
it'll come in here and it'll tell you

00:40:14,089 --> 00:40:17,690
like hey it looks like you're doing

00:40:15,950 --> 00:40:20,869
these bad things don't do them anymore

00:40:17,690 --> 00:40:23,150
guess what using using a CDN is one of

00:40:20,869 --> 00:40:24,410
them but that's super easy for us it'll

00:40:23,150 --> 00:40:26,180
take like five minutes to sign up for

00:40:24,410 --> 00:40:28,279
cloud front one minute to add that

00:40:26,180 --> 00:40:30,890
configuration into our server and then

00:40:28,279 --> 00:40:32,630
like you're good to go you can you can

00:40:30,890 --> 00:40:34,069
be like hey boss guess what I sped up

00:40:32,630 --> 00:40:36,890
our website by like you know a couple

00:40:34,069 --> 00:40:38,299
seconds like be like wow you know how

00:40:36,890 --> 00:40:39,589
did you do that and we're not going to

00:40:38,299 --> 00:40:43,489
tell them that it was only like one line

00:40:39,589 --> 00:40:46,519
of code so compress assets which we get

00:40:43,489 --> 00:40:49,519
for free with the asset pipeline serve

00:40:46,519 --> 00:40:52,970
using a CDN don't block page parsing

00:40:49,519 --> 00:40:54,859
this is if you're interested in this if

00:40:52,970 --> 00:40:58,099
you're interested in more client-side

00:40:54,859 --> 00:41:00,529
speed which it really does matter Ilya

00:40:58,099 --> 00:41:01,819
Gregorovitch has a lot of good content

00:41:00,529 --> 00:41:05,210
and a couple of good slides I would

00:41:01,819 --> 00:41:08,299
recommend looking at his blog and so

00:41:05,210 --> 00:41:11,119
yeah please measure everything scale out

00:41:08,299 --> 00:41:14,359
with more machines speed up your data

00:41:11,119 --> 00:41:17,690
store or add caching and of course when

00:41:14,359 --> 00:41:20,869
all else fails mmm ball Marines

00:41:17,690 --> 00:41:25,970
Marauders medevacs nope anybody want to

00:41:20,869 --> 00:41:32,200
guess what the first M is yeah what was

00:41:25,970 --> 00:41:35,450
that I heard measure maybe all right ok

00:41:32,200 --> 00:41:39,170
measure memcache and more instances so

00:41:35,450 --> 00:41:40,999
that's that's my server mmm ball again I

00:41:39,170 --> 00:41:42,980
work for Heroku we do happen to be

00:41:40,999 --> 00:41:44,989
hiring currently at the moment if you

00:41:42,980 --> 00:41:47,480
know somebody who might be currently

00:41:44,989 --> 00:41:50,569
interested in working then you know

00:41:47,480 --> 00:41:53,569
maybe come talk to me but if anybody has

00:41:50,569 --> 00:41:57,019
any questions then shoot I'll just

00:41:53,569 --> 00:42:01,569
preemptively say my favorite race is

00:41:57,019 --> 00:42:05,029
Protoss my favorite unit is dark templar

00:42:01,569 --> 00:42:07,299
yeah that pretty much cuts that it thank

00:42:05,029 --> 00:42:07,299
you very much

00:42:18,950 --> 00:42:21,010

YouTube URL: https://www.youtube.com/watch?v=4wvtvc0C2SY


