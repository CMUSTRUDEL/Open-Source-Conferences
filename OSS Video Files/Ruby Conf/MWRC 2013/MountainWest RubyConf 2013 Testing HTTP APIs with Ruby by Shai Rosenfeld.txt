Title: MountainWest RubyConf 2013 Testing HTTP APIs with Ruby by Shai Rosenfeld
Publication date: 2020-01-28
Playlist: MWRC 2013
Description: 
	Good integration tests are hard. There are many approaches for fully testing server and client libraries for those HTTP APIs - all with various tradeoffs and problems that come up. Some are obvious, some are a little more tricky.
I'll run through some approaches and problems I've come across developing server/client HTTP APIs while developing in a highly distributed systems setup at Engine Yard.

Help us caption & translate this video!

http://amara.org/v/FGbW/
Captions: 
	00:00:00,050 --> 00:00:02,110
you

00:00:10,600 --> 00:00:13,170
mmm

00:00:19,570 --> 00:00:26,210
so I work at Engine Yard my my name is

00:00:24,290 --> 00:00:27,950
shy i'm not really shy although that i

00:00:26,210 --> 00:00:31,010
always get that when i introduced myself

00:00:27,950 --> 00:00:34,160
so my twitter shy guitar you can reach

00:00:31,010 --> 00:00:36,200
me there my general internet handle so

00:00:34,160 --> 00:00:40,040
start off by reading this tweet that i

00:00:36,200 --> 00:00:43,250
liked a lot not having an api in 2012 is

00:00:40,040 --> 00:00:45,050
like not having a website 1998 and I

00:00:43,250 --> 00:00:46,970
feel like the state of the industry that

00:00:45,050 --> 00:00:48,830
we are in right now where you know all

00:00:46,970 --> 00:00:50,390
these marketing buzz words like software

00:00:48,830 --> 00:00:52,280
as a service and platforms of service

00:00:50,390 --> 00:00:54,320
and infrastructure as a service and my

00:00:52,280 --> 00:00:57,199
roommate actually was interacting with

00:00:54,320 --> 00:01:00,620
razors as a service all this stuff

00:00:57,199 --> 00:01:02,960
basically our code words for having an

00:01:00,620 --> 00:01:05,480
API right like as a service is have a

00:01:02,960 --> 00:01:07,580
product that has an API and even more

00:01:05,480 --> 00:01:09,260
than that you know there's all this talk

00:01:07,580 --> 00:01:11,150
about having this big model if the gap

00:01:09,260 --> 00:01:13,370
and splitting it up into a distributed

00:01:11,150 --> 00:01:14,479
service-oriented architecture and this

00:01:13,370 --> 00:01:16,370
stuff all these different systems

00:01:14,479 --> 00:01:20,060
interact with ap is right so this stuff

00:01:16,370 --> 00:01:25,399
is super important and I want to focus

00:01:20,060 --> 00:01:26,420
on how we test these api's so

00:01:25,399 --> 00:01:29,570
specifically I'm going to be talking

00:01:26,420 --> 00:01:32,750
about how we test server client AP is

00:01:29,570 --> 00:01:34,640
and I'm going to talk about the scenario

00:01:32,750 --> 00:01:36,289
where we have control both over the

00:01:34,640 --> 00:01:37,549
server and the client there's going to

00:01:36,289 --> 00:01:38,960
be other scenarios that you'll run into

00:01:37,549 --> 00:01:41,509
but this is what I'm going to focus on

00:01:38,960 --> 00:01:42,320
and I'm going to focus on the nature of

00:01:41,509 --> 00:01:44,810
having the server and a client

00:01:42,320 --> 00:01:49,219
developing them both together with JSON

00:01:44,810 --> 00:01:52,100
as the HTTP endpoint so this is my

00:01:49,219 --> 00:01:53,840
guitar and I play music I have a band i

00:01:52,100 --> 00:01:56,240
play with in the weekends I love playing

00:01:53,840 --> 00:01:57,530
music that really is my guitar and the

00:01:56,240 --> 00:02:00,740
reason I'm telling you this is to set

00:01:57,530 --> 00:02:02,420
the context for the story of developing

00:02:00,740 --> 00:02:04,820
this API it's going to be underneath a

00:02:02,420 --> 00:02:07,070
music labeling company so when I say we

00:02:04,820 --> 00:02:08,869
I'm going to be referring to this this

00:02:07,070 --> 00:02:12,230
company right so I want to introduce the

00:02:08,869 --> 00:02:15,380
characters we're going to have a server

00:02:12,230 --> 00:02:16,640
developer we're going to have a client

00:02:15,380 --> 00:02:18,260
library developer that's going to

00:02:16,640 --> 00:02:21,260
develop a client that's going to consume

00:02:18,260 --> 00:02:22,340
that API and then there's going to be an

00:02:21,260 --> 00:02:24,590
app developer that's going to be

00:02:22,340 --> 00:02:25,850
consuming that library to interact with

00:02:24,590 --> 00:02:27,200
the API it's not gonna be part of the

00:02:25,850 --> 00:02:31,680
company but he's going to use that

00:02:27,200 --> 00:02:33,510
product right and so

00:02:31,680 --> 00:02:34,709
we're basically the server is basically

00:02:33,510 --> 00:02:38,099
going to have two endpoints we're going

00:02:34,709 --> 00:02:40,019
to have a post and the get HTTP endpoint

00:02:38,099 --> 00:02:41,879
it's going to be a simple rest interface

00:02:40,019 --> 00:02:44,459
you're going to have / songs and you're

00:02:41,879 --> 00:02:45,510
going to post the words and the title of

00:02:44,459 --> 00:02:47,069
the song and that's going to be our

00:02:45,510 --> 00:02:50,159
domain model we're just going to have a

00:02:47,069 --> 00:02:52,349
title and name but the name basically in

00:02:50,159 --> 00:02:53,819
words and we're going to have a get end

00:02:52,349 --> 00:02:55,650
point where we're going to retrieve the

00:02:53,819 --> 00:02:57,659
words for that song if we pass that

00:02:55,650 --> 00:02:59,040
title and in this context i'm going to

00:02:57,659 --> 00:03:02,250
assume that the titles are going to be

00:02:59,040 --> 00:03:03,810
unique so you can't post another song if

00:03:02,250 --> 00:03:08,189
you've already posted that with that

00:03:03,810 --> 00:03:10,169
title and the client will look something

00:03:08,189 --> 00:03:11,700
like this essentially which is we're

00:03:10,169 --> 00:03:14,069
going to have we're going to instantiate

00:03:11,700 --> 00:03:15,659
a new object client object we're going

00:03:14,069 --> 00:03:17,069
to have a post song and get song method

00:03:15,659 --> 00:03:18,980
and those things are going to interact

00:03:17,069 --> 00:03:21,269
with that rest api that we created and

00:03:18,980 --> 00:03:24,919
you know you pass the title and you get

00:03:21,269 --> 00:03:28,349
the words back right pretty simple and

00:03:24,919 --> 00:03:30,810
we want to make it easy for consumer

00:03:28,349 --> 00:03:32,730
applications to use that library and in

00:03:30,810 --> 00:03:35,370
the test just have it really work really

00:03:32,730 --> 00:03:36,959
quickly and nice and and be reliable so

00:03:35,370 --> 00:03:41,159
just a quick question for the audience

00:03:36,959 --> 00:03:43,109
who here is used fog by any chance okay

00:03:41,159 --> 00:03:45,479
great are you guys that's that's awesome

00:03:43,109 --> 00:03:49,799
yeah have you guys used that fogs

00:03:45,479 --> 00:03:51,989
mocking interface how many people okay

00:03:49,799 --> 00:03:53,699
not not quite as many as hex the use of

00:03:51,989 --> 00:03:55,859
all but essentially fog has a really

00:03:53,699 --> 00:03:58,769
cool back end where you can just do fog

00:03:55,859 --> 00:04:00,180
knock and you're basically interacting

00:03:58,769 --> 00:04:01,739
with amazon's API but everything's

00:04:00,180 --> 00:04:04,769
happening super quick is everything is

00:04:01,739 --> 00:04:06,810
having in memory and it just works and

00:04:04,769 --> 00:04:09,509
it's super awesome there's other gems to

00:04:06,810 --> 00:04:12,509
that work like this like that yeah

00:04:09,509 --> 00:04:14,370
there's a bunch but yeah so we want to

00:04:12,509 --> 00:04:16,620
create this client so that it has this

00:04:14,370 --> 00:04:19,229
kind of mocking interface so that you

00:04:16,620 --> 00:04:21,720
can actually interact with it in the

00:04:19,229 --> 00:04:26,130
third party app and it just works right

00:04:21,720 --> 00:04:27,539
and it's fast so just to reiterate the

00:04:26,130 --> 00:04:29,430
plans we want to create an API that

00:04:27,539 --> 00:04:30,599
musicians can use to store songs we want

00:04:29,430 --> 00:04:32,880
to build a client library that can be

00:04:30,599 --> 00:04:33,840
used in consumer applications and we

00:04:32,880 --> 00:04:37,190
want to make it easy for those

00:04:33,840 --> 00:04:39,300
applications to test with that library

00:04:37,190 --> 00:04:42,599
okay so how do we how do we actually

00:04:39,300 --> 00:04:45,190
test these things these beasts right so

00:04:42,599 --> 00:04:46,570
count the ways I've been I

00:04:45,190 --> 00:04:49,000
basically interact with API is on a

00:04:46,570 --> 00:04:51,040
daily basis I'm either writing an API

00:04:49,000 --> 00:04:53,140
are talking to an API I'm doing this all

00:04:51,040 --> 00:04:54,670
the time and I'm going to run through

00:04:53,140 --> 00:04:58,210
some approaches that I've that I've

00:04:54,670 --> 00:05:00,040
personally encountered isolated approach

00:04:58,210 --> 00:05:01,870
sandbox approach fakes rivers and

00:05:00,040 --> 00:05:02,950
nappers and I don't know if any of these

00:05:01,870 --> 00:05:06,100
names you'd recognize because their

00:05:02,950 --> 00:05:08,190
names that I made up but yeah that's

00:05:06,100 --> 00:05:11,560
that's what I'm going to run through so

00:05:08,190 --> 00:05:13,780
so the first first kind of thing that

00:05:11,560 --> 00:05:15,370
you do when you have when you're in this

00:05:13,780 --> 00:05:17,350
situation where you want to develop a

00:05:15,370 --> 00:05:18,460
server and a client is you're going to

00:05:17,350 --> 00:05:19,480
test the server and you're going to test

00:05:18,460 --> 00:05:20,800
the client and you don't really think

00:05:19,480 --> 00:05:23,230
about okay how am I going to create like

00:05:20,800 --> 00:05:24,730
this good integration path to test

00:05:23,230 --> 00:05:25,840
everything I'm just going to test the

00:05:24,730 --> 00:05:28,660
server and i'm just going to test the

00:05:25,840 --> 00:05:30,220
client and you'll end up you basically

00:05:28,660 --> 00:05:32,140
have something like this where the river

00:05:30,220 --> 00:05:34,150
for really you know simplified

00:05:32,140 --> 00:05:36,700
demonstration purpose you would have

00:05:34,150 --> 00:05:39,400
this post right you'd have like a create

00:05:36,700 --> 00:05:41,560
method where you would basically take in

00:05:39,400 --> 00:05:43,000
the parameters of the title of stored in

00:05:41,560 --> 00:05:45,580
the database and then you know return

00:05:43,000 --> 00:05:47,770
some jason saying that you you know you

00:05:45,580 --> 00:05:49,150
got it got it okay and we could make

00:05:47,770 --> 00:05:50,440
this a little more restful by you know

00:05:49,150 --> 00:05:51,760
having the right status code and stuff

00:05:50,440 --> 00:05:54,880
like that but this is trying to really

00:05:51,760 --> 00:05:56,919
simplified here and then we would have

00:05:54,880 --> 00:05:58,690
that post oh I'm sorry that would be the

00:05:56,919 --> 00:05:59,830
post and then we would have this get end

00:05:58,690 --> 00:06:02,530
point where we would do the same thing

00:05:59,830 --> 00:06:04,600
right when we would basically get the

00:06:02,530 --> 00:06:06,940
name parameter get the song from the

00:06:04,600 --> 00:06:09,490
database render back Jason render the

00:06:06,940 --> 00:06:12,460
words back and that would be how our

00:06:09,490 --> 00:06:14,080
server looks like and the way that our

00:06:12,460 --> 00:06:16,660
test would look like would be

00:06:14,080 --> 00:06:18,730
essentially using this is using test

00:06:16,660 --> 00:06:22,000
unit when we would essentially use

00:06:18,730 --> 00:06:24,850
something like rack test talk to that

00:06:22,000 --> 00:06:27,040
you know endpoint make sure that the

00:06:24,850 --> 00:06:29,160
behavior of the server is what we expect

00:06:27,040 --> 00:06:32,230
it we get the words back if we post

00:06:29,160 --> 00:06:36,180
those words initially with you know with

00:06:32,230 --> 00:06:38,470
it with that same rest interface and

00:06:36,180 --> 00:06:39,940
then the client would look similar to

00:06:38,470 --> 00:06:42,640
that similar to the server we would have

00:06:39,940 --> 00:06:45,550
that get song which talks to that get

00:06:42,640 --> 00:06:48,960
rest endpoint and then we would parse

00:06:45,550 --> 00:06:51,400
that Jason we got back get the words and

00:06:48,960 --> 00:06:53,979
that that's what the client would look

00:06:51,400 --> 00:06:55,690
like right and the test we would do the

00:06:53,979 --> 00:06:57,970
same thing we would assert that we post

00:06:55,690 --> 00:06:58,460
the song with a specific nit title and

00:06:57,970 --> 00:07:00,139
we're

00:06:58,460 --> 00:07:02,690
words and then we assert that we get

00:07:00,139 --> 00:07:05,210
that back right and we got the same

00:07:02,690 --> 00:07:07,699
words back all nice and dandy so far

00:07:05,210 --> 00:07:09,259
except for the setup for the client

00:07:07,699 --> 00:07:10,610
we're going to actually need to mock out

00:07:09,259 --> 00:07:12,169
the server right because we're not we're

00:07:10,610 --> 00:07:14,630
not actually talking the server we're

00:07:12,169 --> 00:07:16,099
mocking it out when we could use web

00:07:14,630 --> 00:07:17,479
mock which is different talks have

00:07:16,099 --> 00:07:19,490
referred to that I think it's pretty

00:07:17,479 --> 00:07:21,500
famous fake web is pretty famous but all

00:07:19,490 --> 00:07:24,319
these things essentially are doing the

00:07:21,500 --> 00:07:26,000
one thing that is we'll see not so great

00:07:24,319 --> 00:07:29,569
because we're mocking out the server we

00:07:26,000 --> 00:07:32,030
don't actually know that if the server

00:07:29,569 --> 00:07:32,990
changes the client tests are going to

00:07:32,030 --> 00:07:35,840
pass because we've knocked out the

00:07:32,990 --> 00:07:38,180
server but essentially it's green and

00:07:35,840 --> 00:07:39,620
it's not working right and these are non

00:07:38,180 --> 00:07:41,509
representative tests it's it's not a

00:07:39,620 --> 00:07:43,639
good scenario right like what could end

00:07:41,509 --> 00:07:45,080
up happening is they the server guy

00:07:43,639 --> 00:07:47,479
completes his work the client guy

00:07:45,080 --> 00:07:49,220
completes his work they ship it off and

00:07:47,479 --> 00:07:51,169
this musician tries to interact with the

00:07:49,220 --> 00:07:52,460
client the server guy changes something

00:07:51,169 --> 00:07:54,349
in the back end and then the client

00:07:52,460 --> 00:07:56,419
breaks but the client developer doesn't

00:07:54,349 --> 00:07:58,580
know that anything happened because his

00:07:56,419 --> 00:08:00,830
test will pass he gets a call back from

00:07:58,580 --> 00:08:01,940
the musician guy and he's like starting

00:08:00,830 --> 00:08:03,169
yelling at him like oh you know my

00:08:01,940 --> 00:08:06,460
business is down what's going on blah

00:08:03,169 --> 00:08:11,840
blah blah and he gets really sad right

00:08:06,460 --> 00:08:13,820
so that's that's no good and so instead

00:08:11,840 --> 00:08:15,889
of relying on mocking it out let's say

00:08:13,820 --> 00:08:18,110
okay well let's actually put us put up a

00:08:15,889 --> 00:08:20,120
real server somewhere call it a sandbox

00:08:18,110 --> 00:08:22,460
and we're going to actually run those

00:08:20,120 --> 00:08:23,750
client tests against the sandbox right

00:08:22,460 --> 00:08:25,190
and so that way we can have this full

00:08:23,750 --> 00:08:28,159
representation of what's happening and

00:08:25,190 --> 00:08:29,389
we know that that the client tests are

00:08:28,159 --> 00:08:31,029
actually talking to the real server and

00:08:29,389 --> 00:08:33,169
the server development is still the same

00:08:31,029 --> 00:08:36,500
but we're actually talking to the server

00:08:33,169 --> 00:08:39,529
and this is good right we would

00:08:36,500 --> 00:08:41,779
essentially set a domain in the in the

00:08:39,529 --> 00:08:43,820
tests and do the same assertions that we

00:08:41,779 --> 00:08:45,170
decided to do beforehand we would start

00:08:43,820 --> 00:08:47,029
we've got the words back if we use that

00:08:45,170 --> 00:08:49,250
client interface and we're basically

00:08:47,029 --> 00:08:51,140
talking to that sandbox and we actually

00:08:49,250 --> 00:08:52,640
get the words back from the real server

00:08:51,140 --> 00:08:55,670
that we're talking to right and this is

00:08:52,640 --> 00:08:58,310
good because if the server API changes

00:08:55,670 --> 00:08:59,980
the client tests are going to break this

00:08:58,310 --> 00:09:02,480
is good right this is good integration

00:08:59,980 --> 00:09:04,579
so there's a few problems with this and

00:09:02,480 --> 00:09:07,130
that is that setting up sandbox takes

00:09:04,579 --> 00:09:08,510
time right you can use things like Roku

00:09:07,130 --> 00:09:11,060
and you can use things like Engine Yard

00:09:08,510 --> 00:09:12,230
and you can even set up your server

00:09:11,060 --> 00:09:14,150
locally and

00:09:12,230 --> 00:09:15,980
against that but this takes time and it

00:09:14,150 --> 00:09:20,030
kind of steps in your way it's it's not

00:09:15,980 --> 00:09:22,280
it's not an ideal thing and also you

00:09:20,030 --> 00:09:23,840
need to make sure that the server that

00:09:22,280 --> 00:09:25,730
you're running against has the latest

00:09:23,840 --> 00:09:27,380
release right this is not a big deal you

00:09:25,730 --> 00:09:29,210
can automate this but it's still

00:09:27,380 --> 00:09:31,910
annoying right you don't have this quick

00:09:29,210 --> 00:09:34,390
feedback you know iteration writing your

00:09:31,910 --> 00:09:36,500
tests and and getting everything back

00:09:34,390 --> 00:09:38,510
but what's really annoying here is that

00:09:36,500 --> 00:09:40,070
you're actually because this is a good

00:09:38,510 --> 00:09:41,660
kind of integration test right you're

00:09:40,070 --> 00:09:42,890
doing the whole thing it takes a lot of

00:09:41,660 --> 00:09:44,540
time because you're traversing like the

00:09:42,890 --> 00:09:45,920
whole network stack you're talking your

00:09:44,540 --> 00:09:47,750
part you're doing Jason you're parsing

00:09:45,920 --> 00:09:49,460
it you're sending it back you're doing

00:09:47,750 --> 00:09:52,130
everything which is good but it's slow

00:09:49,460 --> 00:09:54,980
and when you're writing tests and you

00:09:52,130 --> 00:09:57,860
want to actually develop the client you

00:09:54,980 --> 00:09:59,270
know it's not fast and good tests or

00:09:57,860 --> 00:10:01,430
fast right you want to actually have

00:09:59,270 --> 00:10:04,670
this quick feedback and iteration that

00:10:01,430 --> 00:10:07,430
you work on and that's not good even

00:10:04,670 --> 00:10:09,530
worse is that you know considering our

00:10:07,430 --> 00:10:11,570
scenario where we basically have unique

00:10:09,530 --> 00:10:13,400
titles if you're going to run the client

00:10:11,570 --> 00:10:15,260
test once you're going to post a song

00:10:13,400 --> 00:10:16,220
you get back the words and then you're

00:10:15,260 --> 00:10:17,630
going to change something in the client

00:10:16,220 --> 00:10:19,160
you run the same exact test and the

00:10:17,630 --> 00:10:20,270
server didn't even change where you're

00:10:19,160 --> 00:10:22,340
going to get a validation error that

00:10:20,270 --> 00:10:25,340
says oh that song has been created the

00:10:22,340 --> 00:10:26,300
test fails right and that's essentially

00:10:25,340 --> 00:10:29,090
going to have all these server-side

00:10:26,300 --> 00:10:31,430
validations and you basically can't

00:10:29,090 --> 00:10:33,680
control the state of the sandbox right

00:10:31,430 --> 00:10:35,870
because you don't have complete control

00:10:33,680 --> 00:10:42,290
of what's going on you're going to run

00:10:35,870 --> 00:10:45,620
into into issues like this right yeah

00:10:42,290 --> 00:10:47,360
you're going to run into conflicts also

00:10:45,620 --> 00:10:48,770
you can run into issues where if you

00:10:47,360 --> 00:10:49,910
want to have more complicated test

00:10:48,770 --> 00:10:51,620
you're going to have really complicated

00:10:49,910 --> 00:10:54,200
setup and teardown methods that can take

00:10:51,620 --> 00:10:56,720
time like what if we want to test that a

00:10:54,200 --> 00:10:58,520
user has a 50 song limit and can't post

00:10:56,720 --> 00:11:00,350
more than 50 songs right you're going to

00:10:58,520 --> 00:11:02,810
need to create 50 songs and then the

00:11:00,350 --> 00:11:04,790
story 50 songs what even happens if that

00:11:02,810 --> 00:11:06,890
API doesn't have a delete method right

00:11:04,790 --> 00:11:08,420
like what if you can't actually interact

00:11:06,890 --> 00:11:10,400
with the API you could even be stuck if

00:11:08,420 --> 00:11:11,810
you're in this sandbox mode right this

00:11:10,400 --> 00:11:13,250
this is the lesson issue if you're

00:11:11,810 --> 00:11:14,540
developing something if you have

00:11:13,250 --> 00:11:16,250
complete control of the server but what

00:11:14,540 --> 00:11:17,840
if you're in this like quote unquote

00:11:16,250 --> 00:11:19,190
sandbox mode that you don't actually

00:11:17,840 --> 00:11:21,650
have control with the sandbox what if

00:11:19,190 --> 00:11:23,660
you're writing the client for this third

00:11:21,650 --> 00:11:25,510
party you know app right you're going to

00:11:23,660 --> 00:11:27,730
be stuck

00:11:25,510 --> 00:11:32,530
so that's no good and so these guys are

00:11:27,730 --> 00:11:34,060
obviously not happy about it and to

00:11:32,530 --> 00:11:36,160
touch back to the third goal that I

00:11:34,060 --> 00:11:37,780
mentioned the beginning is that was we

00:11:36,160 --> 00:11:40,150
have no concept of any mocking load of

00:11:37,780 --> 00:11:42,100
anything right we're not I mean if if

00:11:40,150 --> 00:11:44,020
the client wants to actually meaning the

00:11:42,100 --> 00:11:45,700
third party app developer wants to use

00:11:44,020 --> 00:11:48,430
this client he's going to either have to

00:11:45,700 --> 00:11:50,800
mock out the client in his own app or

00:11:48,430 --> 00:11:52,240
he's going to have to use a sandbox and

00:11:50,800 --> 00:11:53,830
he's going to run the same exact issues

00:11:52,240 --> 00:11:56,560
that that we run into right as the

00:11:53,830 --> 00:12:00,280
company that I've explained before hand

00:11:56,560 --> 00:12:02,290
so he's obviously not happy either but

00:12:00,280 --> 00:12:04,150
um it is worth mentioning that this is

00:12:02,290 --> 00:12:05,740
less or evil than mocking out it

00:12:04,150 --> 00:12:08,040
entirely right because you're actually

00:12:05,740 --> 00:12:10,180
talking to the real server you do have a

00:12:08,040 --> 00:12:11,650
representative test your you're doing

00:12:10,180 --> 00:12:12,940
the whole thing you're traversing the

00:12:11,650 --> 00:12:14,290
whole stack and this is good right

00:12:12,940 --> 00:12:16,540
there's drawbacks that you need to be

00:12:14,290 --> 00:12:18,610
aware of but it is a lot better than

00:12:16,540 --> 00:12:21,460
than kind of this isolation mode right

00:12:18,610 --> 00:12:22,810
and it's worth noting and it's even more

00:12:21,460 --> 00:12:23,860
so worth noting that like sometimes are

00:12:22,810 --> 00:12:25,570
going to be stuck in this incident

00:12:23,860 --> 00:12:27,670
situation right like for example if

00:12:25,570 --> 00:12:28,870
you're developing against some some

00:12:27,670 --> 00:12:33,310
other service that you need to develop

00:12:28,870 --> 00:12:34,720
against so the next kind of approach

00:12:33,310 --> 00:12:37,360
that builds on that is to say okay well

00:12:34,720 --> 00:12:39,220
this is raw we're doing this kind of

00:12:37,360 --> 00:12:40,450
thing where we're talking to a real

00:12:39,220 --> 00:12:42,550
server and it takes a lot of time what

00:12:40,450 --> 00:12:45,730
if we just create a fake server and test

00:12:42,550 --> 00:12:47,620
against that and you'll see what this

00:12:45,730 --> 00:12:49,900
basically does is we're going to create

00:12:47,620 --> 00:12:52,690
a fake server in the client and we're

00:12:49,900 --> 00:12:54,310
going to have this the server do the

00:12:52,690 --> 00:12:56,140
server does and the client mimics that

00:12:54,310 --> 00:12:57,640
right the fixer remembers that and

00:12:56,140 --> 00:13:01,330
what's important to notice here is that

00:12:57,640 --> 00:13:02,890
it's in the client and that the server

00:13:01,330 --> 00:13:04,720
has all this logic right it's doing

00:13:02,890 --> 00:13:07,810
background jobs it's doing analytics

00:13:04,720 --> 00:13:09,220
it's talking to some other service it's

00:13:07,810 --> 00:13:11,350
doing a bunch of stuff and our fake

00:13:09,220 --> 00:13:13,780
server all we wanted to do is to mimic

00:13:11,350 --> 00:13:15,370
the behavior of the real API we want it

00:13:13,780 --> 00:13:17,680
to quack the same quack right we want it

00:13:15,370 --> 00:13:19,210
to basically if I pass it a title and I

00:13:17,680 --> 00:13:21,640
give it words I want it to store

00:13:19,210 --> 00:13:23,200
something and if I you know want to

00:13:21,640 --> 00:13:24,880
retrieve it back I want it to give me

00:13:23,200 --> 00:13:26,020
the same words back and that's the only

00:13:24,880 --> 00:13:27,640
thing we care about we don't care about

00:13:26,020 --> 00:13:29,530
anything that's done inside of the

00:13:27,640 --> 00:13:31,930
server we just want it to look the same

00:13:29,530 --> 00:13:33,910
from the outside right just go into a

00:13:31,930 --> 00:13:35,170
little bit more detail here say okay

00:13:33,910 --> 00:13:37,740
we'll probably use something like

00:13:35,170 --> 00:13:37,740
Sinatra

00:13:37,960 --> 00:13:41,410
and what what's kind of nice to note

00:13:40,150 --> 00:13:43,390
here is that we're going to use an

00:13:41,410 --> 00:13:45,190
in-memory hash where we're going to

00:13:43,390 --> 00:13:46,840
store the songs and what's cool is that

00:13:45,190 --> 00:13:48,370
we don't actually have to do any

00:13:46,840 --> 00:13:49,600
complicated thing right we're just going

00:13:48,370 --> 00:13:51,450
to use something in memory that's going

00:13:49,600 --> 00:13:53,920
to be super fast and super simple and

00:13:51,450 --> 00:13:54,970
we're going to just do the same behavior

00:13:53,920 --> 00:13:56,170
right we're going to render that that

00:13:54,970 --> 00:13:58,290
Jason back and then we're going to

00:13:56,170 --> 00:14:02,020
render the words if you if you get it

00:13:58,290 --> 00:14:03,640
and what's important to note here is

00:14:02,020 --> 00:14:06,130
that we want it to be super simple right

00:14:03,640 --> 00:14:07,690
we don't we don't this is this is the

00:14:06,130 --> 00:14:09,970
simplest possible thing that we can do

00:14:07,690 --> 00:14:12,460
to make something that behaves like the

00:14:09,970 --> 00:14:14,770
API we don't actually want to create

00:14:12,460 --> 00:14:16,330
another server we want to have something

00:14:14,770 --> 00:14:18,010
that works really quickly and it simple

00:14:16,330 --> 00:14:19,840
so the most simple that you can make it

00:14:18,010 --> 00:14:21,940
is the goal and so using something like

00:14:19,840 --> 00:14:25,870
Sinatra is great for api's and I think

00:14:21,940 --> 00:14:27,550
actually yeah some of the stuff that

00:14:25,870 --> 00:14:30,610
I'll talk to might touch back into

00:14:27,550 --> 00:14:32,920
something that I think Brandon is your

00:14:30,610 --> 00:14:35,200
name yeah so that he was talking about

00:14:32,920 --> 00:14:36,880
get up using Sinatra and engineered uses

00:14:35,200 --> 00:14:39,190
a lot of Sinatra for IP eyes too it's

00:14:36,880 --> 00:14:40,660
it's an interesting concept and I think

00:14:39,190 --> 00:14:44,290
some of the things that I'm talking here

00:14:40,660 --> 00:14:46,780
relate to that but essentially we're

00:14:44,290 --> 00:14:48,250
going to use Sinatra to to keep it as

00:14:46,780 --> 00:14:51,700
simple as we can and do something in

00:14:48,250 --> 00:14:53,620
memory so it's quick right and this is

00:14:51,700 --> 00:14:55,710
the real important part to notice about

00:14:53,620 --> 00:14:58,120
this kind of motive development is that

00:14:55,710 --> 00:14:59,500
when we develop the client locally we're

00:14:58,120 --> 00:15:00,460
going to test that client against the

00:14:59,500 --> 00:15:01,480
fake server and we're going to have

00:15:00,460 --> 00:15:03,250
everything happening in memory it's

00:15:01,480 --> 00:15:05,440
going to be super quick super fast which

00:15:03,250 --> 00:15:08,080
is great but when we push it to the CI

00:15:05,440 --> 00:15:10,330
server we're going to run it you know

00:15:08,080 --> 00:15:13,780
whatever your Jenkins or your whatever

00:15:10,330 --> 00:15:15,040
it is we're going to run against the

00:15:13,780 --> 00:15:17,200
real server that's going to take

00:15:15,040 --> 00:15:18,790
whatever 15 minutes can take half an

00:15:17,200 --> 00:15:21,070
hour to take an hour and a half we

00:15:18,790 --> 00:15:23,770
literally have a project that we're

00:15:21,070 --> 00:15:25,810
running client tests or basically an app

00:15:23,770 --> 00:15:28,600
using the client against a sandbox

00:15:25,810 --> 00:15:30,100
against that we something that we need

00:15:28,600 --> 00:15:31,450
we can't we don't have access to and

00:15:30,100 --> 00:15:34,480
it's literally takes an hour and a half

00:15:31,450 --> 00:15:35,650
right so the sandbox mode which what I

00:15:34,480 --> 00:15:38,200
was talking about beforehand is

00:15:35,650 --> 00:15:39,550
essentially it takes a long time right

00:15:38,200 --> 00:15:40,870
and that's the drawbacks and so in the

00:15:39,550 --> 00:15:42,160
CI mode we can say we're going to push

00:15:40,870 --> 00:15:43,450
it to the CI and we don't mind waiting

00:15:42,160 --> 00:15:45,550
that time because when we're developing

00:15:43,450 --> 00:15:48,760
locally we're still doing it super quick

00:15:45,550 --> 00:15:50,230
right and so we basically use an

00:15:48,760 --> 00:15:50,780
environment variable where we say ok if

00:15:50,230 --> 00:15:52,760
you're in

00:15:50,780 --> 00:15:54,200
the smock mode then do it you know

00:15:52,760 --> 00:15:56,570
against the fake server and if you're in

00:15:54,200 --> 00:16:03,440
real mode run it against the the real

00:15:56,570 --> 00:16:06,110
server so what's really cool about this

00:16:03,440 --> 00:16:08,090
is that by doing this you're actually

00:16:06,110 --> 00:16:09,980
not just gaining the benefit of

00:16:08,090 --> 00:16:11,300
developing really quick but you're

00:16:09,980 --> 00:16:12,710
getting the confidence that you know

00:16:11,300 --> 00:16:15,620
that that fake server that you just

00:16:12,710 --> 00:16:16,970
created is actually really quacking the

00:16:15,620 --> 00:16:18,650
same quacks that the real server is

00:16:16,970 --> 00:16:19,970
because both your tests are green right

00:16:18,650 --> 00:16:21,380
when you develop locally your touch

00:16:19,970 --> 00:16:22,850
you're gonna be green when you push it

00:16:21,380 --> 00:16:24,410
to see I it's going to be green as well

00:16:22,850 --> 00:16:26,360
and so what ends up happening is that

00:16:24,410 --> 00:16:28,910
that fakes river that you created you

00:16:26,360 --> 00:16:31,490
know is exactly like your real API right

00:16:28,910 --> 00:16:34,070
and so if you actually use that fake

00:16:31,490 --> 00:16:35,840
server in other contexts a--'s in other

00:16:34,070 --> 00:16:37,400
in different context you know that that

00:16:35,840 --> 00:16:39,500
is exactly like your real thing and

00:16:37,400 --> 00:16:41,210
that's that's super cool that's actually

00:16:39,500 --> 00:16:42,830
pretty amazing if you think about it for

00:16:41,210 --> 00:16:44,660
a second because it's completely fake

00:16:42,830 --> 00:16:46,700
and it's actually doing exactly what you

00:16:44,660 --> 00:16:48,050
think it's doing and you and you have

00:16:46,700 --> 00:16:51,530
the confidence that it's doing what you

00:16:48,050 --> 00:16:53,690
think it's doing and what you could do

00:16:51,530 --> 00:16:55,070
is you could use this because you know

00:16:53,690 --> 00:16:56,660
it's actually doing the right thing you

00:16:55,070 --> 00:16:58,550
could use this as your mock mode you can

00:16:56,660 --> 00:17:01,130
say I'm going to because I know that

00:16:58,550 --> 00:17:02,990
this is a valid API or the behavior of

00:17:01,130 --> 00:17:05,120
what this is doing is valid I'm going to

00:17:02,990 --> 00:17:07,010
use this as a mock mode and I can ship

00:17:05,120 --> 00:17:09,320
it with a client and give it to people

00:17:07,010 --> 00:17:11,330
to use to say when I actually post a

00:17:09,320 --> 00:17:13,790
song right this is in some third-party

00:17:11,330 --> 00:17:15,440
app that's using this client he's going

00:17:13,790 --> 00:17:17,090
to do client mock and what's actually

00:17:15,440 --> 00:17:19,850
happening is he's going to you know do

00:17:17,090 --> 00:17:21,290
all this put in the words in the field

00:17:19,850 --> 00:17:23,240
in this other completely different place

00:17:21,290 --> 00:17:24,740
he's gonna use our client to interact

00:17:23,240 --> 00:17:26,180
with what's happening in the back end

00:17:24,740 --> 00:17:27,590
but actually it's just hitting that fake

00:17:26,180 --> 00:17:29,450
hash right it's just hitting that in

00:17:27,590 --> 00:17:30,800
memory of hash and what's cool is that

00:17:29,450 --> 00:17:32,060
even though this is happening and it's

00:17:30,800 --> 00:17:34,730
running against something too fake it's

00:17:32,060 --> 00:17:36,560
actually confirmed to be exactly what's

00:17:34,730 --> 00:17:38,600
running on the server because we've run

00:17:36,560 --> 00:17:41,510
it twice we run it in the CI mode and

00:17:38,600 --> 00:17:43,010
we've run it locally and both of the

00:17:41,510 --> 00:17:47,450
times the screen right whether it's

00:17:43,010 --> 00:17:48,710
mocked or not so I want to actually say

00:17:47,450 --> 00:17:50,840
that I lied a little bit because in

00:17:48,710 --> 00:17:52,310
sandbox mode you do have a way that you

00:17:50,840 --> 00:17:54,110
could create something like a mock mode

00:17:52,310 --> 00:17:55,690
and this is something that a co-worker

00:17:54,110 --> 00:17:59,030
of mine has been working on recently

00:17:55,690 --> 00:18:02,060
called cistern and it's basically taking

00:17:59,030 --> 00:18:04,400
a lot of the logic from fog and instead

00:18:02,060 --> 00:18:06,950
of creating a fake application you

00:18:04,400 --> 00:18:10,550
mimic the responses that the API returns

00:18:06,950 --> 00:18:12,290
and cistern gives you basically a

00:18:10,550 --> 00:18:14,030
framework for writing client code where

00:18:12,290 --> 00:18:15,440
you can kind of just do this and if you

00:18:14,030 --> 00:18:16,700
guys had are not aware of cistern which

00:18:15,440 --> 00:18:18,650
I seen or not because it's pretty new

00:18:16,700 --> 00:18:20,420
you should you should definitely check

00:18:18,650 --> 00:18:21,680
it out it's not a lot of documentation

00:18:20,420 --> 00:18:24,140
but the code is pretty straightforward

00:18:21,680 --> 00:18:28,190
and there's some gems using it where you

00:18:24,140 --> 00:18:29,960
could check out so the app developer

00:18:28,190 --> 00:18:31,250
obviously has this mock mode that he can

00:18:29,960 --> 00:18:33,080
interact with them that's cool right so

00:18:31,250 --> 00:18:35,210
he's kind of happy that he can use this

00:18:33,080 --> 00:18:36,830
and he has the confidence that he's

00:18:35,210 --> 00:18:40,280
using this fake representation of the

00:18:36,830 --> 00:18:42,020
API and it works and that's cool surfer

00:18:40,280 --> 00:18:42,980
developer guy is always happy because he

00:18:42,020 --> 00:18:47,480
has the least amount of work to do

00:18:42,980 --> 00:18:49,880
really the one thing to note about this

00:18:47,480 --> 00:18:51,740
approach is that it's a little more

00:18:49,880 --> 00:18:53,360
cumbersome because you need to because

00:18:51,740 --> 00:18:55,490
you're writing to api's you need to

00:18:53,360 --> 00:18:57,080
maintain both of them right so if you

00:18:55,490 --> 00:18:58,370
want to make a server-side change you're

00:18:57,080 --> 00:19:00,650
going to need to actually maintain that

00:18:58,370 --> 00:19:02,060
in the fake application right and so the

00:19:00,650 --> 00:19:03,410
server and the client guy has to

00:19:02,060 --> 00:19:09,950
maintain that fake application so he has

00:19:03,410 --> 00:19:12,380
a little bit more work he has to do yeah

00:19:09,950 --> 00:19:13,640
so so essentially the next kind of

00:19:12,380 --> 00:19:16,490
approach to that is something that I

00:19:13,640 --> 00:19:18,110
call the or we call the mapper style

00:19:16,490 --> 00:19:20,720
this is something that I've only seen

00:19:18,110 --> 00:19:22,370
happen at Engine Yard I don't actually

00:19:20,720 --> 00:19:24,410
necessarily think that this is something

00:19:22,370 --> 00:19:25,760
that should go into production but it's

00:19:24,410 --> 00:19:28,430
an interesting kind of thought

00:19:25,760 --> 00:19:31,100
experience we have used it and it does

00:19:28,430 --> 00:19:34,010
work but there are there are certain

00:19:31,100 --> 00:19:35,990
drawbacks I mean downsides and it's a

00:19:34,010 --> 00:19:37,790
little convoluted the idea here is to

00:19:35,990 --> 00:19:39,530
say okay we're going to have the fake

00:19:37,790 --> 00:19:41,840
application we have the real application

00:19:39,530 --> 00:19:43,370
and both of those have API endpoints

00:19:41,840 --> 00:19:44,600
what if we just share more code and say

00:19:43,370 --> 00:19:46,700
we're only going to have one place where

00:19:44,600 --> 00:19:48,710
we have API definitions and we're just

00:19:46,700 --> 00:19:50,000
going to map out the implementation

00:19:48,710 --> 00:19:51,620
we're going to say this is in fake mode

00:19:50,000 --> 00:19:53,030
this is in real mode we're going to

00:19:51,620 --> 00:19:54,650
create some module that has those

00:19:53,030 --> 00:19:56,870
behaviors but we're only going to have

00:19:54,650 --> 00:19:58,880
the API definitions in one place right

00:19:56,870 --> 00:20:00,980
so we'll create one repository that

00:19:58,880 --> 00:20:02,870
holds the post and go to the post can

00:20:00,980 --> 00:20:04,580
get definitions will have a client

00:20:02,870 --> 00:20:06,260
interface and we'll have the fake mapper

00:20:04,580 --> 00:20:07,880
which is that fake implementation of

00:20:06,260 --> 00:20:12,740
what's happening all in one repository

00:20:07,880 --> 00:20:14,810
and those modules basically map between

00:20:12,740 --> 00:20:17,260
okay are we in real mode or are we in

00:20:14,810 --> 00:20:17,260
fake mode

00:20:18,309 --> 00:20:24,619
so the the repository would look kind of

00:20:22,009 --> 00:20:25,820
like this right simplified where we

00:20:24,619 --> 00:20:29,779
would have this one place where we

00:20:25,820 --> 00:20:31,669
define this get thing and then we have

00:20:29,779 --> 00:20:33,709
this get song method that is defined on

00:20:31,669 --> 00:20:34,849
server mapper and server down mapper is

00:20:33,709 --> 00:20:36,649
essentially going to be that

00:20:34,849 --> 00:20:40,309
implementation are we in real mode are

00:20:36,649 --> 00:20:41,869
we in fake mode and in our rails

00:20:40,309 --> 00:20:44,059
application will basically have this

00:20:41,869 --> 00:20:45,499
module somewhere where we do all this

00:20:44,059 --> 00:20:47,899
internal logic right we could check the

00:20:45,499 --> 00:20:50,659
we could check to see that the user has

00:20:47,899 --> 00:20:52,339
some song limit we can do background

00:20:50,659 --> 00:20:54,499
jobs and analytics and whatever we want

00:20:52,339 --> 00:20:57,469
in this kind of real mode implementation

00:20:54,499 --> 00:20:59,570
and in the fake will basically have the

00:20:57,469 --> 00:21:01,879
same idea of the fake app will have an

00:20:59,570 --> 00:21:04,309
in-memory hash and we have the same

00:21:01,879 --> 00:21:05,929
methods that we define and we what we

00:21:04,309 --> 00:21:08,239
end up doing is use that one repository

00:21:05,929 --> 00:21:09,950
where we have those API endpoints that

00:21:08,239 --> 00:21:11,539
we've defined and we mount them using

00:21:09,950 --> 00:21:13,309
rack because you can mount rack

00:21:11,539 --> 00:21:15,229
applications on top of each other we'll

00:21:13,309 --> 00:21:17,779
use that to put it in our rails

00:21:15,229 --> 00:21:20,659
application so we could essentially just

00:21:17,779 --> 00:21:23,209
do okay server mapper equals a real

00:21:20,659 --> 00:21:24,919
implementation and mount it in this path

00:21:23,209 --> 00:21:29,119
and then what ends up happening is that

00:21:24,919 --> 00:21:30,589
when you do you know / AP I / get song

00:21:29,119 --> 00:21:33,019
you're going to have those endpoints

00:21:30,589 --> 00:21:36,129
that you're talking to right and so this

00:21:33,019 --> 00:21:40,399
is pretty cool they're just always happy

00:21:36,129 --> 00:21:42,469
and consumer applications can still use

00:21:40,399 --> 00:21:43,669
this kind of fake idea right they can

00:21:42,469 --> 00:21:45,409
still use this fake mode the fake

00:21:43,669 --> 00:21:46,759
implementation which is essentially

00:21:45,409 --> 00:21:48,409
doing the very same thing right it's

00:21:46,759 --> 00:21:51,409
doing server map or equals the fake

00:21:48,409 --> 00:21:52,909
implementation and then run it and then

00:21:51,409 --> 00:21:54,940
what ends up happening is they can use

00:21:52,909 --> 00:21:57,979
their tests to run and they'll basically

00:21:54,940 --> 00:22:00,609
run against this in memory hash same

00:21:57,979 --> 00:22:03,469
exact idea like the fake thing right and

00:22:00,609 --> 00:22:04,909
so we can have fixtures and we have this

00:22:03,469 --> 00:22:08,059
mock mode that we can chip which is cool

00:22:04,909 --> 00:22:13,099
and this guy is happy it's a nice smile

00:22:08,059 --> 00:22:14,869
I think too and so yeah we have full

00:22:13,099 --> 00:22:16,339
integration and there's a little bit

00:22:14,869 --> 00:22:20,059
more dry this approaches a little more

00:22:16,339 --> 00:22:23,409
dry right so that the issue here is that

00:22:20,059 --> 00:22:26,329
you need specific libraries to do this

00:22:23,409 --> 00:22:29,779
namely Faraday and rack client are two

00:22:26,329 --> 00:22:30,680
good HTTP client libraries that enable

00:22:29,779 --> 00:22:33,890
you to

00:22:30,680 --> 00:22:35,630
direct traffic toorak applications so

00:22:33,890 --> 00:22:37,700
what ends up happening is that you can

00:22:35,630 --> 00:22:41,120
say if you're going to this this domain

00:22:37,700 --> 00:22:44,960
instead of actually using net HTTP use

00:22:41,120 --> 00:22:46,370
this rack app and those are the only two

00:22:44,960 --> 00:22:49,640
I think that can do it and so this

00:22:46,370 --> 00:22:52,190
specific implica proach requires one of

00:22:49,640 --> 00:22:53,930
those two but what's a little more

00:22:52,190 --> 00:22:55,790
annoying is that when i started and i

00:22:53,930 --> 00:22:58,640
saw this pattern in some of engineered

00:22:55,790 --> 00:22:59,780
systems it was it was really confusing i

00:22:58,640 --> 00:23:01,700
did not understand what's going on i

00:22:59,780 --> 00:23:03,620
looked for the specific URL in the rails

00:23:01,700 --> 00:23:06,230
app and i can't find it and it's into

00:23:03,620 --> 00:23:07,490
some completely different repository you

00:23:06,230 --> 00:23:08,810
have to start digging through all this

00:23:07,490 --> 00:23:10,220
code and understanding it and if you

00:23:08,810 --> 00:23:12,410
don't really understand the concepts of

00:23:10,220 --> 00:23:16,610
what's going on it's it's confusing

00:23:12,410 --> 00:23:18,080
right and it can be hard to maintain so

00:23:16,610 --> 00:23:21,500
this is a tech talk so I put a cat in

00:23:18,080 --> 00:23:23,030
there and maybe this is the way your

00:23:21,500 --> 00:23:24,950
brain is responding maybe not hopefully

00:23:23,030 --> 00:23:27,800
not because there's a lot of information

00:23:24,950 --> 00:23:30,140
a lot of ground I covered so I hope that

00:23:27,800 --> 00:23:32,240
this has been useful I'm going to run

00:23:30,140 --> 00:23:34,040
through them conclusions though api's

00:23:32,240 --> 00:23:35,630
with foundation of distributed systems

00:23:34,040 --> 00:23:37,060
right this is this is the origin of my

00:23:35,630 --> 00:23:40,310
tweet why I think this is really

00:23:37,060 --> 00:23:42,650
important thing to kind of grasp right

00:23:40,310 --> 00:23:45,500
and it's interesting thing to do because

00:23:42,650 --> 00:23:47,240
like you've seen there's a lot of

00:23:45,500 --> 00:23:49,610
different ways you can approach this and

00:23:47,240 --> 00:23:50,990
each has drawbacks and each has problems

00:23:49,610 --> 00:23:53,240
and some of that is good something is

00:23:50,990 --> 00:23:54,800
not and and quite frankly sometimes

00:23:53,240 --> 00:23:56,270
you'll be stuck in a certain approach to

00:23:54,800 --> 00:23:58,010
you won't really have the leverage to do

00:23:56,270 --> 00:23:59,750
things I was talking in a mode where we

00:23:58,010 --> 00:24:01,190
were developing server and the client

00:23:59,750 --> 00:24:02,660
but sometimes you'll be stuck just

00:24:01,190 --> 00:24:03,950
developing this to the client sometimes

00:24:02,660 --> 00:24:05,930
we'll be stuck just developing a server

00:24:03,950 --> 00:24:07,600
because your managers don't don't want

00:24:05,930 --> 00:24:09,650
to give you time to work on a client

00:24:07,600 --> 00:24:11,750
sometimes you'll just be this third

00:24:09,650 --> 00:24:13,160
party guy using a client right and you

00:24:11,750 --> 00:24:15,020
have to decide if you want to mock it

00:24:13,160 --> 00:24:16,280
out or if you use sandbox or if you use

00:24:15,020 --> 00:24:20,000
a good client that has a mocking mode

00:24:16,280 --> 00:24:21,530
things like that so these are some of

00:24:20,000 --> 00:24:22,790
the approaches that I've seen I'm sure

00:24:21,530 --> 00:24:24,050
there are other approaches you could use

00:24:22,790 --> 00:24:25,760
to test api's and i'd be super

00:24:24,050 --> 00:24:28,730
interested to hear your experience with

00:24:25,760 --> 00:24:30,800
it it's it's it's a really interesting

00:24:28,730 --> 00:24:32,470
subject I'm kind of passionate about it

00:24:30,800 --> 00:24:35,810
and I would be super happy if you guys

00:24:32,470 --> 00:24:36,770
tell me about your experience and but

00:24:35,810 --> 00:24:38,720
there's one thing that I would

00:24:36,770 --> 00:24:41,120
personally like for you to take from

00:24:38,720 --> 00:24:44,300
this talk is that having this notion of

00:24:41,120 --> 00:24:44,630
this validated fake representation of

00:24:44,300 --> 00:24:46,820
your ape

00:24:44,630 --> 00:24:48,770
guy is great for local client

00:24:46,820 --> 00:24:50,480
development and it's also great for

00:24:48,770 --> 00:24:52,220
using it in some third-party app that

00:24:50,480 --> 00:24:56,210
uses that client right it's it's just

00:24:52,220 --> 00:24:57,740
useful so I have examples of all these

00:24:56,210 --> 00:25:00,140
different approaches in this repository

00:24:57,740 --> 00:25:02,780
I'll tweet the slides when I'm done so

00:25:00,140 --> 00:25:04,220
you guys can just follow the link every

00:25:02,780 --> 00:25:06,110
one of those approaches has working

00:25:04,220 --> 00:25:08,480
examples and the tested mode and you can

00:25:06,110 --> 00:25:12,440
kind of go and see what's going on code

00:25:08,480 --> 00:25:15,590
wise I'd like to say thank you to Jacob

00:25:12,440 --> 00:25:18,680
whose Beanstalk surf we both actually

00:25:15,590 --> 00:25:21,200
were working on this add-on program that

00:25:18,680 --> 00:25:23,630
engine yard provides and we ran into a

00:25:21,200 --> 00:25:25,450
lot of these things and a much of this

00:25:23,630 --> 00:25:28,280
talk came out of work on that project

00:25:25,450 --> 00:25:31,070
some gems that I had talked about rat

00:25:28,280 --> 00:25:32,870
client Faraday fake web real web Sinatra

00:25:31,070 --> 00:25:36,890
cistern something that you should check

00:25:32,870 --> 00:25:38,870
out and this other talk that talks about

00:25:36,890 --> 00:25:40,580
toggle toggle amox which is very similar

00:25:38,870 --> 00:25:42,710
to what I've mentioned about this kind

00:25:40,580 --> 00:25:49,300
of like fog mock mode so you can see

00:25:42,710 --> 00:25:49,300
that this is just happiness and ya thang

00:26:21,570 --> 00:26:23,630

YouTube URL: https://www.youtube.com/watch?v=Bz0KrmCrhIY


