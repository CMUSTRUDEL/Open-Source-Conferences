Title: MountainWest RubyConf 2013 Why We Need DevOps Now: A Fourteen Year Study Of High Performing IT...
Publication date: 2020-01-28
Playlist: MWRC 2013
Description: 
	Title: Why We Need DevOps Now: A Fourteen Year Study Of High Performing IT Organizations
Presented by: Gene Kim

Gene Kim will present his findings from an ongoing study of how high-performing IT organizations simultaneously deliver stellar service levels and deliver fast flow of new features into the production environment. To successfully deliver against what on the surface appear to be conflicting objectives, (i.e. preserving service levels while introducing significant amounts of change into production), requires creating a highly-coordinated collection of teams where Development, QA, IT Operations, as well as Product Management and Information Security genuinely work together to solve business objectives.
Gene will describe what successful transformations look like, and how those transformations were achieved from a software development and service operations perspective. He will draw upon fourteen years of research of high-performing IT organizations, as well as work he's done since 2008 to help some of the largest Internet companies increase feature flow and production stability through applications of DevOps principles.

Help us caption & translate this video!

http://amara.org/v/FGbd/
Captions: 
	00:00:16,380 --> 00:00:19,380
hey

00:00:20,150 --> 00:00:24,000
just a good thing started by the way

00:00:22,410 --> 00:00:25,320
just uh you know I was observing this

00:00:24,000 --> 00:00:26,550
before sounds like you know what I'm

00:00:25,320 --> 00:00:27,960
going to do the smart thing and I'm

00:00:26,550 --> 00:00:30,509
actually gonna copy my presentation to a

00:00:27,960 --> 00:00:32,279
USB Drive and I SAT calmly while the

00:00:30,509 --> 00:00:35,030
presentation was getting up and so then

00:00:32,279 --> 00:00:37,500
I lost it I lost my USB Drive

00:00:35,030 --> 00:00:38,730
preparation alright so uh my every

00:00:37,500 --> 00:00:40,050
passion for last 13 years have been

00:00:38,730 --> 00:00:41,760
studying a group of organizations that

00:00:40,050 --> 00:00:43,199
we used to call genes list of people

00:00:41,760 --> 00:00:45,720
with great kung-fu right so I've been

00:00:43,199 --> 00:00:47,430
studies organization since 1999 so what

00:00:45,720 --> 00:00:48,960
made these organizations great they had

00:00:47,430 --> 00:00:50,339
great project due date performance they

00:00:48,960 --> 00:00:51,989
had great operational stability and

00:00:50,339 --> 00:00:53,340
reliability they had a great posture

00:00:51,989 --> 00:00:55,289
security and they had a great posture

00:00:53,340 --> 00:00:57,239
compliance and so one of the questions

00:00:55,289 --> 00:00:58,500
that we wanted to ask is like what is it

00:00:57,239 --> 00:01:00,390
that they're doing so differently that's

00:00:58,500 --> 00:01:02,340
resulting in there for nominally great

00:01:00,390 --> 00:01:04,350
outcomes and so one of the things that

00:01:02,340 --> 00:01:06,360
made us uh sort of fall off the chair

00:01:04,350 --> 00:01:07,590
kind of first is actually kind of asking

00:01:06,360 --> 00:01:09,030
where do these high-performance come

00:01:07,590 --> 00:01:10,590
from and one of the things that we saw

00:01:09,030 --> 00:01:12,149
right away that thou we thought was very

00:01:10,590 --> 00:01:14,190
puzzling was if you looked at through

00:01:12,149 --> 00:01:15,929
the people leading these high performers

00:01:14,190 --> 00:01:17,550
they typically came from one of three

00:01:15,929 --> 00:01:19,520
professions there were either a

00:01:17,550 --> 00:01:27,119
noncommissioned officer in the military

00:01:19,520 --> 00:01:30,450
yeah yeah oh oh yes bang ah thank you so

00:01:27,119 --> 00:01:31,530
much like they're either hyper they were

00:01:30,450 --> 00:01:34,560
either noncommissioned officer in the

00:01:31,530 --> 00:01:38,280
military great that has to be plugged in

00:01:34,560 --> 00:01:40,140
so they're a five or six is now so

00:01:38,280 --> 00:01:42,539
there's Staff Sergeant or sergeant there

00:01:40,140 --> 00:01:45,660
a chemical engineer in the or nuclear

00:01:42,539 --> 00:01:47,160
engineer or there were an auditor not to

00:01:45,660 --> 00:01:49,140
say a green eyeshade wearing bean

00:01:47,160 --> 00:01:51,179
counter right there were nike auditor so

00:01:49,140 --> 00:01:52,679
can anyone speculate what these three

00:01:51,179 --> 00:01:55,489
professions have in common in terms of

00:01:52,679 --> 00:01:57,860
the values that they hold near and dear

00:01:55,489 --> 00:02:00,840
non-commissioned officer in the military

00:01:57,860 --> 00:02:03,000
chemical engineers and otters what was

00:02:00,840 --> 00:02:08,310
that discipline i love that any other

00:02:03,000 --> 00:02:11,580
words really good hi outage cost yes any

00:02:08,310 --> 00:02:13,739
others you know the words we came up

00:02:11,580 --> 00:02:15,540
with was after many years was rigor and

00:02:13,739 --> 00:02:17,209
discipline right and so if you take a

00:02:15,540 --> 00:02:19,080
look at that wives might be right

00:02:17,209 --> 00:02:21,540
non-commissioned officers give live

00:02:19,080 --> 00:02:22,680
ammunition to 18 year olds what I've

00:02:21,540 --> 00:02:23,879
learned in my journey is that if you go

00:02:22,680 --> 00:02:25,470
into restaurant operations they don't

00:02:23,879 --> 00:02:26,910
even like giving knives to 18 year old

00:02:25,470 --> 00:02:28,709
because you can buy knives and raw

00:02:26,910 --> 00:02:30,500
carrots the accident rates are so high

00:02:28,709 --> 00:02:32,240
that that insurance companies

00:02:30,500 --> 00:02:33,740
involved chemical engineers have long

00:02:32,240 --> 00:02:35,600
elaborate recipes where if you miss

00:02:33,740 --> 00:02:37,610
sequence two steps right endothermic

00:02:35,600 --> 00:02:39,080
becomes exothermic writing people you

00:02:37,610 --> 00:02:40,640
know think explode we had a joke at

00:02:39,080 --> 00:02:42,560
Purdue University you know how do you

00:02:40,640 --> 00:02:44,510
tell if I the engineering department is

00:02:42,560 --> 00:02:45,800
a nuclear engineering professor count

00:02:44,510 --> 00:02:47,930
their fingers if they don't have all ten

00:02:45,800 --> 00:02:49,130
there are new key right in auditors you

00:02:47,930 --> 00:02:51,500
know they haven't been to control our

00:02:49,130 --> 00:02:53,120
checklist Dave didn't love right and so

00:02:51,500 --> 00:02:54,410
when you know over the last from about

00:02:53,120 --> 00:02:56,090
two thousand five to two thousand eight

00:02:54,410 --> 00:02:57,740
we bench I helped raise about a million

00:02:56,090 --> 00:02:59,450
dollars to benchmark over 1300 IT

00:02:57,740 --> 00:03:01,340
organizations to see if we could link

00:02:59,450 --> 00:03:02,900
controls with performance right and we

00:03:01,340 --> 00:03:04,940
actually found that no rigor and

00:03:02,900 --> 00:03:06,530
discipline you know pervaded those with

00:03:04,940 --> 00:03:08,330
those three things almost predict

00:03:06,530 --> 00:03:09,530
performance and so that's what we put

00:03:08,330 --> 00:03:12,440
into the visible handbook that we

00:03:09,530 --> 00:03:14,330
published in 2004 so where this journey

00:03:12,440 --> 00:03:15,980
has taken me against all my expected

00:03:14,330 --> 00:03:17,510
expectations is as taking me straight

00:03:15,980 --> 00:03:19,640
into the heart of the DevOps movement

00:03:17,510 --> 00:03:21,560
and so I want to show and I think it

00:03:19,640 --> 00:03:23,300
came for me at a very special time right

00:03:21,560 --> 00:03:25,340
because I started seeing something that

00:03:23,300 --> 00:03:27,230
happened in almost every IT organization

00:03:25,340 --> 00:03:28,070
this downward spiral that it didn't

00:03:27,230 --> 00:03:30,140
matter whether you're in an enterprise

00:03:28,070 --> 00:03:31,790
or in a small shop it would doesn't

00:03:30,140 --> 00:03:33,920
matter what vertical urine large is

00:03:31,790 --> 00:03:35,450
small you know these there was a

00:03:33,920 --> 00:03:36,980
terrible downward spiral that happened

00:03:35,450 --> 00:03:38,420
almost every IT organization so what I

00:03:36,980 --> 00:03:40,400
want to do right now is to share with

00:03:38,420 --> 00:03:42,590
you what that downward spiral looks like

00:03:40,400 --> 00:03:45,049
but and it can be told in three steps

00:03:42,590 --> 00:03:46,310
and it starts off in IT operations and

00:03:45,049 --> 00:03:48,620
how many people here would call your

00:03:46,310 --> 00:03:51,680
sort of primary kind of passionate

00:03:48,620 --> 00:03:54,160
vocation ops how many people would say

00:03:51,680 --> 00:03:57,260
your primary passion and vocation is dev

00:03:54,160 --> 00:03:59,600
right ok and then security James you're

00:03:57,260 --> 00:04:00,709
out there somewhere haha me too I'm when

00:03:59,600 --> 00:04:03,230
I'm one of these information security

00:04:00,709 --> 00:04:06,290
people right so so um does Act one

00:04:03,230 --> 00:04:07,310
begins in operations when we're put in a

00:04:06,290 --> 00:04:09,019
situation we're having to support

00:04:07,310 --> 00:04:11,000
fragile infrastructure production the

00:04:09,019 --> 00:04:12,890
reason why we call it fragile because if

00:04:11,000 --> 00:04:14,870
you even look at this gnome application

00:04:12,890 --> 00:04:16,790
or this piece of infrastructure right or

00:04:14,870 --> 00:04:18,049
this interface it blows up and no one

00:04:16,790 --> 00:04:20,180
knows how to fix it right and no knows

00:04:18,049 --> 00:04:21,979
how to build a new one so what happens

00:04:20,180 --> 00:04:23,840
is that there's a terrible tragedy right

00:04:21,979 --> 00:04:25,460
does that these most fragile artifacts

00:04:23,840 --> 00:04:26,870
of services typically under pain the

00:04:25,460 --> 00:04:28,040
most important business initiatives for

00:04:26,870 --> 00:04:29,390
the organization right it might be the

00:04:28,040 --> 00:04:32,060
most business important business project

00:04:29,390 --> 00:04:33,979
it might be the business operation right

00:04:32,060 --> 00:04:35,479
with the highest outage cost and so when

00:04:33,979 --> 00:04:37,130
this when you have the most critical

00:04:35,479 --> 00:04:39,169
operations and projects relying on

00:04:37,130 --> 00:04:40,970
stings that are fragile you know

00:04:39,169 --> 00:04:42,409
something awful happens right the

00:04:40,970 --> 00:04:43,879
company starts missing the commit

00:04:42,409 --> 00:04:44,899
it makes the external market right

00:04:43,879 --> 00:04:46,489
sometimes its problems to make the

00:04:44,899 --> 00:04:47,749
customers sometimes it's what they make

00:04:46,489 --> 00:04:49,429
the Wall Street sometimes these promises

00:04:47,749 --> 00:04:51,800
made to the analyst right and so when

00:04:49,429 --> 00:04:54,050
that happens typically I think it's part

00:04:51,800 --> 00:04:56,419
of a human nature's that's to atone for

00:04:54,050 --> 00:04:58,219
that right we make even larger more

00:04:56,419 --> 00:04:59,899
audacious promises right to compensate

00:04:58,219 --> 00:05:02,029
for the commitment is missed right and

00:04:59,899 --> 00:05:03,229
so was the tragedy is that these

00:05:02,029 --> 00:05:05,239
commitments are often made by these

00:05:03,229 --> 00:05:07,009
people write the product managers write

00:05:05,239 --> 00:05:08,479
often art majors creative writing majors

00:05:07,009 --> 00:05:11,419
and by the way you know also my best

00:05:08,479 --> 00:05:12,830
friends are art majors but no they often

00:05:11,419 --> 00:05:15,169
don't have the best innate understanding

00:05:12,830 --> 00:05:17,419
what technology can and can't do so now

00:05:15,169 --> 00:05:18,919
we interact you the developers right on

00:05:17,419 --> 00:05:20,929
just if I could explain this image right

00:05:18,919 --> 00:05:22,309
if we have a joke enough show me a

00:05:20,929 --> 00:05:23,569
developer who isn't causing an outage

00:05:22,309 --> 00:05:25,339
I'll show you one that's on vacation

00:05:23,569 --> 00:05:27,469
right and obviously in this crowd I'm

00:05:25,339 --> 00:05:29,839
not it's not about developers it's the

00:05:27,469 --> 00:05:31,159
dbas right just the dba's who all cause

00:05:29,839 --> 00:05:34,729
all the outages and as a former

00:05:31,159 --> 00:05:36,979
developer I say that with love so what

00:05:34,729 --> 00:05:38,539
dev now sees our urgent date driven

00:05:36,979 --> 00:05:39,919
projects put into the queue right where

00:05:38,539 --> 00:05:41,899
a commitment has already been made to

00:05:39,919 --> 00:05:44,389
the outside market right so the dates

00:05:41,899 --> 00:05:46,099
cannot move and so when this happens dev

00:05:44,389 --> 00:05:47,479
typically spends all the time working on

00:05:46,099 --> 00:05:48,829
features leaving no time for the

00:05:47,479 --> 00:05:49,879
non-functional requirements the

00:05:48,829 --> 00:05:51,529
operational requirements like for

00:05:49,879 --> 00:05:53,809
example operability manageability

00:05:51,529 --> 00:05:55,849
deployability security right and so

00:05:53,809 --> 00:05:58,249
everyone who's after dev including test

00:05:55,849 --> 00:06:00,050
capacity testing infosec operations you

00:05:58,249 --> 00:06:01,819
know basically the buffet becomes empty

00:06:00,050 --> 00:06:04,399
you know long before comes to us right

00:06:01,819 --> 00:06:05,779
so when that happens you know uh this is

00:06:04,399 --> 00:06:07,459
where technical debt starts to accrue

00:06:05,779 --> 00:06:09,139
right and so when I visualize technical

00:06:07,459 --> 00:06:11,659
debt this is kind of how I envisioned it

00:06:09,139 --> 00:06:12,949
right as I see em and it's not just so

00:06:11,659 --> 00:06:14,419
it means that at the end of every

00:06:12,949 --> 00:06:16,189
project we have one more piece of

00:06:14,419 --> 00:06:19,459
fragile infrastructure in production

00:06:16,189 --> 00:06:20,929
right and so you know this is bad right

00:06:19,459 --> 00:06:22,789
but you know we call a technical debt

00:06:20,929 --> 00:06:24,889
for a reason you know technical debt a

00:06:22,789 --> 00:06:27,499
cruise right just like financial debt so

00:06:24,889 --> 00:06:31,249
this eventually becomes this right and

00:06:27,499 --> 00:06:33,789
so if you have a outage right and you

00:06:31,249 --> 00:06:35,899
know is because of a cabling error right

00:06:33,789 --> 00:06:37,969
you know between somewhere between the

00:06:35,899 --> 00:06:39,559
sand and database you know which cable

00:06:37,969 --> 00:06:41,689
is right by the way it's that one right

00:06:39,559 --> 00:06:43,069
so but there's something even more

00:06:41,689 --> 00:06:45,229
insidious that happens in a downward

00:06:43,069 --> 00:06:47,360
spiral which is that things that used to

00:06:45,229 --> 00:06:48,860
take more things take longer to deploy

00:06:47,360 --> 00:06:50,329
so we all had an application i used to

00:06:48,860 --> 00:06:52,430
say five minutes to deploy it takes ten

00:06:50,329 --> 00:06:54,649
minutes takes a half hour takes an hour

00:06:52,430 --> 00:06:56,270
takes two hours takes a day takes two

00:06:54,649 --> 00:06:57,440
days but there has anyone had

00:06:56,270 --> 00:06:59,540
observe this phenomenon where

00:06:57,440 --> 00:07:01,790
applications take longer to deploy how

00:06:59,540 --> 00:07:04,280
many here have a friend who've been in a

00:07:01,790 --> 00:07:09,860
situation where this is happened yeah

00:07:04,280 --> 00:07:11,360
okay thank you so these loops are

00:07:09,860 --> 00:07:13,220
positively reinforcing in other words

00:07:11,360 --> 00:07:15,170
the worse it gets to less you do them in

00:07:13,220 --> 00:07:17,480
other words the business will often say

00:07:15,170 --> 00:07:19,610
you know I the release was so painful

00:07:17,480 --> 00:07:20,900
we're going to do it less often right so

00:07:19,610 --> 00:07:21,830
we're gonna lengthen the deployment

00:07:20,900 --> 00:07:23,180
intervals all right so that's like

00:07:21,830 --> 00:07:25,010
someone saying gosh running that mile

00:07:23,180 --> 00:07:26,780
was really tough let's do that less

00:07:25,010 --> 00:07:28,130
often okay i think that i'm not sure

00:07:26,780 --> 00:07:29,240
what the rationale is like no somehow

00:07:28,130 --> 00:07:30,830
we're going to be better rested for our

00:07:29,240 --> 00:07:32,360
next run but you know so when this

00:07:30,830 --> 00:07:34,040
happens you know suddenly this is what

00:07:32,360 --> 00:07:35,930
causes operations and development to be

00:07:34,040 --> 00:07:37,160
constantly at war right so this is kind

00:07:35,930 --> 00:07:38,630
of the way I vision envisioned the guy

00:07:37,160 --> 00:07:40,340
who just did the code commit right

00:07:38,630 --> 00:07:42,050
high-fiving each other in the parking

00:07:40,340 --> 00:07:43,640
lot not realizing the just at the entire

00:07:42,050 --> 00:07:45,380
data center on fire you know for the

00:07:43,640 --> 00:07:47,480
entire weekend right and so the real

00:07:45,380 --> 00:07:48,710
tragedy here is that at this point you

00:07:47,480 --> 00:07:50,330
know no one is actually achieving their

00:07:48,710 --> 00:07:52,760
goals developers can't get their

00:07:50,330 --> 00:07:54,520
features in production right testing is

00:07:52,760 --> 00:07:56,480
getting harder and further behind

00:07:54,520 --> 00:07:58,490
operations is having more and more time

00:07:56,480 --> 00:07:59,600
keeping the service up right and

00:07:58,490 --> 00:08:01,220
technical debt is going to guarantee

00:07:59,600 --> 00:08:02,180
that's gonna get worse and by the way

00:08:01,220 --> 00:08:04,310
let's not forget about the information

00:08:02,180 --> 00:08:05,720
security people right by the time you

00:08:04,310 --> 00:08:07,550
know they get involved right the buffet

00:08:05,720 --> 00:08:09,440
table is empty right and now if

00:08:07,550 --> 00:08:11,750
information security is spending time on

00:08:09,440 --> 00:08:12,890
the least the activity that has the

00:08:11,750 --> 00:08:14,900
least nutritional value which is

00:08:12,890 --> 00:08:16,670
compliance right yeah instead of making

00:08:14,900 --> 00:08:18,560
systems and data secure they're just

00:08:16,670 --> 00:08:21,590
going through the checklist right for

00:08:18,560 --> 00:08:22,880
someone else and so this is why the

00:08:21,590 --> 00:08:24,260
reason it's so important to me is that I

00:08:22,880 --> 00:08:27,620
think when people are in a situation

00:08:24,260 --> 00:08:30,190
where this occurs this puts us all in a

00:08:27,620 --> 00:08:32,630
situation where if we feel trapped in a

00:08:30,190 --> 00:08:34,160
system that preordained failure right

00:08:32,630 --> 00:08:36,140
and if you're down stream if you're in

00:08:34,160 --> 00:08:38,630
operation or information security right

00:08:36,140 --> 00:08:40,370
you feel a sense of hopelessness and

00:08:38,630 --> 00:08:41,810
despair right because we've actually

00:08:40,370 --> 00:08:44,060
removed the ability for them to actually

00:08:41,810 --> 00:08:45,290
change the outcomes so how many people

00:08:44,060 --> 00:08:46,490
here at least resonate with at least

00:08:45,290 --> 00:08:48,290
some elements of the store you can just

00:08:46,490 --> 00:08:51,230
raise your hand very great even the

00:08:48,290 --> 00:08:52,700
upstream guys very interesting so and so

00:08:51,230 --> 00:08:55,640
this happens in almost every

00:08:52,700 --> 00:08:58,700
organization and the reason is is that I

00:08:55,640 --> 00:09:01,100
think every organization whether largest

00:08:58,700 --> 00:09:02,720
small you know hat is faced when the IT

00:09:01,100 --> 00:09:04,370
faced with two conflicting needs right

00:09:02,720 --> 00:09:06,050
the need to respond to urgent business

00:09:04,370 --> 00:09:07,370
needs which means deliver features

00:09:06,050 --> 00:09:09,410
faster and faster right that's often

00:09:07,370 --> 00:09:09,870
embody by dev right on the other hand we

00:09:09,410 --> 00:09:12,630
want to make sure

00:09:09,870 --> 00:09:14,580
sites are reliable stable secure right

00:09:12,630 --> 00:09:16,230
comply with all contractual obligations

00:09:14,580 --> 00:09:18,150
and regulatory requirements right that

00:09:16,230 --> 00:09:19,470
means making no changes ever right over

00:09:18,150 --> 00:09:21,060
my dead body would say the head of

00:09:19,470 --> 00:09:22,890
operations right which I've learned can

00:09:21,060 --> 00:09:25,380
quickly be arranged right because

00:09:22,890 --> 00:09:27,779
time-to-market always Trump's stability

00:09:25,380 --> 00:09:31,050
and security so why every company is

00:09:27,779 --> 00:09:32,670
because every company is an IT company

00:09:31,050 --> 00:09:33,570
it regards what business they think

00:09:32,670 --> 00:09:35,970
they're in right and i think these

00:09:33,570 --> 00:09:37,560
numbers sure why that's true ninety-five

00:09:35,970 --> 00:09:39,330
percent of all capital projects have a

00:09:37,560 --> 00:09:41,160
Nike component right you can't make any

00:09:39,330 --> 00:09:42,690
business decisions right that doesn't

00:09:41,160 --> 00:09:44,370
result in at least one I teach change

00:09:42,690 --> 00:09:46,380
and if you look at the Capitol spend you

00:09:44,370 --> 00:09:48,480
know where dollars being spent fifty

00:09:46,380 --> 00:09:50,910
percent of technol capital spending is

00:09:48,480 --> 00:09:52,200
technology related so any notion you

00:09:50,910 --> 00:09:53,850
know that IIT is not a core competency

00:09:52,200 --> 00:09:56,520
that dev and ops aren't a core

00:09:53,850 --> 00:09:59,040
competency is just a myth and I think

00:09:56,520 --> 00:10:00,450
the visceral kind of proof one of this

00:09:59,040 --> 00:10:02,160
is that whenever someone in the business

00:10:00,450 --> 00:10:04,230
says we're here here's where we need to

00:10:02,160 --> 00:10:05,850
go who's typically in the way you know

00:10:04,230 --> 00:10:07,200
it's us whether we're endeavor ops right

00:10:05,850 --> 00:10:09,260
somehow we've constipated the flow of

00:10:07,200 --> 00:10:10,890
work right and you know we're now

00:10:09,260 --> 00:10:13,020
jeopardizing or impeding what the

00:10:10,890 --> 00:10:14,700
business wants to do so ax 3 says you

00:10:13,020 --> 00:10:16,620
know they're really must be a better way

00:10:14,700 --> 00:10:19,290
right and so when historians go back and

00:10:16,620 --> 00:10:21,180
say you know when did DevOps now really

00:10:19,290 --> 00:10:23,580
come to be right I think historians will

00:10:21,180 --> 00:10:25,260
say it was here right it was the kind of

00:10:23,580 --> 00:10:26,220
famous all spawn Hammond presentation

00:10:25,260 --> 00:10:27,990
that would give it that was given at the

00:10:26,220 --> 00:10:31,680
velocity conference in 2009 one of my

00:10:27,990 --> 00:10:33,240
favorite conferences go to and so there

00:10:31,680 --> 00:10:34,770
is a seminal presentation that's not

00:10:33,240 --> 00:10:37,110
said you know we are routinely doing ten

00:10:34,770 --> 00:10:39,570
deploys a day you know at Flickr right

00:10:37,110 --> 00:10:41,190
men who are also on Hammond obviously

00:10:39,570 --> 00:10:43,740
you know he's the head of all spa was

00:10:41,190 --> 00:10:44,640
the head of operations for Flickr and

00:10:43,740 --> 00:10:46,650
Paul Hamid was director of engineering

00:10:44,640 --> 00:10:48,660
at Flickr and I think had I been there

00:10:46,650 --> 00:10:50,160
right now my first velocity conferences

00:10:48,660 --> 00:10:53,040
in 2010 I think here's how I would have

00:10:50,160 --> 00:10:54,810
reacted ten deploys a day that's immoral

00:10:53,040 --> 00:10:56,810
right that's irresponsible that's

00:10:54,810 --> 00:10:59,550
reckless you know that's you know that's

00:10:56,810 --> 00:11:01,589
absurd right and I think what I learned

00:10:59,550 --> 00:11:03,480
in the Alpha Hammond presentation is

00:11:01,589 --> 00:11:05,040
that that's absolutely not true in fact

00:11:03,480 --> 00:11:06,360
I think this is absolutely going to be

00:11:05,040 --> 00:11:07,950
the way we're all going to be working in

00:11:06,360 --> 00:11:09,720
10 years right and the ones that can't

00:11:07,950 --> 00:11:11,279
figure out you can't figure who figure

00:11:09,720 --> 00:11:13,110
out last will be the ones who actually

00:11:11,279 --> 00:11:14,790
don't lose in the marketplace so you

00:11:13,110 --> 00:11:16,050
know this whole notion of the devs being

00:11:14,790 --> 00:11:17,820
the embodiment of spotting the

00:11:16,050 --> 00:11:18,990
embodiment of dev and I just love right

00:11:17,820 --> 00:11:20,310
here he actually gets to sit on the

00:11:18,990 --> 00:11:22,260
bridge as Captain Kirk Captain Kirk

00:11:20,310 --> 00:11:23,660
wretchedly ask them for advice whereas

00:11:22,260 --> 00:11:25,670
we Ops guys were like Scotty we

00:11:23,660 --> 00:11:26,720
stuck in the basement right no one asks

00:11:25,670 --> 00:11:29,090
for our opinion until the warp engines

00:11:26,720 --> 00:11:30,530
are down right Scotty we need more feet

00:11:29,090 --> 00:11:32,510
now captain you can't do it dammit I

00:11:30,530 --> 00:11:33,830
need more sleep now right so you know

00:11:32,510 --> 00:11:35,750
what they were saying so we need

00:11:33,830 --> 00:11:37,430
boundary spanners we need obstacle who

00:11:35,750 --> 00:11:39,010
can think like developers developers who

00:11:37,430 --> 00:11:41,660
think like ops people by doing that

00:11:39,010 --> 00:11:43,340
doesn't just result in a torrid Summer

00:11:41,660 --> 00:11:45,350
of Love right you know they actually

00:11:43,340 --> 00:11:48,230
achieve things that you know the world

00:11:45,350 --> 00:11:49,850
had not seen before right and so you

00:11:48,230 --> 00:11:52,430
know 10 deploys I think what's

00:11:49,850 --> 00:11:54,260
interesting to me is in my journey of

00:11:52,430 --> 00:11:56,240
studying high performers what we found

00:11:54,260 --> 00:11:58,070
is that the best always get better right

00:11:56,240 --> 00:11:59,570
the best always accelerate away from the

00:11:58,070 --> 00:12:01,790
herd and I think that's absolutely

00:11:59,570 --> 00:12:04,730
happening you know in this space as well

00:12:01,790 --> 00:12:07,400
so back in 2009-10 deploys a day where

00:12:04,730 --> 00:12:09,500
it's considered fast right John Jenkins

00:12:07,400 --> 00:12:12,050
at amazon he went on record last year

00:12:09,500 --> 00:12:14,690
saying 10 deploys a day that's nothing

00:12:12,050 --> 00:12:16,160
right we you know we do one deploy every

00:12:14,690 --> 00:12:18,350
eleven point six seconds right so that's

00:12:16,160 --> 00:12:20,240
a mean number of deploys per day of

00:12:18,350 --> 00:12:22,250
around 23,000 deploys a day so that can

00:12:20,240 --> 00:12:23,810
be as large as an entire environment

00:12:22,250 --> 00:12:25,820
deployment it could be as small as a

00:12:23,810 --> 00:12:27,170
Content change yet you know it doesn't

00:12:25,820 --> 00:12:28,580
matter right this is a sort of pace that

00:12:27,170 --> 00:12:31,750
they can actually sustain without

00:12:28,580 --> 00:12:34,670
causing you know chaos and disruption

00:12:31,750 --> 00:12:35,870
perpetually downstream so I think what

00:12:34,670 --> 00:12:37,370
makes this so important to me is that

00:12:35,870 --> 00:12:39,170
the developments figure out how to break

00:12:37,370 --> 00:12:40,520
the core chronic conflict they figured

00:12:39,170 --> 00:12:42,770
out how you can actually get a fast flow

00:12:40,520 --> 00:12:44,180
plan work while maintaining reliability

00:12:42,770 --> 00:12:45,650
and stability and security in the

00:12:44,180 --> 00:12:46,670
production environment and I think one

00:12:45,650 --> 00:12:47,690
of the things that actually kind of irks

00:12:46,670 --> 00:12:49,490
me and I'll actually share some

00:12:47,690 --> 00:12:51,410
prescriptive steps of how everyone can

00:12:49,490 --> 00:12:53,330
replicate you know these practices and

00:12:51,410 --> 00:12:56,240
get the outcomes that they've gotten is

00:12:53,330 --> 00:12:57,740
that people will say we're not amazon

00:12:56,240 --> 00:12:59,570
we're not Google and that we're not

00:12:57,740 --> 00:13:01,340
pinterest you know we're you know we're

00:12:59,570 --> 00:13:02,600
a hundred year old company right i don't

00:13:01,340 --> 00:13:04,100
think that actually matters right

00:13:02,600 --> 00:13:07,430
wherever you have reliance on the IT

00:13:04,100 --> 00:13:08,960
value stream DevOps is applicable so

00:13:07,430 --> 00:13:10,670
it's not just you know the people who

00:13:08,960 --> 00:13:12,410
show up at the velocity conference its

00:13:10,670 --> 00:13:14,810
financial services like being one Mellon

00:13:12,410 --> 00:13:16,610
Bank of America World Bank paychecks is

00:13:14,810 --> 00:13:17,900
even in the retailers like the gap the

00:13:16,610 --> 00:13:19,250
gamestop which is an interesting

00:13:17,900 --> 00:13:20,390
category because the analysts always

00:13:19,250 --> 00:13:22,430
said they're typically the technology

00:13:20,390 --> 00:13:24,290
laggards it's even in the nonprofit's in

00:13:22,430 --> 00:13:25,700
the higher education any place where you

00:13:24,290 --> 00:13:27,800
see lots of cottage option you can see

00:13:25,700 --> 00:13:31,250
DevOps practices so what I'm going to do

00:13:27,800 --> 00:13:32,660
now is share with you that's what I

00:13:31,250 --> 00:13:36,230
believe are the three underpinning

00:13:32,660 --> 00:13:38,390
principles of DevOps and so of

00:13:36,230 --> 00:13:39,830
in this book to Phoenix project a novel

00:13:38,390 --> 00:13:42,740
about IT dev ops and helping your

00:13:39,830 --> 00:13:47,300
business win by the way i'll share with

00:13:42,740 --> 00:13:49,910
you that later oops great does the kind

00:13:47,300 --> 00:13:51,230
of a yoda mr. Miyagi like character who

00:13:49,910 --> 00:13:53,270
speaks in the language of the three ways

00:13:51,230 --> 00:13:54,950
well which our hero in the carrot in the

00:13:53,270 --> 00:13:57,080
novel has to sort of figure out kind of

00:13:54,950 --> 00:13:58,430
DevOps patterns and so his the three

00:13:57,080 --> 00:14:00,800
ways are the three underpinning

00:13:58,430 --> 00:14:02,660
principles of what you can derive all of

00:14:00,800 --> 00:14:04,730
the DevOps patterns from so the first

00:14:02,660 --> 00:14:06,470
way is all about the left to right full

00:14:04,730 --> 00:14:07,880
of work as you go from development into

00:14:06,470 --> 00:14:09,950
operation by the way how am i doing here

00:14:07,880 --> 00:14:13,790
so far is this interesting give me a

00:14:09,950 --> 00:14:15,050
thumbs up okay thanks so first way is

00:14:13,790 --> 00:14:19,250
all about left-to-right flow of work

00:14:15,050 --> 00:14:20,990
right and why Devin ops is because dev

00:14:19,250 --> 00:14:23,570
and ops are what's between the business

00:14:20,990 --> 00:14:24,680
and the customer right so the business

00:14:23,570 --> 00:14:25,970
says here's where we need to go they

00:14:24,680 --> 00:14:27,800
could turn into requirements that go

00:14:25,970 --> 00:14:29,420
into work into dev and only want to

00:14:27,800 --> 00:14:30,770
successfully transitions into service

00:14:29,420 --> 00:14:32,540
right have we actually delivered value

00:14:30,770 --> 00:14:34,370
to the customer so the underpinning

00:14:32,540 --> 00:14:35,900
principles right that underpin the first

00:14:34,370 --> 00:14:38,270
way our understanding the flow of work

00:14:35,900 --> 00:14:40,550
right seeing what that work should go

00:14:38,270 --> 00:14:41,840
from left to right and only from left to

00:14:40,550 --> 00:14:43,280
right right work should not go backwards

00:14:41,840 --> 00:14:44,450
it should not be bouncing back and forth

00:14:43,280 --> 00:14:46,040
between the ticketing systems in the

00:14:44,450 --> 00:14:47,570
defect tracking system right it should

00:14:46,040 --> 00:14:51,820
go left to right and it should go to

00:14:47,570 --> 00:14:54,410
left to right quickly right one of the

00:14:51,820 --> 00:14:56,420
tenets of any process improvement is the

00:14:54,410 --> 00:14:57,590
notion of increasing flow so in the

00:14:56,420 --> 00:14:59,390
DevOps community we talk about high

00:14:57,590 --> 00:15:01,220
deploy rates right I put a lien

00:14:59,390 --> 00:15:03,380
practitioner probably say it's not about

00:15:01,220 --> 00:15:04,460
deploy rates it's about lead time you

00:15:03,380 --> 00:15:06,740
know how long does it take to go from

00:15:04,460 --> 00:15:08,690
code commit to in production right so

00:15:06,740 --> 00:15:10,490
get hide leah deploy rates typically

00:15:08,690 --> 00:15:12,410
need you know i'll lead times measured

00:15:10,490 --> 00:15:15,230
in minutes or hours not months or

00:15:12,410 --> 00:15:16,910
quarters and you can only do this if you

00:15:15,230 --> 00:15:18,770
never unconscious unconsciously past

00:15:16,910 --> 00:15:20,800
defects on downstream in other words we

00:15:18,770 --> 00:15:23,360
have to design for the downstream step

00:15:20,800 --> 00:15:25,250
and we can only do that if we sort of

00:15:23,360 --> 00:15:26,480
keep the global goals in mind right as

00:15:25,250 --> 00:15:28,130
opposed to local goals or feature

00:15:26,480 --> 00:15:32,420
completion rates find fixed rates or

00:15:28,130 --> 00:15:33,650
availability and deming would call once

00:15:32,420 --> 00:15:35,270
you've achieve that Deming would say

00:15:33,650 --> 00:15:38,920
you've achieved profound understanding

00:15:35,270 --> 00:15:41,150
the system so the first pattern is

00:15:38,920 --> 00:15:43,070
actually is it almost a requirement for

00:15:41,150 --> 00:15:45,140
like how do you visualize work right and

00:15:43,070 --> 00:15:46,490
so manufacturing and lean this whole

00:15:45,140 --> 00:15:47,740
notion this whole movement I mahadji

00:15:46,490 --> 00:15:49,230
visualize work

00:15:47,740 --> 00:15:51,550
question becomes like how do you

00:15:49,230 --> 00:15:53,410
categorize it so that you can actually

00:15:51,550 --> 00:15:54,670
visualize it so Ben rockwood one of the

00:15:53,410 --> 00:15:56,590
leaders in the DevOps community after

00:15:54,670 --> 00:15:57,820
reading the Phoenix project he said one

00:15:56,590 --> 00:15:59,170
of the things that resonated with him

00:15:57,820 --> 00:16:00,820
was that annual business planning

00:15:59,170 --> 00:16:02,920
sessions for the ops people or ops

00:16:00,820 --> 00:16:04,060
engineering is maddening because they

00:16:02,920 --> 00:16:06,100
think I key operations is

00:16:04,060 --> 00:16:07,510
all-you-can-eat buffet and so one of the

00:16:06,100 --> 00:16:09,220
things that Tito Costas was that you

00:16:07,510 --> 00:16:11,200
have to break down all ops work into

00:16:09,220 --> 00:16:12,730
four categories there's one you know the

00:16:11,200 --> 00:16:13,690
obvious business projects so those are

00:16:12,730 --> 00:16:16,060
typically trapped in a project

00:16:13,690 --> 00:16:17,740
management office so typically map one

00:16:16,060 --> 00:16:19,360
to one with an application project and

00:16:17,740 --> 00:16:21,400
application development project but then

00:16:19,360 --> 00:16:23,110
there's all these other internal IT

00:16:21,400 --> 00:16:24,220
projects that they itemize into right

00:16:23,110 --> 00:16:26,140
it's like you know the puppet or chef

00:16:24,220 --> 00:16:29,080
automation the internal debt you know uh

00:16:26,140 --> 00:16:30,730
you know the automation process the the

00:16:29,080 --> 00:16:33,670
elevation preventive work right those

00:16:30,730 --> 00:16:35,890
are internal IT projects right and often

00:16:33,670 --> 00:16:37,120
both of these atomizes the changes which

00:16:35,890 --> 00:16:39,700
typically live in the track at the

00:16:37,120 --> 00:16:40,960
ticketing system and then unplanned work

00:16:39,700 --> 00:16:43,810
right this is sort of like the dark

00:16:40,960 --> 00:16:45,160
matter inside of IT operations because

00:16:43,810 --> 00:16:46,690
whenever you have high amounts of

00:16:45,160 --> 00:16:49,540
unplanned work they just place all the

00:16:46,690 --> 00:16:51,670
other types of work so I think I'm

00:16:49,540 --> 00:16:53,560
opening the sort of like a key takeaway

00:16:51,670 --> 00:16:55,720
would be you know look at you know your

00:16:53,560 --> 00:16:57,640
downstream peers operations and say you

00:16:55,720 --> 00:16:59,380
know just how much internal IT projects

00:16:57,640 --> 00:17:00,880
do they have right now we being fair

00:16:59,380 --> 00:17:03,010
about making sure that they have enough

00:17:00,880 --> 00:17:04,420
capacity and then secondly is you know

00:17:03,010 --> 00:17:07,300
how much unplanned work do they have

00:17:04,420 --> 00:17:09,730
typically I found that in the most I ops

00:17:07,300 --> 00:17:11,680
organization they have 25 35 fifty five

00:17:09,730 --> 00:17:13,600
percent of times going to unplanned work

00:17:11,680 --> 00:17:14,500
and they can go as high as 110 percent

00:17:13,600 --> 00:17:16,330
right if you're spending all your time

00:17:14,500 --> 00:17:18,160
firefighting right you're not getting

00:17:16,330 --> 00:17:19,390
any sort of plan work done right then in

00:17:18,160 --> 00:17:21,220
fact you having to you know even do

00:17:19,390 --> 00:17:24,340
overtime just to keep your head above

00:17:21,220 --> 00:17:25,600
water so that's the first pattern so at

00:17:24,340 --> 00:17:27,340
one question that I just love to do a

00:17:25,600 --> 00:17:28,750
little informal poll and that let me not

00:17:27,340 --> 00:17:30,730
asked us towards you but towards your

00:17:28,750 --> 00:17:33,250
friends right how long does it take your

00:17:30,730 --> 00:17:35,410
friends to go from code committed to

00:17:33,250 --> 00:17:37,390
code in production for your friends yeah

00:17:35,410 --> 00:17:40,170
um of it how many would you put it in

00:17:37,390 --> 00:17:47,080
the League of minutes raise your hand

00:17:40,170 --> 00:17:49,510
hours weeks months okay yeah this

00:17:47,080 --> 00:17:51,100
interesting right so and by the way I've

00:17:49,510 --> 00:17:53,170
been in situations where it has taken us

00:17:51,100 --> 00:17:54,520
months to go from code commit to

00:17:53,170 --> 00:17:56,230
successfully running in production right

00:17:54,520 --> 00:17:58,120
as so the questions you should be asking

00:17:56,230 --> 00:18:00,400
is like what is the ideal release rate

00:17:58,120 --> 00:18:02,470
or what this actually be deployed rate

00:18:00,400 --> 00:18:03,910
you know and so that's the gap and so

00:18:02,470 --> 00:18:05,200
you know one of the sort of things that

00:18:03,910 --> 00:18:07,810
you would want to inspect in terms of

00:18:05,200 --> 00:18:09,670
how to close that gap is for that amount

00:18:07,810 --> 00:18:12,910
of time that lead time how much of it is

00:18:09,670 --> 00:18:14,920
actually spent in Q versus in work

00:18:12,910 --> 00:18:16,180
meaning in q is like when is sitting in

00:18:14,920 --> 00:18:17,650
a ticketing system not being worked on

00:18:16,180 --> 00:18:20,140
or sitting in someone's inbox and have

00:18:17,650 --> 00:18:21,820
to go remind them can you do this or you

00:18:20,140 --> 00:18:24,340
know we're just waiting in line for a

00:18:21,820 --> 00:18:25,900
virtual environment versus runtime it's

00:18:24,340 --> 00:18:28,000
actually being run let the machine

00:18:25,900 --> 00:18:30,220
operator is actually working doing the

00:18:28,000 --> 00:18:32,350
operation right and typically you know

00:18:30,220 --> 00:18:34,180
the amount of Q time is probably like 95

00:18:32,350 --> 00:18:36,250
99 percent writing this is a way to

00:18:34,180 --> 00:18:37,660
reduce lead time where it's not only to

00:18:36,250 --> 00:18:40,120
increase automation but it's actually to

00:18:37,660 --> 00:18:42,010
tackle place in queue right and I you

00:18:40,120 --> 00:18:43,510
know Toyota plans actually to have a

00:18:42,010 --> 00:18:44,740
role called the water spider well

00:18:43,510 --> 00:18:46,450
that'll actually have a person

00:18:44,740 --> 00:18:47,740
transporting work from work center to

00:18:46,450 --> 00:18:49,180
work center and they don't leave until

00:18:47,740 --> 00:18:51,370
the work is done right sort of like a

00:18:49,180 --> 00:18:53,230
waiter but the saying it is so important

00:18:51,370 --> 00:18:54,520
to optimize to his lead time is actually

00:18:53,230 --> 00:18:57,790
worth it to have someone you know

00:18:54,520 --> 00:19:02,260
babysit to work okay so the second

00:18:57,790 --> 00:19:03,820
pattern comes from this this um how many

00:19:02,260 --> 00:19:05,770
people have been in a situation where

00:19:03,820 --> 00:19:07,450
you might be in a project meeting and

00:19:05,770 --> 00:19:09,610
say we have to deploy next week and then

00:19:07,450 --> 00:19:11,320
the ops guides freak out saying deploy

00:19:09,610 --> 00:19:13,420
what deploy that right that's not I'm

00:19:11,320 --> 00:19:15,070
designed to run let alone run in a

00:19:13,420 --> 00:19:16,810
production environment right for an ops

00:19:15,070 --> 00:19:18,030
person this feels very unfair right

00:19:16,810 --> 00:19:20,350
because it means that you know somehow

00:19:18,030 --> 00:19:23,170
we're taking shortcuts in order to get

00:19:20,350 --> 00:19:25,870
into production no one's been in that

00:19:23,170 --> 00:19:27,370
situation correct I've been in that

00:19:25,870 --> 00:19:28,960
situation and I think you know there are

00:19:27,370 --> 00:19:30,670
many reasons for this but we believe

00:19:28,960 --> 00:19:33,430
that one of the root causes of this is

00:19:30,670 --> 00:19:37,330
that for for not only the feeling of

00:19:33,430 --> 00:19:40,090
it's a trap is an you know the huge

00:19:37,330 --> 00:19:41,860
chaos and catastrophic deployments that

00:19:40,090 --> 00:19:43,990
can result from it is because that the

00:19:41,860 --> 00:19:45,790
first time the environment and the code

00:19:43,990 --> 00:19:48,160
is actually run together is during

00:19:45,790 --> 00:19:49,530
deployment time right so the mitigation

00:19:48,160 --> 00:19:52,060
for this the countermeasure is

00:19:49,530 --> 00:19:54,070
operations must be responsible for

00:19:52,060 --> 00:19:56,050
creating a one-click one-step

00:19:54,070 --> 00:19:57,370
environment creation process right so

00:19:56,050 --> 00:19:59,040
whether it's in puppet or chef or

00:19:57,370 --> 00:20:01,690
right-clicking something in the virtual

00:19:59,040 --> 00:20:04,600
management console right operations must

00:20:01,690 --> 00:20:06,130
deliver an environment that is resembles

00:20:04,600 --> 00:20:07,690
production and make it available to

00:20:06,130 --> 00:20:10,120
develop as early as possible in the

00:20:07,690 --> 00:20:12,790
project cycle right in fact right by

00:20:10,120 --> 00:20:14,440
doing this has many many positive

00:20:12,790 --> 00:20:16,480
benefits one is that suddenly

00:20:14,440 --> 00:20:18,460
dev can actually now develop in an

00:20:16,480 --> 00:20:19,570
environment that resembles production we

00:20:18,460 --> 00:20:20,889
can create an environment that's

00:20:19,570 --> 00:20:22,480
actually synchronize where we have dev

00:20:20,889 --> 00:20:23,950
test and production all running and

00:20:22,480 --> 00:20:26,889
synchronized long before the big deploy

00:20:23,950 --> 00:20:28,509
McGinn's and you know this actually

00:20:26,889 --> 00:20:29,889
increases the ability for dev to

00:20:28,509 --> 00:20:30,700
actually I'm on board other developers

00:20:29,889 --> 00:20:32,440
right because everything's in the

00:20:30,700 --> 00:20:36,370
environment as opposed to in our heads

00:20:32,440 --> 00:20:37,809
so there's one I think there's one sort

00:20:36,370 --> 00:20:39,789
of minor culture hack that we need to do

00:20:37,809 --> 00:20:42,340
to sort of really make this work which

00:20:39,789 --> 00:20:44,350
is you know in the agile policies right

00:20:42,340 --> 00:20:46,240
is a wonderful tenant of law you know

00:20:44,350 --> 00:20:48,129
saying that at the end of every sprint

00:20:46,240 --> 00:20:50,350
interval we have to have shippable code

00:20:48,129 --> 00:20:51,639
I think you know for anyone who's done

00:20:50,350 --> 00:20:53,470
I've been a part of a catastrophic

00:20:51,639 --> 00:20:55,149
release right we know that that's not

00:20:53,470 --> 00:20:56,919
sufficient we just need to modify it to

00:20:55,149 --> 00:20:58,659
say at the end of each sprint we must

00:20:56,919 --> 00:21:01,389
have a working we have must have working

00:20:58,659 --> 00:21:03,970
code and the environment does going to

00:21:01,389 --> 00:21:06,100
run in right so now at sprint zero or

00:21:03,970 --> 00:21:07,389
sprint one you know we actually have and

00:21:06,100 --> 00:21:09,549
we're actually trying to rehearse the

00:21:07,389 --> 00:21:12,429
deployment process how am i doing so far

00:21:09,549 --> 00:21:15,669
am I making sense so this can have

00:21:12,429 --> 00:21:18,039
radically great outcomes so in fact we

00:21:15,669 --> 00:21:19,480
recently worked with the puppet labs

00:21:18,039 --> 00:21:22,029
folks and we actually did a what we call

00:21:19,480 --> 00:21:23,320
the DevOps survey of practice and we

00:21:22,029 --> 00:21:25,029
actually captured some have 4,200

00:21:23,320 --> 00:21:26,320
completed surveys and one of the goals

00:21:25,029 --> 00:21:28,240
was actually to see if we could actually

00:21:26,320 --> 00:21:30,159
find the behaviors that predict

00:21:28,240 --> 00:21:32,860
performance we found that in the high

00:21:30,159 --> 00:21:34,779
performers right there almost two things

00:21:32,860 --> 00:21:36,519
that were universally present and they

00:21:34,779 --> 00:21:38,080
were universally absent in the medium

00:21:36,519 --> 00:21:39,399
and low performers and the two thing

00:21:38,080 --> 00:21:40,539
that the high performers were doing that

00:21:39,399 --> 00:21:42,809
none of the medium and low performers

00:21:40,539 --> 00:21:44,889
are doing were these two things they had

00:21:42,809 --> 00:21:46,960
infrastructure checked into version

00:21:44,889 --> 00:21:49,690
control right I dealing the same repo as

00:21:46,960 --> 00:21:51,340
the developers and then to they have

00:21:49,690 --> 00:21:52,870
some sort of automated way of creating

00:21:51,340 --> 00:21:54,340
the production environment right it's

00:21:52,870 --> 00:21:56,889
not just productive with prod testing

00:21:54,340 --> 00:21:58,570
death so those two things right at least

00:21:56,889 --> 00:22:00,909
in this early stage you can say has a

00:21:58,570 --> 00:22:03,009
very high predictive prediction it's a

00:22:00,909 --> 00:22:04,419
predictive capability to predict

00:22:03,009 --> 00:22:05,919
performance to correlates with out

00:22:04,419 --> 00:22:07,269
performance so I think here's some

00:22:05,919 --> 00:22:11,559
scientific evidence that says these two

00:22:07,269 --> 00:22:13,919
things actually have a mag they magnify

00:22:11,559 --> 00:22:16,059
performance

00:22:13,919 --> 00:22:18,789
so the outcomes are putting the first

00:22:16,059 --> 00:22:20,529
way into place include you know having a

00:22:18,789 --> 00:22:22,359
single repo ideally where all the

00:22:20,529 --> 00:22:24,789
production artifacts can be checked into

00:22:22,359 --> 00:22:26,830
and be traceable right ideally shared

00:22:24,789 --> 00:22:28,690
with development we now are starting to

00:22:26,830 --> 00:22:31,450
create determinism and the release

00:22:28,690 --> 00:22:32,769
process we now have a synchronized

00:22:31,450 --> 00:22:34,029
environment where dev test production

00:22:32,769 --> 00:22:36,940
environments all being created long

00:22:34,029 --> 00:22:38,139
before the big release we're now

00:22:36,940 --> 00:22:40,479
starting to integrate you know the

00:22:38,139 --> 00:22:42,549
environment the environment into the

00:22:40,479 --> 00:22:45,279
continuous deployment process and this

00:22:42,549 --> 00:22:46,749
is what decreases cycle time right one

00:22:45,279 --> 00:22:48,879
of the the formative moments for me

00:22:46,749 --> 00:22:52,059
happened in 2007 I was working with the

00:22:48,879 --> 00:22:54,009
CTO of Yahoo and active the city of AOL

00:22:52,059 --> 00:22:56,019
for this one knob and you know basically

00:22:54,009 --> 00:22:57,879
just by changing who's doing packaging

00:22:56,019 --> 00:23:00,429
right we were able to take the

00:22:57,879 --> 00:23:03,159
deployment times down from six hours for

00:23:00,429 --> 00:23:05,019
the AOL com home page 2 45 minutes right

00:23:03,159 --> 00:23:07,720
so instead of the developers putting all

00:23:05,019 --> 00:23:09,279
the war files into a network share right

00:23:07,720 --> 00:23:11,830
and having the ops guys do the packaging

00:23:09,279 --> 00:23:14,049
right having QA actually be responsible

00:23:11,830 --> 00:23:16,059
for packaging at the before the test

00:23:14,049 --> 00:23:18,279
cycle is initiated you know we

00:23:16,059 --> 00:23:19,929
drastically reduced the cycle time and

00:23:18,279 --> 00:23:21,369
it's for me why was that so important

00:23:19,929 --> 00:23:22,899
because this doesn't have to be a mega

00:23:21,369 --> 00:23:24,609
project right doing small things

00:23:22,899 --> 00:23:27,009
shifting responsibilities should

00:23:24,609 --> 00:23:29,710
actually have wildly make create wild

00:23:27,009 --> 00:23:31,029
improvements in performance and that's

00:23:29,710 --> 00:23:33,070
what results in faster cadence and

00:23:31,029 --> 00:23:34,419
shorter lead times any questions

00:23:33,070 --> 00:23:39,099
comments or concerns before we go to the

00:23:34,419 --> 00:23:40,629
second way thumbs up okay thanks so the

00:23:39,099 --> 00:23:42,700
first way is all about the left/right

00:23:40,629 --> 00:23:44,409
flow of work the second way is all about

00:23:42,700 --> 00:23:46,659
the reciprocal right how do we take the

00:23:44,409 --> 00:23:48,279
learnings that the at the very end of

00:23:46,659 --> 00:23:49,749
the line right in production in infosec

00:23:48,279 --> 00:23:50,889
and feed them to the very beginning line

00:23:49,749 --> 00:23:53,049
so we can actually prevent bad things

00:23:50,889 --> 00:23:54,669
from happening again right or ideally

00:23:53,049 --> 00:23:57,879
you know enable quicker detection and

00:23:54,669 --> 00:23:59,679
recovery right so the principles or or

00:23:57,879 --> 00:24:01,599
even the platitudes that underpin the

00:23:59,679 --> 00:24:03,009
second way our understanding and

00:24:01,599 --> 00:24:06,159
responding to the needs of all customers

00:24:03,009 --> 00:24:07,450
I think most communities are very very

00:24:06,159 --> 00:24:09,820
good about saying you know we know who

00:24:07,450 --> 00:24:11,679
the external customer is but in the lean

00:24:09,820 --> 00:24:13,210
community there's actually a thing it

00:24:11,679 --> 00:24:14,739
says the more important customer the

00:24:13,210 --> 00:24:16,539
most important customer for anyone is

00:24:14,739 --> 00:24:18,369
actually the internal customer as

00:24:16,539 --> 00:24:20,229
defined by the next downstream work

00:24:18,369 --> 00:24:22,299
center right we almost have to do our

00:24:20,229 --> 00:24:24,429
work in a way you know that optimizes

00:24:22,299 --> 00:24:25,210
for them and I think the huge sort of

00:24:24,429 --> 00:24:26,370
breaks through that happens the

00:24:25,210 --> 00:24:28,559
manufacturing movement wasn't

00:24:26,370 --> 00:24:30,090
called design for a design for

00:24:28,559 --> 00:24:32,100
manufacturing where the you know product

00:24:30,090 --> 00:24:33,840
engineer said our customers aren't the

00:24:32,100 --> 00:24:35,580
people buying Toyota's right is actually

00:24:33,840 --> 00:24:37,110
the people on the on the plant line and

00:24:35,580 --> 00:24:38,520
so let's make it impossible for them to

00:24:37,110 --> 00:24:40,980
over tighten screws put puts on

00:24:38,520 --> 00:24:42,830
backwards right and that not only

00:24:40,980 --> 00:24:46,620
improved quality but also improved up

00:24:42,830 --> 00:24:47,730
lead time and we do cycle times so we

00:24:46,620 --> 00:24:49,470
can only do that if we shorten and

00:24:47,730 --> 00:24:50,520
amplify all feedback loops that's one of

00:24:49,470 --> 00:24:52,980
the things that underpinned almost any

00:24:50,520 --> 00:24:54,210
process improvement methodology and I

00:24:52,980 --> 00:24:56,040
think the best embodiment this is the

00:24:54,210 --> 00:24:58,800
and on board the Toyota and on board

00:24:56,040 --> 00:25:00,360
we're basically on top of every work

00:24:58,800 --> 00:25:02,640
center in a Toyota plant is a chord

00:25:00,360 --> 00:25:04,500
where if something goes wrong if they

00:25:02,640 --> 00:25:06,360
get a part that is defective or even if

00:25:04,500 --> 00:25:07,830
something some operation takes two

00:25:06,360 --> 00:25:09,990
minutes and 10 seconds instead of the

00:25:07,830 --> 00:25:11,280
specified one minute 45 seconds they're

00:25:09,990 --> 00:25:12,390
expected to pull the line right and

00:25:11,280 --> 00:25:13,890
actually stops the entire production

00:25:12,390 --> 00:25:16,020
line truck stop coming out the other end

00:25:13,890 --> 00:25:18,300
can anyone guess how many times the

00:25:16,020 --> 00:25:19,890
Toyota andon cord is pulled in a typical

00:25:18,300 --> 00:25:25,020
Toyota plant before the magnitude

00:25:19,890 --> 00:25:31,080
guesses mr. discipline that what what a

00:25:25,020 --> 00:25:32,130
thousand oh and day twice yeah I'd like

00:25:31,080 --> 00:25:34,290
your first answer better I'll just do it

00:25:32,130 --> 00:25:36,210
so I thought at first the answer was a

00:25:34,290 --> 00:25:38,880
hundred right I was like wow that's

00:25:36,210 --> 00:25:40,230
amazing a hundred times in a day it

00:25:38,880 --> 00:25:41,970
turns out which was pretty astounding

00:25:40,230 --> 00:25:43,290
then someone else said well actually

00:25:41,970 --> 00:25:45,210
pointed me to an article that said in

00:25:43,290 --> 00:25:46,650
the Tennessee plant it's actually pulled

00:25:45,210 --> 00:25:50,130
something like thirty three hundred

00:25:46,650 --> 00:25:52,110
times a day right so one of the question

00:25:50,130 --> 00:25:53,370
is why why would they do that right why

00:25:52,110 --> 00:25:55,830
would they disrupt production like that

00:25:53,370 --> 00:25:58,350
and I think the reason is that for them

00:25:55,830 --> 00:26:00,600
they know that it's better to stop the

00:25:58,350 --> 00:26:02,910
line fix the problem so whatever have

00:26:00,600 --> 00:26:05,640
everybody swarmed the problem than it is

00:26:02,910 --> 00:26:08,309
to have the defect go downstream and let

00:26:05,640 --> 00:26:09,720
technol debt accrue right so I one of

00:26:08,309 --> 00:26:11,460
the questions I have for you right is as

00:26:09,720 --> 00:26:12,690
you're doing your daily work right how

00:26:11,460 --> 00:26:14,309
many times have you seen something

00:26:12,690 --> 00:26:15,809
that's not quite right that might be

00:26:14,309 --> 00:26:17,130
worth pulling the end on cord for right

00:26:15,809 --> 00:26:18,630
and a Toyota plant that would be

00:26:17,130 --> 00:26:20,100
something like 3,000 times a day right

00:26:18,630 --> 00:26:21,660
not all of them stop the line money

00:26:20,100 --> 00:26:23,309
it'll just get escalated because that's

00:26:21,660 --> 00:26:25,350
that good and so by the way that could

00:26:23,309 --> 00:26:27,450
be branches you know someone's checking

00:26:25,350 --> 00:26:29,309
in code that breaks the build checking

00:26:27,450 --> 00:26:31,050
in code that breaks the unit test some

00:26:29,309 --> 00:26:33,090
breaking the deployment pipeline right

00:26:31,050 --> 00:26:35,610
all of these things warrant stopping the

00:26:33,090 --> 00:26:38,580
line now because this is what enables us

00:26:35,610 --> 00:26:39,990
to create quality and source and by even

00:26:38,580 --> 00:26:41,730
solving these problems

00:26:39,990 --> 00:26:43,380
great knowledge and capabilities where

00:26:41,730 --> 00:26:45,030
we need them that's all about the second

00:26:43,380 --> 00:26:46,260
way so I just wanted the best

00:26:45,030 --> 00:26:47,429
embodiments of the second way it came

00:26:46,260 --> 00:26:48,690
from Patrick like body he was the

00:26:47,429 --> 00:26:49,980
founder of a company called browser mob

00:26:48,690 --> 00:26:51,660
it was one of the first sort of

00:26:49,980 --> 00:26:54,480
cloud-based load testing tools he said

00:26:51,660 --> 00:26:56,970
we found that when we woke developers up

00:26:54,480 --> 00:26:59,790
at 2am defects got fixed faster than

00:26:56,970 --> 00:27:02,010
ever right i love that right because it

00:26:59,790 --> 00:27:03,150
says and i'm not fair i'm not because

00:27:02,010 --> 00:27:05,760
not because i'm a fan of waking people

00:27:03,150 --> 00:27:07,080
up at 2am it just says that people now

00:27:05,760 --> 00:27:09,030
have to live with the downstream

00:27:07,080 --> 00:27:10,860
consequences of decisions we make right

00:27:09,030 --> 00:27:12,540
so this is the way to share the pain and

00:27:10,860 --> 00:27:13,980
amplifying shorten the feedback loops

00:27:12,540 --> 00:27:16,140
and this is absolutely i think

00:27:13,980 --> 00:27:18,870
consistent with you know 30 years of

00:27:16,140 --> 00:27:20,550
research into manufacturing processes we

00:27:18,870 --> 00:27:22,559
have to create those feedback loops and

00:27:20,550 --> 00:27:25,650
i think one of the best examples of this

00:27:22,559 --> 00:27:27,210
is uh is came from google this is a

00:27:25,650 --> 00:27:30,809
picture of tom women shelley talking to

00:27:27,210 --> 00:27:33,090
the lisa group in New York and he said

00:27:30,809 --> 00:27:34,620
at Google they have this policy where

00:27:33,090 --> 00:27:38,340
devs must initially maintain their own

00:27:34,620 --> 00:27:39,750
code for six months right and yeah so

00:27:38,340 --> 00:27:41,400
they actually have this thing called the

00:27:39,750 --> 00:27:43,500
handoffs readiness review and I think

00:27:41,400 --> 00:27:44,820
the question is why so I think the

00:27:43,500 --> 00:27:47,580
reason is that Google one of the

00:27:44,820 --> 00:27:49,320
scarcest kind of a talent that they have

00:27:47,580 --> 00:27:51,179
are the sre core the site reliability

00:27:49,320 --> 00:27:52,950
engineers right so these are like your

00:27:51,179 --> 00:27:54,660
uber sis admins and the head of every

00:27:52,950 --> 00:27:56,520
major properties they have a core of

00:27:54,660 --> 00:27:58,170
these sres and it's some of the hardest

00:27:56,520 --> 00:28:02,610
people define and there's they're saying

00:27:58,170 --> 00:28:04,950
we can't afford to squander SR recycles

00:28:02,610 --> 00:28:06,179
on crappy code right so they have this

00:28:04,950 --> 00:28:08,220
thing called a handoff readiness review

00:28:06,179 --> 00:28:09,780
process where every not only do

00:28:08,220 --> 00:28:11,730
developers have to manage their own code

00:28:09,780 --> 00:28:13,620
for six months for them to actually be

00:28:11,730 --> 00:28:14,520
eligible for the HR are but then they

00:28:13,620 --> 00:28:16,440
have to go through the sort of like a

00:28:14,520 --> 00:28:18,240
review of like what's their pager alert

00:28:16,440 --> 00:28:20,220
what was their monitoring profile was a

00:28:18,240 --> 00:28:21,750
system architecture show me your release

00:28:20,220 --> 00:28:23,790
and deployment process show me your

00:28:21,750 --> 00:28:25,980
defect counts and I love this vague one

00:28:23,790 --> 00:28:28,260
show me your production hygiene right in

00:28:25,980 --> 00:28:30,090
other words like are you fit to even be

00:28:28,260 --> 00:28:32,010
you know cohabitating with someone else

00:28:30,090 --> 00:28:34,020
right before you pass that you know we

00:28:32,010 --> 00:28:35,160
can't afford to have this code be in

00:28:34,020 --> 00:28:37,350
production and be managed by someone

00:28:35,160 --> 00:28:39,090
else and so those what happens if

00:28:37,350 --> 00:28:40,500
something goes into production and then

00:28:39,090 --> 00:28:42,270
gets fragile right because those things

00:28:40,500 --> 00:28:43,980
do happen the downward spiral even

00:28:42,270 --> 00:28:46,800
happens at Google they have something

00:28:43,980 --> 00:28:48,600
called a hand back right whereas like

00:28:46,800 --> 00:28:50,250
even if you passed HR are right you hit

00:28:48,600 --> 00:28:51,690
a certain threshold basically it goes

00:28:50,250 --> 00:28:53,520
back to dill or saying thank you but no

00:28:51,690 --> 00:28:54,070
thanks come back when you're ready i'm

00:28:53,520 --> 00:28:55,710
not quite sure

00:28:54,070 --> 00:28:58,600
they actually have to do a six-month

00:28:55,710 --> 00:29:00,070
period of self managing but you know I

00:28:58,600 --> 00:29:01,690
take the important part is the hand back

00:29:00,070 --> 00:29:04,420
so I think it's a great way to sort of

00:29:01,690 --> 00:29:05,710
keep both sides accountable ops it's a

00:29:04,420 --> 00:29:11,050
great way for ops and dev to hold each

00:29:05,710 --> 00:29:12,370
other accountable so the outcomes of the

00:29:11,050 --> 00:29:14,290
second way when we put patterns like

00:29:12,370 --> 00:29:15,610
this into place right is that defects

00:29:14,290 --> 00:29:18,460
things like security issues to fix

00:29:15,610 --> 00:29:19,990
faster than ever right we're now once we

00:29:18,460 --> 00:29:21,160
sort of create that process we don't you

00:29:19,990 --> 00:29:22,540
know we can actually replicate that for

00:29:21,160 --> 00:29:25,300
the other value stream for the other

00:29:22,540 --> 00:29:27,190
projects and by the way one of the

00:29:25,300 --> 00:29:29,260
things I love about agile the notion of

00:29:27,190 --> 00:29:31,060
user stories right because once you have

00:29:29,260 --> 00:29:32,530
a culture that has a habit of generating

00:29:31,060 --> 00:29:34,210
user stories we can create something

00:29:32,530 --> 00:29:35,980
adjacent to that called the ops user

00:29:34,210 --> 00:29:37,180
stories right actually saying in order

00:29:35,980 --> 00:29:38,740
to get the production here's what ops

00:29:37,180 --> 00:29:39,970
needs to do so in order to get a highly

00:29:38,740 --> 00:29:41,650
available environment requiring a

00:29:39,970 --> 00:29:43,720
clustered server we can say oh here's

00:29:41,650 --> 00:29:45,580
the story deck that you know that

00:29:43,720 --> 00:29:47,050
represents that sort of work and here's

00:29:45,580 --> 00:29:48,580
the resources we need here's how long it

00:29:47,050 --> 00:29:51,250
takes right and we can actually now use

00:29:48,580 --> 00:29:52,030
that to help serve budget our time to

00:29:51,250 --> 00:29:53,380
actually sort of taking the

00:29:52,030 --> 00:29:56,050
consideration everything is required to

00:29:53,380 --> 00:29:57,940
get to production and when we do stuff

00:29:56,050 --> 00:29:59,140
like this all groups are communicating

00:29:57,940 --> 00:30:00,780
coordinating better but more importantly

00:29:59,140 --> 00:30:03,730
everyone's getting more work done

00:30:00,780 --> 00:30:08,790
comments questions concerns before we do

00:30:03,730 --> 00:30:08,790
the third way okay thank you yes

00:30:10,809 --> 00:30:23,110
oh no just weak people the 2 a.m. no no

00:30:14,559 --> 00:30:24,429
kidding you know uh later in the day

00:30:23,110 --> 00:30:32,279
you're gonna hear a whole session on

00:30:24,429 --> 00:30:34,210
this um from is it to charge hi guys

00:30:32,279 --> 00:30:37,120
you're gonna hear a whole talk on this

00:30:34,210 --> 00:30:39,370
and I think it's not it doesn't create

00:30:37,120 --> 00:30:42,549
animosity I think it creates a notion of

00:30:39,370 --> 00:30:44,889
a shared goal right the goal is not to

00:30:42,549 --> 00:30:46,059
just complete the feature but it's not

00:30:44,889 --> 00:30:47,409
actually working until it's working

00:30:46,059 --> 00:30:49,809
reliably in production where it doesn't

00:30:47,409 --> 00:30:52,539
work wake people up at 2am and so I

00:30:49,809 --> 00:30:55,629
don't see in my experience it actually

00:30:52,539 --> 00:30:57,820
is the glue that sort of makes

00:30:55,629 --> 00:30:59,110
operations in dev share the same values

00:30:57,820 --> 00:31:01,779
because they share the same goal does

00:30:59,110 --> 00:31:02,919
answer your question and can anyone look

00:31:01,779 --> 00:31:05,080
at the schedule and say who's going to

00:31:02,919 --> 00:31:08,039
be talking about this later today I

00:31:05,080 --> 00:31:08,039
can't read my writing

00:31:09,990 --> 00:31:18,720
yes three talks from now yes I'm looking

00:31:14,400 --> 00:31:20,580
forward to that any other questions okay

00:31:18,720 --> 00:31:22,679
the third okay so the first way is all

00:31:20,580 --> 00:31:24,570
about the left-to-right flow of work the

00:31:22,679 --> 00:31:26,160
second way was reciprocals our work from

00:31:24,570 --> 00:31:28,830
the feedback loop from right to left and

00:31:26,160 --> 00:31:30,540
a third way I think is actually upon

00:31:28,830 --> 00:31:33,320
some reflection is actually in many ways

00:31:30,540 --> 00:31:37,590
the most important so the third way is

00:31:33,320 --> 00:31:40,890
creating culture that allows continual

00:31:37,590 --> 00:31:44,040
experimentation and learning so it means

00:31:40,890 --> 00:31:46,470
I think two things one is is creating

00:31:44,040 --> 00:31:49,230
culture that says it is expected that

00:31:46,470 --> 00:31:51,330
everyone in the organization take risks

00:31:49,230 --> 00:31:53,640
do experiments and learn from the

00:31:51,330 --> 00:31:56,160
successes and failures right but also

00:31:53,640 --> 00:31:59,030
says that repetition is a prerequisite

00:31:56,160 --> 00:32:01,500
to mastery right so why do we need this

00:31:59,030 --> 00:32:02,850
we need the first because we need a

00:32:01,500 --> 00:32:04,470
culture that's comfortable with breaking

00:32:02,850 --> 00:32:05,520
the rules right for those of you who

00:32:04,470 --> 00:32:06,960
have spent any time in large

00:32:05,520 --> 00:32:08,640
organizations right there may be a

00:32:06,960 --> 00:32:11,130
change management process that we've

00:32:08,640 --> 00:32:13,260
done things the same way for 25 years

00:32:11,130 --> 00:32:15,240
right how do we say you know if you

00:32:13,260 --> 00:32:17,300
think there's a better way try it right

00:32:15,240 --> 00:32:20,010
now how do we say that that's not only

00:32:17,300 --> 00:32:21,900
tolerated but that's expected but the

00:32:20,010 --> 00:32:23,490
second part is so that's what allows us

00:32:21,900 --> 00:32:25,860
to push into the danger zone and get

00:32:23,490 --> 00:32:27,380
improvements but the second part says

00:32:25,860 --> 00:32:29,460
that we have to understand that

00:32:27,380 --> 00:32:31,230
repetition is the prerequisite to

00:32:29,460 --> 00:32:32,460
mastery right there's a whole school of

00:32:31,230 --> 00:32:34,170
thought now that says regardless of

00:32:32,460 --> 00:32:36,210
whether we're talking about sports

00:32:34,170 --> 00:32:38,820
training learning to play a musical

00:32:36,210 --> 00:32:42,000
instrument training and special forces

00:32:38,820 --> 00:32:44,309
in the military that only by repetition

00:32:42,000 --> 00:32:45,390
do we create habits and those habits

00:32:44,309 --> 00:32:47,040
that change the outcome so it's better

00:32:45,390 --> 00:32:49,320
to practice 15 minutes a day every day

00:32:47,040 --> 00:32:54,420
then it is a practice three hours once a

00:32:49,320 --> 00:32:57,630
week right and so you know think about

00:32:54,420 --> 00:32:58,800
like the habits that we have when the

00:32:57,630 --> 00:33:00,090
break that when we have the test

00:32:58,800 --> 00:33:01,650
pipeline break or the continual

00:33:00,090 --> 00:33:03,000
deployment pipeline break right how good

00:33:01,650 --> 00:33:04,170
are we are fixing those and what we want

00:33:03,000 --> 00:33:05,400
to do is do painful things more

00:33:04,170 --> 00:33:07,679
frequently in fact in fact that's myself

00:33:05,400 --> 00:33:08,910
let's slide so one of my favorite quotes

00:33:07,679 --> 00:33:10,830
and body this came from Adrienne

00:33:08,910 --> 00:33:13,530
cockcroft the cloud architect of Netflix

00:33:10,830 --> 00:33:15,480
he said we it is our goal to do painful

00:33:13,530 --> 00:33:17,160
things more frequently so that we can

00:33:15,480 --> 00:33:18,300
make them less painful and even though

00:33:17,160 --> 00:33:19,950
that we make it a pain in the ass for

00:33:18,300 --> 00:33:21,660
developers right they actually thanked

00:33:19,950 --> 00:33:23,130
us because they know we're going to make

00:33:21,660 --> 00:33:25,140
rollouts go more smoothly in the future

00:33:23,130 --> 00:33:27,420
I think one of the best examples of this

00:33:25,140 --> 00:33:31,170
right you know came on april eleventh

00:33:27,420 --> 00:33:33,960
2011 actually April 22nd 2011 when the

00:33:31,170 --> 00:33:35,730
first big amazon ec2 failure right and

00:33:33,960 --> 00:33:36,840
so friend of mine named Josh Corman he

00:33:35,730 --> 00:33:38,340
was actually giving a talk at source

00:33:36,840 --> 00:33:39,420
Boston and like in the middle of his

00:33:38,340 --> 00:33:41,040
presentation everyone looked at the

00:33:39,420 --> 00:33:43,650
phones and then left right and the

00:33:41,040 --> 00:33:45,690
reason is this right like everyone who

00:33:43,650 --> 00:33:47,640
had any so reliance on Amazon you know I

00:33:45,690 --> 00:33:49,320
had a critical service go down except

00:33:47,640 --> 00:33:51,330
for one organization right and that was

00:33:49,320 --> 00:33:52,950
Netflix right and so everybody right

00:33:51,330 --> 00:33:54,930
everybody was asking what is it that

00:33:52,950 --> 00:33:56,880
Netflix is doing that results in such a

00:33:54,930 --> 00:33:58,590
different outcome and they wrote the

00:33:56,880 --> 00:34:02,100
seminal blog post entry like many of

00:33:58,590 --> 00:34:03,960
their blog posts are saying I think I

00:34:02,100 --> 00:34:06,000
said two things that uh you know knocked

00:34:03,960 --> 00:34:07,650
me out of my chair once that said we

00:34:06,000 --> 00:34:09,750
made a deliberate design decision that

00:34:07,650 --> 00:34:11,820
said we could never rely on amazon for

00:34:09,750 --> 00:34:13,740
availability there will never be there

00:34:11,820 --> 00:34:15,629
when they we need the most right and so

00:34:13,740 --> 00:34:17,580
the second engineering tenant that came

00:34:15,629 --> 00:34:20,040
out of that was that in order to survive

00:34:17,580 --> 00:34:21,540
failure in order to survive failure we

00:34:20,040 --> 00:34:23,240
made a decision that we had to fail all

00:34:21,540 --> 00:34:26,159
the time and that's when they said

00:34:23,240 --> 00:34:27,179
describe chaos monkey right so you know

00:34:26,159 --> 00:34:30,060
for those of you who haven't heard of

00:34:27,179 --> 00:34:31,590
chaos monkey it is this incredible you

00:34:30,060 --> 00:34:33,330
know audacious thing they do where they

00:34:31,590 --> 00:34:34,860
have on every production instance in the

00:34:33,330 --> 00:34:37,050
cloud they have something called chaos

00:34:34,860 --> 00:34:38,970
monkey that randomly kills processes and

00:34:37,050 --> 00:34:41,370
the entire compute instances in

00:34:38,970 --> 00:34:43,470
production right there they are

00:34:41,370 --> 00:34:44,700
deliberately injecting fault into the

00:34:43,470 --> 00:34:46,320
production environment right you can

00:34:44,700 --> 00:34:48,090
imagine right you know once you do that

00:34:46,320 --> 00:34:50,639
a couple of times right suddenly you

00:34:48,090 --> 00:34:52,470
have really great reliable resilient

00:34:50,639 --> 00:34:53,370
operations and code right and so the

00:34:52,470 --> 00:34:54,629
thing that they don't actually talk

00:34:53,370 --> 00:34:56,340
about which i think is actually probably

00:34:54,629 --> 00:34:57,720
pretty important is that not only do you

00:34:56,340 --> 00:35:00,510
have chaos monkey running in production

00:34:57,720 --> 00:35:02,970
but they also run it and test rediff at

00:35:00,510 --> 00:35:06,330
a far higher rate and in the in the code

00:35:02,970 --> 00:35:08,550
that development is using right so i

00:35:06,330 --> 00:35:10,170
think the lesson here is whenever you

00:35:08,550 --> 00:35:11,520
can break things in production you

00:35:10,170 --> 00:35:13,590
should whenever you can serve test

00:35:11,520 --> 00:35:15,660
assertions right do it it's not just for

00:35:13,590 --> 00:35:17,640
code and the logic passing code right is

00:35:15,660 --> 00:35:19,440
also for enforcing consistency so

00:35:17,640 --> 00:35:20,910
asserts that you should be thinking

00:35:19,440 --> 00:35:22,620
about right under there's a great talk

00:35:20,910 --> 00:35:24,630
on this later about test driven design

00:35:22,620 --> 00:35:27,060
for infrastructures code man what a

00:35:24,630 --> 00:35:29,460
great program Mike thumbs up I'll be

00:35:27,060 --> 00:35:30,810
here all day is any place where you can

00:35:29,460 --> 00:35:33,120
check for consistency of code

00:35:30,810 --> 00:35:34,260
environments and configurations do it

00:35:33,120 --> 00:35:35,970
right because if you can catch it before

00:35:34,260 --> 00:35:36,570
it goes into production as far better

00:35:35,970 --> 00:35:38,040
than catching

00:35:36,570 --> 00:35:40,530
production right in Basel also tested

00:35:38,040 --> 00:35:41,850
production as well and any place where

00:35:40,530 --> 00:35:43,470
you can actually do things like static

00:35:41,850 --> 00:35:44,910
code analysis do it as early as you can

00:35:43,470 --> 00:35:47,520
in the Deb process instead of waiting

00:35:44,910 --> 00:35:48,960
till quote the test cycle so I think

00:35:47,520 --> 00:35:51,120
there's one prerequisite that we need to

00:35:48,960 --> 00:35:53,400
talk about because doing chaos monkey

00:35:51,120 --> 00:35:56,280
without this just causes chaos and this

00:35:53,400 --> 00:35:57,750
tenant came from Marty Kagan so he is

00:35:56,280 --> 00:35:59,850
actually a hero in the product

00:35:57,750 --> 00:36:02,340
management realm you know his claim to

00:35:59,850 --> 00:36:04,710
fame well actually what he says to

00:36:02,340 --> 00:36:06,360
everybody is that everyone must reserve

00:36:04,710 --> 00:36:08,520
twenty percent of their capacity whether

00:36:06,360 --> 00:36:10,290
it's dev or offs for the retirement of

00:36:08,520 --> 00:36:11,700
technical debt right twenty percent of

00:36:10,290 --> 00:36:15,660
all cycles must be taken off the table

00:36:11,700 --> 00:36:17,370
never to be used for features for the

00:36:15,660 --> 00:36:19,920
non-functional requirements so why would

00:36:17,370 --> 00:36:21,630
she people believe him because he

00:36:19,920 --> 00:36:23,850
inherited the ebay product management

00:36:21,630 --> 00:36:27,030
organization in 2002 right and he said

00:36:23,850 --> 00:36:29,010
how good do you think he said for people

00:36:27,030 --> 00:36:30,960
who don't reserve twenty percent of the

00:36:29,010 --> 00:36:33,030
time to reach our technical debt you are

00:36:30,960 --> 00:36:34,500
doomed to spend a hundred percent of

00:36:33,030 --> 00:36:36,510
your time paying down tentacle dead

00:36:34,500 --> 00:36:38,130
right and as proof points of that he

00:36:36,510 --> 00:36:39,780
said imagine how it feels as head of

00:36:38,130 --> 00:36:41,310
product management to say that you have

00:36:39,780 --> 00:36:44,130
not shipped a new feature in a year and

00:36:41,310 --> 00:36:46,470
a half right so you know pay debt down

00:36:44,130 --> 00:36:48,450
now or pay it forever going forward

00:36:46,470 --> 00:36:50,160
right and so this is how you can go from

00:36:48,450 --> 00:36:52,260
an organization that goes from here to

00:36:50,160 --> 00:36:53,460
here right if you can generate the

00:36:52,260 --> 00:36:54,750
collective will to say we're gonna take

00:36:53,460 --> 00:36:57,060
twenty percent of my cycles pay down

00:36:54,750 --> 00:36:58,410
technical debt and you know do the hard

00:36:57,060 --> 00:37:00,300
way architectural problems make things

00:36:58,410 --> 00:37:02,220
more loosely coupled right make things

00:37:00,300 --> 00:37:04,320
less fragile that's how you get to here

00:37:02,220 --> 00:37:06,000
right where things become less fragile

00:37:04,320 --> 00:37:07,650
now we can actually make things easier

00:37:06,000 --> 00:37:09,090
to deploy this is how you break the

00:37:07,650 --> 00:37:11,160
downward spiral right this is how he

00:37:09,090 --> 00:37:13,380
actually fun and protect your DevOps

00:37:11,160 --> 00:37:15,150
initiative there's actually one last

00:37:13,380 --> 00:37:17,550
benefit that I think now we can expose

00:37:15,150 --> 00:37:19,110
to the businesses at that we serve which

00:37:17,550 --> 00:37:21,930
is that it's not just an innovation

00:37:19,110 --> 00:37:23,310
culture inside of our the DevOps value

00:37:21,930 --> 00:37:24,480
stream you know we actually want it to

00:37:23,310 --> 00:37:27,090
happen you know in the product

00:37:24,480 --> 00:37:29,220
management realm as well so those quote

00:37:27,090 --> 00:37:30,480
the Scott cook he's the founder of into

00:37:29,220 --> 00:37:32,490
it and he's been pushing this thing for

00:37:30,480 --> 00:37:34,260
like six years called the rampant

00:37:32,490 --> 00:37:38,220
innovation culture and when I saw this I

00:37:34,260 --> 00:37:41,190
I freaked out he said by installing a

00:37:38,220 --> 00:37:43,620
rampant innovation culture for our turbo

00:37:41,190 --> 00:37:45,690
tax property they did a hundred

00:37:43,620 --> 00:37:48,120
sixty-five changes in the middle of cat

00:37:45,690 --> 00:37:49,860
peak tax filing season

00:37:48,120 --> 00:37:51,510
so I mean I'm not sure if you find that

00:37:49,860 --> 00:37:52,830
audacious but I came from an environment

00:37:51,510 --> 00:37:54,630
where you know for our customers that

00:37:52,830 --> 00:37:57,120
were retailers they wouldn't touch

00:37:54,630 --> 00:37:58,350
production from October 12 january

00:37:57,120 --> 00:38:00,150
thirtieth right because they were so

00:37:58,350 --> 00:38:03,420
afraid of a change now that might impact

00:38:00,150 --> 00:38:05,520
production and so this lunatic made 165

00:38:03,420 --> 00:38:07,290
changes during the peak tax filing

00:38:05,520 --> 00:38:09,180
season so why would they do that that's

00:38:07,290 --> 00:38:12,480
the reason that just well one they had

00:38:09,180 --> 00:38:14,130
great operations to is this by doing

00:38:12,480 --> 00:38:15,930
this they were able to increase the

00:38:14,130 --> 00:38:18,390
conversion of their website by fifty

00:38:15,930 --> 00:38:19,980
percent right so had they waited to the

00:38:18,390 --> 00:38:21,360
end of the you know after the conclusion

00:38:19,980 --> 00:38:23,700
of the filing year right they might have

00:38:21,360 --> 00:38:25,500
already lost a customer never to be able

00:38:23,700 --> 00:38:28,230
to get them back alright so this is huge

00:38:25,500 --> 00:38:30,330
business advantage in not only enabling

00:38:28,230 --> 00:38:32,190
quick experimentation but also saying

00:38:30,330 --> 00:38:33,750
for the business and the product

00:38:32,190 --> 00:38:38,610
management product owners right we need

00:38:33,750 --> 00:38:40,350
you to be doing experiments to let me

00:38:38,610 --> 00:38:44,310
share with you one more hack and then

00:38:40,350 --> 00:38:46,530
I'll conclude so I have become a huge

00:38:44,310 --> 00:38:48,150
fan of common bonds I mean I I love

00:38:46,530 --> 00:38:50,310
convos I wish I'd learned about them ten

00:38:48,150 --> 00:38:52,050
years ago and I think there's a

00:38:50,310 --> 00:38:54,900
wonderful way that you can actually

00:38:52,050 --> 00:38:56,790
modify converse actually do didn't force

00:38:54,900 --> 00:38:58,920
this practice so you know in this conv

00:38:56,790 --> 00:39:00,060
on board you can imagine each lane is

00:38:58,920 --> 00:39:03,210
something like the specification has

00:39:00,060 --> 00:39:06,060
been created it's in work and in dev is

00:39:03,210 --> 00:39:07,470
ready for test is released ready in its

00:39:06,060 --> 00:39:08,820
announced production and ideally you

00:39:07,470 --> 00:39:12,540
want the cards to march from left to

00:39:08,820 --> 00:39:15,210
right as quickly as you can yes I'm

00:39:12,540 --> 00:39:16,830
sorry conv on board a conv on board was

00:39:15,210 --> 00:39:18,510
is one of the tools and techniques they

00:39:16,830 --> 00:39:21,180
use in a toyota production plant where

00:39:18,510 --> 00:39:24,150
every unit of work is a post-it note or

00:39:21,180 --> 00:39:25,860
a card right and you know basically

00:39:24,150 --> 00:39:28,770
every kind of functional group or person

00:39:25,860 --> 00:39:30,120
has their own lane right and so the card

00:39:28,770 --> 00:39:32,190
should flow from left to right so if you

00:39:30,120 --> 00:39:33,330
have like a like an agile storyboard

00:39:32,190 --> 00:39:34,770
planning process yeah i would say that

00:39:33,330 --> 00:39:36,600
sort of looks like a conv on board right

00:39:34,770 --> 00:39:38,610
but you want to take this all the way

00:39:36,600 --> 00:39:41,670
across the value stream from feature in

00:39:38,610 --> 00:39:44,700
work in your backlog to feature you know

00:39:41,670 --> 00:39:47,210
ready to be tested feature in production

00:39:44,700 --> 00:39:50,160
does that did answer your question okay

00:39:47,210 --> 00:39:52,690
so

00:39:50,160 --> 00:39:54,900
one of the things you can do right it's

00:39:52,690 --> 00:39:56,800
a all the user features are in yellow

00:39:54,900 --> 00:39:59,860
but all the non functional requirements

00:39:56,800 --> 00:40:01,690
are in blue right so now you can see

00:39:59,860 --> 00:40:04,270
from visual inspection you are there

00:40:01,690 --> 00:40:05,290
twenty percent of the cards blue right

00:40:04,270 --> 00:40:06,490
and more importantly are they also

00:40:05,290 --> 00:40:07,630
marching from left to right quickly

00:40:06,490 --> 00:40:11,050
right because it till is in production

00:40:07,630 --> 00:40:12,610
we have an actually created value so by

00:40:11,050 --> 00:40:14,200
the way for those of you who aren't

00:40:12,610 --> 00:40:17,530
familiar with common bonds or you aren't

00:40:14,200 --> 00:40:19,510
using them it's probably made one of the

00:40:17,530 --> 00:40:20,680
most meaningful improvements in my life

00:40:19,510 --> 00:40:22,420
right because it helps keep everyone

00:40:20,680 --> 00:40:23,650
accountable keeps all work visible right

00:40:22,420 --> 00:40:25,060
and it sort of encourages like a teen

00:40:23,650 --> 00:40:26,710
behavior it's like when someone's stuck

00:40:25,060 --> 00:40:28,930
if a car has been stuck for five days

00:40:26,710 --> 00:40:30,100
you know everyone will swarm that

00:40:28,930 --> 00:40:31,900
problem and figure out what can we do to

00:40:30,100 --> 00:40:36,310
help that person you know get that card

00:40:31,900 --> 00:40:40,890
to next Lane so why do I think this is

00:40:36,310 --> 00:40:43,870
important I think it's three two reasons

00:40:40,890 --> 00:40:45,460
one is this downward spiral this

00:40:43,870 --> 00:40:46,690
downward spiral happens everywhere right

00:40:45,460 --> 00:40:48,880
this and I think it's just a side effect

00:40:46,690 --> 00:40:50,740
of the way Devon ops are typically

00:40:48,880 --> 00:40:53,140
organized whenever you have you know

00:40:50,740 --> 00:40:56,170
developers making decisions that input

00:40:53,140 --> 00:40:57,400
cause defects downstream that impacts

00:40:56,170 --> 00:41:00,400
their lives right you're going to see

00:40:57,400 --> 00:41:02,020
this and so when that happens for the

00:41:00,400 --> 00:41:03,670
people downstream you know that's what

00:41:02,020 --> 00:41:05,860
creates you know this notion of this

00:41:03,670 --> 00:41:07,480
feeling of hopelessness and despair I

00:41:05,860 --> 00:41:08,830
think there's actually a really this is

00:41:07,480 --> 00:41:10,930
very important to me right i mean i die

00:41:08,830 --> 00:41:12,760
i can think of years of my life where I

00:41:10,930 --> 00:41:14,530
would take problems home with me I would

00:41:12,760 --> 00:41:17,020
wake up every morning right now had I be

00:41:14,530 --> 00:41:18,760
clenching my teeth all night right you

00:41:17,020 --> 00:41:20,710
know it affects us right to deprive

00:41:18,760 --> 00:41:21,820
someone to change the outcomes of their

00:41:20,710 --> 00:41:23,140
life is actually one of the worst things

00:41:21,820 --> 00:41:25,060
we can do to a fellow human being right

00:41:23,140 --> 00:41:27,370
so I think one it's important human

00:41:25,060 --> 00:41:30,790
problem but to I also believe that this

00:41:27,370 --> 00:41:32,440
is a huge economic problem as well right

00:41:30,790 --> 00:41:34,300
I mean let me just flip it around the

00:41:32,440 --> 00:41:37,300
economic value of fixing this problem is

00:41:34,300 --> 00:41:39,670
enormous one of my co-authors of the

00:41:37,300 --> 00:41:41,560
DevOps cookbook and I he's a most recent

00:41:39,670 --> 00:41:43,210
shingo prize winner we just calculation

00:41:41,560 --> 00:41:45,190
how where we want to find out how much

00:41:43,210 --> 00:41:46,900
value is on the table for us to be able

00:41:45,190 --> 00:41:48,700
to recapture if we could have the amount

00:41:46,900 --> 00:41:50,170
of waste associated with the ID value

00:41:48,700 --> 00:41:52,000
stream right and be able to reach boy

00:41:50,170 --> 00:41:53,860
that in a way where we get five x value

00:41:52,000 --> 00:41:55,870
the number we came up was two point six

00:41:53,860 --> 00:41:57,730
trillion dollars and two point six

00:41:55,870 --> 00:41:59,470
trillion dollars a year right that is a

00:41:57,730 --> 00:42:01,720
huge number right that is more than the

00:41:59,470 --> 00:42:02,770
entire economic output of Germany so you

00:42:01,720 --> 00:42:03,820
know with the way I think about is like

00:42:02,770 --> 00:42:05,290
think about like what that will do to

00:42:03,820 --> 00:42:07,240
stand is a living thing about that will

00:42:05,290 --> 00:42:08,890
do to productivity think about how much

00:42:07,240 --> 00:42:10,630
we could get more done right two point

00:42:08,890 --> 00:42:12,070
six trillion dollars more but also the

00:42:10,630 --> 00:42:14,050
way I think about it is you know when I

00:42:12,070 --> 00:42:16,090
think about the world that my children

00:42:14,050 --> 00:42:18,430
were inherited my five-year-old my 2 23

00:42:16,090 --> 00:42:20,110
year olds right this will make a

00:42:18,430 --> 00:42:22,810
meaningful difference in the world that

00:42:20,110 --> 00:42:25,390
will inherit so for me I think is a huge

00:42:22,810 --> 00:42:26,620
enormous problem and if there if we were

00:42:25,390 --> 00:42:28,420
presented to business people would say

00:42:26,620 --> 00:42:29,620
there's two point six trillion dollars

00:42:28,420 --> 00:42:32,260
on the table that someone's going to get

00:42:29,620 --> 00:42:34,180
right this is a zero-sum game right so

00:42:32,260 --> 00:42:36,820
either fear or greed we need to go after

00:42:34,180 --> 00:42:39,160
that right as Deming said survival is

00:42:36,820 --> 00:42:42,550
not mandatory so if I could wave a magic

00:42:39,160 --> 00:42:44,050
wand right everyone will see or just be

00:42:42,550 --> 00:42:45,700
conversing with devout practices and

00:42:44,050 --> 00:42:47,050
recognize them when you see them I'm

00:42:45,700 --> 00:42:49,150
hoping that you'll see and the fact that

00:42:47,050 --> 00:42:51,310
you're here today and say says that you

00:42:49,150 --> 00:42:52,570
think this is important potentially

00:42:51,310 --> 00:42:54,400
important but hopefully you'll see how

00:42:52,570 --> 00:42:56,200
this could be very important to you

00:42:54,400 --> 00:42:57,610
personally I'm hoping that you'll leave

00:42:56,200 --> 00:42:58,630
with some concrete steps that you can

00:42:57,610 --> 00:43:00,760
actually put into place and get the

00:42:58,630 --> 00:43:03,460
outcomes that I've described and I guess

00:43:00,760 --> 00:43:05,320
the most important outcome for me would

00:43:03,460 --> 00:43:07,330
be that you actually become have the

00:43:05,320 --> 00:43:09,280
experience of being a part of a dev ops

00:43:07,330 --> 00:43:10,750
team where you have genuinely shared

00:43:09,280 --> 00:43:14,650
outcomes and you are actually genuinely

00:43:10,750 --> 00:43:16,300
working together to kick ass I just came

00:43:14,650 --> 00:43:18,160
out with a book called the Phoenix

00:43:16,300 --> 00:43:20,440
project the full title it's a novel

00:43:18,160 --> 00:43:23,080
about IT dev ops and helping your

00:43:20,440 --> 00:43:25,900
business win and I guess one of my

00:43:23,080 --> 00:43:27,580
favorite quotes for this it does the

00:43:25,900 --> 00:43:29,710
read Ivan want I've been working this

00:43:27,580 --> 00:43:30,910
book for 10 years and it was very

00:43:29,710 --> 00:43:32,590
closely modeled left a book called the

00:43:30,910 --> 00:43:35,740
goal has anyone here read the read the

00:43:32,590 --> 00:43:38,140
goal okay so awesome this is actually my

00:43:35,740 --> 00:43:39,430
favorite books on the planet I mean of

00:43:38,140 --> 00:43:41,290
all the books that influence my crews

00:43:39,430 --> 00:43:44,170
the most is this book called the goal by

00:43:41,290 --> 00:43:45,940
dr. le le hago goldratt is a novel about

00:43:44,170 --> 00:43:47,950
a plant man who has to fix his costs and

00:43:45,940 --> 00:43:49,600
due date issues in 90 days otherwise

00:43:47,950 --> 00:43:50,830
they'd shut the plant down and so even

00:43:49,600 --> 00:43:52,570
though I never worked in a plant or

00:43:50,830 --> 00:43:53,530
manage a plant right I knew that you

00:43:52,570 --> 00:43:55,120
know there are some learnings in there

00:43:53,530 --> 00:43:56,830
that were very important to me and so

00:43:55,120 --> 00:43:58,180
one of our aspirations was to write

00:43:56,830 --> 00:43:59,530
essentially the goal but for the ID

00:43:58,180 --> 00:44:01,780
context and that's what this book is all

00:43:59,530 --> 00:44:03,970
about and one of the most gratifying

00:44:01,780 --> 00:44:05,500
things for me is that maybe we're saying

00:44:03,970 --> 00:44:07,600
this is the goal you know written for

00:44:05,500 --> 00:44:08,920
the modern age but one of my favorite

00:44:07,600 --> 00:44:10,570
testimony for this came from Jeremiah

00:44:08,920 --> 00:44:12,400
shirt he leads a DevOps initiative at

00:44:10,570 --> 00:44:13,510
Kansas State University and he said you

00:44:12,400 --> 00:44:14,770
know there are three types of books one

00:44:13,510 --> 00:44:16,570
is a novel that you give to a

00:44:14,770 --> 00:44:17,890
n because you think they'll enjoy the

00:44:16,570 --> 00:44:19,270
second type of book you share with work

00:44:17,890 --> 00:44:20,950
colleagues right to create a shared

00:44:19,270 --> 00:44:23,440
understanding and then a third book you

00:44:20,950 --> 00:44:26,080
if your boss to plant the seeds of a big

00:44:23,440 --> 00:44:28,390
dangerous idea right now this book is

00:44:26,080 --> 00:44:29,830
all three so our goal is really to

00:44:28,390 --> 00:44:31,590
positively impact their lives of a

00:44:29,830 --> 00:44:33,640
million IT workers and it's four years

00:44:31,590 --> 00:44:35,380
one of the things I genuinely believe is

00:44:33,640 --> 00:44:37,120
that you know storytelling is most

00:44:35,380 --> 00:44:38,500
powerful mode of communication whenever

00:44:37,120 --> 00:44:39,700
you're trying to convince someone to do

00:44:38,500 --> 00:44:41,560
things in a way that they might not be

00:44:39,700 --> 00:44:42,940
comfortable with right storytelling

00:44:41,560 --> 00:44:44,680
studies have shown over and over again

00:44:42,940 --> 00:44:46,210
that's the most effective route if the

00:44:44,680 --> 00:44:48,160
goal is to get mirror neurons firing the

00:44:46,210 --> 00:44:49,390
other person right storytelling kind of

00:44:48,160 --> 00:44:51,580
bypasses all the rational process of

00:44:49,390 --> 00:44:52,630
rain and so it to help make this

00:44:51,580 --> 00:44:54,490
possible we're actually making the

00:44:52,630 --> 00:44:56,320
kindle version of the book free until

00:44:54,490 --> 00:44:59,170
midnight tonight and so I'll tweet out

00:44:56,320 --> 00:45:01,750
the link for this but until like 11 59

00:44:59,170 --> 00:45:03,520
midnight tonight pacific time the kindle

00:45:01,750 --> 00:45:05,920
version of the book guy is available for

00:45:03,520 --> 00:45:07,480
free for anyone who wants it after today

00:45:05,920 --> 00:45:10,090
if you want to give away a hundred

00:45:07,480 --> 00:45:11,620
seventy page excerpt of the book you

00:45:10,090 --> 00:45:12,850
know just go to this download I just

00:45:11,620 --> 00:45:16,600
give it away right and I think you know

00:45:12,850 --> 00:45:17,980
for me I found it the the stories I love

00:45:16,600 --> 00:45:19,600
the most are the ones where someone said

00:45:17,980 --> 00:45:21,490
I gave this to my peer and operations or

00:45:19,600 --> 00:45:23,980
in development and now suddenly we say

00:45:21,490 --> 00:45:25,630
everyone said that is us write these

00:45:23,980 --> 00:45:26,350
things are happening to us and now we're

00:45:25,630 --> 00:45:28,840
talking about how we can work

00:45:26,350 --> 00:45:31,390
differently to put DevOps practice into

00:45:28,840 --> 00:45:32,470
place if there's anything i'll share

00:45:31,390 --> 00:45:33,880
with you a couple projects i'm working

00:45:32,470 --> 00:45:35,260
on as these are interesting just email

00:45:33,880 --> 00:45:37,660
me we're working on something called the

00:45:35,260 --> 00:45:38,800
devops defensive audit tool kit one of

00:45:37,660 --> 00:45:41,200
the things that we found with DevOps is

00:45:38,800 --> 00:45:42,430
that auditors freak out right this whole

00:45:41,200 --> 00:45:43,480
notion of separation of duty we're

00:45:42,430 --> 00:45:45,150
developers at deploying code by

00:45:43,480 --> 00:45:47,770
themselves right in production right

00:45:45,150 --> 00:45:49,500
will freak out ninety-nine percent of

00:45:47,770 --> 00:45:51,580
developers we're trying to develop the

00:45:49,500 --> 00:45:53,590
paperwork that you can do in advanced

00:45:51,580 --> 00:45:55,060
active show developers that you actually

00:45:53,590 --> 00:45:56,740
have a system internal controls where

00:45:55,060 --> 00:45:58,300
you know the risks are managed if you're

00:45:56,740 --> 00:45:59,770
interesting that let me know we're

00:45:58,300 --> 00:46:01,600
collecting enterprise DevOps studies if

00:45:59,770 --> 00:46:03,040
you're interested that let me know and

00:46:01,600 --> 00:46:04,930
if you're interested in an early draft

00:46:03,040 --> 00:46:06,750
of the DevOps cookbook let me know then

00:46:04,930 --> 00:46:11,470
just make sure you put thousand in like

00:46:06,750 --> 00:46:12,490
audit Enterprise cookbook with that that

00:46:11,470 --> 00:46:15,720
concludes the prepared part of my

00:46:12,490 --> 00:46:15,720
presentation thank you very much

00:46:37,450 --> 00:46:39,480

YouTube URL: https://www.youtube.com/watch?v=disjFj4ruHg


