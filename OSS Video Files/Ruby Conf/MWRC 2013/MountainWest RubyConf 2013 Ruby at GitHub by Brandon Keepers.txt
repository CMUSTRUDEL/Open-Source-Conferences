Title: MountainWest RubyConf 2013 Ruby at GitHub by Brandon Keepers
Publication date: 2020-01-28
Playlist: MWRC 2013
Description: 
	GitHub loves Ruby. Many of our products, tools and infrastructure are built with Ruby.
In this talk, we will look at the libraries, practices and conventions that GitHub uses with Ruby. We will survey all of the repositories maintained by GitHub to get insight into how it is used, and we will also examine some of the areas where we opt to not use Ruby.

Help us caption & translate this video!

http://amara.org/v/FGbV/
Captions: 
	00:00:20,180 --> 00:00:26,000
thank you to all of the organizers this

00:00:23,150 --> 00:00:27,830
has been really awesome and thank you to

00:00:26,000 --> 00:00:29,510
the audience you know you guys have been

00:00:27,830 --> 00:00:31,850
a really great audience this can be kind

00:00:29,510 --> 00:00:34,100
of intimidating to be up here so thanks

00:00:31,850 --> 00:00:37,840
to you first so I want to talk about

00:00:34,100 --> 00:00:40,700
Ruby at github I'm Brandon keepers

00:00:37,840 --> 00:00:42,860
beekeepers online you know the last name

00:00:40,700 --> 00:00:45,140
like keepers people like to think that

00:00:42,860 --> 00:00:50,510
they're funny and make jokes like haha

00:00:45,140 --> 00:00:52,430
you're a keeper I naively chose my first

00:00:50,510 --> 00:00:54,620
initial and last name as my screen name

00:00:52,430 --> 00:00:58,580
so beekeepers be like oh how do you keep

00:00:54,620 --> 00:01:01,160
bees let me clarify that I do not in

00:00:58,580 --> 00:01:02,629
case there's any confusion okay I wonder

00:01:01,160 --> 00:01:04,699
if I should though like we were joking

00:01:02,629 --> 00:01:06,500
yesterday at lunch like people whose

00:01:04,699 --> 00:01:08,090
names are like ironic with what they do

00:01:06,500 --> 00:01:09,800
you know it's like I think somebody

00:01:08,090 --> 00:01:12,890
mentioned there was a dentist like named

00:01:09,800 --> 00:01:14,659
doctor pain or or like a urologist I

00:01:12,890 --> 00:01:15,400
think was named dr. chop or something

00:01:14,659 --> 00:01:22,340
like that

00:01:15,400 --> 00:01:25,700
alright enough about that so a little

00:01:22,340 --> 00:01:27,410
bit about me besides my name I started

00:01:25,700 --> 00:01:29,990
at as co-founder of a consulting company

00:01:27,410 --> 00:01:32,390
called collective idea I was there for

00:01:29,990 --> 00:01:35,150
about five years

00:01:32,390 --> 00:01:36,560
joined ordered list who where we built a

00:01:35,150 --> 00:01:38,810
couple products that you may have heard

00:01:36,560 --> 00:01:41,900
of her used gauges as a web analytics

00:01:38,810 --> 00:01:43,460
app and then speaker comm which I know a

00:01:41,900 --> 00:01:47,810
lot of the presenters here have posted

00:01:43,460 --> 00:01:49,520
their slides to in late 2011 we had the

00:01:47,810 --> 00:01:51,980
opportunity to join with github our

00:01:49,520 --> 00:01:53,960
entire team so we were thrilled to do

00:01:51,980 --> 00:01:56,840
that and so we're gonna github for about

00:01:53,960 --> 00:01:58,490
a year and a half now I spend I've

00:01:56,840 --> 00:02:00,440
worked on a few things at github but

00:01:58,490 --> 00:02:02,090
lately I spend most of my time working

00:02:00,440 --> 00:02:04,340
on speaker deck we have a whole team of

00:02:02,090 --> 00:02:08,269
people working on it now and some pretty

00:02:04,340 --> 00:02:10,220
exciting things to come so I think it's

00:02:08,269 --> 00:02:14,390
probably no secret that github loves

00:02:10,220 --> 00:02:17,060
ruby our founders were very active in

00:02:14,390 --> 00:02:19,819
the Ruby community early on we've been

00:02:17,060 --> 00:02:22,550
at a lot of conferences and you know

00:02:19,819 --> 00:02:24,110
github being somewhat admired especially

00:02:22,550 --> 00:02:25,879
in this community people then often have

00:02:24,110 --> 00:02:27,650
a lot of questions so I thought it would

00:02:25,879 --> 00:02:29,900
be fun to just do a talk kind of

00:02:27,650 --> 00:02:31,730
addressing some of those and then also

00:02:29,900 --> 00:02:33,830
give you guys a chance a little bit

00:02:31,730 --> 00:02:37,459
extended time for for any questions that

00:02:33,830 --> 00:02:40,909
you have so here's the ones I'm gonna

00:02:37,459 --> 00:02:42,830
start with which languages are used at

00:02:40,909 --> 00:02:45,739
github we will look at some of our

00:02:42,830 --> 00:02:48,769
projects and stats across those whereas

00:02:45,739 --> 00:02:51,110
Ruby not used why Ruby for everything

00:02:48,769 --> 00:02:53,090
else which libraries do we use and then

00:02:51,110 --> 00:02:54,860
how do we handle updates so both you

00:02:53,090 --> 00:02:59,260
know releasing new features how do we

00:02:54,860 --> 00:02:59,260
handle upgrades to Ruby into Rails so

00:03:00,819 --> 00:03:07,099
which languages are used at github I

00:03:03,620 --> 00:03:09,019
cloned all of the repositories on our

00:03:07,099 --> 00:03:13,819
github organization so get up calm slash

00:03:09,019 --> 00:03:16,720
github we have 602 repositories that in

00:03:13,819 --> 00:03:19,370
some form or another are used internally

00:03:16,720 --> 00:03:21,109
as I was looking at those 228 of them

00:03:19,370 --> 00:03:23,420
were in active meaning they hadn't had a

00:03:21,109 --> 00:03:25,310
commit in six months so I just kind of

00:03:23,420 --> 00:03:27,109
figured well if we're not maintaining

00:03:25,310 --> 00:03:29,230
them they're probably not a core part of

00:03:27,109 --> 00:03:32,390
our infrastructure so I ignored those

00:03:29,230 --> 00:03:35,030
forty two projects were Forks of like

00:03:32,390 --> 00:03:36,680
open source projects and so I didn't

00:03:35,030 --> 00:03:38,180
really include those and then seven I

00:03:36,680 --> 00:03:39,500
just ignored because they kind of were

00:03:38,180 --> 00:03:41,329
scheming the stats and didn't really

00:03:39,500 --> 00:03:43,609
seem relevant like there was a bunch of

00:03:41,329 --> 00:03:44,930
like Cisco router configs which were

00:03:43,609 --> 00:03:47,030
showing up as some language called

00:03:44,930 --> 00:03:49,940
racket which I have no idea even what

00:03:47,030 --> 00:03:52,340
that is so anyway so I ignored a bunch

00:03:49,940 --> 00:03:54,380
of those and then I also didn't try and

00:03:52,340 --> 00:03:55,819
chase down like all you know github uses

00:03:54,380 --> 00:03:56,959
a lot of open source software we

00:03:55,819 --> 00:03:59,060
contribute to a lot of open source

00:03:56,959 --> 00:04:01,160
software so I didn't try and chase down

00:03:59,060 --> 00:04:04,700
like where are all the libraries that we

00:04:01,160 --> 00:04:07,310
use these these specifically Lib get to

00:04:04,700 --> 00:04:10,430
as an effort we're helping out with to

00:04:07,310 --> 00:04:12,709
rewrite git as a linkable see library so

00:04:10,430 --> 00:04:15,560
that's not included boxing which was

00:04:12,709 --> 00:04:17,720
talked about at dev day play is our our

00:04:15,560 --> 00:04:20,539
Media Center thing and then a lot of our

00:04:17,720 --> 00:04:23,030
employees have open source projects that

00:04:20,539 --> 00:04:26,240
that we use at github so I didn't

00:04:23,030 --> 00:04:27,919
include those so that being said here's

00:04:26,240 --> 00:04:31,520
the language breakdown by primary

00:04:27,919 --> 00:04:35,330
language of all of our internal repos so

00:04:31,520 --> 00:04:38,330
two-thirds of them almost are Ruby a lot

00:04:35,330 --> 00:04:41,630
of JavaScript some Objective C Michelle

00:04:38,330 --> 00:04:44,060
CoffeeScript C C sharp and then other

00:04:41,630 --> 00:04:44,960
and the other was like twenty or thirty

00:04:44,060 --> 00:04:47,000
other languages

00:04:44,960 --> 00:04:48,620
I mean those might have been you know

00:04:47,000 --> 00:04:51,620
maybe a few libraries that were vendored

00:04:48,620 --> 00:04:53,870
or something like that the one that was

00:04:51,620 --> 00:04:58,039
surprising to me on this was the Java

00:04:53,870 --> 00:04:59,240
didn't show up and so and I know like we

00:04:58,039 --> 00:05:01,550
have a couple Android apps which I'll

00:04:59,240 --> 00:05:02,780
talk more about in a minute so I started

00:05:01,550 --> 00:05:04,039
digging around a little bit more and and

00:05:02,780 --> 00:05:07,310
this I felt was a little bit misleading

00:05:04,039 --> 00:05:08,660
since by primary language and we all

00:05:07,310 --> 00:05:11,150
know that often you have a repository

00:05:08,660 --> 00:05:14,330
with multiple languages in it so I

00:05:11,150 --> 00:05:16,039
decided to compare them by bytes I

00:05:14,330 --> 00:05:17,570
wasn't sure if that would be the best

00:05:16,039 --> 00:05:19,910
metric but I thought it was an

00:05:17,570 --> 00:05:22,669
interesting one and the story changes

00:05:19,910 --> 00:05:26,810
quite a bit now we only have a third of

00:05:22,669 --> 00:05:30,590
our code is Ruby 15 percent C JavaScript

00:05:26,810 --> 00:05:33,410
Objective C CoffeeScript c-sharp puppet

00:05:30,590 --> 00:05:36,229
now Java answers the picture and then

00:05:33,410 --> 00:05:37,430
still 6% of other so I mean there's this

00:05:36,229 --> 00:05:39,169
kind of interesting like we could take

00:05:37,430 --> 00:05:40,820
some guesses about what that means so we

00:05:39,169 --> 00:05:41,240
have a lot less Ruby if we compare by

00:05:40,820 --> 00:05:43,250
bytes

00:05:41,240 --> 00:05:46,759
maybe it's because Ruby is more

00:05:43,250 --> 00:05:48,500
expressive and concise it may just be

00:05:46,759 --> 00:05:49,880
because we have a lot of Ruby projects

00:05:48,500 --> 00:05:52,430
that don't have a lot of code in them

00:05:49,880 --> 00:05:54,380
but we have you know only a few

00:05:52,430 --> 00:05:56,750
objective-c projects that also have a

00:05:54,380 --> 00:05:58,370
lot of code it might just mean that some

00:05:56,750 --> 00:06:00,289
of these languages are not as expressive

00:05:58,370 --> 00:06:01,880
as Ruby kind of the inverse of that it's

00:06:00,289 --> 00:06:04,250
like C and doesn't really give you

00:06:01,880 --> 00:06:05,030
anything for free you have to do

00:06:04,250 --> 00:06:09,139
everything yourself

00:06:05,030 --> 00:06:11,870
so those are kind of interesting I think

00:06:09,139 --> 00:06:15,650
the story though that this tells and

00:06:11,870 --> 00:06:16,130
something that is best summed up by Ryan

00:06:15,650 --> 00:06:19,009
himeko

00:06:16,130 --> 00:06:20,630
one of our developers is that github we

00:06:19,009 --> 00:06:22,550
really don't see ourselves as a rails

00:06:20,630 --> 00:06:24,169
shop I know a lot of the community does

00:06:22,550 --> 00:06:27,830
you know we're going to see ourselves as

00:06:24,169 --> 00:06:29,780
a ruby shop if we have in any identity

00:06:27,830 --> 00:06:32,449
tied to a technology I think it's Unix

00:06:29,780 --> 00:06:34,340
both in the way that we build tools and

00:06:32,449 --> 00:06:36,050
really our culture like we're all about

00:06:34,340 --> 00:06:37,580
finding all of these small pieces that

00:06:36,050 --> 00:06:40,880
do one thing and do them well and

00:06:37,580 --> 00:06:43,400
combining them together so well we love

00:06:40,880 --> 00:06:48,469
rails in Ruby I think UNIX is really

00:06:43,400 --> 00:06:50,120
where our our identity is and it's just

00:06:48,469 --> 00:06:52,490
kind of a like a side note of that like

00:06:50,120 --> 00:06:53,839
going on in the UNIX analogy I mean one

00:06:52,490 --> 00:06:55,010
of the cool things about github is that

00:06:53,839 --> 00:06:57,100
pretty much everybody in the company

00:06:55,010 --> 00:07:00,100
also has to do access you know kind of

00:06:57,100 --> 00:07:02,140
for eclis we all have complete autonomy

00:07:00,100 --> 00:07:03,490
and you know if I want to push hard for

00:07:02,140 --> 00:07:07,930
something I can it's just a matter of

00:07:03,490 --> 00:07:10,240
convincing my coworkers so those are the

00:07:07,930 --> 00:07:15,610
languages we use let's look at where

00:07:10,240 --> 00:07:19,840
Ruby is not used the biggest category of

00:07:15,610 --> 00:07:22,720
these are native so we have github for

00:07:19,840 --> 00:07:26,080
Mac which is the get GUI written in

00:07:22,720 --> 00:07:28,060
Objective C as most Mac apps are we have

00:07:26,080 --> 00:07:31,060
github for Windows in the Windows GUI

00:07:28,060 --> 00:07:33,880
written in C sharp as most Windows apps

00:07:31,060 --> 00:07:36,640
are we have a couple Android apps so if

00:07:33,880 --> 00:07:38,380
we get hub we have you know just the

00:07:36,640 --> 00:07:40,000
generic github app and then gauges the

00:07:38,380 --> 00:07:42,940
web analytics we also have an Android

00:07:40,000 --> 00:07:44,770
app so like if you think back to the the

00:07:42,940 --> 00:07:47,860
pie chart that only showed 2% of our

00:07:44,770 --> 00:07:49,270
code being Java I I think one of like

00:07:47,860 --> 00:07:52,510
one of my hunches about why that's so

00:07:49,270 --> 00:07:55,870
small is both of our our Android apps

00:07:52,510 --> 00:07:57,970
are open-source and so Kevin Suki who

00:07:55,870 --> 00:07:59,350
works on those is really intentional

00:07:57,970 --> 00:08:01,720
about pulling out the pieces that are

00:07:59,350 --> 00:08:03,820
reusable into open-source libraries are

00:08:01,720 --> 00:08:05,290
contributing back to existing ones so

00:08:03,820 --> 00:08:08,560
the the github for Android apps really

00:08:05,290 --> 00:08:12,760
aren't that large since they're the

00:08:08,560 --> 00:08:14,920
other you were using so much code we

00:08:12,760 --> 00:08:16,180
have numerous iOS apps a couple public

00:08:14,920 --> 00:08:18,970
ones in the app store and then we also

00:08:16,180 --> 00:08:23,860
have a bunch of internal ones for staff

00:08:18,970 --> 00:08:27,640
use and then Hugh bot which was talked

00:08:23,860 --> 00:08:29,260
about at the DevOps day by Jesse he bots

00:08:27,640 --> 00:08:31,780
is all written in CoffeeScript and runs

00:08:29,260 --> 00:08:36,370
on node there's all of you node haters

00:08:31,780 --> 00:08:40,080
take that whoo there's a good use for

00:08:36,370 --> 00:08:40,080
node chat bot

00:08:41,159 --> 00:08:45,130
there's better uses for node I'm not

00:08:43,450 --> 00:08:49,180
implying anything anyway

00:08:45,130 --> 00:08:50,830
whatever we have we have a bunch of UNIX

00:08:49,180 --> 00:08:53,220
utilities so like some tooling around

00:08:50,830 --> 00:08:55,930
get and all of the things that get does

00:08:53,220 --> 00:08:57,520
and those are all mostly written and see

00:08:55,930 --> 00:09:01,060
you know a lot of shell scripts stuff

00:08:57,520 --> 00:09:03,340
like that so looking at those one of the

00:09:01,060 --> 00:09:06,070
questions people then ask next is well

00:09:03,340 --> 00:09:07,960
what about like PhoneGap or one of these

00:09:06,070 --> 00:09:10,600
other like wrapper frameworks that let

00:09:07,960 --> 00:09:13,660
you build native apps or mobile apps in

00:09:10,600 --> 00:09:15,760
not the native language I think there's

00:09:13,660 --> 00:09:17,590
there's a couple reasons why we don't

00:09:15,760 --> 00:09:20,350
use any of these none of them really

00:09:17,590 --> 00:09:23,560
intentional at first I think that we

00:09:20,350 --> 00:09:25,900
tend to hire people that already have

00:09:23,560 --> 00:09:28,300
experience in the thing that we're

00:09:25,900 --> 00:09:30,370
hiring them to do and so when we hire

00:09:28,300 --> 00:09:32,290
somebody to work on you know iPhone app

00:09:30,370 --> 00:09:34,150
they're people that have typically

00:09:32,290 --> 00:09:35,800
already been working on iPhone apps and

00:09:34,150 --> 00:09:38,410
and thus part of the objective-c

00:09:35,800 --> 00:09:39,670
community and the other part I mean I

00:09:38,410 --> 00:09:42,760
don't this isn't really official but

00:09:39,670 --> 00:09:46,960
it's I have never seen a PhoneGap app

00:09:42,760 --> 00:09:48,820
that felt like a real native app or at

00:09:46,960 --> 00:09:50,290
least if you have one please show me

00:09:48,820 --> 00:09:52,600
because I just think it's a lot harder

00:09:50,290 --> 00:09:54,880
to to create the experience you want

00:09:52,600 --> 00:09:57,580
using these frameworks or put another

00:09:54,880 --> 00:09:59,680
way you know when you visit France you

00:09:57,580 --> 00:10:02,530
can probably get by speaking English but

00:09:59,680 --> 00:10:03,490
it'll be obviously you're not French you

00:10:02,530 --> 00:10:05,940
know there's just something about that

00:10:03,490 --> 00:10:08,680
native component that is important so

00:10:05,940 --> 00:10:10,030
then people will also say well you know

00:10:08,680 --> 00:10:12,370
what about Ruby motion because that

00:10:10,030 --> 00:10:14,650
compiles down to LLVM it's the same as

00:10:12,370 --> 00:10:15,910
Objective C and again I think it's the

00:10:14,650 --> 00:10:17,320
same reason like you know we're not

00:10:15,910 --> 00:10:19,180
we're not hiring people that we're doing

00:10:17,320 --> 00:10:22,660
Ruby development and asking them to work

00:10:19,180 --> 00:10:25,150
on it on iOS we're hiring people that

00:10:22,660 --> 00:10:27,010
were already doing that and then as for

00:10:25,150 --> 00:10:29,110
me personally who has a ruby background

00:10:27,010 --> 00:10:33,000
the reason I don't I'm not so interested

00:10:29,110 --> 00:10:36,220
in Ruby motion is this scientific graph

00:10:33,000 --> 00:10:38,800
in my mind objective-c is not that hard

00:10:36,220 --> 00:10:40,600
it's learning everything else I mean

00:10:38,800 --> 00:10:42,160
it's the conventions it's the user

00:10:40,600 --> 00:10:44,560
interface guidelines it's learning the

00:10:42,160 --> 00:10:46,589
iOS api's these numbers are totally made

00:10:44,560 --> 00:10:46,589
up

00:10:50,079 --> 00:10:55,339
all right so why Ruby for the rest we

00:10:53,690 --> 00:10:57,320
don't get this question so much at Ruby

00:10:55,339 --> 00:11:01,279
conferences but we do at you know Python

00:10:57,320 --> 00:11:02,560
in other areas I was I don't know if it

00:11:01,279 --> 00:11:04,670
was ever really an intentional decision

00:11:02,560 --> 00:11:08,360
you know the the founders of github

00:11:04,670 --> 00:11:11,839
started using Ruby and thus attracted

00:11:08,360 --> 00:11:13,250
people that were using Ruby it's not

00:11:11,839 --> 00:11:14,839
really an official policy like we don't

00:11:13,250 --> 00:11:17,360
say okay well if we're gonna write a web

00:11:14,839 --> 00:11:19,370
service let's let's write it in Ruby one

00:11:17,360 --> 00:11:22,550
of the core tenets of github is this

00:11:19,370 --> 00:11:24,410
concept of no parents and you know what

00:11:22,550 --> 00:11:26,139
we mean by that is two things one like

00:11:24,410 --> 00:11:28,490
nobody's going to tell us what to do

00:11:26,139 --> 00:11:31,069
when you show up at github you make your

00:11:28,490 --> 00:11:31,970
own decisions but as a result of that

00:11:31,069 --> 00:11:34,100
you also have to live with the

00:11:31,970 --> 00:11:35,870
consequences of those decisions so like

00:11:34,100 --> 00:11:40,040
I could go write a core piece of github

00:11:35,870 --> 00:11:41,569
in go or Scala but then I'm responsible

00:11:40,040 --> 00:11:44,180
now for maintaining that and making sure

00:11:41,569 --> 00:11:47,149
that that it's stable and you know

00:11:44,180 --> 00:11:48,470
there's no issues with it so again it

00:11:47,149 --> 00:11:52,310
you know every we're open to using

00:11:48,470 --> 00:11:54,470
whatever the snow we have kind of a

00:11:52,310 --> 00:11:56,380
smattering of languages but there's also

00:11:54,470 --> 00:11:58,519
some responsibility that comes with that

00:11:56,380 --> 00:12:00,769
so if you were to ask me personally why

00:11:58,519 --> 00:12:03,649
do I use Ruby I think that's actually

00:12:00,769 --> 00:12:04,910
kind of a hard question to answer it's

00:12:03,649 --> 00:12:06,949
like asking me like why do I Drive a

00:12:04,910 --> 00:12:09,139
Toyota so my wife and I just went and

00:12:06,949 --> 00:12:11,600
bought a new car recently to replace our

00:12:09,139 --> 00:12:15,319
old Toyota Camry and we drove like one

00:12:11,600 --> 00:12:16,370
of everything it felt like anyway and at

00:12:15,319 --> 00:12:17,899
the end of the day like we ended up

00:12:16,370 --> 00:12:19,250
buying another Toyota and not really

00:12:17,899 --> 00:12:21,740
intentionally that was just the one that

00:12:19,250 --> 00:12:24,410
we liked the best and I could probably

00:12:21,740 --> 00:12:26,720
come up with all of these reasons why I

00:12:24,410 --> 00:12:28,279
you know why I like Toyotas you know

00:12:26,720 --> 00:12:30,319
what they're reliable dependable all of

00:12:28,279 --> 00:12:32,779
those things just like I come up with

00:12:30,319 --> 00:12:33,889
reasons why I prefer Ruby but I feel

00:12:32,779 --> 00:12:36,790
like at the end of the day it really

00:12:33,889 --> 00:12:39,110
just comes down to taste like I tried

00:12:36,790 --> 00:12:41,029
Python before I learned Ruby and it

00:12:39,110 --> 00:12:42,319
really didn't stick for some reason not

00:12:41,029 --> 00:12:45,199
that there's anything wrong with it

00:12:42,319 --> 00:12:48,290
I just I just didn't prefer it and it

00:12:45,199 --> 00:12:51,230
also is about practicality you know if

00:12:48,290 --> 00:12:52,399
I'm going to invest ten thousand hours

00:12:51,230 --> 00:12:54,560
or four hours a day and learning

00:12:52,399 --> 00:12:58,189
something I want to learn something that

00:12:54,560 --> 00:13:00,439
has a pretty wide range of uses and Ruby

00:12:58,189 --> 00:13:01,490
is one of those things so like you know

00:13:00,439 --> 00:13:03,470
Ruby Ruby

00:13:01,490 --> 00:13:05,600
dump truck it's not it's not the

00:13:03,470 --> 00:13:07,790
internet it's a series of tubes sorry

00:13:05,600 --> 00:13:10,310
anyway it's it's not the specialized

00:13:07,790 --> 00:13:12,620
piece of machinery that is only used for

00:13:10,310 --> 00:13:14,149
one thing you know or it's not a semi

00:13:12,620 --> 00:13:16,550
it's not a you know a motorcycle that

00:13:14,149 --> 00:13:19,100
can go really fast it's probably a

00:13:16,550 --> 00:13:21,860
little bit more practical like a little

00:13:19,100 --> 00:13:23,750
pickup or a sedan and so that's why I

00:13:21,860 --> 00:13:26,540
prefer it I can use it for scripting I

00:13:23,750 --> 00:13:29,300
can use it for the web if I wanted to I

00:13:26,540 --> 00:13:34,120
could use it for native apps if only to

00:13:29,300 --> 00:13:36,830
play around so there that's why Ruby

00:13:34,120 --> 00:13:40,070
what libraries do we use is another

00:13:36,830 --> 00:13:44,270
question this was a fun one to look at

00:13:40,070 --> 00:13:46,010
so we had 153 repositories with a gem

00:13:44,270 --> 00:13:47,510
file in them which you know as we know

00:13:46,010 --> 00:13:50,029
that the standard way to declare your

00:13:47,510 --> 00:13:52,220
dependencies and so I parts through

00:13:50,029 --> 00:13:54,290
those and just kind of added up what

00:13:52,220 --> 00:13:55,790
what gems do we declare dependencies on

00:13:54,290 --> 00:13:58,399
now I didn't look at the gem file that

00:13:55,790 --> 00:14:00,560
lock which shows all of the actual

00:13:58,399 --> 00:14:04,190
dependencies I was only looking at the

00:14:00,560 --> 00:14:07,190
declared ones and I struggled to find a

00:14:04,190 --> 00:14:08,990
way to visualize this so you get a

00:14:07,190 --> 00:14:13,610
really big you know like straight out of

00:14:08,990 --> 00:14:15,500
2001 word cloud so we'll walk through

00:14:13,610 --> 00:14:16,459
this a little bit I'll give you a minute

00:14:15,500 --> 00:14:18,470
to stare at it

00:14:16,459 --> 00:14:26,149
so obviously the bigger the word the

00:14:18,470 --> 00:14:27,459
more it's used in our projects so just

00:14:26,149 --> 00:14:30,260
to draw your attention to a few of them

00:14:27,459 --> 00:14:31,880
right here in the middle you know the

00:14:30,260 --> 00:14:33,770
two main app frameworks Sinatra and

00:14:31,880 --> 00:14:36,339
rails I'll talk more about those in a

00:14:33,770 --> 00:14:38,899
second if we want to look at databases

00:14:36,339 --> 00:14:42,740
we've got Redis postgrads

00:14:38,899 --> 00:14:44,329
my sequel I sequel light three I'm I

00:14:42,740 --> 00:14:46,640
have no idea why that's showing up I

00:14:44,329 --> 00:14:47,959
need to look my guess is those are

00:14:46,640 --> 00:14:49,339
probably like prototype apps or

00:14:47,959 --> 00:14:51,709
something we're just playing around with

00:14:49,339 --> 00:14:54,829
and I hope to god they're not actually

00:14:51,709 --> 00:14:55,790
used in production anywhere and then I

00:14:54,829 --> 00:14:58,279
don't know if you can see them but

00:14:55,790 --> 00:15:00,620
there's two really small react client

00:14:58,279 --> 00:15:06,860
and we have a couple apps that do

00:15:00,620 --> 00:15:09,620
use those interestingly my sequel is is

00:15:06,860 --> 00:15:11,570
the one that our ops team has kind of a

00:15:09,620 --> 00:15:13,430
chosen to officially support just simply

00:15:11,570 --> 00:15:14,100
for like you know their sanity and

00:15:13,430 --> 00:15:16,500
bandwidth

00:15:14,100 --> 00:15:19,769
of staying alive but I found interesting

00:15:16,500 --> 00:15:21,029
that we use Postgres in more apps we

00:15:19,769 --> 00:15:23,940
have a lot of stuff deployed on Heroku

00:15:21,029 --> 00:15:24,779
so that may be the reason but I just

00:15:23,940 --> 00:15:28,110
thought that was an interesting

00:15:24,779 --> 00:15:29,519
observation so we look at test

00:15:28,110 --> 00:15:30,480
frameworks I'll talk a little bit more

00:15:29,519 --> 00:15:32,579
about these in a minute

00:15:30,480 --> 00:15:34,829
but we've got a smattering of libraries

00:15:32,579 --> 00:15:36,899
for helping with testing so our spec and

00:15:34,829 --> 00:15:39,449
our spec rails again I only looked at

00:15:36,899 --> 00:15:40,829
the declared dependencies so some you

00:15:39,449 --> 00:15:43,350
know how to declare dependency of r-spec

00:15:40,829 --> 00:15:46,079
somehow I respect Rails a little bit of

00:15:43,350 --> 00:15:48,420
mini tests test unit doesn't show up

00:15:46,079 --> 00:15:50,310
because it's a in the standard library

00:15:48,420 --> 00:15:53,850
and then lots of other things for help

00:15:50,310 --> 00:15:58,980
you know mocking web mock RAC test some

00:15:53,850 --> 00:16:05,009
poltergeist and capybara so there's all

00:15:58,980 --> 00:16:08,160
of them again so the big question then

00:16:05,009 --> 00:16:09,660
is well Sinatra rails I think it at some

00:16:08,160 --> 00:16:11,160
conference somebody at github said that

00:16:09,660 --> 00:16:13,199
they don't like Rails and so now

00:16:11,160 --> 00:16:17,699
everybody thinks everybody github hates

00:16:13,199 --> 00:16:19,740
rails the reality is we use both and we

00:16:17,699 --> 00:16:23,040
use both of them a lot we have 51

00:16:19,740 --> 00:16:26,160
projects that use Sinatra we have nine

00:16:23,040 --> 00:16:30,300
that use both in the same app and 30

00:16:26,160 --> 00:16:33,660
that just used rails the overlap there

00:16:30,300 --> 00:16:35,490
is we often in a project will make main

00:16:33,660 --> 00:16:37,980
parts of the app in rails and then like

00:16:35,490 --> 00:16:39,689
specialize like API or something unique

00:16:37,980 --> 00:16:41,880
in Sinatra and then mount that as

00:16:39,689 --> 00:16:43,550
middleware and the rails app so like

00:16:41,880 --> 00:16:45,870
that's how like the github API works

00:16:43,550 --> 00:16:48,870
it's all in the same codebase and we

00:16:45,870 --> 00:16:50,699
just mount the Sinatra app in so I

00:16:48,870 --> 00:16:51,839
thought this was interesting and as I

00:16:50,699 --> 00:16:53,939
was looking at this one of my hunches

00:16:51,839 --> 00:16:55,589
was that while we have a lot of projects

00:16:53,939 --> 00:16:57,930
that use Sinatra I bet they're all

00:16:55,589 --> 00:17:01,649
pretty small and so again I compared by

00:16:57,930 --> 00:17:04,439
bytes and the picture turned to this so

00:17:01,649 --> 00:17:09,270
in in those projects we have 12 Meg's of

00:17:04,439 --> 00:17:11,610
Ruby code that is rails 10 Meg's of ones

00:17:09,270 --> 00:17:13,850
with Sinatra dependencies and then 8

00:17:11,610 --> 00:17:15,780
Meg's in those projects that were shared

00:17:13,850 --> 00:17:18,089
so that tells you we've got you know

00:17:15,780 --> 00:17:21,449
just over 2 Meg's of plain Sinatra apps

00:17:18,089 --> 00:17:23,130
even though there's 51 of them so I you

00:17:21,449 --> 00:17:26,490
know it looks like we tend to use rails

00:17:23,130 --> 00:17:27,830
4 for larger apps now as far as like the

00:17:26,490 --> 00:17:30,750
the kind of

00:17:27,830 --> 00:17:32,100
our opinion on Sinatra versus rails I

00:17:30,750 --> 00:17:33,510
think that you know their prior some

00:17:32,100 --> 00:17:35,730
people inside of github that have strong

00:17:33,510 --> 00:17:37,980
opinions about it most of us are just a

00:17:35,730 --> 00:17:39,930
little more practical I think in some

00:17:37,980 --> 00:17:41,730
sense most Sinatra apps just having

00:17:39,930 --> 00:17:43,770
gotten complex enough to be a rails app

00:17:41,730 --> 00:17:49,560
yet which is a good thing like hopefully

00:17:43,770 --> 00:17:51,960
they don't get that complex but so test

00:17:49,560 --> 00:17:53,760
Union r-spec or mini tests you know this

00:17:51,960 --> 00:17:56,010
is one of those epic battles that you

00:17:53,760 --> 00:18:01,740
know the fate of humanity depends on

00:17:56,010 --> 00:18:04,920
like tabs versus spaces again I think

00:18:01,740 --> 00:18:06,450
we're pretty pragmatic about it a lot of

00:18:04,920 --> 00:18:09,360
people at github do you really prefer

00:18:06,450 --> 00:18:11,370
plain old test unit and that's fine

00:18:09,360 --> 00:18:13,950
a lot of people really prefer r-spec

00:18:11,370 --> 00:18:16,350
that's fine a few people prefer mini

00:18:13,950 --> 00:18:18,660
spec I really wish the test unit crowd

00:18:16,350 --> 00:18:20,210
were mini test xperia was the test unit

00:18:18,660 --> 00:18:22,080
crowd would just move to mini test

00:18:20,210 --> 00:18:32,850
because it's so much better

00:18:22,080 --> 00:18:37,920
but Ryan whoo sorry yeah there we go all

00:18:32,850 --> 00:18:39,060
right so how do we handle updates the

00:18:37,920 --> 00:18:41,190
biggest thing is rolling out new

00:18:39,060 --> 00:18:44,190
features at github we're constantly

00:18:41,190 --> 00:18:46,530
deploying and and we rarely will have a

00:18:44,190 --> 00:18:48,750
feature that has worked on for weeks or

00:18:46,530 --> 00:18:50,220
months without being deployed and so

00:18:48,750 --> 00:18:52,320
what we'll do is we'll we'll work on

00:18:50,220 --> 00:18:53,580
these features and get them to a state

00:18:52,320 --> 00:18:55,650
where we can actually merge them back

00:18:53,580 --> 00:18:58,230
into master and deploy them with them

00:18:55,650 --> 00:19:00,930
turned off and the way that we do that

00:18:58,230 --> 00:19:02,280
is with these feature flags so what

00:19:00,930 --> 00:19:06,150
we'll do is we'll define a bunch of

00:19:02,280 --> 00:19:08,970
helper methods for whether the current

00:19:06,150 --> 00:19:11,040
user can see this new feature or not and

00:19:08,970 --> 00:19:12,510
so we'll often have a module like called

00:19:11,040 --> 00:19:14,880
feature flags or something like that

00:19:12,510 --> 00:19:16,890
it just says does this user get preview

00:19:14,880 --> 00:19:18,090
features and usually defaults to well

00:19:16,890 --> 00:19:19,880
are they you know I could github

00:19:18,090 --> 00:19:22,190
employee or whatever whatever the app

00:19:19,880 --> 00:19:24,570
whoever the target is for that app and

00:19:22,190 --> 00:19:26,910
then as we add start to add new features

00:19:24,570 --> 00:19:28,920
we'll add new methods new flags for them

00:19:26,910 --> 00:19:31,380
so in this example we're making a

00:19:28,920 --> 00:19:34,860
theoretical time-travel feature it's a

00:19:31,380 --> 00:19:36,750
very advanced feature so I just say okay

00:19:34,860 --> 00:19:39,680
it's time-travel enabled well the result

00:19:36,750 --> 00:19:42,380
is does this user have preview features

00:19:39,680 --> 00:19:43,670
we then mixed that into the model so the

00:19:42,380 --> 00:19:46,850
model is responsible for determining

00:19:43,670 --> 00:19:49,220
like are they staff and then in the

00:19:46,850 --> 00:19:51,320
controller we take all of those methods

00:19:49,220 --> 00:19:53,360
and we delegate them to whoever the

00:19:51,320 --> 00:19:56,090
current user is and then declare them as

00:19:53,360 --> 00:19:58,400
helper methods so now in all of our

00:19:56,090 --> 00:20:01,070
controllers views and and then our user

00:19:58,400 --> 00:20:02,810
model we have whether this user is

00:20:01,070 --> 00:20:05,840
allowed to see whatever this feature is

00:20:02,810 --> 00:20:08,480
so when we go to implement it whoops

00:20:05,840 --> 00:20:10,850
jump in ahead so we'll go into the view

00:20:08,480 --> 00:20:12,620
and we'll say okay I'm adding this new

00:20:10,850 --> 00:20:14,930
feature if time travel is enabled for

00:20:12,620 --> 00:20:16,400
this this user showed on the page there

00:20:14,930 --> 00:20:18,920
might be an else block that says ok if

00:20:16,400 --> 00:20:20,660
it's not do the old thing

00:20:18,920 --> 00:20:22,730
and then in the controller will restrict

00:20:20,660 --> 00:20:24,530
access to it and say you know don't

00:20:22,730 --> 00:20:27,950
allow them to run any of these actions

00:20:24,530 --> 00:20:29,150
unless they have this feature so I mean

00:20:27,950 --> 00:20:30,860
this is really important for us because

00:20:29,150 --> 00:20:33,730
it allows us to get code out as soon as

00:20:30,860 --> 00:20:36,560
possible and avoid long live branches

00:20:33,730 --> 00:20:38,180
like one of the features I worked on was

00:20:36,560 --> 00:20:40,340
the new notification stuff that went out

00:20:38,180 --> 00:20:42,740
like six months ago and that was like a

00:20:40,340 --> 00:20:44,330
six month project and if I had kept that

00:20:42,740 --> 00:20:46,490
as a separate branch and never deployed

00:20:44,330 --> 00:20:47,900
it it would have been really painful but

00:20:46,490 --> 00:20:49,880
about three months in we got to a point

00:20:47,900 --> 00:20:52,490
we were like alright staff are gonna

00:20:49,880 --> 00:20:54,620
start using these new notifications so

00:20:52,490 --> 00:20:56,960
for us you know like github comm looks

00:20:54,620 --> 00:20:58,160
very different than it does for you but

00:20:56,960 --> 00:20:59,690
we started use them and it was really

00:20:58,160 --> 00:21:02,090
painful like we found all the spots

00:20:59,690 --> 00:21:04,760
where they didn't work but it allowed us

00:21:02,090 --> 00:21:06,170
to iterate on that and be able to test

00:21:04,760 --> 00:21:09,770
whether there were any performance

00:21:06,170 --> 00:21:12,320
issues or any any problems with them so

00:21:09,770 --> 00:21:14,240
then when launch day finally comes all

00:21:12,320 --> 00:21:18,170
we do is we go back to our feature Flags

00:21:14,240 --> 00:21:20,120
module and we replace the conditional

00:21:18,170 --> 00:21:22,820
and in time travel enabled which is true

00:21:20,120 --> 00:21:25,400
and we committed we deploy it so that's

00:21:22,820 --> 00:21:27,680
how we release the new feature if you

00:21:25,400 --> 00:21:30,370
haven't done anything like this I highly

00:21:27,680 --> 00:21:33,710
recommend trying it is really awesome

00:21:30,370 --> 00:21:35,450
the having to commit code to release the

00:21:33,710 --> 00:21:36,980
feature might not feel great to you

00:21:35,450 --> 00:21:38,600
there's a couple libraries out there

00:21:36,980 --> 00:21:41,090
which I highly recommend checking out as

00:21:38,600 --> 00:21:42,740
well flipper and rollout and they just

00:21:41,090 --> 00:21:43,820
allow you to do that dynamically you can

00:21:42,740 --> 00:21:47,150
start you can say okay I want to roll

00:21:43,820 --> 00:21:48,470
out features to 10% of my users or you

00:21:47,150 --> 00:21:49,970
could define groups like you got an

00:21:48,470 --> 00:21:51,440
early access group and allow people to

00:21:49,970 --> 00:21:53,570
opt into that

00:21:51,440 --> 00:22:02,929
and then and then they can see those new

00:21:53,570 --> 00:22:07,070
features so migrating to Ruby 1:9 are

00:22:02,929 --> 00:22:09,350
now 2.0 has been quite an interesting

00:22:07,070 --> 00:22:11,240
challenge it was you know people knew

00:22:09,350 --> 00:22:15,860
for a long time that that github was

00:22:11,240 --> 00:22:17,049
still on Ruby 1/8 and rails 2 which I'll

00:22:15,860 --> 00:22:20,389
talk more about in a second

00:22:17,049 --> 00:22:22,759
so the path to 1 9 was was pretty long I

00:22:20,389 --> 00:22:24,169
think it took us about six months but

00:22:22,759 --> 00:22:26,509
the first step was simply running

00:22:24,169 --> 00:22:28,850
continuous integration our tests against

00:22:26,509 --> 00:22:30,649
both Ruby 1 8 + 1 9 so every time we'd

00:22:28,850 --> 00:22:32,450
commit and deploy the test would run

00:22:30,649 --> 00:22:33,919
against both of them and obviously right

00:22:32,450 --> 00:22:35,389
away like all the tests failed like I

00:22:33,919 --> 00:22:37,309
don't even think like bootstrap finished

00:22:35,389 --> 00:22:39,200
because we had like dependencies unlike

00:22:37,309 --> 00:22:42,529
system timer or some some other gem that

00:22:39,200 --> 00:22:45,440
was 1/8 only and then at some point like

00:22:42,529 --> 00:22:48,429
some magic happened and now we're on 1/9

00:22:45,440 --> 00:22:48,429
that's how it works

00:22:49,600 --> 00:22:56,470
now I turned out step 2 was actually TMM

00:22:52,940 --> 00:22:58,399
one man Gupta is a hero at github

00:22:56,470 --> 00:23:01,279
seriously one of the smartest people I

00:22:58,399 --> 00:23:02,779
think I've ever met but he spent a lot

00:23:01,279 --> 00:23:05,389
of time working on this and what he

00:23:02,779 --> 00:23:07,220
would do was you know run the test we'd

00:23:05,389 --> 00:23:08,960
run tests against both he'd look at the

00:23:07,220 --> 00:23:12,019
test output figure out what was causing

00:23:08,960 --> 00:23:14,539
the test to not run and he'd fix it so

00:23:12,019 --> 00:23:17,659
like system timer gem doesn't work so in

00:23:14,539 --> 00:23:21,080
your gem file you say ok only for Ruby 1

00:23:17,659 --> 00:23:23,299
8 include this gem you fixed that you

00:23:21,080 --> 00:23:24,620
deploy it and the important part was he

00:23:23,299 --> 00:23:26,690
was constantly emerging that stuff back

00:23:24,620 --> 00:23:29,750
into master so we got our test run

00:23:26,690 --> 00:23:30,950
against Ruby 1 8 + 1 9 got him to a

00:23:29,750 --> 00:23:33,110
point where that where they were both

00:23:30,950 --> 00:23:35,659
green simply by doing that one thing at

00:23:33,110 --> 00:23:37,429
a time but it's important I mean it

00:23:35,659 --> 00:23:39,500
since he spent six months on it it would

00:23:37,429 --> 00:23:41,539
have been a disaster if he had done that

00:23:39,500 --> 00:23:44,299
in a separate branch and kept trying to

00:23:41,539 --> 00:23:45,950
keep it merged you know not to date so

00:23:44,299 --> 00:23:47,120
he just did it one one one thing at a

00:23:45,950 --> 00:23:51,529
time

00:23:47,120 --> 00:23:54,049
making fewer and fewer tests fail so in

00:23:51,529 --> 00:23:56,360
the past - Ruby - oh is the same run CI

00:23:54,049 --> 00:23:59,059
against all three versions and we were

00:23:56,360 --> 00:24:01,250
for a while because github Enterprise

00:23:59,059 --> 00:24:02,470
was still in 1/8 they they just finally

00:24:01,250 --> 00:24:03,460
are now make her

00:24:02,470 --> 00:24:07,059
we're finally making the transition to

00:24:03,460 --> 00:24:10,270
1/9 on on giddap enterprise but we have

00:24:07,059 --> 00:24:13,030
github.com and a couple other projects

00:24:10,270 --> 00:24:15,880
are already green on ruby 2.0 using the

00:24:13,030 --> 00:24:17,110
same method so and yet I mean the nice

00:24:15,880 --> 00:24:20,590
thing about this is that for the most

00:24:17,110 --> 00:24:23,860
part Ruby - Oh Ruby 1:9 are somewhat

00:24:20,590 --> 00:24:25,990
backward compatible with with 1/8 which

00:24:23,860 --> 00:24:29,080
allows us to make our test pass with all

00:24:25,990 --> 00:24:31,830
three versions so we saw some

00:24:29,080 --> 00:24:34,539
performance gains by switching to 1/9

00:24:31,830 --> 00:24:37,539
you know the average CPU response time

00:24:34,539 --> 00:24:39,070
went down by 25 for 25 milliseconds for

00:24:37,539 --> 00:24:41,919
people that like graphs it looked like

00:24:39,070 --> 00:24:43,900
this there's a little you can see where

00:24:41,919 --> 00:24:45,970
we we deployed 1/9 there's where's the

00:24:43,900 --> 00:24:48,309
dip and then it goes right back up we

00:24:45,970 --> 00:24:50,710
actually hit a GC bug in Ruby 1/9 and

00:24:48,309 --> 00:24:53,289
Amon had to patch that and some

00:24:50,710 --> 00:24:56,980
submitted upstream so we got it we got

00:24:53,289 --> 00:24:59,919
some good performance gains out of it so

00:24:56,980 --> 00:25:04,799
rails 3 is a bit of a challenge

00:24:59,919 --> 00:25:09,159
github comm is still on rails 2.3 and

00:25:04,799 --> 00:25:10,390
unlike upgrading Ruby we can't you know

00:25:09,159 --> 00:25:12,130
it's not really possible to get your

00:25:10,390 --> 00:25:14,010
test passing against both right because

00:25:12,130 --> 00:25:16,630
they're declared - gem dependencies so

00:25:14,010 --> 00:25:18,490
we've had to take a similar but

00:25:16,630 --> 00:25:21,520
different approach to that we do have a

00:25:18,490 --> 00:25:24,909
rails 3 branch and what we've started

00:25:21,520 --> 00:25:27,070
doing is backporting some of the api's

00:25:24,909 --> 00:25:30,250
so we maintain we maintain a fork of

00:25:27,070 --> 00:25:31,630
rails rails 2 3 and in there we've

00:25:30,250 --> 00:25:33,400
started to try and back board some of

00:25:31,630 --> 00:25:36,520
the rails 3 api so that we can at least

00:25:33,400 --> 00:25:38,530
make our code compatible with both and

00:25:36,520 --> 00:25:40,950
where we can't pull it into rails itself

00:25:38,530 --> 00:25:44,110
we'll try and pull it into github comm

00:25:40,950 --> 00:25:45,640
so so that backports in progress it's

00:25:44,110 --> 00:25:48,159
just really painful like trying to pull

00:25:45,640 --> 00:25:50,860
back like action mailer api the changes

00:25:48,159 --> 00:25:53,260
to active record and make rails 2 in

00:25:50,860 --> 00:25:55,480
rails 3 look to be the same and so at

00:25:53,260 --> 00:25:57,070
some point that rails 3 branch which

00:25:55,480 --> 00:26:00,760
we're keeping up-to-date up-to-date with

00:25:57,070 --> 00:26:02,799
master his Pat will be passing and then

00:26:00,760 --> 00:26:04,630
then we can start to try and deploy it

00:26:02,799 --> 00:26:06,970
the challenge to with deploying that's

00:26:04,630 --> 00:26:09,070
production is there's pretty significant

00:26:06,970 --> 00:26:10,750
performance issues

00:26:09,070 --> 00:26:13,299
well not issues but difference in

00:26:10,750 --> 00:26:15,070
performance with rails 3 so we couldn't

00:26:13,299 --> 00:26:16,080
just roll it out and say you know let's

00:26:15,070 --> 00:26:18,100
hope that it doesn't

00:26:16,080 --> 00:26:20,470
so we're gonna figure out how to roll it

00:26:18,100 --> 00:26:26,620
out slowly and see the performance side

00:26:20,470 --> 00:26:29,200
effects so that's all I'm curious if you

00:26:26,620 --> 00:26:32,640
guys have any other questions excellent

00:26:29,200 --> 00:26:32,640

YouTube URL: https://www.youtube.com/watch?v=5vUD9Zg7gp0


