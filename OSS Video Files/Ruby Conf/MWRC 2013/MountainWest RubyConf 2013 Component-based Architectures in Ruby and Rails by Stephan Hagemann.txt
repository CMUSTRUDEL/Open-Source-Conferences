Title: MountainWest RubyConf 2013 Component-based Architectures in Ruby and Rails by Stephan Hagemann
Publication date: 2020-01-28
Playlist: MWRC 2013
Description: 
	It's true that goods are better distributable when they are in packages. That is the common view of what Ruby gems and Rails engines are: packages for distribution. This perception misses the great value that comes from packaging without distribution. That is what makes component-based architectures: a helpful tool for organizing growing codebases. We'll talk about how to do this with (and without) Ruby on Rails.
Ruby makes it a bit hard to do packages right: you really can't hide anything. Rails doesn't want you to do it. I don't care. We'll do it anyways and it will be awesome!

Help us caption & translate this video!

http://amara.org/v/FGbY/
Captions: 
	00:00:19,750 --> 00:00:26,539
thanks Mike thanks for the invitation I

00:00:23,650 --> 00:00:28,640
want to start with a picture from this

00:00:26,539 --> 00:00:31,220
building which I have to say I that I

00:00:28,640 --> 00:00:33,350
love this this venue and especially this

00:00:31,220 --> 00:00:37,400
building and especially when it's not on

00:00:33,350 --> 00:00:39,949
fire and I think we were really dumb

00:00:37,400 --> 00:00:43,460
yesterday but so if it starts beeping I

00:00:39,949 --> 00:00:45,110
will be leaving this time this is if you

00:00:43,460 --> 00:00:47,360
if you have not done it I suggest you

00:00:45,110 --> 00:00:51,670
walk up this this round arc you can walk

00:00:47,360 --> 00:00:55,040
all of it all the way up to the top and

00:00:51,670 --> 00:00:57,229
on that walk you will see that stair

00:00:55,040 --> 00:00:59,900
somewhere where it says the beginning I

00:00:57,229 --> 00:01:02,589
want the beginning of my talk to be the

00:00:59,900 --> 00:01:06,799
end of my last talk on a very similar

00:01:02,589 --> 00:01:08,299
topic and that was an idea and that I

00:01:06,799 --> 00:01:10,070
was proposing and that was the

00:01:08,299 --> 00:01:13,250
realization first of all that every gym

00:01:10,070 --> 00:01:15,890
that you start you start the gym starts

00:01:13,250 --> 00:01:17,509
with the name space when you develop a

00:01:15,890 --> 00:01:21,110
rails app you never start with a name

00:01:17,509 --> 00:01:22,759
space and so if you compare the two a

00:01:21,110 --> 00:01:27,620
gym is like a box and you put a little

00:01:22,759 --> 00:01:30,200
label on it and a rails app is let's say

00:01:27,620 --> 00:01:31,340
gorgeous infinite nothingness and with

00:01:30,200 --> 00:01:36,620
all the bells and whistles of active

00:01:31,340 --> 00:01:39,020
active everything to get a gauge of how

00:01:36,620 --> 00:01:43,310
relevant that is who rides rails apps on

00:01:39,020 --> 00:01:45,560
a daily basis that's about two-thirds

00:01:43,310 --> 00:01:49,909
maybe three-quarters and who rides Ruby

00:01:45,560 --> 00:01:53,150
but never touches rails that's way less

00:01:49,909 --> 00:01:54,500
ok but it's still a few so I hope I have

00:01:53,150 --> 00:01:56,000
the feeling that for the second group

00:01:54,500 --> 00:01:59,420
what I'm going to say is going to apply

00:01:56,000 --> 00:02:02,659
a little bit less maybe because of not

00:01:59,420 --> 00:02:05,210
Rails not being around but so the idea

00:02:02,659 --> 00:02:07,280
from from my last talk was the next time

00:02:05,210 --> 00:02:10,819
you start an app just put everything in

00:02:07,280 --> 00:02:13,220
a namespace and I end it with this what

00:02:10,819 --> 00:02:14,870
I found to be an awesome finishing slide

00:02:13,220 --> 00:02:18,290
give yourself a box so you can start

00:02:14,870 --> 00:02:21,200
thinking outside of it with the idea

00:02:18,290 --> 00:02:22,819
that if you have a gym and you you give

00:02:21,200 --> 00:02:25,010
something a name and you put things

00:02:22,819 --> 00:02:27,770
inside of it you can open that box and

00:02:25,010 --> 00:02:29,840
you can go WTF when you find something

00:02:27,770 --> 00:02:31,730
that obviously doesn't fit in the box if

00:02:29,840 --> 00:02:32,590
you do that try to do that with a rails

00:02:31,730 --> 00:02:34,120
app

00:02:32,590 --> 00:02:36,610
you don't have a box you don't have a

00:02:34,120 --> 00:02:39,610
name so everything's gonna fit the best

00:02:36,610 --> 00:02:42,129
game you can play is what doesn't belong

00:02:39,610 --> 00:02:44,170
with the others you know I don't know

00:02:42,129 --> 00:02:45,910
red/green loud what doesn't belong with

00:02:44,170 --> 00:02:47,620
the others and you're gonna know it's

00:02:45,910 --> 00:02:48,910
loud but if you look at your typical

00:02:47,620 --> 00:02:51,700
rails then what are you gonna have

00:02:48,910 --> 00:02:55,750
you're gonna have a user I don't know

00:02:51,700 --> 00:02:57,580
company rolls and then I don't know the

00:02:55,750 --> 00:03:00,400
tulip pricing engine that you wrote and

00:02:57,580 --> 00:03:03,430
then the the marketing part for that and

00:03:00,400 --> 00:03:05,349
in a store you're gonna tell me that you

00:03:03,430 --> 00:03:07,690
can still play that game and find out

00:03:05,349 --> 00:03:10,360
what may or may not belong to this app

00:03:07,690 --> 00:03:13,150
it's very hard just because it kind of

00:03:10,360 --> 00:03:15,489
pushes in the direction of just putting

00:03:13,150 --> 00:03:19,180
our app putting all of our app in there

00:03:15,489 --> 00:03:20,650
so what I want to talk about today is

00:03:19,180 --> 00:03:25,269
component based Ruby and rails

00:03:20,650 --> 00:03:29,250
architectures and I promise you I put

00:03:25,269 --> 00:03:31,450
this slide in before that happened if I

00:03:29,250 --> 00:03:34,299
may want this button more desperately

00:03:31,450 --> 00:03:35,799
than you trust me um but stop me if I'm

00:03:34,299 --> 00:03:37,269
going too fast

00:03:35,799 --> 00:03:39,220
because I want to talk about large

00:03:37,269 --> 00:03:43,810
applications and one thing I heard about

00:03:39,220 --> 00:03:46,269
them is you just never build them so I

00:03:43,810 --> 00:03:48,730
work for pivotal labs and we maybe start

00:03:46,269 --> 00:03:50,260
a new project every few weeks and many

00:03:48,730 --> 00:03:53,230
of them are greenfield so many of them

00:03:50,260 --> 00:03:54,910
are tiny when we start but you heard

00:03:53,230 --> 00:03:57,880
from Matt yesterday we have pretty big

00:03:54,910 --> 00:03:59,560
apps as well and for every app since

00:03:57,880 --> 00:04:01,299
kind of our definition of success is

00:03:59,560 --> 00:04:04,150
that a client can stay successful after

00:04:01,299 --> 00:04:06,099
we leave what we have to strive for is

00:04:04,150 --> 00:04:08,680
some sort of architecture where you can

00:04:06,099 --> 00:04:10,060
develop an application well over time so

00:04:08,680 --> 00:04:11,980
we have to think about the app being

00:04:10,060 --> 00:04:12,970
larger than it is when while we develop

00:04:11,980 --> 00:04:18,340
it

00:04:12,970 --> 00:04:20,169
despite TDD and all sandy Mets wrote her

00:04:18,340 --> 00:04:21,910
awesome book last year and gave a few

00:04:20,169 --> 00:04:23,229
talks and the one that I was she I don't

00:04:21,910 --> 00:04:24,580
know if she said it in other talks as

00:04:23,229 --> 00:04:25,150
well but she said your app is out to

00:04:24,580 --> 00:04:26,950
kill you

00:04:25,150 --> 00:04:28,539
you know the growing complexity of your

00:04:26,950 --> 00:04:30,729
app is going to chase you and if the app

00:04:28,539 --> 00:04:36,220
were a bull you might feel like that guy

00:04:30,729 --> 00:04:38,050
and that is very exciting you know for

00:04:36,220 --> 00:04:41,770
the next second that is exciting for the

00:04:38,050 --> 00:04:44,770
next hours or days that is painful

00:04:41,770 --> 00:04:46,300
who has okay this is maybe a bit drastic

00:04:44,770 --> 00:04:50,050
but who has felt like there

00:04:46,300 --> 00:04:52,599
was behaving like that bowl to them okay

00:04:50,050 --> 00:04:55,629
so I have felt like that as well they

00:04:52,599 --> 00:04:58,419
they're not typically that fast quite

00:04:55,629 --> 00:05:00,430
the opposite but they behave like

00:04:58,419 --> 00:05:02,919
something that year that is too big to

00:05:00,430 --> 00:05:07,030
handle so what I want to get to is for

00:05:02,919 --> 00:05:13,180
us to be more like this guy calmer in

00:05:07,030 --> 00:05:14,979
control with sunglasses and a hat but I

00:05:13,180 --> 00:05:20,259
don't really like bullfighting so I

00:05:14,979 --> 00:05:22,419
actually want us to be this guy just

00:05:20,259 --> 00:05:24,819
hanging out and I have to admit I'm

00:05:22,419 --> 00:05:26,800
somewhat at being a consultant I'm so

00:05:24,819 --> 00:05:29,020
I'm a little bit maybe that mercenary I

00:05:26,800 --> 00:05:31,719
want to go home at 5:00 on a Friday

00:05:29,020 --> 00:05:34,629
night and I think this guy is probably

00:05:31,719 --> 00:05:37,240
the one who's going to do that the most

00:05:34,629 --> 00:05:41,740
successfully because he's he's just fine

00:05:37,240 --> 00:05:43,120
probably all week long so um this never

00:05:41,740 --> 00:05:45,069
built large apps is part of a larger

00:05:43,120 --> 00:05:46,810
quote from Justin Meyer the secret to

00:05:45,069 --> 00:05:49,000
building large apps he says is never

00:05:46,810 --> 00:05:50,680
built large apps instead break your

00:05:49,000 --> 00:05:52,389
application into small pieces then

00:05:50,680 --> 00:05:57,509
assemble those testable bite-sized

00:05:52,389 --> 00:05:59,650
pieces into your big application but how

00:05:57,509 --> 00:06:06,009
he was I think talking about JavaScript

00:05:59,650 --> 00:06:07,539
I'm talking about Ruby and rails you can

00:06:06,009 --> 00:06:11,259
tell from the font that you're supposed

00:06:07,539 --> 00:06:14,380
to read this slide so this I'm going to

00:06:11,259 --> 00:06:17,169
use a tiny sample application throughout

00:06:14,380 --> 00:06:19,930
this talk and this is where you can find

00:06:17,169 --> 00:06:21,490
it if you cannot read this after all

00:06:19,930 --> 00:06:23,469
just search for github and the next big

00:06:21,490 --> 00:06:26,379
thing and I think it comes up first I

00:06:23,469 --> 00:06:28,779
promise this thing is tiny and it does

00:06:26,379 --> 00:06:31,779
only one thing so it's an announcement

00:06:28,779 --> 00:06:33,849
page you can announce whatever you have

00:06:31,779 --> 00:06:39,060
to announce it people can sign up for

00:06:33,849 --> 00:06:41,259
updates so I can I actually don't know I

00:06:39,060 --> 00:06:43,060
spelt with two n but I don't know if my

00:06:41,259 --> 00:06:46,210
twitter handle is only one well see

00:06:43,060 --> 00:06:48,039
that's how often I Twitter a tweet so

00:06:46,210 --> 00:06:50,440
the sort of things you for signing up

00:06:48,039 --> 00:06:52,960
and I just press return and when I made

00:06:50,440 --> 00:06:54,880
this sample app I had to come up with a

00:06:52,960 --> 00:06:56,620
little bit more than just that to

00:06:54,880 --> 00:06:59,060
actually have something to move around

00:06:56,620 --> 00:07:00,830
so I realized pressing return

00:06:59,060 --> 00:07:02,510
makes it really easy for me to do that

00:07:00,830 --> 00:07:04,130
many many times but of course I only

00:07:02,510 --> 00:07:07,130
want my email address to be registered

00:07:04,130 --> 00:07:09,940
once so I thought I'll give the server

00:07:07,130 --> 00:07:12,470
the ability to kind of feed back the

00:07:09,940 --> 00:07:14,330
level of annoyance that it feels while

00:07:12,470 --> 00:07:17,840
you're just continuing to press return

00:07:14,330 --> 00:07:20,080
and annoying it so at some point it'll

00:07:17,840 --> 00:07:22,190
just it'll just freak out

00:07:20,080 --> 00:07:27,350
there's the freakout picture didn't come

00:07:22,190 --> 00:07:30,740
let's try again yeah the word let's go

00:07:27,350 --> 00:07:32,860
um it's an awesome picture of a guy with

00:07:30,740 --> 00:07:36,470
a lot of hair doh

00:07:32,860 --> 00:07:38,950
okay so I need your help though I need

00:07:36,470 --> 00:07:41,389
you to imagine something really big

00:07:38,950 --> 00:07:45,110
because that app is tiny and I'm going

00:07:41,389 --> 00:07:47,479
to make examples of refactorings or Ray

00:07:45,110 --> 00:07:49,970
architect rings that don't make sense in

00:07:47,479 --> 00:07:52,340
that so bear with me and always imagine

00:07:49,970 --> 00:07:54,950
something very big I'm going to go

00:07:52,340 --> 00:08:00,080
through three not three eight ways of

00:07:54,950 --> 00:08:02,210
architecting this application and I have

00:08:00,080 --> 00:08:05,680
roughly two minutes or so let's start

00:08:02,210 --> 00:08:09,620
with number one if you check out that

00:08:05,680 --> 00:08:14,660
github project you will find those eight

00:08:09,620 --> 00:08:18,190
steps as tags and you can roughly follow

00:08:14,660 --> 00:08:22,160
the steps that I'm taking

00:08:18,190 --> 00:08:23,930
okay so first one is a normal business

00:08:22,160 --> 00:08:25,850
application it's all in one let's look

00:08:23,930 --> 00:08:29,810
what's happening there is a teas

00:08:25,850 --> 00:08:31,820
controller here has two actions new and

00:08:29,810 --> 00:08:34,099
create and let's briefly see what

00:08:31,820 --> 00:08:35,780
happens it's no surprise it's not a well

00:08:34,099 --> 00:08:39,320
written method John would perfecter this

00:08:35,780 --> 00:08:43,940
right nice Oh so we're trying to find

00:08:39,320 --> 00:08:47,990
the entry that you you gave this this

00:08:43,940 --> 00:08:51,170
form if we find it we update a tries on

00:08:47,990 --> 00:08:53,180
that entry and we put it into this

00:08:51,170 --> 00:08:55,730
annoyance meter it'll tell us how

00:08:53,180 --> 00:08:58,040
annoyed we are at this point and we'll

00:08:55,730 --> 00:09:00,140
feed that back to the to the client if

00:08:58,040 --> 00:09:01,670
we don't find the entry we're just going

00:09:00,140 --> 00:09:04,459
to say thanks for signing up and and

00:09:01,670 --> 00:09:07,220
then there's a bit of you know caching

00:09:04,459 --> 00:09:08,570
of unexpected cases but that's pretty

00:09:07,220 --> 00:09:11,300
much what's going on in this controller

00:09:08,570 --> 00:09:12,100
now there is a there's a model back in

00:09:11,300 --> 00:09:14,980
this it's entry

00:09:12,100 --> 00:09:16,779
has the email address and a number of

00:09:14,980 --> 00:09:19,089
tries and there's this annoyance meter

00:09:16,779 --> 00:09:22,209
which content of which is not really

00:09:19,089 --> 00:09:26,290
important it just derives a new string

00:09:22,209 --> 00:09:30,370
out of these these counts so I I suspect

00:09:26,290 --> 00:09:34,329
that everyone has seen this and I will

00:09:30,370 --> 00:09:36,009
for the for this talk have to assure you

00:09:34,329 --> 00:09:37,630
that in every one of these stages you

00:09:36,009 --> 00:09:39,550
can run the tests and if I didn't pick

00:09:37,630 --> 00:09:42,610
the wrong commit then they will they

00:09:39,550 --> 00:09:45,040
will pass so I have tests but I won't

00:09:42,610 --> 00:09:48,519
show them I will just be moving them

00:09:45,040 --> 00:09:52,750
around for every stage and adding new

00:09:48,519 --> 00:09:55,029
ones where there is a new a new test to

00:09:52,750 --> 00:09:57,069
be written I remember I said this

00:09:55,029 --> 00:09:59,350
beginning and reading of every rails app

00:09:57,069 --> 00:10:04,240
it's kind of this this infinite void a

00:09:59,350 --> 00:10:06,880
good picture for that is probably a big

00:10:04,240 --> 00:10:08,110
dump site and I've already asked you if

00:10:06,880 --> 00:10:09,910
you ever felt like the guy in front of

00:10:08,110 --> 00:10:13,240
the bowl and maybe also felt like the

00:10:09,910 --> 00:10:16,959
driver in that bulldozer or whatever

00:10:13,240 --> 00:10:18,939
that is the the reason I'm saying that

00:10:16,959 --> 00:10:21,870
about this tiny app is that there's two

00:10:18,939 --> 00:10:24,279
things in there that are now

00:10:21,870 --> 00:10:26,949
indistinguishable if you look at it from

00:10:24,279 --> 00:10:28,569
like 30,000 feet as to what they do how

00:10:26,949 --> 00:10:31,899
they're connected if they have any

00:10:28,569 --> 00:10:33,970
structure it pretty much doesn't exist

00:10:31,899 --> 00:10:36,220
so for all intents and purposes if you

00:10:33,970 --> 00:10:40,779
just multiply extrapolate from these two

00:10:36,220 --> 00:10:42,550
two classes to say 50 or 100 you have no

00:10:40,779 --> 00:10:45,329
clue who's interacting with whom what's

00:10:42,550 --> 00:10:45,329
going on and why

00:10:45,779 --> 00:10:50,019
unfortunately that this doesn't look

00:10:47,649 --> 00:10:53,410
very chaotic but if you if I were to

00:10:50,019 --> 00:10:54,819
write a hundred class names here it

00:10:53,410 --> 00:10:56,920
would be chaotic and you would not be

00:10:54,819 --> 00:10:59,189
able to assess any sort of structure

00:10:56,920 --> 00:11:02,680
just by looking at those those classes

00:10:59,189 --> 00:11:07,360
so a first way of getting structure into

00:11:02,680 --> 00:11:08,290
this application is modules the plus we

00:11:07,360 --> 00:11:12,759
get from that is a higher-level

00:11:08,290 --> 00:11:17,769
structure so and you've all probably

00:11:12,759 --> 00:11:19,329
seen this one too not much changes the

00:11:17,769 --> 00:11:21,579
controller doesn't change it all except

00:11:19,329 --> 00:11:25,550
it now references to entry and the

00:11:21,579 --> 00:11:29,480
annoyance meter within their namespaces

00:11:25,550 --> 00:11:31,400
the annoyance meter the annoyance left

00:11:29,480 --> 00:11:32,840
the class name it's now on a module I

00:11:31,400 --> 00:11:36,650
moved some other stuff around that was

00:11:32,840 --> 00:11:40,910
mainly for testing so we now have this

00:11:36,650 --> 00:11:42,980
structure and if we come back to this

00:11:40,910 --> 00:11:45,440
analogy then maybe we have moved from a

00:11:42,980 --> 00:11:47,540
dump site to a recycling yard and

00:11:45,440 --> 00:11:49,160
recycling yards are awesome I should

00:11:47,540 --> 00:11:51,230
know this because I remodeled my house

00:11:49,160 --> 00:11:54,380
and you visit those places very often

00:11:51,230 --> 00:11:55,970
when you do you can point to a corner of

00:11:54,380 --> 00:11:58,910
the recycling yard and say that's where

00:11:55,970 --> 00:12:00,530
the scrap metal is however if you've

00:11:58,910 --> 00:12:02,570
ever gone to such a place you also know

00:12:00,530 --> 00:12:03,980
that you stick the heart to recycle

00:12:02,570 --> 00:12:05,960
stuff under your car because you're not

00:12:03,980 --> 00:12:09,320
a nice citizen and then you try to pawn

00:12:05,960 --> 00:12:10,760
it off to the recycling yard because you

00:12:09,320 --> 00:12:13,010
just want to get rid of it in so hard to

00:12:10,760 --> 00:12:15,650
get rid of people do that all the time

00:12:13,010 --> 00:12:17,780
stand in front of the clean wood and

00:12:15,650 --> 00:12:20,420
then suddenly nonce not so clean what

00:12:17,780 --> 00:12:23,630
gets thrown on top what does that mean

00:12:20,420 --> 00:12:25,580
for code it means there is structure I

00:12:23,630 --> 00:12:28,280
have now an email signup module and a

00:12:25,580 --> 00:12:29,870
annoyance module that in that is more

00:12:28,280 --> 00:12:31,960
our more classes but there is no

00:12:29,870 --> 00:12:35,720
guarantee that these classes are

00:12:31,960 --> 00:12:37,670
independent or be you know are actually

00:12:35,720 --> 00:12:39,950
doing what they say I can't prove it

00:12:37,670 --> 00:12:42,310
that's why I kind of you know put the

00:12:39,950 --> 00:12:45,380
with the rectangles over each other but

00:12:42,310 --> 00:12:46,700
at least I I didn't have to write entry

00:12:45,380 --> 00:12:49,520
anymore because I now have a higher

00:12:46,700 --> 00:12:56,690
level concept that being this email

00:12:49,520 --> 00:12:58,670
signup module the third step is what I

00:12:56,690 --> 00:13:00,800
want to call or if I want to improve on

00:12:58,670 --> 00:13:02,510
this then I've already kind of hinted at

00:13:00,800 --> 00:13:05,090
it I would like to go the next step

00:13:02,510 --> 00:13:08,690
which is prove that these two pieces are

00:13:05,090 --> 00:13:13,100
independent I call it the gem component

00:13:08,690 --> 00:13:18,980
app and I may need to explain a little

00:13:13,100 --> 00:13:21,050
bit more about this step so first off

00:13:18,980 --> 00:13:21,620
you're not seeing that engines folder

00:13:21,050 --> 00:13:22,910
right there

00:13:21,620 --> 00:13:26,420
we're not looking at that we're looking

00:13:22,910 --> 00:13:28,940
at the annoyance jet so I made a folder

00:13:26,420 --> 00:13:31,640
gems and I put an annoyance folder in

00:13:28,940 --> 00:13:34,070
there actually this is a complete folder

00:13:31,640 --> 00:13:35,570
structure of a gym we have a gem spec it

00:13:34,070 --> 00:13:36,579
defines our annoyance gem and I should

00:13:35,570 --> 00:13:39,730
fill probably

00:13:36,579 --> 00:13:41,079
in this data but there is a gem file

00:13:39,730 --> 00:13:43,839
which tells us that we're running tests

00:13:41,079 --> 00:13:45,220
with r-spec and magically this may be

00:13:43,839 --> 00:13:48,069
the only time we need to look at tests

00:13:45,220 --> 00:13:49,899
now I have tests now in this gem that if

00:13:48,069 --> 00:13:53,589
I go into that subfolder I can now

00:13:49,899 --> 00:13:55,480
independently run and because of the way

00:13:53,589 --> 00:13:59,230
our spec will load these files I can

00:13:55,480 --> 00:14:01,299
prove to you that these tests for the

00:13:59,230 --> 00:14:03,519
levels and the meter of the annoyance

00:14:01,299 --> 00:14:06,129
will pass without knowing about email

00:14:03,519 --> 00:14:07,600
sign up again doesn't matter here it

00:14:06,129 --> 00:14:09,999
matters a whole lot if you're dealing

00:14:07,600 --> 00:14:12,129
with with tens or hundreds of files I

00:14:09,999 --> 00:14:16,600
can prove that this thing is independent

00:14:12,129 --> 00:14:19,119
now I'm curious how many have seen like

00:14:16,600 --> 00:14:23,049
just shoving a gym like this into the

00:14:19,119 --> 00:14:26,199
subfolder of an of an app okay that's

00:14:23,049 --> 00:14:28,660
not so everyone else should should start

00:14:26,199 --> 00:14:31,299
doing that so you could ask me two good

00:14:28,660 --> 00:14:34,299
questions one is why am I not getting

00:14:31,299 --> 00:14:36,249
good sub modules I'm not smart enough is

00:14:34,299 --> 00:14:38,230
the answer to that why am I not using a

00:14:36,249 --> 00:14:40,989
different repository I'm too lazy the

00:14:38,230 --> 00:14:43,899
answer to that you can just do this so

00:14:40,989 --> 00:14:46,269
how do I use it in the application the

00:14:43,899 --> 00:14:49,629
gem file of the main application you're

00:14:46,269 --> 00:14:51,610
not seeing this line deletion is now

00:14:49,629 --> 00:14:54,299
just pointing to an annoyance gym and

00:14:51,610 --> 00:14:57,189
it's just referring to it by its path

00:14:54,299 --> 00:14:57,819
that's all there is to it this this will

00:14:57,189 --> 00:15:00,759
be loaded

00:14:57,819 --> 00:15:07,269
I can I can access it like before and if

00:15:00,759 --> 00:15:10,480
I look into the t's controller we are

00:15:07,269 --> 00:15:12,639
still down here just loading that

00:15:10,480 --> 00:15:14,529
annoyance meter nothing else special has

00:15:12,639 --> 00:15:18,519
happened the only thing that happened if

00:15:14,529 --> 00:15:21,369
we go back to this to these slides is we

00:15:18,519 --> 00:15:23,049
now have provably independent tests we

00:15:21,369 --> 00:15:24,249
have provably independent code within

00:15:23,049 --> 00:15:27,819
that one component that we just

00:15:24,249 --> 00:15:30,579
extracted and in in the words of Eric

00:15:27,819 --> 00:15:32,739
Evans choose modules that tell the story

00:15:30,579 --> 00:15:35,079
of the system and contain a cohesive set

00:15:32,739 --> 00:15:37,689
of concepts we are now able to prove

00:15:35,079 --> 00:15:40,059
that a set of concepts namely within

00:15:37,689 --> 00:15:44,589
that gem is independent of the others

00:15:40,059 --> 00:15:49,530
and I think that is a great value I was

00:15:44,589 --> 00:15:51,180
in Iceland last weekend and I think it's

00:15:49,530 --> 00:15:53,460
I found something funny I want to put

00:15:51,180 --> 00:15:55,500
these slides so it's good for push and

00:15:53,460 --> 00:15:57,750
pull to be so explicit but if you look

00:15:55,500 --> 00:15:59,790
at the doors it's actually not that

00:15:57,750 --> 00:16:01,560
explicit as to what they do they didn't

00:15:59,790 --> 00:16:06,090
know that you know how to operate this

00:16:01,560 --> 00:16:10,650
door but now look at icelandic signs you

00:16:06,090 --> 00:16:12,330
know how to open these doors you know

00:16:10,650 --> 00:16:14,490
they scream at you this is how you open

00:16:12,330 --> 00:16:18,780
me you might also rip them apart but you

00:16:14,490 --> 00:16:21,060
know yeah so if for the structure of the

00:16:18,780 --> 00:16:23,340
app now there is a second component and

00:16:21,060 --> 00:16:24,780
I you know it's it's getting it's

00:16:23,340 --> 00:16:27,420
getting to be bold because it is

00:16:24,780 --> 00:16:32,820
provably independent we still have that

00:16:27,420 --> 00:16:35,490
email signup around and so we got a

00:16:32,820 --> 00:16:42,710
little bit more structure is that cool

00:16:35,490 --> 00:16:42,710
so far okay so let's do that

00:16:54,149 --> 00:17:01,990
now gems make up a portion of apps but

00:16:59,649 --> 00:17:06,309
if I have dependencies towards anything

00:17:01,990 --> 00:17:10,000
rails I have to do a lot of homework

00:17:06,309 --> 00:17:11,470
myself but in the next step what I want

00:17:10,000 --> 00:17:13,390
to call the rails component app I'm

00:17:11,470 --> 00:17:17,799
still going to do that for rails

00:17:13,390 --> 00:17:21,850
component so I want provable structure

00:17:17,799 --> 00:17:24,880
for rails the way to do this or easily

00:17:21,850 --> 00:17:26,289
is with rails engines if if a rails

00:17:24,880 --> 00:17:28,360
engine were actually a train engine

00:17:26,289 --> 00:17:30,250
right then Ruby a rails application

00:17:28,360 --> 00:17:32,140
would actually be trained so you might

00:17:30,250 --> 00:17:36,070
want to reconsider to call the whole

00:17:32,140 --> 00:17:39,760
thing Ruby in trains but I I still have

00:17:36,070 --> 00:17:42,010
to clarify I think that engines have

00:17:39,760 --> 00:17:44,260
still this wrong perception as being for

00:17:42,010 --> 00:17:46,929
pagination and generic administration

00:17:44,260 --> 00:17:47,950
and authentication they are not if you

00:17:46,929 --> 00:17:49,960
look at the docs

00:17:47,950 --> 00:17:52,149
it says rails engines allow you to wrap

00:17:49,960 --> 00:17:54,039
a specific rails application or a subset

00:17:52,149 --> 00:17:56,950
of functionality and share it with other

00:17:54,039 --> 00:17:59,409
applications or within a larger packaged

00:17:56,950 --> 00:18:01,149
application I should know because I

00:17:59,409 --> 00:18:04,360
pushed that change last time I gave talk

00:18:01,149 --> 00:18:06,190
like this it's very good that it says

00:18:04,360 --> 00:18:15,429
that now so let's look at what that

00:18:06,190 --> 00:18:17,320
means so now we have next to this gems

00:18:15,429 --> 00:18:20,830
folder we also have an engines folder

00:18:17,320 --> 00:18:23,529
and now you're allowed to notice that

00:18:20,830 --> 00:18:26,289
the app folder went away since we only

00:18:23,529 --> 00:18:27,970
have one controller and I just pulled

00:18:26,289 --> 00:18:30,460
something out there's no longer any

00:18:27,970 --> 00:18:34,630
necessity for this app to contain any

00:18:30,460 --> 00:18:36,070
code itself it only contains gems let's

00:18:34,630 --> 00:18:38,590
start with the with the more

00:18:36,070 --> 00:18:43,740
self-contained one email signup if we go

00:18:38,590 --> 00:18:47,799
in here there's still that entry and

00:18:43,740 --> 00:18:50,740
it's now within a module and within a

00:18:47,799 --> 00:18:53,559
gym which is incidentally also an engine

00:18:50,740 --> 00:18:55,360
which if you don't know a lot of about

00:18:53,559 --> 00:18:57,909
them check out the source code or find

00:18:55,360 --> 00:18:59,049
out about more I can't go into more

00:18:57,909 --> 00:19:01,539
detail but I'm happy to do that in

00:18:59,049 --> 00:19:03,760
questions so essentially this means I

00:19:01,539 --> 00:19:05,620
have my database migrations in here I

00:19:03,760 --> 00:19:07,830
have tests for this it runs

00:19:05,620 --> 00:19:07,830
independently

00:19:07,900 --> 00:19:18,039
and the main app as before just includes

00:19:14,830 --> 00:19:20,169
those gems and references them let's

00:19:18,039 --> 00:19:23,799
quickly look at the teaser because the

00:19:20,169 --> 00:19:25,990
teaser is now what contains the

00:19:23,799 --> 00:19:28,270
controller it did before and it actually

00:19:25,990 --> 00:19:30,580
also want to point out that screen is

00:19:28,270 --> 00:19:32,740
too small but that the teaser contains

00:19:30,580 --> 00:19:35,380
acid controllers and views in my example

00:19:32,740 --> 00:19:39,159
here it does not contain models because

00:19:35,380 --> 00:19:41,110
it doesn't have any data itself the

00:19:39,159 --> 00:19:44,250
email signup only has the mob it has

00:19:41,110 --> 00:19:44,250
only this entry thing

00:19:45,220 --> 00:19:49,720
the teaser thus must be getting that

00:19:47,049 --> 00:19:53,470
that data from somewhere else and indeed

00:19:49,720 --> 00:19:56,590
it does it to requires email signup to

00:19:53,470 --> 00:19:58,210
be present and it references that

00:19:56,590 --> 00:20:00,490
dependency of course in the Jim spec so

00:19:58,210 --> 00:20:03,340
that it's actually a valid Jim

00:20:00,490 --> 00:20:06,159
definition but within the controller I

00:20:03,340 --> 00:20:07,750
believe almost nothing has changed I

00:20:06,159 --> 00:20:09,340
also changed something about this entry

00:20:07,750 --> 00:20:10,960
manager if you look at the code you can

00:20:09,340 --> 00:20:12,309
find more about that here but

00:20:10,960 --> 00:20:18,250
essentially it's still the same we're

00:20:12,309 --> 00:20:19,779
still just accessing the entry so that's

00:20:18,250 --> 00:20:21,580
cool I shouldn't maybe look at the build

00:20:19,779 --> 00:20:27,640
scripts at this point or I should have

00:20:21,580 --> 00:20:29,230
done that a while ago but so since I

00:20:27,640 --> 00:20:32,770
have all these independent components I

00:20:29,230 --> 00:20:37,210
no longer just say our spec spec so the

00:20:32,770 --> 00:20:38,770
the top block there just runs everything

00:20:37,210 --> 00:20:40,510
in the main app which i think is just

00:20:38,770 --> 00:20:43,120
one test which kind of loads up the

00:20:40,510 --> 00:20:46,330
whole thing and sees that nothing breaks

00:20:43,120 --> 00:20:47,770
then we go into the email signup engine

00:20:46,330 --> 00:20:49,029
and have models fix there and then we go

00:20:47,770 --> 00:20:51,580
into the teaser engine and test the

00:20:49,029 --> 00:20:54,340
controllers then have requests in the

00:20:51,580 --> 00:20:55,779
teaser request fix Jasmine specs in the

00:20:54,340 --> 00:20:57,429
teaser and then still the test for the

00:20:55,779 --> 00:20:59,350
annoyance so it's all in one you could

00:20:57,429 --> 00:21:01,179
split this up at this point you can you

00:20:59,350 --> 00:21:03,039
can all paralyze these on Jenkins and

00:21:01,179 --> 00:21:06,010
they're all just a few seconds long but

00:21:03,039 --> 00:21:07,299
you could have for this app that does

00:21:06,010 --> 00:21:10,360
nothing you could have about six

00:21:07,299 --> 00:21:13,720
parables at this point which is awesome

00:21:10,360 --> 00:21:15,490
because you just need to slap a machine

00:21:13,720 --> 00:21:18,730
on there if you're still not happy with

00:21:15,490 --> 00:21:22,049
the amount of parallel testing that your

00:21:18,730 --> 00:21:22,049
your build server can do

00:21:23,370 --> 00:21:30,070
so the new structure a shrinking Rails

00:21:27,490 --> 00:21:32,770
up up top a big teaser engine that

00:21:30,070 --> 00:21:34,030
controls what the app can do email

00:21:32,770 --> 00:21:35,230
signup for data storage and the

00:21:34,030 --> 00:21:40,320
annoyance Jim does just what it did

00:21:35,230 --> 00:21:43,179
before did anyone see you code smell

00:21:40,320 --> 00:21:50,470
around single responsibility at any of

00:21:43,179 --> 00:21:54,970
what I've been showing I will give a

00:21:50,470 --> 00:21:59,440
hint did anyone see you code smell

00:21:54,970 --> 00:22:01,990
around single responsibility there is a

00:21:59,440 --> 00:22:04,750
thing here that is an email signup entry

00:22:01,990 --> 00:22:09,520
and it contains the number of tries you

00:22:04,750 --> 00:22:11,620
took to to enter your email it's not

00:22:09,520 --> 00:22:13,809
very visible but if you think about what

00:22:11,620 --> 00:22:15,850
the output of such a table is when you

00:22:13,809 --> 00:22:17,140
finally publish your announcement what

00:22:15,850 --> 00:22:19,330
do you want to do you want to send out

00:22:17,140 --> 00:22:21,070
emails to all the people why the heck

00:22:19,330 --> 00:22:23,590
would this table want to know about how

00:22:21,070 --> 00:22:26,559
many times someone tried to do that it

00:22:23,590 --> 00:22:28,840
doesn't this thing knows too much again

00:22:26,559 --> 00:22:30,730
please bear with me and extrapolate 100

00:22:28,840 --> 00:22:33,490
files and this is everywhere and your

00:22:30,730 --> 00:22:34,570
your you have a couple of your god

00:22:33,490 --> 00:22:35,740
classes and you're never going to

00:22:34,570 --> 00:22:37,890
reflect it so you might as well do it

00:22:35,740 --> 00:22:37,890
now

00:22:44,100 --> 00:23:00,670
what was my number so when I get to a

00:22:56,980 --> 00:23:04,860
next point and make that problem go away

00:23:00,670 --> 00:23:04,860
I want to get to clear responsibilities

00:23:05,160 --> 00:23:12,790
I will introduce what I've dubbed the

00:23:10,090 --> 00:23:15,520
event counter every time I try to sign

00:23:12,790 --> 00:23:16,840
up it's kind of an event but because of

00:23:15,520 --> 00:23:19,360
the requirements of my app I actually

00:23:16,840 --> 00:23:23,110
not interested in in seeing every event

00:23:19,360 --> 00:23:26,980
I just want to count them so looking at

00:23:23,110 --> 00:23:30,250
code we have just introduced an event

00:23:26,980 --> 00:23:33,669
counter engine in this case it comes

00:23:30,250 --> 00:23:35,710
with a new class event logger it can log

00:23:33,669 --> 00:23:37,440
and it just uses a generic object

00:23:35,710 --> 00:23:39,190
identifier in an event identifier

00:23:37,440 --> 00:23:40,929
capacitating what you get back is a

00:23:39,190 --> 00:23:42,549
count of the number of tries that you've

00:23:40,929 --> 00:23:46,660
already or number of times that you've

00:23:42,549 --> 00:23:53,290
already logged this the the teaser

00:23:46,660 --> 00:23:54,940
controller has changed a little bit it

00:23:53,290 --> 00:23:56,559
has an object's another dependency down

00:23:54,940 --> 00:23:58,450
here it now uses this event lager but

00:23:56,559 --> 00:24:01,350
other than that you still see that codes

00:23:58,450 --> 00:24:01,350
essentially the same

00:24:11,580 --> 00:24:20,950
ok so I got rid of this of this these

00:24:17,920 --> 00:24:23,350
two roles that the entry had again you

00:24:20,950 --> 00:24:26,020
might say that didn't make sense at this

00:24:23,350 --> 00:24:27,190
point and I would agree it but it does

00:24:26,020 --> 00:24:28,960
make sense and if you're saying event

00:24:27,190 --> 00:24:30,640
counter that's kind of a that's kind of

00:24:28,960 --> 00:24:33,250
a stupid engine I would never write that

00:24:30,640 --> 00:24:35,020
then I don't know if anyone would say

00:24:33,250 --> 00:24:36,520
that but for an example where this

00:24:35,020 --> 00:24:38,500
engine might be used I don't know how

00:24:36,520 --> 00:24:40,630
Facebook is doing their likes but

00:24:38,500 --> 00:24:44,770
imagine the event is just a phase is

00:24:40,630 --> 00:24:47,290
just a status post and like is the

00:24:44,770 --> 00:24:48,880
action why would they not want to have

00:24:47,290 --> 00:24:50,770
that in a separate engine where they can

00:24:48,880 --> 00:24:54,100
potentially as we just learned use Redis

00:24:50,770 --> 00:24:56,470
within postgres to just make the the

00:24:54,100 --> 00:25:00,520
storage and the query for that faster if

00:24:56,470 --> 00:25:02,350
it doesn't need to be together it it it

00:25:00,520 --> 00:25:04,780
doesn't it shouldn't be together so

00:25:02,350 --> 00:25:06,190
maybe more loosely coupled instead of

00:25:04,780 --> 00:25:11,020
this lousy coupling that was there

00:25:06,190 --> 00:25:12,790
before I quickly went over this this

00:25:11,020 --> 00:25:17,170
logger class I want to come back to it

00:25:12,790 --> 00:25:18,730
but call it my sixth iteration on the on

00:25:17,170 --> 00:25:21,340
the architecture and that is the

00:25:18,730 --> 00:25:24,850
service-oriented app and I will not be

00:25:21,340 --> 00:25:27,760
talking about so not talking about HTTP

00:25:24,850 --> 00:25:31,750
so that's point eight now this is just

00:25:27,760 --> 00:25:35,320
the service pattern which you can for

00:25:31,750 --> 00:25:41,670
example also find in Aaron's book if you

00:25:35,320 --> 00:25:46,300
look at the word Z at the logger

00:25:41,670 --> 00:25:47,860
I've done a few things here so the first

00:25:46,300 --> 00:25:51,100
thing you might notice is that there is

00:25:47,860 --> 00:25:56,110
this active record class down there it's

00:25:51,100 --> 00:25:58,420
private no it's not you cannot make

00:25:56,110 --> 00:25:59,530
class private like this but that you

00:25:58,420 --> 00:26:02,980
know to me that right now that doesn't

00:25:59,530 --> 00:26:04,540
matter because I just wanted to note

00:26:02,980 --> 00:26:06,910
that you're not supposed to use it this

00:26:04,540 --> 00:26:08,920
count class will just store the count

00:26:06,910 --> 00:26:11,410
that we want to use in the logger but

00:26:08,920 --> 00:26:12,760
what we're really offering here is what

00:26:11,410 --> 00:26:13,990
I want to call a service class name

00:26:12,760 --> 00:26:14,840
leave the logger which gives me one

00:26:13,990 --> 00:26:18,440
method

00:26:14,840 --> 00:26:23,570
hey you can log an event and here's the

00:26:18,440 --> 00:26:26,720
identifier the reason I want to do this

00:26:23,570 --> 00:26:30,350
is reduce surface area if you have not

00:26:26,720 --> 00:26:32,389
seen Justin Searles talk on mocking and

00:26:30,350 --> 00:26:34,730
testing he is a good points about that

00:26:32,389 --> 00:26:36,379
but just some quick numbers if you look

00:26:34,730 --> 00:26:38,419
at how many methods are on those two

00:26:36,379 --> 00:26:39,830
classes the count and the logger it's

00:26:38,419 --> 00:26:42,559
way less on the logger and if you

00:26:39,830 --> 00:26:44,659
subtract what object has then the logger

00:26:42,559 --> 00:26:45,980
only has one method it screams at you

00:26:44,659 --> 00:26:48,049
what you're supposed to do with it I

00:26:45,980 --> 00:26:49,730
think that's especially important if you

00:26:48,049 --> 00:26:52,580
extract components and make them live on

00:26:49,730 --> 00:26:54,440
their own that they properly state what

00:26:52,580 --> 00:26:57,230
they are about and an active record

00:26:54,440 --> 00:26:59,029
class I would say never States what it

00:26:57,230 --> 00:27:01,669
is about because you can always do so

00:26:59,029 --> 00:27:04,940
much stuff and it's very hard to prevent

00:27:01,669 --> 00:27:07,429
it so the structure doesn't change but

00:27:04,940 --> 00:27:10,480
we have a just the event counter the one

00:27:07,429 --> 00:27:14,470
in the middle here has a much clearer

00:27:10,480 --> 00:27:16,970
says much clearer what its intent is

00:27:14,470 --> 00:27:18,350
number seven and now I don't need to

00:27:16,970 --> 00:27:21,049
switch to code but you may have been

00:27:18,350 --> 00:27:23,869
wondering why or if I finally you know

00:27:21,049 --> 00:27:29,029
take one of these gems and rip it out

00:27:23,869 --> 00:27:31,730
and I'm in practice I I have done that

00:27:29,029 --> 00:27:33,440
but only after months on a project when

00:27:31,730 --> 00:27:35,139
pretty much one project was done and the

00:27:33,440 --> 00:27:37,249
next one was started and we realized oh

00:27:35,139 --> 00:27:39,619
that gem is actually one we're

00:27:37,249 --> 00:27:41,539
interfacing with the clients main

00:27:39,619 --> 00:27:44,299
architecture and that's all repetitive

00:27:41,539 --> 00:27:48,980
stuff and you're two steps away from

00:27:44,299 --> 00:27:51,619
that gem build gem push and you have a

00:27:48,980 --> 00:27:53,450
gem so I'm actually not going to pull up

00:27:51,619 --> 00:27:55,159
the code because it's it's just

00:27:53,450 --> 00:27:56,389
literally that engine vanishing from the

00:27:55,159 --> 00:28:00,019
source code it now lives in another

00:27:56,389 --> 00:28:05,720
directory I also pushed it to github I

00:28:00,019 --> 00:28:07,669
think yesterday and nothing else changed

00:28:05,720 --> 00:28:10,700
actually one thing does change the

00:28:07,669 --> 00:28:13,879
reference to this gem in the dim spec of

00:28:10,700 --> 00:28:15,139
the teaser now has a version and in the

00:28:13,879 --> 00:28:19,789
gem file there's no longer the reference

00:28:15,139 --> 00:28:21,529
to that path so again no change in

00:28:19,789 --> 00:28:24,730
structure only that the middle point the

00:28:21,529 --> 00:28:27,630
event counter is now somewhere else

00:28:24,730 --> 00:28:34,560
which brings me to my last point

00:28:27,630 --> 00:28:37,590
the HTTP so on and so Marty Hart who now

00:28:34,560 --> 00:28:40,020
organizes railsconf had this tweet a few

00:28:37,590 --> 00:28:41,790
weeks ago about plenty of talk

00:28:40,020 --> 00:28:44,400
submissions on how to split your mega

00:28:41,790 --> 00:28:45,630
rails up into services and since my talk

00:28:44,400 --> 00:28:48,260
didn't get accepted I'm just not going

00:28:45,630 --> 00:28:48,260
to talk about it

00:28:49,250 --> 00:28:55,050
but it's pretty clear what the next

00:28:52,410 --> 00:28:58,080
steps are we already extracted an engine

00:28:55,050 --> 00:29:00,450
to do say the event counter stuff what

00:28:58,080 --> 00:29:04,830
are you gonna do take again a tiny app

00:29:00,450 --> 00:29:07,559
maybe Sinatra require that Jim make one

00:29:04,830 --> 00:29:09,210
endpoint for logging instead of in the

00:29:07,559 --> 00:29:11,460
teaser directly going to that event

00:29:09,210 --> 00:29:13,080
counter thing call out to this service

00:29:11,460 --> 00:29:15,780
and if it gets more complicated yeah

00:29:13,080 --> 00:29:18,510
you're probably going to you're going to

00:29:15,780 --> 00:29:20,850
probably want to revisit the talks to

00:29:18,510 --> 00:29:24,059
talks before me right so that you you

00:29:20,850 --> 00:29:27,059
get the testing right this pattern out

00:29:24,059 --> 00:29:28,620
of all these structural architectural

00:29:27,059 --> 00:29:30,360
patterns that I've talked about today I

00:29:28,620 --> 00:29:32,400
have only used once and that was for

00:29:30,360 --> 00:29:33,929
auditing where we knew this thing is

00:29:32,400 --> 00:29:35,100
just always going to take all this data

00:29:33,929 --> 00:29:38,280
is never going to change we're not

00:29:35,100 --> 00:29:40,050
interested in it if you do this while

00:29:38,280 --> 00:29:42,480
you're developing an app you're going to

00:29:40,050 --> 00:29:44,400
be stuck with having to version stuff

00:29:42,480 --> 00:29:48,809
maintain multiple servers of course you

00:29:44,400 --> 00:29:51,000
get much more control but in the in the

00:29:48,809 --> 00:29:52,860
grand scheme of how to a structure an

00:29:51,000 --> 00:29:55,200
application it is actually not as

00:29:52,860 --> 00:29:57,330
special as I think many make it sound

00:29:55,200 --> 00:30:02,480
it's just one more step that you can do

00:29:57,330 --> 00:30:04,890
but by no means have to do that end

00:30:02,480 --> 00:30:06,840
imprint there is also from the stairs up

00:30:04,890 --> 00:30:07,350
and I want to use that for one last

00:30:06,840 --> 00:30:09,150
thought

00:30:07,350 --> 00:30:10,980
I've been running you through these

00:30:09,150 --> 00:30:14,940
eight different architectures for this

00:30:10,980 --> 00:30:17,220
tiny tiny app and I pretend like the

00:30:14,940 --> 00:30:20,850
HTTP sola is up there like it's a

00:30:17,220 --> 00:30:22,410
staircase what's funny about when you

00:30:20,850 --> 00:30:24,090
get up to the top and when it's not

00:30:22,410 --> 00:30:25,200
raining is it looks pretty pretty up

00:30:24,090 --> 00:30:28,170
there so again you should go up there

00:30:25,200 --> 00:30:29,280
but also these two steps beginning and

00:30:28,170 --> 00:30:30,870
end they're right next to each other

00:30:29,280 --> 00:30:34,920
they just face in different directions

00:30:30,870 --> 00:30:38,070
and so I think much more appropriate

00:30:34,920 --> 00:30:40,710
than this staircase is a circle because

00:30:38,070 --> 00:30:43,170
as soon as I painted that next block and

00:30:40,710 --> 00:30:45,450
I had a new app I can start asking all

00:30:43,170 --> 00:30:47,160
these questions again and I bet you

00:30:45,450 --> 00:30:49,320
every one of you has touched one or

00:30:47,160 --> 00:30:53,580
pretty much all of these at some point

00:30:49,320 --> 00:30:55,970
in some application and that's all I got

00:30:53,580 --> 00:30:55,970

YouTube URL: https://www.youtube.com/watch?v=-54SDanDC00


