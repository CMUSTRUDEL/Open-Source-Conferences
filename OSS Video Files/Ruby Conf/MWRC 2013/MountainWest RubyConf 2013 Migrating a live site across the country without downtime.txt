Title: MountainWest RubyConf 2013 Migrating a live site across the country without downtime
Publication date: 2020-01-28
Playlist: MWRC 2013
Description: 
	Title: Migrating a live site across the country without downtime
Presented by: Drew Blas

Chargify.com's customers rely on us to process payments for them 24 hours a day. We do not have any planned maintenance windows: we're simply expected to be up all the time. We recently migrated from a private datacenter to EC2, moving all our operations and data across the country with zero downtime. All thanks to a combination of highly-automated configuration with Chef and specialized DB tools like Tungsten.
You'll learn about our pain points in planning the switchover, like:
Synchronizing data
Cross DC communication & VPNs
Redirecting traffic
Redundancy
Migrating Redis/Resque
Automation
And most importantly, how we addressed every one! I'll demonstrate how we rebuilt our entire infrastructure platform from the ground up: New system images with all new cookbooks that were deployed into our existing operation without any interruption. Finally, I'll discuss testing our stack and how we replicate it among various environments and plan for future expansion.

Help us caption & translate this video!

http://amara.org/v/FGbf/
Captions: 
	00:00:19,730 --> 00:00:26,820
thank you all right cool so my name is

00:00:23,160 --> 00:00:32,519
drew blahs and i work at chartoff I calm

00:00:26,820 --> 00:00:35,370
and charge Phi is a site that provides a

00:00:32,519 --> 00:00:37,079
service for managing recurring

00:00:35,370 --> 00:00:38,760
subscription billing like with credit

00:00:37,079 --> 00:00:43,890
cards and everything that goes along

00:00:38,760 --> 00:00:47,190
with that stuff like expiration dates on

00:00:43,890 --> 00:00:48,479
credit cards and renewals and coupons

00:00:47,190 --> 00:00:54,269
just everything that goes along with

00:00:48,479 --> 00:00:58,739
that and last year we decided that we

00:00:54,269 --> 00:01:01,559
want to move data centers and we picked

00:00:58,739 --> 00:01:03,869
a new data center and needed to move all

00:01:01,559 --> 00:01:05,939
of our operations from the old data

00:01:03,869 --> 00:01:09,180
center to the new one and the thing

00:01:05,939 --> 00:01:10,740
about charged if I is that we process we

00:01:09,180 --> 00:01:14,790
help process money for other businesses

00:01:10,740 --> 00:01:18,149
and despite what a lot of young startups

00:01:14,790 --> 00:01:19,770
may think a business is around to make

00:01:18,149 --> 00:01:21,899
money it's got to make money for

00:01:19,770 --> 00:01:25,229
somebody all that goes away no money no

00:01:21,899 --> 00:01:27,900
business right so if we're not

00:01:25,229 --> 00:01:29,729
processing the sign ups and the

00:01:27,900 --> 00:01:31,409
transactions for the people who rely

00:01:29,729 --> 00:01:34,260
upon us suddenly they're no longer

00:01:31,409 --> 00:01:38,040
making money and that's a really fast

00:01:34,260 --> 00:01:39,240
way to have a very unhappy customer so

00:01:38,040 --> 00:01:40,500
that means we don't have any planned

00:01:39,240 --> 00:01:45,750
outages we don't have maintenance

00:01:40,500 --> 00:01:48,630
windows we basically aim to be up 24-7 a

00:01:45,750 --> 00:01:51,140
hundred percent up time obviously it's

00:01:48,630 --> 00:01:55,610
not possible but that's our goal and

00:01:51,140 --> 00:01:55,610
anything less than that we don't like

00:01:57,260 --> 00:02:05,010
but we had to switch so we went on this

00:02:00,869 --> 00:02:07,409
crusade to find a new provider and I'm

00:02:05,010 --> 00:02:09,269
going to skip the track a little bit and

00:02:07,409 --> 00:02:12,659
talk about our search for a new provider

00:02:09,269 --> 00:02:14,900
because it's a really key part of how we

00:02:12,659 --> 00:02:17,370
executed the migration the way we did

00:02:14,900 --> 00:02:19,890
and to start with it I'm going to say I

00:02:17,370 --> 00:02:25,230
really hate sales when it comes to

00:02:19,890 --> 00:02:27,810
enterprise sales so we have the unique

00:02:25,230 --> 00:02:30,299
requirement of being a level one pci

00:02:27,810 --> 00:02:31,860
required to be level one pci compliant

00:02:30,299 --> 00:02:34,500
and so we have

00:02:31,860 --> 00:02:37,950
look for a data center or a hosting

00:02:34,500 --> 00:02:40,740
provider who is able to be there

00:02:37,950 --> 00:02:42,300
alongside us and meet the same

00:02:40,740 --> 00:02:45,180
requirements that we have to meet and

00:02:42,300 --> 00:02:48,030
that presents a lot of problems

00:02:45,180 --> 00:02:51,750
basically you wind up with two extremes

00:02:48,030 --> 00:02:55,410
you wind up with a lot of old guard data

00:02:51,750 --> 00:02:59,100
centers who work like it's still 1980

00:02:55,410 --> 00:03:00,420
who want to ask you questions like what

00:02:59,100 --> 00:03:03,390
kind of servers are you going to need

00:03:00,420 --> 00:03:05,910
three years from now to make these kind

00:03:03,390 --> 00:03:09,200
of grand predictions to do this whole

00:03:05,910 --> 00:03:13,170
bid process where you have to do

00:03:09,200 --> 00:03:16,020
evaluations and you have to do all sorts

00:03:13,170 --> 00:03:18,270
of things in order to even figure out if

00:03:16,020 --> 00:03:20,670
if they're going to let you buy from

00:03:18,270 --> 00:03:22,980
them right it's just it's really

00:03:20,670 --> 00:03:25,350
ridiculous I'm sure everybody has some

00:03:22,980 --> 00:03:27,330
experience with that and the other thing

00:03:25,350 --> 00:03:29,190
is they're going to come up with the

00:03:27,330 --> 00:03:33,060
price you're going to tell them what you

00:03:29,190 --> 00:03:35,340
want based on magically pulling system

00:03:33,060 --> 00:03:36,450
specs out of your head and then they're

00:03:35,340 --> 00:03:38,250
going to go to this but anybody know

00:03:36,450 --> 00:03:41,280
what this book is anybody ever seen one

00:03:38,250 --> 00:03:43,890
of these it's it's almost locked tables

00:03:41,280 --> 00:03:47,280
it is a book of random numbers that's

00:03:43,890 --> 00:03:49,140
what it is they used to print books full

00:03:47,280 --> 00:03:51,630
of random numbers these are highly

00:03:49,140 --> 00:03:53,730
highly entropy numbers and they'll go

00:03:51,630 --> 00:03:54,900
and they'll pick one and that's the

00:03:53,730 --> 00:03:57,299
price they're going to give you right

00:03:54,900 --> 00:03:59,670
there's there's discounts and there's 20

00:03:57,299 --> 00:04:02,340
pages of pricing sheets and oh it's the

00:03:59,670 --> 00:04:04,110
second Tuesday after Labor Day so you're

00:04:02,340 --> 00:04:06,209
going to have to pay an extra five

00:04:04,110 --> 00:04:08,010
percent and all these kind of things and

00:04:06,209 --> 00:04:10,920
they come up with the number here it

00:04:08,010 --> 00:04:13,400
drives me up a wall so we instead we

00:04:10,920 --> 00:04:18,269
picked ec2 the other end of the spectrum

00:04:13,400 --> 00:04:21,169
the quintessential cloud provider um you

00:04:18,269 --> 00:04:25,410
know the start of the cloud

00:04:21,169 --> 00:04:29,010
virtualization revolution and they also

00:04:25,410 --> 00:04:32,850
happen to be a certified level one pci

00:04:29,010 --> 00:04:34,410
provider and not a lot of other cloud

00:04:32,850 --> 00:04:36,479
providers are competing in that space

00:04:34,410 --> 00:04:38,190
yet they want to be a lot of them were

00:04:36,479 --> 00:04:39,419
working really hard some of them are

00:04:38,190 --> 00:04:43,710
there some of them are better than

00:04:39,419 --> 00:04:44,139
others but when it comes to looking for

00:04:43,710 --> 00:04:47,169
the

00:04:44,139 --> 00:04:49,650
the type of flexibility that any agile

00:04:47,169 --> 00:04:52,389
business that we all deal with wants on

00:04:49,650 --> 00:04:56,080
these guys are still the 800-pound

00:04:52,389 --> 00:04:59,259
gorilla and they have the the expertise

00:04:56,080 --> 00:05:00,460
in being a level one pci provider and so

00:04:59,259 --> 00:05:02,889
that was kind of one of the big things

00:05:00,460 --> 00:05:04,599
it was like either get stuck in the old

00:05:02,889 --> 00:05:06,340
model which was the model we were trying

00:05:04,599 --> 00:05:08,650
to leave that's what we were trying to

00:05:06,340 --> 00:05:10,240
get away from the guys who we would have

00:05:08,650 --> 00:05:11,800
to call up even though we already had an

00:05:10,240 --> 00:05:13,930
account and already had dozens of

00:05:11,800 --> 00:05:16,240
servers we'd have to call up a sales guy

00:05:13,930 --> 00:05:17,889
and he'd have to talk with his boss and

00:05:16,240 --> 00:05:21,159
get a special quote if we wanted an

00:05:17,889 --> 00:05:24,389
extra virtual machine right so we won

00:05:21,159 --> 00:05:27,969
the way from that and so we said okay

00:05:24,389 --> 00:05:30,490
Amazon's not perfect you know it they've

00:05:27,969 --> 00:05:33,370
got their warts and all but they have

00:05:30,490 --> 00:05:35,979
been around longer than any other cloud

00:05:33,370 --> 00:05:39,189
provider they they meet our security

00:05:35,979 --> 00:05:40,779
requirements on they offer support and

00:05:39,189 --> 00:05:43,389
it used to be they didn't offer support

00:05:40,779 --> 00:05:44,949
right but they do offer like an

00:05:43,389 --> 00:05:47,469
enterprise-class support right now and

00:05:44,949 --> 00:05:49,990
if anybody here has experience with it

00:05:47,469 --> 00:05:51,460
um I think they'll probably tell you the

00:05:49,990 --> 00:05:53,589
same thing I would which is that it's

00:05:51,460 --> 00:05:55,629
really really good it's the type of

00:05:53,589 --> 00:05:57,969
support where you call or you get on a

00:05:55,629 --> 00:06:00,639
live chat and the very first person you

00:05:57,969 --> 00:06:02,259
talk to is the guy who knows exactly how

00:06:00,639 --> 00:06:04,389
to do what you need to do there's no

00:06:02,259 --> 00:06:07,779
jumping there's no transferring six

00:06:04,389 --> 00:06:09,250
different people you can get talking to

00:06:07,779 --> 00:06:13,120
somebody who has the power to do what

00:06:09,250 --> 00:06:15,339
you want the first time and that makes

00:06:13,120 --> 00:06:18,699
us for a happy customer so so we chose

00:06:15,339 --> 00:06:20,830
ec2 and we came up with this grand plan

00:06:18,699 --> 00:06:23,169
for how we're going to move and it

00:06:20,830 --> 00:06:25,089
started with adding automation so we

00:06:23,169 --> 00:06:28,270
were moving away from the old guard we

00:06:25,089 --> 00:06:31,000
were we were leaving a an environment

00:06:28,270 --> 00:06:35,129
where the hands-on manager of our

00:06:31,000 --> 00:06:38,110
environment we're doing hand scripts and

00:06:35,129 --> 00:06:40,089
hand commands in the bash shell to

00:06:38,110 --> 00:06:41,500
configure the systems and keep them up

00:06:40,089 --> 00:06:43,240
and running and do maintenance on them

00:06:41,500 --> 00:06:45,759
and all these other things and so

00:06:43,240 --> 00:06:49,240
obviously number one is we had to get it

00:06:45,759 --> 00:06:51,699
automated and we picked chef puppets

00:06:49,240 --> 00:06:55,779
great too we picked chef because we're a

00:06:51,699 --> 00:06:57,220
ruby shop and we had to put that into

00:06:55,779 --> 00:06:59,800
our old data center

00:06:57,220 --> 00:07:01,570
no way to prove if we were to go and

00:06:59,800 --> 00:07:03,760
just build all our new systems with chef

00:07:01,570 --> 00:07:05,260
that they match the old ones unless the

00:07:03,760 --> 00:07:07,780
old ones were under the control of chef

00:07:05,260 --> 00:07:11,050
too so we had to put chef on the old

00:07:07,780 --> 00:07:13,780
systems first once we did that we could

00:07:11,050 --> 00:07:17,590
take an entire copy of our stack top to

00:07:13,780 --> 00:07:20,260
bottom put it in Amazon and then run

00:07:17,590 --> 00:07:22,240
them side by side in what is basically

00:07:20,260 --> 00:07:25,900
like a disaster recovery hot spare type

00:07:22,240 --> 00:07:28,660
of scenario and then one day all we have

00:07:25,900 --> 00:07:30,970
to do is say well let's fail over to it

00:07:28,660 --> 00:07:34,240
just as if our old provider was

00:07:30,970 --> 00:07:36,460
disappearing and but instead of being an

00:07:34,240 --> 00:07:39,580
unplanned outage it was a plan fail over

00:07:36,460 --> 00:07:42,400
and then the goal is to minimize how

00:07:39,580 --> 00:07:45,220
much downtime is in that failure

00:07:42,400 --> 00:07:48,220
failover window ideally we want none

00:07:45,220 --> 00:07:50,530
whatsoever and then all we have to do is

00:07:48,220 --> 00:07:52,150
try it again and again until it works in

00:07:50,530 --> 00:07:54,700
our test environment of course not a

00:07:52,150 --> 00:07:56,110
real environment and one day we're happy

00:07:54,700 --> 00:07:59,260
enough with it and we pull the trigger

00:07:56,110 --> 00:08:00,940
on the real thing so with that I'm gonna

00:07:59,260 --> 00:08:02,950
I'm going to go and talk about the

00:08:00,940 --> 00:08:07,480
testing real quick because testing can

00:08:02,950 --> 00:08:09,130
mean a lot of different things in we've

00:08:07,480 --> 00:08:11,650
got our unit tests for our application

00:08:09,130 --> 00:08:14,229
and controller tests and stuff like that

00:08:11,650 --> 00:08:16,330
and so there's that kind of testing and

00:08:14,229 --> 00:08:19,090
then there's infrastructure testing

00:08:16,330 --> 00:08:20,890
right you put you put your chef code in

00:08:19,090 --> 00:08:23,350
a repository and you version control

00:08:20,890 --> 00:08:25,930
that too and you have some sort of

00:08:23,350 --> 00:08:28,229
testing for your chef recipes you know

00:08:25,930 --> 00:08:30,700
like it you know whether it brings up

00:08:28,229 --> 00:08:32,830
vagrant or whatever and and does a

00:08:30,700 --> 00:08:35,080
configuration and then checks to make

00:08:32,830 --> 00:08:36,880
sure that it really built a system that

00:08:35,080 --> 00:08:38,020
works like you would expect it to so

00:08:36,880 --> 00:08:40,240
there's that kind of testing then

00:08:38,020 --> 00:08:42,070
there's a third kind of testing and this

00:08:40,240 --> 00:08:44,200
is what when I say test and i'm going to

00:08:42,070 --> 00:08:46,360
say test test test a lot throughout this

00:08:44,200 --> 00:08:48,040
presentation but when i say test i'm

00:08:46,360 --> 00:08:50,140
talking about this Third Kind and this

00:08:48,040 --> 00:08:53,710
Third Kind is what i would call process

00:08:50,140 --> 00:08:56,080
testing this is the the chaos monkey

00:08:53,710 --> 00:08:59,650
type of stuff this is you've got all

00:08:56,080 --> 00:09:01,900
these interconnected pieces talking to

00:08:59,650 --> 00:09:04,480
one another and you need to be able to

00:09:01,900 --> 00:09:06,130
prove that they're accomplishing what

00:09:04,480 --> 00:09:08,770
they're supposed to be accomplishing um

00:09:06,130 --> 00:09:11,020
so it's kind of like integration testing

00:09:08,770 --> 00:09:13,990
but it's at an even higher level

00:09:11,020 --> 00:09:16,300
this is things like is your site

00:09:13,990 --> 00:09:18,640
accepting a sign up and then sending an

00:09:16,300 --> 00:09:21,430
email back to the user and the only way

00:09:18,640 --> 00:09:23,500
to really prove that is that to have

00:09:21,430 --> 00:09:25,420
either somebody click through and do a

00:09:23,500 --> 00:09:27,880
sign up and then check their email or

00:09:25,420 --> 00:09:31,090
have a script that that replicates that

00:09:27,880 --> 00:09:33,940
but top to bottom your entire stack in

00:09:31,090 --> 00:09:36,310
production is it doing exactly what you

00:09:33,940 --> 00:09:39,370
would expect it to be doing and if you

00:09:36,310 --> 00:09:42,640
have that type of testing then you can

00:09:39,370 --> 00:09:45,250
create a copy you can check to see if

00:09:42,640 --> 00:09:46,540
the copy works exactly the same way then

00:09:45,250 --> 00:09:48,820
you can say yes these really are

00:09:46,540 --> 00:09:51,220
identical and if I switched over

00:09:48,820 --> 00:09:53,200
tomorrow everything would work the same

00:09:51,220 --> 00:09:54,730
so that's what you have to have that's

00:09:53,200 --> 00:09:57,790
the type of testing I'm talking about is

00:09:54,730 --> 00:09:59,080
process level testing into integration

00:09:57,790 --> 00:10:01,270
testing but don't confuse that with like

00:09:59,080 --> 00:10:03,430
rails integration testing all right so

00:10:01,270 --> 00:10:05,140
we have this complete copy on both sides

00:10:03,430 --> 00:10:07,930
the old data center in the new data

00:10:05,140 --> 00:10:10,180
center we exercise everything we test

00:10:07,930 --> 00:10:12,700
that all the things we would expect to

00:10:10,180 --> 00:10:15,520
happen are happening our emails getting

00:10:12,700 --> 00:10:18,460
sent out our requests coming from the

00:10:15,520 --> 00:10:20,860
right eye peas are accused working our

00:10:18,460 --> 00:10:23,250
jobs getting processed our cron jobs

00:10:20,860 --> 00:10:25,870
running all these kind of things and

00:10:23,250 --> 00:10:27,790
then on top of that you can generate

00:10:25,870 --> 00:10:29,440
fake traffic against it right there's

00:10:27,790 --> 00:10:32,620
lots of ways to do this you can capture

00:10:29,440 --> 00:10:34,900
some live traffic and replay it we

00:10:32,620 --> 00:10:36,460
thought about that for a while it's got

00:10:34,900 --> 00:10:38,080
a lot of weird implications when your

00:10:36,460 --> 00:10:42,550
live traffic has credit card numbers in

00:10:38,080 --> 00:10:45,430
it but we so but we can generate fake

00:10:42,550 --> 00:10:49,470
traffic that generally matched what was

00:10:45,430 --> 00:10:52,090
going on as long as it was exercising

00:10:49,470 --> 00:10:54,460
everything every component that we had

00:10:52,090 --> 00:10:56,890
is it exercising email is it exercising

00:10:54,460 --> 00:10:59,320
cues is it you know doing all the things

00:10:56,890 --> 00:11:01,180
that we've written is it hitting all the

00:10:59,320 --> 00:11:03,130
different pieces and if we can generate

00:11:01,180 --> 00:11:05,170
some fake traffic then we can do cool

00:11:03,130 --> 00:11:07,090
things like ramping that fake traffic

00:11:05,170 --> 00:11:08,860
way up what happens when it's triple

00:11:07,090 --> 00:11:11,560
what we currently have and that gives

00:11:08,860 --> 00:11:12,790
you a lot of flexibility so it's really

00:11:11,560 --> 00:11:14,770
a nice thing to have and it should

00:11:12,790 --> 00:11:16,060
definitely be a part regardless of

00:11:14,770 --> 00:11:18,190
whether you're doing a migration or not

00:11:16,060 --> 00:11:21,850
this is good stuff to have all the time

00:11:18,190 --> 00:11:23,270
and so with all that testing then you

00:11:21,850 --> 00:11:25,010
need to be able to know whether

00:11:23,270 --> 00:11:27,020
it's working and if it's not working

00:11:25,010 --> 00:11:28,880
where the problems and that's where

00:11:27,020 --> 00:11:30,680
logging alerting those types of things

00:11:28,880 --> 00:11:32,240
come from and typically that's like a

00:11:30,680 --> 00:11:35,690
separate set of logging right that's

00:11:32,240 --> 00:11:38,660
things like like your scripts could be

00:11:35,690 --> 00:11:41,750
trying to sign up on your site every

00:11:38,660 --> 00:11:44,840
five minutes on a test site and if

00:11:41,750 --> 00:11:47,330
suddenly you're your test site is no

00:11:44,840 --> 00:11:49,040
longer accepting signups you know that

00:11:47,330 --> 00:11:51,500
can generate an alert and then people

00:11:49,040 --> 00:11:54,140
can say okay well let's let's figure out

00:11:51,500 --> 00:11:56,420
what's wrong all right so now back on to

00:11:54,140 --> 00:11:57,980
back on to the plan review the plan

00:11:56,420 --> 00:11:59,660
again here it was number one is

00:11:57,980 --> 00:12:02,630
introduced chef into our old data center

00:11:59,660 --> 00:12:04,430
and so we got to automate everything I

00:12:02,630 --> 00:12:06,680
don't think I need to go into a lot of

00:12:04,430 --> 00:12:11,270
depth about why everybody knows that

00:12:06,680 --> 00:12:13,760
it's good and why it's good reproducible

00:12:11,270 --> 00:12:17,330
version controlled less human error all

00:12:13,760 --> 00:12:18,890
that kind of stuff it's a challenge if

00:12:17,330 --> 00:12:21,950
you have an environment that's entirely

00:12:18,890 --> 00:12:27,020
you know that has been managed by hand

00:12:21,950 --> 00:12:29,780
from from previously now you've got to

00:12:27,020 --> 00:12:32,000
get chef running in it and just a

00:12:29,780 --> 00:12:34,130
complex thing you know one cookbook has

00:12:32,000 --> 00:12:37,370
a rest has a dependency on 10 other

00:12:34,130 --> 00:12:38,750
cookbooks and you can't just assume that

00:12:37,370 --> 00:12:41,090
it's going to be compatible with what

00:12:38,750 --> 00:12:42,860
you've already got and it it's a slog

00:12:41,090 --> 00:12:45,230
it's you know it's just like if you had

00:12:42,860 --> 00:12:46,340
an application that had no tests and you

00:12:45,230 --> 00:12:49,430
said okay we're going to get to one

00:12:46,340 --> 00:12:50,600
hundred percent test coverage and you

00:12:49,430 --> 00:12:52,670
know how are you going to do it and well

00:12:50,600 --> 00:12:55,930
it takes time and it's little by little

00:12:52,670 --> 00:12:58,790
so right so you write one cookbook and

00:12:55,930 --> 00:13:00,620
hopefully with no dependencies it helps

00:12:58,790 --> 00:13:02,480
if you start kinda at the root of the

00:13:00,620 --> 00:13:04,310
dependency tree you know things like

00:13:02,480 --> 00:13:07,100
setting up users needs to happen before

00:13:04,310 --> 00:13:08,930
you can set up your application and you

00:13:07,100 --> 00:13:11,060
have to have an Apache recipe before you

00:13:08,930 --> 00:13:12,590
can have an application recipe and

00:13:11,060 --> 00:13:13,700
things like that you kind of got to

00:13:12,590 --> 00:13:16,190
think about to do it in the right order

00:13:13,700 --> 00:13:17,390
helps a lot um and we also had some

00:13:16,190 --> 00:13:19,280
unique challenges because our old

00:13:17,390 --> 00:13:22,570
environment was was red hat in our new

00:13:19,280 --> 00:13:25,610
environment was ubuntu as much as chef

00:13:22,570 --> 00:13:28,730
chef itself is very good at handling

00:13:25,610 --> 00:13:31,610
that situation you can write a recipe

00:13:28,730 --> 00:13:33,170
and you know with a couple of smart

00:13:31,610 --> 00:13:35,420
switches in a couple of places you can

00:13:33,170 --> 00:13:37,020
can write it so that it's it's

00:13:35,420 --> 00:13:40,260
compatible with both

00:13:37,020 --> 00:13:42,960
but not every cookbook that's you know

00:13:40,260 --> 00:13:45,000
in the community repository is built

00:13:42,960 --> 00:13:47,670
that way right so some of them needed a

00:13:45,000 --> 00:13:49,470
little tuning eventually we got through

00:13:47,670 --> 00:13:51,750
it and all our old systems are now

00:13:49,470 --> 00:13:54,360
running on chef and then we turn around

00:13:51,750 --> 00:13:56,130
and we make a copy of them all and then

00:13:54,360 --> 00:13:58,410
we've got we've got a copy of everything

00:13:56,130 --> 00:14:00,750
in the new environment and so then we

00:13:58,410 --> 00:14:03,420
get to how do we switch it over and the

00:14:00,750 --> 00:14:05,880
theory is is the typical share nothing

00:14:03,420 --> 00:14:08,340
architecture that we all strive for if

00:14:05,880 --> 00:14:10,470
it was truly one hundred percent share

00:14:08,340 --> 00:14:12,870
nothing like if you just had static HTML

00:14:10,470 --> 00:14:15,840
files you could have the old servers in

00:14:12,870 --> 00:14:17,700
the new servers and you could run them

00:14:15,840 --> 00:14:19,290
both at once and it wouldn't matter and

00:14:17,700 --> 00:14:21,420
then one day you just shut down the old

00:14:19,290 --> 00:14:23,970
ones and nobody knows the difference so

00:14:21,420 --> 00:14:25,650
right so that's the ideal world that we

00:14:23,970 --> 00:14:28,530
want to live in and the closer you get

00:14:25,650 --> 00:14:31,290
to that the better off you are okay so

00:14:28,530 --> 00:14:34,110
before where we've got both of them

00:14:31,290 --> 00:14:37,650
coming and then we just kick one off and

00:14:34,110 --> 00:14:39,060
that's all there is to it but we don't

00:14:37,650 --> 00:14:40,980
live in that perfect world right there's

00:14:39,060 --> 00:14:43,290
there's some kind of synchronization at

00:14:40,980 --> 00:14:45,000
the data layer typically that goes on

00:14:43,290 --> 00:14:48,060
there's and of course there's lots of in

00:14:45,000 --> 00:14:49,530
ciliary little pieces that get in the

00:14:48,060 --> 00:14:52,800
way of that as well and so we have to

00:14:49,530 --> 00:14:54,960
address those and the first step for us

00:14:52,800 --> 00:14:58,200
I'll get to what the pieces are but the

00:14:54,960 --> 00:14:59,910
first step was how do we transfer data

00:14:58,200 --> 00:15:02,720
back and forth if we're going to have to

00:14:59,910 --> 00:15:07,380
have these two sides communicating on

00:15:02,720 --> 00:15:09,720
the end the answer is a VPN so on the on

00:15:07,380 --> 00:15:12,930
the old data center side we already had

00:15:09,720 --> 00:15:14,910
a actual hardware VPN appliance because

00:15:12,930 --> 00:15:16,470
that's how we log into the systems

00:15:14,910 --> 00:15:20,220
remotely and do all our work and

00:15:16,470 --> 00:15:21,600
everything like that and amazon has the

00:15:20,220 --> 00:15:24,150
the wonderful capability of

00:15:21,600 --> 00:15:27,900
interconnecting with that and so we were

00:15:24,150 --> 00:15:30,330
able to to do you know a mash-up of

00:15:27,900 --> 00:15:33,840
connecting those together in generating

00:15:30,330 --> 00:15:36,270
a VPN tunnel to do site to site VPN and

00:15:33,840 --> 00:15:38,220
then everybody all the systems think

00:15:36,270 --> 00:15:40,140
they're on the same network and they can

00:15:38,220 --> 00:15:42,180
talk to each other you can basically

00:15:40,140 --> 00:15:46,290
send all your data back and forth

00:15:42,180 --> 00:15:47,720
without too much trouble and as long as

00:15:46,290 --> 00:15:49,399
you think about it and make sure

00:15:47,720 --> 00:15:52,129
you're understanding the latency

00:15:49,399 --> 00:15:55,790
implications it it's certainly a big

00:15:52,129 --> 00:15:58,699
help and not terribly complicated with

00:15:55,790 --> 00:16:01,160
the exception of actually figuring out

00:15:58,699 --> 00:16:03,500
how to route the traffic for for site to

00:16:01,160 --> 00:16:06,230
site communication and that's where the

00:16:03,500 --> 00:16:10,449
beauty of VPC comes in so VPC is

00:16:06,230 --> 00:16:12,680
amazon's virtual private cloud and it is

00:16:10,449 --> 00:16:14,089
you know they kind of did an

00:16:12,680 --> 00:16:17,529
announcement I talked to some of the

00:16:14,089 --> 00:16:19,819
guys back in November and they're moving

00:16:17,529 --> 00:16:21,949
basically everybody in the direction of

00:16:19,819 --> 00:16:25,339
VPC they may nouncement not too long ago

00:16:21,949 --> 00:16:27,920
that it's going to be kind of seamless

00:16:25,339 --> 00:16:29,540
behind the scenes default so that if you

00:16:27,920 --> 00:16:33,920
started a whole new Amazon account

00:16:29,540 --> 00:16:35,480
nowadays um and you'll get a VPC and

00:16:33,920 --> 00:16:39,170
you'll be in a VPC even though you don't

00:16:35,480 --> 00:16:41,870
know it and then so that's what they're

00:16:39,170 --> 00:16:44,689
moving towards and so what it is is it's

00:16:41,870 --> 00:16:48,620
it's basically your own private little

00:16:44,689 --> 00:16:51,800
network in the in the previous before

00:16:48,620 --> 00:16:53,990
VPC every system that you get in amazon

00:16:51,800 --> 00:16:56,480
ec2 was like routable to every other

00:16:53,990 --> 00:16:58,639
system it had like a private IP address

00:16:56,480 --> 00:17:00,620
and and you'd launch a couple of them

00:16:58,639 --> 00:17:01,819
and they could talk to each other and if

00:17:00,620 --> 00:17:03,680
you had a buddy on a totally different

00:17:01,819 --> 00:17:07,069
account they could talk to each other

00:17:03,680 --> 00:17:08,720
too and you could put traffic back and

00:17:07,069 --> 00:17:11,510
forth and it would it would stay in the

00:17:08,720 --> 00:17:13,400
data center but there was really nothing

00:17:11,510 --> 00:17:16,069
else between you except that in the

00:17:13,400 --> 00:17:19,189
security groups now there's a new layer

00:17:16,069 --> 00:17:24,020
which is actual network control so it's

00:17:19,189 --> 00:17:25,909
things like subnets ah sorry and stay on

00:17:24,020 --> 00:17:27,679
this line it's things like you can set

00:17:25,909 --> 00:17:29,390
up your own subnets you can define your

00:17:27,679 --> 00:17:31,970
own private eye peas you can set up

00:17:29,390 --> 00:17:34,309
routing tables so this does awesome

00:17:31,970 --> 00:17:39,620
things like with the VPN we can say hey

00:17:34,309 --> 00:17:41,720
any traffic destined for 10 dot to put

00:17:39,620 --> 00:17:43,850
it all on to one machine point it

00:17:41,720 --> 00:17:45,650
towards this machine and this machine

00:17:43,850 --> 00:17:47,750
will forward it off into the ether

00:17:45,650 --> 00:17:49,700
somewhere in our case it was across the

00:17:47,750 --> 00:17:51,440
VPN tunnel and you can route all your

00:17:49,700 --> 00:17:53,450
traffic like that and you can set up

00:17:51,440 --> 00:17:55,429
network rules like this subnet can't

00:17:53,450 --> 00:17:56,899
talk to this other subnet and so you can

00:17:55,429 --> 00:17:58,940
segregate your network and you can do

00:17:56,899 --> 00:17:59,559
all these sorts of things that regular

00:17:58,940 --> 00:18:01,389
network

00:17:59,559 --> 00:18:02,889
Engineers do and I can pretend like I'm

00:18:01,389 --> 00:18:06,129
a real network engineer even though I'm

00:18:02,889 --> 00:18:08,289
not um that's what VPC offers and so

00:18:06,129 --> 00:18:10,029
it's very powerful it's also very

00:18:08,289 --> 00:18:11,919
complicated yeah spend a lot of time

00:18:10,029 --> 00:18:15,039
reading the documentation playing it

00:18:11,919 --> 00:18:17,200
within everything like that but if

00:18:15,039 --> 00:18:21,129
you're trying to play like a real data

00:18:17,200 --> 00:18:22,749
center that's what you need to use so

00:18:21,129 --> 00:18:25,870
now with all that out of the way we'll

00:18:22,749 --> 00:18:28,029
talk about what were actual pain points

00:18:25,870 --> 00:18:31,749
in the migration and there were three

00:18:28,029 --> 00:18:34,690
big ones there's DNS there's Redis which

00:18:31,749 --> 00:18:36,549
was one of our data stores and and my

00:18:34,690 --> 00:18:38,710
sequel which was our other data source

00:18:36,549 --> 00:18:41,230
so these were the pieces that generally

00:18:38,710 --> 00:18:44,679
needed to synchronize with everything

00:18:41,230 --> 00:18:46,570
else that was going on so the DNS

00:18:44,679 --> 00:18:48,519
trouble this one's an obvious one if

00:18:46,570 --> 00:18:50,139
we're going to change our DNS to point

00:18:48,519 --> 00:18:52,139
from the old data center new data center

00:18:50,139 --> 00:18:54,399
which we've got to do at some point

00:18:52,139 --> 00:18:55,990
we've got to make a change to our DNS

00:18:54,399 --> 00:18:58,720
and those changes aren't instant they're

00:18:55,990 --> 00:19:00,610
not even predictable ok they're they're

00:18:58,720 --> 00:19:02,919
incredibly error-prone and you know

00:19:00,610 --> 00:19:06,549
anybody who's ever had to say we'll just

00:19:02,919 --> 00:19:10,210
just wait for DNS to propagate there you

00:19:06,549 --> 00:19:12,999
go so what that means is that we can't

00:19:10,210 --> 00:19:15,279
guarantee stopping traffic to one data

00:19:12,999 --> 00:19:17,649
center unless we just wanted to drop it

00:19:15,279 --> 00:19:19,480
all together and as we talked about

00:19:17,649 --> 00:19:21,220
dropping the traffic all together just

00:19:19,480 --> 00:19:22,360
isn't an option if you just accept that

00:19:21,220 --> 00:19:25,299
it's not an option you going to find a

00:19:22,360 --> 00:19:26,740
way around it so we came up with the

00:19:25,299 --> 00:19:29,889
solution the solution was really very

00:19:26,740 --> 00:19:33,009
simple we were going to take all of our

00:19:29,889 --> 00:19:36,789
app servers on the old data center and

00:19:33,009 --> 00:19:38,590
turn them off and instead replace them

00:19:36,789 --> 00:19:40,240
with running versions of H a proxy and

00:19:38,590 --> 00:19:44,409
just forward all the traffic over the

00:19:40,240 --> 00:19:46,330
VPN and it's secure over the VPN it was

00:19:44,409 --> 00:19:51,480
a nested it's an SSL connection anyway

00:19:46,330 --> 00:19:54,519
and uh it's transparent to the end user

00:19:51,480 --> 00:19:56,019
since we have the certificate ourselves

00:19:54,519 --> 00:19:58,360
we can just terminate the same SSL

00:19:56,019 --> 00:20:00,340
multiple times and nobody knows like

00:19:58,360 --> 00:20:02,860
we're doing our own little man in the

00:20:00,340 --> 00:20:04,570
middle so to speak and it adds

00:20:02,860 --> 00:20:06,519
round-trip time it makes your request

00:20:04,570 --> 00:20:10,029
slower if the request has to go from

00:20:06,519 --> 00:20:11,860
Kansas City to Oregon as an extra hop

00:20:10,029 --> 00:20:13,510
especially if it already came from

00:20:11,860 --> 00:20:16,300
Oregon and now it's gone across

00:20:13,510 --> 00:20:19,030
country and back again for no reason but

00:20:16,300 --> 00:20:21,760
a little bit of a longer request just

00:20:19,030 --> 00:20:24,220
like just like Taylor was saying earlier

00:20:21,760 --> 00:20:26,830
like yeah it's going to slow things down

00:20:24,220 --> 00:20:29,670
but hey an extra 500 milliseconds on the

00:20:26,830 --> 00:20:32,200
request is better than losing it so

00:20:29,670 --> 00:20:34,990
that's pretty obvious for that so let's

00:20:32,200 --> 00:20:37,650
talk about Redis and rescue so that's

00:20:34,990 --> 00:20:42,730
what we use Redis for is rescue and

00:20:37,650 --> 00:20:44,890
Redis failover is is hard um there's red

00:20:42,730 --> 00:20:46,870
a sentinel I don't know if you guys have

00:20:44,890 --> 00:20:51,100
read the docs from Retta Sentinel it's

00:20:46,870 --> 00:20:54,280
something like 30 pages of state machine

00:20:51,100 --> 00:20:55,780
description it's okay Retta Sentinel can

00:20:54,280 --> 00:20:58,570
be in one of eight different states

00:20:55,780 --> 00:21:00,430
during which it'll follow this set of 20

00:20:58,570 --> 00:21:03,610
different rules one by one until it

00:21:00,430 --> 00:21:06,720
comes to a conclusion and and so on and

00:21:03,610 --> 00:21:10,270
so forth I can't understand what it does

00:21:06,720 --> 00:21:12,250
it does work I've gotten it working but

00:21:10,270 --> 00:21:13,960
you know this was a this was like a

00:21:12,250 --> 00:21:15,430
year-long process for us and write a

00:21:13,960 --> 00:21:19,540
sentinel wasn't even at when it started

00:21:15,430 --> 00:21:22,600
so so there's options out there we

00:21:19,540 --> 00:21:25,210
weren't happy with it we we didn't have

00:21:22,600 --> 00:21:28,420
an alternative on how to synchronously

00:21:25,210 --> 00:21:31,360
move all traffic from one reticence to

00:21:28,420 --> 00:21:34,390
another to do like a failover that we

00:21:31,360 --> 00:21:38,470
could conclusively prove wasn't going to

00:21:34,390 --> 00:21:40,240
lose data and accidentally fail two and

00:21:38,470 --> 00:21:43,540
cue an email that was supposed to go out

00:21:40,240 --> 00:21:45,310
or something like that and so that was

00:21:43,540 --> 00:21:47,080
the problem we were facing with reticent

00:21:45,310 --> 00:21:49,120
I think a lot of people probably face it

00:21:47,080 --> 00:21:50,650
it's like the early days of my sequel

00:21:49,120 --> 00:21:52,180
right you've got like this master slave

00:21:50,650 --> 00:21:53,980
and that's all great except when you

00:21:52,180 --> 00:21:55,980
actually need to use the slave and then

00:21:53,980 --> 00:21:58,690
all of a sudden there's lots of problems

00:21:55,980 --> 00:22:02,050
so so our solution was to kind of take a

00:21:58,690 --> 00:22:04,330
step back and think about we're using it

00:22:02,050 --> 00:22:07,030
for cues and so what is a cue really

00:22:04,330 --> 00:22:08,920
well we didn't actually have to

00:22:07,030 --> 00:22:11,920
synchronize them we could have more than

00:22:08,920 --> 00:22:14,770
one of the same queue and we could put

00:22:11,920 --> 00:22:17,230
jobs into both queues at once and we

00:22:14,770 --> 00:22:19,390
could consume jobs from both queues at

00:22:17,230 --> 00:22:21,880
once it doesn't matter right like maybe

00:22:19,390 --> 00:22:24,670
somebody's email got out faster than it

00:22:21,880 --> 00:22:26,410
would have otherwise the ordering didn't

00:22:24,670 --> 00:22:28,120
doesn't even actually matter we just

00:22:26,410 --> 00:22:30,700
need to make sure we did all the work

00:22:28,120 --> 00:22:32,770
that needs to be done so we said okay

00:22:30,700 --> 00:22:35,680
I'm on one data center it's going to go

00:22:32,770 --> 00:22:36,880
to one rescue to you and on the new data

00:22:35,680 --> 00:22:38,350
center it's going to go to totally

00:22:36,880 --> 00:22:40,810
different Redis instance with totally

00:22:38,350 --> 00:22:43,420
different rescue queue and there you go

00:22:40,810 --> 00:22:45,400
and then once the old queue is empty the

00:22:43,420 --> 00:22:48,010
old Q could stay living long after the

00:22:45,400 --> 00:22:49,660
switch over until we're satisfied we

00:22:48,010 --> 00:22:51,730
work it all off and it's empty and then

00:22:49,660 --> 00:22:54,820
then we get rid of it so so this was

00:22:51,730 --> 00:22:58,510
kind of a we didn't really solve the

00:22:54,820 --> 00:23:00,190
problem we we just we just came up with

00:22:58,510 --> 00:23:04,050
a new problem that was easier to solve

00:23:00,190 --> 00:23:06,610
so and then the third one the big one

00:23:04,050 --> 00:23:10,240
this is the one that everybody wonders

00:23:06,610 --> 00:23:13,150
about i think is whether it's my sequel

00:23:10,240 --> 00:23:16,600
or whether it's postgres or whatever the

00:23:13,150 --> 00:23:19,210
case may be how do you deal with this

00:23:16,600 --> 00:23:20,770
you've got a master in one data center

00:23:19,210 --> 00:23:23,770
and you've got a slave in another and

00:23:20,770 --> 00:23:27,370
how do you rewrite your traffic to it

00:23:23,770 --> 00:23:31,780
with with guarantees for your data

00:23:27,370 --> 00:23:34,210
operations and the answer is it's of

00:23:31,780 --> 00:23:36,760
course really really hard so the first

00:23:34,210 --> 00:23:41,560
one is we could go in a master master

00:23:36,760 --> 00:23:42,580
sort of situation which has a lot of we

00:23:41,560 --> 00:23:44,170
all know the issues that are associated

00:23:42,580 --> 00:23:47,770
with that the synchronizing the data

00:23:44,170 --> 00:23:50,440
across you know 300 milliseconds of

00:23:47,770 --> 00:23:52,330
round trip ping time is going to slow

00:23:50,440 --> 00:23:55,510
everything way way down there's lots of

00:23:52,330 --> 00:23:58,630
other problems it introduces reliability

00:23:55,510 --> 00:24:00,700
concerns and everything like that and it

00:23:58,630 --> 00:24:02,530
just it wasn't a route that really made

00:24:00,700 --> 00:24:05,650
sense I don't even think it was it was

00:24:02,530 --> 00:24:07,180
doable um tailored basically said the

00:24:05,650 --> 00:24:10,270
same thing with regards to synchronous

00:24:07,180 --> 00:24:12,100
data so we were going asynchronous on

00:24:10,270 --> 00:24:16,320
the replication and then how do we

00:24:12,100 --> 00:24:19,960
switch everybody over and our solution I

00:24:16,320 --> 00:24:22,200
was to pay a lot of money to buy a

00:24:19,960 --> 00:24:24,190
product called continuant tungsten and

00:24:22,200 --> 00:24:26,680
continuing tungsten is a software

00:24:24,190 --> 00:24:30,310
package it's partially like open source

00:24:26,680 --> 00:24:32,910
and free and then there's licensing for

00:24:30,310 --> 00:24:35,850
a lot of the more advanced features and

00:24:32,910 --> 00:24:39,030
it takes care of

00:24:35,850 --> 00:24:41,070
these things for us and I mean it's it's

00:24:39,030 --> 00:24:42,990
pretty it's straightforward as far as

00:24:41,070 --> 00:24:46,700
Enterprise licensing is concerned it's

00:24:42,990 --> 00:24:49,440
just like buying support from Percona or

00:24:46,700 --> 00:24:52,260
10gen or something like that except

00:24:49,440 --> 00:24:54,929
except these guys have come up with a

00:24:52,260 --> 00:24:57,539
product that takes over the

00:24:54,929 --> 00:25:00,690
responsibility for my sequel replication

00:24:57,539 --> 00:25:03,809
you actually turn off regular my sequel

00:25:00,690 --> 00:25:05,970
replication and it does its own set of

00:25:03,809 --> 00:25:09,240
replication it has like you globally

00:25:05,970 --> 00:25:11,940
unique statement IDs which is out in

00:25:09,240 --> 00:25:14,549
five point my sequel 5.6 now and has

00:25:11,940 --> 00:25:16,789
been in Postgres for a while but these

00:25:14,549 --> 00:25:20,669
guys have had it for quite a bit longer

00:25:16,789 --> 00:25:23,789
global replication statement IDs and it

00:25:20,669 --> 00:25:26,809
has a cluster manager so it you know

00:25:23,789 --> 00:25:31,740
basically has a topology where it

00:25:26,809 --> 00:25:34,770
decides it comes up with a quorum on

00:25:31,740 --> 00:25:37,100
deciding who is the master and if

00:25:34,770 --> 00:25:39,450
there's a failover choosing a slave

00:25:37,100 --> 00:25:40,950
redirecting all the traffic to it and

00:25:39,450 --> 00:25:42,570
everything like that and the cool part

00:25:40,950 --> 00:25:48,330
about it is it actually understand

00:25:42,570 --> 00:25:51,000
sequel and so it takes in your sequel

00:25:48,330 --> 00:25:52,260
statements and then it holds and it says

00:25:51,000 --> 00:25:55,320
okay if we're in the middle of a

00:25:52,260 --> 00:25:58,650
failover we can hold all of your my

00:25:55,320 --> 00:26:00,480
sequels to your sequel commands and wait

00:25:58,650 --> 00:26:05,730
for the failover to finish and then

00:26:00,480 --> 00:26:08,490
release them and it's doing a lot of the

00:26:05,730 --> 00:26:09,539
same all my pictures are broken okay

00:26:08,490 --> 00:26:13,620
well that picture wasn't really

00:26:09,539 --> 00:26:16,640
important anyway all right so it's also

00:26:13,620 --> 00:26:18,720
data center aware so it's got you

00:26:16,640 --> 00:26:20,850
understands that you've got a data

00:26:18,720 --> 00:26:25,350
center versus another data center and it

00:26:20,850 --> 00:26:27,390
understands localized affinity and you

00:26:25,350 --> 00:26:30,630
know the difference between how to fail

00:26:27,390 --> 00:26:33,960
over to a local replica a local slave

00:26:30,630 --> 00:26:35,820
that isn't behind it all versus one

00:26:33,960 --> 00:26:37,830
that's three seconds behind and

00:26:35,820 --> 00:26:40,049
everything like that they've solved a

00:26:37,830 --> 00:26:42,090
lot of the hard problems and they did it

00:26:40,049 --> 00:26:44,890
by this whole concept of like stopping

00:26:42,090 --> 00:26:46,810
your your sequel and then

00:26:44,890 --> 00:26:49,960
doing the switchover and then releasing

00:26:46,810 --> 00:26:51,460
it and all that happens is your requests

00:26:49,960 --> 00:26:56,140
take a little bit longer but nothing

00:26:51,460 --> 00:26:58,360
gets lost I funny my slides also said go

00:26:56,140 --> 00:27:01,180
check out my sequel roll slop and roll

00:26:58,360 --> 00:27:03,220
swap in intermission which would be I

00:27:01,180 --> 00:27:06,280
basically doing the same thing except

00:27:03,220 --> 00:27:08,650
intermission does it act like the HTTP

00:27:06,280 --> 00:27:11,170
request layer for holding all of your

00:27:08,650 --> 00:27:13,480
requests and tungsten is doing it at the

00:27:11,170 --> 00:27:16,960
sequel level so there's some some

00:27:13,480 --> 00:27:19,330
interesting things there so so that's

00:27:16,960 --> 00:27:21,460
how we solved that problem and it's a

00:27:19,330 --> 00:27:24,160
really cool product it allows us to do

00:27:21,460 --> 00:27:26,920
all of the things that that like Taylor

00:27:24,160 --> 00:27:29,500
talked about you know we can swap back

00:27:26,920 --> 00:27:32,590
and forth between our master and any

00:27:29,500 --> 00:27:35,500
number of slaves we do so on a regular

00:27:32,590 --> 00:27:40,120
basis and it and without losing a single

00:27:35,500 --> 00:27:42,700
a single query in the process and so we

00:27:40,120 --> 00:27:45,400
can we can flip them back and forth we

00:27:42,700 --> 00:27:48,250
can take one offline do updates restart

00:27:45,400 --> 00:27:50,650
it we can do schema changes to the slave

00:27:48,250 --> 00:27:54,790
and then bring it up as a master and so

00:27:50,650 --> 00:27:57,880
we can do a manual version of PT online

00:27:54,790 --> 00:28:00,460
schema change but it helps that by

00:27:57,880 --> 00:28:02,140
taking the system totally offline a lot

00:28:00,460 --> 00:28:03,910
of schema changes for us go a lot faster

00:28:02,140 --> 00:28:06,220
than with PT online schema change

00:28:03,910 --> 00:28:08,710
because it's not happening live on the

00:28:06,220 --> 00:28:12,070
server as it's being used for traffic so

00:28:08,710 --> 00:28:15,990
lots of cool things there so we come to

00:28:12,070 --> 00:28:15,990
the big day but we have a question

00:28:27,270 --> 00:28:32,010
well the whole processing things twice

00:28:30,540 --> 00:28:39,030
is something you have to solve even if

00:28:32,010 --> 00:28:42,870
you're not stopping the query but the

00:28:39,030 --> 00:28:47,640
short answer is is no it as far as how

00:28:42,870 --> 00:28:50,940
much slower it is it's it's just like if

00:28:47,640 --> 00:28:53,550
the the my sequel server was under heavy

00:28:50,940 --> 00:28:55,740
load and like it wasn't responding right

00:28:53,550 --> 00:28:57,240
away like the connections just held and

00:28:55,740 --> 00:28:58,590
you know you send in your sequel query

00:28:57,240 --> 00:29:00,000
and you wake some amount of time and

00:28:58,590 --> 00:29:01,710
then it comes back it's like if it was a

00:29:00,000 --> 00:29:04,920
slow work except they're all a lot

00:29:01,710 --> 00:29:07,920
slower how slow depends on how far

00:29:04,920 --> 00:29:10,560
behind the slave was so like if a slave

00:29:07,920 --> 00:29:12,240
is two seconds behind before doing a

00:29:10,560 --> 00:29:15,120
switchover we've got to wait for the

00:29:12,240 --> 00:29:17,400
slave to catch up before sending traffic

00:29:15,120 --> 00:29:19,460
to it and so it can depend on a lot of

00:29:17,400 --> 00:29:22,020
factors it can be a couple of seconds

00:29:19,460 --> 00:29:23,340
and in that period of time all your

00:29:22,020 --> 00:29:25,530
requests are just kind of held in

00:29:23,340 --> 00:29:29,100
waiting as long as your time out isn't

00:29:25,530 --> 00:29:30,780
it super low all of our like all of our

00:29:29,100 --> 00:29:32,340
web services and stuff they just sit

00:29:30,780 --> 00:29:34,710
there and they wait and eventually the

00:29:32,340 --> 00:29:38,160
query comes back and they they go on

00:29:34,710 --> 00:29:41,340
with their day and it's just like it was

00:29:38,160 --> 00:29:43,230
a slow request all right so we come to

00:29:41,340 --> 00:29:44,850
the big day we decide okay we've tested

00:29:43,230 --> 00:29:46,380
everything and we're going to make the

00:29:44,850 --> 00:29:51,390
switch and what kind of prep do we need

00:29:46,380 --> 00:29:55,140
to do we need to lower the DNS TTL down

00:29:51,390 --> 00:29:57,000
to five minutes and test test test have

00:29:55,140 --> 00:29:59,340
we had a copy of everything and we

00:29:57,000 --> 00:30:00,960
basically just flip back and forth over

00:29:59,340 --> 00:30:02,940
and over and over again while doing all

00:30:00,960 --> 00:30:05,910
this simulated traffic until eventually

00:30:02,940 --> 00:30:07,740
one day and every time we do that we'd

00:30:05,910 --> 00:30:10,710
have a problem like something would go

00:30:07,740 --> 00:30:13,440
wrong the data would be synchronize or

00:30:10,710 --> 00:30:16,350
we'd lose something we'd get error

00:30:13,440 --> 00:30:18,600
reports saying that requests were

00:30:16,350 --> 00:30:20,520
returned with an error code that should

00:30:18,600 --> 00:30:22,230
have been successful and we did

00:30:20,520 --> 00:30:24,480
investigate why and figure it out until

00:30:22,230 --> 00:30:26,430
eventually one day we were able to

00:30:24,480 --> 00:30:28,680
switch back and forth and on the test

00:30:26,430 --> 00:30:30,420
environment and we weren't causing any

00:30:28,680 --> 00:30:33,030
errors and so we said okay well it must

00:30:30,420 --> 00:30:34,650
be good now so are you gonna do so we

00:30:33,030 --> 00:30:36,120
came out with this plan there's six

00:30:34,650 --> 00:30:38,220
steps and that's kind of a lot of steps

00:30:36,120 --> 00:30:39,900
right like the whole thing with

00:30:38,220 --> 00:30:40,620
automation is you're supposed to be able

00:30:39,900 --> 00:30:42,780
to

00:30:40,620 --> 00:30:45,570
we'll do a single command for anything

00:30:42,780 --> 00:30:47,550
right that's kind of the the mindset

00:30:45,570 --> 00:30:49,650
that everybody always has is it should

00:30:47,550 --> 00:30:51,840
be a single command because that's the

00:30:49,650 --> 00:30:54,300
least error-prone what we came up with

00:30:51,840 --> 00:30:56,010
were a couple of steps each of which

00:30:54,300 --> 00:30:59,460
were basically a single command and we

00:30:56,010 --> 00:31:02,160
used them as stopping points in order to

00:30:59,460 --> 00:31:03,930
in order to be able to deal with any

00:31:02,160 --> 00:31:07,230
issues that might come up in a safe

00:31:03,930 --> 00:31:09,300
manner it's all well and good until your

00:31:07,230 --> 00:31:10,710
automated process dies in the middle and

00:31:09,300 --> 00:31:12,840
then you're desperately trying to figure

00:31:10,710 --> 00:31:14,970
out why so these gave us rollback points

00:31:12,840 --> 00:31:16,740
I'm going to go through them real quick

00:31:14,970 --> 00:31:18,960
we stopped all non-essential processes

00:31:16,740 --> 00:31:21,900
just because less things working at once

00:31:18,960 --> 00:31:23,490
less errors potential for error so we

00:31:21,900 --> 00:31:25,500
stopped a whole bunch of stuff and then

00:31:23,490 --> 00:31:26,790
we did this three phase thing steps 2 3

00:31:25,500 --> 00:31:28,080
4 i'm going to go through them quick

00:31:26,790 --> 00:31:31,020
here's what it looked like before hand

00:31:28,080 --> 00:31:32,520
uh old data center new data center

00:31:31,020 --> 00:31:36,120
everything like I've just talked about

00:31:32,520 --> 00:31:38,120
and we switched the master database to

00:31:36,120 --> 00:31:41,130
the new data center and what happens is

00:31:38,120 --> 00:31:43,440
very high load all of the queries are

00:31:41,130 --> 00:31:44,670
now going across the VPN to talk to the

00:31:43,440 --> 00:31:47,760
master on the other side of the country

00:31:44,670 --> 00:31:49,170
and every one of those has 300

00:31:47,760 --> 00:31:52,170
milliseconds extra on I mean if your

00:31:49,170 --> 00:31:54,690
page has 10 queries to you know do 10

00:31:52,170 --> 00:31:56,700
different active record fetches or

00:31:54,690 --> 00:31:59,190
whatever then that was the 10 round

00:31:56,700 --> 00:32:00,360
trips and so there's a a heavy amount of

00:31:59,190 --> 00:32:02,670
load there and that's something we knew

00:32:00,360 --> 00:32:04,920
we acknowledge we said well it's okay

00:32:02,670 --> 00:32:06,900
because two seconds after we do that

00:32:04,920 --> 00:32:09,380
step we're going to do the very next

00:32:06,900 --> 00:32:12,900
step which is to turn on H a proxy and

00:32:09,380 --> 00:32:15,570
now we're just at a single round trip so

00:32:12,900 --> 00:32:17,240
now the the requests are being proxy

00:32:15,570 --> 00:32:20,520
through and there's a single round trip

00:32:17,240 --> 00:32:22,740
ma we did it this way instead of vice

00:32:20,520 --> 00:32:25,800
versa because the database switch over

00:32:22,740 --> 00:32:28,050
is still the most complex part the most

00:32:25,800 --> 00:32:29,550
likely for something to go wrong even

00:32:28,050 --> 00:32:31,770
though we done it a whole bunch and we

00:32:29,550 --> 00:32:33,480
were doing fine but this way if

00:32:31,770 --> 00:32:35,550
something went wrong with the database

00:32:33,480 --> 00:32:38,010
part of it since it was the very first

00:32:35,550 --> 00:32:41,070
step we had nothing else to rollback we

00:32:38,010 --> 00:32:44,010
rolled back that one step go back to our

00:32:41,070 --> 00:32:45,360
previous master and we were you know at

00:32:44,010 --> 00:32:47,190
least out of the woods until we figured

00:32:45,360 --> 00:32:49,230
out what was wrong so we did that first

00:32:47,190 --> 00:32:50,790
and accepted the slowness for a couple

00:32:49,230 --> 00:32:53,040
of seconds and then we've got this

00:32:50,790 --> 00:32:54,490
proxying and then we switched the dns

00:32:53,040 --> 00:32:56,050
and so now most of the people

00:32:54,490 --> 00:32:57,550
going to the new stuff there's a couple

00:32:56,050 --> 00:32:59,170
of residual people going to the old

00:32:57,550 --> 00:33:00,730
stuff this is the whole problem we were

00:32:59,170 --> 00:33:03,490
trying to solve to begin with and

00:33:00,730 --> 00:33:06,580
eventually nobody's hitting the old

00:33:03,490 --> 00:33:08,380
stuff anymore and we can get rid of it

00:33:06,580 --> 00:33:09,640
we waited a couple days or whatever and

00:33:08,380 --> 00:33:11,200
made sure that they were like no

00:33:09,640 --> 00:33:14,350
requests in the last 24 hours or

00:33:11,200 --> 00:33:16,270
something and then we can start out all

00:33:14,350 --> 00:33:18,220
the non-essential processes and then

00:33:16,270 --> 00:33:20,170
clear out that old Q so the Q's weren't

00:33:18,220 --> 00:33:21,520
talking to each other in any fashion so

00:33:20,170 --> 00:33:22,840
we've got an old Q and a new cube we

00:33:21,520 --> 00:33:27,910
just work them both off and we're good

00:33:22,840 --> 00:33:30,970
to go all right all right so what's next

00:33:27,910 --> 00:33:34,600
is uh we did a lot of work for this and

00:33:30,970 --> 00:33:37,240
it's not all lost we've been having so

00:33:34,600 --> 00:33:39,940
many dividends paid in the leg work that

00:33:37,240 --> 00:33:42,820
we did to make our infrastructure

00:33:39,940 --> 00:33:45,660
provable to make it reliable to make it

00:33:42,820 --> 00:33:48,429
handle these types of failures we're now

00:33:45,660 --> 00:33:52,000
comfortable in switching to other data

00:33:48,429 --> 00:33:53,500
centers a lot more often obviously it's

00:33:52,000 --> 00:33:56,950
not something we want to do very often

00:33:53,500 --> 00:33:58,750
but you know we know we know it can be

00:33:56,950 --> 00:34:00,970
done and it becomes a tool in your

00:33:58,750 --> 00:34:03,880
toolbox and so that's really good and we

00:34:00,970 --> 00:34:07,179
can continue doing tests fail overs and

00:34:03,880 --> 00:34:09,310
everything like that and we would

00:34:07,179 --> 00:34:10,810
definitely want to do more elaborate

00:34:09,310 --> 00:34:13,619
load testing so this would actually be

00:34:10,810 --> 00:34:15,850
like high load levels of like I said

00:34:13,619 --> 00:34:17,740
capturing real live traffic and then

00:34:15,850 --> 00:34:21,639
replaying it against the server's is

00:34:17,740 --> 00:34:23,290
something I think is really cool and we

00:34:21,639 --> 00:34:25,119
still may want to do that eventually and

00:34:23,290 --> 00:34:26,530
the other is doing synchronized

00:34:25,119 --> 00:34:28,629
configuration with something like

00:34:26,530 --> 00:34:30,580
zookeeper a Doozer makes a lot of the

00:34:28,629 --> 00:34:34,720
changes like which Redis server you're

00:34:30,580 --> 00:34:36,369
supposed to talk to ma makes making

00:34:34,720 --> 00:34:38,560
those kind of changes easier than having

00:34:36,369 --> 00:34:43,350
to wait for chef to run on everything

00:34:38,560 --> 00:34:48,340
and test everything document everything

00:34:43,350 --> 00:34:51,270
and think through everything and that's

00:34:48,340 --> 00:34:51,270
all there is to it

00:35:10,210 --> 00:35:12,240
a

00:35:23,820 --> 00:35:25,940

YouTube URL: https://www.youtube.com/watch?v=3YqBeWjaaPM


