Title: MountainWest RubyConf 2013 TDDing tmux by Seth Vargo
Publication date: 2020-01-28
Playlist: MWRC 2013
Description: 
	You want to test your cookbooks? Cool. Where do you start? In this talk, I'll walk you through step-by-step the process for executing test-driven development on a cookbook. From real-time feedback with guard and terminal-notifier, to chefspec, fauxhai, and foodcritic, quickly learn how to apply both basic and advanced tests in your infrastructure.

Help us caption & translate this video!

http://amara.org/v/FGbk/
Captions: 
	00:00:20,150 --> 00:00:28,619
hi everyone I'm South Fargo I'll do a

00:00:23,519 --> 00:00:30,989
little introduction cool welcome to TD

00:00:28,619 --> 00:00:33,600
dat mux it's like a cool name right it's

00:00:30,989 --> 00:00:36,360
like an alliteration it's fun to say and

00:00:33,600 --> 00:00:38,010
everyone loves alliterations so how many

00:00:36,360 --> 00:00:40,290
people in here consider themselves like

00:00:38,010 --> 00:00:42,659
rubios or developers by a show of hands

00:00:40,290 --> 00:00:43,860
it's cool a little over half how many

00:00:42,659 --> 00:00:47,000
people consider themselves like

00:00:43,860 --> 00:00:49,680
operations people or like ops people

00:00:47,000 --> 00:00:51,989
cool how many of those Ruby people test

00:00:49,680 --> 00:00:53,640
their code every day or every time they

00:00:51,989 --> 00:00:55,199
do something that's cool that's like

00:00:53,640 --> 00:00:57,059
ninety-nine point nine nine percent

00:00:55,199 --> 00:01:02,790
right how many operations people test

00:00:57,059 --> 00:01:04,259
their code that's like three cool so the

00:01:02,790 --> 00:01:06,329
whole point of this talk is all about

00:01:04,259 --> 00:01:08,579
that so you should make friends with

00:01:06,329 --> 00:01:09,810
those rubyists because everything that

00:01:08,579 --> 00:01:11,579
I'm going to tell you today is the stuff

00:01:09,810 --> 00:01:14,340
that they're already doing for their

00:01:11,579 --> 00:01:15,630
existing code and if you need help

00:01:14,340 --> 00:01:20,729
making friends there's a really good

00:01:15,630 --> 00:01:22,439
article on wikiHow so so what is this

00:01:20,729 --> 00:01:24,120
talk really I couldn't fit this on the

00:01:22,439 --> 00:01:26,190
slide but it was how to apply the

00:01:24,120 --> 00:01:28,040
testing stuff you already know in Ruby

00:01:26,190 --> 00:01:31,530
to chef because chef is just Ruby and

00:01:28,040 --> 00:01:33,840
yeah the rest of that so I'm South Fargo

00:01:31,530 --> 00:01:37,020
you may recognize me by my familiar

00:01:33,840 --> 00:01:40,260
red-faced avatar but I now work for

00:01:37,020 --> 00:01:43,920
Opscode so I have this beautiful Opscode

00:01:40,260 --> 00:01:45,540
black and white avatar so like I said I

00:01:43,920 --> 00:01:47,130
work for Opscode I'm a solutions

00:01:45,540 --> 00:01:49,260
engineer I lead our learned chef

00:01:47,130 --> 00:01:51,180
campaign and I also hold all of our

00:01:49,260 --> 00:01:53,000
office hours for newbies so if you want

00:01:51,180 --> 00:01:57,750
helpless chef you should come talk to me

00:01:53,000 --> 00:01:59,100
and shameless plug we're hiring so if

00:01:57,750 --> 00:02:02,700
you're interested in anything head out

00:01:59,100 --> 00:02:03,750
to opscode calm forward slash careers so

00:02:02,700 --> 00:02:06,119
let's talk about testing because that's

00:02:03,750 --> 00:02:08,340
what you came here to talk about as with

00:02:06,119 --> 00:02:09,989
any great project it starts on github so

00:02:08,340 --> 00:02:11,970
we're going to look at the opscode chef

00:02:09,989 --> 00:02:14,700
repo it's just github com for slush

00:02:11,970 --> 00:02:17,099
Opscode for /f repo and it looks like

00:02:14,700 --> 00:02:18,689
this this is your standard chef repo if

00:02:17,099 --> 00:02:20,459
anybody has ever looked at a chef repo

00:02:18,689 --> 00:02:24,200
or seen one before you have a bunch of

00:02:20,459 --> 00:02:26,790
very common files and folders and Josh

00:02:24,200 --> 00:02:28,900
writes all of them

00:02:26,790 --> 00:02:31,120
so we're gonna clone this to our local

00:02:28,900 --> 00:02:33,520
machine I was going to live code this

00:02:31,120 --> 00:02:36,340
but as you all are aware the Wi-Fi is

00:02:33,520 --> 00:02:39,280
like spectacular and I have to download

00:02:36,340 --> 00:02:41,950
gems so this is now a slide deck sorry

00:02:39,280 --> 00:02:44,050
Sascha so the first thing we need to do

00:02:41,950 --> 00:02:45,280
is make a gem file if you are familiar

00:02:44,050 --> 00:02:46,959
with gem files this is just like

00:02:45,280 --> 00:02:50,260
bundlers way of managing dependencies

00:02:46,959 --> 00:02:51,099
and we're going to add a few things so

00:02:50,260 --> 00:02:53,380
the first thing we're going to add a

00:02:51,099 --> 00:02:57,010
chef chef is like infrastructures code

00:02:53,380 --> 00:02:59,140
automation I get paid to say that you

00:02:57,010 --> 00:03:00,700
can use Ruby code to basically configure

00:02:59,140 --> 00:03:03,190
your servers you can manage one server

00:03:00,700 --> 00:03:05,380
you can manage a bazillion servers it's

00:03:03,190 --> 00:03:11,110
pretty awesome you should use it puppet

00:03:05,380 --> 00:03:12,250
school too so chef speck as you may have

00:03:11,110 --> 00:03:14,890
guessed especially for the Ruby

00:03:12,250 --> 00:03:16,810
developers chef spec is our spec testing

00:03:14,890 --> 00:03:18,819
and our spec testing syntax for your

00:03:16,810 --> 00:03:21,400
chef cookbooks so it's the same syntax

00:03:18,819 --> 00:03:23,739
to your already used to but it actually

00:03:21,400 --> 00:03:26,230
runs chef and memory and then reports on

00:03:23,739 --> 00:03:28,780
the results in reality it's like a major

00:03:26,230 --> 00:03:29,980
hack it just like injects itself into

00:03:28,780 --> 00:03:31,540
all of your resources and make sure that

00:03:29,980 --> 00:03:35,320
they ran but it's really cool because it

00:03:31,540 --> 00:03:37,480
works the next thing is fo hi so chef

00:03:35,320 --> 00:03:39,730
spec lacked like this critical component

00:03:37,480 --> 00:03:42,459
which was no tatra buttes so under the

00:03:39,730 --> 00:03:44,109
hood chef uses oh hi OHA I which is this

00:03:42,459 --> 00:03:46,840
awesome tool it basically spits out your

00:03:44,109 --> 00:03:48,549
provision system is JSON data and you

00:03:46,840 --> 00:03:50,829
can use that it contains everything from

00:03:48,549 --> 00:03:52,540
like your users to your IP address to

00:03:50,829 --> 00:03:54,130
like pretty much everything you want to

00:03:52,540 --> 00:03:55,840
know about your system and you can use

00:03:54,130 --> 00:03:57,940
that as like a third party tool outside

00:03:55,840 --> 00:03:59,829
of chef well the problem is chef spec

00:03:57,940 --> 00:04:02,290
expect certain attributes to be defined

00:03:59,829 --> 00:04:04,840
especially like node specific attributes

00:04:02,290 --> 00:04:06,790
that are like a bun to vs santos and

00:04:04,840 --> 00:04:08,530
there's no easy way for you to do that

00:04:06,790 --> 00:04:10,359
unless you want to type out like three

00:04:08,530 --> 00:04:12,060
hundred lines of JSON and every test and

00:04:10,359 --> 00:04:16,239
that's not fun who wants to do that

00:04:12,060 --> 00:04:17,919
nobody so I wrote fo hi back when I was

00:04:16,239 --> 00:04:19,989
an internet custom ink and the idea was

00:04:17,919 --> 00:04:21,789
in my like imperialistic view of the

00:04:19,989 --> 00:04:25,419
world was that like we're gonna have

00:04:21,789 --> 00:04:28,330
like open source system data open source

00:04:25,419 --> 00:04:31,030
oh hi data and it actually took off at

00:04:28,330 --> 00:04:32,530
chef summit so we have like a bunch of

00:04:31,030 --> 00:04:34,570
different operating systems that you can

00:04:32,530 --> 00:04:36,130
pretend to be in a test so you can

00:04:34,570 --> 00:04:38,380
pretend to be a Windows machine on your

00:04:36,130 --> 00:04:39,640
OS x box you can pretend to be in a bun

00:04:38,380 --> 00:04:40,120
to instance with multiple different

00:04:39,640 --> 00:04:43,180
versions

00:04:40,120 --> 00:04:44,680
is on your like other Santa's box which

00:04:43,180 --> 00:04:46,300
is really handy for testing because if

00:04:44,680 --> 00:04:47,620
your unit testing against an a bunch of

00:04:46,300 --> 00:04:49,120
instance and your cookbook behaves

00:04:47,620 --> 00:04:50,949
differently on a doob unto instance than

00:04:49,120 --> 00:04:52,510
it does on a centos instance you need to

00:04:50,949 --> 00:04:54,430
be able to test that and you don't want

00:04:52,510 --> 00:04:55,840
like 15 laptop sitting on in your desk

00:04:54,430 --> 00:04:57,220
I'll running different operating systems

00:04:55,840 --> 00:05:00,190
because that's expensive and you don't

00:04:57,220 --> 00:05:01,510
have that big of a desk another tool

00:05:00,190 --> 00:05:03,100
we're going to talk about is food critic

00:05:01,510 --> 00:05:05,919
how many people are familiar with like

00:05:03,100 --> 00:05:07,540
Giants lint or cane any of those tools

00:05:05,919 --> 00:05:09,340
so food critic is that for chef

00:05:07,540 --> 00:05:10,720
cookbooks it's nothing more than a link

00:05:09,340 --> 00:05:12,760
ting tool it's actually like an

00:05:10,720 --> 00:05:14,800
ever-growing project Android crap like

00:05:12,760 --> 00:05:16,510
just released a new version so there's

00:05:14,800 --> 00:05:18,190
like all kind of rules etsy is really

00:05:16,510 --> 00:05:19,840
big into contributing they have a lot of

00:05:18,190 --> 00:05:21,370
great rules out there it's basically

00:05:19,840 --> 00:05:24,460
just like common pitfalls common

00:05:21,370 --> 00:05:25,660
mistakes that you can avoid by following

00:05:24,460 --> 00:05:27,789
the simple rules that the winter gives

00:05:25,660 --> 00:05:30,220
you another tool i'll talk about a

00:05:27,789 --> 00:05:32,470
little bit in depth morris trainer it's

00:05:30,220 --> 00:05:34,210
like a sandbox saying isolation toll so

00:05:32,470 --> 00:05:36,490
you can move a cookbook into an isolated

00:05:34,210 --> 00:05:38,350
environment run tests against it to see

00:05:36,490 --> 00:05:39,639
how it behaves like item potently and

00:05:38,350 --> 00:05:41,260
like on its own with no other

00:05:39,639 --> 00:05:42,910
interactions which is especially

00:05:41,260 --> 00:05:43,930
important in like unit testing because

00:05:42,910 --> 00:05:46,780
you don't want any of those third-party

00:05:43,930 --> 00:05:47,770
factors influencing your tests and then

00:05:46,780 --> 00:05:49,510
the last thing we want to talk about is

00:05:47,770 --> 00:05:51,910
guard a lot of the rubyists are probably

00:05:49,510 --> 00:05:55,750
familiar with guard but it's really just

00:05:51,910 --> 00:05:56,800
a command-line tool that or well it's

00:05:55,750 --> 00:05:58,990
kind of a command-line tool but it

00:05:56,800 --> 00:06:00,460
watches the file system for modification

00:05:58,990 --> 00:06:04,060
events and anytime you like save a file

00:06:00,460 --> 00:06:06,039
or update a file you can tell guard to

00:06:04,060 --> 00:06:07,180
like do a trigger and you define that

00:06:06,039 --> 00:06:08,770
trigger based on like regular

00:06:07,180 --> 00:06:10,240
expressions so it allows you to like

00:06:08,770 --> 00:06:12,010
watch your files so you can have a

00:06:10,240 --> 00:06:13,599
terminal in like one window and like

00:06:12,010 --> 00:06:15,070
code in another window and as you save

00:06:13,599 --> 00:06:17,979
it runs your tests it's like super

00:06:15,070 --> 00:06:19,419
awesome so lets you know kind of get

00:06:17,979 --> 00:06:21,910
started here the first thing you need to

00:06:19,419 --> 00:06:24,550
do is obviously create a cookbook this

00:06:21,910 --> 00:06:26,260
is t DDT MUX and we're going to make tea

00:06:24,550 --> 00:06:30,250
MUX obviously how many people don't know

00:06:26,260 --> 00:06:32,590
what t muxes terminal multiplexer it's

00:06:30,250 --> 00:06:34,060
cool you should try it out it has lots

00:06:32,590 --> 00:06:35,260
of features like allowing two people to

00:06:34,060 --> 00:06:37,690
code at the same time in a remote

00:06:35,260 --> 00:06:40,840
session you can keep it open i'm not

00:06:37,690 --> 00:06:41,949
gonna talk about tea mugs cool so the

00:06:40,840 --> 00:06:43,300
first thing that we need to do is create

00:06:41,949 --> 00:06:46,210
a blank cookbook we're going to use a

00:06:43,300 --> 00:06:47,470
knife for this that's a CLI for chef so

00:06:46,210 --> 00:06:48,729
we issue a simple command it's a knife

00:06:47,470 --> 00:06:51,070
cookbook create and the name of the

00:06:48,729 --> 00:06:52,780
cookbook in this case t mux this is very

00:06:51,070 --> 00:06:54,580
similar to like rails new

00:06:52,780 --> 00:06:57,400
whatever app name or like gem knew

00:06:54,580 --> 00:06:58,660
whatever gem name and that's going to

00:06:57,400 --> 00:07:00,100
create a scaffolding for us it's going

00:06:58,660 --> 00:07:02,169
to give us some output and say like hey

00:07:00,100 --> 00:07:03,490
we created all these files and if we go

00:07:02,169 --> 00:07:05,320
and look at those files in our editor

00:07:03,490 --> 00:07:07,240
will see you know a bunch of folders and

00:07:05,320 --> 00:07:09,040
a couple files some metadata and whatnot

00:07:07,240 --> 00:07:11,620
and this is standard just like out of

00:07:09,040 --> 00:07:13,240
the box with a chef install but it turns

00:07:11,620 --> 00:07:15,310
out we don't really need like half of

00:07:13,240 --> 00:07:16,990
these so we're just going to get rid of

00:07:15,310 --> 00:07:18,100
them to make things simple so we're

00:07:16,990 --> 00:07:20,710
going to be dealing with like attributes

00:07:18,100 --> 00:07:23,200
recipes and templates and some other

00:07:20,710 --> 00:07:26,110
files so the first thing that we want to

00:07:23,200 --> 00:07:27,520
look at is the the metadata you always

00:07:26,110 --> 00:07:28,870
anytime you make a new cookbook this is

00:07:27,520 --> 00:07:30,310
like the first thing you want to do just

00:07:28,870 --> 00:07:31,990
like the first thing you want to do

00:07:30,310 --> 00:07:33,130
whenever you make a new gem is edit your

00:07:31,990 --> 00:07:36,010
jumps back and add all your author

00:07:33,130 --> 00:07:38,830
information so do that change the

00:07:36,010 --> 00:07:40,900
version number add a description if you

00:07:38,830 --> 00:07:41,890
really want to the next thing we're

00:07:40,900 --> 00:07:43,360
going to do is because we're doing

00:07:41,890 --> 00:07:45,400
test-driven development is we're going

00:07:43,360 --> 00:07:46,990
to write specs so we've generated our

00:07:45,400 --> 00:07:48,490
cookbook scaffold and we only did that

00:07:46,990 --> 00:07:50,470
because our specs to live within our

00:07:48,490 --> 00:07:52,479
cookbook everything else we're going to

00:07:50,470 --> 00:07:54,550
do after we write our specs so that we

00:07:52,479 --> 00:07:58,150
can write the specs watch them fail

00:07:54,550 --> 00:07:59,050
write the code watch them pass so the

00:07:58,150 --> 00:08:01,540
first thing we're gonna do is make a

00:07:59,050 --> 00:08:03,400
spec helper at the root of our chef repo

00:08:01,540 --> 00:08:05,530
and all we're going to do is require

00:08:03,400 --> 00:08:06,910
chef spec so you may say well why don't

00:08:05,530 --> 00:08:08,950
you just require chefs back at the top

00:08:06,910 --> 00:08:10,570
of every file well the spec helper is a

00:08:08,950 --> 00:08:12,010
common pattern some people argue that

00:08:10,570 --> 00:08:15,820
it's an anti-pattern that's up to you

00:08:12,010 --> 00:08:17,800
he's shaking his head but essentially

00:08:15,820 --> 00:08:19,510
this allows us to share like our spec

00:08:17,800 --> 00:08:21,100
configuration across our project so

00:08:19,510 --> 00:08:22,450
maybe we want like variables that are

00:08:21,100 --> 00:08:23,800
available to everything maybe we want to

00:08:22,450 --> 00:08:25,390
change the path that things are running

00:08:23,800 --> 00:08:28,990
if we're going to use like cucumber in

00:08:25,390 --> 00:08:29,919
aruba like help you later but like you

00:08:28,990 --> 00:08:31,479
know there's it just keeps all the

00:08:29,919 --> 00:08:32,680
configuration in one file and it makes

00:08:31,479 --> 00:08:34,900
all of our tests all we have to do is

00:08:32,680 --> 00:08:36,490
require a single file at the top it's

00:08:34,900 --> 00:08:41,979
like introducing a single point of

00:08:36,490 --> 00:08:43,060
failure but in a good way so like I said

00:08:41,979 --> 00:08:44,260
it's totally unnecessary you could

00:08:43,060 --> 00:08:45,910
require chefs back at the top of every

00:08:44,260 --> 00:08:47,589
file you can even pass like a dash our

00:08:45,910 --> 00:08:50,290
flag to our spec to make it require it

00:08:47,589 --> 00:08:51,670
during the the run so the first thing

00:08:50,290 --> 00:08:52,990
we're going to do is make our default

00:08:51,670 --> 00:08:55,960
spec so this is going to live in the

00:08:52,990 --> 00:08:57,730
spec directory default spec it's common

00:08:55,960 --> 00:09:00,190
practice and you'll see why in a little

00:08:57,730 --> 00:09:02,170
bit to name the spec the first part of

00:09:00,190 --> 00:09:03,610
the spec without the underscore to the

00:09:02,170 --> 00:09:06,160
name of the recipe so this is going to

00:09:03,610 --> 00:09:08,319
correspond to the default recipe

00:09:06,160 --> 00:09:11,529
if your recipe was like foo you would

00:09:08,319 --> 00:09:12,910
name it foo underscore spec RB and

00:09:11,529 --> 00:09:14,259
that's just so that as a developer you

00:09:12,910 --> 00:09:16,060
can match them up but we'll also see

00:09:14,259 --> 00:09:18,790
that comes in handy with guard later

00:09:16,060 --> 00:09:20,769
down the line so let's write our like

00:09:18,790 --> 00:09:22,810
our first test so the first thing we

00:09:20,769 --> 00:09:24,370
need to do is create a chef runner and

00:09:22,810 --> 00:09:25,810
we do that this way there's multiple

00:09:24,370 --> 00:09:27,069
ways to like create variables you can

00:09:25,810 --> 00:09:28,810
make an instance variable in a before

00:09:27,069 --> 00:09:31,300
block but I prefer to use the let

00:09:28,810 --> 00:09:33,310
because it sleazy loaded and our spec

00:09:31,300 --> 00:09:36,399
and this is the syntax for creating a

00:09:33,310 --> 00:09:38,230
new chef runner so its name spaced under

00:09:36,399 --> 00:09:40,839
chef spec I make a chef runner and I

00:09:38,230 --> 00:09:43,089
converge on the T marks cookbook and

00:09:40,839 --> 00:09:44,980
that T MUX colon colon default is like

00:09:43,089 --> 00:09:47,920
the chef syntax that's saying the team X

00:09:44,980 --> 00:09:49,180
cookbook and the default recipe I could

00:09:47,920 --> 00:09:51,279
have left out default and it would have

00:09:49,180 --> 00:09:53,949
assumed the the default recipe but I

00:09:51,279 --> 00:09:55,990
wanted to be explicit here so we now

00:09:53,949 --> 00:09:59,259
have access to this this runner object

00:09:55,990 --> 00:10:01,480
and we can run our first test so simple

00:09:59,259 --> 00:10:02,980
our specs and tax it's going to install

00:10:01,480 --> 00:10:04,660
a tee much package that's what we want

00:10:02,980 --> 00:10:06,879
it to do install the team Oakes package

00:10:04,660 --> 00:10:08,709
and we're going to use the new r-spec

00:10:06,879 --> 00:10:10,990
syntax because it's better than the old

00:10:08,709 --> 00:10:13,630
one so we're going to expect the runner

00:10:10,990 --> 00:10:15,730
to install this T mux package super

00:10:13,630 --> 00:10:16,870
straightforward like very English like

00:10:15,730 --> 00:10:19,029
you could have a non technical person

00:10:16,870 --> 00:10:20,949
read this and understand what's going on

00:10:19,029 --> 00:10:22,630
in the output which you'll see in a

00:10:20,949 --> 00:10:24,430
little bit is even more like

00:10:22,630 --> 00:10:26,589
straightforward so a technical person

00:10:24,430 --> 00:10:28,300
like a product manager non-technical

00:10:26,589 --> 00:10:30,430
person like a product manager or you

00:10:28,300 --> 00:10:31,810
know your grandma could come along and

00:10:30,430 --> 00:10:33,759
read this and know what's going on and

00:10:31,810 --> 00:10:36,550
then we also want to drop our own

00:10:33,759 --> 00:10:37,779
configuration file in here so that we

00:10:36,550 --> 00:10:39,040
can manage like all our keyboard

00:10:37,779 --> 00:10:41,170
shortcuts and our keyboard bindings

00:10:39,040 --> 00:10:43,089
because that's what team Oakes is cool

00:10:41,170 --> 00:10:45,670
for so you may be asking yourself like

00:10:43,089 --> 00:10:47,529
what like where did all of these things

00:10:45,670 --> 00:10:50,319
come from where did like install package

00:10:47,529 --> 00:10:53,350
and create file and this runner come

00:10:50,319 --> 00:10:56,380
from and the answer is this incredibly

00:10:53,350 --> 00:10:58,059
long github read me that contains like

00:10:56,380 --> 00:11:00,910
all of the information that you would

00:10:58,059 --> 00:11:01,839
ever need to know about Chef spec please

00:11:00,910 --> 00:11:05,170
don't try to read that you'll get a

00:11:01,839 --> 00:11:06,519
headache but you can see like as you're

00:11:05,170 --> 00:11:08,829
going through there there's literally

00:11:06,519 --> 00:11:12,370
tons of matters that you can choose from

00:11:08,829 --> 00:11:14,410
and every like internal chef resource is

00:11:12,370 --> 00:11:16,690
mapped to an R Spec matter and then

00:11:14,410 --> 00:11:18,130
there are other custom ones and

00:11:16,690 --> 00:11:20,380
like third party ones that you can plug

00:11:18,130 --> 00:11:22,300
in to chef spec that allow you to test

00:11:20,380 --> 00:11:25,000
like third party things so if somebody

00:11:22,300 --> 00:11:26,500
else is exposing an LW RP you they

00:11:25,000 --> 00:11:28,300
probably have like an r-spec provider

00:11:26,500 --> 00:11:30,460
that you can hook in and test that LW RP

00:11:28,300 --> 00:11:32,280
with like a custom matcher and it's our

00:11:30,460 --> 00:11:34,240
spec so you can also write your own

00:11:32,280 --> 00:11:36,400
custom matches that's what makes it

00:11:34,240 --> 00:11:38,080
awesome anyway chef spike has amazing

00:11:36,400 --> 00:11:39,610
documentation if you're looking for like

00:11:38,080 --> 00:11:41,860
a project to model your documentation

00:11:39,610 --> 00:11:42,820
after look at chef speck it's really

00:11:41,860 --> 00:11:44,020
interesting because one of the big

00:11:42,820 --> 00:11:46,330
complaints when it first came out was

00:11:44,020 --> 00:11:47,710
like the documentation sucks and Andrew

00:11:46,330 --> 00:11:49,060
spent a lot of time and a lot of energy

00:11:47,710 --> 00:11:50,650
like making sure that it's like

00:11:49,060 --> 00:11:52,900
centralized and very understandable and

00:11:50,650 --> 00:11:54,820
very human readable so definitely look

00:11:52,900 --> 00:11:56,410
at it for like no other reason than it

00:11:54,820 --> 00:11:58,560
looks cool and is like really easy to

00:11:56,410 --> 00:12:00,310
understand and there's a ton of examples

00:11:58,560 --> 00:12:03,070
finally the last thing we're going to do

00:12:00,310 --> 00:12:05,220
is make a reference to an 80 song and

00:12:03,070 --> 00:12:08,560
then cross it out and put color above it

00:12:05,220 --> 00:12:10,660
because I want color so I'm going to add

00:12:08,560 --> 00:12:12,520
to my dark spec file which is just like

00:12:10,660 --> 00:12:15,910
a top-level configuration file for my

00:12:12,520 --> 00:12:17,590
r-spec things that I want color for no

00:12:15,910 --> 00:12:18,910
other reason than like I have OCD and

00:12:17,590 --> 00:12:22,300
like if it's not in color it really

00:12:18,910 --> 00:12:24,340
bothers me so we can run our spec with

00:12:22,300 --> 00:12:25,960
the simple r-spec you know CLI if you're

00:12:24,340 --> 00:12:27,910
using bundler you might like prefix this

00:12:25,960 --> 00:12:29,830
with bundle exec or bin stubs or

00:12:27,910 --> 00:12:32,620
whatever you want to do and we pass it

00:12:29,830 --> 00:12:34,630
the path to the default spec and we can

00:12:32,620 --> 00:12:35,740
see hopefully like it failed that's good

00:12:34,630 --> 00:12:37,330
it failed right like we don't have

00:12:35,740 --> 00:12:38,650
anything it should fail but if you

00:12:37,330 --> 00:12:40,540
actually read this error message it

00:12:38,650 --> 00:12:42,670
doesn't make any sense it says like

00:12:40,540 --> 00:12:46,330
cannot convert symbol and two integer

00:12:42,670 --> 00:12:48,730
like blue pill attributes of default

00:12:46,330 --> 00:12:50,350
like what is going on i have not this is

00:12:48,730 --> 00:12:51,910
the first time i've mentioned a blue

00:12:50,350 --> 00:12:54,190
pill in this talk like where the hell

00:12:51,910 --> 00:12:55,750
did blue pill come from well it turns

00:12:54,190 --> 00:12:57,460
out during its convergent stage chef

00:12:55,750 --> 00:13:00,190
spec is going to pull in all of your

00:12:57,460 --> 00:13:02,110
cookbooks and blue pill also happen to

00:13:00,190 --> 00:13:04,630
be in my cookbook path of this repo and

00:13:02,110 --> 00:13:06,670
it's expecting certain attributes that

00:13:04,630 --> 00:13:09,520
are defined I think in this case it's

00:13:06,670 --> 00:13:10,990
like the path to the Ruby and those

00:13:09,520 --> 00:13:12,910
aren't defined by chefs bec because they

00:13:10,990 --> 00:13:15,370
vary on system to system which was like

00:13:12,910 --> 00:13:17,950
precisely the reason that I you know set

00:13:15,370 --> 00:13:20,230
out to write fo hi I have like an

00:13:17,950 --> 00:13:23,050
obligate obligatory meme because this is

00:13:20,230 --> 00:13:25,540
a DevOps talk so like I set out to like

00:13:23,050 --> 00:13:27,820
capture all of the machines and defeat

00:13:25,540 --> 00:13:30,640
all of the evil like provisioning beasts

00:13:27,820 --> 00:13:32,740
that exists so info my first

00:13:30,640 --> 00:13:34,420
it was like a separate gem and like

00:13:32,740 --> 00:13:35,890
people are contributing JSON files be a

00:13:34,420 --> 00:13:37,660
pull request and it was really cold it

00:13:35,890 --> 00:13:40,510
was really awesome and then Andrew and I

00:13:37,660 --> 00:13:41,770
got together chef summit and we talked a

00:13:40,510 --> 00:13:43,660
little bit and then we talked offline

00:13:41,770 --> 00:13:46,080
and we said well wouldn't it make more

00:13:43,660 --> 00:13:49,300
sense if like this was part of chef spec

00:13:46,080 --> 00:13:51,130
so this is what you used to do in a

00:13:49,300 --> 00:13:52,990
before block you would mock out a

00:13:51,130 --> 00:13:55,720
platform and this is just how simple fo

00:13:52,990 --> 00:13:58,210
hayas you mock out a bun to platform

00:13:55,720 --> 00:14:01,090
version 1204 version 1210 that can be

00:13:58,210 --> 00:14:02,320
like windows version XP it's like super

00:14:01,090 --> 00:14:03,820
straightforward you know exactly what's

00:14:02,320 --> 00:14:05,890
going on and then you would create a

00:14:03,820 --> 00:14:08,140
chef runner and fo hi would basically

00:14:05,890 --> 00:14:11,320
hook into the initialized method of your

00:14:08,140 --> 00:14:14,830
chef runner and inject JSON data into

00:14:11,320 --> 00:14:16,090
the node which was like really hacky so

00:14:14,830 --> 00:14:18,640
we came up with a better way which was

00:14:16,090 --> 00:14:20,770
to put it inside of Chef spec so now you

00:14:18,640 --> 00:14:23,170
create a new a bun to 12 of four node

00:14:20,770 --> 00:14:25,300
and then you converge it so now it's

00:14:23,170 --> 00:14:26,470
even more straightforward to use fo high

00:14:25,300 --> 00:14:28,630
on your projects because you probably

00:14:26,470 --> 00:14:30,160
don't even know you're doing it and as

00:14:28,630 --> 00:14:31,630
Phil hi gets updated chef spec

00:14:30,160 --> 00:14:34,270
automatically inherits all of the new

00:14:31,630 --> 00:14:35,590
platforms that it did it get so like if

00:14:34,270 --> 00:14:37,780
you have red hat and you want to donate

00:14:35,590 --> 00:14:41,110
red hat provisions you should come talk

00:14:37,780 --> 00:14:43,140
to me because we could use them so this

00:14:41,110 --> 00:14:45,130
is what the rest of our test looks like

00:14:43,140 --> 00:14:47,920
basically copy and paste what we had

00:14:45,130 --> 00:14:49,780
before so we are now mocking and a bunch

00:14:47,920 --> 00:14:51,490
of 1204 which means I get all of those

00:14:49,780 --> 00:14:53,530
attributes that I have to define like

00:14:51,490 --> 00:14:55,270
where is Ruby who are these users what's

00:14:53,530 --> 00:14:57,640
my IP address and all of that's like

00:14:55,270 --> 00:14:59,490
stock data that faux high like makes up

00:14:57,640 --> 00:15:02,230
for you when it makes up the JSON file

00:14:59,490 --> 00:15:03,580
and the same test as before and you can

00:15:02,230 --> 00:15:06,970
see we're still converging the default

00:15:03,580 --> 00:15:08,860
recipe so now if we run our tests we get

00:15:06,970 --> 00:15:11,680
real failures because we still haven't

00:15:08,860 --> 00:15:13,540
written our cookbook and we see like no

00:15:11,680 --> 00:15:17,350
package name team Oakes with action

00:15:13,540 --> 00:15:19,390
install found no resource named etsy

00:15:17,350 --> 00:15:21,280
team our comp with action create found

00:15:19,390 --> 00:15:23,260
so that means we didn't tell it to

00:15:21,280 --> 00:15:25,420
install the package and we didn't give

00:15:23,260 --> 00:15:28,510
it a file to write so this is really

00:15:25,420 --> 00:15:29,980
cool so now we can set up guard so that

00:15:28,510 --> 00:15:32,320
we can write our cookbook and watch our

00:15:29,980 --> 00:15:33,910
test pass how do we set up guard well

00:15:32,320 --> 00:15:35,560
it's already in our gem file we already

00:15:33,910 --> 00:15:36,970
have a bunch of guard hooks in there so

00:15:35,560 --> 00:15:38,890
all we have to do is run guard in it and

00:15:36,970 --> 00:15:40,150
that's going to make a guard file for us

00:15:38,890 --> 00:15:41,680
and we're going to get co-op put that

00:15:40,150 --> 00:15:43,380
says writing a new guard file to

00:15:41,680 --> 00:15:45,910
whatever path you're

00:15:43,380 --> 00:15:48,070
and it's going to look like this so

00:15:45,910 --> 00:15:51,720
we're guarding our spec because we're

00:15:48,070 --> 00:15:54,520
using chef spec and for whatever reason

00:15:51,720 --> 00:15:56,230
our spec doesn't understand where specs

00:15:54,520 --> 00:15:57,910
lives you have to actually pass the

00:15:56,230 --> 00:15:59,890
specs path when you're doing like chef

00:15:57,910 --> 00:16:01,360
specific things it gets it in rails it

00:15:59,890 --> 00:16:04,560
gets it in like Pierre Ruby projects but

00:16:01,360 --> 00:16:07,900
it doesn't recognize chefs path to specs

00:16:04,560 --> 00:16:09,370
chefs specs path suspects so the first

00:16:07,900 --> 00:16:11,380
thing we're going to do is watch that

00:16:09,370 --> 00:16:13,140
like anything that is in like a spec

00:16:11,380 --> 00:16:15,010
directory and ends in underscore spec

00:16:13,140 --> 00:16:17,050
and the next thing we're going to do is

00:16:15,010 --> 00:16:19,060
watch that globalspec helper and

00:16:17,050 --> 00:16:20,770
whenever we watch like when we see a

00:16:19,060 --> 00:16:24,010
change to that spec helper we want to

00:16:20,770 --> 00:16:25,120
run all of the specs because most likely

00:16:24,010 --> 00:16:27,270
you change like an hour spec

00:16:25,120 --> 00:16:30,220
configuration you required a new file

00:16:27,270 --> 00:16:31,960
you added a global variable so you could

00:16:30,220 --> 00:16:33,970
be breaking things so if you change that

00:16:31,960 --> 00:16:35,980
spec helper you want to run all of your

00:16:33,970 --> 00:16:37,660
tests the next thing we're going to do

00:16:35,980 --> 00:16:40,330
is we're going to map a specific

00:16:37,660 --> 00:16:41,650
cookbook to its associated spec and I'm

00:16:40,330 --> 00:16:44,380
sorry that this is an ugly regular

00:16:41,650 --> 00:16:45,610
expression but it's a regex cool so

00:16:44,380 --> 00:16:47,020
anything in the cooks looked at

00:16:45,610 --> 00:16:48,550
cookbooks directory then we're going to

00:16:47,020 --> 00:16:51,430
capture the name of the cookbook that's

00:16:48,550 --> 00:16:55,120
what that first capture is for and then

00:16:51,430 --> 00:16:56,440
any recipe and then the recipe name so

00:16:55,120 --> 00:16:58,450
this would be like cookbooks t-maxx

00:16:56,440 --> 00:17:00,430
recipes default RB and we've captured

00:16:58,450 --> 00:17:02,890
team ox and default and we're going to

00:17:00,430 --> 00:17:05,920
run cookbooks the name of that cookbook

00:17:02,890 --> 00:17:07,480
which is team Oakes spec and then the

00:17:05,920 --> 00:17:09,400
name of that recipe which was default

00:17:07,480 --> 00:17:10,810
underscore spec dot RB so that's why it

00:17:09,400 --> 00:17:13,480
was important earlier when I said that

00:17:10,810 --> 00:17:15,250
like we match the name of the recipe to

00:17:13,480 --> 00:17:17,530
the actual spec that's running so we can

00:17:15,250 --> 00:17:19,480
use guard to like associate whenever one

00:17:17,530 --> 00:17:22,630
file is saved to run the associated spec

00:17:19,480 --> 00:17:24,610
and similarly like whenever anything is

00:17:22,630 --> 00:17:26,650
saved in the cookbook run the associated

00:17:24,610 --> 00:17:28,600
specs for that cookbook so this last one

00:17:26,650 --> 00:17:30,760
says like if I modify an attribute or if

00:17:28,600 --> 00:17:32,890
I modify a template like let's rerun the

00:17:30,760 --> 00:17:34,960
specs so this is really cool because

00:17:32,890 --> 00:17:36,610
we're mapping like a recipe directly to

00:17:34,960 --> 00:17:37,930
its Peck but then anything else that we

00:17:36,610 --> 00:17:39,430
change we need to run all the specs

00:17:37,930 --> 00:17:41,710
because we don't know what might break

00:17:39,430 --> 00:17:45,700
if we delete a template or change an

00:17:41,710 --> 00:17:48,700
attribute so we run guard and guard is

00:17:45,700 --> 00:17:50,290
just guard in your terminal and we'll

00:17:48,700 --> 00:17:51,670
see something along these lines it takes

00:17:50,290 --> 00:17:53,860
like two or three seconds for it to like

00:17:51,670 --> 00:17:55,750
initialize then it's going to say hey

00:17:53,860 --> 00:17:57,040
I'm watching your chef repo and I'm

00:17:55,750 --> 00:17:58,510
run all your specs because you told me

00:17:57,040 --> 00:18:00,100
to run our spec and then we're gonna get

00:17:58,510 --> 00:18:01,510
the exact same failure messages but

00:18:00,100 --> 00:18:03,190
you're not going to regain control of

00:18:01,510 --> 00:18:04,210
your terminal it's going to hang there

00:18:03,190 --> 00:18:06,460
and you're going to be like what is

00:18:04,210 --> 00:18:08,020
going on I want to type but that's

00:18:06,460 --> 00:18:10,390
because guard is actually listening in

00:18:08,020 --> 00:18:13,510
the background to file system changes so

00:18:10,390 --> 00:18:15,310
if we go and save a file or add a new

00:18:13,510 --> 00:18:17,200
file to our repo guard is going to run

00:18:15,310 --> 00:18:18,490
our tests again because it did that did

00:18:17,200 --> 00:18:21,370
that mapping that we saw earlier in the

00:18:18,490 --> 00:18:23,350
guard file so this is like true TDD so

00:18:21,370 --> 00:18:25,840
let's make our default recipe this is in

00:18:23,350 --> 00:18:27,310
recipes default RB and we're just going

00:18:25,840 --> 00:18:30,510
to use chefs default package provider

00:18:27,310 --> 00:18:33,670
for tea mugs so it's packaged tea mux

00:18:30,510 --> 00:18:35,800
and we're going to go ahead and drop the

00:18:33,670 --> 00:18:37,210
template so this is like a super simple

00:18:35,800 --> 00:18:38,830
recipe we're coming in it like five

00:18:37,210 --> 00:18:41,650
lines of code without comments or white

00:18:38,830 --> 00:18:45,240
space and all we're saying is right out

00:18:41,650 --> 00:18:48,820
etsy team x comp with this source file

00:18:45,240 --> 00:18:50,320
should be 644 install that package and

00:18:48,820 --> 00:18:52,120
chef will execute these in the order

00:18:50,320 --> 00:18:53,770
that it receives them so you never have

00:18:52,120 --> 00:18:55,620
to worry about like it dropping off the

00:18:53,770 --> 00:18:59,500
template before the package is installed

00:18:55,620 --> 00:19:02,080
so if we save that file and all we have

00:18:59,500 --> 00:19:03,340
to do is save it in our editor will go

00:19:02,080 --> 00:19:04,750
back and look at our terminal which was

00:19:03,340 --> 00:19:06,820
running in another window or you know

00:19:04,750 --> 00:19:09,700
another monitor and all the specs past

00:19:06,820 --> 00:19:11,590
that's awesome that's a free does

00:19:09,700 --> 00:19:15,720
anybody see what's like wrong with this

00:19:11,590 --> 00:19:15,720
situation though yeah

00:19:29,510 --> 00:19:34,980
yeah so I haven't made a template yet it

00:19:32,460 --> 00:19:37,260
doesn't exist yet so why do my test pass

00:19:34,980 --> 00:19:39,000
well this is kind of like one of the

00:19:37,260 --> 00:19:42,330
gotchas of chess peg and the way that

00:19:39,000 --> 00:19:45,900
injects itself so we told chef's back in

00:19:42,330 --> 00:19:48,540
our test that we want to create a

00:19:45,900 --> 00:19:51,600
template we want chef to run a template

00:19:48,540 --> 00:19:53,730
resource and chef spec listens for that

00:19:51,600 --> 00:19:55,470
template resource so literally all it

00:19:53,730 --> 00:19:58,050
listens for is that you called template

00:19:55,470 --> 00:20:00,750
with that path it doesn't actually

00:19:58,050 --> 00:20:02,640
execute the resource because it found it

00:20:00,750 --> 00:20:05,130
it says hey like I want to be fast I'm a

00:20:02,640 --> 00:20:07,230
unit test let's move on well the problem

00:20:05,130 --> 00:20:10,620
is it because it's not actually running

00:20:07,230 --> 00:20:13,290
your code you don't know like that that

00:20:10,620 --> 00:20:15,960
template doesn't exist so the way we fix

00:20:13,290 --> 00:20:18,300
that is to actually test the content of

00:20:15,960 --> 00:20:20,700
the template we're writing so we can

00:20:18,300 --> 00:20:22,470
alter our test to expect the runner to

00:20:20,700 --> 00:20:25,190
create a file and that's what we were

00:20:22,470 --> 00:20:28,170
doing before all we have to do is add

00:20:25,190 --> 00:20:30,270
with content and that's a chainable

00:20:28,170 --> 00:20:32,100
feature of our spec and give it the

00:20:30,270 --> 00:20:33,780
first line of the file or you could

00:20:32,100 --> 00:20:36,150
totally put the whole content of the

00:20:33,780 --> 00:20:37,320
file in there and this is really

00:20:36,150 --> 00:20:38,640
powerful because it gives you the

00:20:37,320 --> 00:20:40,170
ability to make sure your templates are

00:20:38,640 --> 00:20:41,490
being written out properly if you're

00:20:40,170 --> 00:20:43,620
putting variables in there or like

00:20:41,490 --> 00:20:45,510
grabbing node attributes super awesome

00:20:43,620 --> 00:20:48,300
and this is like a partial regex Mac so

00:20:45,510 --> 00:20:50,610
you can match any line in the file which

00:20:48,300 --> 00:20:53,100
is super cool that's really confusing

00:20:50,610 --> 00:20:54,600
that like you can pass a chef spec run

00:20:53,100 --> 00:20:57,030
but it's not actually going to pass a

00:20:54,600 --> 00:20:58,380
chef Ron which is why we're going to

00:20:57,030 --> 00:21:00,420
look at some other tools in a little bit

00:20:58,380 --> 00:21:03,120
so if we add that we're going to see

00:21:00,420 --> 00:21:04,860
like oh there's no template name t max

00:21:03,120 --> 00:21:06,630
calm found in any of the default

00:21:04,860 --> 00:21:08,400
locations chef 11 this output has

00:21:06,630 --> 00:21:09,510
changed a little bit but it's still

00:21:08,400 --> 00:21:12,000
going to give you a very similar error

00:21:09,510 --> 00:21:14,640
message so we'll drop that cop file in I

00:21:12,000 --> 00:21:16,290
stole this from the interwebs we're

00:21:14,640 --> 00:21:18,750
going to put it in templates default T

00:21:16,290 --> 00:21:20,580
mux comp and we're going to run guard

00:21:18,750 --> 00:21:22,530
well guard has been running when we save

00:21:20,580 --> 00:21:23,640
that file we're going to get all the

00:21:22,530 --> 00:21:25,980
examples of finished in like

00:21:23,640 --> 00:21:27,840
microseconds that's cool we're awesome

00:21:25,980 --> 00:21:30,690
we have like successfully done

00:21:27,840 --> 00:21:35,880
test-driven development on a cookbook

00:21:30,690 --> 00:21:37,560
who's excited woo cool so the next thing

00:21:35,880 --> 00:21:39,510
we need is more tests right because like

00:21:37,560 --> 00:21:40,029
what does it talk without more testing

00:21:39,510 --> 00:21:41,139
but

00:21:40,029 --> 00:21:42,340
we're going to do unit tests anymore

00:21:41,139 --> 00:21:44,109
because we've like pretty much exhausted

00:21:42,340 --> 00:21:45,249
the unit test for this cookbook aside

00:21:44,109 --> 00:21:48,279
from the fact that we've only tested on

00:21:45,249 --> 00:21:49,269
a bun to 1204 let's talk about some

00:21:48,279 --> 00:21:51,190
other things let's talk about food

00:21:49,269 --> 00:21:52,629
critic it's especially important that

00:21:51,190 --> 00:21:54,580
we're like linting our code especially

00:21:52,629 --> 00:21:56,529
if you're working in a team or commute

00:21:54,580 --> 00:21:57,999
like putting this cookbook out for other

00:21:56,529 --> 00:22:00,580
people to use in the community accepting

00:21:57,999 --> 00:22:02,559
pull requests etc let's run food critic

00:22:00,580 --> 00:22:03,789
it's in our gem file so all we have to

00:22:02,559 --> 00:22:05,080
do is say food critic and give it the

00:22:03,789 --> 00:22:08,649
path to the root of the cookbook

00:22:05,080 --> 00:22:11,320
cookbook steam ox and you can even

00:22:08,649 --> 00:22:12,940
include arbitrary rules so like Etsy and

00:22:11,320 --> 00:22:14,289
custom ink all have their own rules you

00:22:12,940 --> 00:22:17,710
can write our own organization rolls

00:22:14,289 --> 00:22:21,190
it's really cool it just uses an st and

00:22:17,710 --> 00:22:23,349
if we run that we're going to get FC

00:22:21,190 --> 00:22:25,059
zero 45 consider setting name attribute

00:22:23,349 --> 00:22:28,210
and metadata whatever blah blah blah

00:22:25,059 --> 00:22:30,159
blah you can look this up online on the

00:22:28,210 --> 00:22:32,409
food critic docks and it gives like a

00:22:30,159 --> 00:22:36,129
huge explanation awesome documentation

00:22:32,409 --> 00:22:37,509
about what FC zero 45 actually means in

00:22:36,129 --> 00:22:40,269
this case it actually means we haven't

00:22:37,509 --> 00:22:41,019
set the name attribute nor metadata one

00:22:40,269 --> 00:22:42,460
of the things that's really confusing

00:22:41,019 --> 00:22:44,859
about food critic is that it always

00:22:42,460 --> 00:22:46,179
exits with status 0 this really sucks if

00:22:44,859 --> 00:22:47,589
you're doing something like on Travis or

00:22:46,179 --> 00:22:50,950
Jenkins we're like you're checking the

00:22:47,589 --> 00:22:52,899
exit status of a process to see if it

00:22:50,950 --> 00:22:56,259
succeeded or not well you have to pass

00:22:52,899 --> 00:22:59,619
an additional flag to chef spec the dash

00:22:56,259 --> 00:23:02,589
f any or like dash dash fail fast fail

00:22:59,619 --> 00:23:04,570
any so that Shep so the food critic will

00:23:02,589 --> 00:23:06,609
exit with a non zero status if it fails

00:23:04,570 --> 00:23:07,989
it'll exit with zero if it succeeds it's

00:23:06,609 --> 00:23:10,210
a little weird you have to pass an extra

00:23:07,989 --> 00:23:13,330
flag but keep that in mind if you're

00:23:10,210 --> 00:23:14,619
using food critic especially on CI so

00:23:13,330 --> 00:23:16,029
let's go ahead and fix that will add

00:23:14,619 --> 00:23:18,639
that name attribute right there it's

00:23:16,029 --> 00:23:20,589
just tea mux it's super simple and those

00:23:18,639 --> 00:23:22,179
food critic tests will pass the next

00:23:20,589 --> 00:23:23,589
thing we want to do is knife cookbook

00:23:22,179 --> 00:23:25,629
test this is part of knife which is

00:23:23,589 --> 00:23:27,639
again the CLI for chef this will test

00:23:25,629 --> 00:23:29,289
not only our Ruby syntax which chef spec

00:23:27,639 --> 00:23:30,789
would have cotton but it'll also check

00:23:29,289 --> 00:23:32,469
like those missing templates and like

00:23:30,789 --> 00:23:34,059
things that were referencing that chefs

00:23:32,469 --> 00:23:35,589
book may not have caught so it's always

00:23:34,059 --> 00:23:36,879
important to run knife cookbook test

00:23:35,589 --> 00:23:39,399
kind of sucks because it can be the

00:23:36,879 --> 00:23:41,200
slowest of all your tests but definitely

00:23:39,399 --> 00:23:42,609
run it it's going to check the cookbook

00:23:41,200 --> 00:23:43,809
make sure you have valid syntax make

00:23:42,609 --> 00:23:45,249
sure you the Falla the files you're

00:23:43,809 --> 00:23:47,769
referencing and the templates you're

00:23:45,249 --> 00:23:49,869
referencing super straightforward but

00:23:47,769 --> 00:23:51,879
now it kind of sucks like we have to run

00:23:49,869 --> 00:23:52,740
chef's back we have to run which we're

00:23:51,879 --> 00:23:53,850
doing with guard

00:23:52,740 --> 00:23:55,380
have to run a food critic which are

00:23:53,850 --> 00:23:57,750
doing with guard we have threw a knife

00:23:55,380 --> 00:23:59,370
which are doing with guard but like

00:23:57,750 --> 00:24:00,630
that's a lot of stuff to remember that's

00:23:59,370 --> 00:24:03,450
a lot of commands to tie a pin your

00:24:00,630 --> 00:24:05,190
guard file it's kind of annoying so we

00:24:03,450 --> 00:24:06,360
should probably simplify this process it

00:24:05,190 --> 00:24:08,309
would be great if I could like run a

00:24:06,360 --> 00:24:11,040
single command which would spin out my

00:24:08,309 --> 00:24:14,100
guard with all of my tests and I could

00:24:11,040 --> 00:24:15,480
just work so like I said we have these

00:24:14,100 --> 00:24:16,920
three tools there's a lot of other tools

00:24:15,480 --> 00:24:18,000
out there like chef mini test handler

00:24:16,920 --> 00:24:20,580
and a bunch of other stuff that you

00:24:18,000 --> 00:24:22,950
might want to use for testing and how do

00:24:20,580 --> 00:24:24,660
you use them together and how do you

00:24:22,950 --> 00:24:27,150
share that code with other people on

00:24:24,660 --> 00:24:29,580
your team so while it was a custom ink I

00:24:27,150 --> 00:24:31,950
came up with this idea of strainer which

00:24:29,580 --> 00:24:34,590
is a ruby gem that handles this problem

00:24:31,950 --> 00:24:36,540
it uses a foreman like syntax for a

00:24:34,590 --> 00:24:38,850
strainer file that allows you to define

00:24:36,540 --> 00:24:41,429
arbitrary tests with two environment

00:24:38,850 --> 00:24:43,950
variables that you can pass in and then

00:24:41,429 --> 00:24:46,380
you can execute them by running strainer

00:24:43,950 --> 00:24:48,480
tests and give it the name of a cookbook

00:24:46,380 --> 00:24:50,130
and it will sit here and hang and when

00:24:48,480 --> 00:24:53,550
you save a file it will run all of those

00:24:50,130 --> 00:24:55,140
tests again that's really cool if you

00:24:53,550 --> 00:24:57,660
don't think so I think it's cool that's

00:24:55,140 --> 00:24:59,880
really cool because it gives you this

00:24:57,660 --> 00:25:02,130
added bonus not only can you like work

00:24:59,880 --> 00:25:04,110
in a team and share this and like easily

00:25:02,130 --> 00:25:06,360
like decide which cookbooks are getting

00:25:04,110 --> 00:25:08,820
tested with which testing frameworks but

00:25:06,360 --> 00:25:10,020
you can put it on CI so this is specific

00:25:08,820 --> 00:25:13,170
for Jenkins but you can do something

00:25:10,020 --> 00:25:15,270
similar with Travis or circle if you

00:25:13,170 --> 00:25:18,540
create like a script /ci at the root of

00:25:15,270 --> 00:25:20,429
your chef repo and you add this which is

00:25:18,540 --> 00:25:22,950
basically like clone my chef repo and

00:25:20,429 --> 00:25:24,870
then run strainer test and like set out

00:25:22,950 --> 00:25:26,820
underscore cookbook what you can do is

00:25:24,870 --> 00:25:28,650
copy this job a bunch of times all you

00:25:26,820 --> 00:25:30,809
have to do is name it like team ox

00:25:28,650 --> 00:25:32,910
underscore cookbook and like foo

00:25:30,809 --> 00:25:34,740
underscore cookbook and it will run the

00:25:32,910 --> 00:25:35,850
appropriate test for that cookbook so

00:25:34,740 --> 00:25:37,410
you don't have to pay for like 500

00:25:35,850 --> 00:25:39,990
private repositories for each of your

00:25:37,410 --> 00:25:42,360
cookbooks or public repositories if you

00:25:39,990 --> 00:25:44,550
that's how you roll you don't have to

00:25:42,360 --> 00:25:45,630
like try to manage all of these things

00:25:44,550 --> 00:25:46,860
with get and have like a bunch of

00:25:45,630 --> 00:25:49,380
different get remotes in your Jenkins

00:25:46,860 --> 00:25:51,030
configuration it's one script CI that's

00:25:49,380 --> 00:25:53,220
checked under version control in one

00:25:51,030 --> 00:25:55,290
repo that's managed by Jenkins and you

00:25:53,220 --> 00:25:56,850
can do quirky things like point it at

00:25:55,290 --> 00:25:58,470
the same codebase you're not always

00:25:56,850 --> 00:26:00,270
downloading the same workspace you're

00:25:58,470 --> 00:26:02,100
not always downloading the same chef

00:26:00,270 --> 00:26:05,850
repo like a million times and taking up

00:26:02,100 --> 00:26:07,950
disk space but like this base is cheap

00:26:05,850 --> 00:26:09,870
cool so that's like pretty much all I

00:26:07,950 --> 00:26:12,150
have to talk about about t dding and

00:26:09,870 --> 00:26:14,070
testing I do want to show you guys this

00:26:12,150 --> 00:26:17,250
because this is my new like introductory

00:26:14,070 --> 00:26:20,280
slide I decided to go all designing on

00:26:17,250 --> 00:26:21,390
this one but cool like you can find me

00:26:20,280 --> 00:26:23,190
on Twitter you should follow me on

00:26:21,390 --> 00:26:24,660
Twitter that's also my github handle but

00:26:23,190 --> 00:26:27,059
I couldn't find a good github icon that

00:26:24,660 --> 00:26:29,100
was free I work at opscode that's my

00:26:27,059 --> 00:26:33,559
email if you have any questions you can

00:26:29,100 --> 00:26:33,559

YouTube URL: https://www.youtube.com/watch?v=ZC91gZv-Uao


