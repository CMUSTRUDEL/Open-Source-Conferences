Title: MountainWest RubyConf 2013 Going on a Testing Anti-Pattern Safari by Aja Hammerly
Publication date: 2020-01-28
Playlist: MWRC 2013
Description: 
	Wild test suites often contain inefficient or ineffective tests. Working with a code base full of these beasts is frustrating and time consuming. This safari will help you identify and hunt down common testing anti-patterns. Afterwards you'll know how to approach a test suite full of beasts without losing your mind or your life.

Help us caption & translate this video!

http://amara.org/v/FGbq/
Captions: 
	00:00:19,669 --> 00:00:23,970
so I'm really nervous about this talk

00:00:22,050 --> 00:00:25,560
and when I'm nervous I like to think

00:00:23,970 --> 00:00:34,050
about the people i know who give really

00:00:25,560 --> 00:00:36,360
awesome presentations and so today I'm

00:00:34,050 --> 00:00:46,920
gonna ask myself what would tender love

00:00:36,360 --> 00:00:53,580
do and tender love would wear silly

00:00:46,920 --> 00:00:56,250
costume check and ten delivered show you

00:00:53,580 --> 00:00:59,519
pictures of his cat that's my cat that's

00:00:56,250 --> 00:01:01,559
Nick check so a little bit about me my

00:00:59,519 --> 00:01:04,589
name is Asha hammerly I tweet very

00:01:01,559 --> 00:01:07,799
seldom at thako miser RB I'm on github

00:01:04,589 --> 00:01:10,229
as thako miser I blog even less often at

00:01:07,799 --> 00:01:12,210
Fagin miser calm and I work at an

00:01:10,229 --> 00:01:16,350
awesome consultancy in Seattle called

00:01:12,210 --> 00:01:17,790
substantial and I heard they're tuning

00:01:16,350 --> 00:01:20,939
in right now to the live feed so hi guys

00:01:17,790 --> 00:01:22,620
thanks for supporting me so during the

00:01:20,939 --> 00:01:24,479
last eight years or so I've helped to

00:01:22,620 --> 00:01:26,400
companies increased their use of

00:01:24,479 --> 00:01:28,409
automated tests and specifically unit

00:01:26,400 --> 00:01:30,780
testing and during that time I've had

00:01:28,409 --> 00:01:33,180
some truly fantastic mentors from the

00:01:30,780 --> 00:01:35,130
Seattle Ruby community and I've also had

00:01:33,180 --> 00:01:36,690
a chance to mentor several people who

00:01:35,130 --> 00:01:39,870
had never really done unit testing or

00:01:36,690 --> 00:01:41,250
automated testing before and I noticed a

00:01:39,870 --> 00:01:42,659
lot of patterns a lot of things that

00:01:41,250 --> 00:01:44,159
people did that we're good and a lot of

00:01:42,659 --> 00:01:46,380
things that people did that came back to

00:01:44,159 --> 00:01:47,940
bite us and so during this talk I'm

00:01:46,380 --> 00:01:50,760
going to pass on some of that knowledge

00:01:47,940 --> 00:01:52,380
and the first thing we really need to

00:01:50,760 --> 00:01:56,970
talk about is what makes an effective

00:01:52,380 --> 00:01:58,290
test and I have to really simple metrics

00:01:56,970 --> 00:02:00,960
for whether or not a test or a test

00:01:58,290 --> 00:02:03,450
suite as effective the first one is that

00:02:00,960 --> 00:02:05,760
a test should be trustworthy and by

00:02:03,450 --> 00:02:08,129
trustworthy I mean that if it's passing

00:02:05,760 --> 00:02:10,229
the codes great everything's working you

00:02:08,129 --> 00:02:12,420
can trust that things are okay and if

00:02:10,229 --> 00:02:14,489
the test is failing something better be

00:02:12,420 --> 00:02:16,080
wrong you need to be able to trust your

00:02:14,489 --> 00:02:20,099
test to act to tell you the state of

00:02:16,080 --> 00:02:22,370
your code accurately but it's not just

00:02:20,099 --> 00:02:25,430
that a good test suite is also simple

00:02:22,370 --> 00:02:28,439
simple test suites are easy to use

00:02:25,430 --> 00:02:30,329
simple to write simple to extend and

00:02:28,439 --> 00:02:32,010
simple to debug when something's going

00:02:30,329 --> 00:02:35,040
wrong

00:02:32,010 --> 00:02:36,810
so a brief overview of my talk I've

00:02:35,040 --> 00:02:41,250
organized the anti-patterns into four

00:02:36,810 --> 00:02:43,409
broad categories pointless tests tests

00:02:41,250 --> 00:02:45,870
that are waste of time and effort false

00:02:43,409 --> 00:02:48,870
positives and negatives and inefficient

00:02:45,870 --> 00:02:50,190
tests and this talk has got a lot of

00:02:48,870 --> 00:02:52,379
code examples and I'm going to go

00:02:50,190 --> 00:02:53,459
through them pretty quickly but before I

00:02:52,379 --> 00:02:55,560
hit them i want to point out that

00:02:53,459 --> 00:02:59,129
there's a mix of pure Ruby and rails

00:02:55,560 --> 00:03:01,409
code I use test unit r spec and Vinny

00:02:59,129 --> 00:03:04,530
test in different examples and I'm doing

00:03:01,409 --> 00:03:06,269
this very very purposefully the panty

00:03:04,530 --> 00:03:09,420
patterns I'm coming I'm covering our

00:03:06,269 --> 00:03:11,069
framework agnostic in fact their

00:03:09,420 --> 00:03:13,170
language agnostic none of these are

00:03:11,069 --> 00:03:15,389
specific to Ruby's so you can't just say

00:03:13,170 --> 00:03:17,609
oh I use our spec I'm immune or I use

00:03:15,389 --> 00:03:19,500
mini test these don't apply to me these

00:03:17,609 --> 00:03:21,540
apply to everybody these apply to every

00:03:19,500 --> 00:03:23,069
language you may you may be lucky and

00:03:21,540 --> 00:03:25,620
not have any in your code base but you

00:03:23,069 --> 00:03:29,849
probably have a few let's dive straight

00:03:25,620 --> 00:03:31,440
in to pointless tests and the first

00:03:29,849 --> 00:03:34,980
example of that is not having tests at

00:03:31,440 --> 00:03:36,239
all found this great quote on Twitter on

00:03:34,980 --> 00:03:38,579
Tuesday as I was coming to the

00:03:36,239 --> 00:03:40,260
conference we're coding to faster write

00:03:38,579 --> 00:03:42,500
tests is the same as we're driving too

00:03:40,260 --> 00:03:45,840
fast to confirm we're on the right road

00:03:42,500 --> 00:03:48,599
tests are your safety net there what let

00:03:45,840 --> 00:03:50,660
you take take risks try things out see

00:03:48,599 --> 00:03:53,430
if you can make your code better

00:03:50,660 --> 00:03:55,199
solution to that anti powder is to write

00:03:53,430 --> 00:03:56,970
tests if you don't believe you need to

00:03:55,199 --> 00:03:58,560
write tests turn to the person next to

00:03:56,970 --> 00:04:01,280
you and ask them to tell you why because

00:03:58,560 --> 00:04:03,569
I have more interesting things to cover

00:04:01,280 --> 00:04:05,220
so the second in the pointless test

00:04:03,569 --> 00:04:07,290
category is not running the tests you

00:04:05,220 --> 00:04:09,000
have see that very very lazy cheetah

00:04:07,290 --> 00:04:11,040
right there yeah that's not running and

00:04:09,000 --> 00:04:13,680
if you're not running your tests you're

00:04:11,040 --> 00:04:15,510
like that cheetah and the worst part

00:04:13,680 --> 00:04:17,639
about not running the test you have is

00:04:15,510 --> 00:04:19,409
that they're worse than not having them

00:04:17,639 --> 00:04:21,919
you spent time writing them and you're

00:04:19,409 --> 00:04:27,389
getting no benefit whatsoever from them

00:04:21,919 --> 00:04:29,039
so use continuous integration having

00:04:27,389 --> 00:04:32,400
continuous integration means you can't

00:04:29,039 --> 00:04:33,630
forget to run your tests and my

00:04:32,400 --> 00:04:35,159
experiences there are a ton of

00:04:33,630 --> 00:04:37,260
continuous integration systems out there

00:04:35,159 --> 00:04:39,030
and none of them are perfect so pick one

00:04:37,260 --> 00:04:40,680
that's good enough hook it up and make

00:04:39,030 --> 00:04:45,090
sure that your tests run on every check

00:04:40,680 --> 00:04:46,620
in that will solve that problem but have

00:04:45,090 --> 00:04:47,699
continuous integration isn't sufficient

00:04:46,620 --> 00:04:50,070
you also need to listen to your

00:04:47,699 --> 00:04:51,840
continuous integration build failing

00:04:50,070 --> 00:04:54,120
tests are telling you something is wrong

00:04:51,840 --> 00:04:56,010
if your team culture is to ignore a Red

00:04:54,120 --> 00:04:58,139
Sea I you need to fix your team culture

00:04:56,010 --> 00:05:01,410
I've been there I know it's tough but it

00:04:58,139 --> 00:05:03,330
is totally doable if your team culture

00:05:01,410 --> 00:05:04,919
is well we don't worry about when that

00:05:03,330 --> 00:05:06,690
test fails because that test just

00:05:04,919 --> 00:05:11,160
randomly fails sometimes that's an

00:05:06,690 --> 00:05:12,840
untrustworthy test fix it if your cookie

00:05:11,160 --> 00:05:16,949
teen culture is well that test isn't

00:05:12,840 --> 00:05:18,990
really useful deleting failing tests are

00:05:16,949 --> 00:05:20,280
broken windows in your code you need to

00:05:18,990 --> 00:05:23,490
fix them so the whole neighborhood

00:05:20,280 --> 00:05:27,180
doesn't suffer on to more interesting

00:05:23,490 --> 00:05:30,180
things wasting your time and effort so

00:05:27,180 --> 00:05:32,639
the first example this is testing other

00:05:30,180 --> 00:05:34,650
people's code and I see a lot of people

00:05:32,639 --> 00:05:36,419
who are new to unit testing and new to

00:05:34,650 --> 00:05:38,070
Ruby and rails do this I did this a lot

00:05:36,419 --> 00:05:39,389
of beginning and I had people say what

00:05:38,070 --> 00:05:41,669
are you doing you're wasting your time

00:05:39,389 --> 00:05:45,930
writing that test so here's a great

00:05:41,669 --> 00:05:49,020
example this is testing a find order by

00:05:45,930 --> 00:05:52,080
ID in rails so creating create an order

00:05:49,020 --> 00:05:53,310
object use active record find to find it

00:05:52,080 --> 00:05:56,310
and then verify I got the one I just

00:05:53,310 --> 00:05:59,220
created back newsflash active records

00:05:56,310 --> 00:06:01,020
been testing this is testing active

00:05:59,220 --> 00:06:02,460
record you don't need to waste your time

00:06:01,020 --> 00:06:04,490
testing it someone's already got that

00:06:02,460 --> 00:06:08,130
for you so what should you do instead

00:06:04,490 --> 00:06:10,229
you should test what you provide so if

00:06:08,130 --> 00:06:12,389
in your documentation if there's

00:06:10,229 --> 00:06:13,830
examples of code that you provide or you

00:06:12,389 --> 00:06:16,260
have specific methods in your library

00:06:13,830 --> 00:06:18,240
make sure those are tested if you're

00:06:16,260 --> 00:06:20,910
calling into a library test that you're

00:06:18,240 --> 00:06:23,789
using it correctly and also test that

00:06:20,910 --> 00:06:25,410
your code responds to output from that

00:06:23,789 --> 00:06:28,370
library correctly there's two sides to

00:06:25,410 --> 00:06:30,300
that calling it and handling output and

00:06:28,370 --> 00:06:31,860
for the people in the audience who are

00:06:30,300 --> 00:06:34,650
thinking well I can't I have to test the

00:06:31,860 --> 00:06:36,990
library because I don't trust it uh no

00:06:34,650 --> 00:06:38,729
if you don't trust the library try not

00:06:36,990 --> 00:06:41,010
using it there's probably an alternative

00:06:38,729 --> 00:06:42,720
on github you can do some googling and

00:06:41,010 --> 00:06:44,760
find it and if you really have to use a

00:06:42,720 --> 00:06:46,020
library that you don't trust go ahead

00:06:44,760 --> 00:06:47,460
and write the tests against it but

00:06:46,020 --> 00:06:49,020
submit a pull request to the library

00:06:47,460 --> 00:06:50,729
authors so that other people can benefit

00:06:49,020 --> 00:06:51,960
from the work you just did don't make

00:06:50,729 --> 00:06:55,830
someone else do the same work you just

00:06:51,960 --> 00:06:59,080
did be polite share so don't write that

00:06:55,830 --> 00:07:01,100
test of active record find

00:06:59,080 --> 00:07:03,560
another example of wasted time and

00:07:01,100 --> 00:07:05,330
effort is a certain nothing raised and i

00:07:03,560 --> 00:07:06,710
read a blog post on monday that said

00:07:05,330 --> 00:07:09,470
this is the ninth most commonly used

00:07:06,710 --> 00:07:12,560
assertion from test unit that's kind of

00:07:09,470 --> 00:07:13,760
scary because you don't need it for

00:07:12,560 --> 00:07:15,410
those who aren't familiar with it a

00:07:13,760 --> 00:07:18,590
certain nothing rays takes a block and

00:07:15,410 --> 00:07:20,390
if any of the code in that block raises

00:07:18,590 --> 00:07:22,700
an error and exception the assertion

00:07:20,390 --> 00:07:25,520
fails so here's some code that uses her

00:07:22,700 --> 00:07:28,370
nothing raised and here's what happens

00:07:25,520 --> 00:07:31,070
when it runs we have a failure and we

00:07:28,370 --> 00:07:33,200
get a line 9 error and that's the line

00:07:31,070 --> 00:07:35,330
that the assert nothing raised was on so

00:07:33,200 --> 00:07:36,590
there's a couple problems with this the

00:07:35,330 --> 00:07:37,820
failure is reported on the line that

00:07:36,590 --> 00:07:39,560
contains the words a certain nothing

00:07:37,820 --> 00:07:41,420
raised its not reported on the line

00:07:39,560 --> 00:07:44,450
inside that block that actually had the

00:07:41,420 --> 00:07:46,070
air the failure also doesn't tell you

00:07:44,450 --> 00:07:47,690
what line in your implementation caused

00:07:46,070 --> 00:07:49,310
the air so you have exactly no

00:07:47,690 --> 00:07:51,260
information for debugging other than

00:07:49,310 --> 00:07:53,330
somewhere in this block something that

00:07:51,260 --> 00:07:54,800
it called failed somewhere however many

00:07:53,330 --> 00:07:57,440
layers down it's really hard to figure

00:07:54,800 --> 00:07:59,810
out what's going on also you don't need

00:07:57,440 --> 00:08:01,790
it so you have unnecessary code and I

00:07:59,810 --> 00:08:04,790
like deleting unnecessary code it makes

00:08:01,790 --> 00:08:07,790
me very very happy so here's how you can

00:08:04,790 --> 00:08:12,800
leave it out I've just deleted it all

00:08:07,790 --> 00:08:16,700
you have to do and here's what happens

00:08:12,800 --> 00:08:19,700
when I run the test now the code still

00:08:16,700 --> 00:08:21,380
raises and arrays is an error not a

00:08:19,700 --> 00:08:23,870
failure but your test still doesn't pass

00:08:21,380 --> 00:08:25,070
and now I get to pieces of useful

00:08:23,870 --> 00:08:27,680
information on the top of that stack

00:08:25,070 --> 00:08:29,750
trace one is the line in my test that

00:08:27,680 --> 00:08:30,890
raised the exception and the second is

00:08:29,750 --> 00:08:33,170
the line in my implementation that

00:08:30,890 --> 00:08:34,430
raised the exception so and if there was

00:08:33,170 --> 00:08:36,080
more stack trace did you get even more

00:08:34,430 --> 00:08:37,760
of that you'd know exactly the path the

00:08:36,080 --> 00:08:39,710
code just went through to cause that

00:08:37,760 --> 00:08:41,270
error and so you could debug it and

00:08:39,710 --> 00:08:43,880
figure out why there was an error and

00:08:41,270 --> 00:08:45,590
how to deal with it also less code less

00:08:43,880 --> 00:08:49,670
code better as long as the code still

00:08:45,590 --> 00:08:53,960
clear on to false positives and

00:08:49,670 --> 00:08:56,030
negatives these are the worst every time

00:08:53,960 --> 00:08:57,560
I've had a company that's been resistant

00:08:56,030 --> 00:08:59,120
adding unit tests are resistant to

00:08:57,560 --> 00:09:00,440
trusting their unit test framework it's

00:08:59,120 --> 00:09:02,450
because someone somewhere in the

00:09:00,440 --> 00:09:03,860
management chain has been burned by a

00:09:02,450 --> 00:09:05,210
test suite that gives lots of false

00:09:03,860 --> 00:09:07,520
positives or false innate false

00:09:05,210 --> 00:09:09,860
negatives this is all about having that

00:09:07,520 --> 00:09:11,600
trustworthy test suite and so I'm going

00:09:09,860 --> 00:09:12,709
to cover a couple examples but there are

00:09:11,600 --> 00:09:14,000
or and if you find me at the hackfest

00:09:12,709 --> 00:09:17,060
tonight I can show you some of the ones

00:09:14,000 --> 00:09:19,160
that had to get cut for time so the

00:09:17,060 --> 00:09:21,709
first example or time-sensitive tests

00:09:19,160 --> 00:09:24,139
and all of the code i'm going to show

00:09:21,709 --> 00:09:26,240
you i have seen at a previous job of

00:09:24,139 --> 00:09:28,220
mine not substantial substantial awesome

00:09:26,240 --> 00:09:32,060
and I've distilled it down to something

00:09:28,220 --> 00:09:34,190
that will fit on a single slide but this

00:09:32,060 --> 00:09:38,870
is mostly real code give you guys a

00:09:34,190 --> 00:09:41,180
second to look at this one the output of

00:09:38,870 --> 00:09:42,889
this was that this test mostly failed

00:09:41,180 --> 00:09:44,600
during our business day or mostly passed

00:09:42,889 --> 00:09:46,339
during our business day but if I was

00:09:44,600 --> 00:09:49,819
working late at night or I'd hackfest or

00:09:46,339 --> 00:09:52,279
something and checked in after 8pm this

00:09:49,819 --> 00:09:53,630
test would fail and usually if I was

00:09:52,279 --> 00:09:55,670
checking in that late at night I

00:09:53,630 --> 00:09:57,410
wouldn't have my full brain available to

00:09:55,670 --> 00:09:59,660
me because I am NOT a nighttime person

00:09:57,410 --> 00:10:01,040
and I'd say okay i'd spend like 10

00:09:59,660 --> 00:10:02,750
minutes debugging it and then like i'll

00:10:01,040 --> 00:10:04,759
deal with it in the morning or I'd email

00:10:02,750 --> 00:10:06,019
our team in Bulgaria who would come in

00:10:04,759 --> 00:10:08,029
earlier than me and they could deal with

00:10:06,019 --> 00:10:10,130
it and no matter who picked it up the

00:10:08,029 --> 00:10:12,860
next morning it would be passing again

00:10:10,130 --> 00:10:16,009
magically because it was time sensitive

00:10:12,860 --> 00:10:17,689
and this is only a three line test the

00:10:16,009 --> 00:10:19,370
actual test that was failing was about

00:10:17,689 --> 00:10:21,380
15 lines about 50 lines of

00:10:19,370 --> 00:10:23,089
implementation behind it so it took us

00:10:21,380 --> 00:10:25,550
almost a year to figure out what was up

00:10:23,089 --> 00:10:27,829
with this that test and during that time

00:10:25,550 --> 00:10:31,220
this test got branded has that test that

00:10:27,829 --> 00:10:32,959
fails sometimes and so you know you

00:10:31,220 --> 00:10:34,519
check in and that test that fails

00:10:32,959 --> 00:10:36,620
sometimes would fail and you wouldn't

00:10:34,519 --> 00:10:37,880
think about it and the sea I would be

00:10:36,620 --> 00:10:38,959
red and you check in something else and

00:10:37,880 --> 00:10:40,160
that would fail a different test for you

00:10:38,959 --> 00:10:41,720
like you know that test that fails

00:10:40,160 --> 00:10:44,360
sometime is failing so I don't have to

00:10:41,720 --> 00:10:46,120
worry about the Red Sea I right now so

00:10:44,360 --> 00:10:48,380
how do you get around cases like this

00:10:46,120 --> 00:10:50,750
well the simplest solution is to stub

00:10:48,380 --> 00:10:52,370
time now so they had a single line

00:10:50,750 --> 00:10:54,380
stubbing time now and setting it equal

00:10:52,370 --> 00:10:57,199
to a date in this case that we get

00:10:54,380 --> 00:10:58,699
midnight as the timestamp now this test

00:10:57,199 --> 00:11:01,069
is no longer that test that fails

00:10:58,699 --> 00:11:03,529
sometimes this test will always pass no

00:11:01,069 --> 00:11:06,050
matter what the local time is to make

00:11:03,529 --> 00:11:08,870
this even more fun mixed in a CI server

00:11:06,050 --> 00:11:10,130
that runs in UTC and all sorts of joy

00:11:08,870 --> 00:11:12,589
breaks down breaks loose with

00:11:10,130 --> 00:11:15,410
time-sensitive tests so this is another

00:11:12,589 --> 00:11:16,850
example same job we had a marketing team

00:11:15,410 --> 00:11:19,550
that very much wanted a promotion that

00:11:16,850 --> 00:11:22,610
ended on a specific day so hard code

00:11:19,550 --> 00:11:24,740
that date in and when I when I wrote

00:11:22,610 --> 00:11:27,740
this code it was probably 2010

00:11:24,740 --> 00:11:29,690
2011 and so we had like a year year and

00:11:27,740 --> 00:11:33,470
a half almost two years where this code

00:11:29,690 --> 00:11:36,290
past regularly and then the 13th of

00:11:33,470 --> 00:11:40,100
December 2012 rolls around and magically

00:11:36,290 --> 00:11:41,390
it starts failing again or and you're

00:11:40,100 --> 00:11:43,100
like we haven't touched that code in

00:11:41,390 --> 00:11:44,570
months what could be going on well

00:11:43,100 --> 00:11:46,940
that's that hard coded date right there

00:11:44,570 --> 00:11:49,520
so how do you get around this you use

00:11:46,940 --> 00:11:51,770
relative dates activesupport has the

00:11:49,520 --> 00:11:54,470
from now and dot ago methods and they're

00:11:51,770 --> 00:11:56,270
fantastic for this and I've argued with

00:11:54,470 --> 00:11:57,860
people before about why they can't use

00:11:56,270 --> 00:11:59,420
relative dates the lake la respect says

00:11:57,860 --> 00:12:01,880
we have to have this hard coded date in

00:11:59,420 --> 00:12:03,740
the code well make that the default but

00:12:01,880 --> 00:12:05,000
give yourself the ability to pass in a

00:12:03,740 --> 00:12:07,040
different date from your test which is

00:12:05,000 --> 00:12:09,020
exactly what I've done here so now our

00:12:07,040 --> 00:12:11,180
test says that the expiration is three

00:12:09,020 --> 00:12:14,120
months from now so we won't have that

00:12:11,180 --> 00:12:16,220
joyous December 13th problem it'll

00:12:14,120 --> 00:12:21,860
always pass no matter when the test is

00:12:16,220 --> 00:12:24,830
running order dependent tests these are

00:12:21,860 --> 00:12:28,339
one of my favorite anti-patterns no

00:12:24,830 --> 00:12:29,959
sarcasm there order dependency happens

00:12:28,339 --> 00:12:32,690
when your test leaves stayed around and

00:12:29,959 --> 00:12:35,890
by state I mean things like variables

00:12:32,690 --> 00:12:39,829
with values in them database records

00:12:35,890 --> 00:12:41,360
files basically anything anytime your

00:12:39,829 --> 00:12:42,950
tests don't clean up after themselves

00:12:41,360 --> 00:12:44,870
and put the system back where it was

00:12:42,950 --> 00:12:47,510
when they started you run the risk of

00:12:44,870 --> 00:12:50,360
order dependency so this is a very

00:12:47,510 --> 00:12:52,490
loosely rails based example we're going

00:12:50,360 --> 00:12:54,800
to test create record and create a lion

00:12:52,490 --> 00:12:56,120
because of our animal class and we're

00:12:54,800 --> 00:12:58,120
going to start that it's not know and

00:12:56,120 --> 00:13:00,020
then we're going to test find record and

00:12:58,120 --> 00:13:01,370
we're going to create we're going to

00:13:00,020 --> 00:13:02,750
find that lie and we created in the

00:13:01,370 --> 00:13:04,790
first test and a cert that we can find

00:13:02,750 --> 00:13:06,290
it and yes this is testing other

00:13:04,790 --> 00:13:09,350
people's code I'm doing this for

00:13:06,290 --> 00:13:10,910
illustrative purposes right here so if

00:13:09,350 --> 00:13:12,140
we run the tests and I'm running them in

00:13:10,910 --> 00:13:15,050
foremost mode here so you can see what

00:13:12,140 --> 00:13:18,470
order they run it and first to create

00:13:15,050 --> 00:13:19,810
test runs and fine test runs and I

00:13:18,470 --> 00:13:21,560
should point out that this is test unit

00:13:19,810 --> 00:13:23,360
test and that's actually really

00:13:21,560 --> 00:13:25,010
important in this case so now we've got

00:13:23,360 --> 00:13:27,320
creating find working so we're going to

00:13:25,010 --> 00:13:29,060
run we're going to add delete so we add

00:13:27,320 --> 00:13:30,649
a delete test and so we find that lion

00:13:29,060 --> 00:13:32,720
we created in the first test and we

00:13:30,649 --> 00:13:35,440
found in the second test and we delete

00:13:32,720 --> 00:13:37,769
it added a test let's rerun things

00:13:35,440 --> 00:13:40,589
create test passes are

00:13:37,769 --> 00:13:45,420
test passes are find test that was just

00:13:40,589 --> 00:13:47,069
passing now fails so interesting fact

00:13:45,420 --> 00:13:48,989
about test unit that I didn't know for

00:13:47,069 --> 00:13:51,239
the first couple years I wrote Ruby it

00:13:48,989 --> 00:13:53,639
takes all the tests in a file and orders

00:13:51,239 --> 00:13:56,429
them by name and then runs them in that

00:13:53,639 --> 00:13:58,019
order so our delete test will run before

00:13:56,429 --> 00:14:03,749
our find test even though the delete

00:13:58,019 --> 00:14:04,829
test is further down in the file this is

00:14:03,749 --> 00:14:07,079
a really simple example because there

00:14:04,829 --> 00:14:08,970
are only three tests I spent 90 minutes

00:14:07,079 --> 00:14:14,759
once debugging this in a file that had

00:14:08,970 --> 00:14:17,129
75 tests that was fun so this is why

00:14:14,759 --> 00:14:18,839
this is an example of order dependency

00:14:17,129 --> 00:14:21,989
and you can't actually fix order

00:14:18,839 --> 00:14:23,670
dependency very easily if you've got it

00:14:21,989 --> 00:14:26,129
baked into your code but you can find it

00:14:23,670 --> 00:14:27,269
easily by randomizing your tests this

00:14:26,129 --> 00:14:29,939
means that your test will run in a

00:14:27,269 --> 00:14:32,220
different order any time so that if your

00:14:29,939 --> 00:14:33,480
tests start failing it you know that you

00:14:32,220 --> 00:14:36,029
have some order dependency hidden

00:14:33,480 --> 00:14:37,529
somewhere here are the default run

00:14:36,029 --> 00:14:40,559
orders from some for some of the

00:14:37,529 --> 00:14:42,269
standard Ruby test frameworks test soon

00:14:40,559 --> 00:14:44,220
as I just said runs alphabetical our

00:14:42,269 --> 00:14:46,079
spec I believe runs them in the order in

00:14:44,220 --> 00:14:47,670
the file that's what I tested and found

00:14:46,079 --> 00:14:49,740
someone correct me afterwards if I'm

00:14:47,670 --> 00:14:51,420
wrong and many tests by default runs

00:14:49,740 --> 00:14:52,949
your test randomly one of the reasons I

00:14:51,420 --> 00:14:55,079
love mini toasted you can't forget to

00:14:52,949 --> 00:14:56,939
make them random here's how you

00:14:55,079 --> 00:14:58,649
randomize for those same test frameworks

00:14:56,939 --> 00:15:00,660
I'm testing at one point nine and two

00:14:58,649 --> 00:15:02,970
point oh you can add def self-test order

00:15:00,660 --> 00:15:04,649
random and that will randomize your

00:15:02,970 --> 00:15:06,509
tests our spec gives you dash dash order

00:15:04,649 --> 00:15:09,749
Rand and you don't have to do anything

00:15:06,509 --> 00:15:10,949
for mini test pro tip on this based on

00:15:09,749 --> 00:15:12,569
an experience I had a couple months ago

00:15:10,949 --> 00:15:14,699
if you're running your tests in your

00:15:12,569 --> 00:15:16,889
random order and you're new to this if

00:15:14,699 --> 00:15:18,929
your tests randomly fail because of an

00:15:16,889 --> 00:15:21,269
order dependency issue record the seed

00:15:18,929 --> 00:15:23,189
you're using because if you do what

00:15:21,269 --> 00:15:24,749
somebody did that I was working with and

00:15:23,189 --> 00:15:26,999
close your browser window or close your

00:15:24,749 --> 00:15:29,069
console window because my environment

00:15:26,999 --> 00:15:30,869
must be messed up it's going to take you

00:15:29,069 --> 00:15:32,579
a while to come back to an ordering a

00:15:30,869 --> 00:15:35,100
random seed that will give you that same

00:15:32,579 --> 00:15:36,809
order also my experience with guard if

00:15:35,100 --> 00:15:38,999
you're using it is that it uses the same

00:15:36,809 --> 00:15:40,829
random seed for each guard session

00:15:38,999 --> 00:15:43,019
continuously so you're not actually

00:15:40,829 --> 00:15:44,850
getting a ton of randomization there so

00:15:43,019 --> 00:15:46,139
remember your seed all of these

00:15:44,850 --> 00:15:47,850
frameworks will let you rerun in the

00:15:46,139 --> 00:15:49,529
same order they just ran so that you can

00:15:47,850 --> 00:15:51,300
diagnose and fix any order dependency

00:15:49,529 --> 00:15:54,120
issues you run into

00:15:51,300 --> 00:15:55,980
bonus fund for the advanced people in

00:15:54,120 --> 00:15:57,930
the audience mini test hell runs your

00:15:55,980 --> 00:15:59,519
tests in parallel all you have to do is

00:15:57,930 --> 00:16:04,519
require a mini attest hell and then

00:15:59,519 --> 00:16:06,839
watch things explode it's awesome sir

00:16:04,519 --> 00:16:08,610
Tesla can't fail is another really

00:16:06,839 --> 00:16:11,220
common anti-pattern I see in folks that

00:16:08,610 --> 00:16:12,600
are new to unit testing it also happens

00:16:11,220 --> 00:16:15,120
to me when I'm really tired and I forget

00:16:12,600 --> 00:16:18,510
to put my assertions and my tests tests

00:16:15,120 --> 00:16:20,250
generally need assertions so I also run

00:16:18,510 --> 00:16:22,640
into this one I really heavily stub and

00:16:20,250 --> 00:16:24,630
Mark because I'm just basically

00:16:22,640 --> 00:16:25,860
asserting that the code i just wrote or

00:16:24,630 --> 00:16:27,570
the code i'm about to write is the code

00:16:25,860 --> 00:16:29,910
i just wrote I'm not actually asserting

00:16:27,570 --> 00:16:32,420
what happens is what I want we're going

00:16:29,910 --> 00:16:35,190
to look at a really simple example a

00:16:32,420 --> 00:16:38,640
basic user class active record style it

00:16:35,190 --> 00:16:39,690
has a name that's it and I think

00:16:38,640 --> 00:16:41,310
everyone's probably pretty familiar with

00:16:39,690 --> 00:16:43,950
rails but if you're not active record

00:16:41,310 --> 00:16:45,660
provides the dot all method that lets

00:16:43,950 --> 00:16:48,000
you get all the records in the table and

00:16:45,660 --> 00:16:49,620
for this let's say that I'm going to

00:16:48,000 --> 00:16:51,930
implement a feature so that dot all

00:16:49,620 --> 00:16:53,940
returns the records sorted by name as

00:16:51,930 --> 00:16:55,709
opposed to being sorted by primary key

00:16:53,940 --> 00:16:57,480
which is the default so i write this

00:16:55,709 --> 00:16:59,970
test i create a user named ben the

00:16:57,480 --> 00:17:02,640
created user named nick and i assert the

00:16:59,970 --> 00:17:03,899
user doll dot should equal Ben and Nick

00:17:02,640 --> 00:17:05,730
in that order I want them to be an

00:17:03,899 --> 00:17:07,589
alphabetical order and I'm going to be a

00:17:05,730 --> 00:17:11,220
good TDD person right now and I'm going

00:17:07,589 --> 00:17:13,169
to run them and the pass so I've just

00:17:11,220 --> 00:17:15,720
written a test that fails without my

00:17:13,169 --> 00:17:17,160
implementation being written not a good

00:17:15,720 --> 00:17:19,020
thing and something that a lot of people

00:17:17,160 --> 00:17:21,449
stumble into an accident on a fairly

00:17:19,020 --> 00:17:24,000
regular basis so the reason this failed

00:17:21,449 --> 00:17:26,130
or this past was because i created my

00:17:24,000 --> 00:17:28,530
users in the order in alphabetical order

00:17:26,130 --> 00:17:30,450
and then i asserted that they came back

00:17:28,530 --> 00:17:33,030
in alphabetical order so the way to fix

00:17:30,450 --> 00:17:35,790
this first of all make sure you always

00:17:33,030 --> 00:17:38,100
watch your tests go green or go red then

00:17:35,790 --> 00:17:41,340
green then refactor red is important

00:17:38,100 --> 00:17:42,960
read is very very important to fix it

00:17:41,340 --> 00:17:44,490
all I have to do is swap the creation

00:17:42,960 --> 00:17:47,130
order so I'm not creating them in

00:17:44,490 --> 00:17:48,419
alphabetical order now if i run this the

00:17:47,130 --> 00:17:50,309
test will fail then i can go write my

00:17:48,419 --> 00:17:51,690
implementation make it pass and i know

00:17:50,309 --> 00:17:54,350
that that test is no validating

00:17:51,690 --> 00:17:54,350
something useful

00:17:56,370 --> 00:18:00,940
on to my last category this is the code

00:17:59,770 --> 00:18:02,560
heaviest part we're gonna talk about

00:18:00,940 --> 00:18:04,000
inefficient tests I've I heard a bunch

00:18:02,560 --> 00:18:05,680
of hallway conversations and had some

00:18:04,000 --> 00:18:08,230
hallway conversations about slow tests

00:18:05,680 --> 00:18:09,700
but inefficient tests i think is

00:18:08,230 --> 00:18:12,010
actually a more useful category to talk

00:18:09,700 --> 00:18:14,770
about so we're going to start with

00:18:12,010 --> 00:18:17,920
requiring external resources some

00:18:14,770 --> 00:18:19,720
examples of this that i've seen using

00:18:17,920 --> 00:18:21,310
the internet is a huge one maybe you

00:18:19,720 --> 00:18:23,050
want to call out to your authentication

00:18:21,310 --> 00:18:24,520
service to verify your code that uses

00:18:23,050 --> 00:18:25,930
your authentication service so you want

00:18:24,520 --> 00:18:28,720
to call out to a payment service in your

00:18:25,930 --> 00:18:30,130
tests I've seen people use network

00:18:28,720 --> 00:18:31,690
resources that are on their corporate

00:18:30,130 --> 00:18:33,490
network so that they can only run their

00:18:31,690 --> 00:18:34,720
tests when they're on their corporate

00:18:33,490 --> 00:18:36,220
network maybe they want to grab

00:18:34,720 --> 00:18:39,160
something off of a specific file share

00:18:36,220 --> 00:18:41,050
or access a specific database on I've

00:18:39,160 --> 00:18:42,520
also seen people write tests that use

00:18:41,050 --> 00:18:44,710
files that they don't check into source

00:18:42,520 --> 00:18:46,090
control everything you need to run to

00:18:44,710 --> 00:18:49,500
test should be in source control next to

00:18:46,090 --> 00:18:51,970
your tests and finally I think of

00:18:49,500 --> 00:18:54,190
requiring extra set up tests beyond the

00:18:51,970 --> 00:18:56,740
standard rake or rake test or rake spec

00:18:54,190 --> 00:18:58,270
as requiring external resources you're

00:18:56,740 --> 00:19:00,010
requiring someone to read you read me

00:18:58,270 --> 00:19:01,150
and follow your extra steps as opposed

00:19:00,010 --> 00:19:03,420
to just including them in your rake

00:19:01,150 --> 00:19:05,350
files so that it's easy for people to

00:19:03,420 --> 00:19:09,570
demonstrate this I'm going to focus on

00:19:05,350 --> 00:19:11,980
the internet case and so right here is a

00:19:09,570 --> 00:19:13,930
web service called clever I'm accessing

00:19:11,980 --> 00:19:16,660
a web service called clever clever is a

00:19:13,930 --> 00:19:19,270
service for getting roster information

00:19:16,660 --> 00:19:20,980
about school districts and so this test

00:19:19,270 --> 00:19:23,200
all adore this implementation all it

00:19:20,980 --> 00:19:24,610
does is call their districts API with

00:19:23,200 --> 00:19:26,200
their demo key and that returns

00:19:24,610 --> 00:19:28,180
information about their demo district an

00:19:26,200 --> 00:19:29,500
amusing curl because I want something

00:19:28,180 --> 00:19:31,750
simple and I don't need anything more

00:19:29,500 --> 00:19:34,810
complicated so there's the

00:19:31,750 --> 00:19:36,310
implementation here's a basic test new

00:19:34,810 --> 00:19:38,410
up a clever object and then assert that

00:19:36,310 --> 00:19:42,610
when i called the district's method i

00:19:38,410 --> 00:19:45,190
get demo somewhere in the results pretty

00:19:42,610 --> 00:19:48,400
straightforward and run the test their

00:19:45,190 --> 00:19:49,990
passing but this single test took a

00:19:48,400 --> 00:19:51,280
quarter of a second and i don't know

00:19:49,990 --> 00:19:54,430
about you I don't want to wait that much

00:19:51,280 --> 00:19:55,840
time for a single test also if the

00:19:54,430 --> 00:19:57,820
external service goes down for

00:19:55,840 --> 00:20:00,430
maintenance or they change their API my

00:19:57,820 --> 00:20:01,690
tests are going to fail and that means

00:20:00,430 --> 00:20:03,370
that I'm going to be failing because of

00:20:01,690 --> 00:20:05,170
something that someone else did which

00:20:03,370 --> 00:20:07,240
gets me dangerously close to that

00:20:05,170 --> 00:20:09,340
testing other people's code anti-pattern

00:20:07,240 --> 00:20:11,230
we already discussed and

00:20:09,340 --> 00:20:13,990
finally if you're at a conference where

00:20:11,230 --> 00:20:15,790
there's bad Wi-Fi on an airplane or at a

00:20:13,990 --> 00:20:17,650
coffee shop your tests are either going

00:20:15,790 --> 00:20:18,910
to fail or they're going to go really

00:20:17,650 --> 00:20:20,590
really slowly while the network

00:20:18,910 --> 00:20:22,540
connection times out and then they're

00:20:20,590 --> 00:20:23,560
going to fail and neither of those

00:20:22,540 --> 00:20:26,470
things is going to help you get your job

00:20:23,560 --> 00:20:28,270
done so the obvious answer is to mock

00:20:26,470 --> 00:20:29,770
and stub external resources someone

00:20:28,270 --> 00:20:31,420
already mentioned web mock this morning

00:20:29,770 --> 00:20:32,830
I like it I have included it in a

00:20:31,420 --> 00:20:35,050
project where I was working with some

00:20:32,830 --> 00:20:37,510
testing newbies specifically to prevent

00:20:35,050 --> 00:20:39,040
them from accessing the internet but I

00:20:37,510 --> 00:20:40,840
think that if you have a very specific

00:20:39,040 --> 00:20:42,190
use case there are other ways you can do

00:20:40,840 --> 00:20:44,020
that using the power of Ruby and not

00:20:42,190 --> 00:20:46,210
having to pull in and outside gem so

00:20:44,020 --> 00:20:47,290
we're going to go over that right now so

00:20:46,210 --> 00:20:48,640
if we're going to mock or stub our

00:20:47,290 --> 00:20:50,170
access to the internet we need to pull

00:20:48,640 --> 00:20:51,760
the part of your code that accesses the

00:20:50,170 --> 00:20:54,310
internet out so we're going to take this

00:20:51,760 --> 00:20:56,350
curl line and move it into a class

00:20:54,310 --> 00:20:58,540
called requester the cluster has one

00:20:56,350 --> 00:21:00,700
method make requests that takes a URL

00:20:58,540 --> 00:21:03,400
and since I need a authentication key

00:21:00,700 --> 00:21:05,860
for this for this API i'm going to throw

00:21:03,400 --> 00:21:07,920
the key in and then I changed my

00:21:05,860 --> 00:21:11,110
implementation to call make requests

00:21:07,920 --> 00:21:14,140
fairly simple refactoring since we're

00:21:11,110 --> 00:21:15,670
refactoring we rerun the tests tests

00:21:14,140 --> 00:21:18,880
still pass so we know the refactoring

00:21:15,670 --> 00:21:20,380
worked so now is the fun part where we

00:21:18,880 --> 00:21:22,260
get into stubbing and mocking we're

00:21:20,380 --> 00:21:26,110
going to make a stub requester class

00:21:22,260 --> 00:21:27,160
that inherits from requester and our

00:21:26,110 --> 00:21:28,990
stub requester is going to have a

00:21:27,160 --> 00:21:30,490
collection of canned responses you can

00:21:28,990 --> 00:21:31,720
put these in a file you can put these in

00:21:30,490 --> 00:21:33,130
a database I'm going to put them in a

00:21:31,720 --> 00:21:36,940
global variable because i only have

00:21:33,130 --> 00:21:37,900
about 12 lines on these slides so what

00:21:36,940 --> 00:21:39,640
we're going to do is we're going to use

00:21:37,900 --> 00:21:41,860
the URL to look up our canned response

00:21:39,640 --> 00:21:46,090
and we're going to return it so simple

00:21:41,860 --> 00:21:47,470
hash look up that's all we got so we

00:21:46,090 --> 00:21:48,760
have to change our implementation

00:21:47,470 --> 00:21:50,440
slightly so that we can change the

00:21:48,760 --> 00:21:52,720
requester out from underneath it so we

00:21:50,440 --> 00:21:54,190
pass that into the initializer when I've

00:21:52,720 --> 00:21:56,320
done this in the past I had we've

00:21:54,190 --> 00:21:57,880
typically had code already attached to

00:21:56,320 --> 00:22:00,040
this implementation and you don't want

00:21:57,880 --> 00:22:01,540
to have to change that code and you

00:22:00,040 --> 00:22:02,590
don't really want your people consuming

00:22:01,540 --> 00:22:05,110
your code to know about your to

00:22:02,590 --> 00:22:06,280
requesters so make sure the default is

00:22:05,110 --> 00:22:07,750
the one that hits the internet the

00:22:06,280 --> 00:22:11,260
default is the one that people generally

00:22:07,750 --> 00:22:13,570
want so make that change refactoring

00:22:11,260 --> 00:22:18,070
rerun our tests and it pass again

00:22:13,570 --> 00:22:19,990
awesome now we edit our tests to use the

00:22:18,070 --> 00:22:21,730
stub requester all we have to do is pass

00:22:19,990 --> 00:22:22,840
in that argument with the class that we

00:22:21,730 --> 00:22:24,670
just built

00:22:22,840 --> 00:22:26,770
and we run our tests and everything

00:22:24,670 --> 00:22:29,620
blows up because we don't have a canned

00:22:26,770 --> 00:22:30,970
response for this URL yet and thus far

00:22:29,620 --> 00:22:32,530
we haven't done anything that web mock

00:22:30,970 --> 00:22:34,630
doesn't do for you out of the box and

00:22:32,530 --> 00:22:37,690
this error message is a lot uglier than

00:22:34,630 --> 00:22:40,990
what web montr net so this is where it

00:22:37,690 --> 00:22:42,280
gets awesome I when I've used web mark

00:22:40,990 --> 00:22:45,100
in the past one of the challenges I've

00:22:42,280 --> 00:22:46,750
had is that I don't know I need to have

00:22:45,100 --> 00:22:48,070
it returned a specific response and I

00:22:46,750 --> 00:22:50,080
need to know what that response should

00:22:48,070 --> 00:22:51,550
look like so let's see if we can change

00:22:50,080 --> 00:22:54,910
our stub request or class to make that

00:22:51,550 --> 00:22:58,090
easy so let's add a simple if statement

00:22:54,910 --> 00:23:01,090
if we have a canned response we should

00:22:58,090 --> 00:23:02,470
return it otherwise we should access the

00:23:01,090 --> 00:23:03,730
internet well we already have code that

00:23:02,470 --> 00:23:05,020
accesses the internet and we're

00:23:03,730 --> 00:23:07,600
inheriting from the class that has that

00:23:05,020 --> 00:23:09,070
code so let's just call out to super and

00:23:07,600 --> 00:23:10,750
that's all great except for the fact

00:23:09,070 --> 00:23:12,310
that I know based on places that I've

00:23:10,750 --> 00:23:14,070
worked if I just call out to super in

00:23:12,310 --> 00:23:15,970
that case people aren't going to

00:23:14,070 --> 00:23:17,560
actually put the stubs in the way

00:23:15,970 --> 00:23:19,570
they're supposed to so let's make sure

00:23:17,560 --> 00:23:22,060
that raises so that the tests still

00:23:19,570 --> 00:23:23,950
fails but gives you the output that you

00:23:22,060 --> 00:23:25,060
want gives you the result of what you

00:23:23,950 --> 00:23:27,670
would get if you had hit the internet

00:23:25,060 --> 00:23:29,350
and since to make the canned response i

00:23:27,670 --> 00:23:30,580
also need the URL let's throw that in

00:23:29,350 --> 00:23:33,670
the raises let's throw that in the

00:23:30,580 --> 00:23:36,070
exception message as well and let's see

00:23:33,670 --> 00:23:37,720
how this works when we run it so we get

00:23:36,070 --> 00:23:39,390
an error we expected that because we

00:23:37,720 --> 00:23:41,800
didn't actually have a canned response

00:23:39,390 --> 00:23:44,560
but the runtime error we get starts with

00:23:41,800 --> 00:23:46,800
the URL that we tried to hit and then it

00:23:44,560 --> 00:23:49,360
gives you the response and I've cut the

00:23:46,800 --> 00:23:50,890
JSON response for length trust me it

00:23:49,360 --> 00:23:52,750
does come back and it's really long and

00:23:50,890 --> 00:23:54,220
since we're raising we also get a stack

00:23:52,750 --> 00:23:57,010
trace but you can safely ignore that in

00:23:54,220 --> 00:23:58,570
this case so now I have all the

00:23:57,010 --> 00:24:00,610
information I need to set up a canned

00:23:58,570 --> 00:24:03,730
response in my stub requester class so I

00:24:00,610 --> 00:24:05,940
just copy and paste it in put URL and

00:24:03,730 --> 00:24:08,140
then for the key and the associated

00:24:05,940 --> 00:24:09,550
value is the response that we just got

00:24:08,140 --> 00:24:12,940
back that we just showed up in our test

00:24:09,550 --> 00:24:15,040
output on our console we rerun our tests

00:24:12,940 --> 00:24:18,010
and we're down to less than a thousandth

00:24:15,040 --> 00:24:22,540
of a second so for comparison we started

00:24:18,010 --> 00:24:24,730
out a quarter of a second less than a

00:24:22,540 --> 00:24:26,560
thousandth of a second significantly

00:24:24,730 --> 00:24:29,680
faster doesn't hit the internet and

00:24:26,560 --> 00:24:31,210
validates our responses oh yeah and you

00:24:29,680 --> 00:24:33,340
have an example of what you're expecting

00:24:31,210 --> 00:24:36,310
the external web service to return and I

00:24:33,340 --> 00:24:36,650
have used these files in negotiation

00:24:36,310 --> 00:24:38,420
with

00:24:36,650 --> 00:24:39,890
service when they said no no we didn't

00:24:38,420 --> 00:24:41,630
change your API I'm like actually yeah

00:24:39,890 --> 00:24:42,560
you did here's all the information and

00:24:41,630 --> 00:24:46,580
the dates where I got this information

00:24:42,560 --> 00:24:48,260
from you guys so another anti-pattern

00:24:46,580 --> 00:24:50,450
that really bugs me complicated to set

00:24:48,260 --> 00:24:51,710
up um I did a bunch of research for this

00:24:50,450 --> 00:24:54,530
talk and I also heard this called

00:24:51,710 --> 00:24:56,830
requires the world you may have this

00:24:54,530 --> 00:24:59,150
anti-pattern in your code base when

00:24:56,830 --> 00:25:00,800
testing a single model or a single

00:24:59,150 --> 00:25:02,770
controller requires instantiating all

00:25:00,800 --> 00:25:05,420
the other fixtures in your rails app or

00:25:02,770 --> 00:25:07,520
when testing a single class requires

00:25:05,420 --> 00:25:09,170
instantiating six or more other classes

00:25:07,520 --> 00:25:10,580
depending on who you're asking it may be

00:25:09,170 --> 00:25:15,230
two or more four or more and more

00:25:10,580 --> 00:25:17,810
accurate but 66 is a lot and sadly this

00:25:15,230 --> 00:25:20,450
isn't a testing anti-pattern this is an

00:25:17,810 --> 00:25:21,800
implementation anti-pattern so the

00:25:20,450 --> 00:25:24,500
solution is to refactor your

00:25:21,800 --> 00:25:26,300
implementation and sometimes that's

00:25:24,500 --> 00:25:27,700
really really hard hard enough that I'm

00:25:26,300 --> 00:25:29,690
not going to go into it in this talk

00:25:27,700 --> 00:25:32,060
instead I'm going to recommend this book

00:25:29,690 --> 00:25:33,710
working effectively with legacy code by

00:25:32,060 --> 00:25:35,900
Michael feathers the vast majority of

00:25:33,710 --> 00:25:38,420
this book is talking about putting large

00:25:35,900 --> 00:25:41,360
apps apps that are tangled together with

00:25:38,420 --> 00:25:42,920
mixed responsibilities under test so

00:25:41,360 --> 00:25:45,320
that you can refactor them and make them

00:25:42,920 --> 00:25:47,420
more seen highly highly recommend it

00:25:45,320 --> 00:25:50,540
it's one of the best books on software

00:25:47,420 --> 00:25:54,350
that I've ever read onward to messy

00:25:50,540 --> 00:25:58,100
tests I'm not really like that elephant

00:25:54,350 --> 00:26:00,080
um so you may have messy tests if you

00:25:58,100 --> 00:26:02,630
have lots of repeated code in your tests

00:26:00,080 --> 00:26:04,790
you find yourself writing tests via the

00:26:02,630 --> 00:26:08,120
copy paste and then tweaked slightly

00:26:04,790 --> 00:26:09,710
method of test authoring your tests are

00:26:08,120 --> 00:26:11,120
disorganized and a good hint that your

00:26:09,710 --> 00:26:13,100
tests are disorganized is when you find

00:26:11,120 --> 00:26:15,680
the same test in two different files or

00:26:13,100 --> 00:26:17,300
worst case and I've done this you find

00:26:15,680 --> 00:26:20,660
the same test in two different places in

00:26:17,300 --> 00:26:23,600
the same file sometimes even with the

00:26:20,660 --> 00:26:25,220
same name and your tests are also

00:26:23,600 --> 00:26:28,430
disorganized or messy if you have

00:26:25,220 --> 00:26:30,170
literals everywhere and just like messy

00:26:28,430 --> 00:26:32,660
code the solution too messy test is to

00:26:30,170 --> 00:26:35,060
refactor so some tips on test

00:26:32,660 --> 00:26:36,710
refactoring dry isn't just for your

00:26:35,060 --> 00:26:39,140
implementation code drive applies to

00:26:36,710 --> 00:26:40,910
your tests take repeated blocks of code

00:26:39,140 --> 00:26:44,420
make them into methods call the methods

00:26:40,910 --> 00:26:46,430
give the methods good names group your

00:26:44,420 --> 00:26:49,100
tests by method under test our spec

00:26:46,430 --> 00:26:50,269
makes this sort of implicit with the

00:26:49,100 --> 00:26:52,369
describing context

00:26:50,269 --> 00:26:53,989
you can do the same thing in test unit

00:26:52,369 --> 00:26:55,369
I've generally done it by throwing a

00:26:53,989 --> 00:26:57,259
comment in with the name of the method

00:26:55,369 --> 00:27:00,259
under test and then underneath that all

00:26:57,259 --> 00:27:02,359
of the tests for that method go also use

00:27:00,259 --> 00:27:04,339
descriptive names for your tests we are

00:27:02,359 --> 00:27:07,700
no longer in the punch card days we are

00:27:04,339 --> 00:27:10,070
not being charged by the character you

00:27:07,700 --> 00:27:13,009
need to have a 50 lie if 50 character

00:27:10,070 --> 00:27:14,479
test theme go for it make sure that if

00:27:13,009 --> 00:27:16,580
there are special preconditions that

00:27:14,479 --> 00:27:17,929
that's somewhere in the test name make

00:27:16,580 --> 00:27:19,999
sure that you know if it's a test for

00:27:17,929 --> 00:27:21,549
valid or if it's a success case or an

00:27:19,999 --> 00:27:23,329
error case that you're testing and

00:27:21,549 --> 00:27:24,889
finally put your literals in two

00:27:23,329 --> 00:27:25,820
variables I'm really bad about this and

00:27:24,889 --> 00:27:27,259
there's something I've been getting a

00:27:25,820 --> 00:27:28,700
lot of help without my current job is to

00:27:27,259 --> 00:27:30,559
remember to put your literals in two

00:27:28,700 --> 00:27:31,879
variables so that if you have to change

00:27:30,559 --> 00:27:33,019
them you can only change them once you

00:27:31,879 --> 00:27:36,679
don't have to change them 12 times

00:27:33,019 --> 00:27:38,029
across three files and finally the anti

00:27:36,679 --> 00:27:39,499
pattern that everyone's probably been

00:27:38,029 --> 00:27:43,070
waiting for even though you didn't know

00:27:39,499 --> 00:27:45,109
it slow tests everyone has a different

00:27:43,070 --> 00:27:47,959
definition of slow I'm not going to give

00:27:45,109 --> 00:27:50,929
you mine but common reason for slow

00:27:47,959 --> 00:27:52,820
tests having other testing anti-patterns

00:27:50,929 --> 00:27:54,169
somewhere in your code base so if you're

00:27:52,820 --> 00:27:55,489
doing anything in that I've covered up

00:27:54,169 --> 00:27:57,099
to this point it's pretty good chance

00:27:55,489 --> 00:27:59,329
your tests are going to be slow

00:27:57,099 --> 00:28:02,059
accessing external resources is a big

00:27:59,329 --> 00:28:04,549
one having tests that involve lots of

00:28:02,059 --> 00:28:06,649
setup anyone here have a test that

00:28:04,549 --> 00:28:08,539
imports an entire database from a dump

00:28:06,649 --> 00:28:10,190
before they run their tests I've worked

00:28:08,539 --> 00:28:13,159
on that project those tests were slow

00:28:10,190 --> 00:28:14,899
don't do that and finally the biggest

00:28:13,159 --> 00:28:15,709
reason that I see for slow tests isn't

00:28:14,899 --> 00:28:17,209
because there's something inherently

00:28:15,709 --> 00:28:19,570
wrong with the test framework it's

00:28:17,209 --> 00:28:22,339
because the implementation is slow

00:28:19,570 --> 00:28:23,809
here's an example of two tests one

00:28:22,339 --> 00:28:25,459
that's fast because all it does is a

00:28:23,809 --> 00:28:27,679
cert true one that's slow because it

00:28:25,459 --> 00:28:29,629
calls my class taught slow method slow

00:28:27,679 --> 00:28:32,109
method may or may not sleep for five

00:28:29,629 --> 00:28:33,799
seconds and then it's know it's true and

00:28:32,109 --> 00:28:35,239
the first thing you should do when

00:28:33,799 --> 00:28:37,039
you're confronted with slow tests is you

00:28:35,239 --> 00:28:38,179
should fix your implementation speeding

00:28:37,039 --> 00:28:40,249
up your feedback cycle for your

00:28:38,179 --> 00:28:43,789
developers will benefit your users it

00:28:40,249 --> 00:28:45,440
will make everyone happier but maybe

00:28:43,789 --> 00:28:47,019
your company doesn't really fully grok

00:28:45,440 --> 00:28:49,639
the whole benefit of testing yet or

00:28:47,019 --> 00:28:51,139
maybe this method is only run once every

00:28:49,639 --> 00:28:53,089
six months in production and so you

00:28:51,139 --> 00:28:55,099
can't justify spending three weeks it's

00:28:53,089 --> 00:28:57,589
going to require to make it faster right

00:28:55,099 --> 00:28:59,889
now in that case you have one other tool

00:28:57,589 --> 00:29:03,420
up your sleeve and that's using guards

00:28:59,889 --> 00:29:05,410
so here those two tests again

00:29:03,420 --> 00:29:06,730
here's what you have to do to make it so

00:29:05,410 --> 00:29:08,200
that that slow test doesn't run by

00:29:06,730 --> 00:29:09,430
default we're just going to check an

00:29:08,200 --> 00:29:10,900
environment variable and if that

00:29:09,430 --> 00:29:14,290
environment variable isn't set we're

00:29:10,900 --> 00:29:16,810
going to skip that slow test so we run

00:29:14,290 --> 00:29:19,930
our test the normal way we only run one

00:29:16,810 --> 00:29:21,850
test c 1 dot and the test run really

00:29:19,930 --> 00:29:25,210
quickly again someone saw the thousandth

00:29:21,850 --> 00:29:27,040
of a second add the environment variable

00:29:25,210 --> 00:29:29,650
to our call and now the tests are going

00:29:27,040 --> 00:29:30,790
to run faster or desert going to run

00:29:29,650 --> 00:29:33,310
slowly but we're going to run both of

00:29:30,790 --> 00:29:34,960
them this is a really powerful pattern I

00:29:33,310 --> 00:29:37,180
showed someone this and they immediately

00:29:34,960 --> 00:29:38,680
put it everywhere and then we stopped

00:29:37,180 --> 00:29:41,410
running all those tests even in the sea

00:29:38,680 --> 00:29:43,120
I don't do that if you're going to do

00:29:41,410 --> 00:29:44,620
this use it for the developers who don't

00:29:43,120 --> 00:29:46,300
need to care about the slow test make

00:29:44,620 --> 00:29:48,040
sure that your CI either in the primary

00:29:46,300 --> 00:29:49,210
run or maybe a subsequent run if using a

00:29:48,040 --> 00:29:51,130
tool like Jenkins that allows you to

00:29:49,210 --> 00:29:53,020
spawn separate test runs from your

00:29:51,130 --> 00:29:54,790
initial run make sure those tests are

00:29:53,020 --> 00:29:57,100
still getting run often at least once a

00:29:54,790 --> 00:30:03,010
day or at least or preferably with every

00:29:57,100 --> 00:30:05,080
check in so my top three not running

00:30:03,010 --> 00:30:06,460
your tests if you have them run them

00:30:05,080 --> 00:30:09,310
benefit from the work you've already

00:30:06,460 --> 00:30:10,630
done order dependent tests I think this

00:30:09,310 --> 00:30:12,250
is a really important anti-pattern for

00:30:10,630 --> 00:30:14,020
people to understand because it pops up

00:30:12,250 --> 00:30:15,280
with the most odd times and it's really

00:30:14,020 --> 00:30:17,920
hard to debug if you've got a lot of

00:30:15,280 --> 00:30:19,360
code and finally requiring external

00:30:17,920 --> 00:30:20,890
resources is a huge pet peeve of mine

00:30:19,360 --> 00:30:22,390
because I like to be able to write code

00:30:20,890 --> 00:30:24,930
at coffee shops and on airplanes and

00:30:22,390 --> 00:30:28,360
things don't require external resources

00:30:24,930 --> 00:30:29,830
so thank you all and thanks to Creative

00:30:28,360 --> 00:30:32,880
Commons for all these wonderful photos I

00:30:29,830 --> 00:30:32,880
managed to use for today's talk

00:31:10,880 --> 00:31:13,360

YouTube URL: https://www.youtube.com/watch?v=VBgySRk0VKY


