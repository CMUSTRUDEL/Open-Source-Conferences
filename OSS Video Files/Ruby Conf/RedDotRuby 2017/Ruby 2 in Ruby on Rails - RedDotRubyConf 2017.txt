Title: Ruby 2 in Ruby on Rails - RedDotRubyConf 2017
Publication date: 2020-01-22
Playlist: RedDotRuby 2017
Description: 
	Speaker: Akira Matsuda

Event Page: http://www.reddotrubyconf.com/

Produced by Engineers.SG

Help us caption & translate this video!

http://amara.org/v/8HYH/
Captions: 
	00:00:04,360 --> 00:00:18,500
messing up or OOP thank you so I mean

00:00:15,230 --> 00:00:24,380
let me do this myself on Akira from

00:00:18,500 --> 00:00:29,539
Japan um like this on the internet other

00:00:24,380 --> 00:00:33,610
countries on the Ruby committer lives in

00:00:29,539 --> 00:00:39,410
a rubyist village in the Ruby island um

00:00:33,610 --> 00:00:42,079
also a rails commuter well I guess Aaron

00:00:39,410 --> 00:00:46,160
Aaron Patterson and me are the only

00:00:42,079 --> 00:00:49,280
Clippers and we have the direct commit

00:00:46,160 --> 00:00:53,660
access to both of these repositories

00:00:49,280 --> 00:00:59,660
I mean Ruby and rails I also am a gem

00:00:53,660 --> 00:01:03,230
author mainly rails plugins like the one

00:00:59,660 --> 00:01:08,350
of the top community the page national

00:01:03,230 --> 00:01:12,439
library for rails but my recent role is

00:01:08,350 --> 00:01:15,770
like an event organizer mainly rather

00:01:12,439 --> 00:01:18,979
than a code writer I'm organizing the

00:01:15,770 --> 00:01:22,939
Ruby conference in Japan as the main

00:01:18,979 --> 00:01:25,610
person so let me promote my dance a

00:01:22,939 --> 00:01:30,290
little bit it's called really Chi Chi

00:01:25,610 --> 00:01:34,100
and it's gonna be held in September in

00:01:30,290 --> 00:01:37,579
Hiroshima tickets are on sale you can

00:01:34,100 --> 00:01:42,640
find more information here on that our

00:01:37,579 --> 00:01:48,950
beautiful website looking like this and

00:01:42,640 --> 00:01:52,070
so just don't miss it okay so this is me

00:01:48,950 --> 00:01:55,100
I'm really glad to be here and be able

00:01:52,070 --> 00:01:58,030
to do a keynote here today thank you

00:01:55,100 --> 00:01:58,030
very much for having me

00:01:58,880 --> 00:02:07,409
so today I'm going to show you things

00:02:02,640 --> 00:02:10,500
like these the new features that Ruby

00:02:07,409 --> 00:02:16,010
team is and introducing the major major

00:02:10,500 --> 00:02:19,100
version 2 to the language and and hell

00:02:16,010 --> 00:02:25,950
rails uses these new features of Ruby

00:02:19,100 --> 00:02:29,310
right and I am things I did for it like

00:02:25,950 --> 00:02:30,080
round these new features okay so let's

00:02:29,310 --> 00:02:34,050
begin

00:02:30,080 --> 00:02:41,780
firstly about both of these versions of

00:02:34,050 --> 00:02:41,780
Ruby on Rails is all the rough fine line

00:02:48,240 --> 00:03:00,670
so you see rails for came together with

00:02:55,060 --> 00:03:06,069
Ruby - and the important part is this

00:03:00,670 --> 00:03:13,030
square rails five supports only Ruby

00:03:06,069 --> 00:03:15,550
clue - as I said so in other words we

00:03:13,030 --> 00:03:18,310
want up the major version of rails

00:03:15,550 --> 00:03:21,239
because we wanted to drop support for

00:03:18,310 --> 00:03:23,650
Ruby - oh and ribbit to go through one

00:03:21,239 --> 00:03:27,060
so these others supported version of

00:03:23,650 --> 00:03:34,870
Ruby also in rails 4 in five

00:03:27,060 --> 00:03:38,319
this means that rails 5 can use real 5

00:03:34,870 --> 00:03:43,390
can use Ruby like less than 3 features

00:03:38,319 --> 00:03:45,040
and betrayal 5 cannot use Ruby three

00:03:43,390 --> 00:03:47,280
three new features into four new

00:03:45,040 --> 00:03:50,620
features and two five new features right

00:03:47,280 --> 00:03:56,040
the it's a stealth support ravit - -

00:03:50,620 --> 00:04:00,040
right so what are the new features in

00:03:56,040 --> 00:04:02,049
recent versions these are some of the

00:04:00,040 --> 00:04:08,410
new things that I'm going to cover in

00:04:02,049 --> 00:04:13,780
myself today okay so let's start off

00:04:08,410 --> 00:04:18,910
with module prepend exactly one of my

00:04:13,780 --> 00:04:21,549
favorite features Ruby - now let's go

00:04:18,910 --> 00:04:23,470
back to history a little bit and see how

00:04:21,549 --> 00:04:24,850
we were doing dealing with monkey

00:04:23,470 --> 00:04:29,050
patches before really

00:04:24,850 --> 00:04:34,150
I mean prepend being introduced into

00:04:29,050 --> 00:04:36,130
Ruby okay the four modules band we were

00:04:34,150 --> 00:04:43,120
using something called alias method

00:04:36,130 --> 00:04:46,950
chain to extend existing methods it's a

00:04:43,120 --> 00:04:46,950
part of active support and

00:04:47,910 --> 00:04:52,940
the inflammation was just this theory

00:04:51,450 --> 00:04:56,450
Elias methods

00:04:52,940 --> 00:04:58,580
it was initially implemented back in

00:04:56,450 --> 00:05:03,860
00:04:58,580 --> 00:05:06,600
so was as I showed you it was very

00:05:03,860 --> 00:05:10,740
beautifully simply implemented simply

00:05:06,600 --> 00:05:15,960
implementation not just it's super

00:05:10,740 --> 00:05:19,920
useful it is very simple indeed and this

00:05:15,960 --> 00:05:24,570
is how we use the feature for example

00:05:19,920 --> 00:05:29,070
arm where is a method called foo you can

00:05:24,570 --> 00:05:32,400
extend food behavior with defining food

00:05:29,070 --> 00:05:40,980
with bars and calling through without

00:05:32,400 --> 00:05:42,870
bars and inside with door okay but this

00:05:40,980 --> 00:05:47,760
feature actually had a little bit of

00:05:42,870 --> 00:05:50,250
downside I mean like pitfall because

00:05:47,760 --> 00:05:52,290
this feature was not a language core

00:05:50,250 --> 00:05:57,080
feature it was just a workaround

00:05:52,290 --> 00:06:01,410
basically and it so it creates some like

00:05:57,080 --> 00:06:03,630
intermediate methods in the previous

00:06:01,410 --> 00:06:04,200
example through with bar include without

00:06:03,630 --> 00:06:07,830
bar

00:06:04,200 --> 00:06:10,980
these methods aren't actually publicly

00:06:07,830 --> 00:06:12,420
called from outside and you can tell

00:06:10,980 --> 00:06:16,140
what's going to happen when these

00:06:12,420 --> 00:06:20,370
methods are called what I'm talking

00:06:16,140 --> 00:06:23,070
about is like these methods through with

00:06:20,370 --> 00:06:27,220
bar and food without bar it's actually

00:06:23,070 --> 00:06:28,870
in the list of public methods right

00:06:27,220 --> 00:06:32,110
[Music]

00:06:28,870 --> 00:06:36,129
so what's wrong with these methods

00:06:32,110 --> 00:06:41,840
here's a example that I showed you

00:06:36,129 --> 00:06:42,920
extending food with bar okay it looks

00:06:41,840 --> 00:06:44,259
like it's working

00:06:42,920 --> 00:06:56,509
[Music]

00:06:44,259 --> 00:06:59,659
but so the difference is that you extend

00:06:56,509 --> 00:07:01,520
food with bar and with bass for the

00:06:59,659 --> 00:07:04,550
first example and next example is

00:07:01,520 --> 00:07:09,469
extending the same method with best

00:07:04,550 --> 00:07:15,919
first and then barring next and you see

00:07:09,469 --> 00:07:23,560
that the result changes right when you

00:07:15,919 --> 00:07:26,900
called foo without bonus method right so

00:07:23,560 --> 00:07:30,020
like this you cannot really tell what's

00:07:26,900 --> 00:07:32,180
going to happen with that calling when

00:07:30,020 --> 00:07:38,539
you call that public method through

00:07:32,180 --> 00:07:41,839
without part let's still callable so the

00:07:38,539 --> 00:07:45,740
real world example for example think of

00:07:41,839 --> 00:07:49,250
this case um you have two rails plugins

00:07:45,740 --> 00:07:53,089
that extend one same method listed in

00:07:49,250 --> 00:07:57,110
your gem file and when it changed the

00:07:53,089 --> 00:08:01,250
order of these like our gems in the gem

00:07:57,110 --> 00:08:05,360
file your code may may break in some

00:08:01,250 --> 00:08:10,419
case so we needed more robust

00:08:05,360 --> 00:08:13,430
monkey-patching tool and so yahuda cots

00:08:10,419 --> 00:08:18,669
proposed modular pants as the Ruby

00:08:13,430 --> 00:08:24,339
language core feature in ruby 2.0 so

00:08:18,669 --> 00:08:29,150
this is the future module prepend uses

00:08:24,339 --> 00:08:30,780
module instead of aliases for thing out

00:08:29,150 --> 00:08:33,060
I guess

00:08:30,780 --> 00:08:39,120
it's a very green way of making monkey

00:08:33,060 --> 00:08:41,580
patching good not got grade in like ugly

00:08:39,120 --> 00:08:48,900
methods like way to something without

00:08:41,580 --> 00:08:53,970
something okay but still there's a

00:08:48,900 --> 00:08:57,660
pitfall when you mix it

00:08:53,970 --> 00:09:03,020
alias method chain and prepend so this

00:08:57,660 --> 00:09:07,530
is an example of mixing so if you um

00:09:03,020 --> 00:09:10,590
there's a existing Class C and firstly

00:09:07,530 --> 00:09:12,800
you extend the methods with Taylor's

00:09:10,590 --> 00:09:19,520
method chain and then extend it with

00:09:12,800 --> 00:09:19,520
pretend it just works right

00:09:21,180 --> 00:09:27,690
but if you put three pans first then

00:09:25,300 --> 00:09:34,000
Euler's method chain is going to die

00:09:27,690 --> 00:09:36,370
it's going to cause infinite loop so

00:09:34,000 --> 00:09:40,899
this means alias method chain and

00:09:36,370 --> 00:09:41,440
prepend can never coexist you're going

00:09:40,899 --> 00:09:52,740
to be killed

00:09:41,440 --> 00:09:57,970
okay so so alias method chain is armed

00:09:52,740 --> 00:10:01,390
so so dangerous so you on you discourage

00:09:57,970 --> 00:10:06,820
to use it if please did never use it

00:10:01,390 --> 00:10:09,970
anymore and especially if your ball game

00:10:06,820 --> 00:10:16,529
author or library author please stop

00:10:09,970 --> 00:10:20,860
using a leaf method chain right now and

00:10:16,529 --> 00:10:23,529
actually you can use both in one code

00:10:20,860 --> 00:10:29,170
base if you really would like to buy

00:10:23,529 --> 00:10:33,510
like switching by ruby version but since

00:10:29,170 --> 00:10:40,450
that it's slightly different so it's

00:10:33,510 --> 00:10:43,720
exactly hard to support both so because

00:10:40,450 --> 00:10:45,730
with this many gems stop supporting ruby

00:10:43,720 --> 00:10:51,839
one because it's hard to support both

00:10:45,730 --> 00:10:55,570
one and two this is the reason I like

00:10:51,839 --> 00:10:58,440
this feature because it kills Ruby - Tom

00:10:55,570 --> 00:10:58,440
sorry Ruby one

00:10:59,490 --> 00:11:09,339
by the way um I showed you some code

00:11:04,270 --> 00:11:12,040
calling module prepend but actually

00:11:09,339 --> 00:11:17,770
these methods are public since ruby to

00:11:12,040 --> 00:11:20,470
one so there was a small room of

00:11:17,770 --> 00:11:21,990
improvement in the code I showed you

00:11:20,470 --> 00:11:25,990
previously

00:11:21,990 --> 00:11:30,459
this send include or send ribbon was

00:11:25,990 --> 00:11:36,370
known as a very common idiom in Ruby but

00:11:30,459 --> 00:11:38,649
um so yeah it's so so popular but I

00:11:36,370 --> 00:11:40,899
didn't like it I wanted to do the

00:11:38,649 --> 00:11:45,190
simpler so I proposed to make them

00:11:40,899 --> 00:11:50,350
public so here's my proposal for Ruby

00:11:45,190 --> 00:11:54,670
3-1 and in the Ticketmaster wrote he

00:11:50,350 --> 00:11:58,839
didn't write like it but he still kindly

00:11:54,670 --> 00:12:06,730
accepted my proposal and but Matthew

00:11:58,839 --> 00:12:12,850
still don't like this right so I know a

00:12:06,730 --> 00:12:14,800
public include is available in Ruby so

00:12:12,850 --> 00:12:18,910
you can find x-acto fine

00:12:14,800 --> 00:12:21,640
um dot included calls everywhere in Ruby

00:12:18,910 --> 00:12:28,920
arms are in rails and in plugging in

00:12:21,640 --> 00:12:32,050
gems so just forget send include okay

00:12:28,920 --> 00:12:35,440
connects topic refinements refinements

00:12:32,050 --> 00:12:41,800
is another new strategy for your monkey

00:12:35,440 --> 00:12:46,779
patching with very I mean unique -

00:12:41,800 --> 00:12:52,440
unique scope it's it's known as file

00:12:46,779 --> 00:12:55,660
scope monkey patching let me explain um

00:12:52,440 --> 00:12:58,270
we have ever actually used refinements

00:12:55,660 --> 00:13:04,470
by yourself have you ever used

00:12:58,270 --> 00:13:10,610
refinements okay only two in this room

00:13:04,470 --> 00:13:13,950
I know I don't know what if use it so I

00:13:10,610 --> 00:13:20,370
actually created some gems using

00:13:13,950 --> 00:13:26,420
refinements one is called database remar

00:13:20,370 --> 00:13:30,840
rewinder so it defines a method in

00:13:26,420 --> 00:13:35,760
active record connection called execute

00:13:30,840 --> 00:13:41,700
multiple and it calls execute monic

00:13:35,760 --> 00:13:44,850
multiple inside the blonde one but so

00:13:41,700 --> 00:13:47,210
this execute multiple method is actually

00:13:44,850 --> 00:13:51,270
a public method that it's only visible

00:13:47,210 --> 00:13:54,450
from inside the plugin users can never

00:13:51,270 --> 00:13:59,220
touch this method so it's very useful

00:13:54,450 --> 00:14:03,120
right so I personally call this a super

00:13:59,220 --> 00:14:08,040
private method it's private inside the

00:14:03,120 --> 00:14:14,540
plug-in more accurately it's actually

00:14:08,040 --> 00:14:14,540
file scope inside each file in the 14

00:14:16,340 --> 00:14:19,340
cell

00:14:19,410 --> 00:14:27,209
so it's about plugging and in the rails

00:14:24,279 --> 00:14:34,149
code base I introduced refinements for

00:14:27,209 --> 00:14:39,689
rails 5.1 to extend a rage song this is

00:14:34,149 --> 00:14:43,329
the code it recently was creating

00:14:39,689 --> 00:14:47,220
something called a rig some public way

00:14:43,329 --> 00:14:49,899
but I change this information

00:14:47,220 --> 00:14:52,660
implementation to use refinement in

00:14:49,899 --> 00:15:00,910
order they not to reveal that or exam

00:14:52,660 --> 00:15:07,149
method to the users so in this case I'll

00:15:00,910 --> 00:15:14,730
it already told this I guess yeah so

00:15:07,149 --> 00:15:23,939
refinements was used to conceal that

00:15:14,730 --> 00:15:28,420
internal method so I investigated this

00:15:23,939 --> 00:15:32,350
feature when implementing this and I

00:15:28,420 --> 00:15:35,769
found something weird its I found it's

00:15:32,350 --> 00:15:40,360
actually not file scoped the

00:15:35,769 --> 00:15:46,139
documentation was lie and so I reported

00:15:40,360 --> 00:15:50,889
to the red line

00:15:46,139 --> 00:15:54,180
yeah well I told in its path curves but

00:15:50,889 --> 00:15:54,180
July I'm sorry

00:15:56,140 --> 00:16:02,529
so here's an example showing the lie

00:16:03,550 --> 00:16:14,290
when you you can define a refinement in

00:16:09,800 --> 00:16:18,830
a module in this case a anonymous module

00:16:14,290 --> 00:16:22,190
extending object and then define the

00:16:18,830 --> 00:16:27,050
object that is being refined then it

00:16:22,190 --> 00:16:32,080
works okay so what if we like to turn

00:16:27,050 --> 00:16:36,440
them around like this firstly define a

00:16:32,080 --> 00:16:40,070
method then define the refinements

00:16:36,440 --> 00:16:45,920
extending the methods then it doesn't

00:16:40,070 --> 00:16:49,250
work so it's not actually false code but

00:16:45,920 --> 00:16:50,560
like file scope plus physical positions

00:16:49,250 --> 00:16:55,940
code

00:16:50,560 --> 00:16:59,450
am I correct meant I thought it's a bug

00:16:55,940 --> 00:17:07,819
but matt said it's an intended behavior

00:16:59,450 --> 00:17:20,100
I think this is very annoying behavior

00:17:07,819 --> 00:17:24,400
it's so complex but but

00:17:20,100 --> 00:17:32,350
but it's said to be incentive by Matt's

00:17:24,400 --> 00:17:34,960
so anyway please mind this and please

00:17:32,350 --> 00:17:39,340
beware when you're actually using my

00:17:34,960 --> 00:17:47,880
appointment I guess it's the weirdest

00:17:39,340 --> 00:17:49,270
future in Ruby so far so just be careful

00:17:47,880 --> 00:17:51,490
anyway

00:17:49,270 --> 00:17:57,040
this funny feature was proposed and

00:17:51,490 --> 00:18:02,140
implemented by mr. Shue go Maya who's

00:17:57,040 --> 00:18:05,020
Matt's boss and his company and this guy

00:18:02,140 --> 00:18:10,240
created another weird feature in relief

00:18:05,020 --> 00:18:15,540
called protected so here's another topic

00:18:10,240 --> 00:18:23,380
concerning method visibility and another

00:18:15,540 --> 00:18:26,919
real feature in Ruby so here's an

00:18:23,380 --> 00:18:32,760
example taking firm Hisle Andrew because

00:18:26,919 --> 00:18:38,020
like this is the correct way of using

00:18:32,760 --> 00:18:46,419
protected but it's never used in this

00:18:38,020 --> 00:18:49,480
way and math again he created if he

00:18:46,419 --> 00:18:53,820
would design Ruby again he will not

00:18:49,480 --> 00:18:53,820
include Ruby in the language feature

00:18:55,260 --> 00:19:05,620
because I guess he didn't like a teacher

00:19:00,299 --> 00:19:08,410
so actually protected is very very

00:19:05,620 --> 00:19:14,820
frequently used inside the rails code

00:19:08,410 --> 00:19:20,500
base but almost these use cases of

00:19:14,820 --> 00:19:22,690
protected is misusing protected you just

00:19:20,500 --> 00:19:27,850
can rewrite protected sits private and

00:19:22,690 --> 00:19:29,469
you could should still work so I tried

00:19:27,850 --> 00:19:36,409
doing this

00:19:29,469 --> 00:19:43,249
growls like three years ago but I had to

00:19:36,409 --> 00:19:48,049
change like 140 files and like about 200

00:19:43,249 --> 00:19:52,149
additions 200 deletions and the tests

00:19:48,049 --> 00:19:55,789
were still working still passing but I

00:19:52,149 --> 00:20:02,649
gave up pushing this top string because

00:19:55,789 --> 00:20:02,649
um it kind of broke some documentation

00:20:04,089 --> 00:20:11,869
that hasn't happened three years ago but

00:20:06,799 --> 00:20:15,259
I finally pushed this last year by

00:20:11,869 --> 00:20:20,029
separating that huge patch into like

00:20:15,259 --> 00:20:22,820
several small patches so it's actually

00:20:20,029 --> 00:20:30,200
in reel five one well five one dozen

00:20:22,820 --> 00:20:33,879
does no longer abuse protected scope so

00:20:30,200 --> 00:20:39,200
protective dead in Braille faster so he

00:20:33,879 --> 00:20:43,700
also should never use protected again by

00:20:39,200 --> 00:20:46,460
the way sugar the period of these funny

00:20:43,700 --> 00:20:49,669
features is written on his another

00:20:46,460 --> 00:20:59,089
project recently it's a text editor in

00:20:49,669 --> 00:21:01,399
reading so he's going to do a

00:20:59,089 --> 00:21:04,999
presentation about the his new project

00:21:01,399 --> 00:21:08,509
text editor in next coming with the

00:21:04,999 --> 00:21:08,899
conference called Ruby Taiji so don't

00:21:08,509 --> 00:21:11,460
miss it

00:21:08,899 --> 00:21:20,530
okay

00:21:11,460 --> 00:21:23,470
so here's another topic mmm

00:21:20,530 --> 00:21:26,320
private dick yes there's a tiny

00:21:23,470 --> 00:21:31,570
improvement around method visibility in

00:21:26,320 --> 00:21:33,700
Ruby trail so in order to define a

00:21:31,570 --> 00:21:38,500
private method we have to define the

00:21:33,700 --> 00:21:41,200
method like this in this case all

00:21:38,500 --> 00:21:45,100
methods defined below that private or

00:21:41,200 --> 00:21:48,630
I'll become all private right or if it's

00:21:45,100 --> 00:21:52,210
done like this you can do this also in

00:21:48,630 --> 00:21:59,170
this case the private call takes a

00:21:52,210 --> 00:22:02,800
symbol of the method name right so just

00:21:59,170 --> 00:22:08,610
like C++ or Java recent Ruby's can do

00:22:02,800 --> 00:22:14,500
this private test or public test right

00:22:08,610 --> 00:22:16,330
it's rebel evolutionally handy right so

00:22:14,500 --> 00:22:28,000
you don't have to repeat the method name

00:22:16,330 --> 00:22:31,420
twice so it's a very simple trick he

00:22:28,000 --> 00:22:35,950
just the authorized attach just change

00:22:31,420 --> 00:22:39,310
the return value of the DEF statement so

00:22:35,950 --> 00:22:40,120
it it sincerely actually doing this

00:22:39,310 --> 00:22:43,270
right

00:22:40,120 --> 00:22:48,450
testing the return value of death DEF

00:22:43,270 --> 00:22:48,450
statement to the private segment right

00:22:49,290 --> 00:22:54,480
so this patch was written four years ago

00:22:54,690 --> 00:23:00,970
and I suppose this feature is very much

00:22:58,540 --> 00:23:07,150
important for especially period of rails

00:23:00,970 --> 00:23:09,690
team again because this is the rail

00:23:07,150 --> 00:23:09,690
style

00:23:10,010 --> 00:23:21,830
Oh does it is a kind of group of people

00:23:16,520 --> 00:23:27,679
who want to write private this way in

00:23:21,830 --> 00:23:33,070
this unique style oh I'm not sure if

00:23:27,679 --> 00:23:37,100
it's a group of people and maybe anyway

00:23:33,070 --> 00:23:41,840
there's always kind of like the devil

00:23:37,100 --> 00:23:46,790
between this style and this traditional

00:23:41,840 --> 00:23:52,460
style so everybody is happy with this

00:23:46,790 --> 00:24:00,140
right we don't have to fight anymore

00:23:52,460 --> 00:24:04,990
okay so that's why I said this feature

00:24:00,140 --> 00:24:04,990
is very important for you for you Aaron

00:24:05,650 --> 00:24:14,770
but private service actually very rarely

00:24:10,610 --> 00:24:19,640
used in side rails I just get bread

00:24:14,770 --> 00:24:25,340
today and I found only 17 occurrences in

00:24:19,640 --> 00:24:28,160
private shift in rails the reason is

00:24:25,340 --> 00:24:33,169
because there was a documentation

00:24:28,160 --> 00:24:38,150
problem in in private chef and so very

00:24:33,169 --> 00:24:42,410
recent so rails users are docked to

00:24:38,150 --> 00:24:46,840
generate segmentation documents and also

00:24:42,410 --> 00:24:50,840
couldn't properly generate the the

00:24:46,840 --> 00:24:54,410
documents private methods if it's

00:24:50,840 --> 00:24:59,419
defined that way and it breaks with

00:24:54,410 --> 00:25:02,570
rails API judgment if you use this so

00:24:59,419 --> 00:25:06,830
the problem is like this to use private

00:25:02,570 --> 00:25:11,000
search and then if you define any public

00:25:06,830 --> 00:25:16,549
method below that public method also is

00:25:11,000 --> 00:25:19,480
like treated as a private method so that

00:25:16,549 --> 00:25:21,340
private test changes the scope globally

00:25:19,480 --> 00:25:24,820
[Music]

00:25:21,340 --> 00:25:29,150
so why did our that can have such bug

00:25:24,820 --> 00:25:32,000
because the parser is different from the

00:25:29,150 --> 00:25:35,980
Ruby Sparkle classic it because our duck

00:25:32,000 --> 00:25:35,980
has its own really puzzle

00:25:36,190 --> 00:25:45,490
okay the parser is this this thing Ruby

00:25:41,419 --> 00:25:45,490
likes done RB actually collects it

00:25:45,789 --> 00:25:53,690
the file is like this

00:25:48,610 --> 00:25:57,530
it's a according to the comments it's a

00:25:53,690 --> 00:26:06,620
ruby lexical analyzer written by K JSON

00:25:57,530 --> 00:26:12,500
who's the author of IRB and it requires

00:26:06,620 --> 00:26:15,230
IRB Liam sighs right it's not a console

00:26:12,500 --> 00:26:19,640
so it's a it's a dutchman generators it

00:26:15,230 --> 00:26:24,710
requires IRB can you use IV Parsons

00:26:19,640 --> 00:26:29,059
teaching so there are three positives in

00:26:24,710 --> 00:26:33,370
maybe pause why and Victor there's Santa

00:26:29,059 --> 00:26:40,220
libraries and they are be possible from

00:26:33,370 --> 00:26:47,120
actually Ritter is a ruby posture in the

00:26:40,220 --> 00:26:49,059
styling library so I guess they are

00:26:47,120 --> 00:26:52,240
about should use this instead of

00:26:49,059 --> 00:26:57,080
creating its own positing right

00:26:52,240 --> 00:27:00,320
so why what isn't our doc because Azoff

00:26:57,080 --> 00:27:08,330
was created before people is being

00:27:00,320 --> 00:27:11,390
created this is the history so I tried

00:27:08,330 --> 00:27:18,260
serum right the positive our doc to use

00:27:11,390 --> 00:27:24,289
wizard but I just failed was so tough to

00:27:18,260 --> 00:27:28,570
talk good so I gave up to admit that I

00:27:24,289 --> 00:27:31,549
brought this task to my Ruby Meetup and

00:27:28,570 --> 00:27:32,540
actually someone is using I mean working

00:27:31,549 --> 00:27:35,120
on this

00:27:32,540 --> 00:27:40,610
to replace our dog possible to use

00:27:35,120 --> 00:27:43,490
gripper and it's going to be and this

00:27:40,610 --> 00:27:50,180
person will present about this and the

00:27:43,490 --> 00:27:53,180
next Ruby cages so don't miss it so

00:27:50,180 --> 00:28:00,320
anyway this is the history of Ruby

00:27:53,180 --> 00:28:05,270
posters and yes this one episode IRB was

00:28:00,320 --> 00:28:08,450
created in the last century if it's been

00:28:05,270 --> 00:28:12,470
20 years approximately from the first

00:28:08,450 --> 00:28:14,030
birth of IRB so everyone let's celebrate

00:28:12,470 --> 00:28:25,010
the 20th birthday

00:28:14,030 --> 00:28:27,710
higher be yeah and I guess be the

00:28:25,010 --> 00:28:35,120
anniversary events is going to be happen

00:28:27,710 --> 00:28:38,960
in Ruby Tai Chi by the creator of IRB

00:28:35,120 --> 00:28:46,220
himself anyway let's go back to the

00:28:38,960 --> 00:28:52,970
privates of problem how much when it's

00:28:46,220 --> 00:28:55,970
go ahead twenty minutes okay okay okay

00:28:52,970 --> 00:29:01,700
so I said I gave up replacing good are

00:28:55,970 --> 00:29:04,790
those possible but I just instead I just

00:29:01,700 --> 00:29:07,880
made a tiny patch resolving my problem

00:29:04,790 --> 00:29:14,620
to Rails this is my patch you can check

00:29:07,880 --> 00:29:17,900
online um so this patch enables just

00:29:14,620 --> 00:29:21,560
correctly parsing our private self on

00:29:17,900 --> 00:29:27,410
our dock without replacing the whole

00:29:21,560 --> 00:29:30,940
posture so this happened last year so it

00:29:27,410 --> 00:29:34,850
took like three more than three years to

00:29:30,940 --> 00:29:38,420
support private chef and being rails

00:29:34,850 --> 00:29:40,260
communities to allowing those

00:29:38,420 --> 00:29:45,630
communities to use this news

00:29:40,260 --> 00:29:49,320
sex but it's now available because our

00:29:45,630 --> 00:29:54,270
other have been released with this with

00:29:49,320 --> 00:29:57,750
my pet and rails 5-1 depends on that

00:29:54,270 --> 00:30:06,390
version so you're free to use private

00:29:57,750 --> 00:30:12,510
test now yeah okay so the next topic is

00:30:06,390 --> 00:30:14,970
keyword arguments this something looks

00:30:12,510 --> 00:30:19,470
like she word arguments and rails since

00:30:14,970 --> 00:30:22,800
it's version one like this so these are

00:30:19,470 --> 00:30:28,590
the met method definitions is some kind

00:30:22,800 --> 00:30:34,410
of keyword arguments or like this takes

00:30:28,590 --> 00:30:36,900
very well there are your needs so it

00:30:34,410 --> 00:30:39,600
certainly users ruby hash to pass in

00:30:36,900 --> 00:30:45,630
something looks like arguments

00:30:39,600 --> 00:30:47,880
I mean keyword arguments it allows the

00:30:45,630 --> 00:30:54,110
method call that's better than like

00:30:47,880 --> 00:30:56,280
passing in these arguments little names

00:30:54,110 --> 00:30:58,500
but on the other hand the method

00:30:56,280 --> 00:31:02,960
definition looks like very weird

00:30:58,500 --> 00:31:07,110
I mean itself nothing to the users just

00:31:02,960 --> 00:31:11,580
like pass in some kind of hash named

00:31:07,110 --> 00:31:17,400
options or you can pass in everything

00:31:11,580 --> 00:31:20,310
like star arts it's it really sells the

00:31:17,400 --> 00:31:26,850
method signature itself nothing to the

00:31:20,310 --> 00:31:31,500
users and it's actually included in

00:31:26,850 --> 00:31:35,640
rails tool chain in active support so

00:31:31,500 --> 00:31:40,770
this is how rail extracts the options

00:31:35,640 --> 00:31:44,510
from the given borrowings this method on

00:31:40,770 --> 00:31:44,510
array called exact options

00:31:44,610 --> 00:31:51,190
since it's just a hash you can define a

00:31:48,100 --> 00:32:00,279
default value inside the method like

00:31:51,190 --> 00:32:03,759
this and um yes inside a method and also

00:32:00,279 --> 00:32:07,600
never forget to write a documentation

00:32:03,759 --> 00:32:11,350
about the default values outside the

00:32:07,600 --> 00:32:14,019
document on the I'm solid method so you

00:32:11,350 --> 00:32:18,990
can also verify the option keys in this

00:32:14,019 --> 00:32:25,360
way to make sure um you haven't gotten

00:32:18,990 --> 00:32:29,919
unexpected cheese this just raises when

00:32:25,360 --> 00:32:32,710
an expected Keith looks given again you

00:32:29,919 --> 00:32:42,190
have to write both the code and the

00:32:32,710 --> 00:32:44,679
document so so then Ruby to finally got

00:32:42,190 --> 00:32:50,919
the core language feature key Bernard

00:32:44,679 --> 00:32:58,629
means was implemented by mummy three men

00:32:50,919 --> 00:33:02,289
and insane so we can now rewrite the key

00:32:58,629 --> 00:33:06,970
arguments ish something in rails from

00:33:02,289 --> 00:33:11,590
this to be like this here is a pet the

00:33:06,970 --> 00:33:13,570
writings will talk to the methods so you

00:33:11,590 --> 00:33:17,009
see the method signature becomes more

00:33:13,570 --> 00:33:19,629
like clear to the users what to take

00:33:17,009 --> 00:33:22,379
what key is to take and what default

00:33:19,629 --> 00:33:26,529
values to take right also that

00:33:22,379 --> 00:33:30,820
implementation becomes shorter right and

00:33:26,529 --> 00:33:33,460
I guess it won't answered because it's

00:33:30,820 --> 00:33:40,649
always like hash man equation and very

00:33:33,460 --> 00:33:40,649
manipulation is written on feet thanks

00:33:41,170 --> 00:33:48,140
so I created a branch using keyword

00:33:46,040 --> 00:33:53,420
arguments I mean introducing cumulative

00:33:48,140 --> 00:33:58,160
in serial school days back in four years

00:33:53,420 --> 00:34:00,830
ago before the agree to release and then

00:33:58,160 --> 00:34:02,330
upon some problem some specification

00:34:00,830 --> 00:34:08,020
problem arose to our arguments in

00:34:02,330 --> 00:34:13,040
reading rails very often defines a key

00:34:08,020 --> 00:34:17,090
method key that that is exactly like

00:34:13,040 --> 00:34:23,899
Ruby keyword like if like validate if

00:34:17,090 --> 00:34:26,540
valid unless etc so the key argument

00:34:23,899 --> 00:34:29,210
accurate method is actually can be

00:34:26,540 --> 00:34:33,770
defined like this and it can be called

00:34:29,210 --> 00:34:38,690
like this but you can never like access

00:34:33,770 --> 00:34:41,020
that that variable and call this syntax

00:34:38,690 --> 00:34:41,020
agree

00:34:45,320 --> 00:34:56,480
so with qi now we can create a never can

00:34:50,570 --> 00:35:00,680
access variable in Ruby okay I brought

00:34:56,480 --> 00:35:02,810
this problem to record and discuss the

00:35:00,680 --> 00:35:06,890
bliss and so we introduced a new feature

00:35:02,810 --> 00:35:11,270
in review one it's called binding local

00:35:06,890 --> 00:35:16,520
variable get this way we can get the

00:35:11,270 --> 00:35:22,880
value this example defines a local

00:35:16,520 --> 00:35:27,950
variable named meal so works right and

00:35:22,880 --> 00:35:29,930
so I'd like to propose to rails to use

00:35:27,950 --> 00:35:36,620
keyword arguments as the first class

00:35:29,930 --> 00:35:39,230
citizen API email thank you I haven't

00:35:36,620 --> 00:35:42,790
actually proposed this yet but I'll work

00:35:39,230 --> 00:35:46,850
on this maybe after this conference

00:35:42,790 --> 00:35:50,180
again run faster should make the

00:35:46,850 --> 00:35:54,620
code more readable and Queen and should

00:35:50,180 --> 00:35:58,580
make more obvious documentation so I

00:35:54,620 --> 00:35:59,090
guess I'm going to do this so the next

00:35:58,580 --> 00:36:02,200
topics

00:35:59,090 --> 00:36:02,200
require relatives

00:36:04,130 --> 00:36:09,900
Hey yes reply relative

00:36:07,619 --> 00:36:18,950
this feature is originally introduced

00:36:09,900 --> 00:36:21,509
into Ruby because of rails and it's

00:36:18,950 --> 00:36:23,160
supposed to run faster than normal

00:36:21,509 --> 00:36:27,839
required because if the implementation

00:36:23,160 --> 00:36:32,869
is much more simple but rails doesn't

00:36:27,839 --> 00:36:35,640
really use this feature today most of

00:36:32,869 --> 00:36:40,829
requires in Ruby is normally required

00:36:35,640 --> 00:36:42,749
instead we put the cobalt in so there's

00:36:40,829 --> 00:36:46,470
a huge room for performance improvement

00:36:42,749 --> 00:36:50,460
against using River relative so I

00:36:46,470 --> 00:36:53,720
created a pant doing this I rewrote all

00:36:50,460 --> 00:37:00,839
requires in Kaiba Corps abilities and

00:36:53,720 --> 00:37:07,529
benchmark the result was no significant

00:37:00,839 --> 00:37:12,079
performance agreements so I haven't

00:37:07,529 --> 00:37:18,119
posted this to upstream but I know why

00:37:12,079 --> 00:37:18,779
not can I just got with cogent he said

00:37:18,119 --> 00:37:22,549
maybe

00:37:18,779 --> 00:37:31,950
bunglers doing good jobs redefining

00:37:22,549 --> 00:37:34,680
require and making it faster ok ok oh

00:37:31,950 --> 00:37:38,999
you guessed it more investigate more

00:37:34,680 --> 00:37:41,119
after this conference anyway require

00:37:38,999 --> 00:37:45,509
elective is basically a good thing so

00:37:41,119 --> 00:37:47,700
you may use it I I recommend you to use

00:37:45,509 --> 00:37:54,170
it instead of you required should be

00:37:47,700 --> 00:37:57,809
faster again here's another topic

00:37:54,170 --> 00:38:00,150
instruction sequence load and dumping

00:37:57,809 --> 00:38:02,670
load okay

00:38:00,150 --> 00:38:03,960
these are public API things will be to

00:38:02,670 --> 00:38:07,339
see you again

00:38:03,960 --> 00:38:12,269
and koishi created something using this

00:38:07,339 --> 00:38:15,440
but he said his version doesn't really

00:38:12,269 --> 00:38:18,470
make real sastras so this year

00:38:15,440 --> 00:38:21,520
on Shopify created something resembles

00:38:18,470 --> 00:38:24,950
touka which is long and they say it's

00:38:21,520 --> 00:38:31,150
making rails boots and faster very

00:38:24,950 --> 00:38:34,400
interesting it's kind of still veiled

00:38:31,150 --> 00:38:37,339
mysterious but I heard one of the

00:38:34,400 --> 00:38:40,970
creative this plug-in is coming to Ruby

00:38:37,339 --> 00:38:43,700
Kaiji and so if you'd like to know more

00:38:40,970 --> 00:38:48,500
about this plug-in I mean this feature

00:38:43,700 --> 00:38:54,230
just come to really high key because I'm

00:38:48,500 --> 00:38:57,170
a very huge topic in coding in Ruby so

00:38:54,230 --> 00:39:05,420
in recent versions of Ruby every string

00:38:57,170 --> 00:39:07,520
object has its own encoding okay and we

00:39:05,420 --> 00:39:10,790
use various encoding actually even Maps

00:39:07,520 --> 00:39:21,349
uses other encoding other than utf-8

00:39:10,790 --> 00:39:27,130
until like 5 years ago but Rails has to

00:39:21,349 --> 00:39:29,930
be basically utf-8 only our framework

00:39:27,130 --> 00:39:37,190
rails doesn't has to deal with multiple

00:39:29,930 --> 00:39:39,230
encodings internally I mean this can be

00:39:37,190 --> 00:39:42,829
the best basic strategy against

00:39:39,230 --> 00:39:46,190
encodings in rails just keep everything

00:39:42,829 --> 00:39:50,560
to be utf-8 and converts everything from

00:39:46,190 --> 00:39:50,560
the outside to utf-8

00:39:56,160 --> 00:40:08,860
so for example you can use any encoding

00:40:02,500 --> 00:40:10,750
food writing you templates by using

00:40:08,860 --> 00:40:18,390
another file a killing word putting

00:40:10,750 --> 00:40:21,220
magic comments on the top but I mean

00:40:18,390 --> 00:40:28,300
nobody's doing this in rails nobody is

00:40:21,220 --> 00:40:30,100
writing non-new tf8 templates so I guess

00:40:28,300 --> 00:40:33,760
I told this like two years ago in

00:40:30,100 --> 00:40:36,100
Ralph's gone but I'm planning to drop

00:40:33,760 --> 00:40:39,910
including multiple including support for

00:40:36,100 --> 00:40:43,660
action view actually there's the kind of

00:40:39,910 --> 00:40:46,440
kind of 70% done quiet patch in my

00:40:43,660 --> 00:40:52,360
machine and have so haven't created a

00:40:46,440 --> 00:40:58,920
like test testing catch sorry I'm just

00:40:52,360 --> 00:40:58,920
so lazy I'll do this after so anyway

00:41:01,140 --> 00:41:08,350
this library in access aboard

00:41:04,300 --> 00:41:14,260
I called X of the board multibyte since

00:41:08,350 --> 00:41:19,500
like ten years ago which includes a huge

00:41:14,260 --> 00:41:19,500
set of Unicode database in this file

00:41:24,940 --> 00:41:33,250
so since the encoding handling has been

00:41:28,610 --> 00:41:37,540
improved in Ruby like this and it has

00:41:33,250 --> 00:41:44,540
recently very important improvements in

00:41:37,540 --> 00:41:48,620
2.4 so by using these features we can

00:41:44,540 --> 00:41:50,720
totally remove these remove the active

00:41:48,620 --> 00:41:53,990
support version of multiple encoding

00:41:50,720 --> 00:41:56,540
supports from EXO support and use the

00:41:53,990 --> 00:42:02,480
Ruby core feature are getting arms or M

00:41:56,540 --> 00:42:04,970
sensing and instead actually we need to

00:42:02,480 --> 00:42:07,340
do this as soon as possible because the

00:42:04,970 --> 00:42:11,360
maintain of the maintainer of the exit

00:42:07,340 --> 00:42:15,080
supports multiplied has just retired

00:42:11,360 --> 00:42:16,850
remote solution so currently nobody is

00:42:15,080 --> 00:42:23,930
maintaining that Eclipse support

00:42:16,850 --> 00:42:26,990
multiple something so I'd like to

00:42:23,930 --> 00:42:30,050
propose to totally remove the

00:42:26,990 --> 00:42:33,560
web-accessible board multiply trim rails

00:42:30,050 --> 00:42:36,830
and the maybe in the next version we've

00:42:33,560 --> 00:42:40,490
already created a pull request it's

00:42:36,830 --> 00:42:44,570
still on the discussion but I hope to

00:42:40,490 --> 00:42:45,310
merge this into the next version okay

00:42:44,570 --> 00:42:49,880
next topic

00:42:45,310 --> 00:42:53,600
frozen strings so we've got so many like

00:42:49,880 --> 00:42:58,370
let me freeze some strings in rails kind

00:42:53,600 --> 00:43:00,950
of request in the past few years because

00:42:58,370 --> 00:43:03,490
it makes it kind of makes rels faster

00:43:00,950 --> 00:43:03,490
orbit

00:43:04,330 --> 00:43:11,470
so these are pros and cons of that

00:43:07,600 --> 00:43:14,900
freedom strings in the rails code base

00:43:11,470 --> 00:43:18,290
it really makes the code ugly for

00:43:14,900 --> 00:43:20,960
example like this but calls jump restart

00:43:18,290 --> 00:43:24,230
restart restart restart restart brief

00:43:20,960 --> 00:43:28,010
Dumfries for every string literals it's

00:43:24,230 --> 00:43:29,720
just really quick honestly I really

00:43:28,010 --> 00:43:30,460
really don't like I don't want to see

00:43:29,720 --> 00:43:37,010
this anymore

00:43:30,460 --> 00:43:40,340
so so I'm supposed to introduce a new

00:43:37,010 --> 00:43:43,000
magic comment feature in Ruby just

00:43:40,340 --> 00:43:47,060
because I didn't want to see that code

00:43:43,000 --> 00:43:50,030
to be more accurate there was already

00:43:47,060 --> 00:43:54,470
existing proposal adding them as a

00:43:50,030 --> 00:43:59,660
comment and I just locate a strong

00:43:54,470 --> 00:44:02,540
platform for this proposal and some

00:43:59,660 --> 00:44:05,450
maths accepted this proposal and so it

00:44:02,540 --> 00:44:08,690
wasn't introduced to Ruby 2 3 as a full

00:44:05,450 --> 00:44:13,580
feature this is the magic comments

00:44:08,690 --> 00:44:19,910
frozen string literal through also Ruby

00:44:13,580 --> 00:44:24,590
2 3 introduced a less known feature -

00:44:19,910 --> 00:44:26,600
operator free screen literal the -

00:44:24,590 --> 00:44:27,230
string literal you've never heard of

00:44:26,600 --> 00:44:30,620
this before

00:44:27,230 --> 00:44:34,070
I guess it's actually a little bit

00:44:30,620 --> 00:44:41,390
faster than calling doc freeze method on

00:44:34,070 --> 00:44:45,650
string maybe never had should be care

00:44:41,390 --> 00:44:48,380
about this but it's just a tip so anyway

00:44:45,650 --> 00:44:53,780
I would like to put the magic comment to

00:44:48,380 --> 00:44:57,110
all files in rails but it is a little

00:44:53,780 --> 00:44:59,210
bit too fast I mean really real or else

00:44:57,110 --> 00:45:03,080
fine because they'll file social

00:44:59,210 --> 00:45:07,390
supports a ruby that does not support

00:45:03,080 --> 00:45:11,540
Moe are frozen screaming medic comment

00:45:07,390 --> 00:45:13,900
so maybe we should wait until well 6 to

00:45:11,540 --> 00:45:13,900
do this

00:45:13,940 --> 00:45:26,249
now here's another topic concerning

00:45:16,729 --> 00:45:28,890
performance so l5 does not support will

00:45:26,249 --> 00:45:30,589
be younger than q1 just because we

00:45:28,890 --> 00:45:36,140
betrayed to introduce this feature

00:45:30,589 --> 00:45:36,140
repeatedly collects the symbol garbage

00:45:37,400 --> 00:45:50,759
and due to this of the sword before

00:45:45,299 --> 00:45:54,269
symbol GC Ralph was abusing like strings

00:45:50,759 --> 00:45:56,849
instead of symbols like it rails

00:45:54,269 --> 00:46:00,539
converts every symbols in the outside

00:45:56,849 --> 00:46:03,029
world to strings but I guess we don't

00:46:00,539 --> 00:46:06,920
have to do this in one this thing you

00:46:03,029 --> 00:46:11,460
symbol as it is everywhere in the valves

00:46:06,920 --> 00:46:14,160
in the process we could do this and we

00:46:11,460 --> 00:46:19,380
could reduce coverage strings by doing

00:46:14,160 --> 00:46:24,420
this I guess I just guess it's another

00:46:19,380 --> 00:46:27,479
idea making real simpler so here is

00:46:24,420 --> 00:46:30,420
another recent topic ruby is just

00:46:27,479 --> 00:46:32,390
unified six long and big mountains with

00:46:30,420 --> 00:46:37,859
Imperium

00:46:32,390 --> 00:46:42,059
so if your code still access is fixed

00:46:37,859 --> 00:46:46,049
number big nom it warns so if you find

00:46:42,059 --> 00:46:51,749
any ruby gem that warns just don't you

00:46:46,049 --> 00:46:54,779
stop using it and find an alternative ok

00:46:51,749 --> 00:46:57,509
finally its next topic I like to talk

00:46:54,779 --> 00:46:59,960
about something some methods that it

00:46:57,509 --> 00:47:05,609
recently implemented in xsf words and

00:46:59,960 --> 00:47:09,059
then pour it into Ruby like this object

00:47:05,609 --> 00:47:12,749
try called new liberal and ribbon or

00:47:09,059 --> 00:47:17,479
script here doc also get near it'll play

00:47:12,749 --> 00:47:21,390
bro um here's another minor methods

00:47:17,479 --> 00:47:25,600
numeric positive and negative

00:47:21,390 --> 00:47:33,100
or array the pens and pretend and as

00:47:25,600 --> 00:47:37,060
Nick stated the HH sold something like

00:47:33,100 --> 00:47:39,130
this on Twitter accessport can survey

00:47:37,060 --> 00:47:42,820
experimental lab for a future cool

00:47:39,130 --> 00:47:48,910
features in really ok on judges hold two

00:47:42,820 --> 00:47:52,840
more minutes here's another method fun

00:47:48,910 --> 00:47:55,600
erase Holliman innumerable fun so this

00:47:52,840 --> 00:47:58,210
case is a little bit complex there used

00:47:55,600 --> 00:48:02,860
to be a activesupport version of song

00:47:58,210 --> 00:48:07,290
and really kind of ported arrays from an

00:48:02,860 --> 00:48:11,590
innumerable phone but in a different

00:48:07,290 --> 00:48:14,680
spec so that the behavior is slightly

00:48:11,590 --> 00:48:18,850
different the first between the review

00:48:14,680 --> 00:48:22,440
version and rail surgeon but the ruby

00:48:18,850 --> 00:48:25,750
version is faster than the rails one so

00:48:22,440 --> 00:48:27,880
we want to call the GUI version as

00:48:25,750 --> 00:48:31,180
possible and then fall back to the

00:48:27,880 --> 00:48:38,500
browser is in if something's wrong with

00:48:31,180 --> 00:48:42,040
ruby version so here is the situation as

00:48:38,500 --> 00:48:48,670
I told you before I found out somehow

00:48:42,040 --> 00:48:52,120
done using refinements it kind of works

00:48:48,670 --> 00:48:55,060
but it's so complex that implementation

00:48:52,120 --> 00:48:58,480
is so complex maybe we can make the

00:48:55,060 --> 00:49:05,260
simpler when we dropped supports for the

00:48:58,480 --> 00:49:08,800
Ruby that doesn't have race home so

00:49:05,260 --> 00:49:11,620
anyway there is such difficulties for

00:49:08,800 --> 00:49:15,910
real scene to support multiple version

00:49:11,620 --> 00:49:19,480
of Ruby but further users it just can

00:49:15,910 --> 00:49:21,670
use the newest movie and use every new

00:49:19,480 --> 00:49:26,080
features with Ruby you can do that for

00:49:21,670 --> 00:49:31,099
your applications so

00:49:26,080 --> 00:49:33,740
like I showed ruby is getting better and

00:49:31,099 --> 00:49:36,550
better same day and introducing new

00:49:33,740 --> 00:49:40,210
features for every blue agent so I

00:49:36,550 --> 00:49:42,470
encourage you to upgrade your Ruby

00:49:40,210 --> 00:49:46,190
immediately to the newest one and use

00:49:42,470 --> 00:49:51,410
new features enjoy new features so this

00:49:46,190 --> 00:49:57,410
is the end of my talk will be evolving

00:49:51,410 --> 00:50:01,820
in rails also getting there and as a

00:49:57,410 --> 00:50:08,050
commuter of both I'm kind of doing some

00:50:01,820 --> 00:50:11,990
like works for the both team and there's

00:50:08,050 --> 00:50:14,510
so many more other things to do for both

00:50:11,990 --> 00:50:15,440
Ruby and rails so if you're interested

00:50:14,510 --> 00:50:18,410
in myself

00:50:15,440 --> 00:50:21,440
I encourage you to join us the

00:50:18,410 --> 00:50:25,670
development of these language and plugin

00:50:21,440 --> 00:50:34,460
and frameworks right that's it thank you

00:50:25,670 --> 00:50:37,339
very much so thank you for having me for

00:50:34,460 --> 00:50:42,440
this conference and see you hopefully at

00:50:37,339 --> 00:50:47,210
another conference at Ruby tightly thank

00:50:42,440 --> 00:50:52,640
you very much all right do have any

00:50:47,210 --> 00:50:57,820
questions we have time so we will take a

00:50:52,640 --> 00:50:57,820
few questions in anyone

00:50:58,740 --> 00:51:07,880
oh yeah yeah just opposed to mine

00:51:04,020 --> 00:51:13,680
actually my first question today

00:51:07,880 --> 00:51:15,690
actually it's a comment so I did I did a

00:51:13,680 --> 00:51:19,470
lot of benchmarks with keyword arguments

00:51:15,690 --> 00:51:21,119
in ruby 1.9 2.0 2.1 2.2 with the

00:51:19,470 --> 00:51:24,599
representable gem because we started

00:51:21,119 --> 00:51:26,880
switching from the options equal hash to

00:51:24,599 --> 00:51:29,339
the keyword argument and it was like

00:51:26,880 --> 00:51:32,010
four times slower than game ok because

00:51:29,339 --> 00:51:34,290
there was some improvement in 2.2 but it

00:51:32,010 --> 00:51:37,920
was so slow that we had to stay with me

00:51:34,290 --> 00:51:40,770
with the like hash thing because they

00:51:37,920 --> 00:51:43,859
used ruby hash in reaction

00:51:40,770 --> 00:51:47,849
implementation true yeah yeah yeah right

00:51:43,859 --> 00:51:50,310
so it's been improved since two three I

00:51:47,849 --> 00:51:53,810
guess dude zero to three it exactly is

00:51:50,310 --> 00:51:57,710
still slow in micro benchmark remind

00:51:53,810 --> 00:51:57,710
remind that slowness

00:52:01,020 --> 00:52:09,580
okay I just promised to run the

00:52:04,630 --> 00:52:19,510
benchmarks again with 2.3 2.4 okay I'll

00:52:09,580 --> 00:52:27,100
send you a pull request cool does anyone

00:52:19,510 --> 00:52:32,260
else have questions yeah you can push

00:52:27,100 --> 00:52:35,380
the mic so you mentioned with keyword

00:52:32,260 --> 00:52:39,960
arguments if you use a ruby keyword at

00:52:35,380 --> 00:52:42,880
the key you will create some unreachable

00:52:39,960 --> 00:52:44,710
variable there yes if you're running

00:52:42,880 --> 00:52:49,390
verbose mode will there be a warning

00:52:44,710 --> 00:52:53,050
from Ruby I don't think so okay thank

00:52:49,390 --> 00:52:54,670
you all right I think there are no more

00:52:53,050 --> 00:52:55,920
questions thank you very much Matsuda

00:52:54,670 --> 00:53:00,619
thank you very much

00:52:55,920 --> 00:53:00,619

YouTube URL: https://www.youtube.com/watch?v=RBV4Mg34DR0


