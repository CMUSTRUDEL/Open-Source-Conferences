Title: Spinning up micro-services using Ruby Kafka - RedDotRubyConf 2017
Publication date: 2020-01-22
Playlist: RedDotRuby 2017
Description: 
	Speaker: Ankita Gupta, Software Engineer, honestbee

As organisations get bigger, handling large application(s) gets harder - long release and test cycles, higher chances of a small change affecting other parts of the system. Micro-services solve some of these problems, albeit with their own set of challenges. Apache Kafka allows setting up event-driven architectures, wherein the concern of each service can be cleanly separated, and communication among services can happen asynchronously. The transition form a large rails application to smaller applications can be made more seamless with a few easy steps. I will be elaborating steps developers can take to make this process easier.

Speaker's Bio

Ankita is working as a full-stack software engineer at honestbee. In her free time, she works on her non-profit project Jugnuu, a low-cost, mobile-based English language solution for children.

Event Page: http://www.reddotrubyconf.com/

Produced by Engineers.SG

Help us caption & translate this video!

http://amara.org/v/8HYL/
Captions: 
	00:00:04,080 --> 00:00:10,809
good afternoon everyone um so I work at

00:00:08,410 --> 00:00:12,549
honest B and my talk flows in very well

00:00:10,809 --> 00:00:15,010
with what Florian just discussed about

00:00:12,549 --> 00:00:17,320
monolithic applications and oftentimes

00:00:15,010 --> 00:00:19,600
what you find is that as your

00:00:17,320 --> 00:00:21,250
application size grows bigger and the

00:00:19,600 --> 00:00:24,550
business requirements keep flowing in

00:00:21,250 --> 00:00:26,650
certain parts of the application you

00:00:24,550 --> 00:00:28,960
know they just get bulky and it becomes

00:00:26,650 --> 00:00:30,700
harder to change them for various

00:00:28,960 --> 00:00:32,619
reasons I mean a few if you don't have a

00:00:30,700 --> 00:00:33,879
sophisticated system like Shopify does

00:00:32,619 --> 00:00:36,070
and you know sometimes you have to wait

00:00:33,879 --> 00:00:39,280
longer for builds to run deployments

00:00:36,070 --> 00:00:40,660
become slower test me to be either you

00:00:39,280 --> 00:00:42,460
have to have a powerful set of test

00:00:40,660 --> 00:00:43,960
suite and if you don't if you don't feel

00:00:42,460 --> 00:00:46,300
confident about certain integration

00:00:43,960 --> 00:00:49,149
tests you know surely you have to have

00:00:46,300 --> 00:00:50,980
put in QA efforts and so on but

00:00:49,149 --> 00:00:53,260
obviously splitting up applications is

00:00:50,980 --> 00:00:55,410
not something it comes with additional

00:00:53,260 --> 00:00:58,329
responsibilities and there are certain

00:00:55,410 --> 00:01:00,309
cons you know or rather certain

00:00:58,329 --> 00:01:02,530
additional like headaches that it brings

00:01:00,309 --> 00:01:04,509
along so I don't want to get into

00:01:02,530 --> 00:01:06,399
whether you should or you shouldn't

00:01:04,509 --> 00:01:08,770
split it up because I think that's

00:01:06,399 --> 00:01:11,380
another topic altogether but should you

00:01:08,770 --> 00:01:13,060
choose to do it what are some of the

00:01:11,380 --> 00:01:14,709
good ways or what are some of the ways

00:01:13,060 --> 00:01:16,869
to think about it especially from a

00:01:14,709 --> 00:01:18,429
development point of view are not

00:01:16,869 --> 00:01:21,850
thinking about the deployment challenges

00:01:18,429 --> 00:01:24,639
involved in this process so I first like

00:01:21,850 --> 00:01:27,189
to show you this diagram and let's say

00:01:24,639 --> 00:01:29,799
you decide to split services into you

00:01:27,189 --> 00:01:31,389
know different you take a big service

00:01:29,799 --> 00:01:32,619
and you start taking out some of the you

00:01:31,389 --> 00:01:35,409
know some of the components of the

00:01:32,619 --> 00:01:37,179
service out there's various ways for

00:01:35,409 --> 00:01:39,249
these services to actually talk to each

00:01:37,179 --> 00:01:42,849
other and one of the common ways is HTTP

00:01:39,249 --> 00:01:46,270
now one of the issues with services

00:01:42,849 --> 00:01:48,969
talking via API is is that every single

00:01:46,270 --> 00:01:50,700
service is aware of the concern of the

00:01:48,969 --> 00:01:52,749
other service so let me give an example

00:01:50,700 --> 00:01:55,899
let's say you have a service that

00:01:52,749 --> 00:01:57,880
creates users and you also want to do

00:01:55,899 --> 00:01:59,979
this additional notification you know

00:01:57,880 --> 00:02:01,630
logic where every time a user is created

00:01:59,979 --> 00:02:04,329
maybe you want to send a notification

00:02:01,630 --> 00:02:06,270
for verification of the user or send out

00:02:04,329 --> 00:02:08,380
welcome emails and so on and

00:02:06,270 --> 00:02:10,840
notification itself is something that

00:02:08,380 --> 00:02:12,460
can be that is useful across your system

00:02:10,840 --> 00:02:14,500
not just for user so maybe you think

00:02:12,460 --> 00:02:15,960
about hey maybe I can separate out

00:02:14,500 --> 00:02:18,090
notifications in

00:02:15,960 --> 00:02:19,920
to a separate service now if you were

00:02:18,090 --> 00:02:22,770
making your to services contact each

00:02:19,920 --> 00:02:25,260
other why ap is you know the user

00:02:22,770 --> 00:02:27,150
creation service now has a contract that

00:02:25,260 --> 00:02:28,770
it needs to follow and it needs to know

00:02:27,150 --> 00:02:31,170
that at some point when the users

00:02:28,770 --> 00:02:33,740
created successfully it has to send out

00:02:31,170 --> 00:02:37,110
you know an API call to another service

00:02:33,740 --> 00:02:39,390
on the right you have a slightly

00:02:37,110 --> 00:02:41,760
different approach to this and you may

00:02:39,390 --> 00:02:43,920
choose to use one or the other it's not

00:02:41,760 --> 00:02:46,200
a complete black or white situation but

00:02:43,920 --> 00:02:47,610
the benefit of the second approach for

00:02:46,200 --> 00:02:50,880
at least the example that I just spoke

00:02:47,610 --> 00:02:53,250
about is that your user creation service

00:02:50,880 --> 00:02:55,440
only cares about creating a user and

00:02:53,250 --> 00:02:57,810
once it's done with that it pushes that

00:02:55,440 --> 00:02:59,190
it went out into a message bus and the

00:02:57,810 --> 00:03:01,260
services that actually care about

00:02:59,190 --> 00:03:03,840
anything you would use of creation

00:03:01,260 --> 00:03:05,850
decide to then pick it up pick up that

00:03:03,840 --> 00:03:08,160
event and do certain things like sending

00:03:05,850 --> 00:03:09,510
out notifications and so on so in a way

00:03:08,160 --> 00:03:11,790
you are reducing the coupling between

00:03:09,510 --> 00:03:14,100
your services and you're also separating

00:03:11,790 --> 00:03:17,160
the concerns of different services quite

00:03:14,100 --> 00:03:19,920
clearly when you use such a system so

00:03:17,160 --> 00:03:21,780
fundamentally it's this philosophy or

00:03:19,920 --> 00:03:24,390
fire-and-forget whereas the user

00:03:21,780 --> 00:03:25,890
creation service I fire a message and

00:03:24,390 --> 00:03:27,870
then I don't really care what happens

00:03:25,890 --> 00:03:29,790
and then another service picks it up and

00:03:27,870 --> 00:03:31,320
it processes it and once it's done

00:03:29,790 --> 00:03:33,150
processing it maybe prints an

00:03:31,320 --> 00:03:35,100
acknowledgement back and you know if a

00:03:33,150 --> 00:03:36,480
service cares enough about it they pick

00:03:35,100 --> 00:03:39,240
it up and they continue with it and

00:03:36,480 --> 00:03:40,980
that's how the flow continues now there

00:03:39,240 --> 00:03:42,480
is various tools to do it and once again

00:03:40,980 --> 00:03:44,790
I wouldn't want to get into the debate

00:03:42,480 --> 00:03:46,260
because everybody's use cases and

00:03:44,790 --> 00:03:47,760
situations may demand different tools

00:03:46,260 --> 00:03:50,850
but let's say you choose to do it using

00:03:47,760 --> 00:03:54,120
Kafka which is actually a highly

00:03:50,850 --> 00:03:56,430
scalable distributed - it provides a

00:03:54,120 --> 00:03:58,830
certain replications factor so you know

00:03:56,430 --> 00:04:02,910
it's highly reliable and so on so being

00:03:58,830 --> 00:04:04,200
used by a lot of organizations so for

00:04:02,910 --> 00:04:05,250
those of you who may not have worked

00:04:04,200 --> 00:04:08,670
with the some of the terms

00:04:05,250 --> 00:04:11,670
just before we get into more deeper

00:04:08,670 --> 00:04:13,790
example is a concept of a producer so

00:04:11,670 --> 00:04:16,410
you have producers that are constantly

00:04:13,790 --> 00:04:18,930
you know just publishing messages to the

00:04:16,410 --> 00:04:21,180
bus and they're doing it in a particular

00:04:18,930 --> 00:04:23,580
topic which is basically you know what

00:04:21,180 --> 00:04:25,800
what are if it's a user creation maybe

00:04:23,580 --> 00:04:27,480
you have a topic called user and so on

00:04:25,800 --> 00:04:28,920
right and these topics are then divided

00:04:27,480 --> 00:04:30,630
into partitions and the

00:04:28,920 --> 00:04:33,060
of splitting things into partitions that

00:04:30,630 --> 00:04:34,830
it can be it can exist across multiple

00:04:33,060 --> 00:04:36,600
machines so it makes it highly

00:04:34,830 --> 00:04:40,830
you know scalable and then you can also

00:04:36,600 --> 00:04:43,320
have your consumers subscribe to certain

00:04:40,830 --> 00:04:44,820
topics and read it simultaneously off a

00:04:43,320 --> 00:04:46,410
particular partition so you can have

00:04:44,820 --> 00:04:47,910
multiple consumer processes that are

00:04:46,410 --> 00:04:49,860
running and that are simultaneously

00:04:47,910 --> 00:04:52,050
reading it so it also gives you this

00:04:49,860 --> 00:04:54,060
whole notion of parallel processing of

00:04:52,050 --> 00:04:57,480
messages so that's what makes Kafka

00:04:54,060 --> 00:04:59,970
highly superior and a really good choice

00:04:57,480 --> 00:05:01,680
as a message bus so some of the key term

00:04:59,970 --> 00:05:03,930
sub producers not going too much into

00:05:01,680 --> 00:05:05,790
detail of you know all the other stuff

00:05:03,930 --> 00:05:08,010
that happens in the background but you

00:05:05,790 --> 00:05:10,320
have your producer consumer and your

00:05:08,010 --> 00:05:11,820
topic and so let's talk about the simple

00:05:10,320 --> 00:05:13,980
use case that I spoke about in the

00:05:11,820 --> 00:05:15,750
beginning which is user creation and

00:05:13,980 --> 00:05:17,970
maybe to sending something as simple as

00:05:15,750 --> 00:05:21,120
like a welcome message to the users

00:05:17,970 --> 00:05:22,770
saying hey thanks for signing up so the

00:05:21,120 --> 00:05:25,530
first thing you want is a producer and

00:05:22,770 --> 00:05:28,500
the producer is the one what we found

00:05:25,530 --> 00:05:30,900
out in our rails application context is

00:05:28,500 --> 00:05:33,960
that oftentimes the events that you want

00:05:30,900 --> 00:05:35,880
to send out are linked to database

00:05:33,960 --> 00:05:37,320
changes so it could be your insertion to

00:05:35,880 --> 00:05:39,510
your database so it could be an update

00:05:37,320 --> 00:05:40,860
your database and oftentimes these are

00:05:39,510 --> 00:05:42,720
the events that you want to push to the

00:05:40,860 --> 00:05:44,820
message bus there might be others but

00:05:42,720 --> 00:05:46,920
these actually composed majority of the

00:05:44,820 --> 00:05:50,130
events that we wanted at different

00:05:46,920 --> 00:05:53,130
applications to respond to and so one

00:05:50,130 --> 00:05:54,870
way to do that is to have code to send

00:05:53,130 --> 00:05:58,650
out messages spread across your

00:05:54,870 --> 00:06:00,660
application and that definitely brings

00:05:58,650 --> 00:06:02,370
around up you know a bit of duplication

00:06:00,660 --> 00:06:05,040
so then find you know you bring it in to

00:06:02,370 --> 00:06:06,810
callbacks in the models some of things

00:06:05,040 --> 00:06:09,450
you know when you when you allow

00:06:06,810 --> 00:06:12,210
different developers to just add logic

00:06:09,450 --> 00:06:14,550
to send messages to Kafka based on

00:06:12,210 --> 00:06:16,260
certain events is that to an extent you

00:06:14,550 --> 00:06:17,760
want to have certain contracts followed

00:06:16,260 --> 00:06:20,550
even when you publish things you Kafka

00:06:17,760 --> 00:06:22,650
so for example metadata right maybe you

00:06:20,550 --> 00:06:25,410
want to have a timestamp including every

00:06:22,650 --> 00:06:27,840
single one of your messages so where I'm

00:06:25,410 --> 00:06:29,910
driving at is that it does make sense to

00:06:27,840 --> 00:06:31,590
centralize the logic of sending the

00:06:29,910 --> 00:06:34,140
message itself and adding some of the

00:06:31,590 --> 00:06:36,060
metadata attributes the content and the

00:06:34,140 --> 00:06:37,920
topic of the message can be configurable

00:06:36,060 --> 00:06:40,380
but some of the other factors around it

00:06:37,920 --> 00:06:42,360
remains like a you know it's a similar

00:06:40,380 --> 00:06:45,270
logic across the base

00:06:42,360 --> 00:06:46,949
so what does it look like in practice so

00:06:45,270 --> 00:06:51,419
basically this is what we ended up doing

00:06:46,949 --> 00:06:52,590
we created a concern that a large let me

00:06:51,419 --> 00:06:54,900
just show it to you what it looks like

00:06:52,590 --> 00:06:57,569
so it is basically is something that can

00:06:54,900 --> 00:06:59,129
be included inside your model and you

00:06:57,569 --> 00:07:01,080
can start a simple published statement

00:06:59,129 --> 00:07:04,199
with arguments that are fundamentally

00:07:01,080 --> 00:07:08,189
Early's because you do have situations

00:07:04,199 --> 00:07:09,810
where you want to publish multiple times

00:07:08,189 --> 00:07:12,300
from within the same model so for

00:07:09,810 --> 00:07:14,099
example when the user is creation I want

00:07:12,300 --> 00:07:16,229
to send a message to a particular topic

00:07:14,099 --> 00:07:19,439
for user creation and I want to use an

00:07:16,229 --> 00:07:21,270
existing serializer that decides what

00:07:19,439 --> 00:07:23,610
the format of the message is and when

00:07:21,270 --> 00:07:26,009
the user is updated maybe I want to only

00:07:23,610 --> 00:07:27,599
send a message conditionally if the

00:07:26,009 --> 00:07:29,639
phone number of the user is updated and

00:07:27,599 --> 00:07:31,439
and at that point I want to have a

00:07:29,639 --> 00:07:33,840
different like a message blob which is

00:07:31,439 --> 00:07:36,029
you know coded insight based on the new

00:07:33,840 --> 00:07:37,919
attributes like the phone number and so

00:07:36,029 --> 00:07:40,139
on right so you can have an array of

00:07:37,919 --> 00:07:44,460
messages that get sent out for each of

00:07:40,139 --> 00:07:45,870
your for each of your models and that's

00:07:44,460 --> 00:07:48,599
how you have your first you know a

00:07:45,870 --> 00:07:51,270
simple producer where every single

00:07:48,599 --> 00:07:53,430
creation or update can be been publish

00:07:51,270 --> 00:07:55,349
to the message bus now as and when

00:07:53,430 --> 00:07:57,539
you're publishing messages at some point

00:07:55,349 --> 00:07:59,580
you do want to pick up those messages

00:07:57,539 --> 00:08:02,669
and process them and do something with

00:07:59,580 --> 00:08:04,830
them and that's where one of the

00:08:02,669 --> 00:08:06,779
libraries that we discovered is karateka

00:08:04,830 --> 00:08:09,210
which makes it really really easy to set

00:08:06,779 --> 00:08:10,620
up a very simple and clean structure

00:08:09,210 --> 00:08:13,620
across your application where you

00:08:10,620 --> 00:08:15,539
basically use you create a central

00:08:13,620 --> 00:08:18,120
configuration and you register a

00:08:15,539 --> 00:08:20,009
controller to a topic so you can create

00:08:18,120 --> 00:08:23,189
applications which are actually having

00:08:20,009 --> 00:08:25,529
consumers consuming from multiple topics

00:08:23,189 --> 00:08:27,750
or multi topic applications in a way and

00:08:25,529 --> 00:08:30,060
once you define this mapping so you can

00:08:27,750 --> 00:08:31,680
see that it's actually just quite simple

00:08:30,060 --> 00:08:34,409
configuration you can define your

00:08:31,680 --> 00:08:36,199
controller code and I mean it's

00:08:34,409 --> 00:08:39,599
advisable to keep your controller code

00:08:36,199 --> 00:08:40,979
lean so yeah so what I've done here in

00:08:39,599 --> 00:08:42,990
this case is that I've just created a

00:08:40,979 --> 00:08:47,640
separate service to send out SMS in this

00:08:42,990 --> 00:08:49,829
case and I'm just picking up the phone

00:08:47,640 --> 00:08:52,380
number of the user as well as the name

00:08:49,829 --> 00:08:52,710
of the user from the message that was

00:08:52,380 --> 00:08:55,380
sent

00:08:52,710 --> 00:08:58,890
the message bus and that's it and that's

00:08:55,380 --> 00:09:01,290
where your consumer logic is so I can

00:08:58,890 --> 00:09:03,570
show you a running example I've been

00:09:01,290 --> 00:09:06,030
advised not to do demos and short talks

00:09:03,570 --> 00:09:07,830
because you know whatever has to go

00:09:06,030 --> 00:09:09,570
wrong will go wrong but I'm just going

00:09:07,830 --> 00:09:11,280
to do it anyway because I just want to

00:09:09,570 --> 00:09:12,870
show it that it's actually really easy

00:09:11,280 --> 00:09:15,210
at least from a development point of

00:09:12,870 --> 00:09:17,220
view and you know the barrier to do it

00:09:15,210 --> 00:09:20,520
is really little just because we have a

00:09:17,220 --> 00:09:24,690
really good ecosystem he sings ubi to do

00:09:20,520 --> 00:09:26,970
this so so this is my code that I was

00:09:24,690 --> 00:09:29,490
just talking about and this is the this

00:09:26,970 --> 00:09:31,410
is the application that basically has

00:09:29,490 --> 00:09:33,270
the you know it's the same code that he

00:09:31,410 --> 00:09:35,450
just saw on the slides so a little bit

00:09:33,270 --> 00:09:39,060
redundant and then this is where your

00:09:35,450 --> 00:09:44,720
controller is which is exactly the same

00:09:39,060 --> 00:09:44,720
logic and when I go into my terminal

00:09:45,220 --> 00:09:48,330
[Applause]

00:09:50,690 --> 00:09:56,220
alright so what I have here is I have my

00:09:54,540 --> 00:09:57,990
real server running on one end and then

00:09:56,220 --> 00:10:00,900
I also on the right hand side in this

00:09:57,990 --> 00:10:02,310
particular window I have my carrasco

00:10:00,900 --> 00:10:04,050
server running so cut off by just a bit

00:10:02,310 --> 00:10:05,790
of background is that it takes the

00:10:04,050 --> 00:10:09,210
messages in the message bus and it

00:10:05,790 --> 00:10:10,740
pushes it into sidekick queues and then

00:10:09,210 --> 00:10:12,450
you have psychic workers that are

00:10:10,740 --> 00:10:14,430
basically picking those messages up and

00:10:12,450 --> 00:10:15,990
sending it to your controller and the

00:10:14,430 --> 00:10:18,780
controller then processes the message so

00:10:15,990 --> 00:10:20,430
the right hand side is the Karaka server

00:10:18,780 --> 00:10:21,960
and the left one is the crafter worker

00:10:20,430 --> 00:10:23,550
there's a few errors and that's all my

00:10:21,960 --> 00:10:25,710
local environment concentration it's not

00:10:23,550 --> 00:10:29,640
entirely normal but I haven't bothered

00:10:25,710 --> 00:10:31,410
fixing it and then this is my signup

00:10:29,640 --> 00:10:34,200
form right so this is a simple signup

00:10:31,410 --> 00:10:38,040
form and what I'm going to do right now

00:10:34,200 --> 00:10:40,440
is I'm just going to create my just add

00:10:38,040 --> 00:10:42,660
my phone number in and then add my

00:10:40,440 --> 00:10:48,600
honest be email and then just you know a

00:10:42,660 --> 00:10:50,940
password and here's my phone so I'm

00:10:48,600 --> 00:10:52,770
going to sign up and ideally I should

00:10:50,940 --> 00:10:54,570
get a message if all goes well so there

00:10:52,770 --> 00:10:57,740
should be some logs which basically says

00:10:54,570 --> 00:11:01,610
that it's done processing

00:10:57,740 --> 00:11:03,800
and just about any time now there so I

00:11:01,610 --> 00:11:08,270
got a messages now which basically is

00:11:03,800 --> 00:11:10,400
kinds of signing up so what I'm trying

00:11:08,270 --> 00:11:11,480
to say is that from a development point

00:11:10,400 --> 00:11:13,520
of view it's easy

00:11:11,480 --> 00:11:15,200
there are deployment challenges but for

00:11:13,520 --> 00:11:17,420
now let's just leave back to the DevOps

00:11:15,200 --> 00:11:19,130
to take care of and let's just focus on

00:11:17,420 --> 00:11:19,860
developing it thank you everyone

00:11:19,130 --> 00:11:26,149
Oh

00:11:19,860 --> 00:11:26,149

YouTube URL: https://www.youtube.com/watch?v=jGoVOJl7vZ4


