Title: Keynote: Refactoring Humpty Dumpty back together again  - RedDotRubyConf 2017
Publication date: 2020-01-22
Playlist: RedDotRuby 2017
Description: 
	Speaker: Emily Stolfo

Event Page: http://www.reddotrubyconf.com/

Produced by Engineers.SG

Help us caption & translate this video!

http://amara.org/v/8HYO/
Captions: 
	00:00:03,530 --> 00:00:11,510
I don't know if it's just me but seems

00:00:09,290 --> 00:00:12,830
like there are far fewer people here

00:00:11,510 --> 00:00:14,840
this morning because there were

00:00:12,830 --> 00:00:16,180
yesterday maybe has everybody had too

00:00:14,840 --> 00:00:19,850
much fun last night

00:00:16,180 --> 00:00:23,840
hi my name is Emily stole pho I work for

00:00:19,850 --> 00:00:26,539
MongoDB if you've ever used Ruby with

00:00:23,840 --> 00:00:29,300
MongoDB you've probably used a couple

00:00:26,539 --> 00:00:33,400
lines of my code through the gems

00:00:29,300 --> 00:00:36,590
 beasts on visa extension origin of

00:00:33,400 --> 00:00:38,149
different versions of

00:00:36,590 --> 00:00:40,820
Kerberos if you ever feel like doing

00:00:38,149 --> 00:00:42,739
authentication using Kerberos I think

00:00:40,820 --> 00:00:46,550
all the downloads I have an item or me

00:00:42,739 --> 00:00:49,100
just testing it missing environment so

00:00:46,550 --> 00:00:51,289
I'm coming from Berlin but I come from

00:00:49,100 --> 00:00:54,170
New York I've been in Berlin now for

00:00:51,289 --> 00:00:55,670
three years and I've been working there

00:00:54,170 --> 00:00:58,219
because originally I went there to work

00:00:55,670 --> 00:01:01,219
with the other person who built the Ruby

00:00:58,219 --> 00:01:02,989
driver and before I start I want to

00:01:01,219 --> 00:01:05,390
thank the organizers for having me I've

00:01:02,989 --> 00:01:09,260
never been to Singapore before I arrived

00:01:05,390 --> 00:01:11,510
a week ago and I think I've sweat my

00:01:09,260 --> 00:01:13,070
weight in water every single day it's

00:01:11,510 --> 00:01:13,970
kind of like Bikram yoga I feel really

00:01:13,070 --> 00:01:17,330
good at the end of the day really

00:01:13,970 --> 00:01:19,130
cleanse and I brought home a Yogi's for

00:01:17,330 --> 00:01:22,729
the organizers but I also brought

00:01:19,130 --> 00:01:24,979
omiyage for you too thank you for coming

00:01:22,729 --> 00:01:27,979
here at 10:00 a.m. on the second

00:01:24,979 --> 00:01:29,659
conference they brought so I can't bring

00:01:27,979 --> 00:01:32,650
something for everybody but I brought

00:01:29,659 --> 00:01:34,909
these amazing accusal mustard from

00:01:32,650 --> 00:01:37,430
Germany and anybody's Germans

00:01:34,909 --> 00:01:40,130
disqualified from this competition by

00:01:37,430 --> 00:01:43,280
the way so these are little mustards

00:01:40,130 --> 00:01:45,860
from a little man who has a mustard shop

00:01:43,280 --> 00:01:49,280
next to my apartment and I've hidden

00:01:45,860 --> 00:01:51,020
three Sandi Metz quotes in my talk and

00:01:49,280 --> 00:01:55,189
if you can email me with one of those

00:01:51,020 --> 00:01:56,180
three quotes Emily at MongoDB I'll give

00:01:55,189 --> 00:01:58,640
you a little mustard

00:01:56,180 --> 00:02:00,979
so the first three people basically to

00:01:58,640 --> 00:02:02,180
trick you into paying attention and also

00:02:00,979 --> 00:02:05,560
so they can feel someone for a quote

00:02:02,180 --> 00:02:08,930
stop feeling guilty huh

00:02:05,560 --> 00:02:13,790
[Laughter]

00:02:08,930 --> 00:02:16,340
and they're all different types so okay

00:02:13,790 --> 00:02:19,820
so this talk is called refactoring

00:02:16,340 --> 00:02:21,620
Humpty Dumpty back together again so

00:02:19,820 --> 00:02:23,990
because it's 10 a.m. and there's no

00:02:21,620 --> 00:02:26,380
better time to talk about physics I'm

00:02:23,990 --> 00:02:29,720
going to start with the second law of

00:02:26,380 --> 00:02:31,550
thermodynamics specifically the second

00:02:29,720 --> 00:02:33,620
law of thermodynamics accounts for the

00:02:31,550 --> 00:02:37,880
direction of natural processes we've all

00:02:33,620 --> 00:02:40,250
heard of this right ok no well good

00:02:37,880 --> 00:02:42,260
thing I'm telling you about it the law

00:02:40,250 --> 00:02:44,570
says that it's highly unlikely though

00:02:42,260 --> 00:02:46,820
not impossible to restore our system to

00:02:44,570 --> 00:02:50,300
a previous state it accounts for the

00:02:46,820 --> 00:02:52,280
asymmetry between past and future in

00:02:50,300 --> 00:02:54,380
modern times this law is defined in

00:02:52,280 --> 00:02:57,230
terms of entropy we've all heard of

00:02:54,380 --> 00:02:59,510
entropy right yeah more so than the

00:02:57,230 --> 00:03:01,430
second law of thermodynamics it's kind

00:02:59,510 --> 00:03:03,590
of abstract but it basically is the

00:03:01,430 --> 00:03:05,140
measure of the number of ways in which a

00:03:03,590 --> 00:03:07,550
system can be arranged

00:03:05,140 --> 00:03:09,470
measuring entropy is taking to be the

00:03:07,550 --> 00:03:11,120
measure of disorder of a system the

00:03:09,470 --> 00:03:13,519
higher the entropy the higher the

00:03:11,120 --> 00:03:15,440
disorder and usually it's depicted like

00:03:13,519 --> 00:03:17,630
this where it requires a certain amount

00:03:15,440 --> 00:03:19,459
of work to take something that's in a

00:03:17,630 --> 00:03:24,050
high level of disorder and make it

00:03:19,459 --> 00:03:26,390
orderly or restore order so once upon a

00:03:24,050 --> 00:03:29,750
time there was this egg named Humpty

00:03:26,390 --> 00:03:32,120
Dumpty and his story was told in this

00:03:29,750 --> 00:03:34,220
nursery rhyme Humpty Dumpty sat on a

00:03:32,120 --> 00:03:35,959
wall Humpty Dumpty had a great fall all

00:03:34,220 --> 00:03:38,269
the king's horses and all the king's

00:03:35,959 --> 00:03:40,900
women couldn't put Humpty Dumpty back

00:03:38,269 --> 00:03:43,040
together again has anybody heard of this

00:03:40,900 --> 00:03:46,190
but a lot of British people have heard

00:03:43,040 --> 00:03:48,230
of this so this particular Nursery Rhyme

00:03:46,190 --> 00:03:50,000
is the most well-known Nursery Rhyme in

00:03:48,230 --> 00:03:51,680
the English language and it references

00:03:50,000 --> 00:03:53,269
to it can be found in many works of

00:03:51,680 --> 00:03:54,709
literature and frequently in popular

00:03:53,269 --> 00:03:56,209
culture I think there's a character in

00:03:54,709 --> 00:03:59,900
Shrek from some key dump scene one of

00:03:56,209 --> 00:04:03,799
the Shrek like number 15 movies that

00:03:59,900 --> 00:04:05,900
they've had and but the first recorded

00:04:03,799 --> 00:04:08,390
version dates from the late 18th century

00:04:05,900 --> 00:04:10,160
England like many traditional stories or

00:04:08,390 --> 00:04:12,769
poems it's pretty much impossible to

00:04:10,160 --> 00:04:16,910
pinpoint what the original version was

00:04:12,769 --> 00:04:19,209
what Humpty Dumpty actually was or to

00:04:16,910 --> 00:04:21,769
take the poem litter

00:04:19,209 --> 00:04:23,930
for example we have other versions of

00:04:21,769 --> 00:04:26,750
the poem this is the actual first

00:04:23,930 --> 00:04:29,180
recorded version published in 1797 but

00:04:26,750 --> 00:04:31,580
we have no idea if this existed way

00:04:29,180 --> 00:04:34,340
before 1797 or people just learned how

00:04:31,580 --> 00:04:36,050
to write in 1797 Humpty Dumpty sat on a

00:04:34,340 --> 00:04:37,789
wall Humpty Dumpty had a great fall

00:04:36,050 --> 00:04:39,650
forescore men and four score more

00:04:37,789 --> 00:04:41,710
couldn't make Humpty Dumpty what he was

00:04:39,650 --> 00:04:44,630
before

00:04:41,710 --> 00:04:46,910
so Humpty Dumpty there are clearly many

00:04:44,630 --> 00:04:49,190
other versions throughout popular

00:04:46,910 --> 00:04:51,440
culture throughout history but we can't

00:04:49,190 --> 00:04:54,410
ignore is that Humpty Dumpty is always

00:04:51,440 --> 00:04:56,300
the pictured as an egg despite the fact

00:04:54,410 --> 00:04:58,310
that there's nothing indicating in the

00:04:56,300 --> 00:05:00,169
poem that he actually was an egg my

00:04:58,310 --> 00:05:02,419
favorite is that woman dressed as an egg

00:05:00,169 --> 00:05:05,479
was really chic sitting on a wall in the

00:05:02,419 --> 00:05:06,979
corner it's likely the rhyme was

00:05:05,479 --> 00:05:08,509
originally a riddle that could have

00:05:06,979 --> 00:05:11,479
exploited a well-known meaning of the

00:05:08,509 --> 00:05:12,770
term Humpty Dumpty at the time for

00:05:11,479 --> 00:05:14,930
example the Oxford English Dictionary

00:05:12,770 --> 00:05:17,000
says that the term Humpty Dumpty refers

00:05:14,930 --> 00:05:18,979
to a drink of brandy boiled with air ale

00:05:17,000 --> 00:05:20,750
and I don't know about you but when I

00:05:18,979 --> 00:05:22,970
drink my brandy boiled with air al

00:05:20,750 --> 00:05:24,289
something magical happens and it starts

00:05:22,970 --> 00:05:26,270
seeing eggs

00:05:24,289 --> 00:05:28,789
perhaps the rhyme was equivalent to the

00:05:26,270 --> 00:05:30,650
17th century's don't drink and drive

00:05:28,789 --> 00:05:33,729
propaganda warned you about sitting on

00:05:30,650 --> 00:05:36,020
wall as a few drink but still why an egg

00:05:33,729 --> 00:05:38,570
perhaps it was meant to convey that

00:05:36,020 --> 00:05:40,340
whatever it was that sat on that wall it

00:05:38,570 --> 00:05:44,180
was extremely fragile and virtually

00:05:40,340 --> 00:05:45,620
impossible to put back together so as I

00:05:44,180 --> 00:05:47,270
said there have been many other series

00:05:45,620 --> 00:05:50,060
many other versions and what are the

00:05:47,270 --> 00:05:54,349
ones that I find kind of funny or absurd

00:05:50,060 --> 00:05:57,020
is that was put forth by this scholar I

00:05:54,349 --> 00:05:58,550
don't know what his scholar of but I

00:05:57,020 --> 00:06:01,130
guess he spent his time trying to figure

00:05:58,550 --> 00:06:03,199
out what Humpty Dumpty was in the 50s

00:06:01,130 --> 00:06:05,270
and he said that Humpty Dumpty was in

00:06:03,199 --> 00:06:07,759
fact a tortoise siege engine which is

00:06:05,270 --> 00:06:09,530
this kind of machine battering ram that

00:06:07,759 --> 00:06:12,590
was invented by the Romans and used

00:06:09,530 --> 00:06:15,020
unsuccessfully in the English Civil War

00:06:12,590 --> 00:06:16,789
in the sixteen hundreds and apparently

00:06:15,020 --> 00:06:18,229
was used and the thing broke without

00:06:16,789 --> 00:06:20,240
breaking the thing it was trying to

00:06:18,229 --> 00:06:22,610
break and so they wrote a poem about it

00:06:20,240 --> 00:06:25,370
I don't know about you that sounds

00:06:22,610 --> 00:06:28,010
really silly to me I think I think the

00:06:25,370 --> 00:06:29,599
idea of an egg better this theory was

00:06:28,010 --> 00:06:31,289
eventually determined to be totally

00:06:29,599 --> 00:06:33,029
ridiculous but it

00:06:31,289 --> 00:06:35,219
idea was incorporated into a children's

00:06:33,029 --> 00:06:36,719
opera called all the king's men so it

00:06:35,219 --> 00:06:42,240
just is true according to popular

00:06:36,719 --> 00:06:44,580
culture as the other series so whichever

00:06:42,240 --> 00:06:47,189
form Humpty Dumpty takes what can't be

00:06:44,580 --> 00:06:48,990
ignored is that he's a fragile guy he's

00:06:47,189 --> 00:06:51,210
actually become a sort of symbol for the

00:06:48,990 --> 00:06:52,529
second law of thermodynamics Humpty

00:06:51,210 --> 00:06:55,409
Dumpty fell from the wall and

00:06:52,529 --> 00:06:57,330
subsequently ended up in pieces as we've

00:06:55,409 --> 00:06:57,839
discussed the law says that it's highly

00:06:57,330 --> 00:07:00,779
unlikely

00:06:57,839 --> 00:07:03,509
so not impossible to restore him to his

00:07:00,779 --> 00:07:07,169
exact state before the Falls and this is

00:07:03,509 --> 00:07:08,849
what the poem also emphasizes as we also

00:07:07,169 --> 00:07:10,649
also discuss the second mouth

00:07:08,849 --> 00:07:12,809
thermodynamics modern definition is in

00:07:10,649 --> 00:07:14,369
terms of entropy the measure of the

00:07:12,809 --> 00:07:16,589
number of ways in which an isolated

00:07:14,369 --> 00:07:18,629
system can be arranged specifically

00:07:16,589 --> 00:07:21,209
assuming for simplicity that each of the

00:07:18,629 --> 00:07:23,669
microscopic configurations is equally

00:07:21,209 --> 00:07:24,959
probable entropy of the system is the

00:07:23,669 --> 00:07:26,339
natural algorithm of a number of

00:07:24,959 --> 00:07:28,649
configurations multiplied by the

00:07:26,339 --> 00:07:30,599
Boltzmann constant KB this is

00:07:28,649 --> 00:07:33,479
theoretically how we can measure entropy

00:07:30,599 --> 00:07:34,949
but nothing ever is like you can't have

00:07:33,479 --> 00:07:36,719
a system where all the arrangements are

00:07:34,949 --> 00:07:40,769
equally probable so this is highly

00:07:36,719 --> 00:07:43,050
theoretical we can also find some

00:07:40,769 --> 00:07:44,129
examples of things that were broken and

00:07:43,050 --> 00:07:46,919
that had been returned to their original

00:07:44,129 --> 00:07:49,319
States with help the Beauvais Cathedral

00:07:46,919 --> 00:07:51,389
which is located in Vevey France 60

00:07:49,319 --> 00:07:53,969
kilometers north of Paris is a symbol of

00:07:51,389 --> 00:07:55,649
the ambition of gothic architects the

00:07:53,969 --> 00:07:58,559
pet project of a wealthy and disaffected

00:07:55,649 --> 00:07:59,999
Bishop of nun tui the construction of

00:07:58,559 --> 00:08:01,889
the cathedral may have been partly

00:07:59,999 --> 00:08:04,080
intended as an act of defiance against

00:08:01,889 --> 00:08:05,729
the French crown so basically the bishop

00:08:04,080 --> 00:08:07,529
was a punk and he wanted to prove that

00:08:05,729 --> 00:08:08,849
he was better and more powerful than the

00:08:07,529 --> 00:08:10,409
crown by building this massive building

00:08:08,849 --> 00:08:13,199
and you'll see that it was a total

00:08:10,409 --> 00:08:15,209
disaster the whole project was extremely

00:08:13,199 --> 00:08:17,550
unrealistic and the cathedral was never

00:08:15,209 --> 00:08:19,740
finished construction was started in

00:08:17,550 --> 00:08:21,779
1225 and it was meant to be the greatest

00:08:19,740 --> 00:08:23,219
church in the kingdom but centuries of

00:08:21,779 --> 00:08:25,979
construction were marked by structural

00:08:23,219 --> 00:08:27,360
problems and collapses if the nave which

00:08:25,979 --> 00:08:28,769
is the main body of the church the

00:08:27,360 --> 00:08:30,330
church built cathedrals are normally

00:08:28,769 --> 00:08:32,459
shaped like a cross so they need is the

00:08:30,330 --> 00:08:34,500
main body and all that was actually

00:08:32,459 --> 00:08:37,259
constructed as a tiny portion at the top

00:08:34,500 --> 00:08:39,389
like the head of the Cross so the nave

00:08:37,259 --> 00:08:40,800
has been constructed the plan for the

00:08:39,389 --> 00:08:42,889
Cathedral were such that it would have

00:08:40,800 --> 00:08:45,030
been the tallest building of its time

00:08:42,889 --> 00:08:46,860
the foundations in order to

00:08:45,030 --> 00:08:48,600
support this massive structure where in

00:08:46,860 --> 00:08:51,990
some places 10 meters deep

00:08:48,600 --> 00:08:53,790
even so in 1284 part of the choir class

00:08:51,990 --> 00:08:55,710
just like the front of the cathedral

00:08:53,790 --> 00:08:57,270
that was actually constructed then the

00:08:55,710 --> 00:08:58,500
transepts actually don't know what part

00:08:57,270 --> 00:09:01,140
of the cathedral that is I forgot to put

00:08:58,500 --> 00:09:03,300
it up this other part of the cathedral

00:09:01,140 --> 00:09:05,280
was started 150 years later and was

00:09:03,300 --> 00:09:07,170
completed in 1548 then shortly

00:09:05,280 --> 00:09:09,000
afterwards aspire and half of the bell

00:09:07,170 --> 00:09:10,950
tower collapse on Ascension Day during a

00:09:09,000 --> 00:09:13,380
service and apparently nobody was hurt

00:09:10,950 --> 00:09:15,210
in 1600 construction the knees so that

00:09:13,380 --> 00:09:17,730
main body of the cathedral began again

00:09:15,210 --> 00:09:20,940
but only the first arch was erected and

00:09:17,730 --> 00:09:24,630
they gave up in the 1990s because this

00:09:20,940 --> 00:09:26,850
became such a similar look into like the

00:09:24,630 --> 00:09:29,310
buildings that that exist today from

00:09:26,850 --> 00:09:31,800
this time that were great and hearing

00:09:29,310 --> 00:09:33,270
feats by definition were great

00:09:31,800 --> 00:09:34,920
engineering feats because they're still

00:09:33,270 --> 00:09:36,900
around today but this one's a look into

00:09:34,920 --> 00:09:40,770
how these projects can be started and

00:09:36,900 --> 00:09:44,280
fail because of ineptitude or over

00:09:40,770 --> 00:09:45,630
ambitious people so in the 1990s like we

00:09:44,280 --> 00:09:48,410
really want to preserve this building

00:09:45,630 --> 00:09:51,600
and in 1990s it was determined to be so

00:09:48,410 --> 00:09:53,280
immensely unstable because the pillars

00:09:51,600 --> 00:09:55,740
had been measured to have moved 30

00:09:53,280 --> 00:09:57,180
centimeters and they wanted to do

00:09:55,740 --> 00:10:00,330
something about it so this building

00:09:57,180 --> 00:10:01,980
could still stand so why is it so

00:10:00,330 --> 00:10:04,290
unstable why's it so weak and why was

00:10:01,980 --> 00:10:06,930
this project so difficult to be realized

00:10:04,290 --> 00:10:09,150
the building is a perfect storm of poor

00:10:06,930 --> 00:10:11,460
architectural plans different architects

00:10:09,150 --> 00:10:13,890
hacking on the same building no real

00:10:11,460 --> 00:10:15,480
ownership of the projects architects

00:10:13,890 --> 00:10:17,250
coming and going over the centuries

00:10:15,480 --> 00:10:20,070
which by the way means they have much

00:10:17,250 --> 00:10:22,440
different styles and the fierce skål

00:10:20,070 --> 00:10:23,700
winds wind would call force winds that

00:10:22,440 --> 00:10:25,830
come from the English Channel that are

00:10:23,700 --> 00:10:27,750
less than 100 miles away so basically

00:10:25,830 --> 00:10:30,390
the cathedral might as well have been

00:10:27,750 --> 00:10:32,310
made out of paper mache it's on the

00:10:30,390 --> 00:10:35,370
World Monuments fund list of 100 most

00:10:32,310 --> 00:10:36,900
endangered sites but today the Cathedral

00:10:35,370 --> 00:10:38,730
is more stable than it has ever been

00:10:36,900 --> 00:10:42,300
thanks to a team of researchers from

00:10:38,730 --> 00:10:44,700
Columbia University so what did they do

00:10:42,300 --> 00:10:46,290
they did what you would expect someone

00:10:44,700 --> 00:10:49,260
to do who needs to repair a weak

00:10:46,290 --> 00:10:51,960
structure they study the structure so in

00:10:49,260 --> 00:10:53,850
2001 a team of Columbia University from

00:10:51,960 --> 00:10:55,950
Communiversity went to Beauvais to

00:10:53,850 --> 00:10:58,410
acquire 3d range scans and imagery of

00:10:55,950 --> 00:11:00,690
the Cathedral the goal was to create

00:10:58,410 --> 00:11:03,079
3d model of the cathedral to assist

00:11:00,690 --> 00:11:06,180
historic preservation efforts including

00:11:03,079 --> 00:11:07,410
structural analysis of the Cathedral so

00:11:06,180 --> 00:11:09,629
for 10 days they roamed around the

00:11:07,410 --> 00:11:11,310
Cathedral using instruments to record

00:11:09,629 --> 00:11:13,410
digital images of its facade and

00:11:11,310 --> 00:11:15,660
interior by bouncing laser beams off its

00:11:13,410 --> 00:11:17,879
surface they returned to New York City

00:11:15,660 --> 00:11:19,350
with 75 of these scans each one

00:11:17,879 --> 00:11:22,800
containing more than a million data

00:11:19,350 --> 00:11:25,680
points and remember this is 2001 so 16

00:11:22,800 --> 00:11:27,029
years ago and at the time like we could

00:11:25,680 --> 00:11:29,220
probably do that with our iPhones now

00:11:27,029 --> 00:11:32,069
but at the time this was the largest

00:11:29,220 --> 00:11:34,129
structure to ever be scanned with that

00:11:32,069 --> 00:11:37,189
yields are the most amount of data and

00:11:34,129 --> 00:11:40,649
this is a combination of all those scans

00:11:37,189 --> 00:11:42,629
from the data that they collected so

00:11:40,649 --> 00:11:45,029
here's the flyover of the Cathedral this

00:11:42,629 --> 00:11:46,680
is what the image that they were able to

00:11:45,029 --> 00:11:48,990
collect looks like and as you can see

00:11:46,680 --> 00:11:51,990
it's only a small portion of what the

00:11:48,990 --> 00:11:54,329
original Cathedral was meant to be but

00:11:51,990 --> 00:11:57,569
the structure is really large and

00:11:54,329 --> 00:11:59,040
complex and has a lot of cavity it's not

00:11:57,569 --> 00:12:00,899
just like a block you know like there's

00:11:59,040 --> 00:12:03,569
a lot going on in this Cathedral and

00:12:00,899 --> 00:12:05,220
then this is the inside so I did my

00:12:03,569 --> 00:12:06,600
undergraduate education in art history

00:12:05,220 --> 00:12:09,300
in computer science and actually took

00:12:06,600 --> 00:12:11,399
this professors class and he showed us

00:12:09,300 --> 00:12:13,050
this and I was like super excited

00:12:11,399 --> 00:12:15,269
because I was like this is why I'm doing

00:12:13,050 --> 00:12:17,939
both of these fields you can do things

00:12:15,269 --> 00:12:22,470
like this and preserve cultural heritage

00:12:17,939 --> 00:12:24,269
and so um that just as an aside the the

00:12:22,470 --> 00:12:26,130
reason this Cathedral was meant to be so

00:12:24,269 --> 00:12:28,980
large or like what motivated that was

00:12:26,130 --> 00:12:31,139
Gothic architecture part of its

00:12:28,980 --> 00:12:33,000
principle was too especially with

00:12:31,139 --> 00:12:34,860
cathedrals was to elongate the

00:12:33,000 --> 00:12:36,269
structures they felt closer to God we

00:12:34,860 --> 00:12:39,139
had this sense of being in this infinite

00:12:36,269 --> 00:12:41,339
space and so that's why the bishop was

00:12:39,139 --> 00:12:42,689
particularly hubris in doing this

00:12:41,339 --> 00:12:44,430
because he was trying to bring himself

00:12:42,689 --> 00:12:48,509
too close to God he was flying too close

00:12:44,430 --> 00:12:50,160
to the Sun because of the model that the

00:12:48,509 --> 00:12:52,439
team of researchers was able to create

00:12:50,160 --> 00:12:54,569
the support beams have been able to be

00:12:52,439 --> 00:12:56,309
installed in the right places restoring

00:12:54,569 --> 00:12:58,199
stability physics exceed role and

00:12:56,309 --> 00:12:59,790
allowing visitors to appreciate the

00:12:58,199 --> 00:13:02,040
ambition and engineering of the graphic

00:12:59,790 --> 00:13:05,399
builders 700 years ago and also for

00:13:02,040 --> 00:13:07,889
academics to study how this project was

00:13:05,399 --> 00:13:09,630
started and failed so what do the

00:13:07,889 --> 00:13:11,350
Beauvais Cathedral and humpty-dumpty

00:13:09,630 --> 00:13:13,120
have in common

00:13:11,350 --> 00:13:15,280
both were in need of being put back

00:13:13,120 --> 00:13:18,100
together for stability to be

00:13:15,280 --> 00:13:19,660
re-established so this system in

00:13:18,100 --> 00:13:22,030
particular has been restored to better

00:13:19,660 --> 00:13:24,960
order in stability because as we said

00:13:22,030 --> 00:13:27,520
it's improbable not impossible

00:13:24,960 --> 00:13:28,660
furthermore what if we are an interested

00:13:27,520 --> 00:13:31,120
in restoring the system to its original

00:13:28,660 --> 00:13:32,890
state what if we want to alter it

00:13:31,120 --> 00:13:33,340
arranging the pieces to make it even

00:13:32,890 --> 00:13:35,530
better

00:13:33,340 --> 00:13:37,390
what is breaking something allows you to

00:13:35,530 --> 00:13:39,490
rearrange the pieces so that can be even

00:13:37,390 --> 00:13:42,640
more structurally sound does this sound

00:13:39,490 --> 00:13:44,440
familiar to you well it certainly sounds

00:13:42,640 --> 00:13:47,050
familiar to me because otherwise we

00:13:44,440 --> 00:13:48,340
wouldn't be doing this talk and it's

00:13:47,050 --> 00:13:52,450
something I've had to think a lot about

00:13:48,340 --> 00:13:54,370
lately particularly with so

00:13:52,450 --> 00:13:56,890
recently I had to study the structure of

00:13:54,370 --> 00:13:59,050
this project break it a little and then

00:13:56,890 --> 00:14:01,630
rearrange the pieces that was inherently

00:13:59,050 --> 00:14:03,430
stronger I'd even argue that I decide

00:14:01,630 --> 00:14:05,680
the second law of thermodynamics and the

00:14:03,430 --> 00:14:09,940
entropy has been decreased in this

00:14:05,680 --> 00:14:13,330
system who would disagree that their

00:14:09,940 --> 00:14:14,860
projects entropy increases over time so

00:14:13,330 --> 00:14:18,720
who thinks their projects entropy

00:14:14,860 --> 00:14:21,910
decreases over time with no work right

00:14:18,720 --> 00:14:25,330
so I maintain active records replacement

00:14:21,910 --> 00:14:27,610
for using MongoDB with rails it's called

00:14:25,330 --> 00:14:29,710
Mon goid it's actually 10 years old

00:14:27,610 --> 00:14:33,010
which is basically 700 years in

00:14:29,710 --> 00:14:35,770
Cathedral years the first version of mon

00:14:33,010 --> 00:14:37,840
good version zero point 2 point 5 was

00:14:35,770 --> 00:14:40,870
released by whom someone who's now my

00:14:37,840 --> 00:14:43,510
colleague during Jordan it's the

00:14:40,870 --> 00:14:45,850
original author and by the way on the

00:14:43,510 --> 00:14:48,940
original documentation site of Mon droit

00:14:45,850 --> 00:14:53,530
he said long guard was conceived one

00:14:48,940 --> 00:14:56,380
late night in February in somewhere in

00:14:53,530 --> 00:14:58,090
Florida after five glasses of whiskey

00:14:56,380 --> 00:14:59,950
and looks like pretty much to seeing

00:14:58,090 --> 00:15:03,010
looks like how Mon going was built just

00:14:59,950 --> 00:15:05,470
like someone on whiskey version I mean I

00:15:03,010 --> 00:15:06,780
loved her and he's amazing but we're

00:15:05,470 --> 00:15:08,890
talking about during 10 years ago

00:15:06,780 --> 00:15:11,410
version zero point two point five was

00:15:08,890 --> 00:15:13,870
released by Durham on October 1st 2009

00:15:11,410 --> 00:15:17,020
version zero point two point six was

00:15:13,870 --> 00:15:20,290
released on October 1st 2009 version

00:15:17,020 --> 00:15:23,420
0.8.1 was released on October 1st 2009

00:15:20,290 --> 00:15:25,490
this sounds like any Cathedral Xena

00:15:23,420 --> 00:15:27,050
the MongoDB server version at that time

00:15:25,490 --> 00:15:28,970
was less than one point 2.0 I actually

00:15:27,050 --> 00:15:31,490
don't know what version it was because

00:15:28,970 --> 00:15:35,450
in our project matching project tracking

00:15:31,490 --> 00:15:38,450
tool the earliest version recorded is

00:15:35,450 --> 00:15:40,550
post mongoloids first release and so for

00:15:38,450 --> 00:15:42,800
reference MongoDB server version the

00:15:40,550 --> 00:15:44,930
current version is 3.4 so then get one

00:15:42,800 --> 00:15:46,190
point 2.0 it was still in this phase

00:15:44,930 --> 00:15:50,210
where we had this feature that it

00:15:46,190 --> 00:15:51,710
dropped your data anyway

00:15:50,210 --> 00:15:53,420
monka continued to be developed by

00:15:51,710 --> 00:15:54,650
Durand and also by the way I'm on gonna

00:15:53,420 --> 00:15:56,600
be doesn't jacquard data I don't know if

00:15:54,650 --> 00:15:59,380
you've like or anything in the last five

00:15:56,600 --> 00:16:01,580
years but we've solved that problem

00:15:59,380 --> 00:16:03,110
anyway Mondrian continually developed by

00:16:01,580 --> 00:16:05,390
Duren who is working at Sound Cloud in

00:16:03,110 --> 00:16:07,400
Berlin in his free time it was a true

00:16:05,390 --> 00:16:09,740
open source project for many years and

00:16:07,400 --> 00:16:11,270
that many people contributed many pull

00:16:09,740 --> 00:16:12,620
requests are open and merged many

00:16:11,270 --> 00:16:14,990
discussions were had in the github

00:16:12,620 --> 00:16:17,060
issues list many people solve

00:16:14,990 --> 00:16:19,310
approximate problems but nobody has a

00:16:17,060 --> 00:16:21,290
big picture it was built when the Hmong

00:16:19,310 --> 00:16:22,040
observer was quite simple compared to

00:16:21,290 --> 00:16:23,720
what it is now

00:16:22,040 --> 00:16:29,690
there weren't many features or even

00:16:23,720 --> 00:16:32,690
replica sets at the time so the history

00:16:29,690 --> 00:16:35,810
of this this project and the complexity

00:16:32,690 --> 00:16:37,190
of the ecosystem built around and

00:16:35,810 --> 00:16:39,650
how it fit into rails and how to use the

00:16:37,190 --> 00:16:41,570
driver is really complex and it might

00:16:39,650 --> 00:16:44,090
sound familiar to you if you're working

00:16:41,570 --> 00:16:46,040
on open source the first version of Mon

00:16:44,090 --> 00:16:47,990
right so like following along with his

00:16:46,040 --> 00:16:49,670
diagram anything gray is not developed

00:16:47,990 --> 00:16:52,940
by among way to be Inc the company that

00:16:49,670 --> 00:16:55,370
I work for anything in color is so the

00:16:52,940 --> 00:16:56,930
first versions of I'd use among me

00:16:55,370 --> 00:16:58,730
to be inks Ruby driver the 1x series

00:16:56,930 --> 00:17:01,370
this is the driver that I was hired to

00:16:58,730 --> 00:17:02,960
work on five years ago at the time I

00:17:01,370 --> 00:17:04,819
joined the company during had just built

00:17:02,960 --> 00:17:06,260
his own driver called moped because the

00:17:04,819 --> 00:17:08,120
official monami driver hadn't developed

00:17:06,260 --> 00:17:09,230
some features who was hoping to have you

00:17:08,120 --> 00:17:10,910
know sent back and forth and some

00:17:09,230 --> 00:17:12,410
friction so he was because the server

00:17:10,910 --> 00:17:13,370
was kind of simple at that time he was

00:17:12,410 --> 00:17:15,260
like okay I'm just going to build my own

00:17:13,370 --> 00:17:23,240
driver so I don't need to like have this

00:17:15,260 --> 00:17:26,560
extra level of of diplomacy to to get

00:17:23,240 --> 00:17:30,560
changes to move forward with ma annoyed

00:17:26,560 --> 00:17:32,450
so at that time amongst the the Ruby

00:17:30,560 --> 00:17:34,080
offering if you're using MongoDB with

00:17:32,450 --> 00:17:36,419
rails was

00:17:34,080 --> 00:17:41,279
entirely was developed entirely outside

00:17:36,419 --> 00:17:42,870
of MongoDB Inc and wasn't developed by

00:17:41,279 --> 00:17:43,169
anybody who's actually paid money to do

00:17:42,870 --> 00:17:45,390
it

00:17:43,169 --> 00:17:46,860
so at MongoDB at the time we knew how

00:17:45,390 --> 00:17:48,960
important monrad was to the Ruby

00:17:46,860 --> 00:17:50,669
community basically if anybody wanted to

00:17:48,960 --> 00:17:52,710
use moong would be with rails went

00:17:50,669 --> 00:17:54,299
through Mon going and basically anybody

00:17:52,710 --> 00:17:56,070
wanting to program in Ruby was

00:17:54,299 --> 00:17:58,140
unfortunately as someone said yesterday

00:17:56,070 --> 00:18:01,200
using rails so by the transitive

00:17:58,140 --> 00:18:03,840
property anybody wanting to use mom mom

00:18:01,200 --> 00:18:05,850
gonna be what Ruby with MongoDB would

00:18:03,840 --> 00:18:07,230
have to go through any code that wasn't

00:18:05,850 --> 00:18:10,080
actually developed by the company that

00:18:07,230 --> 00:18:11,760
make sense the company was growing as

00:18:10,080 --> 00:18:15,330
were the features of MongoDB and the

00:18:11,760 --> 00:18:17,039
sophistication opacity of behavior so

00:18:15,330 --> 00:18:18,690
it's really difficult for someone in the

00:18:17,039 --> 00:18:20,159
open-source community to keep up with

00:18:18,690 --> 00:18:23,190
what the server was doing because they

00:18:20,159 --> 00:18:25,740
didn't have that insight then I have

00:18:23,190 --> 00:18:26,940
written for the company where they're

00:18:25,740 --> 00:18:28,289
like inside our knowledge where you know

00:18:26,940 --> 00:18:30,000
what the row vamp is you know what the

00:18:28,289 --> 00:18:31,799
internal issues are what the priorities

00:18:30,000 --> 00:18:33,179
are you can walk over to our server

00:18:31,799 --> 00:18:35,820
engineer's desk and ask them about

00:18:33,179 --> 00:18:38,429
something specifically because MongoDB

00:18:35,820 --> 00:18:40,080
has a lot of quirks a lot of between

00:18:38,429 --> 00:18:44,010
server versions the implementation of

00:18:40,080 --> 00:18:45,870
certain features can differ wildly so

00:18:44,010 --> 00:18:47,549
sure enough at that time on Boyd's issue

00:18:45,870 --> 00:18:49,830
a screw and the projects are to lose

00:18:47,549 --> 00:18:52,049
traction and Trust in the community

00:18:49,830 --> 00:18:55,139
because it just couldn't react fast

00:18:52,049 --> 00:18:56,970
enough in 2014

00:18:55,139 --> 00:18:58,679
the one next driver need to rewrite and

00:18:56,970 --> 00:19:00,330
so we started a great opportunity to

00:18:58,679 --> 00:19:01,950
approach turn and say hey do you want to

00:19:00,330 --> 00:19:03,330
come work at MongoDB we can build a new

00:19:01,950 --> 00:19:04,980
driver and then we can't mon going to

00:19:03,330 --> 00:19:08,220
use that new driver a number taking

00:19:04,980 --> 00:19:12,029
offset burden from your side because we

00:19:08,220 --> 00:19:14,490
can maintain the driver so he was up for

00:19:12,029 --> 00:19:15,720
it in 2014 he joined us and he and I

00:19:14,490 --> 00:19:17,990
work together to build a new driver

00:19:15,720 --> 00:19:21,779
which is kind of my way to get to Berlin

00:19:17,990 --> 00:19:25,679
and it was the gem version 2.0 and

00:19:21,779 --> 00:19:27,240
then in doing that we were able to we

00:19:25,679 --> 00:19:29,130
decided that we bring Eden in

00:19:27,240 --> 00:19:32,039
house as well so then became an

00:19:29,130 --> 00:19:33,510
official project since then Turin has

00:19:32,039 --> 00:19:35,070
moved on to work on another team at

00:19:33,510 --> 00:19:37,380
MongoDB competence if you're familiar

00:19:35,070 --> 00:19:40,370
with our products there it's a GUI for

00:19:37,380 --> 00:19:43,049
navigating your data in collections and

00:19:40,370 --> 00:19:45,690
I've taken over and the driver and

00:19:43,049 --> 00:19:47,850
just a little aside just and like show

00:19:45,690 --> 00:19:50,039
you how this is actually simplified

00:19:47,850 --> 00:19:52,950
version of the story there's also a gem

00:19:50,039 --> 00:19:55,559
called origin which is the DSL query

00:19:52,950 --> 00:19:58,830
language for querying MongoDB that was a

00:19:55,559 --> 00:20:00,480
separate gem but in versions 6 oh I

00:19:58,830 --> 00:20:01,860
brought it into the codebase because I

00:20:00,480 --> 00:20:04,350
realized not a lot of people were using

00:20:01,860 --> 00:20:06,870
it independently so that's

00:20:04,350 --> 00:20:08,130
super-complicated also so like for

00:20:06,870 --> 00:20:10,470
example if I need to fix a bug in

00:20:08,130 --> 00:20:12,030
language 6 I can do it in Mongoloids

00:20:10,470 --> 00:20:13,350
codebase and then if I want it back porn

00:20:12,030 --> 00:20:18,780
it I have to go and release a separate

00:20:13,350 --> 00:20:20,460
version of origins so now that

00:20:18,780 --> 00:20:22,409
and the driver are back together again

00:20:20,460 --> 00:20:23,970
they're getting along quite well except

00:20:22,409 --> 00:20:27,510
for the occasional bickering over who

00:20:23,970 --> 00:20:30,210
does the dishes the work is done the

00:20:27,510 --> 00:20:32,280
relationships going well but a lot of

00:20:30,210 --> 00:20:35,340
baggage has been brought back into the

00:20:32,280 --> 00:20:36,929
relationship by Mon droit so at first I

00:20:35,340 --> 00:20:39,690
was excited about all this everything

00:20:36,929 --> 00:20:41,100
seemed so clean and centralized and I

00:20:39,690 --> 00:20:42,450
was excited to start working on one

00:20:41,100 --> 00:20:44,309
going in the driver and that turn would

00:20:42,450 --> 00:20:46,559
be moving on to another team so I'd have

00:20:44,309 --> 00:20:48,950
more responsibility but I quickly

00:20:46,559 --> 00:20:52,440
realized that I inherited a ton of work

00:20:48,950 --> 00:20:54,090
namely there were 100 99 problems and

00:20:52,440 --> 00:20:55,980
they were all issues we

00:20:54,090 --> 00:20:59,010
imported the github issues list from

00:20:55,980 --> 00:21:01,140
Hanoi for Hmong going into JIRA it was a

00:20:59,010 --> 00:21:03,210
disaster I almost had a heart attack

00:21:01,140 --> 00:21:04,500
there are a ton of issues and I didn't

00:21:03,210 --> 00:21:07,799
think I would ever get through them I

00:21:04,500 --> 00:21:09,630
think there actually were 199 a lot was

00:21:07,799 --> 00:21:12,000
broken the project with some cases the

00:21:09,630 --> 00:21:13,110
community was fragmented how could I

00:21:12,000 --> 00:21:15,179
bring the project back into good

00:21:13,110 --> 00:21:17,520
standing with its users restore trust

00:21:15,179 --> 00:21:19,860
and communication how could restore its

00:21:17,520 --> 00:21:22,020
structure and reduce entropy hopefully

00:21:19,860 --> 00:21:24,240
restoring entropy to its original state

00:21:22,020 --> 00:21:27,059
was it possible to make an even

00:21:24,240 --> 00:21:28,470
better than it was before so I did what

00:21:27,059 --> 00:21:30,510
the king's men and women tried to do for

00:21:28,470 --> 00:21:32,039
Humpty Dumpty I did what friends the

00:21:30,510 --> 00:21:33,809
world's monuments fund the Columbia

00:21:32,039 --> 00:21:36,360
computer science team tried to do I

00:21:33,809 --> 00:21:39,600
study the structure identify the pieces

00:21:36,360 --> 00:21:41,280
the weaknesses and I tried and I kind of

00:21:39,600 --> 00:21:43,250
succeeded to put mine going back

00:21:41,280 --> 00:21:46,559
together again

00:21:43,250 --> 00:21:47,850
so how did I do this I'm going to spend

00:21:46,559 --> 00:21:48,870
a little bit of time talking to you

00:21:47,850 --> 00:21:50,970
about how you can take an existing

00:21:48,870 --> 00:21:54,030
project because I I'm sure you all have

00:21:50,970 --> 00:21:55,289
them who are in dire need of a refresh

00:21:54,030 --> 00:21:57,690
and put them back together

00:21:55,289 --> 00:22:00,419
there are many presentations and books

00:21:57,690 --> 00:22:01,040
on how to refactor the problem is solved

00:22:00,419 --> 00:22:03,260
and

00:22:01,040 --> 00:22:04,460
no need to reinvent the wheel or retell

00:22:03,260 --> 00:22:05,480
you a lot of the things that you can

00:22:04,460 --> 00:22:08,780
just look up or watch other

00:22:05,480 --> 00:22:10,610
presentations on every type type of code

00:22:08,780 --> 00:22:12,830
smell is identified and recipes are

00:22:10,610 --> 00:22:14,870
given for refactoring the definitions

00:22:12,830 --> 00:22:16,520
can be overwhelming but who can really

00:22:14,870 --> 00:22:17,870
apply them perfectly like I read the

00:22:16,520 --> 00:22:19,730
definitions too and I would like

00:22:17,870 --> 00:22:21,760
identify some of those things in my code

00:22:19,730 --> 00:22:23,300
basis they couldn't kind of like this

00:22:21,760 --> 00:22:25,100
equation on the second law of

00:22:23,300 --> 00:22:26,600
thermodynamics it's a guide for how to

00:22:25,100 --> 00:22:29,450
understand the concept but it can't

00:22:26,600 --> 00:22:31,040
actually be applied in practice so I'm

00:22:29,450 --> 00:22:32,480
going to tell you much more human story

00:22:31,040 --> 00:22:33,500
of how a refractor and and put

00:22:32,480 --> 00:22:35,450
it back together again

00:22:33,500 --> 00:22:38,000
because it's a very real project with

00:22:35,450 --> 00:22:39,890
very real problems I'm going to share

00:22:38,000 --> 00:22:43,910
with you some tricks and things that I

00:22:39,890 --> 00:22:45,560
did that I applied to my process we look

00:22:43,910 --> 00:22:47,150
at how I studied the structure then

00:22:45,560 --> 00:22:49,610
we'll talk about refactoring and there's

00:22:47,150 --> 00:22:51,920
definitely a way to refactor and many

00:22:49,610 --> 00:22:53,270
better ways to refactor finally we'll

00:22:51,920 --> 00:22:55,040
talk about how to avoid landing a

00:22:53,270 --> 00:22:57,650
project slipped in into this date in the

00:22:55,040 --> 00:22:59,240
future so regardless of whether you're

00:22:57,650 --> 00:23:00,980
an open source project maintainer I

00:22:59,240 --> 00:23:02,630
think you'll find that a lot of what I'm

00:23:00,980 --> 00:23:04,670
about to say can be applied to your own

00:23:02,630 --> 00:23:06,260
projects raw maintainer x' of some

00:23:04,670 --> 00:23:08,990
legacy codebase some pre-existing

00:23:06,260 --> 00:23:10,790
project I bet you agree that the entropy

00:23:08,990 --> 00:23:14,300
and disorder of your zero code base

00:23:10,790 --> 00:23:16,550
increases over time but I do think that

00:23:14,300 --> 00:23:18,860
we can pause repair and restructure our

00:23:16,550 --> 00:23:20,930
code bases to actually be stronger than

00:23:18,860 --> 00:23:22,460
they were before we started again the

00:23:20,930 --> 00:23:24,680
second law of thermodynamics is it's

00:23:22,460 --> 00:23:26,120
improbable but not impossible to restore

00:23:24,680 --> 00:23:28,160
system to its original state

00:23:26,120 --> 00:23:30,130
we're engineers and we put our minds to

00:23:28,160 --> 00:23:33,170
something we can make it happen

00:23:30,130 --> 00:23:34,940
so one great structural analysis I spent

00:23:33,170 --> 00:23:36,950
a while dressing bugs in mon guide

00:23:34,940 --> 00:23:38,600
one-by-one going through those 199

00:23:36,950 --> 00:23:40,340
problems because I didn't have a good

00:23:38,600 --> 00:23:42,050
sense of how everything worked and at a

00:23:40,340 --> 00:23:44,900
time that turns Altman goid mentor

00:23:42,050 --> 00:23:48,920
program was really popular so he did

00:23:44,900 --> 00:23:52,040
things like yeah I don't wanted fascist

00:23:48,920 --> 00:23:54,110
sorry we can talk about that later I

00:23:52,040 --> 00:23:57,140
mean as I said during its ten years ago

00:23:54,110 --> 00:24:00,410
so I glad he doesn't really watch

00:23:57,140 --> 00:24:02,090
conference talks that much but I knew in

00:24:00,410 --> 00:24:03,470
the back of my mind I had to build up a

00:24:02,090 --> 00:24:05,600
familiarity with the structure of the

00:24:03,470 --> 00:24:07,310
code base so I took notes in the code in

00:24:05,600 --> 00:24:09,200
a notebook like literally with a pencil

00:24:07,310 --> 00:24:11,600
on how everything worked together

00:24:09,200 --> 00:24:13,670
I drew diagrams like an architect I step

00:24:11,600 --> 00:24:14,419
through the code with pride and wrote

00:24:13,670 --> 00:24:16,489
down the call stack

00:24:14,419 --> 00:24:18,320
as I said before many solutions were

00:24:16,489 --> 00:24:20,480
applied that approximately solve

00:24:18,320 --> 00:24:22,279
problems but because not many people had

00:24:20,480 --> 00:24:24,230
the full picture so like typical case

00:24:22,279 --> 00:24:26,659
obvious cases of pull requests fixing

00:24:24,230 --> 00:24:28,039
something very specific it's really

00:24:26,659 --> 00:24:29,600
important to have a mental model of how

00:24:28,039 --> 00:24:32,389
a code-based works in order to make

00:24:29,600 --> 00:24:34,340
high-quality changes luckily Dern also

00:24:32,389 --> 00:24:36,590
had my back in this case as I said he

00:24:34,340 --> 00:24:38,720
was still at the company so me trying to

00:24:36,590 --> 00:24:40,850
figure out why something was changed

00:24:38,720 --> 00:24:42,830
with it wasn't good enough to look at

00:24:40,850 --> 00:24:44,480
get blame I could look at get blame and

00:24:42,830 --> 00:24:46,340
say like hey Gen why did you do this and

00:24:44,480 --> 00:24:48,080
who'd give me this like whole story and

00:24:46,340 --> 00:24:51,080
luckily had a good memory and a lot of

00:24:48,080 --> 00:24:52,940
stories and so that was I recognized

00:24:51,080 --> 00:24:55,429
that was something that not everybody

00:24:52,940 --> 00:24:56,779
has like that resource but I was also

00:24:55,429 --> 00:25:01,070
really good for helping me understand

00:24:56,779 --> 00:25:03,379
the history of this project so the like

00:25:01,070 --> 00:25:06,529
one thing that that made this reflection

00:25:03,379 --> 00:25:08,690
team possible to me was grouping your

00:25:06,529 --> 00:25:12,109
issues into category my issues into

00:25:08,690 --> 00:25:13,850
categories if you categorize the issues

00:25:12,109 --> 00:25:15,830
you can see where the hot spots are and

00:25:13,850 --> 00:25:17,779
focus on them when rebuilding repairing

00:25:15,830 --> 00:25:19,460
the structure so 3d models of a

00:25:17,779 --> 00:25:22,009
cathedral was necessary for the same

00:25:19,460 --> 00:25:23,629
exact reason in particular with I

00:25:22,009 --> 00:25:25,070
realized most of our issues had to do

00:25:23,629 --> 00:25:27,259
with the behavior of related objects so

00:25:25,070 --> 00:25:29,539
I created an epoch in JIRA to track all

00:25:27,259 --> 00:25:31,519
those issues related to relations bugs

00:25:29,539 --> 00:25:34,279
and so when I say relations object it's

00:25:31,519 --> 00:25:37,070
when you define a model and you say like

00:25:34,279 --> 00:25:38,929
a book has one off two author there's a

00:25:37,070 --> 00:25:40,970
macro that runs and it creates this

00:25:38,929 --> 00:25:43,489
object called relation and it saves it

00:25:40,970 --> 00:25:47,419
as into this global variable on the book

00:25:43,489 --> 00:25:49,279
class and that object itself is what

00:25:47,419 --> 00:25:51,619
caused a lot of problems and I tried to

00:25:49,279 --> 00:25:53,899
cluster and categorize my issues around

00:25:51,619 --> 00:25:56,359
that one thing so that when I focus on

00:25:53,899 --> 00:26:00,559
refactoring it I knew what its needs

00:25:56,359 --> 00:26:01,879
were stepping through major code paths

00:26:00,559 --> 00:26:03,859
and taking notes that's really important

00:26:01,879 --> 00:26:04,999
also choose chrome pads that you don't

00:26:03,859 --> 00:26:06,710
understand and step through them with

00:26:04,999 --> 00:26:08,749
pry I know they're scary and it's really

00:26:06,710 --> 00:26:10,909
really tedious but it's really helpful

00:26:08,749 --> 00:26:12,169
to do that and as I said there's a lot

00:26:10,909 --> 00:26:14,330
of meta programming so that means it

00:26:12,169 --> 00:26:15,859
really opaque really difficult but I

00:26:14,330 --> 00:26:17,570
took notes in the code with with

00:26:15,859 --> 00:26:19,340
comments as well if something was for

00:26:17,570 --> 00:26:20,119
example an attribute accessor in one

00:26:19,340 --> 00:26:22,730
file

00:26:20,119 --> 00:26:24,889
language and it's structure is made up

00:26:22,730 --> 00:26:26,119
of behaviors and different modules so

00:26:24,889 --> 00:26:27,799
there were like a lot of different files

00:26:26,119 --> 00:26:28,250
that define a lot of different things

00:26:27,799 --> 00:26:30,530
about this

00:26:28,250 --> 00:26:32,750
one document class and so I would I

00:26:30,530 --> 00:26:35,840
pepper the codebase with a lot of notes

00:26:32,750 --> 00:26:37,520
so so if I was following code Beth and

00:26:35,840 --> 00:26:39,080
then I saw a variable I would say like

00:26:37,520 --> 00:26:41,360
this is defined in X module and that

00:26:39,080 --> 00:26:46,460
really helped me to understand the shape

00:26:41,360 --> 00:26:48,020
of the code base and then lastly draw

00:26:46,460 --> 00:26:49,910
diagrams yourself like literally with a

00:26:48,020 --> 00:26:52,130
pencil like an architect it was really

00:26:49,910 --> 00:26:55,280
helpful to do this as well and seeing

00:26:52,130 --> 00:26:57,110
the structure visually helps you I mean

00:26:55,280 --> 00:26:58,460
again by coming back to art history it

00:26:57,110 --> 00:26:59,810
sounds like a sculpture you really like

00:26:58,460 --> 00:27:03,050
there is a shape to your codebase and

00:26:59,810 --> 00:27:03,860
you want to understand it so after I did

00:27:03,050 --> 00:27:06,350
all of that

00:27:03,860 --> 00:27:07,250
what did identified was a weakness so

00:27:06,350 --> 00:27:10,070
I'm going to give you a concrete example

00:27:07,250 --> 00:27:12,350
like making that relations issue and I

00:27:10,070 --> 00:27:14,630
built that epoch around like more

00:27:12,350 --> 00:27:16,700
concrete so you can follow along with it

00:27:14,630 --> 00:27:18,290
and see how I focused on one element of

00:27:16,700 --> 00:27:20,600
the codebase that was the weakest and I

00:27:18,290 --> 00:27:23,180
spent on which I spent them with some

00:27:20,600 --> 00:27:24,620
refactoring after IRA factored this one

00:27:23,180 --> 00:27:26,690
thing I was able to close about 40

00:27:24,620 --> 00:27:29,000
issues which at the time that I was

00:27:26,690 --> 00:27:30,130
doing this was 50% of our issues so I

00:27:29,000 --> 00:27:32,390
was really happy about that

00:27:30,130 --> 00:27:34,430
identified that we had one object that

00:27:32,390 --> 00:27:37,790
contained all the information about the

00:27:34,430 --> 00:27:40,190
relationship between two models in

00:27:37,790 --> 00:27:42,230
I'd it was called metadata and it was

00:27:40,190 --> 00:27:44,450
inherited from a hash so essentially was

00:27:42,230 --> 00:27:46,220
a hash it is basically like the laziest

00:27:44,450 --> 00:27:48,140
class you could ever have because it's

00:27:46,220 --> 00:27:51,560
just keys and values with no specific

00:27:48,140 --> 00:27:53,720
logic or behavior so like a nightmare it

00:27:51,560 --> 00:27:55,160
was an object created when the model was

00:27:53,720 --> 00:27:57,200
loaded so like when you write that

00:27:55,160 --> 00:27:58,550
actual release relation in the model

00:27:57,200 --> 00:28:02,690
class it would create this metadata

00:27:58,550 --> 00:28:04,670
class which was just a hash so like

00:28:02,690 --> 00:28:06,440
writing books has one author would use a

00:28:04,670 --> 00:28:07,850
macro to create this metadata object

00:28:06,440 --> 00:28:09,650
sticking onto the book class and that's

00:28:07,850 --> 00:28:12,500
what it used throughout all of the code

00:28:09,650 --> 00:28:14,690
to determine what behavior an instance

00:28:12,500 --> 00:28:18,650
of a book should have or even the class

00:28:14,690 --> 00:28:20,210
itself if you're querying or whatever so

00:28:18,650 --> 00:28:22,100
in code small terms this is a classic

00:28:20,210 --> 00:28:23,300
bloated smell this class knew and did

00:28:22,100 --> 00:28:24,860
way too much I'm sure there are tons of

00:28:23,300 --> 00:28:28,970
other code small terms you can apply to

00:28:24,860 --> 00:28:30,830
this as well so this is a mandated class

00:28:28,970 --> 00:28:34,220
definition does anybody notice something

00:28:30,830 --> 00:28:36,500
alarming about this comment the Grand

00:28:34,220 --> 00:28:38,179
Poobah of information about any relation

00:28:36,500 --> 00:28:40,460
in this class it contains everything you

00:28:38,179 --> 00:28:42,290
could ever possibly want to know

00:28:40,460 --> 00:28:45,410
and by the way possibly was spelled

00:28:42,290 --> 00:28:46,790
wrong which goes back to what I was

00:28:45,410 --> 00:28:52,820
saying about this being a whiskey

00:28:46,790 --> 00:28:55,790
project port niranda as you can see um

00:28:52,820 --> 00:28:57,170
it was basically like an Eightball like

00:28:55,790 --> 00:28:59,440
you just asking anything and can give

00:28:57,170 --> 00:29:02,360
you the answer and it's totally random

00:28:59,440 --> 00:29:04,640
writing simple code is important but

00:29:02,360 --> 00:29:06,110
let's define simplicity simplicity mean

00:29:04,640 --> 00:29:08,420
that we should have the least number of

00:29:06,110 --> 00:29:10,160
classes we should doesn't mean that we

00:29:08,420 --> 00:29:12,110
should savor one basic object over

00:29:10,160 --> 00:29:15,260
multiple smaller different objects is

00:29:12,110 --> 00:29:16,850
having one metadata object saving all

00:29:15,260 --> 00:29:19,790
information about every type of relation

00:29:16,850 --> 00:29:21,680
the simplest and thus best design design

00:29:19,790 --> 00:29:24,170
decisions I understand do involve

00:29:21,680 --> 00:29:26,150
trade-offs we are so frequently chance

00:29:24,170 --> 00:29:28,010
DRO I don't repeat yourself but

00:29:26,150 --> 00:29:29,480
sometimes we need to introduce a little

00:29:28,010 --> 00:29:32,030
bit of duplication in order to have a

00:29:29,480 --> 00:29:34,940
simpler design preferred duplication

00:29:32,030 --> 00:29:36,830
over the wrong abstraction I'll give

00:29:34,940 --> 00:29:38,750
some examples of how the metadata object

00:29:36,830 --> 00:29:41,090
was used so you'll see how it became

00:29:38,750 --> 00:29:42,800
obvious what rearranging had to be done

00:29:41,090 --> 00:29:44,840
even without understanding anything

00:29:42,800 --> 00:29:48,020
about I think you'll you'll

00:29:44,840 --> 00:29:50,900
recognize what patterns should that kind

00:29:48,020 --> 00:29:52,220
of come out of this code and what needed

00:29:50,900 --> 00:29:55,160
to be done to restore structural

00:29:52,220 --> 00:29:56,420
stability to Mongoloids codebase but

00:29:55,160 --> 00:29:58,550
before I do that I just want to say

00:29:56,420 --> 00:30:01,550
briefly that ed has two main types

00:29:58,550 --> 00:30:02,300
of relations because MongoDB is the

00:30:01,550 --> 00:30:04,760
document database

00:30:02,300 --> 00:30:06,620
it has reference relations which is what

00:30:04,760 --> 00:30:09,620
you would recognize from active record

00:30:06,620 --> 00:30:11,630
so it's straight up like reference

00:30:09,620 --> 00:30:14,360
relations or IDs foreign keys saved on

00:30:11,630 --> 00:30:16,250
objects peasant belongs to many is has

00:30:14,360 --> 00:30:17,600
money through but there's no join table

00:30:16,250 --> 00:30:18,920
because ma going to be has a feel that

00:30:17,600 --> 00:30:20,600
can be an array so it's just saving a

00:30:18,920 --> 00:30:23,600
raise of the related objects on either

00:30:20,600 --> 00:30:25,220
end and it's kept in sync and then

00:30:23,600 --> 00:30:26,480
embedded which is a pretty

00:30:25,220 --> 00:30:28,190
self-explanatory you can have embedded

00:30:26,480 --> 00:30:30,430
documents among going to be so you have

00:30:28,190 --> 00:30:33,380
these types which implements that

00:30:30,430 --> 00:30:35,570
relationship between embedded and parent

00:30:33,380 --> 00:30:37,790
documents so this is one example

00:30:35,570 --> 00:30:39,350
instance method it's called the term in

00:30:37,790 --> 00:30:41,200
foreign key and actually what I was

00:30:39,350 --> 00:30:43,130
reviewing my slides this morning I

00:30:41,200 --> 00:30:44,630
didn't even see the first line says

00:30:43,130 --> 00:30:47,000
determine the value for the relations

00:30:44,630 --> 00:30:49,730
foreign key performance improvement what

00:30:47,000 --> 00:30:52,490
I don't that something would have to add

00:30:49,730 --> 00:30:53,570
some of that at first for the life of me

00:30:52,490 --> 00:30:56,749
I could not understand

00:30:53,570 --> 00:30:58,879
going on basically it's a know off it's

00:30:56,749 --> 00:31:00,440
a relation is embedded but embedded

00:30:58,879 --> 00:31:01,580
relations don't save foreign keys

00:31:00,440 --> 00:31:03,289
because they're embedded they don't need

00:31:01,580 --> 00:31:04,999
them so like why would it return a

00:31:03,289 --> 00:31:06,859
foreign key in its options why would

00:31:04,999 --> 00:31:12,499
even allow an option of a foreign key if

00:31:06,859 --> 00:31:14,929
it was an embedded relation um yeah so

00:31:12,499 --> 00:31:16,249
the this doesn't count as the Sandi Metz

00:31:14,929 --> 00:31:17,389
quote by the way but Sandi Metz says

00:31:16,249 --> 00:31:18,529
this thing where like if you squinted

00:31:17,389 --> 00:31:20,479
the code you can kind of see the

00:31:18,529 --> 00:31:22,249
structure and the shape will come out at

00:31:20,479 --> 00:31:23,720
you and so I kept sprinting my eyes

00:31:22,249 --> 00:31:25,909
obsessed thinking like maybe something

00:31:23,720 --> 00:31:28,789
would come out of it but I didn't really

00:31:25,909 --> 00:31:30,619
see much else besides what was there but

00:31:28,789 --> 00:31:31,970
I did notice that basically there are a

00:31:30,619 --> 00:31:33,349
couple of things like when you're doing

00:31:31,970 --> 00:31:35,299
a lot of refactoring you get pretty good

00:31:33,349 --> 00:31:37,849
at recognizing these hidden patterns and

00:31:35,299 --> 00:31:40,639
so when I came to this one thing I

00:31:37,849 --> 00:31:44,239
noticed was in my refactoring mindset is

00:31:40,639 --> 00:31:46,249
that like first of all before and key

00:31:44,239 --> 00:31:49,039
option is said it's returned nothing

00:31:46,249 --> 00:31:51,169
else is done if the object is embedded

00:31:49,039 --> 00:31:53,599
it returns nil and it should probably be

00:31:51,169 --> 00:31:56,119
before it checks if there's an option of

00:31:53,599 --> 00:31:57,859
a foreign key set and the last thing is

00:31:56,119 --> 00:31:59,840
the relation object knows something the

00:31:57,859 --> 00:32:01,820
meta data object doesn't so it uses the

00:31:59,840 --> 00:32:06,559
metadata data or the meta metadata

00:32:01,820 --> 00:32:09,729
metadata but and also the other thing

00:32:06,559 --> 00:32:12,409
which I want to add to this list is that

00:32:09,729 --> 00:32:14,899
this metadata object is supposed to be

00:32:12,409 --> 00:32:16,729
the relation but there's also a relation

00:32:14,899 --> 00:32:18,679
object saved on the metadata class so

00:32:16,729 --> 00:32:20,090
why aren't so it's conflated like so

00:32:18,679 --> 00:32:22,070
there were actually these relation

00:32:20,090 --> 00:32:24,139
objects but had different behavior but I

00:32:22,070 --> 00:32:25,879
didn't see why we needed to have this

00:32:24,139 --> 00:32:26,989
metadata class that we could just have

00:32:25,879 --> 00:32:30,769
these objects that have their own

00:32:26,989 --> 00:32:33,529
behavior so here's another method just

00:32:30,769 --> 00:32:36,109
to give you a sense of how sticky this

00:32:33,529 --> 00:32:38,059
code base was it's used to get the names

00:32:36,109 --> 00:32:39,200
of an inverse relation given a certain

00:32:38,059 --> 00:32:40,899
relation

00:32:39,200 --> 00:32:43,369
the first method checks if the type is

00:32:40,899 --> 00:32:45,529
polymorphic I know it's kind of long but

00:32:43,369 --> 00:32:47,269
its itself polymorphic lookup inverses

00:32:45,529 --> 00:32:50,330
and then otherwise it determines in

00:32:47,269 --> 00:32:51,739
warth inverses and and when I looked at

00:32:50,330 --> 00:32:53,809
those two methods they had a lot of

00:32:51,739 --> 00:32:57,349
overlap in logic so I it was really

00:32:53,809 --> 00:32:59,479
difficult to determine what logic should

00:32:57,349 --> 00:33:03,320
be extracted if some of the checks were

00:32:59,479 --> 00:33:05,900
repeated after they've been branched

00:33:03,320 --> 00:33:07,400
but basically from the point of showing

00:33:05,900 --> 00:33:09,110
you this is to show you that it's pretty

00:33:07,400 --> 00:33:10,669
clear that the metadata object was

00:33:09,110 --> 00:33:13,760
begging to be refactored into smaller

00:33:10,669 --> 00:33:15,559
object oriented objects the entropy or

00:33:13,760 --> 00:33:17,660
disorder of the system was way too high

00:33:15,559 --> 00:33:20,059
any bugs having to do with this code

00:33:17,660 --> 00:33:23,179
were virtually impossible to fix and the

00:33:20,059 --> 00:33:25,040
structure was weak and what's obvious

00:33:23,179 --> 00:33:26,809
need was for there to be a reference and

00:33:25,040 --> 00:33:28,250
embedded namespace with objects that

00:33:26,809 --> 00:33:30,549
knew that they were referenced or embed

00:33:28,250 --> 00:33:33,020
and had their own behavior

00:33:30,549 --> 00:33:35,059
so embarked on a journey to refactor the

00:33:33,020 --> 00:33:36,620
metadata object into different objects

00:33:35,059 --> 00:33:39,110
under the namespace reference and

00:33:36,620 --> 00:33:39,770
embedded how did I do this did I do it

00:33:39,110 --> 00:33:43,880
all at once

00:33:39,770 --> 00:33:45,290
did I read a lot of books and learn

00:33:43,880 --> 00:33:47,480
about how to do this perfectly and then

00:33:45,290 --> 00:33:49,610
apply those practices so I had a couple

00:33:47,480 --> 00:33:51,679
of false starts I bought martin fowler's

00:33:49,610 --> 00:33:53,900
or factoring book but I honestly don't

00:33:51,679 --> 00:33:56,390
really get through much of it kind of

00:33:53,900 --> 00:33:58,220
wanted to learn on I was doing it I

00:33:56,390 --> 00:34:00,140
talked to my manager a lot had some

00:33:58,220 --> 00:34:02,330
nervous breakdowns but I learned there

00:34:00,140 --> 00:34:06,280
are a lot of wrong ways to reflector and

00:34:02,330 --> 00:34:08,690
a couple of right ways are better ways

00:34:06,280 --> 00:34:11,570
so it's really important to do proper

00:34:08,690 --> 00:34:14,570
refactoring not random factoring I like

00:34:11,570 --> 00:34:16,609
to think of in terms of the health of a

00:34:14,570 --> 00:34:18,379
project this is something very similar

00:34:16,609 --> 00:34:20,540
to the way there's something very

00:34:18,379 --> 00:34:22,580
similar between the way every factor and

00:34:20,540 --> 00:34:25,429
work on my code bases and how I design

00:34:22,580 --> 00:34:27,109
my weekly exerciser team I always ask

00:34:25,429 --> 00:34:29,179
myself when making changes to a codebase

00:34:27,109 --> 00:34:30,950
is this a healthy change is this a quick

00:34:29,179 --> 00:34:32,960
fix like a piece of candy or a bag of

00:34:30,950 --> 00:34:34,580
chips that has a short-term payoff like

00:34:32,960 --> 00:34:35,840
it's really yummy right now but I know

00:34:34,580 --> 00:34:37,550
in the long term this probably isn't

00:34:35,840 --> 00:34:39,830
good for me

00:34:37,550 --> 00:34:41,780
we all have to reflect her at some point

00:34:39,830 --> 00:34:43,369
it's really important to have a plan

00:34:41,780 --> 00:34:45,409
designed for what you're going to do

00:34:43,369 --> 00:34:47,480
refactoring should require the same

00:34:45,409 --> 00:34:49,639
effort and process that you apply to

00:34:47,480 --> 00:34:52,010
building something from scratch I think

00:34:49,639 --> 00:34:53,450
sometimes we forget that just plowing

00:34:52,010 --> 00:34:55,010
through and trying to fix everything you

00:34:53,450 --> 00:34:58,250
can along the way it's definitely one of

00:34:55,010 --> 00:35:00,380
the wrong ways to refractor so at this

00:34:58,250 --> 00:35:01,910
stage in the repair of I had done

00:35:00,380 --> 00:35:03,380
the structural analysis and identify the

00:35:01,910 --> 00:35:08,180
weaknesses the next steps was to

00:35:03,380 --> 00:35:09,950
reflector with a plan over the course of

00:35:08,180 --> 00:35:11,090
my resetting of I learned a lot

00:35:09,950 --> 00:35:12,350
and I'm going to share some of the

00:35:11,090 --> 00:35:13,910
highlighted steps with you again I'm not

00:35:12,350 --> 00:35:15,500
going to go through like recipes or

00:35:13,910 --> 00:35:16,250
series because you can read about that

00:35:15,500 --> 00:35:17,510
and it's

00:35:16,250 --> 00:35:19,610
thing we've talked about a lot and

00:35:17,510 --> 00:35:20,840
because it's something we do a lot but

00:35:19,610 --> 00:35:22,820
I'm going to show you a couple of things

00:35:20,840 --> 00:35:24,050
that I did using this metadata object as

00:35:22,820 --> 00:35:26,540
an example because I think it's like the

00:35:24,050 --> 00:35:32,210
classic case of something begging to be

00:35:26,540 --> 00:35:35,240
refactored as I said we can yeah read

00:35:32,210 --> 00:35:37,520
about this but I also watched a lot of

00:35:35,240 --> 00:35:39,080
talks along the way for guidance I'm not

00:35:37,520 --> 00:35:40,310
saying that you should just dispose of

00:35:39,080 --> 00:35:42,770
all of the theory I think it's really

00:35:40,310 --> 00:35:44,090
good to know it but when it like shares

00:35:42,770 --> 00:35:46,340
something that's kind of not really

00:35:44,090 --> 00:35:51,860
something things that I read or heard

00:35:46,340 --> 00:35:56,420
about so the things that I learned were

00:35:51,860 --> 00:35:59,030
one to perfect her one piece at a time

00:35:56,420 --> 00:36:01,910
use tests at every step and don't fix

00:35:59,030 --> 00:36:03,650
bugs this one was really important so

00:36:01,910 --> 00:36:05,000
Martin Fowler we know this we can

00:36:03,650 --> 00:36:06,710
probably recite it in our sleep

00:36:05,000 --> 00:36:09,080
defines or factoring as the process of

00:36:06,710 --> 00:36:10,730
changing a software system but in such a

00:36:09,080 --> 00:36:12,530
way that does not alter the external

00:36:10,730 --> 00:36:14,540
behavior of the code yet improves the

00:36:12,530 --> 00:36:16,760
internal structure so if we rearrange

00:36:14,540 --> 00:36:18,410
the system so the external behavior

00:36:16,760 --> 00:36:20,960
doesn't change it doesn't matter if we

00:36:18,410 --> 00:36:22,280
rearranged one corner of the system and

00:36:20,960 --> 00:36:24,650
then another corner of the system and do

00:36:22,280 --> 00:36:27,320
it piece by piece because the outside

00:36:24,650 --> 00:36:28,760
behavior is not going to change so what

00:36:27,320 --> 00:36:30,590
I did was first define a namespace

00:36:28,760 --> 00:36:33,620
called reference and create a class

00:36:30,590 --> 00:36:35,300
called belongs to which seems like a

00:36:33,620 --> 00:36:38,300
really obvious way to refactor this I

00:36:35,300 --> 00:36:39,890
returned this object when a model was

00:36:38,300 --> 00:36:41,660
defined as a belongs to relationships

00:36:39,890 --> 00:36:43,910
and make sure all the tests pass before

00:36:41,660 --> 00:36:45,410
moving on to create another object the

00:36:43,910 --> 00:36:46,460
largest benefit of rearranging the

00:36:45,410 --> 00:36:47,990
system piece-by-piece

00:36:46,460 --> 00:36:49,760
is you can test out different designs

00:36:47,990 --> 00:36:51,710
and not waste too much time

00:36:49,760 --> 00:36:55,790
overhauling everything only to realize

00:36:51,710 --> 00:36:57,620
your new design doesn't work agile

00:36:55,790 --> 00:36:59,270
principles aren't only for building new

00:36:57,620 --> 00:37:01,670
things so as I said you should apply the

00:36:59,270 --> 00:37:02,990
same practices to refactoring as you do

00:37:01,670 --> 00:37:05,930
to building something from scratch

00:37:02,990 --> 00:37:07,610
I ate it over my reflector design I

00:37:05,930 --> 00:37:08,930
tried out different hierarchies I tried

00:37:07,610 --> 00:37:10,640
creating classes for things like a

00:37:08,930 --> 00:37:12,400
builder so a builder is something like

00:37:10,640 --> 00:37:14,780
if you have a book and you build author

00:37:12,400 --> 00:37:16,790
there's a builder thing MIT did that for

00:37:14,780 --> 00:37:19,400
you if you bind something it would be

00:37:16,790 --> 00:37:21,320
book author equals another author and so

00:37:19,400 --> 00:37:24,890
those things are objects originally and

00:37:21,320 --> 00:37:25,880
I tried out having them be objects but I

00:37:24,890 --> 00:37:27,860
thought it would be much better if there

00:37:25,880 --> 00:37:29,600
were modules because their behavior and

00:37:27,860 --> 00:37:30,050
things that do something once like

00:37:29,600 --> 00:37:32,300
there's no

00:37:30,050 --> 00:37:36,020
to save instance variables on that

00:37:32,300 --> 00:37:39,350
builder because it's created as a side

00:37:36,020 --> 00:37:42,430
effect or byproduct of building an

00:37:39,350 --> 00:37:45,140
object or binding it to another one

00:37:42,430 --> 00:37:46,760
secondly before you begin to refactor

00:37:45,140 --> 00:37:49,030
make sure you have a solid suite of

00:37:46,760 --> 00:37:51,380
tests tests are the wallet or back

00:37:49,030 --> 00:37:53,210
reflector your tests simultaneously with

00:37:51,380 --> 00:37:55,460
your code I can't emphasize this enough

00:37:53,210 --> 00:37:56,840
you want people to figure out what went

00:37:55,460 --> 00:37:58,850
wrong with your design if you do all of

00:37:56,840 --> 00:38:00,770
your refactoring then run the test and

00:37:58,850 --> 00:38:03,440
realize they're not passing so this is

00:38:00,770 --> 00:38:06,110
just an example of that same look up

00:38:03,440 --> 00:38:09,080
inverses that as I showed before I

00:38:06,110 --> 00:38:10,820
decided that I wanted to I wanted each

00:38:09,080 --> 00:38:11,930
object to know what their compliments

00:38:10,820 --> 00:38:14,840
were and so this is just one example

00:38:11,930 --> 00:38:16,520
like you can you have to port your

00:38:14,840 --> 00:38:18,230
existing test so you also have to write

00:38:16,520 --> 00:38:21,260
new tests and this was a new test I had

00:38:18,230 --> 00:38:23,420
to write because when I reflector each

00:38:21,260 --> 00:38:25,250
relation object had to be able to ask

00:38:23,420 --> 00:38:27,800
another relation if it was a compliment

00:38:25,250 --> 00:38:29,870
of itself so that's the test that I

00:38:27,800 --> 00:38:32,060
wrote for that so it's really important

00:38:29,870 --> 00:38:35,120
to add those tests in as well and the

00:38:32,060 --> 00:38:36,830
last thing is don't fix bugs so along

00:38:35,120 --> 00:38:39,110
the way I would I

00:38:36,830 --> 00:38:42,290
I had never I was really familiar with

00:38:39,110 --> 00:38:43,520
this list of bugs in JIRA and I when I

00:38:42,290 --> 00:38:45,140
was reflecting the code I would

00:38:43,520 --> 00:38:47,750
sometimes find the places or the sources

00:38:45,140 --> 00:38:49,340
of these bugs and I would I was really

00:38:47,750 --> 00:38:51,590
excited to find these places and I

00:38:49,340 --> 00:38:52,910
really wanted to fix them but it had to

00:38:51,590 --> 00:38:54,740
be really self discipline about not

00:38:52,910 --> 00:38:56,870
fixing them and saving them for later so

00:38:54,740 --> 00:38:58,880
this is just one example when you have a

00:38:56,870 --> 00:39:01,010
list of embedded documents and a parent

00:38:58,880 --> 00:39:02,930
document I'd would allow you to

00:39:01,010 --> 00:39:06,080
append that same document with the same

00:39:02,930 --> 00:39:08,870
ID onto that list and it's a pretty

00:39:06,080 --> 00:39:10,760
simple bug nothing really that exciting

00:39:08,870 --> 00:39:15,140
but when I was working on this code this

00:39:10,760 --> 00:39:17,330
is the the binder object and it would

00:39:15,140 --> 00:39:19,640
allow you to append that that embedded

00:39:17,330 --> 00:39:20,840
document twice to a list and I when I

00:39:19,640 --> 00:39:22,640
was refactoring about this line I was

00:39:20,840 --> 00:39:24,110
like wow that's where this is happening

00:39:22,640 --> 00:39:25,880
but I was like I'm not going to do it

00:39:24,110 --> 00:39:28,190
I'm going to do it later but I would

00:39:25,880 --> 00:39:32,600
note it down in the JIRA ticket like

00:39:28,190 --> 00:39:34,550
where to go to fix it and also this idea

00:39:32,600 --> 00:39:38,030
became crystallized for me by my manager

00:39:34,550 --> 00:39:39,260
who's he maintains a Java driver and so

00:39:38,030 --> 00:39:39,710
he has a different way of thinking than

00:39:39,260 --> 00:39:43,230
I do

00:39:39,710 --> 00:39:45,750
he's he has this like really booming

00:39:43,230 --> 00:39:49,920
godlike voice that makes anything he say

00:39:45,750 --> 00:39:52,770
sound extremely significant but it is

00:39:49,920 --> 00:39:54,350
significant and in this case we have

00:39:52,770 --> 00:39:57,480
these one-on-ones every other week and

00:39:54,350 --> 00:39:59,369
one time he knew how much work I was

00:39:57,480 --> 00:40:01,890
putting into referring this project and

00:39:59,369 --> 00:40:04,440
he also knew how many bugs I had to get

00:40:01,890 --> 00:40:06,930
through in the in the bug list and so

00:40:04,440 --> 00:40:09,480
this one time he was like so Emily

00:40:06,930 --> 00:40:11,400
you're fixing you're doing all this for

00:40:09,480 --> 00:40:14,100
factoring I recognize it's a lot of work

00:40:11,400 --> 00:40:15,480
are you fixing bugs as well and I was

00:40:14,100 --> 00:40:17,340
like and I got really defensive I was

00:40:15,480 --> 00:40:18,570
like no I'm not fixing bugs like I don't

00:40:17,340 --> 00:40:19,950
have time for it I really want to finish

00:40:18,570 --> 00:40:22,140
the reflection before I do that he was

00:40:19,950 --> 00:40:24,180
like good you should never fix bugs

00:40:22,140 --> 00:40:28,380
while you're refactoring so it's like

00:40:24,180 --> 00:40:29,880
okay test Pettis you like to ask these

00:40:28,380 --> 00:40:31,680
like trick questions and make him think

00:40:29,880 --> 00:40:34,980
really deeply and like he's amazing and

00:40:31,680 --> 00:40:36,660
great so the crucial pork point was

00:40:34,980 --> 00:40:41,550
perhaps the one that took the most

00:40:36,660 --> 00:40:43,530
self-discipline as I said I I really had

00:40:41,550 --> 00:40:47,369
to like tie my hands behind my back when

00:40:43,530 --> 00:40:50,010
I was doing a lot of it so the last

00:40:47,369 --> 00:40:53,520
thing that was part of this restoration

00:40:50,010 --> 00:40:55,440
is not to is to not always discuss in

00:40:53,520 --> 00:40:57,630
it's not always discussing books or

00:40:55,440 --> 00:40:59,820
refactoring presentations nor is it

00:40:57,630 --> 00:41:01,980
specific to an open-source project it's

00:40:59,820 --> 00:41:05,160
not of responsible maintenance and

00:41:01,980 --> 00:41:06,720
restoring user trust so this is kind of

00:41:05,160 --> 00:41:09,080
the same idea of like sustainable

00:41:06,720 --> 00:41:12,570
farming or responsible farming where

00:41:09,080 --> 00:41:14,970
farmers don't use chemicals or things

00:41:12,570 --> 00:41:18,630
that harm the environment for short-term

00:41:14,970 --> 00:41:22,590
benefit and financial payoff like like

00:41:18,630 --> 00:41:24,630
red or tomatoes that are at the expense

00:41:22,590 --> 00:41:27,570
of the soil and the long-term the

00:41:24,630 --> 00:41:28,950
longevity of Sur land so it's kind of

00:41:27,570 --> 00:41:30,750
same idea with your project you want to

00:41:28,950 --> 00:41:35,130
make sure that everything you do is with

00:41:30,750 --> 00:41:36,030
the long-term and the health in mind so

00:41:35,130 --> 00:41:38,640
it's just like starting a new exercise

00:41:36,030 --> 00:41:40,380
or eating regime improving I

00:41:38,640 --> 00:41:42,530
didn't mean applying this quick fix like

00:41:40,380 --> 00:41:45,359
running for a couple days and then like

00:41:42,530 --> 00:41:47,400
calling that my exercise regime and

00:41:45,359 --> 00:41:49,410
stopping for a while I had to establish

00:41:47,400 --> 00:41:50,070
healthy habits going forward for the

00:41:49,410 --> 00:41:52,650
codebase

00:41:50,070 --> 00:41:54,570
this meant properly categorizing issues

00:41:52,650 --> 00:41:56,310
as they were open in the deer project it

00:41:54,570 --> 00:41:56,790
meant responding to users right away in

00:41:56,310 --> 00:41:59,010
order to get

00:41:56,790 --> 00:42:01,260
most relevant information even if I can

00:41:59,010 --> 00:42:02,760
fix the issue right away so that I could

00:42:01,260 --> 00:42:03,990
reproduce it because that's part of the

00:42:02,760 --> 00:42:06,330
problem with all these issues that were

00:42:03,990 --> 00:42:07,740
imported into JIRA from github there's a

00:42:06,330 --> 00:42:09,600
lot of people like kink even code

00:42:07,740 --> 00:42:12,300
anymore it's like going back to 2014

00:42:09,600 --> 00:42:13,620
2013 so I knew these problems existed

00:42:12,300 --> 00:42:19,200
but I didn't really know how they got

00:42:13,620 --> 00:42:20,910
themselves into said hole and so release

00:42:19,200 --> 00:42:22,320
notes documentation basically any

00:42:20,910 --> 00:42:24,060
interface in the community had to be

00:42:22,320 --> 00:42:28,290
kept up to date so that people knew that

00:42:24,060 --> 00:42:30,840
 was alive so for example I

00:42:28,290 --> 00:42:32,700
made sure our API documents the docs for

00:42:30,840 --> 00:42:35,490
links for a main documentation because a

00:42:32,700 --> 00:42:37,290
lot of people also were getting confused

00:42:35,490 --> 00:42:39,330
with it's old documentation which

00:42:37,290 --> 00:42:41,310
was still around had to make sure the

00:42:39,330 --> 00:42:44,130
documentation was really specialized and

00:42:41,310 --> 00:42:46,650
obvious I release new versions regularly

00:42:44,130 --> 00:42:50,070
I make sure that I'm always in step with

00:42:46,650 --> 00:42:53,460
rails and I respond to relative movement

00:42:50,070 --> 00:42:56,250
in our march forward

00:42:53,460 --> 00:42:59,610
I follow semantic versioning closely I

00:42:56,250 --> 00:43:01,350
make sure to tweet and I send out

00:42:59,610 --> 00:43:02,850
announcements on google routes so that

00:43:01,350 --> 00:43:04,650
people know the project is always moving

00:43:02,850 --> 00:43:06,840
forward and that they can trust that

00:43:04,650 --> 00:43:09,840
 ID is active that there's someone

00:43:06,840 --> 00:43:12,510
working on it and that's alive as I said

00:43:09,840 --> 00:43:15,380
and the benefit of having worked on

00:43:12,510 --> 00:43:18,470
something working on something that was

00:43:15,380 --> 00:43:21,360
quiet and passive for so long is that

00:43:18,470 --> 00:43:23,520
people don't realize I'm paid to work on

00:43:21,360 --> 00:43:25,440
language and so when I respond to them

00:43:23,520 --> 00:43:27,450
right away they're like so happy to get

00:43:25,440 --> 00:43:29,840
a response and like like thanks so much

00:43:27,450 --> 00:43:32,580
for work and when I compared to do this

00:43:29,840 --> 00:43:33,810
no but it's great like I think people I

00:43:32,580 --> 00:43:36,290
can tell people are really happy that

00:43:33,810 --> 00:43:40,500
finally like the project is treated like

00:43:36,290 --> 00:43:44,250
it's that it it's being responsibly

00:43:40,500 --> 00:43:46,440
maintained so after all this work had I

00:43:44,250 --> 00:43:48,870
succeeded in reducing the entropy of the

00:43:46,440 --> 00:43:50,280
project how did it compare to the

00:43:48,870 --> 00:43:53,070
entropy of the project before these

00:43:50,280 --> 00:43:54,750
changes entropy is pretty abstract

00:43:53,070 --> 00:43:56,610
concept as we've seen and measuring it

00:43:54,750 --> 00:43:58,830
in the context of code bases seems even

00:43:56,610 --> 00:44:00,690
more intangible as we heard in the

00:43:58,830 --> 00:44:02,280
beginning of the presentation entropy is

00:44:00,690 --> 00:44:04,620
measured in terms of the number of ways

00:44:02,280 --> 00:44:06,300
in which a system can be arranged we

00:44:04,620 --> 00:44:08,130
can't quite measure this in a code base

00:44:06,300 --> 00:44:09,650
but I did however need to prove somehow

00:44:08,130 --> 00:44:12,470
to myself my community

00:44:09,650 --> 00:44:15,109
my manager that my time spent was time

00:44:12,470 --> 00:44:17,660
well spent but as your entropy in these

00:44:15,109 --> 00:44:19,579
three ways and also other ways I think

00:44:17,660 --> 00:44:23,119
about this constantly to help myself

00:44:19,579 --> 00:44:26,029
like make sure that is always kept

00:44:23,119 --> 00:44:28,490
at a stable state so how difficult is it

00:44:26,029 --> 00:44:29,750
to make changes when you have a bug sure

00:44:28,490 --> 00:44:31,220
it's difficult to find the source of the

00:44:29,750 --> 00:44:33,619
bug but how difficult is it to actually

00:44:31,220 --> 00:44:35,720
fix that bug you have to fix it in five

00:44:33,619 --> 00:44:37,220
different files do you fix it in one

00:44:35,720 --> 00:44:38,869
place and then run the test and cross

00:44:37,220 --> 00:44:39,950
your fingers and if it passes and move

00:44:38,869 --> 00:44:41,720
on

00:44:39,950 --> 00:44:43,579
do you understand the structure of the

00:44:41,720 --> 00:44:46,609
codebase enough to be confident that one

00:44:43,579 --> 00:44:49,250
fix is the only place you need to make

00:44:46,609 --> 00:44:50,900
that fix and then the other thing is can

00:44:49,250 --> 00:44:52,970
you explain the design so this was

00:44:50,900 --> 00:44:56,960
something I had to do again involving my

00:44:52,970 --> 00:44:58,849
manager he we were looking for someone

00:44:56,960 --> 00:45:01,400
from internally for MongoDB join the

00:44:58,849 --> 00:45:04,700
Ruby team and someone who's a little bit

00:45:01,400 --> 00:45:06,440
newer to coding into the company and so

00:45:04,700 --> 00:45:08,240
he said to me he was like in preparation

00:45:06,440 --> 00:45:09,650
for talking to this person he said like

00:45:08,240 --> 00:45:12,770
why don't you write down everything you

00:45:09,650 --> 00:45:14,059
need to know everything you know working

00:45:12,770 --> 00:45:15,740
on this project in something and

00:45:14,059 --> 00:45:18,950
everything someone should know joining

00:45:15,740 --> 00:45:22,430
this project and so I was like it's a

00:45:18,950 --> 00:45:23,839
lot but okay I met with the the guy who

00:45:22,430 --> 00:45:25,930
is going to join the team in a Senate

00:45:23,839 --> 00:45:28,940
about an hour just explaining the

00:45:25,930 --> 00:45:31,160
complexity of the gem dependencies and

00:45:28,940 --> 00:45:35,390
what projects I was maintaining and what

00:45:31,160 --> 00:45:38,869
had where the tentacles were between the

00:45:35,390 --> 00:45:40,190
gems and and I so I did that and I was

00:45:38,869 --> 00:45:42,079
like I don't know if I can write down

00:45:40,190 --> 00:45:45,680
everything I know about working on Ruby

00:45:42,079 --> 00:45:47,150
but but explaining them ongoing codebase

00:45:45,680 --> 00:45:49,279
I can definitely do that now and I

00:45:47,150 --> 00:45:50,839
couldn't do it before because I I both

00:45:49,279 --> 00:45:52,789
didn't really have that mental model and

00:45:50,839 --> 00:45:55,520
I also didn't think there was much

00:45:52,789 --> 00:45:56,390
structure and then the last thing is how

00:45:55,520 --> 00:45:58,460
is performance

00:45:56,390 --> 00:46:01,160
slow performance is another indicator of

00:45:58,460 --> 00:46:02,809
high entropy in your system the Messier

00:46:01,160 --> 00:46:05,119
and more inefficient code paths the

00:46:02,809 --> 00:46:07,069
worst performance will be previously

00:46:05,119 --> 00:46:08,150
doing this refactor our test suite

00:46:07,069 --> 00:46:10,569
would take between three and four

00:46:08,150 --> 00:46:13,490
minutes after this refactor taking hate

00:46:10,569 --> 00:46:14,809
so I was freaked out for a little bit

00:46:13,490 --> 00:46:17,480
and I was like wow that was a lot of

00:46:14,809 --> 00:46:19,369
work for nothing but it's because I

00:46:17,480 --> 00:46:21,829
introduced a thousand new tests and they

00:46:19,369 --> 00:46:23,180
all dealt with creating classes and

00:46:21,829 --> 00:46:23,599
creating relationships which is actually

00:46:23,180 --> 00:46:27,079
quite

00:46:23,599 --> 00:46:28,579
code heavy and involves creating classes

00:46:27,079 --> 00:46:31,069
so it was understandable the test suite

00:46:28,579 --> 00:46:32,809
got slower but it made me realized that

00:46:31,069 --> 00:46:34,910
I needed to do some benchmarking and

00:46:32,809 --> 00:46:37,160
luckily we had a pretty rigorous

00:46:34,910 --> 00:46:38,420
benchmarking sweep and I was able to use

00:46:37,160 --> 00:46:40,999
to confirm that actually made the

00:46:38,420 --> 00:46:43,369
performance a little increase

00:46:40,999 --> 00:46:44,839
performance slightly so that's really

00:46:43,369 --> 00:46:46,039
important also like sure you can do this

00:46:44,839 --> 00:46:49,969
refactoring but like make sure you

00:46:46,039 --> 00:46:51,410
always benchmark before and after so in

00:46:49,969 --> 00:46:53,779
the end I'm able to say with confidence

00:46:51,410 --> 00:46:55,459
that I reduced entropy among good and

00:46:53,779 --> 00:46:57,589
I'm particularly happy that allow other

00:46:55,459 --> 00:46:59,989
engineers easily join the Ruby project

00:46:57,589 --> 00:47:02,839
and potentially open poll requests and

00:46:59,989 --> 00:47:04,609
makes the codebase less opaque this work

00:47:02,839 --> 00:47:06,499
has also shifted my perspective and I

00:47:04,609 --> 00:47:08,839
think differently about my projects so

00:47:06,499 --> 00:47:12,739
again my manager likes athletes with

00:47:08,839 --> 00:47:14,239
trick questions and or impart wisdom on

00:47:12,739 --> 00:47:16,549
me and about a month and a half ago

00:47:14,239 --> 00:47:21,199
again in our one-on-one meeting he was

00:47:16,549 --> 00:47:22,400
like um he so I come into our meetings

00:47:21,199 --> 00:47:24,949
like with the things that I've been

00:47:22,400 --> 00:47:26,059
working on to tell him an update he was

00:47:24,949 --> 00:47:27,799
from the Java driver so you doesn't

00:47:26,059 --> 00:47:31,729
really know he doesn't really track like

00:47:27,799 --> 00:47:33,589
every commits I do in every JIRA ticket

00:47:31,729 --> 00:47:36,650
update that I do so he comes into our

00:47:33,589 --> 00:47:39,259
meeting he's like so Emily what did you

00:47:36,650 --> 00:47:41,059
do today to make Mon boy better and I

00:47:39,259 --> 00:47:43,099
was like I have to my list any of these

00:47:41,059 --> 00:47:44,539
make my grade better so now I always

00:47:43,099 --> 00:47:46,430
think about that like I go into my

00:47:44,539 --> 00:47:48,499
office in the morning and I ask myself

00:47:46,430 --> 00:47:49,880
like what am I going to do today even if

00:47:48,499 --> 00:47:51,920
it's just a little thing to make mungo

00:47:49,880 --> 00:47:53,900
better and then when I leave I'm like

00:47:51,920 --> 00:47:55,999
anything to make one way better so I

00:47:53,900 --> 00:47:58,039
encourage you to ask yourselves when you

00:47:55,999 --> 00:47:59,809
go to work on Monday before you start

00:47:58,039 --> 00:48:06,999
coding what am I going to do today to

00:47:59,809 --> 00:48:06,999
make my codebase better so on that note

00:48:07,329 --> 00:48:13,880
I'm going to remind you for people of

00:48:11,420 --> 00:48:15,769
all people came in late you might have

00:48:13,880 --> 00:48:17,900
disqualified yourselves or at least made

00:48:15,769 --> 00:48:20,959
it so you can't email me but email me

00:48:17,900 --> 00:48:23,869
with any Mets coast to get mustard and

00:48:20,959 --> 00:48:29,869
the other thing is if I could hijack

00:48:23,869 --> 00:48:32,390
part of my question session and ask you

00:48:29,869 --> 00:48:34,530
a question um can everybody take out

00:48:32,390 --> 00:48:38,220
their phones

00:48:34,530 --> 00:48:43,170
you got your phone and put it in the air

00:48:38,220 --> 00:48:43,650
and turn it on and sing along one no

00:48:43,170 --> 00:48:47,940
just kidding

00:48:43,650 --> 00:48:53,760
can you can you open your email clients

00:48:47,940 --> 00:48:56,460
on your phone and write Emily at MongoDB

00:48:53,760 --> 00:48:59,820
is the receiver you don't actually have

00:48:56,460 --> 00:49:02,250
to do this if you don't want to but so

00:48:59,820 --> 00:49:04,710
right I'm doing this is also so that I

00:49:02,250 --> 00:49:09,150
know how long it takes to okay so right

00:49:04,710 --> 00:49:13,140
knee is the receiver and then write to

00:49:09,150 --> 00:49:15,660
me one sentence that like one sentence

00:49:13,140 --> 00:49:18,690
that thumbs up if you use MongoDB and

00:49:15,660 --> 00:49:21,270
you no longer use MongoDB why if you use

00:49:18,690 --> 00:49:24,270
MongoDB and you still use MongoDB why

00:49:21,270 --> 00:49:26,120
and if you've never used MongoDB and you

00:49:24,270 --> 00:49:28,470
don't want to use mom going to be why

00:49:26,120 --> 00:49:31,320
just one sentence and that would help me

00:49:28,470 --> 00:49:34,860
so much because so on this note of

00:49:31,320 --> 00:49:37,350
making I'd better I have been

00:49:34,860 --> 00:49:39,540
tasked now that it's kind of it's easier

00:49:37,350 --> 00:49:41,600
to fix bugs and it's a healthier project

00:49:39,540 --> 00:49:43,980
and other people can work on it with me

00:49:41,600 --> 00:49:47,160
it's not so much of a black box anymore

00:49:43,980 --> 00:49:49,980
I I know that in the Ruby community

00:49:47,160 --> 00:49:52,590
MongoDB is not super popular it's not

00:49:49,980 --> 00:49:55,560
the default database and I attribute it

00:49:52,590 --> 00:49:59,100
largely to the mindset that we're all in

00:49:55,560 --> 00:50:01,980
when we write web up that is created for

00:49:59,100 --> 00:50:04,590
us or at least imparted on us or talk to

00:50:01,980 --> 00:50:06,510
us by using rails we all think

00:50:04,590 --> 00:50:09,540
relationally for the most part and

00:50:06,510 --> 00:50:11,580
MongoDB challenges that and makes it

00:50:09,540 --> 00:50:13,560
kind of confusing because it's kind of

00:50:11,580 --> 00:50:16,200
relational in some ways and kind of not

00:50:13,560 --> 00:50:18,780
and so I know that it's there's a

00:50:16,200 --> 00:50:20,190
learning curve and am ongoing has always

00:50:18,780 --> 00:50:23,670
followed for the last 10 years this

00:50:20,190 --> 00:50:25,680
philosophy of following exactly what

00:50:23,670 --> 00:50:29,580
active record does to reduce the

00:50:25,680 --> 00:50:31,020
friction and the the learning curve if

00:50:29,580 --> 00:50:35,310
you're going from a relational database

00:50:31,020 --> 00:50:38,280
to MongoDB but I'm now I'm pretty torn

00:50:35,310 --> 00:50:39,750
because I think that I can tell from all

00:50:38,280 --> 00:50:42,600
of the issues that a log and the way

00:50:39,750 --> 00:50:44,820
people ask me questions that having that

00:50:42,600 --> 00:50:47,340
be the philosophy of makes it so

00:50:44,820 --> 00:50:47,940
that people don't really learn MongoDB

00:50:47,340 --> 00:50:49,590
and how do you

00:50:47,940 --> 00:50:52,950
sit properly and so they end up building

00:50:49,590 --> 00:50:55,050
relational schemas with MongoDB which is

00:50:52,950 --> 00:50:56,640
not always the best solution and you end

00:50:55,050 --> 00:50:57,900
up doing many more requests to the

00:50:56,640 --> 00:50:59,760
database because we don't have joins

00:50:57,900 --> 00:51:01,950
when you want to do and that you

00:50:59,760 --> 00:51:04,620
wouldn't do if you had a post-grad

00:51:01,950 --> 00:51:06,270
second for example is for example so

00:51:04,620 --> 00:51:07,800
that's that's one philosophy that's what

00:51:06,270 --> 00:51:11,220
it's always been doing and I know that

00:51:07,800 --> 00:51:13,230
the switch to MongoDB is not that bad

00:51:11,220 --> 00:51:14,370
and if we follow this path but now

00:51:13,230 --> 00:51:16,500
there's this other path where I think

00:51:14,370 --> 00:51:21,900
that maybe I can either build a new

00:51:16,500 --> 00:51:24,780
audience for rails or for Rudy or adapt

00:51:21,900 --> 00:51:27,830
Aman going to make it more modular so

00:51:24,780 --> 00:51:30,890
that you you're not imposed you're not

00:51:27,830 --> 00:51:32,490
being put into this relational mindset

00:51:30,890 --> 00:51:33,990
automatically so I don't know if I

00:51:32,490 --> 00:51:39,420
should make it like totally its own

00:51:33,990 --> 00:51:40,410
thing and have an recognize that's a

00:51:39,420 --> 00:51:41,820
learning curve but then be higher

00:51:40,410 --> 00:51:43,530
because like it's a trade-off like I

00:51:41,820 --> 00:51:47,160
might have fewer users in that way

00:51:43,530 --> 00:51:50,610
because the path of entry is much harder

00:51:47,160 --> 00:51:53,370
so I I can't determine that just from

00:51:50,610 --> 00:51:55,410
because by definition the only people I

00:51:53,370 --> 00:51:58,290
hear about our people using so I

00:51:55,410 --> 00:52:01,200
don't really know why other people who

00:51:58,290 --> 00:52:04,530
aren't looking at MongoDB as a perfectly

00:52:01,200 --> 00:52:07,020
acceptable option of database for rails

00:52:04,530 --> 00:52:09,450
why they're not using it I can determine

00:52:07,020 --> 00:52:12,240
that without you all telling me why so

00:52:09,450 --> 00:52:14,100
please email me and I have a thick skin

00:52:12,240 --> 00:52:18,060
like I can handle it you can tell be as

00:52:14,100 --> 00:52:20,580
brutal as you want I wouldn't be working

00:52:18,060 --> 00:52:23,580
for MongoDB or sending on the stage if I

00:52:20,580 --> 00:52:25,080
took everything personally for working

00:52:23,580 --> 00:52:26,190
for money for five years remember what

00:52:25,080 --> 00:52:29,460
everybody said of long going to be five

00:52:26,190 --> 00:52:31,470
years ago so please be honest with me

00:52:29,460 --> 00:52:33,480
it'll help me a lot and will help me

00:52:31,470 --> 00:52:35,640
make one good better that's my question

00:52:33,480 --> 00:52:38,220
for you I don't know if we have time I

00:52:35,640 --> 00:52:38,940
wasn't really paying attention to time

00:52:38,220 --> 00:52:41,160
for questions

00:52:38,940 --> 00:52:43,380
yeah so we're running a bit late oh okay

00:52:41,160 --> 00:52:46,140
we can still take some questions if

00:52:43,380 --> 00:52:49,980
anyone has them although I'm happy to

00:52:46,140 --> 00:52:52,260
take questions later I know um if I'm

00:52:49,980 --> 00:52:53,730
know how humans Minds work you guys are

00:52:52,260 --> 00:52:55,530
doing the single thing where you're

00:52:53,730 --> 00:52:56,940
replying to the emails right now so I

00:52:55,530 --> 00:53:00,060
don't know if you can think of any

00:52:56,940 --> 00:53:02,140
questions but you have an email address

00:53:00,060 --> 00:53:03,880
so the questions can go by the email

00:53:02,140 --> 00:53:08,220
yes gonna do the question of blame I

00:53:03,880 --> 00:53:08,220
think yeah okay so thank you very much

00:53:08,690 --> 00:53:11,820

YouTube URL: https://www.youtube.com/watch?v=r1dwnffGkqc


