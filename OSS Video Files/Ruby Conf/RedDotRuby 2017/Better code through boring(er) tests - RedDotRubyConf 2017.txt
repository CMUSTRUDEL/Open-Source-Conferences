Title: Better code through boring(er) tests - RedDotRubyConf 2017
Publication date: 2020-01-22
Playlist: RedDotRuby 2017
Description: 
	Speaker: Betsy Haibel

Event Page: http://www.reddotrubyconf.com/

Produced by Engineers.SG

Help us caption & translate this video!

http://amara.org/v/8HYT/
Captions: 
	00:00:04,110 --> 00:00:08,610
good afternoon everyone thank you for

00:00:06,510 --> 00:00:11,080
having me here this afternoon we're

00:00:08,610 --> 00:00:13,360
going to be talking about testing a bit

00:00:11,080 --> 00:00:15,250
I'm assuming for this talk that everyone

00:00:13,360 --> 00:00:18,939
in this room two things about everyone

00:00:15,250 --> 00:00:22,150
in this room first off that you love

00:00:18,939 --> 00:00:24,580
testing at least in theory and second

00:00:22,150 --> 00:00:26,860
off that when it comes to your actual

00:00:24,580 --> 00:00:29,529
test the ones you're actually dealing

00:00:26,860 --> 00:00:33,340
with on a day to day basis you maybe

00:00:29,529 --> 00:00:35,650
love those a little less everyone values

00:00:33,340 --> 00:00:37,449
testing in the rails community now in

00:00:35,650 --> 00:00:40,090
the Ruby community we kind of won that

00:00:37,449 --> 00:00:41,890
battle and this is great even people who

00:00:40,090 --> 00:00:44,409
maybe don't find as much value in

00:00:41,890 --> 00:00:46,600
test-driven development or in other

00:00:44,409 --> 00:00:50,620
specific testing practices still agree

00:00:46,600 --> 00:00:52,600
that you need some kind of testing we

00:00:50,620 --> 00:00:55,780
find about testing even though we

00:00:52,600 --> 00:00:58,379
collectively value it because pretty

00:00:55,780 --> 00:01:01,210
much no one loves testing all the time

00:00:58,379 --> 00:01:06,310
even dyed-in-the-wool TDD fanatics like

00:01:01,210 --> 00:01:10,710
me it's okay to admit this the testing

00:01:06,310 --> 00:01:10,710
police are not in fact coming for you

00:01:11,280 --> 00:01:16,330
today I'm going to help you fix that

00:01:13,630 --> 00:01:18,370
mess today we are going to learn why we

00:01:16,330 --> 00:01:20,140
hate our tests and why we fight about

00:01:18,370 --> 00:01:21,730
them we're also going to learn about

00:01:20,140 --> 00:01:23,650
some ways that we accidentally make our

00:01:21,730 --> 00:01:27,400
tests course by adding cancelling and

00:01:23,650 --> 00:01:29,800
making them a little too interesting all

00:01:27,400 --> 00:01:31,420
is not lost though we are also going to

00:01:29,800 --> 00:01:33,850
learn about how to fix the ways we

00:01:31,420 --> 00:01:35,410
accidentally make our tests worse while

00:01:33,850 --> 00:01:36,850
we're at it we'll learn about how we can

00:01:35,410 --> 00:01:39,909
make our application code better at the

00:01:36,850 --> 00:01:43,060
same time at the end of the day all I

00:01:39,909 --> 00:01:44,560
want as a developer is boring code that

00:01:43,060 --> 00:01:49,270
I know that in four months I will

00:01:44,560 --> 00:01:50,800
understand in order to do this first

00:01:49,270 --> 00:01:52,870
we're going to talk generally about some

00:01:50,800 --> 00:01:56,110
underlying causes of test pavÃ©d and

00:01:52,870 --> 00:01:57,670
fights about testing then we're going to

00:01:56,110 --> 00:01:59,530
cost through three specific ways that

00:01:57,670 --> 00:02:03,220
our tests can get annoying and learn how

00:01:59,530 --> 00:02:05,590
to fix their root causes so why do we

00:02:03,220 --> 00:02:07,600
hate our tests the simple answer is that

00:02:05,590 --> 00:02:12,040
test our code and code is terrible and

00:02:07,600 --> 00:02:13,599
therefore tests are terrible but getting

00:02:12,040 --> 00:02:16,480
a little bit less snark and a little

00:02:13,599 --> 00:02:18,909
more real we write our tests with

00:02:16,480 --> 00:02:20,350
imperfect knowledge we also write our

00:02:18,909 --> 00:02:22,840
application code with imperfect

00:02:20,350 --> 00:02:23,610
knowledge we can make educated guesses

00:02:22,840 --> 00:02:25,830
about

00:02:23,610 --> 00:02:28,770
we'll meet in the future but that's all

00:02:25,830 --> 00:02:30,420
they are is guesses we can never get

00:02:28,770 --> 00:02:32,250
away from our assumptions or from our

00:02:30,420 --> 00:02:34,410
current mental model when we write

00:02:32,250 --> 00:02:38,160
application code and of course our tests

00:02:34,410 --> 00:02:39,840
run in the same group now whenever I've

00:02:38,160 --> 00:02:41,910
made some incorrect assumptions in our

00:02:39,840 --> 00:02:45,690
code base and this has made our tests or

00:02:41,910 --> 00:02:48,210
application code or both really painful

00:02:45,690 --> 00:02:50,300
to work with there's always going to use

00:02:48,210 --> 00:02:55,140
some guide and we'll td2 fanatics like

00:02:50,300 --> 00:02:57,810
me who insist on making a total jerk of

00:02:55,140 --> 00:03:00,750
themselves they will say it is not a

00:02:57,810 --> 00:03:03,930
problem why don't you just try listening

00:03:00,750 --> 00:03:06,230
to your tests and I of course know this

00:03:03,930 --> 00:03:09,120
because I have been the strict before

00:03:06,230 --> 00:03:11,400
but why it is listening to your tab I've

00:03:09,120 --> 00:03:15,239
just listened to your test such a jerky

00:03:11,400 --> 00:03:18,480
and annoying thing to say you're

00:03:15,239 --> 00:03:20,670
presenting your listener with this you

00:03:18,480 --> 00:03:22,620
are giving someone this useless hole

00:03:20,670 --> 00:03:24,420
written math and then you are telling

00:03:22,620 --> 00:03:26,250
them they're stupid if they do not

00:03:24,420 --> 00:03:30,120
magically understand what the question

00:03:26,250 --> 00:03:32,820
marks are and like I used to do this and

00:03:30,120 --> 00:03:35,130
so I know to where people who say just

00:03:32,820 --> 00:03:39,510
try listening to your test means say is

00:03:35,130 --> 00:03:40,950
I see something wrong and I kind of know

00:03:39,510 --> 00:03:42,870
how to fix it I think please just give

00:03:40,950 --> 00:03:46,590
me a chance

00:03:42,870 --> 00:03:49,890
and so in this talk I want to fill in

00:03:46,590 --> 00:03:51,510
the question marks a bit I want to fill

00:03:49,890 --> 00:03:55,860
these in but no one here has to feel

00:03:51,510 --> 00:03:57,390
stupid or sound like a jerk again before

00:03:55,860 --> 00:04:00,150
I get started everyone takes deep breath

00:03:57,390 --> 00:04:07,049
bad code happens and bad test happens

00:04:00,150 --> 00:04:08,610
this is fine totally fine code is

00:04:07,049 --> 00:04:11,280
terrible because the world is complex

00:04:08,610 --> 00:04:13,080
and well it's good to be honest with

00:04:11,280 --> 00:04:16,850
ourselves about when complexity is

00:04:13,080 --> 00:04:19,430
useful or necessary complexity happens

00:04:16,850 --> 00:04:23,100
we are paid a lot of money because

00:04:19,430 --> 00:04:25,200
complexity happens complexity happening

00:04:23,100 --> 00:04:27,180
to you does not mean you are bad

00:04:25,200 --> 00:04:31,530
developer or a bad human it just means

00:04:27,180 --> 00:04:33,150
that this is a hard job also sometimes

00:04:31,530 --> 00:04:33,930
you actually need an esoteric testing

00:04:33,150 --> 00:04:35,770
techniques

00:04:33,930 --> 00:04:37,780
none of these techniques that are

00:04:35,770 --> 00:04:40,240
thought to talk about as the test smells

00:04:37,780 --> 00:04:45,130
are inherently bad they just can be

00:04:40,240 --> 00:04:47,650
overused finally I have done every

00:04:45,130 --> 00:04:50,170
single thing I was out to show you in

00:04:47,650 --> 00:04:52,330
production especially the parts I say

00:04:50,170 --> 00:04:54,520
are bad every talk I give is me

00:04:52,330 --> 00:04:56,380
lecturing my past self about a mistake I

00:04:54,520 --> 00:04:57,370
have learned better from and this talk

00:04:56,380 --> 00:05:00,930
is no exception

00:04:57,370 --> 00:05:03,040
so if that out of the way let's begin

00:05:00,930 --> 00:05:05,610
the first test smell we are going to

00:05:03,040 --> 00:05:07,540
look at today is testing private methods

00:05:05,610 --> 00:05:10,990
when you see this line of code in the

00:05:07,540 --> 00:05:15,730
test chances are someone is using it to

00:05:10,990 --> 00:05:16,960
test a private method now I've heard a

00:05:15,730 --> 00:05:19,240
lot of different justifications for

00:05:16,960 --> 00:05:20,740
testing private methods directly instead

00:05:19,240 --> 00:05:23,560
it indirectly through public methods

00:05:20,740 --> 00:05:25,960
they boil down to three things first

00:05:23,560 --> 00:05:29,080
method might have weird indirect results

00:05:25,960 --> 00:05:31,300
that were hard to introspect otherwise

00:05:29,080 --> 00:05:33,510
maybe the public methods were you used

00:05:31,300 --> 00:05:36,040
to test it we're really expensive

00:05:33,510 --> 00:05:37,890
maybe you've instead also wanted to

00:05:36,040 --> 00:05:40,960
isolate this process from side effects

00:05:37,890 --> 00:05:43,210
these reasons are valid reasons that are

00:05:40,960 --> 00:05:44,710
hard to argue with even if you're

00:05:43,210 --> 00:05:47,320
feeling uncomfortable about testing a

00:05:44,710 --> 00:05:49,030
private method so I suggest that we not

00:05:47,320 --> 00:05:53,230
try to confront these arguments and

00:05:49,030 --> 00:05:55,030
instead sidestep them instead you can

00:05:53,230 --> 00:05:57,490
just make the method public which is

00:05:55,030 --> 00:05:59,050
jokey but underrated if you're feeling a

00:05:57,490 --> 00:06:01,990
need to hit something directly and test

00:05:59,050 --> 00:06:03,430
it's probably important it might be

00:06:01,990 --> 00:06:05,740
important that you need to hidden your

00:06:03,430 --> 00:06:08,170
application code someday maybe from

00:06:05,740 --> 00:06:09,850
admin interface or something you can

00:06:08,170 --> 00:06:12,130
also use this as an opportunity to build

00:06:09,850 --> 00:06:13,690
more introspection logics if it's hard

00:06:12,130 --> 00:06:15,420
to check on whether a process completed

00:06:13,690 --> 00:06:17,950
in tests then when you're debugging

00:06:15,420 --> 00:06:20,140
later on it's also going to hard to

00:06:17,950 --> 00:06:23,920
check on that done to your future self

00:06:20,140 --> 00:06:25,900
at favor finally you can also extract a

00:06:23,920 --> 00:06:28,090
simple class there's a quick and dirty

00:06:25,900 --> 00:06:30,070
way to do this to use a shim this is

00:06:28,090 --> 00:06:32,350
kind of like which opt out earlier in

00:06:30,070 --> 00:06:35,080
the functional programming talk where

00:06:32,350 --> 00:06:38,020
you create a simple class and the

00:06:35,080 --> 00:06:39,880
difference is you're not different so

00:06:38,020 --> 00:06:41,350
thing you're doing here is literally

00:06:39,880 --> 00:06:44,100
just copying and pasting the code from

00:06:41,350 --> 00:06:45,940
the old method into the new class and

00:06:44,100 --> 00:06:48,579
refactoring down roots at your leisure

00:06:45,940 --> 00:06:50,219
this is quick this is Chi

00:06:48,579 --> 00:06:52,269
and there's nothing wrong with that

00:06:50,219 --> 00:06:53,709
maybe there are other private methods

00:06:52,269 --> 00:06:55,299
you need to pull in in which they expect

00:06:53,709 --> 00:06:57,909
actually super awesome because you're

00:06:55,299 --> 00:06:59,139
figuring out a new domain concept this

00:06:57,909 --> 00:07:01,119
gem technique might get you someplace

00:06:59,139 --> 00:07:04,449
useful quickly it might not if it

00:07:01,119 --> 00:07:06,369
doesn't maybe you pull on the thread and

00:07:04,449 --> 00:07:09,219
gone the tangle and it's not productive

00:07:06,369 --> 00:07:10,629
to fix that tangle right now if you

00:07:09,219 --> 00:07:14,229
can't get someplace with this technique

00:07:10,629 --> 00:07:16,209
quickly it's okay to fix it later

00:07:14,229 --> 00:07:18,549
it's okay to fix it later it's more than

00:07:16,209 --> 00:07:21,129
okay it's better because we think you

00:07:18,549 --> 00:07:22,389
are learning when you go oh this is

00:07:21,129 --> 00:07:26,079
harder than I thought is that you don't

00:07:22,389 --> 00:07:28,239
know enough yet in the meantime it's

00:07:26,079 --> 00:07:31,769
fine to practice harm reduction it's

00:07:28,239 --> 00:07:37,089
fine to leave the code deliberately ugly

00:07:31,769 --> 00:07:39,069
in tests and in your application code as

00:07:37,089 --> 00:07:41,619
well because that's the signal of the

00:07:39,069 --> 00:07:45,339
future that there's something wrong here

00:07:41,619 --> 00:07:47,319
maybe leave a to-do comment that way

00:07:45,339 --> 00:07:51,759
when you do know more you can come back

00:07:47,319 --> 00:07:53,079
and fix it later the next smell we're

00:07:51,759 --> 00:07:57,519
going to covering this afternoon is

00:07:53,079 --> 00:07:59,019
duplicate test so for this one imagine

00:07:57,519 --> 00:08:00,789
if you will that we're running a

00:07:59,019 --> 00:08:04,419
donation service that works with

00:08:00,789 --> 00:08:06,209
nonprofits and our clients nonprofits we

00:08:04,419 --> 00:08:08,559
serve each had a primary contact phone

00:08:06,209 --> 00:08:09,969
we can look up whether the phones are

00:08:08,559 --> 00:08:16,209
mobile or not and here's some tests that

00:08:09,969 --> 00:08:17,709
do that we set the clients phone number

00:08:16,209 --> 00:08:19,629
to a predetermined phone that we know is

00:08:17,709 --> 00:08:21,909
mobile and then check the result of that

00:08:19,629 --> 00:08:25,059
mobile phone method then we know do the

00:08:21,909 --> 00:08:26,739
same for none landline phone I'm using

00:08:25,059 --> 00:08:28,779
mini tests here in these code samples at

00:08:26,739 --> 00:08:30,129
least common denominator but I want to

00:08:28,779 --> 00:08:32,079
reassure you all that everything I'm

00:08:30,129 --> 00:08:34,029
saying this shock applies to our spec to

00:08:32,079 --> 00:08:36,179
the syntax of these two tests is

00:08:34,029 --> 00:08:39,099
different but the semantics are the same

00:08:36,179 --> 00:08:42,159
there's very little meaningful

00:08:39,099 --> 00:08:44,649
difference in how we write tests between

00:08:42,159 --> 00:08:47,800
death tests mobile phones and it can

00:08:44,649 --> 00:08:49,449
have a mobile phone do both are bound in

00:08:47,800 --> 00:08:51,069
test cases where we set a client phone

00:08:49,449 --> 00:08:54,579
number and then verify that a method

00:08:51,069 --> 00:08:55,720
returns the thing we expect anyway so

00:08:54,579 --> 00:08:56,860
you've got these clients you need to

00:08:55,720 --> 00:08:58,529
know whether they're using a mobile

00:08:56,860 --> 00:09:01,110
phone our landline phone

00:08:58,529 --> 00:09:03,089
and unsurprisingly you also need to know

00:09:01,110 --> 00:09:05,610
this about your donors who also have

00:09:03,089 --> 00:09:07,829
phone numbers so we test this the same

00:09:05,610 --> 00:09:10,949
way and now we've got some test

00:09:07,829 --> 00:09:13,350
duplication I don't know about you but

00:09:10,949 --> 00:09:15,660
anytime I see code duplication in app

00:09:13,350 --> 00:09:17,249
code or in tests it makes my brain feel

00:09:15,660 --> 00:09:21,420
a little weird it makes me go there's

00:09:17,249 --> 00:09:23,699
something here what do I do with it so

00:09:21,420 --> 00:09:25,649
how do we deal with this now there's a

00:09:23,699 --> 00:09:28,499
wrong way that's very tempting first

00:09:25,649 --> 00:09:30,449
which is shared example groups there's a

00:09:28,499 --> 00:09:32,040
special DSL for these and r-spec in mini

00:09:30,449 --> 00:09:33,629
tests we just share code between the two

00:09:32,040 --> 00:09:36,629
test classes like in our application

00:09:33,629 --> 00:09:38,430
code name you look you module so you can

00:09:36,629 --> 00:09:40,680
fling all the shared code into module

00:09:38,430 --> 00:09:43,740
and then include that module in our test

00:09:40,680 --> 00:09:45,509
classes well this is a valid testing

00:09:43,740 --> 00:09:47,879
technique in some circumstances I am

00:09:45,509 --> 00:09:49,499
client as a mistake here because it

00:09:47,879 --> 00:09:52,680
should almost never be your first no -

00:09:49,499 --> 00:09:54,600
when you see test application when you

00:09:52,680 --> 00:09:59,220
look at the application code or test we

00:09:54,600 --> 00:10:01,860
can see why our test as is very common

00:09:59,220 --> 00:10:04,050
are basically just a one-to-one mirror

00:10:01,860 --> 00:10:06,180
of our application code and that means

00:10:04,050 --> 00:10:08,250
that our tests are making the exact same

00:10:06,180 --> 00:10:11,339
assumptions that our application code is

00:10:08,250 --> 00:10:13,620
making over time that will lock us into

00:10:11,339 --> 00:10:15,300
these assumptions when we go to refactor

00:10:13,620 --> 00:10:17,430
the code later we'll be changing the

00:10:15,300 --> 00:10:18,779
application code but not the test or

00:10:17,430 --> 00:10:20,040
maybe we'll be frustrated by future

00:10:18,779 --> 00:10:21,899
requests that can flick with test

00:10:20,040 --> 00:10:23,550
assumptions and therefore require us to

00:10:21,899 --> 00:10:27,120
change a lot of test code as well as add

00:10:23,550 --> 00:10:28,769
new application code we could also try

00:10:27,120 --> 00:10:31,290
reducing duplication by testing the

00:10:28,769 --> 00:10:33,480
module directly here you create a fake

00:10:31,290 --> 00:10:35,399
mini class and include the module in it

00:10:33,480 --> 00:10:37,620
and then run your module test against

00:10:35,399 --> 00:10:39,360
that eighth class and again this is a

00:10:37,620 --> 00:10:43,259
great technique when you actually watch

00:10:39,360 --> 00:10:44,699
to have a module but it ties you to the

00:10:43,259 --> 00:10:47,309
assumption that the code needs to go

00:10:44,699 --> 00:10:51,179
into a module and that assumptions might

00:10:47,309 --> 00:10:53,670
not hold true if we turn the module into

00:10:51,179 --> 00:10:55,980
a class instead and test that class

00:10:53,670 --> 00:10:57,389
directly we reduce duplication in much

00:10:55,980 --> 00:10:59,249
the same way that we reduced it when we

00:10:57,389 --> 00:11:02,790
extract as a shared example group the

00:10:59,249 --> 00:11:05,009
test of module directly but in addition

00:11:02,790 --> 00:11:06,629
to reduce the net duplication we're also

00:11:05,009 --> 00:11:09,629
improving our application code at the

00:11:06,629 --> 00:11:11,309
same time by listening to the offered

00:11:09,629 --> 00:11:11,700
duplication our tests you're able to see

00:11:11,309 --> 00:11:13,410
it

00:11:11,700 --> 00:11:15,570
cluster of shared functionality and

00:11:13,410 --> 00:11:17,130
improve our application code by properly

00:11:15,570 --> 00:11:19,320
encapsulating the single responsibility

00:11:17,130 --> 00:11:20,790
of phone number lookup this is a much

00:11:19,320 --> 00:11:22,530
more sustainable solution in the way is

00:11:20,790 --> 00:11:24,000
a shared example group double down on

00:11:22,530 --> 00:11:26,670
the module architecture and locked us

00:11:24,000 --> 00:11:28,830
into it long term I'm out of this

00:11:26,670 --> 00:11:31,290
example after a lot of times I've seen

00:11:28,830 --> 00:11:33,030
API clients in charge of modules but I

00:11:31,290 --> 00:11:34,650
can apply anytime you've got a module

00:11:33,030 --> 00:11:41,700
that really wants to grow up into a real

00:11:34,650 --> 00:11:43,440
class the last test smell I'm going to

00:11:41,700 --> 00:11:46,560
cover this afternoon is inventing the

00:11:43,440 --> 00:11:48,480
universe there's a particular kind of

00:11:46,560 --> 00:11:50,060
test where to paraphrase Carl Sagan

00:11:48,480 --> 00:11:52,980
we're trying to bake an apple pie

00:11:50,060 --> 00:11:54,450
seriously from scratch and so you need

00:11:52,980 --> 00:11:56,010
to invent universe first you need to

00:11:54,450 --> 00:11:58,050
plants and trees you need to water them

00:11:56,010 --> 00:12:02,670
pick the apples and harvest the flower

00:11:58,050 --> 00:12:06,390
and and and and finally you can test the

00:12:02,670 --> 00:12:07,770
pie came out tasty the first stupid

00:12:06,390 --> 00:12:09,990
thing we can do when faced with an

00:12:07,770 --> 00:12:11,550
obviously ugly test like this it's to do

00:12:09,990 --> 00:12:12,210
something about the issue set up it

00:12:11,550 --> 00:12:15,240
right away

00:12:12,210 --> 00:12:17,340
this hurts our job as developers is

00:12:15,240 --> 00:12:19,140
organizing complexity and so we see when

00:12:17,340 --> 00:12:21,720
we see complexity that is not organized

00:12:19,140 --> 00:12:24,530
it sets up this itch at the back of our

00:12:21,720 --> 00:12:27,240
skull but boring tests make boring code

00:12:24,530 --> 00:12:29,820
if you made any new test abstractions

00:12:27,240 --> 00:12:31,740
now we'd be doomed the same mirroring

00:12:29,820 --> 00:12:34,140
nonsense we just learned how to refactor

00:12:31,740 --> 00:12:38,700
away from this is because we only have a

00:12:34,140 --> 00:12:41,610
little bit of domain knowledge so far we

00:12:38,700 --> 00:12:43,350
know 12 lines of code about your name we

00:12:41,610 --> 00:12:45,360
understand one possible path for

00:12:43,350 --> 00:12:47,400
creating one kind of tie and we know

00:12:45,360 --> 00:12:50,510
that one possible path is required for

00:12:47,400 --> 00:12:52,920
application we do not know anything else

00:12:50,510 --> 00:12:55,440
anything we did to abstract this first

00:12:52,920 --> 00:12:56,970
there would be total guesswork be using

00:12:55,440 --> 00:12:58,500
our current understanding of and

00:12:56,970 --> 00:13:03,090
assumptions about the problem come in to

00:12:58,500 --> 00:13:04,770
guess it's abstractions you know what

00:13:03,090 --> 00:13:06,060
we've also been using our current

00:13:04,770 --> 00:13:08,220
knowledge and our current assumptions to

00:13:06,060 --> 00:13:10,350
create abstractions yeah that's right

00:13:08,220 --> 00:13:12,660
our application code when you try to

00:13:10,350 --> 00:13:14,610
make new test abstractions in advance of

00:13:12,660 --> 00:13:16,230
test duplication you risk making

00:13:14,610 --> 00:13:19,050
parallel abstractions to your

00:13:16,230 --> 00:13:23,150
application code just like we saw in the

00:13:19,050 --> 00:13:25,520
module extraction example once

00:13:23,150 --> 00:13:27,230
multiple test cases we actually have

00:13:25,520 --> 00:13:29,570
enough information that we can start to

00:13:27,230 --> 00:13:31,520
tell where our abstractions are once

00:13:29,570 --> 00:13:33,050
we've got multiple test cases we can

00:13:31,520 --> 00:13:34,880
actually start thinking about tests

00:13:33,050 --> 00:13:42,050
about techniques we can use to encode

00:13:34,880 --> 00:13:43,850
those abstractions now just like in the

00:13:42,050 --> 00:13:45,800
last section I'm going to show you two

00:13:43,850 --> 00:13:47,420
ways I've seen people make mistakes by

00:13:45,800 --> 00:13:49,790
trying to encapsulate abstractions

00:13:47,420 --> 00:13:51,200
within tests only code then I'm going to

00:13:49,790 --> 00:13:52,310
show you an application code only

00:13:51,200 --> 00:13:55,040
approach that I recommend is an

00:13:52,310 --> 00:13:56,330
alternative not also that in this

00:13:55,040 --> 00:13:59,120
section things start to get a little

00:13:56,330 --> 00:14:01,010
less clear-cut the test approach is I'm

00:13:59,120 --> 00:14:02,840
going to show you while they can bite

00:14:01,010 --> 00:14:05,270
you if you use an improv inappropriately

00:14:02,840 --> 00:14:08,900
they do have a lot of student leaders

00:14:05,270 --> 00:14:09,980
minute uses the first test approach I'm

00:14:08,900 --> 00:14:13,700
going to tell you about is shared

00:14:09,980 --> 00:14:15,440
context our spec of the DSL for this

00:14:13,700 --> 00:14:17,420
again but in many tests what you need to

00:14:15,440 --> 00:14:20,140
do is write a method and included your

00:14:17,420 --> 00:14:23,480
setup block and what our spec does is

00:14:20,140 --> 00:14:25,220
metaphorically equivalent to this maybe

00:14:23,480 --> 00:14:27,100
you can even include the setup method in

00:14:25,220 --> 00:14:28,820
the module shared between test classes

00:14:27,100 --> 00:14:30,680
what you're going with the shared

00:14:28,820 --> 00:14:33,500
context can also it can often be pretty

00:14:30,680 --> 00:14:35,150
benign methodically reinventing the

00:14:33,500 --> 00:14:37,790
universe from scratch every time you

00:14:35,150 --> 00:14:42,380
write a test is painful and often times

00:14:37,790 --> 00:14:43,730
it is not a useful pain for example if

00:14:42,380 --> 00:14:45,980
your application is a database it is

00:14:43,730 --> 00:14:47,390
okay to extract database cleaning logic

00:14:45,980 --> 00:14:49,820
to a shared context or our health or

00:14:47,390 --> 00:14:51,380
file there isn't much of anything you

00:14:49,820 --> 00:14:52,760
can or should do in your application

00:14:51,380 --> 00:14:59,240
code about something that's test

00:14:52,760 --> 00:15:00,950
specific in production it is kind of

00:14:59,240 --> 00:15:03,170
unlikely that ordinary day-to-day

00:15:00,950 --> 00:15:06,320
procedures would require you to drop or

00:15:03,170 --> 00:15:08,150
otherwise clean a database maybe you're

00:15:06,320 --> 00:15:09,500
doing some scary CI things or a baby

00:15:08,150 --> 00:15:11,170
you're just doing something scary I

00:15:09,500 --> 00:15:14,150
don't know but like bog-standard

00:15:11,170 --> 00:15:17,810
applications I don't usually drop my

00:15:14,150 --> 00:15:19,280
database so this is an easy case of

00:15:17,810 --> 00:15:21,170
telling something it's test specific

00:15:19,280 --> 00:15:22,250
from something that isn't but sometimes

00:15:21,170 --> 00:15:26,480
the things are going to a little less

00:15:22,250 --> 00:15:28,010
clear-cut we've stripped out all of the

00:15:26,480 --> 00:15:29,630
in essential lines the test all the

00:15:28,010 --> 00:15:31,760
things that don't matter in our

00:15:29,630 --> 00:15:33,260
production code and we still have an

00:15:31,760 --> 00:15:35,000
extended test setup

00:15:33,260 --> 00:15:37,820
it's fine that an object has a lot of

00:15:35,000 --> 00:15:39,530
dependencies it is always wise to

00:15:37,820 --> 00:15:43,520
examine whether these dependencies are

00:15:39,530 --> 00:15:46,340
necessary but sometimes they are so the

00:15:43,520 --> 00:15:49,790
conversations shouldn't stop there a pie

00:15:46,340 --> 00:15:51,350
without a filling is pretty sad and so

00:15:49,790 --> 00:15:53,630
while I'm going to plaid a shared

00:15:51,350 --> 00:15:55,880
context here as a warning sign I don't

00:15:53,630 --> 00:15:57,350
want to talk down jail here by implying

00:15:55,880 --> 00:15:59,450
the domain complexities of your

00:15:57,350 --> 00:16:01,400
production apps are the product of

00:15:59,450 --> 00:16:04,070
unnecessary or easy to remove

00:16:01,400 --> 00:16:08,000
dependencies my experience is that that

00:16:04,070 --> 00:16:10,850
is never the case luckily though the

00:16:08,000 --> 00:16:13,690
mitigations for necessary domain set up

00:16:10,850 --> 00:16:15,860
complexities and for unnecessary

00:16:13,690 --> 00:16:18,470
complexities you don't quite know how to

00:16:15,860 --> 00:16:20,930
remove yet are pretty similar we'll get

00:16:18,470 --> 00:16:25,760
them in a bit but first I want to cover

00:16:20,930 --> 00:16:28,070
one more false trail I should emphasize

00:16:25,760 --> 00:16:32,030
first but this is not a rant against

00:16:28,070 --> 00:16:34,310
factory girl I used in many projects it

00:16:32,030 --> 00:16:37,340
is a great DSL for describing tests and

00:16:34,310 --> 00:16:41,390
feed data when used effectively it just

00:16:37,340 --> 00:16:43,030
has a few traps factory girl enables and

00:16:41,390 --> 00:16:45,860
encourages us to make factories

00:16:43,030 --> 00:16:49,220
dedicated test setup helpers such as

00:16:45,860 --> 00:16:52,160
line factory girl create pie makes a pie

00:16:49,220 --> 00:16:54,230
of the filling and the line factory girl

00:16:52,160 --> 00:16:58,790
that create filling creates a filling

00:16:54,230 --> 00:17:00,800
with a pie I could say with like shared

00:16:58,790 --> 00:17:03,500
context the problem here is hidden

00:17:00,800 --> 00:17:05,770
dependencies that we are hiding the

00:17:03,500 --> 00:17:09,170
dependency of supplies have on fillings

00:17:05,770 --> 00:17:10,520
but in both cases if I stopped there we

00:17:09,170 --> 00:17:12,709
would go back to the magic and

00:17:10,520 --> 00:17:15,950
particularly arrogant elves definition

00:17:12,709 --> 00:17:19,160
of listening to your tests the real

00:17:15,950 --> 00:17:23,360
problem is never that something hides

00:17:19,160 --> 00:17:27,170
dependencies dependencies means code I

00:17:23,360 --> 00:17:31,460
am NOT looking at right now 95% of the

00:17:27,170 --> 00:17:32,660
time that is on purpose I want to be

00:17:31,460 --> 00:17:34,370
able to look at my dependencies when

00:17:32,660 --> 00:17:36,410
they misbehave but the rest of the time

00:17:34,370 --> 00:17:37,790
I put some of those other files I didn't

00:17:36,410 --> 00:17:39,170
need to think about them right now and I

00:17:37,790 --> 00:17:42,670
want them to stay there and I want to

00:17:39,170 --> 00:17:42,670
stay not thinking about

00:17:42,920 --> 00:17:48,560
the public tests that hide dependencies

00:17:45,800 --> 00:17:51,560
comes in when the dependencies that

00:17:48,560 --> 00:17:53,780
they're hiding is the domain logic as a

00:17:51,560 --> 00:17:55,070
maintenance developer I love to know we

00:17:53,780 --> 00:17:56,810
make ceilings in the course of making

00:17:55,070 --> 00:18:00,590
pies that's actually very important

00:17:56,810 --> 00:18:02,210
information for me to have so I'd like

00:18:00,590 --> 00:18:04,730
to suggest that when your test cells get

00:18:02,210 --> 00:18:06,410
complex you start thinking about how to

00:18:04,730 --> 00:18:08,120
move the important things that your test

00:18:06,410 --> 00:18:13,880
setups tell you about your domain into

00:18:08,120 --> 00:18:16,100
your application now there are a few

00:18:13,880 --> 00:18:17,360
different ways to do this you can pull

00:18:16,100 --> 00:18:20,330
more of the set-up logic into the

00:18:17,360 --> 00:18:23,360
constructor for example you can also

00:18:20,330 --> 00:18:24,920
make factory methods on class maybe

00:18:23,360 --> 00:18:28,150
these are a shorthand for invoking the

00:18:24,920 --> 00:18:31,580
constructor with certain configuration

00:18:28,150 --> 00:18:34,220
you can even go full Java and build out

00:18:31,580 --> 00:18:36,620
honest-to-god Factory classes there is

00:18:34,220 --> 00:18:41,420
nothing wrong with going full Java if

00:18:36,620 --> 00:18:43,190
your application needs that we usually

00:18:41,420 --> 00:18:45,620
hide this logic and factory gorilla

00:18:43,190 --> 00:18:47,540
trails developers but when we decide to

00:18:45,620 --> 00:18:48,980
dig it out instead what we are doing is

00:18:47,540 --> 00:18:51,590
saying that this piece of business logic

00:18:48,980 --> 00:18:54,830
is too important to delegate to our

00:18:51,590 --> 00:18:56,780
framework it's like when we're startup

00:18:54,830 --> 00:18:59,150
we maybe want to get an agency to build

00:18:56,780 --> 00:19:01,430
a prototype but then later you want to

00:18:59,150 --> 00:19:03,920
say thanks you need to bring development

00:19:01,430 --> 00:19:05,840
in-house getting core business logic

00:19:03,920 --> 00:19:08,060
under your own control rather than the

00:19:05,840 --> 00:19:10,250
controls of your framework is important

00:19:08,060 --> 00:19:13,490
in itself even if your factories state

00:19:10,250 --> 00:19:15,440
test only if all our factory objects do

00:19:13,490 --> 00:19:19,060
is make logic flow clear to developers

00:19:15,440 --> 00:19:19,060
and they are pulling their own weight

00:19:19,390 --> 00:19:23,780
let's look at some more foreign actors

00:19:21,650 --> 00:19:25,580
make this more concrete this entire

00:19:23,780 --> 00:19:27,110
invent the universe test looks before we

00:19:25,580 --> 00:19:30,500
started extracting some of its logic

00:19:27,110 --> 00:19:32,870
into factory methods and here's where we

00:19:30,500 --> 00:19:38,090
can get to by using application code

00:19:32,870 --> 00:19:39,620
factories judiciously note just how much

00:19:38,090 --> 00:19:41,900
code we were able to move into the

00:19:39,620 --> 00:19:45,400
application we're later developers can

00:19:41,900 --> 00:19:45,400
discover and understand it better and

00:19:45,460 --> 00:19:49,730
because we've lost enough lines to

00:19:47,510 --> 00:19:51,890
actually fit this on our screen in a way

00:19:49,730 --> 00:19:55,150
that isn't a scare tactic let's victory

00:19:51,890 --> 00:19:55,150
laugh I'm going to bump the font size

00:19:55,640 --> 00:20:00,500
scroll down net right we've got them

00:19:57,840 --> 00:20:02,670
through everything we wanted to cover

00:20:00,500 --> 00:20:05,910
not quite yet

00:20:02,670 --> 00:20:07,290
and incidentally we're not actually just

00:20:05,910 --> 00:20:08,940
doing this last bit because it let me

00:20:07,290 --> 00:20:10,620
make a DC flag but I could not resist

00:20:08,940 --> 00:20:14,640
this pretty moment of compound pride

00:20:10,620 --> 00:20:17,640
here so it's just the funny magic tricks

00:20:14,640 --> 00:20:20,280
by insisting that our test be as boring

00:20:17,640 --> 00:20:22,050
as humanly possible we have isolated the

00:20:20,280 --> 00:20:24,080
main concepts that we can use to also

00:20:22,050 --> 00:20:26,970
make our application code more readable

00:20:24,080 --> 00:20:30,780
by insisting on boring test code we make

00:20:26,970 --> 00:20:32,610
our application code more boring but now

00:20:30,780 --> 00:20:39,360
we come to the trick part of magic

00:20:32,610 --> 00:20:43,080
tricks this is a totally subjective this

00:20:39,360 --> 00:20:46,620
is a whole series of subjective value

00:20:43,080 --> 00:20:49,590
judgments the problem lies in how we

00:20:46,620 --> 00:20:51,630
define boring valuing boring code of a

00:20:49,590 --> 00:20:54,120
clever code is a really popular idea and

00:20:51,630 --> 00:20:56,250
since we can all nod along to that

00:20:54,120 --> 00:20:58,920
popular idea we sometimes miss that it's

00:20:56,250 --> 00:21:01,890
a value judgment but if we don't define

00:20:58,920 --> 00:21:03,750
boring code very specifically all we are

00:21:01,890 --> 00:21:05,730
doing when we say clever code is bad

00:21:03,750 --> 00:21:09,150
code is creating another way to call

00:21:05,730 --> 00:21:10,920
code bad in order to convince you that

00:21:09,150 --> 00:21:12,240
I'm on the side of boring code this

00:21:10,920 --> 00:21:14,570
whole talk I've been deliberately

00:21:12,240 --> 00:21:18,180
sticking on controversial territory

00:21:14,570 --> 00:21:19,890
everyone likes removing duplications but

00:21:18,180 --> 00:21:22,380
when I talk about what I consider boring

00:21:19,890 --> 00:21:25,980
it's actually pretty hard to fail map

00:21:22,380 --> 00:21:28,410
safe ground when I say that factory

00:21:25,980 --> 00:21:30,210
girls create pie is the literal opposite

00:21:28,410 --> 00:21:31,800
of boring it's a single line that should

00:21:30,210 --> 00:21:33,570
strike fear into the hearts of any

00:21:31,800 --> 00:21:35,610
developer new to a code base and most

00:21:33,570 --> 00:21:37,560
developers old to it what I'm reacting

00:21:35,610 --> 00:21:41,160
to is a history of seeing that one line

00:21:37,560 --> 00:21:43,290
imply thousands of lines of code but I

00:21:41,160 --> 00:21:46,500
suddenly need to care about but have no

00:21:43,290 --> 00:21:49,140
easy way of searching for but the

00:21:46,500 --> 00:21:51,630
developers wrote out long they don't

00:21:49,140 --> 00:21:53,900
think so maybe they've worked on the

00:21:51,630 --> 00:21:55,920
same code base for six or seven years

00:21:53,900 --> 00:21:57,810
maybe that developer has a good

00:21:55,920 --> 00:21:59,550
intuitive feel for the thousands of

00:21:57,810 --> 00:22:01,550
lines and puts it domain knowledge and

00:21:59,550 --> 00:22:03,750
that it is that one line a factory girl

00:22:01,550 --> 00:22:05,260
they don't need pointers how to refresh

00:22:03,750 --> 00:22:07,420
their memory on specific

00:22:05,260 --> 00:22:08,980
and so they might say the Java factory

00:22:07,420 --> 00:22:12,420
version I'm recommending as useless

00:22:08,980 --> 00:22:16,960
verbosity for the sake of verbosity

00:22:12,420 --> 00:22:19,000
and this brings us to one of the central

00:22:16,960 --> 00:22:22,660
questions that defines our day to day of

00:22:19,000 --> 00:22:25,660
software developers this right here is

00:22:22,660 --> 00:22:28,540
the hard part it's the hard part because

00:22:25,660 --> 00:22:30,310
the answer changes people come up here

00:22:28,540 --> 00:22:33,400
on these stages they give keynotes and

00:22:30,310 --> 00:22:35,380
they say here I promise you can solve

00:22:33,400 --> 00:22:36,820
all your problems with this new kind of

00:22:35,380 --> 00:22:38,830
new object I am giving you

00:22:36,820 --> 00:22:40,690
or maybe they say you can solve all your

00:22:38,830 --> 00:22:42,370
problems by throwing patterns away and

00:22:40,690 --> 00:22:45,400
embracing in tightly coupled monoliths

00:22:42,370 --> 00:22:47,710
whatever the technical solution is

00:22:45,400 --> 00:22:49,630
changing these talks but the attitude

00:22:47,710 --> 00:22:54,040
there is one true solution somehow never

00:22:49,630 --> 00:22:55,990
does I could stop by saying that this

00:22:54,040 --> 00:22:58,210
attitude turns us all into that jerk who

00:22:55,990 --> 00:23:01,210
asked to lie on you just whatever uses

00:22:58,210 --> 00:23:01,930
new kind of view object but that would

00:23:01,210 --> 00:23:03,750
be lying

00:23:01,930 --> 00:23:05,950
because what's underneath that

00:23:03,750 --> 00:23:12,340
self-righteousness is the unchangeable

00:23:05,950 --> 00:23:14,500
fear of how hard this all is boring is

00:23:12,340 --> 00:23:16,840
subjective because boring depends on the

00:23:14,500 --> 00:23:20,470
background of a team and the flight

00:23:16,840 --> 00:23:22,480
cycle stage the product is in brain is

00:23:20,470 --> 00:23:23,950
subjective and boring is hard to get

00:23:22,480 --> 00:23:27,340
right and we are afraid of not getting

00:23:23,950 --> 00:23:29,710
it right and we are afraid of what right

00:23:27,340 --> 00:23:32,620
is changing on us so that even if we get

00:23:29,710 --> 00:23:38,590
it right now it suddenly becomes wrong

00:23:32,620 --> 00:23:41,230
six months down the line but if code

00:23:38,590 --> 00:23:43,990
doesn't stay right doesn't that just

00:23:41,230 --> 00:23:46,620
mean our product has grown I think

00:23:43,990 --> 00:23:46,620
that's something to celebrate

00:23:46,710 --> 00:23:51,130
to me the magic of test rooms vine of

00:23:49,600 --> 00:23:53,440
learning to hear what your tests are

00:23:51,130 --> 00:23:55,600
saying is that gives us a way to figure

00:23:53,440 --> 00:23:58,810
out what the correct code is for right

00:23:55,600 --> 00:24:00,880
now it gives us a pass through not just

00:23:58,810 --> 00:24:03,190
everyday simple decisions like should I

00:24:00,880 --> 00:24:04,720
make this method private but also party

00:24:03,190 --> 00:24:07,120
decisions that people might disagree on

00:24:04,720 --> 00:24:09,190
more loudly to talk about these hard

00:24:07,120 --> 00:24:12,100
decisions I need to talk about some

00:24:09,190 --> 00:24:16,060
controversial things that's right I'm

00:24:12,100 --> 00:24:18,220
going to talk about mocks it gets worse

00:24:16,060 --> 00:24:22,170
I'm also going to need to talk about

00:24:18,220 --> 00:24:26,830
controller tests I am even are you ready

00:24:22,170 --> 00:24:31,690
going let's you need to talk about my

00:24:26,830 --> 00:24:33,910
first services now when I think about

00:24:31,690 --> 00:24:36,930
boring code this rails controller method

00:24:33,910 --> 00:24:39,550
here is basically my Platonic ideal I

00:24:36,930 --> 00:24:41,170
want to update a blog post so I find the

00:24:39,550 --> 00:24:42,250
post in the database try to update it

00:24:41,170 --> 00:24:43,510
and render a response

00:24:42,250 --> 00:24:45,670
it reflects whether the updates

00:24:43,510 --> 00:24:47,410
succeeded or not there be a few changes

00:24:45,670 --> 00:24:49,660
to method names some security

00:24:47,410 --> 00:24:51,880
improvements etcetera in the past two

00:24:49,660 --> 00:24:54,370
rails fusions but for me of nearly a

00:24:51,880 --> 00:24:56,140
decade ago who is firming rails 2.3.5

00:24:54,370 --> 00:24:58,960
would look at this method and not find

00:24:56,140 --> 00:25:02,320
anything weird to me that's boring as

00:24:58,960 --> 00:25:04,330
hell and yet controller tests are very

00:25:02,320 --> 00:25:07,780
hard and as a community we have a lot of

00:25:04,330 --> 00:25:09,400
opinions about them here's a pretty

00:25:07,780 --> 00:25:12,370
standard taffy path test for this

00:25:09,400 --> 00:25:14,410
controller method even this simple

00:25:12,370 --> 00:25:20,110
controller method the happy path test we

00:25:14,410 --> 00:25:21,730
need to do some complicated stuff before

00:25:20,110 --> 00:25:23,380
the test even runs there's an invisible

00:25:21,730 --> 00:25:25,090
set up phase against database

00:25:23,380 --> 00:25:27,400
transactions we can get clean the

00:25:25,090 --> 00:25:29,020
database quickly later we then create a

00:25:27,400 --> 00:25:30,820
post using active record which takes

00:25:29,020 --> 00:25:33,700
only one line but can potentially invoke

00:25:30,820 --> 00:25:35,320
a lot of other code then we indirectly

00:25:33,700 --> 00:25:36,940
invoke the controller method by using

00:25:35,320 --> 00:25:39,610
rat tests to trigger the full action

00:25:36,940 --> 00:25:41,410
dispatch stack finally we test both

00:25:39,610 --> 00:25:43,000
response and also for side effects

00:25:41,410 --> 00:25:46,570
whether the post body has been updated

00:25:43,000 --> 00:25:48,520
or not this is a lot of stuff this a lot

00:25:46,570 --> 00:25:50,950
of stuff can take a lot of time to run

00:25:48,520 --> 00:25:52,990
and so in the rails community for a

00:25:50,950 --> 00:25:54,610
while there was a fashion for cutting

00:25:52,990 --> 00:25:57,910
out a lot of this time with test bevels

00:25:54,610 --> 00:25:59,140
a full discussion of test doubles is

00:25:57,910 --> 00:26:01,180
outside the scope of this talk and

00:25:59,140 --> 00:26:03,150
that's a really fun thing to say but

00:26:01,180 --> 00:26:06,880
briefly for those who aren't familiar

00:26:03,150 --> 00:26:09,400
mocks are completely fake objects so if

00:26:06,880 --> 00:26:10,690
we needed a post someplace but didn't

00:26:09,400 --> 00:26:12,550
want to go to the trouble of building

00:26:10,690 --> 00:26:14,470
one out using active record we can

00:26:12,550 --> 00:26:17,110
create a mock post but just return to

00:26:14,470 --> 00:26:19,360
test for the post body we can also

00:26:17,110 --> 00:26:21,040
create partial mocks by taking existing

00:26:19,360 --> 00:26:24,070
objects and altering them so the method

00:26:21,040 --> 00:26:26,050
always returns with subs value finally

00:26:24,070 --> 00:26:29,030
we can have either a full or partial not

00:26:26,050 --> 00:26:31,670
expect that a message will be received

00:26:29,030 --> 00:26:34,040
this means that unless meth is called

00:26:31,670 --> 00:26:41,120
during the course of that test the test

00:26:34,040 --> 00:26:42,950
will fail now here's the controller

00:26:41,120 --> 00:26:45,320
tests written during that bad usually

00:26:42,950 --> 00:26:47,420
look like looking at this you can kind

00:26:45,320 --> 00:26:50,000
of see why it fell out of style this

00:26:47,420 --> 00:26:52,580
test is much longer kind of ugly and

00:26:50,000 --> 00:26:54,110
it's super brittle if you change

00:26:52,580 --> 00:26:56,060
anything about the way that finders are

00:26:54,110 --> 00:26:58,120
being invoked in the controller all of

00:26:56,060 --> 00:27:00,560
sudden everything will shatter into red

00:26:58,120 --> 00:27:02,000
it'll shatter and red even if the code

00:27:00,560 --> 00:27:06,080
will actually does the thing you want to

00:27:02,000 --> 00:27:07,400
do and so a lot of sites that controller

00:27:06,080 --> 00:27:08,960
tests that I've seen are receiving

00:27:07,400 --> 00:27:11,210
people who look at this and ask but why

00:27:08,960 --> 00:27:13,430
would you even do that and people look

00:27:11,210 --> 00:27:15,110
at say this and say okay this is ugly

00:27:13,430 --> 00:27:16,280
but our mocks are clearly telling us

00:27:15,110 --> 00:27:19,970
something about the design of the

00:27:16,280 --> 00:27:21,860
underlying application code if you're

00:27:19,970 --> 00:27:24,010
doing test-driven design you might

00:27:21,860 --> 00:27:26,210
instead write a test looks like this

00:27:24,010 --> 00:27:28,970
begin with the interface you want to see

00:27:26,210 --> 00:27:33,170
in the world just one line of mocking so

00:27:28,970 --> 00:27:34,610
nice so simple so pretty and yet when we

00:27:33,170 --> 00:27:38,000
look at the application code that it

00:27:34,610 --> 00:27:39,620
implies how many of you actually do is

00:27:38,000 --> 00:27:41,630
in the real world how many of you are

00:27:39,620 --> 00:27:44,660
have luck convincing your co-workers to

00:27:41,630 --> 00:27:47,060
do this in the real world the code

00:27:44,660 --> 00:27:49,790
doesn't quite seem boring anymore it's

00:27:47,060 --> 00:27:51,320
not very Braille Z and these are hand

00:27:49,790 --> 00:27:55,670
wavy ways of talking about something

00:27:51,320 --> 00:27:57,560
that's very real we have made the

00:27:55,670 --> 00:27:59,330
project less discoverable we have made

00:27:57,560 --> 00:28:01,520
the project less accessible newer

00:27:59,330 --> 00:28:02,840
developers when I say newer developers

00:28:01,520 --> 00:28:04,400
please remember I am NOT talking about

00:28:02,840 --> 00:28:05,870
juniors I'm talking about people new

00:28:04,400 --> 00:28:07,460
order of projects unit developers are

00:28:05,870 --> 00:28:11,810
entirely capable of comprehending these

00:28:07,460 --> 00:28:13,730
patterns non-standard practice have

00:28:11,810 --> 00:28:16,640
their place but discover and

00:28:13,730 --> 00:28:18,050
accessibility are real values - we

00:28:16,640 --> 00:28:20,030
condescend to people who don't like

00:28:18,050 --> 00:28:21,560
non-standard patterns by implying that

00:28:20,030 --> 00:28:24,230
if they don't like them they just need

00:28:21,560 --> 00:28:26,720
to learn to code better we are retiring

00:28:24,230 --> 00:28:28,910
the rhetorical trick we are erasing the

00:28:26,720 --> 00:28:32,390
very real and very valid values michmash

00:28:28,910 --> 00:28:34,790
what's going on by telling ourselves

00:28:32,390 --> 00:28:38,140
it's a skills mismatch instead and that

00:28:34,790 --> 00:28:40,940
since we're smarter we must be right

00:28:38,140 --> 00:28:42,230
that is in the real world is okay to

00:28:40,940 --> 00:28:44,450
ignore most of the bear

00:28:42,230 --> 00:28:46,160
complexity on a controller test a lot of

00:28:44,450 --> 00:28:49,130
projects have gone back to this style of

00:28:46,160 --> 00:28:51,440
controller testing they're fine it's

00:28:49,130 --> 00:28:53,059
predictable it's easy to read we think

00:28:51,440 --> 00:28:56,090
nor the complexity buried in this test

00:28:53,059 --> 00:29:00,140
because it's framework complexity that

00:28:56,090 --> 00:29:04,160
we can trust will stay buried lotuses

00:29:00,140 --> 00:29:05,870
become an issues sure but if slowness

00:29:04,160 --> 00:29:09,020
becomes an issue then maybe the answer

00:29:05,870 --> 00:29:11,600
isn't doing complex things in the test

00:29:09,020 --> 00:29:13,610
its deleting the test if a test isn't

00:29:11,600 --> 00:29:19,429
providing you with a lot of values then

00:29:13,610 --> 00:29:21,230
why should it be there so I've just down

00:29:19,429 --> 00:29:23,770
here is traveled up and then back down

00:29:21,230 --> 00:29:26,210
and then back up the realism continuum

00:29:23,770 --> 00:29:28,190
when you're dealing with test complexity

00:29:26,210 --> 00:29:29,929
one of the things you're always doing is

00:29:28,190 --> 00:29:31,730
trading off a feel is Tritton off a

00:29:29,929 --> 00:29:33,590
feeling of realism against the ability

00:29:31,730 --> 00:29:36,470
to focus on exactly one thing at a time

00:29:33,590 --> 00:29:38,929
and when I say the feeling of realism

00:29:36,470 --> 00:29:42,770
that's very important because realism is

00:29:38,929 --> 00:29:44,330
not the goal here even if it feels like

00:29:42,770 --> 00:29:47,840
a nice security blanket when we exercise

00:29:44,330 --> 00:29:50,870
a lot of lines of test of code realism

00:29:47,840 --> 00:29:52,700
is a proxy for the ability to change the

00:29:50,870 --> 00:29:54,169
boundaries of our code arbitrarily in

00:29:52,700 --> 00:29:57,620
case we've gotten our assumptions wrong

00:29:54,169 --> 00:29:59,929
and so in this world a test book

00:29:57,620 --> 00:30:03,740
dynamically persisted objects exercises

00:29:59,929 --> 00:30:05,540
everything is risky because it tests a

00:30:03,740 --> 00:30:07,549
lot of things accidentally we aren't the

00:30:05,540 --> 00:30:09,830
thing you're necessarily looking at but

00:30:07,549 --> 00:30:13,160
also lets us arbitrarily change the

00:30:09,830 --> 00:30:14,780
object structure around a test that uses

00:30:13,160 --> 00:30:16,160
test doubles extensively on the other

00:30:14,780 --> 00:30:17,720
hand it's going to be working with a lot

00:30:16,160 --> 00:30:19,429
of assumptions that might be wrong but

00:30:17,720 --> 00:30:25,880
it's going to test a much smaller set of

00:30:19,429 --> 00:30:27,290
things and be more targeted what's

00:30:25,880 --> 00:30:28,940
interesting about this is that we be

00:30:27,290 --> 00:30:31,250
faced with pretty much the same set of

00:30:28,940 --> 00:30:33,320
concerns its instead of looking at the

00:30:31,250 --> 00:30:35,600
database directly we're retrieving posts

00:30:33,320 --> 00:30:40,580
and comments from some kind of blogging

00:30:35,600 --> 00:30:42,440
engine microservice or decide look like

00:30:40,580 --> 00:30:48,070
in this case how do we change this

00:30:42,440 --> 00:30:52,270
controller maybe it looks like this

00:30:48,070 --> 00:30:55,970
more the point how would change our test

00:30:52,270 --> 00:31:00,860
here's our test again using this very

00:30:55,970 --> 00:31:07,190
realistic boundary ability to change

00:31:00,860 --> 00:31:09,140
preserving style and active record so if

00:31:07,190 --> 00:31:11,150
we're going to maintain spirit of full

00:31:09,140 --> 00:31:13,730
realism we want to create things on the

00:31:11,150 --> 00:31:15,680
external service directly right full

00:31:13,730 --> 00:31:17,750
end-to-end test totally okay any change

00:31:15,680 --> 00:31:20,780
the test itself with this be very simple

00:31:17,750 --> 00:31:23,510
very easy to write and yet no one does

00:31:20,780 --> 00:31:26,150
this and no one does this because in

00:31:23,510 --> 00:31:29,810
those cases everything surrounding the

00:31:26,150 --> 00:31:31,940
test is totally horrible connectivity

00:31:29,810 --> 00:31:33,920
issues are the thing that everyone

00:31:31,940 --> 00:31:36,170
brings up here but even worse than

00:31:33,920 --> 00:31:38,660
connectivity issues is the fact that all

00:31:36,170 --> 00:31:41,750
the sudden we tirpat all of this test

00:31:38,660 --> 00:31:43,550
test setup and teardown ourselves real

00:31:41,750 --> 00:31:44,990
stuff a lot of work for us when we're

00:31:43,550 --> 00:31:46,640
dealing with the databases the external

00:31:44,990 --> 00:31:50,870
service were dealing with to handle that

00:31:46,640 --> 00:31:54,710
setup and teardown and it's very easy to

00:31:50,870 --> 00:31:59,510
lean on that invisible 10 years of work

00:31:54,710 --> 00:32:02,210
by open source prompt people I don't

00:31:59,510 --> 00:32:03,770
know about you but when I move into

00:32:02,210 --> 00:32:06,200
microservice libya where there's a

00:32:03,770 --> 00:32:08,420
little less support code I don't want to

00:32:06,200 --> 00:32:11,180
suddenly take on the burden of that ten

00:32:08,420 --> 00:32:13,940
years and become like personally

00:32:11,180 --> 00:32:16,040
responsible for writing a duplicate and

00:32:13,940 --> 00:32:18,710
sorriness world mocks start to look very

00:32:16,040 --> 00:32:22,640
attractive to me you basically can't

00:32:18,710 --> 00:32:25,040
operate without them okay so we're still

00:32:22,640 --> 00:32:27,020
in denial about that and so one thing we

00:32:25,040 --> 00:32:30,740
can do instead of going for a fully mock

00:32:27,020 --> 00:32:32,930
test is to preserve some of the quote

00:32:30,740 --> 00:32:34,820
unquote realism by which we actually

00:32:32,930 --> 00:32:37,550
mean the flexibility to change

00:32:34,820 --> 00:32:39,950
boundaries within the code later that in

00:32:37,550 --> 00:32:42,470
full end-to-end test could give us by

00:32:39,950 --> 00:32:45,500
using the web mock library web knock

00:32:42,470 --> 00:32:49,480
allows you to set mock responses to HTV

00:32:45,500 --> 00:32:49,480
requests made to any given URL

00:32:50,440 --> 00:32:55,070
this greatly reduces test setup and test

00:32:53,360 --> 00:32:58,160
hair down I have two relatively

00:32:55,070 --> 00:33:00,200
resilient against change but I

00:32:58,160 --> 00:33:02,840
personally find when I use this method

00:33:00,200 --> 00:33:04,430
for external service testing I find

00:33:02,840 --> 00:33:07,100
myself needing to care a lot about

00:33:04,430 --> 00:33:09,220
service details that aren't necessarily

00:33:07,100 --> 00:33:12,140
relevant to the test I'm writing and

00:33:09,220 --> 00:33:15,920
that itself is a test awkwardness but I

00:33:12,140 --> 00:33:19,040
feel the desire to listen to in that

00:33:15,920 --> 00:33:21,980
spirit let's go back to full mocking as

00:33:19,040 --> 00:33:23,930
a valid technique let's look at how this

00:33:21,980 --> 00:33:25,910
test this test right here that is a copy

00:33:23,930 --> 00:33:29,120
of one we saw earlier as the fully

00:33:25,910 --> 00:33:31,850
mocked repository test how the test

00:33:29,120 --> 00:33:34,870
might evolved if we use mocks heavily in

00:33:31,850 --> 00:33:34,870
a micro service world

00:33:36,370 --> 00:33:44,840
hey there's barely any change the

00:33:43,130 --> 00:33:46,790
interesting thing about this is that if

00:33:44,840 --> 00:33:48,830
we followed the heavy mock style of

00:33:46,790 --> 00:33:50,210
testing all along we would have been

00:33:48,830 --> 00:33:53,300
prodded towards the repository pattern

00:33:50,210 --> 00:33:54,890
for our posts early on that would have

00:33:53,300 --> 00:33:57,470
helped to guide our decision to extract

00:33:54,890 --> 00:33:58,730
a blog surface when we needed to there

00:33:57,470 --> 00:34:01,430
would have been this big repository

00:33:58,730 --> 00:34:05,020
clash somewhere shouting extract me and

00:34:01,430 --> 00:34:05,020
it would have been so easy

00:34:05,260 --> 00:34:09,980
whether you like mocks or not I think

00:34:08,210 --> 00:34:11,750
that the objects you extract when you

00:34:09,980 --> 00:34:15,080
listen the complex controller tube setup

00:34:11,750 --> 00:34:17,590
are a pretty fascinating guide to the

00:34:15,080 --> 00:34:20,210
actual overall shape of your application

00:34:17,590 --> 00:34:22,280
whether your team monolith or team micro

00:34:20,210 --> 00:34:25,850
service or team I don't care - so code

00:34:22,280 --> 00:34:27,800
work having that level of structure

00:34:25,850 --> 00:34:29,690
helps manage the necessary complexity is

00:34:27,800 --> 00:34:32,540
that all older and larger code bases

00:34:29,690 --> 00:34:34,460
accumulate listening to your tests isn't

00:34:32,540 --> 00:34:36,500
the only way to arrive that architecture

00:34:34,460 --> 00:34:38,390
but since these are hard problems I

00:34:36,500 --> 00:34:42,170
think we can all use as many tools as we

00:34:38,390 --> 00:34:43,970
can get regardless of what boring

00:34:42,170 --> 00:34:46,490
application code looks like to you

00:34:43,970 --> 00:34:48,380
or boring test code the thing I want you

00:34:46,490 --> 00:34:50,540
to take away from this talk is that

00:34:48,380 --> 00:34:51,650
whenever you are writing tests you are

00:34:50,540 --> 00:34:54,170
writing them about your current

00:34:51,650 --> 00:34:56,090
understanding of your code duplication

00:34:54,170 --> 00:34:58,850
is cheaper than the roam abstraction

00:34:56,090 --> 00:35:00,380
applies to test code too when you do

00:34:58,850 --> 00:35:01,119
introduce test abstractions

00:35:00,380 --> 00:35:02,710
they are likely

00:35:01,119 --> 00:35:05,410
mirror the assumptions you are making

00:35:02,710 --> 00:35:08,940
your application code because humans are

00:35:05,410 --> 00:35:11,200
fascinatingly self-deceptive creatures

00:35:08,940 --> 00:35:13,180
application code influences test code

00:35:11,200 --> 00:35:16,240
and test code influences application

00:35:13,180 --> 00:35:18,849
code and so what ever boring does mean

00:35:16,240 --> 00:35:21,430
to you sometimes the easiest way to make

00:35:18,849 --> 00:35:26,109
our tests more boring to hate our tests

00:35:21,430 --> 00:35:30,279
less is to just make them more boring we

00:35:26,109 --> 00:35:32,440
do in fact have that power we can then

00:35:30,279 --> 00:35:36,670
trust that our application code will

00:35:32,440 --> 00:35:38,980
fall into line that's all that listening

00:35:36,670 --> 00:35:40,470
to your tests means it means the points

00:35:38,980 --> 00:35:42,880
of where you hate your tests are

00:35:40,470 --> 00:35:44,410
opportunities to refactor so that you

00:35:42,880 --> 00:35:49,180
hate both your tests and your

00:35:44,410 --> 00:35:52,690
application code left so I'm Betsy cable

00:35:49,180 --> 00:35:54,730
I go by Betsy muffin on the quitters but

00:35:52,690 --> 00:35:58,200
if you follow me you will get a lot more

00:35:54,730 --> 00:36:02,170
cat photos and US politics and Tech Talk

00:35:58,200 --> 00:36:04,390
and you can also find me on the internet

00:36:02,170 --> 00:36:08,470
at Betsy hable calm and github comms

00:36:04,390 --> 00:36:10,650
flash be table do you have time for

00:36:08,470 --> 00:36:10,650
questions

00:36:11,330 --> 00:36:20,020
[Applause]

00:36:16,780 --> 00:36:24,200
yes we do have time for questions

00:36:20,020 --> 00:36:34,940
does anyone would ever like to volunteer

00:36:24,200 --> 00:36:38,150
question hey so you showed this example

00:36:34,940 --> 00:36:39,770
where you moved ah where you introduced

00:36:38,150 --> 00:36:41,870
the repository and then in the

00:36:39,770 --> 00:36:44,660
controller test you just stopped about

00:36:41,870 --> 00:36:46,640
the discipline story now then you need

00:36:44,660 --> 00:36:49,730
to test for the repository itself right

00:36:46,640 --> 00:36:52,070
and what would you do there would you

00:36:49,730 --> 00:36:54,590
use mocks or would you just use the

00:36:52,070 --> 00:36:57,200
direct connection to the database and if

00:36:54,590 --> 00:36:58,930
if use mocks in that case then what is

00:36:57,200 --> 00:37:01,880
the real advantage you're just moving

00:36:58,930 --> 00:37:03,680
the marks from the controller test to

00:37:01,880 --> 00:37:06,620
the repository test you're introducing

00:37:03,680 --> 00:37:08,300
additional concept and then then you

00:37:06,620 --> 00:37:09,470
just put it into the files but what's

00:37:08,300 --> 00:37:11,870
the real advantage there

00:37:09,470 --> 00:37:16,030
well that's Australian because I would

00:37:11,870 --> 00:37:16,030
just use active record methods there

00:37:16,390 --> 00:37:21,050
when you tie yourself to any one

00:37:18,980 --> 00:37:22,730
specific method and say this is the

00:37:21,050 --> 00:37:26,060
correct method of all time you lose the

00:37:22,730 --> 00:37:27,890
ability to make trade-offs and whether

00:37:26,060 --> 00:37:30,920
to use mocks or not is incredibly

00:37:27,890 --> 00:37:32,990
situational if I were to use mocks in a

00:37:30,920 --> 00:37:35,330
repository test or a query object test

00:37:32,990 --> 00:37:38,210
or any test where what I'm doing is

00:37:35,330 --> 00:37:40,070
testing how these very specific queries

00:37:38,210 --> 00:37:41,660
that I'm using active record to write

00:37:40,070 --> 00:37:44,060
play out in the context of the database

00:37:41,660 --> 00:37:45,890
then I would be tying myself very hard

00:37:44,060 --> 00:37:50,030
to my implementation and I never want to

00:37:45,890 --> 00:37:52,370
be doing that I would be losing the

00:37:50,030 --> 00:37:53,930
ability to maybe optimise the query by

00:37:52,370 --> 00:37:56,300
hand rolling sequel later I'd be losing

00:37:53,930 --> 00:38:00,700
the ability or to do that easily rather

00:37:56,300 --> 00:38:03,650
I would be not really testing anything I

00:38:00,700 --> 00:38:05,900
whenever you see a very long long

00:38:03,650 --> 00:38:07,760
sequence of mocks that all view with the

00:38:05,900 --> 00:38:10,340
same object the chances that your test

00:38:07,760 --> 00:38:14,210
is doing something that's worth doing

00:38:10,340 --> 00:38:17,780
gets very low and sometimes the feedback

00:38:14,210 --> 00:38:19,160
you need is tricky factor but sometimes

00:38:17,780 --> 00:38:21,260
the feedback you can take from that is

00:38:19,160 --> 00:38:24,940
that this test you need a different

00:38:21,260 --> 00:38:24,940
strategy for our perhaps don't need

00:38:29,020 --> 00:38:35,000
thank you for the talk I agreed with

00:38:32,060 --> 00:38:36,890
basically everything except for the last

00:38:35,000 --> 00:38:39,170
and one of the last slides where you do

00:38:36,890 --> 00:38:40,910
the mocking or I don't know stuffing at

00:38:39,170 --> 00:38:44,720
and I still don't know the difference

00:38:40,910 --> 00:38:46,940
when you run the post test against the

00:38:44,720 --> 00:38:50,300
controller and you test if the service

00:38:46,940 --> 00:38:52,520
object receives a post underscore update

00:38:50,300 --> 00:38:54,800
like if the method is called and I

00:38:52,520 --> 00:38:56,960
didn't understand why you do that why

00:38:54,800 --> 00:38:59,440
don't you just test and why don't you

00:38:56,960 --> 00:39:02,750
just run the controller and then test if

00:38:59,440 --> 00:39:05,630
the like I mean you still have to find

00:39:02,750 --> 00:39:07,430
out the ID of the updated post but you

00:39:05,630 --> 00:39:09,410
why don't you just test if that really

00:39:07,430 --> 00:39:11,840
got updated with all the knowledge about

00:39:09,410 --> 00:39:13,250
the service object well it's very nice

00:39:11,840 --> 00:39:15,550
that you was mostly agreed with me

00:39:13,250 --> 00:39:17,900
that's very validating and I needed that

00:39:15,550 --> 00:39:21,670
I'm sorry I'm being are you being

00:39:17,900 --> 00:39:21,670
sarcastic I'm totally being sarcastic

00:39:22,930 --> 00:39:30,680
but to answer the part of that that was

00:39:25,880 --> 00:39:33,500
actually questioned I think what that

00:39:30,680 --> 00:39:36,350
demonstrates is the fundamental futility

00:39:33,500 --> 00:39:42,830
of a lot of controller tests I think

00:39:36,350 --> 00:39:46,930
that when a test basically tests whether

00:39:42,830 --> 00:39:50,150
a method is being called or not then oh

00:39:46,930 --> 00:39:54,080
no I can do that by looking at the code

00:39:50,150 --> 00:39:56,420
I can do that by running a more

00:39:54,080 --> 00:39:58,550
end-to-end cast higher up attacking the

00:39:56,420 --> 00:39:59,990
testing pyramid there's a dozens of ways

00:39:58,550 --> 00:40:02,300
to test that controller tests have their

00:39:59,990 --> 00:40:04,400
place but controller tests have their

00:40:02,300 --> 00:40:06,080
place when the thing you're testing is

00:40:04,400 --> 00:40:08,990
more complex stuff like whether your

00:40:06,080 --> 00:40:14,840
authorizations are working correctly

00:40:08,990 --> 00:40:18,110
and in those cases okay so you you say

00:40:14,840 --> 00:40:19,970
you test if the service object gets run

00:40:18,110 --> 00:40:22,400
in the controller test and you test the

00:40:19,970 --> 00:40:26,060
service object itself in a separate test

00:40:22,400 --> 00:40:29,210
yes okay so but then ok so then

00:40:26,060 --> 00:40:30,530
basically I would basically asked the

00:40:29,210 --> 00:40:34,750
same question like how do you test the

00:40:30,530 --> 00:40:34,750
service object okay okay thank you

00:40:36,320 --> 00:40:48,600
good ok so just now look at the

00:40:45,990 --> 00:40:51,500
controller test you made I think the

00:40:48,600 --> 00:40:55,530
like very elegant solution are very shot

00:40:51,500 --> 00:40:58,050
it actually removes a redundancy in the

00:40:55,530 --> 00:41:01,980
current controller testing but also

00:40:58,050 --> 00:41:04,680
fields or installation the more robust

00:41:01,980 --> 00:41:07,020
version kind of feel like integration

00:41:04,680 --> 00:41:09,150
testing so I was feeling that you are

00:41:07,020 --> 00:41:12,110
making computer test controller test a

00:41:09,150 --> 00:41:14,130
unit test instead of an integration test

00:41:12,110 --> 00:41:16,950
so we're just wondering what's your

00:41:14,130 --> 00:41:21,180
opinion on the integration testing which

00:41:16,950 --> 00:41:25,170
is kind of miss out I think they're

00:41:21,180 --> 00:41:27,420
trying to divide clean lines between

00:41:25,170 --> 00:41:31,890
unit test integration test it's almost

00:41:27,420 --> 00:41:36,240
always mistake or not almost always I

00:41:31,890 --> 00:41:37,980
think that you want to have some higher

00:41:36,240 --> 00:41:40,320
level tests that exercise more of the

00:41:37,980 --> 00:41:43,200
staff and to follow the testing pyramid

00:41:40,320 --> 00:41:46,200
but I think that as you get lower and

00:41:43,200 --> 00:41:48,600
lower level you don't necessarily want

00:41:46,200 --> 00:41:50,190
very fine-grained unit test coverage of

00:41:48,600 --> 00:41:51,990
everything because some of your units

00:41:50,190 --> 00:41:53,820
mostly exist is coordinating units and

00:41:51,990 --> 00:41:56,070
again I think that you're not

00:41:53,820 --> 00:41:57,270
necessarily getting much value a lot of

00:41:56,070 --> 00:41:59,250
the time from testing that that

00:41:57,270 --> 00:42:01,790
coordination happens it isn't also being

00:41:59,250 --> 00:42:05,730
captured by tests or higher in the stack

00:42:01,790 --> 00:42:07,770
and so I think that when you make a lot

00:42:05,730 --> 00:42:09,840
of to do about is this a proper unit

00:42:07,770 --> 00:42:12,960
test is this a proper mid level

00:42:09,840 --> 00:42:16,260
integration test etc then what you're

00:42:12,960 --> 00:42:18,420
doing is forcing yourself into the

00:42:16,260 --> 00:42:20,580
current assumptions of your object

00:42:18,420 --> 00:42:22,590
structure again in a way that makes that

00:42:20,580 --> 00:42:24,300
object structure much harder to change

00:42:22,590 --> 00:42:28,740
later when it's no longer serving you

00:42:24,300 --> 00:42:31,020
and so I think that tests that are more

00:42:28,740 --> 00:42:35,250
integration aid even though a lot of

00:42:31,020 --> 00:42:37,290
people think they're less technically

00:42:35,250 --> 00:42:40,620
correct from like a test peer ISM

00:42:37,290 --> 00:42:43,530
standard I think that the reason they

00:42:40,620 --> 00:42:47,000
keep on emerging in real-world practice

00:42:43,530 --> 00:42:49,300
is because underneath pragmatically

00:42:47,000 --> 00:42:51,520
people are drawn to the idea of

00:42:49,300 --> 00:42:53,710
thing that they think is going to ease

00:42:51,520 --> 00:42:58,120
your change later and I think that's

00:42:53,710 --> 00:43:00,970
valid yeah yeah yeah I agree I think

00:42:58,120 --> 00:43:02,590
that makes a point that you're saying

00:43:00,970 --> 00:43:05,740
integration testing is kind of

00:43:02,590 --> 00:43:08,020
unnecessary as if all your unit has

00:43:05,740 --> 00:43:09,730
passed it should just work and you

00:43:08,020 --> 00:43:12,040
shouldn't just you should not need to

00:43:09,730 --> 00:43:14,860
test the coordination between different

00:43:12,040 --> 00:43:18,340
units and also because you don't test

00:43:14,860 --> 00:43:20,350
the actual underlying integration is

00:43:18,340 --> 00:43:22,990
easier to make changing your actual

00:43:20,350 --> 00:43:27,730
needed nitty-gritty of your coding it is

00:43:22,990 --> 00:43:32,680
that your take on the issue I'm sorry to

00:43:27,730 --> 00:43:36,270
your pizza is like by removing removing

00:43:32,680 --> 00:43:40,350
the very DQ robot integration testing

00:43:36,270 --> 00:43:43,690
but focusing our unit testing and

00:43:40,350 --> 00:43:49,330
assuming the unit's coordination is

00:43:43,690 --> 00:43:53,310
correct is actually making the changes

00:43:49,330 --> 00:43:56,920
easier in the future because without

00:43:53,310 --> 00:43:58,810
boil down to the actual BQ you can

00:43:56,920 --> 00:44:01,570
change stuff without affecting your test

00:43:58,810 --> 00:44:03,910
yeah I mean ultimately a lot if you have

00:44:01,570 --> 00:44:05,710
too many full integration tests opponent

00:44:03,910 --> 00:44:08,680
and then test you're doing a lot of

00:44:05,710 --> 00:44:10,330
duplicate work all the time and you're

00:44:08,680 --> 00:44:13,120
not necessarily getting much marginal

00:44:10,330 --> 00:44:14,530
value from each individual test and even

00:44:13,120 --> 00:44:17,790
though you're not doing that as a human

00:44:14,530 --> 00:44:21,430
you're still making your CI run that and

00:44:17,790 --> 00:44:26,440
the level to which a CI that takes an

00:44:21,430 --> 00:44:28,210
hour run versus levels yeah and effect

00:44:26,440 --> 00:44:30,280
that LCI that takes five minutes to run

00:44:28,210 --> 00:44:31,570
is very different the level of effort or

00:44:30,280 --> 00:44:35,080
the level of attention that people pay

00:44:31,570 --> 00:44:37,690
when CI starts to take four hours to run

00:44:35,080 --> 00:44:42,160
is virtually nil and you need to keep

00:44:37,690 --> 00:44:44,580
that in mind but it's more than that

00:44:42,160 --> 00:44:47,200
it's that the past a certain point

00:44:44,580 --> 00:44:49,840
trying to multiply end to end pass to

00:44:47,200 --> 00:44:52,060
the wolf game there's a really great

00:44:49,840 --> 00:44:53,900
point I saw recently on Twitter that a

00:44:52,060 --> 00:44:55,430
game developer was making

00:44:53,900 --> 00:44:58,700
and this game developer had worked on a

00:44:55,430 --> 00:45:01,280
game where you had to do a lot of

00:44:58,700 --> 00:45:03,860
combinatorial simulation and so she was

00:45:01,280 --> 00:45:06,680
all okay we can't actually QA this game

00:45:03,860 --> 00:45:10,160
fully because QA in this game fully we

00:45:06,680 --> 00:45:14,180
have 500 options for this x 500 other

00:45:10,160 --> 00:45:15,800
options for this well buy 500 options

00:45:14,180 --> 00:45:19,580
buy 500 options and all of a sudden

00:45:15,800 --> 00:45:21,080
you're getting to a point where forget a

00:45:19,580 --> 00:45:22,760
human tester not even a computer

00:45:21,080 --> 00:45:25,610
computer tester can meaningfully

00:45:22,760 --> 00:45:28,760
exercise all of that and that's fine

00:45:25,610 --> 00:45:30,380
what you do is you look for this you

00:45:28,760 --> 00:45:33,530
look for a few simple cases of smoke

00:45:30,380 --> 00:45:35,180
tests and you look for the esoteric

00:45:33,530 --> 00:45:36,860
cases they're likely to give you bugs

00:45:35,180 --> 00:45:43,010
and you pick and choose what's actually

00:45:36,860 --> 00:45:45,470
useful to run yeah great thanks cool I

00:45:43,010 --> 00:45:55,640
think what time for one more question

00:45:45,470 --> 00:45:57,580
if there is any any more questions nope

00:45:55,640 --> 00:46:04,389
okay thank you very much

00:45:57,580 --> 00:46:04,389

YouTube URL: https://www.youtube.com/watch?v=u30qyBRuFXY


