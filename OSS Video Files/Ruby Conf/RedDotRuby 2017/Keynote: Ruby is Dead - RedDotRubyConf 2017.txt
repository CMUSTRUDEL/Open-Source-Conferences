Title: Keynote: Ruby is Dead - RedDotRubyConf 2017
Publication date: 2020-01-22
Playlist: RedDotRuby 2017
Description: 
	Speaker: Nick Sutterer

Event Page: http://www.reddotrubyconf.com/

Produced by Engineers.SG

Help us caption & translate this video!

http://amara.org/v/8HYP/
Captions: 
	00:00:04,760 --> 00:00:10,590
it works right yeah that's great

00:00:07,400 --> 00:00:13,289
because if if one thing makes me nervous

00:00:10,590 --> 00:00:15,420
in talks then that the technical stuff

00:00:13,289 --> 00:00:19,140
not the other stuff like the social

00:00:15,420 --> 00:00:22,790
stuff this is the last talk for today

00:00:19,140 --> 00:00:27,350
and I hope you guys enjoyed the

00:00:22,790 --> 00:00:32,309
wonderful presentations we had today

00:00:27,350 --> 00:00:36,239
because I did I also enjoyed something

00:00:32,309 --> 00:00:38,940
amazing last night it's the thing in

00:00:36,239 --> 00:00:39,930
Singapore um I don't know if you I don't

00:00:38,940 --> 00:00:42,960
know if you know them

00:00:39,930 --> 00:00:45,140
Julian Dorian or whatever it's

00:00:42,960 --> 00:00:47,970
pronounced so I get this email from the

00:00:45,140 --> 00:00:49,200
from the organizers tell me like hey

00:00:47,970 --> 00:00:50,880
Nick you please join us for dinner

00:00:49,200 --> 00:00:53,760
tonight which is amazing and really nice

00:00:50,880 --> 00:00:56,840
we're going to have do Rihanna so I am

00:00:53,760 --> 00:01:00,260
automatically assumed that durian is

00:00:56,840 --> 00:01:03,210
like something like a dinner for example

00:01:00,260 --> 00:01:04,890
so we had we went to this place and had

00:01:03,210 --> 00:01:07,200
dinner and they warned as I hate don't

00:01:04,890 --> 00:01:08,609
drink beer with durian okay we're going

00:01:07,200 --> 00:01:10,229
to have durian so I thought I'd hit it

00:01:08,609 --> 00:01:13,499
it's like dim sum or something like I'm

00:01:10,229 --> 00:01:15,329
 sorry so I thought I thought we

00:01:13,499 --> 00:01:17,159
gotta have the dinner and it's called

00:01:15,329 --> 00:01:19,469
durian so I did not drink beer for the

00:01:17,159 --> 00:01:22,289
beaten for the dinner and I was talking

00:01:19,469 --> 00:01:24,149
to Antone like man that's had a sneaky

00:01:22,289 --> 00:01:27,779
beer after the dinner so because we're

00:01:24,149 --> 00:01:31,979
done with the durian and then so we we

00:01:27,779 --> 00:01:34,289
kind of had one beer M and the gas

00:01:31,979 --> 00:01:36,359
awesome and not durian is coming up now

00:01:34,289 --> 00:01:38,759
like why do you drink beer IKONOS not

00:01:36,359 --> 00:01:42,209
 like I felt really we went

00:01:38,759 --> 00:01:44,420
to this place and yeah I mean it smells

00:01:42,209 --> 00:01:47,149
interesting

00:01:44,420 --> 00:01:51,479
it's dangerous word in their culinary

00:01:47,149 --> 00:01:54,919
lingo so we of come in of course I

00:01:51,479 --> 00:01:58,439
respect local traditions I tried it and

00:01:54,919 --> 00:02:00,299
it's kind of like soft and a bit of like

00:01:58,439 --> 00:02:03,749
like threats it's a bit like a mango

00:02:00,299 --> 00:02:07,200
that tastes like has anyone haven't had

00:02:03,749 --> 00:02:09,479
a durian before well there's many of

00:02:07,200 --> 00:02:11,970
them maybe I shouldn't spoil the feeling

00:02:09,479 --> 00:02:13,840
okay I'm not gonna I'm not so basically

00:02:11,970 --> 00:02:17,900
yeah

00:02:13,840 --> 00:02:22,280
that was my response so I had this

00:02:17,900 --> 00:02:24,110
durian and I suddenly felt like RIT like

00:02:22,280 --> 00:02:25,939
something was going on in my stomach it

00:02:24,110 --> 00:02:28,970
was because of the one beer I had and I

00:02:25,939 --> 00:02:30,560
could feel like oh god I had to like do

00:02:28,970 --> 00:02:33,049
something I jumped into my Ferrari I

00:02:30,560 --> 00:02:35,440
drove off to my helicopter launch pad

00:02:33,049 --> 00:02:38,870
and flew to the best hospital in

00:02:35,440 --> 00:02:40,790
Singapore to the doctor team brought me

00:02:38,870 --> 00:02:43,549
to the emergency room I gather and then

00:02:40,790 --> 00:02:45,950
second they put some surgery tools on my

00:02:43,549 --> 00:02:48,349
belly and started like you to dig in and

00:02:45,950 --> 00:02:54,370
I was like this is harder mister oh my

00:02:48,349 --> 00:02:58,400
god your stomach is totally fine and so

00:02:54,370 --> 00:02:59,599
before I before I asked before so I was

00:02:58,400 --> 00:03:02,329
trying to find out what's the problem

00:02:59,599 --> 00:03:04,250
with with a beer at durian is it a miss

00:03:02,329 --> 00:03:06,019
or not I got three different answers

00:03:04,250 --> 00:03:06,560
from three different people from

00:03:06,019 --> 00:03:09,560
Singapore

00:03:06,560 --> 00:03:12,079
you get really hot you're I don't know

00:03:09,560 --> 00:03:15,829
you get really sick drunk and your

00:03:12,079 --> 00:03:19,340
stomach is going to explode I don't know

00:03:15,829 --> 00:03:24,190
about this but today I was really tired

00:03:19,340 --> 00:03:28,639
and hungover I blame the durian so I

00:03:24,190 --> 00:03:30,530
stopped laughing stop laughing this is

00:03:28,639 --> 00:03:36,379
the moment where the sound system should

00:03:30,530 --> 00:03:42,129
play a funeral march because I have

00:03:36,379 --> 00:03:42,129
terrible news Ruby is dead

00:03:42,250 --> 00:03:49,489
exactly in case you didn't know it is

00:03:45,769 --> 00:03:53,180
that it makes me sad it should make you

00:03:49,489 --> 00:03:56,769
guys said it should actually make you

00:03:53,180 --> 00:03:59,060
question why are there videos on YouTube

00:03:56,769 --> 00:04:02,629
discussing why Ruby is dead

00:03:59,060 --> 00:04:06,379
Ruby is also so dead that it is the last

00:04:02,629 --> 00:04:08,930
I don't know position on the last

00:04:06,379 --> 00:04:11,150
position on I don't know like languages

00:04:08,930 --> 00:04:13,760
ranked by programmer jobs the first

00:04:11,150 --> 00:04:16,729
language is SQL which is a famous

00:04:13,760 --> 00:04:19,880
programming language so that's how

00:04:16,729 --> 00:04:22,760
that's how dead Ruby is it's also funny

00:04:19,880 --> 00:04:24,590
that Ruby is for some strange reason on

00:04:22,760 --> 00:04:27,650
the very top of program and Happiness

00:04:24,590 --> 00:04:28,250
index so it's totally dead I actually I

00:04:27,650 --> 00:04:30,890
mean I

00:04:28,250 --> 00:04:34,490
leave that because I I went on the

00:04:30,890 --> 00:04:38,360
internet and I tried to find out why is

00:04:34,490 --> 00:04:43,340
Ruby dead and I landed on reddit the

00:04:38,360 --> 00:04:47,900
source of truth and it linked me to some

00:04:43,340 --> 00:04:52,730
amazing blog posts on the so called PHP

00:04:47,900 --> 00:04:55,490
block org with the title don't believe

00:04:52,730 --> 00:04:57,820
in Ruby why I don't believe in Ruby and

00:04:55,490 --> 00:05:01,010
you shouldn't either

00:04:57,820 --> 00:05:03,100
it's a really interesting post you

00:05:01,010 --> 00:05:05,360
should read it so you get enlightened

00:05:03,100 --> 00:05:08,210
that we are on the wrong side of the

00:05:05,360 --> 00:05:11,000
tracks and then I had so there's like

00:05:08,210 --> 00:05:14,560
interesting scream cause like Ruby is no

00:05:11,000 --> 00:05:17,810
longer cool these days it's JavaScript

00:05:14,560 --> 00:05:20,330
in case you didn't know that or what's

00:05:17,810 --> 00:05:22,610
better is a ruby was a hipster code a

00:05:20,330 --> 00:05:35,090
community of 20-something year old nerds

00:05:22,610 --> 00:05:40,040
who are now 30-something nerds sorry so

00:05:35,090 --> 00:05:41,840
it's a I was devastated reading PHP blog

00:05:40,040 --> 00:05:43,430
I actually subscribed it on my ass s

00:05:41,840 --> 00:05:46,250
feed and I'm gonna follow it totally

00:05:43,430 --> 00:05:48,410
because I mean Ruby is definitely slower

00:05:46,250 --> 00:05:52,700
than PHP and that's actually true but

00:05:48,410 --> 00:05:55,430
it's some absolutely compelling reason

00:05:52,700 --> 00:05:58,370
why Ruby said it Ruby apparently sucks

00:05:55,430 --> 00:06:01,400
at concurrency my experience with

00:05:58,370 --> 00:06:03,470
concurrency was okay some people have

00:06:01,400 --> 00:06:07,630
complained about it there is definitely

00:06:03,470 --> 00:06:10,490
languages with better concurrency that

00:06:07,630 --> 00:06:12,440
Ruby is also object-oriented programming

00:06:10,490 --> 00:06:14,000
which is also terrible like you have to

00:06:12,440 --> 00:06:18,320
write everything in a functional

00:06:14,000 --> 00:06:20,450
language Haskell otherwise the language

00:06:18,320 --> 00:06:22,430
is dead so it's like and of course

00:06:20,450 --> 00:06:25,850
Ruby's also messy like you don't create

00:06:22,430 --> 00:06:27,860
messy code in like elixir or in Oakham

00:06:25,850 --> 00:06:29,870
oh it's only Ruby that it's messy and

00:06:27,860 --> 00:06:34,820
also Ruby is the reason why rails exist

00:06:29,870 --> 00:06:37,070
so it takes me up okay so now that we

00:06:34,820 --> 00:06:39,380
know that have a look at this black

00:06:37,070 --> 00:06:40,940
slide and just cry for a little bit

00:06:39,380 --> 00:06:41,639
because we came together here for a

00:06:40,940 --> 00:06:44,849
deadline

00:06:41,639 --> 00:06:47,729
which not the best feeling for me let me

00:06:44,849 --> 00:06:50,159
tell you some interesting story about my

00:06:47,729 --> 00:06:53,699
current job so because I don't really

00:06:50,159 --> 00:06:56,039
like the PHP vs. ruby thing I mean X

00:06:53,699 --> 00:06:59,099
find it kind of amusing and slowly but

00:06:56,039 --> 00:07:01,729
at my current job we actually had to

00:06:59,099 --> 00:07:04,020
face that reality that people still like

00:07:01,729 --> 00:07:07,349
think about are we going to use Ruby or

00:07:04,020 --> 00:07:09,389
PHP and and because I work for the

00:07:07,349 --> 00:07:11,789
police at the moment not that police and

00:07:09,389 --> 00:07:15,169
also not that police more like that

00:07:11,789 --> 00:07:17,580
police so the are you consulting for

00:07:15,169 --> 00:07:21,930
Ruby software let's put it in a very

00:07:17,580 --> 00:07:24,229
generic way and so they had a big

00:07:21,930 --> 00:07:27,210
project coming up and they are wondering

00:07:24,229 --> 00:07:28,740
should we use a PHP or should we use

00:07:27,210 --> 00:07:30,870
Ruby again because we have lots of

00:07:28,740 --> 00:07:31,439
successful application Ruby but Ruby's

00:07:30,870 --> 00:07:35,069
dead

00:07:31,439 --> 00:07:38,580
read it says so so let's have and a

00:07:35,069 --> 00:07:41,939
consultant find out for three weeks if

00:07:38,580 --> 00:07:43,919
it's good or not to use a ruby so I had

00:07:41,939 --> 00:07:45,419
lots of meetings with this consultant

00:07:43,919 --> 00:07:50,909
that was paid free this is actually a

00:07:45,419 --> 00:07:53,219
video because I might lose my job so I

00:07:50,909 --> 00:07:56,099
was having a lot of meetings with this

00:07:53,219 --> 00:07:59,669
consultant and he's great so he actually

00:07:56,099 --> 00:08:01,289
introduced me to Gartner hype cycle you

00:07:59,669 --> 00:08:06,509
all know the Gartner hype cycle it is

00:08:01,289 --> 00:08:08,580
like the the flow of I don't know what's

00:08:06,509 --> 00:08:10,110
it called like the expectations for a

00:08:08,580 --> 00:08:11,939
programming of a technology in general

00:08:10,110 --> 00:08:13,830
so like firstly of this peak of

00:08:11,939 --> 00:08:15,960
excitement it runs a year let's use ruby

00:08:13,830 --> 00:08:17,520
is awesome then after some years they

00:08:15,960 --> 00:08:19,080
find out on my code is so messy and

00:08:17,520 --> 00:08:21,240
object-oriented and slow but it says

00:08:19,080 --> 00:08:24,149
concurrency so it's totally like it

00:08:21,240 --> 00:08:26,430
sucks and then people started like come

00:08:24,149 --> 00:08:28,830
up with new technologies and new gems of

00:08:26,430 --> 00:08:30,120
whatever like new libraries and it kind

00:08:28,830 --> 00:08:31,800
of oh here we go this is actually the

00:08:30,120 --> 00:08:33,750
way we should have done and then you're

00:08:31,800 --> 00:08:35,279
on the plateau of productivity and this

00:08:33,750 --> 00:08:38,729
is absolutely how every programming

00:08:35,279 --> 00:08:41,789
language can be categorized my the

00:08:38,729 --> 00:08:44,039
consultant also added some new flow from

00:08:41,789 --> 00:08:46,050
here and he called it like the I don't

00:08:44,039 --> 00:08:47,880
know like the ebiz or something like

00:08:46,050 --> 00:08:51,060
that because and he was wondering if

00:08:47,880 --> 00:08:55,010
ruby is at this TRO of disillusionment

00:08:51,060 --> 00:08:57,900
and on the way to go even down further

00:08:55,010 --> 00:09:01,580
after 25 years of being successfully

00:08:57,900 --> 00:09:04,470
installed in the software industry and

00:09:01,580 --> 00:09:06,300
so and yeah we we kind of figured out

00:09:04,470 --> 00:09:12,750
okay these we are talking about two

00:09:06,300 --> 00:09:16,350
equally strong powers yeah ruby is huge

00:09:12,750 --> 00:09:18,570
yes PHP is also huge so this is not a

00:09:16,350 --> 00:09:20,520
good thing like we have to find

00:09:18,570 --> 00:09:22,530
something else how to find a metric is

00:09:20,520 --> 00:09:25,050
Ruby going to be the language for the

00:09:22,530 --> 00:09:27,510
new project or not and so he explained

00:09:25,050 --> 00:09:31,110
me a actually he's a really nice guy I'm

00:09:27,510 --> 00:09:33,120
just thinking like the she little bit so

00:09:31,110 --> 00:09:35,400
he was telling me okay like a so proper

00:09:33,120 --> 00:09:38,870
engineering usually means should mean

00:09:35,400 --> 00:09:40,650
the code has to be maintainable

00:09:38,870 --> 00:09:42,420
comprehensible so other people have to

00:09:40,650 --> 00:09:46,770
understand it and actually already under

00:09:42,420 --> 00:09:48,240
forgot the third point here yet so and

00:09:46,770 --> 00:09:51,690
we kept like talking about this generic

00:09:48,240 --> 00:09:53,400
stuff so I was so I don't know we we

00:09:51,690 --> 00:09:55,770
talked about generic stuff at some point

00:09:53,400 --> 00:09:57,810
I realized hey men actually like this is

00:09:55,770 --> 00:10:00,600
just an example for architecture it's

00:09:57,810 --> 00:10:03,540
not that important and so actually what

00:10:00,600 --> 00:10:06,030
we talked about is it doesn't matter if

00:10:03,540 --> 00:10:09,300
something is a huge or not huge in the

00:10:06,030 --> 00:10:11,310
in the economy or if something is in the

00:10:09,300 --> 00:10:13,790
TRO of disillusionment or not what we

00:10:11,310 --> 00:10:15,780
talked about is is my software

00:10:13,790 --> 00:10:17,880
maintainable does it have a good

00:10:15,780 --> 00:10:20,010
architecture so it boils down to like

00:10:17,880 --> 00:10:22,890
fine grained architecture how do i model

00:10:20,010 --> 00:10:24,090
a software to make it something that you

00:10:22,890 --> 00:10:28,320
want to work with in ten years because

00:10:24,090 --> 00:10:31,470
that for me is good software and I think

00:10:28,320 --> 00:10:33,450
both PHP and Ruby can provide a nice

00:10:31,470 --> 00:10:35,660
architecture but we had like two or

00:10:33,450 --> 00:10:38,340
three hours of fighting about this

00:10:35,660 --> 00:10:39,960
architectural point until he said okay

00:10:38,340 --> 00:10:41,970
maybe you're right maybe it's not the

00:10:39,960 --> 00:10:44,420
language itself because what I am

00:10:41,970 --> 00:10:47,250
because I mean there's so many

00:10:44,420 --> 00:10:51,020
frameworks in PHP and they're excellent

00:10:47,250 --> 00:10:53,040
I'm not kidding that provide you huge

00:10:51,020 --> 00:10:55,230
abstractions and lots of different

00:10:53,040 --> 00:10:57,270
layers you can use for implementing

00:10:55,230 --> 00:11:00,990
complex applications doesn't have to be

00:10:57,270 --> 00:11:03,150
web and that's the same for for Ruby

00:11:00,990 --> 00:11:04,530
like rails and Hanavi and get great and

00:11:03,150 --> 00:11:07,860
Rhoda and I don't know I could add like

00:11:04,530 --> 00:11:08,430
500 more and so that is not the problem

00:11:07,860 --> 00:11:11,990
we have

00:11:08,430 --> 00:11:15,450
technology what I am realized after some

00:11:11,990 --> 00:11:18,630
after some hours of meeting was that if

00:11:15,450 --> 00:11:20,850
you visualize the PHP stack at the

00:11:18,630 --> 00:11:22,080
police I'm not going to say which police

00:11:20,850 --> 00:11:25,560
and you can totally not tell by my

00:11:22,080 --> 00:11:27,420
accent which country so if you visualize

00:11:25,560 --> 00:11:28,800
the PHP stack like all the other

00:11:27,420 --> 00:11:30,779
different applications we have it's a

00:11:28,800 --> 00:11:33,510
really really colorful thing like they

00:11:30,779 --> 00:11:36,000
use a thousand different frameworks they

00:11:33,510 --> 00:11:38,100
use different abstraction layers in

00:11:36,000 --> 00:11:39,330
every application they don't have any

00:11:38,100 --> 00:11:41,640
abstractions they're building their own

00:11:39,330 --> 00:11:45,000
MVC they use laravel so it's like a

00:11:41,640 --> 00:11:51,720
super hit heterogeneous I don't know how

00:11:45,000 --> 00:11:54,720
to pronounce it how do I said yeah so we

00:11:51,720 --> 00:11:57,209
get this yeah an image of the PHP world

00:11:54,720 --> 00:11:58,920
at this at this job yesterday it's like

00:11:57,209 --> 00:12:00,570
thousands of projects and they all look

00:11:58,920 --> 00:12:03,240
completely different and then when it

00:12:00,570 --> 00:12:05,839
comes to Ruby at least even though it's

00:12:03,240 --> 00:12:09,270
slower and sucks at concurrency and also

00:12:05,839 --> 00:12:10,860
even if it looks more boring to you but

00:12:09,270 --> 00:12:13,260
more boring in this context means it's

00:12:10,860 --> 00:12:15,150
better because we have the same stack in

00:12:13,260 --> 00:12:17,339
every application its rails it's not

00:12:15,150 --> 00:12:20,250
everyone's favorite stack we use

00:12:17,339 --> 00:12:21,720
trailblazer as an additional abstraction

00:12:20,250 --> 00:12:24,570
which is not everyone's favorite

00:12:21,720 --> 00:12:27,630
abstraction here and we have the same

00:12:24,570 --> 00:12:30,029
concepts the same abstractions in every

00:12:27,630 --> 00:12:31,589
product so you go to those application a

00:12:30,029 --> 00:12:33,120
and you will find out okay I don't

00:12:31,589 --> 00:12:35,130
understand it you go to application B

00:12:33,120 --> 00:12:37,050
okay I don't understand it or you go to

00:12:35,130 --> 00:12:38,220
application a and you understand it and

00:12:37,050 --> 00:12:39,839
that means you will understand all the

00:12:38,220 --> 00:12:42,230
other applications so it's like a

00:12:39,839 --> 00:12:45,540
homogeneous he called it a homogeneous

00:12:42,230 --> 00:12:49,339
system yeah and that is much more

00:12:45,540 --> 00:12:52,410
valuable for software development than a

00:12:49,339 --> 00:12:54,150
like some some some like a crazy fast

00:12:52,410 --> 00:12:57,060
language that you can't maintain okay

00:12:54,150 --> 00:12:58,709
and we figured out that like just

00:12:57,060 --> 00:13:00,240
something is in PHP doesn't mean that

00:12:58,709 --> 00:13:02,810
the other project also in PHP is the

00:13:00,240 --> 00:13:05,579
same and the same with Ruby like I mean

00:13:02,810 --> 00:13:07,709
some project in Ruby can be completely

00:13:05,579 --> 00:13:09,600
different to to to I don't know like a

00:13:07,709 --> 00:13:11,220
rail stack is completely different to a

00:13:09,600 --> 00:13:14,820
Sinatra application something like that

00:13:11,220 --> 00:13:17,430
yeah and so we we boil it down like

00:13:14,820 --> 00:13:20,459
maybe the language is not the actual

00:13:17,430 --> 00:13:22,170
problem what we talk about is the

00:13:20,459 --> 00:13:23,820
architecture yeah the tools

00:13:22,170 --> 00:13:27,990
we have the abstractions to write

00:13:23,820 --> 00:13:32,750
applications and the problem in both PHP

00:13:27,990 --> 00:13:36,660
and Ruby is that the tools we have are a

00:13:32,750 --> 00:13:38,670
little bit primitive in some cases yeah

00:13:36,660 --> 00:13:40,860
for many languages it's the same problem

00:13:38,670 --> 00:13:42,600
so sometimes you have a tool that you

00:13:40,860 --> 00:13:45,269
actually want something way more

00:13:42,600 --> 00:13:46,740
efficient and you know this massive

00:13:45,269 --> 00:13:48,120
power tool exists but it's not available

00:13:46,740 --> 00:13:51,060
in your language so if you build it

00:13:48,120 --> 00:13:54,560
yourself this is not a problem but this

00:13:51,060 --> 00:13:57,420
consultant finally concluded that am

00:13:54,560 --> 00:13:59,579
that he doesn't want my choice

00:13:57,420 --> 00:14:00,930
he wants to build his own toys so he

00:13:59,579 --> 00:14:05,910
decided that he's going to build the

00:14:00,930 --> 00:14:10,170
entire stack we had a ruby in PHP yeah

00:14:05,910 --> 00:14:14,940
that was one of my successful consulting

00:14:10,170 --> 00:14:18,360
gigs last month now I would say I don't

00:14:14,940 --> 00:14:22,019
know I I just talked myself up a little

00:14:18,360 --> 00:14:25,339
bit it's a warm knock I would like to

00:14:22,019 --> 00:14:29,880
ask um is it like would you guys like to

00:14:25,339 --> 00:14:31,769
like hear some more ranting about like

00:14:29,880 --> 00:14:34,949
programming languages or Ruby or rails

00:14:31,769 --> 00:14:37,740
or would you rather I don't know help me

00:14:34,949 --> 00:14:39,839
be like super smooth into the next topic

00:14:37,740 --> 00:14:43,920
I mean I would say let's raise your hand

00:14:39,839 --> 00:14:48,240
if you want me to rant raise your hand

00:14:43,920 --> 00:14:51,449
if you don't want me to rent yeah so

00:14:48,240 --> 00:14:54,060
that's like that's like it's really

00:14:51,449 --> 00:14:55,740
close but I'm sorry I'm sorry they're

00:14:54,060 --> 00:15:02,390
renting part the more aggressive part of

00:14:55,740 --> 00:15:05,130
the audience one I used to trump's

00:15:02,390 --> 00:15:09,000
electoral vote system to count them

00:15:05,130 --> 00:15:09,800
though it's absolutely it's absolutely

00:15:09,000 --> 00:15:16,620
fine

00:15:09,800 --> 00:15:23,160
okay so AM how how else would you start

00:15:16,620 --> 00:15:25,170
a rent if it's not a tweet from vhh so

00:15:23,160 --> 00:15:28,110
actually so and do make this transition

00:15:25,170 --> 00:15:29,880
from I mean I think it out in this in

00:15:28,110 --> 00:15:32,670
this talk with this consultant that the

00:15:29,880 --> 00:15:35,399
problem in in software development is

00:15:32,670 --> 00:15:36,089
not the actual language it's not is it

00:15:35,399 --> 00:15:38,850
also

00:15:36,089 --> 00:15:40,529
concurrency or is it kind of okay it's

00:15:38,850 --> 00:15:41,490
not like do we have 500 database

00:15:40,529 --> 00:15:43,430
adapters or just one

00:15:41,490 --> 00:15:46,199
the problem is more like what

00:15:43,430 --> 00:15:49,199
granularity of architecture do we have

00:15:46,199 --> 00:15:51,209
in this language and what kind of

00:15:49,199 --> 00:15:56,029
granularity does this language allow me

00:15:51,209 --> 00:15:58,079
to introduce okay so and I don't know I

00:15:56,029 --> 00:16:00,029
actually don't know why I put this into

00:15:58,079 --> 00:16:01,889
the top because I I read this tweed yeah

00:16:00,029 --> 00:16:04,019
like it's lovely when activesupport can

00:16:01,889 --> 00:16:06,269
serve as an experimental lab for future

00:16:04,019 --> 00:16:08,370
core features in Ruby 2 point 5 so

00:16:06,269 --> 00:16:14,759
actually it's about the array prepend

00:16:08,370 --> 00:16:18,089
method in Ruby 2 point 5 and I don't

00:16:14,759 --> 00:16:22,019
know like I read this tweet and it's

00:16:18,089 --> 00:16:23,639
kind of I kind of see this tweet is the

00:16:22,019 --> 00:16:26,220
Ruby community's problem in a nutshell

00:16:23,639 --> 00:16:27,540
like I don't have a problem that anyone

00:16:26,220 --> 00:16:31,589
is like happy that some of their

00:16:27,540 --> 00:16:35,550
features get into Ruby core even if it's

00:16:31,589 --> 00:16:37,740
active support it's it's totally fine if

00:16:35,550 --> 00:16:39,389
you like I don't know tell people about

00:16:37,740 --> 00:16:42,329
this their efforts and everything and I

00:16:39,389 --> 00:16:46,470
mean my respect for their code but it's

00:16:42,329 --> 00:16:50,670
I mean this is like another method on

00:16:46,470 --> 00:16:52,290
top of 328 methods of array that does

00:16:50,670 --> 00:16:53,519
the exact same thing as shifts or

00:16:52,290 --> 00:16:56,040
unshifted and here it comes

00:16:53,519 --> 00:16:57,929
this method name is actually is actually

00:16:56,040 --> 00:17:01,110
understandable it says what it does I

00:16:57,929 --> 00:17:03,899
never remember and shift shift what it

00:17:01,110 --> 00:17:06,480
will pop she whatever but um

00:17:03,899 --> 00:17:08,970
the problem is in Ruby this is actually

00:17:06,480 --> 00:17:10,980
not really our problem like we I mean so

00:17:08,970 --> 00:17:14,100
I don't know I like I wrote this

00:17:10,980 --> 00:17:15,779
response okay who needs strict typing

00:17:14,100 --> 00:17:17,130
pattern matching modern concurrency

00:17:15,779 --> 00:17:18,990
method overloading better keyword

00:17:17,130 --> 00:17:21,209
arguments macros real namespaces and

00:17:18,990 --> 00:17:23,220
packages functions not closures and end

00:17:21,209 --> 00:17:24,600
to monkey patching insanity removal of

00:17:23,220 --> 00:17:27,419
all the loading once and for all

00:17:24,600 --> 00:17:32,370
well please in a new fair world or when

00:17:27,419 --> 00:17:35,220
you can have array prepend and I didn't

00:17:32,370 --> 00:17:37,080
tweet it because it's cute it and

00:17:35,220 --> 00:17:40,500
and also I forgot immutable data

00:17:37,080 --> 00:17:42,780
structures so it's like I don't know it

00:17:40,500 --> 00:17:44,370
kind of like the problem is not that we

00:17:42,780 --> 00:17:46,770
don't have a rate prepend in Ruby the

00:17:44,370 --> 00:17:50,400
problem is how can we extend the

00:17:46,770 --> 00:17:51,420
language and make it easier to have good

00:17:50,400 --> 00:17:53,310
architects I'm going to show some

00:17:51,420 --> 00:17:55,590
examples later so the other reason I

00:17:53,310 --> 00:18:01,560
didn't tweet it is because Twitter only

00:17:55,590 --> 00:18:03,150
allows 134 characters I learned some

00:18:01,560 --> 00:18:07,770
important thing from that tweet that

00:18:03,150 --> 00:18:09,570
never happened just take an hour break

00:18:07,770 --> 00:18:10,650
and then tweet and then you probably not

00:18:09,570 --> 00:18:13,910
going to tweet because it would have

00:18:10,650 --> 00:18:18,180
entered in some stupid discussion anyway

00:18:13,910 --> 00:18:19,050
yeah I this is hospital works reddit is

00:18:18,180 --> 00:18:22,380
way better if you want to have

00:18:19,050 --> 00:18:25,770
intellectual discussions so so my

00:18:22,380 --> 00:18:27,930
problem is that we have enough

00:18:25,770 --> 00:18:29,970
syntactical sugar in Ruby okay this it's

00:18:27,930 --> 00:18:32,220
like amazingly simple to write good

00:18:29,970 --> 00:18:35,130
stuff what I would like in Ruby in the

00:18:32,220 --> 00:18:36,570
future is more abstractions on an

00:18:35,130 --> 00:18:38,580
application level yeah and I'm going to

00:18:36,570 --> 00:18:40,140
show some examples of what I mean and

00:18:38,580 --> 00:18:41,880
I'm going to keep I'm going to keep

00:18:40,140 --> 00:18:43,290
saying this I don't want toys I want two

00:18:41,880 --> 00:18:45,150
of this sounds like really arrogant when

00:18:43,290 --> 00:18:47,010
I say toys I mean syntactical sugar when

00:18:45,150 --> 00:18:49,230
I mean tools I mean higher level

00:18:47,010 --> 00:18:50,190
abstractions in the language itself and

00:18:49,230 --> 00:18:52,980
I'm going to show you some of those

00:18:50,190 --> 00:18:56,150
abstractions and right now in my

00:18:52,980 --> 00:19:00,110
favorite programming language called PHP

00:18:56,150 --> 00:19:05,580
hey we all started with PHP come on

00:19:00,110 --> 00:19:08,160
and actually PHP I mean it's it is well

00:19:05,580 --> 00:19:10,620
known in the Ruby community for being

00:19:08,160 --> 00:19:12,540
like horribly complex a complicated

00:19:10,620 --> 00:19:15,330
language and you add like you can add

00:19:12,540 --> 00:19:18,240
code into like templates and in HTML and

00:19:15,330 --> 00:19:22,800
and like we always laugh about TVR come

00:19:18,240 --> 00:19:26,130
on he's like PHP developer and actually

00:19:22,800 --> 00:19:27,900
PHP has improved a lot in the last

00:19:26,130 --> 00:19:29,760
couple of years and not trying to tell

00:19:27,900 --> 00:19:33,570
you switch to PHP otherwise I mean if

00:19:29,760 --> 00:19:35,340
you do you can work for the police that

00:19:33,570 --> 00:19:36,870
Sam let's let's say I mean do you know

00:19:35,340 --> 00:19:40,299
what the cool is the thing about PHP is

00:19:36,870 --> 00:19:45,269
the website is php.net

00:19:40,299 --> 00:19:49,149
I knew this is not going to work and

00:19:45,269 --> 00:19:51,639
okay so in PHP there's some pretty

00:19:49,149 --> 00:19:52,989
interesting stuff happening since 5.3 or

00:19:51,639 --> 00:19:55,419
something I actually learned I think

00:19:52,989 --> 00:19:58,599
much said that PHP 6 got cancelled I had

00:19:55,419 --> 00:20:01,119
no idea thank you so what they did they

00:19:58,599 --> 00:20:03,129
copied a lot of Ruby stuff in PHP which

00:20:01,119 --> 00:20:05,700
is pretty cool for Ruby so for example

00:20:03,129 --> 00:20:08,679
they have modules they call it trait and

00:20:05,700 --> 00:20:10,450
you can basically define a trait like a

00:20:08,679 --> 00:20:12,700
module in Ruby and then you add

00:20:10,450 --> 00:20:16,089
functions and then you can what is it

00:20:12,700 --> 00:20:19,299
use that trait in a class and it

00:20:16,089 --> 00:20:22,239
automatically imports those methods in

00:20:19,299 --> 00:20:24,429
in the class I don't know if it works

00:20:22,239 --> 00:20:27,459
trade interests I think it also works so

00:20:24,429 --> 00:20:29,709
they basically added modules from Ruby

00:20:27,459 --> 00:20:31,989
to PHP which is cool because modules are

00:20:29,709 --> 00:20:35,259
kind of helpful if you use them in the

00:20:31,989 --> 00:20:37,809
right way and with discipline right they

00:20:35,259 --> 00:20:40,419
also have lambda so you can pass dynamic

00:20:37,809 --> 00:20:42,940
code to to a method and the method will

00:20:40,419 --> 00:20:45,129
yield that lambda I had no idea this is

00:20:42,940 --> 00:20:48,159
happening in PHP and I'm actually

00:20:45,129 --> 00:20:50,969
impressed they also have anonymous

00:20:48,159 --> 00:20:53,759
classes it's not that much of a like

00:20:50,969 --> 00:20:57,700
author of a ripper as the Australian say

00:20:53,759 --> 00:20:59,529
but if you do DSL and if you do if you

00:20:57,700 --> 00:21:01,599
do a meta programming you need an

00:20:59,529 --> 00:21:03,789
anonymous classes and anonymous objects

00:21:01,599 --> 00:21:06,969
and they kind of integrated that into

00:21:03,789 --> 00:21:08,919
PHP five something and what I really

00:21:06,969 --> 00:21:10,659
love and we I would love that in Ruby is

00:21:08,919 --> 00:21:13,149
they have interfaces so you can define

00:21:10,659 --> 00:21:14,889
an interface say this has method

00:21:13,149 --> 00:21:16,959
whatever and method whatever else and

00:21:14,889 --> 00:21:19,299
this is my signature and this is my

00:21:16,959 --> 00:21:22,209
other signature and then you can say and

00:21:19,299 --> 00:21:24,399
then you kind of apply this interface to

00:21:22,209 --> 00:21:27,249
a class and the class has to implement

00:21:24,399 --> 00:21:29,139
that interface or breaks and you can

00:21:27,249 --> 00:21:30,820
also use that interface for it something

00:21:29,139 --> 00:21:31,719
else which is pretty impressive and I

00:21:30,820 --> 00:21:34,299
had no idea

00:21:31,719 --> 00:21:38,049
PHP 7 has typing so you can't actually

00:21:34,299 --> 00:21:41,379
say my function wants an integer and I

00:21:38,049 --> 00:21:43,570
don't know okay this is the simple

00:21:41,379 --> 00:21:44,799
example I my function wants two integers

00:21:43,570 --> 00:21:47,589
and if you give the wrong parameters

00:21:44,799 --> 00:21:50,829
it'll say uncaught type whoops oh

00:21:47,589 --> 00:21:51,570
actually can you guys hear me that's

00:21:50,829 --> 00:21:53,009
great

00:21:51,570 --> 00:21:55,659
so

00:21:53,009 --> 00:21:58,539
you get an arrow that is actually

00:21:55,659 --> 00:21:59,889
meaningful Laura wood would be really

00:21:58,539 --> 00:22:02,169
happy to see that because you now know

00:21:59,889 --> 00:22:05,769
okay this is actually a wrong type and

00:22:02,169 --> 00:22:08,470
not something on nil you can also do

00:22:05,769 --> 00:22:10,779
stuff like hey my method should have

00:22:08,470 --> 00:22:12,639
should receive an object with that

00:22:10,779 --> 00:22:14,710
response to a specific interface and

00:22:12,639 --> 00:22:16,480
this is amazing I mean I'm just thinking

00:22:14,710 --> 00:22:18,730
of it from a gem author perspective like

00:22:16,480 --> 00:22:20,080
if we could say you can only give me

00:22:18,730 --> 00:22:22,360
objects that do this and this and this

00:22:20,080 --> 00:22:24,549
that'll be amazing because I will just

00:22:22,360 --> 00:22:25,869
assume in Ruby this object responds to

00:22:24,549 --> 00:22:27,639
this and this and this and I call this

00:22:25,869 --> 00:22:31,179
and it breaks and no one knows what is

00:22:27,639 --> 00:22:32,980
happening and and you can also say what

00:22:31,179 --> 00:22:35,110
type is going to be returned from a

00:22:32,980 --> 00:22:36,549
former function so that is actually I

00:22:35,110 --> 00:22:40,090
don't know it's pretty impressive so I

00:22:36,549 --> 00:22:42,009
can say oops sorry I can say this

00:22:40,090 --> 00:22:45,879
function returns an array for example

00:22:42,009 --> 00:22:49,960
and I got really excited reading all

00:22:45,879 --> 00:22:51,429
about those PHP features PHP ha ha ha ha

00:22:49,960 --> 00:22:53,740
actually it's not that funny anymore

00:22:51,429 --> 00:22:55,929
because it's like becoming a proper

00:22:53,740 --> 00:22:57,730
language and it has features I've missed

00:22:55,929 --> 00:23:00,460
in Ruby in all fairness

00:22:57,730 --> 00:23:06,100
but one reason not to use PHP is they

00:23:00,460 --> 00:23:08,889
also introduced go-to and I don't know

00:23:06,100 --> 00:23:10,720
about that but I think we don't have

00:23:08,889 --> 00:23:12,279
go-to Ruby right because someone told me

00:23:10,720 --> 00:23:15,039
how we also have that Ruby I've never

00:23:12,279 --> 00:23:18,009
seen it but they introduced that in a

00:23:15,039 --> 00:23:20,350
recent PHP version and that is I'm sorry

00:23:18,009 --> 00:23:21,669
but go-to is like basically saying I

00:23:20,350 --> 00:23:24,730
have no idea what I'm doing

00:23:21,669 --> 00:23:28,749
please go somewhere else and so I was

00:23:24,730 --> 00:23:32,710
reconsidering my PHP like my PHP plans

00:23:28,749 --> 00:23:37,269
after learning about the go-to and so

00:23:32,710 --> 00:23:39,429
you see PHP is not that hahahaha PHP

00:23:37,269 --> 00:23:43,450
ridiculous as you might have thought it

00:23:39,429 --> 00:23:45,669
is if you have questions of a PHP 7 you

00:23:43,450 --> 00:23:49,110
can ask vizac he just bought a book what

00:23:45,669 --> 00:23:49,110
does it say in Japanese I can't read it

00:23:49,350 --> 00:24:00,789
Aaron you speak Japanese right okay the

00:23:55,330 --> 00:24:03,429
book title is no no J is let's have a

00:24:00,789 --> 00:24:05,049
quick look at Java it's also one of my

00:24:03,429 --> 00:24:06,700
favorite programming languages because

00:24:05,049 --> 00:24:09,070
it's really really popular everyone

00:24:06,700 --> 00:24:12,280
is it Java is well-known forum like you

00:24:09,070 --> 00:24:15,640
tied to some huge IDE that makes you do

00:24:12,280 --> 00:24:17,560
stuff the way you don't want it and it

00:24:15,640 --> 00:24:19,570
makes you configure things and you have

00:24:17,560 --> 00:24:22,500
to do like lots of xml and love like

00:24:19,570 --> 00:24:24,460
that's like the thing java developers

00:24:22,500 --> 00:24:26,050
wind you barrel then then you have

00:24:24,460 --> 00:24:27,760
massive architectures with like a

00:24:26,050 --> 00:24:29,110
thousand classes that I don't even like

00:24:27,760 --> 00:24:32,290
because there's too many objects and

00:24:29,110 --> 00:24:34,240
it's actually yeah so the XML a

00:24:32,290 --> 00:24:36,310
configuration part is massive so there's

00:24:34,240 --> 00:24:38,830
no not that much configuration at

00:24:36,310 --> 00:24:40,150
convention over configuration and it

00:24:38,830 --> 00:24:43,390
actually makes people write books like

00:24:40,150 --> 00:24:48,370
Java ruin my life which is literally

00:24:43,390 --> 00:24:50,650
depressing Java has obviously typing so

00:24:48,370 --> 00:24:52,690
I can also say my method is going to

00:24:50,650 --> 00:24:53,980
receive objects from this side and it's

00:24:52,690 --> 00:24:56,230
going to return objects from that type

00:24:53,980 --> 00:24:58,180
which is a really helpful feature I'm

00:24:56,230 --> 00:25:00,640
going to discuss that in a second in

00:24:58,180 --> 00:25:01,960
Ruby context it also interfaces of

00:25:00,640 --> 00:25:03,580
course I mean I know all that from

00:25:01,960 --> 00:25:07,480
university like five hundred years ago

00:25:03,580 --> 00:25:10,810
because Java is quite old so you can

00:25:07,480 --> 00:25:12,520
have interfaces you can you can say this

00:25:10,810 --> 00:25:14,680
class needs to implement the following

00:25:12,520 --> 00:25:17,260
functions and Java knows ok this class

00:25:14,680 --> 00:25:18,700
actually does provide those functions we

00:25:17,260 --> 00:25:19,720
have method overloading which is pretty

00:25:18,700 --> 00:25:23,080
cool so you can have two different

00:25:19,720 --> 00:25:25,810
versions of the same method name like -

00:25:23,080 --> 00:25:27,760
user with different argument chains and

00:25:25,810 --> 00:25:28,120
each Allah will automatically pick at

00:25:27,760 --> 00:25:30,610
runtime

00:25:28,120 --> 00:25:32,110
what what what the version you wanted

00:25:30,610 --> 00:25:34,510
which is pretty cool for like gems or

00:25:32,110 --> 00:25:36,880
something if we had that in Ruby looking

00:25:34,510 --> 00:25:38,350
at math because say you can't deprecated

00:25:36,880 --> 00:25:40,120
methods for example really easily just

00:25:38,350 --> 00:25:42,310
by overloading it I'm dreaming of this

00:25:40,120 --> 00:25:43,720
I'm gonna dream for a little bit more I

00:25:42,310 --> 00:25:45,580
guess they also have something like

00:25:43,720 --> 00:25:48,790
dependency injection built-in I have no

00:25:45,580 --> 00:25:52,240
idea how it works but the way basically

00:25:48,790 --> 00:25:55,870
you kind of say this method is supposed

00:25:52,240 --> 00:25:57,850
to be ready for dependency injection and

00:25:55,870 --> 00:25:59,170
then Java can inject arbitrary objects

00:25:57,850 --> 00:26:01,150
at random I have no idea how it works

00:25:59,170 --> 00:26:05,020
and doesn't matter but you see there's

00:26:01,150 --> 00:26:06,370
lots of features in languages we kind of

00:26:05,020 --> 00:26:08,890
I don't know we kind of laughed about I

00:26:06,370 --> 00:26:11,860
have PHP so funny like people writing

00:26:08,890 --> 00:26:13,600
HTML and weird code with dollar signs

00:26:11,860 --> 00:26:16,180
and Java that's really funny because

00:26:13,600 --> 00:26:17,800
people have like XML files and all this

00:26:16,180 --> 00:26:20,440
but they actually have really cool and

00:26:17,800 --> 00:26:23,170
tools to to write proper

00:26:20,440 --> 00:26:27,790
stable software and you can see that

00:26:23,170 --> 00:26:28,870
that's a ruby so in Ruby and I mean

00:26:27,790 --> 00:26:33,040
don't get me wrong but in the last

00:26:28,870 --> 00:26:34,600
couple of releases we had like Ruby

00:26:33,040 --> 00:26:36,280
wants you the fix time is deprecated

00:26:34,600 --> 00:26:37,590
like this is shattering in the auto

00:26:36,280 --> 00:26:40,360
local variable and this variable

00:26:37,590 --> 00:26:42,190
unassigned si but not use this kind of

00:26:40,360 --> 00:26:43,330
like innovation happening so actually

00:26:42,190 --> 00:26:44,590
it's really annoying for me because I

00:26:43,330 --> 00:26:47,320
have to change all my code so it's

00:26:44,590 --> 00:26:49,090
giving me all the warnings and we get

00:26:47,320 --> 00:26:50,500
the keyword arguments which are awesome

00:26:49,090 --> 00:26:52,120
I love them so much and I use them

00:26:50,500 --> 00:26:55,150
everywhere so you can basically have

00:26:52,120 --> 00:26:56,950
named arguments and then Ruby will take

00:26:55,150 --> 00:26:59,800
care of that so you call this method

00:26:56,950 --> 00:27:01,720
with named arguments and Ruby will kind

00:26:59,800 --> 00:27:04,450
of handle those and assign it to local

00:27:01,720 --> 00:27:05,530
variables it's a great thing and we also

00:27:04,450 --> 00:27:09,550
have refinements which are pretty

00:27:05,530 --> 00:27:12,640
awesome there was a talk two years ago

00:27:09,550 --> 00:27:14,680
here in Singapore the worst feature you

00:27:12,640 --> 00:27:15,850
ever loved by Paulo pirata the guy who

00:27:14,680 --> 00:27:19,870
wrote them

00:27:15,850 --> 00:27:21,790
Ruby metaprogramming ruby that title

00:27:19,870 --> 00:27:23,920
says it all so refinements is a feature

00:27:21,790 --> 00:27:25,870
I have no idea why it exists and why it

00:27:23,920 --> 00:27:28,150
was merged into Ruby so the idea is I

00:27:25,870 --> 00:27:30,550
have some class with a method and then I

00:27:28,150 --> 00:27:34,120
write a refinement and I override that

00:27:30,550 --> 00:27:36,340
method and then I can eject that into

00:27:34,120 --> 00:27:39,160
the runtime environment somehow and then

00:27:36,340 --> 00:27:41,710
see the new sorry cedar fool will

00:27:39,160 --> 00:27:44,680
suddenly behave following the refinement

00:27:41,710 --> 00:27:45,790
and not the original version but it only

00:27:44,680 --> 00:27:48,310
works like if you look at the

00:27:45,790 --> 00:27:49,900
documentation it's like you may only

00:27:48,310 --> 00:27:51,790
activate refinements at top level not

00:27:49,900 --> 00:27:53,920
inside any class modular method scope so

00:27:51,790 --> 00:27:56,290
it's kind of I don't know how that is

00:27:53,920 --> 00:27:59,650
helpful at all and they are active until

00:27:56,290 --> 00:28:01,540
the end of file or evil string so it's

00:27:59,650 --> 00:28:03,220
kind of like you know only valid in the

00:28:01,540 --> 00:28:05,050
lexical content of the file so I saw

00:28:03,220 --> 00:28:07,060
that talk by Paulo pirata and we all

00:28:05,050 --> 00:28:09,190
were more confused than we were before

00:28:07,060 --> 00:28:12,070
like refinement is a feature I don't

00:28:09,190 --> 00:28:14,310
understand why is this like I mean it's

00:28:12,070 --> 00:28:17,890
great that people work on solutions but

00:28:14,310 --> 00:28:19,600
shouldn't we I don't know like and so

00:28:17,890 --> 00:28:21,490
the problem in with refinements is we

00:28:19,600 --> 00:28:22,960
are trying to override so basically you

00:28:21,490 --> 00:28:24,460
call a method call method called method

00:28:22,960 --> 00:28:26,800
that's kind of what a refinement does it

00:28:24,460 --> 00:28:29,800
overrides and ejects code at a specific

00:28:26,800 --> 00:28:31,930
point and maybe the nesting idea in Ruby

00:28:29,800 --> 00:28:33,220
is wrong maybe if you want to write if

00:28:31,930 --> 00:28:34,140
you want to execute something pass the

00:28:33,220 --> 00:28:36,150
result of the next one

00:28:34,140 --> 00:28:40,350
the next one person result of the next

00:28:36,150 --> 00:28:42,000
one maybe a pipeline is way more what we

00:28:40,350 --> 00:28:45,060
need in that context and you could

00:28:42,000 --> 00:28:46,680
inject logic like for refinement in this

00:28:45,060 --> 00:28:48,300
case at any point of the pipeline and

00:28:46,680 --> 00:28:51,330
it's completely obvious what's happening

00:28:48,300 --> 00:28:54,240
so I would love to see more efforts in

00:28:51,330 --> 00:28:57,990
the Ruby community to work on I don't

00:28:54,240 --> 00:29:00,420
know like distinguishing do we need that

00:28:57,990 --> 00:29:03,810
feature yes we want some way to inject

00:29:00,420 --> 00:29:05,880
logic how can we achieve that and just

00:29:03,810 --> 00:29:10,350
because we have this include module

00:29:05,880 --> 00:29:12,930
inclusion thing happening doesn't mean

00:29:10,350 --> 00:29:14,280
that it's it is like their and you

00:29:12,930 --> 00:29:15,870
have to use it all the time because I

00:29:14,280 --> 00:29:18,480
actually get confused and I own modules

00:29:15,870 --> 00:29:20,040
in my gems as well so I often switch to

00:29:18,480 --> 00:29:22,920
something like a pipeline you know like

00:29:20,040 --> 00:29:24,960
the pipe operator and elixirs a good

00:29:22,920 --> 00:29:26,850
example so they picked up they had a

00:29:24,960 --> 00:29:28,800
problem we want to inject code let's

00:29:26,850 --> 00:29:31,170
change our abstraction and I would love

00:29:28,800 --> 00:29:33,000
to see that in Ruby because the concept

00:29:31,170 --> 00:29:37,070
of calling super super super super is

00:29:33,000 --> 00:29:42,330
super hahah is super confusing and

00:29:37,070 --> 00:29:45,530
another example is the face navigator

00:29:42,330 --> 00:29:48,840
also known as the Keanu Reeves operator

00:29:45,530 --> 00:29:52,200
you can see it as does matter so the

00:29:48,840 --> 00:29:54,210
save navigator is basically replacing

00:29:52,200 --> 00:29:56,190
long lines of code like this like user

00:29:54,210 --> 00:29:57,570
profile and if the profile is there and

00:29:56,190 --> 00:29:59,580
if the some things are there and if the

00:29:57,570 --> 00:30:02,580
latch is there then return me that

00:29:59,580 --> 00:30:04,560
result so in and rails which was

00:30:02,580 --> 00:30:06,150
actually a cool idea they introduced try

00:30:04,560 --> 00:30:08,130
and I'm actually I mean I'm not a big

00:30:06,150 --> 00:30:09,810
fan of try using that the abstraction is

00:30:08,130 --> 00:30:11,400
cool because it allows me to do the same

00:30:09,810 --> 00:30:13,830
without having the end end end end end

00:30:11,400 --> 00:30:16,020
and then Ruby pick that up and kind of

00:30:13,830 --> 00:30:18,570
abstracted that into a new operator

00:30:16,020 --> 00:30:21,690
which is also an abstraction and so now

00:30:18,570 --> 00:30:23,790
the same line is like this I'm I'll

00:30:21,690 --> 00:30:26,550
leave it up to you if you use it or not

00:30:23,790 --> 00:30:29,550
I think it's not the worst idea I just

00:30:26,550 --> 00:30:31,350
am not sure if I support those kind of

00:30:29,550 --> 00:30:33,930
calls in general and if we should have

00:30:31,350 --> 00:30:37,070
more decorators or something built into

00:30:33,930 --> 00:30:42,270
Ruby actually um

00:30:37,070 --> 00:30:45,540
typing in Ruby is basically this so in

00:30:42,270 --> 00:30:47,460
Ruby and I don't know how many undefined

00:30:45,540 --> 00:30:48,020
methods for nill class I had in my whole

00:30:47,460 --> 00:30:51,440
life

00:30:48,020 --> 00:30:53,510
I think 500000 are not enough so I would

00:30:51,440 --> 00:30:57,950
love to see typing in Ruby because it

00:30:53,510 --> 00:31:00,140
will help us to write way more stable

00:30:57,950 --> 00:31:01,970
software without having to do anything

00:31:00,140 --> 00:31:03,559
and that's my whole point about them the

00:31:01,970 --> 00:31:06,740
granularity I'm talking about

00:31:03,559 --> 00:31:09,580
I want features that are tools that help

00:31:06,740 --> 00:31:11,750
me to write code without having to

00:31:09,580 --> 00:31:16,400
create all those instructions himself

00:31:11,750 --> 00:31:18,260
that would be great ok and I spoke to

00:31:16,400 --> 00:31:21,080
too much many times and he has some

00:31:18,260 --> 00:31:23,720
great ideas and I'm actually still very

00:31:21,080 --> 00:31:26,300
positive about Ruby I think we're on a

00:31:23,720 --> 00:31:28,190
good way and what's crazy great about

00:31:26,300 --> 00:31:31,550
Ruby is that we can create all those

00:31:28,190 --> 00:31:35,030
abstractions ourselves yeah so for

00:31:31,550 --> 00:31:37,220
example we had this beautiful top item

00:31:35,030 --> 00:31:38,960
Riley this morning about dry RB dry B is

00:31:37,220 --> 00:31:43,100
a fantastic project bringing bring you

00:31:38,960 --> 00:31:45,950
functional style dialect into you

00:31:43,100 --> 00:31:48,650
Ruby applications it has a bunch of

00:31:45,950 --> 00:31:50,270
great gems like I don't know dry

00:31:48,650 --> 00:31:53,110
validations Roo super popular then we

00:31:50,270 --> 00:31:55,850
have I don't know dry mature dry a view

00:31:53,110 --> 00:31:57,170
iOS use dry container it's fantastic for

00:31:55,850 --> 00:31:58,790
dependency management so they have lots

00:31:57,170 --> 00:32:01,850
of little libraries that you can use

00:31:58,790 --> 00:32:03,830
without using the entire stack and they

00:32:01,850 --> 00:32:05,660
also have a fantastic website which is

00:32:03,830 --> 00:32:09,830
pretty uncommon for an open-source

00:32:05,660 --> 00:32:12,050
project and so for example at the API

00:32:09,830 --> 00:32:14,360
they create a super like it is so

00:32:12,050 --> 00:32:16,280
intuitive because it's simple yeah like

00:32:14,360 --> 00:32:17,360
the dry validation gem gives you a form

00:32:16,280 --> 00:32:19,940
and in the form you can write a

00:32:17,360 --> 00:32:23,000
validation and then you apply that

00:32:19,940 --> 00:32:25,059
validation to a hash by using the call

00:32:23,000 --> 00:32:27,200
method and the validation will say you

00:32:25,059 --> 00:32:28,340
everything is fine or it will say you're

00:32:27,200 --> 00:32:30,080
like there was an error and the error

00:32:28,340 --> 00:32:32,809
was the following so it's kind of a an

00:32:30,080 --> 00:32:34,730
abstraction of validation we have

00:32:32,809 --> 00:32:36,950
validations everywhere and drive

00:32:34,730 --> 00:32:39,020
innovation makes it super accessible and

00:32:36,950 --> 00:32:41,150
you don't even have to think about that

00:32:39,020 --> 00:32:44,090
so dry validation the dry speck in

00:32:41,150 --> 00:32:47,840
general is a great tool set for me and I

00:32:44,090 --> 00:32:49,250
love it I love to use it it is heavily

00:32:47,840 --> 00:32:51,290
pushed in the reform gem the dry

00:32:49,250 --> 00:32:52,670
validation and it also is popular

00:32:51,290 --> 00:32:53,809
without reform which is surprising I'm

00:32:52,670 --> 00:32:55,220
just kidding

00:32:53,809 --> 00:32:58,070
you can see it in the downloads they

00:32:55,220 --> 00:33:01,040
have like $300,000 in like one week or

00:32:58,070 --> 00:33:01,890
something which is basically saying that

00:33:01,040 --> 00:33:05,730
people like

00:33:01,890 --> 00:33:07,649
and they have an amazing website which

00:33:05,730 --> 00:33:11,370
is pretty uncommon for an open-source

00:33:07,649 --> 00:33:13,409
project you should check out this stuff

00:33:11,370 --> 00:33:15,809
because then the two set they provide is

00:33:13,409 --> 00:33:19,110
very flexible and it does not interfere

00:33:15,809 --> 00:33:20,700
with your existing stuff the next thing

00:33:19,110 --> 00:33:23,960
I would like to show you with

00:33:20,700 --> 00:33:26,820
abstractions is hanami hanami is

00:33:23,960 --> 00:33:28,679
excessive on the homepage the modern web

00:33:26,820 --> 00:33:30,840
framework for Ruby a few months ago it

00:33:28,679 --> 00:33:31,830
said the complete web framework for Ruby

00:33:30,840 --> 00:33:33,330
I don't know why they changed the

00:33:31,830 --> 00:33:34,610
mission I have an idea and I'm going to

00:33:33,330 --> 00:33:37,260
talk about it in a minute

00:33:34,610 --> 00:33:40,320
so hanami is also like a and really

00:33:37,260 --> 00:33:42,360
interesting replacement basically for

00:33:40,320 --> 00:33:44,820
something like rails so it gives you MVC

00:33:42,360 --> 00:33:46,440
but in a very very extended wait yeahyou

00:33:44,820 --> 00:33:48,480
has a survey of routing and all that so

00:33:46,440 --> 00:33:50,190
basically they also have a beautiful

00:33:48,480 --> 00:33:54,299
website which is pretty uncommon for an

00:33:50,190 --> 00:33:55,769
open-source project and the website is

00:33:54,299 --> 00:33:57,630
full of your great documentation so

00:33:55,769 --> 00:33:59,010
basically hanami works like rail and it

00:33:57,630 --> 00:34:00,990
does not work like rest absolutely not

00:33:59,010 --> 00:34:02,730
but it gives you like a generator you

00:34:00,990 --> 00:34:04,049
can say hanami new bookshelf and it'll

00:34:02,730 --> 00:34:05,820
create you like the entire directory

00:34:04,049 --> 00:34:07,799
structure raked house everything you

00:34:05,820 --> 00:34:09,510
want then you basically have routing

00:34:07,799 --> 00:34:11,639
it's completely different to Rails

00:34:09,510 --> 00:34:13,109
routing but it's beautiful it uses rec

00:34:11,639 --> 00:34:15,510
and all that kind of stuff you have

00:34:13,109 --> 00:34:18,470
instead of controllers you have actions

00:34:15,510 --> 00:34:20,760
and those actions are specific to one

00:34:18,470 --> 00:34:23,070
controller action yeah so it's basically

00:34:20,760 --> 00:34:25,440
like the guest create in a controller in

00:34:23,070 --> 00:34:27,839
rails is an attack class in hanami and

00:34:25,440 --> 00:34:29,310
in that class you kind of run your

00:34:27,839 --> 00:34:31,080
business code if you want that if you

00:34:29,310 --> 00:34:34,290
like that so hanami gives you complete

00:34:31,080 --> 00:34:36,839
new set of abstractions and tools for

00:34:34,290 --> 00:34:38,099
for web applications again I don't have

00:34:36,839 --> 00:34:40,050
to think about routing I don't have to

00:34:38,099 --> 00:34:41,280
think about rendering so what hanami

00:34:40,050 --> 00:34:42,869
basically does is it gives you this

00:34:41,280 --> 00:34:45,089
router it gives you the action

00:34:42,869 --> 00:34:46,409
abstraction it uses dry validation gives

00:34:45,089 --> 00:34:48,659
you some more cultural models and

00:34:46,409 --> 00:34:50,129
repositories I just I think you should

00:34:48,659 --> 00:34:51,929
look at the beautiful website that's

00:34:50,129 --> 00:34:54,810
really uncommon for open source projects

00:34:51,929 --> 00:34:57,570
and it also has stuff like generators

00:34:54,810 --> 00:35:00,089
efforts mailers so it gives you all the

00:34:57,570 --> 00:35:02,310
what we call infrastructure to write

00:35:00,089 --> 00:35:05,910
applications it also comes with a view

00:35:02,310 --> 00:35:09,420
layer herand you don't have to Jackie

00:35:05,910 --> 00:35:11,609
it's a kit and so they also have a view

00:35:09,420 --> 00:35:13,770
layer they they basically give you the

00:35:11,609 --> 00:35:15,240
full stack to write software actually

00:35:13,770 --> 00:35:17,940
not because it's

00:35:15,240 --> 00:35:20,520
we'll really undefined how to write a

00:35:17,940 --> 00:35:21,990
business code in hanami so they give you

00:35:20,520 --> 00:35:23,369
these infrastructure they have great

00:35:21,990 --> 00:35:25,680
abstractions for the validation

00:35:23,369 --> 00:35:27,390
everything but when it comes to how do I

00:35:25,680 --> 00:35:29,520
actually write the code that is going to

00:35:27,390 --> 00:35:31,290
be executed like I don't know processing

00:35:29,520 --> 00:35:32,970
an order or adding an item to a shopping

00:35:31,290 --> 00:35:34,619
cart or this kind of stuff it's kind of

00:35:32,970 --> 00:35:38,820
unclear and this is where my favorite

00:35:34,619 --> 00:35:40,950
framework comes into play so this is

00:35:38,820 --> 00:35:42,360
exactly what basically the Trailblazer

00:35:40,950 --> 00:35:43,830
framework which is the third of the

00:35:42,360 --> 00:35:47,730
three projects I'm going to demonstrate

00:35:43,830 --> 00:35:49,350
death so Trailblazer and does not bring

00:35:47,730 --> 00:35:52,700
you routing credit it does not bring you

00:35:49,350 --> 00:35:55,740
mailers or generators or I don't know

00:35:52,700 --> 00:35:58,410
persistence trevor's is only focusing on

00:35:55,740 --> 00:36:00,270
how do I write the business code okay so

00:35:58,410 --> 00:36:01,830
that's a big thing people misunderstand

00:36:00,270 --> 00:36:03,420
they they're like okay that's dry

00:36:01,830 --> 00:36:05,130
there's Honami and there's relatively

00:36:03,420 --> 00:36:07,500
like competing it's absolutely not like

00:36:05,130 --> 00:36:08,160
that so we all kind of integrate into

00:36:07,500 --> 00:36:10,170
each other

00:36:08,160 --> 00:36:13,110
traveller takes over the business code

00:36:10,170 --> 00:36:15,690
for for example for hanami so if you

00:36:13,110 --> 00:36:17,340
like this is a beautiful diagram in

00:36:15,690 --> 00:36:19,619
hanami and it does totally not fit on

00:36:17,340 --> 00:36:24,570
the screen because my CSS skills suck

00:36:19,619 --> 00:36:27,180
and my laptop I have no idea and the

00:36:24,570 --> 00:36:28,920
same is with rails or trailers also

00:36:27,180 --> 00:36:30,960
works with rails so instead of I mean

00:36:28,920 --> 00:36:33,090
rails and hanami are not identical at

00:36:30,960 --> 00:36:37,020
all yeah I'm not going to say which one

00:36:33,090 --> 00:36:38,850
is better of course but that trellis

00:36:37,020 --> 00:36:40,590
doesn't care if it's you know if it's

00:36:38,850 --> 00:36:43,950
used in rails or a Nanami or Sinatra

00:36:40,590 --> 00:36:46,290
Road add you name it so thread is a

00:36:43,950 --> 00:36:48,000
takes over specific layers of your

00:36:46,290 --> 00:36:50,910
application without interfering with the

00:36:48,000 --> 00:36:53,100
rest of the framework it's by the way

00:36:50,910 --> 00:36:56,040
it's called an advanced business logic

00:36:53,100 --> 00:36:58,050
framework just saying it also has a

00:36:56,040 --> 00:37:01,859
beautiful home page which is really

00:36:58,050 --> 00:37:03,570
uncommon for opens or project so you can

00:37:01,859 --> 00:37:05,190
see there's like a battle going on who's

00:37:03,570 --> 00:37:06,540
got the nicest home page you know open

00:37:05,190 --> 00:37:08,340
source and ruby which is amazing because

00:37:06,540 --> 00:37:09,720
we all like you know competition is good

00:37:08,340 --> 00:37:12,840
for the economy and so on and so on and

00:37:09,720 --> 00:37:15,660
so on so what trail is it does is it

00:37:12,840 --> 00:37:17,660
brings a lot of new abstractions but it

00:37:15,660 --> 00:37:19,710
also brings like some kind of extended a

00:37:17,660 --> 00:37:22,080
directory structure so instead of

00:37:19,710 --> 00:37:24,150
pushing things into app controller app

00:37:22,080 --> 00:37:26,520
model at view you push things into app

00:37:24,150 --> 00:37:28,980
concepts and then you order by concept

00:37:26,520 --> 00:37:30,420
and then by technology okay

00:37:28,980 --> 00:37:32,490
going to show you an example in a second

00:37:30,420 --> 00:37:34,800
so it's new file structure it brings a

00:37:32,490 --> 00:37:36,960
lot of new abstractions like validations

00:37:34,800 --> 00:37:38,670
and policies and it kind of lets you

00:37:36,960 --> 00:37:40,560
play with active record or with sequel

00:37:38,670 --> 00:37:41,190
or whatever so I'm not going to go into

00:37:40,560 --> 00:37:43,470
the details

00:37:41,190 --> 00:37:46,890
the interesting part in Trailblazer is

00:37:43,470 --> 00:37:50,160
and that is what betsy was talking about

00:37:46,890 --> 00:37:52,530
in her talk earlier today that we kind

00:37:50,160 --> 00:37:54,390
of have the same philosophy of why would

00:37:52,530 --> 00:37:56,300
I mix a lot of business code into the

00:37:54,390 --> 00:37:58,470
controller which is really hard to test

00:37:56,300 --> 00:38:01,109
again thank you for the talk because it

00:37:58,470 --> 00:38:03,230
excites me when people when we all use

00:38:01,109 --> 00:38:06,990
like advanced features like

00:38:03,230 --> 00:38:08,430
encapsulation and so in an intro there's

00:38:06,990 --> 00:38:10,290
a huge you would have this service

00:38:08,430 --> 00:38:12,060
object betsy was talking about it would

00:38:10,290 --> 00:38:14,190
be called an operation for example blog

00:38:12,060 --> 00:38:16,560
post create and the controller simply

00:38:14,190 --> 00:38:19,020
calls that operation passes in all the

00:38:16,560 --> 00:38:20,580
dependencies like parameters and does

00:38:19,020 --> 00:38:22,710
not know anything what's going on in

00:38:20,580 --> 00:38:23,790
that operation and the operation has no

00:38:22,710 --> 00:38:25,440
idea what's going on outside

00:38:23,790 --> 00:38:28,760
the cool thing about that is and again

00:38:25,440 --> 00:38:31,680
this is what Betsy was showing that this

00:38:28,760 --> 00:38:33,869
cementec this interface can also be used

00:38:31,680 --> 00:38:35,900
for testing so you do the exact same

00:38:33,869 --> 00:38:39,119
thing in a test without having to think

00:38:35,900 --> 00:38:40,920
how it has this piece of business code

00:38:39,119 --> 00:38:43,050
you just run the operation you call it

00:38:40,920 --> 00:38:43,800
in this case and you test the result

00:38:43,050 --> 00:38:45,450
object okay

00:38:43,800 --> 00:38:47,580
so it's really simple API and it's

00:38:45,450 --> 00:38:51,000
unbreakable because it's it's it's what

00:38:47,580 --> 00:38:54,540
we call encapsulation so this is a thing

00:38:51,000 --> 00:38:56,580
that all then you in quotes new gems

00:38:54,540 --> 00:38:59,070
like hanami dry and Trevor they use this

00:38:56,580 --> 00:39:00,960
kind of semantics where you call objects

00:38:59,070 --> 00:39:02,609
and they don't have any other public

00:39:00,960 --> 00:39:05,760
method so it's basically a functional

00:39:02,609 --> 00:39:08,820
object that was explained by to riley

00:39:05,760 --> 00:39:11,130
today yeah so I can only call there's no

00:39:08,820 --> 00:39:13,980
way I can run any other method on this

00:39:11,130 --> 00:39:14,460
thing whatever that is and if you wonder

00:39:13,980 --> 00:39:16,859
what it does

00:39:14,460 --> 00:39:18,030
just read it blog post create so what is

00:39:16,859 --> 00:39:21,960
it going to do it's going to create a

00:39:18,030 --> 00:39:25,650
blog post obviously and so Trevor Isaac

00:39:21,960 --> 00:39:28,440
kind of jumps into the into the gap

00:39:25,650 --> 00:39:31,859
where we don't know how to model

00:39:28,440 --> 00:39:33,390
business logic it actually kind of takes

00:39:31,859 --> 00:39:36,270
over a little bit more than that so it

00:39:33,390 --> 00:39:38,700
kind of wraps or orchestrate validations

00:39:36,270 --> 00:39:42,300
is models repositories if you want to

00:39:38,700 --> 00:39:42,900
like policies gives you eyes if you want

00:39:42,300 --> 00:39:45,960
that it also

00:39:42,900 --> 00:39:47,490
has like slow control I mean like try to

00:39:45,960 --> 00:39:50,369
make it look really ridiculous because I

00:39:47,490 --> 00:39:52,049
suck at design as well so try but it

00:39:50,369 --> 00:39:53,970
gives you a lot of abstractions and that

00:39:52,049 --> 00:39:57,510
are optimized for their business color

00:39:53,970 --> 00:39:59,849
yeah I should have done this beautiful

00:39:57,510 --> 00:40:01,380
stack diagram to show you a beautiful

00:39:59,849 --> 00:40:03,450
diagram because I learned from my

00:40:01,380 --> 00:40:05,460
meeting with my consultant at the belief

00:40:03,450 --> 00:40:08,880
that good-looking diagrams make people

00:40:05,460 --> 00:40:14,760
amazed bad-looking diagrams like that

00:40:08,880 --> 00:40:17,549
one suck and okay so this just a really

00:40:14,760 --> 00:40:19,500
quick example how that blog post

00:40:17,549 --> 00:40:21,720
creation would look in trailblazer so

00:40:19,500 --> 00:40:24,299
you would probably add a concept called

00:40:21,720 --> 00:40:28,289
blog post and a folder operation with

00:40:24,299 --> 00:40:32,400
create dot RB file and yeah it's a we

00:40:28,289 --> 00:40:33,599
this file contains an operation and to

00:40:32,400 --> 00:40:35,130
write that blog post we have the

00:40:33,599 --> 00:40:37,650
following things to do we create a blog

00:40:35,130 --> 00:40:39,270
post model we assign a UUID so we have

00:40:37,650 --> 00:40:41,369
to generate a Yui ID we have to save

00:40:39,270 --> 00:40:43,859
that model to the database and we have

00:40:41,369 --> 00:40:45,270
to update the total posts counter as

00:40:43,859 --> 00:40:46,950
it's just an example what to do this

00:40:45,270 --> 00:40:50,059
could be any any kind of business code

00:40:46,950 --> 00:40:53,369
so in the diagram this would be a

00:40:50,059 --> 00:40:55,349
straight graph pointing from left to

00:40:53,369 --> 00:40:58,160
right model blah blah blah update

00:40:55,349 --> 00:41:01,230
counter and what if something happens

00:40:58,160 --> 00:41:03,240
what if we have a W UID for example we

00:41:01,230 --> 00:41:04,920
should catch that error in a diagram

00:41:03,240 --> 00:41:06,450
this would look like this yeah when I

00:41:04,920 --> 00:41:09,180
save the database we'll say hey there

00:41:06,450 --> 00:41:11,730
was a UUID error so we kind of can't

00:41:09,180 --> 00:41:14,869
catch and treat that UID error in this

00:41:11,730 --> 00:41:17,730
kind of box whatever that box is and

00:41:14,869 --> 00:41:20,250
let's say we also had a counter error

00:41:17,730 --> 00:41:22,349
maybe the counter is only till 128

00:41:20,250 --> 00:41:24,720
because it's an unsigned int I had that

00:41:22,349 --> 00:41:27,690
problem in an old project a few years

00:41:24,720 --> 00:41:30,210
ago in PHP by the way and so we in the

00:41:27,690 --> 00:41:31,980
diagram this would be the counter error

00:41:30,210 --> 00:41:33,510
can only happen after we update the

00:41:31,980 --> 00:41:36,510
counter so in a diagram we would have

00:41:33,510 --> 00:41:38,250
either this was successful all this was

00:41:36,510 --> 00:41:41,220
not successful handle this counter error

00:41:38,250 --> 00:41:43,589
okay so red laser makes it really simple

00:41:41,220 --> 00:41:45,240
to have those kind of diagrams in code

00:41:43,589 --> 00:41:49,140
without you having to do anything

00:41:45,240 --> 00:41:53,130
yeah and relax it is a diagram it's not

00:41:49,140 --> 00:41:55,170
that thing okay so am to have this

00:41:53,130 --> 00:41:56,430
simple linear workflow for example in an

00:41:55,170 --> 00:41:58,680
operation you would simply

00:41:56,430 --> 00:42:00,480
have this operation class user sorry

00:41:58,680 --> 00:42:03,360
that should be blocked posted user I my

00:42:00,480 --> 00:42:05,070
talk suck and you add the steps that you

00:42:03,360 --> 00:42:06,870
want to have executed in the order you

00:42:05,070 --> 00:42:08,430
wanna have been executed you can call

00:42:06,870 --> 00:42:10,650
that operation you get the result object

00:42:08,430 --> 00:42:12,390
you can ask the result of everything

00:42:10,650 --> 00:42:14,250
okay success or failure so don't worry

00:42:12,390 --> 00:42:17,970
if you don't understand all the details

00:42:14,250 --> 00:42:19,710
because it is just an overview and yeah

00:42:17,970 --> 00:42:22,760
so if success tells me Falls then

00:42:19,710 --> 00:42:26,220
something went wrong so in order to have

00:42:22,760 --> 00:42:27,990
failures or error handling in this in

00:42:26,220 --> 00:42:30,270
this diagram I just use the failure

00:42:27,990 --> 00:42:31,710
method and add the steps in the order I

00:42:30,270 --> 00:42:33,510
want for error handling and this will

00:42:31,710 --> 00:42:35,940
basically result in a slow controlled

00:42:33,510 --> 00:42:39,330
diagram like that so it's super easy

00:42:35,940 --> 00:42:40,920
intuitive to have complex workflows in

00:42:39,330 --> 00:42:42,540
Ruby because I mean this is kind of

00:42:40,920 --> 00:42:43,830
readable and you can render that and it

00:42:42,540 --> 00:42:46,140
will show you the diagram which is so

00:42:43,830 --> 00:42:48,540
and it's kind of easy to understand so

00:42:46,140 --> 00:42:50,370
the idea of further is your steps and

00:42:48,540 --> 00:42:52,560
steps can be methods or lambdas or

00:42:50,370 --> 00:42:54,090
callable objects and they just sit in

00:42:52,560 --> 00:42:57,450
the operation or they just sit anywhere

00:42:54,090 --> 00:42:59,520
you want and they basically write to the

00:42:57,450 --> 00:43:01,350
options object which is the only mutable

00:42:59,520 --> 00:43:07,100
object in trailblazer so you write stuff

00:43:01,350 --> 00:43:10,590
like the UUID to the options object and

00:43:07,100 --> 00:43:12,390
then you can read that set from the

00:43:10,590 --> 00:43:14,130
result objects I call the operation on

00:43:12,390 --> 00:43:16,320
the outside and I can say hey result

00:43:14,130 --> 00:43:17,130
what kind of view Rd did you create and

00:43:16,320 --> 00:43:19,680
like hello whatever

00:43:17,130 --> 00:43:21,650
so this is how you access state from the

00:43:19,680 --> 00:43:25,260
outside from the caller perspective and

00:43:21,650 --> 00:43:27,900
to directing the flow error handling all

00:43:25,260 --> 00:43:29,640
we do is basically it's a step returns

00:43:27,900 --> 00:43:32,100
false it goes to the error handling

00:43:29,640 --> 00:43:33,660
track if it returns true it stays on the

00:43:32,100 --> 00:43:36,090
on the top track the one in the diagram

00:43:33,660 --> 00:43:37,860
we just saw so this is all like just an

00:43:36,090 --> 00:43:38,580
idea for you guys we understand where

00:43:37,860 --> 00:43:40,590
this is going

00:43:38,580 --> 00:43:42,750
it's really simple to kind of have work

00:43:40,590 --> 00:43:45,540
cred as a control your flow well you

00:43:42,750 --> 00:43:48,780
only focus on the implementation here so

00:43:45,540 --> 00:43:50,670
this diagram is is a like six lines of

00:43:48,780 --> 00:43:52,080
code including not including the

00:43:50,670 --> 00:43:56,670
implementations for the actual steps

00:43:52,080 --> 00:43:59,130
that's only the basics and so the idea

00:43:56,670 --> 00:44:01,020
is have encapsulated objects that you

00:43:59,130 --> 00:44:02,280
can't break you can just call them and

00:44:01,020 --> 00:44:04,200
they will do something and they will

00:44:02,280 --> 00:44:06,780
give you a result and if or not they use

00:44:04,200 --> 00:44:09,930
this comp flow control is your problem

00:44:06,780 --> 00:44:11,670
you can test them in a really nice way

00:44:09,930 --> 00:44:13,680
without having to know anything about

00:44:11,670 --> 00:44:16,319
the internals because you use the exact

00:44:13,680 --> 00:44:17,970
same API it means it's also going to do

00:44:16,319 --> 00:44:19,559
the exact same thing it does in

00:44:17,970 --> 00:44:22,680
production which is amazing because you

00:44:19,559 --> 00:44:23,940
don't have to hope that your tests in

00:44:22,680 --> 00:44:27,119
your production match you can also use

00:44:23,940 --> 00:44:30,960
operations as factories because I also

00:44:27,119 --> 00:44:33,690
don't like factory girl mm-hmm and it's

00:44:30,960 --> 00:44:36,290
basically giving you an API and internal

00:44:33,690 --> 00:44:38,520
API for your application for free and

00:44:36,290 --> 00:44:40,920
many people ask hey wait a minute damn

00:44:38,520 --> 00:44:44,670
this is way too many objects and isn't

00:44:40,920 --> 00:44:46,290
there to enterprise and when I think of

00:44:44,670 --> 00:44:47,970
enterprise I don't think of the Starship

00:44:46,290 --> 00:44:49,950
Enterprise I think of like diagrams and

00:44:47,970 --> 00:44:53,609
everything is pretty cool and so

00:44:49,950 --> 00:44:54,900
Enterprise is software that is used to

00:44:53,609 --> 00:44:57,270
satisfy the needs of an organization

00:44:54,900 --> 00:44:59,339
rather than an individual users

00:44:57,270 --> 00:45:01,109
apparently we are all writing enterprise

00:44:59,339 --> 00:45:03,750
software as Ruby developers enterprise

00:45:01,109 --> 00:45:06,030
immersive Oracle and like certificate

00:45:03,750 --> 00:45:09,240
and like huge diagrams that make no

00:45:06,030 --> 00:45:11,760
sense because you use like a shit-ton or

00:45:09,240 --> 00:45:13,470
factory factory to create something and

00:45:11,760 --> 00:45:15,150
it is like yeah okay it's not the

00:45:13,470 --> 00:45:17,730
enterprise's kind of ridiculous but

00:45:15,150 --> 00:45:19,859
actually enterprise we need enterprise

00:45:17,730 --> 00:45:23,130
patterns to write favor software because

00:45:19,859 --> 00:45:24,690
I am bio respect but three layers and

00:45:23,130 --> 00:45:27,089
rails is not enough to write like

00:45:24,690 --> 00:45:29,400
complex software and I mean we end up

00:45:27,089 --> 00:45:31,559
usually with like huge models that kind

00:45:29,400 --> 00:45:33,690
of contain everything from workflows to

00:45:31,559 --> 00:45:36,030
business code to persistence co2

00:45:33,690 --> 00:45:37,650
validation code it's kind of I don't

00:45:36,030 --> 00:45:39,270
want to say messy because negative and

00:45:37,650 --> 00:45:42,150
this is the last talk I want to give you

00:45:39,270 --> 00:45:43,200
a positive feeling so but it's not ideal

00:45:42,150 --> 00:45:45,420
if you want to build something

00:45:43,200 --> 00:45:48,660
sustainable for multiple users also

00:45:45,420 --> 00:45:52,020
known as enterprise software and so the

00:45:48,660 --> 00:45:54,900
idea of this formula is flows with

00:45:52,020 --> 00:45:55,950
diagrams is nothing new so we didn't

00:45:54,900 --> 00:45:58,770
invent that there's something called

00:45:55,950 --> 00:46:01,500
bpmn business model process notation

00:45:58,770 --> 00:46:05,160
also people usually laugh ppm n is

00:46:01,500 --> 00:46:08,369
basically boxes and arrows and it has

00:46:05,160 --> 00:46:10,530
like activities and thousands of like I

00:46:08,369 --> 00:46:12,180
don't know like you tell me knowledge e

00:46:10,530 --> 00:46:14,280
words in the in the glossary it's really

00:46:12,180 --> 00:46:16,650
ridiculous actually it's I don't know a

00:46:14,280 --> 00:46:18,450
BPMN is a diagram language to specify

00:46:16,650 --> 00:46:19,950
business processes so that the idiot

00:46:18,450 --> 00:46:21,900
pardon gentleman in suit and tie

00:46:19,950 --> 00:46:23,760
understand them and coders can code them

00:46:21,900 --> 00:46:26,450
it's actually pretty cool

00:46:23,760 --> 00:46:28,650
and it shouldn't be neglected in Ruby a

00:46:26,450 --> 00:46:30,900
enterprises not a bad word like writing

00:46:28,650 --> 00:46:33,300
stable software is actually pretty cool

00:46:30,900 --> 00:46:35,490
and of course I wouldn't tell you all

00:46:33,300 --> 00:46:37,890
this if I would if it wasn't for trailer

00:46:35,490 --> 00:46:39,300
that now comes in two point one with ppm

00:46:37,890 --> 00:46:41,250
and support so you can have like

00:46:39,300 --> 00:46:43,109
operations and wire them together and

00:46:41,250 --> 00:46:43,770
why operation in operators and so on and

00:46:43,109 --> 00:46:47,510
so on and so on

00:46:43,770 --> 00:46:53,220
and but the so the idea is that I'm

00:46:47,510 --> 00:46:56,400
trying to communicate we have Ruby as a

00:46:53,220 --> 00:46:58,530
language it gives us a lot of tools but

00:46:56,400 --> 00:46:59,850
they are all kind of low level so at the

00:46:58,530 --> 00:47:02,280
moment we have to create those

00:46:59,850 --> 00:47:04,320
abstractions ourselves this is great I'm

00:47:02,280 --> 00:47:06,240
happy with it I mean I'm doing Ruby for

00:47:04,320 --> 00:47:08,700
like 12 years old apparently I am happy

00:47:06,240 --> 00:47:13,530
I could have switched to PHP last week

00:47:08,700 --> 00:47:15,390
but I didn't and so but I would love to

00:47:13,530 --> 00:47:17,280
see Ruby go somewhere where we have

00:47:15,390 --> 00:47:21,240
those abstractions built in like a

00:47:17,280 --> 00:47:23,100
native decorators for example in in Ruby

00:47:21,240 --> 00:47:25,500
or native arrow objects in this kind of

00:47:23,100 --> 00:47:27,690
stuff so I would love to see more work

00:47:25,500 --> 00:47:33,530
on that kind of on that level of

00:47:27,690 --> 00:47:36,750
building applications and I also

00:47:33,530 --> 00:47:38,369
interrogated much a lot of hours at the

00:47:36,750 --> 00:47:40,080
rubicon Philippines about M Ruby I'm

00:47:38,369 --> 00:47:42,290
really excited about M Ruby it looks

00:47:40,080 --> 00:47:45,810
like it's going to be kind of a fresh

00:47:42,290 --> 00:47:48,180
version of Ruby and that has ditched or

00:47:45,810 --> 00:47:50,310
not implemented some of the features

00:47:48,180 --> 00:47:54,300
that were not really beneficial for Ruby

00:47:50,310 --> 00:47:57,119
like autoloading for example so our

00:47:54,300 --> 00:47:59,100
favorite topic I'm actually really

00:47:57,119 --> 00:48:02,130
excited to go home and try M Ruby

00:47:59,100 --> 00:48:05,609
because it looks like there's a lot of

00:48:02,130 --> 00:48:08,270
fresh and clean code that is ready for

00:48:05,609 --> 00:48:12,900
additional abstractions in the future

00:48:08,270 --> 00:48:15,390
because we all want to write beautiful

00:48:12,900 --> 00:48:19,290
code and if you have questions I

00:48:15,390 --> 00:48:20,850
actually did overtime on purpose because

00:48:19,290 --> 00:48:22,950
I don't want to answer questions as we

00:48:20,850 --> 00:48:25,890
all oh the worst is like you don't have

00:48:22,950 --> 00:48:29,690
questions I'm standing here like so I

00:48:25,890 --> 00:48:31,619
would say let's to read Twitter is like

00:48:29,690 --> 00:48:35,250
Instagram but you don't need a

00:48:31,619 --> 00:48:37,260
smartphone to use it or we can just hang

00:48:35,250 --> 00:48:38,790
out tonight or tomorrow

00:48:37,260 --> 00:48:40,020
thank you very much you are a great

00:48:38,790 --> 00:48:47,920
audience

00:48:40,020 --> 00:48:47,920

YouTube URL: https://www.youtube.com/watch?v=4q3sycRJ5bs


