Title: Writing Better Errors - RedDotRubyConf 2017
Publication date: 2020-01-22
Playlist: RedDotRuby 2017
Description: 
	Speaker: Laura Eck, Software Engineer, TenTen Ltd

At their core, all errors trigger the same question, no matter who encounters them: What went wrong, and how do I make it work? At the same time, every error has specific target audiences that are interested in answering exactly that question - but possibly in very different ways. In this talk, we will explore how to design errors so they give each stakeholder the information they need to fix the issue at hand, and how we can use them to make our software even better. Errors might never be something you look forward to seeing - but when they crash your party, they'll at least know how to chat with the guests.

Speaker's Bio

Laura is a web developer living in Tokyo and working for Berlin. One of her favorite pastimes is learning something new, be it a technology, a language or anything else. When sheâ€™s not busy coding, you can usually find her reading things, making things, climbing on or jumping over things, or trying out another martial art.

Event Page: http://www.reddotrubyconf.com/

Produced by Engineers.SG

Help us caption & translate this video!

http://amara.org/v/8HYQ/
Captions: 
	00:00:04,940 --> 00:00:09,059
I'm actually going to try and stay put

00:00:07,500 --> 00:00:11,520
this time because the last time when I

00:00:09,059 --> 00:00:13,889
spoke at this conference they gave me a

00:00:11,520 --> 00:00:16,139
hand microphone and I kept walking over

00:00:13,889 --> 00:00:18,449
there but I had to adjust a spotlight

00:00:16,139 --> 00:00:20,520
and then I would walk back here and they

00:00:18,449 --> 00:00:22,500
had to adjust it again and I did that a

00:00:20,520 --> 00:00:23,760
couple of times and then in the middle

00:00:22,500 --> 00:00:25,620
of the time there were like in the

00:00:23,760 --> 00:00:26,820
middle of the talk they were like she's

00:00:25,620 --> 00:00:29,670
not gonna stop this she and then they

00:00:26,820 --> 00:00:31,230
just switched on the stage lights and no

00:00:29,670 --> 00:00:36,510
idea what was happening I was like so

00:00:31,230 --> 00:00:42,560
I'm just gonna try and stay here alright

00:00:36,510 --> 00:00:45,329
so as you might have guessed i'm laura i

00:00:42,560 --> 00:00:48,329
i'm software engineer I work for a

00:00:45,329 --> 00:00:50,130
company in Tokyo right now we mostly put

00:00:48,329 --> 00:00:52,370
ibeacons into vending machines and then

00:00:50,130 --> 00:00:54,510
do a lot of cool stuff with them and

00:00:52,370 --> 00:00:59,489
some more things but you can ask me

00:00:54,510 --> 00:01:01,440
about that later if you want to and I'm

00:00:59,489 --> 00:01:04,350
going to talk about writing better

00:01:01,440 --> 00:01:07,229
errors today what I'm not going to talk

00:01:04,350 --> 00:01:10,049
a bit about is how to craft the perfect

00:01:07,229 --> 00:01:12,030
error message because I feel like

00:01:10,049 --> 00:01:15,060
there's already a lot of literature and

00:01:12,030 --> 00:01:17,579
like talks and stuff about that out

00:01:15,060 --> 00:01:19,799
there but what I've always been missing

00:01:17,579 --> 00:01:21,600
is like kind of that step before like to

00:01:19,799 --> 00:01:25,590
figure out like what do you actually

00:01:21,600 --> 00:01:28,219
want to say and to whom so I want to

00:01:25,590 --> 00:01:30,899
take a step back and talk about the

00:01:28,219 --> 00:01:34,849
high-level perspective more about the

00:01:30,899 --> 00:01:34,849
approach how to become any tenure

00:01:36,189 --> 00:01:41,259
I recently got a Roomba

00:01:39,549 --> 00:01:46,119
from a friend who's moving away from

00:01:41,259 --> 00:01:48,250
Tokyo and and if you don't know what it

00:01:46,119 --> 00:01:50,890
is is kind of like a tiny little vacuum

00:01:48,250 --> 00:01:53,500
cleaning robot which goes around on your

00:01:50,890 --> 00:01:55,000
floors including some so I got it and I

00:01:53,500 --> 00:01:56,950
brought it home and then I wanted it to

00:01:55,000 --> 00:02:00,039
clean my floors so I put it on my floor

00:01:56,950 --> 00:02:02,939
and I pushed a big clean button and I

00:02:00,039 --> 00:02:06,849
expected it to clean but it refused

00:02:02,939 --> 00:02:08,799
instead it started blinking at me and I

00:02:06,849 --> 00:02:09,459
was like not quite sure what it's trying

00:02:08,799 --> 00:02:12,840
to tell me

00:02:09,459 --> 00:02:17,019
and because I'm a highly sophisticated

00:02:12,840 --> 00:02:21,099
engineer I decided to approach this

00:02:17,019 --> 00:02:23,799
issue with a time-tested and proven this

00:02:21,099 --> 00:02:30,629
practice method I push the random button

00:02:23,799 --> 00:02:34,720
to see what it does and it's all night

00:02:30,629 --> 00:02:37,599
it's until fall

00:02:34,720 --> 00:02:39,970
you put up a steadily to be closer to

00:02:37,599 --> 00:02:45,370
the microphone yeah okay I can do that

00:02:39,970 --> 00:02:49,540
right so I push this button and it

00:02:45,370 --> 00:02:51,220
started speaking to me in Japanese I was

00:02:49,540 --> 00:02:53,829
like I can like I can speak some

00:02:51,220 --> 00:02:58,720
Japanese it's not that great I was like

00:02:53,829 --> 00:03:02,139
mm and I push the button a couple more

00:02:58,720 --> 00:03:04,389
times and I finally figured out it was

00:03:02,139 --> 00:03:07,810
kind of trying to say something about

00:03:04,389 --> 00:03:10,690
era too so I deployed another time

00:03:07,810 --> 00:03:14,889
tested method which is googling the

00:03:10,690 --> 00:03:17,079
error message and this is what I got

00:03:14,889 --> 00:03:19,120
era to open Roombas extractor frame and

00:03:17,079 --> 00:03:20,530
clean extractors and eventually I

00:03:19,120 --> 00:03:25,030
figured out what actually wanted me to

00:03:20,530 --> 00:03:26,650
do is to clean the brushes and so this

00:03:25,030 --> 00:03:29,910
is like most people nowadays don't

00:03:26,650 --> 00:03:33,370
really interact with robots everyday yet

00:03:29,910 --> 00:03:37,440
but what a lot of people do interact

00:03:33,370 --> 00:03:40,870
with a lot is software on a daily basis

00:03:37,440 --> 00:03:42,730
and you kind of get the same stuff there

00:03:40,870 --> 00:03:51,770
right

00:03:42,730 --> 00:03:53,450
this legend see this are like okay and

00:03:51,770 --> 00:03:55,160
it's not really that helpful right never

00:03:53,450 --> 00:03:57,560
like oh that's all like desktop software

00:03:55,160 --> 00:03:59,240
like you know those Photoshop people are

00:03:57,560 --> 00:04:02,750
let's not even talk about Windows you

00:03:59,240 --> 00:04:05,540
know but we kind of do the same thing to

00:04:02,750 --> 00:04:11,960
two people I'd use our stuff it's like

00:04:05,540 --> 00:04:14,390
that's not helpful like given more rails

00:04:11,960 --> 00:04:15,770
II stuff you know this is not the

00:04:14,390 --> 00:04:17,150
research here looking for I didn't even

00:04:15,770 --> 00:04:25,150
know I was looking for a resource but

00:04:17,150 --> 00:04:27,740
thanks what do you do with this ring and

00:04:25,150 --> 00:04:29,540
so I was starting to think like what's

00:04:27,740 --> 00:04:31,160
the problem like aside from the fact

00:04:29,540 --> 00:04:34,270
that these error messages are clearly

00:04:31,160 --> 00:04:39,770
not helpful at all like why aren't they

00:04:34,270 --> 00:04:41,960
and I think the problem with these

00:04:39,770 --> 00:04:44,380
messages is that they tell you what's

00:04:41,960 --> 00:04:44,380
the problem

00:04:44,470 --> 00:04:47,600
and I was like isn't that what you want

00:04:46,340 --> 00:04:48,800
to know like there's there is an error

00:04:47,600 --> 00:04:51,830
and you kind of want to know what's the

00:04:48,800 --> 00:04:54,800
problem right I was like is that really

00:04:51,830 --> 00:04:56,090
what you want to know and I started

00:04:54,800 --> 00:04:58,640
thinking some more about this because I

00:04:56,090 --> 00:05:00,640
was like huh I am frequently on the

00:04:58,640 --> 00:05:03,590
receiving side of these error messages

00:05:00,640 --> 00:05:05,690
but since I'm a developer and probably

00:05:03,590 --> 00:05:07,820
also somebody who causes other people to

00:05:05,690 --> 00:05:08,930
face these error messages I was like

00:05:07,820 --> 00:05:11,270
maybe there should be something done

00:05:08,930 --> 00:05:13,790
about it so I was kind of trying to take

00:05:11,270 --> 00:05:16,280
a step back and with like if there's an

00:05:13,790 --> 00:05:18,410
error like what is this error and what

00:05:16,280 --> 00:05:20,810
am I trying what am I trying to say

00:05:18,410 --> 00:05:28,250
about this error and who the hell am I

00:05:20,810 --> 00:05:29,750
even talking to and so I figured and I

00:05:28,250 --> 00:05:31,490
was like okay Who am I talking to

00:05:29,750 --> 00:05:34,700
whenever I have an error there are

00:05:31,490 --> 00:05:36,560
probably some different audiences what

00:05:34,700 --> 00:05:38,330
could these audiences be that would be

00:05:36,560 --> 00:05:40,750
interested in this error that just

00:05:38,330 --> 00:05:40,750
happened

00:05:40,800 --> 00:05:45,990
so first of all we have the developer

00:05:44,069 --> 00:05:47,789
like we have a product we have an app or

00:05:45,990 --> 00:05:50,159
something there's a person on the back

00:05:47,789 --> 00:05:52,199
end assuming we have a server client

00:05:50,159 --> 00:05:55,379
architecture there's a persona back-end

00:05:52,199 --> 00:05:58,440
that writes this stuff and their job is

00:05:55,379 --> 00:06:04,949
to figure out how to fix errors that

00:05:58,440 --> 00:06:08,430
shouldn't happen who else do we have we

00:06:04,949 --> 00:06:10,949
have people that use our stuff if we

00:06:08,430 --> 00:06:14,400
have an API our product is an API or has

00:06:10,949 --> 00:06:16,349
an API we have an API user and what they

00:06:14,400 --> 00:06:18,270
need to do is to figure out how to

00:06:16,349 --> 00:06:20,250
correctly call the endpoints that we

00:06:18,270 --> 00:06:25,340
provide to them and get the response

00:06:20,250 --> 00:06:29,130
that they expect and last but not least

00:06:25,340 --> 00:06:31,680
we have this guy if our thing is our

00:06:29,130 --> 00:06:34,860
product is an app a web app or a mobile

00:06:31,680 --> 00:06:37,020
app or something we have the person that

00:06:34,860 --> 00:06:38,729
actually needs to figure out how to use

00:06:37,020 --> 00:06:41,699
this app and how to do the things that

00:06:38,729 --> 00:06:46,949
we promised them they can do with our

00:06:41,699 --> 00:06:48,330
product so now we have our audience we

00:06:46,949 --> 00:06:50,430
are the user than the developers

00:06:48,330 --> 00:06:53,520
different types of users the developer

00:06:50,430 --> 00:06:55,949
writes the thing now we have errors and

00:06:53,520 --> 00:06:59,190
for this one I'm going to really

00:06:55,949 --> 00:07:02,090
generalize a lot but I feel like it's

00:06:59,190 --> 00:07:02,090
helpful categories

00:07:03,889 --> 00:07:08,909
we have user errors I call them user

00:07:07,319 --> 00:07:12,169
errors these are areas that are actually

00:07:08,909 --> 00:07:15,360
caused by the user by inputting things

00:07:12,169 --> 00:07:19,349
that are incorrect and these areas are

00:07:15,360 --> 00:07:20,999
expected they have rules so we know like

00:07:19,349 --> 00:07:23,460
there's images and you should only

00:07:20,999 --> 00:07:25,409
upload images up to like up to this size

00:07:23,460 --> 00:07:27,089
or you have to input something can be

00:07:25,409 --> 00:07:28,529
longer than this stuff like that you're

00:07:27,089 --> 00:07:32,099
not supposed to use a credit card that's

00:07:28,529 --> 00:07:32,819
expired so it's not necessarily to use

00:07:32,099 --> 00:07:35,460
its fault

00:07:32,819 --> 00:07:38,129
but they caused it and if they know the

00:07:35,460 --> 00:07:39,509
rules and they follow the rules maybe

00:07:38,129 --> 00:07:40,620
that's a little German in me I'm like

00:07:39,509 --> 00:07:43,069
that's like I'll just follow the rules

00:07:40,620 --> 00:07:45,300
and everything is going to be okay but

00:07:43,069 --> 00:07:49,830
so if you follow the rules then the

00:07:45,300 --> 00:07:51,990
error goes away and then we have this

00:07:49,830 --> 00:07:53,969
other type of error which I'm going to

00:07:51,990 --> 00:07:55,680
call the server error for now it's stuff

00:07:53,969 --> 00:08:00,870
that tap that happens like in your code

00:07:55,680 --> 00:08:02,610
in the back end and it's unexpected it

00:08:00,870 --> 00:08:03,930
has no rules like there's nobody then

00:08:02,610 --> 00:08:05,849
like no error message that you can

00:08:03,930 --> 00:08:07,949
possibly write for a bug that tells you

00:08:05,849 --> 00:08:09,120
right away like oh here's what it is and

00:08:07,949 --> 00:08:11,960
this is how you fix it would be great

00:08:09,120 --> 00:08:14,129
but unfortunately doesn't usually happen

00:08:11,960 --> 00:08:16,889
so you actually need to go and

00:08:14,129 --> 00:08:20,810
investigate if something like this

00:08:16,889 --> 00:08:23,610
happens before you can fix it

00:08:20,810 --> 00:08:25,259
so our two types of errors are the user

00:08:23,610 --> 00:08:29,039
areas and server errors and now we can't

00:08:25,259 --> 00:08:31,709
write this up we have users we have

00:08:29,039 --> 00:08:33,719
developers we have user errors and

00:08:31,709 --> 00:08:36,149
server errors and now we can think like

00:08:33,719 --> 00:08:39,149
who actually cares about all of this

00:08:36,149 --> 00:08:41,039
stuff like who sees what and who's like

00:08:39,149 --> 00:08:43,159
oh this is my thing like I got deal with

00:08:41,039 --> 00:08:43,159
this

00:08:46,160 --> 00:08:50,459
if I have a user that faces a user error

00:08:49,079 --> 00:08:51,839
that's something they can't fix they

00:08:50,459 --> 00:08:54,139
just need to input the right thing they

00:08:51,839 --> 00:08:58,949
need to know what they should input and

00:08:54,139 --> 00:09:00,779
then do it a developer that writes this

00:08:58,949 --> 00:09:02,879
code like at the point when the user

00:09:00,779 --> 00:09:05,339
actually input something you can't

00:09:02,879 --> 00:09:06,749
really stop them like there's nothing

00:09:05,339 --> 00:09:08,009
you can do about it you can try to make

00:09:06,749 --> 00:09:10,589
it clear and everything but if they do

00:09:08,009 --> 00:09:15,420
something wrong you can't stop them so

00:09:10,589 --> 00:09:17,579
you kind of can't really fix this on the

00:09:15,420 --> 00:09:19,709
other hand if you have a server error a

00:09:17,579 --> 00:09:21,360
user can't really do anything about they

00:09:19,709 --> 00:09:23,309
can't go into your code and kind of try

00:09:21,360 --> 00:09:26,550
to fix the bug and you don't really want

00:09:23,309 --> 00:09:29,309
to anyways you can and you must however

00:09:26,550 --> 00:09:33,019
fix your server errors like if there's a

00:09:29,309 --> 00:09:33,019
bug you have to go and find it in fixes

00:09:34,579 --> 00:09:39,059
so what you really care about as a user

00:09:37,499 --> 00:09:40,829
is the user errors these are the ones

00:09:39,059 --> 00:09:43,499
that you have to handle or deal with and

00:09:40,829 --> 00:09:47,730
as a developer you milkweed want to know

00:09:43,499 --> 00:09:49,589
about the server errors and as we

00:09:47,730 --> 00:09:54,000
already figured out server errors have

00:09:49,589 --> 00:09:56,639
bugs mostly you have to know what's the

00:09:54,000 --> 00:09:58,949
problem because you have to figure out

00:09:56,639 --> 00:10:00,959
on your own like what's wrong you have

00:09:58,949 --> 00:10:06,839
to have all the information that you can

00:10:00,959 --> 00:10:10,319
get to debug however as a user of an app

00:10:06,839 --> 00:10:12,149
I have exactly zero interest in

00:10:10,319 --> 00:10:14,879
debugging this app that I'm using right

00:10:12,149 --> 00:10:17,959
now or this API that I'm using right now

00:10:14,879 --> 00:10:17,959
I just want to use it

00:10:21,120 --> 00:10:27,510
here we go so I don't really want to

00:10:24,900 --> 00:10:30,000
know what's the problem that's just a

00:10:27,510 --> 00:10:32,100
step on the way what I really want to

00:10:30,000 --> 00:10:38,910
know is how do I make this problem go

00:10:32,100 --> 00:10:44,130
away and now if we look at this kind of

00:10:38,910 --> 00:10:45,900
error message guess who wrote this the

00:10:44,130 --> 00:10:47,670
person who wrote this is a person that

00:10:45,900 --> 00:10:49,680
is used to dealing with errors on their

00:10:47,670 --> 00:10:51,540
side where they don't really have a

00:10:49,680 --> 00:10:54,230
solution of how to make it go away they

00:10:51,540 --> 00:10:56,279
just want to know what's the problem and

00:10:54,230 --> 00:11:00,510
that's what they tell the other person

00:10:56,279 --> 00:11:05,820
as well for them however it's not

00:11:00,510 --> 00:11:08,370
actually what they want to know so if we

00:11:05,820 --> 00:11:10,440
keep that in mind and look at it more on

00:11:08,370 --> 00:11:14,190
a I guess like a system level or a flow

00:11:10,440 --> 00:11:20,010
level this is my extremely creative flow

00:11:14,190 --> 00:11:21,660
diagram when you have a request coming

00:11:20,010 --> 00:11:24,300
in from some kind of interface like no

00:11:21,660 --> 00:11:30,690
matter is it like an API or like an app

00:11:24,300 --> 00:11:33,050
or whatever an error happens here what

00:11:30,690 --> 00:11:33,050
do we do

00:11:34,400 --> 00:11:39,950
if this is an error that is actually

00:11:37,070 --> 00:11:41,540
interesting for me the developer I got

00:11:39,950 --> 00:11:42,890
to log it like I got to be informed

00:11:41,540 --> 00:11:44,779
about this area I got to know what

00:11:42,890 --> 00:11:47,810
happened so this is basically logging

00:11:44,779 --> 00:11:49,490
and you want to put everything there

00:11:47,810 --> 00:11:53,420
that tells this person what is the

00:11:49,490 --> 00:11:56,770
problem on the other hand I also got to

00:11:53,420 --> 00:11:59,150
communicate it back to the interface and

00:11:56,770 --> 00:12:01,550
here really don't wanna know what's the

00:11:59,150 --> 00:12:06,860
problem on to know how do I make it go

00:12:01,550 --> 00:12:08,779
away can I make it go away so we're

00:12:06,860 --> 00:12:11,330
splitting this up we're defining what is

00:12:08,779 --> 00:12:15,190
this what kind of error is this and who

00:12:11,330 --> 00:12:15,190
am I talking to about designer

00:12:20,690 --> 00:12:28,399
and now that we know that we can kind of

00:12:25,100 --> 00:12:30,290
think about a bit more how do we

00:12:28,399 --> 00:12:38,300
communicate this because now we know

00:12:30,290 --> 00:12:41,839
what we want to say and to whom so what

00:12:38,300 --> 00:12:44,689
about users as a developer is that

00:12:41,839 --> 00:12:47,540
something that interests me at all most

00:12:44,689 --> 00:12:51,560
of the time I'm kind of like I don't

00:12:47,540 --> 00:12:55,209
really care however this is something

00:12:51,560 --> 00:12:57,860
where that I've actually experienced on

00:12:55,209 --> 00:13:01,220
products that I've worked on if they're

00:12:57,860 --> 00:13:03,439
if you constantly get input about users

00:13:01,220 --> 00:13:04,910
not being able to do a thing or they

00:13:03,439 --> 00:13:08,029
always make errors they do the wrong

00:13:04,910 --> 00:13:11,180
thing you can kind of turn on to

00:13:08,029 --> 00:13:13,430
selectively log input errors like this

00:13:11,180 --> 00:13:14,750
kind of errors on an info level to see

00:13:13,430 --> 00:13:17,300
how often they happen and at which point

00:13:14,750 --> 00:13:18,889
they happen and if you're like oh like

00:13:17,300 --> 00:13:21,339
every second person like trying to do

00:13:18,889 --> 00:13:24,139
this gets it wrong then I have to

00:13:21,339 --> 00:13:25,819
rethink my interface then you go and

00:13:24,139 --> 00:13:27,829
talk to the UX people or whoever made

00:13:25,819 --> 00:13:31,360
this thing to figure out how can we

00:13:27,829 --> 00:13:34,149
actually not make this happen so much

00:13:31,360 --> 00:13:38,000
because we have to communicate the rules

00:13:34,149 --> 00:13:39,410
to the user but in this case me as a

00:13:38,000 --> 00:13:42,889
developer I actually won't know how to

00:13:39,410 --> 00:13:45,980
not make it happen as the user on the

00:13:42,889 --> 00:13:49,519
other hand I'm concerned at this point

00:13:45,980 --> 00:13:53,449
like how do I make it work so what do I

00:13:49,519 --> 00:13:56,000
want as an app user first of all I want

00:13:53,449 --> 00:13:59,060
really clear and readable area layout I

00:13:56,000 --> 00:14:00,649
don't want to kind of try and have to

00:13:59,060 --> 00:14:02,300
kind of look around and see what it

00:14:00,649 --> 00:14:05,990
actually is I want to see it right away

00:14:02,300 --> 00:14:11,540
and when it's super clear I want to

00:14:05,990 --> 00:14:13,910
localize as possible if I have no way to

00:14:11,540 --> 00:14:17,779
tell what kind of language this user

00:14:13,910 --> 00:14:21,259
speaks I have to make a reasonable

00:14:17,779 --> 00:14:22,939
assumption about a default can be

00:14:21,259 --> 00:14:24,199
English depending on the country if

00:14:22,939 --> 00:14:26,720
you're in a country where you can't

00:14:24,199 --> 00:14:29,839
assume everybody speaks English really

00:14:26,720 --> 00:14:32,170
well you have to then do something else

00:14:29,839 --> 00:14:34,660
for example in Japan it's usually not a

00:14:32,170 --> 00:14:36,400
reasonable assumption to make English

00:14:34,660 --> 00:14:40,330
errormsgs you're probably one Japanese

00:14:36,400 --> 00:14:43,270
and you really want to provide a clear

00:14:40,330 --> 00:14:45,550
course of action to solve the problem no

00:14:43,270 --> 00:14:47,320
matter what it is you tell them like you

00:14:45,550 --> 00:14:49,750
uploaded something that is too big

00:14:47,320 --> 00:14:51,760
upload something that is maximum one

00:14:49,750 --> 00:14:53,380
megabyte or like your credit card is

00:14:51,760 --> 00:14:54,130
expired use a credit card that is not

00:14:53,380 --> 00:14:55,780
expired

00:14:54,130 --> 00:15:00,120
he's a coupon that hasn't been used yet

00:14:55,780 --> 00:15:00,120
whatever it is tell them what to do and

00:15:00,270 --> 00:15:05,920
that kind of ties in with the other one

00:15:02,620 --> 00:15:07,870
like if you want to minimize these

00:15:05,920 --> 00:15:09,940
errors from happening in the first place

00:15:07,870 --> 00:15:12,250
the best air is the area that never

00:15:09,940 --> 00:15:13,990
shows up that never happens so you want

00:15:12,250 --> 00:15:15,370
a lot of front-end validations for stuff

00:15:13,990 --> 00:15:16,990
that you can validate in the front end

00:15:15,370 --> 00:15:19,210
and you want good UX for people to

00:15:16,990 --> 00:15:25,720
understand what they actually are

00:15:19,210 --> 00:15:28,480
supposed to do if we have API users the

00:15:25,720 --> 00:15:32,140
thing about them is they usually are

00:15:28,480 --> 00:15:33,610
developers also they just kind of can't

00:15:32,140 --> 00:15:35,640
look into your source code they have to

00:15:33,610 --> 00:15:38,230
talk to you through this API interface

00:15:35,640 --> 00:15:40,260
so they kind of understand like you

00:15:38,230 --> 00:15:43,050
don't have to guide them along that much

00:15:40,260 --> 00:15:45,550
because they're used to debugging also

00:15:43,050 --> 00:15:46,870
but you want to make it super easy for

00:15:45,550 --> 00:15:50,800
them to know what went wrong and how

00:15:46,870 --> 00:15:54,330
they can make it right so use matching

00:15:50,800 --> 00:15:58,420
HTTP status code there's actually so

00:15:54,330 --> 00:16:03,880
there's a service that I have had to use

00:15:58,420 --> 00:16:08,040
at work and they have an API and this

00:16:03,880 --> 00:16:12,490
API has an endpoint like MN point one

00:16:08,040 --> 00:16:14,830
and to tell the endpoint what to do is

00:16:12,490 --> 00:16:18,730
you put into the body of your request an

00:16:14,830 --> 00:16:20,950
ID that says for example I want to do

00:16:18,730 --> 00:16:23,290
like register something you put ID zero

00:16:20,950 --> 00:16:25,990
to two and like all the other parameters

00:16:23,290 --> 00:16:30,280
and then you send it and this endpoint

00:16:25,990 --> 00:16:33,790
will always return 200 okay no matter

00:16:30,280 --> 00:16:36,610
what happens and then in the body of the

00:16:33,790 --> 00:16:38,080
response you will have an error code if

00:16:36,610 --> 00:16:40,270
there wasn't there was a there is a

00:16:38,080 --> 00:16:42,070
result which is zero if everything was

00:16:40,270 --> 00:16:44,050
alright one if there was an error then

00:16:42,070 --> 00:16:45,310
you have an error code which tells you

00:16:44,050 --> 00:16:45,700
what kind of area'd was and then you

00:16:45,310 --> 00:16:47,650
have

00:16:45,700 --> 00:16:49,240
detail error code which tells you what

00:16:47,650 --> 00:16:50,920
kind of detail arid wasn't then you have

00:16:49,240 --> 00:16:52,780
to go and look at a gigantic list of

00:16:50,920 --> 00:16:57,790
custom error codes to figure out what

00:16:52,780 --> 00:16:59,260
went wrong a person on Twitter it like I

00:16:57,790 --> 00:17:01,720
shared this on Twitter and the person

00:16:59,260 --> 00:17:10,210
came up with the app description of this

00:17:01,720 --> 00:17:13,150
as 200 okay but so you can in like I

00:17:10,210 --> 00:17:14,920
mean as if that's in the second point

00:17:13,150 --> 00:17:16,360
like put in specific error messages put

00:17:14,920 --> 00:17:18,550
all the custom codes you want but still

00:17:16,360 --> 00:17:20,050
like make like use reasonable HTTP

00:17:18,550 --> 00:17:23,530
status codes like there's a reason why

00:17:20,050 --> 00:17:27,160
there why there are standards for this

00:17:23,530 --> 00:17:28,630
right and include everything introduce

00:17:27,160 --> 00:17:30,700
your response that makes it clear what

00:17:28,630 --> 00:17:32,650
to do like you say like parameter

00:17:30,700 --> 00:17:33,670
something is if you just say parameter

00:17:32,650 --> 00:17:35,740
you're missing that's not helpful

00:17:33,670 --> 00:17:37,990
parameter blogs missing or validation

00:17:35,740 --> 00:17:41,170
fails because here is what like how to

00:17:37,990 --> 00:17:43,750
make a value of a valid request also

00:17:41,170 --> 00:17:45,880
kind of like the front end validations

00:17:43,750 --> 00:17:49,600
on the app user side indigo DX right

00:17:45,880 --> 00:17:52,810
really clear documentation because API

00:17:49,600 --> 00:17:55,330
users do occasionally read the manual so

00:17:52,810 --> 00:18:01,260
give them one it's going to be a lot

00:17:55,330 --> 00:18:01,260
less trouble for you afterwards and

00:18:02,010 --> 00:18:05,760
that's the API user

00:18:07,309 --> 00:18:16,739
what about server errors as a developer

00:18:13,679 --> 00:18:20,190
this is something I care about a lot

00:18:16,739 --> 00:18:22,710
because I need to fix them so you want

00:18:20,190 --> 00:18:25,679
to make sure that your code has robust

00:18:22,710 --> 00:18:27,749
error handling like if there is a bug or

00:18:25,679 --> 00:18:29,519
an unexpected error you want to kind of

00:18:27,749 --> 00:18:34,259
minimize the damage you don't want

00:18:29,519 --> 00:18:36,090
everything to crash and burn you want to

00:18:34,259 --> 00:18:38,749
log it and report it like you use an air

00:18:36,090 --> 00:18:41,129
break or roll bar or whatever and

00:18:38,749 --> 00:18:43,679
include as much information as possible

00:18:41,129 --> 00:18:45,359
like most of these services like they

00:18:43,679 --> 00:18:47,609
give you a gem or something that you can

00:18:45,359 --> 00:18:49,139
include and they already pull out a lot

00:18:47,609 --> 00:18:50,779
of info like they give you the back

00:18:49,139 --> 00:18:53,970
trace they give you the actual error

00:18:50,779 --> 00:18:55,739
they give you the parameters and

00:18:53,970 --> 00:18:58,190
everything but whatever else you have

00:18:55,739 --> 00:19:01,559
and you think might help you actually

00:18:58,190 --> 00:19:03,720
reconstruct this error and be able to

00:19:01,559 --> 00:19:08,309
redo it and find what is the actual

00:19:03,720 --> 00:19:13,259
issue put it all in like send it to your

00:19:08,309 --> 00:19:17,039
logging service to make sure that

00:19:13,259 --> 00:19:19,019
someone actually gets notified because

00:19:17,039 --> 00:19:20,669
you can have all the logging in the

00:19:19,019 --> 00:19:23,549
world and all the error reporting in the

00:19:20,669 --> 00:19:25,769
world if nobody ever looks at it it's

00:19:23,549 --> 00:19:28,019
kind of pointless so what we do for

00:19:25,769 --> 00:19:29,789
example we have our like we integrate

00:19:28,019 --> 00:19:31,859
our roll bar would wanna reflect

00:19:29,789 --> 00:19:33,629
channels so whenever there's an error

00:19:31,859 --> 00:19:36,359
that happens for the first time that

00:19:33,629 --> 00:19:39,450
happens repeatedly we get notifications

00:19:36,359 --> 00:19:40,950
on flag if it's a production system so

00:19:39,450 --> 00:19:43,230
all the developers are in that one and

00:19:40,950 --> 00:19:44,940
then you can actually go right away and

00:19:43,230 --> 00:19:46,529
look at it and evaluate is it something

00:19:44,940 --> 00:19:52,169
that you can have to fix right now

00:19:46,529 --> 00:19:54,659
something that you can fix later and if

00:19:52,169 --> 00:19:56,909
you want to if there was an actual bug

00:19:54,659 --> 00:19:59,759
that affected users you can then

00:19:56,909 --> 00:20:02,369
announce publicly on a change log for

00:19:59,759 --> 00:20:05,659
example that it was fixed so people know

00:20:02,369 --> 00:20:05,659
hey it's not going to happen again

00:20:08,380 --> 00:20:13,580
what about users and server errors it

00:20:12,200 --> 00:20:14,840
does impact them right I mean they

00:20:13,580 --> 00:20:17,420
really don't want to know what went

00:20:14,840 --> 00:20:20,990
wrong because they can do nothing about

00:20:17,420 --> 00:20:23,990
it they do want to know kind of what's

00:20:20,990 --> 00:20:27,320
going on especially tell them that it's

00:20:23,990 --> 00:20:28,910
not their fault because if something

00:20:27,320 --> 00:20:30,290
goes wrong and you don't know the system

00:20:28,910 --> 00:20:31,760
behind it and you're especially if

00:20:30,290 --> 00:20:34,190
you're not a developer and you can't

00:20:31,760 --> 00:20:36,530
guess and you're maybe not even very

00:20:34,190 --> 00:20:38,000
comfortable with software you're going

00:20:36,530 --> 00:20:39,080
to be really scheduling a lie Oh what

00:20:38,000 --> 00:20:40,460
happened like did I break it

00:20:39,080 --> 00:20:44,570
like did I break the Internet did I

00:20:40,460 --> 00:20:47,960
break something and so you had to tell

00:20:44,570 --> 00:20:50,780
them hey this is what happened it's our

00:20:47,960 --> 00:20:52,850
fault this is what to do next and it can

00:20:50,780 --> 00:20:56,300
be for example just try again later

00:20:52,850 --> 00:20:57,650
we're like over capacity we can't serve

00:20:56,300 --> 00:21:00,050
you right now like just try again later

00:20:57,650 --> 00:21:03,880
or hey this is an actual problem with

00:21:00,050 --> 00:21:03,880
your stuff please contact support I

00:21:05,650 --> 00:21:10,430
found this little cartoon and I thought

00:21:08,840 --> 00:21:13,520
that's quite descriptive because like

00:21:10,430 --> 00:21:16,040
this kind of stuff is scary to users so

00:21:13,520 --> 00:21:18,440
if you just say oh error BAM they're

00:21:16,040 --> 00:21:19,970
like what am I going to do now what I'm

00:21:18,440 --> 00:21:22,160
going to do now did delete my data did

00:21:19,970 --> 00:21:23,060
it charge my credit card the did charge

00:21:22,160 --> 00:21:26,930
it like five times

00:21:23,060 --> 00:21:29,510
can i order again like what do i do or

00:21:26,930 --> 00:21:31,910
you just tell them hey something went

00:21:29,510 --> 00:21:33,080
wrong on our side you're safe just try

00:21:31,910 --> 00:21:35,780
again later and they're going to be like

00:21:33,080 --> 00:21:37,960
show okay I'm good just go and try again

00:21:35,780 --> 00:21:37,960
later

00:21:40,740 --> 00:21:46,930
so instead for example off sending

00:21:44,290 --> 00:21:49,420
something like this which is still scary

00:21:46,930 --> 00:21:51,430
and I'm like to a developer it makes

00:21:49,420 --> 00:21:54,130
sense because yeah this is you know this

00:21:51,430 --> 00:21:55,600
is what happened to a person who doesn't

00:21:54,130 --> 00:21:57,940
know it doesn't make any sense at all

00:21:55,600 --> 00:22:03,670
it's just scary stuff you did something

00:21:57,940 --> 00:22:05,350
wrong it said you do something like that

00:22:03,670 --> 00:22:06,640
and you don't even have to go alright

00:22:05,350 --> 00:22:09,910
see like if you don't have somebody

00:22:06,640 --> 00:22:11,410
could draw you like flying whales you

00:22:09,910 --> 00:22:13,180
know it's okay like you can just write

00:22:11,410 --> 00:22:15,960
the message like even if it's not nicely

00:22:13,180 --> 00:22:18,550
styled just say it it's going to do like

00:22:15,960 --> 00:22:21,490
like I'm a firm believer in the 8020

00:22:18,550 --> 00:22:24,250
rule like you know 20% of effort brings

00:22:21,490 --> 00:22:27,070
you like 80% of the way so if you just

00:22:24,250 --> 00:22:30,180
say it no matter how it's already going

00:22:27,070 --> 00:22:30,180
to be much much better

00:22:34,470 --> 00:22:38,760
and this is pretty much where we're

00:22:36,480 --> 00:22:41,820
wondering for everybody who is

00:22:38,760 --> 00:22:44,220
interested everybody in our audience we

00:22:41,820 --> 00:22:46,470
want to achieve or we want to enable

00:22:44,220 --> 00:22:50,549
them to solve the problem that they're

00:22:46,470 --> 00:22:52,140
facing in the best way possible in the

00:22:50,549 --> 00:22:55,230
fastest way possible and with the

00:22:52,140 --> 00:22:58,159
minimum of frustration no matter if it's

00:22:55,230 --> 00:23:03,450
a developer if it's a user or anything

00:22:58,159 --> 00:23:07,320
and now that we know what we want to say

00:23:03,450 --> 00:23:09,090
about what kind of error to whom we can

00:23:07,320 --> 00:23:10,860
now go out and figure out how to write

00:23:09,090 --> 00:23:13,860
the perfect error message how to word

00:23:10,860 --> 00:23:17,490
things how to display things but this

00:23:13,860 --> 00:23:20,070
step about like what am I going to

00:23:17,490 --> 00:23:21,840
communicate to whom that's like that's

00:23:20,070 --> 00:23:23,760
been like the missing link for me of

00:23:21,840 --> 00:23:25,200
like going from an error happens to like

00:23:23,760 --> 00:23:28,169
what kind of thing do I put into my

00:23:25,200 --> 00:23:33,409
error message and this is pretty much

00:23:28,169 --> 00:23:33,409
what I wanted to share with you so I

00:23:33,590 --> 00:23:38,630
hope this is helpful to you when you

00:23:35,820 --> 00:23:40,409
handle your errors in the future and

00:23:38,630 --> 00:23:48,059
communicate them to whoever is

00:23:40,409 --> 00:23:48,390
interested in them thank you awesome

00:23:48,059 --> 00:23:50,580
stuff

00:23:48,390 --> 00:23:52,200
thanks for I think the great message you

00:23:50,580 --> 00:23:54,360
think about the people who know see you

00:23:52,200 --> 00:23:54,960
errors and give them some directional to

00:23:54,360 --> 00:23:58,440
do next

00:23:54,960 --> 00:24:03,590
can we get some questions please anyone

00:23:58,440 --> 00:24:06,390
hasn't yes ok hi thank you for the talk

00:24:03,590 --> 00:24:08,730
what do you think is the major problem

00:24:06,390 --> 00:24:11,549
with like because you showed the 500 in

00:24:08,730 --> 00:24:12,419
rails error message and I mean I've seen

00:24:11,549 --> 00:24:15,480
it a million times

00:24:12,419 --> 00:24:17,820
and I think Oh what do you think is the

00:24:15,480 --> 00:24:20,250
the reason for that because if I can

00:24:17,820 --> 00:24:22,590
make a comment I think most people don't

00:24:20,250 --> 00:24:26,760
know how to kind of I mean I wouldn't

00:24:22,590 --> 00:24:28,500
know how to keep like how to track what

00:24:26,760 --> 00:24:30,900
error happened because you know you have

00:24:28,500 --> 00:24:33,600
this 500 generic handler in rails and

00:24:30,900 --> 00:24:35,970
then once this exception is happening

00:24:33,600 --> 00:24:37,500
you basically lose information of ok was

00:24:35,970 --> 00:24:39,840
it I don't know the wrong credit number

00:24:37,500 --> 00:24:43,049
credit card number or was it I don't

00:24:39,840 --> 00:24:45,390
know a Redis connection broke or

00:24:43,049 --> 00:24:47,040
something like that so I think I'm

00:24:45,390 --> 00:24:49,350
asking how

00:24:47,040 --> 00:24:52,740
two people trek what actually happened

00:24:49,350 --> 00:24:54,660
especially in rails trek is for like the

00:24:52,740 --> 00:24:56,040
developer like whatever happen or a trek

00:24:54,660 --> 00:24:59,280
for the person who sees it on the front

00:24:56,040 --> 00:25:01,560
end so the developer has to basically

00:24:59,280 --> 00:25:04,170
track what happened so you can render a

00:25:01,560 --> 00:25:07,770
meaningful error message well I think

00:25:04,170 --> 00:25:09,570
for I guess what I was trying to make

00:25:07,770 --> 00:25:13,050
clear for 500 years I totally think we

00:25:09,570 --> 00:25:15,930
should talk German by the way like for

00:25:13,050 --> 00:25:18,060
server errors there is you don't really

00:25:15,930 --> 00:25:20,220
want to so if it's a 500 then it's most

00:25:18,060 --> 00:25:21,660
likely some kind of bug and you don't

00:25:20,220 --> 00:25:23,610
really have to communicate to the user

00:25:21,660 --> 00:25:25,020
hey this is exactly the bump that

00:25:23,610 --> 00:25:26,790
happened because they don't really care

00:25:25,020 --> 00:25:29,610
there so it's not going to work for them

00:25:26,790 --> 00:25:31,110
until until you fix the bug so for a 500

00:25:29,610 --> 00:25:34,620
error you just want to tell them hey

00:25:31,110 --> 00:25:36,000
something went wrong in our side so you

00:25:34,620 --> 00:25:37,830
don't really need to figure out at this

00:25:36,000 --> 00:25:39,570
point what went wrong and show it to the

00:25:37,830 --> 00:25:41,100
user but you and the developer you need

00:25:39,570 --> 00:25:43,800
to know so you want the error handling

00:25:41,100 --> 00:25:45,480
that actually like as the exception gets

00:25:43,800 --> 00:25:47,550
raised you catch it or you kind of

00:25:45,480 --> 00:25:49,830
handle it and log in to your logging

00:25:47,550 --> 00:25:51,570
system so you can then get notified

00:25:49,830 --> 00:25:52,920
until okay this is where it happened

00:25:51,570 --> 00:26:00,170
this was the area this is the backtrack

00:25:52,920 --> 00:26:02,610
okay okay okay I got it cool thanks yeah

00:26:00,170 --> 00:26:05,130
do you think actually it is a good idea

00:26:02,610 --> 00:26:08,160
to tell the reverse try contacting us or

00:26:05,130 --> 00:26:10,830
simply Lotus or to try again later these

00:26:08,160 --> 00:26:12,600
messages because I think that if you say

00:26:10,830 --> 00:26:14,160
try again later the users will just keep

00:26:12,600 --> 00:26:15,930
trying and these back is like you know

00:26:14,160 --> 00:26:17,970
over and over and they are just

00:26:15,930 --> 00:26:20,310
frustrated because what does in later

00:26:17,970 --> 00:26:22,680
doesn't in five minutes or as many five

00:26:20,310 --> 00:26:24,810
days and the other one is when we say

00:26:22,680 --> 00:26:27,600
contact us then suddenly we've got 50

00:26:24,810 --> 00:26:29,700
emails from users saying hey I saw this

00:26:27,600 --> 00:26:31,560
error but me as a developer I already

00:26:29,700 --> 00:26:33,270
saw it in my error tracker so the user

00:26:31,560 --> 00:26:34,860
actually doesn't have to contact me I

00:26:33,270 --> 00:26:36,900
don't need it so do you think that

00:26:34,860 --> 00:26:38,610
doesn't it make users only more

00:26:36,900 --> 00:26:40,140
frustrated because they expect the

00:26:38,610 --> 00:26:41,760
immediate response from you when they

00:26:40,140 --> 00:26:43,260
contact me yeah that's a good question

00:26:41,760 --> 00:26:44,790
and I think it really depends on the

00:26:43,260 --> 00:26:46,680
kind of area because I given on the

00:26:44,790 --> 00:26:48,810
server you get different types of errors

00:26:46,680 --> 00:26:51,690
if it's a bug like an unexpected error

00:26:48,810 --> 00:26:52,980
like completely unexpected you got to

00:26:51,690 --> 00:26:54,330
fix the bug like and they can't like

00:26:52,980 --> 00:26:55,320
they can retry all they want it's not

00:26:54,330 --> 00:26:57,600
going to make it go away

00:26:55,320 --> 00:26:59,130
however if it's for example because you

00:26:57,600 --> 00:27:01,770
can't temporarily could

00:26:59,130 --> 00:27:04,170
reach some micro-service and it or

00:27:01,770 --> 00:27:05,820
something timed out and then you like

00:27:04,170 --> 00:27:08,220
okay I know this is like a 504 you're

00:27:05,820 --> 00:27:09,630
like a 504 or something and then you

00:27:08,220 --> 00:27:12,840
know like okay if they try again is

00:27:09,630 --> 00:27:15,240
probably going to work then you can tell

00:27:12,840 --> 00:27:16,530
them like oh just retry if it's

00:27:15,240 --> 00:27:18,120
something where you really want to

00:27:16,530 --> 00:27:20,250
contact support that would probably be

00:27:18,120 --> 00:27:22,410
like if you can figure it out by the

00:27:20,250 --> 00:27:23,520
type of error being races for example if

00:27:22,410 --> 00:27:25,800
you actually have a problem with your

00:27:23,520 --> 00:27:27,840
data you know I give something but

00:27:25,800 --> 00:27:29,430
missing and they just trying to kind of

00:27:27,840 --> 00:27:30,810
actually get a research that's not there

00:27:29,430 --> 00:27:33,090
anymore but it should be there but they

00:27:30,810 --> 00:27:35,250
did one fix itself it's not an actual

00:27:33,090 --> 00:27:37,020
like code error but it's more like a

00:27:35,250 --> 00:27:38,940
data error and you probably have to have

00:27:37,020 --> 00:27:41,310
someone fix it for them like

00:27:38,940 --> 00:27:54,840
specifically for that person or for that

00:27:41,310 --> 00:27:56,850
user yes any other questions yeah the

00:27:54,840 --> 00:28:01,430
gentleman looms are hi thank you for

00:27:56,850 --> 00:28:01,430
your talk it was exceptional thank you

00:28:04,880 --> 00:28:09,780
all right I really enjoyed your

00:28:09,090 --> 00:28:13,050
presentation

00:28:09,780 --> 00:28:14,670
I was wondering for the category of

00:28:13,050 --> 00:28:17,940
errors when we were just showing 500

00:28:14,670 --> 00:28:19,530
pages where it's something that happened

00:28:17,940 --> 00:28:23,430
on the back end we don't we don't need

00:28:19,530 --> 00:28:25,830
to inform the end-user what happened do

00:28:23,430 --> 00:28:28,310
you think that that's the type of

00:28:25,830 --> 00:28:32,460
messaging that belongs on that page is

00:28:28,310 --> 00:28:35,010
generic enough that it could be similar

00:28:32,460 --> 00:28:36,860
thing for all website I mean I guess

00:28:35,010 --> 00:28:40,140
what I'm trying to get to is is there a

00:28:36,860 --> 00:28:42,600
could we possibly change the 500 page

00:28:40,140 --> 00:28:45,450
the default 500 page on Rails such that

00:28:42,600 --> 00:28:47,610
is there the production 500 page such

00:28:45,450 --> 00:28:48,930
that it's better for end users by

00:28:47,610 --> 00:28:51,600
default is that something you think

00:28:48,930 --> 00:28:54,000
would be possible or does it have to be

00:28:51,600 --> 00:28:55,740
customized per site I mean you can

00:28:54,000 --> 00:28:57,840
probably like if you want to do it like

00:28:55,740 --> 00:28:59,640
100 percent you can probably customize

00:28:57,840 --> 00:29:03,600
it precise but I think it could be a lot

00:28:59,640 --> 00:29:05,190
better as a default just because like if

00:29:03,600 --> 00:29:07,230
I'm developing like if I'm doing it on

00:29:05,190 --> 00:29:08,670
my local machine and stuff and sure like

00:29:07,230 --> 00:29:10,500
as developer I know like this like

00:29:08,670 --> 00:29:11,040
something like internal server error I

00:29:10,500 --> 00:29:14,800
know but

00:29:11,040 --> 00:29:18,400
like if it's displayed to a user in

00:29:14,800 --> 00:29:20,110
production I think that's actually a

00:29:18,400 --> 00:29:23,200
very good idea to say something that

00:29:20,110 --> 00:29:24,550
makes sense as like out of the box to a

00:29:23,200 --> 00:29:25,440
person who doesn't know what this is

00:29:24,550 --> 00:29:31,240
about

00:29:25,440 --> 00:29:34,120
thank you I have one recommend I think

00:29:31,240 --> 00:29:36,280
that if you have a website you have an

00:29:34,120 --> 00:29:38,980
application that processes users money

00:29:36,280 --> 00:29:41,020
if you use credit cards or something to

00:29:38,980 --> 00:29:41,740
pay you and there is an error on the

00:29:41,020 --> 00:29:43,720
payment step

00:29:41,740 --> 00:29:45,550
you shouldn't I'll contact us you should

00:29:43,720 --> 00:29:47,140
tell we will contact you like I think

00:29:45,550 --> 00:29:48,670
that it's just not developers that the

00:29:47,140 --> 00:29:52,060
company is good practice to be proactive

00:29:48,670 --> 00:29:54,040
because users will panic if they'd see

00:29:52,060 --> 00:29:56,320
an error when they provided you their

00:29:54,040 --> 00:29:57,790
credit card number just I think

00:29:56,320 --> 00:30:00,460
something special like if you actually

00:29:57,790 --> 00:30:02,050
managed to catch it some kind of error

00:30:00,460 --> 00:30:03,910
that's not like I kind of know method

00:30:02,050 --> 00:30:06,010
error or something and you know that

00:30:03,910 --> 00:30:07,630
their payment wasn't processed or it

00:30:06,010 --> 00:30:10,000
never even reached for example the

00:30:07,630 --> 00:30:11,590
payment at the credit card provider tell

00:30:10,000 --> 00:30:13,060
them especially about credit card

00:30:11,590 --> 00:30:14,740
payments because that's like something

00:30:13,060 --> 00:30:16,510
that people like don't think it's funny

00:30:14,740 --> 00:30:18,490
at all like you try to buy something and

00:30:16,510 --> 00:30:19,810
you're like oh did it process like if I

00:30:18,490 --> 00:30:21,940
order again like will they turn to me

00:30:19,810 --> 00:30:24,700
twice they're like what happened so and

00:30:21,940 --> 00:30:26,200
otherwise if you can't tell you got to

00:30:24,700 --> 00:30:28,000
make it so that on the back end you're

00:30:26,200 --> 00:30:30,670
actually informed out like this was a

00:30:28,000 --> 00:30:33,460
process that involved payment an error

00:30:30,670 --> 00:30:36,930
happened police check on this user was

00:30:33,460 --> 00:30:36,930
their payments did it go through or not

00:30:37,530 --> 00:30:46,000
uh how how useful do you think HTTP

00:30:41,470 --> 00:30:48,910
status codes are to users I guess which

00:30:46,000 --> 00:30:51,460
kind of losses so actual app users so I

00:30:48,910 --> 00:30:54,280
guess you still see quite a lot of 404

00:30:51,460 --> 00:30:56,740
pages with the numbers 404 in them I'm

00:30:54,280 --> 00:30:58,960
just wondering is it is it so common

00:30:56,740 --> 00:31:00,810
nowadays that people know the 404 means

00:30:58,960 --> 00:31:05,530
a page can't be found under is it still

00:31:00,810 --> 00:31:07,510
like our developer bias coming in so I

00:31:05,530 --> 00:31:10,000
guess the thing with the 404 is that's

00:31:07,510 --> 00:31:11,890
kind of the one status code that's kind

00:31:10,000 --> 00:31:13,930
of ambiguous because it could be like

00:31:11,890 --> 00:31:17,560
this page doesn't exist like this path

00:31:13,930 --> 00:31:19,960
per se or like this actual resource that

00:31:17,560 --> 00:31:21,340
I was trying to find doesn't exist so

00:31:19,960 --> 00:31:23,620
that's one of the bit more like

00:31:21,340 --> 00:31:24,200
difficult ones but basically it says

00:31:23,620 --> 00:31:25,909
like some

00:31:24,200 --> 00:31:29,299
wasn't found I don't think the number

00:31:25,909 --> 00:31:31,130
means anything to people it just kind of

00:31:29,299 --> 00:31:32,600
shows up and right a lot of websites to

00:31:31,130 --> 00:31:35,120
is like oops we couldn't find what you

00:31:32,600 --> 00:31:38,059
were looking for because of something

00:31:35,120 --> 00:31:39,529
and then you still kind of I think it's

00:31:38,059 --> 00:31:41,510
better to actually say like hey what

00:31:39,529 --> 00:31:43,940
should you do if you can do something

00:31:41,510 --> 00:31:46,039
but like the number per se I don't think

00:31:43,940 --> 00:31:47,179
it means anything unless you target like

00:31:46,039 --> 00:31:49,700
your target audience is actually

00:31:47,179 --> 00:31:50,990
developers like if your github like

00:31:49,700 --> 00:31:52,159
people who use your service are

00:31:50,990 --> 00:31:54,019
developers so they're going to know what

00:31:52,159 --> 00:31:56,149
is 404 but if it's something completely

00:31:54,019 --> 00:31:57,679
unrelated this I think the number it

00:31:56,149 --> 00:32:03,590
probably doesn't mean anything to

00:31:57,679 --> 00:32:05,149
actually end users cool

00:32:03,590 --> 00:32:09,169
I think there's time for one last

00:32:05,149 --> 00:32:15,919
question there is any do if anyone else

00:32:09,169 --> 00:32:17,200
with questions no okay thank you very

00:32:15,919 --> 00:32:21,849
much thank you

00:32:17,200 --> 00:32:21,849

YouTube URL: https://www.youtube.com/watch?v=9buxKRmaNbc


