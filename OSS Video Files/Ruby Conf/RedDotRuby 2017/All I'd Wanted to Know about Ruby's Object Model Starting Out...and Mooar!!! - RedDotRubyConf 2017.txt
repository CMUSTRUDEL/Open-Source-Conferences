Title: All I'd Wanted to Know about Ruby's Object Model Starting Out...and Mooar!!! - RedDotRubyConf 2017
Publication date: 2020-01-22
Playlist: RedDotRuby 2017
Description: 
	Speaker: Jun Qi Tan, Final-year Student, SUTD

One of the most fun yet confusing things about Ruby is its object model. It's something that can seem highly cryptic to beginners, and perhaps not even that well understood by experienced Rubyists. Not too far into my Ruby journey, I began to get a taste of metaprogramming, but even as I learnt and grew more familiar with common idioms, I always had a nagging feeling that my underlying mental model didn't quite cut it, so I decided to iron it out. The more I read, the more intrigued I became, until I ended up diving into the CRuby source itself! Here's the story of what I learnt about Ruby's object model, in a way that's both digestible for beginner/intermediates and also insightful for the more experienced. It will also be the story of my journey from feeling like a newbie lacking confidence in my ability to understand something as complex as CRuby, to taking the plunge and learning how to fearlessly read the source!

Speaker's Bio

Jun Qi is currently a final year student at the Singapore University of Technology and Design. She was introduced to the world of Ruby, Rails, and web development slightly more than a year ago, and has enjoyed digging deeper and playing around with various web technologies since.

Event Page: http://www.reddotrubyconf.com/

Produced by Engineers.SG

Help us caption & translate this video!

http://amara.org/v/8HYU/
Captions: 
	00:00:04,740 --> 00:00:09,790
okay hello everybody my name is Quincy

00:00:07,930 --> 00:00:11,170
I'm a final year student from the

00:00:09,790 --> 00:00:13,420
Singapore University of Technology and

00:00:11,170 --> 00:00:16,330
design and I was introduced to the world

00:00:13,420 --> 00:00:18,880
of Ruby and rails about slightly more

00:00:16,330 --> 00:00:21,550
than a year ago so by way of a very

00:00:18,880 --> 00:00:25,029
short self introduction this is my

00:00:21,550 --> 00:00:26,289
exceedingly silly get up handle and this

00:00:25,029 --> 00:00:27,689
may or may not be my typical facial

00:00:26,289 --> 00:00:31,449
expression IRL

00:00:27,689 --> 00:00:33,040
so my talk today is called all I wanted

00:00:31,449 --> 00:00:37,960
to know about Ruby's object model

00:00:33,040 --> 00:00:39,760
starting out and more but before I dive

00:00:37,960 --> 00:00:41,590
into the topic proper I want to talk a

00:00:39,760 --> 00:00:43,030
bit about the motivations behind it so

00:00:41,590 --> 00:00:46,300
now why does hoppy again

00:00:43,030 --> 00:00:47,739
why does talk well you asked me why this

00:00:46,300 --> 00:00:52,300
talk the first thing I'm going to say to

00:00:47,739 --> 00:00:54,010
you is free Rd are three tickets yay my

00:00:52,300 --> 00:00:55,960
boss I also want to approach this mode

00:00:54,010 --> 00:00:57,760
right now as a beginner who's got

00:00:55,960 --> 00:01:00,190
minimal programming and the language and

00:00:57,760 --> 00:01:02,800
software development in general so the

00:01:00,190 --> 00:01:07,660
questions I have is what does it like to

00:01:02,800 --> 00:01:09,520
be a beginner learning Ruby so in the

00:01:07,660 --> 00:01:11,560
beginning everything is lovely and

00:01:09,520 --> 00:01:13,720
beautiful right the language is clean

00:01:11,560 --> 00:01:16,810
clutter free expresses sometimes even

00:01:13,720 --> 00:01:19,090
reads just like English block talks

00:01:16,810 --> 00:01:20,380
enumerators and numbers slightly strange

00:01:19,090 --> 00:01:22,960
but you get the hang of it after a while

00:01:20,380 --> 00:01:25,030
and the basic object-oriented paradigm

00:01:22,960 --> 00:01:26,530
isn't too hard to pick up so pretty soon

00:01:25,030 --> 00:01:30,390
your writing classes are crossing down

00:01:26,530 --> 00:01:32,890
material modules and so you are in love

00:01:30,390 --> 00:01:36,549
but if you hang around with Ruby long

00:01:32,890 --> 00:01:39,729
enough you start to see some stuff like

00:01:36,549 --> 00:01:42,430
this and this and you hear people

00:01:39,729 --> 00:01:45,400
talking about singleton methods method

00:01:42,430 --> 00:01:46,930
classes mixing and extending modules and

00:01:45,400 --> 00:01:48,430
sales including them and so on and so

00:01:46,930 --> 00:01:50,950
forth and a lot of hit scratching and

00:01:48,430 --> 00:01:53,079
confusion ensues and maybe you keep

00:01:50,950 --> 00:01:55,149
reading and rereading boovie Docs and

00:01:53,079 --> 00:01:56,740
various blog posts but you still can't

00:01:55,149 --> 00:01:58,450
quite know remember the difference

00:01:56,740 --> 00:01:59,799
between start even instant evil or you

00:01:58,450 --> 00:02:01,329
still keep wondering what whether that

00:01:59,799 --> 00:02:04,240
self thought included hooks does thunder

00:02:01,329 --> 00:02:05,680
or why'd you go necessary right and so

00:02:04,240 --> 00:02:08,049
you begin to realize that you should be

00:02:05,680 --> 00:02:10,060
able to do better you should be able to

00:02:08,049 --> 00:02:12,550
build a mental model that has the power

00:02:10,060 --> 00:02:13,360
of unifying or the seemingly disparate

00:02:12,550 --> 00:02:16,090
bits of Ruby

00:02:13,360 --> 00:02:17,600
and so there's why self to do and that

00:02:16,090 --> 00:02:20,660
is basically all i want--is know about

00:02:17,600 --> 00:02:22,490
these object models study out but

00:02:20,660 --> 00:02:24,620
because I also have completionist

00:02:22,490 --> 00:02:26,750
tendencies I decided to poke around the

00:02:24,620 --> 00:02:30,080
see Ruby source code itself and that is

00:02:26,750 --> 00:02:32,750
where the moor comes in so without

00:02:30,080 --> 00:02:34,940
further ado here's all I wanted to know

00:02:32,750 --> 00:02:41,860
about Ruby's object model starting out

00:02:34,940 --> 00:02:46,250
as a story in the beginning there was

00:02:41,860 --> 00:02:48,290
chaos but soon from the primordial soup

00:02:46,250 --> 00:02:51,320
of proceeded Oracle the strong force

00:02:48,290 --> 00:02:53,480
type deaths and macro and these

00:02:51,320 --> 00:02:57,350
gradually coalesced into the finest of

00:02:53,480 --> 00:02:59,630
all Ruby's and Ruby said let us make

00:02:57,350 --> 00:03:01,460
objects but not in our image in our

00:02:59,630 --> 00:03:04,250
likeness I am a jealous Ruby and I want

00:03:01,460 --> 00:03:06,880
to be the shiniest Ruby there is and so

00:03:04,250 --> 00:03:11,060
was wrought the planers of all objects

00:03:06,880 --> 00:03:13,310
basic object a basic object new kernel

00:03:11,060 --> 00:03:16,850
and unto them was conceived and born

00:03:13,310 --> 00:03:21,290
object an object begotten module and

00:03:16,850 --> 00:03:23,480
module D got class now Ruby had given

00:03:21,290 --> 00:03:26,720
her creation dominant across the land

00:03:23,480 --> 00:03:28,880
and so object set forth and begot many

00:03:26,720 --> 00:03:31,730
other classes whose multitude of

00:03:28,880 --> 00:03:33,230
concrete instances soon spread across

00:03:31,730 --> 00:03:38,630
the code of the very many Ruby

00:03:33,230 --> 00:03:40,700
programmers of the world and so this was

00:03:38,630 --> 00:03:45,200
the world all the objects in you and it

00:03:40,700 --> 00:03:46,790
was great and happy but Ruby had also

00:03:45,200 --> 00:03:49,760
furnished her creations of a very

00:03:46,790 --> 00:03:51,560
special kind of power which was soon to

00:03:49,760 --> 00:03:55,330
precipitate a great and substantial

00:03:51,560 --> 00:03:59,240
crisis this was the power of

00:03:55,330 --> 00:04:03,670
introspection and so it was that one of

00:03:59,240 --> 00:04:07,340
the first objects don't begin to ask

00:04:03,670 --> 00:04:10,130
what am i and she discovered that he

00:04:07,340 --> 00:04:12,110
could call the method class and the

00:04:10,130 --> 00:04:15,250
answer was as plain as day he was a dog

00:04:12,110 --> 00:04:19,780
and slowly as a central crisis passed

00:04:15,250 --> 00:04:24,290
now the dog was happy but as what has it

00:04:19,780 --> 00:04:27,110
dog now had a problem he asked the same

00:04:24,290 --> 00:04:29,150
question what am i and so he called the

00:04:27,110 --> 00:04:30,930
method class and discovered that what he

00:04:29,150 --> 00:04:32,910
was was a class

00:04:30,930 --> 00:04:35,639
and he discovered you could also call

00:04:32,910 --> 00:04:38,000
the method superclass and remember that

00:04:35,639 --> 00:04:41,460
his parents was none other than object

00:04:38,000 --> 00:04:45,690
and so dog knew what he was and where he

00:04:41,460 --> 00:04:48,090
came from and so he was content yet this

00:04:45,690 --> 00:04:50,039
was not the end soon even the most

00:04:48,090 --> 00:04:53,910
ancient of objects began questioning

00:04:50,039 --> 00:04:58,680
their own existence basic object object

00:04:53,910 --> 00:05:02,370
module class all of them asked what mi

00:04:58,680 --> 00:05:05,280
and it turned out the awesome were

00:05:02,370 --> 00:05:08,190
classes and they remembered whom had we

00:05:05,280 --> 00:05:10,289
got who kernel asked herself the same

00:05:08,190 --> 00:05:11,880
question and discovered that she was a

00:05:10,289 --> 00:05:15,479
module and remembered that she had no

00:05:11,880 --> 00:05:17,550
parents to speak of and so this was the

00:05:15,479 --> 00:05:18,870
world that all the objects knew and some

00:05:17,550 --> 00:05:21,889
of them thought the arrows were getting

00:05:18,870 --> 00:05:25,229
a little bit messed up but Elizabeth

00:05:21,889 --> 00:05:29,070
Allah the first wave of the existential

00:05:25,229 --> 00:05:31,830
crisis was now over but soon enough dog

00:05:29,070 --> 00:05:34,949
began agonizing again he complained to

00:05:31,830 --> 00:05:37,139
dog you said it as a dog I should be

00:05:34,949 --> 00:05:39,690
able to bark and rag my tail and we

00:05:37,139 --> 00:05:41,310
stopped on my belly and so forth I know

00:05:39,690 --> 00:05:43,560
I'm different from the other dog

00:05:41,310 --> 00:05:46,110
instances I way different and so on but

00:05:43,560 --> 00:05:49,050
truly I want more individuality than

00:05:46,110 --> 00:05:52,310
that not just I want the means and the

00:05:49,050 --> 00:05:55,400
methods to manifest my singly dog nature

00:05:52,310 --> 00:05:57,680
not just bark but the goal so daughter

00:05:55,400 --> 00:06:01,710
such Wow

00:05:57,680 --> 00:06:05,130
and dog the persimmon shook his head

00:06:01,710 --> 00:06:07,800
forcing you not what he could do but in

00:06:05,130 --> 00:06:09,810
the night dog is visited by Ruby herself

00:06:07,800 --> 00:06:12,960
who was full of sympathy for the poor

00:06:09,810 --> 00:06:14,909
animal and so she spoke softly I do

00:06:12,960 --> 00:06:17,400
grant you the power to be the Doge that

00:06:14,909 --> 00:06:20,810
you want to be no longer shall you be a

00:06:17,400 --> 00:06:23,490
dog but you shall be a singleton Doge

00:06:20,810 --> 00:06:25,699
yet to keep the peace I cannot make this

00:06:23,490 --> 00:06:30,599
obvious for if I do dot will be jealous

00:06:25,699 --> 00:06:33,240
and so was created a new class the

00:06:30,599 --> 00:06:36,840
singleton class of Doge but it was such

00:06:33,240 --> 00:06:39,450
that if those caught the method class he

00:06:36,840 --> 00:06:41,070
knew himself still as a dog it was only

00:06:39,450 --> 00:06:42,900
if he called the method singleton class

00:06:41,070 --> 00:06:45,380
that he knew where as uniquely those

00:06:42,900 --> 00:06:47,699
abilities came from

00:06:45,380 --> 00:06:50,580
only Ruby knew that deep in the

00:06:47,699 --> 00:06:53,699
primordial chaos gorgeous true class was

00:06:50,580 --> 00:06:57,030
actually his singleton class now

00:06:53,699 --> 00:07:00,810
daughters happy but of course dogs now

00:06:57,030 --> 00:07:03,330
had a problem he complained to Ruby the

00:07:00,810 --> 00:07:05,130
programmers want me to keep track of all

00:07:03,330 --> 00:07:06,780
my dog instances and find them by their

00:07:05,130 --> 00:07:07,740
name I can't do that with normal

00:07:06,780 --> 00:07:10,560
instance methods

00:07:07,740 --> 00:07:13,050
I need class methods and Ruby

00:07:10,560 --> 00:07:15,120
remembering what she had granted dog so

00:07:13,050 --> 00:07:17,280
similar solution over here and so she

00:07:15,120 --> 00:07:19,380
spoke softly I do granted the power to

00:07:17,280 --> 00:07:24,509
his methods of your own and not methods

00:07:19,380 --> 00:07:27,470
that all class objects possess and so we

00:07:24,509 --> 00:07:30,570
created a singleton class of dog and

00:07:27,470 --> 00:07:32,610
because dog himself was a class this

00:07:30,570 --> 00:07:34,860
singleton class was like a class of a

00:07:32,610 --> 00:07:36,479
class and Ruby christened it a meta

00:07:34,860 --> 00:07:38,220
class to distinguish it from the normal

00:07:36,479 --> 00:07:41,340
singleton classes of ordinary instance

00:07:38,220 --> 00:07:43,349
objects like dodge but in creating the

00:07:41,340 --> 00:07:46,979
dog singleton class Ruby now had to

00:07:43,349 --> 00:07:49,229
create the class metal class and the

00:07:46,979 --> 00:07:51,270
volume ethics class in the object

00:07:49,229 --> 00:07:53,610
methods class and the basic object

00:07:51,270 --> 00:07:55,620
method class and he made it such that

00:07:53,610 --> 00:07:57,479
the original genealogy was mirrored so

00:07:55,620 --> 00:07:59,220
it was SS the basic object metal class

00:07:57,479 --> 00:08:01,020
that we got the object meta class and

00:07:59,220 --> 00:08:04,320
the object method class had we got the

00:08:01,020 --> 00:08:06,300
odd module metaclass and so on and

00:08:04,320 --> 00:08:08,460
because we like arrow so she made it as

00:08:06,300 --> 00:08:13,020
if class had be got the basic object

00:08:08,460 --> 00:08:15,330
method class so now the objects in the

00:08:13,020 --> 00:08:16,469
classes they were finally happy but now

00:08:15,330 --> 00:08:18,960
their world has been very much

00:08:16,469 --> 00:08:21,659
complicated and every so often one of

00:08:18,960 --> 00:08:22,259
these method classes was wanted to cause

00:08:21,659 --> 00:08:24,419
mischief

00:08:22,259 --> 00:08:26,969
demanding that they have their own meta

00:08:24,419 --> 00:08:29,280
class and these metal meta classes would

00:08:26,969 --> 00:08:31,860
be even more mysterious demanding that

00:08:29,280 --> 00:08:33,390
they have their own meta class and on

00:08:31,860 --> 00:08:35,579
and on with these metal metal metal

00:08:33,390 --> 00:08:37,770
metal classes go until no one could see

00:08:35,579 --> 00:08:39,930
the end of the whole damn thing and all

00:08:37,770 --> 00:08:41,820
the ordinary objects and classes just

00:08:39,930 --> 00:08:42,419
roll their eyes and went onto the car

00:08:41,820 --> 00:08:47,670
day to day

00:08:42,419 --> 00:08:49,440
oblivious to all this metal madness and

00:08:47,670 --> 00:08:53,400
so is that I have come to the end of my

00:08:49,440 --> 00:08:55,040
Ruby creation myth so hopefully that was

00:08:53,400 --> 00:08:58,079
able to give you a sort of dramatic

00:08:55,040 --> 00:08:58,880
overview of Ruby's object model in a fun

00:08:58,079 --> 00:09:03,890
way

00:08:58,880 --> 00:09:08,460
and with that then it is time for floor

00:09:03,890 --> 00:09:12,050
it is time to retell the Ruby creation

00:09:08,460 --> 00:09:15,840
myth through the lens of see Ruby force

00:09:12,050 --> 00:09:19,800
so as they say in Ruby all data is

00:09:15,840 --> 00:09:22,260
represented as an object so gold is an

00:09:19,800 --> 00:09:25,110
object and dog which is a class is also

00:09:22,260 --> 00:09:27,600
an object and what this translates to in

00:09:25,110 --> 00:09:29,370
the see ruby sauce is that all our

00:09:27,600 --> 00:09:31,890
objects are represented as pointers to

00:09:29,370 --> 00:09:36,120
struts so you have this point of this

00:09:31,890 --> 00:09:37,560
arrow over here pointing to a very value

00:09:36,120 --> 00:09:39,360
at a memory address in this case a value

00:09:37,560 --> 00:09:42,810
is a struct which is a bag of attributes

00:09:39,360 --> 00:09:44,490
also called them members now the

00:09:42,810 --> 00:09:47,160
question of course is what is actually

00:09:44,490 --> 00:09:48,270
in this struct and this is the point I'm

00:09:47,160 --> 00:09:49,830
going to show you some actual C Ruby

00:09:48,270 --> 00:09:52,470
code just to note this is from the 2.4

00:09:49,830 --> 00:09:54,750
branch so there will be 3 strokes who

00:09:52,470 --> 00:09:56,820
are primarily interested in the first is

00:09:54,750 --> 00:10:00,180
the struct used to represent ordinary

00:09:56,820 --> 00:10:01,770
instance objects our object second is

00:10:00,180 --> 00:10:04,200
the struts used to represent class

00:10:01,770 --> 00:10:05,310
objects our class and finally you'll

00:10:04,200 --> 00:10:09,540
realize that both of these trucks

00:10:05,310 --> 00:10:12,450
actually saw a third straw our basic so

00:10:09,540 --> 00:10:13,830
let's take a look at our basic this is

00:10:12,450 --> 00:10:16,020
the struct that sauce information that

00:10:13,830 --> 00:10:17,610
is basic to all objects right so first

00:10:16,020 --> 00:10:19,560
we have a Flags member which is

00:10:17,610 --> 00:10:21,630
basically false metadata of object so

00:10:19,560 --> 00:10:23,610
whether or not this is a instance object

00:10:21,630 --> 00:10:25,680
or class object or model object all this

00:10:23,610 --> 00:10:27,360
is stored in flags and also whether or

00:10:25,680 --> 00:10:30,630
not this is a singleton class that is

00:10:27,360 --> 00:10:32,280
also stored in flags secondly and very

00:10:30,630 --> 00:10:33,960
importantly we have this class is the

00:10:32,280 --> 00:10:36,510
k-member so this is actually a reference

00:10:33,960 --> 00:10:39,870
to the class of our objects right so it

00:10:36,510 --> 00:10:41,700
points to an our class struct and we

00:10:39,870 --> 00:10:44,220
look at our objects well it's just our

00:10:41,700 --> 00:10:45,900
basic class stuff plus our basic classes

00:10:44,220 --> 00:10:48,240
unions thing over here which suffice to

00:10:45,900 --> 00:10:54,810
say is for storing instance variables

00:10:48,240 --> 00:10:56,990
and finally our class again we have our

00:10:54,810 --> 00:10:59,370
basics so we also have slides on class

00:10:56,990 --> 00:11:01,440
but importantly we also have this super

00:10:59,370 --> 00:11:03,240
member which is a reference to the super

00:11:01,440 --> 00:11:06,210
class of this class so it also points to

00:11:03,240 --> 00:11:08,160
our class struct and then we have this

00:11:06,210 --> 00:11:09,570
pointer to this something called a Ruby

00:11:08,160 --> 00:11:11,430
class extension struct which we won't

00:11:09,570 --> 00:11:12,030
worry about but I should mention that

00:11:11,430 --> 00:11:13,830
since

00:11:12,030 --> 00:11:15,120
objects are also instant objects they

00:11:13,830 --> 00:11:16,950
also can have their instance variables

00:11:15,120 --> 00:11:18,360
and these class instant variables I

00:11:16,950 --> 00:11:21,690
actually sought in this class extension

00:11:18,360 --> 00:11:23,070
struct finally we have a pointer to the

00:11:21,690 --> 00:11:24,990
method table so this is where the

00:11:23,070 --> 00:11:26,730
instance methods are start and this is

00:11:24,990 --> 00:11:30,120
the table that's looked up during method

00:11:26,730 --> 00:11:32,580
dispatch so we talked about method

00:11:30,120 --> 00:11:33,960
dispatch this is the car you know logic

00:11:32,580 --> 00:11:36,660
right here right in this search method

00:11:33,960 --> 00:11:38,250
function basically lookup the method

00:11:36,660 --> 00:11:39,840
table of my class and if I kind of find

00:11:38,250 --> 00:11:41,280
anything just go out my inheritance

00:11:39,840 --> 00:11:43,200
chain go out my super chain and keep

00:11:41,280 --> 00:11:46,590
looking up the method tables until we

00:11:43,200 --> 00:11:50,610
find a method with a matching me so if I

00:11:46,590 --> 00:11:52,980
call the class method on Doge this will

00:11:50,610 --> 00:11:56,510
be the chain of our class trucks whose

00:11:52,980 --> 00:11:58,530
method tables will be looking up except

00:11:56,510 --> 00:12:01,350
not quite there's a slight complication

00:11:58,530 --> 00:12:03,030
here from Colonel which you realize it's

00:12:01,350 --> 00:12:06,030
not a superclass of object it's just a

00:12:03,030 --> 00:12:08,070
module that's mixed into object yet

00:12:06,030 --> 00:12:10,290
somehow it manages to find its way into

00:12:08,070 --> 00:12:12,060
this super chain over here and we'll see

00:12:10,290 --> 00:12:16,920
more clearly how that happens when we

00:12:12,060 --> 00:12:19,230
talk about modules later on so with that

00:12:16,920 --> 00:12:21,090
we have laid the basic round you've seen

00:12:19,230 --> 00:12:23,220
how ruby actually represents our data as

00:12:21,090 --> 00:12:25,590
pointers to strut now the question is

00:12:23,220 --> 00:12:28,130
where does it all begin where does our

00:12:25,590 --> 00:12:31,740
Ruby creation miss actually start and

00:12:28,130 --> 00:12:34,200
the answer is in this dryin function in

00:12:31,740 --> 00:12:35,670
objective-c called init VM object and at

00:12:34,200 --> 00:12:37,830
the very top you realize it's calling in

00:12:35,670 --> 00:12:39,150
its class hierarchy now this is a

00:12:37,830 --> 00:12:41,160
function where our class hierarchy

00:12:39,150 --> 00:12:42,480
actually gets a bootstrapped right so

00:12:41,160 --> 00:12:44,550
after all these Bhoots def class

00:12:42,480 --> 00:12:46,800
function calls our hierarchy goes like

00:12:44,550 --> 00:12:48,810
this and all these are basic set class

00:12:46,800 --> 00:12:51,630
macro calls are basically setting the

00:12:48,810 --> 00:12:55,760
class pointer of basic object object

00:12:51,630 --> 00:12:58,080
module and class to point to class and

00:12:55,760 --> 00:13:00,540
at this point may be like where is

00:12:58,080 --> 00:13:02,190
colonel well if you go back to init VM

00:13:00,540 --> 00:13:04,290
object which is a really gigantic

00:13:02,190 --> 00:13:06,210
function but somewhere in there we are

00:13:04,290 --> 00:13:10,260
initializing kernel and including it in

00:13:06,210 --> 00:13:11,910
object and so at the end of all this

00:13:10,260 --> 00:13:13,380
your diagram looks something like this

00:13:11,910 --> 00:13:15,810
pretty much what we saw from the

00:13:13,380 --> 00:13:18,480
creation mistress now in addition to

00:13:15,810 --> 00:13:20,550
basic object object module and class and

00:13:18,480 --> 00:13:23,070
kernel Ruby also initializes all the

00:13:20,550 --> 00:13:25,460
built-in classes such as neo string

00:13:23,070 --> 00:13:28,640
array true class and so forth

00:13:25,460 --> 00:13:31,000
in it VM object so you're happy of that

00:13:28,640 --> 00:13:33,649
but now the next interesting question is

00:13:31,000 --> 00:13:36,620
what happens when I actually define my

00:13:33,649 --> 00:13:40,010
own class so say I want to define a

00:13:36,620 --> 00:13:43,399
class dog a key function that gets

00:13:40,010 --> 00:13:46,670
called is RV define class ID and this

00:13:43,399 --> 00:13:48,890
basically does three things the first is

00:13:46,670 --> 00:13:51,680
if we don't specify our explicit super

00:13:48,890 --> 00:13:52,270
we set a default super to object tree on

00:13:51,680 --> 00:13:55,970
all right

00:13:52,270 --> 00:13:57,709
second we actually create the new class

00:13:55,970 --> 00:14:00,680
so we initialize a new art class struct

00:13:57,709 --> 00:14:01,970
with the given super and this also sets

00:14:00,680 --> 00:14:04,130
the class pointer of this our class

00:14:01,970 --> 00:14:08,300
dropped to point to class with the

00:14:04,130 --> 00:14:10,520
capital C and finally we actually make

00:14:08,300 --> 00:14:13,970
and set the method class of this class

00:14:10,520 --> 00:14:16,220
straight away so before we talk about

00:14:13,970 --> 00:14:18,560
meta classes and all diagram looks like

00:14:16,220 --> 00:14:20,779
this it's pretty simple we just created

00:14:18,560 --> 00:14:22,970
a new class dog we said it's super we

00:14:20,779 --> 00:14:25,640
set its class pointer okay by this is

00:14:22,970 --> 00:14:27,050
default meta classes and before I want

00:14:25,640 --> 00:14:28,730
to talk about meta class creation I

00:14:27,050 --> 00:14:30,020
guess I should clarify the terminology

00:14:28,730 --> 00:14:31,760
of it because I guess there's always a

00:14:30,020 --> 00:14:34,430
point of confusion for beginners and as

00:14:31,760 --> 00:14:36,080
it was for me basically a singleton

00:14:34,430 --> 00:14:38,120
class is synonymous if I go in class and

00:14:36,080 --> 00:14:39,980
a meta class is a kind of singleton

00:14:38,120 --> 00:14:42,860
class but specifically it is a singleton

00:14:39,980 --> 00:14:44,930
class of a class object so we speak of

00:14:42,860 --> 00:14:49,070
the method class of dog but the

00:14:44,930 --> 00:14:50,870
singleton class of Doge and since method

00:14:49,070 --> 00:14:52,520
classes are also classes you can as meta

00:14:50,870 --> 00:14:55,100
classes or method classes so methyl

00:14:52,520 --> 00:14:56,750
methacrylate or meta meta classes in

00:14:55,100 --> 00:14:59,270
general methods to the end classes

00:14:56,750 --> 00:15:00,830
although you'll be like well pretty much

00:14:59,270 --> 00:15:03,020
any N greater than one is practically

00:15:00,830 --> 00:15:04,550
useless right but it's pretty fun to

00:15:03,020 --> 00:15:07,520
know that ruby actually allows you to do

00:15:04,550 --> 00:15:09,250
this and so is that let us talk about

00:15:07,520 --> 00:15:11,540
method class creation

00:15:09,250 --> 00:15:14,959
Boromir knows well that one does not

00:15:11,540 --> 00:15:17,390
simply make a metal class and indeed if

00:15:14,959 --> 00:15:22,070
you look at the make method last

00:15:17,390 --> 00:15:24,200
function it is not easy to digest but

00:15:22,070 --> 00:15:26,839
again it does basically three things

00:15:24,200 --> 00:15:28,640
okay first we actually initialize our

00:15:26,839 --> 00:15:31,820
new method class so we initialize a new

00:15:28,640 --> 00:15:33,740
archive struct second we set the class

00:15:31,820 --> 00:15:35,390
pointer of our class for the class point

00:15:33,740 --> 00:15:37,940
off dog we set the class point of that

00:15:35,390 --> 00:15:39,110
to point to our new meta class but we

00:15:37,940 --> 00:15:42,010
also have to set the

00:15:39,110 --> 00:15:43,160
Poynter of our new metaclass 2.2

00:15:42,010 --> 00:15:46,910
something

00:15:43,160 --> 00:15:53,350
and finally we set the super pointer of

00:15:46,910 --> 00:15:55,700
our new metaclass 2.2 again something so

00:15:53,350 --> 00:15:57,440
before we actually start setting them

00:15:55,700 --> 00:16:00,440
class pointer of our new metal class

00:15:57,440 --> 00:16:02,240
right our diagram looks like this again

00:16:00,440 --> 00:16:04,730
it looks pretty simple we've just

00:16:02,240 --> 00:16:06,529
created a new meta class of dog but you

00:16:04,730 --> 00:16:10,190
notice that the class pointer it has to

00:16:06,529 --> 00:16:13,250
go somewhere right so how do we set the

00:16:10,190 --> 00:16:17,810
class pointer if you look at the logic

00:16:13,250 --> 00:16:19,730
of the function you notice that we end

00:16:17,810 --> 00:16:22,190
up calling this funny and true eigen

00:16:19,730 --> 00:16:24,470
class macro and at the end of the day

00:16:22,190 --> 00:16:25,040
what is Marko does is return the

00:16:24,470 --> 00:16:28,130
metaclass

00:16:25,040 --> 00:16:30,350
of class so in other words the

00:16:28,130 --> 00:16:32,329
superclass of docs metaclass is classes

00:16:30,350 --> 00:16:34,130
meta class and if transpose metaclass

00:16:32,329 --> 00:16:35,750
hasn't already been created we have to

00:16:34,130 --> 00:16:39,410
make it right so let's go and make the

00:16:35,750 --> 00:16:41,300
meta classes class then same thing we

00:16:39,410 --> 00:16:43,550
initialize our meta class of class and

00:16:41,300 --> 00:16:44,990
now we meet the same problem we have to

00:16:43,550 --> 00:16:47,000
set the class pointer of the metaclass

00:16:44,990 --> 00:16:48,890
of class but how do we resolve it in

00:16:47,000 --> 00:16:50,420
this case well it turns out that for the

00:16:48,890 --> 00:16:53,240
metaclass of class its class pointer

00:16:50,420 --> 00:16:55,940
just points back to itself and so our

00:16:53,240 --> 00:16:58,130
diagram looks something like this so

00:16:55,940 --> 00:16:59,420
we're happy of the class pointer but now

00:16:58,130 --> 00:17:04,610
you notice you have another problem what

00:16:59,420 --> 00:17:06,650
about the super well if you look at how

00:17:04,610 --> 00:17:08,209
the super is set you realize again we

00:17:06,650 --> 00:17:11,209
are calling this nth row eigen class

00:17:08,209 --> 00:17:13,760
macro and the logic of this line is that

00:17:11,209 --> 00:17:15,169
the superclass of dogs method class is

00:17:13,760 --> 00:17:19,069
the method class of dogs

00:17:15,169 --> 00:17:22,579
superclass or in other words the

00:17:19,069 --> 00:17:23,959
metaclass of module so you see they were

00:17:22,579 --> 00:17:25,750
setting off this whole chain reaction we

00:17:23,959 --> 00:17:27,799
have to make the metaclass of module and

00:17:25,750 --> 00:17:29,240
now we have to set the super off the

00:17:27,799 --> 00:17:30,500
middle console module so by the same

00:17:29,240 --> 00:17:31,880
logic the super of the metaclass of

00:17:30,500 --> 00:17:33,830
module should be the meta class or

00:17:31,880 --> 00:17:35,720
object and the super of the meta class

00:17:33,830 --> 00:17:38,210
of object should be the method class of

00:17:35,720 --> 00:17:39,890
basic object and now we have reached the

00:17:38,210 --> 00:17:41,510
end of the chain so what should the

00:17:39,890 --> 00:17:44,630
super off basically the method class of

00:17:41,510 --> 00:17:47,950
basic object be so it turns out that

00:17:44,630 --> 00:17:51,460
it's just class

00:17:47,950 --> 00:17:53,170
and you notice that we actually haven't

00:17:51,460 --> 00:17:55,540
finished creating our dot matter class

00:17:53,170 --> 00:17:57,280
we still have to set it super pointer so

00:17:55,540 --> 00:17:58,960
finally after creating all those meta

00:17:57,280 --> 00:18:00,430
classes we can come back and set the

00:17:58,960 --> 00:18:02,830
super pointer of our dot metaclass and

00:18:00,430 --> 00:18:04,480
logics are same right the superclass of

00:18:02,830 --> 00:18:08,020
dots meta class is a meta class of dog

00:18:04,480 --> 00:18:11,230
superclass and so it's the meta class of

00:18:08,020 --> 00:18:12,970
object so congratulations we are done

00:18:11,230 --> 00:18:14,740
right all you wanted to do is create a

00:18:12,970 --> 00:18:16,240
single dot class that we end up spawning

00:18:14,740 --> 00:18:18,850
like five different classes and a

00:18:16,240 --> 00:18:21,520
gazillion arrows along the way so indeed

00:18:18,850 --> 00:18:23,200
Boromir was right and maybe at this

00:18:21,520 --> 00:18:26,650
point all is my thought about stuff

00:18:23,200 --> 00:18:28,270
insane but fret not because compared to

00:18:26,650 --> 00:18:30,670
their making normal singleton classes is

00:18:28,270 --> 00:18:32,170
the proverbial walk in the park and it

00:18:30,670 --> 00:18:35,080
is evidenced by how short this function

00:18:32,170 --> 00:18:37,540
is so again it does basically three

00:18:35,080 --> 00:18:38,890
things but we actually initialize the

00:18:37,540 --> 00:18:41,170
our class structure the new singleton

00:18:38,890 --> 00:18:43,630
class and importantly we set the super

00:18:41,170 --> 00:18:45,340
of this new Simonton class to point to

00:18:43,630 --> 00:18:47,320
the original class of our instance

00:18:45,340 --> 00:18:50,020
object so the original class although it

00:18:47,320 --> 00:18:53,430
was dogs so we set the super of dojo

00:18:50,020 --> 00:18:55,960
singleton class to point to dull and

00:18:53,430 --> 00:18:58,120
then we actually set the class pointer

00:18:55,960 --> 00:19:00,910
of those to point to this new singleton

00:18:58,120 --> 00:19:03,490
class and finally we set the class

00:19:00,910 --> 00:19:08,110
pointer of our new singleton class to

00:19:03,490 --> 00:19:09,190
point to the metaclass of class and so

00:19:08,110 --> 00:19:10,780
at the end of all this you have

00:19:09,190 --> 00:19:15,670
something like that it's pretty much

00:19:10,780 --> 00:19:18,100
real creation is left ops so at this

00:19:15,670 --> 00:19:19,960
point you will realize that we are still

00:19:18,100 --> 00:19:23,980
missing a pretty big part of Ruby's

00:19:19,960 --> 00:19:25,720
object model which is modules so how

00:19:23,980 --> 00:19:28,090
does including modules actually work and

00:19:25,720 --> 00:19:30,220
the answer is that Ruby finds a pretty

00:19:28,090 --> 00:19:32,080
clever way of sneaking modules into an

00:19:30,220 --> 00:19:35,470
inheritance chain with something called

00:19:32,080 --> 00:19:37,840
include classes so let's take a look how

00:19:35,470 --> 00:19:40,420
that works I want to give I want to give

00:19:37,840 --> 00:19:43,230
God some saber keys okay so I include

00:19:40,420 --> 00:19:46,390
the saber teeth module in the doll class

00:19:43,230 --> 00:19:48,340
what happens when I do this is that Ruby

00:19:46,390 --> 00:19:50,620
creates a special kind of class for an

00:19:48,340 --> 00:19:53,230
include class and inserts it to

00:19:50,620 --> 00:19:55,030
inheritance chain just like so and a

00:19:53,230 --> 00:19:56,740
special thing about this includes us is

00:19:55,030 --> 00:19:59,350
that it actually shares the same method

00:19:56,740 --> 00:20:01,180
table as our module and in this way

00:19:59,350 --> 00:20:02,530
method dispatch just works like normal

00:20:01,180 --> 00:20:06,430
right we just go up the inheritance

00:20:02,530 --> 00:20:08,710
chain so this is where the bulk of the

00:20:06,430 --> 00:20:10,900
module inclusion logic can be found this

00:20:08,710 --> 00:20:13,360
include motivate function which honestly

00:20:10,900 --> 00:20:14,770
speaking is really happy function I'm

00:20:13,360 --> 00:20:16,690
not even sure if I compute understanding

00:20:14,770 --> 00:20:18,370
at this point yet but this is the pre

00:20:16,690 --> 00:20:21,280
part where we're actually creating our

00:20:18,370 --> 00:20:23,290
new some include class and inserting it

00:20:21,280 --> 00:20:27,370
into the inheritance chain with this our

00:20:23,290 --> 00:20:29,620
class set super macro and I should

00:20:27,370 --> 00:20:31,690
mention that since include classes and

00:20:29,620 --> 00:20:34,030
modules we adjust our class trucks right

00:20:31,690 --> 00:20:35,920
internally and Akash Choksi have a class

00:20:34,030 --> 00:20:38,260
pointer so what what should a class

00:20:35,920 --> 00:20:40,360
pointer be set to well for modules we

00:20:38,260 --> 00:20:42,370
know the class pointer is set to modules

00:20:40,360 --> 00:20:44,950
the capital M so the class of the

00:20:42,370 --> 00:20:46,120
sabre-tooth module is module well it

00:20:44,950 --> 00:20:47,860
turns out that the class of the

00:20:46,120 --> 00:20:50,050
sabre-tooth include class as you can see

00:20:47,860 --> 00:20:52,270
here is actually the module itself and

00:20:50,050 --> 00:20:54,190
so the class pointer is how our include

00:20:52,270 --> 00:20:58,840
class keeps track of the module was

00:20:54,190 --> 00:21:02,080
created from so if you include multiple

00:20:58,840 --> 00:21:03,730
modules in a class so instead of just

00:21:02,080 --> 00:21:05,650
you know saber teeth I want to give Doge

00:21:03,730 --> 00:21:08,830
some sunglasses cause it's cool right so

00:21:05,650 --> 00:21:11,500
if I do that because the include model

00:21:08,830 --> 00:21:13,390
set function is called everytime include

00:21:11,500 --> 00:21:15,160
Sigma's evaluated by the logic of how

00:21:13,390 --> 00:21:17,500
the include classes inserted into the

00:21:15,160 --> 00:21:18,910
inheritance chain the module that

00:21:17,500 --> 00:21:20,590
included later is basically has its

00:21:18,910 --> 00:21:22,180
include class inserted lower down the

00:21:20,590 --> 00:21:26,350
chain or in other words we look up its

00:21:22,180 --> 00:21:28,990
method table first so that has now

00:21:26,350 --> 00:21:35,110
complicate things a bit let us talk

00:21:28,990 --> 00:21:36,520
about including modules in modules now

00:21:35,110 --> 00:21:38,320
at this point I should emphasize again

00:21:36,520 --> 00:21:39,820
that modules include classes out just

00:21:38,320 --> 00:21:41,410
our class traps and other in the class

00:21:39,820 --> 00:21:44,290
pointer our class rocks will have a

00:21:41,410 --> 00:21:46,360
super pointer right and maybe at this

00:21:44,290 --> 00:21:50,890
point you're like but can modules have a

00:21:46,360 --> 00:21:51,400
super and the answer is yes but not by

00:21:50,890 --> 00:21:54,010
default

00:21:51,400 --> 00:21:55,480
by default the super is just now but the

00:21:54,010 --> 00:21:58,090
super comes in handy when we want to

00:21:55,480 --> 00:21:59,490
include modules in modules so let's take

00:21:58,090 --> 00:22:01,900
a look at how that works

00:21:59,490 --> 00:22:03,520
instead of giving Doge saber teeth and

00:22:01,900 --> 00:22:04,840
sunglasses I want to give him a pair of

00:22:03,520 --> 00:22:07,480
super cheap sunglasses

00:22:04,840 --> 00:22:09,250
how cool is that right so first I

00:22:07,480 --> 00:22:11,200
include the saber teeth module in the

00:22:09,250 --> 00:22:13,270
sunglasses module and then I finally

00:22:11,200 --> 00:22:14,580
include the sunglasses module in my dog

00:22:13,270 --> 00:22:16,780
class

00:22:14,580 --> 00:22:18,310
what happens when I include a module no

00:22:16,780 --> 00:22:20,020
module is really not too different from

00:22:18,310 --> 00:22:22,840
what happens when I include a module in

00:22:20,020 --> 00:22:25,390
a class basically I create an include

00:22:22,840 --> 00:22:27,400
class of the included module and I set

00:22:25,390 --> 00:22:29,890
the super pointer of the module I'm

00:22:27,400 --> 00:22:31,960
including that module in to point to the

00:22:29,890 --> 00:22:33,700
include class right so now the super

00:22:31,960 --> 00:22:35,670
pointer of the sunglasses module points

00:22:33,700 --> 00:22:37,840
to the saber teeth include class and

00:22:35,670 --> 00:22:40,090
finally when I actually include the

00:22:37,840 --> 00:22:41,710
sunglasses module in dog I just get to

00:22:40,090 --> 00:22:46,810
include classes inserted into the

00:22:41,710 --> 00:22:48,730
inheritance chain just like this all

00:22:46,810 --> 00:22:50,890
right so awesome ice cover love drown

00:22:48,730 --> 00:22:53,380
I've talked about how classes and

00:22:50,890 --> 00:22:54,700
objects actually represented in Ruby how

00:22:53,380 --> 00:22:57,430
singleton classes and meta classes

00:22:54,700 --> 00:22:59,140
actually created and how mod is actually

00:22:57,430 --> 00:23:00,520
work like how including what is actually

00:22:59,140 --> 00:23:03,670
working and extending modules isn't much

00:23:00,520 --> 00:23:06,040
fun in either so before I wrap up I

00:23:03,670 --> 00:23:07,990
would be remiss not to mention just to

00:23:06,040 --> 00:23:09,760
clarify the distinction between the C

00:23:07,990 --> 00:23:11,260
class and super pointers and the Ruby

00:23:09,760 --> 00:23:13,900
class and super class methods so why do

00:23:11,260 --> 00:23:15,550
they seem to give different results when

00:23:13,900 --> 00:23:19,090
the answer is all pretty simply that

00:23:15,550 --> 00:23:20,740
Ruby's class method it does follow the

00:23:19,090 --> 00:23:22,360
class pointer in the C struct but it

00:23:20,740 --> 00:23:25,540
just ignores singleton classes and

00:23:22,360 --> 00:23:28,150
include classes along the way and so the

00:23:25,540 --> 00:23:32,710
class of the docs and the dot singleton

00:23:28,150 --> 00:23:34,960
class is still class right and Ruby's

00:23:32,710 --> 00:23:37,060
superclass method it also follows the

00:23:34,960 --> 00:23:37,690
super pointer of the C struct but it

00:23:37,060 --> 00:23:40,210
just ignores

00:23:37,690 --> 00:23:41,680
insuit classes along the way and so even

00:23:40,210 --> 00:23:43,720
though the super of our dog class here

00:23:41,680 --> 00:23:50,080
is actually the Sabre T's include class

00:23:43,720 --> 00:23:52,060
its superclass is still object so maybe

00:23:50,080 --> 00:23:54,490
at this point you're like yeah this

00:23:52,060 --> 00:23:58,150
another hood internal stuff it is fun to

00:23:54,490 --> 00:23:59,770
know about why I mean it's not going to

00:23:58,150 --> 00:24:02,560
make me a better Ruby programmer in my

00:23:59,770 --> 00:24:04,300
day to day or anything right and yeah I

00:24:02,560 --> 00:24:06,220
guess you know to a certain extent I

00:24:04,300 --> 00:24:08,020
agree I know it's not practically

00:24:06,220 --> 00:24:10,450
helpful to know that I can create metal

00:24:08,020 --> 00:24:13,890
metal metal metal metal metal metal

00:24:10,450 --> 00:24:16,600
metal classes but I like to think that

00:24:13,890 --> 00:24:18,010
I'm just having a solid understanding of

00:24:16,600 --> 00:24:20,290
Ruby's object model does help you reason

00:24:18,010 --> 00:24:22,690
about your code better more clearly and

00:24:20,290 --> 00:24:24,640
if in the future you ever meet you know

00:24:22,690 --> 00:24:27,100
potentially confusing situations such as

00:24:24,640 --> 00:24:28,040
all of this I mean there's no need for

00:24:27,100 --> 00:24:30,860
me to even talk about

00:24:28,040 --> 00:24:35,000
the not just because I'm running out of

00:24:30,860 --> 00:24:36,950
time but me mostly because you now have

00:24:35,000 --> 00:24:39,560
the mental model to figure out all by

00:24:36,950 --> 00:24:47,350
yourself the mental model that I wish I

00:24:39,560 --> 00:24:47,350
had starting out and more so thank you

00:24:51,170 --> 00:24:54,499
[Music]

00:24:54,559 --> 00:25:17,100
okay any questions one life no one has

00:25:06,899 --> 00:25:19,139
questions oh okay yeah oh oh hi first

00:25:17,100 --> 00:25:21,869
off that was amazing that was an amazing

00:25:19,139 --> 00:25:24,299
presentation thank you my question is

00:25:21,869 --> 00:25:26,730
how did you learn all this stuff or did

00:25:24,299 --> 00:25:29,730
you just read through the C file or oh

00:25:26,730 --> 00:25:31,409
yeah so I think my own last year I've I

00:25:29,730 --> 00:25:34,769
saw this book movie under the microscope

00:25:31,409 --> 00:25:36,809
and actually I I kind of looked through

00:25:34,769 --> 00:25:39,330
the saucy failures as I was running why

00:25:36,809 --> 00:25:41,730
am i reading this and put aside and

00:25:39,330 --> 00:25:43,409
after a while I decided to hey maybe I

00:25:41,730 --> 00:25:44,850
should you know it's fun to know this

00:25:43,409 --> 00:25:46,559
internal stuff so I decided to poke

00:25:44,850 --> 00:25:47,879
around the few resource but of course as

00:25:46,559 --> 00:25:49,409
a beginner I was like how do I

00:25:47,879 --> 00:25:50,730
understand all of this and then I found

00:25:49,409 --> 00:25:54,720
this really good resource called the

00:25:50,730 --> 00:25:57,450
Ruby hacking guide by I think by written

00:25:54,720 --> 00:26:00,419
by algy Minoru it is actually for ruby

00:25:57,450 --> 00:26:01,379
1.8 but I mean the internals the base of

00:26:00,419 --> 00:26:03,419
the call for me hasn't really changed

00:26:01,379 --> 00:26:05,369
all that much means that the VM they've

00:26:03,419 --> 00:26:07,470
written a new VM right and all that so

00:26:05,369 --> 00:26:09,359
it was still really helpful for me and

00:26:07,470 --> 00:26:10,710
understanding how you know the C Ruby

00:26:09,359 --> 00:26:12,119
code is laid out so if you're interested

00:26:10,710 --> 00:26:14,489
in checking it out definitely look at

00:26:12,119 --> 00:26:16,759
look of the Ruby hacking guide yeah

00:26:14,489 --> 00:26:16,759
thank you

00:26:21,380 --> 00:26:26,850
so Aaron kind of still half of my

00:26:23,789 --> 00:26:29,159
question but so when you started out

00:26:26,850 --> 00:26:31,139
researching this did you expect to get

00:26:29,159 --> 00:26:33,059
that far down the rabbit hole or like

00:26:31,139 --> 00:26:36,360
that you actually sit out to find out

00:26:33,059 --> 00:26:38,130
all of that all the way or did it just

00:26:36,360 --> 00:26:39,990
happen and you started opinion is like

00:26:38,130 --> 00:26:43,260
damn like where does that leave Inslee

00:26:39,990 --> 00:26:45,389
well and I always so the initial

00:26:43,260 --> 00:26:47,850
ambition was let me just try to give a

00:26:45,389 --> 00:26:50,159
talk rtrc hmm what topic can I talk

00:26:47,850 --> 00:26:51,539
about and as a beginner I'm not a

00:26:50,159 --> 00:26:52,950
professional so I don't I can't on my

00:26:51,539 --> 00:26:54,990
project I don't really have project to

00:26:52,950 --> 00:26:57,659
talk about everything so okay I mean let

00:26:54,990 --> 00:26:59,700
me dig into some goofy stuff and so yeah

00:26:57,659 --> 00:27:01,380
it kind of just like yeah let me try

00:26:59,700 --> 00:27:04,049
that because the object Ruby's object

00:27:01,380 --> 00:27:06,299
model is pretty fun right when I realize

00:27:04,049 --> 00:27:08,340
that does this whole infinite you know

00:27:06,299 --> 00:27:11,610
infinite metaclass thing going on as I

00:27:08,340 --> 00:27:13,980
yeah let me poke wanted it and then yeah

00:27:11,610 --> 00:27:16,289
like that you say I just poked into it

00:27:13,980 --> 00:27:17,970
poked around and just end up well like

00:27:16,289 --> 00:27:19,559
this is all the stuff that goes on and

00:27:17,970 --> 00:27:25,250
just like that escalated quickly

00:27:19,559 --> 00:27:25,250
yeah cool thank you thank you

00:27:26,680 --> 00:27:31,370
hey once you learned all this stuff

00:27:29,150 --> 00:27:34,040
did it change the way that you now write

00:27:31,370 --> 00:27:36,080
Ruby code like understanding it does it

00:27:34,040 --> 00:27:38,720
di Denton starts using modules more

00:27:36,080 --> 00:27:41,240
often did you start extending included

00:27:38,720 --> 00:27:42,560
modules etc I mean definitely I guess I

00:27:41,240 --> 00:27:44,270
will understand a lot of metal

00:27:42,560 --> 00:27:46,520
programming stuff better now because I

00:27:44,270 --> 00:27:49,790
mean all this life a lot of people use

00:27:46,520 --> 00:27:51,320
like I don't know like class class

00:27:49,790 --> 00:27:53,030
method or class method module and indeed

00:27:51,320 --> 00:27:55,400
have a self going to the hook and I what

00:27:53,030 --> 00:27:57,140
all this do so definitely that helps me

00:27:55,400 --> 00:27:57,950
understand this more confusing metal

00:27:57,140 --> 00:28:00,950
programming stuff

00:27:57,950 --> 00:28:02,000
no but you mean confession is that I

00:28:00,950 --> 00:28:04,220
haven't actually done Ruby for quite a

00:28:02,000 --> 00:28:12,500
bit because I don't actually use it for

00:28:04,220 --> 00:28:15,500
what school yeah so how did you find out

00:28:12,500 --> 00:28:18,410
about the meta meta meta stuff did you

00:28:15,500 --> 00:28:21,410
read that in some book or in the C code

00:28:18,410 --> 00:28:23,270
or did you use like clips and overrode

00:28:21,410 --> 00:28:25,310
like inherited or something about what

00:28:23,270 --> 00:28:26,960
actually is in Ruby Docs itself so if

00:28:25,310 --> 00:28:29,300
you look at the class documentation

00:28:26,960 --> 00:28:31,490
there's a you know a memorization the

00:28:29,300 --> 00:28:33,470
class the class hierarchy and then

00:28:31,490 --> 00:28:35,750
there's a chain of dashes off into

00:28:33,470 --> 00:28:37,670
infinity so that when I knew something

00:28:35,750 --> 00:28:39,740
sneaky ago I saw that so like years ago

00:28:37,670 --> 00:28:41,480
I never understood why they're like what

00:28:39,740 --> 00:28:45,880
what does it mean like just dot dot dot

00:28:41,480 --> 00:28:45,880
no no you know okay thank you

00:28:47,290 --> 00:28:50,740
any other questions

00:28:56,919 --> 00:29:01,000
no okay thank you very much in tiegler's

00:28:59,599 --> 00:29:01,670
having our own love

00:29:01,000 --> 00:29:04,849
[Applause]

00:29:01,670 --> 00:29:04,849

YouTube URL: https://www.youtube.com/watch?v=268UU4EpTew


