Title: Madison Ruby 2013 - Yak shaving is best shaving by Aaron Patterson
Publication date: 2020-01-28
Playlist: Madison Ruby 2013
Description: 
	Many developers try to avoid yak shaving. In this talk we will attempt to explore the joys of shaving a yak. We'll explore new features of Active Record, along with techniques for performance improvements. All which were realized through the journey of software development, rather than the goal. Yak shaving can get hairy, but with enough mousse, we can tame any mane.

Help us caption & translate this video!

http://amara.org/v/FG73/
Captions: 
	00:00:11,840 --> 00:00:21,080
thank you I am uber caffeinated its

00:00:17,840 --> 00:00:23,890
possession yeah I suppose I should play

00:00:21,080 --> 00:00:28,850
this okay so I'm giving a talk is called

00:00:23,890 --> 00:00:34,850
yak shaving is best shaving and this is

00:00:28,850 --> 00:00:38,930
this is my talk um hello world I am very

00:00:34,850 --> 00:00:41,360
very nervous on stage but at least here

00:00:38,930 --> 00:00:44,930
at Madison Ruby there is a gnome in the

00:00:41,360 --> 00:00:50,210
front row that I can look at and feel

00:00:44,930 --> 00:00:52,370
comfortable hopefully um typically

00:00:50,210 --> 00:00:55,579
typically I wear a suit while I'm on

00:00:52,370 --> 00:00:58,989
stage but um I've gained a little weight

00:00:55,579 --> 00:01:04,580
so today i'm wearing a stretchable

00:00:58,989 --> 00:01:07,820
started yes so my name is Aaron

00:01:04,580 --> 00:01:10,850
Patterson I am on the Internet is tender

00:01:07,820 --> 00:01:16,069
love and you might recognize me more for

00:01:10,850 --> 00:01:20,750
this photo I have I have a couple cats

00:01:16,069 --> 00:01:25,130
this is one of them yeah this is her

00:01:20,750 --> 00:01:29,479
name is a sea tac airport SeaTac Airport

00:01:25,130 --> 00:01:31,550
YouTube choo-choo and this one this one

00:01:29,479 --> 00:01:33,860
is my other one he's he's a bit more

00:01:31,550 --> 00:01:38,000
famous this is Gorbachev puff puff

00:01:33,860 --> 00:01:44,119
thunderhorse the third both of them are

00:01:38,000 --> 00:01:46,670
my pear pear programmers so I'm on the

00:01:44,119 --> 00:01:48,979
rails core team and I'm also on the Ruby

00:01:46,670 --> 00:01:52,490
core team I work at a company called

00:01:48,979 --> 00:01:54,500
AT&T and they employ me to do open

00:01:52,490 --> 00:01:57,470
source open source programming all day

00:01:54,500 --> 00:01:58,910
and so what I do is I just program open

00:01:57,470 --> 00:02:03,200
source all day which is a pretty cool

00:01:58,910 --> 00:02:06,080
job so you think like wow ATT is a big

00:02:03,200 --> 00:02:08,450
corporation they must be like super you

00:02:06,080 --> 00:02:10,429
know super bureaucratic and stuff how

00:02:08,450 --> 00:02:11,450
can you have a job doing open source and

00:02:10,429 --> 00:02:14,630
I'm here to tell you it is not

00:02:11,450 --> 00:02:16,250
bureaucratic at all not whatsoever and

00:02:14,630 --> 00:02:18,110
if you don't believe me you can send me

00:02:16,250 --> 00:02:20,410
an email at work this is my work email

00:02:18,110 --> 00:02:20,410
address

00:02:23,340 --> 00:02:33,190
I'm not joking this is actually my

00:02:25,900 --> 00:02:34,870
working on actually get working at a

00:02:33,190 --> 00:02:37,150
giant company is kind of interesting

00:02:34,870 --> 00:02:39,010
because there are other many other

00:02:37,150 --> 00:02:41,410
people named Aaron Patterson who work

00:02:39,010 --> 00:02:43,620
there as well and so I get a lot of

00:02:41,410 --> 00:02:46,780
wrong email which is kind of weird

00:02:43,620 --> 00:02:49,300
anyway so I'm really excited to be here

00:02:46,780 --> 00:02:51,850
for me Madison is a whole bunch of

00:02:49,300 --> 00:02:54,489
firsts first time experiencing things

00:02:51,850 --> 00:02:58,870
like today this morning I saw Brian

00:02:54,489 --> 00:03:08,100
Lyles drink dog hair that was the first

00:02:58,870 --> 00:03:10,420
time I've seen anyone do that um sorry

00:03:08,100 --> 00:03:14,940
I'm really excited to be here if you are

00:03:10,420 --> 00:03:17,440
too you should tweet with mad Ruby 13

00:03:14,940 --> 00:03:21,160
all I could think was this anyway so I'm

00:03:17,440 --> 00:03:23,769
staying I'm staying at the Hilton I'm

00:03:21,160 --> 00:03:29,980
staying at the Hilton and I'm part of

00:03:23,769 --> 00:03:33,220
their Honors Program and so I thought

00:03:29,980 --> 00:03:34,870
forever I thought oh haha rh honors it

00:03:33,220 --> 00:03:37,980
stands for hilton hhonors and then i

00:03:34,870 --> 00:03:37,980
showed up and he was

00:03:39,490 --> 00:03:46,040
is this when I signed in I'm not sure

00:03:43,910 --> 00:03:48,740
how to pronounce this when I signed in

00:03:46,040 --> 00:03:49,820
at the thing I I said yes am I on you

00:03:48,740 --> 00:03:51,830
know because I didn't give him my number

00:03:49,820 --> 00:03:54,680
at first so I I checked in and I was

00:03:51,830 --> 00:03:58,430
like yeah can-can you associate this

00:03:54,680 --> 00:04:02,150
with my honor as a campus and the lady

00:03:58,430 --> 00:04:04,880
looked at me weird so I don't know

00:04:02,150 --> 00:04:11,660
anyway so I'm I'm incredibly honored to

00:04:04,880 --> 00:04:14,780
be here so I'm excited to be here in

00:04:11,660 --> 00:04:17,510
Madison um I'm really excited to be here

00:04:14,780 --> 00:04:18,950
I'm a huge like one of the things I like

00:04:17,510 --> 00:04:22,370
to do in my spare time is making

00:04:18,950 --> 00:04:25,310
collages so I'm really excited because i

00:04:22,370 --> 00:04:28,930
heard that Madison is a huge collage

00:04:25,310 --> 00:04:32,840
town so I made a collage for all of you

00:04:28,930 --> 00:04:37,760
has madison this is this is what i ate

00:04:32,840 --> 00:04:39,200
it i ate a ton where did I chipotle this

00:04:37,760 --> 00:04:41,060
is the first time I've ever eaten at

00:04:39,200 --> 00:04:42,650
chipotle and it was delicious my

00:04:41,060 --> 00:04:43,970
co-workers will not go with me to

00:04:42,650 --> 00:04:45,770
chipotle so this is the first time i

00:04:43,970 --> 00:04:49,100
ever got to go there so i was exciting

00:04:45,770 --> 00:04:52,520
the this is I found out that honors does

00:04:49,100 --> 00:04:54,590
not stand for hilton hhonors um I heard

00:04:52,520 --> 00:05:00,410
of this guy that's famous here scooter

00:04:54,590 --> 00:05:03,680
scooter um yes what's his Nate what's

00:05:00,410 --> 00:05:05,840
the correct name thong Cape scooter man

00:05:03,680 --> 00:05:07,310
I I kept googling for him and I kept

00:05:05,840 --> 00:05:09,950
putting it in the wrong or a thong Cape

00:05:07,310 --> 00:05:11,930
scooter man I also ate this like this

00:05:09,950 --> 00:05:18,290
kind of pizza is a macaroni and cheese

00:05:11,930 --> 00:05:20,450
pizza I ate this yeah anyway so um this

00:05:18,290 --> 00:05:27,320
collage is unfinished because I never

00:05:20,450 --> 00:05:29,660
finished collage and so if you like

00:05:27,320 --> 00:05:31,340
collages 2 i'm thinking about starting a

00:05:29,660 --> 00:05:33,290
website where you can put together funny

00:05:31,340 --> 00:05:36,070
collages and share them it i'm going to

00:05:33,290 --> 00:05:41,860
call it collage come on

00:05:36,070 --> 00:05:44,740
I have to credit Phil for that joke

00:05:41,860 --> 00:05:47,350
anyway i'll continue so I wanted to I

00:05:44,740 --> 00:05:49,570
wanted to like connect with developers

00:05:47,350 --> 00:05:51,010
in Madison before I came here so like

00:05:49,570 --> 00:05:53,620
whenever I go speak somewhere I like to

00:05:51,010 --> 00:05:54,910
research about the place I'm going and

00:05:53,620 --> 00:05:57,520
like figure out what the people there

00:05:54,910 --> 00:05:59,830
like and so I can try to relate to them

00:05:57,520 --> 00:06:03,070
so what I did is I found out about this

00:05:59,830 --> 00:06:05,230
this guy this thong Cape scooter man and

00:06:03,070 --> 00:06:07,900
I was like well I really want to connect

00:06:05,230 --> 00:06:11,230
with the people the folks in Madison so

00:06:07,900 --> 00:06:15,490
that's me and i bought a thong and a

00:06:11,230 --> 00:06:17,050
cape so I got that and like so this is

00:06:15,490 --> 00:06:19,960
like a challenge to me there's a first

00:06:17,050 --> 00:06:24,250
for me is my personal challenge and I

00:06:19,960 --> 00:06:26,560
put on like I put on the Cape equipping

00:06:24,250 --> 00:06:35,590
equipping the Cape was fairly simple and

00:06:26,560 --> 00:06:39,100
straightforward and then good equipping

00:06:35,590 --> 00:06:46,720
the song was a bit more difficult but I

00:06:39,100 --> 00:06:50,680
did that it's the first time I've ever

00:06:46,720 --> 00:06:52,270
worn thong underwear and so I said

00:06:50,680 --> 00:06:53,680
there's a lot of first and if you want

00:06:52,270 --> 00:06:55,060
to know what it feels like to wear thong

00:06:53,680 --> 00:06:56,650
underwear and you've never worn it

00:06:55,060 --> 00:07:00,400
before like basically this is what it

00:06:56,650 --> 00:07:02,080
feels like so there's basically two oh I

00:07:00,400 --> 00:07:03,490
also in a scooter I didn't I fail to

00:07:02,080 --> 00:07:05,800
mention that but there's basically two

00:07:03,490 --> 00:07:09,310
problems with this thong underwear the

00:07:05,800 --> 00:07:15,970
first so the first problem is it goes

00:07:09,310 --> 00:07:19,440
all the way up all the way up and I I'm

00:07:15,970 --> 00:07:19,440
a very hairy man inches

00:07:19,919 --> 00:07:25,199
the other problem is the other problem

00:07:22,479 --> 00:07:32,020
is my scooter has a black plastic seat

00:07:25,199 --> 00:07:33,849
so not exactly comfortable anyway my

00:07:32,020 --> 00:07:38,560
wife refused to take photos of me

00:07:33,849 --> 00:07:40,750
outside so there's no photos of that and

00:07:38,560 --> 00:07:48,129
I'm eight I may or may not post these

00:07:40,750 --> 00:07:52,870
slides I'm not sure anyway so so what is

00:07:48,129 --> 00:07:59,650
yak shaving the thing you know about yak

00:07:52,870 --> 00:08:01,419
shaving is it can get pretty hairy so

00:07:59,650 --> 00:08:03,250
one of my favorite things about being up

00:08:01,419 --> 00:08:05,080
on stage and giving talks especially in

00:08:03,250 --> 00:08:07,389
the presence of my co-workers is that I

00:08:05,080 --> 00:08:10,889
can make as many puns as I want to and

00:08:07,389 --> 00:08:10,889
there's nothing they can do about it

00:08:11,490 --> 00:08:16,240
anyway so yak shaving yak shaving is

00:08:14,469 --> 00:08:19,990
when you you set off to do a particular

00:08:16,240 --> 00:08:22,419
task and you end up doing that seems to

00:08:19,990 --> 00:08:24,190
be completely unrelated seems to be

00:08:22,419 --> 00:08:25,509
completely unrelated to that task so

00:08:24,190 --> 00:08:28,270
what I want to do today is I want to

00:08:25,509 --> 00:08:30,699
talk about I want to talk about some

00:08:28,270 --> 00:08:33,399
stuff that I've done that we're all it

00:08:30,699 --> 00:08:35,349
was all yak shaves so all the things I'm

00:08:33,399 --> 00:08:38,800
going to talk about today we're all yak

00:08:35,349 --> 00:08:41,320
shaves and the thing is like um I have a

00:08:38,800 --> 00:08:43,949
really really short attention span so i

00:08:41,320 --> 00:08:46,269
get i get distracted pretty easily so

00:08:43,949 --> 00:08:48,130
many like some of the stuff are going to

00:08:46,269 --> 00:08:51,040
talk about it's related to what i wanted

00:08:48,130 --> 00:08:52,750
to do but not not entirely related so

00:08:51,040 --> 00:08:55,480
it's I think it's more of like yak

00:08:52,750 --> 00:08:57,279
meandering or something and you'll kind

00:08:55,480 --> 00:09:01,810
of see what I mean we're gonna get into

00:08:57,279 --> 00:09:04,089
it here so all right so I'm working on

00:09:01,810 --> 00:09:07,449
working on the codes working on the

00:09:04,089 --> 00:09:11,230
codes and I run into this bug and it's

00:09:07,449 --> 00:09:13,630
like okay I select 10 is n and I do dot

00:09:11,230 --> 00:09:15,310
in and it comes out to be a string comes

00:09:13,630 --> 00:09:18,640
up out to be a string and this is a bug

00:09:15,310 --> 00:09:21,070
in rails on postgres only it's only on

00:09:18,640 --> 00:09:24,250
postgres so I'm like okay let's fix it

00:09:21,070 --> 00:09:26,649
let's fix this bug let's fix it all

00:09:24,250 --> 00:09:28,750
right fix the bug so we're going to do

00:09:26,649 --> 00:09:30,370
that we're going to do that and the

00:09:28,750 --> 00:09:31,270
first the first topic i'm going to cover

00:09:30,370 --> 00:09:32,050
like i'm going to give you a little

00:09:31,270 --> 00:09:33,519
general

00:09:32,050 --> 00:09:34,810
back and we'll go into it this is kind

00:09:33,519 --> 00:09:35,830
of a preview is the first thing we're

00:09:34,810 --> 00:09:38,230
going to look at is we're going to look

00:09:35,830 --> 00:09:39,310
at runtime and security runtime speed

00:09:38,230 --> 00:09:41,440
and we're also going to look a little

00:09:39,310 --> 00:09:43,209
bit at security so we want to fix this

00:09:41,440 --> 00:09:46,390
bug and the first thing that we need to

00:09:43,209 --> 00:09:48,070
do to fix this bug is well we see that

00:09:46,390 --> 00:09:49,600
we're calling this method to access an

00:09:48,070 --> 00:09:51,820
attribute so we need to figure out where

00:09:49,600 --> 00:09:54,459
that's that how that's defined or what

00:09:51,820 --> 00:09:56,950
that method is so what we do is we start

00:09:54,459 --> 00:09:59,170
up we create a new class like this a

00:09:56,950 --> 00:10:01,060
user class and one thing to note here

00:09:59,170 --> 00:10:03,399
which I don't think many people know is

00:10:01,060 --> 00:10:05,560
that a established connection here an

00:10:03,399 --> 00:10:07,420
active record actually takes a URL so

00:10:05,560 --> 00:10:09,160
you can give it a URL of parameters you

00:10:07,420 --> 00:10:10,839
don't have to like give it a whole big

00:10:09,160 --> 00:10:12,850
old hash or whatever you can supply just

00:10:10,839 --> 00:10:14,620
a straight URL what i'm doing here is

00:10:12,850 --> 00:10:17,040
just connecting to an in-memory database

00:10:14,620 --> 00:10:20,829
in sequel light and then i create a user

00:10:17,040 --> 00:10:22,329
just a user model with an attribute and

00:10:20,829 --> 00:10:24,100
we want to figure out where that

00:10:22,329 --> 00:10:26,410
attribute is defined so we're going to

00:10:24,100 --> 00:10:29,260
go I'm going to go do that and what's

00:10:26,410 --> 00:10:31,240
interesting is when we try to find that

00:10:29,260 --> 00:10:34,089
instance method it's not actually going

00:10:31,240 --> 00:10:35,829
to be there at first so if we try to

00:10:34,089 --> 00:10:38,440
access the instance method on the class

00:10:35,829 --> 00:10:41,560
will get a name error and it's because

00:10:38,440 --> 00:10:43,930
these attributes are lazily defined so

00:10:41,560 --> 00:10:45,790
after we create the model after we just

00:10:43,930 --> 00:10:47,589
create one instance of it then we'll

00:10:45,790 --> 00:10:50,950
find that that that instance method is

00:10:47,589 --> 00:10:53,140
created so first thing we do is say okay

00:10:50,950 --> 00:10:54,760
well i wasn't able to figure out it

00:10:53,140 --> 00:10:56,560
figure out where that method was at

00:10:54,760 --> 00:10:59,380
first after i create one okay i can

00:10:56,560 --> 00:11:01,450
figure it out so create one and we go

00:10:59,380 --> 00:11:03,370
look it up figure out well where is that

00:11:01,450 --> 00:11:05,829
what is the return value of this we see

00:11:03,370 --> 00:11:07,720
well at first we see it's a method not

00:11:05,829 --> 00:11:10,000
found it's not defined but then we see

00:11:07,720 --> 00:11:11,829
okay it's an unbound method and what

00:11:10,000 --> 00:11:15,160
this is telling to telling us is that

00:11:11,829 --> 00:11:17,199
it's defined on a module it's defined on

00:11:15,160 --> 00:11:20,220
a module and the method is named name

00:11:17,199 --> 00:11:24,010
but it's an alias of this weird like

00:11:20,220 --> 00:11:25,660
generated name thing here right what we

00:11:24,010 --> 00:11:27,760
can do is we can call dot source

00:11:25,660 --> 00:11:29,440
location on that unbound method it will

00:11:27,760 --> 00:11:31,690
actually tell us where in the source

00:11:29,440 --> 00:11:33,610
code it's defined so if we call source

00:11:31,690 --> 00:11:35,050
location we can figure out what file

00:11:33,610 --> 00:11:36,699
online number where that method is

00:11:35,050 --> 00:11:38,410
defined so we go go take a look at that

00:11:36,699 --> 00:11:39,880
and this is what it looks like here and

00:11:38,410 --> 00:11:41,500
you don't you don't need to read this

00:11:39,880 --> 00:11:44,230
i'm just going to explain what's going

00:11:41,500 --> 00:11:45,990
on here is we have we define a method

00:11:44,230 --> 00:11:49,329
here this is the

00:11:45,990 --> 00:11:51,009
go right there is the original name of

00:11:49,329 --> 00:11:53,170
the method that's that weird one under

00:11:51,009 --> 00:11:56,230
under temp thinga majig that's the

00:11:53,170 --> 00:12:01,149
original name and then down here we

00:11:56,230 --> 00:12:03,339
alias it off to your your name and the

00:12:01,149 --> 00:12:04,749
name in your database and the reason we

00:12:03,339 --> 00:12:07,110
do that is because you could have like

00:12:04,749 --> 00:12:10,179
weird column names that aren't legal

00:12:07,110 --> 00:12:12,970
aren't legal to do under death we can't

00:12:10,179 --> 00:12:15,550
say death that string so we actually

00:12:12,970 --> 00:12:17,589
alias it over so to understand how this

00:12:15,550 --> 00:12:19,089
works we look at this code and the first

00:12:17,589 --> 00:12:20,829
thing I do when I'm looking at this to

00:12:19,089 --> 00:12:23,559
understand is I try to simplify it and

00:12:20,829 --> 00:12:25,569
that stuff that peripheral stuff it

00:12:23,559 --> 00:12:27,459
didn't really matter with regard to the

00:12:25,569 --> 00:12:29,199
bug that we're trying to deal with right

00:12:27,459 --> 00:12:30,550
so really what I want to do is I want to

00:12:29,199 --> 00:12:33,040
look at the body of this method and we

00:12:30,550 --> 00:12:34,929
look at the body and it says like okay

00:12:33,040 --> 00:12:36,670
this is this is really the body this is

00:12:34,929 --> 00:12:39,369
where the most of the work is happening

00:12:36,670 --> 00:12:41,410
and we see our calling read attribute

00:12:39,369 --> 00:12:45,189
and we notice there it's creating a

00:12:41,410 --> 00:12:46,749
string or a symbol excuse me we notice

00:12:45,189 --> 00:12:48,579
it's creating a symbol and all of your

00:12:46,749 --> 00:12:50,889
attributes are stored in a hash by

00:12:48,579 --> 00:12:52,749
symbols so we look all of them up by a

00:12:50,889 --> 00:12:55,629
symbol and I'm sitting there thinking

00:12:52,749 --> 00:12:59,499
well huh that's kind of weird we look

00:12:55,629 --> 00:13:01,660
all those up by symbols well symbols in

00:12:59,499 --> 00:13:04,720
Ruby don't get garbage collected so if

00:13:01,660 --> 00:13:06,850
we use symbols and the input is dynamic

00:13:04,720 --> 00:13:09,189
we can leak a lot of memory and this is

00:13:06,850 --> 00:13:11,290
a vector for a vector for people to make

00:13:09,189 --> 00:13:13,929
our processes leak memory so for example

00:13:11,290 --> 00:13:16,329
this this code right here will just

00:13:13,929 --> 00:13:17,559
continue forever until you're until the

00:13:16,329 --> 00:13:20,920
process runs out of memory and then

00:13:17,559 --> 00:13:23,769
it'll die right now this shouldn't

00:13:20,920 --> 00:13:25,629
really be a problem because the columns

00:13:23,769 --> 00:13:28,600
in your database are bounded you only

00:13:25,629 --> 00:13:30,910
have a set number of you know set number

00:13:28,600 --> 00:13:33,100
of columns in your database so hopefully

00:13:30,910 --> 00:13:34,990
we only create that number of symbols

00:13:33,100 --> 00:13:37,299
but the problem is that you can actually

00:13:34,990 --> 00:13:39,129
do dynamic lookups on your active record

00:13:37,299 --> 00:13:41,679
models so you can say you can do this

00:13:39,129 --> 00:13:44,110
you can say well treated as a hash and

00:13:41,679 --> 00:13:46,329
whatever thing I put in that hash I'm

00:13:44,110 --> 00:13:48,369
going to go look that up what can happen

00:13:46,329 --> 00:13:51,100
is if we get dangerous input like input

00:13:48,369 --> 00:13:52,720
from the params hash or something we're

00:13:51,100 --> 00:13:54,669
going to go convert that to a symbol

00:13:52,720 --> 00:13:57,490
maybe it's a dynamic value will go

00:13:54,669 --> 00:13:59,230
convert it to a symbol and go look it up

00:13:57,490 --> 00:14:02,350
in the hash and now we have a vector

00:13:59,230 --> 00:14:07,240
or a vector for a denial-of-service

00:14:02,350 --> 00:14:10,090
attack on your application so I decide

00:14:07,240 --> 00:14:12,010
well okay let's fix that I'd rather look

00:14:10,090 --> 00:14:13,630
up these values by strings and strings

00:14:12,010 --> 00:14:15,850
will get garbage collected so we just

00:14:13,630 --> 00:14:18,460
change this change this to use a string

00:14:15,850 --> 00:14:21,060
instead let me say okay well now it's a

00:14:18,460 --> 00:14:24,220
string now it's defined as a string and

00:14:21,060 --> 00:14:25,840
all the keys are strings and now we

00:14:24,220 --> 00:14:28,330
don't have a chance of this denial of

00:14:25,840 --> 00:14:31,420
service attacks we're all happy now but

00:14:28,330 --> 00:14:33,190
then we run our benchmarks and you know

00:14:31,420 --> 00:14:35,830
somebody complains like oh man is the

00:14:33,190 --> 00:14:38,110
slower the implementation is slower so

00:14:35,830 --> 00:14:39,400
you think well why is it slower and we

00:14:38,110 --> 00:14:41,680
notice well it's generating a lot of

00:14:39,400 --> 00:14:43,480
garbage this code is generating a lot of

00:14:41,680 --> 00:14:47,650
garbage whenever we call an attribute

00:14:43,480 --> 00:14:50,800
method so why is it doing that well we

00:14:47,650 --> 00:14:52,300
let's super simplify super simplify this

00:14:50,800 --> 00:14:55,600
is just one attribute we call read

00:14:52,300 --> 00:14:57,100
attribute on name we think okay well how

00:14:55,600 --> 00:14:58,510
does this code generating a lot of

00:14:57,100 --> 00:15:01,090
garbage it's not really doing anything

00:14:58,510 --> 00:15:03,600
we're just looking up looking up some

00:15:01,090 --> 00:15:06,580
value what's it doing so if we take

00:15:03,600 --> 00:15:08,650
Ruby's instruction sequence API and look

00:15:06,580 --> 00:15:10,480
at the look at the instruction sequences

00:15:08,650 --> 00:15:12,190
for this we can see what the virtual

00:15:10,480 --> 00:15:15,250
machine is actually executing so this is

00:15:12,190 --> 00:15:18,550
this is the bytecode the bytecode for

00:15:15,250 --> 00:15:20,110
that particular slice of code this is

00:15:18,550 --> 00:15:21,430
using a symbol so if we were accessing

00:15:20,110 --> 00:15:23,350
it via a symbol this is what the

00:15:21,430 --> 00:15:25,330
bytecode would be now if we access it

00:15:23,350 --> 00:15:27,640
via string this is what the bytecode

00:15:25,330 --> 00:15:29,460
would be and if we look at the

00:15:27,640 --> 00:15:31,630
difference between these two these two

00:15:29,460 --> 00:15:34,030
instruction sequences we can see there's

00:15:31,630 --> 00:15:35,710
one difference we have a put object in

00:15:34,030 --> 00:15:39,070
the symbol the symbol case and we have a

00:15:35,710 --> 00:15:41,020
put string in the other case and just as

00:15:39,070 --> 00:15:42,550
a side note as a side note here when you

00:15:41,020 --> 00:15:45,910
when you access these instruction

00:15:42,550 --> 00:15:47,560
sequences and despite my earlier comment

00:15:45,910 --> 00:15:51,970
i probably i will put these slides

00:15:47,560 --> 00:15:55,660
online they may not have the pictures in

00:15:51,970 --> 00:15:57,100
town but these slides will be online so

00:15:55,660 --> 00:15:59,920
if you want to read the code later you

00:15:57,100 --> 00:16:01,330
can so what's interesting is that we can

00:15:59,920 --> 00:16:04,120
actually convert these instruction

00:16:01,330 --> 00:16:05,650
sequences to arrays so if we want to in

00:16:04,120 --> 00:16:06,910
Ruby we can actually do diffs on the

00:16:05,650 --> 00:16:08,950
instruction sequences which is

00:16:06,910 --> 00:16:10,390
interesting I want you to mull that over

00:16:08,950 --> 00:16:11,920
in your head and think about the

00:16:10,390 --> 00:16:13,030
interesting ways you can use these

00:16:11,920 --> 00:16:14,740
instruction sequences

00:16:13,030 --> 00:16:16,450
but anyway let's look at the definitions

00:16:14,740 --> 00:16:20,740
of these instruction sequences we had to

00:16:16,450 --> 00:16:22,510
put object input string so okay well

00:16:20,740 --> 00:16:24,640
where are those defined we go look in I

00:16:22,510 --> 00:16:26,350
n s and s def and Ruby source this is

00:16:24,640 --> 00:16:27,730
where all the instruction sequences are

00:16:26,350 --> 00:16:29,410
defined if you go look in that file

00:16:27,730 --> 00:16:31,270
you'll find all of them with

00:16:29,410 --> 00:16:33,160
documentation above you each of them for

00:16:31,270 --> 00:16:35,830
what they do this is the put object

00:16:33,160 --> 00:16:38,170
instruction the Ruby VM is a stack-based

00:16:35,830 --> 00:16:39,880
virtual machine so all this does is just

00:16:38,170 --> 00:16:41,950
pushes a value on to the stack it

00:16:39,880 --> 00:16:44,130
literally does nothing so it's taking

00:16:41,950 --> 00:16:47,170
that symbol pushing it onto the stack

00:16:44,130 --> 00:16:50,200
that's all it does now we go look at put

00:16:47,170 --> 00:16:52,090
string well this does something else

00:16:50,200 --> 00:16:53,770
this is something more interesting we go

00:16:52,090 --> 00:16:55,900
okay well let's go look at our beast or

00:16:53,770 --> 00:16:58,510
resurrect we go look at arbys to

00:16:55,900 --> 00:17:02,440
resurrect and we see down here ah string

00:16:58,510 --> 00:17:04,270
Alec stir Alec so every time we call

00:17:02,440 --> 00:17:06,160
every time we have a string literal

00:17:04,270 --> 00:17:08,170
we're actually allocating a new string

00:17:06,160 --> 00:17:09,940
it's actually allocating something and

00:17:08,170 --> 00:17:11,620
you can see this very simply if you do a

00:17:09,940 --> 00:17:13,570
bit of code like this we'll just loop

00:17:11,620 --> 00:17:15,580
over a string literal and output the

00:17:13,570 --> 00:17:17,680
object ID and you can see it changes on

00:17:15,580 --> 00:17:19,300
every every call to that block and

00:17:17,680 --> 00:17:22,540
that's because in Ruby strings are

00:17:19,300 --> 00:17:24,010
immutable right every time we evaluate

00:17:22,540 --> 00:17:25,600
that string we have to generate a new

00:17:24,010 --> 00:17:28,840
one because it could get modified at

00:17:25,600 --> 00:17:30,820
some point in the future so can we have

00:17:28,840 --> 00:17:32,500
the best of both worlds we want to have

00:17:30,820 --> 00:17:34,180
the speed of this symbol but it would be

00:17:32,500 --> 00:17:36,100
nice if we could have the safety of the

00:17:34,180 --> 00:17:37,540
string strings will get garbage

00:17:36,100 --> 00:17:39,640
collected if somebody is doing if

00:17:37,540 --> 00:17:42,100
somebody is sending in dynamic looking

00:17:39,640 --> 00:17:43,510
up active record attributes by dynamic

00:17:42,100 --> 00:17:45,130
values it would be nice if we could just

00:17:43,510 --> 00:17:46,510
garbage collect those strings and let

00:17:45,130 --> 00:17:48,610
them go away and not have this be a

00:17:46,510 --> 00:17:52,380
vector so how can we have the best of

00:17:48,610 --> 00:17:55,240
both worlds the answer is use a constant

00:17:52,380 --> 00:17:56,740
so we can define a constant with that

00:17:55,240 --> 00:17:58,780
string and then have our method body

00:17:56,740 --> 00:18:00,580
just look up by the constant and if we

00:17:58,780 --> 00:18:02,620
go look at the instruction sequences for

00:18:00,580 --> 00:18:04,300
this here are the instruction sequences

00:18:02,620 --> 00:18:06,700
the main one to look at is we have them

00:18:04,300 --> 00:18:09,400
called get constant if we go look at the

00:18:06,700 --> 00:18:11,920
source for get constant we see ok while

00:18:09,400 --> 00:18:14,800
it goes and looks up vm get em const

00:18:11,920 --> 00:18:16,480
what is this eventually if we jump

00:18:14,800 --> 00:18:18,490
around in these methods will eventually

00:18:16,480 --> 00:18:21,400
get to a function called RB const get 0

00:18:18,490 --> 00:18:23,740
and we see in there this st look up call

00:18:21,400 --> 00:18:25,600
which is just a hash look up all we're

00:18:23,740 --> 00:18:26,559
doing is looking up that that constant

00:18:25,600 --> 00:18:29,350
name in a hash

00:18:26,559 --> 00:18:31,509
and then just returning the value right

00:18:29,350 --> 00:18:34,659
so we're getting a constant time lookup

00:18:31,509 --> 00:18:36,279
for this value and when we use a when we

00:18:34,659 --> 00:18:38,350
use a constant like this we don't get

00:18:36,279 --> 00:18:41,049
any new allocations so no new

00:18:38,350 --> 00:18:43,419
allocations well cool that's cool Aaron

00:18:41,049 --> 00:18:46,149
but is it as fast so let's write a

00:18:43,419 --> 00:18:47,889
benchmark we have a very tiny benchmark

00:18:46,149 --> 00:18:50,200
here all it does is define three methods

00:18:47,889 --> 00:18:52,779
one looks up by a string one looks one

00:18:50,200 --> 00:18:55,720
by symbol and the other by constant we

00:18:52,779 --> 00:18:58,269
benchmark this run the results and we'll

00:18:55,720 --> 00:19:00,999
see actually that the constant speed is

00:18:58,269 --> 00:19:02,860
about the same as the symbol speed it's

00:19:00,999 --> 00:19:04,509
difficult to tell which one's faster in

00:19:02,860 --> 00:19:06,789
this case because the standard deviation

00:19:04,509 --> 00:19:08,440
is too high but they are very similar

00:19:06,789 --> 00:19:11,259
the string one is significantly slower

00:19:08,440 --> 00:19:12,789
so we change the we change the

00:19:11,259 --> 00:19:14,710
implementation if you go look at the

00:19:12,789 --> 00:19:16,929
implementation rails today you'll see

00:19:14,710 --> 00:19:19,749
something like this where we just define

00:19:16,929 --> 00:19:21,789
a constant we define this constant and

00:19:19,749 --> 00:19:23,710
then your dynamic method goes and looks

00:19:21,789 --> 00:19:27,899
up by that constant so we get the speed

00:19:23,710 --> 00:19:30,850
of symbols with the safety of strings so

00:19:27,899 --> 00:19:32,619
okay cool the next thing we're going to

00:19:30,850 --> 00:19:35,350
we've made that faster still haven't

00:19:32,619 --> 00:19:38,289
fixed the bug we're a little bit safer a

00:19:35,350 --> 00:19:39,730
little bit safer rights 11 fix the bug

00:19:38,289 --> 00:19:41,799
and then we think you know we're looking

00:19:39,730 --> 00:19:43,299
around this code next thing we're going

00:19:41,799 --> 00:19:45,159
to talk about is memory consumption in

00:19:43,299 --> 00:19:47,049
boot time looking around in this code

00:19:45,159 --> 00:19:48,490
and we look at this method and a lot of

00:19:47,049 --> 00:19:51,759
times like I'm just looking at the code

00:19:48,490 --> 00:19:53,740
night like I read a comment I'm like why

00:19:51,759 --> 00:19:56,080
did they say that why did they say that

00:19:53,740 --> 00:19:58,450
there's this big block above it and I

00:19:56,080 --> 00:20:00,519
read I read the comment it says we want

00:19:58,450 --> 00:20:02,350
to generate methods via module eval

00:20:00,519 --> 00:20:04,600
rather than define method because define

00:20:02,350 --> 00:20:06,639
method is slower on dispatch and uses

00:20:04,600 --> 00:20:10,450
more memory because it creates a closure

00:20:06,639 --> 00:20:12,340
and I'm thinking to myself really define

00:20:10,450 --> 00:20:14,649
method is slower on dispatch is that

00:20:12,340 --> 00:20:18,249
true I don't know if that's true and

00:20:14,649 --> 00:20:20,139
then it says and uses more memory is

00:20:18,249 --> 00:20:23,110
that true too I'm not sure if that's

00:20:20,139 --> 00:20:28,029
true so so then I'm like well I gotta

00:20:23,110 --> 00:20:30,669
test this rather than rather than fixing

00:20:28,029 --> 00:20:33,009
a bug yeah I gotta know this is true so

00:20:30,669 --> 00:20:34,869
I write a benchmark go like okay ok so

00:20:33,009 --> 00:20:36,879
we've Alice we've got one here that's

00:20:34,869 --> 00:20:38,500
one method that's defined with define

00:20:36,879 --> 00:20:40,510
method another one that's defined with

00:20:38,500 --> 00:20:43,840
module eval we go ahead and run

00:20:40,510 --> 00:20:46,540
and I up ha the defined method one is

00:20:43,840 --> 00:20:48,430
slower when we call it the fine method

00:20:46,540 --> 00:20:50,560
one is in fact slower when we call it

00:20:48,430 --> 00:20:52,930
that's interesting I didn't know that

00:20:50,560 --> 00:20:54,490
and then I'm like well what is it let's

00:20:52,930 --> 00:20:56,290
look at the documentation for define

00:20:54,490 --> 00:20:58,090
method so I go look at that like wow

00:20:56,290 --> 00:20:59,830
that's interesting there's actually two

00:20:58,090 --> 00:21:02,260
different ways to call define method

00:20:59,830 --> 00:21:04,030
there's one with a block then there's

00:21:02,260 --> 00:21:06,130
another one with a method object you can

00:21:04,030 --> 00:21:09,550
actually give it a method object well I

00:21:06,130 --> 00:21:11,740
wonder how that one performs so I write

00:21:09,550 --> 00:21:13,270
a benchmark for this as well basically

00:21:11,740 --> 00:21:14,770
what we do here is we say okay let's

00:21:13,270 --> 00:21:16,330
define a method with a block and then

00:21:14,770 --> 00:21:19,030
let's define another method but we'll

00:21:16,330 --> 00:21:20,800
use we'll just copy that foo method will

00:21:19,030 --> 00:21:24,910
define a method using the foo method and

00:21:20,800 --> 00:21:26,290
we run that we run that and if we look

00:21:24,910 --> 00:21:28,000
at the benchmark results for that the

00:21:26,290 --> 00:21:31,270
one with define method the defined

00:21:28,000 --> 00:21:33,190
method with a method object is actually

00:21:31,270 --> 00:21:37,570
the same speed as the module eval one

00:21:33,190 --> 00:21:38,890
it's exactly the same speed so when you

00:21:37,570 --> 00:21:41,260
read this comment you think well is

00:21:38,890 --> 00:21:43,690
module eval faster than define method

00:21:41,260 --> 00:21:46,330
and the answer is well it depends it

00:21:43,690 --> 00:21:48,160
depends on how you use it the comment

00:21:46,330 --> 00:21:49,900
did not mention that so you know it's

00:21:48,160 --> 00:21:54,070
not particularly accurate so let's

00:21:49,900 --> 00:21:55,930
refactor our comment okay so very

00:21:54,070 --> 00:21:58,060
important so we refactor the comment it

00:21:55,930 --> 00:22:01,420
says slower on dispatch well that's not

00:21:58,060 --> 00:22:02,920
necessarily true so delete okay let's

00:22:01,420 --> 00:22:05,860
look at the next part we gotta next part

00:22:02,920 --> 00:22:08,590
in here define method uses more memory

00:22:05,860 --> 00:22:11,080
because it creates a closure and what

00:22:08,590 --> 00:22:12,970
this is talking about is that when you

00:22:11,080 --> 00:22:15,160
call define method with a block that's

00:22:12,970 --> 00:22:16,840
actually creating a closure and keeping

00:22:15,160 --> 00:22:19,870
track of the scope within which it was

00:22:16,840 --> 00:22:21,070
defined so let's say we have a method

00:22:19,870 --> 00:22:22,870
like this we have this method called

00:22:21,070 --> 00:22:25,600
make method and all it does is define a

00:22:22,870 --> 00:22:27,580
method right but we have that closure

00:22:25,600 --> 00:22:29,620
here and that closure is going to hold

00:22:27,580 --> 00:22:31,480
on to whatever the value of thing is

00:22:29,620 --> 00:22:33,970
because later on you might reference

00:22:31,480 --> 00:22:35,680
that that value it doesn't know what

00:22:33,970 --> 00:22:37,180
you're doing inside that block so maybe

00:22:35,680 --> 00:22:39,430
you'll reference that value at some

00:22:37,180 --> 00:22:40,960
point so we see down here well make

00:22:39,430 --> 00:22:43,030
method nil that's just going to hold on

00:22:40,960 --> 00:22:44,770
to an ill and Nils aren't ever allocated

00:22:43,030 --> 00:22:46,990
so that's not going to use up much

00:22:44,770 --> 00:22:50,740
memory but the second one here is going

00:22:46,990 --> 00:22:52,510
to hold on to this giant string so

00:22:50,740 --> 00:22:53,890
that's what it means that's what this

00:22:52,510 --> 00:22:56,560
comment means

00:22:53,890 --> 00:22:58,150
saying that he uses a lot of memory but

00:22:56,560 --> 00:23:00,160
really it depends on how you define that

00:22:58,150 --> 00:23:02,260
and how you how you define that block it

00:23:00,160 --> 00:23:05,980
really depends on the context within

00:23:02,260 --> 00:23:08,350
which that that block was defined so

00:23:05,980 --> 00:23:10,540
okay well let you know what let's do a

00:23:08,350 --> 00:23:11,740
memory test let's do a test on memory

00:23:10,540 --> 00:23:13,750
and try and figure out which one

00:23:11,740 --> 00:23:15,910
actually uses more memory between define

00:23:13,750 --> 00:23:18,010
method and module eval we know that this

00:23:15,910 --> 00:23:19,750
defined method one will use up a lot of

00:23:18,010 --> 00:23:22,000
memory in certain cases so let's write a

00:23:19,750 --> 00:23:25,570
test here we define a hundred thousand

00:23:22,000 --> 00:23:27,310
methods okay one will use eval and the

00:23:25,570 --> 00:23:28,900
other one will use define method so

00:23:27,310 --> 00:23:30,670
we're going to use a hundred define a

00:23:28,900 --> 00:23:32,950
hundred thousand methods here and then

00:23:30,670 --> 00:23:35,260
just sleep because I want to go look at

00:23:32,950 --> 00:23:37,720
the memory in the activity monitor so I

00:23:35,260 --> 00:23:39,430
run this I run this and this might be

00:23:37,720 --> 00:23:41,470
small for you to read but one of them

00:23:39,430 --> 00:23:46,390
uses 120 megabytes and the other one

00:23:41,470 --> 00:23:48,880
uses 68 megabytes so which one use which

00:23:46,390 --> 00:23:51,430
one uses more memory actually the one

00:23:48,880 --> 00:23:53,860
that uses module eval is the one using

00:23:51,430 --> 00:23:57,270
128 megabytes and the one using define

00:23:53,860 --> 00:24:00,550
method is the one that's using 68 so

00:23:57,270 --> 00:24:03,130
which uses more memory again the answer

00:24:00,550 --> 00:24:06,550
is it depends it depends on how you call

00:24:03,130 --> 00:24:09,100
it it depends on how you use it so why

00:24:06,550 --> 00:24:12,250
is why is module eval using so much more

00:24:09,100 --> 00:24:14,710
memory than defined method well it turns

00:24:12,250 --> 00:24:16,120
out the reason module eval is using so

00:24:14,710 --> 00:24:18,970
much more memories because every time

00:24:16,120 --> 00:24:20,770
you call module eval with a string it's

00:24:18,970 --> 00:24:22,510
actually invoking the Ruby parser and

00:24:20,770 --> 00:24:24,370
converting that code into instruction

00:24:22,510 --> 00:24:26,050
sequences and those instruction

00:24:24,370 --> 00:24:27,670
sequences aren't thrown away because

00:24:26,050 --> 00:24:30,580
they have to be executed at one point

00:24:27,670 --> 00:24:34,870
whereas with define method we're only

00:24:30,580 --> 00:24:36,550
executing the parser once right so if we

00:24:34,870 --> 00:24:38,200
count up the number of instruction

00:24:36,550 --> 00:24:40,360
sequences which we can do here at the

00:24:38,200 --> 00:24:42,730
bottom and don't you don't need to write

00:24:40,360 --> 00:24:44,320
this down I will put up the slides you

00:24:42,730 --> 00:24:46,390
can count the instruction sequences and

00:24:44,320 --> 00:24:48,430
we can see the difference so let's run

00:24:46,390 --> 00:24:50,440
at once let's run it once with module

00:24:48,430 --> 00:24:52,420
eval and run it once without module eval

00:24:50,440 --> 00:24:54,970
and look at the difference in bytes and

00:24:52,420 --> 00:24:57,850
we can see okay well define method is

00:24:54,970 --> 00:25:03,220
using vastly fewer instruction sequences

00:24:57,850 --> 00:25:04,900
than eval is module eval so well okay so

00:25:03,220 --> 00:25:07,390
I guess we have to refactor our Comment

00:25:04,900 --> 00:25:07,840
again says defiant define method uses

00:25:07,390 --> 00:25:09,520
more mem

00:25:07,840 --> 00:25:11,620
because it creates a closure well not

00:25:09,520 --> 00:25:14,559
necessarily maybe it depends on how the

00:25:11,620 --> 00:25:21,970
closure is created so okay let's delete

00:25:14,559 --> 00:25:24,070
that now the comment says we want to

00:25:21,970 --> 00:25:27,100
generate methods via module eval rather

00:25:24,070 --> 00:25:28,539
than to find method because and this

00:25:27,100 --> 00:25:29,890
this is what exactly what's going

00:25:28,539 --> 00:25:35,049
through my head when I'm looking at this

00:25:29,890 --> 00:25:44,890
code I'm like because who wrote this

00:25:35,049 --> 00:25:46,630
comment get blame anyway so another

00:25:44,890 --> 00:25:48,220
interesting side note is let's also look

00:25:46,630 --> 00:25:50,169
at boot time which one's faster on

00:25:48,220 --> 00:25:51,490
startup which one of these will run

00:25:50,169 --> 00:25:53,409
faster on startup and it should be

00:25:51,490 --> 00:25:55,270
pretty clear from now which one's going

00:25:53,409 --> 00:25:56,950
to be faster so we'll use exactly the

00:25:55,270 --> 00:26:00,429
same benchmark but we won't sleep at the

00:25:56,950 --> 00:26:02,890
end we'll run the two right so we run

00:26:00,429 --> 00:26:04,830
the two in the eval version takes 3.6

00:26:02,890 --> 00:26:08,350
seconds or the other one takes point 6

00:26:04,830 --> 00:26:11,799
so that's pretty interesting when we

00:26:08,350 --> 00:26:13,929
think about it module eval despite what

00:26:11,799 --> 00:26:15,460
this comment says all of our tests have

00:26:13,929 --> 00:26:17,440
shown while module evals using more

00:26:15,460 --> 00:26:19,870
memory it's slower what is the deal with

00:26:17,440 --> 00:26:21,909
all this but it really depends on how

00:26:19,870 --> 00:26:25,570
you're calling it right really depends

00:26:21,909 --> 00:26:28,270
on how you're using this so as far as

00:26:25,570 --> 00:26:31,029
memory is concerned module eval seems to

00:26:28,270 --> 00:26:32,679
be using more depending on how we call

00:26:31,029 --> 00:26:35,320
define method so if we define our

00:26:32,679 --> 00:26:36,669
lambdas correctly then define methods

00:26:35,320 --> 00:26:40,149
not going to use up as much memories

00:26:36,669 --> 00:26:43,120
module eval it depends so boot time

00:26:40,149 --> 00:26:44,890
module eval is definitely slower calling

00:26:43,120 --> 00:26:46,720
module eval so much we're invoking the

00:26:44,890 --> 00:26:48,370
parser and parsing and compiling all

00:26:46,720 --> 00:26:51,130
this Ruby code it's definitely slower

00:26:48,370 --> 00:26:53,500
than compiling at once now as far as

00:26:51,130 --> 00:26:56,950
runtime is concerned define method with

00:26:53,500 --> 00:26:59,200
a block is very slow very slow compared

00:26:56,950 --> 00:27:01,510
to our module eval version you're saying

00:26:59,200 --> 00:27:04,630
but Aaron but Aaron what about the other

00:27:01,510 --> 00:27:06,750
defined method yes the other define

00:27:04,630 --> 00:27:09,130
method this one can we use this one

00:27:06,750 --> 00:27:11,470
would be nice if we could use this one

00:27:09,130 --> 00:27:12,909
the problem is there's nothing dynamic

00:27:11,470 --> 00:27:14,169
about this and if you look at the code

00:27:12,909 --> 00:27:16,480
that we're generating it's actually

00:27:14,169 --> 00:27:18,460
dynamic we have we have a dynamic value

00:27:16,480 --> 00:27:20,679
here this name this name thing is

00:27:18,460 --> 00:27:21,580
dynamic so how can we how can we get the

00:27:20,679 --> 00:27:22,810
best best of

00:27:21,580 --> 00:27:24,730
all the world's out of this and the way

00:27:22,810 --> 00:27:27,940
we do it is with method transplanting I

00:27:24,730 --> 00:27:28,930
have to go quickly method transplanting

00:27:27,940 --> 00:27:30,670
I want to show you a little bit of

00:27:28,930 --> 00:27:34,240
method transplanting you can transplant

00:27:30,670 --> 00:27:36,850
methods using define method so here is a

00:27:34,240 --> 00:27:38,470
here's an example of transplanting

00:27:36,850 --> 00:27:41,170
methods we say okay let's take a method

00:27:38,470 --> 00:27:42,970
from Class A and put it on a Class B I'd

00:27:41,170 --> 00:27:44,530
like to take one from Class A and put it

00:27:42,970 --> 00:27:46,300
on a Class B but when we run this we

00:27:44,530 --> 00:27:48,100
actually get an error saying well the

00:27:46,300 --> 00:27:50,110
bind argument must be a subclass of a

00:27:48,100 --> 00:27:52,660
meaning that class b needs to be a

00:27:50,110 --> 00:27:55,690
subclass of a they have to be related

00:27:52,660 --> 00:27:58,720
somehow otherwise it's not allowed but

00:27:55,690 --> 00:28:00,970
what about between modules what if we

00:27:58,720 --> 00:28:03,250
had a module that contained all possible

00:28:00,970 --> 00:28:05,830
methods and then transplanted that

00:28:03,250 --> 00:28:08,680
somewhere else well we can actually do

00:28:05,830 --> 00:28:11,050
that with Ruby 2 point 0 we can say ok

00:28:08,680 --> 00:28:13,470
let's let's transplant methods between

00:28:11,050 --> 00:28:17,320
modules and then just include the module

00:28:13,470 --> 00:28:19,840
right this sounds crazy I know right

00:28:17,320 --> 00:28:21,490
we're gonna take it let me say that

00:28:19,840 --> 00:28:23,770
again we're going to define all methods

00:28:21,490 --> 00:28:25,960
it puts a bit of module and then

00:28:23,770 --> 00:28:28,240
transplant them but we can do that we

00:28:25,960 --> 00:28:30,370
can define all the accessors and that's

00:28:28,240 --> 00:28:31,930
actually what we're going to do we're

00:28:30,370 --> 00:28:33,940
doing this in rails master today so

00:28:31,930 --> 00:28:36,040
here's example example of the code we

00:28:33,940 --> 00:28:37,870
take we define all the access or methods

00:28:36,040 --> 00:28:39,310
and actually transplant them and that's

00:28:37,870 --> 00:28:43,030
what this code is doing here and we're

00:28:39,310 --> 00:28:44,620
benchmarking it right so well actually

00:28:43,030 --> 00:28:45,970
I'm sorry let me let me describe this

00:28:44,620 --> 00:28:47,650
benchmark a little bit more accurately

00:28:45,970 --> 00:28:49,480
what this benchmark does is it creates a

00:28:47,650 --> 00:28:52,450
whole bunch of models a whole bunch of

00:28:49,480 --> 00:28:53,950
active record models and then calculates

00:28:52,450 --> 00:28:56,350
the number of instruction sequences that

00:28:53,950 --> 00:28:58,750
are generated during creation of that

00:28:56,350 --> 00:29:00,580
active record model so what I want what

00:28:58,750 --> 00:29:03,370
I want to show you is a graph of before

00:29:00,580 --> 00:29:06,940
this is rails four-point-oh as before

00:29:03,370 --> 00:29:08,740
and after which is master and this is

00:29:06,940 --> 00:29:10,540
this is a graph of the instruction

00:29:08,740 --> 00:29:12,940
sequences used between the two that top

00:29:10,540 --> 00:29:14,830
one is rails four point oh and that

00:29:12,940 --> 00:29:17,050
bottom one is master and you can see we

00:29:14,830 --> 00:29:19,420
have linear growth in both of these so

00:29:17,050 --> 00:29:21,760
we're also doing a linear growth and in

00:29:19,420 --> 00:29:23,710
active record models so we're doing

00:29:21,760 --> 00:29:25,090
linear growth here and if we divide this

00:29:23,710 --> 00:29:28,270
out and figure out how many kilobytes

00:29:25,090 --> 00:29:31,120
per model we're generating in master

00:29:28,270 --> 00:29:34,120
we're generating 18k per model and in

00:29:31,120 --> 00:29:35,350
rails forward generating 31k and what's

00:29:34,120 --> 00:29:38,110
interesting is

00:29:35,350 --> 00:29:40,240
we can also compare definition speed if

00:29:38,110 --> 00:29:43,150
we look at definition speed in master vs

00:29:40,240 --> 00:29:45,010
four-point-oh will see that master can

00:29:43,150 --> 00:29:47,260
actually define an active record model

00:29:45,010 --> 00:29:49,960
almost 2 times faster than four-point-oh

00:29:47,260 --> 00:29:52,360
can but we have a remaining problem here

00:29:49,960 --> 00:29:54,520
and if you notice in that benchmark we

00:29:52,360 --> 00:29:56,110
had a hundred percent cache hit we're

00:29:54,520 --> 00:29:58,150
generating a whole bunch of models with

00:29:56,110 --> 00:30:00,580
exactly the same attributes a hundred

00:29:58,150 --> 00:30:03,190
percent cache hit but the memory memory

00:30:00,580 --> 00:30:04,870
growth memory still grows so somewhere

00:30:03,190 --> 00:30:08,530
we're defining a bunch of instruction

00:30:04,870 --> 00:30:10,330
sequences so that we're not caching so

00:30:08,530 --> 00:30:12,250
we have a bit more room to improve their

00:30:10,330 --> 00:30:14,710
the other problem is this only works on

00:30:12,250 --> 00:30:18,580
Ruby 2 point 0 does not work on Ruby 19

00:30:14,710 --> 00:30:23,980
this trick so to recap we went from

00:30:18,580 --> 00:30:26,320
querying to fixing a bug to security to

00:30:23,980 --> 00:30:31,150
performance to instruction sequences to

00:30:26,320 --> 00:30:35,620
Ruby source code but we never fix the

00:30:31,150 --> 00:30:37,539
bug you'll notice in this talk don't

00:30:35,620 --> 00:30:39,820
worry don't worry the bug the bug

00:30:37,539 --> 00:30:41,740
actually got fixed it's oh it's okay and

00:30:39,820 --> 00:30:44,429
to recap what I want to end with is

00:30:41,740 --> 00:30:47,020
don't believe everything that you read

00:30:44,429 --> 00:30:49,960
yak shaving can be fun and educational

00:30:47,020 --> 00:30:52,169
just don't get too lost thank you very

00:30:49,960 --> 00:30:52,169
much

00:30:58,100 --> 00:31:00,160
you

00:31:08,160 --> 00:31:10,220

YouTube URL: https://www.youtube.com/watch?v=zIlYLZO2aRU


