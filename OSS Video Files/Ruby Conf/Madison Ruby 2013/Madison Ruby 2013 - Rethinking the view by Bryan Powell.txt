Title: Madison Ruby 2013 - Rethinking the view by Bryan Powell
Publication date: 2020-01-28
Playlist: Madison Ruby 2013
Description: 
	The convergence of view and logic and the interaction between client and server is the crux of complexity in a modern web application. This talk will explore a new approach to the view that simplifies the understanding and development of our applications. You'll walk away with new techniques for building in advanced behavior, like realtime view updates without writing a single line of Javascript.

Help us caption & translate this video!

http://amara.org/v/FG8Q/
Captions: 
	00:00:11,950 --> 00:00:21,610
hey guys and gals how is everyone doing

00:00:15,250 --> 00:00:23,349
today me too I am a little bummed I have

00:00:21,610 --> 00:00:25,210
to be honest with you I it's my first

00:00:23,349 --> 00:00:28,360
time in Wisconsin first time at Madison

00:00:25,210 --> 00:00:30,630
Ruby I love what jim is doing with

00:00:28,360 --> 00:00:32,739
Madison Ruby it's this is pretty awesome

00:00:30,630 --> 00:00:35,559
regional conference so far looking

00:00:32,739 --> 00:00:38,200
forward to today and tomorrow but I'll

00:00:35,559 --> 00:00:42,430
no drive up here so as Jim mentioned I'm

00:00:38,200 --> 00:00:43,930
from Alabama took me 13 hours to drive

00:00:42,430 --> 00:00:46,300
up here yesterday and that's only

00:00:43,930 --> 00:00:48,580
because i use Apple maps instead of

00:00:46,300 --> 00:00:56,980
google it was only supposed to be a 10

00:00:48,580 --> 00:00:58,150
hour drive but I i I'm bummed because on

00:00:56,980 --> 00:01:00,940
the way up here the only thing I think

00:00:58,150 --> 00:01:03,820
about Wisconsin was cheese because i'm

00:01:00,940 --> 00:01:06,520
not super familiar with the state and as

00:01:03,820 --> 00:01:08,470
I was approaching the the I guess

00:01:06,520 --> 00:01:10,780
Illinois and Wisconsin border coming up

00:01:08,470 --> 00:01:13,810
94 I think for I remember where I was

00:01:10,780 --> 00:01:15,520
yesterday there was this booth stretch

00:01:13,810 --> 00:01:17,020
out across the road and I got excited i

00:01:15,520 --> 00:01:19,920
was thinking yes they're going to hand

00:01:17,020 --> 00:01:22,569
me some cheese as i go across the border

00:01:19,920 --> 00:01:24,639
so I pull up and I rolled down my window

00:01:22,569 --> 00:01:33,280
and I smile and I say cheese and she

00:01:24,639 --> 00:01:36,670
says toll so anyway um I still haven't

00:01:33,280 --> 00:01:38,469
had my cheese we're not here today to

00:01:36,670 --> 00:01:42,329
talk about cheese we're talking about

00:01:38,469 --> 00:01:45,159
the view so I've been building software

00:01:42,329 --> 00:01:49,600
mostly for the web for a long time about

00:01:45,159 --> 00:01:51,159
12 years now and the last I don't know

00:01:49,600 --> 00:01:54,340
six or so of those years I've spent a

00:01:51,159 --> 00:01:58,569
lot of time thinking about how we build

00:01:54,340 --> 00:02:02,139
these web applications the tools the

00:01:58,569 --> 00:02:03,700
techniques the practices where I've kind

00:02:02,139 --> 00:02:06,340
of centered the last two or three years

00:02:03,700 --> 00:02:10,599
is how we architect these applications

00:02:06,340 --> 00:02:13,599
and specifically how we architect the

00:02:10,599 --> 00:02:14,709
view in our web applications so this is

00:02:13,599 --> 00:02:15,760
what I want to talk about today i want

00:02:14,709 --> 00:02:17,380
to share some of my thoughts and

00:02:15,760 --> 00:02:21,280
hopefully start a conversation with you

00:02:17,380 --> 00:02:23,620
all get your thoughts as well i think

00:02:21,280 --> 00:02:25,210
it's important though to start first

00:02:23,620 --> 00:02:27,400
with some context so

00:02:25,210 --> 00:02:31,260
we know exactly what it is we're

00:02:27,400 --> 00:02:33,400
rethinking together so let's start here

00:02:31,260 --> 00:02:35,890
this will probably be a bit elementary

00:02:33,400 --> 00:02:44,200
to most of you and that's good so this

00:02:35,890 --> 00:02:48,970
is a few yard B template woohoo he's

00:02:44,200 --> 00:02:50,650
also smart in addition to a known so

00:02:48,970 --> 00:02:53,500
yeah this is a yuppie template if you

00:02:50,650 --> 00:02:55,630
work in rels and or Sinatra which I'm

00:02:53,500 --> 00:03:00,310
sure most of us have this is familiar to

00:02:55,630 --> 00:03:02,470
you in an ER be template we give it some

00:03:00,310 --> 00:03:05,800
data here we give it an array of a

00:03:02,470 --> 00:03:08,440
single hash and this template is

00:03:05,800 --> 00:03:09,460
compiled into what is ultimately sent

00:03:08,440 --> 00:03:13,660
back down to the client and rendered in

00:03:09,460 --> 00:03:17,320
the browser so this is static there's

00:03:13,660 --> 00:03:21,670
state mixed in but it is represented as

00:03:17,320 --> 00:03:26,050
a static page so I this is kind of a

00:03:21,670 --> 00:03:28,660
compiled template here and this is kind

00:03:26,050 --> 00:03:31,810
of a mainstay both in our community and

00:03:28,660 --> 00:03:33,930
other communities all of the template

00:03:31,810 --> 00:03:39,060
languages in tilt for example are

00:03:33,930 --> 00:03:43,720
compiled in a similar way when I did PHP

00:03:39,060 --> 00:03:47,140
if I can say that here it was 12 years

00:03:43,720 --> 00:03:50,710
ago okay the the approach that we took

00:03:47,140 --> 00:03:53,790
two views was very similar to this so a

00:03:50,710 --> 00:03:56,170
lot has changed in 12 years fortunately

00:03:53,790 --> 00:04:01,410
12 years ago Ajax was kind of just

00:03:56,170 --> 00:04:04,660
becoming a thing we would at one point

00:04:01,410 --> 00:04:08,770
let's get a little long at one point we

00:04:04,660 --> 00:04:10,360
would have a hidden iframe and load

00:04:08,770 --> 00:04:14,470
pages through that and have a call back

00:04:10,360 --> 00:04:16,120
and refresh our content pre Ajax so we

00:04:14,470 --> 00:04:19,210
have Ajax support in all the browsers

00:04:16,120 --> 00:04:21,520
and we're even moving beyond that we're

00:04:19,210 --> 00:04:24,510
moving to real-time apps we're moving to

00:04:21,520 --> 00:04:26,710
apps with live updating views views that

00:04:24,510 --> 00:04:28,600
update instantaneously are near

00:04:26,710 --> 00:04:31,900
instantaneously as the state and our

00:04:28,600 --> 00:04:37,150
back-end application changes and there's

00:04:31,900 --> 00:04:38,840
been a lot of work in this space you

00:04:37,150 --> 00:04:41,600
know the 20 or

00:04:38,840 --> 00:04:44,840
many front-end JavaScript frameworks

00:04:41,600 --> 00:04:49,790
that exist today knockback is my

00:04:44,840 --> 00:04:51,650
favorite in the list as these have been

00:04:49,790 --> 00:04:53,510
introduced we're kind of breaking away

00:04:51,650 --> 00:04:58,460
from the traditional roles of client

00:04:53,510 --> 00:04:59,870
server so pre the move to the client the

00:04:58,460 --> 00:05:02,030
client was really concerned about the UI

00:04:59,870 --> 00:05:04,669
the user interface how we interacted

00:05:02,030 --> 00:05:06,110
with the application and our state was

00:05:04,669 --> 00:05:09,110
really wrapped up in the back end of our

00:05:06,110 --> 00:05:12,229
application and that's changing we've

00:05:09,110 --> 00:05:17,870
seen state trickling down ever so slowly

00:05:12,229 --> 00:05:21,290
to the front end so this is fine I think

00:05:17,870 --> 00:05:23,750
it has its place it's an extra layer and

00:05:21,290 --> 00:05:25,280
sometimes few extra layers in our

00:05:23,750 --> 00:05:28,750
application I think it brings some

00:05:25,280 --> 00:05:31,310
complexities like the first request

00:05:28,750 --> 00:05:32,780
problem if you're not rendering the view

00:05:31,310 --> 00:05:35,240
on the backend and return again the

00:05:32,780 --> 00:05:37,750
response you know how do you do it in a

00:05:35,240 --> 00:05:41,150
way that's not intrusive to the user

00:05:37,750 --> 00:05:43,010
what a way to solve that problem is to

00:05:41,150 --> 00:05:45,889
return an empty template make another

00:05:43,010 --> 00:05:50,300
request for the data render the view and

00:05:45,889 --> 00:05:52,330
present it to the user in the client so

00:05:50,300 --> 00:05:55,270
there are solutions for these issues I

00:05:52,330 --> 00:05:58,550
think though that this is really the

00:05:55,270 --> 00:06:00,110
crux of complexity what I say and our

00:05:58,550 --> 00:06:02,060
modern web applications it's where

00:06:00,110 --> 00:06:04,490
client and server kind of come together

00:06:02,060 --> 00:06:12,410
and I think they come together in the

00:06:04,490 --> 00:06:15,080
view now this word crux is not a word

00:06:12,410 --> 00:06:16,940
that I used prior to like a year ago

00:06:15,080 --> 00:06:19,099
when I started kind of dabbling in rock

00:06:16,940 --> 00:06:20,750
climbing and I've come to really like

00:06:19,099 --> 00:06:22,789
the word and like its application here

00:06:20,750 --> 00:06:27,349
so what it is when you're climbing a

00:06:22,789 --> 00:06:29,320
route the crux is like the hardest part

00:06:27,349 --> 00:06:32,270
in the route it's it's the thing that

00:06:29,320 --> 00:06:35,720
all of your movements have been leading

00:06:32,270 --> 00:06:37,250
up to and you've conserved your energy

00:06:35,720 --> 00:06:39,139
you've gotten your balance just right

00:06:37,250 --> 00:06:42,080
and you've got to power through this

00:06:39,139 --> 00:06:45,320
last difficult move and the rest of the

00:06:42,080 --> 00:06:47,270
route is relatively easy afterwards as

00:06:45,320 --> 00:06:49,700
long as you get through the crux the

00:06:47,270 --> 00:06:52,700
right way and I think that applies here

00:06:49,700 --> 00:06:54,740
so we've had all of this work the last

00:06:52,700 --> 00:06:57,340
decade decade and a half two decades

00:06:54,740 --> 00:07:01,400
leading up to this point we have

00:06:57,340 --> 00:07:03,410
browsers being built with RTC support

00:07:01,400 --> 00:07:05,420
WebSocket support it's becoming

00:07:03,410 --> 00:07:07,460
universal and that's opening a lot of

00:07:05,420 --> 00:07:12,320
doors and things are really changing I

00:07:07,460 --> 00:07:14,480
think this is the moment where if we get

00:07:12,320 --> 00:07:17,680
this right it's going to make building

00:07:14,480 --> 00:07:21,950
applications in the future much easier

00:07:17,680 --> 00:07:24,230
so to this point we've been talking

00:07:21,950 --> 00:07:29,630
about unlocking advanced behavior like

00:07:24,230 --> 00:07:31,610
real-time views in applications with

00:07:29,630 --> 00:07:33,590
some of the application logic move to

00:07:31,610 --> 00:07:35,840
the client I think it's also possible to

00:07:33,590 --> 00:07:37,580
unlock this behavior and application

00:07:35,840 --> 00:07:39,590
staying within the traditional client

00:07:37,580 --> 00:07:44,380
and server roles so without moving state

00:07:39,590 --> 00:07:47,330
to the client so let's talk through this

00:07:44,380 --> 00:07:52,010
so I think of a view as a structure for

00:07:47,330 --> 00:07:53,240
presenting data this is a view it's the

00:07:52,010 --> 00:07:58,790
same thing we saw before it's the result

00:07:53,240 --> 00:08:00,590
of compiling our ER be template and so

00:07:58,790 --> 00:08:03,440
this is structure for data now what is

00:08:00,590 --> 00:08:07,670
our data so if I put this in context and

00:08:03,440 --> 00:08:09,290
say this is a view for a blog say we're

00:08:07,670 --> 00:08:10,700
building a blog then we can start to

00:08:09,290 --> 00:08:12,740
kind of pick out what the data is

00:08:10,700 --> 00:08:15,530
represented here so we can say for

00:08:12,740 --> 00:08:18,800
instance that this bit of structure this

00:08:15,530 --> 00:08:22,700
div represents the post in our

00:08:18,800 --> 00:08:24,500
application we can say that this h1 tag

00:08:22,700 --> 00:08:26,660
represents the title and our application

00:08:24,500 --> 00:08:30,080
we can say this paragraph represents the

00:08:26,660 --> 00:08:36,800
body this becomes really obvious when we

00:08:30,080 --> 00:08:38,840
switch back to the ER be template now

00:08:36,800 --> 00:08:42,320
our Arab you templates kind of saying

00:08:38,840 --> 00:08:44,420
two things right it's talking about our

00:08:42,320 --> 00:08:48,230
structure its defining our structure

00:08:44,420 --> 00:08:51,790
which are the HTML tags and it's also

00:08:48,230 --> 00:08:54,500
describing our logic so how do we

00:08:51,790 --> 00:08:57,230
transform this view in order to present

00:08:54,500 --> 00:08:59,690
the state from our application and I

00:08:57,230 --> 00:09:02,960
think it's valid question is this bad I

00:08:59,690 --> 00:09:04,490
don't think it is we've built

00:09:02,960 --> 00:09:06,499
applications in this way for a long time

00:09:04,490 --> 00:09:10,369
but like I said things are changing

00:09:06,499 --> 00:09:12,349
and I think that this approach puts us

00:09:10,369 --> 00:09:14,599
at a bit of a disadvantage trying to

00:09:12,349 --> 00:09:17,359
solve these other problems what I mean

00:09:14,599 --> 00:09:21,249
is when we compile an ERV template is a

00:09:17,359 --> 00:09:23,359
destructive action the result of

00:09:21,249 --> 00:09:26,419
compiling this template is just static

00:09:23,359 --> 00:09:28,579
content we lose all concept of state we

00:09:26,419 --> 00:09:34,369
lose all concept of how we got to this

00:09:28,579 --> 00:09:36,379
point the instructions that we used to

00:09:34,369 --> 00:09:37,639
build this view are gone they're lost we

00:09:36,379 --> 00:09:39,409
don't know how this view came to

00:09:37,639 --> 00:09:41,869
existence we don't know where the data

00:09:39,409 --> 00:09:44,539
is we could make an assumption say that

00:09:41,869 --> 00:09:48,079
everything in this view is is the data

00:09:44,539 --> 00:09:49,579
the state and our application but even

00:09:48,079 --> 00:09:52,279
if we made that assumption we don't know

00:09:49,579 --> 00:09:55,609
we can't put it in context we can't put

00:09:52,279 --> 00:09:56,869
it back in context of our application so

00:09:55,609 --> 00:10:03,709
I think we have to have a way around

00:09:56,869 --> 00:10:05,929
this so a workaround could be to force

00:10:03,709 --> 00:10:09,369
the separation between the structure and

00:10:05,929 --> 00:10:13,279
logic so our views in effect become

00:10:09,369 --> 00:10:16,639
logic lists and they are acted on

00:10:13,279 --> 00:10:17,989
externally by our view logic instead of

00:10:16,639 --> 00:10:21,979
transforming itself it's acted on

00:10:17,989 --> 00:10:24,559
externally for this to work we have to

00:10:21,979 --> 00:10:28,999
first build in knowledge about what this

00:10:24,559 --> 00:10:32,259
view will ultimately be presenting we do

00:10:28,999 --> 00:10:34,579
this by identifying significant nodes a

00:10:32,259 --> 00:10:36,799
significant node is a node in our view

00:10:34,579 --> 00:10:38,749
that represents some data in our

00:10:36,799 --> 00:10:41,569
application and as we described earlier

00:10:38,749 --> 00:10:46,699
it's these three it's the div the header

00:10:41,569 --> 00:10:49,909
and the paragraph and then we label

00:10:46,699 --> 00:10:53,869
these so we can say that this div is a

00:10:49,909 --> 00:10:56,749
post and this h1 tag is a title and this

00:10:53,869 --> 00:10:58,309
paragraph tag as a body and we use the

00:10:56,749 --> 00:11:00,470
term scope and prop to define these

00:10:58,309 --> 00:11:02,779
things so a scope is you can think of

00:11:00,470 --> 00:11:07,929
that as a type of data think of a prop

00:11:02,779 --> 00:11:10,839
as a attribute of that type so

00:11:07,929 --> 00:11:14,389
transformations become relatively easy

00:11:10,839 --> 00:11:15,709
to transform this view based on how we

00:11:14,389 --> 00:11:20,450
want to present what data we want to

00:11:15,709 --> 00:11:22,610
present in fact our logic that we write

00:11:20,450 --> 00:11:24,590
transform this view doesn't treat it as

00:11:22,610 --> 00:11:27,350
a view any longer but it treats it as

00:11:24,590 --> 00:11:30,920
data itself so let's walk through an

00:11:27,350 --> 00:11:34,880
example of that so here on the Left we

00:11:30,920 --> 00:11:36,380
have some data which is a hash and on

00:11:34,880 --> 00:11:38,480
the right we have our view same view as

00:11:36,380 --> 00:11:42,290
before it's labeled with our scopes and

00:11:38,480 --> 00:11:44,240
props I think it's important to point

00:11:42,290 --> 00:11:47,270
out you don't usually have hashes laying

00:11:44,240 --> 00:11:49,760
around your application this data would

00:11:47,270 --> 00:11:52,340
most likely be pulled from active record

00:11:49,760 --> 00:11:57,080
or something like that any object will

00:11:52,340 --> 00:12:00,620
work and now it comes to the point where

00:11:57,080 --> 00:12:02,240
we can apply this data to the view so we

00:12:00,620 --> 00:12:05,600
do this in a few steps the first of

00:12:02,240 --> 00:12:09,440
which we address the view and then we

00:12:05,600 --> 00:12:11,270
reduce our scope so we say this is what

00:12:09,440 --> 00:12:15,140
we're representing we're representing a

00:12:11,270 --> 00:12:18,110
scope called post and now we apply our

00:12:15,140 --> 00:12:21,470
data to that view so here you see that

00:12:18,110 --> 00:12:23,750
the data is just mapped in so our title

00:12:21,470 --> 00:12:26,330
prop maps to the title prop in the view

00:12:23,750 --> 00:12:28,130
our body prop maps to the body prop in

00:12:26,330 --> 00:12:29,810
the view and the content that was there

00:12:28,130 --> 00:12:37,040
in place and the view is replaced with

00:12:29,810 --> 00:12:38,990
this data here's the full result okay so

00:12:37,040 --> 00:12:41,180
let me put this in context of a request

00:12:38,990 --> 00:12:46,010
response cycle this is on the back end

00:12:41,180 --> 00:12:48,230
so request comes in it goes through

00:12:46,010 --> 00:12:50,150
router gets routed to an action the

00:12:48,230 --> 00:12:54,290
action is handed this view to work with

00:12:50,150 --> 00:12:57,380
it has the option of changing the view

00:12:54,290 --> 00:12:59,170
if it sees fit and fetches the data and

00:12:57,380 --> 00:13:02,300
applies it to the view and that view

00:12:59,170 --> 00:13:05,590
with the data is returned along in the

00:13:02,300 --> 00:13:07,700
response and then rendered on the client

00:13:05,590 --> 00:13:10,640
so this approach would also work with

00:13:07,700 --> 00:13:12,200
collections of data so you're on the

00:13:10,640 --> 00:13:14,210
Left we have a collection and on the

00:13:12,200 --> 00:13:17,270
right we have the same view as before so

00:13:14,210 --> 00:13:19,900
what would the logic look like well

00:13:17,270 --> 00:13:24,530
first we address our view same as before

00:13:19,900 --> 00:13:26,030
we reduce our scope we apply our data

00:13:24,530 --> 00:13:31,460
now this is a little different than

00:13:26,030 --> 00:13:34,310
before apply in this case takes two

00:13:31,460 --> 00:13:35,600
steps because our view represents

00:13:34,310 --> 00:13:36,740
did one piece of data but now we have

00:13:35,600 --> 00:13:40,160
two pieces of data that we're working

00:13:36,740 --> 00:13:42,620
with and so the two steps are one it

00:13:40,160 --> 00:13:44,810
matches so it matches the view structure

00:13:42,620 --> 00:13:47,420
to the data being applied so we have two

00:13:44,810 --> 00:13:50,870
pieces of data to posts and our view now

00:13:47,420 --> 00:13:53,080
reflects two posts once they match we

00:13:50,870 --> 00:13:55,850
can easily map that data into the view

00:13:53,080 --> 00:13:58,640
same as before we match our first piece

00:13:55,850 --> 00:14:00,860
of data to the first post view map it's

00:13:58,640 --> 00:14:05,210
props same thing with a second and we're

00:14:00,860 --> 00:14:07,040
left with a view with its data in place

00:14:05,210 --> 00:14:13,279
it can be returned in a response to the

00:14:07,040 --> 00:14:16,490
client now if you notice the logic

00:14:13,279 --> 00:14:17,960
required to render this view is the same

00:14:16,490 --> 00:14:23,750
logic that we saw before with a single

00:14:17,960 --> 00:14:26,390
piece of data that really points to the

00:14:23,750 --> 00:14:31,870
imperative nature of this via logic that

00:14:26,390 --> 00:14:31,870
we're writing we're not saying exactly

00:14:31,990 --> 00:14:36,680
how this data should be applied we're

00:14:34,850 --> 00:14:40,010
saying it should be applied to this view

00:14:36,680 --> 00:14:41,750
this representation of the data and the

00:14:40,010 --> 00:14:43,130
application process is driven itself by

00:14:41,750 --> 00:14:46,339
the data so we don't have to say

00:14:43,130 --> 00:14:49,880
anything more the data determines the

00:14:46,339 --> 00:14:51,200
result look at one more example so here

00:14:49,880 --> 00:14:54,440
we have a little bit more complex data

00:14:51,200 --> 00:14:56,510
are views changed the post is the same

00:14:54,440 --> 00:14:59,300
but we've added a nested scope

00:14:56,510 --> 00:15:01,670
underneath for comment and it has a

00:14:59,300 --> 00:15:04,700
single prop body our data strange is a

00:15:01,670 --> 00:15:07,490
bit too there's a comments key value

00:15:04,700 --> 00:15:09,980
with an array with the single comment

00:15:07,490 --> 00:15:13,070
represented as a hash so how would we

00:15:09,980 --> 00:15:17,089
apply this well address the view the

00:15:13,070 --> 00:15:19,790
same as before reduce our scope apply

00:15:17,089 --> 00:15:22,880
our data now that gets us halfway there

00:15:19,790 --> 00:15:27,050
we have our post data in place what do

00:15:22,880 --> 00:15:29,030
we do now well we open a block and we

00:15:27,050 --> 00:15:31,730
have the option of doing more with this

00:15:29,030 --> 00:15:33,680
view so to this block is yielded the

00:15:31,730 --> 00:15:37,550
view for the post and it's matching

00:15:33,680 --> 00:15:40,490
piece of data so the post so in this

00:15:37,550 --> 00:15:44,360
block we can do more so we can address

00:15:40,490 --> 00:15:47,560
the view which is our post view we

00:15:44,360 --> 00:15:47,560
reduce resco up to comment

00:15:47,589 --> 00:15:57,529
and we apply our comments and here's the

00:15:53,570 --> 00:16:00,949
result what I find interesting about

00:15:57,529 --> 00:16:03,320
this is that our computation our logic

00:16:00,949 --> 00:16:05,120
actually matches the structure that

00:16:03,320 --> 00:16:07,160
we're applying to which matches the

00:16:05,120 --> 00:16:08,779
structure of our data the structure of

00:16:07,160 --> 00:16:10,190
the state how we're representing our

00:16:08,779 --> 00:16:14,120
state in our application I find that

00:16:10,190 --> 00:16:18,079
interesting so a bit of a recap I want

00:16:14,120 --> 00:16:19,579
to walk through those steps again we

00:16:18,079 --> 00:16:22,339
force the separation between structure

00:16:19,579 --> 00:16:25,130
and logic we've built in knowledge about

00:16:22,339 --> 00:16:27,050
what the view presents and then we've

00:16:25,130 --> 00:16:29,540
let the logic act externally on the view

00:16:27,050 --> 00:16:31,670
to transform it so I think it's

00:16:29,540 --> 00:16:34,730
important to ask what do we gain it's an

00:16:31,670 --> 00:16:38,540
interesting approach but does it really

00:16:34,730 --> 00:16:39,980
get us anywhere so I think it does the

00:16:38,540 --> 00:16:43,639
first thing that it brings to our

00:16:39,980 --> 00:16:46,850
applications is simplicity it brings us

00:16:43,639 --> 00:16:48,800
simplicity in how we understand our

00:16:46,850 --> 00:16:51,829
applications so we're dealing with data

00:16:48,800 --> 00:16:54,230
all the way down we're building our

00:16:51,829 --> 00:16:58,730
views in terms of data the same data

00:16:54,230 --> 00:17:02,959
that we're our backend application logic

00:16:58,730 --> 00:17:05,059
is dealing in terms of brings the

00:17:02,959 --> 00:17:06,709
simplicity and development it's all

00:17:05,059 --> 00:17:08,510
about the hats so what I mean by that is

00:17:06,709 --> 00:17:10,880
when we're developing a web application

00:17:08,510 --> 00:17:12,790
there's a lot of hats that you have to

00:17:10,880 --> 00:17:14,870
wear right there's the front-end

00:17:12,790 --> 00:17:16,370
development there's the back-end

00:17:14,870 --> 00:17:19,990
development if you work in a small team

00:17:16,370 --> 00:17:22,669
you're likely doing a lot of both and

00:17:19,990 --> 00:17:24,740
with this approach because the two are

00:17:22,669 --> 00:17:27,020
completely separated you can work in the

00:17:24,740 --> 00:17:29,570
view space or you can work in the back

00:17:27,020 --> 00:17:31,490
in space and you can think about one

00:17:29,570 --> 00:17:33,919
thing at a time but also put it in

00:17:31,490 --> 00:17:39,110
context of the data that you're working

00:17:33,919 --> 00:17:40,160
with I'd say it brings simplicity in the

00:17:39,110 --> 00:17:43,130
maintenance of our applications as well

00:17:40,160 --> 00:17:45,770
so what's interesting is this opens the

00:17:43,130 --> 00:17:48,169
door to independently refactor the front

00:17:45,770 --> 00:17:50,630
end and back ends of our application so

00:17:48,169 --> 00:17:54,710
let's say for instance that we no longer

00:17:50,630 --> 00:17:56,419
want to our view no longer shows a list

00:17:54,710 --> 00:17:58,880
of all the posts and instead we want to

00:17:56,419 --> 00:17:59,900
show a list of all of the posts and the

00:17:58,880 --> 00:18:02,840
author of

00:17:59,900 --> 00:18:06,170
posts we can do that we can completely

00:18:02,840 --> 00:18:08,900
change the view we can say don't show

00:18:06,170 --> 00:18:10,580
the body share the author instead our

00:18:08,900 --> 00:18:15,140
back-end logic doesn't have to be

00:18:10,580 --> 00:18:16,850
changed doesn't have to do anything same

00:18:15,140 --> 00:18:19,940
thing if we wanted to restructure our

00:18:16,850 --> 00:18:22,070
back and logic because both front-end

00:18:19,940 --> 00:18:23,870
and back-end or described in terms of

00:18:22,070 --> 00:18:25,130
this common data model the only time

00:18:23,870 --> 00:18:27,530
that you have to change both it's when

00:18:25,130 --> 00:18:31,250
the data model changes I think that's a

00:18:27,530 --> 00:18:36,710
bit more than just a refactor but

00:18:31,250 --> 00:18:38,120
perhaps the most interesting problem

00:18:36,710 --> 00:18:41,960
that this solves is it gives us a way to

00:18:38,120 --> 00:18:43,580
do live updating views not only live

00:18:41,960 --> 00:18:46,460
updating views but live updating views

00:18:43,580 --> 00:18:49,190
in a traditional web application so with

00:18:46,460 --> 00:18:51,680
the client being only concerned with you

00:18:49,190 --> 00:18:56,300
I and the backend concerned with

00:18:51,680 --> 00:19:00,640
application logic and state and we can

00:18:56,300 --> 00:19:03,500
do this without writing any JavaScript

00:19:00,640 --> 00:19:06,470
so this is all driven by our back-end

00:19:03,500 --> 00:19:15,020
applications so i want to show you an

00:19:06,470 --> 00:19:19,060
example let's see what's the shortcut to

00:19:15,020 --> 00:19:19,060
mirror command

00:19:21,530 --> 00:19:24,340
nope

00:19:31,270 --> 00:19:34,380
mirrored displays

00:19:35,990 --> 00:19:43,040
okay so here have an application we have

00:19:39,340 --> 00:19:47,350
our vent window here we have the same

00:19:43,040 --> 00:19:47,350
view that we were walking through before

00:19:48,250 --> 00:19:57,770
ok we have either represents a post

00:19:51,100 --> 00:20:03,530
we're presenting a title in a body we

00:19:57,770 --> 00:20:05,500
have our routes we have a route that the

00:20:03,530 --> 00:20:08,210
get route for our posts so it's the

00:20:05,500 --> 00:20:12,620
restful index action for our posts

00:20:08,210 --> 00:20:15,520
resource here we're grabbing our data

00:20:12,620 --> 00:20:21,080
from our database and then here's the

00:20:15,520 --> 00:20:23,500
application to the view so same logic as

00:20:21,080 --> 00:20:26,600
we saw before with the one exception

00:20:23,500 --> 00:20:29,360
this call to subscribe now what this is

00:20:26,600 --> 00:20:30,980
saying is not only render this data in

00:20:29,360 --> 00:20:33,800
this view but subscribe it to future

00:20:30,980 --> 00:20:36,020
updates so when I say this data has

00:20:33,800 --> 00:20:43,690
changed reflect those changes in the

00:20:36,020 --> 00:20:43,690
front end we start the server up

00:20:52,669 --> 00:21:02,600
so we can see that here so we view

00:20:57,710 --> 00:21:04,100
source here we have our post scope their

00:21:02,600 --> 00:21:08,029
props and data representing the body or

00:21:04,100 --> 00:21:12,440
with the with the data back to our code

00:21:08,029 --> 00:21:15,619
we can look at our create action for our

00:21:12,440 --> 00:21:18,139
post here we're inserting a post into

00:21:15,619 --> 00:21:20,809
our database and then we're reef etching

00:21:18,139 --> 00:21:22,879
those posts and then applying them to

00:21:20,809 --> 00:21:25,369
the post scope now it's a little

00:21:22,879 --> 00:21:27,739
different right instead of saying view

00:21:25,369 --> 00:21:29,779
we're saying you I so this is saying

00:21:27,739 --> 00:21:32,239
send the data back down to any

00:21:29,779 --> 00:21:38,720
subscribed client any client that wants

00:21:32,239 --> 00:21:42,049
to receive these updates push it down so

00:21:38,720 --> 00:21:45,859
let's see this in action so here we have

00:21:42,049 --> 00:21:49,669
our post list I'm going to open up HTTP

00:21:45,859 --> 00:21:56,289
client going into sunday post to this

00:21:49,669 --> 00:21:56,289
route let's just say this

00:22:01,740 --> 00:22:07,559
and we send it and we see it it's

00:22:05,610 --> 00:22:10,080
rendered on the on the client in real

00:22:07,559 --> 00:22:13,440
time as soon as that application state

00:22:10,080 --> 00:22:17,690
change if we refresh this it's still

00:22:13,440 --> 00:22:17,690
there it's returned in the first request

00:22:18,710 --> 00:22:22,610
so let's let's add an action here so

00:22:21,390 --> 00:22:26,420
that we can really see what's going on

00:22:22,610 --> 00:22:26,420
let's add one for delete

00:22:53,920 --> 00:22:57,420
don't make fun of my them through

00:22:57,660 --> 00:23:00,850
alright so I think I did that right now

00:22:59,680 --> 00:23:03,010
you'll notice there's a bit of

00:23:00,850 --> 00:23:04,210
duplication here where you know we're

00:23:03,010 --> 00:23:06,160
saying this a lot we're fetching our

00:23:04,210 --> 00:23:08,080
data and saying apply to the post scope

00:23:06,160 --> 00:23:12,880
I think that's a secondary problem to

00:23:08,080 --> 00:23:19,210
solve here that is relatively easy so

00:23:12,880 --> 00:23:22,860
let's see if this works so let's delete

00:23:19,210 --> 00:23:26,770
the one we first we just created first

00:23:22,860 --> 00:23:29,680
so there it is it's gone if we refresh

00:23:26,770 --> 00:23:36,270
we see that it was in fact removed from

00:23:29,680 --> 00:23:36,270
the back end oops we can create more and

00:23:37,980 --> 00:23:47,590
we can delete at will alright so it

00:23:42,790 --> 00:23:49,830
seems to be working you switch back away

00:23:47,590 --> 00:23:49,830
from your

00:23:52,730 --> 00:23:57,400
somebody needs to invent a good way of

00:23:54,919 --> 00:23:57,400
doing this

00:24:06,190 --> 00:24:12,490
so let's dive into exactly what's

00:24:07,960 --> 00:24:14,740
happening here this is interesting so

00:24:12,490 --> 00:24:16,809
the way we do this is that these view

00:24:14,740 --> 00:24:19,629
transformations are view logic when we

00:24:16,809 --> 00:24:22,509
say view dot scope whatever dot apply

00:24:19,629 --> 00:24:25,330
our data we can represent that as data

00:24:22,509 --> 00:24:29,620
itself so here we see our logic and

00:24:25,330 --> 00:24:31,840
underneath we see what our data is we

00:24:29,620 --> 00:24:33,789
can do this even with more complex logic

00:24:31,840 --> 00:24:35,350
because all of our logic is evaluate on

00:24:33,789 --> 00:24:38,710
the server nothing is evaluated on the

00:24:35,350 --> 00:24:41,259
client we can set up something like this

00:24:38,710 --> 00:24:44,919
where we apply it in the block we make a

00:24:41,259 --> 00:24:47,110
decision to add a class to that view or

00:24:44,919 --> 00:24:49,529
not based on if the data is important

00:24:47,110 --> 00:24:56,039
and this can be represented the same it

00:24:49,529 --> 00:24:58,450
we can represent this as data itself now

00:24:56,039 --> 00:25:00,399
once our view logic is turned into data

00:24:58,450 --> 00:25:06,610
we can push that down to the subscribe

00:25:00,399 --> 00:25:09,100
clients our subscribe client receives

00:25:06,610 --> 00:25:10,210
these instructions and can apply to the

00:25:09,100 --> 00:25:12,909
view that is already rendered on a

00:25:10,210 --> 00:25:14,289
client just as on the back end those

00:25:12,909 --> 00:25:20,409
instructions are applied to the view

00:25:14,289 --> 00:25:22,720
rendering the first time it doesn't

00:25:20,409 --> 00:25:24,610
matter where the view is it doesn't

00:25:22,720 --> 00:25:25,750
matter where the renderer is the thing

00:25:24,610 --> 00:25:28,870
that can interpret these instructions

00:25:25,750 --> 00:25:32,259
and apply them it just works so let's

00:25:28,870 --> 00:25:34,240
look at a flow to try to nail this down

00:25:32,259 --> 00:25:37,539
a little bit more so here we have our

00:25:34,240 --> 00:25:40,509
application on the backend server we

00:25:37,539 --> 00:25:43,539
have our client so a client makes a

00:25:40,509 --> 00:25:47,320
request to our out our app routes it to

00:25:43,539 --> 00:25:49,539
a list function which builds a list of

00:25:47,320 --> 00:25:50,980
posts and pushes it back down through

00:25:49,539 --> 00:25:55,450
the application in the response to the

00:25:50,980 --> 00:25:58,720
client now the client has a view now the

00:25:55,450 --> 00:26:02,559
view subscribes itself to a socket on

00:25:58,720 --> 00:26:05,669
the backend server so that it can be

00:26:02,559 --> 00:26:09,629
aware of updates to come in the future

00:26:05,669 --> 00:26:12,669
so we have a second function update and

00:26:09,629 --> 00:26:16,330
update is called it updates our state

00:26:12,669 --> 00:26:18,690
and the database it issues a rebuild for

00:26:16,330 --> 00:26:18,690
our view

00:26:19,070 --> 00:26:24,380
calls list in other words and those

00:26:22,759 --> 00:26:26,179
transformation instructions are pushed

00:26:24,380 --> 00:26:28,850
down through the socket to our

00:26:26,179 --> 00:26:32,450
subscribed views now there's a middleman

00:26:28,850 --> 00:26:34,100
here of JavaScript library I lied a

00:26:32,450 --> 00:26:35,779
little bit in the beginning you don't

00:26:34,100 --> 00:26:38,539
have to write JavaScript of course is

00:26:35,779 --> 00:26:41,809
JavaScript the renderer here is written

00:26:38,539 --> 00:26:44,179
in JavaScript you ijs it receives these

00:26:41,809 --> 00:26:48,320
instructions and applies them to the

00:26:44,179 --> 00:26:52,129
view where we see the update there's no

00:26:48,320 --> 00:26:53,870
trans compilation of logic from Ruby to

00:26:52,129 --> 00:26:56,450
JavaScript there's nothing like that

00:26:53,870 --> 00:26:58,519
going on it's just representing

00:26:56,450 --> 00:27:06,679
instructions as data and applying them

00:26:58,519 --> 00:27:09,379
somewhere else so this is some of what

00:27:06,679 --> 00:27:12,169
myself and a few others are working on

00:27:09,379 --> 00:27:14,570
these days we've put these concepts to

00:27:12,169 --> 00:27:16,370
work in a web framework called pacquiao

00:27:14,570 --> 00:27:18,200
we push that out a couple years ago

00:27:16,370 --> 00:27:22,940
we've been making some steady progress

00:27:18,200 --> 00:27:26,629
sense really exploring these concepts so

00:27:22,940 --> 00:27:27,830
how do we simplify you know the

00:27:26,629 --> 00:27:30,139
development understanding of our

00:27:27,830 --> 00:27:32,750
applications but then how do we do that

00:27:30,139 --> 00:27:33,590
can we solve these tougher problems that

00:27:32,750 --> 00:27:35,120
right now we're leading to more

00:27:33,590 --> 00:27:38,690
complexity in our applications how can

00:27:35,120 --> 00:27:41,929
we make that simpler so we have another

00:27:38,690 --> 00:27:46,159
version coming out 0.8 and a matter of

00:27:41,929 --> 00:27:49,909
days weeks includes the things that

00:27:46,159 --> 00:27:54,159
you've seen here except for the live

00:27:49,909 --> 00:27:56,629
updating views live views our prototype

00:27:54,159 --> 00:28:00,200
the demo that you just saw is using this

00:27:56,629 --> 00:28:02,149
prototype we hope to push that out at

00:28:00,200 --> 00:28:03,980
the end of the year we're really excited

00:28:02,149 --> 00:28:07,639
about it we think it brings another

00:28:03,980 --> 00:28:08,840
option to the table for building in some

00:28:07,639 --> 00:28:14,769
of these more advanced behaviors into

00:28:08,840 --> 00:28:17,629
our applications and one point 0 is

00:28:14,769 --> 00:28:19,340
planned we don't have a date on it but

00:28:17,629 --> 00:28:23,000
we really want to interested in bringing

00:28:19,340 --> 00:28:25,700
these concepts to the rails world and to

00:28:23,000 --> 00:28:28,669
the sinatra world when we started

00:28:25,700 --> 00:28:30,830
building this 3 years ago we kind of

00:28:28,669 --> 00:28:32,179
sandbox our selves and said let's build

00:28:30,830 --> 00:28:33,740
a full stack

00:28:32,179 --> 00:28:35,570
work so that we don't have any

00:28:33,740 --> 00:28:36,619
constraints so that we can really get to

00:28:35,570 --> 00:28:38,840
the heart of this problem and try to

00:28:36,619 --> 00:28:41,450
solve it so we're finally now through

00:28:38,840 --> 00:28:43,879
that and see a way in which we can apply

00:28:41,450 --> 00:28:46,970
these concepts and other frameworks and

00:28:43,879 --> 00:28:50,149
other stocks we've been in an effort to

00:28:46,970 --> 00:28:52,159
be as inclusive as possible we really

00:28:50,149 --> 00:28:56,899
want to bring this to the stack that

00:28:52,159 --> 00:28:58,730
you're familiar with I hope this has

00:28:56,899 --> 00:29:02,019
been interesting I hope maybe you've

00:28:58,730 --> 00:29:04,369
learned something I i hope that this

00:29:02,019 --> 00:29:07,580
starts a conversation i find these

00:29:04,369 --> 00:29:11,869
concepts interesting i would love to

00:29:07,580 --> 00:29:13,909
talk I'd love your feedback like I said

00:29:11,869 --> 00:29:15,860
I'd love to chat I'll be here today

00:29:13,909 --> 00:29:18,619
tomorrow you can find me on Twitter I

00:29:15,860 --> 00:29:21,169
sometimes blog at not magic org I

00:29:18,619 --> 00:29:23,529
appreciate the time and enjoy the rest

00:29:21,169 --> 00:29:23,529
of the conference

00:29:27,320 --> 00:29:29,380
you

00:29:35,940 --> 00:29:38,000

YouTube URL: https://www.youtube.com/watch?v=VfSQFZSY8Rw


