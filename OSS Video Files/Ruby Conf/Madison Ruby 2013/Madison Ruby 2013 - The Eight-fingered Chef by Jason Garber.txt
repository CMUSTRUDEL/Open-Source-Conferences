Title: Madison Ruby 2013 - The Eight-fingered Chef by Jason Garber
Publication date: 2020-01-28
Playlist: Madison Ruby 2013
Description: 
	Chef is a great tool for managing a vast and complicated server infrastructure, but what if you have fewer servers than fingers? What if you just want a simple little box to host a Rack app? Maybe a staging server to match or a CI server? With little or no prior knowledge of Chef, you can set up a server fairly quickly if you know the right way to set up your kitchen. (They don't make it obvious. I've lost a few fingers in the process.) We'll walk through the basics of Vagrant, Chef-solo, Knife-solo, using community cookbooks, and writing your own simple cookbooks.

Help us caption & translate this video!

http://amara.org/v/FG7X/
Captions: 
	00:00:13,430 --> 00:00:18,300
I'm a software engineer and co-founder

00:00:16,230 --> 00:00:20,730
at prompt works in Philadelphia but

00:00:18,300 --> 00:00:23,099
happy to be in Madison today it's I was

00:00:20,730 --> 00:00:25,740
enjoy coming to madison prompted works

00:00:23,099 --> 00:00:27,900
is a ruby and javascript consultancy in

00:00:25,740 --> 00:00:30,060
philadelphia the three principles we've

00:00:27,900 --> 00:00:33,270
been working with rails since about two

00:00:30,060 --> 00:00:35,640
thousand five and one of the things that

00:00:33,270 --> 00:00:38,670
we do for our clients among other things

00:00:35,640 --> 00:00:40,019
you know building rails applications and

00:00:38,670 --> 00:00:43,019
other ruby applications is

00:00:40,019 --> 00:00:44,640
infrastructure automation how many

00:00:43,019 --> 00:00:47,159
people know what I mean when I say

00:00:44,640 --> 00:00:49,290
infrastructure automation see a show of

00:00:47,159 --> 00:00:51,750
hands yeah a lot of people now how many

00:00:49,290 --> 00:00:54,030
people have automated infrastructure

00:00:51,750 --> 00:01:00,930
yeah about the same people that's great

00:00:54,030 --> 00:01:03,299
well so maybe you won't get a lot out of

00:01:00,930 --> 00:01:04,739
this talk or maybe you will find new

00:01:03,299 --> 00:01:08,369
ways to apply the stuff that you already

00:01:04,739 --> 00:01:09,570
know but for those of you don't know you

00:01:08,369 --> 00:01:12,240
know many of us in the room or

00:01:09,570 --> 00:01:15,659
developers often we write web

00:01:12,240 --> 00:01:17,490
applications and we finish a web

00:01:15,659 --> 00:01:19,890
application and we don't hand it to the

00:01:17,490 --> 00:01:23,880
client as a zip file you know they need

00:01:19,890 --> 00:01:26,789
it put somewhere then you know maybe you

00:01:23,880 --> 00:01:30,030
have the web app but it has a database

00:01:26,789 --> 00:01:33,060
behind it maybe it has a search engine

00:01:30,030 --> 00:01:36,539
behind it maybe we need some caching or

00:01:33,060 --> 00:01:38,909
a queue that does background worker

00:01:36,539 --> 00:01:40,530
processes or maybe we're not just

00:01:38,909 --> 00:01:43,560
deploying a single web app but we're

00:01:40,530 --> 00:01:45,509
deploying you know something that has

00:01:43,560 --> 00:01:47,520
service-oriented architecture so it

00:01:45,509 --> 00:01:51,359
actually has all these working pieces

00:01:47,520 --> 00:01:53,820
all this is infrastructure behind a web

00:01:51,359 --> 00:01:55,170
application and when you have

00:01:53,820 --> 00:01:58,950
infrastructure you need some way of

00:01:55,170 --> 00:02:00,749
managing it and so of course we are web

00:01:58,950 --> 00:02:02,749
developers or developers in general we

00:02:00,749 --> 00:02:05,789
like to automate all the things and so

00:02:02,749 --> 00:02:07,409
automating your infrastructure is just

00:02:05,789 --> 00:02:09,539
that gone are the days when you would

00:02:07,409 --> 00:02:12,980
rack up a server and you take a couple

00:02:09,539 --> 00:02:15,420
days to install things and then you'd

00:02:12,980 --> 00:02:17,730
you know perform upgrades periodically

00:02:15,420 --> 00:02:20,819
and you dutifully back it up in case

00:02:17,730 --> 00:02:23,690
something happened now of course we have

00:02:20,819 --> 00:02:23,690
cloud computing

00:02:25,380 --> 00:02:31,150
resources are virtualized you can spin

00:02:28,540 --> 00:02:36,100
up 100 servers in an instant you can

00:02:31,150 --> 00:02:38,170
tear them all down servers can be

00:02:36,100 --> 00:02:42,580
disposable you can just treat them as a

00:02:38,170 --> 00:02:44,860
commodity so if we're treating servers

00:02:42,580 --> 00:02:47,530
as disposable we sure better not be

00:02:44,860 --> 00:02:49,180
setting them up by hand because that'll

00:02:47,530 --> 00:02:51,280
just be a big waste of time so what we

00:02:49,180 --> 00:02:55,230
want is for our entire infrastructure to

00:02:51,280 --> 00:02:58,060
be represented as code so that we can

00:02:55,230 --> 00:03:00,430
check it into our repository we can fork

00:02:58,060 --> 00:03:03,670
it branch it merge it all the things we

00:03:00,430 --> 00:03:05,610
do to code blame you can get blame your

00:03:03,670 --> 00:03:09,070
your infrastructure find out who did

00:03:05,610 --> 00:03:10,690
something so we want our infrastructure

00:03:09,070 --> 00:03:13,090
to be represented as code and chef is

00:03:10,690 --> 00:03:18,430
one of the many tools that lets you do

00:03:13,090 --> 00:03:22,030
that and then chef you you declare what

00:03:18,430 --> 00:03:25,570
you want on your node you don't describe

00:03:22,030 --> 00:03:27,490
how to to get there necessarily but you

00:03:25,570 --> 00:03:28,900
say this is I want to serve and I want

00:03:27,490 --> 00:03:32,590
to have all these things all these

00:03:28,900 --> 00:03:35,140
services running and files in place and

00:03:32,590 --> 00:03:39,640
then you run these recipes over and over

00:03:35,140 --> 00:03:43,060
and over so that the node converges into

00:03:39,640 --> 00:03:45,370
the state you want and there are many

00:03:43,060 --> 00:03:46,990
other tools besides chef I'm talking

00:03:45,370 --> 00:03:49,360
about Chef this morning but there's

00:03:46,990 --> 00:03:51,430
there's puppet there's ansible a number

00:03:49,360 --> 00:03:53,050
of others doctor is looking really

00:03:51,430 --> 00:03:55,180
interesting and promising I'll be

00:03:53,050 --> 00:03:58,900
interested to see how that plays out

00:03:55,180 --> 00:04:00,670
through this fall so I don't really care

00:03:58,900 --> 00:04:02,920
it's not that as important what you're

00:04:00,670 --> 00:04:05,470
using so long as you are automating your

00:04:02,920 --> 00:04:09,550
infrastructure so that your entire

00:04:05,470 --> 00:04:12,070
business can be represented in your

00:04:09,550 --> 00:04:16,080
repository maybe a backup of your data

00:04:12,070 --> 00:04:18,640
and of course your bare metal servers

00:04:16,080 --> 00:04:23,440
when your infrastructure is code it's

00:04:18,640 --> 00:04:27,010
portable you can change platforms and

00:04:23,440 --> 00:04:28,740
providers spin up VMs on your laptop you

00:04:27,010 --> 00:04:31,990
can run tests against them which is

00:04:28,740 --> 00:04:36,190
wonderful and you save a lot of time and

00:04:31,990 --> 00:04:37,750
worry now chef is a huge topic it's

00:04:36,190 --> 00:04:41,650
really big and complex and

00:04:37,750 --> 00:04:43,300
I've long been intimidated by it but

00:04:41,650 --> 00:04:46,660
what I want to present this morning is

00:04:43,300 --> 00:04:48,820
the tiny part of it that you need to

00:04:46,660 --> 00:04:51,990
know if you just have you know one or

00:04:48,820 --> 00:04:54,160
two or five servers and you don't need

00:04:51,990 --> 00:04:57,630
some centralized management you don't

00:04:54,160 --> 00:05:00,910
need a lot of overhead or orchestration

00:04:57,630 --> 00:05:03,100
so that's what I want to present first

00:05:00,910 --> 00:05:05,680
I'll go through some terminology and

00:05:03,100 --> 00:05:08,770
kind of how chef works because you need

00:05:05,680 --> 00:05:12,370
to know that as background chef recipes

00:05:08,770 --> 00:05:15,630
describe resources packages you want

00:05:12,370 --> 00:05:19,900
installed users files all these things

00:05:15,630 --> 00:05:22,390
you described with this Ruby dsl those

00:05:19,900 --> 00:05:25,030
recipes are organized into cookbooks

00:05:22,390 --> 00:05:28,120
that the cooking theme carries you

00:05:25,030 --> 00:05:30,280
through out so you can have multiple

00:05:28,120 --> 00:05:32,920
recipes in a cookbook cookbook scan or

00:05:30,280 --> 00:05:36,310
don't have to be in roles and then you

00:05:32,920 --> 00:05:39,400
can apply roles to nodes so this is my

00:05:36,310 --> 00:05:40,900
database server this is my web server so

00:05:39,400 --> 00:05:45,280
let's say we have multiple environments

00:05:40,900 --> 00:05:48,430
QA CI production and they have different

00:05:45,280 --> 00:05:50,560
numbers of servers in them nodes and

00:05:48,430 --> 00:05:52,720
some are web app nodes and some our

00:05:50,560 --> 00:05:55,150
database nodes the web app nodes they

00:05:52,720 --> 00:05:57,040
get recipes from the engine X cookbook

00:05:55,150 --> 00:06:00,040
let's say and from a ruby cookbook just

00:05:57,040 --> 00:06:04,030
as an example and in the database role

00:06:00,040 --> 00:06:06,190
you'd have maybe a postgresql cookbook

00:06:04,030 --> 00:06:08,950
and and if you're familiar with the

00:06:06,190 --> 00:06:13,300
backup gem there's a cookbook for that

00:06:08,950 --> 00:06:17,730
and then these get applied to various

00:06:13,300 --> 00:06:20,740
servers so to manage all this you're

00:06:17,730 --> 00:06:23,800
typically going to need a chef server so

00:06:20,740 --> 00:06:25,900
you have your workstation has your

00:06:23,800 --> 00:06:29,980
cookbooks on it and it has a tool called

00:06:25,900 --> 00:06:31,930
knife and so typically you write those

00:06:29,980 --> 00:06:34,090
cookbooks on your computer and then you

00:06:31,930 --> 00:06:36,250
use knife to push those cookbooks to the

00:06:34,090 --> 00:06:39,400
chef server you use knife to tell the

00:06:36,250 --> 00:06:42,010
nodes to update themselves they pull the

00:06:39,400 --> 00:06:45,430
cookbooks from the chef server and then

00:06:42,010 --> 00:06:49,600
they run themselves they converge those

00:06:45,430 --> 00:06:50,840
nodes and that's how working with a chef

00:06:49,600 --> 00:06:53,330
server works

00:06:50,840 --> 00:06:56,060
and that's a lot and it's and it's

00:06:53,330 --> 00:06:58,850
really intimidating if especially if you

00:06:56,060 --> 00:07:01,820
don't really need all that overhead so

00:06:58,850 --> 00:07:04,180
thankfully there's chef solo which does

00:07:01,820 --> 00:07:09,169
away with chef server and all it does is

00:07:04,180 --> 00:07:11,930
run the cookbooks on the nodes where

00:07:09,169 --> 00:07:13,580
they are so you need to get chef so on

00:07:11,930 --> 00:07:16,610
those nodes and get the cookbooks on

00:07:13,580 --> 00:07:21,010
those knows so you probably like yeah SC

00:07:16,610 --> 00:07:24,110
peeing right no automate all the things

00:07:21,010 --> 00:07:26,840
friend of mine Matt Shafer whom you

00:07:24,110 --> 00:07:29,900
probably know wrote knife solo and all

00:07:26,840 --> 00:07:33,410
it does to plug into knife and it pushes

00:07:29,900 --> 00:07:36,350
the cookbooks to the the nodes and gets

00:07:33,410 --> 00:07:40,880
them all set up with Chef solo and that

00:07:36,350 --> 00:07:43,400
makes the process much simpler so if you

00:07:40,880 --> 00:07:45,520
have a server or two that's all you

00:07:43,400 --> 00:07:47,630
really need to reap the benefits of

00:07:45,520 --> 00:07:51,710
infrastructure automation knife solo

00:07:47,630 --> 00:07:58,430
chef solo it keeps things pretty pretty

00:07:51,710 --> 00:08:02,450
simple so last week I was working at one

00:07:58,430 --> 00:08:04,100
of our clients and they were discussing

00:08:02,450 --> 00:08:06,349
at length whether they should use chef

00:08:04,100 --> 00:08:08,810
or puppet and while they were discussing

00:08:06,349 --> 00:08:11,720
I just went ahead and did what they

00:08:08,810 --> 00:08:13,580
wanted in chef and it took you know not

00:08:11,720 --> 00:08:19,090
too long so what they needed was a

00:08:13,580 --> 00:08:25,160
Jenkins server so let's go out to

00:08:19,090 --> 00:08:27,020
hopefully see there we go so you know

00:08:25,160 --> 00:08:29,389
the first thing you probably do is look

00:08:27,020 --> 00:08:32,510
in an OPS code community Opscode is the

00:08:29,389 --> 00:08:35,330
company that wrote chef and open sourced

00:08:32,510 --> 00:08:39,880
it so we go and have a look at see if

00:08:35,330 --> 00:08:43,520
there is a cookbook for Jenkins and

00:08:39,880 --> 00:08:46,279
indeed there is and let's see if it's

00:08:43,520 --> 00:08:49,970
fairly recent februari first 2013 that's

00:08:46,279 --> 00:08:54,130
great there's a link to it on github we

00:08:49,970 --> 00:08:57,440
can have a look at the readme says it's

00:08:54,130 --> 00:08:59,510
works on Ubuntu gives us the attributes

00:08:57,440 --> 00:09:01,520
attributes are little Flags you can set

00:08:59,510 --> 00:09:04,940
or their attributes you pass to the

00:09:01,520 --> 00:09:06,260
recipe that's well there on the

00:09:04,940 --> 00:09:10,430
and the recipes can look at those

00:09:06,260 --> 00:09:12,620
attributes and choose to do things based

00:09:10,430 --> 00:09:14,300
on those and then it describes the

00:09:12,620 --> 00:09:18,460
recipes that this cookbook makes

00:09:14,300 --> 00:09:21,130
available to us we're going to use the

00:09:18,460 --> 00:09:23,600
default the server recipe actually

00:09:21,130 --> 00:09:27,440
there's a metadata file you can think of

00:09:23,600 --> 00:09:29,060
this like a gem spec file describes you

00:09:27,440 --> 00:09:30,320
know the name of the cookbook and what

00:09:29,060 --> 00:09:33,700
version it's on and all the things it

00:09:30,320 --> 00:09:36,410
depends on so that's great there's a

00:09:33,700 --> 00:09:42,920
recipes folder that contains all the

00:09:36,410 --> 00:09:45,110
recipes and then there's a folder that

00:09:42,920 --> 00:09:48,650
has all the default attributes for those

00:09:45,110 --> 00:09:50,900
recipes and they're just you know simple

00:09:48,650 --> 00:09:53,680
all this is just Ruby so you can do

00:09:50,900 --> 00:09:57,940
anything you can do in in Ruby in chef

00:09:53,680 --> 00:10:05,990
so this cook will collect looks good

00:09:57,940 --> 00:10:08,420
let's let's use it switch over to that

00:10:05,990 --> 00:10:12,320
one alright so the first thing I'm going

00:10:08,420 --> 00:10:17,120
to do is just make a empty directory CD

00:10:12,320 --> 00:10:18,830
over to the right spot and check my

00:10:17,120 --> 00:10:22,850
vagrant version so let me talk a bit

00:10:18,830 --> 00:10:24,770
about vagrant vagrant is a tool for

00:10:22,850 --> 00:10:27,290
managing virtual machines on your

00:10:24,770 --> 00:10:29,600
computer from the command line you'll

00:10:27,290 --> 00:10:34,040
need something like virtual box or any

00:10:29,600 --> 00:10:36,440
other back-end vm provider so you go out

00:10:34,040 --> 00:10:39,710
you download vagrant and you have it on

00:10:36,440 --> 00:10:41,270
your command line and there's a couple

00:10:39,710 --> 00:10:48,610
plugins that I want to install for

00:10:41,270 --> 00:10:51,530
vagrant the first one is the vb guests

00:10:48,610 --> 00:10:54,380
plugin don't worry too much about what

00:10:51,530 --> 00:10:56,210
it does VMs maybe need some guest

00:10:54,380 --> 00:10:59,810
software sometime this just keeps it up

00:10:56,210 --> 00:11:03,530
to date I find it works best when I have

00:10:59,810 --> 00:11:05,120
that managing the guest software for me

00:11:03,530 --> 00:11:09,350
and then I'm also going to do a little

00:11:05,120 --> 00:11:11,180
plug in for doing snapshots so that can

00:11:09,350 --> 00:11:15,230
easily just take a snapshot at various

00:11:11,180 --> 00:11:18,410
points so you know chef recipes are

00:11:15,230 --> 00:11:19,970
supposed to be idempotent but

00:11:18,410 --> 00:11:22,279
as you're developing them you want to

00:11:19,970 --> 00:11:25,519
jump back to a previous known good state

00:11:22,279 --> 00:11:29,779
so snapshotting is fantastic okay so now

00:11:25,519 --> 00:11:33,350
I'm ready to make my directory CD into

00:11:29,779 --> 00:11:35,750
Madison Jenkins and the first thing I

00:11:33,350 --> 00:11:40,329
need to do is to initialize my vm with

00:11:35,750 --> 00:11:45,529
fragrant so vagrant knit and I've got a

00:11:40,329 --> 00:11:48,259
i'm specifying what base box i want to

00:11:45,529 --> 00:11:50,810
use found of vanilla box on the internet

00:11:48,259 --> 00:11:53,180
that doesn't contain some of the stuff

00:11:50,810 --> 00:11:55,100
that vagrant boxes often have we want

00:11:53,180 --> 00:11:58,029
this to be as close to the bare metal as

00:11:55,100 --> 00:12:00,199
possible similar to what you'd get from

00:11:58,029 --> 00:12:06,379
amazon or rec space or something like

00:12:00,199 --> 00:12:08,959
that right so i ran vagrant knit that

00:12:06,379 --> 00:12:12,620
created a vagrant file right there and

00:12:08,959 --> 00:12:15,920
now i'm going to open up my vagrant file

00:12:12,620 --> 00:12:18,110
take a look at it this is just an API

00:12:15,920 --> 00:12:19,970
for specifying how the how the box

00:12:18,110 --> 00:12:25,939
should come up first thing I'm going to

00:12:19,970 --> 00:12:30,949
do is give it a hostname Madison Jenkins

00:12:25,939 --> 00:12:33,050
vagrant okay oops and then I'm going to

00:12:30,949 --> 00:12:34,819
change there's port mapping that's going

00:12:33,050 --> 00:12:39,399
to happen Jenkins always runs on port

00:12:34,819 --> 00:12:44,589
8080 so I'm going to make sure that Oh

00:12:39,399 --> 00:12:48,110
8080 is mapped to a DAT my local system

00:12:44,589 --> 00:12:51,110
yep and then down at the bottom of this

00:12:48,110 --> 00:12:53,329
vagrant file is some provisioning for

00:12:51,110 --> 00:12:54,439
chef solo I don't actually want to use

00:12:53,329 --> 00:12:56,990
it in this case because we're going to

00:12:54,439 --> 00:12:58,220
use knife solo but it's there it would

00:12:56,990 --> 00:13:02,839
run the chef's all this stuff

00:12:58,220 --> 00:13:05,540
automatically if I were using that all

00:13:02,839 --> 00:13:07,279
right great so next thing is to bring up

00:13:05,540 --> 00:13:13,220
the vm so I'm just going to do vagrant

00:13:07,279 --> 00:13:17,110
up and once that vm is booted it's doing

00:13:13,220 --> 00:13:20,779
that vagrant guest additions installer

00:13:17,110 --> 00:13:23,990
getting that all up to date and now now

00:13:20,779 --> 00:13:26,860
can just SSH in with vagrant SSH and I'm

00:13:23,990 --> 00:13:31,910
in the box and it's just a plain old

00:13:26,860 --> 00:13:32,329
going to 1204 box what I want to be able

00:13:31,910 --> 00:13:34,100
to do

00:13:32,329 --> 00:13:37,689
not have to use the vagrant SSH command

00:13:34,100 --> 00:13:41,329
so I'm going to look at the SH config

00:13:37,689 --> 00:13:42,499
provide a hostname here too so SH config

00:13:41,329 --> 00:13:45,799
if you're not familiar with it it can

00:13:42,499 --> 00:13:48,350
specify the hostname the user identity

00:13:45,799 --> 00:13:56,689
file all that kind of thing now if i

00:13:48,350 --> 00:14:00,850
append this to dot SH config then all I

00:13:56,689 --> 00:14:11,239
have to do is do SSH vagrant and I'm in

00:14:00,850 --> 00:14:15,379
ok and then my next step is going to be

00:14:11,239 --> 00:14:19,189
adding some gems to this project so I

00:14:15,379 --> 00:14:20,629
open my gemfile the gems i want the

00:14:19,189 --> 00:14:23,540
first one I'm going to have is brooke

00:14:20,629 --> 00:14:27,619
shelf bookshelf is kind of like bundler

00:14:23,540 --> 00:14:29,059
but for cookbooks the next thing is

00:14:27,619 --> 00:14:37,069
going to be knife sola which we already

00:14:29,059 --> 00:14:41,589
talked about and now let's run bundler

00:14:37,069 --> 00:14:44,119
of course to generate bundle and then

00:14:41,589 --> 00:14:46,399
let's look at what knife so offers us

00:14:44,119 --> 00:14:49,369
here the commands for knife solo I'm

00:14:46,399 --> 00:14:51,589
going to run the in it and I'm going to

00:14:49,369 --> 00:14:55,790
let it know that I want to use brook

00:14:51,589 --> 00:14:58,069
shelf so now it created a bunch of empty

00:14:55,790 --> 00:15:00,949
directories and it also created a Brooks

00:14:58,069 --> 00:15:03,079
file for us let's look at that Burke's

00:15:00,949 --> 00:15:06,069
file right now it's just empty but we're

00:15:03,079 --> 00:15:10,579
going to add the cookbooks that we want

00:15:06,069 --> 00:15:12,319
first the apt cookbook also the Jenkins

00:15:10,579 --> 00:15:17,059
cookbook and that 1 i'm going to pull

00:15:12,319 --> 00:15:19,850
straight from github they haven't they

00:15:17,059 --> 00:15:21,619
haven't pushed the latest you know i

00:15:19,850 --> 00:15:23,809
want to use head from from github and

00:15:21,619 --> 00:15:28,970
not the one from the opscode community

00:15:23,809 --> 00:15:32,029
site so made our books file and then

00:15:28,970 --> 00:15:34,489
just like running bundle we run Burke's

00:15:32,029 --> 00:15:36,799
install and that pulls down the

00:15:34,489 --> 00:15:41,449
cookbooks to our local machine and gets

00:15:36,799 --> 00:15:43,879
the right versions then we can I slowly

00:15:41,449 --> 00:15:46,040
prepare vagrants and what knife solo

00:15:43,879 --> 00:15:48,500
prepare does is it copies

00:15:46,040 --> 00:15:51,680
well it puts chef solo on the machine

00:15:48,500 --> 00:15:53,990
and that's that's it it also generates a

00:15:51,680 --> 00:15:58,279
node config for us in the nodes

00:15:53,990 --> 00:16:03,860
directory so I now have a JSON file that

00:15:58,279 --> 00:16:05,029
tells tells it what what to run all

00:16:03,860 --> 00:16:08,480
right so and then I'm going to snapshot

00:16:05,029 --> 00:16:11,600
this because after I've prepared it it's

00:16:08,480 --> 00:16:14,870
it's a spot that I want to jump back to

00:16:11,600 --> 00:16:16,279
again so I quick took a snapshot if I

00:16:14,870 --> 00:16:23,569
opened up VirtualBox there'd be a

00:16:16,279 --> 00:16:28,190
snapshot in the list what's next it's

00:16:23,569 --> 00:16:31,639
time to look at that node file i

00:16:28,190 --> 00:16:34,310
generated so it's an empty run list so

00:16:31,639 --> 00:16:36,500
if I were to cook this node right now it

00:16:34,310 --> 00:16:39,819
wouldn't do anything so I want to add

00:16:36,500 --> 00:16:44,269
first the apt recipe and then the

00:16:39,819 --> 00:16:48,589
Jenkins server recipe tell those to run

00:16:44,269 --> 00:16:51,190
and so you know the berks file tells it

00:16:48,589 --> 00:16:55,639
what to what to have in its in its

00:16:51,190 --> 00:16:57,949
library but then telling which recipes

00:16:55,639 --> 00:17:00,589
to run is the job of the node file in

00:16:57,949 --> 00:17:02,720
this case and so now we're ready to

00:17:00,589 --> 00:17:06,970
we're ready to cook so I'm going to

00:17:02,720 --> 00:17:10,189
knife solo cook this vagrant node and

00:17:06,970 --> 00:17:12,199
it's going to copy those cookbooks up to

00:17:10,189 --> 00:17:14,000
the the node and then it's going to

00:17:12,199 --> 00:17:16,640
converge that node basically going to

00:17:14,000 --> 00:17:19,520
run all the recipes we specified it's

00:17:16,640 --> 00:17:22,339
Jenkins so Java it's got to install the

00:17:19,520 --> 00:17:27,309
JDK it takes a little while and the

00:17:22,339 --> 00:17:31,130
Jenkins package wait for it to finish up

00:17:27,309 --> 00:17:33,440
and it gives you some nice output lets

00:17:31,130 --> 00:17:38,720
you know what's going on all right it's

00:17:33,440 --> 00:17:43,070
done so now if we hop over to web

00:17:38,720 --> 00:17:44,900
browser if i go to localhost 8080 we

00:17:43,070 --> 00:17:47,390
should cross her fingers yep we see

00:17:44,900 --> 00:17:49,370
Jenkins so I've got Jenkins up and

00:17:47,390 --> 00:17:51,830
running on a virtual machine that was

00:17:49,370 --> 00:17:54,549
really easy of course we could have just

00:17:51,830 --> 00:17:57,980
you know SSH into a machine and done

00:17:54,549 --> 00:17:59,480
apt-get install Jenkins so maybe not

00:17:57,980 --> 00:18:03,180
that impressive yet

00:17:59,480 --> 00:18:04,890
but but at least we we have it somewhere

00:18:03,180 --> 00:18:07,980
and we could just didn't read me file

00:18:04,890 --> 00:18:11,070
say run you know knife solo cook and

00:18:07,980 --> 00:18:12,330
you've got another Jenkins node now

00:18:11,070 --> 00:18:15,360
let's do something a little bit harder

00:18:12,330 --> 00:18:18,990
let's say we have a rails app that we

00:18:15,360 --> 00:18:23,040
want to deploy to a server so I need a

00:18:18,990 --> 00:18:29,250
new kitchen for that app Madison sample

00:18:23,040 --> 00:18:33,420
app let's say and now see into that

00:18:29,250 --> 00:18:37,020
directory and same steps as we did

00:18:33,420 --> 00:18:42,360
before vagrant in it going to use my

00:18:37,020 --> 00:18:47,270
vanilla box again and work on the gem of

00:18:42,360 --> 00:18:50,910
the vagrant file put in the host name

00:18:47,270 --> 00:18:57,059
doesn't need a host name but yeah

00:18:50,910 --> 00:18:59,250
hostname Madison sample yeah okay and

00:18:57,059 --> 00:19:02,760
then I also want to forward the port

00:18:59,250 --> 00:19:08,429
this time I'm going to use 80 81 Ford

00:19:02,760 --> 00:19:11,010
port 80 to 80 81 on my local so vagrant

00:19:08,429 --> 00:19:14,040
file now we run fake it up to bring our

00:19:11,010 --> 00:19:21,090
virtual machine up it's mapping port 80

00:19:14,040 --> 00:19:26,630
to 80 81 doing all that good stuff once

00:19:21,090 --> 00:19:33,380
it finishes bundle knits editor gem file

00:19:26,630 --> 00:19:37,830
now let's see we want Brooke shelf again

00:19:33,380 --> 00:19:40,760
we want knife solo again that's it for

00:19:37,830 --> 00:19:44,780
now and then of course we bundle and

00:19:40,760 --> 00:19:49,200
again with knife solo in its work shelf

00:19:44,780 --> 00:19:52,650
dot it creates our kitchen with our

00:19:49,200 --> 00:19:56,190
Brooks file editor Brooks file and now

00:19:52,650 --> 00:19:59,070
we want since we're using chef solo we

00:19:56,190 --> 00:20:02,610
need a special cookbook called chef solo

00:19:59,070 --> 00:20:04,620
search normally a recipe is able to call

00:20:02,610 --> 00:20:08,790
out to a chef server and ask about other

00:20:04,620 --> 00:20:10,560
nodes in the environment so it can find

00:20:08,790 --> 00:20:12,930
things to talk to you and configure

00:20:10,560 --> 00:20:15,590
itself we don't have that so

00:20:12,930 --> 00:20:19,170
buddies made a cookbook that sort of

00:20:15,590 --> 00:20:21,210
makes it work fix it enough to get us by

00:20:19,170 --> 00:20:24,690
then we're going to use a rails

00:20:21,210 --> 00:20:26,610
application cookbook but I made a little

00:20:24,690 --> 00:20:33,870
fork of it so we're going to use my fork

00:20:26,610 --> 00:20:38,630
from github occasion okay of course run

00:20:33,870 --> 00:20:41,130
Burke's again copy down those cookbooks

00:20:38,630 --> 00:20:43,380
let's have a look at the Brooks file

00:20:41,130 --> 00:20:46,800
lock just like a gem file lock Brooke

00:20:43,380 --> 00:20:48,330
shelf keeps blocked versions of all the

00:20:46,800 --> 00:20:54,060
cookbooks so that we can do this over

00:20:48,330 --> 00:20:56,460
and over and not have undefined results

00:20:54,060 --> 00:20:58,200
from from different versions and then

00:20:56,460 --> 00:21:00,090
I'm going to this time instead of

00:20:58,200 --> 00:21:02,370
working directly with a node file I'm

00:21:00,090 --> 00:21:04,500
going to copy in a role that I've

00:21:02,370 --> 00:21:07,230
created I'll show you what it is but

00:21:04,500 --> 00:21:11,760
just didn't want to have to type it all

00:21:07,230 --> 00:21:13,380
out for you so we now run list we've got

00:21:11,760 --> 00:21:15,840
the chefs will search and we also have

00:21:13,380 --> 00:21:19,070
our rails application recipes I'm also

00:21:15,840 --> 00:21:22,310
providing a couple of attributes to the

00:21:19,070 --> 00:21:24,240
to the rails application cookbook

00:21:22,310 --> 00:21:26,280
specifying the name of the app and

00:21:24,240 --> 00:21:32,390
specifying the repository it should pull

00:21:26,280 --> 00:21:37,980
from pretty basic so quit that and now

00:21:32,390 --> 00:21:39,330
time to I've solo prepare and this time

00:21:37,980 --> 00:21:41,610
I'm going to give it a run list and I'm

00:21:39,330 --> 00:21:45,510
going to say that it should use the app

00:21:41,610 --> 00:21:48,330
role so now its bootstrapping chef which

00:21:45,510 --> 00:21:55,080
means it's putting chef solo on that

00:21:48,330 --> 00:21:56,460
virtual machine and then let's take a

00:21:55,080 --> 00:21:59,940
look at what what happened now we have a

00:21:56,460 --> 00:22:02,040
Rolls file and we have a vagrant Jason

00:21:59,940 --> 00:22:04,890
file from the preparation if we look at

00:22:02,040 --> 00:22:06,330
that Jason node file all its all the

00:22:04,890 --> 00:22:11,220
only thing in its run list is to run

00:22:06,330 --> 00:22:12,600
that app role and the app role you saw

00:22:11,220 --> 00:22:17,280
it before but that's what it's referring

00:22:12,600 --> 00:22:18,930
to so last thing we should probably do

00:22:17,280 --> 00:22:20,310
since it's all prepared and maybe we'll

00:22:18,930 --> 00:22:25,179
want to jump back is take a quick

00:22:20,310 --> 00:22:29,059
snapshot take prepared

00:22:25,179 --> 00:22:34,610
so all right and then comes the fun bit

00:22:29,059 --> 00:22:38,840
where we cook favorite so again copying

00:22:34,610 --> 00:22:40,759
the cookbooks up running them it's doing

00:22:38,840 --> 00:22:45,529
everything from setting up our postgres

00:22:40,759 --> 00:22:49,519
server deploying you know doing a git

00:22:45,529 --> 00:22:51,529
clone doing a bundle install its pre

00:22:49,519 --> 00:22:56,049
compiling our assets for us all those

00:22:51,529 --> 00:22:57,889
things are part of this big cookbook

00:22:56,049 --> 00:23:01,159
Yeah right now it's doing the bundle

00:22:57,889 --> 00:23:06,490
install takes a little bit but when it's

00:23:01,159 --> 00:23:13,759
finished we should have a running app on

00:23:06,490 --> 00:23:15,320
port 80 81 81 and we do so here's our

00:23:13,759 --> 00:23:18,409
sample app something I just grabbed from

00:23:15,320 --> 00:23:22,669
github it's running on our VM which is

00:23:18,409 --> 00:23:24,830
fantastic but obviously we don't just

00:23:22,669 --> 00:23:26,210
want things running on our VM so let's

00:23:24,830 --> 00:23:30,350
put it on a server out on the real

00:23:26,210 --> 00:23:35,059
internet somewhere first I need to copy

00:23:30,350 --> 00:23:37,759
over an API key i'm going to use digital

00:23:35,059 --> 00:23:41,110
oceans so i'm copying my api key over to

00:23:37,759 --> 00:23:43,820
a local knife file now i need to add the

00:23:41,110 --> 00:23:52,779
gem for digital ocean that plugs into

00:23:43,820 --> 00:23:52,779
knife ocean and let's see

00:23:56,930 --> 00:24:03,170
course the next step is to bundle that

00:24:00,830 --> 00:24:06,410
was quick and then then we have to

00:24:03,170 --> 00:24:08,540
configure this digital ocean plug-in or

00:24:06,410 --> 00:24:11,270
we have to find out the parameters we

00:24:08,540 --> 00:24:13,430
want to pass to it so first of all we're

00:24:11,270 --> 00:24:15,890
going to list our region's they just

00:24:13,430 --> 00:24:18,080
opened up in New York to which is ID for

00:24:15,890 --> 00:24:22,520
that's what I want to use digital ocean

00:24:18,080 --> 00:24:25,490
sighs list I'm cheap I want to go with

00:24:22,520 --> 00:24:34,820
the five dollars a month one so the 512

00:24:25,490 --> 00:24:37,220
Meg will be fine I d66 H key list here's

00:24:34,820 --> 00:24:41,030
an sht I've already uploaded so it's

00:24:37,220 --> 00:24:47,180
going to put that on the the machine for

00:24:41,030 --> 00:24:49,340
me which lists global this will list out

00:24:47,180 --> 00:24:51,410
all the images that digital ocean makes

00:24:49,340 --> 00:24:54,710
available for droplets I'm going to find

00:24:51,410 --> 00:24:59,230
the boon to one that I want looks like

00:24:54,710 --> 00:25:01,970
it's yep the bottom one there ocean

00:24:59,230 --> 00:25:04,760
droplet create now I'm going to actually

00:25:01,970 --> 00:25:12,610
create the server with digital ocean I

00:25:04,760 --> 00:25:25,040
have to give it a name sample app to

00:25:12,610 --> 00:25:27,500
location 64 size is 66 904 and I'm

00:25:25,040 --> 00:25:29,960
giving it a the solo flag so I'm telling

00:25:27,500 --> 00:25:32,390
it go ahead and create that droplet on

00:25:29,960 --> 00:25:35,390
digital ocean and when you're done run

00:25:32,390 --> 00:25:37,040
knife solo and then I'm going to give it

00:25:35,390 --> 00:25:41,710
a run list just like I did before to

00:25:37,040 --> 00:25:44,780
tell it to run the the Apple so now its

00:25:41,710 --> 00:25:46,520
spitting up that droplet droplet on

00:25:44,780 --> 00:25:48,470
digital ocean and it's going to use

00:25:46,520 --> 00:25:50,450
knife sola to cook just like we did

00:25:48,470 --> 00:25:54,190
before on a vm but it's happening out

00:25:50,450 --> 00:25:54,190
there on the real internet

00:25:57,120 --> 00:26:05,190
it's all hands off it's wonderful of

00:26:02,760 --> 00:26:08,670
course it's not always this easy in real

00:26:05,190 --> 00:26:10,620
life you know lots of hair-pulling that

00:26:08,670 --> 00:26:12,180
happens but but the great thing is

00:26:10,620 --> 00:26:15,470
especially when you're working with vm

00:26:12,180 --> 00:26:20,100
you just snap it out back and try again

00:26:15,470 --> 00:26:26,790
so that's it should be running now let's

00:26:20,100 --> 00:26:29,790
go to it on digital shin hey so it's a

00:26:26,790 --> 00:26:33,960
public IP it starts with 192 but but

00:26:29,790 --> 00:26:36,780
it's a real digitalocean server and it's

00:26:33,960 --> 00:26:39,600
live on the Internet that's great so

00:26:36,780 --> 00:26:41,490
that's the quick run through of how to

00:26:39,600 --> 00:26:43,650
use knife solo and chef solo that's

00:26:41,490 --> 00:26:50,040
certainly not everything there is to

00:26:43,650 --> 00:26:52,140
know about it let's see and like I say

00:26:50,040 --> 00:26:54,780
it's it's not that easy all the time but

00:26:52,140 --> 00:26:58,170
but it's better than configuring by hand

00:26:54,780 --> 00:27:01,020
and not knowing where where you're at a

00:26:58,170 --> 00:27:04,710
few more resources for learning chef

00:27:01,020 --> 00:27:08,929
learning about knife learn chef com site

00:27:04,710 --> 00:27:11,820
maintained by Opscode chef conf 2013

00:27:08,929 --> 00:27:16,380
youtube videos are all online on YouTube

00:27:11,820 --> 00:27:19,679
very good resources my buddy Trotter

00:27:16,380 --> 00:27:21,000
cash in one of the presenters a lot of

00:27:19,679 --> 00:27:24,000
great information there there's also a

00:27:21,000 --> 00:27:27,660
podcast called the food fight show which

00:27:24,000 --> 00:27:31,590
is a wonderful resource as well to learn

00:27:27,660 --> 00:27:35,130
about chef so thanks very much for

00:27:31,590 --> 00:27:38,570
listening and watching you can here's my

00:27:35,130 --> 00:27:42,110
email address a handle on twitter

00:27:38,570 --> 00:27:42,110
alright thanks very much

00:27:51,130 --> 00:27:53,190

YouTube URL: https://www.youtube.com/watch?v=eaI3OrSFdlM


