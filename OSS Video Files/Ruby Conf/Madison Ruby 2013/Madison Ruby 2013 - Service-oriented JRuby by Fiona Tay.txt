Title: Madison Ruby 2013 - Service-oriented JRuby by Fiona Tay
Publication date: 2020-01-28
Playlist: Madison Ruby 2013
Description: 
	Rails is the right choice for building a user facing web site, but Ruby, as a flexible language, has also proven to be a good choice to develop various services. At Airbnb, we have split up our monorail application into multiple internal services, mostly on MRI with a select few services on JRuby. A service-oriented approach combined with JRuby has afforded us high performance and access to Java libraries for complex operations. From the perspective of a former MRI'er, I'll discuss concrete examples of how to realize the benefits of the JRuby stack as well as the complexity of managing various Rubies in production.

Help us caption & translate this video!

http://amara.org/v/FG7K/
Captions: 
	00:00:12,120 --> 00:00:17,650
so I'm gonna be talking about services

00:00:14,800 --> 00:00:19,630
at Airbnb and just before I like talk

00:00:17,650 --> 00:00:21,730
more about what we've been doing at

00:00:19,630 --> 00:00:23,980
services at Airbnb I want to take the

00:00:21,730 --> 00:00:26,680
time to introduce myself and my company

00:00:23,980 --> 00:00:29,500
I recently realized that not everyone

00:00:26,680 --> 00:00:31,480
has heard of Airbnb and I should explain

00:00:29,500 --> 00:00:36,040
it so that my domain examples makes

00:00:31,480 --> 00:00:38,470
sense so let me just read out the

00:00:36,040 --> 00:00:40,720
official feel like everyone is a

00:00:38,470 --> 00:00:43,120
community marketplace to list discover

00:00:40,720 --> 00:00:45,550
and book unique accommodations around

00:00:43,120 --> 00:00:47,409
the world so what this means is that

00:00:45,550 --> 00:00:50,229
people from all around the world rent

00:00:47,409 --> 00:00:53,409
out everything from their spare room to

00:00:50,229 --> 00:00:56,710
the apartment to di yurts and you can

00:00:53,409 --> 00:00:58,690
rent from them so this is the slide show

00:00:56,710 --> 00:01:03,010
of places around the world that you can

00:00:58,690 --> 00:01:04,420
rent on Airbnb from a castle to a TV I'm

00:01:03,010 --> 00:01:06,909
kind of sad to say that I haven't been

00:01:04,420 --> 00:01:15,040
to any of these places but it's on my

00:01:06,909 --> 00:01:17,619
to-do list so when we like to dog food

00:01:15,040 --> 00:01:19,750
at my company so when I was coming to

00:01:17,619 --> 00:01:22,649
medicine I thought I should find a place

00:01:19,750 --> 00:01:25,770
to stay with somebody from medicine and

00:01:22,649 --> 00:01:28,960
haider lots of holes for in medicine and

00:01:25,770 --> 00:01:30,969
I'm staying with two nice Wisconsinites

00:01:28,960 --> 00:01:33,219
and I found out this actually

00:01:30,969 --> 00:01:39,430
Wisconsinites and not with Connie ins on

00:01:33,219 --> 00:01:43,299
Wikipedia um and I'm saying bakery which

00:01:39,430 --> 00:01:47,320
is quite a nice neighborhood is all

00:01:43,299 --> 00:01:50,560
right so now I'm going to talk about the

00:01:47,320 --> 00:01:52,990
monorail are how we've been dealing with

00:01:50,560 --> 00:01:57,130
our architecture of our rails

00:01:52,990 --> 00:01:59,619
application here at Airbnb so in the

00:01:57,130 --> 00:02:04,179
beginning about five years ago a team

00:01:59,619 --> 00:02:06,070
started building an M so when we first

00:02:04,179 --> 00:02:08,800
launched the company we didn't know

00:02:06,070 --> 00:02:12,640
whether anyone would even want to rent

00:02:08,800 --> 00:02:15,160
out their spaces on on online I mean

00:02:12,640 --> 00:02:17,140
like it's a crazy idea right and the

00:02:15,160 --> 00:02:19,960
number one priority at that point is to

00:02:17,140 --> 00:02:22,210
determine if there's a match between the

00:02:19,960 --> 00:02:23,880
put out and the market and you know you

00:02:22,210 --> 00:02:25,540
don't want to build a very nice

00:02:23,880 --> 00:02:30,430
producted

00:02:25,540 --> 00:02:31,689
nobody really cares about and in the

00:02:30,430 --> 00:02:34,420
beginning the priority number one is

00:02:31,689 --> 00:02:35,859
quick iteration and for their preference

00:02:34,420 --> 00:02:38,590
I would I think all of us agree that

00:02:35,859 --> 00:02:42,099
Rios is great the separation of concerns

00:02:38,590 --> 00:02:44,519
and you know we have separations between

00:02:42,099 --> 00:02:46,810
the model-view-controller we have

00:02:44,519 --> 00:02:49,120
database migrations all the stuff that

00:02:46,810 --> 00:02:51,189
real provides us for free and I know

00:02:49,120 --> 00:02:53,439
that some of you guys have seen thousand

00:02:51,189 --> 00:02:56,469
line models so by just on the edge read

00:02:53,439 --> 00:02:59,739
am pretty serious about this because PHP

00:02:56,469 --> 00:03:02,260
i found this online principles of every

00:02:59,739 --> 00:03:06,010
c4p developers and it's bacon to our

00:03:02,260 --> 00:03:07,599
rails framework which is great so and

00:03:06,010 --> 00:03:11,500
you know this is where rails really

00:03:07,599 --> 00:03:14,889
shines or should i say this is why

00:03:11,500 --> 00:03:21,099
rubies on rails really shine pun

00:03:14,889 --> 00:03:23,560
intended so over time the story goes is

00:03:21,099 --> 00:03:25,689
that your app gains traction and you

00:03:23,560 --> 00:03:27,489
start building on top of that maybe you

00:03:25,689 --> 00:03:29,650
want to allow people to pay online

00:03:27,489 --> 00:03:31,900
instead of having to do a cash

00:03:29,650 --> 00:03:34,540
transaction imperfect on or maybe you

00:03:31,900 --> 00:03:37,510
want to allow people to block other

00:03:34,540 --> 00:03:39,669
users all sorts of other things you want

00:03:37,510 --> 00:03:41,829
to implement and for a while it could be

00:03:39,669 --> 00:03:44,440
as simple as adding more controller and

00:03:41,829 --> 00:03:47,560
small models just another caboose on

00:03:44,440 --> 00:03:49,510
your rails engine and this works what

00:03:47,560 --> 00:03:52,510
well for a while but maybe it gets

00:03:49,510 --> 00:03:54,340
harder and harder and one day you'll

00:03:52,510 --> 00:03:57,129
find that the system becomes so complex

00:03:54,340 --> 00:04:00,609
then you can't figure out what's going

00:03:57,129 --> 00:04:02,500
on in your application and you make a

00:04:00,609 --> 00:04:04,659
change and it break something somewhere

00:04:02,500 --> 00:04:07,269
else in your slide somewhere else in in

00:04:04,659 --> 00:04:09,819
your application and you know the

00:04:07,269 --> 00:04:11,790
previous graph where as time goes on you

00:04:09,819 --> 00:04:14,109
find out where that gets more popular

00:04:11,790 --> 00:04:16,120
it's a grudge that just basically goes

00:04:14,109 --> 00:04:19,680
up and to the right and that can also

00:04:16,120 --> 00:04:22,199
express how complexity grows over time

00:04:19,680 --> 00:04:24,280
so as your business becomes successful

00:04:22,199 --> 00:04:26,500
complexity also tends to grow and

00:04:24,280 --> 00:04:30,460
there's a limit to how much stuff that

00:04:26,500 --> 00:04:32,919
can fit in my hand even all of us the

00:04:30,460 --> 00:04:35,169
smallest of us can't fit like 10,000

00:04:32,919 --> 00:04:38,969
lines of code in our head or if you can

00:04:35,169 --> 00:04:38,969
can you contact me i like to recruit you

00:04:42,180 --> 00:04:48,160
so you know the term monorail which we

00:04:45,940 --> 00:04:50,650
use very cutely to refer to a monolithic

00:04:48,160 --> 00:04:52,510
rails application it might sound cute

00:04:50,650 --> 00:04:56,260
but we shouldn't forget that stands for

00:04:52,510 --> 00:04:58,600
monolithic rails application and the

00:04:56,260 --> 00:05:01,000
dictionary definition of mono lift is a

00:04:58,600 --> 00:05:04,020
large stone structure essentially

00:05:01,000 --> 00:05:09,040
something which is difficult to change

00:05:04,020 --> 00:05:11,050
and you know there's a there's some key

00:05:09,040 --> 00:05:13,900
reasons for not liking a huge rails

00:05:11,050 --> 00:05:16,990
application it's a difficult conceptual

00:05:13,900 --> 00:05:20,230
model it's when you get to hundreds or

00:05:16,990 --> 00:05:21,880
thousands of of models or 100,000 line

00:05:20,230 --> 00:05:25,030
files it's hard to figure out where

00:05:21,880 --> 00:05:27,400
exactly he'll change even my code editor

00:05:25,030 --> 00:05:29,500
when I type command ship Oh to open the

00:05:27,400 --> 00:05:32,430
file it takes longer to find the right

00:05:29,500 --> 00:05:34,690
file when it's a bigger application and

00:05:32,430 --> 00:05:37,660
the second part is upgrading is

00:05:34,690 --> 00:05:42,400
difficult when has anyone of you guys

00:05:37,660 --> 00:05:46,420
ever put off a rails 3 upgrade yeah in

00:05:42,400 --> 00:05:47,920
the house with hundreds of thousands of

00:05:46,420 --> 00:05:50,590
lines of code is hard to figure out

00:05:47,920 --> 00:05:52,080
where exactly you need to change things

00:05:50,590 --> 00:05:54,930
to upgrade it for the next version

00:05:52,080 --> 00:05:58,750
instead of all it's easy to break stuff

00:05:54,930 --> 00:06:00,460
so i just thought i would do some

00:05:58,750 --> 00:06:02,440
statistics to figure out why i feel like

00:06:00,460 --> 00:06:04,390
the build is always read on bigger teams

00:06:02,440 --> 00:06:07,420
and i think this is a really cool

00:06:04,390 --> 00:06:09,340
calculation of why this happens so this

00:06:07,420 --> 00:06:10,930
calculation is based on you know if I

00:06:09,340 --> 00:06:13,210
break the bill one percent of the time

00:06:10,930 --> 00:06:16,780
how long does it take before the build

00:06:13,210 --> 00:06:19,030
is red so if you have only one person on

00:06:16,780 --> 00:06:21,400
the team it takes a hundred days or four

00:06:19,030 --> 00:06:23,440
months before the build is broken if you

00:06:21,400 --> 00:06:25,240
have 10 p-4 let's take ten days which is

00:06:23,440 --> 00:06:27,760
two weeks but if you have hundred people

00:06:25,240 --> 00:06:30,580
on your team it's likely that it's

00:06:27,760 --> 00:06:36,370
probably average that the bill will

00:06:30,580 --> 00:06:39,810
break you know every day and and and I

00:06:36,370 --> 00:06:39,810
can't remember where I saw this but

00:06:41,930 --> 00:06:53,030
yeah yeah this is a treatable moment but

00:06:49,340 --> 00:06:54,350
um yeah I saw this i'm on stackoverflow

00:06:53,030 --> 00:06:56,389
a long time ago and i thought it was

00:06:54,350 --> 00:06:58,669
just so appropriate because you change

00:06:56,389 --> 00:06:59,870
some behavior in your system and you

00:06:58,669 --> 00:07:02,000
think it's not going to make a

00:06:59,870 --> 00:07:03,139
difference it's change the

00:07:02,000 --> 00:07:04,430
implementation you don't think it's

00:07:03,139 --> 00:07:06,590
going to make a difference but then you

00:07:04,430 --> 00:07:14,900
you know it up and then it becomes

00:07:06,590 --> 00:07:17,930
a refactor so over the past few years at

00:07:14,900 --> 00:07:21,979
Airbnb we have successfully extracted

00:07:17,930 --> 00:07:24,320
several service HTTP HTTP services from

00:07:21,979 --> 00:07:25,610
our monolithic rails application and I

00:07:24,320 --> 00:07:27,500
wanted to share some of the mistakes

00:07:25,610 --> 00:07:32,150
that will and lessons that we have

00:07:27,500 --> 00:07:34,849
learned from this so what is the service

00:07:32,150 --> 00:07:36,889
oriented architecture it's a set of

00:07:34,849 --> 00:07:38,660
discrete pieces of software that provide

00:07:36,889 --> 00:07:42,169
application functionality and services

00:07:38,660 --> 00:07:44,570
usually accessible over HTTP or another

00:07:42,169 --> 00:07:46,849
definition is a system made of several

00:07:44,570 --> 00:07:48,440
composed of hearts called services that

00:07:46,849 --> 00:07:51,199
work together to make a single

00:07:48,440 --> 00:07:53,360
application so you might at this point

00:07:51,199 --> 00:07:55,340
you might be asking when you want to

00:07:53,360 --> 00:07:57,110
decompose a really large messy rails

00:07:55,340 --> 00:08:00,229
application is that the only solution

00:07:57,110 --> 00:08:01,940
that you could have and this is a chart

00:08:00,229 --> 00:08:04,460
that I actually found from somebody i

00:08:01,940 --> 00:08:06,770
used to work with that kind of diagrams

00:08:04,460 --> 00:08:09,320
where along the spectrum you can be in

00:08:06,770 --> 00:08:11,630
terms of decoupling all the way from

00:08:09,320 --> 00:08:13,460
monolithic rails application to a full

00:08:11,630 --> 00:08:18,259
fledge HTTP service oriented

00:08:13,460 --> 00:08:20,870
architecture all over the site and in

00:08:18,259 --> 00:08:23,030
the middle some key like middle points

00:08:20,870 --> 00:08:25,880
would be like extracting share behavior

00:08:23,030 --> 00:08:28,720
into modules gems or rails engines and

00:08:25,880 --> 00:08:30,740
I've actually used quite a few of these

00:08:28,720 --> 00:08:34,219
techniques in a pot so I've actually

00:08:30,740 --> 00:08:37,789
used gems and engines and it's not a

00:08:34,219 --> 00:08:39,409
rigid dichotomy between monolithic rails

00:08:37,789 --> 00:08:41,690
application service or in the

00:08:39,409 --> 00:08:44,810
architecture there's a spectrum of ways

00:08:41,690 --> 00:08:46,640
to separate concerns but for the

00:08:44,810 --> 00:08:48,920
challenges that we have which are being

00:08:46,640 --> 00:08:51,589
able to scale and to iterate quickly and

00:08:48,920 --> 00:08:53,630
deploy quickly those problems aren't

00:08:51,589 --> 00:08:55,400
solved easily by any of the other

00:08:53,630 --> 00:08:57,590
solutions so if

00:08:55,400 --> 00:09:01,250
look back y'all it is almost everything

00:08:57,590 --> 00:09:05,210
up to like 12 like five is restricted to

00:09:01,250 --> 00:09:06,950
the same like technology stack and if

00:09:05,210 --> 00:09:09,950
you're interested in learning how to use

00:09:06,950 --> 00:09:11,390
gems or engines to separate out share

00:09:09,950 --> 00:09:17,900
behaviors I really recommend this

00:09:11,390 --> 00:09:24,320
presentation by by another person who I

00:09:17,900 --> 00:09:29,720
used to work with I it's really good so

00:09:24,320 --> 00:09:31,340
a common expression of how of why

00:09:29,720 --> 00:09:34,130
specialization leads to efficiency

00:09:31,340 --> 00:09:36,260
discrete system lead to specialization

00:09:34,130 --> 00:09:38,870
and specialization leads to efficiency

00:09:36,260 --> 00:09:41,680
and this sounds like applicable to

00:09:38,870 --> 00:09:44,090
humans but it's also applicable to

00:09:41,680 --> 00:09:46,760
applicable to software systems as well

00:09:44,090 --> 00:09:48,380
and I would like to say that a corollary

00:09:46,760 --> 00:09:50,630
to this is that the more discreet the

00:09:48,380 --> 00:09:53,810
system the more specialization and forth

00:09:50,630 --> 00:09:57,400
by using services instead of engines you

00:09:53,810 --> 00:10:00,280
can customize a technology stack and

00:09:57,400 --> 00:10:02,690
allow it to become more specialized at

00:10:00,280 --> 00:10:06,080
whichever task that's which increases

00:10:02,690 --> 00:10:11,300
efficiency so for us what this looks

00:10:06,080 --> 00:10:15,890
like currently is that our rails API

00:10:11,300 --> 00:10:18,260
which talks to different services to get

00:10:15,890 --> 00:10:21,380
information so imagine when you first

00:10:18,260 --> 00:10:24,020
look for places they on airbnb com you

00:10:21,380 --> 00:10:29,060
say I want to come to medicine in August

00:10:24,020 --> 00:10:31,810
and so the first thing that the app has

00:10:29,060 --> 00:10:34,580
to do is to look for all the different

00:10:31,810 --> 00:10:36,170
all the different listings in medicine

00:10:34,580 --> 00:10:38,990
and the surrounding areas and figure out

00:10:36,170 --> 00:10:41,180
which is the best for you and then after

00:10:38,990 --> 00:10:44,150
that it needs to determine which of

00:10:41,180 --> 00:10:47,330
these listings are available by

00:10:44,150 --> 00:10:49,160
searching the calendars which the hosts

00:10:47,330 --> 00:10:51,020
have provided which days that are

00:10:49,160 --> 00:10:54,070
available to host and then the third

00:10:51,020 --> 00:10:58,400
element is a pricing service which

00:10:54,070 --> 00:11:02,170
dynamically prices your stay just like

00:10:58,400 --> 00:11:05,390
how airlines do it so each of these

00:11:02,170 --> 00:11:08,480
services have really different concerns

00:11:05,390 --> 00:11:09,290
and really different things to optimize

00:11:08,480 --> 00:11:11,329
for

00:11:09,290 --> 00:11:13,660
for search one of the things that we are

00:11:11,329 --> 00:11:16,639
figuring out is how to best rank

00:11:13,660 --> 00:11:18,589
listings for a given person or for

00:11:16,639 --> 00:11:21,769
calendar service one of the big problems

00:11:18,589 --> 00:11:25,130
is scaling because there are a lot of

00:11:21,769 --> 00:11:26,889
listings and calendar information can be

00:11:25,130 --> 00:11:30,709
provided in a variety of different ways

00:11:26,889 --> 00:11:32,300
similarly for pricing so one radio I

00:11:30,709 --> 00:11:34,399
would summarize this is that by

00:11:32,300 --> 00:11:37,190
extracting out into a service you get

00:11:34,399 --> 00:11:39,949
the benefits of quick iterations and you

00:11:37,190 --> 00:11:42,860
also get the benefits of getting flex

00:11:39,949 --> 00:11:47,720
getting very fine-grain scaling so for

00:11:42,860 --> 00:11:50,029
instance if if there are lots of hits to

00:11:47,720 --> 00:11:55,149
our search for some reason we can easily

00:11:50,029 --> 00:11:55,149
scale up that service without having to

00:11:55,839 --> 00:12:01,699
handle the performance inefficiencies on

00:11:58,339 --> 00:12:03,259
that part of the system and you know

00:12:01,699 --> 00:12:05,630
this is a this is a really important

00:12:03,259 --> 00:12:09,230
question for Airbnb SB scale off-site

00:12:05,630 --> 00:12:11,240
and we just hit 7 million users and we

00:12:09,230 --> 00:12:13,760
start asking ourselves what's the best

00:12:11,240 --> 00:12:16,370
technology for application logic for

00:12:13,760 --> 00:12:18,860
user interface and for persistence it

00:12:16,370 --> 00:12:20,569
might not be important on day one but

00:12:18,860 --> 00:12:23,630
these questions start becoming more

00:12:20,569 --> 00:12:26,389
important I mean rails is definitely go

00:12:23,630 --> 00:12:27,620
for first for up to a point outside it's

00:12:26,389 --> 00:12:29,420
been working well for the past five

00:12:27,620 --> 00:12:32,540
years but what happens when you're up to

00:12:29,420 --> 00:12:34,100
10 million users another point I want to

00:12:32,540 --> 00:12:36,470
note about this is that answer to this

00:12:34,100 --> 00:12:39,139
question isn't standing idle better

00:12:36,470 --> 00:12:40,430
technologies come along right now rails

00:12:39,139 --> 00:12:43,370
might be real server side rendering

00:12:40,430 --> 00:12:45,670
might be the best solution for serving a

00:12:43,370 --> 00:12:49,310
user interface but in the future

00:12:45,670 --> 00:12:53,029
javascript client side apps might become

00:12:49,310 --> 00:12:56,510
a better solution and the next question

00:12:53,029 --> 00:12:58,790
is if its rails is the best technology

00:12:56,510 --> 00:13:00,470
for any of these domains and if that's

00:12:58,790 --> 00:13:01,730
the case if that's not the case what

00:13:00,470 --> 00:13:04,089
cause are we paying by develop

00:13:01,730 --> 00:13:06,860
continuing to develop within monorail or

00:13:04,089 --> 00:13:08,660
another color is what does it mean to

00:13:06,860 --> 00:13:12,889
ask this question even if we determine

00:13:08,660 --> 00:13:15,050
that Scala might be a better technology

00:13:12,889 --> 00:13:17,029
for a calendar service how can we put

00:13:15,050 --> 00:13:20,449
how can we use these learnings in a

00:13:17,029 --> 00:13:22,430
rails application and by exploiting our

00:13:20,449 --> 00:13:22,860
application out to different HTTP

00:13:22,430 --> 00:13:25,140
service

00:13:22,860 --> 00:13:26,790
we have managed to leave reach a variety

00:13:25,140 --> 00:13:30,030
of different services for different

00:13:26,790 --> 00:13:33,900
parts of our application for instance ah

00:13:30,030 --> 00:13:37,350
now for a mobile website we use a note

00:13:33,900 --> 00:13:39,420
so a node server to serve the request

00:13:37,350 --> 00:13:41,190
which actually improved our application

00:13:39,420 --> 00:13:44,610
performance by five times which is

00:13:41,190 --> 00:13:51,150
really important for mobile and we and

00:13:44,610 --> 00:13:53,760
we also use rails java java and JRuby so

00:13:51,150 --> 00:13:56,340
for project that's been adding models

00:13:53,760 --> 00:13:57,840
controllers and presenters or what have

00:13:56,340 --> 00:13:59,850
you be for the past few years it's

00:13:57,840 --> 00:14:02,250
actually really hard to safely extract

00:13:59,850 --> 00:14:04,590
these logic from all over the

00:14:02,250 --> 00:14:06,150
application and I want to talk about

00:14:04,590 --> 00:14:08,930
some of the best practices we should

00:14:06,150 --> 00:14:11,820
have developed over the past few months

00:14:08,930 --> 00:14:16,070
so I kind of took a leaf from somebody

00:14:11,820 --> 00:14:16,070
else's talk yesterday of coding myself

00:14:16,730 --> 00:14:19,920
extracting the first service out of

00:14:18,570 --> 00:14:23,010
motorway always always the hardest

00:14:19,920 --> 00:14:26,640
because there are so many challenges of

00:14:23,010 --> 00:14:28,770
safely extracting it and give developing

00:14:26,640 --> 00:14:33,480
deployment tools and establishing best

00:14:28,770 --> 00:14:36,960
practices for development so this kind

00:14:33,480 --> 00:14:39,960
of sounds like a really obvious thing

00:14:36,960 --> 00:14:42,330
but you know test testing at different

00:14:39,960 --> 00:14:44,250
levels of the stack is really good

00:14:42,330 --> 00:14:45,810
advice for safe refactoring especially

00:14:44,250 --> 00:14:50,220
if we are doing big things like moving

00:14:45,810 --> 00:14:53,460
it to a different service so for us what

00:14:50,220 --> 00:14:55,710
this looks what how this works in our

00:14:53,460 --> 00:14:57,210
service extraction workflow which sounds

00:14:55,710 --> 00:14:59,190
something which sounds like something

00:14:57,210 --> 00:15:00,600
from chemistry class to be honest and

00:14:59,190 --> 00:15:02,990
it's actually something that came up

00:15:00,600 --> 00:15:05,250
with we didn't talk about it like that

00:15:02,990 --> 00:15:06,600
so we determine the domain to be

00:15:05,250 --> 00:15:08,550
abstract 0 which is usually kind of

00:15:06,600 --> 00:15:09,570
non-trivial because the epic behaviors

00:15:08,550 --> 00:15:11,940
usually scattered throughout the

00:15:09,570 --> 00:15:14,100
application we extract the logic into

00:15:11,940 --> 00:15:17,880
service objects and convert it into an

00:15:14,100 --> 00:15:20,880
external service so as an example which

00:15:17,880 --> 00:15:23,400
is an example is a user authentication

00:15:20,880 --> 00:15:25,740
user creation and authentication service

00:15:23,400 --> 00:15:29,580
it's a pretty realistic example because

00:15:25,740 --> 00:15:31,650
the focus of this is quick database when

00:15:29,580 --> 00:15:33,330
you create a day user creation service

00:15:31,650 --> 00:15:36,510
you usually want to focus on quick

00:15:33,330 --> 00:15:39,180
database io focus on data integrity

00:15:36,510 --> 00:15:41,010
and including business lodging and these

00:15:39,180 --> 00:15:46,020
are really things that rails are good at

00:15:41,010 --> 00:15:47,940
rails is good and interesting so here's

00:15:46,020 --> 00:15:49,620
an example of what this might what

00:15:47,940 --> 00:15:52,920
extracting this might look like for a

00:15:49,620 --> 00:15:55,260
user's controller so in a real sea way

00:15:52,920 --> 00:15:57,690
when you create a new user you would do

00:15:55,260 --> 00:16:00,630
user to create params user and all the

00:15:57,690 --> 00:16:02,760
business logic around validations of a

00:16:00,630 --> 00:16:04,560
user would go in the model class like

00:16:02,760 --> 00:16:06,030
for instance you might validate the

00:16:04,560 --> 00:16:08,100
first name and you might validate the

00:16:06,030 --> 00:16:10,950
middle name but only if the users in the

00:16:08,100 --> 00:16:12,420
United States which is kind of one of

00:16:10,950 --> 00:16:14,070
the most annoying things that I find

00:16:12,420 --> 00:16:15,840
about web applications when they require

00:16:14,070 --> 00:16:22,320
middle name because the one outside the

00:16:15,840 --> 00:16:23,850
United States has middle names so what

00:16:22,320 --> 00:16:26,520
this might look like to move this into

00:16:23,850 --> 00:16:30,720
us to kind of move this into a service

00:16:26,520 --> 00:16:32,700
object the first part is to extract the

00:16:30,720 --> 00:16:34,560
domain logic from the persistence logic

00:16:32,700 --> 00:16:36,600
so what we might do is create a service

00:16:34,560 --> 00:16:39,090
object called user a registrar then

00:16:36,600 --> 00:16:43,410
that's the checks and persist it to the

00:16:39,090 --> 00:16:45,840
device is necessary and if and if in

00:16:43,410 --> 00:16:48,200
this in this like structure of the code

00:16:45,840 --> 00:16:51,960
it's not that difficult to imagine

00:16:48,200 --> 00:16:55,980
moving this into a separate service that

00:16:51,960 --> 00:16:58,280
is communicated to over HTTP and what

00:16:55,980 --> 00:17:00,420
you would do is that you instead of

00:16:58,280 --> 00:17:03,480
instead of doing all those checks in

00:17:00,420 --> 00:17:08,880
your service object you would do a post

00:17:03,480 --> 00:17:13,470
and then parse the response of the of

00:17:08,880 --> 00:17:15,449
the service so in this approach this is

00:17:13,470 --> 00:17:18,209
kind of like an over really over

00:17:15,449 --> 00:17:23,760
simplified example of how we try to

00:17:18,209 --> 00:17:26,550
iteratively move from from code that's

00:17:23,760 --> 00:17:29,820
over the rails application to a service

00:17:26,550 --> 00:17:31,860
oriented approach and what I've kind of

00:17:29,820 --> 00:17:36,450
outlined is a iterative workflow for

00:17:31,860 --> 00:17:38,070
moving this logic slowly and draw the

00:17:36,450 --> 00:17:39,630
each of the process you want to make

00:17:38,070 --> 00:17:41,370
sure that you aren't breaking stuff and

00:17:39,630 --> 00:17:44,010
so it's important to make sure that we

00:17:41,370 --> 00:17:45,990
are testing at multiple levels trout so

00:17:44,010 --> 00:17:48,570
what this might look like first would be

00:17:45,990 --> 00:17:50,160
creating unit tests for the model making

00:17:48,570 --> 00:17:52,530
sure that the

00:17:50,160 --> 00:17:54,210
Asians work then adapting these to the

00:17:52,530 --> 00:17:57,000
service object as we move the object

00:17:54,210 --> 00:17:59,250
over there and then adapting them for an

00:17:57,000 --> 00:18:02,730
external service like testing that if

00:17:59,250 --> 00:18:04,710
you submit envelop parameters to invalid

00:18:02,730 --> 00:18:10,080
user parameters the user object you get

00:18:04,710 --> 00:18:12,230
back a 422 instead of a 200 so hopefully

00:18:10,080 --> 00:18:14,430
this is all transparent to the

00:18:12,230 --> 00:18:16,770
transparent to the user of the service

00:18:14,430 --> 00:18:18,270
but we also should have we also use

00:18:16,770 --> 00:18:20,190
integration tests to make sure that we

00:18:18,270 --> 00:18:21,960
are that each of the individual steps

00:18:20,190 --> 00:18:24,930
use the right interface and that's

00:18:21,960 --> 00:18:29,430
actually kind of non-trivial for us

00:18:24,930 --> 00:18:31,110
because when we one example is that when

00:18:29,430 --> 00:18:33,120
we're moving our search the different to

00:18:31,110 --> 00:18:35,040
a separate service we found that

00:18:33,120 --> 00:18:38,040
sometimes parameters were in process

00:18:35,040 --> 00:18:40,140
weren't expected in the same format on

00:18:38,040 --> 00:18:42,810
the on the service side and the consumer

00:18:40,140 --> 00:18:47,280
side and what this meant was that a new

00:18:42,810 --> 00:18:50,280
parameter was interpreted as a as a call

00:18:47,280 --> 00:18:52,080
to destroy everything with so it's

00:18:50,280 --> 00:18:55,950
important of integration tests when

00:18:52,080 --> 00:18:58,440
you're having services these testing

00:18:55,950 --> 00:19:00,330
practices make sense in the context of

00:18:58,440 --> 00:19:02,700
an iterative workflow but it would be

00:19:00,330 --> 00:19:05,190
possible to kind of paralyzed developing

00:19:02,700 --> 00:19:07,830
a new service as well and what for

00:19:05,190 --> 00:19:10,530
instance if I was continuing developing

00:19:07,830 --> 00:19:14,580
on monorail and my friend was developing

00:19:10,530 --> 00:19:16,830
a user service we could use these

00:19:14,580 --> 00:19:20,220
practices to make sure that the

00:19:16,830 --> 00:19:24,510
interfaces were what we expected another

00:19:20,220 --> 00:19:28,080
big question of deployment strategies

00:19:24,510 --> 00:19:32,160
that come along with choosing to develop

00:19:28,080 --> 00:19:34,260
a separate service is is that deploying

00:19:32,160 --> 00:19:36,720
multiple applications with separate

00:19:34,260 --> 00:19:41,280
dependencies is kind of complex not to

00:19:36,720 --> 00:19:45,120
view understatement and what we what we

00:19:41,280 --> 00:19:47,430
use is that we use chef and pub chef to

00:19:45,120 --> 00:19:50,180
manage our deployment processes although

00:19:47,430 --> 00:19:58,560
pop it with fulfil kind of the same role

00:19:50,180 --> 00:20:00,650
and we treat our deployment our chef

00:19:58,560 --> 00:20:03,750
repository is the same as we treat our

00:20:00,650 --> 00:20:08,010
monorail application that we

00:20:03,750 --> 00:20:11,370
use pull request to review to conduct

00:20:08,010 --> 00:20:12,900
code reviews and make sure that we are

00:20:11,370 --> 00:20:15,630
building competency and deployment

00:20:12,900 --> 00:20:17,130
processes so one big issue which I'm not

00:20:15,630 --> 00:20:22,110
really talking about here is is

00:20:17,130 --> 00:20:25,290
versioning as as you want to add more

00:20:22,110 --> 00:20:27,300
features to your API the API as you want

00:20:25,290 --> 00:20:29,700
to add more features your services the

00:20:27,300 --> 00:20:31,020
API would change but there's also a

00:20:29,700 --> 00:20:36,120
whole nother topic and a whole nother

00:20:31,020 --> 00:20:38,820
can of worms so one good heuristic from

00:20:36,120 --> 00:20:41,340
some from the person who helps manage

00:20:38,820 --> 00:20:43,080
our deployment the number of chef role

00:20:41,340 --> 00:20:49,110
should grow as quickly as the number of

00:20:43,080 --> 00:20:50,700
services so I think it's good for us to

00:20:49,110 --> 00:20:56,070
take a step back and try and figure out

00:20:50,700 --> 00:20:58,530
why our services approaches versus

00:20:56,070 --> 00:21:05,250
services fits into the overall direction

00:20:58,530 --> 00:21:07,080
of our company so using these services

00:21:05,250 --> 00:21:09,450
we have been able to iterate on

00:21:07,080 --> 00:21:12,120
individual services quickly choose the

00:21:09,450 --> 00:21:14,130
best technology for the purpose and also

00:21:12,120 --> 00:21:17,870
try new technologies and scale

00:21:14,130 --> 00:21:20,670
individual services independently and

00:21:17,870 --> 00:21:22,530
for for us right now this is what it

00:21:20,670 --> 00:21:25,710
looks like but in the future who knows

00:21:22,530 --> 00:21:28,830
what it's going to be like and adopting

00:21:25,710 --> 00:21:30,930
this service oriented approach can allow

00:21:28,830 --> 00:21:32,310
us to scale to add more features or

00:21:30,930 --> 00:21:36,540
rails application without being

00:21:32,310 --> 00:21:38,940
overwhelmed with our complexity in n so

00:21:36,540 --> 00:21:41,250
that's all that I have for you and I'd

00:21:38,940 --> 00:21:42,660
like to take questions so if there

00:21:41,250 --> 00:21:44,930
aren't any more questions thanks for

00:21:42,660 --> 00:21:44,930
your time

00:21:54,410 --> 00:21:56,470

YouTube URL: https://www.youtube.com/watch?v=SukCS-JIdAU


