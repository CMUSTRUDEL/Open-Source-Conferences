Title: Rocky Mountain Ruby 2013 Here be Dragons by Katrina Owen
Publication date: 2020-01-27
Playlist: Rocky Mountain Ruby 2013
Description: 
	It's not your fault. Code rots. We don't hold entropy against you, but we expect you to give a damn.

This story is about code that brings new meaning to the word 'legacy'. The accidental discovery of this body of code provoked a moral crisis. I wanted to pretend I hadn't seen it, yet I couldn't justify tiptoeing quietly away.

This talk examines the dilemmas we face when balancing our choices today with their cost tomorrow.

It's not your fault. Even so, it is your responsibility.

Help us caption & translate this video!

http://amara.org/v/FG6v/
Captions: 
	00:00:29,820 --> 00:00:39,250
every once in a while I come across a

00:00:33,040 --> 00:00:42,700
bug that I can't help but admire I have

00:00:39,250 --> 00:00:44,890
trouble sleeping I forget to eat it's an

00:00:42,700 --> 00:00:47,829
adventure bugs like these consume me

00:00:44,890 --> 00:00:49,510
it's exciting and stimulating and when I

00:00:47,829 --> 00:00:51,489
figure out the devious ways in which

00:00:49,510 --> 00:00:58,170
they're causing the system to fail I

00:00:51,489 --> 00:00:58,170
feel victorious princess one dragon zero

00:00:58,559 --> 00:01:05,040
this particular bug was the other kind

00:01:02,530 --> 00:01:08,740
of bug the mind numbingly boring kind

00:01:05,040 --> 00:01:10,570
the kind that causes all the other items

00:01:08,740 --> 00:01:13,630
on my to-do list to seem suddenly

00:01:10,570 --> 00:01:18,670
important surely I can't fix this bug

00:01:13,630 --> 00:01:21,040
right now I have a toilet to scrub the

00:01:18,670 --> 00:01:25,060
bug was in an application whose sole

00:01:21,040 --> 00:01:27,490
purpose was to allow villagers actual

00:01:25,060 --> 00:01:30,369
flesh-and-blood villagers to post gossip

00:01:27,490 --> 00:01:32,920
on the web so who got hitched who had a

00:01:30,369 --> 00:01:35,200
baby who has a birthday coming up and

00:01:32,920 --> 00:01:37,689
the gossip would then get piped straight

00:01:35,200 --> 00:01:40,170
into the production system of the local

00:01:37,689 --> 00:01:43,930
village rag where it would be printed on

00:01:40,170 --> 00:01:45,130
actual paper alongside the story of the

00:01:43,930 --> 00:01:48,189
largest fish to be caught off the docks

00:01:45,130 --> 00:01:50,020
since nineteen sixty two so the broken

00:01:48,189 --> 00:01:52,090
feature was the feature that when Alice

00:01:50,020 --> 00:01:54,460
posts a picture of her new baby allows

00:01:52,090 --> 00:01:58,329
Bob to tell everyone that they should

00:01:54,460 --> 00:02:01,299
come gossip about it in other words the

00:01:58,329 --> 00:02:07,960
broken feature was being able to gossip

00:02:01,299 --> 00:02:09,280
about the gossip the strategy I chose to

00:02:07,960 --> 00:02:11,230
solve this problem was to get the

00:02:09,280 --> 00:02:14,190
feature fixed as quickly as I could

00:02:11,230 --> 00:02:18,360
preferably without reading any code

00:02:14,190 --> 00:02:20,860
the full bug report read as follows I

00:02:18,360 --> 00:02:24,070
tried to share by email but nothing

00:02:20,860 --> 00:02:26,320
happened I opened up the application put

00:02:24,070 --> 00:02:28,590
in my email address click the button and

00:02:26,320 --> 00:02:32,260
lo and behold the villager was right

00:02:28,590 --> 00:02:34,060
nothing happened I activated the

00:02:32,260 --> 00:02:37,660
JavaScript console and tried again and

00:02:34,060 --> 00:02:39,640
got a 500 error the JavaScript was

00:02:37,660 --> 00:02:41,590
trying to make an asynchronous call to

00:02:39,640 --> 00:02:43,090
an end point inside the application and

00:02:41,590 --> 00:02:45,580
the response that came back in the

00:02:43,090 --> 00:02:48,850
little debugging window was a wall of

00:02:45,580 --> 00:02:50,230
text formatted as HTML so I copied out

00:02:48,850 --> 00:02:52,510
the call with all the parameters so I

00:02:50,230 --> 00:02:54,010
could call the end point using curls so

00:02:52,510 --> 00:02:55,870
that I could redirect the output into a

00:02:54,010 --> 00:02:58,570
file so that I could finally then open

00:02:55,870 --> 00:03:02,500
it in a browser and the stack trace was

00:02:58,570 --> 00:03:03,850
exactly what line long the execution

00:03:02,500 --> 00:03:06,970
hadn't even reached the controller

00:03:03,850 --> 00:03:09,370
action some before filter blew up trying

00:03:06,970 --> 00:03:10,960
to send a message to nil so a quick

00:03:09,370 --> 00:03:12,610
investigation revealed that the before

00:03:10,960 --> 00:03:16,030
filter was completely irrelevant to

00:03:12,610 --> 00:03:19,480
encouraging gossip and the solution was

00:03:16,030 --> 00:03:22,210
to bypass it all together so now I was

00:03:19,480 --> 00:03:24,960
expecting to get a 200 ok a snippet of

00:03:22,210 --> 00:03:26,890
Jason in an email in my inbox and

00:03:24,960 --> 00:03:30,190
instead I got another stack trace

00:03:26,890 --> 00:03:32,350
formatted as HTML and this time the code

00:03:30,190 --> 00:03:34,570
managed to get all the way to the email

00:03:32,350 --> 00:03:36,810
template to the ER be template before it

00:03:34,570 --> 00:03:39,610
blew up in something to do with

00:03:36,810 --> 00:03:44,040
translations and the stack trace drew

00:03:39,610 --> 00:03:47,260
out the entire feature it starts in the

00:03:44,040 --> 00:03:51,930
controller in a method with the

00:03:47,260 --> 00:03:54,070
outrageous name share by email or SMS

00:03:51,930 --> 00:03:57,430
this calls out to a module called

00:03:54,070 --> 00:03:58,990
sharing which has a method called Center

00:03:57,430 --> 00:04:01,720
recipients which presumably is a

00:03:58,990 --> 00:04:04,150
collective term for email addresses and

00:04:01,720 --> 00:04:05,830
phone numbers the next step in the stack

00:04:04,150 --> 00:04:07,960
trace is sent to email in the same

00:04:05,830 --> 00:04:10,360
module this further delegates on to an

00:04:07,960 --> 00:04:11,920
action mailer which sends an email using

00:04:10,360 --> 00:04:13,420
a text template and which is

00:04:11,920 --> 00:04:15,760
internationalized and interpolate

00:04:13,420 --> 00:04:18,880
strings from a local file and the error

00:04:15,760 --> 00:04:21,489
message actually displayed the exact

00:04:18,880 --> 00:04:24,550
line of code that was failing the

00:04:21,489 --> 00:04:26,090
internationalization thing is some fancy

00:04:24,550 --> 00:04:28,610
string interpolation take

00:04:26,090 --> 00:04:30,440
for argument's and the ER be template

00:04:28,610 --> 00:04:31,850
was sending in only three of them so by

00:04:30,440 --> 00:04:34,010
matching up the keys in the error

00:04:31,850 --> 00:04:36,050
message it was pretty straightforward to

00:04:34,010 --> 00:04:40,810
determine that the missing key was Ted

00:04:36,050 --> 00:04:44,000
bit sender so I patched the template

00:04:40,810 --> 00:04:48,350
kicked off the email and at this point i

00:04:44,000 --> 00:04:53,870
did get back a proper response and also

00:04:48,350 --> 00:04:59,780
the email arrived in my inbox so my work

00:04:53,870 --> 00:05:03,830
here is done management would be

00:04:59,780 --> 00:05:05,780
impressed heroic save and all that the

00:05:03,830 --> 00:05:10,340
truth is I did what the French call

00:05:05,780 --> 00:05:13,310
Domini mom sandy Canada this is a term

00:05:10,340 --> 00:05:15,650
that mocks the bare minimum it makes fun

00:05:13,310 --> 00:05:17,750
of bureaucracy bureaucracy for setting

00:05:15,650 --> 00:05:20,180
standards that are so low that you

00:05:17,750 --> 00:05:21,740
literally could not do worse because at

00:05:20,180 --> 00:05:26,150
that point you would not have done it at

00:05:21,740 --> 00:05:30,919
all now having fixed this feature I was

00:05:26,150 --> 00:05:33,680
sorely tempted to tiptoe away I knew

00:05:30,919 --> 00:05:35,539
that if more bugs came or discovered a

00:05:33,680 --> 00:05:38,690
few months down the line I wouldn't be

00:05:35,539 --> 00:05:41,150
accused of negligence my reputation

00:05:38,690 --> 00:05:42,889
would be pristine my name is not even in

00:05:41,150 --> 00:05:45,620
the commit history for the feature aside

00:05:42,889 --> 00:05:49,669
from those two lines so I'd be clear

00:05:45,620 --> 00:05:53,110
still I was unable to turn my back on

00:05:49,669 --> 00:05:55,490
this code and I'd love to pretend that

00:05:53,110 --> 00:05:59,000
the reason I couldn't leave this alone

00:05:55,490 --> 00:06:04,160
is that I'm a good person I'm a morally

00:05:59,000 --> 00:06:09,349
superior being and I'd be lying I'm

00:06:04,160 --> 00:06:12,440
driven by fear the code might be decent

00:06:09,349 --> 00:06:14,720
or it could be a stinking quagmire of

00:06:12,440 --> 00:06:19,039
rot and decay and without at least

00:06:14,720 --> 00:06:21,849
glancing at it I can't know I fear

00:06:19,039 --> 00:06:24,680
stinking Quagmire's of rot and decay I

00:06:21,849 --> 00:06:26,810
dread getting sucked into them and being

00:06:24,680 --> 00:06:29,090
thigh high and mud and leeches and

00:06:26,810 --> 00:06:30,919
wrangling boolean gates with one hand

00:06:29,090 --> 00:06:32,599
and fighting off stack traces with it

00:06:30,919 --> 00:06:37,099
the other and the last thing I want to

00:06:32,599 --> 00:06:39,529
do is wade into that swamp but I fear

00:06:37,099 --> 00:06:42,349
but it's going to cause me

00:06:39,529 --> 00:06:45,499
X hours of pain let's say three three

00:06:42,349 --> 00:06:47,509
hours of pain if this blows up in my

00:06:45,499 --> 00:06:50,059
face at 245 am one night then I am

00:06:47,509 --> 00:06:52,009
likely to spend the three hours and get

00:06:50,059 --> 00:06:55,069
it wrong causing me three to four days

00:06:52,009 --> 00:06:56,929
of mopping up and hell and pain writing

00:06:55,069 --> 00:06:59,589
scripts to farce access logs so that i

00:06:56,929 --> 00:07:04,039
can put lost orders back in the database

00:06:59,589 --> 00:07:06,679
hypothetically it's this fear that

00:07:04,039 --> 00:07:09,019
motivated me to take one tiny step to

00:07:06,679 --> 00:07:11,599
eyeball the code just look at it and

00:07:09,019 --> 00:07:13,579
make an evaluation about how likely it

00:07:11,599 --> 00:07:16,149
is to blow up in my face at a

00:07:13,579 --> 00:07:20,029
particularly inconvenient point in time

00:07:16,149 --> 00:07:24,189
so before we look at the code I'd like

00:07:20,029 --> 00:07:24,189
to take a moment to talk about the tests

00:07:25,209 --> 00:07:39,049
right moving on in the controller in the

00:07:34,969 --> 00:07:41,479
share by email or SMS action the first

00:07:39,049 --> 00:07:44,629
thing that caught my eye was a constant

00:07:41,479 --> 00:07:46,129
that I had never seen before tinyurl so

00:07:44,629 --> 00:07:48,559
it was not present in the stack trace

00:07:46,129 --> 00:07:52,159
the email i received did not contain a

00:07:48,559 --> 00:07:54,259
shortened URL the logical explanation is

00:07:52,159 --> 00:07:56,599
that this is only used for the SMS

00:07:54,259 --> 00:07:58,999
portion of the feature and it's true

00:07:56,599 --> 00:08:01,279
that we are building up the text message

00:07:58,999 --> 00:08:03,799
for the SMS here in the controller on

00:08:01,279 --> 00:08:05,269
every request whether or not we've

00:08:03,799 --> 00:08:08,389
received any phone numbers to send the

00:08:05,269 --> 00:08:11,989
SMS to however the text message also

00:08:08,389 --> 00:08:14,629
does not contain a shortened URL in fact

00:08:11,989 --> 00:08:15,889
once the URL tinyurl is generated and

00:08:14,629 --> 00:08:19,159
assigned to this local variable that

00:08:15,889 --> 00:08:20,859
variable is never referenced again so

00:08:19,159 --> 00:08:23,599
let me show you the tinyurl module

00:08:20,859 --> 00:08:26,989
actually let's have the comments and the

00:08:23,599 --> 00:08:31,759
code tell us a little bit about it we

00:08:26,989 --> 00:08:35,959
have a base exception class we also have

00:08:31,759 --> 00:08:37,490
an exception class incidentally the only

00:08:35,959 --> 00:08:39,219
thing the base exception class is used

00:08:37,490 --> 00:08:43,540
for is to define this exception class

00:08:39,219 --> 00:08:47,480
which in turn gets used exactly once

00:08:43,540 --> 00:08:48,740
this is a bit cryptic but the method

00:08:47,480 --> 00:08:51,390
method name does a pretty good job of

00:08:48,740 --> 00:08:56,070
explaining the comment this

00:08:51,390 --> 00:08:57,930
it is both cryptic and misspelled but

00:08:56,070 --> 00:09:00,330
again the method name explains what's

00:08:57,930 --> 00:09:03,960
going on so enough about comments let's

00:09:00,330 --> 00:09:06,090
look at some code this is the core piece

00:09:03,960 --> 00:09:07,380
of tinyurl now you don't have to read

00:09:06,090 --> 00:09:10,550
the code just notice that we're calling

00:09:07,380 --> 00:09:15,060
out to an external service over HTTP

00:09:10,550 --> 00:09:17,850
every time we call the share by email or

00:09:15,060 --> 00:09:21,510
send SMS action we call out over HTTP

00:09:17,850 --> 00:09:23,070
and then throw away the result now the

00:09:21,510 --> 00:09:25,890
author of this code has thoughtfully

00:09:23,070 --> 00:09:28,560
added caching so we might not make the

00:09:25,890 --> 00:09:32,180
call on every single request besides it

00:09:28,560 --> 00:09:32,180
only happens in staging in production

00:09:33,560 --> 00:09:39,540
you'll notice that the case statement

00:09:36,120 --> 00:09:42,780
always returns there for the last nine

00:09:39,540 --> 00:09:44,490
line will never be reached also you can

00:09:42,780 --> 00:09:46,770
see that the case statement has exactly

00:09:44,490 --> 00:09:48,600
two outcomes true or false and we do

00:09:46,770 --> 00:09:53,640
have simpler means of achieving the same

00:09:48,600 --> 00:09:56,700
result the caching mechanism manages to

00:09:53,640 --> 00:10:05,880
use both a module variable and a module

00:09:56,700 --> 00:10:08,040
instance variable in the same breath it

00:10:05,880 --> 00:10:13,830
turns out that the tinyurl module is not

00:10:08,040 --> 00:10:19,890
used by any code anywhere ever so it can

00:10:13,830 --> 00:10:22,620
safely be deleted the code has been

00:10:19,890 --> 00:10:23,910
racking up exploitive points pretty

00:10:22,620 --> 00:10:26,780
quickly now exploitive points or

00:10:23,910 --> 00:10:31,130
expletive points if you're American are

00:10:26,780 --> 00:10:31,130
also known as XP

00:10:32,079 --> 00:10:38,690
there an equivalent measure to wtf's per

00:10:35,149 --> 00:10:42,319
minute so we found two bugs where only

00:10:38,690 --> 00:10:45,230
one was expected bugs congregate there's

00:10:42,319 --> 00:10:48,139
dead code there's a gratuitous case

00:10:45,230 --> 00:10:50,750
statement the code uses a module

00:10:48,139 --> 00:10:53,420
variable the code uses a module instance

00:10:50,750 --> 00:10:56,870
variable the comments either state the

00:10:53,420 --> 00:10:58,430
obvious or are incoherent we're building

00:10:56,870 --> 00:11:02,209
a text message even when we're only

00:10:58,430 --> 00:11:04,250
sending emails the entry point into the

00:11:02,209 --> 00:11:07,610
feature is a method called share by

00:11:04,250 --> 00:11:09,860
email or SMS apparently the method does

00:11:07,610 --> 00:11:14,350
two things that are so unrelated we

00:11:09,860 --> 00:11:14,350
cannot even use and in the method name

00:11:14,769 --> 00:11:22,160
there are no tests the code is calling

00:11:19,250 --> 00:11:25,300
out over HTTP on every request and never

00:11:22,160 --> 00:11:25,300
using the result

00:11:29,190 --> 00:11:39,040
we've accumulated 62 exploitive points

00:11:32,910 --> 00:11:40,900
but wait there's more and unless else is

00:11:39,040 --> 00:11:43,090
being used to determine the response for

00:11:40,900 --> 00:11:45,910
the action and it's switching on a flag

00:11:43,090 --> 00:11:49,930
called invalid name giving us a double

00:11:45,910 --> 00:11:51,340
negative for the happy path the invalid

00:11:49,930 --> 00:11:55,810
name flag is actually pretty spectacular

00:11:51,340 --> 00:11:57,820
a name must not exceed 40 characters to

00:11:55,810 --> 00:12:02,470
be valid the significance of the number

00:11:57,820 --> 00:12:04,030
40 is unknown out of curiosity I kicked

00:12:02,470 --> 00:12:05,800
off the curl command with an invalid

00:12:04,030 --> 00:12:14,380
name I got a reasonable error message

00:12:05,800 --> 00:12:18,190
and an email so the process goes like

00:12:14,380 --> 00:12:21,250
this having determined that the name is

00:12:18,190 --> 00:12:23,710
invalid we send out the emails and text

00:12:21,250 --> 00:12:32,200
messages and then we turn tree returned

00:12:23,710 --> 00:12:35,860
HTTP 400 bad request you'll notice that

00:12:32,200 --> 00:12:38,350
nil is totally legit now it seems likely

00:12:35,860 --> 00:12:40,870
that if hitting if we hit the controller

00:12:38,350 --> 00:12:43,360
action without a name it would result in

00:12:40,870 --> 00:12:45,790
an email being sent out and instead we

00:12:43,360 --> 00:12:48,850
get a 400 bad request and the error

00:12:45,790 --> 00:12:54,810
message tells us that they have already

00:12:48,850 --> 00:12:57,760
been told obviously

00:12:54,810 --> 00:12:59,920
now it turns out we don't get an email

00:12:57,760 --> 00:13:02,800
because the center recipients method has

00:12:59,920 --> 00:13:07,510
a guard cause against nil names so let's

00:13:02,800 --> 00:13:09,550
look at what else it has to offer in the

00:13:07,510 --> 00:13:12,130
sharing module the center recipients

00:13:09,550 --> 00:13:14,649
method is very very complicated looking

00:13:12,130 --> 00:13:17,680
and it has a comment that explains what

00:13:14,649 --> 00:13:19,890
the method does unfortunately every

00:13:17,680 --> 00:13:23,170
single part of that comment is wrong

00:13:19,890 --> 00:13:26,320
there is no message key the hash key is

00:13:23,170 --> 00:13:29,380
called SMS there is no email recipients

00:13:26,320 --> 00:13:32,790
key it's just email and there's no SMS

00:13:29,380 --> 00:13:35,410
recipients key it's called numbers and

00:13:32,790 --> 00:13:37,899
you'd think that it can't be more wrong

00:13:35,410 --> 00:13:39,910
but it is even if all the keys were

00:13:37,899 --> 00:13:41,380
named correctly in the comment the

00:13:39,910 --> 00:13:43,779
comment is still wrong because the

00:13:41,380 --> 00:13:46,690
message that gets built up and sent via

00:13:43,779 --> 00:13:48,399
param doesn't actually get sent two

00:13:46,690 --> 00:13:51,850
emails we have an ERP template that the

00:13:48,399 --> 00:13:55,690
action mailer uses to use that so the

00:13:51,850 --> 00:13:57,970
lesson is comments that restate the

00:13:55,690 --> 00:14:03,550
method implementation are bound to decay

00:13:57,970 --> 00:14:06,910
and should be deleted so the method has

00:14:03,550 --> 00:14:09,190
code to clean up the text message that

00:14:06,910 --> 00:14:11,350
code never ever gets called because the

00:14:09,190 --> 00:14:16,810
parens hash never ever has a message key

00:14:11,350 --> 00:14:18,790
in it then it cleans up the name now

00:14:16,810 --> 00:14:21,850
this is reasonable aside from the fact

00:14:18,790 --> 00:14:24,779
that the controller validated the length

00:14:21,850 --> 00:14:27,279
of the name less than forty characters

00:14:24,779 --> 00:14:28,810
and that was before passing it to this

00:14:27,279 --> 00:14:31,240
method and now having cleaned up the

00:14:28,810 --> 00:14:34,720
name it could be now be shorter and

00:14:31,240 --> 00:14:36,279
therefore valid and then it goes ahead

00:14:34,720 --> 00:14:42,100
and validates the length of the name

00:14:36,279 --> 00:14:44,199
again this time with a cut off of 41 so

00:14:42,100 --> 00:14:47,079
once we've gotten back past all of the

00:14:44,199 --> 00:14:49,350
validation in the cleanup we get to this

00:14:47,079 --> 00:14:49,350
block

00:14:57,660 --> 00:15:03,970
so let's break this down we combine

00:15:01,510 --> 00:15:07,240
emails and phone numbers that came in

00:15:03,970 --> 00:15:09,580
separately into a single array then we

00:15:07,240 --> 00:15:11,200
iterate over the whole lot and use reg

00:15:09,580 --> 00:15:13,390
X's to figure out whether we have a

00:15:11,200 --> 00:15:15,190
phone number or an email so that we can

00:15:13,390 --> 00:15:21,370
dispatch the notification using the

00:15:15,190 --> 00:15:23,590
correct protocol at the very core of

00:15:21,370 --> 00:15:26,560
this block we have two methods send to

00:15:23,590 --> 00:15:29,530
email and send to SMS and we'll look at

00:15:26,560 --> 00:15:34,420
send to email first so according to the

00:15:29,530 --> 00:15:37,600
comment the sin to email method sends

00:15:34,420 --> 00:15:43,180
email the comment is only partially

00:15:37,600 --> 00:15:46,210
correct this is very confusing so I'll

00:15:43,180 --> 00:15:48,820
go through it step-by-step Alice posts a

00:15:46,210 --> 00:15:51,070
picture of her new baby Bob goes to the

00:15:48,820 --> 00:15:53,740
website enters Charlie's email address

00:15:51,070 --> 00:15:56,320
to tell him about it so the tidbit was

00:15:53,740 --> 00:15:58,540
created by Alice and if we don't have

00:15:56,320 --> 00:16:00,130
her email address we will skip blithely

00:15:58,540 --> 00:16:02,560
past the part where we actually

00:16:00,130 --> 00:16:05,230
dispatched the email to Charlie whose

00:16:02,560 --> 00:16:08,080
address we have because Bob gave it to

00:16:05,230 --> 00:16:09,610
us and here's the thing in this

00:16:08,080 --> 00:16:11,380
application it's very likely that we

00:16:09,610 --> 00:16:13,450
don't have Alice's email address because

00:16:11,380 --> 00:16:15,640
she signed up using her cell phone if

00:16:13,450 --> 00:16:22,420
she forgets her password we're gonna

00:16:15,640 --> 00:16:26,520
send her an SMS not an email we prefer

00:16:22,420 --> 00:16:26,520
to report good news always

00:16:27,029 --> 00:16:31,870
so remember this block of code I

00:16:29,440 --> 00:16:34,600
actually simplified it originally it

00:16:31,870 --> 00:16:37,779
looked a lot more like this so returning

00:16:34,600 --> 00:16:39,399
true here ultimately causes us to tell

00:16:37,779 --> 00:16:42,600
Bob that Charlie got the email

00:16:39,399 --> 00:16:46,060
regardless of what actually happened in

00:16:42,600 --> 00:16:49,709
the other branch of the conditional we

00:16:46,060 --> 00:16:53,790
send the send to SMS message which

00:16:49,709 --> 00:16:53,790
according to the comments sends SMS

00:17:01,230 --> 00:17:14,049
there are lies damn lies and comments so

00:17:10,949 --> 00:17:19,209
what does this code say about the

00:17:14,049 --> 00:17:24,250
developer who wrote it well it's easy to

00:17:19,209 --> 00:17:27,130
criticize and a whole lot of fun it's

00:17:24,250 --> 00:17:30,700
tempting to believe that whoever wrote

00:17:27,130 --> 00:17:34,909
the feature is stupid or a bad developer

00:17:30,700 --> 00:17:37,200
or at the very least a bad person

00:17:34,909 --> 00:17:40,620
this is known as the fundamental

00:17:37,200 --> 00:17:42,240
attribution error when somebody writes

00:17:40,620 --> 00:17:46,019
terrible code we make assumptions about

00:17:42,240 --> 00:17:47,760
why that is on one end of the scale we

00:17:46,019 --> 00:17:51,059
attribute bad code to individual traits

00:17:47,760 --> 00:17:52,440
to their personal fixed characteristics

00:17:51,059 --> 00:17:54,600
they're not skilled enough or they don't

00:17:52,440 --> 00:17:58,169
care enough at the other end of the

00:17:54,600 --> 00:18:02,070
scale it's situational a momentary lapse

00:17:58,169 --> 00:18:04,080
due to contextual pressures so on one

00:18:02,070 --> 00:18:05,580
end of the scale they're bad person the

00:18:04,080 --> 00:18:08,940
other end of the scale they're having a

00:18:05,580 --> 00:18:12,330
bad day the forces that push us around

00:18:08,940 --> 00:18:14,399
for a moment to moment are invisible we

00:18:12,330 --> 00:18:16,500
notice them we're in the thick of it we

00:18:14,399 --> 00:18:17,940
are in our own lives and we can't help

00:18:16,500 --> 00:18:21,059
but notice them but from the outside

00:18:17,940 --> 00:18:24,059
these pressures are hard to see and the

00:18:21,059 --> 00:18:25,980
farther we are from the situation the

00:18:24,059 --> 00:18:28,679
harder it is to imagine them and the

00:18:25,980 --> 00:18:31,350
result is that people we don't know our

00:18:28,679 --> 00:18:36,269
bad developers whereas we and our

00:18:31,350 --> 00:18:40,130
friends are just having a bad day so

00:18:36,269 --> 00:18:43,980
what happened with share by email or SMS

00:18:40,130 --> 00:18:46,799
how does a smart experienced developer

00:18:43,980 --> 00:18:51,000
like the author of this code end up with

00:18:46,799 --> 00:18:52,799
a mess like that surely they didn't sit

00:18:51,000 --> 00:18:54,870
down one morning write the feature from

00:18:52,799 --> 00:18:58,590
one end to the other finishing with a

00:18:54,870 --> 00:19:01,080
flourish most likely what happened to

00:18:58,590 --> 00:19:02,929
them is what happens to all of us rush

00:19:01,080 --> 00:19:06,360
jobs rapidly changing requirements

00:19:02,929 --> 00:19:08,399
corners that get cut even without

00:19:06,360 --> 00:19:11,940
pressure this was not an ideal situation

00:19:08,399 --> 00:19:14,370
for one this developer wasn't actually

00:19:11,940 --> 00:19:16,440
on the project this gossip application

00:19:14,370 --> 00:19:18,659
that was me and one other guy so it was

00:19:16,440 --> 00:19:21,240
an unfamiliar codebase to them and

00:19:18,659 --> 00:19:24,360
second of all the code base was terrible

00:19:21,240 --> 00:19:27,860
I mean it was not exemplary code it's

00:19:24,360 --> 00:19:30,000
not a code base you'd like to inherit

00:19:27,860 --> 00:19:32,850
when again who knows maybe there was no

00:19:30,000 --> 00:19:34,320
deadline maybe the programmer understood

00:19:32,850 --> 00:19:38,299
the code perfectly maybe they were just

00:19:34,320 --> 00:19:38,299
bored or drunk

00:19:38,740 --> 00:19:47,090
if you strip away all the fuzzy muddled

00:19:43,340 --> 00:19:48,679
messy humanity of it all you get down to

00:19:47,090 --> 00:19:52,190
an interesting equation that is based

00:19:48,679 --> 00:19:54,559
purely on rational choices so imagine a

00:19:52,190 --> 00:19:58,820
scenario where player one and player two

00:19:54,559 --> 00:20:01,490
may either cooperate or defect so if

00:19:58,820 --> 00:20:04,490
both players choose to cooperate they

00:20:01,490 --> 00:20:07,460
both get three points this is a reward

00:20:04,490 --> 00:20:10,039
for mutual cooperation and if both

00:20:07,460 --> 00:20:13,009
players choose to defect they get one

00:20:10,039 --> 00:20:16,730
point each a punishment for mutual

00:20:13,009 --> 00:20:18,799
defection if player one cooperates and

00:20:16,730 --> 00:20:21,710
player two defects then player 2 gets

00:20:18,799 --> 00:20:25,090
five points this is known as the

00:20:21,710 --> 00:20:28,820
temptation to defect and player 1 gets

00:20:25,090 --> 00:20:33,799
zero points known as the suckers pay off

00:20:28,820 --> 00:20:35,809
in terms of software cooperating means

00:20:33,799 --> 00:20:38,119
coding with care whatever that means to

00:20:35,809 --> 00:20:40,940
you or your team it could be taking the

00:20:38,119 --> 00:20:42,289
time to add add tests making sure that

00:20:40,940 --> 00:20:43,970
your methods are short that their names

00:20:42,289 --> 00:20:48,619
are expressive that you've deleted all

00:20:43,970 --> 00:20:50,360
the trailing whitespace and defecting is

00:20:48,619 --> 00:20:52,519
not doing those things affecting is

00:20:50,360 --> 00:20:54,049
committing with no thought to how much

00:20:52,519 --> 00:20:56,480
sense this will make to the next person

00:20:54,049 --> 00:20:58,129
who's going to see it so here's the

00:20:56,480 --> 00:21:00,619
thing if player one knows that player 2

00:20:58,129 --> 00:21:03,799
is going to defect then it is in player

00:21:00,619 --> 00:21:06,950
one's best interest to defect as well

00:21:03,799 --> 00:21:09,169
both players get one point on the other

00:21:06,950 --> 00:21:12,049
hand if player one knows that player 2

00:21:09,169 --> 00:21:15,679
is going to cooperate then it is in

00:21:12,049 --> 00:21:17,749
their best interest to defect they're

00:21:15,679 --> 00:21:20,830
going to get five points player two will

00:21:17,749 --> 00:21:24,409
get none so the rational choice here is

00:21:20,830 --> 00:21:28,669
always to defect and yet by doing so

00:21:24,409 --> 00:21:31,340
everybody loses so notice that this is

00:21:28,669 --> 00:21:34,039
not a zero-sum game the players do not

00:21:31,340 --> 00:21:35,809
have strictly opposing interests the

00:21:34,039 --> 00:21:38,029
largest number of points on the table

00:21:35,809 --> 00:21:40,159
for a six single round is six and the

00:21:38,029 --> 00:21:45,529
only way you can get that is if the

00:21:40,159 --> 00:21:47,779
players cooperate defection is only the

00:21:45,529 --> 00:21:51,350
rational choice in a single shot game or

00:21:47,779 --> 00:21:53,120
a situation where the the number of

00:21:51,350 --> 00:21:55,370
James is fixed or the time period is

00:21:53,120 --> 00:21:57,289
fixed there's no incentive to cooperate

00:21:55,370 --> 00:22:00,080
if you're never going to play against

00:21:57,289 --> 00:22:02,330
the same player again but dynamics

00:22:00,080 --> 00:22:05,929
change completely if player 1 and player

00:22:02,330 --> 00:22:07,910
to interact on an ongoing basis now in

00:22:05,929 --> 00:22:11,330
most realistic situations you don't know

00:22:07,910 --> 00:22:14,299
when the last interaction will take

00:22:11,330 --> 00:22:16,130
place so if player 1 and player to play

00:22:14,299 --> 00:22:19,130
an indefinite number of successive

00:22:16,130 --> 00:22:21,169
rounds in a game then when one player

00:22:19,130 --> 00:22:25,100
defects the other player has the option

00:22:21,169 --> 00:22:30,020
of retaliating in response in the next

00:22:25,100 --> 00:22:32,539
round and in this situation there is no

00:22:30,020 --> 00:22:34,640
single strategy that will always do well

00:22:32,539 --> 00:22:37,190
so if the other player chooses a

00:22:34,640 --> 00:22:39,860
strategy of always defecting the best

00:22:37,190 --> 00:22:43,130
that you can do is to always defect as

00:22:39,860 --> 00:22:44,690
well so now what if the other player

00:22:43,130 --> 00:22:46,159
chooses the strategy of permanent

00:22:44,690 --> 00:22:48,770
retaliation they start off by

00:22:46,159 --> 00:22:51,260
cooperating and then you defect once and

00:22:48,770 --> 00:22:53,929
they never cooperate again in this

00:22:51,260 --> 00:22:57,980
situation the best that you can do is to

00:22:53,929 --> 00:23:02,390
always cooperate so what's a rational

00:22:57,980 --> 00:23:04,610
person to do it turns out that the most

00:23:02,390 --> 00:23:07,750
robust strategy across the largest

00:23:04,610 --> 00:23:11,299
number of situations is as follows

00:23:07,750 --> 00:23:13,010
cooperate at first until the other

00:23:11,299 --> 00:23:16,669
player defects at which point you

00:23:13,010 --> 00:23:18,260
retaliate immediately if they back down

00:23:16,669 --> 00:23:21,260
when you retaliate forgive them

00:23:18,260 --> 00:23:24,590
completely hold no grudges and start

00:23:21,260 --> 00:23:26,720
cooperating as quickly as possible so

00:23:24,590 --> 00:23:29,210
this is game theory 101 and it suggests

00:23:26,720 --> 00:23:31,460
that you should be nice now they have a

00:23:29,210 --> 00:23:34,460
very particular definition of nice it

00:23:31,460 --> 00:23:37,880
doesn't involve being a pushover in game

00:23:34,460 --> 00:23:40,970
theory nice means don't be the first to

00:23:37,880 --> 00:23:44,320
defect so if the other player never

00:23:40,970 --> 00:23:46,429
defects it's all good everybody wins

00:23:44,320 --> 00:23:48,110
there's a great book that covers a lot

00:23:46,429 --> 00:23:50,450
of the research that was done on this in

00:23:48,110 --> 00:23:52,490
the late 70s and early 80s called the

00:23:50,450 --> 00:23:54,890
evolution of cooperation and it's about

00:23:52,490 --> 00:23:58,820
computer programs pitted against each

00:23:54,890 --> 00:24:00,620
other in a grand tournament also talks

00:23:58,820 --> 00:24:03,049
about a lot of the follow up of research

00:24:00,620 --> 00:24:04,130
that was done after the tournament so

00:24:03,049 --> 00:24:05,720
the research was

00:24:04,130 --> 00:24:08,810
initially about the fundamental problem

00:24:05,720 --> 00:24:10,970
of cooperation in society it starts with

00:24:08,810 --> 00:24:12,830
the question when should you cooperate

00:24:10,970 --> 00:24:15,950
and when should you defect in an ongoing

00:24:12,830 --> 00:24:17,150
relationship with another person and the

00:24:15,950 --> 00:24:19,970
results of the tournament were so

00:24:17,150 --> 00:24:22,250
surprising that the researchers began to

00:24:19,970 --> 00:24:25,820
look at what makes it possible for

00:24:22,250 --> 00:24:29,270
cooperation to evolve in an environment

00:24:25,820 --> 00:24:31,390
of pure self-interest so the book turns

00:24:29,270 --> 00:24:34,910
into a fascinating exploration of

00:24:31,390 --> 00:24:40,580
evolution but from a strategic not a gin

00:24:34,910 --> 00:24:42,860
extend point the strategy that one both

00:24:40,580 --> 00:24:45,710
rounds of the tournament was called tit

00:24:42,860 --> 00:24:48,370
for tat it was the shortest program

00:24:45,710 --> 00:24:51,290
submitted and it worked like this

00:24:48,370 --> 00:24:53,000
cooperate on the first move and then do

00:24:51,290 --> 00:24:56,060
whatever the other program did on the

00:24:53,000 --> 00:24:58,160
previous move that was it and the thing

00:24:56,060 --> 00:25:02,030
that made it so successful was that it

00:24:58,160 --> 00:25:04,160
avoided unnecessary conflict it was

00:25:02,030 --> 00:25:08,180
highly provocative it fer gave

00:25:04,160 --> 00:25:10,520
immediately also it was incredibly easy

00:25:08,180 --> 00:25:15,020
to understand so the other program was

00:25:10,520 --> 00:25:18,740
able to adapt accordingly so I am making

00:25:15,020 --> 00:25:20,810
software out to be some grand

00:25:18,740 --> 00:25:23,500
competition where developers compete

00:25:20,810 --> 00:25:26,960
against each other which is ludicrous

00:25:23,500 --> 00:25:29,570
the problem is that we often behave as

00:25:26,960 --> 00:25:32,570
though it's the case this abstract

00:25:29,570 --> 00:25:35,150
formulation Maps shockingly well to the

00:25:32,570 --> 00:25:38,210
costs that we pay in order to deliver

00:25:35,150 --> 00:25:41,000
software when everyone on the team

00:25:38,210 --> 00:25:43,520
cooperates the team delivers good

00:25:41,000 --> 00:25:45,800
software with a reliable cadence

00:25:43,520 --> 00:25:49,180
everyone looks good everyone can be

00:25:45,800 --> 00:25:52,520
productive if one person on the team

00:25:49,180 --> 00:25:54,410
defects then that person looks efficient

00:25:52,520 --> 00:25:56,990
they're taking off features on the

00:25:54,410 --> 00:25:59,090
backlog they're fixing bug after bug

00:25:56,990 --> 00:26:02,000
after bug many of which they introduced

00:25:59,090 --> 00:26:04,070
in a previous fix their productive they

00:26:02,000 --> 00:26:06,290
deliver all sorts of heroic saves and

00:26:04,070 --> 00:26:09,800
they do it over and over and over again

00:26:06,290 --> 00:26:12,140
quickly and reliably and the rest of the

00:26:09,800 --> 00:26:13,850
team slows down both from trying to

00:26:12,140 --> 00:26:15,680
understand that the code the code that

00:26:13,850 --> 00:26:17,570
this person is writing and from shoring

00:26:15,680 --> 00:26:20,330
it up from having to rework it wherever

00:26:17,570 --> 00:26:22,400
and whenever changes are made so they

00:26:20,330 --> 00:26:24,590
add tests they improve error handling

00:26:22,400 --> 00:26:26,300
they extract responsibilities and the

00:26:24,590 --> 00:26:31,370
time it takes them to make a change

00:26:26,300 --> 00:26:34,010
increases if the whole team defects

00:26:31,370 --> 00:26:36,620
there's an initial rush where features

00:26:34,010 --> 00:26:38,780
are delivered rapidly but we quickly hit

00:26:36,620 --> 00:26:40,940
a point where each change takes longer

00:26:38,780 --> 00:26:44,360
and longer to make until we reach a

00:26:40,940 --> 00:26:47,450
pathetic but stable equilibrium where

00:26:44,360 --> 00:26:52,760
progress inches forward in an endless

00:26:47,450 --> 00:26:55,160
painful struggle humans are biased

00:26:52,760 --> 00:26:57,800
towards cooperation where most of the

00:26:55,160 --> 00:27:00,560
time will cooperate even when it makes

00:26:57,800 --> 00:27:04,370
no rational sense yet and being

00:27:00,560 --> 00:27:07,360
irrational we will also gleefully defect

00:27:04,370 --> 00:27:11,000
even when we have no incentive to do so

00:27:07,360 --> 00:27:13,040
sometimes it's just easier to not you

00:27:11,000 --> 00:27:15,620
know not write those tests not rename

00:27:13,040 --> 00:27:18,800
those variables we want to do the right

00:27:15,620 --> 00:27:20,270
thing but how often do we slip how often

00:27:18,800 --> 00:27:23,960
are we in a rush for no particular

00:27:20,270 --> 00:27:27,020
reason other than habit how often are we

00:27:23,960 --> 00:27:29,090
tired or flustered or distracted how

00:27:27,020 --> 00:27:33,340
often do we commit and just move on with

00:27:29,090 --> 00:27:36,320
our day good intentions are meaningless

00:27:33,340 --> 00:27:38,870
every commit we make tips the balance

00:27:36,320 --> 00:27:41,780
ever so slightly in one direction or the

00:27:38,870 --> 00:27:44,990
other an inch towards entropy an inch

00:27:41,780 --> 00:27:47,300
towards increased order perfection is

00:27:44,990 --> 00:27:49,880
unattainable and ultimately irrelevant

00:27:47,300 --> 00:27:51,740
if most of the commits you make are

00:27:49,880 --> 00:27:54,560
shifting the balance towards increased

00:27:51,740 --> 00:27:56,720
order no matter how slight that shift is

00:27:54,560 --> 00:28:00,110
you will have a code base that

00:27:56,720 --> 00:28:02,120
constantly improves so I urge you to ask

00:28:00,110 --> 00:28:07,150
yourself before you commit am I

00:28:02,120 --> 00:28:07,150

YouTube URL: https://www.youtube.com/watch?v=FvrZrwR5Flc


