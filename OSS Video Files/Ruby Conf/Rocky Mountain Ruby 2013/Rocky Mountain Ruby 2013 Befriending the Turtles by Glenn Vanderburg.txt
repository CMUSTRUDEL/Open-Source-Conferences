Title: Rocky Mountain Ruby 2013 Befriending the Turtles by Glenn Vanderburg
Publication date: 2020-01-27
Playlist: Rocky Mountain Ruby 2013
Description: 
	Help us caption & translate this video!

http://amara.org/v/FG6C/
Captions: 
	00:00:30,240 --> 00:00:34,719
just I want to make an observation to

00:00:32,860 --> 00:00:37,270
start off with that I think kind of says

00:00:34,719 --> 00:00:39,370
something neat about our world and our

00:00:37,270 --> 00:00:41,950
industry and and in particular this

00:00:39,370 --> 00:00:45,460
little Ruby community we have I first

00:00:41,950 --> 00:00:50,460
gave this talk a few months ago in

00:00:45,460 --> 00:00:53,469
stockholm sweden and there are at least

00:00:50,460 --> 00:00:56,230
two people in this room today who are

00:00:53,469 --> 00:01:00,160
also in the room then and i just think

00:00:56,230 --> 00:01:02,109
that's kind of neat that i can go to

00:01:00,160 --> 00:01:05,170
another continent and give this talk and

00:01:02,109 --> 00:01:07,750
come here and see some of the same

00:01:05,170 --> 00:01:10,780
people i hope that we as a community

00:01:07,750 --> 00:01:13,630
continue to make and take opportunities

00:01:10,780 --> 00:01:18,100
to see each other and talk face to face

00:01:13,630 --> 00:01:22,920
I think that's a good thing this is kind

00:01:18,100 --> 00:01:25,659
of a personal talk it's a talk about a

00:01:22,920 --> 00:01:27,670
strategy and a philosophy that has kind

00:01:25,659 --> 00:01:29,140
of shaped my career and has served me

00:01:27,670 --> 00:01:33,579
really well and it's one that I've tried

00:01:29,140 --> 00:01:35,710
to teach to programmers that I've had in

00:01:33,579 --> 00:01:39,009
training classes or had the opportunity

00:01:35,710 --> 00:01:40,990
to be a mentor to and and since it's a

00:01:39,009 --> 00:01:46,720
personal talk they're going to be a lot

00:01:40,990 --> 00:01:50,049
of stories and the first story happened

00:01:46,720 --> 00:01:52,960
in late two thousand five when I was in

00:01:50,049 --> 00:01:58,210
the process of shifting from kind of

00:01:52,960 --> 00:02:00,159
toying with rails on the side to you

00:01:58,210 --> 00:02:04,890
know using it full time in anger and

00:02:00,159 --> 00:02:04,890
becoming a full-time Ruby programmer and

00:02:05,200 --> 00:02:10,750
so I was having a conversation on the

00:02:07,539 --> 00:02:12,580
phone with my friend Mike Clark or maybe

00:02:10,750 --> 00:02:16,379
I should say my Ruby friend Mike Clark

00:02:12,580 --> 00:02:18,550
although I like this picture better and

00:02:16,379 --> 00:02:20,140
Mike was telling me about his rails

00:02:18,550 --> 00:02:23,920
project he was a little farther down

00:02:20,140 --> 00:02:25,450
that path than I was but he said I

00:02:23,920 --> 00:02:27,430
really like this project you should find

00:02:25,450 --> 00:02:30,849
yourself on a project like this it's

00:02:27,430 --> 00:02:33,940
giving me a chance to do a deep dive and

00:02:30,849 --> 00:02:35,260
look inside at rails as internals I

00:02:33,940 --> 00:02:36,940
think it's a really good thing and they

00:02:35,260 --> 00:02:38,380
said something that I had struck me

00:02:36,940 --> 00:02:42,790
immediately and I've never forgotten he

00:02:38,380 --> 00:02:45,819
said I like to visit all the turtles and

00:02:42,790 --> 00:02:47,950
you know I knew immediately what he was

00:02:45,819 --> 00:02:50,319
talking about he was referring to the

00:02:47,950 --> 00:02:52,390
old joke you know about the man who

00:02:50,319 --> 00:02:54,370
asserts firmly that the earth rides

00:02:52,390 --> 00:02:56,700
around on the back of a giant turtle and

00:02:54,370 --> 00:03:00,160
some whippersnapper says well okay but

00:02:56,700 --> 00:03:02,709
what does the turtle stand on and the

00:03:00,160 --> 00:03:04,630
old man says you're very you think

00:03:02,709 --> 00:03:09,760
you're very clever Sonny it's Turtles

00:03:04,630 --> 00:03:14,440
all the way down this phrase has entered

00:03:09,760 --> 00:03:16,269
our vocabulary we've already heard it

00:03:14,440 --> 00:03:20,620
once in this conference in a talk

00:03:16,269 --> 00:03:26,170
yesterday this is a screenshot from the

00:03:20,620 --> 00:03:29,109
borderlands video game and in our field

00:03:26,170 --> 00:03:32,340
the phrase turtles all the way down you

00:03:29,109 --> 00:03:35,620
know refers to the layers and layers of

00:03:32,340 --> 00:03:38,889
abstractions that we sit a top of when

00:03:35,620 --> 00:03:44,980
we work today each one building on top

00:03:38,889 --> 00:03:46,930
of the other various kinds of purists

00:03:44,980 --> 00:03:49,120
especially from the small talk and Lisp

00:03:46,930 --> 00:03:52,180
communities like to use that phrase to

00:03:49,120 --> 00:03:55,420
emphasize the consistency that all the

00:03:52,180 --> 00:03:57,670
layers in their platform are exactly the

00:03:55,420 --> 00:03:59,590
same are composed of the same kinds of

00:03:57,670 --> 00:04:02,139
things until you you know get down to

00:03:59,590 --> 00:04:04,959
the lair where they're not of course if

00:04:02,139 --> 00:04:07,180
that's what you care about you may you

00:04:04,959 --> 00:04:10,810
know do something crazy like have the Y

00:04:07,180 --> 00:04:12,340
Combinator tattooed on your forearm this

00:04:10,810 --> 00:04:15,010
is one of the results you get when you

00:04:12,340 --> 00:04:17,310
use google image search to find images

00:04:15,010 --> 00:04:22,950
and that your search terms are turtle

00:04:17,310 --> 00:04:25,590
all the way down believe it or not but

00:04:22,950 --> 00:04:30,510
most systems and most platforms aren't

00:04:25,590 --> 00:04:32,310
all that consistent you have layers

00:04:30,510 --> 00:04:33,780
built upon layers and they're all

00:04:32,310 --> 00:04:35,760
different they're all made of different

00:04:33,780 --> 00:04:37,680
things and they're all aimed at

00:04:35,760 --> 00:04:42,060
providing different kinds of

00:04:37,680 --> 00:04:46,740
abstractions how much of this do you

00:04:42,060 --> 00:04:50,550
need to know as a programmer is it

00:04:46,740 --> 00:04:53,790
possible to be happy and productive as a

00:04:50,550 --> 00:04:55,590
programmer only understanding the level

00:04:53,790 --> 00:04:57,210
of abstraction that you've chosen to

00:04:55,590 --> 00:05:00,389
work at and for most of us in this room

00:04:57,210 --> 00:05:02,960
it's probably rails how much do you need

00:05:00,389 --> 00:05:07,260
to know about what goes on underneath

00:05:02,960 --> 00:05:09,810
and it's a question that that takes some

00:05:07,260 --> 00:05:11,310
careful thought because you know one

00:05:09,810 --> 00:05:12,840
answer is nothing and I'm going to

00:05:11,310 --> 00:05:14,580
explain why I don't think that's the

00:05:12,840 --> 00:05:17,090
right answer but it can't be everything

00:05:14,580 --> 00:05:21,180
either because there's just too much

00:05:17,090 --> 00:05:23,039
Eric sink a well known windows and net

00:05:21,180 --> 00:05:25,470
developer wrote a blog post not long ago

00:05:23,039 --> 00:05:27,750
where he sort of tried off the top of

00:05:25,470 --> 00:05:29,700
his head to map out all the different

00:05:27,750 --> 00:05:32,340
layers of abstractions that dotnet

00:05:29,700 --> 00:05:35,250
programmers have to build on top of when

00:05:32,340 --> 00:05:38,220
they work I don't like ever putting

00:05:35,250 --> 00:05:39,660
things on a slide that are false so I'll

00:05:38,220 --> 00:05:41,010
just call out there's one thing he

00:05:39,660 --> 00:05:42,660
writes here that I think isn't

00:05:41,010 --> 00:05:44,850
necessarily always true abstractions

00:05:42,660 --> 00:05:47,220
reduced performance they certainly

00:05:44,850 --> 00:05:49,620
always have bugs and increase overall

00:05:47,220 --> 00:05:52,710
complexity sometimes though abstractions

00:05:49,620 --> 00:05:54,600
can an abstraction well chosen and well

00:05:52,710 --> 00:05:56,610
implemented can be a locus for

00:05:54,600 --> 00:05:58,650
optimization that otherwise wouldn't be

00:05:56,610 --> 00:06:02,100
possible and actually make things faster

00:05:58,650 --> 00:06:04,229
but in any case eric sync wrote this

00:06:02,100 --> 00:06:08,280
blog post about the dotnet abstraction

00:06:04,229 --> 00:06:14,430
pile and it kind of goes on for a while

00:06:08,280 --> 00:06:17,340
and you can't learn all that stuff when

00:06:14,430 --> 00:06:20,880
people talk about this they often refer

00:06:17,340 --> 00:06:24,650
to a famous 2002 article by joels polski

00:06:20,880 --> 00:06:26,580
called the law of leaky abstractions

00:06:24,650 --> 00:06:29,650
unfortunately most of what people

00:06:26,580 --> 00:06:32,300
remember from this article is that term

00:06:29,650 --> 00:06:36,050
leaky abstraction and we complain about

00:06:32,300 --> 00:06:38,330
abstractions that leak a lot and of

00:06:36,050 --> 00:06:39,979
course some abstractions leak more than

00:06:38,330 --> 00:06:41,930
others and some leak in different ways

00:06:39,979 --> 00:06:45,410
than others or in worse ways or better

00:06:41,930 --> 00:06:47,630
ways and that's mostly what we debate as

00:06:45,410 --> 00:06:49,729
an example I saw this on a stack

00:06:47,630 --> 00:06:51,440
overflow post that our argument with a

00:06:49,729 --> 00:06:52,970
friendly coder he was mildly damaged by

00:06:51,440 --> 00:06:54,410
the law of leaky abstractions it's very

00:06:52,970 --> 00:06:57,410
hard to convince him of using any new

00:06:54,410 --> 00:06:59,660
framework or toolbox at all that guy's

00:06:57,410 --> 00:07:04,520
kind of missing the point as anybody

00:06:59,660 --> 00:07:08,240
who's ever read oh I missed that slide

00:07:04,520 --> 00:07:10,909
okay this is what i get when i modify

00:07:08,240 --> 00:07:15,500
slides the day before there's a book by

00:07:10,909 --> 00:07:18,289
charles petzl called code that sort of

00:07:15,500 --> 00:07:19,669
starts at binary numbers and starts

00:07:18,289 --> 00:07:24,710
building up and if you've ever seen that

00:07:19,669 --> 00:07:28,940
book you know that even machine code is

00:07:24,710 --> 00:07:31,550
an abstraction on top of other things so

00:07:28,940 --> 00:07:34,370
the real point of spoel skis article was

00:07:31,550 --> 00:07:39,680
that all non-trivial abstractions to

00:07:34,370 --> 00:07:41,180
some degree are leaky and it's not the

00:07:39,680 --> 00:07:43,330
fact that an obstruction leaks doesn't

00:07:41,180 --> 00:07:46,509
make it bad it makes it an abstraction

00:07:43,330 --> 00:07:49,699
the question is how do they leak and in

00:07:46,509 --> 00:07:57,500
and do they leak in transparent ways or

00:07:49,699 --> 00:08:01,340
or opaque ways and usually the worst way

00:07:57,500 --> 00:08:03,409
abstractions leak is when they break as

00:08:01,340 --> 00:08:05,419
Neal Stephenson said it's commonly the

00:08:03,409 --> 00:08:06,889
case with technologies that you can gain

00:08:05,419 --> 00:08:09,650
the best insight about how they work by

00:08:06,889 --> 00:08:12,319
watching them fail and that's pretty

00:08:09,650 --> 00:08:15,860
cool if you are trying to figure out how

00:08:12,319 --> 00:08:17,710
they work inside right but most of the

00:08:15,860 --> 00:08:19,880
time that's not what you're trying to do

00:08:17,710 --> 00:08:23,599
you're trying to make something else

00:08:19,880 --> 00:08:25,400
work and then it fails and you are

00:08:23,599 --> 00:08:28,550
greeted with a stack trace from the

00:08:25,400 --> 00:08:31,009
bowels of this thing that deals in

00:08:28,550 --> 00:08:32,630
terminology that has nothing to do with

00:08:31,009 --> 00:08:34,760
the level of abstraction at which you

00:08:32,630 --> 00:08:37,010
think you're working right it's like

00:08:34,760 --> 00:08:38,870
when a clock breaks and you're suddenly

00:08:37,010 --> 00:08:39,770
faced with gears and cogs and springs

00:08:38,870 --> 00:08:43,390
and things that have nothing

00:08:39,770 --> 00:08:43,390
intrinsically to do with the notion of

00:08:43,430 --> 00:08:47,850
and it's easy to see why this happens

00:08:46,380 --> 00:08:49,620
because somebody building a library that

00:08:47,850 --> 00:08:52,350
implements an abstraction is going to be

00:08:49,620 --> 00:08:56,910
focused quite naturally on making it

00:08:52,350 --> 00:09:02,310
work properly more than making it fail

00:08:56,910 --> 00:09:03,570
well right and for one thing it's hard

00:09:02,310 --> 00:09:05,430
to imagine all the different ways that

00:09:03,570 --> 00:09:09,090
people could misuse your thing and make

00:09:05,430 --> 00:09:10,530
it break and for another thing that's

00:09:09,090 --> 00:09:13,230
not the most interesting part of the

00:09:10,530 --> 00:09:15,450
problem and for a third thing when that

00:09:13,230 --> 00:09:17,160
implementer sees something break it's

00:09:15,450 --> 00:09:18,810
not as jarring to them because they

00:09:17,160 --> 00:09:21,860
understand how it works inside so that

00:09:18,810 --> 00:09:24,420
stack trace or whatever isn't nearly as

00:09:21,860 --> 00:09:26,070
impenetrable to them as it is to us so

00:09:24,420 --> 00:09:28,620
it doesn't seem like quite such a big

00:09:26,070 --> 00:09:30,480
deal really good abstractions will take

00:09:28,620 --> 00:09:32,820
care to make this better this is a

00:09:30,480 --> 00:09:34,110
recent comment from Jim wyrick you can

00:09:32,820 --> 00:09:35,550
tell the maturity of a framework by the

00:09:34,110 --> 00:09:39,900
quality of the error messages it

00:09:35,550 --> 00:09:42,090
produces I think that's true however in

00:09:39,900 --> 00:09:44,610
practice the quality of said error

00:09:42,090 --> 00:09:50,850
messages generally ranges from appalling

00:09:44,610 --> 00:09:53,190
to merely bad spoel skis real point was

00:09:50,850 --> 00:09:55,380
this in teaching someone about calm

00:09:53,190 --> 00:09:57,060
programming remember this is 2002 it

00:09:55,380 --> 00:09:58,650
would be nice if I could just teach them

00:09:57,060 --> 00:10:00,060
how to use the visual studio wizards and

00:09:58,650 --> 00:10:01,410
all the code generation features but if

00:10:00,060 --> 00:10:03,690
anything goes wrong they will not have

00:10:01,410 --> 00:10:07,440
the vaguest idea of what happened or how

00:10:03,690 --> 00:10:09,270
to debug it and recover from it so with

00:10:07,440 --> 00:10:13,070
that long intro this talk is about

00:10:09,270 --> 00:10:15,840
visiting all the turtles why and how

00:10:13,070 --> 00:10:18,870
what you need the importance of knowing

00:10:15,840 --> 00:10:23,190
what goes on underneath that first level

00:10:18,870 --> 00:10:25,350
of abstraction and why and how to go

00:10:23,190 --> 00:10:33,270
about it and so it's time for another

00:10:25,350 --> 00:10:34,770
story my second job full-time job after

00:10:33,270 --> 00:10:38,850
I left college was at the university of

00:10:34,770 --> 00:10:40,680
texas at dallas at that time at any rate

00:10:38,850 --> 00:10:42,180
university computing departments were

00:10:40,680 --> 00:10:44,580
great places to learn a whole bunch of

00:10:42,180 --> 00:10:46,530
stuff because i mean these days there's

00:10:44,580 --> 00:10:49,110
really only one kind of computer right

00:10:46,530 --> 00:10:52,440
but back then there were a bunch and you

00:10:49,110 --> 00:10:54,630
get you got crazy weird stuff donated to

00:10:52,440 --> 00:10:56,400
you from alumni that had gone to work

00:10:54,630 --> 00:10:58,890
this or that computer company or

00:10:56,400 --> 00:11:00,630
whatever and because it's a donation you

00:10:58,890 --> 00:11:03,330
can't say we don't know how to use that

00:11:00,630 --> 00:11:05,940
so no thanks you take it and you make it

00:11:03,330 --> 00:11:08,580
work and I worked with a guy there named

00:11:05,940 --> 00:11:12,900
Billy Baron and we were both pretty

00:11:08,580 --> 00:11:15,180
young guys and but we the two of us

00:11:12,900 --> 00:11:18,090
pretty quickly got the reputation in

00:11:15,180 --> 00:11:20,460
this group of programmers and sis admins

00:11:18,090 --> 00:11:22,320
as the guys who could figure out what

00:11:20,460 --> 00:11:26,940
was wrong when everybody else was stuck

00:11:22,320 --> 00:11:28,440
right and you know not not to denigrate

00:11:26,940 --> 00:11:31,740
the others there were some great people

00:11:28,440 --> 00:11:35,520
there but we we had this reputation and

00:11:31,740 --> 00:11:39,360
so an enterprising student that worked

00:11:35,520 --> 00:11:42,060
for us saw this and kind of wanted to to

00:11:39,360 --> 00:11:45,120
learn our secret so independently

00:11:42,060 --> 00:11:47,280
separately he asked us how we learned

00:11:45,120 --> 00:11:50,640
all that stuff and how we got that way

00:11:47,280 --> 00:11:52,020
and how he could get that way and the

00:11:50,640 --> 00:11:54,750
interesting thing was that Billy and I

00:11:52,020 --> 00:11:57,710
both told him that it was something that

00:11:54,750 --> 00:11:59,880
our very first mentor had taught us and

00:11:57,710 --> 00:12:01,500
the second interesting thing is that

00:11:59,880 --> 00:12:03,270
even though we went to different schools

00:12:01,500 --> 00:12:05,070
and had never met each other before we

00:12:03,270 --> 00:12:09,120
ended up at that job we had the same

00:12:05,070 --> 00:12:11,070
mentor it was this guy David lipke not

00:12:09,120 --> 00:12:13,850
David Libke who's a well-known closure

00:12:11,070 --> 00:12:20,460
programmer but David lipke as an aside

00:12:13,850 --> 00:12:24,410
from about 1993 to 2003 he was the vp of

00:12:20,460 --> 00:12:27,000
operations at AOL and was the guy behind

00:12:24,410 --> 00:12:31,320
AOL instant messenger but you know

00:12:27,000 --> 00:12:33,300
that's not the time I knew him Billy and

00:12:31,320 --> 00:12:36,510
I both told this student independently

00:12:33,300 --> 00:12:38,220
that the way we were able to figure out

00:12:36,510 --> 00:12:40,580
all this stuff and understand all this

00:12:38,220 --> 00:12:46,230
stuff was that David lipke had taught us

00:12:40,580 --> 00:12:48,240
the same lesson don't be afraid so

00:12:46,230 --> 00:12:51,390
that's the first point I want to make

00:12:48,240 --> 00:12:53,190
and what David told me over and over

00:12:51,390 --> 00:12:56,990
again was some of this stuff seems

00:12:53,190 --> 00:12:59,760
complicated and impenetrable and and

00:12:56,990 --> 00:13:02,310
intimidating and you might hesitate to

00:12:59,760 --> 00:13:03,480
even try to open the covers on that and

00:13:02,310 --> 00:13:06,930
learn it because you think you would

00:13:03,480 --> 00:13:07,150
fail and get confused and he said none

00:13:06,930 --> 00:13:09,160
of

00:13:07,150 --> 00:13:11,260
this stuff is that complicated it kind

00:13:09,160 --> 00:13:13,480
of looks that way from the outside but

00:13:11,260 --> 00:13:16,030
you're capable of understanding it so

00:13:13,480 --> 00:13:20,770
don't be afraid open it up look inside

00:13:16,030 --> 00:13:22,660
figure out how it works on the inside so

00:13:20,770 --> 00:13:24,490
at around around the same time while I

00:13:22,660 --> 00:13:26,260
was working at UT Dallas I became one of

00:13:24,490 --> 00:13:28,300
the first people outside of Sun

00:13:26,260 --> 00:13:31,090
Microsystems to get get his hands on a

00:13:28,300 --> 00:13:34,270
copy of Java it was still called oak at

00:13:31,090 --> 00:13:36,070
that time and I learned it really early

00:13:34,270 --> 00:13:37,540
on and compared to the other things I

00:13:36,070 --> 00:13:40,600
had available to me it looked pretty

00:13:37,540 --> 00:13:42,730
cool and i was i got into a little bit

00:13:40,600 --> 00:13:45,730
and as a result i was signed on to write

00:13:42,730 --> 00:13:50,680
a book about it and those of you who

00:13:45,730 --> 00:13:52,120
remember 1995 and java at that time

00:13:50,680 --> 00:13:54,580
remember that one of the things people

00:13:52,120 --> 00:13:56,080
were excited about was applets and part

00:13:54,580 --> 00:13:58,870
of the supporting structure for that was

00:13:56,080 --> 00:14:00,520
this security model for untrusted code

00:13:58,870 --> 00:14:03,520
that was built into the Java Virtual

00:14:00,520 --> 00:14:05,890
Machine so in the outline I proposed for

00:14:03,520 --> 00:14:07,360
this book I was going to write a chapter

00:14:05,890 --> 00:14:10,560
on the security model which was

00:14:07,360 --> 00:14:13,240
thoroughly undocumented but no worries

00:14:10,560 --> 00:14:15,870
one of the secret weapons of Java

00:14:13,240 --> 00:14:19,210
programmers back in those days was that

00:14:15,870 --> 00:14:20,890
almost alone among serious programming

00:14:19,210 --> 00:14:24,400
languages that that people used in

00:14:20,890 --> 00:14:27,280
industry java came with a jar footwell a

00:14:24,400 --> 00:14:31,180
zip file then of all the source code of

00:14:27,280 --> 00:14:33,010
its standard library so no sweat that

00:14:31,180 --> 00:14:34,780
this is undocumented I'm the kind of guy

00:14:33,010 --> 00:14:36,460
who was taught not to be afraid and I

00:14:34,780 --> 00:14:38,680
can crack open this stuff and go in and

00:14:36,460 --> 00:14:43,450
read him to figure it out so i'll write

00:14:38,680 --> 00:14:45,280
this chapter and i got started on it and

00:14:43,450 --> 00:14:47,950
then that was when I learned that really

00:14:45,280 --> 00:14:49,450
there was a small subset of Java library

00:14:47,950 --> 00:14:52,390
classes that we didn't have the source

00:14:49,450 --> 00:14:57,880
code for and the security manager was

00:14:52,390 --> 00:14:59,920
one of them now alert viewers will

00:14:57,880 --> 00:15:03,700
probably be saying that's an elephant

00:14:59,920 --> 00:15:08,770
not a turtle why is this picture here

00:15:03,700 --> 00:15:10,930
and talked about turtles because they

00:15:08,770 --> 00:15:15,220
rincewind and the elephant are standing

00:15:10,930 --> 00:15:16,810
on a giant turtle okay there you go so I

00:15:15,220 --> 00:15:19,600
had committed to write this thing about

00:15:16,810 --> 00:15:20,680
the Java security model and to my

00:15:19,600 --> 00:15:22,420
surprise I found

00:15:20,680 --> 00:15:25,720
I did not have the source code to the

00:15:22,420 --> 00:15:27,760
security manager so I decided while I

00:15:25,720 --> 00:15:29,200
thought about that problem I'd write the

00:15:27,760 --> 00:15:31,960
rest of the book and write the security

00:15:29,200 --> 00:15:34,420
chapter last and what I eventually ended

00:15:31,960 --> 00:15:36,880
up doing java came with and still does

00:15:34,420 --> 00:15:40,570
come with a disassembler for class files

00:15:36,880 --> 00:15:43,270
and so I spent the super bowl of 1996

00:15:40,570 --> 00:15:47,290
sitting on the couch with a printout of

00:15:43,270 --> 00:15:49,690
the disassembled bike codes of the Java

00:15:47,290 --> 00:15:52,000
security manager class and a printout of

00:15:49,690 --> 00:15:55,270
the Java Virtual Machine spec open

00:15:52,000 --> 00:15:59,140
behind me beside me on the couch reading

00:15:55,270 --> 00:16:00,880
and trying to interpret these byte codes

00:15:59,140 --> 00:16:05,440
so I could understand how the Java

00:16:00,880 --> 00:16:07,390
security model worked I'm telling you

00:16:05,440 --> 00:16:12,750
this as an example of you know don't be

00:16:07,390 --> 00:16:15,370
afraid it it seems pretty intimidating

00:16:12,750 --> 00:16:18,430
by about the beginning of the second

00:16:15,370 --> 00:16:20,560
quarter of that super bowl I could

00:16:18,430 --> 00:16:25,420
mostly kind of read this as though it

00:16:20,560 --> 00:16:30,400
were source code and I can still do that

00:16:25,420 --> 00:16:33,430
today it turned out to be pretty easy to

00:16:30,400 --> 00:16:38,200
learn that skill it hasn't been useful

00:16:33,430 --> 00:16:41,560
very often but it's been useful more

00:16:38,200 --> 00:16:44,230
often than you might think and five or

00:16:41,560 --> 00:16:46,930
six times in my career the skill I

00:16:44,230 --> 00:16:50,110
learned watching the Super Bowl in 1996

00:16:46,930 --> 00:16:51,910
has made me the hero of a project that

00:16:50,110 --> 00:16:53,680
was stuck because there was something we

00:16:51,910 --> 00:16:57,790
couldn't figure out about some

00:16:53,680 --> 00:17:04,870
proprietary bit of Java code so point

00:16:57,790 --> 00:17:09,670
number one don't be afraid point to make

00:17:04,870 --> 00:17:13,600
it easy to explore when I first started

00:17:09,670 --> 00:17:17,140
working with rails one of the things

00:17:13,600 --> 00:17:19,329
that that struck me as difficult right

00:17:17,140 --> 00:17:21,850
off the bat was that rails wasn't just

00:17:19,329 --> 00:17:24,670
one package it was a bundle of different

00:17:21,850 --> 00:17:27,089
packages and I understand why they did

00:17:24,670 --> 00:17:29,070
that but nevertheless

00:17:27,089 --> 00:17:31,679
you know at that time I didn't know

00:17:29,070 --> 00:17:33,480
enough to even know necessarily if I'm

00:17:31,679 --> 00:17:34,770
trying to figure out what's happening in

00:17:33,480 --> 00:17:36,510
this part of the system or that part of

00:17:34,770 --> 00:17:38,520
the system whether that's defined an

00:17:36,510 --> 00:17:41,159
active record or action pack or active

00:17:38,520 --> 00:17:42,419
support or any of those things so like

00:17:41,159 --> 00:17:45,960
everybody else who was doing rails at

00:17:42,419 --> 00:17:47,340
that time i was using text mate and text

00:17:45,960 --> 00:17:48,990
mate has this little own feature how

00:17:47,340 --> 00:17:52,470
many how many people know about the

00:17:48,990 --> 00:17:55,890
project's feature in text mate anyone a

00:17:52,470 --> 00:17:57,480
few you in addition to just being able

00:17:55,890 --> 00:18:01,140
to open it up on a directory you can

00:17:57,480 --> 00:18:04,820
kind of define projects and drag in code

00:18:01,140 --> 00:18:07,649
from all over the place so I built this

00:18:04,820 --> 00:18:09,990
textmate project that I always kept open

00:18:07,649 --> 00:18:13,320
in a separate workspace that had all of

00:18:09,990 --> 00:18:15,870
the rails gems not those versions of

00:18:13,320 --> 00:18:17,640
course back then loaded into it as a

00:18:15,870 --> 00:18:20,309
project so that I could do full-text

00:18:17,640 --> 00:18:22,529
searches across the entire rails code

00:18:20,309 --> 00:18:26,970
base and find how things were

00:18:22,529 --> 00:18:28,620
implemented no magic there but I was

00:18:26,970 --> 00:18:33,899
just interested in lowering those

00:18:28,620 --> 00:18:36,120
barriers to being able to explore and

00:18:33,899 --> 00:18:39,149
crack open the source code and go in and

00:18:36,120 --> 00:18:41,070
figure out what goes on a lot of people

00:18:39,149 --> 00:18:45,120
didn't and still don't like rails

00:18:41,070 --> 00:18:47,539
because of all the magic after about two

00:18:45,120 --> 00:18:50,010
months it didn't seem like magic to me

00:18:47,539 --> 00:18:52,500
because every time I would encounter

00:18:50,010 --> 00:18:57,510
something that seemed like magic and I

00:18:52,500 --> 00:19:01,830
wondered how that worked I would go find

00:18:57,510 --> 00:19:04,940
out how it worked and so a lot of the

00:19:01,830 --> 00:19:07,470
stuff that seems like magic to people

00:19:04,940 --> 00:19:09,899
pretty quickly seemed like perfectly

00:19:07,470 --> 00:19:11,640
ordinary reasonable stuff to me that I

00:19:09,899 --> 00:19:14,250
understood how I was working in inside

00:19:11,640 --> 00:19:17,070
and once you have that level of

00:19:14,250 --> 00:19:19,500
understanding you can much more reliably

00:19:17,070 --> 00:19:21,299
right correct code that uses those

00:19:19,500 --> 00:19:23,520
magical magical things because you know

00:19:21,299 --> 00:19:28,250
what's really happening still very

00:19:23,520 --> 00:19:31,169
useful still save me a lot of effort

00:19:28,250 --> 00:19:32,490
writing code here and there but it was

00:19:31,169 --> 00:19:35,610
very useful that I knew what was going

00:19:32,490 --> 00:19:38,120
on under the covers so make it easy to

00:19:35,610 --> 00:19:38,120
explore

00:19:39,180 --> 00:19:46,060
point three is to choose tools that make

00:19:42,010 --> 00:19:50,140
sense a lot of we talked about

00:19:46,060 --> 00:19:52,450
abstractions leaking just before I

00:19:50,140 --> 00:19:56,130
encountered rails I worked a lot with a

00:19:52,450 --> 00:20:00,790
an object relational mapping library

00:19:56,130 --> 00:20:04,270
that I won't name but it tried to build

00:20:00,790 --> 00:20:06,760
a perfect pure abstraction around the

00:20:04,270 --> 00:20:08,800
database that hid the database from you

00:20:06,760 --> 00:20:11,650
completely to the point of having its

00:20:08,800 --> 00:20:14,290
own query language that was not sequel

00:20:11,650 --> 00:20:16,000
and you would have to configure it to

00:20:14,290 --> 00:20:19,840
understand your schema but then once you

00:20:16,000 --> 00:20:23,500
did that everything looks like objects

00:20:19,840 --> 00:20:26,770
and the person who wrote that framework

00:20:23,500 --> 00:20:28,570
was a friend of mine and when I started

00:20:26,770 --> 00:20:32,410
veering off into rails he was really

00:20:28,570 --> 00:20:34,930
disgusted and any particularly hated

00:20:32,410 --> 00:20:38,980
active record because the sequel leaked

00:20:34,930 --> 00:20:41,710
through everywhere and but but what I

00:20:38,980 --> 00:20:44,020
learned from this experience was if you

00:20:41,710 --> 00:20:49,000
try to build a perfect abstraction that

00:20:44,020 --> 00:20:50,710
doesn't leak Joel's law says that it

00:20:49,000 --> 00:20:54,280
will leak anyway and it'll leak in

00:20:50,710 --> 00:20:57,640
subtle insidious ways that bite you when

00:20:54,280 --> 00:20:59,350
you least expect it and I learn to kind

00:20:57,640 --> 00:21:03,550
of like active record because active

00:20:59,350 --> 00:21:05,440
record leaks intentionally and in ways

00:21:03,550 --> 00:21:07,840
that are fairly easy to understand I

00:21:05,440 --> 00:21:11,680
kind of like to refer to active record

00:21:07,840 --> 00:21:14,650
as an onion skin API there are very low

00:21:11,680 --> 00:21:16,450
level facilities and then higher level

00:21:14,650 --> 00:21:18,970
facilities are built on top of that and

00:21:16,450 --> 00:21:21,460
on and on and on but each of those

00:21:18,970 --> 00:21:23,110
layers is still documented and available

00:21:21,460 --> 00:21:25,300
to the end user they're not hidden away

00:21:23,110 --> 00:21:29,350
deep somewhere we're not allowed to use

00:21:25,300 --> 00:21:34,330
them can you think of another system

00:21:29,350 --> 00:21:38,470
kind of like that that we use a lot unix

00:21:34,330 --> 00:21:41,290
I really liked the talk yesterday

00:21:38,470 --> 00:21:43,210
systems programming talk yesterday is it

00:21:41,290 --> 00:21:44,770
talked about diving below some of those

00:21:43,210 --> 00:21:46,390
ups layers of abstraction that we've

00:21:44,770 --> 00:21:49,540
just kind of learned to live with and

00:21:46,390 --> 00:21:52,570
going to a much deeper layer and it's

00:21:49,540 --> 00:21:54,009
even if you never do that

00:21:52,570 --> 00:21:56,259
it's great for you to kind of understand

00:21:54,009 --> 00:21:58,389
how unicorn works and things like that

00:21:56,259 --> 00:22:00,220
so but can anybody think of any other

00:21:58,389 --> 00:22:02,350
system that a lot of us in this room use

00:22:00,220 --> 00:22:05,820
all the time that has this onion skin

00:22:02,350 --> 00:22:05,820
like characteristic of active record

00:22:06,090 --> 00:22:15,070
Ruby the Internet the JVM I know some

00:22:13,779 --> 00:22:18,730
people in this room work for a company

00:22:15,070 --> 00:22:22,090
that that has banked on it a lot get

00:22:18,730 --> 00:22:25,840
there you go get has that characteristic

00:22:22,090 --> 00:22:29,080
in fact parts of guitar known as the

00:22:25,840 --> 00:22:30,940
porcelain and the plumbing right but the

00:22:29,080 --> 00:22:32,679
Plumbing's still all documented and you

00:22:30,940 --> 00:22:35,440
can get into it and use it if you need

00:22:32,679 --> 00:22:37,210
to but then the plumbing is with those

00:22:35,440 --> 00:22:40,600
higher-level facilities the porcelain is

00:22:37,210 --> 00:22:43,570
built on tools like that leak in ways

00:22:40,600 --> 00:22:49,840
that make sense and you can understand

00:22:43,570 --> 00:22:52,450
them and I like to choose tools that

00:22:49,840 --> 00:22:55,629
have that transparent quality where you

00:22:52,450 --> 00:22:57,940
can if you want to without disassembling

00:22:55,629 --> 00:23:00,730
bytecodes and sitting on the couch with

00:22:57,940 --> 00:23:04,740
them understand what goes on under the

00:23:00,730 --> 00:23:08,919
covers as a corollary to this point of

00:23:04,740 --> 00:23:11,740
also read documentation that makes

00:23:08,919 --> 00:23:13,870
things make sense raise your hand if you

00:23:11,740 --> 00:23:20,919
had trouble with get when you first

00:23:13,870 --> 00:23:22,809
encountered it okay raise your hand if

00:23:20,919 --> 00:23:25,029
what eventually made it click was

00:23:22,809 --> 00:23:27,190
finding some documentation that explains

00:23:25,029 --> 00:23:30,789
some of the internals and conceptual

00:23:27,190 --> 00:23:33,269
foundations of get okay about half those

00:23:30,789 --> 00:23:35,230
who raise their hand of the first time

00:23:33,269 --> 00:23:37,360
there's a there's a there are a lot of

00:23:35,230 --> 00:23:41,080
tutorials and documents that try to make

00:23:37,360 --> 00:23:43,059
get make sense just by saying here's how

00:23:41,080 --> 00:23:45,340
you use it to do the you to do the

00:23:43,059 --> 00:23:46,720
things you need to do every day and that

00:23:45,340 --> 00:23:48,490
works fine until you need to do

00:23:46,720 --> 00:23:50,799
something a little different and then

00:23:48,490 --> 00:23:54,000
you make a mistake and you panic and you

00:23:50,799 --> 00:23:56,919
don't know how to recover from it right

00:23:54,000 --> 00:23:58,720
for a lot of us what finally made get

00:23:56,919 --> 00:24:01,960
makes sense and made us feel comfortable

00:23:58,720 --> 00:24:05,340
there was learning about a tool learning

00:24:01,960 --> 00:24:05,340
about some documentation that

00:24:06,039 --> 00:24:15,529
explains the conceptual foundations of

00:24:08,870 --> 00:24:17,299
get to us and you know I'm not talking

00:24:15,529 --> 00:24:20,600
about you know once you understand that

00:24:17,299 --> 00:24:24,100
all of get is mappings over Hilbert you

00:24:20,600 --> 00:24:26,830
know endo functors in Hilbert space

00:24:24,100 --> 00:24:30,440
whatever that famous to tweet was

00:24:26,830 --> 00:24:33,019
there's a good example is a website that

00:24:30,440 --> 00:24:35,600
was written by a guy who works for me

00:24:33,019 --> 00:24:40,760
now Sam Livingston gray called think

00:24:35,600 --> 00:24:44,389
like a get and he explains some of the

00:24:40,760 --> 00:24:47,299
graph theory principles that get is

00:24:44,389 --> 00:24:51,169
based on and works through it at that

00:24:47,299 --> 00:24:55,100
level and those kinds of things helped a

00:24:51,169 --> 00:24:57,409
lot another good example a blog post i

00:24:55,100 --> 00:25:00,230
came across a little while ago and you

00:24:57,409 --> 00:25:02,330
know i'm an emacs guy but this is a blog

00:25:00,230 --> 00:25:04,130
post about them and i think the guy

00:25:02,330 --> 00:25:05,990
makes a really good point for my first

00:25:04,130 --> 00:25:07,100
15 years with them i tried to learn it

00:25:05,990 --> 00:25:09,409
the same way you might learn a foreign

00:25:07,100 --> 00:25:12,230
language from a phrase book or get from

00:25:09,409 --> 00:25:14,630
a typical tutorial in a disconnected way

00:25:12,230 --> 00:25:16,399
is j to move down a line CW to change a

00:25:14,630 --> 00:25:18,289
word use YY to copy the current line

00:25:16,399 --> 00:25:20,169
into a buffer you can get by this way

00:25:18,289 --> 00:25:22,700
but it's a very simplistic approach

00:25:20,169 --> 00:25:24,139
advanced vm users understand that vim

00:25:22,700 --> 00:25:26,330
commands are a language unto themselves

00:25:24,139 --> 00:25:28,880
and that the key to being productive is

00:25:26,330 --> 00:25:30,260
understanding vims grammar consisting of

00:25:28,880 --> 00:25:32,990
the following parts of speech verbs

00:25:30,260 --> 00:25:37,700
nouns and modifiers how many of you've

00:25:32,990 --> 00:25:39,799
read this it's awesome it it really

00:25:37,700 --> 00:25:42,740
explains you know the structure and the

00:25:39,799 --> 00:25:45,769
conceptual foundation of this vast get

00:25:42,740 --> 00:25:49,220
command set and gives you a framework to

00:25:45,769 --> 00:25:50,899
hand get them command set and gives you

00:25:49,220 --> 00:25:52,880
a framework to hang all those little

00:25:50,899 --> 00:25:58,399
bits of knowledge on and it makes a lot

00:25:52,880 --> 00:26:00,260
more sense that way so choose tools that

00:25:58,399 --> 00:26:06,620
make sense and documentation that

00:26:00,260 --> 00:26:10,340
reveals that underlying sense try

00:26:06,620 --> 00:26:12,200
building your own this has always been a

00:26:10,340 --> 00:26:15,889
good strategy for someone who is seeking

00:26:12,200 --> 00:26:18,100
to become a master right okay no turtles

00:26:15,889 --> 00:26:18,100
here

00:26:18,429 --> 00:26:23,090
years ago at a conference i saw chad

00:26:21,110 --> 00:26:25,850
foul or give a talk about active record

00:26:23,090 --> 00:26:28,670
that was a great talk called active

00:26:25,850 --> 00:26:33,350
record easy living on the Golden Path

00:26:28,670 --> 00:26:40,370
and basically he started with an empty

00:26:33,350 --> 00:26:42,740
window empty text mate window and built

00:26:40,370 --> 00:26:46,030
a model class that would call out to the

00:26:42,740 --> 00:26:49,010
database to load instances of itself and

00:26:46,030 --> 00:26:51,710
gradually bit by bit he built

00:26:49,010 --> 00:26:55,340
persistence operations directly into

00:26:51,710 --> 00:26:59,450
that class and then abstracted them away

00:26:55,340 --> 00:27:02,150
over the course of an hour and ended up

00:26:59,450 --> 00:27:05,570
with a class that looked just like a

00:27:02,150 --> 00:27:08,470
typical active record model and another

00:27:05,570 --> 00:27:12,710
class that contains some of the

00:27:08,470 --> 00:27:16,280
simplified of course internals of active

00:27:12,710 --> 00:27:19,280
record now of course there's a lot

00:27:16,280 --> 00:27:21,950
farther to go than that and Chad's

00:27:19,280 --> 00:27:26,870
purpose in doing this was teaching it

00:27:21,950 --> 00:27:29,990
and then throwing it away not many of us

00:27:26,870 --> 00:27:32,570
will go build a new tool by ourselves as

00:27:29,990 --> 00:27:35,750
a way of learning about how our existing

00:27:32,570 --> 00:27:39,559
tools work and then adopt our new tool

00:27:35,750 --> 00:27:41,480
as the thing we use but even the act of

00:27:39,559 --> 00:27:43,520
building a simplified version can really

00:27:41,480 --> 00:27:45,770
teach us something about the tools we do

00:27:43,520 --> 00:27:49,010
use another good example of this is a

00:27:45,770 --> 00:27:51,380
screencast by Jim wyrick called source

00:27:49,010 --> 00:27:55,160
control made easy where he sort of

00:27:51,380 --> 00:27:58,280
builds up get from first principles not

00:27:55,160 --> 00:28:00,799
at the code level but explaining how you

00:27:58,280 --> 00:28:02,600
would design a revision control system

00:28:00,799 --> 00:28:04,190
to solve first you know the first

00:28:02,600 --> 00:28:07,340
problem you encounter and then the next

00:28:04,190 --> 00:28:09,770
problem and so on and so forth until he

00:28:07,340 --> 00:28:13,250
has built conceptually a command set

00:28:09,770 --> 00:28:17,860
that mimics gets and at and that's how

00:28:13,250 --> 00:28:17,860
he explained how get worked to people

00:28:18,640 --> 00:28:22,910
another good example of that is how have

00:28:21,410 --> 00:28:27,020
you know the story of the creation of

00:28:22,910 --> 00:28:29,620
rake Jim will tell you that he

00:28:27,020 --> 00:28:31,850
accidentally wrote rake in an afternoon

00:28:29,620 --> 00:28:37,039
he never intended to write

00:28:31,850 --> 00:28:39,770
rake he's sorry for it they had a

00:28:37,039 --> 00:28:42,860
conversation where they were frustrated

00:28:39,770 --> 00:28:45,470
with make and he thought oh if only this

00:28:42,860 --> 00:28:48,890
were written in Ruby but that would be

00:28:45,470 --> 00:28:50,570
crazy and went back to his desk and one

00:28:48,890 --> 00:28:52,039
of his co-workers said well what do you

00:28:50,570 --> 00:28:55,220
mean by that what would it look like and

00:28:52,039 --> 00:28:58,039
he's well but you know let's try to

00:28:55,220 --> 00:29:00,200
build a little prototype and about an

00:28:58,039 --> 00:29:03,049
hour later he had version one

00:29:00,200 --> 00:29:09,860
essentially of rake it was just that

00:29:03,049 --> 00:29:12,710
easy so try building one yourself the

00:29:09,860 --> 00:29:14,720
final point I want to make when I talk

00:29:12,710 --> 00:29:20,270
to people about this sometimes they will

00:29:14,720 --> 00:29:23,480
say well my employer is not paying me to

00:29:20,270 --> 00:29:24,950
do all of this stuff to learn about what

00:29:23,480 --> 00:29:27,260
goes on under the hood of these

00:29:24,950 --> 00:29:31,030
technologies to go read the source code

00:29:27,260 --> 00:29:33,380
of rails to go try building one myself

00:29:31,030 --> 00:29:36,470
so that I can understand it better and

00:29:33,380 --> 00:29:39,530
and I think that's just wrong I think

00:29:36,470 --> 00:29:42,140
this is part of your job I think a

00:29:39,530 --> 00:29:45,650
professional understands his or her

00:29:42,140 --> 00:29:48,020
tools and this is part of what you're

00:29:45,650 --> 00:29:50,480
being paid for your employer might not

00:29:48,020 --> 00:29:53,990
understand all the reasons why this is

00:29:50,480 --> 00:29:57,559
part of your job and a good thing but

00:29:53,990 --> 00:30:00,230
nevertheless it is i mentioned learning

00:29:57,559 --> 00:30:03,770
to read java disassemble java bytecodes

00:30:00,230 --> 00:30:05,929
as if they were java source code and I

00:30:03,770 --> 00:30:10,220
said you know that hasn't been useful to

00:30:05,929 --> 00:30:14,799
me very much very often but when it has

00:30:10,220 --> 00:30:14,799
been useful it's been very useful and

00:30:14,950 --> 00:30:21,230
you can all probably point to people in

00:30:17,809 --> 00:30:23,630
your organization if it's not you who

00:30:21,230 --> 00:30:26,960
they're the ones you go to when you have

00:30:23,630 --> 00:30:29,000
the horrible nasty stack trace from deep

00:30:26,960 --> 00:30:30,980
in the bowels of your framework or the

00:30:29,000 --> 00:30:33,020
framework that your framework uses or so

00:30:30,980 --> 00:30:35,210
on and so forth and you can't figure out

00:30:33,020 --> 00:30:37,630
what to do but I know so and so we'll be

00:30:35,210 --> 00:30:40,850
able to figure it out probably right and

00:30:37,630 --> 00:30:43,370
they're the ones who know this stuff and

00:30:40,850 --> 00:30:45,620
they're valuable to your team because

00:30:43,370 --> 00:30:48,170
they know this stuff

00:30:45,620 --> 00:30:51,530
and a company that thinks this is not

00:30:48,170 --> 00:30:55,130
part of your job is trading the future

00:30:51,530 --> 00:30:58,220
away for a small productivity advantage

00:30:55,130 --> 00:31:01,100
now you do have to exercise some

00:30:58,220 --> 00:31:07,670
discipline it's easy to waste a lot of

00:31:01,100 --> 00:31:10,900
time shaving yaks but you know it's your

00:31:07,670 --> 00:31:15,440
job to figure out how the things you use

00:31:10,900 --> 00:31:16,790
under the covers work and you and your

00:31:15,440 --> 00:31:19,640
employer are just going to have to deal

00:31:16,790 --> 00:31:24,490
with that you need to be prepared for

00:31:19,640 --> 00:31:24,490
some things some days that aren't fun

00:31:24,610 --> 00:31:30,460
sometimes when you crack open the tools

00:31:28,040 --> 00:31:33,170
you're using you'll wish you hadn't

00:31:30,460 --> 00:31:36,340
you'll find structures so rickety that

00:31:33,170 --> 00:31:38,420
it's amazing they even stand up at all

00:31:36,340 --> 00:31:41,530
you'll find things that look like

00:31:38,420 --> 00:31:47,660
horrors from a different dimension

00:31:41,530 --> 00:31:49,309
unholy marriages sometimes you'll wonder

00:31:47,660 --> 00:31:55,010
if the author of this framework wasn't

00:31:49,309 --> 00:31:57,170
just playing a bad joke on everybody but

00:31:55,010 --> 00:32:00,610
it's worth persisting because it's part

00:31:57,170 --> 00:32:00,610
of your job thank

00:32:39,580 --> 00:32:41,640

YouTube URL: https://www.youtube.com/watch?v=AN6pCA4qjyg


