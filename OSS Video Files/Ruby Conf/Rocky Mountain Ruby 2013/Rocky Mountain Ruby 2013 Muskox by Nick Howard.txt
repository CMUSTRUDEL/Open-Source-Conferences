Title: Rocky Mountain Ruby 2013 Muskox by Nick Howard
Publication date: 2020-01-27
Playlist: Rocky Mountain Ruby 2013
Description: 
	Help us caption & translate this video!

http://amara.org/v/FG7A/
Captions: 
	00:00:07,640 --> 00:00:13,560
so everyone familiar with parser

00:00:10,860 --> 00:00:15,210
generators maybe you've heard of yak and

00:00:13,560 --> 00:00:16,769
bison well I'm here to talk to you about

00:00:15,210 --> 00:00:20,820
a new parser generator that I've written

00:00:16,769 --> 00:00:25,380
called musk ox so parts of generators

00:00:20,820 --> 00:00:28,140
Yeah right whoa they're awesome definite

00:00:25,380 --> 00:00:31,169
input also yeah maybe maybe I'll explain

00:00:28,140 --> 00:00:33,750
that in a moment so security we all want

00:00:31,169 --> 00:00:35,460
security right security is important but

00:00:33,750 --> 00:00:37,920
it why definite info that's kind of

00:00:35,460 --> 00:00:40,050
weird so here's what I'm an X plane so

00:00:37,920 --> 00:00:41,280
rails has some security issues most of

00:00:40,050 --> 00:00:44,660
these issues that we've seen recently

00:00:41,280 --> 00:00:47,430
are due to weird inputs like this

00:00:44,660 --> 00:00:51,030
someone's like oh it turns out rails

00:00:47,430 --> 00:00:53,370
will take ya mole inside XML and when

00:00:51,030 --> 00:00:56,940
you do that it will evaluate things and

00:00:53,370 --> 00:00:58,470
that's not good or like this this is

00:00:56,940 --> 00:01:00,810
what's called the billion laughs attack

00:00:58,470 --> 00:01:02,970
on XML turns out the XML allows you to

00:01:00,810 --> 00:01:05,640
arbitrarily expand expressions by

00:01:02,970 --> 00:01:07,740
default so if you don't constrain them

00:01:05,640 --> 00:01:10,920
out of memory that your parser takes you

00:01:07,740 --> 00:01:12,840
can blow someone's server away haha no

00:01:10,920 --> 00:01:14,130
let's not do that so frameworks don't

00:01:12,840 --> 00:01:16,499
help with these kinds of problems

00:01:14,130 --> 00:01:18,990
because they're like oh I'm just gonna

00:01:16,499 --> 00:01:21,539
parse whatever anyone sends to me well

00:01:18,990 --> 00:01:26,009
that's not very smart so how do we fix

00:01:21,539 --> 00:01:28,049
that generate all the parsers so muskox

00:01:26,009 --> 00:01:31,319
to the rescue so what musk ox is is that

00:01:28,049 --> 00:01:33,359
it's a schema based parser generator so

00:01:31,319 --> 00:01:36,139
you there's this thing called the JSON

00:01:33,359 --> 00:01:38,939
schema which allows you to define

00:01:36,139 --> 00:01:41,159
schemas for JSON objects that includes

00:01:38,939 --> 00:01:43,759
like typing information and nessa saying

00:01:41,159 --> 00:01:46,289
all that kind of stuff and musk ox takes

00:01:43,759 --> 00:01:49,409
schemas in that format and produces

00:01:46,289 --> 00:01:52,889
parsers based on those and so they won't

00:01:49,409 --> 00:01:55,170
allow you to buy if if someone sends you

00:01:52,889 --> 00:01:57,479
a string that doesn't match your schema

00:01:55,170 --> 00:02:01,889
it will break at the parser which means

00:01:57,479 --> 00:02:03,359
that if you know if someone's trying to

00:02:01,889 --> 00:02:05,399
exploit you or they're trying to add an

00:02:03,359 --> 00:02:07,350
extra field or something like that your

00:02:05,399 --> 00:02:08,759
app won't even see it because it will

00:02:07,350 --> 00:02:11,760
still be a string and I will throw an

00:02:08,759 --> 00:02:13,530
error all right so for example with this

00:02:11,760 --> 00:02:16,600
previous

00:02:13,530 --> 00:02:19,960
grammar which has two properties in

00:02:16,600 --> 00:02:21,580
there both names if i were to grab that

00:02:19,960 --> 00:02:23,410
parser and try to parse something that's

00:02:21,580 --> 00:02:26,920
valid it gives me back a hash like you'd

00:02:23,410 --> 00:02:29,290
expect from the rails params if you give

00:02:26,920 --> 00:02:31,390
it a hash that has a bunch of keys that

00:02:29,290 --> 00:02:33,160
are trying to denial service your server

00:02:31,390 --> 00:02:36,100
because they're trying to get the all

00:02:33,160 --> 00:02:39,370
the hashes into the same bucket then you

00:02:36,100 --> 00:02:41,350
get an error and it tells you what the

00:02:39,370 --> 00:02:43,690
key was that it found that was wrong and

00:02:41,350 --> 00:02:46,450
what the operator the properties that

00:02:43,690 --> 00:02:49,720
are loud are so it's based on these

00:02:46,450 --> 00:02:53,530
ideas from this part of security theory

00:02:49,720 --> 00:02:55,780
called language security and I part of

00:02:53,530 --> 00:02:57,640
that term this idea of a pasta you know

00:02:55,780 --> 00:03:01,060
the pastel principle be liberal in what

00:02:57,640 --> 00:03:02,440
you accept and F and General be

00:03:01,060 --> 00:03:04,780
literally what you accept and

00:03:02,440 --> 00:03:06,430
conservative what you pass out there's

00:03:04,780 --> 00:03:09,070
this patch that's like be definite when

00:03:06,430 --> 00:03:11,170
you accept and that's because if you're

00:03:09,070 --> 00:03:13,060
definite then people can't you can't

00:03:11,170 --> 00:03:14,920
like consume things that might cause

00:03:13,060 --> 00:03:16,570
accidental problems so if you want to

00:03:14,920 --> 00:03:19,270
get more information you can look on my

00:03:16,570 --> 00:03:21,370
github broke Bobcat / matzah musk ox and

00:03:19,270 --> 00:03:23,490
for more about lang set go to link sec

00:03:21,370 --> 00:03:23,490

YouTube URL: https://www.youtube.com/watch?v=8odQQ8lfSn8


