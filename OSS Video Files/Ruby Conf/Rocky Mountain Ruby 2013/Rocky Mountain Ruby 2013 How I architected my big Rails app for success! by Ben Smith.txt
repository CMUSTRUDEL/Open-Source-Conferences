Title: Rocky Mountain Ruby 2013 How I architected my big Rails app for success! by Ben Smith
Publication date: 2020-01-27
Playlist: Rocky Mountain Ruby 2013
Description: 
	Rails is a great framework for creating web apps... for awhile. What do you do when your codebase grows large? How do you handle large teams of developers? When performance becomes an issue, how do you scale? Most importantly, how do you write code which can easily be refactored later?

This is a story of a real life project built from day 1 with all these questions in mind. Learn about the problems we solved and lessons we learned: how to partition your Rails app into distinct modular engines, how to speed up your test suite by only running code effected by your changes, how to add a layer on top of ActiveRecord to enforce loose coupling, and many other patterns that can be applied to your own Rails apps!

Help us caption & translate this video!

http://amara.org/v/FG6l/
Captions: 
	00:00:29,720 --> 00:00:33,500
all right good afternoon everybody how's

00:00:32,310 --> 00:00:37,860
everybody feeling

00:00:33,500 --> 00:00:39,300
yeah haven't crashed from the lunchtime

00:00:37,860 --> 00:00:41,130
meal yet that's good

00:00:39,300 --> 00:00:45,870
make sure you get that coffee during the

00:00:41,130 --> 00:00:49,920
breaks my name is Ben Smith I work for

00:00:45,870 --> 00:00:52,500
pivotal labs here in Boulder and this is

00:00:49,920 --> 00:00:55,350
where I tweet please feel free to tell

00:00:52,500 --> 00:00:56,880
me I'm crazy on the internet and if you

00:00:55,350 --> 00:00:58,350
don't think I'm crazy yet wait ten

00:00:56,880 --> 00:01:00,450
minutes I'll try my best to convince you

00:00:58,350 --> 00:01:02,580
of that

00:01:00,450 --> 00:01:05,249
and I'm here today to talk to you guys

00:01:02,580 --> 00:01:07,200
about rails architecture for a big rails

00:01:05,249 --> 00:01:08,909
app that I built but first I'd like to

00:01:07,200 --> 00:01:12,149
take a little detour to talk about

00:01:08,909 --> 00:01:13,590
something else I'm a fairly new

00:01:12,149 --> 00:01:16,409
conference speaker I've only been

00:01:13,590 --> 00:01:17,999
speaking for the past year I've got to

00:01:16,409 --> 00:01:21,420
do a lot of traveling I've spoken all

00:01:17,999 --> 00:01:23,490
over and when I got accepted to Rocky

00:01:21,420 --> 00:01:25,710
Mountain Ruby I was super excited it was

00:01:23,490 --> 00:01:27,149
my hometown I felt like I get the

00:01:25,710 --> 00:01:30,840
hometown advantage and this would be an

00:01:27,149 --> 00:01:33,929
easy conference for me but today I

00:01:30,840 --> 00:01:35,639
started getting really nervous and at

00:01:33,929 --> 00:01:38,039
first I thought it's because I'm wearing

00:01:35,639 --> 00:01:40,409
shoes I usually wear flip-flops so go

00:01:38,039 --> 00:01:44,069
barefoot so I took off my shoes but that

00:01:40,409 --> 00:01:46,170
didn't help I was still nervous and I

00:01:44,069 --> 00:01:48,060
realized it was because the people in

00:01:46,170 --> 00:01:51,030
the audience I know they're my friends

00:01:48,060 --> 00:01:55,409
my co-workers old clients current

00:01:51,030 --> 00:01:57,929
clients future clients possibly there's

00:01:55,409 --> 00:02:00,319
people in the crowd that I know are way

00:01:57,929 --> 00:02:02,310
smarter than me they're my mentors

00:02:00,319 --> 00:02:05,249
they're people I look up to and this

00:02:02,310 --> 00:02:07,740
made me realize that everybody looks up

00:02:05,249 --> 00:02:10,080
to someone no matter who you are there's

00:02:07,740 --> 00:02:13,800
someone else out there that's looking up

00:02:10,080 --> 00:02:16,100
to you and is inspired by what you do

00:02:13,800 --> 00:02:18,600
and was this mean it means that

00:02:16,100 --> 00:02:22,410
someone's looking up to you and you need

00:02:18,600 --> 00:02:23,700
to be amazing and when that person who

00:02:22,410 --> 00:02:25,560
looks up to you comes up to you and

00:02:23,700 --> 00:02:28,200
starts a conversation like at this

00:02:25,560 --> 00:02:34,080
conference be a mentor and help them any

00:02:28,200 --> 00:02:38,340
way you can and this stands for mots is

00:02:34,080 --> 00:02:40,590
nice so we are nice and that's something

00:02:38,340 --> 00:02:43,080
that I love and I think that you know at

00:02:40,590 --> 00:02:44,850
these conferences that you go to be nice

00:02:43,080 --> 00:02:46,740
to everyone help everyone out if someone

00:02:44,850 --> 00:02:49,470
comes up and talks to you tell them

00:02:46,740 --> 00:02:53,300
everything you know and just be outgoing

00:02:49,470 --> 00:02:57,630
and helpful with everyone so that was my

00:02:53,300 --> 00:03:01,290
slight detour thank you for listening to

00:02:57,630 --> 00:03:04,250
that so back to the real talk how I

00:03:01,290 --> 00:03:08,040
architected my big rails app for success

00:03:04,250 --> 00:03:09,570
so this is architecture talk and you

00:03:08,040 --> 00:03:12,720
might say that rails has its own

00:03:09,570 --> 00:03:15,240
architecture and I'd agree it does use a

00:03:12,720 --> 00:03:21,330
design pattern that we all know and love

00:03:15,240 --> 00:03:24,540
called and the Seabiscuit but once your

00:03:21,330 --> 00:03:26,550
app gets big enough relying on just the

00:03:24,540 --> 00:03:29,370
rails way of doing things might get you

00:03:26,550 --> 00:03:31,770
in trouble so I'm gonna tell you a story

00:03:29,370 --> 00:03:36,030
about a rails app that we tried our best

00:03:31,770 --> 00:03:38,970
to architect for success and what a

00:03:36,030 --> 00:03:41,459
success mean for a rails app for a

00:03:38,970 --> 00:03:43,500
product for a client well in this case

00:03:41,459 --> 00:03:44,760
we knew that the engagement was gonna be

00:03:43,500 --> 00:03:48,450
fairly long there's gonna last eight

00:03:44,760 --> 00:03:50,010
months or longer which at pivotal is a

00:03:48,450 --> 00:03:52,050
big chunk of time most of our projects

00:03:50,010 --> 00:03:53,370
last three or six months we knew we're

00:03:52,050 --> 00:03:56,040
gonna have a big dev team that was gonna

00:03:53,370 --> 00:03:59,160
ramp up to ten rails devs and for iOS

00:03:56,040 --> 00:04:00,990
devs and then six to eight months we

00:03:59,160 --> 00:04:04,050
knew we'd just end up with a ton of code

00:04:00,990 --> 00:04:06,630
given the number of devs this particular

00:04:04,050 --> 00:04:08,820
project was a from scratch rebuild as

00:04:06,630 --> 00:04:11,130
well and the client wanted their

00:04:08,820 --> 00:04:13,440
existing code base and toolset replaced

00:04:11,130 --> 00:04:15,570
and we knew to get feature parity with

00:04:13,440 --> 00:04:18,540
their existing tools we just end up with

00:04:15,570 --> 00:04:19,680
a lot of code the client also want to

00:04:18,540 --> 00:04:21,989
make sure we have scalability of mine

00:04:19,680 --> 00:04:23,580
not that it need to handle a million

00:04:21,989 --> 00:04:25,650
requests per second day one of launch

00:04:23,580 --> 00:04:27,800
but that it was built in such a way that

00:04:25,650 --> 00:04:31,409
it could get there eventually

00:04:27,800 --> 00:04:34,229
and the last thing they wanted was they

00:04:31,409 --> 00:04:36,169
wanted a BIGBANG release so they wanted

00:04:34,229 --> 00:04:38,099
to replace her old codebase all at once

00:04:36,169 --> 00:04:40,110
and this isn't something that we

00:04:38,099 --> 00:04:42,120
normally recommend but we worked with

00:04:40,110 --> 00:04:45,330
them hoping that we could release sooner

00:04:42,120 --> 00:04:47,580
than when it's all done so what does

00:04:45,330 --> 00:04:48,990
success look like in these terms now

00:04:47,580 --> 00:04:50,999
normally I'm all about doing the

00:04:48,990 --> 00:04:53,340
simplest thing possible so Susette

00:04:50,999 --> 00:04:55,590
suggest you take this talk with a grain

00:04:53,340 --> 00:04:57,810
of salt what I'm going to show you today

00:04:55,590 --> 00:04:59,909
is not a silver bullet it will help you

00:04:57,810 --> 00:05:02,460
in some cases but in other cases we'll

00:04:59,909 --> 00:05:03,990
only make things more complicated and

00:05:02,460 --> 00:05:06,539
I'm not an expert on this subject I'm

00:05:03,990 --> 00:05:13,620
just somebody who tried a few things and

00:05:06,539 --> 00:05:14,819
this is my experience so success with

00:05:13,620 --> 00:05:16,250
these constraints we knew we wanted to

00:05:14,819 --> 00:05:19,589
think about Architecture from day one

00:05:16,250 --> 00:05:27,120
and the first decision we made was to

00:05:19,589 --> 00:05:29,279
use rails engines kinda we decide to use

00:05:27,120 --> 00:05:32,159
engines but not in the normal way you

00:05:29,279 --> 00:05:35,039
see them used who knows what a rails

00:05:32,159 --> 00:05:36,839
engine is first off just about everybody

00:05:35,039 --> 00:05:40,409
I'll just explain it really briefly for

00:05:36,839 --> 00:05:42,330
everyone else a rails engine is the

00:05:40,409 --> 00:05:44,939
entire rails app that you bundle

00:05:42,330 --> 00:05:48,120
together and can reuse so this includes

00:05:44,939 --> 00:05:49,710
models views controllers CSS JavaScript

00:05:48,120 --> 00:05:53,479
everything you can bundle all that

00:05:49,710 --> 00:05:57,199
together and reuse that as a dependency

00:05:53,479 --> 00:06:00,000
devise is a great example of an engine

00:05:57,199 --> 00:06:02,909
devise is built into a gem and this can

00:06:00,000 --> 00:06:05,639
be included in your rails code base and

00:06:02,909 --> 00:06:09,000
you get views models you get database

00:06:05,639 --> 00:06:12,120
tables get everything so we were using

00:06:09,000 --> 00:06:13,770
these engines but unlike devise all of

00:06:12,120 --> 00:06:16,889
our engines were never built into gems

00:06:13,770 --> 00:06:18,120
they're never pushed to Ruby gems not

00:06:16,889 --> 00:06:22,860
only that they never even had their own

00:06:18,120 --> 00:06:27,149
git repo all the engines we created went

00:06:22,860 --> 00:06:30,449
under our normal rails source tree which

00:06:27,149 --> 00:06:31,919
meant for all you SOA advocates we

00:06:30,449 --> 00:06:35,360
didn't have to worry about versions of

00:06:31,919 --> 00:06:37,500
interfaces or separate deployments

00:06:35,360 --> 00:06:39,240
all the engines I'm going to show you in

00:06:37,500 --> 00:06:41,400
this talk lived inside a single rails

00:06:39,240 --> 00:06:43,440
app and we deployed and verse

00:06:41,400 --> 00:06:46,410
that single rails up just as one they

00:06:43,440 --> 00:06:47,790
weren't separate apps at all of course

00:06:46,410 --> 00:06:50,699
you might ask why use interests in the

00:06:47,790 --> 00:06:52,350
first place and we decided earlier that

00:06:50,699 --> 00:06:54,570
there is a few distinct components to

00:06:52,350 --> 00:06:57,479
our app that we could section off chunks

00:06:54,570 --> 00:06:58,979
of code into and let me give you a

00:06:57,479 --> 00:07:02,520
little background on the product so you

00:06:58,979 --> 00:07:05,160
can understand why the project self is a

00:07:02,520 --> 00:07:08,580
content publishing platform for videos

00:07:05,160 --> 00:07:11,699
audio blog posts Facebook posts tweets

00:07:08,580 --> 00:07:14,669
all types of things and on top of that

00:07:11,699 --> 00:07:16,800
included a full social network and the

00:07:14,669 --> 00:07:20,240
pub the the content was published and

00:07:16,800 --> 00:07:22,470
consumed by an iOS app fed by a JSON API

00:07:20,240 --> 00:07:26,669
and the content was created and

00:07:22,470 --> 00:07:28,199
moderated via a web interface so that

00:07:26,669 --> 00:07:30,210
domain doesn't seem too complex at first

00:07:28,199 --> 00:07:33,000
glance but we are focused on

00:07:30,210 --> 00:07:37,440
architecture so we took our simple rails

00:07:33,000 --> 00:07:39,840
app and start to break it up and in this

00:07:37,440 --> 00:07:43,080
diagram you can see we have our rails

00:07:39,840 --> 00:07:45,449
app and inside of it we have four

00:07:43,080 --> 00:07:49,500
engines and the arrows point in the

00:07:45,449 --> 00:07:51,570
direction of the dependencies and I'll

00:07:49,500 --> 00:07:54,150
refer to this main kind of wrapping

00:07:51,570 --> 00:07:57,060
rails app this big box here as the

00:07:54,150 --> 00:07:58,949
wrapper rails app from here on out so

00:07:57,060 --> 00:08:01,199
over here we have an admin component

00:07:58,949 --> 00:08:03,750
where content gets created videos are

00:08:01,199 --> 00:08:05,669
uploaded blogs are written on the other

00:08:03,750 --> 00:08:07,620
side we have the social network there's

00:08:05,669 --> 00:08:11,729
a user facing content in the form of a

00:08:07,620 --> 00:08:13,710
JSON API at the bottom we created a

00:08:11,729 --> 00:08:16,440
common engine this is where we put

00:08:13,710 --> 00:08:18,210
things like users and roles things that

00:08:16,440 --> 00:08:21,389
were required by both the admin engine

00:08:18,210 --> 00:08:23,070
and the social network engine and at the

00:08:21,389 --> 00:08:24,510
top we have another engine called a

00:08:23,070 --> 00:08:26,909
scheduler and this engine was in charge

00:08:24,510 --> 00:08:28,590
of publishing content so the admin could

00:08:26,909 --> 00:08:30,300
create content and we get copied over to

00:08:28,590 --> 00:08:31,620
the social network or publish to an

00:08:30,300 --> 00:08:35,520
external web service whenever is

00:08:31,620 --> 00:08:37,110
scheduled to go live in going forward

00:08:35,520 --> 00:08:40,169
I'm not gonna draw the box around the

00:08:37,110 --> 00:08:41,760
engines just assume that all of these

00:08:40,169 --> 00:08:45,600
engines that I'm going to show you are

00:08:41,760 --> 00:08:47,490
within a single rails app and remember

00:08:45,600 --> 00:08:50,100
the arrows point in the direction of the

00:08:47,490 --> 00:08:51,990
dependencies so the scheduler depends on

00:08:50,100 --> 00:08:54,120
the admin engine the common engine in

00:08:51,990 --> 00:08:55,080
the social network engine the admin

00:08:54,120 --> 00:08:56,640
engine just depends

00:08:55,080 --> 00:08:59,400
uncommon and common doesn't depend on

00:08:56,640 --> 00:09:01,290
anything does this example make sense

00:08:59,400 --> 00:09:05,640
everyone because it's about to get quite

00:09:01,290 --> 00:09:07,770
a bit more complicated so next thing we

00:09:05,640 --> 00:09:10,320
did was we wrote a gem to wrap a SMS

00:09:07,770 --> 00:09:12,300
service called mobile compass we chose

00:09:10,320 --> 00:09:14,130
to make this a gem instead of a engine

00:09:12,300 --> 00:09:15,960
because it didn't need a database

00:09:14,130 --> 00:09:18,630
connection the asset pipeline or

00:09:15,960 --> 00:09:20,100
anything else that rails gives you and I

00:09:18,630 --> 00:09:22,320
made mobile compass right here to show

00:09:20,100 --> 00:09:23,640
that's a gem and not an engine like the

00:09:22,320 --> 00:09:27,630
rest and I don't know it's kind of hard

00:09:23,640 --> 00:09:29,220
to see with the colors but we wrote a

00:09:27,630 --> 00:09:31,500
lot of code in this architecture with

00:09:29,220 --> 00:09:34,140
just these four gems or just these four

00:09:31,500 --> 00:09:36,210
engines and a single gem but as we got

00:09:34,140 --> 00:09:37,380
farther we started identifying users of

00:09:36,210 --> 00:09:40,140
the system we could create specific

00:09:37,380 --> 00:09:42,780
engines for we realized that there's two

00:09:40,140 --> 00:09:46,080
type of admins a global admin who could

00:09:42,780 --> 00:09:48,570
crud users and content admin whose sole

00:09:46,080 --> 00:09:50,040
purpose was to create content so we

00:09:48,570 --> 00:09:52,860
broke these into two separate engines

00:09:50,040 --> 00:09:54,900
and they both depended on an admin asset

00:09:52,860 --> 00:09:56,550
engine and admin assets just contained

00:09:54,900 --> 00:10:00,210
layouts the styles that both the admin

00:09:56,550 --> 00:10:01,620
engines used and once we realized it

00:10:00,210 --> 00:10:03,450
made sense to split engines for each

00:10:01,620 --> 00:10:06,090
roller system we created another admin

00:10:03,450 --> 00:10:08,940
engine called the social admin and the

00:10:06,090 --> 00:10:10,500
social admins were moderators of wall

00:10:08,940 --> 00:10:14,970
posts or status updates or any other

00:10:10,500 --> 00:10:16,800
user-generated content and we felt

00:10:14,970 --> 00:10:18,960
pretty good about this we were

00:10:16,800 --> 00:10:22,260
identifying engines we were keeping our

00:10:18,960 --> 00:10:24,390
app split up into smaller pieces then we

00:10:22,260 --> 00:10:26,280
had a breakthrough and it actually

00:10:24,390 --> 00:10:28,170
wasn't us it was our office director

00:10:26,280 --> 00:10:32,850
something you might know I'm Mike bare

00:10:28,170 --> 00:10:36,810
neck that's not a picture of him he

00:10:32,850 --> 00:10:39,900
walked by and he said your social admin

00:10:36,810 --> 00:10:41,880
engine depends on too much it doesn't

00:10:39,900 --> 00:10:44,240
need a dependency on things like the

00:10:41,880 --> 00:10:47,700
controllers in the social network engine

00:10:44,240 --> 00:10:49,650
all it needs are the models now remember

00:10:47,700 --> 00:10:53,070
the social network engine is the user

00:10:49,650 --> 00:10:54,780
facing JSON API and the social admin is

00:10:53,070 --> 00:10:58,170
a web interface to moderate things like

00:10:54,780 --> 00:11:00,240
wall post assess updates the models for

00:10:58,170 --> 00:11:03,150
wall post status updates lived inside of

00:11:00,240 --> 00:11:04,440
the social network engine and it took me

00:11:03,150 --> 00:11:06,900
a while to come around to this idea but

00:11:04,440 --> 00:11:08,520
he did have a point the social admin

00:11:06,900 --> 00:11:11,970
engine depended on all of

00:11:08,520 --> 00:11:13,920
social network engine which means it had

00:11:11,970 --> 00:11:16,050
reference to things like controllers

00:11:13,920 --> 00:11:17,910
which just weren't needed and keeping

00:11:16,050 --> 00:11:20,520
your dependencies to a minimum is always

00:11:17,910 --> 00:11:22,470
a good idea what we really wanted to do

00:11:20,520 --> 00:11:24,600
was just depend on the models of the

00:11:22,470 --> 00:11:27,180
social network this would allow us to

00:11:24,600 --> 00:11:30,120
create controllers around wall post and

00:11:27,180 --> 00:11:31,320
status updates to moderate them so we

00:11:30,120 --> 00:11:34,800
went back to our engines and we did a

00:11:31,320 --> 00:11:37,500
refactoring and we pulled the models out

00:11:34,800 --> 00:11:40,380
of the social network and put them in a

00:11:37,500 --> 00:11:42,330
engine called social network content we

00:11:40,380 --> 00:11:44,640
renamed social network to social network

00:11:42,330 --> 00:11:47,100
API because now it truly only contained

00:11:44,640 --> 00:11:49,670
API code just controllers and JSON

00:11:47,100 --> 00:11:52,230
presenters no models no domain logic and

00:11:49,670 --> 00:11:54,090
finally we added dependency from the

00:11:52,230 --> 00:11:56,250
social admins to social network content

00:11:54,090 --> 00:11:58,590
which going back to the original problem

00:11:56,250 --> 00:12:00,690
allows the social admin to only require

00:11:58,590 --> 00:12:02,930
what it needs so instead of having this

00:12:00,690 --> 00:12:05,490
we have something that looks like this

00:12:02,930 --> 00:12:08,910
which addresses a problem of requiring

00:12:05,490 --> 00:12:10,950
too much but we realized why stop there

00:12:08,910 --> 00:12:12,060
we realized that the scheduler engine

00:12:10,950 --> 00:12:15,030
had the same problem

00:12:12,060 --> 00:12:18,510
it was requiring the content admin

00:12:15,030 --> 00:12:21,720
engine and all it needed was the models

00:12:18,510 --> 00:12:23,520
inside of that engine so we split that

00:12:21,720 --> 00:12:25,140
out into a Content admin element

00:12:23,520 --> 00:12:28,140
transition we updated the dependencies

00:12:25,140 --> 00:12:29,430
to reflect that refactoring at this

00:12:28,140 --> 00:12:31,740
point we started to note notice the

00:12:29,430 --> 00:12:35,580
pattern we notice that some engines

00:12:31,740 --> 00:12:38,460
could respond to HTTP ones that had

00:12:35,580 --> 00:12:41,160
controllers and routes and we had other

00:12:38,460 --> 00:12:44,460
engines that only contained models or

00:12:41,160 --> 00:12:46,760
business objects so we started calling

00:12:44,460 --> 00:12:50,220
them web engines and domain engines and

00:12:46,760 --> 00:12:52,560
here I've color-coded them so you can

00:12:50,220 --> 00:12:55,440
see web engines are blue domain engines

00:12:52,560 --> 00:12:56,580
are brown and as a team identifying

00:12:55,440 --> 00:12:59,100
these patterns and putting names to them

00:12:56,580 --> 00:13:00,000
is super helpful once you identify a

00:12:59,100 --> 00:13:01,590
pattern and name it

00:13:00,000 --> 00:13:04,530
now you can think in terms of what makes

00:13:01,590 --> 00:13:06,690
sense for that given pattern for example

00:13:04,530 --> 00:13:08,400
if someone says let's add a users

00:13:06,690 --> 00:13:09,870
controller to the common engine I could

00:13:08,400 --> 00:13:14,670
say no that doesn't make sense because

00:13:09,870 --> 00:13:17,310
it's the domain engine but speaking of a

00:13:14,670 --> 00:13:18,450
common engine and of patterns we

00:13:17,310 --> 00:13:20,100
realized that having an engine named

00:13:18,450 --> 00:13:21,840
common is a really bad idea

00:13:20,100 --> 00:13:22,290
common means you can put whatever you

00:13:21,840 --> 00:13:23,670
want

00:13:22,290 --> 00:13:24,779
it's like the lib folder and rails you

00:13:23,670 --> 00:13:27,480
can throw whatever you want there and is

00:13:24,779 --> 00:13:30,329
fine so we renamed it to be what we

00:13:27,480 --> 00:13:32,310
wanted it to be users and once we did

00:13:30,329 --> 00:13:33,810
that we realized our stuff in there that

00:13:32,310 --> 00:13:35,490
shouldn't be in there specifically a

00:13:33,810 --> 00:13:37,680
profanity filter so we pulled that out

00:13:35,490 --> 00:13:41,639
into an engine and from here we did some

00:13:37,680 --> 00:13:43,380
more work and some more work and this is

00:13:41,639 --> 00:13:45,060
where we ended up after about six months

00:13:43,380 --> 00:13:46,620
of development and we kept working on

00:13:45,060 --> 00:13:48,720
the app but it just keeps getting more

00:13:46,620 --> 00:13:51,180
complex and crazy and harder to draw so

00:13:48,720 --> 00:13:54,680
I'm gonna stop right here how does this

00:13:51,180 --> 00:14:00,630
look impressive crazy

00:13:54,680 --> 00:14:01,889
thumbs down no good so it's

00:14:00,630 --> 00:14:03,779
understandable when you look at this

00:14:01,889 --> 00:14:06,240
that you say this is insane there's no

00:14:03,779 --> 00:14:10,620
way I could work in this but drawing

00:14:06,240 --> 00:14:12,240
this diagram this diagram isn't a

00:14:10,620 --> 00:14:15,829
complexity that's added because of

00:14:12,240 --> 00:14:18,720
engines this is a complexity of the app

00:14:15,829 --> 00:14:20,190
not because of engines we would have

00:14:18,720 --> 00:14:21,660
these same dependencies if we didn't

00:14:20,190 --> 00:14:24,720
have engines but we wouldn't be able to

00:14:21,660 --> 00:14:27,230
talk about them as easily and the

00:14:24,720 --> 00:14:29,699
reality when we were working on this app

00:14:27,230 --> 00:14:31,470
you didn't need to know the entire graph

00:14:29,699 --> 00:14:33,899
by heart you just need to know that part

00:14:31,470 --> 00:14:35,730
you were working in so you could focus

00:14:33,899 --> 00:14:38,250
in and understand one subset of the

00:14:35,730 --> 00:14:39,990
graph and you'd be fine there and in

00:14:38,250 --> 00:14:43,110
general there's a pattern to these

00:14:39,990 --> 00:14:45,389
engines the general pattern for these

00:14:43,110 --> 00:14:48,510
engines is that the web engines at the

00:14:45,389 --> 00:14:50,519
top would depend on domain engines

00:14:48,510 --> 00:14:53,160
underneath them which would depend on

00:14:50,519 --> 00:14:55,440
the database and if you think about that

00:14:53,160 --> 00:14:57,810
that's not far from the rail sack which

00:14:55,440 --> 00:15:01,290
just is controllers and views depending

00:14:57,810 --> 00:15:04,260
on models depending on the database so

00:15:01,290 --> 00:15:05,880
really this does look scary but it's not

00:15:04,260 --> 00:15:09,930
not far off from your standard rail

00:15:05,880 --> 00:15:12,089
stack and if you don't believe me now is

00:15:09,930 --> 00:15:18,689
the time to go tweet at this handle and

00:15:12,089 --> 00:15:20,069
tell me I'm crazy all right so now that

00:15:18,689 --> 00:15:23,069
you've seen where engines can get you

00:15:20,069 --> 00:15:24,899
you're probably asking yourself how do I

00:15:23,069 --> 00:15:26,759
get started how do I get into this crazy

00:15:24,899 --> 00:15:29,819
world of engines that you've just shown

00:15:26,759 --> 00:15:32,189
me one of my pet peeves with our other

00:15:29,819 --> 00:15:33,600
architecture talks is that they they

00:15:32,189 --> 00:15:34,980
rarely give you real steps to get

00:15:33,600 --> 00:15:35,970
started so I'm gonna give you some of

00:15:34,980 --> 00:15:38,009
those steps

00:15:35,970 --> 00:15:39,539
so this is how you create a rails engine

00:15:38,009 --> 00:15:41,399
you run this from within the root of

00:15:39,539 --> 00:15:42,569
your rails app and don't worry I'm gonna

00:15:41,399 --> 00:15:44,759
post all these slides online so you

00:15:42,569 --> 00:15:46,709
don't have to take pictures or notes in

00:15:44,759 --> 00:15:48,839
the gem file you add this line which

00:15:46,709 --> 00:15:51,209
creates the dependency to your newly

00:15:48,839 --> 00:15:53,909
created engine and of course you can add

00:15:51,209 --> 00:15:55,979
a dependency from wrapping rails app on

00:15:53,909 --> 00:15:59,519
an engine or from one engine to another

00:15:55,979 --> 00:16:01,529
engine and the last thing you need you

00:15:59,519 --> 00:16:03,509
to is mount the engine if it has routes

00:16:01,529 --> 00:16:06,509
and controllers and this is only if you

00:16:03,509 --> 00:16:08,099
have a web engine right if you want to

00:16:06,509 --> 00:16:10,919
create a gem it's just about as easy

00:16:08,099 --> 00:16:16,829
there's how you create it this is how

00:16:10,919 --> 00:16:18,449
you require it and then the next thing

00:16:16,829 --> 00:16:20,039
you want to do once you once you've

00:16:18,449 --> 00:16:22,079
played around with these things once

00:16:20,039 --> 00:16:24,089
you've created a few gems and a few

00:16:22,079 --> 00:16:25,769
engines is instead of running this

00:16:24,089 --> 00:16:28,139
command every time you need a new engine

00:16:25,769 --> 00:16:32,339
you run at once and you create an engine

00:16:28,139 --> 00:16:34,079
template and from there all you need to

00:16:32,339 --> 00:16:36,869
do to create a new engine is copy and

00:16:34,079 --> 00:16:38,429
paste that engine template and from

00:16:36,869 --> 00:16:39,959
there you do a global find replace on a

00:16:38,429 --> 00:16:43,049
couple of strings rename a couple files

00:16:39,959 --> 00:16:45,089
ideally from a script you write and this

00:16:43,049 --> 00:16:46,889
gives you a standard base template to

00:16:45,089 --> 00:16:49,529
work off of and so if you want to

00:16:46,889 --> 00:16:50,909
include some basic dependencies like our

00:16:49,529 --> 00:16:53,489
spec or Hamel you can do that from

00:16:50,909 --> 00:16:55,199
within your template the same thing

00:16:53,489 --> 00:16:56,669
applies for plain old gems you want to

00:16:55,199 --> 00:17:00,179
create a template that you can easily

00:16:56,669 --> 00:17:01,769
reproduce gems off of you really want to

00:17:00,179 --> 00:17:03,449
lower the bar for creating these engines

00:17:01,769 --> 00:17:05,579
and gems to the point where it's a

00:17:03,449 --> 00:17:09,689
couple of minutes tops to create a new

00:17:05,579 --> 00:17:12,689
one what we found was it's much easier

00:17:09,689 --> 00:17:15,329
to decide to merge code together rather

00:17:12,689 --> 00:17:17,579
than split it apart later so if it's

00:17:15,329 --> 00:17:19,829
very easy to write code that's already

00:17:17,579 --> 00:17:21,209
split apart then people will be more

00:17:19,829 --> 00:17:24,899
likely to do it your developers will be

00:17:21,209 --> 00:17:26,490
more likely to do it so you guys got all

00:17:24,899 --> 00:17:28,379
that the size will be posted online

00:17:26,490 --> 00:17:30,840
don't worry about understanding all that

00:17:28,379 --> 00:17:35,279
yet let's go back to talking about some

00:17:30,840 --> 00:17:36,870
interesting stuff so from the VA we

00:17:35,279 --> 00:17:40,679
decided that engine should be completely

00:17:36,870 --> 00:17:42,389
self-contained and what that meant for

00:17:40,679 --> 00:17:44,580
us was that all the database tables were

00:17:42,389 --> 00:17:46,740
namespace all the migrations lived

00:17:44,580 --> 00:17:49,559
inside the engines and the tests were

00:17:46,740 --> 00:17:52,409
run within only that engine

00:17:49,559 --> 00:17:56,009
within the entire rails app so let's

00:17:52,409 --> 00:17:57,720
talk about each of these with this

00:17:56,009 --> 00:17:59,669
architecture we want to clear and real

00:17:57,720 --> 00:18:03,600
boundaries we want boundaries almost as

00:17:59,669 --> 00:18:05,460
realized you'd have with full SOA so if

00:18:03,600 --> 00:18:07,379
you took our simple week 1 architecture

00:18:05,460 --> 00:18:09,659
and you convert it a test away it might

00:18:07,379 --> 00:18:12,299
look like this and this is what we

00:18:09,659 --> 00:18:14,940
wanted to mimic messages over HTTP

00:18:12,299 --> 00:18:19,259
separate databases and different rails

00:18:14,940 --> 00:18:21,389
apps but we want things easy we wanted a

00:18:19,259 --> 00:18:24,299
single rails app one database and

00:18:21,389 --> 00:18:28,230
engines instead of or messages in Ruby

00:18:24,299 --> 00:18:30,110
instead of over HTTP so he took our

00:18:28,230 --> 00:18:32,759
rails engines with its single database

00:18:30,110 --> 00:18:34,590
and we chose to namespace all the tables

00:18:32,759 --> 00:18:36,960
on the database so each table was

00:18:34,590 --> 00:18:40,169
prepended with the name of the engine

00:18:36,960 --> 00:18:43,230
that belonged to so moving from this to

00:18:40,169 --> 00:18:46,289
this we just mean pulling each engine

00:18:43,230 --> 00:18:48,509
into its own wrapping rails app breaking

00:18:46,289 --> 00:18:50,850
out the database table by de base tables

00:18:48,509 --> 00:18:52,950
by namespace and adding a small wrapper

00:18:50,850 --> 00:18:58,799
so you can send HTTP messages rather

00:18:52,950 --> 00:19:01,559
than Ruby messages the other thing we

00:18:58,799 --> 00:19:04,019
want to do with our engines was keep the

00:19:01,559 --> 00:19:06,179
migrations inside of them and the

00:19:04,019 --> 00:19:08,249
interesting thing here is rails doesn't

00:19:06,179 --> 00:19:11,220
fully support this out of the box it

00:19:08,249 --> 00:19:15,840
does support it but not for the use case

00:19:11,220 --> 00:19:17,970
that we wanted device you know you

00:19:15,840 --> 00:19:20,850
install device as a dependency as a gem

00:19:17,970 --> 00:19:22,710
and you run a rake task that copies all

00:19:20,850 --> 00:19:24,809
of the migrations out of that engine out

00:19:22,710 --> 00:19:26,809
of device into your main app and then

00:19:24,809 --> 00:19:29,309
you can run your migrations that's fine

00:19:26,809 --> 00:19:31,080
but for us all of our engines were

00:19:29,309 --> 00:19:33,450
constantly changing and running this

00:19:31,080 --> 00:19:37,950
every time we had a new migration and

00:19:33,450 --> 00:19:39,629
one of the engines was was a pain so we

00:19:37,950 --> 00:19:41,070
chose some mucky patch rails so you

00:19:39,629 --> 00:19:43,610
could leave your migration Society for

00:19:41,070 --> 00:19:45,629
your engines and this is how it works

00:19:43,610 --> 00:19:48,570
there's a blog post you can read about

00:19:45,629 --> 00:19:50,999
it not super interesting but it's

00:19:48,570 --> 00:19:54,360
something that is slightly deviates from

00:19:50,999 --> 00:19:55,850
the standard path of rails engines the

00:19:54,360 --> 00:19:58,470
last thing we did with migrations is we

00:19:55,850 --> 00:20:00,090
made sure that each migration only

00:19:58,470 --> 00:20:01,649
touched one database table and this

00:20:00,090 --> 00:20:02,850
might seem like an arbitrary constraint

00:20:01,649 --> 00:20:03,240
but when you start working on the

00:20:02,850 --> 00:20:04,920
architect

00:20:03,240 --> 00:20:07,679
like this if you decide you wanted to

00:20:04,920 --> 00:20:09,630
move an entire database table from one

00:20:07,679 --> 00:20:11,070
engine to another which is kind of a

00:20:09,630 --> 00:20:13,679
crazy thought moving like a database

00:20:11,070 --> 00:20:16,950
table from one service to another

00:20:13,679 --> 00:20:18,960
service if you're using this

00:20:16,950 --> 00:20:21,510
architecture and each of your migrations

00:20:18,960 --> 00:20:23,460
only touch one table to move that table

00:20:21,510 --> 00:20:25,530
all you have to do is copy and paste all

00:20:23,460 --> 00:20:27,690
of the migrations for that table into

00:20:25,530 --> 00:20:29,580
another engine rebuild your test

00:20:27,690 --> 00:20:30,870
databases and everything works is fine

00:20:29,580 --> 00:20:33,140
and here's the blog post that talks

00:20:30,870 --> 00:20:33,140
about that

00:20:33,620 --> 00:20:38,400
the final self-imposed constraint we put

00:20:36,390 --> 00:20:43,740
on engines was testing them in isolation

00:20:38,400 --> 00:20:46,050
and what this means is that the test for

00:20:43,740 --> 00:20:48,300
an individual engine functionality live

00:20:46,050 --> 00:20:50,760
inside of that engine and when the tests

00:20:48,300 --> 00:20:53,820
run they only require the one engine

00:20:50,760 --> 00:20:56,130
they're testing and this proves that the

00:20:53,820 --> 00:20:58,140
engine is self-contained it doesn't use

00:20:56,130 --> 00:21:01,200
anything that's not explicitly required

00:20:58,140 --> 00:21:02,940
so for example if you put your tests for

00:21:01,200 --> 00:21:04,770
the admin engine inside of the engine

00:21:02,940 --> 00:21:07,380
itself then you can prove that there

00:21:04,770 --> 00:21:09,630
isn't any code in the admin admin engine

00:21:07,380 --> 00:21:11,490
that say references the social network

00:21:09,630 --> 00:21:14,400
where there's not an explicit dependency

00:21:11,490 --> 00:21:16,170
if you leave all of your tests in your

00:21:14,400 --> 00:21:21,150
wrapping rails app you can't prove that

00:21:16,170 --> 00:21:22,380
because everything's loaded on once so

00:21:21,150 --> 00:21:24,960
going back to doing engines of the right

00:21:22,380 --> 00:21:27,150
way these were the things we felt were

00:21:24,960 --> 00:21:31,200
necessary for keeping everything inside

00:21:27,150 --> 00:21:32,520
of each engine clean but outside of each

00:21:31,200 --> 00:21:34,740
individual engine we came to some

00:21:32,520 --> 00:21:37,520
inclusions as well on how engine should

00:21:34,740 --> 00:21:40,290
interact with each other

00:21:37,520 --> 00:21:42,990
not having circular dependencies was key

00:21:40,290 --> 00:21:45,210
for us having circular dependencies

00:21:42,990 --> 00:21:47,910
makes it much harder to refactor things

00:21:45,210 --> 00:21:50,010
later and if you look at our dependency

00:21:47,910 --> 00:21:51,390
diagram you'll notice that there's no

00:21:50,010 --> 00:21:57,210
circular dependencies here

00:21:51,390 --> 00:21:58,530
it's a directed acyclic graph and if

00:21:57,210 --> 00:22:03,120
there is a circular dependencies because

00:21:58,530 --> 00:22:04,380
I drew a wrong as a general practice we

00:22:03,120 --> 00:22:06,840
decided that whenever it seemed

00:22:04,380 --> 00:22:08,550
impossible not to have a circular

00:22:06,840 --> 00:22:11,250
dependency it meant we're trying to

00:22:08,550 --> 00:22:14,220
split things out too much so here if you

00:22:11,250 --> 00:22:15,149
had two engines and a needed to depend

00:22:14,220 --> 00:22:17,460
on B and B

00:22:15,149 --> 00:22:19,139
needed to depend on a then probably what

00:22:17,460 --> 00:22:22,200
you wanted was a single engine that was

00:22:19,139 --> 00:22:25,019
a and B combined but whenever you can

00:22:22,200 --> 00:22:26,999
avoid doing this you should and the

00:22:25,019 --> 00:22:29,789
rails is super easy to create circular

00:22:26,999 --> 00:22:31,950
dependencies something like this is

00:22:29,789 --> 00:22:34,710
super common user has many posts and

00:22:31,950 --> 00:22:36,179
post belongs to user that seems totally

00:22:34,710 --> 00:22:37,399
normal that's the rails way of doing

00:22:36,179 --> 00:22:40,049
things

00:22:37,399 --> 00:22:42,570
but it makes it hard to refactor once

00:22:40,049 --> 00:22:45,119
your app gets baked this was a result in

00:22:42,570 --> 00:22:48,690
a circular dependency between users and

00:22:45,119 --> 00:22:50,820
posts so how do you avoid falling to the

00:22:48,690 --> 00:22:54,179
circular dependency trap well you could

00:22:50,820 --> 00:22:55,349
stop using activerecord associations how

00:22:54,179 --> 00:22:57,210
do you stop using active record

00:22:55,349 --> 00:23:00,899
associations well you could stop using

00:22:57,210 --> 00:23:02,690
active record we didn't quite do that

00:23:00,899 --> 00:23:05,279
but we did something along those lines

00:23:02,690 --> 00:23:08,789
the approach we took was to create a

00:23:05,279 --> 00:23:10,859
domain API layer or a service layer it's

00:23:08,789 --> 00:23:13,559
just a layer between our controllers and

00:23:10,859 --> 00:23:18,239
models that was an interface to our

00:23:13,559 --> 00:23:20,729
domain logic and all these are their

00:23:18,239 --> 00:23:23,700
simple Ruby classes that wrap active

00:23:20,729 --> 00:23:27,089
record calls the arguments these methods

00:23:23,700 --> 00:23:29,309
are just take IDs or params really

00:23:27,089 --> 00:23:31,649
simple and the output from these methods

00:23:29,309 --> 00:23:33,929
are plain old Ruby objects so let's take

00:23:31,649 --> 00:23:36,629
a look at an example so here's a simple

00:23:33,929 --> 00:23:40,499
example of a domain API class called the

00:23:36,629 --> 00:23:43,409
user manager and in this user manager we

00:23:40,499 --> 00:23:45,389
have a method find user by ID that takes

00:23:43,409 --> 00:23:48,989
an ID and finds user and to do this it

00:23:45,389 --> 00:23:51,299
calls user record find and user record

00:23:48,989 --> 00:23:53,309
is an active record class and you'll

00:23:51,299 --> 00:23:55,739
notice that this class is defined below

00:23:53,309 --> 00:23:58,019
the private line within the user manager

00:23:55,739 --> 00:23:59,580
meaning that should it should only be

00:23:58,019 --> 00:24:02,879
used within the user manager nowhere

00:23:59,580 --> 00:24:05,759
else the active record user is then

00:24:02,879 --> 00:24:07,649
passed to user new which just copies all

00:24:05,759 --> 00:24:12,269
the attributes off the off of the active

00:24:07,649 --> 00:24:13,499
record object and onto itself then we we

00:24:12,269 --> 00:24:17,219
could return the active record object

00:24:13,499 --> 00:24:18,960
here but what we wanted to do was deter

00:24:17,219 --> 00:24:20,999
people from using active record as much

00:24:18,960 --> 00:24:23,609
as possible if you returned the active

00:24:20,999 --> 00:24:26,009
record object then people can call user

00:24:23,609 --> 00:24:28,950
update attributes or user dot posts and

00:24:26,009 --> 00:24:30,389
it would be much more appealing to use

00:24:28,950 --> 00:24:34,320
those active record methods and we

00:24:30,389 --> 00:24:36,869
wanted to avoid that and this is a

00:24:34,320 --> 00:24:38,339
really simple example the copying over

00:24:36,869 --> 00:24:39,509
attributes you probably want to do that

00:24:38,339 --> 00:24:42,299
with a little bit of meta programming

00:24:39,509 --> 00:24:45,299
maybe you probably want your user class

00:24:42,299 --> 00:24:47,399
to use active model or active Nanay

00:24:45,299 --> 00:24:50,039
means so you can get um the URL in form

00:24:47,399 --> 00:24:51,779
helpers that rails gives you but in

00:24:50,039 --> 00:24:54,869
general this is a design pattern we used

00:24:51,779 --> 00:24:57,210
and it's a brand-new design pattern that

00:24:54,869 --> 00:25:00,269
I came up with it's called the Benz

00:24:57,210 --> 00:25:04,639
awesome pattern so please tell all your

00:25:00,269 --> 00:25:06,809
friends about it this isn't anything new

00:25:04,639 --> 00:25:09,450
so how does that help us with this this

00:25:06,809 --> 00:25:11,639
situation in this situation there's two

00:25:09,450 --> 00:25:13,229
possible things we want to do we have a

00:25:11,639 --> 00:25:15,179
user we're gonna want to know the post

00:25:13,229 --> 00:25:17,429
that that user wrote or we have the post

00:25:15,179 --> 00:25:19,320
and we want to know the author so if we

00:25:17,429 --> 00:25:21,719
were to write a domain API to handle

00:25:19,320 --> 00:25:24,589
these those two cases it might look like

00:25:21,719 --> 00:25:28,589
this in the first case we have a user

00:25:24,589 --> 00:25:32,399
and if we have a post manager it'd be

00:25:28,589 --> 00:25:35,669
easy as creating a find find all by user

00:25:32,399 --> 00:25:39,479
ID and with this method we could new up

00:25:35,669 --> 00:25:41,789
one of these post managers and call post

00:25:39,479 --> 00:25:43,710
Manager final by user ID and pass at

00:25:41,789 --> 00:25:47,029
these ready and this handles the case of

00:25:43,710 --> 00:25:49,700
knowing the user online in the posts and

00:25:47,029 --> 00:25:53,269
if we have that we don't need this line

00:25:49,700 --> 00:25:55,649
user no longer has a dependency on posts

00:25:53,269 --> 00:26:02,489
to get the post for the user we use the

00:25:55,649 --> 00:26:03,839
the post manager not the user now if we

00:26:02,489 --> 00:26:07,409
start using the user manager we should

00:26:03,839 --> 00:26:09,419
be able to do something like this new

00:26:07,409 --> 00:26:12,149
appeaser manager and given a post that

00:26:09,419 --> 00:26:14,820
has a user ID attribute find me the

00:26:12,149 --> 00:26:17,149
author of that post now the crazy thing

00:26:14,820 --> 00:26:19,349
here is now we don't really have any

00:26:17,149 --> 00:26:21,299
code dependency between these two

00:26:19,349 --> 00:26:23,789
objects there is some sort of dependency

00:26:21,299 --> 00:26:25,559
here though post has a user ID but the

00:26:23,789 --> 00:26:28,710
important thing is there's no circular

00:26:25,559 --> 00:26:31,019
dependency and the great thing is when

00:26:28,710 --> 00:26:33,899
we added posts to our system the user

00:26:31,019 --> 00:26:37,139
object never had to change so when you

00:26:33,899 --> 00:26:39,960
add comments or videos or whatever else

00:26:37,139 --> 00:26:40,679
to the system once again the user class

00:26:39,960 --> 00:26:44,539
will never

00:26:40,679 --> 00:26:44,539
have to change to accommodate those and

00:26:44,720 --> 00:26:50,249
who's seen rails apps that have user

00:26:48,330 --> 00:26:52,769
classes that are hundreds or thousands

00:26:50,249 --> 00:26:56,029
of lines long yeah

00:26:52,769 --> 00:26:58,980
this pattern completely avoids that

00:26:56,029 --> 00:27:01,590
instead of having a few huge god classes

00:26:58,980 --> 00:27:03,539
you just have a bunch of small classes

00:27:01,590 --> 00:27:07,889
that are loosely coupled and easy to

00:27:03,539 --> 00:27:10,350
refactor later so how does circular

00:27:07,889 --> 00:27:11,570
dependencies or the lack thereof affect

00:27:10,350 --> 00:27:13,769
our engines

00:27:11,570 --> 00:27:16,619
well reducing the number of circular

00:27:13,769 --> 00:27:18,179
dependencies lets us go from this a

00:27:16,619 --> 00:27:20,190
single rails app where everything

00:27:18,179 --> 00:27:21,960
references everything else to this

00:27:20,190 --> 00:27:24,869
everything broken out into engines and

00:27:21,960 --> 00:27:27,210
one-way dependencies because like I

00:27:24,869 --> 00:27:29,159
mentioned like I mentioned before if

00:27:27,210 --> 00:27:30,539
there's a circular dependency then you

00:27:29,159 --> 00:27:32,519
should probably group those two things

00:27:30,539 --> 00:27:34,830
together and if you have a lot of

00:27:32,519 --> 00:27:36,679
circular dependencies it's much harder

00:27:34,830 --> 00:27:38,789
to break things out like this

00:27:36,679 --> 00:27:41,009
the other great thing you can do with

00:27:38,789 --> 00:27:44,519
engines and the a cyclic dependency

00:27:41,009 --> 00:27:48,450
graph is you can write a fast and smart

00:27:44,519 --> 00:27:51,749
test suite imagine you're working with

00:27:48,450 --> 00:27:54,480
an architecture like this and say you're

00:27:51,749 --> 00:27:56,669
making changes to the admin engine when

00:27:54,480 --> 00:27:59,429
you run your tests you don't need to run

00:27:56,669 --> 00:28:01,379
them for all of the engines all you need

00:27:59,429 --> 00:28:04,320
to do is run them for the admin engines

00:28:01,379 --> 00:28:07,350
or the admin engine and the tests for

00:28:04,320 --> 00:28:08,669
the scheduler because potentially the

00:28:07,350 --> 00:28:11,159
code that you changed in the admin

00:28:08,669 --> 00:28:14,159
engine could have broken something that

00:28:11,159 --> 00:28:15,720
the scheduler used but you don't need to

00:28:14,159 --> 00:28:18,059
run the tests in the common engine or

00:28:15,720 --> 00:28:20,610
the social network there was no code

00:28:18,059 --> 00:28:22,200
changes there and there's no code

00:28:20,610 --> 00:28:25,529
changes to things that they depend upon

00:28:22,200 --> 00:28:27,659
so from this you can write a smart test

00:28:25,529 --> 00:28:29,460
suite using something like get what

00:28:27,659 --> 00:28:31,860
changed which lists the file have

00:28:29,460 --> 00:28:34,399
changed since your last push so you can

00:28:31,860 --> 00:28:36,869
determine which engines have changed and

00:28:34,399 --> 00:28:39,299
what engines need their test run based

00:28:36,869 --> 00:28:40,679
on your dependency tree and what we

00:28:39,299 --> 00:28:43,200
found is normally you only need to run a

00:28:40,679 --> 00:28:44,669
fraction of the tests and we have our

00:28:43,200 --> 00:28:47,190
one-way dependencies to thank for that

00:28:44,669 --> 00:28:50,039
too because as I mentioned things like

00:28:47,190 --> 00:28:51,990
the user engine rarely changes anytime

00:28:50,039 --> 00:28:54,059
we add a new feature if you had comments

00:28:51,990 --> 00:28:56,399
we don't need to change the user engine

00:28:54,059 --> 00:28:58,320
and when the user engine does change its

00:28:56,399 --> 00:29:00,149
heavily dependent upon so a lot of tests

00:28:58,320 --> 00:29:02,399
have to run but something new for yet

00:29:00,149 --> 00:29:03,929
comments to it there may only be a

00:29:02,399 --> 00:29:10,289
couple of engines that need their test

00:29:03,929 --> 00:29:12,719
run so how did this all work out how did

00:29:10,289 --> 00:29:15,229
using engines domain api's and all of

00:29:12,719 --> 00:29:21,479
our other conventions work for us

00:29:15,229 --> 00:29:24,809
well engines are kind of a pain in the

00:29:21,479 --> 00:29:27,629
beginning we had super low velocity for

00:29:24,809 --> 00:29:29,700
the first month and a half probably the

00:29:27,629 --> 00:29:31,099
client was getting worried and we really

00:29:29,700 --> 00:29:33,119
couldn't bring on more developers

00:29:31,099 --> 00:29:34,889
because we're still trying to develop

00:29:33,119 --> 00:29:38,190
these patterns and best practices for

00:29:34,889 --> 00:29:39,809
using engines constant refactoring was

00:29:38,190 --> 00:29:41,969
required throughout the entire project

00:29:39,809 --> 00:29:45,869
at one point we're spending about a

00:29:41,969 --> 00:29:48,029
third of our timer factoring and Brian

00:29:45,869 --> 00:29:51,479
talked this morning about effortful

00:29:48,029 --> 00:29:54,029
versus automatic work and this all of

00:29:51,479 --> 00:29:56,820
this stuff was effortful this took a lot

00:29:54,029 --> 00:29:58,919
of work it took a lot of thought whereas

00:29:56,820 --> 00:30:01,679
you know doing standard rails that's a

00:29:58,919 --> 00:30:02,879
little bit more automatic and there were

00:30:01,679 --> 00:30:05,460
some technical hurdles we had to

00:30:02,879 --> 00:30:08,879
overcome like the monkey-patching of

00:30:05,460 --> 00:30:11,009
migrations but over the long term

00:30:08,879 --> 00:30:13,080
engines definitely went out at the end

00:30:11,009 --> 00:30:16,080
of eight months we saw no slowdown in

00:30:13,080 --> 00:30:18,809
development time or the time it took us

00:30:16,080 --> 00:30:20,429
to do bigger factories they also aged

00:30:18,809 --> 00:30:21,989
really well oftentimes we'd finish

00:30:20,429 --> 00:30:23,779
working on the engine and we could

00:30:21,989 --> 00:30:26,309
ignore it for months at a time

00:30:23,779 --> 00:30:27,929
it makes for super easy parallel

00:30:26,309 --> 00:30:29,969
development you can assign a team to

00:30:27,929 --> 00:30:31,820
work within their own engine and you

00:30:29,969 --> 00:30:34,320
don't have to worry about conflicts and

00:30:31,820 --> 00:30:35,849
the potential for scaling is great all

00:30:34,320 --> 00:30:38,879
you have to do is pull an engine out put

00:30:35,849 --> 00:30:41,669
it in its own rails app and scale that

00:30:38,879 --> 00:30:44,159
on its own and lastly you can write fast

00:30:41,669 --> 00:30:46,259
test for it so overall I give this

00:30:44,159 --> 00:30:48,889
architecture a thumbs up but it probably

00:30:46,259 --> 00:30:51,179
took me two months to come around to it

00:30:48,889 --> 00:30:53,549
so if this stuff seems interesting to

00:30:51,179 --> 00:30:56,339
you or if you think it might help your

00:30:53,549 --> 00:30:57,960
current apps give some of it a try try

00:30:56,339 --> 00:31:00,269
creating a new engine for the next major

00:30:57,960 --> 00:31:02,009
feature you build or try pulling out

00:31:00,269 --> 00:31:04,649
some of your models into their own

00:31:02,009 --> 00:31:06,679
engines try avoiding circular

00:31:04,649 --> 00:31:07,770
dependencies or creating a service layer

00:31:06,679 --> 00:31:09,780
but

00:31:07,770 --> 00:31:12,030
most importantly try to think outside of

00:31:09,780 --> 00:31:15,290
the rails way of doing things think in

00:31:12,030 --> 00:31:18,290
terms of what makes sense for your app

00:31:15,290 --> 00:31:18,290

YouTube URL: https://www.youtube.com/watch?v=uDaBtqEYNBo


