Title: Garden City Ruby Conference - ActiveRecord can't do it? Arel can!
Publication date: 2020-01-23
Playlist: Garden City Ruby 2015
Description: 
	By, Vipul A Prathamesh S

ActiveRecord can't do it? Arel can! Active Record is awesome. But how does ActiveRecord handle generating complex SQL queries? Under the hood it's handled by Arel. Most of the time, Rails developers don't have to know about how Arel works. But sometimes Active Record can't satisfy our needs. Also Arel has many strengths not exposed through Active Record. Let's experiment with Arel directly and wield great SQL power in database agnostic way. Oh and did I mention, this is a fun talk, even for us, to “perform”.

Help us caption & translate this video!

http://amara.org/v/GF2k/
Captions: 
	00:00:13,990 --> 00:00:21,740
hello everyone good morning good morning

00:00:16,760 --> 00:00:23,960
nice so being here today to present a

00:00:21,740 --> 00:00:26,869
talk which is active record can't do it

00:00:23,960 --> 00:00:28,760
Ariel can hopefully some of you might

00:00:26,869 --> 00:00:37,030
know Errol anyone knows even what is

00:00:28,760 --> 00:00:42,320
even great okay nice how many real nice

00:00:37,030 --> 00:00:44,300
I am dippin I'm preference and we are

00:00:42,320 --> 00:00:47,629
supposed to say that in the other order

00:00:44,300 --> 00:00:50,210
but fine we work for a company called as

00:00:47,629 --> 00:00:53,239
big binary which is based out of my own

00:00:50,210 --> 00:00:55,850
II and it's a remote company and we work

00:00:53,239 --> 00:01:01,010
from different places like I were from

00:00:55,850 --> 00:01:03,050
like from a home you like to do a lot of

00:01:01,010 --> 00:01:06,290
videos so you can check out our website

00:01:03,050 --> 00:01:08,870
videos got big binary com we do a lot of

00:01:06,290 --> 00:01:10,970
tutorials they are also currently

00:01:08,870 --> 00:01:13,310
looking for people so you should check

00:01:10,970 --> 00:01:19,549
out Big Bang Eircom / jobs to get an

00:01:13,310 --> 00:01:21,469
idea about it also I don't know if

00:01:19,549 --> 00:01:23,990
anyone invited you to the conference so

00:01:21,469 --> 00:01:26,479
welcome to the second conference dot

00:01:23,990 --> 00:01:29,329
name I don't know what that was and we

00:01:26,479 --> 00:01:31,549
hopefully read till the end because this

00:01:29,329 --> 00:01:33,740
is a very big name I don't know how to

00:01:31,549 --> 00:01:35,420
spell at me sorry say that big name so

00:01:33,740 --> 00:01:39,979
that's why conferenced what name is

00:01:35,420 --> 00:01:42,799
pretty easier we happen to live at this

00:01:39,979 --> 00:01:48,439
place called as pune anyone from pune

00:01:42,799 --> 00:01:51,170
away oh yeah where it is this time which

00:01:48,439 --> 00:01:53,390
is somewhere near Mumbai and it was like

00:01:51,170 --> 00:01:57,159
a week back that we started and it was

00:01:53,390 --> 00:02:01,729
just 167 hours that because to get here

00:01:57,159 --> 00:02:06,859
walking it was very very legible we

00:02:01,729 --> 00:02:10,490
traveled more than constantly yeah back

00:02:06,859 --> 00:02:13,280
in po Navy we do regular meetups and

00:02:10,490 --> 00:02:16,370
lots of different events under pony no

00:02:13,280 --> 00:02:20,540
Darby and so if any time you are around

00:02:16,370 --> 00:02:23,080
in pune come visit us at our meetups the

00:02:20,540 --> 00:02:27,260
last year started with deccan rubyconf

00:02:23,080 --> 00:02:33,110
which is one day kind of regional Cooney

00:02:27,260 --> 00:02:36,319
adds more inclined to what fun I don't

00:02:33,110 --> 00:02:46,310
know download some God conversely if we

00:02:36,319 --> 00:02:49,760
do that conf I'm sorry yep last year

00:02:46,310 --> 00:02:51,530
this in this confi launched something

00:02:49,760 --> 00:02:55,670
called as Ruby India how many of you

00:02:51,530 --> 00:02:58,819
heard of Ruby India or quite money so

00:02:55,670 --> 00:03:01,609
Ruby India was to highlight content from

00:02:58,819 --> 00:03:06,049
the Ruby Indian community like send out

00:03:01,609 --> 00:03:08,750
links for submitting cfps or Virdon

00:03:06,049 --> 00:03:12,109
heroin wait up like a blow to many tips

00:03:08,750 --> 00:03:13,760
and all those things and yeah do

00:03:12,109 --> 00:03:17,959
subscribe on Ruby India our next issue

00:03:13,760 --> 00:03:21,980
comes today again and along with Ruby

00:03:17,959 --> 00:03:24,379
India in the last Rubicon fini like the

00:03:21,980 --> 00:03:26,690
control be confio nonce podcast at

00:03:24,379 --> 00:03:29,840
rubicon ruby in da dark so do visit

00:03:26,690 --> 00:03:31,599
again podcasts where we interview a lot

00:03:29,840 --> 00:03:36,889
of people in the Indian community

00:03:31,599 --> 00:03:42,379
recently we interviewed c42 c42 anyone

00:03:36,889 --> 00:03:44,870
where you do yeah so do check out a the

00:03:42,379 --> 00:03:46,370
podcast like we interviewed Gotham and

00:03:44,870 --> 00:03:49,519
lot not many other people from the

00:03:46,370 --> 00:03:51,470
Indian community and yeah we like to

00:03:49,519 --> 00:03:53,480
interview them and ask different things

00:03:51,470 --> 00:03:56,569
about how the Indian Ruby community how

00:03:53,480 --> 00:04:01,699
it came into being also this is not a

00:03:56,569 --> 00:04:03,859
magenta so that's all about like about

00:04:01,699 --> 00:04:06,079
what we are going to present before I

00:04:03,859 --> 00:04:08,329
begin like I just let him know so

00:04:06,079 --> 00:04:10,730
prathamesh I have been working on you

00:04:08,329 --> 00:04:11,750
know pretty funky things these days and

00:04:10,730 --> 00:04:14,989
this is one of the startups that have

00:04:11,750 --> 00:04:17,780
started called as backpackers so I have

00:04:14,989 --> 00:04:20,989
been traveling a lot recently and you

00:04:17,780 --> 00:04:22,820
know traveled and I like to stay at

00:04:20,989 --> 00:04:25,070
different places since my job is removed

00:04:22,820 --> 00:04:27,710
so I'd like to I also made a lot of

00:04:25,070 --> 00:04:30,139
friends who backpack okay that's why

00:04:27,710 --> 00:04:32,659
backpackers main you know it's it's an

00:04:30,139 --> 00:04:34,699
actual company which is registered and I

00:04:32,659 --> 00:04:37,190
like to do so these are some of the

00:04:34,699 --> 00:04:39,500
things that my startup does which is you

00:04:37,190 --> 00:04:40,560
know I help them help out I like to help

00:04:39,500 --> 00:04:42,419
out my friends in

00:04:40,560 --> 00:04:44,669
basic task management finding good

00:04:42,419 --> 00:04:46,130
locations for you know when they are

00:04:44,669 --> 00:04:48,840
roaming around in different locations

00:04:46,130 --> 00:04:51,480
finding good places to visit finding

00:04:48,840 --> 00:04:55,440
good food centers because I don't know

00:04:51,480 --> 00:04:57,960
we want for it we don't know what to eat

00:04:55,440 --> 00:05:00,900
and finding good and cheap hostels or

00:04:57,960 --> 00:05:03,180
hot Lisa wrong but all of this tasker

00:05:00,900 --> 00:05:06,720
like very basic to us every app has it

00:05:03,180 --> 00:05:08,669
what is your unique feature so we we

00:05:06,720 --> 00:05:11,460
like to have we also have very magical

00:05:08,669 --> 00:05:13,200
features like you know luggage is always

00:05:11,460 --> 00:05:15,060
lost so we also have this very magical

00:05:13,200 --> 00:05:17,370
feature called called us find your lost

00:05:15,060 --> 00:05:20,400
back so anyone who has heard of our cash

00:05:17,370 --> 00:05:24,570
lost back sorry our cage back only one

00:05:20,400 --> 00:05:26,310
person was the twitter handle so we also

00:05:24,570 --> 00:05:28,410
have these magical feats like magical

00:05:26,310 --> 00:05:30,660
features which allow us to have these

00:05:28,410 --> 00:05:33,660
many happy customers who find their

00:05:30,660 --> 00:05:38,010
backs when they are lost or two weeks or

00:05:33,660 --> 00:05:40,770
I don't know and our customers are mind

00:05:38,010 --> 00:05:44,700
blown with like our features that are

00:05:40,770 --> 00:05:46,039
there so before i go into like the other

00:05:44,700 --> 00:05:48,960
features i will give you an idea of what

00:05:46,039 --> 00:05:51,000
you know i like to use a lot of active

00:05:48,960 --> 00:05:52,440
record and all those things so this is

00:05:51,000 --> 00:05:55,410
something that i have in my app you know

00:05:52,440 --> 00:05:57,870
i have traveler class which keeps takes

00:05:55,410 --> 00:06:00,330
cares of previews and bookings I have a

00:05:57,870 --> 00:06:01,830
task which is which belongs to a

00:06:00,330 --> 00:06:04,110
location like what I want to do for that

00:06:01,830 --> 00:06:06,120
particular location I have a location

00:06:04,110 --> 00:06:08,160
which will keep information about the

00:06:06,120 --> 00:06:09,330
location and it will have reviews it

00:06:08,160 --> 00:06:12,000
will have different bookings like

00:06:09,330 --> 00:06:13,560
hostels and it can have nearby locations

00:06:12,000 --> 00:06:15,960
which is the cell phone on that on that

00:06:13,560 --> 00:06:18,330
particular model and also have bookings

00:06:15,960 --> 00:06:21,960
which are related to locations right you

00:06:18,330 --> 00:06:24,150
know very sophisticated good and you

00:06:21,960 --> 00:06:26,010
can't believe it but I actually have

00:06:24,150 --> 00:06:28,530
this app right now and it's in

00:06:26,010 --> 00:06:31,500
production okay what's actually running

00:06:28,530 --> 00:06:34,020
so do visit news visit my website which

00:06:31,500 --> 00:06:35,639
is backpackers rata require so just fire

00:06:34,020 --> 00:06:37,760
up I don't know if the instance is

00:06:35,639 --> 00:06:44,190
running or not because its production

00:06:37,760 --> 00:06:46,710
and I actually have life 31 users which

00:06:44,190 --> 00:06:49,349
is X your habits kidding yeah which is

00:06:46,710 --> 00:06:52,590
like I don't know if you have ever seen

00:06:49,349 --> 00:06:53,409
31 users in your apps because its

00:06:52,590 --> 00:06:59,769
production

00:06:53,409 --> 00:07:02,679
so I'm sorry yeah I mean yeah I need

00:06:59,769 --> 00:07:05,169
pain I okay I understand 10 but I mean

00:07:02,679 --> 00:07:07,119
10 alike from your company but 31 is

00:07:05,169 --> 00:07:11,110
like a lot and I'm a single person

00:07:07,119 --> 00:07:14,979
company you know nice and since I have

00:07:11,110 --> 00:07:16,149
31 users on a single head of coincidence

00:07:14,979 --> 00:07:17,379
i like to have performance make

00:07:16,149 --> 00:07:21,459
performance is very important when you

00:07:17,379 --> 00:07:23,949
have 31 users so I like to scale my appt

00:07:21,459 --> 00:07:26,679
a lot that's why I use raw sequin you

00:07:23,949 --> 00:07:29,649
know because active record is very slow

00:07:26,679 --> 00:07:34,509
for me it's I don't know that's why I

00:07:29,649 --> 00:07:36,729
have very you know extremely awesome

00:07:34,509 --> 00:07:40,929
feature awesome queries that i right and

00:07:36,729 --> 00:07:42,369
very you know chilled out SQL queries

00:07:40,929 --> 00:07:45,699
that I used like something like this

00:07:42,369 --> 00:07:48,789
okay so you see if I have this query

00:07:45,699 --> 00:07:52,209
over here which does searching for food

00:07:48,789 --> 00:07:53,409
make searching for QC if I'm going in

00:07:52,209 --> 00:07:55,329
some other country and I want to find

00:07:53,409 --> 00:07:57,309
indian indian food which is very hard I

00:07:55,329 --> 00:08:00,879
don't know if they don't even know what

00:07:57,309 --> 00:08:03,429
is Indian food so I like to have these

00:08:00,879 --> 00:08:05,889
raw SQL queries that I'd have in my app

00:08:03,429 --> 00:08:07,869
which helped me find that okay so you

00:08:05,889 --> 00:08:09,550
can find see i am using i like over here

00:08:07,869 --> 00:08:12,789
since i'm using post rest and then i can

00:08:09,550 --> 00:08:17,709
search for indian food or related you

00:08:12,789 --> 00:08:19,719
seem so this is something about us yeah

00:08:17,709 --> 00:08:20,979
this kind of works well but you know

00:08:19,719 --> 00:08:23,319
what it does not work rock and

00:08:20,979 --> 00:08:25,389
experience hey and but it had some

00:08:23,319 --> 00:08:29,319
problems so have you thought about the

00:08:25,389 --> 00:08:31,179
problems what problems so it has Ross

00:08:29,319 --> 00:08:33,579
people that is the first thing then

00:08:31,179 --> 00:08:35,500
inherit some it has it has performance I

00:08:33,579 --> 00:08:38,079
don't know yeah but it has some database

00:08:35,500 --> 00:08:39,459
specific things also like I like and if

00:08:38,079 --> 00:08:41,680
you if you want to move to some other

00:08:39,459 --> 00:08:43,659
database I don't know whether you move

00:08:41,680 --> 00:08:45,100
from postgis to other database but if

00:08:43,659 --> 00:08:46,689
you want to then it will cause problems

00:08:45,100 --> 00:08:50,620
because that where you will not be

00:08:46,689 --> 00:08:52,569
reusable so in that case error will help

00:08:50,620 --> 00:08:55,540
you have you heard of it you know what

00:08:52,569 --> 00:08:58,809
what is needed Errol is a ruby library

00:08:55,540 --> 00:09:00,430
it is used for generating SQL so it is

00:08:58,809 --> 00:09:02,860
actually based on relational algebra

00:09:00,430 --> 00:09:05,949
okay has concepts like abstract syntax

00:09:02,860 --> 00:09:07,030
tree nodes visitors and installs that

00:09:05,949 --> 00:09:09,280
query information in

00:09:07,030 --> 00:09:12,100
all those st n nodes and then it just

00:09:09,280 --> 00:09:13,990
generates the SQL so it is used back to

00:09:12,100 --> 00:09:16,450
record under the hood for generating

00:09:13,990 --> 00:09:19,840
those change where clauses okay its use

00:09:16,450 --> 00:09:21,850
from rails 3 onwards but it has also a

00:09:19,840 --> 00:09:24,550
lots of other features which can help in

00:09:21,850 --> 00:09:27,430
use cases like yours and those are not

00:09:24,550 --> 00:09:29,830
exposed to act your accordion so and

00:09:27,430 --> 00:09:31,600
also it is largely undocumented so i

00:09:29,830 --> 00:09:33,520
know that you might not be knowing about

00:09:31,600 --> 00:09:35,680
terrible materials yeah but I'll help

00:09:33,520 --> 00:09:37,480
you I'll help you how to work change

00:09:35,680 --> 00:09:40,420
your ladies we already have active

00:09:37,480 --> 00:09:41,830
record so what like why is there a role

00:09:40,420 --> 00:09:44,230
or white why do I need to get about

00:09:41,830 --> 00:09:45,760
earring oh well actor recorder is like

00:09:44,230 --> 00:09:48,610
full blown over him it does a lot of

00:09:45,760 --> 00:09:51,070
things like it runs the kid runs your

00:09:48,610 --> 00:09:52,990
queries it converts your SQL result into

00:09:51,070 --> 00:09:55,810
Ruby objects it converts them back into

00:09:52,990 --> 00:09:59,530
SQL but Java Farrell is just to generate

00:09:55,810 --> 00:10:01,420
sequel nothing else so yeah it doesn't

00:09:59,530 --> 00:10:03,250
even know about your database it doesn't

00:10:01,420 --> 00:10:05,320
even know about what your table

00:10:03,250 --> 00:10:07,000
structure is what your columns are it

00:10:05,320 --> 00:10:09,610
doesn't know anything just generate the

00:10:07,000 --> 00:10:11,590
sequel so actor record will actually

00:10:09,610 --> 00:10:13,210
connect to your database it will get the

00:10:11,590 --> 00:10:16,180
columns information it will get a table

00:10:13,210 --> 00:10:18,640
information give it to Errol Errol will

00:10:16,180 --> 00:10:20,290
generate the query and then it will give

00:10:18,640 --> 00:10:22,570
it back to active record after record

00:10:20,290 --> 00:10:24,490
will execute it and you're done so

00:10:22,570 --> 00:10:27,190
that's how the fluids and how how

00:10:24,490 --> 00:10:29,140
exactly does this he'll work and how do

00:10:27,190 --> 00:10:31,900
I use it you don't have to do anything

00:10:29,140 --> 00:10:34,090
for using it because once you include

00:10:31,900 --> 00:10:36,610
rails which includes active record Aaron

00:10:34,090 --> 00:10:38,200
is just a runtime dependency so once you

00:10:36,610 --> 00:10:40,420
have the rails app running you already

00:10:38,200 --> 00:10:44,650
have it you just don't know what oh

00:10:40,420 --> 00:10:46,990
in production so for getting started

00:10:44,650 --> 00:10:48,880
with using error we just have to grab

00:10:46,990 --> 00:10:50,950
the underlying error table object this

00:10:48,880 --> 00:10:53,290
is the starting point and once we grab

00:10:50,950 --> 00:10:54,970
that then we can build our queries based

00:10:53,290 --> 00:10:57,940
on or what are attributes that are

00:10:54,970 --> 00:10:59,860
present in that table so we can write

00:10:57,940 --> 00:11:02,190
this convenient method so a curricle

00:10:59,860 --> 00:11:05,410
core class has this error table method

00:11:02,190 --> 00:11:07,420
using which we can we can access the

00:11:05,410 --> 00:11:09,400
underlying error table of that model and

00:11:07,420 --> 00:11:11,050
we can write convenient method like this

00:11:09,400 --> 00:11:13,900
so location under table will give us

00:11:11,050 --> 00:11:16,570
their table so let's see how we can

00:11:13,900 --> 00:11:18,010
refactor your query using error so here

00:11:16,570 --> 00:11:20,170
what we are doing is we are just

00:11:18,010 --> 00:11:22,029
matching our cues in attribute

00:11:20,170 --> 00:11:24,970
checking whether it is matching with

00:11:22,029 --> 00:11:27,910
India or whatever your search terms are

00:11:24,970 --> 00:11:31,360
and it will generate the same query nice

00:11:27,910 --> 00:11:34,029
and it looks cleaner yes so able of

00:11:31,360 --> 00:11:35,829
choosing will give you the attribute a

00:11:34,029 --> 00:11:37,899
lil attribute this is the basic

00:11:35,829 --> 00:11:40,360
structure for representing your column

00:11:37,899 --> 00:11:42,820
so once you have the table you also have

00:11:40,360 --> 00:11:44,139
attributes and similar to using you can

00:11:42,820 --> 00:11:46,029
get other attributes like pricing

00:11:44,139 --> 00:11:48,940
location ID whatever all of your

00:11:46,029 --> 00:11:50,949
attributes are possible and then you can

00:11:48,940 --> 00:11:52,870
you build a predicate on that attribute

00:11:50,949 --> 00:11:56,139
so matching that attribute should match

00:11:52,870 --> 00:11:57,970
to your search terms God and this

00:11:56,139 --> 00:12:00,010
predicate will ultimately generator

00:11:57,970 --> 00:12:01,690
abstract syntax tree it will store all

00:12:00,010 --> 00:12:03,850
the query information for this

00:12:01,690 --> 00:12:06,730
particular clause into that a steal and

00:12:03,850 --> 00:12:09,430
then we can feed it to your weblog so

00:12:06,730 --> 00:12:12,990
just like we can pass hash arguments a

00:12:09,430 --> 00:12:15,339
string to where we can also pass AST and

00:12:12,990 --> 00:12:17,350
active record will internally handle how

00:12:15,339 --> 00:12:20,139
to pass that is an outage on red query

00:12:17,350 --> 00:12:23,079
out of that but yeah you can you can

00:12:20,139 --> 00:12:25,000
basically pass any st to the plug and it

00:12:23,079 --> 00:12:27,399
will generate the same very just looks

00:12:25,000 --> 00:12:28,990
interesting yes and once you run this

00:12:27,399 --> 00:12:31,540
query with my sequel it will give you

00:12:28,990 --> 00:12:33,940
the light period oh so you don't have to

00:12:31,540 --> 00:12:36,550
write database specific things also you

00:12:33,940 --> 00:12:38,350
can extract this predicate into a

00:12:36,550 --> 00:12:40,750
separate class method and then you can

00:12:38,350 --> 00:12:43,180
reuse it so almost all of your problems

00:12:40,750 --> 00:12:45,459
are solved and it becomes database

00:12:43,180 --> 00:12:48,670
agnostic so once you write a query for

00:12:45,459 --> 00:12:50,980
one at a one special used case it will

00:12:48,670 --> 00:12:53,380
run for almost all databases so Errol

00:12:50,980 --> 00:12:56,589
supports my sequel postgres it also

00:12:53,380 --> 00:12:59,380
supports oracle ms SQL this looks

00:12:56,589 --> 00:13:01,660
interesting yes so tell me how you

00:12:59,380 --> 00:13:04,269
handle this use case let us say the user

00:13:01,660 --> 00:13:06,490
doesn't want non-vegetarian food dude

00:13:04,269 --> 00:13:08,079
whatever I mean which this is pretty

00:13:06,490 --> 00:13:10,600
simple you know I don't know why you're

00:13:08,079 --> 00:13:13,720
asking me I just use this query called

00:13:10,600 --> 00:13:16,449
as you know I use not I like yes I just

00:13:13,720 --> 00:13:18,940
have you know I have a lot of people who

00:13:16,449 --> 00:13:21,970
are like you who are vegetarian so I

00:13:18,940 --> 00:13:23,920
have this handy query which doesn't

00:13:21,970 --> 00:13:25,480
which returns me all the cheesy like

00:13:23,920 --> 00:13:27,940
places which do not have okay

00:13:25,480 --> 00:13:29,560
non-vegetarian food yeah but we can use

00:13:27,940 --> 00:13:31,839
there'll in this case also so it's not

00:13:29,560 --> 00:13:33,950
just limited to generating positive

00:13:31,839 --> 00:13:36,110
predicate for every positive

00:13:33,950 --> 00:13:38,060
reddiquette it has a related negative

00:13:36,110 --> 00:13:40,970
predicate also so this let us like match

00:13:38,060 --> 00:13:43,280
you can use does not match and all kinds

00:13:40,970 --> 00:13:46,310
of sizes so these are all the list of

00:13:43,280 --> 00:13:48,640
predicates Darryl supports and one of

00:13:46,310 --> 00:13:51,980
the interesting feature of these

00:13:48,640 --> 00:13:55,040
predicates is there are star any and

00:13:51,980 --> 00:13:57,980
star all so you can pass array arguments

00:13:55,040 --> 00:14:01,220
to these these predicates and it will

00:13:57,980 --> 00:14:04,400
generate a proper and or or SQL for you

00:14:01,220 --> 00:14:06,320
so generally we we have to end of a

00:14:04,400 --> 00:14:08,750
juggle around with the strings to

00:14:06,320 --> 00:14:10,460
possibly like all right properly handle

00:14:08,750 --> 00:14:15,500
that but these methods are very

00:14:10,460 --> 00:14:17,270
convenient I mean okay but you know this

00:14:15,500 --> 00:14:18,740
is not this is very I mean you're

00:14:17,270 --> 00:14:20,630
speaking very simple things are these

00:14:18,740 --> 00:14:24,350
are very good you know smalls things

00:14:20,630 --> 00:14:26,900
which I usually done by me know how to

00:14:24,350 --> 00:14:29,480
ask your lure active record it does eral

00:14:26,900 --> 00:14:31,910
allow me to do hardcore things like you

00:14:29,480 --> 00:14:33,710
know I have this query over your which

00:14:31,910 --> 00:14:37,100
is do what is dual trying to do is find

00:14:33,710 --> 00:14:38,450
locations which have bookings and it is

00:14:37,100 --> 00:14:40,760
trying to find locations which have

00:14:38,450 --> 00:14:42,740
ratings greater than three so I am using

00:14:40,760 --> 00:14:45,380
you know pretty hardcore stuff over here

00:14:42,740 --> 00:14:48,230
which is joins okay and I'm trying to

00:14:45,380 --> 00:14:50,120
find do an inner join because active

00:14:48,230 --> 00:14:53,060
record doesn't allow I don't know why

00:14:50,120 --> 00:14:54,950
when inner join on the same table and

00:14:53,060 --> 00:14:58,400
then I'm trying to find all locations

00:14:54,950 --> 00:15:00,410
like you have extra and condition yeah

00:14:58,400 --> 00:15:02,180
and then I am fine i doing a join on

00:15:00,410 --> 00:15:04,100
another table and then I'm also doing an

00:15:02,180 --> 00:15:07,220
intersect to find all the cases which

00:15:04,100 --> 00:15:08,600
match for this particular query this is

00:15:07,220 --> 00:15:11,840
very hard for I don't know I mean I

00:15:08,600 --> 00:15:13,850
don't think Evel will be well earlier II

00:15:11,840 --> 00:15:17,330
really shines with their joints actually

00:15:13,850 --> 00:15:19,060
so it'll Willard K can generate any kind

00:15:17,330 --> 00:15:21,560
of possible complex joint very easily

00:15:19,060 --> 00:15:25,070
okay so i will i will show you how to do

00:15:21,560 --> 00:15:26,960
that so the key to generate waves using

00:15:25,070 --> 00:15:29,660
Errol is to break down those into

00:15:26,960 --> 00:15:32,270
smaller parts and then reuse it again

00:15:29,660 --> 00:15:34,820
like break and then compose at the end

00:15:32,270 --> 00:15:36,410
to build the final query so let's solve

00:15:34,820 --> 00:15:38,720
the first problem you want all reviews

00:15:36,410 --> 00:15:40,310
having written greater than three so we

00:15:38,720 --> 00:15:44,690
can use the GT predicate we are done

00:15:40,310 --> 00:15:46,370
okay true so now let's do the joint the

00:15:44,690 --> 00:15:47,340
problem with active record join and why

00:15:46,370 --> 00:15:49,470
you have to

00:15:47,340 --> 00:15:51,120
go for a sequel was that you have to

00:15:49,470 --> 00:15:54,590
specify the extra end condition which

00:15:51,120 --> 00:15:56,850
was not possible right and so

00:15:54,590 --> 00:15:58,970
activerecord join method is a bit of

00:15:56,850 --> 00:16:01,200
magical like you just specify the

00:15:58,970 --> 00:16:03,090
association named it will figure out

00:16:01,200 --> 00:16:05,460
which foreign key to match it will

00:16:03,090 --> 00:16:08,100
generate the inner join properly but in

00:16:05,460 --> 00:16:10,320
Errol you have to specify each thing as

00:16:08,100 --> 00:16:12,390
you go so first you specify on which

00:16:10,320 --> 00:16:14,760
table you want to join which is the

00:16:12,390 --> 00:16:16,800
reactor which is the review okay then

00:16:14,760 --> 00:16:19,920
you specify on which condition like what

00:16:16,800 --> 00:16:23,370
is your join condition so if you go to

00:16:19,920 --> 00:16:24,990
next then you can specify on which

00:16:23,370 --> 00:16:26,640
condition you want to join so this is

00:16:24,990 --> 00:16:30,540
just a simple predicate that we already

00:16:26,640 --> 00:16:32,250
saw and inactive record you are limited

00:16:30,540 --> 00:16:34,350
to equality predicate for join condition

00:16:32,250 --> 00:16:36,510
but here you can just replace that

00:16:34,350 --> 00:16:39,300
predicate with any other predicate also

00:16:36,510 --> 00:16:41,850
okay which might not be a common use

00:16:39,300 --> 00:16:43,500
case but you can do it it's possible and

00:16:41,850 --> 00:16:47,790
then you can specify the extra and

00:16:43,500 --> 00:16:49,410
conditions so you can specify the extra

00:16:47,790 --> 00:16:52,410
and condition for your join and that

00:16:49,410 --> 00:16:54,990
that can be on the review table it can

00:16:52,410 --> 00:16:57,030
also be on the location table it's it's

00:16:54,990 --> 00:17:00,120
like you can specify the in any of the

00:16:57,030 --> 00:17:01,500
predicate that we want okay and at the

00:17:00,120 --> 00:17:04,620
end we just want to select something

00:17:01,500 --> 00:17:07,350
from it so as Errol is based on as a

00:17:04,620 --> 00:17:09,840
relational algebra it has its roots like

00:17:07,350 --> 00:17:11,790
it has concepts like projections which

00:17:09,840 --> 00:17:14,340
are similar to selections in sequel so

00:17:11,790 --> 00:17:16,709
we will project the everything we want

00:17:14,340 --> 00:17:18,300
to predict star so we do aerial dots

00:17:16,709 --> 00:17:21,410
vanilla air alert star is just a

00:17:18,300 --> 00:17:23,970
convenient method for accessing star and

00:17:21,410 --> 00:17:26,400
we are not just limited to inner join so

00:17:23,970 --> 00:17:29,670
generally if you want to do any kind of

00:17:26,400 --> 00:17:32,640
left join or full join or outer join

00:17:29,670 --> 00:17:35,850
then we have to write Rho square but NL

00:17:32,640 --> 00:17:37,770
supports other joints also so the second

00:17:35,850 --> 00:17:40,380
argument to join function is full outer

00:17:37,770 --> 00:17:41,760
join or outer join any other I don't

00:17:40,380 --> 00:17:44,700
know where you're going but kind of

00:17:41,760 --> 00:17:46,500
focus I don't know if everyone else is

00:17:44,700 --> 00:17:48,300
following but I am falling over here so

00:17:46,500 --> 00:17:50,460
case focus what we were trying to solve

00:17:48,300 --> 00:17:51,600
we are not trying to solve the I don't

00:17:50,460 --> 00:17:53,340
know what is saying how to join us and

00:17:51,600 --> 00:17:55,710
stuff like that try to focus on the

00:17:53,340 --> 00:17:58,620
query yeah you know focus yes yes I am

00:17:55,710 --> 00:17:59,800
focusing so we want to get all the

00:17:58,620 --> 00:18:02,260
locations with book

00:17:59,800 --> 00:18:04,450
and all the locations with rating

00:18:02,260 --> 00:18:06,610
greater than three actually you know

00:18:04,450 --> 00:18:08,740
what we already solved the problem so

00:18:06,610 --> 00:18:10,720
the first square is we get all the

00:18:08,740 --> 00:18:13,690
locations with reviews and whatever your

00:18:10,720 --> 00:18:15,790
condition and second is we just want

00:18:13,690 --> 00:18:17,710
location with bookings we are not doing

00:18:15,790 --> 00:18:19,930
anything magical here so we can use the

00:18:17,710 --> 00:18:22,000
active record way of handling the inner

00:18:19,930 --> 00:18:24,730
join true and then combine them using

00:18:22,000 --> 00:18:27,070
interested Jordan I can intersect is

00:18:24,730 --> 00:18:28,900
what intersect will just intersect the

00:18:27,070 --> 00:18:32,050
two sub queries it will generate like it

00:18:28,900 --> 00:18:33,880
will get one st from here initially yeah

00:18:32,050 --> 00:18:37,090
obviously it's from it that's why I'm

00:18:33,880 --> 00:18:38,980
saying it so it gets one st from the

00:18:37,090 --> 00:18:41,260
left side one st from the right side and

00:18:38,980 --> 00:18:43,750
it will intersect that query in properly

00:18:41,260 --> 00:18:45,670
and you are not just limited to

00:18:43,750 --> 00:18:48,820
intersect you can do unions you can do

00:18:45,670 --> 00:18:51,010
except to others so not just and you're

00:18:48,820 --> 00:18:53,080
also not just limited to two sub period

00:18:51,010 --> 00:18:55,600
you can run this on any number of sub

00:18:53,080 --> 00:18:59,020
queries it's possible so also one minute

00:18:55,600 --> 00:19:02,650
you saw for that but ok fine ok well you

00:18:59,020 --> 00:19:06,040
are not still convinced within I mean

00:19:02,650 --> 00:19:08,770
fine this is like I don't know very

00:19:06,040 --> 00:19:12,340
simple stuff joins is ok joins us all so

00:19:08,770 --> 00:19:15,070
simple let me give you a harder one so I

00:19:12,340 --> 00:19:16,900
I have this you know hardcore thing

00:19:15,070 --> 00:19:19,360
which is called as self joints I'm going

00:19:16,900 --> 00:19:21,960
over here and I'm trying to find all

00:19:19,360 --> 00:19:24,190
hotels within five kilometers like

00:19:21,960 --> 00:19:25,810
people try to when they try to search

00:19:24,190 --> 00:19:28,180
like my friends try to search for

00:19:25,810 --> 00:19:29,680
hottest they usually look places where

00:19:28,180 --> 00:19:31,360
they have more so they have places to

00:19:29,680 --> 00:19:33,340
visit right so I have also provided

00:19:31,360 --> 00:19:34,930
dysfunctionality you know I have nearby

00:19:33,340 --> 00:19:37,330
locations which I which is a

00:19:34,930 --> 00:19:39,220
self-designed model and then I do

00:19:37,330 --> 00:19:40,870
something like this I don't know what it

00:19:39,220 --> 00:19:43,630
is it's like inner join on the same

00:19:40,870 --> 00:19:45,250
table try to find locations and location

00:19:43,630 --> 00:19:46,510
is less than the distance between the

00:19:45,250 --> 00:19:49,750
two locations are less than you know

00:19:46,510 --> 00:19:52,630
right five kilometers or whatever yeah

00:19:49,750 --> 00:19:54,160
and it it's like this is something that

00:19:52,630 --> 00:19:56,830
only my app provides in the world right

00:19:54,160 --> 00:19:58,180
now so it's very hard I don't know you

00:19:56,830 --> 00:20:00,400
will be able to do something about it

00:19:58,180 --> 00:20:03,220
well Errol can help you in results so

00:20:00,400 --> 00:20:05,200
Aaron at the concept of alias you can

00:20:03,220 --> 00:20:07,330
create alias for different tables using

00:20:05,200 --> 00:20:09,700
the alias method and then you can

00:20:07,330 --> 00:20:11,020
generate the same very back so in your

00:20:09,700 --> 00:20:13,309
case you want nearby location fell

00:20:11,020 --> 00:20:16,519
through so we just generate ps4

00:20:13,309 --> 00:20:18,529
nearby locations and then the join

00:20:16,519 --> 00:20:21,200
forces method is the alias referring to

00:20:18,529 --> 00:20:22,639
the same table yes it's as it is using

00:20:21,200 --> 00:20:25,279
the table method it is referring to

00:20:22,639 --> 00:20:28,070
locate location okay correct and then we

00:20:25,279 --> 00:20:30,320
just as as usual we specify our join

00:20:28,070 --> 00:20:32,570
condition and the key here is the joint

00:20:30,320 --> 00:20:36,350
sources method so what Dad does is it

00:20:32,570 --> 00:20:38,509
gives you the underlying Errol's join

00:20:36,350 --> 00:20:41,749
the representation of that node okay

00:20:38,509 --> 00:20:43,580
it's a bit hard to understand but just

00:20:41,749 --> 00:20:45,950
consider that you get Errol's

00:20:43,580 --> 00:20:48,110
representation of joint exit I don't

00:20:45,950 --> 00:20:49,940
okay I don't care about that yeah we

00:20:48,110 --> 00:20:51,529
don't have to care about it we can

00:20:49,940 --> 00:20:53,299
specify the extra and condition just

00:20:51,529 --> 00:20:56,929
like we had earlier the advantage James

00:20:53,299 --> 00:21:00,769
yeah in the same one and once we get

00:20:56,929 --> 00:21:03,470
that joint sources we get a array of a

00:21:00,769 --> 00:21:07,369
railroad joints we can feed it to act 0

00:21:03,470 --> 00:21:09,619
record joints method boom and so just

00:21:07,369 --> 00:21:12,470
like we can feed abstract syntax trees

00:21:09,619 --> 00:21:14,749
to where clauses we can also feed Errol

00:21:12,470 --> 00:21:16,990
joint loads to act 0 record joints is

00:21:14,749 --> 00:21:20,240
this something which active record uses

00:21:16,990 --> 00:21:22,249
internally does so as it stops support

00:21:20,240 --> 00:21:24,379
spring joint side supports association

00:21:22,249 --> 00:21:27,710
joints it also supports handling of

00:21:24,379 --> 00:21:29,539
error nodes okays nice so it was again

00:21:27,710 --> 00:21:33,019
generate you the same query pack what

00:21:29,539 --> 00:21:38,029
you had in Ross it could fine I don't

00:21:33,019 --> 00:21:39,789
know who but these are all okay this is

00:21:38,029 --> 00:21:43,009
also a good feature but I don't know I

00:21:39,789 --> 00:21:44,809
these are not simple things and I also

00:21:43,009 --> 00:21:48,019
have these very complicated things

00:21:44,809 --> 00:21:50,749
called as you know yeah you're doing

00:21:48,019 --> 00:21:52,220
making my axe here because 31 users are

00:21:50,749 --> 00:21:54,259
sharing that information with me so I

00:21:52,220 --> 00:21:55,820
want to make it secure so I used very

00:21:54,259 --> 00:21:59,259
complicated things you can see over here

00:21:55,820 --> 00:22:01,940
which is I like to use direct direct

00:21:59,259 --> 00:22:04,249
yeah encryption functions directly from

00:22:01,940 --> 00:22:07,220
database because Ruby slow I don't know

00:22:04,249 --> 00:22:09,019
why so I use this thing's called as he

00:22:07,220 --> 00:22:10,700
seemed encrypt amongst a postgres so I'm

00:22:09,019 --> 00:22:12,159
using those kind of things yeah i'm

00:22:10,700 --> 00:22:13,999
using the set ticket which is fetching

00:22:12,159 --> 00:22:16,970
encrypting it from database and then

00:22:13,999 --> 00:22:19,639
other Allah like setting in the value

00:22:16,970 --> 00:22:21,710
for the particular field or or i'm using

00:22:19,639 --> 00:22:23,809
get secret which is executing again i'm

00:22:21,710 --> 00:22:25,639
trying to fetch this by decrypting that

00:22:23,809 --> 00:22:26,800
particular value and this is very hard

00:22:25,639 --> 00:22:29,320
for our

00:22:26,800 --> 00:22:32,350
don't don't fit eral into this I don't

00:22:29,320 --> 00:22:34,990
know why you like it and any any kind

00:22:32,350 --> 00:22:36,670
any library can't do it like Errol also

00:22:34,990 --> 00:22:39,460
doesn't do it activerecord also doesn't

00:22:36,670 --> 00:22:42,250
agree I told you but wait it'll support

00:22:39,460 --> 00:22:44,650
this with name functions so Errol has

00:22:42,250 --> 00:22:47,320
this concept of functions name functions

00:22:44,650 --> 00:22:50,590
which can be used as wrappers for our

00:22:47,320 --> 00:22:52,750
SQL functions so we can wrap the skill

00:22:50,590 --> 00:22:55,720
function in an Ruby object and then we

00:22:52,750 --> 00:22:58,150
can reuse it for our needs so you're PGP

00:22:55,720 --> 00:23:00,070
seem encrypt can be wrapped into this

00:22:58,150 --> 00:23:02,110
name function very easily you just pass

00:23:00,070 --> 00:23:04,690
the name of the function its arguments

00:23:02,110 --> 00:23:06,430
optionally you can pass the alias so

00:23:04,690 --> 00:23:08,830
once you pass the earliest it will

00:23:06,430 --> 00:23:10,750
generate the proper as Klaus do a case

00:23:08,830 --> 00:23:12,550
looks like I don't know my one was

00:23:10,750 --> 00:23:15,220
simpler than this i don't know this is

00:23:12,550 --> 00:23:17,440
very big well in this case it can be big

00:23:15,220 --> 00:23:20,200
but let's say you want to order your

00:23:17,440 --> 00:23:22,330
criteria using some some ordering

00:23:20,200 --> 00:23:24,250
criteria like Cody's then you can

00:23:22,330 --> 00:23:26,230
generate a function for it wrap it in

00:23:24,250 --> 00:23:30,700
name function and then pass it around

00:23:26,230 --> 00:23:33,310
for your order clauses so I mean you can

00:23:30,700 --> 00:23:35,230
reuse it as per your news it's not just

00:23:33,310 --> 00:23:37,120
limited to selections you can pass it

00:23:35,230 --> 00:23:40,120
for other active record methods like

00:23:37,120 --> 00:23:42,790
order also because India and it just

00:23:40,120 --> 00:23:46,050
generates esq so whatever accepts the st

00:23:42,790 --> 00:23:50,440
you can pass it kind fruit island and

00:23:46,050 --> 00:23:52,210
you're still not convinced fine ok so in

00:23:50,440 --> 00:23:54,400
the end we covered a lot of things today

00:23:52,210 --> 00:23:56,820
we covered a kind of complex predicates

00:23:54,400 --> 00:23:59,170
that are possible through it we covered

00:23:56,820 --> 00:24:02,230
combinations using intersections we

00:23:59,170 --> 00:24:04,990
covered our unions except then recovered

00:24:02,230 --> 00:24:07,930
joints we did all ends of possible in

00:24:04,990 --> 00:24:11,020
that are possible and we saw like how to

00:24:07,930 --> 00:24:14,620
use their with an accurate word to to

00:24:11,020 --> 00:24:17,020
enhance it or to use it in our use it to

00:24:14,620 --> 00:24:20,110
build our queries more object-oriented

00:24:17,020 --> 00:24:22,210
way if you put it that way it was I

00:24:20,110 --> 00:24:24,910
don't know if for them but for me it was

00:24:22,210 --> 00:24:27,760
what useful i will try to can since my

00:24:24,910 --> 00:24:32,080
app is very can you take me as a

00:24:27,760 --> 00:24:34,210
co-founder no okay i need to scale I

00:24:32,080 --> 00:24:36,460
don't know with your expertise I will be

00:24:34,210 --> 00:24:38,320
able to scale or no but anyway this was

00:24:36,460 --> 00:24:39,720
were pretty interesting for me and I I

00:24:38,320 --> 00:24:41,429
don't know i'll try to take a look

00:24:39,720 --> 00:24:44,520
and maybe refactor map it was pretty

00:24:41,429 --> 00:24:46,530
helpful I don't know and also thanks

00:24:44,520 --> 00:24:49,380
again and this is not again this is not

00:24:46,530 --> 00:24:52,890
merging together thank you our code is

00:24:49,380 --> 00:24:56,370
that github and you can even sign up for

00:24:52,890 --> 00:24:58,440
rakul services yeah so sole proprietor

00:24:56,370 --> 00:25:01,110
of backpackers you should check out my

00:24:58,440 --> 00:25:03,960
app and register and help us get the

00:25:01,110 --> 00:25:06,650
user count greater than 31 you can

00:25:03,960 --> 00:25:06,650
register only if you

00:25:19,389 --> 00:25:21,450

YouTube URL: https://www.youtube.com/watch?v=94ufKHERZ1k


