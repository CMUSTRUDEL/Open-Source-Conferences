Title: Garden City Ruby Conference - Keynote: Wrapping Your Head Around Git
Publication date: 2020-01-23
Playlist: Garden City Ruby 2015
Description: 
	By, Paolo Perrotta

A confession: I used Git for months without really understanding what was going on. I knew all the basic commands, but I still got stranded when something went wrong. Why did my rebase fail? How did I manage to mess up the remote? 

Then I found the key to Git: the unfamiliar .git directory. That was my lightbulb moment. Once I understood the underlying model, everything about Git clicked into place. Things that used to be baffling and complicated suddenly looked simple and elegant. 

Let me share this lightbulb with you. It will take you less than an hour to wrap your head around Git.

Help us caption & translate this video!

http://amara.org/v/GF2r/
Captions: 
	00:00:14,160 --> 00:00:22,450
aunt irunium everything including

00:00:18,900 --> 00:00:26,169
distribution you remove distribution you

00:00:22,450 --> 00:00:28,240
end up with a revision control now

00:00:26,169 --> 00:00:30,789
forget about your revisions forget about

00:00:28,240 --> 00:00:33,280
the idea of versioning itself okay

00:00:30,789 --> 00:00:36,040
forget about history pretend that every

00:00:33,280 --> 00:00:39,010
project has only one commit this makes

00:00:36,040 --> 00:00:41,140
things much easier once you remove that

00:00:39,010 --> 00:00:45,160
layer from the onion what you're left

00:00:41,140 --> 00:00:47,589
with is as get calls itself a stupid

00:00:45,160 --> 00:00:50,979
content tracker you give it files and

00:00:47,589 --> 00:00:54,790
directories it stores the files and

00:00:50,979 --> 00:00:57,280
directories away still too big to

00:00:54,790 --> 00:01:00,189
swallow forget about files and

00:00:57,280 --> 00:01:02,939
directories let's go right to the core

00:01:00,189 --> 00:01:07,799
of the onion what you are left with I

00:01:02,939 --> 00:01:11,590
would argue it is a persistent hashmap

00:01:07,799 --> 00:01:13,780
weird but allow me to show you how you

00:01:11,590 --> 00:01:17,560
give get a piece of content for example

00:01:13,780 --> 00:01:22,450
in this case destroying something and it

00:01:17,560 --> 00:01:25,120
gives you back a hash a 20 bytes hash

00:01:22,450 --> 00:01:27,250
okay and this functionality like so many

00:01:25,120 --> 00:01:28,930
functionalities in it it's a low-level

00:01:27,250 --> 00:01:30,790
functionality but you can actually

00:01:28,930 --> 00:01:33,490
access it from the command line there is

00:01:30,790 --> 00:01:35,800
actually a command which you can use if

00:01:33,490 --> 00:01:38,260
you do scripting for example that is

00:01:35,800 --> 00:01:42,610
called the get hash object let me use it

00:01:38,260 --> 00:01:46,240
actually I have a command line here yet

00:01:42,610 --> 00:01:54,900
hash object is this visible to everybody

00:01:46,240 --> 00:01:54,900
in the room now still small

00:01:54,950 --> 00:02:06,270
ok ok now everybody ok ok ok now it's

00:02:03,330 --> 00:02:08,460
expecting something on a file actually I

00:02:06,270 --> 00:02:12,090
don't have a file so i will say your eat

00:02:08,460 --> 00:02:15,590
from standard input instead and I i will

00:02:12,090 --> 00:02:20,190
type something into it with echo ok

00:02:15,590 --> 00:02:22,410
something literally something for people

00:02:20,190 --> 00:02:24,540
who don't use a unix-like stuff i miss

00:02:22,410 --> 00:02:27,780
asia is streaming this string into this

00:02:24,540 --> 00:02:32,850
command and what you are left with is

00:02:27,780 --> 00:02:34,950
this hash Geba which is the same that i

00:02:32,850 --> 00:02:36,870
wrote here because it's the same content

00:02:34,950 --> 00:02:39,990
same contents the same hash every time

00:02:36,870 --> 00:02:46,320
this is hugely important in it geetha

00:02:39,990 --> 00:02:51,150
uses these sh1 hashes everywhere all of

00:02:46,320 --> 00:02:54,930
your files get hashed like this so call

00:02:51,150 --> 00:02:57,300
it sha1 or shown for friends ok so some

00:02:54,930 --> 00:03:01,110
people were new to get say but of course

00:02:57,300 --> 00:03:03,750
there are not as many shown as there are

00:03:01,110 --> 00:03:05,700
possible files what if i have two files

00:03:03,750 --> 00:03:08,550
in my project that have the same shown

00:03:05,700 --> 00:03:11,970
that would be tragic and yes it would be

00:03:08,550 --> 00:03:14,760
tragic that would totally break it it's

00:03:11,970 --> 00:03:17,570
probably not going to happen let's do a

00:03:14,760 --> 00:03:20,459
quick calculation just because it's fun

00:03:17,570 --> 00:03:26,310
let's look for example that this guy he

00:03:20,459 --> 00:03:29,880
want the American the jackpot at the

00:03:26,310 --> 00:03:31,830
American lottery plenty of money your

00:03:29,880 --> 00:03:33,420
chances of winning the jackpot at the

00:03:31,830 --> 00:03:36,799
American lottery with the random

00:03:33,420 --> 00:03:40,019
combination of numbers are slim one in

00:03:36,799 --> 00:03:41,790
175 millions this number is hard to

00:03:40,019 --> 00:03:45,000
visualize let me visualize it for you

00:03:41,790 --> 00:03:47,580
let's say that I come up with 175

00:03:45,000 --> 00:03:49,610
million fortune cookies and I put a

00:03:47,580 --> 00:03:52,320
different number in each fortune cookie

00:03:49,610 --> 00:03:54,810
including of course the jackpot because

00:03:52,320 --> 00:03:57,090
it's all of them let's say that the

00:03:54,810 --> 00:04:00,299
fortune cookie is 5 centimeters long so

00:03:57,090 --> 00:04:02,580
you start here in this room and you

00:04:00,299 --> 00:04:04,230
track a line of fortune cookies towards

00:04:02,580 --> 00:04:08,310
Europe I think it's in depth direction

00:04:04,230 --> 00:04:11,069
ok you end up with a very long line

00:04:08,310 --> 00:04:13,500
believe it or not I google for it you

00:04:11,069 --> 00:04:17,370
end up very close to where I live okay

00:04:13,500 --> 00:04:20,280
you end up around Venice so now say that

00:04:17,370 --> 00:04:21,750
you walk the entire line okay it's a

00:04:20,280 --> 00:04:23,820
long walk so at some point you are

00:04:21,750 --> 00:04:25,770
probably going to get hungry so you

00:04:23,820 --> 00:04:27,600
decide to eat a fortune cookie you are

00:04:25,770 --> 00:04:32,520
only allowed to one fortune cookie in

00:04:27,600 --> 00:04:35,760
the entire trip you open it and hey you

00:04:32,520 --> 00:04:37,980
want the jackpot so these are your

00:04:35,760 --> 00:04:40,650
chances of winning the jackpot so you

00:04:37,980 --> 00:04:44,430
think I won't I will win again this is a

00:04:40,650 --> 00:04:46,710
gambler gambler mindset right I'm only

00:04:44,430 --> 00:04:50,130
Lucky Strike let me do it again so you

00:04:46,710 --> 00:04:51,990
come back all the way through with the

00:04:50,130 --> 00:04:54,360
brand new cookies and once again

00:04:51,990 --> 00:04:57,750
probably somewhere in Turkey you get

00:04:54,360 --> 00:05:02,100
hungry and you eat a cookie and you win

00:04:57,750 --> 00:05:04,139
again twice in oh so you're friends now

00:05:02,100 --> 00:05:07,530
are calling you a lucky bastard and

00:05:04,139 --> 00:05:10,070
asking you to pay for answer stuff okay

00:05:07,530 --> 00:05:12,600
the chances of two random schÃ¶nes

00:05:10,070 --> 00:05:15,750
colliding are not the chances of winning

00:05:12,600 --> 00:05:17,610
the jackpot once or twice in a row they

00:05:15,750 --> 00:05:20,520
are the same chances or winning the

00:05:17,610 --> 00:05:23,690
jackpot 10,000 billions of billions of

00:05:20,520 --> 00:05:26,390
billions of billion times in a row just

00:05:23,690 --> 00:05:29,850
saying it's probably not going to happen

00:05:26,390 --> 00:05:31,530
okay so this is important for what comes

00:05:29,850 --> 00:05:33,660
later showings are not unique in your

00:05:31,530 --> 00:05:35,970
project they are unique in the universe

00:05:33,660 --> 00:05:38,639
you can take every single software

00:05:35,970 --> 00:05:42,030
project owners put them all into the

00:05:38,639 --> 00:05:47,580
same get rebel you get a lot of

00:05:42,030 --> 00:05:50,100
performance issues still no clashes so

00:05:47,580 --> 00:05:53,160
that's the hash map part I said the

00:05:50,100 --> 00:05:55,590
persistent hashmap this one is not

00:05:53,160 --> 00:05:57,960
persistent yet to make it persistent you

00:05:55,590 --> 00:06:02,700
can actually do it with the minus W

00:05:57,960 --> 00:06:06,990
switch in in hash object and then let me

00:06:02,700 --> 00:06:08,910
do that minus W this gonna break its

00:06:06,990 --> 00:06:13,110
complaining that it doesn't have

00:06:08,910 --> 00:06:16,289
anywhere to put the object it lacks its

00:06:13,110 --> 00:06:19,890
own place which is the dot get director

00:06:16,289 --> 00:06:21,670
you know that one probably well any get

00:06:19,890 --> 00:06:23,890
project has a dot get die

00:06:21,670 --> 00:06:26,560
factory in the route that's where the

00:06:23,890 --> 00:06:29,860
good stuff goes configuration and the

00:06:26,560 --> 00:06:33,280
object database so let let me create the

00:06:29,860 --> 00:06:35,050
directory how do I do that yep getting

00:06:33,280 --> 00:06:38,110
it that's what getting it does it

00:06:35,050 --> 00:06:43,300
creates the git folder the dot git

00:06:38,110 --> 00:06:46,750
folder is here ok mmm let me do it in

00:06:43,300 --> 00:06:50,190
another folder sorry my project let me

00:06:46,750 --> 00:06:52,720
remove it from here just in case and

00:06:50,190 --> 00:06:54,370
they'll let me move to my project just

00:06:52,720 --> 00:06:57,930
to avoid the other files in the demo

00:06:54,370 --> 00:07:01,060
which would probably pollute the demo ok

00:06:57,930 --> 00:07:03,490
initialize fine now let me open it and

00:07:01,060 --> 00:07:06,370
if you look inside it you will see that

00:07:03,490 --> 00:07:08,650
amongst other things it has an object's

00:07:06,370 --> 00:07:10,330
directory and inside the objects

00:07:08,650 --> 00:07:13,690
directory there are a couple of folders

00:07:10,330 --> 00:07:16,810
info and pack ignore these ones for now

00:07:13,690 --> 00:07:20,950
ok there is no object now actually I can

00:07:16,810 --> 00:07:24,400
ask get how many object it has in its

00:07:20,950 --> 00:07:27,100
database I think it's this command yet 0

00:07:24,400 --> 00:07:29,470
objects you don't have to remember these

00:07:27,100 --> 00:07:31,090
comments of course the point is just

00:07:29,470 --> 00:07:33,880
understanding how it works not

00:07:31,090 --> 00:07:37,620
remembering every step of it so now I

00:07:33,880 --> 00:07:42,450
can once again generate the hash and

00:07:37,620 --> 00:07:47,010
save it there if you look again into the

00:07:42,450 --> 00:07:51,790
object director here you will see a

00:07:47,010 --> 00:07:53,650
directory called de which is not

00:07:51,790 --> 00:07:58,660
coincidentally the very beginning of

00:07:53,650 --> 00:08:01,240
this hash it follows up with be a and so

00:07:58,660 --> 00:08:05,800
on and so on and this is the name of the

00:08:01,240 --> 00:08:08,020
filing here it generated a file by

00:08:05,800 --> 00:08:11,040
splitting the name this is just a way

00:08:08,020 --> 00:08:14,020
not to put all files into one directory

00:08:11,040 --> 00:08:16,270
but essentially the file you can say

00:08:14,020 --> 00:08:20,280
approximately that the file is named

00:08:16,270 --> 00:08:23,440
like the hash and what's in that file

00:08:20,280 --> 00:08:25,750
the content the storing something it's

00:08:23,440 --> 00:08:27,970
been zipped it's in its being wrapped

00:08:25,750 --> 00:08:31,420
into a small header but that's what it

00:08:27,970 --> 00:08:34,900
is there is another command that I will

00:08:31,420 --> 00:08:39,400
use that is called the get cat file

00:08:34,900 --> 00:08:46,150
and I can pass it this hash or just the

00:08:39,400 --> 00:08:48,840
first few digits in hash and if I run it

00:08:46,150 --> 00:08:52,630
with minus T it will tell me the type of

00:08:48,840 --> 00:08:55,000
this thing it calls it a blob content

00:08:52,630 --> 00:08:58,830
your files are called the blob Blops

00:08:55,000 --> 00:09:01,720
inside get and if I run it with minus P

00:08:58,830 --> 00:09:09,820
its glare showed the content something

00:09:01,720 --> 00:09:14,260
okay so so far so good so it's a

00:09:09,820 --> 00:09:18,100
persistent hashmap this is the core now

00:09:14,260 --> 00:09:21,670
let's work towards the next layer this

00:09:18,100 --> 00:09:24,940
one is going to require a lot of goofing

00:09:21,670 --> 00:09:27,520
around with the command line and a lot

00:09:24,940 --> 00:09:29,950
of looking at hashes so please don't

00:09:27,520 --> 00:09:32,110
even try to follow away every single

00:09:29,950 --> 00:09:35,500
step that's not the point the point is

00:09:32,110 --> 00:09:39,610
the structure okay let's say that I

00:09:35,500 --> 00:09:44,440
start adding files to my project I have

00:09:39,610 --> 00:09:46,480
a shell script here that I prepare to to

00:09:44,440 --> 00:09:50,560
add a few files so that I don't have to

00:09:46,480 --> 00:09:52,600
do it by hand and if I look at the

00:09:50,560 --> 00:09:55,390
project now there is a readme file i

00:09:52,600 --> 00:09:58,240
will zoom in a bit for people who are

00:09:55,390 --> 00:10:00,100
far away ok and the readme as contains

00:09:58,240 --> 00:10:03,160
the stirring something and then there is

00:10:00,100 --> 00:10:06,010
a an SRC directory which contains two

00:10:03,160 --> 00:10:08,350
files do the first one contains the

00:10:06,010 --> 00:10:11,440
stirring something else second one is

00:10:08,350 --> 00:10:16,600
once again something okay and now i will

00:10:11,440 --> 00:10:19,240
quickly add these files to the i will

00:10:16,600 --> 00:10:21,100
stage this file sync it speak i will add

00:10:19,240 --> 00:10:24,880
them to the index i will prepare them

00:10:21,100 --> 00:10:27,100
for commit if i say git status now you

00:10:24,880 --> 00:10:31,600
see that these files are ready to go up

00:10:27,100 --> 00:10:34,240
and now i can commit and i will give

00:10:31,600 --> 00:10:38,340
this commit a message with the mine Sam

00:10:34,240 --> 00:10:44,100
switch it's going to be called first

00:10:38,340 --> 00:10:47,440
there it goes and if you ask once again

00:10:44,100 --> 00:10:48,490
how many objects are in the database

00:10:47,440 --> 00:10:50,020
this time

00:10:48,490 --> 00:10:56,399
and it's going to come up with five

00:10:50,020 --> 00:10:56,399
objects and now the problem is why five

00:10:56,820 --> 00:11:05,020
let's see i will be using it cut file

00:11:02,050 --> 00:11:10,779
again okay if i say git log it shows me

00:11:05,020 --> 00:11:14,560
the comment and the comet has a hash now

00:11:10,779 --> 00:11:17,110
what happens if i say get cut file minus

00:11:14,560 --> 00:11:20,940
t it's going to say it's a comet sure

00:11:17,110 --> 00:11:23,890
what happens if i say get cut file- p

00:11:20,940 --> 00:11:25,839
what's in a comet what I'm talking about

00:11:23,890 --> 00:11:34,380
the implementation of a commenting it

00:11:25,839 --> 00:11:38,290
what do you expect to find in there ok

00:11:34,380 --> 00:11:44,649
metadata the commit message the author

00:11:38,290 --> 00:11:49,390
the date of the commit there they must

00:11:44,649 --> 00:11:52,180
be in there ok and if I ask for it I saw

00:11:49,390 --> 00:11:55,540
that it's on multiple lines a bit hard

00:11:52,180 --> 00:11:58,149
to read but this makes it bigger you

00:11:55,540 --> 00:12:00,940
will see that exactly this text is the

00:11:58,149 --> 00:12:03,970
comet I mean literally it takes this

00:12:00,940 --> 00:12:06,100
text hashes it zips it wraps it in a

00:12:03,970 --> 00:12:07,750
bloody in a header blah blah and it

00:12:06,100 --> 00:12:10,870
becomes an object in the database and

00:12:07,750 --> 00:12:15,040
most of these is obvious ok this is me

00:12:10,870 --> 00:12:18,160
that the date this is the the commit

00:12:15,040 --> 00:12:23,980
message the first line is not as obvious

00:12:18,160 --> 00:12:27,730
what's a tourney a tree quickly is the

00:12:23,980 --> 00:12:30,970
equivalent in get of a directory a blob

00:12:27,730 --> 00:12:33,160
you can see it as a file a tree is like

00:12:30,970 --> 00:12:37,089
a director in this case it's the root of

00:12:33,160 --> 00:12:43,050
your project ok so now let's let me do

00:12:37,089 --> 00:12:48,870
this again with the tree so get cat

00:12:43,050 --> 00:12:50,980
file- p hash of the tree this is a tree

00:12:48,870 --> 00:12:52,899
remember this is the root of your

00:12:50,980 --> 00:12:56,829
project ok what's in the root of your

00:12:52,899 --> 00:13:01,379
project another three the SRC directory

00:12:56,829 --> 00:13:05,579
and the blob read me ok let me do this

00:13:01,379 --> 00:13:16,889
less time with read me do you happen to

00:13:05,579 --> 00:13:19,199
remember this hash something so let's

00:13:16,889 --> 00:13:23,939
look at this graphically to make it easy

00:13:19,199 --> 00:13:26,339
to follow hopefully you have a comment

00:13:23,939 --> 00:13:29,789
it's called first it references the tree

00:13:26,339 --> 00:13:32,759
it's called e7 blah blah and it's

00:13:29,789 --> 00:13:36,269
actually the root of your project these

00:13:32,759 --> 00:13:40,470
three is referencing two things another

00:13:36,269 --> 00:13:45,979
three source and the file read me which

00:13:40,470 --> 00:13:48,329
contains the string something source is

00:13:45,979 --> 00:13:51,720
referencing to files you remember there

00:13:48,329 --> 00:13:54,629
were two files inside source right one

00:13:51,720 --> 00:13:56,129
of these is file one which contains the

00:13:54,629 --> 00:14:04,319
string something else that's another

00:13:56,129 --> 00:14:07,350
object where does the last arrow go the

00:14:04,319 --> 00:14:10,829
last file contain the string something

00:14:07,350 --> 00:14:14,459
again so the last hour can go straight

00:14:10,829 --> 00:14:17,159
there look at what is happening it is

00:14:14,459 --> 00:14:20,009
very using the objects the name of the

00:14:17,159 --> 00:14:21,899
file is not in the blob the name of the

00:14:20,009 --> 00:14:24,809
file is in the tree that contains the

00:14:21,899 --> 00:14:27,089
blob so if you have two files that are

00:14:24,809 --> 00:14:30,089
identical they will only be one

00:14:27,089 --> 00:14:33,479
objecting it these helps make it

00:14:30,089 --> 00:14:36,809
efficient we'll see how well a couple of

00:14:33,479 --> 00:14:39,659
observations first there is more than

00:14:36,809 --> 00:14:41,850
this going on under the hood I'm saying

00:14:39,659 --> 00:14:43,470
that it is creating one object for every

00:14:41,850 --> 00:14:45,720
file actually every now and then get

00:14:43,470 --> 00:14:48,419
will look into the files and say hey

00:14:45,720 --> 00:14:50,609
this files are almost identical let's

00:14:48,419 --> 00:14:55,709
put everything that is common in to

00:14:50,609 --> 00:14:58,379
another section of memory of a file it

00:14:55,709 --> 00:15:02,729
will as they say pack your objects

00:14:58,379 --> 00:15:05,159
that's what the pack directory of the

00:15:02,729 --> 00:15:06,929
objects is for but this is not useful

00:15:05,159 --> 00:15:08,789
this is a really an implementation

00:15:06,929 --> 00:15:11,459
detail you're probably never gonna see

00:15:08,789 --> 00:15:15,769
that this is more important because it

00:15:11,459 --> 00:15:15,769
gives you a hint at how to get things

00:15:16,280 --> 00:15:21,990
another thing that is interesting is

00:15:18,840 --> 00:15:25,040
that look at this thing you have blobs

00:15:21,990 --> 00:15:29,370
that have content you have trees that

00:15:25,040 --> 00:15:31,880
contain more Therese and content and the

00:15:29,370 --> 00:15:39,780
names of the things are in the trees

00:15:31,880 --> 00:15:44,040
what do you call a thing like that a 5

00:15:39,780 --> 00:15:45,930
system this is a damn file system which

00:15:44,040 --> 00:15:48,120
is totally unsurprising because the

00:15:45,930 --> 00:15:52,020
other of this thing is a specialist in

00:15:48,120 --> 00:15:54,990
file systems he is a kernel guy right so

00:15:52,020 --> 00:15:59,130
this is a good way to look at get it's

00:15:54,990 --> 00:16:00,870
not a versioning system yet it's a file

00:15:59,130 --> 00:16:01,980
system okay it's not what you think

00:16:00,870 --> 00:16:04,170
about when you think of file systems

00:16:01,980 --> 00:16:07,950
you're thinking about something that is

00:16:04,170 --> 00:16:12,300
more low-level colonel related kernel

00:16:07,950 --> 00:16:15,510
level it's talking directly to mass

00:16:12,300 --> 00:16:18,090
storage almost directly but if you

00:16:15,510 --> 00:16:20,190
abstract it a bit remember abstraction

00:16:18,090 --> 00:16:24,480
is your friend this is kind of like a

00:16:20,190 --> 00:16:27,240
file system okay so it's not just the

00:16:24,480 --> 00:16:34,620
persistent hashmap it's a stupid content

00:16:27,240 --> 00:16:39,000
tracker file system for friends now one

00:16:34,620 --> 00:16:41,790
more layer in the onion version this is

00:16:39,000 --> 00:16:45,690
going to be brutal but it starts simple

00:16:41,790 --> 00:16:52,340
enough let's say that I edit the read me

00:16:45,690 --> 00:16:58,140
file and I right in here my gate project

00:16:52,340 --> 00:17:02,070
there so now we have a new file to add

00:16:58,140 --> 00:17:07,020
and we can commit and we commit with the

00:17:02,070 --> 00:17:10,260
message second and if we say git log we

00:17:07,020 --> 00:17:17,820
get a hash for this comment and if we

00:17:10,260 --> 00:17:19,920
say get cut file minus P and hash what's

00:17:17,820 --> 00:17:21,540
going to be different in this comet

00:17:19,920 --> 00:17:24,380
compared to the previous comment

00:17:21,540 --> 00:17:24,380
conceptually different

00:17:25,290 --> 00:17:30,750
in this case the comet is not the first

00:17:28,710 --> 00:17:34,290
comet anymore it's not a route commit

00:17:30,750 --> 00:17:40,110
let's say so you have something more you

00:17:34,290 --> 00:17:44,940
have a parent which is the first comet

00:17:40,110 --> 00:17:47,700
of course now I could go on a use cut

00:17:44,940 --> 00:17:50,190
file to painstakingly look at each

00:17:47,700 --> 00:17:52,260
single object in the database but I will

00:17:50,190 --> 00:17:58,530
spare you the pain I will just show you

00:17:52,260 --> 00:18:01,680
the result here so second commit it has

00:17:58,530 --> 00:18:03,990
a parent and it's pointed to a Tory is

00:18:01,680 --> 00:18:09,030
this going to be the same tree that we

00:18:03,990 --> 00:18:11,130
have here know if you if you are

00:18:09,030 --> 00:18:15,210
questioning why you will see in a second

00:18:11,130 --> 00:18:18,000
it's another tree this tree is pointing

00:18:15,210 --> 00:18:20,940
to a tree and the blob the blob is

00:18:18,000 --> 00:18:26,580
clearly different okay because it's new

00:18:20,940 --> 00:18:29,120
content my gate project that's why this

00:18:26,580 --> 00:18:31,350
story has to be different because it is

00:18:29,120 --> 00:18:32,970
calculating the shown of the tree and

00:18:31,350 --> 00:18:37,160
the content of the tree is different

00:18:32,970 --> 00:18:41,150
because the blob is different what about

00:18:37,160 --> 00:18:45,570
SRC is this the same slc or another one

00:18:41,150 --> 00:18:49,110
this one is the same one okay so look at

00:18:45,570 --> 00:18:52,710
the way that it builds history into the

00:18:49,110 --> 00:18:55,050
mix if you look at this entire thing let

00:18:52,710 --> 00:19:00,330
me move back and forth because I sorry

00:18:55,050 --> 00:19:02,760
guys I love you to forget about that

00:19:00,330 --> 00:19:06,390
stuff forget about that stuff because it

00:19:02,760 --> 00:19:08,760
if you look at the this entire thing

00:19:06,390 --> 00:19:12,770
from here from the point of view of the

00:19:08,760 --> 00:19:16,410
second comet you can't reach this thing

00:19:12,770 --> 00:19:18,960
unless you go to the parent and then go

00:19:16,410 --> 00:19:20,700
over you don't see this stuff what you

00:19:18,960 --> 00:19:23,760
see is the stuff that you can reach from

00:19:20,700 --> 00:19:27,090
here which means this and if you look at

00:19:23,760 --> 00:19:31,380
this this is a snapshot of your file

00:19:27,090 --> 00:19:33,360
system in time so get is are using

00:19:31,380 --> 00:19:36,420
whatever it can reuse but what you end

00:19:33,360 --> 00:19:39,610
up with is each comet is the whole

00:19:36,420 --> 00:19:46,970
snapshot of the whole project

00:19:39,610 --> 00:19:49,789
okay forget about trees and forget about

00:19:46,970 --> 00:19:51,919
blobs mainly because you know it all now

00:19:49,789 --> 00:19:56,360
you're experts when it comes to the get

00:19:51,919 --> 00:19:58,340
object model Therese blops commits and

00:19:56,360 --> 00:20:00,710
then there is another kind of object

00:19:58,340 --> 00:20:02,330
that is called the annotated tag which

00:20:00,710 --> 00:20:06,409
is very easy by the way you can look it

00:20:02,330 --> 00:20:08,750
up yourself this is all there is to know

00:20:06,409 --> 00:20:12,590
about the gate object model there is

00:20:08,750 --> 00:20:16,370
quite simply nothing else in there you

00:20:12,590 --> 00:20:18,769
know it all now let's move up a level

00:20:16,370 --> 00:20:21,320
and look at the comments instead focus

00:20:18,769 --> 00:20:23,899
on the comments one thing that we don't

00:20:21,320 --> 00:20:26,960
know yet you know that get is famous for

00:20:23,899 --> 00:20:31,639
branching we don't know what the branch

00:20:26,960 --> 00:20:36,500
is what's a branch I mean let me go back

00:20:31,639 --> 00:20:38,419
to the command line let me see what we

00:20:36,500 --> 00:20:40,070
have here if I say git branch it will

00:20:38,419 --> 00:20:42,019
list all the branches and we only have

00:20:40,070 --> 00:20:44,450
one branch because we are at the very

00:20:42,019 --> 00:20:51,590
beginning it's called master okay and if

00:20:44,450 --> 00:20:53,450
I create another branch fix me there now

00:20:51,590 --> 00:20:56,360
we have two branches but without these

00:20:53,450 --> 00:21:00,740
concretely let's look inside the dot git

00:20:56,360 --> 00:21:04,549
folder this is instructive so I think I

00:21:00,740 --> 00:21:07,610
have something here there let's forget

00:21:04,549 --> 00:21:11,539
about the object database there is a

00:21:07,610 --> 00:21:15,500
folder here that's called wraps for

00:21:11,539 --> 00:21:17,409
references and if you look inside it you

00:21:15,500 --> 00:21:21,559
will see that it has a couple of

00:21:17,409 --> 00:21:23,809
subfolders forget about tags there is

00:21:21,559 --> 00:21:26,360
one that is called heads and if you look

00:21:23,809 --> 00:21:30,559
inside that one you will see too fast

00:21:26,360 --> 00:21:32,870
there are fixed me a master what do you

00:21:30,559 --> 00:21:38,220
expect to find inside those two files if

00:21:32,870 --> 00:21:41,159
I bring them on the screen ashes ashes

00:21:38,220 --> 00:21:50,210
so let me double check for the

00:21:41,159 --> 00:21:57,919
non-believers cat dot get refs heads

00:21:50,210 --> 00:22:01,909
master hash and by the way the hash of

00:21:57,919 --> 00:22:10,679
the latest commit what if I asked for

00:22:01,909 --> 00:22:13,559
fixed means that same hash so branches

00:22:10,679 --> 00:22:20,220
are just the references in general

00:22:13,559 --> 00:22:24,620
references to a hash now we are still

00:22:20,220 --> 00:22:24,620
missing something when I say git branch

00:22:26,390 --> 00:22:31,110
these two branches are not the same one

00:22:29,190 --> 00:22:34,590
is all happy and green and the other one

00:22:31,110 --> 00:22:38,250
is all white and sad because one is the

00:22:34,590 --> 00:22:41,299
current branch right how does get no or

00:22:38,250 --> 00:22:41,299
the current branches

00:22:45,400 --> 00:22:53,370
yeah I wanted to get there in two

00:22:49,690 --> 00:22:55,960
questions but you guys short-circuit me

00:22:53,370 --> 00:22:59,110
there is there must be another reference

00:22:55,960 --> 00:23:01,390
right there must be a reference to a

00:22:59,110 --> 00:23:04,150
branch which is a reference to a comet

00:23:01,390 --> 00:23:07,330
and these reference is saying disease

00:23:04,150 --> 00:23:12,760
the current branch what's the name of

00:23:07,330 --> 00:23:15,940
these reference a file named head just

00:23:12,760 --> 00:23:19,480
by coincidence is here right in the root

00:23:15,940 --> 00:23:22,900
of the git folder here you won't

00:23:19,480 --> 00:23:25,660
generally find a show because it's

00:23:22,900 --> 00:23:28,930
references as referencing a branch which

00:23:25,660 --> 00:23:32,140
is not an object in its database it's a

00:23:28,930 --> 00:23:34,630
file in the refs folder so it is using

00:23:32,140 --> 00:23:39,640
these other syntax here to say this is

00:23:34,630 --> 00:23:42,250
the reference but this is it okay from

00:23:39,640 --> 00:23:45,370
an implementation point of view you just

00:23:42,250 --> 00:23:49,870
became the experts this is all there is

00:23:45,370 --> 00:23:55,690
to know about branches the consequence

00:23:49,870 --> 00:24:00,700
is however can be can take some time to

00:23:55,690 --> 00:24:02,920
be understood let's see I gonna change

00:24:00,700 --> 00:24:06,700
my style and not use the command line

00:24:02,920 --> 00:24:08,530
anymore because this would force me to

00:24:06,700 --> 00:24:10,570
switch back and forth a lot and it would

00:24:08,530 --> 00:24:12,480
get annoying for you I would instead

00:24:10,570 --> 00:24:15,850
show you the comments on the screen and

00:24:12,480 --> 00:24:18,910
I will show you what happens inside get

00:24:15,850 --> 00:24:21,610
there we said that we have a branch

00:24:18,910 --> 00:24:23,200
named master which is a reference and we

00:24:21,610 --> 00:24:24,910
have a reference to the reference which

00:24:23,200 --> 00:24:28,570
is head and then we have another

00:24:24,910 --> 00:24:33,280
reference once once we say git branch

00:24:28,570 --> 00:24:35,830
fixes that is called fixes okay so what

00:24:33,280 --> 00:24:37,780
happens now if I change some stuff in

00:24:35,830 --> 00:24:40,480
the command line for example I edit a

00:24:37,780 --> 00:24:43,690
file and then I say git commit minus a

00:24:40,480 --> 00:24:47,320
which stands for add everything new so I

00:24:43,690 --> 00:24:50,320
can skip the git add part- I'm third

00:24:47,320 --> 00:24:53,050
what is happening here well I'm creating

00:24:50,320 --> 00:24:57,760
a new comet so the new comet will be

00:24:53,050 --> 00:24:58,930
lets say here I'm bending it sideways

00:24:57,760 --> 00:25:03,340
because

00:24:58,930 --> 00:25:07,060
of what comes later this brand new and

00:25:03,340 --> 00:25:10,840
it's a comet that has as a parent the

00:25:07,060 --> 00:25:13,210
previous current comet the one pointed

00:25:10,840 --> 00:25:19,770
at by head which is pointing at master

00:25:13,210 --> 00:25:19,770
which point in it what happens to head

00:25:20,820 --> 00:25:27,760
actually not nothing happens to head why

00:25:25,870 --> 00:25:29,500
should it change it was pointing at

00:25:27,760 --> 00:25:31,240
master it's the current branch it's

00:25:29,500 --> 00:25:34,360
still the current branch what is

00:25:31,240 --> 00:25:37,780
changing is master which is now pointing

00:25:34,360 --> 00:25:43,360
here head is just following along for

00:25:37,780 --> 00:25:46,420
the ride so now what happens if I say

00:25:43,360 --> 00:25:52,810
git checkout fixes what does get check

00:25:46,420 --> 00:25:56,940
out do concretely that's all it does it

00:25:52,810 --> 00:26:03,250
moves head to the fixes branch like this

00:25:56,940 --> 00:26:06,400
and yes thank you smartass almost a

00:26:03,250 --> 00:26:08,340
society fact when you change head and

00:26:06,400 --> 00:26:11,440
you're pointing at the different thing

00:26:08,340 --> 00:26:13,960
get says hey the contents of these

00:26:11,440 --> 00:26:16,180
working directory don't match what I see

00:26:13,960 --> 00:26:17,800
here in the object database you know

00:26:16,180 --> 00:26:20,740
what the object database is worth

00:26:17,800 --> 00:26:23,290
everything you know what your pana files

00:26:20,740 --> 00:26:25,150
are worth nothing let me delete

00:26:23,290 --> 00:26:28,630
everything that is in here and replace

00:26:25,150 --> 00:26:30,970
it well maybe if I see stuff that hasn't

00:26:28,630 --> 00:26:32,650
been committed will warn you but

00:26:30,970 --> 00:26:35,080
otherwise I don't care about your

00:26:32,650 --> 00:26:39,790
working directory get a really

00:26:35,080 --> 00:26:42,820
considered that very transient so it

00:26:39,790 --> 00:26:45,820
will just say let me walk this comet

00:26:42,820 --> 00:26:47,560
just like we did earlier on and check

00:26:45,820 --> 00:26:49,690
all the trees and all the blobs and turn

00:26:47,560 --> 00:26:52,590
them into folders and files and dump

00:26:49,690 --> 00:26:57,490
everything into the working directory

00:26:52,590 --> 00:27:02,950
actually good you have a career in front

00:26:57,490 --> 00:27:08,410
of you song okay now what happens if I

00:27:02,950 --> 00:27:10,840
change stuff now and I I create another

00:27:08,410 --> 00:27:12,350
commit now you know what happens first

00:27:10,840 --> 00:27:14,660
the new commit

00:27:12,350 --> 00:27:16,370
put it here because the parent of the

00:27:14,660 --> 00:27:19,940
new committee is always the current

00:27:16,370 --> 00:27:22,340
committee and of course master is going

00:27:19,940 --> 00:27:28,400
to stay there head is going to step

00:27:22,340 --> 00:27:34,669
there but fix this is gone move what

00:27:28,400 --> 00:27:38,360
happens now if I say git merge think

00:27:34,669 --> 00:27:40,100
about what get is trying to achieve what

00:27:38,360 --> 00:27:43,340
we are trying to achieve is I want to

00:27:40,100 --> 00:27:46,669
have a point in time I commit where

00:27:43,340 --> 00:27:49,669
everything that is available in master

00:27:46,669 --> 00:27:51,710
is also available there and everything

00:27:49,669 --> 00:27:54,919
that is available in fix me is also

00:27:51,710 --> 00:27:57,710
available there so if there are no

00:27:54,919 --> 00:27:59,480
conflicts the easiest way to get to that

00:27:57,710 --> 00:28:03,679
point is to just create another

00:27:59,480 --> 00:28:07,250
committee which has two parents like

00:28:03,679 --> 00:28:09,169
this I want to bore you with the details

00:28:07,250 --> 00:28:11,570
but you can probably draw a pretty

00:28:09,169 --> 00:28:14,120
picture yourself of how this committee

00:28:11,570 --> 00:28:16,610
is pointing to a brand new tree the root

00:28:14,120 --> 00:28:18,620
which is new but these are root is

00:28:16,610 --> 00:28:22,370
pointing to stuff that was already there

00:28:18,620 --> 00:28:24,380
and if there are conflicts it's pointing

00:28:22,370 --> 00:28:31,130
to stuff that is new because it solves

00:28:24,380 --> 00:28:33,950
the conflicts is this a clear probably

00:28:31,130 --> 00:28:36,950
no need for more details what is

00:28:33,950 --> 00:28:38,630
important here is that fixes the current

00:28:36,950 --> 00:28:43,630
branch is going to move to the merge

00:28:38,630 --> 00:28:47,120
okay now let's check out master again

00:28:43,630 --> 00:28:49,659
what happens now if I say git merge

00:28:47,120 --> 00:28:49,659
fixes

00:28:54,170 --> 00:28:59,340
okay again what are we trying to achieve

00:28:57,600 --> 00:29:02,760
we are trying to get a point in time

00:28:59,340 --> 00:29:06,240
where everything is available that is

00:29:02,760 --> 00:29:08,790
also available in both master and fixes

00:29:06,240 --> 00:29:11,790
but we already have this point in time

00:29:08,790 --> 00:29:14,100
right it's there it's the top must

00:29:11,790 --> 00:29:15,980
commit so we don't need to create new

00:29:14,100 --> 00:29:18,750
commits with parents or stuff like that

00:29:15,980 --> 00:29:21,450
get is smart enough to say hey I'm going

00:29:18,750 --> 00:29:24,330
to use what I have so what it does is

00:29:21,450 --> 00:29:26,970
that it just takes master and it moves

00:29:24,330 --> 00:29:30,840
it to the top of the chain this is

00:29:26,970 --> 00:29:32,910
called by the way a fast forward if you

00:29:30,840 --> 00:29:34,170
are just learning it and banging your

00:29:32,910 --> 00:29:35,910
head against the wall trying to

00:29:34,170 --> 00:29:43,620
understand what the fast forward is

00:29:35,910 --> 00:29:45,480
nothing match this is it pretty now

00:29:43,620 --> 00:29:47,400
let's look at another situation quickly

00:29:45,480 --> 00:29:49,800
and then we are done with this version

00:29:47,400 --> 00:29:52,320
in silliness okay this is the other

00:29:49,800 --> 00:29:56,070
situation imagine we have this situation

00:29:52,320 --> 00:29:59,790
in our in our project we have a first

00:29:56,070 --> 00:30:03,000
commit and then we branched somebody

00:29:59,790 --> 00:30:05,730
branch the fixes probably and this

00:30:03,000 --> 00:30:08,610
person committed fixed and more fixed

00:30:05,730 --> 00:30:11,070
while another person committed second

00:30:08,610 --> 00:30:13,230
and third or maybe the same person while

00:30:11,070 --> 00:30:15,720
switching ratchets okay and we are left

00:30:13,230 --> 00:30:18,690
like this and right now we're on fixes

00:30:15,720 --> 00:30:23,880
what happens if I say guitar bass master

00:30:18,690 --> 00:30:28,640
what sorry base this is what you want to

00:30:23,880 --> 00:30:31,670
do what you would like to do is to take

00:30:28,640 --> 00:30:39,080
this connection the connection between

00:30:31,670 --> 00:30:45,450
fix and first cut it off break it and

00:30:39,080 --> 00:30:50,190
move it to third rebasing right I want

00:30:45,450 --> 00:30:54,270
to change the base of this chain okay so

00:30:50,190 --> 00:30:58,010
you want to do this that's what you want

00:30:54,270 --> 00:30:58,010
to do but you can't

00:30:59,020 --> 00:31:06,070
I mean you can't go in into the comet

00:31:02,230 --> 00:31:12,750
fix change the comet and be done with it

00:31:06,070 --> 00:31:15,670
like you you get a different shown as

00:31:12,750 --> 00:31:18,760
soon as you change one single bite you

00:31:15,670 --> 00:31:20,620
get a completely different shown that's

00:31:18,760 --> 00:31:22,600
why everything in get is immutable

00:31:20,620 --> 00:31:31,480
everything in the object database is

00:31:22,600 --> 00:31:33,280
immutable so what can you do instead if

00:31:31,480 --> 00:31:35,140
you can do this and you want to get

00:31:33,280 --> 00:31:38,560
something like this what you can do

00:31:35,140 --> 00:31:42,400
instead is to copy over stuff to new

00:31:38,560 --> 00:31:46,210
commits which pretend that they are the

00:31:42,400 --> 00:31:48,910
old commits so what you do is to take

00:31:46,210 --> 00:31:52,450
fix and create a new committee which is

00:31:48,910 --> 00:31:55,990
exactly like fix it's pointing to the

00:31:52,450 --> 00:31:59,050
same tree it has the same author and

00:31:55,990 --> 00:32:01,300
blah blah blah but it has a different

00:31:59,050 --> 00:32:03,690
parent but it needs to be a different

00:32:01,300 --> 00:32:09,160
object because it has different showed

00:32:03,690 --> 00:32:11,290
is this point clear because this point

00:32:09,160 --> 00:32:13,450
is the point that might drive you crazy

00:32:11,290 --> 00:32:17,260
the moment that you mix the rebasing

00:32:13,450 --> 00:32:20,230
with distribution that's when pain

00:32:17,260 --> 00:32:22,450
happens if you don't understand this

00:32:20,230 --> 00:32:25,870
thing that this is not the same

00:32:22,450 --> 00:32:28,840
committee it's a copy you ever find

00:32:25,870 --> 00:32:33,610
yourself with multiple commits with the

00:32:28,840 --> 00:32:35,560
same messages your git tree and you were

00:32:33,610 --> 00:32:38,160
wondering where these where do these

00:32:35,560 --> 00:32:40,960
come from that's where they come from

00:32:38,160 --> 00:32:43,030
I'm not going into the mechanics by

00:32:40,960 --> 00:32:46,960
which this can happen but unfortunately

00:32:43,030 --> 00:32:49,930
it does happen i'll also you need to

00:32:46,960 --> 00:32:52,720
copy morphix and you need to move fix

00:32:49,930 --> 00:32:54,070
this to the top one last question about

00:32:52,720 --> 00:32:59,020
virtually and then we're done with

00:32:54,070 --> 00:33:01,830
version what happens to those commits to

00:32:59,020 --> 00:33:01,830
the original ones

00:33:03,040 --> 00:33:08,440
like in object-oriented programming

00:33:05,530 --> 00:33:10,600
languages if something is there but are

00:33:08,440 --> 00:33:14,560
reachable there is no way to get there

00:33:10,600 --> 00:33:17,110
by a branch or a tag eventually it will

00:33:14,560 --> 00:33:20,890
say this stuff is old and it will gather

00:33:17,110 --> 00:33:24,970
collected so they're going to die sooner

00:33:20,890 --> 00:33:28,710
or later maybe they will take a long

00:33:24,970 --> 00:33:34,120
time but what if you want to save them

00:33:28,710 --> 00:33:35,440
for whatever reason I don't have a slide

00:33:34,120 --> 00:33:36,850
for that but if you want to make

00:33:35,440 --> 00:33:39,670
something or reachable so that it's

00:33:36,850 --> 00:33:43,270
never get which collected just stick a

00:33:39,670 --> 00:33:47,460
branch on it it will be there forever

00:33:43,270 --> 00:33:52,120
because now it's always searchable okay

00:33:47,460 --> 00:33:53,950
and that and a lot of special cases is

00:33:52,120 --> 00:33:56,230
all there is to know about version

00:33:53,950 --> 00:34:00,730
eating it and we're done with the next

00:33:56,230 --> 00:34:10,230
layer of the onion all we're left with

00:34:00,730 --> 00:34:12,910
now distribution if we had more time I

00:34:10,230 --> 00:34:15,610
would go into the details of how

00:34:12,910 --> 00:34:18,850
distribution is implemented but we don't

00:34:15,610 --> 00:34:21,160
have much time so forgive me I will skip

00:34:18,850 --> 00:34:23,760
the internals I will just show you the

00:34:21,160 --> 00:34:28,060
basic idea because now the basic idea

00:34:23,760 --> 00:34:31,540
comes on very smoothly imagine that you

00:34:28,060 --> 00:34:33,460
have a local rifle and the remote rifle

00:34:31,540 --> 00:34:35,620
I know that computers don't look like

00:34:33,460 --> 00:34:39,760
these anymore but I'm an old man okay

00:34:35,620 --> 00:34:44,590
and imagine that you won't clone the

00:34:39,760 --> 00:34:48,370
remote on the local those pretty

00:34:44,590 --> 00:34:50,230
colorful things are objects I just

00:34:48,370 --> 00:34:52,750
called them differently instead of

00:34:50,230 --> 00:34:55,540
putting different schÃ¶nes on them it's

00:34:52,750 --> 00:34:57,670
more readable for humans you will notice

00:34:55,540 --> 00:35:02,710
that there is no magenta Bowl because

00:34:57,670 --> 00:35:07,200
magenta is not a damn color what happens

00:35:02,710 --> 00:35:07,200
physically when you get clone

00:35:09,750 --> 00:35:14,980
yeah if you want to approximate just a

00:35:12,310 --> 00:35:18,580
tiny little bit you just copy / dot get

00:35:14,980 --> 00:35:22,900
folder it's not quite that simple but

00:35:18,580 --> 00:35:25,300
almost for sure you copy over all the

00:35:22,900 --> 00:35:27,640
objects and bang you have your own

00:35:25,300 --> 00:35:29,530
arrival with all the history I didn't

00:35:27,640 --> 00:35:32,770
draw the graph but of course these

00:35:29,530 --> 00:35:36,070
objects are all connected okay then some

00:35:32,770 --> 00:35:39,550
time passes some time passes and the two

00:35:36,070 --> 00:35:44,440
databases evolved people are working on

00:35:39,550 --> 00:35:48,100
the two on the two rifles so now in the

00:35:44,440 --> 00:35:51,430
local we have this pink ball and this is

00:35:48,100 --> 00:35:53,800
this last line okay that the remote

00:35:51,430 --> 00:35:57,430
doesn't have and the remote has thinks

00:35:53,800 --> 00:35:59,890
that we don't have but remember what we

00:35:57,430 --> 00:36:04,320
said in the beginning these things are

00:35:59,890 --> 00:36:09,070
unique in the universe they have a show

00:36:04,320 --> 00:36:10,990
so how do I a line with the remote how

00:36:09,070 --> 00:36:13,300
do I get the stuff in the remote what

00:36:10,990 --> 00:36:18,780
happens when I do a git fetch in other

00:36:13,300 --> 00:36:21,400
words it's actually you ask the remote

00:36:18,780 --> 00:36:24,040
may you please send me all the stuff

00:36:21,400 --> 00:36:27,280
that you have and I don't all those

00:36:24,040 --> 00:36:30,220
objects and bang perfect you usually

00:36:27,280 --> 00:36:32,710
don't do a git fetch you do a git pull

00:36:30,220 --> 00:36:35,050
which means git fetch and then merge

00:36:32,710 --> 00:36:37,780
because things are just a little bit

00:36:35,050 --> 00:36:40,300
more complicated in that there are local

00:36:37,780 --> 00:36:42,490
branches and remote branches so after

00:36:40,300 --> 00:36:45,070
fetching the new stuff you want to get

00:36:42,490 --> 00:36:48,340
them in your history and that you do by

00:36:45,070 --> 00:36:49,810
merging essentially local branches or

00:36:48,340 --> 00:36:53,800
remote branches whatever they are

00:36:49,810 --> 00:36:55,960
branches okay there is a simple system

00:36:53,800 --> 00:36:58,090
to tell you how to track which branch

00:36:55,960 --> 00:37:00,420
with this with which branch but

00:36:58,090 --> 00:37:04,000
essentially it's the same mechanics

00:37:00,420 --> 00:37:09,070
mechanism you seen before what happens

00:37:04,000 --> 00:37:12,040
then when I do a git push same thing in

00:37:09,070 --> 00:37:15,000
the other direction take this stuff it's

00:37:12,040 --> 00:37:15,000
new you don't have it

00:37:15,800 --> 00:37:30,140
that's distribution may be so simple yes

00:37:22,940 --> 00:37:35,450
it's really so simple that's it we have

00:37:30,140 --> 00:37:41,510
the onium now you might wonder after

00:37:35,450 --> 00:37:44,870
rebuilding the entire onion so why are

00:37:41,510 --> 00:37:46,220
you telling me this stuff why am I

00:37:44,870 --> 00:37:48,890
supposed to care about this stuff

00:37:46,220 --> 00:37:51,590
usually in a presentation you tell the

00:37:48,890 --> 00:37:55,880
why beforehand because I supposed to

00:37:51,590 --> 00:38:00,290
motivate you but I said come home and we

00:37:55,880 --> 00:38:02,180
are all geeks get internals you don't

00:38:00,290 --> 00:38:05,540
need any more motivation and indeed

00:38:02,180 --> 00:38:08,090
you'll be following her but in the end I

00:38:05,540 --> 00:38:10,220
feel I need to motivate that and the

00:38:08,090 --> 00:38:12,800
basic thing is that when you learn it

00:38:10,220 --> 00:38:18,580
like pretty much anything else you go so

00:38:12,800 --> 00:38:20,870
you can abstract it as three stages okay

00:38:18,580 --> 00:38:23,870
the first stage you are inexperienced

00:38:20,870 --> 00:38:26,570
okay this is me being an experienced so

00:38:23,870 --> 00:38:29,180
I starting to play with gate hey it's

00:38:26,570 --> 00:38:32,060
not as hard as I thought okay i don't

00:38:29,180 --> 00:38:34,640
know rebase that that wasn't it

00:38:32,060 --> 00:38:37,340
subversion ok i will merger I know what

00:38:34,640 --> 00:38:39,830
that is and so I song ok and I was

00:38:37,340 --> 00:38:42,290
feeling all happy then you get to a

00:38:39,830 --> 00:38:45,800
point where you are experienced but

00:38:42,290 --> 00:38:48,290
compared to other technologies we're

00:38:45,800 --> 00:38:50,600
experienced means that you get more and

00:38:48,290 --> 00:38:53,840
more command in get experience

00:38:50,600 --> 00:38:56,300
experience looks more like this ok I

00:38:53,840 --> 00:38:59,180
broke the poster rapper what do I do now

00:38:56,300 --> 00:39:03,230
oh my god something bad happened people

00:38:59,180 --> 00:39:06,110
are probably going to blame ok and only

00:39:03,230 --> 00:39:09,800
there if you can't hold on sir with ease

00:39:06,110 --> 00:39:14,510
you get to a stage of fluency where you

00:39:09,800 --> 00:39:17,330
go like okay I'm not understanding but I

00:39:14,510 --> 00:39:21,380
know how things fit together hi I know

00:39:17,330 --> 00:39:24,470
how it organizes trees and blobs let em

00:39:21,380 --> 00:39:28,220
come it more importantly let me draw

00:39:24,470 --> 00:39:31,010
this ok now i can make sense of this

00:39:28,220 --> 00:39:37,670
and now I can actually work with get

00:39:31,010 --> 00:39:41,000
fluently okay and to get from the second

00:39:37,670 --> 00:39:44,359
step the second stage of experienced but

00:39:41,000 --> 00:39:46,460
often trouble to the stage where okay I

00:39:44,359 --> 00:39:49,220
know what I'm doing give me some time

00:39:46,460 --> 00:39:50,690
and I will sort it out you need to know

00:39:49,220 --> 00:39:53,930
the internal so you need to know the

00:39:50,690 --> 00:39:56,540
basics like a ruby metaprogramming in

00:39:53,930 --> 00:39:59,300
agate what is important is the model if

00:39:56,540 --> 00:40:01,250
you own the model you can make sense of

00:39:59,300 --> 00:40:03,200
any special case if you don't understand

00:40:01,250 --> 00:40:06,410
the model then each special case is

00:40:03,200 --> 00:40:08,930
going to be its own particular target

00:40:06,410 --> 00:40:14,810
and your life is going to be miserable I

00:40:08,930 --> 00:40:17,390
know because mine was so this takes care

00:40:14,810 --> 00:40:20,680
of the very latest layer now we're done

00:40:17,390 --> 00:40:20,680
okay thank

00:40:38,470 --> 00:40:40,530

YouTube URL: https://www.youtube.com/watch?v=RwYbl_tpoVE


