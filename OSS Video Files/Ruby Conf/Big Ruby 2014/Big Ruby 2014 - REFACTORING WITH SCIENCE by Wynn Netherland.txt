Title: Big Ruby 2014 - REFACTORING WITH SCIENCE by Wynn Netherland
Publication date: 2020-01-24
Playlist: Big Ruby 2014
Description: 
	Changing code is easy. Changing code with confidence isn't. Even the most robust, mature test suites have blind spots that make large scale changes difficult. At GitHub we use Science to instrument, compare results, and measure performance of parallel code path experiments to see how new code runs against a current production baseline. This talk will show you how to Science, too.

Help us caption & translate this video!

http://amara.org/v/FG3t/
Captions: 
	00:00:19,779 --> 00:00:27,140
check one two all right I'm going get

00:00:22,520 --> 00:00:29,720
started some folks are trickling in my

00:00:27,140 --> 00:00:32,239
name is win I work at github on the API

00:00:29,720 --> 00:00:33,739
team I think there's three of us here

00:00:32,239 --> 00:00:36,680
this year so we've kind of descended

00:00:33,739 --> 00:00:41,110
upon grapevine online I answer to

00:00:36,680 --> 00:00:44,180
penguin Twitter github usual places

00:00:41,110 --> 00:00:48,170
splash pages up a twin mm which is also

00:00:44,180 --> 00:00:51,260
a gospel R&B station ethic in North

00:00:48,170 --> 00:00:53,360
Carolina somewhere around there that you

00:00:51,260 --> 00:00:55,840
can find me wind outta FM today I wanted

00:00:53,360 --> 00:00:58,010
to talk to you about changing code and

00:00:55,840 --> 00:00:58,970
this is somewhat of a technical talk but

00:00:58,010 --> 00:01:01,310
for the most part it's about the

00:00:58,970 --> 00:01:04,070
philosophy of how we work at github and

00:01:01,310 --> 00:01:05,360
how we change code so I don't know what

00:01:04,070 --> 00:01:09,970
you've been told but changing code is

00:01:05,360 --> 00:01:12,760
pretty easy right you just change it

00:01:09,970 --> 00:01:16,070
it's changing code with confidence that

00:01:12,760 --> 00:01:19,190
can be the kicker I think we all know

00:01:16,070 --> 00:01:21,260
how this scene ends right with

00:01:19,190 --> 00:01:24,740
production production rolling down

00:01:21,260 --> 00:01:29,390
behind you so how do we get confidence

00:01:24,740 --> 00:01:32,450
about changing code the tests are

00:01:29,390 --> 00:01:34,370
probably the first thing that we do we

00:01:32,450 --> 00:01:37,070
write lots of tests as we develop

00:01:34,370 --> 00:01:39,229
features we write tests we find bugs we

00:01:37,070 --> 00:01:42,490
write more tests and over time we have a

00:01:39,229 --> 00:01:45,830
test suite that that grows with us

00:01:42,490 --> 00:01:47,450
anybody less than comfortable with their

00:01:45,830 --> 00:01:51,170
test suite for their production apps

00:01:47,450 --> 00:01:53,780
it's okay and the certain things that

00:01:51,170 --> 00:01:57,320
you you test down closer to the metal

00:01:53,780 --> 00:01:58,610
that you're just less than confident

00:01:57,320 --> 00:02:02,270
when you make those changes in

00:01:58,610 --> 00:02:04,700
production and get up we use data to

00:02:02,270 --> 00:02:06,110
inform decisions this is one of the

00:02:04,700 --> 00:02:09,110
things that kind of transform the way

00:02:06,110 --> 00:02:11,840
that I worked I've always used tools to

00:02:09,110 --> 00:02:15,409
gather metrics especially around usage

00:02:11,840 --> 00:02:17,450
of physical utilization of boxes and

00:02:15,409 --> 00:02:19,639
things of that sort but I'd get up it

00:02:17,450 --> 00:02:21,739
kind of blew my mind of just what's

00:02:19,639 --> 00:02:22,100
possible when you track everything and

00:02:21,739 --> 00:02:25,730
you

00:02:22,100 --> 00:02:28,820
data to inform decisions so we use Hugh

00:02:25,730 --> 00:02:30,140
bots for chat ops for everything and

00:02:28,820 --> 00:02:33,530
it's kind of like the center of the

00:02:30,140 --> 00:02:35,570
world at github and in that is a graph

00:02:33,530 --> 00:02:37,190
me command where I can pull up a graph

00:02:35,570 --> 00:02:39,440
of visualization to just about every

00:02:37,190 --> 00:02:41,420
metric that we've got that we track in

00:02:39,440 --> 00:02:44,480
the application in this case we're

00:02:41,420 --> 00:02:47,600
tracking API status codes it's just an

00:02:44,480 --> 00:02:50,180
example working the API is usually minor

00:02:47,600 --> 00:02:53,180
API related just API status codes over

00:02:50,180 --> 00:02:54,910
time and see if it meets expectations

00:02:53,180 --> 00:02:57,680
around certain changes that we're making

00:02:54,910 --> 00:02:59,900
there's another one for serialization

00:02:57,680 --> 00:03:02,390
queries when we're taking active record

00:02:59,900 --> 00:03:05,180
objects and serializing those to send

00:03:02,390 --> 00:03:07,370
over the wire and API responses so

00:03:05,180 --> 00:03:09,110
having rich data like this can inform

00:03:07,370 --> 00:03:11,420
decisions and help you move with a

00:03:09,110 --> 00:03:14,390
little bit more confidence we don't like

00:03:11,420 --> 00:03:16,760
to break the API and get up nobody does

00:03:14,390 --> 00:03:18,470
but there's been times where we went

00:03:16,760 --> 00:03:20,840
from a really dogmatic we can't break

00:03:18,470 --> 00:03:22,610
the API approach to actually seeing

00:03:20,840 --> 00:03:24,380
who's using particular methods and

00:03:22,610 --> 00:03:27,620
reaching out to those folks and then

00:03:24,380 --> 00:03:29,140
making a more pragmatic choice this is

00:03:27,620 --> 00:03:33,110
powered by what we call the graph store

00:03:29,140 --> 00:03:35,840
it's powered by graphite there's tons

00:03:33,110 --> 00:03:37,070
and tons of graphs and this thing and if

00:03:35,840 --> 00:03:39,110
it doesn't have the graph that you want

00:03:37,070 --> 00:03:40,820
you can just go and save the

00:03:39,110 --> 00:03:44,390
visualization and build that and save

00:03:40,820 --> 00:03:46,490
yourself some work the next time so it's

00:03:44,390 --> 00:03:50,300
built on graphite as I mentioned we have

00:03:46,490 --> 00:03:52,190
everything from broad visualizations and

00:03:50,300 --> 00:03:55,580
dashboards like this this is what pops

00:03:52,190 --> 00:03:59,330
up when you do a deploy in campfire

00:03:55,580 --> 00:04:01,730
cubot will tell you check the graph

00:03:59,330 --> 00:04:03,740
store or graft me for the browser

00:04:01,730 --> 00:04:05,930
response times to see if the change that

00:04:03,740 --> 00:04:08,470
you introduced is making the site run

00:04:05,930 --> 00:04:12,470
slower or faster for the segment you

00:04:08,470 --> 00:04:14,960
care about I did a little Dom work and

00:04:12,470 --> 00:04:16,790
chrome just to hide all the scrolling

00:04:14,960 --> 00:04:19,280
and just to get a screenshot of all of

00:04:16,790 --> 00:04:21,350
the charts this is probably ten percent

00:04:19,280 --> 00:04:23,840
of what was available on the first page

00:04:21,350 --> 00:04:27,470
it's just tons and tons of these charts

00:04:23,840 --> 00:04:29,360
that you can pull up and gauge metrics

00:04:27,470 --> 00:04:31,280
as your you're building out things and

00:04:29,360 --> 00:04:33,800
we track these there's three basic

00:04:31,280 --> 00:04:35,480
things that we track in the application

00:04:33,800 --> 00:04:37,940
there's counters gauges and timing

00:04:35,480 --> 00:04:39,770
so a counter is usually the most common

00:04:37,940 --> 00:04:41,390
anytime something that we care about

00:04:39,770 --> 00:04:44,510
happens in the code we will just

00:04:41,390 --> 00:04:46,970
increment it give it a name in its

00:04:44,510 --> 00:04:48,380
namespace some sort of action and that

00:04:46,970 --> 00:04:50,450
will increment a counter so that we can

00:04:48,380 --> 00:04:52,490
then take that and go graph that in the

00:04:50,450 --> 00:04:54,200
graph store there's a gauge if you want

00:04:52,490 --> 00:04:56,660
to track a reading of something over

00:04:54,200 --> 00:04:57,980
time like CPU utilization or Homans

00:04:56,660 --> 00:05:00,920
Twitter followers or something like that

00:04:57,980 --> 00:05:03,830
right you can measure that over time and

00:05:00,920 --> 00:05:07,280
see how that grows or shrinks and then a

00:05:03,830 --> 00:05:11,950
timing gauge is where we wrap a

00:05:07,280 --> 00:05:15,320
particular method in one of these

00:05:11,950 --> 00:05:16,490
graphite calls and whatever is inside

00:05:15,320 --> 00:05:17,870
the block is going to we're going to

00:05:16,490 --> 00:05:21,370
measure the duration of that and store

00:05:17,870 --> 00:05:23,870
that in graphite so I'm with that data

00:05:21,370 --> 00:05:30,860
we now can deploy with a little bit more

00:05:23,870 --> 00:05:32,930
confidence and so I have to temper the

00:05:30,860 --> 00:05:34,910
talk the the frosted side of me he likes

00:05:32,930 --> 00:05:37,130
to kind of talk about all the cool

00:05:34,910 --> 00:05:41,420
things that I've learned at github and

00:05:37,130 --> 00:05:44,540
how we work at github and I forget that

00:05:41,420 --> 00:05:46,730
you know not everybody has got the same

00:05:44,540 --> 00:05:48,080
context that I do who here was not

00:05:46,730 --> 00:05:53,000
telling a computer what to do all day

00:05:48,080 --> 00:05:57,490
before y2k was a thing yeah it was not

00:05:53,000 --> 00:06:00,980
anybody not coding before the year 2000

00:05:57,490 --> 00:06:02,150
fair number of hands so sometimes I feel

00:06:00,980 --> 00:06:04,550
like I've got to go back and give a back

00:06:02,150 --> 00:06:07,880
story just to kind of appreciate how

00:06:04,550 --> 00:06:11,680
good we have it on certain technologies

00:06:07,880 --> 00:06:14,600
that we have today so I started

00:06:11,680 --> 00:06:17,060
programming the late 80s this is

00:06:14,600 --> 00:06:21,260
effectively what we call to trash 80p

00:06:17,060 --> 00:06:23,240
rs80 writing basic and so deploying back

00:06:21,260 --> 00:06:24,680
and this time was usually just writing

00:06:23,240 --> 00:06:25,550
it down and turning your homework in I

00:06:24,680 --> 00:06:27,830
don't even know that we had floppy

00:06:25,550 --> 00:06:29,600
drives on those we had tape drives but

00:06:27,830 --> 00:06:31,700
didn't have a tape drive at home so

00:06:29,600 --> 00:06:34,940
usually homework was in written form so

00:06:31,700 --> 00:06:38,300
that was shipping in 1989-90 for in high

00:06:34,940 --> 00:06:40,010
school it was floppy disk I had a

00:06:38,300 --> 00:06:42,260
computer literacy teacher that

00:06:40,010 --> 00:06:43,730
effectually called these hard drives

00:06:42,260 --> 00:06:45,030
because they were harder than the five

00:06:43,730 --> 00:06:47,730
and a quarter this

00:06:45,030 --> 00:06:49,830
and moved into college and we leveled up

00:06:47,730 --> 00:06:54,780
to zip disks that's held 100 Meg's I

00:06:49,830 --> 00:06:59,490
think huge or 120 may be my first real

00:06:54,780 --> 00:07:02,970
job was in 98 99 working in a paper as a

00:06:59,490 --> 00:07:04,350
webmaster back in college assistant

00:07:02,970 --> 00:07:06,720
webmaster actually the webmaster was the

00:07:04,350 --> 00:07:08,550
one that Zelda ia and the site design

00:07:06,720 --> 00:07:10,440
and all of that the assistant webmaster

00:07:08,550 --> 00:07:14,310
had the privilege of copy and pasting at

00:07:10,440 --> 00:07:16,470
a quark and into the adobe golive or

00:07:14,310 --> 00:07:18,300
whatever company it was before adobe at

00:07:16,470 --> 00:07:22,110
the time and that was deploying back

00:07:18,300 --> 00:07:23,900
then was copied and facing an ftp moved

00:07:22,110 --> 00:07:26,850
into dotnet development where'd

00:07:23,900 --> 00:07:30,150
appointment then had massive build

00:07:26,850 --> 00:07:32,370
documents and word documents and usually

00:07:30,150 --> 00:07:34,800
involved going manual instructions going

00:07:32,370 --> 00:07:36,600
into the microsoft console and

00:07:34,800 --> 00:07:40,050
registering calm components and things

00:07:36,600 --> 00:07:42,600
of that sort of big big nasty deployment

00:07:40,050 --> 00:07:44,400
scripts that we had back then I drank

00:07:42,600 --> 00:07:48,120
the kool-aid and came over to Ruby and

00:07:44,400 --> 00:07:49,080
rails 2006-2007 and by 2009 I felt like

00:07:48,120 --> 00:07:51,690
I was living in the future with

00:07:49,080 --> 00:07:55,320
Capistrano to be able to deploy over ssh

00:07:51,690 --> 00:07:57,870
and script your employees and that

00:07:55,320 --> 00:08:00,900
seemed great and did that for a number

00:07:57,870 --> 00:08:02,490
of years until moved over to github and

00:08:00,900 --> 00:08:04,910
it was just blew my mind the way that we

00:08:02,490 --> 00:08:10,050
deploy and how often we deploy at github

00:08:04,910 --> 00:08:13,350
so the point today is mostly the github

00:08:10,050 --> 00:08:15,690
flow with some Q bite and pixie dust

00:08:13,350 --> 00:08:18,390
sprinkled on top of that it starts with

00:08:15,690 --> 00:08:20,700
a pull request anybody not using pull

00:08:18,390 --> 00:08:23,010
requests for their the bulk of their

00:08:20,700 --> 00:08:26,820
majority the majority of their

00:08:23,010 --> 00:08:28,650
development cool cool so you'd be

00:08:26,820 --> 00:08:30,810
surprised when I give this talk and it's

00:08:28,650 --> 00:08:33,240
just a lot of folks are using it and

00:08:30,810 --> 00:08:36,060
just haven't embraced the collaborative

00:08:33,240 --> 00:08:37,890
side of get so it starts with a pull

00:08:36,060 --> 00:08:42,090
request this is an actual bug that I

00:08:37,890 --> 00:08:43,290
shipped a couple of weeks ago so to

00:08:42,090 --> 00:08:47,340
create a pull request create a branch

00:08:43,290 --> 00:08:50,570
add some commits well push that up to

00:08:47,340 --> 00:08:52,830
get up open a pull request up there

00:08:50,570 --> 00:08:54,390
discuss and review and usually that's an

00:08:52,830 --> 00:08:55,610
iterative process I've got an open pull

00:08:54,390 --> 00:08:57,350
request right now that

00:08:55,610 --> 00:08:58,579
about five or six of us are working on

00:08:57,350 --> 00:09:00,829
it I think we're stressed testing the

00:08:58,579 --> 00:09:03,200
pull request page if we can show the

00:09:00,829 --> 00:09:06,529
diff stat for that thing so this is an

00:09:03,200 --> 00:09:10,519
iterative process and then based on the

00:09:06,529 --> 00:09:13,310
github guide graphic that I stole you

00:09:10,519 --> 00:09:16,940
merge and deploy but in the case I get

00:09:13,310 --> 00:09:19,279
have we easily deploy and then merge and

00:09:16,940 --> 00:09:21,079
it seems kind of strange the first time

00:09:19,279 --> 00:09:22,970
that I saw it but this is usually how it

00:09:21,079 --> 00:09:24,740
starts once you get a thumbs up or a

00:09:22,970 --> 00:09:29,420
ship it squirrel that your code looks

00:09:24,740 --> 00:09:32,300
good right then you deploy that to

00:09:29,420 --> 00:09:33,649
production so the word close i'm about

00:09:32,300 --> 00:09:35,660
to walk through was based on actual

00:09:33,649 --> 00:09:39,589
events change the shah's to protect the

00:09:35,660 --> 00:09:42,200
innocent so it starts asking you bot

00:09:39,589 --> 00:09:44,450
where can i deploy and he bought we'll

00:09:42,200 --> 00:09:45,680
come back and tell you the state of all

00:09:44,450 --> 00:09:47,390
of the environments we have a production

00:09:45,680 --> 00:09:51,019
environment we've got lab environments

00:09:47,390 --> 00:09:52,880
of varying degrees we got something new

00:09:51,019 --> 00:09:55,880
that I'm really excited about a couple

00:09:52,880 --> 00:09:59,720
of weeks ago among goop to cobble

00:09:55,880 --> 00:10:01,820
together a branch to vm deployment

00:09:59,720 --> 00:10:04,640
process that is essentially a branch lab

00:10:01,820 --> 00:10:06,709
so you can deploy your branch and it is

00:10:04,640 --> 00:10:09,140
live on your branch name dot whatever

00:10:06,709 --> 00:10:11,540
our test environment has calm so you

00:10:09,140 --> 00:10:13,519
don't have to wait on the tarmac to taxi

00:10:11,540 --> 00:10:16,579
to deploy anymore which is really cool

00:10:13,519 --> 00:10:18,680
because when several of us are in there

00:10:16,579 --> 00:10:20,930
working on the website you spend as much

00:10:18,680 --> 00:10:25,089
time waiting in line as you do employing

00:10:20,930 --> 00:10:28,670
so ask you about where can I deploy and

00:10:25,089 --> 00:10:30,760
then you tell it to deploy your witch

00:10:28,670 --> 00:10:34,790
project in this case get up the website

00:10:30,760 --> 00:10:36,890
which branch that you want to deploy to

00:10:34,790 --> 00:10:39,019
which environment the default is

00:10:36,890 --> 00:10:40,550
production so if i omit production here

00:10:39,019 --> 00:10:41,750
he assumes that i mean production but i

00:10:40,550 --> 00:10:44,060
could deploy to any one of those labs

00:10:41,750 --> 00:10:45,320
that i mentioned can also deploy to just

00:10:44,060 --> 00:10:46,519
the front end servers if i'm doing a

00:10:45,320 --> 00:10:49,010
front end change it could deploy to

00:10:46,519 --> 00:10:51,010
exploring backend servers I'm just doing

00:10:49,010 --> 00:10:53,360
a migration or something like that so

00:10:51,010 --> 00:10:54,769
environments not strictly what we think

00:10:53,360 --> 00:10:59,360
of as the rails environment or machine

00:10:54,769 --> 00:11:00,769
environment once I do that usually this

00:10:59,360 --> 00:11:03,339
is the first notification that comes

00:11:00,769 --> 00:11:05,630
back Hugh bot will check to see if

00:11:03,339 --> 00:11:08,910
master has been merged into my branch

00:11:05,630 --> 00:11:10,650
and if not he'll do that for me

00:11:08,910 --> 00:11:11,970
if master has been he'll just go ahead

00:11:10,650 --> 00:11:14,400
and start the deploy but the first thing

00:11:11,970 --> 00:11:16,140
that he does is check that master the

00:11:14,400 --> 00:11:17,970
tip of Master has made it into to my

00:11:16,140 --> 00:11:20,070
branch because we always want to deploy

00:11:17,970 --> 00:11:24,150
green code to production and master

00:11:20,070 --> 00:11:26,720
should always be green so once we get up

00:11:24,150 --> 00:11:29,610
to date with master then we wait on CI

00:11:26,720 --> 00:11:32,390
and again we use genki which is Hugh but

00:11:29,610 --> 00:11:34,350
on top of Jenkins anybody using Jenkins

00:11:32,390 --> 00:11:36,810
cool it's one of the better ones out

00:11:34,350 --> 00:11:37,950
there the UI is horrible but if you're

00:11:36,810 --> 00:11:39,600
using Jenkins and you haven't tried

00:11:37,950 --> 00:11:41,460
genki you might want to do it just to

00:11:39,600 --> 00:11:45,840
save your eyes I really dig the

00:11:41,460 --> 00:11:47,730
interface for for janky while we wait on

00:11:45,840 --> 00:11:51,030
CI a-- can go check email or be

00:11:47,730 --> 00:11:54,450
productive or let cuba entertain me in

00:11:51,030 --> 00:11:57,750
other ways go check out the water cooler

00:11:54,450 --> 00:12:01,050
room hang out with some other folks go

00:11:57,750 --> 00:12:02,340
back and check on CI and eventually come

00:12:01,050 --> 00:12:03,810
back and tell me that everything's

00:12:02,340 --> 00:12:05,550
either red which i start the deploy

00:12:03,810 --> 00:12:08,820
process over go fix the test figure out

00:12:05,550 --> 00:12:10,770
what's genki with janki or in this case

00:12:08,820 --> 00:12:12,960
i have a green build so it's going to

00:12:10,770 --> 00:12:15,810
deploy that directly to the environment

00:12:12,960 --> 00:12:17,370
that i selected in this case production

00:12:15,810 --> 00:12:19,710
so he's going to lock production nobody

00:12:17,370 --> 00:12:27,360
else can build a production and off we

00:12:19,710 --> 00:12:29,130
go to deploy our codes will get a

00:12:27,360 --> 00:12:30,780
callback that the deployment is started

00:12:29,130 --> 00:12:33,390
yet still takes you know multiple

00:12:30,780 --> 00:12:35,460
minutes to deploy all that code up to

00:12:33,390 --> 00:12:38,280
production and I get a notification when

00:12:35,460 --> 00:12:40,310
that is done and then I can go bang on

00:12:38,280 --> 00:12:40,310
it

00:12:47,130 --> 00:12:53,350
that's how it always plays out in my

00:12:49,120 --> 00:12:58,660
head anyway so so we've deployed our

00:12:53,350 --> 00:13:00,280
code to production now we observe we've

00:12:58,660 --> 00:13:05,170
got several tools that allow us to

00:13:00,280 --> 00:13:06,550
observe code that we're we've deployed

00:13:05,170 --> 00:13:08,920
to production before we merge it into

00:13:06,550 --> 00:13:11,500
master one of these is the staff bar

00:13:08,920 --> 00:13:14,470
that shows metrics up at the top not

00:13:11,500 --> 00:13:15,700
only site-wide response times look like

00:13:14,470 --> 00:13:18,070
but for that particular control or

00:13:15,700 --> 00:13:19,810
action let me know if I've slowed down

00:13:18,070 --> 00:13:21,780
or sped up ticular view or if we have

00:13:19,810 --> 00:13:24,040
problems in the rendering in some way

00:13:21,780 --> 00:13:25,870
this is really cool most of my works on

00:13:24,040 --> 00:13:28,660
the EPI so I mean curl and she'll poking

00:13:25,870 --> 00:13:30,880
on protection for the most part but this

00:13:28,660 --> 00:13:33,640
is available if you're doing something

00:13:30,880 --> 00:13:36,400
UI related another thing that we've got

00:13:33,640 --> 00:13:38,290
in this tool this previous tool is very

00:13:36,400 --> 00:13:43,200
similar to anybody using New Relic for

00:13:38,290 --> 00:13:43,200
this I like me really it's pretty cool

00:13:43,680 --> 00:13:49,240
haystak is an internal tool that you

00:13:47,170 --> 00:13:52,540
could think of it as a hoptoad or air

00:13:49,240 --> 00:13:56,130
brake exception notifier we catch all

00:13:52,540 --> 00:14:00,130
the unhandled exceptions they land here

00:13:56,130 --> 00:14:02,650
we call all of them needles go find a

00:14:00,130 --> 00:14:04,390
needle in the haystack up top we have

00:14:02,650 --> 00:14:06,370
browser response time period of a period

00:14:04,390 --> 00:14:08,860
to see if we've slowed down the site and

00:14:06,370 --> 00:14:10,510
then exceptions period over period to

00:14:08,860 --> 00:14:13,090
see if we're introducing new exceptions

00:14:10,510 --> 00:14:15,700
unhandled exceptions on the deploy and

00:14:13,090 --> 00:14:18,040
then you see those listed down below we

00:14:15,700 --> 00:14:19,930
have avatars that are on a timeline so

00:14:18,040 --> 00:14:22,600
you can see who's doing deploys when and

00:14:19,930 --> 00:14:24,220
you can see the exception started right

00:14:22,600 --> 00:14:26,620
after my deploy images something's wrong

00:14:24,220 --> 00:14:29,140
with my code right I can click on an

00:14:26,620 --> 00:14:32,500
exception and dive into it we have the

00:14:29,140 --> 00:14:35,230
stack trace linked up the orange lines

00:14:32,500 --> 00:14:37,660
that I blurt out our proprietary code

00:14:35,230 --> 00:14:41,890
inside of the good up code base the

00:14:37,660 --> 00:14:43,600
white ones are open source vendor gems

00:14:41,890 --> 00:14:44,830
that we use and if we have the source

00:14:43,600 --> 00:14:46,990
available in the case of the orange of

00:14:44,830 --> 00:14:49,390
the plight here I can click on that and

00:14:46,990 --> 00:14:52,030
it takes me out to that line of code on

00:14:49,390 --> 00:14:53,920
github directly so I can see exactly

00:14:52,030 --> 00:14:57,700
what's going on so it's handy to have

00:14:53,920 --> 00:14:59,530
that stack trace and they're even over

00:14:57,700 --> 00:15:00,110
in the gutter color-coded so there's a

00:14:59,530 --> 00:15:03,320
little

00:15:00,110 --> 00:15:10,820
octa cat if it's get up code it's a gem

00:15:03,320 --> 00:15:12,649
icon if it's just a vendor Jim so what

00:15:10,820 --> 00:15:14,300
do you do if there's a problem well we

00:15:12,649 --> 00:15:16,160
want to be able to roll back quickly to

00:15:14,300 --> 00:15:19,130
a good state so if we see that

00:15:16,160 --> 00:15:20,750
exceptions are coming in and there's

00:15:19,130 --> 00:15:22,040
been times where the test suite was

00:15:20,750 --> 00:15:23,870
green I felt really confident about a

00:15:22,040 --> 00:15:26,260
very small change and deployed that in

00:15:23,870 --> 00:15:29,360
production and watch haystak light up

00:15:26,260 --> 00:15:31,279
need to roll that back quickly and just

00:15:29,360 --> 00:15:33,230
chew bot deploy github without a branch

00:15:31,279 --> 00:15:36,290
without an environment he'll throw

00:15:33,230 --> 00:15:37,760
master directly into production and so

00:15:36,290 --> 00:15:39,140
you're only waiting as long as it takes

00:15:37,760 --> 00:15:41,329
to get a deploying to get back to a good

00:15:39,140 --> 00:15:42,790
state and then you go off and fix your

00:15:41,329 --> 00:15:46,610
test to figure out what's wrong and

00:15:42,790 --> 00:15:51,140
investigate if everything looks cool we

00:15:46,610 --> 00:15:54,170
can merge that down and I could do that

00:15:51,140 --> 00:15:56,269
from the command line but mostly I go

00:15:54,170 --> 00:15:59,810
out to the pull request that was open

00:15:56,269 --> 00:16:02,329
and just at the merge button and as soon

00:15:59,810 --> 00:16:06,170
as I do that to you by will notice it

00:16:02,329 --> 00:16:08,089
there's an event call back he'll say it

00:16:06,170 --> 00:16:09,649
looks like you've urged your branch into

00:16:08,089 --> 00:16:12,890
master i'm going to unlock production

00:16:09,649 --> 00:16:15,829
for someone else now and then he'll kick

00:16:12,890 --> 00:16:19,519
off builds if need be to throw that back

00:16:15,829 --> 00:16:22,220
into production master can move on while

00:16:19,519 --> 00:16:24,320
my code was up in production although

00:16:22,220 --> 00:16:26,740
we've locked the environment master

00:16:24,320 --> 00:16:30,649
there's other people pushing changes and

00:16:26,740 --> 00:16:32,000
we can push copy changes and other

00:16:30,649 --> 00:16:33,500
things that don't require see I billed

00:16:32,000 --> 00:16:36,709
directly to master without even going to

00:16:33,500 --> 00:16:38,000
see I so if that's the case and master

00:16:36,709 --> 00:16:39,860
did move it will do one more round of

00:16:38,000 --> 00:16:43,579
tests and then deploy the latest code to

00:16:39,860 --> 00:16:46,370
production so that's how we deploy with

00:16:43,579 --> 00:16:47,870
confidence being able to gather data be

00:16:46,370 --> 00:16:52,100
informed about the state of a deploy

00:16:47,870 --> 00:16:54,949
helps us move quickly but there's times

00:16:52,100 --> 00:16:56,660
when we need to know if we can remove

00:16:54,949 --> 00:16:58,190
coat and act with some sort of

00:16:56,660 --> 00:17:02,269
confidence to be able to remove code

00:16:58,190 --> 00:17:03,740
with a high degree of certainty have you

00:17:02,269 --> 00:17:05,410
ever asked this question when you opened

00:17:03,740 --> 00:17:08,260
up

00:17:05,410 --> 00:17:09,850
Oh a class and you're exploring you're

00:17:08,260 --> 00:17:11,440
trying to understand something and it

00:17:09,850 --> 00:17:13,720
may be a class that you camp out in

00:17:11,440 --> 00:17:15,340
regularly and then it's finally dawns on

00:17:13,720 --> 00:17:16,810
you that this method that I've been

00:17:15,340 --> 00:17:20,290
dancing around I'm not even sure if it's

00:17:16,810 --> 00:17:22,540
still still a jet right so how do we

00:17:20,290 --> 00:17:27,160
find the cruft from previous

00:17:22,540 --> 00:17:29,020
refactorings or feature removals and get

00:17:27,160 --> 00:17:31,270
rid of that with a high degree of

00:17:29,020 --> 00:17:34,450
confidence and get it we use something

00:17:31,270 --> 00:17:37,120
called backscatter this is not open

00:17:34,450 --> 00:17:40,030
source but you can roll your own it's

00:17:37,120 --> 00:17:42,070
it's a fairly simple pattern Bradley

00:17:40,030 --> 00:17:44,800
created this and it lives within the

00:17:42,070 --> 00:17:48,670
getup code base think of it as star-69

00:17:44,800 --> 00:17:51,280
for Ruby methods so in a dynamic

00:17:48,670 --> 00:17:52,800
language like Ruby it's often hard to

00:17:51,280 --> 00:17:54,550
know where things are called from

00:17:52,800 --> 00:17:57,820
especially with all the meta programming

00:17:54,550 --> 00:18:02,350
going on a simple grip won't always show

00:17:57,820 --> 00:18:05,890
you the color of a particular method so

00:18:02,350 --> 00:18:07,900
here's a very simple case we can include

00:18:05,890 --> 00:18:14,020
github backscatter in our class and

00:18:07,900 --> 00:18:16,090
instrument a method accordingly and what

00:18:14,020 --> 00:18:18,880
this will do is trace every time that

00:18:16,090 --> 00:18:21,640
methods called and put in our staff

00:18:18,880 --> 00:18:24,250
tools the same visualizations we showed

00:18:21,640 --> 00:18:27,010
earlier and show you where and when and

00:18:24,250 --> 00:18:29,950
the duration of these and these links to

00:18:27,010 --> 00:18:31,510
the methods are linked to the source

00:18:29,950 --> 00:18:35,710
code just like haystack web so i can

00:18:31,510 --> 00:18:38,730
click through those and see exactly what

00:18:35,710 --> 00:18:38,730
line of code is calling the method

00:18:45,370 --> 00:18:52,250
a lot of methods might be too heavy to

00:18:48,920 --> 00:18:55,160
trace every time through so in this case

00:18:52,250 --> 00:18:56,420
we can add a thousand here and we're

00:18:55,160 --> 00:18:58,970
only going to chase one out of every

00:18:56,420 --> 00:19:03,200
thousand calls through that method just

00:18:58,970 --> 00:19:07,400
to get a sampling of the throughput of

00:19:03,200 --> 00:19:09,140
that particular method so deploying with

00:19:07,400 --> 00:19:13,310
confidence and removing code with

00:19:09,140 --> 00:19:15,910
confidence science as I frame the talk

00:19:13,310 --> 00:19:18,830
is about experimenting with confidence

00:19:15,910 --> 00:19:22,090
we refactor a lot of things at the very

00:19:18,830 --> 00:19:24,110
core of the business especially around

00:19:22,090 --> 00:19:25,700
security relationships and things like

00:19:24,110 --> 00:19:27,770
that that you know what worked for

00:19:25,700 --> 00:19:30,920
twenty thousand users doesn't work for

00:19:27,770 --> 00:19:35,240
seven million users right so as you see

00:19:30,920 --> 00:19:37,280
growth in in the product you have to

00:19:35,240 --> 00:19:38,840
refactor the code base to keep up with

00:19:37,280 --> 00:19:42,220
that growth there are certain times

00:19:38,840 --> 00:19:44,390
where you've been so dependent upon

00:19:42,220 --> 00:19:45,920
framework magic under the hood that you

00:19:44,390 --> 00:19:48,320
might not have a high degree of

00:19:45,920 --> 00:19:49,910
certainty when you go to move things

00:19:48,320 --> 00:19:52,550
around that you haven't changed behavior

00:19:49,910 --> 00:19:54,620
so even though we have substantial tests

00:19:52,550 --> 00:19:55,880
around those things you would like a

00:19:54,620 --> 00:19:58,400
little bit more confidence to know that

00:19:55,880 --> 00:20:01,970
you're not going to be impacting

00:19:58,400 --> 00:20:03,950
production as you move and refactor so

00:20:01,970 --> 00:20:06,380
we use a product a project called

00:20:03,950 --> 00:20:10,250
science it lives it github / that

00:20:06,380 --> 00:20:12,980
science that's kind of a meme at github

00:20:10,250 --> 00:20:15,530
we used for everything in our console

00:20:12,980 --> 00:20:19,190
helper or console rails console there's

00:20:15,530 --> 00:20:21,530
a DAT helper so you can just say dat mo

00:20:19,190 --> 00:20:23,180
jumbo or dat defunct as a string or

00:20:21,530 --> 00:20:28,520
symbol and it pulls back their user

00:20:23,180 --> 00:20:30,260
record or that and a owner / repo slug

00:20:28,520 --> 00:20:32,690
and we'll go back that repository record

00:20:30,260 --> 00:20:35,150
to save you from having to to use the

00:20:32,690 --> 00:20:37,190
finder methods so that's baked into a

00:20:35,150 --> 00:20:40,880
lot of things we use brought to you by

00:20:37,190 --> 00:20:43,420
John Barnett it's lives in New Orleans

00:20:40,880 --> 00:20:46,880
and Rick brad.leah thinks in Nashville

00:20:43,420 --> 00:20:49,160
not sure so they created this science

00:20:46,880 --> 00:20:50,660
project and have extracted it out of the

00:20:49,160 --> 00:20:51,960
github code base but it's what we use

00:20:50,660 --> 00:20:55,230
internally

00:20:51,960 --> 00:21:03,480
to experiment and I was excited when

00:20:55,230 --> 00:21:04,770
when I found it saw this in the failblog

00:21:03,480 --> 00:21:08,820
a couple of weeks ago but that is just

00:21:04,770 --> 00:21:12,660
perfect for my talk so it allows us to

00:21:08,820 --> 00:21:16,110
safely observe alternate code paths so

00:21:12,660 --> 00:21:18,630
given the class that looks like this we

00:21:16,110 --> 00:21:21,870
can create a new experiment give it a

00:21:18,630 --> 00:21:24,390
name and then we introduce to code paths

00:21:21,870 --> 00:21:25,860
the control group is the old way the

00:21:24,390 --> 00:21:30,810
current way the production way which

00:21:25,860 --> 00:21:33,270
should be the correct way and then a

00:21:30,810 --> 00:21:35,640
candidate method both of these are just

00:21:33,270 --> 00:21:37,200
blocks right so controls is just a block

00:21:35,640 --> 00:21:39,120
usually that's probably a do end unless

00:21:37,200 --> 00:21:40,680
you've got that down to a single method

00:21:39,120 --> 00:21:43,680
that you can fit on one line but this is

00:21:40,680 --> 00:21:45,780
to simplify it a bit and then a

00:21:43,680 --> 00:21:49,410
candidate method and then we just run

00:21:45,780 --> 00:21:51,290
the experiment there's even a DSL for it

00:21:49,410 --> 00:21:53,670
if that's too much typing for you

00:21:51,290 --> 00:21:56,370
science the name of the experiment do

00:21:53,670 --> 00:21:58,350
and pass with controlling candidate and

00:21:56,370 --> 00:22:04,560
it will create the experiment and run it

00:21:58,350 --> 00:22:06,720
in a single step some other options that

00:22:04,560 --> 00:22:10,890
you can pass to this so what's going to

00:22:06,720 --> 00:22:12,120
happen is it's going to run the control

00:22:10,890 --> 00:22:13,320
in the candidate group every time

00:22:12,120 --> 00:22:15,570
through it's always going to return

00:22:13,320 --> 00:22:17,580
control but it's going to publish the

00:22:15,570 --> 00:22:20,160
results if you based on how you

00:22:17,580 --> 00:22:22,140
configure it publish the results when

00:22:20,160 --> 00:22:23,820
control doesn't match candidate so let

00:22:22,140 --> 00:22:27,180
you know when you're to code paths

00:22:23,820 --> 00:22:30,120
aren't in sync as you expected if you

00:22:27,180 --> 00:22:32,280
have each control and candidate group

00:22:30,120 --> 00:22:33,750
need some hints for how it should

00:22:32,280 --> 00:22:36,540
compare the results of those you can

00:22:33,750 --> 00:22:39,360
pass it a comp rater as we do on this

00:22:36,540 --> 00:22:43,620
last line and tell it how to compare the

00:22:39,360 --> 00:22:45,600
control group to the candidate group so

00:22:43,620 --> 00:22:48,920
ramping up experiments just as we did

00:22:45,600 --> 00:22:50,850
earlier with the trace call with

00:22:48,920 --> 00:22:52,260
backscatter we probably don't want to

00:22:50,850 --> 00:22:54,570
trace every time through some of these

00:22:52,260 --> 00:22:57,480
especially if they're and methods that

00:22:54,570 --> 00:22:59,430
get called on every page grip we can

00:22:57,480 --> 00:23:01,380
ramp those up just by in our experiment

00:22:59,430 --> 00:23:03,750
class overriding enabled the default is

00:23:01,380 --> 00:23:07,720
true which is

00:23:03,750 --> 00:23:11,830
every time here we can give it a ten

00:23:07,720 --> 00:23:13,720
percent throughput so every one out of

00:23:11,830 --> 00:23:16,690
ten times it's going to be enabled in

00:23:13,720 --> 00:23:20,440
that way we get a sampling of data we've

00:23:16,690 --> 00:23:22,660
set it up in github that there's a model

00:23:20,440 --> 00:23:23,950
around this and in staff tools we even

00:23:22,660 --> 00:23:27,180
have a nice UI that we can go ahead and

00:23:23,950 --> 00:23:29,200
ramp up these experiments over time

00:23:27,180 --> 00:23:32,100
another option is use something like

00:23:29,200 --> 00:23:35,620
Johnny no makers flipper project or the

00:23:32,100 --> 00:23:38,860
rollout project I think uses Redis to

00:23:35,620 --> 00:23:40,540
ramp this up over time as you go without

00:23:38,860 --> 00:23:45,280
having to hard-code this and do a build

00:23:40,540 --> 00:23:47,230
to be able to enable an experiment by

00:23:45,280 --> 00:23:51,580
default science doesn't do anything with

00:23:47,230 --> 00:23:53,590
your results you have to publish them so

00:23:51,580 --> 00:23:54,880
override the publish method in this case

00:23:53,590 --> 00:23:57,460
we're going to use a similar

00:23:54,880 --> 00:24:00,130
instrumentation that we used previous in

00:23:57,460 --> 00:24:02,650
the talk to throw those metrics up

00:24:00,130 --> 00:24:05,080
somewhere in the case of github we have

00:24:02,650 --> 00:24:07,000
a staff tools page that logs these and

00:24:05,080 --> 00:24:09,190
so these are some of the experiments

00:24:07,000 --> 00:24:10,840
that we're currently running the green

00:24:09,190 --> 00:24:12,160
everything is matching up if you see a

00:24:10,840 --> 00:24:14,950
lot of red it's where the candidate

00:24:12,160 --> 00:24:16,720
group is out of sync with the control

00:24:14,950 --> 00:24:19,360
group so we have some metrics over here

00:24:16,720 --> 00:24:21,370
how many times it was run what the

00:24:19,360 --> 00:24:22,710
current throttle rate is and then the

00:24:21,370 --> 00:24:24,820
percentage of it was right or wrong

00:24:22,710 --> 00:24:28,720
helps us know as we're moving through

00:24:24,820 --> 00:24:30,610
the code base and changing things how we

00:24:28,720 --> 00:24:32,080
can bring the candidate group into sync

00:24:30,610 --> 00:24:35,610
with the right results with the control

00:24:32,080 --> 00:24:39,490
group can drill down into those

00:24:35,610 --> 00:24:43,600
experiments and see accuracy over time

00:24:39,490 --> 00:24:48,600
so was it accuracy the accuracy less or

00:24:43,600 --> 00:24:51,040
greater over a time x axis there and

00:24:48,600 --> 00:24:53,950
then performance we also track the

00:24:51,040 --> 00:24:55,690
duration of the control group and the

00:24:53,950 --> 00:24:58,630
candidate group so for the canada group

00:24:55,690 --> 00:24:59,680
especially to compare those are we even

00:24:58,630 --> 00:25:01,060
though we're turning the right results

00:24:59,680 --> 00:25:03,430
what's performance look like based on

00:25:01,060 --> 00:25:05,380
the current behavior that's in

00:25:03,430 --> 00:25:08,020
production and I mentioned the UI this

00:25:05,380 --> 00:25:10,750
is found out the hard way these are

00:25:08,020 --> 00:25:11,800
looks surprising like pagination links

00:25:10,750 --> 00:25:13,060
the first time I clicked that I was

00:25:11,800 --> 00:25:14,650
think I was going to page two results

00:25:13,060 --> 00:25:16,620
and i was playing somebody's experiments

00:25:14,650 --> 00:25:20,440
so

00:25:16,620 --> 00:25:22,390
adding custom context to an experiment

00:25:20,440 --> 00:25:25,360
so there might be cases we're going to

00:25:22,390 --> 00:25:28,809
log not only the duration and whether

00:25:25,360 --> 00:25:30,580
how correct the candidate group was for

00:25:28,809 --> 00:25:34,539
the experiment we might want to throw

00:25:30,580 --> 00:25:37,570
some extra context the actual user post

00:25:34,539 --> 00:25:39,130
or something else like that custom

00:25:37,570 --> 00:25:44,250
payload into the experiment and log that

00:25:39,130 --> 00:25:46,390
so when we analyze it we can figure out

00:25:44,250 --> 00:25:53,140
was that a post it wasn't a data issue

00:25:46,390 --> 00:25:56,500
or something like that in the github

00:25:53,140 --> 00:25:57,640
codebase I discovered when I was looking

00:25:56,500 --> 00:25:59,710
through the code to prepare for this

00:25:57,640 --> 00:26:01,960
talk didn't realize this was there

00:25:59,710 --> 00:26:05,740
there's a override called mad science

00:26:01,960 --> 00:26:08,679
that was pretty cool so this is in the

00:26:05,740 --> 00:26:11,230
github namespace and all it is is a mad

00:26:08,679 --> 00:26:13,900
science accessor method here and it

00:26:11,230 --> 00:26:15,280
flips returning candidate instead of

00:26:13,900 --> 00:26:17,650
control so if you're really feeling

00:26:15,280 --> 00:26:19,059
lucky you can return the candidate

00:26:17,650 --> 00:26:23,350
results instead of the control results

00:26:19,059 --> 00:26:27,309
from your science experiments this is

00:26:23,350 --> 00:26:28,870
kind of just a taste of what analysis

00:26:27,309 --> 00:26:31,659
that you can do based on the science

00:26:28,870 --> 00:26:34,659
experiments but if you really want to

00:26:31,659 --> 00:26:37,030
dig in and analyze the results not only

00:26:34,659 --> 00:26:39,730
visualize the results as I've shown here

00:26:37,030 --> 00:26:41,380
but maybe poking them from the console

00:26:39,730 --> 00:26:44,860
there's another project called data

00:26:41,380 --> 00:26:49,840
analysis it's also playing github that

00:26:44,860 --> 00:26:53,049
will allow you to compare the results

00:26:49,840 --> 00:26:56,350
and fetch the the next result off the

00:26:53,049 --> 00:26:57,880
the Q and bang on those in a in a

00:26:56,350 --> 00:27:00,630
console settings so if you prefer text

00:26:57,880 --> 00:27:02,919
mode you might want to check that out I

00:27:00,630 --> 00:27:06,520
just wanted to end real quick with one

00:27:02,919 --> 00:27:11,380
last thanks for the impact that Jim

00:27:06,520 --> 00:27:12,520
wyrick had on the community at breakfast

00:27:11,380 --> 00:27:14,890
yesterday when I got the news i was

00:27:12,520 --> 00:27:16,570
listening around to just some of the

00:27:14,890 --> 00:27:18,280
ambient conversations I didn't know Jim

00:27:16,570 --> 00:27:21,070
that well I met him two or three times

00:27:18,280 --> 00:27:25,240
at conferences that I was fortunate out

00:27:21,070 --> 00:27:27,700
to share stage with with him you know I

00:27:25,240 --> 00:27:28,930
always thought of him as as the guy who

00:27:27,700 --> 00:27:30,760
wrote rake

00:27:28,930 --> 00:27:32,470
as just one of those guys that was up

00:27:30,760 --> 00:27:34,030
the road and who I looked up to

00:27:32,470 --> 00:27:36,430
tremendously but listening to the

00:27:34,030 --> 00:27:40,990
conversations yesterday one thing that

00:27:36,430 --> 00:27:44,140
struck me was very few over the more

00:27:40,990 --> 00:27:45,760
about what he created the tools that he

00:27:44,140 --> 00:27:48,040
created in the projects that had created

00:27:45,760 --> 00:27:50,890
they were more than personal impact that

00:27:48,040 --> 00:27:53,380
he had on people's lives and the thing

00:27:50,890 --> 00:27:56,890
that this seemed to strike me was the

00:27:53,380 --> 00:28:02,050
humility that he had the just zeal for

00:27:56,890 --> 00:28:04,330
life that he had and this notion of

00:28:02,050 --> 00:28:08,860
making the community a better place and

00:28:04,330 --> 00:28:12,310
if you just see the the impact that just

00:28:08,860 --> 00:28:15,730
one humble programmer can have it just

00:28:12,310 --> 00:28:19,750
kind of makes me think I want to focus

00:28:15,730 --> 00:28:24,040
less on identifying with the code that i

00:28:19,750 --> 00:28:26,410
right doesn't mean I want to write worst

00:28:24,040 --> 00:28:28,270
code but I want to identify less and

00:28:26,410 --> 00:28:30,010
separate myself from what it is that I'm

00:28:28,270 --> 00:28:31,530
creating and really focus on the

00:28:30,010 --> 00:28:33,280
relationships in this business

00:28:31,530 --> 00:28:35,910
relationships in this community because

00:28:33,280 --> 00:28:39,360
I think that's what's most important

00:28:35,910 --> 00:28:39,360

YouTube URL: https://www.youtube.com/watch?v=eMKG4puLfmM


