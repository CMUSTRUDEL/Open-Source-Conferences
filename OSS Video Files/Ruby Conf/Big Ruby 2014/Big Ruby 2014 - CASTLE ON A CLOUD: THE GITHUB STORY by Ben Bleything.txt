Title: Big Ruby 2014 - CASTLE ON A CLOUD: THE GITHUB STORY by Ben Bleything
Publication date: 2020-01-24
Playlist: Big Ruby 2014
Description: 
	When you think "GitHub", you're probably thinking of what we lovingly refer to as GitHub Dot Com: The Web Site. GitHub Dot Com: The Web Site runs on an incredibly interesting infrastructure composed of very powerful, cleverly configured, and deeply handsome servers. This is not their story. 

This is the story of the other 90% of our infrastructure. This is the story of the 350 AWS instances, 250 Heroku dynos, and dozens of Rackspace Cloud, Softlayer, and ESX VMs we run. This is a story of tooling and monitoring, of happiness and heartbreak, and, ultimately, of The Cloud.

Help us caption & translate this video!

http://amara.org/v/FG3s/
Captions: 
	00:00:19,300 --> 00:00:25,700
sorry about that my name is ben and i

00:00:23,300 --> 00:00:28,850
work at github and i work in the ops

00:00:25,700 --> 00:00:33,050
group at github and my timer didn't

00:00:28,850 --> 00:00:36,190
start so sorry about that i work in the

00:00:33,050 --> 00:00:39,100
ops group and specifically i work on

00:00:36,190 --> 00:00:41,210
supporting and maintaining and building

00:00:39,100 --> 00:00:42,980
infrastructure for our internal

00:00:41,210 --> 00:00:45,170
applications you may have heard other

00:00:42,980 --> 00:00:48,020
hubbers talking about things like team

00:00:45,170 --> 00:00:51,260
which is our internal kind of twitter

00:00:48,020 --> 00:00:52,609
type social networking site or we have a

00:00:51,260 --> 00:00:55,879
thing called higher where we track

00:00:52,609 --> 00:00:57,109
candidates and interviews and we have a

00:00:55,879 --> 00:00:59,390
whole bunch of those we have about a

00:00:57,109 --> 00:01:01,910
hundred and fifty applications that we

00:00:59,390 --> 00:01:03,920
use internally they're not all web apps

00:01:01,910 --> 00:01:06,350
some of them are utilities and services

00:01:03,920 --> 00:01:09,650
that enable other things but there's a

00:01:06,350 --> 00:01:12,710
lot of them and my my team supports all

00:01:09,650 --> 00:01:15,170
of them most of the internal tools

00:01:12,710 --> 00:01:19,460
infrastructure is on ec2 in fact all of

00:01:15,170 --> 00:01:22,790
it is on ec2 either directly VMs that we

00:01:19,460 --> 00:01:26,200
own or via Heroku and that's what I I

00:01:22,790 --> 00:01:30,350
want to talk to you about today I

00:01:26,200 --> 00:01:32,420
personally just as a technologist I

00:01:30,350 --> 00:01:34,189
really love the cloud I think it's a

00:01:32,420 --> 00:01:35,570
super cool concept I actually know what

00:01:34,189 --> 00:01:39,079
it means I don't use it as a marketing

00:01:35,570 --> 00:01:41,570
term and I think it's awesome I really

00:01:39,079 --> 00:01:43,729
like the idea that i can just say hey i

00:01:41,570 --> 00:01:45,619
need twenty-five cores right now for 10

00:01:43,729 --> 00:01:46,969
minutes and get them and then throw them

00:01:45,619 --> 00:01:49,640
away and be done with it I love that I

00:01:46,969 --> 00:01:53,060
love the elasticity and the on-demand

00:01:49,640 --> 00:01:54,530
nature of compute resources and it's

00:01:53,060 --> 00:01:59,509
just super cool it's really exciting to

00:01:54,530 --> 00:02:02,299
me our use of AWS and Heroku at github

00:01:59,509 --> 00:02:03,710
isn't really anything special almost

00:02:02,299 --> 00:02:06,079
everything that we do is stuff that

00:02:03,710 --> 00:02:08,660
we've heard other people doing and

00:02:06,079 --> 00:02:11,840
copied we take some notes from netflix

00:02:08,660 --> 00:02:14,600
they're huge AWS user a lot of our ops

00:02:11,840 --> 00:02:16,370
team came from Heroku and so they know

00:02:14,600 --> 00:02:18,350
the right ways to interact with Heroku

00:02:16,370 --> 00:02:20,810
so none of it i don't i don't think any

00:02:18,350 --> 00:02:21,920
of it is groundbreaking but i still

00:02:20,810 --> 00:02:23,360
think that there's a lot of stuff in

00:02:21,920 --> 00:02:26,420
there that's kind of cool and a little

00:02:23,360 --> 00:02:28,520
bit different and and that's kind of

00:02:26,420 --> 00:02:31,880
what i wanted to share with you today

00:02:28,520 --> 00:02:33,900
my hope is that by the end of this

00:02:31,880 --> 00:02:36,120
you'll be able to come up to me and tell

00:02:33,900 --> 00:02:38,940
me what I'm doing wrong what things we

00:02:36,120 --> 00:02:41,790
can do better and and where we can

00:02:38,940 --> 00:02:44,520
improve and then maybe also at the end

00:02:41,790 --> 00:02:47,460
of it go and build some of the things

00:02:44,520 --> 00:02:48,750
that we haven't gotten to yet and then

00:02:47,460 --> 00:02:52,770
open source i'm so i don't have to build

00:02:48,750 --> 00:02:55,020
them i'm going to be talking about chat

00:02:52,770 --> 00:02:58,140
ops a little bit if you haven't heard

00:02:55,020 --> 00:03:01,410
this term before it's how we refer to

00:02:58,140 --> 00:03:04,380
our way of working github is a little

00:03:01,410 --> 00:03:06,930
bit more than sixty percent distributed

00:03:04,380 --> 00:03:08,550
meaning not in San Francisco in fact

00:03:06,930 --> 00:03:11,910
nobody from the ops group is in san

00:03:08,550 --> 00:03:14,480
francisco at all if you look at the ops

00:03:11,910 --> 00:03:17,040
group I think there's 16 or 17 of us and

00:03:14,480 --> 00:03:20,010
the largest concentration of ops people

00:03:17,040 --> 00:03:21,180
in a single City is three there's no

00:03:20,010 --> 00:03:25,710
city that has more than three office

00:03:21,180 --> 00:03:28,680
people in it and so whereas github is

00:03:25,710 --> 00:03:30,930
very focused on using chat and campfires

00:03:28,680 --> 00:03:33,239
what we use as our primary method of

00:03:30,930 --> 00:03:35,820
communication the ops team tries to use

00:03:33,239 --> 00:03:38,010
it as our primary method of work as well

00:03:35,820 --> 00:03:41,010
and that means automating all of our

00:03:38,010 --> 00:03:43,950
common tasks common operational tasks

00:03:41,010 --> 00:03:46,200
through Hugh bot and I'll show you some

00:03:43,950 --> 00:03:49,200
examples later but if you want to get a

00:03:46,200 --> 00:03:51,209
really good background on this go look

00:03:49,200 --> 00:03:55,080
up Jesse Newlands talk from Ruby fusa

00:03:51,209 --> 00:03:56,190
last year 2013 it's on YouTube it's a

00:03:55,080 --> 00:03:58,620
great talk and a really good

00:03:56,190 --> 00:04:05,130
introduction to the concept of chat ops

00:03:58,620 --> 00:04:07,620
in the context of our ops team for a

00:04:05,130 --> 00:04:08,970
sense of scale I'd like to kind of give

00:04:07,620 --> 00:04:11,220
you an idea of what our infrastructure

00:04:08,970 --> 00:04:12,900
looks like the numbers here are

00:04:11,220 --> 00:04:14,130
deliberately vague and I apologize for

00:04:12,900 --> 00:04:17,700
that but I've been told that I can't

00:04:14,130 --> 00:04:20,700
tell you real numbers so we have a data

00:04:17,700 --> 00:04:22,650
center it is in the middle of nowhere in

00:04:20,700 --> 00:04:25,290
Virginia which has some advantages that

00:04:22,650 --> 00:04:26,700
i'll get to in a second we have some

00:04:25,290 --> 00:04:28,350
number of hundreds of machines there

00:04:26,700 --> 00:04:30,780
it's more than a few hundred and less

00:04:28,350 --> 00:04:33,900
than a thousand they're mostly Dells

00:04:30,780 --> 00:04:35,910
they're mostly CSeries high-density sled

00:04:33,900 --> 00:04:37,740
servers if you're a hardware nerd like I

00:04:35,910 --> 00:04:39,210
am come find me later I'll tell you all

00:04:37,740 --> 00:04:40,950
about them because i think the CSeries

00:04:39,210 --> 00:04:44,290
chassis is are super cool

00:04:40,950 --> 00:04:46,380
the data center powers pretty much all

00:04:44,290 --> 00:04:48,610
of github com when you go to the website

00:04:46,380 --> 00:04:49,990
most of what you're seeing is being

00:04:48,610 --> 00:04:51,640
served out of the data center there's a

00:04:49,990 --> 00:04:55,630
few systems here and there that are on

00:04:51,640 --> 00:04:57,400
ec2 but but not many interestingly we do

00:04:55,630 --> 00:05:02,320
almost no virtualization in the data

00:04:57,400 --> 00:05:04,270
center the what we do is in service of

00:05:02,320 --> 00:05:07,050
our continuous integration systems and

00:05:04,270 --> 00:05:09,640
some of our build systems and no

00:05:07,050 --> 00:05:12,430
virtualization is at any point involved

00:05:09,640 --> 00:05:14,020
in the serving of calm which kind of

00:05:12,430 --> 00:05:18,400
surprises me every time I think about it

00:05:14,020 --> 00:05:19,480
but that's what we do one of the

00:05:18,400 --> 00:05:20,850
advantages of being in the middle of

00:05:19,480 --> 00:05:23,590
nowhere in Virginia is that we are

00:05:20,850 --> 00:05:28,450
figuratively right next door to the u.s.

00:05:23,590 --> 00:05:30,720
East one region of AWS which is kind of

00:05:28,450 --> 00:05:33,040
cool because it means our latency is a

00:05:30,720 --> 00:05:36,010
function of the speed of light I mean I

00:05:33,040 --> 00:05:37,690
guess it always is but like the we're

00:05:36,010 --> 00:05:41,680
very we're very very close to us East

00:05:37,690 --> 00:05:45,970
one and I'll talk about in a few minutes

00:05:41,680 --> 00:05:47,440
why that is as cool as well cool enough

00:05:45,970 --> 00:05:53,560
to justify how excited I am about it

00:05:47,440 --> 00:05:55,840
anyway we have instances and resources

00:05:53,560 --> 00:05:57,790
in five regions of AWS they're primarily

00:05:55,840 --> 00:06:01,180
newest east one but we also have stuff

00:05:57,790 --> 00:06:04,780
in Europe in u.s. west and a couple in

00:06:01,180 --> 00:06:07,300
the apac region a little over 300 ec2

00:06:04,780 --> 00:06:11,770
instances in total little over 40 RDS

00:06:07,300 --> 00:06:14,040
instances 250 terabytes of EBS across a

00:06:11,770 --> 00:06:17,710
little more than four hundred volumes

00:06:14,040 --> 00:06:20,770
we've got over 100 s3 buckets which will

00:06:17,710 --> 00:06:28,410
be relevant in a minute and then we also

00:06:20,770 --> 00:06:32,010
use cloud front DynamoDB SQS SNS s es

00:06:28,410 --> 00:06:34,870
elastic MapReduce elastic hash and a

00:06:32,010 --> 00:06:40,840
whole bunch of other AWS services in

00:06:34,870 --> 00:06:42,910
small ways we additionally have 150 plus

00:06:40,840 --> 00:06:44,320
applications running on Heroku I don't

00:06:42,910 --> 00:06:46,570
know the exact number but it's more than

00:06:44,320 --> 00:06:49,150
150 to be fair a lot of those are

00:06:46,570 --> 00:06:50,800
staging instances or experiments but

00:06:49,150 --> 00:06:53,260
they're all things that actually take up

00:06:50,800 --> 00:06:58,130
my my time in

00:06:53,260 --> 00:06:59,600
g200 about 230 dinos total running those

00:06:58,130 --> 00:07:01,250
applications so obviously a lot of them

00:06:59,600 --> 00:07:03,400
are single dino apps but some of them

00:07:01,250 --> 00:07:06,320
are actually scaled up for really is

00:07:03,400 --> 00:07:10,070
more than 50 Heroku postgres instances

00:07:06,320 --> 00:07:12,740
and 200 and what I actually have an

00:07:10,070 --> 00:07:16,550
exact number for this one 264 instances

00:07:12,740 --> 00:07:21,050
of 25 different add-ons so we use who

00:07:16,550 --> 00:07:24,350
Roku pretty seriously we also have a

00:07:21,050 --> 00:07:25,850
handful of servers in other places we've

00:07:24,350 --> 00:07:27,770
got some physical hardware that we've

00:07:25,850 --> 00:07:30,650
leased sitting in other people's data

00:07:27,770 --> 00:07:33,229
centers we have some VMS that we've

00:07:30,650 --> 00:07:34,310
leased from other cloud providers most

00:07:33,229 --> 00:07:36,740
of this stuff is pretty uninteresting

00:07:34,310 --> 00:07:39,680
with the possible exception of the

00:07:36,740 --> 00:07:43,550
enterprise teams build system which is a

00:07:39,680 --> 00:07:47,600
three node ESX ESX cluster that runs a

00:07:43,550 --> 00:07:50,270
few hundred VMs that are the enterprise

00:07:47,600 --> 00:07:51,380
build product it's it's really cool but

00:07:50,270 --> 00:07:53,510
I don't know much about it so I can't

00:07:51,380 --> 00:07:54,620
tell you about it it's probably far more

00:07:53,510 --> 00:07:57,050
interesting than what I'm about to tell

00:07:54,620 --> 00:07:59,510
you so if you ever talk to get to talk

00:07:57,050 --> 00:08:04,030
to the enterprise guys at github press

00:07:59,510 --> 00:08:09,680
am about it because it's really cool so

00:08:04,030 --> 00:08:12,500
AWS early on in our use of AWS it was

00:08:09,680 --> 00:08:14,840
meant almost specifically to supplement

00:08:12,500 --> 00:08:16,630
our physical infrastructure the idea was

00:08:14,840 --> 00:08:19,099
that if we had a burst of traffic or

00:08:16,630 --> 00:08:21,320
cues got really backed up or something

00:08:19,099 --> 00:08:22,610
like that we'd be able to just throw you

00:08:21,320 --> 00:08:26,960
know just rub some cloud on it and make

00:08:22,610 --> 00:08:29,510
those things go away and it works pretty

00:08:26,960 --> 00:08:31,340
well for that it turns out it's sort of

00:08:29,510 --> 00:08:34,700
in some ways what ec2 was originally

00:08:31,340 --> 00:08:39,200
designed for at some point though we

00:08:34,700 --> 00:08:41,209
started moving faster than we could

00:08:39,200 --> 00:08:42,650
procure hardware and we got to the point

00:08:41,209 --> 00:08:44,089
where we needed to deploy new

00:08:42,650 --> 00:08:46,339
applications but we didn't have hardware

00:08:44,089 --> 00:08:49,100
for it and so we throw it on ec2 which

00:08:46,339 --> 00:08:52,220
meant that we ended up having more

00:08:49,100 --> 00:08:53,660
permanent things living on ec2 then we

00:08:52,220 --> 00:08:55,580
had maybe originally intended and

00:08:53,660 --> 00:09:01,490
certainly more than we had built too

00:08:55,580 --> 00:09:04,190
late for these days most of what's

00:09:01,490 --> 00:09:05,649
running on ec2 are things that were

00:09:04,190 --> 00:09:07,360
prototyped and built

00:09:05,649 --> 00:09:09,040
for we had hardware and so they're just

00:09:07,360 --> 00:09:11,170
waiting to move on to real hardware once

00:09:09,040 --> 00:09:14,050
it's available things that actually

00:09:11,170 --> 00:09:16,749
require elasticity so data processing

00:09:14,050 --> 00:09:19,540
our analytics team has a large cluster

00:09:16,749 --> 00:09:20,379
of compute servers in ec2 and that's

00:09:19,540 --> 00:09:22,740
probably gonna stay there forever

00:09:20,379 --> 00:09:25,360
because it just makes more sense and

00:09:22,740 --> 00:09:28,720
then apps that for various reasons

00:09:25,360 --> 00:09:32,410
mostly technical but sometimes not don't

00:09:28,720 --> 00:09:35,800
work very well in Heroku that's almost

00:09:32,410 --> 00:09:37,149
everything that we've got an AWS one of

00:09:35,800 --> 00:09:39,639
the things that has been really

00:09:37,149 --> 00:09:45,149
challenging for us is a WSS resource

00:09:39,639 --> 00:09:48,009
limits and wow that font is small so

00:09:45,149 --> 00:09:49,540
when you create a new ad AWS account one

00:09:48,009 --> 00:09:51,639
of the things that you're going to be

00:09:49,540 --> 00:09:54,129
faced with is not being able to start

00:09:51,639 --> 00:09:57,850
more than 115 ec2 instances which seems

00:09:54,129 --> 00:10:00,100
like a lot but it isn't or 40 RDS

00:09:57,850 --> 00:10:03,009
databases again seems like a lot but

00:10:00,100 --> 00:10:05,499
that stuff runs out pretty fast these

00:10:03,009 --> 00:10:07,809
are the limits that we've actually

00:10:05,499 --> 00:10:09,730
already hit we have way more ec2

00:10:07,809 --> 00:10:12,850
instances and instances than that we

00:10:09,730 --> 00:10:18,040
have more reservations more RDS

00:10:12,850 --> 00:10:21,339
instances a lot more EBS storage excuse

00:10:18,040 --> 00:10:22,959
me and I am which I'll talk about a

00:10:21,339 --> 00:10:26,379
little bit later we're on those limits

00:10:22,959 --> 00:10:29,069
as well but there's one that really

00:10:26,379 --> 00:10:31,600
really hurts the worst and it's it's s3

00:10:29,069 --> 00:10:34,629
the reason is that this is the only

00:10:31,600 --> 00:10:36,490
limit on eat on AWS that you can't have

00:10:34,629 --> 00:10:38,679
arranged everything else you can file a

00:10:36,490 --> 00:10:40,959
ticket and if you can justify it they'll

00:10:38,679 --> 00:10:43,509
turn it up for you and you can run more

00:10:40,959 --> 00:10:45,939
servers whatever else you cannot under

00:10:43,509 --> 00:10:49,449
any circumstances get more s3 buckets

00:10:45,939 --> 00:10:52,360
I'm sorry I need water I'm just going to

00:10:49,449 --> 00:10:54,639
take one of these I apologize I've been

00:10:52,360 --> 00:10:59,740
sick for a week and I'm amazed that i'm

00:10:54,639 --> 00:11:06,639
not coughing more than i am so sorry you

00:10:59,740 --> 00:11:08,199
know early in our growth we made some

00:11:06,639 --> 00:11:10,329
bad decisions and one of those bad

00:11:08,199 --> 00:11:14,019
decisions was creating separate s3

00:11:10,329 --> 00:11:17,439
buckets for every application excuse me

00:11:14,019 --> 00:11:19,430
in some cases every application and

00:11:17,439 --> 00:11:21,440
every environment so production

00:11:19,430 --> 00:11:23,330
Elliman staging would have separate s3

00:11:21,440 --> 00:11:24,980
buckets which means you run out really

00:11:23,330 --> 00:11:28,490
fast you run 30 applications and you're

00:11:24,980 --> 00:11:33,040
out and we run 150 so we need to find

00:11:28,490 --> 00:11:36,830
out ways to deal with this and probably

00:11:33,040 --> 00:11:41,240
the the thing that we do on AWS that I

00:11:36,830 --> 00:11:42,649
think is the coolest is using IM which

00:11:41,240 --> 00:11:46,250
is the Identity and Access Management

00:11:42,649 --> 00:11:48,200
Service which doesn't sound particularly

00:11:46,250 --> 00:11:50,870
exciting but I think it lets you do some

00:11:48,200 --> 00:11:53,330
really cool stuff it's effectively I

00:11:50,870 --> 00:11:57,170
mean it'sit's ldap it's a glorified user

00:11:53,330 --> 00:12:00,230
manager but what it does is it allows

00:11:57,170 --> 00:12:03,399
you to create a set of credentials that

00:12:00,230 --> 00:12:08,839
has access to a specific subset of

00:12:03,399 --> 00:12:10,940
resources on AWS and what that let us do

00:12:08,839 --> 00:12:12,320
was consolidate those buckets down and

00:12:10,940 --> 00:12:14,810
say that each application gets one

00:12:12,320 --> 00:12:17,690
bucket and the development production

00:12:14,810 --> 00:12:19,670
and staging sections are prefixes in

00:12:17,690 --> 00:12:21,110
that bucket and each one of them has a

00:12:19,670 --> 00:12:25,880
set of credentials that can only read

00:12:21,110 --> 00:12:27,980
and write from that prefix this has

00:12:25,880 --> 00:12:31,880
helped a lot it reduced our bucket load

00:12:27,980 --> 00:12:33,410
by 3 x factor of 3 where we've used it

00:12:31,880 --> 00:12:35,930
we haven't universally rolled this out

00:12:33,410 --> 00:12:43,550
but it opened this up to do some even

00:12:35,930 --> 00:12:46,400
cooler things excuse me one of the

00:12:43,550 --> 00:12:50,480
concepts in I am is that of a role a

00:12:46,400 --> 00:12:52,339
role is not a user but it is just an

00:12:50,480 --> 00:12:55,279
entity that you can attach policies to

00:12:52,339 --> 00:12:57,740
and then users or other resources like

00:12:55,279 --> 00:13:00,740
ec2 instances for your instance can

00:12:57,740 --> 00:13:03,260
assume that role and gain the rights

00:13:00,740 --> 00:13:05,720
that it has so in a way this is kind of

00:13:03,260 --> 00:13:08,600
like pseudo mode for AWS like I can say

00:13:05,720 --> 00:13:10,520
I require for 20 minutes credentials

00:13:08,600 --> 00:13:12,589
that can access a certain bucket and I

00:13:10,520 --> 00:13:16,010
go to sts which is the security token

00:13:12,589 --> 00:13:18,350
service and request to assume that role

00:13:16,010 --> 00:13:20,750
and assuming I have permission to do so

00:13:18,350 --> 00:13:27,050
I get credentials that let me go out and

00:13:20,750 --> 00:13:29,029
do whatever it is that role can do where

00:13:27,050 --> 00:13:31,010
that starts to get super cool is when

00:13:29,029 --> 00:13:32,990
you mix it with instance profiles which

00:13:31,010 --> 00:13:34,610
is a way that you can attach a role /

00:13:32,990 --> 00:13:38,029
lead to an ec2 instance so when you

00:13:34,610 --> 00:13:40,730
launch an instance it can have one of

00:13:38,029 --> 00:13:44,390
these IM roles attached to it and what

00:13:40,730 --> 00:13:47,630
happens is that the credentials are put

00:13:44,390 --> 00:13:49,040
in the instance metadata so your app

00:13:47,630 --> 00:13:50,959
doesn't have it you just go fetch it out

00:13:49,040 --> 00:13:52,190
of the metadata those credentials are

00:13:50,959 --> 00:13:55,130
automatically rolled last time I checked

00:13:52,190 --> 00:13:56,420
it's every 75 minutes ish so like every

00:13:55,130 --> 00:13:58,970
75 minutes you're getting a fresh set of

00:13:56,420 --> 00:14:04,520
credentials and you can just read them

00:13:58,970 --> 00:14:07,430
you can do whatever so that might be a

00:14:04,520 --> 00:14:10,339
little bit confusing the way that it all

00:14:07,430 --> 00:14:13,520
fits together is this you have an s3

00:14:10,339 --> 00:14:15,980
bucket your app and you have prefixes

00:14:13,520 --> 00:14:17,990
within it for each environment then you

00:14:15,980 --> 00:14:19,430
have IM roles that match each

00:14:17,990 --> 00:14:21,529
environment you're at production you're

00:14:19,430 --> 00:14:25,279
upstaging your app dev then when you

00:14:21,529 --> 00:14:28,220
create this instance down here the

00:14:25,279 --> 00:14:30,529
staging instance you apply the staging

00:14:28,220 --> 00:14:32,390
IM role to it and then it has

00:14:30,529 --> 00:14:33,529
credentials on the machine you didn't

00:14:32,390 --> 00:14:36,860
have to put it in your application there

00:14:33,529 --> 00:14:39,800
just there that has access only to the

00:14:36,860 --> 00:14:41,149
staging prefix in that bucket you can

00:14:39,800 --> 00:14:43,970
attach a whole bunch of other policies

00:14:41,149 --> 00:14:45,589
in fact almost actually maybe every

00:14:43,970 --> 00:14:49,700
single thing every single action you can

00:14:45,589 --> 00:14:51,740
take on AWS is can be limited by these

00:14:49,700 --> 00:14:54,050
policies this is just the one that we

00:14:51,740 --> 00:14:59,510
use the most of and we're looking to

00:14:54,050 --> 00:15:01,940
roll out a lot more as we go along the

00:14:59,510 --> 00:15:05,660
other kind of related thing is is cross

00:15:01,940 --> 00:15:08,649
account management access controls this

00:15:05,660 --> 00:15:12,410
allows you to say have two accounts and

00:15:08,649 --> 00:15:15,110
say this account can access resources in

00:15:12,410 --> 00:15:16,430
this account so if you absolutely have

00:15:15,110 --> 00:15:18,050
to have more than 100 buckets you just

00:15:16,430 --> 00:15:19,370
create a new account and start putting

00:15:18,050 --> 00:15:21,950
buckets over there and then write

00:15:19,370 --> 00:15:25,700
policies that allow resources in this

00:15:21,950 --> 00:15:29,209
account to access buckets over here the

00:15:25,700 --> 00:15:32,000
way we use that is to create secure

00:15:29,209 --> 00:15:35,060
right only drop boxes so we have our

00:15:32,000 --> 00:15:36,649
sort of like main account but they need

00:15:35,060 --> 00:15:38,839
to ship data off to somewhere else

00:15:36,649 --> 00:15:40,730
usually for like database backups or

00:15:38,839 --> 00:15:42,620
things like that and so they have

00:15:40,730 --> 00:15:43,970
credentials that can only write to a

00:15:42,620 --> 00:15:45,139
bucket in another account they can't

00:15:43,970 --> 00:15:52,040
read the data back they can only

00:15:45,139 --> 00:15:53,779
to it and that is super handy for us I

00:15:52,040 --> 00:15:56,899
talked a little bit about chat ups

00:15:53,779 --> 00:15:59,569
earlier and I think some examples would

00:15:56,899 --> 00:16:02,689
be good so the question is like how do

00:15:59,569 --> 00:16:04,399
we chat ops ii c 2 this is a terribly

00:16:02,689 --> 00:16:07,279
tiny screenshot and I apologize for that

00:16:04,399 --> 00:16:10,040
but we have this thing called cloud AWS

00:16:07,279 --> 00:16:14,089
at you just say / cloud AWS and chat and

00:16:10,040 --> 00:16:15,589
you get tons of different things one of

00:16:14,089 --> 00:16:20,869
the things you can do is list all of the

00:16:15,589 --> 00:16:23,389
instances this is like I don't know 10

00:16:20,869 --> 00:16:26,329
ish out of the 250 that this is

00:16:23,389 --> 00:16:27,529
returning right now and it has there's a

00:16:26,329 --> 00:16:28,970
whole bunch of stuff off that edge of

00:16:27,529 --> 00:16:30,379
the screen to about their security

00:16:28,970 --> 00:16:31,730
groups there IM roles and all sort of

00:16:30,379 --> 00:16:36,829
stuff so it's it's kind of instant

00:16:31,730 --> 00:16:38,839
access to all of our ec2 instances you

00:16:36,829 --> 00:16:41,540
can also i apparently took the slide out

00:16:38,839 --> 00:16:43,850
where you can filter it down to say i

00:16:41,540 --> 00:16:45,980
only want to see this is a lambic which

00:16:43,850 --> 00:16:50,689
is one of our subsystems i only want to

00:16:45,980 --> 00:16:52,759
see the atlantic hosts you can also chat

00:16:50,689 --> 00:16:54,829
provision a server which is what i'm

00:16:52,759 --> 00:16:57,739
doing here I said you know create me a

00:16:54,829 --> 00:17:00,589
server called templating to and have it

00:16:57,739 --> 00:17:05,149
be an m3 medium and then it took what is

00:17:00,589 --> 00:17:06,829
this 1345 seconds to do it but then I

00:17:05,149 --> 00:17:08,209
got all this information back with the

00:17:06,829 --> 00:17:10,549
IP addresses and everything else I just

00:17:08,209 --> 00:17:12,260
have a server ready to go one of the

00:17:10,549 --> 00:17:14,029
cool things that happen here behind the

00:17:12,260 --> 00:17:17,779
scenes is that it automatically created

00:17:14,029 --> 00:17:19,579
an app and environment pair security

00:17:17,779 --> 00:17:21,049
group and I emeril and so that role

00:17:19,579 --> 00:17:23,419
because you can only create those roles

00:17:21,049 --> 00:17:25,100
both security groups and I Emeril's can

00:17:23,419 --> 00:17:28,399
only be assigned to instances at launch

00:17:25,100 --> 00:17:29,990
time we automatically create them if

00:17:28,399 --> 00:17:31,490
they didn't already exist and assign

00:17:29,990 --> 00:17:33,049
them to the application when or to the

00:17:31,490 --> 00:17:35,419
instance when we provision the instance

00:17:33,049 --> 00:17:37,549
so that if we decide we want to use that

00:17:35,419 --> 00:17:40,130
later we can just go right policies into

00:17:37,549 --> 00:17:42,139
it rather than having to like

00:17:40,130 --> 00:17:47,659
reprovision the instance to add those

00:17:42,139 --> 00:17:51,019
features and then of course you can

00:17:47,659 --> 00:17:54,019
delete instances to this magic word

00:17:51,019 --> 00:17:57,139
thing is are like are you sure you meant

00:17:54,019 --> 00:17:58,190
this it changes every day this why don't

00:17:57,139 --> 00:17:58,730
know why i blanked it out this one was

00:17:58,190 --> 00:18:07,640
apples

00:17:58,730 --> 00:18:09,620
so yeah so this is me being nerdy again

00:18:07,640 --> 00:18:11,510
just as I got excited about user

00:18:09,620 --> 00:18:15,080
management I get excited about cost

00:18:11,510 --> 00:18:17,419
management so there's a resource tagging

00:18:15,080 --> 00:18:18,850
feature in ec to that was Renee WS it

00:18:17,419 --> 00:18:22,700
was originally designed to help you

00:18:18,850 --> 00:18:25,100
group resource usage together so you say

00:18:22,700 --> 00:18:28,360
you you can add key arbitrary key value

00:18:25,100 --> 00:18:32,660
pairs to almost any resource in AWS and

00:18:28,360 --> 00:18:34,010
so we do things like the app which is

00:18:32,660 --> 00:18:37,010
the first part of the hostname in this

00:18:34,010 --> 00:18:38,540
case ops the environment staging the

00:18:37,010 --> 00:18:42,110
provisioner this one was provisioned by

00:18:38,540 --> 00:18:43,549
me in campfire using cloud AWS or the

00:18:42,110 --> 00:18:46,790
role which is the second part of the

00:18:43,549 --> 00:18:50,360
hostname and what this allows us to do

00:18:46,790 --> 00:18:52,280
is say show me every resource in AWS

00:18:50,360 --> 00:18:55,549
that is being used by the ops

00:18:52,280 --> 00:18:57,980
application or being used by the higher

00:18:55,549 --> 00:18:59,780
application or whatever else if you're

00:18:57,980 --> 00:19:01,760
really diligent and you can apply these

00:18:59,780 --> 00:19:03,290
tags to every object in this three you

00:19:01,760 --> 00:19:06,080
can apply them two buckets you can apply

00:19:03,290 --> 00:19:07,700
them to IM users you can put them on RDS

00:19:06,080 --> 00:19:10,429
instances you can put them all over the

00:19:07,700 --> 00:19:13,100
place so it really helps you to kind of

00:19:10,429 --> 00:19:15,710
keep that stuff together and to be able

00:19:13,100 --> 00:19:20,450
to query for specific subsets of your

00:19:15,710 --> 00:19:24,410
infrastructure this is mostly used for

00:19:20,450 --> 00:19:26,960
cost management which is not really in

00:19:24,410 --> 00:19:28,100
the scope of this talk but I like it so

00:19:26,960 --> 00:19:32,900
I'm going to talk about it anyway and

00:19:28,100 --> 00:19:35,480
you can't stop me so it used to be that

00:19:32,900 --> 00:19:37,820
this is a pie chart it used to be that

00:19:35,480 --> 00:19:39,890
this is how much money you spent on easy

00:19:37,820 --> 00:19:42,710
to you just get a bill and you paid it

00:19:39,890 --> 00:19:45,950
and your stuff stayed on and that gets

00:19:42,710 --> 00:19:49,250
kind of annoying when you have 300

00:19:45,950 --> 00:19:54,020
applications running so we built this

00:19:49,250 --> 00:19:56,960
thing that uses our graphite and poles

00:19:54,020 --> 00:19:59,179
ec2 to say this is how many instances

00:19:56,960 --> 00:20:00,950
were running of each type and estimated

00:19:59,179 --> 00:20:03,169
proximately what they're costing I took

00:20:00,950 --> 00:20:06,470
off the scale but the top of this is a

00:20:03,169 --> 00:20:09,620
very large number and this is this is

00:20:06,470 --> 00:20:11,440
our projected annual spending if we

00:20:09,620 --> 00:20:14,230
don't shut down or add any instance

00:20:11,440 --> 00:20:15,730
before the end of the year and the goal

00:20:14,230 --> 00:20:17,799
of this graph was originally to show

00:20:15,730 --> 00:20:20,710
that it trends downward over time which

00:20:17,799 --> 00:20:22,690
fortunately this one is doing and but

00:20:20,710 --> 00:20:23,830
it's not particularly accurate and so if

00:20:22,690 --> 00:20:25,000
you really want to get a handle on this

00:20:23,830 --> 00:20:28,240
stuff there's a couple of different

00:20:25,000 --> 00:20:29,620
options I can't show you screenshots of

00:20:28,240 --> 00:20:32,830
any of them because it was too hard to

00:20:29,620 --> 00:20:34,600
like blank out the details but AWS has

00:20:32,830 --> 00:20:36,700
their own billing report system that you

00:20:34,600 --> 00:20:39,669
can use it's just up in the upper right

00:20:36,700 --> 00:20:41,110
it's you it's the drop-down that's just

00:20:39,669 --> 00:20:42,190
the left of the region picker and

00:20:41,110 --> 00:20:44,919
there's a billing and cost management

00:20:42,190 --> 00:20:46,629
section in there then netflix has an

00:20:44,919 --> 00:20:50,080
open source tool called ice which is

00:20:46,629 --> 00:20:51,909
really really really powerful but really

00:20:50,080 --> 00:20:55,269
really hard to get running and hard to

00:20:51,909 --> 00:20:58,090
use and but if you have a complex

00:20:55,269 --> 00:21:00,009
infrastructure on ec2 or on amazon at

00:20:58,090 --> 00:21:01,419
all ice is a really good way to keep

00:21:00,009 --> 00:21:03,580
track of how much you're spending on it

00:21:01,419 --> 00:21:07,840
and then there's a service that you can

00:21:03,580 --> 00:21:11,679
pay for called cloud ability who there a

00:21:07,840 --> 00:21:15,129
rail shop in portland and they their

00:21:11,679 --> 00:21:19,870
product allows you to analyze your usage

00:21:15,129 --> 00:21:22,269
based on those tags and they also have a

00:21:19,870 --> 00:21:23,860
feature that will suggest how to

00:21:22,269 --> 00:21:26,259
optimize your reserved instance

00:21:23,860 --> 00:21:33,990
purchases to get your costs down excuse

00:21:26,259 --> 00:21:36,669
me okay so enough babbling about costs

00:21:33,990 --> 00:21:40,360
VPC is my favorite third favorite

00:21:36,669 --> 00:21:43,360
feature of AWS this is a feature that

00:21:40,360 --> 00:21:47,049
allows you to create a private network

00:21:43,360 --> 00:21:50,830
in private network space and have it be

00:21:47,049 --> 00:21:52,330
isolated from the rest of ec2 so and

00:21:50,830 --> 00:21:54,669
more importantly from the rest of the

00:21:52,330 --> 00:21:57,370
internet you can put Matt get like VPC

00:21:54,669 --> 00:21:58,929
allows you to put an at gateway or elb

00:21:57,370 --> 00:22:01,840
is at the edge so that you can route

00:21:58,929 --> 00:22:03,970
traffic into the VPC if you want to but

00:22:01,840 --> 00:22:07,169
it also allows you to connect it to your

00:22:03,970 --> 00:22:09,549
data center over VPN which is what we do

00:22:07,169 --> 00:22:11,740
using another thing that I really like

00:22:09,549 --> 00:22:13,210
which is called direct connect direct

00:22:11,740 --> 00:22:15,610
connect i think is one of those sort of

00:22:13,210 --> 00:22:17,080
secrets of ec2 that I don't think are of

00:22:15,610 --> 00:22:20,559
AWS that I don't think a lot of people

00:22:17,080 --> 00:22:21,909
are aware of and that is if you're near

00:22:20,559 --> 00:22:25,270
one of their data centers you can just

00:22:21,909 --> 00:22:27,430
plug into e to AWS we literally have a

00:22:25,270 --> 00:22:32,170
believes our data center and goes to AWS

00:22:27,430 --> 00:22:34,960
and it's very very fast and you don't

00:22:32,170 --> 00:22:36,670
pay bandwidth over that link so AWS is

00:22:34,960 --> 00:22:39,310
pricing model generally speaking is

00:22:36,670 --> 00:22:41,140
based in part on how much bandwidth goes

00:22:39,310 --> 00:22:43,300
in and out of those services with direct

00:22:41,140 --> 00:22:44,980
connect you don't pay that and so we

00:22:43,300 --> 00:22:46,750
don't pay for transfer in and out of s3

00:22:44,980 --> 00:22:50,980
we only pay for storage that's really

00:22:46,750 --> 00:22:52,960
cool but the the super awesome thing for

00:22:50,980 --> 00:22:58,780
us is that it gives us a direct

00:22:52,960 --> 00:23:03,010
connection to RV pcs which effectively

00:22:58,780 --> 00:23:05,290
means that we have ec2 in our data

00:23:03,010 --> 00:23:07,630
center the the latency is as though it

00:23:05,290 --> 00:23:10,120
was just down the hall because it is

00:23:07,630 --> 00:23:12,190
effectively just down the hall and the

00:23:10,120 --> 00:23:15,610
but we have all the elasticity that you

00:23:12,190 --> 00:23:18,460
have of ec2 but in our private network

00:23:15,610 --> 00:23:20,200
space and isolated from the rest of

00:23:18,460 --> 00:23:26,860
their network Direct Connect is super

00:23:20,200 --> 00:23:30,730
super cool so we also use Heroku as I

00:23:26,860 --> 00:23:32,950
mentioned and I have to apologize that I

00:23:30,730 --> 00:23:35,650
don't have a lot of details on Heroku I

00:23:32,950 --> 00:23:36,760
kind of got shut down at the last second

00:23:35,650 --> 00:23:42,250
on some of the stuff I wanted to share

00:23:36,760 --> 00:23:44,080
and then also ran out of time but we

00:23:42,250 --> 00:23:45,400
love Heroku we think it's awesome like I

00:23:44,080 --> 00:23:47,650
said a lot of our ops group came from

00:23:45,400 --> 00:23:50,110
Heroku and we've got a lot of people who

00:23:47,650 --> 00:23:52,210
got their start a lot of engineers at

00:23:50,110 --> 00:23:54,760
github got their start as consultants or

00:23:52,210 --> 00:23:55,960
working at startups who worked on Heroku

00:23:54,760 --> 00:23:58,780
and pretty much everyone has really fond

00:23:55,960 --> 00:24:01,570
memories of it it's way cheaper than

00:23:58,780 --> 00:24:03,460
running stuff on ec2 unless you get up

00:24:01,570 --> 00:24:06,430
to the really really big databases and

00:24:03,460 --> 00:24:08,890
huge dyna counts it is massively

00:24:06,430 --> 00:24:10,480
massively cheaper to run applications on

00:24:08,890 --> 00:24:13,660
heroku than it is to create instances

00:24:10,480 --> 00:24:15,160
uneasy to the operational overhead is

00:24:13,660 --> 00:24:17,950
way lower as well and this is a huge win

00:24:15,160 --> 00:24:20,710
for me personally managing all these

00:24:17,950 --> 00:24:22,690
applications if I had to manage three to

00:24:20,710 --> 00:24:26,770
five servers for each of 150

00:24:22,690 --> 00:24:27,940
applications I would quit my job but I'm

00:24:26,770 --> 00:24:29,800
happy because it's on Heroku someone

00:24:27,940 --> 00:24:32,740
else gets paid to do that their support

00:24:29,800 --> 00:24:36,400
is awesome we just email haruka support

00:24:32,740 --> 00:24:38,590
and they'll get on it it's not all great

00:24:36,400 --> 00:24:39,110
of course one of the big problems we

00:24:38,590 --> 00:24:43,190
faced with her

00:24:39,110 --> 00:24:46,460
roku is that when there's an outage we

00:24:43,190 --> 00:24:48,020
can't necessarily fix it directly most

00:24:46,460 --> 00:24:49,610
of the time those outages are with

00:24:48,020 --> 00:24:51,049
add-on providers and not with Heroku

00:24:49,610 --> 00:24:53,750
themselves her okies platform is

00:24:51,049 --> 00:24:55,670
generally incredibly stable but a lot of

00:24:53,750 --> 00:24:58,940
the times the add-on providers will not

00:24:55,670 --> 00:25:00,140
be so stable and a lot of our internal

00:24:58,940 --> 00:25:01,429
applications because they've just meant

00:25:00,140 --> 00:25:04,010
for internal use they're not built with

00:25:01,429 --> 00:25:06,110
you know production level resiliency and

00:25:04,010 --> 00:25:07,970
so if elasticsearch goes down the whole

00:25:06,110 --> 00:25:11,299
thing stops working and elastic search

00:25:07,970 --> 00:25:15,440
for us goes down a lot so that's one of

00:25:11,299 --> 00:25:17,510
the big problems we have one of the big

00:25:15,440 --> 00:25:20,059
upsides though is that because hirokh

00:25:17,510 --> 00:25:21,860
who's interface is all command line and

00:25:20,059 --> 00:25:23,870
get pushed driven get is something we

00:25:21,860 --> 00:25:25,580
understand really well command lines are

00:25:23,870 --> 00:25:27,830
something we understand really well it's

00:25:25,580 --> 00:25:30,559
super easy to chat ops Heroku and so

00:25:27,830 --> 00:25:32,960
we've done it so if you want to create

00:25:30,559 --> 00:25:34,370
an application you just in chat you just

00:25:32,960 --> 00:25:36,440
say here I could create and whatever the

00:25:34,370 --> 00:25:40,460
name is this Heroku ssl thing is stupid

00:25:36,440 --> 00:25:41,750
that's going away so ignore it right the

00:25:40,460 --> 00:25:45,320
way it is right now is that we don't set

00:25:41,750 --> 00:25:46,880
up dns or the ssl endpoint when you

00:25:45,320 --> 00:25:49,400
create an application you have to issue

00:25:46,880 --> 00:25:51,650
a second command what we realized after

00:25:49,400 --> 00:25:53,330
we built this was that you literally do

00:25:51,650 --> 00:25:54,380
this every single time you do this and

00:25:53,330 --> 00:25:57,110
so there's no point in having to be

00:25:54,380 --> 00:26:01,809
separate I just it's like I don't have

00:25:57,110 --> 00:26:04,160
that much time you can look at your lugs

00:26:01,809 --> 00:26:06,919
this also has a way that you can

00:26:04,160 --> 00:26:09,410
effectively grep this you say Heroku

00:26:06,919 --> 00:26:11,120
logs the app name and then a pipe and

00:26:09,410 --> 00:26:14,120
the pattern that you're looking for and

00:26:11,120 --> 00:26:17,900
it will basically just grip through this

00:26:14,120 --> 00:26:20,480
and only returned matching ones you can

00:26:17,900 --> 00:26:22,850
Heroku PS all day long you can get this

00:26:20,480 --> 00:26:25,820
you can scale up and down your your Dino

00:26:22,850 --> 00:26:29,929
counts and then you can also scale it

00:26:25,820 --> 00:26:34,070
2-0 if you want and then I guess you

00:26:29,929 --> 00:26:35,600
can't delete you can't delete Heroku

00:26:34,070 --> 00:26:37,460
apps to this yet because that's like

00:26:35,600 --> 00:26:39,230
this one of those things where we we

00:26:37,460 --> 00:26:41,690
don't allow decommissioning of physical

00:26:39,230 --> 00:26:45,740
servers in the data center we do allow

00:26:41,690 --> 00:26:46,640
decommissioning of ec2 instances but

00:26:45,740 --> 00:26:47,929
only because there's no critical

00:26:46,640 --> 00:26:50,960
infrastructure that runs there right now

00:26:47,929 --> 00:26:51,900
but we don't allow through chat anyway

00:26:50,960 --> 00:26:54,920
decommissioning

00:26:51,900 --> 00:27:03,420
apps which is a deliberate choice and

00:26:54,920 --> 00:27:04,410
then you can run commands like Rick the

00:27:03,420 --> 00:27:07,350
thing about Heroku though is that

00:27:04,410 --> 00:27:12,390
they're postgres and we are a MySQL show

00:27:07,350 --> 00:27:15,480
and this is not super super handy there

00:27:12,390 --> 00:27:19,890
are mysql add-ons for Heroku i have not

00:27:15,480 --> 00:27:21,690
had good luck with any of them so the

00:27:19,890 --> 00:27:23,310
policy that we have is that the

00:27:21,690 --> 00:27:25,440
developers are largely responsible for

00:27:23,310 --> 00:27:26,730
their own database and so if you're

00:27:25,440 --> 00:27:28,200
running on Heroku and you're comfortable

00:27:26,730 --> 00:27:30,810
with postgres feel free to use it I

00:27:28,200 --> 00:27:33,630
personally am a postgres guy i am happy

00:27:30,810 --> 00:27:36,440
to support my developers using postgres

00:27:33,630 --> 00:27:38,490
all day long but because as a

00:27:36,440 --> 00:27:40,440
organization all of our expertise is in

00:27:38,490 --> 00:27:42,930
MySQL a lot of developers want to stick

00:27:40,440 --> 00:27:44,610
with that so what we tend to do in those

00:27:42,930 --> 00:27:46,860
cases is we tend to put them on RDS

00:27:44,610 --> 00:27:48,870
rather than using the add-on providers

00:27:46,860 --> 00:27:50,460
because we have a lot of tooling around

00:27:48,870 --> 00:27:53,070
RDS already because we use it elsewhere

00:27:50,460 --> 00:27:54,690
all that like the cloud ews stuff I was

00:27:53,070 --> 00:27:56,430
showing you earlier everything you can

00:27:54,690 --> 00:27:59,220
do for an ec2 instance you can also do

00:27:56,430 --> 00:28:01,350
for an RDS instance so we have tooling

00:27:59,220 --> 00:28:03,510
around that and it just didn't make a

00:28:01,350 --> 00:28:06,720
lot of sense for us to invest in

00:28:03,510 --> 00:28:08,880
building another set of tools for

00:28:06,720 --> 00:28:10,470
add-ons when we could just use RDS

00:28:08,880 --> 00:28:17,010
except that it's quite a bit more

00:28:10,470 --> 00:28:19,440
expensive but we do that so I'm out of

00:28:17,010 --> 00:28:20,610
time that was a brief overview that I

00:28:19,440 --> 00:28:24,740
intended but I hope that it was a little

00:28:20,610 --> 00:28:24,740

YouTube URL: https://www.youtube.com/watch?v=8TYfPhFSZFs


