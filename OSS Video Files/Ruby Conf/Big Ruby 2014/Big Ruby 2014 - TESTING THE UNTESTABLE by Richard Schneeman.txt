Title: Big Ruby 2014 - TESTING THE UNTESTABLE by Richard Schneeman
Publication date: 2020-01-24
Playlist: Big Ruby 2014
Description: 
	Good tests are isolatable, repeatable and deterministic. Good tests don't touch the network and are flexible when it comes to change. Bad tests are all of the above. Bad tests are no tests at all - which is where I found myself with a 5 year legacy codebase running in production and touching millions of customers with minimal use-case documentation. We'll cover this experience and several like it while digging into how to go from zero to total test coverage as painlessly as possible. You will learn how to stay sane in the face of insane testing conditions and how to use these tests to deconstruct a monolith app. When life gives you a big ball of mud, write a big ball of tests.

Help us caption & translate this video!

http://amara.org/v/FG3m/
Captions: 
	00:00:19,960 --> 00:00:27,770
hello hello hello there I'm going to

00:00:25,460 --> 00:00:31,310
test my mic which is apparently testable

00:00:27,770 --> 00:00:34,280
um so I before right before I get

00:00:31,310 --> 00:00:37,100
started of course it was mentioned

00:00:34,280 --> 00:00:40,850
earlier this morning about Jim I just

00:00:37,100 --> 00:00:42,320
wanted to take a moment and I I got to

00:00:40,850 --> 00:00:45,560
meet Jim I was lucky enough to meet him

00:00:42,320 --> 00:00:47,690
a number of times and one of my favorite

00:00:45,560 --> 00:00:50,449
testing talks of all time is actually

00:00:47,690 --> 00:00:53,210
from gym where he from scratch on

00:00:50,449 --> 00:00:55,910
onstage like basically kind of built

00:00:53,210 --> 00:00:58,910
rake from nothing using a test driven

00:00:55,910 --> 00:01:01,070
approach so was a big fan of testing and

00:00:58,910 --> 00:01:04,390
I like to think that he might have

00:01:01,070 --> 00:01:08,810
enjoyed my testing the untestable talk

00:01:04,390 --> 00:01:11,750
so if you don't know me my name is

00:01:08,810 --> 00:01:15,350
Richard schneemann or on the Internet I

00:01:11,750 --> 00:01:19,010
go by shames so I'm actually literally

00:01:15,350 --> 00:01:22,369
married to Ruby this is my wife her her

00:01:19,010 --> 00:01:23,810
name her name is Ruby so something

00:01:22,369 --> 00:01:26,659
something interesting is happening

00:01:23,810 --> 00:01:29,600
though recently she has actually become

00:01:26,659 --> 00:01:31,970
a Python developer where whereas I am a

00:01:29,600 --> 00:01:34,280
ruby developer which is a somewhat

00:01:31,970 --> 00:01:36,290
interesting it's okay though she does

00:01:34,280 --> 00:01:39,049
know how to how to program in Ruby and

00:01:36,290 --> 00:01:42,680
she does all the time say like man only

00:01:39,049 --> 00:01:44,840
this thing was written in rails so as

00:01:42,680 --> 00:01:48,619
you can tell by the hat and the sandals

00:01:44,840 --> 00:01:50,420
that i am from from austin it's a it's

00:01:48,619 --> 00:01:52,329
like right down the road three hours

00:01:50,420 --> 00:01:54,079
great city highly recommend you visit

00:01:52,329 --> 00:01:57,439
there's a little bit of a rivalry

00:01:54,079 --> 00:01:59,570
between austin and dallas mostly because

00:01:57,439 --> 00:02:01,520
like awesome as the cool music scene and

00:01:59,570 --> 00:02:06,259
dallas has like the biggest airport

00:02:01,520 --> 00:02:08,330
known to mankind so you know i was like

00:02:06,259 --> 00:02:11,720
looking for some like I'm like I'm gonna

00:02:08,330 --> 00:02:13,760
Simon's ingham a dallas material and i

00:02:11,720 --> 00:02:16,720
was just googling for things randomly

00:02:13,760 --> 00:02:16,720
and i found

00:02:18,760 --> 00:02:23,330
notice i am actually an incognito window

00:02:21,379 --> 00:02:26,470
this is not like a personalized result

00:02:23,330 --> 00:02:32,900
that i just searched that a bunch so uh

00:02:26,470 --> 00:02:35,720
yeah i thought that was fun a little bit

00:02:32,900 --> 00:02:38,269
of my backstory i'm actually up from

00:02:35,720 --> 00:02:40,730
from georgia tech her i graduated from

00:02:38,269 --> 00:02:42,650
Georgia Tech where I studied mechanical

00:02:40,730 --> 00:02:46,250
engineering not saying that I was a very

00:02:42,650 --> 00:02:47,930
self-centered person and studied me so I

00:02:46,250 --> 00:02:49,640
actually don't have them have a computer

00:02:47,930 --> 00:02:51,470
science degree so I kind of think maybe

00:02:49,640 --> 00:02:53,060
a little bit differently from some of

00:02:51,470 --> 00:02:54,829
you in the room and one of the things I

00:02:53,060 --> 00:02:57,290
love in studying mechanical engineering

00:02:54,829 --> 00:03:01,370
is thermodynamics does anybody like

00:02:57,290 --> 00:03:04,160
thermodynamics whoo yeah like it's an

00:03:01,370 --> 00:03:05,780
amazing study and one thing that I

00:03:04,160 --> 00:03:07,819
thought well I'm taking some these

00:03:05,780 --> 00:03:09,530
thermodynamics test is like okay we have

00:03:07,819 --> 00:03:11,840
an answer key like if I screw something

00:03:09,530 --> 00:03:14,269
up it's fine I can just check the answer

00:03:11,840 --> 00:03:15,709
key and like go back and like there's

00:03:14,269 --> 00:03:18,920
always a way to kind of check your work

00:03:15,709 --> 00:03:20,720
it like have have you ever been doing

00:03:18,920 --> 00:03:23,090
homework or any kind of work and like

00:03:20,720 --> 00:03:25,190
flip the sign on something like there's

00:03:23,090 --> 00:03:27,799
a really big difference between those

00:03:25,190 --> 00:03:29,810
two numbers and when you're in school it

00:03:27,799 --> 00:03:32,420
kind of seems really trivial but in the

00:03:29,810 --> 00:03:34,819
real world like how you actually get

00:03:32,420 --> 00:03:37,849
around that there's no answer key

00:03:34,819 --> 00:03:40,400
there's no uh there's no like you know

00:03:37,849 --> 00:03:41,959
sorry you flip the sign here like Pete

00:03:40,400 --> 00:03:45,169
there are real world come like

00:03:41,959 --> 00:03:48,109
consequences so with this in mind I went

00:03:45,169 --> 00:03:49,700
into my first my first co-op job where I

00:03:48,109 --> 00:03:51,709
worked for a company you may or may not

00:03:49,700 --> 00:03:54,290
have heard of called General Electric

00:03:51,709 --> 00:03:57,319
and I actually helped build

00:03:54,290 --> 00:04:00,799
refrigerators so this is not a model of

00:03:57,319 --> 00:04:02,150
refrigerator than I hope to build this

00:04:00,799 --> 00:04:04,549
was maybe a little bit before my time

00:04:02,150 --> 00:04:06,169
still probably runs those does anybody

00:04:04,549 --> 00:04:07,609
have any idea of like how you would

00:04:06,169 --> 00:04:12,859
begin to start designing your

00:04:07,609 --> 00:04:15,230
refrigerator anybody math that's that's

00:04:12,859 --> 00:04:18,560
pretty good so I'm here to tell you that

00:04:15,230 --> 00:04:20,840
the the like mega billion-dollar

00:04:18,560 --> 00:04:23,960
corporation has decided the best tool

00:04:20,840 --> 00:04:26,010
for this job is spreadsheets

00:04:23,960 --> 00:04:28,020
some of the smartest mechanical

00:04:26,010 --> 00:04:30,780
engineers in the my like in the world

00:04:28,020 --> 00:04:32,700
have come together and like you you

00:04:30,780 --> 00:04:34,290
basically input all these dimensions and

00:04:32,700 --> 00:04:36,030
it spits out it says like okay this is

00:04:34,290 --> 00:04:37,080
your efficiency this is this is how it's

00:04:36,030 --> 00:04:39,900
going to behave how it's going to

00:04:37,080 --> 00:04:41,550
perform but okay still like what if

00:04:39,900 --> 00:04:43,200
these spreadsheets are just wrong like

00:04:41,550 --> 00:04:44,580
what if you entered the wrong thing or

00:04:43,200 --> 00:04:47,100
like what if the calculations are just

00:04:44,580 --> 00:04:49,140
wrong and and with this in mind I was

00:04:47,100 --> 00:04:52,710
just kind of my mind's just going and

00:04:49,140 --> 00:04:54,630
finally I come across testing believe it

00:04:52,710 --> 00:04:56,490
or not like it's like oh hey that kind

00:04:54,630 --> 00:04:58,320
of makes sense they calculate all of

00:04:56,490 --> 00:05:00,060
these things and then they actually wire

00:04:58,320 --> 00:05:01,260
up the refrigerators with thermocouples

00:05:00,060 --> 00:05:02,820
stick them in a room with the known

00:05:01,260 --> 00:05:06,630
temperature and see how they perform

00:05:02,820 --> 00:05:08,340
like did this matchup so in a lot of

00:05:06,630 --> 00:05:10,980
ways programmers are really really lucky

00:05:08,340 --> 00:05:13,830
we are working with programs that's

00:05:10,980 --> 00:05:15,870
that's the thing that we output we have

00:05:13,830 --> 00:05:18,750
relatively known inputs relatively known

00:05:15,870 --> 00:05:20,550
outputs the product is a program and we

00:05:18,750 --> 00:05:23,250
actually can testify programs which is

00:05:20,550 --> 00:05:24,780
like I mean imagine if you could test

00:05:23,250 --> 00:05:26,580
your refrigerator with a refrigerator

00:05:24,780 --> 00:05:28,500
you just put like mini refrigerators in

00:05:26,580 --> 00:05:32,340
the refrigerator like I don't even know

00:05:28,500 --> 00:05:34,170
how that would work so you know others

00:05:32,340 --> 00:05:36,660
of course refrigerators aren't so lucky

00:05:34,170 --> 00:05:39,720
uh I think a really good example is in

00:05:36,660 --> 00:05:42,020
the 1960s we made the commitment to go

00:05:39,720 --> 00:05:44,340
to the moon which is pretty cool and

00:05:42,020 --> 00:05:50,670
some of you might know that outer space

00:05:44,340 --> 00:05:54,350
is a lifeless vacuum this type of a

00:05:50,670 --> 00:05:58,500
lifeless vacuum it was I could resist

00:05:54,350 --> 00:06:00,990
and in this scenario unity you're not

00:05:58,500 --> 00:06:04,080
worrying about is my is my bacon gonna

00:06:00,990 --> 00:06:06,120
be bad like is my butter gonna melt like

00:06:04,080 --> 00:06:09,000
you have real people's lives on the line

00:06:06,120 --> 00:06:11,850
like you know how do we know that are

00:06:09,000 --> 00:06:14,640
all of our calculations are correct like

00:06:11,850 --> 00:06:17,130
in this kind of a scenario like you

00:06:14,640 --> 00:06:19,410
really really really have to have to

00:06:17,130 --> 00:06:21,470
take care and this is this is almost

00:06:19,410 --> 00:06:24,390
like at least in my mind kind of an

00:06:21,470 --> 00:06:28,170
untestable scenario where it's like all

00:06:24,390 --> 00:06:30,060
right we can't just put a spaceship

00:06:28,170 --> 00:06:31,740
inside of our spaceship and like it just

00:06:30,060 --> 00:06:32,790
doesn't work so they kind of came up

00:06:31,740 --> 00:06:33,750
with this idea all right we're gonna

00:06:32,790 --> 00:06:34,409
we're going to take all of these

00:06:33,750 --> 00:06:35,789
individual

00:06:34,409 --> 00:06:38,009
and we're going to hook them up to these

00:06:35,789 --> 00:06:40,169
stands and you know what we've got this

00:06:38,009 --> 00:06:42,059
engine it straps onto our rocket and

00:06:40,169 --> 00:06:43,199
it's supposed to behave like this so

00:06:42,059 --> 00:06:45,269
we're actually going to put a real

00:06:43,199 --> 00:06:48,269
engine on to a real stand we're going to

00:06:45,269 --> 00:06:50,489
you know really like basically set it on

00:06:48,269 --> 00:06:51,679
fire more or less and like make sure

00:06:50,489 --> 00:06:53,849
that it does what it's supposed to do

00:06:51,679 --> 00:06:55,559
and so this is this is like a really

00:06:53,849 --> 00:06:57,300
good start but at the end of the day it

00:06:55,559 --> 00:06:59,209
still kind of doesn't get us where we

00:06:57,300 --> 00:07:02,489
need to be we still don't know okay it

00:06:59,209 --> 00:07:03,569
is everything built correctly so at the

00:07:02,489 --> 00:07:06,509
end of the day you actually have to

00:07:03,569 --> 00:07:11,579
launch it you actually have to you know

00:07:06,509 --> 00:07:14,699
send something into space for maybe PR

00:07:11,579 --> 00:07:20,789
or whatnot and this is very much akin to

00:07:14,699 --> 00:07:23,119
an integration test so kind of relating

00:07:20,789 --> 00:07:25,529
this and taking this back to software I

00:07:23,119 --> 00:07:28,699
work for a company called Heroku is

00:07:25,529 --> 00:07:31,739
anybody familiar with the company Heroku

00:07:28,699 --> 00:07:34,229
okay I say that but like I talked to

00:07:31,739 --> 00:07:39,539
like Java programmer sometimes they're

00:07:34,229 --> 00:07:41,399
like hero what ok so at / oq I work on

00:07:39,539 --> 00:07:43,740
something called the Ruby task force and

00:07:41,399 --> 00:07:50,099
that of course means that I am in fact a

00:07:43,740 --> 00:07:51,719
ruby task force member we have groovy

00:07:50,099 --> 00:07:54,899
task force meetings Ruby task force

00:07:51,719 --> 00:07:57,209
managers yes lots of so uh really

00:07:54,899 --> 00:08:06,329
quickly can anybody named this year just

00:07:57,209 --> 00:08:09,769
like shout it out okay smart alecks all

00:08:06,329 --> 00:08:17,129
right we got Juno no country for old men

00:08:09,769 --> 00:08:19,050
superbad Heroku Aspen stack the launch

00:08:17,129 --> 00:08:20,969
of Heroku okay so this was this was two

00:08:19,050 --> 00:08:22,050
thousand seven unless I miss googled and

00:08:20,969 --> 00:08:25,169
some of those actually came out in a

00:08:22,050 --> 00:08:26,939
different year but going back to 2007

00:08:25,169 --> 00:08:29,550
was the year that Pirozhki first started

00:08:26,939 --> 00:08:31,529
and that is also where the software that

00:08:29,550 --> 00:08:35,909
I'm now working on first got its roots

00:08:31,529 --> 00:08:39,029
it was introduced in 2007 and is now

00:08:35,909 --> 00:08:40,680
known as a build pack so what is a bill

00:08:39,029 --> 00:08:43,169
Peck you might ask whenever you're using

00:08:40,680 --> 00:08:45,449
Roku you might do something like say git

00:08:43,169 --> 00:08:46,870
push ruku master and that sends your

00:08:45,449 --> 00:08:49,450
code up to our system

00:08:46,870 --> 00:08:51,160
we say okay you know do you have a gem

00:08:49,450 --> 00:08:52,720
file if so we're gonna actually use the

00:08:51,160 --> 00:08:54,370
Ruby build pack and then all of that

00:08:52,720 --> 00:08:56,950
stuff that flies on your screen the

00:08:54,370 --> 00:09:00,850
bundle install the assets the like

00:08:56,950 --> 00:09:03,070
that's basically all it does but so

00:09:00,850 --> 00:09:05,470
that's all that's all the Ruby build

00:09:03,070 --> 00:09:07,680
pack and this kind of sounds really

00:09:05,470 --> 00:09:10,540
simple on the surface but like it is

00:09:07,680 --> 00:09:12,610
just like edge cases on top of edge

00:09:10,540 --> 00:09:17,320
cases on top of edge cases we support

00:09:12,610 --> 00:09:23,589
you know 187 192 193 202 that one jruby

00:09:17,320 --> 00:09:27,640
like just a rails rack uh whatever you

00:09:23,589 --> 00:09:30,720
want really and as of January 2013 it

00:09:27,640 --> 00:09:36,610
had exactly I know for a fact exactly

00:09:30,720 --> 00:09:40,390
zero tests not like plus or minus i'm

00:09:36,610 --> 00:09:44,230
i'm i'm pretty sure this is a knowable

00:09:40,390 --> 00:09:49,060
number okay and like before you freak

00:09:44,230 --> 00:09:51,459
out you're like uh okay it was tested it

00:09:49,060 --> 00:09:57,100
was just maybe a little bit manual of a

00:09:51,459 --> 00:10:00,910
process so i got i got involved in in

00:09:57,100 --> 00:10:03,550
writing tests about or wanted to to

00:10:00,910 --> 00:10:09,250
write some of these a couple years ago

00:10:03,550 --> 00:10:14,290
and the main reason was we had quite a

00:10:09,250 --> 00:10:16,900
few MVPs and in this scenario MVP stands

00:10:14,290 --> 00:10:20,170
for minimum viable patch it's not

00:10:16,900 --> 00:10:22,450
product or like valuable player and what

00:10:20,170 --> 00:10:25,180
what a Minimum Viable patches it's the

00:10:22,450 --> 00:10:26,890
smallest piece of code that will allow

00:10:25,180 --> 00:10:28,209
your program to work so you have a bug

00:10:26,890 --> 00:10:30,160
you have an issue you need a feature

00:10:28,209 --> 00:10:32,200
like how can I get this thing to work in

00:10:30,160 --> 00:10:34,300
the smallest amount of code and why do I

00:10:32,200 --> 00:10:36,220
do that because you know I don't want to

00:10:34,300 --> 00:10:38,230
break anything like if i change the

00:10:36,220 --> 00:10:39,970
least amount of lines if i introduce the

00:10:38,230 --> 00:10:41,440
least amount of code i have the least

00:10:39,970 --> 00:10:44,140
chance that i'm going to break something

00:10:41,440 --> 00:10:45,220
or affect this other feature or like you

00:10:44,140 --> 00:10:47,110
know all of these other things so you

00:10:45,220 --> 00:10:49,029
kind of just like every time you deploy

00:10:47,110 --> 00:10:50,380
like sure you do your manual testing you

00:10:49,029 --> 00:10:53,860
kind of just cross your fingers and like

00:10:50,380 --> 00:10:55,520
hope and so the MVP is not really

00:10:53,860 --> 00:10:57,860
maintainable or Fleck

00:10:55,520 --> 00:11:02,240
ssible uh definitely ends up not being

00:10:57,860 --> 00:11:04,130
the fastest code and like they at first

00:11:02,240 --> 00:11:05,570
they're kind of nice and you're like oh

00:11:04,130 --> 00:11:07,130
this is great this is super small I'm

00:11:05,570 --> 00:11:10,010
just gonna like fix this fix this fix

00:11:07,130 --> 00:11:11,690
this this this this and eventually your

00:11:10,010 --> 00:11:13,520
code just becomes really difficult to

00:11:11,690 --> 00:11:15,050
work with it's not really architected

00:11:13,520 --> 00:11:18,920
it's just kind of odds almost

00:11:15,050 --> 00:11:21,650
coincidental how things work so if you

00:11:18,920 --> 00:11:23,930
guess to the cure for the MVP by the

00:11:21,650 --> 00:11:28,820
topic of the day is actually going to be

00:11:23,930 --> 00:11:30,980
testing as well as refactoring so has

00:11:28,820 --> 00:11:33,560
anybody encountered a book by Michael

00:11:30,980 --> 00:11:35,810
feathers the name of working with legacy

00:11:33,560 --> 00:11:38,270
code okay fantastic book I recommend

00:11:35,810 --> 00:11:39,620
this it's like it will totally put you

00:11:38,270 --> 00:11:44,540
to sleep as you're reading it but the

00:11:39,620 --> 00:11:46,040
information is amazing so in the book

00:11:44,540 --> 00:11:47,720
they kind of talk a little bit about

00:11:46,040 --> 00:11:49,970
something called black box testing and

00:11:47,720 --> 00:11:51,530
they actually do this in all ways of

00:11:49,970 --> 00:11:54,860
life it's not just it's not just

00:11:51,530 --> 00:11:56,870
programming but you have a set of inputs

00:11:54,860 --> 00:11:59,030
and you know your set of inputs and then

00:11:56,870 --> 00:12:00,890
you have a set of outputs like you said

00:11:59,030 --> 00:12:02,570
you say I know if I put this in I get

00:12:00,890 --> 00:12:04,790
this output as long as this input

00:12:02,570 --> 00:12:08,690
produces this output I really don't care

00:12:04,790 --> 00:12:12,020
how it works as long as that is that

00:12:08,690 --> 00:12:14,450
that's just what happens so with this in

00:12:12,020 --> 00:12:16,580
mind like how do we actually actually go

00:12:14,450 --> 00:12:19,820
about testing these this bill pack it's

00:12:16,580 --> 00:12:23,060
not like a rails framework that we can

00:12:19,820 --> 00:12:25,220
just you know have built-in functions

00:12:23,060 --> 00:12:26,990
and like fixtures and everything just

00:12:25,220 --> 00:12:30,350
kind of nicely packaged together for us

00:12:26,990 --> 00:12:32,990
so we decided that that the way to do

00:12:30,350 --> 00:12:36,020
this was to actually take real Ruby apps

00:12:32,990 --> 00:12:38,420
and actually really deploy them to

00:12:36,020 --> 00:12:40,430
Heroku as opposed to just kind of like

00:12:38,420 --> 00:12:43,160
faking everything trying to try and run

00:12:40,430 --> 00:12:45,800
everything locally as a way of saying

00:12:43,160 --> 00:12:47,990
like okay this this is actually our

00:12:45,800 --> 00:12:50,000
launching into space like we actually

00:12:47,990 --> 00:12:51,710
have to do all of these things because

00:12:50,000 --> 00:12:55,000
there's really no other way for us to

00:12:51,710 --> 00:12:57,980
verify and be confident in our program

00:12:55,000 --> 00:12:59,900
so in order to do this I ended up

00:12:57,980 --> 00:13:03,140
creating a really small framework I

00:12:59,900 --> 00:13:04,339
called hatchet because Heroku starts

00:13:03,140 --> 00:13:08,059
with an H

00:13:04,339 --> 00:13:09,980
it hacks together tests it's also Heroku

00:13:08,059 --> 00:13:12,709
hatchet on rubygems with his hatchet was

00:13:09,980 --> 00:13:16,100
already taken it's a it's tragic i know

00:13:12,709 --> 00:13:17,839
but the premise is really simple so

00:13:16,100 --> 00:13:19,370
we're going to clone a repo we're going

00:13:17,839 --> 00:13:23,300
to create a pro coo app and we're going

00:13:19,370 --> 00:13:26,209
to deploy it to Heroku in this process

00:13:23,300 --> 00:13:29,209
in our black box testing we've got that

00:13:26,209 --> 00:13:31,249
the git repo is actually our input

00:13:29,209 --> 00:13:33,050
that's our known input we can also set

00:13:31,249 --> 00:13:36,709
configuration variables and you know do

00:13:33,050 --> 00:13:39,589
a couple other things labs features but

00:13:36,709 --> 00:13:41,389
our our output is going to be our deploy

00:13:39,589 --> 00:13:43,189
log this is what you see whenever you do

00:13:41,389 --> 00:13:45,970
get pushed a ruger master this is also

00:13:43,189 --> 00:13:48,189
going to be whatever you see when you do

00:13:45,970 --> 00:13:53,240
Heroku run which is actually really cool

00:13:48,189 --> 00:13:54,589
has anybody ever run Luke run bash okay

00:13:53,240 --> 00:13:56,300
that's awesome there's like a lot of

00:13:54,589 --> 00:13:58,430
hands for everybody whose hands weren't

00:13:56,300 --> 00:14:01,309
up assuming you all know and love and

00:13:58,430 --> 00:14:03,620
use for roku all the time Heroku run

00:14:01,309 --> 00:14:04,999
bash is like absolutely amazing I didn't

00:14:03,620 --> 00:14:07,189
know about it before I started to Roku

00:14:04,999 --> 00:14:08,720
and so I try to tell like everybody you

00:14:07,189 --> 00:14:10,670
could just do Heroku run bash and it

00:14:08,720 --> 00:14:12,980
puts you into basically a shell session

00:14:10,670 --> 00:14:14,809
inside of a new Dino so if you're like

00:14:12,980 --> 00:14:16,670
hey I wonder if this file got generated

00:14:14,809 --> 00:14:18,679
or like I wonder if my assets worked or

00:14:16,670 --> 00:14:20,569
like I wonder if I can like run this

00:14:18,679 --> 00:14:23,269
command it's like you can totally just

00:14:20,569 --> 00:14:25,370
do that so it's super simple also a

00:14:23,269 --> 00:14:29,899
while i'm on a sidebar is anybody not

00:14:25,370 --> 00:14:34,459
using Ruby 21 okay I didn't see any

00:14:29,899 --> 00:14:36,290
hands at all which is amazing tell all

00:14:34,459 --> 00:14:38,839
of your friends how insanely fast it is

00:14:36,290 --> 00:14:42,110
if you look at the the rail / rails test

00:14:38,839 --> 00:14:44,569
suite like no joke on Travis Ruby from

00:14:42,110 --> 00:14:47,269
Ruby 2022 dot 1 it's like twenty-five

00:14:44,569 --> 00:14:50,149
percent faster just like that's in exact

00:14:47,269 --> 00:14:53,389
same code I highly recommend to da one

00:14:50,149 --> 00:14:56,509
so okay back to back to the testing in

00:14:53,389 --> 00:14:57,889
order to accomplish this Heroku run bash

00:14:56,509 --> 00:14:59,589
functionality I actually needed

00:14:57,889 --> 00:15:02,809
something that could drive interactive

00:14:59,589 --> 00:15:04,790
interactive shells and ended up needing

00:15:02,809 --> 00:15:07,189
to write a piece software i ended up

00:15:04,790 --> 00:15:09,649
calling repple runner and what this will

00:15:07,189 --> 00:15:10,730
allow you to do is have kind of a block

00:15:09,649 --> 00:15:13,309
of code like this where you can

00:15:10,730 --> 00:15:14,150
instantiate just sort of a console

00:15:13,309 --> 00:15:15,680
session

00:15:14,150 --> 00:15:17,330
and then actually programmatically run

00:15:15,680 --> 00:15:19,850
it so here we're opening up rails

00:15:17,330 --> 00:15:21,290
console and then we are saying it's

00:15:19,850 --> 00:15:24,590
almost as if you're typing in quote

00:15:21,290 --> 00:15:28,250
hello + quote world and then we can

00:15:24,590 --> 00:15:32,390
expect the result to be the concatenated

00:15:28,250 --> 00:15:35,780
string hello world so it like it looks

00:15:32,390 --> 00:15:37,190
really simple but so anyway this this

00:15:35,780 --> 00:15:40,820
was a way that we were able to actually

00:15:37,190 --> 00:15:42,590
not only launch our applications but do

00:15:40,820 --> 00:15:44,360
things like verify is the correct

00:15:42,590 --> 00:15:45,890
version of Ruby installed are these

00:15:44,360 --> 00:15:48,980
files that we expected to be generated

00:15:45,890 --> 00:15:51,560
actually generated like this is in the

00:15:48,980 --> 00:15:53,270
real world if if you say I want Ruby to

00:15:51,560 --> 00:15:55,010
dot one and then you don't end up

00:15:53,270 --> 00:15:58,130
getting Ruby two dot one like that is

00:15:55,010 --> 00:15:59,780
going to give you a bad day and like

00:15:58,130 --> 00:16:01,420
that should cause a test to fail so we

00:15:59,780 --> 00:16:05,090
needed a way to be able to reliably

00:16:01,420 --> 00:16:06,800
reliably check that so yeah this this

00:16:05,090 --> 00:16:09,950
actually looks really insanely simple

00:16:06,800 --> 00:16:13,130
but uh whenever you're programmatically

00:16:09,950 --> 00:16:15,200
like talking to interactive sessions

00:16:13,130 --> 00:16:20,810
like you deal with process deadlock and

00:16:15,200 --> 00:16:23,810
it's like so not fun okay so in this

00:16:20,810 --> 00:16:26,090
scenario I was actually using I had like

00:16:23,810 --> 00:16:28,190
a rails 3 app and you might be like okay

00:16:26,090 --> 00:16:30,020
where did that come from we actually

00:16:28,190 --> 00:16:33,100
have a giant collection it's just a

00:16:30,020 --> 00:16:38,540
repository github.com / sharp stone and

00:16:33,100 --> 00:16:41,200
I think we've got 47 different

00:16:38,540 --> 00:16:43,940
repositories of different edge cases and

00:16:41,200 --> 00:16:45,590
I was going to call it like it's like

00:16:43,940 --> 00:16:49,550
sharp stone like you sharpen a hatchet

00:16:45,590 --> 00:16:54,100
but I don't know whetstone I could never

00:16:49,550 --> 00:16:56,600
figure out how to spell in this scenario

00:16:54,100 --> 00:16:58,040
we just list out all of the different

00:16:56,600 --> 00:16:59,690
dependencies these are all of our all of

00:16:58,040 --> 00:17:03,920
our different inputs and you you can't

00:16:59,690 --> 00:17:05,870
you can't a kind of mix and match it has

00:17:03,920 --> 00:17:08,030
to be an entire git repository you can't

00:17:05,870 --> 00:17:10,190
have like just a one that says alright

00:17:08,030 --> 00:17:11,390
this is Ruby 20 and like this is this

00:17:10,190 --> 00:17:14,690
weird edge case you actually have to

00:17:11,390 --> 00:17:17,390
make those two different repositories in

00:17:14,690 --> 00:17:20,270
our scenario we declare all of those

00:17:17,390 --> 00:17:21,640
different different dependencies we can

00:17:20,270 --> 00:17:24,380
run something called hatchet install

00:17:21,640 --> 00:17:25,980
which will install these in parallel

00:17:24,380 --> 00:17:28,110
check out

00:17:25,980 --> 00:17:29,309
I just wrote called threaded it's pretty

00:17:28,110 --> 00:17:32,690
cool you should totally play around with

00:17:29,309 --> 00:17:36,120
threads that's four different talk and

00:17:32,690 --> 00:17:37,620
it will actually grab those repos from

00:17:36,120 --> 00:17:39,690
github it's very important that they're

00:17:37,620 --> 00:17:41,340
publicly accessible because we need to

00:17:39,690 --> 00:17:44,790
be able to do things like run our tests

00:17:41,340 --> 00:17:48,630
on Travis it will clone those into a

00:17:44,790 --> 00:17:51,150
temporary directory create a new app for

00:17:48,630 --> 00:17:53,910
the hoco API and then actually go

00:17:51,150 --> 00:17:58,290
through the process of deploying the app

00:17:53,910 --> 00:18:01,440
in like in real time whenever we do this

00:17:58,290 --> 00:18:03,480
that's that's kind of our input whenever

00:18:01,440 --> 00:18:06,240
we do this we then have assertions

00:18:03,480 --> 00:18:08,700
inside of the the deploy block and at

00:18:06,240 --> 00:18:11,910
this point in time we've got our our

00:18:08,700 --> 00:18:13,620
input and we've got our output and you

00:18:11,910 --> 00:18:14,820
might be like okay hey that's great that

00:18:13,620 --> 00:18:18,870
was really kind of like mildly

00:18:14,820 --> 00:18:23,549
interesting maybe I think I see a couple

00:18:18,870 --> 00:18:25,500
people asleep but everything's not quite

00:18:23,549 --> 00:18:28,620
done in our scenario like if we were

00:18:25,500 --> 00:18:30,960
just writing regular normal like mocked

00:18:28,620 --> 00:18:33,480
out easy to use test this would be where

00:18:30,960 --> 00:18:36,150
like the talk would stop but because we

00:18:33,480 --> 00:18:38,880
are like writing untestable tests we

00:18:36,150 --> 00:18:41,100
actually talked s3 and we actually

00:18:38,880 --> 00:18:43,440
talked to Ruby gems and the Heroku API

00:18:41,100 --> 00:18:45,780
and like we have a local network and we

00:18:43,440 --> 00:18:48,330
have to talk to github and when those

00:18:45,780 --> 00:18:52,559
things go down even if your code is

00:18:48,330 --> 00:18:55,260
write your tests fail which really

00:18:52,559 --> 00:18:57,059
stinks you're like I'm pretty sure this

00:18:55,260 --> 00:19:00,360
is going to work and then it just

00:18:57,059 --> 00:19:03,750
doesn't you're like I know I totally

00:19:00,360 --> 00:19:06,150
wrote all of that right so whenever

00:19:03,750 --> 00:19:11,299
something doesn't quite go according to

00:19:06,150 --> 00:19:16,140
plan you might jump on the chance to

00:19:11,299 --> 00:19:20,210
retry your your code so this is another

00:19:16,140 --> 00:19:20,210
one where the gem name was already taken

00:19:21,110 --> 00:19:25,290
it's basically that symbol it's also

00:19:23,250 --> 00:19:30,600
like eight lines of code it's super

00:19:25,290 --> 00:19:32,880
simple it in short we are going to retry

00:19:30,600 --> 00:19:36,390
all of our deploys it sounds like okay

00:19:32,880 --> 00:19:38,740
well yeah sore that that makes sense but

00:19:36,390 --> 00:19:41,260
you can't necessarily always

00:19:38,740 --> 00:19:44,770
do that in every scenario in our case it

00:19:41,260 --> 00:19:46,809
works out really well you can set an

00:19:44,770 --> 00:19:49,000
environment variable hatchet retries and

00:19:46,809 --> 00:19:51,340
it will it will automatically try to run

00:19:49,000 --> 00:19:54,960
the deploys all that that number of

00:19:51,340 --> 00:19:58,210
times incidentally it was this work that

00:19:54,960 --> 00:20:00,190
prompted me to work a little bit with

00:19:58,210 --> 00:20:01,809
with bundler and have you ever had like

00:20:00,190 --> 00:20:03,340
a bundle install go for like five

00:20:01,809 --> 00:20:05,320
minutes and then fail because I can't

00:20:03,340 --> 00:20:07,960
find something from rubygems because of

00:20:05,320 --> 00:20:12,130
like a split second network glitch okay

00:20:07,960 --> 00:20:13,330
well upgrade to Ruby bundler 15 or above

00:20:12,130 --> 00:20:15,070
and you won't have to deal with that

00:20:13,330 --> 00:20:16,900
issue it'll automatically retry all

00:20:15,070 --> 00:20:18,790
Network requests up to three times as

00:20:16,900 --> 00:20:21,850
well as get requests which is pretty

00:20:18,790 --> 00:20:23,800
handy I like it coincidentally we also

00:20:21,850 --> 00:20:26,530
use that well installing your stuff via

00:20:23,800 --> 00:20:28,679
vurugu which is like we were going to

00:20:26,530 --> 00:20:30,520
duplicate it based on some Travis CI

00:20:28,679 --> 00:20:33,100
functionality but we didn't have to

00:20:30,520 --> 00:20:37,240
because you know what hey we got to put

00:20:33,100 --> 00:20:40,480
it right inside a bundler okay so back

00:20:37,240 --> 00:20:44,559
to the actual retrying of deploys this

00:20:40,480 --> 00:20:47,309
is such a hard word I didn't potent I

00:20:44,559 --> 00:20:51,670
think is that okay all right good

00:20:47,309 --> 00:20:53,590
mechanical engineering so all of our

00:20:51,670 --> 00:20:55,540
deploys are idempotent so you can run it

00:20:53,590 --> 00:20:57,309
if it works you can keep on running the

00:20:55,540 --> 00:20:58,570
deployed 20 times and it'll just say

00:20:57,309 --> 00:21:01,179
like hey you're get repos already

00:20:58,570 --> 00:21:02,860
already already pushed if it doesn't

00:21:01,179 --> 00:21:04,750
work you can run it another 20 times

00:21:02,860 --> 00:21:07,929
until it works just once you only need

00:21:04,750 --> 00:21:09,520
it to work once but so okay let's say

00:21:07,929 --> 00:21:11,260
all right those networks were down just

00:21:09,520 --> 00:21:12,880
slightly but what if what if the you

00:21:11,260 --> 00:21:14,440
know our local network has a has a

00:21:12,880 --> 00:21:16,840
hiccup and we're trying to do that

00:21:14,440 --> 00:21:19,240
Heroku run bash thing we're trying to

00:21:16,840 --> 00:21:21,460
run rails console interactively well you

00:21:19,240 --> 00:21:24,220
can still get non-network these kind of

00:21:21,460 --> 00:21:27,460
these hiccups and that's where there's

00:21:24,220 --> 00:21:31,300
actually a great ecosystem inside of our

00:21:27,460 --> 00:21:33,070
spec that allows you to retry test

00:21:31,300 --> 00:21:34,720
failures which until I was working on

00:21:33,070 --> 00:21:36,250
this project I had no idea why you would

00:21:34,720 --> 00:21:39,730
ever want to do that I'm like obviously

00:21:36,250 --> 00:21:41,500
if it fails it'll fail again so in this

00:21:39,730 --> 00:21:43,480
scenario a failed test assertion

00:21:41,500 --> 00:21:45,760
actually causes the entire thing to

00:21:43,480 --> 00:21:47,470
totally rerun so even if the deploy

00:21:45,760 --> 00:21:49,840
worked it'll actually just like tear

00:21:47,470 --> 00:21:54,460
down the app and then like redeploy an

00:21:49,840 --> 00:21:56,410
entirely new app so like in general if

00:21:54,460 --> 00:21:58,540
you have like a small network glitch and

00:21:56,410 --> 00:22:00,760
things don't work once it's like it may

00:21:58,540 --> 00:22:05,700
or may not be the result of your actual

00:22:00,760 --> 00:22:08,110
code if you get six failures

00:22:05,700 --> 00:22:09,850
sequentially then there's probably

00:22:08,110 --> 00:22:12,790
actually literally an air in your task

00:22:09,850 --> 00:22:16,419
also as a as a side effect of this test

00:22:12,790 --> 00:22:19,300
errors take way longer to run then test

00:22:16,419 --> 00:22:21,669
a test passes when the tests are green

00:22:19,300 --> 00:22:23,080
it like it's like super fast and like

00:22:21,669 --> 00:22:24,910
whenever you're like I haven't heard

00:22:23,080 --> 00:22:26,800
anything back from my CI server in like

00:22:24,910 --> 00:22:29,260
30 minutes it's probably not a good

00:22:26,800 --> 00:22:31,150
thing it's because literally every test

00:22:29,260 --> 00:22:34,630
is actually rerunning it's like six

00:22:31,150 --> 00:22:38,290
times so in this scenario we have a

00:22:34,630 --> 00:22:39,640
non-deterministic situation like every

00:22:38,290 --> 00:22:41,410
time we've run the code we can run the

00:22:39,640 --> 00:22:42,940
exact same food multiple times that may

00:22:41,410 --> 00:22:45,190
pass or may fail like this is

00:22:42,940 --> 00:22:46,960
determinism so we are going to

00:22:45,190 --> 00:22:49,150
approximate determinism through

00:22:46,960 --> 00:22:50,919
probability uh and it's kind of like

00:22:49,150 --> 00:22:53,710
pseudo probability cuz I kind of just

00:22:50,919 --> 00:22:56,169
fudged those numbers I'm like oh about

00:22:53,710 --> 00:22:58,030
three deploys seems about right uh you

00:22:56,169 --> 00:23:01,150
know about to rout dries it's like yeah

00:22:58,030 --> 00:23:05,309
totally um but a even though the numbers

00:23:01,150 --> 00:23:07,929
of fudge like it it it does add up like

00:23:05,309 --> 00:23:10,150
probably if you can successfully deploy

00:23:07,929 --> 00:23:11,770
once out of six then your code is

00:23:10,150 --> 00:23:13,900
actually going to run like if we can get

00:23:11,770 --> 00:23:16,630
one positive if we can guarantee that

00:23:13,900 --> 00:23:17,919
our code works even just once we can

00:23:16,630 --> 00:23:21,130
safely ignore all of those other

00:23:17,919 --> 00:23:22,660
failures so you might have noticed in

00:23:21,130 --> 00:23:27,130
some of the examples I was using our

00:23:22,660 --> 00:23:29,260
spec so morning some opinions like you

00:23:27,130 --> 00:23:33,730
can feel free to play me on twitter if

00:23:29,260 --> 00:23:36,100
you so desire so the the r-spec runner

00:23:33,730 --> 00:23:38,020
is like amazing i love it i think it's

00:23:36,100 --> 00:23:39,730
great it's i can do some really cool

00:23:38,020 --> 00:23:42,520
things like you can run like a single

00:23:39,730 --> 00:23:43,929
test and its really great up until the

00:23:42,520 --> 00:23:46,179
point when you accidentally check this

00:23:43,929 --> 00:23:49,780
in and then your CI is only running one

00:23:46,179 --> 00:23:51,370
single test but yeah you can we can do

00:23:49,780 --> 00:23:53,050
with that we can also do things like

00:23:51,370 --> 00:23:55,309
nest context which I find really

00:23:53,050 --> 00:23:59,179
interesting really easy really natural

00:23:55,309 --> 00:24:00,830
our spec has a great plug-in system like

00:23:59,179 --> 00:24:04,070
our spec retry I just mentioned that

00:24:00,830 --> 00:24:06,919
it's got a ton of other things the the

00:24:04,070 --> 00:24:12,409
ecosystem is great I can't stand the

00:24:06,919 --> 00:24:14,240
expectations in tax it's like uh so if

00:24:12,409 --> 00:24:16,120
you don't know what I'm talking about if

00:24:14,240 --> 00:24:18,950
you're using something like test unit

00:24:16,120 --> 00:24:20,389
like old school you might write your

00:24:18,950 --> 00:24:24,049
tests kind of like this where you say

00:24:20,389 --> 00:24:25,340
assert mattress or equal or something

00:24:24,049 --> 00:24:28,129
and then you have your expected value

00:24:25,340 --> 00:24:29,240
and then the actual value I love this

00:24:28,129 --> 00:24:30,860
when I see this in test I can just

00:24:29,240 --> 00:24:34,399
easily like scan through my tests and be

00:24:30,860 --> 00:24:37,039
like oh there's all my assertions like

00:24:34,399 --> 00:24:38,869
our spec recently kind of got this this

00:24:37,039 --> 00:24:40,429
syntax where you can say like expect and

00:24:38,869 --> 00:24:42,769
wrap your value in something and then

00:24:40,429 --> 00:24:44,929
you say like dot 2 and then your what

00:24:42,769 --> 00:24:47,389
you're actually writing and this reads a

00:24:44,929 --> 00:24:49,700
lot better it's like way I actually find

00:24:47,389 --> 00:24:52,749
as a when I'm working with people who

00:24:49,700 --> 00:24:55,610
are new to programming like this is like

00:24:52,749 --> 00:24:56,509
leaps and bounds over better over the

00:24:55,610 --> 00:24:57,980
first one they're like oh I actually

00:24:56,509 --> 00:24:59,600
understand like what this is doing

00:24:57,980 --> 00:25:01,700
versus like this a certain match thing

00:24:59,600 --> 00:25:05,600
doesn't really make sense or over

00:25:01,700 --> 00:25:07,669
previously we had this kind of monkey

00:25:05,600 --> 00:25:09,529
patch where everything has it should or

00:25:07,669 --> 00:25:11,179
like should not operator and you're like

00:25:09,529 --> 00:25:14,899
how does this even work and there's so

00:25:11,179 --> 00:25:16,519
much magic but anyway okay so that's

00:25:14,899 --> 00:25:19,879
like basically the end of that feel free

00:25:16,519 --> 00:25:23,529
to talk to me on my opinions later not

00:25:19,879 --> 00:25:26,029
necessarily those of the management's so

00:25:23,529 --> 00:25:27,559
now that we've got we've got our input

00:25:26,029 --> 00:25:32,389
we've got our output we've got things

00:25:27,559 --> 00:25:34,159
working relatively deterministically we

00:25:32,389 --> 00:25:36,679
now have another problem the very first

00:25:34,159 --> 00:25:39,710
time I ever ever did this it took

00:25:36,679 --> 00:25:43,309
basically five minutes for one test to

00:25:39,710 --> 00:25:44,899
run and I don't know if you notice but I

00:25:43,309 --> 00:25:47,629
said there were like four thousand lines

00:25:44,899 --> 00:25:49,850
of edge cases of edge cases like that's

00:25:47,629 --> 00:25:52,639
just not going to cut it so after about

00:25:49,850 --> 00:25:56,480
a thousand different test runs on Travis

00:25:52,639 --> 00:25:59,330
to date almost a thousand I think we can

00:25:56,480 --> 00:26:02,210
run about 44 test cases in roughly about

00:25:59,330 --> 00:26:05,240
12 minutes which I've worked for

00:26:02,210 --> 00:26:07,270
companies that my rails test suite has

00:26:05,240 --> 00:26:10,330
taken like 30 or 45 min

00:26:07,270 --> 00:26:13,210
so this was like a super huge win for me

00:26:10,330 --> 00:26:14,860
I did mention that it does get much

00:26:13,210 --> 00:26:16,300
slower it when tests fail but that's

00:26:14,860 --> 00:26:18,610
okay at least you can tell they're

00:26:16,300 --> 00:26:20,200
failing like like when it when you need

00:26:18,610 --> 00:26:22,420
it to pass because you need to deploy

00:26:20,200 --> 00:26:25,570
like it's nice that it only takes 12

00:26:22,420 --> 00:26:27,010
minutes of course sometimes it doesn't

00:26:25,570 --> 00:26:30,730
take 12 minutes because your tests fail

00:26:27,010 --> 00:26:33,280
and you cry but so one of the biggest

00:26:30,730 --> 00:26:37,900
secrets to that success was actually

00:26:33,280 --> 00:26:39,280
parallel ISM in in this world we're

00:26:37,900 --> 00:26:42,340
actually dealing with the scenario where

00:26:39,280 --> 00:26:44,380
we can we're just saying like hey hope

00:26:42,340 --> 00:26:45,730
you deploy this thing and you upload

00:26:44,380 --> 00:26:47,440
your code and you just kind of wait for

00:26:45,730 --> 00:26:49,930
it to be done and in that scenario

00:26:47,440 --> 00:26:52,870
you're not actually doing a lot so

00:26:49,930 --> 00:26:54,550
there's a parallel r-spec I think it's

00:26:52,870 --> 00:26:56,880
just called parallel test runner that

00:26:54,550 --> 00:27:00,820
works with our spec also worked with

00:26:56,880 --> 00:27:02,860
regular regular tests and you can just

00:27:00,820 --> 00:27:06,100
pass it the number of values you want to

00:27:02,860 --> 00:27:07,990
run if you're running in a system that

00:27:06,100 --> 00:27:09,700
supports processes I think it runs them

00:27:07,990 --> 00:27:14,410
in processes otherwise it just runs them

00:27:09,700 --> 00:27:16,720
the threads also really conveniently our

00:27:14,410 --> 00:27:18,880
build pack got faster over the course of

00:27:16,720 --> 00:27:21,760
all of these tests some of you might

00:27:18,880 --> 00:27:23,890
have seen recently we had a blog post

00:27:21,760 --> 00:27:28,150
that came out our build back out a lot

00:27:23,890 --> 00:27:31,690
faster like forty percent faster and do

00:27:28,150 --> 00:27:32,980
you think this was a coincidence like we

00:27:31,690 --> 00:27:37,330
just woke up one day and we're like wow

00:27:32,980 --> 00:27:41,710
and our code was done a lot faster maybe

00:27:37,330 --> 00:27:44,110
we were like intentionally doing this so

00:27:41,710 --> 00:27:46,960
uh by adding these tests it allowed us

00:27:44,110 --> 00:27:48,460
to be really aggressive before we were

00:27:46,960 --> 00:27:49,900
restricted to this Minimum Viable patch

00:27:48,460 --> 00:27:54,930
we can only make these really small

00:27:49,900 --> 00:27:57,790
changes and and you know after this like

00:27:54,930 --> 00:28:01,330
just I guess a sidebar the build pack

00:27:57,790 --> 00:28:03,640
has three stages a detect compile and

00:28:01,330 --> 00:28:05,410
release and you know one day I was just

00:28:03,640 --> 00:28:07,120
like hey you know what I don't think we

00:28:05,410 --> 00:28:08,980
need to run any code like I don't think

00:28:07,120 --> 00:28:12,160
we need to require anything in detect

00:28:08,980 --> 00:28:15,610
like let's just simplify this and like

00:28:12,160 --> 00:28:18,220
just ripped out a ton of code and then

00:28:15,610 --> 00:28:20,120
all my tests pass and it just worked and

00:28:18,220 --> 00:28:22,640
I was able to deploy really confident

00:28:20,120 --> 00:28:24,950
uh and I ended up saving something like

00:28:22,640 --> 00:28:27,950
200 milliseconds per each test run which

00:28:24,950 --> 00:28:31,160
uh one you do enough things like that it

00:28:27,950 --> 00:28:32,750
really starts to add up so these kind of

00:28:31,160 --> 00:28:35,240
big architecture changes at least for us

00:28:32,750 --> 00:28:36,710
our goal was uh was big speed

00:28:35,240 --> 00:28:38,060
improvements and we did do a bunch of

00:28:36,710 --> 00:28:39,980
other things that's kind of might be for

00:28:38,060 --> 00:28:42,710
another talk where we talked about how

00:28:39,980 --> 00:28:44,390
we actually log and uh and methodically

00:28:42,710 --> 00:28:48,830
kind of went through and targeted some

00:28:44,390 --> 00:28:50,540
of these things um but at the end of the

00:28:48,830 --> 00:28:53,660
day testing didn't necessarily make the

00:28:50,540 --> 00:28:55,670
bill pack faster but uh what we use the

00:28:53,660 --> 00:28:57,380
test for dead also another another

00:28:55,670 --> 00:28:59,420
benefit and this comes directly from the

00:28:57,380 --> 00:29:02,300
book is once you have those big black

00:28:59,420 --> 00:29:04,280
box like really kind of its on some

00:29:02,300 --> 00:29:05,950
level almost like gross and ugly all of

00:29:04,280 --> 00:29:09,110
those network requests and everything

00:29:05,950 --> 00:29:12,380
like it's great you can actually build

00:29:09,110 --> 00:29:14,150
even smaller more modular tests you you

00:29:12,380 --> 00:29:15,950
can refactor your code that you can say

00:29:14,150 --> 00:29:17,360
all right I can I actually don't need

00:29:15,950 --> 00:29:18,860
the network for this so I'm not going to

00:29:17,360 --> 00:29:21,380
use the network for this or like I only

00:29:18,860 --> 00:29:22,880
need s3 for this and then just unit

00:29:21,380 --> 00:29:26,600
tests those components which happened to

00:29:22,880 --> 00:29:29,780
be like way faster for instance instead

00:29:26,600 --> 00:29:31,580
of like a five minute test we could unit

00:29:29,780 --> 00:29:35,150
test something at like one point six

00:29:31,580 --> 00:29:37,910
three seconds so fasters has to mean

00:29:35,150 --> 00:29:42,680
faster iterations or quicker iterations

00:29:37,910 --> 00:29:44,780
anyway so in addition to just doing this

00:29:42,680 --> 00:29:46,730
for the build pack which is great I love

00:29:44,780 --> 00:29:49,310
working on it I also work on another

00:29:46,730 --> 00:29:50,840
project called code triage calm and this

00:29:49,310 --> 00:29:53,060
is an actual something maybe hopefully a

00:29:50,840 --> 00:29:56,090
little bit more relatable it's a rails

00:29:53,060 --> 00:29:58,760
app we just upgraded the 403 because of

00:29:56,090 --> 00:30:00,830
you know vulnerabilities and stuff and

00:29:58,760 --> 00:30:03,080
if you're not familiar with it allows

00:30:00,830 --> 00:30:04,460
people to go up sign up and say like hey

00:30:03,080 --> 00:30:07,310
I'm interested in getting involved and

00:30:04,460 --> 00:30:09,530
say like rails laughs rails and it's

00:30:07,310 --> 00:30:12,200
open source that all the tests are on

00:30:09,530 --> 00:30:14,750
Travis and it was really important to me

00:30:12,200 --> 00:30:17,000
to not have to put a lot of work into it

00:30:14,750 --> 00:30:19,940
once I released it and now I can just

00:30:17,000 --> 00:30:21,890
allow other people to like if the tab if

00:30:19,940 --> 00:30:23,210
the Travis tests pass then I know it's

00:30:21,890 --> 00:30:25,280
good enough and actually Travis

00:30:23,210 --> 00:30:26,840
automatically deploys it to Heroku it's

00:30:25,280 --> 00:30:28,310
great nobody has to be like hey I see

00:30:26,840 --> 00:30:30,470
this thing is fixed and master like did

00:30:28,310 --> 00:30:32,220
you deploy it yet it's like know if it's

00:30:30,470 --> 00:30:35,190
green it's already on

00:30:32,220 --> 00:30:38,130
heroku in order for us to be able to do

00:30:35,190 --> 00:30:41,669
this we have at work some Network

00:30:38,130 --> 00:30:43,730
dependencies of github com we had to do

00:30:41,669 --> 00:30:45,809
some black box testing with this

00:30:43,730 --> 00:30:47,789
actually be able to click buttons serve

00:30:45,809 --> 00:30:50,340
pages this might sound a lot like

00:30:47,789 --> 00:30:55,620
capybara and that is because we ended up

00:30:50,340 --> 00:30:57,270
using capybara to do that and with the

00:30:55,620 --> 00:30:59,220
network stuff you're going to want a

00:30:57,270 --> 00:31:00,900
mock or stub you just don't want to make

00:30:59,220 --> 00:31:03,179
any network request right if you are

00:31:00,900 --> 00:31:06,179
making a network request it's almost

00:31:03,179 --> 00:31:08,370
like my definition non-deterministic so

00:31:06,179 --> 00:31:10,260
you can use web mock if it's really

00:31:08,370 --> 00:31:12,750
small but if you end up needing to mock

00:31:10,260 --> 00:31:14,970
out like 20 different API calls for one

00:31:12,750 --> 00:31:16,289
page like every page every time like

00:31:14,970 --> 00:31:17,610
that's just insane nobody's gonna do

00:31:16,289 --> 00:31:20,190
that I'm not gonna write those tests are

00:31:17,610 --> 00:31:22,440
you in right those desks okay I didn't

00:31:20,190 --> 00:31:25,710
think so I mean if you are like feel

00:31:22,440 --> 00:31:28,520
free uh so there's a really amazing uh

00:31:25,710 --> 00:31:31,559
project called vcr would you basically

00:31:28,520 --> 00:31:35,100
like they go way overboard with this but

00:31:31,559 --> 00:31:36,659
they basically like you record your your

00:31:35,100 --> 00:31:38,159
your network traffic and you can

00:31:36,659 --> 00:31:40,169
actually play it back during your trip

00:31:38,159 --> 00:31:43,590
your tests it it keeps them in a

00:31:40,169 --> 00:31:46,919
cassette which is actually just ya know

00:31:43,590 --> 00:31:49,500
file so okay uh that was kind of a lot

00:31:46,919 --> 00:31:52,559
to digest I think I'm like now ten

00:31:49,500 --> 00:31:54,299
seconds over time uh at the end of the

00:31:52,559 --> 00:31:56,190
day I just want you to think that or

00:31:54,299 --> 00:31:59,520
keep in mind that like realistically

00:31:56,190 --> 00:32:01,230
nothing is untestable uh if being seem

00:31:59,520 --> 00:32:03,630
kind of too big too overwhelming you can

00:32:01,230 --> 00:32:10,020
always start off with with integration

00:32:03,630 --> 00:32:12,210
tests and if you if you can only test a

00:32:10,020 --> 00:32:13,380
subsection of the thing of your entire

00:32:12,210 --> 00:32:17,880
components test the things that are

00:32:13,380 --> 00:32:18,990
going to hurt I so just like just side

00:32:17,880 --> 00:32:24,690
note I worked for a company called

00:32:18,990 --> 00:32:26,970
gowalla huge social network a big fan of

00:32:24,690 --> 00:32:30,000
it once we did something and broke up

00:32:26,970 --> 00:32:31,620
broke sign up for three days and didn't

00:32:30,000 --> 00:32:33,360
realize I don't know if you know but

00:32:31,620 --> 00:32:36,330
social networks kind of need people to

00:32:33,360 --> 00:32:37,919
sign up so like after that happened like

00:32:36,330 --> 00:32:40,770
I guarantee you there was a test for

00:32:37,919 --> 00:32:42,450
sign up and you can kind of just like

00:32:40,770 --> 00:32:45,070
iterate through these think it happens

00:32:42,450 --> 00:32:49,149
it's it's not okay but it's okay

00:32:45,070 --> 00:32:51,159
hmm so you can use your these tests or

00:32:49,149 --> 00:32:53,230
factor your code and actually write

00:32:51,159 --> 00:32:55,059
smaller faster task maybe break them

00:32:53,230 --> 00:32:57,460
into modules maybe put them in Ruby gems

00:32:55,059 --> 00:33:01,630
maybe service-oriented architecture hey

00:32:57,460 --> 00:33:03,580
whatever floats your boat and like the

00:33:01,630 --> 00:33:06,039
really nice thing is that I'm confident

00:33:03,580 --> 00:33:09,250
in my tests that if my tests are passing

00:33:06,039 --> 00:33:11,350
then probably my system is going to be

00:33:09,250 --> 00:33:12,940
passing if it's not if that's not the

00:33:11,350 --> 00:33:13,899
case then I'm gonna get a failure I'm

00:33:12,940 --> 00:33:15,460
going to come back i'm going to rewrite

00:33:13,899 --> 00:33:17,590
some more tests and i'm gonna be more

00:33:15,460 --> 00:33:20,320
confident when i deploy next time so

00:33:17,590 --> 00:33:25,529
avoid the Minimum Viable patch be

00:33:20,320 --> 00:33:30,250
maintainable be flexible be fast able

00:33:25,529 --> 00:33:32,590
hmm and and be tested my name is James I

00:33:30,250 --> 00:33:34,179
wrote some gems sextant wicked I wrote a

00:33:32,590 --> 00:33:35,830
book called Roku up and running with

00:33:34,179 --> 00:33:36,960
Neil Middleton you should totally buy

00:33:35,830 --> 00:33:39,250
that does anybody have any questions

00:33:36,960 --> 00:33:41,399
meet me out in the lobby at the next

00:33:39,250 --> 00:33:41,399

YouTube URL: https://www.youtube.com/watch?v=QHMKIHkY1nM


