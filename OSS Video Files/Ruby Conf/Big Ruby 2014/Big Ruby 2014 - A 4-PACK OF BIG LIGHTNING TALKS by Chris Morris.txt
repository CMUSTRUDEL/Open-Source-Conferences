Title: Big Ruby 2014 - A 4-PACK OF BIG LIGHTNING TALKS by Chris Morris
Publication date: 2020-01-24
Playlist: Big Ruby 2014
Description: 
	If you get 10 minutes into this talk and decide you don't really like the topic, the topic will change! If you don't like the speaker, well ... there's no accounting for taste. 

The Cobbler's Production Console Has No Shoes. Don't give all your great stuff to your end-users, build something nice for yourself as well. We'll look at a few of the things I've built for myself at LivingSocial and hopefully will inspire you to do the same. 

Do-It-Yourself Mocks and Fixtures. Big projects need some custom love. factory_girl, ActiveRecord fixtures and mocha demo nice, but sometimes they wear out their welcome in a big code base. How hard could it be to do yourself? Let's find out! It might be easier than you think. 

Track yer Big Stuff without screwing up production with Humperdink. With over 2500 translation keys in one app, we decided to build out some tooling to track at runtime what was and wasn't being used so we could prune out the dead stuff. 

ALL THE ANALOGIES We've all tried to wield the construction analogy to help figure out what the heck it is we do. Let's get creative and think of 10 other ways that don't quite capture it either.

Help us caption & translate this video!

http://amara.org/v/FG3q/
Captions: 
	00:00:11,570 --> 00:00:24,140
a quick shoutout before I begin this is

00:00:22,910 --> 00:00:29,410
too loud too hot

00:00:24,140 --> 00:00:31,880
can i everything Thank You Glenn dark

00:00:29,410 --> 00:00:33,769
quick shoutout last you Joe Kutner came

00:00:31,880 --> 00:00:35,330
here to big Ruby and did a presentation

00:00:33,769 --> 00:00:36,550
on his book healthy program I just want

00:00:35,330 --> 00:00:38,690
to say thank you to him

00:00:36,550 --> 00:00:39,830
following hardly anything of what he

00:00:38,690 --> 00:00:41,420
said in the book I've still been able to

00:00:39,830 --> 00:00:43,129
lose about 20 pounds no more sleepy

00:00:41,420 --> 00:00:44,690
afternoon so check this book out if you

00:00:43,129 --> 00:00:47,090
sit in a chair all day long it's good

00:00:44,690 --> 00:00:50,510
stuff my name is Chris Morris I'm a

00:00:47,090 --> 00:00:51,500
senior engineer at Living Social and you

00:00:50,510 --> 00:00:53,360
know in the last year we've had a little

00:00:51,500 --> 00:00:55,699
bit of bad press so I figured we'd start

00:00:53,360 --> 00:00:57,920
off with some good press right now this

00:00:55,699 --> 00:01:00,050
is from Tim o Shaughnessy our CEO from

00:00:57,920 --> 00:01:01,789
article on CNN Money about all the great

00:01:00,050 --> 00:01:04,970
stuff that's going on at LivingSocial

00:01:01,789 --> 00:01:07,490
and best of all we are hiring Brian

00:01:04,970 --> 00:01:09,289
Owens our VP of engineering is here Glen

00:01:07,490 --> 00:01:10,820
and Adam are talking tomorrow and Greg

00:01:09,289 --> 00:01:12,710
Vaughn's in the house as well so if

00:01:10,820 --> 00:01:14,810
you're interested in a new gig or if

00:01:12,710 --> 00:01:17,540
you're not interested in new gig and won

00:01:14,810 --> 00:01:18,650
a challenge just come talk to us so as

00:01:17,540 --> 00:01:21,020
he said last year I did two lightning

00:01:18,650 --> 00:01:22,460
talks I kind of like that format so I

00:01:21,020 --> 00:01:24,740
didn't think they'd take me up on it but

00:01:22,460 --> 00:01:27,470
here I am so let's get going

00:01:24,740 --> 00:01:30,560
so my first talk here today is to really

00:01:27,470 --> 00:01:32,090
encourage you as a developer to build

00:01:30,560 --> 00:01:33,979
things for yourself not just for your

00:01:32,090 --> 00:01:35,570
end users I'm surprised how often I'll

00:01:33,979 --> 00:01:37,159
see myself or other developers I'm

00:01:35,570 --> 00:01:39,439
working with doing a lot of repetitive

00:01:37,159 --> 00:01:42,470
manual labor and the act of creating

00:01:39,439 --> 00:01:44,720
automation so a little background on my

00:01:42,470 --> 00:01:46,130
gig last summer I took over its tech

00:01:44,720 --> 00:01:47,810
lead on our payment systems which is

00:01:46,130 --> 00:01:50,180
primarily credit card but PayPal and

00:01:47,810 --> 00:01:51,740
some other things our core payment

00:01:50,180 --> 00:01:54,710
systems does about a million 1/2 API

00:01:51,740 --> 00:01:56,780
calls a day credit card transactions

00:01:54,710 --> 00:01:58,430
upwards of nine 50k is well the system's

00:01:56,780 --> 00:02:01,930
structured to be able to handle some of

00:01:58,430 --> 00:02:01,930
the big sales days we've had in the past

00:02:02,079 --> 00:02:07,670
it's a big system not terribly big so

00:02:05,090 --> 00:02:09,739
and it's fairly mature code base as well

00:02:07,670 --> 00:02:11,510
so most of what my work entailed when I

00:02:09,739 --> 00:02:12,799
took this over last summer I was doing

00:02:11,510 --> 00:02:14,959
production support due to PCI

00:02:12,799 --> 00:02:16,549
regulations we can't have everybody in

00:02:14,959 --> 00:02:17,959
engineering on production consoles and

00:02:16,549 --> 00:02:20,480
databases and whatnot so I got to do a

00:02:17,959 --> 00:02:23,030
lot of look up stuff to help people out

00:02:20,480 --> 00:02:24,730
with crazy cases so what I want to show

00:02:23,030 --> 00:02:26,050
you here is kind of a brief evolution

00:02:24,730 --> 00:02:28,360
some of the console tooling I've built

00:02:26,050 --> 00:02:30,129
out none of its particularly impressive

00:02:28,360 --> 00:02:32,349
necessarily but I wanted to share just

00:02:30,129 --> 00:02:32,920
in case it was some inspiration to you

00:02:32,349 --> 00:02:35,530
as well

00:02:32,920 --> 00:02:38,769
uses the computer you have in front of

00:02:35,530 --> 00:02:39,370
you so here's your standard rails output

00:02:38,769 --> 00:02:40,810
here

00:02:39,370 --> 00:02:45,099
don't worry Ryan this is a production

00:02:40,810 --> 00:02:47,500
data and a little difficult you know to

00:02:45,099 --> 00:02:49,030
grok that so after iterating on a few

00:02:47,500 --> 00:02:51,010
different things over while I was able

00:02:49,030 --> 00:02:52,720
to get that down to this so one of the

00:02:51,010 --> 00:02:53,860
first things I did was to use pride

00:02:52,720 --> 00:02:55,420
probably maybe one of those things

00:02:53,860 --> 00:02:59,019
you've heard about for a long time like

00:02:55,420 --> 00:03:00,730
I had but had never really used and

00:02:59,019 --> 00:03:02,650
really there's no reason there's no cost

00:03:00,730 --> 00:03:04,780
to get into using it out of the box

00:03:02,650 --> 00:03:06,340
you'll get history retention that just

00:03:04,780 --> 00:03:07,780
works you'll get pretty printing so if

00:03:06,340 --> 00:03:08,769
you have an array of hashes you can get

00:03:07,780 --> 00:03:12,510
something that looks a little better

00:03:08,769 --> 00:03:15,400
like that and it's got a wonderful

00:03:12,510 --> 00:03:17,170
massive toolset underneath that so once

00:03:15,400 --> 00:03:18,970
you use it as your console you can you

00:03:17,170 --> 00:03:21,370
know you're brain-dead type help and

00:03:18,970 --> 00:03:24,340
learn a bit more about it so another

00:03:21,370 --> 00:03:26,709
thing I did was to change using just the

00:03:24,340 --> 00:03:28,870
raw array that I get back from rails I

00:03:26,709 --> 00:03:30,549
make this batch class with this method

00:03:28,870 --> 00:03:32,440
missing magic in it which would just

00:03:30,549 --> 00:03:34,180
allow me to go from having to type map

00:03:32,440 --> 00:03:35,500
in these blocks which gets a little old

00:03:34,180 --> 00:03:37,269
when you do it a lot and then just be

00:03:35,500 --> 00:03:38,470
able to type in a attribute and have

00:03:37,269 --> 00:03:40,780
that pass through everything that's in

00:03:38,470 --> 00:03:42,760
that batch another thing that helped was

00:03:40,780 --> 00:03:44,769
adding a named constructor on this

00:03:42,760 --> 00:03:46,120
because those finder methods you can't

00:03:44,769 --> 00:03:48,160
autocomplete so it's having something

00:03:46,120 --> 00:03:50,680
like this in there or not something like

00:03:48,160 --> 00:03:53,680
this in there is nice because

00:03:50,680 --> 00:03:55,000
autocomplete can help you out there one

00:03:53,680 --> 00:03:58,090
of the more obvious additions was

00:03:55,000 --> 00:04:00,790
throwing in text table so that instead

00:03:58,090 --> 00:04:02,650
of messing around with left justify and

00:04:00,790 --> 00:04:04,630
trying to format this data in a console

00:04:02,650 --> 00:04:06,220
you can just change it to be this and

00:04:04,630 --> 00:04:08,889
just choose the columns you want and

00:04:06,220 --> 00:04:10,599
then get some nice output here notice we

00:04:08,889 --> 00:04:12,190
don't have any column names there so for

00:04:10,599 --> 00:04:14,109
that I leaned on the active record

00:04:12,190 --> 00:04:17,109
serialization the serializable hash

00:04:14,109 --> 00:04:19,090
method comes in really nice it's got a

00:04:17,109 --> 00:04:21,190
nice API for deciding just the things

00:04:19,090 --> 00:04:23,260
you want so you can actually swap out

00:04:21,190 --> 00:04:25,270
that report method and just say just

00:04:23,260 --> 00:04:26,680
give me these columns give me a hash

00:04:25,270 --> 00:04:30,340
then with a little bit of Ruby magic

00:04:26,680 --> 00:04:32,289
you've got column headers and for those

00:04:30,340 --> 00:04:34,300
paying attention these aren't sorted

00:04:32,289 --> 00:04:36,610
with a little bit more Ruby magic you

00:04:34,300 --> 00:04:37,630
can get those sorted but let's get that

00:04:36,610 --> 00:04:39,190
slide

00:04:37,630 --> 00:04:40,810
this point this is nice but then I've

00:04:39,190 --> 00:04:41,920
got all this crap I don't really want to

00:04:40,810 --> 00:04:43,270
see you I want to get your straight to

00:04:41,920 --> 00:04:45,280
that table so that's easy to deal with

00:04:43,270 --> 00:04:49,570
you can read pretty inspect if you're

00:04:45,280 --> 00:04:51,880
using pry and just by default then get

00:04:49,570 --> 00:04:53,710
from there to there another thing that

00:04:51,880 --> 00:04:54,940
comes up I'm usually researching

00:04:53,710 --> 00:04:57,670
something for somebody and so I need to

00:04:54,940 --> 00:04:59,800
be able to email that out and rather

00:04:57,670 --> 00:05:01,720
than going through action mailer and all

00:04:59,800 --> 00:05:03,670
of its stuff you can just dive straight

00:05:01,720 --> 00:05:06,700
down to the mail Jim and send out a

00:05:03,670 --> 00:05:07,750
quick little message like that I've also

00:05:06,700 --> 00:05:09,640
built out some similar batch

00:05:07,750 --> 00:05:11,230
functionality for a Braintree or credit

00:05:09,640 --> 00:05:14,260
card gateway we love them they're

00:05:11,230 --> 00:05:15,220
awesome and because there are times when

00:05:14,260 --> 00:05:16,720
troubleshooting we need to be able to

00:05:15,220 --> 00:05:20,860
compare our payment systems to Braintree

00:05:16,720 --> 00:05:23,500
systems and even repair transactions

00:05:20,860 --> 00:05:27,010
avoid some stuff if we ever have brief

00:05:23,500 --> 00:05:29,050
outages or glittery so and what's been

00:05:27,010 --> 00:05:30,160
useful about that stuff is built some of

00:05:29,050 --> 00:05:32,080
this stuff for myself

00:05:30,160 --> 00:05:33,430
but over time by just investing in

00:05:32,080 --> 00:05:35,020
iterate on the stuff I'm able to come

00:05:33,430 --> 00:05:36,760
back later and either use it in

00:05:35,020 --> 00:05:38,860
production to solve production problems

00:05:36,760 --> 00:05:41,350
or a lot of this stuff we're putting up

00:05:38,860 --> 00:05:43,330
as new end points on our API so people

00:05:41,350 --> 00:05:45,310
who are in client apps if our payment

00:05:43,330 --> 00:05:47,350
systems can maybe go into their console

00:05:45,310 --> 00:05:50,110
and get some of that magic there for

00:05:47,350 --> 00:05:53,920
themselves real quickly another thing

00:05:50,110 --> 00:05:55,360
that I've been working on when I first

00:05:53,920 --> 00:05:57,730
came in there we didn't have ready

00:05:55,360 --> 00:05:59,950
access to Splunk or one of the other log

00:05:57,730 --> 00:06:03,630
aggregators that we use so really it was

00:05:59,950 --> 00:06:06,370
just shell scripting SSH greps out into

00:06:03,630 --> 00:06:09,640
machines across on environment so I've

00:06:06,370 --> 00:06:12,040
built out a four command line script

00:06:09,640 --> 00:06:13,930
that I can use to go across all of our

00:06:12,040 --> 00:06:15,220
machines to get stuff out of there it's

00:06:13,930 --> 00:06:17,410
got some of the typical options that you

00:06:15,220 --> 00:06:18,760
can just pass through the grip and

00:06:17,410 --> 00:06:22,390
here's some of the scrubbed output from

00:06:18,760 --> 00:06:24,310
that but on top of that then we output a

00:06:22,390 --> 00:06:25,720
lot of diagnostic stuff in each request

00:06:24,310 --> 00:06:28,240
and so that creates kind of a lot of

00:06:25,720 --> 00:06:30,460
lines that interleave so I've got a

00:06:28,240 --> 00:06:32,770
chunker in there that will parse those

00:06:30,460 --> 00:06:35,580
out Marshall all of those requests out

00:06:32,770 --> 00:06:38,920
to a file and then with an optional pry

00:06:35,580 --> 00:06:41,440
command pop that open and pry and now

00:06:38,920 --> 00:06:43,380
I've got an array of actual requests

00:06:41,440 --> 00:06:45,850
that I can further filter down and

00:06:43,380 --> 00:06:47,870
further work through and that actually

00:06:45,850 --> 00:06:49,070
now that I when I started I was like man

00:06:47,870 --> 00:06:52,460
Punk and now that I'm done I'm like I

00:06:49,070 --> 00:06:54,020
don't need spunk I'm good so anyway the

00:06:52,460 --> 00:06:55,550
point here is really to encourage you to

00:06:54,020 --> 00:06:57,080
do some of the same stuff yourself I

00:06:55,550 --> 00:06:58,850
know sometimes when I'm building this

00:06:57,080 --> 00:07:00,800
automation it feels like this it feels

00:06:58,850 --> 00:07:03,320
like I'm that guy off on the side

00:07:00,800 --> 00:07:04,850
building the condiment passer but as

00:07:03,320 --> 00:07:06,980
long as you iterate and release often

00:07:04,850 --> 00:07:09,140
you can build big things with a lot of

00:07:06,980 --> 00:07:10,190
small steps it'll definitely save you at

00:07:09,140 --> 00:07:13,400
least some time and probably come in

00:07:10,190 --> 00:07:17,120
handy and production later the end of

00:07:13,400 --> 00:07:18,530
part one no no no no please hold your

00:07:17,120 --> 00:07:21,230
applause until all the Lightning talks

00:07:18,530 --> 00:07:23,930
have come to a complete stop all right

00:07:21,230 --> 00:07:26,930
my next dock I'm gonna brag too much

00:07:23,930 --> 00:07:33,500
this one scored me some accolades in my

00:07:26,930 --> 00:07:36,110
time I also gave this talk at a job

00:07:33,500 --> 00:07:42,440
interview for relevance and you can see

00:07:36,110 --> 00:07:44,800
how that went to be fair to JB what he

00:07:42,440 --> 00:07:46,910
was commenting on he was actually right

00:07:44,800 --> 00:07:50,450
anyway a little bit of a background

00:07:46,910 --> 00:07:52,550
story so LivingSocial acquired a company

00:07:50,450 --> 00:07:53,720
in the Middle East if you want to do

00:07:52,550 --> 00:07:55,220
business in the Middle East apparently

00:07:53,720 --> 00:07:56,540
you've got to pay attention to the large

00:07:55,220 --> 00:07:58,940
percentage of the population you still

00:07:56,540 --> 00:08:00,590
wants to use cash and that's fine if

00:07:58,940 --> 00:08:02,510
you're shipping up product which we do

00:08:00,590 --> 00:08:04,580
now these days but for the most part we

00:08:02,510 --> 00:08:06,740
didn't so we were literally shipping

00:08:04,580 --> 00:08:09,110
pieces of paper to people's doorsteps so

00:08:06,740 --> 00:08:10,610
that we could collect cash so I Glen

00:08:09,110 --> 00:08:13,400
Vandenberg and I worked on a system that

00:08:10,610 --> 00:08:17,240
we needed to use internally for that and

00:08:13,400 --> 00:08:19,430
so Glen spun up a rails app and we

00:08:17,240 --> 00:08:22,970
called it actually he called it Cod

00:08:19,430 --> 00:08:26,270
mongrel and through factory girl in it

00:08:22,970 --> 00:08:28,040
so here's a very simple compressed view

00:08:26,270 --> 00:08:29,380
of the the factory grow fixtures we've

00:08:28,040 --> 00:08:31,940
got customers who have addresses

00:08:29,380 --> 00:08:34,310
customers who have purchases each person

00:08:31,940 --> 00:08:36,260
purchase has a collection and the

00:08:34,310 --> 00:08:38,540
collection is a state machine that it

00:08:36,260 --> 00:08:42,170
goes through to round all of us through

00:08:38,540 --> 00:08:43,400
the collection stages and so we got an

00:08:42,170 --> 00:08:44,960
introduction pretty quickly because we

00:08:43,400 --> 00:08:46,730
only had a few internal staff using it

00:08:44,960 --> 00:08:48,320
at that time and so while work you know

00:08:46,730 --> 00:08:50,060
and I started with this r-spec that we

00:08:48,320 --> 00:08:52,580
needed the details are not important you

00:08:50,060 --> 00:08:54,380
just see that right up here I'm asking

00:08:52,580 --> 00:08:56,360
factory or only give me a collection and

00:08:54,380 --> 00:08:58,670
then I run the spec and then it fails

00:08:56,360 --> 00:09:00,080
for this reason and if we dig into the

00:08:58,670 --> 00:09:01,670
collection

00:09:00,080 --> 00:09:02,930
it's actually pretty straightforward we

00:09:01,670 --> 00:09:04,940
just needed the collection to have a

00:09:02,930 --> 00:09:07,640
purchase so we can access the customer

00:09:04,940 --> 00:09:09,800
but there's no purchase and when I went

00:09:07,640 --> 00:09:12,620
back to the factory go code that made me

00:09:09,800 --> 00:09:15,709
wonder the heck's going on man

00:09:12,620 --> 00:09:17,209
just asked you to do that so it wasn't

00:09:15,709 --> 00:09:18,620
the first time I'd run into some funky

00:09:17,209 --> 00:09:20,060
edge cases with Factory girl and I'd

00:09:18,620 --> 00:09:21,290
heard some good things about machinists

00:09:20,060 --> 00:09:24,850
so I actually just scrubbed it all

00:09:21,290 --> 00:09:27,260
switched over to machinist same r-spec

00:09:24,850 --> 00:09:31,490
we've got machinists in their place and

00:09:27,260 --> 00:09:32,930
same error and same conundrum what the

00:09:31,490 --> 00:09:35,000
heck is going on now if you're like

00:09:32,930 --> 00:09:37,790
hacker guerrilla you may be asking

00:09:35,000 --> 00:09:39,760
yourself why if you're me though I don't

00:09:37,790 --> 00:09:42,470
care frankly at this point because I

00:09:39,760 --> 00:09:43,910
know that I can just do this myself so I

00:09:42,470 --> 00:09:46,279
ripped out machinist and factory girl

00:09:43,910 --> 00:09:49,880
now this isn't quite as sexy it's not a

00:09:46,279 --> 00:09:51,890
DSL syntax and all that and it's a few

00:09:49,880 --> 00:09:55,910
more lines of code but guess what it

00:09:51,890 --> 00:09:58,850
works so anyway the bottom line on this

00:09:55,910 --> 00:10:00,640
for me is you okaywell hacker girl still

00:09:58,850 --> 00:10:02,779
wants to know why so we'll look at why

00:10:00,640 --> 00:10:03,890
it took a lot of the dig through some of

00:10:02,779 --> 00:10:05,720
the internals to get at this but

00:10:03,890 --> 00:10:07,040
basically what's going on here is

00:10:05,720 --> 00:10:09,200
Factory girl a machinist are

00:10:07,040 --> 00:10:11,089
instantiating active records in two

00:10:09,200 --> 00:10:12,410
steps so it's making it first and then

00:10:11,089 --> 00:10:14,270
it's going through the trouble of

00:10:12,410 --> 00:10:19,459
assigning the attributes well we had an

00:10:14,270 --> 00:10:21,260
edge case in this case okay okay because

00:10:19,459 --> 00:10:23,839
our collection was using an initialized

00:10:21,260 --> 00:10:25,610
block on state machine that needed there

00:10:23,839 --> 00:10:28,130
to be a purchase in there this worked in

00:10:25,610 --> 00:10:30,770
production but dealing with Factory Girl

00:10:28,130 --> 00:10:32,209
and I know this is an edge case and

00:10:30,770 --> 00:10:33,170
perhaps I'm picky on factory row but

00:10:32,209 --> 00:10:34,700
what I'm trying to figure out what's

00:10:33,170 --> 00:10:36,980
going on this is one of the stack traces

00:10:34,700 --> 00:10:38,959
I'm faced with I mean there's three

00:10:36,980 --> 00:10:43,040
method missing calls I mean this looks

00:10:38,959 --> 00:10:44,690
like a word cloud from Java code so kind

00:10:43,040 --> 00:10:46,699
of the bottom line for me is active

00:10:44,690 --> 00:10:52,339
records hard enough I don't need your

00:10:46,699 --> 00:10:55,190
freaking DSL on top of it okay hello

00:10:52,339 --> 00:11:00,470
irony Miller author of active record DSL

00:10:55,190 --> 00:11:02,149
squeal I apologize I think he forgives

00:11:00,470 --> 00:11:03,680
me you know Ernie's a good guy why don't

00:11:02,149 --> 00:11:05,510
I'll stand up we can give Ernie a big

00:11:03,680 --> 00:11:07,990
Friday hug I got my camera right here

00:11:05,510 --> 00:11:10,390
just kidding that's Thursday for you

00:11:07,990 --> 00:11:12,940
so anyway if we compare my homeworld

00:11:10,390 --> 00:11:17,230
version back over to factory girl again

00:11:12,940 --> 00:11:19,600
it's more lines of code it's a little

00:11:17,230 --> 00:11:20,890
less syntax but it's kind of clean this

00:11:19,600 --> 00:11:22,840
is a pattern that I've started using

00:11:20,890 --> 00:11:25,120
myself basically just having a base

00:11:22,840 --> 00:11:27,120
fixture with a create method that calls

00:11:25,120 --> 00:11:29,350
out to new and then for address customer

00:11:27,120 --> 00:11:31,780
purchase collection they just have a new

00:11:29,350 --> 00:11:35,290
and really all of the same code is in

00:11:31,780 --> 00:11:37,090
both versions because really that code

00:11:35,290 --> 00:11:39,940
is focused on your domain not on the

00:11:37,090 --> 00:11:42,220
action of creating this stuff and this

00:11:39,940 --> 00:11:43,630
stuff is also easy to debug into because

00:11:42,220 --> 00:11:45,190
unlike some of the DSOs they have to do

00:11:43,630 --> 00:11:48,460
all their stuff at initialization time

00:11:45,190 --> 00:11:50,530
on top of that I mean the source of the

00:11:48,460 --> 00:11:52,420
DSL is about one step removed from the

00:11:50,530 --> 00:11:54,370
runtime insanity that if it's setting up

00:11:52,420 --> 00:11:57,910
on you so you kind of lose the benefit

00:11:54,370 --> 00:12:01,000
of it being open source so what about

00:11:57,910 --> 00:12:03,820
mocks this part of the talk is subtitled

00:12:01,000 --> 00:12:05,140
not all expectations were satisfied I'm

00:12:03,820 --> 00:12:06,610
gonna pick on mocha for this a little

00:12:05,140 --> 00:12:08,440
bit here because it's not mochas fault

00:12:06,610 --> 00:12:10,300
that our purchase active record has that

00:12:08,440 --> 00:12:12,550
many fields but when I first ran into

00:12:10,300 --> 00:12:14,050
this it didn't work so that was a lot of

00:12:12,550 --> 00:12:18,880
the most helpful error messages in the

00:12:14,050 --> 00:12:20,620
world and then this one here I mean this

00:12:18,880 --> 00:12:22,270
is just kind of like the drunk guy at

00:12:20,620 --> 00:12:23,620
the party who's been drinking who knows

00:12:22,270 --> 00:12:25,120
what then it goes for that piece of

00:12:23,620 --> 00:12:26,950
shrimp that's been sitting out on the

00:12:25,120 --> 00:12:28,780
buffet for eight hours and he puts it in

00:12:26,950 --> 00:12:30,370
his mouth and then he just all over the

00:12:28,780 --> 00:12:31,870
floor you've got this crime scene he's

00:12:30,370 --> 00:12:33,700
like I don't know everyone wrong but you

00:12:31,870 --> 00:12:35,790
know good luck and figure that out

00:12:33,700 --> 00:12:35,790
yourself

00:12:36,210 --> 00:12:40,750
Moke is nice it's clean you can do this

00:12:38,980 --> 00:12:43,300
but other things are nice and clean too

00:12:40,750 --> 00:12:44,710
like just using Struck's or if you don't

00:12:43,300 --> 00:12:46,540
like the separation between attribute

00:12:44,710 --> 00:12:48,700
name and value you can use open structs

00:12:46,540 --> 00:12:49,930
keep those things together that's also

00:12:48,700 --> 00:12:51,340
nice and clean you may be thinking well

00:12:49,930 --> 00:12:53,650
that's just a data object what about

00:12:51,340 --> 00:12:56,320
behavior well occasionally you can do

00:12:53,650 --> 00:12:58,900
some fun Ruby hacks by just defining a

00:12:56,320 --> 00:13:01,900
method on an instance if you've got a

00:12:58,900 --> 00:13:05,740
short little test or gosh forbid use a

00:13:01,900 --> 00:13:07,570
class so really in this whole rants

00:13:05,740 --> 00:13:09,610
about doing it yourself versus using

00:13:07,570 --> 00:13:11,440
someone's gem this is really the larger

00:13:09,610 --> 00:13:14,620
issue that we run into a lot of build

00:13:11,440 --> 00:13:16,150
versus buy and my point is that when

00:13:14,620 --> 00:13:17,680
you're choosing buy which is sometimes a

00:13:16,150 --> 00:13:19,720
valid choice just know that you're

00:13:17,680 --> 00:13:22,160
trading in familiarity and transparency

00:13:19,720 --> 00:13:25,230
with what you're doing

00:13:22,160 --> 00:13:28,819
we all build things it's okay for us to

00:13:25,230 --> 00:13:28,819
build some custom stuff besides

00:13:33,940 --> 00:13:39,790
alright end of part 2 so track your big

00:13:38,440 --> 00:13:40,690
stuff as I've mentioned in addition to

00:13:39,790 --> 00:13:42,130
payments work I've done some

00:13:40,690 --> 00:13:43,510
internationalization work which came in

00:13:42,130 --> 00:13:47,910
really handy when I needed to make this

00:13:43,510 --> 00:13:47,910
slide for my rail stuff real comfort so

00:13:49,020 --> 00:13:53,410
so on our main monorail app LivingSocial

00:13:52,150 --> 00:13:55,620
which actually has been on a good diet I

00:13:53,410 --> 00:13:57,970
think it's lost more weight than I have

00:13:55,620 --> 00:14:00,310
at the time we were looking at this we

00:13:57,970 --> 00:14:01,630
had about 2500 translation keys and we

00:14:00,310 --> 00:14:03,250
knew through some static analysis we

00:14:01,630 --> 00:14:05,590
only had about half of them in use and

00:14:03,250 --> 00:14:07,150
we tinkered with using Ripper which has

00:14:05,590 --> 00:14:08,590
got some cool stuff but it just gets

00:14:07,150 --> 00:14:11,260
complicated fast when you're doing an

00:14:08,590 --> 00:14:14,620
interpolation of key strings so we took

00:14:11,260 --> 00:14:15,790
a look at doing this at run time and the

00:14:14,620 --> 00:14:18,100
biggest concern doing this at run time

00:14:15,790 --> 00:14:19,770
is some of our requests have a lot of

00:14:18,100 --> 00:14:22,630
translate cosimo so we don't want to be

00:14:19,770 --> 00:14:24,340
writing off to a log or Redis 76 times a

00:14:22,630 --> 00:14:26,860
request and risking the performance hit

00:14:24,340 --> 00:14:28,540
just so that we can you know save little

00:14:26,860 --> 00:14:30,040
stuff because it's not that big a deal

00:14:28,540 --> 00:14:32,200
to have that many keys in your app if

00:14:30,040 --> 00:14:33,730
you're not even using hardly any of them

00:14:32,200 --> 00:14:35,740
but anytime I want to go into a new

00:14:33,730 --> 00:14:37,810
market and we've got to do all that

00:14:35,740 --> 00:14:40,480
translation work that's when we start

00:14:37,810 --> 00:14:42,160
losing money so after working on this

00:14:40,480 --> 00:14:45,970
for a while we've come out with a tool

00:14:42,160 --> 00:14:48,910
that we were calling Humperdinck he can

00:14:45,970 --> 00:14:51,160
track a falcon on a cloudy day so this

00:14:48,910 --> 00:14:52,330
was recently open sourced a little

00:14:51,160 --> 00:14:56,170
disclaimer some of the code in

00:14:52,330 --> 00:14:58,270
Humperdinck is it's not what we're using

00:14:56,170 --> 00:15:00,820
in production the core classes are but

00:14:58,270 --> 00:15:03,190
my first run attic and was horribly

00:15:00,820 --> 00:15:04,980
coupled to the i18n gem and really the

00:15:03,190 --> 00:15:07,630
core tech in it is not

00:15:04,980 --> 00:15:09,160
internationalization specific so I just

00:15:07,630 --> 00:15:11,860
want to look through that code a little

00:15:09,160 --> 00:15:13,210
bit here so one of the core classes here

00:15:11,860 --> 00:15:15,690
is a class called dirty side which is

00:15:13,210 --> 00:15:18,010
pretty simple it just internal

00:15:15,690 --> 00:15:19,990
encapsulate a couple sets called clean

00:15:18,010 --> 00:15:22,090
and dirty and then anytime you're

00:15:19,990 --> 00:15:23,500
appending data to the set then it's just

00:15:22,090 --> 00:15:26,260
tracking which stuff is dirty

00:15:23,500 --> 00:15:27,370
which stuff is clean you can read it if

00:15:26,260 --> 00:15:28,060
it's already and clean it's going to

00:15:27,370 --> 00:15:30,340
ignore it

00:15:28,060 --> 00:15:33,480
you can also initialize it with whatever

00:15:30,340 --> 00:15:36,250
you had before it so it's just kind of

00:15:33,480 --> 00:15:38,290
geared towards efficiently tracking only

00:15:36,250 --> 00:15:39,730
stuff that hasn't been tracked before at

00:15:38,290 --> 00:15:41,080
the moment we're only have persistence

00:15:39,730 --> 00:15:43,370
in Redis but it would be simple to add

00:15:41,080 --> 00:15:46,250
additional backends that you want to

00:15:43,370 --> 00:15:47,660
to put this in so the registered ESET

00:15:46,250 --> 00:15:49,940
subclasses dirty setting and anytime

00:15:47,660 --> 00:15:55,160
clean is called it's gonna write that

00:15:49,940 --> 00:15:56,750
off to Redis another core class in here

00:15:55,160 --> 00:15:59,060
is called tracker trackers still trying

00:15:56,750 --> 00:16:02,320
to find its way in the world it's kind

00:15:59,060 --> 00:16:02,320
of a glue was weird

00:16:03,480 --> 00:16:09,100
hello

00:16:06,360 --> 00:16:10,990
alright so the tracker class here is

00:16:09,100 --> 00:16:13,420
designed to kind of fill in the gaps and

00:16:10,990 --> 00:16:15,310
also most importantly I have some error

00:16:13,420 --> 00:16:17,170
handling here we don't want any

00:16:15,310 --> 00:16:18,850
exceptions causing trouble with more

00:16:17,170 --> 00:16:20,350
processing requests we want that request

00:16:18,850 --> 00:16:21,490
to go through if there's something wrong

00:16:20,350 --> 00:16:24,519
with the tracking code we want the

00:16:21,490 --> 00:16:28,120
tracker to get out of the way and so

00:16:24,519 --> 00:16:30,490
here's a sample for key tracking and

00:16:28,120 --> 00:16:31,510
this is kind of the basic method here

00:16:30,490 --> 00:16:33,579
some of this probably needs to be

00:16:31,510 --> 00:16:35,230
reworked so it's easier to reuse but

00:16:33,579 --> 00:16:38,050
basically if the trackers still enabled

00:16:35,230 --> 00:16:39,910
either because it hasn't broken yet or

00:16:38,050 --> 00:16:41,230
we might disable it because we have

00:16:39,910 --> 00:16:45,610
performance switches that we can toggle

00:16:41,230 --> 00:16:47,110
features on and off with at runtime then

00:16:45,610 --> 00:16:50,100
if it's enabled go ahead and track that

00:16:47,110 --> 00:16:53,079
piece of data and then here's another

00:16:50,100 --> 00:16:55,899
example showing that mixed into the ITN

00:16:53,079 --> 00:16:57,490
and back in class so some configuration

00:16:55,899 --> 00:16:59,980
options if we go back to dirty set when

00:16:57,490 --> 00:17:02,110
it's a pending stuff it has this getting

00:16:59,980 --> 00:17:03,190
messy method that we'll use to decide if

00:17:02,110 --> 00:17:05,530
it's going to start moving things from

00:17:03,190 --> 00:17:07,449
dirty to clean and here we've got two

00:17:05,530 --> 00:17:08,919
options that max dirty items in the

00:17:07,449 --> 00:17:11,829
clean timeout so you can either set a

00:17:08,919 --> 00:17:13,839
size or time threshold for deciding when

00:17:11,829 --> 00:17:16,030
to persist this stuff off these two

00:17:13,839 --> 00:17:16,990
options you can set them fairly high and

00:17:16,030 --> 00:17:19,660
that works really well for any

00:17:16,990 --> 00:17:22,449
long-running processes like unicorn you

00:17:19,660 --> 00:17:24,640
might lose some if you've persisted and

00:17:22,449 --> 00:17:26,230
then gather some more data and then you

00:17:24,640 --> 00:17:28,209
do a redeploy or something in that

00:17:26,230 --> 00:17:29,800
process goes down but we've had this

00:17:28,209 --> 00:17:31,450
running in production for weeks at a

00:17:29,800 --> 00:17:33,520
time to help make sure we hit all of the

00:17:31,450 --> 00:17:36,130
edge cases so that's not a big deal if

00:17:33,520 --> 00:17:37,750
you have rake tasks or cron jobs that

00:17:36,130 --> 00:17:40,000
are short-lived and some of those other

00:17:37,750 --> 00:17:40,960
options don't work you can either crank

00:17:40,000 --> 00:17:43,150
it down if you're not worried about

00:17:40,960 --> 00:17:44,950
performance or you can use the add exit

00:17:43,150 --> 00:17:48,910
block although add eggs that sometimes

00:17:44,950 --> 00:17:50,620
adds some headaches to the deal if

00:17:48,910 --> 00:17:53,679
you're working with rescue rescues kind

00:17:50,620 --> 00:17:55,419
of a special snowflake in that it will

00:17:53,679 --> 00:17:57,220
have a parent process than any time it

00:17:55,419 --> 00:17:59,980
pulls an event off its going to fork and

00:17:57,220 --> 00:18:01,990
put that event down into a child process

00:17:59,980 --> 00:18:03,429
and as a part of that to help make sure

00:18:01,990 --> 00:18:05,260
things don't get weird because the

00:18:03,429 --> 00:18:07,480
parent process may have at exit hooks

00:18:05,260 --> 00:18:09,880
that it doesn't want triggering every

00:18:07,480 --> 00:18:12,730
single time it finishes an event it will

00:18:09,880 --> 00:18:14,710
call a bang which is part of the kernel

00:18:12,730 --> 00:18:14,980
which says exit but don't run any of

00:18:14,710 --> 00:18:17,559
your

00:18:14,980 --> 00:18:19,570
exit hooks so we were faced with short

00:18:17,559 --> 00:18:22,660
running jobs that we couldn't persist

00:18:19,570 --> 00:18:24,460
the stuff off it exit time so mixed into

00:18:22,660 --> 00:18:26,410
Humperdinck is a module called fork

00:18:24,460 --> 00:18:28,540
piping which will detect when it's in

00:18:26,410 --> 00:18:32,200
that fort state and then set up a pipe

00:18:28,540 --> 00:18:34,840
between the parent and child process you

00:18:32,200 --> 00:18:37,660
can mix that in that way in one way and

00:18:34,840 --> 00:18:40,150
then back to this method before we this

00:18:37,660 --> 00:18:42,460
gets enhanced so that actually checks to

00:18:40,150 --> 00:18:44,290
see if it's fork to parent and then just

00:18:42,460 --> 00:18:45,820
do the normal stuff but if it's a child

00:18:44,290 --> 00:18:47,410
process than overwrite that off to the

00:18:45,820 --> 00:18:49,000
child pipe so that then you can

00:18:47,410 --> 00:18:50,380
configure your parent process however

00:18:49,000 --> 00:18:51,880
you want and it's going to be

00:18:50,380 --> 00:18:53,530
long-running so probably you can just

00:18:51,880 --> 00:18:56,470
fall back on your size and threshold

00:18:53,530 --> 00:18:58,030
limits there's a quick screen shot of

00:18:56,470 --> 00:18:59,919
Baskerville which is our internal

00:18:58,030 --> 00:19:02,350
translation management app written

00:18:59,919 --> 00:19:04,090
mostly by Greg Vaughn and this is just a

00:19:02,350 --> 00:19:05,200
tracker view that we added you could

00:19:04,090 --> 00:19:06,580
ignore those numbers up there because

00:19:05,200 --> 00:19:09,179
they're wrong and that's my fault

00:19:06,580 --> 00:19:12,460
but this is just a running list of

00:19:09,179 --> 00:19:14,200
strings that we have used and strings

00:19:12,460 --> 00:19:15,790
that we have not used these colored

00:19:14,200 --> 00:19:17,740
squares over here actually one per

00:19:15,790 --> 00:19:20,440
process where the trackers involved and

00:19:17,740 --> 00:19:22,270
there are all clickable and expandable

00:19:20,440 --> 00:19:23,679
and they'll give you stats about each

00:19:22,270 --> 00:19:26,799
tracker which came in handy we were

00:19:23,679 --> 00:19:28,000
trying to roll this thing out so real

00:19:26,799 --> 00:19:29,620
quick another tool that we've been using

00:19:28,000 --> 00:19:31,750
for doing runtime Tracking's been worked

00:19:29,620 --> 00:19:34,480
on by dan mayor and he open sourced this

00:19:31,750 --> 00:19:37,660
recently called cover band it's in its

00:19:34,480 --> 00:19:39,370
early days and primarily is used for web

00:19:37,660 --> 00:19:40,960
processes I don't think that's gonna it

00:19:39,370 --> 00:19:42,669
has any support for back-end stuff yet

00:19:40,960 --> 00:19:44,890
but that would be simple to use but

00:19:42,669 --> 00:19:46,750
basically this is just the code coverage

00:19:44,890 --> 00:19:48,880
that you would have a test time but at

00:19:46,750 --> 00:19:50,470
production time and so at the moment

00:19:48,880 --> 00:19:53,110
it's real straightforward

00:19:50,470 --> 00:19:55,059
it's a middleware this configure

00:19:53,110 --> 00:19:57,610
sampling line that the first part of its

00:19:55,059 --> 00:19:59,140
call is really just so you can set a

00:19:57,610 --> 00:20:00,910
percentage so you probably don't want to

00:19:59,140 --> 00:20:02,110
do code coverage on most of your

00:20:00,910 --> 00:20:06,400
requests you probably wanna do them on

00:20:02,110 --> 00:20:08,260
very few there's a coverage class in

00:20:06,400 --> 00:20:10,870
Ruby that Dan had worked with it was

00:20:08,260 --> 00:20:12,610
having some trouble with so instead he's

00:20:10,870 --> 00:20:14,679
falling back to use the set trace func

00:20:12,610 --> 00:20:17,400
and that's been working well that gets

00:20:14,679 --> 00:20:19,720
called for each line in every file so a

00:20:17,400 --> 00:20:21,820
cover band has its own ad file

00:20:19,720 --> 00:20:23,950
implementation that just stores that in

00:20:21,820 --> 00:20:26,530
a hash for the duration of the request

00:20:23,950 --> 00:20:28,390
which gets run here and then for report

00:20:26,530 --> 00:20:32,049
coverage it just dumps that hash

00:20:28,390 --> 00:20:33,850
back to Redis and when you're done then

00:20:32,049 --> 00:20:35,440
since this is all Redis on the backend

00:20:33,850 --> 00:20:37,299
you can go grab that whenever you want

00:20:35,440 --> 00:20:39,429
and Dan's written some code that'll

00:20:37,299 --> 00:20:40,870
output in the simple cub report format

00:20:39,429 --> 00:20:43,840
and so you can get code coverage from

00:20:40,870 --> 00:20:45,910
production and it's actually pretty

00:20:43,840 --> 00:20:48,580
simple so that's again been open sourced

00:20:45,910 --> 00:20:52,000
recently I suggest you check it out it's

00:20:48,580 --> 00:20:55,900
an awesome tool that one actually is

00:20:52,000 --> 00:21:00,070
damn so any bonus points for anybody who

00:20:55,900 --> 00:21:02,490
knows what band that is that's a shame I

00:21:00,070 --> 00:21:07,210
had a joke tied to that so never mind

00:21:02,490 --> 00:21:08,799
alright so to wrap up my last talks a

00:21:07,210 --> 00:21:10,870
quick stroll through a whole bunch of

00:21:08,799 --> 00:21:12,970
different analogies that I've kind of

00:21:10,870 --> 00:21:15,100
collected I'm a nerd so I like to

00:21:12,970 --> 00:21:17,890
collect these kinds of things in my

00:21:15,100 --> 00:21:19,870
homegrown wiki which I wrote in Ruby 1:6

00:21:17,890 --> 00:21:22,210
and is now hosted as a rails 4 engine

00:21:19,870 --> 00:21:24,309
it's a real Frankenstein of technology

00:21:22,210 --> 00:21:26,470
it's awesome so anyway if we're gonna

00:21:24,309 --> 00:21:28,299
talk analogies we got to start with an

00:21:26,470 --> 00:21:30,130
obvious one and that's the construction

00:21:28,299 --> 00:21:32,890
analogy now many of you may be groaning

00:21:30,130 --> 00:21:34,360
many of you hate this analogy probably

00:21:32,890 --> 00:21:36,070
because we frequently use it to shame

00:21:34,360 --> 00:21:37,840
ourselves anytime something goes wrong

00:21:36,070 --> 00:21:39,490
we're like you know those construction

00:21:37,840 --> 00:21:41,140
guys have got this stuff all figured out

00:21:39,490 --> 00:21:43,840
I don't know why we can't get our stuff

00:21:41,140 --> 00:21:45,250
together it's actually a decent analogy

00:21:43,840 --> 00:21:47,200
if you apply it correctly and that

00:21:45,250 --> 00:21:49,929
usually falls down in two ways one is

00:21:47,200 --> 00:21:52,720
that the code is actually the design we

00:21:49,929 --> 00:21:54,520
like to think of the plans and pretty

00:21:52,720 --> 00:21:57,760
pictures or all the design and then the

00:21:54,520 --> 00:21:58,960
grunt works done by the coders at this

00:21:57,760 --> 00:22:01,000
concept thus far when it was first

00:21:58,960 --> 00:22:03,850
introduced to C++ journal article called

00:22:01,000 --> 00:22:05,950
what is software design back in the 90s

00:22:03,850 --> 00:22:07,600
and then gladden has a great talk called

00:22:05,950 --> 00:22:09,669
real software engineering where he does

00:22:07,600 --> 00:22:11,890
a deep dive into all this so I highly

00:22:09,669 --> 00:22:13,929
suggest you check it out and the other

00:22:11,890 --> 00:22:15,429
problem here is that we kind of presumed

00:22:13,929 --> 00:22:17,290
that the construction industry is

00:22:15,429 --> 00:22:19,210
awesome when in fact they struggle with

00:22:17,290 --> 00:22:21,640
the same kinds of scheduling stuff that

00:22:19,210 --> 00:22:25,450
we struggle with as well back in 2002

00:22:21,640 --> 00:22:27,190
Mary poppendieck went to a construction

00:22:25,450 --> 00:22:28,540
seminar and like how to do master

00:22:27,190 --> 00:22:29,919
planning and told him she's like yeah

00:22:28,540 --> 00:22:30,910
I'm a software developer because we've

00:22:29,919 --> 00:22:32,140
been told that you guys have this all

00:22:30,910 --> 00:22:36,490
figured out and they like nearly

00:22:32,140 --> 00:22:37,900
laughter out of the place so just one of

00:22:36,490 --> 00:22:39,790
the common two of the common problems

00:22:37,900 --> 00:22:41,650
they run into is materials that are

00:22:39,790 --> 00:22:42,010
waiting for workers or workers that are

00:22:41,650 --> 00:22:43,360
waiting for

00:22:42,010 --> 00:22:45,700
materials and while we probably have

00:22:43,360 --> 00:22:47,530
less of that kind of issue although I'm

00:22:45,700 --> 00:22:49,150
sure a lot of us have spent time sitting

00:22:47,530 --> 00:22:51,180
at a desk waiting for our computer or

00:22:49,150 --> 00:22:53,440
waiting for some server to be spun up

00:22:51,180 --> 00:22:58,000
they have the same kind of problems as

00:22:53,440 --> 00:22:59,800
well the prank Prague I prefer to the

00:22:58,000 --> 00:23:01,900
construction analogy that of a garden

00:22:59,800 --> 00:23:04,570
say with a garden is a constant

00:23:01,900 --> 00:23:05,950
assumption of maintenance Luke Coleman

00:23:04,570 --> 00:23:07,630
goes on with his he says there is an

00:23:05,950 --> 00:23:09,760
overall plan but the result requires

00:23:07,630 --> 00:23:12,520
more tending and why is we soft or

00:23:09,760 --> 00:23:14,320
require tending well things shift if you

00:23:12,520 --> 00:23:16,240
think about all the gems we use all the

00:23:14,320 --> 00:23:18,580
tooling databases OS as they all need

00:23:16,240 --> 00:23:21,010
upgrades the only security patches are

00:23:18,580 --> 00:23:23,380
Hardware will fall down we're renting

00:23:21,010 --> 00:23:24,820
clouds and whatnot and so we have

00:23:23,380 --> 00:23:26,440
scaling issues and all those things

00:23:24,820 --> 00:23:29,140
shift the landscape so it makes it

00:23:26,440 --> 00:23:30,280
unpredictable that's one of the reasons

00:23:29,140 --> 00:23:31,630
I think people like the construction

00:23:30,280 --> 00:23:33,880
analogies they think well that buildings

00:23:31,630 --> 00:23:35,620
done we don't have to do it anymore but

00:23:33,880 --> 00:23:37,090
we all know when we write software and

00:23:35,620 --> 00:23:38,740
the things only begun of course with

00:23:37,090 --> 00:23:41,830
buildings - they actually go through

00:23:38,740 --> 00:23:43,990
that as well so Jim Highsmith prefers

00:23:41,830 --> 00:23:46,630
the analogy of climbing to help bring in

00:23:43,990 --> 00:23:48,550
the notion of risk management as in

00:23:46,630 --> 00:23:50,290
climbing one continually evaluates the

00:23:48,550 --> 00:23:52,150
margin of safety matching the objective

00:23:50,290 --> 00:23:54,850
and current conditions with the climbing

00:23:52,150 --> 00:23:57,850
teams capability built to CHEO likes the

00:23:54,850 --> 00:23:59,410
analogy of a flying the overall flight

00:23:57,850 --> 00:24:00,910
plan is important but the exact route to

00:23:59,410 --> 00:24:02,770
be follow cannot be defined due to

00:24:00,910 --> 00:24:04,150
changing conditions in fact certain

00:24:02,770 --> 00:24:05,860
conditions can't be known until you're

00:24:04,150 --> 00:24:07,450
underway and if you delay in an effort

00:24:05,860 --> 00:24:09,280
to acquire requirements that are so

00:24:07,450 --> 00:24:13,630
absolute but the path is completely

00:24:09,280 --> 00:24:16,180
defined you'll never depart test-driven

00:24:13,630 --> 00:24:17,950
and refactoring is a lot like working in

00:24:16,180 --> 00:24:20,140
a professional kitchen Michel feathers

00:24:17,950 --> 00:24:22,180
wrote about this back in 2005 after

00:24:20,140 --> 00:24:25,000
watching some of these cooking shows on

00:24:22,180 --> 00:24:26,500
TV one of the commenters on his article

00:24:25,000 --> 00:24:28,750
recalled his own experience in a kitchen

00:24:26,500 --> 00:24:31,120
saying clean as you go wasn't so much a

00:24:28,750 --> 00:24:32,350
suggestion but rather a law those

00:24:31,120 --> 00:24:34,210
workspaces of cooks who didn't

00:24:32,350 --> 00:24:35,770
constantly clean would become so messy

00:24:34,210 --> 00:24:37,840
that the quality of food rapidly

00:24:35,770 --> 00:24:39,160
diminished this problem would progress

00:24:37,840 --> 00:24:44,200
until the other cooks were forced in to

00:24:39,160 --> 00:24:46,660
step in and clean up coding without

00:24:44,200 --> 00:24:48,220
tests is kind of like playing chess

00:24:46,660 --> 00:24:50,110
without having a computer to analyze

00:24:48,220 --> 00:24:52,810
your lines now that's not very

00:24:50,110 --> 00:24:53,590
sportsmanlike but we're not in it for

00:24:52,810 --> 00:24:55,300
the sport

00:24:53,590 --> 00:24:56,560
we just need to use the computer to

00:24:55,300 --> 00:24:59,950
increase the feedback and visibility

00:24:56,560 --> 00:25:02,920
into our code adding new features to

00:24:59,950 --> 00:25:06,100
your software so I like adding a baby to

00:25:02,920 --> 00:25:11,190
your family internationalisation is a

00:25:06,100 --> 00:25:14,140
lot like polygamy software development

00:25:11,190 --> 00:25:15,340
is kind of like clearing some land the

00:25:14,140 --> 00:25:17,050
first solution you've coded through a

00:25:15,340 --> 00:25:18,760
problem clears a path from A to B but

00:25:17,050 --> 00:25:20,830
the works only begun if you stop there

00:25:18,760 --> 00:25:22,000
users are likely to wander into other

00:25:20,830 --> 00:25:23,560
parts of the field and what's tricky

00:25:22,000 --> 00:25:25,450
from across the benefit perspective is

00:25:23,560 --> 00:25:27,730
deciding how far off that path you need

00:25:25,450 --> 00:25:29,710
to go to allow users or what kind of

00:25:27,730 --> 00:25:31,930
constructions you need to build to keep

00:25:29,710 --> 00:25:34,000
them in the clear although that analogy

00:25:31,930 --> 00:25:36,190
kind of suffers because it presumes that

00:25:34,000 --> 00:25:37,420
you've got this nice flat 2d field that

00:25:36,190 --> 00:25:38,950
you can see everything so it's a little

00:25:37,420 --> 00:25:40,840
bit more like carving tunnels through a

00:25:38,950 --> 00:25:42,370
mountain and each new tunnel can

00:25:40,840 --> 00:25:44,830
unexpectedly intersect with another one

00:25:42,370 --> 00:25:46,510
caused cave-ins and so automated testing

00:25:44,830 --> 00:25:47,980
can help us explore these tunnels so

00:25:46,510 --> 00:25:50,490
make sure there's not problems there

00:25:47,980 --> 00:25:52,570
before our users find out there are

00:25:50,490 --> 00:25:55,480
people like martin fowler talk about

00:25:52,570 --> 00:25:56,890
hiring experienced developers with broad

00:25:55,480 --> 00:25:59,710
knowledge for the same reason you'd

00:25:56,890 --> 00:26:01,990
probably want to have experienced

00:25:59,710 --> 00:26:04,450
explorers like Lewis and Clark the

00:26:01,990 --> 00:26:09,070
Explorer is not Lewis and Clark the evil

00:26:04,450 --> 00:26:10,450
bunny duo thanks Google Images every

00:26:09,070 --> 00:26:12,490
project is unique and it's like

00:26:10,450 --> 00:26:14,500
unexplored territory and no one's built

00:26:12,490 --> 00:26:16,360
this particular system with the same

00:26:14,500 --> 00:26:18,850
combination of tools domain and people

00:26:16,360 --> 00:26:20,860
so the process of exploration is going

00:26:18,850 --> 00:26:22,990
to yield unknown obstacles and you need

00:26:20,860 --> 00:26:24,880
people who know how to adapt in the face

00:26:22,990 --> 00:26:26,590
of the unknown it also reminds me of a

00:26:24,880 --> 00:26:27,430
great answer that was given on Quora by

00:26:26,590 --> 00:26:29,530
Michael Wolfe

00:26:27,430 --> 00:26:31,690
so why software estimates can be off and

00:26:29,530 --> 00:26:33,940
off by a factor of two three or more he

00:26:31,690 --> 00:26:36,400
uses the analogy of planning a walk from

00:26:33,940 --> 00:26:37,810
San Francisco to LA and when you start

00:26:36,400 --> 00:26:39,070
at a high level google map you think

00:26:37,810 --> 00:26:41,740
yeah I can probably knock that out in

00:26:39,070 --> 00:26:43,270
about ten days then you start off on

00:26:41,740 --> 00:26:45,550
your first day and then you realize that

00:26:43,270 --> 00:26:47,830
map's got a lot more contours in it but

00:26:45,550 --> 00:26:49,240
then of course you meet actual reality

00:26:47,830 --> 00:26:53,680
and you think that's nothing like what's

00:26:49,240 --> 00:26:55,960
actually on the map this is a nut

00:26:53,680 --> 00:26:57,700
processor from a farm in Banks Oregon

00:26:55,960 --> 00:27:00,160
and I think it might capture what we do

00:26:57,700 --> 00:27:02,440
the best we're not operating machines

00:27:00,160 --> 00:27:06,330
like this we're designing virtual ones

00:27:02,440 --> 00:27:09,149
we're map reducing raw data into the

00:27:06,330 --> 00:27:10,980
dreams and hopefully profit are made of

00:27:09,149 --> 00:27:12,570
anytime we want to make a change to our

00:27:10,980 --> 00:27:14,820
systems even a small one we're

00:27:12,570 --> 00:27:16,830
potentially affecting the flow of a lot

00:27:14,820 --> 00:27:19,590
of nuts and no one wants to be sweeping

00:27:16,830 --> 00:27:21,659
those things off the floor it's almost

00:27:19,590 --> 00:27:24,690
done but there is one more ultimate

00:27:21,659 --> 00:27:27,360
analogy that we can mention and that is

00:27:24,690 --> 00:27:32,360
the meta analogy that developing

00:27:27,360 --> 00:27:35,010
software is like creating an analogy

00:27:32,360 --> 00:27:38,789
we're modeling reality at our own

00:27:35,010 --> 00:27:43,230
virtual world of nerd awesome making

00:27:38,789 --> 00:27:55,970
things that are like other things that

00:27:43,230 --> 00:27:55,970
too much so a secret of comedy timing

00:28:01,159 --> 00:28:05,639
all right so we reached the end of this

00:28:03,450 --> 00:28:07,769
talk and after all of these talks

00:28:05,639 --> 00:28:11,580
there's one takeaway that I'd like you

00:28:07,769 --> 00:28:14,490
to all take away it's that we're hiring

00:28:11,580 --> 00:28:17,419
and I get a bonus for every referral so

00:28:14,490 --> 00:28:17,419

YouTube URL: https://www.youtube.com/watch?v=A1kjyQnQhUI


