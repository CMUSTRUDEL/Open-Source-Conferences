Title: Big Ruby 2014 - Lightweight Business Intelligence with Ruby, Rails, and MongoDB
Publication date: 2020-01-24
Playlist: Big Ruby 2014
Description: 
	By Coraline Ada Ehmke

Agile companies need timely and reliable access to data to make critical business decisions. In the enterprise world, this is accomplished with expensive and esoteric data warehousing solutions, while younger organizations make do with generic analytics platforms. In this talk I will introduce an agile approach to business intelligence that drives decision support, feeds data analysis, and delivers flexible reporting capabilities. 

We will explore the complete architecture of a lightweight BI system that is used in the real world to capture and analyze customer information, monitor user behaviour, feed machine-learning algorithms for decision support, and deliver real knowledge and value to business stakeholders.

Help us caption & translate this video!

http://amara.org/v/FG3P/
Captions: 
	00:00:19,930 --> 00:00:28,250
alright hi everybody I am Coraline 8am

00:00:26,029 --> 00:00:29,930
key I work at apartments calm we're

00:00:28,250 --> 00:00:32,689
hiring I'm a principal developer there

00:00:29,930 --> 00:00:34,910
and like our previous speaker I did not

00:00:32,689 --> 00:00:38,000
have a CS degree in fact I'm a college

00:00:34,910 --> 00:00:41,200
dropout but I'm an autodidact which

00:00:38,000 --> 00:00:43,040
means that I know the word autodidact

00:00:41,200 --> 00:00:47,359
basically I taught myself everything

00:00:43,040 --> 00:00:50,270
that I care about um one more thing I'm

00:00:47,359 --> 00:00:53,660
from Chicago and there are no fewer than

00:00:50,270 --> 00:00:56,539
five quarries in Chicago who do Ruby I'm

00:00:53,660 --> 00:00:57,800
the one with the fuchsia hair just all

00:00:56,539 --> 00:01:00,199
right so what is business intelligence

00:00:57,800 --> 00:01:00,980
what do I mean by it this is what we're

00:01:00,199 --> 00:01:03,320
going to be talking about today

00:01:00,980 --> 00:01:05,750
basically the stages of adoption to

00:01:03,320 --> 00:01:07,820
business intelligence whether or not we

00:01:05,750 --> 00:01:10,790
can build it ourselves and whether we

00:01:07,820 --> 00:01:12,020
should build it ourselves so of course I

00:01:10,790 --> 00:01:14,390
have to start with the definition right

00:01:12,020 --> 00:01:16,310
so business intelligence means taking

00:01:14,390 --> 00:01:18,770
mission critical knowledge inside of

00:01:16,310 --> 00:01:21,290
your company organizing it to provide a

00:01:18,770 --> 00:01:23,930
historical perspective and using it for

00:01:21,290 --> 00:01:25,430
real-time decision making it sounds

00:01:23,930 --> 00:01:27,530
pretty straightforward it's reporting

00:01:25,430 --> 00:01:29,960
essentially sometimes it's called data

00:01:27,530 --> 00:01:31,640
science sometimes it's called data

00:01:29,960 --> 00:01:33,020
warehousing and they're all sorts of

00:01:31,640 --> 00:01:35,240
names for it in the end it's about

00:01:33,020 --> 00:01:36,920
taking the data that is essential to

00:01:35,240 --> 00:01:38,600
running your company making sure it's

00:01:36,920 --> 00:01:40,670
accessible to the people who need it and

00:01:38,600 --> 00:01:42,229
putting it in a form that's going to

00:01:40,670 --> 00:01:46,880
support the business actually making

00:01:42,229 --> 00:01:49,310
decisions moving forward I like to talk

00:01:46,880 --> 00:01:52,250
about the three pillars of Technology

00:01:49,310 --> 00:01:54,020
supporting business technology was in

00:01:52,250 --> 00:01:55,369
business we're not always partners and

00:01:54,020 --> 00:01:57,079
we sort of take for granted now a

00:01:55,369 --> 00:01:58,729
software developer said if you're a

00:01:57,079 --> 00:02:00,140
company of course you have a development

00:01:58,729 --> 00:02:02,570
team and of course you have all these

00:02:00,140 --> 00:02:05,270
other things so I think there are three

00:02:02,570 --> 00:02:07,610
main parts of how technology supports

00:02:05,270 --> 00:02:09,110
business versus infrastructure and this

00:02:07,610 --> 00:02:11,920
is everyone everything from the iron

00:02:09,110 --> 00:02:14,990
that the applications are running on to

00:02:11,920 --> 00:02:18,890
the accounting system the HR system all

00:02:14,990 --> 00:02:21,020
the stuff that I'm really bored by the

00:02:18,890 --> 00:02:22,820
second sort of pillar is applications

00:02:21,020 --> 00:02:24,709
and as developers this is where we spend

00:02:22,820 --> 00:02:26,150
most of our time we enjoy writing

00:02:24,709 --> 00:02:26,780
applications we're delivering business

00:02:26,150 --> 00:02:28,790
value

00:02:26,780 --> 00:02:31,040
the applications we're letting the

00:02:28,790 --> 00:02:33,200
business scale hopefully through the

00:02:31,040 --> 00:02:35,060
applications we create retracting

00:02:33,200 --> 00:02:39,650
customers by the applications we create

00:02:35,060 --> 00:02:42,410
and the third tier is data data to a

00:02:39,650 --> 00:02:44,420
developer is often an afterthought we

00:02:42,410 --> 00:02:46,100
use our data stores to store objects

00:02:44,420 --> 00:02:48,290
that we need in our applications and

00:02:46,100 --> 00:02:50,000
once we're done with those objects we're

00:02:48,290 --> 00:02:52,040
kind of done with thinking about the

00:02:50,000 --> 00:02:53,810
data maybe you have a report that you

00:02:52,040 --> 00:02:55,130
have to build for the accounting team or

00:02:53,810 --> 00:02:56,480
something like that but again once it's

00:02:55,130 --> 00:02:59,840
built your kind of done with it and

00:02:56,480 --> 00:03:02,570
you're working off their requirements so

00:02:59,840 --> 00:03:06,050
this this is recognized as a sort of

00:03:02,570 --> 00:03:07,700
flaw in sort of a week pillar a lot of a

00:03:06,050 --> 00:03:10,550
lot of times especially as a business

00:03:07,700 --> 00:03:13,040
gets larger so typically the business

00:03:10,550 --> 00:03:14,630
will want to address how to collect how

00:03:13,040 --> 00:03:16,489
to use the massive amount of data that's

00:03:14,630 --> 00:03:21,440
been built up and how to actually turn

00:03:16,489 --> 00:03:24,880
it into an asset for them when

00:03:21,440 --> 00:03:26,930
developers make friends with data though

00:03:24,880 --> 00:03:28,810
Fluttershy gets your cutie mark which is

00:03:26,930 --> 00:03:32,930
a MongoDB cutie mark by the way and

00:03:28,810 --> 00:03:34,430
friendship is magic damn it so I want to

00:03:32,930 --> 00:03:37,489
talk about how you actually go about

00:03:34,430 --> 00:03:38,900
adopting business intelligence systems

00:03:37,489 --> 00:03:41,329
and I'm going to do it in three acts

00:03:38,900 --> 00:03:43,010
this is typically the first two acts are

00:03:41,329 --> 00:03:44,360
typically how most companies do it and

00:03:43,010 --> 00:03:46,100
unfortunately they stopped after the

00:03:44,360 --> 00:03:47,959
second act throw up their hands in

00:03:46,100 --> 00:03:51,530
despair and you know wander off in the

00:03:47,959 --> 00:03:52,880
distance looking for enlightenment the

00:03:51,530 --> 00:03:54,200
third phase is the one that I'm

00:03:52,880 --> 00:03:57,140
proposing that I hope that all of you

00:03:54,200 --> 00:03:58,790
will go forward and build so this is a

00:03:57,140 --> 00:04:01,100
Fiji mermaid I don't know if you're

00:03:58,790 --> 00:04:03,079
familiar with this in the late

00:04:01,100 --> 00:04:05,150
nineteenth and early twentieth centuries

00:04:03,079 --> 00:04:07,370
there were a lot of traveling traveling

00:04:05,150 --> 00:04:10,670
sideshows and circus shows and the

00:04:07,370 --> 00:04:14,660
feejee mermaid was basically the torso

00:04:10,670 --> 00:04:17,030
of a monkey sewn onto the body of the

00:04:14,660 --> 00:04:18,979
tail of a fish and there were some paper

00:04:17,030 --> 00:04:21,590
mache does sort of make the transition

00:04:18,979 --> 00:04:24,470
kind of smooth and the legend was that

00:04:21,590 --> 00:04:26,240
it was caught by a fisherman in Fiji and

00:04:24,470 --> 00:04:28,760
now it's like on display for everyone to

00:04:26,240 --> 00:04:31,520
see and a lot of people believed in it

00:04:28,760 --> 00:04:33,500
so if you're the kind of person who

00:04:31,520 --> 00:04:35,870
believes in the feejee mermaid you're

00:04:33,500 --> 00:04:37,729
probably also the person who thinks you

00:04:35,870 --> 00:04:39,300
can report straight out of your

00:04:37,729 --> 00:04:41,500
transactional database

00:04:39,300 --> 00:04:43,150
everyone has done this at some point in

00:04:41,500 --> 00:04:45,460
time don't feel embarrassed about it I

00:04:43,150 --> 00:04:46,720
have done it many many times I'm not

00:04:45,460 --> 00:04:48,100
going to ask you to embarrass yourselves

00:04:46,720 --> 00:04:53,170
by raising your hands but I know you're

00:04:48,100 --> 00:04:56,170
out there so what happens when you do

00:04:53,170 --> 00:04:58,630
this our data stores are transactional

00:04:56,170 --> 00:05:02,380
data stores are built for what they call

00:04:58,630 --> 00:05:04,090
transactions so we have we have a lot of

00:05:02,380 --> 00:05:05,370
like distinct tables hopefully you're

00:05:04,090 --> 00:05:07,660
not doing single table inheritance

00:05:05,370 --> 00:05:09,490
distinct tables for each of our objects

00:05:07,660 --> 00:05:11,470
there are complex relationships between

00:05:09,490 --> 00:05:13,420
them maybe join tables maybe join models

00:05:11,470 --> 00:05:15,730
and when it comes time to report off of

00:05:13,420 --> 00:05:19,630
those you get some really really gnarly

00:05:15,730 --> 00:05:21,010
sequel which brings with it performance

00:05:19,630 --> 00:05:22,360
issues and this is something that one of

00:05:21,010 --> 00:05:23,380
the workshops is actually talking about

00:05:22,360 --> 00:05:26,050
a little later you might want to check

00:05:23,380 --> 00:05:28,270
into that and to get around the

00:05:26,050 --> 00:05:31,360
performance issues you decide I can

00:05:28,270 --> 00:05:34,390
write better sequel an arrow can good

00:05:31,360 --> 00:05:36,310
luck what you find is that when you're

00:05:34,390 --> 00:05:38,350
doing reporting you're impacting your

00:05:36,310 --> 00:05:40,090
production resources your servers will

00:05:38,350 --> 00:05:42,130
get slow so you're like I guess we

00:05:40,090 --> 00:05:46,000
better only run these reports at 1am I

00:05:42,130 --> 00:05:46,990
hope you're not global and in the end

00:05:46,000 --> 00:05:48,130
you throw up your hands like these

00:05:46,990 --> 00:05:50,410
stakeholders just don't know what they

00:05:48,130 --> 00:05:53,980
want fine I'll give them access to the

00:05:50,410 --> 00:05:57,490
database third circle of hell i'm pretty

00:05:53,980 --> 00:06:01,660
sure which brings with it an increasing

00:05:57,490 --> 00:06:04,330
chance of catastrophic data loss don't

00:06:01,660 --> 00:06:06,220
trust him with your database he's a

00:06:04,330 --> 00:06:08,950
master at Excel he's a really nice guy

00:06:06,220 --> 00:06:13,690
looks great in gray don't let him in

00:06:08,950 --> 00:06:15,700
here sequel so after you lose all of

00:06:13,690 --> 00:06:18,850
your data because the guy in accounting

00:06:15,700 --> 00:06:22,240
messed up in his connection with his

00:06:18,850 --> 00:06:25,450
Excel spreadsheet you say we're gonna go

00:06:22,240 --> 00:06:27,370
enterprise and that means we have to

00:06:25,450 --> 00:06:28,780
bring him specialists when a company

00:06:27,370 --> 00:06:30,880
gets to a certain size they'd like to

00:06:28,780 --> 00:06:32,890
deploy what I call the blue and khaki

00:06:30,880 --> 00:06:35,020
army and I'm sorry and if you were blue

00:06:32,890 --> 00:06:38,320
and khaki today not all blue and khaki

00:06:35,020 --> 00:06:39,910
people okay but they'll basically bring

00:06:38,320 --> 00:06:41,440
in consultants to say we need a data

00:06:39,910 --> 00:06:44,620
warehousing an enterprise reporting

00:06:41,440 --> 00:06:46,120
system so what gets built is an entirely

00:06:44,620 --> 00:06:48,460
separate stack from everything else

00:06:46,120 --> 00:06:52,630
usually it's a windows server running

00:06:48,460 --> 00:06:55,400
java I'm sorry disrupt low

00:06:52,630 --> 00:06:56,960
you get nightly background jobs that are

00:06:55,400 --> 00:06:59,950
loading the data from your transactional

00:06:56,960 --> 00:07:02,920
database into your data warehouse

00:06:59,950 --> 00:07:07,370
generally these are run with ETL scripts

00:07:02,920 --> 00:07:11,570
extract transform and load scripts they

00:07:07,370 --> 00:07:14,330
have no tests and they're not in source

00:07:11,570 --> 00:07:17,990
control so that's a I'm sure everything

00:07:14,330 --> 00:07:19,250
will be fine with those the schema in a

00:07:17,990 --> 00:07:21,490
data warehouse is optimized for

00:07:19,250 --> 00:07:24,140
reporting which is a good thing right

00:07:21,490 --> 00:07:27,610
but it's reporting on day old data and

00:07:24,140 --> 00:07:32,240
maybe that's okay if you are sewing I

00:07:27,610 --> 00:07:35,630
don't know I want fresh data I don't

00:07:32,240 --> 00:07:37,610
know about you guys but also there was

00:07:35,630 --> 00:07:42,440
this old process that I'm old enough to

00:07:37,610 --> 00:07:44,540
remember called waterfall data rousing

00:07:42,440 --> 00:07:47,090
requires a waterfall process because

00:07:44,540 --> 00:07:48,950
everything is so hard to do you have to

00:07:47,090 --> 00:07:50,600
do all of your planning up front and if

00:07:48,950 --> 00:07:52,520
you get it wrong you get to start all

00:07:50,600 --> 00:07:56,090
over again and pay the consultants for

00:07:52,520 --> 00:07:58,480
another three to six months and speak

00:07:56,090 --> 00:08:01,190
you those consultants they are not cheap

00:07:58,480 --> 00:08:04,400
in the end what you get is something

00:08:01,190 --> 00:08:05,960
really really enterprising and if Edward

00:08:04,400 --> 00:08:11,030
Tufte were dead he'd be spinning in his

00:08:05,960 --> 00:08:13,240
grave right now so don't trust these

00:08:11,030 --> 00:08:16,490
guys with your data either

00:08:13,240 --> 00:08:19,040
I'm sure they're nice guys yes they're

00:08:16,490 --> 00:08:21,950
in khaki and blue but the sandals are

00:08:19,040 --> 00:08:26,690
mass demonstration of individuality that

00:08:21,950 --> 00:08:28,280
I've just never seen before so act three

00:08:26,690 --> 00:08:29,780
most most businesses will give up at

00:08:28,280 --> 00:08:31,790
this point they have a data warehouse it

00:08:29,780 --> 00:08:33,229
emails reports once a week and they sort

00:08:31,790 --> 00:08:35,120
of forget about it forget about the

00:08:33,229 --> 00:08:36,860
promise of it but there is a third

00:08:35,120 --> 00:08:41,300
option here and that's what i call

00:08:36,860 --> 00:08:44,030
lightweight bi so when a company

00:08:41,300 --> 00:08:48,920
realizes that their data is an asset and

00:08:44,030 --> 00:08:50,720
that is too important to outsource maybe

00:08:48,920 --> 00:08:55,220
it's time to go back on that build

00:08:50,720 --> 00:08:58,250
versus by decision the promise is

00:08:55,220 --> 00:08:59,930
real-time data put together by people

00:08:58,250 --> 00:09:02,560
who understand the data people who wrote

00:08:59,930 --> 00:09:04,310
the structures that the data is based on

00:09:02,560 --> 00:09:07,910
actually providing that real-time

00:09:04,310 --> 00:09:09,890
decision support using your existing

00:09:07,910 --> 00:09:11,630
development team and using your existing

00:09:09,890 --> 00:09:14,060
stack so you don't have to maintain

00:09:11,630 --> 00:09:17,870
those Java packages on the Windows

00:09:14,060 --> 00:09:20,720
servers because it's built by your

00:09:17,870 --> 00:09:23,540
existing dev team you get to change your

00:09:20,720 --> 00:09:25,850
mind you're investing resources that

00:09:23,540 --> 00:09:27,470
will understand how it works and be able

00:09:25,850 --> 00:09:29,330
to change it when you change your

00:09:27,470 --> 00:09:30,560
business needs or when you decide you

00:09:29,330 --> 00:09:32,810
need something a little bit different

00:09:30,560 --> 00:09:35,510
you don't have to pay the army to come

00:09:32,810 --> 00:09:38,090
back and fix it for you you can be

00:09:35,510 --> 00:09:39,830
iterative and agile again you don't have

00:09:38,090 --> 00:09:42,020
to design every single report and the

00:09:39,830 --> 00:09:43,730
entire schema from the get-go and then

00:09:42,020 --> 00:09:46,040
implement it and then tested and hope

00:09:43,730 --> 00:09:47,720
that it's right this is what we're all

00:09:46,040 --> 00:09:49,730
about right being iterative and agile

00:09:47,720 --> 00:09:51,080
that's not what business business

00:09:49,730 --> 00:09:54,680
intelligence or data warehousing is

00:09:51,080 --> 00:09:57,200
about so you can trust your developers

00:09:54,680 --> 00:09:59,390
and it's a hard thing to do because data

00:09:57,200 --> 00:10:01,550
warehousing business intelligence data

00:09:59,390 --> 00:10:04,790
science these sound like big scary

00:10:01,550 --> 00:10:06,350
things but the concepts may be a little

00:10:04,790 --> 00:10:09,050
difficult to wrap your head around it

00:10:06,350 --> 00:10:11,810
first but in the end it's something that

00:10:09,050 --> 00:10:13,070
any competent team of developers can

00:10:11,810 --> 00:10:14,960
wrap their heads around and can deliver

00:10:13,070 --> 00:10:16,490
value in this domain and actually

00:10:14,960 --> 00:10:20,800
they'll be better for your company

00:10:16,490 --> 00:10:22,910
having gone through that process so

00:10:20,800 --> 00:10:24,380
maybe I've got you interested in the

00:10:22,910 --> 00:10:25,510
idea of lightweight business

00:10:24,380 --> 00:10:26,860
intelligence

00:10:25,510 --> 00:10:29,440
how do you actually go about getting

00:10:26,860 --> 00:10:31,720
started with it you want to collaborate

00:10:29,440 --> 00:10:33,910
and i don't mean the sort of

00:10:31,720 --> 00:10:36,040
collaboration that we regularly do is

00:10:33,910 --> 00:10:38,440
agile developers where we work with our

00:10:36,040 --> 00:10:40,330
stakeholders and we sort of agree on

00:10:38,440 --> 00:10:43,000
things and we then we run within iterate

00:10:40,330 --> 00:10:44,560
show them often i mean like sitting down

00:10:43,000 --> 00:10:46,660
and getting out of your comfort zone

00:10:44,560 --> 00:10:48,100
stepping away from the technology for a

00:10:46,660 --> 00:10:49,510
little while and trying to figure out

00:10:48,100 --> 00:10:51,550
what the business is actually all about

00:10:49,510 --> 00:10:53,710
what are the important pieces of data

00:10:51,550 --> 00:10:58,360
they're not your user model they're your

00:10:53,710 --> 00:11:00,820
customer so really working hand in hand

00:10:58,360 --> 00:11:02,500
with the people who are going to be

00:11:00,820 --> 00:11:04,870
served by the data that you are

00:11:02,500 --> 00:11:06,940
presenting to them not only to

00:11:04,870 --> 00:11:09,280
understand their needs but but so that

00:11:06,940 --> 00:11:11,410
you can communicate back to them what

00:11:09,280 --> 00:11:13,390
sort of things are possible they may not

00:11:11,410 --> 00:11:16,270
know every aspect of what's being

00:11:13,390 --> 00:11:19,420
recorded for example they not know that

00:11:16,270 --> 00:11:23,200
we're automatically by using devised for

00:11:19,420 --> 00:11:25,150
example recording the last login so they

00:11:23,200 --> 00:11:27,610
can say oh how loyal our customers how

00:11:25,150 --> 00:11:30,370
many times I did logging in that's data

00:11:27,610 --> 00:11:31,510
that we know is there they may not know

00:11:30,370 --> 00:11:33,220
it's there and it may be of some value

00:11:31,510 --> 00:11:37,480
to them so it's it's a two-way

00:11:33,220 --> 00:11:39,250
conversation it's a collaboration then

00:11:37,480 --> 00:11:40,690
you want to formulate your questions I'd

00:11:39,250 --> 00:11:43,720
like to think that data is there to

00:11:40,690 --> 00:11:46,540
answer questions some people think of it

00:11:43,720 --> 00:11:48,820
as a historical record or an audit trail

00:11:46,540 --> 00:11:50,050
I think it's answering questions and if

00:11:48,820 --> 00:11:51,850
you don't know what your questions are

00:11:50,050 --> 00:11:54,010
there's no way you can find the answer

00:11:51,850 --> 00:11:55,660
so work with your stakeholders to figure

00:11:54,010 --> 00:11:57,220
out what are the questions that we want

00:11:55,660 --> 00:11:58,810
to answer from the data and these are

00:11:57,220 --> 00:12:01,510
generally the same questions that

00:11:58,810 --> 00:12:03,700
managers are asking their employees

00:12:01,510 --> 00:12:06,790
every single day how many sign ups did

00:12:03,700 --> 00:12:08,890
we get or how you know what's the life

00:12:06,790 --> 00:12:10,750
cycle of our customers is getting

00:12:08,890 --> 00:12:15,070
shorter or longer for onboarding

00:12:10,750 --> 00:12:17,200
purposes so as a developer you're going

00:12:15,070 --> 00:12:18,460
to say you're going to sort of start

00:12:17,200 --> 00:12:21,100
working on a solution and think about

00:12:18,460 --> 00:12:22,810
the data you already have and start you

00:12:21,100 --> 00:12:24,670
know thinking about maybe I if I took

00:12:22,810 --> 00:12:26,320
this data from here and merge it with

00:12:24,670 --> 00:12:28,180
that over there what you actually want

00:12:26,320 --> 00:12:29,770
to do is take those inferences that you

00:12:28,180 --> 00:12:32,770
have those instincts that you have and

00:12:29,770 --> 00:12:35,050
turn them into facts a fact has a very

00:12:32,770 --> 00:12:38,220
specific meaning in data rousing and

00:12:35,050 --> 00:12:40,600
business intelligence which i think is a

00:12:38,220 --> 00:12:42,459
unnecessary we all know what a fact is a

00:12:40,600 --> 00:12:44,740
fact is an answer to a question a

00:12:42,459 --> 00:12:46,480
truthful answer to a question so if you

00:12:44,740 --> 00:12:49,120
didn't state your questions you can

00:12:46,480 --> 00:12:52,120
figure out where the facts lie and then

00:12:49,120 --> 00:12:54,519
you want to base a schema a database

00:12:52,120 --> 00:12:56,110
schema on what these facts are you're

00:12:54,519 --> 00:13:00,010
not storing objects and state anymore

00:12:56,110 --> 00:13:02,740
you're storing facts preferably you have

00:13:00,010 --> 00:13:07,120
a table or a document collection that

00:13:02,740 --> 00:13:09,790
answers one question which means you do

00:13:07,120 --> 00:13:11,290
normalize a whole lot we're afraid of

00:13:09,790 --> 00:13:15,399
deal anonymization because we're taught

00:13:11,290 --> 00:13:17,589
from the age of maybe five or six Cal

00:13:15,399 --> 00:13:25,540
says Moo don't don't you normalize your

00:13:17,589 --> 00:13:28,240
data was that just me I you want to

00:13:25,540 --> 00:13:29,980
denormalize a lot it's okay for data to

00:13:28,240 --> 00:13:32,440
be stored multiple times in different

00:13:29,980 --> 00:13:35,560
places as long as the fact that are

00:13:32,440 --> 00:13:40,089
stored or you need skip the clever

00:13:35,560 --> 00:13:42,640
graphs in my experience graphs are

00:13:40,089 --> 00:13:45,730
really pretty distractions that deliver

00:13:42,640 --> 00:13:47,680
about zero value the more ink that's

00:13:45,730 --> 00:13:49,570
used on a graph the less informative it

00:13:47,680 --> 00:13:54,190
is and the more it's lying to you I

00:13:49,570 --> 00:13:56,230
prefer columns of data side by side if

00:13:54,190 --> 00:13:57,520
you're doing in comparison or grouped

00:13:56,230 --> 00:13:59,709
logically if you're not doing a

00:13:57,520 --> 00:14:01,270
comparison they actually communicate

00:13:59,709 --> 00:14:04,089
things they invite you to look at them

00:14:01,270 --> 00:14:07,829
and draw conclusions from them whereas a

00:14:04,089 --> 00:14:07,829
graph you're like yep that sure is blue

00:14:08,910 --> 00:14:16,060
so a recipe for success in business

00:14:11,709 --> 00:14:18,490
intelligence your mileage may vary a lot

00:14:16,060 --> 00:14:20,620
of people will have their own opinions

00:14:18,490 --> 00:14:22,600
on the technologies you want to use the

00:14:20,620 --> 00:14:24,130
important thing is that technology that

00:14:22,600 --> 00:14:26,410
you're comfortable with that you know

00:14:24,130 --> 00:14:29,560
the ins and outs of and is your stack

00:14:26,410 --> 00:14:32,560
and is your team that's doing it so this

00:14:29,560 --> 00:14:37,029
is a recipe for success not the recipe

00:14:32,560 --> 00:14:39,459
for success I love Ruby I think all of

00:14:37,029 --> 00:14:42,760
you do ruby is pretty awesome because

00:14:39,459 --> 00:14:44,920
it's built for tdd and remember i said

00:14:42,760 --> 00:14:47,710
with data warehousing with the ETL jobs

00:14:44,920 --> 00:14:49,480
there's no tasks everything is manual

00:14:47,710 --> 00:14:51,820
we can actually test the assumptions

00:14:49,480 --> 00:14:54,220
about how the data is working about how

00:14:51,820 --> 00:14:56,560
the facts are collected and how they're

00:14:54,220 --> 00:15:00,280
being how they're being recorded and

00:14:56,560 --> 00:15:02,260
then reported on Ruby is really easy to

00:15:00,280 --> 00:15:04,300
deploy thanks to you what was that

00:15:02,260 --> 00:15:08,230
company the guy was talking about Heroku

00:15:04,300 --> 00:15:10,600
yeah they make it easy Ruby's great at

00:15:08,230 --> 00:15:13,660
data munging I'm old enough to have been

00:15:10,600 --> 00:15:15,250
a pearl hacker and pearl was like really

00:15:13,660 --> 00:15:16,480
great at data munching and I think

00:15:15,250 --> 00:15:18,370
Rubio's a lot of its data munging

00:15:16,480 --> 00:15:20,920
capabilities to the fact that pearl

00:15:18,370 --> 00:15:23,200
existed and there are some great

00:15:20,920 --> 00:15:24,640
visualization libraries for Ruby a lot

00:15:23,200 --> 00:15:26,500
of them are on the JavaScript side these

00:15:24,640 --> 00:15:29,260
days but they're really easy to

00:15:26,500 --> 00:15:31,030
integrate so you can make if you do need

00:15:29,260 --> 00:15:33,400
to charge you can make really really

00:15:31,030 --> 00:15:36,250
pretty charts that actually can

00:15:33,400 --> 00:15:37,960
communicate information and ruby has a

00:15:36,250 --> 00:15:39,730
variety of really powerful object

00:15:37,960 --> 00:15:41,080
relation mappers that will really come

00:15:39,730 --> 00:15:43,600
in handy when you're trying to build

00:15:41,080 --> 00:15:45,160
fact tables this one's a little

00:15:43,600 --> 00:15:46,660
controversial lately I don't know why

00:15:45,160 --> 00:15:49,320
but mongos got in a really bad rap

00:15:46,660 --> 00:15:52,210
somebody told me a couple of days ago

00:15:49,320 --> 00:15:56,410
you're the only person I know who's

00:15:52,210 --> 00:15:57,730
using right I would say if you if

00:15:56,410 --> 00:16:00,340
you're not getting what you expected a

00:15:57,730 --> 00:16:01,870
 you might be doing it wrong I've

00:16:00,340 --> 00:16:03,670
never had a problem with and I've

00:16:01,870 --> 00:16:05,410
been using it for like four years now so

00:16:03,670 --> 00:16:07,590
anyway if you're hater I don't

00:16:05,410 --> 00:16:07,590
care

00:16:07,709 --> 00:16:11,290
 has some great features it has

00:16:09,940 --> 00:16:13,360
flexible schemas you don't have to

00:16:11,290 --> 00:16:15,040
decide the shape of your your data

00:16:13,360 --> 00:16:16,240
structure beforehand if you change your

00:16:15,040 --> 00:16:20,199
mind that's fine and there are no

00:16:16,240 --> 00:16:22,300
migrations migrations are pain if you

00:16:20,199 --> 00:16:24,279
have lots and lots and lots of data that

00:16:22,300 --> 00:16:27,550
you have to go back and touch I can

00:16:24,279 --> 00:16:29,589
store hashes I can store any object that

00:16:27,550 --> 00:16:31,420
I can serialize and deserialize or

00:16:29,589 --> 00:16:33,399
marshal and unmarked so even if it's

00:16:31,420 --> 00:16:35,620
binary I can store it and I only can I

00:16:33,399 --> 00:16:37,600
store it I can search inside of it in my

00:16:35,620 --> 00:16:40,360
database for my queries that's pretty

00:16:37,600 --> 00:16:42,670
awesome MapReduce is really cool if you

00:16:40,360 --> 00:16:44,529
have big slow operations on tons of data

00:16:42,670 --> 00:16:46,180
you need to do and as I learn the hard

00:16:44,529 --> 00:16:47,740
way that's not good for reporting unless

00:16:46,180 --> 00:16:50,110
you're doing those sort of background

00:16:47,740 --> 00:16:51,940
jobs the aggregation framework that's

00:16:50,110 --> 00:16:54,279
new and relatively new over the

00:16:51,940 --> 00:16:55,600
last year is really really amazing and

00:16:54,279 --> 00:16:57,370
really fast and really hard to wrap your

00:16:55,600 --> 00:16:58,750
head around but once you get it you're

00:16:57,370 --> 00:17:00,970
you're cranking through data like you

00:16:58,750 --> 00:17:04,390
wouldn't believe so I love mango for

00:17:00,970 --> 00:17:06,220
reporting and the querying like I talked

00:17:04,390 --> 00:17:08,530
about but you know what if you don't

00:17:06,220 --> 00:17:10,270
like don't use it if you want to

00:17:08,530 --> 00:17:12,669
use with postgres that's great

00:17:10,270 --> 00:17:17,020
there's no nothing that says that your

00:17:12,669 --> 00:17:19,209
rails app has one and only one arm I use

00:17:17,020 --> 00:17:23,980
postgres for transactional data

00:17:19,209 --> 00:17:26,880
for reporting and it makes me happy so I

00:17:23,980 --> 00:17:28,840
talked about facts and storing facts I

00:17:26,880 --> 00:17:30,039
want to talk through what's called us

00:17:28,840 --> 00:17:33,940
what I call a statistical model

00:17:30,039 --> 00:17:37,419
basically a calculation is run every

00:17:33,940 --> 00:17:39,130
time data changes not on demand which

00:17:37,419 --> 00:17:40,240
means that the system is going to be

00:17:39,130 --> 00:17:42,340
really really fast it's going to

00:17:40,240 --> 00:17:44,020
anticipate the question that the user is

00:17:42,340 --> 00:17:47,650
going to answer the going to ask of it

00:17:44,020 --> 00:17:49,059
and have the answer ready and we're not

00:17:47,650 --> 00:17:51,130
talking about 24 hour delays we're

00:17:49,059 --> 00:17:54,190
talking about at worst maybe a 30-second

00:17:51,130 --> 00:17:55,690
delay facts not attributed stop thinking

00:17:54,190 --> 00:17:58,150
about a data storage throwing objects

00:17:55,690 --> 00:18:02,080
you're storing information answers to

00:17:58,150 --> 00:18:03,429
questions because your D normalizing you

00:18:02,080 --> 00:18:05,530
don't have object graph so you have to

00:18:03,429 --> 00:18:09,610
traverse everything is stored in a

00:18:05,530 --> 00:18:11,950
single document denormalized and you're

00:18:09,610 --> 00:18:14,080
optimizing for reporting so everything

00:18:11,950 --> 00:18:16,670
that you want to report on is actually a

00:18:14,080 --> 00:18:20,400
field in this case in a document

00:18:16,670 --> 00:18:22,710
how often is this member buying a trunk

00:18:20,400 --> 00:18:24,690
full of clothes how much is the average

00:18:22,710 --> 00:18:26,220
value of it what's to keep rate all of

00:18:24,690 --> 00:18:27,870
these things that in a transactional

00:18:26,220 --> 00:18:29,700
database you'd be calculating on demand

00:18:27,870 --> 00:18:31,530
that would be really really slow and

00:18:29,700 --> 00:18:32,820
taking up a whole lot of memory we have

00:18:31,530 --> 00:18:36,000
a single document that answers that

00:18:32,820 --> 00:18:37,980
question for a point in time the other

00:18:36,000 --> 00:18:40,470
thing about being about it being a point

00:18:37,980 --> 00:18:42,930
in time piece of data is that you can

00:18:40,470 --> 00:18:45,120
actually recreate history and see how

00:18:42,930 --> 00:18:46,740
things have changed over time that would

00:18:45,120 --> 00:18:49,230
be really really difficult to do if

00:18:46,740 --> 00:18:54,120
you're storing a single object state at

00:18:49,230 --> 00:18:55,530
a time the ETL processes that I talked

00:18:54,120 --> 00:18:58,320
about being really fragile it ran every

00:18:55,530 --> 00:19:00,930
24 hours there's no reason now why they

00:18:58,320 --> 00:19:04,560
can't stream why they can't happen on

00:19:00,930 --> 00:19:05,940
demand so one of the workshop topic I'm

00:19:04,560 --> 00:19:08,280
going to talk about is like an actual

00:19:05,940 --> 00:19:09,780
implementation of this but let's say you

00:19:08,280 --> 00:19:11,130
have a service-oriented architecture

00:19:09,780 --> 00:19:13,170
what I like to call a small app

00:19:11,130 --> 00:19:14,820
ecosystem and you have a messaging

00:19:13,170 --> 00:19:17,550
server in the middle of it messaging bus

00:19:14,820 --> 00:19:20,100
like rabbit you can actually have your

00:19:17,550 --> 00:19:24,600
data collection application listen to

00:19:20,100 --> 00:19:26,370
every message and record it and perform

00:19:24,600 --> 00:19:28,260
calculations on things that change as a

00:19:26,370 --> 00:19:29,640
result of that new data coming in so

00:19:28,260 --> 00:19:31,860
when someone does go to look at the

00:19:29,640 --> 00:19:33,180
report it's up to date and the

00:19:31,860 --> 00:19:36,150
calculations have already been run and

00:19:33,180 --> 00:19:38,130
it's super fast the calculations you do

00:19:36,150 --> 00:19:39,980
are testable because you haven't you

00:19:38,130 --> 00:19:42,840
have inputs and outputs so you can test

00:19:39,980 --> 00:19:45,480
as opposed to having a human look at

00:19:42,840 --> 00:19:49,530
terabytes of data and say it looks okay

00:19:45,480 --> 00:19:51,450
to me they run in the background which

00:19:49,530 --> 00:19:53,250
is fast and the data is up to date so

00:19:51,450 --> 00:19:55,020
it's all good you might have heard that

00:19:53,250 --> 00:19:56,670
was sequel you store in some

00:19:55,020 --> 00:19:59,130
applications you store the recipe not

00:19:56,670 --> 00:20:02,220
the cake I'm happiest when I'm storing

00:19:59,130 --> 00:20:04,260
the recipe and the cake because I can't

00:20:02,220 --> 00:20:08,790
eat a recipe book and I'm too lazy to

00:20:04,260 --> 00:20:10,290
cook so it works the other thing you'll

00:20:08,790 --> 00:20:12,680
want to do in this sort of system is

00:20:10,290 --> 00:20:15,150
built api's to absolutely everything

00:20:12,680 --> 00:20:19,380
because you never know where that data

00:20:15,150 --> 00:20:21,120
wants to be used so don't just build the

00:20:19,380 --> 00:20:23,090
collection application and the storage

00:20:21,120 --> 00:20:25,620
database for your reporting application

00:20:23,090 --> 00:20:27,330
because you might find that you want to

00:20:25,620 --> 00:20:29,490
brag on the front page of your site

00:20:27,330 --> 00:20:31,110
about how many transactions

00:20:29,490 --> 00:20:33,990
a minute people are doing on your site

00:20:31,110 --> 00:20:36,390
or how much if you're like get tip how

00:20:33,990 --> 00:20:38,460
many how much money if we raise are we

00:20:36,390 --> 00:20:40,800
racing every single week and you don't

00:20:38,460 --> 00:20:42,630
want to you can actually put that make

00:20:40,800 --> 00:20:45,390
that real-time data by establishing the

00:20:42,630 --> 00:20:48,390
API endpoint to your reporting server so

00:20:45,390 --> 00:20:50,670
it lends itself to api's lend themselves

00:20:48,390 --> 00:20:52,530
to novel uses of data and that's

00:20:50,670 --> 00:20:54,960
actually one of the promises of 00 is

00:20:52,530 --> 00:20:59,220
finding novel uses for code so that's

00:20:54,960 --> 00:21:02,870
that's a win try it at home experiment

00:20:59,220 --> 00:21:05,070
with it it's not as scary as it seems I

00:21:02,870 --> 00:21:08,400
wanted to walk you through an example of

00:21:05,070 --> 00:21:11,160
a lightweight bi system I like to give

00:21:08,400 --> 00:21:13,860
my projects mythological names because i

00:21:11,160 --> 00:21:15,300
don't find when I was in school as an

00:21:13,860 --> 00:21:17,370
English major and I was really

00:21:15,300 --> 00:21:19,559
interested in comparative mythology

00:21:17,370 --> 00:21:22,110
comparative religion I don't find the

00:21:19,559 --> 00:21:23,790
naming problem to be a hard problem but

00:21:22,110 --> 00:21:25,290
because I find name said that I

00:21:23,790 --> 00:21:27,420
absolutely love and other people are

00:21:25,290 --> 00:21:30,780
like what does that even mean but it

00:21:27,420 --> 00:21:33,330
works for me so so this is a typical

00:21:30,780 --> 00:21:36,360
kind of typical small app ecosystem on

00:21:33,330 --> 00:21:37,700
the left side we have some maybe rails

00:21:36,360 --> 00:21:40,650
applications may be so not for

00:21:37,700 --> 00:21:42,600
applications we have a series of api's

00:21:40,650 --> 00:21:44,400
in the middle we have a message queue on

00:21:42,600 --> 00:21:46,050
the far right we have our transactional

00:21:44,400 --> 00:21:48,360
data store your post crest data store

00:21:46,050 --> 00:21:51,240
and your event data store which is

00:21:48,360 --> 00:21:53,490
recording everything that happens so all

00:21:51,240 --> 00:21:55,170
of the api's whenever an event is

00:21:53,490 --> 00:21:56,850
triggered and the lines are all wrong

00:21:55,170 --> 00:21:59,160
but I try to make it really pretty and I

00:21:56,850 --> 00:22:01,230
guess I kind of broke things anyway all

00:21:59,160 --> 00:22:03,000
these api's send out messages to the

00:22:01,230 --> 00:22:04,890
message queue oh yes right so now I

00:22:03,000 --> 00:22:08,550
messages to the message queue which then

00:22:04,890 --> 00:22:10,380
the event API captures a copy of and

00:22:08,550 --> 00:22:11,670
right to the event data store so someone

00:22:10,380 --> 00:22:13,740
signed up someone bought something

00:22:11,670 --> 00:22:15,840
someone close their account someone

00:22:13,740 --> 00:22:19,290
changed their preferences all of these

00:22:15,840 --> 00:22:21,360
things are stored now these aren't these

00:22:19,290 --> 00:22:22,770
can be object state transitions that you

00:22:21,360 --> 00:22:24,720
record these can be customer

00:22:22,770 --> 00:22:26,880
interactions down to the level of they

00:22:24,720 --> 00:22:28,679
scroll the page it can be really

00:22:26,880 --> 00:22:31,050
literally any event that takes place

00:22:28,679 --> 00:22:32,490
anywhere in your ecosystem it could be

00:22:31,050 --> 00:22:35,010
an admin logging in to check on an

00:22:32,490 --> 00:22:38,220
account record it all because data data

00:22:35,010 --> 00:22:39,000
storage is cheap so everything goes

00:22:38,220 --> 00:22:41,550
through

00:22:39,000 --> 00:22:43,200
through the reporting API everything

00:22:41,550 --> 00:22:44,520
goes through the event API which stores

00:22:43,200 --> 00:22:46,230
everything in the event data store and

00:22:44,520 --> 00:22:48,450
you have this reporting app but you

00:22:46,230 --> 00:22:51,300
might have other apps that talk to your

00:22:48,450 --> 00:22:55,500
your reporting API as well so novel uses

00:22:51,300 --> 00:22:58,200
of data everyone wins so Leviathan this

00:22:55,500 --> 00:22:59,550
is the Leviathan Leviathan basically

00:22:58,200 --> 00:23:03,290
listens to every message that's

00:22:59,550 --> 00:23:05,610
broadcast in the SOA and records it

00:23:03,290 --> 00:23:08,850
don't think about business objects think

00:23:05,610 --> 00:23:10,170
about events I gave a similar talk to

00:23:08,850 --> 00:23:11,850
this one when I was first sort of

00:23:10,170 --> 00:23:14,580
twining the idea from the idea Ruby

00:23:11,850 --> 00:23:16,260
Midwest last last year and then at Windy

00:23:14,580 --> 00:23:19,680
City rails I had a guy come up to me and

00:23:16,260 --> 00:23:22,670
say I tried to build Leviathan and I

00:23:19,680 --> 00:23:25,050
failed twice I don't think it can work

00:23:22,670 --> 00:23:26,670
when I tried to go back and change the

00:23:25,050 --> 00:23:28,410
event and I stopped him right there I

00:23:26,670 --> 00:23:30,840
was like you tried to go back in time

00:23:28,410 --> 00:23:32,820
and change history and things broke for

00:23:30,840 --> 00:23:36,270
you I think science fiction authors have

00:23:32,820 --> 00:23:38,730
been telling us that for decades so it

00:23:36,270 --> 00:23:41,100
was a little odd so you're not swearing

00:23:38,730 --> 00:23:43,620
objects you're storing events events

00:23:41,100 --> 00:23:45,150
don't change here's an event model and

00:23:43,620 --> 00:23:46,380
this is Ellen if you guys are

00:23:45,150 --> 00:23:48,300
familiar with it one of the things I

00:23:46,380 --> 00:23:50,490
like is like right up there and filled

00:23:48,300 --> 00:23:53,550
the schema is declared in the model

00:23:50,490 --> 00:23:54,810
which i think is really nice so here's

00:23:53,550 --> 00:23:58,410
your record event which basically

00:23:54,810 --> 00:24:00,330
creates an event with a label customer

00:23:58,410 --> 00:24:01,620
signed up an application which

00:24:00,330 --> 00:24:03,120
application in the ecosystem was

00:24:01,620 --> 00:24:05,550
responsible for training or triggering

00:24:03,120 --> 00:24:07,860
it and details which as you can see up

00:24:05,550 --> 00:24:10,110
there details is a hash I can throw

00:24:07,860 --> 00:24:11,760
anything i want in there absolutely any

00:24:10,110 --> 00:24:15,540
key value pair that i want and i can

00:24:11,760 --> 00:24:18,150
search on those key value pairs so i can

00:24:15,540 --> 00:24:20,970
say search by ID search by first name

00:24:18,150 --> 00:24:24,380
show me all of the all of the things

00:24:20,970 --> 00:24:26,550
that were bought by people named sally

00:24:24,380 --> 00:24:29,670
searching an arbitrary data really

00:24:26,550 --> 00:24:33,030
really powerful one of the other things

00:24:29,670 --> 00:24:37,350
that Leviathan did was explore it was

00:24:33,030 --> 00:24:39,630
provide explorable filters so this is um

00:24:37,350 --> 00:24:40,800
the UI for it the left side is filters

00:24:39,630 --> 00:24:42,900
like all the things you can possibly

00:24:40,800 --> 00:24:45,570
filter on including the arbitrary data

00:24:42,900 --> 00:24:47,340
points so you could say first name Fred

00:24:45,570 --> 00:24:48,900
or whatever like that even though all

00:24:47,340 --> 00:24:50,760
the records don't have first names not

00:24:48,900 --> 00:24:52,940
part of the schema they can still be

00:24:50,760 --> 00:24:54,860
searched on and in the matching events

00:24:52,940 --> 00:24:57,140
on the right hand side if you clicked on

00:24:54,860 --> 00:24:59,390
when it would open up and on the far

00:24:57,140 --> 00:25:03,350
right campaign source medium contact

00:24:59,390 --> 00:25:05,690
those were related to landing pages so

00:25:03,350 --> 00:25:07,730
there's rue landing page details that

00:25:05,690 --> 00:25:11,060
you were able to search on so you build

00:25:07,730 --> 00:25:13,730
a nice little filter and what you can do

00:25:11,060 --> 00:25:16,400
is say save the filter this is saving

00:25:13,730 --> 00:25:20,120
the recipe right and say this represents

00:25:16,400 --> 00:25:22,370
people who signed up in April and then

00:25:20,120 --> 00:25:25,340
you can store groups of people who match

00:25:22,370 --> 00:25:27,500
those criteria not a relation a formula

00:25:25,340 --> 00:25:30,290
that's applied to events to extract

00:25:27,500 --> 00:25:33,350
people or behaviors that are linked to

00:25:30,290 --> 00:25:35,750
each other which is pretty cool and

00:25:33,350 --> 00:25:37,940
break them into into groups and study

00:25:35,750 --> 00:25:41,210
their behaviors study them side by side

00:25:37,940 --> 00:25:43,670
note no graphs side by side data to see

00:25:41,210 --> 00:25:44,840
people in December versus November how

00:25:43,670 --> 00:25:47,360
much are they spending all these

00:25:44,840 --> 00:25:51,470
statistics all calculated in real time

00:25:47,360 --> 00:25:55,970
as events change or you can dive into a

00:25:51,470 --> 00:25:57,560
single cohort so a few tricks that I've

00:25:55,970 --> 00:26:00,740
learned along the way I'm really good at

00:25:57,560 --> 00:26:02,300
computering by the way business

00:26:00,740 --> 00:26:04,430
intelligence is not rocket science but

00:26:02,300 --> 00:26:05,690
it is not easy and you will have to try

00:26:04,430 --> 00:26:07,160
several times before you get it right

00:26:05,690 --> 00:26:08,630
and please don't come up to me in a

00:26:07,160 --> 00:26:12,230
conference and tell me it's impossible I

00:26:08,630 --> 00:26:16,630
built it if you can't get it to work

00:26:12,230 --> 00:26:19,040
don't say doesn't work don't say

00:26:16,630 --> 00:26:21,620
MapReduce is broken you're doing

00:26:19,040 --> 00:26:24,080
something wrong keep at it you're going

00:26:21,620 --> 00:26:26,600
to fail many times keep at it just like

00:26:24,080 --> 00:26:28,130
any other programming challenge and use

00:26:26,600 --> 00:26:29,360
the tools you're most familiar with to

00:26:28,130 --> 00:26:32,150
make sure that you're getting the most

00:26:29,360 --> 00:26:33,500
value out of them collaborate like you

00:26:32,150 --> 00:26:35,240
really mean it I talked about the

00:26:33,500 --> 00:26:36,560
collaboration if you don't collaborate

00:26:35,240 --> 00:26:39,110
on something like this you're going to

00:26:36,560 --> 00:26:40,220
spend a lot of effort and turn out

00:26:39,110 --> 00:26:42,020
something that no one's ever going to

00:26:40,220 --> 00:26:43,730
look at and as a developer that breaks

00:26:42,020 --> 00:26:46,130
my heart more than anything else when I

00:26:43,730 --> 00:26:48,380
finish a beautiful elegant well

00:26:46,130 --> 00:26:53,990
thought-out system and nobody cares

00:26:48,380 --> 00:26:57,470
that's that's death iterate fiercely she

00:26:53,990 --> 00:26:59,510
looks pretty fierce I like that you you

00:26:57,470 --> 00:27:01,270
really want to make really small steps

00:26:59,510 --> 00:27:03,560
like smaller than two weeks spreads

00:27:01,270 --> 00:27:04,720
challenge every assumption and make sure

00:27:03,560 --> 00:27:07,419
that everything you're doing is

00:27:04,720 --> 00:27:11,440
exactly right make friends with your

00:27:07,419 --> 00:27:13,330
data like I said friendship is magic and

00:27:11,440 --> 00:27:14,620
when we start looking at data we're

00:27:13,330 --> 00:27:18,090
putting data scientists out of work

00:27:14,620 --> 00:27:20,289
which is unfortunate but we're also like

00:27:18,090 --> 00:27:22,480
enhancing and multiplying the value that

00:27:20,289 --> 00:27:26,020
we as developers can deliver to the

00:27:22,480 --> 00:27:28,090
organization so coraline a 2mp yes from

00:27:26,020 --> 00:27:31,090
that data by the way been sick on

00:27:28,090 --> 00:27:33,960
Twitter and banta github I oh thank you

00:27:31,090 --> 00:27:33,960

YouTube URL: https://www.youtube.com/watch?v=Pf_nXuHhods


