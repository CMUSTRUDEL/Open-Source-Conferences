Title: Big Ruby 2014 - Herding Elephants:  by Clint Shryock
Publication date: 2020-01-24
Playlist: Big Ruby 2014
Description: 
	Herding Elephants: How Heroku Uses Ruby to Run the Largest Fleet of Postgres Databases in the World

Heroku operates the largest fleet of Postgres databases in the world. Service oriented architecture, infrastructure as code, and fault tolerance make it possible. Come hear how the Heroku Postgres team uses a handful of Ruby applications to operate and scale the largest herd of your favorite elephant themed RDBMS.

Help us caption & translate this video!

http://amara.org/v/FG4A/
Captions: 
	00:00:19,660 --> 00:00:31,550
all right that's uh that's our H so hi

00:00:26,240 --> 00:00:33,590
everyone my name is Clint I like to

00:00:31,550 --> 00:00:36,080
start all my presentations with a very

00:00:33,590 --> 00:00:40,000
awkward photo of myself kind of break

00:00:36,080 --> 00:00:42,920
the ice and my name spelled very largely

00:00:40,000 --> 00:00:45,280
that's mostly for vanity purposes but

00:00:42,920 --> 00:00:48,620
also just to clarify that my name is not

00:00:45,280 --> 00:00:51,140
Glen Quint client Chad Quinn or anything

00:00:48,620 --> 00:00:54,020
that ends in NT do I have any other

00:00:51,140 --> 00:00:55,340
Clint's in the audience know if there

00:00:54,020 --> 00:00:57,770
was another Clint he would know exactly

00:00:55,340 --> 00:00:59,480
what I'm talking about here we're a call

00:00:57,770 --> 00:01:01,730
and order things I had to spell my name

00:00:59,480 --> 00:01:07,789
and my wife makes fun of me but if I

00:01:01,730 --> 00:01:11,360
don't I'm always Quinn or client I don't

00:01:07,789 --> 00:01:14,000
get that one either so maybe you've

00:01:11,360 --> 00:01:15,860
noticed that i'm not wearing boots and

00:01:14,000 --> 00:01:19,070
I'm not wearing sandals

00:01:15,860 --> 00:01:24,650
and I don't have a cowboy hat so I am

00:01:19,070 --> 00:01:25,250
not from Texas I I come from all the way

00:01:24,650 --> 00:01:28,640
from Missouri

00:01:25,250 --> 00:01:31,670
so yeah I'm sorry that's actually the

00:01:28,640 --> 00:01:32,619
next part right so anyone from Missouri

00:01:31,670 --> 00:01:36,229
yes

00:01:32,619 --> 00:01:38,540
hey two people that's twice as many as I

00:01:36,229 --> 00:01:39,979
was expecting all right so when I got

00:01:38,540 --> 00:01:41,659
here you know I was meeting other people

00:01:39,979 --> 00:01:44,810
and I was saying yeah I'm from Missouri

00:01:41,659 --> 00:01:48,320
and one as one from Missouri does people

00:01:44,810 --> 00:01:51,079
are like st. Louis I love st. Louis it's

00:01:48,320 --> 00:01:53,270
great you know they've got baseball and

00:01:51,079 --> 00:02:00,350
an awesome hockey team and such arch

00:01:53,270 --> 00:02:03,079
right yeah but yeah I'm not I'm not from

00:02:00,350 --> 00:02:03,890
st. Louis so like oh okay it's a city

00:02:03,079 --> 00:02:06,110
yeah

00:02:03,890 --> 00:02:07,670
city of fountains which I honestly don't

00:02:06,110 --> 00:02:11,420
even know if that's Kansas City google

00:02:07,670 --> 00:02:12,230
says it is why it's a city of fountains

00:02:11,420 --> 00:02:14,329
I've no idea

00:02:12,230 --> 00:02:18,950
but there are some fountains there

00:02:14,329 --> 00:02:22,370
apparently and no no I'm not I'm not

00:02:18,950 --> 00:02:24,500
from Kansas City either so they're like

00:02:22,370 --> 00:02:25,580
oh you know I've got their attention now

00:02:24,500 --> 00:02:27,470
because

00:02:25,580 --> 00:02:29,780
their list of cities and missouri's have

00:02:27,470 --> 00:02:33,590
have now been exhausted and I tell them

00:02:29,780 --> 00:02:36,980
I'm from Colombia of course we gotta

00:02:33,590 --> 00:02:37,880
talk I don't know who you are but he

00:02:36,980 --> 00:02:41,330
probably knows what I'm talking about

00:02:37,880 --> 00:02:44,150
cuz then the next comment is oh okay

00:02:41,330 --> 00:02:47,210
well where's where's Colombia there's

00:02:44,150 --> 00:02:49,340
like oh come on Missouri right so we got

00:02:47,210 --> 00:02:51,980
Kansas in the West Kansas City on the

00:02:49,340 --> 00:02:55,040
west and we got st. Louis on the right

00:02:51,980 --> 00:02:56,990
mmm in between then we've got Columbia

00:02:55,040 --> 00:02:58,580
right we're little doubt there and

00:02:56,990 --> 00:03:01,370
Columbia is well known for two things

00:02:58,580 --> 00:03:03,230
one the University of Missouri who had

00:03:01,370 --> 00:03:07,360
an awesome fantastic football season

00:03:03,230 --> 00:03:12,320
better than any Texas team for sure and

00:03:07,360 --> 00:03:14,630
come on up come on up so we're no two

00:03:12,320 --> 00:03:17,570
things right University of Missouri and

00:03:14,630 --> 00:03:20,920
we're known for being exactly in the

00:03:17,570 --> 00:03:23,000
middle of Kansas City and st. Louis I'm

00:03:20,920 --> 00:03:25,460
convinced that we were founded because

00:03:23,000 --> 00:03:28,280
in wagon days we were probably two days

00:03:25,460 --> 00:03:29,510
time outside of st. Louis and on the

00:03:28,280 --> 00:03:31,070
second day you really just don't want to

00:03:29,510 --> 00:03:35,300
sleep in your wagon again so we had to

00:03:31,070 --> 00:03:39,170
build a roof or something so so yeah I

00:03:35,300 --> 00:03:43,610
tell people I'm from Columbia yeah

00:03:39,170 --> 00:03:45,560
that's that's how that goes uh-uh so I'm

00:03:43,610 --> 00:03:47,000
glad I got a little laughs there and if

00:03:45,560 --> 00:03:49,520
anybody who doesn't find this slide

00:03:47,000 --> 00:03:51,530
hilarious I'm really really sorry that

00:03:49,520 --> 00:03:53,540
you don't find this funny I laugh every

00:03:51,530 --> 00:03:55,940
time I see this internally I don't know

00:03:53,540 --> 00:03:58,790
why but if you don't find this funny

00:03:55,940 --> 00:04:01,180
then just hunker town cuz you're in for

00:03:58,790 --> 00:04:04,880
a rough ride so um

00:04:01,180 --> 00:04:07,820
random this was just posted like an hour

00:04:04,880 --> 00:04:08,959
ago and I know it's kind of cliche but

00:04:07,820 --> 00:04:10,610
this is my first time presenting at a

00:04:08,959 --> 00:04:11,840
conference and happens be on a Friday so

00:04:10,610 --> 00:04:13,970
it'd be really cool everybody would

00:04:11,840 --> 00:04:16,549
stand up I can take that funny little

00:04:13,970 --> 00:04:21,799
picture come on no one's standing up oh

00:04:16,549 --> 00:04:26,360
god it's happening yay all right there

00:04:21,799 --> 00:04:28,160
we go yay hugs great all right they even

00:04:26,360 --> 00:04:29,419
got some moves for me you know who's not

00:04:28,160 --> 00:04:32,720
really native to Missouri but that's

00:04:29,419 --> 00:04:35,870
okay so I'll post that picture in a

00:04:32,720 --> 00:04:38,570
little bit I'm on me CT shriyak go ahead

00:04:35,870 --> 00:04:39,020
and retweet that I'll be really famous

00:04:38,570 --> 00:04:43,340
after

00:04:39,020 --> 00:04:45,590
that and somehow profit so yeah I work

00:04:43,340 --> 00:04:47,000
for a company named Heroku if you've

00:04:45,590 --> 00:04:48,740
heard of us you know how awesome we are

00:04:47,000 --> 00:04:51,169
if you have not heard of us we do not

00:04:48,740 --> 00:04:53,870
make signs we're actually a platform

00:04:51,169 --> 00:04:56,750
company and in Missouri that is really

00:04:53,870 --> 00:04:59,599
really difficult to describe I'm a

00:04:56,750 --> 00:05:02,300
Support Engineer at Heroku and a lot of

00:04:59,599 --> 00:05:04,639
people think oh so you do support well

00:05:02,300 --> 00:05:06,500
yes I do but at Heroku a lot of support

00:05:04,639 --> 00:05:09,110
engineering is just like you you know

00:05:06,500 --> 00:05:11,120
we're programming all day but we have a

00:05:09,110 --> 00:05:12,919
specific mind of taking you know all the

00:05:11,120 --> 00:05:15,550
support tickets we get and engineering

00:05:12,919 --> 00:05:18,289
ourselves out of support tickets so

00:05:15,550 --> 00:05:21,470
specifically I work with the Heroku

00:05:18,289 --> 00:05:23,810
Postgres team where we are a database as

00:05:21,470 --> 00:05:27,650
a service for your favorite elephant

00:05:23,810 --> 00:05:31,280
themed relational database the team

00:05:27,650 --> 00:05:35,060
itself is less than 10 people we have

00:05:31,280 --> 00:05:35,930
hundreds of Amazon servers I guess and I

00:05:35,060 --> 00:05:39,620
really pay attention

00:05:35,930 --> 00:05:42,560
thousands of Postgres databases and just

00:05:39,620 --> 00:05:46,009
like the RTF team we are internally

00:05:42,560 --> 00:05:49,690
referred by an acronym of DoD which is

00:05:46,009 --> 00:05:52,009
Department of data and if you need to

00:05:49,690 --> 00:05:55,520
remember what that means it just means

00:05:52,009 --> 00:05:58,039
we are way better than the RTM I've

00:05:55,520 --> 00:05:59,270
ruined that joke this Richard even here

00:05:58,039 --> 00:06:02,000
he's not even hear from you make fun

00:05:59,270 --> 00:06:06,039
areas hi Richard sorry poking fun of you

00:06:02,000 --> 00:06:09,020
so today we're gonna talk about the

00:06:06,039 --> 00:06:11,150
approach we take to managing lots and

00:06:09,020 --> 00:06:15,259
lots of databases in a talk I call

00:06:11,150 --> 00:06:17,779
herding elephants get it elephant you

00:06:15,259 --> 00:06:20,569
know Postgres works out

00:06:17,779 --> 00:06:22,520
so how Heroku uses Ruby to run the

00:06:20,569 --> 00:06:25,569
largest fleet of Postgres databases in

00:06:22,520 --> 00:06:28,490
the world and the asterisks there means

00:06:25,569 --> 00:06:30,889
probably the largest at the time is

00:06:28,490 --> 00:06:32,509
writing that's probably true it might

00:06:30,889 --> 00:06:35,810
not be true for the next few years who

00:06:32,509 --> 00:06:38,569
knows things change it's not really a

00:06:35,810 --> 00:06:42,889
vanity metric we keep track of but it

00:06:38,569 --> 00:06:44,210
sounds really cool on slides I so maybe

00:06:42,889 --> 00:06:46,819
you can tell I've never really spoken at

00:06:44,210 --> 00:06:49,039
a large conference so when I got my

00:06:46,819 --> 00:06:51,259
little acceptance email like you're

00:06:49,039 --> 00:06:52,460
probably thinking now like wow what were

00:06:51,259 --> 00:06:55,310
they thinking with that

00:06:52,460 --> 00:06:57,110
but so I had this title you know that's

00:06:55,310 --> 00:06:58,310
thinking Oh hurting elephants this is

00:06:57,110 --> 00:07:00,830
gonna be great and I can come up with

00:06:58,310 --> 00:07:04,610
this whole talk that's all you know

00:07:00,830 --> 00:07:06,620
oriented around you know the Postgres

00:07:04,610 --> 00:07:08,810
elephant and elephants in general right

00:07:06,620 --> 00:07:10,729
but as I've discovered talking to a

00:07:08,810 --> 00:07:12,590
couple people here I've been here for

00:07:10,729 --> 00:07:15,470
the past few days this is not a post

00:07:12,590 --> 00:07:20,810
crest talk post guest is awesome and we

00:07:15,470 --> 00:07:22,430
love it and it's great but no I'm not

00:07:20,810 --> 00:07:25,910
actually going to talk about Postgres

00:07:22,430 --> 00:07:28,520
things really we could be managing I

00:07:25,910 --> 00:07:30,979
don't know who BOTS or something

00:07:28,520 --> 00:07:32,570
whatever it's really more of an

00:07:30,979 --> 00:07:34,460
architecture talk right it's about

00:07:32,570 --> 00:07:36,949
manage a lot of things in the cloud

00:07:34,460 --> 00:07:40,039
things that we refer to as fleets really

00:07:36,949 --> 00:07:44,050
so it's about managing fleets right and

00:07:40,039 --> 00:07:44,050
who doesn't love Star Destroyers come on

00:07:45,550 --> 00:07:54,110
get you are a rebel scum so yeah if you

00:07:52,039 --> 00:08:00,039
came here to here important and cool

00:07:54,110 --> 00:08:00,039
things about managing Postgres sorry

00:08:00,310 --> 00:08:04,550
and so yeah I had this idea of hurting

00:08:02,960 --> 00:08:06,650
elephants because it's thousands of

00:08:04,550 --> 00:08:09,469
Postgres databases right and I'll make

00:08:06,650 --> 00:08:11,150
this all elephant and herd seems right

00:08:09,469 --> 00:08:13,520
but it's it's also not a talked about

00:08:11,150 --> 00:08:16,639
elephant so if you came here for

00:08:13,520 --> 00:08:18,259
elephants sorry I can't help you there I

00:08:16,639 --> 00:08:21,039
told you we were gonna have a lot of

00:08:18,259 --> 00:08:25,370
this so a quick back story

00:08:21,039 --> 00:08:28,340
Heroku Postgres is actually not a core

00:08:25,370 --> 00:08:30,860
thing of the Heroku platform itself were

00:08:28,340 --> 00:08:33,169
what's called an add-on we exist in the

00:08:30,860 --> 00:08:35,060
add-on marketplace which is a nice

00:08:33,169 --> 00:08:37,669
offering from Heroku to let you easily

00:08:35,060 --> 00:08:40,479
extend and add things to your

00:08:37,669 --> 00:08:42,709
applications so like New Relic Redis and

00:08:40,479 --> 00:08:45,800
Postgres you can attach these things as

00:08:42,709 --> 00:08:47,600
you will so we were actually one of the

00:08:45,800 --> 00:08:48,800
first ones which is cool what kind of

00:08:47,600 --> 00:08:52,339
broke a lot of ground broke a lot of

00:08:48,800 --> 00:08:53,779
things and so I guess you can kind of

00:08:52,339 --> 00:08:56,329
think of it like this like you talked to

00:08:53,779 --> 00:08:58,130
her oku hirokin tungsten us and we're

00:08:56,329 --> 00:09:00,829
kind of in our own little well realm

00:08:58,130 --> 00:09:02,630
even though we actually all work for

00:09:00,829 --> 00:09:05,290
Heroku we all sit there and we all eat

00:09:02,630 --> 00:09:08,440
the awesome lunches and stuff

00:09:05,290 --> 00:09:11,350
so and actually all of our applications

00:09:08,440 --> 00:09:12,940
run on Heroku so that's pretty cool all

00:09:11,350 --> 00:09:20,290
I have to fix something I don't know

00:09:12,940 --> 00:09:21,610
what broke okay something I know my

00:09:20,290 --> 00:09:23,980
timers all messed up I have no idea how

00:09:21,610 --> 00:09:26,860
long I've been waiting so uh hurrican

00:09:23,980 --> 00:09:30,550
Postgres version zero the very first

00:09:26,860 --> 00:09:32,500
thing was just a single Sinatra

00:09:30,550 --> 00:09:35,740
application it used a library called

00:09:32,500 --> 00:09:40,210
stem to speak to AWS can you read the

00:09:35,740 --> 00:09:42,400
orange okay oh so sorry so I'll just

00:09:40,210 --> 00:09:43,630
read the orange parts that's really

00:09:42,400 --> 00:09:46,690
disappointing they looked great on my

00:09:43,630 --> 00:09:49,480
screen so we use stem to talk directly

00:09:46,690 --> 00:09:51,880
to AWS and we use speak sequel to speak

00:09:49,480 --> 00:09:54,130
directly to Postgres there there weren't

00:09:51,880 --> 00:09:57,220
that many databases then so this worked

00:09:54,130 --> 00:10:01,050
out great right we just had one app and

00:09:57,220 --> 00:10:04,180
one server and they talk to each other

00:10:01,050 --> 00:10:07,540
this all was great when you don't have a

00:10:04,180 --> 00:10:10,450
lot of databases the goal or design

00:10:07,540 --> 00:10:11,760
motto or mantra we had was just the

00:10:10,450 --> 00:10:14,740
simplest thing that could possibly work

00:10:11,760 --> 00:10:16,690
but no less this is a common theme in

00:10:14,740 --> 00:10:18,640
the DoD this is something they strive to

00:10:16,690 --> 00:10:20,340
do it's just something that's always in

00:10:18,640 --> 00:10:23,260
the back of our mind all right

00:10:20,340 --> 00:10:25,240
more things more features means more

00:10:23,260 --> 00:10:26,980
broken stuff every line of code you

00:10:25,240 --> 00:10:30,190
write to do anything is something that

00:10:26,980 --> 00:10:32,170
will bite you at some point or if you

00:10:30,190 --> 00:10:35,620
move on it'll bite someone else and then

00:10:32,170 --> 00:10:39,130
they won't like you so fast-forward to

00:10:35,620 --> 00:10:41,950
now version latest it's grown into a

00:10:39,130 --> 00:10:43,780
constellation of applications about five

00:10:41,950 --> 00:10:46,180
some applications still all using

00:10:43,780 --> 00:10:49,180
Sinatra were using fog now to talk to

00:10:46,180 --> 00:10:52,210
AWS and we stills use sequel to talk to

00:10:49,180 --> 00:10:54,670
the Postgres instances himself and we've

00:10:52,210 --> 00:10:59,170
we've grown to use background workers

00:10:54,670 --> 00:11:02,230
which is underlined horribly with

00:10:59,170 --> 00:11:04,780
sidekick and cue classic to do the bulk

00:11:02,230 --> 00:11:07,240
of our work really so now it kind of

00:11:04,780 --> 00:11:08,800
looks like this this is nothing

00:11:07,240 --> 00:11:10,240
groundbreaking right it's a

00:11:08,800 --> 00:11:13,000
constellation of applications that

00:11:10,240 --> 00:11:15,119
communicate over api's they have

00:11:13,000 --> 00:11:17,309
separation of concerns

00:11:15,119 --> 00:11:20,519
so we have one that's just in charge of

00:11:17,309 --> 00:11:23,579
managing like the production tier and

00:11:20,519 --> 00:11:26,129
one that's in charge of the starter tier

00:11:23,579 --> 00:11:28,679
I got one that does your data clips

00:11:26,129 --> 00:11:31,169
things you probably count PG backups in

00:11:28,679 --> 00:11:32,459
there that does backup snapshots an

00:11:31,169 --> 00:11:36,149
internal one that used for

00:11:32,459 --> 00:11:38,699
administrative Lea administrative Lea

00:11:36,149 --> 00:11:40,319
ministering things and other things like

00:11:38,699 --> 00:11:42,389
that and some of them talk to AWS some

00:11:40,319 --> 00:11:45,209
of them don't but we've grown we've

00:11:42,389 --> 00:11:47,969
spread out like that and almost all of

00:11:45,209 --> 00:11:49,319
these applications are Sinatra running

00:11:47,969 --> 00:11:53,099
within Sinatra

00:11:49,319 --> 00:11:55,919
so it's expanded you know we've got your

00:11:53,099 --> 00:11:58,109
various middleware and you've got all

00:11:55,919 --> 00:12:01,649
your different endpoints that themselves

00:11:58,109 --> 00:12:05,159
really just launch individual post

00:12:01,649 --> 00:12:07,169
Postgres so not your applications by

00:12:05,159 --> 00:12:10,619
nesting Sinatra applications like this

00:12:07,169 --> 00:12:13,919
you kind of it allows you to focus and

00:12:10,619 --> 00:12:16,199
to isolate even within the single

00:12:13,919 --> 00:12:19,979
application domain specific things and

00:12:16,199 --> 00:12:22,109
see yeah it makes the code like more

00:12:19,979 --> 00:12:25,429
easier easier to reason about as it's

00:12:22,109 --> 00:12:28,499
separated into different endpoints

00:12:25,429 --> 00:12:30,389
butchered that one and the apps

00:12:28,499 --> 00:12:33,239
themselves are divided into several

00:12:30,389 --> 00:12:35,429
processes anybody familiar with Heroku

00:12:33,239 --> 00:12:37,139
probably recognizes this it's a proc

00:12:35,429 --> 00:12:39,329
file and it's a way of taking a single

00:12:37,139 --> 00:12:40,949
application and defining individual

00:12:39,329 --> 00:12:43,319
processes that are contained in there

00:12:40,949 --> 00:12:45,359
and this is a feature that you can then

00:12:43,319 --> 00:12:47,909
use and scale horizontally because we

00:12:45,359 --> 00:12:50,549
can independently run like a bunch of

00:12:47,909 --> 00:12:53,459
different workers by adding a bunch of

00:12:50,549 --> 00:12:56,549
Dinos that do that now you can also see

00:12:53,459 --> 00:12:58,769
that one two three four this is just a

00:12:56,549 --> 00:13:00,929
summer I've taken a lot but the point is

00:12:58,769 --> 00:13:02,759
is majority of these are workers your

00:13:00,929 --> 00:13:04,349
background things the front-end stuff is

00:13:02,759 --> 00:13:06,449
usually very quick very small it doesn't

00:13:04,349 --> 00:13:09,299
do much of the heavy lifting that's all

00:13:06,449 --> 00:13:10,799
residing in the background workers so

00:13:09,299 --> 00:13:13,679
applications end up looking like this

00:13:10,799 --> 00:13:16,259
kind of this weird sell of things you've

00:13:13,679 --> 00:13:18,179
got web workers clocks and there's just

00:13:16,259 --> 00:13:20,189
a whole bunch of them we literally run

00:13:18,179 --> 00:13:22,769
like hundreds and hundreds of workers

00:13:20,189 --> 00:13:25,889
across the five some applications we

00:13:22,769 --> 00:13:28,890
have I think 50 distinct process types

00:13:25,889 --> 00:13:31,650
and each application itself has

00:13:28,890 --> 00:13:34,110
maybe three or four web workers and each

00:13:31,650 --> 00:13:36,120
of them has probably 200 plus workers of

00:13:34,110 --> 00:13:38,580
various kinds some of the cues are some

00:13:36,120 --> 00:13:40,650
of the processes themselves have 200

00:13:38,580 --> 00:13:44,280
plus workers right so we use workers a

00:13:40,650 --> 00:13:47,220
lot so even while splitting this into a

00:13:44,280 --> 00:13:49,070
ecosystem of applications it's still the

00:13:47,220 --> 00:13:54,810
simplest thing that can possibly work

00:13:49,070 --> 00:13:58,410
but no less so that's kind of the the

00:13:54,810 --> 00:13:59,550
ecosystem or the architecture of the lay

00:13:58,410 --> 00:14:04,080
of the land so to speak

00:13:59,550 --> 00:14:06,510
so on to managing databases so like I

00:14:04,080 --> 00:14:10,890
said we have this fleet this great

00:14:06,510 --> 00:14:12,900
awesome fleet of things and in order to

00:14:10,890 --> 00:14:14,850
successfully run a service like this you

00:14:12,900 --> 00:14:16,440
have to be continuously monitoring them

00:14:14,850 --> 00:14:19,440
you have to keep watch of everything

00:14:16,440 --> 00:14:21,270
right so if you know you're probably

00:14:19,440 --> 00:14:22,680
looking at this and you're scanning each

00:14:21,270 --> 00:14:23,730
one you got to be asking yourself okay

00:14:22,680 --> 00:14:26,010
well what's wrong with this picture

00:14:23,730 --> 00:14:27,840
right it should jump out pretty quickly

00:14:26,010 --> 00:14:29,340
you should be able to identify it from a

00:14:27,840 --> 00:14:31,860
service point of view quickly that it's

00:14:29,340 --> 00:14:34,740
it's this guy right we've got this whole

00:14:31,860 --> 00:14:36,300
fleet doing stuff and then you've got

00:14:34,740 --> 00:14:39,060
this random one going the wrong

00:14:36,300 --> 00:14:41,910
direction what what what's this guy

00:14:39,060 --> 00:14:43,110
doing right I mean this all these ships

00:14:41,910 --> 00:14:47,030
coming this way this is dangerous this

00:14:43,110 --> 00:14:50,040
is no good it's gonna run into somebody

00:14:47,030 --> 00:14:51,900
so you need to be able to monitor the

00:14:50,040 --> 00:14:54,180
fleet and you need a bill to identify

00:14:51,900 --> 00:14:57,360
and spot this guy find out what's going

00:14:54,180 --> 00:15:00,240
on right and when you manage and monitor

00:14:57,360 --> 00:15:03,390
a lot of things you you tend to expect

00:15:00,240 --> 00:15:06,330
them to go wrong you know things go

00:15:03,390 --> 00:15:09,120
wrong and you kind of have this attitude

00:15:06,330 --> 00:15:10,860
about it right so this guy you need to

00:15:09,120 --> 00:15:14,850
be able to expect that this guy is going

00:15:10,860 --> 00:15:16,830
to happen yeah he's doing his own thing

00:15:14,850 --> 00:15:20,520
probably causing trouble when you see

00:15:16,830 --> 00:15:22,050
things like this from a service point of

00:15:20,520 --> 00:15:23,940
view somebody is probably having a bad

00:15:22,050 --> 00:15:25,680
time right that that represents

00:15:23,940 --> 00:15:28,740
someone's servers or someone's database

00:15:25,680 --> 00:15:29,820
that's going astray if you don't keep

00:15:28,740 --> 00:15:32,550
your eye on these things if you don't

00:15:29,820 --> 00:15:34,650
monitor them you know things will go

00:15:32,550 --> 00:15:37,980
wrong and people will open support

00:15:34,650 --> 00:15:40,440
tickets right things go wrong my

00:15:37,980 --> 00:15:43,730
database is down and you can tell that

00:15:40,440 --> 00:15:43,730
people are mad

00:15:44,139 --> 00:15:48,679
so how do you do that right you've got

00:15:46,549 --> 00:15:49,910
thousands of these things how do you

00:15:48,679 --> 00:15:51,139
monitor them how do you monitor them

00:15:49,910 --> 00:15:53,149
both at the server level and how do you

00:15:51,139 --> 00:15:55,279
monitor them at like the resource level

00:15:53,149 --> 00:15:57,109
I'll get to the resource in a minute so

00:15:55,279 --> 00:15:59,359
your first thought might be well you

00:15:57,109 --> 00:16:01,009
know with with with these images that

00:15:59,359 --> 00:16:03,649
we're using we'll won't install software

00:16:01,009 --> 00:16:05,509
on them that we're poor back that's not

00:16:03,649 --> 00:16:07,970
the approach they took approach they've

00:16:05,509 --> 00:16:11,389
taken is kind of outside in all right

00:16:07,970 --> 00:16:12,410
so workers connect with SSH and they

00:16:11,389 --> 00:16:15,439
collect information about the

00:16:12,410 --> 00:16:17,660
environment the servers ourselves are

00:16:15,439 --> 00:16:20,839
actually stupid we try to keep them very

00:16:17,660 --> 00:16:24,649
dumb they only have the base OS which is

00:16:20,839 --> 00:16:26,379
a boot to 12 or whatever long-term

00:16:24,649 --> 00:16:29,389
support thing I think we had last

00:16:26,379 --> 00:16:31,639
Postgres 9 plus we've finally killed all

00:16:29,389 --> 00:16:35,629
Postgres eights we used to have those up

00:16:31,639 --> 00:16:38,179
until like six months ago and this thing

00:16:35,629 --> 00:16:40,189
called Wally Wally was a something

00:16:38,179 --> 00:16:41,749
developed internally for shipping are

00:16:40,189 --> 00:16:43,399
right ahead logs which is a feature of

00:16:41,749 --> 00:16:46,209
Postgres we shipped that off-site that's

00:16:43,399 --> 00:16:50,319
part of our durability all that stuff

00:16:46,209 --> 00:16:53,029
but Wally is written in Python so yeah

00:16:50,319 --> 00:16:53,720
if you came here for the Wally we're not

00:16:53,029 --> 00:16:56,389
gonna talk about that

00:16:53,720 --> 00:16:58,369
so again outside in information is

00:16:56,389 --> 00:17:01,009
gathered by the workers it's using to

00:16:58,369 --> 00:17:03,919
determine the state it makes an

00:17:01,009 --> 00:17:07,010
observation and then by that it decides

00:17:03,919 --> 00:17:09,889
the action to take the primary things we

00:17:07,010 --> 00:17:11,870
observe here are resources these are

00:17:09,889 --> 00:17:14,120
these things represent the databases

00:17:11,870 --> 00:17:15,620
this got things like information

00:17:14,120 --> 00:17:19,939
collected there's like database named

00:17:15,620 --> 00:17:22,129
the poor created at various database

00:17:19,939 --> 00:17:24,110
type information and then we have

00:17:22,129 --> 00:17:26,839
servers so servers represent the

00:17:24,110 --> 00:17:29,960
physical things on AWS or virtual things

00:17:26,839 --> 00:17:32,269
on AWS you've got I peed instanceid what

00:17:29,960 --> 00:17:34,610
availability its own it's in how long

00:17:32,269 --> 00:17:36,919
it's been up that kind of fun stuff and

00:17:34,610 --> 00:17:39,529
we need to monitor these all the time so

00:17:36,919 --> 00:17:42,710
to do this we use two things which are

00:17:39,529 --> 00:17:44,870
awesome state machines and stateless

00:17:42,710 --> 00:17:46,490
workers I'll explain a little bit more

00:17:44,870 --> 00:17:49,870
on that you probably know what a state

00:17:46,490 --> 00:17:53,450
machine is though the history there is

00:17:49,870 --> 00:17:55,670
it comes it's it's rooted in game

00:17:53,450 --> 00:17:58,550
programming peter von Harden

00:17:55,670 --> 00:18:00,950
is one of the founders of Heroku

00:17:58,550 --> 00:18:03,170
Postgres and his background was in game

00:18:00,950 --> 00:18:05,540
development so when it came to this kind

00:18:03,170 --> 00:18:07,550
of monitoring idea he naturally thought

00:18:05,540 --> 00:18:10,010
of gaming where you have this constant

00:18:07,550 --> 00:18:13,850
loop of observing your environment and

00:18:10,010 --> 00:18:14,660
taking action like am I on fire what

00:18:13,850 --> 00:18:16,490
should I do about that

00:18:14,660 --> 00:18:18,530
am I being attacked by a goblin what

00:18:16,490 --> 00:18:22,820
should I do about that am i sleeping in

00:18:18,530 --> 00:18:24,080
a tent great so you know it's it's kind

00:18:22,820 --> 00:18:26,180
of like we connect to a server and we

00:18:24,080 --> 00:18:28,070
talk to it we say hello the server says

00:18:26,180 --> 00:18:29,870
hi all right well that's established

00:18:28,070 --> 00:18:31,430
that we can connect to the server we're

00:18:29,870 --> 00:18:33,800
making progress and then we say things

00:18:31,430 --> 00:18:36,260
sorry well select one from Postgres and

00:18:33,800 --> 00:18:37,970
it's like oh one great now the server is

00:18:36,260 --> 00:18:44,470
not only up but Postgres is running

00:18:37,970 --> 00:18:47,390
right so we do this all the time forever

00:18:44,470 --> 00:18:49,130
right we've got thousands of resources

00:18:47,390 --> 00:18:50,960
thousands of things that need to be

00:18:49,130 --> 00:18:53,660
checked and every one of them gets

00:18:50,960 --> 00:18:57,080
checked at least once a minute at least

00:18:53,660 --> 00:18:59,360
once a minute so yeah you connect to

00:18:57,080 --> 00:19:03,770
another server it has Postgres itself hi

00:18:59,360 --> 00:19:06,590
hello select one one and you connect to

00:19:03,770 --> 00:19:08,870
yet another server hello hi select one

00:19:06,590 --> 00:19:11,030
great all these workers going around

00:19:08,870 --> 00:19:15,170
feeling the environment thinking about

00:19:11,030 --> 00:19:17,870
things and then maybe doing stuff and we

00:19:15,170 --> 00:19:22,370
need to do this all the time forever

00:19:17,870 --> 00:19:25,100
right okay so to do this let's get to

00:19:22,370 --> 00:19:28,700
something so due to this we use a queue

00:19:25,100 --> 00:19:31,070
but we treat it like a ring because what

00:19:28,700 --> 00:19:32,720
we want to do is have a worker come grab

00:19:31,070 --> 00:19:35,930
this database off the top of the queue

00:19:32,720 --> 00:19:37,580
you know shift it off we want to feel

00:19:35,930 --> 00:19:39,260
which is a method name and it sounds

00:19:37,580 --> 00:19:40,580
kind of odd when I stand up here and I

00:19:39,260 --> 00:19:42,740
talk about grabbing a resource and

00:19:40,580 --> 00:19:44,660
having it feel itself and then we tell

00:19:42,740 --> 00:19:46,340
it to think which is where we take

00:19:44,660 --> 00:19:47,810
action and we do stuff and and when

00:19:46,340 --> 00:19:50,000
we're done with that we push it back

00:19:47,810 --> 00:19:53,660
onto the queue we don't linger here

00:19:50,000 --> 00:20:00,809
these steps are usually pretty quick and

00:19:53,660 --> 00:20:03,700
we need to do this all the time a lot

00:20:00,809 --> 00:20:06,070
so we use state machines to help us out

00:20:03,700 --> 00:20:09,190
here right when you're creating a server

00:20:06,070 --> 00:20:10,779
or making a new database we have

00:20:09,190 --> 00:20:13,450
different states that these things can

00:20:10,779 --> 00:20:16,860
be in the creating stage the happy up

00:20:13,450 --> 00:20:21,869
stage may be stage the whoop stage and

00:20:16,860 --> 00:20:24,369
destroying and just completely dead so

00:20:21,869 --> 00:20:26,769
we have these workers and they need to

00:20:24,369 --> 00:20:28,779
go around and they need to find out what

00:20:26,769 --> 00:20:30,399
state these things are in they need to

00:20:28,779 --> 00:20:33,100
feel the environment determine am i up

00:20:30,399 --> 00:20:35,409
great let's keep on going

00:20:33,100 --> 00:20:37,720
am i maybe up well that was my last

00:20:35,409 --> 00:20:39,700
state so maybe I'm up now maybe I'm I'm

00:20:37,720 --> 00:20:39,970
back I don't know my last one was not so

00:20:39,700 --> 00:20:44,619
great

00:20:39,970 --> 00:20:46,720
maybe I'm down yeah so feeling when we

00:20:44,619 --> 00:20:49,690
go and we connect to a server and we

00:20:46,720 --> 00:20:51,899
observe the environment right so we have

00:20:49,690 --> 00:20:55,869
this class resource this is obviously

00:20:51,899 --> 00:20:57,940
abbreviated and we have this class

00:20:55,869 --> 00:20:59,889
called feeler and the feelers really

00:20:57,940 --> 00:21:03,210
just collect the information about the

00:20:59,889 --> 00:21:06,460
system so when we grab the resource

00:21:03,210 --> 00:21:08,769
that's a lot of slides back ok and we

00:21:06,460 --> 00:21:10,929
say feel what we just do is we create a

00:21:08,769 --> 00:21:12,759
new observation with that feeler and we

00:21:10,929 --> 00:21:14,830
grab the current environment and we

00:21:12,759 --> 00:21:17,980
record that in the observations table

00:21:14,830 --> 00:21:19,720
which is a append-only type table we

00:21:17,980 --> 00:21:21,730
don't like keep an observation and

00:21:19,720 --> 00:21:23,169
update it we create a new record each

00:21:21,730 --> 00:21:25,899
time and so we kind of have a history

00:21:23,169 --> 00:21:28,990
the observations are very simple just an

00:21:25,899 --> 00:21:33,129
ID when he was created attributes which

00:21:28,990 --> 00:21:35,169
are the the that kind of stuff and a

00:21:33,129 --> 00:21:37,269
foreign UUID which points to the

00:21:35,169 --> 00:21:40,360
resource or the server that it came with

00:21:37,269 --> 00:21:42,669
right so we record that we move on we go

00:21:40,360 --> 00:21:45,100
to the next step which is thinking which

00:21:42,669 --> 00:21:47,279
is considering the last observation we

00:21:45,100 --> 00:21:51,269
made what do we do right

00:21:47,279 --> 00:21:54,279
well we include this thing called I

00:21:51,269 --> 00:21:55,629
thought I switched you slides so

00:21:54,279 --> 00:21:57,820
resources have these things called

00:21:55,629 --> 00:22:00,610
States right and it's actually a method

00:21:57,820 --> 00:22:02,830
that comes from the staple module when

00:22:00,610 --> 00:22:05,350
the resource itself loads we execute

00:22:02,830 --> 00:22:07,570
this method and it's a name and it's a

00:22:05,350 --> 00:22:10,359
block of code and we end up creating

00:22:07,570 --> 00:22:12,420
this map of things right so here's the

00:22:10,359 --> 00:22:15,050
stateful module summarize

00:22:12,420 --> 00:22:17,550
so the state method takes a name a

00:22:15,050 --> 00:22:20,760
default nil which I have no idea what

00:22:17,550 --> 00:22:24,030
does and then we create like a map of

00:22:20,760 --> 00:22:25,680
names to block some code so the

00:22:24,030 --> 00:22:27,870
uncertain one gets this block of code

00:22:25,680 --> 00:22:29,780
and the available one gets that block so

00:22:27,870 --> 00:22:33,960
on so forth

00:22:29,780 --> 00:22:35,810
here we get to the think method after

00:22:33,960 --> 00:22:37,860
we've observed we now just say hey

00:22:35,810 --> 00:22:40,710
evaluate the state that we're currently

00:22:37,860 --> 00:22:44,340
in so look at this code and evaluate it

00:22:40,710 --> 00:22:46,410
do this thing so if we're available what

00:22:44,340 --> 00:22:49,140
do we do well if the last observation we

00:22:46,410 --> 00:22:52,110
had said the service was not available

00:22:49,140 --> 00:22:56,180
we transition to the uncertain stage if

00:22:52,110 --> 00:22:58,830
it didn't say that we just move on great

00:22:56,180 --> 00:23:01,230
and just like it so if it's uncertain if

00:22:58,830 --> 00:23:02,730
now it says it is true well we'll go

00:23:01,230 --> 00:23:07,740
back to available and get on with our

00:23:02,730 --> 00:23:10,650
lives so pulling something off of the

00:23:07,740 --> 00:23:13,560
queue feeling its environment thinking

00:23:10,650 --> 00:23:15,230
about it pushing it back on the queue

00:23:13,560 --> 00:23:19,230
and we need to do this all the time

00:23:15,230 --> 00:23:22,140
forever so state machines stateless

00:23:19,230 --> 00:23:24,540
workers the workers don't know much

00:23:22,140 --> 00:23:26,490
about the state they don't track the

00:23:24,540 --> 00:23:28,050
state because we don't want to tie up a

00:23:26,490 --> 00:23:29,820
worker to a resource we want to be able

00:23:28,050 --> 00:23:31,350
to quickly just grab it do something

00:23:29,820 --> 00:23:33,510
really quickly and move on we don't want

00:23:31,350 --> 00:23:34,890
a worker to have too much of an

00:23:33,510 --> 00:23:37,440
important relationship with what it's

00:23:34,890 --> 00:23:39,420
doing workers go down all sorts of

00:23:37,440 --> 00:23:40,950
different things happen there right and

00:23:39,420 --> 00:23:44,280
workers are constantly going through the

00:23:40,950 --> 00:23:45,660
queue they are the ones that do all the

00:23:44,280 --> 00:23:48,840
heavy lifting they're the ones who do

00:23:45,660 --> 00:23:51,410
the things that take time the stateless

00:23:48,840 --> 00:23:53,490
workers are the ones that talk to AWS

00:23:51,410 --> 00:23:56,580
they're the ones that talk to the Heroku

00:23:53,490 --> 00:23:59,190
API to synchronize information or get

00:23:56,580 --> 00:24:01,650
commands or whatever they do and they're

00:23:59,190 --> 00:24:04,410
the ones that connect to databases and

00:24:01,650 --> 00:24:06,690
talk directly to Postgres these are the

00:24:04,410 --> 00:24:08,570
things that in as far as computer terms

00:24:06,690 --> 00:24:10,890
go these are the things that take time

00:24:08,570 --> 00:24:13,380
and then we need to offload them to

00:24:10,890 --> 00:24:16,230
background workers because all of these

00:24:13,380 --> 00:24:19,430
things require networks right and in a

00:24:16,230 --> 00:24:24,750
giant cloud even a great one like Amazon

00:24:19,430 --> 00:24:26,120
all of them can fail and all of them do

00:24:24,750 --> 00:24:28,830
fail all the

00:24:26,120 --> 00:24:31,799
so part of the great thing of Amazon's

00:24:28,830 --> 00:24:34,169
Network and the idea of quickly getting

00:24:31,799 --> 00:24:36,840
and doing this feeling and thinking and

00:24:34,169 --> 00:24:39,510
moving on part is if for some reason a

00:24:36,840 --> 00:24:40,799
worker can't connect to that service it

00:24:39,510 --> 00:24:42,809
just immediately kind of moves on to the

00:24:40,799 --> 00:24:45,210
next thing right but due to the way

00:24:42,809 --> 00:24:46,950
Amazon's network happens maybe that was

00:24:45,210 --> 00:24:48,750
just a little glitch and then the next

00:24:46,950 --> 00:24:50,639
worker is gonna spawn up some other

00:24:48,750 --> 00:24:52,769
place maybe in some an entirely other

00:24:50,639 --> 00:24:54,720
availability zone it might have no

00:24:52,769 --> 00:24:56,639
problem at all connecting so we've kind

00:24:54,720 --> 00:24:58,919
of avoided a false positive there we've

00:24:56,639 --> 00:25:01,710
avoided and worked around maybe network

00:24:58,919 --> 00:25:04,740
partitions or various things like that

00:25:01,710 --> 00:25:08,700
that could go wrong yeah

00:25:04,740 --> 00:25:09,809
how are you already sorry so I was

00:25:08,700 --> 00:25:13,799
supposed to tie that in with the last

00:25:09,809 --> 00:25:15,870
thing what to do when things fail when

00:25:13,799 --> 00:25:17,880
we've figured out that it's not a

00:25:15,870 --> 00:25:22,190
network issue when the server is itself

00:25:17,880 --> 00:25:25,110
actually really down so if you look here

00:25:22,190 --> 00:25:27,990
when that last absolute observation

00:25:25,110 --> 00:25:30,720
service available is not true then we

00:25:27,990 --> 00:25:32,460
need to go we create an incident and

00:25:30,720 --> 00:25:35,850
it's a certain type of incident we have

00:25:32,460 --> 00:25:40,049
a lot of these so incidents when things

00:25:35,850 --> 00:25:43,220
go wrong because they will so as I've

00:25:40,049 --> 00:25:46,260
said on the cloud and at scale

00:25:43,220 --> 00:25:48,450
strange things happen

00:25:46,260 --> 00:25:52,470
I was talking to Tanner about this about

00:25:48,450 --> 00:25:54,480
how as you scale edge cases remain edge

00:25:52,470 --> 00:25:56,610
cases but they actually just are kind of

00:25:54,480 --> 00:25:59,159
cases like you just become accustomed to

00:25:56,610 --> 00:26:01,860
them because you're doing things so many

00:25:59,159 --> 00:26:03,120
times that it's just not it's not so

00:26:01,860 --> 00:26:05,700
weird of his or it's just kind of

00:26:03,120 --> 00:26:08,370
strange and there so we have all these

00:26:05,700 --> 00:26:10,440
different incident types right and this

00:26:08,370 --> 00:26:12,899
is just a summary so we could have a

00:26:10,440 --> 00:26:17,549
resource down Stahl's failed followers

00:26:12,899 --> 00:26:22,799
are stuck the mount drives critical

00:26:17,549 --> 00:26:23,970
servers down they do good thing so in

00:26:22,799 --> 00:26:25,740
order to address all these things

00:26:23,970 --> 00:26:28,440
naturally you start to develop playbooks

00:26:25,740 --> 00:26:30,870
things that engineers can look at read

00:26:28,440 --> 00:26:32,519
and then use them to solve the problem

00:26:30,870 --> 00:26:35,159
that way the solutions to these things

00:26:32,519 --> 00:26:37,019
aren't tied in individuals head so once

00:26:35,159 --> 00:26:39,040
you start codifying and cataloging all

00:26:37,019 --> 00:26:42,370
these things you can create yet another

00:26:39,040 --> 00:26:44,740
state machine right so if incidents have

00:26:42,370 --> 00:26:47,140
their own state machine you can have a

00:26:44,740 --> 00:26:50,080
triggered one resolved waiting I need a

00:26:47,140 --> 00:26:50,500
human or resolving yeah that was the

00:26:50,080 --> 00:26:52,420
other one

00:26:50,500 --> 00:26:54,280
and so we bounce back and forth here and

00:26:52,420 --> 00:26:56,980
we use the stateful module to do all

00:26:54,280 --> 00:27:00,700
this again utilizing state machines and

00:26:56,980 --> 00:27:04,840
stateless workers take that home with

00:27:00,700 --> 00:27:08,230
you and yet another cue right another

00:27:04,840 --> 00:27:08,710
cue / green of incidence the workers go

00:27:08,230 --> 00:27:10,240
along

00:27:08,710 --> 00:27:11,860
we don't feel at this point because at

00:27:10,240 --> 00:27:13,060
this point we know things are wrong we

00:27:11,860 --> 00:27:15,190
just need to start taking action right

00:27:13,060 --> 00:27:16,690
you pop something off the queue we need

00:27:15,190 --> 00:27:18,550
to take some action and then we push it

00:27:16,690 --> 00:27:20,230
back on the queue maybe that action will

00:27:18,550 --> 00:27:22,360
actually resolve things this worker

00:27:20,230 --> 00:27:24,070
won't know this work will just execute

00:27:22,360 --> 00:27:25,930
the code transition to the stage needs

00:27:24,070 --> 00:27:27,490
to and move on and then the next worker

00:27:25,930 --> 00:27:27,990
will pick it up and like hey you're all

00:27:27,490 --> 00:27:31,120
better now

00:27:27,990 --> 00:27:37,600
alright so we need to do this

00:27:31,120 --> 00:27:42,340
all the time a lot all the time so again

00:27:37,600 --> 00:27:44,290
with our wonderful stateful module we've

00:27:42,340 --> 00:27:46,510
got a missus four incidents right so

00:27:44,290 --> 00:27:47,980
we've got trigger incident right all of

00:27:46,510 --> 00:27:49,720
these incidents are gonna attempt this

00:27:47,980 --> 00:27:53,770
resolution which I'll talk about

00:27:49,720 --> 00:27:55,000
resolvers in a minute and if the

00:27:53,770 --> 00:27:57,040
resolution doesn't immediately work

00:27:55,000 --> 00:27:58,870
we'll open a ticket to the customer if

00:27:57,040 --> 00:28:01,090
we get an error somewhere in there will

00:27:58,870 --> 00:28:01,570
escalate to humans we'll get to that in

00:28:01,090 --> 00:28:04,060
a minute

00:28:01,570 --> 00:28:05,740
so same with a wait resolution we've got

00:28:04,060 --> 00:28:07,780
one of these state blocks for basically

00:28:05,740 --> 00:28:09,940
everything what we saw earlier all right

00:28:07,780 --> 00:28:12,220
and we usually wrap these things

00:28:09,940 --> 00:28:15,100
explicitly in begin type statements

00:28:12,220 --> 00:28:16,900
because it's very common for these

00:28:15,100 --> 00:28:20,410
things just to completely bomb out if

00:28:16,900 --> 00:28:22,870
something's just unreachable as I said

00:28:20,410 --> 00:28:26,950
if all else you know escalate to a human

00:28:22,870 --> 00:28:29,110
so actually looking at a different part

00:28:26,950 --> 00:28:32,290
of the file we have all these types here

00:28:29,110 --> 00:28:34,510
and it's a array and we load all these

00:28:32,290 --> 00:28:37,090
resolvers now these resolvers are files

00:28:34,510 --> 00:28:38,800
that we have codified from our play

00:28:37,090 --> 00:28:40,600
books we've actually written it into

00:28:38,800 --> 00:28:43,870
code of how to do these things right so

00:28:40,600 --> 00:28:46,690
we load up all these files and we create

00:28:43,870 --> 00:28:50,080
a just an in-memory hash of them the

00:28:46,690 --> 00:28:51,460
type of thing it can it can the type of

00:28:50,080 --> 00:28:52,419
incident and the resolver that could

00:28:51,460 --> 00:28:54,429
handle it we

00:28:52,419 --> 00:28:58,059
do that by calling the handles method

00:28:54,429 --> 00:29:00,429
which should be on my next slide yes so

00:28:58,059 --> 00:29:02,859
a resolver like this is a basic resource

00:29:00,429 --> 00:29:05,320
restart one and it can handle the

00:29:02,859 --> 00:29:07,359
resource down state when the worker

00:29:05,320 --> 00:29:10,210
comes along it's going to attempt to

00:29:07,359 --> 00:29:12,730
initiate the resolution here it gets a

00:29:10,210 --> 00:29:14,559
lock on the on the on the resource in

00:29:12,730 --> 00:29:16,210
the database so that no other worker

00:29:14,559 --> 00:29:17,859
comes along and tries to do something to

00:29:16,210 --> 00:29:19,659
it it sees that oh this is locked I'm

00:29:17,859 --> 00:29:21,700
not going to try to touch this and the

00:29:19,659 --> 00:29:24,879
first thing it does in this case is try

00:29:21,700 --> 00:29:27,460
to restart it so it turns out on Amazon

00:29:24,879 --> 00:29:31,299
if you're using elastic block storage

00:29:27,460 --> 00:29:33,700
and your thing crashes if you restart it

00:29:31,299 --> 00:29:35,590
your thing in this case Postgres is

00:29:33,700 --> 00:29:37,119
gonna come up probably in the same

00:29:35,590 --> 00:29:38,980
availability zone depending on how you

00:29:37,119 --> 00:29:42,159
go is configured but on a different

00:29:38,980 --> 00:29:45,549
machine and if you've used any of us

00:29:42,159 --> 00:29:47,559
long enough or enough yeah you notice

00:29:45,549 --> 00:29:48,999
that sometimes just restarting the thing

00:29:47,559 --> 00:29:51,580
and have any come up somewhere else just

00:29:48,999 --> 00:29:53,289
completely resolves all your problems so

00:29:51,580 --> 00:29:55,059
the very first thing we do is often just

00:29:53,289 --> 00:29:58,690
restart it and everything sorts itself

00:29:55,059 --> 00:30:01,509
out and then later along the line we'll

00:29:58,690 --> 00:30:03,369
call resolved right so we'll perform a

00:30:01,509 --> 00:30:05,139
new observation get a new state and

00:30:03,369 --> 00:30:06,789
we'll do the tick method which is

00:30:05,139 --> 00:30:09,309
actually an alias for the think method

00:30:06,789 --> 00:30:10,690
sorry and so we'll kind of repeat the

00:30:09,309 --> 00:30:12,580
process will continue to check these

00:30:10,690 --> 00:30:14,619
things and transition to the right

00:30:12,580 --> 00:30:16,690
states along the state machine until we

00:30:14,619 --> 00:30:19,690
figure out things are better to tell we

00:30:16,690 --> 00:30:22,149
things they get resolved so here's

00:30:19,690 --> 00:30:24,779
another example of resolver this is for

00:30:22,149 --> 00:30:27,009
server down or for stuck EBS volumes

00:30:24,779 --> 00:30:31,419
with the production tier we might try to

00:30:27,009 --> 00:30:33,369
failover if you have a yeah

00:30:31,419 --> 00:30:34,659
oh this is for server two so this will

00:30:33,369 --> 00:30:36,429
actually restart the entire server

00:30:34,659 --> 00:30:38,320
instead of the Postgres instance that's

00:30:36,429 --> 00:30:40,149
when the thing will move and we do

00:30:38,320 --> 00:30:42,399
another thing like resolved well perform

00:30:40,149 --> 00:30:44,559
the observation is it available now is

00:30:42,399 --> 00:30:50,350
it still have a stuck EBS do something

00:30:44,559 --> 00:30:54,399
whatever doing good so you know we've

00:30:50,350 --> 00:30:56,769
got these resolvers but even that's not

00:30:54,399 --> 00:30:59,169
perfect right so we're left with the

00:30:56,769 --> 00:31:01,760
obvious question of what happens when

00:30:59,169 --> 00:31:08,620
even these resolutions fail

00:31:01,760 --> 00:31:12,230
because they will so you saw there right

00:31:08,620 --> 00:31:14,570
when the resolver doesn't work we have

00:31:12,230 --> 00:31:16,250
to escalate to a human we actually have

00:31:14,570 --> 00:31:19,010
to call somebody which is the software

00:31:16,250 --> 00:31:22,520
cluvin of well I tried you know

00:31:19,010 --> 00:31:24,830
eventually it's all going to read or hit

00:31:22,520 --> 00:31:27,470
lead to Dumbledore there which

00:31:24,830 --> 00:31:28,910
ultimately we all know leads to pager

00:31:27,470 --> 00:31:31,280
duty

00:31:28,910 --> 00:31:32,750
escalate to humans will actually get

00:31:31,280 --> 00:31:34,730
somebody on the line it'll wake somebody

00:31:32,750 --> 00:31:37,970
up and then we have to go and figure out

00:31:34,730 --> 00:31:39,770
why the resolvers didn't work why why am

00:31:37,970 --> 00:31:43,880
I being woken up in the night not me

00:31:39,770 --> 00:31:46,340
fortunately so I have no idea how I'm on

00:31:43,880 --> 00:31:51,260
time but I'm pretty close to the end

00:31:46,340 --> 00:31:55,190
oh well that's like right on time odd so

00:31:51,260 --> 00:31:58,460
yeah summary of my mad rambling up here

00:31:55,190 --> 00:32:01,040
the simplest thing that can work right

00:31:58,460 --> 00:32:04,340
the simplest thing you can do that works

00:32:01,040 --> 00:32:07,000
but no less than that state machines are

00:32:04,340 --> 00:32:11,110
fantastic for modeling complex behavior

00:32:07,000 --> 00:32:13,550
complex states things that can go wrong

00:32:11,110 --> 00:32:14,840
stateless workers are great because you

00:32:13,550 --> 00:32:17,000
don't get too tied up and what you're

00:32:14,840 --> 00:32:18,260
doing you can have a lot of workers you

00:32:17,000 --> 00:32:21,190
can quickly move to resolution

00:32:18,260 --> 00:32:23,840
especially things that take time and

00:32:21,190 --> 00:32:26,920
when you get big and you need to monitor

00:32:23,840 --> 00:32:29,660
things like that expect things to break

00:32:26,920 --> 00:32:31,190
because they're going to break and have

00:32:29,660 --> 00:32:34,430
a good attitude about it just remember

00:32:31,190 --> 00:32:38,450
nope yeah thanks break this is the

00:32:34,430 --> 00:32:40,820
summary of my talk there well welp

00:32:38,450 --> 00:32:43,910
driven presentations

00:32:40,820 --> 00:32:45,440
all right that that's sorry that was a

00:32:43,910 --> 00:32:52,600
mad rambling but that's all I got so

00:32:45,440 --> 00:32:52,600

YouTube URL: https://www.youtube.com/watch?v=GGyT6Cxpb6U


