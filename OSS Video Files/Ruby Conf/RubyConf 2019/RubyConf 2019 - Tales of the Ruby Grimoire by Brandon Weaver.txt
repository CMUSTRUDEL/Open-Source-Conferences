Title: RubyConf 2019 - Tales of the Ruby Grimoire by Brandon Weaver
Publication date: 2019-12-03
Playlist: RubyConf 2019
Description: 
	RubyConf 2019 - Tales of the Ruby Grimoire by Brandon Weaver

There are arts best left unspoken, dark magics left forgotten and locked away in the deepest vaults of the Ruby language, lest they be seen by mortal eyes not ready for the horrors inside.

That is, until a particularly curious Lemur named Red happened to open it.

Journey with Red into the Tales of the Ruby Grimoire, through parts of the language not meant for the faint of heart. There is great power here, but that power comes at a cost. Are you willing to pay it?

#confreaks #rubyconf2019
Captions: 
	00:00:12,380 --> 00:00:14,960
>> Hello, hello! I think we're about ready to get started. So, I brought a special little

00:00:14,960 --> 00:00:19,940
story this time, and I love stories. But before we get into that, let's start a little

00:00:19,940 --> 00:00:27,580
bit with who exactly is this mad man up in front of you speaking? 

00:00:27,580 --> 00:00:35,140
Oopsie. We should go backwards. Okay. I guess we're not doing that. Yes. Back. Okay. So,

00:00:35,140 --> 00:00:40,410
my name is Brandon Weaver, and I started as an artist, so I like to illustrate things

00:00:40,410 --> 00:00:45,540
like that avatar up there and this entire talk. It started with someone saying you

00:00:45,540 --> 00:00:49,560
should try web design. It's more profitable. It will get you a bit more reception. Learned

00:00:49,560 --> 00:00:54,940
HTML and CSS. It was a good time ‑‑ maybe not in CSS. But whatever. So, they

00:00:54,940 --> 00:01:00,570
said how about some JavaScript. That will make you more effective. I did JavaScript. And

00:01:00,570 --> 00:01:08,350
then someone said how about a back end. It went downhill from there, so far in fact that

00:01:08,350 --> 00:01:13,829
it ended up a frameworks engineer over at Square where I'm working as a Ruby architect. I'm

00:01:13,829 --> 00:01:20,899
here to tell you a story. I have a story today for everyone. 

00:01:20,899 --> 00:01:34,090
So shall we get started? Our story begins. So, our story begins with young Red and his master. Red

00:01:34,090 --> 00:01:41,189
is studying diligently when his master comes in and informs him that she is going to be

00:01:41,189 --> 00:01:45,030
leaving. Now Red, I will be leaving. The council of 3.0 has called and I'll be gone

00:01:45,030 --> 00:01:50,603
a bit. So, be sure to study your hardest for a test, because I'm going to have it as

00:01:50,603 --> 00:01:58,360
soon as I get back. So, with that, Scarlet left. And Red? Red made sure that she had

00:01:58,360 --> 00:02:08,259
actually left, because Red is a mischievous lemur, and he has bad ideas. In the castle

00:02:08,259 --> 00:02:15,599
of master Scarlet lies secrets, forbidden corridors, libraries, knowledge unseen and

00:02:15,599 --> 00:02:22,220
untold for generations. And Red? Red was going to find a few of those. So, down he

00:02:22,220 --> 00:02:27,230
went, down down into the depths of the castle where the candle light faded into blackens

00:02:27,230 --> 00:02:34,250
and all light seemed to vanish. And there at the very end, he found it, a massive door

00:02:34,250 --> 00:02:43,120
wrought of steel and locked tightly. A door he dreamed of opening. Great and terrible

00:02:43,120 --> 00:02:49,040
knowledges lay beyond that door. And perhaps even the secret to master hood. With that

00:02:49,040 --> 00:02:53,010
power, Red could become a master and study would be a thing of the past. Tests would

00:02:53,010 --> 00:02:58,390
be a thing of the past. After all, masters don't need to study, do they? But the door? It

00:02:58,390 --> 00:03:06,820
opened at his touch, as if inviting him in. Surely it was a sign of divine providence. So Red

00:03:06,820 --> 00:03:16,370
entered and he found a vast library, the likes of which were unmatched in the land of lemurs. Knowledge

00:03:16,370 --> 00:03:24,440
beyond knowledge, and at the center, he saw it. The book of legends, infinite power and

00:03:24,440 --> 00:03:32,130
possibilities. A dark manuscript whispered in the history of lemurs, and wisdom beyond

00:03:32,130 --> 00:03:41,080
the capacity of a normal lemur. But Red was no normal lemur, so it was fine. The knowledge

00:03:41,080 --> 00:03:46,280
would soon be his, so he took a moment to saver his triumph. And he opened the book

00:03:46,280 --> 00:03:54,010
and on it he found words he didn't quite understand. But then things started getting stranger. The

00:03:54,010 --> 00:03:58,430
words seemed to blend together on the page, and everything seemed to fade. And something

00:03:58,430 --> 00:04:04,260
changed in the air. The room grew suffocating and the words on the page faded and running

00:04:04,260 --> 00:04:10,580
into fog. The fog glowed an angry red and on the page a new page came. Thank you for

00:04:10,580 --> 00:04:14,650
freeing me, young one.  Freeing? What does it mean, freeing? And

00:04:14,650 --> 00:04:29,690
then a new phrase came on to the page. Behold the dark lord crimson. Red looked up and

00:04:29,690 --> 00:04:39,530
what he saw standing there, a specter, a malignant being. Crimson was free, and all Red could

00:04:39,530 --> 00:04:43,651
do is scream. For a moment. I like fun stories. That's horrific. So, let's skip back to the fun

00:04:43,651 --> 00:04:47,660
part.  Keep it down! No need to be rude. I can't

00:04:47,660 --> 00:04:52,670
see a thing with that lamp. It's been a while since I've had visitors down here. Red stared

00:04:52,670 --> 00:04:59,980
back in horror. How long it's been since there was a lemur that actually bothered to

00:04:59,980 --> 00:05:06,889
open it. Welcome, welcome, welcome. So, long indeed. How exciting this is. What

00:05:06,889 --> 00:05:11,430
lesson shall we learn? What shall we attempt? Such stories to be told. Such possibilities indeed. Languages

00:05:11,430 --> 00:05:16,120
old and new alike. Power beyond your wildest imagination, all written upon these pages. But

00:05:16,120 --> 00:05:30,200
I must ask, young one, are you willing to pay that cost? 

00:05:30,200 --> 00:05:35,750
Red, poor, poor Red. He was transfixed and started nodding vigorously. There were knowledges

00:05:35,750 --> 00:05:48,940
here beyond him, and knowledges he would learn no matter the cost. These make very convenient

00:05:48,940 --> 00:05:56,420
water breaks.  The true nature of the Grimoire. It is a

00:05:56,420 --> 00:06:06,060
journal where I met several wise ones beyond me or anything I had seen before. And of

00:06:06,060 --> 00:06:15,949
all the tales, we shall start with some of my personal favorites. Tales lemur of JavaScript,

00:06:15,949 --> 00:06:22,889
each bearing knowledge beyond what are imagined. We will take a glance at each today. 

00:06:22,889 --> 00:06:37,520
The lemurs of Scala. We shall first learn from lemurs of Scala. They canonical hats,

00:06:37,520 --> 00:06:43,090
cloaked in robes that change colors and styles as often as they change the way they program. 

00:06:43,090 --> 00:06:50,240
[ Laughter ] Where Ruby has flexibility, Scala has so much

00:06:50,240 --> 00:06:58,580
more. And the lessons they bring are insights into flexibility. They have a spell known

00:06:58,580 --> 00:07:04,520
as a place holder argument. Place holder arguments when in underscore can act as a

00:07:04,520 --> 00:07:12,600
shorthand to arguments of a function. In Ruby, it is something more like this. But

00:07:12,600 --> 00:07:21,750
what if, perhaps, we could do the same thing in Ruby? Now before we can form such clicks,

00:07:21,750 --> 00:07:29,900
we're going to need to know a few little tricks. Consider with me a function, a lambda, which takes

00:07:29,900 --> 00:07:35,190
an argument a and returns a function which takes an argument b. Why would someone do

00:07:35,190 --> 00:07:38,810
something like this?  [ Laughter ]

00:07:38,810 --> 00:07:45,460
The function takes in a value a, and the nifty part about these functions is that when that

00:07:45,460 --> 00:07:52,500
function is returned taking an argument b, where do you think it gets the a value from? Notice

00:07:52,500 --> 00:07:58,620
a is currently visible to the return function, so it remembers the value of a. This is what

00:07:58,620 --> 00:08:06,040
we call a closure. It remembers the context. Where it was created. Or it remembers whatever

00:08:06,040 --> 00:08:13,841
can happen around it? Why is this useful? When we call adds with 1, it remembers the value

00:08:13,841 --> 00:08:25,310
of 1 and we can call add_one to call 2 and getting 3. So, why is this useful? Let's

00:08:25,310 --> 00:08:33,310
say that we put that in a map expression. Using &, we can add one to every element of a list

00:08:33,310 --> 00:08:40,329
by this. Or, because we can substitute, we could just inline this code and call it directly

00:08:40,329 --> 00:08:46,390
like that... But if we wanted to, we could even make it

00:08:46,390 --> 00:08:52,570
more succinct with square brackets, but that's short and confusing, and we'll prefer longhand

00:08:52,570 --> 00:09:00,810
from now on. But how does that get us closer to placeholder arguments? Well, how does a

00:09:00,810 --> 00:09:08,990
place operator work in Ruby? I see some people have very bad ideas out there. Great. I

00:09:08,990 --> 00:09:12,839
have several of my own. This is why I'm giving this talk! 

00:09:12,839 --> 00:09:20,029
So, how does Ruby know to add two numbers? Well, as it turns out, there's a secret there. It's

00:09:20,029 --> 00:09:28,930
no more than a method call. And we can define methods. And it looks something like this. If

00:09:28,930 --> 00:09:37,940
you squint hard enough and pretend C code is Ruby, let's start with the 

00:09:37,940 --> 00:09:45,800
expression of this. This is not an exact science. Moving on. With these two tricks,

00:09:45,800 --> 00:09:54,460
we know enough to make our own place holder arguments. We just need a bit more Ruby magic. 

00:09:54,460 --> 00:10:00,060
So remember our integer class. What if we made our own class that had a class defined

00:10:00,060 --> 00:10:10,890
on it. We can call it PArg for place holder argument. And we will leave it red. Now,

00:10:10,890 --> 00:10:15,900
here is another fun trick. There's nothing that says you can't define +on a Singleton

00:10:15,900 --> 00:10:25,899
of a class. That means you can do something that looks like this. That works. That's

00:10:25,899 --> 00:10:34,600
very valid Ruby. We can call + directly on a class. So, we can use our lesson on

00:10:34,600 --> 00:10:39,980
closures to perhaps return a function instead, because there's also no rule on what it needs

00:10:39,980 --> 00:10:46,480
to return. So, we could just do something like this. And oh, people are starting to

00:10:46,480 --> 00:10:55,730
get bad ideas, yes, yes! Great. Magnificent. I love bad ideas. So, this brings us to a very

00:10:55,730 --> 00:11:06,130
interesting thing in Ruby, I discovered. Two PArg applies after end fixed operators. So,

00:11:06,130 --> 00:11:14,080
we can do something like this, which applies to PArg, allowing us to get something that

00:11:14,080 --> 00:11:20,990
looks very much like Scala does. Or if we're particularly naughty lemurs, we can always

00:11:20,990 --> 00:11:27,490
redefine. This, of course, can do bad things, but we wanted to prove a point, so we're going

00:11:27,490 --> 00:11:36,290
to do it anyway.  Now, imagine with me that maybe we use method

00:11:36,290 --> 00:11:42,520
missing to allow it to use any other function or respond to see if it can even do that. Or

00:11:42,520 --> 00:11:48,810
if we're really into it, we could make this into a stack builder and do something along

00:11:48,810 --> 00:11:57,860
the lines of_+1==2 and have them reduce on to a stack. Imagine the probabilities. But

00:11:57,860 --> 00:12:12,760
that's a tale for another day in a later chapter. 

00:12:12,760 --> 00:12:17,910
Of dark magics... So, Red stopped as they walked and he had

00:12:17,910 --> 00:12:23,291
to ask, but aren't these dark magics? It feels like we're just doing bad things to the language

00:12:23,291 --> 00:12:28,740
for doing bad things to the language? Why would we want to do that? Come on, you're

00:12:28,740 --> 00:12:35,802
not one of them are you? I would simply say we're exploring the possibilities of language.

00:12:35,802 --> 00:12:42,160
Imagine the use of such things and how much more powerful Ruby might be with it. They

00:12:42,160 --> 00:12:45,330
might even merge it into Ruby core one of these days. 

00:12:45,330 --> 00:12:50,959
[ Laughter ] So Red nodded, suitably convinced, and they

00:12:50,959 --> 00:12:57,520
moved on.  The lemurs of JavaScript. Now in my journeys

00:12:57,520 --> 00:13:03,040
in a land not far from this one, I found the lemurs of JavaScript, fascinating masters

00:13:03,040 --> 00:13:08,170
with lessons more fascinating indeed. The lemurs of JavaScript were fashionable with

00:13:08,170 --> 00:13:14,740
all forms of accessories, covers, designs, decorations. They could change the very language

00:13:14,740 --> 00:13:19,470
with which they communicated with by using different jewelry and accessories and packages

00:13:19,470 --> 00:13:26,150
in a most wonderful system which I very much liked, called babble. And they bring with

00:13:26,150 --> 00:13:33,850
them an art of destruction beyond that which we know in Ruby. It allows them to pull values

00:13:33,850 --> 00:13:40,720
out of objects by name. So, say we had a moveNorth function which can extract the X

00:13:40,720 --> 00:13:49,700
and Y values. This is known as the art of destructioning. But what is that doing? Inside

00:13:49,700 --> 00:13:53,959
this function, the value of X is 1 and the value of y is 2 because it extracts those

00:13:53,959 --> 00:14:00,910
values from the object that's passed in.  So we can use those values to add 1 to y and

00:14:00,910 --> 00:14:08,230
make it move north, as it were. But there's another magic in JavaScript, and one I have

00:14:08,230 --> 00:14:13,529
not found a way to emulate, no matter how much I might try, known as punning. And of

00:14:13,529 --> 00:14:18,370
course we love punning in Ruby. Yes, yes. Several famous Rubyists love punning, but this type

00:14:18,370 --> 00:14:23,920
of punning is different, and we had to ask at what cost would it be added to Ruby? 

00:14:23,920 --> 00:14:30,440
Now, this allows us to make a new object with X unchanged and Y with one added. Namely,

00:14:30,440 --> 00:14:39,769
after I could figure out how to make the thing work. Fine, fine. Anyways! Anyways! We

00:14:39,769 --> 00:14:45,190
can do destruction in Ruby, but first we must learn the art of extracting arguments. Say

00:14:45,190 --> 00:14:55,920
we had a function fn. The body doesn't matter, just that we have the arguments x and y. Indeed

00:14:55,920 --> 00:15:06,040
for now, because yes, only in arguments. There exists a method called parameters. It returns

00:15:06,040 --> 00:15:14,740
back an array of pairs. The first being the type and the second? The name...

00:15:14,740 --> 00:15:21,120
So if we were to map the last item of each of those, we have the names of the function

00:15:21,120 --> 00:15:26,410
arguments. And oh, there are fun things we can do with this. 

00:15:26,410 --> 00:15:32,370
Now this is all we need to make our own idea of destructuring. If we know the names of

00:15:32,370 --> 00:15:39,410
the arguments, we can use them. So, let's say that we have a point, a simple struct. Now

00:15:39,410 --> 00:15:46,470
for those not familiar with what a struct is, it's something vaguely like this. Except

00:15:46,470 --> 00:15:49,950
that's a lot of code to write, and I don't like that. So, let's go back to the struct. 

00:15:49,950 --> 00:15:55,399
[ Laughter ] We'll keep it in mind for the next few parts. So,

00:15:55,399 --> 00:16:02,580
for simplicity's sake, we'll start with the point at an origin of X of 0 and Y of 0, and

00:16:02,580 --> 00:16:08,910
then we're going to make our own destructure function, which takes in an object and a block

00:16:08,910 --> 00:16:13,620
function. We can assume for now the object is our origin point and our function will

00:16:13,620 --> 00:16:19,110
have arguments X and Y. So, the first step is to get the names of the arguments that

00:16:19,110 --> 00:16:26,420
we passed in. Now, in the case of this x and this y, this would mean that arguments

00:16:26,420 --> 00:16:35,860
are effectively x and y. Now, that we have those names, we can do something very bad

00:16:35,860 --> 00:16:41,829
in Ruby... We can map over those names and use obj.send

00:16:41,829 --> 00:16:51,269
to extract those values using those names from the function arguments. So, in the case

00:16:51,269 --> 00:16:57,220
of our origin point of 0, 0, and our function that takes an argument of x and y, this would

00:16:57,220 --> 00:17:04,289
mean that our arguments become x and y and our values are effectively saying obj.x and

00:17:04,289 --> 00:17:13,630
obj.y.  Or in the case of origin, 0 and 0. So, both

00:17:13,630 --> 00:17:21,471
of which are extracted using the argument names from before. There's no rule in Ruby

00:17:21,471 --> 00:17:27,160
for when you need to call a function that is passed to a method. So, we can call it

00:17:27,160 --> 00:17:33,210
the end with the values we extracted in the same positions as the arguments. Meaning

00:17:33,210 --> 00:17:39,800
we're effectively doing this with our origin point. 

00:17:39,800 --> 00:17:49,140
So let's step back to our point in our origin. We can use destruction method which takes an

00:17:49,140 --> 00:17:56,230
argument x and y. Because it's 0, 0, that means the x is 0 and the y inside that function

00:17:56,230 --> 00:18:01,700
is 0, because we've now given relevance to the names of those arguments. Inside this

00:18:01,700 --> 00:18:09,330
function. Now inside this function, we can create a new point using that x and that y

00:18:09,330 --> 00:18:14,470
to add 1 to the value of y, which moves it north. 

00:18:14,470 --> 00:18:20,750
Now look how much fun that is. Now, a clever lemur might be able to redefine methods with

00:18:20,750 --> 00:18:30,170
some of those same tricks to add a destructor decorator. But another chapter. I'm afraid

00:18:30,170 --> 00:18:45,210
it's beyond us for the moment.  Considerations. 

00:18:45,210 --> 00:18:50,919
By this point, Red was very worried and had to say something about this. But surely,

00:18:50,919 --> 00:19:00,220
surely that's evil! We all node meta programming is the root of all evil, isn't it? Oh, Red,

00:19:00,220 --> 00:19:07,080
Red, Red, meta programming has its uses. A fast and seldom well understood territory. Naturally

00:19:07,080 --> 00:19:13,799
they're dangerous, of course. But must one discard such power simply because it's dangerous? No,

00:19:13,799 --> 00:19:21,090
no, no. It depends on the context and the wisdom of the wielder. It is far too serious

00:19:21,090 --> 00:19:27,710
of a word that is used for those who are not ready for it. You are ready for it? Yes,

00:19:27,710 --> 00:19:39,140
I do believe so. Red nodded, considering him obviously ready for such an art, and they

00:19:39,140 --> 00:19:43,120
moved on.  Lemurs of Haskell. 

00:19:43,120 --> 00:19:52,490
Now, I have one last lesson for you from the wise sages of the realms of Haskell. Descendent

00:19:52,490 --> 00:19:59,230
from their ivory towers, they bring knowledges far beyond me, knowledges that may shake the

00:19:59,230 --> 00:20:04,700
very foundations of the way we think about programming. They bring with them an art

00:20:04,700 --> 00:20:10,660
of lenses and an ability to focus on something and either see or change its value. Cannot

00:20:10,660 --> 00:20:15,230
say I fully comprehend them, but I find them fascinating none the less. And of course

00:20:15,230 --> 00:20:21,470
I tried to write them in Ruby. Now lenses allow lemurs of Haskell to look deeply into

00:20:21,470 --> 00:20:29,320
a nested data structure and perform magics on those datas without mutating them. Now

00:20:29,320 --> 00:20:35,730
the examples they told me were very confusing at first, so I took some liberties in trying

00:20:35,730 --> 00:20:44,179
to make them understandable. I cannot say I understand how make lenses work, but I may

00:20:44,179 --> 00:20:50,820
be able to explain the rest of this. So, we have datas of atom and point with an atom

00:20:50,820 --> 00:20:53,360
containing a point, and we make lenses for both of those.

00:20:53,360 --> 00:20:57,630
At least I assume that's what's happening there. And we create a function that moves

00:20:57,630 --> 00:21:04,260
an atom to the north and returns a new atom, presumably moved to the north. The point

00:21:04,260 --> 00:21:10,220
has an X and y coordinate, but what is that function doing? Let's simplify again, because

00:21:10,220 --> 00:21:21,940
it's still confusing. Now we have a move north function. Which uses the function over

00:21:21,940 --> 00:21:26,390
and allows us to execute a function over something which happens to look like or behave like

00:21:26,390 --> 00:21:34,429
a lens. And now we're saying that we are to do something over the y of a point. And

00:21:34,429 --> 00:21:42,160
over that, we want to add 1. So, lenses allow us to specify a path to something and runs

00:21:42,160 --> 00:21:51,030
a path over to them.  Now this all seems rather abstract, but you

00:21:51,030 --> 00:21:54,980
would be surprised. You actually know something in Ruby already which does something very,

00:21:54,980 --> 00:22:05,650
very similar to this. The method dig, which is one half of the idea of a lens. The get. It

00:22:05,650 --> 00:22:12,520
allows us to find a value that's deeply nested in a hash or array. That's very fun. I have

00:22:12,520 --> 00:22:17,820
had very much fun with that. The thing to pay attention to here, though, is the path. And

00:22:17,820 --> 00:22:23,580
the path is a point which is very relevant to us here. With the path, we know how to

00:22:23,580 --> 00:22:28,460
get a value. Would it be that far of a leap of faith to say we could also set that value

00:22:28,460 --> 00:22:33,679
down there? The path is the basis of a lens and lets you know what path it is that you

00:22:33,679 --> 00:22:39,900
need to focus on or look at or lenses like glasses or scopes or something like that. 

00:22:39,900 --> 00:22:43,970
So if we wanted to try and apply such a thing to Ruby, it may be difficult, but I believe

00:22:43,970 --> 00:22:50,700
we can come close. So, for the sake, we can assume we have a set of hashes all with a

00:22:50,700 --> 00:22:58,480
nested a, b, and c, all with the values 1‑5, and we will use this to demonstrate. We can

00:22:58,480 --> 00:23:03,850
start with capturing a path and class and scope. It sounds like a lens. We're making

00:23:03,850 --> 00:23:12,260
progress. We want to capture the path of what we're looking at in the scope. And then

00:23:12,260 --> 00:23:20,200
we want to define our own get. Now why would we wrap this in a function, you might ask? Well,

00:23:20,200 --> 00:23:25,000
using the art of closures from before, this allows us to go over collection and do something

00:23:25,000 --> 00:23:31,450
which looks a lot like this. So, we can have a scope focus on a, b, and c, and we can map

00:23:31,450 --> 00:23:38,880
using the get of that scope to fill out the values 1‑5 of all of the hashes. To set

00:23:38,880 --> 00:23:44,550
is a little bit harder, and I have to do a few unique tricks to make this work. 

00:23:44,550 --> 00:23:48,610
The first thing we need to do set is to clone the object to make sure we're not mutating

00:23:48,610 --> 00:23:53,179
it to something we don't want to. This is a quick way to declone a hash, and I happened

00:23:53,179 --> 00:23:58,690
to find a lemur lemur go one day. I can't say I understand how it works, but it does,

00:23:58,690 --> 00:24:03,150
and that's good enough for me for now. Moving on. 

00:24:03,150 --> 00:24:08,350
We start by wrapping it in a function which takes either a value or a function to transform

00:24:08,350 --> 00:24:12,059
whatever value it happens to find at that path.

00:24:12,059 --> 00:24:16,830
We start off by cloning the collection. The lemurs of Haskell are not very happy with

00:24:16,830 --> 00:24:22,440
my interpretation mutation free code, and it technically doesn't mutate the outside

00:24:22,440 --> 00:24:27,980
result, so we'll call that good enough for now. And we start by getting the path we

00:24:27,980 --> 00:24:33,559
need to get to our value. You'll notice that I left one of those paths off as a target

00:24:33,559 --> 00:24:38,880
key, the last key that we need to focus on. Why is that? Let's get into that a bit. 

00:24:38,880 --> 00:24:45,780
Their initial example, we used a, b, and c. And this means that the lead in to get to that

00:24:45,780 --> 00:24:49,630
value would be a and b, and the target_key would be c. And we'll come back to why it's

00:24:49,630 --> 00:24:56,610
necessary in a second. Very amusingly, to bury a value in Ruby, you would need to dig

00:24:56,610 --> 00:25:01,350
down to it in the first place. And this gives us a target location right above where it

00:25:01,350 --> 00:25:09,220
is we need to bury that value. Which means that we have a lead_in of a and b, and a collection

00:25:09,220 --> 00:25:18,820
of a, b, c1, and that means we will dig into that collection and get back the hash c 1. Now

00:25:18,820 --> 00:25:24,030
the next thing we need to do is decide what value it is that we're going to set there. If

00:25:24,030 --> 00:25:30,120
we happen to be given a block function, we're going to yield or call that function with

00:25:30,120 --> 00:25:38,950
the value at that target_location at that target_key, so 1 in this case. 

00:25:38,950 --> 00:25:44,970
So this would mean that we have a function of x+1, a target location of c 1 and target c. And

00:25:44,970 --> 00:25:54,740
the new value would be 2. Or let's say that we set it to a static value, which isn't quite

00:25:54,740 --> 00:26:00,950
as much fun, but it's still useful. We rely on a value being provided for that static

00:26:00,950 --> 00:26:15,120
value. Now why exactly did we want to do the entire lead_in shenanigans there? We

00:26:15,120 --> 00:26:19,110
could use merge, but that's slow, and I don't like slow code. 

00:26:19,110 --> 00:26:23,881
Now the Haskell lemurs were very put off with me for this. I don't tend to pay them much

00:26:23,881 --> 00:26:33,000
mind. If we were to use this on a group of hashes we could set a value according to paths.

00:26:33,000 --> 00:26:39,810
Imagine the possibilities here! If we were to use this on JSON or large hashes or use===or

00:26:39,810 --> 00:26:49,230
allow it to reverse any discriminate depth by looking at a path that happens to match,

00:26:49,230 --> 00:26:54,000
it could be very interesting indeed. I can't say I have written too much more on lemurs

00:26:54,000 --> 00:27:07,909
of Haskell, because I don't believe they like me and have stopped talking to me. 

00:27:07,909 --> 00:27:15,799
[ Laughter ] Going beyond magic. 

00:27:15,799 --> 00:27:20,190
So Red was fascinated by all the implications of crimson's tales and possibilities and what

00:27:20,190 --> 00:27:30,260
else might line the Grimoire. So, Red asked how many more stories and languages and new

00:27:30,260 --> 00:27:38,730
tricks do you have in there? [ Laughing ] Oh, many, many more from tribes and societies

00:27:38,730 --> 00:27:43,549
far wide, beyond all things. The java lemurs and the very orderly and well‑dressed Python

00:27:43,549 --> 00:27:47,659
lemurs and beyond. There are many, many tales. And there's an entire universe out there, powers

00:27:47,659 --> 00:27:57,720
beyond imagination and so many more chapters to learn! Imagine the potential for all the

00:27:57,720 --> 00:28:05,360
lemurs out there! All of their tricks. We would be absolutely unstop ‑‑

00:28:05,360 --> 00:28:12,270
So the book slammed and Red turned and what he found behind him scared him far more than

00:28:12,270 --> 00:28:19,740
Crimson ever had. Master scarlet was back and she was not amused. So, Red turned quickly

00:28:19,740 --> 00:28:30,080
trying to get help from Crimson, just to find a sign saying good luck. It seemed that Crimson

00:28:30,080 --> 00:28:35,799
was also afraid of master Scarlet for some reason. 

00:28:35,799 --> 00:28:47,590
Sit. We have much to talk about, now don't we, Red? And Red broke into a nervous sweat. 

00:28:47,590 --> 00:28:51,679
Proper magic.  [ Laughter ]

00:28:51,679 --> 00:28:58,440
This is a dangerous book, Red, full of all forms of knowledge that you might not be ready

00:28:58,440 --> 00:29:05,460
for or know how to use appropriately. Red made a particularly intense study. You must

00:29:05,460 --> 00:29:11,880
remember for all languages out there, you must use Ruby as Ruby. Magic can be confusing

00:29:11,880 --> 00:29:17,670
and unwieldy and difficult to control and harder to understand for those not ready. 

00:29:17,670 --> 00:29:24,500
But even given that, there are many lessons to be learned, wisdoms we may apply to the

00:29:24,500 --> 00:29:30,970
highest levels of Ruby, and language is always evolving, and we need people willing to experiment

00:29:30,970 --> 00:29:37,640
to drive its future. Consider the lesson of the place holder arguments. Such a thing

00:29:37,640 --> 00:29:45,179
now exists in Ruby 2.7 with numbered arguments, and many more may well soon follow. What

00:29:45,179 --> 00:29:51,010
is considered magic today may very well be law in Ruby tomorrow. 

00:29:51,010 --> 00:29:57,210
Now there are many more tales in this Grimoire and more lessons I'm sure that Crimson could

00:29:57,210 --> 00:30:04,520
teach you. But be cautious and wise in per suing such knowledge. The cost is high and

00:30:04,520 --> 00:30:10,429
the great weaves of production that you do not entirely understand yet. But the cost

00:30:10,429 --> 00:30:14,480
is higher to pretend they do not exist at all. 

00:30:14,480 --> 00:30:22,230
Now, in the meantime, I do believe I have a test ready for you upstairs. So, I do hope

00:30:22,230 --> 00:30:28,490
you studied while I was gone... because I'll be giving it as soon as I'm up there. With

00:30:28,490 --> 00:30:38,200
that, Red made a dead heat run towards the stairs. 

00:30:38,200 --> 00:30:47,580
Epilogue... So, there behind master Scarlet, Red hurried

00:30:47,580 --> 00:30:52,350
up the stairs in a bit of a panic. Once he was sure she left, he grinned and called out

00:30:52,350 --> 00:31:00,800
into the darkness, so, the dark lord Crimson, is it? Quite a title you have taken for yourself,

00:31:00,800 --> 00:31:07,909
now haven't you, dear brother.  >> I thought you'd enjoy that one. Oh, just

00:31:07,909 --> 00:31:12,539
having a bit of fun. That's all. You keep on knocking all the visitors out. I had to

00:31:12,539 --> 00:31:17,240
prepare a special surprise. It was such a special momentous occasion. Can you believe

00:31:17,240 --> 00:31:22,460
it? Someone actually wanted to learn from me today. 

00:31:22,460 --> 00:31:27,409
Surprise? You nearly scared the poor child out of his rows. That's not a surprise. That's

00:31:27,409 --> 00:31:33,490
horrific.  Yes, well perhaps a bit too surprising. It's

00:31:33,490 --> 00:31:37,549
been a while, and I really did enjoy getting to speak to Red. 

00:31:37,549 --> 00:31:45,880
I suppose it has been a while. He's grown quite a bit since you've taken him in, hasn't

00:31:45,880 --> 00:31:49,669
he?  He has, and I believe he's finally ready for

00:31:49,669 --> 00:31:54,669
some of the lessons you and the other lemurs down here can teach him. 

00:31:54,669 --> 00:32:00,800
Interesting you should say that. It was quite strange to see him down here, especially with

00:32:00,800 --> 00:32:04,600
that giant door you had put up in front of my library. 

00:32:04,600 --> 00:32:11,720
To make sure he didn't get into something beyond him. It's almost as if someone left

00:32:11,720 --> 00:32:18,279
the door unlocked on purpose.  Now whoever would do a thing like that? 

00:32:18,279 --> 00:32:24,120
Who indeed, I suppose. Who indeed?  So it was in the tales of Ruby Grimoire that

00:32:24,120 --> 00:32:30,110
Red would come to know of its magic and master Scarlet would give him permission to study

00:32:30,110 --> 00:32:45,330
under master Crimson. Magic is integral to Ruby. And the beauty of programming in Ruby

00:32:45,330 --> 00:32:51,840
is having the ability to do just that. And that very experimentation can and sometimes

00:32:51,840 --> 00:32:56,370
does become a core part of the language and drives discussion around what Ruby should

00:32:56,370 --> 00:33:02,559
be in the future, how we should be thinking, programming, and doing. But there was a cost

00:33:02,559 --> 00:33:08,460
mentioned here, and that cost can indeed be very high. It takes a lot of discretion and

00:33:08,460 --> 00:33:13,330
great wisdom to handle such magic in production, and often the simplest of code is best. And

00:33:13,330 --> 00:33:19,490
there's a special type of magic in simple, readable, understandable type of code. But

00:33:19,490 --> 00:33:25,649
that's a lesson for another day.  So to wrap up, and it has been fun. This

00:33:25,649 --> 00:33:30,940
talk was custom illustrated by myself with 12 lemurs, 62 illustrations, 85 hours, and

00:33:30,940 --> 00:33:41,779
about 156 slides.  Now, the scary part of this talk: You thought

00:33:41,779 --> 00:33:50,240
all those magics were just me doing presentations. Oh no. Oh no, no, no. Those who know me know

00:33:50,240 --> 00:33:56,559
very well that's not true. It's real. Oh, it's very definitely real. And there are

00:33:56,559 --> 00:34:06,960
journals on my GitHub which do exactly that. Place holder arguments for Mf, the first Scala part. Sf

00:34:06,960 --> 00:34:13,230
happens to be the stack builder. It is experimental. It breaks a lot of things, not surprisingly. Destructuring

00:34:13,230 --> 00:34:20,109
was in Qo, which is an implementation of pattern matching, and some of that ended up becoming

00:34:20,109 --> 00:34:28,409
pattern matching. And I'm still trying to convince Matz that we need a bury function. I

00:34:28,409 --> 00:34:36,609
would be quite found of that function.  So if you wish to find out more about the

00:34:36,609 --> 00:34:41,079
lemurs and the next adventures, because I fully intend to make more, follow me on any

00:34:41,079 --> 00:34:48,549
social networks. I will post slides and examples and more. 

00:34:48,549 --> 00:34:54,529
And honestly, we have to give credit where credit is due. A talk like this doesn't exist

00:34:54,529 --> 00:34:59,160
without a lot of help from the community, from those willing to entertain my mad scientist

00:34:59,160 --> 00:35:04,170
experiments, what I can only call a very, very odd form of the hallway test. You want

00:35:04,170 --> 00:35:10,019
to see something cool in Ruby? No! I don't have time. There were those who had time,

00:35:10,019 --> 00:35:17,020
and I thank them very much. The mad science experiments really built up a community of

00:35:17,020 --> 00:35:21,829
people who enjoyed hacking around and having fun. You may also notice a few foxes that

00:35:21,829 --> 00:35:25,761
were hiding around in earlier slides. This is because my first Ruby book happened to

00:35:25,761 --> 00:35:31,529
be written by a certain lucky stiff and it still influences the way I write Ruby today. Ruby

00:35:31,529 --> 00:35:36,099
needs more fun and whimsy. Don't be afraid to submit your own wild and illustrated talks,

00:35:36,099 --> 00:35:41,239
because I look forward to seeing them one day. 

00:35:41,239 --> 00:35:47,049
And we're playing a little bit of a fun sticker game again. You will find five square engineers

00:35:47,049 --> 00:35:54,170
including myself. And they will be up around the conference. I posted pictures of them

00:35:54,170 --> 00:36:02,609
with the tag lemurs of RubyConf. Take a picture, tag it, and we have a special raffle with

00:36:02,609 --> 00:36:09,150
an indeterminate prize that I'm still working on. That's how raffles work, right? That's

00:36:09,150 --> 00:36:15,579
about all I have for today. It's been fun. Thank you for allowing me to tell you this magical

00:36:15,579 --> 00:36:16,250

YouTube URL: https://www.youtube.com/watch?v=TVwVLBor8WE


