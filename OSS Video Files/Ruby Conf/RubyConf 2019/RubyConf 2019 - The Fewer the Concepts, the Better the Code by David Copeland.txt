Title: RubyConf 2019 - The Fewer the Concepts, the Better the Code by David Copeland
Publication date: 2019-12-03
Playlist: RubyConf 2019
Description: 
	RubyConf 2019 - The Fewer the Concepts, the Better the Code by David Copeland

How many people could change the code you wrote yesterday if they had to? I hope to convince you that the larger that number, the better your code, and the key is to manage conceptual overhead. The fewer things someone has to know to read and modify your code, the better for you, your team, your company, your app. We'll see real examples of code that we'll put on a conceptual diet. We'll then talk about what that reduction actually does to code quality.

#confreaks #rubyconf2019
Captions: 
	00:00:04,190 --> 00:00:10,269
[Music]

00:00:12,049 --> 00:00:18,119
all right thanks everybody for coming my

00:00:16,139 --> 00:00:19,770
name is Dave Koplin or dh1 5000 on

00:00:18,119 --> 00:00:21,660
Twitter and I'm pretty excited to talk

00:00:19,770 --> 00:00:24,300
about this topic because something that

00:00:21,660 --> 00:00:25,740
I learned very late in my career and it

00:00:24,300 --> 00:00:27,840
made me rethink a lot of assumptions so

00:00:25,740 --> 00:00:30,510
maybe I'll convince you of the of the

00:00:27,840 --> 00:00:33,059
same thing so I want to talk about

00:00:30,510 --> 00:00:34,170
Justin Justin's the guy that I worked

00:00:33,059 --> 00:00:36,270
with at stitch fix he's a very

00:00:34,170 --> 00:00:39,420
experienced engineer that's not him

00:00:36,270 --> 00:00:42,059
obviously he didn't clear his likeness

00:00:39,420 --> 00:00:44,429
rights for this talk so Justin as I said

00:00:42,059 --> 00:00:46,800
is a very experienced engineer he is a

00:00:44,429 --> 00:00:49,289
more experienced with networking

00:00:46,800 --> 00:00:50,999
infrastructure system administration

00:00:49,289 --> 00:00:53,010
operations things like that but he's

00:00:50,999 --> 00:00:55,889
written a lot of code in his career and

00:00:53,010 --> 00:00:57,749
he is a capable programmer now if I were

00:00:55,889 --> 00:01:00,510
to ask Justin if he's a rails programmer

00:00:57,749 --> 00:01:01,799
he would definitely say no not at all

00:01:00,510 --> 00:01:03,269
but he's actually pretty good rails

00:01:01,799 --> 00:01:05,580
programmer he's able to get things done

00:01:03,269 --> 00:01:07,710
in rails and you know it's it's it's no

00:01:05,580 --> 00:01:09,810
big deal for him he views it as just a

00:01:07,710 --> 00:01:10,860
means of getting something done so he

00:01:09,810 --> 00:01:14,369
and I were working on a project together

00:01:10,860 --> 00:01:16,409
and this project involves building the

00:01:14,369 --> 00:01:17,579
deployment pipeline for stitch fix and

00:01:16,409 --> 00:01:19,469
there's a lot that goes into that that

00:01:17,579 --> 00:01:20,939
isn't Ruby on Rails but Ruby on Rails

00:01:19,469 --> 00:01:22,770
was a central part of this so we were

00:01:20,939 --> 00:01:23,880
working on this application together and

00:01:22,770 --> 00:01:26,340
there's a period where he and I were the

00:01:23,880 --> 00:01:28,380
only ones working on it so we would

00:01:26,340 --> 00:01:31,079
review each other's code as you do

00:01:28,380 --> 00:01:32,759
because you should review code and so

00:01:31,079 --> 00:01:35,549
this is kind of how the the code reviews

00:01:32,759 --> 00:01:36,659
went so Justin would make a change and I

00:01:35,549 --> 00:01:39,270
would review it and pretty cool right

00:01:36,659 --> 00:01:41,130
fine he'd write code spine make sense

00:01:39,270 --> 00:01:42,960
good tests maybe I don't ask questions

00:01:41,130 --> 00:01:44,579
about AWS or something but the code

00:01:42,960 --> 00:01:46,829
itself the rails part you know no big

00:01:44,579 --> 00:01:48,109
deal pretty straightforward now when I

00:01:46,829 --> 00:01:50,340
would make a change

00:01:48,109 --> 00:01:51,810
Justin's comments were usually of the

00:01:50,340 --> 00:01:54,030
form of like why did you do it that way

00:01:51,810 --> 00:01:55,439
or what is all this stuff or what is

00:01:54,030 --> 00:01:57,479
going on here and not because he

00:01:55,439 --> 00:01:59,969
couldn't understand it or couldn't go

00:01:57,479 --> 00:02:01,770
look up something but he was just like

00:01:59,969 --> 00:02:03,749
why did you not do it some other way and

00:02:01,770 --> 00:02:06,030
his other way would always be with less

00:02:03,749 --> 00:02:07,649
stuff in it and I would say Oh will do

00:02:06,030 --> 00:02:09,149
let me just tell you the cyclomatic

00:02:07,649 --> 00:02:11,039
complexity of the code that I wrote is

00:02:09,149 --> 00:02:12,720
much lower so it is less complicated I

00:02:11,039 --> 00:02:14,670
did not use intermediate variables which

00:02:12,720 --> 00:02:16,320
can cause confusion and make it hard to

00:02:14,670 --> 00:02:17,820
understand and did you see that I use

00:02:16,320 --> 00:02:19,140
list comprehensions and functional style

00:02:17,820 --> 00:02:20,069
programming because it makes it way

00:02:19,140 --> 00:02:21,450
easier to understand

00:02:20,069 --> 00:02:24,090
when you do that and as I'm explaining

00:02:21,450 --> 00:02:25,499
this stuff over and over I'm like why

00:02:24,090 --> 00:02:26,760
don't why am i explaining code that is

00:02:25,499 --> 00:02:28,799
supposed to be easy to understand

00:02:26,760 --> 00:02:32,129
shouldn't I not have to do that if it is

00:02:28,799 --> 00:02:33,629
easy to understand and it made me think

00:02:32,129 --> 00:02:35,189
about like what is it about the code

00:02:33,629 --> 00:02:37,469
that's not easy to understand is it

00:02:35,189 --> 00:02:39,269
Justin I mean yes he's the one who's not

00:02:37,469 --> 00:02:41,430
understanding it but like should he be

00:02:39,269 --> 00:02:43,530
expected to understand it or should I

00:02:41,430 --> 00:02:45,120
maybe be expected to write code that he

00:02:43,530 --> 00:02:46,889
could understand I mean I wrote code

00:02:45,120 --> 00:02:48,719
that 50% of the team couldn't understand

00:02:46,889 --> 00:02:50,579
that seems like a problem and maybe the

00:02:48,719 --> 00:02:52,430
problem isn't Justin maybe the problem

00:02:50,579 --> 00:02:54,840
was me or the code that I was writing

00:02:52,430 --> 00:02:56,909
and when I start to think about like how

00:02:54,840 --> 00:02:58,409
do we evaluate code right we we run

00:02:56,909 --> 00:03:02,040
these code metrics on it right some of

00:02:58,409 --> 00:03:03,900
them I'm kind of referencing up here but

00:03:02,040 --> 00:03:05,669
the fact is code doesn't exist in a

00:03:03,900 --> 00:03:07,919
vacuum we don't like hanging on a wall

00:03:05,669 --> 00:03:09,959
and then just talk about how good or bad

00:03:07,919 --> 00:03:11,879
it is because that's not how code is

00:03:09,959 --> 00:03:13,620
used we don't we don't use it that way

00:03:11,879 --> 00:03:15,480
it always exists in some sort of context

00:03:13,620 --> 00:03:18,359
that context is actually pretty

00:03:15,480 --> 00:03:20,939
important when we think about like how

00:03:18,359 --> 00:03:23,219
good or bad the code is right what is

00:03:20,939 --> 00:03:24,239
the code for how important is it that it

00:03:23,219 --> 00:03:25,769
works perfectly we've all written

00:03:24,239 --> 00:03:26,879
one-off scripts they don't need to be

00:03:25,769 --> 00:03:28,530
that well designed they don't need to

00:03:26,879 --> 00:03:30,000
work that well what if it's not going to

00:03:28,530 --> 00:03:31,739
change that often what if it is gonna

00:03:30,000 --> 00:03:34,079
change that's pretty important to

00:03:31,739 --> 00:03:35,370
deciding how good or bad the code is and

00:03:34,079 --> 00:03:37,259
deciding about how we should write the

00:03:35,370 --> 00:03:39,569
code but the thing I want to talk about

00:03:37,259 --> 00:03:41,549
of these last two right whose job is it

00:03:39,569 --> 00:03:43,290
to maintain that code whose job is it to

00:03:41,549 --> 00:03:44,939
make sure that code is working and add

00:03:43,290 --> 00:03:46,650
features to that code and who might be

00:03:44,939 --> 00:03:49,709
the type of people that we want to be

00:03:46,650 --> 00:03:52,799
able to change modify understand that

00:03:49,709 --> 00:03:54,659
code and shouldn't that context be

00:03:52,799 --> 00:03:56,519
pretty important all right if I write

00:03:54,659 --> 00:03:58,829
the most amazing code and nobody can

00:03:56,519 --> 00:04:01,220
understand it or maintain it like is it

00:03:58,829 --> 00:04:03,269
that amazing I don't think it is and

00:04:01,220 --> 00:04:04,769
write code metrics like they key they

00:04:03,269 --> 00:04:06,750
can't possibly have this context right

00:04:04,769 --> 00:04:07,799
how could they you and your code through

00:04:06,750 --> 00:04:09,449
code climate doesn't know who's on your

00:04:07,799 --> 00:04:10,680
team doesn't know what your code is for

00:04:09,449 --> 00:04:12,780
it just knows what your code looks like

00:04:10,680 --> 00:04:14,430
it hangs your code on a wall and says

00:04:12,780 --> 00:04:17,370
stuff about it and it's not wrong stuff

00:04:14,430 --> 00:04:19,199
but it's not the whole picture so let's

00:04:17,370 --> 00:04:21,000
look at some code and look at some

00:04:19,199 --> 00:04:23,759
standard code metrics and then see if we

00:04:21,000 --> 00:04:27,000
can sort of try to unwind this so here's

00:04:23,759 --> 00:04:28,260
some code that sums up the cost of items

00:04:27,000 --> 00:04:31,889
in a shop and cards everybody understand

00:04:28,260 --> 00:04:33,660
what this code does anybody completely

00:04:31,889 --> 00:04:36,120
confused by this code okay so

00:04:33,660 --> 00:04:37,710
okay so I would say this is pretty

00:04:36,120 --> 00:04:39,720
idiomatic Ruby code we're not using

00:04:37,710 --> 00:04:42,030
rails not using active support we're not

00:04:39,720 --> 00:04:43,830
using meta programming reusing some

00:04:42,030 --> 00:04:44,910
stuff from the standard library most

00:04:43,830 --> 00:04:47,070
people could program Ruby know what a

00:04:44,910 --> 00:04:48,870
class and a method is and what I've R is

00:04:47,070 --> 00:04:50,430
so pretty I would say not controversial

00:04:48,870 --> 00:04:52,290
pretty idiomatic I would write code like

00:04:50,430 --> 00:04:54,150
this all the time and I would expect

00:04:52,290 --> 00:04:56,490
most the people on my team to to be able

00:04:54,150 --> 00:04:57,540
to figure this out so let's look at some

00:04:56,490 --> 00:04:58,860
code metrics for this so we have a

00:04:57,540 --> 00:05:00,990
baseline right we have a baseline of

00:04:58,860 --> 00:05:01,590
what the code metrics tell us about this

00:05:00,990 --> 00:05:03,630
idiomatic

00:05:01,590 --> 00:05:06,630
Ruby routine here so I chose four of

00:05:03,630 --> 00:05:08,700
them that Rugel cop can calculate rubra

00:05:06,630 --> 00:05:11,610
cop is many things but one thing it can

00:05:08,700 --> 00:05:13,440
do is perform these code metrics on your

00:05:11,610 --> 00:05:15,720
code so method length obviously it's how

00:05:13,440 --> 00:05:17,220
many lines in the method ABC size is

00:05:15,720 --> 00:05:18,840
this sort of notion of like how many

00:05:17,220 --> 00:05:19,890
statements branches and conditionals are

00:05:18,840 --> 00:05:21,600
in the code and that sort of gives us a

00:05:19,890 --> 00:05:22,500
sense of how complicated it is or

00:05:21,600 --> 00:05:23,910
there's more branches or more

00:05:22,500 --> 00:05:26,070
conditionals maybe it's harder to

00:05:23,910 --> 00:05:28,800
understand a cyclomatic complexity

00:05:26,070 --> 00:05:30,240
that's a very very old one that tries to

00:05:28,800 --> 00:05:31,710
count the number of pathways through the

00:05:30,240 --> 00:05:32,700
code the thinking being if there's more

00:05:31,710 --> 00:05:34,100
paths through the code it's more

00:05:32,700 --> 00:05:35,610
complicated or harder to understand

00:05:34,100 --> 00:05:36,870
Rubick app has this thing called

00:05:35,610 --> 00:05:38,820
perceived complexity which tries to

00:05:36,870 --> 00:05:39,930
calculate it in a different way we saw

00:05:38,820 --> 00:05:41,430
we calculated all these and it's gonna

00:05:39,930 --> 00:05:42,960
give us this sort of baseline now these

00:05:41,430 --> 00:05:45,420
values don't really mean anything they

00:05:42,960 --> 00:05:47,130
don't have units that are meaningful but

00:05:45,420 --> 00:05:49,320
they are meaningful when we compare

00:05:47,130 --> 00:05:51,419
these metrics to the same metrics for a

00:05:49,320 --> 00:05:52,830
different bit of code so let's look at a

00:05:51,419 --> 00:05:55,440
different bit of code that does the same

00:05:52,830 --> 00:05:59,820
thing okay does everybody understand

00:05:55,440 --> 00:06:02,070
what this code does little grumpiness

00:05:59,820 --> 00:06:04,290
there it's pretty gross right I would

00:06:02,070 --> 00:06:07,890
say that this is not idiomatic Ruby code

00:06:04,290 --> 00:06:09,270
right we got all these variables here

00:06:07,890 --> 00:06:12,630
we've got a for loop anybody know how to

00:06:09,270 --> 00:06:14,760
do a for loop in Ruby I I had to look it

00:06:12,630 --> 00:06:17,010
up I had never done it before I had to

00:06:14,760 --> 00:06:20,070
look it up and we got this a nasty

00:06:17,010 --> 00:06:21,360
explicit return like yeah this feels

00:06:20,070 --> 00:06:23,730
kind of gross like this doesn't seem

00:06:21,360 --> 00:06:25,890
good it's more stuff it just doesn't

00:06:23,730 --> 00:06:27,870
seem good so what does Robocop tell us

00:06:25,890 --> 00:06:29,190
well Robocop tells us in every way it's

00:06:27,870 --> 00:06:30,840
worse right it's a longer method it's

00:06:29,190 --> 00:06:32,760
got a bigger ABC sides it's got a higher

00:06:30,840 --> 00:06:35,070
cyclomatic complexity it's got a higher

00:06:32,760 --> 00:06:36,660
perceived complexity so all of this is

00:06:35,070 --> 00:06:39,330
telling us the second routine is more

00:06:36,660 --> 00:06:43,680
complex therefore harder to understand

00:06:39,330 --> 00:06:45,660
therefore worse right but whose job is

00:06:43,680 --> 00:06:46,979
it to maintain this code what if you're

00:06:45,660 --> 00:06:47,610
a JavaScript developer and you get

00:06:46,979 --> 00:06:49,020
thrown

00:06:47,610 --> 00:06:52,289
this code which version would you rather

00:06:49,020 --> 00:06:55,289
have to maintain but if you're a Java

00:06:52,289 --> 00:06:56,550
developer what if you just got out of

00:06:55,289 --> 00:06:58,500
boot camp and you haven't looked in the

00:06:56,550 --> 00:06:59,819
standard library for map and select

00:06:58,500 --> 00:07:02,849
which one would be easier for you to

00:06:59,819 --> 00:07:04,830
understand so how do we quantify that

00:07:02,849 --> 00:07:06,409
how can we try to figure that out like

00:07:04,830 --> 00:07:09,030
how can we try to paint a picture of who

00:07:06,409 --> 00:07:11,759
could possibly work on this code or or

00:07:09,030 --> 00:07:13,650
maybe someday could work on this code so

00:07:11,759 --> 00:07:15,000
I decided let me just count the things

00:07:13,650 --> 00:07:16,319
right what if we just count what you

00:07:15,000 --> 00:07:18,210
need to know we can certainly itemize

00:07:16,319 --> 00:07:20,789
out everything you need to know to

00:07:18,210 --> 00:07:23,639
understand these two bits of code and

00:07:20,789 --> 00:07:24,870
see what that tells us all right so to

00:07:23,639 --> 00:07:26,159
understand this what do you need to know

00:07:24,870 --> 00:07:27,690
you got to know what a class is you got

00:07:26,159 --> 00:07:30,150
to know how to death you know is what a

00:07:27,690 --> 00:07:31,919
method does you got to know what line

00:07:30,150 --> 00:07:33,659
items does you have to know what dot is

00:07:31,919 --> 00:07:36,030
you have to know what selected map and

00:07:33,659 --> 00:07:37,289
reduce do right we're going through what

00:07:36,030 --> 00:07:39,240
you need to know to understand this code

00:07:37,289 --> 00:07:41,279
you got to know what ampersand colon in

00:07:39,240 --> 00:07:43,469
stock question mark is and how come you

00:07:41,279 --> 00:07:45,569
can pass that to select you got to know

00:07:43,469 --> 00:07:47,639
how come you can do that with Plus and

00:07:45,569 --> 00:07:50,310
you got to know right what this curly

00:07:47,639 --> 00:07:51,750
brace does you know this pipe does I

00:07:50,310 --> 00:07:54,870
took me forever to figure what the pipe

00:07:51,750 --> 00:07:56,400
is for and you got to know what star

00:07:54,870 --> 00:07:58,770
does and of course how does it method

00:07:56,400 --> 00:08:00,180
get its return value that's thirteen

00:07:58,770 --> 00:08:01,110
concepts so if you knew all these

00:08:00,180 --> 00:08:02,400
concepts you should be able to

00:08:01,110 --> 00:08:03,449
understand that code if you can

00:08:02,400 --> 00:08:04,740
understand that code you should

00:08:03,449 --> 00:08:07,770
certainly be able to understand these

00:08:04,740 --> 00:08:09,089
thirteen concepts all right cool we'll

00:08:07,770 --> 00:08:11,879
write that down in our little metrics

00:08:09,089 --> 00:08:14,250
table now let's look at the more complex

00:08:11,879 --> 00:08:16,080
grosser nastier code that offends our

00:08:14,250 --> 00:08:17,940
sensibilities what do you need to know

00:08:16,080 --> 00:08:20,279
to understand this code well it's got

00:08:17,940 --> 00:08:21,330
class def at line items dot and star

00:08:20,279 --> 00:08:23,550
from the other one so you got to know

00:08:21,330 --> 00:08:25,379
those of course here too what else you

00:08:23,550 --> 00:08:27,330
need to know what equals thus you gotta

00:08:25,379 --> 00:08:29,580
know what this for loop does gotta know

00:08:27,330 --> 00:08:32,390
what an if statement is there what plus

00:08:29,580 --> 00:08:33,719
does you gotta know what return does

00:08:32,390 --> 00:08:37,199
that's it

00:08:33,719 --> 00:08:40,079
nine nine things pretty interesting

00:08:37,199 --> 00:08:42,089
right it's it's it doesn't look good we

00:08:40,079 --> 00:08:44,399
don't like it Robocop says it's bad and

00:08:42,089 --> 00:08:46,050
yet it requires a lesson knowledge to

00:08:44,399 --> 00:08:47,640
understand that code you don't need to

00:08:46,050 --> 00:08:49,290
know as much stuff to understand that

00:08:47,640 --> 00:08:50,640
code even though everything else is

00:08:49,290 --> 00:08:52,829
telling us is more complex and therefore

00:08:50,640 --> 00:08:54,510
should be harder to understand I think

00:08:52,829 --> 00:08:56,339
that's really interesting right I think

00:08:54,510 --> 00:08:57,660
it's really interesting and if you

00:08:56,339 --> 00:08:59,339
wonder why people like the go

00:08:57,660 --> 00:09:01,449
programming language like this is kind

00:08:59,339 --> 00:09:03,949
of what it's getting at

00:09:01,449 --> 00:09:05,599
so it makes me kind of question what

00:09:03,949 --> 00:09:08,689
does it mean for code to be better like

00:09:05,599 --> 00:09:10,339
I would say no we having to know less to

00:09:08,689 --> 00:09:11,629
understand code is a good thing good

00:09:10,339 --> 00:09:13,249
code shouldn't require knowing as much

00:09:11,629 --> 00:09:15,289
stuff right or that's gotta count for

00:09:13,249 --> 00:09:16,669
something but yet these complexity

00:09:15,289 --> 00:09:18,469
metrics can't be ignored

00:09:16,669 --> 00:09:20,329
right if statements do create complexity

00:09:18,469 --> 00:09:28,069
so how do we know what code is actually

00:09:20,329 --> 00:09:29,989
better so I think we want to quantify

00:09:28,069 --> 00:09:33,319
that what it's like what are we trying

00:09:29,989 --> 00:09:34,549
to do with code right what do we do with

00:09:33,319 --> 00:09:38,239
code where's the purpose of it what are

00:09:34,549 --> 00:09:41,689
we trying to evaluate it against right

00:09:38,239 --> 00:09:43,879
so we write code sometimes we change

00:09:41,689 --> 00:09:45,649
code more than we write it we read code

00:09:43,879 --> 00:09:48,469
a lot now I don't know if this pie chart

00:09:45,649 --> 00:09:50,149
is exactly accurate but it probably you

00:09:48,469 --> 00:09:52,369
know tracks with with your experience

00:09:50,149 --> 00:09:53,419
right why do we read code well we need

00:09:52,369 --> 00:09:55,489
to understand what it does to explain

00:09:53,419 --> 00:09:56,689
its behavior debug something we need to

00:09:55,489 --> 00:09:58,069
read it so that we can then figure out

00:09:56,689 --> 00:09:59,719
what change we're gonna make do we

00:09:58,069 --> 00:10:01,099
change it we change code a lot and then

00:09:59,719 --> 00:10:03,529
sometimes we write new code but we don't

00:10:01,099 --> 00:10:06,259
write new code as much as we change code

00:10:03,529 --> 00:10:08,029
and changing code and reading code are

00:10:06,259 --> 00:10:10,129
kind of forms of understanding that code

00:10:08,029 --> 00:10:12,859
right so we need to understand what the

00:10:10,129 --> 00:10:15,409
code actually does to write explain its

00:10:12,859 --> 00:10:17,989
behavior to confidently change it right

00:10:15,409 --> 00:10:19,189
and so it stands to reason right if we

00:10:17,989 --> 00:10:21,289
want to talk about what is better well

00:10:19,189 --> 00:10:23,149
all things being equal code whose

00:10:21,289 --> 00:10:24,889
behavior is easier to understand should

00:10:23,149 --> 00:10:26,599
be better than code whose behavior is

00:10:24,889 --> 00:10:28,459
harder to understand we talk about

00:10:26,599 --> 00:10:29,959
complex what is the opposite of complex

00:10:28,459 --> 00:10:33,829
simple what do those mean they mean

00:10:29,959 --> 00:10:34,999
understanding right so if code is easier

00:10:33,829 --> 00:10:37,399
to understand that's a better than code

00:10:34,999 --> 00:10:39,619
that isn't easy as easy to understand

00:10:37,399 --> 00:10:40,759
right but by that definition

00:10:39,619 --> 00:10:42,470
I understand all the code that I've

00:10:40,759 --> 00:10:44,149
written and you do not understand that

00:10:42,470 --> 00:10:46,819
code so therefore my code is better than

00:10:44,149 --> 00:10:49,819
yours right not true right that's

00:10:46,819 --> 00:10:50,809
definitely not true right who is the

00:10:49,819 --> 00:10:52,069
person that's supposed to understand

00:10:50,809 --> 00:10:53,679
this code that is what I'm getting it

00:10:52,069 --> 00:10:55,639
this is what matters

00:10:53,679 --> 00:10:56,959
you might say hey what are you doing

00:10:55,639 --> 00:10:58,759
with the Ruby job if you don't know how

00:10:56,959 --> 00:11:01,939
to do map and reduce and all that stuff

00:10:58,759 --> 00:11:04,069
I mean I don't know like I'm not gonna

00:11:01,939 --> 00:11:05,989
make a list of what rubyists like have

00:11:04,069 --> 00:11:07,609
to know or you could say I learned that

00:11:05,989 --> 00:11:09,709
stuff it's easy no problem everybody can

00:11:07,609 --> 00:11:11,359
figure out what map does I mean maybe

00:11:09,709 --> 00:11:14,160
some stuff is easy to learn but some

00:11:11,359 --> 00:11:16,649
stuff is hard I told you about the brace

00:11:14,160 --> 00:11:17,610
right I didn't learn Ruby for like six

00:11:16,649 --> 00:11:19,259
months cuz I couldn't figure out those

00:11:17,610 --> 00:11:21,239
pipes before like that would confuse the

00:11:19,259 --> 00:11:23,069
hell out of me so I don't want to tell

00:11:21,239 --> 00:11:25,259
anybody what's easy or hard to learn but

00:11:23,069 --> 00:11:27,300
it is worth thinking about like you know

00:11:25,259 --> 00:11:28,410
learning stuff and whose job is it to

00:11:27,300 --> 00:11:30,989
learn stuff and how are we gonna get

00:11:28,410 --> 00:11:32,459
them to learn what they need to learn so

00:11:30,989 --> 00:11:36,360
remember Justin from the beginning so

00:11:32,459 --> 00:11:38,429
this is Josh not really so Josh joined

00:11:36,360 --> 00:11:39,839
the team with Justin and I Josh is also

00:11:38,429 --> 00:11:40,920
an experienced engineer not as

00:11:39,839 --> 00:11:43,170
experienced as Justin but still very

00:11:40,920 --> 00:11:44,610
experienced his experience is very

00:11:43,170 --> 00:11:47,369
similar to Justin's and that it's the

00:11:44,610 --> 00:11:48,929
world of networking and operations and

00:11:47,369 --> 00:11:49,259
system administration AWS and things

00:11:48,929 --> 00:11:51,779
like that

00:11:49,259 --> 00:11:53,249
although josh has not had the good or

00:11:51,779 --> 00:11:55,619
bad fortune to do as much programming in

00:11:53,249 --> 00:11:56,850
his career as Justin had so josh is a

00:11:55,619 --> 00:11:59,639
little less experienced as a programmer

00:11:56,850 --> 00:12:01,679
but he's on a team and part of that team

00:11:59,639 --> 00:12:04,290
is to maintain this rails app and that

00:12:01,679 --> 00:12:05,699
means writing rails code so we want Josh

00:12:04,290 --> 00:12:07,980
to be able to do that a Josh wants to be

00:12:05,699 --> 00:12:09,299
able to do that so it's interesting is

00:12:07,980 --> 00:12:10,799
when Josh looks at the code that I wrote

00:12:09,299 --> 00:12:12,389
that is less complex and better and

00:12:10,799 --> 00:12:15,089
functional style and list comprehensions

00:12:12,389 --> 00:12:16,829
and all that he's like what is this not

00:12:15,089 --> 00:12:17,999
like how dare you write such horrible

00:12:16,829 --> 00:12:19,379
code but literally like I don't

00:12:17,999 --> 00:12:20,879
understand what I'm looking at there's a

00:12:19,379 --> 00:12:23,579
lot going on how do I pick this apart

00:12:20,879 --> 00:12:26,399
when he looks at Justin's code which is

00:12:23,579 --> 00:12:28,769
less fancy and gross and has more stuff

00:12:26,399 --> 00:12:31,559
or more lines of code he's like I get it

00:12:28,769 --> 00:12:33,149
and he's able to be effective I find

00:12:31,559 --> 00:12:35,459
that really interesting right so we have

00:12:33,149 --> 00:12:37,379
someone who is on a team whose job it is

00:12:35,459 --> 00:12:38,490
to maintain an application and as part

00:12:37,379 --> 00:12:40,589
of that application that he can

00:12:38,490 --> 00:12:42,990
confidently change and parts that he

00:12:40,589 --> 00:12:44,339
can't and I would say because of who he

00:12:42,990 --> 00:12:45,929
is in the team and what the team is

00:12:44,339 --> 00:12:48,269
trying to do the parts he can't change

00:12:45,929 --> 00:12:50,899
maybe that's not good code maybe if he

00:12:48,269 --> 00:12:54,470
could change it all that would be better

00:12:50,899 --> 00:12:56,519
so let's look at the concepts again

00:12:54,470 --> 00:12:57,629
because as I said josh is in a little

00:12:56,519 --> 00:13:00,569
bit of programming he can do some bash

00:12:57,629 --> 00:13:01,679
things like that all right so all of

00:13:00,569 --> 00:13:02,850
this stuff here on the right that I've

00:13:01,679 --> 00:13:04,860
highlighted those are the things in the

00:13:02,850 --> 00:13:07,379
first code listing that are not required

00:13:04,860 --> 00:13:09,660
to know in the second and look at them

00:13:07,379 --> 00:13:12,179
they're pretty complicated like what do

00:13:09,660 --> 00:13:13,290
you even call ampersand : in stock

00:13:12,179 --> 00:13:14,999
question well what is that even called

00:13:13,290 --> 00:13:17,699
how would you even know to ask what that

00:13:14,999 --> 00:13:19,980
is these are like very Ruby specific

00:13:17,699 --> 00:13:21,089
things if you know JavaScript really

00:13:19,980 --> 00:13:24,350
really well you're not gonna have any

00:13:21,089 --> 00:13:27,430
intuition about many of these things

00:13:24,350 --> 00:13:28,870
compared to this right

00:13:27,430 --> 00:13:31,630
any programming languages have plus and

00:13:28,870 --> 00:13:33,779
if for in return

00:13:31,630 --> 00:13:37,390
how many programmers know what these are

00:13:33,779 --> 00:13:39,339
probably a lot so this is the tie up

00:13:37,390 --> 00:13:41,080
index and we can debate this or not but

00:13:39,339 --> 00:13:42,430
I think this tracks enough to make my

00:13:41,080 --> 00:13:44,890
point which is that most programmers

00:13:42,430 --> 00:13:48,490
know a programming language that has if

00:13:44,890 --> 00:13:51,580
for and return in it and so most of

00:13:48,490 --> 00:13:53,080
these programmers who look at the second

00:13:51,580 --> 00:13:54,580
code listing will will have a pretty

00:13:53,080 --> 00:13:56,589
good intuition of what it does when they

00:13:54,580 --> 00:13:58,180
look at the first code listing it's less

00:13:56,589 --> 00:13:58,990
complex they have a lot more to learn

00:13:58,180 --> 00:14:00,220
it's gonna be harder for them to

00:13:58,990 --> 00:14:01,360
understand what's going on there

00:14:00,220 --> 00:14:04,060
harder form to understand the behavior

00:14:01,360 --> 00:14:07,420
of that code it's pretty interesting

00:14:04,060 --> 00:14:08,920
right now ten years from now maybe this

00:14:07,420 --> 00:14:10,899
is going to be all closure right and my

00:14:08,920 --> 00:14:14,200
point will not stand any longer as

00:14:10,899 --> 00:14:16,089
possible but for now it does stand and I

00:14:14,200 --> 00:14:18,040
think that's I think that's important to

00:14:16,089 --> 00:14:19,899
consider right if you think about who

00:14:18,040 --> 00:14:21,580
can we bring onto our team

00:14:19,899 --> 00:14:23,560
maybe if we said you've got to be a

00:14:21,580 --> 00:14:24,910
seasoned expert rubyist maybe we

00:14:23,560 --> 00:14:27,880
wouldn't have hired Josh because he's

00:14:24,910 --> 00:14:29,230
not a seasoned expert rubyist but we had

00:14:27,880 --> 00:14:30,490
a little bit of an environment that he

00:14:29,230 --> 00:14:31,870
could be successful and so we were able

00:14:30,490 --> 00:14:36,070
to hire him I think there's some power

00:14:31,870 --> 00:14:37,360
and thinking about that so right what

00:14:36,070 --> 00:14:39,490
did we just what did we just show right

00:14:37,360 --> 00:14:40,720
the more complex code not only does it

00:14:39,490 --> 00:14:41,890
require fewer concepts understand what

00:14:40,720 --> 00:14:44,950
the concept of digital car more

00:14:41,890 --> 00:14:46,150
Universal it's gonna keep hammering home

00:14:44,950 --> 00:14:49,420
this point because I think it's really

00:14:46,150 --> 00:14:51,700
fascinating so think about the value of

00:14:49,420 --> 00:14:53,410
code and who can understand it code that

00:14:51,700 --> 00:14:55,990
only the author understands not a lot of

00:14:53,410 --> 00:14:57,490
value their code that look everybody

00:14:55,990 --> 00:14:59,320
who's responsible for maintaining it

00:14:57,490 --> 00:15:00,760
they should be able to understand that I

00:14:59,320 --> 00:15:01,839
think if you have a team that can't

00:15:00,760 --> 00:15:03,670
understand all the code they have to

00:15:01,839 --> 00:15:06,700
maintain that's a problem probably want

00:15:03,670 --> 00:15:08,080
to start addressing that problem but

00:15:06,700 --> 00:15:09,760
what about code that everybody at your

00:15:08,080 --> 00:15:11,320
entire organization can understand that

00:15:09,760 --> 00:15:12,730
would seem to be very valuable code that

00:15:11,320 --> 00:15:14,589
would seem to be good code right if

00:15:12,730 --> 00:15:17,079
anyone on your entire company's

00:15:14,589 --> 00:15:18,279
engineering team can understand a

00:15:17,079 --> 00:15:20,440
certain bit of code that seems really

00:15:18,279 --> 00:15:21,850
really good what if everyone that

00:15:20,440 --> 00:15:23,380
understands Ruby could understand that

00:15:21,850 --> 00:15:26,380
code what if you wrote code that anyone

00:15:23,380 --> 00:15:28,240
who is a Rubeus by any definition could

00:15:26,380 --> 00:15:29,470
understand that seems amazing right

00:15:28,240 --> 00:15:31,270
wouldn't that be the most amazing code

00:15:29,470 --> 00:15:32,560
if you're building an application and a

00:15:31,270 --> 00:15:34,120
team and you could make it out of code

00:15:32,560 --> 00:15:35,829
that every Rubeus could understand

00:15:34,120 --> 00:15:37,390
that's pretty good right

00:15:35,829 --> 00:15:38,770
what about every programmer in the whole

00:15:37,390 --> 00:15:39,970
universe right if you could write code

00:15:38,770 --> 00:15:41,050
that every programmer everywhere can

00:15:39,970 --> 00:15:42,370
understand

00:15:41,050 --> 00:15:45,330
would be amazing I want to see that

00:15:42,370 --> 00:15:47,529
right that seems valuable right and so

00:15:45,330 --> 00:15:51,570
hyperbole here is saying that like the

00:15:47,529 --> 00:15:53,589
more people that can understand the code

00:15:51,570 --> 00:15:55,120
there's more value there right you're

00:15:53,589 --> 00:15:57,370
getting more out of that code because

00:15:55,120 --> 00:16:00,220
more people can understand it explain

00:15:57,370 --> 00:16:02,260
its behavior confidently confortably

00:16:00,220 --> 00:16:03,910
change it right so right and you can

00:16:02,260 --> 00:16:05,950
think about this stuff right what how

00:16:03,910 --> 00:16:07,779
learn about are the things in the code

00:16:05,950 --> 00:16:09,640
right could any programmer delimits if

00:16:07,779 --> 00:16:11,110
for any programmer knows what those

00:16:09,640 --> 00:16:12,339
things are probably what about a

00:16:11,110 --> 00:16:13,690
programmer that only knows an oo

00:16:12,339 --> 00:16:15,130
language well cool they know what a

00:16:13,690 --> 00:16:16,120
class is and what a method is so they're

00:16:15,130 --> 00:16:17,769
gonna learn those things more quickly

00:16:16,120 --> 00:16:19,810
than a functional programmer who maybe

00:16:17,769 --> 00:16:21,190
doesn't know what those things are Ruby

00:16:19,810 --> 00:16:23,170
programmer obviously a Ruby programmer

00:16:21,190 --> 00:16:24,279
is gonna know like if they knew some

00:16:23,170 --> 00:16:25,570
Ruby code at one company they're gonna

00:16:24,279 --> 00:16:27,250
know it at some other company there's a

00:16:25,570 --> 00:16:28,570
lot of intuition there what about

00:16:27,250 --> 00:16:30,040
someone with only a year of experience

00:16:28,570 --> 00:16:31,750
what about some with 20 years of

00:16:30,040 --> 00:16:34,180
experience right so you can start to

00:16:31,750 --> 00:16:35,769
pick apart of all the concepts that are

00:16:34,180 --> 00:16:37,529
in your code all the things someone

00:16:35,769 --> 00:16:40,060
needs to know to understand that code

00:16:37,529 --> 00:16:41,950
what does the person look like that

00:16:40,060 --> 00:16:44,529
could possibly understand all that code

00:16:41,950 --> 00:16:46,839
right it paints a picture of who can

00:16:44,529 --> 00:16:48,430
actually be on your team and when you're

00:16:46,839 --> 00:16:49,930
making changes to the code I think it's

00:16:48,430 --> 00:16:51,880
really interesting to think about not

00:16:49,930 --> 00:16:53,620
just how many if statements did I add

00:16:51,880 --> 00:16:56,020
and how many features of rails am i

00:16:53,620 --> 00:16:57,640
using but Who am I now making their

00:16:56,020 --> 00:16:59,350
lives difficult if they want to be on

00:16:57,640 --> 00:17:03,130
this team or whose life am I making easy

00:16:59,350 --> 00:17:04,390
if they want to be on this team so you

00:17:03,130 --> 00:17:06,929
could try this very easily as a thought

00:17:04,390 --> 00:17:08,890
experiment and I'll show you an example

00:17:06,929 --> 00:17:10,689
right look at the next change you're

00:17:08,890 --> 00:17:12,699
gonna make you can you can count how

00:17:10,689 --> 00:17:13,630
many new concepts are we adding and then

00:17:12,699 --> 00:17:15,100
you can tell yourself you can

00:17:13,630 --> 00:17:18,130
objectively notice everyone on the team

00:17:15,100 --> 00:17:20,230
understand these concepts and if not you

00:17:18,130 --> 00:17:22,120
can then kind of get some intuition how

00:17:20,230 --> 00:17:23,169
hard would it be for the rest of the

00:17:22,120 --> 00:17:25,329
team who doesn't understand these

00:17:23,169 --> 00:17:26,410
concepts so learn them and did we just

00:17:25,329 --> 00:17:27,760
decrease the number of people who could

00:17:26,410 --> 00:17:30,280
understand this code and you can start

00:17:27,760 --> 00:17:34,210
to get a cost to adding these concepts

00:17:30,280 --> 00:17:37,720
beyond their effect on complexity so

00:17:34,210 --> 00:17:40,000
let's add a tax calculation to our thing

00:17:37,720 --> 00:17:41,500
and I'm sorry for the simplicity of this

00:17:40,000 --> 00:17:43,800
anyone who's done sales tax knows it is

00:17:41,500 --> 00:17:46,750
not at all like this but nevertheless

00:17:43,800 --> 00:17:50,470
it's a good example so we have a default

00:17:46,750 --> 00:17:53,810
tax rate of a typo which is 45% and then

00:17:50,470 --> 00:17:55,700
DC has 10% California has 5% in Virginia

00:17:53,810 --> 00:17:57,590
three percent and they're gonna just add

00:17:55,700 --> 00:18:00,530
that into our total prices we cost sum

00:17:57,590 --> 00:18:03,020
everything up does everybody understand

00:18:00,530 --> 00:18:04,790
how all this works right constant we all

00:18:03,020 --> 00:18:06,140
probably know what a constant is hashed

00:18:04,790 --> 00:18:07,670
out new anybody everybody know what

00:18:06,140 --> 00:18:09,770
hashed out new does it doesn't just make

00:18:07,670 --> 00:18:12,110
a new hash it makes a new magical hash

00:18:09,770 --> 00:18:15,320
it returns a value that you give it when

00:18:12,110 --> 00:18:17,540
there's no key tap everybody know what

00:18:15,320 --> 00:18:20,210
tap does I'll tell you and it will not

00:18:17,540 --> 00:18:22,340
illuminate you at all tap you call it on

00:18:20,210 --> 00:18:23,890
an object and it yields that object to a

00:18:22,340 --> 00:18:27,350
block and that returns that object right

00:18:23,890 --> 00:18:29,270
make sense square brackets of course all

00:18:27,350 --> 00:18:30,170
right do you reference the hash okay so

00:18:29,270 --> 00:18:32,660
that's what you need to know to

00:18:30,170 --> 00:18:34,820
understand this what if instead we just

00:18:32,660 --> 00:18:36,380
made a method called the calculate tax

00:18:34,820 --> 00:18:38,090
and it's had like a bunch of if

00:18:36,380 --> 00:18:41,060
statements in it I mean that's nasty

00:18:38,090 --> 00:18:42,980
right like this but yet what did we do

00:18:41,060 --> 00:18:45,200
we only introduced equals equals who

00:18:42,980 --> 00:18:46,700
knows equals equals like everybody who

00:18:45,200 --> 00:18:48,290
has any level of programming experience

00:18:46,700 --> 00:18:50,690
probably knows what equals equals means

00:18:48,290 --> 00:18:52,610
I find this really interesting because

00:18:50,690 --> 00:18:54,470
that just looks so gross to me and yet I

00:18:52,610 --> 00:18:57,620
can't deny the fact that it might

00:18:54,470 --> 00:18:59,570
actually be better right and so we can

00:18:57,620 --> 00:19:01,250
rerun the metrics on our change code and

00:18:59,570 --> 00:19:04,340
we can see that our second diff that

00:19:01,250 --> 00:19:07,220
used all those if statements it made the

00:19:04,340 --> 00:19:09,970
the complexity measures worse but we

00:19:07,220 --> 00:19:13,610
introduced fewer concepts interesting

00:19:09,970 --> 00:19:15,680
okay so we should never use new concepts

00:19:13,610 --> 00:19:17,090
then right I mean I don't know right

00:19:15,680 --> 00:19:18,290
we've been told there's power we have

00:19:17,090 --> 00:19:19,730
these powerful programming languages all

00:19:18,290 --> 00:19:21,680
these sharp knives are we supposed to be

00:19:19,730 --> 00:19:23,870
using sharp knives isn't it okay we're

00:19:21,680 --> 00:19:25,190
not supposed to feel guilty like we have

00:19:23,870 --> 00:19:27,890
sharp knives entry says to use that

00:19:25,190 --> 00:19:29,750
stuff like what is it therefore I mean

00:19:27,890 --> 00:19:32,510
maybe right are they sharp are they

00:19:29,750 --> 00:19:34,520
shiny I mean I think when you look at

00:19:32,510 --> 00:19:37,010
features that I'm going to show you

00:19:34,520 --> 00:19:39,350
through the lens of what does it take to

00:19:37,010 --> 00:19:40,580
understand that I think it starts to

00:19:39,350 --> 00:19:42,380
give you a sense of like how many

00:19:40,580 --> 00:19:46,640
features are actually that powerful and

00:19:42,380 --> 00:19:48,950
how worth it is that power r-spec right

00:19:46,640 --> 00:19:50,630
so the way that this is sold to us as

00:19:48,950 --> 00:19:53,570
programmers is that it reads like

00:19:50,630 --> 00:19:55,220
English and it explains what it is it is

00:19:53,570 --> 00:19:57,710
expected to be isosceles and be

00:19:55,220 --> 00:19:58,730
equilateral cool right you can see the

00:19:57,710 --> 00:20:00,950
programmer intent but what actually

00:19:58,730 --> 00:20:03,050
happens here and how would you be

00:20:00,950 --> 00:20:04,750
figured that out like if you google be

00:20:03,050 --> 00:20:07,760
isosceles you're not gonna find anything

00:20:04,750 --> 00:20:10,610
you have to know how this works and the

00:20:07,760 --> 00:20:12,140
how this actually behaves is pretty

00:20:10,610 --> 00:20:14,780
complicated like it requires knowing a

00:20:12,140 --> 00:20:16,010
lot I had a hard time ensuring that this

00:20:14,780 --> 00:20:17,780
was still possible in r-spec because I

00:20:16,010 --> 00:20:19,780
don't know what this be isosceles I

00:20:17,780 --> 00:20:22,850
don't know what that's actually called

00:20:19,780 --> 00:20:24,470
so compared to this I mean this is

00:20:22,850 --> 00:20:26,510
testing the same thing this is doing the

00:20:24,470 --> 00:20:30,440
same thing but it requires knowing lots

00:20:26,510 --> 00:20:32,390
of less stuff so is all of this powerful

00:20:30,440 --> 00:20:34,280
tools this is sharp tool that we

00:20:32,390 --> 00:20:36,230
shouldn't feel ashamed of using or is

00:20:34,280 --> 00:20:37,370
this like creating a bunch of work for

00:20:36,230 --> 00:20:39,440
somebody to have to learn before they

00:20:37,370 --> 00:20:40,850
can actually do something I don't know

00:20:39,440 --> 00:20:44,570
right it's it's a cost and it's a

00:20:40,850 --> 00:20:46,460
trade-off okay what about this now

00:20:44,570 --> 00:20:48,320
you're probably saying oh my god you've

00:20:46,460 --> 00:20:50,990
repeated resources comments twice how

00:20:48,320 --> 00:20:54,290
could you possibly ever make such

00:20:50,990 --> 00:20:56,330
horribly duplicated code well if you're

00:20:54,290 --> 00:20:58,400
not familiar with rails 4 the problem

00:20:56,330 --> 00:21:03,710
has been solved with routing concerns so

00:20:58,400 --> 00:21:06,470
this this creates this okay so write

00:21:03,710 --> 00:21:09,410
this this is I mean kind of weird

00:21:06,470 --> 00:21:11,930
concepts it's actually more code I don't

00:21:09,410 --> 00:21:13,790
know like if this is actually solving

00:21:11,930 --> 00:21:16,460
something right this is again power

00:21:13,790 --> 00:21:18,440
sharp knife but is it really needed what

00:21:16,460 --> 00:21:20,660
if we really hated this duplication so

00:21:18,440 --> 00:21:22,340
much what would we do if we didn't know

00:21:20,660 --> 00:21:23,660
about routing concerns well we make a

00:21:22,340 --> 00:21:25,790
method most people know how to make a

00:21:23,660 --> 00:21:26,930
method right that's pretty gross if you

00:21:25,790 --> 00:21:28,610
saw a method being declared in your

00:21:26,930 --> 00:21:30,950
routes file you would probably say

00:21:28,610 --> 00:21:33,920
something yet it's hard to deny that

00:21:30,950 --> 00:21:38,060
more people could figure this out then

00:21:33,920 --> 00:21:39,920
who could figure this out so I don't

00:21:38,060 --> 00:21:42,320
want to you know again this is a way to

00:21:39,920 --> 00:21:43,910
look at abstractions to look at features

00:21:42,320 --> 00:21:46,070
to look at libraries look at all this

00:21:43,910 --> 00:21:48,490
power and try to figure out exactly how

00:21:46,070 --> 00:21:50,840
worth it it really is right because who

00:21:48,490 --> 00:21:53,420
is on your team actually matters a great

00:21:50,840 --> 00:21:55,100
deal if you use every feature of rails

00:21:53,420 --> 00:21:57,860
and you are left with something that no

00:21:55,100 --> 00:22:00,410
one your team can use that's a problem

00:21:57,860 --> 00:22:01,490
right maybe I mean there's a problem for

00:22:00,410 --> 00:22:04,400
everyone you have to do all the work

00:22:01,490 --> 00:22:07,730
they don't do any work work is slow that

00:22:04,400 --> 00:22:09,020
is not good right so the way to kind of

00:22:07,730 --> 00:22:10,670
start thinking about this is when you're

00:22:09,020 --> 00:22:12,350
adding a new concept to your code or

00:22:10,670 --> 00:22:14,600
bringing in some new feature of the

00:22:12,350 --> 00:22:17,000
language or the framework or adding some

00:22:14,600 --> 00:22:18,740
new library you're getting a benefit out

00:22:17,000 --> 00:22:20,600
of that hopefully hopefully you're

00:22:18,740 --> 00:22:21,350
getting a benefit out of that but that

00:22:20,600 --> 00:22:23,870
benefit has

00:22:21,350 --> 00:22:25,220
costs and that cost is either the cost

00:22:23,870 --> 00:22:27,590
to bring everybody along to learn

00:22:25,220 --> 00:22:29,590
whatever the thing is or the cost of

00:22:27,590 --> 00:22:31,610
leaving people behind and maybe

00:22:29,590 --> 00:22:33,620
preventing people from being effective

00:22:31,610 --> 00:22:35,150
at that code and I don't want to put any

00:22:33,620 --> 00:22:36,679
judgment on either of these like I think

00:22:35,150 --> 00:22:39,110
there's the I can think of scenarios in

00:22:36,679 --> 00:22:41,120
which both of these costs might might

00:22:39,110 --> 00:22:41,809
make sense but it is a cost right it's

00:22:41,120 --> 00:22:45,049
not zero

00:22:41,809 --> 00:22:47,360
neither of these is zero and so what I'm

00:22:45,049 --> 00:22:49,580
saying is you can use this lens of

00:22:47,360 --> 00:22:52,039
number of concepts at how hard are they

00:22:49,580 --> 00:22:54,650
to learn and how hard would they be to

00:22:52,039 --> 00:22:56,120
learn for my team as a way to start to

00:22:54,650 --> 00:22:57,710
think about how you can quantify these

00:22:56,120 --> 00:22:59,480
trade-offs and talk about should we

00:22:57,710 --> 00:23:03,289
write code this way should we add this

00:22:59,480 --> 00:23:05,480
library most of us remember the Twitter

00:23:03,289 --> 00:23:08,150
used to be written in rails and then

00:23:05,480 --> 00:23:09,380
they switched to Scala and if you know

00:23:08,150 --> 00:23:11,240
either if you know both of those

00:23:09,380 --> 00:23:13,460
languages you know that Scala is very

00:23:11,240 --> 00:23:16,190
very alien compared to Ruby and rails

00:23:13,460 --> 00:23:17,720
it's very very different it has lots and

00:23:16,190 --> 00:23:21,169
lots of concepts I think it might have

00:23:17,720 --> 00:23:24,020
all the concepts rails obviously doesn't

00:23:21,169 --> 00:23:26,030
have all of them yet so it's a big it's

00:23:24,020 --> 00:23:27,470
a big transition now if Netflix had done

00:23:26,030 --> 00:23:29,169
this they would have fired everyone and

00:23:27,470 --> 00:23:31,340
then hired a bunch of Scala developers

00:23:29,169 --> 00:23:33,350
but Twitter did not do that they created

00:23:31,340 --> 00:23:35,240
a thing called Scala school which is

00:23:33,350 --> 00:23:37,429
essentially this way that if you're a

00:23:35,240 --> 00:23:38,870
rails developer at Twitter and your job

00:23:37,429 --> 00:23:40,850
is you need to learn Scala well now you

00:23:38,870 --> 00:23:42,200
can they've created this is what you

00:23:40,850 --> 00:23:44,450
need to know to be effective they paid

00:23:42,200 --> 00:23:47,179
the price to bring everybody along so

00:23:44,450 --> 00:23:49,280
they decided that the power of Scala was

00:23:47,179 --> 00:23:52,090
worth it and they were willing to pay to

00:23:49,280 --> 00:23:56,299
bring everybody along to do that

00:23:52,090 --> 00:24:00,470
interesting okay so we've been talking a

00:23:56,299 --> 00:24:02,059
lot about code and code metrics but if

00:24:00,470 --> 00:24:04,880
you've done anything that is beyond just

00:24:02,059 --> 00:24:06,909
writing code there's a bunch of stuff

00:24:04,880 --> 00:24:09,830
that is actually really complicated

00:24:06,909 --> 00:24:12,200
other than the code right so here is my

00:24:09,830 --> 00:24:14,450
like just imagines architecture diagram

00:24:12,200 --> 00:24:16,370
right we have an app there's caches load

00:24:14,450 --> 00:24:17,299
balancers CDN servers like there's a

00:24:16,370 --> 00:24:19,100
bunch of stuff and it's pretty

00:24:17,299 --> 00:24:20,690
complicated and it can be very very

00:24:19,100 --> 00:24:23,750
complicated it can be very hard to learn

00:24:20,690 --> 00:24:25,490
and figure outs and when we run our code

00:24:23,750 --> 00:24:26,450
through robocop and code climate like

00:24:25,490 --> 00:24:28,850
we're really only getting information

00:24:26,450 --> 00:24:30,040
about about the the classes methods

00:24:28,850 --> 00:24:31,870
right the code that we're writing

00:24:30,040 --> 00:24:33,850
but this concept what I've been like

00:24:31,870 --> 00:24:36,580
harping on this whole time you can apply

00:24:33,850 --> 00:24:37,780
that to anything it is fractal because

00:24:36,580 --> 00:24:41,710
it doesn't necessarily require

00:24:37,780 --> 00:24:44,530
understanding the codes elements right

00:24:41,710 --> 00:24:46,450
so imagine that you need to diagnose a

00:24:44,530 --> 00:24:49,480
slow query and you have determined that

00:24:46,450 --> 00:24:51,520
this method is is where the slow query

00:24:49,480 --> 00:24:52,960
is coming from so what do you need to

00:24:51,520 --> 00:24:54,940
know to diagnose this problem well you

00:24:52,960 --> 00:24:57,460
got to know what all this is all these

00:24:54,940 --> 00:24:59,500
scopes and whatever you got to know what

00:24:57,460 --> 00:25:01,150
sequel it's gonna generate what that

00:24:59,500 --> 00:25:03,670
sequel means you got to know how that

00:25:01,150 --> 00:25:05,770
sequel gets applied to the database if

00:25:03,670 --> 00:25:08,590
you wrote your code differently in a

00:25:05,770 --> 00:25:10,480
more gross way that will that many will

00:25:08,590 --> 00:25:13,090
not like by just putting sequel directly

00:25:10,480 --> 00:25:13,960
in your rails code well how have we

00:25:13,090 --> 00:25:15,790
changed it right

00:25:13,960 --> 00:25:17,050
well now you still have to know the

00:25:15,790 --> 00:25:18,550
sequel the database stuff like you're

00:25:17,050 --> 00:25:20,260
not getting around that but now to

00:25:18,550 --> 00:25:22,330
understand the code part you just need

00:25:20,260 --> 00:25:23,650
to understand some standard library

00:25:22,330 --> 00:25:26,230
calls and how to dereference a

00:25:23,650 --> 00:25:28,300
two-dimensional array and guess how many

00:25:26,230 --> 00:25:31,780
people understand that versus understand

00:25:28,300 --> 00:25:33,790
this right more think about the the

00:25:31,780 --> 00:25:37,630
devops team or whatever you call them at

00:25:33,790 --> 00:25:39,040
your company they could certainly figure

00:25:37,630 --> 00:25:40,360
this out enough to go diagnose this

00:25:39,040 --> 00:25:41,800
problem and having problems that more

00:25:40,360 --> 00:25:43,360
people can diagnose seems better than

00:25:41,800 --> 00:25:45,610
problems that fewer people can diagnose

00:25:43,360 --> 00:25:48,400
right all because we put gross sequel in

00:25:45,610 --> 00:25:50,560
our code right monolith versus micro

00:25:48,400 --> 00:25:52,300
services is a is a root this is a really

00:25:50,560 --> 00:25:55,270
good lens to understand this dichotomy

00:25:52,300 --> 00:25:57,760
right if our monolith is small and does

00:25:55,270 --> 00:25:59,080
few things then lots and lots of people

00:25:57,760 --> 00:26:00,610
can work on it because it's pretty easy

00:25:59,080 --> 00:26:01,810
everything is there all the reasons that

00:26:00,610 --> 00:26:03,480
you've heard why you should write a

00:26:01,810 --> 00:26:05,110
monolith those all apply in this case

00:26:03,480 --> 00:26:06,550
microservices requires some more

00:26:05,110 --> 00:26:08,110
complexities more stuff going on you got

00:26:06,550 --> 00:26:10,240
to know more it's harder to understand

00:26:08,110 --> 00:26:12,580
the whole system there's a lot there but

00:26:10,240 --> 00:26:14,350
when your monolith gets ginormous and

00:26:12,580 --> 00:26:16,660
huge and has lots and lots of stuff in

00:26:14,350 --> 00:26:19,600
it the skills required to work in it

00:26:16,660 --> 00:26:20,860
change you can't just write simple code

00:26:19,600 --> 00:26:21,730
anymore you have to understand how

00:26:20,860 --> 00:26:24,040
that's going to interact with

00:26:21,730 --> 00:26:25,540
potentially complicated thousands and

00:26:24,040 --> 00:26:26,650
thousands of lines of code you have to

00:26:25,540 --> 00:26:28,150
know about modularity and how to

00:26:26,650 --> 00:26:29,590
separate concerns and all these things

00:26:28,150 --> 00:26:31,180
to keep the model that's something that

00:26:29,590 --> 00:26:32,440
you can be effective in that's a

00:26:31,180 --> 00:26:34,420
different skill than working in a tiny

00:26:32,440 --> 00:26:36,070
one and when you think about that and

00:26:34,420 --> 00:26:38,470
you compare that to micro-services maybe

00:26:36,070 --> 00:26:42,340
it's a little bit different maybe the

00:26:38,470 --> 00:26:43,870
trade-off is not so obvious there the

00:26:42,340 --> 00:26:46,960
last example is

00:26:43,870 --> 00:26:49,750
setting up a Postgres database right

00:26:46,960 --> 00:26:51,520
anybody can do that but this is the most

00:26:49,750 --> 00:26:54,670
expensive way to run Postgres absolutely

00:26:51,520 --> 00:26:56,830
but anybody can do this now you might

00:26:54,670 --> 00:26:59,920
say oh just one RDS it's so much simpler

00:26:56,830 --> 00:27:01,180
I mean not no it's not it's cheaper but

00:26:59,920 --> 00:27:02,410
you sort of know a bunch of stuff you

00:27:01,180 --> 00:27:03,760
know that scrollbar probably should be

00:27:02,410 --> 00:27:06,700
bigger there's a lot of stuff you got to

00:27:03,760 --> 00:27:08,140
notice to run RDS on on AWS oh but you

00:27:06,700 --> 00:27:09,400
could just run around the ec2 box right

00:27:08,140 --> 00:27:13,390
here's all the instructions to set it up

00:27:09,400 --> 00:27:15,070
on ec2 all right no no problem so

00:27:13,390 --> 00:27:16,750
there's a trade-off here well in the

00:27:15,070 --> 00:27:18,490
Heroku case you're paying a lot of money

00:27:16,750 --> 00:27:20,770
to let anybody manage your database and

00:27:18,490 --> 00:27:22,960
in the ec2 case you're paying less money

00:27:20,770 --> 00:27:24,970
to have one person be able to understand

00:27:22,960 --> 00:27:26,080
that I don't know I can't tell you which

00:27:24,970 --> 00:27:29,040
one of those is right but like that's

00:27:26,080 --> 00:27:32,380
the way to think about this trade-off

00:27:29,040 --> 00:27:33,640
okay so you've got metrics now I don't

00:27:32,380 --> 00:27:35,170
think they're bad they're not they're

00:27:33,640 --> 00:27:37,870
not terrible they're fine but this is

00:27:35,170 --> 00:27:39,160
another one to think about right think

00:27:37,870 --> 00:27:41,500
about what do you have to know to work

00:27:39,160 --> 00:27:43,000
on the system and as you change the

00:27:41,500 --> 00:27:44,200
system how are you changing what you

00:27:43,000 --> 00:27:46,150
need to know and who is being left

00:27:44,200 --> 00:27:49,570
behind and are you committed to bringing

00:27:46,150 --> 00:27:50,860
them along and maybe you can't maybe

00:27:49,570 --> 00:27:52,300
you're in a situation where you can't

00:27:50,860 --> 00:27:55,240
afford to bring people you can't make

00:27:52,300 --> 00:27:57,190
Scala School happen well what you can do

00:27:55,240 --> 00:27:58,500
is you can write your code and design

00:27:57,190 --> 00:28:01,540
your systems in a different way that

00:27:58,500 --> 00:28:04,140
doesn't leave people behind if if that's

00:28:01,540 --> 00:28:07,260
the trade-off that you want to make so

00:28:04,140 --> 00:28:11,650
that is what I have if you want to hear

00:28:07,260 --> 00:28:13,210
some day read more about things that are

00:28:11,650 --> 00:28:15,160
not sort of with the common wisdom I

00:28:13,210 --> 00:28:18,910
have this new thing I'm working on

00:28:15,160 --> 00:28:21,400
so click on that and sign up I also

00:28:18,910 --> 00:28:23,290
totally spent 40 minutes doing this talk

00:28:21,400 --> 00:28:25,530
when I was practicing I have not done it

00:28:23,290 --> 00:28:28,810
in 30 so we have some time for questions

00:28:25,530 --> 00:28:30,190
if anybody has them are there any tools

00:28:28,810 --> 00:28:32,680
that count the number of concepts now

00:28:30,190 --> 00:28:34,060
that I'm not that I'm aware of but I bet

00:28:32,680 --> 00:28:37,930
you you could get hired by code climate

00:28:34,060 --> 00:28:39,700
if you came up with one yeah this is a

00:28:37,930 --> 00:28:40,960
good one the question is like we came to

00:28:39,700 --> 00:28:42,160
Roo because it's this expressive

00:28:40,960 --> 00:28:44,290
wonderful language with all these cool

00:28:42,160 --> 00:28:45,340
features that that feel good and it

00:28:44,290 --> 00:28:47,110
feels good to do it and how do you

00:28:45,340 --> 00:28:48,700
balance that with you know me telling

00:28:47,110 --> 00:28:51,490
you that there's a legit use for a for

00:28:48,700 --> 00:28:53,650
loop it's interesting right I mean I I

00:28:51,490 --> 00:28:54,940
think it I think that's a I think it's

00:28:53,650 --> 00:28:56,560
another piece of the puzzle right like

00:28:54,940 --> 00:28:57,549
if there are people on your team who

00:28:56,560 --> 00:28:59,950
like the

00:28:57,549 --> 00:29:01,629
as a motivator for them then to tell

00:28:59,950 --> 00:29:02,649
them to stop using that stuff and only

00:29:01,629 --> 00:29:03,999
use for loops they're gonna be very

00:29:02,649 --> 00:29:05,379
upset about that and I think that's a

00:29:03,999 --> 00:29:07,360
think that matters so again it kind of

00:29:05,379 --> 00:29:09,340
gets back to the people on the team and

00:29:07,360 --> 00:29:10,960
what is the plan for the people on that

00:29:09,340 --> 00:29:13,299
team I don't know it's a little

00:29:10,960 --> 00:29:15,850
wishy-washy answer I guess but question

00:29:13,299 --> 00:29:17,409
is what do I mean by interesting when my

00:29:15,850 --> 00:29:19,899
mother tells me that my haircut is

00:29:17,409 --> 00:29:22,330
interesting I know exactly what that

00:29:19,899 --> 00:29:23,889
means right it doesn't mean good it

00:29:22,330 --> 00:29:26,080
means she's being very polite

00:29:23,889 --> 00:29:27,999
so I don't mean that I mean that it

00:29:26,080 --> 00:29:29,169
gives me this new way of thinking about

00:29:27,999 --> 00:29:32,499
something that I thought I understood

00:29:29,169 --> 00:29:33,970
like I thought I understood hey this is

00:29:32,499 --> 00:29:35,649
good code this is how we know good code

00:29:33,970 --> 00:29:37,119
that is solved we've closed that case

00:29:35,649 --> 00:29:39,070
and when I when I had this experience

00:29:37,119 --> 00:29:40,929
that I related with Justin it made me

00:29:39,070 --> 00:29:43,359
really what do I actually thinking like

00:29:40,929 --> 00:29:45,340
it's hard to deny some of some of what

00:29:43,359 --> 00:29:46,299
is in here as being like valuable it so

00:29:45,340 --> 00:29:48,039
that's why I thought it was interesting

00:29:46,299 --> 00:29:49,029
like it just gave me personally this

00:29:48,039 --> 00:29:51,879
whole new take on something that I

00:29:49,029 --> 00:29:54,429
thought thought I had kind of figured

00:29:51,879 --> 00:29:57,309
out maybe it's not as interesting to

00:29:54,429 --> 00:30:00,669
everyone it's just to me I'm advocating

00:29:57,309 --> 00:30:03,159
that we all code in VB I guess what I'm

00:30:00,669 --> 00:30:05,769
saying is if we did code if we did do

00:30:03,159 --> 00:30:09,129
that there is some value there now there

00:30:05,769 --> 00:30:10,239
is some there's two to his point and to

00:30:09,129 --> 00:30:11,889
the point about abstractions in power

00:30:10,239 --> 00:30:13,480
there's some loss you're paying for that

00:30:11,889 --> 00:30:15,249
but you're actually getting something

00:30:13,480 --> 00:30:18,429
it's not all bad it actually could be

00:30:15,249 --> 00:30:19,779
good and I think we I think the way to

00:30:18,429 --> 00:30:22,059
know how good it is is to think about

00:30:19,779 --> 00:30:24,309
Who am I trying to get on my team if I'm

00:30:22,059 --> 00:30:26,109
gonna hire 20 people out of boot camp I

00:30:24,309 --> 00:30:28,480
probably need to write the simplest

00:30:26,109 --> 00:30:29,529
easiest to understand code so that those

00:30:28,480 --> 00:30:31,840
people can be effective as soon as

00:30:29,529 --> 00:30:33,549
possible or maybe I want to write the

00:30:31,840 --> 00:30:35,559
craziest meta programming code ever but

00:30:33,549 --> 00:30:37,049
I'm gonna get them up to speed so I

00:30:35,559 --> 00:30:39,460
think it's just part of the calculus

00:30:37,049 --> 00:30:41,200
that's okay so the question is as a

00:30:39,460 --> 00:30:42,519
newcomer do you challenge people on that

00:30:41,200 --> 00:30:44,289
I mean you got to figure out what the

00:30:42,519 --> 00:30:46,779
vibe is to see what's figure out what

00:30:44,289 --> 00:30:49,299
the what the norms are what is okay I

00:30:46,779 --> 00:30:50,799
did I do think so the reasons why I had

00:30:49,299 --> 00:30:53,559
been blind to this concept was because

00:30:50,799 --> 00:30:54,759
in the past hey why are you using all

00:30:53,559 --> 00:30:55,960
that stuff the question would come from

00:30:54,759 --> 00:30:57,340
someone with less experience so the

00:30:55,960 --> 00:30:59,679
answer is oh well you don't have enough

00:30:57,340 --> 00:31:00,879
experience let me educate you and when

00:30:59,679 --> 00:31:02,320
the questions came from someone with a

00:31:00,879 --> 00:31:04,809
lot of experience I was like wait a

00:31:02,320 --> 00:31:07,029
minute maybe maybe I'm wrong here oops

00:31:04,809 --> 00:31:09,070
so I don't know the good answer to that

00:31:07,029 --> 00:31:10,659
but I think I think it should always be

00:31:09,070 --> 00:31:10,909
okay to ask what's going on here what is

00:31:10,659 --> 00:31:13,849
all the

00:31:10,909 --> 00:31:15,109
stuff and then maybe if you build some

00:31:13,849 --> 00:31:16,519
trust maybe you can start to ask hey

00:31:15,109 --> 00:31:18,950
what if we did it simpler what if we did

00:31:16,519 --> 00:31:20,269
it a different way but that kind of

00:31:18,950 --> 00:31:23,059
totally depends on who you're dealing

00:31:20,269 --> 00:31:24,409
with questions but how how do you

00:31:23,059 --> 00:31:27,799
measure how fast is for someone to come

00:31:24,409 --> 00:31:29,570
on to your codebase I haven't like a

00:31:27,799 --> 00:31:32,149
technique that I used before was to just

00:31:29,570 --> 00:31:34,450
try to give the person very simple tasks

00:31:32,149 --> 00:31:38,059
and gradually increase the complexity

00:31:34,450 --> 00:31:39,349
not super scientific yeah I don't know I

00:31:38,059 --> 00:31:40,700
think that's interesting because that is

00:31:39,349 --> 00:31:41,840
part of this right if if you hire

00:31:40,700 --> 00:31:44,059
someone to take some six months before

00:31:41,840 --> 00:31:45,440
they're effective that that's a problem

00:31:44,059 --> 00:31:47,869
or that's something you should know when

00:31:45,440 --> 00:31:49,039
you're hiring someone I don't know I

00:31:47,869 --> 00:31:51,859
think that's kind of gets to it but

00:31:49,039 --> 00:31:54,559
haven't so the question is is this is

00:31:51,859 --> 00:31:55,879
this introducing more more bugs into our

00:31:54,559 --> 00:31:57,859
code or potential for that so that's

00:31:55,879 --> 00:32:00,499
that's also an interesting take because

00:31:57,859 --> 00:32:02,509
it's a common trope and probably common

00:32:00,499 --> 00:32:04,970
knowledge that the average number of

00:32:02,509 --> 00:32:07,639
bugs per line of code is the same right

00:32:04,970 --> 00:32:08,840
like it's so therefore write the Perl

00:32:07,639 --> 00:32:10,009
program is of the world are gonna say

00:32:08,840 --> 00:32:13,729
write fewer lines of code then you'll

00:32:10,009 --> 00:32:15,169
have fewer bugs I don't know it is kind

00:32:13,729 --> 00:32:17,149
of true so it is hard for me to like

00:32:15,169 --> 00:32:18,200
look at this huge nasty if statement and

00:32:17,149 --> 00:32:21,139
say what was a lot of opportunities for

00:32:18,200 --> 00:32:23,119
bugs maybe we shouldn't do that so I I

00:32:21,139 --> 00:32:25,099
don't know I mean I think that that is

00:32:23,119 --> 00:32:26,570
possible and again it's the trade off

00:32:25,099 --> 00:32:30,710
like we want to do this super functional

00:32:26,570 --> 00:32:31,999
super lazy haskell madness then you got

00:32:30,710 --> 00:32:33,529
to let you got to train people to do it

00:32:31,999 --> 00:32:34,489
if you want to do or you got to accept

00:32:33,529 --> 00:32:36,139
that you're not going to hire a bunch of

00:32:34,489 --> 00:32:38,509
people because they don't know it I

00:32:36,139 --> 00:32:39,559
don't know again I'm punting to the same

00:32:38,509 --> 00:32:42,440
trip over and over again but I think

00:32:39,559 --> 00:32:44,720
it's I think it makes sense so what's

00:32:42,440 --> 00:32:46,820
the difference between like the cost to

00:32:44,720 --> 00:32:49,849
understand the code and the cost of like

00:32:46,820 --> 00:32:51,320
running the code yeah I mean if the code

00:32:49,849 --> 00:32:52,729
is not performing to the to the

00:32:51,320 --> 00:32:54,080
specifications that it needs to then it

00:32:52,729 --> 00:32:55,639
has to are the code the code like its

00:32:54,080 --> 00:32:58,999
purpose is to run and solve some problem

00:32:55,639 --> 00:33:00,889
so obviously I definitely subscribe to

00:32:58,999 --> 00:33:02,570
the school of like make it readable

00:33:00,889 --> 00:33:04,700
whatever your definition of readable is

00:33:02,570 --> 00:33:06,830
and then if it performs poorly or

00:33:04,700 --> 00:33:09,139
observe that as a fact and fix the

00:33:06,830 --> 00:33:10,820
specific problem don't don't write it to

00:33:09,139 --> 00:33:12,830
perform well like at the get-go because

00:33:10,820 --> 00:33:14,989
that's there's no reason to do that

00:33:12,830 --> 00:33:16,399
that's just adding complexity but yeah I

00:33:14,989 --> 00:33:18,379
mean I think it's totally legit to say

00:33:16,399 --> 00:33:19,849
this code is super gnarly because it

00:33:18,379 --> 00:33:21,559
actually has to run fast for all of

00:33:19,849 --> 00:33:22,970
these reasons and I'm sorry I can't make

00:33:21,559 --> 00:33:24,710
it more clear but this is the way it is

00:33:22,970 --> 00:33:26,149
because yes the code has

00:33:24,710 --> 00:33:29,059
execute that if it's not running it's

00:33:26,149 --> 00:33:34,340
kind of pointless what does my t-shirt

00:33:29,059 --> 00:33:36,529
say it is it is the four keys on the

00:33:34,340 --> 00:33:38,659
keyboard that was used to develop VI so

00:33:36,529 --> 00:33:45,200
it says hjkl and has the arrow keys

00:33:38,659 --> 00:33:47,590
because because VI is the best thank you

00:33:45,200 --> 00:33:59,680
[Applause]

00:33:47,590 --> 00:33:59,680

YouTube URL: https://www.youtube.com/watch?v=unpJ9qRjdMw


