Title: RubyConf 2019 - Source-Diving for Fun and Profit by Kevin Kuchta
Publication date: 2019-12-03
Playlist: RubyConf 2019
Description: 
	RubyConf 2019 - Source-Diving for Fun and Profit by Kevin Kuchta

Ever spent hours pouring over a gem's documentation trying to figure out how to make it work? Dug through dozens of blog posts trying to understand why a library's not working? Well what if I promised you an end to all that?!


Well, ok, I'd be lying. But maybe I can save you some hair-pulling some of the time! Let me introduce you to the joys of Reading the Code. Maybe it seems obvious to you, but one of the biggest leaps I made as a ruby dev was really getting comfortable jumping into a gem's source as a debugging technique.



In an effort to get you over that hump earlier than I did, let's talk tips and tricks for getting in and out of a library's codebase as efficiently as possible. It won't solve every problem, but sometimes 5 minutes on GitHub will save you hours on StackOverflow.

#rubyconf2019 #confreaks
Captions: 
	00:00:02,210 --> 00:00:07,289
[Music]

00:00:13,299 --> 00:00:18,580
hi everyone my name is kevin Gupta and

00:00:16,240 --> 00:00:20,710
the other day I was writing some code

00:00:18,580 --> 00:00:23,320
and if you've never seen me write code

00:00:20,710 --> 00:00:26,650
this is what it looks like or well okay

00:00:23,320 --> 00:00:28,869
this and something happened to me that

00:00:26,650 --> 00:00:31,449
happens entirely too often which is that

00:00:28,869 --> 00:00:32,469
I found a bug and when I read bugs they

00:00:31,449 --> 00:00:34,690
look sort of like this

00:00:32,469 --> 00:00:36,340
they have long years and waistcoats but

00:00:34,690 --> 00:00:38,470
more importantly this was a bug that I

00:00:36,340 --> 00:00:41,020
wasn't quite sure what was happening

00:00:38,470 --> 00:00:44,770
where was coming from and so as you do I

00:00:41,020 --> 00:00:46,570
started chasing this bug down and you

00:00:44,770 --> 00:00:48,579
know I chased it I chased it through the

00:00:46,570 --> 00:00:51,100
fields I drifted across a river and I

00:00:48,579 --> 00:00:53,710
chased it into the stack trace and in

00:00:51,100 --> 00:00:55,140
this stack trace I lost it

00:00:53,710 --> 00:00:57,520
it disappeared down a rabbit hole and

00:00:55,140 --> 00:00:59,829
you might actually recognize the shape

00:00:57,520 --> 00:01:01,960
of this rabbit hole here it is does this

00:00:59,829 --> 00:01:03,610
look familiar its notice how the lines

00:01:01,960 --> 00:01:05,259
right around here suddenly go from much

00:01:03,610 --> 00:01:07,780
shorter to much longer because this

00:01:05,259 --> 00:01:10,630
rabbit hole is where the bug disappeared

00:01:07,780 --> 00:01:15,249
from my code into third party gem code

00:01:10,630 --> 00:01:16,359
and so like Alice I walked up to the

00:01:15,249 --> 00:01:19,659
edge of this rabbit hole and sort of

00:01:16,359 --> 00:01:21,249
looked around I you know tried to get

00:01:19,659 --> 00:01:22,779
any context I could on what this where

00:01:21,249 --> 00:01:24,159
this bug had disappeared and why and how

00:01:22,779 --> 00:01:26,590
deep this rabbit hole went and whether I

00:01:24,159 --> 00:01:28,959
should pursue it and so like Alice I

00:01:26,590 --> 00:01:30,159
built up my courage and promptly gave up

00:01:28,959 --> 00:01:31,869
and spent the rest of the day staring

00:01:30,159 --> 00:01:35,529
the clouds thank you for coming up to my

00:01:31,869 --> 00:01:37,869
talk at the end ok so obviously I didn't

00:01:35,529 --> 00:01:39,399
actually do that this is a story that

00:01:37,869 --> 00:01:41,889
has played out a lot of times in my

00:01:39,399 --> 00:01:43,569
career maybe yours too where your

00:01:41,889 --> 00:01:45,159
tracing the bug and you find that it

00:01:43,569 --> 00:01:47,439
disappears into a gem and you can't

00:01:45,159 --> 00:01:50,259
debug it any further and for the first

00:01:47,439 --> 00:01:52,179
few years of my career I sort of I gave

00:01:50,259 --> 00:01:53,889
up I turned back I don't have time to go

00:01:52,179 --> 00:01:54,189
down a metaphorical or literal rabbit

00:01:53,889 --> 00:01:56,919
hole

00:01:54,189 --> 00:01:58,509
but I still have to fix the bug and so I

00:01:56,919 --> 00:02:00,520
tried everything I could do I could

00:01:58,509 --> 00:02:03,219
think of short of going down that rabbit

00:02:00,520 --> 00:02:04,869
hole to debug it I read that reread the

00:02:03,219 --> 00:02:07,149
documentation for the gym that was

00:02:04,869 --> 00:02:09,340
giving me trouble I went to the github

00:02:07,149 --> 00:02:11,830
issues page to see if anything

00:02:09,340 --> 00:02:13,060
was like related to my problem I googled

00:02:11,830 --> 00:02:15,130
everything I could think of related to

00:02:13,060 --> 00:02:16,480
it I went on Stack Overflow asked a

00:02:15,130 --> 00:02:18,280
question and waited for it to inevitably

00:02:16,480 --> 00:02:20,620
be closed as a duplicate of an unrelated

00:02:18,280 --> 00:02:22,239
question I'm when I give up when that

00:02:20,620 --> 00:02:25,090
didn't work I tried to staring at the

00:02:22,239 --> 00:02:26,560
code really hard and when that didn't

00:02:25,090 --> 00:02:28,090
work I fell back to everyone's favorite

00:02:26,560 --> 00:02:30,130
tried and treat a bugging technique

00:02:28,090 --> 00:02:31,840
rerunning the code repeatedly without

00:02:30,130 --> 00:02:34,420
changing anything to see if I got a

00:02:31,840 --> 00:02:35,980
different results and I don't mind

00:02:34,420 --> 00:02:37,330
telling you the fact that this has

00:02:35,980 --> 00:02:39,610
actually worked a couple times in my

00:02:37,330 --> 00:02:42,280
career haunts me to this day but it

00:02:39,610 --> 00:02:43,900
usually fails and so then I fall back to

00:02:42,280 --> 00:02:45,780
everyone's debugging technique of last

00:02:43,900 --> 00:02:47,920
resort screaming into the void and that

00:02:45,780 --> 00:02:49,870
was usually sort of the end of my

00:02:47,920 --> 00:02:52,930
process for the first few years of my

00:02:49,870 --> 00:02:54,640
career until one day in a fit of anger I

00:02:52,930 --> 00:02:56,739
said you know what it I'm just

00:02:54,640 --> 00:02:58,060
gonna go and github find the gem that's

00:02:56,739 --> 00:03:01,720
giving me trouble clone the repository

00:02:58,060 --> 00:03:03,310
and take a look and I don't I don't know

00:03:01,720 --> 00:03:05,590
exactly what I expected I think I

00:03:03,310 --> 00:03:07,690
expected this to be sort of impenetrable

00:03:05,590 --> 00:03:10,540
code written by godlike programmers that

00:03:07,690 --> 00:03:12,250
I could never hope to comprehend but lo

00:03:10,540 --> 00:03:13,780
and behold I opened up this gem that was

00:03:12,250 --> 00:03:16,030
giving me trouble and it turned out it

00:03:13,780 --> 00:03:18,670
was just more Ruby code like the code

00:03:16,030 --> 00:03:20,320
that I had written it was you know maybe

00:03:18,670 --> 00:03:21,850
a little foreign it had some new idioms

00:03:20,320 --> 00:03:22,900
some new patterns and of course it was a

00:03:21,850 --> 00:03:25,750
bunch of code that I'd never seen before

00:03:22,900 --> 00:03:27,700
but I was able to read it and I could

00:03:25,750 --> 00:03:30,579
explore this gem and figure out what was

00:03:27,700 --> 00:03:31,720
causing my problem now I'll admit the

00:03:30,579 --> 00:03:33,250
first time that this happened I think

00:03:31,720 --> 00:03:36,819
the problem was just that I spelled some

00:03:33,250 --> 00:03:39,609
input wrong so that wasn't a great use

00:03:36,819 --> 00:03:40,930
case but other times I've been I've dove

00:03:39,609 --> 00:03:42,459
into of jam that was giving me trouble

00:03:40,930 --> 00:03:43,840
and found out that maybe the

00:03:42,459 --> 00:03:45,819
documentation for the gem was flat-out

00:03:43,840 --> 00:03:47,470
wrong it said it didn't one thing or

00:03:45,819 --> 00:03:49,989
behaving one way but actually behaved a

00:03:47,470 --> 00:03:51,790
different way one other time there was a

00:03:49,989 --> 00:03:53,739
gem that had a function I needed that

00:03:51,790 --> 00:03:55,299
solves my problem but that function

00:03:53,739 --> 00:03:57,310
wasn't documented anywhere I was only

00:03:55,299 --> 00:04:00,010
able to find it by digging into the code

00:03:57,310 --> 00:04:01,900
of that gem another time the gem was

00:04:00,010 --> 00:04:03,910
taking some input and had some unstated

00:04:01,900 --> 00:04:05,799
assumptions on what that input was and

00:04:03,910 --> 00:04:07,750
how it was shaped and I only knew this

00:04:05,799 --> 00:04:11,109
because I had go into the code of the

00:04:07,750 --> 00:04:12,430
gem itself my point is that diving into

00:04:11,109 --> 00:04:14,560
the source code of a gem that's giving

00:04:12,430 --> 00:04:17,349
you trouble is an invaluable skill and

00:04:14,560 --> 00:04:19,450
to that end this talk is entitled source

00:04:17,349 --> 00:04:20,530
diving for fun and profit my name is

00:04:19,450 --> 00:04:22,350
chemin cooked I'm a software engineer

00:04:20,530 --> 00:04:23,400
out of San Francisco

00:04:22,350 --> 00:04:25,020
and I really feel like one of the

00:04:23,400 --> 00:04:29,070
biggest leaps I made as a growing

00:04:25,020 --> 00:04:30,570
engineer was realizing that I could just

00:04:29,070 --> 00:04:32,220
dive into the code of an external jab

00:04:30,570 --> 00:04:35,460
getting over that hump getting over that

00:04:32,220 --> 00:04:36,930
fear and you know I sort of I knew at

00:04:35,460 --> 00:04:38,610
one level at some level that it was a

00:04:36,930 --> 00:04:40,170
thing I could do but I hadn't really in

00:04:38,610 --> 00:04:42,000
turn eyes dit and started doing it

00:04:40,170 --> 00:04:43,290
regularly and once I did I feel like I

00:04:42,000 --> 00:04:45,360
need leveled up noticeably at an

00:04:43,290 --> 00:04:47,100
engineer and the goal of this talk is to

00:04:45,360 --> 00:04:50,220
help some of you and get over that same

00:04:47,100 --> 00:04:52,080
hump or if you're already over it to try

00:04:50,220 --> 00:04:53,610
to give you some better techniques for

00:04:52,080 --> 00:04:56,370
exploring a gem that's giving you

00:04:53,610 --> 00:04:57,810
trouble because I don't know about you

00:04:56,370 --> 00:05:00,150
but the first time that I did this I

00:04:57,810 --> 00:05:00,900
just opened up a gem and started reading

00:05:00,150 --> 00:05:03,720
through it like it was a book

00:05:00,900 --> 00:05:05,160
cover-to-cover file-by-file now I have a

00:05:03,720 --> 00:05:07,230
slightly more structured process

00:05:05,160 --> 00:05:08,760
admittedly my process isn't that

00:05:07,230 --> 00:05:10,710
structured but to give you the false

00:05:08,760 --> 00:05:12,570
impression that it is I give you the

00:05:10,710 --> 00:05:13,830
Kevin cooked a three-issue step process

00:05:12,570 --> 00:05:16,590
that for source code diving

00:05:13,830 --> 00:05:18,750
patent-pending and the steps in this

00:05:16,590 --> 00:05:19,860
process the first one I decided to call

00:05:18,750 --> 00:05:22,890
take me to your leader

00:05:19,860 --> 00:05:24,920
so you've just downloaded some gem that

00:05:22,890 --> 00:05:28,170
you need to explore to fix some bug and

00:05:24,920 --> 00:05:31,170
the first step in my mind is there grab

00:05:28,170 --> 00:05:33,060
the shape of this gem and by doing that

00:05:31,170 --> 00:05:34,710
it's to do that find the biggest or at

00:05:33,060 --> 00:05:36,990
least the most important files the one

00:05:34,710 --> 00:05:38,640
with all the logic because a lot of gems

00:05:36,990 --> 00:05:40,860
they'll have 30 or 40 different files

00:05:38,640 --> 00:05:42,330
but only two or three actually contain

00:05:40,860 --> 00:05:45,150
the heart of the gem what it does the

00:05:42,330 --> 00:05:47,310
most important logic for and a good way

00:05:45,150 --> 00:05:49,740
to find this important logic is to start

00:05:47,310 --> 00:05:52,050
at the top you've just downloaded say

00:05:49,740 --> 00:05:53,370
the sidekick Jam in this example you

00:05:52,050 --> 00:05:56,160
open up the Lib directory where all the

00:05:53,370 --> 00:05:58,050
source code is and there's a file named

00:05:56,160 --> 00:06:00,690
after the jam this is the entry point of

00:05:58,050 --> 00:06:03,060
the gem the first code that gets run and

00:06:00,690 --> 00:06:04,800
we open that up and lo and behold our

00:06:03,060 --> 00:06:06,630
first try we found a file that has a

00:06:04,800 --> 00:06:08,220
pretty good file of logic this was a few

00:06:06,630 --> 00:06:09,780
hundred line file has lots of methods

00:06:08,220 --> 00:06:12,810
those methods have actual code in them

00:06:09,780 --> 00:06:14,190
by contrast here's the Kin Kin gem or

00:06:12,810 --> 00:06:16,680
the camp can-can gem which is a

00:06:14,190 --> 00:06:19,740
community fork of the can-can gem anyway

00:06:16,680 --> 00:06:21,840
there's a file in it called Kin Kin Kin

00:06:19,740 --> 00:06:24,090
dot RB that's the entry point I open it

00:06:21,840 --> 00:06:25,680
up and find a whole lot of nothing this

00:06:24,090 --> 00:06:27,720
is the entire file all it does is

00:06:25,680 --> 00:06:30,360
declare a module name can can can and

00:06:27,720 --> 00:06:31,770
then require another file can can okay

00:06:30,360 --> 00:06:33,030
let's trace this one step further and

00:06:31,770 --> 00:06:34,710
open up the Kin Kin file

00:06:33,030 --> 00:06:35,720
turns out there's also a whole lot of

00:06:34,710 --> 00:06:38,660
nothing in there

00:06:35,720 --> 00:06:41,030
just a bunch of require statements and

00:06:38,660 --> 00:06:42,200
now I could go through all these require

00:06:41,030 --> 00:06:44,060
statements look at each of these files

00:06:42,200 --> 00:06:46,460
and see which of them have actual meat

00:06:44,060 --> 00:06:48,350
on their bones but one thing you should

00:06:46,460 --> 00:06:51,380
know about me is that I am extremely

00:06:48,350 --> 00:06:52,520
lazy and I don't have time for that if

00:06:51,380 --> 00:06:54,290
only there was a way to sort of

00:06:52,520 --> 00:06:56,060
prioritize these files in the figure out

00:06:54,290 --> 00:06:58,670
which ones to look at first

00:06:56,060 --> 00:07:00,260
well a relatively dumb but surprisingly

00:06:58,670 --> 00:07:03,080
powerful technique if just look for the

00:07:00,260 --> 00:07:04,970
biggest files and there's an easy ways

00:07:03,080 --> 00:07:06,980
to do that on any UNIX based system like

00:07:04,970 --> 00:07:09,740
Linux or Mac there's a nice bash

00:07:06,980 --> 00:07:11,120
one-liner and it is I have no idea I

00:07:09,740 --> 00:07:13,130
have to do this once every three have

00:07:11,120 --> 00:07:15,020
six months and I always forget it just

00:07:13,130 --> 00:07:16,580
google it but if you're watching this

00:07:15,020 --> 00:07:18,110
talk after the fact that you did google

00:07:16,580 --> 00:07:19,580
it to arrive at this talk here's an

00:07:18,110 --> 00:07:22,160
actual answer I'll save you the trouble

00:07:19,580 --> 00:07:23,330
of googling it the slides for this talk

00:07:22,160 --> 00:07:25,520
will be available so you don't have to

00:07:23,330 --> 00:07:29,060
memorize this this command all it does

00:07:25,520 --> 00:07:32,270
is it searches a directory finds all the

00:07:29,060 --> 00:07:35,480
files or sorts them by line number and

00:07:32,270 --> 00:07:37,700
then gives you the top ten and so here

00:07:35,480 --> 00:07:39,680
the top ten files by size and I can just

00:07:37,700 --> 00:07:41,780
start working my way down this to

00:07:39,680 --> 00:07:43,520
explore the Kin Kin Kin gem I look at

00:07:41,780 --> 00:07:46,040
the first one controller editions dot RB

00:07:43,520 --> 00:07:48,290
and it turns out that file has not a

00:07:46,040 --> 00:07:50,630
whole lot in it it's huge but it's 95%

00:07:48,290 --> 00:07:52,340
comments same thing with the next one

00:07:50,630 --> 00:07:54,080
I sort of worked my way down and I find

00:07:52,340 --> 00:07:56,180
that the fourth and fifth biggest files

00:07:54,080 --> 00:07:59,000
which were a control resource dot RB and

00:07:56,180 --> 00:08:01,250
rule dot RB those files contain a lot of

00:07:59,000 --> 00:08:05,870
meat the real logic of this gem how most

00:08:01,250 --> 00:08:07,190
of it works and that's really all there

00:08:05,870 --> 00:08:09,050
is to what I'm calling take me to your

00:08:07,190 --> 00:08:10,790
leader look for the entry points to a

00:08:09,050 --> 00:08:12,740
jam or look for the biggest gem files

00:08:10,790 --> 00:08:14,720
whatever you do just look for the the

00:08:12,740 --> 00:08:16,070
files that contain most of the logic and

00:08:14,720 --> 00:08:18,050
that's a great way to get a feel for the

00:08:16,070 --> 00:08:19,640
rough shape of a gem before you desks

00:08:18,050 --> 00:08:22,580
are diving in for a more focused

00:08:19,640 --> 00:08:23,930
analysis and so after that I the next

00:08:22,580 --> 00:08:26,960
step is what I'm calling if you see

00:08:23,930 --> 00:08:29,630
something search something and this is

00:08:26,960 --> 00:08:31,190
just me imploring you to use searching

00:08:29,630 --> 00:08:33,680
in a gem it's a surprisingly powerful

00:08:31,190 --> 00:08:35,630
tool for example say I've got some gem

00:08:33,680 --> 00:08:37,280
that's giving some outputs like Robocop

00:08:35,630 --> 00:08:39,200
maybe I'm using it on the command line

00:08:37,280 --> 00:08:40,760
and it's printed out this error now I

00:08:39,200 --> 00:08:42,650
know what this error is but Brujo cop

00:08:40,760 --> 00:08:44,690
has like 10,000 different possible

00:08:42,650 --> 00:08:46,360
errors that can give you and let's say

00:08:44,690 --> 00:08:47,980
it's one that I don't understand

00:08:46,360 --> 00:08:50,730
and I want to find the exact code in the

00:08:47,980 --> 00:08:54,009
ruble cap gem that defines this error

00:08:50,730 --> 00:08:57,129
okay so I go to github clone the robocop

00:08:54,009 --> 00:08:59,350
gem or the Rubicon repository open up

00:08:57,129 --> 00:09:02,619
the source code and I just do a search

00:08:59,350 --> 00:09:04,360
across the entire library and find a

00:09:02,619 --> 00:09:06,309
file that contains the string useless

00:09:04,360 --> 00:09:07,899
assignment two and it turns out this is

00:09:06,309 --> 00:09:10,149
a useless assignment Darby and that's

00:09:07,899 --> 00:09:11,829
pointing me right to the file that has

00:09:10,149 --> 00:09:13,329
all the logic that that caused this

00:09:11,829 --> 00:09:16,509
error and so I can go in and examine

00:09:13,329 --> 00:09:17,649
exactly how it's working I sort of

00:09:16,509 --> 00:09:19,449
glossed over how we're doing the search

00:09:17,649 --> 00:09:22,059
here what you all you need it for this

00:09:19,449 --> 00:09:23,709
tool for this technique is any tool that

00:09:22,059 --> 00:09:27,100
allows you to search recursively across

00:09:23,709 --> 00:09:30,519
a large swath of code a nested directory

00:09:27,100 --> 00:09:32,350
structure grep - are I can grab get grab

00:09:30,519 --> 00:09:36,899
any of these will work the one I like to

00:09:32,350 --> 00:09:38,889
use most is a G a G just lets you do

00:09:36,899 --> 00:09:41,470
Roesel the intelligent searching across

00:09:38,889 --> 00:09:43,989
a code base here I'm using a Jesus just

00:09:41,470 --> 00:09:47,259
to search for the string something well

00:09:43,989 --> 00:09:49,449
I can use a G - or so AG is smart enough

00:09:47,259 --> 00:09:51,129
to do things like if you have a git

00:09:49,449 --> 00:09:52,869
ignore file in this directory well we

00:09:51,129 --> 00:09:55,569
that get ignored and not returned you

00:09:52,869 --> 00:09:57,730
any search results that match patterns

00:09:55,569 --> 00:09:59,559
within your not get ignore file a G of

00:09:57,730 --> 00:10:01,360
course has a handful of useful Flags you

00:09:59,559 --> 00:10:02,769
can do a case insensitive search regular

00:10:01,360 --> 00:10:04,629
expression search you can even search by

00:10:02,769 --> 00:10:06,850
file type here I'm going to look only at

00:10:04,629 --> 00:10:08,350
Ruby files I do want to highlight

00:10:06,850 --> 00:10:09,970
regular expression searching is a

00:10:08,350 --> 00:10:12,519
surprisingly useful way to navigate a

00:10:09,970 --> 00:10:14,529
code base say I want to find all of

00:10:12,519 --> 00:10:15,939
these strings because I I want to find

00:10:14,529 --> 00:10:17,559
some information in a jam related to

00:10:15,939 --> 00:10:19,449
user profiles but I don't know exactly

00:10:17,559 --> 00:10:20,679
what that looks like I could do a case

00:10:19,449 --> 00:10:22,689
insensitive search with a relatively

00:10:20,679 --> 00:10:26,410
simple or regular expression in order to

00:10:22,689 --> 00:10:30,429
find to find all files containing any of

00:10:26,410 --> 00:10:31,689
these three strings but let me this has

00:10:30,429 --> 00:10:34,329
all been very abstract let me give you

00:10:31,689 --> 00:10:35,739
an actual example here's a line of code

00:10:34,329 --> 00:10:38,079
or three lines of code that was giving

00:10:35,739 --> 00:10:40,179
me trouble earlier this summer this is

00:10:38,079 --> 00:10:42,819
code using that's using reddit API

00:10:40,179 --> 00:10:45,129
reddit calms API and it's using a gem

00:10:42,819 --> 00:10:47,110
called read to interface with that API

00:10:45,129 --> 00:10:49,149
but this code wasn't doing what I

00:10:47,110 --> 00:10:51,069
expected what it should do is anytime

00:10:49,149 --> 00:10:53,110
anyone makes a comment anyone on reddit

00:10:51,069 --> 00:10:55,329
calm it should trigger this code and

00:10:53,110 --> 00:10:57,730
print out that comment but it wasn't

00:10:55,329 --> 00:10:59,030
working so I started using searching to

00:10:57,730 --> 00:11:00,200
try to debug it

00:10:59,030 --> 00:11:03,400
and since the method I'm calling is

00:11:00,200 --> 00:11:05,450
stream I will first search for stream

00:11:03,400 --> 00:11:08,060
I'll just do the search across the coda

00:11:05,450 --> 00:11:09,350
base and now admittedly my first results

00:11:08,060 --> 00:11:10,970
for this we're a pretty dismal

00:11:09,350 --> 00:11:12,350
I just got results inside the readme

00:11:10,970 --> 00:11:15,290
file and inside what looks like a

00:11:12,350 --> 00:11:16,550
documentation site for the red gem okay

00:11:15,290 --> 00:11:19,070
that's not terribly useful let's narrow

00:11:16,550 --> 00:11:21,860
this down using a G stream - - ruby to

00:11:19,070 --> 00:11:23,810
only look at Ruby files so that leads me

00:11:21,860 --> 00:11:26,630
to that gives me a much smaller number

00:11:23,810 --> 00:11:28,850
of results and in fact I see on line 65

00:11:26,630 --> 00:11:31,220
here in agitated listing Darby a method

00:11:28,850 --> 00:11:33,080
named stream being defined okay let's go

00:11:31,220 --> 00:11:34,580
take a look at that that brings me this

00:11:33,080 --> 00:11:35,930
stream method that it turns out doesn't

00:11:34,580 --> 00:11:37,910
really do anything it just calls another

00:11:35,930 --> 00:11:39,320
method and returns the results so let's

00:11:37,910 --> 00:11:41,990
check out that other method underscore

00:11:39,320 --> 00:11:43,250
stream alright this seems like I might

00:11:41,990 --> 00:11:46,330
have hit some pay dirt here I might have

00:11:43,250 --> 00:11:49,610
finally rose with a meaty method but

00:11:46,330 --> 00:11:51,290
ultimately it seems like after I started

00:11:49,610 --> 00:11:53,780
reading this code all it is a sort of a

00:11:51,290 --> 00:11:55,700
generic way to iterate over a bunch of

00:11:53,780 --> 00:11:57,080
objects in a list using a buffer that

00:11:55,700 --> 00:11:58,970
doesn't really tell us much it doesn't

00:11:57,080 --> 00:12:00,610
tell us how red is making the call to

00:11:58,970 --> 00:12:02,450
reddit.com which isn't working properly

00:12:00,610 --> 00:12:06,140
so let's back up a bit

00:12:02,450 --> 00:12:08,150
both underscore stream and stream are in

00:12:06,140 --> 00:12:09,740
this paginating listing on our D file I

00:12:08,150 --> 00:12:11,660
don't really know much about that file

00:12:09,740 --> 00:12:13,310
other than what I can guess fish then on

00:12:11,660 --> 00:12:15,320
the name but let's scroll to the top of

00:12:13,310 --> 00:12:17,450
it and as you might expect it defines

00:12:15,320 --> 00:12:18,920
this paginate eliciting class I don't

00:12:17,450 --> 00:12:21,470
know what that is but let's search for

00:12:18,920 --> 00:12:23,750
it and see worth being used again I'll

00:12:21,470 --> 00:12:26,690
do an Ag - - Ruby search for just

00:12:23,750 --> 00:12:28,400
paginate it and see what we get I get a

00:12:26,690 --> 00:12:30,320
few results but the most interesting one

00:12:28,400 --> 00:12:32,510
here is on the bottom Lib slash red

00:12:30,320 --> 00:12:35,150
slash model subreddit Darby is

00:12:32,510 --> 00:12:36,770
apparently using pagination listing I

00:12:35,150 --> 00:12:38,990
don't really know much about what that

00:12:36,770 --> 00:12:40,850
file is or what it does but it looks

00:12:38,990 --> 00:12:42,470
like it might be related to the code

00:12:40,850 --> 00:12:45,110
that's giving us trouble session dot

00:12:42,470 --> 00:12:46,640
subreddit that comments that stream sub

00:12:45,110 --> 00:12:48,890
root is in there and this is subreddit

00:12:46,640 --> 00:12:51,530
RB maybe they're related so I opened up

00:12:48,890 --> 00:12:53,000
celebrated dot RB go to this line 39 and

00:12:51,530 --> 00:12:55,280
it turns out that's any method called

00:12:53,000 --> 00:12:56,510
listing and I'm not even going to read

00:12:55,280 --> 00:12:58,220
through this and then in great depth I'm

00:12:56,510 --> 00:13:01,460
just gonna skim through and I see git

00:12:58,220 --> 00:13:03,050
and I see slash are slash something and

00:13:01,460 --> 00:13:05,180
I happen to know that reddit comm the

00:13:03,050 --> 00:13:08,450
structures of the URLs as reddit.com

00:13:05,180 --> 00:13:10,130
slash are slash something so this seems

00:13:08,450 --> 00:13:10,660
like this might actually be how the red

00:13:10,130 --> 00:13:12,670
gem

00:13:10,660 --> 00:13:14,350
is constructing its request to the

00:13:12,670 --> 00:13:15,490
reddit API this is where I want to start

00:13:14,350 --> 00:13:18,850
looking where I want to start any

00:13:15,490 --> 00:13:20,259
serious investigation of this bug so

00:13:18,850 --> 00:13:23,019
let's see where is this listing method

00:13:20,259 --> 00:13:25,420
getting used it turns out via a little

00:13:23,019 --> 00:13:27,189
bit of metaprogramming trickery a method

00:13:25,420 --> 00:13:29,050
named comments just calls the listing

00:13:27,189 --> 00:13:30,790
method and so that's that's sort of how

00:13:29,050 --> 00:13:33,160
we connect all these things together

00:13:30,790 --> 00:13:35,889
we've got a file called subreddit with a

00:13:33,160 --> 00:13:37,240
method named comments that has this

00:13:35,889 --> 00:13:39,250
listing method that returns something

00:13:37,240 --> 00:13:41,350
that has a stream method this is also

00:13:39,250 --> 00:13:43,420
this is how we got to this line that's

00:13:41,350 --> 00:13:45,040
giving me trouble and how we got here

00:13:43,420 --> 00:13:47,170
was sort of this iterative searching

00:13:45,040 --> 00:13:49,600
process we started out with one lead

00:13:47,170 --> 00:13:50,829
stream we searched that and found

00:13:49,600 --> 00:13:52,870
paginate listing which led us to

00:13:50,829 --> 00:13:55,149
underscore stream that was a dead end so

00:13:52,870 --> 00:13:56,410
we backed up to paginate listing follow

00:13:55,149 --> 00:13:57,879
that two subreddit which led us to

00:13:56,410 --> 00:13:59,680
listing which led us to this comments

00:13:57,879 --> 00:14:01,209
method and this is sort of the heart of

00:13:59,680 --> 00:14:03,189
how you use searching to navigate a

00:14:01,209 --> 00:14:05,589
third party gem treat it like you're a

00:14:03,189 --> 00:14:07,629
detective chasing down leads you start

00:14:05,589 --> 00:14:09,939
out with one lead maybe a dead body or

00:14:07,629 --> 00:14:10,990
something and you trace that and trace

00:14:09,939 --> 00:14:13,569
that lead out and hopefully that leads

00:14:10,990 --> 00:14:15,069
you to other leads which sends you off

00:14:13,569 --> 00:14:17,160
to other leads and other leads and so on

00:14:15,069 --> 00:14:19,569
and so forth until eventually you find

00:14:17,160 --> 00:14:21,970
your killer or something or in this case

00:14:19,569 --> 00:14:24,370
the bit of logic that is most relevant

00:14:21,970 --> 00:14:26,350
to the code through the line of code

00:14:24,370 --> 00:14:27,759
that's giving me trouble and that's sort

00:14:26,350 --> 00:14:30,220
of why I called this section see

00:14:27,759 --> 00:14:31,660
something search something that's sort

00:14:30,220 --> 00:14:32,649
of the process you see something

00:14:31,660 --> 00:14:33,399
interesting or something you don't

00:14:32,649 --> 00:14:35,949
understand

00:14:33,399 --> 00:14:37,360
search for it read the code and then

00:14:35,949 --> 00:14:39,519
anything else you see that you don't

00:14:37,360 --> 00:14:41,769
understand or that is interesting search

00:14:39,519 --> 00:14:43,810
for that again now there are some

00:14:41,769 --> 00:14:46,389
gotchas around this especially in Ruby

00:14:43,810 --> 00:14:48,160
one of which is meta programming if I'm

00:14:46,389 --> 00:14:50,410
just searching for add underscore one

00:14:48,160 --> 00:14:52,480
and it's that method is defined like

00:14:50,410 --> 00:14:54,490
this I easily find it but there are

00:14:52,480 --> 00:14:55,930
other ways to define methods in Ruby for

00:14:54,490 --> 00:14:57,790
example using the find method and giving

00:14:55,930 --> 00:15:00,069
it a string and since I could build up

00:14:57,790 --> 00:15:01,750
the string any way I want well I could

00:15:00,069 --> 00:15:04,449
define it and build up the string via

00:15:01,750 --> 00:15:06,370
parts and now if add one is defined like

00:15:04,449 --> 00:15:08,430
this at the bottom I won't find it by

00:15:06,370 --> 00:15:10,660
searching for add underscore one

00:15:08,430 --> 00:15:12,389
probably the only good workaround for

00:15:10,660 --> 00:15:14,290
this that I know is to just search for

00:15:12,389 --> 00:15:15,699
components of a method name if you don't

00:15:14,290 --> 00:15:19,000
find the full method name by searching

00:15:15,699 --> 00:15:21,339
for add or searching for one a real life

00:15:19,000 --> 00:15:24,820
example of this is this line that might

00:15:21,339 --> 00:15:27,100
be familiar if you use rails a lot

00:15:24,820 --> 00:15:29,860
these are not fine by email this is a

00:15:27,100 --> 00:15:31,450
dynamic finder this is a finder that we

00:15:29,860 --> 00:15:34,029
a method that was generated at run time

00:15:31,450 --> 00:15:36,730
so if I went and clone the repository

00:15:34,029 --> 00:15:39,850
for the rails gem and searched for find

00:15:36,730 --> 00:15:41,500
by email in that gem I wouldn't find any

00:15:39,850 --> 00:15:43,330
results because this has generated at

00:15:41,500 --> 00:15:45,850
run time so instead I can just search

00:15:43,330 --> 00:15:47,770
for find underscore by and I will in

00:15:45,850 --> 00:15:50,320
fact find bits of the meta programming

00:15:47,770 --> 00:15:55,360
nonsense inside rails and make this the

00:15:50,320 --> 00:15:56,860
power of this method but okay so far

00:15:55,360 --> 00:15:58,420
I've only gone over just basic text

00:15:56,860 --> 00:16:00,610
searching let's take a look at something

00:15:58,420 --> 00:16:02,500
a little bit more powerful now but first

00:16:00,610 --> 00:16:04,779
let me set up an example here's a method

00:16:02,500 --> 00:16:07,000
it can question mark and this comes from

00:16:04,779 --> 00:16:09,820
the Kin Kin Kin jam that we briefly

00:16:07,000 --> 00:16:12,190
touched on earlier I want to find where

00:16:09,820 --> 00:16:14,620
this method is defined so I go into the

00:16:12,190 --> 00:16:17,140
Kin Kin Kin gem and search for it I'm

00:16:14,620 --> 00:16:19,450
using - see here as an argument just to

00:16:17,140 --> 00:16:21,550
show how many results we're getting for

00:16:19,450 --> 00:16:23,320
each file to keep the slide short and

00:16:21,550 --> 00:16:25,450
we're getting to one but we're giving

00:16:23,320 --> 00:16:27,970
like 30 to 40 results and as we've

00:16:25,450 --> 00:16:30,100
established I'm very lazy I'm not gonna

00:16:27,970 --> 00:16:32,410
look through all of us so let's see if

00:16:30,100 --> 00:16:35,080
we can narrow it down we're going to use

00:16:32,410 --> 00:16:38,380
the referral gem which is a tool for

00:16:35,080 --> 00:16:40,510
finding references inside a codebase it

00:16:38,380 --> 00:16:42,280
actually parses the Ruby code into an

00:16:40,510 --> 00:16:44,140
abstract syntax tree and searches that

00:16:42,280 --> 00:16:45,940
so here I'm going to use referral to

00:16:44,140 --> 00:16:48,760
search for something that has the exact

00:16:45,940 --> 00:16:51,130
name can a question mark and I find only

00:16:48,760 --> 00:16:52,540
six results it turns out - these are

00:16:51,130 --> 00:16:55,000
method declarations and three of these

00:16:52,540 --> 00:16:56,890
are method invocations let's narrow it

00:16:55,000 --> 00:16:58,300
down even further I'm gonna search for

00:16:56,890 --> 00:17:00,130
something with an exact name of can

00:16:58,300 --> 00:17:02,530
question mark but the type of thing I

00:17:00,130 --> 00:17:05,319
want is an instance method declaration

00:17:02,530 --> 00:17:06,970
and the output I want is the file name

00:17:05,319 --> 00:17:08,650
we find it in the line number we found

00:17:06,970 --> 00:17:11,560
it on and the actual source code of that

00:17:08,650 --> 00:17:14,140
line and lo and behold I only have two

00:17:11,560 --> 00:17:16,720
output lines two methods name can

00:17:14,140 --> 00:17:18,400
question mark being defined and I'm

00:17:16,720 --> 00:17:19,990
pretty lazy but I'm not so lazy that I

00:17:18,400 --> 00:17:21,480
can't just check two of these and see

00:17:19,990 --> 00:17:23,770
which is the one I actually care about

00:17:21,480 --> 00:17:25,329
now I've only really briefly glossed

00:17:23,770 --> 00:17:26,500
over the referral gem it's actually

00:17:25,329 --> 00:17:28,030
super powerful

00:17:26,500 --> 00:17:30,040
I was written by Justin Searles out of

00:17:28,030 --> 00:17:31,480
test double and I highly recommend

00:17:30,040 --> 00:17:33,160
looking into it does a lot of cool stuff

00:17:31,480 --> 00:17:35,440
and I've only touched the surface of it

00:17:33,160 --> 00:17:37,540
and that's really all there is to

00:17:35,440 --> 00:17:38,140
searching as a step for navigating a gem

00:17:37,540 --> 00:17:39,940
file

00:17:38,140 --> 00:17:42,400
there are a couple there are a few too a

00:17:39,940 --> 00:17:43,929
few interesting tools around this but

00:17:42,400 --> 00:17:45,100
the high-level approach is iterative

00:17:43,929 --> 00:17:46,950
searching where you treat it like a

00:17:45,100 --> 00:17:48,850
detective mystery tracking down leads

00:17:46,950 --> 00:17:50,200
some of which will peter out but

00:17:48,850 --> 00:17:52,600
hopefully one of which will finally get

00:17:50,200 --> 00:17:54,970
you to what the answer usually answers

00:17:52,600 --> 00:17:57,730
you need but searching doesn't often

00:17:54,970 --> 00:17:58,870
actually give you a fix for a bug it

00:17:57,730 --> 00:18:03,790
just points you to where you need to

00:17:58,870 --> 00:18:05,170
look to finally fix a bug that's within

00:18:03,790 --> 00:18:06,820
a gem that's giving you trouble I'd

00:18:05,170 --> 00:18:08,410
recommend checking out are trying

00:18:06,820 --> 00:18:10,690
tracing for which unfortunately I have

00:18:08,410 --> 00:18:12,880
no clever name and by tracing I mean

00:18:10,690 --> 00:18:15,190
just following a single line of logic

00:18:12,880 --> 00:18:17,110
through a third-party gem it's giving

00:18:15,190 --> 00:18:19,300
you trouble and there are a few

00:18:17,110 --> 00:18:21,190
approaches to this the first of which

00:18:19,300 --> 00:18:22,420
you might already be familiar with let's

00:18:21,190 --> 00:18:24,670
say you've got some line of code here

00:18:22,420 --> 00:18:26,350
that's giving you trouble the simplest

00:18:24,670 --> 00:18:28,600
possible way to debug it it's just for a

00:18:26,350 --> 00:18:30,190
bunch of put statements around it it

00:18:28,600 --> 00:18:32,440
says print line debugging you might be

00:18:30,190 --> 00:18:33,880
familiar with it it's usually people's

00:18:32,440 --> 00:18:36,520
first debugging technique that they

00:18:33,880 --> 00:18:38,110
learn and so here I've just printed out

00:18:36,520 --> 00:18:40,150
all the inputs of this gem and the

00:18:38,110 --> 00:18:41,890
output but what if this doesn't answer

00:18:40,150 --> 00:18:44,440
my question what if the inputs look

00:18:41,890 --> 00:18:46,059
right and the outputs look wrong well

00:18:44,440 --> 00:18:46,750
you can't add print lines inside of a

00:18:46,059 --> 00:18:49,870
gem can you

00:18:46,750 --> 00:18:51,460
well okay spoiler alert you totally can

00:18:49,870 --> 00:18:53,020
it turns out every gem you install on

00:18:51,460 --> 00:18:53,260
your hard drive exists on your hard

00:18:53,020 --> 00:18:56,380
drive

00:18:53,260 --> 00:18:58,270
go figure you can find these gems by

00:18:56,380 --> 00:19:00,280
echoing the gem home environment

00:18:58,270 --> 00:19:03,510
variable it turns out on my laptop there

00:19:00,280 --> 00:19:06,160
in user slash Kevin /r vm / gem / ruby

00:19:03,510 --> 00:19:07,780
and I can list the results of this

00:19:06,160 --> 00:19:09,820
directory and it turns out there's a

00:19:07,780 --> 00:19:11,470
whole bunch of gems each of these is a

00:19:09,820 --> 00:19:13,330
folder and then this folder is pretty

00:19:11,470 --> 00:19:16,030
much what you would get if you cloned

00:19:13,330 --> 00:19:17,620
these gems off of github and you can

00:19:16,030 --> 00:19:19,330
actually edit the contents of this let

00:19:17,620 --> 00:19:21,250
me prove it to you you might be familiar

00:19:19,330 --> 00:19:23,559
with the rake gem it's popular and rails

00:19:21,250 --> 00:19:24,130
land rick could a task runner it doesn't

00:19:23,559 --> 00:19:26,590
really matter

00:19:24,130 --> 00:19:28,480
rake - t lists out all the tasks that

00:19:26,590 --> 00:19:29,650
rake knows about well we're gonna change

00:19:28,480 --> 00:19:32,470
that

00:19:29,650 --> 00:19:35,740
I'm gonna go into my gem home directory

00:19:32,470 --> 00:19:37,990
find the rake gem and edit the code I'm

00:19:35,740 --> 00:19:39,370
gonna find the fire the method in there

00:19:37,990 --> 00:19:42,880
something buried deep inside this gem

00:19:39,370 --> 00:19:44,380
that makes a rake - t work here it is

00:19:42,880 --> 00:19:45,940
doesn't really matter what it does we're

00:19:44,380 --> 00:19:47,530
not even gonna read the code we're just

00:19:45,940 --> 00:19:49,210
gonna add a line at the top of it that

00:19:47,530 --> 00:19:50,540
print some stuff out we're gonna print

00:19:49,210 --> 00:19:53,300
out high rubyconf

00:19:50,540 --> 00:19:55,280
and now when I run rape - t-they prints

00:19:53,300 --> 00:19:57,230
out hi Rubicon I think this is pretty

00:19:55,280 --> 00:19:59,060
cool you can actually edit the gems that

00:19:57,230 --> 00:20:02,690
live in your system and those edits will

00:19:59,060 --> 00:20:03,980
take effect but okay so this one's a

00:20:02,690 --> 00:20:06,410
dumb tech demo let me show you how you

00:20:03,980 --> 00:20:07,550
can use this for actual debugging here

00:20:06,410 --> 00:20:09,830
are a couple lines that were giving me

00:20:07,550 --> 00:20:12,920
trouble a couple years ago what these

00:20:09,830 --> 00:20:14,690
lines should do is fetch a file off of

00:20:12,920 --> 00:20:18,050
some remote server via acept a p and

00:20:14,690 --> 00:20:20,690
parse the results as CSV this is using

00:20:18,050 --> 00:20:24,890
Ruby's standard library csv code as well

00:20:20,690 --> 00:20:27,110
as an SFTP gem but this was giving me an

00:20:24,890 --> 00:20:29,090
error on the second line the error was

00:20:27,110 --> 00:20:31,580
wrong number of arguments to some method

00:20:29,090 --> 00:20:33,230
named gits and this is happening

00:20:31,580 --> 00:20:35,420
somewhere deep in the bowels of the SFTP

00:20:33,230 --> 00:20:36,860
gem I have no idea where well I mean I

00:20:35,420 --> 00:20:39,350
sort of know it tells me the file in the

00:20:36,860 --> 00:20:41,750
line number but it's not in code I wrote

00:20:39,350 --> 00:20:44,510
so let's take a look at the actual stack

00:20:41,750 --> 00:20:46,670
trace here you again you can see that

00:20:44,510 --> 00:20:49,220
sort of rabbit hole lines 9 in line 8 in

00:20:46,670 --> 00:20:51,140
line lines 9 in line 8 are on my code

00:20:49,220 --> 00:20:52,370
but then the lines get much longer as it

00:20:51,140 --> 00:20:56,240
disappears into the Ruby standard

00:20:52,370 --> 00:20:59,480
library and into actual gem code so

00:20:56,240 --> 00:21:01,310
let's zero in on the very bowels of this

00:20:59,480 --> 00:21:02,930
the bottom of the stack trace here are

00:21:01,310 --> 00:21:06,080
the last two lines in that stack trace

00:21:02,930 --> 00:21:08,960
the second to last line is inside ruby

00:21:06,080 --> 00:21:10,820
csv code on line 392 and the last line

00:21:08,960 --> 00:21:12,080
is inside the SFTP code so the

00:21:10,820 --> 00:21:14,870
interaction between Ruby's standard

00:21:12,080 --> 00:21:16,580
library and the SFTP gem seem to be

00:21:14,870 --> 00:21:19,160
giving us the trouble so let's take a

00:21:16,580 --> 00:21:21,290
look at that second to last line turns

00:21:19,160 --> 00:21:23,180
out it's already told us exactly where

00:21:21,290 --> 00:21:25,460
we need to go it's given us the entire

00:21:23,180 --> 00:21:27,890
file name we just have to open this file

00:21:25,460 --> 00:21:31,130
up it this file being user slash Kevin

00:21:27,890 --> 00:21:34,240
/r vm / rubies / ruby 2.6 /lib / ruby /

00:21:31,130 --> 00:21:37,280
2.6 slash debut slice parser dot RB

00:21:34,240 --> 00:21:38,840
simple right so in the even tells us as

00:21:37,280 --> 00:21:40,760
exactly the line number to go to so

00:21:38,840 --> 00:21:42,950
let's just open this file up in a text

00:21:40,760 --> 00:21:46,190
editor and here it is this is deep

00:21:42,950 --> 00:21:48,530
inside ruby standard library online 392

00:21:46,190 --> 00:21:50,900
and yet there's a method name gets being

00:21:48,530 --> 00:21:52,430
called with two two arguments but of

00:21:50,900 --> 00:21:53,870
course i have no context for this code i

00:21:52,430 --> 00:21:55,010
have no idea how he got here i've no

00:21:53,870 --> 00:21:57,500
idea how this fits into the larger

00:21:55,010 --> 00:21:59,810
system but I don't really need to let's

00:21:57,500 --> 00:22:01,160
try and getting some context and just

00:21:59,810 --> 00:22:02,630
like I would in my code I can add a

00:22:01,160 --> 00:22:04,169
bunch of put statements to it this is

00:22:02,630 --> 00:22:05,309
the same code I've just printed

00:22:04,169 --> 00:22:07,590
out all the variables that look

00:22:05,309 --> 00:22:08,999
interesting and then printed out here at

00:22:07,590 --> 00:22:12,149
the end to see if we ever get that far

00:22:08,999 --> 00:22:16,679
now if I run this code I find out that

00:22:12,149 --> 00:22:18,899
input is some object net SFTP operations

00:22:16,679 --> 00:22:20,489
file I don't know what that is but it

00:22:18,899 --> 00:22:23,549
sort of matches the last line of our

00:22:20,489 --> 00:22:26,340
stack trace which is deep inside the

00:22:23,549 --> 00:22:27,600
SFTP gem which is telling us that the

00:22:26,340 --> 00:22:29,159
gets is being called with too many

00:22:27,600 --> 00:22:30,690
arguments so let's go take a look at

00:22:29,159 --> 00:22:32,669
that gem we already had the file path

00:22:30,690 --> 00:22:35,549
again that we can go take a look at and

00:22:32,669 --> 00:22:38,220
here it is this method gets has only one

00:22:35,549 --> 00:22:40,470
argument but ruby ruby standard library

00:22:38,220 --> 00:22:41,759
was trying to call it with two okay and

00:22:40,470 --> 00:22:44,549
that sounds like a bug this is a

00:22:41,759 --> 00:22:47,460
legitimate bug in the SFTP gem for once

00:22:44,549 --> 00:22:50,009
it wasn't my fault and so I'm just gonna

00:22:47,460 --> 00:22:51,720
open this on github as a github issue

00:22:50,009 --> 00:22:54,119
they actually confirmed that it was in

00:22:51,720 --> 00:22:55,590
fact a bug and so I figured maybe I'll

00:22:54,119 --> 00:22:57,149
take a shot at fixing it but of course

00:22:55,590 --> 00:22:58,799
as we've established I'm super lazy and

00:22:57,149 --> 00:23:00,389
so just one short year later someone

00:22:58,799 --> 00:23:02,489
else beat me to the punch and now this

00:23:00,389 --> 00:23:05,100
is no longer a bug in the SFTP gem and

00:23:02,489 --> 00:23:06,840
so that's sort of how you can use print

00:23:05,100 --> 00:23:09,230
debugging to debug not just your own

00:23:06,840 --> 00:23:11,549
code but also with third-party gem code

00:23:09,230 --> 00:23:13,259
printing is pretty easy you probably

00:23:11,549 --> 00:23:14,639
already know how to do it because it's

00:23:13,259 --> 00:23:17,159
literally just hello world you just

00:23:14,639 --> 00:23:18,720
print stuff but it can be kind of a pain

00:23:17,159 --> 00:23:19,919
because every time you want you have new

00:23:18,720 --> 00:23:21,480
questions you want to answer more

00:23:19,919 --> 00:23:23,009
context you want to get you have to add

00:23:21,480 --> 00:23:25,440
new put statements to the code and then

00:23:23,009 --> 00:23:26,970
rerun it an alternative it's a little

00:23:25,440 --> 00:23:29,549
bit more interactive is what's called

00:23:26,970 --> 00:23:31,559
debug or debugging and if you've never

00:23:29,549 --> 00:23:33,720
run into a debugger before it's a piece

00:23:31,559 --> 00:23:37,710
of software that lets you step through

00:23:33,720 --> 00:23:39,960
code line by line and it's ask questions

00:23:37,710 --> 00:23:41,249
of the code ask questions and get more

00:23:39,960 --> 00:23:44,850
context on what's happening at that

00:23:41,249 --> 00:23:47,309
point in the program and the debugger I

00:23:44,850 --> 00:23:49,320
like to use is called pry by bug you if

00:23:47,309 --> 00:23:50,489
you're on here if you're from the

00:23:49,320 --> 00:23:52,320
JavaScript world you might be familiar

00:23:50,489 --> 00:23:55,080
with the debuggers that are built into

00:23:52,320 --> 00:23:57,720
most browsers or if you use an IDE most

00:23:55,080 --> 00:23:59,369
ideas also have debuggers built in but I

00:23:57,720 --> 00:24:01,080
tend to stick to the command line so I

00:23:59,369 --> 00:24:02,759
use probably by bug and I want to give

00:24:01,080 --> 00:24:05,399
you a very very quick tutorial on how

00:24:02,759 --> 00:24:09,029
that is used so here's some dummy code I

00:24:05,399 --> 00:24:11,639
wrote and it's used the prime by bug gem

00:24:09,029 --> 00:24:14,249
I first require it and then I add a line

00:24:11,639 --> 00:24:15,749
called binding dot pry and all that does

00:24:14,249 --> 00:24:17,520
is when you get to this point in the

00:24:15,749 --> 00:24:20,370
code it freezes the program

00:24:17,520 --> 00:24:22,050
and lets you look around a sort of this

00:24:20,370 --> 00:24:23,550
is what it looks like in a terminal it

00:24:22,050 --> 00:24:25,410
prints out some of the context as to

00:24:23,550 --> 00:24:26,760
where we are and also gives me a prompt

00:24:25,410 --> 00:24:31,200
that I can start running commands button

00:24:26,760 --> 00:24:32,370
I'm from and I say it freezes on this

00:24:31,200 --> 00:24:35,100
binding that Prime method it actually

00:24:32,370 --> 00:24:37,350
freezes on the next meaningful line but

00:24:35,100 --> 00:24:38,640
anyway for readability I'm gonna move my

00:24:37,350 --> 00:24:40,560
prompt up here so you can read it a

00:24:38,640 --> 00:24:42,240
little bit better and are a bunch of

00:24:40,560 --> 00:24:45,540
commands I can run at this point one of

00:24:42,240 --> 00:24:48,660
which is step and what step does is it

00:24:45,540 --> 00:24:51,120
steps into the current line so I'm I'm

00:24:48,660 --> 00:24:53,370
currently pointed at a call to this

00:24:51,120 --> 00:24:56,250
first method I'm gonna running step will

00:24:53,370 --> 00:24:59,070
step into that first method now at this

00:24:56,250 --> 00:25:01,530
point this is what it looks like there

00:24:59,070 --> 00:25:02,790
is a you know it prints out the context

00:25:01,530 --> 00:25:04,820
as to where you currently are and gives

00:25:02,790 --> 00:25:06,840
you a prompt to type further commands

00:25:04,820 --> 00:25:08,820
and again I'm gonna move this prompt up

00:25:06,840 --> 00:25:10,200
here for readability now in addition to

00:25:08,820 --> 00:25:12,930
all the commands I can run I can also

00:25:10,200 --> 00:25:14,550
type any valid Ruby expression any Ruby

00:25:12,930 --> 00:25:16,740
code that would be valid at this point I

00:25:14,550 --> 00:25:18,150
can type for example I can just type X

00:25:16,740 --> 00:25:19,650
to see what the value of x is at this

00:25:18,150 --> 00:25:22,560
point in the program and it turns out at

00:25:19,650 --> 00:25:24,690
7 now let's say I want to just move on

00:25:22,560 --> 00:25:28,020
to the next line I type next and it does

00:25:24,690 --> 00:25:29,460
exactly that and again I can still ask

00:25:28,020 --> 00:25:31,320
questions of the program maybe I

00:25:29,460 --> 00:25:33,000
forgotten what X is I want to see if X

00:25:31,320 --> 00:25:37,230
is greater than 5 I just type X greater

00:25:33,000 --> 00:25:38,910
than 5 and it says true which which

00:25:37,230 --> 00:25:41,010
means that now I should move into this

00:25:38,910 --> 00:25:42,360
conditional so type next and yep I'm

00:25:41,010 --> 00:25:45,870
moving to the conditional that's pretty

00:25:42,360 --> 00:25:47,610
nifty now I could take next again and

00:25:45,870 --> 00:25:49,770
move poor to the next line but if I want

00:25:47,610 --> 00:25:52,050
to I could step into this second method

00:25:49,770 --> 00:25:53,970
I type step and yep it moves into the

00:25:52,050 --> 00:25:55,230
second method and again I can query the

00:25:53,970 --> 00:25:57,900
state of the program by typing something

00:25:55,230 --> 00:25:59,610
like Y it tells me oh Y is 10 now let's

00:25:57,900 --> 00:26:01,530
say I'm done with this second method I

00:25:59,610 --> 00:26:03,330
want to get back out I type finish to

00:26:01,530 --> 00:26:05,910
get back out and actually just moves me

00:26:03,330 --> 00:26:08,250
to the next meaningful line and that's

00:26:05,910 --> 00:26:10,530
my that's the whirlwind tour of pry by

00:26:08,250 --> 00:26:13,380
bug the commands we run over were next

00:26:10,530 --> 00:26:15,510
which moves you to the next line step

00:26:13,380 --> 00:26:17,850
which steps into a function and finish

00:26:15,510 --> 00:26:19,590
which steps out of a function there are

00:26:17,850 --> 00:26:21,900
a bazillion other commands none of which

00:26:19,590 --> 00:26:23,400
I have time to cover but the point being

00:26:21,900 --> 00:26:25,320
the buggers are great you should use

00:26:23,400 --> 00:26:27,500
them my favorite debugger is prime by

00:26:25,320 --> 00:26:30,220
bug my favorite rebug er is myself and

00:26:27,500 --> 00:26:31,240
the point of all this is that

00:26:30,220 --> 00:26:32,679
when you're tracing through a

00:26:31,240 --> 00:26:34,149
third-party gem the muggers are really

00:26:32,679 --> 00:26:36,399
great when you can start debugging in

00:26:34,149 --> 00:26:37,809
your code and then step into the method

00:26:36,399 --> 00:26:39,879
calls inside a gem that are giving you

00:26:37,809 --> 00:26:43,450
trouble for example in this code sample

00:26:39,879 --> 00:26:48,460
we were looking at earlier I could add a

00:26:43,450 --> 00:26:50,620
breakpoint up here and then I could type

00:26:48,460 --> 00:26:52,480
next move the next line next to move to

00:26:50,620 --> 00:26:54,009
the next line and finally I get here

00:26:52,480 --> 00:26:56,019
where the lines where the exception is

00:26:54,009 --> 00:26:57,850
actually getting thrown I could type

00:26:56,019 --> 00:26:59,889
next again it would move past this line

00:26:57,850 --> 00:27:01,000
but moving past this line causes an

00:26:59,889 --> 00:27:03,129
exception to be thrown so the whole

00:27:01,000 --> 00:27:07,000
thing would blow up instead I'm going to

00:27:03,129 --> 00:27:09,190
type step to step into this line and I'm

00:27:07,000 --> 00:27:10,870
stepping from my code into code in the

00:27:09,190 --> 00:27:13,600
Ruby standard library and it totally

00:27:10,870 --> 00:27:15,129
works it turns out that this to a method

00:27:13,600 --> 00:27:17,409
is actually powered by a method called

00:27:15,129 --> 00:27:19,000
each so I've stepped into it and now

00:27:17,409 --> 00:27:21,700
it's letting me explore if I want to or

00:27:19,000 --> 00:27:24,100
I can step further into this line parser

00:27:21,700 --> 00:27:26,259
dot parse so I do that a type step again

00:27:24,100 --> 00:27:28,330
and it looks like parser itself as a

00:27:26,259 --> 00:27:29,799
methods we've stepped into that I can

00:27:28,330 --> 00:27:32,200
keep doing this I can step further and

00:27:29,799 --> 00:27:33,970
further into this gem until finally I am

00:27:32,200 --> 00:27:36,070
the buried deep in the bowels of the gem

00:27:33,970 --> 00:27:38,139
at this point which might look familiar

00:27:36,070 --> 00:27:39,850
this is where we got to last time this

00:27:38,139 --> 00:27:41,230
is very near the bottom of our stack

00:27:39,850 --> 00:27:42,460
trace this is where the exceptions

00:27:41,230 --> 00:27:45,340
getting thrown the line that's causing

00:27:42,460 --> 00:27:46,840
the problem and previously I had to add

00:27:45,340 --> 00:27:48,970
a bunch of put statements to get context

00:27:46,840 --> 00:27:50,679
here instead I can just start querying

00:27:48,970 --> 00:27:52,600
the state of the program at this point I

00:27:50,679 --> 00:27:54,700
could type out at input to see what

00:27:52,600 --> 00:27:56,620
input is I could type out chunks eyes to

00:27:54,700 --> 00:27:58,570
see what chunk size is I could type out

00:27:56,620 --> 00:28:00,220
that input down gets and pass it very

00:27:58,570 --> 00:28:04,509
honest numbers of arguments and see what

00:28:00,220 --> 00:28:06,009
it gives me because of course it gets

00:28:04,509 --> 00:28:07,210
what the wrong number of arguments was

00:28:06,009 --> 00:28:10,330
what was causing those problems earlier

00:28:07,210 --> 00:28:12,490
so that's debuggers debuggers and print

00:28:10,330 --> 00:28:14,320
lines are both perfectly valid ways of

00:28:12,490 --> 00:28:17,200
debugging not just your own code but

00:28:14,320 --> 00:28:18,549
third party gem code but beyond just the

00:28:17,200 --> 00:28:20,440
tools I've sort of want to talk to you

00:28:18,549 --> 00:28:22,929
about a cool a few different high level

00:28:20,440 --> 00:28:24,549
approaches for tracing which I have very

00:28:22,929 --> 00:28:27,100
uncreated Lee called the first is

00:28:24,549 --> 00:28:28,750
tracing forwards and that's we've got

00:28:27,100 --> 00:28:30,970
some line of code what happens when you

00:28:28,750 --> 00:28:33,100
run that code so I trace this line

00:28:30,970 --> 00:28:34,809
forward I see that there's it's calling

00:28:33,100 --> 00:28:36,669
the first method so what happens is the

00:28:34,809 --> 00:28:38,440
first method gets called so I look for

00:28:36,669 --> 00:28:39,519
the definition of that that contains the

00:28:38,440 --> 00:28:40,809
second method so I look for the

00:28:39,519 --> 00:28:41,889
definition of that that contains the

00:28:40,809 --> 00:28:43,269
third method so I look for the

00:28:41,889 --> 00:28:43,930
definition of that and so on and so

00:28:43,269 --> 00:28:45,490
forth

00:28:43,930 --> 00:28:47,650
that's tracing forward that's pretty

00:28:45,490 --> 00:28:49,120
much what debuggers do they step forward

00:28:47,650 --> 00:28:50,640
or into each line

00:28:49,120 --> 00:28:54,100
very few debuggers go backwards in time

00:28:50,640 --> 00:28:56,050
print debugging is okay at this usually

00:28:54,100 --> 00:28:57,370
at each level of your tracing you have

00:28:56,050 --> 00:28:59,500
to stop and add a whole bunch of more

00:28:57,370 --> 00:29:00,940
print lines to see what's happening so

00:28:59,500 --> 00:29:02,980
they're not there they work with the

00:29:00,940 --> 00:29:04,750
less-than-ideal tracing forwards it's

00:29:02,980 --> 00:29:06,270
really useful when you have a line of

00:29:04,750 --> 00:29:08,590
code that's not doing what you expect

00:29:06,270 --> 00:29:11,770
and you want to dive into the gem and

00:29:08,590 --> 00:29:12,910
trace it forwards conversely you guys

00:29:11,770 --> 00:29:14,860
you might expect this tracing backwards

00:29:12,910 --> 00:29:16,240
you've got some line you don't want to

00:29:14,860 --> 00:29:18,010
see what this line does rather you want

00:29:16,240 --> 00:29:20,740
to see how you got to this point in the

00:29:18,010 --> 00:29:23,140
program so I've got the slime result

00:29:20,740 --> 00:29:24,460
equals fubar see I want to see where the

00:29:23,140 --> 00:29:26,590
components of this line came from where

00:29:24,460 --> 00:29:27,880
did C come from okay I mean I just have

00:29:26,590 --> 00:29:30,790
to scroll back up and find that we're

00:29:27,880 --> 00:29:32,980
inside a method named foo C okay where's

00:29:30,790 --> 00:29:34,900
this method being called from it's being

00:29:32,980 --> 00:29:37,180
called from here with B plus something

00:29:34,900 --> 00:29:38,410
okay where to be come from and so on and

00:29:37,180 --> 00:29:41,760
so forth we work our way backwards to

00:29:38,410 --> 00:29:41,760
figure out how we got to a certain point

00:29:42,060 --> 00:29:45,490
for backward tracing you generally have

00:29:44,140 --> 00:29:48,520
some point of interest you want to start

00:29:45,490 --> 00:29:49,810
at usually deep inside of a gem it's

00:29:48,520 --> 00:29:51,640
really good if you have an exception

00:29:49,810 --> 00:29:54,310
because if an exception is being thrown

00:29:51,640 --> 00:29:56,290
deep inside some gem you already have a

00:29:54,310 --> 00:29:57,790
map to that point in the Jim you have

00:29:56,290 --> 00:29:59,970
this stack trace you can see exactly

00:29:57,790 --> 00:30:02,200
each line where everything was called

00:29:59,970 --> 00:30:03,580
all the times if you don't have an

00:30:02,200 --> 00:30:04,660
exception that provides you that exact

00:30:03,580 --> 00:30:06,460
map and you're trying to work your way

00:30:04,660 --> 00:30:07,870
backwards to figure out where maybe the

00:30:06,460 --> 00:30:10,960
method that you're in is getting called

00:30:07,870 --> 00:30:16,420
from use text searching and referral to

00:30:10,960 --> 00:30:17,410
get to that point so backwards tracing

00:30:16,420 --> 00:30:19,390
the forward tracing are the two

00:30:17,410 --> 00:30:21,010
high-level approaches both of them often

00:30:19,390 --> 00:30:23,200
involve doing a lot of searching for

00:30:21,010 --> 00:30:25,060
references to stuff within a gem I'm

00:30:23,200 --> 00:30:28,840
inside some method where does this

00:30:25,060 --> 00:30:31,090
method get called from or I'm using some

00:30:28,840 --> 00:30:32,770
method where's this method defined and

00:30:31,090 --> 00:30:34,480
usually your first approach is to just

00:30:32,770 --> 00:30:36,070
check the current file you're in if that

00:30:34,480 --> 00:30:38,320
fails but you think the method should be

00:30:36,070 --> 00:30:40,270
in the Spile take a look at any modules

00:30:38,320 --> 00:30:41,740
that are being included in the file or

00:30:40,270 --> 00:30:44,230
classes they're being extended by the

00:30:41,740 --> 00:30:45,580
file if you still can't find it look

00:30:44,230 --> 00:30:47,080
around for any metaprogramming that's

00:30:45,580 --> 00:30:48,670
suspicious I mean most meta programming

00:30:47,080 --> 00:30:50,230
is suspicious but like more so than

00:30:48,670 --> 00:30:52,150
usual there might be defining the method

00:30:50,230 --> 00:30:53,200
you're looking for when that fails you

00:30:52,150 --> 00:30:54,520
can always just fall back to searching

00:30:53,200 --> 00:30:56,200
the entire code base to see where this

00:30:54,520 --> 00:30:57,200
method is defined but sometimes even

00:30:56,200 --> 00:30:58,730
that doesn't work

00:30:57,200 --> 00:31:00,500
there's a method being called in your

00:30:58,730 --> 00:31:01,190
gem you just can't figure out where it's

00:31:00,500 --> 00:31:03,350
coming from

00:31:01,190 --> 00:31:05,420
one gadget that's bit me a few times is

00:31:03,350 --> 00:31:07,400
that gem that method doesn't exist in

00:31:05,420 --> 00:31:09,860
this gem it exists in a different gem if

00:31:07,400 --> 00:31:12,560
this gem is using so check the gem files

00:31:09,860 --> 00:31:15,170
of the gem that you're looking at an

00:31:12,560 --> 00:31:17,090
example of this is the r-spec gem which

00:31:15,170 --> 00:31:19,070
often people think of as a one gem but

00:31:17,090 --> 00:31:21,860
it's actually three the r-spec gem just

00:31:19,070 --> 00:31:23,600
requires our spec or our spec mocks and

00:31:21,860 --> 00:31:25,430
our spec expectations if I remember

00:31:23,600 --> 00:31:26,810
correctly and so any three of those

00:31:25,430 --> 00:31:28,190
could have actually defined a method on

00:31:26,810 --> 00:31:28,790
our spec that is the one you're looking

00:31:28,190 --> 00:31:30,290
for

00:31:28,790 --> 00:31:32,210
what's worse is that aren't there like

00:31:30,290 --> 00:31:35,570
five or six other gems and people often

00:31:32,210 --> 00:31:37,100
use with our spec that all could have

00:31:35,570 --> 00:31:38,660
defined the method you're looking for so

00:31:37,100 --> 00:31:39,620
sometimes the method isn't in the gem

00:31:38,660 --> 00:31:43,760
you're looking at it's in a different

00:31:39,620 --> 00:31:45,620
castle one time they're really bit me on

00:31:43,760 --> 00:31:47,420
this was the rack gem that I was diving

00:31:45,620 --> 00:31:49,340
into and if you're not familiar with

00:31:47,420 --> 00:31:51,620
rack it's a compatibility layer between

00:31:49,340 --> 00:31:53,930
rails or between Ruby web frameworks

00:31:51,620 --> 00:31:56,720
like rails or Sinatra and Ruby web

00:31:53,930 --> 00:32:00,230
servers like Puma unicorns and so on and

00:31:56,720 --> 00:32:02,120
so forth but I was just racked directly

00:32:00,230 --> 00:32:03,470
in some code and I was passing it at a

00:32:02,120 --> 00:32:05,330
value and I wanted to see what does

00:32:03,470 --> 00:32:06,620
Rackham do with this value I just had no

00:32:05,330 --> 00:32:08,900
idea and couldn't figure it out from the

00:32:06,620 --> 00:32:10,490
docs so I found the method inside the

00:32:08,900 --> 00:32:13,160
rack code base that took that value and

00:32:10,490 --> 00:32:14,480
I read the code and I just passed it on

00:32:13,160 --> 00:32:16,010
to some other method and that method

00:32:14,480 --> 00:32:17,330
just pass it on to some other method and

00:32:16,010 --> 00:32:18,890
some other method and so on and so forth

00:32:17,330 --> 00:32:20,690
until finally I find out the rack wasn't

00:32:18,890 --> 00:32:22,490
using this method at this value at all

00:32:20,690 --> 00:32:24,050
it was just taking it in one side and

00:32:22,490 --> 00:32:25,550
passing out the other the code I was

00:32:24,050 --> 00:32:27,680
looking for wasn't in this gem at all

00:32:25,550 --> 00:32:30,320
and so I had to go look into I think it

00:32:27,680 --> 00:32:32,480
was thin was the server I was using so

00:32:30,320 --> 00:32:33,620
sometimes if you can't find what you

00:32:32,480 --> 00:32:35,120
looking for we in the meat in the gem

00:32:33,620 --> 00:32:37,340
you're analyzing look for the gems of

00:32:35,120 --> 00:32:40,640
that but that am line that gem depends

00:32:37,340 --> 00:32:42,440
on okay let's back up back out a little

00:32:40,640 --> 00:32:43,910
bit this is the three-step process we

00:32:42,440 --> 00:32:46,040
looked at when you've just got a jam

00:32:43,910 --> 00:32:47,930
that you've cloned first look for the

00:32:46,040 --> 00:32:50,510
most important files in this gem take me

00:32:47,930 --> 00:32:52,550
to your leader next if you see something

00:32:50,510 --> 00:32:54,050
search something use text search to

00:32:52,550 --> 00:32:55,880
explore the gem and find things and

00:32:54,050 --> 00:32:58,400
trace down things you don't understand

00:32:55,880 --> 00:33:02,900
and finally traced through a single line

00:32:58,400 --> 00:33:03,980
of logic that is most related to the

00:33:02,900 --> 00:33:06,710
line of code that's giving you trouble

00:33:03,980 --> 00:33:08,870
or the exception that you're seeing but

00:33:06,710 --> 00:33:10,910
this whole process was never really the

00:33:08,870 --> 00:33:11,399
point of this talk I was hoping with

00:33:10,910 --> 00:33:13,409
this talk

00:33:11,399 --> 00:33:15,450
vaults that at least one engineer will

00:33:13,409 --> 00:33:16,979
as a result of this talk internalized

00:33:15,450 --> 00:33:19,559
the idea that this is something you can

00:33:16,979 --> 00:33:22,349
do you can dive into a third-party gem

00:33:19,559 --> 00:33:24,599
to solve your problems it might be scary

00:33:22,349 --> 00:33:26,279
at first but it doesn't have to be it's

00:33:24,599 --> 00:33:28,440
hard but maybe not as hard as you might

00:33:26,279 --> 00:33:30,359
think so the next time you see a bug

00:33:28,440 --> 00:33:32,729
disappeared on a rabbit hole be like

00:33:30,359 --> 00:33:34,499
Alice go after it dive down that rabbit

00:33:32,729 --> 00:33:38,279
hole after all what's the worst that

00:33:34,499 --> 00:33:40,320
could happen thank you

00:33:38,279 --> 00:33:41,460
my name is chemin cooked uh if you have

00:33:40,320 --> 00:33:43,139
any questions feel free to hit me up

00:33:41,460 --> 00:33:45,029
after the talk or at various places

00:33:43,139 --> 00:33:46,140
online and I hope you have a good rest

00:33:45,029 --> 00:33:52,919
of the conference

00:33:46,140 --> 00:33:52,919
[Applause]

00:33:53,330 --> 00:34:02,599

YouTube URL: https://www.youtube.com/watch?v=2YobJGkSSrU


