Title: RubyConf 2019 - Story telling with Git rebase by Elle Meredith
Publication date: 2019-12-03
Playlist: RubyConf 2019
Description: 
	RubyConf 2019 - Story telling with Git rebase by Elle Meredith

In a successful software development project, a key challenge is to manage complexity because projects get very complex very quickly even within small teams. Version control is the tool for communicating intent in our codebase over the life time of the project. Rebasing allows us to revise our development history before sharing it with the team.


Learn to use Git commit messages to keep track of the intent of your code changes to make it easier to make future changes. Learn how to make using feature branches less painful and more effective. Learn the mechanics of interactive rebasing, how to merge conflicts without losing precious code and how to auto-squash commits. Basically, stop fearing interactive rebasing.

#confreaks #rubyconf2019
Captions: 
	00:00:04,190 --> 00:00:10,269
[Music]

00:00:12,139 --> 00:00:21,080
okay I am good to start hi everyone I'm

00:00:17,070 --> 00:00:23,880
going to talk about git rebase in today

00:00:21,080 --> 00:00:26,010
as developers are keep telling it to

00:00:23,880 --> 00:00:28,350
manage complexity in our projects

00:00:26,010 --> 00:00:31,440
because projects can get very complex

00:00:28,350 --> 00:00:34,770
very quickly even in small project with

00:00:31,440 --> 00:00:36,719
small teams with rapidly changing code

00:00:34,770 --> 00:00:39,000
bases and a growing development team

00:00:36,719 --> 00:00:41,449
being able to communicate how and why

00:00:39,000 --> 00:00:43,409
our code evolves over time is crucial as

00:00:41,449 --> 00:00:46,109
developers we spend a lot of time

00:00:43,409 --> 00:00:48,239
considering names of variables methods

00:00:46,109 --> 00:00:50,699
and functions we consider our code

00:00:48,239 --> 00:00:52,469
architecture and design we write

00:00:50,699 --> 00:00:55,319
automated tests which act as

00:00:52,469 --> 00:00:57,620
documentation to our code all these help

00:00:55,319 --> 00:01:00,389
communicate the intent of our programs

00:00:57,620 --> 00:01:02,789
another tool to help communicate our

00:01:00,389 --> 00:01:06,900
intent is a version control system and

00:01:02,789 --> 00:01:08,850
in this talk I will be using git git has

00:01:06,900 --> 00:01:11,190
a commute history which is useful for

00:01:08,850 --> 00:01:13,680
documenting intent gif history is a

00:01:11,190 --> 00:01:16,560
living ever-changing searchable record

00:01:13,680 --> 00:01:19,259
that tells the story of how and why our

00:01:16,560 --> 00:01:21,420
code is the way it is the ability to

00:01:19,259 --> 00:01:23,579
document code effectively using git is

00:01:21,420 --> 00:01:26,789
just as important as being able to ship

00:01:23,579 --> 00:01:30,270
a feature write clean code or write

00:01:26,789 --> 00:01:33,000
readable tests so git history is kept

00:01:30,270 --> 00:01:36,630
forever unless you remove those commits

00:01:33,000 --> 00:01:38,609
those commits will stay around they are

00:01:36,630 --> 00:01:41,159
tied to the code change that they talk

00:01:38,609 --> 00:01:43,380
about when the code changes a new commit

00:01:41,159 --> 00:01:45,030
message will be written this is great

00:01:43,380 --> 00:01:47,670
because the documentation never gets

00:01:45,030 --> 00:01:50,399
stale it lasts exactly as long as the

00:01:47,670 --> 00:01:52,229
code it talks about commit messages also

00:01:50,399 --> 00:01:55,499
don't clutter up the code yet they are

00:01:52,229 --> 00:01:57,780
just a step away if we need them every

00:01:55,499 --> 00:02:01,100
commit message that we write is

00:01:57,780 --> 00:02:04,920
available to anyone on the team that

00:02:01,100 --> 00:02:07,679
clones the repo and they can be easily

00:02:04,920 --> 00:02:10,830
searchable in many ways for example we

00:02:07,679 --> 00:02:11,370
can do git log - - grab and give it a

00:02:10,830 --> 00:02:13,620
regex

00:02:11,370 --> 00:02:15,600
so we can search all the contacts of the

00:02:13,620 --> 00:02:17,610
commit messages we can search all the

00:02:15,600 --> 00:02:20,860
codes changes we can search by files

00:02:17,610 --> 00:02:24,940
touched by author by date

00:02:20,860 --> 00:02:26,980
but before I go to talk about three bass

00:02:24,940 --> 00:02:28,900
and I'd like to introduce three good

00:02:26,980 --> 00:02:32,620
basic practices when using gate before

00:02:28,900 --> 00:02:35,290
discussing merging and rebasing the

00:02:32,620 --> 00:02:37,300
first principle is making small commits

00:02:35,290 --> 00:02:39,640
so first and firstly and most

00:02:37,300 --> 00:02:41,920
importantly make small automatic commits

00:02:39,640 --> 00:02:45,280
make your commits about a single change

00:02:41,920 --> 00:02:46,810
to your codebase to illustrate this

00:02:45,280 --> 00:02:49,300
here's an example of a committee that

00:02:46,810 --> 00:02:50,770
does way too much there are multiple

00:02:49,300 --> 00:02:53,560
issues addressed in this one commit

00:02:50,770 --> 00:02:56,860
there is no way to revert revert just

00:02:53,560 --> 00:02:58,150
one change separately it would have been

00:02:56,860 --> 00:03:02,440
better if this committee would have been

00:02:58,150 --> 00:03:05,200
split into separate comments it's worth

00:03:02,440 --> 00:03:07,180
thinking about about smoker mates as a

00:03:05,200 --> 00:03:09,340
minimum viable commit what's the

00:03:07,180 --> 00:03:11,980
smallest useful change that you can make

00:03:09,340 --> 00:03:14,350
to your codebase another rule of thumb

00:03:11,980 --> 00:03:17,530
is to avoid the need in and in your

00:03:14,350 --> 00:03:19,720
commit messages if you've done a and B

00:03:17,530 --> 00:03:23,770
then maybe this should be two separate

00:03:19,720 --> 00:03:26,050
changes in two different comments if you

00:03:23,770 --> 00:03:28,450
have made many changes but have not that

00:03:26,050 --> 00:03:31,050
have not been staged yet you can use the

00:03:28,450 --> 00:03:34,959
- P flag when adding files to the index

00:03:31,050 --> 00:03:37,570
the - B is for patch it interactively

00:03:34,959 --> 00:03:39,640
chooses hunks of patch between the index

00:03:37,570 --> 00:03:41,739
and the work tree and add them to the

00:03:39,640 --> 00:03:43,180
index this gives the user a chance to

00:03:41,739 --> 00:03:45,489
review the difference between adding

00:03:43,180 --> 00:03:49,090
modified content to the index we're

00:03:45,489 --> 00:03:51,520
going to use this shortly certain

00:03:49,090 --> 00:03:54,070
principal right good commit messages

00:03:51,520 --> 00:03:56,110
another and although your code should be

00:03:54,070 --> 00:03:58,020
self documenting it doesn't tell the

00:03:56,110 --> 00:04:00,640
story of why the code is the way it is

00:03:58,020 --> 00:04:02,709
or how it became to be since we've

00:04:00,640 --> 00:04:05,530
already breaking the changes down into

00:04:02,709 --> 00:04:07,030
small purposeful commits it means that

00:04:05,530 --> 00:04:09,459
we should have a good idea of the value

00:04:07,030 --> 00:04:11,050
of each one some people write knowing

00:04:09,459 --> 00:04:12,910
messages that are record of what

00:04:11,050 --> 00:04:16,090
actually happened but that we can see in

00:04:12,910 --> 00:04:18,519
the code better way is to tell the story

00:04:16,090 --> 00:04:22,510
of how the project evolved we want to be

00:04:18,519 --> 00:04:25,780
in the second camp a good commit history

00:04:22,510 --> 00:04:27,700
gives us clarity of intent it gives us

00:04:25,780 --> 00:04:31,810
clarity of thought and the ability to

00:04:27,700 --> 00:04:33,340
reason about our code I find that it

00:04:31,810 --> 00:04:34,810
helps to look at the commits

00:04:33,340 --> 00:04:37,360
from the perspective of another

00:04:34,810 --> 00:04:39,850
developer or even me six months from now

00:04:37,360 --> 00:04:42,250
what questions might be asking when

00:04:39,850 --> 00:04:46,120
looking at our code changes what might

00:04:42,250 --> 00:04:48,760
not be immediately obvious doesn't not

00:04:46,120 --> 00:04:50,350
so ideal ones so let's have a look at

00:04:48,760 --> 00:04:53,699
some examples of backcombing messages

00:04:50,350 --> 00:04:53,699
there are so many out there

00:05:17,460 --> 00:05:22,629
so let's have a look at some better ones

00:05:20,499 --> 00:05:24,159
always welcoming messages is if you're

00:05:22,629 --> 00:05:25,360
explaining the change to a colleague

00:05:24,159 --> 00:05:28,270
sitting next to you

00:05:25,360 --> 00:05:30,490
who has no idea what's going on provide

00:05:28,270 --> 00:05:33,279
as much context as possible and as much

00:05:30,490 --> 00:05:36,039
useful detail as you can try and answer

00:05:33,279 --> 00:05:38,499
those five questions why is this change

00:05:36,039 --> 00:05:41,379
necessary how does it address the issue

00:05:38,499 --> 00:05:45,039
what side effects does this change have

00:05:41,379 --> 00:05:47,050
where other solutions considered include

00:05:45,039 --> 00:05:51,009
a reference to a discussion a resource

00:05:47,050 --> 00:05:53,800
or a ticket so for example here's a

00:05:51,009 --> 00:05:55,959
suggested template we have a short

00:05:53,800 --> 00:05:58,539
one-line title so when reviewing when

00:05:55,959 --> 00:06:01,209
viewing our comets in a list format it's

00:05:58,539 --> 00:06:02,949
a lot friendlier view a good con mate

00:06:01,209 --> 00:06:07,180
subject is written in the active

00:06:02,949 --> 00:06:09,519
presence and as a command then we have

00:06:07,180 --> 00:06:12,039
an explanation of why the change is

00:06:09,519 --> 00:06:13,719
being made if people want to know how

00:06:12,039 --> 00:06:15,369
they can change this in the future they

00:06:13,719 --> 00:06:17,379
need to know what the intention of the

00:06:15,369 --> 00:06:18,939
change was the description can be

00:06:17,379 --> 00:06:21,189
informal it doesn't need to be written

00:06:18,939 --> 00:06:22,719
in a present tense command in fact it's

00:06:21,189 --> 00:06:25,209
usually better written informally as a

00:06:22,719 --> 00:06:27,879
message to your team describe the why

00:06:25,209 --> 00:06:30,999
why are we doing this and lastly when

00:06:27,879 --> 00:06:33,069
you make the commit message we know more

00:06:30,999 --> 00:06:35,379
about while we're making this change and

00:06:33,069 --> 00:06:38,860
how we are fixing or improving our code

00:06:35,379 --> 00:06:41,709
now more than anyone else will ever do

00:06:38,860 --> 00:06:43,449
so it can be useful to outline some of

00:06:41,709 --> 00:06:47,139
the context and alternative approaches

00:06:43,449 --> 00:06:51,149
that you considered and lastly include a

00:06:47,139 --> 00:06:54,490
link to some kind of a tracking system

00:06:51,149 --> 00:06:56,499
an example of a commit message that I

00:06:54,490 --> 00:06:58,959
did in a recent project that I worked on

00:06:56,499 --> 00:07:00,639
so you can see the one-line title you

00:06:58,959 --> 00:07:02,469
can see a link to the relevant Trello

00:07:00,639 --> 00:07:06,579
card and you can see an explanation of

00:07:02,469 --> 00:07:09,159
what was done and why if you have a

00:07:06,579 --> 00:07:11,409
writer's book and you don't know what

00:07:09,159 --> 00:07:14,529
words of verbs to use here's the top 10

00:07:11,409 --> 00:07:20,229
top 10 verbs for my current project plus

00:07:14,529 --> 00:07:22,899
a few some other ones suggestions okay

00:07:20,229 --> 00:07:24,579
principle number three is work in small

00:07:22,899 --> 00:07:28,180
feature branches and keep them once

00:07:24,579 --> 00:07:30,370
again as single purpose branches the

00:07:28,180 --> 00:07:32,050
core idea behind the feature branch

00:07:30,370 --> 00:07:34,000
workflow is that all future development

00:07:32,050 --> 00:07:35,980
should take place in a dedicated branch

00:07:34,000 --> 00:07:38,050
instead of the master branch this

00:07:35,980 --> 00:07:39,460
encapsulation makes it easy for multiple

00:07:38,050 --> 00:07:41,229
developers to work on a particular

00:07:39,460 --> 00:07:43,510
feature without disturbing the main

00:07:41,229 --> 00:07:45,220
codebase it also means that the master

00:07:43,510 --> 00:07:47,290
branch will never contain broken code

00:07:45,220 --> 00:07:50,500
which is a huge advantage for continuous

00:07:47,290 --> 00:07:52,360
integration environment working in

00:07:50,500 --> 00:07:54,610
feature branches makes it possible to

00:07:52,360 --> 00:07:56,199
leverage pull requests which are wait

00:07:54,610 --> 00:07:58,449
initiate discussions around the code

00:07:56,199 --> 00:08:00,070
they give other developers the

00:07:58,449 --> 00:08:02,260
opportunity to sign off on a feature

00:08:00,070 --> 00:08:04,840
before it gets integrated into the

00:08:02,260 --> 00:08:06,700
official project or if we get stuck in

00:08:04,840 --> 00:08:09,580
the middle of a feature we can open a

00:08:06,700 --> 00:08:11,620
pull request asking our team mates for

00:08:09,580 --> 00:08:14,500
suggestions the point is that pull

00:08:11,620 --> 00:08:16,810
request makes it incredibly easy for the

00:08:14,500 --> 00:08:18,460
team to comment on each other's work it

00:08:16,810 --> 00:08:20,950
also makes it easier for everybody to

00:08:18,460 --> 00:08:22,539
know what actually happens with other

00:08:20,950 --> 00:08:25,810
members of the team and what they were

00:08:22,539 --> 00:08:28,330
working on a suggested workflow will

00:08:25,810 --> 00:08:30,070
start with creating a new branch and as

00:08:28,330 --> 00:08:34,150
you can see when I create a new branch I

00:08:30,070 --> 00:08:37,419
start with my initials at the beginning

00:08:34,150 --> 00:08:41,039
and then what I'm working on then I'll

00:08:37,419 --> 00:08:44,290
work on the bridge I make some changes I

00:08:41,039 --> 00:08:49,510
check the status add some files and then

00:08:44,290 --> 00:08:52,360
I commit I push the changes to my the

00:08:49,510 --> 00:08:53,980
branch to origin so you can do it with

00:08:52,360 --> 00:08:55,720
the first one I usually use the second

00:08:53,980 --> 00:08:57,370
one which is a shot a nice shorthand I

00:08:55,720 --> 00:09:00,459
just do a git push origin head and it

00:08:57,370 --> 00:09:02,230
creates a new branch for me up pushes

00:09:00,459 --> 00:09:05,910
the existing branch if I already have

00:09:02,230 --> 00:09:08,250
one then I open a PR for feedback I

00:09:05,910 --> 00:09:11,709
implement changes based on the feedback

00:09:08,250 --> 00:09:13,959
then a rebase master on my current

00:09:11,709 --> 00:09:16,959
branch interactively and push updated

00:09:13,959 --> 00:09:20,400
branch back up you will notice that when

00:09:16,959 --> 00:09:25,480
I push them back up I need to add the I

00:09:20,400 --> 00:09:27,700
need to add the flag - F which is false

00:09:25,480 --> 00:09:29,680
push since we rebase the current branch

00:09:27,700 --> 00:09:32,040
we have rewritten the history therefore

00:09:29,680 --> 00:09:34,360
we have to force push back to Origin

00:09:32,040 --> 00:09:37,150
first pushing should only be done on

00:09:34,360 --> 00:09:39,370
future branches so not to rewrite the

00:09:37,150 --> 00:09:42,459
history on masta because if you do other

00:09:39,370 --> 00:09:43,900
people will have trouble grabbing your

00:09:42,459 --> 00:09:48,220
changes again

00:09:43,900 --> 00:09:50,260
and then lastly I merge into master with

00:09:48,220 --> 00:09:53,170
fast-forward so I get to check out

00:09:50,260 --> 00:09:55,990
master and I get merged with the - -

00:09:53,170 --> 00:09:57,910
fast-forward only and my branch and

00:09:55,990 --> 00:10:00,580
we're gonna talk about why in a second

00:09:57,910 --> 00:10:02,529
and I think the last thing that we do is

00:10:00,580 --> 00:10:05,890
we clean up the branches git push origin

00:10:02,529 --> 00:10:07,600
- my feature my branch name will delete

00:10:05,890 --> 00:10:11,290
the branch from origin from the remote

00:10:07,600 --> 00:10:13,630
and then each branch - Dee and the

00:10:11,290 --> 00:10:17,380
feature and the branch name will delete

00:10:13,630 --> 00:10:21,100
it locally if it hasn't been if all the

00:10:17,380 --> 00:10:22,750
changes are not currently in master and

00:10:21,100 --> 00:10:29,070
you still want to delete the branch you

00:10:22,750 --> 00:10:31,630
will need to use - capital D instead

00:10:29,070 --> 00:10:33,610
merging versus rebasing so get merge and

00:10:31,630 --> 00:10:35,980
give rebate offer the same service they

00:10:33,610 --> 00:10:38,230
incorporate commits from one gate branch

00:10:35,980 --> 00:10:41,710
into another the key distinctions lies

00:10:38,230 --> 00:10:44,740
in how the result is achieved when by

00:10:41,710 --> 00:10:47,830
default the merge command is set to - -

00:10:44,740 --> 00:10:50,110
no first fold and what it does is if we

00:10:47,830 --> 00:10:52,780
have changes on a branch it creates and

00:10:50,110 --> 00:10:55,089
you commit a merge commit in the future

00:10:52,780 --> 00:10:57,400
branch that ties together the histories

00:10:55,089 --> 00:10:58,930
of the two branches together giving us a

00:10:57,400 --> 00:11:02,610
branch structure that looks something

00:10:58,930 --> 00:11:06,790
like that in a project that I worked on

00:11:02,610 --> 00:11:08,350
previously master was very active and

00:11:06,790 --> 00:11:09,040
merging control owed the local history

00:11:08,350 --> 00:11:11,650
quite a bit

00:11:09,040 --> 00:11:13,420
often merging changes into master can

00:11:11,650 --> 00:11:15,820
result in our history becoming tangled

00:11:13,420 --> 00:11:17,710
and difficult to read this becomes even

00:11:15,820 --> 00:11:19,750
more of an issue when you have several

00:11:17,710 --> 00:11:22,060
future branches been developed in

00:11:19,750 --> 00:11:23,980
parallel for collaborative workflow

00:11:22,060 --> 00:11:25,660
where team members read the logs for

00:11:23,980 --> 00:11:26,410
insight and context readability is

00:11:25,660 --> 00:11:28,720
important

00:11:26,410 --> 00:11:30,459
whereas merge commit scan clutter up our

00:11:28,720 --> 00:11:32,170
logs and make it much more difficult to

00:11:30,459 --> 00:11:34,959
understand the flow of the project

00:11:32,170 --> 00:11:39,670
history this is from an actual project

00:11:34,959 --> 00:11:41,589
I joined rebasing interactive rebasing

00:11:39,670 --> 00:11:43,240
gives us the opportunity to alter

00:11:41,589 --> 00:11:45,310
commits as they are moved to the new

00:11:43,240 --> 00:11:47,830
branch this is even more powerful than

00:11:45,310 --> 00:11:49,900
an automated rebase since it offers

00:11:47,830 --> 00:11:52,630
complete control over the branch to

00:11:49,900 --> 00:11:54,339
commit history typically this is used to

00:11:52,630 --> 00:11:57,770
clean up messy history before merging a

00:11:54,339 --> 00:12:00,440
feature branch into master so too

00:11:57,770 --> 00:12:04,880
rebase interactively we will need - I

00:12:00,440 --> 00:12:06,830
for interactive and while the rebase we

00:12:04,880 --> 00:12:09,350
will have an options to you if we have

00:12:06,830 --> 00:12:10,190
any conflict to use either continue or

00:12:09,350 --> 00:12:13,160
to abort

00:12:10,190 --> 00:12:18,460
so let's play a bit with that for a

00:12:13,160 --> 00:12:31,120
second if I can

00:12:18,460 --> 00:12:34,720
bear and I want that's a lot bigger is

00:12:31,120 --> 00:12:40,950
that is that okay cool

00:12:34,720 --> 00:12:43,240
so let's start with actually and the

00:12:40,950 --> 00:12:45,490
let's create a directory co-working

00:12:43,240 --> 00:12:46,930
we're gonna change into that and we're

00:12:45,490 --> 00:12:50,320
gonna create a couple of branches but

00:12:46,930 --> 00:12:59,230
first of all let's start by creating a

00:12:50,320 --> 00:13:03,970
file and let's do so if you look at a

00:12:59,230 --> 00:13:05,760
file yeah if you look at a file we'll

00:13:03,970 --> 00:13:08,589
see that we have some text in it and

00:13:05,760 --> 00:13:14,890
then we're gonna initialize

00:13:08,589 --> 00:13:23,290
git repo we're going to add a file and

00:13:14,890 --> 00:13:26,860
we're gonna do and this is how we start

00:13:23,290 --> 00:13:29,980
with and you get repo so let's start

00:13:26,860 --> 00:13:32,080
with creating and ye branch so git

00:13:29,980 --> 00:13:35,470
checkout - B so it will take us to the

00:13:32,080 --> 00:13:38,820
new branch and we're gonna do it and for

00:13:35,470 --> 00:13:42,279
my initials and we're gonna do fix

00:13:38,820 --> 00:13:45,180
conference that's going to open our

00:13:42,279 --> 00:13:47,650
index and we're going to make a change

00:13:45,180 --> 00:13:56,620
and we're going to come here and which

00:13:47,650 --> 00:13:59,140
and change that to a title case and save

00:13:56,620 --> 00:14:02,110
that if you do get stutters we had one

00:13:59,140 --> 00:14:07,320
file that's changed if we do get Dave we

00:14:02,110 --> 00:14:11,459
will see that we changed the title case

00:14:07,320 --> 00:14:14,850
so now we're going to add that file and

00:14:11,459 --> 00:14:14,850
we're going to do

00:14:20,140 --> 00:14:28,100
change the title case then I want to

00:14:24,770 --> 00:14:34,640
make another change for now and really I

00:14:28,100 --> 00:14:37,190
want to make these to be a heading so

00:14:34,640 --> 00:14:39,350
again if you look at it if we have one

00:14:37,190 --> 00:14:42,460
change and you're gonna do you're gonna

00:14:39,350 --> 00:14:52,600
add that file and we're gonna do you get

00:14:42,460 --> 00:15:04,970
commit - I'm heading are we ok so far

00:14:52,600 --> 00:15:08,030
cool if we check out master and we do we

00:15:04,970 --> 00:15:10,040
check if we check branches we see that

00:15:08,030 --> 00:15:11,660
we're currently back on master let's

00:15:10,040 --> 00:15:14,990
create another branch for the sake of

00:15:11,660 --> 00:15:17,990
this exercise so we're gonna do it check

00:15:14,990 --> 00:15:21,020
out - P again my initials and in this

00:15:17,990 --> 00:15:25,160
case we forgot that this is 2019 so

00:15:21,020 --> 00:15:28,490
let's do add here so if we look at the

00:15:25,160 --> 00:15:31,670
branches now we are on the third branch

00:15:28,490 --> 00:15:40,910
that we are on let's open the file again

00:15:31,670 --> 00:15:46,540
and let's add 2019 git diff we have that

00:15:40,910 --> 00:15:46,540
so let's see get at oh good

00:15:49,670 --> 00:15:55,910
conference yeah and let's do the same as

00:15:53,600 --> 00:15:57,680
we've done before in the other branch so

00:15:55,910 --> 00:16:05,300
let's make it a heading again so let's

00:15:57,680 --> 00:16:06,710
open that and go to the beginning and so

00:16:05,300 --> 00:16:11,840
we're gonna have some conflicts we're

00:16:06,710 --> 00:16:15,070
going to see in a second so if we have

00:16:11,840 --> 00:16:20,950
that change we're going to add that file

00:16:15,070 --> 00:16:20,950
we're going to commit that resign

00:16:26,820 --> 00:16:40,660
awesome so if we look at history we have

00:16:32,110 --> 00:16:50,250
a couple of comets and yeah and let's go

00:16:40,660 --> 00:16:56,890
back to you master now master I want to

00:16:50,250 --> 00:16:59,830
usually with merging the north the

00:16:56,890 --> 00:17:01,990
nofa's fold is the default but in my

00:16:59,830 --> 00:17:04,929
case I change my default so if you look

00:17:01,990 --> 00:17:10,660
at my config and we're gonna grab for

00:17:04,929 --> 00:17:16,720
merge now sorry

00:17:10,660 --> 00:17:20,740
get config - - at least if you're gonna

00:17:16,720 --> 00:17:23,290
grab for merge you will see that mine is

00:17:20,740 --> 00:17:25,179
set automatically - fast forward only so

00:17:23,290 --> 00:17:28,089
I don't have to define that every time I

00:17:25,179 --> 00:17:30,570
merge my branches so to merge one of the

00:17:28,089 --> 00:17:33,960
branches in I will need to do

00:17:30,570 --> 00:17:38,620
specifically define that I'll do you get

00:17:33,960 --> 00:17:41,260
merge no force word and I'll do it so

00:17:38,620 --> 00:17:44,559
the second one that we have so ended the

00:17:41,260 --> 00:17:46,900
year and then it opens up an editor for

00:17:44,559 --> 00:17:48,670
me - editor and merge commit message and

00:17:46,900 --> 00:17:50,650
in this case I can leave that as is and

00:17:48,670 --> 00:17:52,600
I'm going to save that and it created

00:17:50,650 --> 00:17:55,960
and it merged that wrench into my

00:17:52,600 --> 00:17:58,179
history so if we look now into master we

00:17:55,960 --> 00:18:03,700
can see those changes plus my merge

00:17:58,179 --> 00:18:07,090
commit message I if we do get log with -

00:18:03,700 --> 00:18:08,650
- one line we get just a one-line of all

00:18:07,090 --> 00:18:12,309
the changes that we have so it's a bit

00:18:08,650 --> 00:18:15,850
more friendly to read but I have an

00:18:12,309 --> 00:18:18,420
alias that makes it a bit nicer to have

00:18:15,850 --> 00:18:22,990
a look at things which are called law

00:18:18,420 --> 00:18:26,020
and you can see that my branch actually

00:18:22,990 --> 00:18:30,910
diverge for master and if you have a lot

00:18:26,020 --> 00:18:33,370
of that you will have quite a few quite

00:18:30,910 --> 00:18:35,260
a few of those in the view so I wanna I

00:18:33,370 --> 00:18:36,990
wanna have a look later what happens

00:18:35,260 --> 00:18:41,440
when we do rebasing

00:18:36,990 --> 00:18:47,010
so in this case if I try if let's go to

00:18:41,440 --> 00:18:55,300
the other branch that we have which was

00:18:47,010 --> 00:19:00,610
fixed the conference and actually before

00:18:55,300 --> 00:19:03,660
that let's go back go back to master if

00:19:00,610 --> 00:19:11,380
I try and do get merge now with my other

00:19:03,660 --> 00:19:14,980
with my other branch so no password and

00:19:11,380 --> 00:19:16,210
which was fixed we will get a conflict

00:19:14,980 --> 00:19:18,220
that we can't actually merge because

00:19:16,210 --> 00:19:20,650
some changes have been on top of another

00:19:18,220 --> 00:19:22,510
so we really need to rebase the other

00:19:20,650 --> 00:19:25,510
branch muster on the other branch before

00:19:22,510 --> 00:19:27,910
we can put it back into master so if you

00:19:25,510 --> 00:19:40,320
look at the gate status I have some

00:19:27,910 --> 00:19:45,850
things and I want to get reset get reset

00:19:40,320 --> 00:19:49,360
yep get status it's now just ready ready

00:19:45,850 --> 00:19:59,290
to be on stage into committing do you

00:19:49,360 --> 00:19:59,650
get reset get sorry and we are back to

00:19:59,290 --> 00:20:05,140
normal

00:19:59,650 --> 00:20:06,670
so get status we are still have conflict

00:20:05,140 --> 00:20:08,110
all the conflicts are fixed but you're

00:20:06,670 --> 00:20:10,060
still merging I don't care about that

00:20:08,110 --> 00:20:13,720
for a second I want to take out my other

00:20:10,060 --> 00:20:15,460
branch so it was fixed conference and

00:20:13,720 --> 00:20:19,990
I'm gonna re base my master on top of

00:20:15,460 --> 00:20:22,360
that so what I do that I do git rebase

00:20:19,990 --> 00:20:26,500
I'm gonna do interactively and I'm gonna

00:20:22,360 --> 00:20:29,140
grab master and when I do that it opens

00:20:26,500 --> 00:20:31,630
up a window to let me know what I want

00:20:29,140 --> 00:20:33,970
to do and as you can see those are my

00:20:31,630 --> 00:20:36,870
two commits and I can reorder them in a

00:20:33,970 --> 00:20:40,540
different order and they will appear

00:20:36,870 --> 00:20:42,160
differently sorry do this and then the

00:20:40,540 --> 00:20:45,190
history will have a different order of

00:20:42,160 --> 00:20:47,230
micro meets but in this case I don't

00:20:45,190 --> 00:20:49,120
care about that I want to talk about the

00:20:47,230 --> 00:20:50,480
other options that you have so as you

00:20:49,120 --> 00:20:52,070
can see you can pick

00:20:50,480 --> 00:20:54,200
so if the committee is in the list it

00:20:52,070 --> 00:20:54,770
will be it will be committed to you

00:20:54,200 --> 00:20:58,210
master

00:20:54,770 --> 00:21:01,070
I can reword the commit message I can

00:20:58,210 --> 00:21:04,040
use the comet but edit the actual code

00:21:01,070 --> 00:21:05,900
along the way I can squash a comet but

00:21:04,040 --> 00:21:09,170
that means taking two comets together

00:21:05,900 --> 00:21:10,820
and squash them together but keep the

00:21:09,170 --> 00:21:13,520
two messages so I can work out the

00:21:10,820 --> 00:21:15,260
message as I'm doing that fix up is the

00:21:13,520 --> 00:21:18,130
same is merging to commit messages

00:21:15,260 --> 00:21:21,050
together but actually discarding this

00:21:18,130 --> 00:21:23,150
the Comets log message along the way the

00:21:21,050 --> 00:21:25,580
second one I don't think of every year's

00:21:23,150 --> 00:21:29,900
exact drop is the same as just removing

00:21:25,580 --> 00:21:33,200
the line from from that list so if I do

00:21:29,900 --> 00:21:35,570
that that commit messages that changes

00:21:33,200 --> 00:21:36,830
are gone they're not going to exist and

00:21:35,570 --> 00:21:39,190
I don't think I've used any of the other

00:21:36,830 --> 00:21:42,380
one so we're happy with that that's fine

00:21:39,190 --> 00:21:45,440
so we're going to save those changes

00:21:42,380 --> 00:21:47,510
that we want and we get that we have we

00:21:45,440 --> 00:21:49,130
cannot apply this commit message they

00:21:47,510 --> 00:21:54,800
change the taro case because we have

00:21:49,130 --> 00:21:56,690
some changes so let's have a look at git

00:21:54,800 --> 00:21:59,120
status and we have that one that's both

00:21:56,690 --> 00:22:04,820
have been modified in both head and in

00:21:59,120 --> 00:22:08,090
our branch so we're going to and if we

00:22:04,820 --> 00:22:10,610
look at Gator death we will see that one

00:22:08,090 --> 00:22:13,820
of them has the capital C and one of

00:22:10,610 --> 00:22:21,260
them has a 2019 so we want to merge them

00:22:13,820 --> 00:22:23,720
together so we're gonna do index and

00:22:21,260 --> 00:22:25,580
that shows me what's in head so this is

00:22:23,720 --> 00:22:30,230
what's on my master and I can remove

00:22:25,580 --> 00:22:33,290
that and I can remove that and in this

00:22:30,230 --> 00:22:35,840
case I really want to make the other one

00:22:33,290 --> 00:22:37,610
a capital so I'm just going to come here

00:22:35,840 --> 00:22:39,680
and manually do the change sometimes you

00:22:37,610 --> 00:22:43,070
don't need to do that but in this case

00:22:39,680 --> 00:22:44,930
that's it this is my change I no longer

00:22:43,070 --> 00:22:48,650
have a conflict so I can save that file

00:22:44,930 --> 00:22:50,870
and now but if you look at your git

00:22:48,650 --> 00:22:53,900
status it's still waiting to be merged

00:22:50,870 --> 00:22:57,920
so I still need to do at that

00:22:53,900 --> 00:23:02,630
and once I edit that file I can do gate

00:22:57,920 --> 00:23:06,200
rebase - - continue this

00:23:02,630 --> 00:23:09,800
sky I get my second one changed to a

00:23:06,200 --> 00:23:11,840
turtle case and I'm fine I can continue

00:23:09,800 --> 00:23:14,800
with that but now I have a conflict

00:23:11,840 --> 00:23:18,290
about the heading so let's look at what

00:23:14,800 --> 00:23:20,360
what what's the change that we get so we

00:23:18,290 --> 00:23:22,100
see that in both cases really we want

00:23:20,360 --> 00:23:22,730
the top one now I don't care about the

00:23:22,100 --> 00:23:33,680
second one

00:23:22,730 --> 00:23:45,230
so let's open index again let's open

00:23:33,680 --> 00:23:47,960
index again and go up and remove that

00:23:45,230 --> 00:23:51,250
and really I want to just keep that in

00:23:47,960 --> 00:23:53,630
the file save that and that's done I

00:23:51,250 --> 00:23:55,580
still need to do the same thing so if I

00:23:53,630 --> 00:23:58,190
look at the gate status I have a file

00:23:55,580 --> 00:24:01,550
that's ready to be committed so I need

00:23:58,190 --> 00:24:07,310
to add that and then I could do git

00:24:01,550 --> 00:24:13,100
rebase continue and if I look at my gate

00:24:07,310 --> 00:24:15,050
log I have my comic history now if we

00:24:13,100 --> 00:24:19,310
look like we did before with the one

00:24:15,050 --> 00:24:21,560
line or my alias shortcut you will see

00:24:19,310 --> 00:24:24,500
that one I don't have my pesky

00:24:21,560 --> 00:24:30,200
commitment merge commit message and two

00:24:24,500 --> 00:24:32,780
I also don't have that branching out for

00:24:30,200 --> 00:24:35,570
master it's just like a linear history

00:24:32,780 --> 00:24:36,430
of my comic messages does that make

00:24:35,570 --> 00:24:45,850
sense so far

00:24:36,430 --> 00:24:45,850
cool let's go back to here for a second

00:24:50,190 --> 00:24:56,530
that was my codeine so we talked about

00:24:53,770 --> 00:24:59,140
all those options of a most of those

00:24:56,530 --> 00:25:00,970
options over here that gives you give

00:24:59,140 --> 00:25:02,710
rebates I allows you to rewrite commit

00:25:00,970 --> 00:25:04,480
messages quickly remove commit which is

00:25:02,710 --> 00:25:06,250
snuck in to a different branch combine

00:25:04,480 --> 00:25:08,220
commits by squashing several comments

00:25:06,250 --> 00:25:11,440
into one and then reorder them as well

00:25:08,220 --> 00:25:14,740
what you get you get a history that

00:25:11,440 --> 00:25:16,150
looks like that interactive rebase

00:25:14,740 --> 00:25:18,160
allows us to revise the development

00:25:16,150 --> 00:25:19,990
history before sharing by revising the

00:25:18,160 --> 00:25:22,230
history we can get a linear commit

00:25:19,990 --> 00:25:24,670
history that better tells the story of

00:25:22,230 --> 00:25:26,650
about what we intended to do instead of

00:25:24,670 --> 00:25:29,860
a blow-by-blow account of all the

00:25:26,650 --> 00:25:31,840
missteps that we took along the way now

00:25:29,860 --> 00:25:34,450
talking about rebates and I really want

00:25:31,840 --> 00:25:35,800
to talk about Auto squash and fix ups so

00:25:34,450 --> 00:25:37,600
it's fairly common for a feature branch

00:25:35,800 --> 00:25:41,020
to be squashed down to somewhere between

00:25:37,600 --> 00:25:43,570
one to four commits before it's been

00:25:41,020 --> 00:25:46,060
merged following this practice there are

00:25:43,570 --> 00:25:47,980
a few get features that can make our

00:25:46,060 --> 00:25:50,320
interactive rebase quicker and easier

00:25:47,980 --> 00:25:52,600
basically using fixed up commits and get

00:25:50,320 --> 00:25:56,460
in interactive rebase to auto squash

00:25:52,600 --> 00:26:03,010
them for us so let's do one more branch

00:25:56,460 --> 00:26:07,150
before we finish up with the talk so

00:26:03,010 --> 00:26:09,430
let's go back to project and in this

00:26:07,150 --> 00:26:17,380
time we're gonna create one last branch

00:26:09,430 --> 00:26:19,270
oh sorry

00:26:17,380 --> 00:26:21,760
really based here we did not merge it

00:26:19,270 --> 00:26:27,550
back to master so let's do that and so

00:26:21,760 --> 00:26:29,560
let's get checkout master and you can

00:26:27,550 --> 00:26:31,210
see that we don't have the history that

00:26:29,560 --> 00:26:34,770
we have in our branch so all we need to

00:26:31,210 --> 00:26:34,770
do is we need to do git merge

00:26:36,510 --> 00:26:44,020
fast-forward only and give it the branch

00:26:40,900 --> 00:26:45,370
name and that's it and we have the exact

00:26:44,020 --> 00:26:49,240
same histories that we have in the

00:26:45,370 --> 00:26:53,910
branch cool so let's start with one last

00:26:49,240 --> 00:26:53,910
branch so let's do git checkout

00:26:55,030 --> 00:27:02,770
add some copy to outside its upper index

00:26:58,960 --> 00:27:15,610
and in this case let's start by adding

00:27:02,770 --> 00:27:20,550
some copy so if you look at get if we

00:27:15,610 --> 00:27:31,090
added some text let's add this file and

00:27:20,550 --> 00:27:38,860
commit it by saying let's also add some

00:27:31,090 --> 00:27:47,970
navigation and let's go up and what do

00:27:38,860 --> 00:27:53,820
we have we have a program we have a

00:27:47,970 --> 00:27:57,970
schedule we have speakers and that's the

00:27:53,820 --> 00:28:01,390
venue we're happy with our navigation so

00:27:57,970 --> 00:28:10,300
far so if we look this is I change so

00:28:01,390 --> 00:28:13,900
let's add that but now we realize that

00:28:10,300 --> 00:28:17,650
one we forgot the we forgot the home

00:28:13,900 --> 00:28:19,180
link and two we also have if you look we

00:28:17,650 --> 00:28:20,650
have an extra line in the end of the

00:28:19,180 --> 00:28:23,800
file and we don't like that so let's

00:28:20,650 --> 00:28:26,200
change that so if we open the index and

00:28:23,800 --> 00:28:29,230
we go to the bottom and remove the last

00:28:26,200 --> 00:28:33,610
line and then we'll go up to here and

00:28:29,230 --> 00:28:37,030
let's add a home link so now if I look

00:28:33,610 --> 00:28:38,680
at my diff I have two changes but they

00:28:37,030 --> 00:28:43,630
are unrelated to one another so let's

00:28:38,680 --> 00:28:47,830
add them interactively so let's do gate

00:28:43,630 --> 00:28:49,180
at - P and it shows me both and it you

00:28:47,830 --> 00:28:52,300
should if you see on the bottom I have

00:28:49,180 --> 00:28:56,380
options to staging this hunk and it

00:28:52,300 --> 00:28:58,660
gives me yes no quit oh not your DS but

00:28:56,380 --> 00:29:00,460
I usually use s forceplate so let's do

00:28:58,660 --> 00:29:02,740
as to split them into two different

00:29:00,460 --> 00:29:04,660
comments so I'll grab the first one and

00:29:02,740 --> 00:29:06,970
I'll say yes I want that I'll say yes

00:29:04,660 --> 00:29:08,260
and then the next one and I'll say no I

00:29:06,970 --> 00:29:12,400
don't want this one

00:29:08,260 --> 00:29:14,830
so now if I look at my gate status I

00:29:12,400 --> 00:29:17,919
have a change that is a stage to be

00:29:14,830 --> 00:29:21,970
committed and one that isn't so and if I

00:29:17,919 --> 00:29:24,250
want to look I can see that it was I

00:29:21,970 --> 00:29:26,230
need this is what haven't been committed

00:29:24,250 --> 00:29:27,580
yet if I want to see what is stage and I

00:29:26,230 --> 00:29:30,669
need to do that and I see that this is

00:29:27,580 --> 00:29:41,290
my home link so let's rather commit

00:29:30,669 --> 00:29:43,510
message forgot a link to home and this

00:29:41,290 --> 00:29:45,940
is a mistake that we're gonna fix it

00:29:43,510 --> 00:29:52,780
soon and then our last change that we

00:29:45,940 --> 00:29:55,390
have is the new line so we want to

00:29:52,780 --> 00:29:57,730
remove that so we're gonna add that and

00:29:55,390 --> 00:29:59,740
we gonna but in this case instead of

00:29:57,730 --> 00:30:03,490
giving it a commit message I'm gonna use

00:29:59,740 --> 00:30:06,580
a fix up for that so if I look at this

00:30:03,490 --> 00:30:08,980
is really belongs into this comment so

00:30:06,580 --> 00:30:11,530
I'm gonna grab the share here and I can

00:30:08,980 --> 00:30:14,260
see that it's already staged to

00:30:11,530 --> 00:30:17,140
committing so I'm gonna do git commit

00:30:14,260 --> 00:30:21,220
dash dash fix up and give it the shout

00:30:17,140 --> 00:30:24,370
that I want to fix it on so now if I

00:30:21,220 --> 00:30:26,919
look at my history I have four commit I

00:30:24,370 --> 00:30:29,140
have ad copy and net forgot one that

00:30:26,919 --> 00:30:34,090
should be really go with now and one for

00:30:29,140 --> 00:30:39,010
fix up now if we look at if we look at

00:30:34,090 --> 00:30:47,440
my git config again where is the one I

00:30:39,010 --> 00:30:51,460
wanted get config - - at least and we're

00:30:47,440 --> 00:30:53,559
gonna grab for squash you'll see that I

00:30:51,460 --> 00:30:56,169
have Auto squash tree that we will need

00:30:53,559 --> 00:31:02,980
soon so but I'll do it with defining

00:30:56,169 --> 00:31:04,450
that in our now but generally because

00:31:02,980 --> 00:31:07,410
this is such a true I don't need to

00:31:04,450 --> 00:31:10,840
define that manually so if I do now get

00:31:07,410 --> 00:31:13,480
rebase interactive and I want to fix up

00:31:10,840 --> 00:31:19,030
to be included and fixed itself only to

00:31:13,480 --> 00:31:21,760
do - - auto squash and I want to rebase

00:31:19,030 --> 00:31:22,480
master on top of my branch you will see

00:31:21,760 --> 00:31:25,090
the

00:31:22,480 --> 00:31:26,680
because I did a fix-up commit it already

00:31:25,090 --> 00:31:28,630
picked it up and it knows that it needs

00:31:26,680 --> 00:31:30,520
to going to ad copy and it will squash

00:31:28,630 --> 00:31:32,350
them for me automatically like magic

00:31:30,520 --> 00:31:34,690
this one over the other hand was a

00:31:32,350 --> 00:31:37,120
mistake that I want to fix so in this

00:31:34,690 --> 00:31:38,800
case we're gonna do a squash to show

00:31:37,120 --> 00:31:40,630
what happened so I'm gonna change the

00:31:38,800 --> 00:31:42,280
pic and I'm gonna change the to squash

00:31:40,630 --> 00:31:44,620
and then see what happens when we

00:31:42,280 --> 00:31:46,870
rebates so I'm happy with what's gonna

00:31:44,620 --> 00:31:51,550
happen I'm gonna do save and close and

00:31:46,870 --> 00:31:53,440
in this case it shows me this is the

00:31:51,550 --> 00:31:56,020
combination of two comets that add Nev

00:31:53,440 --> 00:31:58,210
and forgot to home link so really this

00:31:56,020 --> 00:31:59,560
message should only be a navigation

00:31:58,210 --> 00:32:02,740
because I don't care about this anymore

00:31:59,560 --> 00:32:05,230
and I saved that and it already

00:32:02,740 --> 00:32:09,340
automatically fixed up my other comment

00:32:05,230 --> 00:32:11,020
so if I look at my history and I only

00:32:09,340 --> 00:32:12,670
have the two ones that makes sense

00:32:11,020 --> 00:32:15,850
I don't have all the mistakes that I've

00:32:12,670 --> 00:32:22,000
done along the way and then I can easily

00:32:15,850 --> 00:32:25,900
merge that back into master so the way

00:32:22,000 --> 00:32:34,060
we've done that before what I want I

00:32:25,900 --> 00:32:35,920
want that so we looked at that we used a

00:32:34,060 --> 00:32:37,210
fix up with a shout so we seem to take

00:32:35,920 --> 00:32:40,000
advantage of this we need to tailgate

00:32:37,210 --> 00:32:42,070
which commits the new changes should be

00:32:40,000 --> 00:32:44,830
merged with which is why we added a

00:32:42,070 --> 00:32:47,020
specific she'll give rebase - -

00:32:44,830 --> 00:32:48,970
interactive - - auto squash picks up on

00:32:47,020 --> 00:32:53,650
the Comets with a message that begins

00:32:48,970 --> 00:32:56,470
with a fix up or squash we can set

00:32:53,650 --> 00:32:58,420
rebase to auto squash by default by

00:32:56,470 --> 00:33:03,280
using this command which is what I have

00:32:58,420 --> 00:33:05,680
set in my in my git config so things

00:33:03,280 --> 00:33:07,090
things to remember when rebasing rebase

00:33:05,680 --> 00:33:10,360
often to grab

00:33:07,090 --> 00:33:12,250
recent updates for myself use rebase

00:33:10,360 --> 00:33:14,650
when you want to keep a linear commit

00:33:12,250 --> 00:33:16,960
history and never use rebase on a public

00:33:14,650 --> 00:33:18,760
shared branch ie never rebased on Noster

00:33:16,960 --> 00:33:23,980
because you're gonna make everybody's

00:33:18,760 --> 00:33:25,930
life hell so to repeat just a few things

00:33:23,980 --> 00:33:28,030
that we talked about if we spend as much

00:33:25,930 --> 00:33:30,100
time ensuring that our comets are well

00:33:28,030 --> 00:33:31,840
factored as well as we do with

00:33:30,100 --> 00:33:33,790
refactoring our codes and our tests it

00:33:31,840 --> 00:33:35,559
will save us and the team time and pain

00:33:33,790 --> 00:33:37,600
in the future so some

00:33:35,559 --> 00:33:40,059
thanks to you remember make small

00:33:37,600 --> 00:33:42,549
feature specific comics ensure that one

00:33:40,059 --> 00:33:44,679
change to make one change at a time make

00:33:42,549 --> 00:33:46,570
it a simpler to work on it makes it

00:33:44,679 --> 00:33:49,090
easier to revert to a specific change

00:33:46,570 --> 00:33:50,769
and rather than having to revert

00:33:49,090 --> 00:33:53,860
multiple commits on it you know they

00:33:50,769 --> 00:33:56,919
need to be referred I remember to

00:33:53,860 --> 00:33:58,360
explain why we've made the change in the

00:33:56,919 --> 00:34:00,249
first place this is the perfect

00:33:58,360 --> 00:34:02,399
opportunity to reflect on what we did

00:34:00,249 --> 00:34:05,460
and to provide context on the change

00:34:02,399 --> 00:34:07,659
work in small thematic feature branches

00:34:05,460 --> 00:34:11,649
rebase frequently to incorporate

00:34:07,659 --> 00:34:13,419
upstream changes revise review and

00:34:11,649 --> 00:34:16,230
revise the history before sharing it

00:34:13,419 --> 00:34:18,879
with the rest of the team keep it linear

00:34:16,230 --> 00:34:20,440
to convey linear thought and the ability

00:34:18,879 --> 00:34:22,839
to understand what's going on with a

00:34:20,440 --> 00:34:27,540
code at any point in time and other

00:34:22,839 --> 00:34:27,540
scores your comments thank you very much

00:34:27,580 --> 00:34:39,229
[Applause]

00:34:30,650 --> 00:34:39,229
[Music]

00:34:40,560 --> 00:34:42,620

YouTube URL: https://www.youtube.com/watch?v=-WsjKCledP4


