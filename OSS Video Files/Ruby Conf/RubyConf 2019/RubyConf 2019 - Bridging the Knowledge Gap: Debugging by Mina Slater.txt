Title: RubyConf 2019 - Bridging the Knowledge Gap: Debugging by Mina Slater
Publication date: 2019-12-03
Playlist: RubyConf 2019
Description: 
	RubyConf 2019 - Bridging the Knowledge Gap: Debugging by Mina Slater

We're usually never get an official lesson in debugging. No one tells us at bootcamp or in online tutorials what to do when our code doesn’t work. It’s one of those learn-it-on-the-job sort of things and comes with experience. As early-career developers, we get a lot of syntax thrown at us when we’re first learning, but in actuality, the majority of our time is spent trying to fix broken code.


But why should we slog through it alone? Let’s explore some Ruby/Rails debugging techniques and tools together!

#confreaks #rubyconf2019
Captions: 
	00:00:04,190 --> 00:00:10,269
[Music]

00:00:11,870 --> 00:00:18,420
hi everyone thanks so much for being

00:00:15,210 --> 00:00:20,340
here today and first before we begin I

00:00:18,420 --> 00:00:22,200
just wanted to mention that I did

00:00:20,340 --> 00:00:23,490
include my Twitter handle in the upper

00:00:22,200 --> 00:00:26,099
right corner if that's something that

00:00:23,490 --> 00:00:27,300
you want it to do I won't be offended if

00:00:26,099 --> 00:00:31,529
you're looking at your phone or not at

00:00:27,300 --> 00:00:34,380
me so the title of my talk as you can

00:00:31,529 --> 00:00:37,440
see here in the program is bridging the

00:00:34,380 --> 00:00:41,340
knowledge gap of debugging to me that's

00:00:37,440 --> 00:00:44,220
really just a fancy way to say that this

00:00:41,340 --> 00:00:48,150
is a talk about what I wish 20:18 me

00:00:44,220 --> 00:00:51,840
knew about debugging so to start a

00:00:48,150 --> 00:00:55,460
little introduction my name is Mina and

00:00:51,840 --> 00:00:57,750
my pronouns are she her and hers I

00:00:55,460 --> 00:01:01,110
graduated from a coding bootcamp in

00:00:57,750 --> 00:01:04,110
April of 2018 and I am currently a

00:01:01,110 --> 00:01:07,439
software engineer at tandem which is a

00:01:04,110 --> 00:01:13,320
consulting agency in Chicago and fun

00:01:07,439 --> 00:01:16,189
fact I'm very nervous right now all

00:01:13,320 --> 00:01:16,189
right so

00:01:20,689 --> 00:01:24,680
I think the third time I've given this

00:01:22,939 --> 00:01:27,320
talk I've never gotten that reaction to

00:01:24,680 --> 00:01:30,350
this so cool

00:01:27,320 --> 00:01:33,079
so if you were in a career for many

00:01:30,350 --> 00:01:37,130
years like I was starting a new job in a

00:01:33,079 --> 00:01:39,649
new field is really scary so I was

00:01:37,130 --> 00:01:42,500
transitioning from a 10 year career in

00:01:39,649 --> 00:01:46,060
theatre where I was the expert at my job

00:01:42,500 --> 00:01:50,000
to a new industry and a team where

00:01:46,060 --> 00:01:51,319
everyone knew more than I did okay so I

00:01:50,000 --> 00:01:53,509
knew I was going to be the most

00:01:51,319 --> 00:01:54,229
inexperienced developer at my entire

00:01:53,509 --> 00:01:57,770
company

00:01:54,229 --> 00:02:00,679
but I was ready to face the challenges

00:01:57,770 --> 00:02:03,349
of this new career head-on I was

00:02:00,679 --> 00:02:06,920
mentally prepared to put a lot of energy

00:02:03,349 --> 00:02:10,190
into learning and improving and becoming

00:02:06,920 --> 00:02:12,980
the best developer that I could but I

00:02:10,190 --> 00:02:15,519
wasn't really prepared to discover just

00:02:12,980 --> 00:02:18,349
how much I didn't know

00:02:15,519 --> 00:02:21,769
now I quickly found where my skills were

00:02:18,349 --> 00:02:24,650
lacking though I worked in efficiently

00:02:21,769 --> 00:02:27,890
and with a lot of times at a loss when

00:02:24,650 --> 00:02:32,230
it came to doing things like testing and

00:02:27,890 --> 00:02:36,500
debugging so really I was lost a lot

00:02:32,230 --> 00:02:38,540
because let's be honest we spend a lot

00:02:36,500 --> 00:02:42,079
of our time as developer squashing bugs

00:02:38,540 --> 00:02:45,200
and unfortunately I don't think that my

00:02:42,079 --> 00:02:47,209
experience was all that unique because a

00:02:45,200 --> 00:02:49,519
majority of coding boot camps leaf

00:02:47,209 --> 00:02:52,190
graduates with knowledge gaps in

00:02:49,519 --> 00:02:54,079
essential skills like debugging and a

00:02:52,190 --> 00:02:57,799
lot of us struggle at our first jobs

00:02:54,079 --> 00:03:00,590
because of it now when I first started

00:02:57,799 --> 00:03:03,799
learning to code see anair papa

00:03:00,590 --> 00:03:06,260
was really scary it was my co telling me

00:03:03,799 --> 00:03:09,380
that I did something wrong and that I

00:03:06,260 --> 00:03:11,389
had made a mistake and since we've all

00:03:09,380 --> 00:03:13,810
been conditioned to avoid mistakes in

00:03:11,389 --> 00:03:16,880
life I felt like a failure

00:03:13,810 --> 00:03:19,310
the big red error messages reminded me a

00:03:16,880 --> 00:03:22,549
lot of the big red X's now my teachers

00:03:19,310 --> 00:03:25,000
used to put on my tests in school they

00:03:22,549 --> 00:03:27,790
were intimidating me into inaction

00:03:25,000 --> 00:03:30,160
as attempted to avoid these error

00:03:27,790 --> 00:03:33,010
messages I just didn't run my CODIS

00:03:30,160 --> 00:03:36,930
often because well you can get error

00:03:33,010 --> 00:03:39,310
messages you don't run your program I

00:03:36,930 --> 00:03:41,920
would write code in the bubble of my

00:03:39,310 --> 00:03:45,220
text editor and then stare the string

00:03:41,920 --> 00:03:49,090
wondering if it looked right the only

00:03:45,220 --> 00:03:51,160
indication that I had of rightness was

00:03:49,090 --> 00:03:53,260
my very limited knowledge about the

00:03:51,160 --> 00:03:57,250
programming languages that I was working

00:03:53,260 --> 00:04:00,370
in and maybe an example or two so as you

00:03:57,250 --> 00:04:03,340
can imagine I wasted hours upon hours

00:04:00,370 --> 00:04:07,060
trying to make things right before I

00:04:03,340 --> 00:04:09,880
would execute any of it and when I

00:04:07,060 --> 00:04:13,150
eventually let the program run it of

00:04:09,880 --> 00:04:14,920
course didn't work without having been

00:04:13,150 --> 00:04:19,269
taught how to debug or seeing anyone

00:04:14,920 --> 00:04:23,500
demonstrated I didn't know how to

00:04:19,269 --> 00:04:26,440
approach it I didn't know that how to

00:04:23,500 --> 00:04:28,470
read an error message I didn't know that

00:04:26,440 --> 00:04:31,990
I should be reading those error messages

00:04:28,470 --> 00:04:35,400
so my only approach was staring at the

00:04:31,990 --> 00:04:38,200
code come through line by line and just

00:04:35,400 --> 00:04:41,620
hoping to find any typos or obvious

00:04:38,200 --> 00:04:44,380
mistakes no one told me that there were

00:04:41,620 --> 00:04:46,800
better ways and I practiced myself into

00:04:44,380 --> 00:04:49,810
bad debugging habits without knowing it

00:04:46,800 --> 00:04:51,460
now don't get me wrong I'm not saying

00:04:49,810 --> 00:04:55,180
that boot camps don't produce quality

00:04:51,460 --> 00:04:56,770
developers in fact I think more

00:04:55,180 --> 00:04:59,919
companies should be hiring career

00:04:56,770 --> 00:05:02,410
changes changers and boot camp graduates

00:04:59,919 --> 00:05:04,990
because we bring past experiences and

00:05:02,410 --> 00:05:08,380
soft skills that are sometimes harder to

00:05:04,990 --> 00:05:12,550
teach but that's a 40 minute talk for a

00:05:08,380 --> 00:05:14,050
different day now there's so many so

00:05:12,550 --> 00:05:17,770
much that you can cram into someone's

00:05:14,050 --> 00:05:20,290
brain in the course of three months so I

00:05:17,770 --> 00:05:22,180
do understand that coding boot camps

00:05:20,290 --> 00:05:25,360
have to make compromises in their

00:05:22,180 --> 00:05:28,990
curriculums they usually end up focusing

00:05:25,360 --> 00:05:31,720
on things like syntax or super basic

00:05:28,990 --> 00:05:34,780
practices like assigning variables and

00:05:31,720 --> 00:05:36,640
making loops and defining methods things

00:05:34,780 --> 00:05:37,580
like testing and debugging just get off

00:05:36,640 --> 00:05:40,130
to the side

00:05:37,580 --> 00:05:42,890
after I finished boot camp and started

00:05:40,130 --> 00:05:44,600
working it was really apparent and very

00:05:42,890 --> 00:05:47,570
quickly that there were better ways to

00:05:44,600 --> 00:05:50,210
fix bugs I had to change what I was

00:05:47,570 --> 00:05:52,280
doing that hole staring and hoping thing

00:05:50,210 --> 00:05:55,100
but I didn't know what to replace it

00:05:52,280 --> 00:05:57,500
with the part of my brain were not

00:05:55,100 --> 00:06:01,130
knowledge about debugging should live

00:05:57,500 --> 00:06:02,690
was a big empty gap and I had to

00:06:01,130 --> 00:06:08,420
overcome it by filling it with the

00:06:02,690 --> 00:06:11,150
proper tools and strategies at tandem we

00:06:08,420 --> 00:06:13,070
pair program all the time and I think

00:06:11,150 --> 00:06:16,130
pairing gave me an opportunity to

00:06:13,070 --> 00:06:19,610
observe a more experienced developer at

00:06:16,130 --> 00:06:21,680
work I have a really supportive team

00:06:19,610 --> 00:06:24,290
that lets me openly confront what I

00:06:21,680 --> 00:06:26,870
don't know and encourages me to ask

00:06:24,290 --> 00:06:30,320
questions we would break things together

00:06:26,870 --> 00:06:33,320
and fix them as a pair it gave me

00:06:30,320 --> 00:06:35,720
exposure to how different people like to

00:06:33,320 --> 00:06:37,580
approach bugs and errors and the

00:06:35,720 --> 00:06:38,140
different options that were available to

00:06:37,580 --> 00:06:41,510
me

00:06:38,140 --> 00:06:43,580
for instance my coworker sure mile he's

00:06:41,510 --> 00:06:46,970
really great about using the network tab

00:06:43,580 --> 00:06:50,150
in the dev tools and Sascha is just a

00:06:46,970 --> 00:06:52,130
wizard in the rails console now some are

00:06:50,150 --> 00:06:54,350
really smart said to me once that in

00:06:52,130 --> 00:06:57,050
software you have to break everything

00:06:54,350 --> 00:07:01,190
first before you can piece it back

00:06:57,050 --> 00:07:03,440
together and make it work now this

00:07:01,190 --> 00:07:06,170
applies to learning too I think because

00:07:03,440 --> 00:07:08,330
if we can't omit what we don't know

00:07:06,170 --> 00:07:11,720
we're not going to let ourselves learn

00:07:08,330 --> 00:07:14,360
it and having a supportive work

00:07:11,720 --> 00:07:17,000
environment allows me to identify my

00:07:14,360 --> 00:07:18,740
knowledge gaps so that I will know when

00:07:17,000 --> 00:07:22,010
I see something that I want to store in

00:07:18,740 --> 00:07:24,200
those spaces and that can be a new

00:07:22,010 --> 00:07:28,010
approach to a problem or maybe a new

00:07:24,200 --> 00:07:30,320
tool and what I want to achieve in the

00:07:28,010 --> 00:07:32,150
next thirty minutes with everyone is to

00:07:30,320 --> 00:07:33,650
share with you the more important

00:07:32,150 --> 00:07:36,380
lessons that I had learned about

00:07:33,650 --> 00:07:38,990
debugging over my first year or so

00:07:36,380 --> 00:07:42,080
working in software I'm not trying to

00:07:38,990 --> 00:07:43,760
turn any of you into master debuggers we

00:07:42,080 --> 00:07:46,010
first of all don't have time for that

00:07:43,760 --> 00:07:48,770
and it's really not the point of this

00:07:46,010 --> 00:07:50,480
talk but if you do walk away with even

00:07:48,770 --> 00:07:51,470
one thing that you didn't know when you

00:07:50,480 --> 00:07:55,130
walked in the

00:07:51,470 --> 00:07:56,660
or I would have done my job well so I've

00:07:55,130 --> 00:07:58,190
organized the things that I've learned

00:07:56,660 --> 00:08:01,610
about debugging into three main

00:07:58,190 --> 00:08:05,060
categories of lessons lesson number one

00:08:01,610 --> 00:08:07,730
look under the hood lesson number two

00:08:05,060 --> 00:08:12,140
tap the phone lines and lesson number

00:08:07,730 --> 00:08:14,630
three find a bug write a test now these

00:08:12,140 --> 00:08:16,760
are not meant to be roadmaps but rather

00:08:14,630 --> 00:08:19,460
starting points where we can begin the

00:08:16,760 --> 00:08:21,950
process of debugging and depending on

00:08:19,460 --> 00:08:24,830
the issue at hand we can use one of the

00:08:21,950 --> 00:08:28,400
three mix-and-match them or maybe go

00:08:24,830 --> 00:08:30,560
another route altogether and all the

00:08:28,400 --> 00:08:32,930
examples in my presentation are done in

00:08:30,560 --> 00:08:34,640
rails but other languages obviously and

00:08:32,930 --> 00:08:37,130
frameworks generally happy equivalent

00:08:34,640 --> 00:08:41,150
tools and the core ideas are

00:08:37,130 --> 00:08:45,860
transferable so on to lesson number one

00:08:41,150 --> 00:08:47,690
look under the hood all right so maybe I

00:08:45,860 --> 00:08:49,370
was exaggerating a little bit when I

00:08:47,690 --> 00:08:53,420
said that my bootcamp didn't teach me

00:08:49,370 --> 00:08:56,540
anything about debugging I mom we were

00:08:53,420 --> 00:08:58,190
told to console.log everything so I was

00:08:56,540 --> 00:09:00,980
aware that I can tell the program to

00:08:58,190 --> 00:09:04,040
print out certain things we mostly use

00:09:00,980 --> 00:09:06,500
this to get a look at values of

00:09:04,040 --> 00:09:09,500
variables at runtime compare these

00:09:06,500 --> 00:09:12,950
printouts to expectations and figure out

00:09:09,500 --> 00:09:14,660
where our code needed to change so I did

00:09:12,950 --> 00:09:18,950
know about the concept of print

00:09:14,660 --> 00:09:22,280
debugging in Ruby we use print puts or P

00:09:18,950 --> 00:09:24,740
instead of console.log now all three of

00:09:22,280 --> 00:09:26,690
these do very similar things they output

00:09:24,740 --> 00:09:36,140
information from our program into the

00:09:26,690 --> 00:09:38,930
console but hmm we're print and puts

00:09:36,140 --> 00:09:40,850
internally cost us to turn the thing

00:09:38,930 --> 00:09:44,240
that we want to output into a human

00:09:40,850 --> 00:09:46,550
readable string pecos inspect internally

00:09:44,240 --> 00:09:49,940
giving us more useful information as

00:09:46,550 --> 00:09:54,460
developers for instance if you take an

00:09:49,940 --> 00:09:54,460
active record object a puppy named dotty

00:09:59,710 --> 00:10:05,540
so inside the rails console here we'll

00:10:04,040 --> 00:10:10,120
be able to see the difference between

00:10:05,540 --> 00:10:10,120
using puts to output our puppy object

00:10:10,360 --> 00:10:19,400
and using P so depending on what is

00:10:17,480 --> 00:10:20,870
useful for your circumstance it's

00:10:19,400 --> 00:10:22,790
important to know the difference between

00:10:20,870 --> 00:10:26,000
them and remember that they are both

00:10:22,790 --> 00:10:27,890
available and in this case we would opt

00:10:26,000 --> 00:10:30,650
to use puts if we need it to know which

00:10:27,890 --> 00:10:32,300
class our puppy belong to but P is going

00:10:30,650 --> 00:10:34,370
to give us more specific information

00:10:32,300 --> 00:10:37,760
about this particular instance of the

00:10:34,370 --> 00:10:39,980
puppy now prenta bucking lettuce leaf

00:10:37,760 --> 00:10:42,830
breadcrumbs in the form of these print

00:10:39,980 --> 00:10:45,410
statements around our code and visually

00:10:42,830 --> 00:10:48,440
track the path of our program and look

00:10:45,410 --> 00:10:50,390
at actual pieces of data we can watch

00:10:48,440 --> 00:10:53,420
and make sure that all the data is as

00:10:50,390 --> 00:10:56,030
expected and if an output that we

00:10:53,420 --> 00:10:58,100
expected to see didn't show up at all it

00:10:56,030 --> 00:11:01,360
is safe to say that our program just

00:10:58,100 --> 00:11:04,790
never hit that section of code at all

00:11:01,360 --> 00:11:07,040
now Aaron Patterson tenderlove is a

00:11:04,790 --> 00:11:10,160
famously self-proclaimed - puts debugger

00:11:07,040 --> 00:11:11,990
a link to his blog post is included at

00:11:10,160 --> 00:11:15,590
the end of the deck which I will share

00:11:11,990 --> 00:11:18,350
later most of the things that he covers

00:11:15,590 --> 00:11:21,260
in the post does feel very much over my

00:11:18,350 --> 00:11:25,580
head but he also makes a very powerful

00:11:21,260 --> 00:11:27,500
case for printed biking and honestly

00:11:25,580 --> 00:11:29,630
what we just talked about is really the

00:11:27,500 --> 00:11:32,540
extent to which that I use these print

00:11:29,630 --> 00:11:35,240
methods I usually use something like pry

00:11:32,540 --> 00:11:39,110
which is a gem for peeking under the

00:11:35,240 --> 00:11:41,780
hood of my rails application so like I

00:11:39,110 --> 00:11:44,240
said pry is a gem that it will allow us

00:11:41,780 --> 00:11:46,100
to open up a console session at any

00:11:44,240 --> 00:11:49,400
given point of our program just by

00:11:46,100 --> 00:11:51,020
dropping in the line binding pry into

00:11:49,400 --> 00:11:53,770
the part of our code that we want a

00:11:51,020 --> 00:11:56,330
closer look at we call these breakpoints

00:11:53,770 --> 00:11:59,180
so the next time that we run the program

00:11:56,330 --> 00:12:01,040
it will pause there and give us an

00:11:59,180 --> 00:12:03,620
interactive console in the terminal

00:12:01,040 --> 00:12:06,880
that's why something like this is called

00:12:03,620 --> 00:12:09,550
interactive to bart debugging it serves

00:12:06,880 --> 00:12:12,130
largely the same purpose as using

00:12:09,550 --> 00:12:14,920
the print methods to explore the inner

00:12:12,130 --> 00:12:18,120
working of our program but probably will

00:12:14,920 --> 00:12:20,950
give us more freedom in our exploration

00:12:18,120 --> 00:12:22,720
now I have a simple app here that I

00:12:20,950 --> 00:12:26,020
built back in the day to try to teach

00:12:22,720 --> 00:12:28,240
myself rails it's called puppy gachi and

00:12:26,020 --> 00:12:30,670
it tracks the puppy that each owned each

00:12:28,240 --> 00:12:33,370
user owns these puppies they will get

00:12:30,670 --> 00:12:36,100
hungry or bored over time so the users

00:12:33,370 --> 00:12:38,740
can log in to check on their kennel feed

00:12:36,100 --> 00:12:42,760
or play with these puppies it's inspired

00:12:38,740 --> 00:12:45,820
by Tamagotchi if you remember those so I

00:12:42,760 --> 00:12:48,040
have put a couple of breakpoints here in

00:12:45,820 --> 00:12:50,320
the service object that I used to age

00:12:48,040 --> 00:12:53,170
the puppies and set their hunger and

00:12:50,320 --> 00:12:55,060
boredom levels we also have a few

00:12:53,170 --> 00:12:57,670
private methods that are folded below

00:12:55,060 --> 00:13:00,430
the keyword meth keyword private there

00:12:57,670 --> 00:13:04,660
at the bottom so if we reload the page

00:13:00,430 --> 00:13:07,990
in the browser we see that the load will

00:13:04,660 --> 00:13:10,330
catch and appear to be unresponsive so

00:13:07,990 --> 00:13:12,670
if we pop into our server logs we can

00:13:10,330 --> 00:13:15,430
see that the request from the reloj hit

00:13:12,670 --> 00:13:20,350
the server and then stopped at our first

00:13:15,430 --> 00:13:23,170
breakpoint now most things that we can

00:13:20,350 --> 00:13:25,510
do in a rails console or an IRB session

00:13:23,170 --> 00:13:28,420
are available to us more enterprise

00:13:25,510 --> 00:13:30,190
session but the gem also gives us a lot

00:13:28,420 --> 00:13:33,040
of extra commands to get more

00:13:30,190 --> 00:13:35,980
information about the program now one of

00:13:33,040 --> 00:13:37,750
these basic ones is LS using this

00:13:35,980 --> 00:13:39,580
command we can get an overview of

00:13:37,750 --> 00:13:42,040
everything that is available to us

00:13:39,580 --> 00:13:47,590
within the current context which is this

00:13:42,040 --> 00:13:50,170
puppy aging service we can see from the

00:13:47,590 --> 00:13:52,840
output of our LS command that the

00:13:50,170 --> 00:13:55,630
service object has a public instance

00:13:52,840 --> 00:13:57,100
method process among other things but it

00:13:55,630 --> 00:13:59,200
doesn't show me the private methods

00:13:57,100 --> 00:14:03,010
because I don't have access to them from

00:13:59,200 --> 00:14:04,660
this context here and pray now agend

00:14:03,010 --> 00:14:07,660
that's used sometimes side by side with

00:14:04,660 --> 00:14:09,070
pry is called PI by bug this gives us

00:14:07,660 --> 00:14:11,500
commands to navigate through the

00:14:09,070 --> 00:14:15,960
codebase and the ones that I most

00:14:11,500 --> 00:14:18,520
commonly use our next step and continue

00:14:15,960 --> 00:14:20,380
so since we're still tied into the

00:14:18,520 --> 00:14:22,960
initialized method here in the puppy

00:14:20,380 --> 00:14:23,379
aging service you can see that we are

00:14:22,960 --> 00:14:26,379
stopped

00:14:23,379 --> 00:14:29,109
inline-four and we can tell this because

00:14:26,379 --> 00:14:32,679
the arrow on the left of the line number

00:14:29,109 --> 00:14:34,689
is where we are sought so that line of

00:14:32,679 --> 00:14:37,929
code is telling our puppy instance

00:14:34,689 --> 00:14:40,029
variable to point to the puppy object

00:14:37,929 --> 00:14:42,999
that we passed in when we initialized a

00:14:40,029 --> 00:14:45,399
service right now that line hasn't been

00:14:42,999 --> 00:14:51,669
executed yet so if we look at our

00:14:45,399 --> 00:14:55,869
instance variable it has no value right

00:14:51,669 --> 00:14:57,939
now it's values no but if we use the

00:14:55,869 --> 00:15:00,789
next command the program will run the

00:14:57,939 --> 00:15:06,459
next line set the result to the variable

00:15:00,789 --> 00:15:14,289
and stop at then at line five and we can

00:15:06,459 --> 00:15:16,329
then see that puppy has a value now so

00:15:14,289 --> 00:15:18,279
at this point if we have looked at a

00:15:16,329 --> 00:15:21,579
couple of variables I ran a few commands

00:15:18,279 --> 00:15:24,519
our terminal can get a bit messy what I

00:15:21,579 --> 00:15:26,409
usually do is clear it up clear the

00:15:24,519 --> 00:15:30,839
display and use the command where am I

00:15:26,409 --> 00:15:30,839
to get reoriented in the price session

00:15:31,979 --> 00:15:37,119
then from here if we want to have a look

00:15:34,689 --> 00:15:39,579
into the change time method whose result

00:15:37,119 --> 00:15:42,459
is being set to up to the other instance

00:15:39,579 --> 00:15:44,889
variable time elapsed we can use another

00:15:42,459 --> 00:15:51,579
command step to step into this next

00:15:44,889 --> 00:15:53,649
method call this lands us into the

00:15:51,579 --> 00:15:55,479
definition of change time which is a

00:15:53,649 --> 00:15:58,659
private method that's defined on our

00:15:55,479 --> 00:16:01,149
puppy aging service now sometimes step

00:15:58,659 --> 00:16:04,089
will take us into real source code or

00:16:01,149 --> 00:16:07,539
the source code of some external library

00:16:04,089 --> 00:16:09,609
that we are using it's important and

00:16:07,539 --> 00:16:11,439
sometimes hard to remember not to panic

00:16:09,609 --> 00:16:14,979
when our price session ends up in the

00:16:11,439 --> 00:16:17,439
middle of unfamiliar code in fact really

00:16:14,979 --> 00:16:19,689
that's kind of the point is to dig

00:16:17,439 --> 00:16:23,079
deeper into the program whether that's

00:16:19,689 --> 00:16:24,999
code you wrote yourself or not now the

00:16:23,079 --> 00:16:27,579
last navigation command that I wanted to

00:16:24,999 --> 00:16:29,799
demonstrate is continue well continue

00:16:27,579 --> 00:16:31,929
we'll do is tell pry to continue running

00:16:29,799 --> 00:16:34,119
the program until it hits the next

00:16:31,929 --> 00:16:36,720
breakpoint which if you don't remember

00:16:34,119 --> 00:16:42,810
we do have in our public instance meth

00:16:36,720 --> 00:16:44,939
process and when we're done with the

00:16:42,810 --> 00:16:47,430
session and one our program to carry out

00:16:44,939 --> 00:16:49,560
the rest of the actions we can exit we

00:16:47,430 --> 00:16:53,040
can use exit to get out of the pry

00:16:49,560 --> 00:16:57,269
session and then the program will

00:16:53,040 --> 00:16:59,279
continue running as is now being able to

00:16:57,269 --> 00:17:01,019
peek under the hood of my program was

00:16:59,279 --> 00:17:04,260
such a game-changer

00:17:01,019 --> 00:17:06,480
the hardest part of learning to code for

00:17:04,260 --> 00:17:08,819
me at least was overcoming the

00:17:06,480 --> 00:17:11,220
disconnect between the text that I'm

00:17:08,819 --> 00:17:14,100
typing into the files and what shows up

00:17:11,220 --> 00:17:15,870
in the browser it's especially hard to

00:17:14,100 --> 00:17:17,959
conceptualize when working with a

00:17:15,870 --> 00:17:20,939
dynamically typed language like Ruby

00:17:17,959 --> 00:17:23,069
where we can assign data of any type to

00:17:20,939 --> 00:17:25,919
the same variable without any warning

00:17:23,069 --> 00:17:28,579
about potential problems although that

00:17:25,919 --> 00:17:28,579
might change soon

00:17:28,890 --> 00:17:35,789
has anyone seen an error message kind of

00:17:30,539 --> 00:17:37,909
like this before yes maybe okay the

00:17:35,789 --> 00:17:40,950
actual method name in this message

00:17:37,909 --> 00:17:45,059
changes but this area and I are very

00:17:40,950 --> 00:17:47,580
close friends I see him all the time

00:17:45,059 --> 00:17:49,830
if you're unfamiliar what this message

00:17:47,580 --> 00:17:52,940
is telling us is that the program wants

00:17:49,830 --> 00:17:57,059
to invoke a method called select on

00:17:52,940 --> 00:18:00,299
something whose value is no now in this

00:17:57,059 --> 00:18:01,919
particular example select is a built-in

00:18:00,299 --> 00:18:04,950
method on the array and innumerable

00:18:01,919 --> 00:18:07,380
classes so if the object that's being

00:18:04,950 --> 00:18:09,870
called on is anything but an instance of

00:18:07,380 --> 00:18:12,090
either of those classes this method call

00:18:09,870 --> 00:18:14,190
will result in this error and it is a

00:18:12,090 --> 00:18:16,020
message that we will see every time we

00:18:14,190 --> 00:18:20,220
try to call a method on something that

00:18:16,020 --> 00:18:23,429
has the incorrect data type now since

00:18:20,220 --> 00:18:27,049
there are many answers as to where how

00:18:23,429 --> 00:18:30,510
and why the data is unexpectedly now

00:18:27,049 --> 00:18:33,210
opening up the program using puts or pry

00:18:30,510 --> 00:18:36,059
is a fairly decent place to start this

00:18:33,210 --> 00:18:39,059
debugging process we can use these tools

00:18:36,059 --> 00:18:43,710
to identify the problem spots and follow

00:18:39,059 --> 00:18:45,750
the clues from there to a solution so

00:18:43,710 --> 00:18:48,659
our lesson number two we're going to tap

00:18:45,750 --> 00:18:50,559
the phone lines so I worked at a

00:18:48,659 --> 00:18:52,899
consulting agency where all of this

00:18:50,559 --> 00:18:54,970
our polyglots the project that I'm

00:18:52,899 --> 00:18:58,210
currently working on has a rails API

00:18:54,970 --> 00:19:00,700
back-end and a react front-end so

00:18:58,210 --> 00:19:03,009
testing features in the browser as we

00:19:00,700 --> 00:19:06,279
write code is a fairly standard practice

00:19:03,009 --> 00:19:08,590
in our typical development flow usually

00:19:06,279 --> 00:19:10,570
things aren't usually when things aren't

00:19:08,590 --> 00:19:12,700
working properly the best-case scenario

00:19:10,570 --> 00:19:15,970
is that we would see some kind of error

00:19:12,700 --> 00:19:18,070
in the JavaScript console but many times

00:19:15,970 --> 00:19:21,129
that just wouldn't be the case all we

00:19:18,070 --> 00:19:23,769
would see is a non responsive UI or a

00:19:21,129 --> 00:19:25,450
blank screen now something that's really

00:19:23,769 --> 00:19:28,119
useful in these cases is built right

00:19:25,450 --> 00:19:31,629
into the browser if we open up the dev

00:19:28,119 --> 00:19:33,789
tools we can see all of these tabs first

00:19:31,629 --> 00:19:37,720
you have elements which will be your

00:19:33,789 --> 00:19:41,799
HTML and styling your JavaScript console

00:19:37,720 --> 00:19:44,759
and for me in the chrome dev tools that

00:19:41,799 --> 00:19:47,379
fourth one over is a tab labeled network

00:19:44,759 --> 00:19:50,169
this tab will show us a log of our

00:19:47,379 --> 00:19:51,730
network activities it's something that

00:19:50,169 --> 00:19:53,769
we would use to make sure that the

00:19:51,730 --> 00:19:56,889
resources are being downloaded or

00:19:53,769 --> 00:19:59,200
uploaded correctly and where we would go

00:19:56,889 --> 00:20:02,830
to check the status of our applications

00:19:59,200 --> 00:20:05,409
trips to and from the server when we

00:20:02,830 --> 00:20:07,889
first open up the dev tools you won't

00:20:05,409 --> 00:20:10,509
see any network activities log there yet

00:20:07,889 --> 00:20:14,080
so let's go back to puppy gachi again

00:20:10,509 --> 00:20:16,720
with the dev tools open there we can see

00:20:14,080 --> 00:20:18,879
that the network tab is empty once it's

00:20:16,720 --> 00:20:21,940
opened up we can either reload the page

00:20:18,879 --> 00:20:26,279
or repeat the action and watch the logs

00:20:21,940 --> 00:20:26,279
populate with all the network activities

00:20:32,070 --> 00:20:38,080
so each row in the table at the bottom

00:20:34,919 --> 00:20:40,269
represents an HTTP request and the

00:20:38,080 --> 00:20:42,970
columns gives you more information about

00:20:40,269 --> 00:20:44,980
each of those requests the ones that I

00:20:42,970 --> 00:20:48,730
look at most often are the name of the

00:20:44,980 --> 00:20:52,840
resources the status which is the HTTP

00:20:48,730 --> 00:20:55,149
response code and the resource type some

00:20:52,840 --> 00:20:58,059
lines will appear in red if there are

00:20:55,149 --> 00:21:00,429
bad requests like something like a 500

00:20:58,059 --> 00:21:03,680
or a 403 which are internal server error

00:21:00,429 --> 00:21:05,630
and forbidden respectively

00:21:03,680 --> 00:21:08,030
now when we click into one of these

00:21:05,630 --> 00:21:09,830
lines we will have access to more detail

00:21:08,030 --> 00:21:13,460
like the requests and response headers

00:21:09,830 --> 00:21:14,840
and the response body these sections

00:21:13,460 --> 00:21:18,380
will let us look at the communication

00:21:14,840 --> 00:21:20,540
more closely what I typically do here is

00:21:18,380 --> 00:21:22,220
check to make sure that the requests are

00:21:20,540 --> 00:21:24,260
going out to the server with all the

00:21:22,220 --> 00:21:27,560
information that the back-end needs to

00:21:24,260 --> 00:21:29,750
properly process them and under headers

00:21:27,560 --> 00:21:31,520
there's a request payload section that

00:21:29,750 --> 00:21:33,680
will tell us what information went out

00:21:31,520 --> 00:21:36,350
to the server and we can see whether

00:21:33,680 --> 00:21:39,620
it's behaving as expected or identify

00:21:36,350 --> 00:21:42,920
where it's not now on the flip side

00:21:39,620 --> 00:21:45,200
there is a response tab that's going to

00:21:42,920 --> 00:21:48,920
show us what came back from the server

00:21:45,200 --> 00:21:51,440
as a result of our request in this case

00:21:48,920 --> 00:21:53,570
it looks like our request resulted in an

00:21:51,440 --> 00:21:56,120
internal server error because erase an

00:21:53,570 --> 00:21:57,650
argument error on the back end and what

00:21:56,120 --> 00:21:59,750
this means is that our UI Center

00:21:57,650 --> 00:22:02,470
requests that try to invoke a method by

00:21:59,750 --> 00:22:04,730
passing in the wrong number of arguments

00:22:02,470 --> 00:22:08,000
now this demonstrates something that's

00:22:04,730 --> 00:22:10,450
often easy to overlook that even though

00:22:08,000 --> 00:22:12,830
a bug manifests itself on the front end

00:22:10,450 --> 00:22:14,480
doesn't always necessarily mean that

00:22:12,830 --> 00:22:17,450
it's something wrong with the front end

00:22:14,480 --> 00:22:19,880
code I have been tricked by this and

00:22:17,450 --> 00:22:21,920
spent a lot of time investigating the

00:22:19,880 --> 00:22:25,010
react code only to realize that it's

00:22:21,920 --> 00:22:31,850
actually a back-end issue disguising

00:22:25,010 --> 00:22:34,220
itself as a front end error we can also

00:22:31,850 --> 00:22:38,360
look for similar information from the

00:22:34,220 --> 00:22:40,520
server side by peeking into the logs now

00:22:38,360 --> 00:22:42,710
this is where the server will log

00:22:40,520 --> 00:22:45,800
information about each request coming in

00:22:42,710 --> 00:22:49,070
how the server resolved the requests and

00:22:45,800 --> 00:22:51,830
the result of those requests this is

00:22:49,070 --> 00:22:54,410
also where exceptions and warnings will

00:22:51,830 --> 00:22:56,600
show up and where our price sessions

00:22:54,410 --> 00:22:59,870
will open if the program does hit a

00:22:56,600 --> 00:23:01,520
breakpoint this is where this is what

00:22:59,870 --> 00:23:03,860
the server logs look like for that

00:23:01,520 --> 00:23:05,720
refresh that we just did on poppy gachi

00:23:03,860 --> 00:23:07,900
where we saw the network logs in the

00:23:05,720 --> 00:23:07,900
browser

00:23:10,279 --> 00:23:16,879
like with the network tap we can see the

00:23:13,320 --> 00:23:21,869
HTTP request and which route it hits

00:23:16,879 --> 00:23:24,119
their response status code and the

00:23:21,869 --> 00:23:29,399
exception that was raised which we saw

00:23:24,119 --> 00:23:31,589
earlier is part of the response body now

00:23:29,399 --> 00:23:34,200
monitoring lines of communication using

00:23:31,589 --> 00:23:36,599
the network tab and server logs require

00:23:34,200 --> 00:23:39,570
us to be familiar with our program and

00:23:36,599 --> 00:23:42,269
as we can see the logs don't always tell

00:23:39,570 --> 00:23:45,479
us when something is misbehaving they're

00:23:42,269 --> 00:23:47,279
definitely not always color coded so

00:23:45,479 --> 00:23:49,679
knowing what these requests and

00:23:47,279 --> 00:23:52,200
responses look like when everything is

00:23:49,679 --> 00:23:54,409
running properly will help us recognize

00:23:52,200 --> 00:23:58,469
where it doesn't

00:23:54,409 --> 00:24:03,029
and finally lesson number three find a

00:23:58,469 --> 00:24:05,539
bug write a test now bugs and errors are

00:24:03,029 --> 00:24:09,659
a normal part of software development

00:24:05,539 --> 00:24:11,729
because developers are only human but we

00:24:09,659 --> 00:24:14,099
also want to make sure that any future

00:24:11,729 --> 00:24:16,499
code changes that we make won't create

00:24:14,099 --> 00:24:19,830
regressions and result in the same bugs

00:24:16,499 --> 00:24:22,109
over and over again a lot of times

00:24:19,830 --> 00:24:24,719
bugs exist because we fail to account

00:24:22,109 --> 00:24:28,799
for in write code to cover certain edge

00:24:24,719 --> 00:24:32,159
cases most of the time the program will

00:24:28,799 --> 00:24:34,200
run without issue but ideally our

00:24:32,159 --> 00:24:36,139
program will run seamlessly for as many

00:24:34,200 --> 00:24:38,849
end-users as possible

00:24:36,139 --> 00:24:41,519
tests to cover the conditions under

00:24:38,849 --> 00:24:42,960
which our bugs show up will prevent the

00:24:41,519 --> 00:24:45,330
code regression that we just talked

00:24:42,960 --> 00:24:48,659
about and let us know when the bug has

00:24:45,330 --> 00:24:51,509
been fixed running the tests also gives

00:24:48,659 --> 00:24:56,219
us clues about how to proceed when

00:24:51,509 --> 00:24:58,080
looking for a solution for example so

00:24:56,219 --> 00:25:00,629
recently my parish a mile and I were

00:24:58,080 --> 00:25:03,539
working on something that where we had

00:25:00,629 --> 00:25:06,119
to write a method to sort some active

00:25:03,539 --> 00:25:09,659
record objects into a list to pass to

00:25:06,119 --> 00:25:12,299
the front end to display we have one

00:25:09,659 --> 00:25:14,070
database query that returned an active

00:25:12,299 --> 00:25:15,929
record relation which is a list of

00:25:14,070 --> 00:25:19,289
evaluations that you can treat like an

00:25:15,929 --> 00:25:22,860
array and another query that returned

00:25:19,289 --> 00:25:26,429
one single evaluation the perp

00:25:22,860 --> 00:25:28,500
of our method was to squish the result

00:25:26,429 --> 00:25:31,799
of these two queries together into one

00:25:28,500 --> 00:25:34,260
list sorted based on certain attributes

00:25:31,799 --> 00:25:35,929
so that the fund will display them in

00:25:34,260 --> 00:25:38,450
the proper order

00:25:35,929 --> 00:25:41,399
now in our implementation of this method

00:25:38,450 --> 00:25:44,039
we wrote tests to cover all the cases

00:25:41,399 --> 00:25:46,679
that we could think of with a fully

00:25:44,039 --> 00:25:49,890
green test suite and the UI revealing no

00:25:46,679 --> 00:25:52,380
unexpected behaviors we created a poll

00:25:49,890 --> 00:25:54,690
request for the feature and after the

00:25:52,380 --> 00:25:58,889
team had reviewed it we eventually

00:25:54,690 --> 00:26:01,440
merged it into the codebase a couple of

00:25:58,889 --> 00:26:03,510
hours later when sasha was working in

00:26:01,440 --> 00:26:06,019
the QA environment she found that the

00:26:03,510 --> 00:26:08,700
page we worked on was broken

00:26:06,019 --> 00:26:11,460
now after a little bit of investigating

00:26:08,700 --> 00:26:13,649
she concluded that the page couldn't

00:26:11,460 --> 00:26:16,889
render because one of those two queries

00:26:13,649 --> 00:26:19,019
to the database returned to nothing so

00:26:16,889 --> 00:26:21,330
our method was adding a nil to the list

00:26:19,019 --> 00:26:25,049
of objects that we passed to our friend

00:26:21,330 --> 00:26:27,200
and she displayed but when Reax tried to

00:26:25,049 --> 00:26:31,769
display something that was undefined

00:26:27,200 --> 00:26:33,570
everything fell apart so I ended up

00:26:31,769 --> 00:26:36,000
working with her to find a solution for

00:26:33,570 --> 00:26:38,370
the bug and the first thing that she

00:26:36,000 --> 00:26:40,470
suggested we do was write tests to

00:26:38,370 --> 00:26:45,809
account for this particular state of the

00:26:40,470 --> 00:26:47,309
program our tests basically said if one

00:26:45,809 --> 00:26:50,190
of the queries comes back with no

00:26:47,309 --> 00:26:53,460
results we expect it to be excluded from

00:26:50,190 --> 00:26:56,490
the list that we pass to react now at

00:26:53,460 --> 00:26:59,159
the time we didn't know when we started

00:26:56,490 --> 00:27:02,519
debugging what specific lines of code we

00:26:59,159 --> 00:27:06,269
wanted to change or needed to change or

00:27:02,519 --> 00:27:09,090
what that change looked like but backed

00:27:06,269 --> 00:27:12,750
up by the tests we would know right away

00:27:09,090 --> 00:27:15,570
when it's been fixed not only that each

00:27:12,750 --> 00:27:19,049
time we tried a solution we will run the

00:27:15,570 --> 00:27:21,570
tests hoping that they would fail and in

00:27:19,049 --> 00:27:25,289
new and exciting ways that would inform

00:27:21,570 --> 00:27:27,570
our next steps now sometimes in our jobs

00:27:25,289 --> 00:27:33,510
as developers it feels like we're just

00:27:27,570 --> 00:27:36,269
killing bug after bug we fix code almost

00:27:33,510 --> 00:27:39,059
as often as writing new lines of them

00:27:36,269 --> 00:27:41,789
and good debugging habits are almost as

00:27:39,059 --> 00:27:44,789
important as writing clean code some

00:27:41,789 --> 00:27:46,789
will argue more important and for the

00:27:44,789 --> 00:27:50,159
developer that I was a year ago

00:27:46,789 --> 00:27:53,669
that was a really anxiety-inducing idea

00:27:50,159 --> 00:27:57,509
I could have written you method after

00:27:53,669 --> 00:28:00,619
method that did something but I had no

00:27:57,509 --> 00:28:05,029
idea how to find that variable that was

00:28:00,619 --> 00:28:07,859
unexpectedly no like where did it go

00:28:05,029 --> 00:28:10,049
fortunately I work with really smart

00:28:07,859 --> 00:28:11,159
developers they have a lot more

00:28:10,049 --> 00:28:13,769
experience than I do

00:28:11,159 --> 00:28:15,329
and through pair programming I was able

00:28:13,769 --> 00:28:18,269
to piece together a little something

00:28:15,329 --> 00:28:20,969
from each of them into my very own

00:28:18,269 --> 00:28:24,419
debugging tool kit so that little by

00:28:20,969 --> 00:28:26,129
little I was gathering lessons to fill

00:28:24,419 --> 00:28:30,509
up those knowledge gaps that I have

00:28:26,129 --> 00:28:32,879
found in myself now if you think about

00:28:30,509 --> 00:28:34,950
it in a perfect world boot camps will

00:28:32,879 --> 00:28:38,309
put more emphasis on teaching debugging

00:28:34,950 --> 00:28:41,129
techniques and letting their students

00:28:38,309 --> 00:28:43,169
practice them it will prevent their

00:28:41,129 --> 00:28:46,619
graduates from learning bad habits and

00:28:43,169 --> 00:28:49,679
prepare us better for our first jobs but

00:28:46,619 --> 00:28:52,070
s is I think we can help each other by

00:28:49,679 --> 00:28:55,519
sharing what knowledge we do have and

00:28:52,070 --> 00:28:59,369
omitting openly about where we do not

00:28:55,519 --> 00:29:00,959
because because I knew early on that hey

00:28:59,369 --> 00:29:04,469
I don't know what to do when something

00:29:00,959 --> 00:29:06,509
breaks I was able to focus on that and

00:29:04,469 --> 00:29:10,499
learn the lessons that I'm sharing with

00:29:06,509 --> 00:29:13,469
you today now to close I like to go back

00:29:10,499 --> 00:29:15,359
to tender love again I found it tweet

00:29:13,469 --> 00:29:19,709
the other day that he had pinned from

00:29:15,359 --> 00:29:21,779
back in January he said it's not a bug

00:29:19,709 --> 00:29:22,879
it's just taking the code path less

00:29:21,779 --> 00:29:26,429
traveled

00:29:22,879 --> 00:29:29,759
now knowing him he was probably making

00:29:26,429 --> 00:29:31,469
some kind of a joke but this actually

00:29:29,759 --> 00:29:34,139
made me feel more at ease about

00:29:31,469 --> 00:29:37,200
debugging because when we frame it in

00:29:34,139 --> 00:29:40,349
this way errors and bugs are just edged

00:29:37,200 --> 00:29:43,489
cases that we haven't considered yet so

00:29:40,349 --> 00:29:45,869
we really shouldn't be intimidated or

00:29:43,489 --> 00:29:49,380
you know felt like we were a failure

00:29:45,869 --> 00:29:53,280
somehow because of them

00:29:49,380 --> 00:29:56,010
and I hope that after the time that we

00:29:53,280 --> 00:30:01,320
spend together you do feel more equipped

00:29:56,010 --> 00:30:02,430
to confront your next bug or error thank

00:30:01,320 --> 00:30:11,349
you

00:30:02,430 --> 00:30:11,349
[Applause]

00:30:11,800 --> 00:30:21,080

YouTube URL: https://www.youtube.com/watch?v=DT5XeAnXifI


