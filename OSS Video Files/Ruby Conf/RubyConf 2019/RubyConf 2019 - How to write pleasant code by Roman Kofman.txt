Title: RubyConf 2019 - How to write pleasant code by Roman Kofman
Publication date: 2019-12-03
Playlist: RubyConf 2019
Description: 
	RubyConf 2019 - How to write pleasant code by Roman Kofman

As we grow from beginner to intermediate developers, we tend to learn tools and Best Practices for writing good code. But. The more we learn, the more contradictions show up -- and the murkier it gets to find the right answers. Senior developers sometimes chime in with "it depends!". Which -- while being technically accurate, is also completely unhelpful. What does it depend on? How do we reconcile Best Practices when they conflict with each other? Who is "good" code actually good for? Is perfectly clean code even possible?


We'll learn to find the answers to all of these questions by exploring the discipline of Design (think fancy chairs in museum); and stealing from it shamelessly.

#confreaks #rubyconf2019
Captions: 
	00:00:04,190 --> 00:00:10,269
[Music]

00:00:12,830 --> 00:00:16,260
hi there

00:00:14,220 --> 00:00:18,300
my name is Roman I work at square

00:00:16,260 --> 00:00:21,210
building api's and I'm here to talk to

00:00:18,300 --> 00:00:25,740
you about writing better code now before

00:00:21,210 --> 00:00:27,440
we get started just brief kind of

00:00:25,740 --> 00:00:29,039
warning this is my first time

00:00:27,440 --> 00:00:31,859
professionally speaking at a

00:00:29,039 --> 00:00:37,620
professional conference I'm a little bit

00:00:31,859 --> 00:00:39,510
nervous so if I get stuck thank you this

00:00:37,620 --> 00:00:41,819
is really good practice because if I get

00:00:39,510 --> 00:00:43,679
stuck or start stammering or something

00:00:41,819 --> 00:00:45,120
please give me a round of applause I'll

00:00:43,679 --> 00:00:47,149
take a sip of water and then we'll keep

00:00:45,120 --> 00:00:49,649
going

00:00:47,149 --> 00:00:52,709
now the reason there's a hammer up there

00:00:49,649 --> 00:00:55,139
when talking about writing good code is

00:00:52,709 --> 00:00:57,289
because I'm keenly interested in how the

00:00:55,139 --> 00:00:59,339
human mind relates to the tools we use

00:00:57,289 --> 00:01:01,530
scientists have studied a quirk of the

00:00:59,339 --> 00:01:04,199
brain that effectively accepts the tools

00:01:01,530 --> 00:01:07,170
we use into a representation of our own

00:01:04,199 --> 00:01:09,540
body when we swing a hammer the brain

00:01:07,170 --> 00:01:10,980
treats our hand and the hammer similarly

00:01:09,540 --> 00:01:14,670
it makes no clear distinction between

00:01:10,980 --> 00:01:17,010
the two when we drive a car we think

00:01:14,670 --> 00:01:19,680
just let's turn left we don't think we

00:01:17,010 --> 00:01:21,690
need to move my hands this way and like

00:01:19,680 --> 00:01:24,510
use my feet this way to move the car and

00:01:21,690 --> 00:01:26,940
that combination is absolutely magical a

00:01:24,510 --> 00:01:29,730
good tool is exhilarating to use we

00:01:26,940 --> 00:01:31,080
become augmented we can do something we

00:01:29,730 --> 00:01:33,120
weren't able to do before

00:01:31,080 --> 00:01:34,080
and every time the tool does exactly

00:01:33,120 --> 00:01:37,020
what we want it to

00:01:34,080 --> 00:01:40,140
we get this jolt of joy a feedback loop

00:01:37,020 --> 00:01:42,870
that tells us yes I can do this I am

00:01:40,140 --> 00:01:45,060
powerful when a tool doesn't quite work

00:01:42,870 --> 00:01:46,650
as expected it's one of the most jarring

00:01:45,060 --> 00:01:48,420
experience as possible

00:01:46,650 --> 00:01:51,860
feels almost like our own body is

00:01:48,420 --> 00:01:54,960
betraying us it's entirely unpleasant

00:01:51,860 --> 00:01:57,150
now I would argue that the code rewrite

00:01:54,960 --> 00:01:59,970
is itself a tool for producing future

00:01:57,150 --> 00:02:02,280
software either ourselves or other

00:01:59,970 --> 00:02:06,229
developers will use it to build new

00:02:02,280 --> 00:02:08,789
features to ship new code in the future

00:02:06,229 --> 00:02:10,590
for many of us even if we're building a

00:02:08,789 --> 00:02:12,970
product that code will live on and

00:02:10,590 --> 00:02:14,950
facilitate a lot more products

00:02:12,970 --> 00:02:16,630
than what we're currently working on and

00:02:14,950 --> 00:02:18,490
that means that we are broadly speaking

00:02:16,630 --> 00:02:20,680
designing a tool even if we're not aware

00:02:18,490 --> 00:02:23,290
of it in the moment every time you write

00:02:20,680 --> 00:02:26,040
code and it's really important for the

00:02:23,290 --> 00:02:30,360
tools to be well designed

00:02:26,040 --> 00:02:33,790
Nats agree with me and it's part of why

00:02:30,360 --> 00:02:36,160
he created Ruby the way he did he wants

00:02:33,790 --> 00:02:37,990
people to experience joy when

00:02:36,160 --> 00:02:41,260
programming when using the tool of Ruby

00:02:37,990 --> 00:02:43,270
and I think the same applies to us when

00:02:41,260 --> 00:02:45,370
we write code we must consider not just

00:02:43,270 --> 00:02:48,459
does it work does it work as efficiently

00:02:45,370 --> 00:02:50,050
as it needs to be etc but how will it

00:02:48,459 --> 00:02:53,110
work for the next person who makes a

00:02:50,050 --> 00:02:55,690
change to it and that change aspect is

00:02:53,110 --> 00:02:57,340
really important to me it's why I think

00:02:55,690 --> 00:02:59,050
usability is a better word than

00:02:57,340 --> 00:03:00,970
readability when talking about code

00:02:59,050 --> 00:03:02,500
because it's not static it's something

00:03:00,970 --> 00:03:05,440
that people are going to work with to do

00:03:02,500 --> 00:03:07,480
something with it so we need to ask will

00:03:05,440 --> 00:03:10,000
it make people happy or will it make

00:03:07,480 --> 00:03:12,700
people sad and some of that is really

00:03:10,000 --> 00:03:14,950
selfish I want the code I leave behind

00:03:12,700 --> 00:03:17,019
to be code that I'm happy to work on I

00:03:14,950 --> 00:03:17,320
want others to this do do the same for

00:03:17,019 --> 00:03:20,290
me

00:03:17,320 --> 00:03:23,800
but some of it is also altruistic being

00:03:20,290 --> 00:03:26,230
kind to my co-workers really matters to

00:03:23,800 --> 00:03:30,850
me it is a core motivation in my

00:03:26,230 --> 00:03:32,790
day-to-day work so what can we do to

00:03:30,850 --> 00:03:37,090
make code better what tools do we have

00:03:32,790 --> 00:03:38,680
for shaping code one of my big

00:03:37,090 --> 00:03:41,019
revelations when I entered the

00:03:38,680 --> 00:03:44,530
professional software world after

00:03:41,019 --> 00:03:46,180
graduating college was refactoring code

00:03:44,530 --> 00:03:48,700
this idea that you can move code around

00:03:46,180 --> 00:03:51,430
and changes shape without changing its

00:03:48,700 --> 00:03:55,060
functionality and Martin Fowler wrote to

00:03:51,430 --> 00:03:56,890
the canonical book that catalogs a bunch

00:03:55,060 --> 00:04:00,580
of refactoring patterns and what you can

00:03:56,890 --> 00:04:03,430
do to code to change its shape for

00:04:00,580 --> 00:04:06,220
example there's a hide delegate pattern

00:04:03,430 --> 00:04:08,670
where if your object depends on an

00:04:06,220 --> 00:04:11,590
object that depends on an object you can

00:04:08,670 --> 00:04:14,769
remove the dependency on like the

00:04:11,590 --> 00:04:16,030
neighbor by adding a little method you

00:04:14,769 --> 00:04:18,130
don't need to read the details don't

00:04:16,030 --> 00:04:19,989
strain your eyes what I find really

00:04:18,130 --> 00:04:22,330
interesting about refactoring is is that

00:04:19,989 --> 00:04:24,570
for almost every single refactoring

00:04:22,330 --> 00:04:26,500
there is an equal and opposite reaction

00:04:24,570 --> 00:04:31,120
that moves code in the other

00:04:26,500 --> 00:04:33,640
direction so whether to move code

00:04:31,120 --> 00:04:36,670
forward or backwards through these is a

00:04:33,640 --> 00:04:38,020
judgment call there are code smells to

00:04:36,670 --> 00:04:39,970
look for but different people smell

00:04:38,020 --> 00:04:41,620
different things as bad so the real

00:04:39,970 --> 00:04:44,350
answer that senior program is

00:04:41,620 --> 00:04:50,410
programmers over often tell you is it

00:04:44,350 --> 00:04:56,580
depends I see you senior developers I

00:04:50,410 --> 00:04:58,840
see you but that's kind of awkward and

00:04:56,580 --> 00:05:01,180
we really want to have decision

00:04:58,840 --> 00:05:03,460
frameworks we want to know where to go

00:05:01,180 --> 00:05:05,290
are there frameworks that help us choose

00:05:03,460 --> 00:05:09,300
what direction to push the code in and

00:05:05,290 --> 00:05:09,300
the answer is actually yes there are

00:05:09,930 --> 00:05:15,040
there's concepts like dry don't repeat

00:05:13,360 --> 00:05:18,940
yourself that's the first concept that I

00:05:15,040 --> 00:05:21,700
ever learned in term in this group and

00:05:18,940 --> 00:05:23,950
it's if code looks similar even if you

00:05:21,700 --> 00:05:25,720
kind of step away and squint at it and

00:05:23,950 --> 00:05:27,190
the shape of it looks similar there's

00:05:25,720 --> 00:05:29,620
probably something there to refactor

00:05:27,190 --> 00:05:32,860
there's probably a concept that you can

00:05:29,620 --> 00:05:36,010
name and you can refactor and it makes

00:05:32,860 --> 00:05:40,479
code easier to work with there's also a

00:05:36,010 --> 00:05:47,340
few other concepts solid is actually a

00:05:40,479 --> 00:05:49,630
whole mess of them all put together and

00:05:47,340 --> 00:05:52,510
kind of the thing to take away from all

00:05:49,630 --> 00:05:55,840
of these they're different ways to

00:05:52,510 --> 00:05:58,360
approach the same general idea which has

00:05:55,840 --> 00:06:00,310
modular eyes all the things right split

00:05:58,360 --> 00:06:03,970
up your code make it into tiny modules

00:06:00,310 --> 00:06:06,370
that work well together and well in our

00:06:03,970 --> 00:06:08,500
strive for perfection developers tend to

00:06:06,370 --> 00:06:10,180
over optimize we worked so hard to write

00:06:08,500 --> 00:06:14,560
clean code that we lose the forest for

00:06:10,180 --> 00:06:19,810
the trees and create you know web

00:06:14,560 --> 00:06:22,830
objects strategy factory factory it's a

00:06:19,810 --> 00:06:22,830
java joke mostly

00:06:25,080 --> 00:06:29,550
and so perhaps surprising nobody there

00:06:27,750 --> 00:06:32,879
is an equal and opposite reaction

00:06:29,550 --> 00:06:33,659
to every code design principle for dry

00:06:32,879 --> 00:06:36,389
there's yakhni

00:06:33,659 --> 00:06:38,550
there's this idea popularized by Sandi

00:06:36,389 --> 00:06:40,050
Metz within the Ruby community that the

00:06:38,550 --> 00:06:42,720
wrong abstraction is much worse than

00:06:40,050 --> 00:06:44,759
duplication and there's this idea of

00:06:42,720 --> 00:06:47,159
composition over inheritance which in my

00:06:44,759 --> 00:06:49,349
mind is a rebellion against solid which

00:06:47,159 --> 00:06:52,560
is how to do inheritance right in Java

00:06:49,349 --> 00:06:54,120
mostly and these counter reactions

00:06:52,560 --> 00:06:55,800
aren't just theoretical all of these

00:06:54,120 --> 00:06:58,050
were invented by very frustrated

00:06:55,800 --> 00:07:00,389
engineers dealing with real production

00:06:58,050 --> 00:07:02,520
issues let me illustrate this with a

00:07:00,389 --> 00:07:06,870
specific issue of encountered with toad

00:07:02,520 --> 00:07:09,960
there was perhaps overdry or at least

00:07:06,870 --> 00:07:12,840
difficult to deal with it without

00:07:09,960 --> 00:07:14,819
breaking the world so let's say we have

00:07:12,840 --> 00:07:17,039
a very simple HR application and it

00:07:14,819 --> 00:07:18,960
needs to represent employees it's going

00:07:17,039 --> 00:07:21,330
to have a page to show employees and

00:07:18,960 --> 00:07:23,969
this is the code to find an employee and

00:07:21,330 --> 00:07:26,400
send it up over to the front end it also

00:07:23,969 --> 00:07:28,469
have a page to lists employees gets a

00:07:26,400 --> 00:07:30,539
bunch of employees and displays all of

00:07:28,469 --> 00:07:32,909
them to the front end a pretty

00:07:30,539 --> 00:07:34,590
straightforward code and the presenter

00:07:32,909 --> 00:07:36,509
that both of these methods are using

00:07:34,590 --> 00:07:38,789
looks something like this there's a

00:07:36,509 --> 00:07:41,400
serialized method it takes the employees

00:07:38,789 --> 00:07:44,069
data and shoves them into JSON format or

00:07:41,400 --> 00:07:47,550
something and this is pretty

00:07:44,069 --> 00:07:49,710
straightforward it works great and then

00:07:47,550 --> 00:07:53,250
a feature request comes in add a job

00:07:49,710 --> 00:07:55,590
title to the employee page and so if I

00:07:53,250 --> 00:07:57,120
put on my developer hat and roll up my

00:07:55,590 --> 00:07:59,759
sleeves and try to make this change

00:07:57,120 --> 00:08:01,800
given this code I look at the show page

00:07:59,759 --> 00:08:04,319
and look at how the employee is being

00:08:01,800 --> 00:08:05,940
presented this isn't actually showing me

00:08:04,319 --> 00:08:08,460
where the fields are so I click into

00:08:05,940 --> 00:08:11,180
employee presenter and like oh serialize

00:08:08,460 --> 00:08:13,500
employee that's where the fields are

00:08:11,180 --> 00:08:16,889
this is simple I know what to do I'll

00:08:13,500 --> 00:08:19,050
add a field here for the job title so I

00:08:16,889 --> 00:08:22,370
find a job and I print it out and I'm

00:08:19,050 --> 00:08:22,370
done easy money

00:08:24,620 --> 00:08:30,870
remember that presenter is actually used

00:08:27,479 --> 00:08:36,060
in more than one place and let's zoom in

00:08:30,870 --> 00:08:37,900
on the other use case enhance we go

00:08:36,060 --> 00:08:39,760
through every employee

00:08:37,900 --> 00:08:42,430
and we render it again and again and

00:08:39,760 --> 00:08:44,710
again which means that if looking up

00:08:42,430 --> 00:08:47,190
that employees job is a database call

00:08:44,710 --> 00:08:49,630
because the jobs live in another table

00:08:47,190 --> 00:08:52,660
we just created an N plus one querying

00:08:49,630 --> 00:08:55,510
which means basically for every single

00:08:52,660 --> 00:08:57,070
employee we forget that we've talked to

00:08:55,510 --> 00:08:59,970
the database already and we ask the

00:08:57,070 --> 00:09:02,710
database hey hello can you tell me what

00:08:59,970 --> 00:09:07,480
new and new information there is and

00:09:02,710 --> 00:09:10,540
this is a problem this will crash your

00:09:07,480 --> 00:09:13,690
server it'll slow down your page it'll

00:09:10,540 --> 00:09:17,380
page you at 5:00 a.m. not that I know

00:09:13,690 --> 00:09:20,920
that from experience or anything so

00:09:17,380 --> 00:09:22,060
let's talk about what failed here one

00:09:20,920 --> 00:09:23,500
could say that we should have never

00:09:22,060 --> 00:09:25,690
added the work of looking up the

00:09:23,500 --> 00:09:28,540
employee into the presenter it's too

00:09:25,690 --> 00:09:30,190
much responsibility for that class maybe

00:09:28,540 --> 00:09:33,100
it should have been passed in and Stud

00:09:30,190 --> 00:09:34,990
and if I was working with only people

00:09:33,100 --> 00:09:37,950
who were really really solid at

00:09:34,990 --> 00:09:42,400
separating responsibilities and being

00:09:37,950 --> 00:09:45,070
exceptional and dealt with the code

00:09:42,400 --> 00:09:48,190
exactly as I would have then we wouldn't

00:09:45,070 --> 00:09:51,400
have a problem but users will surprise

00:09:48,190 --> 00:09:53,470
him I would never think of hanging up a

00:09:51,400 --> 00:09:55,750
hammer like this and I'm not sure it was

00:09:53,470 --> 00:09:58,660
designed for that kind of freaks me out

00:09:55,750 --> 00:10:01,840
to be honest what if it falls will it

00:09:58,660 --> 00:10:03,430
hurt somebody but if you see something

00:10:01,840 --> 00:10:05,830
like this happen if a single person does

00:10:03,430 --> 00:10:08,110
something you didn't expect I guarantee

00:10:05,830 --> 00:10:11,920
it other people will as well so you have

00:10:08,110 --> 00:10:14,050
to start designing for it so maybe the

00:10:11,920 --> 00:10:15,310
original sin is actually combining two

00:10:14,050 --> 00:10:18,100
things which don't belong together

00:10:15,310 --> 00:10:19,780
because they don't change together maybe

00:10:18,100 --> 00:10:24,040
there needed to be two presenters all

00:10:19,780 --> 00:10:25,870
along and you know just name the other

00:10:24,040 --> 00:10:28,960
one employee lists presenter problem

00:10:25,870 --> 00:10:32,260
solved now change in one doesn't affect

00:10:28,960 --> 00:10:34,270
the other and so everybody's happy and

00:10:32,260 --> 00:10:36,040
if you're groaning at this because it's

00:10:34,270 --> 00:10:38,020
exactly the same code written twice in

00:10:36,040 --> 00:10:40,780
two different classes I'm with you this

00:10:38,020 --> 00:10:43,470
pains me to see this but at least it

00:10:40,780 --> 00:10:46,690
won't wake you up at 5:00 a.m. right and

00:10:43,470 --> 00:10:48,820
so I've seen teams argue for hours about

00:10:46,690 --> 00:10:49,840
questions that are basically like shaped

00:10:48,820 --> 00:10:51,430
like this

00:10:49,840 --> 00:10:53,980
should we combine this code or should we

00:10:51,430 --> 00:10:55,870
not will it change together or not how

00:10:53,980 --> 00:10:58,150
should we shape the code to have it be

00:10:55,870 --> 00:11:02,650
best the best representation of the

00:10:58,150 --> 00:11:04,780
concept under hand and I think we

00:11:02,650 --> 00:11:07,510
actually over focus on code structure

00:11:04,780 --> 00:11:09,910
and that's part of the problem the

00:11:07,510 --> 00:11:11,440
actual original sin is this idea that

00:11:09,910 --> 00:11:14,620
we're trying to achieve clean code in

00:11:11,440 --> 00:11:16,450
the first place when looking at other

00:11:14,620 --> 00:11:19,450
tools we don't refer to them as cleanly

00:11:16,450 --> 00:11:21,640
designed we don't say oh that rake has

00:11:19,450 --> 00:11:24,280
too many prongs it's not cleanly

00:11:21,640 --> 00:11:27,370
designed enough no we focus on how well

00:11:24,280 --> 00:11:30,520
it works at gathering leaves we focus on

00:11:27,370 --> 00:11:33,100
the work that we want to do with it and

00:11:30,520 --> 00:11:35,080
whether it performs it well the whole

00:11:33,100 --> 00:11:38,350
idea of calling them a limitation of a

00:11:35,080 --> 00:11:40,870
tool pure in shaming people who don't

00:11:38,350 --> 00:11:43,900
adhere to our particular standards for

00:11:40,870 --> 00:11:45,280
that purity is toxic and if you have

00:11:43,900 --> 00:11:47,100
slightly different views on what that

00:11:45,280 --> 00:11:50,170
purity should look like

00:11:47,100 --> 00:11:53,860
hoo-boy that's an easy way to bring it a

00:11:50,170 --> 00:11:56,110
team to a standstill so perhaps we are

00:11:53,860 --> 00:11:57,760
asking the wrong questions perhaps we

00:11:56,110 --> 00:12:00,900
are when we are looking at two pieces of

00:11:57,760 --> 00:12:02,980
code that perform an identical operation

00:12:00,900 --> 00:12:05,110
and by the way there's not react

00:12:02,980 --> 00:12:07,900
Turing's for going between recursive

00:12:05,110 --> 00:12:09,400
code or non recursive code but people

00:12:07,900 --> 00:12:11,170
still debate which one is better for a

00:12:09,400 --> 00:12:12,430
particular algorithm and you need to

00:12:11,170 --> 00:12:16,420
have answers if you're going to write

00:12:12,430 --> 00:12:17,830
something specific but maybe the

00:12:16,420 --> 00:12:20,730
question isn't which one of them is

00:12:17,830 --> 00:12:23,140
better in an absolute moralistic sense

00:12:20,730 --> 00:12:25,510
to illustrate it a little bit let's take

00:12:23,140 --> 00:12:27,850
the analogy a little bit further let's

00:12:25,510 --> 00:12:30,130
talk about other tools the hammer on the

00:12:27,850 --> 00:12:32,320
Left is used for working on gold

00:12:30,130 --> 00:12:35,040
jewellery and stamping patterns on it

00:12:32,320 --> 00:12:38,620
the one on the right is a sledge hammer

00:12:35,040 --> 00:12:42,910
so this and this which one of them is

00:12:38,620 --> 00:12:44,740
better as a tool like on its face that

00:12:42,910 --> 00:12:46,570
question is completely nonsensical the

00:12:44,740 --> 00:12:50,980
question is what are you trying to use

00:12:46,570 --> 00:12:52,590
it for and who's going to be using it

00:12:50,980 --> 00:12:54,520
each tool achieves a different result

00:12:52,590 --> 00:12:58,480
used by different people with different

00:12:54,520 --> 00:13:00,640
expectations in different contexts so to

00:12:58,480 --> 00:13:02,080
figure out which to build we need to

00:13:00,640 --> 00:13:03,080
remember the most important aspect of

00:13:02,080 --> 00:13:07,160
tools and that's

00:13:03,080 --> 00:13:09,110
they're made for people to use them in

00:13:07,160 --> 00:13:11,750
my opinion as I was doing research on

00:13:09,110 --> 00:13:15,320
Flickr about hammers this is by far the

00:13:11,750 --> 00:13:18,170
best hammer it's structurally unsound it

00:13:15,320 --> 00:13:22,700
won't drive a nail but it's such a joy

00:13:18,170 --> 00:13:24,980
to play with and Matt's agrees with me

00:13:22,700 --> 00:13:27,830
again I mean not about the hammers I

00:13:24,980 --> 00:13:30,620
haven't showed him the hammers but about

00:13:27,830 --> 00:13:32,840
the need to Center people and so I want

00:13:30,620 --> 00:13:36,490
to talk to you about design in a general

00:13:32,840 --> 00:13:38,780
scent sense that goes beyond code

00:13:36,490 --> 00:13:40,600
fundamentally design is about creative

00:13:38,780 --> 00:13:42,830
solutions to complicated problems

00:13:40,600 --> 00:13:45,680
usually problems that are mix of

00:13:42,830 --> 00:13:47,780
constraints and open-ended questions the

00:13:45,680 --> 00:13:50,870
field of design in some sense is a field

00:13:47,780 --> 00:13:52,580
of applied creativity and it's

00:13:50,870 --> 00:13:55,040
frameworks help designers build up

00:13:52,580 --> 00:13:57,260
context about a subject so that they can

00:13:55,040 --> 00:13:59,920
take intuitive leaps to what are at

00:13:57,260 --> 00:14:02,480
times completely unexpected solutions a

00:13:59,920 --> 00:14:05,690
lot of the point of those frameworks is

00:14:02,480 --> 00:14:07,730
to get your brain to a port where that

00:14:05,690 --> 00:14:11,540
to a point where that intuitive leap is

00:14:07,730 --> 00:14:13,430
easier to make and is easier to do it's

00:14:11,540 --> 00:14:21,230
about improving the odds of those

00:14:13,430 --> 00:14:23,930
creative leaps more specifically since

00:14:21,230 --> 00:14:27,110
we're centering humans I want to talk to

00:14:23,930 --> 00:14:29,380
you about human centered design and it's

00:14:27,110 --> 00:14:31,670
a particular perspective on design

00:14:29,380 --> 00:14:37,070
that's been popularized over the past

00:14:31,670 --> 00:14:39,320
thirty years or so that centers on

00:14:37,070 --> 00:14:42,170
people as a central narrative to drive

00:14:39,320 --> 00:14:44,620
decisions throughout a design process it

00:14:42,170 --> 00:14:48,050
was coined by Don Norman's research lab

00:14:44,620 --> 00:14:50,270
Don Norman is this guy he is a cognitive

00:14:48,050 --> 00:14:52,310
scientist turned engineer and human

00:14:50,270 --> 00:14:56,180
factors researcher he has worked as a

00:14:52,310 --> 00:14:57,530
safety investigator for aviation for a

00:14:56,180 --> 00:15:00,130
bunch of other industries as well

00:14:57,530 --> 00:15:02,960
including being one of the investigators

00:15:00,130 --> 00:15:05,840
selected to investigate the Three Mile

00:15:02,960 --> 00:15:08,650
Island incident this guy really knows

00:15:05,840 --> 00:15:12,500
about how humans interact with tools and

00:15:08,650 --> 00:15:14,660
he's written a book about it this book

00:15:12,500 --> 00:15:16,089
is considered the canonical text and

00:15:14,660 --> 00:15:17,829
usability design

00:15:16,089 --> 00:15:20,470
and if you take nothing else away from

00:15:17,829 --> 00:15:22,720
the talk and you haven't read this book

00:15:20,470 --> 00:15:23,350
yet please look it up and read it it's

00:15:22,720 --> 00:15:25,300
amazing

00:15:23,350 --> 00:15:27,610
by the way notice the teapot on the

00:15:25,300 --> 00:15:30,610
cover is a piece of art called the

00:15:27,610 --> 00:15:35,199
masochist teapot because it's impossible

00:15:30,610 --> 00:15:37,509
to use so human centered design

00:15:35,199 --> 00:15:39,579
sometimes also referred to as user

00:15:37,509 --> 00:15:43,079
centered design I like human because

00:15:39,579 --> 00:15:45,970
it's a broader word centers on three

00:15:43,079 --> 00:15:48,430
points of view for an analysis the

00:15:45,970 --> 00:15:51,670
person the context and the action

00:15:48,430 --> 00:15:56,259
they're going to take so let's talk

00:15:51,670 --> 00:15:58,480
about these individually when talking

00:15:56,259 --> 00:16:00,339
about a person when using a tool for

00:15:58,480 --> 00:16:03,459
example a hammer you're gonna want to

00:16:00,339 --> 00:16:05,199
know how strong they are how large is

00:16:03,459 --> 00:16:07,720
their hand what grip are they going to

00:16:05,199 --> 00:16:10,779
need are they trained in using a hammer

00:16:07,720 --> 00:16:12,699
for example if it's a large and heavy

00:16:10,779 --> 00:16:14,620
hammer are they expected to know the

00:16:12,699 --> 00:16:16,209
proper technique to use it without

00:16:14,620 --> 00:16:18,040
hurting themselves or do you need to

00:16:16,209 --> 00:16:20,980
design it so that they can't hurt

00:16:18,040 --> 00:16:22,329
themselves even if they use it wrong all

00:16:20,980 --> 00:16:25,480
of these things are things to keep in

00:16:22,329 --> 00:16:28,199
mind for coders we also need to keep

00:16:25,480 --> 00:16:30,850
this in mind is the coder going to be a

00:16:28,199 --> 00:16:33,579
senior tech lead who has decades of

00:16:30,850 --> 00:16:37,240
experience has been slinging code for

00:16:33,579 --> 00:16:40,059
ages will know how to debug your really

00:16:37,240 --> 00:16:44,259
gnarly meta programming issues in under

00:16:40,059 --> 00:16:47,290
two hours or is the person maybe at

00:16:44,259 --> 00:16:50,009
their very first tech job without having

00:16:47,290 --> 00:16:53,649
run production code ever in their life

00:16:50,009 --> 00:16:57,959
and needs a lot of hand-holding and

00:16:53,649 --> 00:16:57,959
doesn't even know about refactoring yet

00:16:58,050 --> 00:17:06,130
taking this into account is really

00:17:00,429 --> 00:17:08,169
important and the key here is to be

00:17:06,130 --> 00:17:12,100
really specific and make them real in

00:17:08,169 --> 00:17:15,159
your mind because it's not about drawing

00:17:12,100 --> 00:17:17,679
out those characteristics to like micro

00:17:15,159 --> 00:17:20,169
target a Facebook app app atom or

00:17:17,679 --> 00:17:22,029
something it's about building them up in

00:17:20,169 --> 00:17:24,630
your mind so you have an intuition about

00:17:22,029 --> 00:17:28,990
what they might think or they might do

00:17:24,630 --> 00:17:29,950
and if you don't have it built up go out

00:17:28,990 --> 00:17:32,110
and observe how

00:17:29,950 --> 00:17:34,590
those types of people actually use the

00:17:32,110 --> 00:17:36,910
tools that you're thinking about

00:17:34,590 --> 00:17:39,640
observing a junior engineer interacting

00:17:36,910 --> 00:17:41,620
with code for the first time on a new

00:17:39,640 --> 00:17:43,540
project is really really different than

00:17:41,620 --> 00:17:46,390
observing a senior engineer do this and

00:17:43,540 --> 00:17:48,310
if you haven't seen it in a while go

00:17:46,390 --> 00:17:50,710
back and ask one of your teammates to

00:17:48,310 --> 00:17:52,450
take a look at how they work just kind

00:17:50,710 --> 00:17:54,430
of silently observe maybe ask them why

00:17:52,450 --> 00:17:57,640
they're doing something do a usability

00:17:54,430 --> 00:18:00,040
study on your team the other key is

00:17:57,640 --> 00:18:01,660
explore the edge cases there's a reason

00:18:00,040 --> 00:18:04,030
I picked up the contrast of somebody

00:18:01,660 --> 00:18:06,340
super experienced where somebody very

00:18:04,030 --> 00:18:08,590
junior because their needs are going to

00:18:06,340 --> 00:18:10,750
be different and their expectations and

00:18:08,590 --> 00:18:16,750
the mistakes they make are going to be

00:18:10,750 --> 00:18:18,310
different next up is context and the

00:18:16,750 --> 00:18:19,780
hammers you designed to be used in

00:18:18,310 --> 00:18:21,370
different settings they're going to have

00:18:19,780 --> 00:18:23,230
really different requirements and the

00:18:21,370 --> 00:18:24,460
people using them are going to have

00:18:23,230 --> 00:18:26,680
different points of view and what's

00:18:24,460 --> 00:18:29,110
important about those hammers if you use

00:18:26,680 --> 00:18:31,030
a hammer in an operating room one of the

00:18:29,110 --> 00:18:33,580
key things about it is it must be easy

00:18:31,030 --> 00:18:35,830
to sterilize if you can't sterilize it's

00:18:33,580 --> 00:18:38,380
completely useless because you use it

00:18:35,830 --> 00:18:41,950
once and you throw it away on a farm

00:18:38,380 --> 00:18:44,530
that doesn't matter at all in the

00:18:41,950 --> 00:18:47,040
context of code there are similar

00:18:44,530 --> 00:18:47,040
questions

00:18:59,250 --> 00:19:02,790
and for that I want to tell you a little

00:19:00,810 --> 00:19:06,300
bit of a story I was working on a side

00:19:02,790 --> 00:19:08,040
project with a friend of mine and I

00:19:06,300 --> 00:19:10,950
couldn't believe the code he was writing

00:19:08,040 --> 00:19:14,780
it was gnarly it was if statements in

00:19:10,950 --> 00:19:17,130
for loops in maps and if statements I

00:19:14,780 --> 00:19:19,920
couldn't make heads or tails of how

00:19:17,130 --> 00:19:21,840
anybody could write code that dirty I'm

00:19:19,920 --> 00:19:23,670
used to writing code really really

00:19:21,840 --> 00:19:26,820
cleanly name everything really well very

00:19:23,670 --> 00:19:28,560
carefully and like we really chafed at

00:19:26,820 --> 00:19:31,140
each other on this process and this

00:19:28,560 --> 00:19:33,120
project until I realized that he comes

00:19:31,140 --> 00:19:35,430
from a movie

00:19:33,120 --> 00:19:37,320
animation industry and he has a much

00:19:35,430 --> 00:19:39,330
experience as me it was like five years

00:19:37,320 --> 00:19:42,420
of experience each at this point in time

00:19:39,330 --> 00:19:45,480
and when animating a movie when

00:19:42,420 --> 00:19:46,500
animating the textures for like the

00:19:45,480 --> 00:19:50,070
waves in moaña

00:19:46,500 --> 00:19:52,170
or the snow and frozen as long as you

00:19:50,070 --> 00:19:54,300
render the thing once and it looks

00:19:52,170 --> 00:19:55,830
really good you don't really need to go

00:19:54,300 --> 00:19:58,160
back and refactor it and use it again

00:19:55,830 --> 00:20:02,370
for other waves in another movie

00:19:58,160 --> 00:20:04,200
necessarily the point the point of your

00:20:02,370 --> 00:20:06,300
approach in your context is you have to

00:20:04,200 --> 00:20:08,400
do it fast it has to look good you have

00:20:06,300 --> 00:20:11,430
to be able to change some variables and

00:20:08,400 --> 00:20:13,020
see what it looks like in new I'm used

00:20:11,430 --> 00:20:15,690
to a product development world where

00:20:13,020 --> 00:20:18,360
products last years and years and get

00:20:15,690 --> 00:20:20,010
developed over time and so there's a

00:20:18,360 --> 00:20:22,950
whole different context to how I

00:20:20,010 --> 00:20:24,390
approach those problems and the project

00:20:22,950 --> 00:20:25,890
we were working on where actually was

00:20:24,390 --> 00:20:28,260
actually if in neither one of those

00:20:25,890 --> 00:20:30,960
worlds so neither one of us was

00:20:28,260 --> 00:20:33,030
absolutely right what we needed to do is

00:20:30,960 --> 00:20:34,830
talk to each other and figure out what

00:20:33,030 --> 00:20:40,740
approach actually makes sense for that

00:20:34,830 --> 00:20:42,750
project in that particular time so

00:20:40,740 --> 00:20:45,660
adjusting to other people's context is

00:20:42,750 --> 00:20:47,700
really important and when thinking about

00:20:45,660 --> 00:20:48,930
what context people have you need to

00:20:47,700 --> 00:20:50,940
think about the knowledge they're going

00:20:48,930 --> 00:20:54,930
to approach the problem with how they're

00:20:50,940 --> 00:20:56,540
going to gain it you need to figure out

00:20:54,930 --> 00:20:58,380
what their intention is going to be

00:20:56,540 --> 00:21:00,540
they're not going to have all the

00:20:58,380 --> 00:21:03,060
knowledge you have and their intention

00:21:00,540 --> 00:21:05,430
is going to be very specific and often a

00:21:03,060 --> 00:21:07,230
very specific change it's a web form

00:21:05,430 --> 00:21:08,820
most likely people are going to add

00:21:07,230 --> 00:21:11,930
fields and remove fields from it or

00:21:08,820 --> 00:21:14,010
reskin it

00:21:11,930 --> 00:21:15,720
you can kind of guess what the

00:21:14,010 --> 00:21:18,690
intentions are you don't have to be

00:21:15,720 --> 00:21:20,340
perfect like telling the truth tell you

00:21:18,690 --> 00:21:22,320
don't have to be perfect at being able

00:21:20,340 --> 00:21:24,150
to predict the future but you can take

00:21:22,320 --> 00:21:26,280
some educated guesses and explore the

00:21:24,150 --> 00:21:29,010
edge cases again and again the point is

00:21:26,280 --> 00:21:30,450
to build up your intuition and the last

00:21:29,010 --> 00:21:32,550
thing you need to keep track of is the

00:21:30,450 --> 00:21:34,320
social environment are they going to be

00:21:32,550 --> 00:21:36,450
well supported is there going to be

00:21:34,320 --> 00:21:38,280
pairing are people from another team

00:21:36,450 --> 00:21:40,170
entirely going to be shipping code to

00:21:38,280 --> 00:21:41,610
your team are they going to feel like

00:21:40,170 --> 00:21:43,740
they have enough ownership to change

00:21:41,610 --> 00:21:46,470
your structure or do you need to get the

00:21:43,740 --> 00:21:48,570
structure really right because people

00:21:46,470 --> 00:21:50,670
will ship code to it and will be really

00:21:48,570 --> 00:21:52,230
afraid to touch it these are all really

00:21:50,670 --> 00:21:54,480
important to consider to make the tool

00:21:52,230 --> 00:21:57,990
actually useful for the people that are

00:21:54,480 --> 00:22:02,100
going to be working on it and finally

00:21:57,990 --> 00:22:05,070
let's talk about action this is the

00:22:02,100 --> 00:22:07,200
deepest concept to some extent and I'm

00:22:05,070 --> 00:22:10,440
not going to cover it in the depth of

00:22:07,200 --> 00:22:12,390
deserves to cover it in depth you really

00:22:10,440 --> 00:22:14,460
have to read books about it because

00:22:12,390 --> 00:22:16,920
there's so much to how we perceive

00:22:14,460 --> 00:22:18,740
things and translate intention into

00:22:16,920 --> 00:22:22,500
movement and into products in the world

00:22:18,740 --> 00:22:25,860
but I will share with you this diagram

00:22:22,500 --> 00:22:27,660
from Don Norman's book about where

00:22:25,860 --> 00:22:31,140
mistakes happen and how inaction

00:22:27,660 --> 00:22:33,470
translates to intention and then

00:22:31,140 --> 00:22:40,110
performance and then back up again and

00:22:33,470 --> 00:22:43,410
in this diagram what's important to look

00:22:40,110 --> 00:22:45,000
at is how we can kind of look at the

00:22:43,410 --> 00:22:46,590
different steps that people take in

00:22:45,000 --> 00:22:48,780
interacting with a piece of code or a

00:22:46,590 --> 00:22:50,760
tool and provide either information

00:22:48,780 --> 00:22:52,890
ahead of time before they choose to act

00:22:50,760 --> 00:22:54,990
about what's going to be the result of

00:22:52,890 --> 00:22:57,990
their action or provide them feedback

00:22:54,990 --> 00:23:01,770
after their act in order to direct them

00:22:57,990 --> 00:23:04,110
to better paths and when people approach

00:23:01,770 --> 00:23:07,020
a tool they're not often going to use

00:23:04,110 --> 00:23:09,240
it's in an extreme way right away they

00:23:07,020 --> 00:23:11,220
get familiar with it first if it's a

00:23:09,240 --> 00:23:13,740
hammer they'll tap lightly on the nail

00:23:11,220 --> 00:23:16,230
before taking a larger swing just to get

00:23:13,740 --> 00:23:17,850
used to the tool right same thing

00:23:16,230 --> 00:23:20,580
happens in with code somebody's not

00:23:17,850 --> 00:23:22,230
going to ship a completely new

00:23:20,580 --> 00:23:24,630
architecture for the code you're working

00:23:22,230 --> 00:23:25,380
on they're going to first try small

00:23:24,630 --> 00:23:27,570
changes

00:23:25,380 --> 00:23:29,760
how the system reacts to those and build

00:23:27,570 --> 00:23:31,740
up their confidence from there and if

00:23:29,760 --> 00:23:34,020
you do your job well if you write the

00:23:31,740 --> 00:23:35,670
code in a way that adjusts their

00:23:34,020 --> 00:23:39,870
behaviors and guides them with feedback

00:23:35,670 --> 00:23:42,360
and good error messages they're going to

00:23:39,870 --> 00:23:44,970
grow confidence much more quickly and

00:23:42,360 --> 00:23:50,270
they're going to not cause subs that

00:23:44,970 --> 00:23:53,280
wake you up at 5:00 a.m. so the keys

00:23:50,270 --> 00:23:57,570
when thinking about action are the

00:23:53,280 --> 00:24:00,060
perception and then the action and then

00:23:57,570 --> 00:24:03,810
the feedback you perceive a thing before

00:24:00,060 --> 00:24:05,580
you act on it you act on it you get

00:24:03,810 --> 00:24:08,670
feedback you reflect on it and then you

00:24:05,580 --> 00:24:10,470
repeat the cycle again and at every one

00:24:08,670 --> 00:24:12,570
of those steps there can be mistakes and

00:24:10,470 --> 00:24:16,800
there can be opportunities to make that

00:24:12,570 --> 00:24:19,110
cycle better so let's just touch

00:24:16,800 --> 00:24:22,170
floating-point again human centered

00:24:19,110 --> 00:24:24,300
design is a framework for helping you

00:24:22,170 --> 00:24:26,850
make decisions and communicate to others

00:24:24,300 --> 00:24:29,970
about those decisions from the point of

00:24:26,850 --> 00:24:33,600
view of a person their context the

00:24:29,970 --> 00:24:35,340
action they're going to take and I

00:24:33,600 --> 00:24:38,640
believe you can use this to resolve

00:24:35,340 --> 00:24:40,260
those arguments that you have to step

00:24:38,640 --> 00:24:43,500
back from looking at the structure and

00:24:40,260 --> 00:24:45,630
talk about who's it going to affect does

00:24:43,500 --> 00:24:48,060
it make it less risky for them to do

00:24:45,630 --> 00:24:50,520
this change does it help them do it in

00:24:48,060 --> 00:24:53,430
some way and if the answer is neither

00:24:50,520 --> 00:24:54,810
structure does much for the user doesn't

00:24:53,430 --> 00:24:56,820
matter choose one of them and move on

00:24:54,810 --> 00:25:00,600
with your life like sometimes it

00:24:56,820 --> 00:25:02,730
literally doesn't matter flip a coin if

00:25:00,600 --> 00:25:07,500
you can't get back to how it affects

00:25:02,730 --> 00:25:11,760
people then maybe the decision isn't

00:25:07,500 --> 00:25:14,760
that important in the first place now I

00:25:11,760 --> 00:25:17,220
want to go back to the toad problem we

00:25:14,760 --> 00:25:18,900
were faced with earlier we have a

00:25:17,220 --> 00:25:24,630
solution to the quandary whether to have

00:25:18,900 --> 00:25:27,570
two presenters or one our answer was to

00:25:24,630 --> 00:25:30,750
just have the one presenter but with a

00:25:27,570 --> 00:25:33,630
caveat what we did was we looked at

00:25:30,750 --> 00:25:38,030
where it's being used and realized that

00:25:33,630 --> 00:25:38,030
it's very likely for it to be changed

00:25:38,999 --> 00:25:42,999
unintentionally causing side effects in

00:25:41,619 --> 00:25:45,759
a different place that a person isn't

00:25:42,999 --> 00:25:49,629
looking at and so what we did is we

00:25:45,759 --> 00:25:51,639
changed that part of the code to provide

00:25:49,629 --> 00:25:54,879
better affordances and better feedback

00:25:51,639 --> 00:25:58,019
we added this thing that we call without

00:25:54,879 --> 00:26:00,970
DB which wraps a block of code and

00:25:58,019 --> 00:26:02,590
replaces your database connection with a

00:26:00,970 --> 00:26:07,210
really simple class that throws an

00:26:02,590 --> 00:26:09,039
exception if it's used and so we kind of

00:26:07,210 --> 00:26:10,779
focused that back thought about the

00:26:09,039 --> 00:26:12,609
failure cases how the system can guide

00:26:10,779 --> 00:26:15,399
people to better to better behavior

00:26:12,609 --> 00:26:17,850
without expecting every single person to

00:26:15,399 --> 00:26:20,859
always code perfectly every time and

00:26:17,850 --> 00:26:22,299
real we realize that we can change the

00:26:20,859 --> 00:26:25,629
code in a way that provides that

00:26:22,299 --> 00:26:27,850
feedback now if somebody is not looking

00:26:25,629 --> 00:26:29,649
at this class they will be warned if

00:26:27,850 --> 00:26:32,529
they're if they're going to do something

00:26:29,649 --> 00:26:34,570
dangerous and only if they're going to

00:26:32,529 --> 00:26:36,820
do something dangerous this completely

00:26:34,570 --> 00:26:39,070
gets out of their way if they're doing

00:26:36,820 --> 00:26:41,529
the safe thing and that's another

00:26:39,070 --> 00:26:45,340
important aspect about tools whose tools

00:26:41,529 --> 00:26:47,080
should get out of your way if you're not

00:26:45,340 --> 00:26:49,509
using them if you don't need them right

00:26:47,080 --> 00:26:50,859
now tools that keep you keep stubbing

00:26:49,509 --> 00:26:54,779
your toe on even when you're doing

00:26:50,859 --> 00:26:54,779
everything right aren't good tools

00:26:55,900 --> 00:27:02,519
[Music]

00:26:58,649 --> 00:27:02,519
sorry just gonna take a sit

00:27:07,760 --> 00:27:15,390
thank you and so that's what I want to

00:27:12,960 --> 00:27:17,130
ask you to do with your code especially

00:27:15,390 --> 00:27:19,170
when you're not sure which way to direct

00:27:17,130 --> 00:27:20,550
it sometimes the answer is obvious

00:27:19,170 --> 00:27:22,380
sometimes the structure will give you

00:27:20,550 --> 00:27:24,750
enough a hammer has certain properties

00:27:22,380 --> 00:27:27,120
that all hammers have to abide by but

00:27:24,750 --> 00:27:28,380
when you're not sure especially when

00:27:27,120 --> 00:27:30,600
you're arguing with your teammates and

00:27:28,380 --> 00:27:32,880
going in circles take that step back and

00:27:30,600 --> 00:27:33,630
use this framework to ask yourself who

00:27:32,880 --> 00:27:37,470
is it for

00:27:33,630 --> 00:27:39,390
and how will it impact them and then

00:27:37,470 --> 00:27:42,180
sometimes you get to creative solutions

00:27:39,390 --> 00:27:46,320
that you wouldn't think about beforehand

00:27:42,180 --> 00:27:49,980
so I want to oh I didn't mean turning my

00:27:46,320 --> 00:27:51,930
animates this oh well this is a list of

00:27:49,980 --> 00:27:57,360
just things that I've been inspired by

00:27:51,930 --> 00:28:00,960
in this talk there is some videos and

00:27:57,360 --> 00:28:03,660
some books I highly recommend if you're

00:28:00,960 --> 00:28:07,560
interested in these subjects to look

00:28:03,660 --> 00:28:09,360
them up sorry these are about code

00:28:07,560 --> 00:28:12,000
quality there's some about design as

00:28:09,360 --> 00:28:14,220
well this is not at all a comprehensive

00:28:12,000 --> 00:28:17,700
list but these are the things that I

00:28:14,220 --> 00:28:19,620
learned from I want to especially call

00:28:17,700 --> 00:28:21,030
out web attacks which was my very first

00:28:19,620 --> 00:28:23,550
job and it's where I learned about

00:28:21,030 --> 00:28:27,720
design and contextual design research

00:28:23,550 --> 00:28:31,980
they're a Chicago based design research

00:28:27,720 --> 00:28:33,030
and development firm and so thank you

00:28:31,980 --> 00:28:36,050
for being here and thank you for

00:28:33,030 --> 00:28:36,050
supporting me up here

00:28:46,440 --> 00:28:51,270
and thank you for squared for letting me

00:28:48,960 --> 00:28:54,690
for help supporting me getting out here

00:28:51,270 --> 00:28:56,400
and speaking are there any questions the

00:28:54,690 --> 00:29:00,720
question is is the function without DP

00:28:56,400 --> 00:29:03,450
open source at all it isn't yet it was

00:29:00,720 --> 00:29:07,080
actually based on a very small tweak to

00:29:03,450 --> 00:29:08,970
an open source gem I'm blanking on the

00:29:07,080 --> 00:29:10,860
name but there's a gem where if you have

00:29:08,970 --> 00:29:15,500
multiple databases you can choose one of

00:29:10,860 --> 00:29:15,500
them and basically what we did is

00:29:15,860 --> 00:29:22,230
instrumented so you can choose no

00:29:18,240 --> 00:29:24,450
database instead well come get me after

00:29:22,230 --> 00:29:27,360
we wrap up if you want to talk

00:29:24,450 --> 00:29:31,200
one-on-one I do have stickers of lemurs

00:29:27,360 --> 00:29:34,260
from Brandon stock and I have a lot of

00:29:31,200 --> 00:29:38,640
horror stories to share about really bad

00:29:34,260 --> 00:29:41,880
UX and code and the one senior architect

00:29:38,640 --> 00:29:44,250
who first inspired me to do a talk on

00:29:41,880 --> 00:29:48,360
the subject in the first place they're

00:29:44,250 --> 00:29:49,830
not at square don't worry but I have a

00:29:48,360 --> 00:29:52,940
lot of stories to tell you if you're

00:29:49,830 --> 00:29:52,940
interested thank you

00:29:59,520 --> 00:30:08,780

YouTube URL: https://www.youtube.com/watch?v=S2s9FldrKug


