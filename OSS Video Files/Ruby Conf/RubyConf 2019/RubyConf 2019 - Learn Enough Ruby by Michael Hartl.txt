Title: RubyConf 2019 - Learn Enough Ruby by Michael Hartl
Publication date: 2019-12-03
Playlist: RubyConf 2019
Description: 
	RubyConf 2019 - Learn Enough Ruby by Michael Hartl

Ruby is a big language, used for lots of different things—so, where to start? This talk discusses the core subjects needed to learn enough Ruby to be productive, focusing both on features it has in common with other languages and the things that make it unique. For those interested in web development, we’ll also talk about the pros and cons of learning Ruby before Rails, as well as whether to learn Rails at all.

#confreaks #rubyconf2019
Captions: 
	00:00:04,190 --> 00:00:10,269
[Music]

00:00:11,830 --> 00:00:18,920
all right well good afternoon everyone

00:00:15,080 --> 00:00:21,680
my name is Michael Hartle and I'm here

00:00:18,920 --> 00:00:25,280
to talk you about how to learn enough

00:00:21,680 --> 00:00:26,060
Ruby first let me tell you a little bit

00:00:25,280 --> 00:00:28,699
about myself

00:00:26,060 --> 00:00:30,350
in the Ruby world I'm probably best

00:00:28,699 --> 00:00:33,830
known as the author of the Ruby on Rails

00:00:30,350 --> 00:00:38,150
tutorial some people laughter all right

00:00:33,830 --> 00:00:38,540
thank you all right so my story checks

00:00:38,150 --> 00:00:41,120
out

00:00:38,540 --> 00:00:43,460
so the real tutorial is a book a video

00:00:41,120 --> 00:00:44,750
series and an online course teaching how

00:00:43,460 --> 00:00:47,570
to make professional-grade web

00:00:44,750 --> 00:00:49,489
applications with Ruby on Rails the real

00:00:47,570 --> 00:00:51,559
tutorial is part of a company called

00:00:49,489 --> 00:00:54,350
learn enough that I founded a few years

00:00:51,559 --> 00:00:56,120
ago with a couple of friends and so the

00:00:54,350 --> 00:00:57,800
learning of tutorials actually started

00:00:56,120 --> 00:00:59,390
right at the beginning with the command

00:00:57,800 --> 00:01:02,539
line but one of the learning of

00:00:59,390 --> 00:01:05,330
tutorials is learn enough Ruby to be

00:01:02,539 --> 00:01:06,500
dangerous so today we're going to be

00:01:05,330 --> 00:01:08,300
taking some of the material from that

00:01:06,500 --> 00:01:11,060
and turning it into a sort of a talk

00:01:08,300 --> 00:01:13,759
length presentation now Ruby is a

00:01:11,060 --> 00:01:16,310
relatively big language but the good

00:01:13,759 --> 00:01:18,560
news is that you don't need to learn

00:01:16,310 --> 00:01:19,940
everything about Ruby to be productive

00:01:18,560 --> 00:01:23,030
you just have to learn enough to be

00:01:19,940 --> 00:01:26,509
dangerous now we're not going to learn

00:01:23,030 --> 00:01:30,530
even that much Ruby in a 30 to 40 minute

00:01:26,509 --> 00:01:31,849
talk so I want to emphasize that you

00:01:30,530 --> 00:01:33,580
don't need to worry if you're not

00:01:31,849 --> 00:01:36,979
following all the details of this talk

00:01:33,580 --> 00:01:39,110
this talk is about getting a taste of

00:01:36,979 --> 00:01:42,080
Ruby just getting a sense of what it can

00:01:39,110 --> 00:01:44,390
do regardless of what your current level

00:01:42,080 --> 00:01:45,830
is we're also going to talk about some

00:01:44,390 --> 00:01:47,899
of the things that ruby has in common

00:01:45,830 --> 00:01:50,209
with other languages and some of the

00:01:47,899 --> 00:01:52,970
things that makes Ruby stand out from

00:01:50,209 --> 00:01:56,509
other languages but more than anything I

00:01:52,970 --> 00:01:57,800
hope that we get excited about what you

00:01:56,509 --> 00:02:00,440
can do with Ruby it's really a beautiful

00:01:57,800 --> 00:02:01,640
language it's really remarkable that

00:02:00,440 --> 00:02:04,520
kinds of things you can do with it in

00:02:01,640 --> 00:02:05,599
just a few short minutes so to cover the

00:02:04,520 --> 00:02:08,599
things we're going to be talking about

00:02:05,599 --> 00:02:11,450
we kind of have a play in three acts so

00:02:08,599 --> 00:02:13,670
our first act is going to be interactive

00:02:11,450 --> 00:02:16,069
Ruby or IRB and we're going to do

00:02:13,670 --> 00:02:17,540
something reasonably useful in IRB

00:02:16,069 --> 00:02:19,430
useful enough that we'll want to

00:02:17,540 --> 00:02:21,010
encapsulate it into something that we

00:02:19,430 --> 00:02:23,620
can share with other people

00:02:21,010 --> 00:02:24,939
we'll package it up as a ruby gem so

00:02:23,620 --> 00:02:27,970
after we package it up as a ruby gem

00:02:24,939 --> 00:02:31,540
then we're going to use that gem in a

00:02:27,970 --> 00:02:34,239
simple web application so in order to do

00:02:31,540 --> 00:02:37,599
these things we're going to do something

00:02:34,239 --> 00:02:42,030
dangerous this is not recommended to try

00:02:37,599 --> 00:02:45,329
at home we're gonna do some live coding

00:02:42,030 --> 00:02:48,400
so the rest of this is going to be a

00:02:45,329 --> 00:02:51,099
live presentation of some of the things

00:02:48,400 --> 00:02:54,099
you can do with Ruby so we're gonna

00:02:51,099 --> 00:02:57,400
start off with IRB or interactive Ruby

00:02:54,099 --> 00:02:58,810
and this is a this is a repple Maps use

00:02:57,400 --> 00:03:01,900
this term this morning in the keynote

00:02:58,810 --> 00:03:03,069
this is a read eval print loop so I'm

00:03:01,900 --> 00:03:04,060
sure many of you have seen this already

00:03:03,069 --> 00:03:06,159
but we're just going to get all on the

00:03:04,060 --> 00:03:09,489
same page so we can start with say two

00:03:06,159 --> 00:03:11,639
plus two so Ruby or in this case IRB the

00:03:09,489 --> 00:03:15,040
repple is going to read that expression

00:03:11,639 --> 00:03:16,840
evaluate it and then print it and in

00:03:15,040 --> 00:03:18,670
this case two plus two is four and it's

00:03:16,840 --> 00:03:23,739
a loop because it returns us back to the

00:03:18,670 --> 00:03:28,209
interactive prompt is it is it really a

00:03:23,739 --> 00:03:34,209
bigger it's about as big as it's gonna

00:03:28,209 --> 00:03:35,379
get is that is that better this is as

00:03:34,209 --> 00:03:38,250
big as this let's see yeah I think this

00:03:35,379 --> 00:03:38,250
as big as the font gets

00:03:43,950 --> 00:03:54,690
even bigger is that good

00:03:50,030 --> 00:03:57,840
all right cool so we're almost we're

00:03:54,690 --> 00:03:59,459
almost full size here all right so let's

00:03:57,840 --> 00:04:03,000
let's do something else with this though

00:03:59,459 --> 00:04:06,959
let's create a variable called will it's

00:04:03,000 --> 00:04:10,739
like assign s to a string say hello

00:04:06,959 --> 00:04:11,549
world so this is a double quote single

00:04:10,739 --> 00:04:13,709
quotes work two

00:04:11,549 --> 00:04:16,769
and in this case strings just evaluate

00:04:13,709 --> 00:04:20,880
to themselves so when we evaluate this

00:04:16,769 --> 00:04:23,400
it just returns the the string itself if

00:04:20,880 --> 00:04:25,650
you actually want to print it for formal

00:04:23,400 --> 00:04:28,770
ease you can do put s or for put string

00:04:25,650 --> 00:04:32,310
and in this case you can see that it

00:04:28,770 --> 00:04:34,530
prints it out without the double quotes

00:04:32,310 --> 00:04:36,389
and then it returns nil which is a

00:04:34,530 --> 00:04:38,520
special Ruby value that stands for

00:04:36,389 --> 00:04:39,660
nothing at all this is unusual most

00:04:38,520 --> 00:04:41,850
languages don't have something like

00:04:39,660 --> 00:04:43,830
exactly like this but Ruby has this

00:04:41,850 --> 00:04:46,800
special value that that means nothing

00:04:43,830 --> 00:04:48,389
literally nothing so what are the some

00:04:46,800 --> 00:04:50,430
of the things we can do with this string

00:04:48,389 --> 00:04:53,100
well string like all things in Ruby is

00:04:50,430 --> 00:04:54,780
an object and we can call methods on it

00:04:53,100 --> 00:04:55,919
so for example this is actually might

00:04:54,780 --> 00:04:58,050
not even be a method this might be an

00:04:55,919 --> 00:04:59,400
attribute but in in Ruby they're the

00:04:58,050 --> 00:05:00,960
same thing if you don't know about that

00:04:59,400 --> 00:05:04,080
distinction don't worry about it

00:05:00,960 --> 00:05:05,430
but so s dot length here returns the

00:05:04,080 --> 00:05:06,630
length of the string just nice because

00:05:05,430 --> 00:05:09,600
you know it's long enough that you can't

00:05:06,630 --> 00:05:12,270
just eyeball it so something else we can

00:05:09,600 --> 00:05:14,280
do with the string is we can ask it if

00:05:12,270 --> 00:05:15,720
it's empty or not now this is

00:05:14,280 --> 00:05:17,639
characteristically Ruby you can see here

00:05:15,720 --> 00:05:20,010
there's actually some punctuation in

00:05:17,639 --> 00:05:21,600
this method name most languages do not

00:05:20,010 --> 00:05:23,760
support that but it's really nice in

00:05:21,600 --> 00:05:25,590
Ruby because this empty question mark

00:05:23,760 --> 00:05:27,330
method is a special kind of method it's

00:05:25,590 --> 00:05:29,400
a boolean method that returns either

00:05:27,330 --> 00:05:31,950
true or false and we can see the glance

00:05:29,400 --> 00:05:35,280
because of the question mark that it's a

00:05:31,950 --> 00:05:37,590
boolean in this case it's false but we

00:05:35,280 --> 00:05:41,910
can also call this on an empty string

00:05:37,590 --> 00:05:43,830
and that's true now one of my favorite

00:05:41,910 --> 00:05:47,130
things to do with strings is to split

00:05:43,830 --> 00:05:49,919
them into their component parts so split

00:05:47,130 --> 00:05:53,820
in this case I'm gonna split on a sips

00:05:49,919 --> 00:05:56,039
on a space and what this does is it

00:05:53,820 --> 00:05:57,729
takes that hello comma and then splits

00:05:56,039 --> 00:06:00,460
it into hello comma and then

00:05:57,729 --> 00:06:03,370
old but this actually doesn't do what I

00:06:00,460 --> 00:06:05,740
thought it did I thought it split on

00:06:03,370 --> 00:06:10,330
literal spaces so I thought if you did

00:06:05,740 --> 00:06:13,539
this that I would get an element for

00:06:10,330 --> 00:06:16,120
each of those spaces in here I thought I

00:06:13,539 --> 00:06:19,629
was splitting on a literal space does

00:06:16,120 --> 00:06:21,159
anyone know what this does this is

00:06:19,629 --> 00:06:22,960
actually splitting on white space it

00:06:21,159 --> 00:06:25,089
considers all those spaces to be one

00:06:22,960 --> 00:06:27,789
space and in fact would do the same

00:06:25,089 --> 00:06:31,479
thing with tabs or new lines oops what

00:06:27,789 --> 00:06:32,020
did I do here oh I forgot to split so

00:06:31,479 --> 00:06:33,999
look at that

00:06:32,020 --> 00:06:35,319
that didn't I did not expect that I've

00:06:33,999 --> 00:06:37,930
been using Ruby for a long time and I

00:06:35,319 --> 00:06:38,830
was surprised by this behavior and part

00:06:37,930 --> 00:06:39,939
of the reason I was surprised just

00:06:38,830 --> 00:06:42,580
because this is actually the default

00:06:39,939 --> 00:06:44,830
behavior for split if you just give it

00:06:42,580 --> 00:06:47,879
no arguments then it does the same thing

00:06:44,830 --> 00:06:50,229
so to split on the thing that I expected

00:06:47,879 --> 00:06:51,969
you need to use a regular expression so

00:06:50,229 --> 00:06:53,559
this is a pattern matching language for

00:06:51,969 --> 00:06:56,199
text and in this case the regular

00:06:53,559 --> 00:06:58,899
expression with just one space and in

00:06:56,199 --> 00:07:01,149
this case you get what I expected which

00:06:58,899 --> 00:07:04,569
is a separate empty string for every one

00:07:01,149 --> 00:07:06,550
of these strings inside here so part of

00:07:04,569 --> 00:07:07,930
the thing the reason I like to split is

00:07:06,550 --> 00:07:11,289
because one of the things I do when I'm

00:07:07,930 --> 00:07:14,589
learning a language is I like to do a

00:07:11,289 --> 00:07:16,300
simple it's a simple string manipulation

00:07:14,589 --> 00:07:17,830
that it's just hard enough to exercise

00:07:16,300 --> 00:07:19,839
the language but easy enough that it's

00:07:17,830 --> 00:07:21,909
that you can do it pretty quickly and so

00:07:19,839 --> 00:07:24,520
in order to so that in particular I like

00:07:21,909 --> 00:07:27,399
to test whether or not a string is a

00:07:24,520 --> 00:07:29,139
palindrome so this is a whether it's the

00:07:27,399 --> 00:07:30,610
same forward and backward so in order to

00:07:29,139 --> 00:07:33,249
do that you have to be able to reverse a

00:07:30,610 --> 00:07:36,729
string and so one way to do this is to

00:07:33,249 --> 00:07:38,680
split on the empty string in order to

00:07:36,729 --> 00:07:40,120
get all the component characters now in

00:07:38,680 --> 00:07:44,860
Ruby you can actually do this there's a

00:07:40,120 --> 00:07:47,529
method it's just for this yeah cars like

00:07:44,860 --> 00:07:49,089
that but let's go with this because this

00:07:47,529 --> 00:07:51,039
is common to lots of languages putting

00:07:49,089 --> 00:07:53,050
on an empty string like this so what

00:07:51,039 --> 00:07:56,199
this gives you is this array of all the

00:07:53,050 --> 00:08:00,490
characters and then you can reverse the

00:07:56,199 --> 00:08:03,430
array like this and then you can

00:08:00,490 --> 00:08:05,289
essentially undo the split by joining on

00:08:03,430 --> 00:08:08,529
the empty string and that's the default

00:08:05,289 --> 00:08:10,719
for joints you can just do this and so

00:08:08,529 --> 00:08:11,720
at this point we can test whether the

00:08:10,719 --> 00:08:15,740
string is equal to its own

00:08:11,720 --> 00:08:17,960
verse by saying s double equals s dot

00:08:15,740 --> 00:08:20,150
and then the the reverse version and it

00:08:17,960 --> 00:08:22,760
is false because hello world is not a

00:08:20,150 --> 00:08:25,670
palindrome let's define a palindrome

00:08:22,760 --> 00:08:29,270
this is my favorite one word pound pound

00:08:25,670 --> 00:08:30,410
rim its deified because it doesn't

00:08:29,270 --> 00:08:33,320
really look like a talent around look

00:08:30,410 --> 00:08:39,620
what's going on here but it is as we can

00:08:33,320 --> 00:08:42,409
see by doing this now unusually among

00:08:39,620 --> 00:08:44,150
languages ruby actually doesn't require

00:08:42,409 --> 00:08:45,680
you to do this sort of convoluted thing

00:08:44,150 --> 00:08:48,770
you can actually reverse a string just

00:08:45,680 --> 00:08:50,210
by itself so ruby supports spring

00:08:48,770 --> 00:08:52,280
reversal so we can make this nice

00:08:50,210 --> 00:08:55,310
compact expression and so this is a way

00:08:52,280 --> 00:08:59,270
of testing whether this the string is

00:08:55,310 --> 00:09:00,530
the same forward and backward now you

00:08:59,270 --> 00:09:02,000
can see I'm doing up arrow I'm actually

00:09:00,530 --> 00:09:04,100
getting the previous expressions I'm

00:09:02,000 --> 00:09:05,690
doing up arrow to do that but it would

00:09:04,100 --> 00:09:07,310
be nice to be able to encapsulate this

00:09:05,690 --> 00:09:09,560
behavior in something that we can reuse

00:09:07,310 --> 00:09:12,950
so the way to do that is to define a

00:09:09,560 --> 00:09:15,010
function with def and let's call it

00:09:12,950 --> 00:09:17,000
palindrome how's it going to end

00:09:15,010 --> 00:09:18,740
be a question mark because this is a

00:09:17,000 --> 00:09:20,900
boolean it's going to return true or

00:09:18,740 --> 00:09:24,080
false and in this case we'll give it an

00:09:20,900 --> 00:09:27,670
argument string and then we can just

00:09:24,080 --> 00:09:27,670
compare the string to its own reverse

00:09:28,870 --> 00:09:33,530
now you can actually return things in

00:09:31,700 --> 00:09:35,750
Ruby but Ruby by default just returns

00:09:33,530 --> 00:09:37,850
the final expression in this case the

00:09:35,750 --> 00:09:40,700
only expression so that so we're done at

00:09:37,850 --> 00:09:42,530
this point you can see the return value

00:09:40,700 --> 00:09:44,870
in the rebel here is a symbol as

00:09:42,530 --> 00:09:46,940
indicated by the colon here this is just

00:09:44,870 --> 00:09:48,290
a label it's a something else

00:09:46,940 --> 00:09:50,810
characteristic of Ruby very few

00:09:48,290 --> 00:09:55,550
languages have a symbol datatype like

00:09:50,810 --> 00:09:57,740
this so let's test it out found room

00:09:55,550 --> 00:10:00,820
question mark so this string hello world

00:09:57,740 --> 00:10:05,089
is false it's not a palindrome and then

00:10:00,820 --> 00:10:07,310
deified is a palindrome all right well

00:10:05,089 --> 00:10:10,460
that worked but we saw before we could

00:10:07,310 --> 00:10:12,740
do a empty question mark on the string

00:10:10,460 --> 00:10:17,050
right wouldn't be cool if we could ask a

00:10:12,740 --> 00:10:19,010
string if it was a pound room like that

00:10:17,050 --> 00:10:21,740
doesn't work because there is no

00:10:19,010 --> 00:10:24,110
palindrome method on strings but there

00:10:21,740 --> 00:10:25,860
could be and unusually among languages

00:10:24,110 --> 00:10:28,680
Ruby lets you

00:10:25,860 --> 00:10:31,260
Jenny actually change the default of

00:10:28,680 --> 00:10:34,080
data types and in this case it's the

00:10:31,260 --> 00:10:40,440
class string and we can just open it

00:10:34,080 --> 00:10:41,610
right up to find a palindrome method but

00:10:40,440 --> 00:10:42,839
in this case we actually don't need an

00:10:41,610 --> 00:10:46,980
argument because strings know about

00:10:42,839 --> 00:10:48,810
themselves so we're going to compare

00:10:46,980 --> 00:10:51,029
itself it's a special variable that

00:10:48,810 --> 00:10:59,360
returned it's a refers to the string and

00:10:51,029 --> 00:10:59,360
then it will do self dot reverse and now

00:11:00,470 --> 00:11:08,970
we can test strings directly alright so

00:11:07,260 --> 00:11:12,839
this is cool enough that we're going to

00:11:08,970 --> 00:11:14,459
package this up as as something that we

00:11:12,839 --> 00:11:15,950
could potentially share with other

00:11:14,459 --> 00:11:18,120
people

00:11:15,950 --> 00:11:19,770
so we're actually going to make a ruby

00:11:18,120 --> 00:11:20,970
gem and if you've ever done this before

00:11:19,770 --> 00:11:23,399
how many people here have made a ruby

00:11:20,970 --> 00:11:24,830
gem now we've got a few people that's

00:11:23,399 --> 00:11:26,580
good too we say we've got some some

00:11:24,830 --> 00:11:28,830
people are going to learn how to make a

00:11:26,580 --> 00:11:30,959
review gem here and for those of you

00:11:28,830 --> 00:11:34,440
have made it I will do a few novel

00:11:30,959 --> 00:11:37,920
things here I think all right so to make

00:11:34,440 --> 00:11:40,320
a ruby gem we're going to use a program

00:11:37,920 --> 00:11:42,300
called bundler we're gonna type bundle

00:11:40,320 --> 00:11:43,980
and then bundle just so bundler does

00:11:42,300 --> 00:11:46,850
lots of things but we're gonna do bundle

00:11:43,980 --> 00:11:48,870
gem and then we're going to generate

00:11:46,850 --> 00:11:50,490
something called Ruby conf palindromes

00:11:48,870 --> 00:11:54,420
so I'm going to have it be a name that

00:11:50,490 --> 00:11:58,430
isn't used out elsewhere and this is

00:11:54,420 --> 00:12:03,870
going to generate a skeleton for a gem

00:11:58,430 --> 00:12:06,350
so can see D into it and now let's take

00:12:03,870 --> 00:12:06,350
a look at it

00:12:09,110 --> 00:12:14,630
all right so this is a the the skeleton

00:12:12,830 --> 00:12:16,760
for a ruby gem and you can see actually

00:12:14,630 --> 00:12:18,800
here we've got application code on the

00:12:16,760 --> 00:12:21,590
right you can see there's a lip that's

00:12:18,800 --> 00:12:23,120
too small to see there's a so there's

00:12:21,590 --> 00:12:24,860
application code here and then I've got

00:12:23,120 --> 00:12:27,980
test code that's been generated for me

00:12:24,860 --> 00:12:30,380
automatically which is really cool so

00:12:27,980 --> 00:12:32,150
when I see chest code what I think is

00:12:30,380 --> 00:12:33,890
I'm gonna run that test code so let's

00:12:32,150 --> 00:12:35,870
run this test code we have to run it

00:12:33,890 --> 00:12:37,610
inside of bundler for maximum

00:12:35,870 --> 00:12:39,620
compatibility this is a technical point

00:12:37,610 --> 00:12:41,120
it's not important right now we're gonna

00:12:39,620 --> 00:12:44,000
use the rake program to run the test

00:12:41,120 --> 00:12:47,200
suite so what happens when you just

00:12:44,000 --> 00:12:49,730
generate a gem and run the test suite

00:12:47,200 --> 00:12:51,680
it's an error but this is actually a

00:12:49,730 --> 00:12:53,660
really useful error this is great design

00:12:51,680 --> 00:12:56,000
on the part of the people who made

00:12:53,660 --> 00:12:58,430
bundler because what it does is it sees

00:12:56,000 --> 00:13:00,530
that there are these two dues in the

00:12:58,430 --> 00:13:03,200
specification file so it fails

00:13:00,530 --> 00:13:05,480
completely as a reminder that you cannot

00:13:03,200 --> 00:13:07,430
publish this thing you better do this

00:13:05,480 --> 00:13:09,890
first you better change the

00:13:07,430 --> 00:13:11,660
specification and so here's this pet the

00:13:09,890 --> 00:13:16,940
spec file I'm just going to go through

00:13:11,660 --> 00:13:19,550
and remove these two dues and then I

00:13:16,940 --> 00:13:24,860
need a home page here this needs to be a

00:13:19,550 --> 00:13:28,040
valid URL so to use example.com so this

00:13:24,860 --> 00:13:30,790
is actually a dedicated site in the HTTP

00:13:28,040 --> 00:13:39,530
spec for example sites it's kind of cool

00:13:30,790 --> 00:13:42,620
so let's just fill these in see if this

00:13:39,530 --> 00:13:46,820
works so now see if the test suite runs

00:13:42,620 --> 00:13:49,280
all right great so now the test suite is

00:13:46,820 --> 00:13:53,200
actually running but it's failing so you

00:13:49,280 --> 00:13:55,010
can see there's one one failures there

00:13:53,200 --> 00:13:58,400
so why is it failing

00:13:55,010 --> 00:13:59,960
well it's failing because the way these

00:13:58,400 --> 00:14:02,900
tests work is you assert that something

00:13:59,960 --> 00:14:04,910
is true and the skeleton that gets

00:14:02,900 --> 00:14:07,550
generated again really great design it

00:14:04,910 --> 00:14:09,500
fails by default it it kind of gives you

00:14:07,550 --> 00:14:13,010
this little bit of friction to encourage

00:14:09,500 --> 00:14:15,020
you to write a passing test and so if

00:14:13,010 --> 00:14:17,030
you search false well false is always

00:14:15,020 --> 00:14:19,700
false it's never true so how do we get

00:14:17,030 --> 00:14:21,800
this to pass to the minimum we can do to

00:14:19,700 --> 00:14:24,290
get this to pass

00:14:21,800 --> 00:14:27,760
thank you Jesus or true so we're gonna

00:14:24,290 --> 00:14:31,160
leave it in just for it's for

00:14:27,760 --> 00:14:33,020
demonstration purposes all right there

00:14:31,160 --> 00:14:35,660
we go so now we're passing now this is

00:14:33,020 --> 00:14:38,810
not as evocative an output as I like I I

00:14:35,660 --> 00:14:40,790
like to think of passing and and failing

00:14:38,810 --> 00:14:45,110
in terms of the traditional test-driven

00:14:40,790 --> 00:14:49,550
development cycle of red than green and

00:14:45,110 --> 00:14:51,080
so I'm just gonna open up this here I'm

00:14:49,550 --> 00:14:55,460
gonna add in one of my favorite little

00:14:51,080 --> 00:15:01,550
things it's a mini test reporter and

00:14:55,460 --> 00:15:03,380
this goes in here so this for the

00:15:01,550 --> 00:15:13,880
demonstration purposes will be a little

00:15:03,380 --> 00:15:20,090
nicer so let's install that I save it

00:15:13,880 --> 00:15:22,060
yeah all right and knope's ah-ha you

00:15:20,090 --> 00:15:26,420
want to be online I did not realize that

00:15:22,060 --> 00:15:32,830
it's annoying this is the danger of

00:15:26,420 --> 00:15:32,830
doing it live let's see if this works

00:15:40,290 --> 00:15:44,580
we can do it without this but it's it's

00:15:42,090 --> 00:15:45,870
a little prettier if we do it with it

00:15:44,580 --> 00:15:47,430
alright well so while that's thinking

00:15:45,870 --> 00:15:52,590
about it let's let's write our first

00:15:47,430 --> 00:15:58,620
task so we're going to test the here we

00:15:52,590 --> 00:16:02,490
go I see this work okay there we go so

00:15:58,620 --> 00:16:04,140
now let's run the test now it's nice and

00:16:02,490 --> 00:16:06,060
green alright and so I'm gonna come to

00:16:04,140 --> 00:16:08,250
clear it before running the test so we

00:16:06,060 --> 00:16:10,500
can see that see at the top there there

00:16:08,250 --> 00:16:12,090
we go so now we're green and now we're

00:16:10,500 --> 00:16:18,720
gonna write our first test we're gonna

00:16:12,090 --> 00:16:21,780
write a test for a non palindrome so

00:16:18,720 --> 00:16:23,610
we're going to assert we're gonna search

00:16:21,780 --> 00:16:25,260
that something is not a palindrome so I

00:16:23,610 --> 00:16:27,930
need negation which is the exclamation

00:16:25,260 --> 00:16:31,230
point in Ruby this is common in most

00:16:27,930 --> 00:16:34,020
languages actually let's do hello world

00:16:31,230 --> 00:16:35,940
as we did in the repple and then

00:16:34,020 --> 00:16:38,520
palindrome question mark so we're gonna

00:16:35,940 --> 00:16:39,660
cert that this is not a palindrome there

00:16:38,520 --> 00:16:45,120
any guesses as to what's gonna happen

00:16:39,660 --> 00:16:46,710
here they're gonna fail it's not quite

00:16:45,120 --> 00:16:48,960
going to fail it's actually going to

00:16:46,710 --> 00:16:50,190
give an error as you can see there are

00:16:48,960 --> 00:16:52,140
two differences there's failures and

00:16:50,190 --> 00:16:53,790
errors so this actually is not even

00:16:52,140 --> 00:16:56,580
going to work at all it's going to give

00:16:53,790 --> 00:16:59,370
an error because there is no palindrome

00:16:56,580 --> 00:17:02,600
question mark method at present so

00:16:59,370 --> 00:17:04,650
there's we get a no method error here

00:17:02,600 --> 00:17:06,180
right so there's no method error

00:17:04,650 --> 00:17:08,520
undefined method calendar and question

00:17:06,180 --> 00:17:11,100
mark and so with test-driven development

00:17:08,520 --> 00:17:13,710
where we go red green what we do is the

00:17:11,100 --> 00:17:14,850
minimum necessary to get this to pass so

00:17:13,710 --> 00:17:16,740
over here let's go look at the

00:17:14,850 --> 00:17:18,270
application code here this is a module

00:17:16,740 --> 00:17:19,470
we're not going to talk about modules

00:17:18,270 --> 00:17:21,870
today this is covered in learn enough

00:17:19,470 --> 00:17:22,920
Ruby be dangerous because in in this

00:17:21,870 --> 00:17:24,540
case we're just going to do what we did

00:17:22,920 --> 00:17:29,760
in the repple we're going to open the

00:17:24,540 --> 00:17:31,440
string class and add this method so a

00:17:29,760 --> 00:17:33,960
palindrome question mark now remember

00:17:31,440 --> 00:17:37,980
what we did we did self double equals

00:17:33,960 --> 00:17:39,300
self dot reverse but the philosophy of

00:17:37,980 --> 00:17:40,860
test-driven development says do the

00:17:39,300 --> 00:17:42,510
minimum necessary to get the test to

00:17:40,860 --> 00:17:44,310
pass so actually don't we have to don't

00:17:42,510 --> 00:17:47,330
need this we can comment this out and

00:17:44,310 --> 00:17:51,630
just return nothing literally nothing

00:17:47,330 --> 00:17:53,130
because nil is false in Ruby now nil is

00:17:51,630 --> 00:17:53,640
actually the only thing that's false

00:17:53,130 --> 00:17:56,100
other than

00:17:53,640 --> 00:17:57,300
itself and this is really quite a

00:17:56,100 --> 00:17:59,790
difference from other languages most

00:17:57,300 --> 00:18:01,950
languages have zero the empty string the

00:17:59,790 --> 00:18:03,480
empty array are all false but in Ruby

00:18:01,950 --> 00:18:05,940
those are all true even zero is true

00:18:03,480 --> 00:18:07,830
only nil and false or false so here we

00:18:05,940 --> 00:18:10,140
have we're returning nil so we're going

00:18:07,830 --> 00:18:11,850
to assert not nil which is insert assert

00:18:10,140 --> 00:18:14,790
not false which is true so this should

00:18:11,850 --> 00:18:18,390
pass there we go

00:18:14,790 --> 00:18:26,490
so that's the minimum and now let's test

00:18:18,390 --> 00:18:32,250
palindrome we're going to assert let's

00:18:26,490 --> 00:18:36,810
do deified and this should fail we're

00:18:32,250 --> 00:18:38,520
gonna go red green so there's so now

00:18:36,810 --> 00:18:42,510
there's red and now we can uncomment

00:18:38,520 --> 00:18:45,270
this to get to green great so now we've

00:18:42,510 --> 00:18:47,100
got a palindrome detector now we're

00:18:45,270 --> 00:18:49,920
ready for the third step in the in the

00:18:47,100 --> 00:18:51,870
red green refactor cycle so refactoring

00:18:49,920 --> 00:18:53,460
is changing the form of the code without

00:18:51,870 --> 00:18:55,350
changing the function so we're gonna

00:18:53,460 --> 00:18:57,780
make a couple of refinements first in

00:18:55,350 --> 00:19:00,750
the application code anyone see a minor

00:18:57,780 --> 00:19:03,930
refinement here in this there's a it's a

00:19:00,750 --> 00:19:05,880
little it's a really little thing yeah

00:19:03,930 --> 00:19:07,020
we can remove so we need this self

00:19:05,880 --> 00:19:09,090
because we need to know what we're

00:19:07,020 --> 00:19:11,730
talking about but inside here we can

00:19:09,090 --> 00:19:12,990
remove the self dot just same reverse by

00:19:11,730 --> 00:19:15,780
default is just whatever the current

00:19:12,990 --> 00:19:18,360
object is are we really sure oops that's

00:19:15,780 --> 00:19:19,950
a typo there oh well there's a typo it's

00:19:18,360 --> 00:19:21,570
still it's red so that caught the error

00:19:19,950 --> 00:19:26,640
it's actually just self double equal

00:19:21,570 --> 00:19:27,960
Traverse and that's green now this is

00:19:26,640 --> 00:19:29,520
kind of a reverse refactoring we're

00:19:27,960 --> 00:19:31,590
gonna change something in the test and

00:19:29,520 --> 00:19:34,710
use the application code to test the

00:19:31,590 --> 00:19:36,630
test there's a little refinement here in

00:19:34,710 --> 00:19:38,370
the test framework that I'm using here

00:19:36,630 --> 00:19:42,530
mini tests instead of a certain ought

00:19:38,370 --> 00:19:46,230
you can say refute do that

00:19:42,530 --> 00:19:48,030
see if that still works there we go so

00:19:46,230 --> 00:19:50,670
we've refactored both the application

00:19:48,030 --> 00:19:52,710
code and the test and now we're ready

00:19:50,670 --> 00:19:55,530
for one of my my favorite things which

00:19:52,710 --> 00:19:57,720
is a situation where the application

00:19:55,530 --> 00:20:00,240
code is a little tricky but the test is

00:19:57,720 --> 00:20:01,620
really easy so this is a great situation

00:20:00,240 --> 00:20:03,210
for test-driven development like

00:20:01,620 --> 00:20:04,980
learning of Ruby to be dangerous talks

00:20:03,210 --> 00:20:06,510
about some of the trade-offs and when

00:20:04,980 --> 00:20:07,050
you might not want to use tester in

00:20:06,510 --> 00:20:08,220
development

00:20:07,050 --> 00:20:10,290
but this is a really good situation

00:20:08,220 --> 00:20:13,050
where it's super simple to write the

00:20:10,290 --> 00:20:18,600
test so what I want to do is write a

00:20:13,050 --> 00:20:20,940
test for a palindrome phrase so for

00:20:18,600 --> 00:20:21,990
example it's one of my favorite

00:20:20,940 --> 00:20:33,230
palindrome this is a very famous one

00:20:21,990 --> 00:20:33,230
it's a man a plan a Canal Panama Panama

00:20:33,320 --> 00:20:38,790
so the question is is that a palindrome

00:20:36,030 --> 00:20:40,650
well it's not literally the same forward

00:20:38,790 --> 00:20:44,640
and backward so this is going to give me

00:20:40,650 --> 00:20:46,110
a read test suite but it is a palindrome

00:20:44,640 --> 00:20:47,940
in an important sense so let's take a

00:20:46,110 --> 00:20:50,310
look at that and this is another really

00:20:47,940 --> 00:20:56,310
useful technique we're gonna pop back

00:20:50,310 --> 00:20:57,870
into the repple and so in what sense

00:20:56,310 --> 00:20:59,430
this is a palindrome well it's a

00:20:57,870 --> 00:21:01,170
palindrome in this sense that though if

00:20:59,430 --> 00:21:02,250
we look at just the letters they're the

00:21:01,170 --> 00:21:03,660
same forward and backward there's all

00:21:02,250 --> 00:21:06,930
this other stuff in there there's the

00:21:03,660 --> 00:21:08,760
the spaces and the punctuation but if we

00:21:06,930 --> 00:21:10,530
could just scan through this it's a

00:21:08,760 --> 00:21:11,700
little poor shadowing for you if you're

00:21:10,530 --> 00:21:14,160
in the know we're gonna scan through the

00:21:11,700 --> 00:21:16,320
string and just pull out the letters so

00:21:14,160 --> 00:21:19,110
the way to do this is with this scan

00:21:16,320 --> 00:21:20,610
method and we're gonna scan using a

00:21:19,110 --> 00:21:23,490
regular expression we mentioned briefly

00:21:20,610 --> 00:21:26,340
before so that's indicating with forward

00:21:23,490 --> 00:21:28,320
slashes and then I'm gonna say this the

00:21:26,340 --> 00:21:30,300
set of a through Z so this is we're just

00:21:28,320 --> 00:21:32,730
going to match Latin characters line

00:21:30,300 --> 00:21:34,320
alphabet and so that set is in the way

00:21:32,730 --> 00:21:36,350
to do that with regular expressions is

00:21:34,320 --> 00:21:39,750
in with square brackets and then the

00:21:36,350 --> 00:21:41,070
second slash and what this will do is

00:21:39,750 --> 00:21:42,960
scan through and pull out all the

00:21:41,070 --> 00:21:44,550
letters except we're actually missing a

00:21:42,960 --> 00:21:47,850
couple we're missing the capital A and

00:21:44,550 --> 00:21:50,960
the capital P so one way to do this is

00:21:47,850 --> 00:21:53,810
to add in capital A through through Z

00:21:50,960 --> 00:21:57,690
and so now that's all the characters

00:21:53,810 --> 00:22:00,060
they're all all the letters in in the

00:21:57,690 --> 00:22:01,680
string and so now we can do what we did

00:22:00,060 --> 00:22:04,140
before we can join on empty string to

00:22:01,680 --> 00:22:05,640
get a string back and so now we're

00:22:04,140 --> 00:22:08,220
almost ready to compare this to its own

00:22:05,640 --> 00:22:11,730
reverse now what we can do we can just

00:22:08,220 --> 00:22:12,900
do dot join and then we can either

00:22:11,730 --> 00:22:15,300
standardize an uppercase or lowercase

00:22:12,900 --> 00:22:17,630
we'll do a down case to make it

00:22:15,300 --> 00:22:17,630
lowercase

00:22:19,410 --> 00:22:23,550
so now we're ready and look at this

00:22:21,090 --> 00:22:27,210
we've got the code it's right here

00:22:23,550 --> 00:22:32,790
it's gonna copy it and now we can make a

00:22:27,210 --> 00:22:35,910
letters variable and then just say

00:22:32,790 --> 00:22:38,760
letters double equals letters dot

00:22:35,910 --> 00:22:45,060
reverse this couldn't work might

00:22:38,760 --> 00:22:48,090
actually work and look at that we're

00:22:45,060 --> 00:22:49,560
green so with just a little bit of trust

00:22:48,090 --> 00:22:53,460
test-driven development and some work in

00:22:49,560 --> 00:22:54,990
the repple we've written a a ruby gem

00:22:53,460 --> 00:22:57,630
that actually detects now these more

00:22:54,990 --> 00:22:59,340
complicated kinds of palindromes that

00:22:57,630 --> 00:23:02,520
consist of a phrase with punctuation and

00:22:59,340 --> 00:23:08,250
whatever else so I think we're ready now

00:23:02,520 --> 00:23:14,990
let's let's install this on the local

00:23:08,250 --> 00:23:18,210
machine and now I want to take a look at

00:23:14,990 --> 00:23:22,890
the next that the third act here is the

00:23:18,210 --> 00:23:25,500
palindrome app so it's a web app for

00:23:22,890 --> 00:23:32,790
detecting palindromes so let's take a

00:23:25,500 --> 00:23:35,880
look at it all right so this is a simple

00:23:32,790 --> 00:23:37,620
Sinatra app so Sinatra is a minimalist

00:23:35,880 --> 00:23:41,300
web framework in Ruby but it's not a toy

00:23:37,620 --> 00:23:44,190
and this is a real alternative to Rails

00:23:41,300 --> 00:23:46,260
quite a few companies use this for

00:23:44,190 --> 00:23:48,750
example the the biggest example I know

00:23:46,260 --> 00:23:51,450
this stripe the enormously successful

00:23:48,750 --> 00:23:53,610
online payments processor is that uses

00:23:51,450 --> 00:23:55,440
Sinatra heavily so you don't necessarily

00:23:53,610 --> 00:23:57,300
have to use rails in building web apps

00:23:55,440 --> 00:23:59,970
and this is a really nice way to learn

00:23:57,300 --> 00:24:01,980
because it's so simple to get started

00:23:59,970 --> 00:24:05,010
and so in particular let's look at this

00:24:01,980 --> 00:24:07,320
here this is a Ruby block technically

00:24:05,010 --> 00:24:09,120
it's a closure which is an anonymous

00:24:07,320 --> 00:24:10,200
function with data attached but I don't

00:24:09,120 --> 00:24:12,120
think anyone ever learned what blocks

00:24:10,200 --> 00:24:14,820
were by thinking about that definition

00:24:12,120 --> 00:24:16,860
so it's best to just look at an example

00:24:14,820 --> 00:24:20,220
or two so in this case we've got a get

00:24:16,860 --> 00:24:22,230
function this responds to a regular kind

00:24:20,220 --> 00:24:24,000
of web request if you just hit a webpage

00:24:22,230 --> 00:24:25,710
with a browser it's issuing what's

00:24:24,000 --> 00:24:27,240
called a get request and this is now

00:24:25,710 --> 00:24:30,210
saying well if someone hits this web

00:24:27,240 --> 00:24:31,980
page with a get request to the root URL

00:24:30,210 --> 00:24:33,029
so this is just like example com or

00:24:31,980 --> 00:24:37,799
learn enough calm

00:24:33,029 --> 00:24:40,259
then do something and so this is a

00:24:37,799 --> 00:24:42,029
really nice thing that in some other

00:24:40,259 --> 00:24:43,709
micro frameworks for example there's a

00:24:42,029 --> 00:24:44,699
framework called flask for Python you

00:24:43,709 --> 00:24:46,949
have to give it some extra information

00:24:44,699 --> 00:24:48,599
about the URL but in Ruby you don't have

00:24:46,949 --> 00:24:50,969
to because of blocks it's a really

00:24:48,599 --> 00:24:53,129
elegant way of responding to this URL in

00:24:50,969 --> 00:24:55,919
this case we define an instance variable

00:24:53,129 --> 00:24:59,339
indicated by the @ so app title defines

00:24:55,919 --> 00:25:01,679
the title then we use embedded Ruby to

00:24:59,339 --> 00:25:03,209
evaluate a template in this case the

00:25:01,679 --> 00:25:08,119
index template the mean template so

00:25:03,209 --> 00:25:10,919
let's take a look at that do this here

00:25:08,119 --> 00:25:12,749
there the way to do this is it's

00:25:10,919 --> 00:25:15,839
automatically rewrote the reloads this

00:25:12,749 --> 00:25:17,219
or not wrap it say something it's a an

00:25:15,839 --> 00:25:22,219
application called rerun a program

00:25:17,219 --> 00:25:24,629
called rerun let's take a look here and

00:25:22,219 --> 00:25:31,399
it should be four five six seven why is

00:25:24,629 --> 00:25:31,399
it not running that's weird Oh

00:25:35,759 --> 00:25:42,609
there we go all right so there we go

00:25:39,070 --> 00:25:45,249
we've got our sample Sinatra app running

00:25:42,609 --> 00:25:47,229
and so this is now the index page so

00:25:45,249 --> 00:25:49,210
let's take a look at the the heart of

00:25:47,229 --> 00:25:51,129
this it's a palindrome detector so

00:25:49,210 --> 00:25:52,320
there's a text area here where we can

00:25:51,129 --> 00:25:54,759
put in the palindrome

00:25:52,320 --> 00:25:57,519
we're not can find out if it's a

00:25:54,759 --> 00:25:59,529
palindrome or not and so what's gonna

00:25:57,519 --> 00:26:02,340
happen here is well we're actually going

00:25:59,529 --> 00:26:05,349
to do this so I submitted here and

00:26:02,340 --> 00:26:07,929
Sinatra doesn't know this Diddy doesn't

00:26:05,349 --> 00:26:10,509
know this song but it gives us a hint

00:26:07,929 --> 00:26:14,049
about how to how to handle it so what

00:26:10,509 --> 00:26:17,349
happened here is in the form this is the

00:26:14,049 --> 00:26:21,429
code to to make the form what we're

00:26:17,349 --> 00:26:23,950
doing is we're submitting a to the

00:26:21,429 --> 00:26:26,049
action check and the method is a post

00:26:23,950 --> 00:26:28,359
action so this is the default method for

00:26:26,049 --> 00:26:31,539
submitting a form on the web and so in

00:26:28,359 --> 00:26:34,450
here there's nothing for for check so

00:26:31,539 --> 00:26:40,479
let's just follow Sinatra's suggestion

00:26:34,450 --> 00:26:40,899
and say post check do hello world there

00:26:40,479 --> 00:26:42,039
we go

00:26:40,899 --> 00:26:43,659
so it's a little small but you can see

00:26:42,039 --> 00:26:45,099
that it's actually working so what are

00:26:43,659 --> 00:26:46,629
we gonna do in here well we want to

00:26:45,099 --> 00:26:50,139
actually detect whether or not this is a

00:26:46,629 --> 00:26:51,429
palindrome so let's let's define afraid

00:26:50,139 --> 00:26:53,679
without loss of generality we'll say a

00:26:51,429 --> 00:26:54,879
phrase at phrase we'll be using this in

00:26:53,679 --> 00:26:55,269
the template so we'll use an instance

00:26:54,879 --> 00:26:57,879
variable

00:26:55,269 --> 00:27:00,489
so at phrase and now we have to pull

00:26:57,879 --> 00:27:03,940
this out of the request somehow and so

00:27:00,489 --> 00:27:07,119
the way to do this is with the one more

00:27:03,940 --> 00:27:08,979
really important ruby data structure I'm

00:27:07,119 --> 00:27:13,089
sure many of you seen we're going to

00:27:08,979 --> 00:27:15,099
define a hash here in the repple take a

00:27:13,089 --> 00:27:17,320
look so this is the params with open

00:27:15,099 --> 00:27:20,099
curly brace close curly brace which is

00:27:17,320 --> 00:27:25,200
an empty hash and then we're let's use a

00:27:20,099 --> 00:27:32,440
symbol here phrase and set that equal to

00:27:25,200 --> 00:27:36,039
say deified so params now is just a set

00:27:32,440 --> 00:27:40,509
of a key with a value so hashes are just

00:27:36,039 --> 00:27:41,979
key value pairs like this and so the

00:27:40,509 --> 00:27:44,259
reason that this is relevant is because

00:27:41,979 --> 00:27:46,559
when we submit something here a text

00:27:44,259 --> 00:27:48,039
area with the name equal to phrase

00:27:46,559 --> 00:27:51,070
Sinatra Adam

00:27:48,039 --> 00:27:54,149
creates a params hash that we can use to

00:27:51,070 --> 00:27:59,039
get the thing that was submitted using

00:27:54,149 --> 00:28:02,259
the key phrase and so then we can

00:27:59,039 --> 00:28:04,749
evaluate the result template which I'll

00:28:02,259 --> 00:28:08,830
show you in a moment so there's a result

00:28:04,749 --> 00:28:12,779
template right here so here in the

00:28:08,830 --> 00:28:15,549
result template it's a mixture of

00:28:12,779 --> 00:28:16,899
HTML and embedded Ruby so if you've done

00:28:15,549 --> 00:28:17,979
some if you've done rails application

00:28:16,899 --> 00:28:19,710
development this will look familiar

00:28:17,979 --> 00:28:22,690
because it's the same sort of thing

00:28:19,710 --> 00:28:23,399
here we've got if fill in we're gonna

00:28:22,690 --> 00:28:26,019
fill this in

00:28:23,399 --> 00:28:29,679
then something it is a palindrome else

00:28:26,019 --> 00:28:33,820
it isn't a palindrome so inside of here

00:28:29,679 --> 00:28:39,489
let's just say if at phrase dot

00:28:33,820 --> 00:28:41,229
palindrome question mark so let's try it

00:28:39,489 --> 00:28:43,389
let's refresh it resend it any idea

00:28:41,229 --> 00:28:45,970
what's gonna happen here they're gonna

00:28:43,389 --> 00:28:48,399
work it's not going to work because

00:28:45,970 --> 00:28:50,590
unfortunately I haven't added the the

00:28:48,399 --> 00:28:54,820
palindrome gem yet so it's like it just

00:28:50,590 --> 00:28:56,229
doesn't have any idea no actually what

00:28:54,820 --> 00:28:59,229
I'm there it actually something else

00:28:56,229 --> 00:29:00,869
happened oh I forgot the colon here so

00:28:59,229 --> 00:29:03,070
there were two reasons it wasn't working

00:29:00,869 --> 00:29:04,960
yes so now it says undefined method

00:29:03,070 --> 00:29:09,720
palindrome question mark so all we need

00:29:04,960 --> 00:29:09,720
to do is add our palindrome gem

00:29:15,399 --> 00:29:20,200
by default the version is zero point one

00:29:17,019 --> 00:29:34,200
point zero and then on you doing I need

00:29:20,200 --> 00:29:34,200
to require it here okay palindrome and

00:29:40,800 --> 00:29:44,550
and there you can see it oh and this is

00:29:43,260 --> 00:29:48,560
the kind of thing where we need to

00:29:44,550 --> 00:29:51,320
restart the server but at that point no

00:29:48,560 --> 00:29:53,190
we're still submitting deified ah

00:29:51,320 --> 00:29:55,260
filling is a palindrome

00:29:53,190 --> 00:30:00,300
it is a palindrome so let's fill that in

00:29:55,260 --> 00:30:02,820
so now we needed embedded Ruby with this

00:30:00,300 --> 00:30:04,470
characteristic angle bracket percent but

00:30:02,820 --> 00:30:06,740
then an equal sign will submit will

00:30:04,470 --> 00:30:11,580
actually insert it into the template

00:30:06,740 --> 00:30:15,450
like this and let's put it in single

00:30:11,580 --> 00:30:18,870
quotes to set it off from the things

00:30:15,450 --> 00:30:20,910
surrounding it come on Adam is trying to

00:30:18,870 --> 00:30:23,250
beat you smart here so it is a

00:30:20,910 --> 00:30:30,780
palindrome and then this one here is not

00:30:23,250 --> 00:30:35,610
a palindrome all right so deified is a

00:30:30,780 --> 00:30:40,740
palindrome and then say hello world is

00:30:35,610 --> 00:30:44,400
not a palindrome that's working we can

00:30:40,740 --> 00:30:49,590
also say use a phrase there's one madam

00:30:44,400 --> 00:30:51,390
I'm Adam and that's that's a famous

00:30:49,590 --> 00:30:57,690
palindrome so that is a palindrome so

00:30:51,390 --> 00:30:59,550
our phrase is working too now there's

00:30:57,690 --> 00:31:02,310
there's one more thing so there's one

00:30:59,550 --> 00:31:03,600
thing I'd like to do here if we went on

00:31:02,310 --> 00:31:05,100
I see an empty form like this one of the

00:31:03,600 --> 00:31:07,740
things I'd like to do is just hit is it

00:31:05,100 --> 00:31:10,830
just a hit submit and so we see here

00:31:07,740 --> 00:31:12,720
that empty string is a palindrome and

00:31:10,830 --> 00:31:16,020
like I really don't think of empty

00:31:12,720 --> 00:31:18,270
string as being a palindrome so let's

00:31:16,020 --> 00:31:26,030
take this opportunity to go back to our

00:31:18,270 --> 00:31:28,500
code here let's go back to our gem and

00:31:26,030 --> 00:31:30,090
actually you know there's a one little

00:31:28,500 --> 00:31:32,010
refinement look before let's get let's

00:31:30,090 --> 00:31:34,980
do a little refactoring before we start

00:31:32,010 --> 00:31:36,990
I'm gonna change this regular expression

00:31:34,980 --> 00:31:38,550
there's a simpler way I like to think in

00:31:36,990 --> 00:31:40,350
terms of the doing an case-insensitive

00:31:38,550 --> 00:31:43,860
match that we can actually change this

00:31:40,350 --> 00:31:45,120
just to A through Z with I for

00:31:43,860 --> 00:31:48,810
insensitive so let's make sure we're

00:31:45,120 --> 00:31:52,650
still green okay and now let's write a

00:31:48,810 --> 00:31:55,040
test for that case this is a very simple

00:31:52,650 --> 00:31:55,040
test to write

00:31:55,940 --> 00:32:01,680
so test empty string so we're gonna like

00:31:59,520 --> 00:32:03,510
if we actually want to refute that this

00:32:01,680 --> 00:32:05,880
we want to change the behavior of our

00:32:03,510 --> 00:32:13,830
application so refute that empty string

00:32:05,880 --> 00:32:18,900
is a palindrome so we should be read all

00:32:13,830 --> 00:32:20,160
right and then in here I'm just going to

00:32:18,900 --> 00:32:21,960
override it so I mentioned before

00:32:20,160 --> 00:32:25,080
briefly that you you can return with

00:32:21,960 --> 00:32:26,760
with the return keyword in Ruby and when

00:32:25,080 --> 00:32:30,930
it's like an exception to the other

00:32:26,760 --> 00:32:32,760
parts of the method I like to just do it

00:32:30,930 --> 00:32:34,980
an explicit return we're just gonna

00:32:32,760 --> 00:32:36,390
return false and this is very

00:32:34,980 --> 00:32:39,150
characteristic a Ruby to be able to put

00:32:36,390 --> 00:32:41,970
this in one line return false if empty

00:32:39,150 --> 00:32:44,340
remember we can omit this self dot so

00:32:41,970 --> 00:32:46,500
we're immediately going to return there

00:32:44,340 --> 00:32:50,840
we go so now we're green again and then

00:32:46,500 --> 00:32:59,250
we can do this we can reinstall it

00:32:50,840 --> 00:33:02,100
refresh the server and just like that

00:32:59,250 --> 00:33:03,630
now it's not a palindrome anymore so

00:33:02,100 --> 00:33:06,300
we've actually made a change using

00:33:03,630 --> 00:33:09,510
test-driven development to our ruby gem

00:33:06,300 --> 00:33:15,090
reinstalled it and and are now using it

00:33:09,510 --> 00:33:16,530
in our web app so this is a good example

00:33:15,090 --> 00:33:18,450
of how all of these things work together

00:33:16,530 --> 00:33:20,910
we we're using the repple we're using

00:33:18,450 --> 00:33:28,710
our gem and we're using a web app all

00:33:20,910 --> 00:33:31,500
together so we've we've covered quite a

00:33:28,710 --> 00:33:33,500
bit of ground here but there's of course

00:33:31,500 --> 00:33:35,610
a lot more so if you're interested in

00:33:33,500 --> 00:33:37,410
seeing what else there is in the same

00:33:35,610 --> 00:33:39,960
direction you can check out learn enough

00:33:37,410 --> 00:33:44,370
Ruby to be dangerous which is at learn

00:33:39,960 --> 00:33:46,140
enough calm slash Ruby it's been a great

00:33:44,370 --> 00:33:47,850
pleasure speaking with you this

00:33:46,140 --> 00:33:49,620
afternoon it's always a pleasure to talk

00:33:47,850 --> 00:33:51,450
at Ruby conf if you don't get this

00:33:49,620 --> 00:33:52,560
opportunity very often I've been to a

00:33:51,450 --> 00:33:55,440
lot of Ruby comps and I've only ever

00:33:52,560 --> 00:33:56,910
gotten to talk proposals accepted

00:33:55,440 --> 00:33:58,890
including this one so this really is a

00:33:56,910 --> 00:34:00,450
rare treat for me and so I really

00:33:58,890 --> 00:34:03,200
appreciate your all coming this

00:34:00,450 --> 00:34:03,200
afternoon thank you

00:34:10,580 --> 00:34:14,720
and it looks like we've got a few

00:34:13,350 --> 00:34:22,200
minutes for questions

00:34:14,720 --> 00:34:23,760
in case there are any I'll give you give

00:34:22,200 --> 00:34:25,050
you a minute to think through if there's

00:34:23,760 --> 00:34:27,660
anything you can ask me about anything

00:34:25,050 --> 00:34:31,460
if you like doesn't have just have to be

00:34:27,660 --> 00:34:31,460
about to talk if you have any questions

00:34:33,169 --> 00:34:39,350
yeah what's that

00:34:37,050 --> 00:34:42,860
so the question is what is dangerous uh

00:34:39,350 --> 00:34:45,060
it's kind of a double meaning the

00:34:42,860 --> 00:34:47,460
learning enough to be dangerous is like

00:34:45,060 --> 00:34:51,270
you might act you might do something bad

00:34:47,460 --> 00:34:55,560
right but it's also it it encapsulates

00:34:51,270 --> 00:34:57,300
this idea that you can actually be you

00:34:55,560 --> 00:34:59,550
can be productive without learning

00:34:57,300 --> 00:35:01,770
everything and so it has kind of an edge

00:34:59,550 --> 00:35:03,660
to it and I like having that sort of the

00:35:01,770 --> 00:35:05,490
double edge because it really does

00:35:03,660 --> 00:35:07,290
underscore this idea that all right so

00:35:05,490 --> 00:35:08,670
you know I don't know anything about

00:35:07,290 --> 00:35:10,920
this subject that I'm gonna learn enough

00:35:08,670 --> 00:35:13,400
to be you know just just to be a little

00:35:10,920 --> 00:35:13,400
bit dangerous

00:35:15,710 --> 00:35:22,190
any other questions questions about Ruby

00:35:18,690 --> 00:35:22,190
learning enough rails tutorial

00:35:26,950 --> 00:35:30,819
alright it looks like we're good to go

00:35:28,540 --> 00:35:32,859
okay if you uh since I've got a couple

00:35:30,819 --> 00:35:34,299
minutes I'm running an event actually

00:35:32,859 --> 00:35:36,280
has give me a chance to explain

00:35:34,299 --> 00:35:39,190
something so I'm hosting an event

00:35:36,280 --> 00:35:42,099
tonight at the hotel bar on the first

00:35:39,190 --> 00:35:43,930
floor the JW Marriott it's the the 10th

00:35:42,099 --> 00:35:46,299
semiannual so twice a year the ten

00:35:43,930 --> 00:35:48,640
semiannual real tutorial beer we're

00:35:46,299 --> 00:35:51,119
night so let me explain to you what what

00:35:48,640 --> 00:35:53,079
what beer where is if you don't know the

00:35:51,119 --> 00:35:55,240
software license for the Ruby on Rails

00:35:53,079 --> 00:35:57,730
tutorial source code just the example

00:35:55,240 --> 00:35:59,380
code is the default licenses the MIT

00:35:57,730 --> 00:36:00,240
license which is probably the best like

00:35:59,380 --> 00:36:01,930
one of the best-known

00:36:00,240 --> 00:36:03,880
open-source licenses it's very

00:36:01,930 --> 00:36:05,950
permissive but there's a second license

00:36:03,880 --> 00:36:08,980
called the beer we're license so this

00:36:05,950 --> 00:36:10,630
was started by a European programmer who

00:36:08,980 --> 00:36:12,910
is so tight he was specifically I think

00:36:10,630 --> 00:36:13,990
tired of the GPL the general public

00:36:12,910 --> 00:36:15,520
license the Khedive general public

00:36:13,990 --> 00:36:16,869
license because it's really long it's

00:36:15,520 --> 00:36:18,190
got all these different condition

00:36:16,869 --> 00:36:19,990
conditions he just wanted a simple

00:36:18,190 --> 00:36:22,150
license so he made a license called the

00:36:19,990 --> 00:36:24,190
beer where license it says do whatever

00:36:22,150 --> 00:36:26,140
you want with this code and if we meet

00:36:24,190 --> 00:36:28,359
someday maybe buy me a beer if you

00:36:26,140 --> 00:36:30,790
thought the code is worth it and so this

00:36:28,359 --> 00:36:34,630
is now that the the tenth time I posted

00:36:30,790 --> 00:36:37,240
the the beer where night and so if if

00:36:34,630 --> 00:36:39,250
you want they're under no obligation but

00:36:37,240 --> 00:36:43,540
if you want you can come like buy me

00:36:39,250 --> 00:36:46,390
beer so it's tonight at eight o'clock at

00:36:43,540 --> 00:36:49,190
the JW Marriott hotel bar so I hope to

00:36:46,390 --> 00:36:54,389
see some of you there thanks

00:36:49,190 --> 00:36:54,389
[Applause]

00:36:55,570 --> 00:37:04,849

YouTube URL: https://www.youtube.com/watch?v=NGXp6_-nc4s


