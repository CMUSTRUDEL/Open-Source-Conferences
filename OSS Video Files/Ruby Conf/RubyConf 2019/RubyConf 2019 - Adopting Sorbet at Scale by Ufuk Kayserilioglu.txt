Title: RubyConf 2019 - Adopting Sorbet at Scale by Ufuk Kayserilioglu
Publication date: 2019-11-28
Playlist: RubyConf 2019
Description: 
	RubyConf 2019 - Adopting Sorbet at Scale by Ufuk Kayserilioglu

Shopify is a platform used by 800K merchants generating 12B$ revenue per year, serving 80K requests per second. Our core monolith is a 21K file Ruby on Rails application modified by 800 PRs per day. At this scale, we’re always looking out for tools that improve our confidence in the code that we write and maintain.

In this talk, we’ll explain how we adopted Sorbet to leverage static typing in our Ruby codebase. We’ll talk about our journey, the challenges we faced and how we overcame them. Based on this experience, you’ll get a better understanding of how you can benefit from Sorbet, too.

#confreaks #rubyconf2019
Captions: 
	00:00:12,330 --> 00:00:17,450
>> Hello. Welcome to this session. I want to kick things off by showing you a picture,

00:00:17,450 --> 00:00:24,750
a poster from the show "Entourage" where if you watch the show, you know these characters

00:00:24,750 --> 00:00:30,750
have all kinds of problems. But there's a specific problem with this picture. There's

00:00:30,750 --> 00:00:37,080
something missing from this picture. And I don't know if you can figure it out. What's

00:00:37,080 --> 00:00:43,870
missing is none of these people are actually wearing seat belts. Right? And it's very

00:00:43,870 --> 00:00:50,870
important, because seat belts, they save lives, right? They cut the risk of serious injury

00:00:50,870 --> 00:01:01,010
by 50%, and they reduce the risk of death by 45%. Despite this, 4%of Canadian drivers,

00:01:01,010 --> 00:01:11,550
13% of U.S. drivers and 54% of drivers from Turkey, where I'm from, drive without a seat

00:01:11,550 --> 00:01:17,820
belt. And these are just the drivers, not the passengers. Why is that? There are a

00:01:17,820 --> 00:01:27,740
few reasons. First of all, people find them uncomfortable. People over 65 find them restricting.

00:01:27,740 --> 00:01:33,800
And people don't think they'll ever need them. And they think they are less likely to have

00:01:33,800 --> 00:01:42,070
an accident in the first place.  A lot of people actually say our cars are

00:01:42,070 --> 00:01:46,940
safe, right? Because we test them. We do all kinds of crash testing so they should

00:01:46,940 --> 00:01:54,409
be safe already. Why do I need seat belts? But we all know that crash testing costs too much

00:01:54,409 --> 00:02:00,720
time and it costs too much money. Because you have to demolish a whole car every time

00:02:00,720 --> 00:02:07,990
you do crash testing, so it's really wasteful. And you cannot possibly test every situation. You

00:02:07,990 --> 00:02:14,110
cannot test every collision angle. You cannot test every speed. 

00:02:14,110 --> 00:02:21,550
Also interestingly, the higher the stakes, the safer the car is. Note that the need

00:02:21,550 --> 00:02:27,530
for seat belts in this case where the stakes are higher increases despite the car getting

00:02:27,530 --> 00:02:33,459
safer all around. It has roll bars and everything, but it also has better seat belts. So, at

00:02:33,459 --> 00:02:38,590
this point, you're probably wondering, am I in the right room? Who is this guy and

00:02:38,590 --> 00:02:44,730
what is he talking about?  Which reminds me, I haven't made any introductions. Hello,

00:02:44,730 --> 00:02:51,340
my name is Ufuk Kayserilioglu. If you want to know how my last name is exactly pronounced,

00:02:51,340 --> 00:02:59,330
find me after the talk. I'm a senior production on the Rails and Ruby team at Shopify. Shopify

00:02:59,330 --> 00:03:12,360
runs on an immense scale. It's the largest Ruby code base in the world. It's a Ruby

00:03:12,360 --> 00:03:22,030
and Rails code base. Just to share some numbers, Shopify is now supporting 1 million merchants

00:03:22,030 --> 00:03:30,150
around the world in 175 countries, and it can handle 8,000 orders per minute at peak. And

00:03:30,150 --> 00:03:38,959
we drive about $12 billion of sales on the platform per year, and the cumulative number

00:03:38,959 --> 00:03:45,250
of sales is about $135 billion up to this point. 

00:03:45,250 --> 00:03:53,140
On the engineering side, we're about 1,500 RnD employees at the company. Most of these people

00:03:53,140 --> 00:04:00,530
work on our large monolith, which we call Shopify core, that's the core of our business. And

00:04:00,530 --> 00:04:11,410
Shopify core has about 21,000 Ruby files. And we also run about 150,000 tests on every push

00:04:11,410 --> 00:04:19,250
of the code base. So, the test run actually takes about 20 minutes across 20‑odd something

00:04:19,250 --> 00:04:27,080
parallel workers, and we do around 40 deploys daily to production. So, there's too much

00:04:27,080 --> 00:04:33,660
at stake here. We really need seatbelts!  So, today I'll be telling you the story of

00:04:33,660 --> 00:04:40,389
how we adopted our own seat belts at Shopify, how we adopted Sorbet to get these benefits. If

00:04:40,389 --> 00:04:49,370
you were in the previous session, you should be familiar. Sorbet is a type checker for

00:04:49,370 --> 00:04:56,740
Ruby built by Stripe. It is fast. Fast meaning it can parse and analyze all the code in our

00:04:56,740 --> 00:05:04,419
Shopify core monolith in seconds. It is expressive. It has a very expressive type system. It is

00:05:04,419 --> 00:05:10,879
a static checker, so it doesn't run your code. It can check your code without running it in

00:05:10,879 --> 00:05:16,509
seconds. And it's a gradual type checker. You can opt into as much of it as you want or

00:05:16,509 --> 00:05:24,550
as little of it as you want.  Just to give you an idea of how Sorbet works,

00:05:24,550 --> 00:05:29,819
there's a very simple code example on the screen here. Given this code, this code has

00:05:29,819 --> 00:05:35,509
a problem. Can you immediately spot the problem? You probably can, right? The problem is that

00:05:35,509 --> 00:05:41,999
there's a mismatch between what the hash key the method foo expects and what's being supplied

00:05:41,999 --> 00:05:49,150
to it. Foo expects the hash to have string keys, but we're supplying symbol keys. It's

00:05:49,150 --> 00:05:54,039
relatively easy to spot it in this environment where the call site and method definition

00:05:54,039 --> 00:05:59,939
are close together. But imagine if the call site was in a totally separate file in a different

00:05:59,939 --> 00:06:04,560
part of the code base, would you be able to spot them then? 

00:06:04,560 --> 00:06:14,219
Probably not. Let's try making our expectations explicit the sorbet way. Here comes the seatbelt. So,

00:06:14,219 --> 00:06:26,720
we need to add a signature. We affectionately call it a sig. In this case, the parameters

00:06:26,720 --> 00:06:34,139
that our method expects is ops which is a hash with symbol keys and integer values. So,

00:06:34,139 --> 00:06:40,990
that T::hash is the generic version of Hash that Sorbet understands and we can declare

00:06:40,990 --> 00:06:48,659
the type of the keys and the type of the values. There's similar ones for arrays and enumerables, etc. If

00:06:48,659 --> 00:06:59,119
we add the signature, and run this code through Sorbet ‑‑ sorry. If we add the signature

00:06:59,119 --> 00:07:03,259
and run the code, Ruby will complain saying it doesn't know where the method sig is coming

00:07:03,259 --> 00:07:11,309
from and that's why we need the extent T::Sig at the top of the file. So, this makes our

00:07:11,309 --> 00:07:19,159
three‑line function a little more verbose. It feels a little uncomfortable, right? Just

00:07:19,159 --> 00:07:25,460
like how you would feel with a seatbelt. But in return, this is what you get. If you run

00:07:25,460 --> 00:07:31,149
the file through the Sorbet type checker, within milliseconds, you are presented with

00:07:31,149 --> 00:07:39,259
a very nice output, error output saying that it specifically notes that it's saying hash #fetch

00:07:39,259 --> 00:07:47,969
and you are giving it a string where it expects a symbol and it can tell Us where the problem

00:07:47,969 --> 00:07:54,830
is happening.  In a different environment, suppose you have

00:07:54,830 --> 00:08:02,839
some code that relies on some external gem. Let's say there's this view_gem and there's a class

00:08:02,839 --> 00:08:10,849
called View, which probably has like a static method called render. So, in this case, the

00:08:10,849 --> 00:08:17,159
view class is defined by a gem, so Sorbet doesn't know if it has the static method render

00:08:17,159 --> 00:08:22,339
because it don't know about the type. So, how can we tell Sorbet that this type exists

00:08:22,339 --> 00:08:30,180
and what it looks like? So here comes the Ruby interface file decorations. So we solved

00:08:30,180 --> 00:08:39,080
this problem by declaring the interface of this View class in a Ruby interface file,

00:08:39,080 --> 00:08:46,090
an RBI file, it's something like a header file but with Ruby syntax. With the rbi file

00:08:46,090 --> 00:08:57,180
we're telling Sorbet that there's a class named view. And now after we add the rbi

00:08:57,180 --> 00:09:03,190
file, Sorbet can tell us that our call to view.render is wrong because we forgot to

00:09:03,190 --> 00:09:10,590
supply the argument file.  Now that we have seen what Sorbet can do,

00:09:10,590 --> 00:09:18,341
let's talk about our journey with Sorbet at Shopify. So, Shopify was the first company

00:09:18,341 --> 00:09:25,460
outside of Stripe to get access to Sorbet. We got access to the codebase around July of

00:09:25,460 --> 00:09:33,810
2018. And introduced it at a very limited scale in our monolith Shopify core in October

00:09:33,810 --> 00:09:41,960
2018. So, this was only working across like a few files in our codebase, so we had to

00:09:41,960 --> 00:09:47,610
do a lot of hard work to make sure that Sorbet could run over all the files in our codebase. So,

00:09:47,610 --> 00:09:56,360
that takes us up to March 2019. And then after a couple of weeks of testing it in parallel,

00:09:56,360 --> 00:10:04,400
we made it mandatory in CI for all code in May of 2019. And Sorbet was open‑sourced

00:10:04,400 --> 00:10:12,380
by Stripe in June. And throughout this process, you can see it's like a year with a small

00:10:12,380 --> 00:10:17,910
team leading the charge. The reason why it lasted so long is because we paid the early

00:10:17,910 --> 00:10:22,870
adopter price, right? We're one of the first companies to get access to this codebase,

00:10:22,870 --> 00:10:29,660
and we had to solve many problems and sometimes in parallel to what Stripe was doing. 

00:10:29,660 --> 00:10:34,890
I'll just go through some of the problems. Initially, there was no runtime component. So, initially

00:10:34,890 --> 00:10:41,860
there was no gem that we could include that would describe those sigs and do the runtime

00:10:41,860 --> 00:10:47,180
checks. So we had to build our own runtime component. The initial version was built

00:10:47,180 --> 00:10:54,440
in‑house as a gem named waffle‑cone, which is now deprecated. We shared our work with

00:10:54,440 --> 00:11:00,460
the Sorbet team. They used some of the code and some of the ideas and they built their

00:11:00,460 --> 00:11:07,570
official version of the runtime and we later on switched to using the Sorbet runtime. 

00:11:07,570 --> 00:11:14,070
The other problem we had is like how I showed you with the view example, all constants and

00:11:14,070 --> 00:11:19,180
all classes and modules in your codebase need to resolve. So, Sorbet wants to understand

00:11:19,180 --> 00:11:23,880
all constants, and if any is missing. It assumes that's an error, because you might

00:11:23,880 --> 00:11:30,041
have mistyped one of the constants, right? And it complains about it. But that's a problem,

00:11:30,041 --> 00:11:35,960
because if you're depending on a lot of gems like we do, we depend on hundreds of gems

00:11:35,960 --> 00:11:42,610
in Shopify core, that becomes a problem, because it's not possible to manually start typing

00:11:42,610 --> 00:11:50,210
every gem that we depend on.  So what we did is we built a gem RBI generator. Basically

00:11:50,210 --> 00:11:56,490
the tool takes a gem and it can generate an RBI file that describes the constants that

00:11:56,490 --> 00:12:01,280
are being exported from that gem. The initial version was built on YARD because we wanted

00:12:01,280 --> 00:12:08,410
the signatures as well. And we decided that because YARD looks at the gem codebase statically,

00:12:08,410 --> 00:12:14,090
that becomes a problem because you end up not seeing the dynamically generated methods.

00:12:14,090 --> 00:12:19,140
So, we decided that the structure of constants was more important and more important that

00:12:19,140 --> 00:12:28,600
we could tell Sorbet that certain methods or subconstants existed, so we dialed back

00:12:28,600 --> 00:12:36,560
and started working on a runtime reflection tool and we open sourced that as tapioca. 

00:12:36,560 --> 00:12:47,310
Some constructs are not supported by Sorbet. We had to build Rubocop rules to make sure that

00:12:47,310 --> 00:12:53,370
our codebase did not use those constructs. They were initially bundled in waffle‑cone but

00:12:53,370 --> 00:13:01,550
they eventually went to Rubocop and we open sourced them. 

00:13:01,550 --> 00:13:10,970
And metaprogramming means that you're ‑‑ but it is a static type checker so it has

00:13:10,970 --> 00:13:18,510
no idea what is happening at runtime. It's not running your code. So, because we're

00:13:18,510 --> 00:13:25,340
a Rails shop, there's lots of metaprogramming coming from Rails. And we have metaprogramming

00:13:25,340 --> 00:13:35,510
in our codebase. So, we initially built a DSL plugin for Sorbet in C++. That was built

00:13:35,510 --> 00:13:45,070
on simple class method name matching. You can still tell Sorbet that it should match

00:13:45,070 --> 00:13:51,460
on certain class names, and it should run a Ruby script, and the job of the Ruby script

00:13:51,460 --> 00:13:57,420
that it runs is to generate the RBI file based on which class name was matched. 

00:13:57,420 --> 00:14:03,760
And we contributed this to the Sorbet project. We documented it. You can find it in the Sorbet

00:14:03,760 --> 00:14:09,000
documentation. But it turns out this was a little bit slow and a little error‑prone. It

00:14:09,000 --> 00:14:15,000
solved our initial problem, but we're not actually relying on this a lot today except

00:14:15,000 --> 00:14:23,000
a few specific situations.  And the other problem was Rails support ‑‑

00:14:23,000 --> 00:14:30,540
so Rails is heavily built on metaprogramming, specifically the active record models, all

00:14:30,540 --> 00:14:38,890
the belongs_to and the other relation specifications, they actually generate methods in the background,

00:14:38,890 --> 00:14:44,220
right? And Sorbet needs to understand what those methods are. It doesn't understand

00:14:44,220 --> 00:14:51,770
the Rails annotations. So, what we did here is we built an RBI generator for models. This

00:14:51,770 --> 00:14:57,970
is a rake task that loads your active record models and generates RBI files that describes

00:14:57,970 --> 00:15:05,011
them as they would appear at runtime. This initial code was based on Sorbet Rails, so

00:15:05,011 --> 00:15:10,300
we were still using a fork of Sorbet Rails, but we are planning to switch to Sorbet Rails

00:15:10,300 --> 00:15:20,110
and building on top of it soon.  So what are some of our results? Let me first

00:15:20,110 --> 00:15:29,040
talk about the strictness levels of our non‑test files. So the strictness levels, if you noticed

00:15:29,040 --> 00:15:35,490
in my Sorbet examples at the top of the pile, there was the typed true. That's the strictness

00:15:35,490 --> 00:15:41,740
level. You can start from typed false or typed ignore. Like I'm ignoring all the ignored

00:15:41,740 --> 00:15:47,410
files. So, you can start with type false. At type false, Sorbet parses your file but does

00:15:47,410 --> 00:15:56,670
no type checking. It verifies the structure, but it doesn't perform any type checking.

00:15:56,670 --> 00:16:03,080
That's the lowest level you can opt into. The majority of our codebase is still actually

00:16:03,080 --> 00:16:10,710
typed false. But about 40%of our codebase is typed true. And about 1.5%of our codebase

00:16:10,710 --> 00:16:17,850
is typed strict, where the strictness level, there are actually more checks being done,

00:16:17,850 --> 00:16:23,650
making sure that the methods you call are also have their types, etc. 

00:16:23,650 --> 00:16:30,279
But despite that, when we look at the percentage of checked calls, so you can actually take

00:16:30,279 --> 00:16:35,920
a look at ‑‑ you can actually ask Sorbet to tell you out of all the method calls being

00:16:35,920 --> 00:16:42,240
done in my program, what percentage of them are being done with known types? So that's

00:16:42,240 --> 00:16:49,260
the checked calls. And you can see in our code base that we're almost 50/50. So, almost

00:16:49,260 --> 00:16:53,880
like half the method calls that are being performed in our codebase are being checked

00:16:53,880 --> 00:16:59,570
with some kind of types. This is interesting, because we didn't actually have to add that

00:16:59,570 --> 00:17:05,559
many types to get here. And if you think about it, it actually makes sense. Many of

00:17:05,559 --> 00:17:10,740
the calls that are being performed in your program are actually going to stdlib or core

00:17:10,740 --> 00:17:17,329
methods, and those are being type checked already, because Sorbet comes with the annotations. And

00:17:17,329 --> 00:17:25,449
the more annotations you add to your codebase, the more coverage you have in this respect. 

00:17:25,449 --> 00:17:32,269
This is a graph of developer invocations of type checking on developer machines. This

00:17:32,269 --> 00:17:41,549
is in CI. We track these invocations because we have a tool named dev that all our developers

00:17:41,549 --> 00:17:46,730
use, and Sorbet is integrated into that tool now. So, every time someone types dev type

00:17:46,730 --> 00:17:54,169
check, we can see metrics on how many times it's being used. Each color on this graph

00:17:54,169 --> 00:18:01,861
is a distinct user. And the height of these bars is the number of times that type checking

00:18:01,861 --> 00:18:10,539
was used on that day. The red line describes the time when we released full Sorbet coverage

00:18:10,539 --> 00:18:17,380
in core. And you can see in May and June, there's a lot of activity, but most of that

00:18:17,380 --> 00:18:26,789
activity is from my team. Usage across developers starts in July and August, and you can see

00:18:26,789 --> 00:18:35,170
there's a steady increase in usages and it's going up and to the right. We can look at

00:18:35,170 --> 00:18:44,919
the evolution of method signatures. In 2018, we started at a very small scale, and we are

00:18:44,919 --> 00:18:51,289
quickly ramping up. And the rate of increase is increasing. So, we're right now at about

00:18:51,289 --> 00:19:02,419
4,500 methods annotated with signatures. We have talked to teams at Shopify who have used

00:19:02,419 --> 00:19:12,080
Sorbet extensively. We did face to face interviews to understand what they liked and disliked

00:19:12,080 --> 00:19:18,830
about their experience using sorbet. So, we have a few testimonials. So, on the likes

00:19:18,830 --> 00:19:26,890
corner, people told us that they get quicker feedback than they would get running tests

00:19:26,890 --> 00:19:32,909
or running CI. So, they were really happy about that. They also told us that Sorbet

00:19:32,909 --> 00:19:39,280
allowed them to write less tests because some of the tests they were writing, they were

00:19:39,280 --> 00:19:43,919
just trying to enforce the types of certain parameters. Now they don't need to write

00:19:43,919 --> 00:19:54,170
those tests. They also said that they caught errors not caught by tests alone. This was

00:19:54,170 --> 00:20:01,080
an interesting revelation, this was an interesting revelation that we couldn't have caught otherwise,

00:20:01,080 --> 00:20:10,269
because by the time code makes it to CI, developers have already fixed the errors in their code,

00:20:10,269 --> 00:20:15,779
right? It responds immediately in a matter of seconds and they can see exactly what's

00:20:15,779 --> 00:20:22,289
going on so they have time to fix it before pushing the code out to CI. 

00:20:22,289 --> 00:20:28,880
And they repeatedly told us that thinking about types as they are coding improves their

00:20:28,880 --> 00:20:38,539
code quality and encourages better code design throughout. They also said it creates evergreen

00:20:38,539 --> 00:20:46,809
documentation and makes onboarding new people on to the team easier. So, that's all the

00:20:46,809 --> 00:20:57,820
likes. They have dislikes as well. The syntax is verbose and not DRY, and that is because

00:20:57,820 --> 00:21:06,090
Sorbet needs to work on top of Ruby. They are not integrated into the language. As

00:21:06,090 --> 00:21:10,600
well as defining your method. You need to define a signature on top of your method and

00:21:10,600 --> 00:21:18,710
you need to repeat your parameters so that you can tell Sorbet about their types. If

00:21:18,710 --> 00:21:24,250
this was built into Ruby, of course it wouldn't have been the case. But because it's an add‑on,

00:21:24,250 --> 00:21:31,450
it's more verbose. They told us that it's hard to add types to existing code, but that

00:21:31,450 --> 00:21:40,749
it was easier to write new code if they were starting to add new code with types in mind. The

00:21:40,749 --> 00:21:46,989
problem with existing code is it's hard to make sure that you fully understand what's

00:21:46,989 --> 00:21:54,350
going on in the method in the first place.  They told us that Rails and metaprogramming,

00:21:54,350 --> 00:22:00,860
support is not complete yet. We're aware of that. And we've also run into a few pitfalls

00:22:00,860 --> 00:22:08,059
along the way, so I just want to share those. So, the first one is keeps coming up, metaprogramming

00:22:08,059 --> 00:22:13,961
support. So, if you use a lot of DSLs like we do, you will need to generate RBI files

00:22:13,961 --> 00:22:19,049
for them. Like I said, Sorbet is a static type checker. It doesn't run your code, so

00:22:19,049 --> 00:22:25,679
it has no idea what's happening at runtime, so you need to tell us what would have happened. What

00:22:25,679 --> 00:22:33,320
your types actually look like at runtime. There is limited ability to extent Sorbet to understand

00:22:33,320 --> 00:22:39,739
more syntax. We built the DSL plugins but they're too slow and probably not ready for

00:22:39,739 --> 00:22:44,860
prime time.  Another pitfall we ran into is there are some

00:22:44,860 --> 00:22:55,059
missing stdlib signatures that come bundled with Sorbet. So, like the Sorbet team told

00:22:55,059 --> 00:23:02,799
us, they are currently maintaining the stdlib and core method signatures within the project. But

00:23:02,799 --> 00:23:08,769
it doesn't have full coverage. So, you might get errors for perfectly valid ruby code. And

00:23:08,769 --> 00:23:13,740
that might be strange at fist, but it's most probably because Sorbet doesn't know about

00:23:13,740 --> 00:23:20,330
that method. But it's very easy to contribute that. So, if you ever run into that, you

00:23:20,330 --> 00:23:25,419
can just go and find the RBI file that it should be in the Sorbet project and just add

00:23:25,419 --> 00:23:34,169
it and the Sorbet team is more than happy to accept those contributions. 

00:23:34,169 --> 00:23:40,679
Another pitfall, and this isn't very often, but something to watch out for. Sorbet doesn't

00:23:40,679 --> 00:23:46,789
look up constants by inheritance. So, if you have a class foo that declares the Bar

00:23:46,789 --> 00:23:54,889
constant and if there's a subclass Baz and you're trying to access Bar on Baz, then Sorbet

00:23:54,889 --> 00:24:01,369
will complain because it won't look up Bar up the inheritance chain. But if you use

00:24:01,369 --> 00:24:07,239
Bar on foo, it's okay. This sometimes comes up and it might be strange when you first

00:24:07,239 --> 00:24:15,279
run into it, but it's a very easy fix.  What's more important for rubyists is there

00:24:15,279 --> 00:24:21,649
is no dynamic superclass or mixin support for Sorbet. What usually happens in our Ruby

00:24:21,649 --> 00:24:28,559
codebases is there's a method that returns a class or a method that returns a module

00:24:28,559 --> 00:24:34,940
that then people use as superclasses or includes or extends or whatever. But again, because

00:24:34,940 --> 00:24:41,159
Sorbet has no idea what's happening inside the method, it's not running through your

00:24:41,159 --> 00:24:48,169
code after all. There's no way it can actually enforce types for dynamic superclass or dynamic

00:24:48,169 --> 00:24:53,080
mixin, so it would error out. So, you need to find a way around this. Either don't type

00:24:53,080 --> 00:25:02,309
check those files or do something else.  And finally, there is a runtime type checking

00:25:02,309 --> 00:25:09,850
overhead. So, the numbers we got from Stripe is that checking types at runtime adds about

00:25:09,850 --> 00:25:17,690
a 7%overhead to performance. That's not a problem for us for dev and test environments. We

00:25:17,690 --> 00:25:24,389
actually run full runtime checking on developer machines while we're running tests and it

00:25:24,389 --> 00:25:29,690
actually unearths lots of interesting edge cases. But we don't want it for production,

00:25:29,690 --> 00:25:34,929
so we disabled runtime checks for production. You might want them or you might not want them,

00:25:34,929 --> 00:25:41,279
but this is something to keep in mind.  So how can you get started adopting Sorbet

00:25:41,279 --> 00:25:47,149
in your codebase? So I'll just go through a few steps. Step one is please go to the

00:25:47,149 --> 00:25:54,970
Sorbet playground and play around. Like the Sorbet team mentioned, this is an amazing

00:25:54,970 --> 00:26:01,669
tool. It's the Sorbet tool built on web assembly. It runs inside your browser. You just type some

00:26:01,669 --> 00:26:05,850
code and you get immediate feedback so you can see what works, what doesn't work. You

00:26:05,850 --> 00:26:11,980
can test different syntax, and it's a great way to share snippets of Sorbet as well. The

00:26:11,980 --> 00:26:17,539
urls it generates are unique so you can share it and other people can see the same thing. And

00:26:17,539 --> 00:26:22,960
just go and read the documentation of Sorbet.  Step two, add Sorbet to your project. This

00:26:22,960 --> 00:26:28,399
is very easy. You add the Sorbet gem and the Sorbet runtime gem to your gem file and

00:26:28,399 --> 00:26:38,139
you run bundle exec SRB init. It actually loads each one of your Ruby files and tries

00:26:38,139 --> 00:26:43,520
to figure out what the strictness level should be and it also tries to figure out if there

00:26:43,520 --> 00:26:49,509
are actually some methods coming from those files at runtime. And generates a bunch of

00:26:49,509 --> 00:26:59,270
rbis. It also pulls RBIs from Sorbet typed repository if they exist there. And actually

00:26:59,270 --> 00:27:06,230
prepares your code base ready for type checking.  We didn't go this route, because our code

00:27:06,230 --> 00:27:14,669
base is too big and it takes a very long time to go through our codebase, and we don't want

00:27:14,669 --> 00:27:19,830
Sorbet to change our strictness levels according to what it sees fit. We want to be intentional

00:27:19,830 --> 00:27:29,070
about that. The way we do this step is we add Sorbet, Sorbet runtime and tapioca, and

00:27:29,070 --> 00:27:41,639
then we run tapioca init and tapioca sync. Then you just go through the errors that you get

00:27:41,639 --> 00:27:50,970
from Sorbet type checking and you either generate RBI files for them, and you auth more files,

00:27:50,970 --> 00:27:58,629
fix your code, and you're all right.  Another step that you should follow is you

00:27:58,629 --> 00:28:05,029
should start typing new code instead of trying to type your existing code. Like I said, and

00:28:05,029 --> 00:28:09,679
like we heard from the developers at Shopify, it's easier to type when you're adding new

00:28:09,679 --> 00:28:15,850
code, but it's ‑‑ you're more than welcome to add types to existing code when it's easy

00:28:15,850 --> 00:28:23,799
and convenient. Just don't try too hard on that. You can also use Rubocop Sorbet. There's

00:28:23,799 --> 00:28:36,389
a rule that adds template signatures template signatures. We don't try and figure out what

00:28:36,389 --> 00:28:46,409
the types are. But you can actually use that as a template and start adding your types. 

00:28:46,409 --> 00:28:52,200
And another thing you should be doing is you should lean on gradual typing. So, this is

00:28:52,200 --> 00:28:57,809
very important. You can type as much or as little of your codebase as you want. You

00:28:57,809 --> 00:29:05,489
can ‑‑ this is totally opt‑in. You can opt in on a file level or a method level. So,

00:29:05,489 --> 00:29:11,299
we suggest that you start mall and increase coverage slowly. And a very important thing

00:29:11,299 --> 00:29:16,149
while you're doing that, if you're considering adoption within your company and if you're

00:29:16,149 --> 00:29:21,570
trying to lead this charge within your company, you should be very careful not to break other

00:29:21,570 --> 00:29:28,289
people's workflows. People get mad and they don't like the tool. They don't like you. And

00:29:28,289 --> 00:29:35,639
they say we're never using this. And, you know, it stops there. Be careful and don't

00:29:35,639 --> 00:29:41,639
break other people's workflows. And finally, Dmitry also touched upon this

00:29:41,639 --> 00:29:50,299
topic. One suggestion is to not over‑type. It's okay to use simpler signatures. You don't

00:29:50,299 --> 00:29:56,229
have to be explicit and very exact in your signatures, because don't forget, this is

00:29:56,229 --> 00:30:01,330
a seatbelt. You still do the crash tests, right? This is a seatbelt. This is an additional

00:30:01,330 --> 00:30:07,500
safety feature that You didn't have before. It's okay to add incremental things and there's

00:30:07,500 --> 00:30:14,909
no harm in using T.untyped when it is needed or appropriate. Basically your colleagues

00:30:14,909 --> 00:30:22,419
shouldn't need a PhD in type theory to make code changes. This is very important for

00:30:22,419 --> 00:30:27,289
adoption because if people don't understand what is going on in the signature, they will

00:30:27,289 --> 00:30:32,840
decide to not use it or not touch it and it will break and all kinds of mishaps will happen. 

00:30:32,840 --> 00:30:41,090
And finally, it's very important to track your progress, and this is actually very simple

00:30:41,090 --> 00:30:47,019
because Sorbet can generate metrics and we actually generated the metrics that are presented

00:30:47,019 --> 00:30:52,789
using Sorbet if you just give it the metrics file flag, it generates a JSON file that is

00:30:52,789 --> 00:30:57,289
easy to parse, and you can set up a nightly task, and you can set up a dashboard to track

00:30:57,289 --> 00:31:04,009
your progress and see similar or draw similar charts like ours and see if you are making

00:31:04,009 --> 00:31:09,519
progress in the right direction.  So, thank you. And please don't forget to

00:31:09,519 --> 00:31:14,580
fasten your seatbelts. If you want to reach out to me, reach out on Twitter or GitHub

00:31:14,580 --> 00:31:20,169
or come join us at the Shopify booth outside. If you have questions, I'm more than happy to

00:31:20,169 --> 00:31:24,710
answer them here or at the booth.  [ Applause ]

00:31:24,710 --> 00:31:30,690
>> [ Inaudible Question ]

00:31:30,690 --> 00:31:38,509
>> Okay. So, the elephant in the room is Ruby is obviously not a typed language. If

00:31:38,509 --> 00:31:45,080
you were to rewrite Shopify in another language, wouldn't you be using a static type anyway? The

00:31:45,080 --> 00:31:51,230
answer to that is very simple. We don't intend to rewrite Shopify any time soon, but we want

00:31:51,230 --> 00:31:56,899
the safety guarantees of using static types as much as possible, and this is the sweetest

00:31:56,899 --> 00:32:02,960
spot we can be in. Sorbet is a great tool to use in the areas you feel like you need

00:32:02,960 --> 00:32:10,460
safety. In other areas of your codebase, if you don't care that much, it's a tangential

00:32:10,460 --> 00:32:15,879
module that's not that important or critical, then you don't have to have any types. So,

00:32:15,879 --> 00:32:23,399
you get the best of both worlds without devoting all the resources to rewrite this giant platform

00:32:23,399 --> 00:32:25,250
in another language.  >> [ Inaudible Question ]

00:32:25,250 --> 00:32:26,250
>> [ Inaudible Question ]

00:32:26,250 --> 00:32:33,399
>> The team that worked on the final push to get Sorbet running across all files were

00:32:33,399 --> 00:32:34,399
three people, including me. Yep.  >> So we did take a look at that. But our

00:32:34,399 --> 00:32:35,399
initial test case, like I said, is our monolith, and it's a huge project. And there's lots

00:32:35,399 --> 00:32:36,399
of different things going on. We're deserializing strings from the database, turning them into

00:32:36,399 --> 00:32:37,399
objects, etc., etc. We're doing lots of risky things. So they cause problems outside of

00:32:37,399 --> 00:32:38,399
what static checkers can guarantee. So, we haven't actually been able to find a correlation

00:32:38,399 --> 00:32:39,399
between adding Sorbet and a decrease in production incidents. But we're now actually doing a

00:32:39,399 --> 00:32:40,399
different project where we're experimenting with Sorbet on a much smaller project within

00:32:40,399 --> 00:32:41,399
the company, and we are actually then trying to look at the correlation between production

00:32:41,399 --> 00:32:42,399
errors and adoption of Sorbet. So, if we have more results in that, we will probably

00:32:42,399 --> 00:32:43,399
share them publicly. Thank you.  Okay. Thank you all for coming. 

00:32:43,399 --> 00:32:43,400

YouTube URL: https://www.youtube.com/watch?v=v9oYeSZGkUw


