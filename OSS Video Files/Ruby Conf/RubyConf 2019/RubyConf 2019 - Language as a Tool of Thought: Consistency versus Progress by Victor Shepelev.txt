Title: RubyConf 2019 - Language as a Tool of Thought: Consistency versus Progress by Victor Shepelev
Publication date: 2019-11-30
Playlist: RubyConf 2019
Description: 
	Language as a Tool of Thought: Consistency versus Progress by Victor Shepelev

Our programming language is not a mere instrument: it shapes how we think about problems, what we feel right and wrong. But as the Ruby itself changes (and rather quickly, lately), what happens with our understanding and feeling of it? More powerful language is probably good, but how should it stay consistent and true to its spirit without losing the pace of the progress? Let's look closely at some new and upcoming Ruby features, and some missing and rejected ones, and discuss where are we standing currently in regards to consistency and "developer's happiness".


#confreaks #rubyconf2019 #rubyconf
Captions: 
	00:00:00,120 --> 00:00:02,919
>> Okay.

00:00:02,919 --> 00:00:08,519
Let's start.

00:00:08,519 --> 00:00:14,129
Hi, everyone.

00:00:14,129 --> 00:00:20,670
I want to say sorry in advance for my awful accent and for the Google slides and for a

00:00:20,670 --> 00:00:24,170
lot of other things, but I had better start with my talk.

00:00:24,170 --> 00:00:29,960
I'll explain about who I am a bit later.

00:00:29,960 --> 00:00:32,629
When it would be, like, more important context.

00:00:32,629 --> 00:00:39,949
Now I just wanted to give a quick overview of what we will be talking about.

00:00:39,949 --> 00:00:48,980
I want to talk with you about why the language we are writing in matters, what is the spirit

00:00:48,980 --> 00:00:52,609
of Ruby and how it matters.

00:00:52,609 --> 00:00:58,949
Why Ruby should change and how it changed, and finally about some things that disturb

00:00:58,949 --> 00:01:05,110
people, including me, including probably you, when Ruby changes or when it doesn't change

00:01:05,110 --> 00:01:09,830
or when we wanted it to change.

00:01:09,830 --> 00:01:18,960
So, the first part, you know how much you need this.

00:01:18,960 --> 00:01:31,050
I wanted to start with this quote from an old Sci fi novel about some alien language

00:01:31,050 --> 00:01:35,610
which allowed it to pass information super effectively.

00:01:35,610 --> 00:01:43,920
Please raise your hand if you know this quote and what novel it came from.

00:01:43,920 --> 00:01:51,670
So, it's an old sci fi classic.

00:01:51,670 --> 00:01:55,450
It is Babel 17.

00:01:55,450 --> 00:02:02,260
It's very unusual for the classic, a linguistic novel.

00:02:02,260 --> 00:02:07,020
It has spaceships and wars and aliens and so on.

00:02:07,020 --> 00:02:16,019
But mostly, it is about language that is more effective than any known languages, and by

00:02:16,019 --> 00:02:24,370
this it changes the thinking of those who talk or think in this language.

00:02:24,370 --> 00:02:32,970
It is based on so called ideas that language shapes how you think.

00:02:32,970 --> 00:02:40,469
It has been disproven, but it is proven that language affects your thinking.

00:02:40,469 --> 00:02:43,890
It's a good hypothesis or a good metaphor.

00:02:43,890 --> 00:02:50,659
So, when I wanted to start with this linguistic stuff, I was not sure that it's appropriate

00:02:50,659 --> 00:02:56,219
for programming confidence, but then I stumbled upon this slide.

00:02:56,219 --> 00:03:00,969
It's an introduction to the talk of the person we all know.

00:03:00,969 --> 00:03:06,010
And it's done in like 16 years ago.

00:03:06,010 --> 00:03:15,190
Matz explicitly says that the Babel 17 thing inspired him to think about Ruby and to invent

00:03:15,190 --> 00:03:16,190
Ruby.

00:03:16,190 --> 00:03:25,700
So, first creation of the talk, the programming language is a tool of thought.

00:03:25,700 --> 00:03:32,909
When we are starting programming, we frequently meet with people who say that professionals

00:03:32,909 --> 00:03:38,310
should take any language and, like, just write in it.

00:03:38,310 --> 00:03:45,760
The principle is the architecture is the same, the principle, model, view, controller, or

00:03:45,760 --> 00:03:52,510
ddd, hexagon architecture, and my experience says to do so and my history says to do that.

00:03:52,510 --> 00:03:56,769
And the language is probably not that important.

00:03:56,769 --> 00:04:03,810
Then there is also thinking that says that it starts with the phrases of the language.

00:04:03,810 --> 00:04:13,279
When you think about how you can say this idea in Ruby or in java or in your Python

00:04:13,279 --> 00:04:18,959
and how your language, the nature of the language.

00:04:18,959 --> 00:04:23,810
And there are interesting things that those two ways of thinking about problems, they

00:04:23,810 --> 00:04:24,979
are not contradictory.

00:04:24,979 --> 00:04:27,780
We always do some balance of both.

00:04:27,780 --> 00:04:35,669
There are people who almost always ignore the phrase level thinking and they can be

00:04:35,669 --> 00:04:36,669
successful.

00:04:36,669 --> 00:04:43,310
There are people who always think about any problem from the phrase level, and they also

00:04:43,310 --> 00:04:44,650
can be successful.

00:04:44,650 --> 00:04:49,990
But probably the most successful mix is mixing the both.

00:04:49,990 --> 00:04:57,230
So, we can say that our experiences that our frameworks, architectures and so on, it's

00:04:57,230 --> 00:04:58,360
our tools.

00:04:58,360 --> 00:05:01,740
And the language is our material.

00:05:01,740 --> 00:05:10,590
And so my talk title is I want to talk about programming language as a material of sorts.

00:05:10,590 --> 00:05:15,850
So what are the properties of a good material when you work with it?

00:05:15,850 --> 00:05:18,240
First, it needs to be pliable.

00:05:18,240 --> 00:05:23,919
It needs to allow you to do what you imagine you want it to do.

00:05:23,919 --> 00:05:34,460
You take it and you think I want to make something, and it allows you to work with it how you

00:05:34,460 --> 00:05:35,460
expect.

00:05:35,460 --> 00:05:37,860
But the very best materials are also insightful.

00:05:37,860 --> 00:05:44,530
You take it, you start to make your item, and you say I haven't thought that probably

00:05:44,530 --> 00:05:53,449
I can use this material this way or that way in my hands.

00:05:53,449 --> 00:05:57,770
It makes me think about different ways of solving problems.

00:05:57,770 --> 00:06:05,159
So, that's that would be the best fit is material allows you to do what you want it but also

00:06:05,159 --> 00:06:10,189
implies that you can do something that you haven't thought about.

00:06:10,189 --> 00:06:15,620
And in general, that's how any creativity works, that you start with something that

00:06:15,620 --> 00:06:20,879
you are really familiar with, and you go to the areas that are implied and that you are

00:06:20,879 --> 00:06:23,879
unfamiliar with, and you search in this area.

00:06:23,879 --> 00:06:30,379
And generally, that's how the culture in general works.

00:06:30,379 --> 00:06:31,930
Yeah?

00:06:31,930 --> 00:06:33,479
Okay.

00:06:33,479 --> 00:06:42,210
So, this topics that I wanted to talk about, it's highly personal for me.

00:06:42,210 --> 00:06:51,210
And I understand that it may be personal for the audience, because I am talking about insights,

00:06:51,210 --> 00:06:54,990
and it could be very, very charged.

00:06:54,990 --> 00:07:03,740
So, I what I can do here is I just can ask you to try my optics, to try to see things

00:07:03,740 --> 00:07:04,889
my way.

00:07:04,889 --> 00:07:13,229
And even if you disagree with a particular slide, maybe it will help you to shape your

00:07:13,229 --> 00:07:18,040
own thinking and understand how you want to think about those problems.

00:07:18,040 --> 00:07:29,380
And here is where I probably should explain who I am and what this person who asks you

00:07:29,380 --> 00:07:33,410
to follow their thoughts and optics.

00:07:33,410 --> 00:07:39,680
So I am victor Shepelev, known to some of you as zverok.

00:07:39,680 --> 00:07:41,370
I am from Ukraine.

00:07:41,370 --> 00:07:46,590
That explains my awful I know it's awful my awful accent.

00:07:46,590 --> 00:07:55,340
So, far it's the farthest conference I have traveled to.

00:07:55,340 --> 00:08:00,469
I have been in Kenya, India, Japan, and Poland, and they are all awesome.

00:08:00,469 --> 00:08:08,310
I am writing in Ruby for more than 15 years.

00:08:08,310 --> 00:08:17,260
Most of the time I manage to avoid Rails, but eventually I also and now I am writing

00:08:17,260 --> 00:08:19,889
in Rails, too.

00:08:19,889 --> 00:08:31,610
I am working for the Verbit.ai, which does try to revolutionize transcribing, including

00:08:31,610 --> 00:08:39,159
live transcribing, so at least I understand how much work the live transcribers put.

00:08:39,159 --> 00:08:45,130
And so I really want to thank Stacey for the hard work for this conference, because I understand

00:08:45,130 --> 00:08:48,740
that it's it's super hard.

00:08:48,740 --> 00:08:55,070
I am mentoring students both for money and voluntary, and sometimes I just catch people

00:08:55,070 --> 00:08:58,870
on streets and mentor them in Ruby.

00:08:58,870 --> 00:08:59,870
Yeah.

00:08:59,870 --> 00:09:02,551
I write a lot of open source software.

00:09:02,551 --> 00:09:08,670
Some of it is particularly popular, and some of it is at least interesting.

00:09:08,670 --> 00:09:18,620
And last but not least, I am also not very popular, but proficient writer and poet.

00:09:18,620 --> 00:09:27,209
And poetry is surprisingly relevant for this talk, because I believe it gives me perspective

00:09:27,209 --> 00:09:31,950
to talk about language and how language affects our thoughts.

00:09:31,950 --> 00:09:34,950
And a few more things.

00:09:34,950 --> 00:09:36,880
I am really passionate about Ruby.

00:09:36,880 --> 00:09:44,100
So, I am doing things for Ruby that maybe for some of you could be interesting.

00:09:44,100 --> 00:09:52,230
I am maintaining nicely formatted reference formatted from a few docs and adding something

00:09:52,230 --> 00:09:55,990
to those docs to make it accessible for devices.

00:09:55,990 --> 00:10:04,120
I am maintaining the Ruby changelog, and I will say it's quite good and helpful.

00:10:04,120 --> 00:10:07,250
I am doing a lot of proposals to Ruby.

00:10:07,250 --> 00:10:08,660
Most of them got rejected.

00:10:08,660 --> 00:10:09,670
Some of them got accepted.

00:10:09,670 --> 00:10:15,380
So, I am the person you should hate for them if you hate them.

00:10:15,380 --> 00:10:24,620
And, yeah, as a last line of this slide, I believe that I should put this disclaimer

00:10:24,620 --> 00:10:32,300
here, because I use Python as a small example throughout the talk.

00:10:32,300 --> 00:10:40,670
Not to say that Ruby is good and Python is bad, but to show how different design ideas

00:10:40,670 --> 00:10:43,029
lead to different thinking.

00:10:43,029 --> 00:10:49,810
Just to show the difference, not to, like, show my disgust for other languages.

00:10:49,810 --> 00:10:57,120
So what is the spirit of Ruby from my subjective point of view that I at least want to present

00:10:57,120 --> 00:11:00,220
to you?

00:11:00,220 --> 00:11:06,760
If you start from some simple example of some Ruby class doing some simple things, it's

00:11:06,760 --> 00:11:19,990
easy to say that you can write almost the same code in almost any language like modern

00:11:19,990 --> 00:11:28,570
object oriented language, be it Python or PHP or java, type definitions in C++.

00:11:28,570 --> 00:11:33,980
So, we know that Ruby is different, but how is it different?

00:11:33,980 --> 00:11:40,010
First thing that comes to mind when somebody starts to learn Ruby that we don't have cycles

00:11:40,010 --> 00:11:41,829
like normal people do.

00:11:41,829 --> 00:11:43,720
You know this.

00:11:43,720 --> 00:11:51,529
We have enumerables and metachaining and blocks.

00:11:51,529 --> 00:11:59,579
And blocks is most unusual and maybe hard to grasp for novices, but most code in Ruby

00:11:59,579 --> 00:12:11,850
because block is it makes functional programming in line functional programming natural in

00:12:11,850 --> 00:12:19,139
ways that blocks feel like they are in the same context and like, you know, other languages

00:12:19,139 --> 00:12:26,670
that use some, like, old JavaScript that will write function in the statement and so on.

00:12:26,670 --> 00:12:32,959
But blocks, they psychologically, they bring the context here.

00:12:32,959 --> 00:12:43,430
And chaining the cycles to enumerables makes us want some new and exciting things.

00:12:43,430 --> 00:12:52,120
Chaining some other types of cycles shortens the blocks.

00:12:52,120 --> 00:13:04,610
Chaining enumerators, and parameters so it can be seen.

00:13:04,610 --> 00:13:05,649
And so on and so on.

00:13:05,649 --> 00:13:12,950
And this principle of chaining of making the flow of values visible is one of the most

00:13:12,950 --> 00:13:19,730
important things in Ruby, which also manifests itself in implicit return in that everything

00:13:19,730 --> 00:13:23,920
in Ruby is an expression returned in value and so on and so on.

00:13:23,920 --> 00:13:27,209
Next, obviously, everything is an object.

00:13:27,209 --> 00:13:28,209
We're cool.

00:13:28,209 --> 00:13:29,209
Everything is an object.

00:13:29,209 --> 00:13:32,680
But what do we mean when we say everything in Ruby is an object?

00:13:32,680 --> 00:13:41,770
We mean that wherever you are, you are almost every statement is just semantic code.

00:13:41,770 --> 00:13:47,450
Like when you are saying private something in class, it's not like the special reserved

00:13:47,450 --> 00:13:50,230
word that has some special syntax or special meaning.

00:13:50,230 --> 00:13:53,209
It just models private.

00:13:53,209 --> 00:14:00,760
And everywhere where you go, you have just methods or something that you can repeat with

00:14:00,760 --> 00:14:12,459
methods like define in class, it's easy to define class just by calling methods on object.

00:14:12,459 --> 00:14:20,209
So, this makes our environment in which we work very discoverable and very homogenous.

00:14:20,209 --> 00:14:26,810
I remember like 15 years or 16 years ago when I first started to work with Ruby, I was super

00:14:26,810 --> 00:14:34,810
fascinated just with one small fact that when you want to flow a number, you expect there

00:14:34,810 --> 00:14:38,290
would be a number dot floor, and it works.

00:14:38,290 --> 00:14:48,310
Other languages make different choices like Python, which I don't hate, which makes some

00:14:48,310 --> 00:14:52,990
statements like just functions in the language.

00:14:52,990 --> 00:15:01,649
And it shapes it differently and it has, like, decorators, which are separate construct,

00:15:01,649 --> 00:15:07,069
and provide some value that Ruby can achieve with our current understanding.

00:15:07,069 --> 00:15:09,590
But we can achieve different values.

00:15:09,590 --> 00:15:17,400
So everything is an object, and we can say that it's more clear to say that everything

00:15:17,400 --> 00:15:19,190
is an object or a method call.

00:15:19,190 --> 00:15:23,570
Unless it is dev and class and if.

00:15:23,570 --> 00:15:35,139
And it is an important choice.

00:15:35,139 --> 00:15:39,960
It's raised problems for people.

00:15:39,960 --> 00:15:42,440
It's too unlike any other language.

00:15:42,440 --> 00:15:48,500
Ruby serves it to you like it's just a regular language.

00:15:48,500 --> 00:15:51,829
And then there you go.

00:15:51,829 --> 00:15:56,330
And last but not least, other things that frequently are overlooked about Ruby that

00:15:56,330 --> 00:15:59,589
it has nice syntax.

00:15:59,589 --> 00:16:04,250
And it's some would say we don't need it.

00:16:04,250 --> 00:16:06,220
We just can make it shorter.

00:16:06,220 --> 00:16:09,290
We don't need such much of analysis.

00:16:09,290 --> 00:16:11,250
We probably don't need so many.

00:16:11,250 --> 00:16:22,120
But the rest, the important thing about the rest is that all of those small things in

00:16:22,120 --> 00:16:26,910
Ruby that we take for granted, why they are here?

00:16:26,910 --> 00:16:39,050
Because Ruby goes a long way so you can say something in Ruby in exactly amount of ideas

00:16:39,050 --> 00:16:40,051
in your head.

00:16:40,051 --> 00:16:47,779
You don't need to unsay some syntax to say okay, it's just like some defining a test.

00:16:47,779 --> 00:16:55,069
So, you just ignore this function dev blah blah blah blah blah.

00:16:55,069 --> 00:17:01,450
It's our internal DSL, but our I don't know which language.

00:17:01,450 --> 00:17:02,450
Okay.

00:17:02,450 --> 00:17:03,450
Whatever.

00:17:03,450 --> 00:17:10,199
But our language doesn't allow, like, remove this six pairs of brackets and so on.

00:17:10,199 --> 00:17:14,860
So, you just need to unsee it and then you can kind of see the structure.

00:17:14,860 --> 00:17:17,420
In Ruby, you see it immediately.

00:17:17,420 --> 00:17:24,439
So generally speaking, Ruby is a mainstream language with functional flow which is based

00:17:24,439 --> 00:17:27,169
on powerful objects and values expressiveness.

00:17:27,169 --> 00:17:34,650
And returning to languages as a material of thought, it makes us think this way, at least

00:17:34,650 --> 00:17:41,870
it makes me think this way to define a fluent flow of clearly defined transformations on

00:17:41,870 --> 00:17:44,809
self sufficient objects.

00:17:44,809 --> 00:17:56,360
Is it just me, or it feels like in Rails codebase, most of those principles are not so visible?

00:17:56,360 --> 00:17:57,360
Okay.

00:17:57,360 --> 00:18:04,760
So if the language is so readable, why should it change?

00:18:04,760 --> 00:18:08,100
There are a bunch of important reasons.

00:18:08,100 --> 00:18:09,100
Some of them secondary.

00:18:09,100 --> 00:18:11,020
They are important never the less.

00:18:11,020 --> 00:18:18,360
That some things are like in the language the speed of the language is great, but some

00:18:18,360 --> 00:18:23,130
initial design choices are not so great or not responsive at the moment.

00:18:23,130 --> 00:18:33,270
Things like cryptic global variables, scripting languages for one off scripts and you just

00:18:33,270 --> 00:18:38,960
want it to be expressive like once in a lifetime of this script.

00:18:38,960 --> 00:18:45,870
But then you don't need it.

00:18:45,870 --> 00:18:53,289
Another historical reasons that probably nobody expected in an age of the rise of scripting

00:18:53,289 --> 00:19:03,200
languages that huge projects with thousands of people with thousands of human hours would

00:19:03,200 --> 00:19:05,580
be creating those languages.

00:19:05,580 --> 00:19:11,190
And all of modern scripting languages should change to encompass this fact.

00:19:11,190 --> 00:19:18,630
And other reasons are also important but secondary are external.

00:19:18,630 --> 00:19:25,220
Like the world requires that your language to be practical to have this this this and

00:19:25,220 --> 00:19:26,220
that.

00:19:26,220 --> 00:19:28,150
But that's not the point.

00:19:28,150 --> 00:19:39,031
The most important point that for Ruby to change, that it makes us to be very clear

00:19:39,031 --> 00:19:40,870
and very expressive.

00:19:40,870 --> 00:19:48,910
And when we started to be able to say some things very clear, very expressive, we started

00:19:48,910 --> 00:19:53,000
to be able to express more complicated things.

00:19:53,000 --> 00:19:55,610
And more complicated.

00:19:55,610 --> 00:20:04,240
And build larger system of interactive libraries and objects and projects and services.

00:20:04,240 --> 00:20:10,870
And we still want it to be as clear and as expressive as we used to be when we talked

00:20:10,870 --> 00:20:12,440
about simple matters.

00:20:12,440 --> 00:20:27,809
So, it's like we are inventing new words to talk about new materials for being able to

00:20:27,809 --> 00:20:29,600
say more.

00:20:29,600 --> 00:20:34,320
And why do we need new words?

00:20:34,320 --> 00:20:44,230
You know, we always can discuss anything with take this and put it there and it would be

00:20:44,230 --> 00:20:45,230
okay.

00:20:45,230 --> 00:20:54,880
But to discuss something effectively, to discuss something in nuances, we need the words for

00:20:54,880 --> 00:20:58,880
things that wasn't existing before, like I don't know.

00:20:58,880 --> 00:20:59,900
Computer, smartphone.

00:20:59,900 --> 00:21:01,230
You need a word for it.

00:21:01,230 --> 00:21:02,581
Not say this shape.

00:21:02,581 --> 00:21:05,110
You know this shape?

00:21:05,110 --> 00:21:15,240
We need more words like we need to tell of grief, of sorrow, of sadness.

00:21:15,240 --> 00:21:23,679
Not saying I am like that, but you can discuss matters with those words.

00:21:23,679 --> 00:21:31,450
And we need shortcut words for complicated matters like accessibility or eco system.

00:21:31,450 --> 00:21:42,010
Which you can describe in text, but when you have a new word which everybody has agreed

00:21:42,010 --> 00:21:51,350
about and it brings new idioms based on it and new phrases based on it, you can discuss

00:21:51,350 --> 00:21:52,850
more complicated matters.

00:21:52,850 --> 00:21:59,529
And important thing with this comparison with the natural language words that new words

00:21:59,529 --> 00:22:06,120
should be should integrate with older ones.

00:22:06,120 --> 00:22:16,030
You can't throw Chinese into this language and say here you go.

00:22:16,030 --> 00:22:23,590
You can't throw in something into Ruby.

00:22:23,590 --> 00:22:27,000
You need it to play nice with the rest of the language.

00:22:27,000 --> 00:22:31,450
So to summarize it, language is alive and a breathing thing.

00:22:31,450 --> 00:22:42,970
And its evolution is increasing its expressive power through natural evolution of the concepts

00:22:42,970 --> 00:22:46,320
that are already in existing in the language.

00:22:46,320 --> 00:22:54,279
So, now when you know that language should change, let's see how exactly the Ruby changes.

00:22:54,279 --> 00:23:03,720
We talked about that the most unique properties of Ruby is powerful objects, flow, and clear

00:23:03,720 --> 00:23:04,720
syntax.

00:23:04,720 --> 00:23:12,500
When we thinking about powerful objects, we can see in each version that objects became

00:23:12,500 --> 00:23:13,520
more and more powerful.

00:23:13,520 --> 00:23:22,730
We have some new ways to express some matters shorter and more atomically.

00:23:22,730 --> 00:23:27,200
We will not stop on it.

00:23:27,200 --> 00:23:40,450
Just know that probably if at some point in history, refinements would become a thing.

00:23:40,450 --> 00:23:43,490
Then probably our objects would become more powerful.

00:23:43,490 --> 00:23:51,780
But I don't know what makes to save refinements from their current state.

00:23:51,780 --> 00:24:04,120
But, more interesting, the things about that happen in Ruby that helps shape the flow,

00:24:04,120 --> 00:24:15,460
making it less like your grandma's BASIC, where variable=something, call method equals

00:24:15,460 --> 00:24:18,210
something.

00:24:18,210 --> 00:24:27,179
And more obvious flow of data, more obvious and explicit flow of values.

00:24:27,179 --> 00:24:28,770
Some examples.

00:24:28,770 --> 00:24:30,360
Then.

00:24:30,360 --> 00:24:40,840
It allows us to chain single object operations the same way we use it to chain operations

00:24:40,840 --> 00:24:42,429
on collections.

00:24:42,429 --> 00:24:47,149
Then is, okay, I am not objective.

00:24:47,149 --> 00:24:49,880
I invented the name if not the concept.

00:24:49,880 --> 00:24:59,760
But I believe it's one of the very cool but very underestimated things in versions of

00:24:59,760 --> 00:25:00,760
Ruby.

00:25:00,760 --> 00:25:09,970
Which we use in production like everywhere, and it shows good value for cleaning up the

00:25:09,970 --> 00:25:22,130
code and some interesting consequences like back end of values, so typically most of our

00:25:22,130 --> 00:25:35,299
methods are looking if there are some there, looking like one chain of input value is enumerable

00:25:35,299 --> 00:25:37,210
and so on to output value.

00:25:37,210 --> 00:25:44,700
So, it's just one statement, sometimes really long, but it's one statement clearly showing

00:25:44,700 --> 00:25:46,279
what goes where.

00:25:46,279 --> 00:25:57,350
And another cool thing that came is enumerator chain, which allows to make one enumerator

00:25:57,350 --> 00:26:02,850
of many enumerators even if they are lazy or slow.

00:26:02,850 --> 00:26:12,890
You in Ruby 2.7, method enumerator produce which already existed in some languages, which

00:26:12,890 --> 00:26:20,450
allows us to convert other cycles like while and endless loop and something into the same

00:26:20,450 --> 00:26:25,240
enumerators as Ruby converted for ages ago.

00:26:25,240 --> 00:26:31,559
It could be hard to grasp from the first moment, but it's very cool.

00:26:31,559 --> 00:26:43,799
Now when we use the new features to shape the flow, we want to feel the flow, making

00:26:43,799 --> 00:26:49,790
our blocks more atomic, more visible, more functional, and DRY.

00:26:49,790 --> 00:26:58,080
And there are several things in Ruby that happen to allow to make blocks more atomic

00:26:58,080 --> 00:27:07,649
and therefore more visible.

00:27:07,649 --> 00:27:22,520
Ruby 2.5, I believe pattern in all dominion, something responding to the case operator

00:27:22,520 --> 00:27:24,570
to all, to any.

00:27:24,570 --> 00:27:30,330
And new more powerful patterns came with endless and beginningless ranges.

00:27:30,330 --> 00:27:39,080
And in 2.6, we became able I don't think that the last feature of this slide is highly used

00:27:39,080 --> 00:27:47,940
in production currently, but theoretically, it also changes expressive power of the language

00:27:47,940 --> 00:27:55,720
with making more combinable things to be able to pass to the blocks.

00:27:55,720 --> 00:28:02,970
One counter example to atomic things in the flow.

00:28:02,970 --> 00:28:06,880
Number of parameters coming to Ruby 2.7.

00:28:06,880 --> 00:28:19,039
They are small syntax sugar, which doesn't change the expressive power of the block.

00:28:19,039 --> 00:28:20,850
It just saves some case talks.

00:28:20,850 --> 00:28:29,320
It doesn't have deep consequences that now our blocks became something more popular.

00:28:29,320 --> 00:28:35,630
And my beloved example, method references.

00:28:35,630 --> 00:28:37,840
Yeah.

00:28:37,840 --> 00:28:42,891
Spoiler: For those who saw the keynote.

00:28:42,891 --> 00:28:52,350
Method references, it is already even if not well known, but super useful feature even

00:28:52,350 --> 00:29:01,390
if in old forms, it was always possible in old Rubies that instead of making block and

00:29:01,390 --> 00:29:05,040
calling the method inside it, you just pass the method to the block.

00:29:05,040 --> 00:29:07,870
It's a bit long.

00:29:07,870 --> 00:29:15,820
But it's nice in the way that it helps design methods so they accept only what should come

00:29:15,820 --> 00:29:17,809
from flow and design objects.

00:29:17,809 --> 00:29:19,830
So, they have very focused method.

00:29:19,830 --> 00:29:21,630
So, we use it a lot.

00:29:21,630 --> 00:29:27,049
And it shows its usability.

00:29:27,049 --> 00:29:35,700
And in Ruby 2.7, almost came the feature which allowed to make nested references like atomic

00:29:35,700 --> 00:29:36,700
statement.

00:29:36,700 --> 00:29:39,480
It would have been so cool!

00:29:39,480 --> 00:29:51,840
And it would probably be accepted by the community if it will be used and seen as something cool.

00:29:51,840 --> 00:29:58,500
It would probably lead to some new approaches to curry and to partial application and generally

00:29:58,500 --> 00:30:05,789
shift Ruby towards more functional ways without totally changing the syntax or dropping Chinese

00:30:05,789 --> 00:30:10,110
hieroglyph into a syllabic language.

00:30:10,110 --> 00:30:17,600
But things happen, and that would be our last section.

00:30:17,600 --> 00:30:30,029
So, here I wanted to speak a bit about like polarizing reaction to language changes and

00:30:30,029 --> 00:30:36,429
how people not always happy with it and how I myself am not always happy with it.

00:30:36,429 --> 00:30:41,110
And where it leaves us and how to cope with it.

00:30:41,110 --> 00:30:48,410
This nice barn I met on the way from Atlanta to Nashville on Greyhound.

00:30:48,410 --> 00:30:59,159
I am not as pessimistic as this barn, but it seems appropriate for this section of the

00:30:59,159 --> 00:31:00,159
talk.

00:31:00,159 --> 00:31:01,809
So, yeah.

00:31:01,809 --> 00:31:13,070
Initially, this slide had some examples from Reddit users complaining of some features.

00:31:13,070 --> 00:31:22,429
But, unlikely for my mood, but likely for the talk's point, just two weeks before the

00:31:22,429 --> 00:31:29,550
conference, method reference operator was reverted.

00:31:29,550 --> 00:31:32,419
This explanation.

00:31:32,419 --> 00:31:38,360
I am still feeling like very confused about it.

00:31:38,360 --> 00:31:41,919
Asked my cat to illustrate how confused I feel.

00:31:41,919 --> 00:31:45,360
But I don't want to brag about it.

00:31:45,360 --> 00:31:59,730
I want to illustrate I wanted to illustrate the point that it's even if you are not really

00:31:59,730 --> 00:32:02,909
humble, like I am not really humble, I know.

00:32:02,909 --> 00:32:13,149
And sometimes I think, yeah I know that Ruby moves so I just guess the changes in said

00:32:13,149 --> 00:32:14,149
direction.

00:32:14,149 --> 00:32:16,470
And then core team thinks no.

00:32:16,470 --> 00:32:17,470
No.

00:32:17,470 --> 00:32:19,309
We don't do it.

00:32:19,309 --> 00:32:28,230
And this different reactions to changes of features.

00:32:28,230 --> 00:32:33,380
They fall into a lot of very different forms.

00:32:33,380 --> 00:32:41,310
And a lot of times, their formulations are not really showing what people really think,

00:32:41,310 --> 00:32:47,480
because sometimes they think that oh, I haven't thought about this feature this way.

00:32:47,480 --> 00:32:51,590
And if I haven't thought of it this way, then probably it's a bad feature.

00:32:51,590 --> 00:32:53,299
I will not even try it.

00:32:53,299 --> 00:33:01,940
Or they think I like this particular syntax, and this new change makes that particular

00:33:01,940 --> 00:33:10,220
syntax, I have an old habit and I want my habits to be there and I will be against it.

00:33:10,220 --> 00:33:16,210
When we are talking about, like oh, people started to leave.

00:33:16,210 --> 00:33:17,210
Okay.

00:33:17,210 --> 00:33:23,769
When we are talking about language performance and con currency, there are disturbances,

00:33:23,769 --> 00:33:25,649
generally people say okay.

00:33:25,649 --> 00:33:26,649
Good.

00:33:26,649 --> 00:33:27,649
We needed it.

00:33:27,649 --> 00:33:34,299
But with syntax and semantic changes, it's a heated topic.

00:33:34,299 --> 00:33:40,630
You can't really fight feelings like feeling it's unreadable or it's ugly and I will not

00:33:40,630 --> 00:33:44,260
even try to get used to it.

00:33:44,260 --> 00:33:53,380
But probably what we can do is try to walk in each others' shoes, try new features, thinking

00:33:53,380 --> 00:34:01,970
about them in good ways and trying to understand where it can lead us if we agree to them.

00:34:01,970 --> 00:34:12,440
Another important thing about Ruby evolution is there is no, like, one right way to write

00:34:12,440 --> 00:34:13,440
Ruby.

00:34:13,440 --> 00:34:20,570
The different groups coming from different grounds will say that this is good, this is

00:34:20,570 --> 00:34:21,570
bad.

00:34:21,570 --> 00:34:22,570
We write this way.

00:34:22,570 --> 00:34:23,570
No.

00:34:23,570 --> 00:34:24,600
We write that way.

00:34:24,600 --> 00:34:34,020
Rubocop complains about this and anybody ever tried to run Rubocop against Ruby stdlib?

00:34:34,020 --> 00:34:36,140
It's an interesting experience.

00:34:36,140 --> 00:34:44,710
So, that is also the things that makes evolution harder, because there is we are very, very

00:34:44,710 --> 00:34:49,810
far from consensus that Ruby is this thing, so let's move it there.

00:34:49,810 --> 00:34:58,010
Because if for different people, Ruby is ten different things and they want to move it

00:34:58,010 --> 00:34:59,650
in ten different directions.

00:34:59,650 --> 00:35:00,910
What can you do?

00:35:00,910 --> 00:35:09,900
And here I'd like to talk a bit about the elephant in the room, about the fact that,

00:35:09,900 --> 00:35:18,190
okay, we are in RubyConf, but we know that the vast majority of Rubyists are Railsists.

00:35:18,190 --> 00:35:21,260
That's not the point where I am saying, well, Rails!

00:35:21,260 --> 00:35:33,370
It's the point where I'm saying Ruby initially, at least how I understand it, it came as the

00:35:33,370 --> 00:35:40,260
language for hacking in a good sense of the word.

00:35:40,260 --> 00:35:44,390
For quick prototyping, for playing, for teaching children.

00:35:44,390 --> 00:35:53,270
And to be completely honest, being in the domain of large Enterprise applications that

00:35:53,270 --> 00:35:59,540
should be super robust and super scalable is not 100% natural for Ruby.

00:35:59,540 --> 00:36:13,980
And what is more important that in domains where its like business values are very important,

00:36:13,980 --> 00:36:22,860
there are immediate cognition.

00:36:22,860 --> 00:36:31,520
Like highly competitive start ups, they will not use new Ruby features because we can't

00:36:31,520 --> 00:36:37,350
hire developers from other languages because they would be freaked out.

00:36:37,350 --> 00:36:49,120
But what I believe is that with Ruby, even for large Enterprise applications, for the

00:36:49,120 --> 00:36:53,310
business world, we can be incredibly effective.

00:36:53,310 --> 00:36:56,070
We can be absolutely awesome.

00:36:56,070 --> 00:37:06,920
Not by just throwing some optics, but by always trying to be super clear about our intentions.

00:37:06,920 --> 00:37:12,110
Super expressive about what exactly we want to say.

00:37:12,110 --> 00:37:22,640
Super vigilant about the codes that expresses exactly the meanings we wanted it to express.

00:37:22,640 --> 00:37:28,230
But, also we code well, one could dream, right?

00:37:28,230 --> 00:37:39,720
We could dream about where Ruby could or maybe still probably can thrive in different areas.

00:37:39,720 --> 00:37:48,340
And where different Ruby qualities would be valued, where different choices would be made,

00:37:48,340 --> 00:37:57,290
where we will eventually have, like, more reach and more appreciated by the external

00:37:57,290 --> 00:37:58,560
world language.

00:37:58,560 --> 00:38:07,360
And as I started with a quote of a famous novel, I want to end with a quote from a famous

00:38:07,360 --> 00:38:08,370
novel.

00:38:08,370 --> 00:38:23,740
It's from "The Unbearable Lightness of Being," how light makes the choice why it is light.

00:38:23,740 --> 00:38:28,750
You will never check whether it would be the right choice, because you will never live

00:38:28,750 --> 00:38:32,580
through this moment again.

00:38:32,580 --> 00:38:44,930
So, maybe to be grumpy a bit, maybe our window of opportunity is already closed and we will

00:38:44,930 --> 00:38:50,580
always have our Ruby as a nice, more expressive modern day PHP.

00:38:50,580 --> 00:38:57,910
Not to say bad words about PHP, but it's just too small a domain for such an awesome language.

00:38:57,910 --> 00:39:02,400
But maybe I still hope that we can do more.

00:39:02,400 --> 00:39:09,240
And I still really love Ruby, and I really hope that you do, too.

00:39:09,240 --> 00:39:16,290
So that's it.

00:39:16,290 --> 00:39:22,930

YouTube URL: https://www.youtube.com/watch?v=iMBqqjkbvl4


