Title: RubyConf 2019 -  Lightning Talks
Publication date: 2019-11-30
Playlist: RubyConf 2019
Description: 
	Lightning Talks

00:00:12 - Sean Marcia
00:00:59 - Ivan Nerytchenko
00:02:20 - Daniel Colson
00:02:55 - Wendy CalderÃ³n
00:06:22 - Chyrelle Lewis
00:11:26 - LaNice Powell
00:12:59 - Jonan Scheffler
00:17:56 - Rob Faldo
00:22:41 - Carolyn Cole
00:26:39 - Daniel Azuma
00:31:34 - Justin Jones
00:35:55 - Braulio Martinez
00:41:00 - Bonzalo Rodriguez
00:45:56 - Rohaa Mendon
00:50:41 - Emily Giurleo
00:56:10 - Chris O'Sullivan
01:00:38 - Ian Norris
01:04:20 - Noah Gibbs
01:10:04 - Dave Aronson
01:14:50 - DeeDee Lavinder


#confreaks #rubyconf2019 #rubyconf
Captions: 
	00:00:13,370 --> 00:00:23,619
>> Hello. So, I'm going to ask a couple questions. Who likes Ruby? Awesome. Who likes making

00:00:23,619 --> 00:00:29,310
the world better? Perfect. So, I want to invite everyone to come out to Ruby by the bay. It's

00:00:29,310 --> 00:00:34,850
Ruby for good on the west coast where we get together and we build software for places

00:00:34,850 --> 00:00:40,250
that really need our skills but would never be able to afford us, animal shelters, women

00:00:40,250 --> 00:00:46,460
shelters, food banks. Follow us on Twitter for more information and we hope to see you

00:00:46,460 --> 00:00:49,579
there. [ Applause ]

00:00:49,579 --> 00:00:57,482
>> Thank you for your judicious use of time. Anyone else who would like to give a come

00:00:57,482 --> 00:00:58,482
on up. You're not on this list... you can't sorry. That's against the no. No. That's not

00:00:58,482 --> 00:00:59,482
how it works. You got to be on the list and get bumped up. Not add yourself to the list.

00:00:59,482 --> 00:01:00,482
Feel free to talk to people outside the room if you would like to give your own announcements.

00:01:00,482 --> 00:01:01,482
Okay. Come on up. You would like to give a one minute. Where are you on this list? You

00:01:01,482 --> 00:01:02,482
pointed literally to two separate ones. Okay. Maybe you're two people. I'm not gonna judge.

00:01:02,482 --> 00:01:03,482
No you have notes on your computer? >> I have a presentation, no? That's not how

00:01:03,482 --> 00:01:04,482
it works? >> This is just one minute. You can't give

00:01:04,482 --> 00:01:10,460
any slides. You're already on the clock so you got about 45 seconds left. And you're

00:01:10,460 --> 00:01:15,190
here. >> All right. That's not a problem. So, my

00:01:15,190 --> 00:01:21,810
first slide on the presentation looks like >> You only have 30 seconds left.

00:01:21,810 --> 00:01:30,780
>> Make, make, make again. And the idea is simple that we use tools like rake like NPM,

00:01:30,780 --> 00:01:41,910
and they are not natural. When we try to use them for everything. And the things that if

00:01:41,910 --> 00:01:49,720
we use make for that, then it makes things much more simple. Because we have to use multiple

00:01:49,720 --> 00:01:59,060
technologies and with make, if you put everything there, it makes everything much more simpler.

00:01:59,060 --> 00:02:08,890
And it works like a glue. >> Boop boop boop boop boop boo...

00:02:08,890 --> 00:02:09,940
[ Applause ]

00:02:09,940 --> 00:02:17,819
>> Give it a try! >> I'm sorry. That is partially my fault.

00:02:17,819 --> 00:02:18,819
Anybody else would like to move up here? No slides. Come on up. 23. We should have number

00:02:18,819 --> 00:02:19,819
1 get ready. Number 1? Wendy? I can't be sure how to pronounce it. Come on up here. Do we

00:02:19,819 --> 00:02:21,879
have our AV tech people helping get set up here today? Thank you, Eric. Go ahead.

00:02:21,879 --> 00:02:25,950
>> So, making your company more inclusive takes some effort. It's something we've been

00:02:25,950 --> 00:02:32,650
thinking about at thought plot, and I just wanted to share, we have on GitHub, thought

00:02:32,650 --> 00:02:40,040
bot/guides, a file called working together. It includes a checklist for pairing together

00:02:40,040 --> 00:02:46,459
and it also includes a printable inclusive meeting guidelines. So, I encourage you to

00:02:46,459 --> 00:02:49,590
print that out and put it in every room in your office so you can have more inclusive

00:02:49,590 --> 00:02:50,590
meetings. That's all. [ Applause ]

00:02:50,590 --> 00:02:51,590
>> Excellent. Anyone else? This is way more than we usually have, just so we're clear.

00:02:51,590 --> 00:02:52,769
Anyone else want to bump on up? Okay. All right. Cool. So, we have our first speaker

00:02:52,769 --> 00:02:54,159
getting going, and I would like to have our number two come up over here. Chyrelle. Come

00:02:54,159 --> 00:02:55,709
on up. You can come up right here. And we'll get you all hooked up. And then whenever we

00:02:55,709 --> 00:02:57,240
have her yep. Go for it. >> Okay. Oops. So, I'm not being able to see

00:02:57,240 --> 00:02:58,240
my slides, but >> They're here.

00:02:58,240 --> 00:02:59,240
>> Sorry. Wendy? Oh, I see. >> Thank you.

00:02:59,240 --> 00:03:00,240
>> What's the hot key for mirroring again? >> Cmd f1.

00:03:00,240 --> 00:03:01,240
>> No, it's not.

00:03:01,240 --> 00:03:03,540
>> Hi, everyone. Sorry about that. My name is Wendy. And I am a full stack software engineer

00:03:03,540 --> 00:03:10,879
in telecommunications. I recently graduated from a boot camp, and I am here to quickly

00:03:10,879 --> 00:03:17,340
talk about SQL. I have two questions for you. How many by a show of hands, how many of you

00:03:17,340 --> 00:03:25,739
are Rails developers? Awesome. And how many of you use SQL regularly? Okay.

00:03:25,739 --> 00:03:33,889
So, in my personal experience, I feel like I was spoiled before. The reason I say this

00:03:33,889 --> 00:03:40,560
is because I thought that I was going to be golden just by knowing how to read a SQL query.

00:03:40,560 --> 00:03:46,450
And I found out that I was wrong the hard way. Long story short, I lost an opportunity

00:03:46,450 --> 00:03:52,370
that I was really excited about because I couldn't put together a SQL query. I failed

00:03:52,370 --> 00:03:59,650
the assessment. And after I lost that opportunity, I was really intrigued and interested in knowing

00:03:59,650 --> 00:04:03,000
why SQL was part of the assessment in the first place.

00:04:03,000 --> 00:04:10,779
So, this is why I started researching and I found out that not only SQL is the most

00:04:10,779 --> 00:04:19,269
popular querying language out there, it is also very a very profitable skill to have.

00:04:19,269 --> 00:04:27,540
You can easily have a high paying career just by knowing SQL. Especially if you are looking

00:04:27,540 --> 00:04:32,180
to be a back end engineer, this is a skill that you want to have.

00:04:32,180 --> 00:04:38,620
So, also, SQL has been so this is not cooperating. Next slide...

00:04:38,620 --> 00:04:59,080
I can't see the other slide. I'm sorry. I borrowed a computer. I'm really sorry. This

00:04:59,080 --> 00:05:11,289
is the other one I wanted to show. So, what I wanted to say is that SQL has been in the

00:05:11,289 --> 00:05:17,360
stackoverflow's survey that they hold every year, it has been in the top five skills that

00:05:17,360 --> 00:05:25,120
the developers use for ever since they started the survey.

00:05:25,120 --> 00:05:31,970
And I want to show you the break down, if the computer helps us... sorry!

00:05:31,970 --> 00:05:42,020
Okay. Thank you. So, this is the latest one. As you can see, SQL is in the top three skills

00:05:42,020 --> 00:05:46,629
that developers use. And as I mentioned before, it has been like that ever since this break

00:05:46,629 --> 00:05:53,580
down or this survey started I want to say like five years ago. Also, if you want to

00:05:53,580 --> 00:05:59,270
learn more about why SQL is so important to developers, I invite you to read my blog post

00:05:59,270 --> 00:06:05,581
on it. There is information why learning SQL is so relevant to developers. And also, if

00:06:05,581 --> 00:06:11,729
you're looking to hire a junior developer that is eager to put into practice this skill

00:06:11,729 --> 00:06:15,000
and many other skills, look no more. You've found her! Here's my information. Let's connect!

00:06:15,000 --> 00:06:16,000
Thank you. [ Applause ]

00:06:16,000 --> 00:06:17,000
>> I will take if anybody has requests for her to work, I'll take them and I can funnel

00:06:17,000 --> 00:06:18,000
them to her if need be. No problem. All right. Next on deck is LA Nice. I presume it's like

00:06:18,000 --> 00:06:22,000
LA Gear, but probably nicer. Come on up, you can get set up right over here. And go for

00:06:22,000 --> 00:06:23,550
it. Yep! There we go. You're good. >> Is there a microphone?

00:06:23,550 --> 00:06:27,610
>> Oh yeah. Sorry. That's my mistake. >> Hi. My name is Chyrelle Lewis, and my presentation

00:06:27,610 --> 00:06:36,819
is on how career karma is changing lives. So, what is career karma? So the definition

00:06:36,819 --> 00:06:45,500
of oop. The textbook definition of career karma is it's the community of mentors, peers,

00:06:45,500 --> 00:06:51,520
and inspiring developers that provide like a direction and a blueprint to try to get

00:06:51,520 --> 00:06:59,569
people to get into tech, you know. Just more people that's underrepresented or just anyone.

00:06:59,569 --> 00:07:05,370
Make it easier for anyone to get into tech. So that's what career karma is for. Let's

00:07:05,370 --> 00:07:13,069
see. Okay. Really, I'm going to give you a little bit of my story so you can get in context

00:07:13,069 --> 00:07:18,320
of how it helped me. Pretty much ever since I was little, since I was a kid, I wanted

00:07:18,320 --> 00:07:26,750
to be a programmer. Life circumstances happened, and I got pregnant at 16. So... like I did

00:07:26,750 --> 00:07:31,220
the responsible thing to get a job. And so, like, the job turned into a career,

00:07:31,220 --> 00:07:38,099
and I was into leadership and I was successful, but something was missing. And I didn't I

00:07:38,099 --> 00:07:43,759
wasn't satisfied. I've always dealt with logic and systems, and it just didn't make sense

00:07:43,759 --> 00:07:48,780
that I was in a career that I wasn't using my abilities to my full potential.

00:07:48,780 --> 00:07:54,009
So I was like okay, well I left that job and I wanted to be a Realtor and everything like

00:07:54,009 --> 00:07:58,379
that. And then what happened was a couple years ago, I got a divorce and I was like

00:07:58,379 --> 00:08:03,189
what does Chyrelle want to do? She wanted to be a computer programmer. Remember? She

00:08:03,189 --> 00:08:09,289
was happy. She had those goals and dreams and that's what I always wanted to be. So,

00:08:09,289 --> 00:08:18,229
I was thinking about going back to traditional college and career karma told me you can get

00:08:18,229 --> 00:08:22,820
into tech and all you have to you don't have to have any money up front. There is little

00:08:22,820 --> 00:08:29,139
risk. And also it was you had a direction, a blueprint, and you had a network of people

00:08:29,139 --> 00:08:33,200
that was around you to help you that were on the same path that you were. Some were

00:08:33,200 --> 00:08:38,039
on the same path that you were. So what I did was I was like, okay, well,

00:08:38,039 --> 00:08:43,161
let me go ahead and do that. So, I took their 21 day challenge and on the first day, I was

00:08:43,161 --> 00:08:49,590
like oh my gosh, what did I get myself into, right? What are they talking about? I thought

00:08:49,590 --> 00:08:56,779
I was smarter than this. I couldn't understand this. I was in a draft group with a lot of

00:08:56,779 --> 00:09:00,470
other aspiring developers that were on the same path and they were like do you want to

00:09:00,470 --> 00:09:05,899
study? We're going to create this study group. And at first I was like no, I'll just do it

00:09:05,899 --> 00:09:11,190
on my own and then I was like let me get into the study group. I got into the study group

00:09:11,190 --> 00:09:17,230
and it was the best thing that ever happened to me. For the next 60 days, I studied overnights

00:09:17,230 --> 00:09:23,230
with these people. And everybody liked the way me and this other guy, Chris, studied.

00:09:23,230 --> 00:09:28,649
Because like we were consistent and we made it fun. So, we ended up making a study group

00:09:28,649 --> 00:09:36,379
and it ended up growing to over 275 people. That was amazing.

00:09:36,379 --> 00:09:40,240
[ Applause ] That just showed me right there, we also in

00:09:40,240 --> 00:09:49,530
career karma, we would have AMAs with top developers at like Twitter. And they were

00:09:49,530 --> 00:09:54,130
just showing us, like, how they broke into tech and they were coming from untraditional

00:09:54,130 --> 00:09:59,620
backgrounds. So, that gave us inspiration and everything like that. So, career karma

00:09:59,620 --> 00:10:06,940
is essentially a network of people that are there to help you and to provide you guidance

00:10:06,940 --> 00:10:14,910
and to it's just a community. It's actually like a family. I know a lot of people that

00:10:14,910 --> 00:10:20,550
are going through the same journey. Now I know a lot of developers that are, like, doing

00:10:20,550 --> 00:10:28,170
big things in tech. And it's just a network of family to that you can rely on that gives

00:10:28,170 --> 00:10:35,170
you hope that you can possibly do and achieve your dreams. So, I go to a school that they

00:10:35,170 --> 00:10:42,130
helped me get into. And I graduate in January now. So, I'm on my way. It was a life changer

00:10:42,130 --> 00:10:48,750
for me, because I took it seriously. And that's what they're doing. It is some nay sayers

00:10:48,750 --> 00:10:55,459
out there saying they do direct you to boot camp, but a boot camp is going to change my

00:10:55,459 --> 00:11:03,889
life. It's changing the culture of the development community. It's making it so everyone is represented.

00:11:03,889 --> 00:11:11,240
So, I'm excited for it. And now I can do what I actually wanted to do, like, program. I'm

00:11:11,240 --> 00:11:16,230
going to be that happy programmer that I always dreamed to be. And I'm excited because you

00:11:16,230 --> 00:11:21,990
get to learn I get to the possibilities are endless.

00:11:21,990 --> 00:11:23,010
[ Applause ]

00:11:23,010 --> 00:11:32,019
>> Hi, everybody. My name is Linese Powell. I was going to tell the career karma story

00:11:32,019 --> 00:11:39,160
but Chyrelle beat me to it. We are both part of the same organization and it is true about

00:11:39,160 --> 00:11:47,990
the impact. I used to be a teacher in New York City, teaching junior high school mathematics,

00:11:47,990 --> 00:11:54,839
and one of the things that I definitely found interesting as teaching algebra and prealgebra

00:11:54,839 --> 00:12:02,889
is the correlation between logic and coding and the lack of it in the curriculum now within

00:12:02,889 --> 00:12:08,230
the New York City mathematical education. I know when I was in high school, we had to

00:12:08,230 --> 00:12:12,649
learn about Booleans and true and false statements and things of that sort. And it kind of came

00:12:12,649 --> 00:12:19,740
back full circle when I started coding. I was like if this is such the foundations of

00:12:19,740 --> 00:12:24,579
learning within the back end of the language, why aren't we teaching it to our students

00:12:24,579 --> 00:12:30,579
any more since it is the foundation of this large community that we have now. And so some

00:12:30,579 --> 00:12:35,589
of the things to make you think, I would say, is think about the youth and your foundation

00:12:35,589 --> 00:12:40,740
and how it is so imperative also for curriculum and how they need to be able to have those

00:12:40,740 --> 00:12:45,190
foundational values so that when they do try to attempt to come in and maybe they can't

00:12:45,190 --> 00:12:49,100
make it or maybe they feel discouraged, that maybe it's also because they weren't given

00:12:49,100 --> 00:12:54,660
the tools to make them succeed. That's some of the things that I thought about and something

00:12:54,660 --> 00:12:58,740
for you to think about, too. So, you have a great day.

00:12:58,740 --> 00:12:59,740
[ Applause ]

00:12:59,740 --> 00:13:00,760
>> Uh, okay. Am I on? Boop boop boop. There we go. Is this timer going to reset?

00:13:00,760 --> 00:13:01,760
>> Come on. Relax. >> Okay.

00:13:01,760 --> 00:13:02,760
>> This is the timer. Just a head's up. Hopefully you have noticed and I forgot to remind everybody

00:13:02,760 --> 00:13:03,760
that there is a timer under the monitor up here. I don't even have to call people's names

00:13:03,760 --> 00:13:05,579
any more. They're just walking up. I literally had one job and it's being taken away from

00:13:05,579 --> 00:13:06,990
me at this point. I guess do whatever you want to do.

00:13:06,990 --> 00:13:07,990
[ Laughter ] That was your cue.

00:13:07,990 --> 00:13:10,899
>> My name is Jonan. I go by the Jonan show on the internet because I am kind of a talk

00:13:10,899 --> 00:13:17,110
show. I want to tell you about my American dream and I want to tell you how I bought

00:13:17,110 --> 00:13:22,130
my first home. 13 years ago my wife and I found out we were going to have our first

00:13:22,130 --> 00:13:28,690
child. I was a poker dealer and a concierge and I did training for the Hilton and I ran

00:13:28,690 --> 00:13:37,860
my own small business. My wife worked at block buster, and we did not have health insurance.

00:13:37,860 --> 00:13:44,329
I got a job at a corporation as a car salesman. My wife quit her job a week before our daughter

00:13:44,329 --> 00:13:51,600
was born. That feels like swimming up a water fall. I am a very good swimmer.

00:13:51,600 --> 00:13:56,829
Fast forward a little bit. My daughter was here. I worked that job for a long time and

00:13:56,829 --> 00:14:01,260
eventually I quit all of those jobs over a single weekend, and I moved to a casino. They

00:14:01,260 --> 00:14:06,980
only needed me 50 or 60 hours a week, which was lovely. And I started another small business

00:14:06,980 --> 00:14:14,079
on the side. So, I'm working there when I find out that I'm gonna have a son and it's

00:14:14,079 --> 00:14:17,819
lovely. I love being a dad. My third child is in the back of the room with my wife right

00:14:17,819 --> 00:14:24,100
now. During that process, three weeks before my son was born, I lost that job and health

00:14:24,100 --> 00:14:27,470
insurance. And because I am a swimmer and this is what swimmers do, I got on Craigs

00:14:27,470 --> 00:14:33,580
list. I found ads that said Ruby on Rails engineer. I said I'm going to be one and she

00:14:33,580 --> 00:14:41,990
said what's that and I said I have no idea but they make a lot of movie. Con freaks is

00:14:41,990 --> 00:14:47,709
here, and Kobe is a giant in the Ruby community. Thank you Kobe and thank you con freaks for

00:14:47,709 --> 00:14:55,319
being there. Because of that relationship, I met giants in the community at a time that

00:14:55,319 --> 00:15:01,490
was vitally important for me to do that. I got into a boot camp, one that doesn't exist

00:15:01,490 --> 00:15:05,259
that paid me to learn to code, which is a thing that I needed at the time. I would not

00:15:05,259 --> 00:15:11,350
be on the stage unless I were paid to learn to code. It was called hungry academy. I met

00:15:11,350 --> 00:15:20,500
Sandi Metz, and she gave us an advanced copy of her book. I went to Sandi to tell her what

00:15:20,500 --> 00:15:24,110
a great book she said. And I said I think you would do well on the conference speaking

00:15:24,110 --> 00:15:34,910
circuit and Sandi said to me, I'm just not sure that I would. I told you so, Sandi Metz.

00:15:34,910 --> 00:15:39,440
I'm on this stage because I am now on the board of a foundation called Ruby together.

00:15:39,440 --> 00:15:45,660
When it was first being founded it was involved in a bit of drama. And many of you don't know

00:15:45,660 --> 00:15:50,660
anything about that, and that's great. We as a community, we are so over drama, I hope.

00:15:50,660 --> 00:15:57,480
There used to be a website called Ruby drama.com that is not online any more. We as a community,

00:15:57,480 --> 00:16:02,500
we're all working together towards a common goal, I hope. I joined the board in the midst

00:16:02,500 --> 00:16:08,399
of that water fall of dookie, because I knew people on both sides of that argument, and

00:16:08,399 --> 00:16:13,790
that argument doesn't apply any more. Because the board is there signing the checks. We

00:16:13,790 --> 00:16:18,709
hold the pursestrings to the organization. Last week we had to decide which of the three

00:16:18,709 --> 00:16:24,729
projects that was presented to us was going to get funded. We chose one.

00:16:24,729 --> 00:16:29,810
And we had to make that decision because we lacked the extra $15,000 that we needed to

00:16:29,810 --> 00:16:33,980
fund all three of those projects. We fund projects like Ruby Me where we are paying

00:16:33,980 --> 00:16:40,730
developers like I got paid. We're paying underrepresented folks to learn to program. $75 an hour to

00:16:40,730 --> 00:16:47,950
pair up with experienced mentors in the open source community who are helping them learn.

00:16:47,950 --> 00:16:52,139
These are good programs. We are working to change the world. We're working for a future

00:16:52,139 --> 00:16:58,230
where Ruby hockey sticks like it did. You know who is hockey sticking? Python. The Python

00:16:58,230 --> 00:17:02,660
software foundation receives a million dollars a year from Google alone, which is more than

00:17:02,660 --> 00:17:10,709
all of the money that goes into Ruby. I need your help. When I go walking up and down hallways

00:17:10,709 --> 00:17:17,010
and I give the sponsors this pitch, they say something something PR Ruby drama. We're done

00:17:17,010 --> 00:17:22,860
with that. We don't do drama any more. We lift each other up and we build Ruby as a

00:17:22,860 --> 00:17:28,600
language and we build a community around Ruby as a language so that 20 years from now, Ruby's

00:17:28,600 --> 00:17:33,480
gonna be fine. I'm not suggesting that Ruby is not growing. Obviously that is not the

00:17:33,480 --> 00:17:37,510
case. I'm suggesting other languages are growing faster and we need to work real hard to be

00:17:37,510 --> 00:17:42,740
sure that we accelerate our growth curve. I got into this industry standing on the shoulders

00:17:42,740 --> 00:17:46,991
of giants and now I'm in a position to help the next generation of developers. I want

00:17:46,991 --> 00:17:52,039
to do it for 100 years. I'm not a boomer and I'm not about to burn this planet down on

00:17:52,039 --> 00:17:53,360
my way out. >> CAPTIONER: Whoa!

00:17:53,360 --> 00:18:00,230
>> I feel a little bit like I need a branded towel to throw to him at this point. Okay.

00:18:00,230 --> 00:18:01,230
Next on deck is Carl Oline. Like I said. I don't know why they give me this job every

00:18:01,230 --> 00:18:02,230
single year. Please go ahead. Person with no name who I did not announce who just walked

00:18:02,230 --> 00:18:03,230
up here and said they knew what they were doing. Let's find out if he introduces himself

00:18:03,230 --> 00:18:04,230
so I can find out if he's actually number five.

00:18:04,230 --> 00:18:05,230
>> I am. I'm Rob. Awesome. So, I am here to talk to you about filling a gap in the online

00:18:05,230 --> 00:18:14,390
tutorial market. I am a junior engineer at simply business. I'm based in the London office.

00:18:14,390 --> 00:18:20,970
We have an office in Boston and remotes. They sent me and colleagues across the Atlantic

00:18:20,970 --> 00:18:27,840
to be here with you this week, which is awesome. Something you need to know about me is I believe

00:18:27,840 --> 00:18:32,790
that almost anyone can do almost anything. And I think that the people who are successful

00:18:32,790 --> 00:18:40,840
at something and have developed either a conscious or often unconscious habit they have formed

00:18:40,840 --> 00:18:47,270
over many years or trial and error or learning from other people. So, that's something about

00:18:47,270 --> 00:18:52,430
me. So how did this all come about? I was has

00:18:52,430 --> 00:18:58,690
anyone seen the tutorial videos where half way through, the person will make a mistake

00:18:58,690 --> 00:19:02,591
and they'll do something, they'll press run and expect something to happen and you will

00:19:02,591 --> 00:19:07,860
hear the surprise in their voice ask be like oh God, I wasn't expecting that. They will

00:19:07,860 --> 00:19:13,030
pause it and they will say I will stop here and I will come back when I solve it. And

00:19:13,030 --> 00:19:18,409
a part of me really wants to see how did you do that, as a junior software engineer, I

00:19:18,409 --> 00:19:23,440
would love the opportunity to see somebody who is experienced go through the process

00:19:23,440 --> 00:19:27,000
and how did they solve the problem? How did they work out what was wrong and how did they

00:19:27,000 --> 00:19:35,409
get it to do what they need it to do. So here is my idea. I believe that experienced

00:19:35,409 --> 00:19:40,919
engineers have a conscious or unconscious process for approaching and solving problems.

00:19:40,919 --> 00:19:47,470
And what I do is I put experienced engineers in front of open source projects, production

00:19:47,470 --> 00:19:54,309
size projects, real existing projects that they have never seen before. I deal with discourse.

00:19:54,309 --> 00:20:02,130
So, I sat down with an engineer that works at simply business and what do I do? They

00:20:02,130 --> 00:20:07,710
have never seen it before and I ask them to add a feature. And I say it's a codebase they

00:20:07,710 --> 00:20:12,890
have never seen before, they don't know how it's structured. The most they know is it's

00:20:12,890 --> 00:20:18,050
a Rails project using Ruby and I ask them to add a feature. And I do something really

00:20:18,050 --> 00:20:23,040
annoying for them and helpful for myself and hopefully for other people is I continually

00:20:23,040 --> 00:20:27,580
stop and ask them questions. I don't let them take for granted anything they have developed.

00:20:27,580 --> 00:20:33,990
Hey experienced engineer, how did you do that? I say what's going through your head? How

00:20:33,990 --> 00:20:39,101
are you going to approach this? What is it when you get access to the codebase that you

00:20:39,101 --> 00:20:43,240
would want to know to be able to make your first move? What are you thinking about how

00:20:43,240 --> 00:20:48,690
to add the feature? Are you breaking it down? Something you want to do or not? I ask them

00:20:48,690 --> 00:20:52,419
questions as they go through. And I found out interesting things. Often they will guess

00:20:52,419 --> 00:20:58,721
and they will look for things that are like this is usually in a header file or usually

00:20:58,721 --> 00:21:05,409
this or usually that. And as an unexperienced and junior engineer, this is useful to tease

00:21:05,409 --> 00:21:15,710
apart the intuitions. I film it and put it online and hopefully that helps other people.

00:21:15,710 --> 00:21:23,559
I popped it on Reddit and I got about 5,000 views for the video. I won't go through them.

00:21:23,559 --> 00:21:34,340
The tl; dr is okay, that was hella cool. How can you help? One is that you can do one with

00:21:34,340 --> 00:21:38,260
me. So, I am looking for people who are interested in this. It will be about an hour, two hours

00:21:38,260 --> 00:21:42,360
maximum of your time. You don't have to do any preparation. You won't be able to because

00:21:42,360 --> 00:21:47,529
you won't know what you're doing. And we can do it remotely. That is something for I would

00:21:47,529 --> 00:21:51,510
love for you to be involved. I will be around today and tomorrow. Feel free to contact me.

00:21:51,510 --> 00:21:56,690
There will be contact details in the end. Share this video from people you think might

00:21:56,690 --> 00:22:03,600
benefit from it. That would be fantastic. And if you have ideas on where I can share

00:22:03,600 --> 00:22:07,721
the content or to help develop it, I'm keen to get feedback. I have not done something

00:22:07,721 --> 00:22:14,059
on that scale before. If this is a format that you find interesting and gives you an

00:22:14,059 --> 00:22:19,900
idea to approach something like this, please do it. If you're sitting there, I have just

00:22:19,900 --> 00:22:24,490
over a year's experience and if this sounds interesting, it's a really good process for

00:22:24,490 --> 00:22:31,351
learning yourself. Here's my contact information. You have the videos at the bottom. If you

00:22:31,351 --> 00:22:37,251
want to grab me, I can link you. It's fine. I have also got links to our company if you're

00:22:37,251 --> 00:22:38,251
interested in that as well. Thank you very much.

00:22:38,251 --> 00:22:39,251
[ Applause ]

00:22:39,251 --> 00:22:40,251
>> Okay. Next. Can you hear me? Next on stage is Donny L... I think? Yeah. You know. We'll

00:22:40,251 --> 00:22:42,580
see who shows up. Looks like you might be that person. Go for it.

00:22:42,580 --> 00:22:47,220
>> Hi. My name is Carolyn Cole. I work at the Princeton university library and this

00:22:47,220 --> 00:22:55,610
is my first RubyConf. I didn't realize these talks are not technical, and mine is. I Git

00:22:55,610 --> 00:23:03,309
with confidence. Git is a really powerful tool, and you do a lot with it. I do stuff

00:23:03,309 --> 00:23:10,760
with it every day. And I am the biggest problem with Git, because I make mistakes all the

00:23:10,760 --> 00:23:16,370
time. And what I realized is that not everybody knows how to Git over those mistakes, so that

00:23:16,370 --> 00:23:23,030
is what this talk is about. So one mistake I make not weekly, but maybe

00:23:23,030 --> 00:23:31,760
monthly is I'm asked to squash commits. And I've made this wonderful feature called hello.

00:23:31,760 --> 00:23:39,080
I bet you can guess what it does. And I changed two files. I've got a test and I've got a

00:23:39,080 --> 00:23:48,789
class. And I put those in in multiple commits, and somebody went on my PR me and said hey,

00:23:48,789 --> 00:23:56,760
why don't you squash those because they're kind of nonsense. I typo'd in my commit message.

00:23:56,760 --> 00:24:08,660
I said okay. I will use my log, count my commits, get interactive rebase with four, because

00:24:08,660 --> 00:24:14,660
I counted four, and I'm going to squash squash squash squash squash. And force push. And

00:24:14,660 --> 00:24:20,809
whoa, wait a second. Didn't I just tell you this commit had two files changed? And now

00:24:20,809 --> 00:24:30,549
I've got four... uh oh. Now what? I take a look at the Git log and I realize

00:24:30,549 --> 00:24:40,450
that I squashed all the way into the previous commit. I've done it lots of times. I'm gonna

00:24:40,450 --> 00:24:48,220
do it again. Thank God for Git reflog. It comes to the rescue. Most people know that

00:24:48,220 --> 00:25:01,020
Git creates a hash for every commit, and also for every change in your repository. You can

00:25:01,020 --> 00:25:09,830
see that the top is now where I'm in my lovely, horrific state. And what you don't always

00:25:09,830 --> 00:25:14,820
realize is that some of the commands that you make on the keyboard actually have multiple

00:25:14,820 --> 00:25:23,750
commands. So if you look at rebase, it's actually five commands. See, I make mistakes all the

00:25:23,750 --> 00:25:32,649
time. And you can look down and see here this is where the rebase started. Rebase is actually

00:25:32,649 --> 00:25:38,480
based on how many commits you squash. So, if you squash three commits, you get five

00:25:38,480 --> 00:25:44,190
changes. If you squash five, you get seven. It's how ever many you squash plus two. So,

00:25:44,190 --> 00:25:49,929
I can see my start. What I usually look for is the start, not necessarily how many commits

00:25:49,929 --> 00:25:55,620
I've squashed. And I see this reference. It says hey, this is where you were before you

00:25:55,620 --> 00:26:03,360
made your horrific mistake. So, I grab that and I cut and paste. And I Git reset hard

00:26:03,360 --> 00:26:11,690
to that. And now I am back. I am in business again. And I'm gonna pay attention this time.

00:26:11,690 --> 00:26:16,950
Really, I am! And I'm gonna rebase, and I'm gonna only squash

00:26:16,950 --> 00:26:23,020
twice, because that's what I should have done the first time... and now I've got my wonderful

00:26:23,020 --> 00:26:32,260
PR. It's got two files changed. And it's got one commit. So, I Git with confidence because

00:26:32,260 --> 00:26:35,539
I can time travel with Git reflog. [ Applause ]

00:26:35,539 --> 00:26:44,060
>> All right. Next on... the slides are working? It would appear so. Is that your slides?

00:26:44,060 --> 00:26:45,060
>> Those are my slides. The timer is going. >> Okay! We'll talk over each other. Justin

00:26:45,060 --> 00:26:46,060
or I don't know, the next person come on up. Go!

00:26:46,060 --> 00:26:48,390
>> All right! Hello. My name is Daniel. I work for Google Cloud and I want to ask everyone

00:26:48,390 --> 00:26:56,049
a question. Can we do better than rake? Can we do better than rake? A lot of us use rake,

00:26:56,049 --> 00:27:01,419
but is it the right tool for the job? Now rake was originally written by Jim Weirich.

00:27:01,419 --> 00:27:11,080
He designed it as the Ruby remake of the utility. So, we have a Ruby version of make. What does

00:27:11,080 --> 00:27:17,649
that mean? Make works like this. You declare targets. You declare what they depend on and

00:27:17,649 --> 00:27:24,351
you specify how to build them. It's a declarative system built on file based dependencies. This

00:27:24,351 --> 00:27:30,020
is great for C compiling. And make has at least one serious fan in the Ruby community

00:27:30,020 --> 00:27:36,770
here. But rake works the same way. And here's an equivalent rake file for compiling the

00:27:36,770 --> 00:27:44,400
same C program. But Ruby works differently from C. You generally don't compile individual

00:27:44,400 --> 00:27:51,669
files based on dependencies. As a result, today we actually seldom use rake for what

00:27:51,669 --> 00:27:56,450
it was designed for. Instead, usually our rake files are collections

00:27:56,450 --> 00:28:01,880
of scripts. Right? Scripts for running our tests, scripts for running our CI, for populating

00:28:01,880 --> 00:28:07,190
databases, all of those kinds of things. You can do these things in rake, and it's easy.

00:28:07,190 --> 00:28:11,769
There's an example. Just like you can do it in a make file. But it's actually not what

00:28:11,769 --> 00:28:17,970
rake was primarily designed for. So what are the repercussions of this? For

00:28:17,970 --> 00:28:23,720
one, our rake files tend to get out of control. This is a rake file for an open source project

00:28:23,720 --> 00:28:29,169
that I contribute regularly to. Don't expect to read it. Just look at the minimap. That

00:28:29,169 --> 00:28:36,669
minimap is only about half of the rake file. This is an enormous rake file. And you can

00:28:36,669 --> 00:28:42,080
break that up. You can separate it out into several rake files. Maybe break out some classes.

00:28:42,080 --> 00:28:47,559
Rake doesn't go out of its way to tell you to do that or make that easy for you.

00:28:47,559 --> 00:28:54,169
And that's not all. Have you tried passing command line arguments to a rake test? You

00:28:54,169 --> 00:29:00,230
can do it. You can do it. It's not pretty. And again, it's because rake isn't designed

00:29:00,230 --> 00:29:04,740
for this. It's not designed for scripts that can take arguments. It's bolted on after the

00:29:04,740 --> 00:29:10,659
fact using interesting syntax. So, I wanted to ask the community, are we happy with rake

00:29:10,659 --> 00:29:14,399
or are there alternatives that could serve us better?

00:29:14,399 --> 00:29:23,039
There are. One possibility is thor. These days, it is usually used to create stand alone

00:29:23,039 --> 00:29:36,880
executables. But it lets you write Thor files. So, you can use Thor run files. I have also

00:29:36,880 --> 00:29:41,760
been working on an alternative myself. Toys is a Ruby command line tool that I wrote a

00:29:41,760 --> 00:29:47,149
couple of years ago and actually not intended for this. It was a tool that was meant to

00:29:47,149 --> 00:29:53,390
help me manage my personal workflow scripts. All of the dozens and dozens of Ruby scripts

00:29:53,390 --> 00:29:58,480
that I would accumulate over the years just to help me do my job. But I discovered at

00:29:58,480 --> 00:30:05,330
one point that the tool kit could be used as an alternative to rake. You have tools

00:30:05,330 --> 00:30:11,470
like these that are optimized for writing scripts, for writing command line tools. They

00:30:11,470 --> 00:30:19,750
might provide those kinds of features. Things like real UNIX style, flags, creating a help

00:30:19,750 --> 00:30:26,309
screen for you, maybe integrating with your terminal, providing inputs and colored text.

00:30:26,309 --> 00:30:33,190
Maybe things like tab completion. What they don't do is task dependencies. But you know,

00:30:33,190 --> 00:30:37,419
I suspect that we're using the dependencies features of rake less and less these days.

00:30:37,419 --> 00:30:44,799
It's more typical best practice to have your CI/CD pipeline handing these. Can we do better

00:30:44,799 --> 00:30:50,460
than rake? For many cases, I think it's well worth investigating alternatives. There are

00:30:50,460 --> 00:30:57,159
these and certainly others that I haven't found. If you will indulge me plugging my

00:30:57,159 --> 00:31:04,450
own tool for 40 more seconds, I have been gradually replacing the rake files with toys

00:31:04,450 --> 00:31:11,039
files as an experiment to see how it works. It's been working well enough that I wanted

00:31:11,039 --> 00:31:15,600
to take this chance to bring it out to the community and see what we thought about the

00:31:15,600 --> 00:31:22,559
questions. Rake versus something else. If you're interested in checking out toys, here's

00:31:22,559 --> 00:31:29,230
the info. I will leave it up there for 15 more seconds while we are just awkwardly silent

00:31:29,230 --> 00:31:33,760
so that you can... [ Laughter ]

00:31:33,760 --> 00:31:35,800
[ Applause ]

00:31:35,800 --> 00:31:42,040
>> One... done! I did give him five minutes. So, all right, next on deck is... okay. I

00:31:42,040 --> 00:31:44,469
wasn't supposed to get it right. Come on up, get set up. You're good.

00:31:44,469 --> 00:31:50,210
>> I'm host in hones. I work at Adhawk. I'm going to talk to you about currying with keyword

00:31:50,210 --> 00:32:08,360
argues. Kwurry is a gem I wrote to play with kwargs and curry. So, quick example. Say we

00:32:08,360 --> 00:32:13,529
have a function that adds two numbers together. We have our add function. Say we want to make

00:32:13,529 --> 00:32:19,279
a function that adds 2 to any number. So now we curry the function and we partially apply

00:32:19,279 --> 00:32:25,610
2 to the first variable, the first argument a is 2. Now it always adds 2 to anything.

00:32:25,610 --> 00:32:34,700
Now we can call add 2 to one. I'm using dot syntax, but the same as call.

00:32:34,700 --> 00:32:41,559
The point of currying is to partially apply a function. So, if we're currying with a function

00:32:41,559 --> 00:32:47,720
with args, a lambda, a proc, a method. We have our foo and it has different args and

00:32:47,720 --> 00:32:59,580
this is what I see. If I curry that and call parameters, then it all turns to rest, because

00:32:59,580 --> 00:33:03,679
it will return function after function after function until we have provided all the required

00:33:03,679 --> 00:33:12,380
arguments. Now if I have a function that takes kwargs, then it kind of works the same way,

00:33:12,380 --> 00:33:19,049
right? This is really similar. I have required a, required b, optional c. I curry it and

00:33:19,049 --> 00:33:25,400
I get rest. You think maybe I would get key_rest, but I don't.

00:33:25,400 --> 00:33:33,529
So if I try to curry this function and I partially apply and I pass a in as 1, I get missing

00:33:33,529 --> 00:33:40,710
keyword b. So, to me, this is fundamentally broken. I can't use this. I can't partially

00:33:40,710 --> 00:33:47,620
apply. So, with kwurry, you call bar.kwurry instead

00:33:47,620 --> 00:33:55,830
and you get a function back and it's a function I can pass b to. Or I can call b first and

00:33:55,830 --> 00:34:02,399
a second and it works the way you think it would. Great.

00:34:02,399 --> 00:34:07,890
So here's a little bit more of a real world example. Say I want to hello world. So, I

00:34:07,890 --> 00:34:13,220
write a greet function and it takes a greeting and a name and spits it back out. So, I pass

00:34:13,220 --> 00:34:19,711
greet. Hello as a first argument and world, and I get back hello world. Good so far. Now

00:34:19,711 --> 00:34:24,000
I want to greet everyone with hey. I only want to say hey. I always want to use hey

00:34:24,000 --> 00:34:30,520
all the time. So, I curry it and partially apply hey as the first parameter. And now

00:34:30,520 --> 00:34:36,030
we have hey world, right? But what if I want to greet all of you? What if I only want to

00:34:36,030 --> 00:34:42,450
greet RubyConf and I want a function for that? I can't use this function as it's written

00:34:42,450 --> 00:34:48,130
because of the order of the arguments. We can only apply arguments in order. So, I would

00:34:48,130 --> 00:34:55,390
have to rewrite the function and flip the arguments. With kwargs, I can write it. Looks

00:34:55,390 --> 00:35:03,420
the same. Returns the exact same code inside the function. And now I can greet RubyConf

00:35:03,420 --> 00:35:14,200
as a function that is kwurried of greet. I can now greet you with whatever salutation

00:35:14,200 --> 00:35:21,660
I would like. Hello there, RubyConf. This is a proof of concept, and I'm going

00:35:21,660 --> 00:35:29,370
to ask you, how should Ruby handle currying with keyword args. I have shown you a way

00:35:29,370 --> 00:35:39,340
that I consider broken. Raise your hand if you want it to work in the broken way. Okay.

00:35:39,340 --> 00:35:45,890
Great. I'll take it. Perfect. So, here's my gem. I would love to have your feedback. I

00:35:45,890 --> 00:35:51,200
got your votes down, so I'm gonna, you know, plug this away. Ruby is an open source language.

00:35:51,200 --> 00:35:55,560
We can make it work however we want. Thank you.

00:35:55,560 --> 00:35:57,260
[ Applause ]

00:35:57,260 --> 00:36:00,140
>> Next on deck is Gonzolo. Let's do that. Come on up.

00:36:00,140 --> 00:36:04,020
>> Okay. Hello, everybody. My name is Braulio Martinez. I have been doing Ruby for the last

00:36:04,020 --> 00:36:10,260
ten years. I'm part of Cedarcode. We are a small team of engineers with strong skill

00:36:10,260 --> 00:36:16,850
in Ruby that help other companies grow in size and expertise. We do a lot, and among

00:36:16,850 --> 00:36:27,840
those efforts, we have the gem for WebAuthn. We still maintain that. So, I'm going to talk

00:36:27,840 --> 00:36:36,830
to you about that. So, if we talk about what it solves, probably the first any system the

00:36:36,830 --> 00:36:42,920
first authentication that comes to mind for everyday use is probably passwords. Passwords

00:36:42,920 --> 00:36:49,310
are really prone to many kinds of attacks. For example, brute force of phishing attacks.

00:36:49,310 --> 00:36:57,610
They are bad UX for users because they forget about it. They need to pick strong ones, etc.

00:36:57,610 --> 00:37:04,370
And actually, 81%of all hacking related things were a consequence of stolen passwords. So,

00:37:04,370 --> 00:37:14,130
you think I can do a second authentication factor. They are also prone to many attacks,

00:37:14,130 --> 00:37:21,220
for example, phishing as well. 28%of all users use some kind of second authentication factor,

00:37:21,220 --> 00:37:28,670
which is pretty lame. If we go through a quick example, say I click on a button that takes

00:37:28,670 --> 00:37:34,970
me to log in through Google. This sounds legit, so I will put my information and I use Google

00:37:34,970 --> 00:37:41,880
authenticator for it. If you take a close look, what you have done is given the information

00:37:41,880 --> 00:37:49,850
needed for an attacker to put that into actual Google in the next 30 seconds, given a fake

00:37:49,850 --> 00:37:55,720
Google account. So, WebAuthn is a standard that define asset

00:37:55,720 --> 00:38:07,160
of rules for APIs. And the guys who created this were W3C and the fido alliance, that

00:38:07,160 --> 00:38:14,450
is integrated by many companies. The ones that were involved in the standard development

00:38:14,450 --> 00:38:18,300
is where all of these big brands that you see there.

00:38:18,300 --> 00:38:25,940
It's a big book, hard to understand. But I can sum it up really quick in three things.

00:38:25,940 --> 00:38:38,200
So, the WebAuthn credential is a wrapper for private keepers. One we use in SSH. But it

00:38:38,200 --> 00:38:45,700
is just one website. The three entities they are well defined authenticators, which are

00:38:45,700 --> 00:38:54,640
the ones on the left. Security keys or fingerprint of a scanner of my phone, the web browser,

00:38:54,640 --> 00:39:00,410
the client, and the relying party, which are the servers.

00:39:00,410 --> 00:39:09,590
Let's check this example. This is GitHub. GitHub already supports second factor authentication.

00:39:09,590 --> 00:39:17,070
And I'm going to use the touch ID of my mac to authenticate that and to use that as a

00:39:17,070 --> 00:39:25,440
second factor. There are a lot of code not a lot of code, but if you actually go to introduce

00:39:25,440 --> 00:39:31,400
yourself in the server side, you're going to have to implement a bunch of code with

00:39:31,400 --> 00:39:36,580
more than 15 steps of validations, many of them are graphic validations, or you can opt

00:39:36,580 --> 00:39:41,490
to use our gem. If you need to do that, you need to configure the origin. It's important

00:39:41,490 --> 00:39:50,730
to stop phishing attacks. If the register flow, it's going to look like

00:39:50,730 --> 00:39:55,620
this in your Ruby server. That's the register action. You grab what the browser gave you.

00:39:55,620 --> 00:40:04,070
You instantiate the credential with that. After that, you verify it. And you still is

00:40:04,070 --> 00:40:11,480
have the public key. They authenticate method action is similar. Instead you need to pass

00:40:11,480 --> 00:40:19,200
the stored public key to verify method. The wins we get is no brute force attacks are

00:40:19,200 --> 00:40:25,110
possible. We are storing public keys not passwords, so there's no sensitive data in your servers.

00:40:25,110 --> 00:40:32,230
No possible phishing and no possible man in the middle attacks. This is how it looks like

00:40:32,230 --> 00:40:39,670
in terms of which browsers support it right now. Safari is quite red. But they have implemented

00:40:39,670 --> 00:40:49,020
it for security keys in the beta versions. A lot of applications implemented WebAuthn

00:40:49,020 --> 00:40:57,280
already, so this is quite the list. They are all using it as a second factor right now.

00:40:57,280 --> 00:41:01,250
That's pretty much it. Thank you. [ Applause ]

00:41:01,250 --> 00:41:10,340
>> All right. Next up on deck is Rohan. Go for it. You're not mirrored. There you go.

00:41:10,340 --> 00:41:13,560
Is that what you want? >> Hi.

00:41:13,560 --> 00:41:21,040
So, I'm a Rubyist. I love Ruby. I have been doing it for a long time. I also love working

00:41:21,040 --> 00:41:28,550
on gems, doing gem development. I'm currently maintaining the rake gem, if you use it, I

00:41:28,550 --> 00:41:39,790
would love to hear feedback. I work at Cedarcode. Updating gem dependencies.

00:41:39,790 --> 00:41:48,290
So how do we how do we update gems on our apps? Of course we use bundle updates or somebody

00:41:48,290 --> 00:41:57,820
is doing the bundle update for us. So, how often do we do it? How aggressively do we

00:41:57,820 --> 00:42:05,800
go for the last version? Or do we do patch a little first and then a bit more? How many

00:42:05,800 --> 00:42:12,250
gems do we update at the same time? Do we do all at once? Just run bundle updates and

00:42:12,250 --> 00:42:21,630
do everything? For me, doing that is a bit too risky. So, do we do it once at a time?

00:42:21,630 --> 00:42:30,510
Maybe too tedious. So, is there any middle ground? So, this is how I do it. Maybe it's

00:42:30,510 --> 00:42:41,160
you find it helpful in some way. So, we prioritize every day tasks. So, why not prioritize the

00:42:41,160 --> 00:42:51,080
dependencies? So first I tried to focus on security. So, I kind of split prioritize this

00:42:51,080 --> 00:42:57,501
task by splitting those dependencies that are known to have vulnerability and those

00:42:57,501 --> 00:43:05,470
that don't. So, that's the first way to split. Then I try to split further split by risk.

00:43:05,470 --> 00:43:14,390
So, if, for example, if we have a Rails and we have a copybara in test, one way to split

00:43:14,390 --> 00:43:26,820
it, one is more risky? Of course, updating gems that are used in production is more risky.

00:43:26,820 --> 00:43:36,080
So, we can make a split between the non production gems and those that are used on production.

00:43:36,080 --> 00:43:44,910
So, further splitting. For the ones on production, we can I found a split between the patch level

00:43:44,910 --> 00:43:57,580
update and the minor and the major. So, my prioritization is mostly value that you get

00:43:57,580 --> 00:44:09,240
over risk. So, how do I do it? Fixing vulnerabilities, I use bundler audit. If you don't have it,

00:44:09,240 --> 00:44:16,310
you install it. You get that new command for subcommand for bundler. And then you get a

00:44:16,310 --> 00:44:22,540
list of all the vulnerabilities from your gem file. And you can update with that command

00:44:22,540 --> 00:44:30,210
each of the dependencies that are vulnerable. And I commit those right away like fixing

00:44:30,210 --> 00:44:38,910
the vulnerabilities. Then I jump into the non production gem dependencies by using this

00:44:38,910 --> 00:44:47,130
command, by only filtering the tests under the development dependencies from the gem

00:44:47,130 --> 00:44:51,900
file. And the rest will be kind of the production

00:44:51,900 --> 00:45:03,410
dependencies. So, then I use these three steps for first the patch level updates, the minor,

00:45:03,410 --> 00:45:13,210
and the rest. Which is the most risky one. So, that way this encourages progress, I think.

00:45:13,210 --> 00:45:20,290
It puts security first. And it kind of manages I feel like I'm managing the risk in a way.

00:45:20,290 --> 00:45:29,350
So, if there is one take away I want to leave you is that we can split and prioritize this

00:45:29,350 --> 00:45:37,040
task by evaluating the value over the risk of doing each of the parts. You can see the

00:45:37,040 --> 00:45:45,701
longer version in our company blog, which is right there. So, thank you. And thanks

00:45:45,701 --> 00:45:46,701
for [ Applause ]

00:45:46,701 --> 00:45:53,130
thank you for listening and thank you to the bundler time for all of these options.

00:45:53,130 --> 00:45:59,130
>> All right. Next on deck is... Millie. Could be Emily. Are you here?

00:45:59,130 --> 00:46:09,291
>> Hello, my name is Rohan MenDon. Today I'm going to to talk about the project that my

00:46:09,291 --> 00:46:16,510
company helped with earlier this year. So, our team basically worked on a project where

00:46:16,510 --> 00:46:21,510
we actually collected runtime driving stats from a car and sync it all the way to AWS.

00:46:21,510 --> 00:46:31,200
The basic motivation is TrueCar is a car shopping and pricing site. Once consumers buy a car,

00:46:31,200 --> 00:46:38,260
they don't visit the site for another three to five years. So, what can we do to reengage

00:46:38,260 --> 00:46:43,690
the consumers immediately after purchasing the car? This is one where we collected realtime

00:46:43,690 --> 00:46:52,320
driving stats and present it in a nice fashion. So, we built a dashboard that basically after

00:46:52,320 --> 00:46:57,760
collecting the driving stats, it shows the vehicle information, the car health, the fuel

00:46:57,760 --> 00:47:04,640
level, the mileage, average miles, speed, and RPM, and the time when the data was synced.

00:47:04,640 --> 00:47:14,210
We picked a car. So, we used a Honda sedan, and we purchased a OBD II device that was

00:47:14,210 --> 00:47:22,020
$10. You plug it into your car where you can issue commands and get data out. This is a

00:47:22,020 --> 00:47:34,030
small GIF that shows you where the OBD II port is located. And then we actually paired

00:47:34,030 --> 00:47:41,990
the device with the phone's native Bluetooth connectivity. We used a Google Pixel II. So,

00:47:41,990 --> 00:47:51,160
this was simple enough. It was already in the android codebase. Using the Bluetooth

00:47:51,160 --> 00:47:59,920
manager, we looked up the device by name. Then we generated a socket out of it to connect.

00:47:59,920 --> 00:48:05,710
And then we started issuing commands. So, this was already threaded. For example, the

00:48:05,710 --> 00:48:15,450
command that we used in this case was 010C022F. That means show current data, engine RPM,

00:48:15,450 --> 00:48:23,420
vehicle speed, and fuel tank level. This is what we got back from the car. This is in

00:48:23,420 --> 00:48:28,731
hex. And there are calculations which tells you how to convert hex into an integer. But

00:48:28,731 --> 00:48:33,440
during the course of this project, we realized that the automated value is not exposed by

00:48:33,440 --> 00:48:44,120
the report. So, computing the distance traveled by coordinating GPS coordinates. This is a

00:48:44,120 --> 00:48:51,330
small demo. It is a simple android app with a few fields. It shows that values are updating.

00:48:51,330 --> 00:48:56,471
Now the thing is now we have the data on the phone. How do you get it into AWS? In that

00:48:56,471 --> 00:49:05,110
case, we used the different sources. In this case we used Cognito for credential management.

00:49:05,110 --> 00:49:14,080
We connected as an anonymous user and we linked that to a Kinesis stream with one shard. Then

00:49:14,080 --> 00:49:21,590
we used a lambda. And in this case, this was actually held in February, and we used at

00:49:21,590 --> 00:49:25,750
that time, and the year before it was announced that they had Ruby support for lambda. So,

00:49:25,750 --> 00:49:35,610
we used Ruby as our lambda. We refreshed the data and wrote it to S3. All the data was

00:49:35,610 --> 00:49:45,540
getting streamed in from the phone into this. And ultimately, we ended up writing into Redshift.

00:49:45,540 --> 00:49:56,120
We set up permissions along the way. This is a sample of how we got the data into Kinesis.

00:49:56,120 --> 00:50:04,630
We wrote into the android SDK. This is the dashboard that we built where we show the

00:50:04,630 --> 00:50:11,550
regular information and the data that we collected and our stack is React.js running on node.

00:50:11,550 --> 00:50:21,110
And we have a simple Jason get API. We connected the car, built an app, uses cognito, and this

00:50:21,110 --> 00:50:27,980
is our main consumer application. And in the end, our team won the most creative award.

00:50:27,980 --> 00:50:29,540
Thank you. [ Applause ]

00:50:29,540 --> 00:50:41,440
>> All right. Next on deck is Chris. I should practice these more often. Yep. Come on up.

00:50:41,440 --> 00:50:48,920
All right. Go ahead. >> Hey. My name is Emily, and I'm a software

00:50:48,920 --> 00:50:57,690
engineer at MongoDb. I'm going to talk to you about hiring junior developers the first

00:50:57,690 --> 00:51:05,730
90 days. I have had some experiences that I think are probably not unique. First I wanted

00:51:05,730 --> 00:51:13,240
to ask, who has had a junior development job in their lifetime? Who has had the experience

00:51:13,240 --> 00:51:17,890
of starting a junior development job and finding that the expectations for your performance

00:51:17,890 --> 00:51:24,829
were not clearly defined? Okay. So, like I suspected, not unique. So, I wanted to talk

00:51:24,829 --> 00:51:28,780
about some things that I think could really help improve the experience of starting a

00:51:28,780 --> 00:51:34,880
new job, especially as a younger or more inexperienced engineer. So, I think the first thing is obviously

00:51:34,880 --> 00:51:40,820
you have to set expectations with a junior developer. Shocking, I know. And these expectations

00:51:40,820 --> 00:51:46,980
have to be based on something. So, I think that recruiters and hiring managers

00:51:46,980 --> 00:51:53,150
do a really good job at looking at someone's resume before they hire them but not when

00:51:53,150 --> 00:51:56,790
they're about to start their job. How many people have started a job only to be asked

00:51:56,790 --> 00:52:03,290
to do some crazy server restart that they never claimed to know how to do without any

00:52:03,290 --> 00:52:07,560
support? Right? This shouldn't be happening. So, the first thing you should be doing is

00:52:07,560 --> 00:52:12,250
looking at their resume and seeing what they claim to know and saying based on this information,

00:52:12,250 --> 00:52:20,210
how long should it take them to ramp up on our stack? You know your stack. And of course

00:52:20,210 --> 00:52:25,010
you should communicate this to the engineer. Do not keep it in your head. They're going

00:52:25,010 --> 00:52:32,800
to be wandering around not knowing what your expectations are. So, the second step is giving

00:52:32,800 --> 00:52:39,960
feedback based on these expectations. So, the first guideline, I think, is for negative

00:52:39,960 --> 00:52:44,980
feedback. Don't necessarily wait for your next one on one. Right? The first three months

00:52:44,980 --> 00:52:49,131
go by really quick, and sometimes you have one on ones once a week. Sometimes it's once

00:52:49,131 --> 00:52:54,710
every two or three weeks. That's not that many meetings for you to course correct. And

00:52:54,710 --> 00:52:58,390
also, the way that you're new engineer is interacting with the team is really going

00:52:58,390 --> 00:53:02,550
to stick in the minds of the rest of the team. Why would you let them wander around making

00:53:02,550 --> 00:53:06,650
mistakes that you could correct for them and making a bad impression for themselves when

00:53:06,650 --> 00:53:12,920
they just might not know. Give feedback quickly, casually and often and they will appreciate

00:53:12,920 --> 00:53:19,940
it and it won't be a big deal. Also, don't be afraid to give positive feedback.

00:53:19,940 --> 00:53:25,600
I feel like every job I started I wandered around not having received any feedback only

00:53:25,600 --> 00:53:33,170
to realize that oh, I was just doing a pretty good job, just nobody told me. So, don't be

00:53:33,170 --> 00:53:36,940
afraid to pull them aside and say hey, you did a really good job on that or hey, I didn't

00:53:36,940 --> 00:53:41,290
expect you to be able to do that. That was really cool. I'm sure that will make their

00:53:41,290 --> 00:53:51,450
week and give a little pep in their step. So, lastly, one more thing. Make sure that

00:53:51,450 --> 00:53:59,750
when you give feedback your actions. If a junior developer is taking a while to ramp

00:53:59,750 --> 00:54:07,110
up and you say no, no, you're just getting started. Don't take away some of their project

00:54:07,110 --> 00:54:13,450
because they are taking too long or let teammates give other feedback. Make sure your team is

00:54:13,450 --> 00:54:18,170
in agreement about what the expectations are so that you don't accidentally do something

00:54:18,170 --> 00:54:23,940
that goes against what you've been saying. Because that can really erode trust and that

00:54:23,940 --> 00:54:27,130
damage is going to last for a really long time.

00:54:27,130 --> 00:54:30,570
So the last step is probably like eventually they're going to get a performance review

00:54:30,570 --> 00:54:35,890
and you're going to start promoting them and giving them raises. There should be nothing

00:54:35,890 --> 00:54:40,490
that's surprising in that performance review if you follow the first two steps. And I think

00:54:40,490 --> 00:54:45,600
that's a good rule for any employee. So, you've done all the work already and now you can

00:54:45,600 --> 00:54:49,500
reap the rewards for someone who is successful and doing a good job.

00:54:49,500 --> 00:54:54,430
Just to wrap this up, you could say a few things here. One, this sounds like a lot of

00:54:54,430 --> 00:54:58,770
work. To that I say if you're getting paid the big bucks to manage people, I have no

00:54:58,770 --> 00:55:06,870
pity for you. [ Applause ] The second thing is that sounds

00:55:06,870 --> 00:55:15,540
like my employee is insecure and I have to coddle them. That sounds like a problem. Sure

00:55:15,540 --> 00:55:20,960
that might be the case. But you have to realize that people come from different backgrounds

00:55:20,960 --> 00:55:26,240
and not everyone is made to feel like they belong in a certain space. Maybe you don't

00:55:26,240 --> 00:55:31,850
think it's your job to go that extra mile to ensure that your new employee knows what

00:55:31,850 --> 00:55:37,600
is expected of them and knows how to succeed. But if they haven't been told how to do that

00:55:37,600 --> 00:55:42,670
elsewhere, then they are going to fail. If your company has problems retaining women

00:55:42,670 --> 00:55:48,920
or minorities or younger talent, then you have to look back at this process and acknowledge

00:55:48,920 --> 00:55:54,750
that you haven't been doing the work to retain those employees. In the interest of making

00:55:54,750 --> 00:55:59,960
tech safer for younger people, for people from different socio economic backgrounds,

00:55:59,960 --> 00:56:05,870
different races, different genders, I think setting expectations and giving good feedback

00:56:05,870 --> 00:56:08,300
to junior employees is the most important thing you can do. Thank you.

00:56:08,300 --> 00:56:09,300
[ Applause ]

00:56:09,300 --> 00:56:12,580
>> Next up is eye an. It could be an acronym. It could be IAN. Intelligent artificial nomad.

00:56:12,580 --> 00:56:17,080
Or it could be a person. Okay. >> Hi, everyone. I'm Chris, and I want to

00:56:17,080 --> 00:56:24,590
talk to you about this business. So, have you ever constructed a hash like this where

00:56:24,590 --> 00:56:29,940
you have a variable called name, for example, and then you have the key which is the same

00:56:29,940 --> 00:56:34,650
word. So, many in this situation I've got name, I've got e mail, and in the hash I've

00:56:34,650 --> 00:56:45,010
got name: Name, e mail: E mail. It doesn't have to be like this. You can do this in JavaScript.

00:56:45,010 --> 00:56:51,450
So, in JavaScript, they call it the object literal property value shorthand. And what

00:56:51,450 --> 00:56:58,550
this means is you can construct an object, it's called in JavaScript, with the same key

00:56:58,550 --> 00:57:03,710
as the variable that you're using. So, in this situation, I've got name and e mail,

00:57:03,710 --> 00:57:07,810
and it works out that it's a name because of the name of the variable is name and the

00:57:07,810 --> 00:57:13,680
e mail is e mail. It makes sense. What if I told you there was a world that you could

00:57:13,680 --> 00:57:18,810
do this in Ruby and that world happened four years ago?

00:57:18,810 --> 00:57:24,790
So four years ago somebody brought this up. They logged a call about it and said hey,

00:57:24,790 --> 00:57:31,960
why don't we do this in Ruby? And Matz at the time said I'm not so sure. There were

00:57:31,960 --> 00:57:38,420
all sorts of different issues and ES6 was new back then. And somebody last year actually

00:57:38,420 --> 00:57:46,040
said let's investigate this again. So, then Matz admitted that he doesn't use JavaScript

00:57:46,040 --> 00:57:53,900
at all. And he says that it's most useful in JavaScript when destructuring. He also

00:57:53,900 --> 00:58:01,650
said I'm open to hearing your opinion. Now destructuring is quite handy and tricky. I

00:58:01,650 --> 00:58:06,480
can imagine it would be tricky to work this into Ruby. And how it works in JavaScript

00:58:06,480 --> 00:58:11,080
is you can do this neat thing where you can reach into an object and take something out

00:58:11,080 --> 00:58:20,270
and put it into a variable. Back then, four years ago, I a guy called Shugo Maeda created

00:58:20,270 --> 00:58:27,160
a patch to actually try this out in Ruby and last year Ignatius Reza did another patch.

00:58:27,160 --> 00:58:34,510
So, I thought I want to try this out in Ruby. So, I want to throw a heads up to Ruby, the

00:58:34,510 --> 00:58:39,540
people who work on the core team with Ruby. They work with some crazy C code, and I'm

00:58:39,540 --> 00:58:45,850
so glad they do. I thought I wanted to look at the code to figure it out. And it's tricky

00:58:45,850 --> 00:58:51,240
and it makes me realize that they code C so we don't have to.

00:58:51,240 --> 00:59:02,550
It was working for 1.9.3. I had to change the code so there weren't issues so I created

00:59:02,550 --> 00:59:08,860
a little patch. Now I called it imphash because I didn't know what it was called and I thought

00:59:08,860 --> 00:59:15,900
it was like an implicit hash. I don't recommend curling random urls off the internet, but

00:59:15,900 --> 00:59:25,540
if you want, you can try this out. And there is a cool function where you can take a patch

00:59:25,540 --> 00:59:32,480
and combine it with the build process so you use patch to bring that patch into your own

00:59:32,480 --> 00:59:40,160
version. But you don't want to mess with your own Ruby 2.5.0, so you can use the switch

00:59:40,160 --> 00:59:52,400
n to give it a name space. So, you can use imphash to try this out yourself. I did this

00:59:52,400 --> 00:59:57,980
last year on Ruby 2.5. It's no longer compatible with Ruby 2.7. I didn't want to go through

00:59:57,980 --> 01:00:05,010
the pain of fixing the merge issues again. What that means is if you followed that along

01:00:05,010 --> 01:00:11,390
and managed to use your memorize that somehow, that means you can create a hash like I was

01:00:11,390 --> 01:00:20,810
talking about. You I have a method called a business. And I have constructed a hash

01:00:20,810 --> 01:00:26,241
with just name, e mail, business. And it's worked out that the key is name, e mail, and

01:00:26,241 --> 01:00:31,120
business, and it constructed a hash for you. If you want to try this out yourself, you

01:00:31,120 --> 01:00:38,330
can go to my website, theChrisoshow.com. And it has instructions on how to do it. And have

01:00:38,330 --> 01:00:39,330
fun. Thank you. [ Applause ]

01:00:39,330 --> 01:00:40,330
>> All right. Next on deck is... an dree. Andre? Are you here?

01:00:40,330 --> 01:00:41,330
>> He was here... >> Did he go somewhere? Okay. I guess we will

01:00:41,330 --> 01:00:42,330
come back to him. Next on deck then is no agh. Could be Noah, too. It's difficult to

01:00:42,330 --> 01:00:43,330
know these things. They're unknowable. Go for it.

01:00:43,330 --> 01:00:50,880
>> Hi. I'm Ian, and I'm here to talk about how to get organic pairing with process! So

01:00:50,880 --> 01:00:54,170
pair program something you take a bunch of developers and throw them together on one

01:00:54,170 --> 01:01:01,560
computer and hope they can figure things out. It's awesome most of the time. But sometimes

01:01:01,560 --> 01:01:07,700
it's not awesome. Sometimes like the cat takes the keyboard too much of the time. Winny is

01:01:07,700 --> 01:01:14,240
a hoggy developer or you're not feeling heard in the conversation or you're having disagrees

01:01:14,240 --> 01:01:22,070
like no, we should use tabs instead of spaces. And so, like, so like how can we, like, this

01:01:22,070 --> 01:01:28,300
is a human problem. We're hopefully working with each other. What's a way we can kind

01:01:28,300 --> 01:01:33,240
of talk about and navigate that? That's where our process, even though it's a human thing,

01:01:33,240 --> 01:01:41,280
it's conversation. Having structure can move the conversation forward and also helps because

01:01:41,280 --> 01:01:46,580
some of the issues like keyboard hogging can be originating from power dynamics or things

01:01:46,580 --> 01:01:54,160
not recognized like senior/junior development issues or historical things. It's important

01:01:54,160 --> 01:02:00,430
to make it part of the flow to make it not personal to be like hey, I have that carved

01:02:00,430 --> 01:02:05,480
out time. I'm driving this portion of the time and navigating this portion of the time.

01:02:05,480 --> 01:02:10,090
And having mechanical processes to check that back and forth can make that not personal.

01:02:10,090 --> 01:02:20,011
Your time is up so switch so I can be driving. It can help create emotional safe space. You

01:02:20,011 --> 01:02:25,060
can get continuous feedback. So, the process can help make sure there's that space for

01:02:25,060 --> 01:02:32,650
that. And so, part of that is being able to have a good common shared language. When my

01:02:32,650 --> 01:02:38,050
team at the time was having trouble with that, we started trying to make sure we understood

01:02:38,050 --> 01:02:44,880
and had the same shared language and vocabulary. And another thing we did is we made a pairing

01:02:44,880 --> 01:02:50,040
checksheet list which helps it. Before we start pairing, let's think about how we're

01:02:50,040 --> 01:02:56,430
going to get into pairing so that highlights of that included the fact that making sure

01:02:56,430 --> 01:03:02,330
a check in to see how you're feeling. You may not feel on top of your game, and recognizing

01:03:02,330 --> 01:03:08,490
that helps set you up for the next part of the space. And being able to pair in when

01:03:08,490 --> 01:03:16,420
the retros are happening was a neat thing. But I tried to move that process to where

01:03:16,420 --> 01:03:23,330
I work now and there was a little bit of I don't know. This is a lot. Part of that process

01:03:23,330 --> 01:03:31,350
is being able to get buy in from who you're working with. So, it's like okay. Maybe there

01:03:31,350 --> 01:03:36,680
were problems at the old organization. There was like issues where pairs would run off

01:03:36,680 --> 01:03:41,820
and do code on their own and come back without, like, work being done. So, there was explicit

01:03:41,820 --> 01:03:46,980
stuff in the old list to make sure that didn't happen. That's not really a problem. When

01:03:46,980 --> 01:03:52,540
you have three developers, you can't run off with the code because you're constantly pairing.

01:03:52,540 --> 01:04:02,190
Revising it to focus on the problems that my team is currently focused on. And so now,

01:04:02,190 --> 01:04:08,820
that ended up with this revision where we're lighter and focusing on the process and making

01:04:08,820 --> 01:04:11,960
sure we had mini retros coming through. And yeah. Whoo!

01:04:11,960 --> 01:04:12,960
[ Applause ]

01:04:12,960 --> 01:04:20,630
>> All right. Hold on. Did Andre return? No? Yes? Okay. The next up is key Vin. Could be

01:04:20,630 --> 01:04:24,740
Kevin. Are you here? Skip you? Okay. Very good.

01:04:24,740 --> 01:04:28,570
>> I don't know if I can do this in 57 seconds. >> That's the last one. So, we're still good.

01:04:28,570 --> 01:04:29,640
The next one do we just cross you off then? Okay. The next one here is I'm getting a phone

01:04:29,640 --> 01:04:30,640
call. I don't know who that is. That's not important.

01:04:30,640 --> 01:04:31,640
Dave. Day vee. Are you here? Would you like to speak? You are here. You would like to

01:04:31,640 --> 01:04:32,640
speak? Come on up. All right. Go ahead. >> Cool! My name is Noah Gibbs. I work for

01:04:32,640 --> 01:04:34,990
code folio. I'm here to tell you there's no such thing as knowing your computer or coding

01:04:34,990 --> 01:04:40,450
all the way to the bottom. I'm an old programmer in the sense that I have been doing this for

01:04:40,450 --> 01:04:46,650
a long time. And I'm supposed to tell you that you should learn C or C++ or some language

01:04:46,650 --> 01:04:51,570
that works like the computer works so you understand how your computer works. I'm supposed

01:04:51,570 --> 01:04:56,090
to tell you to write code that messes with the hardware like an operating system so you

01:04:56,090 --> 01:05:00,680
understand how an operating system works. And I'm supposed to tell you to write in high

01:05:00,680 --> 01:05:07,350
performance languages so you can write fast code. And the reason you should do all three

01:05:07,350 --> 01:05:12,230
of these things is because you should know the lowest levels of the computer. You should

01:05:12,230 --> 01:05:19,890
know it all the way to the bottom. No. No. No. No. But let's talk a little about

01:05:19,890 --> 01:05:28,640
why not. Don't learn C early. Maybe at some point. Don't learn C early. C is no longer

01:05:28,640 --> 01:05:32,710
a low level language. Google that phrase. There's a wonderful paper that will tell you

01:05:32,710 --> 01:05:38,550
all the ways C no longer works like your processor. C works like a PDP1 1 from 1970 and it turns

01:05:38,550 --> 01:05:44,140
out some things have changed since then. If you're learning C to know what the architecture

01:05:44,140 --> 01:05:49,080
is like, stop! The architecture is not like that any more. You are wonderfully learning

01:05:49,080 --> 01:05:54,260
completely the wrong thing. Stop. If you're learning it for the optimization, all the

01:05:54,260 --> 01:06:02,891
major stuff in optimization, C doesn't do any of that because in 1977, the PDP didn't

01:06:02,891 --> 01:06:09,750
do any of that. So, save your time. Don't write an operating system. I have worked

01:06:09,750 --> 01:06:17,570
on two professionally and two more for learning and stuff. Long time ago, mostly. If you want

01:06:17,570 --> 01:06:21,170
to learn the stuff that you're supposed to learn from an operating system like schedulers,

01:06:21,170 --> 01:06:29,590
great. Absolutely do that. Do that in a language that doesn't seg fault. If you write a real,

01:06:29,590 --> 01:06:35,920
you know, all the way down to the bios operating system, you have no applications to do it.

01:06:35,920 --> 01:06:41,680
You're not going to learn these things because first you have to write the giant constellation.

01:06:41,680 --> 01:06:45,160
Writing an operating system is not even the best way to learn about an operating system

01:06:45,160 --> 01:06:53,030
any more. You can't there are useful pieces, but don't do that for that reason.

01:06:53,030 --> 01:06:58,940
And never use a high performance awkward annoying language just because. I don't mean never

01:06:58,940 --> 01:07:03,850
learn it. But inside every gigantic app, there's about two pages of code that needs to be fast

01:07:03,850 --> 01:07:10,400
and we have interface and C extensions and call out to other languages. If you have two

01:07:10,400 --> 01:07:15,440
pages, great. Write two pages of code in a fast language and call to it from your 99

01:07:15,440 --> 01:07:23,140
page Ruby app and write the rest in whatever is easiest. Using the wrong language the whole

01:07:23,140 --> 01:07:28,750
time for that is the definition of premature optimization. And the reason you get all of

01:07:28,750 --> 01:07:34,880
this advice is the same. The idea that there's virtue. I'm using that word because as programmers

01:07:34,880 --> 01:07:47,000
we have the same neuroses that everybody else does. You will find that whoever tells you

01:07:47,000 --> 01:07:52,230
to learn it to the bottom, the bottom is whatever level they learned. A C programmer will tell

01:07:52,230 --> 01:07:55,740
you you learn it to C, because that's all the way to the bottom. And assembly language

01:07:55,740 --> 01:08:02,080
programmer will say you learn assembly. And the hardware designer sitting next to him

01:08:02,080 --> 01:08:09,350
will just take another drink. Is the lowest level C? Absolutely not. Assembly

01:08:09,350 --> 01:08:18,860
list. I worked at Nvidia and palm with hardware bugs. They are a thing. If you Google CPU

01:08:18,860 --> 01:08:24,850
bugs, I promise it's not just prototype hardware. Hardware bugs are a thing. You don't mostly

01:08:24,850 --> 01:08:30,310
see them. Error correcting RAM. If there were no errors to correct, error correcting RAM

01:08:30,310 --> 01:08:40,690
wouldn't do anything. It's leaky abstractions all the way down. There is no point at which

01:08:40,690 --> 01:08:48,211
the abstractions stop leaking. Electron is part call and the way but not really. There

01:08:48,211 --> 01:08:54,140
exists no level of human knowledge where the leaks stop. Which means, this is the best

01:08:54,140 --> 01:08:59,589
news I have for everybody all day. Whatever level you're at with all the leaky abstractions,

01:08:59,589 --> 01:09:05,350
it's the same all the way down. Take a deep breath and feel relieved. Because the programmers

01:09:05,350 --> 01:09:11,690
that have been telling you you have to learn C because that makes sense, that's the bottom?

01:09:11,690 --> 01:09:16,640
You could learn enough to prove them wrong, but you don't have to. Now you know. They're

01:09:16,640 --> 01:09:24,790
wrong. You will never know it to the bottom. There is no bottom.

01:09:24,790 --> 01:09:28,670
That's sort of a downer of a note to end on. I've complained about everything but I never

01:09:28,670 --> 01:09:33,830
told you what to do. You know what to do when you have a particular problem, learn the things

01:09:33,830 --> 01:09:38,900
for that problem. Don't bias extra hard to the things that look like hardware but not

01:09:38,900 --> 01:09:43,400
really and the people telling you to do that because it's the pure, right thing to do,

01:09:43,400 --> 01:09:46,590
you have my permission to ignore them or send them in my direction and I'll debate with

01:09:46,590 --> 01:09:52,799
them all day and you can happily get back to what you were doing. Thank you very much.

01:09:52,799 --> 01:09:55,640
There's a longer blog post about the same thing. Go out and get better. You folks are

01:09:55,640 --> 01:09:57,170
the future. Use the past where it suits you and don't where it doesn't. Use your instincts.

01:09:57,170 --> 01:09:58,170
You're doing it right. Thank you. [ Applause ]

01:09:58,170 --> 01:09:59,170
>> We're close. Next on deck is Dee Dee. Are you here? Yes? Come on up. Oh. We made it.

01:09:59,170 --> 01:10:00,170
Hold on a second. This might work out perfectly. Come on up. So, Jack and Brandon, you are

01:10:00,170 --> 01:10:01,940
next on the list. But, I am wondering if you would be so kind as to give up the remainder

01:10:01,940 --> 01:10:03,000
of your time to our final speaker? You're good? Jack? Are you here? Are you okay giving

01:10:03,000 --> 01:10:04,000
up she has a slightly longer talk and it ends up working that we don't have exactly the

01:10:04,000 --> 01:10:06,170
right amount of time. Is that okay? >> I'll do it later.

01:10:06,170 --> 01:10:12,210
>> I will clear out this room and just leave the mic on and he's free. I won't be running

01:10:12,210 --> 01:10:14,360
it. He is free to do that. >> [ Off mic ].

01:10:14,360 --> 01:10:15,360
>> We can make it work. I won't be here. The room will be open. So... all right. Go! I'm

01:10:15,360 --> 01:10:16,360
taking up time. >> Hi. I'm Dave Aronson, the T Rex of Codosaur.us.

01:10:16,360 --> 01:10:23,490
And I have been learning Elixir as so many Rubyists do. One of the strange things about

01:10:23,490 --> 01:10:32,780
languages that use immutable data is the tradition seems to be to prepend to the beginning of

01:10:32,780 --> 01:10:39,720
a list rather than append to the end of it like we're used to. And I was wondering why

01:10:39,720 --> 01:10:45,350
and somebody finally gave me an explanation that clicked for me and I'm gonna share that

01:10:45,350 --> 01:10:50,140
with you. The way lists are usually implemented in most

01:10:50,140 --> 01:10:55,910
languages, especially with immutable data really boils down to the classic data structure

01:10:55,910 --> 01:11:02,560
of the singly linked list. And each node has a piece of data and a pointer to the next

01:11:02,560 --> 01:11:07,910
one. The pointer reference, whatever appropriate for that language. So, let's take a look at

01:11:07,910 --> 01:11:15,890
how appending works under that sort of paradigm with mutable data. First we have an element.

01:11:15,890 --> 01:11:21,190
Let's call it A. It's got this data of A, and I'm using the convention that it's next

01:11:21,190 --> 01:11:27,390
pointer points down rather than at another node to signify that it's the last thing in

01:11:27,390 --> 01:11:34,400
the list. In Ruby this would probably be nil, in C, it would be null, in other languages,

01:11:34,400 --> 01:11:44,970
nothing, or maybe elzilterino if you're not into the brevity thing. So, we have this here.

01:11:44,970 --> 01:11:55,710
Okay. Fine. And same with appending C and D. So, far, so good. Straight out of the textbooks.

01:11:55,710 --> 01:12:02,200
But now let's try that with immutable data. I have fast forwarded to where we have already

01:12:02,200 --> 01:12:08,880
got A, B, and C, and we want to append D. If we follow the same steps as before, we

01:12:08,880 --> 01:12:15,590
create D with a null next pointer and change C to point to D, be You can't do that with

01:12:15,590 --> 01:12:22,840
immutable data, because you would be mutating C's next pointer. So, instead, we have to

01:12:22,840 --> 01:12:30,150
create a whole new C, so call it C prime and make that point to D. But that means that

01:12:30,150 --> 01:12:36,310
all of the previous pointers and references to C are now invalid and need to be updated,

01:12:36,310 --> 01:12:45,210
such as B's next pointer so we change that to point to C? No. You just can't do that

01:12:45,210 --> 01:12:51,890
with immutable data, so we have to create a whole new B to point to C and similarly

01:12:51,890 --> 01:12:56,370
all the way back to the beginning of the list. In this case, we've only got a few elements,

01:12:56,370 --> 01:13:03,640
be If you've got a lot, that can take quite a while. So, this basically takes the appending

01:13:03,640 --> 01:13:10,770
of an item from a quick, constant time operation to being linearly proportional to the length

01:13:10,770 --> 01:13:14,460
of the list, however many elements are already there.

01:13:14,460 --> 01:13:24,770
Worse yet, since that is done for every element you append, then it's effectively multiplied

01:13:24,770 --> 01:13:29,830
so rather than being linear, you have linear times linear, which is quadratic, so it is

01:13:29,830 --> 01:13:35,120
proportional roughly to the square of the number of elements you're processing.

01:13:35,120 --> 01:13:42,870
Now let's look at prepending. We've got element A with a null next pointer. Create B, already

01:13:42,870 --> 01:13:51,400
pointing at A. And then we have to do nothing. We're done. And likewise for prepending C

01:13:51,400 --> 01:13:57,300
and D. No muss, no fuss, no mutation, no extra mutation, no garbage creation for later collect

01:13:57,300 --> 01:14:07,580
ation. It's back to a reasonable linear time to process the whole list. But wait, there's

01:14:07,580 --> 01:14:16,090
more. The list is backwards. But most languages, modern languages, anyway, not C, include a

01:14:16,090 --> 01:14:24,290
way to reverse a list. This does take a little time, but it's trivial and only linearly proportional

01:14:24,290 --> 01:14:30,610
to the length of the list. But most importantly, it's only done once. So, rather than multiplying,

01:14:30,610 --> 01:14:40,880
it is simply added to the other processing of the list. So, we stay proportional. We

01:14:40,880 --> 01:14:46,670
stay linearly proportional. And this is a big win over the quadratic performance of

01:14:46,670 --> 01:14:49,739
appending with mutable data and that is why we prepend.

01:14:49,739 --> 01:14:50,739
[ Applause ]

01:14:50,739 --> 01:14:51,739
>> He did that whole thing and didn't say the word concel, which I think is amazing.

01:14:51,739 --> 01:14:52,739
Are we ready to go?

01:14:52,739 --> 01:14:53,739
Yeah. I'm sorry. Both of you. This will be our last one. This is probably over already.

01:14:53,739 --> 01:14:54,739
But I yeah. So, sorry about that. We almost did it.

01:14:54,739 --> 01:14:55,739
>> Thanks for sticking around. Anybody got a who's getting hot chicken tonight? You ready?

01:14:55,739 --> 01:14:56,739
>> We're ready. >> Okay. I guess I'll have to leave your hot

01:14:56,739 --> 01:14:59,750
chicken plans on the table. So, please. >> Thank you so much. This clocks in right

01:14:59,750 --> 01:15:08,020
at 7 minutes, so huge thanks to whomever said they would give up their time. I'm a back

01:15:08,020 --> 01:15:13,080
end software engineer. This is not my first career, although I have been in this career

01:15:13,080 --> 01:15:19,190
for about five years. But tonight I wanted to talk about brainstorming with introverts.

01:15:19,190 --> 01:15:25,520
In Susan Cane's book entitle quiet, the power of introverts in a world that can't stop talking,

01:15:25,520 --> 01:15:33,290
she says that brainstorming is essentially ineffective. I certainly understand her reasons

01:15:33,290 --> 01:15:39,120
and I wholeheartedly believe in collaboration and think that there is a way to improve our

01:15:39,120 --> 01:15:45,610
brainstorming strategies and make it work for everyone on the team. So, group synergy

01:15:45,610 --> 01:15:51,480
is when a group's achievements surpass even the most qualified individual's potential.

01:15:51,480 --> 01:15:57,660
Have any of you ever experienced this? It can be magical when it happens. Harvard business

01:15:57,660 --> 01:16:04,440
school actually has developed a team exercise to measure group synergy. They call it SSS.

01:16:04,440 --> 01:16:12,670
It stands for subArctic survival situation. So the context is that your group has survived

01:16:12,670 --> 01:16:18,190
a plane crash in the Arctic and you have salvaged some items from the wreck. Each person is

01:16:18,190 --> 01:16:24,700
asked to rank the items according to most critical for survival. Here is that list of

01:16:24,700 --> 01:16:29,290
items. And after each person ranks the items on their own, they come together and rank

01:16:29,290 --> 01:16:35,020
them as a group. Then the individual's ranking and the group's ranking are compared to an

01:16:35,020 --> 01:16:39,810
expert's ranking. If group synergy has been achieved, the group's ranking is closer to

01:16:39,810 --> 01:16:46,540
the experts than any one individual. How would we expect this to go if the team members who

01:16:46,540 --> 01:16:54,630
have actual experience and knowledge are introverts? I can tell you likely not well. So, here are

01:16:54,630 --> 01:16:59,000
some attributes of introverts and extroverts. You might have a sense of which of these best

01:16:59,000 --> 01:17:06,080
describes you. It's really more of a spectrum. While most are not on the extreme ends of

01:17:06,080 --> 01:17:14,190
the spectrum, as a culture we have extrovert bias. This may be hard to face whether you're

01:17:14,190 --> 01:17:22,560
an introvert or extrovert. Many introverts try to be extrovert pretenders. You force

01:17:22,560 --> 01:17:28,250
yourself to speak up, try to be witty, go to the meet ups, but inside this is how you

01:17:28,250 --> 01:17:38,801
clear. Introverts are not necessarily shy. Many actually like people. I know I do. Just

01:17:38,801 --> 01:17:45,190
not all of you at once. One on one, I could probably talk to you for hours. Consider this

01:17:45,190 --> 01:17:51,200
list. These are all introverts. They are or have been incredibly successful. They have

01:17:51,200 --> 01:17:57,000
changed the world in their own way. I promise you, you want to know what the introverts

01:17:57,000 --> 01:18:01,590
around you are thinking. More than that, you and your team can benefit greatly from all

01:18:01,590 --> 01:18:06,440
they have to contribute. Of course, you also need extroverts. Not trying to leave anyone

01:18:06,440 --> 01:18:12,560
out. But remember that extrovert bias? I'm not here to convince you about extroverts.

01:18:12,560 --> 01:18:19,191
We already like them and see their value. Roughly 35 to 50%of us are introverts. That's

01:18:19,191 --> 01:18:28,250
including the extrovert wannabes? How do we harness the power of introverts during meetings?

01:18:28,250 --> 01:18:33,020
If you want to know what an extrovert is thinking, just listen. And if you want to know what

01:18:33,020 --> 01:18:38,670
an introvert is thinking, you're gonna have to ask. The processing formula for extroverts

01:18:38,670 --> 01:18:45,670
is talk, think a bit, and talk some more. The processing formula for inintroverts is

01:18:45,670 --> 01:18:51,630
to think a lot and deeply and maybe talk a little and then to think some more.

01:18:51,630 --> 01:18:56,790
So here are my tips for maximizing input from the quiet thinkers on your team and things

01:18:56,790 --> 01:19:05,770
you can do before during and after your meetings. Publish your topics early. Solicit questions

01:19:05,770 --> 01:19:12,310
in advance, consider anonymity. This gives introverts the chance to do thinking they

01:19:12,310 --> 01:19:16,790
need to do before actually talking. And you might be surprised who contributes if there

01:19:16,790 --> 01:19:23,780
is time to prepare. And if you really don't need to know who came up with something, consider

01:19:23,780 --> 01:19:30,870
letting it be anonymous. You will not be disappointed. Now this is the most critical stage for successful

01:19:30,870 --> 01:19:38,280
brainstorming. A committed moderator is interested in everyone's input. They are firm and respectful.

01:19:38,280 --> 01:19:42,330
They can pivot easily and aren't afraid to take the reigns to get things back on track

01:19:42,330 --> 01:19:48,091
when needed. Establishing ground rules can radically change a group's dynamics. This

01:19:48,091 --> 01:19:54,040
is a chance to set the stage for broad participation. One person talking at a time is an essential

01:19:54,040 --> 01:20:01,880
ground rule. Extroverts interrupt. They can't help it. We can call it interjecting. Soliciting

01:20:01,880 --> 01:20:11,190
your group for and a committed moderator will enforce the ground rules. I love sticky notes

01:20:11,190 --> 01:20:19,870
with pens or pencils. Have people write it down. Allow plenty of time. Try answering

01:20:19,870 --> 01:20:25,580
in the round. This gives introverts a place in line, time to think, and doesn't require

01:20:25,580 --> 01:20:32,420
interjection. Try using smaller groups within your larger group. You could solicit anonymous

01:20:32,420 --> 01:20:38,810
ideas about how they would like to contribute to the discussion before it even starts.

01:20:38,810 --> 01:20:47,230
Now I do have a few additional tips for extroverts. Cultivate curiosity. This is code for allow

01:20:47,230 --> 01:20:53,290
some silence. Silence, at least a small slice of it is generally necessary for an introvert

01:20:53,290 --> 01:21:01,300
to even start speaking. Maybe be the third instead of the first to respond in a situation.

01:21:01,300 --> 01:21:08,100
This will take some restraint. Give everyone the chance to speak once before you speak

01:21:08,100 --> 01:21:13,650
twice. Maybe even invite an introvert to contribute. Remember if you want to know what they're

01:21:13,650 --> 01:21:20,780
thinking, you're gonna have to ask. Of course I also have tips for introverts.

01:21:20,780 --> 01:21:24,400
Write your thoughts down ahead of time. This will help you do the processing so when the

01:21:24,400 --> 01:21:32,270
time comes you're ready to say what you wanna say. Practice speaking before you feel ready.

01:21:32,270 --> 01:21:38,960
Practice will help. Ask for additional time if you need it. And remember that your team

01:21:38,960 --> 01:21:46,750
will be even better with your contributions. After you've achieved after your meeting,

01:21:46,750 --> 01:21:50,880
if you have achieved group synergy, you will have the afterglow of great group discussion

01:21:50,880 --> 01:21:58,590
that was creative and inspiring. Remember how introverts keep thinking after the talking?

01:21:58,590 --> 01:22:04,840
Maybe use an asynchronous doc to capture the follow up thoughts. Maybe build on the session

01:22:04,840 --> 01:22:12,360
to go deeper. And finally reflect. Was group synergy achieved? Are there improvements or

01:22:12,360 --> 01:22:17,400
adjustments that can be made for the next discussion? Thanks so much for listening.

01:22:17,400 --> 01:22:18,400
[ Applause ]

01:22:18,400 --> 01:22:19,400
>> All right. Thanks, everybody. That'll do it. Thanks for sticking around. Thanks for

01:22:19,400 --> 01:22:19,411

YouTube URL: https://www.youtube.com/watch?v=7TrKS8ZiTyI


