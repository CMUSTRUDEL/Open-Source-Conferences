Title: Ruby Conf 2013 - Under the Influence by Zachary Scott
Publication date: 2020-01-27
Playlist: RubyConf 2013
Description: 
	What inspires you?

Hopefully you can answer this question without too much hesitation. If it weren't for several very important influences, our beloved Ruby would be drastically different. Could you imagine?

This talk will open your eyes to archiac forms of writing software. We will expand your mind with new ideas in light of what we already know and are familiar with.

Let's explore Ruby's programming roots with some accidental code written in languages both incluenced by and influential to the language we know and love.

Help us caption & translate this video!

http://amara.org/v/FG5Q/
Captions: 
	00:00:17,240 --> 00:00:19,120
ZACHARY SCOTT: So I'm Zach.

00:00:19,120 --> 00:00:20,620
Nice to meet you all.

00:00:27,860 --> 00:00:32,600
Title of the talk's Under the Influence, and I'm

00:00:32,609 --> 00:00:38,280
gonna talk about a few Ruby languages and I'll

00:00:38,280 --> 00:00:41,800
tell you what they are in a second.

00:00:41,800 --> 00:00:45,289
And how they're related to Ruby, and a little

00:00:45,289 --> 00:00:49,190
bit about them. We're gonna look at some code.

00:00:49,190 --> 00:00:52,149
That's my plan.

00:00:52,149 --> 00:00:53,309
My hopes for you at the end of this

00:00:53,309 --> 00:00:57,660
talk are you'll get some sort of level of

00:00:57,660 --> 00:01:03,769
familiarity with these languages, and that's always good. I

00:01:03,769 --> 00:01:06,650
hope you feel inspired to try out these things

00:01:06,650 --> 00:01:11,090
and experiment with new stuff. Try something new that

00:01:11,090 --> 00:01:17,020
you've never tried before. Try something old.

00:01:17,020 --> 00:01:23,790
But encourage you to do something.

00:01:23,790 --> 00:01:26,580
A lot of these talks, even at this conference

00:01:26,580 --> 00:01:29,120
and a lot of conferences in general, are based

00:01:29,120 --> 00:01:34,740
on, like, getting something done or how, like, how

00:01:34,740 --> 00:01:36,960
to do something better, how to get better at

00:01:36,960 --> 00:01:40,310
something. Or, you know, we're very focused on, like,

00:01:40,310 --> 00:01:46,020
performance and speed, efficiency.

00:01:46,020 --> 00:01:48,430
And I don't really want to talk about that

00:01:48,430 --> 00:01:50,540
stuff. I want to talk about something fun and

00:01:50,540 --> 00:01:53,390
something I thought was interesting, and I hope you

00:01:53,390 --> 00:01:57,710
find interesting, so.

00:01:57,710 --> 00:02:00,110
I'm also not an expert. I'm standing up here,

00:02:00,110 --> 00:02:01,800
but I have no, like, I just learned these

00:02:01,800 --> 00:02:05,790
languages in, like, two weeks to prepare this talk.

00:02:05,790 --> 00:02:11,190
So if you have any questions at the end,

00:02:11,190 --> 00:02:13,360
please just hold them, and then you can ask

00:02:13,360 --> 00:02:17,890
me on Twitter or, you know, just come up

00:02:17,890 --> 00:02:19,810
to me, say hi, and you know, we can

00:02:19,810 --> 00:02:21,840
talk about these things. I'm really interested in them,

00:02:21,840 --> 00:02:23,400
too. You probably know way more than I do.

00:02:23,400 --> 00:02:27,060
But for some reason I'm here.

00:02:27,060 --> 00:02:29,840
And I chose, I chose to do this because

00:02:29,840 --> 00:02:31,910
a lot of, a lot of times people give,

00:02:31,910 --> 00:02:35,000
like, the same talk over and over again, and

00:02:35,000 --> 00:02:37,390
I really want to just do something new that

00:02:37,390 --> 00:02:42,880
I've never done before. Challenge myself. Make something that

00:02:42,880 --> 00:02:45,650
represents something that I'm really interested in but have

00:02:45,650 --> 00:02:49,370
never tried.

00:02:49,370 --> 00:02:54,490
And the languages I'll announce in a second, I

00:02:54,490 --> 00:02:58,900
chose them because they either inspired parts of Ruby

00:02:58,900 --> 00:03:01,520
language - the design of Ruby - or were

00:03:01,520 --> 00:03:05,740
inspired by Ruby directly.

00:03:05,740 --> 00:03:09,150
So you have old and - I thought it

00:03:09,150 --> 00:03:11,750
was really interesting when I was looking up some

00:03:11,750 --> 00:03:14,600
of the documentation for one of these languages. They

00:03:14,600 --> 00:03:18,580
said, consider very carefully before using this code for

00:03:18,580 --> 00:03:25,580
anything mission-critical.

00:03:26,120 --> 00:03:29,660
That's kind of a point.

00:03:29,660 --> 00:03:31,740
So on with it.

00:03:31,740 --> 00:03:35,569
The first language is Dylan. And it was designed

00:03:35,569 --> 00:03:39,990
by Apple in the like the mid-90s, and CMU

00:03:39,990 --> 00:03:44,099
is Carnegie Mellon University, they produce like a Unix

00:03:44,099 --> 00:03:48,270
implementation of the language, which I used in learning

00:03:48,270 --> 00:03:51,300
this. I just downloaded like the compiler and just

00:03:51,300 --> 00:03:53,440
like used it on my Mac. It's pretty easy

00:03:53,440 --> 00:03:55,560
to get started. There's a lot of great documentation.

00:03:55,560 --> 00:03:57,910
I submitted a few patches in learning the, in

00:03:57,910 --> 00:04:00,800
learning the language to like, help fix the documentation.

00:04:00,800 --> 00:04:03,300
So always find it's really good to like mix

00:04:03,300 --> 00:04:06,330
some opensource in with learning something. And it's always

00:04:06,330 --> 00:04:08,140
good to do that, like give back what you

00:04:08,140 --> 00:04:10,709
gain.

00:04:10,709 --> 00:04:15,319
The other one is Perl. Probably not something you,

00:04:15,319 --> 00:04:17,319
most people don't know, but I see a lot

00:04:17,319 --> 00:04:19,499
of new faces here, and a lot of new

00:04:19,499 --> 00:04:22,039
Rubyists, and people new to the community. So I

00:04:22,039 --> 00:04:23,889
think Perl might be a little shocking to some

00:04:23,889 --> 00:04:27,389
people, how similar it is. So I chose that.

00:04:27,389 --> 00:04:31,330
I'm also using, like, some weird features of Perl

00:04:31,330 --> 00:04:35,289
that really only exist, like, recently, so it doesn't

00:04:35,289 --> 00:04:39,249
really apply that great, but it's there. SO I

00:04:39,249 --> 00:04:39,870
used it.

00:04:39,870 --> 00:04:44,059
Another one is Slash. Slash was developed recently, in

00:04:44,059 --> 00:04:46,629
the last few years, by a Ruby committer named

00:04:46,629 --> 00:04:53,069
Charlie Sumnerville. And he is, like, less than twenty

00:04:53,069 --> 00:04:56,729
years old, and created his own language. I thought

00:04:56,729 --> 00:04:59,069
that was really great. Really inspiring.

00:04:59,069 --> 00:05:00,159
So I want to talk about it, I wanted

00:05:00,159 --> 00:05:02,139
to learn it, I wanted to figure it out.

00:05:02,139 --> 00:05:07,979
And so I chose that one.

00:05:07,979 --> 00:05:13,159
So the first part, basically the plan is, look

00:05:13,159 --> 00:05:15,330
at some Ruby code, and then look at like,

00:05:15,330 --> 00:05:19,830
the equivalent Ruby code in these other languages, and

00:05:19,830 --> 00:05:23,759
hopefully figure it out.

00:05:23,759 --> 00:05:25,650
So this is some Ruby code, right. We start

00:05:25,650 --> 00:05:30,870
out very simply with variables, right. So my cat

00:05:30,870 --> 00:05:37,580
is Ginger. That's his name. You should know this

00:05:37,580 --> 00:05:39,759
by now.

00:05:39,759 --> 00:05:43,960
And the Dylan equivalent looks something like this. So

00:05:43,960 --> 00:05:47,520
you define a variable, and they use, like, lisp

00:05:47,520 --> 00:05:51,689
style variable declarations. Or any symbol, really, is has

00:05:51,689 --> 00:05:54,900
dashes instead of underscores. I think you can use

00:05:54,900 --> 00:05:59,240
underscores. It didn't really work. But - so that's

00:05:59,240 --> 00:05:59,930
Dylan.

00:05:59,930 --> 00:06:04,469
You have types. Dylan has types. You can define

00:06:04,469 --> 00:06:08,819
your own types. They're not really statically-typed. It's more

00:06:08,819 --> 00:06:13,770
like a dynamic language, hence Dylan.

00:06:13,770 --> 00:06:17,839
And then you have the Perl version. So my

00:06:17,839 --> 00:06:23,080
creates a local variable, and the dollar sign indicates

00:06:23,080 --> 00:06:27,349
that it's a scalar, and we're gonna assign a

00:06:27,349 --> 00:06:28,729
string to it.

00:06:28,729 --> 00:06:32,309
That just basically means it's a, it's a reference

00:06:32,309 --> 00:06:35,469
to that thing. So we can, we can use

00:06:35,469 --> 00:06:38,509
it within the scope of our, our file or

00:06:38,509 --> 00:06:42,099
library or whatever.

00:06:42,099 --> 00:06:48,569
And then here's slash. Slash is like bits of

00:06:48,569 --> 00:06:52,499
PHP mixed in with Ruby and Perl. So you

00:06:52,499 --> 00:06:55,550
have like this open thing. But you don't close

00:06:55,550 --> 00:06:56,879
it.

00:06:56,879 --> 00:07:02,210
Like what is that?

00:07:02,210 --> 00:07:04,369
And then this is very similar to Ruby, so

00:07:04,369 --> 00:07:06,339
there's a, there's a native string class that you

00:07:06,339 --> 00:07:11,909
can initialize a new object.

00:07:11,909 --> 00:07:16,059
More on types. So this is some Ruby. You

00:07:16,059 --> 00:07:20,849
have integers and you have an array. In about

00:07:20,849 --> 00:07:24,649
April, Ginger will be three years old. So his

00:07:24,649 --> 00:07:27,210
favorite spot is in my office, upside down on

00:07:27,210 --> 00:07:31,149
the papertray. That's just where he likes to hang

00:07:31,149 --> 00:07:33,539
out. I don't know.

00:07:33,539 --> 00:07:38,499
The Dylan equivalent is this. So you have a

00:07:38,499 --> 00:07:40,439
number, is an integer. You have different types of

00:07:40,439 --> 00:07:41,860
numbers like Ruby, like where you'd have like a

00:07:41,860 --> 00:07:44,360
bignum, something like that. But I just stick to

00:07:44,360 --> 00:07:46,099
numbers, cause they're really easy.

00:07:46,099 --> 00:07:47,699
And a hash is basically a table, so it's

00:07:47,699 --> 00:07:49,029
just a hash table. So they just call it

00:07:49,029 --> 00:07:50,580
a table.

00:07:50,580 --> 00:07:53,699
And vectors a type of array. They have different

00:07:53,699 --> 00:08:00,699
sequences, so you can have like different types with

00:08:02,020 --> 00:08:04,809
arrays. Associative arrays, things like that. And vector is

00:08:04,809 --> 00:08:06,719
like the basic - it's almost like a list,

00:08:06,719 --> 00:08:10,550
right, in lisp. So you just have, like, elements

00:08:10,550 --> 00:08:13,520
in this thing.

00:08:13,520 --> 00:08:17,189
And this is basically their symbol. So you don't

00:08:17,189 --> 00:08:20,039
have string keys, you have symbol keys, and that's

00:08:20,039 --> 00:08:23,389
how you define a symbol.

00:08:23,389 --> 00:08:25,379
Perl looks something like this. It's very similar to

00:08:25,379 --> 00:08:28,419
Ruby. We have a list, and this is a

00:08:28,419 --> 00:08:31,779
hash is denoted by the hash rocket things, and

00:08:31,779 --> 00:08:34,979
these bare words. Which, you could have string keys,

00:08:34,979 --> 00:08:36,589
or you could just use, like, those get in

00:08:36,589 --> 00:08:39,259
turned in symbols, I think, somehow.

00:08:39,259 --> 00:08:42,169
Oh, and the percentage sign is like a hash,

00:08:42,169 --> 00:08:47,870
and the at sign is like an array, basically.

00:08:47,870 --> 00:08:52,990
This is slash. It's basically identical to the Ruby

00:08:52,990 --> 00:08:59,990
version, right. They're the same - just different colors.

00:09:01,060 --> 00:09:05,310
That's how, that's how vhim interprets, so I use

00:09:05,310 --> 00:09:07,920
a really - when I was writing this code,

00:09:07,920 --> 00:09:13,220
I used a very high-level, like complicated development environment

00:09:13,220 --> 00:09:19,480
called colored pencils.

00:09:19,480 --> 00:09:23,430
They worked really well.

00:09:23,430 --> 00:09:26,779
So methods are a big part of Ruby, and

00:09:26,779 --> 00:09:30,089
a big part of organizing your code, right. So

00:09:30,089 --> 00:09:33,440
when Ginger turns three - I also love that

00:09:33,440 --> 00:09:36,250
I forgot the N on this. But Ruby has

00:09:36,250 --> 00:09:41,970
Ns.

00:09:41,970 --> 00:09:43,940
And his mom and dad are Greta and Walter,

00:09:43,940 --> 00:09:47,500
who my mom bred, bred them. And I got

00:09:47,500 --> 00:09:50,269
like, the last cat. So he's like the golden

00:09:50,269 --> 00:09:54,240
child, basically.

00:09:54,240 --> 00:10:01,240
And the, the Perl, the Dylan equivalent, you define

00:10:01,339 --> 00:10:05,790
methods - Dylan also has functions. The interesting part

00:10:05,790 --> 00:10:08,970
is right here, where you have your arguments, you

00:10:08,970 --> 00:10:11,740
specify the type that they are. And that is

00:10:11,740 --> 00:10:15,480
basically how Dylan figures out, like, it's method dispatch.

00:10:15,480 --> 00:10:19,839
How it decides what object this method is attached

00:10:19,839 --> 00:10:23,389
So it doesn't actually have singleton methods, like I

00:10:23,389 --> 00:10:27,589
defined, but it has something similar.

00:10:27,589 --> 00:10:30,129
And this is, like, the return. So since I'm

00:10:30,129 --> 00:10:35,779
just formatting a string and printing that, then there

00:10:35,779 --> 00:10:42,779
is no return. It's a void.

00:10:46,079 --> 00:10:53,079
I'm really thirsty. Give me a moment. It's dry

00:11:02,769 --> 00:11:09,769
in Miami. It's juice. Strong juice.

00:11:12,180 --> 00:11:18,490
What were we talking about? Perl. This is Perl,

00:11:18,490 --> 00:11:25,490
right? Yeah. So calling a method, like join, you

00:11:27,389 --> 00:11:31,259
can actually, in some cases, like Ruby, you can

00:11:31,259 --> 00:11:35,680
omit the paranthesis. Which is cool.

00:11:35,680 --> 00:11:37,800
Sometimes you can't. I haven't quite figured out when

00:11:37,800 --> 00:11:41,029
and where and why. When I do I'll let

00:11:41,029 --> 00:11:43,350
you know. Maybe you know - you can tell

00:11:43,350 --> 00:11:44,569
me after.

00:11:44,569 --> 00:11:49,029
Oh yeah, there's this - there's this thing, which

00:11:49,029 --> 00:11:51,790
Matz also brought into Ruby. Which I have no

00:11:51,790 --> 00:11:56,699
idea what it means. It's there. You use it

00:11:56,699 --> 00:11:58,540
- I don't know. Look at the documentation. It's

00:11:58,540 --> 00:12:01,420
there, and it's basically like, what, what you passed

00:12:01,420 --> 00:12:03,649
in. You don't have arguments. You just like, use

00:12:03,649 --> 00:12:08,850
this thing or you shift off the arguments. It's

00:12:08,850 --> 00:12:10,180
magic.

00:12:10,180 --> 00:12:12,339
Slash is cool. It's very similar to Ruby, right.

00:12:12,339 --> 00:12:16,699
You can't omit paranthesis. You have to use them.

00:12:16,699 --> 00:12:21,180
And you can call methods on an object, because

00:12:21,180 --> 00:12:24,870
everything is basically an object.

00:12:24,870 --> 00:12:28,110
There's some instances where they're not, but I haven't

00:12:28,110 --> 00:12:29,259
quite figured that out.

00:12:29,259 --> 00:12:33,490
The other really cool part about this is that's

00:12:33,490 --> 00:12:39,930
a comment, and so is that.

00:12:39,930 --> 00:12:42,149
But my syntax highlighter didn't understand it. It wasn't

00:12:42,149 --> 00:12:45,040
good enough. It's too new. SO I had to,

00:12:45,040 --> 00:12:49,889
I had to, I had to use different colors.

00:12:49,889 --> 00:12:53,560
Same with, same thing with the intropolation. So years_old

00:12:53,560 --> 00:12:57,069
is a variable that I intrapolate into that string,

00:12:57,069 --> 00:12:58,870
and it's the same color. Usually we're used to

00:12:58,870 --> 00:13:05,870
seeing different colors, but. I'm not that good yet.

00:13:06,610 --> 00:13:11,529
Expressions. So in Ruby you have this, this is

00:13:11,529 --> 00:13:13,290
probably the coolest thing about Ruby is you can

00:13:13,290 --> 00:13:17,639
have post fix. Post fix expressions, right.

00:13:17,639 --> 00:13:22,500
You can call even or odd come with the

00:13:22,500 --> 00:13:27,029
native number in the number classes. And you can

00:13:27,029 --> 00:13:30,279
do things like math. I'm pretty sure that's right,

00:13:30,279 --> 00:13:35,560
although I probably got it wrong. I'm not, I

00:13:35,560 --> 00:13:37,939
wouldn't be surprised.

00:13:37,939 --> 00:13:42,209
That's Dylan. No post fix conditionals. They don't have

00:13:42,209 --> 00:13:44,680
that. So you have to do something like if

00:13:44,680 --> 00:13:48,740
and then and if. I talked to Matz about

00:13:48,740 --> 00:13:52,069
this yesterday, and then he said, originally Ruby had

00:13:52,069 --> 00:13:56,069
and if, but it didn't work when he tried

00:13:56,069 --> 00:13:58,870
to implement post fix conditionals, so he got rid

00:13:58,870 --> 00:14:01,639
of it. That's a little history lesson.

00:14:01,639 --> 00:14:05,029
That's why I'm here.

00:14:05,029 --> 00:14:10,740
The Perl version also - no post fix. And

00:14:10,740 --> 00:14:12,509
no odd or even. You have to do this

00:14:12,509 --> 00:14:17,129
thing, just like modules. And that's probably right. I

00:14:17,129 --> 00:14:19,499
assume so. At least it worked when I tried

00:14:19,499 --> 00:14:22,879
it.

00:14:22,879 --> 00:14:27,480
Same thing. My syntax compilator thought my list was

00:14:27,480 --> 00:14:33,589
a comment. So the rest of that line -

00:14:33,589 --> 00:14:38,430
you get the idea.

00:14:38,430 --> 00:14:43,240
So the next part. OK.

00:14:43,240 --> 00:14:45,439
That was the basics. Hopefully you got a good

00:14:45,439 --> 00:14:49,769
idea of what it's like to write those languages,

00:14:49,769 --> 00:14:54,370
and what they're all about. I could probably have

00:14:54,370 --> 00:14:58,240
explained it better, but there's always next time, right.

00:14:58,240 --> 00:14:59,990
Next RubyConf.

00:14:59,990 --> 00:15:06,990
Objects. Let's talk about objects. That's a lot of

00:15:08,670 --> 00:15:10,629
code.

00:15:10,629 --> 00:15:17,629
Where do I start?

00:15:18,509 --> 00:15:22,089
My cat is Ginger. My cat's favorite toy is

00:15:22,089 --> 00:15:24,560
a white mouse. He loves that thing - it

00:15:24,560 --> 00:15:27,550
has, like, it rattles and he plays hockey with

00:15:27,550 --> 00:15:32,769
it. Sometimes he plays with different toys, so I

00:15:32,769 --> 00:15:34,269
can change that on him. I can give him

00:15:34,269 --> 00:15:36,300
a tinfoil ball - he loves that too. It's

00:15:36,300 --> 00:15:38,759
free. Well, close to free.

00:15:38,759 --> 00:15:41,019
And he also has some really good friends in

00:15:41,019 --> 00:15:45,100
the community. Gorby is one. He loves Gorby. Sea-Tac

00:15:45,100 --> 00:15:49,499
is his favorite, cause she's just loud. Wabi and

00:15:49,499 --> 00:15:51,800
Sabi, if you don't know them, they're like cows,

00:15:51,800 --> 00:15:56,680
but cats at the same time. It's amazing.

00:15:56,680 --> 00:16:02,519
Again with the cats. Very original.

00:16:02,519 --> 00:16:08,889
This is the Dylan version. So when I define

00:16:08,889 --> 00:16:13,480
a variable, and I want a method that has,

00:16:13,480 --> 00:16:18,449
like a default keyword argument, you can see, on

00:16:18,449 --> 00:16:21,499
like the third or fourth line, it says Key_toy

00:16:21,499 --> 00:16:24,089
and then the string. And that, assign that to

00:16:24,089 --> 00:16:25,879
the white mouse.

00:16:25,879 --> 00:16:30,290
So you have keyword arguments. And you, and you

00:16:30,290 --> 00:16:34,889
also have rest, which is like, splat, no, not

00:16:34,889 --> 00:16:38,889
even splat. It's like something in Ruby that I

00:16:38,889 --> 00:16:44,160
can't think of right now. But you can just

00:16:44,160 --> 00:16:45,559
pass, and then you can just pass in whatever

00:16:45,559 --> 00:16:48,559
arguments and whatever you throw at it, it just

00:16:48,559 --> 00:16:50,269
joins them.

00:16:50,269 --> 00:16:55,290
So that's pretty cool.

00:16:55,290 --> 00:17:02,290
The Perl version. When you're using the at sign,

00:17:02,680 --> 00:17:06,400
and like the magic underscore thing, you know, it

00:17:06,400 --> 00:17:10,180
just says, you know, this is an array. Based

00:17:10,180 --> 00:17:14,520
on what, what context you're using it in and

00:17:14,520 --> 00:17:17,130
what symbol you use. So if I always use

00:17:17,130 --> 00:17:21,890
a dollar sign, that wouldn't work, because it'll see

00:17:21,890 --> 00:17:24,390
the array and Perl will think like, oh I

00:17:24,390 --> 00:17:25,920
need to turn that into a string cause he's

00:17:25,920 --> 00:17:28,060
using the dollar sign.

00:17:28,060 --> 00:17:30,170
So if you use that, you know that. It's

00:17:30,170 --> 00:17:36,750
gonna be an array.

00:17:36,750 --> 00:17:43,750
The slash version - very similar to Ruby. This

00:17:43,910 --> 00:17:47,310
is probably the neat part, where instead of, like,

00:17:47,310 --> 00:17:52,620
rest you have elipses. And you can just assign

00:17:52,620 --> 00:17:56,860
default, defaults in the parameters like you would in

00:17:56,860 --> 00:17:58,880
Ruby.

00:17:58,880 --> 00:18:01,910
The next thing is classes.

00:18:01,910 --> 00:18:05,130
Once you have methods, you might want to abstract

00:18:05,130 --> 00:18:06,420
that into a common thing, right. That's why we

00:18:06,420 --> 00:18:08,580
have object-oriented programming.

00:18:08,580 --> 00:18:15,580
It's a very common pattern that we use often.

00:18:16,220 --> 00:18:18,500
So I can define a cat and I can

00:18:18,500 --> 00:18:21,140
give that cat a name and a color, right.

00:18:21,140 --> 00:18:23,540
We've seen this a hundred times in all of

00:18:23,540 --> 00:18:24,490
our textbooks.

00:18:24,490 --> 00:18:29,490
We never seen it this cool, right?

00:18:29,490 --> 00:18:32,210
The Dylan version, you define a class, and it

00:18:32,210 --> 00:18:36,840
inherits object. So everything in Dylan is basically inherits

00:18:36,840 --> 00:18:39,390
from that. That's like basic object in Ruby has

00:18:39,390 --> 00:18:44,700
no real methods. It's just like a, a way

00:18:44,700 --> 00:18:51,700
to allocate a class.

00:18:53,320 --> 00:18:55,110
When you want to create a new instance of

00:18:55,110 --> 00:19:02,110
an object, you use make. You can also call,

00:19:03,020 --> 00:19:06,200
I think you can call new directly, but make

00:19:06,200 --> 00:19:09,610
specifies that you want this thing to be of

00:19:09,610 --> 00:19:13,900
that type, and call the initializer. We'll get to

00:19:13,900 --> 00:19:18,200
initializers in a moment, but. The barebones version is

00:19:18,200 --> 00:19:21,660
that in Dylan.

00:19:21,660 --> 00:19:24,010
I use Mooth and Perl. I think that's cheating.

00:19:24,010 --> 00:19:27,820
If any of you know Perl, there is actual

00:19:27,820 --> 00:19:30,380
ways to do object oriented programming in it. They're

00:19:30,380 --> 00:19:34,380
kind of tacked on in like the mid '90s.

00:19:34,380 --> 00:19:38,920
Someone, someone had a bright idea and they added

00:19:38,920 --> 00:19:40,560
it. But I don't, I couldn't really figure out

00:19:40,560 --> 00:19:43,120
how to use it. So I used Moose. And

00:19:43,120 --> 00:19:45,560
that gives you like some really helpful things like

00:19:45,560 --> 00:19:50,470
Has, and some other stuff.

00:19:50,470 --> 00:19:53,430
You can get the meta class. And then you

00:19:53,430 --> 00:19:55,860
can, you can print out the name of it.

00:19:55,860 --> 00:19:59,870
I'm guessing, from what I've seen, that all objects

00:19:59,870 --> 00:20:02,070
in Perl have a name thing that you can

00:20:02,070 --> 00:20:03,450
call and it gives you like a string of

00:20:03,450 --> 00:20:05,960
that thing, like a method or a variable, it'll

00:20:05,960 --> 00:20:08,350
just give you back what you called it.

00:20:08,350 --> 00:20:11,160
I might be wrong on that, but, from what

00:20:11,160 --> 00:20:14,460
I was seeing.

00:20:14,460 --> 00:20:18,420
The slash version is really interesting. They don't have

00:20:18,420 --> 00:20:20,300
accessor methods. You have to define your getters and

00:20:20,300 --> 00:20:24,570
setters on your own. So we have, you know,

00:20:24,570 --> 00:20:25,910
we have a color getter, and we have the

00:20:25,910 --> 00:20:29,290
color setter. You do have instance variables, but there

00:20:29,290 --> 00:20:34,710
aren't accessors to them. And I can define to_s

00:20:34,710 --> 00:20:37,070
and I can just print that object, and it

00:20:37,070 --> 00:20:38,810
calls to_s on it in Slash.

00:20:38,810 --> 00:20:43,150
I had to get on Dylan, Perl, Slash, for

00:20:43,150 --> 00:20:45,560
one of my own - OK.

00:20:45,560 --> 00:20:47,880
So you can do that, and you can, you

00:20:47,880 --> 00:20:49,240
can just call class on it and it gives

00:20:49,240 --> 00:20:53,130
you the name of the specific class.

00:20:53,130 --> 00:20:55,050
Before the next part - this is, this is

00:20:55,050 --> 00:21:01,910
critical. Now that you know all this code, you,

00:21:01,910 --> 00:21:04,390
in order to understand the next part, you're gonna

00:21:04,390 --> 00:21:07,880
have to watch this video.

00:21:07,880 --> 00:21:12,130
And if you don't watch it you might miss

00:21:12,130 --> 00:21:17,430
out on the point. So that's Gorby.

00:21:17,430 --> 00:21:24,430
And he's just being Gorby, right. He really likes

00:21:28,590 --> 00:21:35,590
this thing. Wait, it gets better.

00:21:45,100 --> 00:21:52,100
The time zone one.

00:21:58,220 --> 00:22:05,220
I love Gorby. I do. I just love cats

00:22:05,380 --> 00:22:12,380
in general. Hold on, I wanna watch that again.

00:22:16,340 --> 00:22:23,340
All right. So we have Gorby as the class.

00:22:33,760 --> 00:22:35,670
And when you print Gorby, he just wants to

00:22:35,670 --> 00:22:38,340
know one thing. Where the fuck did you put

00:22:38,340 --> 00:22:45,340
that clock?

00:22:49,960 --> 00:22:52,970
You notice I called super, and that called up

00:22:52,970 --> 00:22:57,740
to the to_s method on the cat class, right.

00:22:57,740 --> 00:23:03,450
In Dylan, these things keep tripping me up. Oh,

00:23:03,450 --> 00:23:07,790
my god. You have next method, and what happens

00:23:07,790 --> 00:23:11,970
is in the method dispatch of Dylan, it finds

00:23:11,970 --> 00:23:17,970
these methods that could apply to a given object.

00:23:17,970 --> 00:23:23,490
So it tells you the generic methods that you

00:23:23,490 --> 00:23:25,040
could call on it, and it picks like the

00:23:25,040 --> 00:23:27,790
most specific one to that object, right.

00:23:27,790 --> 00:23:30,590
And it orders them. It says, all right, this

00:23:30,590 --> 00:23:32,890
is the closest one. We're gonna call that one.

00:23:32,890 --> 00:23:34,140
But you also have this one, this one, this

00:23:34,140 --> 00:23:36,470
one, this one, in order.

00:23:36,470 --> 00:23:40,020
And next method will call the next specific method

00:23:40,020 --> 00:23:46,210
in that array. And so in this case, since

00:23:46,210 --> 00:23:50,840
we define puts on the cat class, when we

00:23:50,840 --> 00:23:55,450
redefine it, or we define it again on Gorby,

00:23:55,450 --> 00:24:01,340
because Gorby is also a cat, that's the next

00:24:01,340 --> 00:24:05,090
specific method. So you can call that next method.

00:24:05,090 --> 00:24:06,620
And you can even go up further, on cat,

00:24:06,620 --> 00:24:08,330
and you call next method, and that would call

00:24:08,330 --> 00:24:10,590
the next one, and then the next one.

00:24:10,590 --> 00:24:17,590
So it's sort of like super, but not quite.

00:24:20,460 --> 00:24:22,820
In using this, I think you get super from

00:24:22,820 --> 00:24:25,100
Moose. It might be in Perl itself, but you

00:24:25,100 --> 00:24:29,780
can have Super, and you can override your method,

00:24:29,780 --> 00:24:33,820
and just extend the cat class and implement your

00:24:33,820 --> 00:24:38,860
own cats at your disposal. I do this every

00:24:38,860 --> 00:24:45,660
day in my job. Always cats.

00:24:45,660 --> 00:24:48,150
And this is what the Slash version would look

00:24:48,150 --> 00:24:53,690
like. So you have an initializer using Init, and

00:24:53,690 --> 00:24:57,770
that would be how you, when you call new,

00:24:57,770 --> 00:25:00,930
that's basically what's called, is init. So same as

00:25:00,930 --> 00:25:03,630
initializer in Ruby, and you can set the default

00:25:03,630 --> 00:25:06,690
instance methods. I don't have to re-define the getters

00:25:06,690 --> 00:25:09,090
and the setters. I just get them from cat,

00:25:09,090 --> 00:25:10,750
when I extend cat, I get all that stuff

00:25:10,750 --> 00:25:13,440
for free.

00:25:13,440 --> 00:25:18,140
And then because Slash has no super, that I

00:25:18,140 --> 00:25:21,970
know of, I just allocated a new cat and

00:25:21,970 --> 00:25:25,080
then called to_s on it, which is basically like

00:25:25,080 --> 00:25:28,390
the default, right. It'd be really nice if Slash

00:25:28,390 --> 00:25:31,140
had super, but I don't think it does.

00:25:31,140 --> 00:25:34,850
I think Charlie is here, so maybe, maybe you

00:25:34,850 --> 00:25:37,040
could go find him and ask him.

00:25:37,040 --> 00:25:40,110
So really interesting language, and it's very similar to

00:25:40,110 --> 00:25:47,110
Ruby. And I really like it.

00:25:50,200 --> 00:25:54,420
So let me get to that. That's, that's all

00:25:54,420 --> 00:25:57,640
the code I have to show you. And I'm

00:25:57,640 --> 00:26:04,280
not taking Q & A, sorry.

00:26:04,280 --> 00:26:06,590
But feel free to Tweet at me or find

00:26:06,590 --> 00:26:08,410
me after and ask questions. I don't want to

00:26:08,410 --> 00:26:10,340
take up anymore time. I hope you really enjoyed

00:26:10,340 --> 00:26:14,000
this talk and thanks so much for coming here

00:26:14,000 --> 00:26:16,920
and sharing this experience with me. And I hope

00:26:16,920 --> 00:26:20,660

YouTube URL: https://www.youtube.com/watch?v=Ahx4fbLtBNQ


